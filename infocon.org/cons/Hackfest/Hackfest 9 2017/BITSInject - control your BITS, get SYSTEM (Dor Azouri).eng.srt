1
00:00:00,060 --> 00:00:05,060
hello oh okay that's right I guess

2
00:00:05,060 --> 00:00:10,830
that's my volume okay thank you all for

3
00:00:10,830 --> 00:00:12,690
coming for this session I'm going to

4
00:00:12,690 --> 00:00:15,480
present bits inject which is a tool that

5
00:00:15,480 --> 00:00:18,119
I formed it lets a local administrator

6
00:00:18,119 --> 00:00:21,869
on the local system to run code as the

7
00:00:21,869 --> 00:00:25,769
local system user in session zero it's a

8
00:00:25,769 --> 00:00:29,310
whole new way to abuse the bits service

9
00:00:29,310 --> 00:00:30,869
the Windows bit service that we will

10
00:00:30,869 --> 00:00:33,540
talk about to abuse it to round your

11
00:00:33,540 --> 00:00:36,090
arbitrary program as the local system

12
00:00:36,090 --> 00:00:39,239
user and and actually do many other

13
00:00:39,239 --> 00:00:41,940
manipulations on the jobs queue that

14
00:00:41,940 --> 00:00:45,570
bits maintains and first couple of words

15
00:00:45,570 --> 00:00:48,899
about myself I'm Dora Zoe currently

16
00:00:48,899 --> 00:00:51,480
doing a security research at safe which

17
00:00:51,480 --> 00:00:55,289
in Israel and my experience my

18
00:00:55,289 --> 00:00:58,739
experience in security involve many

19
00:00:58,739 --> 00:01:01,199
different angles I started with data

20
00:01:01,199 --> 00:01:04,319
analysis and to network research and now

21
00:01:04,319 --> 00:01:08,220
doing mostly software research of good

22
00:01:08,220 --> 00:01:10,140
Christian creatures and bed creatures

23
00:01:10,140 --> 00:01:13,500
the bad ones such as malware and

24
00:01:13,500 --> 00:01:15,689
ransomware and the good ones such as

25
00:01:15,689 --> 00:01:20,250
this Windows component and we'll start

26
00:01:20,250 --> 00:01:21,540
for those of you who are not familiar

27
00:01:21,540 --> 00:01:24,090
with the service bits stands for

28
00:01:24,090 --> 00:01:26,009
background intelligent transfer service

29
00:01:26,009 --> 00:01:29,549
it is actually not only a service it's a

30
00:01:29,549 --> 00:01:31,590
mechanism that is composed of the

31
00:01:31,590 --> 00:01:33,479
service which is the client and a

32
00:01:33,479 --> 00:01:35,880
protocol the protocol is defined by

33
00:01:35,880 --> 00:01:36,630
Microsoft

34
00:01:36,630 --> 00:01:39,240
it's called bits and it sits on top of

35
00:01:39,240 --> 00:01:43,530
the HTTP protocol it adds some verb and

36
00:01:43,530 --> 00:01:47,220
headers to allow transfers over HTTP

37
00:01:47,220 --> 00:01:50,280
communication so we start from the

38
00:01:50,280 --> 00:01:53,040
bottom it's it it is a service a Windows

39
00:01:53,040 --> 00:01:55,740
service running in session zero as the

40
00:01:55,740 --> 00:02:00,630
local system user and it is here to

41
00:02:00,630 --> 00:02:04,200
allow other users to transfer files to

42
00:02:04,200 --> 00:02:06,869
download or to upload it is said to be

43
00:02:06,869 --> 00:02:09,449
intelligent I didn't check for the real

44
00:02:09,449 --> 00:02:12,300
reason why but I have some guesses one

45
00:02:12,300 --> 00:02:14,040
is that it has many advantages

46
00:02:14,040 --> 00:02:15,599
features and that you wouldn't expect

47
00:02:15,599 --> 00:02:18,030
from a simple downloader you can it can

48
00:02:18,030 --> 00:02:20,909
handle a rich rise for for your transfer

49
00:02:20,909 --> 00:02:23,750
and it can handle a proxy authentication

50
00:02:23,750 --> 00:02:28,260
it can have your jobs can have expired

51
00:02:28,260 --> 00:02:31,890
expiry date of weeks and months and many

52
00:02:31,890 --> 00:02:33,810
other recoveries that it does with

53
00:02:33,810 --> 00:02:37,500
itself and maybe most notably it is

54
00:02:37,500 --> 00:02:40,280
intelligent because it is meant to

55
00:02:40,280 --> 00:02:42,989
optimize the bandwidth usage it gets

56
00:02:42,989 --> 00:02:46,349
many download and upload jobs to to

57
00:02:46,349 --> 00:02:49,650
handle and it calculates the right time

58
00:02:49,650 --> 00:02:52,319
to transfer each of the files and it is

59
00:02:52,319 --> 00:02:54,180
run in the background you just tell it

60
00:02:54,180 --> 00:02:57,150
what to do which file to transfer and it

61
00:02:57,150 --> 00:03:01,470
does it all alone a couple of more bits

62
00:03:01,470 --> 00:03:03,930
about bits it is here with us since

63
00:03:03,930 --> 00:03:08,040
Windows XP since 2001 and it evolved

64
00:03:08,040 --> 00:03:10,560
since then with the five major versions

65
00:03:10,560 --> 00:03:14,159
we're currently at version 5.0 which is

66
00:03:14,159 --> 00:03:18,150
not that recent version five came out at

67
00:03:18,150 --> 00:03:24,680
2012 and it is used normally and very

68
00:03:24,680 --> 00:03:28,319
very commonly and for software to

69
00:03:28,319 --> 00:03:30,810
download their own updates and the most

70
00:03:30,810 --> 00:03:35,000
notable use is Windows Update and

71
00:03:35,000 --> 00:03:38,849
windows download its own updates using

72
00:03:38,849 --> 00:03:41,940
the the bit server the bit service it

73
00:03:41,940 --> 00:03:43,949
has many advanced features some of them

74
00:03:43,949 --> 00:03:48,180
I already mentioned and other users that

75
00:03:48,180 --> 00:03:50,310
are not Windows Update and that's a very

76
00:03:50,310 --> 00:03:53,849
common are Google Chrome updates are

77
00:03:53,849 --> 00:03:56,389
using bit and Microsoft Office and

78
00:03:56,389 --> 00:04:00,180
onedrive also of Microsoft is using bits

79
00:04:00,180 --> 00:04:03,060
for a synchronization of files for both

80
00:04:03,060 --> 00:04:07,709
upload and download you can see many of

81
00:04:07,709 --> 00:04:10,409
the main events that bits produces in

82
00:04:10,409 --> 00:04:13,439
the event log when you filter the bits

83
00:04:13,439 --> 00:04:17,849
client source I'll start with a quick

84
00:04:17,849 --> 00:04:20,849
demonstration not a demonstration of the

85
00:04:20,849 --> 00:04:22,830
tool I just show you to get a glimpse of

86
00:04:22,830 --> 00:04:25,650
how bits is operating maybe you never

87
00:04:25,650 --> 00:04:27,750
notice it in your system

88
00:04:27,750 --> 00:04:31,170
so for that I'll open one of the

89
00:04:31,170 --> 00:04:36,660
software sorry about that one one of the

90
00:04:36,660 --> 00:04:38,130
software's that use beats

91
00:04:38,130 --> 00:04:50,490
this is a hex editor Neal and when I

92
00:04:50,490 --> 00:04:53,070
open it it looks for it's it's checks

93
00:04:53,070 --> 00:04:54,570
for new versions and it finds a new

94
00:04:54,570 --> 00:04:56,640
version and you can choose to download

95
00:04:56,640 --> 00:05:02,730
the download is done by bits and we will

96
00:05:02,730 --> 00:05:06,510
show you the download has started as you

97
00:05:06,510 --> 00:05:09,180
can see in the status line we will go

98
00:05:09,180 --> 00:05:13,950
and see using the utility called

99
00:05:13,950 --> 00:05:18,210
beats admin it lets you see what's in

100
00:05:18,210 --> 00:05:20,940
the queue in a bit skill and as you can

101
00:05:20,940 --> 00:05:24,710
see a new job has been created and but

102
00:05:24,710 --> 00:05:32,640
to see way okay I didn't catch it in on

103
00:05:32,640 --> 00:05:36,450
time and but what we would see here is a

104
00:05:36,450 --> 00:05:38,970
job I created by hex editor that

105
00:05:38,970 --> 00:05:42,600
downloads file from Exedy to servers to

106
00:05:42,600 --> 00:05:44,850
a temp location and then and the editor

107
00:05:44,850 --> 00:05:50,340
handles there and execute the update and

108
00:05:50,340 --> 00:05:53,550
now for the name of the demo of the of

109
00:05:53,550 --> 00:05:56,250
the tool itself I will use the easy and

110
00:05:56,250 --> 00:06:00,150
the easiest flag that's in the in the

111
00:06:00,150 --> 00:06:03,419
tool the tool is a Python script it

112
00:06:03,419 --> 00:06:05,760
accepts many kind many different

113
00:06:05,760 --> 00:06:08,250
parameters and there's an easy mode to

114
00:06:08,250 --> 00:06:14,130
just give it a path of command to to to

115
00:06:14,130 --> 00:06:16,169
execute and it will be executed in

116
00:06:16,169 --> 00:06:20,070
session 0 as the system user so I just

117
00:06:20,070 --> 00:06:23,240
put it here for a second

118
00:06:30,230 --> 00:06:36,360
we stop we start with a command and run

119
00:06:36,360 --> 00:06:38,430
as an administrator an administrator

120
00:06:38,430 --> 00:06:42,840
kamancheh and we will go to the tool

121
00:06:42,840 --> 00:06:45,979
itself sorry

122
00:06:52,190 --> 00:06:54,770
now as I said before it has many

123
00:06:54,770 --> 00:06:57,630
different parameters to give you can

124
00:06:57,630 --> 00:07:01,470
create your own job and control the

125
00:07:01,470 --> 00:07:04,650
properties and this flag gives us a very

126
00:07:04,650 --> 00:07:09,660
easy way to just execute let's say

127
00:07:09,660 --> 00:07:18,750
command we will go through the details

128
00:07:18,750 --> 00:07:21,390
of what are the different steps that it

129
00:07:21,390 --> 00:07:23,970
that it operates you to get to the

130
00:07:23,970 --> 00:07:29,310
execution and and just for in about a

131
00:07:29,310 --> 00:07:31,350
couple of seconds we will get a pop-up

132
00:07:31,350 --> 00:07:34,020
maybe it will be only it's only on my

133
00:07:34,020 --> 00:07:36,320
screen

134
00:07:40,550 --> 00:07:43,290
the pop-up just tells us that we are

135
00:07:43,290 --> 00:07:48,300
moving to a new service on session zero

136
00:07:48,300 --> 00:07:50,910
is trying to communicate with the active

137
00:07:50,910 --> 00:07:52,520
desktop

138
00:07:52,520 --> 00:07:54,540
unfortunately because it moves to

139
00:07:54,540 --> 00:07:57,390
another session and you won't see it

140
00:07:57,390 --> 00:08:01,950
there and but we have a video of that on

141
00:08:01,950 --> 00:08:08,910
the second demo afterwards and so we'll

142
00:08:08,910 --> 00:08:11,210
move on

143
00:08:28,010 --> 00:08:30,940
now

144
00:08:41,399 --> 00:08:42,610
yeah

145
00:08:42,610 --> 00:08:45,370
so the place that is talking about is

146
00:08:45,370 --> 00:08:48,279
the is the session that we got into with

147
00:08:48,279 --> 00:08:52,990
a command spoon as system and we will

148
00:08:52,990 --> 00:08:55,149
later see another video demonstration

149
00:08:55,149 --> 00:08:59,199
that will show you that on Windows 10 so

150
00:08:59,199 --> 00:09:01,360
let's talk about some background terms

151
00:09:01,360 --> 00:09:03,550
that are important to understand the

152
00:09:03,550 --> 00:09:07,629
method bits can be used by many clients

153
00:09:07,629 --> 00:09:10,300
it comes shipped with a bits admin

154
00:09:10,300 --> 00:09:13,120
client Windows has it built in since

155
00:09:13,120 --> 00:09:16,000
Windows XP it is now deprecated in is is

156
00:09:16,000 --> 00:09:18,790
it is replaced by powershell commandlets

157
00:09:18,790 --> 00:09:23,230
that are especially for beats other

158
00:09:23,230 --> 00:09:26,110
third-party software such as the one we

159
00:09:26,110 --> 00:09:30,100
saw before are using it to go directly

160
00:09:30,100 --> 00:09:31,509
communicate with the common interface

161
00:09:31,509 --> 00:09:35,379
that meets exports all of them are

162
00:09:35,379 --> 00:09:38,620
operating and creating jobs bits jobs

163
00:09:38,620 --> 00:09:42,339
its job each job has a job owner the

164
00:09:42,339 --> 00:09:43,990
owner is the user that originally

165
00:09:43,990 --> 00:09:46,540
created the job and if you use bit admin

166
00:09:46,540 --> 00:09:51,610
as as user called user that user will be

167
00:09:51,610 --> 00:09:54,309
the owner of the job throughout its all

168
00:09:54,309 --> 00:09:56,610
operation it can be of three types

169
00:09:56,610 --> 00:10:00,519
download upload or a very special kind

170
00:10:00,519 --> 00:10:04,509
upload reply all of the operations are

171
00:10:04,509 --> 00:10:07,930
done through the comm interface and bits

172
00:10:07,930 --> 00:10:10,389
operates as a comm server and in proxy

173
00:10:10,389 --> 00:10:14,309
server a local server and that accepts

174
00:10:14,309 --> 00:10:19,300
requests from different clients the the

175
00:10:19,300 --> 00:10:21,970
methods are exported exported by a qmj

176
00:10:21,970 --> 00:10:24,339
our proxy that and and the actual

177
00:10:24,339 --> 00:10:28,290
implementation is done in q MJ q MJ r dl

178
00:10:28,290 --> 00:10:31,389
all of that is supposed to operate

179
00:10:31,389 --> 00:10:33,759
seamlessly with different users and

180
00:10:33,759 --> 00:10:38,230
trying to create and operate different

181
00:10:38,230 --> 00:10:41,699
different jobs and bits has the job of

182
00:10:41,699 --> 00:10:44,259
maintaining this hole in a queue and

183
00:10:44,259 --> 00:10:48,690
even survive after crashes after

184
00:10:48,690 --> 00:10:52,830
a different event and that are not in

185
00:10:52,830 --> 00:10:54,780
the control of the user and for that

186
00:10:54,780 --> 00:10:56,970
reason Microsoft thought that it is a

187
00:10:56,970 --> 00:11:00,540
good solution to use a state file on the

188
00:11:00,540 --> 00:11:03,000
disk the state file is actually a

189
00:11:03,000 --> 00:11:05,970
presentation a binary serialization of

190
00:11:05,970 --> 00:11:08,430
the job objects that are currently in

191
00:11:08,430 --> 00:11:13,260
the queue and it is updated all the time

192
00:11:13,260 --> 00:11:16,980
on every job change when bits needs to

193
00:11:16,980 --> 00:11:20,520
be rerun for example when you open the

194
00:11:20,520 --> 00:11:24,480
computer it loads all the content of the

195
00:11:24,480 --> 00:11:26,870
file it's DC realizes all the jobs and

196
00:11:26,870 --> 00:11:29,670
load it into memory and continue the

197
00:11:29,670 --> 00:11:32,490
operation and serialization and

198
00:11:32,490 --> 00:11:35,580
deserialization has always been and is

199
00:11:35,580 --> 00:11:39,410
still a very fertile ground for

200
00:11:39,410 --> 00:11:42,870
injecting arbitrary data and expecting

201
00:11:42,870 --> 00:11:45,630
well unexpected unexpected behavior and

202
00:11:45,630 --> 00:11:49,130
this is where this method seats and just

203
00:11:49,130 --> 00:11:52,380
trying to inject my own data to the

204
00:11:52,380 --> 00:11:55,260
state file and expect bits to load it

205
00:11:55,260 --> 00:11:59,520
and operate just as I specially crafted

206
00:11:59,520 --> 00:12:06,600
the data already known malicious uses as

207
00:12:06,600 --> 00:12:10,770
another and that's a straight use that

208
00:12:10,770 --> 00:12:13,800
you could imagine and I've seen a

209
00:12:13,800 --> 00:12:16,980
downloaded that just invokes a command

210
00:12:16,980 --> 00:12:19,680
that uses bits admin or powershell

211
00:12:19,680 --> 00:12:23,070
commandlets to download payloads for

212
00:12:23,070 --> 00:12:26,820
example and it is used as a persistence

213
00:12:26,820 --> 00:12:29,730
mechanism a malware called Zillow is

214
00:12:29,730 --> 00:12:32,430
using a very key feature that we will

215
00:12:32,430 --> 00:12:35,220
talk about it and it's very important to

216
00:12:35,220 --> 00:12:37,050
understand that feature because we use

217
00:12:37,050 --> 00:12:39,120
it as well it's called the notification

218
00:12:39,120 --> 00:12:41,580
command line which lets you define a

219
00:12:41,580 --> 00:12:43,140
command line that will be run when the

220
00:12:43,140 --> 00:12:46,380
job finishes if the finishes or turns

221
00:12:46,380 --> 00:12:50,310
into an arrow state and this Marvel just

222
00:12:50,310 --> 00:12:55,320
added the job that defines a download of

223
00:12:55,320 --> 00:12:58,200
the same malware again and the execution

224
00:12:58,200 --> 00:13:01,470
of it so even after you see and deletes

225
00:13:01,470 --> 00:13:02,680
the Mara image

226
00:13:02,680 --> 00:13:05,949
this may be weeks and months after you

227
00:13:05,949 --> 00:13:08,619
may see the same mother again running on

228
00:13:08,619 --> 00:13:12,550
your computer because the job persisted

229
00:13:12,550 --> 00:13:16,209
on on the beats queue and it is a very

230
00:13:16,209 --> 00:13:19,179
good candidate for c2 communication it

231
00:13:19,179 --> 00:13:22,749
is just HTTP communication and it is

232
00:13:22,749 --> 00:13:27,819
done by an OS service so it's not always

233
00:13:27,819 --> 00:13:32,249
a monitored and it is very common to to

234
00:13:32,249 --> 00:13:36,639
let the network controllers allow this

235
00:13:36,639 --> 00:13:39,519
kind of bits transfer because as I said

236
00:13:39,519 --> 00:13:41,559
it is used for the unloaded downloading

237
00:13:41,559 --> 00:13:45,730
updates for Windows so what was my

238
00:13:45,730 --> 00:13:48,490
inspiration to go and and take that

239
00:13:48,490 --> 00:13:51,660
component into the research table

240
00:13:51,660 --> 00:13:54,309
Windows updates Windows updates uses

241
00:13:54,309 --> 00:13:56,709
bits to download updates and windows

242
00:13:56,709 --> 00:13:58,929
update itself is a service running with

243
00:13:58,929 --> 00:14:01,899
the system privileges and when you look

244
00:14:01,899 --> 00:14:03,429
at the queue while Windows Update

245
00:14:03,429 --> 00:14:05,800
downloads a an update you will see that

246
00:14:05,800 --> 00:14:08,110
the owner of the of the jobs of the

247
00:14:08,110 --> 00:14:11,350
windows of the jobs is system so I was

248
00:14:11,350 --> 00:14:13,779
jealous of our Windows system how

249
00:14:13,779 --> 00:14:16,809
Windows Update does it because I wanted

250
00:14:16,809 --> 00:14:19,540
to do it as well and provide my own

251
00:14:19,540 --> 00:14:22,480
command line that will then be executed

252
00:14:22,480 --> 00:14:28,509
as system so why in the first place do I

253
00:14:28,509 --> 00:14:32,620
want to get to that objective local

254
00:14:32,620 --> 00:14:34,269
system has some privileges that are

255
00:14:34,269 --> 00:14:37,540
above administrative privileges and to

256
00:14:37,540 --> 00:14:40,540
name a few it can open a register a very

257
00:14:40,540 --> 00:14:42,850
important registry key and hive and

258
00:14:42,850 --> 00:14:46,569
security and Sam where the ntlm hashes

259
00:14:46,569 --> 00:14:49,449
of the passwords are stored if it is run

260
00:14:49,449 --> 00:14:51,339
on a domain controller it has

261
00:14:51,339 --> 00:14:53,589
unrestricted unrestricted access to all

262
00:14:53,589 --> 00:14:55,420
the objects and object types on the

263
00:14:55,420 --> 00:14:58,449
active directory and it has the network

264
00:14:58,449 --> 00:15:00,369
privileges of the machine meaning it can

265
00:15:00,369 --> 00:15:02,799
identify itself on the network as the

266
00:15:02,799 --> 00:15:05,470
machine as there always itself and it

267
00:15:05,470 --> 00:15:07,929
has covered identity because of the

268
00:15:07,929 --> 00:15:11,319
actions are done a system not all of

269
00:15:11,319 --> 00:15:15,029
them are audited and it is very hard to

270
00:15:15,029 --> 00:15:16,270
differ

271
00:15:16,270 --> 00:15:21,790
she ate when when you do forensics wise

272
00:15:21,790 --> 00:15:24,490
and it's hard to differentiate the good

273
00:15:24,490 --> 00:15:26,200
operations of the system and the

274
00:15:26,200 --> 00:15:30,340
malicious ones and most specifically if

275
00:15:30,340 --> 00:15:33,370
we look and do who am i / all and see

276
00:15:33,370 --> 00:15:34,930
all the privileges that each of the

277
00:15:34,930 --> 00:15:37,770
users have and this is the difference

278
00:15:37,770 --> 00:15:41,170
system has more privileged than the

279
00:15:41,170 --> 00:15:43,330
administrator also to name a few

280
00:15:43,330 --> 00:15:45,940
assigned primary top primary token gives

281
00:15:45,940 --> 00:15:48,130
the ability to change the primary token

282
00:15:48,130 --> 00:15:51,220
of a process only the kernel and system

283
00:15:51,220 --> 00:15:54,280
can do that and lock memory privilege

284
00:15:54,280 --> 00:15:57,520
lets you define pages in memory that

285
00:15:57,520 --> 00:15:59,410
will remain in memory and won't want to

286
00:15:59,410 --> 00:16:01,110
be paged into the hard disk

287
00:16:01,110 --> 00:16:05,560
TCB privilege and lets you that's the

288
00:16:05,560 --> 00:16:09,550
the the process to act as their OS

289
00:16:09,550 --> 00:16:13,180
itself there are others we want to get

290
00:16:13,180 --> 00:16:16,150
into them so what's the view and abuse

291
00:16:16,150 --> 00:16:20,830
that we are doing I remind you we want

292
00:16:20,830 --> 00:16:22,990
to use the feature that lets you define

293
00:16:22,990 --> 00:16:26,320
a command line run and that's called set

294
00:16:26,320 --> 00:16:27,880
notify command line that's the name of

295
00:16:27,880 --> 00:16:31,990
the of the function in the common

296
00:16:31,990 --> 00:16:34,360
interface that one should use to define

297
00:16:34,360 --> 00:16:36,070
a command line and you just define a

298
00:16:36,070 --> 00:16:38,610
string that will be executed using

299
00:16:38,610 --> 00:16:41,770
create process as user in the win API

300
00:16:41,770 --> 00:16:45,640
call and the user that it will it will

301
00:16:45,640 --> 00:16:50,980
be run as is the owner of the job so I

302
00:16:50,980 --> 00:16:53,350
will walk through the research process

303
00:16:53,350 --> 00:16:56,320
that I have made and the first step that

304
00:16:56,320 --> 00:17:01,240
I tried was to and just open a command

305
00:17:01,240 --> 00:17:04,480
shell as a system in my own session and

306
00:17:04,480 --> 00:17:07,359
the first thing that comes to mind is

307
00:17:07,359 --> 00:17:10,180
using peers exact this is internals too

308
00:17:10,180 --> 00:17:13,839
so I do just that I create I created the

309
00:17:13,839 --> 00:17:17,530
job and to give it a real meaning I need

310
00:17:17,530 --> 00:17:19,240
to define the transfer that I want to

311
00:17:19,240 --> 00:17:21,130
make so in this case I want to download

312
00:17:21,130 --> 00:17:24,839
software software exit to seat them I

313
00:17:24,839 --> 00:17:27,910
creating a job had no problem and the

314
00:17:27,910 --> 00:17:30,010
commands accident but this

315
00:17:30,010 --> 00:17:32,400
command failed with this exception

316
00:17:32,400 --> 00:17:35,200
unable to add file to job because the

317
00:17:35,200 --> 00:17:36,820
operation being requested was not

318
00:17:36,820 --> 00:17:38,200
performed because the user has not

319
00:17:38,200 --> 00:17:42,100
logged on to the network at that point I

320
00:17:42,100 --> 00:17:45,540
didn't know what that means but I

321
00:17:45,540 --> 00:17:48,400
encountered a very absurd situation

322
00:17:48,400 --> 00:17:50,559
because when trying to cancel the same

323
00:17:50,559 --> 00:17:53,650
job using the same user I got the same

324
00:17:53,650 --> 00:17:56,110
exception so God in this case system

325
00:17:56,110 --> 00:17:59,230
created a rock in this case a job that

326
00:17:59,230 --> 00:18:01,419
he cannot cancel and that was my first

327
00:18:01,419 --> 00:18:03,640
hint to go into the state file itself

328
00:18:03,640 --> 00:18:06,520
because that was my only way to delete

329
00:18:06,520 --> 00:18:08,530
that job I deleted the file and it

330
00:18:08,530 --> 00:18:12,240
recovered just like when doing reset

331
00:18:12,240 --> 00:18:15,460
will look more into the the state file

332
00:18:15,460 --> 00:18:18,669
later of course and okay so what Wang

333
00:18:18,669 --> 00:18:21,940
Wang is the name of the Windows Update

334
00:18:21,940 --> 00:18:24,730
service service at this point I wanted

335
00:18:24,730 --> 00:18:28,440
to try and figure out how poor Wang

336
00:18:28,440 --> 00:18:32,070
succeeds in creating and operating

337
00:18:32,070 --> 00:18:35,770
system job and I can't using P exactly

338
00:18:35,770 --> 00:18:39,250
so I my methodology here was comparing

339
00:18:39,250 --> 00:18:41,740
the two flows step by step and trying to

340
00:18:41,740 --> 00:18:45,970
find what it's different shields so the

341
00:18:45,970 --> 00:18:47,890
normal flow would go like that what Wang

342
00:18:47,890 --> 00:18:50,590
and switches to the context of the calm

343
00:18:50,590 --> 00:18:52,720
in the face of qmg are DLL this is how

344
00:18:52,720 --> 00:18:55,270
you use in proc server come in prog

345
00:18:55,270 --> 00:18:58,179
server in Windows and then you can use

346
00:18:58,179 --> 00:19:00,190
the the pointer that you get for the

347
00:19:00,190 --> 00:19:03,730
interface to invoke on that server

348
00:19:03,730 --> 00:19:06,340
different functions so naturally the

349
00:19:06,340 --> 00:19:08,650
first function that I want the wind is

350
00:19:08,650 --> 00:19:11,320
doing is creating a job and you can see

351
00:19:11,320 --> 00:19:14,590
in this screenshot and the dynamical to

352
00:19:14,590 --> 00:19:18,370
that function create job with the

353
00:19:18,370 --> 00:19:22,780
parameter the static string W client

354
00:19:22,780 --> 00:19:24,280
download and this is exactly the

355
00:19:24,280 --> 00:19:27,309
description that you will see on jobs in

356
00:19:27,309 --> 00:19:29,830
the queue while Windows is downloading

357
00:19:29,830 --> 00:19:34,750
updates the next call will be to add

358
00:19:34,750 --> 00:19:37,720
file same as we did with with bits admin

359
00:19:37,720 --> 00:19:40,900
and you want to give the real job to be

360
00:19:40,900 --> 00:19:44,020
done and after you did that

361
00:19:44,020 --> 00:19:46,350
the job is still not running you need to

362
00:19:46,350 --> 00:19:48,880
call resume this is where the job really

363
00:19:48,880 --> 00:19:53,140
starts to get into the queue and to be

364
00:19:53,140 --> 00:19:55,720
handled by bit the last two calls are

365
00:19:55,720 --> 00:19:57,760
actually not called explicitly by the

366
00:19:57,760 --> 00:20:00,580
user they are called various in various

367
00:20:00,580 --> 00:20:03,100
occasions when bits calculate and and

368
00:20:03,100 --> 00:20:06,150
decides that it is a good time to

369
00:20:06,150 --> 00:20:08,830
transfer another chunk I remind you it

370
00:20:08,830 --> 00:20:11,170
handles many downloads and the transfer

371
00:20:11,170 --> 00:20:13,860
job and wants to optimize the usage so

372
00:20:13,860 --> 00:20:15,880
these are called

373
00:20:15,880 --> 00:20:22,120
repeatedly by the bit service itself so

374
00:20:22,120 --> 00:20:24,460
as I said I compared the two flows and

375
00:20:24,460 --> 00:20:26,920
the first call to create job and was

376
00:20:26,920 --> 00:20:28,960
identical in parameters and identical in

377
00:20:28,960 --> 00:20:31,179
the result in the outcome both succeeded

378
00:20:31,179 --> 00:20:35,740
and a job was virtually created in the

379
00:20:35,740 --> 00:20:39,280
queue the call to add file as you

380
00:20:39,280 --> 00:20:43,420
probably remember failed when used by P

381
00:20:43,420 --> 00:20:46,420
execs the same parameters were given but

382
00:20:46,420 --> 00:20:49,030
one failed so this is where I wanted to

383
00:20:49,030 --> 00:20:51,429
dig in and find the difference between

384
00:20:51,429 --> 00:20:54,270
the two cases

385
00:20:54,270 --> 00:20:59,800
so in short and these two lines are the

386
00:20:59,800 --> 00:21:01,390
lines that I'm going to explain in the

387
00:21:01,390 --> 00:21:01,960
next slide

388
00:21:01,960 --> 00:21:04,150
in short the reason for that exception

389
00:21:04,150 --> 00:21:07,090
is a bad pairing of the client security

390
00:21:07,090 --> 00:21:10,510
identifier and the session ID and don't

391
00:21:10,510 --> 00:21:12,390
get confused between a

392
00:21:12,390 --> 00:21:16,420
s ID and the session security identifier

393
00:21:16,420 --> 00:21:18,520
and the session ID and these are two

394
00:21:18,520 --> 00:21:21,870
different things and the solution that I

395
00:21:21,870 --> 00:21:25,210
that I have made to overcome this this

396
00:21:25,210 --> 00:21:27,520
situation that caused the exception is

397
00:21:27,520 --> 00:21:30,010
to fake the session ID when the session

398
00:21:30,010 --> 00:21:31,020
IDs fixed

399
00:21:31,020 --> 00:21:35,820
we got to a good pairing of these two

400
00:21:35,910 --> 00:21:39,690
artifacts and got on with the execution

401
00:21:39,690 --> 00:21:45,280
so what are the checks and enforcement's

402
00:21:45,280 --> 00:21:48,250
that beats requires for a job to operate

403
00:21:48,250 --> 00:21:51,250
and it is this kind of checks are done

404
00:21:51,250 --> 00:21:54,140
on every crucial

405
00:21:54,140 --> 00:21:56,670
request every crucial operation on the

406
00:21:56,670 --> 00:21:59,100
job on creation on adding a file on

407
00:21:59,100 --> 00:22:00,980
resume and many other calls

408
00:22:00,980 --> 00:22:04,860
so access check for those of you who are

409
00:22:04,860 --> 00:22:08,280
not familiar is a very root and main

410
00:22:08,280 --> 00:22:10,350
function in the Windows security model

411
00:22:10,350 --> 00:22:13,140
it is a boolean fact function that

412
00:22:13,140 --> 00:22:15,390
returns either grant or deny true or

413
00:22:15,390 --> 00:22:19,590
false and it is used here as a comm

414
00:22:19,590 --> 00:22:25,980
server security and enforcement and

415
00:22:25,980 --> 00:22:29,160
using the interface called I server

416
00:22:29,160 --> 00:22:33,330
security this interface is given to any

417
00:22:33,330 --> 00:22:36,630
con server that that is used in the

418
00:22:36,630 --> 00:22:38,610
system and it has a generic

419
00:22:38,610 --> 00:22:40,950
implementation of a coin personate

420
00:22:40,950 --> 00:22:44,780
client and Corey were to self that an

421
00:22:44,780 --> 00:22:48,240
impersonation takes and clones the token

422
00:22:48,240 --> 00:22:53,100
of the of the client thread checks the

423
00:22:53,100 --> 00:22:55,410
client thread trustee and might be a

424
00:22:55,410 --> 00:22:58,880
user a group or relevant a session ID

425
00:22:58,880 --> 00:23:03,690
checks it against the DAC a list of the

426
00:23:03,690 --> 00:23:09,000
object that's in in place and returns

427
00:23:09,000 --> 00:23:12,090
either grant or deny this is how access

428
00:23:12,090 --> 00:23:14,850
check works an object has a security

429
00:23:14,850 --> 00:23:17,280
descriptor inside it's there's a duck

430
00:23:17,280 --> 00:23:22,020
the list with access list entries so two

431
00:23:22,020 --> 00:23:24,390
threads are trying to get read write and

432
00:23:24,390 --> 00:23:26,990
execute permissions on the object and

433
00:23:26,990 --> 00:23:30,540
the first one is denied because as you

434
00:23:30,540 --> 00:23:32,490
can see the first entry says that Andrew

435
00:23:32,490 --> 00:23:34,920
is denied of read write and execute you

436
00:23:34,920 --> 00:23:37,230
can be more explicit than that but the

437
00:23:37,230 --> 00:23:42,270
third be grant get the permissions

438
00:23:42,270 --> 00:23:46,620
because Jane is in Group A and as you

439
00:23:46,620 --> 00:23:49,500
can see the second entry says that group

440
00:23:49,500 --> 00:23:52,530
a is allowed to write and everyone is

441
00:23:52,530 --> 00:23:54,060
allowed to read and execute if you

442
00:23:54,060 --> 00:23:56,660
combine them both the the request of the

443
00:23:56,660 --> 00:24:01,800
access is given so the first checkpoint

444
00:24:01,800 --> 00:24:03,990
was actually really a security

445
00:24:03,990 --> 00:24:06,630
enforcement and a second

446
00:24:06,630 --> 00:24:09,840
one is an enforcement that beats defines

447
00:24:09,840 --> 00:24:11,700
for itself it's not a generic it's

448
00:24:11,700 --> 00:24:14,420
something that meets decided to have and

449
00:24:14,420 --> 00:24:17,970
it requires the requesting user to be

450
00:24:17,970 --> 00:24:20,730
logged on in an active session for the

451
00:24:20,730 --> 00:24:25,260
job to continue its operation and for

452
00:24:25,260 --> 00:24:27,930
that reason there's a check for the

453
00:24:27,930 --> 00:24:30,210
active Logan Logan sessions that own day

454
00:24:30,210 --> 00:24:32,640
that are currently in the contender on

455
00:24:32,640 --> 00:24:36,660
the machine and so in this case user

456
00:24:36,660 --> 00:24:39,600
called one as you can see in the arrow

457
00:24:39,600 --> 00:24:42,420
in the left is in session one this is

458
00:24:42,420 --> 00:24:44,550
the regular session when the first user

459
00:24:44,550 --> 00:24:46,620
logs into Windows and there's always

460
00:24:46,620 --> 00:24:48,660
another session session zero where all

461
00:24:48,660 --> 00:24:51,000
the system services and other

462
00:24:51,000 --> 00:24:57,030
application services are run so how are

463
00:24:57,030 --> 00:25:00,300
we going to do that in more detail after

464
00:25:00,300 --> 00:25:04,530
the two checks are after the first check

465
00:25:04,530 --> 00:25:08,280
has passed we we did the second check as

466
00:25:08,280 --> 00:25:10,320
follows we want to switch to the logon

467
00:25:10,320 --> 00:25:12,750
token token of the requesting client of

468
00:25:12,750 --> 00:25:15,600
the client thread and clone it and

469
00:25:15,600 --> 00:25:17,460
perform the action that he requested

470
00:25:17,460 --> 00:25:22,410
with its with the remote token and the

471
00:25:22,410 --> 00:25:25,680
40 in order to clone it bits wants to

472
00:25:25,680 --> 00:25:30,180
find the pairing of the security and NT

473
00:25:30,180 --> 00:25:33,390
file that's in the job object that is

474
00:25:33,390 --> 00:25:37,110
the job owner and the session ID from

475
00:25:37,110 --> 00:25:40,560
which the request was made and to get

476
00:25:40,560 --> 00:25:44,250
the bits uses and API call get token

477
00:25:44,250 --> 00:25:47,190
information and when I used P as exit I

478
00:25:47,190 --> 00:25:49,260
didn't know that before but apparently

479
00:25:49,260 --> 00:25:53,010
this exact is run with the user with the

480
00:25:53,010 --> 00:25:56,190
system user but in the active session

481
00:25:56,190 --> 00:25:59,370
that I did I invoked it from in that

482
00:25:59,370 --> 00:26:04,070
case this is session 1 and because

483
00:26:04,070 --> 00:26:08,700
system is not logged in session 1 we got

484
00:26:08,700 --> 00:26:10,830
the exception system is always locked

485
00:26:10,830 --> 00:26:13,080
down in session 0 and is never logged on

486
00:26:13,080 --> 00:26:16,860
in edit any other session so my goal

487
00:26:16,860 --> 00:26:20,130
here was to try and mimic the and and

488
00:26:20,130 --> 00:26:20,880
replace

489
00:26:20,880 --> 00:26:24,570
the return that we get from agra token

490
00:26:24,570 --> 00:26:27,720
information to session 0 and actually

491
00:26:27,720 --> 00:26:32,160
pass the test so how do we do that and I

492
00:26:32,160 --> 00:26:34,440
backed the process the service the

493
00:26:34,440 --> 00:26:36,900
process service SVC host

494
00:26:36,900 --> 00:26:39,390
you find the one that runs bit if you

495
00:26:39,390 --> 00:26:41,820
debug it and I put a breakpoint and just

496
00:26:41,820 --> 00:26:43,770
before the call to clone user talk just

497
00:26:43,770 --> 00:26:46,350
before the exception is from I do the

498
00:26:46,350 --> 00:26:48,870
same steps to create and define a job

499
00:26:48,870 --> 00:26:52,140
and then we get to the break point and

500
00:26:52,140 --> 00:26:55,260
now just as simple as that I change the

501
00:26:55,260 --> 00:26:57,750
return but the return value of get

502
00:26:57,750 --> 00:26:59,970
talking information that is one is

503
00:26:59,970 --> 00:27:02,490
stored in a place in memory I just

504
00:27:02,490 --> 00:27:06,330
change it to zero and the the check I

505
00:27:06,330 --> 00:27:08,880
pass the check and at that point the job

506
00:27:08,880 --> 00:27:12,180
is written into the state file so I pass

507
00:27:12,180 --> 00:27:15,720
the check once and the the result the

508
00:27:15,720 --> 00:27:18,000
actual valid job is in the state file I

509
00:27:18,000 --> 00:27:21,570
don't have to pass it again and and the

510
00:27:21,570 --> 00:27:24,570
fault here is that bits when when loaded

511
00:27:24,570 --> 00:27:27,600
again we load that job and once do the

512
00:27:27,600 --> 00:27:33,330
check again it just takes the the

513
00:27:33,330 --> 00:27:35,700
content in the file this you realize it

514
00:27:35,700 --> 00:27:42,780
and performs what's in it so that's how

515
00:27:42,780 --> 00:27:43,230
it's done

516
00:27:43,230 --> 00:27:45,840
session ID now is zero and we pass the

517
00:27:45,840 --> 00:27:46,730
test

518
00:27:46,730 --> 00:27:50,160
just for future reference

519
00:27:50,160 --> 00:27:52,320
a lot of the token manipulations and no

520
00:27:52,320 --> 00:27:56,130
impersonations is done under a class

521
00:27:56,130 --> 00:27:58,950
called seen as an impersonation and that

522
00:27:58,950 --> 00:28:02,940
eventually called an win API call called

523
00:28:02,940 --> 00:28:04,860
impersonate logged on user with the

524
00:28:04,860 --> 00:28:07,050
token that was copied from the client

525
00:28:07,050 --> 00:28:11,040
thread so after all checks are done the

526
00:28:11,040 --> 00:28:14,550
action is performed using impersonation

527
00:28:14,550 --> 00:28:18,800
and the server then gets back to self

528
00:28:19,310 --> 00:28:23,400
but the job is now valid it is in the

529
00:28:23,400 --> 00:28:26,310
queue it is also projected to the state

530
00:28:26,310 --> 00:28:30,230
file but the initial state of its job is

531
00:28:30,230 --> 00:28:33,540
suspended and to move it from suspended

532
00:28:33,540 --> 00:28:34,460
to actually

533
00:28:34,460 --> 00:28:38,000
and transferring off of the job you have

534
00:28:38,000 --> 00:28:41,120
to explicitly call resume and many other

535
00:28:41,120 --> 00:28:43,540
states and there are some nuances

536
00:28:43,540 --> 00:28:46,670
between the different states and there's

537
00:28:46,670 --> 00:28:49,160
a error and transient error error is a

538
00:28:49,160 --> 00:28:53,360
complete and final error and transient

539
00:28:53,360 --> 00:28:55,730
error is a kind of error where bits can

540
00:28:55,730 --> 00:28:59,900
recover from and so my our next obstacle

541
00:28:59,900 --> 00:29:02,210
that we need to overcome is to change

542
00:29:02,210 --> 00:29:05,510
the state of the job if we and I tell

543
00:29:05,510 --> 00:29:08,000
you after checking that the state that

544
00:29:08,000 --> 00:29:10,850
we want to move into is either killed or

545
00:29:10,850 --> 00:29:13,520
connecting when the job is on one of

546
00:29:13,520 --> 00:29:16,880
these states the the bits of service

547
00:29:16,880 --> 00:29:22,550
will continue with the transfer so do

548
00:29:22,550 --> 00:29:24,200
you remember the first hint that I had

549
00:29:24,200 --> 00:29:27,470
to go into the state file so I went into

550
00:29:27,470 --> 00:29:30,500
it I reversed engineered the the the

551
00:29:30,500 --> 00:29:34,340
structure of the file it's a unclear

552
00:29:34,340 --> 00:29:38,540
part file and that had to - that I had

553
00:29:38,540 --> 00:29:43,820
to try and make many attempts to

554
00:29:43,820 --> 00:29:45,620
understand where the changes are applied

555
00:29:45,620 --> 00:29:48,920
and the file is located in this folder

556
00:29:48,920 --> 00:29:52,070
in a program data downloader there are

557
00:29:52,070 --> 00:29:53,750
actually two files that are updated

558
00:29:53,750 --> 00:29:57,830
alternately and it's interesting but I

559
00:29:57,830 --> 00:30:00,110
don't know the exact model of of the of

560
00:30:00,110 --> 00:30:02,150
the decision when to update which and

561
00:30:02,150 --> 00:30:05,750
there's a kind of backup model here well

562
00:30:05,750 --> 00:30:07,700
when one is used the other is used as

563
00:30:07,700 --> 00:30:11,630
called backup and it's updated sometimes

564
00:30:11,630 --> 00:30:13,940
sometimes this one is sometimes in the

565
00:30:13,940 --> 00:30:17,420
other for all effective use that that I

566
00:30:17,420 --> 00:30:20,510
needed the the one that's in effect on a

567
00:30:20,510 --> 00:30:24,230
current time and current point in time

568
00:30:24,230 --> 00:30:26,750
is the one that stated in this registry

569
00:30:26,750 --> 00:30:30,260
value and what's the content of the

570
00:30:30,260 --> 00:30:33,010
state file it is just a straightforward

571
00:30:33,010 --> 00:30:35,630
unencrypted and partially protected a

572
00:30:35,630 --> 00:30:39,110
binary representation of the jobs in the

573
00:30:39,110 --> 00:30:41,210
queue why and say it's straightforward

574
00:30:41,210 --> 00:30:43,520
because this is how you're going to see

575
00:30:43,520 --> 00:30:45,920
a string representation for example the

576
00:30:45,920 --> 00:30:48,230
string of the job description

577
00:30:48,230 --> 00:30:52,549
starts with an integer and that setting

578
00:30:52,549 --> 00:30:55,549
the the string length in characters the

579
00:30:55,549 --> 00:30:57,380
characters that follows and the null

580
00:30:57,380 --> 00:31:00,610
termination character at the end and

581
00:31:00,610 --> 00:31:03,290
this kind of properties are written to

582
00:31:03,290 --> 00:31:05,990
the file with various calls to serialize

583
00:31:05,990 --> 00:31:09,890
and write it is unencrypted so when you

584
00:31:09,890 --> 00:31:12,500
open that file with an X editor this is

585
00:31:12,500 --> 00:31:14,270
really what you're gonna see nothing

586
00:31:14,270 --> 00:31:17,150
else to do here and it is partially

587
00:31:17,150 --> 00:31:20,390
protected what I mean here is that the

588
00:31:20,390 --> 00:31:22,820
file is used by a service that's running

589
00:31:22,820 --> 00:31:25,790
in the system scope so as long as the

590
00:31:25,790 --> 00:31:30,700
service is running a handle is a is a is

591
00:31:30,700 --> 00:31:33,290
present a handle to the file is present

592
00:31:33,290 --> 00:31:35,780
from the service so an administrator can

593
00:31:35,780 --> 00:31:39,290
really modify the file but same

594
00:31:39,290 --> 00:31:41,120
administrator has the rights to stop the

595
00:31:41,120 --> 00:31:43,299
service and when the service is stopped

596
00:31:43,299 --> 00:31:48,370
the file can be modified and then you

597
00:31:48,370 --> 00:31:51,610
get the the service back on again and

598
00:31:51,610 --> 00:31:54,950
your modifications are applied to memory

599
00:31:54,950 --> 00:31:58,400
when bits and this you realize is the

600
00:31:58,400 --> 00:32:02,150
the file and what could be done better

601
00:32:02,150 --> 00:32:04,429
here is maybe put a colonel lock on the

602
00:32:04,429 --> 00:32:08,240
file or at least have it with a trusted

603
00:32:08,240 --> 00:32:15,710
installer and permissions so now that we

604
00:32:15,710 --> 00:32:19,520
know how the file is is a structured we

605
00:32:19,520 --> 00:32:24,340
found the exact bytes that gives that

606
00:32:24,340 --> 00:32:27,500
represents the job state we change it

607
00:32:27,500 --> 00:32:34,820
from 3 to 0 and now the job is killed in

608
00:32:34,820 --> 00:32:36,620
general these are the steps that we made

609
00:32:36,620 --> 00:32:40,610
we stopped bits service we replaced the

610
00:32:40,610 --> 00:32:42,620
file with the new modified file the

611
00:32:42,620 --> 00:32:45,530
under the state file and started bits

612
00:32:45,530 --> 00:32:49,760
again this is what we see when we look

613
00:32:49,760 --> 00:32:52,730
at the output of bits admin list where

614
00:32:52,730 --> 00:32:55,669
we see the whole queue of bit and just

615
00:32:55,669 --> 00:32:58,760
the important stuff this is our job it's

616
00:32:58,760 --> 00:33:02,090
called TTT and the connection at the

617
00:33:02,090 --> 00:33:04,340
is connecting it is owned by the system

618
00:33:04,340 --> 00:33:08,090
and it is elevated in with system

619
00:33:08,090 --> 00:33:09,890
integrity level the command line that

620
00:33:09,890 --> 00:33:11,960
will be executed when the job finishes

621
00:33:11,960 --> 00:33:14,000
is what we saw before

622
00:33:14,000 --> 00:33:20,029
just CMD eggsy the integrity level just

623
00:33:20,029 --> 00:33:23,240
as you see you saw here and system it is

624
00:33:23,240 --> 00:33:26,480
the highest integrity level just to to

625
00:33:26,480 --> 00:33:28,460
produce view of you who are not familiar

626
00:33:28,460 --> 00:33:30,380
the integrity level is another way for

627
00:33:30,380 --> 00:33:35,110
Windows to differentiate different user

628
00:33:35,110 --> 00:33:37,970
actually differentiate the same user

629
00:33:37,970 --> 00:33:40,549
that acts with different integrity

630
00:33:40,549 --> 00:33:42,950
levels and that what for example gives

631
00:33:42,950 --> 00:33:47,800
the ability to have to have the UAC and

632
00:33:47,800 --> 00:33:49,120
[Music]

633
00:33:49,120 --> 00:33:53,630
interface an administrator can change

634
00:33:53,630 --> 00:33:58,820
the UAC operation and that's something

635
00:33:58,820 --> 00:34:01,070
that's done with integrity that with the

636
00:34:01,070 --> 00:34:05,659
highest integrity level okay now notice

637
00:34:05,659 --> 00:34:08,300
that the method that I described and

638
00:34:08,300 --> 00:34:10,070
meant that we are replacing the whole

639
00:34:10,070 --> 00:34:12,199
state fun meaning that any jobs that

640
00:34:12,199 --> 00:34:14,089
were previously in the queue are

641
00:34:14,089 --> 00:34:19,310
overridden or deleted and so I wanted to

642
00:34:19,310 --> 00:34:23,030
find a way for injecting my own job not

643
00:34:23,030 --> 00:34:26,239
interfering with with other jobs and in

644
00:34:26,239 --> 00:34:30,739
addition I didn't want to have to debug

645
00:34:30,739 --> 00:34:33,050
the service on the machine that I want

646
00:34:33,050 --> 00:34:36,050
to do that on if there's a remote

647
00:34:36,050 --> 00:34:37,969
computer it's very hard to debug a

648
00:34:37,969 --> 00:34:40,609
service on the remote computer and but

649
00:34:40,609 --> 00:34:42,679
apparently if I do it on one machine and

650
00:34:42,679 --> 00:34:44,330
take the state file to another machine

651
00:34:44,330 --> 00:34:46,940
just copy and paste the same file to the

652
00:34:46,940 --> 00:34:49,969
same location the same queue is applied

653
00:34:49,969 --> 00:34:53,418
in the target computer and there's some

654
00:34:53,418 --> 00:34:55,879
variations on different versions but

655
00:34:55,879 --> 00:34:58,010
there's a finite number of versions you

656
00:34:58,010 --> 00:35:01,099
can do a factory on on your home system

657
00:35:01,099 --> 00:35:04,910
from machine and produce state-by-state

658
00:35:04,910 --> 00:35:07,849
files that represents queues that you

659
00:35:07,849 --> 00:35:10,240
want to be executed on another computer

660
00:35:10,240 --> 00:35:14,119
copied to that computer and this is what

661
00:35:14,119 --> 00:35:15,400
you get

662
00:35:15,400 --> 00:35:22,180
and that's a pic of how the file is how

663
00:35:22,180 --> 00:35:23,769
the file looks the structure of the file

664
00:35:23,769 --> 00:35:27,609
the different parts of it and properties

665
00:35:27,609 --> 00:35:29,980
of jobs that are currently in the file

666
00:35:29,980 --> 00:35:32,079
and this is the template that you can

667
00:35:32,079 --> 00:35:34,390
use it in the github repository the

668
00:35:34,390 --> 00:35:37,329
turned off of this project and you can

669
00:35:37,329 --> 00:35:39,519
use it to pass your own and state files

670
00:35:39,519 --> 00:35:43,529
both for Windows seven eight and ten and

671
00:35:43,529 --> 00:35:47,230
it is covered almost for all the

672
00:35:47,230 --> 00:35:50,619
properties that are there so as I said

673
00:35:50,619 --> 00:35:54,009
before I now want to push my own job

674
00:35:54,009 --> 00:35:55,539
without interfering with the other jobs

675
00:35:55,539 --> 00:35:59,680
so also we know the the file structure

676
00:35:59,680 --> 00:36:02,170
and we found that in the in the queue

677
00:36:02,170 --> 00:36:04,509
header there's a counter that says how

678
00:36:04,509 --> 00:36:06,430
many jobs are in the queue we just

679
00:36:06,430 --> 00:36:08,529
increase it by one and find the place

680
00:36:08,529 --> 00:36:11,079
where a job ends and just before another

681
00:36:11,079 --> 00:36:14,440
one starts and push our own job and I

682
00:36:14,440 --> 00:36:16,119
was realized the job that we prepared

683
00:36:16,119 --> 00:36:22,630
and we just added a new job so bits

684
00:36:22,630 --> 00:36:24,309
inject is the tool that will let you do

685
00:36:24,309 --> 00:36:28,269
just that if we inject a new job to the

686
00:36:28,269 --> 00:36:31,029
queue it will remove remove remove it

687
00:36:31,029 --> 00:36:31,989
when the job is finished

688
00:36:31,989 --> 00:36:35,289
and one of the options that you can do

689
00:36:35,289 --> 00:36:37,390
is prepare a job that has the local

690
00:36:37,390 --> 00:36:40,839
system and owner and the command line

691
00:36:40,839 --> 00:36:43,859
being whichever program that you want

692
00:36:43,859 --> 00:36:48,660
and editing some other parameters and

693
00:36:48,660 --> 00:36:51,249
properties of the jobs and some will be

694
00:36:51,249 --> 00:36:55,089
added in the future and the next thing I

695
00:36:55,089 --> 00:36:58,269
want to talk about is the interactive

696
00:36:58,269 --> 00:37:01,749
session detection and that we saw before

697
00:37:01,749 --> 00:37:03,819
actually you didn't see but you will see

698
00:37:03,819 --> 00:37:04,779
in the video

699
00:37:04,779 --> 00:37:07,210
that's a mitigation that's in Windows

700
00:37:07,210 --> 00:37:10,650
since Vista and it's actually a service

701
00:37:10,650 --> 00:37:12,489
Windows service run in the background

702
00:37:12,489 --> 00:37:15,759
and it monitors other services and pops

703
00:37:15,759 --> 00:37:18,999
up a message when another service try to

704
00:37:18,999 --> 00:37:21,579
communicate with the active Logan

705
00:37:21,579 --> 00:37:24,430
session and because services don't have

706
00:37:24,430 --> 00:37:26,920
to communicate shouldn't children

707
00:37:26,920 --> 00:37:28,839
communicate with the desktop

708
00:37:28,839 --> 00:37:31,029
and the user session so how do we

709
00:37:31,029 --> 00:37:33,279
overcome this there are two possible

710
00:37:33,279 --> 00:37:35,619
ways one is just to use a command a

711
00:37:35,619 --> 00:37:37,329
program and that we want to execute

712
00:37:37,329 --> 00:37:39,579
that's that is not interactive

713
00:37:39,579 --> 00:37:42,960
it doesn't require opening a window and

714
00:37:42,960 --> 00:37:46,660
that way the the mitigation won't be

715
00:37:46,660 --> 00:37:52,269
triggered another way is just changing

716
00:37:52,269 --> 00:37:55,569
the registry value that says whether to

717
00:37:55,569 --> 00:38:00,160
have this mitigation or not and you can

718
00:38:00,160 --> 00:38:01,719
see the picture of the of the pop-up

719
00:38:01,719 --> 00:38:03,489
that we couldn't see before because of

720
00:38:03,489 --> 00:38:05,499
the move to the answer to the and

721
00:38:05,499 --> 00:38:10,660
session zero and now we'll see it with a

722
00:38:10,660 --> 00:38:14,009
prepared video

723
00:38:25,470 --> 00:38:28,810
this this time we'll see it on Windows

724
00:38:28,810 --> 00:38:33,340
10 it works just the same so we have a

725
00:38:33,340 --> 00:38:35,230
program called write file which just

726
00:38:35,230 --> 00:38:38,620
writes a file called stub file to see

727
00:38:38,620 --> 00:38:40,870
temp this is the the one we want to

728
00:38:40,870 --> 00:38:43,420
execute we firstly look at the queue and

729
00:38:43,420 --> 00:38:46,480
we see that there are no jobs in the

730
00:38:46,480 --> 00:38:50,560
queue you can see here now we use the

731
00:38:50,560 --> 00:38:54,820
script bits inject to prepare a job

732
00:38:54,820 --> 00:38:57,070
called demo that will download this file

733
00:38:57,070 --> 00:39:00,160
to this location and execute this

734
00:39:00,160 --> 00:39:05,650
program as you can see I'm using a local

735
00:39:05,650 --> 00:39:09,040
server and and this should be a bit

736
00:39:09,040 --> 00:39:11,910
server there were no I didn't find any

737
00:39:11,910 --> 00:39:14,320
implementation of bit server in Python

738
00:39:14,320 --> 00:39:16,660
so I wrote one it's called simple bit

739
00:39:16,660 --> 00:39:18,580
server it is also in the repository and

740
00:39:18,580 --> 00:39:25,540
it can serve as a bit server now the

741
00:39:25,540 --> 00:39:30,520
first step is to prepare the job we give

742
00:39:30,520 --> 00:39:32,710
we give some of the parameters on the

743
00:39:32,710 --> 00:39:35,080
command line and some are default and a

744
00:39:35,080 --> 00:39:38,500
new job is created and serialize this is

745
00:39:38,500 --> 00:39:41,500
the data that we want to inject into the

746
00:39:41,500 --> 00:39:46,870
queue then we run the win we inject it

747
00:39:46,870 --> 00:39:51,370
and run the bits service again now we

748
00:39:51,370 --> 00:39:54,310
stop we pause on the on this part and

749
00:39:54,310 --> 00:39:58,780
look at at the queue what we see here is

750
00:39:58,780 --> 00:40:00,730
our job demo

751
00:40:00,730 --> 00:40:03,610
owned by system connecting because we

752
00:40:03,610 --> 00:40:07,510
already made it change to change the

753
00:40:07,510 --> 00:40:09,310
status this is the command and it will

754
00:40:09,310 --> 00:40:12,520
be executed as system and this is the

755
00:40:12,520 --> 00:40:15,430
file to be downloaded we continue with

756
00:40:15,430 --> 00:40:19,780
the operation we intentionally made the

757
00:40:19,780 --> 00:40:22,900
server not have this file so we get

758
00:40:22,900 --> 00:40:25,690
error 404 and the fact that you

759
00:40:25,690 --> 00:40:28,510
requested the requested URL and does not

760
00:40:28,510 --> 00:40:31,390
exist it moves the job into error state

761
00:40:31,390 --> 00:40:33,880
and this state means that bits will

762
00:40:33,880 --> 00:40:36,670
execute the command line as you can see

763
00:40:36,670 --> 00:40:38,210
bits actually

764
00:40:38,210 --> 00:40:41,180
tries try the four times it it is

765
00:40:41,180 --> 00:40:43,220
defined by default to do before we tries

766
00:40:43,220 --> 00:40:47,270
you can change that and the next step

767
00:40:47,270 --> 00:40:53,980
would be to remove the job from queue

768
00:40:54,640 --> 00:40:57,470
actually in this video as well because

769
00:40:57,470 --> 00:41:02,150
of how the operating system is working

770
00:41:02,150 --> 00:41:05,180
you we can see that session I'll try

771
00:41:05,180 --> 00:41:07,940
just to flip the laptop to the other

772
00:41:07,940 --> 00:41:10,910
side so you can see and but in this case

773
00:41:10,910 --> 00:41:14,420
the program that we use wrote a new file

774
00:41:14,420 --> 00:41:16,820
bit stub file and as you can see the

775
00:41:16,820 --> 00:41:30,080
owner is system so I will have not to

776
00:41:30,080 --> 00:41:36,950
try to use our tool and show you how it

777
00:41:36,950 --> 00:41:43,040
looks because it's a very rare place to

778
00:41:43,040 --> 00:41:46,190
be that session I didn't see it before

779
00:41:46,190 --> 00:41:51,520
I tried that just a second

780
00:41:59,770 --> 00:42:03,740
so again I'm using the script the tool

781
00:42:03,740 --> 00:42:09,530
to have command shell to be spawned with

782
00:42:09,530 --> 00:42:12,770
system in session zero let's wait a

783
00:42:12,770 --> 00:42:15,290
couple of seconds for the job to go into

784
00:42:15,290 --> 00:42:17,390
arrow state just like we've seen in the

785
00:42:17,390 --> 00:42:19,480
video

786
00:42:35,089 --> 00:42:39,239
and it won't work because I lost

787
00:42:39,239 --> 00:42:49,319
connection sorry we'll try it again I'll

788
00:42:49,319 --> 00:42:52,140
reset the queue just for me to make it

789
00:42:52,140 --> 00:42:57,170
clearer and I'm connected again

790
00:43:12,000 --> 00:43:14,380
just couple of seconds it will go into

791
00:43:14,380 --> 00:43:17,010
arrow state

792
00:43:35,349 --> 00:43:41,980
here it is now I try to flip the laptop

793
00:43:57,220 --> 00:44:00,529
nothing but not Explorer is running

794
00:44:00,529 --> 00:44:03,349
nothing but the command the the program

795
00:44:03,349 --> 00:44:08,200
that we specified in this case this is

796
00:44:08,200 --> 00:44:12,939
and if we press Who am I

797
00:44:15,819 --> 00:44:19,538
sorry about that

798
00:44:20,380 --> 00:44:22,789
request Who am I and we see that we are

799
00:44:22,789 --> 00:44:26,500
empty authoritative system

800
00:44:33,060 --> 00:44:40,930
so as you can see thank you we are

801
00:44:40,930 --> 00:44:43,300
system so anything we do under this

802
00:44:43,300 --> 00:44:48,750
process will be as system as well let us

803
00:44:48,750 --> 00:44:52,530
exit and return to the active session

804
00:44:52,530 --> 00:45:05,650
and again I mean what does anybody have

805
00:45:05,650 --> 00:45:07,780
a question we have some more slides

806
00:45:07,780 --> 00:45:22,630
coming after ok that's it that print ok

807
00:45:22,630 --> 00:45:39,460
yeah you mean when Windows updates use

808
00:45:39,460 --> 00:45:43,150
this bit yeah so the URL is given with a

809
00:45:43,150 --> 00:45:46,150
skewed you can operate in both secured

810
00:45:46,150 --> 00:45:49,270
and unsecured way and the downloaded

811
00:45:49,270 --> 00:45:51,820
file is of course signed by Microsoft

812
00:45:51,820 --> 00:45:58,240
and the signature is is checked it it

813
00:45:58,240 --> 00:46:01,270
was a good it could be nice if you could

814
00:46:01,270 --> 00:46:03,370
just replace the job with a difference

815
00:46:03,370 --> 00:46:05,890
URL and have your own file served but

816
00:46:05,890 --> 00:46:08,710
Windows Update won't really run this

817
00:46:08,710 --> 00:46:20,350
file yes no so that's the the thing here

818
00:46:20,350 --> 00:46:23,980
I don't use any of the documented did I

819
00:46:23,980 --> 00:46:26,560
get you yeah I don't use the interfaces

820
00:46:26,560 --> 00:46:28,690
because I just go into the state file

821
00:46:28,690 --> 00:46:30,460
and change what I want this is a new

822
00:46:30,460 --> 00:46:36,370
kind of interface to control with and so

823
00:46:36,370 --> 00:46:39,310
you see in the repository the simple bit

824
00:46:39,310 --> 00:46:42,400
server and that as I said sits on top

825
00:46:42,400 --> 00:46:45,430
inherits from a simple HTTP request

826
00:46:45,430 --> 00:46:49,420
and it is used here and as I told you to

827
00:46:49,420 --> 00:46:51,340
accelerate the the time that it takes

828
00:46:51,340 --> 00:46:56,380
yes I get that at the end sorry okay

829
00:46:56,380 --> 00:47:02,110
have it yeah it is you'll see the link

830
00:47:02,110 --> 00:47:06,040
on the on the last slide and it was

831
00:47:06,040 --> 00:47:08,560
already this talk in a shorter version

832
00:47:08,560 --> 00:47:11,230
was already given at Def Con a couple of

833
00:47:11,230 --> 00:47:13,930
months ago this is an extended version I

834
00:47:13,930 --> 00:47:16,180
didn't get to go into details on the

835
00:47:16,180 --> 00:47:18,100
last one and I got the opportunity to do

836
00:47:18,100 --> 00:47:22,450
it here and so the simple bit server is

837
00:47:22,450 --> 00:47:26,080
used to to intentionally move the job

838
00:47:26,080 --> 00:47:28,900
into arrow State and actually on Windows

839
00:47:28,900 --> 00:47:31,500
10 and you can do the same without

840
00:47:31,500 --> 00:47:34,510
creating any network traffic at all and

841
00:47:34,510 --> 00:47:37,780
there's a check on the volume C on

842
00:47:37,780 --> 00:47:40,180
serial number of the destination path

843
00:47:40,180 --> 00:47:43,270
that you created and if that check fails

844
00:47:43,270 --> 00:47:46,060
it goes into arrow state and you can

845
00:47:46,060 --> 00:47:48,730
just put a random a random string on

846
00:47:48,730 --> 00:47:52,360
that virtual sorry serial number and you

847
00:47:52,360 --> 00:47:54,190
get the arrow that the destination

848
00:47:54,190 --> 00:47:59,440
volume has changed and actually bits

849
00:47:59,440 --> 00:48:02,440
inject checks if you run on Windows 10

850
00:48:02,440 --> 00:48:07,870
and always prefers this this method to

851
00:48:07,870 --> 00:48:12,160
not produce network traffic so to sum it

852
00:48:12,160 --> 00:48:13,930
up what were the conditions that made

853
00:48:13,930 --> 00:48:17,890
this method work oh maybe the the kind

854
00:48:17,890 --> 00:48:20,350
of things that could be done better one

855
00:48:20,350 --> 00:48:22,840
is that the service relies on the state

856
00:48:22,840 --> 00:48:25,450
file data without purification after the

857
00:48:25,450 --> 00:48:27,150
data is in the file this is the

858
00:48:27,150 --> 00:48:29,320
controlling that and this is what will

859
00:48:29,320 --> 00:48:34,200
be executed and a lack of unique machine

860
00:48:34,200 --> 00:48:36,910
identification this is what allowed us

861
00:48:36,910 --> 00:48:38,830
to move the file from machine to machine

862
00:48:38,830 --> 00:48:40,510
without changing anything without

863
00:48:40,510 --> 00:48:44,040
needing to provide any other parameter

864
00:48:44,040 --> 00:48:46,870
another problem is the integrity of the

865
00:48:46,870 --> 00:48:49,270
file the in the state file that as I

866
00:48:49,270 --> 00:48:52,360
said is done in operated by the system

867
00:48:52,360 --> 00:48:55,120
but can be modified by an administrator

868
00:48:55,120 --> 00:48:58,690
that can stop the service and this

869
00:48:58,690 --> 00:49:00,250
the last one just made the whole thing

870
00:49:00,250 --> 00:49:04,060
easier the the file is just a clear

871
00:49:04,060 --> 00:49:07,450
straightforward serialization of the

872
00:49:07,450 --> 00:49:11,680
objects along the way and I found

873
00:49:11,680 --> 00:49:16,030
another cool thing you can cool way you

874
00:49:16,030 --> 00:49:19,750
can abuse bits this time you can make it

875
00:49:19,750 --> 00:49:22,570
fail when when it tries to download and

876
00:49:22,570 --> 00:49:25,240
the good news for it is to choke at the

877
00:49:25,240 --> 00:49:27,460
folder where Windows updates needs to

878
00:49:27,460 --> 00:49:30,430
download the updates to and make it fail

879
00:49:30,430 --> 00:49:33,310
the the way for doing that

880
00:49:33,310 --> 00:49:35,860
is that because bits before you download

881
00:49:35,860 --> 00:49:39,610
the content of the file it creates a

882
00:49:39,610 --> 00:49:44,800
hidden file a temporary file and with a

883
00:49:44,800 --> 00:49:47,800
name convention as follows a bit and

884
00:49:47,800 --> 00:49:51,490
then one to four characters and hex

885
00:49:51,490 --> 00:49:53,980
characters and if you calculate there

886
00:49:53,980 --> 00:49:57,130
are only about 70,000 different names

887
00:49:57,130 --> 00:50:00,870
you can and that are valid in this

888
00:50:00,870 --> 00:50:05,080
format so if you it's kind of a race if

889
00:50:05,080 --> 00:50:06,970
you know where file it should be done

890
00:50:06,970 --> 00:50:09,780
with the to you go and create 70,000

891
00:50:09,780 --> 00:50:13,540
hidden files with all the options and it

892
00:50:13,540 --> 00:50:16,930
just fails and with an not that

893
00:50:16,930 --> 00:50:20,200
indicated reason and if you see it on

894
00:50:20,200 --> 00:50:22,840
Windows Update it says that some updates

895
00:50:22,840 --> 00:50:25,540
were not installed and the ever found

896
00:50:25,540 --> 00:50:27,910
windows update encounter encountered an

897
00:50:27,910 --> 00:50:31,450
unknown error so you get deprived of

898
00:50:31,450 --> 00:50:36,580
specific Windows Update and when when we

899
00:50:36,580 --> 00:50:40,720
look at it from an apt group help

900
00:50:40,720 --> 00:50:42,610
perspective this is a good way to weaken

901
00:50:42,610 --> 00:50:45,090
the security of the of the machine

902
00:50:45,090 --> 00:50:49,090
because if you didn't get the update on

903
00:50:49,090 --> 00:50:52,420
I think it was on last May and you are

904
00:50:52,420 --> 00:50:56,200
vulnerable to wanna cry and you can use

905
00:50:56,200 --> 00:50:58,330
similar to how bits inject works you can

906
00:50:58,330 --> 00:51:01,480
use it to change job properties change

907
00:51:01,480 --> 00:51:03,670
job states of jobs that are already in

908
00:51:03,670 --> 00:51:05,590
the queue and completely remove a job

909
00:51:05,590 --> 00:51:09,790
from the queue the response I got from

910
00:51:09,790 --> 00:51:12,520
Microsoft when reporting that to them

911
00:51:12,520 --> 00:51:14,830
is that a malicious administrator can do

912
00:51:14,830 --> 00:51:17,620
much worse things and if you really look

913
00:51:17,620 --> 00:51:20,490
at the definition that they have on

914
00:51:20,490 --> 00:51:24,580
vulnerabilities they say that an

915
00:51:24,580 --> 00:51:26,470
administrator if you're already in a

916
00:51:26,470 --> 00:51:28,270
newsletter you can do whatever you want

917
00:51:28,270 --> 00:51:30,640
I get that but as I showed you before

918
00:51:30,640 --> 00:51:32,410
there are some privileges that system

919
00:51:32,410 --> 00:51:37,750
has that administrator doesn't they

920
00:51:37,750 --> 00:51:39,610
could do maybe a bit better to mitigate

921
00:51:39,610 --> 00:51:43,030
that and this is where you can find the

922
00:51:43,030 --> 00:51:46,330
tool the code white paper and and the

923
00:51:46,330 --> 00:51:50,860
simple bit server and you can find me in

924
00:51:50,860 --> 00:51:53,680
email and in Twitter and thank you very

925
00:51:53,680 --> 00:51:55,919
much

