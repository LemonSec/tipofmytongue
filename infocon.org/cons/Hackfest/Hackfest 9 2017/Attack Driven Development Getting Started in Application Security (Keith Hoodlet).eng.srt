1
00:00:00,410 --> 00:00:02,639
thanks everybody and I know that it's

2
00:00:02,639 --> 00:00:04,049
early so I really appreciate that you

3
00:00:04,049 --> 00:00:06,359
guys came out at this time of you know

4
00:00:06,359 --> 00:00:08,429
morning after the CTF last night to come

5
00:00:08,429 --> 00:00:10,380
to the talk so this is really wonderful

6
00:00:10,380 --> 00:00:13,889
thank you so doctor for development more

7
00:00:13,889 --> 00:00:15,719
method than anything else I ain't losing

8
00:00:15,719 --> 00:00:18,680
my place a little bit so I'll try not to

9
00:00:18,680 --> 00:00:20,640
make it too bad for the people that are

10
00:00:20,640 --> 00:00:22,439
gonna watch the recording later but a

11
00:00:22,439 --> 00:00:23,789
little bit about me just kind of to get

12
00:00:23,789 --> 00:00:26,400
started so I am a trusted security

13
00:00:26,400 --> 00:00:27,990
engineer at a company called bug crap

14
00:00:27,990 --> 00:00:29,849
we offer crowd-sourced security

15
00:00:29,849 --> 00:00:31,859
solutions for companies to work with

16
00:00:31,859 --> 00:00:33,260
researchers find vulnerabilities

17
00:00:33,260 --> 00:00:36,120
researchers get paid companies find bugs

18
00:00:36,120 --> 00:00:37,950
everybody wins it's really awesome

19
00:00:37,950 --> 00:00:40,079
company for the party sponsored tonight

20
00:00:40,079 --> 00:00:42,000
so definitely happy to talk more about

21
00:00:42,000 --> 00:00:45,120
it in length then as well prior to my

22
00:00:45,120 --> 00:00:46,649
work at bugcrowd I worked at a company

23
00:00:46,649 --> 00:00:48,750
called rap at 7:00 so there was a

24
00:00:48,750 --> 00:00:51,480
customer success engineer and my rule

25
00:00:51,480 --> 00:00:53,850
was basically knew absolutely everything

26
00:00:53,850 --> 00:00:55,410
about absolutely all of their products

27
00:00:55,410 --> 00:00:57,840
and be able to enable everybody else on

28
00:00:57,840 --> 00:00:59,550
those products so I had to learn a lot

29
00:00:59,550 --> 00:01:01,739
about Metasploit expose what have you

30
00:01:01,739 --> 00:01:03,780
and then before that I was actually an

31
00:01:03,780 --> 00:01:06,360
intern at very code where really my

32
00:01:06,360 --> 00:01:08,340
passion for web application security

33
00:01:08,340 --> 00:01:10,200
became apparent because I knew

34
00:01:10,200 --> 00:01:11,640
absolutely nothing about it they were

35
00:01:11,640 --> 00:01:13,710
doing some very cool stuff in it and I

36
00:01:13,710 --> 00:01:15,270
would stuck on the binary static

37
00:01:15,270 --> 00:01:16,590
analysis team so I was doing a lot of

38
00:01:16,590 --> 00:01:19,350
bash and Python scripting and I really

39
00:01:19,350 --> 00:01:21,689
wanted to do web hacking so that's kind

40
00:01:21,689 --> 00:01:24,540
of where that all came about also

41
00:01:24,540 --> 00:01:26,130
earlier this year I launched the InfoSec

42
00:01:26,130 --> 00:01:28,170
mentors project on call security weekly

43
00:01:28,170 --> 00:01:29,970
episode 504 you can go back and watch

44
00:01:29,970 --> 00:01:31,360
that interview on YouTube if you want

45
00:01:31,360 --> 00:01:33,200
[Music]

46
00:01:33,200 --> 00:01:36,509
good ok it's also on an info segment

47
00:01:36,509 --> 00:01:38,700
doors net that's an MVP right now so

48
00:01:38,700 --> 00:01:40,680
it's very lightweight very simple but

49
00:01:40,680 --> 00:01:42,630
hoping to revamp it in react j/s

50
00:01:42,630 --> 00:01:45,090
probably early next year

51
00:01:45,090 --> 00:01:47,610
so beyond that been an info psych

52
00:01:47,610 --> 00:01:49,079
hobbyist for a long time and I have

53
00:01:49,079 --> 00:01:51,270
somewhat humble but simple beginnings

54
00:01:51,270 --> 00:01:54,270
mostly tied around my experience is

55
00:01:54,270 --> 00:01:56,969
early on back in the 90s with the app

56
00:01:56,969 --> 00:01:59,670
which was lots of entertainments popular

57
00:01:59,670 --> 00:02:02,610
title back on a 2 33 megahertz piece

58
00:02:02,610 --> 00:02:06,149
speed 28 8 dial-up it was really a time

59
00:02:06,149 --> 00:02:06,799
to be alive

60
00:02:06,799 --> 00:02:10,348
so with Diablo I quickly learned in

61
00:02:10,348 --> 00:02:12,030
November shortly after my birthday they

62
00:02:12,030 --> 00:02:13,470
launched battlenet

63
00:02:13,470 --> 00:02:15,150
play with my friends online that was

64
00:02:15,150 --> 00:02:17,430
really cool especially for me I grew up

65
00:02:17,430 --> 00:02:19,230
in a small town in central New Hampshire

66
00:02:19,230 --> 00:02:20,970
about five and a half hours south of

67
00:02:20,970 --> 00:02:23,460
here and there was almost there's more

68
00:02:23,460 --> 00:02:26,390
cows in the town than people so

69
00:02:26,390 --> 00:02:28,470
computers was the only way that I really

70
00:02:28,470 --> 00:02:29,790
connected rest back to the rest of the

71
00:02:29,790 --> 00:02:32,070
world and what I figured out at a very

72
00:02:32,070 --> 00:02:34,110
young age was that I could use telnet of

73
00:02:34,110 --> 00:02:36,060
all things to connect with the hablo

74
00:02:36,060 --> 00:02:38,370
trial accounts to battle.net

75
00:02:38,370 --> 00:02:40,740
without any form of authentication I

76
00:02:40,740 --> 00:02:42,450
could have any username I wanted as long

77
00:02:42,450 --> 00:02:44,910
as it was not currently in use on their

78
00:02:44,910 --> 00:02:46,350
platform at ailment and I was like this

79
00:02:46,350 --> 00:02:49,500
is cool so what did I do well I did the

80
00:02:49,500 --> 00:02:51,420
thing that any juvenile delinquent would

81
00:02:51,420 --> 00:02:51,780
do

82
00:02:51,780 --> 00:02:54,840
I wrote a bot individual basic after we

83
00:02:54,840 --> 00:02:58,740
connect as many 28 8 dial up sustaining

84
00:02:58,740 --> 00:03:01,680
connections on telnet to battlenet and

85
00:03:01,680 --> 00:03:03,420
then I'd spammed my friends I'd spam

86
00:03:03,420 --> 00:03:06,630
channels I was a punk I was basically

87
00:03:06,630 --> 00:03:10,680
just so from there growing up I learned

88
00:03:10,680 --> 00:03:13,020
that okay I probably can't be doing this

89
00:03:13,020 --> 00:03:14,580
forever because eventually I'm gonna get

90
00:03:14,580 --> 00:03:16,800
into a lot of trouble for doing this so

91
00:03:16,800 --> 00:03:19,080
I kind of figured that I should maybe

92
00:03:19,080 --> 00:03:21,180
start with you know learning something

93
00:03:21,180 --> 00:03:23,160
practical and software development was

94
00:03:23,160 --> 00:03:24,930
where it was that for me now that's in

95
00:03:24,930 --> 00:03:28,050
vs code but prior to that it was vim or

96
00:03:28,050 --> 00:03:30,690
Visual Basic studio or Visual Basic

97
00:03:30,690 --> 00:03:33,150
editor and I really wanted to get into

98
00:03:33,150 --> 00:03:35,370
web application development so I used

99
00:03:35,370 --> 00:03:37,470
Geo city's angelfire wrote simple

100
00:03:37,470 --> 00:03:40,230
websites and from working at bearer code

101
00:03:40,230 --> 00:03:42,390
I realized that okay I don't really

102
00:03:42,390 --> 00:03:43,830
understand how websites are built today

103
00:03:43,830 --> 00:03:47,250
and I really don't understand how to use

104
00:03:47,250 --> 00:03:50,760
web suite pro or Olaf's app or even this

105
00:03:50,760 --> 00:03:51,900
docker thing that people are talking

106
00:03:51,900 --> 00:03:54,480
about I was like what is this I've got a

107
00:03:54,480 --> 00:03:57,000
virtual machine why do I need docker it

108
00:03:57,000 --> 00:03:58,709
info to that end it was kind of

109
00:03:58,709 --> 00:04:01,080
eye-opening for me that I realized I had

110
00:04:01,080 --> 00:04:04,080
a lot to learn and I you know kind of be

111
00:04:04,080 --> 00:04:06,870
32 here shortly and so I felt like I was

112
00:04:06,870 --> 00:04:08,100
behind the 8-ball I needs to learn

113
00:04:08,100 --> 00:04:10,290
quickly and I need to learn a lot so I

114
00:04:10,290 --> 00:04:11,910
came up with probably something that a

115
00:04:11,910 --> 00:04:13,500
lot of people have done already and I've

116
00:04:13,500 --> 00:04:14,910
just kind of formalized the name for a

117
00:04:14,910 --> 00:04:17,399
call to attack driven development and so

118
00:04:17,399 --> 00:04:19,470
that process involves a few different

119
00:04:19,470 --> 00:04:21,358
things first of all it's a sense of

120
00:04:21,358 --> 00:04:22,380
purpose you have to know what you're

121
00:04:22,380 --> 00:04:24,750
trying to achieve as a result of the

122
00:04:24,750 --> 00:04:26,240
things that you're doing

123
00:04:26,240 --> 00:04:28,669
and so for me that was very purposefully

124
00:04:28,669 --> 00:04:31,419
practicing html5 and css3 and JavaScript

125
00:04:31,419 --> 00:04:33,229
but as I'm sure many of you have

126
00:04:33,229 --> 00:04:35,319
experienced as you're learning something

127
00:04:35,319 --> 00:04:37,639
something else is being forgotten or

128
00:04:37,639 --> 00:04:40,009
being you know not practice and that

129
00:04:40,009 --> 00:04:42,440
ultimately is what leads to stagnation

130
00:04:42,440 --> 00:04:44,870
or just kind of loss of that ability and

131
00:04:44,870 --> 00:04:46,729
I realized that with all of these new

132
00:04:46,729 --> 00:04:48,949
things like the mean stack so modular

133
00:04:48,949 --> 00:04:51,440
 Express angular and node or even

134
00:04:51,440 --> 00:04:53,930
angular right so angularjs versus

135
00:04:53,930 --> 00:04:56,389
angular 2 is a monster of itself to try

136
00:04:56,389 --> 00:04:58,130
and like figure out the differences

137
00:04:58,130 --> 00:04:59,659
between them let alone try to learn them

138
00:04:59,659 --> 00:05:03,319
and first react in node and so for me of

139
00:05:03,319 --> 00:05:04,699
the process of attack curve and

140
00:05:04,699 --> 00:05:06,909
development in a nutshell is very simple

141
00:05:06,909 --> 00:05:09,710
learn a language or a framework or a

142
00:05:09,710 --> 00:05:13,039
library but learn to build a feature or

143
00:05:13,039 --> 00:05:15,770
a simple web page that is purposefully

144
00:05:15,770 --> 00:05:17,840
broken now if any of you have ever

145
00:05:17,840 --> 00:05:20,659
written like a CTF challenge or a class

146
00:05:20,659 --> 00:05:22,220
or a training course and you've had a

147
00:05:22,220 --> 00:05:23,930
lab environment you realize how hard

148
00:05:23,930 --> 00:05:25,819
that is but it also gives you a very

149
00:05:25,819 --> 00:05:27,620
deep appreciation for the language and

150
00:05:27,620 --> 00:05:30,289
you understand how that works now beyond

151
00:05:30,289 --> 00:05:31,880
just learning how to write bad web apps

152
00:05:31,880 --> 00:05:33,800
because let's face it developers do that

153
00:05:33,800 --> 00:05:36,440
all day long anyway you then take that

154
00:05:36,440 --> 00:05:38,210
bad web app and you learn to attack it

155
00:05:38,210 --> 00:05:40,250
so now I'm building a bad web app and

156
00:05:40,250 --> 00:05:41,330
then I'm learning how to use burp suite

157
00:05:41,330 --> 00:05:42,949
pro or other tools and methodologies

158
00:05:42,949 --> 00:05:44,659
going out of reading blogs and attacking

159
00:05:44,659 --> 00:05:46,310
that web app that I have now built that

160
00:05:46,310 --> 00:05:49,430
is broken but don't stop there just

161
00:05:49,430 --> 00:05:50,570
because you've written a very simple

162
00:05:50,570 --> 00:05:51,919
reflective cross-site scripting does not

163
00:05:51,919 --> 00:05:54,229
mean your elite hacker go back and

164
00:05:54,229 --> 00:05:55,669
change the code a little bit make it a

165
00:05:55,669 --> 00:05:57,050
little bit more difficult to attack

166
00:05:57,050 --> 00:06:00,169
maybe except only certain inputs or a

167
00:06:00,169 --> 00:06:02,090
certain length of an employee and make

168
00:06:02,090 --> 00:06:03,620
it a little bit hard challenge yourself

169
00:06:03,620 --> 00:06:06,770
challenge your friends and then attack

170
00:06:06,770 --> 00:06:08,750
it again and just work through this

171
00:06:08,750 --> 00:06:10,400
process so that you can pick up

172
00:06:10,400 --> 00:06:13,069
languages frameworks libraries attack

173
00:06:13,069 --> 00:06:15,409
tools you know continuous development

174
00:06:15,409 --> 00:06:17,090
tools or continuous integration tools

175
00:06:17,090 --> 00:06:19,159
things like docker wrap it all up

176
00:06:19,159 --> 00:06:21,500
together so that you can be ultimately

177
00:06:21,500 --> 00:06:23,330
kind of building a foundation that you

178
00:06:23,330 --> 00:06:25,430
can grow up on and that's attack driven

179
00:06:25,430 --> 00:06:26,780
development as a method in a nutshell

180
00:06:26,780 --> 00:06:28,819
and of course you don't want to get rust

181
00:06:28,819 --> 00:06:31,310
you don't want to like focus on one

182
00:06:31,310 --> 00:06:32,840
thing and then suddenly like all these

183
00:06:32,840 --> 00:06:34,729
other skills you just aren't going to be

184
00:06:34,729 --> 00:06:37,260
useful to you

185
00:06:37,260 --> 00:06:41,140
so with that I do talk a little bit

186
00:06:41,140 --> 00:06:42,940
about how attacked urban development as

187
00:06:42,940 --> 00:06:44,950
a method is different from other methods

188
00:06:44,950 --> 00:06:47,290
or practices of development that we see

189
00:06:47,290 --> 00:06:49,150
today the first of course is test-driven

190
00:06:49,150 --> 00:06:50,650
development a lot of us have probably

191
00:06:50,650 --> 00:06:52,000
heard about it and if you haven't it's a

192
00:06:52,000 --> 00:06:54,460
pretty simple process of build a test

193
00:06:54,460 --> 00:06:57,910
that fails write some code that then

194
00:06:57,910 --> 00:07:00,370
allows the test to pass and then build

195
00:07:00,370 --> 00:07:01,900
another test that fails and just kind of

196
00:07:01,900 --> 00:07:04,300
keep working through this process and at

197
00:07:04,300 --> 00:07:06,340
the end of the day it's really making

198
00:07:06,340 --> 00:07:07,960
sure that as you release features or a

199
00:07:07,960 --> 00:07:09,850
new code you're not breaking the

200
00:07:09,850 --> 00:07:11,620
existing code that you have today so

201
00:07:11,620 --> 00:07:13,120
having more coverage and having more

202
00:07:13,120 --> 00:07:15,940
tests is always good but of course it

203
00:07:15,940 --> 00:07:18,640
doesn't test for security and at the end

204
00:07:18,640 --> 00:07:20,680
of the day if your tests aren't say you

205
00:07:20,680 --> 00:07:23,680
have a lock and you have a door and the

206
00:07:23,680 --> 00:07:25,060
door will still open and close even

207
00:07:25,060 --> 00:07:27,790
though you've now added a lock you're

208
00:07:27,790 --> 00:07:30,130
fine how it works as intended the

209
00:07:30,130 --> 00:07:32,320
feature is good and at the end of the

210
00:07:32,320 --> 00:07:33,550
day test-driving development doesn't

211
00:07:33,550 --> 00:07:35,860
care about security it doesn't care

212
00:07:35,860 --> 00:07:38,830
about making the developers better at

213
00:07:38,830 --> 00:07:41,920
their job from a security standpoint so

214
00:07:41,920 --> 00:07:43,900
of course attacked urban development can

215
00:07:43,900 --> 00:07:45,490
help there because if the developers

216
00:07:45,490 --> 00:07:48,760
understand why it is broken maybe they

217
00:07:48,760 --> 00:07:51,850
won't write that code going forward also

218
00:07:51,850 --> 00:07:54,730
back in about 2004 there was a paper

219
00:07:54,730 --> 00:07:57,040
called misuse and abuse cases by Gary

220
00:07:57,040 --> 00:07:58,690
McGrath and the folks at North Carolina

221
00:07:58,690 --> 00:08:01,540
State University who talked about this

222
00:08:01,540 --> 00:08:03,520
whole concept of working with your

223
00:08:03,520 --> 00:08:06,100
development team and of course your

224
00:08:06,100 --> 00:08:08,410
project managers and the business to

225
00:08:08,410 --> 00:08:09,850
come together at the beginning of a new

226
00:08:09,850 --> 00:08:11,890
project and define what the misuse and

227
00:08:11,890 --> 00:08:14,440
abuse cases are now of course that's

228
00:08:14,440 --> 00:08:16,750
over 13 years old and as a result of

229
00:08:16,750 --> 00:08:17,980
that we're now looking at an agile

230
00:08:17,980 --> 00:08:20,440
development like process in general no

231
00:08:20,440 --> 00:08:21,970
matter what business you go to and

232
00:08:21,970 --> 00:08:24,610
they're like no no just meet with all

233
00:08:24,610 --> 00:08:26,440
these people and take time to plan this

234
00:08:26,440 --> 00:08:28,240
out and I think as all of us probably

235
00:08:28,240 --> 00:08:29,830
realize that's just not realistic today

236
00:08:29,830 --> 00:08:32,260
and to that end in addition to that they

237
00:08:32,260 --> 00:08:35,710
say test at the end it's fine and I'm

238
00:08:35,710 --> 00:08:38,049
sure as we all know and have experienced

239
00:08:38,049 --> 00:08:40,210
that's not fine because even if a

240
00:08:40,210 --> 00:08:42,370
feature is vulnerable if the business is

241
00:08:42,370 --> 00:08:44,290
relying on that feature being released

242
00:08:44,290 --> 00:08:47,260
for a new sale or a renewal or even just

243
00:08:47,260 --> 00:08:48,910
trying to beat the you know competition

244
00:08:48,910 --> 00:08:50,680
to market that fraud

245
00:08:50,680 --> 00:08:52,779
is going to be shipped even if it is

246
00:08:52,779 --> 00:08:54,580
vulnerable and at the end of the day in

247
00:08:54,580 --> 00:08:56,290
an agile development world that's just

248
00:08:56,290 --> 00:08:58,630
not good enough so again the tact urban

249
00:08:58,630 --> 00:09:00,070
development is a great process because

250
00:09:00,070 --> 00:09:01,690
if you're testing as you work through

251
00:09:01,690 --> 00:09:03,250
the process of developing a new feature

252
00:09:03,250 --> 00:09:05,610
or a new code release for a new product

253
00:09:05,610 --> 00:09:08,020
then you've kind of tested it at every

254
00:09:08,020 --> 00:09:10,000
stage of development and again it's not

255
00:09:10,000 --> 00:09:12,880
a problem where you have suddenly a

256
00:09:12,880 --> 00:09:14,500
release timeline that you just can't

257
00:09:14,500 --> 00:09:15,760
meet because you have to get the testing

258
00:09:15,760 --> 00:09:17,020
and it yet if you've done testing

259
00:09:17,020 --> 00:09:18,610
throughout for security purposes it's

260
00:09:18,610 --> 00:09:21,370
really great and so at the end of the

261
00:09:21,370 --> 00:09:22,720
day attack tip and development is really

262
00:09:22,720 --> 00:09:24,940
leaning toward adopting misuse and abuse

263
00:09:24,940 --> 00:09:27,220
cases in the process of agile

264
00:09:27,220 --> 00:09:29,020
development so it's all about learning

265
00:09:29,020 --> 00:09:31,240
frameworks and languages and features of

266
00:09:31,240 --> 00:09:33,610
exploitation and of building secure web

267
00:09:33,610 --> 00:09:34,990
apps because eventually you'll get to a

268
00:09:34,990 --> 00:09:37,149
point where any attack you go ahead and

269
00:09:37,149 --> 00:09:39,610
try to develop against that particular

270
00:09:39,610 --> 00:09:41,020
piece of code you've written won't work

271
00:09:41,020 --> 00:09:43,000
because it's now ironclad if you're

272
00:09:43,000 --> 00:09:44,500
using a whitelist maybe you've

273
00:09:44,500 --> 00:09:45,970
introduced two-factor authentication

274
00:09:45,970 --> 00:09:46,810
maybe you've done a number of different

275
00:09:46,810 --> 00:09:48,610
things but at the end of the day the

276
00:09:48,610 --> 00:09:50,110
code that you've now written is secure

277
00:09:50,110 --> 00:09:54,550
and you know bad mediocre and good and

278
00:09:54,550 --> 00:09:56,830
you can easily say okay if we're using

279
00:09:56,830 --> 00:09:59,500
the dangerously set in our HTML flag to

280
00:09:59,500 --> 00:10:02,350
true I know that now in react is I am

281
00:10:02,350 --> 00:10:03,910
introducing potentially cross-site

282
00:10:03,910 --> 00:10:06,310
scripting otherwise react.js is totally

283
00:10:06,310 --> 00:10:08,320
fine without having to introduce that

284
00:10:08,320 --> 00:10:10,720
flight where so suddenly if I know that

285
00:10:10,720 --> 00:10:12,250
because I've built some bad features

286
00:10:12,250 --> 00:10:13,750
that introduced that and I know how that

287
00:10:13,750 --> 00:10:16,060
works and how I can get then attack it I

288
00:10:16,060 --> 00:10:17,770
can just simply go look at my code base

289
00:10:17,770 --> 00:10:21,310
for that flag and say okay can we trace

290
00:10:21,310 --> 00:10:23,380
this back to any user inputs if we can

291
00:10:23,380 --> 00:10:27,040
really bad so again the type driven

292
00:10:27,040 --> 00:10:27,970
development is really just two

293
00:10:27,970 --> 00:10:29,650
continuous testing of misuse and abuse

294
00:10:29,650 --> 00:10:31,600
cases and helping to inform both the

295
00:10:31,600 --> 00:10:33,490
security engineers application security

296
00:10:33,490 --> 00:10:36,010
developers and the business about

297
00:10:36,010 --> 00:10:37,959
potential downfalls of whatever they're

298
00:10:37,959 --> 00:10:40,349
writing in

299
00:10:41,950 --> 00:10:46,360
so I I do to cover when to use the tact

300
00:10:46,360 --> 00:10:48,100
Urban Development because as much as I

301
00:10:48,100 --> 00:10:49,180
would like that this would be a great

302
00:10:49,180 --> 00:10:51,010
process in every form of development

303
00:10:51,010 --> 00:10:52,750
that exists that's just simply not true

304
00:10:52,750 --> 00:10:55,060
so for me I have found it to be really

305
00:10:55,060 --> 00:10:56,880
valuable in web application development

306
00:10:56,880 --> 00:10:59,680
specifically because when it comes to

307
00:10:59,680 --> 00:11:03,910
html5 or css3 or even Java Script es5 or

308
00:11:03,910 --> 00:11:06,730
es6 for example fairly stable they're

309
00:11:06,730 --> 00:11:08,139
not something that's dramatically

310
00:11:08,139 --> 00:11:10,420
changing between versions and as a

311
00:11:10,420 --> 00:11:13,269
result of that you can rely upon the

312
00:11:13,269 --> 00:11:15,730
prototypes that you build to be working

313
00:11:15,730 --> 00:11:17,230
pretty similarly throughout the process

314
00:11:17,230 --> 00:11:18,790
of development if you learned something

315
00:11:18,790 --> 00:11:20,589
in html5 today it's probably still good

316
00:11:20,589 --> 00:11:22,240
for the next three years if you learn

317
00:11:22,240 --> 00:11:25,389
something in angularjs or angular 5 I

318
00:11:25,389 --> 00:11:28,959
guess now it's probably not good at that

319
00:11:28,959 --> 00:11:31,990
point it's like okay maybe two years

320
00:11:31,990 --> 00:11:34,180
from now Google will break they've got a

321
00:11:34,180 --> 00:11:36,820
habit of breaking it so web applications

322
00:11:36,820 --> 00:11:38,620
at a simple level really really great

323
00:11:38,620 --> 00:11:40,839
from a conceptually simple process of

324
00:11:40,839 --> 00:11:42,160
okay I just need to write a little bit

325
00:11:42,160 --> 00:11:44,410
of code in a browser I have a web page

326
00:11:44,410 --> 00:11:46,720
of course prototyping is quick and fast

327
00:11:46,720 --> 00:11:49,120
quick and easy and then from there the

328
00:11:49,120 --> 00:11:50,680
information that you need isn't widely

329
00:11:50,680 --> 00:11:54,070
available w3schools Khan Academy any

330
00:11:54,070 --> 00:11:55,839
number of different stack overflow pages

331
00:11:55,839 --> 00:11:57,880
that probably also have bad code but

332
00:11:57,880 --> 00:12:00,130
it's fine to be good code it all exists

333
00:12:00,130 --> 00:12:01,839
so it's easily available and something

334
00:12:01,839 --> 00:12:03,490
that you can go ahead and look for good

335
00:12:03,490 --> 00:12:05,769
examples to pull from and start to work

336
00:12:05,769 --> 00:12:08,110
from did that end I like to say that the

337
00:12:08,110 --> 00:12:10,269
attack driven development process is

338
00:12:10,269 --> 00:12:14,649
very effective or it's over 9000 when it

339
00:12:14,649 --> 00:12:16,120
comes to Greenfield projects on the

340
00:12:16,120 --> 00:12:18,880
other hand it's really important to go

341
00:12:18,880 --> 00:12:19,630
ahead and make sure that your

342
00:12:19,630 --> 00:12:21,730
development resources are informed of

343
00:12:21,730 --> 00:12:23,260
potential processes that are going to

344
00:12:23,260 --> 00:12:26,260
fail as a result of whatever they're

345
00:12:26,260 --> 00:12:29,319
developing and so the foundation of any

346
00:12:29,319 --> 00:12:30,880
new product that your company is writing

347
00:12:30,880 --> 00:12:33,100
is largely determined by who you have

348
00:12:33,100 --> 00:12:35,019
available to write them if they all

349
00:12:35,019 --> 00:12:36,370
happen to know Python they're not going

350
00:12:36,370 --> 00:12:38,290
to write a ruby on rails app because

351
00:12:38,290 --> 00:12:39,250
you're not hiring Ruby on Rails

352
00:12:39,250 --> 00:12:42,279
development so of course complexity of

353
00:12:42,279 --> 00:12:43,540
whatever they're writing is probably

354
00:12:43,540 --> 00:12:45,160
simple at first and we've all seen scope

355
00:12:45,160 --> 00:12:47,829
creep so it never ends simply and then

356
00:12:47,829 --> 00:12:49,510
prototyping from they're generally

357
00:12:49,510 --> 00:12:51,130
drives the decisions of the business

358
00:12:51,130 --> 00:12:52,990
yeah we're gonna add this future or not

359
00:12:52,990 --> 00:12:54,519
how much time and effort is it going to

360
00:12:54,519 --> 00:12:55,720
take to develop that

361
00:12:55,720 --> 00:12:56,920
and at the end of the day attacked or

362
00:12:56,920 --> 00:12:58,330
even developed it will help you and your

363
00:12:58,330 --> 00:13:01,030
team understand okay if we go down this

364
00:13:01,030 --> 00:13:03,700
path here's the extra work that we need

365
00:13:03,700 --> 00:13:06,220
to do to secure it do we want to do that

366
00:13:06,220 --> 00:13:08,710
and so of course most of the time

367
00:13:08,710 --> 00:13:10,390
they'll say well no why don't we just

368
00:13:10,390 --> 00:13:12,220
import this library and then we can go

369
00:13:12,220 --> 00:13:14,590
ahead and go that route leads to other

370
00:13:14,590 --> 00:13:17,200
problems but at the end of the day maybe

371
00:13:17,200 --> 00:13:23,290
not a bad idea so again the tactic and

372
00:13:23,290 --> 00:13:25,140
development there is pretty informative

373
00:13:25,140 --> 00:13:27,310
and of course you're new if you're

374
00:13:27,310 --> 00:13:28,840
repeating yourself over and over and

375
00:13:28,840 --> 00:13:31,090
over again you're kind of compiling that

376
00:13:31,090 --> 00:13:33,460
knowledge and over time you're going to

377
00:13:33,460 --> 00:13:35,260
start to realize that okay actually I

378
00:13:35,260 --> 00:13:37,030
can speak with some authority on this

379
00:13:37,030 --> 00:13:38,410
because I've actually tested this enough

380
00:13:38,410 --> 00:13:40,930
times to understand how this works why

381
00:13:40,930 --> 00:13:44,620
it breaks and then how to fix it most of

382
00:13:44,620 --> 00:13:46,120
the time especially for me when I was

383
00:13:46,120 --> 00:13:48,280
new getting into this I would have to

384
00:13:48,280 --> 00:13:49,600
beit's with people and then I would

385
00:13:49,600 --> 00:13:50,890
learn something new and then I'd go back

386
00:13:50,890 --> 00:13:52,090
and I'd test it and I find out actually

387
00:13:52,090 --> 00:13:54,250
they were wrong because I know why this

388
00:13:54,250 --> 00:13:55,660
breaks because I've actually attacked it

389
00:13:55,660 --> 00:13:58,840
and until you actually sit down and

390
00:13:58,840 --> 00:14:00,520
write some code and attack an

391
00:14:00,520 --> 00:14:02,470
application everything you're learning

392
00:14:02,470 --> 00:14:04,240
is theoretical it's kind of like

393
00:14:04,240 --> 00:14:05,440
everybody has a plan until you get

394
00:14:05,440 --> 00:14:06,340
punched in the face

395
00:14:06,340 --> 00:14:07,870
well everybody writes a great web app

396
00:14:07,870 --> 00:14:10,030
until they punch it in the face and then

397
00:14:10,030 --> 00:14:11,650
suddenly they realize maybe not a great

398
00:14:11,650 --> 00:14:16,330
web app so again when it comes to you

399
00:14:16,330 --> 00:14:17,620
know experience and being able to

400
00:14:17,620 --> 00:14:20,350
develop knowledge over time I definitely

401
00:14:20,350 --> 00:14:22,540
check out or you know process through

402
00:14:22,540 --> 00:14:23,890
writing code because you can read a

403
00:14:23,890 --> 00:14:25,870
million blogs and listen to a thousand

404
00:14:25,870 --> 00:14:27,340
podcasts but until you put your hands on

405
00:14:27,340 --> 00:14:29,770
the keyboard and actually do it it's all

406
00:14:29,770 --> 00:14:34,900
just theoretical so of course there are

407
00:14:34,900 --> 00:14:36,220
times when you really don't want to use

408
00:14:36,220 --> 00:14:38,589
tack driven development because let's

409
00:14:38,589 --> 00:14:40,030
face it again it doesn't work everywhere

410
00:14:40,030 --> 00:14:41,500
and there are just certain things that

411
00:14:41,500 --> 00:14:43,900
it won't work on a great example of that

412
00:14:43,900 --> 00:14:47,410
is of course pile languages so to that

413
00:14:47,410 --> 00:14:50,080
end if you have GCC versus clang and you

414
00:14:50,080 --> 00:14:52,270
compile this bit of code which is just

415
00:14:52,270 --> 00:14:54,910
the int main x equals zero return x plus

416
00:14:54,910 --> 00:14:56,940
1 or x equals 1 plus x equals 2

417
00:14:56,940 --> 00:14:59,430
sometimes it's 3 sometimes it's 4

418
00:14:59,430 --> 00:15:02,440
depends on which compiler you use so if

419
00:15:02,440 --> 00:15:03,910
you got undefined behavior and the

420
00:15:03,910 --> 00:15:05,430
development stack that you're writing in

421
00:15:05,430 --> 00:15:07,540
may be that vulnerable code you've

422
00:15:07,540 --> 00:15:09,560
written isn't really vulnerable

423
00:15:09,560 --> 00:15:11,210
just the compiler that you wrote it that

424
00:15:11,210 --> 00:15:12,860
you use to actually go ahead and put

425
00:15:12,860 --> 00:15:15,230
that together so to that end it's kind

426
00:15:15,230 --> 00:15:18,290
of like okay if I'm learning this thing

427
00:15:18,290 --> 00:15:19,160
and I want to make sure that I'm

428
00:15:19,160 --> 00:15:21,710
attacking it correctly I probably

429
00:15:21,710 --> 00:15:23,210
already need to have deep knowledge of

430
00:15:23,210 --> 00:15:24,980
the language to really understand how

431
00:15:24,980 --> 00:15:27,650
those edge cases fall out and again if

432
00:15:27,650 --> 00:15:28,700
you already have deep knowledge you

433
00:15:28,700 --> 00:15:30,020
probably already know about the security

434
00:15:30,020 --> 00:15:31,580
problems and that's not the point of at

435
00:15:31,580 --> 00:15:32,900
actor of a development it's to take

436
00:15:32,900 --> 00:15:34,130
something new and build that knowledge

437
00:15:34,130 --> 00:15:35,360
quickly iteratively

438
00:15:35,360 --> 00:15:37,610
and kind of holistically or with a broad

439
00:15:37,610 --> 00:15:41,150
focus and at at times so to that end of

440
00:15:41,150 --> 00:15:42,529
course if you're also prototyping it's

441
00:15:42,529 --> 00:15:44,060
kind of be difficult because you never

442
00:15:44,060 --> 00:15:46,160
know if you're writing it on a Mac and

443
00:15:46,160 --> 00:15:47,600
then suddenly you go to compile it on a

444
00:15:47,600 --> 00:15:49,040
Linux server and it doesn't compile the

445
00:15:49,040 --> 00:15:51,589
same way it's going to cause problems

446
00:15:51,589 --> 00:15:53,060
it's gonna be a headache and it's not

447
00:15:53,060 --> 00:15:55,760
gonna be effective for you so to that

448
00:15:55,760 --> 00:15:57,470
end detect open development as a process

449
00:15:57,470 --> 00:16:00,290
build it badly break it fix it keep

450
00:16:00,290 --> 00:16:03,500
going not really useful or at least only

451
00:16:03,500 --> 00:16:06,500
tangentially useful of course if you

452
00:16:06,500 --> 00:16:08,870
lack practical examples as well as in

453
00:16:08,870 --> 00:16:12,830
the case here with its John Romer Rosner

454
00:16:12,830 --> 00:16:16,490
excuse me he use talking about in this

455
00:16:16,490 --> 00:16:19,760
case rust of all things and because the

456
00:16:19,760 --> 00:16:22,280
stack is under development your

457
00:16:22,280 --> 00:16:24,260
complexity is potentially infinite and

458
00:16:24,260 --> 00:16:26,120
the reason that is is because especially

459
00:16:26,120 --> 00:16:27,200
like if you go out and you try to learn

460
00:16:27,200 --> 00:16:29,510
angular go out and Google how to do

461
00:16:29,510 --> 00:16:30,950
something an angular and you will get

462
00:16:30,950 --> 00:16:33,950
how to do it in angularjs how to do it

463
00:16:33,950 --> 00:16:36,080
in angular 2 which by the way doesn't

464
00:16:36,080 --> 00:16:37,850
use it's like typescript it doesn't even

465
00:16:37,850 --> 00:16:40,480
use a JavaScript anymore

466
00:16:40,480 --> 00:16:43,820
and it's like trying to do it in like

467
00:16:43,820 --> 00:16:46,250
five or four like you breaking changes

468
00:16:46,250 --> 00:16:48,490
everywhere and so did that end

469
00:16:48,490 --> 00:16:50,750
complexity of your app and your examples

470
00:16:50,750 --> 00:16:52,400
good luck like you're probably gonna

471
00:16:52,400 --> 00:16:53,540
start writing one way and then suddenly

472
00:16:53,540 --> 00:16:54,680
it looks like I don't know you got to do

473
00:16:54,680 --> 00:16:55,940
with this entirely other way and get it

474
00:16:55,940 --> 00:16:59,030
back back in your code again so to that

475
00:16:59,030 --> 00:17:01,220
end prototyping here sampling anything

476
00:17:01,220 --> 00:17:02,630
with you know for Mikey or without

477
00:17:02,630 --> 00:17:03,980
instruction it's good luck you don't

478
00:17:03,980 --> 00:17:04,790
know what it looks like you don't know

479
00:17:04,790 --> 00:17:05,810
what it should look like you don't know

480
00:17:05,810 --> 00:17:07,250
how it's supposed to work when you're

481
00:17:07,250 --> 00:17:09,859
done and if you manage to get there

482
00:17:09,859 --> 00:17:12,709
great but again it's a headache it's a

483
00:17:12,709 --> 00:17:14,810
slow process you're probably learning a

484
00:17:14,810 --> 00:17:16,550
lot but you're learning it slowly and

485
00:17:16,550 --> 00:17:17,900
the point of its active in development

486
00:17:17,900 --> 00:17:20,480
is to learn things quickly so again

487
00:17:20,480 --> 00:17:23,630
trade carefully finally if it's in

488
00:17:23,630 --> 00:17:26,480
if the language that you're working in

489
00:17:26,480 --> 00:17:28,369
is like you're running Knightley's to

490
00:17:28,369 --> 00:17:30,230
kind of keep going as was the case with

491
00:17:30,230 --> 00:17:32,360
docker for a long time especially doctor

492
00:17:32,360 --> 00:17:34,250
for Mac we're getting constant updates

493
00:17:34,250 --> 00:17:36,350
and things are breaking everything that

494
00:17:36,350 --> 00:17:37,250
you're learning and everything that

495
00:17:37,250 --> 00:17:38,570
you're writing from that perspective is

496
00:17:38,570 --> 00:17:41,450
out of date so you're only getting some

497
00:17:41,450 --> 00:17:43,670
tangential benefit from the tools like

498
00:17:43,670 --> 00:17:46,010
Burke or like zap or what have you

499
00:17:46,010 --> 00:17:48,800
if you're using other things around that

500
00:17:48,800 --> 00:17:50,810
given framework or library you're gonna

501
00:17:50,810 --> 00:17:52,610
learn a lot about those but at the end

502
00:17:52,610 --> 00:17:54,920
of the day all of your things that

503
00:17:54,920 --> 00:17:56,120
you're writing as prototypes are

504
00:17:56,120 --> 00:17:58,250
examples to attack that knowledge isn't

505
00:17:58,250 --> 00:18:00,650
going to serve you very well in the next

506
00:18:00,650 --> 00:18:02,450
10 days or the next year because

507
00:18:02,450 --> 00:18:03,950
somebody's gonna have moved on the

508
00:18:03,950 --> 00:18:05,270
company said is only gonna be developing

509
00:18:05,270 --> 00:18:06,710
something different and all that

510
00:18:06,710 --> 00:18:08,330
knowledge of oh yeah I can break this

511
00:18:08,330 --> 00:18:10,250
this is fine with security engineer you

512
00:18:10,250 --> 00:18:12,920
totally hacked this probably not true

513
00:18:12,920 --> 00:18:14,750
because everything is since chained when

514
00:18:14,750 --> 00:18:16,970
you last looked at it so again that

515
00:18:16,970 --> 00:18:17,990
knowledge that you gained who's going to

516
00:18:17,990 --> 00:18:20,290
be short-lived

517
00:18:23,670 --> 00:18:26,640
so if this process or you know this

518
00:18:26,640 --> 00:18:28,200
whole idea of attacker and development

519
00:18:28,200 --> 00:18:30,600
building things badly quickly breaking

520
00:18:30,600 --> 00:18:32,580
them fixing them keeping up even moving

521
00:18:32,580 --> 00:18:33,810
through that process of interest to you

522
00:18:33,810 --> 00:18:36,300
it's really important that you build an

523
00:18:36,300 --> 00:18:38,520
important and an effective lab if you

524
00:18:38,520 --> 00:18:40,260
hate working in your lab you will not

525
00:18:40,260 --> 00:18:42,840
work in it pretty simple right

526
00:18:42,840 --> 00:18:43,860
so you gotta like the tools that you

527
00:18:43,860 --> 00:18:45,810
work in you gotta like the operating

528
00:18:45,810 --> 00:18:46,970
system you're running you gotta like the

529
00:18:46,970 --> 00:18:49,290
laptop or the monitors that you have

530
00:18:49,290 --> 00:18:50,850
because if you don't have something that

531
00:18:50,850 --> 00:18:51,750
you're actually going to use at the end

532
00:18:51,750 --> 00:18:52,770
of the day you're just never going to

533
00:18:52,770 --> 00:18:55,110
use it so for me if you're running

534
00:18:55,110 --> 00:18:57,570
things locally I really very very highly

535
00:18:57,570 --> 00:18:59,510
recommend checking out nodejs

536
00:18:59,510 --> 00:19:03,150
it is the underpinnings of every rate

537
00:19:03,150 --> 00:19:05,370
like react.js angularjs everything that

538
00:19:05,370 --> 00:19:07,380
you're seeing in a dot j/s world today

539
00:19:07,380 --> 00:19:10,020
is underpinned by nodejs and to that end

540
00:19:10,020 --> 00:19:11,670
you're probably already seeing it in

541
00:19:11,670 --> 00:19:13,350
your environment and if you're not

542
00:19:13,350 --> 00:19:14,760
seeing it in your environment today you

543
00:19:14,760 --> 00:19:17,760
probably will be soon way then I like to

544
00:19:17,760 --> 00:19:19,140
think of it as it's very similar to

545
00:19:19,140 --> 00:19:21,150
Python environment variables or Python

546
00:19:21,150 --> 00:19:23,070
environments that you run but you can

547
00:19:23,070 --> 00:19:25,590
have directories that hold all of your

548
00:19:25,590 --> 00:19:28,080
given the project specific packages in

549
00:19:28,080 --> 00:19:30,750
that folder and I can just go in notes

550
00:19:30,750 --> 00:19:33,590
start I've got an app running I'm good

551
00:19:33,590 --> 00:19:35,370
really great for testing different

552
00:19:35,370 --> 00:19:36,840
libraries that you've imported as well

553
00:19:36,840 --> 00:19:38,700
it's your developers like oh yeah we can

554
00:19:38,700 --> 00:19:40,220
just import this library and we're good

555
00:19:40,220 --> 00:19:42,360
import it check it test it

556
00:19:42,360 --> 00:19:45,590
plug it the code

557
00:19:48,750 --> 00:19:51,000
so in addition to that definitely check

558
00:19:51,000 --> 00:19:53,490
out docker if you haven't it's probably

559
00:19:53,490 --> 00:19:55,080
already in use today in your environment

560
00:19:55,080 --> 00:19:57,630
and it's for those of you that don't

561
00:19:57,630 --> 00:19:59,309
know what docker is it's essentially

562
00:19:59,309 --> 00:20:01,710
micro virtual or micro virtualization

563
00:20:01,710 --> 00:20:05,159
for small simple applications that you

564
00:20:05,159 --> 00:20:07,220
can develop that you can go ahead and

565
00:20:07,220 --> 00:20:09,510
spin up quickly replicate across

566
00:20:09,510 --> 00:20:11,520
different environments it's a little

567
00:20:11,520 --> 00:20:14,190
wonky on Windows versus Linux and Mac

568
00:20:14,190 --> 00:20:16,770
anything because if you're on Mac or

569
00:20:16,770 --> 00:20:18,900
Linux anything that you've compiled as

570
00:20:18,900 --> 00:20:21,090
an image and you're running is gonna be

571
00:20:21,090 --> 00:20:23,429
pretty much the same when I was training

572
00:20:23,429 --> 00:20:25,440
at Derby con we had a several students

573
00:20:25,440 --> 00:20:26,789
who are having difficulties with docker

574
00:20:26,789 --> 00:20:28,860
compose for example and if you've ever

575
00:20:28,860 --> 00:20:30,809
worked with docker and you've used

576
00:20:30,809 --> 00:20:32,549
docker compose it's basically a manifest

577
00:20:32,549 --> 00:20:34,289
of how you're going to build up a series

578
00:20:34,289 --> 00:20:35,700
of micro services to all interact with

579
00:20:35,700 --> 00:20:38,820
one another really awesome tool and

580
00:20:38,820 --> 00:20:40,320
again if it doesn't work on different

581
00:20:40,320 --> 00:20:41,840
systems

582
00:20:41,840 --> 00:20:43,770
maybe you can't share it but at least

583
00:20:43,770 --> 00:20:44,640
you're still building that knowledge

584
00:20:44,640 --> 00:20:46,500
locally and you don't need to have any

585
00:20:46,500 --> 00:20:47,640
internet access as long as you've

586
00:20:47,640 --> 00:20:49,860
already pulled things down before you're

587
00:20:49,860 --> 00:20:52,860
on the plane or you've traveled there's

588
00:20:52,860 --> 00:20:55,590
also a vagrant so again not really seen

589
00:20:55,590 --> 00:20:58,169
in the enterprise hey it is something

590
00:20:58,169 --> 00:21:00,929
that it's kind of like if I'm going to

591
00:21:00,929 --> 00:21:02,460
run a server and I need to build all of

592
00:21:02,460 --> 00:21:04,049
the deployment scripts and the shell

593
00:21:04,049 --> 00:21:06,150
scripts etc to make that server run the

594
00:21:06,150 --> 00:21:06,980
way I wanted to

595
00:21:06,980 --> 00:21:09,299
vagrant is going to use those same sort

596
00:21:09,299 --> 00:21:11,460
of scripts locally to build up a virtual

597
00:21:11,460 --> 00:21:14,429
machine so useful if you're going to go

598
00:21:14,429 --> 00:21:17,100
and provision something later as like a

599
00:21:17,100 --> 00:21:20,429
bare metals machine but for the most

600
00:21:20,429 --> 00:21:22,320
part you're going to find docker is

601
00:21:22,320 --> 00:21:24,480
what's largely adopted by businesses

602
00:21:24,480 --> 00:21:26,190
today so learning it now especially

603
00:21:26,190 --> 00:21:28,440
Community Edition locally for your lab

604
00:21:28,440 --> 00:21:30,990
environment sharing your volume of your

605
00:21:30,990 --> 00:21:32,280
source code into the container and

606
00:21:32,280 --> 00:21:34,049
running things accordingly is going to

607
00:21:34,049 --> 00:21:37,770
be beneficial to you overall so of

608
00:21:37,770 --> 00:21:38,940
course there are people that really like

609
00:21:38,940 --> 00:21:40,200
to put all their tools in one place

610
00:21:40,200 --> 00:21:42,289
there is of course VMware fusion or

611
00:21:42,289 --> 00:21:46,230
VirtualBox to that end I generally like

612
00:21:46,230 --> 00:21:48,240
to give as much resources as possible to

613
00:21:48,240 --> 00:21:50,010
my tools namely bursts we probe the

614
00:21:50,010 --> 00:21:54,659
memory hog so I tend not to use any sort

615
00:21:54,659 --> 00:21:55,980
of virtual machines anymore I literally

616
00:21:55,980 --> 00:21:58,380
used just docker containers for all of

617
00:21:58,380 --> 00:22:00,059
my tooling up to and including Kali

618
00:22:00,059 --> 00:22:01,559
Linux they actually have a bare-bones

619
00:22:01,559 --> 00:22:03,389
Kali Linux

620
00:22:03,389 --> 00:22:04,740
that's readily available then you can

621
00:22:04,740 --> 00:22:06,269
just pull down all the packages into

622
00:22:06,269 --> 00:22:08,009
that accordingly and then start playing

623
00:22:08,009 --> 00:22:10,190
with any other tools that you might use

624
00:22:10,190 --> 00:22:12,690
then when it comes to editors personally

625
00:22:12,690 --> 00:22:15,389
I use vs code now again I come from a

626
00:22:15,389 --> 00:22:18,539
world of using vim mostly to develop but

627
00:22:18,539 --> 00:22:20,970
if you've not checked out vs code do

628
00:22:20,970 --> 00:22:22,769
yourself a favor and look at it because

629
00:22:22,769 --> 00:22:26,549
I was very much an opponent of anything

630
00:22:26,549 --> 00:22:28,860
Microsoft I don't run Windows I don't

631
00:22:28,860 --> 00:22:32,039
run you know even office 365 any of it I

632
00:22:32,039 --> 00:22:33,269
don't want anything to do with anything

633
00:22:33,269 --> 00:22:34,679
for Microsoft and then I checked out vs

634
00:22:34,679 --> 00:22:37,230
code and I was like not that I could

635
00:22:37,230 --> 00:22:39,169
actually use this this is really good

636
00:22:39,169 --> 00:22:41,610
very extensible very powerful

637
00:22:41,610 --> 00:22:44,190
lightweight fast it's got just a great

638
00:22:44,190 --> 00:22:46,649
intellisense as well so check it out if

639
00:22:46,649 --> 00:22:48,629
you need a full-featured IDE webstorm or

640
00:22:48,629 --> 00:22:50,580
pycharm is really good anything from

641
00:22:50,580 --> 00:22:51,990
Jeff Raines is generally pretty good but

642
00:22:51,990 --> 00:22:53,639
again it costs money whereas vs code was

643
00:22:53,639 --> 00:22:56,759
free so for me I was like ok you know

644
00:22:56,759 --> 00:22:59,220
seven dollars a month for webstorm not a

645
00:22:59,220 --> 00:23:01,950
huge deal but vs code ended up being

646
00:23:01,950 --> 00:23:04,769
better and then personally I do all of

647
00:23:04,769 --> 00:23:06,419
my testing from a security standpoint in

648
00:23:06,419 --> 00:23:08,129
separate browsers so as you're seeing a

649
00:23:08,129 --> 00:23:09,779
mess using Chrome for this presentation

650
00:23:09,779 --> 00:23:12,779
here but I use Firefox developer edition

651
00:23:12,779 --> 00:23:14,850
for all of my testing purposes I like to

652
00:23:14,850 --> 00:23:16,200
have an entirely separate testing

653
00:23:16,200 --> 00:23:18,149
environment now if you still want to use

654
00:23:18,149 --> 00:23:19,590
a chrome environment in general there is

655
00:23:19,590 --> 00:23:21,749
auto chrome it's something that NCC

656
00:23:21,749 --> 00:23:24,389
group put out about six months ago now

657
00:23:24,389 --> 00:23:27,690
and it basically has chromium embedded

658
00:23:27,690 --> 00:23:29,759
or chromium under the hood and it just

659
00:23:29,759 --> 00:23:31,769
like builds different profiles and

660
00:23:31,769 --> 00:23:33,389
allows you to do a lot of separate

661
00:23:33,389 --> 00:23:35,119
testing and a really nice and clean way

662
00:23:35,119 --> 00:23:37,259
so if you really want to use chrome

663
00:23:37,259 --> 00:23:39,509
check it out there are a lot of plugins

664
00:23:39,509 --> 00:23:42,029
that I specifically enjoy in Firefox and

665
00:23:42,029 --> 00:23:44,519
specifically the developer edition that

666
00:23:44,519 --> 00:23:46,259
I like to use and if we have time at the

667
00:23:46,259 --> 00:23:47,820
end of this we probably will expand

668
00:23:47,820 --> 00:23:50,340
going kind of fast I'm happy to you know

669
00:23:50,340 --> 00:23:51,720
pull up some of my tools and share what

670
00:23:51,720 --> 00:23:54,450
I'm using today as well so we can do

671
00:23:54,450 --> 00:23:59,129
that if we have extra time now I'm sure

672
00:23:59,129 --> 00:24:00,240
some of you are probably like what about

673
00:24:00,240 --> 00:24:01,769
the cloud can I just do this in the

674
00:24:01,769 --> 00:24:04,409
cloud and it's yeah sure you like Linux

675
00:24:04,409 --> 00:24:05,999
you got AWS you're gonna absolutely use

676
00:24:05,999 --> 00:24:07,139
this in the cloud if you want to today

677
00:24:07,139 --> 00:24:09,389
if you're a big Microsoft shop you're

678
00:24:09,389 --> 00:24:11,759
probably using Azure as have I been

679
00:24:11,759 --> 00:24:13,379
poned has proven Azure is really

680
00:24:13,379 --> 00:24:15,650
powerful droid hunt is an MP

681
00:24:15,650 --> 00:24:17,630
yet he doesn't work at Microsoft but

682
00:24:17,630 --> 00:24:20,090
he's a Microsoft MVP uses adjure for all

683
00:24:20,090 --> 00:24:22,100
of the have I been phone stuff and it's

684
00:24:22,100 --> 00:24:25,130
powerful and it's fast and he is just

685
00:24:25,130 --> 00:24:26,690
kind of expounded upon that and

686
00:24:26,690 --> 00:24:28,970
personally I'm not really big into

687
00:24:28,970 --> 00:24:30,170
Windows again not really big into

688
00:24:30,170 --> 00:24:31,430
Microsoft so I just haven't checked it

689
00:24:31,430 --> 00:24:32,590
out yeah

690
00:24:32,590 --> 00:24:35,510
also Heroku which again it's something

691
00:24:35,510 --> 00:24:36,830
that I didn't use until I actually came

692
00:24:36,830 --> 00:24:39,350
to bugcrowd because it's a kind of an

693
00:24:39,350 --> 00:24:41,809
interesting cloud like environment

694
00:24:41,809 --> 00:24:43,430
similar to digital looking for you those

695
00:24:43,430 --> 00:24:44,630
of you that have any experience there

696
00:24:44,630 --> 00:24:46,700
and it allows you just spin up quick

697
00:24:46,700 --> 00:24:49,640
projects or cooling and then just kind

698
00:24:49,640 --> 00:24:50,720
of run with it and then spin it back

699
00:24:50,720 --> 00:24:52,970
down now at bugcrowd we actually have

700
00:24:52,970 --> 00:24:54,920
used this internally for kind of like

701
00:24:54,920 --> 00:24:57,620
group projects or group fun so every

702
00:24:57,620 --> 00:24:59,480
Friday we have hack time from 12:00 to

703
00:24:59,480 --> 00:25:02,059
4:00 East and we literally just spend

704
00:25:02,059 --> 00:25:03,530
time hacking on things sometimes it's

705
00:25:03,530 --> 00:25:05,570
bug bounty programs sometimes it's a

706
00:25:05,570 --> 00:25:07,610
wasp juice shop and we literally want to

707
00:25:07,610 --> 00:25:10,220
spin up a Heroku juice shop instance and

708
00:25:10,220 --> 00:25:12,890
hack at it it's just a fun time in

709
00:25:12,890 --> 00:25:16,280
general and it's an interesting new way

710
00:25:16,280 --> 00:25:19,340
to do things on the cloud now with that

711
00:25:19,340 --> 00:25:22,040
being said of course cost maybe free

712
00:25:22,040 --> 00:25:24,470
maybe just the pittance maybe a lot

713
00:25:24,470 --> 00:25:25,970
depending on if you accidentally leave

714
00:25:25,970 --> 00:25:28,400
that thing running for a long time

715
00:25:28,400 --> 00:25:29,990
with that being said of course that's

716
00:25:29,990 --> 00:25:31,760
probably not the biggest issue here the

717
00:25:31,760 --> 00:25:34,400
biggest issue is legality if you're

718
00:25:34,400 --> 00:25:35,900
doing any sort of penetration testing in

719
00:25:35,900 --> 00:25:37,370
the cloud especially on Amazon you

720
00:25:37,370 --> 00:25:38,780
generally need to fill out a form that

721
00:25:38,780 --> 00:25:40,700
says I'm having the following approved

722
00:25:40,700 --> 00:25:43,040
penetration testing company perform

723
00:25:43,040 --> 00:25:44,660
security testing against my cloud

724
00:25:44,660 --> 00:25:47,420
instance that's my own V PC that I am

725
00:25:47,420 --> 00:25:49,520
even if you have written a bad web

726
00:25:49,520 --> 00:25:51,050
application that you are now attacking

727
00:25:51,050 --> 00:25:53,330
on purpose you probably still need some

728
00:25:53,330 --> 00:25:54,920
sort of legal permission to go ahead and

729
00:25:54,920 --> 00:25:58,429
test against Amazon's web services so to

730
00:25:58,429 --> 00:26:01,340
that end legality I don't know I'm not a

731
00:26:01,340 --> 00:26:04,040
lawyer very questionable at those least

732
00:26:04,040 --> 00:26:05,840
the most friendly that I can tell is

733
00:26:05,840 --> 00:26:09,170
Heroku when it comes to that but as I

734
00:26:09,170 --> 00:26:11,420
said why would you want to do it in the

735
00:26:11,420 --> 00:26:12,980
cloud right you could run into

736
00:26:12,980 --> 00:26:14,809
interference maybe they're using Akamai

737
00:26:14,809 --> 00:26:16,700
maybe they're using clouds layer maybe

738
00:26:16,700 --> 00:26:18,200
they've got a wife that stands up in

739
00:26:18,200 --> 00:26:19,550
front of all of their web development

740
00:26:19,550 --> 00:26:21,590
presences and their VP sees if you're

741
00:26:21,590 --> 00:26:22,970
using the free tier that's probably not

742
00:26:22,970 --> 00:26:25,010
the case but it could be you could have

743
00:26:25,010 --> 00:26:26,420
written purposefully bad code that is

744
00:26:26,420 --> 00:26:28,640
vulnerable to a very complex may be

745
00:26:28,640 --> 00:26:29,410
remote codecs

746
00:26:29,410 --> 00:26:32,650
q shin or what-have-you and it might not

747
00:26:32,650 --> 00:26:34,390
work if it doesn't work it's not because

748
00:26:34,390 --> 00:26:36,310
maybe you've learned to write it badly

749
00:26:36,310 --> 00:26:37,630
or your attack just isn't working

750
00:26:37,630 --> 00:26:39,490
appropriately maybe it's something

751
00:26:39,490 --> 00:26:41,140
between you and that cloud instance that

752
00:26:41,140 --> 00:26:44,890
isn't working right so to that end my

753
00:26:44,890 --> 00:26:47,770
recommendation is no you can run it all

754
00:26:47,770 --> 00:26:49,600
locally whether it's note or docker or

755
00:26:49,600 --> 00:26:51,370
even bigger it and you have a lot of

756
00:26:51,370 --> 00:26:53,470
options to run it on your own system or

757
00:26:53,470 --> 00:26:56,410
even unlike maybe a local server if you

758
00:26:56,410 --> 00:26:57,820
have like an extra gaming desktop in

759
00:26:57,820 --> 00:26:59,080
your household that you haven't used in

760
00:26:59,080 --> 00:27:01,750
months like me you can just kind of all

761
00:27:01,750 --> 00:27:03,490
run it internally and it works pretty

762
00:27:03,490 --> 00:27:05,920
well so I don't really see the reason to

763
00:27:05,920 --> 00:27:07,360
use the cloud other than because you

764
00:27:07,360 --> 00:27:08,920
want to learn how to use the cloud which

765
00:27:08,920 --> 00:27:11,980
is an entirely different process and you

766
00:27:11,980 --> 00:27:13,600
know fairly complex in general I mean it

767
00:27:13,600 --> 00:27:15,550
how many people here have seen s3

768
00:27:15,550 --> 00:27:16,930
buckets you know open to the internet

769
00:27:16,930 --> 00:27:19,480
with bad data or you know read reports

770
00:27:19,480 --> 00:27:22,060
on it or it happens right like people

771
00:27:22,060 --> 00:27:23,410
are setting this stuff up badly and as

772
00:27:23,410 --> 00:27:25,120
security folks we need to learn how to

773
00:27:25,120 --> 00:27:27,670
attack that and also of course how to

774
00:27:27,670 --> 00:27:29,230
set that up appropriately or securely

775
00:27:29,230 --> 00:27:32,920
right again maybe not attack driven

776
00:27:32,920 --> 00:27:33,400
development

777
00:27:33,400 --> 00:27:35,620
sort of mindset here but probably worth

778
00:27:35,620 --> 00:27:38,310
checking out at some point

779
00:27:39,950 --> 00:27:42,050
so from there I like to talk a little

780
00:27:42,050 --> 00:27:44,510
bit about benefits like who really

781
00:27:44,510 --> 00:27:47,060
should benefit from this process of

782
00:27:47,060 --> 00:27:48,290
attack driven development putting their

783
00:27:48,290 --> 00:27:49,580
hands on the keyboard writing some bad

784
00:27:49,580 --> 00:27:52,100
code and attack and the first kind of

785
00:27:52,100 --> 00:27:53,150
group of people that I'd like to point

786
00:27:53,150 --> 00:27:55,580
to is security engineers let's face it

787
00:27:55,580 --> 00:27:57,950
security engineers today if you were

788
00:27:57,950 --> 00:27:59,510
hired a year ago you have more

789
00:27:59,510 --> 00:28:02,120
responsibilities today than you did when

790
00:28:02,120 --> 00:28:03,650
you started and that's not just because

791
00:28:03,650 --> 00:28:05,690
you're new to the company it's because

792
00:28:05,690 --> 00:28:07,010
the company is asking you to do more

793
00:28:07,010 --> 00:28:08,750
you're no longer in charge of the sock

794
00:28:08,750 --> 00:28:11,600
and the firewall and the ids/ips you're

795
00:28:11,600 --> 00:28:13,940
now in charge of going into you know

796
00:28:13,940 --> 00:28:16,340
agile scrum meetings and giving security

797
00:28:16,340 --> 00:28:17,750
advice you're now in charge of running

798
00:28:17,750 --> 00:28:19,100
phishing campaigns you're now in charge

799
00:28:19,100 --> 00:28:21,890
of any number of different things in

800
00:28:21,890 --> 00:28:23,540
your environment that you weren't

801
00:28:23,540 --> 00:28:26,120
initially signed on to do and your pay

802
00:28:26,120 --> 00:28:27,650
isn't growing with that number of

803
00:28:27,650 --> 00:28:29,780
assignments I'd like let's be real you

804
00:28:29,780 --> 00:28:30,950
probably should be making a lot more

805
00:28:30,950 --> 00:28:33,350
than you are me to that end if you learn

806
00:28:33,350 --> 00:28:35,600
application security you're going to be

807
00:28:35,600 --> 00:28:37,880
incredibly more valuable to your

808
00:28:37,880 --> 00:28:39,560
business or to the next company that

809
00:28:39,560 --> 00:28:42,290
wants to hire you then you are today the

810
00:28:42,290 --> 00:28:43,820
only way to do that is to get your hands

811
00:28:43,820 --> 00:28:45,380
dirty because the end of the day again

812
00:28:45,380 --> 00:28:47,030
it's all theory until you actually put

813
00:28:47,030 --> 00:28:48,140
your hands on the keyboard and start

814
00:28:48,140 --> 00:28:50,540
doing this stuff of course there's also

815
00:28:50,540 --> 00:28:53,780
developers I mean for me I always like

816
00:28:53,780 --> 00:28:54,830
to call those developers that are

817
00:28:54,830 --> 00:28:56,750
interested in security has cyber curious

818
00:28:56,750 --> 00:28:58,760
they're kind of interested in the

819
00:28:58,760 --> 00:28:59,930
security thing but they don't know where

820
00:28:59,930 --> 00:29:00,590
to get started

821
00:29:00,590 --> 00:29:02,540
best way to help them is to show them

822
00:29:02,540 --> 00:29:04,160
how to build a bad application and then

823
00:29:04,160 --> 00:29:05,960
show them how to attack it I mean for me

824
00:29:05,960 --> 00:29:07,010
whenever I've seen someone get their

825
00:29:07,010 --> 00:29:09,080
first reverse shell their eyes light up

826
00:29:09,080 --> 00:29:12,010
it's like suddenly they realize oh

827
00:29:12,010 --> 00:29:14,540
that's why I should be using that

828
00:29:14,540 --> 00:29:16,790
framework or that library we're writing

829
00:29:16,790 --> 00:29:19,310
it in this way and then they actually

830
00:29:19,310 --> 00:29:20,780
started doing more which is great

831
00:29:20,780 --> 00:29:22,250
because for us with security people

832
00:29:22,250 --> 00:29:23,420
they're too simply aren't enough of us

833
00:29:23,420 --> 00:29:25,460
to go around so if we can start to

834
00:29:25,460 --> 00:29:28,400
deputize developers to actually write

835
00:29:28,400 --> 00:29:30,830
more secure code or perform more testing

836
00:29:30,830 --> 00:29:32,360
at least in a little bit of a manual way

837
00:29:32,360 --> 00:29:34,790
because again tools are gonna fail at

838
00:29:34,790 --> 00:29:36,410
the end of the day the people that trust

839
00:29:36,410 --> 00:29:38,000
that Security's been tested or the

840
00:29:38,000 --> 00:29:39,320
people that know that it's actually been

841
00:29:39,320 --> 00:29:41,450
tested by a human because you're gonna

842
00:29:41,450 --> 00:29:42,830
have false positives or not false

843
00:29:42,830 --> 00:29:44,660
negatives you're gonna have edge cases

844
00:29:44,660 --> 00:29:46,520
you're gonna have a lack of contacts

845
00:29:46,520 --> 00:29:48,410
sure there's cross-site scripting but is

846
00:29:48,410 --> 00:29:50,330
that an admin user or no that is an

847
00:29:50,330 --> 00:29:52,760
admin user maybe they could do a lot

848
00:29:52,760 --> 00:29:53,570
worse than cross

849
00:29:53,570 --> 00:29:55,999
why would I care about that when they're

850
00:29:55,999 --> 00:29:57,769
now an admin user and they shouldn't

851
00:29:57,769 --> 00:30:00,440
so again developers being able to test

852
00:30:00,440 --> 00:30:02,720
for security in their code is going to

853
00:30:02,720 --> 00:30:04,220
give them more value from a perspective

854
00:30:04,220 --> 00:30:05,659
of trying to get hired of course they're

855
00:30:05,659 --> 00:30:07,879
not you know needing a a new job

856
00:30:07,879 --> 00:30:09,229
probably because they're getting paid a

857
00:30:09,229 --> 00:30:11,899
lot of money already but they're

858
00:30:11,899 --> 00:30:15,049
deploying code production DevOps is here

859
00:30:15,049 --> 00:30:16,999
to stay if they're deploying code to

860
00:30:16,999 --> 00:30:19,279
production what guess what that code in

861
00:30:19,279 --> 00:30:20,899
production is probably something you're

862
00:30:20,899 --> 00:30:22,340
going to get yelled at as a security

863
00:30:22,340 --> 00:30:23,960
person even if you've never tested it so

864
00:30:23,960 --> 00:30:26,179
we need to get them involved in the

865
00:30:26,179 --> 00:30:29,149
security responsibility otherwise we're

866
00:30:29,149 --> 00:30:30,499
kind of you know up a creek without a

867
00:30:30,499 --> 00:30:34,070
paddle and then of course students are

868
00:30:34,070 --> 00:30:35,629
in my opinion especially college

869
00:30:35,629 --> 00:30:38,599
students the individuals that we really

870
00:30:38,599 --> 00:30:40,970
need to get involved with this and for

871
00:30:40,970 --> 00:30:42,950
me my first class is writing HelloWorld

872
00:30:42,950 --> 00:30:44,389
I'm sure like how many people here I've

873
00:30:44,389 --> 00:30:45,649
written the hello world app in a new

874
00:30:45,649 --> 00:30:47,389
language that you've you know adopted

875
00:30:47,389 --> 00:30:49,009
right like everyone's written the

876
00:30:49,009 --> 00:30:51,979
HelloWorld it doesn't do anything for

877
00:30:51,979 --> 00:30:53,809
you right like it just feels better the

878
00:30:53,809 --> 00:30:54,979
syntax but it doesn't actually teach you

879
00:30:54,979 --> 00:30:58,789
anything now every civil engineer well

880
00:30:58,789 --> 00:31:01,249
that may throw roads and bridges and

881
00:31:01,249 --> 00:31:04,669
sewerage systems and electrical you know

882
00:31:04,669 --> 00:31:07,460
like lines etc the first thing that they

883
00:31:07,460 --> 00:31:09,169
learn in college on the first day is

884
00:31:09,169 --> 00:31:09,649
this

885
00:31:09,649 --> 00:31:11,779
it's the Tacoma Narrows Bridge incident

886
00:31:11,779 --> 00:31:16,099
in the late 1930s the engineers did not

887
00:31:16,099 --> 00:31:18,289
account for wind shear when they built

888
00:31:18,289 --> 00:31:20,570
the bridge and it literally created an

889
00:31:20,570 --> 00:31:23,389
effect where he got left and then as a

890
00:31:23,389 --> 00:31:24,830
result it would start rocking and

891
00:31:24,830 --> 00:31:28,340
eventually the bridge collapsed and to

892
00:31:28,340 --> 00:31:30,470
that end it's like if you're an engineer

893
00:31:30,470 --> 00:31:32,539
the first thing you learn of the first

894
00:31:32,539 --> 00:31:35,179
day of class is why the the things that

895
00:31:35,179 --> 00:31:36,259
you're doing the measurements that

896
00:31:36,259 --> 00:31:37,639
you're taking the materials that you're

897
00:31:37,639 --> 00:31:39,049
using the designs that you're putting

898
00:31:39,049 --> 00:31:41,539
together why that has to be precise

899
00:31:41,539 --> 00:31:44,749
because lives are instant now how many

900
00:31:44,749 --> 00:31:46,940
of you have heard about the muddy waters

901
00:31:46,940 --> 00:31:50,269
you know pacemaker you know thing that

902
00:31:50,269 --> 00:31:52,419
went on recently as well right like

903
00:31:52,419 --> 00:31:54,499
developers are writing code that's going

904
00:31:54,499 --> 00:31:57,710
into people's bodies the first thing on

905
00:31:57,710 --> 00:31:59,389
the first day of class they should learn

906
00:31:59,389 --> 00:32:01,570
is that the code that they write is

907
00:32:01,570 --> 00:32:04,639
people's lives at stake not just their

908
00:32:04,639 --> 00:32:06,919
credit card not just their Social

909
00:32:06,919 --> 00:32:07,399
Security

910
00:32:07,399 --> 00:32:10,369
BIRT but literally that pump that you

911
00:32:10,369 --> 00:32:12,080
know is injecting some sort of you know

912
00:32:12,080 --> 00:32:13,759
life-saving medicine into their body

913
00:32:13,759 --> 00:32:17,599
that pacemaker that's going in that IOT

914
00:32:17,599 --> 00:32:20,330
device that is heating your home like if

915
00:32:20,330 --> 00:32:22,070
those pipes burst or the house gets too

916
00:32:22,070 --> 00:32:23,779
hot or the fire alarm doesn't work when

917
00:32:23,779 --> 00:32:26,509
a fire is going on that matters in

918
00:32:26,509 --> 00:32:28,219
aggregate and especially to those

919
00:32:28,219 --> 00:32:29,539
individuals that are using those devices

920
00:32:29,539 --> 00:32:32,479
so I really think that students could

921
00:32:32,479 --> 00:32:34,219
benefit from the first thing you build

922
00:32:34,219 --> 00:32:36,379
is a bad application and then you learn

923
00:32:36,379 --> 00:32:37,849
how to attack that bad application you

924
00:32:37,849 --> 00:32:38,839
know why it's bad

925
00:32:38,839 --> 00:32:40,190
I mean I've written plenty of seed

926
00:32:40,190 --> 00:32:42,979
programs for classes where I didn't have

927
00:32:42,979 --> 00:32:44,419
to do any sort of memory scraping I

928
00:32:44,419 --> 00:32:46,129
didn't have to do anything to say that I

929
00:32:46,129 --> 00:32:47,839
was actually you know deleting or

930
00:32:47,839 --> 00:32:49,809
removing the memory that I was using and

931
00:32:49,809 --> 00:32:51,979
students just didn't care they just took

932
00:32:51,979 --> 00:32:53,899
the doc for points and whatever I still

933
00:32:53,899 --> 00:32:56,809
got a 90 that's really really bad and we

934
00:32:56,809 --> 00:32:58,789
all know why and I think that they

935
00:32:58,789 --> 00:33:01,269
should know why

936
00:33:05,790 --> 00:33:07,890
so of course if you're getting started

937
00:33:07,890 --> 00:33:09,570
in this it always helps to have

938
00:33:09,570 --> 00:33:11,430
resources there are a few resources that

939
00:33:11,430 --> 00:33:12,810
I really like to highlight the first of

940
00:33:12,810 --> 00:33:14,430
course is the web application hacker's

941
00:33:14,430 --> 00:33:15,990
handbook by aphid centered and marcus

942
00:33:15,990 --> 00:33:18,210
pinto it is about six years old now for

943
00:33:18,210 --> 00:33:20,430
version two but again it is one of those

944
00:33:20,430 --> 00:33:23,460
books that even the general processes

945
00:33:23,460 --> 00:33:25,470
that it teaches you the mindset that it

946
00:33:25,470 --> 00:33:27,720
teaches you is still valuable sure the

947
00:33:27,720 --> 00:33:29,970
web has changed since then but again

948
00:33:29,970 --> 00:33:31,590
it's something that I think everyone

949
00:33:31,590 --> 00:33:32,910
would benefit from reading if you're

950
00:33:32,910 --> 00:33:34,200
looking into web application security

951
00:33:34,200 --> 00:33:36,360
just because of the fact that the

952
00:33:36,360 --> 00:33:40,170
processes are still important to walk of

953
00:33:40,170 --> 00:33:42,000
course there's also pqrs fees web

954
00:33:42,000 --> 00:33:43,740
hacking 101 so Pete actually trained

955
00:33:43,740 --> 00:33:45,630
here at hackfest so Pete if you're in

956
00:33:45,630 --> 00:33:47,280
the room thank you because this book has

957
00:33:47,280 --> 00:33:48,840
been right there in the back Thank You

958
00:33:48,840 --> 00:33:49,290
Pete

959
00:33:49,290 --> 00:33:57,210
big name - Pete you guys what this book

960
00:33:57,210 --> 00:33:58,620
takes everything that you're reading web

961
00:33:58,620 --> 00:34:00,180
hacking our web application hacker's

962
00:34:00,180 --> 00:34:02,310
handbook it makes it real right like

963
00:34:02,310 --> 00:34:03,690
that's a big difference when you

964
00:34:03,690 --> 00:34:05,730
suddenly realize that you know Yahoo or

965
00:34:05,730 --> 00:34:07,140
Etsy or Pinterest or what-have-you

966
00:34:07,140 --> 00:34:08,730
whatever he is highlighted in the book

967
00:34:08,730 --> 00:34:11,879
from a different attacks perspective it

968
00:34:11,879 --> 00:34:13,649
was actually happen in real applications

969
00:34:13,649 --> 00:34:16,590
and suddenly it's like oh this stuff

970
00:34:16,590 --> 00:34:18,179
that I'm learning isn't just theoretical

971
00:34:18,179 --> 00:34:20,399
anymore and it's actually worth money

972
00:34:20,399 --> 00:34:21,870
from a bug bounty perspective so a

973
00:34:21,870 --> 00:34:23,219
little bit of self-serving I mean I work

974
00:34:23,219 --> 00:34:25,860
for bugcrowd or a bug bounty company but

975
00:34:25,860 --> 00:34:27,510
with that being said I think that when

976
00:34:27,510 --> 00:34:28,590
you're looking for practical

977
00:34:28,590 --> 00:34:31,020
applications or practical examples of

978
00:34:31,020 --> 00:34:32,129
the things that you're trying to build

979
00:34:32,129 --> 00:34:34,168
and break it's a great book to reference

980
00:34:34,168 --> 00:34:36,330
of course there's also Andy gills

981
00:34:36,330 --> 00:34:38,370
breaking into information security if

982
00:34:38,370 --> 00:34:39,870
you're new to this if you're still a

983
00:34:39,870 --> 00:34:41,489
college student or even if you just kind

984
00:34:41,489 --> 00:34:43,290
of want to move a little bit more into

985
00:34:43,290 --> 00:34:45,600
the apps X space he has a really great

986
00:34:45,600 --> 00:34:48,000
book and both Pete and Andy's books are

987
00:34:48,000 --> 00:34:51,540
on lean pugs so they're books but it

988
00:34:51,540 --> 00:34:53,179
goes through like building a resume

989
00:34:53,179 --> 00:34:55,679
things to think about different areas of

990
00:34:55,679 --> 00:34:58,230
security to work through and different

991
00:34:58,230 --> 00:35:00,450
tools etc it's just generally a good

992
00:35:00,450 --> 00:35:02,490
book one that I more recently picked up

993
00:35:02,490 --> 00:35:03,960
and I'm still working through but again

994
00:35:03,960 --> 00:35:07,290
Andy has written a great book here now

995
00:35:07,290 --> 00:35:08,640
of course I also like to listen to

996
00:35:08,640 --> 00:35:10,500
podcasts and so I'm a really big fan of

997
00:35:10,500 --> 00:35:12,300
application security podcast by Chris

998
00:35:12,300 --> 00:35:14,310
Romeo and Robert hold it they talked

999
00:35:14,310 --> 00:35:15,930
about a lot of different interesting

1000
00:35:15,930 --> 00:35:16,950
things that are going on in the

1001
00:35:16,950 --> 00:35:19,040
application security space but

1002
00:35:19,040 --> 00:35:21,710
it's docker containers with JBL they

1003
00:35:21,710 --> 00:35:22,640
actually just did another docker

1004
00:35:22,640 --> 00:35:24,350
container one more recently with someone

1005
00:35:24,350 --> 00:35:25,730
that works for the United States federal

1006
00:35:25,730 --> 00:35:28,250
government talking about doctor security

1007
00:35:28,250 --> 00:35:30,580
as it's something that they're testing

1008
00:35:30,580 --> 00:35:33,950
so it's just a generally good book just

1009
00:35:33,950 --> 00:35:35,540
there it seemed a good podcast to stay

1010
00:35:35,540 --> 00:35:37,760
up-to-date on different things that are

1011
00:35:37,760 --> 00:35:39,110
happening in the app specs face I

1012
00:35:39,110 --> 00:35:40,340
actually just did another one on the

1013
00:35:40,340 --> 00:35:42,650
next version of the OS top ten as well

1014
00:35:42,650 --> 00:35:44,330
so check that out

1015
00:35:44,330 --> 00:35:45,980
of course there's also Timothy be

1016
00:35:45,980 --> 00:35:47,390
blocked exploring information security

1017
00:35:47,390 --> 00:35:49,550
podcast this is going to go beyond just

1018
00:35:49,550 --> 00:35:52,100
AB SEC it'll dfi it'll give you like

1019
00:35:52,100 --> 00:35:55,340
things like DF IR or how to make good

1020
00:35:55,340 --> 00:35:57,800
use of time at a conference it's

1021
00:35:57,800 --> 00:35:59,860
literally everything across the board

1022
00:35:59,860 --> 00:36:02,270
and he does a ton of different ones

1023
00:36:02,270 --> 00:36:03,500
where he interviews a lot of other

1024
00:36:03,500 --> 00:36:05,570
people in the space as well and he does

1025
00:36:05,570 --> 00:36:07,790
some one offs so check that out at

1026
00:36:07,790 --> 00:36:09,080
Ronnie Christmas has been on that a few

1027
00:36:09,080 --> 00:36:13,400
times so it's it's a good podcast now if

1028
00:36:13,400 --> 00:36:15,200
you're indeed coding or you need to get

1029
00:36:15,200 --> 00:36:16,310
into coding because you don't know how

1030
00:36:16,310 --> 00:36:17,150
to do any of that

1031
00:36:17,150 --> 00:36:18,770
check out coding blocks because for me

1032
00:36:18,770 --> 00:36:20,270
they've covered a lot of different

1033
00:36:20,270 --> 00:36:22,370
things that I haven't seen before or

1034
00:36:22,370 --> 00:36:26,000
perhaps even new so for example anti

1035
00:36:26,000 --> 00:36:28,670
patterns I was like anti patterns what

1036
00:36:28,670 --> 00:36:30,260
is this like I know what patterns are

1037
00:36:30,260 --> 00:36:31,700
and how to develop certain things but

1038
00:36:31,700 --> 00:36:32,780
what's an anti copy

1039
00:36:32,780 --> 00:36:35,570
they're a long format podcast but again

1040
00:36:35,570 --> 00:36:37,100
if you're looking to just get a little

1041
00:36:37,100 --> 00:36:38,480
bit on the development side because

1042
00:36:38,480 --> 00:36:40,040
everything you're reading you hear is a

1043
00:36:40,040 --> 00:36:41,960
security standpoint it'll be informative

1044
00:36:41,960 --> 00:36:44,450
geo and then of course through software

1045
00:36:44,450 --> 00:36:46,280
engineering radio again they just do

1046
00:36:46,280 --> 00:36:48,080
interviews but it's interviews of people

1047
00:36:48,080 --> 00:36:49,190
doing interesting things with

1048
00:36:49,190 --> 00:36:51,260
interesting technologies so we're

1049
00:36:51,260 --> 00:36:55,700
picking up on the side and then of

1050
00:36:55,700 --> 00:36:58,010
course websites so we're all at a

1051
00:36:58,010 --> 00:36:59,180
computer all day so we're probably

1052
00:36:59,180 --> 00:37:02,060
reading police if you need documentation

1053
00:37:02,060 --> 00:37:04,340
on just about any different language or

1054
00:37:04,340 --> 00:37:07,340
framework or library or even tools check

1055
00:37:07,340 --> 00:37:10,160
out dev Docs io actually use that when I

1056
00:37:10,160 --> 00:37:12,020
was flying out to San Francisco for work

1057
00:37:12,020 --> 00:37:13,610
it was about a six and a half hour

1058
00:37:13,610 --> 00:37:15,800
flight I was building this slide deck

1059
00:37:15,800 --> 00:37:19,310
for like several months ago and get all

1060
00:37:19,310 --> 00:37:21,140
the CSS but I wanted and the JavaScript

1061
00:37:21,140 --> 00:37:21,770
that I needed

1062
00:37:21,770 --> 00:37:23,900
I used that site and it allows you to

1063
00:37:23,900 --> 00:37:27,380
actually cache the documentation to your

1064
00:37:27,380 --> 00:37:29,900
browser so you can use it offline it was

1065
00:37:29,900 --> 00:37:31,640
really really useful and it covers

1066
00:37:31,640 --> 00:37:32,220
things

1067
00:37:32,220 --> 00:37:37,559
GCC to docker to any given Jas it's even

1068
00:37:37,559 --> 00:37:39,000
got some database stuff in there it's

1069
00:37:39,000 --> 00:37:42,240
pretty awesome there's also of course

1070
00:37:42,240 --> 00:37:44,010
the docker Docs

1071
00:37:44,010 --> 00:37:49,049
dr. Tucker comm or dr. calm and heard

1072
00:37:49,049 --> 00:37:51,089
that I what I really like about it in

1073
00:37:51,089 --> 00:37:52,890
general is you're learning dr. at the

1074
00:37:52,890 --> 00:37:54,510
very top of the article in italics

1075
00:37:54,510 --> 00:37:56,640
that's under the articles title it tells

1076
00:37:56,640 --> 00:37:58,589
you how long it will take you to read

1077
00:37:58,589 --> 00:38:01,530
that given section which for me it's

1078
00:38:01,530 --> 00:38:03,000
like cool if I'm going to invest five

1079
00:38:03,000 --> 00:38:04,230
minutes I know that this will take me

1080
00:38:04,230 --> 00:38:05,970
about five minutes or if this is going

1081
00:38:05,970 --> 00:38:07,170
to take me 20 I don't have time for this

1082
00:38:07,170 --> 00:38:10,289
so again check it out read it learn how

1083
00:38:10,289 --> 00:38:13,020
to use that as a tool no js' seeks for

1084
00:38:13,020 --> 00:38:13,980
itself

1085
00:38:13,980 --> 00:38:15,690
then I'm sure there's many of you have

1086
00:38:15,690 --> 00:38:16,980
probably already used ports for years

1087
00:38:16,980 --> 00:38:18,720
website or it's figured on net makers of

1088
00:38:18,720 --> 00:38:20,940
burp suite pro a lot of really useful

1089
00:38:20,940 --> 00:38:23,039
information articles we actually

1090
00:38:23,039 --> 00:38:25,200
reference them in the Derby con training

1091
00:38:25,200 --> 00:38:27,420
that I gave for getting reversed shell

1092
00:38:27,420 --> 00:38:29,730
or remote code execution Road code

1093
00:38:29,730 --> 00:38:31,619
execution later into reverse shell off

1094
00:38:31,619 --> 00:38:33,420
of different versions of angular because

1095
00:38:33,420 --> 00:38:35,910
of the angularjs sandbox and it was

1096
00:38:35,910 --> 00:38:37,529
sandbox escapes because the sandbox was

1097
00:38:37,529 --> 00:38:38,640
never intended to be used as the

1098
00:38:38,640 --> 00:38:40,740
security tool developers are like

1099
00:38:40,740 --> 00:38:43,109
sandbox cool don't have to worry about

1100
00:38:43,109 --> 00:38:45,059
this security too long and it gives you

1101
00:38:45,059 --> 00:38:46,589
like each different version of code that

1102
00:38:46,589 --> 00:38:48,240
you could put in to get remote code

1103
00:38:48,240 --> 00:38:50,039
execution and then eventually Google

1104
00:38:50,039 --> 00:38:52,049
said you know I screwed this sandbox

1105
00:38:52,049 --> 00:38:53,849
thing deprecated we're not going to fix

1106
00:38:53,849 --> 00:38:54,359
it anymore

1107
00:38:54,359 --> 00:38:56,130
we were just removing it entirely and

1108
00:38:56,130 --> 00:38:57,750
then you just come right back to the top

1109
00:38:57,750 --> 00:38:59,520
again and that same first snippet of

1110
00:38:59,520 --> 00:39:00,930
code and the first version of angularjs

1111
00:39:00,930 --> 00:39:02,309
will still get your remote code

1112
00:39:02,309 --> 00:39:04,589
execution it's like yeah because the

1113
00:39:04,589 --> 00:39:07,079
developers didn't care to test any of

1114
00:39:07,079 --> 00:39:09,809
those up they were building symptoms or

1115
00:39:09,809 --> 00:39:12,930
Landmaster 53 used to market and is iam

1116
00:39:12,930 --> 00:39:16,230
is now a freelance or a solo security

1117
00:39:16,230 --> 00:39:18,270
consultant running his own business

1118
00:39:18,270 --> 00:39:19,950
gives really great trainings he's

1119
00:39:19,950 --> 00:39:21,270
actually giving one in February in

1120
00:39:21,270 --> 00:39:24,690
Boston fund by OS Boston so from here if

1121
00:39:24,690 --> 00:39:26,760
you're driving that's like six or seven

1122
00:39:26,760 --> 00:39:28,829
hours if you're flying maybe two or

1123
00:39:28,829 --> 00:39:30,599
three it's a three-day training that he

1124
00:39:30,599 --> 00:39:32,069
gives for a practical web application

1125
00:39:32,069 --> 00:39:34,770
penetration test including fixing all

1126
00:39:34,770 --> 00:39:36,420
the broken things in his code that he

1127
00:39:36,420 --> 00:39:38,130
has written I've taken the class I

1128
00:39:38,130 --> 00:39:39,660
really liked it he doesn't really good

1129
00:39:39,660 --> 00:39:41,970
research also the author of recon ng as

1130
00:39:41,970 --> 00:39:44,150
you guys probably heard about

1131
00:39:44,150 --> 00:39:46,400
so I am also running a website protector

1132
00:39:46,400 --> 00:39:48,440
vendetta oh it doesn't work on mobile

1133
00:39:48,440 --> 00:39:51,080
right now it works on your computer but

1134
00:39:51,080 --> 00:39:52,910
if this is a silly landing page so

1135
00:39:52,910 --> 00:39:55,070
reading into react is gonna be coming

1136
00:39:55,070 --> 00:39:56,270
next spring it's gonna be talking a lot

1137
00:39:56,270 --> 00:39:58,430
about the different languages libraries

1138
00:39:58,430 --> 00:40:00,380
frameworks that I'm focusing on maybe

1139
00:40:00,380 --> 00:40:03,590
some starter simple broken code that you

1140
00:40:03,590 --> 00:40:06,110
can work from and then from there maybe

1141
00:40:06,110 --> 00:40:07,970
like different chains of attack etc so

1142
00:40:07,970 --> 00:40:13,250
that's gonna be forthcoming so

1143
00:40:13,250 --> 00:40:15,920
clean and most importantly I just want

1144
00:40:15,920 --> 00:40:17,120
to give thanks to a few people who have

1145
00:40:17,120 --> 00:40:19,640
made my career and my ability possible

1146
00:40:19,640 --> 00:40:21,590
and the first would be my wife here in

1147
00:40:21,590 --> 00:40:24,080
the front row who as a supportive person

1148
00:40:24,080 --> 00:40:26,000
in my life basically we've been patient

1149
00:40:26,000 --> 00:40:28,100
with me has allowed me to go out and do

1150
00:40:28,100 --> 00:40:30,560
crazy things like this as well as your

1151
00:40:30,560 --> 00:40:32,120
trainings and spend time actually

1152
00:40:32,120 --> 00:40:33,350
learning how to do a lot of this stuff

1153
00:40:33,350 --> 00:40:35,900
so big thanks to my wife for actually

1154
00:40:35,900 --> 00:40:36,750
making as possible

1155
00:40:36,750 --> 00:40:43,690
[Applause]

1156
00:40:43,740 --> 00:40:45,910
she's also my partner in crime we do a

1157
00:40:45,910 --> 00:40:47,049
lot of adventure so this was actually

1158
00:40:47,049 --> 00:40:49,480
taken at Disney we tend to go there a

1159
00:40:49,480 --> 00:40:49,930
lot

1160
00:40:49,930 --> 00:40:52,150
to say the least then of course there's

1161
00:40:52,150 --> 00:40:54,700
my good friend Katie LeDoux so earlier

1162
00:40:54,700 --> 00:40:56,799
this year Katie asked me to give her

1163
00:40:56,799 --> 00:40:58,780
feedback on her first talk gave at

1164
00:40:58,780 --> 00:41:00,490
beside San Fran she was really nervous

1165
00:41:00,490 --> 00:41:02,829
and worried about it I asked for some

1166
00:41:02,829 --> 00:41:05,349
feedback and before then I had never

1167
00:41:05,349 --> 00:41:07,630
given a talk anywhere and I was you know

1168
00:41:07,630 --> 00:41:09,339
what this actually is a really cool idea

1169
00:41:09,339 --> 00:41:11,230
maybe I should like you know give a talk

1170
00:41:11,230 --> 00:41:13,270
and she was been very just kind of

1171
00:41:13,270 --> 00:41:14,500
inspirational and supportive of that

1172
00:41:14,500 --> 00:41:17,770
process and then my sensei Jason Haddix

1173
00:41:17,770 --> 00:41:19,359
I have learned more from this man the

1174
00:41:19,359 --> 00:41:20,829
last four months and I think I have

1175
00:41:20,829 --> 00:41:23,980
learned in the last four years she has

1176
00:41:23,980 --> 00:41:25,270
given some really great talks and a

1177
00:41:25,270 --> 00:41:26,799
LevelUp conference put on but bugcrowd

1178
00:41:26,799 --> 00:41:29,770
this past summer so if you look up the

1179
00:41:29,770 --> 00:41:33,760
bug hunting methodology v2 or TB at HMV

1180
00:41:33,760 --> 00:41:37,809
- she did an entire talk on that recon

1181
00:41:37,809 --> 00:41:40,030
at Def Con he's just an amazing human

1182
00:41:40,030 --> 00:41:42,790
being and he's trained me a ton so big

1183
00:41:42,790 --> 00:41:44,170
thanks to him for all the things he's

1184
00:41:44,170 --> 00:41:46,960
taught when it comes to further research

1185
00:41:46,960 --> 00:41:48,220
any of this is of interest to you

1186
00:41:48,220 --> 00:41:49,599
definitely check out the build it break

1187
00:41:49,599 --> 00:41:52,030
it fix it competition that's for college

1188
00:41:52,030 --> 00:41:53,950
and graduate students I don't know if

1189
00:41:53,950 --> 00:41:57,819
it's us only if it is I apologize but it

1190
00:41:57,819 --> 00:42:00,579
is a very cool just kind of concept that

1191
00:42:00,579 --> 00:42:01,720
actually follows much of what I've

1192
00:42:01,720 --> 00:42:03,130
talked about here because you have a

1193
00:42:03,130 --> 00:42:05,049
team that builds an application then

1194
00:42:05,049 --> 00:42:07,660
they build certain features for an

1195
00:42:07,660 --> 00:42:08,950
application they've got a list of

1196
00:42:08,950 --> 00:42:11,950
different features and point values then

1197
00:42:11,950 --> 00:42:13,270
you're gonna buy they're a hybrid team

1198
00:42:13,270 --> 00:42:15,760
or you can compete as a red team and you

1199
00:42:15,760 --> 00:42:17,740
can gain points as the red team by

1200
00:42:17,740 --> 00:42:19,900
attacking and breaking those features on

1201
00:42:19,900 --> 00:42:22,750
another team's application and then the

1202
00:42:22,750 --> 00:42:24,760
hybrid teams do both so the whole

1203
00:42:24,760 --> 00:42:26,319
concept of attack driven development of

1204
00:42:26,319 --> 00:42:27,430
build it badly

1205
00:42:27,430 --> 00:42:29,380
break it fix it make it more secure

1206
00:42:29,380 --> 00:42:31,270
could really be informative for those

1207
00:42:31,270 --> 00:42:32,980
students because now I can compete as a

1208
00:42:32,980 --> 00:42:34,180
hybrid team so I know how to attack

1209
00:42:34,180 --> 00:42:36,299
things and how to build things securely

1210
00:42:36,299 --> 00:42:38,470
that way I can get the most points and

1211
00:42:38,470 --> 00:42:41,200
keep them there's also the underhanded C

1212
00:42:41,200 --> 00:42:43,150
contest which is literally building what

1213
00:42:43,150 --> 00:42:46,059
looks to be benign code that compiles

1214
00:42:46,059 --> 00:42:48,880
and then it it actually is malicious

1215
00:42:48,880 --> 00:42:51,400
there was one several years ago that was

1216
00:42:51,400 --> 00:42:53,650
I think only like five lines of code and

1217
00:42:53,650 --> 00:42:55,690
it looked very benign but when it

1218
00:42:55,690 --> 00:42:57,040
compiled it wrote

1219
00:42:57,040 --> 00:43:00,610
terabytes of disk space usage and just

1220
00:43:00,610 --> 00:43:03,130
would lock up your disk so they have

1221
00:43:03,130 --> 00:43:05,320
just kind of a really cool concept of

1222
00:43:05,320 --> 00:43:07,570
write bad code that doesn't look that

1223
00:43:07,570 --> 00:43:10,660
and then you know try to try to win on

1224
00:43:10,660 --> 00:43:12,580
different kind of functionality that is

1225
00:43:12,580 --> 00:43:16,230
malicious also getting past the positive

1226
00:43:16,230 --> 00:43:19,360
it was like a PDF doc or a white paper

1227
00:43:19,360 --> 00:43:20,710
that was written by Gary McGraw and the

1228
00:43:20,710 --> 00:43:21,760
folks at North Carolina State University

1229
00:43:21,760 --> 00:43:24,280
that goes through the misuse and abuse

1230
00:43:24,280 --> 00:43:26,770
cases that I talked about earlier again

1231
00:43:26,770 --> 00:43:27,940
miss you some of these cases are still

1232
00:43:27,940 --> 00:43:29,860
useful they're still beneficial but I

1233
00:43:29,860 --> 00:43:31,000
think that we need to test them more

1234
00:43:31,000 --> 00:43:33,820
regularly if you want more on be similar

1235
00:43:33,820 --> 00:43:35,410
stuff that he has done it's now at

1236
00:43:35,410 --> 00:43:37,800
synopsis calm with that long link there

1237
00:43:37,800 --> 00:43:39,850
and of course if you need anything on

1238
00:43:39,850 --> 00:43:41,920
secure SDLC I'll ask you cheat is really

1239
00:43:41,920 --> 00:43:43,630
good seven phases of STL see if I

1240
00:43:43,630 --> 00:43:45,460
Microsoft it's also really good with

1241
00:43:45,460 --> 00:43:48,130
that I'm happy to show some of my tools

1242
00:43:48,130 --> 00:43:50,290
some of the stuff that I'm using from

1243
00:43:50,290 --> 00:43:52,450
like my browser extensions and stuff but

1244
00:43:52,450 --> 00:43:58,480
are there any questions now okay cool

1245
00:43:58,480 --> 00:44:00,580
are you guys interested in seeing the

1246
00:44:00,580 --> 00:44:03,660
stuff that one question

1247
00:44:07,620 --> 00:44:10,620
yeah

1248
00:44:19,680 --> 00:44:23,940
decrypt data in the cap honestly I don't

1249
00:44:23,940 --> 00:44:26,640
know maybe depending on if if you can

1250
00:44:26,640 --> 00:44:29,280
get access to it unfortunately I don't

1251
00:44:29,280 --> 00:44:32,730
know any any other additional questions

1252
00:44:32,730 --> 00:44:34,770
before I show some way like extensions

1253
00:44:34,770 --> 00:44:39,180
and Julie cool so I'll just kind of

1254
00:44:39,180 --> 00:44:42,300
quickly show so it kind of make this not

1255
00:44:42,300 --> 00:44:46,200
fullscreen so from rats whereas I spoke

1256
00:44:46,200 --> 00:44:48,360
earlier I like to use Firefox developer

1257
00:44:48,360 --> 00:44:49,890
edition the biggest reason is what

1258
00:44:49,890 --> 00:44:50,820
you're seeing here on the Left which is

1259
00:44:50,820 --> 00:44:54,180
free style tabs so if I go out to like

1260
00:44:54,180 --> 00:44:55,680
Google com actually I don't have I don't

1261
00:44:55,680 --> 00:44:57,780
have Wi-Fi on right now but basically

1262
00:44:57,780 --> 00:44:59,310
what it will do is it'll open every new

1263
00:44:59,310 --> 00:45:01,890
tab vertically and then if it's a nested

1264
00:45:01,890 --> 00:45:03,360
tab it'll kind of nest it down a little

1265
00:45:03,360 --> 00:45:05,610
bit so if you've ever used Chrome and

1266
00:45:05,610 --> 00:45:06,870
you've had so many tabs open that you

1267
00:45:06,870 --> 00:45:10,950
can't read what the tab is that's why I

1268
00:45:10,950 --> 00:45:12,630
don't use Chrome for testing because I

1269
00:45:12,630 --> 00:45:14,730
will literally open hundreds of tabs at

1270
00:45:14,730 --> 00:45:17,340
a time to try and figure out web

1271
00:45:17,340 --> 00:45:19,380
functionality to force it to go through

1272
00:45:19,380 --> 00:45:21,350
my proxy and go through burp sweep route

1273
00:45:21,350 --> 00:45:24,360
to aggregate more data do more testing

1274
00:45:24,360 --> 00:45:26,370
so it's just one that you see kind of

1275
00:45:26,370 --> 00:45:30,660
readily so as you're gonna also see some

1276
00:45:30,660 --> 00:45:31,950
of these are listed as legacies so

1277
00:45:31,950 --> 00:45:32,970
they're in the process of being updated

1278
00:45:32,970 --> 00:45:34,470
because Firefox has changed its

1279
00:45:34,470 --> 00:45:36,090
extension functionality so if you go out

1280
00:45:36,090 --> 00:45:37,650
and you grab Firefox developer edition

1281
00:45:37,650 --> 00:45:39,420
make sure you bring yourself offline

1282
00:45:39,420 --> 00:45:41,550
before you install it and turn off auto

1283
00:45:41,550 --> 00:45:44,210
updates or a lot of these things break

1284
00:45:44,210 --> 00:45:46,470
user agent a writer is really good

1285
00:45:46,470 --> 00:45:47,550
because if you want actually see what

1286
00:45:47,550 --> 00:45:49,110
the website looks like from a mobile

1287
00:45:49,110 --> 00:45:50,790
application perspective which may have

1288
00:45:50,790 --> 00:45:52,290
different functionality different

1289
00:45:52,290 --> 00:45:54,570
directory path structures etc useful to

1290
00:45:54,570 --> 00:45:56,880
have again this is something that I like

1291
00:45:56,880 --> 00:46:02,099
to see visually react developer tools

1292
00:46:02,099 --> 00:46:06,900
I believe so yeah

1293
00:46:06,900 --> 00:46:09,029
so you actually you can put them all in

1294
00:46:09,029 --> 00:46:11,160
right here so it does come with a list

1295
00:46:11,160 --> 00:46:12,239
but you can go ahead and provide

1296
00:46:12,239 --> 00:46:13,799
additional ones so I know that some

1297
00:46:13,799 --> 00:46:15,239
folks on Twitter or the other day were

1298
00:46:15,239 --> 00:46:17,099
talking about how they like to change

1299
00:46:17,099 --> 00:46:18,930
the user agent to I would provide like a

1300
00:46:18,930 --> 00:46:20,849
would cause a blind sequel injection in

1301
00:46:20,849 --> 00:46:22,410
the application like you could easily

1302
00:46:22,410 --> 00:46:23,789
just dump all of those different strings

1303
00:46:23,789 --> 00:46:25,200
in here and just kind of keep running

1304
00:46:25,200 --> 00:46:27,119
with it if you wanted to I like it

1305
00:46:27,119 --> 00:46:30,809
because it's easily customizable so wrap

1306
00:46:30,809 --> 00:46:32,099
eliezer if you haven't used it as well

1307
00:46:32,099 --> 00:46:33,749
and it's similar to built with kind of

1308
00:46:33,749 --> 00:46:35,400
just tells you what the application is

1309
00:46:35,400 --> 00:46:38,279
actually built with tells you CMS if

1310
00:46:38,279 --> 00:46:39,479
they're using like you know Google

1311
00:46:39,479 --> 00:46:41,729
tracking etc but also tell you okay

1312
00:46:41,729 --> 00:46:43,650
they're using PHP version what have you

1313
00:46:43,650 --> 00:46:45,089
and sometimes that's really useful

1314
00:46:45,089 --> 00:46:47,549
because then I can just go look up cvd

1315
00:46:47,549 --> 00:46:49,799
PHP and version number

1316
00:46:49,799 --> 00:46:51,059
I just find everything that's broken

1317
00:46:51,059 --> 00:46:53,609
with it reactive elephant tools is

1318
00:46:53,609 --> 00:46:54,900
interesting because if you go to an

1319
00:46:54,900 --> 00:46:57,269
application that is built with yeah and

1320
00:46:57,269 --> 00:46:59,069
it's still a developer like version

1321
00:46:59,069 --> 00:47:00,239
they're not using like the actual build

1322
00:47:00,239 --> 00:47:02,579
ready version it'll pop up in red and it

1323
00:47:02,579 --> 00:47:03,839
would be like okay they're they're using

1324
00:47:03,839 --> 00:47:06,119
react developer edition here for this

1325
00:47:06,119 --> 00:47:08,279
and it's like okay cool I know a little

1326
00:47:08,279 --> 00:47:10,200
bit about that I've done enough testing

1327
00:47:10,200 --> 00:47:11,969
with it that I can be like okay that at

1328
00:47:11,969 --> 00:47:13,380
least tells me that maybe their

1329
00:47:13,380 --> 00:47:14,670
developers aren't doing all of the best

1330
00:47:14,670 --> 00:47:16,229
practices and this is actually worth

1331
00:47:16,229 --> 00:47:17,249
going after from a few different

1332
00:47:17,249 --> 00:47:20,210
perspectives also open multiple URLs

1333
00:47:20,210 --> 00:47:24,180
that's right here what I can do and what

1334
00:47:24,180 --> 00:47:25,559
I often will do is I would go into verb

1335
00:47:25,559 --> 00:47:27,269
C Pro I will highlight everything and

1336
00:47:27,269 --> 00:47:29,819
then I will I will parse all of that

1337
00:47:29,819 --> 00:47:31,799
down to top level domains in most cases

1338
00:47:31,799 --> 00:47:33,719
and then I will just like start dumping

1339
00:47:33,719 --> 00:47:35,999
those in and hit open URLs and it'll

1340
00:47:35,999 --> 00:47:38,039
start opening tabs form which is great

1341
00:47:38,039 --> 00:47:39,809
the other side of this that's really

1342
00:47:39,809 --> 00:47:41,640
useful is if you ever go to a site and

1343
00:47:41,640 --> 00:47:43,890
you want to know like different pages

1344
00:47:43,890 --> 00:47:45,210
that it links to maybe some of them are

1345
00:47:45,210 --> 00:47:46,319
hidden or what-have-you

1346
00:47:46,319 --> 00:47:48,029
you can just go to look at the source

1347
00:47:48,029 --> 00:47:49,650
code copy all of it paste it in here and

1348
00:47:49,650 --> 00:47:51,839
go to extract URLs from text and it'll

1349
00:47:51,839 --> 00:47:53,609
pull out all of the URLs that are inside

1350
00:47:53,609 --> 00:47:55,710
of that source code which is really

1351
00:47:55,710 --> 00:47:56,910
beneficial because I don't necessarily

1352
00:47:56,910 --> 00:47:58,499
want to go around and click on every

1353
00:47:58,499 --> 00:48:00,299
single link on the page to get it to

1354
00:48:00,299 --> 00:48:01,979
actually populate now first purple do

1355
00:48:01,979 --> 00:48:03,359
that automatically for me it'll continue

1356
00:48:03,359 --> 00:48:05,609
to spider through things but sometimes I

1357
00:48:05,609 --> 00:48:07,739
like to really look at the pages so also

1358
00:48:07,739 --> 00:48:10,340
very useful

1359
00:48:10,340 --> 00:48:12,690
and I know I'm probably just about out

1360
00:48:12,690 --> 00:48:16,260
of time so I guess with that I just want

1361
00:48:16,260 --> 00:48:18,060
to say thank you all for coming and I

1362
00:48:18,060 --> 00:48:19,040
think

1363
00:48:19,040 --> 00:48:21,929
[Applause]

