1
00:00:02,490 --> 00:00:05,190
thank y'all for being here I know Keith

2
00:00:05,190 --> 00:00:07,440
is next door right now giving a talk on

3
00:00:07,440 --> 00:00:10,400
how to get into application security so

4
00:00:10,400 --> 00:00:12,269
today I'm going to talk to you about

5
00:00:12,269 --> 00:00:14,130
something you can do once you're in web

6
00:00:14,130 --> 00:00:16,740
application security or application

7
00:00:16,740 --> 00:00:18,420
security specifically web application

8
00:00:18,420 --> 00:00:20,279
security which is seemingly most

9
00:00:20,279 --> 00:00:22,050
application security these days because

10
00:00:22,050 --> 00:00:24,140
everything now has a web interface right

11
00:00:24,140 --> 00:00:27,599
so today I'm going to talk a little

12
00:00:27,599 --> 00:00:30,750
about selenium which is an awesome tool

13
00:00:30,750 --> 00:00:33,450
it's not a new tool it's not a tool that

14
00:00:33,450 --> 00:00:35,130
I developed it's a tool that I found

15
00:00:35,130 --> 00:00:37,469
very useful in performing web

16
00:00:37,469 --> 00:00:41,790
application security engagements and so

17
00:00:41,790 --> 00:00:43,320
I'm going to share with you some of the

18
00:00:43,320 --> 00:00:44,610
things I've found some of the tricks

19
00:00:44,610 --> 00:00:48,000
that I've found to make it useful for a

20
00:00:48,000 --> 00:00:51,390
web application security testing this is

21
00:00:51,390 --> 00:00:54,000
this talk is going to be it's going to

22
00:00:54,000 --> 00:00:56,640
include live demos hopefully recorded

23
00:00:56,640 --> 00:00:59,160
demos as a fallback all the code that

24
00:00:59,160 --> 00:01:01,260
you're going to see is on my github the

25
00:01:01,260 --> 00:01:03,239
link at the bottom of the screen where

26
00:01:03,239 --> 00:01:05,250
the slides will go up there afterwards

27
00:01:05,250 --> 00:01:09,090
as well so feel free to have any of

28
00:01:09,090 --> 00:01:11,010
those examples and everything that I do

29
00:01:11,010 --> 00:01:13,560
here is designed to be reproducible with

30
00:01:13,560 --> 00:01:15,330
a minimum of effort just so that you can

31
00:01:15,330 --> 00:01:17,070
get up and running with selenium just

32
00:01:17,070 --> 00:01:20,040
like right away it's that I want this to

33
00:01:20,040 --> 00:01:21,810
be something that you can take away and

34
00:01:21,810 --> 00:01:25,830
immediately use so let's go selenium the

35
00:01:25,830 --> 00:01:30,799
dark side of the moon and version

36
00:01:30,799 --> 00:01:34,979
all right so Who am I I'm gonna follow a

37
00:01:34,979 --> 00:01:37,439
kind of a who what when where how why

38
00:01:37,439 --> 00:01:41,100
and then why not of selenium so the

39
00:01:41,100 --> 00:01:43,320
structure of this talk is going to be me

40
00:01:43,320 --> 00:01:44,700
what is selenium

41
00:01:44,700 --> 00:01:46,860
how does selenium fit into the larger

42
00:01:46,860 --> 00:01:50,159
context of web application testing and

43
00:01:50,159 --> 00:01:52,860
browser automation in general and then

44
00:01:52,860 --> 00:01:54,630
I'll get into the nitty-gritty of using

45
00:01:54,630 --> 00:01:56,460
selenium offensively which is going to

46
00:01:56,460 --> 00:01:59,790
be the bulk of this talk finally I'll

47
00:01:59,790 --> 00:02:01,979
get into the pitfalls of selenium how

48
00:02:01,979 --> 00:02:04,920
you can run into trouble with it and

49
00:02:04,920 --> 00:02:08,429
then when not use selenium so Who am I

50
00:02:08,429 --> 00:02:11,790
I'm atomizer security researcher at

51
00:02:11,790 --> 00:02:13,850
Cisco I do

52
00:02:13,850 --> 00:02:17,500
web application security and product I

53
00:02:17,500 --> 00:02:19,970
do product security assessments which

54
00:02:19,970 --> 00:02:21,740
includes web application security and

55
00:02:21,740 --> 00:02:23,450
penetration testing and and both of

56
00:02:23,450 --> 00:02:26,300
these both of these roles I've found

57
00:02:26,300 --> 00:02:29,110
that custom web application attacks are

58
00:02:29,110 --> 00:02:32,300
very very important either because of a

59
00:02:32,300 --> 00:02:34,340
product's actual production web

60
00:02:34,340 --> 00:02:37,160
interface or internal tools that have

61
00:02:37,160 --> 00:02:39,500
been developed by the dev team often as

62
00:02:39,500 --> 00:02:40,550
part of the continuous integration

63
00:02:40,550 --> 00:02:44,690
environment and developing custom web

64
00:02:44,690 --> 00:02:48,680
application attacks is very very helpful

65
00:02:48,680 --> 00:02:52,190
in both both scenarios so ok what

66
00:02:52,190 --> 00:02:54,320
exactly is selenium so it's a set of

67
00:02:54,320 --> 00:02:56,000
tools a set of open-source tools I

68
00:02:56,000 --> 00:02:58,070
should add it's Apache licensed to

69
00:02:58,070 --> 00:03:00,590
programmatically control a browser this

70
00:03:00,590 --> 00:03:03,590
refers to a stock unmodified browser so

71
00:03:03,590 --> 00:03:06,950
just actual Firefox Chrome edged IE

72
00:03:06,950 --> 00:03:09,650
pretty much any modern browser supports

73
00:03:09,650 --> 00:03:11,090
it to a standard they're called

74
00:03:11,090 --> 00:03:12,910
webdriver which I'll explain in a bit I

75
00:03:12,910 --> 00:03:15,500
should qualify it's not precisely a

76
00:03:15,500 --> 00:03:17,320
standard it's on its way

77
00:03:17,320 --> 00:03:19,790
as I mentioned it's widely used in web

78
00:03:19,790 --> 00:03:21,980
application testing not associated so

79
00:03:21,980 --> 00:03:23,120
much with web application security

80
00:03:23,120 --> 00:03:25,760
testing but I think it should be because

81
00:03:25,760 --> 00:03:28,550
it's very useful for it can be used for

82
00:03:28,550 --> 00:03:31,010
web scraping obviously the key

83
00:03:31,010 --> 00:03:32,930
difference that distinguishes selenium

84
00:03:32,930 --> 00:03:36,470
from many other tools to Mike perform

85
00:03:36,470 --> 00:03:38,630
testing is that it simulates user

86
00:03:38,630 --> 00:03:40,460
actions that is it automates user

87
00:03:40,460 --> 00:03:42,230
actions it's what I kind of jokingly

88
00:03:42,230 --> 00:03:50,000
called layer 8 automation and the the

89
00:03:50,000 --> 00:03:51,020
selling point of selenium

90
00:03:51,020 --> 00:03:52,400
apart from being one of the oldest

91
00:03:52,400 --> 00:03:55,000
probably the oldest and most mature

92
00:03:55,000 --> 00:03:58,040
browser automation framework is its

93
00:03:58,040 --> 00:03:59,870
compatibility across browsers and

94
00:03:59,870 --> 00:04:01,700
languages it's not it's it attempts to

95
00:04:01,700 --> 00:04:03,410
be as vendor neutral as possible as I

96
00:04:03,410 --> 00:04:05,630
mentioned it's compatible with pretty

97
00:04:05,630 --> 00:04:07,130
much all modern browsers they it's

98
00:04:07,130 --> 00:04:10,370
Safari as well and it has it has you

99
00:04:10,370 --> 00:04:11,810
can't use it with mobile support it's

100
00:04:11,810 --> 00:04:14,090
not supported natively there's a there's

101
00:04:14,090 --> 00:04:16,070
a couple of projects and one of them is

102
00:04:16,070 --> 00:04:19,250
called fpm the other one escapes my mind

103
00:04:19,250 --> 00:04:20,988
at the moment but there are ways to run

104
00:04:20,988 --> 00:04:22,970
it with with mobile browsers which

105
00:04:22,970 --> 00:04:25,190
everyone asks about these days that's

106
00:04:25,190 --> 00:04:26,390
not going to be the focus of this talk

107
00:04:26,390 --> 00:04:27,780
again because this is

108
00:04:27,780 --> 00:04:29,910
but based on attacking web applications

109
00:04:29,910 --> 00:04:32,150
and not so much on kind of like you a

110
00:04:32,150 --> 00:04:36,090
acceptability testing compatible across

111
00:04:36,090 --> 00:04:38,100
languages the selenium libraries are

112
00:04:38,100 --> 00:04:40,980
available in pretty much any language

113
00:04:40,980 --> 00:04:44,940
you're likely to to use well SQL support

114
00:04:44,940 --> 00:04:47,310
isn't quite there yet but if you want to

115
00:04:47,310 --> 00:04:51,360
say automate automate Firefox and Python

116
00:04:51,360 --> 00:04:53,670
very common that those are the examples

117
00:04:53,670 --> 00:04:55,740
the majority of examples and the demos

118
00:04:55,740 --> 00:04:57,150
that I'll be giving in this talk because

119
00:04:57,150 --> 00:04:58,320
it it's you're up and running really

120
00:04:58,320 --> 00:05:01,800
quick but if you want to automate safari

121
00:05:01,800 --> 00:05:06,810
in safari in ruby or you could even

122
00:05:06,810 --> 00:05:09,810
automate internet explorer in PHP if

123
00:05:09,810 --> 00:05:16,260
you're a perverse that way and the best

124
00:05:16,260 --> 00:05:18,450
part is that the basic techniques and

125
00:05:18,450 --> 00:05:19,860
the webdriver interface really don't

126
00:05:19,860 --> 00:05:22,440
care the only the high-level codes will

127
00:05:22,440 --> 00:05:26,070
change so the selenium ecosystem as I

128
00:05:26,070 --> 00:05:27,330
mentioned there's many browser

129
00:05:27,330 --> 00:05:29,730
automation projects these usually are

130
00:05:29,730 --> 00:05:32,880
based on you may have heard of say like

131
00:05:32,880 --> 00:05:35,400
phantom Jas or some of the derivatives

132
00:05:35,400 --> 00:05:37,530
that are used at a higher level to to

133
00:05:37,530 --> 00:05:39,660
run it these are usually based on or

134
00:05:39,660 --> 00:05:42,180
support webdriver for example a phantom

135
00:05:42,180 --> 00:05:45,000
Jas has a has its own web driver called

136
00:05:45,000 --> 00:05:48,090
ghost driver and by the way if anything

137
00:05:48,090 --> 00:05:50,280
in the in the demos that I'll be doing

138
00:05:50,280 --> 00:05:53,520
is is it legible

139
00:05:53,520 --> 00:05:55,290
if the fonts too small just just shout

140
00:05:55,290 --> 00:06:00,570
out and know all zoom and the big

141
00:06:00,570 --> 00:06:03,720
development now that makes selenium

142
00:06:03,720 --> 00:06:07,110
seemingly destined for dominance in the

143
00:06:07,110 --> 00:06:11,460
browser automation space is the

144
00:06:11,460 --> 00:06:13,860
increasing native support native

145
00:06:13,860 --> 00:06:15,990
headless support in major browsers this

146
00:06:15,990 --> 00:06:17,310
was a development

147
00:06:17,310 --> 00:06:20,280
I believe led by odd by Google through

148
00:06:20,280 --> 00:06:21,900
headless Chrome which I think was just

149
00:06:21,900 --> 00:06:24,169
made public this year followed by

150
00:06:24,169 --> 00:06:28,140
Firefox and this has led to headless

151
00:06:28,140 --> 00:06:31,919
selenium becoming really kind of the the

152
00:06:31,919 --> 00:06:33,930
framework of choice for doing browser

153
00:06:33,930 --> 00:06:36,720
automation for pretty much pretty much

154
00:06:36,720 --> 00:06:39,539
any purpose of course these have these

155
00:06:39,539 --> 00:06:41,340
have malicious purposes

156
00:06:41,340 --> 00:06:43,919
not just offensive testing but it's used

157
00:06:43,919 --> 00:06:46,260
used bite for actual malicious reasons

158
00:06:46,260 --> 00:06:50,729
that bye-bye spammers and other unsavory

159
00:06:50,729 --> 00:06:53,040
uses which I won't be you won't be

160
00:06:53,040 --> 00:06:54,330
covering because you guys are all white

161
00:06:54,330 --> 00:06:59,820
hats right okay so to begin with to

162
00:06:59,820 --> 00:07:02,400
convince you that selenium is is cool

163
00:07:02,400 --> 00:07:04,710
and useful and can actually do something

164
00:07:04,710 --> 00:07:06,960
with a modern web application outside of

165
00:07:06,960 --> 00:07:09,810
the lab I'm going to start by testing a

166
00:07:09,810 --> 00:07:13,650
client-side attack through a modern web

167
00:07:13,650 --> 00:07:15,960
application and what's more modern and

168
00:07:15,960 --> 00:07:18,000
cutting-edge than Gmail right so we're

169
00:07:18,000 --> 00:07:21,030
going to we're going to simulate a user

170
00:07:21,030 --> 00:07:24,510
on an engagement who unwisely logs into

171
00:07:24,510 --> 00:07:26,580
Gmail and clicks on a link that we send

172
00:07:26,580 --> 00:07:29,550
him I've used this kind of technique in

173
00:07:29,550 --> 00:07:32,310
doing doing demos management loves this

174
00:07:32,310 --> 00:07:35,310
stuff by the way just a little tip they

175
00:07:35,310 --> 00:07:36,810
they love seeing browser automation

176
00:07:36,810 --> 00:07:39,210
because often they're not like familiar

177
00:07:39,210 --> 00:07:41,160
with what I can really do so we're going

178
00:07:41,160 --> 00:07:43,919
to fire up for Gmail demo and hopefully

179
00:07:43,919 --> 00:07:46,820
it'll work if not I'm gonna fall back so

180
00:07:46,820 --> 00:07:50,100
my step away and watch the magic

181
00:07:50,100 --> 00:07:57,360
hopefully happen and take a couple

182
00:07:57,360 --> 00:07:59,780
seconds here

183
00:08:16,510 --> 00:08:21,260
there's the link it's ever victim open

184
00:08:21,260 --> 00:08:27,650
the length Oh No okay all right so Bob

185
00:08:27,650 --> 00:08:29,720
from accounting or whoever clicked under

186
00:08:29,720 --> 00:08:32,679
malicious link and he gotten out word

187
00:08:32,679 --> 00:08:35,750
all right so let's have a look at what

188
00:08:35,750 --> 00:08:38,990
what the hell was Bob thinking the good

189
00:08:38,990 --> 00:08:41,929
news is that Bob is actually quite

190
00:08:41,929 --> 00:08:42,320
simple

191
00:08:42,320 --> 00:08:44,450
and again if if any of this is illegible

192
00:08:44,450 --> 00:08:46,190
just you'll know that I can see the red

193
00:08:46,190 --> 00:08:49,760
doesn't show up too well this is more

194
00:08:49,760 --> 00:08:51,140
complicated than it needs to be because

195
00:08:51,140 --> 00:08:52,940
in demonstrating action chains there

196
00:08:52,940 --> 00:08:56,900
so let me she'll get to in a minute let

197
00:08:56,900 --> 00:09:00,380
me pull up Gmail no actions the good

198
00:09:00,380 --> 00:09:01,970
news about this is that it's it's really

199
00:09:01,970 --> 00:09:04,820
quite simple to do this as you can

200
00:09:04,820 --> 00:09:09,350
imagine the Gmail login process if I'm

201
00:09:09,350 --> 00:09:11,090
sure all of you have looked it like

202
00:09:11,090 --> 00:09:12,920
Google's HTML at one point or another

203
00:09:12,920 --> 00:09:15,350
and you know of course it's enormously

204
00:09:15,350 --> 00:09:17,900
complex and optimized and you don't ever

205
00:09:17,900 --> 00:09:19,130
want to have to parse it and the good

206
00:09:19,130 --> 00:09:21,230
news is you don't ever have to if you're

207
00:09:21,230 --> 00:09:23,630
using selenium you just have to figure

208
00:09:23,630 --> 00:09:25,220
out how user would interact with the

209
00:09:25,220 --> 00:09:27,080
page which is as simple as figuring out

210
00:09:27,080 --> 00:09:29,060
what buttons to click on specifically

211
00:09:29,060 --> 00:09:31,100
some way to identify the buttons that

212
00:09:31,100 --> 00:09:32,690
you're going to click on so there's a

213
00:09:32,690 --> 00:09:34,280
few things going on here I don't want to

214
00:09:34,280 --> 00:09:35,720
take I want you to take away from this

215
00:09:35,720 --> 00:09:38,060
this demo is that it's it really boils

216
00:09:38,060 --> 00:09:41,420
down to about five lines of of core code

217
00:09:41,420 --> 00:09:43,190
here our web driver we're finding an

218
00:09:43,190 --> 00:09:45,860
element we're sending a username to it

219
00:09:45,860 --> 00:09:47,960
we're waiting don't worry about

220
00:09:47,960 --> 00:09:49,340
webdriver wait if you haven't seen it

221
00:09:49,340 --> 00:09:52,400
before and then we send a password to it

222
00:09:52,400 --> 00:09:56,960
and that demo doesn't have the final

223
00:09:56,960 --> 00:10:00,260
couple of lines we're actually the other

224
00:10:00,260 --> 00:10:01,400
thing I want to emphasize here is that

225
00:10:01,400 --> 00:10:03,110
we're not we're not relying on any of

226
00:10:03,110 --> 00:10:04,520
Google's page structure we're literally

227
00:10:04,520 --> 00:10:08,030
looking for just a span open me probably

228
00:10:08,030 --> 00:10:09,170
going to be pretty reliable that's

229
00:10:09,170 --> 00:10:10,820
probably not going to change again if

230
00:10:10,820 --> 00:10:13,100
you've looked at the actual like Google

231
00:10:13,100 --> 00:10:14,990
code they have just like all kinds of

232
00:10:14,990 --> 00:10:18,440
short impossible to understand names in

233
00:10:18,440 --> 00:10:20,990
all their interfaces so this should be

234
00:10:20,990 --> 00:10:24,770
probably relatively relatively resilient

235
00:10:24,770 --> 00:10:27,250
although there's always the risk of

236
00:10:27,250 --> 00:10:28,970
getting the

237
00:10:28,970 --> 00:10:30,230
getting the capture if we make too many

238
00:10:30,230 --> 00:10:34,360
automated queries which I'll discuss

239
00:10:36,550 --> 00:10:41,090
okay so now hopefully convinced you that

240
00:10:41,090 --> 00:10:43,340
selenium can actually do things that are

241
00:10:43,340 --> 00:10:46,550
useful against a real application so now

242
00:10:46,550 --> 00:10:48,590
I'm going to step back a minute and talk

243
00:10:48,590 --> 00:10:52,600
about how to how to use selenium

244
00:10:52,600 --> 00:10:55,340
specifically the components and tool kit

245
00:10:55,340 --> 00:10:57,670
that you'll need to get started with

246
00:10:57,670 --> 00:11:01,040
applying selenium 2 to the dark side the

247
00:11:01,040 --> 00:11:02,750
dark arts in selenium so you'll need

248
00:11:02,750 --> 00:11:04,670
your browser to automate obviously this

249
00:11:04,670 --> 00:11:06,350
stock unmodified browser you can use

250
00:11:06,350 --> 00:11:08,180
pretty much whatever you want again I

251
00:11:08,180 --> 00:11:10,610
use Firefox and Chrome for some examples

252
00:11:10,610 --> 00:11:12,560
you'll need the corresponding web driver

253
00:11:12,560 --> 00:11:15,920
web driver is a w3c candidate

254
00:11:15,920 --> 00:11:18,350
recommendation at the moment sounds way

255
00:11:18,350 --> 00:11:19,790
to becoming a standard if it isn't

256
00:11:19,790 --> 00:11:22,910
already what webdriver is is it defines

257
00:11:22,910 --> 00:11:25,340
an interface so it's great because that

258
00:11:25,340 --> 00:11:26,870
makes it language neutral defines an

259
00:11:26,870 --> 00:11:28,820
interface and then anyone can write a

260
00:11:28,820 --> 00:11:31,730
library for it and any vendor can write

261
00:11:31,730 --> 00:11:33,770
a web driver to work with that library

262
00:11:33,770 --> 00:11:36,020
and all the major vendors have done so

263
00:11:36,020 --> 00:11:40,060
so for example chrome is available I

264
00:11:40,060 --> 00:11:43,810
believe it's either Google or a Google

265
00:11:43,810 --> 00:11:46,760
project who makes might be chromium who

266
00:11:46,760 --> 00:11:50,330
makes the Chrome web driver but Mozilla

267
00:11:50,330 --> 00:11:52,670
makes the the Firefox web driver gecko

268
00:11:52,670 --> 00:11:55,130
driver believe Apple makes the Safari

269
00:11:55,130 --> 00:11:59,180
driver and yeah Microsoft obviously

270
00:11:59,180 --> 00:12:01,130
makes edge and ie drivers and and

271
00:12:01,130 --> 00:12:03,410
there's mobile drivers through selenium

272
00:12:03,410 --> 00:12:06,230
remote so you need the browser that

273
00:12:06,230 --> 00:12:07,580
you're gonna automate you're gonna need

274
00:12:07,580 --> 00:12:09,470
the corresponding web driver which is

275
00:12:09,470 --> 00:12:11,390
usually just a binary that you just end

276
00:12:11,390 --> 00:12:13,280
up dropping your path and the libraries

277
00:12:13,280 --> 00:12:14,570
will find it that could vary by

278
00:12:14,570 --> 00:12:16,760
implementation you'll need to selenium

279
00:12:16,760 --> 00:12:18,770
libraries in Python that's as simple as

280
00:12:18,770 --> 00:12:21,170
pip install selenium what could be going

281
00:12:21,170 --> 00:12:23,000
to be better you'll need a Dom inspector

282
00:12:23,000 --> 00:12:25,339
or these are in all major browsers of

283
00:12:25,339 --> 00:12:27,770
course but that's obviously important

284
00:12:27,770 --> 00:12:30,170
for actually understanding the page that

285
00:12:30,170 --> 00:12:33,830
you're going to crawl and finally this

286
00:12:33,830 --> 00:12:36,830
is not necessary but this actually is a

287
00:12:36,830 --> 00:12:38,150
critical part of the toolkit is an

288
00:12:38,150 --> 00:12:40,580
application proxy because like burp

289
00:12:40,580 --> 00:12:42,499
suite you can use any

290
00:12:42,499 --> 00:12:45,799
obviously a midden proxy what we'll be

291
00:12:45,799 --> 00:12:48,349
doing later in the demo is hooking up

292
00:12:48,349 --> 00:12:53,359
selenium through a intercepting proxy so

293
00:12:53,359 --> 00:12:54,889
that all the traffic that passes through

294
00:12:54,889 --> 00:12:57,379
it will all the traffic that selenium

295
00:12:57,379 --> 00:12:59,749
generates will pass through the through

296
00:12:59,749 --> 00:13:02,079
the proxy that has a number of

297
00:13:02,079 --> 00:13:03,379
advantages

298
00:13:03,379 --> 00:13:05,059
finally well we'll need our lab

299
00:13:05,059 --> 00:13:06,229
environment because we're obviously not

300
00:13:06,229 --> 00:13:08,019
going to be doing our development on

301
00:13:08,019 --> 00:13:10,719
we're not going to be troubleshooting or

302
00:13:10,719 --> 00:13:13,279
scripts and hitting real services again

303
00:13:13,279 --> 00:13:15,169
and again because we'll probably get

304
00:13:15,169 --> 00:13:17,449
banned so I'll do a quick overview of

305
00:13:17,449 --> 00:13:20,869
docker yes probably are all familiar

306
00:13:20,869 --> 00:13:22,549
with docker and containerization in

307
00:13:22,549 --> 00:13:24,949
general but I'm going to just do a quick

308
00:13:24,949 --> 00:13:27,409
overview of how I set up this this

309
00:13:27,409 --> 00:13:29,659
particular lab to run a complex web

310
00:13:29,659 --> 00:13:32,059
application and how it really is just

311
00:13:32,059 --> 00:13:33,619
ridiculously simple these days with

312
00:13:33,619 --> 00:13:37,479
docker compose even for in for

313
00:13:37,479 --> 00:13:38,959
applications that require multiple

314
00:13:38,959 --> 00:13:40,579
containers for like a database back-end

315
00:13:40,579 --> 00:13:44,269
so this this set up I just I just used a

316
00:13:44,269 --> 00:13:47,359
Kali VM because I didn't need stealth as

317
00:13:47,359 --> 00:13:49,129
we as we learned yesterday a Callie's

318
00:13:49,129 --> 00:13:50,629
not stealthy that it's not required for

319
00:13:50,629 --> 00:13:54,919
for this case the easiest way to to get

320
00:13:54,919 --> 00:13:56,539
together running just in a temporary lab

321
00:13:56,539 --> 00:13:58,699
I've found is just grab the Deb files

322
00:13:58,699 --> 00:14:01,159
and just D package I them you don't need

323
00:14:01,159 --> 00:14:02,809
to mess around with actually getting the

324
00:14:02,809 --> 00:14:04,609
getting the repositories all set up it's

325
00:14:04,609 --> 00:14:07,159
just a temporary testing thing it always

326
00:14:07,159 --> 00:14:08,479
seems to change like it's now docker

327
00:14:08,479 --> 00:14:11,179
Community Edition didn't used to be that

328
00:14:11,179 --> 00:14:11,720
way

329
00:14:11,720 --> 00:14:12,979
and then you need to get the docker

330
00:14:12,979 --> 00:14:15,229
compose binary and just drop it

331
00:14:15,229 --> 00:14:20,299
somewhere in your path okay so we we

332
00:14:20,299 --> 00:14:22,039
assume we've got a docker set up now and

333
00:14:22,039 --> 00:14:24,409
the next steps we're going we're going

334
00:14:24,409 --> 00:14:26,409
to use MediaWiki for our testing

335
00:14:26,409 --> 00:14:28,099
application is something that's

336
00:14:28,099 --> 00:14:30,289
relatively complex and that one might

337
00:14:30,289 --> 00:14:32,739
rightly assume would be a pain to set up

338
00:14:32,739 --> 00:14:35,539
except that now with docker that

339
00:14:35,539 --> 00:14:38,529
assumption is it's no longer right so a

340
00:14:38,529 --> 00:14:41,179
media wiki has kindly provided a docker

341
00:14:41,179 --> 00:14:42,949
composed file and if you're not familiar

342
00:14:42,949 --> 00:14:45,019
with compose and provides just a simple

343
00:14:45,019 --> 00:14:46,939
way of managing a multi container

344
00:14:46,939 --> 00:14:51,739
environment and they're composed by I've

345
00:14:51,739 --> 00:14:53,659
modified slightly for this for this demo

346
00:14:53,659 --> 00:14:55,699
uses the official media wiki and marija

347
00:14:55,699 --> 00:14:56,360
database

348
00:14:56,360 --> 00:15:00,800
images and if you download the my might

349
00:15:00,800 --> 00:15:04,160
yet you can see the it's dr. composed

350
00:15:04,160 --> 00:15:06,470
yeah mall and so once you have that it's

351
00:15:06,470 --> 00:15:08,360
as simple as doing docker compose up and

352
00:15:08,360 --> 00:15:11,329
you'll have a nun configured MediaWiki

353
00:15:11,329 --> 00:15:13,880
instance on your localhost port 8000 and

354
00:15:13,880 --> 00:15:15,560
you set up a wiki just step through a

355
00:15:15,560 --> 00:15:17,750
bunch of questions basically they should

356
00:15:17,750 --> 00:15:19,339
all be pretty obvious you just pick the

357
00:15:19,339 --> 00:15:21,920
the username and password the default

358
00:15:21,920 --> 00:15:24,110
that I picked out or just in the llamo

359
00:15:24,110 --> 00:15:25,730
file the only thing that's vaguely

360
00:15:25,730 --> 00:15:29,000
tricky is database host or docker

361
00:15:29,000 --> 00:15:31,610
compose if you're not super familiar

362
00:15:31,610 --> 00:15:33,829
with docker that's the that's defined by

363
00:15:33,829 --> 00:15:38,870
the link I actually tab over to the

364
00:15:38,870 --> 00:15:42,760
compose file so that you guys can see it

365
00:15:50,030 --> 00:15:54,510
so this is this is basically almost the

366
00:15:54,510 --> 00:15:57,800
official MediaWiki docker compose image

367
00:15:57,800 --> 00:16:00,090
only a couple changes to make it run on

368
00:16:00,090 --> 00:16:02,640
port 8000 instead of 80 80 which

369
00:16:02,640 --> 00:16:05,070
conflicted with the Burford default it

370
00:16:05,070 --> 00:16:09,330
was easier to change this that easier to

371
00:16:09,330 --> 00:16:12,300
change MediaWiki than to have to change

372
00:16:12,300 --> 00:16:15,210
burp every time I started it so the

373
00:16:15,210 --> 00:16:18,000
thing to note here is the links database

374
00:16:18,000 --> 00:16:20,070
in the definition of the MediaWiki

375
00:16:20,070 --> 00:16:22,620
container here just to make sure that

376
00:16:22,620 --> 00:16:24,510
it's connected with there and that means

377
00:16:24,510 --> 00:16:27,300
that the database database will resolve

378
00:16:27,300 --> 00:16:30,300
as a hostname to the database back-end

379
00:16:30,300 --> 00:16:33,650
for the wiki and the password for the

380
00:16:33,650 --> 00:16:38,400
you'll enter so yeah I don't want to

381
00:16:38,400 --> 00:16:40,490
spend too long they're going through

382
00:16:40,490 --> 00:16:43,230
media wiki and docker but basically at

383
00:16:43,230 --> 00:16:44,490
the end of that process you'll end up

384
00:16:44,490 --> 00:16:46,830
with a local settings dot PHP file which

385
00:16:46,830 --> 00:16:48,570
you'll then need to copy to the

386
00:16:48,570 --> 00:16:52,440
MediaWiki directory ctrl C to terminate

387
00:16:52,440 --> 00:16:55,500
the docker compose up gracefully that

388
00:16:55,500 --> 00:16:58,910
will populate your Maria DB database

389
00:16:58,910 --> 00:17:01,200
directory then you just remove the

390
00:17:01,200 --> 00:17:04,319
comment from the composed file and endi

391
00:17:04,319 --> 00:17:08,160
docker compose up again you'll be back

392
00:17:08,160 --> 00:17:12,390
at or you rather unions I can't you take

393
00:17:12,390 --> 00:17:13,770
away the comments that it actually will

394
00:17:13,770 --> 00:17:18,030
load the the wiki configuration a PHP

395
00:17:18,030 --> 00:17:21,270
and you'll have a live empty MediaWiki

396
00:17:21,270 --> 00:17:25,980
that we can now play with so either

397
00:17:25,980 --> 00:17:27,900
actually start using it

398
00:17:27,900 --> 00:17:32,190
sketching a selenium script it used to

399
00:17:32,190 --> 00:17:32,730
be

400
00:17:32,730 --> 00:17:36,300
selenium had a feature technically it

401
00:17:36,300 --> 00:17:39,630
still does are called selenium IDE which

402
00:17:39,630 --> 00:17:41,220
was another thing that was it was a

403
00:17:41,220 --> 00:17:43,530
somewhat controversial feature because

404
00:17:43,530 --> 00:17:46,080
it was a one of those program without

405
00:17:46,080 --> 00:17:48,150
programming type things you know the

406
00:17:48,150 --> 00:17:50,190
crop up periodically like program and

407
00:17:50,190 --> 00:17:52,740
natural language fads well this was a

408
00:17:52,740 --> 00:17:54,810
program without programming at all

409
00:17:54,810 --> 00:17:57,420
because it and it was kind of useful

410
00:17:57,420 --> 00:18:00,000
kind of cool for occasional purposes but

411
00:18:00,000 --> 00:18:01,470
it was controversial because the code

412
00:18:01,470 --> 00:18:04,710
produced was was quite bad and sometimes

413
00:18:04,710 --> 00:18:06,539
that code would end up making its way

414
00:18:06,539 --> 00:18:09,900
into actual real tests and other people

415
00:18:09,900 --> 00:18:12,059
who knew the language wouldn't stumble

416
00:18:12,059 --> 00:18:14,880
across it and be shocked that could

417
00:18:14,880 --> 00:18:17,190
explain in part why development for

418
00:18:17,190 --> 00:18:19,770
selenium IDE has fallen off what it is

419
00:18:19,770 --> 00:18:22,200
is it's basically a record button in

420
00:18:22,200 --> 00:18:25,740
your browser that you then you hit the

421
00:18:25,740 --> 00:18:27,390
button you step through some series of

422
00:18:27,390 --> 00:18:30,720
actions it generates a test case or test

423
00:18:30,720 --> 00:18:32,880
suite whatever it was called and then

424
00:18:32,880 --> 00:18:36,030
you can play it back and in theory

425
00:18:36,030 --> 00:18:39,780
that's great it was kind of cool when it

426
00:18:39,780 --> 00:18:43,289
worked but it was clunky clanky and the

427
00:18:43,289 --> 00:18:46,049
code it produced as I mentioned was was

428
00:18:46,049 --> 00:18:48,270
quite horrendous in in a lot of cases

429
00:18:48,270 --> 00:18:50,039
and it would usually require manual

430
00:18:50,039 --> 00:18:52,860
fix-up so it may be a good thing that

431
00:18:52,860 --> 00:18:55,020
development is kind of falling off of

432
00:18:55,020 --> 00:18:57,179
that it's not compatible at all with

433
00:18:57,179 --> 00:18:59,730
current Firefox because of the switch to

434
00:18:59,730 --> 00:19:01,289
web extensions you may be familiar with

435
00:19:01,289 --> 00:19:03,150
it hasn't been ported to that yet there

436
00:19:03,150 --> 00:19:04,679
are a couple of efforts to it they're

437
00:19:04,679 --> 00:19:06,870
not quite there yet there's another

438
00:19:06,870 --> 00:19:08,970
valiant effort called selenium builder

439
00:19:08,970 --> 00:19:11,520
to reproduce the same thing so I tried

440
00:19:11,520 --> 00:19:14,340
that out on a test VM after I installed

441
00:19:14,340 --> 00:19:19,110
it it opened up a a new a new page and I

442
00:19:19,110 --> 00:19:21,600
found that the the about info page for

443
00:19:21,600 --> 00:19:22,650
that had opened up you know like no

444
00:19:22,650 --> 00:19:24,900
scripts does you may be familiar with

445
00:19:24,900 --> 00:19:30,809
that and the domain was parked so that

446
00:19:30,809 --> 00:19:32,820
was not a good sign and I decided it was

447
00:19:32,820 --> 00:19:34,710
time to give up I'm trying to include a

448
00:19:34,710 --> 00:19:38,159
way of getting into selenium through

449
00:19:38,159 --> 00:19:40,650
through the GUI so I came up with this

450
00:19:40,650 --> 00:19:42,720
framework for sketching a selenium

451
00:19:42,720 --> 00:19:44,820
script which I have here this is pretty

452
00:19:44,820 --> 00:19:47,460
much the minimal selenium script that

453
00:19:47,460 --> 00:19:52,230
you can have I'll just open a open a web

454
00:19:52,230 --> 00:19:54,929
browser window to localhost port 8000

455
00:19:54,929 --> 00:19:57,270
which is where MediaWiki lab is set up

456
00:19:57,270 --> 00:20:00,480
and it will just wait I've had a couple

457
00:20:00,480 --> 00:20:02,640
things here you may be familiar with

458
00:20:02,640 --> 00:20:05,730
them this is obviously Python we're

459
00:20:05,730 --> 00:20:07,640
going to be doing this in the Python

460
00:20:07,640 --> 00:20:11,970
interactive shell and the key here is

461
00:20:11,970 --> 00:20:15,170
tab complete this makes it super fun

462
00:20:15,170 --> 00:20:17,240
cool to navigate selenium objects which

463
00:20:17,240 --> 00:20:21,730
are complicated and have strange names

464
00:20:22,300 --> 00:20:26,330
so this is one small step py if you're

465
00:20:26,330 --> 00:20:30,710
looking at the at the github so what

466
00:20:30,710 --> 00:20:32,930
we're gonna do is Python I one small

467
00:20:32,930 --> 00:20:34,910
step I to say that when you're done with

468
00:20:34,910 --> 00:20:38,440
the script leave it in interactive mode

469
00:20:38,440 --> 00:20:44,690
run it and step back here we are the

470
00:20:44,690 --> 00:20:47,540
wiki notice a couple things here we have

471
00:20:47,540 --> 00:20:50,210
a little robot icon indicating obviously

472
00:20:50,210 --> 00:20:52,100
that our browser session is under remote

473
00:20:52,100 --> 00:20:55,070
control and we have the Python prompt

474
00:20:55,070 --> 00:20:57,320
here now we can click away from there

475
00:20:57,320 --> 00:21:03,410
and if you look at the one small step py

476
00:21:03,410 --> 00:21:06,020
I've called the webdriver object owd

477
00:21:06,020 --> 00:21:09,590
specified the Firefox binary location

478
00:21:09,590 --> 00:21:12,920
just because the default was ESR and I

479
00:21:12,920 --> 00:21:14,600
didn't mess with it and didn't wanna use

480
00:21:14,600 --> 00:21:18,080
ESR so let's look at our WD object WD

481
00:21:18,080 --> 00:21:20,270
dot let's now do tab completion

482
00:21:20,270 --> 00:21:21,530
unfortunately it's not a good way to

483
00:21:21,530 --> 00:21:23,150
illustrate this I'm just hitting tab

484
00:21:23,150 --> 00:21:27,230
quickly twice to see all the other

485
00:21:27,230 --> 00:21:30,320
things in nwd all the all the members of

486
00:21:30,320 --> 00:21:32,210
the WD object you see a bunch of

487
00:21:32,210 --> 00:21:36,170
potentially interesting things on a call

488
00:21:36,170 --> 00:21:39,140
your attention to some WD yet cookies so

489
00:21:39,140 --> 00:21:41,900
we could do that obviously and what a

490
00:21:41,900 --> 00:21:43,040
surprise there aren't actually any

491
00:21:43,040 --> 00:21:44,420
cookies because we haven't logged in or

492
00:21:44,420 --> 00:21:47,810
done anything while we're in this

493
00:21:47,810 --> 00:21:49,580
session though we can do everything that

494
00:21:49,580 --> 00:21:53,420
we could do in on the page so let's

495
00:21:53,420 --> 00:21:55,490
let's manually construct some some

496
00:21:55,490 --> 00:21:57,410
actions so I mentioned that one of our

497
00:21:57,410 --> 00:21:59,360
tools was a Dom inspector so let's go to

498
00:21:59,360 --> 00:22:02,720
the Firefox developer tools and take a

499
00:22:02,720 --> 00:22:04,670
look at the Dom and let's actually

500
00:22:04,670 --> 00:22:08,180
construct a script so we might want to

501
00:22:08,180 --> 00:22:11,630
start by by logging in so let's mouse

502
00:22:11,630 --> 00:22:15,080
over to log in click on it and again if

503
00:22:15,080 --> 00:22:17,030
anything is illegible just just yell it

504
00:22:17,030 --> 00:22:18,800
out don't raise your hand because I

505
00:22:18,800 --> 00:22:20,990
probably won't won't see here because I

506
00:22:20,990 --> 00:22:26,210
get distracted easily just yell so we

507
00:22:26,210 --> 00:22:28,669
can see that our login page

508
00:22:28,669 --> 00:22:31,339
obviously it has the text login that's a

509
00:22:31,339 --> 00:22:33,649
link so that is one way we could we

510
00:22:33,649 --> 00:22:36,499
could try to select it it also has the

511
00:22:36,499 --> 00:22:38,539
ID PT login so there's a number of

512
00:22:38,539 --> 00:22:40,309
different ways that we could refer to it

513
00:22:40,309 --> 00:22:44,209
ID is probably the best way because it's

514
00:22:44,209 --> 00:22:45,619
going to be unique on the page so I'll

515
00:22:45,619 --> 00:22:48,859
do WD dot you can see the pattern these

516
00:22:48,859 --> 00:22:51,709
all beginner finds let's do WD find tab

517
00:22:51,709 --> 00:22:53,330
complete again you have to hit tab twice

518
00:22:53,330 --> 00:22:56,179
usually find element double tab again

519
00:22:56,179 --> 00:22:59,859
find element by ID

520
00:23:00,489 --> 00:23:04,309
let's do PT login we can see that

521
00:23:04,309 --> 00:23:07,129
returns a Firefox web element object and

522
00:23:07,129 --> 00:23:08,570
that's great because that's something

523
00:23:08,570 --> 00:23:11,839
that we can now interact with in the in

524
00:23:11,839 --> 00:23:13,969
the selenium script which we could add

525
00:23:13,969 --> 00:23:16,009
to our actual script or we could

526
00:23:16,009 --> 00:23:18,049
continue to interact with it here or we

527
00:23:18,049 --> 00:23:19,759
could start to interact with it just

528
00:23:19,759 --> 00:23:21,919
make a new login object so that we can

529
00:23:21,919 --> 00:23:26,749
see the members of it and so login dot

530
00:23:26,749 --> 00:23:28,149
has a bunch of different things

531
00:23:28,149 --> 00:23:30,409
something obvious we could do let's

532
00:23:30,409 --> 00:23:33,889
let's click on the login link to do that

533
00:23:33,889 --> 00:23:35,329
and notice what happened over here now

534
00:23:35,329 --> 00:23:39,259
we're in the login screen and so you can

535
00:23:39,259 --> 00:23:42,259
see that you could continue to do this

536
00:23:42,259 --> 00:23:44,269
process there's more if we had done

537
00:23:44,269 --> 00:23:48,739
login dot send Keys if it was a text

538
00:23:48,739 --> 00:23:51,739
field instead like that is we could send

539
00:23:51,739 --> 00:23:54,320
our username and password to it and then

540
00:23:54,320 --> 00:23:56,029
click the login button or just hit enter

541
00:23:56,029 --> 00:24:01,909
which is what we're going to do in the

542
00:24:01,909 --> 00:24:04,070
completed script version of this which

543
00:24:04,070 --> 00:24:20,299
is a wiki login wiki log and py sorry ok

544
00:24:20,299 --> 00:24:22,959
so really quite simple just basically

545
00:24:22,959 --> 00:24:26,329
four or five actions we get after

546
00:24:26,329 --> 00:24:28,669
getting our localhost we're gonna

547
00:24:28,669 --> 00:24:31,009
maximize the window again it's a method

548
00:24:31,009 --> 00:24:35,359
of the web driver element object we

549
00:24:35,359 --> 00:24:38,089
click on the PT login and we've used the

550
00:24:38,089 --> 00:24:40,249
same method with the Dom inspector to

551
00:24:40,249 --> 00:24:42,350
find the element ID

552
00:24:42,350 --> 00:24:45,500
WP name we read the username and

553
00:24:45,500 --> 00:24:49,490
password from this file of which I

554
00:24:49,490 --> 00:24:52,010
didn't include in the in the repository

555
00:24:52,010 --> 00:24:56,539
just kind of out of well how many times

556
00:24:56,539 --> 00:24:57,559
are we seeing credentials in the

557
00:24:57,559 --> 00:24:58,669
repository these are just test

558
00:24:58,669 --> 00:25:01,400
credentials who cares but it just rubs

559
00:25:01,400 --> 00:25:05,230
me the wrong way to see C credentials

560
00:25:05,350 --> 00:25:07,970
yeah it's just Celine selenium one two

561
00:25:07,970 --> 00:25:09,230
three there are the default credentials

562
00:25:09,230 --> 00:25:11,390
so it totally doesn't matter but just

563
00:25:11,390 --> 00:25:13,700
just the pet peeve that is probably

564
00:25:13,700 --> 00:25:16,370
pretty common so I'm using find element

565
00:25:16,370 --> 00:25:18,020
by ID and all of these obviously as you

566
00:25:18,020 --> 00:25:19,280
saw there's a number of different ways

567
00:25:19,280 --> 00:25:22,909
you can do that we go back to it one of

568
00:25:22,909 --> 00:25:24,140
the one that I want to illustrate is

569
00:25:24,140 --> 00:25:26,690
find element by link text is often very

570
00:25:26,690 --> 00:25:31,250
useful because link text page pages will

571
00:25:31,250 --> 00:25:33,440
will change like the the way that a page

572
00:25:33,440 --> 00:25:34,970
is structured is going to change that's

573
00:25:34,970 --> 00:25:38,270
a given page interfaces do change as

574
00:25:38,270 --> 00:25:41,780
well you can have a script that will try

575
00:25:41,780 --> 00:25:43,789
to find an element by both something

576
00:25:43,789 --> 00:25:48,110
like ID and and what it looks like to

577
00:25:48,110 --> 00:25:51,470
the user in this case link text and that

578
00:25:51,470 --> 00:25:53,030
that can be helpful in trying to make

579
00:25:53,030 --> 00:25:55,130
robust scripts I say trying because you

580
00:25:55,130 --> 00:25:56,360
can never guarantee that it won't break

581
00:25:56,360 --> 00:25:59,000
that sometimes entire sites will just

582
00:25:59,000 --> 00:26:00,950
become like what is this this is this is

583
00:26:00,950 --> 00:26:03,020
not even usable for for a human user

584
00:26:03,020 --> 00:26:06,289
anymore but I want to just illustrate

585
00:26:06,289 --> 00:26:11,000
quickly find element by link text just

586
00:26:11,000 --> 00:26:12,740
because that's something that is very

587
00:26:12,740 --> 00:26:14,840
useful now the link text has to be

588
00:26:14,840 --> 00:26:16,460
complete so it's got to be the actual

589
00:26:16,460 --> 00:26:20,299
full text of the of the node if we do

590
00:26:20,299 --> 00:26:22,429
just log it's not going to find it

591
00:26:22,429 --> 00:26:26,270
there's another 1 by partial link text

592
00:26:26,270 --> 00:26:33,260
that actually could be more useful if we

593
00:26:33,260 --> 00:26:38,419
just find login well and you'll notice

594
00:26:38,419 --> 00:26:40,520
that I screwed up here and I called it

595
00:26:40,520 --> 00:26:42,409
log in when it's actually log space and

596
00:26:42,409 --> 00:26:44,780
so what's going on now which is going to

597
00:26:44,780 --> 00:26:46,250
be a segue for the next topic is

598
00:26:46,250 --> 00:26:49,159
implicit wait right now it's waiting for

599
00:26:49,159 --> 00:26:52,040
30 seconds that I've defined to find

600
00:26:52,040 --> 00:26:55,340
that element on the page and once it

601
00:26:55,340 --> 00:26:56,160
times

602
00:26:56,160 --> 00:26:59,100
out it's going to assume that the

603
00:26:59,100 --> 00:27:01,290
elements not there and it's just going

604
00:27:01,290 --> 00:27:03,300
to fail out of that example and I was

605
00:27:03,300 --> 00:27:06,150
hoping it would be able to there we go I

606
00:27:06,150 --> 00:27:08,760
did manage to to talk for long enough to

607
00:27:08,760 --> 00:27:12,660
actually happen so let's let's do this

608
00:27:12,660 --> 00:27:14,370
properly find out meant by partial link

609
00:27:14,370 --> 00:27:20,120
text log and there it is and so

610
00:27:20,120 --> 00:27:23,070
something you may be asking is what if

611
00:27:23,070 --> 00:27:24,690
these things are not unique obviously

612
00:27:24,690 --> 00:27:28,980
IDs are going to be unique but something

613
00:27:28,980 --> 00:27:31,230
like link text there's no guarantee and

614
00:27:31,230 --> 00:27:33,030
not a particularly low likelihood that

615
00:27:33,030 --> 00:27:35,040
it's going to be unique so this is one

616
00:27:35,040 --> 00:27:37,080
of the pitfalls to kind of preview the

617
00:27:37,080 --> 00:27:38,430
selenium that you need to watch out for

618
00:27:38,430 --> 00:27:41,940
which is find element versus find

619
00:27:41,940 --> 00:27:45,180
elements this comes up a lot people ask

620
00:27:45,180 --> 00:27:48,390
me about this very similarly named

621
00:27:48,390 --> 00:27:50,610
functions or methods find elements by ID

622
00:27:50,610 --> 00:27:54,450
versus point element by ID this will

623
00:27:54,450 --> 00:27:56,580
return a list that will return an

624
00:27:56,580 --> 00:27:58,530
element so just make sure you know which

625
00:27:58,530 --> 00:28:01,170
one you're using and by the way if there

626
00:28:01,170 --> 00:28:03,540
are multiple elements with a given

627
00:28:03,540 --> 00:28:05,670
characteristic that you've found make

628
00:28:05,670 --> 00:28:09,780
sure you make sure you know that find

629
00:28:09,780 --> 00:28:12,240
element will go to the first one it

630
00:28:12,240 --> 00:28:14,280
finds so if you just want the first one

631
00:28:14,280 --> 00:28:15,840
you can always use find element it just

632
00:28:15,840 --> 00:28:20,010
might not be the one you expect okay so

633
00:28:20,010 --> 00:28:22,860
that is the basic skeleton of a selenium

634
00:28:22,860 --> 00:28:27,060
script so let's just go past the

635
00:28:27,060 --> 00:28:32,490
fallback demo okay so our next topic is

636
00:28:32,490 --> 00:28:35,040
adding a proxy to selenium suppose we

637
00:28:35,040 --> 00:28:37,890
encounter a page like this it may be a

638
00:28:37,890 --> 00:28:39,660
little hard to read basically an auto

639
00:28:39,660 --> 00:28:41,940
submitting form in a page that maybe it

640
00:28:41,940 --> 00:28:44,580
was generated dynamically whatever

641
00:28:44,580 --> 00:28:46,860
reason we don't really care but we have

642
00:28:46,860 --> 00:28:49,950
something in a page we don't want we

643
00:28:49,950 --> 00:28:51,600
don't want the page behavior to do with

644
00:28:51,600 --> 00:28:53,310
the we don't want the page we don't want

645
00:28:53,310 --> 00:28:54,810
the browser to do what the page tells it

646
00:28:54,810 --> 00:28:57,540
to do if that makes sense can we pause

647
00:28:57,540 --> 00:28:59,910
selenium here can we tell it hey wait no

648
00:28:59,910 --> 00:29:03,750
don't actually do this well not really

649
00:29:03,750 --> 00:29:05,880
properly they're not reliably there's

650
00:29:05,880 --> 00:29:07,020
not a good way to do this because

651
00:29:07,020 --> 00:29:10,230
selenium although provides introspection

652
00:29:10,230 --> 00:29:12,240
specifically that's what webdriver does

653
00:29:12,240 --> 00:29:14,460
it doesn't give you a real framework for

654
00:29:14,460 --> 00:29:16,620
hooking browser events you could get

655
00:29:16,620 --> 00:29:19,950
fancy and use a tool like Frieda here to

656
00:29:19,950 --> 00:29:23,420
get really crazy and browser specific

657
00:29:23,420 --> 00:29:26,870
that's not necessary

658
00:29:26,870 --> 00:29:30,330
proxy to the rescue we can actually stop

659
00:29:30,330 --> 00:29:32,430
this from happening but not using

660
00:29:32,430 --> 00:29:33,660
selenium directly this is one

661
00:29:33,660 --> 00:29:37,080
application of a HTTP aware proxy didn't

662
00:29:37,080 --> 00:29:38,820
going to talk about proxies have many

663
00:29:38,820 --> 00:29:40,350
advantages you should basically always

664
00:29:40,350 --> 00:29:42,360
use them whenever you're using selenium

665
00:29:42,360 --> 00:29:45,540
for offensive testing logging obviously

666
00:29:45,540 --> 00:29:48,090
the main thing they're useful one of the

667
00:29:48,090 --> 00:29:50,070
main things they can do to show you all

668
00:29:50,070 --> 00:29:51,960
the transactions that you've done as we

669
00:29:51,960 --> 00:29:55,770
also heard yesterday burp suite is it's

670
00:29:55,770 --> 00:29:57,930
very good for just troubleshooting even

671
00:29:57,930 --> 00:29:58,800
when you're not trying to attack

672
00:29:58,800 --> 00:30:01,560
something performing on the fly request

673
00:30:01,560 --> 00:30:03,840
and response transforms you can modify a

674
00:30:03,840 --> 00:30:06,290
request or a response before it hits

675
00:30:06,290 --> 00:30:09,990
selenium or the browser according to or

676
00:30:09,990 --> 00:30:13,020
reg X is examples we'll be using our

677
00:30:13,020 --> 00:30:15,300
with with burp suite but again you can

678
00:30:15,300 --> 00:30:17,280
use any of them you can enforce a scope

679
00:30:17,280 --> 00:30:18,990
if you're on a pen test engagement if

680
00:30:18,990 --> 00:30:20,970
you've ever done something like that you

681
00:30:20,970 --> 00:30:23,900
don't know that staying within scope is

682
00:30:23,900 --> 00:30:26,100
something people care about through some

683
00:30:26,100 --> 00:30:29,520
reason he can use burp to restrict all

684
00:30:29,520 --> 00:30:30,810
your requests to a particular domain

685
00:30:30,810 --> 00:30:33,600
even if the page is trying to send you

686
00:30:33,600 --> 00:30:34,140
somewhere else

687
00:30:34,140 --> 00:30:36,090
you can also take advantage of just

688
00:30:36,090 --> 00:30:37,710
tools that are included with with

689
00:30:37,710 --> 00:30:40,560
proxies like burps issue detection or

690
00:30:40,560 --> 00:30:42,420
some of the some of the extensions in

691
00:30:42,420 --> 00:30:45,420
the burp app store like collaborator and

692
00:30:45,420 --> 00:30:48,570
as I mentioned in the original case of a

693
00:30:48,570 --> 00:30:50,370
auto submitting form you can halt a

694
00:30:50,370 --> 00:30:53,040
transaction okay so how do we actually

695
00:30:53,040 --> 00:30:55,440
add a proxy mean to step back and

696
00:30:55,440 --> 00:30:57,390
talking about how selenium paths

697
00:30:57,390 --> 00:30:59,250
selenium works when it starts up there's

698
00:30:59,250 --> 00:31:01,230
new browser sessions of little robot

699
00:31:01,230 --> 00:31:03,810
icon the thing to be aware of is that

700
00:31:03,810 --> 00:31:06,480
every run of selenium creates a fresh

701
00:31:06,480 --> 00:31:09,650
profile like a default from scratch

702
00:31:09,650 --> 00:31:12,960
profile with no customization by default

703
00:31:12,960 --> 00:31:16,230
and this is necessary because since used

704
00:31:16,230 --> 00:31:18,000
in application testing you want to make

705
00:31:18,000 --> 00:31:20,190
sure you have reproducible results so

706
00:31:20,190 --> 00:31:22,140
you can't have your selenium sessions

707
00:31:22,140 --> 00:31:22,880
getting

708
00:31:22,880 --> 00:31:25,909
getting clogged up with with old profile

709
00:31:25,909 --> 00:31:30,950
data so what we have to do is

710
00:31:30,950 --> 00:31:32,600
pre-configure before we actually launch

711
00:31:32,600 --> 00:31:34,909
the web driver we have to pre configure

712
00:31:34,909 --> 00:31:37,480
the new profile to use a proxy and

713
00:31:37,480 --> 00:31:40,070
furthermore we also have to ensure that

714
00:31:40,070 --> 00:31:42,019
the proxy certificate authority is

715
00:31:42,019 --> 00:31:43,639
installed if we want to actually do

716
00:31:43,639 --> 00:31:48,320
anything useful specifically if we wanna

717
00:31:48,320 --> 00:31:50,299
and in the middle HTTP connections as

718
00:31:50,299 --> 00:31:54,019
I'm sure you've included so the proxy

719
00:31:54,019 --> 00:31:55,700
and preference mechanics looks something

720
00:31:55,700 --> 00:31:58,250
like this this is a little snippet of a

721
00:31:58,250 --> 00:32:01,789
class that I created for the demo that I

722
00:32:01,789 --> 00:32:04,070
hope could actually be useful to someone

723
00:32:04,070 --> 00:32:08,899
in in developing Offensive tests so

724
00:32:08,899 --> 00:32:11,659
basically this is how you create how you

725
00:32:11,659 --> 00:32:16,009
set the preferences for for a web driver

726
00:32:16,009 --> 00:32:19,700
a new web driver browser session this

727
00:32:19,700 --> 00:32:22,879
unfortunately is browser specific I

728
00:32:22,879 --> 00:32:26,059
don't know well of course there isn't a

729
00:32:26,059 --> 00:32:28,070
way to do this then in a browser neutral

730
00:32:28,070 --> 00:32:29,360
why because all browsers have different

731
00:32:29,360 --> 00:32:30,860
different preferences there isn't a

732
00:32:30,860 --> 00:32:33,070
standard API for things like proxy

733
00:32:33,070 --> 00:32:36,019
settings as far as I know and the most

734
00:32:36,019 --> 00:32:38,990
specific thing here the most browser

735
00:32:38,990 --> 00:32:41,090
specific thing which is kind of a clunky

736
00:32:41,090 --> 00:32:42,500
hack is the way to install the

737
00:32:42,500 --> 00:32:45,470
certificate authority which is is kind

738
00:32:45,470 --> 00:32:47,360
of embarrassing but the way to do it is

739
00:32:47,360 --> 00:32:50,539
you copy the cert eight dot DB file in

740
00:32:50,539 --> 00:32:54,679
Firefox from a browser profile that has

741
00:32:54,679 --> 00:32:58,159
been configured to trust the to trust

742
00:32:58,159 --> 00:33:00,440
the burp a certificate authority and I'm

743
00:33:00,440 --> 00:33:02,809
sure you all know how to do this but I'm

744
00:33:02,809 --> 00:33:04,759
just going to I'm just gonna step

745
00:33:04,759 --> 00:33:05,870
through it just to make sure we're all

746
00:33:05,870 --> 00:33:09,370
on the same page let's just go to a

747
00:33:09,370 --> 00:33:12,230
browser session make sure it's hooked up

748
00:33:12,230 --> 00:33:15,799
to I'm using the just a one-click proxy

749
00:33:15,799 --> 00:33:18,730
setting Europe

750
00:33:18,730 --> 00:33:23,419
you just go to HTTP verb and yeah we

751
00:33:23,419 --> 00:33:26,059
click on CA certificate at the doctor

752
00:33:26,059 --> 00:33:29,600
file preferences I'm sure you all know

753
00:33:29,600 --> 00:33:31,100
how to do this I don't know why I'm

754
00:33:31,100 --> 00:33:33,080
bothering with this where did they move

755
00:33:33,080 --> 00:33:35,678
it to today

756
00:33:41,600 --> 00:33:45,480
there we go and yeah you import a

757
00:33:45,480 --> 00:33:46,830
certificate make sure it's an authority

758
00:33:46,830 --> 00:33:48,600
and not a certificate because the way

759
00:33:48,600 --> 00:33:51,390
that these the way that HTTP proxies

760
00:33:51,390 --> 00:33:54,660
work obviously each proxy each website

761
00:33:54,660 --> 00:33:55,980
is going to have its own certificate so

762
00:33:55,980 --> 00:33:57,150
you need to import a certificate

763
00:33:57,150 --> 00:33:59,160
authority and the way the proxy works

764
00:33:59,160 --> 00:34:01,860
it'll then generate and untrusted by

765
00:34:01,860 --> 00:34:03,990
default a certificate on the fly for

766
00:34:03,990 --> 00:34:06,390
every site that you go to so we import

767
00:34:06,390 --> 00:34:09,179
the downloaded see a certain doctor and

768
00:34:09,179 --> 00:34:12,060
I already installed it and so that's

769
00:34:12,060 --> 00:34:13,429
basically how you install that

770
00:34:13,429 --> 00:34:17,040
certificate authority into the into

771
00:34:17,040 --> 00:34:19,650
Firefox in this case and then you'll

772
00:34:19,650 --> 00:34:26,969
have your dot Mozilla Firefox profile or

773
00:34:26,969 --> 00:34:30,330
whatever the random name it gives it and

774
00:34:30,330 --> 00:34:31,350
then you'll have a cert

775
00:34:31,350 --> 00:34:34,050
8db file and that's where the actual

776
00:34:34,050 --> 00:34:36,300
trust information is stored and so

777
00:34:36,300 --> 00:34:38,730
that's the file that the script needs a

778
00:34:38,730 --> 00:34:41,880
path to and will then copy to the each

779
00:34:41,880 --> 00:34:44,400
new selenium profile that you've set up

780
00:34:44,400 --> 00:34:46,980
so that is that is the kind of like

781
00:34:46,980 --> 00:34:48,659
clunky part that I don't really like

782
00:34:48,659 --> 00:34:51,179
about this but I haven't found a better

783
00:34:51,179 --> 00:34:55,969
way to do there the underlying code uses

784
00:34:55,969 --> 00:34:59,430
something called NSS I think that is

785
00:34:59,430 --> 00:35:03,180
very complicated and I got scared when I

786
00:35:03,180 --> 00:35:04,560
looked at it so I decided this is a

787
00:35:04,560 --> 00:35:07,860
better way to do it at least it was it

788
00:35:07,860 --> 00:35:10,170
was a way to this is the way that I

789
00:35:10,170 --> 00:35:12,420
ended up doing it you probably don't

790
00:35:12,420 --> 00:35:16,140
want to mess around with NSS it's kind

791
00:35:16,140 --> 00:35:19,650
of horrifying anyway once we do that

792
00:35:19,650 --> 00:35:21,990
we'll be able to see all of our sessions

793
00:35:21,990 --> 00:35:25,800
in in our in our proxies of history so

794
00:35:25,800 --> 00:35:27,930
let me just show you how that works when

795
00:35:27,930 --> 00:35:32,040
we decide to practice our MediaWiki

796
00:35:32,040 --> 00:35:34,200
connection oh and one other thing to

797
00:35:34,200 --> 00:35:36,860
note in the proxy settings

798
00:35:36,860 --> 00:35:40,020
you know the MediaWiki the selenium

799
00:35:40,020 --> 00:35:45,240
profile dot py by default it old Firefox

800
00:35:45,240 --> 00:35:47,160
we'll probably other browsers will

801
00:35:47,160 --> 00:35:50,400
choose not to proxy localhost and we

802
00:35:50,400 --> 00:35:51,990
need to make sure that they actually do

803
00:35:51,990 --> 00:35:53,100
proxy localhost

804
00:35:53,100 --> 00:35:54,960
so let's python

805
00:35:54,960 --> 00:36:02,910
I wiki login or make sure that ya wiki

806
00:36:02,910 --> 00:36:05,339
login okay it does not use the proxy

807
00:36:05,339 --> 00:36:06,480
wiki

808
00:36:06,480 --> 00:36:11,130
this is wiki proxy well that's running

809
00:36:11,130 --> 00:36:14,339
we'll go over to our burp hello that'll

810
00:36:14,339 --> 00:36:23,900
soon be overlaid hey stuffs happening

811
00:36:23,900 --> 00:36:26,550
okay so everything that happened here

812
00:36:26,550 --> 00:36:28,520
which unfortunately this one didn't

813
00:36:28,520 --> 00:36:31,050
wasn't one that logged us in so it's not

814
00:36:31,050 --> 00:36:33,930
that interesting but we can see every

815
00:36:33,930 --> 00:36:36,930
action that this browser takes is logged

816
00:36:36,930 --> 00:36:41,280
through log through burp most

817
00:36:41,280 --> 00:36:43,440
interestingly of course we see that our

818
00:36:43,440 --> 00:36:45,780
HTTP interception is working properly

819
00:36:45,780 --> 00:36:49,670
as the browser loaded Mozilla is

820
00:36:49,670 --> 00:36:53,609
advertising stuff and what's that the

821
00:36:53,609 --> 00:36:57,359
Google now or block or whatever and you

822
00:36:57,359 --> 00:36:59,430
can also see what plugins they have

823
00:36:59,430 --> 00:37:02,609
installed okay

824
00:37:02,609 --> 00:37:05,310
so super useful to to be able to hook up

825
00:37:05,310 --> 00:37:07,920
a proxy to every selenium instance and

826
00:37:07,920 --> 00:37:10,280
we just have to leave burp open here and

827
00:37:10,280 --> 00:37:13,619
every time we run this wiki proxy or oh

828
00:37:13,619 --> 00:37:18,210
there it is wiki proxy login everything

829
00:37:18,210 --> 00:37:21,570
will automatically go through here of

830
00:37:21,570 --> 00:37:23,310
course you could you could script the

831
00:37:23,310 --> 00:37:25,680
invocation of burp suite so that it

832
00:37:25,680 --> 00:37:28,020
starts up a new session every time so

833
00:37:28,020 --> 00:37:29,640
now we've actually logged in now we can

834
00:37:29,640 --> 00:37:32,369
now we can sniff the login traffic and

835
00:37:32,369 --> 00:37:34,020
you can see the password and all that

836
00:37:34,020 --> 00:37:44,300
good stuff special user login quests

837
00:37:44,300 --> 00:37:47,099
there we go so there's the there's the

838
00:37:47,099 --> 00:37:49,950
actual login you can see the instead of

839
00:37:49,950 --> 00:37:51,599
just submitting a form like in the old

840
00:37:51,599 --> 00:37:53,190
days now we have to deal with things

841
00:37:53,190 --> 00:37:57,030
like the NTC surf token and just other

842
00:37:57,030 --> 00:37:59,820
other things that just would be a pain

843
00:37:59,820 --> 00:38:01,589
if we were trying to automate this was

844
00:38:01,589 --> 00:38:03,240
just like a series of curl requests

845
00:38:03,240 --> 00:38:04,800
which is why you don't do that anymore

846
00:38:04,800 --> 00:38:08,099
and it's really why we need to simulate

847
00:38:08,099 --> 00:38:09,030
or emulate

848
00:38:09,030 --> 00:38:11,130
user actions to meaningfully interact

849
00:38:11,130 --> 00:38:14,820
with with modern web pages this is a

850
00:38:14,820 --> 00:38:21,600
relatively simple example of the of

851
00:38:21,600 --> 00:38:24,390
navigating into a into into a web

852
00:38:24,390 --> 00:38:26,700
application and they can get much much

853
00:38:26,700 --> 00:38:29,160
more involved and and you wouldn't want

854
00:38:29,160 --> 00:38:31,410
to have to actually reproduce every

855
00:38:31,410 --> 00:38:34,320
transaction as I'll show in a second so

856
00:38:34,320 --> 00:38:36,210
a more complex example that I have run

857
00:38:36,210 --> 00:38:49,440
into and what is going on there okay so

858
00:38:49,440 --> 00:38:53,850
a motorist example is handling SSO so

859
00:38:53,850 --> 00:38:57,270
this is something that I have seen where

860
00:38:57,270 --> 00:39:00,870
I wanted to I was trying to develop a an

861
00:39:00,870 --> 00:39:03,630
exploit for an application on an

862
00:39:03,630 --> 00:39:06,170
engagement and part of that involved

863
00:39:06,170 --> 00:39:09,860
involved having to have valid

864
00:39:09,860 --> 00:39:12,660
SSO response token assigned a token from

865
00:39:12,660 --> 00:39:14,760
the identity provider you can present to

866
00:39:14,760 --> 00:39:16,320
the service provider on the left and

867
00:39:16,320 --> 00:39:18,300
that only works once once you've sent it

868
00:39:18,300 --> 00:39:20,400
there the service providers not going to

869
00:39:20,400 --> 00:39:23,400
not going to want to see it again so the

870
00:39:23,400 --> 00:39:26,220
use case for the proxy here in this case

871
00:39:26,220 --> 00:39:29,330
was to halt the transaction at the

872
00:39:29,330 --> 00:39:33,210
identity provider response token we

873
00:39:33,210 --> 00:39:36,210
wanted to say we get this token and we

874
00:39:36,210 --> 00:39:37,290
don't want to do anything else with it

875
00:39:37,290 --> 00:39:39,060
we want to just quit we don't care about

876
00:39:39,060 --> 00:39:40,200
it anymore we want to be able to write

877
00:39:40,200 --> 00:39:42,060
it to a file send it to another script

878
00:39:42,060 --> 00:39:43,740
that's going to try to develop an

879
00:39:43,740 --> 00:39:47,600
exploit using this token as part of its

880
00:39:47,600 --> 00:39:51,210
as part of its configuration so we

881
00:39:51,210 --> 00:39:53,280
needed to actually tap through the token

882
00:39:53,280 --> 00:39:54,930
in a state where it hadn't been used and

883
00:39:54,930 --> 00:39:57,180
this was stupid simple to do with burp

884
00:39:57,180 --> 00:40:00,240
all we had to do is go to the intercept

885
00:40:00,240 --> 00:40:02,220
configuration intercept a client request

886
00:40:02,220 --> 00:40:04,620
it matches some boolean conditions

887
00:40:04,620 --> 00:40:08,040
that's made up that's a made-up URL the

888
00:40:08,040 --> 00:40:09,990
login be two-sample don't don't try to

889
00:40:09,990 --> 00:40:13,500
figure out what application this was but

890
00:40:13,500 --> 00:40:15,270
it looked like this and so every time

891
00:40:15,270 --> 00:40:17,610
that we would do this we'd end up with

892
00:40:17,610 --> 00:40:21,150
the request just just paused for for

893
00:40:21,150 --> 00:40:22,500
interception in

894
00:40:22,500 --> 00:40:25,670
the probably know the burp intercept

895
00:40:25,670 --> 00:40:26,850
window

896
00:40:26,850 --> 00:40:29,310
we just have intercept on and options to

897
00:40:29,310 --> 00:40:31,050
intercept client request was set here

898
00:40:31,050 --> 00:40:32,760
and then it would just show up here we

899
00:40:32,760 --> 00:40:34,230
could ignore it and selenium would

900
00:40:34,230 --> 00:40:39,170
timeout and we could go on our merry way

901
00:40:42,680 --> 00:40:46,730
okay so now some pitfalls and gotchas of

902
00:40:46,730 --> 00:40:49,890
selenium so timing is big one dealing

903
00:40:49,890 --> 00:40:52,800
with timing issues I see that it could

904
00:40:52,800 --> 00:40:55,470
be an issue or for me as well so I'll

905
00:40:55,470 --> 00:40:57,780
try to get through this defining what

906
00:40:57,780 --> 00:41:01,050
you want to actually happen is it's

907
00:41:01,050 --> 00:41:03,840
important basically the way that

908
00:41:03,840 --> 00:41:06,690
selenium will proceed with a series of

909
00:41:06,690 --> 00:41:08,760
steps is it waits for an element to

910
00:41:08,760 --> 00:41:13,860
appear you know actually

911
00:41:13,860 --> 00:41:15,390
yeah just summarize these and then get

912
00:41:15,390 --> 00:41:18,540
into it so timing xmlhttprequest

913
00:41:18,540 --> 00:41:20,730
anything a synchronous asynchronous

914
00:41:20,730 --> 00:41:23,090
scripts i can trip you up as well

915
00:41:23,090 --> 00:41:24,990
anything that visually looks like an

916
00:41:24,990 --> 00:41:28,140
element fading in or being ghosted can

917
00:41:28,140 --> 00:41:30,990
also be a problem and composite actions

918
00:41:30,990 --> 00:41:32,580
things that expect you to like mouse

919
00:41:32,580 --> 00:41:34,290
over a link before you click them and

920
00:41:34,290 --> 00:41:35,370
these are all things that we have we

921
00:41:35,370 --> 00:41:36,870
have ways of dealing with and finally

922
00:41:36,870 --> 00:41:38,790
bought detectors AKA people trying to

923
00:41:38,790 --> 00:41:40,350
stop you from doing exactly what you're

924
00:41:40,350 --> 00:41:43,380
trying to do in frames which are kind of

925
00:41:43,380 --> 00:41:45,570
boring so timing or we run into this

926
00:41:45,570 --> 00:41:47,010
suppose we're implementing a tool like

927
00:41:47,010 --> 00:41:49,350
HTTP screenshot which is an existing

928
00:41:49,350 --> 00:41:53,970
tool that will take like and map scan

929
00:41:53,970 --> 00:41:57,660
result and we'll just crawl every page

930
00:41:57,660 --> 00:41:59,670
to just get a screenshot of it and just

931
00:41:59,670 --> 00:42:02,370
see what's there that means that it has

932
00:42:02,370 --> 00:42:04,590
to actually load each page and what do

933
00:42:04,590 --> 00:42:08,340
we mean by load exactly when we actually

934
00:42:08,340 --> 00:42:10,290
load a page a number of things are

935
00:42:10,290 --> 00:42:12,360
obviously going on some of which include

936
00:42:12,360 --> 00:42:16,890
scripts and those scripts can be kind of

937
00:42:16,890 --> 00:42:19,560
time bombs that may change how the page

938
00:42:19,560 --> 00:42:21,570
actually looks and what we mean by load

939
00:42:21,570 --> 00:42:23,730
might not be what the browser means by

940
00:42:23,730 --> 00:42:25,230
load as I'll illustrate in a second

941
00:42:25,230 --> 00:42:27,180
ultimately this is undecidable it's the

942
00:42:27,180 --> 00:42:29,010
halting problem you can't actually tell

943
00:42:29,010 --> 00:42:31,350
when the when the page has finished

944
00:42:31,350 --> 00:42:32,820
loading there's no way to tell whether

945
00:42:32,820 --> 00:42:35,340
it will finish loading or what what you

946
00:42:35,340 --> 00:42:36,240
want

947
00:42:36,240 --> 00:42:37,980
there's no way to do this universally

948
00:42:37,980 --> 00:42:39,060
and I just hope to provide you with the

949
00:42:39,060 --> 00:42:40,980
tools to do it on a case-by-case basis

950
00:42:40,980 --> 00:42:43,350
there's a quick example suppose our

951
00:42:43,350 --> 00:42:45,810
little selenium tester user is searching

952
00:42:45,810 --> 00:42:49,380
for a job as a geologist and he wants to

953
00:42:49,380 --> 00:42:51,960
just crawl the he wants to crawl this

954
00:42:51,960 --> 00:42:54,390
site this job search site and just get a

955
00:42:54,390 --> 00:42:56,310
snapshot of current geologists jobs

956
00:42:56,310 --> 00:42:59,250
every day or so so he might say that

957
00:42:59,250 --> 00:43:01,470
okay the page the page is loaded when it

958
00:43:01,470 --> 00:43:05,520
looks like this but the script the

959
00:43:05,520 --> 00:43:07,200
selenium script might say it's loaded

960
00:43:07,200 --> 00:43:08,550
when it looks like this I mean more

961
00:43:08,550 --> 00:43:10,170
content is loaded right this is what you

962
00:43:10,170 --> 00:43:19,010
want isn't it okay so probably not so

963
00:43:19,010 --> 00:43:21,420
let's talk about the tools the idea is

964
00:43:21,420 --> 00:43:22,500
to deal with that kind of problem

965
00:43:22,500 --> 00:43:25,110
implicit weights or the default the

966
00:43:25,110 --> 00:43:27,030
original and still the most common way

967
00:43:27,030 --> 00:43:31,050
of handling elements in a page it's just

968
00:43:31,050 --> 00:43:33,540
a method that you call once in your

969
00:43:33,540 --> 00:43:35,730
whole script just the time out in

970
00:43:35,730 --> 00:43:38,520
seconds that says I want to wait for up

971
00:43:38,520 --> 00:43:41,040
to this many seconds to find any element

972
00:43:41,040 --> 00:43:43,380
that I refer to in a page and just fail

973
00:43:43,380 --> 00:43:46,440
if it if you don't find it so the way

974
00:43:46,440 --> 00:43:48,980
this works is it will the implicit wait

975
00:43:48,980 --> 00:43:52,260
method will say that we're going to pull

976
00:43:52,260 --> 00:43:54,330
the the Dom until the desired element

977
00:43:54,330 --> 00:43:57,330
exists every I think half second and as

978
00:43:57,330 --> 00:43:58,740
I mentioned this is frequently not good

979
00:43:58,740 --> 00:44:00,330
enough something that can go wrong with

980
00:44:00,330 --> 00:44:04,500
this that you may see is this error

981
00:44:04,500 --> 00:44:07,050
element is not visible and your reaction

982
00:44:07,050 --> 00:44:09,660
may be something like that what's going

983
00:44:09,660 --> 00:44:12,120
on I can see the element is visible why

984
00:44:12,120 --> 00:44:15,090
can't I interact with it and this is

985
00:44:15,090 --> 00:44:17,790
this is often something that props up

986
00:44:17,790 --> 00:44:21,660
when an element is ghosted or fades in

987
00:44:21,660 --> 00:44:24,330
and at the moment that selenium sees it

988
00:44:24,330 --> 00:44:26,250
it's not actually interactable if you

989
00:44:26,250 --> 00:44:28,350
clicked on it nothing would happen but

990
00:44:28,350 --> 00:44:29,340
you don't realize that because the

991
00:44:29,340 --> 00:44:31,110
timing window is so small so the

992
00:44:31,110 --> 00:44:35,130
solution to this is a some helper

993
00:44:35,130 --> 00:44:37,410
methods and libraries a webdriver wait

994
00:44:37,410 --> 00:44:39,900
and expected conditions and I realize

995
00:44:39,900 --> 00:44:44,490
this this is pretty ugly syntax the good

996
00:44:44,490 --> 00:44:46,410
news though is that you only really have

997
00:44:46,410 --> 00:44:48,450
to it's really kind of a one-trick pony

998
00:44:48,450 --> 00:44:50,020
here so you noticed

999
00:44:50,020 --> 00:44:51,340
you're calling you're calling webdriver

1000
00:44:51,340 --> 00:44:55,450
wait with WD as an argument it's not a

1001
00:44:55,450 --> 00:44:58,960
method of WD and then you wait until the

1002
00:44:58,960 --> 00:45:00,940
expected condition element is clickable

1003
00:45:00,940 --> 00:45:06,040
by ID it's almost it's almost natural

1004
00:45:06,040 --> 00:45:11,830
language which makes it hideous but you

1005
00:45:11,830 --> 00:45:14,650
can probably see where where it's going

1006
00:45:14,650 --> 00:45:16,450
with this it's waiting for an element to

1007
00:45:16,450 --> 00:45:18,100
meet some condition and the expected

1008
00:45:18,100 --> 00:45:21,640
conditions library and then then and

1009
00:45:21,640 --> 00:45:23,320
only then once the password element is

1010
00:45:23,320 --> 00:45:25,990
clickable will it send keys to the

1011
00:45:25,990 --> 00:45:28,330
password element and again

1012
00:45:28,330 --> 00:45:30,730
tab-completion in these these sample

1013
00:45:30,730 --> 00:45:33,070
scripts that I have is super handy

1014
00:45:33,070 --> 00:45:37,660
because you can you can just do a EC dot

1015
00:45:37,660 --> 00:45:40,570
tab tab to see all the conditions and of

1016
00:45:40,570 --> 00:45:42,940
course you can also just you know read

1017
00:45:42,940 --> 00:45:50,800
the documentation he does that a

1018
00:45:50,800 --> 00:45:53,830
composite actions selenium actions

1019
00:45:53,830 --> 00:45:56,260
versus user actions these can differ in

1020
00:45:56,260 --> 00:45:59,620
sometimes subtle ways one one example

1021
00:45:59,620 --> 00:46:01,350
which is probably pretty familiar is

1022
00:46:01,350 --> 00:46:05,140
onmousedown elements that will react

1023
00:46:05,140 --> 00:46:08,320
when you press the mouse down when you

1024
00:46:08,320 --> 00:46:10,000
click on them but before you release in

1025
00:46:10,000 --> 00:46:11,530
that window something on the page

1026
00:46:11,530 --> 00:46:15,310
changes also onmouseover modifying the

1027
00:46:15,310 --> 00:46:17,080
Dom can result in stale elements we'll

1028
00:46:17,080 --> 00:46:19,600
just do a quick example here of the

1029
00:46:19,600 --> 00:46:21,490
unmask over from something that probably

1030
00:46:21,490 --> 00:46:29,740
everyone's familiar with I'll just reuse

1031
00:46:29,740 --> 00:46:32,590
the selenium session here so it's just

1032
00:46:32,590 --> 00:46:37,390
the do a Google search for wiki and it's

1033
00:46:37,390 --> 00:46:39,130
searching Yahoo because it's because

1034
00:46:39,130 --> 00:46:42,900
it's horrible

1035
00:46:49,020 --> 00:46:52,020
restore the connection may have to skip

1036
00:46:52,020 --> 00:46:55,569
should employers just being for Blissett

1037
00:46:55,569 --> 00:47:00,930
oh maybe I like to intercept on yeah

1038
00:47:03,779 --> 00:47:07,599
okay so probably all of you I could seen

1039
00:47:07,599 --> 00:47:09,430
this behavior but the way that it works

1040
00:47:09,430 --> 00:47:13,569
is you notice that I close the developer

1041
00:47:13,569 --> 00:47:17,230
tools google seems to give you the lower

1042
00:47:17,230 --> 00:47:18,880
left hand corner actually that's

1043
00:47:18,880 --> 00:47:20,799
probably pretty illegible the link is to

1044
00:47:20,799 --> 00:47:22,930
Wikipedia we click and hold on it we can

1045
00:47:22,930 --> 00:47:24,670
see that the link has now changed to

1046
00:47:24,670 --> 00:47:31,349
google.ca and the way that worked which

1047
00:47:31,349 --> 00:47:34,470
if we inspect it and inspect the element

1048
00:47:34,470 --> 00:47:36,789
we can see we can actually see the

1049
00:47:36,789 --> 00:47:39,430
little JavaScript snippet that rewrites

1050
00:47:39,430 --> 00:47:41,380
the URL so that's an example of how a

1051
00:47:41,380 --> 00:47:43,539
page can change on the fly and if you

1052
00:47:43,539 --> 00:47:44,980
just have you just told your selenium

1053
00:47:44,980 --> 00:47:46,690
script to click on it I think in this

1054
00:47:46,690 --> 00:47:48,910
case it actually will register the mouse

1055
00:47:48,910 --> 00:47:50,980
down but it won't register a mouse over

1056
00:47:50,980 --> 00:47:55,839
so in some examples that will in some

1057
00:47:55,839 --> 00:47:58,240
cases some pages clicking on a link

1058
00:47:58,240 --> 00:48:00,279
without mousing over it will result in

1059
00:48:00,279 --> 00:48:01,690
different behavior from clicking on the

1060
00:48:01,690 --> 00:48:04,119
link just using the click method so

1061
00:48:04,119 --> 00:48:05,500
listeners can react in different ways

1062
00:48:05,500 --> 00:48:07,930
and there's there's a way to build

1063
00:48:07,930 --> 00:48:09,970
composite actions using what's called

1064
00:48:09,970 --> 00:48:11,410
action change in flame it's another

1065
00:48:11,410 --> 00:48:14,859
library the long difficult to remember a

1066
00:48:14,859 --> 00:48:16,930
name that basically but it's really easy

1067
00:48:16,930 --> 00:48:18,549
to use you just import it to generate

1068
00:48:18,549 --> 00:48:20,770
you pre configure an action and then you

1069
00:48:20,770 --> 00:48:23,500
move to the element that's the mouse

1070
00:48:23,500 --> 00:48:24,880
over and then you click it and then

1071
00:48:24,880 --> 00:48:26,140
every time you want to run that action

1072
00:48:26,140 --> 00:48:27,940
you perform it just your action that

1073
00:48:27,940 --> 00:48:29,710
perform there's different ways of using

1074
00:48:29,710 --> 00:48:33,089
this this is just one of the simplest

1075
00:48:33,089 --> 00:48:35,799
and when you do that a lot of the times

1076
00:48:35,799 --> 00:48:37,630
or some of the time anyway you know

1077
00:48:37,630 --> 00:48:41,349
you'll go WTF element reference

1078
00:48:41,349 --> 00:48:43,869
exception all that happened was that the

1079
00:48:43,869 --> 00:48:46,270
page changed in some way and basically

1080
00:48:46,270 --> 00:48:48,309
you just needs to find the element again

1081
00:48:48,309 --> 00:48:50,140
after mousing over it and have another

1082
00:48:50,140 --> 00:48:53,069
demo that we may not have time for but

1083
00:48:53,069 --> 00:48:55,150
we'll see

1084
00:48:55,150 --> 00:48:58,779
invite me to show ya mouse over demo in

1085
00:48:58,779 --> 00:49:00,970
a minute bot detect

1086
00:49:00,970 --> 00:49:02,829
CAPTCHAs obviously the main way that

1087
00:49:02,829 --> 00:49:06,039
BOTS give the detective silent alarm

1088
00:49:06,039 --> 00:49:08,559
style detectors like Bach guard is

1089
00:49:08,559 --> 00:49:09,970
something that Google uses these can

1090
00:49:09,970 --> 00:49:11,680
work by browser fingerprinting these can

1091
00:49:11,680 --> 00:49:15,339
trip up a selenium they will they employ

1092
00:49:15,339 --> 00:49:19,240
heuristics to detect how user actual

1093
00:49:19,240 --> 00:49:21,869
interactive user sessions differ from

1094
00:49:21,869 --> 00:49:25,869
from selenium or otherwise scripted

1095
00:49:25,869 --> 00:49:31,900
sessions main thing to remember here is

1096
00:49:31,900 --> 00:49:33,339
that mobile clients may have different

1097
00:49:33,339 --> 00:49:38,859
and yes we are out of time so I'm not

1098
00:49:38,859 --> 00:49:40,839
going to talk about frames I just want

1099
00:49:40,839 --> 00:49:42,220
to briefly mention phantom j/s because

1100
00:49:42,220 --> 00:49:43,930
he balls asked me about this in relation

1101
00:49:43,930 --> 00:49:46,029
to browser automation it's just another

1102
00:49:46,029 --> 00:49:50,019
approach so the thing to know about

1103
00:49:50,019 --> 00:49:51,940
phantoms is the selenium and webdriver

1104
00:49:51,940 --> 00:49:53,619
together driver browser

1105
00:49:53,619 --> 00:49:56,349
whereas phantom j/s is a browser it's

1106
00:49:56,349 --> 00:49:58,029
faster and less resource-intensive has

1107
00:49:58,029 --> 00:49:59,589
some advantages and disadvantages the

1108
00:49:59,589 --> 00:50:00,910
main disadvantage is the maintainer

1109
00:50:00,910 --> 00:50:03,819
stepped down last April citing headless

1110
00:50:03,819 --> 00:50:06,910
chrome is a likely replacement so

1111
00:50:06,910 --> 00:50:09,430
probably the way to go is to use

1112
00:50:09,430 --> 00:50:12,160
webdriver for your future tests this is

1113
00:50:12,160 --> 00:50:14,769
just a quick example showing that chrome

1114
00:50:14,769 --> 00:50:18,039
Chrome and Firefox scripts are almost

1115
00:50:18,039 --> 00:50:21,849
identical adapting from one browser to

1116
00:50:21,849 --> 00:50:24,759
another is super easy when you don't use

1117
00:50:24,759 --> 00:50:26,259
selenium whenever you don't have to I

1118
00:50:26,259 --> 00:50:27,460
know that doesn't sound like a ringing

1119
00:50:27,460 --> 00:50:28,869
endorsement after everything but it's

1120
00:50:28,869 --> 00:50:31,390
not an API replacement the browser

1121
00:50:31,390 --> 00:50:33,400
automation is very slow resource

1122
00:50:33,400 --> 00:50:35,680
intensive and it's the last resort it's

1123
00:50:35,680 --> 00:50:37,599
often a resort that we do have to come

1124
00:50:37,599 --> 00:50:40,000
to but don't use selenium unless you

1125
00:50:40,000 --> 00:50:42,750
actually need to do web scraping and

1126
00:50:42,750 --> 00:50:44,890
here's some references further reading

1127
00:50:44,890 --> 00:50:48,089
contact info feel free to email me

1128
00:50:48,089 --> 00:50:52,569
that's my personal email everything I

1129
00:50:52,569 --> 00:50:58,210
hear is on is on my github yeah that's

1130
00:50:58,210 --> 00:51:00,279
pretty much it stay on the light side

1131
00:51:00,279 --> 00:51:04,890
but here know how to use the dark side

