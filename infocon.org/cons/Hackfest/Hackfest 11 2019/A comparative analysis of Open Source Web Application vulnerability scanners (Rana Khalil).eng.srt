1
00:00:00,000 --> 00:00:02,460
um so thank you for attending my talk

2
00:00:02,460 --> 00:00:04,620
I'll start off with a little bit about

3
00:00:04,620 --> 00:00:09,210
myself so this is me every time I visit

4
00:00:09,210 --> 00:00:11,610
a new city or a new country I take this

5
00:00:11,610 --> 00:00:13,880
exact picture with my Palestinian flag

6
00:00:13,880 --> 00:00:17,160
and this if it's not obvious because the

7
00:00:17,160 --> 00:00:19,770
picture was taken in a bad way but this

8
00:00:19,770 --> 00:00:22,230
is in Beijing it's one of the latest one

9
00:00:22,230 --> 00:00:24,750
of my latest travels it's in Beijing and

10
00:00:24,750 --> 00:00:26,580
it's on top of the Great Wall of China

11
00:00:26,580 --> 00:00:29,640
and it's my first time in Quebec so I'm

12
00:00:29,640 --> 00:00:31,260
looking forward to adding a new picture

13
00:00:31,260 --> 00:00:33,630
to my collection if the weather is

14
00:00:33,630 --> 00:00:37,739
better yeah it's I'm literally afraid of

15
00:00:37,739 --> 00:00:41,430
getting blown away okay so when I'm not

16
00:00:41,430 --> 00:00:43,140
traveling I work as a security

17
00:00:43,140 --> 00:00:46,890
assessment analyst what that entails is

18
00:00:46,890 --> 00:00:49,230
I do of Honor ability assessments on web

19
00:00:49,230 --> 00:00:51,390
applications which really ties in with

20
00:00:51,390 --> 00:00:54,300
the research that I did a year ago in my

21
00:00:54,300 --> 00:00:56,219
Master's under the supervision of dr.

22
00:00:56,219 --> 00:00:58,410
Carlyle Adams and that's the topic that

23
00:00:58,410 --> 00:00:59,480
I'll speak about today

24
00:00:59,480 --> 00:01:03,619
so just quick word about my supervisor

25
00:01:03,619 --> 00:01:06,390
he's pretty famous in the cryptography

26
00:01:06,390 --> 00:01:08,189
community I'm not so sure about the

27
00:01:08,189 --> 00:01:10,260
security community but if you're ever in

28
00:01:10,260 --> 00:01:12,780
the same place as him please do strike

29
00:01:12,780 --> 00:01:14,820
up a conversation with him he's not only

30
00:01:14,820 --> 00:01:16,950
one of the nicest guys you'll meet but

31
00:01:16,950 --> 00:01:19,560
also one of the smartest he created an

32
00:01:19,560 --> 00:01:21,330
algorithm called cast which is used in

33
00:01:21,330 --> 00:01:23,850
many of the systems it competed with the

34
00:01:23,850 --> 00:01:25,950
Advanced Encryption standard it came in

35
00:01:25,950 --> 00:01:27,360
six but the Advanced Encryption standard

36
00:01:27,360 --> 00:01:30,060
obviously one and got standardized so

37
00:01:30,060 --> 00:01:31,829
yeah now did you talk to him if you see

38
00:01:31,829 --> 00:01:35,460
him I spoke about my research in several

39
00:01:35,460 --> 00:01:39,180
places and every time I would say it in

40
00:01:39,180 --> 00:01:41,670
a way that the research was conducted so

41
00:01:41,670 --> 00:01:42,689
I would go through the entire

42
00:01:42,689 --> 00:01:45,390
methodology how it was done and then the

43
00:01:45,390 --> 00:01:47,759
excruciating details of the results of

44
00:01:47,759 --> 00:01:50,759
the research um and I usually felt like

45
00:01:50,759 --> 00:01:54,090
I lost the audience by the end of it or

46
00:01:54,090 --> 00:01:55,979
at least half the audience by the end of

47
00:01:55,979 --> 00:01:59,729
it so instead for today I'm going to say

48
00:01:59,729 --> 00:02:01,920
it in a form of a story so I had a lot

49
00:02:01,920 --> 00:02:03,930
of fun creating these slides I hope it's

50
00:02:03,930 --> 00:02:05,759
fun for you guys to listen to the

51
00:02:05,759 --> 00:02:10,440
presentation as well okay so this is

52
00:02:10,440 --> 00:02:13,920
Johnny he's fresh off the boat

53
00:02:13,920 --> 00:02:16,830
bad student well he just graduated from

54
00:02:16,830 --> 00:02:18,480
his computer science degree where he

55
00:02:18,480 --> 00:02:20,900
learned how to develop web applications

56
00:02:20,900 --> 00:02:23,400
and because he was top of his class he

57
00:02:23,400 --> 00:02:26,580
got hired at a company right away and

58
00:02:26,580 --> 00:02:29,700
the first thing that has boss told him

59
00:02:29,700 --> 00:02:31,500
considering all the recent breaches is

60
00:02:31,500 --> 00:02:34,380
that you need to develop secure code

61
00:02:34,380 --> 00:02:38,040
right and the university system as usual

62
00:02:38,040 --> 00:02:40,530
has failed Johnny and hasn't taught him

63
00:02:40,530 --> 00:02:42,810
any secure coding practices or security

64
00:02:42,810 --> 00:02:45,989
in general so Johnny did what every

65
00:02:45,989 --> 00:02:48,120
computer science student would do if

66
00:02:48,120 --> 00:02:50,670
they didn't know how to perform a

67
00:02:50,670 --> 00:02:52,319
certain thing anyone want to guess what

68
00:02:52,319 --> 00:02:59,549
that is exactly whatever and yes so he

69
00:02:59,549 --> 00:03:01,080
googled web application security and

70
00:03:01,080 --> 00:03:02,850
these results are actually real I just

71
00:03:02,850 --> 00:03:07,380
omitted the scanner names so yeah he

72
00:03:07,380 --> 00:03:09,120
found the answers that he was looking

73
00:03:09,120 --> 00:03:12,209
for so commercial scanner X ensures web

74
00:03:12,209 --> 00:03:14,069
application security by securing your

75
00:03:14,069 --> 00:03:15,959
website and web applications against

76
00:03:15,959 --> 00:03:17,790
hacker attacks and the results become

77
00:03:17,790 --> 00:03:20,070
even more promising commercial scanner

78
00:03:20,070 --> 00:03:22,470
why dad accurate web vulnerability

79
00:03:22,470 --> 00:03:24,180
scanner to identify vulnerabilities in

80
00:03:24,180 --> 00:03:25,620
your websites

81
00:03:25,620 --> 00:03:27,600
and not only is there commercial ones

82
00:03:27,600 --> 00:03:29,489
there's also open source ones so Johnny

83
00:03:29,489 --> 00:03:30,870
doesn't even have to convince his

84
00:03:30,870 --> 00:03:33,570
employer to buy a 20 K scanner he could

85
00:03:33,570 --> 00:03:36,390
just use an open source one so he had a

86
00:03:36,390 --> 00:03:38,910
genius idea or what seem to be genius at

87
00:03:38,910 --> 00:03:41,820
the time that all he has to do is

88
00:03:41,820 --> 00:03:43,739
develop code which he already knows what

89
00:03:43,739 --> 00:03:45,840
to do how to do it from university and

90
00:03:45,840 --> 00:03:48,450
then he had to he runs the web

91
00:03:48,450 --> 00:03:50,250
application vulnerability scanner on his

92
00:03:50,250 --> 00:03:52,799
deployed application and it looks for

93
00:03:52,799 --> 00:03:54,810
vulnerabilities if it doesn't find them

94
00:03:54,810 --> 00:03:56,819
then he's good to go his application is

95
00:03:56,819 --> 00:04:00,000
bulletproof if it's not if it does find

96
00:04:00,000 --> 00:04:01,680
vulnerabilities he'll go through the

97
00:04:01,680 --> 00:04:04,019
loop cycle again he'll make changes to

98
00:04:04,019 --> 00:04:05,970
his go to remediate the vulnerabilities

99
00:04:05,970 --> 00:04:08,010
run his web application vulnerability

100
00:04:08,010 --> 00:04:09,569
scanner on it again look for

101
00:04:09,569 --> 00:04:11,459
vulnerabilities and go through the

102
00:04:11,459 --> 00:04:14,459
entire loop until no Vanar abilities are

103
00:04:14,459 --> 00:04:15,870
found and because no vulnerabilities are

104
00:04:15,870 --> 00:04:18,358
found at the end then his application is

105
00:04:18,358 --> 00:04:21,600
bulletproof right and so that worked out

106
00:04:21,600 --> 00:04:25,169
great for Johnny C and he thought he's a

107
00:04:25,169 --> 00:04:27,750
frickin genius he

108
00:04:27,750 --> 00:04:31,170
security security analysts and security

109
00:04:31,170 --> 00:04:32,760
specialists to his LinkedIn title after

110
00:04:32,760 --> 00:04:35,610
this because apparently he figured out

111
00:04:35,610 --> 00:04:38,040
how to then test had to do vulnerability

112
00:04:38,040 --> 00:04:39,540
assessments how to do security

113
00:04:39,540 --> 00:04:42,510
assessments and so on just by just by

114
00:04:42,510 --> 00:04:48,840
running these tools right and so when

115
00:04:48,840 --> 00:04:51,210
the organization decided to hire

116
00:04:51,210 --> 00:04:53,670
external consultants to perform a

117
00:04:53,670 --> 00:04:55,830
vulnerability assessment or a pen test

118
00:04:55,830 --> 00:04:59,580
they're different so apprentice on on

119
00:04:59,580 --> 00:05:01,560
the organization and that included

120
00:05:01,560 --> 00:05:04,200
johnny's web application it founds so

121
00:05:04,200 --> 00:05:05,760
many vulnerabilities and notice over

122
00:05:05,760 --> 00:05:10,440
here the infinity at the end and so this

123
00:05:10,440 --> 00:05:13,560
obviously left Johnny very confused he

124
00:05:13,560 --> 00:05:15,570
was like and with so many questions

125
00:05:15,570 --> 00:05:17,700
like how do these stools work because he

126
00:05:17,700 --> 00:05:18,630
ran the tools

127
00:05:18,630 --> 00:05:21,390
on his on his web application and they

128
00:05:21,390 --> 00:05:23,730
didn't find any vulnerabilities so you

129
00:05:23,730 --> 00:05:26,870
know why is that is there any special

130
00:05:26,870 --> 00:05:28,740
configuration that these tools require

131
00:05:28,740 --> 00:05:30,600
was it an error from Johnny on how he

132
00:05:30,600 --> 00:05:32,610
ran the tools and that's why the

133
00:05:32,610 --> 00:05:34,520
scanners didn't find any vulnerabilities

134
00:05:34,520 --> 00:05:37,320
how much coverage do they achieve so the

135
00:05:37,320 --> 00:05:39,030
way the scanners work is that they crawl

136
00:05:39,030 --> 00:05:40,860
your web application and then they look

137
00:05:40,860 --> 00:05:42,690
for vulnerabilities if they're not

138
00:05:42,690 --> 00:05:44,460
crawling the entire application then

139
00:05:44,460 --> 00:05:45,720
they're not getting to the pages that

140
00:05:45,720 --> 00:05:48,210
are vulnerable right and so was it a

141
00:05:48,210 --> 00:05:51,419
crawling coverage issue what

142
00:05:51,419 --> 00:05:53,070
vulnerabilities can the scanners find

143
00:05:53,070 --> 00:05:54,300
and more importantly what

144
00:05:54,300 --> 00:05:58,500
vulnerabilities can they not find and so

145
00:05:58,500 --> 00:06:00,510
Johnny decided to embark on a research

146
00:06:00,510 --> 00:06:02,850
journey to figure out the answers to his

147
00:06:02,850 --> 00:06:07,680
questions and sorry and the first and

148
00:06:07,680 --> 00:06:09,390
the first question was how do these

149
00:06:09,390 --> 00:06:11,220
scanners work what are they made up of

150
00:06:11,220 --> 00:06:13,169
and at a high level overview they're

151
00:06:13,169 --> 00:06:15,360
made up of three components the crawler

152
00:06:15,360 --> 00:06:17,220
module the attacker module and the

153
00:06:17,220 --> 00:06:19,620
analysis module the crawler module is

154
00:06:19,620 --> 00:06:21,570
used to map the application so what it

155
00:06:21,570 --> 00:06:24,630
does is it starts off with a URL or a

156
00:06:24,630 --> 00:06:27,360
set of URLs that are taken as seeds of

157
00:06:27,360 --> 00:06:28,440
the application

158
00:06:28,440 --> 00:06:30,330
it starts off there and it visits any

159
00:06:30,330 --> 00:06:33,030
links and redirects that it sees from

160
00:06:33,030 --> 00:06:35,970
these URLs so it essentially calls the

161
00:06:35,970 --> 00:06:39,240
application and maps it out and makes a

162
00:06:39,240 --> 00:06:41,790
and makes a point of

163
00:06:41,790 --> 00:06:43,590
any input factors that are available on

164
00:06:43,590 --> 00:06:45,480
these links and then there's the

165
00:06:45,480 --> 00:06:47,220
attacker module which takes the links

166
00:06:47,220 --> 00:06:49,380
and input vectors that the crawler

167
00:06:49,380 --> 00:06:52,110
module found and then it crafts

168
00:06:52,110 --> 00:06:55,380
malicious payloads to insert into these

169
00:06:55,380 --> 00:06:58,320
input vectors and then the analysis

170
00:06:58,320 --> 00:07:00,420
module takes the responses from the

171
00:07:00,420 --> 00:07:03,900
attacker module and analyzes the

172
00:07:03,900 --> 00:07:05,370
response in order to determine if a

173
00:07:05,370 --> 00:07:08,460
vulnerability actually exists okay so

174
00:07:08,460 --> 00:07:10,680
now we know how these scanners work at a

175
00:07:10,680 --> 00:07:13,500
high-level overview how should they be

176
00:07:13,500 --> 00:07:15,960
used because again the way that Johnny

177
00:07:15,960 --> 00:07:18,990
used them I ended up not finding any

178
00:07:18,990 --> 00:07:21,750
vulnerabilities and the pen tests

179
00:07:21,750 --> 00:07:23,430
reported so many of the vulnerabilities

180
00:07:23,430 --> 00:07:26,940
so the first option is point-and-shoot

181
00:07:26,940 --> 00:07:29,760
and that's the the option that is

182
00:07:29,760 --> 00:07:31,830
usually pushed by vendors and advertised

183
00:07:31,830 --> 00:07:34,050
by vendors and unfortunately the option

184
00:07:34,050 --> 00:07:37,260
that most people use and the idea is

185
00:07:37,260 --> 00:07:40,200
that you give the scanner the URL of

186
00:07:40,200 --> 00:07:41,970
your website or the domain name and then

187
00:07:41,970 --> 00:07:43,800
you ask it to scan the site so there's

188
00:07:43,800 --> 00:07:45,990
very minimal human interference with the

189
00:07:45,990 --> 00:07:48,840
whole entire process all you have to do

190
00:07:48,840 --> 00:07:50,700
is give it a URL of your application and

191
00:07:50,700 --> 00:07:53,850
then it asked it to scan the site and

192
00:07:53,850 --> 00:07:57,000
it's shocking how many people use these

193
00:07:57,000 --> 00:07:59,280
scanners this way and it's actually it's

194
00:07:59,280 --> 00:08:03,300
pretty sad but and we'll see why that is

195
00:08:03,300 --> 00:08:07,140
in a bit the second option which is a

196
00:08:07,140 --> 00:08:08,040
little bit better

197
00:08:08,040 --> 00:08:12,060
it's called trained or configured and it

198
00:08:12,060 --> 00:08:14,640
pretty much entails a list of steps that

199
00:08:14,640 --> 00:08:17,250
you have to do in order to train your

200
00:08:17,250 --> 00:08:19,440
scanner and configure your scanner to

201
00:08:19,440 --> 00:08:21,000
maximize its crawling coverage and

202
00:08:21,000 --> 00:08:23,970
vulnerability detection and one of these

203
00:08:23,970 --> 00:08:26,100
things is setting the scanner and proxy

204
00:08:26,100 --> 00:08:28,080
mode so if the scanner has a proxy

205
00:08:28,080 --> 00:08:31,800
component what you would do is is put it

206
00:08:31,800 --> 00:08:33,479
in the middle between your browser and

207
00:08:33,479 --> 00:08:36,870
your web application and then any

208
00:08:36,870 --> 00:08:38,640
requests that you send through your

209
00:08:38,640 --> 00:08:40,409
browser will first pass through the

210
00:08:40,409 --> 00:08:42,599
proxy so through the scanner and then go

211
00:08:42,599 --> 00:08:44,610
back to the web application and then any

212
00:08:44,610 --> 00:08:46,350
response from the web application goes

213
00:08:46,350 --> 00:08:48,870
through the scanner and then gets

214
00:08:48,870 --> 00:08:50,820
relayed back to you in the browser and

215
00:08:50,820 --> 00:08:52,770
the reason that that is good is that in

216
00:08:52,770 --> 00:08:54,630
case the scanner can't crawl the

217
00:08:54,630 --> 00:08:55,769
application by the

218
00:08:55,769 --> 00:08:57,929
because it doesn't have a good crawler

219
00:08:57,929 --> 00:09:00,089
or the technologies that are being used

220
00:09:00,089 --> 00:09:04,739
are very complex then when you set it in

221
00:09:04,739 --> 00:09:06,509
proxy mode and you're visiting all those

222
00:09:06,509 --> 00:09:10,319
sites on your own manually then it's

223
00:09:10,319 --> 00:09:11,819
getting recorded in the scanner so the

224
00:09:11,819 --> 00:09:14,100
next time you decide to scan the site it

225
00:09:14,100 --> 00:09:16,379
it has a record of all these links and

226
00:09:16,379 --> 00:09:18,299
it will actually scan those links for

227
00:09:18,299 --> 00:09:20,939
vulnerabilities another thing would be

228
00:09:20,939 --> 00:09:23,519
to change the configuration so you have

229
00:09:23,519 --> 00:09:27,079
to think of these scanners like a child

230
00:09:27,079 --> 00:09:29,549
you have to hold its hands like

231
00:09:29,549 --> 00:09:32,459
sweetheart you know I want you to do

232
00:09:32,459 --> 00:09:34,170
this thing and this is exactly how you

233
00:09:34,170 --> 00:09:37,199
do it so in terms of like logging ends

234
00:09:37,199 --> 00:09:41,699
scanners are able to create its create

235
00:09:41,699 --> 00:09:45,269
like in a create account so they're able

236
00:09:45,269 --> 00:09:47,429
to create accounts but then they can't

237
00:09:47,429 --> 00:09:48,629
they don't figure out that they've

238
00:09:48,629 --> 00:09:50,519
actually created an account and so they

239
00:09:50,519 --> 00:09:53,040
never use that account to log back in so

240
00:09:53,040 --> 00:09:54,720
if you want them to authenticate you

241
00:09:54,720 --> 00:09:56,429
actually have to give them the username

242
00:09:56,429 --> 00:09:59,309
and the password and tell them this is

243
00:09:59,309 --> 00:10:01,019
login credentials and then on top of

244
00:10:01,019 --> 00:10:02,939
that you have to take out the logout

245
00:10:02,939 --> 00:10:05,189
link to make sure that they don't

246
00:10:05,189 --> 00:10:07,019
accidentally click it and then

247
00:10:07,019 --> 00:10:09,240
unauthentic 8 times to any requests to

248
00:10:09,240 --> 00:10:11,369
any authenticated pages after that end

249
00:10:11,369 --> 00:10:13,799
up going in on authenticated mode so

250
00:10:13,799 --> 00:10:15,809
they kind of error out as opposed to

251
00:10:15,809 --> 00:10:18,660
look for vulnerabilities so things like

252
00:10:18,660 --> 00:10:20,009
that and we'll talk a little bit more

253
00:10:20,009 --> 00:10:24,149
about that later so now that we know how

254
00:10:24,149 --> 00:10:26,129
the tools work and how they should be

255
00:10:26,129 --> 00:10:28,559
used the next step would be to select

256
00:10:28,559 --> 00:10:30,509
the tools that we want to evaluate and

257
00:10:30,509 --> 00:10:32,970
that was done based on Shane's

258
00:10:32,970 --> 00:10:35,879
evaluation where he evaluates sixty-four

259
00:10:35,879 --> 00:10:38,549
scanners every couple of years it's

260
00:10:38,549 --> 00:10:41,429
about every three years and they're both

261
00:10:41,429 --> 00:10:43,919
commercial and open source and he

262
00:10:43,919 --> 00:10:45,389
evaluates someone an application he

263
00:10:45,389 --> 00:10:46,980
created called wave sup and all the

264
00:10:46,980 --> 00:10:49,619
results are available on the sexual

265
00:10:49,619 --> 00:10:53,279
market website so we picked the top ten

266
00:10:53,279 --> 00:10:54,959
performing scanners and then we

267
00:10:54,959 --> 00:10:58,079
consulted with professional penetration

268
00:10:58,079 --> 00:10:59,579
testers and asked them which of these

269
00:10:59,579 --> 00:11:02,309
scanners are used in real life and

270
00:11:02,309 --> 00:11:04,980
corporate environments and we ended up

271
00:11:04,980 --> 00:11:07,799
with six five open source we've got

272
00:11:07,799 --> 00:11:09,600
Arachne skip fish beagle

273
00:11:09,600 --> 00:11:13,079
perience up and one commercial which is

274
00:11:13,079 --> 00:11:14,880
perf suite pro because ford swagger was

275
00:11:14,880 --> 00:11:16,889
nice enough to give us a license when we

276
00:11:16,889 --> 00:11:19,259
asked for other licenses from other

277
00:11:19,259 --> 00:11:21,480
vendors they said no right away

278
00:11:21,480 --> 00:11:24,540
for obvious reasons and that would be

279
00:11:24,540 --> 00:11:27,360
all that will be there we go and and

280
00:11:27,360 --> 00:11:29,819
that'll be more obvious as we go as we

281
00:11:29,819 --> 00:11:33,750
progress through the presentation okay

282
00:11:33,750 --> 00:11:35,819
so the environment setup for doing the

283
00:11:35,819 --> 00:11:38,220
testing was this we had a vm that was

284
00:11:38,220 --> 00:11:40,050
restored to its initial state with every

285
00:11:40,050 --> 00:11:42,690
test run we had our tools so that's the

286
00:11:42,690 --> 00:11:45,600
one on top and then we had the

287
00:11:45,600 --> 00:11:47,550
applications that we tested our tools

288
00:11:47,550 --> 00:11:49,170
against so weights up was the one that

289
00:11:49,170 --> 00:11:51,930
we saw in the previous in the previous

290
00:11:51,930 --> 00:11:53,339
slide that someone that was created by

291
00:11:53,339 --> 00:11:56,399
chung it has over a thousand

292
00:11:56,399 --> 00:11:57,720
vulnerabilities that fall into different

293
00:11:57,720 --> 00:12:00,959
categories there is also with it that

294
00:12:00,959 --> 00:12:03,329
application does not contain any any

295
00:12:03,329 --> 00:12:05,040
vulnerabilities it contains crawling

296
00:12:05,040 --> 00:12:07,079
challenges so it's used to measure the

297
00:12:07,079 --> 00:12:09,509
crawling coverage of an application so

298
00:12:09,509 --> 00:12:11,069
what it does is it has a bunch of

299
00:12:11,069 --> 00:12:13,889
different technologies and if the

300
00:12:13,889 --> 00:12:15,899
application is able to crawl and get to

301
00:12:15,899 --> 00:12:17,610
these technologies then it's marked as a

302
00:12:17,610 --> 00:12:20,069
yes it's able to crawl it if it's not

303
00:12:20,069 --> 00:12:21,630
then it's marked physical as it just

304
00:12:21,630 --> 00:12:25,079
filled so things like dynamic JavaScript

305
00:12:25,079 --> 00:12:27,720
Ajax requests comments and links because

306
00:12:27,720 --> 00:12:29,459
that's a way to enumerate your

307
00:12:29,459 --> 00:12:31,470
application even more and so on

308
00:12:31,470 --> 00:12:33,240
multi-step processes and so on and we'll

309
00:12:33,240 --> 00:12:34,889
see a lot of that in the next coming

310
00:12:34,889 --> 00:12:35,579
slides

311
00:12:35,579 --> 00:12:38,939
Wow Pico is the application that our

312
00:12:38,939 --> 00:12:42,180
research is largely dependent on so we

313
00:12:42,180 --> 00:12:44,279
use all three but it's largely dependent

314
00:12:44,279 --> 00:12:46,259
on this one and that was created by

315
00:12:46,259 --> 00:12:49,199
dupay al and the research was done eight

316
00:12:49,199 --> 00:12:51,839
years ago and published it was mostly on

317
00:12:51,839 --> 00:12:53,759
commercial scanners and the research was

318
00:12:53,759 --> 00:12:54,120
called

319
00:12:54,120 --> 00:12:56,819
why Johnny can't contest a comparative

320
00:12:56,819 --> 00:12:58,680
analysis of web application

321
00:12:58,680 --> 00:13:01,019
vulnerability scanners and the results

322
00:13:01,019 --> 00:13:04,649
were horrible obviously um and hence the

323
00:13:04,649 --> 00:13:07,589
name and so our research was to conduct

324
00:13:07,589 --> 00:13:10,949
the research that they did but in a more

325
00:13:10,949 --> 00:13:14,490
updated fashion with more analysis and

326
00:13:14,490 --> 00:13:16,199
on open source scanners as opposed to

327
00:13:16,199 --> 00:13:21,390
commercial ones okay

328
00:13:21,390 --> 00:13:25,290
um all right so the results so if it

329
00:13:25,290 --> 00:13:26,700
sounds too good to be true it probably

330
00:13:26,700 --> 00:13:30,450
is so remember the promises that we saw

331
00:13:30,450 --> 00:13:32,250
on the Google search you know that

332
00:13:32,250 --> 00:13:34,050
accurate scanner finds all your

333
00:13:34,050 --> 00:13:35,519
vulnerabilities secures your web

334
00:13:35,519 --> 00:13:38,310
application so on well here are the

335
00:13:38,310 --> 00:13:40,410
results so here our sample

336
00:13:40,410 --> 00:13:42,029
vulnerabilities that the scanners were

337
00:13:42,029 --> 00:13:45,600
not able to detect so we caught nth

338
00:13:45,600 --> 00:13:47,579
ocation credentials the web application

339
00:13:47,579 --> 00:13:50,279
had an admin page which the scanners

340
00:13:50,279 --> 00:13:52,290
were aware of because you can see that

341
00:13:52,290 --> 00:13:56,250
the scanner visited that page and their

342
00:13:56,250 --> 00:13:58,769
credentials were admin admin and none of

343
00:13:58,769 --> 00:14:01,680
the scanners detected that vulnerability

344
00:14:01,680 --> 00:14:03,000
because they don't even try to

345
00:14:03,000 --> 00:14:05,370
brute-force that vulnerability in the

346
00:14:05,370 --> 00:14:08,190
first place they're not made for that

347
00:14:08,190 --> 00:14:10,500
you use specialized tools like Hydra and

348
00:14:10,500 --> 00:14:12,390
John the Ripper or whatever um to do

349
00:14:12,390 --> 00:14:14,640
that stuff for you um about scanners

350
00:14:14,640 --> 00:14:16,350
themselves they don't they don't test

351
00:14:16,350 --> 00:14:19,050
for weak credentials and that's another

352
00:14:19,050 --> 00:14:21,870
stop ten right there's a commercial

353
00:14:21,870 --> 00:14:23,820
scanner that goes like it tests for the

354
00:14:23,820 --> 00:14:28,940
hola Sultan like do you but anyways

355
00:14:28,940 --> 00:14:32,940
barometer manipulation um so in the

356
00:14:32,940 --> 00:14:35,519
application there was vulnerability

357
00:14:35,519 --> 00:14:38,850
where as an unauthenticated user you can

358
00:14:38,850 --> 00:14:43,170
see a sample users page by just and it's

359
00:14:43,170 --> 00:14:45,600
identified by the user ID being equal to

360
00:14:45,600 --> 00:14:51,079
one and so all the scanner had to do is

361
00:14:51,079 --> 00:14:53,519
sequentially increase the number by one

362
00:14:53,519 --> 00:14:56,070
so go two three four and it would end up

363
00:14:56,070 --> 00:14:58,440
in and things that it should have been

364
00:14:58,440 --> 00:15:01,199
authenticated in order to view so over

365
00:15:01,199 --> 00:15:04,290
here if you change it to two you enter

366
00:15:04,290 --> 00:15:06,390
bob's account right if you change it to

367
00:15:06,390 --> 00:15:08,570
three you enter mary's account or so on

368
00:15:08,570 --> 00:15:11,610
and that's something that you don't need

369
00:15:11,610 --> 00:15:14,160
to be very smart to kind of like figure

370
00:15:14,160 --> 00:15:16,529
out and test for right but what the

371
00:15:16,529 --> 00:15:18,449
scanner is did when we looked at the

372
00:15:18,449 --> 00:15:20,160
behavior of the request that it was

373
00:15:20,160 --> 00:15:22,380
sending is that they were sending random

374
00:15:22,380 --> 00:15:25,019
data through those parameter values so

375
00:15:25,019 --> 00:15:27,390
they would sound like a huge string of

376
00:15:27,390 --> 00:15:29,819
values and that was just not valid right

377
00:15:29,819 --> 00:15:31,620
because the logic of the application is

378
00:15:31,620 --> 00:15:34,950
that it increases sequentially right

379
00:15:34,950 --> 00:15:38,430
and so they all of them except for

380
00:15:38,430 --> 00:15:40,769
Arachne were able to enter an

381
00:15:40,769 --> 00:15:44,070
authenticated page but Arachne did enter

382
00:15:44,070 --> 00:15:47,190
an authenticated page but they had no

383
00:15:47,190 --> 00:15:49,620
idea that it did exploit the

384
00:15:49,620 --> 00:15:51,029
vulnerability I had no idea that it

385
00:15:51,029 --> 00:15:52,740
actually entered a page that requires

386
00:15:52,740 --> 00:15:54,449
authentication and so I never reported

387
00:15:54,449 --> 00:15:59,610
it right so forceful browsing similar to

388
00:15:59,610 --> 00:16:03,089
a parameter manipulation you had a high

389
00:16:03,089 --> 00:16:06,209
quality version of a picture that you

390
00:16:06,209 --> 00:16:08,699
were only supposed to view as an

391
00:16:08,699 --> 00:16:10,440
authenticated user who bought that

392
00:16:10,440 --> 00:16:12,959
picture well who bought that high

393
00:16:12,959 --> 00:16:16,589
quality link and so the application

394
00:16:16,589 --> 00:16:18,180
didn't have the proper access control

395
00:16:18,180 --> 00:16:20,660
rules that said you know rena but this

396
00:16:20,660 --> 00:16:22,860
this high quality version of the

397
00:16:22,860 --> 00:16:24,980
pictures so only rena can see it in

398
00:16:24,980 --> 00:16:29,130
authenticated mode and so you could just

399
00:16:29,130 --> 00:16:32,660
enumerate it by brute forcing the pc ID

400
00:16:32,660 --> 00:16:35,370
and again none of the scanners were able

401
00:16:35,370 --> 00:16:36,600
to do that and none of them found that

402
00:16:36,600 --> 00:16:40,079
vulnerability and these are pretty high

403
00:16:40,079 --> 00:16:41,550
vulnerabilities like if I was on a

404
00:16:41,550 --> 00:16:42,810
vulnerability assessment I would

405
00:16:42,810 --> 00:16:46,430
categorize these vulnerabilities as high

406
00:16:46,430 --> 00:16:48,870
and then logic flaw this one's pretty

407
00:16:48,870 --> 00:16:51,720
obvious the scanner has no way of

408
00:16:51,720 --> 00:16:53,130
understanding the law of the business

409
00:16:53,130 --> 00:16:56,329
logic of the application so in this case

410
00:16:56,329 --> 00:17:00,300
the coupon management system you enter a

411
00:17:00,300 --> 00:17:03,060
coupon the developer assumes that while

412
00:17:03,060 --> 00:17:04,589
the developer assumed that you will only

413
00:17:04,589 --> 00:17:07,349
enter it once whereas you could enter it

414
00:17:07,349 --> 00:17:08,849
multiple times until you get your entire

415
00:17:08,849 --> 00:17:12,209
purchase for free right um so it doesn't

416
00:17:12,209 --> 00:17:13,500
count the number of times that you've

417
00:17:13,500 --> 00:17:15,990
used the or if you've used it before and

418
00:17:15,990 --> 00:17:17,609
so none of the applications were able to

419
00:17:17,609 --> 00:17:19,770
do that which is again so none of the

420
00:17:19,770 --> 00:17:21,179
scanners were able to do that I just

421
00:17:21,179 --> 00:17:22,619
again scary because most of the

422
00:17:22,619 --> 00:17:24,119
vulnerabilities that we find in our

423
00:17:24,119 --> 00:17:26,189
vulnerability assessments are logic

424
00:17:26,189 --> 00:17:31,710
flaws ok so before I get to the next

425
00:17:31,710 --> 00:17:33,570
slide there were also other

426
00:17:33,570 --> 00:17:35,070
vulnerabilities that were not detected

427
00:17:35,070 --> 00:17:38,450
by the scanners things like

428
00:17:38,450 --> 00:17:41,429
vulnerabilities that required of complex

429
00:17:41,429 --> 00:17:42,780
vulnerabilities so vulnerabilities that

430
00:17:42,780 --> 00:17:45,330
required a human being actually sending

431
00:17:45,330 --> 00:17:46,950
characters to that web application

432
00:17:46,950 --> 00:17:48,809
seeing how it responds

433
00:17:48,809 --> 00:17:50,610
and building your query based on the

434
00:17:50,610 --> 00:17:52,470
responses so it usually takes several

435
00:17:52,470 --> 00:17:54,509
iterations before you get to exploit

436
00:17:54,509 --> 00:17:56,820
right so vulnerabilities like that so

437
00:17:56,820 --> 00:18:02,879
stored XSS a blind SQL injection lang

438
00:18:02,879 --> 00:18:04,200
sequel injection and so on

439
00:18:04,200 --> 00:18:05,730
vulnerabilities like that the scanner

440
00:18:05,730 --> 00:18:08,850
was not able to to find so the question

441
00:18:08,850 --> 00:18:11,909
is can scanners catch everything they

442
00:18:11,909 --> 00:18:19,009
try and they catch some stuff but yeah

443
00:18:19,009 --> 00:18:22,379
like they're actually try again I'm not

444
00:18:22,379 --> 00:18:23,759
sure if they actually caught anything at

445
00:18:23,759 --> 00:18:26,090
the end but anyways so this slide is

446
00:18:26,090 --> 00:18:31,110
stolen from my co-workers talk OPSEC USA

447
00:18:31,110 --> 00:18:34,139
it was done in 2017 he um the talk was

448
00:18:34,139 --> 00:18:36,029
pretty good it's called a hybrid

449
00:18:36,029 --> 00:18:38,700
approach to web application penetration

450
00:18:38,700 --> 00:18:42,419
testing and he has a whole whole the

451
00:18:42,419 --> 00:18:44,999
whole ideology I would say of not using

452
00:18:44,999 --> 00:18:48,629
tools at all when he does his tests

453
00:18:48,629 --> 00:18:49,919
which is quite interesting I don't agree

454
00:18:49,919 --> 00:18:53,190
with that I use some tools but anyways

455
00:18:53,190 --> 00:18:56,879
you should watch the talk ok so we found

456
00:18:56,879 --> 00:19:00,269
that on average scanners only find close

457
00:19:00,269 --> 00:19:02,249
to 40 percent of the vulnerabilities and

458
00:19:02,249 --> 00:19:04,289
in my opinion that number could be even

459
00:19:04,289 --> 00:19:06,720
lower depending on the data set that you

460
00:19:06,720 --> 00:19:08,960
have in the type of vulnerabilities that

461
00:19:08,960 --> 00:19:11,999
that the scanners that the applications

462
00:19:11,999 --> 00:19:14,820
have we try to have a level data set

463
00:19:14,820 --> 00:19:17,159
width with over a thousand

464
00:19:17,159 --> 00:19:20,159
vulnerabilities on many applications and

465
00:19:20,159 --> 00:19:22,169
and we found that on average they find

466
00:19:22,169 --> 00:19:26,100
less than 40% of the vulnerabilities and

467
00:19:26,100 --> 00:19:26,960
they're usually the low-hanging

468
00:19:26,960 --> 00:19:31,200
vulnerabilities ok so we discussed the

469
00:19:31,200 --> 00:19:33,509
vulnerabilities that the scanners can't

470
00:19:33,509 --> 00:19:36,419
find so if the scanner has a bad

471
00:19:36,419 --> 00:19:39,990
attacker and analysis module then the

472
00:19:39,990 --> 00:19:41,789
chances of it finding a vulnerability is

473
00:19:41,789 --> 00:19:44,399
lower but it can still find it right but

474
00:19:44,399 --> 00:19:46,499
if a scanner has a bad crawler module

475
00:19:46,499 --> 00:19:48,169
the chances of it finding out

476
00:19:48,169 --> 00:19:51,119
vulnerability is close to zero because

477
00:19:51,119 --> 00:19:53,789
it needs to crawl the application find

478
00:19:53,789 --> 00:19:57,000
the page and then and then look for

479
00:19:57,000 --> 00:19:58,679
vulnerabilities in that page if it never

480
00:19:58,679 --> 00:20:00,419
got to that page in the first place it's

481
00:20:00,419 --> 00:20:02,100
not it's not going to detect the

482
00:20:02,100 --> 00:20:02,590
vulnerable

483
00:20:02,590 --> 00:20:05,559
and we'll see examples of that in a bit

484
00:20:05,559 --> 00:20:08,980
so things like uploading a file which is

485
00:20:08,980 --> 00:20:11,009
very common in web applications today

486
00:20:11,009 --> 00:20:13,690
the scanners weren't able to upload a

487
00:20:13,690 --> 00:20:16,570
file so any page that existed behind the

488
00:20:16,570 --> 00:20:18,789
upload functionality the scanners won't

489
00:20:18,789 --> 00:20:21,190
able were weren't able to get to it so

490
00:20:21,190 --> 00:20:22,960
if that page was vulnerable the scanners

491
00:20:22,960 --> 00:20:24,789
wouldn't report that vulnerability not

492
00:20:24,789 --> 00:20:26,110
because they can't detect the

493
00:20:26,110 --> 00:20:28,210
vulnerability but because they never got

494
00:20:28,210 --> 00:20:30,490
to that page that had that vulnerability

495
00:20:30,490 --> 00:20:35,080
in it and so when we when we actually

496
00:20:35,080 --> 00:20:37,299
help the hand of the scanner and said

497
00:20:37,299 --> 00:20:39,730
you know this is exactly how you upload

498
00:20:39,730 --> 00:20:43,269
a file and train mode burp ends up were

499
00:20:43,269 --> 00:20:45,990
able to do it

500
00:20:46,350 --> 00:20:50,169
authentication most scanners were able

501
00:20:50,169 --> 00:20:51,909
to create accounts as you can see in the

502
00:20:51,909 --> 00:20:55,360
table over here except for what PD it

503
00:20:55,360 --> 00:20:57,399
was able to create an account but when

504
00:20:57,399 --> 00:20:59,529
we when we check the behavior of the

505
00:20:59,529 --> 00:21:00,759
scanners we realize that although

506
00:21:00,759 --> 00:21:02,409
they're creating so many accounts what

507
00:21:02,409 --> 00:21:04,690
they were doing is throwing random input

508
00:21:04,690 --> 00:21:07,809
values at the input parameters and the

509
00:21:07,809 --> 00:21:13,480
in that creative a user page and so they

510
00:21:13,480 --> 00:21:15,789
weren't aware that they were creating an

511
00:21:15,789 --> 00:21:18,100
account it was a byproduct of them

512
00:21:18,100 --> 00:21:21,850
throwing values at that form and the

513
00:21:21,850 --> 00:21:24,429
reason behind that is and the reason we

514
00:21:24,429 --> 00:21:26,440
concluded that is because none of the

515
00:21:26,440 --> 00:21:29,409
scanners actually used the tube so for

516
00:21:29,409 --> 00:21:31,419
example the 200 accounts in order to

517
00:21:31,419 --> 00:21:33,929
reallocate to visit authenticated pages

518
00:21:33,929 --> 00:21:36,340
so they created accounts and they had no

519
00:21:36,340 --> 00:21:38,049
idea that they actually created those

520
00:21:38,049 --> 00:21:40,200
accounts and so they never used them and

521
00:21:40,200 --> 00:21:44,289
and and and the next steps that they

522
00:21:44,289 --> 00:21:48,970
conducted okay multi-step processes

523
00:21:48,970 --> 00:21:50,919
again very common with what technologies

524
00:21:50,919 --> 00:21:53,919
today so in this case in order to add a

525
00:21:53,919 --> 00:21:56,110
comment you had to preview it first and

526
00:21:56,110 --> 00:21:59,499
then create it so it's a two-step

527
00:21:59,499 --> 00:22:00,279
process

528
00:22:00,279 --> 00:22:02,320
most scanners and point-and-shoot mode

529
00:22:02,320 --> 00:22:04,419
would get to the preview page click on

530
00:22:04,419 --> 00:22:05,830
the link and then that was it

531
00:22:05,830 --> 00:22:08,470
they they weren't able to follow the

532
00:22:08,470 --> 00:22:12,970
flow of tasks in order to complete it

533
00:22:12,970 --> 00:22:14,919
and get to that comments page and the

534
00:22:14,919 --> 00:22:16,510
comments page was vulnerable to acts

535
00:22:16,510 --> 00:22:18,640
which all the scanners detected and

536
00:22:18,640 --> 00:22:20,770
train mode after we actually showed them

537
00:22:20,770 --> 00:22:23,820
exactly how to do the multi-step process

538
00:22:23,820 --> 00:22:25,900
however in point-and-shoot mode they

539
00:22:25,900 --> 00:22:27,040
didn't detect the XSS vulnerability

540
00:22:27,040 --> 00:22:28,960
because they never got to the page in

541
00:22:28,960 --> 00:22:30,910
the first place and that this goes to

542
00:22:30,910 --> 00:22:32,620
show that the crawler component is

543
00:22:32,620 --> 00:22:34,210
actually very important when it comes to

544
00:22:34,210 --> 00:22:38,640
web application one ability scanner okay

545
00:22:38,640 --> 00:22:42,010
infinite websites thankfully Oh No

546
00:22:42,010 --> 00:22:43,929
on a lighter note all the scanners

547
00:22:43,929 --> 00:22:45,880
except for Arachne were able to detect

548
00:22:45,880 --> 00:22:47,620
that there's an infinite loop on the

549
00:22:47,620 --> 00:22:50,830
calendar page Arachnia ran I think I let

550
00:22:50,830 --> 00:22:53,710
it run for like a good eight hours

551
00:22:53,710 --> 00:22:57,429
before I decided to terminate it yeah

552
00:22:57,429 --> 00:23:00,460
but so in cases like this it shows that

553
00:23:00,460 --> 00:23:02,110
you need to actually play around with

554
00:23:02,110 --> 00:23:04,570
the application manually understand how

555
00:23:04,570 --> 00:23:06,309
it works what points might break a

556
00:23:06,309 --> 00:23:09,790
scanner and then configure your scanner

557
00:23:09,790 --> 00:23:13,030
so that so that it doesn't hit obstacles

558
00:23:13,030 --> 00:23:15,309
like this one and in the case of Arachne

559
00:23:15,309 --> 00:23:17,230
you could either say avoid this page

560
00:23:17,230 --> 00:23:19,690
completely or visit this page only three

561
00:23:19,690 --> 00:23:21,520
times after the third time then stop

562
00:23:21,520 --> 00:23:22,990
visiting the station this way you would

563
00:23:22,990 --> 00:23:27,640
avoid the infinite loop okay

564
00:23:27,640 --> 00:23:30,280
state awareness again very important is

565
00:23:30,280 --> 00:23:32,320
that scanners are not very state aware

566
00:23:32,320 --> 00:23:34,290
they're not state aware at all actually

567
00:23:34,290 --> 00:23:38,110
and so the idea is that if you give it

568
00:23:38,110 --> 00:23:40,870
login credentials then it has a valid

569
00:23:40,870 --> 00:23:44,230
session ID so it'll it'll enumerate all

570
00:23:44,230 --> 00:23:46,240
the different links within the

571
00:23:46,240 --> 00:23:48,940
authenticated within the authenticated

572
00:23:48,940 --> 00:23:50,860
State right

573
00:23:50,860 --> 00:23:53,410
and so if it accidentally hits a logout

574
00:23:53,410 --> 00:23:55,240
button or does something that

575
00:23:55,240 --> 00:23:56,740
invalidates your session because this

576
00:23:56,740 --> 00:23:58,990
application is seeing you as an attacker

577
00:23:58,990 --> 00:24:00,640
or the controls that the application

578
00:24:00,640 --> 00:24:02,590
employees is seeing you as an attacker

579
00:24:02,590 --> 00:24:04,660
and it invalidates your session any

580
00:24:04,660 --> 00:24:07,450
requests that happen after that are an

581
00:24:07,450 --> 00:24:09,280
unauthenticated mode so you could be

582
00:24:09,280 --> 00:24:13,270
trying to access I don't know change

583
00:24:13,270 --> 00:24:16,809
password page but in reality the the

584
00:24:16,809 --> 00:24:18,340
application would respond that you don't

585
00:24:18,340 --> 00:24:20,140
have a valid session and so you can't

586
00:24:20,140 --> 00:24:22,059
test this page and if you don't actually

587
00:24:22,059 --> 00:24:25,540
monitor and review all the all the

588
00:24:25,540 --> 00:24:27,190
requests that the scanner is making you

589
00:24:27,190 --> 00:24:28,659
might think that the scanner is actually

590
00:24:28,659 --> 00:24:30,370
testing your entire site

591
00:24:30,370 --> 00:24:32,380
I supposed to erroring out on everything

592
00:24:32,380 --> 00:24:34,240
because it accidentally unauthenticated

593
00:24:34,240 --> 00:24:38,049
itself and I'll stress on that a little

594
00:24:38,049 --> 00:24:39,580
bit more later because a lot of people

595
00:24:39,580 --> 00:24:42,190
don't do that because by default Burke

596
00:24:42,190 --> 00:24:43,720
doesn't show you the requests that the

597
00:24:43,720 --> 00:24:45,520
scanner is making so you have to install

598
00:24:45,520 --> 00:24:47,919
a plugin there is one called flow they

599
00:24:47,919 --> 00:24:50,620
actually see it and have an example like

600
00:24:50,620 --> 00:24:52,659
a real-life example where that actually

601
00:24:52,659 --> 00:24:55,809
happened and we weren't sure why all of

602
00:24:55,809 --> 00:24:57,669
a sudden the scanner is zeroing out and

603
00:24:57,669 --> 00:24:59,799
everything and then we figured it out

604
00:24:59,799 --> 00:25:01,230
after looking at the plus and the

605
00:25:01,230 --> 00:25:03,549
scanner doesn't tell you that it aired

606
00:25:03,549 --> 00:25:05,799
out or whatever it just says okay no

607
00:25:05,799 --> 00:25:07,330
vulnerabilities and the access denied

608
00:25:07,330 --> 00:25:08,919
fission of vulnerabilities in the access

609
00:25:08,919 --> 00:25:10,990
defined page and so you would have no

610
00:25:10,990 --> 00:25:14,799
idea um client-side code so this is the

611
00:25:14,799 --> 00:25:18,399
last one um so the Whippet application

612
00:25:18,399 --> 00:25:20,110
that's the application that can that

613
00:25:20,110 --> 00:25:21,789
measures the crawling coverage of a

614
00:25:21,789 --> 00:25:24,820
scanner so it contains things like

615
00:25:24,820 --> 00:25:27,220
standard anchor links which all scanners

616
00:25:27,220 --> 00:25:30,190
were able to crawl links that were

617
00:25:30,190 --> 00:25:31,750
created dynamically using javascript

618
00:25:31,750 --> 00:25:33,309
that was a little bit more difficult for

619
00:25:33,309 --> 00:25:35,860
scanners multi-page forms very difficult

620
00:25:35,860 --> 00:25:37,390
if you don't show the scanner how to do

621
00:25:37,390 --> 00:25:39,730
it links in comments again developers

622
00:25:39,730 --> 00:25:42,820
leave a lot of important information in

623
00:25:42,820 --> 00:25:44,500
comments that's how we you and numerate

624
00:25:44,500 --> 00:25:47,950
your targets um and so if it's able to

625
00:25:47,950 --> 00:25:50,140
recognize that it is a link using rocks

626
00:25:50,140 --> 00:25:53,289
in the comment and it actually goes and

627
00:25:53,289 --> 00:25:55,029
visits it links embedded and flash

628
00:25:55,029 --> 00:25:57,340
objects and most of the scanners weren't

629
00:25:57,340 --> 00:25:58,600
able to detect that but that's fine

630
00:25:58,600 --> 00:26:00,909
because that's getting phased out and

631
00:26:00,909 --> 00:26:03,130
their links with an ajax request so

632
00:26:03,130 --> 00:26:05,380
Arachne surprisingly had a really high

633
00:26:05,380 --> 00:26:07,690
crawling coverage detector it was able

634
00:26:07,690 --> 00:26:11,950
to crawl through about 94% of the

635
00:26:11,950 --> 00:26:14,320
technologies and sap came in second with

636
00:26:14,320 --> 00:26:17,590
78% but with SAP you had to enable the

637
00:26:17,590 --> 00:26:21,130
Ajax crawler and you had to actually

638
00:26:21,130 --> 00:26:22,990
configure it from the inside go like

639
00:26:22,990 --> 00:26:26,440
visit this this element this element in

640
00:26:26,440 --> 00:26:29,140
this element in this element in order

641
00:26:29,140 --> 00:26:31,270
for it to achieve the 78 before that I

642
00:26:31,270 --> 00:26:32,890
think it was close to 50 which is

643
00:26:32,890 --> 00:26:39,610
similar to the other ones okay so um now

644
00:26:39,610 --> 00:26:41,890
that we saw all the results so what now

645
00:26:41,890 --> 00:26:43,929
should Johnny even bother using an

646
00:26:43,929 --> 00:26:44,290
autumn

647
00:26:44,290 --> 00:26:48,130
scanner and the answer is does anyone

648
00:26:48,130 --> 00:26:54,100
want to guess yes okay good um yes

649
00:26:54,100 --> 00:26:55,720
Johnny definitely should use an

650
00:26:55,720 --> 00:26:58,300
automated scanner it just that he should

651
00:26:58,300 --> 00:27:00,430
be aware that scanners do not replace

652
00:27:00,430 --> 00:27:02,650
the skilled pen tester but they can aid

653
00:27:02,650 --> 00:27:04,510
a pen tester or a security assessment

654
00:27:04,510 --> 00:27:07,810
analyst and something that he really

655
00:27:07,810 --> 00:27:09,220
needs to be aware of because he thought

656
00:27:09,220 --> 00:27:10,720
he was a genius he figured out the whole

657
00:27:10,720 --> 00:27:13,630
security thing on his own by using a

658
00:27:13,630 --> 00:27:15,730
tool is that a vulnerability scan is not

659
00:27:15,730 --> 00:27:17,080
equivalent to a vulnerability assessment

660
00:27:17,080 --> 00:27:20,260
and it's sure not equivalent to a pen

661
00:27:20,260 --> 00:27:24,130
test right and I say this and it seems a

662
00:27:24,130 --> 00:27:26,680
little bit obvious but in the corporate

663
00:27:26,680 --> 00:27:29,290
environment not everyone is aware of

664
00:27:29,290 --> 00:27:29,800
that

665
00:27:29,800 --> 00:27:31,870
because I have like project managers

666
00:27:31,870 --> 00:27:33,610
tell me so did you run a scan I'm like

667
00:27:33,610 --> 00:27:36,160
no I manually tested it which is by far

668
00:27:36,160 --> 00:27:40,000
one accurate less noisy and so on so

669
00:27:40,000 --> 00:27:42,220
many adventures but and then they go

670
00:27:42,220 --> 00:27:44,080
like well I don't feel comfortable until

671
00:27:44,080 --> 00:27:45,250
you're on a scan just to make sure

672
00:27:45,250 --> 00:27:50,620
you've covered all your bases so yeah so

673
00:27:50,620 --> 00:27:52,300
even when you do use these tools it

674
00:27:52,300 --> 00:27:55,090
requires a lot of skills I saw this in a

675
00:27:55,090 --> 00:27:56,380
previous presentation I'm like I'm

676
00:27:56,380 --> 00:27:58,750
definitely gonna use it in mine so a

677
00:27:58,750 --> 00:28:04,110
fool with a tool is still a fool yeah so

678
00:28:04,110 --> 00:28:06,630
yeah it requires a lot of skill to

679
00:28:06,630 --> 00:28:08,710
configure these scanners in certain

680
00:28:08,710 --> 00:28:10,540
situations and might take you hours to

681
00:28:10,540 --> 00:28:12,550
understand how the application is mapped

682
00:28:12,550 --> 00:28:15,430
and then to configure your scanner in

683
00:28:15,430 --> 00:28:18,130
such a way to make sure that the scanner

684
00:28:18,130 --> 00:28:20,320
covers all bases in your application and

685
00:28:20,320 --> 00:28:22,150
that involves a lot of things so you

686
00:28:22,150 --> 00:28:23,770
never run it in point-and-shoot mods

687
00:28:23,770 --> 00:28:25,930
like Johnny didn't like so many people

688
00:28:25,930 --> 00:28:27,730
actually do because it's advertised that

689
00:28:27,730 --> 00:28:29,410
way you really can't blame people for

690
00:28:29,410 --> 00:28:31,120
doing it because that's how the scanners

691
00:28:31,120 --> 00:28:35,470
are advertised so you have to first

692
00:28:35,470 --> 00:28:36,880
specify the target you don't want to

693
00:28:36,880 --> 00:28:38,320
click on links that you're not allowed

694
00:28:38,320 --> 00:28:40,990
to test most scanners are smart enough

695
00:28:40,990 --> 00:28:42,970
to know that if you specified this URL

696
00:28:42,970 --> 00:28:44,710
then it won't visit anything outside of

697
00:28:44,710 --> 00:28:47,410
that domain you have to set login and

698
00:28:47,410 --> 00:28:49,090
logout conditions again like I said you

699
00:28:49,090 --> 00:28:50,890
have to hold the hand of the scanner and

700
00:28:50,890 --> 00:28:52,960
go like this is how you exactly how you

701
00:28:52,960 --> 00:28:55,660
login and it might get more difficult if

702
00:28:55,660 --> 00:28:56,800
you've got two factor authentication

703
00:28:56,800 --> 00:28:58,280
based on the

704
00:28:58,280 --> 00:29:00,169
the second factor you know you might be

705
00:29:00,169 --> 00:29:02,570
able to do do it with a scanner on other

706
00:29:02,570 --> 00:29:05,659
cases not so much and then you have to

707
00:29:05,659 --> 00:29:07,460
specify the logout conditions so that it

708
00:29:07,460 --> 00:29:11,929
doesn't end up hitting the logout button

709
00:29:11,929 --> 00:29:14,960
and then running all the other response

710
00:29:14,960 --> 00:29:16,400
all the other requests and

711
00:29:16,400 --> 00:29:19,580
unauthenticated mode right you have to

712
00:29:19,580 --> 00:29:21,650
set the scanner in proxy mode and visit

713
00:29:21,650 --> 00:29:23,630
every page of the application that's to

714
00:29:23,630 --> 00:29:25,640
ensure that the entire application of

715
00:29:25,640 --> 00:29:27,440
the scanner is aware of that of all the

716
00:29:27,440 --> 00:29:28,520
links that are available in the

717
00:29:28,520 --> 00:29:30,230
applications just in case it can crawl

718
00:29:30,230 --> 00:29:32,539
them which we saw it's difficult for

719
00:29:32,539 --> 00:29:35,330
some of the scanners and then you have

720
00:29:35,330 --> 00:29:37,159
to configure scenarios business flows

721
00:29:37,159 --> 00:29:39,740
and clean up between scenarios so the

722
00:29:39,740 --> 00:29:42,880
example that I mentioned earlier is with

723
00:29:42,880 --> 00:29:45,409
CSRF tokens I was working on a

724
00:29:45,409 --> 00:29:47,690
vulnerability assessment where we did

725
00:29:47,690 --> 00:29:49,490
the vulnerability assessments and then

726
00:29:49,490 --> 00:29:52,159
they they took our recommendations and

727
00:29:52,159 --> 00:29:54,440
they fixed the code and then we're doing

728
00:29:54,440 --> 00:29:56,000
another vulnerability assessment so we

729
00:29:56,000 --> 00:29:59,150
ran the same scan on on the next time

730
00:29:59,150 --> 00:30:01,100
around and so all of a sudden when we

731
00:30:01,100 --> 00:30:04,190
look at the requests of the skin they

732
00:30:04,190 --> 00:30:07,610
were all erroring out and so when you

733
00:30:07,610 --> 00:30:09,049
actually looked at the different

734
00:30:09,049 --> 00:30:11,000
requests it turns out that the

735
00:30:11,000 --> 00:30:13,309
developers had added a CSRF token so I

736
00:30:13,309 --> 00:30:15,020
cross-site request forgery token that

737
00:30:15,020 --> 00:30:18,049
refreshes with every page and so the

738
00:30:18,049 --> 00:30:20,240
first request passed but every other

739
00:30:20,240 --> 00:30:22,190
requests didn't pass cos the scanner had

740
00:30:22,190 --> 00:30:24,770
no idea that it had to take the CSRF

741
00:30:24,770 --> 00:30:26,960
token of the previous page and then

742
00:30:26,960 --> 00:30:29,809
insert it in the next request which is

743
00:30:29,809 --> 00:30:33,620
common for web applications right and so

744
00:30:33,620 --> 00:30:35,780
we had to actually use a plug-in to

745
00:30:35,780 --> 00:30:38,780
configure the scanner to take that CSRF

746
00:30:38,780 --> 00:30:41,270
token from the previous page and use it

747
00:30:41,270 --> 00:30:42,590
in the request and that's something that

748
00:30:42,590 --> 00:30:44,330
is gets done automatically right now

749
00:30:44,330 --> 00:30:46,250
with the skin so things like that we

750
00:30:46,250 --> 00:30:49,130
would if you weren't monitoring thee and

751
00:30:49,130 --> 00:30:50,900
reviewing the requests of your skin you

752
00:30:50,900 --> 00:30:52,850
would have no idea that this scanner is

753
00:30:52,850 --> 00:30:54,980
not actually testing your application it

754
00:30:54,980 --> 00:30:57,370
would just appear that the scanner

755
00:30:57,370 --> 00:30:59,720
tested the application and didn't find

756
00:30:59,720 --> 00:31:01,760
any vulnerabilities when in reality it

757
00:31:01,760 --> 00:31:04,700
wasn't doing that and then after all

758
00:31:04,700 --> 00:31:07,370
that work you're actually only producted

759
00:31:07,370 --> 00:31:09,380
against script kiddies kiss scanners can

760
00:31:09,380 --> 00:31:12,050
only find the low-hanging vulnerability

761
00:31:12,050 --> 00:31:13,580
and they're not so complex

762
00:31:13,580 --> 00:31:14,929
vulnerabilities so the simple

763
00:31:14,929 --> 00:31:20,059
vulnerabilities and and so yeah it even

764
00:31:20,059 --> 00:31:23,000
after all this work and knowing how to

765
00:31:23,000 --> 00:31:24,800
configure the scanners and how to run

766
00:31:24,800 --> 00:31:27,470
them right now that's why Johnny still

767
00:31:27,470 --> 00:31:29,960
can't pentas he's a bit of a drama queen

768
00:31:29,960 --> 00:31:34,120
which is why you'll see the reaction

769
00:31:34,570 --> 00:31:37,190
that's okay he got over it at the end

770
00:31:37,190 --> 00:31:41,090
and no he's learning yeah escalates I'm

771
00:31:41,090 --> 00:31:42,650
not sure you let it escalate to the last

772
00:31:42,650 --> 00:31:45,920
word what you go that's that's enough

773
00:31:45,920 --> 00:31:55,309
anyways um he gets a gun at the end you

774
00:31:55,309 --> 00:31:57,170
get in touch with me I'm most active on

775
00:31:57,170 --> 00:31:59,240
Twitter so if you need anything today

776
00:31:59,240 --> 00:32:01,910
would be the place to go the last one is

777
00:32:01,910 --> 00:32:03,980
my research that I conducted at

778
00:32:03,980 --> 00:32:05,660
university so if you want to read a

779
00:32:05,660 --> 00:32:08,090
hundred and six pages of the work that I

780
00:32:08,090 --> 00:32:10,730
presented today you could get it there

781
00:32:10,730 --> 00:32:14,059
it's not as fun and hopefully as

782
00:32:14,059 --> 00:32:15,880
exciting as this presentation was

783
00:32:15,880 --> 00:32:18,110
because it doesn't have a storyline but

784
00:32:18,110 --> 00:32:21,200
it does have all the details of the pen

785
00:32:21,200 --> 00:32:22,580
test and the vulnerabilities that each

786
00:32:22,580 --> 00:32:24,110
scanner was able to detect the

787
00:32:24,110 --> 00:32:25,970
vulnerability categories and in which

788
00:32:25,970 --> 00:32:28,480
mode they were able to detect them and

789
00:32:28,480 --> 00:32:33,370
that's it for my presentation thank you

