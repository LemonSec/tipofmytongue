1
00:00:13,280 --> 00:00:15,440
good afternoon and thanks for joining us

2
00:00:15,440 --> 00:00:17,680
for our virtual conference and thank you

3
00:00:17,680 --> 00:00:19,279
to our sponsors for helping us

4
00:00:19,279 --> 00:00:22,160
put on this event as a reminder or

5
00:00:22,160 --> 00:00:24,080
capture the flag is going on during the

6
00:00:24,080 --> 00:00:25,279
entire event

7
00:00:25,279 --> 00:00:27,519
the challenges ranging from easy for

8
00:00:27,519 --> 00:00:29,359
people who have never played before

9
00:00:29,359 --> 00:00:32,399
the complex for those who love to play

10
00:00:32,399 --> 00:00:36,000
stop over in the session area

11
00:00:36,000 --> 00:00:38,160
the speaker for this half hour is emily

12
00:00:38,160 --> 00:00:40,239
grad stone cole

13
00:00:40,239 --> 00:00:42,719
she's back for her second year in a row

14
00:00:42,719 --> 00:00:44,640
at the diana initiative

15
00:00:44,640 --> 00:00:48,000
to talk about aws security

16
00:00:48,000 --> 00:00:51,039
there will be q a via chat on hop in

17
00:00:51,039 --> 00:00:52,879
and it will be either at the end of the

18
00:00:52,879 --> 00:00:54,320
talk or

19
00:00:54,320 --> 00:00:56,480
if we have time or in a discussion room

20
00:00:56,480 --> 00:00:59,199
after that

21
00:00:59,199 --> 00:01:02,719
take it away emily awesome

22
00:01:02,719 --> 00:01:06,320
thanks so i am thrilled to be speaking

23
00:01:06,320 --> 00:01:07,680
at diana initiative

24
00:01:07,680 --> 00:01:09,920
again i love this conference and all the

25
00:01:09,920 --> 00:01:10,880
amazing talks

26
00:01:10,880 --> 00:01:14,000
although i not so in love with going

27
00:01:14,000 --> 00:01:16,000
right after tonya janka i'm still

28
00:01:16,000 --> 00:01:18,479
absorbing some of those insights

29
00:01:18,479 --> 00:01:21,600
um but we'll we'll push forward

30
00:01:21,600 --> 00:01:23,920
a couple of quick bookkeeping notes my

31
00:01:23,920 --> 00:01:25,920
slides will be uploaded to shed after

32
00:01:25,920 --> 00:01:27,680
the talk and i will also tweet out a

33
00:01:27,680 --> 00:01:28,320
link

34
00:01:28,320 --> 00:01:29,840
so don't worry about getting screenshots

35
00:01:29,840 --> 00:01:31,360
if you miss one also

36
00:01:31,360 --> 00:01:33,200
my twitter handle is on almost every

37
00:01:33,200 --> 00:01:35,600
slide feel free to ask me questions

38
00:01:35,600 --> 00:01:38,479
or there or in the hop-in platform after

39
00:01:38,479 --> 00:01:39,520
the talk

40
00:01:39,520 --> 00:01:42,079
so my name is emily gladstone cole and

41
00:01:42,079 --> 00:01:43,759
i'm your friendly neighborhood security

42
00:01:43,759 --> 00:01:44,960
engineer

43
00:01:44,960 --> 00:01:46,399
being a security engineer can be

44
00:01:46,399 --> 00:01:48,720
stressful as you probably know

45
00:01:48,720 --> 00:01:50,640
and sometimes i have nightmares about an

46
00:01:50,640 --> 00:01:52,479
issue with my company's security getting

47
00:01:52,479 --> 00:01:53,439
exploited

48
00:01:53,439 --> 00:01:55,280
and having those kinds of articles

49
00:01:55,280 --> 00:01:57,040
appearing to criticize us

50
00:01:57,040 --> 00:01:59,200
so i start thinking about the ways we

51
00:01:59,200 --> 00:02:01,360
store data internally

52
00:02:01,360 --> 00:02:03,920
and any other secrets we might have and

53
00:02:03,920 --> 00:02:05,759
the ways that people might gain access

54
00:02:05,759 --> 00:02:06,640
to them

55
00:02:06,640 --> 00:02:09,280
it's not necessarily the best 3 a.m

56
00:02:09,280 --> 00:02:10,720
thinking

57
00:02:10,720 --> 00:02:13,280
so the idea for this talk crystallized

58
00:02:13,280 --> 00:02:15,599
when i attended a talk at b-sides

59
00:02:15,599 --> 00:02:18,239
san francisco back in february which

60
00:02:18,239 --> 00:02:20,160
feels like five years ago

61
00:02:20,160 --> 00:02:23,120
and heard about a nifty way to get aws

62
00:02:23,120 --> 00:02:25,760
access keys abstracted off and handled

63
00:02:25,760 --> 00:02:29,360
by an sso application it made me think

64
00:02:29,360 --> 00:02:31,280
again about all the different ways

65
00:02:31,280 --> 00:02:34,239
things can go wrong with aws access keys

66
00:02:34,239 --> 00:02:36,000
and the solutions that we

67
00:02:36,000 --> 00:02:38,879
personally put in place to protect them

68
00:02:38,879 --> 00:02:39,440
so

69
00:02:39,440 --> 00:02:42,560
agenda um this introduction

70
00:02:42,560 --> 00:02:46,000
three nightmares and some best practices

71
00:02:46,000 --> 00:02:49,760
so the obligatory bio slide um

72
00:02:49,760 --> 00:02:54,000
i came into security from the operations

73
00:02:54,000 --> 00:02:56,640
devops sre side like bran boland in case

74
00:02:56,640 --> 00:02:57,120
you

75
00:02:57,120 --> 00:03:00,080
saw her talk and after i spent some time

76
00:03:00,080 --> 00:03:01,680
on the operations side i became a

77
00:03:01,680 --> 00:03:03,519
security incident responder instead of

78
00:03:03,519 --> 00:03:03,760
an

79
00:03:03,760 --> 00:03:06,319
operations incident responder after some

80
00:03:06,319 --> 00:03:08,800
training from the sans institute

81
00:03:08,800 --> 00:03:10,800
and after doing a number of other

82
00:03:10,800 --> 00:03:13,040
security jobs i landed about two years

83
00:03:13,040 --> 00:03:13,680
ago at

84
00:03:13,680 --> 00:03:16,800
agari uh we do email security and i'm a

85
00:03:16,800 --> 00:03:18,640
security engineer there

86
00:03:18,640 --> 00:03:20,720
now none of the cats you will see in any

87
00:03:20,720 --> 00:03:22,640
of these pictures are mine though i do

88
00:03:22,640 --> 00:03:25,040
have two cats and i sincerely hope

89
00:03:25,040 --> 00:03:26,560
that neither one will interrupt my

90
00:03:26,560 --> 00:03:29,360
presentation today

91
00:03:29,360 --> 00:03:31,360
obligatory disclaimers i am not

92
00:03:31,360 --> 00:03:33,920
affiliated with amazon or with aws

93
00:03:33,920 --> 00:03:37,760
and i'm not being paid to give this talk

94
00:03:37,760 --> 00:03:40,560
i'm sharing what i've learned the tools

95
00:03:40,560 --> 00:03:42,400
that i've found and that i'm presenting

96
00:03:42,400 --> 00:03:44,319
here are not the only ways to solve

97
00:03:44,319 --> 00:03:46,000
these particular problems

98
00:03:46,000 --> 00:03:47,920
they're the ones that i've chosen for a

99
00:03:47,920 --> 00:03:50,319
number of reasons

100
00:03:50,319 --> 00:03:52,640
please do your own research if you find

101
00:03:52,640 --> 00:03:54,000
any other tools that look really

102
00:03:54,000 --> 00:03:55,200
interesting

103
00:03:55,200 --> 00:03:58,799
i would love to hear about it and get my

104
00:03:58,799 --> 00:04:02,640
toolbox to have a few more things in it

105
00:04:02,640 --> 00:04:05,840
so let's start with the basic level set

106
00:04:05,840 --> 00:04:08,879
what is an aws access key

107
00:04:08,879 --> 00:04:11,280
access keys have two parts the access

108
00:04:11,280 --> 00:04:12,080
key id

109
00:04:12,080 --> 00:04:14,799
and the secret access key together i'm

110
00:04:14,799 --> 00:04:16,160
probably just going to refer to them a

111
00:04:16,160 --> 00:04:19,120
bunch as access keys and it's the pair

112
00:04:19,120 --> 00:04:22,000
both parts so the access key id will

113
00:04:22,000 --> 00:04:25,199
always start with akia for a person

114
00:04:25,199 --> 00:04:27,120
there are different things you it'll

115
00:04:27,120 --> 00:04:30,000
start with like asia for a role

116
00:04:30,000 --> 00:04:34,080
um and it's kind of like your username

117
00:04:34,080 --> 00:04:36,800
now this is one don't worry you will see

118
00:04:36,800 --> 00:04:38,400
it in the logs

119
00:04:38,400 --> 00:04:41,759
it's perfectly normal the secret access

120
00:04:41,759 --> 00:04:42,000
key

121
00:04:42,000 --> 00:04:44,639
on the other hand really means secret

122
00:04:44,639 --> 00:04:46,800
the only you get one chance to see it

123
00:04:46,800 --> 00:04:48,960
and that's when you set up your access

124
00:04:48,960 --> 00:04:49,919
keys

125
00:04:49,919 --> 00:04:52,639
and if you lose it you need to make the

126
00:04:52,639 --> 00:04:53,360
key set

127
00:04:53,360 --> 00:04:56,160
inactive and generate a new one treat it

128
00:04:56,160 --> 00:04:57,600
like a password

129
00:04:57,600 --> 00:05:00,720
please don't put this key into your code

130
00:05:00,720 --> 00:05:02,720
if you're like me and you've spent some

131
00:05:02,720 --> 00:05:04,400
time in an early stage startup you know

132
00:05:04,400 --> 00:05:06,080
they don't often begin with a lot of

133
00:05:06,080 --> 00:05:06,960
attention

134
00:05:06,960 --> 00:05:08,800
to least privilege so if someone gets a

135
00:05:08,800 --> 00:05:10,880
set of developer access keys

136
00:05:10,880 --> 00:05:13,360
they can do a whole lot anything that

137
00:05:13,360 --> 00:05:15,280
the developer can do

138
00:05:15,280 --> 00:05:17,840
but least privilege is a completely

139
00:05:17,840 --> 00:05:19,840
separate discussion

140
00:05:19,840 --> 00:05:23,120
so okay great that's what an access key

141
00:05:23,120 --> 00:05:24,000
is let's talk

142
00:05:24,000 --> 00:05:27,120
about some nightmares the first one

143
00:05:27,120 --> 00:05:30,240
access keys in source code

144
00:05:30,240 --> 00:05:33,759
shutter so dome9 a cloud security

145
00:05:33,759 --> 00:05:34,320
company

146
00:05:34,320 --> 00:05:36,639
checked some aws access keys into a

147
00:05:36,639 --> 00:05:38,000
publicly available github

148
00:05:38,000 --> 00:05:40,160
repository to see how long it would take

149
00:05:40,160 --> 00:05:41,680
for hackers to find them

150
00:05:41,680 --> 00:05:43,520
they say they were accessed three

151
00:05:43,520 --> 00:05:46,080
minutes later

152
00:05:46,080 --> 00:05:48,320
when the repo is public that means the

153
00:05:48,320 --> 00:05:49,680
keys can be compromised

154
00:05:49,680 --> 00:05:53,199
in three minutes or less remember that

155
00:05:53,199 --> 00:05:54,880
if they get your keys they can do

156
00:05:54,880 --> 00:05:56,800
anything that you can

157
00:05:56,800 --> 00:05:58,720
up to and including view and copy your

158
00:05:58,720 --> 00:05:59,919
customer data

159
00:05:59,919 --> 00:06:03,440
or bitcoin mining

160
00:06:03,440 --> 00:06:06,479
there is a service out there that a site

161
00:06:06,479 --> 00:06:08,000
that tracks public commits of

162
00:06:08,000 --> 00:06:10,400
interesting information live

163
00:06:10,400 --> 00:06:12,400
so this is a screenshot of some of the

164
00:06:12,400 --> 00:06:14,800
things that it found

165
00:06:14,800 --> 00:06:18,400
google oauth keys and an api key in this

166
00:06:18,400 --> 00:06:19,280
example

167
00:06:19,280 --> 00:06:22,319
it can spot your aws access keys as well

168
00:06:22,319 --> 00:06:25,600
and usernames and passwords and ssh keys

169
00:06:25,600 --> 00:06:27,199
and a lot of other kinds of things like

170
00:06:27,199 --> 00:06:28,720
that

171
00:06:28,720 --> 00:06:31,199
now you can build a wall of shame for

172
00:06:31,199 --> 00:06:32,240
your office

173
00:06:32,240 --> 00:06:33,840
or go to a public website and watch

174
00:06:33,840 --> 00:06:36,000
those commits fly by to just remind you

175
00:06:36,000 --> 00:06:36,319
that

176
00:06:36,319 --> 00:06:37,919
people don't always think before they

177
00:06:37,919 --> 00:06:40,240
commit

178
00:06:40,240 --> 00:06:42,639
so if you're like me and you don't

179
00:06:42,639 --> 00:06:43,280
actually

180
00:06:43,280 --> 00:06:46,400
like a wall of shame what you can do to

181
00:06:46,400 --> 00:06:48,240
figure out that something is in your

182
00:06:48,240 --> 00:06:49,759
code is you can use the source code

183
00:06:49,759 --> 00:06:50,880
scanner

184
00:06:50,880 --> 00:06:52,560
now tanya talked a little bit about

185
00:06:52,560 --> 00:06:53,919
these um

186
00:06:53,919 --> 00:06:56,639
there are a bunch of different types out

187
00:06:56,639 --> 00:06:58,319
there the three that i'm calling out

188
00:06:58,319 --> 00:06:59,520
right now are the ones that i've

189
00:06:59,520 --> 00:07:01,599
personally played around with

190
00:07:01,599 --> 00:07:03,599
truffle hog gets secrets and text

191
00:07:03,599 --> 00:07:04,639
secrets

192
00:07:04,639 --> 00:07:06,000
and they can either look through the

193
00:07:06,000 --> 00:07:07,840
repository after the code has been

194
00:07:07,840 --> 00:07:08,560
checked in

195
00:07:08,560 --> 00:07:11,840
which is truffle hog and get secrets um

196
00:07:11,840 --> 00:07:14,000
or also detect secrets or you can use

197
00:07:14,000 --> 00:07:16,240
them as a pre-commit hook

198
00:07:16,240 --> 00:07:18,319
which detect secrets can do so it'll

199
00:07:18,319 --> 00:07:20,639
warn you before you even check it in

200
00:07:20,639 --> 00:07:22,240
and each one of them is slightly

201
00:07:22,240 --> 00:07:23,919
different one may work

202
00:07:23,919 --> 00:07:26,720
better for you than another play around

203
00:07:26,720 --> 00:07:28,720
with them give them a try

204
00:07:28,720 --> 00:07:31,599
now okay well wait what if you run this

205
00:07:31,599 --> 00:07:33,360
against one of your repos and you find

206
00:07:33,360 --> 00:07:34,639
something what if you sent

207
00:07:34,639 --> 00:07:37,680
checked in some sensitive information

208
00:07:37,680 --> 00:07:41,120
don't panic if you can the best thing to

209
00:07:41,120 --> 00:07:42,960
do first is rotate the key

210
00:07:42,960 --> 00:07:45,840
now sometimes you can't and that happens

211
00:07:45,840 --> 00:07:47,039
and

212
00:07:47,039 --> 00:07:50,479
it's not ideal but there you have it

213
00:07:50,479 --> 00:07:52,560
if you do panic and you commit over it

214
00:07:52,560 --> 00:07:54,400
with a version of the code without that

215
00:07:54,400 --> 00:07:56,400
sensitive information

216
00:07:56,400 --> 00:07:58,560
then the sensitive information is still

217
00:07:58,560 --> 00:08:00,000
in your commit history you just have to

218
00:08:00,000 --> 00:08:01,520
go back one commit and you'll see it

219
00:08:01,520 --> 00:08:03,520
there and in the diffs forever

220
00:08:03,520 --> 00:08:05,280
better way to handle it is to delete the

221
00:08:05,280 --> 00:08:07,919
commit that contains the access key

222
00:08:07,919 --> 00:08:10,000
and then do a new commit without that

223
00:08:10,000 --> 00:08:11,680
information

224
00:08:11,680 --> 00:08:14,560
by default truffle hub searches your

225
00:08:14,560 --> 00:08:16,160
commit history as well as your current

226
00:08:16,160 --> 00:08:17,520
commit

227
00:08:17,520 --> 00:08:20,479
so that's really useful if you want to

228
00:08:20,479 --> 00:08:22,479
look back and see how people's practices

229
00:08:22,479 --> 00:08:24,879
have changed perhaps

230
00:08:24,879 --> 00:08:26,800
but you do have to tell both git secrets

231
00:08:26,800 --> 00:08:28,160
and detect secrets to look

232
00:08:28,160 --> 00:08:31,120
back in the history

233
00:08:31,680 --> 00:08:34,880
so okay maybe there have been some keys

234
00:08:34,880 --> 00:08:36,159
that were exposed how do you know if

235
00:08:36,159 --> 00:08:36,719
somebody

236
00:08:36,719 --> 00:08:40,399
used them um you can watch your cloud

237
00:08:40,399 --> 00:08:41,200
trail logs

238
00:08:41,200 --> 00:08:44,560
but many services like s3 don't log

239
00:08:44,560 --> 00:08:46,480
read activity unless they're configured

240
00:08:46,480 --> 00:08:48,959
to and you still have the problem of

241
00:08:48,959 --> 00:08:50,959
being able to pick out what is malicious

242
00:08:50,959 --> 00:08:53,440
activity and what's normal activity

243
00:08:53,440 --> 00:08:55,760
this is where the idea of a honey pot or

244
00:08:55,760 --> 00:08:57,760
a honey token comes in

245
00:08:57,760 --> 00:08:59,680
honey pots are the lures that people set

246
00:08:59,680 --> 00:09:01,600
up to invest interest and trap

247
00:09:01,600 --> 00:09:04,160
hackers its data so intriguing that

248
00:09:04,160 --> 00:09:05,920
people will be drawn to investigate it

249
00:09:05,920 --> 00:09:09,120
things like hr database 2020 bonus

250
00:09:09,120 --> 00:09:10,160
schedule

251
00:09:10,160 --> 00:09:11,839
this is the same kind of things that

252
00:09:11,839 --> 00:09:14,720
people use as leaders to get

253
00:09:14,720 --> 00:09:17,200
you to click in a phishing email um

254
00:09:17,200 --> 00:09:17,760
they're

255
00:09:17,760 --> 00:09:19,920
you know inherently compelling hey let's

256
00:09:19,920 --> 00:09:22,320
find out about money

257
00:09:22,320 --> 00:09:24,240
side note the first use of a honeypot

258
00:09:24,240 --> 00:09:25,920
technique that i know of is in clifford

259
00:09:25,920 --> 00:09:27,600
stohl's book the cuckoo's egg

260
00:09:27,600 --> 00:09:29,600
which is a very early computer security

261
00:09:29,600 --> 00:09:30,880
and forensics book

262
00:09:30,880 --> 00:09:32,959
and it's a great read especially if

263
00:09:32,959 --> 00:09:34,720
you're like me and you spend a lot of

264
00:09:34,720 --> 00:09:35,440
time

265
00:09:35,440 --> 00:09:38,480
working on unix systems so

266
00:09:38,480 --> 00:09:40,800
okay how do you do a honeypot how do you

267
00:09:40,800 --> 00:09:41,600
do

268
00:09:41,600 --> 00:09:43,920
a honey token let's say you store some

269
00:09:43,920 --> 00:09:45,279
kind of private data

270
00:09:45,279 --> 00:09:46,880
you don't want to search the internet

271
00:09:46,880 --> 00:09:48,240
for that data because then you've

272
00:09:48,240 --> 00:09:50,240
exposed it to whatever tool you're using

273
00:09:50,240 --> 00:09:51,519
to search

274
00:09:51,519 --> 00:09:54,560
right that's bad so use fake data

275
00:09:54,560 --> 00:09:56,240
people came up with the idea of putting

276
00:09:56,240 --> 00:09:58,160
honey tokens into their databases or

277
00:09:58,160 --> 00:09:59,680
into documents so they could figure out

278
00:09:59,680 --> 00:10:01,440
when someone was accessing data they

279
00:10:01,440 --> 00:10:02,320
shouldn't

280
00:10:02,320 --> 00:10:03,839
because they were also accessing that

281
00:10:03,839 --> 00:10:06,480
fake data canary tokens are a free

282
00:10:06,480 --> 00:10:07,920
variant of that idea

283
00:10:07,920 --> 00:10:10,079
they have a bunch of different formats

284
00:10:10,079 --> 00:10:11,839
and alerts can be generated when the

285
00:10:11,839 --> 00:10:13,440
token is accessed

286
00:10:13,440 --> 00:10:15,920
either to an email address or a web hook

287
00:10:15,920 --> 00:10:18,079
and if your developers are like my

288
00:10:18,079 --> 00:10:19,519
developers

289
00:10:19,519 --> 00:10:21,519
they'll kind of find this idea kind of

290
00:10:21,519 --> 00:10:23,360
fun and it's a

291
00:10:23,360 --> 00:10:26,000
nice way to play around with some

292
00:10:26,000 --> 00:10:27,519
security concepts

293
00:10:27,519 --> 00:10:29,120
and get them thinking about who can

294
00:10:29,120 --> 00:10:31,360
access their data

295
00:10:31,360 --> 00:10:36,720
so nightmare number two old access keys

296
00:10:36,720 --> 00:10:39,920
i took this screenshot from

297
00:10:39,920 --> 00:10:43,200
a production account at one point

298
00:10:43,200 --> 00:10:45,839
uh in aws i won't say if it's current

299
00:10:45,839 --> 00:10:47,600
job or past job but

300
00:10:47,600 --> 00:10:51,360
this was production and 1626 days that

301
00:10:51,360 --> 00:10:53,680
key on the bottom

302
00:10:53,680 --> 00:10:55,680
four and a half years old but it was

303
00:10:55,680 --> 00:10:57,680
still being used that very day

304
00:10:57,680 --> 00:11:01,040
and hey now it's even older than that

305
00:11:01,040 --> 00:11:04,320
access keys don't automatically retire

306
00:11:04,320 --> 00:11:06,399
if you think about it four and a half

307
00:11:06,399 --> 00:11:07,920
years is older than

308
00:11:07,920 --> 00:11:10,800
your standard tech refresh for a laptop

309
00:11:10,800 --> 00:11:11,440
and

310
00:11:11,440 --> 00:11:13,920
most techs are gonna jump on that brand

311
00:11:13,920 --> 00:11:15,440
new laptop as soon as they can they're

312
00:11:15,440 --> 00:11:17,040
not going to want to

313
00:11:17,040 --> 00:11:18,720
stick with one that's four and a half

314
00:11:18,720 --> 00:11:21,600
years old so this key probably went from

315
00:11:21,600 --> 00:11:24,959
an old laptop to a new laptop and

316
00:11:24,959 --> 00:11:28,000
think about your hard drive and

317
00:11:28,000 --> 00:11:30,640
laptop decommissioning processes do you

318
00:11:30,640 --> 00:11:33,040
clear those out properly

319
00:11:33,040 --> 00:11:35,839
do you wipe drives before you get rid of

320
00:11:35,839 --> 00:11:37,600
the laptops in whatever way

321
00:11:37,600 --> 00:11:41,120
if not maybe somebody just bought that

322
00:11:41,120 --> 00:11:43,519
access key on ebay and they're able to

323
00:11:43,519 --> 00:11:44,720
use it

324
00:11:44,720 --> 00:11:48,160
that would suck my

325
00:11:48,160 --> 00:11:50,399
philosophy is hey the longer an access

326
00:11:50,399 --> 00:11:51,600
key is around

327
00:11:51,600 --> 00:11:53,920
the longer you have a chance for

328
00:11:53,920 --> 00:11:54,959
somebody to

329
00:11:54,959 --> 00:11:57,040
make a mistake and to have something

330
00:11:57,040 --> 00:11:58,639
happen to that key accidentally

331
00:11:58,639 --> 00:12:00,959
so it's probably bad to keep them around

332
00:12:00,959 --> 00:12:01,839
for too long

333
00:12:01,839 --> 00:12:04,240
so what's the solution you rotate your

334
00:12:04,240 --> 00:12:05,680
access keys

335
00:12:05,680 --> 00:12:07,600
if i know that any key that's on disk

336
00:12:07,600 --> 00:12:09,120
somewhere will stop working

337
00:12:09,120 --> 00:12:12,880
tomorrow it's much less of a nightmare

338
00:12:12,880 --> 00:12:14,880
now there are tools that will help you

339
00:12:14,880 --> 00:12:16,720
do this automatically if you want to you

340
00:12:16,720 --> 00:12:18,160
can do it manually

341
00:12:18,160 --> 00:12:20,959
um this one tool aws rotate i am keys

342
00:12:20,959 --> 00:12:23,760
works for end user credentials

343
00:12:23,760 --> 00:12:25,519
best for end user credentials that only

344
00:12:25,519 --> 00:12:27,120
need to be found in one place

345
00:12:27,120 --> 00:12:29,839
by rotating them every day but that

346
00:12:29,839 --> 00:12:32,560
doesn't work for application users

347
00:12:32,560 --> 00:12:35,680
say you've got two web hosts

348
00:12:35,680 --> 00:12:37,760
and they each need to have access to the

349
00:12:37,760 --> 00:12:40,000
credentials if you rotate on host a then

350
00:12:40,000 --> 00:12:40,480
host b

351
00:12:40,480 --> 00:12:44,079
is out of luck um once it's been rotated

352
00:12:44,079 --> 00:12:46,959
still the thing that i like about using

353
00:12:46,959 --> 00:12:47,600
this tool

354
00:12:47,600 --> 00:12:49,920
is once again it's an intro to the

355
00:12:49,920 --> 00:12:50,800
developers

356
00:12:50,800 --> 00:12:53,839
to the practice of rotating keys

357
00:12:53,839 --> 00:12:55,839
and once they start thinking about oh i

358
00:12:55,839 --> 00:12:58,639
should rotate my personal keys every day

359
00:12:58,639 --> 00:13:00,399
then they're more open to the idea of

360
00:13:00,399 --> 00:13:02,959
hey i should rotate my application keys

361
00:13:02,959 --> 00:13:06,079
as well so that

362
00:13:06,079 --> 00:13:09,120
leads me to my next nightmare access

363
00:13:09,120 --> 00:13:10,240
keys on disk

364
00:13:10,240 --> 00:13:11,839
it's related to the previous nightmare

365
00:13:11,839 --> 00:13:14,560
of course my previous two scenarios

366
00:13:14,560 --> 00:13:16,639
the access keys are sitting there

367
00:13:16,639 --> 00:13:17,760
generally they

368
00:13:17,760 --> 00:13:20,399
are on disk even if they do expire

369
00:13:20,399 --> 00:13:21,839
quickly they're still sitting right

370
00:13:21,839 --> 00:13:24,320
there for the taking

371
00:13:24,320 --> 00:13:26,079
so the two places where people are

372
00:13:26,079 --> 00:13:28,320
likely to lose laptops are bars

373
00:13:28,320 --> 00:13:30,639
and cars at the moment our laptops

374
00:13:30,639 --> 00:13:32,399
aren't spending a lot of time in either

375
00:13:32,399 --> 00:13:33,519
bars or cars

376
00:13:33,519 --> 00:13:36,320
but the threat is still there disc

377
00:13:36,320 --> 00:13:36,959
encryption

378
00:13:36,959 --> 00:13:39,440
doesn't protect you from every attack

379
00:13:39,440 --> 00:13:40,639
though fall vault 2

380
00:13:40,639 --> 00:13:42,959
on the mac which i personally use does a

381
00:13:42,959 --> 00:13:44,720
better job at protecting

382
00:13:44,720 --> 00:13:46,720
against specific attacks in version 1

383
00:13:46,720 --> 00:13:48,320
and they're continuing to make

384
00:13:48,320 --> 00:13:50,720
improvements in that

385
00:13:50,720 --> 00:13:52,959
so here are some other ways to expose

386
00:13:52,959 --> 00:13:54,399
keys on disk

387
00:13:54,399 --> 00:13:55,920
you can drop them in environment

388
00:13:55,920 --> 00:13:57,680
variables you can

389
00:13:57,680 --> 00:14:00,880
if your developer has decided to be

390
00:14:00,880 --> 00:14:02,880
really really verbose in their debug

391
00:14:02,880 --> 00:14:04,480
logging

392
00:14:04,480 --> 00:14:08,000
they can write them to log files oops

393
00:14:08,000 --> 00:14:11,440
or sorry capital one they can

394
00:14:11,440 --> 00:14:13,440
accidentally expose them through the

395
00:14:13,440 --> 00:14:16,399
amazon metadata service v1

396
00:14:16,399 --> 00:14:18,560
along with a nice dose of server side

397
00:14:18,560 --> 00:14:21,600
request forgery

398
00:14:21,600 --> 00:14:25,519
in any case those keys are are there

399
00:14:25,519 --> 00:14:28,560
they are accessible how do you hide them

400
00:14:28,560 --> 00:14:30,800
well there are vault tools that you can

401
00:14:30,800 --> 00:14:32,480
use to store your keys

402
00:14:32,480 --> 00:14:35,199
in a key store and interact with the

403
00:14:35,199 --> 00:14:36,000
pointers

404
00:14:36,000 --> 00:14:39,680
and not the actual keys aws vault

405
00:14:39,680 --> 00:14:42,079
stores your keys in your mac's keychain

406
00:14:42,079 --> 00:14:43,440
automatically

407
00:14:43,440 --> 00:14:45,279
where hashicorps vault will work for

408
00:14:45,279 --> 00:14:46,880
keys that are meant to be accessed from

409
00:14:46,880 --> 00:14:48,639
more than one place

410
00:14:48,639 --> 00:14:51,920
um i just i try to put in the

411
00:14:51,920 --> 00:14:54,160
recommendation i don't recommend putting

412
00:14:54,160 --> 00:14:57,120
access keys for sharing into a password

413
00:14:57,120 --> 00:14:58,800
manager because

414
00:14:58,800 --> 00:15:02,000
there is no proof when a secret gets

415
00:15:02,000 --> 00:15:02,880
accessed

416
00:15:02,880 --> 00:15:04,880
which reduces the accountability you can

417
00:15:04,880 --> 00:15:06,959
you can no longer say oh i know exactly

418
00:15:06,959 --> 00:15:07,600
who

419
00:15:07,600 --> 00:15:09,600
has retrieved that information and who

420
00:15:09,600 --> 00:15:11,600
is using it

421
00:15:11,600 --> 00:15:14,639
so the next step beyond

422
00:15:14,639 --> 00:15:17,680
having some kind of vault solution

423
00:15:17,680 --> 00:15:20,320
is don't use permanent access keys at

424
00:15:20,320 --> 00:15:21,279
all this is

425
00:15:21,279 --> 00:15:24,240
the way that we've evolved our thinking

426
00:15:24,240 --> 00:15:26,560
security token service can generate

427
00:15:26,560 --> 00:15:28,240
temporary credentials and those

428
00:15:28,240 --> 00:15:29,600
credentials obviously since they're

429
00:15:29,600 --> 00:15:30,560
temporary

430
00:15:30,560 --> 00:15:34,800
inherently expire and then you can use

431
00:15:34,800 --> 00:15:38,240
security token service with within the

432
00:15:38,240 --> 00:15:40,160
context of roles

433
00:15:40,160 --> 00:15:42,720
which can be grant set up and you assign

434
00:15:42,720 --> 00:15:44,160
policies to them

435
00:15:44,160 --> 00:15:46,560
you can use cross account roles which

436
00:15:46,560 --> 00:15:48,000
will grant you access from

437
00:15:48,000 --> 00:15:51,279
one account into another account

438
00:15:51,279 --> 00:15:54,000
and they can be used by instances or

439
00:15:54,000 --> 00:15:56,800
applications

440
00:15:56,959 --> 00:15:59,519
so with that let's jump over to some

441
00:15:59,519 --> 00:16:00,560
best practices

442
00:16:00,560 --> 00:16:02,720
quick reminder i know it's a short talk

443
00:16:02,720 --> 00:16:05,199
but i like to present things in multiple

444
00:16:05,199 --> 00:16:06,399
different formats

445
00:16:06,399 --> 00:16:09,279
so if you were napping for the last

446
00:16:09,279 --> 00:16:10,639
10-15 minutes

447
00:16:10,639 --> 00:16:13,199
here's a quick meme to catch you up you

448
00:16:13,199 --> 00:16:14,240
can

449
00:16:14,240 --> 00:16:16,240
you should definitely rotate your access

450
00:16:16,240 --> 00:16:18,720
keys if you find them

451
00:16:18,720 --> 00:16:20,399
in your source code using a source code

452
00:16:20,399 --> 00:16:22,320
scanner and

453
00:16:22,320 --> 00:16:24,000
not only should you rotate them

454
00:16:24,000 --> 00:16:26,880
sometimes maybe you should rotate them

455
00:16:26,880 --> 00:16:30,000
automatically so that you don't have to

456
00:16:30,000 --> 00:16:32,240
remember oh gosh was i supposed to

457
00:16:32,240 --> 00:16:35,440
rotate my keys this week or next week

458
00:16:35,440 --> 00:16:38,320
just have it happen automatically better

459
00:16:38,320 --> 00:16:38,880
yet

460
00:16:38,880 --> 00:16:41,279
use some kind of vault tool to store

461
00:16:41,279 --> 00:16:43,199
your keys encrypted

462
00:16:43,199 --> 00:16:46,399
like aws fault or hashicorp vault

463
00:16:46,399 --> 00:16:49,759
or if you can convince your devs that

464
00:16:49,759 --> 00:16:51,199
this is the thing to do

465
00:16:51,199 --> 00:16:53,759
use roles instead of keys or instead of

466
00:16:53,759 --> 00:16:55,759
usernames or passwords

467
00:16:55,759 --> 00:16:57,519
it lets you use short live credentials

468
00:16:57,519 --> 00:16:59,759
and lowers your exposure risk

469
00:16:59,759 --> 00:17:02,320
and as a follow-up consider using canary

470
00:17:02,320 --> 00:17:03,600
tokens near your most

471
00:17:03,600 --> 00:17:06,959
sensitive data so as i said i like to

472
00:17:06,959 --> 00:17:08,959
say things in a couple of different ways

473
00:17:08,959 --> 00:17:12,160
to make sure they they

474
00:17:12,160 --> 00:17:14,880
sync in with my developers this started

475
00:17:14,880 --> 00:17:16,720
out as an internal tech talk so i have

476
00:17:16,720 --> 00:17:17,439
some

477
00:17:17,439 --> 00:17:20,319
do's and don'ts here don't have

478
00:17:20,319 --> 00:17:22,000
permanently valid keys sitting around in

479
00:17:22,000 --> 00:17:22,880
your source code

480
00:17:22,880 --> 00:17:25,039
don't have any keys sitting in your

481
00:17:25,039 --> 00:17:26,160
source code

482
00:17:26,160 --> 00:17:27,919
don't put them don't let them sit on

483
00:17:27,919 --> 00:17:30,320
disk don't load them into environment

484
00:17:30,320 --> 00:17:31,760
variables

485
00:17:31,760 --> 00:17:34,240
do have keys that are valid only for a

486
00:17:34,240 --> 00:17:36,480
short amount of time

487
00:17:36,480 --> 00:17:38,480
and have unique keys for each user and

488
00:17:38,480 --> 00:17:40,160
application and

489
00:17:40,160 --> 00:17:41,919
only request a key when you're about to

490
00:17:41,919 --> 00:17:44,000
use it so that it's not

491
00:17:44,000 --> 00:17:45,679
sitting there accessible for anybody

492
00:17:45,679 --> 00:17:47,280
else um

493
00:17:47,280 --> 00:17:50,480
what are the next steps for us we're

494
00:17:50,480 --> 00:17:50,960
looking

495
00:17:50,960 --> 00:17:54,000
at single sign-on with aws

496
00:17:54,000 --> 00:17:56,720
um aws has a single sign-on solution now

497
00:17:56,720 --> 00:17:58,000
they have

498
00:17:58,000 --> 00:18:01,760
some integrations with octa and other

499
00:18:01,760 --> 00:18:05,840
providers but before that here are some

500
00:18:05,840 --> 00:18:09,919
integrations that we were researching um

501
00:18:09,919 --> 00:18:11,840
that are out there that are open source

502
00:18:11,840 --> 00:18:13,440
that people are working on to keep

503
00:18:13,440 --> 00:18:17,039
maintaining as well and

504
00:18:17,039 --> 00:18:19,039
looks looks like an exciting next step

505
00:18:19,039 --> 00:18:20,960
because then we we can just trust our

506
00:18:20,960 --> 00:18:22,559
sso provider and

507
00:18:22,559 --> 00:18:24,559
we all have to trust our sso providers

508
00:18:24,559 --> 00:18:26,080
right

509
00:18:26,080 --> 00:18:29,120
so uh with that i have the references

510
00:18:29,120 --> 00:18:31,919
slide i put in there it's don't worry

511
00:18:31,919 --> 00:18:33,360
about it it's gonna be

512
00:18:33,360 --> 00:18:36,640
online um as i said i'm gonna

513
00:18:36,640 --> 00:18:38,880
tweet this out and put it in in scad

514
00:18:38,880 --> 00:18:40,320
after the talk

515
00:18:40,320 --> 00:18:43,520
and with that i spoke faster than i

516
00:18:43,520 --> 00:18:44,480
expected to

517
00:18:44,480 --> 00:18:47,840
um i am all done with the material

518
00:18:47,840 --> 00:18:57,840
and i would be happy to take questions

519
00:19:51,679 --> 00:19:54,240
looks like you do have one question yeah

520
00:19:54,240 --> 00:19:55,919
sorry don't mind my

521
00:19:55,919 --> 00:19:59,200
co co-presenter

522
00:19:59,200 --> 00:20:01,919
yes uh from mary wang she asked uh what

523
00:20:01,919 --> 00:20:02,720
do you think about

524
00:20:02,720 --> 00:20:06,799
hsn hsm is that very popular

525
00:20:06,799 --> 00:20:10,480
so hsm is a hardware security module

526
00:20:10,480 --> 00:20:13,840
um they are ways of

527
00:20:13,840 --> 00:20:18,159
doing key management um

528
00:20:18,159 --> 00:20:21,200
they are

529
00:20:21,200 --> 00:20:25,360
it's it's kind of a next stage of

530
00:20:25,360 --> 00:20:29,120
um or a slightly different stage of

531
00:20:29,120 --> 00:20:32,000
dealing with uh with your your key

532
00:20:32,000 --> 00:20:32,880
material

533
00:20:32,880 --> 00:20:36,480
um you can you can think of them as

534
00:20:36,480 --> 00:20:39,520
kind of loosely as a um as an

535
00:20:39,520 --> 00:20:40,880
alternative to vaults

536
00:20:40,880 --> 00:20:44,000
although they are um there

537
00:20:44,000 --> 00:20:46,720
are other uses beyond just the things

538
00:20:46,720 --> 00:20:48,640
that you put in fault which is purely a

539
00:20:48,640 --> 00:20:49,440
store

540
00:20:49,440 --> 00:20:52,559
um i know that

541
00:20:52,559 --> 00:20:55,120
that if you're looking at managing uh

542
00:20:55,120 --> 00:20:56,080
customer

543
00:20:56,080 --> 00:20:58,480
master keys for data that that is

544
00:20:58,480 --> 00:21:00,000
definitely the way to go

545
00:21:00,000 --> 00:21:03,120
um that's kind of out of the scope of

546
00:21:03,120 --> 00:21:04,960
what i'm talking about here which is

547
00:21:04,960 --> 00:21:06,799
really just those aws

548
00:21:06,799 --> 00:21:10,159
access keys um in that context

549
00:21:10,159 --> 00:21:11,600
i would probably say that they are

550
00:21:11,600 --> 00:21:14,000
overkill um but there are plenty of

551
00:21:14,000 --> 00:21:14,880
other contacts

552
00:21:14,880 --> 00:21:17,440
where you would want to look into them

553
00:21:17,440 --> 00:21:31,840
for sure

554
00:21:43,760 --> 00:21:47,360
all right do we have any other questions

555
00:21:47,679 --> 00:21:51,600
um oh hey allison have i had issues with

556
00:21:51,600 --> 00:21:53,600
developers refusing to move to best

557
00:21:53,600 --> 00:21:54,400
practices

558
00:21:54,400 --> 00:21:57,120
and or over use of permissions oh

559
00:21:57,120 --> 00:21:58,720
absolutely

560
00:21:58,720 --> 00:22:02,400
um yeah definitely um there could be a

561
00:22:02,400 --> 00:22:04,720
there i've seen the philosophy plenty of

562
00:22:04,720 --> 00:22:07,280
times where a developer is just

563
00:22:07,280 --> 00:22:08,960
i want to get this done i want to get

564
00:22:08,960 --> 00:22:10,320
this out

565
00:22:10,320 --> 00:22:12,320
um you know whether it's from they're

566
00:22:12,320 --> 00:22:13,600
building something in a docker

567
00:22:13,600 --> 00:22:15,200
environment on their local machine and

568
00:22:15,200 --> 00:22:17,440
they don't worry about permissions

569
00:22:17,440 --> 00:22:19,039
and then they push that container to

570
00:22:19,039 --> 00:22:20,799
prod um

571
00:22:20,799 --> 00:22:23,600
or in the dev account i let my

572
00:22:23,600 --> 00:22:25,280
developers have pretty much admin

573
00:22:25,280 --> 00:22:27,039
privileges so they can play with new

574
00:22:27,039 --> 00:22:28,240
services

575
00:22:28,240 --> 00:22:31,280
or tweak things as they need to and

576
00:22:31,280 --> 00:22:34,320
sometimes it's hard getting them to

577
00:22:34,320 --> 00:22:36,720
give those up as they're moving through

578
00:22:36,720 --> 00:22:38,080
the promotion process

579
00:22:38,080 --> 00:22:40,240
into our staging or our production

580
00:22:40,240 --> 00:22:41,120
accounts

581
00:22:41,120 --> 00:22:46,080
um it's a lot of separate stories

582
00:22:46,080 --> 00:22:48,399
um

583
00:22:49,679 --> 00:22:52,799
so how do you quickly how do you deal

584
00:22:52,799 --> 00:22:55,360
with that

585
00:22:56,320 --> 00:23:00,559
i like to have a discussion of risks

586
00:23:00,559 --> 00:23:04,559
around around those privileges

587
00:23:04,559 --> 00:23:06,880
if you have a risk assessment if you do

588
00:23:06,880 --> 00:23:08,559
threat modeling

589
00:23:08,559 --> 00:23:12,000
uh that's a way that the developers can

590
00:23:12,000 --> 00:23:15,440
help can find out that it's

591
00:23:15,440 --> 00:23:16,880
potentially it's really bad for the

592
00:23:16,880 --> 00:23:18,720
company to do things that way and get

593
00:23:18,720 --> 00:23:20,320
them bought in

594
00:23:20,320 --> 00:23:22,559
um all right i see one last question

595
00:23:22,559 --> 00:23:24,559
there is there a good way of scanning

596
00:23:24,559 --> 00:23:26,480
leaks of corporate keys that are already

597
00:23:26,480 --> 00:23:29,840
out in public github repos so you can

598
00:23:29,840 --> 00:23:32,640
um the tools that i was mentioning for

599
00:23:32,640 --> 00:23:34,320
source code scanning

600
00:23:34,320 --> 00:23:36,480
you can run them against a public repo

601
00:23:36,480 --> 00:23:38,480
against a private repo you just need to

602
00:23:38,480 --> 00:23:39,200
download it

603
00:23:39,200 --> 00:23:43,039
and run it and there you go um

604
00:23:43,039 --> 00:23:46,640
you can so yeah just you just need a

605
00:23:46,640 --> 00:23:48,640
copy of the repo and the scanner

606
00:23:48,640 --> 00:23:51,760
and go to town have fun or

607
00:23:51,760 --> 00:23:54,240
or don't have fun and i hope it doesn't

608
00:23:54,240 --> 00:23:55,760
spawn any nightmares

609
00:23:55,760 --> 00:23:58,158
for you

610
00:24:03,520 --> 00:24:05,840
so if that's it thank you so much diana

611
00:24:05,840 --> 00:24:06,640
initiative

612
00:24:06,640 --> 00:24:09,360
for inviting me to speak stick around

613
00:24:09,360 --> 00:24:11,039
there's going to be lots of amazing

614
00:24:11,039 --> 00:24:11,919
talks

615
00:24:11,919 --> 00:24:15,080
and thank you so much for your time and

616
00:24:15,080 --> 00:24:18,080
attention

