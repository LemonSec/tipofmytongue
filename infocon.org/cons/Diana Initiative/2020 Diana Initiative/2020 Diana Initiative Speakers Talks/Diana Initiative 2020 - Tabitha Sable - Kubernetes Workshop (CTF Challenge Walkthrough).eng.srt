1
00:00:12,320 --> 00:00:13,040
hey

2
00:00:13,040 --> 00:00:15,519
so hey everybody um thank you so much

3
00:00:15,519 --> 00:00:17,279
for for coming on over

4
00:00:17,279 --> 00:00:20,240
because uh i want to look at this

5
00:00:20,240 --> 00:00:22,480
kubernetes challenge number 19

6
00:00:22,480 --> 00:00:25,039
and i wanted to wanted to share it with

7
00:00:25,039 --> 00:00:25,840
everybody

8
00:00:25,840 --> 00:00:29,119
so yeah i'm i'm tabby sable i spend a

9
00:00:29,119 --> 00:00:30,000
fair amount of time

10
00:00:30,000 --> 00:00:33,120
dealing with kubernetes um i do

11
00:00:33,120 --> 00:00:35,040
kubernetes at my day job

12
00:00:35,040 --> 00:00:37,520
it's got a fabulous community and it's

13
00:00:37,520 --> 00:00:39,280
got really fun

14
00:00:39,280 --> 00:00:42,000
interesting security research going on

15
00:00:42,000 --> 00:00:42,640
because

16
00:00:42,640 --> 00:00:44,800
it's quite new and we're all still you

17
00:00:44,800 --> 00:00:46,239
know figuring out exactly what the

18
00:00:46,239 --> 00:00:47,600
implications of it are

19
00:00:47,600 --> 00:00:50,480
so i made this challenge as a way to

20
00:00:50,480 --> 00:00:51,440
help encourage

21
00:00:51,440 --> 00:00:53,760
people who had never seen or used

22
00:00:53,760 --> 00:00:55,199
kubernetes before

23
00:00:55,199 --> 00:00:58,239
to play with it a little bit and so it's

24
00:00:58,239 --> 00:00:59,680
got a fair amount of like

25
00:00:59,680 --> 00:01:02,879
built-in self-hinting and uh

26
00:01:02,879 --> 00:01:04,799
hopefully it's approachable for somebody

27
00:01:04,799 --> 00:01:06,880
that's never used the system before

28
00:01:06,880 --> 00:01:09,200
but uh we'll walk through it now and i

29
00:01:09,200 --> 00:01:10,479
hope that that will be

30
00:01:10,479 --> 00:01:13,600
an interesting experience for everybody

31
00:01:13,600 --> 00:01:17,119
so we see here on the screen i'm logged

32
00:01:17,119 --> 00:01:20,000
into the try hack me page i've got the

33
00:01:20,000 --> 00:01:21,040
task open

34
00:01:21,040 --> 00:01:24,000
i've deployed the vm and got an hour and

35
00:01:24,000 --> 00:01:25,680
48 minutes left on it

36
00:01:25,680 --> 00:01:27,600
so we'll just start by reading out the

37
00:01:27,600 --> 00:01:29,360
challenge here so

38
00:01:29,360 --> 00:01:30,560
it says we've provisioned some

39
00:01:30,560 --> 00:01:33,920
kubernetes resources find them here

40
00:01:33,920 --> 00:01:36,000
um and let us know if you find any

41
00:01:36,000 --> 00:01:37,600
security issues so i'm gonna guess

42
00:01:37,600 --> 00:01:38,799
there's gonna be some security issues

43
00:01:38,799 --> 00:01:39,360
here

44
00:01:39,360 --> 00:01:42,399
so i'll start by downloading this file

45
00:01:42,399 --> 00:01:44,000
and then we'll figure out what to do

46
00:01:44,000 --> 00:01:46,079
with it so

47
00:01:46,079 --> 00:01:50,240
i like to make a new directory

48
00:01:50,240 --> 00:01:51,920
when i'm working on the ctf challenge

49
00:01:51,920 --> 00:01:53,360
and put all of the

50
00:01:53,360 --> 00:01:56,560
files into it so let's go down

51
00:01:56,560 --> 00:01:58,719
to the shell here is this big enough can

52
00:01:58,719 --> 00:01:59,759
people read this

53
00:01:59,759 --> 00:02:01,680
or does this mean need to be made a

54
00:02:01,680 --> 00:02:04,479
little bit larger

55
00:02:07,360 --> 00:02:08,959
i'm going to just look in the directory

56
00:02:08,959 --> 00:02:11,038
here and see what this file looks like

57
00:02:11,038 --> 00:02:13,840
okay so it's some kind of config file

58
00:02:13,840 --> 00:02:16,080
list the api version

59
00:02:16,080 --> 00:02:19,440
certificate authority server

60
00:02:19,440 --> 00:02:22,879
name kubernetes um what do we got going

61
00:02:22,879 --> 00:02:23,760
on here

62
00:02:23,760 --> 00:02:27,040
um thank you so we'll go in

63
00:02:27,040 --> 00:02:28,560
and we'll just start by looking at the

64
00:02:28,560 --> 00:02:30,160
hints because let's let's assume for the

65
00:02:30,160 --> 00:02:31,920
sake of argument that uh we're all new

66
00:02:31,920 --> 00:02:32,959
to this

67
00:02:32,959 --> 00:02:34,640
so we'll look at the hint um and the

68
00:02:34,640 --> 00:02:36,000
hint is got a bunch

69
00:02:36,000 --> 00:02:38,160
of urls and stuff here so i'm gonna copy

70
00:02:38,160 --> 00:02:51,840
all of this and put it into a file

71
00:02:57,440 --> 00:03:00,480
all right well okay i'll get a copy of

72
00:03:00,480 --> 00:03:01,840
coop ctl that's

73
00:03:01,840 --> 00:03:06,000
uh if you're giving me uh

74
00:03:06,159 --> 00:03:07,840
given me this link i'm gonna guess this

75
00:03:07,840 --> 00:03:10,480
is gonna be quite important so we'll go

76
00:03:10,480 --> 00:03:11,519
here

77
00:03:11,519 --> 00:03:15,519
and uh see what this has to say

78
00:03:15,519 --> 00:03:17,920
um the kubernetes command line tool

79
00:03:17,920 --> 00:03:19,200
allows you to run commands against

80
00:03:19,200 --> 00:03:20,480
kubernetes clusters

81
00:03:20,480 --> 00:03:22,879
all right we can deploy applications

82
00:03:22,879 --> 00:03:24,400
inspect resources

83
00:03:24,400 --> 00:03:28,159
view logs okay so we're gonna

84
00:03:28,159 --> 00:03:30,879
download the latest release that looks

85
00:03:30,879 --> 00:03:33,840
fine

86
00:03:36,000 --> 00:03:39,920
uh so this is gonna curl to

87
00:03:39,920 --> 00:03:43,120
google api storage based on the stable

88
00:03:43,120 --> 00:03:43,680
release

89
00:03:43,680 --> 00:03:46,560
file yeah that that looks legit all

90
00:03:46,560 --> 00:03:48,400
right so here we go

91
00:03:48,400 --> 00:03:50,799
looks like we got one second left and

92
00:03:50,799 --> 00:03:54,319
now we got coop ctl

93
00:03:54,879 --> 00:03:58,159
we'll make it executable

94
00:03:59,120 --> 00:04:02,239
and okay cool it seems to work it's got

95
00:04:02,239 --> 00:04:03,760
a bunch of commands

96
00:04:03,760 --> 00:04:06,400
all right cool what else did we have in

97
00:04:06,400 --> 00:04:09,360
our notes here

98
00:04:10,000 --> 00:04:15,840
um here's uh

99
00:04:17,279 --> 00:04:19,680
so here's a uh here's a link to the

100
00:04:19,680 --> 00:04:21,918
kubernetes documentation

101
00:04:21,918 --> 00:04:25,280
i'm not going to make you all sit

102
00:04:25,280 --> 00:04:28,800
and uh and watch me read

103
00:04:28,800 --> 00:04:31,280
the kubernetes documentation but i will

104
00:04:31,280 --> 00:04:33,759
just pull it up on the screen

105
00:04:33,759 --> 00:04:36,720
real briefly here in order to uh how do

106
00:04:36,720 --> 00:04:38,160
we list resources

107
00:04:38,160 --> 00:04:40,080
deployments or resources which manage

108
00:04:40,080 --> 00:04:41,280
pod replicas

109
00:04:41,280 --> 00:04:44,720
okay so this all this is all kind of

110
00:04:44,720 --> 00:04:46,720
kind of fancy there's a lot of uh

111
00:04:46,720 --> 00:04:48,400
there's a lot of concepts involved

112
00:04:48,400 --> 00:04:51,600
in kubernetes so

113
00:04:51,600 --> 00:04:55,600
let's talk a little bit about

114
00:04:55,600 --> 00:04:59,120
what all these resources

115
00:04:59,120 --> 00:05:02,960
in kubernetes are

116
00:05:02,960 --> 00:05:06,639
so kubernetes is a system

117
00:05:06,639 --> 00:05:09,759
that manages resources and it does this

118
00:05:09,759 --> 00:05:12,479
based on this idea of control theory

119
00:05:12,479 --> 00:05:14,880
so there's a bunch of data structures

120
00:05:14,880 --> 00:05:16,000
and right now

121
00:05:16,000 --> 00:05:17,280
you know don't worry about what they are

122
00:05:17,280 --> 00:05:18,800
just think of them as data structures

123
00:05:18,800 --> 00:05:20,639
there's a deployment replica set

124
00:05:20,639 --> 00:05:22,880
daemon set pods containers all these

125
00:05:22,880 --> 00:05:24,000
things

126
00:05:24,000 --> 00:05:26,560
and there's arrows on this diagram that

127
00:05:26,560 --> 00:05:28,960
show that when you

128
00:05:28,960 --> 00:05:32,000
define one of these sorts of things

129
00:05:32,000 --> 00:05:34,080
it's defining directions for the

130
00:05:34,080 --> 00:05:35,199
creation of

131
00:05:35,199 --> 00:05:38,560
other data structures and so then

132
00:05:38,560 --> 00:05:41,440
there's software inside kubernetes that

133
00:05:41,440 --> 00:05:43,520
is always looking for oh

134
00:05:43,520 --> 00:05:45,280
is there a deployment that says i should

135
00:05:45,280 --> 00:05:46,639
make a replica set

136
00:05:46,639 --> 00:05:48,880
and does the replica set exist if it

137
00:05:48,880 --> 00:05:50,479
doesn't i better make it

138
00:05:50,479 --> 00:05:52,240
and then a different part of software

139
00:05:52,240 --> 00:05:54,080
that's looking for replica sets that are

140
00:05:54,080 --> 00:05:55,600
trying to make pods that don't have

141
00:05:55,600 --> 00:05:58,639
pods yet and so

142
00:05:58,639 --> 00:06:00,240
so the primary thing that you end up

143
00:06:00,240 --> 00:06:02,319
doing in kubernetes

144
00:06:02,319 --> 00:06:05,600
is defining these sorts of abstract

145
00:06:05,600 --> 00:06:07,520
things that you want to exist

146
00:06:07,520 --> 00:06:09,440
and then letting the system make them

147
00:06:09,440 --> 00:06:11,440
for you and then

148
00:06:11,440 --> 00:06:13,199
you have those abstract things defined

149
00:06:13,199 --> 00:06:15,759
such that when you finally get down to

150
00:06:15,759 --> 00:06:18,240
running containers then your containers

151
00:06:18,240 --> 00:06:19,919
have your applications or whatever you

152
00:06:19,919 --> 00:06:21,440
want to have running in them

153
00:06:21,440 --> 00:06:25,520
in them and then everything works so

154
00:06:25,520 --> 00:06:28,400
to let's look a little bit at what all

155
00:06:28,400 --> 00:06:30,960
of the software that makes that

156
00:06:30,960 --> 00:06:34,240
happen looks like so

157
00:06:34,240 --> 00:06:37,680
kubernetes came out of work at google

158
00:06:37,680 --> 00:06:40,400
and then later at other very large

159
00:06:40,400 --> 00:06:41,840
applications

160
00:06:41,840 --> 00:06:44,240
where they have really big scaling

161
00:06:44,240 --> 00:06:45,120
problems you know

162
00:06:45,120 --> 00:06:47,360
tens of thousands of nodes in order to

163
00:06:47,360 --> 00:06:49,280
handle very heavy user load

164
00:06:49,280 --> 00:06:52,160
and so kubernetes has a complicated

165
00:06:52,160 --> 00:06:53,680
microservice design

166
00:06:53,680 --> 00:06:55,759
so that that way each one of the

167
00:06:55,759 --> 00:06:57,280
different functions

168
00:06:57,280 --> 00:07:00,880
can you know be ramped up with numerous

169
00:07:00,880 --> 00:07:02,479
copies in order to handle whatever the

170
00:07:02,479 --> 00:07:03,360
load is

171
00:07:03,360 --> 00:07:05,599
and so in blue here we've got this

172
00:07:05,599 --> 00:07:06,720
database it's called

173
00:07:06,720 --> 00:07:09,919
etcd it's a distributed database it's

174
00:07:09,919 --> 00:07:12,319
pretty good at not losing data even when

175
00:07:12,319 --> 00:07:14,720
you have copies of it go away

176
00:07:14,720 --> 00:07:16,400
and it's the only part of the whole

177
00:07:16,400 --> 00:07:18,400
kubernetes system that is stateful it's

178
00:07:18,400 --> 00:07:20,400
the only part of the kubernetes system

179
00:07:20,400 --> 00:07:22,880
that has anything in it you care about

180
00:07:22,880 --> 00:07:24,800
all the magic is inside there

181
00:07:24,800 --> 00:07:28,560
um but then to mediate access to that

182
00:07:28,560 --> 00:07:29,520
database

183
00:07:29,520 --> 00:07:32,479
the real center of the world here is the

184
00:07:32,479 --> 00:07:34,479
api server in green

185
00:07:34,479 --> 00:07:37,599
so every part of kubernetes talks to the

186
00:07:37,599 --> 00:07:38,720
api server

187
00:07:38,720 --> 00:07:41,280
and it's it's like a really opinionated

188
00:07:41,280 --> 00:07:43,199
proxy in front of etcd

189
00:07:43,199 --> 00:07:46,560
so the api server is what you say hey i

190
00:07:46,560 --> 00:07:47,199
want to make

191
00:07:47,199 --> 00:07:50,240
pod hey i want to make a deployment um

192
00:07:50,240 --> 00:07:53,120
you you send it an api call that tells

193
00:07:53,120 --> 00:07:54,400
it you want to do that

194
00:07:54,400 --> 00:07:56,960
and the api server decides whether you

195
00:07:56,960 --> 00:07:59,360
can or not and if it likes what you want

196
00:07:59,360 --> 00:07:59,759
to do

197
00:07:59,759 --> 00:08:01,280
then it goes and it writes some stuff

198
00:08:01,280 --> 00:08:03,680
into etcd or if you ask it tell me what

199
00:08:03,680 --> 00:08:04,960
exists tell me about the ap

200
00:08:04,960 --> 00:08:07,759
tell me about the pods um if it knows

201
00:08:07,759 --> 00:08:09,360
about the pods already then it just

202
00:08:09,360 --> 00:08:11,120
tells you and otherwise it goes and says

203
00:08:11,120 --> 00:08:12,560
that you do tell me about the podcare

204
00:08:12,560 --> 00:08:14,560
and tell this person and so then it

205
00:08:14,560 --> 00:08:15,759
tells you

206
00:08:15,759 --> 00:08:18,160
um there's there's other important parts

207
00:08:18,160 --> 00:08:18,800
that you see

208
00:08:18,800 --> 00:08:21,360
in almost any kubernetes installation

209
00:08:21,360 --> 00:08:21,840
and

210
00:08:21,840 --> 00:08:24,319
i've drawn these in red here and they

211
00:08:24,319 --> 00:08:26,479
talk to the api server and

212
00:08:26,479 --> 00:08:28,560
make the actual magic happen the api

213
00:08:28,560 --> 00:08:29,680
server doesn't really

214
00:08:29,680 --> 00:08:31,680
do any of the magic itself it just

215
00:08:31,680 --> 00:08:34,080
provides access to doing the magic

216
00:08:34,080 --> 00:08:37,200
and so the controller manager does most

217
00:08:37,200 --> 00:08:38,000
of those

218
00:08:38,000 --> 00:08:40,719
control loops that i briefly touched on

219
00:08:40,719 --> 00:08:41,440
before

220
00:08:41,440 --> 00:08:44,959
so like for example if somehow

221
00:08:44,959 --> 00:08:48,240
a deployment definition exists um

222
00:08:48,240 --> 00:08:50,640
you know because you used curl to talk

223
00:08:50,640 --> 00:08:52,080
to the api server

224
00:08:52,080 --> 00:08:55,040
or you you know wrote it directly into

225
00:08:55,040 --> 00:08:57,200
etcd with a chisel for whatever reason

226
00:08:57,200 --> 00:09:00,640
if a deployment exists then there's a

227
00:09:00,640 --> 00:09:02,640
deployment controller that's part of

228
00:09:02,640 --> 00:09:04,080
this controller manager

229
00:09:04,080 --> 00:09:06,080
that uh talks to the api server every

230
00:09:06,080 --> 00:09:07,440
once in a while says hey is there

231
00:09:07,440 --> 00:09:09,279
another deployment do i need to make a

232
00:09:09,279 --> 00:09:10,399
replica set for it

233
00:09:10,399 --> 00:09:12,320
and if it sees one it makes one and then

234
00:09:12,320 --> 00:09:14,000
inside the controller manager there's

235
00:09:14,000 --> 00:09:15,120
another loop

236
00:09:15,120 --> 00:09:17,600
that's looking for replica sets that

237
00:09:17,600 --> 00:09:18,399
don't have

238
00:09:18,399 --> 00:09:20,839
pods and so on so you got all these

239
00:09:20,839 --> 00:09:23,279
little all these little

240
00:09:23,279 --> 00:09:25,519
happy loops that run inside the

241
00:09:25,519 --> 00:09:27,680
controller manager here

242
00:09:27,680 --> 00:09:30,160
each one looking for a certain type of

243
00:09:30,160 --> 00:09:31,040
object

244
00:09:31,040 --> 00:09:33,920
and uh when it sees that object it does

245
00:09:33,920 --> 00:09:36,160
what it's supposed to do

246
00:09:36,160 --> 00:09:38,800
got the scheduler which schedules things

247
00:09:38,800 --> 00:09:39,519
so

248
00:09:39,519 --> 00:09:41,680
pods are the sort of primary thing that

249
00:09:41,680 --> 00:09:43,120
kubernetes is concerned with because

250
00:09:43,120 --> 00:09:44,480
that's where code really runs

251
00:09:44,480 --> 00:09:46,480
and the scheduler looks for pods that

252
00:09:46,480 --> 00:09:48,320
don't have a home and assigns them a

253
00:09:48,320 --> 00:09:50,560
home in the form of a node to run on

254
00:09:50,560 --> 00:09:54,080
and then uh uh part of kubernetes that

255
00:09:54,080 --> 00:09:56,240
is going to be very important for us

256
00:09:56,240 --> 00:10:00,240
today is coop proxy

257
00:10:00,240 --> 00:10:03,839
so there's fancy networking going on

258
00:10:03,839 --> 00:10:05,680
inside kubernetes all of the pods have

259
00:10:05,680 --> 00:10:07,839
their own ip addresses and so on

260
00:10:07,839 --> 00:10:10,240
and uh something has to tie all that

261
00:10:10,240 --> 00:10:10,880
together

262
00:10:10,880 --> 00:10:13,279
and make it so that you can communicate

263
00:10:13,279 --> 00:10:15,040
with the applications running inside the

264
00:10:15,040 --> 00:10:15,839
pods

265
00:10:15,839 --> 00:10:19,279
that is coop proxy's job and we're not

266
00:10:19,279 --> 00:10:22,079
going to really use coop proxy today in

267
00:10:22,079 --> 00:10:23,600
as much as we don't need to

268
00:10:23,600 --> 00:10:26,800
access any applications but

269
00:10:26,800 --> 00:10:28,880
something that kubeproxy does is going

270
00:10:28,880 --> 00:10:30,399
to be really important to

271
00:10:30,399 --> 00:10:33,040
our ability to honk inside this

272
00:10:33,040 --> 00:10:35,120
kubernetes cluster later on

273
00:10:35,120 --> 00:10:37,440
and then of course users have a system

274
00:10:37,440 --> 00:10:38,800
that doesn't have users doesn't do

275
00:10:38,800 --> 00:10:39,360
anything

276
00:10:39,360 --> 00:10:42,079
and so users also talk to the api server

277
00:10:42,079 --> 00:10:47,839
in order to accomplish their goals

278
00:10:47,920 --> 00:10:51,200
so that picture was what uh kubernetes

279
00:10:51,200 --> 00:10:52,640
control plane looks like

280
00:10:52,640 --> 00:10:54,640
there's a very tiny and hard to read

281
00:10:54,640 --> 00:10:56,000
version of it here inside this node

282
00:10:56,000 --> 00:10:57,600
that's labeled control plane

283
00:10:57,600 --> 00:10:59,920
and kubernetes is a big distributed

284
00:10:59,920 --> 00:11:01,920
system and what that means is that there

285
00:11:01,920 --> 00:11:02,320
are

286
00:11:02,320 --> 00:11:03,839
a lot of servers there are a lot of

287
00:11:03,839 --> 00:11:05,680
worker servers that are here to

288
00:11:05,680 --> 00:11:08,480
actually do the work and so the primary

289
00:11:08,480 --> 00:11:09,760
thing that runs on them

290
00:11:09,760 --> 00:11:11,519
is this last piece of software called

291
00:11:11,519 --> 00:11:13,440
the kubelet and it

292
00:11:13,440 --> 00:11:16,480
basically is a daemon that uh runs his

293
00:11:16,480 --> 00:11:18,000
route on the worker node

294
00:11:18,000 --> 00:11:20,000
and talks to the api server every now

295
00:11:20,000 --> 00:11:21,360
and again and says you got any work for

296
00:11:21,360 --> 00:11:22,959
me got any work for me got any work for

297
00:11:22,959 --> 00:11:23,519
me

298
00:11:23,519 --> 00:11:27,040
and when the uh all of those uh

299
00:11:27,040 --> 00:11:29,680
control loops have run to completion and

300
00:11:29,680 --> 00:11:32,320
resulted in a pod with a scheduling

301
00:11:32,320 --> 00:11:34,800
annotation on it that says run on this

302
00:11:34,800 --> 00:11:36,720
node then eventually the kubelet on that

303
00:11:36,720 --> 00:11:37,440
node says

304
00:11:37,440 --> 00:11:39,839
you got work for me and the api server

305
00:11:39,839 --> 00:11:41,519
says yeah run this pod please

306
00:11:41,519 --> 00:11:44,560
and then that's how you end up

307
00:11:44,560 --> 00:11:48,320
with happy little containers

308
00:11:48,320 --> 00:11:51,760
running inside your worker nodes doing

309
00:11:51,760 --> 00:11:52,560
the things

310
00:11:52,560 --> 00:11:55,600
that you actually deployed those servers

311
00:11:55,600 --> 00:11:57,519
for

312
00:11:57,519 --> 00:11:59,839
so that's what uh that's what a cluster

313
00:11:59,839 --> 00:12:00,720
looks like

314
00:12:00,720 --> 00:12:03,760
in general so the primary purpose of

315
00:12:03,760 --> 00:12:06,320
kubernetes is you express your feelings

316
00:12:06,320 --> 00:12:10,079
in the form of uh deployments and

317
00:12:10,079 --> 00:12:12,160
daemon sets and you know kubernetes

318
00:12:12,160 --> 00:12:14,079
objects that are in yaml files

319
00:12:14,079 --> 00:12:16,240
and then kubernetes makes your feelings

320
00:12:16,240 --> 00:12:17,279
happen

321
00:12:17,279 --> 00:12:19,680
and your feelings happen in the form of

322
00:12:19,680 --> 00:12:21,920
your code running in containers

323
00:12:21,920 --> 00:12:25,440
so just in case folks also uh don't have

324
00:12:25,440 --> 00:12:26,720
experience with containers

325
00:12:26,720 --> 00:12:27,920
we should talk a little bit about

326
00:12:27,920 --> 00:12:30,560
containers so

327
00:12:30,560 --> 00:12:32,639
you know linux linux is a unix-like

328
00:12:32,639 --> 00:12:34,880
operating system it's got processes

329
00:12:34,880 --> 00:12:37,200
it's got a kernel the processes make

330
00:12:37,200 --> 00:12:38,959
syscalls to the kernel to say

331
00:12:38,959 --> 00:12:41,040
you know write this data to the network

332
00:12:41,040 --> 00:12:42,800
for me got any uh

333
00:12:42,800 --> 00:12:45,120
got any network data for me please read

334
00:12:45,120 --> 00:12:47,920
this block from disk that sort of thing

335
00:12:47,920 --> 00:12:50,880
and uh so over here in this kind of

336
00:12:50,880 --> 00:12:53,120
first column of this picture

337
00:12:53,120 --> 00:12:56,079
is just a normal linux system you know

338
00:12:56,079 --> 00:12:56,959
running on

339
00:12:56,959 --> 00:12:59,600
some hardware there's a hypervisor

340
00:12:59,600 --> 00:13:00,560
involved there

341
00:13:00,560 --> 00:13:03,920
because you know we don't have workloads

342
00:13:03,920 --> 00:13:05,279
that are so big that we need

343
00:13:05,279 --> 00:13:08,399
56 cores for them or if we do then you

344
00:13:08,399 --> 00:13:10,000
can just pretend that the hypervisor

345
00:13:10,000 --> 00:13:10,800
isn't there

346
00:13:10,800 --> 00:13:12,480
and then linux would be sitting right on

347
00:13:12,480 --> 00:13:14,880
the hardware and normally your processes

348
00:13:14,880 --> 00:13:16,800
just run inside linux

349
00:13:16,800 --> 00:13:20,639
but that isn't quite true anymore

350
00:13:20,639 --> 00:13:25,600
since very very roughly 10 years ago

351
00:13:25,600 --> 00:13:29,680
a lot of the resource resource

352
00:13:29,680 --> 00:13:32,800
spaces in linux have

353
00:13:32,800 --> 00:13:35,920
been broken up into instances

354
00:13:35,920 --> 00:13:37,839
so and those instances are called

355
00:13:37,839 --> 00:13:40,480
namespaces so like if you're a process

356
00:13:40,480 --> 00:13:42,720
you're running on a linux server one of

357
00:13:42,720 --> 00:13:44,399
the most important things about you is

358
00:13:44,399 --> 00:13:45,920
your process id number

359
00:13:45,920 --> 00:13:47,600
it's like the little name tag that the

360
00:13:47,600 --> 00:13:49,440
linux scheduler put on you when you were

361
00:13:49,440 --> 00:13:50,320
created

362
00:13:50,320 --> 00:13:52,320
and that everybody can use when they

363
00:13:52,320 --> 00:13:53,760
need to refer to you

364
00:13:53,760 --> 00:13:56,880
to talk to you to send you a signal

365
00:13:56,880 --> 00:13:59,920
to you know log your network traffic

366
00:13:59,920 --> 00:14:02,240
whatever needs to happen with you

367
00:14:02,240 --> 00:14:05,360
and long long ago there was only

368
00:14:05,360 --> 00:14:08,959
one pid list and there was only one

369
00:14:08,959 --> 00:14:11,120
list of what file systems were mounted

370
00:14:11,120 --> 00:14:12,880
where there was only one

371
00:14:12,880 --> 00:14:15,120
list of which network adapters existed

372
00:14:15,120 --> 00:14:17,279
and what i p addresses they had

373
00:14:17,279 --> 00:14:20,480
there was only one time there was only

374
00:14:20,480 --> 00:14:22,720
one list of what user accounts existed

375
00:14:22,720 --> 00:14:23,199
all

376
00:14:23,199 --> 00:14:26,480
those sorts of things but uh

377
00:14:26,480 --> 00:14:30,399
in reality like physical the physical

378
00:14:30,399 --> 00:14:33,680
reality of the pit of your linux process

379
00:14:33,680 --> 00:14:36,720
is that in the kernel somewhere there's

380
00:14:36,720 --> 00:14:38,000
a linked list

381
00:14:38,000 --> 00:14:41,199
of structs task structs and

382
00:14:41,199 --> 00:14:43,120
one of the fields in a task struct is a

383
00:14:43,120 --> 00:14:44,959
pid and so

384
00:14:44,959 --> 00:14:49,040
it wasn't it wasn't a huge logical leap

385
00:14:49,040 --> 00:14:52,079
to say well what if there were

386
00:14:52,079 --> 00:14:54,880
more than one linked list of task

387
00:14:54,880 --> 00:14:55,920
structs

388
00:14:55,920 --> 00:14:59,279
then we could have a bunch of pids

389
00:14:59,279 --> 00:15:02,800
and pid numbers could be repeated

390
00:15:02,800 --> 00:15:05,680
and if you looked at what pids existed

391
00:15:05,680 --> 00:15:07,199
you would only see the ones in your

392
00:15:07,199 --> 00:15:08,480
linked list

393
00:15:08,480 --> 00:15:10,320
obviously the implementation is a lot

394
00:15:10,320 --> 00:15:11,760
more complicated than that

395
00:15:11,760 --> 00:15:14,320
but that's that's essentially what

396
00:15:14,320 --> 00:15:16,560
namespaces are you take these

397
00:15:16,560 --> 00:15:18,480
these lists that the kernel maintains of

398
00:15:18,480 --> 00:15:20,160
its internal data structures

399
00:15:20,160 --> 00:15:22,399
and instead of having one you make it so

400
00:15:22,399 --> 00:15:23,440
that there's a way to make

401
00:15:23,440 --> 00:15:26,560
multiples of them and so

402
00:15:26,560 --> 00:15:29,920
containers were built

403
00:15:29,920 --> 00:15:32,639
out of these linux kernel name spaces

404
00:15:32,639 --> 00:15:34,160
and some other features

405
00:15:34,160 --> 00:15:36,720
so that you can run processes here these

406
00:15:36,720 --> 00:15:39,120
green ones inside the blue boxes

407
00:15:39,120 --> 00:15:42,800
and to those processes they are living

408
00:15:42,800 --> 00:15:45,839
in a fiction that only the other ones

409
00:15:45,839 --> 00:15:48,480
inside their container exist

410
00:15:48,480 --> 00:15:50,800
obviously they aren't the only ones that

411
00:15:50,800 --> 00:15:52,000
exist because

412
00:15:52,000 --> 00:15:54,000
there's this one yellow linux kernel

413
00:15:54,000 --> 00:15:56,399
underneath all of these processes

414
00:15:56,399 --> 00:15:59,600
the ones that are in the containers and

415
00:15:59,600 --> 00:16:02,000
the ones that are not in the containers

416
00:16:02,000 --> 00:16:06,560
but as long as you don't see the cracks

417
00:16:06,560 --> 00:16:08,399
if you're inside this container you

418
00:16:08,399 --> 00:16:09,839
don't know all you know

419
00:16:09,839 --> 00:16:12,880
is you know i've got me and my two now

420
00:16:12,880 --> 00:16:14,560
three friends here

421
00:16:14,560 --> 00:16:16,240
and we're the only things in the world i

422
00:16:16,240 --> 00:16:17,680
don't know why they run this big linux

423
00:16:17,680 --> 00:16:19,120
system for just the three of us

424
00:16:19,120 --> 00:16:22,320
because you don't see anybody else and

425
00:16:22,320 --> 00:16:23,759
and so this is this is the essential

426
00:16:23,759 --> 00:16:26,000
thing of a container it's this fiction

427
00:16:26,000 --> 00:16:28,800
of having your own system when you

428
00:16:28,800 --> 00:16:30,720
really don't have your own system

429
00:16:30,720 --> 00:16:33,920
and this is super handy for developers

430
00:16:33,920 --> 00:16:36,560
this is super handy for sysadmins

431
00:16:36,560 --> 00:16:37,440
because

432
00:16:37,440 --> 00:16:41,120
you can use this as a way out of config

433
00:16:41,120 --> 00:16:42,079
management hell

434
00:16:42,079 --> 00:16:44,320
you can use this as a way out of

435
00:16:44,320 --> 00:16:45,680
dependency hell

436
00:16:45,680 --> 00:16:48,959
because you can pack up a tar file

437
00:16:48,959 --> 00:16:51,040
and this is what docker save and you

438
00:16:51,040 --> 00:16:52,399
know docker build does

439
00:16:52,399 --> 00:16:54,959
for you is it packs up a fancy tar file

440
00:16:54,959 --> 00:16:55,440
with

441
00:16:55,440 --> 00:16:57,440
all the files and settings that you need

442
00:16:57,440 --> 00:16:58,959
to run your application

443
00:16:58,959 --> 00:17:01,680
and then when you actually unpack it

444
00:17:01,680 --> 00:17:02,480
onto

445
00:17:02,480 --> 00:17:05,119
a space in disk make a bunch of name

446
00:17:05,119 --> 00:17:06,000
spaces

447
00:17:06,000 --> 00:17:07,760
you know the most important ones usually

448
00:17:07,760 --> 00:17:09,359
being a new pid name space

449
00:17:09,359 --> 00:17:11,599
mount namespace and network namespace

450
00:17:11,599 --> 00:17:13,039
there are others but they're not

451
00:17:13,039 --> 00:17:14,559
they're not quite as critical to

452
00:17:14,559 --> 00:17:16,160
understanding the abstraction

453
00:17:16,160 --> 00:17:18,079
but you make all these name spaces and

454
00:17:18,079 --> 00:17:20,559
then you run your program hooray

455
00:17:20,559 --> 00:17:22,160
and your program doesn't realize that

456
00:17:22,160 --> 00:17:23,679
any other programs exist

457
00:17:23,679 --> 00:17:26,640
so like if you've got one program that

458
00:17:26,640 --> 00:17:27,720
needs

459
00:17:27,720 --> 00:17:30,039
python36 and another one that needs

460
00:17:30,039 --> 00:17:31,600
python37 and

461
00:17:31,600 --> 00:17:34,480
for some reason they fight you know in

462
00:17:34,480 --> 00:17:35,840
the past it would have been really

463
00:17:35,840 --> 00:17:37,760
complicated and annoying to get them to

464
00:17:37,760 --> 00:17:39,760
live together on the same linux system

465
00:17:39,760 --> 00:17:42,400
so we draw this yet this blue box around

466
00:17:42,400 --> 00:17:43,919
it we lie to it and say you're the only

467
00:17:43,919 --> 00:17:44,960
thing on the system

468
00:17:44,960 --> 00:17:48,160
and then it's happy so so this is what a

469
00:17:48,160 --> 00:17:49,120
container is

470
00:17:49,120 --> 00:17:51,440
and because it's self-contained it has

471
00:17:51,440 --> 00:17:53,520
everything that it needs to run

472
00:17:53,520 --> 00:17:56,480
then if the surrounding parts are all

473
00:17:56,480 --> 00:17:57,200
correct

474
00:17:57,200 --> 00:17:58,880
you can just plop one down wherever you

475
00:17:58,880 --> 00:18:00,559
want and expect it to work

476
00:18:00,559 --> 00:18:03,200
and that's what kubernetes ultimately

477
00:18:03,200 --> 00:18:04,080
does

478
00:18:04,080 --> 00:18:07,280
is it's this big fancy system

479
00:18:07,280 --> 00:18:10,720
here for defining

480
00:18:10,720 --> 00:18:12,640
where you want to run containers how

481
00:18:12,640 --> 00:18:14,000
many containers you want to

482
00:18:14,000 --> 00:18:18,320
run and then a fancy system of software

483
00:18:18,320 --> 00:18:20,240
that takes your feelings and turns it

484
00:18:20,240 --> 00:18:21,600
into specific

485
00:18:21,600 --> 00:18:23,520
instructions for machines to deploy

486
00:18:23,520 --> 00:18:24,720
containers

487
00:18:24,720 --> 00:18:27,760
and then eventually your machines get

488
00:18:27,760 --> 00:18:28,480
the work

489
00:18:28,480 --> 00:18:30,640
they do deploy the containers and they

490
00:18:30,640 --> 00:18:31,919
start running

491
00:18:31,919 --> 00:18:34,320
so this is what we're dealing with let's

492
00:18:34,320 --> 00:18:36,480
actually get on the keyboard

493
00:18:36,480 --> 00:18:39,440
all right so we've got this cube config

494
00:18:39,440 --> 00:18:41,200
file we've got this coupe ctl

495
00:18:41,200 --> 00:18:44,080
utility that lets us talk to talk to

496
00:18:44,080 --> 00:18:45,360
kubernetes

497
00:18:45,360 --> 00:18:49,760
and if we just try to run it

498
00:18:49,760 --> 00:18:52,799
you know let's coob ctl get pods no

499
00:18:52,799 --> 00:18:55,120
configuration has been provided

500
00:18:55,120 --> 00:18:57,600
okay and so that's that's why these

501
00:18:57,600 --> 00:18:59,120
handy notes are here so we'll try

502
00:18:59,120 --> 00:18:59,840
running this

503
00:18:59,840 --> 00:19:01,760
in the way that it's listed here in the

504
00:19:01,760 --> 00:19:03,120
notes

505
00:19:03,120 --> 00:19:08,239
cube config equals

506
00:19:08,840 --> 00:19:11,840
diana.com ctl

507
00:19:11,840 --> 00:19:14,000
and now in this case we have to specify

508
00:19:14,000 --> 00:19:15,600
the server we want to talk to

509
00:19:15,600 --> 00:19:17,760
because i don't know what the ip address

510
00:19:17,760 --> 00:19:21,039
is of the vm that you provisioned

511
00:19:21,039 --> 00:19:23,840
and so since it's hardcoded into the

512
00:19:23,840 --> 00:19:26,000
config file that would be a problem

513
00:19:26,000 --> 00:19:28,880
but fortunately they gave us this

514
00:19:28,880 --> 00:19:31,280
command line option that we can use

515
00:19:31,280 --> 00:19:33,200
to just override that so i'm going to

516
00:19:33,200 --> 00:19:35,600
copy the ip address

517
00:19:35,600 --> 00:19:39,200
sit in here 6443 because that's the port

518
00:19:39,200 --> 00:19:40,720
it's listening on

519
00:19:40,720 --> 00:19:43,760
and then we also have to say insecure

520
00:19:43,760 --> 00:19:48,000
skip tls verify and the reason for that

521
00:19:48,000 --> 00:19:50,000
is because the config file has got

522
00:19:50,000 --> 00:19:53,120
tls certificates in it and the tls

523
00:19:53,120 --> 00:19:55,039
certificates are good for the ip address

524
00:19:55,039 --> 00:19:56,799
that the server had when it was built

525
00:19:56,799 --> 00:19:58,480
i don't know what ip address your server

526
00:19:58,480 --> 00:20:00,160
has so we're just gonna

527
00:20:00,160 --> 00:20:02,000
we're gonna say don't you worry about it

528
00:20:02,000 --> 00:20:04,240
um and you know let's

529
00:20:04,240 --> 00:20:06,080
it says version so let's try that let's

530
00:20:06,080 --> 00:20:08,159
run version

531
00:20:08,159 --> 00:20:09,440
and it's going to try and talk to our

532
00:20:09,440 --> 00:20:11,919
kubernetes server and see if we get

533
00:20:11,919 --> 00:20:14,559
anywhere with it

534
00:20:14,720 --> 00:20:17,200
i expect an answer quicker than this and

535
00:20:17,200 --> 00:20:20,640
i don't know why i'm not getting one

536
00:20:20,640 --> 00:20:22,400
see if something is wrong with my vm

537
00:20:22,400 --> 00:20:24,640
1010 774

538
00:20:24,640 --> 00:20:28,080
can i ping it i can't ping it

539
00:20:28,080 --> 00:20:29,440
and the reason i can't ping it is

540
00:20:29,440 --> 00:20:32,799
because i forgot to get on openvpn

541
00:20:32,799 --> 00:20:37,039
let's let's go ahead and do that

542
00:20:37,039 --> 00:20:40,400
and get to this little hamburger button

543
00:20:40,400 --> 00:20:49,840
and we're gonna say access openvpn

544
00:20:50,159 --> 00:20:53,280
there we go vpn server used regular one

545
00:20:53,280 --> 00:20:56,400
download my file i'm gonna

546
00:20:56,400 --> 00:21:03,840
save it into here

547
00:21:04,400 --> 00:21:07,520
great um because it's linux i've got

548
00:21:07,520 --> 00:21:09,600
openvpn installed and it's pretty easy

549
00:21:09,600 --> 00:21:12,480
to use

550
00:21:12,960 --> 00:21:16,080
just like this

551
00:21:16,080 --> 00:21:18,080
this is small but it's just saying that

552
00:21:18,080 --> 00:21:20,799
openvpn is working

553
00:21:20,799 --> 00:21:24,240
peer initiate initialization sequence

554
00:21:24,240 --> 00:21:25,440
completed cool

555
00:21:25,440 --> 00:21:27,200
now i'm on openvpn we'll just put that

556
00:21:27,200 --> 00:21:28,880
in the background and forget about it

557
00:21:28,880 --> 00:21:31,840
can i ping the vm i can ping the vm now

558
00:21:31,840 --> 00:21:34,559
let's see if we can cube ctl version

559
00:21:34,559 --> 00:21:37,120
all right okay so let's see what we

560
00:21:37,120 --> 00:21:38,480
actually got here

561
00:21:38,480 --> 00:21:44,559
client version 1.18.2

562
00:21:44,559 --> 00:21:49,039
server version 1.18.3

563
00:21:49,039 --> 00:21:51,360
and that's that's all the hints that we

564
00:21:51,360 --> 00:21:52,320
have

565
00:21:52,320 --> 00:21:55,919
so far okay so

566
00:21:55,919 --> 00:21:58,720
let's remember this version the server

567
00:21:58,720 --> 00:22:01,200
version is 1.18.3

568
00:22:01,200 --> 00:22:03,520
um i can tell you that's going to become

569
00:22:03,520 --> 00:22:05,360
important later

570
00:22:05,360 --> 00:22:08,159
but uh all right so we've got uh we've

571
00:22:08,159 --> 00:22:10,720
got access to use kubernetes

572
00:22:10,720 --> 00:22:12,880
um one thing that i'm going to do to

573
00:22:12,880 --> 00:22:13,840
make the typing

574
00:22:13,840 --> 00:22:17,520
a little cleaner is i'm going to alias k

575
00:22:17,520 --> 00:22:22,240
equals most of this stuff

576
00:22:22,240 --> 00:22:27,280
so that now i can do k version and

577
00:22:27,280 --> 00:22:30,080
it'll just tell me the same thing that

578
00:22:30,080 --> 00:22:31,919
we said when we ran the whole big

579
00:22:31,919 --> 00:22:32,880
command

580
00:22:32,880 --> 00:22:36,159
so now here we are we've got kubernetes

581
00:22:36,159 --> 00:22:38,159
access and the question is what can we

582
00:22:38,159 --> 00:22:41,120
do with it well going back to what we

583
00:22:41,120 --> 00:22:42,720
were talking about before

584
00:22:42,720 --> 00:22:45,200
there's a ton of different config

585
00:22:45,200 --> 00:22:46,640
objects in kubernetes

586
00:22:46,640 --> 00:22:48,559
and the main thing that we do with coop

587
00:22:48,559 --> 00:22:50,320
ctl is manipulate them

588
00:22:50,320 --> 00:22:54,000
so let's

589
00:22:54,000 --> 00:22:55,600
let's look at the help what can we do

590
00:22:55,600 --> 00:22:57,520
with kubernetes

591
00:22:57,520 --> 00:23:01,120
um looks like we can create or expose or

592
00:23:01,120 --> 00:23:03,200
run or set things we can explain

593
00:23:03,200 --> 00:23:06,720
or get some other fancy things that we

594
00:23:06,720 --> 00:23:08,080
don't care about right now

595
00:23:08,080 --> 00:23:12,240
in this point in our lives api resources

596
00:23:12,240 --> 00:23:14,960
print the supported api resources on the

597
00:23:14,960 --> 00:23:15,919
server

598
00:23:15,919 --> 00:23:17,440
so if you've been using kubernetes for a

599
00:23:17,440 --> 00:23:18,640
while you already know what most of

600
00:23:18,640 --> 00:23:19,760
these are by heart

601
00:23:19,760 --> 00:23:21,520
but we haven't been using kubernetes for

602
00:23:21,520 --> 00:23:24,000
a while so let's check

603
00:23:24,000 --> 00:23:27,360
hey api resources uh looks like

604
00:23:27,360 --> 00:23:29,360
there's a bunch of different things here

605
00:23:29,360 --> 00:23:31,600
uh i'm gonna temporarily make this

606
00:23:31,600 --> 00:23:33,120
smaller

607
00:23:33,120 --> 00:23:35,760
so that it doesn't line wrap so bad um

608
00:23:35,760 --> 00:23:37,039
can somebody tell me is this still

609
00:23:37,039 --> 00:23:38,400
readable because if it is i'll just

610
00:23:38,400 --> 00:23:40,640
leave it at this size

611
00:23:40,640 --> 00:23:42,880
um so these are the different kinds of

612
00:23:42,880 --> 00:23:44,240
objects that exist

613
00:23:44,240 --> 00:23:46,240
inside the world of kubernetes on this

614
00:23:46,240 --> 00:23:48,240
server um

615
00:23:48,240 --> 00:23:50,400
config maps those sound like they could

616
00:23:50,400 --> 00:23:51,720
be interesting

617
00:23:51,720 --> 00:23:55,360
namespaces nodes pods

618
00:23:55,360 --> 00:23:58,720
secrets ah that that's gonna be cool

619
00:23:58,720 --> 00:24:02,880
service accounts

620
00:24:03,200 --> 00:24:07,919
flags diana initiative.org flags that

621
00:24:07,919 --> 00:24:10,159
that doesn't seem like stock kubernetes

622
00:24:10,159 --> 00:24:10,960
so i bet

623
00:24:10,960 --> 00:24:12,559
flags and hints i think those are gonna

624
00:24:12,559 --> 00:24:14,480
have a uh

625
00:24:14,480 --> 00:24:16,400
awesome thank you all i think that these

626
00:24:16,400 --> 00:24:18,240
are gonna have a a lot to do with our

627
00:24:18,240 --> 00:24:19,840
success here

628
00:24:19,840 --> 00:24:22,240
roles role bindings cluster role

629
00:24:22,240 --> 00:24:23,039
bindings

630
00:24:23,039 --> 00:24:24,799
pod security policies lots of things

631
00:24:24,799 --> 00:24:27,039
here inside kubernetes

632
00:24:27,039 --> 00:24:30,840
so so let's just try getting some things

633
00:24:30,840 --> 00:24:34,000
um what if we k get all

634
00:24:34,000 --> 00:24:36,799
um all is going to show us a lot of

635
00:24:36,799 --> 00:24:38,799
common things you want to care about

636
00:24:38,799 --> 00:24:40,960
and the only thing that it sees is this

637
00:24:40,960 --> 00:24:41,919
service called

638
00:24:41,919 --> 00:24:45,039
kubernetes and just for funsies let's

639
00:24:45,039 --> 00:24:49,600
k get service kubernetes

640
00:24:49,600 --> 00:24:53,039
and it gives us exactly the same thing

641
00:24:53,039 --> 00:24:55,600
because we're asking for the like very

642
00:24:55,600 --> 00:24:57,440
basic human readable what's just printed

643
00:24:57,440 --> 00:24:59,279
on the label output but if we

644
00:24:59,279 --> 00:25:02,640
instead say dash o for output type

645
00:25:02,640 --> 00:25:05,440
yaml then we get this beautifully

646
00:25:05,440 --> 00:25:06,640
formatted yaml

647
00:25:06,640 --> 00:25:08,320
and it tells us all of the things we

648
00:25:08,320 --> 00:25:10,240
want to know or we might want to know

649
00:25:10,240 --> 00:25:11,919
about this service

650
00:25:11,919 --> 00:25:14,080
what is its ip address what ports does

651
00:25:14,080 --> 00:25:16,320
it use things like that

652
00:25:16,320 --> 00:25:19,120
okay so k get all didn't show us

653
00:25:19,120 --> 00:25:19,679
anything

654
00:25:19,679 --> 00:25:23,200
very interesting but there were a couple

655
00:25:23,200 --> 00:25:25,200
of things in the api resources list

656
00:25:25,200 --> 00:25:28,240
that seemed unusual and

657
00:25:28,240 --> 00:25:30,559
related to the ctf so let's let's get

658
00:25:30,559 --> 00:25:31,600
those let's

659
00:25:31,600 --> 00:25:34,960
k get flags

660
00:25:34,960 --> 00:25:37,600
can't list flags so i don't like that

661
00:25:37,600 --> 00:25:38,080
can i

662
00:25:38,080 --> 00:25:41,360
k get hints i can

663
00:25:41,360 --> 00:25:44,640
i can get hints so

664
00:25:44,640 --> 00:25:48,320
before we go and look at some hints um

665
00:25:48,320 --> 00:25:50,320
let's let's do a couple of more sort of

666
00:25:50,320 --> 00:25:52,320
stock kubernetes things

667
00:25:52,320 --> 00:25:55,279
um one thing you may want to know if you

668
00:25:55,279 --> 00:25:56,799
have gotten access to

669
00:25:56,799 --> 00:25:59,919
kubernetes somehow in this case by we

670
00:25:59,919 --> 00:26:01,360
got a config file

671
00:26:01,360 --> 00:26:03,919
um one thing that you will commonly want

672
00:26:03,919 --> 00:26:06,000
to know is what are you able to do

673
00:26:06,000 --> 00:26:10,640
and it used to be that you could use

674
00:26:10,640 --> 00:26:13,919
a off can i

675
00:26:13,919 --> 00:26:17,360
and then a command like get flags

676
00:26:17,360 --> 00:26:19,200
and it would tell you are you allowed to

677
00:26:19,200 --> 00:26:20,559
do that no

678
00:26:20,559 --> 00:26:23,600
and so a long time ago kubernetes

679
00:26:23,600 --> 00:26:26,559
pen testing people would have long shell

680
00:26:26,559 --> 00:26:27,520
scripts with

681
00:26:27,520 --> 00:26:30,880
loops of you know k off can i get

682
00:26:30,880 --> 00:26:33,679
secrets k off can i get pods chaos can i

683
00:26:33,679 --> 00:26:34,159
all these

684
00:26:34,159 --> 00:26:37,200
you know for everything like get create

685
00:26:37,200 --> 00:26:41,039
patch and for every um object type

686
00:26:41,039 --> 00:26:43,919
like pods service accounts you know can

687
00:26:43,919 --> 00:26:44,799
i get these

688
00:26:44,799 --> 00:26:47,200
but uh they've bundled that all together

689
00:26:47,200 --> 00:26:48,480
for convenience so

690
00:26:48,480 --> 00:26:50,880
now if we want to know what we can do we

691
00:26:50,880 --> 00:26:52,720
can k off

692
00:26:52,720 --> 00:26:56,080
can i list and it'll list

693
00:26:56,080 --> 00:26:59,760
everything that you can do so what can

694
00:26:59,760 --> 00:27:00,320
we do

695
00:27:00,320 --> 00:27:03,520
it looks like we can do a lot can i make

696
00:27:03,520 --> 00:27:04,720
it not line wrap

697
00:27:04,720 --> 00:27:06,799
um now this is smaller and it's not line

698
00:27:06,799 --> 00:27:07,919
wrapping is this

699
00:27:07,919 --> 00:27:12,400
still readable or or is this too small

700
00:27:12,400 --> 00:27:14,640
so these are resources what can we do

701
00:27:14,640 --> 00:27:18,840
pods we can do everything to pods

702
00:27:18,840 --> 00:27:21,600
services daemon sets

703
00:27:21,600 --> 00:27:26,200
cron jobs deployments

704
00:27:26,200 --> 00:27:30,720
secrets nodes

705
00:27:30,720 --> 00:27:34,080
um it looks like we can do an awful lot

706
00:27:34,080 --> 00:27:39,440
so does namespaces appear in here

707
00:27:39,440 --> 00:27:41,120
well remember let's just try oh yeah

708
00:27:41,120 --> 00:27:43,679
there it is namespaces so

709
00:27:43,679 --> 00:27:46,840
thank you very much uh let's k get

710
00:27:46,840 --> 00:27:48,399
namespaces

711
00:27:48,399 --> 00:27:51,600
kubernetes the the coop ctl utility is

712
00:27:51,600 --> 00:27:53,279
designed with the fact that people are

713
00:27:53,279 --> 00:27:54,799
using it all day at their day jobs in

714
00:27:54,799 --> 00:27:55,520
mind so

715
00:27:55,520 --> 00:27:58,000
most things you can abbreviate somehow

716
00:27:58,000 --> 00:27:59,600
so i can also k get an

717
00:27:59,600 --> 00:28:02,880
s and it's the same thing

718
00:28:02,880 --> 00:28:05,600
excuse me for the uh for the little bit

719
00:28:05,600 --> 00:28:06,799
of a black out there

720
00:28:06,799 --> 00:28:10,399
so we can we can get namespaces

721
00:28:10,399 --> 00:28:16,080
and uh

722
00:28:16,080 --> 00:28:18,720
what are the basic commands cube ctl

723
00:28:18,720 --> 00:28:21,440
options for a list of options so will k

724
00:28:21,440 --> 00:28:25,760
options and pipe that into more

725
00:28:25,760 --> 00:28:27,919
and that doesn't work but we'll use a

726
00:28:27,919 --> 00:28:30,159
cool trick that i learned the other day

727
00:28:30,159 --> 00:28:33,600
and still doesn't like me

728
00:28:38,320 --> 00:28:41,360
oh because it's exactly the size of my

729
00:28:41,360 --> 00:28:43,039
screen so i don't actually need to page

730
00:28:43,039 --> 00:28:44,080
it

731
00:28:44,080 --> 00:28:45,600
but the important option that i want to

732
00:28:45,600 --> 00:28:48,399
show you here is this one

733
00:28:48,399 --> 00:28:51,600
dash and namespace so if we

734
00:28:51,600 --> 00:28:54,880
k namespace we can see all the

735
00:28:54,880 --> 00:28:57,039
namespaces

736
00:28:57,039 --> 00:28:59,760
and you know let's try doing things in

737
00:28:59,760 --> 00:29:01,760
some other namespaces so

738
00:29:01,760 --> 00:29:06,159
we did a a dash and

739
00:29:06,159 --> 00:29:09,600
default off can i

740
00:29:09,600 --> 00:29:13,440
list and in the default namespace i can

741
00:29:13,440 --> 00:29:15,120
do all these things

742
00:29:15,120 --> 00:29:17,919
but uh what about the coop system

743
00:29:17,919 --> 00:29:20,240
namespace sounds cool and i bet we want

744
00:29:20,240 --> 00:29:22,480
to get into there

745
00:29:22,480 --> 00:29:24,480
can i do anything in there it looks like

746
00:29:24,480 --> 00:29:26,080
it can do a few things

747
00:29:26,080 --> 00:29:30,320
but not nearly as much so

748
00:29:30,320 --> 00:29:32,559
first let's root around a little bit

749
00:29:32,559 --> 00:29:33,360
inside

750
00:29:33,360 --> 00:29:36,240
this namespace and see what we can find

751
00:29:36,240 --> 00:29:38,720
let's review that list of uh

752
00:29:38,720 --> 00:29:42,480
of api objects

753
00:29:42,720 --> 00:29:45,840
pci resources so

754
00:29:45,840 --> 00:29:47,360
things that were in here that sounded

755
00:29:47,360 --> 00:29:49,279
cool flags and hints are almost

756
00:29:49,279 --> 00:29:51,600
certainly useful because they're a

757
00:29:51,600 --> 00:29:54,559
specific thing for diane initiative

758
00:29:54,559 --> 00:29:56,320
other things that you might want to get

759
00:29:56,320 --> 00:29:58,080
right away

760
00:29:58,080 --> 00:30:00,320
obviously pods it'd be interesting to

761
00:30:00,320 --> 00:30:01,840
know what's running in this case there's

762
00:30:01,840 --> 00:30:03,600
nothing running because it's a ctf

763
00:30:03,600 --> 00:30:05,039
challenge vm and it doesn't have a

764
00:30:05,039 --> 00:30:06,640
realistic setup in it

765
00:30:06,640 --> 00:30:08,720
but uh secrets is something that we

766
00:30:08,720 --> 00:30:10,159
haven't seen yet let's see if we can get

767
00:30:10,159 --> 00:30:12,960
any secrets

768
00:30:14,320 --> 00:30:16,399
so we got a couple of secrets here um

769
00:30:16,399 --> 00:30:18,559
first off we've got a kubernetes service

770
00:30:18,559 --> 00:30:19,200
account

771
00:30:19,200 --> 00:30:21,520
and then we have a secret called flag

772
00:30:21,520 --> 00:30:22,480
one so

773
00:30:22,480 --> 00:30:24,399
i'm interested in that well what does

774
00:30:24,399 --> 00:30:27,678
flag one look like

775
00:30:29,919 --> 00:30:31,840
i mean it doesn't look like anything

776
00:30:31,840 --> 00:30:33,440
because yeah we need to

777
00:30:33,440 --> 00:30:35,840
look at it again we need to look at it

778
00:30:35,840 --> 00:30:38,080
in its detailed yaml format

779
00:30:38,080 --> 00:30:41,120
so here's a bunch of stuff

780
00:30:41,120 --> 00:30:44,159
another way we can look at it is json

781
00:30:44,159 --> 00:30:46,880
in case you prefer json over yaml

782
00:30:46,880 --> 00:30:48,720
they're both

783
00:30:48,720 --> 00:30:50,880
you know ugly and confusing sometimes

784
00:30:50,880 --> 00:30:52,000
but a cool thing about

785
00:30:52,000 --> 00:30:55,279
json is we can use this lovely tool

786
00:30:55,279 --> 00:30:59,919
called jq which is like said for json

787
00:30:59,919 --> 00:31:02,000
and we can parse things out on it pretty

788
00:31:02,000 --> 00:31:03,600
easily so

789
00:31:03,600 --> 00:31:07,519
like here for example if we wanted to

790
00:31:07,519 --> 00:31:11,519
get this nicely we could say

791
00:31:11,519 --> 00:31:14,880
jq data

792
00:31:17,519 --> 00:31:20,720
flag and there's the flag

793
00:31:20,720 --> 00:31:24,480
which is base64 encoded because

794
00:31:24,480 --> 00:31:27,039
kubernetes secrets can contain arbitrary

795
00:31:27,039 --> 00:31:28,559
binary garbage

796
00:31:28,559 --> 00:31:32,080
and you need a safe way to serialize

797
00:31:32,080 --> 00:31:34,480
that into yaml or json and base64 is a

798
00:31:34,480 --> 00:31:35,440
good way to do that

799
00:31:35,440 --> 00:31:37,039
so i'm not going to tell you the flag

800
00:31:37,039 --> 00:31:38,960
but if you're following along you can

801
00:31:38,960 --> 00:31:41,120
you can get it from here but let's look

802
00:31:41,120 --> 00:31:42,880
at the message

803
00:31:42,880 --> 00:31:46,000
so here's our message and let's figure

804
00:31:46,000 --> 00:31:49,360
out what our message says

805
00:31:49,760 --> 00:31:53,120
and youtube ct i'll get any hints

806
00:31:53,120 --> 00:31:56,799
all right so let's let's coop's ttl get

807
00:31:56,799 --> 00:31:58,720
hints

808
00:31:58,720 --> 00:32:01,360
and also congratulations us we got the

809
00:32:01,360 --> 00:32:02,559
first flag it was

810
00:32:02,559 --> 00:32:04,240
it was right there in the secrets

811
00:32:04,240 --> 00:32:05,919
because if you

812
00:32:05,919 --> 00:32:09,039
have inappropriate access to a

813
00:32:09,039 --> 00:32:10,799
kubernetes cluster because you're pen

814
00:32:10,799 --> 00:32:11,919
testing it

815
00:32:11,919 --> 00:32:14,399
and you have very little time one of the

816
00:32:14,399 --> 00:32:16,080
first things you might be interested in

817
00:32:16,080 --> 00:32:17,279
is the secrets so

818
00:32:17,279 --> 00:32:19,679
there's a secret it's got a flag in it

819
00:32:19,679 --> 00:32:20,880
so if we k

820
00:32:20,880 --> 00:32:24,559
get hints dash o

821
00:32:24,559 --> 00:32:27,440
json this will give us all of our hints

822
00:32:27,440 --> 00:32:28,000
but again

823
00:32:28,000 --> 00:32:30,320
this is hard to read so let's do some jq

824
00:32:30,320 --> 00:32:31,120
magic on it

825
00:32:31,120 --> 00:32:32,799
it looks like there's a top level array

826
00:32:32,799 --> 00:32:34,240
called items

827
00:32:34,240 --> 00:32:37,279
and then inside items there's spec and

828
00:32:37,279 --> 00:32:41,279
message so we can pipe this to

829
00:32:41,279 --> 00:32:44,399
jq dot items and

830
00:32:44,399 --> 00:32:46,960
if you pass empty square brackets it

831
00:32:46,960 --> 00:32:48,799
means iterate over everything in this

832
00:32:48,799 --> 00:32:50,080
array

833
00:32:50,080 --> 00:32:55,039
spec message so here's all of our hints

834
00:32:55,039 --> 00:32:58,640
it's a bad idea to enable the insecure

835
00:32:58,640 --> 00:33:00,640
cube api server port but that's the

836
00:33:00,640 --> 00:33:03,440
default a lot of clusters have it

837
00:33:03,440 --> 00:33:05,440
cube ctl version could be really helpful

838
00:33:05,440 --> 00:33:06,799
right now

839
00:33:06,799 --> 00:33:09,039
have there been any kubernetes cves

840
00:33:09,039 --> 00:33:11,919
published lately with a proof of concept

841
00:33:11,919 --> 00:33:13,600
the kate's host is isolated from the

842
00:33:13,600 --> 00:33:16,000
internet but container images for ubuntu

843
00:33:16,000 --> 00:33:17,360
alpine busybox

844
00:33:17,360 --> 00:33:20,720
and tdictf toolbox 1.0.0

845
00:33:20,720 --> 00:33:23,519
are already loaded in case you need them

846
00:33:23,519 --> 00:33:24,320
so

847
00:33:24,320 --> 00:33:25,840
we're probably going to need them or the

848
00:33:25,840 --> 00:33:27,679
hint wouldn't be here

849
00:33:27,679 --> 00:33:30,480
so let's try and and follow along with

850
00:33:30,480 --> 00:33:31,279
this hint

851
00:33:31,279 --> 00:33:33,840
it's a bad idea to enable the insecure

852
00:33:33,840 --> 00:33:35,679
cube api server port but that's the

853
00:33:35,679 --> 00:33:36,399
default

854
00:33:36,399 --> 00:33:39,600
well what is the insecure cube api

855
00:33:39,600 --> 00:33:40,720
server

856
00:33:40,720 --> 00:33:42,960
port

857
00:33:45,200 --> 00:33:48,080
and it looks like google is doing the

858
00:33:48,080 --> 00:33:48,559
work

859
00:33:48,559 --> 00:33:52,000
for me controlling access to the

860
00:33:52,000 --> 00:33:55,679
kubernetes api that sounds interesting

861
00:33:55,679 --> 00:33:58,799
by default the api server serves http on

862
00:33:58,799 --> 00:34:02,559
two ports the local host port is

863
00:34:02,559 --> 00:34:04,240
intended for testing and

864
00:34:04,240 --> 00:34:07,600
bootstrap no tls bypasses

865
00:34:07,600 --> 00:34:10,960
authentication and authorization default

866
00:34:10,960 --> 00:34:12,560
is port 8080

867
00:34:12,560 --> 00:34:14,960
and it's protected by the need to have

868
00:34:14,960 --> 00:34:16,560
host access

869
00:34:16,560 --> 00:34:18,480
and the secure port use whenever

870
00:34:18,480 --> 00:34:19,599
possible

871
00:34:19,599 --> 00:34:21,599
default is six four four three so we've

872
00:34:21,599 --> 00:34:23,599
been using the secure port

873
00:34:23,599 --> 00:34:26,639
but it looks like the local host port

874
00:34:26,639 --> 00:34:30,560
is on by default and it should be turned

875
00:34:30,560 --> 00:34:31,280
off

876
00:34:31,280 --> 00:34:34,560
but a lot of clusters have it on anyway

877
00:34:34,560 --> 00:34:37,119
and now cube ctl version could be really

878
00:34:37,119 --> 00:34:38,879
helpful right now

879
00:34:38,879 --> 00:34:42,239
so we'll do that again k version and

880
00:34:42,239 --> 00:34:45,440
uh the server version is 1.18.3

881
00:34:45,440 --> 00:34:47,839
so have there been any kubernetes cves

882
00:34:47,839 --> 00:34:51,759
published lately let's look into that

883
00:34:54,800 --> 00:34:58,800
we have any kubernetes cves

884
00:34:59,440 --> 00:35:03,839
i really want to uh

885
00:35:04,400 --> 00:35:06,400
i really want to not pull up the miter

886
00:35:06,400 --> 00:35:08,560
page because it's always so slow

887
00:35:08,560 --> 00:35:12,160
but so it actually looks like there

888
00:35:12,160 --> 00:35:16,079
are a bunch of kubernetes cves

889
00:35:16,079 --> 00:35:18,400
and

890
00:35:19,520 --> 00:35:23,200
and this one mentions 1.18.3 the kubelet

891
00:35:23,200 --> 00:35:24,960
and kubeproxy components

892
00:35:24,960 --> 00:35:26,960
were found to contain a security issue

893
00:35:26,960 --> 00:35:29,280
which allows adjacent hosts to reach

894
00:35:29,280 --> 00:35:34,240
tcp services bound to 127.001

895
00:35:34,240 --> 00:35:36,880
um this this is going to be pretty

896
00:35:36,880 --> 00:35:39,440
interesting does this have some good

897
00:35:39,440 --> 00:35:43,200
links on that okay here's a uh

898
00:35:43,200 --> 00:35:45,040
here's a couple of links to kubernetes

899
00:35:45,040 --> 00:35:47,280
issues kubernetes issues on github

900
00:35:47,280 --> 00:35:50,480
usually have great information um

901
00:35:50,480 --> 00:35:52,240
node setting allows neighboring hosts to

902
00:35:52,240 --> 00:35:54,240
bypass localhost boundary in clusters

903
00:35:54,240 --> 00:35:56,079
where api server and secure port has

904
00:35:56,079 --> 00:35:59,359
been disabled this is a big deal it says

905
00:35:59,359 --> 00:36:03,839
and i'm going to apply some of my own

906
00:36:03,920 --> 00:36:06,400
some of my own editorial here i i think

907
00:36:06,400 --> 00:36:08,160
that this can be a big deal on any

908
00:36:08,160 --> 00:36:08,720
cluster

909
00:36:08,720 --> 00:36:10,880
because it depends on what you have

910
00:36:10,880 --> 00:36:12,160
running on

911
00:36:12,160 --> 00:36:16,079
localhost but according to the hints

912
00:36:16,079 --> 00:36:17,440
here i think the

913
00:36:17,440 --> 00:36:19,200
api server in secure port is probably

914
00:36:19,200 --> 00:36:20,960
running on localhost and that's

915
00:36:20,960 --> 00:36:24,640
bad so

916
00:36:24,880 --> 00:36:27,839
all right

917
00:36:28,800 --> 00:36:31,520
do is there a uh proof of concept for

918
00:36:31,520 --> 00:36:32,480
this

919
00:36:32,480 --> 00:36:35,760
so we can just search google c

920
00:36:35,760 --> 00:36:40,560
v e 20 25 5

921
00:36:40,560 --> 00:36:46,240
8 proof of concept

922
00:36:47,920 --> 00:36:51,520
and you know of course the the jig is up

923
00:36:51,520 --> 00:36:53,599
there is a proof concept because i i

924
00:36:53,599 --> 00:36:55,119
wrote a proof of concept

925
00:36:55,119 --> 00:36:59,040
and uh so it seems pretty likely

926
00:36:59,040 --> 00:37:02,320
that we can use this tool in order to

927
00:37:02,320 --> 00:37:04,720
access the api server and secure port

928
00:37:04,720 --> 00:37:09,040
so so let's try that

929
00:37:09,040 --> 00:37:11,359
i really recommend actually reading the

930
00:37:11,359 --> 00:37:12,400
write-up here

931
00:37:12,400 --> 00:37:15,680
and uh also i want to say

932
00:37:15,680 --> 00:37:18,800
it's not a great idea to

933
00:37:18,800 --> 00:37:22,079
just download and run exploit code

934
00:37:22,079 --> 00:37:24,800
without looking at it because

935
00:37:24,800 --> 00:37:25,760
occasionally

936
00:37:25,760 --> 00:37:28,640
it's actually bad there's a particularly

937
00:37:28,640 --> 00:37:29,440
famous

938
00:37:29,440 --> 00:37:33,599
exploit exploit for

939
00:37:33,599 --> 00:37:37,920
ssh on red hat enterprise linux 5 i

940
00:37:37,920 --> 00:37:39,280
think

941
00:37:39,280 --> 00:37:40,960
and it's got a bunch of impressive

942
00:37:40,960 --> 00:37:43,440
looking hexadecimal code

943
00:37:43,440 --> 00:37:46,320
and it claims that if you run it as root

944
00:37:46,320 --> 00:37:48,160
then it will do something to the ssh

945
00:37:48,160 --> 00:37:49,119
port and

946
00:37:49,119 --> 00:37:51,440
and you know give you a root shell on

947
00:37:51,440 --> 00:37:52,880
the remote server

948
00:37:52,880 --> 00:37:55,280
but if you actually read all of the

949
00:37:55,280 --> 00:37:56,960
fancy hexadecimal code

950
00:37:56,960 --> 00:38:01,200
it's just a very obfuscated rm-rf slash

951
00:38:01,200 --> 00:38:04,160
and so if you run it it tells you you

952
00:38:04,160 --> 00:38:05,760
gotta run me as root and if you run it

953
00:38:05,760 --> 00:38:07,359
as root then it erases your computer and

954
00:38:07,359 --> 00:38:08,240
you cry

955
00:38:08,240 --> 00:38:11,280
so it's cool to

956
00:38:11,280 --> 00:38:15,359
search for uh attack code

957
00:38:15,359 --> 00:38:17,680
written by weird women on the internet

958
00:38:17,680 --> 00:38:18,880
but

959
00:38:18,880 --> 00:38:22,800
it's very important to actually read it

960
00:38:22,800 --> 00:38:25,839
and you know you may not understand all

961
00:38:25,839 --> 00:38:26,880
of the details

962
00:38:26,880 --> 00:38:29,920
but at least sniff it and make sure that

963
00:38:29,920 --> 00:38:30,720
you're not

964
00:38:30,720 --> 00:38:33,760
making a fool of yourself so so here is

965
00:38:33,760 --> 00:38:34,160
this

966
00:38:34,160 --> 00:38:35,920
here's this exploit code and it doesn't

967
00:38:35,920 --> 00:38:37,280
seem to be doing anything

968
00:38:37,280 --> 00:38:40,160
weird to your host um in this case like

969
00:38:40,160 --> 00:38:42,160
i am the author and i promise you it's

970
00:38:42,160 --> 00:38:45,280
not doing anything weird to your host

971
00:38:45,280 --> 00:38:48,800
um so before we go and actually try

972
00:38:48,800 --> 00:38:52,400
and run this on the uh on the cluster

973
00:38:52,400 --> 00:38:53,119
that's there

974
00:38:53,119 --> 00:38:56,560
inside of tryhackme i want to

975
00:38:56,560 --> 00:38:58,079
to take a moment to talk about this a

976
00:38:58,079 --> 00:38:59,599
little bit so

977
00:38:59,599 --> 00:39:03,200
in like traditional network pen testing

978
00:39:03,200 --> 00:39:06,240
you are usually looking for your bad

979
00:39:06,240 --> 00:39:07,280
configurations

980
00:39:07,280 --> 00:39:10,320
or or out-of-date versions of software

981
00:39:10,320 --> 00:39:12,160
do you have a ton of software that's

982
00:39:12,160 --> 00:39:13,359
written in c

983
00:39:13,359 --> 00:39:16,160
that has memory handling problems and so

984
00:39:16,160 --> 00:39:16,640
like

985
00:39:16,640 --> 00:39:20,160
back in the 90s if there was a buffer

986
00:39:20,160 --> 00:39:22,000
that got more data read into it than its

987
00:39:22,000 --> 00:39:24,000
length you could just write shell code

988
00:39:24,000 --> 00:39:24,960
into that thing

989
00:39:24,960 --> 00:39:27,040
and go to town execute whatever code you

990
00:39:27,040 --> 00:39:28,480
wanted and you're great

991
00:39:28,480 --> 00:39:31,520
and of course over the last 20

992
00:39:31,520 --> 00:39:34,480
30 years since the 90s there's been this

993
00:39:34,480 --> 00:39:36,000
eternal cat and mouse game

994
00:39:36,000 --> 00:39:39,200
between things to

995
00:39:39,200 --> 00:39:41,599
make memory corruption vulnerabilities

996
00:39:41,599 --> 00:39:43,040
harder to exploit

997
00:39:43,040 --> 00:39:45,040
and new ways to exploit memory

998
00:39:45,040 --> 00:39:46,560
corruption vulnerabilities

999
00:39:46,560 --> 00:39:49,680
but it's still sort of this default

1000
00:39:49,680 --> 00:39:51,520
way of thinking about doing network

1001
00:39:51,520 --> 00:39:53,200
penetration testing is

1002
00:39:53,200 --> 00:39:54,640
i'm going to hop on the network i'm

1003
00:39:54,640 --> 00:39:56,400
going to scan for bad software

1004
00:39:56,400 --> 00:39:58,720
i'm going to pew pew some packets at the

1005
00:39:58,720 --> 00:40:00,560
bad software i'm going to catch all the

1006
00:40:00,560 --> 00:40:02,560
shells and win the game

1007
00:40:02,560 --> 00:40:05,599
and kubernetes

1008
00:40:05,599 --> 00:40:07,920
doesn't really lend itself to being

1009
00:40:07,920 --> 00:40:09,680
treated that way

1010
00:40:09,680 --> 00:40:12,319
and the biggest reason for that is

1011
00:40:12,319 --> 00:40:13,520
because

1012
00:40:13,520 --> 00:40:17,920
it's all carefully written in go and so

1013
00:40:17,920 --> 00:40:21,680
there are kubernetes bugs but it's

1014
00:40:21,680 --> 00:40:25,040
shockingly rare to have a

1015
00:40:25,040 --> 00:40:28,960
bug in a go app such that you can

1016
00:40:28,960 --> 00:40:31,119
send it weird-looking hex characters and

1017
00:40:31,119 --> 00:40:32,960
it coughs up a shell

1018
00:40:32,960 --> 00:40:35,599
you know to do that would require a

1019
00:40:35,599 --> 00:40:36,319
really deep

1020
00:40:36,319 --> 00:40:39,680
bug in the go runtime or for the

1021
00:40:39,680 --> 00:40:42,319
developers to be making extensive uses

1022
00:40:42,319 --> 00:40:44,480
of unsafe language features like the

1023
00:40:44,480 --> 00:40:45,760
unsafe package and

1024
00:40:45,760 --> 00:40:48,800
seago those

1025
00:40:48,800 --> 00:40:50,880
those things in principle can happen in

1026
00:40:50,880 --> 00:40:52,000
a go application but

1027
00:40:52,000 --> 00:40:53,599
in practice they're they're wickedly

1028
00:40:53,599 --> 00:40:55,200
wickedly rare

1029
00:40:55,200 --> 00:40:56,800
um and so we're not going to be able to

1030
00:40:56,800 --> 00:40:58,400
hack kubernetes like that

1031
00:40:58,400 --> 00:41:00,480
asterisk i mean it's potentially

1032
00:41:00,480 --> 00:41:02,160
possible but that's not historically how

1033
00:41:02,160 --> 00:41:03,839
things work

1034
00:41:03,839 --> 00:41:07,200
and uh this is not

1035
00:41:07,200 --> 00:41:10,720
all kubernetes things but uh

1036
00:41:10,720 --> 00:41:13,119
you know there are also historically not

1037
00:41:13,119 --> 00:41:15,040
a ton of kubernetes vulnerabilities that

1038
00:41:15,040 --> 00:41:15,520
get

1039
00:41:15,520 --> 00:41:18,240
released because again the majority of

1040
00:41:18,240 --> 00:41:19,680
vulnerabilities in the majority of

1041
00:41:19,680 --> 00:41:20,560
software are

1042
00:41:20,560 --> 00:41:23,119
memory handling vulnerabilities and

1043
00:41:23,119 --> 00:41:24,960
because kubernetes is in go

1044
00:41:24,960 --> 00:41:28,720
it automatically gets a lot of hardening

1045
00:41:28,720 --> 00:41:30,240
against that sort of thing because

1046
00:41:30,240 --> 00:41:32,960
you know go tries to be a memory safe

1047
00:41:32,960 --> 00:41:34,000
language

1048
00:41:34,000 --> 00:41:36,800
so generally you have to deal with

1049
00:41:36,800 --> 00:41:38,319
kubernetes as it is

1050
00:41:38,319 --> 00:41:40,720
um but fortunately for you as an

1051
00:41:40,720 --> 00:41:41,359
attacker

1052
00:41:41,359 --> 00:41:44,720
it's wickedly complicated um you know if

1053
00:41:44,720 --> 00:41:46,480
we go back to

1054
00:41:46,480 --> 00:41:49,440
here what kubernetes is this is like the

1055
00:41:49,440 --> 00:41:50,160
minimum

1056
00:41:50,160 --> 00:41:53,200
viable uh architecture diagram

1057
00:41:53,200 --> 00:41:55,760
and it's already pretty complicated and

1058
00:41:55,760 --> 00:41:56,720
so

1059
00:41:56,720 --> 00:41:59,599
now we go and run that on a bunch of

1060
00:41:59,599 --> 00:42:00,560
hosts

1061
00:42:00,560 --> 00:42:04,560
and then we think about what's actually

1062
00:42:04,560 --> 00:42:07,599
inside all those hosts there's a ton of

1063
00:42:07,599 --> 00:42:09,040
attack surface there is

1064
00:42:09,040 --> 00:42:11,839
so much code running here and so there

1065
00:42:11,839 --> 00:42:12,720
are so many

1066
00:42:12,720 --> 00:42:15,280
possibilities for misconfigurations

1067
00:42:15,280 --> 00:42:17,119
there's so many possibilities for

1068
00:42:17,119 --> 00:42:20,079
logic bugs so we are not generally going

1069
00:42:20,079 --> 00:42:21,520
to be able to just

1070
00:42:21,520 --> 00:42:24,560
slam the door in and run code but

1071
00:42:24,560 --> 00:42:27,280
if we understand kubernetes and we think

1072
00:42:27,280 --> 00:42:28,640
about it

1073
00:42:28,640 --> 00:42:30,960
the way that the developers think about

1074
00:42:30,960 --> 00:42:32,800
it think about it the way

1075
00:42:32,800 --> 00:42:36,319
the sysops think about it but

1076
00:42:36,319 --> 00:42:38,319
find mistakes that they've made you know

1077
00:42:38,319 --> 00:42:39,359
find

1078
00:42:39,359 --> 00:42:41,280
access control policies that are overly

1079
00:42:41,280 --> 00:42:44,079
broad find

1080
00:42:44,079 --> 00:42:46,480
you know the occasional the occasional

1081
00:42:46,480 --> 00:42:47,200
bug

1082
00:42:47,200 --> 00:42:50,400
so in this particular ctf

1083
00:42:50,400 --> 00:42:53,520
challenge it looks like with the system

1084
00:42:53,520 --> 00:42:55,760
being 1.18.3

1085
00:42:55,760 --> 00:42:58,319
and there being this high severity cve

1086
00:42:58,319 --> 00:43:00,240
against 1.18.3

1087
00:43:00,240 --> 00:43:01,599
it looks like we can probably just

1088
00:43:01,599 --> 00:43:03,280
download the explain and run it

1089
00:43:03,280 --> 00:43:06,480
but that's that's not the usual way

1090
00:43:06,480 --> 00:43:08,960
but i wanted you to get a feeling of

1091
00:43:08,960 --> 00:43:09,839
what it's like

1092
00:43:09,839 --> 00:43:12,640
when you can do that to me it feels a

1093
00:43:12,640 --> 00:43:13,760
little bit like

1094
00:43:13,760 --> 00:43:16,880
to make a lock picking analogy

1095
00:43:16,880 --> 00:43:18,960
being able to do this feels a little bit

1096
00:43:18,960 --> 00:43:20,160
to me like

1097
00:43:20,160 --> 00:43:22,800
using a wave rake and popping a lock

1098
00:43:22,800 --> 00:43:23,440
open

1099
00:43:23,440 --> 00:43:25,920
it frequently doesn't work especially if

1100
00:43:25,920 --> 00:43:27,280
the lock is good

1101
00:43:27,280 --> 00:43:29,680
but sometimes it works and when it does

1102
00:43:29,680 --> 00:43:31,280
work it feels like cheating

1103
00:43:31,280 --> 00:43:34,400
it feels like magic but most of the time

1104
00:43:34,400 --> 00:43:36,880
you have to very carefully single pin

1105
00:43:36,880 --> 00:43:38,240
pick the lock

1106
00:43:38,240 --> 00:43:40,560
and in kubernetes you usually have to

1107
00:43:40,560 --> 00:43:41,359
carefully

1108
00:43:41,359 --> 00:43:44,079
examine the configuration and find

1109
00:43:44,079 --> 00:43:45,680
mistakes that the system operators

1110
00:43:45,680 --> 00:43:47,599
didn't find

1111
00:43:47,599 --> 00:43:50,079
so in this case we've got it easy

1112
00:43:50,079 --> 00:43:51,599
there's this vulnerability

1113
00:43:51,599 --> 00:43:54,400
and we're going to exploit it how are we

1114
00:43:54,400 --> 00:43:55,520
gonna exploit it

1115
00:43:55,520 --> 00:43:58,560
so one thing that we could try

1116
00:43:58,560 --> 00:44:00,640
is downloading and running this python

1117
00:44:00,640 --> 00:44:01,680
code locally

1118
00:44:01,680 --> 00:44:04,400
and uh i'm going to save you the trouble

1119
00:44:04,400 --> 00:44:04,880
don't

1120
00:44:04,880 --> 00:44:07,359
don't waste your time because this

1121
00:44:07,359 --> 00:44:08,560
python code

1122
00:44:08,560 --> 00:44:11,359
we can read it this python code depends

1123
00:44:11,359 --> 00:44:12,079
on

1124
00:44:12,079 --> 00:44:14,960
forging the ip addresses and mac

1125
00:44:14,960 --> 00:44:16,720
addresses of packets

1126
00:44:16,720 --> 00:44:20,000
and we don't have layer 2

1127
00:44:20,000 --> 00:44:23,760
connectivity between our openvpn machine

1128
00:44:23,760 --> 00:44:24,160
here

1129
00:44:24,160 --> 00:44:26,400
and the vm that's up in tryhackme so we

1130
00:44:26,400 --> 00:44:27,920
ain't going to be able to do it

1131
00:44:27,920 --> 00:44:30,160
uh

1132
00:44:32,880 --> 00:44:35,599
just get this pretty picture here for us

1133
00:44:35,599 --> 00:44:36,079
come on

1134
00:44:36,079 --> 00:44:38,720
where's the picture okay this is here we

1135
00:44:38,720 --> 00:44:39,200
go

1136
00:44:39,200 --> 00:44:41,760
so you know data link layer between two

1137
00:44:41,760 --> 00:44:43,359
nodes connected on a physical layer

1138
00:44:43,359 --> 00:44:45,440
we're not connected on a physical layer

1139
00:44:45,440 --> 00:44:47,520
um we are going between modes in a

1140
00:44:47,520 --> 00:44:49,119
multi-mode network

1141
00:44:49,119 --> 00:44:51,599
and so we can't do layer 2 shenanigans

1142
00:44:51,599 --> 00:44:53,920
from here to there

1143
00:44:53,920 --> 00:44:56,319
i had hoped that you would be able to do

1144
00:44:56,319 --> 00:44:58,400
layer 2 shenanigans between

1145
00:44:58,400 --> 00:45:01,359
the kali linux box provided by tryhackme

1146
00:45:01,359 --> 00:45:02,000
and

1147
00:45:02,000 --> 00:45:04,400
the challenge vm but you can't do that

1148
00:45:04,400 --> 00:45:06,160
either and the reason for that

1149
00:45:06,160 --> 00:45:08,560
is because it's all running in aws and

1150
00:45:08,560 --> 00:45:09,760
in aws

1151
00:45:09,760 --> 00:45:12,480
the layer two between vms is completely

1152
00:45:12,480 --> 00:45:12,960
fake

1153
00:45:12,960 --> 00:45:15,839
it's completely opinionated and it only

1154
00:45:15,839 --> 00:45:18,319
passes traffic that makes sense

1155
00:45:18,319 --> 00:45:20,319
so you can go ahead and if you're a

1156
00:45:20,319 --> 00:45:23,119
subscriber plop out the kali linux vm

1157
00:45:23,119 --> 00:45:25,119
and try it but you will find that it

1158
00:45:25,119 --> 00:45:26,400
won't work because

1159
00:45:26,400 --> 00:45:29,040
the aws networking substrate is going to

1160
00:45:29,040 --> 00:45:31,200
smack down all of your weird packets

1161
00:45:31,200 --> 00:45:35,040
so that ain't gonna work but

1162
00:45:35,040 --> 00:45:38,319
we do have access to one computer

1163
00:45:38,319 --> 00:45:40,480
that is local to the machine that we're

1164
00:45:40,480 --> 00:45:42,319
trying to get access to

1165
00:45:42,319 --> 00:45:44,480
the machine itself so let's see if we

1166
00:45:44,480 --> 00:45:45,839
can run a pod that's the whole point of

1167
00:45:45,839 --> 00:45:48,000
kubernetes right it's to run a pod

1168
00:45:48,000 --> 00:45:51,440
so we can just run a pod if we go back

1169
00:45:51,440 --> 00:45:52,640
to our hints

1170
00:45:52,640 --> 00:45:55,680
ubuntu alpine busybox and tdi ctf

1171
00:45:55,680 --> 00:45:56,480
toolbox are

1172
00:45:56,480 --> 00:45:58,800
already loaded so let's just try running

1173
00:45:58,800 --> 00:46:00,400
them there's a cube control run command

1174
00:46:00,400 --> 00:46:01,280
for that

1175
00:46:01,280 --> 00:46:03,359
and so we'll just do it we will do coop

1176
00:46:03,359 --> 00:46:04,640
control

1177
00:46:04,640 --> 00:46:07,280
run and we need to give a name to it and

1178
00:46:07,280 --> 00:46:07,680
so

1179
00:46:07,680 --> 00:46:11,359
let's call it going to fail because this

1180
00:46:11,359 --> 00:46:13,440
is going to fail

1181
00:46:13,440 --> 00:46:16,800
dash image ubuntu

1182
00:46:16,800 --> 00:46:18,960
and if you're familiar with docker there

1183
00:46:18,960 --> 00:46:20,319
are some command line options you can

1184
00:46:20,319 --> 00:46:20,880
pass

1185
00:46:20,880 --> 00:46:24,000
so dash i means that you want to get

1186
00:46:24,000 --> 00:46:26,079
input into it dash t means you want to

1187
00:46:26,079 --> 00:46:28,480
allocate a tty

1188
00:46:28,480 --> 00:46:30,560
we'll pass dash rm so that it gets

1189
00:46:30,560 --> 00:46:32,800
deleted when we're done using it

1190
00:46:32,800 --> 00:46:34,960
and then the command that we want to run

1191
00:46:34,960 --> 00:46:37,119
inside this ubuntu image is bash

1192
00:46:37,119 --> 00:46:43,440
so we will try this and a dns subdomain

1193
00:46:43,440 --> 00:46:46,560
must consist of lowercase alphanumeric

1194
00:46:46,560 --> 00:46:47,920
characters

1195
00:46:47,920 --> 00:46:51,280
dash or underscore okay fine

1196
00:46:51,280 --> 00:46:54,480
it doesn't like my name gonna like this

1197
00:46:54,480 --> 00:46:55,119
name

1198
00:46:55,119 --> 00:46:57,839
i think so chugga chugga chugga chugga

1199
00:46:57,839 --> 00:47:00,560
chugga chugga chugga chugga

1200
00:47:00,560 --> 00:47:02,079
this ain't doing what we want this is

1201
00:47:02,079 --> 00:47:03,359
supposed to give us a shell in a

1202
00:47:03,359 --> 00:47:04,800
container it's not happening

1203
00:47:04,800 --> 00:47:08,319
so why is that we tried to make a pod

1204
00:47:08,319 --> 00:47:11,440
because cube ctl run is like a

1205
00:47:11,440 --> 00:47:13,680
shorthand around creating a pod and

1206
00:47:13,680 --> 00:47:15,359
attaching to it so

1207
00:47:15,359 --> 00:47:17,680
what do we have for pods error image

1208
00:47:17,680 --> 00:47:18,880
pull well let's

1209
00:47:18,880 --> 00:47:25,839
let's inspect that

1210
00:47:26,160 --> 00:47:27,920
and right now the word that i'm looking

1211
00:47:27,920 --> 00:47:30,400
for is is slipping out of my mind

1212
00:47:30,400 --> 00:47:33,119
describe

1213
00:47:36,800 --> 00:47:40,640
describe it to me failed to pull image

1214
00:47:40,640 --> 00:47:42,480
ubuntu

1215
00:47:42,480 --> 00:47:45,280
can't connect to docker registry the

1216
00:47:45,280 --> 00:47:46,559
reason it can't connect to the docker

1217
00:47:46,559 --> 00:47:47,920
registry is because the

1218
00:47:47,920 --> 00:47:49,680
the kubernetes node is isolated from the

1219
00:47:49,680 --> 00:47:51,359
internet um

1220
00:47:51,359 --> 00:47:52,800
this gets into a detailed thing in

1221
00:47:52,800 --> 00:47:55,839
kubernetes called uh image pull policy

1222
00:47:55,839 --> 00:47:58,960
and uh you can say pull this you know

1223
00:47:58,960 --> 00:48:00,720
pull down this image of this container

1224
00:48:00,720 --> 00:48:02,880
every time i try to run it versus

1225
00:48:02,880 --> 00:48:05,760
only pull it down if it's there so we

1226
00:48:05,760 --> 00:48:08,000
could uh

1227
00:48:08,000 --> 00:48:11,520
you know we could pass in a uh

1228
00:48:11,520 --> 00:48:16,559
an override to say image pull policy

1229
00:48:18,960 --> 00:48:22,240
if not present and i think this is how

1230
00:48:22,240 --> 00:48:23,119
it works no

1231
00:48:23,119 --> 00:48:26,880
let's let's just look it up again

1232
00:48:28,960 --> 00:48:32,319
got dash is in it

1233
00:48:32,319 --> 00:48:35,839
so we'll put the dashes in

1234
00:48:36,160 --> 00:48:39,200
that already exists

1235
00:48:40,240 --> 00:48:42,240
but my pod that exists is broken let's

1236
00:48:42,240 --> 00:48:49,119
delete it

1237
00:48:49,119 --> 00:48:54,800
bipod let's try this again

1238
00:48:54,800 --> 00:48:57,040
you don't see a command prompt hey look

1239
00:48:57,040 --> 00:48:59,440
at this and i'm root i can do whatever i

1240
00:48:59,440 --> 00:49:00,839
want right

1241
00:49:00,839 --> 00:49:05,200
um this doesn't have very much installed

1242
00:49:05,200 --> 00:49:07,200
in it i can't really do whatever i want

1243
00:49:07,200 --> 00:49:09,040
this is this is not nearly as cool as i

1244
00:49:09,040 --> 00:49:11,200
wanted

1245
00:49:11,200 --> 00:49:14,480
to help solve this problem this is why i

1246
00:49:14,480 --> 00:49:17,680
gave us this uh

1247
00:49:17,680 --> 00:49:20,319
this toolbox pod because it's got a ton

1248
00:49:20,319 --> 00:49:21,599
of stuff that you might want

1249
00:49:21,599 --> 00:49:25,440
loaded into it so

1250
00:49:26,640 --> 00:49:30,240
let's run that one instead and

1251
00:49:30,240 --> 00:49:32,079
because this one is specifying a version

1252
00:49:32,079 --> 00:49:34,240
number kubernetes will default

1253
00:49:34,240 --> 00:49:36,720
to not downloading it if it's already

1254
00:49:36,720 --> 00:49:38,959
there

1255
00:49:39,920 --> 00:49:44,079
powerpod and here's my problem again

1256
00:49:44,079 --> 00:49:46,960
where it has to be lower case i'm going

1257
00:49:46,960 --> 00:49:47,599
to call it

1258
00:49:47,599 --> 00:49:51,760
our pod this is taking a lot longer to

1259
00:49:51,760 --> 00:49:53,599
start up because this pod image is huge

1260
00:49:53,599 --> 00:49:55,280
it's like 800 megabytes

1261
00:49:55,280 --> 00:49:58,559
but now here we are we're on our pod

1262
00:49:58,559 --> 00:50:03,839
we've got an ip address we have ping

1263
00:50:06,880 --> 00:50:09,920
we don't have ping

1264
00:50:10,079 --> 00:50:12,960
so now we're here inside a pod and uh

1265
00:50:12,960 --> 00:50:13,599
one thing

1266
00:50:13,599 --> 00:50:16,400
that's neat about kubernetes is that a

1267
00:50:16,400 --> 00:50:16,800
pod

1268
00:50:16,800 --> 00:50:21,359
automatically has stuff defined in it

1269
00:50:24,319 --> 00:50:27,200
like how to talk to the kubernetes api

1270
00:50:27,200 --> 00:50:27,839
um

1271
00:50:27,839 --> 00:50:30,400
there's a bit of an errata about this

1272
00:50:30,400 --> 00:50:31,520
challenge vm

1273
00:50:31,520 --> 00:50:34,319
which is that this access to the

1274
00:50:34,319 --> 00:50:35,200
kubernetes

1275
00:50:35,200 --> 00:50:37,200
api through the kubernetes service

1276
00:50:37,200 --> 00:50:39,119
doesn't work because there

1277
00:50:39,119 --> 00:50:42,880
is a part of the uh coupe proxy config

1278
00:50:42,880 --> 00:50:44,480
that i failed to update when i re-ip'd

1279
00:50:44,480 --> 00:50:45,040
the thing

1280
00:50:45,040 --> 00:50:46,480
but the good news is it doesn't affect

1281
00:50:46,480 --> 00:50:48,319
the solution to the challenge but

1282
00:50:48,319 --> 00:50:50,240
if you wanted to try and crawl around

1283
00:50:50,240 --> 00:50:51,839
inside kubernetes from

1284
00:50:51,839 --> 00:50:56,799
in this pod it would confuse you so

1285
00:50:56,960 --> 00:50:59,760
we can fix that in the same way that we

1286
00:50:59,760 --> 00:51:00,240
did

1287
00:51:00,240 --> 00:51:04,280
on our host by doing server

1288
00:51:04,280 --> 00:51:09,200
equals and the ip address of our server

1289
00:51:09,200 --> 00:51:11,440
but let's try talking down the docker

1290
00:51:11,440 --> 00:51:15,839
port instead to the host so let's guess

1291
00:51:16,160 --> 00:51:19,480
203 0 113.1

1292
00:51:19,480 --> 00:51:23,760
6443 insecure skip

1293
00:51:23,760 --> 00:51:27,839
tls verify

1294
00:51:32,880 --> 00:51:36,160
version please enter username

1295
00:51:36,160 --> 00:51:39,760
uh i don't know

1296
00:51:39,760 --> 00:51:42,400
i don't know oh but it works look we can

1297
00:51:42,400 --> 00:51:44,000
talk to kubernetes from inside the pot

1298
00:51:44,000 --> 00:51:44,640
too

1299
00:51:44,640 --> 00:51:47,760
cool the reason for that if we look at

1300
00:51:47,760 --> 00:51:48,880
the mount table

1301
00:51:48,880 --> 00:51:52,640
oh that's a lot um

1302
00:51:53,040 --> 00:51:54,720
reason for that is because of this

1303
00:51:54,720 --> 00:51:57,759
temperfest here

1304
00:51:59,680 --> 00:52:03,040
run secrets kubernetes dot io

1305
00:52:03,040 --> 00:52:06,319
service account that has all of the same

1306
00:52:06,319 --> 00:52:08,000
information in it that would be

1307
00:52:08,000 --> 00:52:11,440
in our cube config file so therefore we

1308
00:52:11,440 --> 00:52:12,800
can talk to kubernetes but can we do

1309
00:52:12,800 --> 00:52:19,040
anything cool

1310
00:52:19,040 --> 00:52:22,319
no we can't even see what we're allowed

1311
00:52:22,319 --> 00:52:23,119
to do

1312
00:52:23,119 --> 00:52:25,760
because we're anonymous and the system

1313
00:52:25,760 --> 00:52:27,200
has decent configuration

1314
00:52:27,200 --> 00:52:28,720
anonymous accounts aren't allowed to do

1315
00:52:28,720 --> 00:52:31,119
anything because if they were then they

1316
00:52:31,119 --> 00:52:33,040
would people would do bad things we

1317
00:52:33,040 --> 00:52:34,640
don't want people to do bad things

1318
00:52:34,640 --> 00:52:37,280
so let's get ready to do some bad things

1319
00:52:37,280 --> 00:52:39,200
we're on this pod the pod can talk to

1320
00:52:39,200 --> 00:52:40,000
the node

1321
00:52:40,000 --> 00:52:42,160
we know that the node probably has this

1322
00:52:42,160 --> 00:52:43,680
vulnerability in it

1323
00:52:43,680 --> 00:52:48,240
let's go um plc

1324
00:52:48,240 --> 00:52:53,598
uh 2025 py

1325
00:52:54,960 --> 00:52:58,319
gonna go into insert mode gonna go get

1326
00:52:58,319 --> 00:52:59,280
this code

1327
00:52:59,280 --> 00:53:01,920
gonna see the raw version select all

1328
00:53:01,920 --> 00:53:03,520
copy

1329
00:53:03,520 --> 00:53:07,920
paste save

1330
00:53:07,920 --> 00:53:11,280
just for convenience we're gonna schmod

1331
00:53:11,280 --> 00:53:12,160
it

1332
00:53:12,160 --> 00:53:15,119
and run it and see what it tells us to

1333
00:53:15,119 --> 00:53:17,359
do

1334
00:53:22,559 --> 00:53:25,760
come on aws i believe in you okay

1335
00:53:25,760 --> 00:53:28,640
um usage this script dash help if we

1336
00:53:28,640 --> 00:53:30,480
want dash h if we want help

1337
00:53:30,480 --> 00:53:33,119
dash dash fake destination target okay

1338
00:53:33,119 --> 00:53:36,480
let's look at the help message

1339
00:53:36,480 --> 00:53:40,960
quote unquote proxy for cve 2020 8558

1340
00:53:40,960 --> 00:53:42,240
read the write up if you want to

1341
00:53:42,240 --> 00:53:43,599
understand why there's square quotes

1342
00:53:43,599 --> 00:53:44,960
around the word proxy

1343
00:53:44,960 --> 00:53:46,559
target vulnerable host on which to

1344
00:53:46,559 --> 00:53:48,960
access local host services

1345
00:53:48,960 --> 00:53:50,960
an arbitrary unresponsive ip address

1346
00:53:50,960 --> 00:53:53,680
defaults to 198 51 101.

1347
00:53:53,680 --> 00:53:56,400
okay so back when we were looking at the

1348
00:53:56,400 --> 00:53:58,000
code for this thing

1349
00:53:58,000 --> 00:54:01,040
we saw that it is taking

1350
00:54:01,040 --> 00:54:03,040
packets that are trying to go to

1351
00:54:03,040 --> 00:54:04,720
localhost and

1352
00:54:04,720 --> 00:54:07,599
duplicating them to fake destination and

1353
00:54:07,599 --> 00:54:09,680
taking packets from fake destination and

1354
00:54:09,680 --> 00:54:11,200
duplicating them to look like they came

1355
00:54:11,200 --> 00:54:13,040
from localhost

1356
00:54:13,040 --> 00:54:16,319
so that means if we run this script

1357
00:54:16,319 --> 00:54:19,680
with the ip address of the server

1358
00:54:19,680 --> 00:54:21,040
and i don't remember what that was so

1359
00:54:21,040 --> 00:54:23,200
i'm going to look at it our ip address

1360
00:54:23,200 --> 00:54:24,960
is 203 0 1 13

1361
00:54:24,960 --> 00:54:27,280
12. so i guessed that this that the host

1362
00:54:27,280 --> 00:54:30,480
was 2030113.1

1363
00:54:30,480 --> 00:54:34,400
so we'll pass that in as the target

1364
00:54:34,480 --> 00:54:36,240
and we'll run it in the background so

1365
00:54:36,240 --> 00:54:39,359
that we can still have our shell

1366
00:54:39,359 --> 00:54:41,760
now if this is working we should be able

1367
00:54:41,760 --> 00:54:42,400
to talk

1368
00:54:42,400 --> 00:54:45,440
to the port 8080 api server let's try

1369
00:54:45,440 --> 00:54:47,200
that with netcat

1370
00:54:47,200 --> 00:54:50,319
198 51 101 on

1371
00:54:50,319 --> 00:54:52,319
8080. and if this is working then that

1372
00:54:52,319 --> 00:54:53,839
script running in the background

1373
00:54:53,839 --> 00:54:57,280
is going to flip around and

1374
00:54:57,280 --> 00:55:01,760
redirect our packets for us so can we

1375
00:55:02,160 --> 00:55:05,680
can we get oh we're talking to it

1376
00:55:05,680 --> 00:55:09,839
so ctl

1377
00:55:09,839 --> 00:55:13,839
server 198 51 101

1378
00:55:13,839 --> 00:55:16,880
port 8080

1379
00:55:19,040 --> 00:55:21,839
http

1380
00:55:23,520 --> 00:55:28,319
auth can i list

1381
00:55:28,400 --> 00:55:35,839
auto that's that's my typo

1382
00:55:37,760 --> 00:55:39,920
yes this is the best thing that you can

1383
00:55:39,920 --> 00:55:40,960
see

1384
00:55:40,960 --> 00:55:45,200
all resources all verbs everywhere

1385
00:55:45,200 --> 00:55:47,040
so now we can do all those things that

1386
00:55:47,040 --> 00:55:49,119
we wanted to do before but couldn't

1387
00:55:49,119 --> 00:55:52,000
such as

1388
00:55:54,720 --> 00:55:57,359
flags

1389
00:55:58,799 --> 00:56:02,720
i want to look in all name spaces

1390
00:56:02,720 --> 00:56:04,400
there's a handy option for that dash

1391
00:56:04,400 --> 00:56:06,079
capital a um

1392
00:56:06,079 --> 00:56:09,359
you probably don't want to do that in uh

1393
00:56:09,359 --> 00:56:12,480
production very often because if you're

1394
00:56:12,480 --> 00:56:13,520
on a big cluster

1395
00:56:13,520 --> 00:56:14,720
all of your name spaces are going to

1396
00:56:14,720 --> 00:56:17,440
contain a lot of things

1397
00:56:17,440 --> 00:56:19,599
but

1398
00:56:21,359 --> 00:56:26,480
why don't you love me can we get pods

1399
00:56:26,480 --> 00:56:31,359
we have to put the dash a later

1400
00:56:31,359 --> 00:56:34,240
i'll put the dash a later so there's all

1401
00:56:34,240 --> 00:56:36,319
of our pods in all our name spaces

1402
00:56:36,319 --> 00:56:38,400
notice our pod which is the one that

1403
00:56:38,400 --> 00:56:40,480
we're in and the rest are all in kube

1404
00:56:40,480 --> 00:56:41,119
system

1405
00:56:41,119 --> 00:56:44,799
and here is the scheduler proxy

1406
00:56:44,799 --> 00:56:48,079
controller manager api server and etcd

1407
00:56:48,079 --> 00:56:50,319
that we talked about before and then a

1408
00:56:50,319 --> 00:56:52,160
couple of others core dns

1409
00:56:52,160 --> 00:56:54,079
that make sure that the various pods can

1410
00:56:54,079 --> 00:56:56,160
talk to each other

1411
00:56:56,160 --> 00:57:00,480
so now we get flags

1412
00:57:00,480 --> 00:57:03,040
here we go here's a flag called bonus

1413
00:57:03,040 --> 00:57:04,240
one

1414
00:57:04,240 --> 00:57:08,720
so we'll look in the cube public

1415
00:57:08,720 --> 00:57:10,640
namespace directly

1416
00:57:10,640 --> 00:57:14,319
dash and uh

1417
00:57:14,319 --> 00:57:17,119
that's a flag

1418
00:57:17,359 --> 00:57:20,799
now what else there was a secret before

1419
00:57:20,799 --> 00:57:23,599
so there's probably more secrets now

1420
00:57:23,599 --> 00:57:24,720
that we have access to all the

1421
00:57:24,720 --> 00:57:28,240
namespaces because we're admin

1422
00:57:28,720 --> 00:57:29,920
let's look at the secrets in all

1423
00:57:29,920 --> 00:57:32,000
namespaces there's a lot

1424
00:57:32,000 --> 00:57:35,359
um but here in coop system which is

1425
00:57:35,359 --> 00:57:37,599
accessible only to the sysadmin

1426
00:57:37,599 --> 00:57:41,280
there's another flag so we can

1427
00:57:41,280 --> 00:57:46,240
get that one cube system

1428
00:57:46,240 --> 00:57:49,839
flag two basho

1429
00:57:49,839 --> 00:57:53,040
yaml and uh here it is there's a flag

1430
00:57:53,040 --> 00:57:54,559
and a secret message

1431
00:57:54,559 --> 00:57:57,520
we have base 64 inside here of course we

1432
00:57:57,520 --> 00:57:59,040
do

1433
00:57:59,040 --> 00:58:02,319
messages nice work now keep going get

1434
00:58:02,319 --> 00:58:05,920
to the root of the matter so

1435
00:58:05,920 --> 00:58:09,040
we go back up and we pay attention

1436
00:58:09,040 --> 00:58:13,119
to the scoreboard here we can see

1437
00:58:13,119 --> 00:58:15,680
that we have got use the provided

1438
00:58:15,680 --> 00:58:17,200
credentials to access the kubernetes

1439
00:58:17,200 --> 00:58:18,880
cluster and find the first flag we've

1440
00:58:18,880 --> 00:58:19,599
done it

1441
00:58:19,599 --> 00:58:21,359
become the admin and find the second

1442
00:58:21,359 --> 00:58:22,880
flag somewhere inside

1443
00:58:22,880 --> 00:58:25,760
here was a hint in case you uh in case

1444
00:58:25,760 --> 00:58:27,200
you needed it

1445
00:58:27,200 --> 00:58:28,799
because it would tell you to find the

1446
00:58:28,799 --> 00:58:30,799
hints we

1447
00:58:30,799 --> 00:58:32,720
found the hints we followed the hints we

1448
00:58:32,720 --> 00:58:34,799
became the admin we found the second

1449
00:58:34,799 --> 00:58:35,599
flag

1450
00:58:35,599 --> 00:58:37,200
we also got the bonus flag from

1451
00:58:37,200 --> 00:58:39,359
kubernetes now we need to escape to root

1452
00:58:39,359 --> 00:58:41,359
on the host and find the third flag

1453
00:58:41,359 --> 00:58:44,400
and now this is where this discussion

1454
00:58:44,400 --> 00:58:46,480
about containers becomes really relevant

1455
00:58:46,480 --> 00:58:47,040
again

1456
00:58:47,040 --> 00:58:48,880
remember i said that this blue box here

1457
00:58:48,880 --> 00:58:50,319
that is the container was a

1458
00:58:50,319 --> 00:58:54,319
total fiction it's super a fiction

1459
00:58:54,319 --> 00:58:57,520
um it's just a bunch of lies that you

1460
00:58:57,520 --> 00:58:59,839
tell to these processes in here

1461
00:58:59,839 --> 00:59:02,400
that nobody else exists no other pids

1462
00:59:02,400 --> 00:59:03,119
exist

1463
00:59:03,119 --> 00:59:05,520
no other file systems exist no other

1464
00:59:05,520 --> 00:59:07,200
network connections exist

1465
00:59:07,200 --> 00:59:10,319
but it's not true it's a lie and so if

1466
00:59:10,319 --> 00:59:10,960
you can

1467
00:59:10,960 --> 00:59:14,000
break the lie then you can find out the

1468
00:59:14,000 --> 00:59:14,559
truth

1469
00:59:14,559 --> 00:59:17,200
which is that other processes exist and

1470
00:59:17,200 --> 00:59:18,000
so on

1471
00:59:18,000 --> 00:59:19,839
and there's there are several different

1472
00:59:19,839 --> 00:59:22,720
ways to escape from a container

1473
00:59:22,720 --> 00:59:25,839
if you want to

1474
00:59:25,839 --> 00:59:29,040
learn more about that

1475
00:59:29,040 --> 00:59:31,839
there was a talk at black hat some time

1476
00:59:31,839 --> 00:59:32,799
ago which was

1477
00:59:32,799 --> 00:59:36,400
spectacular called a compendium

1478
00:59:36,400 --> 00:59:40,079
of container escapes and i'm going to

1479
00:59:40,079 --> 00:59:40,960
try to

1480
00:59:40,960 --> 00:59:47,839
put that link into the chat here

1481
00:59:49,280 --> 00:59:50,559
if you want to learn about container

1482
00:59:50,559 --> 00:59:52,640
escapes you can watch that video it'll

1483
00:59:52,640 --> 00:59:55,040
teach you a lot about container escapes

1484
00:59:55,040 --> 00:59:58,640
the uh the primary ways of escaping a

1485
00:59:58,640 --> 00:59:59,440
container

1486
00:59:59,440 --> 01:00:01,839
come down to either configuring the

1487
01:00:01,839 --> 01:00:03,280
container so that it doesn't really

1488
01:00:03,280 --> 01:00:04,960
contain anything

1489
01:00:04,960 --> 01:00:08,480
or exploiting some kernel bug

1490
01:00:08,480 --> 01:00:11,680
that lets you do things outside of your

1491
01:00:11,680 --> 01:00:12,480
container

1492
01:00:12,480 --> 01:00:15,680
so like for example if you had a remote

1493
01:00:15,680 --> 01:00:16,559
code

1494
01:00:16,559 --> 01:00:19,200
execution if you had a code execution

1495
01:00:19,200 --> 01:00:20,240
vulnerability

1496
01:00:20,240 --> 01:00:24,880
inside the linux kernel code

1497
01:00:24,880 --> 01:00:26,880
then you could run code in the kernel

1498
01:00:26,880 --> 01:00:29,359
and hop out of your container

1499
01:00:29,359 --> 01:00:31,839
or i said that this is complicated

1500
01:00:31,839 --> 01:00:32,720
there's a ton

1501
01:00:32,720 --> 01:00:35,920
of kernel features and sometimes

1502
01:00:35,920 --> 01:00:38,319
a kernel feature can be accidentally

1503
01:00:38,319 --> 01:00:40,480
made made allowed inside a container

1504
01:00:40,480 --> 01:00:41,760
that allows you to affect the world

1505
01:00:41,760 --> 01:00:44,000
outside the container and if you can do

1506
01:00:44,000 --> 01:00:44,319
that

1507
01:00:44,319 --> 01:00:46,880
in a clever way sometimes you can escape

1508
01:00:46,880 --> 01:00:47,839
the container

1509
01:00:47,839 --> 01:00:50,799
so the video has great uh information

1510
01:00:50,799 --> 01:00:52,240
about that

1511
01:00:52,240 --> 01:00:56,000
but we we are the great and powerful

1512
01:00:56,000 --> 01:00:58,400
administrator so we can do whatever we

1513
01:00:58,400 --> 01:00:59,040
want

1514
01:00:59,040 --> 01:01:03,520
and what we want is to

1515
01:01:05,359 --> 01:01:07,280
deploy a container that just doesn't

1516
01:01:07,280 --> 01:01:08,839
contain in the first place

1517
01:01:08,839 --> 01:01:12,799
um back in november

1518
01:01:12,799 --> 01:01:15,680
back when we used to travel uh me and

1519
01:01:15,680 --> 01:01:16,480
several other

1520
01:01:16,480 --> 01:01:19,200
wonderful co-conspirators gave a

1521
01:01:19,200 --> 01:01:20,000
workshop

1522
01:01:20,000 --> 01:01:23,760
at uh kubecon it walked through a bunch

1523
01:01:23,760 --> 01:01:24,480
of attacks

1524
01:01:24,480 --> 01:01:26,240
and how to defend against them i've

1525
01:01:26,240 --> 01:01:27,920
posted the link to that in the chat as

1526
01:01:27,920 --> 01:01:28,799
well

1527
01:01:28,799 --> 01:01:32,640
and there's a great copy pasta in here

1528
01:01:32,640 --> 01:01:35,760
that gives you a pod

1529
01:01:35,760 --> 01:01:39,040
shout out to duffy cooley who made this

1530
01:01:39,040 --> 01:01:40,319
wonderful tweet

1531
01:01:40,319 --> 01:01:43,359
that we were able to just insert

1532
01:01:43,359 --> 01:01:44,079
directly

1533
01:01:44,079 --> 01:01:47,200
into the uh into the workshop with

1534
01:01:47,200 --> 01:01:50,480
his blessing thank you so we're gonna

1535
01:01:50,480 --> 01:01:51,280
copy this

1536
01:01:51,280 --> 01:01:53,280
and we're going to paste it down here

1537
01:01:53,280 --> 01:01:54,960
into our shell

1538
01:01:54,960 --> 01:01:58,960
and we need to

1539
01:01:58,960 --> 01:02:01,680
oh this ain't going to work because we

1540
01:02:01,680 --> 01:02:02,880
also need to pass

1541
01:02:02,880 --> 01:02:06,480
all of those options for server

1542
01:02:06,480 --> 01:02:08,000
so i'm going to type these in and then

1543
01:02:08,000 --> 01:02:10,160
i'm going to unpack what this big pile

1544
01:02:10,160 --> 01:02:11,760
of fanciness does and why it's going to

1545
01:02:11,760 --> 01:02:21,440
give us a shell on the host

1546
01:02:21,440 --> 01:02:25,920
all right so we're gonna coop ctl ron

1547
01:02:25,920 --> 01:02:29,440
i am going to call it uh honk

1548
01:02:29,440 --> 01:02:33,760
shout out to the uh sig honk people

1549
01:02:33,760 --> 01:02:37,200
restart never dash t in order to

1550
01:02:37,200 --> 01:02:40,400
get a terminal inside the pod dash i for

1551
01:02:40,400 --> 01:02:42,319
uh having our standard input connected

1552
01:02:42,319 --> 01:02:43,599
to it dash dash

1553
01:02:43,599 --> 01:02:46,559
rm for deleting it when we're done dash

1554
01:02:46,559 --> 01:02:46,880
dash

1555
01:02:46,880 --> 01:02:50,000
image lol because you can't cube ctl run

1556
01:02:50,000 --> 01:02:51,520
without specifying an image

1557
01:02:51,520 --> 01:02:52,720
and then here's where the fancy stuff

1558
01:02:52,720 --> 01:02:54,960
comes from dash dash overrides

1559
01:02:54,960 --> 01:02:58,160
and so this lets you just cram specific

1560
01:02:58,160 --> 01:03:00,240
json configuration directly into the

1561
01:03:00,240 --> 01:03:02,319
fake pod that it's going to make for you

1562
01:03:02,319 --> 01:03:05,200
and uh here's what we're specifying host

1563
01:03:05,200 --> 01:03:06,400
pid true

1564
01:03:06,400 --> 01:03:08,640
so when we go back here one of the key

1565
01:03:08,640 --> 01:03:10,319
lies that you tell

1566
01:03:10,319 --> 01:03:12,960
to a container to make it contain is

1567
01:03:12,960 --> 01:03:14,880
that it's the only pids in the world

1568
01:03:14,880 --> 01:03:17,920
so if we instead let this one

1569
01:03:17,920 --> 01:03:20,240
share the pid name space with the host

1570
01:03:20,240 --> 01:03:22,079
then this container will be able to see

1571
01:03:22,079 --> 01:03:24,000
all the processes

1572
01:03:24,000 --> 01:03:26,400
now we specify the alpine image and the

1573
01:03:26,400 --> 01:03:27,680
command that we're going to run inside

1574
01:03:27,680 --> 01:03:28,880
that alpine image

1575
01:03:28,880 --> 01:03:31,839
is ns enter which is one of these low

1576
01:03:31,839 --> 01:03:33,520
level linux commands to manipulate

1577
01:03:33,520 --> 01:03:34,480
namespaces

1578
01:03:34,480 --> 01:03:36,559
we want to and we want to run a process

1579
01:03:36,559 --> 01:03:37,760
in a namespace

1580
01:03:37,760 --> 01:03:40,640
the process that we want to run is in

1581
01:03:40,640 --> 01:03:41,280
bash

1582
01:03:41,280 --> 01:03:43,200
and the namespace that we want to enter

1583
01:03:43,200 --> 01:03:44,960
is the mount namespace

1584
01:03:44,960 --> 01:03:48,880
of pid1 it one is the primordial process

1585
01:03:48,880 --> 01:03:51,359
it's in it on modern ubuntu versions

1586
01:03:51,359 --> 01:03:53,520
it's systemd

1587
01:03:53,520 --> 01:03:55,680
and we know that pid1 always exists

1588
01:03:55,680 --> 01:03:57,920
because if it doesn't the kernel panics

1589
01:03:57,920 --> 01:03:59,200
so

1590
01:03:59,200 --> 01:04:00,799
we're in the hostpid namespace which

1591
01:04:00,799 --> 01:04:02,880
means we can see all the processes

1592
01:04:02,880 --> 01:04:05,839
and we know that pid1 always exists and

1593
01:04:05,839 --> 01:04:07,039
we know that pid1

1594
01:04:07,039 --> 01:04:08,960
has to be in all of the other host

1595
01:04:08,960 --> 01:04:10,960
namespaces or it couldn't work right

1596
01:04:10,960 --> 01:04:12,640
so we're going to enter into its mount

1597
01:04:12,640 --> 01:04:14,319
namespace and so

1598
01:04:14,319 --> 01:04:16,960
when we get the shell it's going to see

1599
01:04:16,960 --> 01:04:18,319
all of the processes

1600
01:04:18,319 --> 01:04:19,920
because we wiped out the pid namespace

1601
01:04:19,920 --> 01:04:22,559
separation and it's going to see all of

1602
01:04:22,559 --> 01:04:23,839
the host files

1603
01:04:23,839 --> 01:04:26,079
because we wiped out the mount namespace

1604
01:04:26,079 --> 01:04:27,760
separation using this ns

1605
01:04:27,760 --> 01:04:30,880
enter command it will still see

1606
01:04:30,880 --> 01:04:34,480
its own network connections it won't

1607
01:04:34,480 --> 01:04:36,720
see the host's network connections we

1608
01:04:36,720 --> 01:04:38,000
could do something about that if we

1609
01:04:38,000 --> 01:04:39,520
needed to but we won't need to we'll

1610
01:04:39,520 --> 01:04:41,920
have plenty of access just by doing this

1611
01:04:41,920 --> 01:04:43,680
and the last part that's the critical

1612
01:04:43,680 --> 01:04:46,319
piece here is security context

1613
01:04:46,319 --> 01:04:49,280
privileged privileged is like the danger

1614
01:04:49,280 --> 01:04:50,079
flag in

1615
01:04:50,079 --> 01:04:53,599
all of these container things because

1616
01:04:53,599 --> 01:04:56,480
if you have a container and you tell all

1617
01:04:56,480 --> 01:04:57,039
of these

1618
01:04:57,039 --> 01:05:00,880
important lies about what pids exist

1619
01:05:00,880 --> 01:05:04,400
what mounts exists and so on

1620
01:05:04,480 --> 01:05:07,680
it is pretty strong as long as you don't

1621
01:05:07,680 --> 01:05:08,000
have

1622
01:05:08,000 --> 01:05:11,760
the ability to call dangerous things

1623
01:05:11,760 --> 01:05:14,880
and if a process

1624
01:05:14,880 --> 01:05:17,839
is properly locked down into its

1625
01:05:17,839 --> 01:05:18,880
namespaces

1626
01:05:18,880 --> 01:05:22,079
which is a thing that you can do by

1627
01:05:22,079 --> 01:05:24,079
setting a bunch of flags some of which

1628
01:05:24,079 --> 01:05:27,039
are default and some of which are not

1629
01:05:27,039 --> 01:05:29,039
but there's a great upstream kubernetes

1630
01:05:29,039 --> 01:05:30,880
page about this called

1631
01:05:30,880 --> 01:05:34,000
pod security

1632
01:05:34,000 --> 01:05:37,920
standards and i'm going to link

1633
01:05:37,920 --> 01:05:41,760
that in the uh chat as well

1634
01:05:41,760 --> 01:05:44,559
if you set a ton of if you set a ton of

1635
01:05:44,559 --> 01:05:45,599
settings

1636
01:05:45,599 --> 01:05:47,520
some of which are defaults and some of

1637
01:05:47,520 --> 01:05:48,960
which are not

1638
01:05:48,960 --> 01:05:52,079
then the isolation provided by

1639
01:05:52,079 --> 01:05:55,280
a container is

1640
01:05:55,280 --> 01:05:58,319
actually pretty solid it's not 100

1641
01:05:58,319 --> 01:05:59,280
waterproof

1642
01:05:59,280 --> 01:06:02,960
because of this if i can get code

1643
01:06:02,960 --> 01:06:04,640
execution in the kernel it's party time

1644
01:06:04,640 --> 01:06:05,280
thing

1645
01:06:05,280 --> 01:06:08,880
but but it's it's pretty good um but if

1646
01:06:08,880 --> 01:06:10,160
you start to give

1647
01:06:10,160 --> 01:06:13,200
more privileges to the process

1648
01:06:13,200 --> 01:06:15,760
then you start to expose more dangerous

1649
01:06:15,760 --> 01:06:16,880
kernel features

1650
01:06:16,880 --> 01:06:19,200
you start to greatly increase the chance

1651
01:06:19,200 --> 01:06:20,880
that the container will leak

1652
01:06:20,880 --> 01:06:24,000
and the processes can get out so

1653
01:06:24,000 --> 01:06:26,079
when you run a container with security

1654
01:06:26,079 --> 01:06:27,599
context privileged

1655
01:06:27,599 --> 01:06:31,280
that means let it do whatever it wants

1656
01:06:31,280 --> 01:06:34,480
and that's why we can say

1657
01:06:34,480 --> 01:06:37,280
ns enter to enter this other mount

1658
01:06:37,280 --> 01:06:38,880
namespace we couldn't do that

1659
01:06:38,880 --> 01:06:42,240
if we were privileged and in fact you

1660
01:06:42,240 --> 01:06:44,079
know let's prove that

1661
01:06:44,079 --> 01:06:47,760
i'm gonna get out of this honk pod and

1662
01:06:47,760 --> 01:06:50,079
i am going to no i'm not going to do

1663
01:06:50,079 --> 01:06:51,280
this because i don't want to go into

1664
01:06:51,280 --> 01:06:52,240
yaml hell

1665
01:06:52,240 --> 01:06:55,039
i mean excuse me jason hell of trying to

1666
01:06:55,039 --> 01:06:56,720
get all the curly braces and stuff

1667
01:06:56,720 --> 01:06:58,240
matched up you just have to take my word

1668
01:06:58,240 --> 01:06:59,119
for it

1669
01:06:59,119 --> 01:07:01,839
oh no we can just make this false okay

1670
01:07:01,839 --> 01:07:03,440
so we're going to run this as false

1671
01:07:03,440 --> 01:07:05,119
and we're going to get smacked on the ns

1672
01:07:05,119 --> 01:07:06,640
enter

1673
01:07:06,640 --> 01:07:09,200
nscenter can't open proc 1 ns mount

1674
01:07:09,200 --> 01:07:10,400
permission denied

1675
01:07:10,400 --> 01:07:13,200
pod deleted pod terminated but if we're

1676
01:07:13,200 --> 01:07:16,160
privileged our ns enter can work

1677
01:07:16,160 --> 01:07:20,319
and lookie lookie we're now on the host

1678
01:07:20,319 --> 01:07:22,960
um do we really believe it uh let's see

1679
01:07:22,960 --> 01:07:24,079
what's the host name

1680
01:07:24,079 --> 01:07:27,440
well the host name is actually part of

1681
01:07:27,440 --> 01:07:29,839
the

1682
01:07:30,640 --> 01:07:34,480
of the uts namespace

1683
01:07:34,480 --> 01:07:38,880
unix time sharing

1684
01:07:38,880 --> 01:07:41,520
system and we didn't do anything to

1685
01:07:41,520 --> 01:07:43,359
escape our uts namespace

1686
01:07:43,359 --> 01:07:45,839
so we still think that we're here but if

1687
01:07:45,839 --> 01:07:47,520
we go into slash

1688
01:07:47,520 --> 01:07:50,720
etsy cat shadow

1689
01:07:50,720 --> 01:07:55,039
all right i i believe it um if we run ps

1690
01:07:55,039 --> 01:07:58,799
ef we can see all of these processes

1691
01:07:58,799 --> 01:08:00,079
like cube scheduler

1692
01:08:00,079 --> 01:08:03,520
api server container dcm we're we're

1693
01:08:03,520 --> 01:08:05,359
certainly on the host here

1694
01:08:05,359 --> 01:08:08,720
so going back what is our actual uh what

1695
01:08:08,720 --> 01:08:10,240
is our actual goal again

1696
01:08:10,240 --> 01:08:14,079
here we are trying to escape to root and

1697
01:08:14,079 --> 01:08:15,359
find the third flag

1698
01:08:15,359 --> 01:08:18,880
i mean this is uh this is a ctf

1699
01:08:18,880 --> 01:08:21,759
so you know the first thing that you

1700
01:08:21,759 --> 01:08:22,719
want to do

1701
01:08:22,719 --> 01:08:24,560
is their flag.txt and roots home

1702
01:08:24,560 --> 01:08:25,839
directory

1703
01:08:25,839 --> 01:08:29,520
yeah there is so i'm gonna

1704
01:08:29,520 --> 01:08:32,640
tease you a little bit if we cat the

1705
01:08:32,640 --> 01:08:34,719
flag then we can go and capture it

1706
01:08:34,719 --> 01:08:38,399
so all right we got that and uh

1707
01:08:38,399 --> 01:08:40,080
let's let's see if we can find the bonus

1708
01:08:40,080 --> 01:08:41,839
flag okay so let's pretend we're

1709
01:08:41,839 --> 01:08:42,560
attackers

1710
01:08:42,560 --> 01:08:44,880
we just got root on this host we want to

1711
01:08:44,880 --> 01:08:46,080
get some loot

1712
01:08:46,080 --> 01:08:48,080
um we gotta know what the host is doing

1713
01:08:48,080 --> 01:08:50,479
yes i can enlarge the font uh let's make

1714
01:08:50,479 --> 01:08:52,319
the font a little bigger

1715
01:08:52,319 --> 01:08:55,040
um let me know if that's better for you

1716
01:08:55,040 --> 01:08:55,439
so

1717
01:08:55,439 --> 01:08:57,759
uh yeah here we are we're on the host

1718
01:08:57,759 --> 01:08:59,279
we've capped the third flag we want to

1719
01:08:59,279 --> 01:09:00,719
look for the bonus flag

1720
01:09:00,719 --> 01:09:04,158
so what what does this host do

1721
01:09:04,158 --> 01:09:07,279
well we know it's a kubernetes host so

1722
01:09:07,279 --> 01:09:09,040
there are some things that we could do

1723
01:09:09,040 --> 01:09:10,799
like we could inspect the

1724
01:09:10,799 --> 01:09:13,120
containers that are running um we can

1725
01:09:13,120 --> 01:09:14,399
already do that though because we're

1726
01:09:14,399 --> 01:09:15,679
kubernetes admin

1727
01:09:15,679 --> 01:09:17,520
so it would be more convenient to do

1728
01:09:17,520 --> 01:09:19,520
that through kubernetes

1729
01:09:19,520 --> 01:09:21,279
what could be special about this

1730
01:09:21,279 --> 01:09:23,198
particular host

1731
01:09:23,198 --> 01:09:24,399
one thing that could be interesting

1732
01:09:24,399 --> 01:09:26,719
could be cloud provider metadata

1733
01:09:26,719 --> 01:09:30,799
so let's see if we can curl

1734
01:09:32,839 --> 01:09:35,839
this

1735
01:09:44,560 --> 01:09:46,560
most cloud providers have a metadata

1736
01:09:46,560 --> 01:09:48,080
server that runs on one six nine two

1737
01:09:48,080 --> 01:09:51,439
five four one six nine two five four

1738
01:09:51,439 --> 01:09:54,560
this is not this is not loving us and

1739
01:09:54,560 --> 01:09:55,679
the reason for that

1740
01:09:55,679 --> 01:09:58,480
is that uh if we could access this what

1741
01:09:58,480 --> 01:09:59,440
we would be learning

1742
01:09:59,440 --> 01:10:02,640
is information about try hackney's aws

1743
01:10:02,640 --> 01:10:03,440
account

1744
01:10:03,440 --> 01:10:05,600
they don't want us to learn this stuff

1745
01:10:05,600 --> 01:10:07,040
because then we could

1746
01:10:07,040 --> 01:10:09,040
you know potentially use it to attack

1747
01:10:09,040 --> 01:10:10,320
their cloud account and

1748
01:10:10,320 --> 01:10:13,520
uh that's that's out of scope so i'm

1749
01:10:13,520 --> 01:10:14,960
doing this because i know that it's

1750
01:10:14,960 --> 01:10:15,600
blocked

1751
01:10:15,600 --> 01:10:19,120
but in a real attack this would be one

1752
01:10:19,120 --> 01:10:20,560
of the first things you would you would

1753
01:10:20,560 --> 01:10:22,480
do is start crawling around

1754
01:10:22,480 --> 01:10:24,560
hoping that you can find cloud metadata

1755
01:10:24,560 --> 01:10:26,320
server

1756
01:10:26,320 --> 01:10:28,560
look on the host see you know what i p

1757
01:10:28,560 --> 01:10:29,600
address

1758
01:10:29,600 --> 01:10:31,520
look in the arp cache what host is it

1759
01:10:31,520 --> 01:10:33,520
connected to

1760
01:10:33,520 --> 01:10:37,600
look in netstat

1761
01:10:38,320 --> 01:10:41,520
see who is it talking to

1762
01:10:41,520 --> 01:10:43,360
there's really there's really not a lot

1763
01:10:43,360 --> 01:10:44,800
going on on this thing

1764
01:10:44,800 --> 01:10:48,320
um but maybe something has been done on

1765
01:10:48,320 --> 01:10:48,560
it

1766
01:10:48,560 --> 01:10:51,840
recently so

1767
01:10:51,840 --> 01:10:55,120
what's root been up to

1768
01:10:56,719 --> 01:10:58,640
it's in roots home directory roots

1769
01:10:58,640 --> 01:10:59,840
probably got good things in their home

1770
01:10:59,840 --> 01:11:00,960
directory

1771
01:11:00,960 --> 01:11:03,280
we'll do

1772
01:11:05,280 --> 01:11:08,800
um we'll do ls-l for long a

1773
01:11:08,800 --> 01:11:12,080
for all r for reverse sort and t

1774
01:11:12,080 --> 01:11:15,440
for sort by time and here's roots dot

1775
01:11:15,440 --> 01:11:17,280
bash history file

1776
01:11:17,280 --> 01:11:20,960
maybe roots run some cool commands

1777
01:11:23,600 --> 01:11:26,239
uh in fact root has run some cool

1778
01:11:26,239 --> 01:11:27,920
commands and that's where the bonus flag

1779
01:11:27,920 --> 01:11:28,560
is

1780
01:11:28,560 --> 01:11:31,760
because oftentimes if you

1781
01:11:31,760 --> 01:11:34,719
are on a server either as a forensic

1782
01:11:34,719 --> 01:11:35,679
person like

1783
01:11:35,679 --> 01:11:37,920
what is this server for what's it doing

1784
01:11:37,920 --> 01:11:40,320
or as an attacker

1785
01:11:40,320 --> 01:11:42,719
you can go and read root's history file

1786
01:11:42,719 --> 01:11:44,640
and just get some idea of what people

1787
01:11:44,640 --> 01:11:46,239
have been doing on the server

1788
01:11:46,239 --> 01:11:49,120
and it's not uncommon for people to

1789
01:11:49,120 --> 01:11:49,920
accidentally

1790
01:11:49,920 --> 01:11:52,159
type passwords in it's not uncommon for

1791
01:11:52,159 --> 01:11:53,760
people to run administrative commands

1792
01:11:53,760 --> 01:11:55,120
that require passing

1793
01:11:55,120 --> 01:11:57,520
credentials on the command line and

1794
01:11:57,520 --> 01:11:59,040
sometimes that stuff gets logged into

1795
01:11:59,040 --> 01:12:01,199
root's history file and you can get loot

1796
01:12:01,199 --> 01:12:02,000
out of it

1797
01:12:02,000 --> 01:12:03,920
so this is a simulation of that because

1798
01:12:03,920 --> 01:12:06,000
bonus flag is in roots

1799
01:12:06,000 --> 01:12:09,760
bash history file so that's

1800
01:12:09,760 --> 01:12:11,920
that's a that's a walkthrough of of this

1801
01:12:11,920 --> 01:12:13,679
whole machine

1802
01:12:13,679 --> 01:12:16,800
with a lot of backstory that i hope

1803
01:12:16,800 --> 01:12:19,760
will make it interesting to go learn

1804
01:12:19,760 --> 01:12:20,239
more

1805
01:12:20,239 --> 01:12:23,520
about kubernetes learn more about

1806
01:12:23,520 --> 01:12:27,360
offensive techniques understand better

1807
01:12:27,360 --> 01:12:29,440
the sorts of things that your attackers

1808
01:12:29,440 --> 01:12:30,400
could do

1809
01:12:30,400 --> 01:12:32,960
understand better what makes your

1810
01:12:32,960 --> 01:12:34,239
systems work

1811
01:12:34,239 --> 01:12:37,840
because ultimately the essence of

1812
01:12:37,840 --> 01:12:40,480
security to me comes down to the

1813
01:12:40,480 --> 01:12:41,280
difference

1814
01:12:41,280 --> 01:12:43,920
between the ideal how a system is

1815
01:12:43,920 --> 01:12:44,960
designed to work

1816
01:12:44,960 --> 01:12:48,719
and the real how it actually works and

1817
01:12:48,719 --> 01:12:51,199
finding ways that you can creatively use

1818
01:12:51,199 --> 01:12:52,080
that difference

1819
01:12:52,080 --> 01:12:56,239
to your advantage so like in this case

1820
01:12:56,239 --> 01:12:58,640
one thing that was a problem is there

1821
01:12:58,640 --> 01:13:00,080
was this bug in kubernetes

1822
01:13:00,080 --> 01:13:03,840
cve 2020 8558 and

1823
01:13:03,840 --> 01:13:05,040
it didn't work the way it was supposed

1824
01:13:05,040 --> 01:13:07,760
to the services running on localhost

1825
01:13:07,760 --> 01:13:09,280
were available to us

1826
01:13:09,280 --> 01:13:11,199
another problem is this system

1827
01:13:11,199 --> 01:13:13,840
administrator configured this bad idea

1828
01:13:13,840 --> 01:13:14,480
feature

1829
01:13:14,480 --> 01:13:17,600
of an insecure port and with those

1830
01:13:17,600 --> 01:13:21,199
two problems combined we were able to go

1831
01:13:21,199 --> 01:13:22,239
from

1832
01:13:22,239 --> 01:13:25,440
a relatively locked down low privilege

1833
01:13:25,440 --> 01:13:29,040
kubernetes user to full kubernetes

1834
01:13:29,040 --> 01:13:29,840
access

1835
01:13:29,840 --> 01:13:33,040
and since kubernetes when we go back to

1836
01:13:33,040 --> 01:13:33,360
it

1837
01:13:33,360 --> 01:13:35,600
is a system for asking machines to do

1838
01:13:35,600 --> 01:13:38,000
work once we had full kubernetes access

1839
01:13:38,000 --> 01:13:39,520
we could ask the machines to do whatever

1840
01:13:39,520 --> 01:13:42,080
we wanted so we did it

1841
01:13:42,080 --> 01:13:44,320
and i hope that it was fun um you know

1842
01:13:44,320 --> 01:13:45,760
reach out to me i'm going to be hanging

1843
01:13:45,760 --> 01:13:47,520
out in the ctf channel

1844
01:13:47,520 --> 01:13:49,280
for a while reach out to me if you have

1845
01:13:49,280 --> 01:13:50,560
questions um

1846
01:13:50,560 --> 01:13:54,159
i'm on twitter tabbysable you know at me

1847
01:13:54,159 --> 01:13:57,600
um say nice things say mean things if

1848
01:13:57,600 --> 01:13:59,679
you really have to but why be that way

1849
01:13:59,679 --> 01:14:02,560
but uh anyway i hope you had fun enjoy

1850
01:14:02,560 --> 01:14:04,400
the rest of diane initiative

1851
01:14:04,400 --> 01:14:08,719
and uh go cap some flags

