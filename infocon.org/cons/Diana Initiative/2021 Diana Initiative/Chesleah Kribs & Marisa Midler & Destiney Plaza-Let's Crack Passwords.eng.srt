1
00:00:19,920 --> 00:00:23,279
hello everybody welcome to stage three

2
00:00:23,279 --> 00:00:24,320
all right

3
00:00:24,320 --> 00:00:26,880
these next three speakers are total

4
00:00:26,880 --> 00:00:28,640
badasses and they are here to talk about

5
00:00:28,640 --> 00:00:31,519
having some fun cracking passwords with

6
00:00:31,519 --> 00:00:33,520
you there's lots to cover i don't want

7
00:00:33,520 --> 00:00:35,520
to take up too much more time there'll

8
00:00:35,520 --> 00:00:38,320
be a survey included in the chat so

9
00:00:38,320 --> 00:00:41,200
please enjoy and let me hand it on over

10
00:00:41,200 --> 00:00:45,600
to destiny marissa and chesley go for it

11
00:00:45,600 --> 00:00:47,760
hello everyone thank you for having us

12
00:00:47,760 --> 00:00:50,640
and welcome to let's crack passwords

13
00:00:50,640 --> 00:00:52,160
right before we get started we have to

14
00:00:52,160 --> 00:00:53,840
show our distribution statement for a

15
00:00:53,840 --> 00:00:55,120
few seconds

16
00:00:55,120 --> 00:00:58,000
but now we can move on to our agenda

17
00:00:58,000 --> 00:00:59,760
we'll be going over common mistakes

18
00:00:59,760 --> 00:01:02,399
people do five steps on how you can

19
00:01:02,399 --> 00:01:05,199
crack passwords attack scenarios and

20
00:01:05,199 --> 00:01:07,520
password best practices my name is

21
00:01:07,520 --> 00:01:09,600
destiny plaza i'm a cyber security

22
00:01:09,600 --> 00:01:10,640
engineer

23
00:01:10,640 --> 00:01:12,880
my name is marissa midler and i'm also a

24
00:01:12,880 --> 00:01:15,200
cyber security engineer and my name is

25
00:01:15,200 --> 00:01:17,520
cheslea kribs and i am your resident

26
00:01:17,520 --> 00:01:19,680
hacker

27
00:01:19,680 --> 00:01:20,640
so

28
00:01:20,640 --> 00:01:24,479
in 2018 you heard of a incoming

29
00:01:24,479 --> 00:01:26,880
ballistic missile threat that was sent

30
00:01:26,880 --> 00:01:28,720
out as a text message

31
00:01:28,720 --> 00:01:32,320
to hawaii um but this wasn't actually

32
00:01:32,320 --> 00:01:34,479
the biggest news in the infosec

33
00:01:34,479 --> 00:01:35,680
community

34
00:01:35,680 --> 00:01:36,799
actually

35
00:01:36,799 --> 00:01:39,439
it was this picture this picture was

36
00:01:39,439 --> 00:01:41,759
posted by the associated press it was an

37
00:01:41,759 --> 00:01:44,240
operations manager who thought that he

38
00:01:44,240 --> 00:01:46,159
had everything going on

39
00:01:46,159 --> 00:01:48,399
except there was a sticky note

40
00:01:48,399 --> 00:01:50,640
on his uh computer

41
00:01:50,640 --> 00:01:52,840
telling everyone what the password

42
00:01:52,840 --> 00:01:54,880
was so

43
00:01:54,880 --> 00:01:57,040
does this really happen in common things

44
00:01:57,040 --> 00:01:58,799
that people do so

45
00:01:58,799 --> 00:02:01,200
yes people do put their passwords on

46
00:02:01,200 --> 00:02:02,640
sticky notes

47
00:02:02,640 --> 00:02:05,200
yes we we really don't recommend that

48
00:02:05,200 --> 00:02:06,079
but

49
00:02:06,079 --> 00:02:08,479
we'll talk about that later we also do

50
00:02:08,479 --> 00:02:10,639
password reuse and we have identifiable

51
00:02:10,639 --> 00:02:12,959
information that we use as passwords so

52
00:02:12,959 --> 00:02:15,840
may i present my new puppy lucy and

53
00:02:15,840 --> 00:02:16,640
she's

54
00:02:16,640 --> 00:02:19,520
she's awesome i love her so much i put

55
00:02:19,520 --> 00:02:21,599
her birthday everywhere she goes to

56
00:02:21,599 --> 00:02:22,480
daycare

57
00:02:22,480 --> 00:02:24,879
and you know what i post it on instagram

58
00:02:24,879 --> 00:02:27,200
i post it on facebook i post it on

59
00:02:27,200 --> 00:02:29,280
twitter and even my colleagues at

60
00:02:29,280 --> 00:02:32,239
linkedin know about lucy but

61
00:02:32,239 --> 00:02:35,120
i love lucy so much she is my password

62
00:02:35,120 --> 00:02:38,000
and people like me hackers

63
00:02:38,000 --> 00:02:40,480
they know this they can do recon

64
00:02:40,480 --> 00:02:43,920
and it's easy as one two three literally

65
00:02:43,920 --> 00:02:46,800
uh to figure out what this password is

66
00:02:46,800 --> 00:02:48,080
so

67
00:02:48,080 --> 00:02:50,640
please don't please don't pack me but

68
00:02:50,640 --> 00:02:53,440
does this really happen as a hacker as a

69
00:02:53,440 --> 00:02:56,800
pen tester i see passwords like i love

70
00:02:56,800 --> 00:03:00,159
you or i love lucy or

71
00:03:00,159 --> 00:03:04,400
my first name as a password so often and

72
00:03:04,400 --> 00:03:06,800
one of the best things that we see as

73
00:03:06,800 --> 00:03:09,280
attackers is we love low hanging fruit

74
00:03:09,280 --> 00:03:12,239
so the last bullet on this list is admin

75
00:03:12,239 --> 00:03:14,319
these are default credentials if i can

76
00:03:14,319 --> 00:03:17,040
google a password

77
00:03:17,040 --> 00:03:19,840
it's game over

78
00:03:20,000 --> 00:03:22,480
so what we like to recommend is

79
00:03:22,480 --> 00:03:25,200
something called have i been pwned uh

80
00:03:25,200 --> 00:03:27,680
this is where you can input your uh

81
00:03:27,680 --> 00:03:29,519
email you can input your password just

82
00:03:29,519 --> 00:03:31,840
to see if it has been phoned or has it

83
00:03:31,840 --> 00:03:34,959
if it's come up in any database breaches

84
00:03:34,959 --> 00:03:38,159
but again it is up to you to secure your

85
00:03:38,159 --> 00:03:39,680
password and make sure that it's

86
00:03:39,680 --> 00:03:42,640
uncrackable or not even worth the effort

87
00:03:42,640 --> 00:03:45,280
to want to crack

88
00:03:45,280 --> 00:03:48,480
all right now it's time to crack

89
00:03:48,480 --> 00:03:50,319
ready set

90
00:03:50,319 --> 00:03:51,360
stop

91
00:03:51,360 --> 00:03:54,480
actually we need to ask ourselves do we

92
00:03:54,480 --> 00:03:57,040
have the proper authorization if the

93
00:03:57,040 --> 00:03:59,920
answer is no we do not want to proceed

94
00:03:59,920 --> 00:04:01,599
because we don't want to be affiliated

95
00:04:01,599 --> 00:04:03,840
with illegal activity so make sure you

96
00:04:03,840 --> 00:04:05,519
have the proper permissions before you

97
00:04:05,519 --> 00:04:07,760
start anything but now we go to our

98
00:04:07,760 --> 00:04:12,000
steps step one cali what is it it's free

99
00:04:12,000 --> 00:04:14,319
open source made for penetration testers

100
00:04:14,319 --> 00:04:16,798
researchers and curious people like us

101
00:04:16,798 --> 00:04:20,160
it has over 600 tools built in and has

102
00:04:20,160 --> 00:04:21,759
something to our particular interest

103
00:04:21,759 --> 00:04:24,960
which is password crackers step two is

104
00:04:24,960 --> 00:04:27,759
gathering a word list luckily enough

105
00:04:27,759 --> 00:04:30,000
cali has this for us you can also get

106
00:04:30,000 --> 00:04:32,080
them from github or even generate your

107
00:04:32,080 --> 00:04:33,919
own the one that we'll be using is

108
00:04:33,919 --> 00:04:35,680
rocky.txt

109
00:04:35,680 --> 00:04:38,400
step three is the password cracking tool

110
00:04:38,400 --> 00:04:41,520
itself we'll be going over two hash bass

111
00:04:41,520 --> 00:04:44,240
crackers john the ripper and hash cat

112
00:04:44,240 --> 00:04:47,440
which both support cpu and gpu john

113
00:04:47,440 --> 00:04:48,639
however was

114
00:04:48,639 --> 00:04:50,639
built more towards cpu and hashcat

115
00:04:50,639 --> 00:04:52,960
towards gpu usage

116
00:04:52,960 --> 00:04:55,280
john also is a lot better at cracking

117
00:04:55,280 --> 00:04:57,120
passwords less than eight characters

118
00:04:57,120 --> 00:04:58,639
wears hash cap more than eight

119
00:04:58,639 --> 00:05:01,440
characters but both can do vice versa

120
00:05:01,440 --> 00:05:04,400
step four is to identify your target but

121
00:05:04,400 --> 00:05:07,280
oh wait stop again we need to ask

122
00:05:07,280 --> 00:05:08,880
ourselves if we have the proper

123
00:05:08,880 --> 00:05:11,120
permission because if we don't we should

124
00:05:11,120 --> 00:05:14,080
not be identifying or locating anything

125
00:05:14,080 --> 00:05:15,280
to crack

126
00:05:15,280 --> 00:05:18,800
and step 5 start cracking so we'll be

127
00:05:18,800 --> 00:05:20,960
going over to our example with john the

128
00:05:20,960 --> 00:05:22,560
ripper

129
00:05:22,560 --> 00:05:25,360
so all right step one was in our cali

130
00:05:25,360 --> 00:05:28,479
box we're in it fantastic great step two

131
00:05:28,479 --> 00:05:30,400
is to locate the word list that we're

132
00:05:30,400 --> 00:05:32,479
going to use luckily enough cali has

133
00:05:32,479 --> 00:05:34,240
this handy command called locate word

134
00:05:34,240 --> 00:05:36,639
list where it outputs all the wordless

135
00:05:36,639 --> 00:05:39,759
that comes pre-installed in our cali box

136
00:05:39,759 --> 00:05:42,240
as we can see here we have a lot of word

137
00:05:42,240 --> 00:05:43,360
lists

138
00:05:43,360 --> 00:05:46,440
again to our interest however is

139
00:05:46,440 --> 00:05:48,400
rocky.txt

140
00:05:48,400 --> 00:05:50,479
as we can see here if this is your first

141
00:05:50,479 --> 00:05:52,320
time using this then you will have to

142
00:05:52,320 --> 00:05:55,199
unzip rock you but i happen to have

143
00:05:55,199 --> 00:05:57,199
already done that so we're gonna go

144
00:05:57,199 --> 00:05:59,759
ahead and look at the first ten contents

145
00:05:59,759 --> 00:06:02,479
of rocky.txt with the head command here

146
00:06:02,479 --> 00:06:05,120
we see in rocky.txt is the most common

147
00:06:05,120 --> 00:06:07,199
passwords unfortunately we're seeing

148
00:06:07,199 --> 00:06:09,280
things like password i love you princess

149
00:06:09,280 --> 00:06:11,039
in one two three four five goodness

150
00:06:11,039 --> 00:06:13,280
gracious that's horrible now we'll look

151
00:06:13,280 --> 00:06:15,120
into how many passwords are actually in

152
00:06:15,120 --> 00:06:17,919
rocky.txt to give you an example and oh

153
00:06:17,919 --> 00:06:20,479
my goodness it's filled with thousands

154
00:06:20,479 --> 00:06:22,560
of passwords and

155
00:06:22,560 --> 00:06:25,600
oh again they're just so

156
00:06:25,600 --> 00:06:27,520
ugly i'm gonna have to get them off my

157
00:06:27,520 --> 00:06:29,600
screen is how ugly they are all right

158
00:06:29,600 --> 00:06:32,160
moving forward so kelly has this thing

159
00:06:32,160 --> 00:06:34,560
called applications where it's able to

160
00:06:34,560 --> 00:06:37,039
categorize all the different tools that

161
00:06:37,039 --> 00:06:39,199
come pre-installed

162
00:06:39,199 --> 00:06:41,120
we can see things like reverse

163
00:06:41,120 --> 00:06:43,199
engineering and sniffing and oh look

164
00:06:43,199 --> 00:06:45,440
here we see password attacks where it

165
00:06:45,440 --> 00:06:48,319
lists out all the password crackers that

166
00:06:48,319 --> 00:06:51,440
it has and i see john so let's take a

167
00:06:51,440 --> 00:06:54,479
look at john i'm going to go and do john

168
00:06:54,479 --> 00:06:57,039
h to look at the help menu

169
00:06:57,039 --> 00:06:59,199
so now we can see how we can pass in

170
00:06:59,199 --> 00:07:01,440
arguments to john it takes in some

171
00:07:01,440 --> 00:07:03,840
options in a required password file

172
00:07:03,840 --> 00:07:06,160
which is important to note another thing

173
00:07:06,160 --> 00:07:08,319
to note here is that we can pass in a

174
00:07:08,319 --> 00:07:11,039
word list with dash dash word list this

175
00:07:11,039 --> 00:07:13,759
is where our rocky.txt will come into

176
00:07:13,759 --> 00:07:16,479
hand we also see that it has an equal

177
00:07:16,479 --> 00:07:19,440
sign so you can pass in the argument so

178
00:07:19,440 --> 00:07:21,280
it's really important to note the syntax

179
00:07:21,280 --> 00:07:23,759
when we're going over the help menu so

180
00:07:23,759 --> 00:07:25,840
the equal sign seems to be important

181
00:07:25,840 --> 00:07:27,280
here

182
00:07:27,280 --> 00:07:29,680
another thing to look at is the dash

183
00:07:29,680 --> 00:07:32,080
users this is really neat because you're

184
00:07:32,080 --> 00:07:35,360
able to specify a user or multiple users

185
00:07:35,360 --> 00:07:38,000
and you can also put a dash in front

186
00:07:38,000 --> 00:07:40,720
meaning look at all users but the ones

187
00:07:40,720 --> 00:07:43,280
that i have just listed

188
00:07:43,280 --> 00:07:46,400
another option to look here is groups it

189
00:07:46,400 --> 00:07:49,599
works just the same as users simply with

190
00:07:49,599 --> 00:07:51,840
groups and you can also put a dash in

191
00:07:51,840 --> 00:07:54,000
front to invert the check

192
00:07:54,000 --> 00:07:56,000
now one of the last options i want you

193
00:07:56,000 --> 00:07:58,560
to look at is dash dash format it's

194
00:07:58,560 --> 00:08:01,120
really important to specify the format

195
00:08:01,120 --> 00:08:03,120
because specifying the format will

196
00:08:03,120 --> 00:08:05,840
increase crack time and thankfully

197
00:08:05,840 --> 00:08:09,039
enough john comes with in command called

198
00:08:09,039 --> 00:08:11,680
dash dash list format where you're able

199
00:08:11,680 --> 00:08:13,680
to see all the formats that john can

200
00:08:13,680 --> 00:08:15,840
handle so let's go ahead and throw that

201
00:08:15,840 --> 00:08:19,120
into john to see what we get

202
00:08:19,120 --> 00:08:21,599
sweet we get a list of all the formats

203
00:08:21,599 --> 00:08:23,680
that john can handle i see things like

204
00:08:23,680 --> 00:08:27,080
mysql mongodb

205
00:08:27,080 --> 00:08:31,280
xia256 and md5 you know what speaking of

206
00:08:31,280 --> 00:08:34,240
md5 i kind of want to play with uh john

207
00:08:34,240 --> 00:08:36,958
with an md5 hash but i actually don't

208
00:08:36,958 --> 00:08:39,360
have one offhand so

209
00:08:39,360 --> 00:08:42,399
i wonder how i would do that so let's go

210
00:08:42,399 --> 00:08:45,920
ahead and look at how hashes work so how

211
00:08:45,920 --> 00:08:47,519
hashes work is that you take a plain

212
00:08:47,519 --> 00:08:49,600
text throw it into a hash function and

213
00:08:49,600 --> 00:08:51,920
you get a hash tag so a hash

214
00:08:51,920 --> 00:08:54,240
representation of your plain text and

215
00:08:54,240 --> 00:08:56,240
the hash representation of your plain

216
00:08:56,240 --> 00:08:58,880
text should be the thing stored as

217
00:08:58,880 --> 00:09:02,720
passwords hopefully hopefully

218
00:09:02,720 --> 00:09:05,519
so i'm going to go ahead and try to make

219
00:09:05,519 --> 00:09:08,560
a dummy password and i'm going to use

220
00:09:08,560 --> 00:09:10,720
the md5 hash and i'm going to have this

221
00:09:10,720 --> 00:09:13,120
password called winter

222
00:09:13,120 --> 00:09:15,200
so as you can see here that winter is my

223
00:09:15,200 --> 00:09:19,920
plain text and i passed in the md5 sum

224
00:09:19,920 --> 00:09:22,320
and i got my hash representation so i

225
00:09:22,320 --> 00:09:25,920
got the md5 hash of winter

226
00:09:25,920 --> 00:09:27,600
now we're going to have to throw this

227
00:09:27,600 --> 00:09:31,440
hash into a file why because recall that

228
00:09:31,440 --> 00:09:33,600
in the help menu john required a

229
00:09:33,600 --> 00:09:35,279
password file

230
00:09:35,279 --> 00:09:37,680
so we're going to have to copy this hash

231
00:09:37,680 --> 00:09:39,920
and throw it into a file so that's what

232
00:09:39,920 --> 00:09:43,680
i'm doing right here going to copy this

233
00:09:43,680 --> 00:09:45,200
then i'm going to throw it into a file

234
00:09:45,200 --> 00:09:46,720
and i'm going to call this file

235
00:09:46,720 --> 00:09:49,720
target.txt

236
00:09:50,080 --> 00:09:51,839
sweet so let's go ahead and look to make

237
00:09:51,839 --> 00:09:54,160
sure it's in there it's in there awesome

238
00:09:54,160 --> 00:09:56,720
now let's test john out with our mock

239
00:09:56,720 --> 00:09:58,560
password file

240
00:09:58,560 --> 00:10:00,480
so we're going to do sudo john we're

241
00:10:00,480 --> 00:10:02,399
going to put in the format which we know

242
00:10:02,399 --> 00:10:05,040
is md5 and we have to put our password

243
00:10:05,040 --> 00:10:07,680
file which is target.txt

244
00:10:07,680 --> 00:10:11,279
so let's go ahead and run this

245
00:10:11,360 --> 00:10:14,000
we ran this and that was lightning fast

246
00:10:14,000 --> 00:10:16,240
as you can see it was able to grab the

247
00:10:16,240 --> 00:10:17,120
hash

248
00:10:17,120 --> 00:10:18,399
representation

249
00:10:18,399 --> 00:10:20,000
of our string

250
00:10:20,000 --> 00:10:22,079
and find out that it was the string

251
00:10:22,079 --> 00:10:24,000
winter which is correct that was our

252
00:10:24,000 --> 00:10:25,760
dummy password

253
00:10:25,760 --> 00:10:27,600
we're doing great so far so let's create

254
00:10:27,600 --> 00:10:29,600
another dummy password and i'm also

255
00:10:29,600 --> 00:10:31,760
using md5 and i'm going to make this

256
00:10:31,760 --> 00:10:33,680
password say love

257
00:10:33,680 --> 00:10:36,320
my password is going to be love

258
00:10:36,320 --> 00:10:38,399
and i got the hash representation of

259
00:10:38,399 --> 00:10:39,600
love

260
00:10:39,600 --> 00:10:42,880
so let's go again and pass in that md5

261
00:10:42,880 --> 00:10:44,480
hash and we're going to throw it into a

262
00:10:44,480 --> 00:10:46,480
file i'm simply going to overwrite what

263
00:10:46,480 --> 00:10:49,880
was in target.txt

264
00:10:52,079 --> 00:10:53,839
now let's make sure that it's in there

265
00:10:53,839 --> 00:10:56,880
so i'm going to cap this

266
00:10:57,519 --> 00:11:00,720
sweet now i see my hash in there but do

267
00:11:00,720 --> 00:11:02,320
remember that john can take in a word

268
00:11:02,320 --> 00:11:03,839
list we didn't use that previously

269
00:11:03,839 --> 00:11:06,320
because john already has a wordless

270
00:11:06,320 --> 00:11:09,279
pre-built in but we can specify one and

271
00:11:09,279 --> 00:11:11,839
we talked about rocky.txt

272
00:11:11,839 --> 00:11:14,240
so with rocky.txt we first need to know

273
00:11:14,240 --> 00:11:16,320
where it's stored and we see that it's

274
00:11:16,320 --> 00:11:18,959
stored in user share word list

275
00:11:18,959 --> 00:11:21,200
now we have to take this path

276
00:11:21,200 --> 00:11:24,000
and put it in our word list option so

277
00:11:24,000 --> 00:11:27,680
we're going to do that by dash w colon

278
00:11:27,680 --> 00:11:29,600
the path to the file

279
00:11:29,600 --> 00:11:32,920
then rocky.txt

280
00:11:33,040 --> 00:11:34,480
great

281
00:11:34,480 --> 00:11:36,320
so now we have our command we have our

282
00:11:36,320 --> 00:11:38,320
word list we have our format which is

283
00:11:38,320 --> 00:11:41,200
md5 and we have our password file which

284
00:11:41,200 --> 00:11:43,200
is target.txt

285
00:11:43,200 --> 00:11:46,240
let's go ahead and run this

286
00:11:46,240 --> 00:11:49,120
again super fast it was able to grab

287
00:11:49,120 --> 00:11:52,079
that md5 hash and see that the plain

288
00:11:52,079 --> 00:11:54,880
text is love and that is true that was

289
00:11:54,880 --> 00:11:57,440
our dummy password

290
00:11:57,440 --> 00:11:58,720
so

291
00:11:58,720 --> 00:12:00,240
we've been doing great so far with our

292
00:12:00,240 --> 00:12:02,800
dummy passwords so let's kind of spice

293
00:12:02,800 --> 00:12:04,079
things up a little bit so i'm going to

294
00:12:04,079 --> 00:12:05,839
look at what's in my directory here and

295
00:12:05,839 --> 00:12:08,880
i see i have a file called targets.txt

296
00:12:08,880 --> 00:12:10,800
this is a file that i created actually

297
00:12:10,800 --> 00:12:13,760
so let's go ahead and look at it

298
00:12:13,760 --> 00:12:17,600
sweet so see we have three users in here

299
00:12:17,600 --> 00:12:19,279
the format that john likes is for you to

300
00:12:19,279 --> 00:12:21,839
put a username a colon in the hash and

301
00:12:21,839 --> 00:12:24,079
right here i'm looking at admin seems

302
00:12:24,079 --> 00:12:26,880
interesting i want to crack it but how

303
00:12:26,880 --> 00:12:28,720
we have to go back to our help menu to

304
00:12:28,720 --> 00:12:31,440
figure out how we can crack

305
00:12:31,440 --> 00:12:34,160
this user so let's go ahead and do that

306
00:12:34,160 --> 00:12:36,959
john h got my help text

307
00:12:36,959 --> 00:12:40,000
and i see that it's simply dash users

308
00:12:40,000 --> 00:12:42,800
great so now i know that option let's go

309
00:12:42,800 --> 00:12:45,360
ahead and use it

310
00:12:45,360 --> 00:12:47,279
so i'm going to do sudo john my word

311
00:12:47,279 --> 00:12:48,399
list

312
00:12:48,399 --> 00:12:51,040
targets.txt

313
00:12:51,040 --> 00:12:53,519
and i'm going to use that dash users

314
00:12:53,519 --> 00:12:55,920
equals

315
00:12:55,920 --> 00:12:58,399
admin

316
00:12:58,800 --> 00:13:01,200
but wait a second it didn't run huh i

317
00:13:01,200 --> 00:13:02,959
wonder why

318
00:13:02,959 --> 00:13:06,240
well actually maybe it's not md5 hash

319
00:13:06,240 --> 00:13:08,000
after all that's what we've been using

320
00:13:08,000 --> 00:13:09,040
so far

321
00:13:09,040 --> 00:13:10,880
and if you're unsure about what hash

322
00:13:10,880 --> 00:13:12,560
type something is

323
00:13:12,560 --> 00:13:14,320
cali has a neat tool called hash

324
00:13:14,320 --> 00:13:17,920
identifier well it's able to display a

325
00:13:17,920 --> 00:13:20,560
prediction of what hashtag something may

326
00:13:20,560 --> 00:13:22,959
be so i'm going to go ahead and copy my

327
00:13:22,959 --> 00:13:25,120
hash for admin

328
00:13:25,120 --> 00:13:27,120
and i'm going to go ahead and run hash

329
00:13:27,120 --> 00:13:29,760
identifier simply by doing hash dash

330
00:13:29,760 --> 00:13:31,360
identifier

331
00:13:31,360 --> 00:13:33,200
now i can pass

332
00:13:33,200 --> 00:13:37,120
pass in my hash by simply pasting it

333
00:13:37,120 --> 00:13:39,279
and i get an output of the possible

334
00:13:39,279 --> 00:13:41,440
hashes and it's telling me it

335
00:13:41,440 --> 00:13:43,920
may be sha-256

336
00:13:43,920 --> 00:13:46,160
so maybe it was an md5 after all it's

337
00:13:46,160 --> 00:13:48,959
sha-256 so let's go ahead and change

338
00:13:48,959 --> 00:13:50,720
that in our format so our format is

339
00:13:50,720 --> 00:13:52,800
going to be raw dash

340
00:13:52,800 --> 00:13:54,160
shaw

341
00:13:54,160 --> 00:13:56,639
256.

342
00:13:56,639 --> 00:13:59,199
sweet so now we have our wordless rocky

343
00:13:59,199 --> 00:14:01,600
we have our format which is sha-256 our

344
00:14:01,600 --> 00:14:05,839
password file in dash users equals admin

345
00:14:05,839 --> 00:14:08,720
oh super fast again and we see that the

346
00:14:08,720 --> 00:14:11,519
password for admin was simply admin

347
00:14:11,519 --> 00:14:13,199
looks like someone was using default

348
00:14:13,199 --> 00:14:15,519
credentials not good

349
00:14:15,519 --> 00:14:17,199
all right so so far we've been only

350
00:14:17,199 --> 00:14:19,680
cracking one thing in our password file

351
00:14:19,680 --> 00:14:22,240
but you can crack more than one thing in

352
00:14:22,240 --> 00:14:24,399
our password file so let's go ahead and

353
00:14:24,399 --> 00:14:25,839
look at the rest of the contents of

354
00:14:25,839 --> 00:14:27,600
target.txt

355
00:14:27,600 --> 00:14:29,920
we see we have more users so let's go

356
00:14:29,920 --> 00:14:33,120
ahead and just crack the rest of them

357
00:14:33,120 --> 00:14:34,720
all i have to do is just pass in that

358
00:14:34,720 --> 00:14:37,040
file

359
00:14:37,040 --> 00:14:38,880
so now i have my word list my format

360
00:14:38,880 --> 00:14:42,720
shot256 and my password file so it's

361
00:14:42,720 --> 00:14:44,320
going to crack the remaining hashes

362
00:14:44,320 --> 00:14:47,199
let's see this work

363
00:14:47,760 --> 00:14:49,360
that was pretty fast

364
00:14:49,360 --> 00:14:52,320
we see that for user target one

365
00:14:52,320 --> 00:14:55,120
the password was lucky seven seven seven

366
00:14:55,120 --> 00:14:57,120
kinda not that lucky after all since we

367
00:14:57,120 --> 00:14:58,560
cracked them

368
00:14:58,560 --> 00:15:00,880
for target 2 we see that the password

369
00:15:00,880 --> 00:15:02,959
was pizza rules i do agree the pizza

370
00:15:02,959 --> 00:15:06,320
rules but not a great password

371
00:15:06,320 --> 00:15:08,560
so a key takeaway that i want you to get

372
00:15:08,560 --> 00:15:12,160
from john is this command right here we

373
00:15:12,160 --> 00:15:15,199
have john w which means you pass in that

374
00:15:15,199 --> 00:15:16,320
word list

375
00:15:16,320 --> 00:15:18,880
dash format which you specify the format

376
00:15:18,880 --> 00:15:22,000
type and then the required password file

377
00:15:22,000 --> 00:15:23,839
if you happen to not know what hash

378
00:15:23,839 --> 00:15:25,199
you're working with

379
00:15:25,199 --> 00:15:26,959
do remember that you can use hash

380
00:15:26,959 --> 00:15:29,600
identifier to get the hash type we also

381
00:15:29,600 --> 00:15:32,079
looked at using john without a word list

382
00:15:32,079 --> 00:15:34,880
with a word list and specifying a

383
00:15:34,880 --> 00:15:38,240
particular user to crack

384
00:15:38,959 --> 00:15:40,320
so i'm going to be talking about hash

385
00:15:40,320 --> 00:15:42,320
cat hashcat is super robust so we're

386
00:15:42,320 --> 00:15:44,399
going to take a look at the help menu

387
00:15:44,399 --> 00:15:47,120
first we see and we pipe this to less we

388
00:15:47,120 --> 00:15:50,639
get dash m is the hash type has hundreds

389
00:15:50,639 --> 00:15:52,720
we're going to see dash a for attack

390
00:15:52,720 --> 00:15:54,560
mode we're going to look at two today

391
00:15:54,560 --> 00:15:56,240
we're going to see straight and

392
00:15:56,240 --> 00:15:59,279
combination again just the help flag we

393
00:15:59,279 --> 00:16:02,320
also see dash o for an output file we

394
00:16:02,320 --> 00:16:04,720
can also see dash b for a benchmark test

395
00:16:04,720 --> 00:16:06,079
which we're going to test this out with

396
00:16:06,079 --> 00:16:07,440
md5

397
00:16:07,440 --> 00:16:09,680
then we always recommend that you do

398
00:16:09,680 --> 00:16:12,959
dash capital o for optimization just to

399
00:16:12,959 --> 00:16:16,560
initialize hash cap first

400
00:16:17,360 --> 00:16:19,759
we're going to see hash cat dash example

401
00:16:19,759 --> 00:16:21,680
hashes over here where you're going to

402
00:16:21,680 --> 00:16:24,880
see the hundreds if not thousands of

403
00:16:24,880 --> 00:16:26,240
potential

404
00:16:26,240 --> 00:16:30,000
hashes that hashcat can crack

405
00:16:30,000 --> 00:16:31,759
hundreds

406
00:16:31,759 --> 00:16:33,360
telling you

407
00:16:33,360 --> 00:16:35,120
then we're going to do a benchmark test

408
00:16:35,120 --> 00:16:37,720
we're going to do the dash b option

409
00:16:37,720 --> 00:16:40,720
m0 for md5 we're going to start cracking

410
00:16:40,720 --> 00:16:43,600
that not cracking but seeing how fast my

411
00:16:43,600 --> 00:16:45,759
computer can actually handle

412
00:16:45,759 --> 00:16:47,600
md5 cracking

413
00:16:47,600 --> 00:16:50,160
so it'll give you all of the latency and

414
00:16:50,160 --> 00:16:52,800
all of the speeds for a specific hash

415
00:16:52,800 --> 00:16:55,040
type then we're going to create a hash

416
00:16:55,040 --> 00:16:57,519
of hello world we're going to pipe that

417
00:16:57,519 --> 00:16:59,360
to a file and we're going to make this a

418
00:16:59,360 --> 00:17:02,480
sha 256 this is going to be your example

419
00:17:02,480 --> 00:17:05,359
of a straight attack so it's going to be

420
00:17:05,359 --> 00:17:08,160
hashtag hashcat dash a with the attack

421
00:17:08,160 --> 00:17:11,359
mode dash m for the hashtype your hash

422
00:17:11,359 --> 00:17:13,679
file and your word list i like to use

423
00:17:13,679 --> 00:17:16,240
setlist that's just what we do

424
00:17:16,240 --> 00:17:18,480
we're going to do 1400

425
00:17:18,480 --> 00:17:20,240
for sha-256

426
00:17:20,240 --> 00:17:22,000
we're going to crack that password and

427
00:17:22,000 --> 00:17:24,319
we see that that's hello world it

428
00:17:24,319 --> 00:17:26,959
previews right on the screen for you so

429
00:17:26,959 --> 00:17:28,319
you don't have to keep guessing or

430
00:17:28,319 --> 00:17:30,720
locating it all but if you do want to

431
00:17:30,720 --> 00:17:33,120
find it you can also find it in a hidden

432
00:17:33,120 --> 00:17:36,400
directory with dot hashcat in the local

433
00:17:36,400 --> 00:17:37,600
users

434
00:17:37,600 --> 00:17:40,000
directory in the hashgap.podfile this

435
00:17:40,000 --> 00:17:42,320
will show every single hash that you've

436
00:17:42,320 --> 00:17:45,600
attempted to crack in the past

437
00:17:45,600 --> 00:17:47,120
so you can see that hello world right

438
00:17:47,120 --> 00:17:49,360
there

439
00:17:49,600 --> 00:17:51,280
next we're gonna show a combination

440
00:17:51,280 --> 00:17:52,799
attack this is a little bit tricky but

441
00:17:52,799 --> 00:17:54,559
you see i have two word lists here i

442
00:17:54,559 --> 00:17:57,120
have words one and words two with super

443
00:17:57,120 --> 00:17:59,280
world and secret and hello and password

444
00:17:59,280 --> 00:18:01,440
in another

445
00:18:01,440 --> 00:18:03,120
so again this is just a different view

446
00:18:03,120 --> 00:18:03,919
of it

447
00:18:03,919 --> 00:18:06,080
we're just going to show the passwords

448
00:18:06,080 --> 00:18:08,240
files again this is really helpful if

449
00:18:08,240 --> 00:18:09,840
you have a web page and you're not too

450
00:18:09,840 --> 00:18:11,919
sure what the password might be but you

451
00:18:11,919 --> 00:18:14,160
want to combine both of them so we're

452
00:18:14,160 --> 00:18:15,760
just going to print this out to standard

453
00:18:15,760 --> 00:18:16,480
out

454
00:18:16,480 --> 00:18:18,480
words 1 and words 2 just so you can see

455
00:18:18,480 --> 00:18:20,960
how hashcat uses this so you're going to

456
00:18:20,960 --> 00:18:24,400
see both of them be combined

457
00:18:25,520 --> 00:18:26,799
so you can see my password is

458
00:18:26,799 --> 00:18:29,120
potentially in there

459
00:18:29,120 --> 00:18:30,480
so we're going to do

460
00:18:30,480 --> 00:18:32,000
dash a

461
00:18:32,000 --> 00:18:35,120
one for a combination attack this is

462
00:18:35,120 --> 00:18:37,440
going to be your your syntax it's going

463
00:18:37,440 --> 00:18:40,000
to be dash m for your hash type again

464
00:18:40,000 --> 00:18:41,840
and then your word list one and your

465
00:18:41,840 --> 00:18:44,480
word list two so again we're gonna fill

466
00:18:44,480 --> 00:18:48,559
this in for the command again dash a one

467
00:18:48,559 --> 00:18:50,640
dash m and we don't really know but

468
00:18:50,640 --> 00:18:54,240
we've used destiny's hint for hash id

469
00:18:54,240 --> 00:18:57,360
so we know that it's going to be an md5

470
00:18:57,360 --> 00:19:00,640
hash so we send in that combination md5

471
00:19:00,640 --> 00:19:03,280
hash file we're also going to send in

472
00:19:03,280 --> 00:19:05,039
words 1

473
00:19:05,039 --> 00:19:07,440
and then we're going to send in

474
00:19:07,440 --> 00:19:10,840
words 2.

475
00:19:12,080 --> 00:19:15,918
it's going to start to attempt to crack

476
00:19:19,679 --> 00:19:21,360
and then we see

477
00:19:21,360 --> 00:19:23,360
that that is right there my password is

478
00:19:23,360 --> 00:19:25,679
secret password it's not so secret but

479
00:19:25,679 --> 00:19:27,280
we're also going to do the dash dash

480
00:19:27,280 --> 00:19:29,840
show option this will just allow you

481
00:19:29,840 --> 00:19:32,720
again to see that password as the file

482
00:19:32,720 --> 00:19:35,039
was given to you

483
00:19:35,039 --> 00:19:37,440
so just in summary uh it's a lot of

484
00:19:37,440 --> 00:19:39,280
information so if you have questions

485
00:19:39,280 --> 00:19:41,120
please feel free to ask at the end but

486
00:19:41,120 --> 00:19:43,360
as a general rule the syntax for hashtag

487
00:19:43,360 --> 00:19:44,720
is going to be

488
00:19:44,720 --> 00:19:47,679
a with the attack mode number so zero

489
00:19:47,679 --> 00:19:49,280
through i think seven

490
00:19:49,280 --> 00:19:51,440
um and then we're gonna have dash m for

491
00:19:51,440 --> 00:19:53,360
your hash type you can find this on the

492
00:19:53,360 --> 00:19:55,440
help menu for hashcat you're going to

493
00:19:55,440 --> 00:19:57,919
send in your hash file and your word

494
00:19:57,919 --> 00:20:00,240
list again i like to use setlist which

495
00:20:00,240 --> 00:20:02,799
you can download from github it has

496
00:20:02,799 --> 00:20:05,280
plenty of word lists for you to try

497
00:20:05,280 --> 00:20:08,400
stuff that's used for web pages for

498
00:20:08,400 --> 00:20:12,159
specific web pages on the back end

499
00:20:12,159 --> 00:20:13,840
so that's a really good tool for you to

500
00:20:13,840 --> 00:20:16,240
use if you grab something somewhere else

501
00:20:16,240 --> 00:20:18,559
we also showed dash a for the attack

502
00:20:18,559 --> 00:20:20,960
mode we we previewed straight a

503
00:20:20,960 --> 00:20:23,360
combination and more dash m for the hash

504
00:20:23,360 --> 00:20:26,240
type dash capital o to optimize your

505
00:20:26,240 --> 00:20:28,640
kernel this will help speed the process

506
00:20:28,640 --> 00:20:29,600
up

507
00:20:29,600 --> 00:20:31,840
and then dash b for benchmark mode for

508
00:20:31,840 --> 00:20:33,520
giving a specific hash hashtag and

509
00:20:33,520 --> 00:20:36,480
seeing those speeds

510
00:20:37,440 --> 00:20:39,760
okay and now on to the dan vulnerable

511
00:20:39,760 --> 00:20:42,240
web application scenario so welcome to

512
00:20:42,240 --> 00:20:44,720
the damn vulnerable web application um

513
00:20:44,720 --> 00:20:47,679
this is a free and open source project

514
00:20:47,679 --> 00:20:49,360
you can find on github

515
00:20:49,360 --> 00:20:51,360
so um we're using this application to

516
00:20:51,360 --> 00:20:53,679
show you a contextual sql injection

517
00:20:53,679 --> 00:20:57,120
attack today um but like i said this can

518
00:20:57,120 --> 00:20:59,679
be used for other things and this will

519
00:20:59,679 --> 00:21:01,679
provide a legal environment for you to

520
00:21:01,679 --> 00:21:04,559
try new tools or try new attack tactics

521
00:21:04,559 --> 00:21:06,320
um but mostly we want to stress that

522
00:21:06,320 --> 00:21:08,159
this will give you a legal environment

523
00:21:08,159 --> 00:21:09,840
to do these things we don't want you

524
00:21:09,840 --> 00:21:12,880
guys doing any illegal activity

525
00:21:12,880 --> 00:21:14,720
so you can get this in github throw it

526
00:21:14,720 --> 00:21:17,440
on a virtual machine and get to it

527
00:21:17,440 --> 00:21:19,840
so how do we log in to this application

528
00:21:19,840 --> 00:21:22,559
we can try some default credentials so

529
00:21:22,559 --> 00:21:26,400
let's try admin and password

530
00:21:26,400 --> 00:21:28,400
and

531
00:21:28,400 --> 00:21:31,200
that worked so as you see it's admin and

532
00:21:31,200 --> 00:21:33,520
password um so don't use default

533
00:21:33,520 --> 00:21:34,720
credentials because that's what we

534
00:21:34,720 --> 00:21:36,000
guessed first

535
00:21:36,000 --> 00:21:39,200
um then we go down to the security um

536
00:21:39,200 --> 00:21:40,880
settings and we change it from high to

537
00:21:40,880 --> 00:21:42,880
low to make this application vulnerable

538
00:21:42,880 --> 00:21:45,440
to our sql injection attack

539
00:21:45,440 --> 00:21:47,120
you can see a change up there for low

540
00:21:47,120 --> 00:21:48,559
and down at the bottom sometimes it can

541
00:21:48,559 --> 00:21:51,600
get a little bit wacky um so just

542
00:21:51,600 --> 00:21:53,120
check and make sure that it's on the

543
00:21:53,120 --> 00:21:54,799
correct security level that you want to

544
00:21:54,799 --> 00:21:57,280
be on so we're now at the sql injection

545
00:21:57,280 --> 00:21:59,919
page and how do we approach this so we

546
00:21:59,919 --> 00:22:02,640
can first try to see what the user input

547
00:22:02,640 --> 00:22:04,159
will give us back

548
00:22:04,159 --> 00:22:06,320
and we're just trying out one and we see

549
00:22:06,320 --> 00:22:09,600
that returns an id a first name and a

550
00:22:09,600 --> 00:22:11,200
surname

551
00:22:11,200 --> 00:22:15,200
um so we can check on seeing this input

552
00:22:15,200 --> 00:22:18,240
validation and it also is giving it to

553
00:22:18,240 --> 00:22:20,799
the backend application in the url so we

554
00:22:20,799 --> 00:22:23,200
know it's going with the id variable

555
00:22:23,200 --> 00:22:25,280
so we're going to try and see if they're

556
00:22:25,280 --> 00:22:28,480
doing input sanitization on the back end

557
00:22:28,480 --> 00:22:29,440
and

558
00:22:29,440 --> 00:22:31,840
basically that's if they're checking

559
00:22:31,840 --> 00:22:35,200
that we're just putting in valid uh

560
00:22:35,200 --> 00:22:38,159
information that they would expect

561
00:22:38,159 --> 00:22:40,640
but they are not so

562
00:22:40,640 --> 00:22:42,640
basically what we put in is we're

563
00:22:42,640 --> 00:22:44,799
looking for either when the id equals

564
00:22:44,799 --> 00:22:46,960
one three three seven or when zero

565
00:22:46,960 --> 00:22:49,919
equals zero and since zero equals zero

566
00:22:49,919 --> 00:22:52,000
is always true it's returning all the

567
00:22:52,000 --> 00:22:54,400
rows in the database for us

568
00:22:54,400 --> 00:22:56,880
so since we know um

569
00:22:56,880 --> 00:22:59,440
this we're going to actually go into and

570
00:22:59,440 --> 00:23:00,640
explain a little bit about the sql

571
00:23:00,640 --> 00:23:02,640
injection since this is an open source

572
00:23:02,640 --> 00:23:04,480
application we can actually see the sql

573
00:23:04,480 --> 00:23:08,799
query that is running on the dbwa um and

574
00:23:08,799 --> 00:23:11,200
we are looking at this id variable

575
00:23:11,200 --> 00:23:13,200
because that is where our user input is

576
00:23:13,200 --> 00:23:16,000
actually going um the 1337 or zero

577
00:23:16,000 --> 00:23:18,480
equals zero is going to id

578
00:23:18,480 --> 00:23:20,960
so whenever it actually processes it's

579
00:23:20,960 --> 00:23:23,520
going to enter this valid sql query for

580
00:23:23,520 --> 00:23:26,320
us which is what what gets returned

581
00:23:26,320 --> 00:23:27,360
um

582
00:23:27,360 --> 00:23:30,000
which is the query we use for all that

583
00:23:30,000 --> 00:23:33,200
information to get returned

584
00:23:33,600 --> 00:23:35,280
going forward though we're actually

585
00:23:35,280 --> 00:23:38,080
going to try to use some of the mysql

586
00:23:38,080 --> 00:23:40,400
functions um right now we're going to

587
00:23:40,400 --> 00:23:43,039
use the version function and basically

588
00:23:43,039 --> 00:23:46,880
try to see what version of mysql this

589
00:23:46,880 --> 00:23:49,840
application is running

590
00:23:49,840 --> 00:23:52,880
once we hit enter um actually we'll

591
00:23:52,880 --> 00:23:54,559
generate for us and this is running

592
00:23:54,559 --> 00:23:57,120
5.1.41

593
00:23:57,120 --> 00:23:59,600
we're basically just using this as more

594
00:23:59,600 --> 00:24:02,799
enumeration and recon just so we know

595
00:24:02,799 --> 00:24:05,600
what we're actually poking at um

596
00:24:05,600 --> 00:24:08,159
we can use the user function to find out

597
00:24:08,159 --> 00:24:10,080
what user is actually running on this on

598
00:24:10,080 --> 00:24:13,840
the back end of this mysql database

599
00:24:13,840 --> 00:24:15,120
and um

600
00:24:15,120 --> 00:24:17,440
we're doing this as a manual exercise

601
00:24:17,440 --> 00:24:19,679
just to give you context information of

602
00:24:19,679 --> 00:24:22,000
where attackers might be finding these

603
00:24:22,000 --> 00:24:23,760
password hashes

604
00:24:23,760 --> 00:24:26,480
so we're using root at localhost on this

605
00:24:26,480 --> 00:24:28,480
mysql database

606
00:24:28,480 --> 00:24:31,200
so this is um kind of more

607
00:24:31,200 --> 00:24:32,559
important and we're going to find some

608
00:24:32,559 --> 00:24:34,240
more information about this bicycle

609
00:24:34,240 --> 00:24:35,600
database with the information

610
00:24:35,600 --> 00:24:37,440
schema.tables

611
00:24:37,440 --> 00:24:39,039
and

612
00:24:39,039 --> 00:24:41,919
these sql queries were carefully crafted

613
00:24:41,919 --> 00:24:43,039
um

614
00:24:43,039 --> 00:24:44,720
you probably would go through a bunch of

615
00:24:44,720 --> 00:24:46,320
trial and error while you're running

616
00:24:46,320 --> 00:24:48,640
them but there are also um security

617
00:24:48,640 --> 00:24:51,360
tools like sql map that will automate

618
00:24:51,360 --> 00:24:53,600
this process but this is returning all

619
00:24:53,600 --> 00:24:56,240
the tables in the database

620
00:24:56,240 --> 00:24:59,279
using that information schema.tables

621
00:24:59,279 --> 00:25:01,760
query and we're interested in password

622
00:25:01,760 --> 00:25:03,039
hashes so

623
00:25:03,039 --> 00:25:06,000
we're going to look for a users table

624
00:25:06,000 --> 00:25:08,720
and there is a users table so since we

625
00:25:08,720 --> 00:25:10,480
know there's a user table we can use

626
00:25:10,480 --> 00:25:14,159
this information for our next sql query

627
00:25:14,159 --> 00:25:16,080
so we're going to enter in

628
00:25:16,080 --> 00:25:18,080
one three three seven and zero equals

629
00:25:18,080 --> 00:25:21,840
zero you can select null concat 0x0a

630
00:25:21,840 --> 00:25:24,000
which is the hexagon decimal um newline

631
00:25:24,000 --> 00:25:26,400
character just to format our information

632
00:25:26,400 --> 00:25:27,919
a little bit better and then we're going

633
00:25:27,919 --> 00:25:29,840
to use the table name and column name so

634
00:25:29,840 --> 00:25:32,080
basically what this is doing is grabbing

635
00:25:32,080 --> 00:25:35,520
all the column names from the users the

636
00:25:35,520 --> 00:25:38,320
table users

637
00:25:39,679 --> 00:25:40,960
which is important because then we'll

638
00:25:40,960 --> 00:25:43,279
know what information is stored on that

639
00:25:43,279 --> 00:25:46,559
mysql database table

640
00:25:50,400 --> 00:25:53,840
so our column names are user id first

641
00:25:53,840 --> 00:25:54,799
name

642
00:25:54,799 --> 00:25:56,480
last name

643
00:25:56,480 --> 00:25:57,919
user

644
00:25:57,919 --> 00:25:59,600
and password

645
00:25:59,600 --> 00:26:00,640
and

646
00:26:00,640 --> 00:26:02,559
realistically we're really interested in

647
00:26:02,559 --> 00:26:05,360
those user m password columns so our

648
00:26:05,360 --> 00:26:08,880
next sql query will be calling for the

649
00:26:08,880 --> 00:26:12,240
user and password columns

650
00:26:12,480 --> 00:26:14,880
and um

651
00:26:14,880 --> 00:26:17,360
basically if everything goes as planned

652
00:26:17,360 --> 00:26:20,960
we should have a nice list of usernames

653
00:26:20,960 --> 00:26:24,919
and password hashes

654
00:26:34,320 --> 00:26:36,000
that hash at the end is just a comment

655
00:26:36,000 --> 00:26:37,919
um character for sql which makes it

656
00:26:37,919 --> 00:26:40,320
ignore everything else after our query

657
00:26:40,320 --> 00:26:42,480
so the username is admin and there's the

658
00:26:42,480 --> 00:26:44,559
password hash um

659
00:26:44,559 --> 00:26:46,000
since there's only five of them we would

660
00:26:46,000 --> 00:26:48,400
just copy and paste that um you might

661
00:26:48,400 --> 00:26:50,880
write a script if there's a lot more um

662
00:26:50,880 --> 00:26:53,440
because copy and pasting can get tedious

663
00:26:53,440 --> 00:26:57,120
uh but conveniently we already have all

664
00:26:57,120 --> 00:26:58,960
the passwords these name and password

665
00:26:58,960 --> 00:27:00,960
hashes in a file

666
00:27:00,960 --> 00:27:03,520
in the username coolin password hash

667
00:27:03,520 --> 00:27:05,600
format because that is what john the

668
00:27:05,600 --> 00:27:08,159
ripper likes

669
00:27:08,159 --> 00:27:11,520
so our next step is we are going to use

670
00:27:11,520 --> 00:27:13,120
john and try to crack these password

671
00:27:13,120 --> 00:27:14,400
hashes

672
00:27:14,400 --> 00:27:16,720
and we've already seen um 32 character

673
00:27:16,720 --> 00:27:19,120
hashes and they kind of

674
00:27:19,120 --> 00:27:22,159
look like md5 so we kind of have an

675
00:27:22,159 --> 00:27:24,799
inkling that these might be md5 hashes

676
00:27:24,799 --> 00:27:27,279
first we gotta change into our directory

677
00:27:27,279 --> 00:27:30,799
and now we can start um looking for mp5

678
00:27:30,799 --> 00:27:32,399
but if you don't remember the format

679
00:27:32,399 --> 00:27:34,320
because why wouldn't you why would you

680
00:27:34,320 --> 00:27:36,080
like you can just grab it

681
00:27:36,080 --> 00:27:38,320
um it's just a nice little

682
00:27:38,320 --> 00:27:42,080
cheap sheet way of trying to find um

683
00:27:42,080 --> 00:27:44,799
the formatting

684
00:27:45,200 --> 00:27:46,640
so we're going to be using raw attack

685
00:27:46,640 --> 00:27:49,200
md5

686
00:27:49,200 --> 00:27:51,360
and basically our format's going to be

687
00:27:51,360 --> 00:27:53,360
brought back to nv5 we're going to use

688
00:27:53,360 --> 00:27:55,520
the rocky word list so we're going to do

689
00:27:55,520 --> 00:27:57,760
tact word list user share

690
00:27:57,760 --> 00:28:00,240
wordlessrockyou.txt

691
00:28:00,240 --> 00:28:01,600
and then we're going to run it on our

692
00:28:01,600 --> 00:28:06,678
password hash file dbwa hashes.txt

693
00:28:06,720 --> 00:28:08,320
and this is going to run in like zero

694
00:28:08,320 --> 00:28:10,399
seconds so

695
00:28:10,399 --> 00:28:14,279
we will see what happens

696
00:28:22,000 --> 00:28:25,200
okay and like i said it took no time at

697
00:28:25,200 --> 00:28:27,039
all to crack these passwords

698
00:28:27,039 --> 00:28:30,000
so there's five password hashes but why

699
00:28:30,000 --> 00:28:31,440
there's only four

700
00:28:31,440 --> 00:28:32,960
and that's actually because smithy and

701
00:28:32,960 --> 00:28:36,000
admin are using the same password and um

702
00:28:36,000 --> 00:28:37,520
you can see their password hashes are

703
00:28:37,520 --> 00:28:39,840
identical so if you want to see every

704
00:28:39,840 --> 00:28:42,640
cracked password we can use the tag show

705
00:28:42,640 --> 00:28:46,159
command and show that

706
00:28:46,559 --> 00:28:48,960
and there are our five cracked password

707
00:28:48,960 --> 00:28:51,120
hashes

708
00:28:51,120 --> 00:28:53,600
and as you see smithy and admin both use

709
00:28:53,600 --> 00:28:55,200
the password password

710
00:28:55,200 --> 00:28:56,880
which is terrible

711
00:28:56,880 --> 00:28:59,600
don't use that

712
00:28:59,600 --> 00:29:01,039
so now we're going to try it with hash

713
00:29:01,039 --> 00:29:02,960
cap so we can do the same thing um and

714
00:29:02,960 --> 00:29:06,000
grab for md5 if you haven't used hash

715
00:29:06,000 --> 00:29:07,919
cap before if you do the tac h it's

716
00:29:07,919 --> 00:29:09,760
great but it's like 30 pages of

717
00:29:09,760 --> 00:29:11,679
information and it's really hard to

718
00:29:11,679 --> 00:29:13,200
scroll through so this is just kind of a

719
00:29:13,200 --> 00:29:16,720
way to cut down on that a little bit

720
00:29:17,679 --> 00:29:21,440
so we saw that md5 is tac m0 so we're

721
00:29:21,440 --> 00:29:23,120
going to um

722
00:29:23,120 --> 00:29:26,399
write out hash cat pack m0 for md5 we

723
00:29:26,399 --> 00:29:28,240
need to use the tactec username command

724
00:29:28,240 --> 00:29:30,320
since our password hash file has user

725
00:29:30,320 --> 00:29:31,919
mate names within it

726
00:29:31,919 --> 00:29:33,039
um

727
00:29:33,039 --> 00:29:34,960
and then we're going to pass in our

728
00:29:34,960 --> 00:29:37,640
password hash file itself dbwa

729
00:29:37,640 --> 00:29:39,200
hashes.txt

730
00:29:39,200 --> 00:29:41,039
and then the

731
00:29:41,039 --> 00:29:43,919
file path to our word list

732
00:29:43,919 --> 00:29:46,480
and this runs in no time at all as well

733
00:29:46,480 --> 00:29:48,399
and as you see here that hashcat also

734
00:29:48,399 --> 00:29:50,240
doesn't print out um duplicate password

735
00:29:50,240 --> 00:29:52,960
hashes so if we want to

736
00:29:52,960 --> 00:29:54,799
see all five password hashes we have to

737
00:29:54,799 --> 00:29:57,918
do that tack tag show

738
00:29:58,399 --> 00:29:59,520
and they do a little bit form a

739
00:29:59,520 --> 00:30:01,360
different format it's username password

740
00:30:01,360 --> 00:30:02,720
hash and then

741
00:30:02,720 --> 00:30:06,799
you still get their cracked password

742
00:30:07,600 --> 00:30:09,760
but like i said this um the sql

743
00:30:09,760 --> 00:30:12,159
injection part of this was just for

744
00:30:12,159 --> 00:30:13,840
context um

745
00:30:13,840 --> 00:30:15,120
like if you're interested in more sql

746
00:30:15,120 --> 00:30:16,399
injection try this stuff out for

747
00:30:16,399 --> 00:30:20,159
yourself on dbwa but we logged into the

748
00:30:20,159 --> 00:30:22,559
application with default credentials

749
00:30:22,559 --> 00:30:24,159
they were admin and password we

750
00:30:24,159 --> 00:30:27,679
performed a manual sql injection on dbwa

751
00:30:27,679 --> 00:30:29,360
you can try a bunch of different tactics

752
00:30:29,360 --> 00:30:31,600
on that if you are interested

753
00:30:31,600 --> 00:30:33,279
we cracked the password hashes collected

754
00:30:33,279 --> 00:30:35,039
from the vulnerable mysql database and

755
00:30:35,039 --> 00:30:37,120
then we ran them with john the ripper

756
00:30:37,120 --> 00:30:41,600
and hashcat using those two commands

757
00:30:42,640 --> 00:30:43,840
and

758
00:30:43,840 --> 00:30:46,880
this is actually for just leah

759
00:30:46,880 --> 00:30:49,520
no worries so i wanted to present

760
00:30:49,520 --> 00:30:52,240
something that would make sense in a

761
00:30:52,240 --> 00:30:54,320
real world scenario so these are things

762
00:30:54,320 --> 00:30:56,960
that you might happen to come upon uh as

763
00:30:56,960 --> 00:30:59,440
a penetration tester as a hacker in the

764
00:30:59,440 --> 00:31:02,240
real world so these are attack paths to

765
00:31:02,240 --> 00:31:05,760
get you to hashes so for example we want

766
00:31:05,760 --> 00:31:08,240
to get a sha-1 hash

767
00:31:08,240 --> 00:31:10,399
and this is our end goal so the

768
00:31:10,399 --> 00:31:12,480
potential attack path could be that we

769
00:31:12,480 --> 00:31:14,720
run some reconnaissance we see that

770
00:31:14,720 --> 00:31:17,600
there's ports and services running on

771
00:31:17,600 --> 00:31:21,840
135 80 500 and 49 154 those were kind of

772
00:31:21,840 --> 00:31:24,799
obscure so not too much information

773
00:31:24,799 --> 00:31:26,720
could be gathered but we visit the url

774
00:31:26,720 --> 00:31:29,840
running on 8500

775
00:31:29,840 --> 00:31:31,760
and we see that there we can enumerate

776
00:31:31,760 --> 00:31:33,279
through these directories with no

777
00:31:33,279 --> 00:31:35,919
restricted access this is our favorite

778
00:31:35,919 --> 00:31:38,080
thing because we like to break into

779
00:31:38,080 --> 00:31:39,279
things and

780
00:31:39,279 --> 00:31:40,880
if we don't have to break anything this

781
00:31:40,880 --> 00:31:42,559
is most helpful

782
00:31:42,559 --> 00:31:44,559
but we see that it takes us to an

783
00:31:44,559 --> 00:31:47,200
administrative panel on a cms

784
00:31:47,200 --> 00:31:49,919
so we can see that the cms has a known

785
00:31:49,919 --> 00:31:52,000
vulnerability that can traverse these

786
00:31:52,000 --> 00:31:54,480
directories in the admin panel to give

787
00:31:54,480 --> 00:31:57,760
us a password properties file so once we

788
00:31:57,760 --> 00:32:00,320
do this we can preview all of the

789
00:32:00,320 --> 00:32:03,039
passwords to the machine for me an

790
00:32:03,039 --> 00:32:05,760
attacker so it looks like these are hash

791
00:32:05,760 --> 00:32:07,519
i'm not too sure what to do with these

792
00:32:07,519 --> 00:32:10,960
but marissa's going to show you

793
00:32:12,240 --> 00:32:15,360
all right so tesla conveniently got us

794
00:32:15,360 --> 00:32:17,840
these password hashes and there's quite

795
00:32:17,840 --> 00:32:20,720
a few of them there's actually exactly 1

796
00:32:20,720 --> 00:32:21,679
000

797
00:32:21,679 --> 00:32:22,559
um

798
00:32:22,559 --> 00:32:24,480
we are going to we don't know what

799
00:32:24,480 --> 00:32:25,840
hashes these are so we're actually going

800
00:32:25,840 --> 00:32:27,360
to use hash id

801
00:32:27,360 --> 00:32:29,360
um kind of like what destiny did in the

802
00:32:29,360 --> 00:32:30,720
beginning

803
00:32:30,720 --> 00:32:33,440
with hash id you can also pass in a file

804
00:32:33,440 --> 00:32:35,760
and um then you can also use tag j to

805
00:32:35,760 --> 00:32:38,320
give the format for john the ripper so

806
00:32:38,320 --> 00:32:40,320
basically hash id will attempt to

807
00:32:40,320 --> 00:32:42,240
identify every hash we're not going to

808
00:32:42,240 --> 00:32:44,559
scroll through all 1000 of these but you

809
00:32:44,559 --> 00:32:46,320
can kind of see that

810
00:32:46,320 --> 00:32:49,360
there are quite a few hashes in here and

811
00:32:49,360 --> 00:32:50,799
it's saying that might be john the

812
00:32:50,799 --> 00:32:53,360
ripper um shaw one so we're going to use

813
00:32:53,360 --> 00:32:56,720
raw attack sha1 and run

814
00:32:56,720 --> 00:32:57,519
that

815
00:32:57,519 --> 00:33:00,320
on john the ripper on this

816
00:33:00,320 --> 00:33:02,399
password hash file

817
00:33:02,399 --> 00:33:04,480
so that's gonna be tact format equals

818
00:33:04,480 --> 00:33:06,559
raw attack shot one and then we're going

819
00:33:06,559 --> 00:33:09,279
to use our rocky word list

820
00:33:09,279 --> 00:33:11,120
and that's going to be at user share

821
00:33:11,120 --> 00:33:13,760
word list roku.txt

822
00:33:13,760 --> 00:33:16,240
and then we pass in our password hash

823
00:33:16,240 --> 00:33:18,559
file

824
00:33:19,200 --> 00:33:21,440
and it chewed through those 1000s like

825
00:33:21,440 --> 00:33:23,039
it would password hashes like it was

826
00:33:23,039 --> 00:33:25,760
nothing um this was actually

827
00:33:25,760 --> 00:33:28,399
the top most common one um 1000

828
00:33:28,399 --> 00:33:30,559
passwords we got

829
00:33:30,559 --> 00:33:33,039
excuse me we grabbed that off github

830
00:33:33,039 --> 00:33:34,880
and um

831
00:33:34,880 --> 00:33:36,240
there are some colorful language in

832
00:33:36,240 --> 00:33:38,399
there so we apologize but

833
00:33:38,399 --> 00:33:39,679
um

834
00:33:39,679 --> 00:33:41,279
blame people and their vulnerable

835
00:33:41,279 --> 00:33:42,559
passwords

836
00:33:42,559 --> 00:33:44,320
uh so we're gonna try this with hashcat

837
00:33:44,320 --> 00:33:46,240
now

838
00:33:46,240 --> 00:33:49,120
so we all know what the

839
00:33:49,120 --> 00:33:51,039
mode for hashcat is either so we're

840
00:33:51,039 --> 00:33:52,640
going to use hash id again

841
00:33:52,640 --> 00:33:54,799
and then pack m

842
00:33:54,799 --> 00:33:56,960
so it's saying we know they're sha 1 so

843
00:33:56,960 --> 00:33:58,799
we're going to look at the hash cat mode

844
00:33:58,799 --> 00:34:01,679
100

845
00:34:02,559 --> 00:34:03,600
and

846
00:34:03,600 --> 00:34:05,120
that is what we're going to use in our

847
00:34:05,120 --> 00:34:07,279
next hashtag command

848
00:34:07,279 --> 00:34:10,399
so it's going to be hashcat pack m

849
00:34:10,399 --> 00:34:12,480
and then we're going to put in our

850
00:34:12,480 --> 00:34:14,239
packm100 excuse me then we're going to

851
00:34:14,239 --> 00:34:15,918
put in our password hash file and then

852
00:34:15,918 --> 00:34:19,319
our word list

853
00:34:22,560 --> 00:34:24,879
this one takes like .2 milliseconds

854
00:34:24,879 --> 00:34:26,560
longer but

855
00:34:26,560 --> 00:34:28,480
it still was pretty quick

856
00:34:28,480 --> 00:34:28,920
um

857
00:34:28,920 --> 00:34:30,079
[Music]

858
00:34:30,079 --> 00:34:32,079
and if we want to see

859
00:34:32,079 --> 00:34:34,079
all the passwords cracked again we can

860
00:34:34,079 --> 00:34:37,440
use that tack tag show

861
00:34:39,359 --> 00:34:41,119
so hashtag actually doesn't give you

862
00:34:41,119 --> 00:34:43,119
like the number of hashes that were

863
00:34:43,119 --> 00:34:45,040
cracked so we're just going to pipe that

864
00:34:45,040 --> 00:34:45,918
into

865
00:34:45,918 --> 00:34:49,359
um a word count and get the number and

866
00:34:49,359 --> 00:34:52,079
it was 987 which is expected because we

867
00:34:52,079 --> 00:34:54,320
use the same word list and um password

868
00:34:54,320 --> 00:34:57,920
hash file as we did on john the ripper

869
00:34:57,920 --> 00:34:59,920
but basically in this scenario we

870
00:34:59,920 --> 00:35:01,680
collected the password hashes from a

871
00:35:01,680 --> 00:35:04,400
vulnerable content management services

872
00:35:04,400 --> 00:35:08,720
um we used hash id to identify the sha

873
00:35:08,720 --> 00:35:10,160
one hash

874
00:35:10,160 --> 00:35:12,000
and then we cracked the sha-1 password

875
00:35:12,000 --> 00:35:14,800
hashes with john the ripper and hashcat

876
00:35:14,800 --> 00:35:17,520
using the rocky word list and

877
00:35:17,520 --> 00:35:18,800
the

878
00:35:18,800 --> 00:35:21,520
rawtaksha 1 format and the

879
00:35:21,520 --> 00:35:25,040
mode 100 for hashcat

880
00:35:26,560 --> 00:35:28,960
so i'm also wanting to show a windows

881
00:35:28,960 --> 00:35:31,680
exploitation path because windows is

882
00:35:31,680 --> 00:35:34,640
notorious for being the worst

883
00:35:34,640 --> 00:35:35,839
um

884
00:35:35,839 --> 00:35:36,560
so

885
00:35:36,560 --> 00:35:38,240
we're gonna run reconnaissance we've

886
00:35:38,240 --> 00:35:40,320
gotten a machine

887
00:35:40,320 --> 00:35:42,880
that we think is running windows so we

888
00:35:42,880 --> 00:35:47,680
we run this nmap scan we see 53.88 135

889
00:35:47,680 --> 00:35:52,400
139 389 445 these are notorious for

890
00:35:52,400 --> 00:35:55,200
windows services and they're things like

891
00:35:55,200 --> 00:35:58,720
the domain kerberos ldap

892
00:35:58,720 --> 00:36:01,359
and all of that so we can specifically

893
00:36:01,359 --> 00:36:02,800
identify that this machine is going to

894
00:36:02,800 --> 00:36:04,400
be a windows machine

895
00:36:04,400 --> 00:36:07,760
we see that since smb is open we can go

896
00:36:07,760 --> 00:36:09,920
and check out the shares we have

897
00:36:09,920 --> 00:36:12,480
anonymous login access which again is

898
00:36:12,480 --> 00:36:14,560
perfect for us because i like easy

899
00:36:14,560 --> 00:36:17,359
access i don't like to work too hard

900
00:36:17,359 --> 00:36:20,000
and so i'm going to go in and check

901
00:36:20,000 --> 00:36:22,640
through all of these directories or the

902
00:36:22,640 --> 00:36:24,800
shares and so we're going to enumerate

903
00:36:24,800 --> 00:36:27,280
them with a num for linux this is also a

904
00:36:27,280 --> 00:36:29,680
tool that's found on cali

905
00:36:29,680 --> 00:36:32,320
please explore it if you need to

906
00:36:32,320 --> 00:36:34,960
but we've gained access to what i would

907
00:36:34,960 --> 00:36:37,760
like to say is a domain controller which

908
00:36:37,760 --> 00:36:41,359
is the highest privilege or the highest

909
00:36:41,359 --> 00:36:43,280
crown jewel that you want to get in a

910
00:36:43,280 --> 00:36:45,440
windows network so we're going to try to

911
00:36:45,440 --> 00:36:47,599
find this juicy information we're going

912
00:36:47,599 --> 00:36:50,000
to use a python script called get mp

913
00:36:50,000 --> 00:36:52,960
users it's a script that harvests all of

914
00:36:52,960 --> 00:36:53,720
the

915
00:36:53,720 --> 00:36:55,920
non-pre-authenticated as rep

916
00:36:55,920 --> 00:36:58,240
responses from users in a specific

917
00:36:58,240 --> 00:36:59,200
domain

918
00:36:59,200 --> 00:37:01,359
so this is a form of like kerberos

919
00:37:01,359 --> 00:37:03,359
seeing if you're familiar

920
00:37:03,359 --> 00:37:05,599
but again it's non-authentic

921
00:37:05,599 --> 00:37:07,520
non-pre-authenticated

922
00:37:07,520 --> 00:37:09,839
so this output is going to be given to

923
00:37:09,839 --> 00:37:12,480
us for a service account and from here

924
00:37:12,480 --> 00:37:16,079
i'm going to crack this password for you

925
00:37:16,400 --> 00:37:19,040
so here on my screen you see this hash

926
00:37:19,040 --> 00:37:22,640
it's kerberos 5 as rep it's a super long

927
00:37:22,640 --> 00:37:26,720
hash um but we can deal with it not too

928
00:37:26,720 --> 00:37:27,599
bad

929
00:37:27,599 --> 00:37:29,680
and on the left hand of my screen you

930
00:37:29,680 --> 00:37:32,160
see hashcat you see on the right hand

931
00:37:32,160 --> 00:37:33,920
side john

932
00:37:33,920 --> 00:37:36,000
so we're gonna show them side by side to

933
00:37:36,000 --> 00:37:38,320
see the differences for one particular

934
00:37:38,320 --> 00:37:41,440
hash we're going to use dash m 18 200

935
00:37:41,440 --> 00:37:44,560
for kerberos as rep hash we're going to

936
00:37:44,560 --> 00:37:47,040
use dash dash format

937
00:37:47,040 --> 00:37:48,960
curve 5 as rep we're going to send in

938
00:37:48,960 --> 00:37:51,760
that file which is called curb5

939
00:37:51,760 --> 00:37:53,599
i like again to use setlist so i'm going

940
00:37:53,599 --> 00:37:55,359
to send it rock you you can send

941
00:37:55,359 --> 00:37:57,200
whatever password uh

942
00:37:57,200 --> 00:37:59,200
word list you want i'm going to start

943
00:37:59,200 --> 00:38:01,680
hashcat then i'm going to start john and

944
00:38:01,680 --> 00:38:04,480
quite surely you're going to see this

945
00:38:04,480 --> 00:38:07,040
password being cracked

946
00:38:07,040 --> 00:38:09,599
nearly immediately you see here the hash

947
00:38:09,599 --> 00:38:11,839
cat since it started first already

948
00:38:11,839 --> 00:38:12,880
cracked

949
00:38:12,880 --> 00:38:15,119
john just finished but you see this

950
00:38:15,119 --> 00:38:19,680
password is s3 rv ice while it does have

951
00:38:19,680 --> 00:38:21,760
a number in it still not as secure as

952
00:38:21,760 --> 00:38:23,680
you want but i'm going to show it to the

953
00:38:23,680 --> 00:38:25,599
screen so that you can see it using the

954
00:38:25,599 --> 00:38:28,320
dash dash show sending in again that

955
00:38:28,320 --> 00:38:30,839
mode for hashgat and the file that we

956
00:38:30,839 --> 00:38:33,200
used so you can see that right to this

957
00:38:33,200 --> 00:38:35,520
screen

958
00:38:35,839 --> 00:38:36,640
so

959
00:38:36,640 --> 00:38:41,040
hashcat will show it as the full hash

960
00:38:41,599 --> 00:38:43,760
and then john will show it as the user

961
00:38:43,760 --> 00:38:47,839
with the domain and the password

962
00:38:54,160 --> 00:38:56,640
so again just in summary this is a lot

963
00:38:56,640 --> 00:38:58,400
of information if you're not too

964
00:38:58,400 --> 00:38:59,920
technical or you're not too familiar

965
00:38:59,920 --> 00:39:01,599
with how windows processes work or

966
00:39:01,599 --> 00:39:04,320
windows services work not to worry but

967
00:39:04,320 --> 00:39:06,400
we did enumerate a domain controller for

968
00:39:06,400 --> 00:39:08,720
information on the users within that

969
00:39:08,720 --> 00:39:12,480
specific domain we grabbed one azrup

970
00:39:12,480 --> 00:39:14,760
hash from a python script called get

971
00:39:14,760 --> 00:39:17,920
npusers.pi this can be found on github

972
00:39:17,920 --> 00:39:21,280
um but you ran both john and hashgat to

973
00:39:21,280 --> 00:39:24,320
return the password for a ticket

974
00:39:24,320 --> 00:39:26,720
granting service for kerberos on the

975
00:39:26,720 --> 00:39:28,240
domain controller with the cracked

976
00:39:28,240 --> 00:39:29,920
password of s

977
00:39:29,920 --> 00:39:33,520
3 r v i c e again the syntax for the

978
00:39:33,520 --> 00:39:36,240
commands are right below so

979
00:39:36,240 --> 00:39:38,560
if you need any hints on how to use this

980
00:39:38,560 --> 00:39:41,280
or use this in your own version of labs

981
00:39:41,280 --> 00:39:43,839
you can

982
00:39:44,400 --> 00:39:47,040
so we've been focusing a lot on john the

983
00:39:47,040 --> 00:39:49,040
ripper and hashcat but it's important to

984
00:39:49,040 --> 00:39:50,400
mention that there are additional

985
00:39:50,400 --> 00:39:52,480
password crackers out there there are

986
00:39:52,480 --> 00:39:54,400
pastor crackers that use rainbow tables

987
00:39:54,400 --> 00:39:55,839
which are

988
00:39:55,839 --> 00:39:57,680
pre-cracked passwords so if you have

989
00:39:57,680 --> 00:39:59,760
your hash and these rainbow tables

990
00:39:59,760 --> 00:40:02,079
contain that hash you can just

991
00:40:02,079 --> 00:40:04,480
compare the hash to the rainbow table

992
00:40:04,480 --> 00:40:06,400
and get the password and there's crack

993
00:40:06,400 --> 00:40:08,400
station which is a web-based one and

994
00:40:08,400 --> 00:40:10,160
then rainbow crack and oomph crack you

995
00:40:10,160 --> 00:40:13,280
can put on most operating systems

996
00:40:13,280 --> 00:40:15,839
there's windows specific um password

997
00:40:15,839 --> 00:40:18,720
manage password crackers and that is

998
00:40:18,720 --> 00:40:21,040
canon able and brutus so if you're

999
00:40:21,040 --> 00:40:22,960
operating primarily off a windows

1000
00:40:22,960 --> 00:40:25,599
machine kane enable is known to being a

1001
00:40:25,599 --> 00:40:28,079
very robust password cracker there's

1002
00:40:28,079 --> 00:40:28,960
also

1003
00:40:28,960 --> 00:40:33,040
wi-fi password crackers and aircrac

1004
00:40:33,040 --> 00:40:34,800
ng can crack

1005
00:40:34,800 --> 00:40:36,960
vulnerable wi-fi protocols

1006
00:40:36,960 --> 00:40:39,599
and also there's hydra and medusa which

1007
00:40:39,599 --> 00:40:41,599
were built for primarily for brute

1008
00:40:41,599 --> 00:40:44,079
forcing so if you're looking for

1009
00:40:44,079 --> 00:40:46,079
good password crackers to brute force

1010
00:40:46,079 --> 00:40:47,920
some passwords they might be what you

1011
00:40:47,920 --> 00:40:50,480
want to use

1012
00:40:50,880 --> 00:40:52,800
all right so now that we know how fast

1013
00:40:52,800 --> 00:40:55,440
it is to crack passwords now let's

1014
00:40:55,440 --> 00:40:58,000
protect ourselves with these password

1015
00:40:58,000 --> 00:40:59,680
best practices

1016
00:40:59,680 --> 00:41:02,640
so research shows that past phrases are

1017
00:41:02,640 --> 00:41:04,720
a lot better than short and complex

1018
00:41:04,720 --> 00:41:07,520
passwords for two reasons they're hard

1019
00:41:07,520 --> 00:41:10,640
to crack and it's actually a lot easier

1020
00:41:10,640 --> 00:41:12,720
for us to remember an example of a

1021
00:41:12,720 --> 00:41:15,760
passphrase is something like i eat kale

1022
00:41:15,760 --> 00:41:18,560
ice cream potatoes strange combination i

1023
00:41:18,560 --> 00:41:21,760
know but it works we can remember it

1024
00:41:21,760 --> 00:41:22,800
again

1025
00:41:22,800 --> 00:41:26,079
do note however that you must insert

1026
00:41:26,079 --> 00:41:28,480
different characters such as numbers

1027
00:41:28,480 --> 00:41:31,040
special characters and mess with casing

1028
00:41:31,040 --> 00:41:32,800
to increase the strength of your

1029
00:41:32,800 --> 00:41:35,359
password but since passphrases are so

1030
00:41:35,359 --> 00:41:37,920
easy for us to remember it allows us to

1031
00:41:37,920 --> 00:41:40,560
have longer passwords because length

1032
00:41:40,560 --> 00:41:42,800
matters the longer our password is the

1033
00:41:42,800 --> 00:41:45,760
longer it takes for it to crack if

1034
00:41:45,760 --> 00:41:48,160
you're still unsure about the length the

1035
00:41:48,160 --> 00:41:50,319
strength of your password sorry you can

1036
00:41:50,319 --> 00:41:53,760
hop up over to how securesmypassword.net

1037
00:41:53,760 --> 00:41:55,599
as an example of a password strength

1038
00:41:55,599 --> 00:41:57,839
meter where you input your password and

1039
00:41:57,839 --> 00:41:59,520
outputs a prediction of how long it will

1040
00:41:59,520 --> 00:42:00,880
take to crack

1041
00:42:00,880 --> 00:42:03,520
now our last point here is do not reuse

1042
00:42:03,520 --> 00:42:05,359
passwords we could not have stressed

1043
00:42:05,359 --> 00:42:07,280
this enough at the very beginning of the

1044
00:42:07,280 --> 00:42:09,599
presentation it's essential that you

1045
00:42:09,599 --> 00:42:12,160
don't do this an example of this is that

1046
00:42:12,160 --> 00:42:15,040
for example i have two accounts my

1047
00:42:15,040 --> 00:42:16,880
spotify and my bank account which

1048
00:42:16,880 --> 00:42:19,040
happens to use the same email address

1049
00:42:19,040 --> 00:42:21,280
and i happen to have reused my password

1050
00:42:21,280 --> 00:42:24,160
for both as well a bad actor is able to

1051
00:42:24,160 --> 00:42:26,480
hack into my spotify account but now

1052
00:42:26,480 --> 00:42:28,720
also have the credentials to log into my

1053
00:42:28,720 --> 00:42:30,560
bank account things are not looking good

1054
00:42:30,560 --> 00:42:32,880
for me at all another example of

1055
00:42:32,880 --> 00:42:35,040
password reuse is actually default

1056
00:42:35,040 --> 00:42:37,520
credentials i get a router and it comes

1057
00:42:37,520 --> 00:42:39,920
with a seemingly complex password but

1058
00:42:39,920 --> 00:42:42,400
actually it's easily searchable online

1059
00:42:42,400 --> 00:42:44,319
and keeping it results to a high

1060
00:42:44,319 --> 00:42:47,119
probability of me getting cracked now i

1061
00:42:47,119 --> 00:42:49,119
know we've talked so much information

1062
00:42:49,119 --> 00:42:52,240
about passwords and these practices may

1063
00:42:52,240 --> 00:42:54,079
seem a little bit daunting but we

1064
00:42:54,079 --> 00:42:58,760
actually do have a solution for you

1065
00:43:00,640 --> 00:43:03,040
so with that the introduction of

1066
00:43:03,040 --> 00:43:04,319
password managers i know in the

1067
00:43:04,319 --> 00:43:06,240
beginning of the the talk someone had

1068
00:43:06,240 --> 00:43:08,960
mentioned lockwise so this is a built-in

1069
00:43:08,960 --> 00:43:10,880
one in firefox but we also want to

1070
00:43:10,880 --> 00:43:13,680
introduce password managers that allow

1071
00:43:13,680 --> 00:43:15,280
you to create strong and unique

1072
00:43:15,280 --> 00:43:17,760
passwords for every single website and

1073
00:43:17,760 --> 00:43:19,680
then you can auto generate secure

1074
00:43:19,680 --> 00:43:21,119
passwords they can autofill your

1075
00:43:21,119 --> 00:43:23,440
credentials like your emails like your

1076
00:43:23,440 --> 00:43:25,040
addresses your phone number so you don't

1077
00:43:25,040 --> 00:43:26,240
have to do that every single time and

1078
00:43:26,240 --> 00:43:29,520
waste time again i'm pretty lazy so

1079
00:43:29,520 --> 00:43:31,680
helps me um and also can prevent

1080
00:43:31,680 --> 00:43:33,280
password spraying so like destiny

1081
00:43:33,280 --> 00:43:37,040
mentioned i would like to grab a breach

1082
00:43:37,040 --> 00:43:39,119
from github or anything from the source

1083
00:43:39,119 --> 00:43:40,480
of darknet

1084
00:43:40,480 --> 00:43:42,960
dark web and i just spray all of those

1085
00:43:42,960 --> 00:43:45,440
passwords for every single email address

1086
00:43:45,440 --> 00:43:48,160
that i can find so that would really

1087
00:43:48,160 --> 00:43:51,599
help having a password manager

1088
00:43:51,599 --> 00:43:53,200
so this is just an example of what you

1089
00:43:53,200 --> 00:43:54,800
can see from password manager if you've

1090
00:43:54,800 --> 00:43:57,440
never actually used one you can generate

1091
00:43:57,440 --> 00:43:59,520
the password you can make it random you

1092
00:43:59,520 --> 00:44:01,839
can make it zero to

1093
00:44:01,839 --> 00:44:04,720
probably 36 or so characters i've chosen

1094
00:44:04,720 --> 00:44:07,359
one that's 24 characters using symbols

1095
00:44:07,359 --> 00:44:09,520
and numbers and then from there you can

1096
00:44:09,520 --> 00:44:10,880
see that it will autofill those

1097
00:44:10,880 --> 00:44:12,640
passwords for you whenever you visit the

1098
00:44:12,640 --> 00:44:14,800
web page

1099
00:44:14,800 --> 00:44:16,480
there's also addition additional

1100
00:44:16,480 --> 00:44:18,480
password manager features

1101
00:44:18,480 --> 00:44:20,240
most are cross-platform so you can

1102
00:44:20,240 --> 00:44:21,680
basically use them on your mobile

1103
00:44:21,680 --> 00:44:23,520
devices your tablets your desktop

1104
00:44:23,520 --> 00:44:26,480
computers and also browsers um so it's

1105
00:44:26,480 --> 00:44:28,640
just pretty convenient to be able to use

1106
00:44:28,640 --> 00:44:31,440
it against all your different devices

1107
00:44:31,440 --> 00:44:32,319
uh

1108
00:44:32,319 --> 00:44:34,079
most password managers

1109
00:44:34,079 --> 00:44:36,400
are with a freemium business model so

1110
00:44:36,400 --> 00:44:37,839
there's free they usually have a free

1111
00:44:37,839 --> 00:44:40,480
version but the security extras usually

1112
00:44:40,480 --> 00:44:42,960
are included in the paid versions there

1113
00:44:42,960 --> 00:44:45,599
are cloud-based and locally hosted

1114
00:44:45,599 --> 00:44:47,119
password managers so that kind of

1115
00:44:47,119 --> 00:44:50,880
depends on your risk posture and um your

1116
00:44:50,880 --> 00:44:54,640
basic music your use case so mostly

1117
00:44:54,640 --> 00:44:57,200
cloud-based um most users would probably

1118
00:44:57,200 --> 00:44:59,200
opt for that just based off convenience

1119
00:44:59,200 --> 00:45:02,160
um the locally hosted one if you

1120
00:45:02,160 --> 00:45:03,920
just need to host it yourself and you

1121
00:45:03,920 --> 00:45:05,119
don't want it to the cloud then that

1122
00:45:05,119 --> 00:45:06,640
might be for you

1123
00:45:06,640 --> 00:45:09,040
uh below here are just some basic

1124
00:45:09,040 --> 00:45:10,880
password managers that are out there one

1125
00:45:10,880 --> 00:45:13,680
password bit warden dashlane keeper

1126
00:45:13,680 --> 00:45:16,480
lastpass and nor pass um just check them

1127
00:45:16,480 --> 00:45:18,640
out see what works for you

1128
00:45:18,640 --> 00:45:20,160
and ultimately what we want you to take

1129
00:45:20,160 --> 00:45:21,680
away from the stock is to protect

1130
00:45:21,680 --> 00:45:24,240
yourself don't reuse passwords

1131
00:45:24,240 --> 00:45:26,240
utilize password managers

1132
00:45:26,240 --> 00:45:28,960
use these passphrases and generally the

1133
00:45:28,960 --> 00:45:31,040
more characters the better think like an

1134
00:45:31,040 --> 00:45:33,440
attacker um if your password is easy to

1135
00:45:33,440 --> 00:45:35,760
brute force or guess then um the

1136
00:45:35,760 --> 00:45:37,599
attacker is probably going to get it if

1137
00:45:37,599 --> 00:45:40,240
it takes a long time they might pass

1138
00:45:40,240 --> 00:45:42,319
pass over you on to someone who is more

1139
00:45:42,319 --> 00:45:43,359
vulnerable

1140
00:45:43,359 --> 00:45:44,800
and if you want to try password cracking

1141
00:45:44,800 --> 00:45:46,319
for yourself make sure you have

1142
00:45:46,319 --> 00:45:49,599
authorization and use platforms that are

1143
00:45:49,599 --> 00:45:51,599
legal we can't stress this enough we

1144
00:45:51,599 --> 00:45:53,119
don't want you getting into any trouble

1145
00:45:53,119 --> 00:45:56,160
or doing anything illegal

1146
00:45:56,160 --> 00:45:59,480
any questions

1147
00:46:13,359 --> 00:46:16,000
this this was excellent

1148
00:46:16,000 --> 00:46:18,880
there was a lot of interest from

1149
00:46:18,880 --> 00:46:21,200
the uh attendees

1150
00:46:21,200 --> 00:46:23,200
i noticed that uh you were really good

1151
00:46:23,200 --> 00:46:24,960
at jumping and

1152
00:46:24,960 --> 00:46:26,240
sharing

1153
00:46:26,240 --> 00:46:28,960
i think one of the questions was uh

1154
00:46:28,960 --> 00:46:30,000
does

1155
00:46:30,000 --> 00:46:32,400
john take into account more of

1156
00:46:32,400 --> 00:46:35,200
passphrase

1157
00:46:36,480 --> 00:46:38,560
um

1158
00:46:38,560 --> 00:46:40,640
i would say that it kind of depends on

1159
00:46:40,640 --> 00:46:42,800
the word list that you use

1160
00:46:42,800 --> 00:46:46,560
um for john and hash cat um if you're

1161
00:46:46,560 --> 00:46:47,599
trying to

1162
00:46:47,599 --> 00:46:49,920
crack past phrases like there are i'm

1163
00:46:49,920 --> 00:46:52,000
sure there's word lists out there that

1164
00:46:52,000 --> 00:46:54,079
do look into trying to craft more

1165
00:46:54,079 --> 00:46:55,839
passphrases than the most common

1166
00:46:55,839 --> 00:46:58,319
passwords

1167
00:46:58,960 --> 00:47:01,760
okay and i think we have a time for uh

1168
00:47:01,760 --> 00:47:03,680
another one

1169
00:47:03,680 --> 00:47:05,440
there was an interesting question here

1170
00:47:05,440 --> 00:47:07,680
about do you have a recommendation over

1171
00:47:07,680 --> 00:47:10,800
an above or preference with regard to

1172
00:47:10,800 --> 00:47:11,920
the uh

1173
00:47:11,920 --> 00:47:13,839
the password managers

1174
00:47:13,839 --> 00:47:16,640
that you've listed

1175
00:47:17,200 --> 00:47:21,440
um so we actually cannot um kind of give

1176
00:47:21,440 --> 00:47:23,359
you a recommendation for password

1177
00:47:23,359 --> 00:47:26,559
managers um unfortunately i will say

1178
00:47:26,559 --> 00:47:28,480
there's a lot of good ones out there and

1179
00:47:28,480 --> 00:47:29,440
um

1180
00:47:29,440 --> 00:47:31,760
like you could even go into uh the

1181
00:47:31,760 --> 00:47:33,280
security twitter

1182
00:47:33,280 --> 00:47:34,880
sphere i know that was a topic of

1183
00:47:34,880 --> 00:47:38,880
conversation a couple weeks ago um so

1184
00:47:38,880 --> 00:47:40,400
i would just probably crowdsource that

1185
00:47:40,400 --> 00:47:42,079
one we unfortunately cannot give you a

1186
00:47:42,079 --> 00:47:44,319
recommendation

1187
00:47:44,319 --> 00:47:47,920
that's great much appreciation and also

1188
00:47:47,920 --> 00:47:50,800
there was a lot of interest in the

1189
00:47:50,800 --> 00:47:53,440
talk being recorded but is also are the

1190
00:47:53,440 --> 00:47:57,119
slides will those be available

1191
00:47:58,000 --> 00:48:00,000
oh and we'll have to get back to you on

1192
00:48:00,000 --> 00:48:01,839
that one actually just to double check

1193
00:48:01,839 --> 00:48:03,680
on our side sorry

1194
00:48:03,680 --> 00:48:06,160
okay and will they be able to they can

1195
00:48:06,160 --> 00:48:08,640
follow somebody some of you on twitter

1196
00:48:08,640 --> 00:48:09,920
to uh

1197
00:48:09,920 --> 00:48:11,200
keep themselves safe and learn more

1198
00:48:11,200 --> 00:48:13,359
about password cracking

1199
00:48:13,359 --> 00:48:15,280
yeah sure or on linkedin too i think

1200
00:48:15,280 --> 00:48:17,839
it's on our platform hopping account

1201
00:48:17,839 --> 00:48:18,880
yeah

1202
00:48:18,880 --> 00:48:20,800
all right that's awesome i'm going to

1203
00:48:20,800 --> 00:48:22,880
wrap it up here i want to thank you all

1204
00:48:22,880 --> 00:48:25,599
so very much for what you've shared here

1205
00:48:25,599 --> 00:48:27,359
today and i hope you have a terrific

1206
00:48:27,359 --> 00:48:28,960
time through the rest of our conference

1207
00:48:28,960 --> 00:48:30,960
and i encourage all of our attendees to

1208
00:48:30,960 --> 00:48:33,520
please go and visit some of the other

1209
00:48:33,520 --> 00:48:35,839
great villages and events that we have

1210
00:48:35,839 --> 00:48:38,559
on today our career village for example

1211
00:48:38,559 --> 00:48:41,920
or go see our sponsors at the

1212
00:48:41,920 --> 00:48:44,559
expo village and other than that thank

1213
00:48:44,559 --> 00:48:48,440
you very very much

