1
00:00:16,320 --> 00:00:18,240
all right

2
00:00:18,240 --> 00:00:20,160
i've been having such a great day at the

3
00:00:20,160 --> 00:00:23,279
event today um i just like to say thank

4
00:00:23,279 --> 00:00:25,760
you to our sponsors today on the screen

5
00:00:25,760 --> 00:00:28,400
for supporting such a great cause um

6
00:00:28,400 --> 00:00:30,640
everybody don't forget that we have

7
00:00:30,640 --> 00:00:32,880
career village where we're doing resume

8
00:00:32,880 --> 00:00:35,520
review and mock interview as well

9
00:00:35,520 --> 00:00:38,160
all right so today's speaker is scott

10
00:00:38,160 --> 00:00:40,320
and qua and they're a security engineer

11
00:00:40,320 --> 00:00:43,680
over at microsoft and their talk is

12
00:00:43,680 --> 00:00:46,320
titled making it real turning an attack

13
00:00:46,320 --> 00:00:49,600
chain into ctf very exciting the stage

14
00:00:49,600 --> 00:00:51,280
is yours

15
00:00:51,280 --> 00:00:52,879
thank you grace

16
00:00:52,879 --> 00:00:55,039
let's get started

17
00:00:55,039 --> 00:00:57,680
hi everyone and welcome to our talk on

18
00:00:57,680 --> 00:01:00,399
turning an attack chain into a ctf we

19
00:01:00,399 --> 00:01:02,960
hope this is useful to you in creating

20
00:01:02,960 --> 00:01:05,519
security education programs for your own

21
00:01:05,519 --> 00:01:10,479
organizations in a fun and practical way

22
00:01:10,720 --> 00:01:13,439
so um let us introduce ourselves my name

23
00:01:13,439 --> 00:01:16,799
is hua i have been on the services pen

24
00:01:16,799 --> 00:01:19,520
test or serpent for short red team

25
00:01:19,520 --> 00:01:21,759
at microsoft for about three years i

26
00:01:21,759 --> 00:01:23,280
work for my cats and doctor have a

27
00:01:23,280 --> 00:01:25,520
better life you can kind of see one of

28
00:01:25,520 --> 00:01:28,320
them right here and if he happens to

29
00:01:28,320 --> 00:01:29,600
walk on my keyboard during the

30
00:01:29,600 --> 00:01:32,880
presentation i apologize in advance um

31
00:01:32,880 --> 00:01:33,840
scott

32
00:01:33,840 --> 00:01:35,680
hi my name is scott reese i've been at

33
00:01:35,680 --> 00:01:38,799
microsoft for the last nine years and

34
00:01:38,799 --> 00:01:40,320
been on the second red team for the last

35
00:01:40,320 --> 00:01:42,720
five i spend all of my extra time and

36
00:01:42,720 --> 00:01:45,640
money uh on race cars for my children

37
00:01:45,640 --> 00:01:49,129
[Music]

38
00:01:50,240 --> 00:01:54,479
okay so our agenda for today

39
00:01:54,479 --> 00:01:57,280
is on the screen i will go into briefly

40
00:01:57,280 --> 00:02:00,079
what is a ctf why we made our own for

41
00:02:00,079 --> 00:02:02,640
our organizations and then we'll go into

42
00:02:02,640 --> 00:02:04,719
kind of how we design the attack path

43
00:02:04,719 --> 00:02:06,640
based on one of the real

44
00:02:06,640 --> 00:02:08,959
scenarios that we encounter during our

45
00:02:08,959 --> 00:02:11,520
red team operations uh we'll go into

46
00:02:11,520 --> 00:02:14,239
details and solutions of a few uh

47
00:02:14,239 --> 00:02:15,840
challenges that really highlight the

48
00:02:15,840 --> 00:02:18,640
issues we wanted to showcase to our

49
00:02:18,640 --> 00:02:21,040
players uh what results and feedback we

50
00:02:21,040 --> 00:02:22,400
got after

51
00:02:22,400 --> 00:02:25,200
doing the first pilot version of this of

52
00:02:25,200 --> 00:02:28,000
the ctf with our organization and then

53
00:02:28,000 --> 00:02:31,440
we can discuss what's next steps

54
00:02:31,440 --> 00:02:32,319
um

55
00:02:32,319 --> 00:02:33,760
so with that

56
00:02:33,760 --> 00:02:37,760
um what is ctf uh so capture the flag or

57
00:02:37,760 --> 00:02:40,959
ctf for short has been a staple in cyber

58
00:02:40,959 --> 00:02:43,360
security conferences for

59
00:02:43,360 --> 00:02:44,560
almost

60
00:02:44,560 --> 00:02:46,959
for for quite a while now um you can

61
00:02:46,959 --> 00:02:50,160
find them in practically almost all of

62
00:02:50,160 --> 00:02:52,239
um cyber security conference today

63
00:02:52,239 --> 00:02:54,160
there's one uh a

64
00:02:54,160 --> 00:02:56,400
diana initiative um

65
00:02:56,400 --> 00:02:58,480
today as well um

66
00:02:58,480 --> 00:03:01,519
so ctf is a computer security war games

67
00:03:01,519 --> 00:03:02,560
where

68
00:03:02,560 --> 00:03:04,959
the player or the team competes to find

69
00:03:04,959 --> 00:03:07,680
the flags by solving problems related to

70
00:03:07,680 --> 00:03:10,159
different aspects of security like web

71
00:03:10,159 --> 00:03:13,599
hacking reverse engineering forensics

72
00:03:13,599 --> 00:03:17,360
and estra um there's really old and

73
00:03:17,360 --> 00:03:20,080
kind of historic ctfs like defcon and

74
00:03:20,080 --> 00:03:22,879
colgate but recently there has been more

75
00:03:22,879 --> 00:03:25,920
kind of commercialized ctf as well

76
00:03:25,920 --> 00:03:29,040
such as escala as well

77
00:03:29,040 --> 00:03:30,799
there are two

78
00:03:30,799 --> 00:03:33,840
kinds of ctf uh there's

79
00:03:33,840 --> 00:03:34,720
um

80
00:03:34,720 --> 00:03:37,200
jupiter which is the most common and

81
00:03:37,200 --> 00:03:39,519
usually online forms this is the format

82
00:03:39,519 --> 00:03:42,799
that we chose for our ctf

83
00:03:42,799 --> 00:03:44,319
in jeopardy

84
00:03:44,319 --> 00:03:47,360
format ctfs the organizers host and

85
00:03:47,360 --> 00:03:50,319
create the challenges

86
00:03:50,319 --> 00:03:52,879
and it has many different categories

87
00:03:52,879 --> 00:03:55,680
attack defense is a more traditional

88
00:03:55,680 --> 00:03:57,360
kind of ctfs

89
00:03:57,360 --> 00:04:00,720
usually in person the playing teams will

90
00:04:00,720 --> 00:04:02,560
host the challenges and will kind of

91
00:04:02,560 --> 00:04:04,400
attack each other's

92
00:04:04,400 --> 00:04:06,400
and it tends to focus on binary

93
00:04:06,400 --> 00:04:08,959
exploitation uh full credit to the slide

94
00:04:08,959 --> 00:04:11,599
go to tylers who is uh kind of one of

95
00:04:11,599 --> 00:04:14,640
the best members of the ppp cdf teams

96
00:04:14,640 --> 00:04:18,079
who have won ctf uh at defcon for three

97
00:04:18,079 --> 00:04:19,600
years now i think

98
00:04:19,600 --> 00:04:20,639
and so

99
00:04:20,639 --> 00:04:22,800
the link to their his presentations and

100
00:04:22,800 --> 00:04:24,000
on the bottom

101
00:04:24,000 --> 00:04:25,759
it's really cool to if you want to know

102
00:04:25,759 --> 00:04:27,759
more about ctf

103
00:04:27,759 --> 00:04:29,759
so now i will pass on to scott to

104
00:04:29,759 --> 00:04:32,000
discuss why we make our own and how we

105
00:04:32,000 --> 00:04:34,960
design our attack pads

106
00:04:34,960 --> 00:04:36,560
thank you cool

107
00:04:36,560 --> 00:04:38,000
so qual just talked about a bunch of

108
00:04:38,000 --> 00:04:40,720
cool existing ctfs um that are out there

109
00:04:40,720 --> 00:04:42,800
in the market and and i'm sure a lot of

110
00:04:42,800 --> 00:04:44,560
people here at this talk have played in

111
00:04:44,560 --> 00:04:45,759
a bunch of those

112
00:04:45,759 --> 00:04:47,280
so the first question you have to kind

113
00:04:47,280 --> 00:04:48,639
of ask yourself and what we asked

114
00:04:48,639 --> 00:04:50,400
ourselves is why would we invest the

115
00:04:50,400 --> 00:04:52,880
time in making our own ctf

116
00:04:52,880 --> 00:04:55,680
so first over the years we've invested

117
00:04:55,680 --> 00:04:58,080
very heavily in teaching offensive

118
00:04:58,080 --> 00:05:00,160
security practices to the people in our

119
00:05:00,160 --> 00:05:02,479
organization at microsoft

120
00:05:02,479 --> 00:05:04,720
this serpent academy is open to all

121
00:05:04,720 --> 00:05:08,560
security roles from devs to pms

122
00:05:08,560 --> 00:05:10,479
in a monthly session that we put on

123
00:05:10,479 --> 00:05:12,720
called serpent academy this has built up

124
00:05:12,720 --> 00:05:15,199
a small and dedicated group of people

125
00:05:15,199 --> 00:05:16,880
that are specifically interested in

126
00:05:16,880 --> 00:05:18,479
learning more about offensive security

127
00:05:18,479 --> 00:05:21,600
so we had a great pool of people already

128
00:05:21,600 --> 00:05:24,000
that were interested in something unique

129
00:05:24,000 --> 00:05:25,680
the next thing we wanted to do was

130
00:05:25,680 --> 00:05:28,080
really drive home some learnings from

131
00:05:28,080 --> 00:05:30,240
our recent red team operations that we

132
00:05:30,240 --> 00:05:32,639
performed within the organization

133
00:05:32,639 --> 00:05:34,639
so typically when we do a red team

134
00:05:34,639 --> 00:05:37,919
operation our disclosure of attacks is

135
00:05:37,919 --> 00:05:40,080
reported only to the teams that are

136
00:05:40,080 --> 00:05:43,919
impacted uh by that specific operation

137
00:05:43,919 --> 00:05:45,759
but we realize the vulnerabilities and

138
00:05:45,759 --> 00:05:48,479
practices that we abuse during the

139
00:05:48,479 --> 00:05:51,360
engagement likely apply to more teams

140
00:05:51,360 --> 00:05:53,199
across the company

141
00:05:53,199 --> 00:05:55,120
so therefore we wanted to put together a

142
00:05:55,120 --> 00:05:57,639
ctf that was primarily

143
00:05:57,639 --> 00:05:59,680
demonstratively real

144
00:05:59,680 --> 00:06:01,919
uh there's a lot of great ctfs out there

145
00:06:01,919 --> 00:06:04,960
but sometimes ctfs become arbitrary

146
00:06:04,960 --> 00:06:07,120
puzzle based challenges which are great

147
00:06:07,120 --> 00:06:09,120
for learning but not necessarily for

148
00:06:09,120 --> 00:06:11,759
locking in uh enterprise security kind

149
00:06:11,759 --> 00:06:13,520
of concepts in your mind

150
00:06:13,520 --> 00:06:15,759
but something that we could connect we

151
00:06:15,759 --> 00:06:17,199
wanted to connect the participants with

152
00:06:17,199 --> 00:06:18,880
their day-to-day jobs that was our

153
00:06:18,880 --> 00:06:21,199
primary focus bring it something make

154
00:06:21,199 --> 00:06:23,600
the ctf something that was real to them

155
00:06:23,600 --> 00:06:26,240
so when they walked away from the ctf

156
00:06:26,240 --> 00:06:28,800
they could go back to their own services

157
00:06:28,800 --> 00:06:30,560
and see if those same vulnerabilities

158
00:06:30,560 --> 00:06:32,400
existed

159
00:06:32,400 --> 00:06:34,240
so quite simply we looked across our

160
00:06:34,240 --> 00:06:36,800
last uh few red team engagements that we

161
00:06:36,800 --> 00:06:37,919
performed

162
00:06:37,919 --> 00:06:40,319
that also overlapped with concepts that

163
00:06:40,319 --> 00:06:42,800
we had already been teaching through

164
00:06:42,800 --> 00:06:44,400
serpent academy

165
00:06:44,400 --> 00:06:47,039
so what's on the screen now is an actual

166
00:06:47,039 --> 00:06:49,280
generalized example of one of those

167
00:06:49,280 --> 00:06:50,560
attack chains

168
00:06:50,560 --> 00:06:52,880
that we performed in our organization

169
00:06:52,880 --> 00:06:55,599
against azure devops which ended up

170
00:06:55,599 --> 00:06:57,520
being the core component and the thing

171
00:06:57,520 --> 00:06:59,199
that we wanted to

172
00:06:59,199 --> 00:07:01,759
highlight in our ctf

173
00:07:01,759 --> 00:07:03,919
the the real attack chain here focused

174
00:07:03,919 --> 00:07:06,319
on getting access to a team's azure

175
00:07:06,319 --> 00:07:09,039
devops instance uh azure devops is

176
00:07:09,039 --> 00:07:11,599
essentially like github for uh azure

177
00:07:11,599 --> 00:07:13,680
internal enterprises and it's used

178
00:07:13,680 --> 00:07:16,639
primarily when using things like uh

179
00:07:16,639 --> 00:07:17,680
sorry

180
00:07:17,680 --> 00:07:18,560
uh

181
00:07:18,560 --> 00:07:20,319
we wanted to get access to the azure

182
00:07:20,319 --> 00:07:22,319
devops instances with permissions to

183
00:07:22,319 --> 00:07:25,599
edit and target a build pipeline

184
00:07:25,599 --> 00:07:28,479
via a single compromised user's personal

185
00:07:28,479 --> 00:07:31,840
access token a personal access token

186
00:07:31,840 --> 00:07:34,160
is a user's password essentially

187
00:07:34,160 --> 00:07:35,599
specifically for when they're

188
00:07:35,599 --> 00:07:37,199
interfacing with azure devops using

189
00:07:37,199 --> 00:07:39,520
tools like visual studio and git the

190
00:07:39,520 --> 00:07:41,599
authentication mechanism mechanism on

191
00:07:41,599 --> 00:07:43,280
the back end is using a personal access

192
00:07:43,280 --> 00:07:45,919
token uh i'll commonly switch between

193
00:07:45,919 --> 00:07:48,319
personal access token and packed

194
00:07:48,319 --> 00:07:50,240
throughout this presentation but that's

195
00:07:50,240 --> 00:07:51,759
essentially what it is

196
00:07:51,759 --> 00:07:53,840
uh so from getting access to the first

197
00:07:53,840 --> 00:07:55,759
user's personal access token we were

198
00:07:55,759 --> 00:07:57,440
able to leverage the permissions that

199
00:07:57,440 --> 00:08:00,960
user had to implement a new task

200
00:08:00,960 --> 00:08:02,879
a new build task inside the build

201
00:08:02,879 --> 00:08:05,360
pipeline processes that injected

202
00:08:05,360 --> 00:08:08,479
uh malicious code immediately prior to

203
00:08:08,479 --> 00:08:11,360
compilation there in number three

204
00:08:11,360 --> 00:08:13,280
and from there the continuous

205
00:08:13,280 --> 00:08:15,520
integration and deployment pipelines uh

206
00:08:15,520 --> 00:08:17,280
in azure devops

207
00:08:17,280 --> 00:08:18,800
were very helpful enough to

208
00:08:18,800 --> 00:08:20,960
automatically deploy the new version of

209
00:08:20,960 --> 00:08:23,759
that injected binary for us

210
00:08:23,759 --> 00:08:25,759
after it successfully compiled

211
00:08:25,759 --> 00:08:27,759
so after the release

212
00:08:27,759 --> 00:08:29,759
uh build machines and developers begin

213
00:08:29,759 --> 00:08:31,919
to automatically pull this new package

214
00:08:31,919 --> 00:08:34,799
with our injected back door into their

215
00:08:34,799 --> 00:08:38,079
work streams automatically

216
00:08:39,279 --> 00:08:41,120
uh so one of the things that we wanted

217
00:08:41,120 --> 00:08:43,599
to focus on on through red teaming and

218
00:08:43,599 --> 00:08:46,560
the ctf we wanted to demonstrate that

219
00:08:46,560 --> 00:08:49,600
the attacker mindset is continuing to

220
00:08:49,600 --> 00:08:52,000
shift further to the left

221
00:08:52,000 --> 00:08:54,399
getting closer and closer

222
00:08:54,399 --> 00:08:56,640
to the development processes and

223
00:08:56,640 --> 00:08:59,040
ecosystems we can see this across the

224
00:08:59,040 --> 00:09:02,399
industry with uh the msp attacks and the

225
00:09:02,399 --> 00:09:04,000
solarwinds attacks

226
00:09:04,000 --> 00:09:06,839
these things are more common given their

227
00:09:06,839 --> 00:09:09,680
relative ease and impact than what we

228
00:09:09,680 --> 00:09:11,600
traditionally deal with directly

229
00:09:11,600 --> 00:09:15,440
attacking hardened production systems

230
00:09:15,440 --> 00:09:17,279
so we demonstrated this in our red team

231
00:09:17,279 --> 00:09:19,360
attack that was our primary objective

232
00:09:19,360 --> 00:09:20,720
and we were able to demonstrate a

233
00:09:20,720 --> 00:09:23,120
compromise of over thousands of build

234
00:09:23,120 --> 00:09:25,440
machines and developer machines

235
00:09:25,440 --> 00:09:27,360
this graph here demonstrates what we

236
00:09:27,360 --> 00:09:29,920
refer to as the blast radius of impact

237
00:09:29,920 --> 00:09:32,160
that our malicious code injection attack

238
00:09:32,160 --> 00:09:33,920
was able to achieve

239
00:09:33,920 --> 00:09:36,560
what you can see on the graph here is

240
00:09:36,560 --> 00:09:39,279
over the course of a few weeks as the

241
00:09:39,279 --> 00:09:40,160
build

242
00:09:40,160 --> 00:09:43,360
as the backdoor build uh binary got

243
00:09:43,360 --> 00:09:45,519
ingested by our build machines and

244
00:09:45,519 --> 00:09:48,320
developers we would see pingbacks coming

245
00:09:48,320 --> 00:09:50,320
back from all of those workstations and

246
00:09:50,320 --> 00:09:52,560
we were able to track the unique counts

247
00:09:52,560 --> 00:09:55,680
we uh we ended up compromising over 7000

248
00:09:55,680 --> 00:09:58,320
machines throughout the environments

249
00:09:58,320 --> 00:10:00,720
we felt strongly that it wasn't just

250
00:10:00,720 --> 00:10:03,680
enough to show the organization

251
00:10:03,680 --> 00:10:06,640
this impact we really wanted everyone to

252
00:10:06,640 --> 00:10:09,279
understand exactly how we performed the

253
00:10:09,279 --> 00:10:11,920
attacks which systems and security

254
00:10:11,920 --> 00:10:13,440
controls we were taking advantage of

255
00:10:13,440 --> 00:10:14,880
during the operation

256
00:10:14,880 --> 00:10:18,079
and the impact of a build system focus

257
00:10:18,079 --> 00:10:20,160
compromise

258
00:10:20,160 --> 00:10:23,120
so using that real attack chain this is

259
00:10:23,120 --> 00:10:25,600
a look at our initial planning to the

260
00:10:25,600 --> 00:10:28,000
right here is our visio diagram showing

261
00:10:28,000 --> 00:10:29,519
all the components we wanted to

262
00:10:29,519 --> 00:10:31,839
implement while azure devops was the

263
00:10:31,839 --> 00:10:34,160
initial focus we really wanted to give a

264
00:10:34,160 --> 00:10:36,160
full end-to-end red team engagement

265
00:10:36,160 --> 00:10:37,519
experience

266
00:10:37,519 --> 00:10:39,200
so we started with an assumed breach

267
00:10:39,200 --> 00:10:41,519
mentality our participants were starting

268
00:10:41,519 --> 00:10:43,040
on our corporate network already with

269
00:10:43,040 --> 00:10:44,959
their standard accounts

270
00:10:44,959 --> 00:10:47,040
this made the barrier to entry extremely

271
00:10:47,040 --> 00:10:48,959
cheap and easy for both the participants

272
00:10:48,959 --> 00:10:51,839
and us setting up the ctf challenge

273
00:10:51,839 --> 00:10:53,680
the initial challenges were to perform

274
00:10:53,680 --> 00:10:56,160
uh initial simple reconnaissance using

275
00:10:56,160 --> 00:10:58,480
systems that they were already familiar

276
00:10:58,480 --> 00:10:59,600
with

277
00:10:59,600 --> 00:11:01,920
within the organization for cataloging

278
00:11:01,920 --> 00:11:03,279
our services so

279
00:11:03,279 --> 00:11:05,760
we injected the necessary initial

280
00:11:05,760 --> 00:11:08,160
reconnaissance flags within the data

281
00:11:08,160 --> 00:11:10,399
systems that they were already used to

282
00:11:10,399 --> 00:11:12,399
to point them to the three initial

283
00:11:12,399 --> 00:11:14,720
starting points so this is exactly how

284
00:11:14,720 --> 00:11:16,240
we would operate if we were able to

285
00:11:16,240 --> 00:11:18,240
breach into the network

286
00:11:18,240 --> 00:11:20,399
uh then we had three initial starting

287
00:11:20,399 --> 00:11:22,800
points a vulnerable web app

288
00:11:22,800 --> 00:11:25,519
an active directory domain and the azure

289
00:11:25,519 --> 00:11:28,920
devops organization

290
00:11:29,760 --> 00:11:32,079
so getting those reconnaissance flags

291
00:11:32,079 --> 00:11:33,920
into their system is was a really easy

292
00:11:33,920 --> 00:11:36,079
way for us to scope out the ctf one of

293
00:11:36,079 --> 00:11:37,920
the things we were very concerned on at

294
00:11:37,920 --> 00:11:39,440
the start of this was

295
00:11:39,440 --> 00:11:41,040
accidentally having a whole bunch of

296
00:11:41,040 --> 00:11:42,720
people start hammering on production

297
00:11:42,720 --> 00:11:45,120
systems because they weren't clear on

298
00:11:45,120 --> 00:11:47,279
what systems were in scope so the

299
00:11:47,279 --> 00:11:49,680
reconnaissance flags were very easy to

300
00:11:49,680 --> 00:11:52,639
implement but very very important for us

301
00:11:52,639 --> 00:11:55,200
we also had specific attack techniques

302
00:11:55,200 --> 00:11:57,279
that we wanted to fully demonstrate to

303
00:11:57,279 --> 00:12:00,160
each participant things like leveraging

304
00:12:00,160 --> 00:12:03,040
uh ado personal access tokens

305
00:12:03,040 --> 00:12:04,639
laterally moving through an ad

306
00:12:04,639 --> 00:12:06,560
environment via traditional lateral

307
00:12:06,560 --> 00:12:08,959
movement like mtlm attacks and

308
00:12:08,959 --> 00:12:11,760
compromising azure components uh via

309
00:12:11,760 --> 00:12:14,079
service principle objects which are just

310
00:12:14,079 --> 00:12:16,800
authentication accounts inside azure

311
00:12:16,800 --> 00:12:18,399
that can talk to other resources in

312
00:12:18,399 --> 00:12:19,440
azure

313
00:12:19,440 --> 00:12:22,480
all of these are key components that

314
00:12:22,480 --> 00:12:25,839
the target audience our participants use

315
00:12:25,839 --> 00:12:28,880
on a daily basis in their systems

316
00:12:28,880 --> 00:12:31,360
one of the key aspects of the ctf was

317
00:12:31,360 --> 00:12:33,279
that regardless of which component

318
00:12:33,279 --> 00:12:35,920
someone started with or what technology

319
00:12:35,920 --> 00:12:37,519
they were most familiar with there

320
00:12:37,519 --> 00:12:40,079
needed to be multiple circular routes

321
00:12:40,079 --> 00:12:42,160
to each other component so for instance

322
00:12:42,160 --> 00:12:44,320
if they started at web app

323
00:12:44,320 --> 00:12:46,000
they would discover a reference to the

324
00:12:46,000 --> 00:12:47,680
adl organization

325
00:12:47,680 --> 00:12:49,200
and through further compromise they

326
00:12:49,200 --> 00:12:51,760
would discover a password leading to our

327
00:12:51,760 --> 00:12:55,040
active directory jump boxes

328
00:12:55,839 --> 00:12:58,399
uh we plan to support around 50 to 100

329
00:12:58,399 --> 00:13:00,800
users with a low concurrency rate we had

330
00:13:00,800 --> 00:13:03,040
this spread over about a month and so we

331
00:13:03,040 --> 00:13:04,800
weren't really worried about

332
00:13:04,800 --> 00:13:07,519
a hundreds of people all attacking the

333
00:13:07,519 --> 00:13:09,920
same systems at you know within a couple

334
00:13:09,920 --> 00:13:11,920
hours of each other so it was a pretty

335
00:13:11,920 --> 00:13:14,560
light ctf infrastructure for us it had

336
00:13:14,560 --> 00:13:16,959
three core infrastructure components

337
00:13:16,959 --> 00:13:19,360
just from an organizational perspective

338
00:13:19,360 --> 00:13:22,399
we had two azure subscriptions one was

339
00:13:22,399 --> 00:13:24,959
hosting all of our ctf challenges

340
00:13:24,959 --> 00:13:27,519
objects like the active directory domain

341
00:13:27,519 --> 00:13:29,600
and the vulnerable web app

342
00:13:29,600 --> 00:13:32,399
and then we separated our ctf management

343
00:13:32,399 --> 00:13:34,800
infrastructure into a separate uh azure

344
00:13:34,800 --> 00:13:37,760
subscription so we had a dockerized ctfd

345
00:13:37,760 --> 00:13:39,920
instance which if you're hosting your

346
00:13:39,920 --> 00:13:43,680
own ctf especially a jeopardy style ctf

347
00:13:43,680 --> 00:13:46,959
i can't recommend ctfd enough it's

348
00:13:46,959 --> 00:13:49,760
extremely simple basically a push button

349
00:13:49,760 --> 00:13:51,279
click to deploy

350
00:13:51,279 --> 00:13:53,120
uh and you have a full you know

351
00:13:53,120 --> 00:13:55,760
scoreboard jeopardy style um

352
00:13:55,760 --> 00:13:57,920
infrastructure ready to go so it's

353
00:13:57,920 --> 00:13:59,519
really really great

354
00:13:59,519 --> 00:14:01,760
we also had to measure uh azure devops

355
00:14:01,760 --> 00:14:03,920
instance as we've talked about multiple

356
00:14:03,920 --> 00:14:07,040
times now there were two repos inside

357
00:14:07,040 --> 00:14:09,199
that azure devops instance

358
00:14:09,199 --> 00:14:11,199
one was publicly available to all

359
00:14:11,199 --> 00:14:12,959
participants as soon as they were able

360
00:14:12,959 --> 00:14:16,160
to find that ado organization and one

361
00:14:16,160 --> 00:14:18,160
that was only discovered after a certain

362
00:14:18,160 --> 00:14:19,680
level of compromise that we'll talk

363
00:14:19,680 --> 00:14:21,120
about more

364
00:14:21,120 --> 00:14:23,839
and there was also an insecure build and

365
00:14:23,839 --> 00:14:26,800
an insecure release pipeline which again

366
00:14:26,800 --> 00:14:29,519
was those core objectives uh we wanted

367
00:14:29,519 --> 00:14:32,639
to demonstrate for the ctf

368
00:14:32,639 --> 00:14:34,959
so while we had three attack paths we

369
00:14:34,959 --> 00:14:37,519
wanted to focus on unfortunately

370
00:14:37,519 --> 00:14:39,120
we had some issues that we'll talk about

371
00:14:39,120 --> 00:14:41,279
with our web app challenges we had some

372
00:14:41,279 --> 00:14:42,800
really cool challenges built into the

373
00:14:42,800 --> 00:14:45,440
web app challenges but uh there were

374
00:14:45,440 --> 00:14:47,199
supposed to be some components that were

375
00:14:47,199 --> 00:14:49,120
injected there that

376
00:14:49,120 --> 00:14:50,959
we just straight up forgot to implement

377
00:14:50,959 --> 00:14:52,720
so the web app challenges just kind of

378
00:14:52,720 --> 00:14:56,000
like accidentally ended on a on a

379
00:14:56,000 --> 00:14:58,320
on a on a wall and so we'll talk about

380
00:14:58,320 --> 00:15:00,160
that more

381
00:15:00,160 --> 00:15:02,480
so starting with azure devops this is

382
00:15:02,480 --> 00:15:05,680
what those ctf challenges looked like

383
00:15:05,680 --> 00:15:08,399
overlaid on the attack path that we

384
00:15:08,399 --> 00:15:11,680
wanted to uh represent

385
00:15:11,680 --> 00:15:14,399
so over here starting on number one i'm

386
00:15:14,399 --> 00:15:15,680
gonna see if i can

387
00:15:15,680 --> 00:15:17,040
laser pointer

388
00:15:17,040 --> 00:15:18,880
so starting on number one right the

389
00:15:18,880 --> 00:15:21,360
initial reconnaissance uh these were

390
00:15:21,360 --> 00:15:24,240
simple initial reconnaissance flags that

391
00:15:24,240 --> 00:15:26,399
uh they just needed to identify

392
00:15:26,399 --> 00:15:29,120
and basically put in the specific names

393
00:15:29,120 --> 00:15:31,360
of the ado organization that we wanted

394
00:15:31,360 --> 00:15:33,920
to focus on again this is to really make

395
00:15:33,920 --> 00:15:35,360
sure they know exactly what they're

396
00:15:35,360 --> 00:15:37,199
scoped into attacking

397
00:15:37,199 --> 00:15:40,160
so from here uh there were two paths the

398
00:15:40,160 --> 00:15:42,959
participant could take if they went down

399
00:15:42,959 --> 00:15:45,360
to the bottom attack path they could

400
00:15:45,360 --> 00:15:47,279
start attacking build machines by

401
00:15:47,279 --> 00:15:49,519
injecting malicious tasks into the build

402
00:15:49,519 --> 00:15:52,720
pipeline exactly as we did it on our red

403
00:15:52,720 --> 00:15:54,959
team engagement this would put them down

404
00:15:54,959 --> 00:15:57,519
the active directory path via a remote

405
00:15:57,519 --> 00:16:00,000
code execution style of attack which

406
00:16:00,000 --> 00:16:01,920
we'll cover in a few slides but if they

407
00:16:01,920 --> 00:16:04,079
stayed up on the top path these sets of

408
00:16:04,079 --> 00:16:06,000
challenges were focused on the various

409
00:16:06,000 --> 00:16:08,959
security components within azure devops

410
00:16:08,959 --> 00:16:11,440
itself so this second challenge here for

411
00:16:11,440 --> 00:16:14,800
ado was to identify and compromise some

412
00:16:14,800 --> 00:16:17,440
secret variables that are often used

413
00:16:17,440 --> 00:16:20,720
within build and release pipelines

414
00:16:20,720 --> 00:16:22,800
so through obtaining the secrets which

415
00:16:22,800 --> 00:16:25,040
one of them included a personal access

416
00:16:25,040 --> 00:16:26,720
token they were able to get the

417
00:16:26,720 --> 00:16:29,360
challenge number three which is to uh

418
00:16:29,360 --> 00:16:32,160
find a more restricted code repo

419
00:16:32,160 --> 00:16:34,320
which actually housed the back end code

420
00:16:34,320 --> 00:16:36,560
for our web app challenge

421
00:16:36,560 --> 00:16:38,800
then they could move into number four

422
00:16:38,800 --> 00:16:40,639
uh using that personal access token

423
00:16:40,639 --> 00:16:42,320
again they could get access to the

424
00:16:42,320 --> 00:16:44,959
release pipeline that release pipeline

425
00:16:44,959 --> 00:16:47,519
then had access to a azure service

426
00:16:47,519 --> 00:16:49,920
principle which again is a an azure

427
00:16:49,920 --> 00:16:52,720
credential object basically a service

428
00:16:52,720 --> 00:16:54,240
account in azure

429
00:16:54,240 --> 00:16:56,880
and that let them do an attack against

430
00:16:56,880 --> 00:16:59,759
azure key vault using that azure service

431
00:16:59,759 --> 00:17:01,600
principle uh based on our

432
00:17:01,600 --> 00:17:03,920
misconfiguration of that environment to

433
00:17:03,920 --> 00:17:06,240
allow them to take the spn from the

434
00:17:06,240 --> 00:17:08,880
release pipeline and enumerate and dump

435
00:17:08,880 --> 00:17:13,520
all of the secrets from azure devops

436
00:17:14,400 --> 00:17:16,480
so then looking over to the the web app

437
00:17:16,480 --> 00:17:18,480
challenges we again had two different

438
00:17:18,480 --> 00:17:21,039
routes that they could follow the top

439
00:17:21,039 --> 00:17:23,679
path stayed within azure devops again

440
00:17:23,679 --> 00:17:25,599
challenge number one was to identify and

441
00:17:25,599 --> 00:17:27,119
clone that code repo that we talked

442
00:17:27,119 --> 00:17:29,360
about from there they could scan the

443
00:17:29,360 --> 00:17:31,360
code and would lead them to challenge

444
00:17:31,360 --> 00:17:34,559
number two which was to identify secrets

445
00:17:34,559 --> 00:17:36,720
in source code which when they

446
00:17:36,720 --> 00:17:38,799
identified the secret and they leveraged

447
00:17:38,799 --> 00:17:41,120
that secret to call an azure function

448
00:17:41,120 --> 00:17:44,000
app it would return some uh secrets from

449
00:17:44,000 --> 00:17:45,440
a key vault so showing a

450
00:17:45,440 --> 00:17:48,080
misconfiguration of uh

451
00:17:48,080 --> 00:17:50,320
permissioning between a web app and an

452
00:17:50,320 --> 00:17:52,240
azure function on the back end

453
00:17:52,240 --> 00:17:54,799
if they stayed on the bottom path

454
00:17:54,799 --> 00:17:56,960
this was directly targeting the web app

455
00:17:56,960 --> 00:17:58,559
that the participants

456
00:17:58,559 --> 00:18:00,880
we had them start using fiddler and burp

457
00:18:00,880 --> 00:18:03,520
suite for these challenges so a pretty

458
00:18:03,520 --> 00:18:06,160
easy intro to identifying various flags

459
00:18:06,160 --> 00:18:07,760
within response

460
00:18:07,760 --> 00:18:10,080
headers and cookies between number one

461
00:18:10,080 --> 00:18:11,200
and two

462
00:18:11,200 --> 00:18:13,120
from there they moved on to number three

463
00:18:13,120 --> 00:18:14,880
we introduced an actual loss

464
00:18:14,880 --> 00:18:17,440
vulnerability for path traversal which

465
00:18:17,440 --> 00:18:20,640
allowed them to download the app config

466
00:18:20,640 --> 00:18:23,679
file of the web application itself which

467
00:18:23,679 --> 00:18:26,080
obviously uh in most web app config

468
00:18:26,080 --> 00:18:28,320
files contain secrets

469
00:18:28,320 --> 00:18:31,280
and then from there they were able to do

470
00:18:31,280 --> 00:18:33,280
the hardest challenge and this was a

471
00:18:33,280 --> 00:18:35,600
very thematic challenge it looks out of

472
00:18:35,600 --> 00:18:38,000
place when we talk about complexity but

473
00:18:38,000 --> 00:18:40,799
we had a whole serpent academy series

474
00:18:40,799 --> 00:18:45,120
focused on oauth token validation prior

475
00:18:45,120 --> 00:18:47,280
to the ctf so we had an actual

476
00:18:47,280 --> 00:18:48,880
vulnerability here where they had to get

477
00:18:48,880 --> 00:18:50,720
access to an administratively locked

478
00:18:50,720 --> 00:18:53,039
down vulnerability uh sorry an

479
00:18:53,039 --> 00:18:55,520
administratively locked down portal by

480
00:18:55,520 --> 00:18:58,320
tampering with their own authentication

481
00:18:58,320 --> 00:19:00,640
bearer tokens this was achievable

482
00:19:00,640 --> 00:19:02,720
because we implemented some poor token

483
00:19:02,720 --> 00:19:05,280
validation logic which is something they

484
00:19:05,280 --> 00:19:07,520
would have been able to immediately see

485
00:19:07,520 --> 00:19:12,639
if they uh had cloned the repo earlier

486
00:19:13,440 --> 00:19:15,120
uh finally moving over to active

487
00:19:15,120 --> 00:19:17,520
directory focused uh once the users were

488
00:19:17,520 --> 00:19:19,919
able to get rce from azure devops from

489
00:19:19,919 --> 00:19:21,360
the build pipeline

490
00:19:21,360 --> 00:19:23,200
they needed to kind of do traditional

491
00:19:23,200 --> 00:19:25,039
active directory enterprise based

492
00:19:25,039 --> 00:19:27,760
activities like uh dumping credentials

493
00:19:27,760 --> 00:19:30,720
in number one and performing a lateral

494
00:19:30,720 --> 00:19:33,120
movement so number one got them

495
00:19:33,120 --> 00:19:35,360
introduced to like meanie cats number

496
00:19:35,360 --> 00:19:38,480
two got them using those credentials

497
00:19:38,480 --> 00:19:41,120
to understand past the hash techniques

498
00:19:41,120 --> 00:19:43,520
challenge number three then uh both

499
00:19:43,520 --> 00:19:45,120
three and four were really about

500
00:19:45,120 --> 00:19:46,960
identifying users within active

501
00:19:46,960 --> 00:19:48,080
directory

502
00:19:48,080 --> 00:19:50,160
seeing multiple logins

503
00:19:50,160 --> 00:19:52,640
uh and then being able to traverse

504
00:19:52,640 --> 00:19:54,320
between different users using pass the

505
00:19:54,320 --> 00:19:56,559
hack techniques ultimately to get to a

506
00:19:56,559 --> 00:19:59,360
more locked down server uh in the active

507
00:19:59,360 --> 00:20:01,360
directory environment again

508
00:20:01,360 --> 00:20:03,679
still using ntlm hash but transitioning

509
00:20:03,679 --> 00:20:05,360
user accounts

510
00:20:05,360 --> 00:20:06,799
so the challenge here is that you might

511
00:20:06,799 --> 00:20:09,039
notice every other slide had multiple

512
00:20:09,039 --> 00:20:11,600
attack paths

513
00:20:11,600 --> 00:20:13,360
this one doesn't because we accidentally

514
00:20:13,360 --> 00:20:14,480
forgot

515
00:20:14,480 --> 00:20:17,039
in the web app challenges the key vault

516
00:20:17,039 --> 00:20:19,200
was supposed to contain the user account

517
00:20:19,200 --> 00:20:21,840
password for the jump box into active

518
00:20:21,840 --> 00:20:23,200
directory so they could get to it

519
00:20:23,200 --> 00:20:24,960
through another path

520
00:20:24,960 --> 00:20:27,360
uh we just straight up forgot to

521
00:20:27,360 --> 00:20:30,080
implement that and so

522
00:20:30,080 --> 00:20:32,240
the attack chain just kind of ended

523
00:20:32,240 --> 00:20:34,240
there and we felt kind of bad after we

524
00:20:34,240 --> 00:20:36,080
realized nobody was solving this

525
00:20:36,080 --> 00:20:37,760
challenge here

526
00:20:37,760 --> 00:20:39,280
uh so now we'll turn it back over to

527
00:20:39,280 --> 00:20:41,039
qual and she's going to look at our

528
00:20:41,039 --> 00:20:45,080
challenges in more details

529
00:20:51,840 --> 00:20:55,520
all right making sure i'm unmute

530
00:20:56,720 --> 00:20:59,919
let's go into the details of making the

531
00:20:59,919 --> 00:21:02,159
challenges so from the design of our

532
00:21:02,159 --> 00:21:03,919
attack path we

533
00:21:03,919 --> 00:21:06,400
broke down the 25 official challenges

534
00:21:06,400 --> 00:21:09,280
into four main categories reconnaissance

535
00:21:09,280 --> 00:21:12,159
active directory azure devops and web

536
00:21:12,159 --> 00:21:13,760
app you can see the

537
00:21:13,760 --> 00:21:16,240
the breakdown is pretty balanced there

538
00:21:16,240 --> 00:21:18,159
there's also a bonus puzzle that we

539
00:21:18,159 --> 00:21:20,000
borrow from one of our teammates just

540
00:21:20,000 --> 00:21:21,520
for fun

541
00:21:21,520 --> 00:21:24,080
we wanted the challenges to be realistic

542
00:21:24,080 --> 00:21:26,000
and representative of a real world

543
00:21:26,000 --> 00:21:28,240
problem that we encountered in red team

544
00:21:28,240 --> 00:21:29,520
operations

545
00:21:29,520 --> 00:21:32,080
or even security incidents they also

546
00:21:32,080 --> 00:21:34,240
need it to be fun and engaging for our

547
00:21:34,240 --> 00:21:36,640
players so we designed them to be

548
00:21:36,640 --> 00:21:38,559
progressive where the more difficult

549
00:21:38,559 --> 00:21:40,799
challenges will only be revealed after

550
00:21:40,799 --> 00:21:44,080
the easier prerequisites are solved in

551
00:21:44,080 --> 00:21:45,440
the next slides

552
00:21:45,440 --> 00:21:48,000
i'll go over in details a select number

553
00:21:48,000 --> 00:21:50,080
of challenges that highlight the most

554
00:21:50,080 --> 00:21:52,480
pressing security issues and or

555
00:21:52,480 --> 00:21:54,320
highlight certain tools and techniques

556
00:21:54,320 --> 00:21:56,720
that we hope our players would remember

557
00:21:56,720 --> 00:21:59,200
after the ctf and hopefully they can be

558
00:21:59,200 --> 00:22:02,400
useful for you as well

559
00:22:03,600 --> 00:22:06,080
so as scott mentioned before the

560
00:22:06,080 --> 00:22:08,000
reconnaissance flags are extremely

561
00:22:08,000 --> 00:22:10,320
important to set the scope of the ctf

562
00:22:10,320 --> 00:22:12,960
similar to the scoping phase of any red

563
00:22:12,960 --> 00:22:14,960
team engagement so we don't just you

564
00:22:14,960 --> 00:22:17,200
know accidentally attack actual prop

565
00:22:17,200 --> 00:22:19,520
stuff we wanted the players to know the

566
00:22:19,520 --> 00:22:21,520
boundary of what is allowed these

567
00:22:21,520 --> 00:22:23,520
challenges was essentially the first and

568
00:22:23,520 --> 00:22:25,679
the only ones that players saw when they

569
00:22:25,679 --> 00:22:26,880
first started

570
00:22:26,880 --> 00:22:28,240
each of them will reveal their

571
00:22:28,240 --> 00:22:30,640
respective categories of challenges like

572
00:22:30,640 --> 00:22:34,640
adio ada and web app

573
00:22:34,880 --> 00:22:37,440
now i'll go into the remote code

574
00:22:37,440 --> 00:22:40,559
execution example um one of the

575
00:22:40,559 --> 00:22:42,080
four as

576
00:22:42,080 --> 00:22:44,960
one of the challenges in the azure dev

577
00:22:44,960 --> 00:22:46,320
uh flags

578
00:22:46,320 --> 00:22:48,159
this is a technique that helps solve at

579
00:22:48,159 --> 00:22:50,720
least three different challenges

580
00:22:50,720 --> 00:22:53,120
because we want because if our players

581
00:22:53,120 --> 00:22:55,679
leave the ctf with anything it is

582
00:22:55,679 --> 00:22:57,440
exactly this that we want them to

583
00:22:57,440 --> 00:23:00,000
remember and think more about securing

584
00:23:00,000 --> 00:23:02,960
the build and release pipelines

585
00:23:02,960 --> 00:23:04,880
so before we go into the details of the

586
00:23:04,880 --> 00:23:07,280
attack let's do a very quick overview of

587
00:23:07,280 --> 00:23:09,200
the software development and release

588
00:23:09,200 --> 00:23:12,159
lifecycle um so you know azure devops is

589
00:23:12,159 --> 00:23:14,320
kind of like github in a sense that it

590
00:23:14,320 --> 00:23:17,280
hosts a code and developers would write

591
00:23:17,280 --> 00:23:20,880
the code push that code to a repo

592
00:23:20,880 --> 00:23:22,640
then some build servers would pick that

593
00:23:22,640 --> 00:23:24,880
code up and start running pre-configured

594
00:23:24,880 --> 00:23:27,360
tasks to compile and test

595
00:23:27,360 --> 00:23:29,919
if all goes well that results in

596
00:23:29,919 --> 00:23:32,480
finished artifacts like executables and

597
00:23:32,480 --> 00:23:35,280
binaries that get released out to users

598
00:23:35,280 --> 00:23:37,520
or put up in product servers whatever

599
00:23:37,520 --> 00:23:40,559
you do with those things

600
00:23:42,880 --> 00:23:45,760
so here our target is the build pipeline

601
00:23:45,760 --> 00:23:47,279
in the red box

602
00:23:47,279 --> 00:23:49,200
specifically

603
00:23:49,200 --> 00:23:52,240
compromising dedicated build servers

604
00:23:52,240 --> 00:23:53,600
which should allow

605
00:23:53,600 --> 00:23:56,080
attackers to persist in any artifacts

606
00:23:56,080 --> 00:23:59,279
compiled in the future using those

607
00:23:59,279 --> 00:24:01,679
those build servers at a high level this

608
00:24:01,679 --> 00:24:04,159
attack leverages permissions to access

609
00:24:04,159 --> 00:24:06,640
and modify an existing build pipeline in

610
00:24:06,640 --> 00:24:08,720
azure devops and gain remote code

611
00:24:08,720 --> 00:24:11,440
execution on a dedicated build server

612
00:24:11,440 --> 00:24:13,679
with remote execution at the malicious

613
00:24:13,679 --> 00:24:15,760
actions are possible such as downloading

614
00:24:15,760 --> 00:24:17,559
and installing malware

615
00:24:17,559 --> 00:24:20,320
exfiltrating sensitive files running

616
00:24:20,320 --> 00:24:22,960
minicats adding malicious code to the

617
00:24:22,960 --> 00:24:24,960
compiled binaries before signing and

618
00:24:24,960 --> 00:24:27,360
releasing etc

619
00:24:27,360 --> 00:24:29,520
for our ctf this attack technique is one

620
00:24:29,520 --> 00:24:31,520
of the main ways to get into the ad

621
00:24:31,520 --> 00:24:33,760
environment since the build servers are

622
00:24:33,760 --> 00:24:36,240
domain joined to the ad domain and the

623
00:24:36,240 --> 00:24:38,320
task in the bill pipeline was

624
00:24:38,320 --> 00:24:40,240
running under a user's contacts with

625
00:24:40,240 --> 00:24:42,640
admin privileges on the bill server

626
00:24:42,640 --> 00:24:45,039
opening up more path of attacks for our

627
00:24:45,039 --> 00:24:48,000
ctf players

628
00:24:49,039 --> 00:24:51,600
with that

629
00:24:51,679 --> 00:24:54,400
in azure dev ops the player slash

630
00:24:54,400 --> 00:24:56,640
attacker can see on the left pane there

631
00:24:56,640 --> 00:24:58,159
that they can

632
00:24:58,159 --> 00:25:01,520
navigate to uh the recently drawn

633
00:25:01,520 --> 00:25:04,480
pipelines and they see that there's one

634
00:25:04,480 --> 00:25:06,559
that called build attacks pretty obvious

635
00:25:06,559 --> 00:25:09,760
names uh so if they right click on it um

636
00:25:09,760 --> 00:25:12,240
with like the settings uh icon there

637
00:25:12,240 --> 00:25:15,760
they can choose edit which will

638
00:25:15,760 --> 00:25:18,960
let them to an online code editor

639
00:25:18,960 --> 00:25:21,440
for the pipeline so in azure devops you

640
00:25:21,440 --> 00:25:24,400
can automate build pipelines by

641
00:25:24,400 --> 00:25:27,919
specifying the configurations in yamo

642
00:25:27,919 --> 00:25:29,679
which is saved as code in a git

643
00:25:29,679 --> 00:25:33,039
repository meaning you can manipulate it

644
00:25:33,039 --> 00:25:36,080
just as regular code so you can create a

645
00:25:36,080 --> 00:25:38,320
new git branch you can make your commit

646
00:25:38,320 --> 00:25:40,159
you can push your commit you can test

647
00:25:40,159 --> 00:25:40,960
run

648
00:25:40,960 --> 00:25:42,880
the pipeline

649
00:25:42,880 --> 00:25:44,880
without affecting the other legitimate

650
00:25:44,880 --> 00:25:47,600
branches but your malicious bill

651
00:25:47,600 --> 00:25:51,679
pipeline can still run on other on the

652
00:25:51,679 --> 00:25:56,039
build servers that you want to target

653
00:25:56,159 --> 00:25:56,960
so

654
00:25:56,960 --> 00:26:00,000
this is the change that we made to the

655
00:26:00,000 --> 00:26:02,799
pipeline we add a command line test that

656
00:26:02,799 --> 00:26:03,760
simply

657
00:26:03,760 --> 00:26:07,120
prints out the contents of the flag text

658
00:26:07,120 --> 00:26:09,520
file but you can easily imagine what

659
00:26:09,520 --> 00:26:11,279
other malicious thing we could do here

660
00:26:11,279 --> 00:26:12,960
like you know

661
00:26:12,960 --> 00:26:14,720
running mimi cats and

662
00:26:14,720 --> 00:26:18,000
all that other stuff

663
00:26:20,400 --> 00:26:23,600
so once you trigger the pipeline to run

664
00:26:23,600 --> 00:26:26,159
on a build machine you will find your

665
00:26:26,159 --> 00:26:27,279
own

666
00:26:27,279 --> 00:26:29,919
run right there again on the left pane

667
00:26:29,919 --> 00:26:32,320
on the pipelines and if you click on

668
00:26:32,320 --> 00:26:35,120
that and you go into the log section

669
00:26:35,120 --> 00:26:36,240
under main

670
00:26:36,240 --> 00:26:39,520
we can see the the all of the output for

671
00:26:39,520 --> 00:26:41,919
our command line task which has the flag

672
00:26:41,919 --> 00:26:44,720
right there in the red circle uh saying

673
00:26:44,720 --> 00:26:48,000
flag is nice remote core execution huh

674
00:26:48,000 --> 00:26:50,320
um so this challenge highlights the

675
00:26:50,320 --> 00:26:52,000
importance of locking down your build

676
00:26:52,000 --> 00:26:54,320
pipelines and co-repositories to only

677
00:26:54,320 --> 00:26:56,400
the people who need to work on it

678
00:26:56,400 --> 00:26:58,559
ideally build servers should be on an

679
00:26:58,559 --> 00:27:00,880
isolated network and wipes clean and

680
00:27:00,880 --> 00:27:03,600
reset after every bill but we understand

681
00:27:03,600 --> 00:27:06,640
that that is that could um

682
00:27:06,640 --> 00:27:09,520
that might not um applicable to

683
00:27:09,520 --> 00:27:13,679
everybody and so your mileage might vary

684
00:27:15,600 --> 00:27:18,399
next uh i'll go into the last challenge

685
00:27:18,399 --> 00:27:20,720
of the active directory

686
00:27:20,720 --> 00:27:23,200
category this challenge's goal is to

687
00:27:23,200 --> 00:27:25,279
dump out the flag on the vault machine

688
00:27:25,279 --> 00:27:27,039
which scott mentioned is like the last

689
00:27:27,039 --> 00:27:27,760
the

690
00:27:27,760 --> 00:27:30,720
the last and the most um difficult one

691
00:27:30,720 --> 00:27:34,080
to reach in the 80 environment

692
00:27:34,080 --> 00:27:36,399
it can only be accessed from the gem box

693
00:27:36,399 --> 00:27:39,840
that was previously compromised so i'm

694
00:27:39,840 --> 00:27:43,120
showing here kind of the winrm

695
00:27:43,120 --> 00:27:44,640
window and

696
00:27:44,640 --> 00:27:47,360
title say in package so why those tools

697
00:27:47,360 --> 00:27:49,760
you ask would an attacker just you know

698
00:27:49,760 --> 00:27:52,240
take the credentials rdp into the

699
00:27:52,240 --> 00:27:56,240
machines make life just easy well yeah

700
00:27:56,240 --> 00:27:59,520
realistically yes but it's a light ctf

701
00:27:59,520 --> 00:28:00,399
um

702
00:28:00,399 --> 00:28:03,120
rdp is not exactly stable for a large

703
00:28:03,120 --> 00:28:05,440
number of people and we also wanted to

704
00:28:05,440 --> 00:28:07,600
introduce our players to other tools

705
00:28:07,600 --> 00:28:10,159
available externally in the industry our

706
00:28:10,159 --> 00:28:12,559
players are also very nice in that they

707
00:28:12,559 --> 00:28:15,039
follow our instructions not to change

708
00:28:15,039 --> 00:28:17,360
the passwords of the user since the

709
00:28:17,360 --> 00:28:19,919
passwords are actually flags

710
00:28:19,919 --> 00:28:22,159
which we really appreciate

711
00:28:22,159 --> 00:28:24,080
our players

712
00:28:24,080 --> 00:28:26,080
so at this point the player slash

713
00:28:26,080 --> 00:28:29,840
attacker should already have this user's

714
00:28:29,840 --> 00:28:31,279
which they can use to create a

715
00:28:31,279 --> 00:28:33,360
powershell session under that user's

716
00:28:33,360 --> 00:28:37,760
context connecting to the gem box

717
00:28:39,200 --> 00:28:41,520
so i have put the command there so we

718
00:28:41,520 --> 00:28:44,159
showcase the use of impacted here

719
00:28:44,159 --> 00:28:46,080
impacted is a collection of python

720
00:28:46,080 --> 00:28:47,679
classes for working with network

721
00:28:47,679 --> 00:28:49,600
protocols you can look it up

722
00:28:49,600 --> 00:28:51,520
it's open source

723
00:28:51,520 --> 00:28:53,360
we don't want people to download

724
00:28:53,360 --> 00:28:55,120
technically malware on their own

725
00:28:55,120 --> 00:28:57,760
machines so please don't download it on

726
00:28:57,760 --> 00:29:00,240
your own machines use a vm um so we

727
00:29:00,240 --> 00:29:02,320
provided all the tools needed like mimic

728
00:29:02,320 --> 00:29:04,240
ads and impacted on the compromised

729
00:29:04,240 --> 00:29:06,720
machines and the player slash attacker

730
00:29:06,720 --> 00:29:08,880
can just use them so with the correct

731
00:29:08,880 --> 00:29:12,080
syntax to invoke the impacted ps exact

732
00:29:12,080 --> 00:29:14,159
binary the players gain the final flag

733
00:29:14,159 --> 00:29:16,640
of id

734
00:29:19,600 --> 00:29:22,240
alright so now let's move on to web app

735
00:29:22,240 --> 00:29:24,559
flags we keep

736
00:29:24,559 --> 00:29:26,640
the challenges in this category is

737
00:29:26,640 --> 00:29:28,080
fairly simple

738
00:29:28,080 --> 00:29:29,840
the players just need to pay a little

739
00:29:29,840 --> 00:29:32,080
attention to the details of the network

740
00:29:32,080 --> 00:29:34,960
traffic so for example if they open just

741
00:29:34,960 --> 00:29:36,799
they don't even need special tools they

742
00:29:36,799 --> 00:29:39,039
just need to open developer tools that

743
00:29:39,039 --> 00:29:40,720
is provided with

744
00:29:40,720 --> 00:29:43,039
almost all the browsers to see the

745
00:29:43,039 --> 00:29:45,520
requests and responses from the web app

746
00:29:45,520 --> 00:29:48,480
or easily find a flag in the header

747
00:29:48,480 --> 00:29:51,679
notice a little patent going on with

748
00:29:51,679 --> 00:29:53,520
querying the files

749
00:29:53,520 --> 00:29:55,200
which will help them download other

750
00:29:55,200 --> 00:29:57,120
files on the server system such as

751
00:29:57,120 --> 00:29:59,279
appsettings.json

752
00:29:59,279 --> 00:30:01,520
so similarly if they inspect the cookies

753
00:30:01,520 --> 00:30:03,919
there's an interesting looking base64

754
00:30:03,919 --> 00:30:06,240
encoded string in a session id

755
00:30:06,240 --> 00:30:08,960
containing a flag

756
00:30:08,960 --> 00:30:11,440
but let's go into like the best and the

757
00:30:11,440 --> 00:30:13,840
awesome challenge in the web app

758
00:30:13,840 --> 00:30:17,279
category regarding oauth this is a token

759
00:30:17,279 --> 00:30:20,320
modification attack the point is

760
00:30:20,320 --> 00:30:22,720
as a developer please do not

761
00:30:22,720 --> 00:30:24,000
return true

762
00:30:24,000 --> 00:30:27,520
blanket in a token validation function

763
00:30:27,520 --> 00:30:29,919
and so here we have an admin page that

764
00:30:29,919 --> 00:30:32,000
say you are not an admin please log in

765
00:30:32,000 --> 00:30:34,080
as admin to see this page

766
00:30:34,080 --> 00:30:36,720
and so we can open up the developer

767
00:30:36,720 --> 00:30:39,039
tools again and inspect the network to

768
00:30:39,039 --> 00:30:41,360
copy and analyze the bearer token in the

769
00:30:41,360 --> 00:30:43,918
request

770
00:30:44,080 --> 00:30:47,600
so here is uh you can use any jwt

771
00:30:47,600 --> 00:30:50,480
decoder to decode the token

772
00:30:50,480 --> 00:30:52,240
like on the left there you can kind of

773
00:30:52,240 --> 00:30:54,640
see like a whole bunch of information

774
00:30:54,640 --> 00:30:56,240
what we're interested in is the

775
00:30:56,240 --> 00:30:58,799
preferred username field

776
00:30:58,799 --> 00:31:00,799
and we want that for you to say admin at

777
00:31:00,799 --> 00:31:02,399
microsoft.com

778
00:31:02,399 --> 00:31:05,519
so we put admin at microsoft.com there

779
00:31:05,519 --> 00:31:08,720
um re-encode the token with the rest of

780
00:31:08,720 --> 00:31:10,159
the information

781
00:31:10,159 --> 00:31:12,399
and then pass it along in a new request

782
00:31:12,399 --> 00:31:15,200
to the web app in web suite this tricks

783
00:31:15,200 --> 00:31:17,279
the web app into thinking will actually

784
00:31:17,279 --> 00:31:19,919
have a valid admin token and gives us

785
00:31:19,919 --> 00:31:22,320
the flag for this challenge flag who

786
00:31:22,320 --> 00:31:24,550
need token validation anyways

787
00:31:24,550 --> 00:31:27,039
[Music]

788
00:31:27,039 --> 00:31:29,600
all right so you know that that was we

789
00:31:29,600 --> 00:31:31,039
planned

790
00:31:31,039 --> 00:31:32,960
here's what actually happened three

791
00:31:32,960 --> 00:31:36,000
houses in and things are on fire um what

792
00:31:36,000 --> 00:31:38,399
we've planned was for them to use the

793
00:31:38,399 --> 00:31:40,880
existing pipeline to dump credentials

794
00:31:40,880 --> 00:31:43,120
get the personal access token move on to

795
00:31:43,120 --> 00:31:45,039
the next challenges

796
00:31:45,039 --> 00:31:47,360
but we started getting pings from our

797
00:31:47,360 --> 00:31:49,039
co-workers saying like hey

798
00:31:49,039 --> 00:31:52,640
nothing works so we logged in to the

799
00:31:52,640 --> 00:31:56,399
azure devops instance of the ctf and

800
00:31:56,399 --> 00:31:59,200
there was hundreds of build pipelines

801
00:31:59,200 --> 00:32:02,399
copies just all over the place so

802
00:32:02,399 --> 00:32:04,799
what we didn't plan was that people was

803
00:32:04,799 --> 00:32:06,960
making copies of the original pipeline

804
00:32:06,960 --> 00:32:09,600
and so if you make copies the secrets

805
00:32:09,600 --> 00:32:11,840
didn't go with them it doesn't contain

806
00:32:11,840 --> 00:32:14,320
what they need to move on and so they

807
00:32:14,320 --> 00:32:16,480
complained to us like nothing worked so

808
00:32:16,480 --> 00:32:18,640
we have to clean that up and then a few

809
00:32:18,640 --> 00:32:21,039
people actually got through and then we

810
00:32:21,039 --> 00:32:23,679
realized oh there's there were vultures

811
00:32:23,679 --> 00:32:25,760
just watching the successful pipeline

812
00:32:25,760 --> 00:32:28,000
runs the grab the locks containing the

813
00:32:28,000 --> 00:32:31,440
flags and just you know steal the the

814
00:32:31,440 --> 00:32:33,039
it just didn't do the work to just steal

815
00:32:33,039 --> 00:32:35,200
the flags and so we we built a cool

816
00:32:35,200 --> 00:32:37,200
script to just automatically delete

817
00:32:37,200 --> 00:32:40,080
recent pipelines runs every so often um

818
00:32:40,080 --> 00:32:42,080
and so that our bill pipelines can kind

819
00:32:42,080 --> 00:32:44,559
of come back to a clean slate

820
00:32:44,559 --> 00:32:46,640
um there's a lot of cool lessons learned

821
00:32:46,640 --> 00:32:47,519
um

822
00:32:47,519 --> 00:32:49,840
in here and really fun anecdotes for you

823
00:32:49,840 --> 00:32:54,320
know the first version of this event

824
00:32:54,720 --> 00:32:56,480
here's something to be

825
00:32:56,480 --> 00:32:57,600
um

826
00:32:57,600 --> 00:33:00,080
to do to pay attention to we kind of

827
00:33:00,080 --> 00:33:02,320
have mentioned most of these things uh

828
00:33:02,320 --> 00:33:05,120
throughout the presentation um our main

829
00:33:05,120 --> 00:33:07,760
concerns was that people would download

830
00:33:07,760 --> 00:33:08,840
tools

831
00:33:08,840 --> 00:33:12,640
unnecessarily and trigger our core

832
00:33:12,640 --> 00:33:15,440
network security alerts and the ctf

833
00:33:15,440 --> 00:33:17,039
might open a back door into the

834
00:33:17,039 --> 00:33:19,440
corporate environment so we isolated

835
00:33:19,440 --> 00:33:21,279
everything in azure

836
00:33:21,279 --> 00:33:23,519
we provide other necessity necessary

837
00:33:23,519 --> 00:33:25,440
tools on the ctf machines and we

838
00:33:25,440 --> 00:33:27,600
explicitly tell our players so so they

839
00:33:27,600 --> 00:33:29,519
don't need to to go out and download

840
00:33:29,519 --> 00:33:31,440
malware

841
00:33:31,440 --> 00:33:33,760
we set up conditional access so not just

842
00:33:33,760 --> 00:33:36,000
any random ip can access our ctf

843
00:33:36,000 --> 00:33:38,320
environment

844
00:33:38,320 --> 00:33:40,080
and we take turns being on call to

845
00:33:40,080 --> 00:33:42,399
troubleshoot any problems that arise

846
00:33:42,399 --> 00:33:44,240
like you know the fires in the last

847
00:33:44,240 --> 00:33:45,600
slide

848
00:33:45,600 --> 00:33:47,840
we also um

849
00:33:47,840 --> 00:33:52,000
adopted a lyfno one behind policy

850
00:33:52,000 --> 00:33:53,760
so for the four weeks

851
00:33:53,760 --> 00:33:56,320
you know a month duration of the ctf we

852
00:33:56,320 --> 00:33:59,200
provided a weekly write-up

853
00:33:59,200 --> 00:34:01,519
that just you know gradually open up

854
00:34:01,519 --> 00:34:03,519
more and more challenges for people so

855
00:34:03,519 --> 00:34:05,840
they can stay engaged and they can

856
00:34:05,840 --> 00:34:08,399
follow along and not get too stuck

857
00:34:08,399 --> 00:34:11,520
into one into any single

858
00:34:11,520 --> 00:34:13,918
problem

859
00:34:15,199 --> 00:34:18,639
the overall feedback from our event was

860
00:34:18,639 --> 00:34:19,760
really

861
00:34:19,760 --> 00:34:22,000
positive which makes it would make us

862
00:34:22,000 --> 00:34:24,800
very happy um and we

863
00:34:24,800 --> 00:34:26,480
and and we're just really

864
00:34:26,480 --> 00:34:28,800
happy in general with how it turns out

865
00:34:28,800 --> 00:34:31,520
very encouraging for the pilot event

866
00:34:31,520 --> 00:34:33,760
for the pilot version of this event

867
00:34:33,760 --> 00:34:35,440
we plan to iterate this every year and

868
00:34:35,440 --> 00:34:37,119
hopefully make it better

869
00:34:37,119 --> 00:34:38,719
we even have some

870
00:34:38,719 --> 00:34:41,520
person working on the adl team who play

871
00:34:41,520 --> 00:34:44,399
our adl challenges and they enjoyed it

872
00:34:44,399 --> 00:34:46,560
so much they were like you know we

873
00:34:46,560 --> 00:34:48,879
should grab some the you know the other

874
00:34:48,879 --> 00:34:52,800
programs um running and uh let us run

875
00:34:52,800 --> 00:34:53,839
the show

876
00:34:53,839 --> 00:34:56,239
with this with the ado security

877
00:34:56,239 --> 00:34:59,599
um which is really encouraging and uh

878
00:34:59,599 --> 00:35:03,000
fun to hear

879
00:35:03,280 --> 00:35:05,920
we have some some

880
00:35:05,920 --> 00:35:08,480
statistics here for the ctf the top

881
00:35:08,480 --> 00:35:12,160
chart is the timeline of the top 10

882
00:35:12,160 --> 00:35:13,359
users

883
00:35:13,359 --> 00:35:15,040
of the ctf

884
00:35:15,040 --> 00:35:18,240
as you can see here kind of the

885
00:35:18,240 --> 00:35:21,359
um the fastest uses is like two days um

886
00:35:21,359 --> 00:35:25,599
and and he solved all of the problems um

887
00:35:25,599 --> 00:35:27,520
uh the bottom chart is the soft

888
00:35:27,520 --> 00:35:29,920
percentages per challenge

889
00:35:29,920 --> 00:35:32,160
of the main challenges uh testing

890
00:35:32,160 --> 00:35:33,760
doesn't care and bonus challenges

891
00:35:33,760 --> 00:35:34,960
doesn't count

892
00:35:34,960 --> 00:35:37,680
but you know it but you know for the 25

893
00:35:37,680 --> 00:35:40,800
challenges uh the main ones um there's

894
00:35:40,800 --> 00:35:45,000
at least one solve

895
00:35:45,680 --> 00:35:47,760
here's some more stats we have three

896
00:35:47,760 --> 00:35:48,960
people

897
00:35:48,960 --> 00:35:50,960
working on the ctf

898
00:35:50,960 --> 00:35:52,880
each of us take about 10 hours building

899
00:35:52,880 --> 00:35:54,880
the different components of the ctf and

900
00:35:54,880 --> 00:35:57,280
then we kind of glue it together

901
00:35:57,280 --> 00:35:58,560
we have

902
00:35:58,560 --> 00:36:01,280
36 registered players which is kind of

903
00:36:01,280 --> 00:36:03,599
within the expected range that we we

904
00:36:03,599 --> 00:36:05,119
were looking for

905
00:36:05,119 --> 00:36:07,520
and 35 of them completed at least one

906
00:36:07,520 --> 00:36:10,560
challenge which is really fun

907
00:36:10,560 --> 00:36:12,800
and three players completed all 25

908
00:36:12,800 --> 00:36:15,280
challenges

909
00:36:16,800 --> 00:36:19,440
so what's next um if you're thinking of

910
00:36:19,440 --> 00:36:22,240
making your own uh ctf for your

911
00:36:22,240 --> 00:36:24,560
organizations uh here's some questions

912
00:36:24,560 --> 00:36:27,040
to consider like what is the

913
00:36:27,040 --> 00:36:29,040
technologies your co-workers that are

914
00:36:29,040 --> 00:36:31,760
already familiar with and working with

915
00:36:31,760 --> 00:36:33,520
like source control

916
00:36:33,520 --> 00:36:35,760
corporate networks firewalls cloud

917
00:36:35,760 --> 00:36:37,839
infrastructures

918
00:36:37,839 --> 00:36:40,079
and what are the security implications

919
00:36:40,079 --> 00:36:42,880
of those what security incidents have

920
00:36:42,880 --> 00:36:45,119
your organization encountered or wanted

921
00:36:45,119 --> 00:36:46,560
to prepare for

922
00:36:46,560 --> 00:36:48,720
does your organization already have like

923
00:36:48,720 --> 00:36:50,800
theory-based cybersecurity just that

924
00:36:50,800 --> 00:36:52,839
just needs like a hands-on

925
00:36:52,839 --> 00:36:55,760
component with it so that to make it fun

926
00:36:55,760 --> 00:36:58,320
and practical do you have a set of tools

927
00:36:58,320 --> 00:37:00,160
techniques and procedures you want to

928
00:37:00,160 --> 00:37:01,280
share

929
00:37:01,280 --> 00:37:03,520
regarding security and help your

930
00:37:03,520 --> 00:37:05,760
co-workers understand the security

931
00:37:05,760 --> 00:37:07,599
implications

932
00:37:07,599 --> 00:37:09,920
so for us we really wanted to automate

933
00:37:09,920 --> 00:37:13,280
the process of building the ctf uh we

934
00:37:13,280 --> 00:37:15,040
were experimenting with things like

935
00:37:15,040 --> 00:37:18,000
terraform and daca to really speed up

936
00:37:18,000 --> 00:37:19,280
the process of spinning up

937
00:37:19,280 --> 00:37:20,960
infrastructures and making the

938
00:37:20,960 --> 00:37:23,440
challenges

939
00:37:23,440 --> 00:37:25,680
if you're already making your enterprise

940
00:37:25,680 --> 00:37:28,320
ctf please reach out and talk with us

941
00:37:28,320 --> 00:37:30,560
our twitter handle is in the slide we'll

942
00:37:30,560 --> 00:37:31,599
share it

943
00:37:31,599 --> 00:37:34,079
after our presentation

944
00:37:34,079 --> 00:37:37,040
on shed or on twitter um our team is

945
00:37:37,040 --> 00:37:39,280
also hiring so please reach out to the

946
00:37:39,280 --> 00:37:42,160
email address there um

947
00:37:42,160 --> 00:37:44,720
and send in your resume

948
00:37:44,720 --> 00:37:47,440
and i believe it's time for q a thank

949
00:37:47,440 --> 00:37:51,839
you for tuning in and listen to our talk

950
00:37:54,160 --> 00:37:56,079
that was really awesome thank you so

951
00:37:56,079 --> 00:37:58,320
much for presenting um

952
00:37:58,320 --> 00:38:01,040
i only see that we have one question

953
00:38:01,040 --> 00:38:04,240
chad that scott has answered but maybe

954
00:38:04,240 --> 00:38:06,320
qua would like to you know contribute

955
00:38:06,320 --> 00:38:08,400
her perspective on this as well

956
00:38:08,400 --> 00:38:10,480
so the question is do you find the

957
00:38:10,480 --> 00:38:12,560
people you train remember the skills

958
00:38:12,560 --> 00:38:14,960
longer uh when they do it as part of the

959
00:38:14,960 --> 00:38:17,200
tcf

960
00:38:17,200 --> 00:38:18,480
um

961
00:38:18,480 --> 00:38:22,240
i certainly believe so um it's uh

962
00:38:22,240 --> 00:38:24,160
because these are the people we actually

963
00:38:24,160 --> 00:38:28,079
work with um almost on a daily basis um

964
00:38:28,079 --> 00:38:30,560
they i we can see them really apply the

965
00:38:30,560 --> 00:38:33,280
skills that they have gained

966
00:38:33,280 --> 00:38:36,000
in our day-to-day work and

967
00:38:36,000 --> 00:38:38,079
because we design the challenges to you

968
00:38:38,079 --> 00:38:40,400
know fit in with all the technologies we

969
00:38:40,400 --> 00:38:44,079
we work with as well um it's it's it's

970
00:38:44,079 --> 00:38:46,240
very encouraging to see all that results

971
00:38:46,240 --> 00:38:48,000
coming back to us

972
00:38:48,000 --> 00:38:49,520
that's really awesome

973
00:38:49,520 --> 00:38:52,000
um i don't see any other question here

974
00:38:52,000 --> 00:38:54,400
unless i missed it um let's give it 30

975
00:38:54,400 --> 00:38:56,320
seconds so if people have questions they

976
00:38:56,320 --> 00:38:59,880
can send it in

977
00:39:03,920 --> 00:39:05,680
yeah the audience really love your talk

978
00:39:05,680 --> 00:39:08,079
thank you so much for coming

979
00:39:08,079 --> 00:39:09,359
thank you

980
00:39:09,359 --> 00:39:13,560
thanks for having us a lot of fun

981
00:39:14,079 --> 00:39:16,240
all right if there's no questions um

982
00:39:16,240 --> 00:39:18,320
let's wrap it up thank you so much for

983
00:39:18,320 --> 00:39:22,320
coming and uh i'll see you guys around

984
00:39:22,320 --> 00:39:26,240
oh there's one more popping up uh

985
00:39:26,240 --> 00:39:28,320
do you think this would work with

986
00:39:28,320 --> 00:39:31,599
university students

987
00:39:33,359 --> 00:39:34,640
um

988
00:39:34,640 --> 00:39:37,280
okay i'll go first um

989
00:39:37,280 --> 00:39:39,200
i think i think it will be

990
00:39:39,200 --> 00:39:41,520
a good kind of introduction

991
00:39:41,520 --> 00:39:43,280
to corporate

992
00:39:43,280 --> 00:39:46,560
cyber security um set up for university

993
00:39:46,560 --> 00:39:47,599
students

994
00:39:47,599 --> 00:39:50,720
um in my experience well i graduated

995
00:39:50,720 --> 00:39:53,040
college like four years ago like i kind

996
00:39:53,040 --> 00:39:54,880
of remember what happened in college

997
00:39:54,880 --> 00:39:57,280
maybe um

998
00:39:57,280 --> 00:40:00,480
i i yeah back in college i have no idea

999
00:40:00,480 --> 00:40:02,320
how corporate networks are set up i

1000
00:40:02,320 --> 00:40:04,480
don't know how security was set up we

1001
00:40:04,480 --> 00:40:07,040
have no real world experience of how

1002
00:40:07,040 --> 00:40:10,880
security incidents are solved or how we

1003
00:40:10,880 --> 00:40:13,520
we improve the security awareness of the

1004
00:40:13,520 --> 00:40:16,400
people in an organization and so you

1005
00:40:16,400 --> 00:40:18,560
know having a ctf like this

1006
00:40:18,560 --> 00:40:21,280
could be a really great introduction

1007
00:40:21,280 --> 00:40:24,079
for university students to have more

1008
00:40:24,079 --> 00:40:26,160
hands-on real-world

1009
00:40:26,160 --> 00:40:28,720
security experience when they enter the

1010
00:40:28,720 --> 00:40:30,880
workforce

1011
00:40:30,880 --> 00:40:33,200
so i remember that the ctf was

1012
00:40:33,200 --> 00:40:36,560
participated by 36 people so were these

1013
00:40:36,560 --> 00:40:39,280
you know folks in security and if so do

1014
00:40:39,280 --> 00:40:41,119
you guys have plans to expand it to you

1015
00:40:41,119 --> 00:40:44,640
know general software engineers as well

1016
00:40:44,640 --> 00:40:46,640
so yeah so so

1017
00:40:46,640 --> 00:40:50,000
among our community of southern academy

1018
00:40:50,000 --> 00:40:52,079
participants

1019
00:40:52,079 --> 00:40:55,040
these people include software engineers

1020
00:40:55,040 --> 00:40:57,440
and general devs who have an interest in

1021
00:40:57,440 --> 00:41:00,079
security but without much security

1022
00:41:00,079 --> 00:41:01,920
experience and

1023
00:41:01,920 --> 00:41:04,720
we we designed this so that they can

1024
00:41:04,720 --> 00:41:07,760
kind of watch the recorded sessions that

1025
00:41:07,760 --> 00:41:10,160
we had before to gain the necessary

1026
00:41:10,160 --> 00:41:13,119
skills and then bring it to our ctf and

1027
00:41:13,119 --> 00:41:15,599
we have a whole month for the ctf to

1028
00:41:15,599 --> 00:41:18,480
happen and so they have all that time

1029
00:41:18,480 --> 00:41:21,200
if they wanted to really dig into it and

1030
00:41:21,200 --> 00:41:23,119
really do the skills because they they

1031
00:41:23,119 --> 00:41:26,560
have no they it like a month is a

1032
00:41:26,560 --> 00:41:27,520
fairly

1033
00:41:27,520 --> 00:41:29,119
good enough time

1034
00:41:29,119 --> 00:41:30,720
span to

1035
00:41:30,720 --> 00:41:33,040
you know not rush yourself and getting

1036
00:41:33,040 --> 00:41:36,400
frustrated if something doesn't work

1037
00:41:36,400 --> 00:41:38,319
yeah i totally understand that for like

1038
00:41:38,319 --> 00:41:42,240
36 hours ctf you often get out halfway

1039
00:41:42,240 --> 00:41:45,520
you just want to sleep and eat

1040
00:41:45,520 --> 00:41:49,040
scotsy have anything to add to that uh

1041
00:41:49,040 --> 00:41:50,880
no i think you hit it perfectly i think

1042
00:41:50,880 --> 00:41:52,480
i would love to see more like

1043
00:41:52,480 --> 00:41:55,040
university-level ctfs focus on actual

1044
00:41:55,040 --> 00:41:56,319
replication

1045
00:41:56,319 --> 00:41:58,000
uh i've from what i've seen and i don't

1046
00:41:58,000 --> 00:41:59,760
have a college background but a lot of

1047
00:41:59,760 --> 00:42:00,640
the

1048
00:42:00,640 --> 00:42:02,640
ctfs that come out from the collegiate

1049
00:42:02,640 --> 00:42:05,119
world are very kind of puzzle based

1050
00:42:05,119 --> 00:42:07,599
crypto challenges style things which are

1051
00:42:07,599 --> 00:42:09,040
really cool but they're not

1052
00:42:09,040 --> 00:42:10,880
representative of what somebody kind of

1053
00:42:10,880 --> 00:42:12,960
walking into cyber security necessarily

1054
00:42:12,960 --> 00:42:13,680
would

1055
00:42:13,680 --> 00:42:15,839
uh would engage with and that was the

1056
00:42:15,839 --> 00:42:19,839
focus of our our ctf was let's take the

1057
00:42:19,839 --> 00:42:22,240
day-to-day actual working stuff and

1058
00:42:22,240 --> 00:42:24,480
build the ctf around it so i would love

1059
00:42:24,480 --> 00:42:27,599
to see universities recommend or start

1060
00:42:27,599 --> 00:42:29,200
kind of doing the more actual

1061
00:42:29,200 --> 00:42:31,440
representative

1062
00:42:31,440 --> 00:42:33,200
ctf challenges

1063
00:42:33,200 --> 00:42:35,359
it was really awesome um you folks

1064
00:42:35,359 --> 00:42:37,680
mentioned a twitter name before where

1065
00:42:37,680 --> 00:42:40,560
can people find it

1066
00:42:41,280 --> 00:42:42,839
alright well we'll post that in the

1067
00:42:42,839 --> 00:42:45,359
comments awesome

1068
00:42:45,359 --> 00:42:46,640
yep

1069
00:42:46,640 --> 00:42:50,240
uh and i see yes uh the slides will be

1070
00:42:50,240 --> 00:42:51,040
uh

1071
00:42:51,040 --> 00:42:52,160
available

1072
00:42:52,160 --> 00:42:55,760
not yet sure where claw

1073
00:42:55,760 --> 00:42:58,720
i i think have the

1074
00:42:58,720 --> 00:43:01,040
ability to upload files and well what

1075
00:43:01,040 --> 00:43:03,520
generate a pdf and upload it there if

1076
00:43:03,520 --> 00:43:07,280
not well we'll post it on our twitters

1077
00:43:07,520 --> 00:43:09,839
all right thank you so much there's no

1078
00:43:09,839 --> 00:43:13,279
more questions rolling in

1079
00:43:13,440 --> 00:43:15,040
thank you for coming and i'm excited for

1080
00:43:15,040 --> 00:43:16,960
the next speaker

1081
00:43:16,960 --> 00:43:18,720
awesome thank you all so much for tuning

1082
00:43:18,720 --> 00:43:21,040
in and thanks diana initiative for

1083
00:43:21,040 --> 00:43:22,400
including us

1084
00:43:22,400 --> 00:43:26,359
yep thank you

