1
00:00:06,480 --> 00:00:08,800
good morning good afternoon good evening

2
00:00:08,800 --> 00:00:11,759
good day everybody uh i'm tracy and i'd

3
00:00:11,759 --> 00:00:13,599
like to thank our sponsors that you can

4
00:00:13,599 --> 00:00:16,560
see here for making this event possible

5
00:00:16,560 --> 00:00:17,680
after this

6
00:00:17,680 --> 00:00:19,520
event and a break

7
00:00:19,520 --> 00:00:21,680
please tune in for

8
00:00:21,680 --> 00:00:24,480
monitoring data privacy development

9
00:00:24,480 --> 00:00:28,080
through open source intelligence

10
00:00:29,760 --> 00:00:31,599
now

11
00:00:31,599 --> 00:00:35,280
i'd like to introduce you to a new modi

12
00:00:35,280 --> 00:00:39,280
speaking to us on pen testing

13
00:00:39,440 --> 00:00:42,320
android applications anew is a cyber

14
00:00:42,320 --> 00:00:44,239
security enthusiast with four years

15
00:00:44,239 --> 00:00:46,079
experience performing vulnerability

16
00:00:46,079 --> 00:00:48,800
assessments and pen testing on various

17
00:00:48,800 --> 00:00:50,879
web and mobile applications

18
00:00:50,879 --> 00:00:54,160
anew floor is yours

19
00:00:54,160 --> 00:00:55,840
hi thank you tracy

20
00:00:55,840 --> 00:00:59,840
so i just shared my screen

21
00:01:08,240 --> 00:01:10,320
all right everyone good morning so today

22
00:01:10,320 --> 00:01:12,000
i'm gonna be talking about how to get

23
00:01:12,000 --> 00:01:13,920
started with android applications pen

24
00:01:13,920 --> 00:01:15,200
testing

25
00:01:15,200 --> 00:01:17,280
so let's begin

26
00:01:17,280 --> 00:01:19,680
the agenda for today is going to be what

27
00:01:19,680 --> 00:01:21,920
and why android application security the

28
00:01:21,920 --> 00:01:24,320
setup required and some pen testing

29
00:01:24,320 --> 00:01:26,159
scenarios

30
00:01:26,159 --> 00:01:28,320
so coming to the why android application

31
00:01:28,320 --> 00:01:30,840
security so according to the site

32
00:01:30,840 --> 00:01:33,759
bankmyself.com 6.5 billion people own a

33
00:01:33,759 --> 00:01:36,320
smartphone now that's a huge number and

34
00:01:36,320 --> 00:01:38,960
as of january 2022 android accounts for

35
00:01:38,960 --> 00:01:40,079
69

36
00:01:40,079 --> 00:01:41,920
of the global market share

37
00:01:41,920 --> 00:01:45,119
so even though ios is more popular in

38
00:01:45,119 --> 00:01:48,079
u.s android still holds a huge market in

39
00:01:48,079 --> 00:01:50,640
the global market so we really need to

40
00:01:50,640 --> 00:01:53,040
concentrate on android as well

41
00:01:53,040 --> 00:01:54,880
next companies want to rush to the

42
00:01:54,880 --> 00:01:57,280
market with their products so what this

43
00:01:57,280 --> 00:01:59,200
does is a lot of vulnerabilities are

44
00:01:59,200 --> 00:02:00,880
still present which can lead to the

45
00:02:00,880 --> 00:02:03,200
compromise of private and confidential

46
00:02:03,200 --> 00:02:05,360
information of the users

47
00:02:05,360 --> 00:02:07,439
after that users tend to save a lot of

48
00:02:07,439 --> 00:02:10,000
personal information on their devices so

49
00:02:10,000 --> 00:02:12,480
be it screenshots photos

50
00:02:12,480 --> 00:02:15,120
fitness apps your heartbeat is recorded

51
00:02:15,120 --> 00:02:17,840
you have your work applications you have

52
00:02:17,840 --> 00:02:19,680
other applications that is always

53
00:02:19,680 --> 00:02:21,920
logging your data so you have a ton of

54
00:02:21,920 --> 00:02:24,640
information on your uh device

55
00:02:24,640 --> 00:02:26,640
then mobile phones don't have the same

56
00:02:26,640 --> 00:02:29,360
security as web applications for example

57
00:02:29,360 --> 00:02:32,000
think about four digit pins or no pins

58
00:02:32,000 --> 00:02:34,160
at all think about a fingerprint scanner

59
00:02:34,160 --> 00:02:36,560
maybe it is not enabled also you tend to

60
00:02:36,560 --> 00:02:38,480
carry your mobile phones everywhere you

61
00:02:38,480 --> 00:02:40,720
tend to carry to the marketplace to the

62
00:02:40,720 --> 00:02:43,599
gym every place you carry it so it poses

63
00:02:43,599 --> 00:02:45,360
a lot of risk to your mobile device

64
00:02:45,360 --> 00:02:48,160
because it can get lost and uh and all

65
00:02:48,160 --> 00:02:50,239
that data is easily accessible to a

66
00:02:50,239 --> 00:02:51,599
hacker

67
00:02:51,599 --> 00:02:54,239
so now we know why it is important

68
00:02:54,239 --> 00:02:56,879
moving on to what so what is android pen

69
00:02:56,879 --> 00:02:58,800
testing android pen testing is the

70
00:02:58,800 --> 00:03:00,239
process of finding security

71
00:03:00,239 --> 00:03:02,000
vulnerabilities and trying to attack the

72
00:03:02,000 --> 00:03:04,080
android app by using various methods and

73
00:03:04,080 --> 00:03:07,120
tools so my slides will today be divided

74
00:03:07,120 --> 00:03:09,200
into two parts that is the dynamic

75
00:03:09,200 --> 00:03:11,599
analysis and the static analysis for

76
00:03:11,599 --> 00:03:13,599
dynamic analysis so what is it it's

77
00:03:13,599 --> 00:03:15,440
testing the application while it is

78
00:03:15,440 --> 00:03:17,599
running we'll be capturing the request

79
00:03:17,599 --> 00:03:19,920
in response live and modifying the data

80
00:03:19,920 --> 00:03:21,599
on the fly

81
00:03:21,599 --> 00:03:24,239
coming to the static analysis part uh

82
00:03:24,239 --> 00:03:27,200
this deals with decompiling the apk file

83
00:03:27,200 --> 00:03:29,200
we will be examining the code and

84
00:03:29,200 --> 00:03:30,959
checking the manifest file don't worry

85
00:03:30,959 --> 00:03:32,560
if you don't know what a manifest file

86
00:03:32,560 --> 00:03:35,200
is right now we'll be seeing it later on

87
00:03:35,200 --> 00:03:36,159
okay

88
00:03:36,159 --> 00:03:39,200
next coming to the tools required so

89
00:03:39,200 --> 00:03:41,120
these are the five tools that we will be

90
00:03:41,120 --> 00:03:43,280
looking at today that is android studio

91
00:03:43,280 --> 00:03:46,080
jenny motion burp suite jd guy and

92
00:03:46,080 --> 00:03:48,720
dexter jar this is in no way a complete

93
00:03:48,720 --> 00:03:51,360
list and we have a

94
00:03:51,360 --> 00:03:54,319
ton of other tools that will be uh there

95
00:03:54,319 --> 00:03:56,879
so coming to dynamic analysis uh the

96
00:03:56,879 --> 00:03:59,040
first tool that we'll be looking at as

97
00:03:59,040 --> 00:04:00,959
is android studio android studio

98
00:04:00,959 --> 00:04:02,959
provides application builders with an

99
00:04:02,959 --> 00:04:05,040
integrated development environment

100
00:04:05,040 --> 00:04:08,000
optimized for android apps so just go to

101
00:04:08,000 --> 00:04:08,720
the

102
00:04:08,720 --> 00:04:11,760
link provided click next and install it

103
00:04:11,760 --> 00:04:13,519
and you will be greeted with this screen

104
00:04:13,519 --> 00:04:15,680
once you have this screen it means your

105
00:04:15,680 --> 00:04:19,040
android studio is installed

106
00:04:19,040 --> 00:04:22,320
moving on to android debug bridge so uh

107
00:04:22,320 --> 00:04:24,400
this is a versatile command line tool

108
00:04:24,400 --> 00:04:26,720
that lets you communicate with a device

109
00:04:26,720 --> 00:04:28,800
it comes bundled with android studio so

110
00:04:28,800 --> 00:04:30,720
you don't have to do anything else the

111
00:04:30,720 --> 00:04:32,639
only thing that matters is the location

112
00:04:32,639 --> 00:04:34,639
of adb exe so i've mentioned you this is

113
00:04:34,639 --> 00:04:36,720
the standard location and to make your

114
00:04:36,720 --> 00:04:38,400
life easier what you can do is you can

115
00:04:38,400 --> 00:04:40,080
add this to your environment variables

116
00:04:40,080 --> 00:04:42,160
so i've given the steps for windows in

117
00:04:42,160 --> 00:04:43,759
windows you just need to go to system

118
00:04:43,759 --> 00:04:46,240
properties environment variables click

119
00:04:46,240 --> 00:04:48,320
on edit under the system variables and

120
00:04:48,320 --> 00:04:50,560
add the adb path that i've provided so

121
00:04:50,560 --> 00:04:52,720
this makes your adb accessible from any

122
00:04:52,720 --> 00:04:54,240
location and

123
00:04:54,240 --> 00:04:56,639
testing would be easier if you do this

124
00:04:56,639 --> 00:05:00,560
okay so now next we move to jenny motion

125
00:05:00,560 --> 00:05:03,120
genymotion uh provides fast android

126
00:05:03,120 --> 00:05:05,520
virtual devices so just go to the link

127
00:05:05,520 --> 00:05:07,680
that i've provided you will have to

128
00:05:07,680 --> 00:05:09,919
create an account create an account and

129
00:05:09,919 --> 00:05:12,320
then it will be uh free for uh general

130
00:05:12,320 --> 00:05:16,479
use so you can do that after you've

131
00:05:16,479 --> 00:05:18,400
installed jennymotion there's a couple

132
00:05:18,400 --> 00:05:20,160
of settings that you need to do so what

133
00:05:20,160 --> 00:05:22,720
you have to do is go to uh genymotion

134
00:05:22,720 --> 00:05:25,840
settings and under adb just put this sdk

135
00:05:25,840 --> 00:05:28,880
path so sdk is software development kit

136
00:05:28,880 --> 00:05:30,960
that is provided by android studio so

137
00:05:30,960 --> 00:05:33,759
just add that after that just create a

138
00:05:33,759 --> 00:05:36,000
new device by clicking on new that's so

139
00:05:36,000 --> 00:05:37,680
you see the plus button just click on

140
00:05:37,680 --> 00:05:40,400
that and you'll have a list of virtual

141
00:05:40,400 --> 00:05:42,880
devices already present so just select

142
00:05:42,880 --> 00:05:45,520
any and leave all our default settings

143
00:05:45,520 --> 00:05:47,840
and click install wait for a couple of

144
00:05:47,840 --> 00:05:51,120
minutes for it to finish installing

145
00:05:51,120 --> 00:05:53,280
after that on the main screen as you can

146
00:05:53,280 --> 00:05:55,440
see i have my two devices selected that

147
00:05:55,440 --> 00:05:58,080
is google nexus 4 and google nexus 6. so

148
00:05:58,080 --> 00:06:00,319
click on it and there's a start button

149
00:06:00,319 --> 00:06:03,120
just click on start and wait for a few

150
00:06:03,120 --> 00:06:04,960
minutes and your virtual device is up

151
00:06:04,960 --> 00:06:08,479
and running so this part is complete

152
00:06:08,479 --> 00:06:12,000
now coming to the uh os go droid this is

153
00:06:12,000 --> 00:06:14,479
a sample apk so we don't have permission

154
00:06:14,479 --> 00:06:16,800
to test applications which we don't own

155
00:06:16,800 --> 00:06:18,720
or or we don't have a written agreement

156
00:06:18,720 --> 00:06:21,039
for so we are going to use a sample apk

157
00:06:21,039 --> 00:06:23,440
so this is a very good sample apk for

158
00:06:23,440 --> 00:06:26,240
testing just download the zip and

159
00:06:26,240 --> 00:06:29,199
extract it and then just start the jar

160
00:06:29,199 --> 00:06:30,080
file

161
00:06:30,080 --> 00:06:32,479
and you will have this ui running so for

162
00:06:32,479 --> 00:06:34,639
goods is made of two applications i mean

163
00:06:34,639 --> 00:06:36,080
sorry go droid is made of two

164
00:06:36,080 --> 00:06:37,600
applications four votes and heard

165
00:06:37,600 --> 00:06:39,680
financial i'll be working today with

166
00:06:39,680 --> 00:06:41,759
four goats uh the process remains

167
00:06:41,759 --> 00:06:43,600
remains same for herd financial so

168
00:06:43,600 --> 00:06:45,600
nobody's there

169
00:06:45,600 --> 00:06:48,479
okay so now we need to install this apk

170
00:06:48,479 --> 00:06:51,199
file on our virtual device so uh in that

171
00:06:51,199 --> 00:06:53,840
same folder if you uh navigate to this

172
00:06:53,840 --> 00:06:55,759
particular location which i have shared

173
00:06:55,759 --> 00:06:58,639
you will find the apk file uh after that

174
00:06:58,639 --> 00:07:01,280
just run adb devices and it will show if

175
00:07:01,280 --> 00:07:03,199
the device is up and running or not in

176
00:07:03,199 --> 00:07:05,039
my case you can see that the ip address

177
00:07:05,039 --> 00:07:07,440
in the port is visible so it means that

178
00:07:07,440 --> 00:07:08,479
the

179
00:07:08,479 --> 00:07:11,520
device is up and running after that just

180
00:07:11,520 --> 00:07:14,240
you have to type adb install and path to

181
00:07:14,240 --> 00:07:15,280
apk

182
00:07:15,280 --> 00:07:17,120
and as you can see on the right side in

183
00:07:17,120 --> 00:07:18,880
my virtual device the four goods

184
00:07:18,880 --> 00:07:21,039
application is appeared so we have this

185
00:07:21,039 --> 00:07:22,160
installed

186
00:07:22,160 --> 00:07:23,680
up okay

187
00:07:23,680 --> 00:07:25,680
now we need to do a couple of setup

188
00:07:25,680 --> 00:07:27,199
these are some few more steps that you

189
00:07:27,199 --> 00:07:30,000
need to do so start the app and after

190
00:07:30,000 --> 00:07:33,199
that you just click on those three uh

191
00:07:33,199 --> 00:07:35,759
buttons three dots on the side

192
00:07:35,759 --> 00:07:38,800
and go to destination info and add your

193
00:07:38,800 --> 00:07:41,199
host ip address and the default port is

194
00:07:41,199 --> 00:07:43,520
time triple eight so what this does is

195
00:07:43,520 --> 00:07:46,479
your uh this app is acting like a client

196
00:07:46,479 --> 00:07:48,400
and the ui that is running on your host

197
00:07:48,400 --> 00:07:50,639
machine is uh acting as a server so when

198
00:07:50,639 --> 00:07:52,960
you authenticate it's going to uh you

199
00:07:52,960 --> 00:07:54,800
know this herd financial ui this is

200
00:07:54,800 --> 00:07:56,319
going to be your uh

201
00:07:56,319 --> 00:07:58,800
back end so i'm here see uh you have to

202
00:07:58,800 --> 00:08:00,800
click start web service so your server

203
00:08:00,800 --> 00:08:03,199
has started your client is ready so we

204
00:08:03,199 --> 00:08:05,120
are ready with that

205
00:08:05,120 --> 00:08:06,319
okay

206
00:08:06,319 --> 00:08:09,440
now next uh coming to burp suite so uh

207
00:08:09,440 --> 00:08:11,520
do i even need to introduce this tool

208
00:08:11,520 --> 00:08:12,960
this is like god's gift to web

209
00:08:12,960 --> 00:08:15,360
application pen testers so anyways this

210
00:08:15,360 --> 00:08:17,280
is a proxy tool for capturing request

211
00:08:17,280 --> 00:08:19,919
and response uh go to the port speakers

212
00:08:19,919 --> 00:08:21,840
site and download it i have downloaded

213
00:08:21,840 --> 00:08:23,440
the community edition if you have the

214
00:08:23,440 --> 00:08:25,759
pro version nothing like it so just

215
00:08:25,759 --> 00:08:27,360
download that

216
00:08:27,360 --> 00:08:29,919
okay now coming to the burp speed

217
00:08:29,919 --> 00:08:32,080
settings what you have to do is go to

218
00:08:32,080 --> 00:08:36,320
proxy options and add uh then add a port

219
00:08:36,320 --> 00:08:37,919
number whichever you like i have added

220
00:08:37,919 --> 00:08:39,679
eight zero eight one and make sure to

221
00:08:39,679 --> 00:08:42,159
select all interfaces so all interfaces

222
00:08:42,159 --> 00:08:44,399
is the key here to capture the mobile

223
00:08:44,399 --> 00:08:45,360
traffic

224
00:08:45,360 --> 00:08:47,839
uh so just click ok and it will get

225
00:08:47,839 --> 00:08:51,360
added to your proxy listeners

226
00:08:51,360 --> 00:08:54,480
then moving on before we start capturing

227
00:08:54,480 --> 00:08:56,720
traffic we need to do one extra step for

228
00:08:56,720 --> 00:08:59,360
https sites that is we need to install

229
00:08:59,360 --> 00:09:01,920
the burp suite ca certificate for that

230
00:09:01,920 --> 00:09:04,080
what you have to do is go to proxy

231
00:09:04,080 --> 00:09:07,120
options and import export ca certificate

232
00:09:07,120 --> 00:09:09,839
click on export and certificate in dr

233
00:09:09,839 --> 00:09:11,600
format

234
00:09:11,600 --> 00:09:13,519
after that you can save that certificate

235
00:09:13,519 --> 00:09:14,800
anywhere

236
00:09:14,800 --> 00:09:17,440
just remember the location and next you

237
00:09:17,440 --> 00:09:19,200
need to have an email configured on your

238
00:09:19,200 --> 00:09:21,120
virtual device to receive files you can

239
00:09:21,120 --> 00:09:23,600
also do an adb push so i had my email

240
00:09:23,600 --> 00:09:25,680
configured both on my virtual device and

241
00:09:25,680 --> 00:09:28,080
on my browser running so i sent the file

242
00:09:28,080 --> 00:09:31,839
over to my virtual device and here

243
00:09:31,839 --> 00:09:34,880
csert is downloaded now go to settings

244
00:09:34,880 --> 00:09:37,680
security and installed from sd card and

245
00:09:37,680 --> 00:09:40,160
a new window is going to pop up and just

246
00:09:40,160 --> 00:09:42,880
click on internal storage and

247
00:09:42,880 --> 00:09:45,040
you can see that your ca search is there

248
00:09:45,040 --> 00:09:46,880
so just click on that and our window

249
00:09:46,880 --> 00:09:49,040
will pop up and name the certificate as

250
00:09:49,040 --> 00:09:50,880
you like and

251
00:09:50,880 --> 00:09:53,600
in credential use select vpn and apps

252
00:09:53,600 --> 00:09:56,399
and click on ok so now if you see we

253
00:09:56,399 --> 00:09:59,600
have our port swigger ca saved okay so

254
00:09:59,600 --> 00:10:01,120
that is done

255
00:10:01,120 --> 00:10:02,079
and

256
00:10:02,079 --> 00:10:04,240
now finally what we have to do is you

257
00:10:04,240 --> 00:10:06,640
have to go to settings wi-fi and right

258
00:10:06,640 --> 00:10:08,800
click on it for two seconds in my case

259
00:10:08,800 --> 00:10:12,079
it's wired ssid so the below options

260
00:10:12,079 --> 00:10:14,000
would show up and click on modify

261
00:10:14,000 --> 00:10:17,120
network after going to modify network

262
00:10:17,120 --> 00:10:18,959
you have to click on show advanced

263
00:10:18,959 --> 00:10:20,000
options

264
00:10:20,000 --> 00:10:21,680
and

265
00:10:21,680 --> 00:10:22,399
in

266
00:10:22,399 --> 00:10:24,720
we'll be configuring the proxy and ip

267
00:10:24,720 --> 00:10:27,200
settings so for that check your ip

268
00:10:27,200 --> 00:10:30,000
address so ip address here is my here is

269
00:10:30,000 --> 00:10:33,040
my host ip address and then in proxy

270
00:10:33,040 --> 00:10:35,760
select manual under the proxy host name

271
00:10:35,760 --> 00:10:37,920
uh select the ip address of your host

272
00:10:37,920 --> 00:10:39,920
system the proxy port if you remember i

273
00:10:39,920 --> 00:10:43,360
configured it as 8081 previously so just

274
00:10:43,360 --> 00:10:44,959
enter that and leave all the other

275
00:10:44,959 --> 00:10:47,519
settings as it is and click on save

276
00:10:47,519 --> 00:10:50,480
so now with my login screen of my go

277
00:10:50,480 --> 00:10:53,360
droid app and my proxy listeners running

278
00:10:53,360 --> 00:10:55,519
let's see if you can capture the traffic

279
00:10:55,519 --> 00:10:57,680
as you can see i have my test i have

280
00:10:57,680 --> 00:10:59,360
just entered a username and password and

281
00:10:59,360 --> 00:11:01,680
it's coming in work suite correctly so

282
00:11:01,680 --> 00:11:03,600
now you can just test all other

283
00:11:03,600 --> 00:11:06,079
scenarios you can test for sql injection

284
00:11:06,079 --> 00:11:09,040
you can test for uh

285
00:11:09,040 --> 00:11:10,800
you can brute force the password you can

286
00:11:10,800 --> 00:11:12,640
test for authentication by first so all

287
00:11:12,640 --> 00:11:14,320
these things can be done so dynamic

288
00:11:14,320 --> 00:11:16,320
analysis is done here we have done with

289
00:11:16,320 --> 00:11:18,959
the setting with of dynamic analysis

290
00:11:18,959 --> 00:11:20,079
excuse me

291
00:11:20,079 --> 00:11:22,959
coming to the static analysis part

292
00:11:22,959 --> 00:11:24,560
let's start with i have downloaded

293
00:11:24,560 --> 00:11:26,160
another apk for this it's called the

294
00:11:26,160 --> 00:11:28,800
diva apk and open it with your android

295
00:11:28,800 --> 00:11:30,399
studio okay

296
00:11:30,399 --> 00:11:32,240
uh once you open with your android

297
00:11:32,240 --> 00:11:34,399
studio the first thing we're going to do

298
00:11:34,399 --> 00:11:36,399
is we're going to start analyzing a file

299
00:11:36,399 --> 00:11:38,480
called android.manifest file if you

300
00:11:38,480 --> 00:11:40,600
remember i mentioned it earlier the

301
00:11:40,600 --> 00:11:43,519
android.manifest file so every app must

302
00:11:43,519 --> 00:11:46,399
have this file and in this file all the

303
00:11:46,399 --> 00:11:47,920
components of the application are

304
00:11:47,920 --> 00:11:49,839
declared all the permissions that the

305
00:11:49,839 --> 00:11:52,000
app needs to communicate in order to

306
00:11:52,000 --> 00:11:53,839
access protected parts of the system are

307
00:11:53,839 --> 00:11:55,600
also declared over here

308
00:11:55,600 --> 00:11:57,920
okay so once you open the manifest file

309
00:11:57,920 --> 00:11:59,200
what to look for

310
00:11:59,200 --> 00:12:01,519
first thing you're going to look for is

311
00:12:01,519 --> 00:12:04,959
allow backup attribute now this uh

312
00:12:04,959 --> 00:12:07,040
attribute if set to true can allow

313
00:12:07,040 --> 00:12:09,360
backup of your app and can help a target

314
00:12:09,360 --> 00:12:11,440
to get private data so before going to

315
00:12:11,440 --> 00:12:13,360
production this should be set to false

316
00:12:13,360 --> 00:12:15,440
this will actually be a low issue but

317
00:12:15,440 --> 00:12:17,600
still you should report this

318
00:12:17,600 --> 00:12:19,839
uh coming for the next attribute look

319
00:12:19,839 --> 00:12:21,920
for debuggable attribute with this

320
00:12:21,920 --> 00:12:24,560
attribute set to true sensitive data can

321
00:12:24,560 --> 00:12:26,720
be revealed and also app is vulnerable

322
00:12:26,720 --> 00:12:28,880
to decompilation again this will be a

323
00:12:28,880 --> 00:12:31,519
low issue and you should have this

324
00:12:31,519 --> 00:12:34,639
turned off uh before going to production

325
00:12:34,639 --> 00:12:36,480
now next is checking for insecure

326
00:12:36,480 --> 00:12:38,480
permissions go through the permissions

327
00:12:38,480 --> 00:12:40,240
with the developer to identify the

328
00:12:40,240 --> 00:12:42,800
permission of each uh

329
00:12:42,800 --> 00:12:45,200
to identify the necessary permissions so

330
00:12:45,200 --> 00:12:47,839
for example you have many apps that ask

331
00:12:47,839 --> 00:12:49,839
for sms permission now they do this

332
00:12:49,839 --> 00:12:51,519
because they need to login you with the

333
00:12:51,519 --> 00:12:54,079
otp but after but because of that they

334
00:12:54,079 --> 00:12:56,160
will have like access to all your sms

335
00:12:56,160 --> 00:12:58,560
messages so do does your app really need

336
00:12:58,560 --> 00:13:00,240
that so just sit with your developer if

337
00:13:00,240 --> 00:13:02,240
you find any unnecessary permissions

338
00:13:02,240 --> 00:13:04,320
flag it as an issue and then your

339
00:13:04,320 --> 00:13:06,000
developer can come back and tell you if

340
00:13:06,000 --> 00:13:07,920
it's really required for the business or

341
00:13:07,920 --> 00:13:08,880
not

342
00:13:08,880 --> 00:13:09,760
okay

343
00:13:09,760 --> 00:13:12,000
now coming to an interesting scenario

344
00:13:12,000 --> 00:13:14,320
that is attacking activities so what

345
00:13:14,320 --> 00:13:16,880
happens is android app is built upon

346
00:13:16,880 --> 00:13:19,120
various components such as activities

347
00:13:19,120 --> 00:13:21,200
services content providers broadcast

348
00:13:21,200 --> 00:13:23,440
receivers i am going to be talking about

349
00:13:23,440 --> 00:13:26,079
activities today so what is an activity

350
00:13:26,079 --> 00:13:28,639
so every screen that you see that is an

351
00:13:28,639 --> 00:13:30,639
activity the first screen that you see

352
00:13:30,639 --> 00:13:32,240
like the login screen that is one

353
00:13:32,240 --> 00:13:34,720
activity after you log in suppose you

354
00:13:34,720 --> 00:13:36,000
greeted like hey

355
00:13:36,000 --> 00:13:38,959
so that is one activity so uh

356
00:13:38,959 --> 00:13:40,800
how can we attack that how can we miss

357
00:13:40,800 --> 00:13:43,600
you uh you know we how can we abuse it

358
00:13:43,600 --> 00:13:44,720
so

359
00:13:44,720 --> 00:13:47,120
again looking at your manifest file as

360
00:13:47,120 --> 00:13:49,199
you can see there's an exported option

361
00:13:49,199 --> 00:13:51,279
is equal to true what does this mean

362
00:13:51,279 --> 00:13:53,839
this means that the component is public

363
00:13:53,839 --> 00:13:56,160
and how can we use that so observing

364
00:13:56,160 --> 00:13:58,160
this screenshot that the activities dot

365
00:13:58,160 --> 00:14:00,079
view profile has exported is equal to

366
00:14:00,079 --> 00:14:01,040
true

367
00:14:01,040 --> 00:14:03,760
so now what i'm going to do is i'm going

368
00:14:03,760 --> 00:14:08,079
to run this command adb shell am start

369
00:14:08,079 --> 00:14:10,240
dash n and the package name and the

370
00:14:10,240 --> 00:14:12,959
activities so adb as i mentioned it can

371
00:14:12,959 --> 00:14:14,480
communicate with your device so it's

372
00:14:14,480 --> 00:14:17,120
starting a shell on your virtual device

373
00:14:17,120 --> 00:14:19,360
am stands for activity manager which is

374
00:14:19,360 --> 00:14:22,240
a utility provided by adb and it's

375
00:14:22,240 --> 00:14:25,120
asking the activity manager to start a

376
00:14:25,120 --> 00:14:27,360
new activity in this package this

377
00:14:27,360 --> 00:14:29,040
package name you can get from android

378
00:14:29,040 --> 00:14:31,199
manifest file itself and the activity

379
00:14:31,199 --> 00:14:33,120
name we saw because it had exported is

380
00:14:33,120 --> 00:14:35,199
equal to true set so what do what

381
00:14:35,199 --> 00:14:37,760
happened here i did not uh enter any

382
00:14:37,760 --> 00:14:40,320
username and password but we could see

383
00:14:40,320 --> 00:14:41,839
we could log in we could see the

384
00:14:41,839 --> 00:14:44,399
internal screen so this is this is an

385
00:14:44,399 --> 00:14:46,399
important one we have to think about

386
00:14:46,399 --> 00:14:48,320
this and this can be used for everything

387
00:14:48,320 --> 00:14:50,399
you can you can test the scenario for

388
00:14:50,399 --> 00:14:52,160
services as well for example you have

389
00:14:52,160 --> 00:14:54,000
permission to start the location service

390
00:14:54,000 --> 00:14:56,480
and if it's exported is equal to true

391
00:14:56,480 --> 00:14:58,079
probably you can start it without the

392
00:14:58,079 --> 00:14:59,519
user's permission

393
00:14:59,519 --> 00:15:01,839
so we can test it in all scenarios this

394
00:15:01,839 --> 00:15:03,920
is just one scenario

395
00:15:03,920 --> 00:15:05,360
uh so

396
00:15:05,360 --> 00:15:07,600
just be uh think about it so this is a

397
00:15:07,600 --> 00:15:10,320
good one coming to reverse engineering

398
00:15:10,320 --> 00:15:13,199
um android programs are compiled in dex

399
00:15:13,199 --> 00:15:15,360
files which are in turn zipped into a

400
00:15:15,360 --> 00:15:18,000
single apk file for the device now

401
00:15:18,000 --> 00:15:18,959
dalvik

402
00:15:18,959 --> 00:15:21,040
executable files are optimized for

403
00:15:21,040 --> 00:15:23,519
mobile devices so they are very

404
00:15:23,519 --> 00:15:24,639
very like

405
00:15:24,639 --> 00:15:26,800
compiled into a smaller file

406
00:15:26,800 --> 00:15:30,240
so to get uh the java code from it we'll

407
00:15:30,240 --> 00:15:32,880
be using two uh tools that is text to

408
00:15:32,880 --> 00:15:35,519
jar and jd gui next to jar as the name

409
00:15:35,519 --> 00:15:37,519
suggests it will convert the classes dot

410
00:15:37,519 --> 00:15:40,240
dex file of an apk to classes.jar file

411
00:15:40,240 --> 00:15:42,560
and jd gui would be used to view the

412
00:15:42,560 --> 00:15:44,880
source code in a very beautiful format

413
00:15:44,880 --> 00:15:47,360
so coming to how we are going to do it

414
00:15:47,360 --> 00:15:49,360
to navigate to the folder where you have

415
00:15:49,360 --> 00:15:51,360
downloaded next to jar this is how the

416
00:15:51,360 --> 00:15:53,360
desktop folder looks like

417
00:15:53,360 --> 00:15:55,759
and then uh since i'm on windows use the

418
00:15:55,759 --> 00:15:58,480
command d2j.x2jar.pat

419
00:15:58,480 --> 00:16:00,720
and the path to the apk file so you will

420
00:16:00,720 --> 00:16:02,240
get an output like this you will get a

421
00:16:02,240 --> 00:16:04,959
jar file okay now what do we do with

422
00:16:04,959 --> 00:16:07,680
this jar file we so i have opened this

423
00:16:07,680 --> 00:16:10,320
jar file with my jd gui

424
00:16:10,320 --> 00:16:12,560
and as you can see you can see all the

425
00:16:12,560 --> 00:16:15,199
classes listed very nicely beautifully

426
00:16:15,199 --> 00:16:17,360
and we also have a very handy search

427
00:16:17,360 --> 00:16:19,600
feature in this so what we can do is

428
00:16:19,600 --> 00:16:21,519
from the source code we can check for

429
00:16:21,519 --> 00:16:23,600
hard-coded passwords we can check for

430
00:16:23,600 --> 00:16:26,880
any apis keys because mobile uh mobile

431
00:16:26,880 --> 00:16:28,880
phones use a lot of apis so we can check

432
00:16:28,880 --> 00:16:31,600
for any hard-coded api keys we can check

433
00:16:31,600 --> 00:16:33,440
for sensitive information we can

434
00:16:33,440 --> 00:16:35,519
understand the logic of the app how is

435
00:16:35,519 --> 00:16:37,440
how is the communication happening how

436
00:16:37,440 --> 00:16:40,000
if any parameter the user input is being

437
00:16:40,000 --> 00:16:42,079
taken directly without being sanitized

438
00:16:42,079 --> 00:16:45,600
so this can be used so this is the um

439
00:16:45,600 --> 00:16:48,160
this is the diva app so you can see that

440
00:16:48,160 --> 00:16:50,320
we have found some hard-coded password

441
00:16:50,320 --> 00:16:52,240
and there's an api name so obviously

442
00:16:52,240 --> 00:16:54,480
this is a sample apk so we'll have this

443
00:16:54,480 --> 00:16:56,800
in production generally it's not so easy

444
00:16:56,800 --> 00:16:57,519
but

445
00:16:57,519 --> 00:17:00,000
you should test this

446
00:17:00,000 --> 00:17:02,560
coming to the godroid app which i

447
00:17:02,560 --> 00:17:04,640
mentioned earlier so you can see again

448
00:17:04,640 --> 00:17:06,959
all the classes are mentioned here

449
00:17:06,959 --> 00:17:07,919
and

450
00:17:07,919 --> 00:17:09,679
going through all the classes we end up

451
00:17:09,679 --> 00:17:12,559
finding the admin credentials so you can

452
00:17:12,559 --> 00:17:13,760
uh

453
00:17:13,760 --> 00:17:15,359
you can use these credentials to log

454
00:17:15,359 --> 00:17:18,240
into the application and then perform

455
00:17:18,240 --> 00:17:20,000
more damage because you have a

456
00:17:20,000 --> 00:17:22,720
privileged account so this is uh this is

457
00:17:22,720 --> 00:17:24,319
another scenario that you have to take

458
00:17:24,319 --> 00:17:25,679
care of

459
00:17:25,679 --> 00:17:28,240
okay uh this is uh something which i

460
00:17:28,240 --> 00:17:30,240
wanted to share with you so

461
00:17:30,240 --> 00:17:32,160
generally in corporate environment the

462
00:17:32,160 --> 00:17:34,000
developers would provide you with an apk

463
00:17:34,000 --> 00:17:36,320
file but what if you want to test an

464
00:17:36,320 --> 00:17:38,080
application whose apk file is not

465
00:17:38,080 --> 00:17:40,799
present so in that scenario suppose

466
00:17:40,799 --> 00:17:42,160
imagine that you downloaded an

467
00:17:42,160 --> 00:17:44,240
application from play store imagine that

468
00:17:44,240 --> 00:17:46,160
i download this for quotes app from the

469
00:17:46,160 --> 00:17:48,160
play store so what you're going to do is

470
00:17:48,160 --> 00:17:50,640
you're going to pull this apk using adb

471
00:17:50,640 --> 00:17:53,840
so again i have used adb devices and

472
00:17:53,840 --> 00:17:55,440
my ip address and

473
00:17:55,440 --> 00:17:57,440
what is this that's that means my device

474
00:17:57,440 --> 00:17:59,840
is up and running then you will take a

475
00:17:59,840 --> 00:18:03,360
shell on the device adb shell command so

476
00:18:03,360 --> 00:18:06,000
virtual devices like are rooted by

477
00:18:06,000 --> 00:18:08,080
default if you are using an android

478
00:18:08,080 --> 00:18:10,240
phone properly you will need to root it

479
00:18:10,240 --> 00:18:13,520
after that uh use pm stands for package

480
00:18:13,520 --> 00:18:16,160
manager and it is provided by adb so

481
00:18:16,160 --> 00:18:18,480
it'll uh pm list packages and grab the

482
00:18:18,480 --> 00:18:20,480
name of your uh

483
00:18:20,480 --> 00:18:22,960
application and since android is built

484
00:18:22,960 --> 00:18:24,799
on a linux kernel all the linux commands

485
00:18:24,799 --> 00:18:27,120
are valid so that this is going to run

486
00:18:27,120 --> 00:18:29,360
and this is going to output a package

487
00:18:29,360 --> 00:18:30,960
name then

488
00:18:30,960 --> 00:18:33,440
search for package manager and the

489
00:18:33,440 --> 00:18:35,600
package name and you will get a path so

490
00:18:35,600 --> 00:18:37,679
package manager path and the name of the

491
00:18:37,679 --> 00:18:40,080
package and there you can see it's in

492
00:18:40,080 --> 00:18:42,240
the data app the apk file is there so

493
00:18:42,240 --> 00:18:44,160
just exit the shell

494
00:18:44,160 --> 00:18:44,960
and

495
00:18:44,960 --> 00:18:47,039
then you can just perform the adb pull

496
00:18:47,039 --> 00:18:49,600
command after the pull command is done

497
00:18:49,600 --> 00:18:51,600
uh what you can do is so you can start

498
00:18:51,600 --> 00:18:53,679
the process of checking the manifest

499
00:18:53,679 --> 00:18:55,440
file you can start the process of

500
00:18:55,440 --> 00:18:58,400
checking the source code and uh

501
00:18:58,400 --> 00:19:00,559
all again the whole process will start

502
00:19:00,559 --> 00:19:02,640
same so this is something you can think

503
00:19:02,640 --> 00:19:04,400
if you're doing on hacker one you're

504
00:19:04,400 --> 00:19:06,080
downloading so you can start testing

505
00:19:06,080 --> 00:19:07,200
that

506
00:19:07,200 --> 00:19:11,440
so that was all from my site and uh

507
00:19:11,440 --> 00:19:13,440
i'm gonna be sharing two resources which

508
00:19:13,440 --> 00:19:15,120
i think are very good these two

509
00:19:15,120 --> 00:19:17,600
resources are free owasp and now secure

510
00:19:17,600 --> 00:19:21,679
academy so just go ahead learn more and

511
00:19:21,679 --> 00:19:23,520
i hope this can help you get started in

512
00:19:23,520 --> 00:19:26,080
the mobile application security domain

513
00:19:26,080 --> 00:19:28,400
and if you have any questions you can

514
00:19:28,400 --> 00:19:30,720
drop in discord and always you can

515
00:19:30,720 --> 00:19:32,160
connect with me on linkedin if you have

516
00:19:32,160 --> 00:19:33,679
any configuration issues while you're

517
00:19:33,679 --> 00:19:35,679
configuring your lab you can ask me i

518
00:19:35,679 --> 00:19:37,440
can help you with that because it has a

519
00:19:37,440 --> 00:19:38,400
lot of

520
00:19:38,400 --> 00:19:41,200
nitty gritties so thank you so much and

521
00:19:41,200 --> 00:19:43,679
i hope it could help you in

522
00:19:43,679 --> 00:19:47,039
some way thank you

