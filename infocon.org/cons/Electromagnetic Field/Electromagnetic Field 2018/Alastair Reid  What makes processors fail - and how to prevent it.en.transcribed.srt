1
00:00:00,030 --> 00:00:05,700
<font color="#E5E5E5">right okay sorry</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> so I've been</font>

2
00:00:03,330 --> 00:00:09,360
working<font color="#E5E5E5"> at a company designs processors</font>

3
00:00:05,700 --> 00:00:12,269
for<font color="#CCCCCC"> 13 years now and something that I'm</font>

4
00:00:09,360 --> 00:00:14,690
more and<font color="#E5E5E5"> more amazed that the longer I</font>

5
00:00:12,269 --> 00:00:17,880
work there is this simple fact<font color="#CCCCCC"> that</font>

6
00:00:14,690 --> 00:00:20,100
<font color="#E5E5E5">processors are incredibly reliable</font><font color="#CCCCCC"> I</font>

7
00:00:17,880 --> 00:00:22,439
mean they're not<font color="#E5E5E5"> completely reliable</font>

8
00:00:20,100 --> 00:00:24,900
<font color="#E5E5E5">right I mean they do occasionally fail</font>

9
00:00:22,439 --> 00:00:27,960
you know we hear about bugs<font color="#E5E5E5"> and</font>

10
00:00:24,900 --> 00:00:30,090
processors<font color="#E5E5E5"> but it's such a rare</font><font color="#CCCCCC"> thing</font>

11
00:00:27,960 --> 00:00:32,430
<font color="#E5E5E5">that if</font><font color="#CCCCCC"> you and I were to</font><font color="#E5E5E5"> make a list of</font>

12
00:00:30,090 --> 00:00:34,710
all the processor bugs we've ever heard

13
00:00:32,430 --> 00:00:36,989
<font color="#E5E5E5">of we would probably have like</font><font color="#CCCCCC"> 9 out of</font>

14
00:00:34,710 --> 00:00:38,579
<font color="#CCCCCC">10 things in our list would be the same</font>

15
00:00:36,989 --> 00:00:42,269
<font color="#E5E5E5">fact we probably wouldn't even get to</font>

16
00:00:38,579 --> 00:00:45,539
tend<font color="#E5E5E5"> to be honest</font><font color="#CCCCCC"> so I'm</font><font color="#E5E5E5"> going to be</font>

17
00:00:42,270 --> 00:00:48,480
talking<font color="#E5E5E5"> about how it is that processors</font>

18
00:00:45,539 --> 00:00:51,600
are actually amazingly close to being

19
00:00:48,480 --> 00:00:55,589
you<font color="#E5E5E5"> know completely correct how do we</font>

20
00:00:51,600 --> 00:00:57,809
<font color="#E5E5E5">actually achieve</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so if you want</font><font color="#CCCCCC"> a</font>

21
00:00:55,590 --> 00:01:01,829
more technical version<font color="#E5E5E5"> of this a over</font>

22
00:00:57,809 --> 00:01:03,780
the information<font color="#CCCCCC"> this talk</font><font color="#E5E5E5"> I've put</font><font color="#CCCCCC"> links</font>

23
00:01:01,829 --> 00:01:05,459
in the slides<font color="#CCCCCC"> I put my slides on my</font>

24
00:01:03,780 --> 00:01:06,810
website afterwards<font color="#CCCCCC"> you can grab the</font>

25
00:01:05,459 --> 00:01:10,559
links from<font color="#E5E5E5"> there</font>

26
00:01:06,810 --> 00:01:14,010
<font color="#E5E5E5">Mattie</font><font color="#CCCCCC"> Suze talked a</font><font color="#E5E5E5"> yesterday is also</font>

27
00:01:10,560 --> 00:01:16,170
<font color="#CCCCCC">related to</font><font color="#E5E5E5"> this and I wonder if anybody</font>

28
00:01:14,010 --> 00:01:18,900
was in Johnny Austin's workshop

29
00:01:16,170 --> 00:01:21,540
yesterday<font color="#CCCCCC"> where</font><font color="#E5E5E5"> we had a bunch</font><font color="#CCCCCC"> of humans</font>

30
00:01:18,900 --> 00:01:24,150
<font color="#E5E5E5">pretending</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be a different parts of a</font>

31
00:01:21,540 --> 00:01:28,380
computer modeling a<font color="#CCCCCC"> five-stage</font><font color="#E5E5E5"> pipeline</font>

32
00:01:24,150 --> 00:01:32,790
<font color="#CCCCCC">I was also kind of quite quite similar</font>

33
00:01:28,380 --> 00:01:35,640
and good fun<font color="#CCCCCC"> so ok so processors always</font>

34
00:01:32,790 --> 00:01:37,530
work<font color="#CCCCCC"> this is because there's a sort of</font>

35
00:01:35,640 --> 00:01:42,170
tension<font color="#E5E5E5"> going on so it's a</font><font color="#CCCCCC"> renewal in</font>

36
00:01:37,530 --> 00:01:45,570
this so<font color="#E5E5E5"> these are a</font><font color="#CCCCCC"> atten going on in</font>

37
00:01:42,170 --> 00:01:47,909
creating a processor<font color="#CCCCCC"> on the</font><font color="#E5E5E5"> one hand you</font>

38
00:01:45,570 --> 00:01:49,758
<font color="#CCCCCC">want it to be correct and another you</font>

39
00:01:47,909 --> 00:01:52,259
<font color="#E5E5E5">want it to be fast and these things are</font>

40
00:01:49,759 --> 00:01:53,460
<font color="#CCCCCC">completely in opposition to each other</font>

41
00:01:52,259 --> 00:01:58,680
it's<font color="#CCCCCC"> really hard to make something</font>

42
00:01:53,460 --> 00:02:03,869
<font color="#E5E5E5">correct and fast and so this is a talk</font>

43
00:01:58,680 --> 00:02:06,329
with a<font color="#E5E5E5"> villain and a hero and the</font>

44
00:02:03,869 --> 00:02:08,940
villain in<font color="#CCCCCC"> this sorry Sam maker face</font>

45
00:02:06,329 --> 00:02:10,889
also<font color="#E5E5E5"> bad news</font><font color="#CCCCCC"> the villain</font><font color="#E5E5E5"> is in fact the</font>

46
00:02:08,940 --> 00:02:13,859
designer<font color="#CCCCCC"> he's trying</font><font color="#E5E5E5"> to make things</font>

47
00:02:10,889 --> 00:02:16,040
<font color="#CCCCCC">faster and unfortunately as he tries to</font>

48
00:02:13,860 --> 00:02:19,230
<font color="#CCCCCC">do that</font><font color="#E5E5E5"> he</font><font color="#CCCCCC"> inevitably introduced</font>

49
00:02:16,040 --> 00:02:20,730
introduces bugs<font color="#E5E5E5"> can you turn</font><font color="#CCCCCC"> down</font><font color="#E5E5E5"> the</font>

50
00:02:19,230 --> 00:02:25,109
sound a wee bit I'm getting<font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot of</font>

51
00:02:20,730 --> 00:02:29,910
<font color="#CCCCCC">echo</font><font color="#E5E5E5"> it's a bit distracting okay</font>

52
00:02:25,110 --> 00:02:32,310
well that could work<font color="#E5E5E5"> too so a the</font>

53
00:02:29,910 --> 00:02:34,709
designer is busy introducing<font color="#E5E5E5"> bugs</font><font color="#CCCCCC"> and</font>

54
00:02:32,310 --> 00:02:37,110
making<font color="#CCCCCC"> it go faster too meanwhile the</font>

55
00:02:34,709 --> 00:02:42,209
hero is<font color="#CCCCCC"> the person trying to find those</font>

56
00:02:37,110 --> 00:02:44,850
bugs<font color="#E5E5E5"> and help fix them</font><font color="#CCCCCC"> so okay</font><font color="#E5E5E5"> so the</font>

57
00:02:42,209 --> 00:02:49,080
verifier is<font color="#E5E5E5"> pushing back against the</font>

58
00:02:44,850 --> 00:02:52,260
designer<font color="#E5E5E5"> and in our commercial processor</font>

59
00:02:49,080 --> 00:02:54,900
<font color="#E5E5E5">the verifier usually wins because a fast</font>

60
00:02:52,260 --> 00:02:57,269
process<font color="#E5E5E5"> was nice correct processor is</font>

61
00:02:54,900 --> 00:02:59,880
critical<font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> have a you know no</font>

62
00:02:57,269 --> 00:03:02,100
one's<font color="#CCCCCC"> interested</font><font color="#E5E5E5"> if it mostly works so</font>

63
00:02:59,880 --> 00:03:04,049
the verifier will<font color="#CCCCCC"> usually win the battle</font>

64
00:03:02,100 --> 00:03:09,870
over is this<font color="#E5E5E5"> too complex a feature to</font>

65
00:03:04,050 --> 00:03:12,450
add and the verifier is helped<font color="#E5E5E5"> by a some</font>

66
00:03:09,870 --> 00:03:15,570
useful tools which<font color="#CCCCCC"> I'll</font><font color="#E5E5E5"> be describing in</font>

67
00:03:12,450 --> 00:03:17,429
this talk at a fairly high<font color="#CCCCCC"> level</font><font color="#E5E5E5"> they're</font>

68
00:03:15,570 --> 00:03:20,100
called<font color="#CCCCCC"> Sat solvers and</font><font color="#E5E5E5"> bounded model</font>

69
00:03:17,430 --> 00:03:23,790
checkers not very sexy names but there

70
00:03:20,100 --> 00:03:26,280
you<font color="#E5E5E5"> go</font><font color="#CCCCCC"> okay so what I'm</font><font color="#E5E5E5"> going to do in</font>

71
00:03:23,790 --> 00:03:28,620
this talk is I'm going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of look</font>

72
00:03:26,280 --> 00:03:31,410
at this switch back and forth between

73
00:03:28,620 --> 00:03:35,459
correct<font color="#E5E5E5"> and fast and I'm going to start</font>

74
00:03:31,410 --> 00:03:38,930
with a very<font color="#E5E5E5"> simple processor and I've so</font>

75
00:03:35,459 --> 00:03:42,150
what I've done here<font color="#CCCCCC"> is I've taken</font><font color="#E5E5E5"> a an</font>

76
00:03:38,930 --> 00:03:45,690
early MIPS processor and I've tried I've

77
00:03:42,150 --> 00:03:47,850
simplified<font color="#E5E5E5"> it down</font><font color="#CCCCCC"> just by kind</font><font color="#E5E5E5"> of</font>

78
00:03:45,690 --> 00:03:50,489
piecing over some of the<font color="#E5E5E5"> complicated</font>

79
00:03:47,850 --> 00:03:52,350
features<font color="#E5E5E5"> in it so it's probably so more</font>

80
00:03:50,489 --> 00:03:55,500
or less<font color="#CCCCCC"> correct with my</font><font color="#E5E5E5"> book</font><font color="#CCCCCC"> Sharia</font>

81
00:03:52,350 --> 00:03:57,359
applied to it<font color="#E5E5E5"> let me</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> quickly go</font>

82
00:03:55,500 --> 00:03:59,880
<font color="#CCCCCC">through</font><font color="#E5E5E5"> the main bits of the processor</font>

83
00:03:57,360 --> 00:04:01,620
so<font color="#CCCCCC"> working from left</font><font color="#E5E5E5"> to right before you</font>

84
00:03:59,880 --> 00:04:03,000
can execute an instruction you need to

85
00:04:01,620 --> 00:04:05,850
know what instruction you're going to

86
00:04:03,000 --> 00:04:07,739
execute<font color="#CCCCCC"> so you take your program counter</font>

87
00:04:05,850 --> 00:04:09,420
from<font color="#E5E5E5"> the green box you hand it</font><font color="#CCCCCC"> to the</font>

88
00:04:07,739 --> 00:04:13,380
memory<font color="#E5E5E5"> and it gives you back an</font>

89
00:04:09,420 --> 00:04:15,358
instruction the<font color="#E5E5E5"> Zener you then have to</font>

90
00:04:13,380 --> 00:04:17,940
figure<font color="#CCCCCC"> out what</font><font color="#E5E5E5"> the instruction means</font><font color="#CCCCCC"> so</font>

91
00:04:15,359 --> 00:04:20,190
you decode it as traditionally that

92
00:04:17,940 --> 00:04:22,108
block is shown in white<font color="#CCCCCC"> in</font><font color="#E5E5E5"> diagrams like</font>

93
00:04:20,190 --> 00:04:24,840
<font color="#CCCCCC">this and so I</font><font color="#E5E5E5"> followed that from a</font>

94
00:04:22,108 --> 00:04:27,359
tradition<font color="#E5E5E5"> of the decode logic is</font>

95
00:04:24,840 --> 00:04:29,429
and white<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that you can't actually see</font>

96
00:04:27,360 --> 00:04:31,230
<font color="#CCCCCC">it</font><font color="#E5E5E5"> it's the most complicated part the</font>

97
00:04:29,430 --> 00:04:32,370
processor we always<font color="#E5E5E5"> leave it out the</font>

98
00:04:31,230 --> 00:04:35,100
pictures

99
00:04:32,370 --> 00:04:36,630
so once you've decoded<font color="#E5E5E5"> instruction that</font>

100
00:04:35,100 --> 00:04:40,020
gives you<font color="#E5E5E5"> all the control signals to</font>

101
00:04:36,630 --> 00:04:41,700
control<font color="#E5E5E5"> all the rest of the circuit</font><font color="#CCCCCC"> so</font>

102
00:04:40,020 --> 00:04:43,139
the next bit is from the dream bit in

103
00:04:41,700 --> 00:04:45,389
the<font color="#E5E5E5"> middle the register file you read</font>

104
00:04:43,139 --> 00:04:48,030
some inputs and then you hand that<font color="#CCCCCC"> to</font>

105
00:04:45,389 --> 00:04:50,419
the ALU<font color="#CCCCCC"> which can do arithmetic addition</font>

106
00:04:48,030 --> 00:04:54,630
subtraction comparison and the values

107
00:04:50,419 --> 00:04:56,370
<font color="#E5E5E5">and you can also pass</font><font color="#CCCCCC"> the values to</font><font color="#E5E5E5"> the</font>

108
00:04:54,630 --> 00:05:00,270
memory if<font color="#CCCCCC"> you want to read a write</font>

109
00:04:56,370 --> 00:05:03,720
memory<font color="#E5E5E5"> and then when you're all done the</font>

110
00:05:00,270 --> 00:05:07,460
<font color="#E5E5E5">results are go in this big backward a</font>

111
00:05:03,720 --> 00:05:11,220
path back over to the<font color="#E5E5E5"> register file</font>

112
00:05:07,460 --> 00:05:15,210
where a you can update any registers

113
00:05:11,220 --> 00:05:18,570
you've got<font color="#E5E5E5"> okay so that's that's very</font>

114
00:05:15,210 --> 00:05:20,130
<font color="#E5E5E5">quickly what</font><font color="#CCCCCC"> processors like oh I should</font>

115
00:05:18,570 --> 00:05:21,900
also mention<font color="#CCCCCC"> that there's these little</font>

116
00:05:20,130 --> 00:05:24,360
<font color="#E5E5E5">gray boxes I don't know if you can quite</font>

117
00:05:21,900 --> 00:05:26,400
see them they're<font color="#CCCCCC"> labeled mocks or</font>

118
00:05:24,360 --> 00:05:30,810
multiplexer<font color="#E5E5E5"> they were switch which</font>

119
00:05:26,400 --> 00:05:32,099
selects different inputs<font color="#E5E5E5"> and and those</font>

120
00:05:30,810 --> 00:05:33,479
<font color="#E5E5E5">are absolutely critical</font><font color="#CCCCCC"> when you're</font>

121
00:05:32,100 --> 00:05:34,979
worrying about<font color="#E5E5E5"> a process are being</font>

122
00:05:33,479 --> 00:05:37,260
<font color="#E5E5E5">correct because if something's already</font>

123
00:05:34,979 --> 00:05:39,630
<font color="#E5E5E5">always connected to</font><font color="#CCCCCC"> the same thing</font>

124
00:05:37,260 --> 00:05:41,430
<font color="#E5E5E5">there's a good chance you'll spot when</font>

125
00:05:39,630 --> 00:05:43,140
you get it wrong<font color="#CCCCCC"> you know if you're if</font>

126
00:05:41,430 --> 00:05:44,520
<font color="#E5E5E5">you got the wrong</font><font color="#CCCCCC"> information there</font><font color="#E5E5E5"> if</font>

127
00:05:43,140 --> 00:05:47,430
you keep switching from one<font color="#E5E5E5"> thing to</font>

128
00:05:44,520 --> 00:05:49,620
another<font color="#E5E5E5"> it's very easy</font><font color="#CCCCCC"> to switch</font><font color="#E5E5E5"> to the</font>

129
00:05:47,430 --> 00:05:51,870
wrong thing or<font color="#E5E5E5"> to sometimes have the</font>

130
00:05:49,620 --> 00:05:53,700
wrong<font color="#E5E5E5"> information and on there on an</font>

131
00:05:51,870 --> 00:05:55,950
input<font color="#E5E5E5"> and not really realize it</font><font color="#CCCCCC"> because</font>

132
00:05:53,700 --> 00:05:58,229
<font color="#E5E5E5">you're not selected so the</font><font color="#CCCCCC"> Mocs is again</font>

133
00:05:55,950 --> 00:06:01,320
<font color="#E5E5E5">little</font><font color="#CCCCCC"> itty bitty boxes don't</font><font color="#E5E5E5"> look</font><font color="#CCCCCC"> very</font>

134
00:05:58,229 --> 00:06:04,200
significant that's where a<font color="#CCCCCC"> loss of bugs</font>

135
00:06:01,320 --> 00:06:05,789
will occur is in those<font color="#E5E5E5"> little boxes but</font>

136
00:06:04,200 --> 00:06:07,770
anyway we've got a processor I've

137
00:06:05,789 --> 00:06:11,400
simplified it<font color="#CCCCCC"> down</font><font color="#E5E5E5"> so it's</font><font color="#CCCCCC"> really just</font>

138
00:06:07,770 --> 00:06:13,979
<font color="#E5E5E5">getting one pipeline stage one time say</font>

139
00:06:11,400 --> 00:06:16,049
taken to go from wanting<font color="#CCCCCC"> to</font><font color="#E5E5E5"> fiction</font>

140
00:06:13,979 --> 00:06:18,000
instruction with all the way around<font color="#E5E5E5"> to</font>

141
00:06:16,050 --> 00:06:21,720
<font color="#CCCCCC">you've executed</font><font color="#E5E5E5"> instruction</font><font color="#CCCCCC"> and written</font>

142
00:06:18,000 --> 00:06:23,190
back the results the register file<font color="#CCCCCC"> so</font>

143
00:06:21,720 --> 00:06:29,910
it's about as<font color="#CCCCCC"> simple</font><font color="#E5E5E5"> as you</font><font color="#CCCCCC"> can make a</font>

144
00:06:23,190 --> 00:06:31,950
processor now having done<font color="#E5E5E5"> that</font><font color="#CCCCCC"> the</font>

145
00:06:29,910 --> 00:06:35,430
remember the hero is<font color="#CCCCCC"> the verifier and</font>

146
00:06:31,950 --> 00:06:36,750
we're wondering<font color="#E5E5E5"> well does it work</font><font color="#CCCCCC"> so how</font>

147
00:06:35,430 --> 00:06:37,770
do we<font color="#E5E5E5"> check if something works well we</font>

148
00:06:36,750 --> 00:06:43,560
test it

149
00:06:37,770 --> 00:06:45,419
so what what<font color="#E5E5E5"> can</font><font color="#CCCCCC"> attest we</font><font color="#E5E5E5"> run</font><font color="#CCCCCC"> I I'm</font>

150
00:06:43,560 --> 00:06:47,310
guessing most of<font color="#E5E5E5"> your more software</font>

151
00:06:45,419 --> 00:06:49,469
<font color="#E5E5E5">people and hardware people but it's the</font>

152
00:06:47,310 --> 00:06:51,090
<font color="#E5E5E5">same either way</font><font color="#CCCCCC"> if you want to check</font>

153
00:06:49,470 --> 00:06:53,460
<font color="#CCCCCC">something</font><font color="#E5E5E5"> you just kind of make a list</font>

154
00:06:51,090 --> 00:06:55,530
of<font color="#E5E5E5"> all the functionality you might have</font>

155
00:06:53,460 --> 00:06:57,568
all the weird corner<font color="#E5E5E5"> cases you're</font><font color="#CCCCCC"> gonna</font>

156
00:06:55,530 --> 00:06:59,099
<font color="#E5E5E5">worry about and that gives you a bunch</font>

157
00:06:57,569 --> 00:07:01,979
<font color="#E5E5E5">of cases that you ought to consider</font>

158
00:06:59,099 --> 00:07:04,169
<font color="#E5E5E5">testing</font><font color="#CCCCCC"> and then once you've got that</font>

159
00:07:01,979 --> 00:07:06,300
<font color="#CCCCCC">you then decide well how many tests so</font>

160
00:07:04,169 --> 00:07:08,370
want for each case<font color="#E5E5E5"> and if it doesn't</font>

161
00:07:06,300 --> 00:07:08,580
<font color="#E5E5E5">matter matter much whether it works or</font>

162
00:07:08,370 --> 00:07:13,409
not

163
00:07:08,580 --> 00:07:15,840
then yeah you know maybe one test<font color="#E5E5E5"> for</font>

164
00:07:13,409 --> 00:07:16,770
every<font color="#CCCCCC"> 10</font><font color="#E5E5E5"> cases is good enough right</font><font color="#CCCCCC"> you</font>

165
00:07:15,840 --> 00:07:19,409
know<font color="#E5E5E5"> that's what I do in my hobby</font>

166
00:07:16,770 --> 00:07:22,889
projects<font color="#CCCCCC"> if you're a bit more</font><font color="#E5E5E5"> serious</font>

167
00:07:19,409 --> 00:07:25,319
maybe you want<font color="#CCCCCC"> one test per case 50,000</font>

168
00:07:22,889 --> 00:07:28,889
you need a million<font color="#E5E5E5"> how</font><font color="#CCCCCC"> much is it gonna</font>

169
00:07:25,319 --> 00:07:31,590
cost<font color="#E5E5E5"> if it goes wrong yeah</font><font color="#CCCCCC"> how bad how</font>

170
00:07:28,889 --> 00:07:33,930
hard will<font color="#CCCCCC"> it be to replace it so you</font>

171
00:07:31,590 --> 00:07:35,400
come<font color="#E5E5E5"> up with you play around with this</font>

172
00:07:33,930 --> 00:07:37,110
<font color="#E5E5E5">and you decide how</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> tests and you</font>

173
00:07:35,400 --> 00:07:43,948
want to do<font color="#E5E5E5"> so that's the traditional way</font>

174
00:07:37,110 --> 00:07:45,360
<font color="#CCCCCC">of checking the</font><font color="#E5E5E5"> processors right oh but</font>

175
00:07:43,949 --> 00:07:48,330
before<font color="#E5E5E5"> we get</font><font color="#CCCCCC"> one to</font><font color="#E5E5E5"> the less</font>

176
00:07:45,360 --> 00:07:50,370
traditional the modern way<font color="#CCCCCC"> let's think</font>

177
00:07:48,330 --> 00:07:52,409
about we've<font color="#E5E5E5"> got our tests now we need to</font>

178
00:07:50,370 --> 00:07:55,080
<font color="#E5E5E5">think</font><font color="#CCCCCC"> about running them</font><font color="#E5E5E5"> so we've got a</font>

179
00:07:52,409 --> 00:07:56,550
processor and we can run<font color="#CCCCCC"> some programs</font>

180
00:07:55,080 --> 00:07:57,810
on them<font color="#E5E5E5"> but how will</font><font color="#CCCCCC"> we know if the</font>

181
00:07:56,550 --> 00:08:00,990
program<font color="#E5E5E5"> did the right thing</font>

182
00:07:57,810 --> 00:08:03,630
well organ at<font color="#CCCCCC"> one cesare a reference</font>

183
00:08:00,990 --> 00:08:05,580
<font color="#E5E5E5">that we can compare against so this</font>

184
00:08:03,630 --> 00:08:07,169
might<font color="#CCCCCC"> be a simulator</font><font color="#E5E5E5"> or it might be your</font>

185
00:08:05,580 --> 00:08:09,479
<font color="#E5E5E5">friend is also implementing the same</font>

186
00:08:07,169 --> 00:08:11,580
processor and so he's<font color="#E5E5E5"> got another</font>

187
00:08:09,479 --> 00:08:14,219
implementation<font color="#CCCCCC"> and he's smarter than you</font>

188
00:08:11,580 --> 00:08:16,409
so maybe<font color="#E5E5E5"> he's put less bugs in it or</font>

189
00:08:14,219 --> 00:08:18,360
<font color="#E5E5E5">maybe</font><font color="#CCCCCC"> because he's smarter than you</font><font color="#E5E5E5"> he</font>

190
00:08:16,409 --> 00:08:20,279
got<font color="#E5E5E5"> too clever and</font><font color="#CCCCCC"> he put more bugs into</font>

191
00:08:18,360 --> 00:08:21,090
<font color="#E5E5E5">it but</font><font color="#CCCCCC"> either way you're</font><font color="#E5E5E5"> hoping</font><font color="#CCCCCC"> he's got</font>

192
00:08:20,279 --> 00:08:23,370
<font color="#CCCCCC">different bugs</font>

193
00:08:21,090 --> 00:08:24,750
<font color="#E5E5E5">all right so you've got a reference to</font>

194
00:08:23,370 --> 00:08:27,000
compare<font color="#E5E5E5"> against and then you can just</font>

195
00:08:24,750 --> 00:08:29,219
take<font color="#E5E5E5"> all the individual parts</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

196
00:08:27,000 --> 00:08:31,860
state of the processor and compare them

197
00:08:29,219 --> 00:08:36,958
and so we can run<font color="#E5E5E5"> tests through that and</font>

198
00:08:31,860 --> 00:08:39,180
we're quite<font color="#CCCCCC"> happy but instead</font><font color="#E5E5E5"> of just</font>

199
00:08:36,958 --> 00:08:43,588
<font color="#CCCCCC">running tests there's another way</font><font color="#E5E5E5"> using</font>

200
00:08:39,179 --> 00:08:46,560
a formal verification<font color="#CCCCCC"> air tools which we</font>

201
00:08:43,589 --> 00:08:49,170
use so there are tools which<font color="#E5E5E5"> will take</font>

202
00:08:46,560 --> 00:08:50,699
<font color="#E5E5E5">two circuits and compare them</font><font color="#CCCCCC"> to tell</font>

203
00:08:49,170 --> 00:08:51,810
you whether they're exactly equivalent

204
00:08:50,699 --> 00:08:53,939
<font color="#E5E5E5">to each other</font>

205
00:08:51,810 --> 00:08:57,359
okay so in the industry<font color="#CCCCCC"> those are called</font>

206
00:08:53,939 --> 00:08:59,189
logical equivalence<font color="#E5E5E5"> checkers</font><font color="#CCCCCC"> you also</font>

207
00:08:57,360 --> 00:09:00,990
hear people<font color="#E5E5E5"> talking about sat solvers</font>

208
00:08:59,189 --> 00:09:06,029
which are slightly<font color="#E5E5E5"> more flexible version</font>

209
00:09:00,990 --> 00:09:08,339
of the same<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> and what these do</font><font color="#E5E5E5"> is</font>

210
00:09:06,029 --> 00:09:13,079
you see well<font color="#E5E5E5"> let's take every possible</font>

211
00:09:08,339 --> 00:09:14,910
state we could a<font color="#E5E5E5"> sarten</font><font color="#CCCCCC"> all possible</font>

212
00:09:13,079 --> 00:09:17,219
instructions we could think<font color="#E5E5E5"> of executing</font>

213
00:09:14,910 --> 00:09:19,709
all possible contents of memory<font color="#E5E5E5"> and then</font>

214
00:09:17,220 --> 00:09:22,379
just check that these two circuits are

215
00:09:19,709 --> 00:09:25,800
going to do exactly<font color="#CCCCCC"> the same thing no</font>

216
00:09:22,379 --> 00:09:27,809
matter<font color="#CCCCCC"> what</font><font color="#E5E5E5"> so the beautiful</font><font color="#CCCCCC"> thing about</font>

217
00:09:25,800 --> 00:09:29,969
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is you don't</font><font color="#E5E5E5"> have to think about</font>

218
00:09:27,809 --> 00:09:32,279
<font color="#E5E5E5">testing right because it just tries</font>

219
00:09:29,970 --> 00:09:34,589
<font color="#E5E5E5">everything it uses it doesn't brute</font>

220
00:09:32,279 --> 00:09:37,199
<font color="#E5E5E5">force it that would be too hard it uses</font>

221
00:09:34,589 --> 00:09:40,620
<font color="#CCCCCC">sort of various mathematical tricks to</font>

222
00:09:37,199 --> 00:09:43,529
try to<font color="#E5E5E5"> reduce the</font><font color="#CCCCCC"> number of things it</font>

223
00:09:40,620 --> 00:09:44,999
<font color="#CCCCCC">has to err check but it's doing</font>

224
00:09:43,529 --> 00:09:47,069
something<font color="#E5E5E5"> privileged checking for all</font>

225
00:09:44,999 --> 00:09:51,899
possible inputs that these circuits are

226
00:09:47,069 --> 00:09:54,209
<font color="#E5E5E5">equivalent to each other so you don't</font>

227
00:09:51,899 --> 00:09:56,670
<font color="#CCCCCC">need to</font><font color="#E5E5E5"> think of any test which is great</font>

228
00:09:54,209 --> 00:10:02,008
<font color="#E5E5E5">because I hate thinking about</font><font color="#CCCCCC"> tests it's</font>

229
00:09:56,670 --> 00:10:04,019
just not fun right<font color="#CCCCCC"> so this will</font><font color="#E5E5E5"> make up</font>

230
00:10:02,009 --> 00:10:05,339
<font color="#CCCCCC">the test</font><font color="#E5E5E5"> for you and think of all the</font>

231
00:10:04,019 --> 00:10:08,100
<font color="#CCCCCC">things</font><font color="#E5E5E5"> are things you should have been</font>

232
00:10:05,339 --> 00:10:11,209
<font color="#E5E5E5">thinking of testing that you forgot the</font>

233
00:10:08,100 --> 00:10:15,750
really nice tools when<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can use them</font>

234
00:10:11,209 --> 00:10:20,309
<font color="#E5E5E5">okay so that's us at the start of this</font>

235
00:10:15,750 --> 00:10:22,319
cycle<font color="#CCCCCC"> so we're on the end of we've got</font>

236
00:10:20,309 --> 00:10:25,430
<font color="#CCCCCC">something</font><font color="#E5E5E5"> that's correct but possibly</font>

237
00:10:22,319 --> 00:10:27,990
slow<font color="#E5E5E5"> so now I'm going to look at a</font>

238
00:10:25,430 --> 00:10:29,849
simple optimization which people<font color="#CCCCCC"> always</font>

239
00:10:27,990 --> 00:10:38,629
do to this kind<font color="#E5E5E5"> of processor which will</font>

240
00:10:29,850 --> 00:10:43,429
make it<font color="#E5E5E5"> a bit</font><font color="#CCCCCC"> faster so the processor a</font>

241
00:10:38,629 --> 00:10:45,959
kind of<font color="#E5E5E5"> did a the work in two stages</font>

242
00:10:43,429 --> 00:10:48,600
<font color="#CCCCCC">remember it</font><font color="#E5E5E5"> started off by</font><font color="#CCCCCC"> fetching an</font>

243
00:10:45,959 --> 00:10:54,179
instruction and decoding it and then in

244
00:10:48,600 --> 00:10:56,850
<font color="#E5E5E5">the second phase of execution a it's</font>

245
00:10:54,179 --> 00:11:00,029
it's kind of adding results<font color="#CCCCCC"> it's writing</font>

246
00:10:56,850 --> 00:11:02,519
<font color="#E5E5E5">them</font><font color="#CCCCCC"> two registers and so on and plus</font>

247
00:11:00,029 --> 00:11:05,699
it's fishing<font color="#CCCCCC"> you don't know what the</font>

248
00:11:02,519 --> 00:11:08,009
<font color="#E5E5E5">right-hand side</font><font color="#CCCCCC"> that they ALU the memory</font>

249
00:11:05,699 --> 00:11:11,309
be doing<font color="#E5E5E5"> suicidal and once</font><font color="#CCCCCC"> you've</font>

250
00:11:08,009 --> 00:11:14,879
<font color="#CCCCCC">fashioned decoded something you can't do</font>

251
00:11:11,309 --> 00:11:17,639
anything<font color="#E5E5E5"> because a you know you've got</font>

252
00:11:14,879 --> 00:11:19,889
to wait until<font color="#CCCCCC"> they execute unit finishes</font>

253
00:11:17,639 --> 00:11:23,509
and so designers<font color="#E5E5E5"> hate this kind of thing</font>

254
00:11:19,889 --> 00:11:25,980
<font color="#CCCCCC">Hardware sitting idle I hate that so</font>

255
00:11:23,509 --> 00:11:28,290
standard technique is say instruction

256
00:11:25,980 --> 00:11:29,699
pipelining<font color="#E5E5E5"> and with instruction</font>

257
00:11:28,290 --> 00:11:30,660
pipelining<font color="#CCCCCC"> what we're going to</font><font color="#E5E5E5"> do is</font>

258
00:11:29,699 --> 00:11:35,309
we're<font color="#E5E5E5"> going to double the clock</font>

259
00:11:30,660 --> 00:11:37,439
frequency and and then while we're

260
00:11:35,309 --> 00:11:40,169
executing the<font color="#E5E5E5"> first instruction doing</font>

261
00:11:37,439 --> 00:11:41,549
the<font color="#E5E5E5"> arithmetic or memory access</font><font color="#CCCCCC"> we're</font>

262
00:11:40,169 --> 00:11:43,529
going to be at the same time fetching

263
00:11:41,549 --> 00:11:45,329
the second instruction<font color="#E5E5E5"> while we're</font>

264
00:11:43,529 --> 00:11:46,649
executing that second<font color="#E5E5E5"> instruction will</font>

265
00:11:45,329 --> 00:11:48,179
be fetching the third while we're

266
00:11:46,649 --> 00:11:49,199
executing the third what we're facing

267
00:11:48,179 --> 00:11:50,970
the fourth and<font color="#E5E5E5"> so on</font>

268
00:11:49,199 --> 00:11:53,248
you get<font color="#CCCCCC"> read double performance</font><font color="#E5E5E5"> all</font>

269
00:11:50,970 --> 00:11:55,859
<font color="#E5E5E5">right so this is</font><font color="#CCCCCC"> a technique IBM came up</font>

270
00:11:53,249 --> 00:11:58,769
with in the<font color="#E5E5E5"> 60s it hits micro processors</font>

271
00:11:55,859 --> 00:12:01,639
and the mid-eighties<font color="#CCCCCC"> a very common</font>

272
00:11:58,769 --> 00:12:04,769
technique and so here's the<font color="#CCCCCC"> the</font>

273
00:12:01,639 --> 00:12:06,989
processor with a little bit more of<font color="#E5E5E5"> it I</font>

274
00:12:04,769 --> 00:12:09,959
was<font color="#E5E5E5"> looking over a restored</font><font color="#CCCCCC"> there's this</font>

275
00:12:06,989 --> 00:12:12,480
green bar down the middle<font color="#E5E5E5"> and that green</font>

276
00:12:09,959 --> 00:12:15,988
bar is a bunch of pipeline registers

277
00:12:12,480 --> 00:12:18,600
<font color="#E5E5E5">it's remembering a can the first</font>

278
00:12:15,989 --> 00:12:20,369
instruction<font color="#E5E5E5"> it fetched a while it's</font>

279
00:12:18,600 --> 00:12:22,350
executing that<font color="#E5E5E5"> and that leaves the</font>

280
00:12:20,369 --> 00:12:26,539
<font color="#CCCCCC">left-hand side is</font><font color="#E5E5E5"> now free</font><font color="#CCCCCC"> to start</font>

281
00:12:22,350 --> 00:12:28,919
fetching the the second instruction<font color="#E5E5E5"> so</font>

282
00:12:26,539 --> 00:12:33,209
instruction<font color="#E5E5E5"> pipelining is a pretty</font>

283
00:12:28,919 --> 00:12:35,759
<font color="#E5E5E5">common thing and what we want to do now</font>

284
00:12:33,209 --> 00:12:41,339
<font color="#CCCCCC">is a check to see if we've introduced</font>

285
00:12:35,759 --> 00:12:42,600
any bugs<font color="#E5E5E5"> in there in doing this so how</font>

286
00:12:41,339 --> 00:12:45,209
are we<font color="#E5E5E5"> going to do</font><font color="#CCCCCC"> that well let's start</font>

287
00:12:42,600 --> 00:12:46,709
<font color="#E5E5E5">with the the reference circuit so we've</font>

288
00:12:45,209 --> 00:12:48,209
got a<font color="#E5E5E5"> reference circuit and the</font>

289
00:12:46,709 --> 00:12:49,498
<font color="#CCCCCC">processor is going to</font><font color="#E5E5E5"> be executing two</font>

290
00:12:48,209 --> 00:12:50,819
instructions at a time

291
00:12:49,499 --> 00:12:54,749
so I'm actually going<font color="#E5E5E5"> to want</font><font color="#CCCCCC"> to check</font>

292
00:12:50,819 --> 00:12:57,988
both instructions<font color="#CCCCCC"> and so I'll</font><font color="#E5E5E5"> put in two</font>

293
00:12:54,749 --> 00:13:00,179
<font color="#E5E5E5">copies of the a of the reference circuit</font>

294
00:12:57,989 --> 00:13:02,579
<font color="#E5E5E5">and I'll just connect the output the</font>

295
00:13:00,179 --> 00:13:05,309
<font color="#CCCCCC">final state of</font><font color="#E5E5E5"> the first circuit into</font>

296
00:13:02,579 --> 00:13:06,719
the a starting<font color="#E5E5E5"> state of the next circuit</font>

297
00:13:05,309 --> 00:13:09,059
right so that's<font color="#E5E5E5"> just going to execute</font>

298
00:13:06,720 --> 00:13:11,039
two instructions in sequence<font color="#CCCCCC"> and then</font>

299
00:13:09,059 --> 00:13:13,529
I'm going<font color="#E5E5E5"> to do the same thing with the</font>

300
00:13:11,039 --> 00:13:15,029
processor that<font color="#E5E5E5"> I want to check so I'm</font>

301
00:13:13,529 --> 00:13:17,970
going<font color="#CCCCCC"> to make two copies of</font><font color="#E5E5E5"> that and</font>

302
00:13:15,029 --> 00:13:18,770
<font color="#E5E5E5">again I'm going to add in</font><font color="#CCCCCC"> some data</font>

303
00:13:17,970 --> 00:13:22,280
paths

304
00:13:18,770 --> 00:13:26,150
so that the final state<font color="#CCCCCC"> of the first</font>

305
00:13:22,280 --> 00:13:29,240
processor gets copied over into<font color="#E5E5E5"> the into</font>

306
00:13:26,150 --> 00:13:30,860
the final<font color="#E5E5E5"> and intermediate state so</font><font color="#CCCCCC"> that</font>

307
00:13:29,240 --> 00:13:35,240
first processor gets copied into the

308
00:13:30,860 --> 00:13:38,740
next processor so I'm<font color="#E5E5E5"> gonna forward</font><font color="#CCCCCC"> that</font>

309
00:13:35,240 --> 00:13:39,920
<font color="#E5E5E5">to that data over and then I'll add the</font>

310
00:13:38,740 --> 00:13:44,450
<font color="#E5E5E5">checkers</font>

311
00:13:39,920 --> 00:13:45,949
so this that's probably feels like<font color="#E5E5E5"> it</font>

312
00:13:44,450 --> 00:13:47,630
<font color="#CCCCCC">might be a little</font><font color="#E5E5E5"> complicated</font><font color="#CCCCCC"> to do</font>

313
00:13:45,950 --> 00:13:50,980
<font color="#E5E5E5">fortunately there are tools which will</font>

314
00:13:47,630 --> 00:13:54,920
do it which I'll mention a bit later on

315
00:13:50,980 --> 00:13:58,520
<font color="#CCCCCC">but what I have now</font><font color="#E5E5E5"> is something where I</font>

316
00:13:54,920 --> 00:14:00,560
<font color="#E5E5E5">can feed you two instructions into this</font>

317
00:13:58,520 --> 00:14:04,960
processor and check that the board is

318
00:14:00,560 --> 00:14:08,239
<font color="#CCCCCC">going to execute correctly and again the</font>

319
00:14:04,960 --> 00:14:10,580
is formal verification tools<font color="#CCCCCC"> will just</font>

320
00:14:08,240 --> 00:14:12,980
check<font color="#CCCCCC"> for all possible pairs of</font>

321
00:14:10,580 --> 00:14:14,950
instructions<font color="#E5E5E5"> all possible initial</font><font color="#CCCCCC"> States</font>

322
00:14:12,980 --> 00:14:19,640
<font color="#E5E5E5">so I don't have to come up</font><font color="#CCCCCC"> with tests</font>

323
00:14:14,950 --> 00:14:22,670
but as I say<font color="#E5E5E5"> I can also use testing</font>

324
00:14:19,640 --> 00:14:26,120
<font color="#E5E5E5">right I can just run one processor</font>

325
00:14:22,670 --> 00:14:29,810
against<font color="#E5E5E5"> one reference and check</font><font color="#CCCCCC"> for bugs</font>

326
00:14:26,120 --> 00:14:31,790
<font color="#E5E5E5">the usual way whichever one I do</font><font color="#CCCCCC"> a</font>

327
00:14:29,810 --> 00:14:34,459
problem is probably not going to<font color="#E5E5E5"> be very</font>

328
00:14:31,790 --> 00:14:36,140
<font color="#E5E5E5">long before</font><font color="#CCCCCC"> I run</font><font color="#E5E5E5"> into a bug</font><font color="#CCCCCC"> that looks</font>

329
00:14:34,460 --> 00:14:38,180
a little bit<font color="#E5E5E5"> like this</font><font color="#CCCCCC"> a branch</font>

330
00:14:36,140 --> 00:14:43,310
instruction followed by well pretty much

331
00:14:38,180 --> 00:14:45,739
<font color="#E5E5E5">anything because that style of processor</font>

332
00:14:43,310 --> 00:14:49,189
that<font color="#E5E5E5"> I just showed you is prone to our</font>

333
00:14:45,740 --> 00:14:52,460
bug that occurs after branch

334
00:14:49,190 --> 00:14:54,500
instructions<font color="#E5E5E5"> so what goes wrong in</font>

335
00:14:52,460 --> 00:14:56,450
branch instructions well let's<font color="#E5E5E5"> think</font>

336
00:14:54,500 --> 00:14:59,780
about how<font color="#CCCCCC"> the pipeline is going to be</font>

337
00:14:56,450 --> 00:15:01,550
executing this<font color="#E5E5E5"> so at the same time</font><font color="#CCCCCC"> as</font>

338
00:14:59,780 --> 00:15:03,199
<font color="#CCCCCC">let's say executing the the</font><font color="#E5E5E5"> previous</font>

339
00:15:01,550 --> 00:15:07,250
<font color="#CCCCCC">instruction I was fetching the branch</font>

340
00:15:03,200 --> 00:15:08,630
then<font color="#E5E5E5"> next clock cycle</font><font color="#CCCCCC"> I move on and I</font>

341
00:15:07,250 --> 00:15:10,430
start to execute<font color="#E5E5E5"> the branch instruction</font>

342
00:15:08,630 --> 00:15:13,670
to figure out where I<font color="#E5E5E5"> should branch to</font>

343
00:15:10,430 --> 00:15:16,969
PC plus 100 and at the same time I'm

344
00:15:13,670 --> 00:15:19,430
fetching the add instruction<font color="#E5E5E5"> then in the</font>

345
00:15:16,970 --> 00:15:23,270
next cycle<font color="#CCCCCC"> everything moves forward and</font>

346
00:15:19,430 --> 00:15:25,540
I go to execute<font color="#E5E5E5"> the add instruction but</font>

347
00:15:23,270 --> 00:15:28,819
why am i executing the add instruction

348
00:15:25,540 --> 00:15:30,199
<font color="#E5E5E5">because that branch</font><font color="#CCCCCC"> sorry I shouldn't</font>

349
00:15:28,820 --> 00:15:32,449
point<font color="#E5E5E5"> at my screen I should point there</font>

350
00:15:30,200 --> 00:15:34,519
perhaps the the branch<font color="#CCCCCC"> instruction</font>

351
00:15:32,449 --> 00:15:36,019
is telling me not to<font color="#E5E5E5"> execute the next</font>

352
00:15:34,519 --> 00:15:37,699
instruction it's telling me<font color="#CCCCCC"> to go off</font>

353
00:15:36,019 --> 00:15:41,809
<font color="#CCCCCC">somewhere else</font><font color="#E5E5E5"> and execute that</font><font color="#CCCCCC"> and said</font>

354
00:15:37,699 --> 00:15:43,790
but what's happening is I will<font color="#CCCCCC"> always</font>

355
00:15:41,809 --> 00:15:48,169
execute the instruction<font color="#CCCCCC"> immediately</font>

356
00:15:43,790 --> 00:15:51,949
after a branch<font color="#CCCCCC"> so</font><font color="#E5E5E5"> the several ways of</font>

357
00:15:48,169 --> 00:15:56,319
thinking about what's happened here<font color="#E5E5E5"> one</font>

358
00:15:51,949 --> 00:15:59,689
is and is<font color="#E5E5E5"> to say that this is a bug</font>

359
00:15:56,319 --> 00:16:01,519
that's<font color="#CCCCCC"> a pretty common opinion</font><font color="#E5E5E5"> these</font>

360
00:15:59,689 --> 00:16:03,219
days that you're after<font color="#E5E5E5"> a branch you</font>

361
00:16:01,519 --> 00:16:06,559
<font color="#E5E5E5">always execute an instruction</font>

362
00:16:03,220 --> 00:16:09,079
<font color="#E5E5E5">immediately after but they tighten that</font>

363
00:16:06,559 --> 00:16:11,389
<font color="#E5E5E5">people started pipelining</font><font color="#CCCCCC"> microsensors</font>

364
00:16:09,079 --> 00:16:14,299
<font color="#E5E5E5">there was another opinion which was say</font>

365
00:16:11,389 --> 00:16:16,069
it's not<font color="#E5E5E5"> a bug</font><font color="#CCCCCC"> it's a feature</font><font color="#E5E5E5"> and they</font>

366
00:16:14,299 --> 00:16:17,059
<font color="#CCCCCC">give</font><font color="#E5E5E5"> that feature a</font><font color="#CCCCCC"> special name so that</font>

367
00:16:16,069 --> 00:16:19,339
<font color="#CCCCCC">you</font><font color="#E5E5E5"> would know it</font><font color="#CCCCCC"> was a feature</font>

368
00:16:17,059 --> 00:16:22,059
definitely not a bug<font color="#E5E5E5"> so it's called a</font>

369
00:16:19,339 --> 00:16:25,939
branch delay slot they were very popular

370
00:16:22,059 --> 00:16:28,219
at the<font color="#CCCCCC"> time in</font><font color="#E5E5E5"> earliest processors</font><font color="#CCCCCC"> they</font>

371
00:16:25,939 --> 00:16:31,009
kind of fell out<font color="#CCCCCC"> of favor</font><font color="#E5E5E5"> later because</font>

372
00:16:28,220 --> 00:16:32,600
if you try to claim that every<font color="#E5E5E5"> single</font>

373
00:16:31,009 --> 00:16:35,480
bug you put in your processor<font color="#E5E5E5"> is</font>

374
00:16:32,600 --> 00:16:37,069
actually a feature<font color="#E5E5E5"> then it's very hard</font>

375
00:16:35,480 --> 00:16:39,199
to<font color="#E5E5E5"> make the second processor have</font>

376
00:16:37,069 --> 00:16:40,849
exactly the same set<font color="#CCCCCC"> of bugs and of</font>

377
00:16:39,199 --> 00:16:42,769
course it's gonna<font color="#CCCCCC"> add some new bugs of</font>

378
00:16:40,850 --> 00:16:44,959
its own<font color="#E5E5E5"> so then your third process</font>

379
00:16:42,769 --> 00:16:47,029
<font color="#CCCCCC">becomes really</font><font color="#E5E5E5"> hard</font><font color="#CCCCCC"> you've got to get</font>

380
00:16:44,959 --> 00:16:48,829
all the old<font color="#E5E5E5"> bugs and then persuade</font>

381
00:16:47,029 --> 00:16:52,850
people<font color="#E5E5E5"> that the new bugs are features as</font>

382
00:16:48,829 --> 00:16:55,219
well<font color="#E5E5E5"> so nowadays people tend not to put</font>

383
00:16:52,850 --> 00:16:57,410
this kind<font color="#CCCCCC"> of thing in in a processor</font>

384
00:16:55,220 --> 00:17:01,879
architecture they<font color="#CCCCCC"> admit it's a bug and</font>

385
00:16:57,410 --> 00:17:03,649
<font color="#E5E5E5">they fix it and I the usual way</font><font color="#CCCCCC"> of</font>

386
00:17:01,879 --> 00:17:05,510
fixing<font color="#E5E5E5"> it is that when you see you</font>

387
00:17:03,649 --> 00:17:07,039
already execute a branch instruction<font color="#CCCCCC"> you</font>

388
00:17:05,510 --> 00:17:09,138
say well<font color="#CCCCCC"> let's just hold off and</font>

389
00:17:07,039 --> 00:17:11,148
fetching the next instruction until<font color="#CCCCCC"> I</font>

390
00:17:09,138 --> 00:17:13,428
know for sure whether I need it<font color="#E5E5E5"> that's</font>

391
00:17:11,148 --> 00:17:17,510
one solution so that's called stalling

392
00:17:13,429 --> 00:17:19,279
the pipeline<font color="#CCCCCC"> and another one</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> to go</font>

393
00:17:17,510 --> 00:17:20,990
<font color="#E5E5E5">you know what I'm</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> gonna go ahead</font>

394
00:17:19,279 --> 00:17:23,209
and<font color="#E5E5E5"> fetch it anyway you know what I</font>

395
00:17:20,990 --> 00:17:26,449
might even start<font color="#E5E5E5"> executing it</font><font color="#CCCCCC"> a little</font>

396
00:17:23,209 --> 00:17:29,720
<font color="#E5E5E5">bit but I'll only go so far in executing</font>

397
00:17:26,449 --> 00:17:32,389
it and hope<font color="#CCCCCC"> nobody notices if I end</font><font color="#E5E5E5"> up</font>

398
00:17:29,720 --> 00:17:33,649
having<font color="#CCCCCC"> to cancel</font><font color="#E5E5E5"> it so you your guess</font>

399
00:17:32,389 --> 00:17:35,600
<font color="#E5E5E5">that you might want to execute</font>

400
00:17:33,649 --> 00:17:37,129
instruction and then if you didn't need

401
00:17:35,600 --> 00:17:40,129
<font color="#E5E5E5">it</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can select quickly before anyone</font>

402
00:17:37,130 --> 00:17:41,840
<font color="#E5E5E5">notices and that's called speculation</font>

403
00:17:40,130 --> 00:17:44,840
<font color="#E5E5E5">which has been in the news a</font><font color="#CCCCCC"> lot</font>

404
00:17:41,840 --> 00:17:45,800
recently<font color="#CCCCCC"> by about this year because it</font>

405
00:17:44,840 --> 00:17:47,870
turns out<font color="#CCCCCC"> that some</font>

406
00:17:45,800 --> 00:17:53,030
people can<font color="#E5E5E5"> sports speculation</font><font color="#CCCCCC"> and turn</font>

407
00:17:47,870 --> 00:17:57,889
<font color="#CCCCCC">it into security</font><font color="#E5E5E5"> calls so well less sure</font>

408
00:17:53,030 --> 00:18:00,220
how to get<font color="#CCCCCC"> around</font><font color="#E5E5E5"> that one</font><font color="#CCCCCC"> okay so so</font>

409
00:17:57,890 --> 00:18:03,020
we've seen<font color="#E5E5E5"> we added an optimization</font>

410
00:18:00,220 --> 00:18:05,450
<font color="#E5E5E5">various ways of</font><font color="#CCCCCC"> testing and verifying it</font>

411
00:18:03,020 --> 00:18:07,850
and<font color="#E5E5E5"> we've got</font><font color="#CCCCCC"> a bug and let's imagine</font><font color="#E5E5E5"> of</font>

412
00:18:05,450 --> 00:18:11,390
<font color="#E5E5E5">putting a fix for it now having fixed</font>

413
00:18:07,850 --> 00:18:13,939
that<font color="#CCCCCC"> I want to check</font><font color="#E5E5E5"> this one did I fix</font>

414
00:18:11,390 --> 00:18:17,090
<font color="#E5E5E5">it and two other</font><font color="#CCCCCC"> any more bugs I should</font>

415
00:18:13,940 --> 00:18:19,640
worry about<font color="#CCCCCC"> so what am I gonna taste</font>

416
00:18:17,090 --> 00:18:21,740
well I've got<font color="#CCCCCC"> all my original instructor</font>

417
00:18:19,640 --> 00:18:23,630
air tests I started off with right you

418
00:18:21,740 --> 00:18:25,310
know it<font color="#CCCCCC"> doesn't add really add can add</font>

419
00:18:23,630 --> 00:18:27,980
big numbers and small<font color="#E5E5E5"> numbers</font><font color="#CCCCCC"> and so on</font>

420
00:18:25,310 --> 00:18:30,800
<font color="#E5E5E5">obviously</font><font color="#CCCCCC"> I'm gonna add a whole lot of</font>

421
00:18:27,980 --> 00:18:32,990
<font color="#E5E5E5">tests for branches because I now know</font><font color="#CCCCCC"> to</font>

422
00:18:30,800 --> 00:18:34,399
be<font color="#E5E5E5"> worried</font><font color="#CCCCCC"> about that</font><font color="#E5E5E5"> but is there</font>

423
00:18:32,990 --> 00:18:38,360
anything else I should<font color="#E5E5E5"> be worried about</font>

424
00:18:34,400 --> 00:18:40,550
in that processor huh I'm<font color="#E5E5E5"> not sure my</font>

425
00:18:38,360 --> 00:18:43,159
confidence is a bit<font color="#E5E5E5"> shaken now so I'm</font>

426
00:18:40,550 --> 00:18:45,470
<font color="#E5E5E5">gonna try and</font><font color="#CCCCCC"> think of</font><font color="#E5E5E5"> what makes peers</font>

427
00:18:43,160 --> 00:18:48,710
of instruction interesting and then I'm

428
00:18:45,470 --> 00:18:52,040
<font color="#CCCCCC">gonna taste all of those and this is</font>

429
00:18:48,710 --> 00:18:54,740
kind of black<font color="#E5E5E5"> magic experience asking</font>

430
00:18:52,040 --> 00:18:57,409
your friend what he tests<font color="#E5E5E5"> you know it's</font>

431
00:18:54,740 --> 00:18:59,060
<font color="#E5E5E5">a you</font><font color="#CCCCCC"> know it's it's hard to know you've</font>

432
00:18:57,410 --> 00:19:03,080
actually tasted<font color="#E5E5E5"> everything you need to</font>

433
00:18:59,060 --> 00:19:04,730
and<font color="#CCCCCC"> that just so it can emphasize it</font>

434
00:19:03,080 --> 00:19:06,830
that's where the formal verification

435
00:19:04,730 --> 00:19:08,840
techniques are really<font color="#E5E5E5"> helpful because</font>

436
00:19:06,830 --> 00:19:11,060
you<font color="#E5E5E5"> don't have to come up with lists of</font>

437
00:19:08,840 --> 00:19:13,459
peers of instructions it will<font color="#E5E5E5"> just test</font>

438
00:19:11,060 --> 00:19:16,730
a lot<font color="#E5E5E5"> okay</font>

439
00:19:13,460 --> 00:19:19,100
so I've gone one round through this

440
00:19:16,730 --> 00:19:22,280
cycle take a create process<font color="#CCCCCC"> I'll</font><font color="#E5E5E5"> make it</font>

441
00:19:19,100 --> 00:19:27,949
faster<font color="#E5E5E5"> but broken</font><font color="#CCCCCC"> finds and</font><font color="#E5E5E5"> bugs and fix</font>

442
00:19:22,280 --> 00:19:29,810
it<font color="#E5E5E5"> so that's an added that by going from</font>

443
00:19:27,950 --> 00:19:32,180
<font color="#E5E5E5">a one stage quite plain</font><font color="#CCCCCC"> to a two stage</font>

444
00:19:29,810 --> 00:19:34,730
pipeline<font color="#E5E5E5"> well what would be better than</font>

445
00:19:32,180 --> 00:19:38,660
<font color="#E5E5E5">a two stage pipeline</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> most people the</font>

446
00:19:34,730 --> 00:19:41,060
<font color="#CCCCCC">answer is a five stage pipeline</font><font color="#E5E5E5"> so that</font>

447
00:19:38,660 --> 00:19:44,210
with five stages we take<font color="#E5E5E5"> that original</font>

448
00:19:41,060 --> 00:19:46,159
diagram<font color="#E5E5E5"> I had and it had</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> five</font>

449
00:19:44,210 --> 00:19:49,540
major<font color="#CCCCCC"> steps in it and we make each of</font>

450
00:19:46,160 --> 00:19:52,550
those be one major<font color="#CCCCCC"> step in execution</font><font color="#E5E5E5"> and</font>

451
00:19:49,540 --> 00:19:54,950
what I'm going to do then is<font color="#E5E5E5"> have my</font>

452
00:19:52,550 --> 00:19:57,530
five pipelines each row in this<font color="#CCCCCC"> diagram</font>

453
00:19:54,950 --> 00:19:59,180
is busy<font color="#E5E5E5"> doing one of those five steps</font>

454
00:19:57,530 --> 00:20:01,510
and

455
00:19:59,180 --> 00:20:04,540
is that once it gets<font color="#CCCCCC"> up to</font><font color="#E5E5E5"> speed</font><font color="#CCCCCC"> I'm</font>

456
00:20:01,510 --> 00:20:06,680
executing<font color="#E5E5E5"> five instructions at once I'm</font>

457
00:20:04,540 --> 00:20:08,149
working from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> bottom upwards</font><font color="#E5E5E5"> I'm</font>

458
00:20:06,680 --> 00:20:09,980
racing back the results of the first

459
00:20:08,150 --> 00:20:11,690
<font color="#E5E5E5">instruction while I'm doing the memory</font>

460
00:20:09,980 --> 00:20:14,540
access for the second instruction<font color="#E5E5E5"> I'm</font>

461
00:20:11,690 --> 00:20:16,280
doing the<font color="#CCCCCC"> doing the arithmetic</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> the</font>

462
00:20:14,540 --> 00:20:19,520
third I'm decoding the fourth I'm

463
00:20:16,280 --> 00:20:21,410
fetching the<font color="#E5E5E5"> 1/5 so I'm keeping</font><font color="#CCCCCC"> all the</font>

464
00:20:19,520 --> 00:20:24,710
bits<font color="#E5E5E5"> of the hardware busy and this makes</font>

465
00:20:21,410 --> 00:20:26,870
a designer<font color="#E5E5E5"> really really happy and it</font>

466
00:20:24,710 --> 00:20:32,270
tends<font color="#CCCCCC"> to make the verifier a bit less</font>

467
00:20:26,870 --> 00:20:34,790
happy so let's<font color="#CCCCCC"> just</font><font color="#E5E5E5"> here's the here's</font>

468
00:20:32,270 --> 00:20:37,280
the original<font color="#CCCCCC"> sacher as</font><font color="#E5E5E5"> I downloaded</font><font color="#CCCCCC"> it</font>

469
00:20:34,790 --> 00:20:39,110
off of Wikipedia with all the pipeline

470
00:20:37,280 --> 00:20:41,540
stages they're shown so the pipeline

471
00:20:39,110 --> 00:20:47,060
stages are these big<font color="#CCCCCC"> vertical green bars</font>

472
00:20:41,540 --> 00:20:49,010
that<font color="#E5E5E5"> just capture the bit that was just</font>

473
00:20:47,060 --> 00:20:50,870
calculated and make it available<font color="#E5E5E5"> in the</font>

474
00:20:49,010 --> 00:20:55,490
<font color="#E5E5E5">next time step to the</font><font color="#CCCCCC"> next part of the</font>

475
00:20:50,870 --> 00:20:59,020
circuit<font color="#E5E5E5"> and what can I do to verify</font><font color="#CCCCCC"> this</font>

476
00:20:55,490 --> 00:21:02,510
<font color="#E5E5E5">well I've got the same option as before</font>

477
00:20:59,020 --> 00:21:05,240
<font color="#E5E5E5">one copy of the reference circuit one</font>

478
00:21:02,510 --> 00:21:08,000
copy of<font color="#E5E5E5"> the processor and then I had</font>

479
00:21:05,240 --> 00:21:09,620
some comparison logic to just compare

480
00:21:08,000 --> 00:21:12,680
<font color="#E5E5E5">them and then I can run all the tests I</font>

481
00:21:09,620 --> 00:21:15,080
want<font color="#CCCCCC"> and this I can a yeah I can run</font>

482
00:21:12,680 --> 00:21:16,970
lots of tests on it<font color="#E5E5E5"> so I'm a perfectly</font>

483
00:21:15,080 --> 00:21:19,699
<font color="#CCCCCC">happy with that</font><font color="#E5E5E5"> but if I want to do the</font>

484
00:21:16,970 --> 00:21:20,960
formal verification<font color="#E5E5E5"> then I'm going to do</font>

485
00:21:19,700 --> 00:21:24,140
something<font color="#E5E5E5"> similar</font><font color="#CCCCCC"> to what</font><font color="#E5E5E5"> I did</font>

486
00:21:20,960 --> 00:21:26,390
<font color="#E5E5E5">previously</font><font color="#CCCCCC"> when I had two copies of the</font>

487
00:21:24,140 --> 00:21:28,790
reference<font color="#E5E5E5"> two copies of</font><font color="#CCCCCC"> the processor</font>

488
00:21:26,390 --> 00:21:30,560
<font color="#E5E5E5">but I'm going to have the same it's a</font>

489
00:21:28,790 --> 00:21:33,320
<font color="#CCCCCC">five stage</font><font color="#E5E5E5"> pipeline so I'm going to have</font>

490
00:21:30,560 --> 00:21:35,540
five copies<font color="#CCCCCC"> of the reference and five</font>

491
00:21:33,320 --> 00:21:40,490
copies of<font color="#E5E5E5"> the processor so I can model</font>

492
00:21:35,540 --> 00:21:44,210
<font color="#E5E5E5">five instructions at once except this</font>

493
00:21:40,490 --> 00:21:46,490
may<font color="#E5E5E5"> not</font><font color="#CCCCCC"> be quite enough</font><font color="#E5E5E5"> because if you</font>

494
00:21:44,210 --> 00:21:49,250
<font color="#CCCCCC">remember</font><font color="#E5E5E5"> the fix for</font><font color="#CCCCCC"> that that's a</font>

495
00:21:46,490 --> 00:21:51,020
branch<font color="#CCCCCC"> err related bug</font><font color="#E5E5E5"> was that</font>

496
00:21:49,250 --> 00:21:53,390
<font color="#E5E5E5">sometimes instructions could get stalled</font>

497
00:21:51,020 --> 00:21:55,280
<font color="#E5E5E5">and if I'm stalling instructions they</font>

498
00:21:53,390 --> 00:21:56,840
may not<font color="#E5E5E5"> take five cycles to get all the</font>

499
00:21:55,280 --> 00:21:59,480
way down to the end<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> pipeline</font><font color="#E5E5E5"> they</font>

500
00:21:56,840 --> 00:22:02,720
may times sometimes<font color="#E5E5E5"> take six cycles so</font>

501
00:21:59,480 --> 00:22:04,670
I'd better add another stage and well

502
00:22:02,720 --> 00:22:06,470
maybe I could<font color="#E5E5E5"> have two instructions get</font>

503
00:22:04,670 --> 00:22:08,840
stalled or one gets stalled twice<font color="#CCCCCC"> as</font>

504
00:22:06,470 --> 00:22:11,750
<font color="#E5E5E5">long maybe I should add another stage so</font>

505
00:22:08,840 --> 00:22:12,620
I so I play<font color="#E5E5E5"> around with that try to get</font>

506
00:22:11,750 --> 00:22:15,470
<font color="#CCCCCC">the</font>

507
00:22:12,620 --> 00:22:18,590
the right<font color="#E5E5E5"> number</font><font color="#CCCCCC"> of steps I'm checking</font>

508
00:22:15,470 --> 00:22:20,059
<font color="#E5E5E5">so another site of I've labeled this</font>

509
00:22:18,590 --> 00:22:22,850
with its official<font color="#CCCCCC"> name this is called</font>

510
00:22:20,059 --> 00:22:25,399
<font color="#E5E5E5">bounded</font><font color="#CCCCCC"> model checking</font><font color="#E5E5E5"> not going to try</font>

511
00:22:22,850 --> 00:22:27,439
to<font color="#E5E5E5"> explain</font><font color="#CCCCCC"> what model checking means but</font>

512
00:22:25,400 --> 00:22:30,799
the bounded bit is simply this number of

513
00:22:27,440 --> 00:22:32,510
how<font color="#E5E5E5"> many copies I make so I started off</font>

514
00:22:30,799 --> 00:22:36,350
with a bound of<font color="#E5E5E5"> five I've increased such</font>

515
00:22:32,510 --> 00:22:38,929
a bound of seven<font color="#E5E5E5"> and as I say there are</font>

516
00:22:36,350 --> 00:22:40,699
tools<font color="#CCCCCC"> that will do</font><font color="#E5E5E5"> this little</font>

517
00:22:38,929 --> 00:22:42,429
<font color="#CCCCCC">transformation of making the multiple</font>

518
00:22:40,700 --> 00:22:46,220
copies and forwarding data between

519
00:22:42,429 --> 00:22:49,580
stages<font color="#CCCCCC"> they'll do</font><font color="#E5E5E5"> it for you those tools</font>

520
00:22:46,220 --> 00:22:52,640
like<font color="#CCCCCC"> OSIS which if anybody is into doing</font>

521
00:22:49,580 --> 00:22:58,428
<font color="#E5E5E5">open fpga work</font><font color="#CCCCCC"> you'll probably know</font>

522
00:22:52,640 --> 00:23:01,940
about<font color="#E5E5E5"> the the</font><font color="#CCCCCC"> OSIS air tools</font><font color="#E5E5E5"> those talks</font>

523
00:22:58,429 --> 00:23:05,720
about<font color="#E5E5E5"> using bounded model checking that</font>

524
00:23:01,940 --> 00:23:07,100
say you can get<font color="#E5E5E5"> hold of those</font><font color="#CCCCCC"> there's a</font>

525
00:23:05,720 --> 00:23:09,260
paper<font color="#E5E5E5"> that i mentioned right at</font><font color="#CCCCCC"> the</font>

526
00:23:07,100 --> 00:23:11,750
start that I wrote you can get hold of

527
00:23:09,260 --> 00:23:24,110
those blogs<font color="#E5E5E5"> so there's a</font><font color="#CCCCCC"> bunch of</font><font color="#E5E5E5"> links</font>

528
00:23:11,750 --> 00:23:26,960
there<font color="#CCCCCC"> that you can follow</font><font color="#E5E5E5"> I'm okay so we</font>

529
00:23:24,110 --> 00:23:29,479
run some<font color="#E5E5E5"> tests we do some</font><font color="#CCCCCC"> oh and let me</font>

530
00:23:26,960 --> 00:23:31,929
just<font color="#E5E5E5"> emphasize just once more that what</font>

531
00:23:29,480 --> 00:23:36,350
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is going</font><font color="#E5E5E5"> to do is it's</font><font color="#CCCCCC"> going to a</font>

532
00:23:31,929 --> 00:23:38,270
test any sequence<font color="#E5E5E5"> of instructions in</font>

533
00:23:36,350 --> 00:23:39,879
this<font color="#E5E5E5"> case any sequence of up</font><font color="#CCCCCC"> to seven</font>

534
00:23:38,270 --> 00:23:44,299
<font color="#E5E5E5">instructions are going to get checked</font>

535
00:23:39,880 --> 00:23:45,919
<font color="#E5E5E5">and for all possible inputs so it's</font>

536
00:23:44,299 --> 00:23:47,809
going<font color="#E5E5E5"> to run</font><font color="#CCCCCC"> through the first check</font>

537
00:23:45,919 --> 00:23:49,399
then the second and<font color="#E5E5E5"> third and so</font><font color="#CCCCCC"> on and</font>

538
00:23:47,809 --> 00:23:51,340
if it<font color="#CCCCCC"> manages</font><font color="#E5E5E5"> to get all the way to the</font>

539
00:23:49,399 --> 00:23:54,080
end<font color="#E5E5E5"> then you're going to know</font><font color="#CCCCCC"> that any</font>

540
00:23:51,340 --> 00:23:57,220
seven cycle sequence anywhere in

541
00:23:54,080 --> 00:23:59,928
execution is<font color="#E5E5E5"> going to behave correctly</font>

542
00:23:57,220 --> 00:24:04,730
<font color="#E5E5E5">so and you don't have to come up with</font>

543
00:23:59,929 --> 00:24:06,110
<font color="#CCCCCC">your own tests</font><font color="#E5E5E5"> so either through testing</font>

544
00:24:04,730 --> 00:24:08,720
or through this bounded<font color="#CCCCCC"> model checking</font>

545
00:24:06,110 --> 00:24:10,428
<font color="#E5E5E5">you will find another bug and this is</font>

546
00:24:08,720 --> 00:24:13,700
another<font color="#CCCCCC"> well-known bug in the style of</font>

547
00:24:10,429 --> 00:24:15,890
<font color="#CCCCCC">fare processor it was</font><font color="#E5E5E5"> actually fixed in</font>

548
00:24:13,700 --> 00:24:17,539
the next<font color="#CCCCCC"> generation of process so that</font>

549
00:24:15,890 --> 00:24:20,450
the picture<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> showing is of the MIPS</font>

550
00:24:17,539 --> 00:24:23,870
<font color="#E5E5E5">one the MIPS to fix this</font>

551
00:24:20,450 --> 00:24:26,370
so the bug involves a load<font color="#E5E5E5"> followed by a</font>

552
00:24:23,870 --> 00:24:28,739
store<font color="#E5E5E5"> so let's just</font>

553
00:24:26,370 --> 00:24:30,659
think about what's going<font color="#E5E5E5"> on when you</font>

554
00:24:28,740 --> 00:24:32,130
have<font color="#CCCCCC"> a lord followed by a store so I</font><font color="#E5E5E5"> was</font>

555
00:24:30,660 --> 00:24:34,320
kind of<font color="#E5E5E5"> assumed forward to the point</font>

556
00:24:32,130 --> 00:24:36,360
where the Lord is in the memory stage

557
00:24:34,320 --> 00:24:40,860
and the stories<font color="#E5E5E5"> behind it in the execute</font>

558
00:24:36,360 --> 00:24:42,959
<font color="#CCCCCC">stage</font><font color="#E5E5E5"> and so the Lord is busy it's got</font>

559
00:24:40,860 --> 00:24:45,689
an address<font color="#CCCCCC"> it hands that to the memory</font>

560
00:24:42,960 --> 00:24:47,490
<font color="#E5E5E5">and it reads back a value from the</font>

561
00:24:45,690 --> 00:24:50,010
memory<font color="#E5E5E5"> so now you've got a value from</font>

562
00:24:47,490 --> 00:24:55,050
memory<font color="#E5E5E5"> at the same</font><font color="#CCCCCC"> time that</font><font color="#E5E5E5"> that's</font>

563
00:24:50,010 --> 00:24:57,300
happening the store has finished reading

564
00:24:55,050 --> 00:24:59,040
<font color="#E5E5E5">some values from the register file and</font>

565
00:24:57,300 --> 00:25:02,940
it's sitting<font color="#CCCCCC"> in the execute stage</font>

566
00:24:59,040 --> 00:25:06,178
waiting<font color="#E5E5E5"> ready to execute so now let's go</font>

567
00:25:02,940 --> 00:25:08,700
forward<font color="#E5E5E5"> one cycle at this point the Lord</font>

568
00:25:06,179 --> 00:25:11,160
<font color="#E5E5E5">writes back the value</font><font color="#CCCCCC"> at got from memory</font>

569
00:25:08,700 --> 00:25:13,500
<font color="#E5E5E5">back to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> register file and the store</font>

570
00:25:11,160 --> 00:25:17,370
<font color="#E5E5E5">starts to write something</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the data</font>

571
00:25:13,500 --> 00:25:19,020
memory<font color="#E5E5E5"> but what is it writing if you</font>

572
00:25:17,370 --> 00:25:21,090
look at the program you might expect<font color="#E5E5E5"> I</font>

573
00:25:19,020 --> 00:25:23,870
loaded<font color="#CCCCCC"> into register 0 and then I stored</font>

574
00:25:21,090 --> 00:25:26,159
from register 0 so you would hope it's

575
00:25:23,870 --> 00:25:28,620
storing the value<font color="#E5E5E5"> you just loaded from</font>

576
00:25:26,160 --> 00:25:31,710
memory<font color="#CCCCCC"> but that's not what happens</font>

577
00:25:28,620 --> 00:25:33,330
because<font color="#CCCCCC"> the store had already read some</font>

578
00:25:31,710 --> 00:25:35,700
values from the register file before<font color="#CCCCCC"> it</font>

579
00:25:33,330 --> 00:25:38,129
<font color="#E5E5E5">got to that point so it's gonna store</font>

580
00:25:35,700 --> 00:25:42,420
<font color="#E5E5E5">the previous value from register 0 to</font>

581
00:25:38,130 --> 00:25:45,690
memory<font color="#E5E5E5"> so I would tend to label</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> a</font>

582
00:25:42,420 --> 00:25:48,750
bug and<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know the</font><font color="#E5E5E5"> next</font><font color="#CCCCCC"> generation the</font>

583
00:25:45,690 --> 00:25:51,720
processor<font color="#CCCCCC"> I chose not to do this</font><font color="#E5E5E5"> but</font>

584
00:25:48,750 --> 00:25:53,250
again<font color="#E5E5E5"> the the</font><font color="#CCCCCC"> first generation they</font>

585
00:25:51,720 --> 00:25:55,050
called a feature<font color="#E5E5E5"> and they</font><font color="#CCCCCC"> gave</font><font color="#E5E5E5"> it a</font>

586
00:25:53,250 --> 00:25:57,510
fancy name<font color="#CCCCCC"> they called a load delay slot</font>

587
00:25:55,050 --> 00:26:00,389
<font color="#E5E5E5">and they said if you do a</font><font color="#CCCCCC"> Lord</font><font color="#E5E5E5"> then you</font>

588
00:25:57,510 --> 00:26:02,580
<font color="#CCCCCC">must wait you know at least</font><font color="#E5E5E5"> one</font>

589
00:26:00,390 --> 00:26:09,150
instruction before<font color="#E5E5E5"> you</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> try to</font>

590
00:26:02,580 --> 00:26:11,040
use<font color="#E5E5E5"> the results of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> Lord so so</font>

591
00:26:09,150 --> 00:26:12,990
that's one way of<font color="#E5E5E5"> fixing it is to see</font>

592
00:26:11,040 --> 00:26:14,520
it's a software<font color="#CCCCCC"> problem it's not</font>

593
00:26:12,990 --> 00:26:17,190
hardware that's wrong it's<font color="#E5E5E5"> it's</font>

594
00:26:14,520 --> 00:26:18,629
programmers need to deal with<font color="#CCCCCC"> this they</font>

595
00:26:17,190 --> 00:26:20,880
need<font color="#E5E5E5"> to find</font><font color="#CCCCCC"> something else</font><font color="#E5E5E5"> to do</font>

596
00:26:18,630 --> 00:26:22,470
between<font color="#E5E5E5"> the load and</font><font color="#CCCCCC"> the store or they</font>

597
00:26:20,880 --> 00:26:24,120
can maybe get<font color="#CCCCCC"> a compiler</font><font color="#E5E5E5"> to do it for</font>

598
00:26:22,470 --> 00:26:26,250
them<font color="#CCCCCC"> but either way it's</font><font color="#E5E5E5"> not a hardware</font>

599
00:26:24,120 --> 00:26:31,889
<font color="#E5E5E5">problem definitely not a bug</font><font color="#CCCCCC"> it's a</font>

600
00:26:26,250 --> 00:26:33,600
feature<font color="#E5E5E5"> so so now if you disagree with</font>

601
00:26:31,890 --> 00:26:37,320
<font color="#E5E5E5">that</font><font color="#CCCCCC"> and you actually</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to fix a</font>

602
00:26:33,600 --> 00:26:39,360
problem<font color="#E5E5E5"> you could do is we did with the</font>

603
00:26:37,320 --> 00:26:40,050
branch and just stall the process<font color="#CCCCCC"> so</font>

604
00:26:39,360 --> 00:26:42,090
<font color="#CCCCCC">just wait up</font>

605
00:26:40,050 --> 00:26:43,440
until the<font color="#E5E5E5"> value has made it back</font><font color="#CCCCCC"> to the</font>

606
00:26:42,090 --> 00:26:48,179
register file<font color="#CCCCCC"> and then you're all good</font>

607
00:26:43,440 --> 00:26:49,800
<font color="#E5E5E5">but the more common one is is not to</font>

608
00:26:48,180 --> 00:26:51,960
stall and try to maintain a bit

609
00:26:49,800 --> 00:26:55,320
performance<font color="#E5E5E5"> and the reason</font><font color="#CCCCCC"> for that</font><font color="#E5E5E5"> is</font>

610
00:26:51,960 --> 00:26:58,410
if you<font color="#CCCCCC"> think about it</font><font color="#E5E5E5"> at the point when</font>

611
00:26:55,320 --> 00:27:01,379
I went to execute<font color="#E5E5E5"> the store instruction</font>

612
00:26:58,410 --> 00:27:03,720
<font color="#CCCCCC">I had actually already successfully got</font>

613
00:27:01,380 --> 00:27:05,820
a value from memory<font color="#E5E5E5"> the</font><font color="#CCCCCC"> only problem was</font>

614
00:27:03,720 --> 00:27:08,490
I'd already got a value from somewhere

615
00:27:05,820 --> 00:27:10,860
else<font color="#CCCCCC"> and</font><font color="#E5E5E5"> there was no way that the value</font>

616
00:27:08,490 --> 00:27:13,140
I had which by this point was in the

617
00:27:10,860 --> 00:27:15,120
<font color="#CCCCCC">write</font><font color="#E5E5E5"> back stage that was all</font><font color="#CCCCCC"> gray</font><font color="#E5E5E5"> mocks</font>

618
00:27:13,140 --> 00:27:17,910
and the<font color="#CCCCCC"> furthest to the right hand side</font>

619
00:27:15,120 --> 00:27:19,110
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> where the</font><font color="#CCCCCC"> value was and if</font><font color="#E5E5E5"> only I</font>

620
00:27:17,910 --> 00:27:22,140
could<font color="#E5E5E5"> get it from there</font>

621
00:27:19,110 --> 00:27:24,240
into the memory everything<font color="#E5E5E5"> would be good</font>

622
00:27:22,140 --> 00:27:26,010
<font color="#CCCCCC">so let's just add</font><font color="#E5E5E5"> a data path that will</font>

623
00:27:24,240 --> 00:27:28,470
do that<font color="#CCCCCC"> all right so we just add a data</font>

624
00:27:26,010 --> 00:27:31,730
path<font color="#E5E5E5"> would add another</font><font color="#CCCCCC"> mock sir</font><font color="#E5E5E5"> to</font>

625
00:27:28,470 --> 00:27:34,560
select which share whether to use this

626
00:27:31,730 --> 00:27:36,680
forwarded value this bypassed value or

627
00:27:34,560 --> 00:27:40,860
to<font color="#CCCCCC"> use the value we got</font><font color="#E5E5E5"> from registers</font>

628
00:27:36,680 --> 00:27:44,610
<font color="#E5E5E5">so we do that but oh there's two inputs</font>

629
00:27:40,860 --> 00:27:45,990
to the memory well maybe we wish to add

630
00:27:44,610 --> 00:27:48,060
another forwarding path<font color="#E5E5E5"> so that it</font>

631
00:27:45,990 --> 00:27:50,280
doesn't<font color="#E5E5E5"> matter whether we're using the</font>

632
00:27:48,060 --> 00:27:52,980
value we read as an<font color="#E5E5E5"> address or as data</font>

633
00:27:50,280 --> 00:27:55,620
<font color="#CCCCCC">either way it's going to work</font><font color="#E5E5E5"> so that's</font>

634
00:27:52,980 --> 00:27:57,690
that's<font color="#E5E5E5"> good let's fix it but</font>

635
00:27:55,620 --> 00:28:00,030
unfortunately<font color="#CCCCCC"> that there's another bug</font>

636
00:27:57,690 --> 00:28:02,370
is any use of<font color="#E5E5E5"> the value will break</font>

637
00:28:00,030 --> 00:28:05,790
things so if I have a load followed by

638
00:28:02,370 --> 00:28:07,889
an ad that<font color="#CCCCCC"> will also not work</font><font color="#E5E5E5"> same fix</font>

639
00:28:05,790 --> 00:28:09,450
works<font color="#E5E5E5"> just a different data path so</font><font color="#CCCCCC"> we</font>

640
00:28:07,890 --> 00:28:10,590
add another path going<font color="#E5E5E5"> a bit further</font>

641
00:28:09,450 --> 00:28:13,230
back

642
00:28:10,590 --> 00:28:16,860
it could affect either<font color="#CCCCCC"> input of</font><font color="#E5E5E5"> a of the</font>

643
00:28:13,230 --> 00:28:19,020
addition so add<font color="#E5E5E5"> another path</font><font color="#CCCCCC"> it turns</font>

644
00:28:16,860 --> 00:28:21,090
<font color="#E5E5E5">out is yes another bug which is an</font><font color="#CCCCCC"> ADD</font>

645
00:28:19,020 --> 00:28:23,580
immediately followed<font color="#CCCCCC"> by an</font><font color="#E5E5E5"> ADD will have</font>

646
00:28:21,090 --> 00:28:25,740
the same problem<font color="#CCCCCC"> it takes</font><font color="#E5E5E5"> ages it takes</font>

647
00:28:23,580 --> 00:28:27,840
two full cycles for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> result of an ad</font>

648
00:28:25,740 --> 00:28:30,570
<font color="#E5E5E5">to</font><font color="#CCCCCC"> get all the way around</font><font color="#E5E5E5"> back to the</font>

649
00:28:27,840 --> 00:28:34,220
register file and<font color="#E5E5E5"> be ready for an for an</font>

650
00:28:30,570 --> 00:28:36,929
operation so we<font color="#CCCCCC"> can fix</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> by adding</font>

651
00:28:34,220 --> 00:28:43,560
<font color="#E5E5E5">another forwarding path and another</font>

652
00:28:36,930 --> 00:28:45,990
<font color="#E5E5E5">forwarding path and is and then one more</font>

653
00:28:43,560 --> 00:28:48,450
a final bug<font color="#E5E5E5"> that I can spot in this</font>

654
00:28:45,990 --> 00:28:50,460
<font color="#CCCCCC">diagram which is if</font><font color="#E5E5E5"> we have a load and</font>

655
00:28:48,450 --> 00:28:53,010
then we branch to<font color="#CCCCCC"> the address that we</font>

656
00:28:50,460 --> 00:28:55,020
just<font color="#E5E5E5"> loaded you might do that</font><font color="#CCCCCC"> in your</font>

657
00:28:53,010 --> 00:28:57,720
turning<font color="#E5E5E5"> from a function then you've got</font>

658
00:28:55,020 --> 00:29:00,360
<font color="#CCCCCC">another bug</font><font color="#E5E5E5"> so we add another path under</font>

659
00:28:57,720 --> 00:29:01,980
<font color="#CCCCCC">nisha of</font><font color="#E5E5E5"> key in each of these cases if</font>

660
00:29:00,360 --> 00:29:04,590
<font color="#CCCCCC">we decide it's too expensive adding an</font>

661
00:29:01,980 --> 00:29:09,060
extra data path<font color="#E5E5E5"> then we have the option</font>

662
00:29:04,590 --> 00:29:11,399
of<font color="#E5E5E5"> stalling in this circumstance</font><font color="#CCCCCC"> so so</font>

663
00:29:09,060 --> 00:29:13,590
for each<font color="#E5E5E5"> of these potential potential</font>

664
00:29:11,400 --> 00:29:15,600
bugs<font color="#CCCCCC"> we've got a choice of stalling or</font>

665
00:29:13,590 --> 00:29:17,159
adding a forwarding<font color="#E5E5E5"> path and then we've</font>

666
00:29:15,600 --> 00:29:19,080
got to<font color="#E5E5E5"> make a list of all the times we</font>

667
00:29:17,160 --> 00:29:20,970
want<font color="#E5E5E5"> to stall</font><font color="#CCCCCC"> all the times we</font><font color="#E5E5E5"> want to</font>

668
00:29:19,080 --> 00:29:22,980
use a forwarding path<font color="#CCCCCC"> add in all the</font>

669
00:29:20,970 --> 00:29:24,480
control logic to select the right input

670
00:29:22,980 --> 00:29:29,460
at the right time or to stall the

671
00:29:24,480 --> 00:29:32,370
processor<font color="#E5E5E5"> at the right time and and what</font>

672
00:29:29,460 --> 00:29:34,200
we end up<font color="#CCCCCC"> with is a lot of new</font><font color="#E5E5E5"> corner</font>

673
00:29:32,370 --> 00:29:35,969
cases<font color="#CCCCCC"> a lot of different things we need</font>

674
00:29:34,200 --> 00:29:37,980
to<font color="#E5E5E5"> test because there's so many</font>

675
00:29:35,970 --> 00:29:39,750
different<font color="#CCCCCC"> situations in</font><font color="#E5E5E5"> which this</font>

676
00:29:37,980 --> 00:29:43,350
forwarding logic is made to trigger or

677
00:29:39,750 --> 00:29:45,540
not<font color="#CCCCCC"> meant to trigger so back to what</font>

678
00:29:43,350 --> 00:29:47,370
test should<font color="#E5E5E5"> we be running well all</font><font color="#CCCCCC"> our</font>

679
00:29:45,540 --> 00:29:51,600
<font color="#E5E5E5">single stage tests all our</font><font color="#CCCCCC"> two</font>

680
00:29:47,370 --> 00:29:53,010
instruction tests<font color="#CCCCCC"> a Lords followed by</font>

681
00:29:51,600 --> 00:29:55,590
well pretty<font color="#E5E5E5"> much anything because when I</font>

682
00:29:53,010 --> 00:29:58,800
was<font color="#E5E5E5"> scared of Lords going wrong and then</font>

683
00:29:55,590 --> 00:30:01,189
well how many instructions see how long

684
00:29:58,800 --> 00:30:04,110
does an instruction sequence have to be

685
00:30:01,190 --> 00:30:05,730
before<font color="#E5E5E5"> it's guaranteed</font><font color="#CCCCCC"> not to have any</font>

686
00:30:04,110 --> 00:30:07,379
new bugs<font color="#E5E5E5"> you haven't seen in a shorter</font>

687
00:30:05,730 --> 00:30:09,330
<font color="#CCCCCC">sequence you know what's can you get</font>

688
00:30:07,380 --> 00:30:11,430
<font color="#CCCCCC">four instructions to fail</font><font color="#E5E5E5"> I think you</font>

689
00:30:09,330 --> 00:30:13,679
can get five<font color="#E5E5E5"> instructions to fail you</font>

690
00:30:11,430 --> 00:30:16,680
know a chain of<font color="#CCCCCC"> five where the last one</font>

691
00:30:13,680 --> 00:30:18,120
is the<font color="#E5E5E5"> one that</font><font color="#CCCCCC"> goes wrong</font><font color="#E5E5E5"> so you come</font>

692
00:30:16,680 --> 00:30:20,430
up<font color="#CCCCCC"> with your guess of how long in that</font>

693
00:30:18,120 --> 00:30:22,169
sequence<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be and then</font><font color="#E5E5E5"> you try to</font>

694
00:30:20,430 --> 00:30:25,440
figure<font color="#E5E5E5"> out what would make</font><font color="#CCCCCC"> a sequence</font>

695
00:30:22,170 --> 00:30:28,770
interesting and write tests for<font color="#E5E5E5"> it or</font>

696
00:30:25,440 --> 00:30:32,640
again you rely on formal verification<font color="#E5E5E5"> if</font>

697
00:30:28,770 --> 00:30:34,470
that's powerful<font color="#E5E5E5"> enough</font><font color="#CCCCCC"> to cope with</font><font color="#E5E5E5"> the</font>

698
00:30:32,640 --> 00:30:39,630
complexity of the<font color="#E5E5E5"> design you're working</font>

699
00:30:34,470 --> 00:30:44,090
on okay so that's me I've now done<font color="#CCCCCC"> two</font>

700
00:30:39,630 --> 00:30:46,140
rounds<font color="#E5E5E5"> round this say</font><font color="#CCCCCC"> writing this cycle</font>

701
00:30:44,090 --> 00:30:46,800
<font color="#E5E5E5">start with something right that's</font>

702
00:30:46,140 --> 00:30:51,000
<font color="#E5E5E5">correct</font>

703
00:30:46,800 --> 00:30:53,669
break it but make<font color="#CCCCCC"> it really fast</font><font color="#E5E5E5"> fix it</font>

704
00:30:51,000 --> 00:30:57,600
<font color="#E5E5E5">then make it even</font><font color="#CCCCCC"> faster and</font><font color="#E5E5E5"> even more</font>

705
00:30:53,670 --> 00:30:59,580
broken<font color="#E5E5E5"> fix that and hopefully you now</font>

706
00:30:57,600 --> 00:31:01,500
<font color="#CCCCCC">have a working</font><font color="#E5E5E5"> processor because you've</font>

707
00:30:59,580 --> 00:31:04,649
<font color="#E5E5E5">got good ways of testing it good ways of</font>

708
00:31:01,500 --> 00:31:06,870
<font color="#E5E5E5">applying formal verification to it so</font>

709
00:31:04,650 --> 00:31:11,850
I'm not<font color="#E5E5E5"> going to do any more</font><font color="#CCCCCC"> it's</font>

710
00:31:06,870 --> 00:31:14,189
on processor<font color="#CCCCCC"> a optimizations gonna think</font>

711
00:31:11,850 --> 00:31:17,250
<font color="#CCCCCC">about what's happening</font><font color="#E5E5E5"> with formal</font>

712
00:31:14,190 --> 00:31:18,960
verification<font color="#E5E5E5"> so what's going on here</font>

713
00:31:17,250 --> 00:31:22,710
well you can<font color="#CCCCCC"> think</font><font color="#E5E5E5"> of formal</font>

714
00:31:18,960 --> 00:31:25,680
verification<font color="#CCCCCC"> as being we saw it</font><font color="#E5E5E5"> from one</font>

715
00:31:22,710 --> 00:31:27,480
point<font color="#E5E5E5"> and then we try</font><font color="#CCCCCC"> all possible</font>

716
00:31:25,680 --> 00:31:30,059
instructions that<font color="#E5E5E5"> could happen next</font><font color="#CCCCCC"> and</font>

717
00:31:27,480 --> 00:31:31,440
then we take another<font color="#E5E5E5"> set and we think of</font>

718
00:31:30,059 --> 00:31:33,510
all possible<font color="#CCCCCC"> instructions that</font><font color="#E5E5E5"> could</font>

719
00:31:31,440 --> 00:31:35,130
follow<font color="#E5E5E5"> on from that and then all</font>

720
00:31:33,510 --> 00:31:37,290
possible instructions that<font color="#E5E5E5"> could follow</font>

721
00:31:35,130 --> 00:31:41,000
<font color="#E5E5E5">on from that and we can keep going</font><font color="#CCCCCC"> like</font>

722
00:31:37,290 --> 00:31:44,070
this<font color="#E5E5E5"> doing this</font><font color="#CCCCCC"> read first exploration</font>

723
00:31:41,000 --> 00:31:45,809
but if any of you have played around

724
00:31:44,070 --> 00:31:48,120
with read first exploration<font color="#CCCCCC"> you'll know</font>

725
00:31:45,809 --> 00:31:50,879
that<font color="#E5E5E5"> the the state space here is just</font>

726
00:31:48,120 --> 00:31:52,860
exploding<font color="#CCCCCC"> and eventually you're going to</font>

727
00:31:50,880 --> 00:31:56,100
hit some limit where<font color="#CCCCCC"> you just can't</font>

728
00:31:52,860 --> 00:31:57,570
explore any deeper<font color="#E5E5E5"> right you've been</font>

729
00:31:56,100 --> 00:31:59,730
extremely<font color="#E5E5E5"> thorough and what you've</font>

730
00:31:57,570 --> 00:32:01,500
checked but<font color="#E5E5E5"> you just can't get any</font>

731
00:31:59,730 --> 00:32:03,660
<font color="#E5E5E5">deeper because</font><font color="#CCCCCC"> you've run out of memory</font>

732
00:32:01,500 --> 00:32:05,309
<font color="#E5E5E5">or it</font><font color="#CCCCCC"> sees it's going to</font><font color="#E5E5E5"> take another</font>

733
00:32:03,660 --> 00:32:10,080
<font color="#E5E5E5">day to run it's gonna take another week</font>

734
00:32:05,309 --> 00:32:12,770
another<font color="#E5E5E5"> month whatever to to run so so</font>

735
00:32:10,080 --> 00:32:16,889
<font color="#CCCCCC">you</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of stuck at</font><font color="#E5E5E5"> that point so</font>

736
00:32:12,770 --> 00:32:18,090
testing is<font color="#E5E5E5"> a good technique as well and</font>

737
00:32:16,890 --> 00:32:19,740
you know I've been<font color="#CCCCCC"> saying for more</font>

738
00:32:18,090 --> 00:32:21,419
verifications<font color="#CCCCCC"> great but tasting is</font>

739
00:32:19,740 --> 00:32:23,790
really good because it has this nice

740
00:32:21,420 --> 00:32:25,440
property<font color="#CCCCCC"> that you can take your starting</font>

741
00:32:23,790 --> 00:32:27,270
point<font color="#E5E5E5"> and then just run a big long</font>

742
00:32:25,440 --> 00:32:28,740
program<font color="#E5E5E5"> and a million cycles later you</font>

743
00:32:27,270 --> 00:32:30,570
<font color="#CCCCCC">say look um</font><font color="#E5E5E5"> I've done enough of that</font>

744
00:32:28,740 --> 00:32:32,190
<font color="#E5E5E5">I'll try something</font><font color="#CCCCCC"> else I'll try</font>

745
00:32:30,570 --> 00:32:36,659
something<font color="#E5E5E5"> else</font><font color="#CCCCCC"> I'll just keep trying</font>

746
00:32:32,190 --> 00:32:38,280
different things<font color="#CCCCCC"> and I'm not exploring</font>

747
00:32:36,660 --> 00:32:40,860
<font color="#E5E5E5">very thoroughly right you know this I'm</font>

748
00:32:38,280 --> 00:32:42,870
<font color="#CCCCCC">not filling</font><font color="#E5E5E5"> in the the screen with you</font>

749
00:32:40,860 --> 00:32:44,699
know solid<font color="#E5E5E5"> blocks of color but I am</font>

750
00:32:42,870 --> 00:32:47,280
<font color="#E5E5E5">getting really deep I'm getting into</font>

751
00:32:44,700 --> 00:32:49,140
<font color="#CCCCCC">interesting complicated situations</font><font color="#E5E5E5"> at</font>

752
00:32:47,280 --> 00:32:53,129
least I have my<font color="#E5E5E5"> tests</font><font color="#CCCCCC"> are any good I</font>

753
00:32:49,140 --> 00:32:54,780
hope I am so so<font color="#E5E5E5"> I've</font><font color="#CCCCCC"> got formal</font>

754
00:32:53,130 --> 00:32:57,020
verification which is<font color="#CCCCCC"> bread first</font>

755
00:32:54,780 --> 00:32:59,960
I've got testing<font color="#CCCCCC"> witches air</font><font color="#E5E5E5"> depth</font><font color="#CCCCCC"> first</font>

756
00:32:57,020 --> 00:33:02,850
both really<font color="#E5E5E5"> good for finding air bugs</font>

757
00:32:59,960 --> 00:33:05,010
<font color="#CCCCCC">but more</font><font color="#E5E5E5"> recently what we've been doing</font>

758
00:33:02,850 --> 00:33:07,469
is switching<font color="#CCCCCC"> to</font><font color="#E5E5E5"> our kind of mixed mode</font>

759
00:33:05,010 --> 00:33:09,030
<font color="#CCCCCC">we will start off with</font><font color="#E5E5E5"> the formal</font>

760
00:33:07,470 --> 00:33:10,980
verification<font color="#CCCCCC"> doing that</font><font color="#E5E5E5"> bread first</font>

761
00:33:09,030 --> 00:33:13,860
<font color="#E5E5E5">exploration seeing how deep we can get</font>

762
00:33:10,980 --> 00:33:18,150
but then once we reach whatever<font color="#E5E5E5"> the</font>

763
00:33:13,860 --> 00:33:19,299
limit is we then switch<font color="#CCCCCC"> to testing</font><font color="#E5E5E5"> but</font>

764
00:33:18,150 --> 00:33:21,249
as we

765
00:33:19,299 --> 00:33:23,710
but then we take some<font color="#CCCCCC"> of the paths that</font>

766
00:33:21,249 --> 00:33:25,389
we've a phone by testing and we<font color="#CCCCCC"> see</font>

767
00:33:23,710 --> 00:33:28,659
let's do a<font color="#CCCCCC"> little formal verification</font>

768
00:33:25,389 --> 00:33:30,879
around that<font color="#E5E5E5"> and we try to broaden note</font>

769
00:33:28,659 --> 00:33:33,700
around<font color="#CCCCCC"> each lane so we're kind</font><font color="#E5E5E5"> of able</font>

770
00:33:30,879 --> 00:33:35,408
<font color="#E5E5E5">to fill in more of that search space</font><font color="#CCCCCC"> get</font>

771
00:33:33,700 --> 00:33:38,230
to these<font color="#E5E5E5"> deep seats and then search</font>

772
00:33:35,409 --> 00:33:42,999
<font color="#CCCCCC">around there and so we keep</font><font color="#E5E5E5"> doing that</font>

773
00:33:38,230 --> 00:33:44,919
<font color="#E5E5E5">for a while</font><font color="#CCCCCC"> and a and we we</font><font color="#E5E5E5"> gain a lot</font>

774
00:33:42,999 --> 00:33:47,769
more confidence not<font color="#CCCCCC"> just that we've</font>

775
00:33:44,919 --> 00:33:49,869
searched short sequences really

776
00:33:47,769 --> 00:33:56,320
thoroughly<font color="#E5E5E5"> but we've also seen a lot of</font>

777
00:33:49,869 --> 00:33:59,738
fair depth as well<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so I started</font><font color="#E5E5E5"> off</font>

778
00:33:56,320 --> 00:34:03,220
<font color="#E5E5E5">by saying that processors almost always</font>

779
00:33:59,739 --> 00:34:05,139
work and I hope I've<font color="#CCCCCC"> given you a bit of</font>

780
00:34:03,220 --> 00:34:08,230
<font color="#E5E5E5">a sense</font><font color="#CCCCCC"> just in</font><font color="#E5E5E5"> those</font><font color="#CCCCCC"> simple</font>

781
00:34:05,139 --> 00:34:11,319
optimizations<font color="#CCCCCC"> I described</font><font color="#E5E5E5"> of why this is</font>

782
00:34:08,230 --> 00:34:13,449
actually<font color="#E5E5E5"> an</font><font color="#CCCCCC"> amazing thing because</font><font color="#E5E5E5"> just</font>

783
00:34:11,319 --> 00:34:16,179
going to a<font color="#E5E5E5"> five stage pipeline things</font>

784
00:34:13,449 --> 00:34:18,549
were getting<font color="#E5E5E5"> I think kind</font><font color="#CCCCCC"> of complicated</font>

785
00:34:16,179 --> 00:34:25,149
<font color="#E5E5E5">and the testing for them is getting</font>

786
00:34:18,549 --> 00:34:27,790
<font color="#CCCCCC">complicated so and then I talked a lot</font>

787
00:34:25,149 --> 00:34:29,770
about how<font color="#CCCCCC"> we about</font><font color="#E5E5E5"> how we go back and</font>

788
00:34:27,790 --> 00:34:36,069
forth between the designer and<font color="#E5E5E5"> the</font>

789
00:34:29,770 --> 00:34:38,699
verifier and<font color="#CCCCCC"> the site I said the</font><font color="#E5E5E5"> the</font>

790
00:34:36,069 --> 00:34:41,469
verifier<font color="#E5E5E5"> tends to win the fight over</font>

791
00:34:38,699 --> 00:34:44,500
<font color="#CCCCCC">kind</font><font color="#E5E5E5"> of how much complexity you allowed</font>

792
00:34:41,469 --> 00:34:47,618
in the processor because<font color="#E5E5E5"> you want the</font>

793
00:34:44,500 --> 00:34:49,780
thing to<font color="#E5E5E5"> work using</font><font color="#CCCCCC"> these formal</font>

794
00:34:47,619 --> 00:34:51,609
verification techniques were able<font color="#CCCCCC"> to</font>

795
00:34:49,780 --> 00:34:55,990
check<font color="#E5E5E5"> processors much more thoroughly</font>

796
00:34:51,609 --> 00:34:58,000
<font color="#CCCCCC">and this lets us shift the balance over</font>

797
00:34:55,989 --> 00:35:00,189
so the designer is able to push much

798
00:34:58,000 --> 00:35:02,140
harder towards<font color="#E5E5E5"> what</font><font color="#CCCCCC"> he wants to do which</font>

799
00:35:00,190 --> 00:35:04,930
<font color="#CCCCCC">is make the processor fast</font><font color="#E5E5E5"> without</font>

800
00:35:02,140 --> 00:35:11,890
making the very the verify<font color="#E5E5E5"> are unhappy</font>

801
00:35:04,930 --> 00:35:15,808
<font color="#E5E5E5">about what's going on so so let's see so</font>

802
00:35:11,890 --> 00:35:19,839
just<font color="#CCCCCC"> in closing i I've been</font><font color="#E5E5E5"> showing you</font>

803
00:35:15,809 --> 00:35:23,950
<font color="#E5E5E5">processor designs from 1985</font><font color="#CCCCCC"> so just to</font>

804
00:35:19,839 --> 00:35:25,540
bring it<font color="#E5E5E5"> a bit more up to</font><font color="#CCCCCC"> date</font><font color="#E5E5E5"> if any</font><font color="#CCCCCC"> of</font>

805
00:35:23,950 --> 00:35:28,230
you like playing<font color="#E5E5E5"> with microcontrollers</font>

806
00:35:25,540 --> 00:35:31,540
this is one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> our more recent</font>

807
00:35:28,230 --> 00:35:32,370
microcontrollers it's cortex m7<font color="#E5E5E5"> so this</font>

808
00:35:31,540 --> 00:35:34,830
is

809
00:35:32,370 --> 00:35:36,870
an ACH pipeline so increasingly from the

810
00:35:34,830 --> 00:35:39,299
<font color="#E5E5E5">five stages we we saw earlier and</font>

811
00:35:36,870 --> 00:35:41,759
there's also five separate execution

812
00:35:39,300 --> 00:35:45,420
pipelines and said just being able to do

813
00:35:41,760 --> 00:35:47,310
memory and<font color="#CCCCCC"> arithmetic and it can</font>

814
00:35:45,420 --> 00:35:49,530
actually<font color="#CCCCCC"> issue</font><font color="#E5E5E5"> two instructions and</font>

815
00:35:47,310 --> 00:35:55,380
parallels so<font color="#E5E5E5"> it can be two instructions</font>

816
00:35:49,530 --> 00:35:57,000
can be executed<font color="#E5E5E5"> in every step and if you</font>

817
00:35:55,380 --> 00:36:00,090
<font color="#CCCCCC">remember</font><font color="#E5E5E5"> from the five stage pipeline</font><font color="#CCCCCC"> I</font>

818
00:35:57,000 --> 00:36:01,980
<font color="#CCCCCC">did what was a six seven separate</font>

819
00:36:00,090 --> 00:36:04,650
forwarding paths<font color="#CCCCCC"> so there</font><font color="#E5E5E5"> would be nice</font>

820
00:36:01,980 --> 00:36:08,490
and fast<font color="#E5E5E5"> and wouldn't have I wouldn't</font>

821
00:36:04,650 --> 00:36:11,790
<font color="#CCCCCC">have to stall too often well imagine for</font>

822
00:36:08,490 --> 00:36:14,270
each pipeline I'm going to add a number

823
00:36:11,790 --> 00:36:18,029
<font color="#E5E5E5">of forwarding paths probably about a</font>

824
00:36:14,270 --> 00:36:19,890
maybe about<font color="#E5E5E5"> four six separate forwarding</font>

825
00:36:18,030 --> 00:36:21,480
paths for each pipe line<font color="#E5E5E5"> and between</font>

826
00:36:19,890 --> 00:36:24,750
<font color="#CCCCCC">pipelines I'm good to add some</font>

827
00:36:21,480 --> 00:36:28,290
forwarding paths as<font color="#E5E5E5"> well so let me just</font>

828
00:36:24,750 --> 00:36:31,830
give you<font color="#E5E5E5"> a quick glance roughly what the</font>

829
00:36:28,290 --> 00:36:41,400
<font color="#E5E5E5">forwarding paths in the</font><font color="#CCCCCC"> court xm7</font><font color="#E5E5E5"> looks</font>

830
00:36:31,830 --> 00:36:42,810
like so it's it's quite complicated<font color="#E5E5E5"> that</font>

831
00:36:41,400 --> 00:36:45,330
joke<font color="#E5E5E5"> is actually due</font><font color="#CCCCCC"> to one</font><font color="#E5E5E5"> of my</font>

832
00:36:42,810 --> 00:36:50,880
<font color="#CCCCCC">colleagues will</font><font color="#E5E5E5"> keen who came up with</font>

833
00:36:45,330 --> 00:36:53,190
<font color="#CCCCCC">that joke so but this</font><font color="#E5E5E5"> is not completely</font>

834
00:36:50,880 --> 00:36:55,170
unrealistic<font color="#E5E5E5"> it really is incredibly</font>

835
00:36:53,190 --> 00:36:57,090
complicated<font color="#CCCCCC"> I'm trying</font><font color="#E5E5E5"> to make a</font>

836
00:36:55,170 --> 00:36:58,710
processor<font color="#E5E5E5"> of this complexity</font><font color="#CCCCCC"> that's</font>

837
00:36:57,090 --> 00:37:01,350
actually going to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> reliable</font><font color="#CCCCCC"> let's</font>

838
00:36:58,710 --> 00:37:04,320
<font color="#E5E5E5">design felissa</font><font color="#CCCCCC"> land bedded systems so or</font>

839
00:37:01,350 --> 00:37:05,580
fairly big embedded systems<font color="#CCCCCC"> actually you</font>

840
00:37:04,320 --> 00:37:08,160
<font color="#E5E5E5">want it to</font><font color="#CCCCCC"> work you don't</font><font color="#E5E5E5"> want to have</font>

841
00:37:05,580 --> 00:37:12,330
to go and<font color="#E5E5E5"> replace it so correctness</font>

842
00:37:08,160 --> 00:37:15,089
really matters<font color="#E5E5E5"> so yeah so I</font><font color="#CCCCCC"> hope we've</font>

843
00:37:12,330 --> 00:37:16,770
given<font color="#E5E5E5"> you a bit of</font><font color="#CCCCCC"> a sense</font><font color="#E5E5E5"> for designing</font>

844
00:37:15,090 --> 00:37:19,470
and more importantly verifying<font color="#CCCCCC"> Chris</font>

845
00:37:16,770 --> 00:37:24,100
<font color="#E5E5E5">it's like thank you very much for your</font>

846
00:37:19,470 --> 00:37:34,019
attention and yeah<font color="#CCCCCC"> you got any</font><font color="#E5E5E5"> questions</font>

847
00:37:24,100 --> 00:37:34,019
[Applause]

848
00:37:41,270 --> 00:37:46,890
thank you very<font color="#E5E5E5"> much</font><font color="#CCCCCC"> for the talk what</font>

849
00:37:44,940 --> 00:37:49,230
methods do you use to decide<font color="#E5E5E5"> when the</font>

850
00:37:46,890 --> 00:37:56,700
verification is complete<font color="#CCCCCC"> what have you</font>

851
00:37:49,230 --> 00:37:59,670
done<font color="#CCCCCC"> your job</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> but there's a whole lot</font>

852
00:37:56,700 --> 00:38:01,919
of<font color="#CCCCCC"> experience right so arms I think they</font>

853
00:37:59,670 --> 00:38:04,860
all the first<font color="#CCCCCC"> ARM</font><font color="#E5E5E5"> processor was designed</font>

854
00:38:01,920 --> 00:38:07,140
<font color="#CCCCCC">over 30 years ago so there's</font><font color="#E5E5E5"> 30 years of</font>

855
00:38:04,860 --> 00:38:09,210
experience<font color="#E5E5E5"> of just kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> like we</font><font color="#CCCCCC"> did</font>

856
00:38:07,140 --> 00:38:11,069
<font color="#E5E5E5">this much last time and we were happy</font>

857
00:38:09,210 --> 00:38:16,040
with that<font color="#CCCCCC"> or we were</font><font color="#E5E5E5"> unhappy with</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> so</font>

858
00:38:11,070 --> 00:38:17,970
let's do more or the same there's

859
00:38:16,040 --> 00:38:20,790
there's a whole<font color="#CCCCCC"> lot</font><font color="#E5E5E5"> of people</font><font color="#CCCCCC"> who think</font>

860
00:38:17,970 --> 00:38:23,430
really hard about<font color="#E5E5E5"> obviously</font><font color="#CCCCCC"> there's a</font>

861
00:38:20,790 --> 00:38:24,630
classic thing<font color="#E5E5E5"> of measure you know just</font>

862
00:38:23,430 --> 00:38:26,690
the number of<font color="#E5E5E5"> bugs and</font><font color="#CCCCCC"> you look at the</font>

863
00:38:24,630 --> 00:38:29,280
bug curve and as it starts to<font color="#E5E5E5"> tail off</font>

864
00:38:26,690 --> 00:38:31,650
<font color="#CCCCCC">you you think you're looking</font><font color="#E5E5E5"> good so</font>

865
00:38:29,280 --> 00:38:37,980
there's a very long<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of so testing</font>

866
00:38:31,650 --> 00:38:41,250
period at the<font color="#E5E5E5"> end with</font><font color="#CCCCCC"> the formal</font>

867
00:38:37,980 --> 00:38:42,780
verification you can also<font color="#E5E5E5"> see you can</font>

868
00:38:41,250 --> 00:38:45,000
try<font color="#CCCCCC"> to come up with a property</font><font color="#E5E5E5"> which</font>

869
00:38:42,780 --> 00:38:46,590
when it's true<font color="#CCCCCC"> will tell you that</font>

870
00:38:45,000 --> 00:38:48,210
there's<font color="#E5E5E5"> nothing more</font><font color="#CCCCCC"> interesting to find</font>

871
00:38:46,590 --> 00:38:49,680
<font color="#E5E5E5">that they're all instructions have made</font>

872
00:38:48,210 --> 00:38:52,740
it all the<font color="#E5E5E5"> way down the</font><font color="#CCCCCC"> pipeline for</font>

873
00:38:49,680 --> 00:38:56,009
example and so you can kind of prove

874
00:38:52,740 --> 00:38:57,120
<font color="#E5E5E5">that that number is less</font><font color="#CCCCCC"> than seven</font><font color="#E5E5E5"> and</font>

875
00:38:56,010 --> 00:38:59,700
then you know that<font color="#E5E5E5"> seven would</font><font color="#CCCCCC"> be the</font>

876
00:38:57,120 --> 00:39:03,029
right<font color="#CCCCCC"> number to</font><font color="#E5E5E5"> use so there's there's a</font>

877
00:38:59,700 --> 00:39:04,710
variety<font color="#E5E5E5"> of techniques like that</font><font color="#CCCCCC"> I should</font>

878
00:39:03,030 --> 00:39:06,570
actually say<font color="#E5E5E5"> I'm I'm actually in the</font>

879
00:39:04,710 --> 00:39:08,550
research group<font color="#CCCCCC"> I help people I hope the</font>

880
00:39:06,570 --> 00:39:10,800
people<font color="#E5E5E5"> who were</font><font color="#CCCCCC"> developing</font><font color="#E5E5E5"> this I did</font>

881
00:39:08,550 --> 00:39:14,040
part<font color="#E5E5E5"> of the work in developing this</font>

882
00:39:10,800 --> 00:39:16,020
formal verification technique but but

883
00:39:14,040 --> 00:39:18,480
I'm kind of a fake you know<font color="#E5E5E5"> they the</font>

884
00:39:16,020 --> 00:39:20,790
guys who actually<font color="#E5E5E5"> do their verification</font>

885
00:39:18,480 --> 00:39:24,200
<font color="#E5E5E5">of real</font><font color="#CCCCCC"> processes</font><font color="#E5E5E5"> they are they they're</font>

886
00:39:20,790 --> 00:39:24,200
the heroes I was talking about not me

887
00:39:26,960 --> 00:39:34,589
do you think that the<font color="#CCCCCC"> recent speculative</font>

888
00:39:30,390 --> 00:39:38,069
execution issues<font color="#CCCCCC"> have put a greater</font>

889
00:39:34,589 --> 00:39:40,680
focus on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> formal verification stuff</font>

890
00:39:38,070 --> 00:39:48,210
have<font color="#CCCCCC"> you seen a shift in sort</font><font color="#E5E5E5"> of day to</font>

891
00:39:40,680 --> 00:39:50,640
<font color="#E5E5E5">day as a result I think we'd already</font>

892
00:39:48,210 --> 00:39:53,220
reached a point where the traditional

893
00:39:50,640 --> 00:39:54,930
testing was kind of at<font color="#CCCCCC"> its limit</font><font color="#E5E5E5"> you</font>

894
00:39:53,220 --> 00:39:57,509
know<font color="#CCCCCC"> and it's really important a</font>

895
00:39:54,930 --> 00:40:00,060
processor works<font color="#E5E5E5"> the process when</font><font color="#CCCCCC"> you're</font>

896
00:39:57,510 --> 00:40:01,710
<font color="#E5E5E5">foreign has a problem then you know we</font>

897
00:40:00,060 --> 00:40:05,130
can't change all the software in the<font color="#CCCCCC"> App</font>

898
00:40:01,710 --> 00:40:06,869
<font color="#CCCCCC">Store right</font><font color="#E5E5E5"> and it's really expensive to</font>

899
00:40:05,130 --> 00:40:09,450
recall<font color="#E5E5E5"> phone so they really have to work</font>

900
00:40:06,869 --> 00:40:11,070
<font color="#CCCCCC">so we're already kind</font><font color="#E5E5E5"> of you know I know</font>

901
00:40:09,450 --> 00:40:13,890
processor vendors are<font color="#CCCCCC"> doing this you</font>

902
00:40:11,070 --> 00:40:18,810
know<font color="#E5E5E5"> pushing really hard for really high</font>

903
00:40:13,890 --> 00:40:20,578
quality<font color="#E5E5E5"> this may be pushed</font><font color="#CCCCCC"> a little I've</font>

904
00:40:18,810 --> 00:40:22,020
got an<font color="#CCCCCC"> idea of</font><font color="#E5E5E5"> how to use formal</font>

905
00:40:20,579 --> 00:40:25,260
verification techniques to look for

906
00:40:22,020 --> 00:40:29,430
particular kinds<font color="#E5E5E5"> of security rules I'm</font>

907
00:40:25,260 --> 00:40:30,990
thinking of applying but<font color="#CCCCCC"> yeah this may</font>

908
00:40:29,430 --> 00:40:36,060
<font color="#E5E5E5">be push this a</font><font color="#CCCCCC"> little but we were kind</font>

909
00:40:30,990 --> 00:40:38,970
<font color="#CCCCCC">of already</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> so how many</font><font color="#E5E5E5"> cycles</font>

910
00:40:36,060 --> 00:40:40,319
<font color="#CCCCCC">severe cycles can</font><font color="#E5E5E5"> you actually verify</font>

911
00:40:38,970 --> 00:40:44,040
<font color="#CCCCCC">these days with bonded modeling</font>

912
00:40:40,319 --> 00:40:46,500
techniques<font color="#CCCCCC"> it varies</font><font color="#E5E5E5"> with which</font>

913
00:40:44,040 --> 00:40:48,900
processor you're working on<font color="#E5E5E5"> so I was</font>

914
00:40:46,500 --> 00:40:51,660
working<font color="#CCCCCC"> on a little two and a half stage</font>

915
00:40:48,900 --> 00:40:54,329
pipeline and there were some things<font color="#E5E5E5"> get</font>

916
00:40:51,660 --> 00:40:55,589
<font color="#E5E5E5">like 80 cycles deep and then we kill it</font>

917
00:40:54,329 --> 00:40:58,890
<font color="#CCCCCC">because it clearly was never</font><font color="#E5E5E5"> going to</font>

918
00:40:55,589 --> 00:41:00,599
find anything<font color="#E5E5E5"> else others when I was</font>

919
00:40:58,890 --> 00:41:07,078
working in the project<font color="#CCCCCC"> we get stuck</font>

920
00:41:00,599 --> 00:41:09,630
about maybe<font color="#E5E5E5"> 10 cycles 12</font><font color="#CCCCCC"> cycles it</font>

921
00:41:07,079 --> 00:41:11,940
varies and what what does a cycle mean

922
00:41:09,630 --> 00:41:14,010
like this processor here is executing

923
00:41:11,940 --> 00:41:15,900
two instructions of recycle so if it

924
00:41:14,010 --> 00:41:20,579
gets you know<font color="#CCCCCC"> if you can get 10 deep</font>

925
00:41:15,900 --> 00:41:21,869
that's you're done 20 instructions<font color="#E5E5E5"> but</font>

926
00:41:20,579 --> 00:41:23,460
<font color="#E5E5E5">then again it's more likely to have</font>

927
00:41:21,869 --> 00:41:26,190
<font color="#E5E5E5">problems because it's so complicated so</font>

928
00:41:23,460 --> 00:41:28,790
<font color="#E5E5E5">maybe you really do want to get 20</font>

929
00:41:26,190 --> 00:41:28,790
cycles deep

930
00:41:30,270 --> 00:41:37,770
so in your experience<font color="#E5E5E5"> has a problem got</font>

931
00:41:35,010 --> 00:41:39,420
out into<font color="#CCCCCC"> the wild</font><font color="#E5E5E5"> and having analyzed</font>

932
00:41:37,770 --> 00:41:42,780
that problem<font color="#E5E5E5"> when it's out in the real</font>

933
00:41:39,420 --> 00:41:45,450
world<font color="#E5E5E5"> have you had to modify your formal</font>

934
00:41:42,780 --> 00:41:47,340
verification techniques as a result<font color="#E5E5E5"> sort</font>

935
00:41:45,450 --> 00:41:50,810
of what's the<font color="#CCCCCC"> most embarrassing incident</font>

936
00:41:47,340 --> 00:41:56,640
where<font color="#E5E5E5"> this has actually happened</font><font color="#CCCCCC"> um</font><font color="#E5E5E5"> I</font>

937
00:41:50,810 --> 00:41:58,380
<font color="#CCCCCC">think I think we</font><font color="#E5E5E5"> we applied this to we</font>

938
00:41:56,640 --> 00:42:01,230
were doing it about three years<font color="#E5E5E5"> ago that</font>

939
00:41:58,380 --> 00:42:04,080
we were developing<font color="#E5E5E5"> this can over then</font>

940
00:42:01,230 --> 00:42:06,690
that egg was<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of tailing</font><font color="#E5E5E5"> off over</font>

941
00:42:04,080 --> 00:42:10,770
the<font color="#E5E5E5"> next a year or so so it's maybe</font>

942
00:42:06,690 --> 00:42:15,060
<font color="#E5E5E5">about two years</font><font color="#CCCCCC"> ago</font><font color="#E5E5E5"> that the alias</font>

943
00:42:10,770 --> 00:42:16,980
processes we did<font color="#E5E5E5"> this</font><font color="#CCCCCC"> too were finished</font>

944
00:42:15,060 --> 00:42:19,110
as far as we were<font color="#CCCCCC"> concerned and</font><font color="#E5E5E5"> then</font>

945
00:42:16,980 --> 00:42:22,290
takes another year<font color="#CCCCCC"> or so for</font><font color="#E5E5E5"> something</font>

946
00:42:19,110 --> 00:42:25,560
to<font color="#E5E5E5"> make it in silicon maybe another six</font>

947
00:42:22,290 --> 00:42:28,320
<font color="#E5E5E5">to</font><font color="#CCCCCC"> twelve</font><font color="#E5E5E5"> months for it to</font><font color="#CCCCCC"> actually kind</font>

948
00:42:25,560 --> 00:42:31,860
<font color="#E5E5E5">of appear in a package</font><font color="#CCCCCC"> that you can</font>

949
00:42:28,320 --> 00:42:34,770
actually buy so so we're about<font color="#E5E5E5"> to find</font>

950
00:42:31,860 --> 00:42:37,380
out I guess yeah

951
00:42:34,770 --> 00:42:38,580
we do know it finds a lot more bugs if I

952
00:42:37,380 --> 00:42:40,440
use<font color="#CCCCCC"> them much earlier</font>

953
00:42:38,580 --> 00:42:42,600
which makes it cheaper<font color="#CCCCCC"> to fix them</font>

954
00:42:40,440 --> 00:42:44,490
<font color="#E5E5E5">because the cost of fixing a bug goes up</font>

955
00:42:42,600 --> 00:42:45,750
exponentially of course with the you

956
00:42:44,490 --> 00:42:48,450
<font color="#E5E5E5">know the length of time it sits in your</font>

957
00:42:45,750 --> 00:42:51,780
<font color="#E5E5E5">in your code base</font><font color="#CCCCCC"> so we find them</font><font color="#E5E5E5"> much</font>

958
00:42:48,450 --> 00:42:54,770
<font color="#CCCCCC">earlier</font><font color="#E5E5E5"> we find bugs which</font><font color="#CCCCCC"> we're not</font>

959
00:42:51,780 --> 00:42:57,210
sure we<font color="#E5E5E5"> would</font><font color="#CCCCCC"> have caught by testing</font><font color="#E5E5E5"> so</font>

960
00:42:54,770 --> 00:43:01,950
we're very<font color="#CCCCCC"> happy with it as a technique</font>

961
00:42:57,210 --> 00:43:06,200
<font color="#E5E5E5">but yeah I think I think</font><font color="#CCCCCC"> we're still</font>

962
00:43:01,950 --> 00:43:06,200
learning<font color="#CCCCCC"> how to</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> it even</font><font color="#E5E5E5"> though I</font>

963
00:43:08,480 --> 00:43:13,890
think<font color="#E5E5E5"> that's all the</font><font color="#CCCCCC"> questions so thank</font>

964
00:43:11,490 --> 00:43:14,479
<font color="#E5E5E5">you very much indeed</font><font color="#CCCCCC"> else</font><font color="#E5E5E5"> to read thank</font>

965
00:43:13,890 --> 00:43:22,440
<font color="#E5E5E5">you</font>

966
00:43:14,480 --> 00:43:24,500
[Applause]

967
00:43:22,440 --> 00:43:24,500
you

968
00:43:25,080 --> 00:43:27,140
you

