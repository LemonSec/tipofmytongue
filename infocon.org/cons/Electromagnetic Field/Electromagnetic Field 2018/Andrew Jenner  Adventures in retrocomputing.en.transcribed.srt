1
00:00:00,030 --> 00:00:07,799
hello hello welcome to<font color="#E5E5E5"> EMS stage</font><font color="#CCCCCC"> B our</font>

2
00:00:05,009 --> 00:00:09,300
next speaker<font color="#E5E5E5"> is Andrew Jenna who's going</font>

3
00:00:07,799 --> 00:00:12,920
<font color="#CCCCCC">to be talking</font><font color="#E5E5E5"> about adventures in</font>

4
00:00:09,300 --> 00:00:15,690
retrocomputing<font color="#CCCCCC"> that would you thank you</font>

5
00:00:12,920 --> 00:00:18,270
<font color="#E5E5E5">so this</font><font color="#CCCCCC"> is a this is a story about some</font>

6
00:00:15,690 --> 00:00:20,970
pretty absurd lengths that I I went to

7
00:00:18,270 --> 00:00:25,769
to get an old game running on on new

8
00:00:20,970 --> 00:00:30,089
computers<font color="#CCCCCC"> like like many of the best</font>

9
00:00:25,769 --> 00:00:34,440
stories<font color="#E5E5E5"> this story starts when my</font>

10
00:00:30,090 --> 00:00:35,969
parents brought home a PC a home

11
00:00:34,440 --> 00:00:41,430
computer<font color="#E5E5E5"> into our house for the first</font>

12
00:00:35,969 --> 00:00:43,710
<font color="#CCCCCC">time it was</font><font color="#E5E5E5"> an Amstrad PC</font><font color="#CCCCCC"> 15-12 a pretty</font>

13
00:00:41,430 --> 00:00:48,739
good PC for the<font color="#E5E5E5"> time had a an</font><font color="#CCCCCC"> 8</font>

14
00:00:43,710 --> 00:00:52,469
megahertz 8086 CPU<font color="#E5E5E5"> half a mega RAM and</font>

15
00:00:48,739 --> 00:00:56,550
16 color graphics a resolution of 640 by

16
00:00:52,469 --> 00:01:00,710
200 had a<font color="#CCCCCC"> PC</font><font color="#E5E5E5"> speaker that maybe people</font>

17
00:00:56,550 --> 00:01:05,009
music that sounds pretty grating<font color="#E5E5E5"> to</font>

18
00:01:00,710 --> 00:01:06,600
today's ears and it had a came with a

19
00:01:05,010 --> 00:01:08,820
graphical<font color="#CCCCCC"> user interface</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> a mouse</font>

20
00:01:06,600 --> 00:01:11,880
which was<font color="#E5E5E5"> which was the hot new</font><font color="#CCCCCC"> thing at</font>

21
00:01:08,820 --> 00:01:15,119
the time<font color="#E5E5E5"> I came with a few bits of</font>

22
00:01:11,880 --> 00:01:18,990
software<font color="#E5E5E5"> but we were looking</font><font color="#CCCCCC"> around for</font>

23
00:01:15,119 --> 00:01:22,729
<font color="#CCCCCC">new things to run on it</font><font color="#E5E5E5"> and somehow got</font>

24
00:01:18,990 --> 00:01:25,439
hold<font color="#E5E5E5"> of a disk full of pirated games and</font>

25
00:01:22,729 --> 00:01:27,929
there were a few few fun games on this

26
00:01:25,439 --> 00:01:31,079
on this<font color="#E5E5E5"> disc there was</font><font color="#CCCCCC"> Willy the worm</font>

27
00:01:27,930 --> 00:01:33,930
and a Frogger clone called hopper<font color="#CCCCCC"> but</font>

28
00:01:31,079 --> 00:01:34,320
our<font color="#E5E5E5"> favorite game to play was this one</font>

29
00:01:33,930 --> 00:01:37,530
digger

30
00:01:34,320 --> 00:01:38,309
<font color="#CCCCCC">bye-bye windmill software I didn't know</font>

31
00:01:37,530 --> 00:01:39,810
anything about it

32
00:01:38,310 --> 00:01:41,400
it didn't<font color="#E5E5E5"> come with any</font><font color="#CCCCCC"> instructions or</font>

33
00:01:39,810 --> 00:01:43,439
<font color="#E5E5E5">anything we</font><font color="#CCCCCC"> just had to kind of figure</font>

34
00:01:41,400 --> 00:01:49,290
<font color="#E5E5E5">out how to play it as we as we went</font>

35
00:01:43,439 --> 00:01:51,869
along<font color="#E5E5E5"> and this game had these sort of</font>

36
00:01:49,290 --> 00:01:54,060
<font color="#E5E5E5">fantastic sort of cartoony graphics</font><font color="#CCCCCC"> it</font>

37
00:01:51,869 --> 00:01:56,729
had music<font color="#E5E5E5"> that was a little more</font>

38
00:01:54,060 --> 00:01:59,969
<font color="#CCCCCC">sophisticated</font><font color="#E5E5E5"> than the the music</font><font color="#CCCCCC"> in the</font>

39
00:01:56,729 --> 00:02:03,119
other games the programmers were clever

40
00:01:59,969 --> 00:02:05,759
<font color="#CCCCCC">enough to</font><font color="#E5E5E5"> be able to make the notes in</font>

41
00:02:03,119 --> 00:02:08,038
the background music<font color="#E5E5E5"> actually change</font>

42
00:02:05,759 --> 00:02:13,200
<font color="#CCCCCC">volume over time</font><font color="#E5E5E5"> so they they were</font>

43
00:02:08,038 --> 00:02:13,989
<font color="#E5E5E5">nicely shaped with with envelopes we</font>

44
00:02:13,200 --> 00:02:15,399
because we

45
00:02:13,990 --> 00:02:16,930
didn't know how<font color="#CCCCCC"> to play the game</font><font color="#E5E5E5"> it was</font>

46
00:02:15,400 --> 00:02:20,530
actually<font color="#E5E5E5"> some time before we figured out</font>

47
00:02:16,930 --> 00:02:21,970
that<font color="#E5E5E5"> the f1 key fired a fireball and you</font>

48
00:02:20,530 --> 00:02:24,370
could you could kill the enemies that

49
00:02:21,970 --> 00:02:28,630
<font color="#E5E5E5">way</font><font color="#CCCCCC"> made it much easier to</font><font color="#E5E5E5"> play once we</font>

50
00:02:24,370 --> 00:02:31,090
figured that<font color="#CCCCCC"> out some years later we</font>

51
00:02:28,630 --> 00:02:35,019
finally got<font color="#CCCCCC"> rid of that</font><font color="#E5E5E5"> old machine and</font>

52
00:02:31,090 --> 00:02:38,310
upgraded to a 486 machine<font color="#E5E5E5"> which came</font>

53
00:02:35,020 --> 00:02:40,390
with super<font color="#CCCCCC"> vga graphics but</font>

54
00:02:38,310 --> 00:02:45,060
<font color="#CCCCCC">unfortunately</font><font color="#E5E5E5"> digger did not work on</font>

55
00:02:40,390 --> 00:02:46,899
<font color="#CCCCCC">this machine it the</font><font color="#E5E5E5"> the programmers had</font>

56
00:02:45,060 --> 00:02:50,220
programmed the machine<font color="#E5E5E5"> at such a low</font>

57
00:02:46,900 --> 00:02:53,740
<font color="#E5E5E5">level</font><font color="#CCCCCC"> that they were</font><font color="#E5E5E5"> programming the</font>

58
00:02:50,220 --> 00:02:56,680
individual registers on<font color="#CCCCCC"> the CGA card</font><font color="#E5E5E5"> and</font>

59
00:02:53,740 --> 00:02:59,860
<font color="#CCCCCC">vga is not compatible with</font><font color="#E5E5E5"> CGA to that</font>

60
00:02:56,680 --> 00:03:01,930
extent<font color="#E5E5E5"> so if you try to play digger on</font><font color="#CCCCCC"> a</font>

61
00:02:59,860 --> 00:03:03,880
<font color="#CCCCCC">vga</font><font color="#E5E5E5"> or super vga machine it looks</font>

62
00:03:01,930 --> 00:03:06,550
something like this the display is all

63
00:03:03,880 --> 00:03:08,109
corrupted<font color="#E5E5E5"> and you can't see what's going</font>

64
00:03:06,550 --> 00:03:11,920
<font color="#CCCCCC">on it's completely unplayable and</font><font color="#E5E5E5"> it's</font>

65
00:03:08,110 --> 00:03:14,230
<font color="#E5E5E5">also far far</font><font color="#CCCCCC"> too fast</font><font color="#E5E5E5"> because the all</font>

66
00:03:11,920 --> 00:03:18,010
the timing in<font color="#E5E5E5"> in digger was done just</font><font color="#CCCCCC"> by</font>

67
00:03:14,230 --> 00:03:21,070
<font color="#CCCCCC">counting</font><font color="#E5E5E5"> CPU cycles so if your CPU is</font>

68
00:03:18,010 --> 00:03:26,769
actually is twice as<font color="#E5E5E5"> fast your the game</font>

69
00:03:21,070 --> 00:03:30,220
will play<font color="#E5E5E5"> twice as fast</font><font color="#CCCCCC"> so number of</font>

70
00:03:26,770 --> 00:03:33,340
years passed<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I had a idea that I</font>

71
00:03:30,220 --> 00:03:36,490
wanted<font color="#E5E5E5"> to fix this to make it make it</font>

72
00:03:33,340 --> 00:03:38,800
<font color="#E5E5E5">playable on modern machines and I</font>

73
00:03:36,490 --> 00:03:41,950
actually went<font color="#CCCCCC"> to the the first</font><font color="#E5E5E5"> thing I</font>

74
00:03:38,800 --> 00:03:43,600
did<font color="#E5E5E5"> was actually I reverse engineered</font>

75
00:03:41,950 --> 00:03:46,720
the the graphics out of the the

76
00:03:43,600 --> 00:03:49,570
executable file and redrew them in in

77
00:03:46,720 --> 00:03:51,430
VGA resolution<font color="#CCCCCC"> just for fun I didn't</font>

78
00:03:49,570 --> 00:03:54,910
think I<font color="#CCCCCC"> would actually do anything with</font>

79
00:03:51,430 --> 00:03:57,520
them<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> and then in 1998 I</font>

80
00:03:54,910 --> 00:04:02,350
finally<font color="#E5E5E5"> got around to D compiling the</font>

81
00:03:57,520 --> 00:04:04,810
entire game back to<font color="#CCCCCC"> the C code</font><font color="#E5E5E5"> and I</font>

82
00:04:02,350 --> 00:04:07,900
believe this is<font color="#CCCCCC"> the first time that</font>

83
00:04:04,810 --> 00:04:09,340
somebody<font color="#E5E5E5"> had had remastered a game in</font>

84
00:04:07,900 --> 00:04:12,970
this<font color="#E5E5E5"> way I've heard of a few other</font>

85
00:04:09,340 --> 00:04:17,170
projects<font color="#E5E5E5"> since similar projects with</font>

86
00:04:12,970 --> 00:04:18,760
other games but the as far as I know I

87
00:04:17,170 --> 00:04:20,980
was the I was<font color="#E5E5E5"> the first person to do</font>

88
00:04:18,760 --> 00:04:23,919
that<font color="#E5E5E5"> and if you have any information</font><font color="#CCCCCC"> to</font>

89
00:04:20,980 --> 00:04:26,860
the<font color="#E5E5E5"> contrary let me know and I'll track</font>

90
00:04:23,919 --> 00:04:27,680
that but<font color="#CCCCCC"> so once I got it back to the</font><font color="#E5E5E5"> C</font>

91
00:04:26,860 --> 00:04:30,169
code<font color="#E5E5E5"> I</font>

92
00:04:27,680 --> 00:04:31,820
was able<font color="#CCCCCC"> to add</font><font color="#E5E5E5"> the VGA graphics that I</font>

93
00:04:30,169 --> 00:04:35,630
had drawn into it

94
00:04:31,820 --> 00:04:37,880
<font color="#E5E5E5">I added sound blaster sound</font><font color="#CCCCCC"> I added a</font>

95
00:04:35,630 --> 00:04:40,250
<font color="#CCCCCC">few more features</font><font color="#E5E5E5"> game recording and</font>

96
00:04:37,880 --> 00:04:43,820
playback so that you could show<font color="#CCCCCC"> off your</font>

97
00:04:40,250 --> 00:04:45,650
high scores to<font color="#E5E5E5"> your friends a mode where</font>

98
00:04:43,820 --> 00:04:47,990
two players<font color="#CCCCCC"> can play simultaneously and</font>

99
00:04:45,650 --> 00:04:49,820
either<font color="#E5E5E5"> cooperate or or fight each other</font>

100
00:04:47,990 --> 00:04:52,850
<font color="#E5E5E5">depending on on how you want</font><font color="#CCCCCC"> to play it</font>

101
00:04:49,820 --> 00:04:56,780
<font color="#CCCCCC">I had it the ability</font><font color="#E5E5E5"> to to redefine the</font>

102
00:04:52,850 --> 00:04:59,330
keys which kind<font color="#CCCCCC"> of useful for people</font><font color="#E5E5E5"> who</font>

103
00:04:56,780 --> 00:05:01,909
<font color="#E5E5E5">whose keyboards didn't work</font><font color="#CCCCCC"> very well</font>

104
00:04:59,330 --> 00:05:05,090
with the<font color="#E5E5E5"> keys</font><font color="#CCCCCC"> that it came with and</font><font color="#E5E5E5"> an</font>

105
00:05:01,910 --> 00:05:06,919
exit<font color="#E5E5E5"> button the original digger to exit</font>

106
00:05:05,090 --> 00:05:11,179
the<font color="#E5E5E5"> game you actually</font><font color="#CCCCCC"> had to reboot the</font>

107
00:05:06,919 --> 00:05:14,150
entire computer as a number of games did

108
00:05:11,180 --> 00:05:17,300
in those<font color="#E5E5E5"> days</font><font color="#CCCCCC"> there was</font><font color="#E5E5E5"> one part of the</font>

109
00:05:14,150 --> 00:05:20,060
<font color="#E5E5E5">game which I never got exactly right</font><font color="#CCCCCC"> and</font>

110
00:05:17,300 --> 00:05:24,889
that<font color="#CCCCCC"> was this screen when you get a new</font>

111
00:05:20,060 --> 00:05:27,350
high score<font color="#E5E5E5"> the the</font><font color="#CCCCCC"> original digger</font><font color="#E5E5E5"> would</font>

112
00:05:24,889 --> 00:05:29,979
hammer the CJS palette registers to

113
00:05:27,350 --> 00:05:34,660
change the colors<font color="#E5E5E5"> of the letters on this</font>

114
00:05:29,979 --> 00:05:39,770
<font color="#E5E5E5">on this screen in a sort of shimmering</font>

115
00:05:34,660 --> 00:05:42,289
fashion and because the computer that<font color="#E5E5E5"> I</font>

116
00:05:39,770 --> 00:05:45,080
had<font color="#CCCCCC"> originally played digger on was not</font>

117
00:05:42,289 --> 00:05:47,530
the same speed as<font color="#CCCCCC"> the computer that</font>

118
00:05:45,080 --> 00:05:50,030
digger was written on<font color="#E5E5E5"> I didn't know</font>

119
00:05:47,530 --> 00:05:54,520
<font color="#E5E5E5">exactly how this screen was supposed to</font>

120
00:05:50,030 --> 00:05:58,729
<font color="#E5E5E5">look so I wasn't able to reproduce it</font>

121
00:05:54,520 --> 00:06:04,130
properly<font color="#CCCCCC"> so I just made a sort</font><font color="#E5E5E5"> of guess</font>

122
00:05:58,729 --> 00:06:05,990
what how I thought<font color="#E5E5E5"> it should look but it</font>

123
00:06:04,130 --> 00:06:08,800
was<font color="#E5E5E5"> it</font><font color="#CCCCCC"> always</font><font color="#E5E5E5"> kind of bothered</font><font color="#CCCCCC"> me that</font>

124
00:06:05,990 --> 00:06:17,990
there was<font color="#E5E5E5"> this particularly visible</font>

125
00:06:08,800 --> 00:06:21,050
thing that shows<font color="#E5E5E5"> that it was the remake</font>

126
00:06:17,990 --> 00:06:23,360
was was<font color="#E5E5E5"> inexact from the original in</font>

127
00:06:21,050 --> 00:06:25,220
<font color="#E5E5E5">that respect I guess the the speed of</font>

128
00:06:23,360 --> 00:06:26,810
the game<font color="#CCCCCC"> overall was was</font><font color="#E5E5E5"> also in exact</font>

129
00:06:25,220 --> 00:06:31,220
but that that<font color="#E5E5E5"> seemed less of a concern</font>

130
00:06:26,810 --> 00:06:33,260
<font color="#CCCCCC">to me</font><font color="#E5E5E5"> at the time now the answer to this</font>

131
00:06:31,220 --> 00:06:36,700
kind of<font color="#E5E5E5"> problem is of course emulation</font>

132
00:06:33,260 --> 00:06:38,760
emulator is a program that<font color="#E5E5E5"> will take a</font>

133
00:06:36,700 --> 00:06:41,640
modern machine<font color="#E5E5E5"> and</font>

134
00:06:38,760 --> 00:06:43,980
<font color="#E5E5E5">teach it</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> behave like like an older</font>

135
00:06:41,640 --> 00:06:49,169
machine<font color="#CCCCCC"> and there are a number</font><font color="#E5E5E5"> of</font>

136
00:06:43,980 --> 00:06:51,630
emulators<font color="#E5E5E5"> for</font><font color="#CCCCCC"> emulating old</font><font color="#E5E5E5"> PCs I've</font>

137
00:06:49,170 --> 00:06:53,870
actually contributed to<font color="#CCCCCC"> a whole bunch of</font>

138
00:06:51,630 --> 00:06:58,320
them over<font color="#E5E5E5"> the years</font>

139
00:06:53,870 --> 00:07:00,300
adding support<font color="#E5E5E5"> for various games and</font>

140
00:06:58,320 --> 00:07:04,170
bits of<font color="#CCCCCC"> hardware that</font><font color="#E5E5E5"> did did weird</font>

141
00:07:00,300 --> 00:07:05,880
things<font color="#CCCCCC"> with them the mess with</font><font color="#E5E5E5"> the</font>

142
00:07:04,170 --> 00:07:08,460
multiple<font color="#CCCCCC"> emulators super system</font><font color="#E5E5E5"> which is</font>

143
00:07:05,880 --> 00:07:12,510
now part<font color="#E5E5E5"> of the main multiple arcade</font>

144
00:07:08,460 --> 00:07:15,419
machine emulator<font color="#CCCCCC"> is a I mean</font><font color="#E5E5E5"> is</font>

145
00:07:12,510 --> 00:07:17,190
extremely thorough in in the<font color="#E5E5E5"> number of</font>

146
00:07:15,420 --> 00:07:19,790
machines<font color="#CCCCCC"> that it</font><font color="#E5E5E5"> emulates and the</font>

147
00:07:17,190 --> 00:07:23,190
accuracy<font color="#CCCCCC"> in which it</font><font color="#E5E5E5"> emulates them</font>

148
00:07:19,790 --> 00:07:25,920
there's<font color="#CCCCCC"> DOS box which may be</font><font color="#E5E5E5"> very</font>

149
00:07:23,190 --> 00:07:28,950
familiar for anyone who ever runs old

150
00:07:25,920 --> 00:07:30,630
<font color="#E5E5E5">software</font><font color="#CCCCCC"> it's a very convenient</font><font color="#E5E5E5"> way to</font>

151
00:07:28,950 --> 00:07:34,289
do that because<font color="#E5E5E5"> it can access</font><font color="#CCCCCC"> the drives</font>

152
00:07:30,630 --> 00:07:37,770
on your<font color="#E5E5E5"> on the host machine</font><font color="#CCCCCC"> there are a</font>

153
00:07:34,290 --> 00:07:39,660
few<font color="#E5E5E5"> others that have that other people</font>

154
00:07:37,770 --> 00:07:41,370
<font color="#CCCCCC">have</font><font color="#E5E5E5"> written over the years for</font><font color="#CCCCCC"> one</font>

155
00:07:39,660 --> 00:07:45,120
<font color="#E5E5E5">purpose or another including a couple</font>

156
00:07:41,370 --> 00:07:47,670
that<font color="#CCCCCC"> I written myself the refer is a is</font>

157
00:07:45,120 --> 00:07:49,620
an emulator that<font color="#E5E5E5"> is in progress</font><font color="#CCCCCC"> that</font>

158
00:07:47,670 --> 00:07:53,130
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> been a sort of a long-running</font>

159
00:07:49,620 --> 00:07:56,490
project it's an emulator that<font color="#CCCCCC"> I hope</font>

160
00:07:53,130 --> 00:07:58,469
you'll be able<font color="#CCCCCC"> to sort of reconfigure</font>

161
00:07:56,490 --> 00:08:00,570
dynamically you can write a

162
00:07:58,470 --> 00:08:02,580
configuration<font color="#E5E5E5"> file that specifies</font>

163
00:08:00,570 --> 00:08:04,620
<font color="#CCCCCC">exactly what Hardware you want in your</font>

164
00:08:02,580 --> 00:08:06,419
emulated machine and it'll figure out

165
00:08:04,620 --> 00:08:08,130
how to sort of<font color="#E5E5E5"> worry</font><font color="#CCCCCC"> or luck for</font><font color="#E5E5E5"> you so</font>

166
00:08:06,420 --> 00:08:10,290
if you wanted<font color="#CCCCCC"> to take the sound chip</font>

167
00:08:08,130 --> 00:08:12,840
from a Commodore 64<font color="#CCCCCC"> and</font><font color="#E5E5E5"> place it in a</font>

168
00:08:10,290 --> 00:08:15,900
BBC<font color="#E5E5E5"> micro you could you could do stuff</font>

169
00:08:12,840 --> 00:08:19,049
<font color="#CCCCCC">like that and then</font><font color="#E5E5E5"> a t6 sim is a very</font>

170
00:08:15,900 --> 00:08:22,440
simple basic emulator that<font color="#CCCCCC"> I wrote in</font>

171
00:08:19,050 --> 00:08:26,220
order<font color="#CCCCCC"> to test a compiler that I was</font>

172
00:08:22,440 --> 00:08:32,760
porting a port of the<font color="#E5E5E5"> GCC</font><font color="#CCCCCC"> canoe C</font>

173
00:08:26,220 --> 00:08:38,580
compiler<font color="#E5E5E5"> targeting the the 8086 and none</font>

174
00:08:32,760 --> 00:08:42,210
of<font color="#E5E5E5"> these have a accurate CPU cycle</font>

175
00:08:38,580 --> 00:08:46,080
timing<font color="#CCCCCC"> the reason</font><font color="#E5E5E5"> for this is</font><font color="#CCCCCC"> that the</font>

176
00:08:42,210 --> 00:08:47,940
exact timing<font color="#E5E5E5"> of the of the of how long</font>

177
00:08:46,080 --> 00:08:50,130
<font color="#CCCCCC">each instruction</font><font color="#E5E5E5"> takes in terms of the</font>

178
00:08:47,940 --> 00:08:51,900
<font color="#E5E5E5">the number of clock cycles it</font><font color="#CCCCCC"> takes is</font>

179
00:08:50,130 --> 00:08:53,550
not actually documented<font color="#CCCCCC"> anywhere</font>

180
00:08:51,900 --> 00:08:56,900
<font color="#E5E5E5">there are there are</font><font color="#CCCCCC"> documents online</font>

181
00:08:53,550 --> 00:09:01,920
<font color="#E5E5E5">that give best case timings for these</font>

182
00:08:56,900 --> 00:09:04,829
for each instruction<font color="#CCCCCC"> but the there</font><font color="#E5E5E5"> are a</font>

183
00:09:01,920 --> 00:09:07,620
number<font color="#E5E5E5"> of reasons why any particular</font>

184
00:09:04,830 --> 00:09:11,240
instruction might not take might take

185
00:09:07,620 --> 00:09:14,190
longer than<font color="#E5E5E5"> the the optimal time and a</font>

186
00:09:11,240 --> 00:09:15,720
lot<font color="#CCCCCC"> of ways in which the other parts of</font>

187
00:09:14,190 --> 00:09:19,920
the machine can steal cycles from<font color="#E5E5E5"> the</font>

188
00:09:15,720 --> 00:09:25,080
<font color="#E5E5E5">CPU will talk about more that more</font><font color="#CCCCCC"> about</font>

189
00:09:19,920 --> 00:09:30,930
<font color="#CCCCCC">that in a minute in 2011 I finally</font><font color="#E5E5E5"> got</font>

190
00:09:25,080 --> 00:09:34,890
myself an original<font color="#E5E5E5"> IBM XT it was built</font>

191
00:09:30,930 --> 00:09:37,890
in 1984 I believe and as far as software

192
00:09:34,890 --> 00:09:43,290
<font color="#E5E5E5">is concerned it is pretty</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> identical</font>

193
00:09:37,890 --> 00:09:45,270
to<font color="#CCCCCC"> the original IBM PC</font><font color="#E5E5E5"> from 1981 that is</font>

194
00:09:43,290 --> 00:09:48,900
the sort of granddaddy of all of the the

195
00:09:45,270 --> 00:09:52,620
<font color="#CCCCCC">x86 machines that had taken over</font><font color="#E5E5E5"> the</font>

196
00:09:48,900 --> 00:09:54,510
world<font color="#E5E5E5"> since pretty much so this</font><font color="#CCCCCC"> machine</font>

197
00:09:52,620 --> 00:10:01,200
has a<font color="#E5E5E5"> four point seven seven megahertz</font>

198
00:09:54,510 --> 00:10:05,819
<font color="#CCCCCC">Intel 8088</font><font color="#E5E5E5"> CPU it's a</font><font color="#CCCCCC"> 8-bit 8-bit bus</font>

199
00:10:01,200 --> 00:10:09,960
but 16-bit CPU internally

200
00:10:05,820 --> 00:10:12,060
the machine has 640<font color="#E5E5E5"> K of</font><font color="#CCCCCC"> RAM she got</font>

201
00:10:09,960 --> 00:10:14,100
quite lucky it<font color="#E5E5E5"> was a machine I bought on</font>

202
00:10:12,060 --> 00:10:17,099
<font color="#E5E5E5">eBay</font><font color="#CCCCCC"> and it came with</font><font color="#E5E5E5"> a bunch of</font>

203
00:10:14,100 --> 00:10:19,680
expansion cards including a<font color="#E5E5E5"> ram</font>

204
00:10:17,100 --> 00:10:21,840
expansion to take the take the<font color="#E5E5E5"> RAM from</font>

205
00:10:19,680 --> 00:10:25,260
<font color="#E5E5E5">the 256 K that was on the motherboard</font>

206
00:10:21,840 --> 00:10:26,420
<font color="#CCCCCC">all the way up to 640 K which as the</font>

207
00:10:25,260 --> 00:10:31,260
saying goes should be enough<font color="#CCCCCC"> for</font><font color="#E5E5E5"> anyone</font>

208
00:10:26,420 --> 00:10:33,660
<font color="#CCCCCC">I have one five and a quarter inch 360 K</font>

209
00:10:31,260 --> 00:10:35,970
floppy drive for it<font color="#CCCCCC"> I have some other</font>

210
00:10:33,660 --> 00:10:38,910
floppy drives that<font color="#E5E5E5"> I keep meaning to fix</font>

211
00:10:35,970 --> 00:10:41,910
so<font color="#E5E5E5"> I can have the dual floppy system</font>

212
00:10:38,910 --> 00:10:45,510
that was very<font color="#CCCCCC"> desirable at the in the</font>

213
00:10:41,910 --> 00:10:47,490
day<font color="#E5E5E5"> I also bought a CGA graphics card</font>

214
00:10:45,510 --> 00:10:49,560
for<font color="#CCCCCC"> it</font><font color="#E5E5E5"> so that I could I could play</font><font color="#CCCCCC"> all</font>

215
00:10:47,490 --> 00:10:52,740
the CGA games<font color="#E5E5E5"> just the way they were</font>

216
00:10:49,560 --> 00:10:54,420
meant<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be so CGA graphics it's it's a</font>

217
00:10:52,740 --> 00:10:56,340
<font color="#E5E5E5">little less</font><font color="#CCCCCC"> sophisticated than</font><font color="#E5E5E5"> the the</font>

218
00:10:54,420 --> 00:10:58,890
graphics in the<font color="#CCCCCC"> Amstrad pc v een</font><font color="#E5E5E5"> 12 that</font>

219
00:10:56,340 --> 00:11:00,300
<font color="#CCCCCC">i</font><font color="#E5E5E5"> started with in</font><font color="#CCCCCC"> the 640 by 200</font>

220
00:10:58,890 --> 00:11:02,580
resolution you<font color="#E5E5E5"> can only have</font><font color="#CCCCCC"> two colors</font>

221
00:11:00,300 --> 00:11:04,490
on screen<font color="#E5E5E5"> at once or four colors at half</font>

222
00:11:02,580 --> 00:11:07,670
<font color="#CCCCCC">the resolution</font><font color="#E5E5E5"> but</font>

223
00:11:04,490 --> 00:11:11,720
you plug the<font color="#E5E5E5"> machine into an NTSC</font>

224
00:11:07,670 --> 00:11:13,819
monitor or an American TV<font color="#E5E5E5"> set you can</font>

225
00:11:11,720 --> 00:11:21,550
actually<font color="#E5E5E5"> get all 16 colors on screen at</font>

226
00:11:13,820 --> 00:11:25,610
once at a resolution<font color="#E5E5E5"> of about 160 by 200</font>

227
00:11:21,550 --> 00:11:27,829
<font color="#CCCCCC">when I got</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> machine it didn't have a</font>

228
00:11:25,610 --> 00:11:32,120
keyboard<font color="#CCCCCC"> it didn't have any</font><font color="#E5E5E5"> working</font>

229
00:11:27,830 --> 00:11:33,770
floppy drive or hard drive and the only

230
00:11:32,120 --> 00:11:35,779
graphics<font color="#E5E5E5"> card that</font><font color="#CCCCCC"> it came with was not</font>

231
00:11:33,770 --> 00:11:39,860
compatible with the the<font color="#E5E5E5"> one monitor that</font>

232
00:11:35,779 --> 00:11:41,240
<font color="#E5E5E5">I had for it</font><font color="#CCCCCC"> so my first job</font><font color="#E5E5E5"> was to</font><font color="#CCCCCC"> try</font>

233
00:11:39,860 --> 00:11:46,130
<font color="#E5E5E5">and figure</font><font color="#CCCCCC"> out how</font><font color="#E5E5E5"> to actually load code</font>

234
00:11:41,240 --> 00:11:48,800
<font color="#CCCCCC">onto this</font><font color="#E5E5E5"> machine</font><font color="#CCCCCC"> now the back in those</font>

235
00:11:46,130 --> 00:11:52,630
<font color="#CCCCCC">days when you bought a</font><font color="#E5E5E5"> PC from IBM</font><font color="#CCCCCC"> it</font>

236
00:11:48,800 --> 00:11:56,060
came with the<font color="#E5E5E5"> great deal of technical</font>

237
00:11:52,630 --> 00:11:57,760
<font color="#E5E5E5">documentation it came with these the</font>

238
00:11:56,060 --> 00:12:01,219
schematics of<font color="#CCCCCC"> the entire machine and</font>

239
00:11:57,760 --> 00:12:04,939
also the<font color="#CCCCCC"> the assembler listing off the</font>

240
00:12:01,220 --> 00:12:07,550
<font color="#E5E5E5">BIOS the the ROM chip inside that that</font>

241
00:12:04,940 --> 00:12:08,930
actually boots the<font color="#E5E5E5"> machine and looking</font>

242
00:12:07,550 --> 00:12:12,469
over<font color="#CCCCCC"> these assembler listings</font>

243
00:12:08,930 --> 00:12:15,079
I noticed that<font color="#CCCCCC"> IBM had left in there a</font>

244
00:12:12,470 --> 00:12:18,110
little<font color="#E5E5E5"> something that they</font><font color="#CCCCCC"> they used in</font>

245
00:12:15,079 --> 00:12:19,670
the factory<font color="#CCCCCC"> for testing</font><font color="#E5E5E5"> for testing the</font>

246
00:12:18,110 --> 00:12:22,760
machines as they as they<font color="#CCCCCC"> came off the</font>

247
00:12:19,670 --> 00:12:25,599
<font color="#CCCCCC">assembly line a little piece of code</font>

248
00:12:22,760 --> 00:12:28,130
<font color="#E5E5E5">that that looks for</font><font color="#CCCCCC"> a particular byte</font>

249
00:12:25,600 --> 00:12:30,470
<font color="#E5E5E5">coming in over the keyboard port</font><font color="#CCCCCC"> and if</font>

250
00:12:28,130 --> 00:12:33,680
it sees that byte<font color="#E5E5E5"> instead of the normal</font>

251
00:12:30,470 --> 00:12:35,120
<font color="#CCCCCC">byte that</font><font color="#E5E5E5"> says hey on a keyboard</font><font color="#CCCCCC"> then it</font>

252
00:12:33,680 --> 00:12:36,439
will know that<font color="#E5E5E5"> it's not actually a</font>

253
00:12:35,120 --> 00:12:39,110
<font color="#CCCCCC">keyboard that's connected to</font><font color="#E5E5E5"> the machine</font>

254
00:12:36,440 --> 00:12:43,279
but IBM's internal manufacturing test

255
00:12:39,110 --> 00:12:45,740
device<font color="#E5E5E5"> and what it does with this test</font>

256
00:12:43,279 --> 00:12:48,110
device is it just loads a stream of

257
00:12:45,740 --> 00:12:49,850
bytes over<font color="#CCCCCC"> the keyboard port dumps them</font>

258
00:12:48,110 --> 00:12:52,250
into memory<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then when that when</font><font color="#CCCCCC"> that</font>

259
00:12:49,850 --> 00:12:53,899
stream is<font color="#CCCCCC"> finished then it just goes and</font>

260
00:12:52,250 --> 00:12:55,520
runs<font color="#E5E5E5"> them so it's a it's a really</font><font color="#CCCCCC"> good</font>

261
00:12:53,899 --> 00:12:58,670
way of<font color="#CCCCCC"> just getting code onto</font><font color="#E5E5E5"> the</font>

262
00:12:55,520 --> 00:13:00,890
machine<font color="#E5E5E5"> really quickly</font><font color="#CCCCCC"> I started off</font>

263
00:12:58,670 --> 00:13:02,719
actually<font color="#E5E5E5"> just by plugging an Arduino</font>

264
00:13:00,890 --> 00:13:05,810
into the into the keyboard port to get

265
00:13:02,720 --> 00:13:08,270
code<font color="#CCCCCC"> onto it I have since built this</font>

266
00:13:05,810 --> 00:13:09,859
<font color="#E5E5E5">this little circuit which is basically</font>

267
00:13:08,270 --> 00:13:12,020
the<font color="#E5E5E5"> same</font><font color="#CCCCCC"> thing it's basically an Arduino</font>

268
00:13:09,860 --> 00:13:15,350
it's an<font color="#CCCCCC"> 18 mega</font><font color="#E5E5E5"> 3 to 8</font><font color="#CCCCCC"> microcontroller</font>

269
00:13:12,020 --> 00:13:16,730
<font color="#E5E5E5">running at 16 megahertz</font><font color="#CCCCCC"> the the</font><font color="#E5E5E5"> irony</font>

270
00:13:15,350 --> 00:13:17,550
that this<font color="#E5E5E5"> is actually quite a bit more</font>

271
00:13:16,730 --> 00:13:19,470
powerful<font color="#E5E5E5"> than</font>

272
00:13:17,550 --> 00:13:23,219
<font color="#E5E5E5">the PC that it's plugged into is</font><font color="#CCCCCC"> not</font>

273
00:13:19,470 --> 00:13:25,860
lost<font color="#E5E5E5"> on</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> so as well as</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> as well</font><font color="#CCCCCC"> as</font>

274
00:13:23,220 --> 00:13:27,839
<font color="#E5E5E5">the Arduino this has got a</font><font color="#CCCCCC"> pass-through</font>

275
00:13:25,860 --> 00:13:29,220
for<font color="#CCCCCC"> the for the actual keyboard so it</font>

276
00:13:27,839 --> 00:13:31,649
plugs<font color="#E5E5E5"> into the keyboard port and the</font>

277
00:13:29,220 --> 00:13:33,240
actual keyboard plugs<font color="#E5E5E5"> into this and it's</font>

278
00:13:31,649 --> 00:13:38,279
also<font color="#E5E5E5"> got a serial port to</font><font color="#CCCCCC"> plug it into a</font>

279
00:13:33,240 --> 00:13:40,860
modern<font color="#E5E5E5"> machine for transferring programs</font>

280
00:13:38,279 --> 00:13:44,310
<font color="#E5E5E5">over from a modern</font><font color="#CCCCCC"> machine on</font><font color="#E5E5E5"> to the XT</font>

281
00:13:40,860 --> 00:13:46,410
and there's one more<font color="#CCCCCC"> connection here</font>

282
00:13:44,310 --> 00:13:48,390
this little<font color="#E5E5E5"> red wire that you can see</font>

283
00:13:46,410 --> 00:13:52,079
that goes off<font color="#E5E5E5"> into</font><font color="#CCCCCC"> the corner</font><font color="#E5E5E5"> that's</font>

284
00:13:48,390 --> 00:13:55,350
actually spliced into the XTS<font color="#CCCCCC"> power good</font>

285
00:13:52,079 --> 00:13:57,899
<font color="#CCCCCC">line from the power</font><font color="#E5E5E5"> supply so when the</font>

286
00:13:55,350 --> 00:13:59,490
microcontroller calls this line low it

287
00:13:57,899 --> 00:14:02,100
resets the entire machine<font color="#E5E5E5"> does a</font>

288
00:13:59,490 --> 00:14:04,079
complete hard reset<font color="#E5E5E5"> and then in a second</font>

289
00:14:02,100 --> 00:14:07,589
or<font color="#E5E5E5"> so it's back at the the part of the</font>

290
00:14:04,079 --> 00:14:09,660
<font color="#E5E5E5">BIOS where it it's looking for that</font><font color="#CCCCCC"> byte</font>

291
00:14:07,589 --> 00:14:12,779
from<font color="#E5E5E5"> the from the keyboard port so</font>

292
00:14:09,660 --> 00:14:16,050
rather than some of you may<font color="#CCCCCC"> remember</font>

293
00:14:12,779 --> 00:14:18,060
that pcs<font color="#E5E5E5"> in those days would</font><font color="#CCCCCC"> go through</font>

294
00:14:16,050 --> 00:14:20,010
a<font color="#E5E5E5"> very long memory test when they when</font>

295
00:14:18,060 --> 00:14:21,599
they<font color="#E5E5E5"> booted up they would count up for</font>

296
00:14:20,010 --> 00:14:23,850
each kilobyte of<font color="#CCCCCC"> RAM in the</font><font color="#E5E5E5"> machine that</font>

297
00:14:21,600 --> 00:14:26,940
<font color="#E5E5E5">would count up so if you</font><font color="#CCCCCC"> have all 640 K</font>

298
00:14:23,850 --> 00:14:30,000
of<font color="#CCCCCC"> RAM in an original</font><font color="#E5E5E5"> IBM XT it actually</font>

299
00:14:26,940 --> 00:14:32,640
takes a couple<font color="#E5E5E5"> of minutes to boot up but</font>

300
00:14:30,000 --> 00:14:35,190
the the keyboard<font color="#CCCCCC"> that the manufacturing</font>

301
00:14:32,640 --> 00:14:37,319
<font color="#E5E5E5">test routine</font><font color="#CCCCCC"> happens before that</font><font color="#E5E5E5"> memory</font>

302
00:14:35,190 --> 00:14:39,660
<font color="#E5E5E5">test so you can</font><font color="#CCCCCC"> actually get the machine</font>

303
00:14:37,320 --> 00:14:41,850
running<font color="#E5E5E5"> a new program in about a second</font>

304
00:14:39,660 --> 00:14:44,719
this way<font color="#E5E5E5"> is much quicker to to iterate</font>

305
00:14:41,850 --> 00:14:50,339
when you're developing software for<font color="#CCCCCC"> it</font>

306
00:14:44,720 --> 00:14:52,649
I've taken this<font color="#E5E5E5"> this device and it's</font>

307
00:14:50,339 --> 00:14:56,370
connected to<font color="#CCCCCC"> a modern PC in my office</font>

308
00:14:52,649 --> 00:14:59,730
<font color="#CCCCCC">and that modern PC is running</font><font color="#E5E5E5"> an Apache</font>

309
00:14:56,370 --> 00:15:01,589
web server<font color="#E5E5E5"> and some CGI scripts that I</font>

310
00:14:59,730 --> 00:15:04,800
wrote myself<font color="#E5E5E5"> which means</font><font color="#CCCCCC"> that anyone</font>

311
00:15:01,589 --> 00:15:07,380
<font color="#E5E5E5">anywhere in the</font><font color="#CCCCCC"> world can loads</font><font color="#E5E5E5"> load</font>

312
00:15:04,800 --> 00:15:09,479
code onto<font color="#E5E5E5"> this</font><font color="#CCCCCC"> XT</font><font color="#E5E5E5"> by using this web</font>

313
00:15:07,380 --> 00:15:13,110
interface<font color="#CCCCCC"> really need org slash XT</font>

314
00:15:09,480 --> 00:15:14,820
server<font color="#CCCCCC"> so the the screenshot that you</font>

315
00:15:13,110 --> 00:15:21,209
can see here is just<font color="#E5E5E5"> just a web browser</font>

316
00:15:14,820 --> 00:15:24,269
<font color="#CCCCCC">that I've sent as a post request</font><font color="#E5E5E5"> a</font>

317
00:15:21,209 --> 00:15:27,689
floppy disk<font color="#CCCCCC"> image 360k floppy disk image</font>

318
00:15:24,269 --> 00:15:30,530
containing<font color="#E5E5E5"> a</font><font color="#CCCCCC"> DOS and an</font><font color="#E5E5E5"> auto exec</font><font color="#CCCCCC"> baps</font>

319
00:15:27,690 --> 00:15:35,190
that just prints itself so you<font color="#CCCCCC"> can</font>

320
00:15:30,530 --> 00:15:39,510
you can see how that that works<font color="#E5E5E5"> the</font><font color="#CCCCCC"> XD</font>

321
00:15:35,190 --> 00:15:43,620
server does<font color="#CCCCCC"> not yet support keystrokes</font>

322
00:15:39,510 --> 00:15:45,810
<font color="#E5E5E5">coming from the from the web browser and</font>

323
00:15:43,620 --> 00:15:48,360
<font color="#E5E5E5">then sending those over to the over to</font>

324
00:15:45,810 --> 00:15:51,660
the<font color="#CCCCCC"> xt</font><font color="#E5E5E5"> that's something</font><font color="#CCCCCC"> I'm I'm I hope</font>

325
00:15:48,360 --> 00:15:54,240
to add at some point<font color="#E5E5E5"> but it's it's</font>

326
00:15:51,660 --> 00:15:56,640
useful<font color="#CCCCCC"> too for non interactive things</font>

327
00:15:54,240 --> 00:15:59,840
you can you can write a<font color="#E5E5E5"> program stick it</font>

328
00:15:56,640 --> 00:16:04,560
on a disk image<font color="#CCCCCC"> send it</font><font color="#E5E5E5"> to the XT server</font>

329
00:15:59,840 --> 00:16:06,750
<font color="#E5E5E5">get the results back and so this is this</font>

330
00:16:04,560 --> 00:16:09,359
<font color="#E5E5E5">is really useful</font><font color="#CCCCCC"> for emulator authors</font>

331
00:16:06,750 --> 00:16:12,360
who want to run<font color="#CCCCCC"> experiments</font><font color="#E5E5E5"> on the real</font>

332
00:16:09,360 --> 00:16:15,600
hardware<font color="#CCCCCC"> to to see</font><font color="#E5E5E5"> what the timings are</font>

333
00:16:12,360 --> 00:16:19,680
for various things<font color="#CCCCCC"> none of them took</font><font color="#E5E5E5"> me</font>

334
00:16:15,600 --> 00:16:22,860
up on<font color="#E5E5E5"> it though so I was left to to</font>

335
00:16:19,680 --> 00:16:24,359
figure out<font color="#E5E5E5"> these cycle timings myself so</font>

336
00:16:22,860 --> 00:16:28,140
this is the this is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> target that we</font>

337
00:16:24,360 --> 00:16:32,280
<font color="#E5E5E5">are trying to make an exact emulation of</font>

338
00:16:28,140 --> 00:16:38,150
the<font color="#E5E5E5"> the Intel 8088 which was the hot new</font>

339
00:16:32,280 --> 00:16:39,569
thing<font color="#E5E5E5"> in 1979 it uses a</font><font color="#CCCCCC"> 3000 nanometer</font>

340
00:16:38,150 --> 00:16:41,010
<font color="#E5E5E5">process</font>

341
00:16:39,570 --> 00:16:42,690
compare that to I<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> what</font>

342
00:16:41,010 --> 00:16:44,490
<font color="#CCCCCC">they're down to today 50</font><font color="#E5E5E5"> nanometers 10</font>

343
00:16:42,690 --> 00:16:47,460
nanometers

344
00:16:44,490 --> 00:16:51,810
it has<font color="#E5E5E5"> 29,000 transistors compared to</font>

345
00:16:47,460 --> 00:16:53,550
<font color="#E5E5E5">the billions in today's CPUs it has</font><font color="#CCCCCC"> 8</font>

346
00:16:51,810 --> 00:16:57,510
general-purpose registers each which<font color="#CCCCCC"> is</font>

347
00:16:53,550 --> 00:16:59,969
16 bits<font color="#CCCCCC"> it has a 20 bit memory address</font>

348
00:16:57,510 --> 00:17:02,520
space<font color="#E5E5E5"> so it can address a whole megabyte</font>

349
00:16:59,970 --> 00:17:06,209
of RAM<font color="#E5E5E5"> although normally you would only</font>

350
00:17:02,520 --> 00:17:08,790
address 640 K of<font color="#E5E5E5"> RAM and the other the</font>

351
00:17:06,209 --> 00:17:11,490
<font color="#E5E5E5">other 384 K is for ROM and peripherals</font>

352
00:17:08,790 --> 00:17:14,310
and<font color="#E5E5E5"> things like</font><font color="#CCCCCC"> that the</font><font color="#E5E5E5"> CPU is actually</font>

353
00:17:11,490 --> 00:17:16,410
micro<font color="#E5E5E5"> coded internally so while it's</font>

354
00:17:14,310 --> 00:17:18,179
running your program<font color="#CCCCCC"> it's it's also</font>

355
00:17:16,410 --> 00:17:22,020
<font color="#E5E5E5">running its own little</font><font color="#CCCCCC"> program in its</font>

356
00:17:18,180 --> 00:17:24,000
own special purpose instruction set<font color="#CCCCCC"> they</font>

357
00:17:22,020 --> 00:17:27,209
<font color="#E5E5E5">sort of blue rectangle you</font><font color="#CCCCCC"> can see in</font>

358
00:17:24,000 --> 00:17:30,600
the corner<font color="#E5E5E5"> of the of this</font><font color="#CCCCCC"> dye photograph</font>

359
00:17:27,209 --> 00:17:32,940
is<font color="#E5E5E5"> actually the</font><font color="#CCCCCC"> the main ROM which holds</font>

360
00:17:30,600 --> 00:17:36,409
the holes<font color="#E5E5E5"> the microcode it's 504</font>

361
00:17:32,940 --> 00:17:41,340
instructions<font color="#E5E5E5"> each of which are 21 bits</font>

362
00:17:36,410 --> 00:17:42,550
<font color="#CCCCCC">so my my purpose in in</font><font color="#E5E5E5"> building this</font>

363
00:17:41,340 --> 00:17:46,169
emulator wasn't to

364
00:17:42,550 --> 00:17:48,340
run this<font color="#E5E5E5"> this original microcode program</font>

365
00:17:46,170 --> 00:17:50,260
<font color="#CCCCCC">just</font><font color="#E5E5E5"> to get something with it with the</font>

366
00:17:48,340 --> 00:17:51,939
same<font color="#E5E5E5"> cycle timings so that it would be</font>

367
00:17:50,260 --> 00:17:56,080
<font color="#E5E5E5">indistinguishable to software</font><font color="#CCCCCC"> that is</font>

368
00:17:51,940 --> 00:17:57,870
<font color="#CCCCCC">running on the on the</font><font color="#E5E5E5"> actual PC</font><font color="#CCCCCC"> the the</font>

369
00:17:56,080 --> 00:18:00,699
<font color="#CCCCCC">micro code instructions themselves I</font>

370
00:17:57,870 --> 00:18:03,489
haven't actually got<font color="#CCCCCC"> a dump of</font><font color="#E5E5E5"> them yet</font>

371
00:18:00,700 --> 00:18:04,810
this<font color="#E5E5E5"> this dye photograph is high enough</font>

372
00:18:03,490 --> 00:18:06,940
resolution to<font color="#E5E5E5"> be able to see the</font>

373
00:18:04,810 --> 00:18:09,520
individual<font color="#E5E5E5"> transistors but it's only the</font>

374
00:18:06,940 --> 00:18:11,650
top layer<font color="#CCCCCC"> and I don't</font><font color="#E5E5E5"> want to mess about</font>

375
00:18:09,520 --> 00:18:14,230
with<font color="#E5E5E5"> fuming nitric acid or whatever you</font>

376
00:18:11,650 --> 00:18:17,140
need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do in my</font><font color="#CCCCCC"> house</font><font color="#E5E5E5"> to to actually</font>

377
00:18:14,230 --> 00:18:19,510
take the the dye photographs of all of

378
00:18:17,140 --> 00:18:21,280
the<font color="#E5E5E5"> layers and reverse engineer the the</font>

379
00:18:19,510 --> 00:18:24,180
chip at the gate level as some people

380
00:18:21,280 --> 00:18:28,510
<font color="#E5E5E5">have done with with chips like the 6502</font>

381
00:18:24,180 --> 00:18:31,210
<font color="#E5E5E5">so I'm I'm I decided to approach it just</font>

382
00:18:28,510 --> 00:18:36,030
by trying<font color="#CCCCCC"> to reverse engineer the chip</font>

383
00:18:31,210 --> 00:18:39,850
<font color="#E5E5E5">from</font><font color="#CCCCCC"> the outside run code on</font><font color="#E5E5E5"> it and and</font>

384
00:18:36,030 --> 00:18:41,649
do timings and figure out<font color="#E5E5E5"> the that</font>

385
00:18:39,850 --> 00:18:44,939
figure<font color="#E5E5E5"> out how it works that way</font>

386
00:18:41,650 --> 00:18:47,890
to visit<font color="#E5E5E5"> to sufficient for the fidelity</font>

387
00:18:44,940 --> 00:18:51,400
<font color="#CCCCCC">so here's a little</font><font color="#E5E5E5"> slide about the the</font>

388
00:18:47,890 --> 00:18:54,490
architecture of the<font color="#E5E5E5"> the Intel 8088 the</font>

389
00:18:51,400 --> 00:18:57,280
the top half here is the bit that

390
00:18:54,490 --> 00:18:59,950
<font color="#CCCCCC">communicates with the bus</font><font color="#E5E5E5"> and then the</font>

391
00:18:57,280 --> 00:19:04,780
<font color="#E5E5E5">bottom half is the the actual execution</font>

392
00:18:59,950 --> 00:19:08,530
unit which does<font color="#CCCCCC"> the runs that microcode</font>

393
00:19:04,780 --> 00:19:10,780
program so the the<font color="#E5E5E5"> execution unit is you</font>

394
00:19:08,530 --> 00:19:13,510
know adding your numbers together or

395
00:19:10,780 --> 00:19:15,430
multiplying you know whatever<font color="#E5E5E5"> whatever</font>

396
00:19:13,510 --> 00:19:17,620
you've asked the computer to<font color="#E5E5E5"> do and then</font>

397
00:19:15,430 --> 00:19:20,020
the top part gets the date gets the

398
00:19:17,620 --> 00:19:22,179
program and data in and out<font color="#E5E5E5"> of the of</font>

399
00:19:20,020 --> 00:19:24,940
the<font color="#E5E5E5"> CPU to</font><font color="#CCCCCC"> the memory and</font><font color="#E5E5E5"> other devices</font>

400
00:19:22,180 --> 00:19:27,910
on the machine and the fact that the

401
00:19:24,940 --> 00:19:31,780
<font color="#CCCCCC">fact that these two</font><font color="#E5E5E5"> parts run sort</font><font color="#CCCCCC"> of a</font>

402
00:19:27,910 --> 00:19:34,390
synchronously<font color="#CCCCCC"> and the either one can be</font>

403
00:19:31,780 --> 00:19:36,280
waiting<font color="#E5E5E5"> for the other at any point in</font>

404
00:19:34,390 --> 00:19:38,620
time<font color="#E5E5E5"> is why the timing of this chip is</font>

405
00:19:36,280 --> 00:19:42,100
so complicated<font color="#E5E5E5"> and it hasn't</font><font color="#CCCCCC"> been done</font>

406
00:19:38,620 --> 00:19:44,830
before<font color="#E5E5E5"> now</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> only do we have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> know</font>

407
00:19:42,100 --> 00:19:47,860
how long each<font color="#E5E5E5"> instruction takes overall</font>

408
00:19:44,830 --> 00:19:52,300
<font color="#E5E5E5">but also</font><font color="#CCCCCC"> where in the execution of</font><font color="#E5E5E5"> that</font>

409
00:19:47,860 --> 00:19:55,500
<font color="#E5E5E5">instruction it it asks the bus execution</font>

410
00:19:52,300 --> 00:19:57,450
unit to get<font color="#E5E5E5"> or put a value to the bus</font>

411
00:19:55,500 --> 00:20:00,450
or gets a bite from the prefetch<font color="#E5E5E5"> queue</font>

412
00:19:57,450 --> 00:20:06,750
that<font color="#E5E5E5"> there's a</font><font color="#CCCCCC"> 4-bike prefetch queue in</font>

413
00:20:00,450 --> 00:20:10,649
<font color="#E5E5E5">the 88 which queues up</font><font color="#CCCCCC"> bytes of</font><font color="#E5E5E5"> the</font>

414
00:20:06,750 --> 00:20:12,240
<font color="#E5E5E5">instruction</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the program</font><font color="#CCCCCC"> the</font>

415
00:20:10,649 --> 00:20:15,199
instructions<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the execution unit</font>

416
00:20:12,240 --> 00:20:17,549
will<font color="#CCCCCC"> be running</font><font color="#E5E5E5"> next in order that the</font>

417
00:20:15,200 --> 00:20:20,970
the<font color="#E5E5E5"> execution unit won't have to wait</font>

418
00:20:17,549 --> 00:20:23,759
for the when have<font color="#E5E5E5"> to wait for the bus</font>

419
00:20:20,970 --> 00:20:25,279
interface unit for too long<font color="#E5E5E5"> and that</font>

420
00:20:23,759 --> 00:20:27,840
does speed things up quite<font color="#E5E5E5"> a bit over</font>

421
00:20:25,279 --> 00:20:30,080
similar<font color="#CCCCCC"> architectures but it does make</font>

422
00:20:27,840 --> 00:20:34,730
<font color="#E5E5E5">the the timings a lot more complicated</font>

423
00:20:30,080 --> 00:20:36,928
<font color="#CCCCCC">on the the this diagram that shows</font><font color="#E5E5E5"> the</font>

424
00:20:34,730 --> 00:20:38,639
<font color="#E5E5E5">shows all the pins of the chip you</font>

425
00:20:36,929 --> 00:20:40,080
<font color="#E5E5E5">probably can't read it the text is very</font>

426
00:20:38,639 --> 00:20:43,830
small and<font color="#E5E5E5"> I'm sorry for</font><font color="#CCCCCC"> that but there</font>

427
00:20:40,080 --> 00:20:46,799
are<font color="#E5E5E5"> two pins</font><font color="#CCCCCC"> Q s 0 and Q s</font><font color="#E5E5E5"> 1 which</font>

428
00:20:43,830 --> 00:20:52,740
actually show the<font color="#CCCCCC"> status of the prefetch</font>

429
00:20:46,799 --> 00:20:56,940
<font color="#CCCCCC">queue and they show</font><font color="#E5E5E5"> for each cycle that</font>

430
00:20:52,740 --> 00:21:00,179
the that the CPU<font color="#E5E5E5"> is executing it shows</font>

431
00:20:56,940 --> 00:21:02,549
whether the<font color="#CCCCCC"> queue is is being</font><font color="#E5E5E5"> emptied</font>

432
00:21:00,179 --> 00:21:04,590
whether it's the<font color="#E5E5E5"> first cycle</font><font color="#CCCCCC"> of an</font>

433
00:21:02,549 --> 00:21:08,490
instruction whether it's the subsequent

434
00:21:04,590 --> 00:21:11,820
cycle of an instruction or or if it's

435
00:21:08,490 --> 00:21:15,059
<font color="#E5E5E5">just if it's just idle and</font><font color="#CCCCCC"> the reason</font>

436
00:21:11,820 --> 00:21:18,570
<font color="#E5E5E5">these pins exist is for</font><font color="#CCCCCC"> the 808 8 or</font><font color="#E5E5E5"> 808</font>

437
00:21:15,059 --> 00:21:21,178
<font color="#E5E5E5">6 to be able to interface with the 808 7</font>

438
00:21:18,570 --> 00:21:23,309
floating-point coprocessor<font color="#CCCCCC"> the</font>

439
00:21:21,179 --> 00:21:26,879
floating-point<font color="#E5E5E5"> coprocessor actually runs</font>

440
00:21:23,309 --> 00:21:29,039
alongside the the<font color="#CCCCCC"> CPU</font><font color="#E5E5E5"> monitors the</font>

441
00:21:26,879 --> 00:21:30,570
instruction stream and if it sees an

442
00:21:29,039 --> 00:21:34,710
instruction that<font color="#CCCCCC"> is a floating</font><font color="#E5E5E5"> point</font>

443
00:21:30,570 --> 00:21:36,960
instruction it interrupts and hops in

444
00:21:34,710 --> 00:21:41,730
and<font color="#CCCCCC"> does its thing and then sends the</font>

445
00:21:36,960 --> 00:21:43,350
result back<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the CPU over the bus so I</font>

446
00:21:41,730 --> 00:21:45,179
wanted to<font color="#E5E5E5"> be able to read these</font><font color="#CCCCCC"> queue</font>

447
00:21:43,350 --> 00:21:46,590
status pins along<font color="#E5E5E5"> with everything else</font>

448
00:21:45,179 --> 00:21:48,809
<font color="#CCCCCC">that's going</font><font color="#E5E5E5"> on in the machine so</font><font color="#CCCCCC"> I</font>

449
00:21:46,590 --> 00:21:51,090
<font color="#E5E5E5">could see what the queue is doing at</font>

450
00:21:48,809 --> 00:21:53,940
<font color="#E5E5E5">each point in the</font><font color="#CCCCCC"> execution of these</font>

451
00:21:51,090 --> 00:21:57,658
these instructions so I ended up

452
00:21:53,940 --> 00:22:00,269
building this little<font color="#CCCCCC"> is a card</font><font color="#E5E5E5"> again</font>

453
00:21:57,659 --> 00:22:04,710
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> is based around the 80 mega</font><font color="#CCCCCC"> three</font>

454
00:22:00,269 --> 00:22:06,419
to<font color="#CCCCCC"> eight I like that chip and this time</font>

455
00:22:04,710 --> 00:22:07,200
rather<font color="#E5E5E5"> than</font><font color="#CCCCCC"> running at 16 megahertz like</font>

456
00:22:06,419 --> 00:22:10,320
an<font color="#CCCCCC"> RD</font>

457
00:22:07,200 --> 00:22:12,960
does the clock<font color="#E5E5E5"> is actually taken from</font>

458
00:22:10,320 --> 00:22:14,610
<font color="#E5E5E5">the clock on the</font><font color="#CCCCCC"> ISA bus so it</font><font color="#E5E5E5"> actually</font>

459
00:22:12,960 --> 00:22:17,970
runs at fourteen point three<font color="#CCCCCC"> one eight</font>

460
00:22:14,610 --> 00:22:23,789
megahertz<font color="#CCCCCC"> four times the</font><font color="#E5E5E5"> NTSC color</font>

461
00:22:17,970 --> 00:22:27,330
carrier frequency<font color="#CCCCCC"> and as well as the the</font>

462
00:22:23,789 --> 00:22:29,639
<font color="#CCCCCC">micro controller it also has a serial</font>

463
00:22:27,330 --> 00:22:31,500
<font color="#E5E5E5">port to get the results out to a modern</font>

464
00:22:29,639 --> 00:22:35,668
<font color="#CCCCCC">machine</font><font color="#E5E5E5"> and the only other thing on the</font>

465
00:22:31,500 --> 00:22:38,070
board<font color="#E5E5E5"> is these multiplexers</font><font color="#CCCCCC"> so there's</font>

466
00:22:35,669 --> 00:22:39,779
only so many i/o pins on the on the<font color="#CCCCCC"> 80</font>

467
00:22:38,070 --> 00:22:42,928
mega<font color="#E5E5E5"> three to eight and I wanted to be</font>

468
00:22:39,779 --> 00:22:45,750
able<font color="#E5E5E5"> to sample</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot of pins not just on</font>

469
00:22:42,929 --> 00:22:48,510
the on the CPU<font color="#CCCCCC"> the 40 pins of the CPU</font>

470
00:22:45,750 --> 00:22:50,399
<font color="#E5E5E5">but also all the pins of</font><font color="#CCCCCC"> the ISA bus as</font>

471
00:22:48,510 --> 00:22:55,049
well and a<font color="#E5E5E5"> few other</font><font color="#CCCCCC"> things that</font><font color="#E5E5E5"> I've</font>

472
00:22:50,399 --> 00:22:56,428
since added<font color="#E5E5E5"> why if you look</font><font color="#CCCCCC"> inside my</font><font color="#E5E5E5"> XT</font>

473
00:22:55,049 --> 00:22:58,559
<font color="#E5E5E5">now there's wires going from this board</font>

474
00:22:56,429 --> 00:23:03,929
to all<font color="#E5E5E5"> over the motherboard so that I</font>

475
00:22:58,559 --> 00:23:06,779
<font color="#E5E5E5">can sample various other lines</font><font color="#CCCCCC"> so the</font>

476
00:23:03,929 --> 00:23:09,169
way that<font color="#E5E5E5"> this bus sniffer works is we</font>

477
00:23:06,779 --> 00:23:11,309
run the same program multiple times

478
00:23:09,169 --> 00:23:12,870
<font color="#CCCCCC">taking care to</font><font color="#E5E5E5"> ensure that each time</font><font color="#CCCCCC"> we</font>

479
00:23:11,309 --> 00:23:15,000
run<font color="#E5E5E5"> it all the timing is exactly the</font>

480
00:23:12,870 --> 00:23:18,779
same so<font color="#CCCCCC"> the machine is is put</font><font color="#E5E5E5"> into a</font>

481
00:23:15,000 --> 00:23:22,620
known state run the program<font color="#CCCCCC"> so many</font>

482
00:23:18,779 --> 00:23:25,710
times once for each set of pins<font color="#E5E5E5"> that we</font>

483
00:23:22,620 --> 00:23:28,229
want to to sample and it works<font color="#E5E5E5"> really</font>

484
00:23:25,710 --> 00:23:32,100
well<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> a dump of the output of</font><font color="#E5E5E5"> the</font>

485
00:23:28,230 --> 00:23:35,250
ISA<font color="#CCCCCC"> bus sniffer</font><font color="#E5E5E5"> the columns on</font><font color="#CCCCCC"> the Left</font>

486
00:23:32,100 --> 00:23:36,570
<font color="#CCCCCC">show the actual raw data from the</font><font color="#E5E5E5"> that</font>

487
00:23:35,250 --> 00:23:38,760
that's coming<font color="#CCCCCC"> over the serial port</font><font color="#E5E5E5"> from</font>

488
00:23:36,570 --> 00:23:42,029
<font color="#CCCCCC">the bus</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> for card and then on the</font>

489
00:23:38,760 --> 00:23:44,490
right there's the sort of some

490
00:23:42,029 --> 00:23:46,980
interpretation that's been done on<font color="#E5E5E5"> it so</font>

491
00:23:44,490 --> 00:23:50,480
it shows<font color="#E5E5E5"> exactly which instruction is is</font>

492
00:23:46,980 --> 00:23:53,429
starting<font color="#CCCCCC"> on which cycle</font><font color="#E5E5E5"> and it shows the</font>

493
00:23:50,480 --> 00:23:55,679
the bus<font color="#E5E5E5"> accesses the reads or the rights</font>

494
00:23:53,429 --> 00:23:59,909
to the bus that are occurring at any

495
00:23:55,679 --> 00:24:02,370
<font color="#E5E5E5">moment occurring at each cycle and and</font>

496
00:23:59,909 --> 00:24:04,950
also<font color="#E5E5E5"> when the when</font><font color="#CCCCCC"> the machine gets</font>

497
00:24:02,370 --> 00:24:08,570
interrupted for a DMA transfer which

498
00:24:04,950 --> 00:24:11,789
happens<font color="#CCCCCC"> 64 thousand times a second for</font>

499
00:24:08,570 --> 00:24:15,629
dynamic<font color="#CCCCCC"> RAM refresh</font><font color="#E5E5E5"> that's all shown in</font>

500
00:24:11,789 --> 00:24:17,679
the in the diagram as well now a little

501
00:24:15,629 --> 00:24:22,480
a little<font color="#E5E5E5"> side quest</font>

502
00:24:17,679 --> 00:24:26,830
in 2015 I worked with<font color="#E5E5E5"> some friends on</font>

503
00:24:22,480 --> 00:24:29,620
this<font color="#CCCCCC"> this demoscene demo</font><font color="#E5E5E5"> 808 8 mph which</font>

504
00:24:26,830 --> 00:24:33,010
we<font color="#E5E5E5"> presented at the revision demo party</font>

505
00:24:29,620 --> 00:24:36,879
in<font color="#CCCCCC"> Germany and it kind of blow everyone</font>

506
00:24:33,010 --> 00:24:39,940
away with what we were<font color="#CCCCCC"> able to able</font><font color="#E5E5E5"> to</font>

507
00:24:36,880 --> 00:24:43,000
coax these these old<font color="#E5E5E5"> 808 CGA machines</font>

508
00:24:39,940 --> 00:24:46,570
into doing<font color="#CCCCCC"> we wrote a bunch of effects</font>

509
00:24:43,000 --> 00:24:50,440
that<font color="#CCCCCC"> only work on IBM pcs and XTS</font>

510
00:24:46,570 --> 00:24:56,200
<font color="#E5E5E5">because like digger they require the</font>

511
00:24:50,440 --> 00:24:57,909
machine to<font color="#E5E5E5"> be cycle exact and we</font><font color="#CCCCCC"> also</font>

512
00:24:56,200 --> 00:24:59,980
got we also managed to<font color="#E5E5E5"> coax the CGA card</font>

513
00:24:57,909 --> 00:25:02,470
into making<font color="#E5E5E5"> about a thousand colors</font>

514
00:24:59,980 --> 00:25:07,020
<font color="#E5E5E5">rather than the 16</font><font color="#CCCCCC"> it's normally capable</font>

515
00:25:02,470 --> 00:25:11,470
<font color="#CCCCCC">of by using</font><font color="#E5E5E5"> and abusing the NTSC</font>

516
00:25:07,020 --> 00:25:14,070
composite color system<font color="#CCCCCC"> we also got it to</font>

517
00:25:11,470 --> 00:25:16,990
play for<font color="#CCCCCC"> channel</font><font color="#E5E5E5"> music on the PC speaker</font>

518
00:25:14,070 --> 00:25:20,200
<font color="#CCCCCC">which</font><font color="#E5E5E5"> again is all all cycle counted so</font>

519
00:25:16,990 --> 00:25:21,820
if you try<font color="#CCCCCC"> and run that</font><font color="#E5E5E5"> that music</font>

520
00:25:20,200 --> 00:25:25,350
<font color="#CCCCCC">routine on a modern machine it will</font>

521
00:25:21,820 --> 00:25:29,820
<font color="#E5E5E5">sound very high-pitched and fast like a</font>

522
00:25:25,350 --> 00:25:32,590
record<font color="#CCCCCC"> playback at the wrong speed so</font>

523
00:25:29,820 --> 00:25:36,370
<font color="#E5E5E5">nice thing is that</font><font color="#CCCCCC"> now we have an</font>

524
00:25:32,590 --> 00:25:38,379
incentive<font color="#CCCCCC"> for emulator</font><font color="#E5E5E5"> offers to to try</font>

525
00:25:36,370 --> 00:25:39,939
and get<font color="#E5E5E5"> their emulators</font><font color="#CCCCCC"> to be cycle</font>

526
00:25:38,380 --> 00:25:43,450
exact so that they can run<font color="#E5E5E5"> this demo the</font>

527
00:25:39,940 --> 00:25:46,120
<font color="#E5E5E5">way</font><font color="#CCCCCC"> its way it's supposed to be</font><font color="#E5E5E5"> because</font>

528
00:25:43,450 --> 00:25:47,649
of course we did we didn't have a cyclic

529
00:25:46,120 --> 00:25:49,899
sax emulator when we were writing<font color="#CCCCCC"> the</font>

530
00:25:47,649 --> 00:25:53,860
<font color="#CCCCCC">demo so we did all our development</font><font color="#E5E5E5"> on</font>

531
00:25:49,899 --> 00:25:57,969
real<font color="#CCCCCC"> hardware so I'm still I'm still</font>

532
00:25:53,860 --> 00:26:01,928
working on<font color="#E5E5E5"> a cycle exact demo a</font><font color="#CCCCCC"> cycle</font>

533
00:25:57,970 --> 00:26:05,460
<font color="#CCCCCC">exact emulator I call it</font><font color="#E5E5E5"> XC c XC cycle</font>

534
00:26:01,929 --> 00:26:08,470
exact what I've got at<font color="#CCCCCC"> the moment is</font><font color="#E5E5E5"> a</font>

535
00:26:05,460 --> 00:26:12,880
program that just<font color="#CCCCCC"> generates</font><font color="#E5E5E5"> a very large</font>

536
00:26:08,470 --> 00:26:15,640
<font color="#E5E5E5">number of test</font><font color="#CCCCCC"> cases it tries to test</font>

537
00:26:12,880 --> 00:26:19,360
<font color="#E5E5E5">the timing of each of the 256 possible</font>

538
00:26:15,640 --> 00:26:20,930
<font color="#CCCCCC">op codes that you that the the CPU can</font>

539
00:26:19,360 --> 00:26:23,479
can execute some of the

540
00:26:20,930 --> 00:26:25,940
not even valid<font color="#CCCCCC"> opcodes</font><font color="#E5E5E5"> so I'm even</font>

541
00:26:23,480 --> 00:26:29,390
testing the the timing of illegal

542
00:26:25,940 --> 00:26:31,250
instructions<font color="#CCCCCC"> where the</font><font color="#E5E5E5"> operands to the</font>

543
00:26:29,390 --> 00:26:32,720
instruction can make a difference in the

544
00:26:31,250 --> 00:26:34,820
timing I'm testing all possible

545
00:26:32,720 --> 00:26:37,610
combinations of operands as well and

546
00:26:34,820 --> 00:26:40,520
then also the state<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> the prefetch</font>

547
00:26:37,610 --> 00:26:42,770
<font color="#CCCCCC">queue and</font><font color="#E5E5E5"> the bus</font><font color="#CCCCCC"> can make a difference</font>

548
00:26:40,520 --> 00:26:44,780
<font color="#CCCCCC">so I'm</font><font color="#E5E5E5"> testing each possible combination</font>

549
00:26:42,770 --> 00:26:49,340
of<font color="#E5E5E5"> those so there's a very large number</font>

550
00:26:44,780 --> 00:26:54,230
<font color="#E5E5E5">of of possible situations that the</font>

551
00:26:49,340 --> 00:26:56,060
<font color="#E5E5E5">machine can be in once we've generated</font>

552
00:26:54,230 --> 00:26:59,690
all these test cases<font color="#E5E5E5"> we batch them into</font>

553
00:26:56,060 --> 00:27:02,840
chunks of<font color="#CCCCCC"> 64k at once we send them over</font>

554
00:26:59,690 --> 00:27:05,020
the over that serial link<font color="#CCCCCC"> to the to the</font>

555
00:27:02,840 --> 00:27:10,040
<font color="#CCCCCC">microcontroller to run them</font><font color="#E5E5E5"> on the</font><font color="#CCCCCC"> xt</font>

556
00:27:05,020 --> 00:27:12,500
and then if any tests are not if any of

557
00:27:10,040 --> 00:27:14,330
those test cases<font color="#E5E5E5"> turn out to</font><font color="#CCCCCC"> have</font>

558
00:27:12,500 --> 00:27:16,970
different timing on the real<font color="#E5E5E5"> hardware as</font>

559
00:27:14,330 --> 00:27:20,030
on the emulator<font color="#CCCCCC"> then it will run the is</font>

560
00:27:16,970 --> 00:27:22,520
<font color="#E5E5E5">a bus sniffer to get a trace</font><font color="#CCCCCC"> of exactly</font>

561
00:27:20,030 --> 00:27:24,350
what<font color="#E5E5E5"> happened on what cycle on that and</font>

562
00:27:22,520 --> 00:27:28,639
then<font color="#CCCCCC"> i can</font><font color="#E5E5E5"> compare it with the</font>

563
00:27:24,350 --> 00:27:31,310
equivalent<font color="#E5E5E5"> instruction trace on the on</font>

564
00:27:28,640 --> 00:27:34,370
<font color="#CCCCCC">XTC ii</font><font color="#E5E5E5"> and see where the emulator is</font>

565
00:27:31,310 --> 00:27:37,550
diverging<font color="#CCCCCC"> from the real hardware</font><font color="#E5E5E5"> and so</font>

566
00:27:34,370 --> 00:27:42,620
by iterating through that process<font color="#E5E5E5"> a lot</font>

567
00:27:37,550 --> 00:27:44,270
<font color="#E5E5E5">of times about</font><font color="#CCCCCC"> 550 of</font><font color="#E5E5E5"> the tests of the</font>

568
00:27:42,620 --> 00:27:47,560
test<font color="#CCCCCC"> case those automatically generated</font>

569
00:27:44,270 --> 00:27:53,570
<font color="#E5E5E5">test cases have at some point found a</font>

570
00:27:47,560 --> 00:27:55,990
<font color="#E5E5E5">boggart timing problem in</font><font color="#CCCCCC"> XTC</font><font color="#E5E5E5"> e and but</font>

571
00:27:53,570 --> 00:27:58,460
it's it's now got<font color="#E5E5E5"> to the point where</font>

572
00:27:55,990 --> 00:28:00,560
millions<font color="#E5E5E5"> of these tests are now passing</font>

573
00:27:58,460 --> 00:28:02,420
and it's it's<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> go for four days</font>

574
00:28:00,560 --> 00:28:05,419
at a time without without hitting any

575
00:28:02,420 --> 00:28:09,980
failing tests in fact the<font color="#CCCCCC"> the limiting</font>

576
00:28:05,420 --> 00:28:13,520
factor right<font color="#CCCCCC"> now</font><font color="#E5E5E5"> is not the the time it</font>

577
00:28:09,980 --> 00:28:16,760
takes<font color="#E5E5E5"> to to run the tests or the bugs in</font>

578
00:28:13,520 --> 00:28:18,620
in the emulator<font color="#CCCCCC"> are now</font><font color="#E5E5E5"> running out</font><font color="#CCCCCC"> of</font>

579
00:28:16,760 --> 00:28:22,160
memory on<font color="#CCCCCC"> the modern machine</font><font color="#E5E5E5"> to actually</font>

580
00:28:18,620 --> 00:28:25,250
<font color="#CCCCCC">hold all the tests</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> i think what i'm</font>

581
00:28:22,160 --> 00:28:27,390
<font color="#CCCCCC">going to have to do is have the</font><font color="#E5E5E5"> maintain</font>

582
00:28:25,250 --> 00:28:30,060
two versions of the

583
00:28:27,390 --> 00:28:34,380
of the emulator in the same<font color="#E5E5E5"> program so</font>

584
00:28:30,060 --> 00:28:36,240
one one<font color="#E5E5E5"> rule is the</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> that's there's</font>

585
00:28:34,380 --> 00:28:39,990
actually under test<font color="#E5E5E5"> and</font><font color="#CCCCCC"> one is the last</font>

586
00:28:36,240 --> 00:28:41,970
known<font color="#CCCCCC"> good last known good version</font><font color="#E5E5E5"> of</font>

587
00:28:39,990 --> 00:28:45,270
the emulator with the timings<font color="#E5E5E5"> correct</font>

588
00:28:41,970 --> 00:28:48,780
<font color="#CCCCCC">Iser they were known to be</font><font color="#E5E5E5"> so far and</font>

589
00:28:45,270 --> 00:28:53,629
then<font color="#E5E5E5"> I can compare those two and then</font>

590
00:28:48,780 --> 00:28:56,340
when we run out of run<font color="#E5E5E5"> out of tests that</font>

591
00:28:53,630 --> 00:28:58,590
that we have last known<font color="#CCCCCC"> good results for</font>

592
00:28:56,340 --> 00:29:04,429
then we can run them on<font color="#E5E5E5"> the on the real</font>

593
00:28:58,590 --> 00:29:08,459
<font color="#CCCCCC">hardware</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> as the timings of the</font>

594
00:29:04,430 --> 00:29:10,620
<font color="#E5E5E5">the bus the way that the bus execution</font>

595
00:29:08,460 --> 00:29:15,330
the the bus interface unit<font color="#E5E5E5"> and the</font>

596
00:29:10,620 --> 00:29:18,590
execution unit<font color="#E5E5E5"> interact another problem</font>

597
00:29:15,330 --> 00:29:21,659
<font color="#CCCCCC">that I had is the fact that the</font>

598
00:29:18,590 --> 00:29:23,340
<font color="#E5E5E5">multiplication and division routines are</font>

599
00:29:21,660 --> 00:29:29,250
actually fairly<font color="#E5E5E5"> complicated little bits</font>

600
00:29:23,340 --> 00:29:30,810
of<font color="#E5E5E5"> of micro code</font><font color="#CCCCCC"> and these these</font>

601
00:29:29,250 --> 00:29:33,120
instructions actually<font color="#E5E5E5"> take different</font>

602
00:29:30,810 --> 00:29:35,070
<font color="#CCCCCC">amounts of time different number of</font>

603
00:29:33,120 --> 00:29:39,030
cycles depending<font color="#E5E5E5"> on what numbers you're</font>

604
00:29:35,070 --> 00:29:40,860
multiplying together<font color="#E5E5E5"> or dividing</font><font color="#CCCCCC"> here's</font>

605
00:29:39,030 --> 00:29:44,910
a fun<font color="#E5E5E5"> little a little</font><font color="#CCCCCC"> picture that I</font>

606
00:29:40,860 --> 00:29:48,570
<font color="#CCCCCC">made of that shows how the the timings</font>

607
00:29:44,910 --> 00:29:50,400
change depending on what<font color="#E5E5E5"> what numbers</font>

608
00:29:48,570 --> 00:29:55,260
<font color="#CCCCCC">you put into</font><font color="#E5E5E5"> these instructions so on</font>

609
00:29:50,400 --> 00:29:57,450
the left is<font color="#CCCCCC"> 8-bit multiplies so you've</font>

610
00:29:55,260 --> 00:30:00,600
got one number that you're<font color="#E5E5E5"> multiplying</font>

611
00:29:57,450 --> 00:30:02,700
<font color="#E5E5E5">together on the x-axis</font><font color="#CCCCCC"> one the</font><font color="#E5E5E5"> other</font>

612
00:30:00,600 --> 00:30:05,010
number on the<font color="#CCCCCC"> y-axis</font><font color="#E5E5E5"> and the color at</font>

613
00:30:02,700 --> 00:30:08,580
each point corresponds to the<font color="#E5E5E5"> number</font><font color="#CCCCCC"> of</font>

614
00:30:05,010 --> 00:30:11,160
cycles<font color="#CCCCCC"> that that that in</font><font color="#E5E5E5"> that</font>

615
00:30:08,580 --> 00:30:13,710
multiplication<font color="#E5E5E5"> takes and similarly for</font>

616
00:30:11,160 --> 00:30:15,360
division over here<font color="#CCCCCC"> the</font><font color="#E5E5E5"> multiplication</font>

617
00:30:13,710 --> 00:30:17,310
one actually<font color="#CCCCCC"> wasn't too difficult</font><font color="#E5E5E5"> to</font>

618
00:30:15,360 --> 00:30:20,669
figure<font color="#E5E5E5"> out it turns out to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> just the</font>

619
00:30:17,310 --> 00:30:24,570
<font color="#CCCCCC">one cycle for each</font><font color="#E5E5E5"> one bit in in one of</font>

620
00:30:20,670 --> 00:30:28,490
<font color="#CCCCCC">the operands</font><font color="#E5E5E5"> and a few other things to</font>

621
00:30:24,570 --> 00:30:33,990
do<font color="#E5E5E5"> with whether</font><font color="#CCCCCC"> the a cycle</font><font color="#E5E5E5"> for if the</font>

622
00:30:28,490 --> 00:30:36,050
result overflows<font color="#E5E5E5"> and some cycles if</font>

623
00:30:33,990 --> 00:30:37,950
you're doing sign multiplication

624
00:30:36,050 --> 00:30:38,610
depending<font color="#E5E5E5"> on which</font><font color="#CCCCCC"> of these four</font>

625
00:30:37,950 --> 00:30:43,080
quadrants

626
00:30:38,610 --> 00:30:44,610
<font color="#CCCCCC">Duren so yeah the multiplication one</font>

627
00:30:43,080 --> 00:30:48,720
wasn't<font color="#E5E5E5"> too</font><font color="#CCCCCC"> difficult to</font><font color="#E5E5E5"> figure out the</font>

628
00:30:44,610 --> 00:30:50,850
<font color="#E5E5E5">division one it took me ages</font><font color="#CCCCCC"> I thought I</font>

629
00:30:48,720 --> 00:30:53,549
knew how to implement<font color="#E5E5E5"> division algorithm</font>

630
00:30:50,850 --> 00:30:56,189
<font color="#E5E5E5">in the same way that CPU would do it</font>

631
00:30:53,549 --> 00:31:00,120
<font color="#E5E5E5">just in terms of compares additions</font>

632
00:30:56,190 --> 00:31:03,600
subtractions<font color="#CCCCCC"> but no matter where I put</font>

633
00:31:00,120 --> 00:31:05,699
<font color="#E5E5E5">the delays in this in my own division</font>

634
00:31:03,600 --> 00:31:13,230
routine<font color="#CCCCCC"> I could not get the timings to</font>

635
00:31:05,700 --> 00:31:18,510
line up the fortunately I found<font color="#E5E5E5"> a patent</font>

636
00:31:13,230 --> 00:31:21,210
that that Intel have filed about<font color="#E5E5E5"> the the</font>

637
00:31:18,510 --> 00:31:23,280
implementation<font color="#E5E5E5"> of the a 288 and a 286</font>

638
00:31:21,210 --> 00:31:25,350
and this is an extract from<font color="#E5E5E5"> the pattern</font>

639
00:31:23,280 --> 00:31:28,230
that<font color="#E5E5E5"> actually shows the division</font>

640
00:31:25,350 --> 00:31:32,280
algorithm<font color="#E5E5E5"> that as it is</font><font color="#CCCCCC"> implemented in</font>

641
00:31:28,230 --> 00:31:34,710
the<font color="#CCCCCC"> micro code and the the pattern is</font>

642
00:31:32,280 --> 00:31:37,290
terribly written a whole<font color="#CCCCCC"> load of terms</font>

643
00:31:34,710 --> 00:31:39,120
in it are never explained anywhere<font color="#E5E5E5"> there</font>

644
00:31:37,290 --> 00:31:40,530
<font color="#E5E5E5">are mistakes all over</font><font color="#CCCCCC"> the place but</font>

645
00:31:39,120 --> 00:31:41,909
<font color="#E5E5E5">after</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of head-scratching and</font>

646
00:31:40,530 --> 00:31:44,940
looking at this pattern<font color="#E5E5E5"> and trying to</font>

647
00:31:41,910 --> 00:31:47,990
<font color="#E5E5E5">figure it figure out I actually figured</font>

648
00:31:44,940 --> 00:31:54,080
<font color="#E5E5E5">out how this division routine works and</font>

649
00:31:47,990 --> 00:31:57,350
we<font color="#E5E5E5"> implemented it</font><font color="#CCCCCC"> myself in</font><font color="#E5E5E5"> in C++ and I</font>

650
00:31:54,080 --> 00:31:59,939
got the timings to actually work out so

651
00:31:57,350 --> 00:32:01,730
although<font color="#E5E5E5"> I'm not a fan of patterns in</font>

652
00:31:59,940 --> 00:32:06,840
general this one actually<font color="#E5E5E5"> works out</font>

653
00:32:01,730 --> 00:32:08,340
pretty handy for<font color="#CCCCCC"> me and in fact the the</font>

654
00:32:06,840 --> 00:32:09,990
algorithm as implemented in the micro

655
00:32:08,340 --> 00:32:13,199
code is is a bit cleverer than the one

656
00:32:09,990 --> 00:32:15,419
that that I<font color="#E5E5E5"> implemented myself it it</font>

657
00:32:13,200 --> 00:32:18,090
<font color="#E5E5E5">actually manages to do the division with</font>

658
00:32:15,419 --> 00:32:19,460
with fewer temporary registers which was

659
00:32:18,090 --> 00:32:21,750
really<font color="#E5E5E5"> very important if you're on a</font>

660
00:32:19,460 --> 00:32:25,470
running on a<font color="#E5E5E5"> CPU with a very small</font>

661
00:32:21,750 --> 00:32:28,309
<font color="#E5E5E5">number of transistors and internal</font>

662
00:32:25,470 --> 00:32:31,770
registers I'm still<font color="#E5E5E5"> working on X you see</font>

663
00:32:28,309 --> 00:32:34,049
<font color="#E5E5E5">there's still a few</font><font color="#CCCCCC"> more a few more bits</font>

664
00:32:31,770 --> 00:32:41,830
to do before I<font color="#CCCCCC"> can call it finished a</font>

665
00:32:34,049 --> 00:32:44,049
number<font color="#E5E5E5"> of number of situations</font><font color="#CCCCCC"> where the</font>

666
00:32:41,830 --> 00:32:47,309
invalid instructions if you're using

667
00:32:44,049 --> 00:32:49,299
multiple prefixes at once the the

668
00:32:47,309 --> 00:32:51,789
<font color="#E5E5E5">situations there where that</font><font color="#CCCCCC"> isn't</font>

669
00:32:49,299 --> 00:32:54,460
defined<font color="#E5E5E5"> situations to do with hardware</font>

670
00:32:51,789 --> 00:32:57,549
interrupts<font color="#E5E5E5"> if a hardware and truck comes</font>

671
00:32:54,460 --> 00:33:00,460
in a device needs<font color="#E5E5E5"> in needs an interrupt</font>

672
00:32:57,549 --> 00:33:03,489
servicing then whereabouts in<font color="#E5E5E5"> the</font>

673
00:33:00,460 --> 00:33:07,749
execution of the instruction does that

674
00:33:03,489 --> 00:33:09,999
<font color="#E5E5E5">interrupt actually occur</font><font color="#CCCCCC"> and then the I</font>

675
00:33:07,749 --> 00:33:12,249
want to use these five hundred<font color="#CCCCCC"> and</font><font color="#E5E5E5"> fifty</font>

676
00:33:09,999 --> 00:33:13,629
or<font color="#E5E5E5"> so tests that that ever fails to make</font>

677
00:33:12,249 --> 00:33:15,009
a sort of torture test for other

678
00:33:13,629 --> 00:33:19,959
emulators so that they can see<font color="#CCCCCC"> how</font>

679
00:33:15,009 --> 00:33:22,059
accurate they are<font color="#E5E5E5"> and then the the rest</font>

680
00:33:19,960 --> 00:33:23,769
of it is is just implementing<font color="#E5E5E5"> you know</font>

681
00:33:22,059 --> 00:33:26,889
the rest of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> machine</font><font color="#CCCCCC"> the the</font><font color="#E5E5E5"> CGA card</font>

682
00:33:23,769 --> 00:33:29,169
the<font color="#CCCCCC"> speaker</font><font color="#E5E5E5"> keyboard mouse host</font>

683
00:33:26,889 --> 00:33:30,789
interface<font color="#E5E5E5"> like</font><font color="#CCCCCC"> DOSBox has for you know</font>

684
00:33:29,169 --> 00:33:31,690
<font color="#E5E5E5">reading fast off your hard disk it would</font>

685
00:33:30,789 --> 00:33:36,519
be very<font color="#CCCCCC"> useful indeed</font>

686
00:33:31,690 --> 00:33:39,039
<font color="#CCCCCC">and and fixing up the that the timings</font>

687
00:33:36,519 --> 00:33:40,179
of the the<font color="#E5E5E5"> other peripherals the timer</font>

688
00:33:39,039 --> 00:33:44,980
<font color="#CCCCCC">in the interrupt controller</font>

689
00:33:40,179 --> 00:33:46,600
<font color="#CCCCCC">dmas and and the other peripherals so</font>

690
00:33:44,980 --> 00:33:48,489
that's the end of my talk<font color="#E5E5E5"> has</font><font color="#CCCCCC"> a few</font>

691
00:33:46,600 --> 00:33:50,830
links here<font color="#CCCCCC"> to</font><font color="#E5E5E5"> to some of the projects</font>

692
00:33:48,489 --> 00:33:53,710
that<font color="#E5E5E5"> I've</font><font color="#CCCCCC"> I've talked about</font><font color="#E5E5E5"> all the code</font>

693
00:33:50,830 --> 00:33:54,999
<font color="#E5E5E5">for all of this is on github</font><font color="#CCCCCC"> so I'm</font>

694
00:33:53,710 --> 00:33:56,649
afraid<font color="#E5E5E5"> it's all</font><font color="#CCCCCC"> a big mess in one</font>

695
00:33:54,999 --> 00:33:58,119
repository so you'll probably have to

696
00:33:56,649 --> 00:34:02,129
<font color="#E5E5E5">email me if you want to find something</font>

697
00:33:58,119 --> 00:34:02,129
specific<font color="#E5E5E5"> in there that's it</font>

698
00:34:07,380 --> 00:34:31,440
[Music]

699
00:34:11,059 --> 00:34:38,039
sure any quick questions anyone<font color="#CCCCCC"> okay so</font>

700
00:34:31,440 --> 00:34:41,039
except for your demo scene<font color="#E5E5E5"> code and the</font>

701
00:34:38,039 --> 00:34:45,210
<font color="#E5E5E5">digger game how sensitive are most games</font>

702
00:34:41,039 --> 00:34:47,659
<font color="#E5E5E5">to the timing</font><font color="#CCCCCC"> of the XT</font><font color="#E5E5E5"> most games are</font>

703
00:34:45,210 --> 00:34:51,869
not<font color="#E5E5E5"> that sensitive at all I mean even</font>

704
00:34:47,659 --> 00:34:55,289
games<font color="#CCCCCC"> that were written to be only</font>

705
00:34:51,869 --> 00:34:58,500
tested on<font color="#CCCCCC"> that on that particular</font><font color="#E5E5E5"> CPU</font>

706
00:34:55,289 --> 00:35:01,730
and run<font color="#CCCCCC"> of run at a speed that</font><font color="#E5E5E5"> is</font>

707
00:34:58,500 --> 00:35:03,809
governed just by the speed of<font color="#CCCCCC"> the CPU</font>

708
00:35:01,730 --> 00:35:05,700
<font color="#CCCCCC">there are a number of</font><font color="#E5E5E5"> games like</font><font color="#CCCCCC"> that</font>

709
00:35:03,809 --> 00:35:08,910
but people<font color="#E5E5E5"> played them on faster systems</font>

710
00:35:05,700 --> 00:35:12,779
<font color="#CCCCCC">they were just</font><font color="#E5E5E5"> more difficult so it's</font>

711
00:35:08,910 --> 00:35:15,509
it's kind<font color="#CCCCCC"> of an academic</font><font color="#E5E5E5"> exercise</font><font color="#CCCCCC"> to to</font>

712
00:35:12,779 --> 00:35:16,920
<font color="#E5E5E5">actually make this</font><font color="#CCCCCC"> cycle exact emulator</font>

713
00:35:15,510 --> 00:35:22,170
it's not very important<font color="#E5E5E5"> for running</font>

714
00:35:16,920 --> 00:35:25,980
<font color="#CCCCCC">real-world software</font><font color="#E5E5E5"> I'm hoping that that</font>

715
00:35:22,170 --> 00:35:27,950
by implementing<font color="#E5E5E5"> this emulator</font><font color="#CCCCCC"> I will</font>

716
00:35:25,980 --> 00:35:31,140
sort of spur the development of some

717
00:35:27,950 --> 00:35:33,808
software that<font color="#E5E5E5"> both software running on</font>

718
00:35:31,140 --> 00:35:38,700
these old<font color="#CCCCCC"> machines that</font><font color="#E5E5E5"> is cycle exact</font>

719
00:35:33,809 --> 00:35:41,430
<font color="#E5E5E5">that does require that that cycle exact</font>

720
00:35:38,700 --> 00:35:45,089
timing<font color="#E5E5E5"> and can therefore push the</font>

721
00:35:41,430 --> 00:35:49,109
<font color="#CCCCCC">machine much closer to its it's</font>

722
00:35:45,089 --> 00:35:53,549
theoretical limits than then it would do

723
00:35:49,109 --> 00:35:55,078
if you<font color="#CCCCCC"> are relying on other parts</font><font color="#E5E5E5"> of the</font>

724
00:35:53,549 --> 00:36:02,849
hardware the timer interrupts<font color="#E5E5E5"> and so on</font>

725
00:35:55,079 --> 00:36:03,090
<font color="#E5E5E5">to to do your timing thank you Andrew</font>

726
00:36:02,849 --> 00:36:05,520
Jenna

727
00:36:03,090 --> 00:36:12,320
[Music]

728
00:36:05,520 --> 00:36:12,320
[Applause]

