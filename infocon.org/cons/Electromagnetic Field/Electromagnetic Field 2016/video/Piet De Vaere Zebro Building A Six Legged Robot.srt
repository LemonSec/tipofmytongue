1
00:00:00,000 --> 00:00:14,730
ok and welcome to the next talk

2
00:00:14,730 --> 00:00:19,380
we have today we have piqued the fire
talking about building a six-legged

3
00:00:19,380 --> 00:00:22,590
robot named zeb ur welcome Pete

4
00:00:22,590 --> 00:00:28,560
well thank you so am my name is Pete and
two months ago I received my a bachelor

5
00:00:28,560 --> 00:00:32,040
and electrical engineering from Delft
University of Technology in the

6
00:00:32,040 --> 00:00:36,660
Netherlands and for my bachelor
graduation project I worked with a team

7
00:00:36,660 --> 00:00:43,800
of students that dedicates our time to
building six legged robots and during

8
00:00:43,800 --> 00:00:49,019
this talk i will do two things first i
will look at em why do we build six or

9
00:00:49,020 --> 00:00:54,390
eight legged robots and secondly we will
look at some of the mistakes that i am

10
00:00:54,390 --> 00:00:58,980
my project team and I made while we were
building one of these robots and look at

11
00:00:58,980 --> 00:01:01,559
how you can prevent of making the same
mistakes

12
00:01:01,559 --> 00:01:05,580
so why do we build these robots

13
00:01:05,580 --> 00:01:10,710
I'm to answer that question it's useful
to first look at what computer

14
00:01:10,710 --> 00:01:17,160
scientists have been doing for years so
they found out that if you look at the

15
00:01:17,160 --> 00:01:21,390
behavior of animals in nature and then
you model that behavior and change the

16
00:01:21,390 --> 00:01:25,500
model a little bit to suit your needs
then you can actually use this behavior

17
00:01:25,500 --> 00:01:30,149
and to solve complex problems that you
could perhaps otherwise not solve adult

18
00:01:30,149 --> 00:01:36,119
and a great example of this is the
traveling sales and algorithm that is

19
00:01:36,119 --> 00:01:40,619
based on the way that animals find a
short spots between their nest and food

20
00:01:40,619 --> 00:01:45,209
and you can actually use that to solve
the travelling salesman problem a

21
00:01:45,209 --> 00:01:50,489
problem that is unsolvable by
conventional algorithmics so if you can

22
00:01:50,489 --> 00:01:51,929
do this with software

23
00:01:51,929 --> 00:01:57,270
why would you also be able to do it with
hardware in fact if you look at an end

24
00:01:57,270 --> 00:02:00,899
then you see that it's actually a really
simple animal it's much simpler than we

25
00:02:00,899 --> 00:02:06,330
are or pretty much all other animals are
but still it's able to reverse all kinds

26
00:02:06,330 --> 00:02:07,200
of drinks

27
00:02:07,200 --> 00:02:11,849
so if you would build a robot and model
it like an animal like the robot on the

28
00:02:11,849 --> 00:02:16,560
right of the slides with that robot also
be able to traverse the strings

29
00:02:16,560 --> 00:02:19,900
well as you can see here and I

30
00:02:19,900 --> 00:02:45,129
so as you can see some of these
obstacles would be virtually impossible

31
00:02:45,129 --> 00:02:50,170
to pass with a robot of that size with
wheels and yet this robot it just crawls

32
00:02:50,170 --> 00:02:51,730
right over it

33
00:02:51,730 --> 00:02:57,518
so I'm clearly doing this has a number
of advantages and therefore we have been

34
00:02:57,519 --> 00:03:00,579
experimenting with building this robot
in different sizes

35
00:03:00,579 --> 00:03:04,030
you have the one that we just saw in the
video which is about this bit of

36
00:03:04,030 --> 00:03:09,129
district and then we currently have two
other models and we had a really big one

37
00:03:09,129 --> 00:03:12,790
and that I've been working on for my
bachelor graduation project that will

38
00:03:12,790 --> 00:03:16,659
talk about a little bit in this
presentation and then we have a very

39
00:03:16,659 --> 00:03:19,659
small one

40
00:03:21,489 --> 00:03:26,139
this microphone right thank you and that
i have actually brought with me and this

41
00:03:26,139 --> 00:03:30,010
one is actually a small enough that you
would you could easily that the child

42
00:03:30,010 --> 00:03:34,840
play with its a while the other really
big one I wouldn't dare to a stand 1

43
00:03:34,840 --> 00:03:41,560
meter close to it and you see that it
does is it

44
00:03:47,550 --> 00:03:52,740
and you can see that it actually behave
in exactly the same way and that also

45
00:03:52,740 --> 00:04:01,710
works so that this idea is in fact
scalable and that yeah so i will just

46
00:04:01,710 --> 00:04:05,610
leave that one on the table there and
i'm probably going to regret saying this

47
00:04:05,610 --> 00:04:11,850
but it has an unsecured bluetooth
interface so I have some fun

48
00:04:12,960 --> 00:04:19,470
so now we find out why we want to build
this thing so now let's look at what

49
00:04:19,470 --> 00:04:23,520
problems you actually in Congress will
building these robots and in fact what

50
00:04:23,520 --> 00:04:26,849
problems what problems you actually
encounter will build when building

51
00:04:26,850 --> 00:04:28,830
something in more general

52
00:04:28,830 --> 00:04:33,719
so the first problem that we had and we
have had this problem for a long time in

53
00:04:33,720 --> 00:04:38,850
the team is that we were not using
abstraction and what I mean with that is

54
00:04:38,850 --> 00:04:44,370
that every time that a new student group
would begin we would ask them to build

55
00:04:44,370 --> 00:04:50,370
an entire robot but building a robot is
a large and complicated task and

56
00:04:50,370 --> 00:04:54,510
students that join our team our couple
are typically only active for two to

57
00:04:54,510 --> 00:04:58,289
three months there for the graduation
projects and what would happen time and

58
00:04:58,290 --> 00:05:01,590
time again is that they would start
building a robot

59
00:05:01,590 --> 00:05:06,690
they would finish it up well they would
only finished half of it and then it

60
00:05:06,690 --> 00:05:11,400
would go away and then the next year new
students come in and they look at the

61
00:05:11,400 --> 00:05:15,150
design plans and they say this is
cracked we're going to build something

62
00:05:15,150 --> 00:05:22,560
you and it's actually so bad that the
beginning of my bachelor pieces was a

63
00:05:22,560 --> 00:05:26,910
list of five robots that every time it
said ok so we started building this

64
00:05:26,910 --> 00:05:31,590
robot but we didn't have enough time and
therefore some other groups are building

65
00:05:31,590 --> 00:05:37,289
a neural so what we decided to do
instead was not asking students to build

66
00:05:37,290 --> 00:05:41,910
robots but also have to build a module
and because if you look at software

67
00:05:41,910 --> 00:05:45,690
design you see that we've been using
this approach all along your builds your

68
00:05:45,690 --> 00:05:48,780
build software libraries that then other
people can use sorry about the class

69
00:05:48,780 --> 00:05:49,989
that I

70
00:05:49,990 --> 00:05:54,130
is encapsulated and that can cause
exists on its own

71
00:05:54,640 --> 00:05:59,200
so why not do that with hardware and
make a modular design with properly

72
00:05:59,200 --> 00:06:04,120
specified in the face and good
documentation so that was probably one

73
00:06:04,120 --> 00:06:05,800
that problem too

74
00:06:05,800 --> 00:06:11,350
having single points of failure when you
look at this and your software hardware

75
00:06:11,350 --> 00:06:17,110
engineer you probably think that but
it's actually more complex than that

76
00:06:17,110 --> 00:06:20,740
it's not only about the engineering part
it's also about the logistical parts

77
00:06:20,740 --> 00:06:26,440
I'm in Oregon example we ordered three
different kinds of motives to build a

78
00:06:26,440 --> 00:06:32,650
robot one from china one from England
and one from Germany and we ordered them

79
00:06:32,650 --> 00:06:36,280
three to four weeks before the actual
start time of a project because these

80
00:06:36,280 --> 00:06:41,169
things typically have some lead time and
one week before the start of the project

81
00:06:41,170 --> 00:06:46,240
at the chinese mothers arrived one day
before the start of the project the

82
00:06:46,240 --> 00:06:51,160
English motors derived and two weeks
after the start of the project

83
00:06:51,760 --> 00:06:58,659
we still have not received any German
motors and at a two week mark

84
00:06:59,320 --> 00:07:04,780
we got a call from them saying okay so
we just received your motors but you

85
00:07:04,780 --> 00:07:09,460
haven't paid the proforma invoice yet
and we were like what but no we have

86
00:07:09,460 --> 00:07:13,060
paid a month and a half ago and they
said no you haven't

87
00:07:13,060 --> 00:07:18,190
so I call over our finance department
and I asked them could you please look

88
00:07:18,190 --> 00:07:23,740
up that invoice from one and a half
months ago and they responded with what

89
00:07:23,740 --> 00:07:24,490
invoice

90
00:07:24,490 --> 00:07:29,050
so it turns out that someone had
forgotten to send an email with the

91
00:07:29,050 --> 00:07:33,430
invoice to the right person in the
finance department so I oxygen okay well

92
00:07:33,430 --> 00:07:37,450
this is a pro forma invoice and we have
a short project so we really need this a

93
00:07:37,950 --> 00:07:42,390
we really need this part could you
please pay this fast as possible and the

94
00:07:42,390 --> 00:07:43,110
answer

95
00:07:43,110 --> 00:07:46,860
yes ok but we only make payments on
Tuesdays

96
00:07:47,880 --> 00:07:55,020
so I also well that's great because
today is a monday and they answer no

97
00:07:55,020 --> 00:07:58,650
because this is actually a part from a
new supplier so we have to make a new

98
00:07:58,650 --> 00:08:01,469
entry in the system and we can only do
that on Thursday nights and then it

99
00:08:01,470 --> 00:08:08,310
takes the night before it actually gets
updated and then I so I on thursday i

100
00:08:08,310 --> 00:08:11,820
call them again and they say okay so we
have made a new entry in the system but

101
00:08:11,820 --> 00:08:15,420
the person who actually has to improve
that approve this invoices on the leaf

102
00:08:15,420 --> 00:08:18,330
ask him who is the replacement and give
me the name of the replacement and then

103
00:08:18,330 --> 00:08:22,140
turns out that replacement is also on
the pregnancy leaf and then I called the

104
00:08:22,140 --> 00:08:26,640
replacement of that replacement and they
say well it's okay i can do it but they

105
00:08:26,640 --> 00:08:31,560
have only change the system today and it
needs another night to add two to become

106
00:08:31,560 --> 00:08:36,419
updated in the end I ended up calling
the finance department for two weeks

107
00:08:36,419 --> 00:08:39,478
until someone at the front desk
literally turned crazy

108
00:08:40,049 --> 00:08:46,890
and then finally they paid the invoice
so and then so that was that

109
00:08:47,430 --> 00:08:51,780
but in the meantime we actually also
have problems with the Chinese modest

110
00:08:51,780 --> 00:08:56,250
because when we started testing them we
found out that when they reached a

111
00:08:56,250 --> 00:09:01,140
certain temperature they would use a lot
of current for a very short amount of

112
00:09:01,140 --> 00:09:08,430
time and then use no current at all
anymore and just stopped working so or

113
00:09:08,430 --> 00:09:11,550
mechanical engineers open one of the
martyrs up and what they found was this

114
00:09:11,550 --> 00:09:16,319
and it is that the Chinese had used
plastic gears in the last year stage of

115
00:09:16,320 --> 00:09:19,830
the gearbox and when the motors with
warm up then the gears with slightly

116
00:09:19,830 --> 00:09:26,730
deform and would get destroyed by the
metal gears so this shows that if you

117
00:09:26,730 --> 00:09:29,880
ever would have only bought one or even
two of the more than we would have

118
00:09:29,880 --> 00:09:32,910
picked the wrong once never would have
had a serious problem because we only

119
00:09:32,910 --> 00:09:34,740
have ten weeks for the project

120
00:09:34,740 --> 00:09:39,600
so do not have single points of failure
problem tree

121
00:09:40,230 --> 00:09:42,209
who ok

122
00:09:42,209 --> 00:09:47,339
direct part is supposed to say debugging
and the blue part is supposed to see at

123
00:09:47,339 --> 00:09:55,259
to say i'm coding or designing so this
is actually another good one

124
00:09:55,259 --> 00:10:01,410
test everything in advance never trust
Microsoft Office and what you would

125
00:10:01,410 --> 00:10:04,860
typically do is you would say ok when
you make when you plant them when you

126
00:10:04,860 --> 00:10:06,119
plan a project

127
00:10:06,119 --> 00:10:11,160
it's ok i will use ninety percent of
time for for planning and ten percent of

128
00:10:11,160 --> 00:10:15,959
time for deeper but then you do the
project and you end up doing this you

129
00:10:15,959 --> 00:10:19,378
spend ninety percent of your time
debugging and Tim percent of your time

130
00:10:19,379 --> 00:10:24,389
programming and these debugging moments
will will appear at the weirdest moments

131
00:10:24,389 --> 00:10:29,279
when you least expect it expect them for
example in our robot I'm we have a brush

132
00:10:29,279 --> 00:10:33,209
DC motor that is controlled by a custom
PCB with a microcontroller on that we

133
00:10:33,209 --> 00:10:37,170
make and it has a number of sensor
inputs it has a current sensor it has a

134
00:10:37,170 --> 00:10:41,939
temperature sensor that's connected that
over ice curtsy to the motor it has a

135
00:10:41,939 --> 00:10:45,959
voltage sensor and when we tested
everything everything separately it all

136
00:10:45,959 --> 00:10:48,628
worked so we said okay let's throw it
all together

137
00:10:48,629 --> 00:10:55,649
we hooked everything up we started it
and it also worked for 30 seconds and

138
00:10:55,649 --> 00:11:01,259
then we started it and it worked again
for three minutes and when we kept doing

139
00:11:01,259 --> 00:11:03,449
this it would actually keep doing this

140
00:11:03,449 --> 00:11:08,490
it would randomly work for somewhere
between 10 seconds and one hour and in

141
00:11:08,490 --> 00:11:11,910
fact the microcontroller would
completely hang or debug interface would

142
00:11:11,910 --> 00:11:15,689
not respond anymore so we had no way of
seeing what was going on

143
00:11:15,689 --> 00:11:21,269
does anyone care to take a guess about
what was going on that

144
00:11:21,899 --> 00:11:24,899
yeah maybe

145
00:11:27,220 --> 00:11:32,470
no what was actually happening is that
the motors that we're using we're making

146
00:11:32,470 --> 00:11:36,850
so much electromagnetic interference
that the ice curtsy bus was picking up

147
00:11:36,850 --> 00:11:39,939
where signals which caused the
controller in the microcontroller to do

148
00:11:39,939 --> 00:11:44,769
something that we would have never
imagined possible and just keep

149
00:11:44,769 --> 00:11:48,220
generating interrupts which caused the
microcontroller to just keep handling

150
00:11:48,220 --> 00:11:51,550
that interrupt time or that interrupt
routine and having no time to do to

151
00:11:51,550 --> 00:11:52,959
react to what we wanted

152
00:11:52,959 --> 00:11:59,170
so does anybody want to take guess at
how long it took us to find this out

153
00:11:59,170 --> 00:12:06,819
no luckily not but they did take us two
and a half days and weekends and when

154
00:12:06,819 --> 00:12:10,360
you only have a 10 week project that's a
lot of time and this is how and this is

155
00:12:10,360 --> 00:12:13,689
not the only case where this has
happened so that was problem three

156
00:12:13,689 --> 00:12:18,910
traveling for not having a decent test
set up when you're building a project

157
00:12:18,910 --> 00:12:25,480
like this your desk will unavoidably end
up looking like this and it is very

158
00:12:25,480 --> 00:12:29,379
tempting to just throw away quick deepak
set up because you think that testing

159
00:12:29,379 --> 00:12:33,610
will only take five minutes and then
you're done with it it will not

160
00:12:33,610 --> 00:12:39,339
so I'm when you're building a develop
you really have to take great care at

161
00:12:39,339 --> 00:12:44,290
both harder and software or hardware and
you can do simple things for example

162
00:12:44,290 --> 00:12:49,509
when you're connecting two pieces of our
to pcbs make a proper cable don't just

163
00:12:49,509 --> 00:12:53,769
duct tape it together because when you
do duct tape it and it doesn't work you

164
00:12:53,769 --> 00:12:57,610
will have no way of knowing whether it
is a cable that broker gave a bad

165
00:12:57,610 --> 00:13:00,670
contact or whether it's something or
whether something is actually generally

166
00:13:00,670 --> 00:13:07,750
wrong and from for the software when
especially when your program

167
00:13:07,750 --> 00:13:11,589
microcontrollers you have no printf
statements

168
00:13:11,589 --> 00:13:17,079
unfortunately so you have to roll your
own solution and when you do that you

169
00:13:17,079 --> 00:13:21,008
have to do it as thoroughly as possible
because one hour of writing a debug tool

170
00:13:21,009 --> 00:13:25,449
will save you a week of the back time
and for example you see that we have a

171
00:13:25,449 --> 00:13:30,309
graphical application here that will
actually show live output data of the

172
00:13:30,309 --> 00:13:32,079
debug data coming from

173
00:13:32,080 --> 00:13:35,560
the microcontroller and before we had it

174
00:13:35,560 --> 00:13:41,469
I we had this out we had been spending a
couple of days trying to debug data that

175
00:13:41,470 --> 00:13:45,460
was coming from magnetic field sensors
that we were using to determine the

176
00:13:45,460 --> 00:13:50,620
position of our legs of the robot legs
and we just it just keep having kept

177
00:13:50,620 --> 00:13:54,910
having books and then the weekend came
along and i wrote this application and

178
00:13:54,910 --> 00:13:57,430
by monday at noon the problem was fixed

179
00:13:57,430 --> 00:14:01,300
so make decent debug tools

180
00:14:01,300 --> 00:14:04,300
it will pay off so number five

181
00:14:04,870 --> 00:14:14,170
only having a plan a time when we look
at this robot that's on the table then

182
00:14:14,170 --> 00:14:17,680
at the way that we get feedback from the
position of the robot is we have a

183
00:14:17,680 --> 00:14:21,910
magnetic field sensor here and we have a
magnet in in the wheels are in the lex

184
00:14:21,910 --> 00:14:24,520
and every time you you make a rotation

185
00:14:24,520 --> 00:14:27,550
you can detect a peek and see okay now I
know where the legacy

186
00:14:29,260 --> 00:14:32,560
so we don't ok if we can do that on this
robots

187
00:14:32,560 --> 00:14:37,989
we can also do it on our big one and we
actually use 3 Hall sensors and eight

188
00:14:37,990 --> 00:14:43,480
magnets so we had twenty four positions
but when we try to make it work like

189
00:14:43,480 --> 00:14:44,050
that

190
00:14:44,050 --> 00:14:47,050
it did this

191
00:14:53,030 --> 00:15:01,880
that is not the direction it is supposed
to go so we were lucky because we had

192
00:15:01,880 --> 00:15:03,830
actually affected in that this might
happen

193
00:15:03,830 --> 00:15:07,730
and on the PCB that you see on the right
there's actually a port for industry

194
00:15:07,730 --> 00:15:12,470
standard rotation and gorgeous on the
primary axis but if it would have not

195
00:15:12,470 --> 00:15:16,550
have done this then that would have
meant that we would have to roll a new

196
00:15:16,550 --> 00:15:19,790
piece of be that we would have to order
a new piece of be that we would have to

197
00:15:19,790 --> 00:15:24,230
solder any PCB and that we would have to
debug a new pc be all of this would take

198
00:15:24,230 --> 00:15:29,240
you at least two to three weeks and cost
you hundreds of dollars while when

199
00:15:29,240 --> 00:15:30,830
you're designing this PCB

200
00:15:30,830 --> 00:15:35,180
it's maybe half an hour of X for work to
just connect a couple of more pins to

201
00:15:35,180 --> 00:15:41,420
the microcontroller and and put it on
some external pins and what we also

202
00:15:41,420 --> 00:15:45,740
learned by this is that there's actually
a reason that rotation quarters are an

203
00:15:45,740 --> 00:15:47,090
industry standard

204
00:15:47,090 --> 00:15:55,310
so yeah so these are the five problems
that we encountered and i'll send them

205
00:15:55,310 --> 00:15:59,780
up again not use an extra not using
abstraction having a single point of

206
00:15:59,780 --> 00:16:06,439
failure bad planning not having a decent
debug setup and only having a plan a and

207
00:16:06,440 --> 00:16:12,290
if you want to avoid those you should do
the following build a module another

208
00:16:12,290 --> 00:16:18,680
robot prevent single points of failure
factor in debugging make property book

209
00:16:18,680 --> 00:16:20,750
tools and have a plan B

210
00:16:20,750 --> 00:16:23,750
thank you

211
00:16:25,820 --> 00:16:31,730
thanks very much bleep and I think I got
a couple of minutes for some questions

212
00:16:31,730 --> 00:16:34,730
for you but it wasn't crystallizer
anyone have any questions

213
00:16:35,990 --> 00:16:38,990
yes

214
00:16:40,400 --> 00:16:47,510
hi so you mentioned the problems that
you had trying to buy technical content

215
00:16:47,510 --> 00:16:52,520
of come you did that cause any problems
between you and the other people in your

216
00:16:52,520 --> 00:16:54,260
project that you're set of cum

217
00:16:54,260 --> 00:16:57,860
could you repeat the question so did you
did the technical problems you run into

218
00:16:57,860 --> 00:17:00,740
caused a bit of friction and make it
more difficult to work with the people

219
00:17:00,740 --> 00:17:02,870
that you're working with

220
00:17:02,870 --> 00:17:09,170
yes actually it does because when for
example at a person has been a debugging

221
00:17:09,170 --> 00:17:12,410
on a problem for a couple of days then
and you really start to develop this

222
00:17:12,410 --> 00:17:17,089
tunnel vision and all you can think
about this problem and it has happened

223
00:17:17,089 --> 00:17:19,609
sometimes that someone else comes along

224
00:17:19,609 --> 00:17:23,990
take a look at the problem or or are
makes a new system parallel to it and

225
00:17:23,990 --> 00:17:29,510
get it to work in a couple of hours so
that can be quite confronting but I

226
00:17:29,510 --> 00:17:32,870
think it's important that as a team that
you managed to deal with this because in

227
00:17:32,870 --> 00:17:35,959
the end you'll want the same thing and
the way that you get there

228
00:17:35,960 --> 00:17:39,350
I should not really matter and it should
not be about personal pride

229
00:17:39,350 --> 00:17:42,350
any other questions

230
00:17:43,340 --> 00:17:49,639
all right doesn't like this any other
questions so I'm sure you can probably

231
00:17:49,640 --> 00:17:52,640
come up and have a look at the robot
probably outside

232
00:17:53,330 --> 00:17:56,510
if you've got a space to put it out
there somewhere that people can have a

233
00:17:56,510 --> 00:17:57,050
look

234
00:17:57,050 --> 00:18:03,050
yeah yeah if you were yeah and ok say
you join me in thinking Pete freeze

235
00:18:03,050 --> 00:18:03,530
great talk

