1
00:00:00,000 --> 00:00:02,000
[Applause]

2
00:00:02,000 --> 00:00:03,120
hello

3
00:00:03,120 --> 00:00:05,759
hi so yeah i'm steve baines um a quick

4
00:00:05,759 --> 00:00:07,759
talk on the apollo guidance computer uh

5
00:00:07,759 --> 00:00:08,880
it is going to be a quick overview

6
00:00:08,880 --> 00:00:10,480
because it turns out that actually in 30

7
00:00:10,480 --> 00:00:11,759
minutes you really can't get that much

8
00:00:11,759 --> 00:00:13,599
into that far into the details so i'm

9
00:00:13,599 --> 00:00:15,040
just going to cover some of the

10
00:00:15,040 --> 00:00:16,560
interesting areas and particular things

11
00:00:16,560 --> 00:00:18,400
that by modern standards are somewhat

12
00:00:18,400 --> 00:00:21,600
strange so uh apollo was a while ago now

13
00:00:21,600 --> 00:00:23,760
um so some people here might really not

14
00:00:23,760 --> 00:00:25,279
know too much about it so a quick

15
00:00:25,279 --> 00:00:27,199
summary there basically two spacecraft

16
00:00:27,199 --> 00:00:28,960
to get to the moon uh the command

17
00:00:28,960 --> 00:00:31,279
service module or um on the left the

18
00:00:31,279 --> 00:00:32,640
command the bit at the top the

19
00:00:32,640 --> 00:00:34,480
triangular bit is basically the command

20
00:00:34,480 --> 00:00:36,800
module that's where the crew lived uh

21
00:00:36,800 --> 00:00:38,320
everything behind that is basically fuel

22
00:00:38,320 --> 00:00:40,239
tanks and engine so that's the command

23
00:00:40,239 --> 00:00:42,160
and service module on the right you have

24
00:00:42,160 --> 00:00:43,840
the lem the lunar lander which was what

25
00:00:43,840 --> 00:00:47,039
was used to actually land on the moon

26
00:00:47,039 --> 00:00:49,039
both of those had one apollo guidance

27
00:00:49,039 --> 00:00:52,079
computer in them identical hardware but

28
00:00:52,079 --> 00:00:55,039
slightly different software

29
00:00:55,039 --> 00:00:55,920
oops

30
00:00:55,920 --> 00:00:58,320
too many slides

31
00:00:58,320 --> 00:01:01,199
okay so um so first thing why even was

32
00:01:01,199 --> 00:01:04,239
there um an apollo guidance computer um

33
00:01:04,239 --> 00:01:06,000
well it basically was very much at the

34
00:01:06,000 --> 00:01:08,240
core of the spacecraft so um from this

35
00:01:08,240 --> 00:01:10,080
diagram you can see you've basically got

36
00:01:10,080 --> 00:01:11,600
um at the top you've got the diskey

37
00:01:11,600 --> 00:01:13,200
which i'll talk about more which was um

38
00:01:13,200 --> 00:01:15,280
crew output talking to the computer

39
00:01:15,280 --> 00:01:17,040
you've got various radio communication

40
00:01:17,040 --> 00:01:19,680
links uplink and downlink telemetry over

41
00:01:19,680 --> 00:01:21,680
on the left hand side uh is the inertial

42
00:01:21,680 --> 00:01:23,759
measurement unit and optics so inertial

43
00:01:23,759 --> 00:01:25,360
measurement unit was

44
00:01:25,360 --> 00:01:27,119
electronics that basically it's a

45
00:01:27,119 --> 00:01:29,759
gyroscope stabilized system essentially

46
00:01:29,759 --> 00:01:31,520
and that's used to um

47
00:01:31,520 --> 00:01:33,280
tell the allow the spacecraft to know

48
00:01:33,280 --> 00:01:35,520
which way it's um oriented and what

49
00:01:35,520 --> 00:01:37,759
velocity it's doing

50
00:01:37,759 --> 00:01:40,000
you also have zillions of switches and

51
00:01:40,000 --> 00:01:42,159
so on all running through the machine

52
00:01:42,159 --> 00:01:43,680
and most important of all the engines

53
00:01:43,680 --> 00:01:45,280
and reaction control jets are connected

54
00:01:45,280 --> 00:01:46,640
through the computer so essentially the

55
00:01:46,640 --> 00:01:49,119
computer is at the core of everything

56
00:01:49,119 --> 00:01:51,040
and a big reason for this is when it

57
00:01:51,040 --> 00:01:52,640
comes down to it despite what hollywood

58
00:01:52,640 --> 00:01:54,880
may say if you're flying spacecraft you

59
00:01:54,880 --> 00:01:56,479
can't eyeball it it has to be very

60
00:01:56,479 --> 00:01:59,439
precise maneuvers at just the right time

61
00:01:59,439 --> 00:02:00,880
you know exactly right orientation

62
00:02:00,880 --> 00:02:02,640
engine on and off exactly the right time

63
00:02:02,640 --> 00:02:05,040
you can't eyeball it so essentially it's

64
00:02:05,040 --> 00:02:08,520
all run through a computer

65
00:02:08,959 --> 00:02:11,840
okay uh so this is the one slide quick

66
00:02:11,840 --> 00:02:13,920
summary of the key characteristics which

67
00:02:13,920 --> 00:02:16,640
on my screen is really tiny um so it's a

68
00:02:16,640 --> 00:02:20,879
15-bit word length which is kind of odd

69
00:02:20,879 --> 00:02:24,000
assigned bits plus 14-bit uh data if

70
00:02:24,000 --> 00:02:26,800
you're interpreting it as a value um or

71
00:02:26,800 --> 00:02:28,080
when it's an instruction word it's a

72
00:02:28,080 --> 00:02:30,959
three-bit op code and a 12-bit address

73
00:02:30,959 --> 00:02:32,640
and it would help if i could read that

74
00:02:32,640 --> 00:02:34,239
with these glasses

75
00:02:34,239 --> 00:02:36,239
it's an accumulator machine von neumann

76
00:02:36,239 --> 00:02:38,080
architecture so instructions and data

77
00:02:38,080 --> 00:02:41,120
are the same thing um there's no stack

78
00:02:41,120 --> 00:02:42,879
which is a curious thing but it did have

79
00:02:42,879 --> 00:02:45,120
interrupts though and

80
00:02:45,120 --> 00:02:48,000
again if i could read this um

81
00:02:48,000 --> 00:02:50,160
so the memory it was 2k words of

82
00:02:50,160 --> 00:02:53,840
erasable memory 36k words of

83
00:02:53,840 --> 00:02:55,200
fixed storage

84
00:02:55,200 --> 00:02:56,160
and

85
00:02:56,160 --> 00:02:57,200
i've showed at the bottom of the slide

86
00:02:57,200 --> 00:02:58,560
yeah the kind of breakdown between

87
00:02:58,560 --> 00:03:00,800
opcode and um

88
00:03:00,800 --> 00:03:02,400
and data

89
00:03:02,400 --> 00:03:04,560
they used one's complement which uh just

90
00:03:04,560 --> 00:03:06,879
doesn't get used anymore um in one's

91
00:03:06,879 --> 00:03:09,519
complement of representation basically

92
00:03:09,519 --> 00:03:11,519
to uh negate a number you just flip all

93
00:03:11,519 --> 00:03:13,840
the bits um unfortunately a side effect

94
00:03:13,840 --> 00:03:15,519
of that is you have two zeros because if

95
00:03:15,519 --> 00:03:16,800
you have zero you flip all the bits

96
00:03:16,800 --> 00:03:18,879
you've now got all ones that's also zero

97
00:03:18,879 --> 00:03:20,720
so in this system they had plus zero and

98
00:03:20,720 --> 00:03:23,599
minus zero as distinct things which

99
00:03:23,599 --> 00:03:26,879
brings its own complications

100
00:03:29,120 --> 00:03:30,840
i press the wrong button

101
00:03:30,840 --> 00:03:33,120
again okay so this is what it looked

102
00:03:33,120 --> 00:03:35,040
like the box on the left uh the goldish

103
00:03:35,040 --> 00:03:36,959
colored thing um is the computer the

104
00:03:36,959 --> 00:03:38,640
thing on the right is the diskey which

105
00:03:38,640 --> 00:03:39,920
is the main

106
00:03:39,920 --> 00:03:42,159
interface for the the astronauts used to

107
00:03:42,159 --> 00:03:44,720
talk to it so it's it was a sealed unit

108
00:03:44,720 --> 00:03:47,599
um milled out of beryllium apparently um

109
00:03:47,599 --> 00:03:49,360
they did originally consider making it

110
00:03:49,360 --> 00:03:52,159
user serviceable with replacement um

111
00:03:52,159 --> 00:03:54,640
uh sort of replaceable modules for

112
00:03:54,640 --> 00:03:56,799
in-flight servicing but ultimately they

113
00:03:56,799 --> 00:03:58,000
decided that making the whole thing

114
00:03:58,000 --> 00:03:59,360
sealed was actually going to be more

115
00:03:59,360 --> 00:04:01,280
reliable in the long run so totally

116
00:04:01,280 --> 00:04:04,080
sealed unit no use of serviceable parts

117
00:04:04,080 --> 00:04:06,799
um if we look inside it if you open it

118
00:04:06,799 --> 00:04:09,280
up it looks like that um the right hand

119
00:04:09,280 --> 00:04:10,959
it's basically two trays that fit back

120
00:04:10,959 --> 00:04:13,200
to back and that's very separated so the

121
00:04:13,200 --> 00:04:15,760
right hand side there is um all of the

122
00:04:15,760 --> 00:04:17,918
kind of analog circuitry so oscillators

123
00:04:17,918 --> 00:04:20,399
timers power supply alarm circuitry that

124
00:04:20,399 --> 00:04:21,440
kind of thing

125
00:04:21,440 --> 00:04:22,639
there's a slot at the bottom where

126
00:04:22,639 --> 00:04:24,400
there's a kind of like missing module

127
00:04:24,400 --> 00:04:27,199
that is where the um erasable memory or

128
00:04:27,199 --> 00:04:29,120
the ram goes um

129
00:04:29,120 --> 00:04:31,520
but it's not in this diagram and the rom

130
00:04:31,520 --> 00:04:33,520
the fixed memory is basically again you

131
00:04:33,520 --> 00:04:34,800
can't see it but that's in the top half

132
00:04:34,800 --> 00:04:37,280
on the right side so the left hand half

133
00:04:37,280 --> 00:04:40,080
of it is where all the computer logic is

134
00:04:40,080 --> 00:04:41,040
and that's

135
00:04:41,040 --> 00:04:44,160
basically a set of um modules of 24

136
00:04:44,160 --> 00:04:47,440
logic modules um all plotted in nice and

137
00:04:47,440 --> 00:04:49,440
neatly within theory each one of these

138
00:04:49,440 --> 00:04:51,520
modules is a specific aspect of the

139
00:04:51,520 --> 00:04:53,840
computer such as a register or you know

140
00:04:53,840 --> 00:04:56,720
so many bits of the alu so in theory a

141
00:04:56,720 --> 00:04:58,720
kind of nice tidy design

142
00:04:58,720 --> 00:05:00,800
um inside these modules the these

143
00:05:00,800 --> 00:05:03,039
modules are identical the 24 of them as

144
00:05:03,039 --> 00:05:04,800
i say they're all identical other than

145
00:05:04,800 --> 00:05:05,919
the wiring

146
00:05:05,919 --> 00:05:07,360
and they look like that and if you turn

147
00:05:07,360 --> 00:05:08,880
them up hard down they still look like

148
00:05:08,880 --> 00:05:10,800
that who basically have two single-sided

149
00:05:10,800 --> 00:05:13,680
circuit boards each containing um 60

150
00:05:13,680 --> 00:05:15,440
chips um

151
00:05:15,440 --> 00:05:17,360
uh giving meaning the whole computer's

152
00:05:17,360 --> 00:05:20,080
got about 3000 chips altogether

153
00:05:20,080 --> 00:05:22,080
these chips are all exactly the same

154
00:05:22,080 --> 00:05:24,800
they're all dual three input uh nor

155
00:05:24,800 --> 00:05:27,440
gates um now nor gates are universal

156
00:05:27,440 --> 00:05:29,039
logic elements you can build any digital

157
00:05:29,039 --> 00:05:31,840
logic you want if you've got no gates um

158
00:05:31,840 --> 00:05:34,000
the reason they went for a single uh

159
00:05:34,000 --> 00:05:35,759
chip is because this was made in the

160
00:05:35,759 --> 00:05:37,600
very very early days of integration

161
00:05:37,600 --> 00:05:39,199
circuits it was still even considered

162
00:05:39,199 --> 00:05:40,960
risky to be using integrated circuits at

163
00:05:40,960 --> 00:05:43,280
all so the thinking was that well if we

164
00:05:43,280 --> 00:05:45,199
only use a single type of chip the

165
00:05:45,199 --> 00:05:46,560
manufacturers have got a realistic

166
00:05:46,560 --> 00:05:48,160
chance of getting good at making that

167
00:05:48,160 --> 00:05:49,680
one chip and we should get good

168
00:05:49,680 --> 00:05:52,639
manufacturing yields so hence the whole

169
00:05:52,639 --> 00:05:54,240
thing all of the logic is made entirely

170
00:05:54,240 --> 00:05:56,000
out of the one type of chip it's only

171
00:05:56,000 --> 00:05:57,919
got six transistors in it

172
00:05:57,919 --> 00:06:00,080
um and that's what it looks like inside

173
00:06:00,080 --> 00:06:02,400
um the transistors are the small blobs

174
00:06:02,400 --> 00:06:04,000
right in the middle and the most of the

175
00:06:04,000 --> 00:06:05,600
linear structures around it are the all

176
00:06:05,600 --> 00:06:06,720
the resistors

177
00:06:06,720 --> 00:06:09,199
so it was good for yield um good for

178
00:06:09,199 --> 00:06:11,360
manufacturing reliability but it doesn't

179
00:06:11,360 --> 00:06:12,960
actually need for a very efficient

180
00:06:12,960 --> 00:06:14,400
system although you can build anything

181
00:06:14,400 --> 00:06:15,600
out of nor gates it's not a very

182
00:06:15,600 --> 00:06:17,360
efficient way of doing it

183
00:06:17,360 --> 00:06:19,039
if you check the schematics it turns out

184
00:06:19,039 --> 00:06:20,800
that about a quarter of all of the gates

185
00:06:20,800 --> 00:06:22,960
were just used as inverters so having

186
00:06:22,960 --> 00:06:24,800
three inputs when you need one is a huge

187
00:06:24,800 --> 00:06:26,479
waste um

188
00:06:26,479 --> 00:06:28,960
if they made a chip as well which

189
00:06:28,960 --> 00:06:31,280
was just inverters then with the same

190
00:06:31,280 --> 00:06:32,960
kind of level of integration they could

191
00:06:32,960 --> 00:06:35,360
have fit four per chip instead of two um

192
00:06:35,360 --> 00:06:36,720
and they could have basically got away

193
00:06:36,720 --> 00:06:38,000
with 21

194
00:06:38,000 --> 00:06:40,319
logic modules instead of 24 which would

195
00:06:40,319 --> 00:06:41,840
have been a significant saving

196
00:06:41,840 --> 00:06:43,280
especially when getting the weight down

197
00:06:43,280 --> 00:06:45,360
was really important but you know these

198
00:06:45,360 --> 00:06:46,800
other trade-offs and they went for we'll

199
00:06:46,800 --> 00:06:49,360
go for one thing to make it reliable

200
00:06:49,360 --> 00:06:50,479
um

201
00:06:50,479 --> 00:06:53,039
so the i think i skipped no no that's

202
00:06:53,039 --> 00:06:53,919
okay

203
00:06:53,919 --> 00:06:54,880
um

204
00:06:54,880 --> 00:06:57,120
so this is the disc key as i say this is

205
00:06:57,120 --> 00:06:58,639
the main way the

206
00:06:58,639 --> 00:07:01,120
the astronauts operated the computer

207
00:07:01,120 --> 00:07:03,520
essentially it's kind of a glorified

208
00:07:03,520 --> 00:07:06,479
numeric keypad um in the bottom half top

209
00:07:06,479 --> 00:07:08,160
left is a bunch of various alarms that

210
00:07:08,160 --> 00:07:10,080
the computer would trigger for various

211
00:07:10,080 --> 00:07:11,840
things you need to worry about and the

212
00:07:11,840 --> 00:07:13,520
right hand side the main piece of

213
00:07:13,520 --> 00:07:15,440
information is there are basically three

214
00:07:15,440 --> 00:07:17,759
five-digit numbers that's essentially

215
00:07:17,759 --> 00:07:19,680
your monitor that's the information that

216
00:07:19,680 --> 00:07:21,199
the computer could give you just three

217
00:07:21,199 --> 00:07:22,720
five-digit numbers

218
00:07:22,720 --> 00:07:23,919
um

219
00:07:23,919 --> 00:07:25,759
uh so a few curious things about this

220
00:07:25,759 --> 00:07:27,039
well first of all as i say it's

221
00:07:27,039 --> 00:07:29,280
essentially a glorified numeric keypad

222
00:07:29,280 --> 00:07:31,280
but on the left hand side i'm not sure

223
00:07:31,280 --> 00:07:33,199
how visible is the two keys on the left

224
00:07:33,199 --> 00:07:35,520
are curiously named verb and noun which

225
00:07:35,520 --> 00:07:37,440
is kind of more more in place for a text

226
00:07:37,440 --> 00:07:39,280
adventure game um

227
00:07:39,280 --> 00:07:40,479
but the

228
00:07:40,479 --> 00:07:41,840
but it's a very

229
00:07:41,840 --> 00:07:43,759
clever idea

230
00:07:43,759 --> 00:07:45,440
this is again this was developed when

231
00:07:45,440 --> 00:07:46,720
people were still really figuring out

232
00:07:46,720 --> 00:07:49,039
how how should people operate a computer

233
00:07:49,039 --> 00:07:50,479
and in this particular case they needed

234
00:07:50,479 --> 00:07:52,639
something astronauts wearing spacesuits

235
00:07:52,639 --> 00:07:54,639
and gloves with very you know had to be

236
00:07:54,639 --> 00:07:56,560
able to operate so big chunky buttons

237
00:07:56,560 --> 00:07:58,479
and a simple interface

238
00:07:58,479 --> 00:08:00,160
so the idea was that the verb noun

239
00:08:00,160 --> 00:08:01,919
interface is that the general way the

240
00:08:01,919 --> 00:08:03,120
astronauts would certainly strip the

241
00:08:03,120 --> 00:08:04,560
computer what they wanted it to do is

242
00:08:04,560 --> 00:08:06,160
they would press verb type in a number

243
00:08:06,160 --> 00:08:08,319
that represented what they wanted to do

244
00:08:08,319 --> 00:08:09,599
and then noun and another number

245
00:08:09,599 --> 00:08:11,120
representing what they wanted it to do

246
00:08:11,120 --> 00:08:13,520
it too so for example verb 6 means

247
00:08:13,520 --> 00:08:16,479
display in decimal and noun 43

248
00:08:16,479 --> 00:08:19,199
is latitude longitude altitude so you

249
00:08:19,199 --> 00:08:23,039
type verb 6 noun 4 3 enter and on the

250
00:08:23,039 --> 00:08:24,479
three displays you get your latitude

251
00:08:24,479 --> 00:08:26,720
longitude and altitude in decimal

252
00:08:26,720 --> 00:08:28,319
and they have cheat sheets you can see

253
00:08:28,319 --> 00:08:30,639
one below on the right um a cheat sheet

254
00:08:30,639 --> 00:08:31,919
so that you have to remember what all

255
00:08:31,919 --> 00:08:33,279
these numbers are

256
00:08:33,279 --> 00:08:36,080
um another curious thing is the um the

257
00:08:36,080 --> 00:08:37,839
display it doesn't have decimal points

258
00:08:37,839 --> 00:08:39,360
on it you kind of assume they probably

259
00:08:39,360 --> 00:08:41,200
are but there aren't the decimal points

260
00:08:41,200 --> 00:08:42,880
are implied and again this is on the

261
00:08:42,880 --> 00:08:46,000
cheat sheet if you're um looking at um

262
00:08:46,000 --> 00:08:47,120
if you usually if you're looking at

263
00:08:47,120 --> 00:08:48,640
something that's in degrees then it's in

264
00:08:48,640 --> 00:08:50,399
hundredths of a degree uh if it's a

265
00:08:50,399 --> 00:08:52,640
distance it's in tenths of a mile and

266
00:08:52,640 --> 00:08:54,160
you either remember this or look in the

267
00:08:54,160 --> 00:08:55,360
cheat sheet

268
00:08:55,360 --> 00:08:56,160
um

269
00:08:56,160 --> 00:08:57,680
this this whole idea of the disk

270
00:08:57,680 --> 00:08:59,279
incidentally was not something that was

271
00:08:59,279 --> 00:09:01,680
kind of carefully planned it originated

272
00:09:01,680 --> 00:09:03,279
from a lab demo people working on the

273
00:09:03,279 --> 00:09:04,640
computer needed something to show

274
00:09:04,640 --> 00:09:06,880
visitors um so they came up with this

275
00:09:06,880 --> 00:09:08,959
idea well okay we'll use this verb noun

276
00:09:08,959 --> 00:09:10,399
thing we've just dreamt of and

277
00:09:10,399 --> 00:09:11,360
apparently there's quite a lot of

278
00:09:11,360 --> 00:09:14,080
opposition to it um it got described as

279
00:09:14,080 --> 00:09:16,640
not scientific not military

280
00:09:16,640 --> 00:09:18,800
not serious not dignified and my

281
00:09:18,800 --> 00:09:20,720
favorite one um astronauts won't bear to

282
00:09:20,720 --> 00:09:23,680
understand it which

283
00:09:23,680 --> 00:09:24,720
i think is

284
00:09:24,720 --> 00:09:26,000
really

285
00:09:26,000 --> 00:09:27,200
um

286
00:09:27,200 --> 00:09:29,839
but yeah they did um and the final thing

287
00:09:29,839 --> 00:09:31,440
is also they're not leds it's an

288
00:09:31,440 --> 00:09:33,680
electroluminescent panel um

289
00:09:33,680 --> 00:09:35,760
a high voltage electroluminescent with a

290
00:09:35,760 --> 00:09:38,320
ton of led sorry a ton of um relays i

291
00:09:38,320 --> 00:09:40,399
think it's 130 relays behind them and it

292
00:09:40,399 --> 00:09:41,839
had a relatively low low update rate

293
00:09:41,839 --> 00:09:43,120
because the computer could only

294
00:09:43,120 --> 00:09:45,120
communicate essentially change one set

295
00:09:45,120 --> 00:09:47,760
of relays at a time so it would be i

296
00:09:47,760 --> 00:09:49,120
don't have a video unfortunately but it

297
00:09:49,120 --> 00:09:50,800
would take you know if it was redrawing

298
00:09:50,800 --> 00:09:51,839
the whole display even though there's

299
00:09:51,839 --> 00:09:53,839
not much in it it would you could see it

300
00:09:53,839 --> 00:09:57,040
very clearly refreshing

301
00:09:57,519 --> 00:09:58,320
okay

302
00:09:58,320 --> 00:10:00,720
very quickly about memory um

303
00:10:00,720 --> 00:10:02,720
so uh

304
00:10:02,720 --> 00:10:04,480
so yeah so erasable used magnetic core

305
00:10:04,480 --> 00:10:05,839
memory which was fairly standard

306
00:10:05,839 --> 00:10:08,079
technology for the time uh a grid of

307
00:10:08,079 --> 00:10:10,320
ferrite uh which got magnetized one way

308
00:10:10,320 --> 00:10:11,839
or the other to represent a one or a

309
00:10:11,839 --> 00:10:14,720
zero um this isn't actually out of the

310
00:10:14,720 --> 00:10:17,200
saturn sorry out of the agc because i

311
00:10:17,200 --> 00:10:20,560
couldn't find any good agc pictures um

312
00:10:20,560 --> 00:10:23,120
for the um for the erasable memory uh as

313
00:10:23,120 --> 00:10:24,560
i said the slot that it fits in you'll

314
00:10:24,560 --> 00:10:26,079
notice it was a kind of long rectangle

315
00:10:26,079 --> 00:10:27,680
so the real thing was kind of all folded

316
00:10:27,680 --> 00:10:29,839
up rather than sort of flat like that

317
00:10:29,839 --> 00:10:31,680
and and then potted and they just don't

318
00:10:31,680 --> 00:10:33,120
seem to be many good pictures but that's

319
00:10:33,120 --> 00:10:35,120
out of the saturn five for yeah for good

320
00:10:35,120 --> 00:10:38,640
measure um so that was erasable um as i

321
00:10:38,640 --> 00:10:40,240
say standard technology for the time the

322
00:10:40,240 --> 00:10:41,839
curious thing about erasable sorry

323
00:10:41,839 --> 00:10:44,240
magnetic core memory is it's um it's

324
00:10:44,240 --> 00:10:45,839
non-volatile which is nice you can turn

325
00:10:45,839 --> 00:10:47,440
it off and on and it still remembers the

326
00:10:47,440 --> 00:10:49,360
same things um but reading it is

327
00:10:49,360 --> 00:10:51,120
destructive so if you read it you've

328
00:10:51,120 --> 00:10:53,279
just set that location to zero so if you

329
00:10:53,279 --> 00:10:54,399
don't want it to be zero you need to

330
00:10:54,399 --> 00:10:55,760
write it back again

331
00:10:55,760 --> 00:10:56,800
um

332
00:10:56,800 --> 00:10:59,120
just a quirk of the way the technology

333
00:10:59,120 --> 00:11:01,519
worked so for the fixed memory uh they

334
00:11:01,519 --> 00:11:02,560
used something different it looks

335
00:11:02,560 --> 00:11:03,839
superficially similar and this is

336
00:11:03,839 --> 00:11:06,079
actually from the agc this is a core

337
00:11:06,079 --> 00:11:07,360
rope module

338
00:11:07,360 --> 00:11:08,240
um

339
00:11:08,240 --> 00:11:09,920
it's um

340
00:11:09,920 --> 00:11:11,279
it looks superficially similar but it's

341
00:11:11,279 --> 00:11:12,640
not actually arranged in the grid it

342
00:11:12,640 --> 00:11:14,640
kind of looks like it there

343
00:11:14,640 --> 00:11:16,560
if i skip to the next slide this is a

344
00:11:16,560 --> 00:11:19,200
close-up of it what the way call rope

345
00:11:19,200 --> 00:11:21,440
worked is essentially um

346
00:11:21,440 --> 00:11:23,600
the the data isn't stored in the the

347
00:11:23,600 --> 00:11:25,200
ferrite rings the ferrite rings are used

348
00:11:25,200 --> 00:11:26,839
as switching calls essentially

349
00:11:26,839 --> 00:11:28,880
transformers and the data is stored in

350
00:11:28,880 --> 00:11:30,160
the wiring because the whole point is

351
00:11:30,160 --> 00:11:32,560
this is supposed to be fixed memory so

352
00:11:32,560 --> 00:11:34,800
the the wires would be woven through

353
00:11:34,800 --> 00:11:36,959
these calls and for each bit position

354
00:11:36,959 --> 00:11:38,560
each addressable bit it would go through

355
00:11:38,560 --> 00:11:40,160
one core if it was a one or through a

356
00:11:40,160 --> 00:11:41,760
different core if it was a zero and you

357
00:11:41,760 --> 00:11:43,760
can kind of see going from left to right

358
00:11:43,760 --> 00:11:45,760
it kind of snakes around left to right

359
00:11:45,760 --> 00:11:47,200
at the top and then around and back

360
00:11:47,200 --> 00:11:49,120
across to the left you see the two core

361
00:11:49,120 --> 00:11:50,079
rows in the middle don't actually have

362
00:11:50,079 --> 00:11:51,680
any wires between them so this

363
00:11:51,680 --> 00:11:53,279
conceptually is just a long string it

364
00:11:53,279 --> 00:11:55,519
just got folded up to kind of fit inside

365
00:11:55,519 --> 00:11:57,760
uh inside the the package

366
00:11:57,760 --> 00:12:00,320
and these were hand woven um this is um

367
00:12:00,320 --> 00:12:02,639
some lady at uh raytheon who um who

368
00:12:02,639 --> 00:12:04,880
manufactured these um

369
00:12:04,880 --> 00:12:08,560
wiring by hand um the the core memory so

370
00:12:08,560 --> 00:12:10,160
the idea is this machine would there was

371
00:12:10,160 --> 00:12:12,079
a little kind of guide a little pointer

372
00:12:12,079 --> 00:12:12,959
um

373
00:12:12,959 --> 00:12:15,120
the machine would kind of

374
00:12:15,120 --> 00:12:16,800
she would thread the wire through and

375
00:12:16,800 --> 00:12:17,760
then the machine would kind of move on

376
00:12:17,760 --> 00:12:19,920
to the next location so she's got a

377
00:12:19,920 --> 00:12:21,680
pointer saying thread it here now thread

378
00:12:21,680 --> 00:12:23,360
it here now thread it here because of

379
00:12:23,360 --> 00:12:24,720
course you can't really afford any

380
00:12:24,720 --> 00:12:26,800
mistakes and however careful you are

381
00:12:26,800 --> 00:12:28,240
you're going to if you do it entirely

382
00:12:28,240 --> 00:12:29,519
manually you're going to

383
00:12:29,519 --> 00:12:31,279
make mistakes

384
00:12:31,279 --> 00:12:32,959
okay um

385
00:12:32,959 --> 00:12:33,760
so

386
00:12:33,760 --> 00:12:34,880
unfortunately that's it for the nice

387
00:12:34,880 --> 00:12:36,639
pictures because i now get into the

388
00:12:36,639 --> 00:12:38,480
computer itself and it's kind of hard to

389
00:12:38,480 --> 00:12:41,680
find photos of how a computer works um

390
00:12:41,680 --> 00:12:44,800
so the memory um as i say was um 12-bit

391
00:12:44,800 --> 00:12:48,639
addressing um but they had 38k of memory

392
00:12:48,639 --> 00:12:50,399
so that doesn't fit so there was a

393
00:12:50,399 --> 00:12:52,560
banking system and essentially the first

394
00:12:52,560 --> 00:12:54,720
1k addressable memory was all erasable

395
00:12:54,720 --> 00:12:57,120
the remaining 3k was fixed but the top

396
00:12:57,120 --> 00:12:59,519
of erasable and the bottom of um fixed

397
00:12:59,519 --> 00:13:00,959
uh used the banking system and there

398
00:13:00,959 --> 00:13:03,600
were banking registers um which is

399
00:13:03,600 --> 00:13:05,519
on the next slide which basically show

400
00:13:05,519 --> 00:13:07,760
where in the memory map um

401
00:13:07,760 --> 00:13:10,399
the the how the um the different banks

402
00:13:10,399 --> 00:13:12,560
of erasable or fixed memory are slotted

403
00:13:12,560 --> 00:13:14,480
in so essentially most of it is always

404
00:13:14,480 --> 00:13:15,600
in the same place but then there's a

405
00:13:15,600 --> 00:13:18,160
whole load of um banks that can be

406
00:13:18,160 --> 00:13:20,160
selected in in particular there's a lot

407
00:13:20,160 --> 00:13:22,079
for the fixed um but remember this

408
00:13:22,079 --> 00:13:23,680
couldn't load any software all of the

409
00:13:23,680 --> 00:13:25,519
software for the entire mission um had

410
00:13:25,519 --> 00:13:26,480
to be

411
00:13:26,480 --> 00:13:28,560
built into the machine so essentially

412
00:13:28,560 --> 00:13:30,720
you know loading new software was to a

413
00:13:30,720 --> 00:13:32,839
certain extent switching

414
00:13:32,839 --> 00:13:35,839
banks uh okay

415
00:13:35,839 --> 00:13:38,639
so uh the bottom memory of the registers

416
00:13:38,639 --> 00:13:40,480
it's all memory mapped

417
00:13:40,480 --> 00:13:41,199
so

418
00:13:41,199 --> 00:13:43,360
a the accumulator or any mathematics

419
00:13:43,360 --> 00:13:44,639
goes through the accumulator like with

420
00:13:44,639 --> 00:13:47,519
most very early machines uh then l which

421
00:13:47,519 --> 00:13:49,440
is the lower accumulator which is

422
00:13:49,440 --> 00:13:50,480
essentially an extension to the

423
00:13:50,480 --> 00:13:53,519
accumulator for um longer operations you

424
00:13:53,519 --> 00:13:56,000
then have q return address register um

425
00:13:56,000 --> 00:13:59,120
there was no stack so um if you branched

426
00:13:59,120 --> 00:14:01,040
somewhere then the return address would

427
00:14:01,040 --> 00:14:03,440
go into queue if you wanted to so if you

428
00:14:03,440 --> 00:14:04,959
jump to a subroutine return address with

429
00:14:04,959 --> 00:14:06,800
going q if that subroutine wants to go

430
00:14:06,800 --> 00:14:09,360
to another subroutine okay you now have

431
00:14:09,360 --> 00:14:10,880
the responsibility as a programmer to

432
00:14:10,880 --> 00:14:12,160
store the current value of queue

433
00:14:12,160 --> 00:14:14,079
somewhere so that when you jump to the

434
00:14:14,079 --> 00:14:16,560
subroutine and it returns to you you can

435
00:14:16,560 --> 00:14:18,480
you can get back so there's no stack you

436
00:14:18,480 --> 00:14:19,839
have to as a programmer you'd have to

437
00:14:19,839 --> 00:14:21,279
manage all of that manually and

438
00:14:21,279 --> 00:14:22,800
similarly parameters they can't get

439
00:14:22,800 --> 00:14:24,320
pushed onto a stack they have to be in

440
00:14:24,320 --> 00:14:26,480
you know well-known locations

441
00:14:26,480 --> 00:14:26,850
um

442
00:14:26,850 --> 00:14:28,160
[Music]

443
00:14:28,160 --> 00:14:29,760
so

444
00:14:29,760 --> 00:14:31,760
yeah so most of the locations in

445
00:14:31,760 --> 00:14:33,040
erasable memory were kind of

446
00:14:33,040 --> 00:14:34,959
pre-allocated uh so essentially

447
00:14:34,959 --> 00:14:36,480
everything was global um there's no

448
00:14:36,480 --> 00:14:38,639
memory protection or anything um and

449
00:14:38,639 --> 00:14:40,880
memory locations would be reused uh but

450
00:14:40,880 --> 00:14:42,320
they'd be reused between programs that

451
00:14:42,320 --> 00:14:43,680
wouldn't run at the same time so for

452
00:14:43,680 --> 00:14:44,880
example code that's running during

453
00:14:44,880 --> 00:14:46,480
re-entry into the earth's atmosphere has

454
00:14:46,480 --> 00:14:48,000
got nothing to do with orbiting the moon

455
00:14:48,000 --> 00:14:50,000
so programs for those different phases

456
00:14:50,000 --> 00:14:52,639
can reuse the same memory locations

457
00:14:52,639 --> 00:14:53,680
um

458
00:14:53,680 --> 00:14:56,160
so i'll skip the next few the bottom of

459
00:14:56,160 --> 00:14:58,320
the slide this four things called the

460
00:14:58,320 --> 00:15:00,079
edit registers these are interesting

461
00:15:00,079 --> 00:15:01,519
again these are just memory locations

462
00:15:01,519 --> 00:15:03,760
really um the the instruction set

463
00:15:03,760 --> 00:15:07,600
doesn't have um any bit shift operators

464
00:15:07,600 --> 00:15:09,279
but it does have these edit operation

465
00:15:09,279 --> 00:15:11,519
locations um if you write a value to one

466
00:15:11,519 --> 00:15:13,199
of those locations and then read it back

467
00:15:13,199 --> 00:15:15,600
again it's been bit shifted or cyclic

468
00:15:15,600 --> 00:15:17,839
shifted so there you have although you

469
00:15:17,839 --> 00:15:20,399
don't have an op code for uh bit shifts

470
00:15:20,399 --> 00:15:22,240
you you can achieve them it does have

471
00:15:22,240 --> 00:15:23,920
the curious side effect that you can't

472
00:15:23,920 --> 00:15:25,600
use them if you're only interrupt

473
00:15:25,600 --> 00:15:27,040
because interrupts need to pay to

474
00:15:27,040 --> 00:15:28,560
restore the state and you can't restore

475
00:15:28,560 --> 00:15:30,079
the state of those registers because if

476
00:15:30,079 --> 00:15:31,360
you read it and write it back you've

477
00:15:31,360 --> 00:15:33,839
changed it

478
00:15:34,079 --> 00:15:36,480
next in memory is times encounters these

479
00:15:36,480 --> 00:15:38,079
kind of store the critical state of the

480
00:15:38,079 --> 00:15:39,199
system

481
00:15:39,199 --> 00:15:41,920
so first up uh timers um the the first

482
00:15:41,920 --> 00:15:43,279
one timer one and two is essentially

483
00:15:43,279 --> 00:15:45,120
just literally a mission timer um i

484
00:15:45,120 --> 00:15:46,079
think it would run for about a month

485
00:15:46,079 --> 00:15:47,920
before it overran so a two week mission

486
00:15:47,920 --> 00:15:50,639
to the moon was fine um timer three was

487
00:15:50,639 --> 00:15:52,800
for things called weightless tasks which

488
00:15:52,800 --> 00:15:55,360
were very short but time critical tasks

489
00:15:55,360 --> 00:15:57,440
which will be scheduled to happen at a

490
00:15:57,440 --> 00:16:00,320
specific time interrupt driven um timer

491
00:16:00,320 --> 00:16:02,160
four was a general um kind of

492
00:16:02,160 --> 00:16:04,800
interrupt-driven household um household

493
00:16:04,800 --> 00:16:06,959
sorry housekeeping

494
00:16:06,959 --> 00:16:08,639
type code and five and six were the

495
00:16:08,639 --> 00:16:10,399
digital autopilot it was a fly-by-wire

496
00:16:10,399 --> 00:16:13,920
system um and um an interrupt kind of

497
00:16:13,920 --> 00:16:15,360
made sure that this account was running

498
00:16:15,360 --> 00:16:17,680
smoothly so essentially timer five was

499
00:16:17,680 --> 00:16:19,519
used to make sure the digital order for

500
00:16:19,519 --> 00:16:20,880
pilot code got run every 100

501
00:16:20,880 --> 00:16:22,399
milliseconds so 10

502
00:16:22,399 --> 00:16:24,959
hertz some update rate and timer 6 had

503
00:16:24,959 --> 00:16:27,120
the rather important task of timing when

504
00:16:27,120 --> 00:16:29,279
to turn off reaction control jets so

505
00:16:29,279 --> 00:16:31,279
every time the autopilot did a pass it

506
00:16:31,279 --> 00:16:32,880
would decide which jets if any it needed

507
00:16:32,880 --> 00:16:36,079
to turn on to adjust orientation um and

508
00:16:36,079 --> 00:16:38,160
it would then set timed interrupts based

509
00:16:38,160 --> 00:16:40,720
on counter six as to when these jets

510
00:16:40,720 --> 00:16:42,720
should be turned off so every time timer

511
00:16:42,720 --> 00:16:44,560
six expired it would then call an

512
00:16:44,560 --> 00:16:45,759
interrupt service routine which will

513
00:16:45,759 --> 00:16:47,680
turn off that axis worth of jets and

514
00:16:47,680 --> 00:16:49,920
then wait for the next one so a lot of

515
00:16:49,920 --> 00:16:51,440
it ran on interrupts which is super

516
00:16:51,440 --> 00:16:53,519
critical the next slide i will skip over

517
00:16:53,519 --> 00:16:54,720
that's how all of those things fit

518
00:16:54,720 --> 00:16:56,399
together but i just absolutely don't

519
00:16:56,399 --> 00:16:57,839
have time to go through them now the

520
00:16:57,839 --> 00:16:59,600
slides are available so some of this

521
00:16:59,600 --> 00:17:00,800
stuff is the idea is if you're

522
00:17:00,800 --> 00:17:03,680
interested you can look at it later

523
00:17:03,680 --> 00:17:05,679
instruction set as i say it's basically

524
00:17:05,679 --> 00:17:08,160
you only had three bits

525
00:17:08,160 --> 00:17:09,039
um

526
00:17:09,039 --> 00:17:10,480
so um you've already got eight

527
00:17:10,480 --> 00:17:13,919
instructions which really isn't many um

528
00:17:13,919 --> 00:17:16,640
so um yeah i'm getting kind of time so

529
00:17:16,640 --> 00:17:17,760
i'll skip through quickly but yeah you

530
00:17:17,760 --> 00:17:19,199
only had eight basic instructions it's

531
00:17:19,199 --> 00:17:21,119
true and complete but it's you know not

532
00:17:21,119 --> 00:17:22,559
much to work with

533
00:17:22,559 --> 00:17:23,839
um

534
00:17:23,839 --> 00:17:26,720
so uh one in one particular transfer to

535
00:17:26,720 --> 00:17:28,319
storage which is save the accumulator to

536
00:17:28,319 --> 00:17:30,799
a memory location simple enough

537
00:17:30,799 --> 00:17:33,039
but also if the accumulator has

538
00:17:33,039 --> 00:17:35,600
overflowed skip the next instruction

539
00:17:35,600 --> 00:17:38,160
um okay um

540
00:17:38,160 --> 00:17:39,760
whether whether the accumulator is

541
00:17:39,760 --> 00:17:41,600
overflowed is kind of important because

542
00:17:41,600 --> 00:17:43,120
there's no way of storing the overflow

543
00:17:43,120 --> 00:17:46,000
state so as with the edit registers if

544
00:17:46,000 --> 00:17:48,000
you've got an overflow in a you can't

545
00:17:48,000 --> 00:17:49,760
have an interrupt so if there's an

546
00:17:49,760 --> 00:17:52,720
overflow in a interrupts are disabled um

547
00:17:52,720 --> 00:17:54,799
given how much runs on interrupts that's

548
00:17:54,799 --> 00:17:56,080
not including turning off reaction

549
00:17:56,080 --> 00:17:58,960
control jets that's not good so you so

550
00:17:58,960 --> 00:18:01,280
the programmer being responsible for and

551
00:18:01,280 --> 00:18:04,000
carefully handling um overflows was

552
00:18:04,000 --> 00:18:06,320
super important it's very unusual that

553
00:18:06,320 --> 00:18:07,760
to say that an overflow causes

554
00:18:07,760 --> 00:18:09,039
interrupts to be disabled but that's how

555
00:18:09,039 --> 00:18:11,039
it worked so this was one of the main

556
00:18:11,039 --> 00:18:12,640
ways of handling it is this instruction

557
00:18:12,640 --> 00:18:14,400
it clears the overflow and it you've got

558
00:18:14,400 --> 00:18:15,600
a branch depending on you couldn't

559
00:18:15,600 --> 00:18:17,280
directly test for an overflow this

560
00:18:17,280 --> 00:18:18,880
instruction was essentially the simplest

561
00:18:18,880 --> 00:18:20,400
way of doing it because you you've got a

562
00:18:20,400 --> 00:18:22,799
conditional branch essentially um the

563
00:18:22,799 --> 00:18:24,640
next interesting one this is your kind

564
00:18:24,640 --> 00:18:26,559
of comparison instruction uh which is

565
00:18:26,559 --> 00:18:28,960
actually a four-way comparison um it'll

566
00:18:28,960 --> 00:18:31,760
jump it'll well it skips one zero one

567
00:18:31,760 --> 00:18:33,679
two or three instructions depending on

568
00:18:33,679 --> 00:18:36,000
the whether the accumulator um sorry

569
00:18:36,000 --> 00:18:38,080
whether the value at a particular memory

570
00:18:38,080 --> 00:18:39,919
location is uh

571
00:18:39,919 --> 00:18:42,480
greater than zero

572
00:18:42,480 --> 00:18:44,960
less than zero or equal to plus zero or

573
00:18:44,960 --> 00:18:46,880
equal to minus zero so again you have

574
00:18:46,880 --> 00:18:49,360
the two distinct zeros in there

575
00:18:49,360 --> 00:18:51,840
um now as i say eight instructions it's

576
00:18:51,840 --> 00:18:53,760
true and complete but it's not very easy

577
00:18:53,760 --> 00:18:56,160
to work with it's quite clunky so they

578
00:18:56,160 --> 00:18:58,160
they've squeezed a lot more instructions

579
00:18:58,160 --> 00:19:00,160
in there

580
00:19:00,160 --> 00:19:01,760
so the first thing they noticed is oh

581
00:19:01,760 --> 00:19:03,360
okay well if you've got for example

582
00:19:03,360 --> 00:19:04,480
increment

583
00:19:04,480 --> 00:19:06,320
value at a memory location that only

584
00:19:06,320 --> 00:19:08,480
makes sense to do that on ram erasable

585
00:19:08,480 --> 00:19:10,640
storage erasable storage is always 10

586
00:19:10,640 --> 00:19:12,960
bit so the upper two bits of the address

587
00:19:12,960 --> 00:19:14,640
you don't need those for those

588
00:19:14,640 --> 00:19:16,880
instructions so you can re reuse those

589
00:19:16,880 --> 00:19:18,320
op codes essentially for new

590
00:19:18,320 --> 00:19:20,799
instructions so they introduced um a

591
00:19:20,799 --> 00:19:23,440
bunch of new instructions um the most

592
00:19:23,440 --> 00:19:26,720
important one there is um index which um

593
00:19:26,720 --> 00:19:29,360
it's so index k it takes the value at

594
00:19:29,360 --> 00:19:30,880
memory location k

595
00:19:30,880 --> 00:19:33,679
and then it adds that value to the op

596
00:19:33,679 --> 00:19:35,919
code sorry adds that value to the next

597
00:19:35,919 --> 00:19:37,919
instruction word

598
00:19:37,919 --> 00:19:39,919
which has the effect that it's provided

599
00:19:39,919 --> 00:19:42,480
you a way of doing indexed addressing

600
00:19:42,480 --> 00:19:44,000
which so again there isn't an indexed

601
00:19:44,000 --> 00:19:45,919
addressing mode as such but there is

602
00:19:45,919 --> 00:19:47,760
this kind of slightly

603
00:19:47,760 --> 00:19:51,200
hacky work around which achieves that

604
00:19:51,200 --> 00:19:52,960
and then also it doesn't make sense to

605
00:19:52,960 --> 00:19:55,440
do a branch to the banking registers um

606
00:19:55,440 --> 00:19:57,280
which i i skipped over those the bank

607
00:19:57,280 --> 00:19:58,799
control registers were also in the

608
00:19:58,799 --> 00:20:01,440
initial uh very low memory address so it

609
00:20:01,440 --> 00:20:03,679
makes no sense to branch to the memory

610
00:20:03,679 --> 00:20:05,440
banking registers so again those bit

611
00:20:05,440 --> 00:20:07,919
patterns got interpreted as new um op

612
00:20:07,919 --> 00:20:08,880
codes

613
00:20:08,880 --> 00:20:11,200
so the main ones on there are basically

614
00:20:11,200 --> 00:20:12,880
enabling and disabling interrupts and

615
00:20:12,880 --> 00:20:14,320
returning for interrupts but there's

616
00:20:14,320 --> 00:20:17,039
also extend extra code

617
00:20:17,039 --> 00:20:19,360
okay what's extra code well that says

618
00:20:19,360 --> 00:20:21,280
interpret the next instruction word

619
00:20:21,280 --> 00:20:22,880
according to a completely different set

620
00:20:22,880 --> 00:20:25,120
of decoding rules so you've just doubled

621
00:20:25,120 --> 00:20:26,880
the size of your instruction set

622
00:20:26,880 --> 00:20:28,480
um and they did similar tricks with that

623
00:20:28,480 --> 00:20:29,840
to again rather than just getting extra

624
00:20:29,840 --> 00:20:31,280
eight they've got a whole bunch more so

625
00:20:31,280 --> 00:20:32,799
in the end they pack basically 40

626
00:20:32,799 --> 00:20:35,120
instructions into three bits kind of

627
00:20:35,120 --> 00:20:36,159
um

628
00:20:36,159 --> 00:20:37,679
so yeah

629
00:20:37,679 --> 00:20:39,760
but it was still kind of um

630
00:20:39,760 --> 00:20:41,760
still quite primitive um the with the

631
00:20:41,760 --> 00:20:43,760
new instructions still the the most

632
00:20:43,760 --> 00:20:45,600
advanced mathematical operation you had

633
00:20:45,600 --> 00:20:47,840
was single precision multiply and divide

634
00:20:47,840 --> 00:20:49,600
and it's all integer by the way i forgot

635
00:20:49,600 --> 00:20:50,880
to mention there's no none of that

636
00:20:50,880 --> 00:20:52,400
floating point stuff everything's

637
00:20:52,400 --> 00:20:54,400
integer and um and it's up to the

638
00:20:54,400 --> 00:20:56,080
programmer to scale things and handle

639
00:20:56,080 --> 00:20:58,080
overflows so

640
00:20:58,080 --> 00:20:59,280
even with this kind of extended

641
00:20:59,280 --> 00:21:01,360
instruction set the most

642
00:21:01,360 --> 00:21:02,720
the strongest the most powerful

643
00:21:02,720 --> 00:21:04,880
mathematics you can do is multiply and

644
00:21:04,880 --> 00:21:06,480
integer divide multiple integer

645
00:21:06,480 --> 00:21:07,679
multiplied

646
00:21:07,679 --> 00:21:10,240
into divide so what they then did and

647
00:21:10,240 --> 00:21:13,200
this is um i think the real nice thing

648
00:21:13,200 --> 00:21:15,280
um is

649
00:21:15,280 --> 00:21:16,400
hang on have i got these in the wrong

650
00:21:16,400 --> 00:21:18,720
order

651
00:21:19,039 --> 00:21:21,280
uh

652
00:21:23,039 --> 00:21:26,000
right sorry yep slight digression um

653
00:21:26,000 --> 00:21:29,520
yes what they then did is later

654
00:21:29,520 --> 00:21:31,280
so having talked about the interrupt

655
00:21:31,280 --> 00:21:32,240
driven stuff not everything was

656
00:21:32,240 --> 00:21:33,760
interrupt driven you've got a whole

657
00:21:33,760 --> 00:21:35,840
bunch of things

658
00:21:35,840 --> 00:21:37,200
um where you've got longer running jobs

659
00:21:37,200 --> 00:21:39,120
so essentially like navigation software

660
00:21:39,120 --> 00:21:40,000
you're trying to do a navigation

661
00:21:40,000 --> 00:21:42,080
solution um it's not interrupt driven it

662
00:21:42,080 --> 00:21:44,480
doesn't need to be super um responsive

663
00:21:44,480 --> 00:21:45,919
um so essentially you need a way of

664
00:21:45,919 --> 00:21:47,520
running running jobs that are

665
00:21:47,520 --> 00:21:49,520
long-running um and they just you know

666
00:21:49,520 --> 00:21:50,880
with different priorities and they just

667
00:21:50,880 --> 00:21:52,559
kind of complete whenever they complete

668
00:21:52,559 --> 00:21:54,960
so they did implement um a

669
00:21:54,960 --> 00:21:56,559
multi-tasking system but it was a

670
00:21:56,559 --> 00:21:58,559
cooperative multitasking system every

671
00:21:58,559 --> 00:22:00,240
job had to cooperate with every other

672
00:22:00,240 --> 00:22:01,840
job it only works if you can totally

673
00:22:01,840 --> 00:22:04,080
trust all of the software um so rather

674
00:22:04,080 --> 00:22:05,440
than being an operating system that

675
00:22:05,440 --> 00:22:08,559
would basically forcibly switch contexts

676
00:22:08,559 --> 00:22:10,799
um instead what happened each job every

677
00:22:10,799 --> 00:22:12,640
20 milliseconds we're supposed to check

678
00:22:12,640 --> 00:22:14,000
if there is a higher priority job

679
00:22:14,000 --> 00:22:16,159
waiting and if there is voluntarily hand

680
00:22:16,159 --> 00:22:18,080
over control um

681
00:22:18,080 --> 00:22:19,840
and and they and

682
00:22:19,840 --> 00:22:20,960
basically

683
00:22:20,960 --> 00:22:22,799
if they don't then the system falls

684
00:22:22,799 --> 00:22:26,080
apart um one one nice feature in there

685
00:22:26,080 --> 00:22:28,480
though is that um obviously if you for

686
00:22:28,480 --> 00:22:29,919
example due to a software bug got stuck

687
00:22:29,919 --> 00:22:31,760
in an infinite loop then you could end

688
00:22:31,760 --> 00:22:32,960
up with a program that's currently

689
00:22:32,960 --> 00:22:35,039
running stop checking for other jobs and

690
00:22:35,039 --> 00:22:36,720
these are the jobs will then never run

691
00:22:36,720 --> 00:22:39,039
so there is a hardware hardware watchdog

692
00:22:39,039 --> 00:22:41,280
that is monitoring the location that you

693
00:22:41,280 --> 00:22:42,880
check to see if there's a higher produce

694
00:22:42,880 --> 00:22:44,720
you're waiting and if half a second goes

695
00:22:44,720 --> 00:22:46,880
by i think 640 milliseconds goes by

696
00:22:46,880 --> 00:22:48,240
without that being checked then the

697
00:22:48,240 --> 00:22:50,159
computer does restart so that gets a

698
00:22:50,159 --> 00:22:53,200
chance to break out of out of that

699
00:22:53,200 --> 00:22:55,679
okay time's getting a bit low so i'll

700
00:22:55,679 --> 00:22:58,080
just quickly skip over this

701
00:22:58,080 --> 00:22:59,919
um yeah so again if you want to look at

702
00:22:59,919 --> 00:23:01,280
the slides there's more detail here

703
00:23:01,280 --> 00:23:04,159
including my own notes on this um

704
00:23:04,159 --> 00:23:06,799
essentially the message here is that um

705
00:23:06,799 --> 00:23:08,159
it could support these multiple jobs but

706
00:23:08,159 --> 00:23:09,760
each one had a kind of um the kind of

707
00:23:09,760 --> 00:23:11,520
context that was very small you had

708
00:23:11,520 --> 00:23:13,520
basically i think 12 memory words which

709
00:23:13,520 --> 00:23:16,159
were basically the the scratch pad space

710
00:23:16,159 --> 00:23:18,559
that that task could use um and then a

711
00:23:18,559 --> 00:23:19,919
couple of extra words just to kind of

712
00:23:19,919 --> 00:23:21,679
manage the system

713
00:23:21,679 --> 00:23:23,039
the wait lists

714
00:23:23,039 --> 00:23:25,520
i will also skip over but they they were

715
00:23:25,520 --> 00:23:27,919
just the triggering tasks at very

716
00:23:27,919 --> 00:23:29,360
specific times

717
00:23:29,360 --> 00:23:31,440
so the thing that i thought we'd got to

718
00:23:31,440 --> 00:23:32,880
earlier but i was getting ahead of

719
00:23:32,880 --> 00:23:34,960
myself the really nice thing

720
00:23:34,960 --> 00:23:36,720
is the interpreter

721
00:23:36,720 --> 00:23:37,760
so

722
00:23:37,760 --> 00:23:38,880
as i say

723
00:23:38,880 --> 00:23:40,559
the the most powerful instructions

724
00:23:40,559 --> 00:23:42,400
you've got is hardware sorry is a

725
00:23:42,400 --> 00:23:45,200
multiplier or divide um

726
00:23:45,200 --> 00:23:47,120
and um

727
00:23:47,120 --> 00:23:49,120
and um and

728
00:23:49,120 --> 00:23:50,720
but do not but the kind of tasks that

729
00:23:50,720 --> 00:23:53,279
you're potentially solving uh invo tend

730
00:23:53,279 --> 00:23:55,440
to involve an awful lot of matrix and

731
00:23:55,440 --> 00:23:57,120
vector algebra you know you're dealing

732
00:23:57,120 --> 00:23:59,120
with orientations and accelerations and

733
00:23:59,120 --> 00:24:01,279
velocities and trying to sort of solve

734
00:24:01,279 --> 00:24:03,360
trajectories so that's kind of hard to

735
00:24:03,360 --> 00:24:05,840
do if you're working at kind of you know

736
00:24:05,840 --> 00:24:07,760
the level of just scalers

737
00:24:07,760 --> 00:24:10,320
um so they introduced um an interpreter

738
00:24:10,320 --> 00:24:12,080
system which was essentially a virtual

739
00:24:12,080 --> 00:24:13,360
machine

740
00:24:13,360 --> 00:24:15,679
they simulated an entirely different

741
00:24:15,679 --> 00:24:16,960
architecture

742
00:24:16,960 --> 00:24:18,880
which had a much richer instruction set

743
00:24:18,880 --> 00:24:21,360
and was much simpler to work with so it

744
00:24:21,360 --> 00:24:22,720
was um

745
00:24:22,720 --> 00:24:24,960
you had seven bit op codes instead of 14

746
00:24:24,960 --> 00:24:26,880
so you've got sorry instead of three so

747
00:24:26,880 --> 00:24:29,120
you immediately got lots of space for um

748
00:24:29,120 --> 00:24:31,120
for different operations it used a flat

749
00:24:31,120 --> 00:24:32,480
memory space so you didn't have to worry

750
00:24:32,480 --> 00:24:34,559
about banking

751
00:24:34,559 --> 00:24:36,480
and

752
00:24:36,480 --> 00:24:38,960
it but but in particular the the key

753
00:24:38,960 --> 00:24:40,960
thing about it is it it had this idea

754
00:24:40,960 --> 00:24:42,080
that rather than the accumulator now

755
00:24:42,080 --> 00:24:44,320
just being a single scale of value they

756
00:24:44,320 --> 00:24:45,840
had a thing called the multi-purpose

757
00:24:45,840 --> 00:24:47,760
accumulator which could represent a

758
00:24:47,760 --> 00:24:49,919
single double or triple precision scalar

759
00:24:49,919 --> 00:24:52,720
value or a double precision vector so

760
00:24:52,720 --> 00:24:54,320
you've now got an accumulator that's a

761
00:24:54,320 --> 00:24:56,880
vector that's pretty impressive for a an

762
00:24:56,880 --> 00:24:58,320
early computer

763
00:24:58,320 --> 00:25:01,039
um and the the the virtual instructions

764
00:25:01,039 --> 00:25:02,480
that they implemented on this i was a

765
00:25:02,480 --> 00:25:04,320
very rich instruction set 127

766
00:25:04,320 --> 00:25:06,559
instructions included things like matrix

767
00:25:06,559 --> 00:25:08,559
multiply and vector normalization and

768
00:25:08,559 --> 00:25:11,440
projection um

769
00:25:11,440 --> 00:25:14,400
trigonometric functions um all kinds of

770
00:25:14,400 --> 00:25:16,480
things that basically would be you know

771
00:25:16,480 --> 00:25:18,640
a nightmare to do with the or you know

772
00:25:18,640 --> 00:25:20,240
cumbersome and error prone to do we are

773
00:25:20,240 --> 00:25:22,640
using the low level um you know the raw

774
00:25:22,640 --> 00:25:24,320
instructions

775
00:25:24,320 --> 00:25:27,320
um

776
00:25:28,000 --> 00:25:30,080
i'm struggling slightly because

777
00:25:30,080 --> 00:25:32,080
on my preview i can't actually read that

778
00:25:32,080 --> 00:25:34,000
text

779
00:25:34,000 --> 00:25:35,679
if i close that

780
00:25:35,679 --> 00:25:38,000
that's better yeah okay so yeah so the

781
00:25:38,000 --> 00:25:40,480
interpreter used a substantial amount of

782
00:25:40,480 --> 00:25:42,320
the memory of the system and the memory

783
00:25:42,320 --> 00:25:43,760
was very very tight even with all this

784
00:25:43,760 --> 00:25:45,600
banking going on there was a lot of

785
00:25:45,600 --> 00:25:47,120
software that got developed for the

786
00:25:47,120 --> 00:25:50,080
computer but it ultimately got scrapped

787
00:25:50,080 --> 00:25:52,080
simply because it would be useful but

788
00:25:52,080 --> 00:25:54,159
not absolutely essential so especially

789
00:25:54,159 --> 00:25:55,600
for things like handling kind of

790
00:25:55,600 --> 00:25:57,520
non-nominal situations where we could

791
00:25:57,520 --> 00:25:58,880
get into this situation and if we do

792
00:25:58,880 --> 00:26:00,159
it'd be really useful to have a piece of

793
00:26:00,159 --> 00:26:01,520
software that can solve this kind of

794
00:26:01,520 --> 00:26:03,600
thing and they ended up just scrapping

795
00:26:03,600 --> 00:26:05,120
most of that because

796
00:26:05,120 --> 00:26:07,279
space um they couldn't you know even if

797
00:26:07,279 --> 00:26:08,640
you extended the banking you'd still

798
00:26:08,640 --> 00:26:10,480
need to weave more more core ropes and

799
00:26:10,480 --> 00:26:13,039
physically find space for them and so on

800
00:26:13,039 --> 00:26:13,840
um

801
00:26:13,840 --> 00:26:15,840
but they but nonetheless they decided

802
00:26:15,840 --> 00:26:18,720
that even though memory was very very

803
00:26:18,720 --> 00:26:19,600
tight

804
00:26:19,600 --> 00:26:21,200
that it was well worth devoting a

805
00:26:21,200 --> 00:26:22,799
substantial amount of that memory to

806
00:26:22,799 --> 00:26:24,720
implement this interpreter which then

807
00:26:24,720 --> 00:26:26,480
allows people to write and you know

808
00:26:26,480 --> 00:26:28,159
write the basically allow the people

809
00:26:28,159 --> 00:26:29,919
writing the navigation software to worry

810
00:26:29,919 --> 00:26:32,080
about the navigation algorithms rather

811
00:26:32,080 --> 00:26:34,320
than worrying about you know working

812
00:26:34,320 --> 00:26:36,799
with very very low level um operations

813
00:26:36,799 --> 00:26:38,400
and i find quite interesting that on

814
00:26:38,400 --> 00:26:40,640
such a an early machine with very very

815
00:26:40,640 --> 00:26:42,799
that was very slow in the first place um

816
00:26:42,799 --> 00:26:44,720
again i skipped it the clock speed of

817
00:26:44,720 --> 00:26:46,559
this it's basically a megahertz but it's

818
00:26:46,559 --> 00:26:49,360
12 clocks per instruction cycle and most

819
00:26:49,360 --> 00:26:51,120
instructions took two cycles so it's

820
00:26:51,120 --> 00:26:53,679
about 40 000 instructions a second so

821
00:26:53,679 --> 00:26:56,799
it's pretty slow um the interpreter is

822
00:26:56,799 --> 00:26:58,720
much slower still because you're running

823
00:26:58,720 --> 00:27:01,279
an emulated machine um but it's

824
00:27:01,279 --> 00:27:02,559
interesting that you know they found

825
00:27:02,559 --> 00:27:04,559
that it was you know they realized even

826
00:27:04,559 --> 00:27:06,559
then that it was well worth paying this

827
00:27:06,559 --> 00:27:08,720
overhead in computer time on a computer

828
00:27:08,720 --> 00:27:10,400
that was already very slow in order to

829
00:27:10,400 --> 00:27:13,039
make programmers more productive and

830
00:27:13,039 --> 00:27:14,320
you know make it less likely that they

831
00:27:14,320 --> 00:27:15,600
would make mistakes because they could

832
00:27:15,600 --> 00:27:16,960
focus on the domain they were trying to

833
00:27:16,960 --> 00:27:18,960
solve navigation and not have to worry

834
00:27:18,960 --> 00:27:20,559
so much about the hardware and this idea

835
00:27:20,559 --> 00:27:21,840
of abstracting away the hardware to

836
00:27:21,840 --> 00:27:24,480
allow you to use a kind of higher level

837
00:27:24,480 --> 00:27:25,679
language

838
00:27:25,679 --> 00:27:26,720
it's it's not really a high-level

839
00:27:26,720 --> 00:27:29,520
language it's yeah but it's a it's a

840
00:27:29,520 --> 00:27:30,960
an easier to use machine with a much

841
00:27:30,960 --> 00:27:32,399
richer instruction set so you don't have

842
00:27:32,399 --> 00:27:34,480
to worry so much about the fine details

843
00:27:34,480 --> 00:27:35,919
i think it's kind of very interesting

844
00:27:35,919 --> 00:27:37,760
that they uh realized even back then

845
00:27:37,760 --> 00:27:39,440
that this was you know was well worth

846
00:27:39,440 --> 00:27:40,559
doing

847
00:27:40,559 --> 00:27:44,240
uh i think i'm almost there now

848
00:27:44,640 --> 00:27:47,120
um again this is uh

849
00:27:47,120 --> 00:27:48,640
i've got well i've got a couple of

850
00:27:48,640 --> 00:27:50,559
minutes so um

851
00:27:50,559 --> 00:27:51,840
so essentially yeah

852
00:27:51,840 --> 00:27:53,520
so the one thing with interpreter is you

853
00:27:53,520 --> 00:27:54,799
did need to store additional states

854
00:27:54,799 --> 00:27:56,320
because obviously this simulated machine

855
00:27:56,320 --> 00:27:59,360
has context so you could run um if you

856
00:27:59,360 --> 00:28:00,720
were running programs that ran on the

857
00:28:00,720 --> 00:28:02,720
the kind of the native instruction set

858
00:28:02,720 --> 00:28:05,919
then the the task that you uh

859
00:28:05,919 --> 00:28:07,679
you had yeah the task storage gave you

860
00:28:07,679 --> 00:28:09,440
about 12 words that you could use for

861
00:28:09,440 --> 00:28:11,360
whatever you liked for general storage

862
00:28:11,360 --> 00:28:13,120
the if you were running an interpreted

863
00:28:13,120 --> 00:28:14,799
program then when you launched the job

864
00:28:14,799 --> 00:28:16,399
you have to specifically say i will be

865
00:28:16,399 --> 00:28:17,840
using the interpreter for this didn't

866
00:28:17,840 --> 00:28:19,520
mean you had to only use the interpreter

867
00:28:19,520 --> 00:28:21,520
because another nice things about it is

868
00:28:21,520 --> 00:28:22,960
you could freely switch between the

869
00:28:22,960 --> 00:28:25,360
interpret interpreted code and normal

870
00:28:25,360 --> 00:28:27,440
code very very simply it wasn't a kind

871
00:28:27,440 --> 00:28:29,200
of an all or nothing so it's very common

872
00:28:29,200 --> 00:28:30,559
that you know code will use the

873
00:28:30,559 --> 00:28:32,000
interpreter for part of it and then jump

874
00:28:32,000 --> 00:28:32,880
into

875
00:28:32,880 --> 00:28:34,640
the kind of the low-level language and

876
00:28:34,640 --> 00:28:36,480
perhaps jump back again but if you are

877
00:28:36,480 --> 00:28:37,760
going to use the interpreter you need a

878
00:28:37,760 --> 00:28:40,799
so-called vac area

879
00:28:40,799 --> 00:28:42,159
which essentially

880
00:28:42,159 --> 00:28:44,559
is an additional chunk of memory um and

881
00:28:44,559 --> 00:28:45,919
there were i think five of those

882
00:28:45,919 --> 00:28:48,240
allocate yes five allocated uh which

883
00:28:48,240 --> 00:28:50,240
essentially stole the state of the the

884
00:28:50,240 --> 00:28:52,080
kind of that virtual machine

885
00:28:52,080 --> 00:28:53,919
and the final thing i'll talk about

886
00:28:53,919 --> 00:28:55,520
which sadly i don't have any i was

887
00:28:55,520 --> 00:28:57,200
hoping to get some nice audio for this

888
00:28:57,200 --> 00:28:59,360
but um oh

889
00:28:59,360 --> 00:29:02,399
i completely skipped something that's uh

890
00:29:02,399 --> 00:29:04,799
that's required for this

891
00:29:04,799 --> 00:29:06,399
i'll try and cover it very quickly so

892
00:29:06,399 --> 00:29:09,039
this is concept of um

893
00:29:09,039 --> 00:29:11,200
unprogrammed sequences so i mentioned

894
00:29:11,200 --> 00:29:14,640
about the you have the um the um

895
00:29:14,640 --> 00:29:16,320
inertial measurement unit the imu which

896
00:29:16,320 --> 00:29:18,960
stores the orientation and velocity um

897
00:29:18,960 --> 00:29:20,240
essentially

898
00:29:20,240 --> 00:29:21,840
you know these these are values which

899
00:29:21,840 --> 00:29:23,279
the computer needs fair to access and

900
00:29:23,279 --> 00:29:25,600
these were mapped into memory but

901
00:29:25,600 --> 00:29:27,200
it was essentially a one bit up down so

902
00:29:27,200 --> 00:29:28,159
what happened is every time the

903
00:29:28,159 --> 00:29:30,000
spacecraft rotated or accelerated by a

904
00:29:30,000 --> 00:29:31,840
certain amount a pulse would get sent to

905
00:29:31,840 --> 00:29:33,840
the computer which would then steal the

906
00:29:33,840 --> 00:29:36,240
next proce the next cpu cycle to

907
00:29:36,240 --> 00:29:37,679
increment or decrement the appropriate

908
00:29:37,679 --> 00:29:40,720
counter so if the thing's accelerating

909
00:29:40,720 --> 00:29:42,559
rapidly or it's rotating quickly you

910
00:29:42,559 --> 00:29:44,240
have tons of these pulses coming in and

911
00:29:44,240 --> 00:29:46,399
every time a pulse arrives the next cpu

912
00:29:46,399 --> 00:29:49,039
cycle gets stolen from normal operations

913
00:29:49,039 --> 00:29:51,120
and is used to increment or decrement a

914
00:29:51,120 --> 00:29:53,360
specific memory location so the 1201

915
00:29:53,360 --> 00:29:55,520
1202 the famous alarms on the apollo 11

916
00:29:55,520 --> 00:29:57,200
moon landing they're coming in to land

917
00:29:57,200 --> 00:29:59,279
1201 1202 what does this mean panic

918
00:29:59,279 --> 00:30:01,520
panic the in in a nutshell what's

919
00:30:01,520 --> 00:30:02,960
happening is there is an undiagnosed

920
00:30:02,960 --> 00:30:04,320
problem with the power supplies which

921
00:30:04,320 --> 00:30:05,760
meant that if you turned on one of the

922
00:30:05,760 --> 00:30:07,440
power supplies for the rendezvous radar

923
00:30:07,440 --> 00:30:09,039
at the wrong time you had these two

924
00:30:09,039 --> 00:30:10,799
power supplies slightly out of phase

925
00:30:10,799 --> 00:30:12,159
which caused

926
00:30:12,159 --> 00:30:14,399
the radar tracking system to think that

927
00:30:14,399 --> 00:30:15,679
the radar was constantly jittering

928
00:30:15,679 --> 00:30:17,679
around sending zillions of these pulses

929
00:30:17,679 --> 00:30:19,200
to the computer saying increment

930
00:30:19,200 --> 00:30:21,039
decrement increment decrement

931
00:30:21,039 --> 00:30:22,960
and that caused an additional 15 uh

932
00:30:22,960 --> 00:30:25,039
still 15 of the processor time on the

933
00:30:25,039 --> 00:30:27,520
computer the computer was already loaded

934
00:30:27,520 --> 00:30:29,360
very heavily because it was final stages

935
00:30:29,360 --> 00:30:32,000
of landing suddenly 15 of its time has

936
00:30:32,000 --> 00:30:34,240
been taken away um and that's what

937
00:30:34,240 --> 00:30:36,240
caused these overflows what are these

938
00:30:36,240 --> 00:30:37,600
alarms but what happens when these

939
00:30:37,600 --> 00:30:39,679
alarms happen is the computer then does

940
00:30:39,679 --> 00:30:42,640
a bailout which is basically a reboot

941
00:30:42,640 --> 00:30:45,039
but it reboots in about a second

942
00:30:45,039 --> 00:30:47,360
and the jobs that are important such as

943
00:30:47,360 --> 00:30:50,159
landing software leave checkpoints it's

944
00:30:50,159 --> 00:30:52,080
basically saying if i'm restarted this

945
00:30:52,080 --> 00:30:53,760
is where you know this is this is the

946
00:30:53,760 --> 00:30:55,600
last safe state essentially so the

947
00:30:55,600 --> 00:30:56,880
software the important jobs could pick

948
00:30:56,880 --> 00:30:58,399
up more or less where they were and the

949
00:30:58,399 --> 00:30:59,919
less important jobs just get chucked out

950
00:30:59,919 --> 00:31:01,600
of the system and that freed up just

951
00:31:01,600 --> 00:31:03,360
enough processing power that despite the

952
00:31:03,360 --> 00:31:05,360
fact you had all of these spurious

953
00:31:05,360 --> 00:31:06,960
interrupts from this fault coming in the

954
00:31:06,960 --> 00:31:08,480
computer still had just enough computer

955
00:31:08,480 --> 00:31:10,720
power to keep up with real time and keep

956
00:31:10,720 --> 00:31:12,480
the land a stable and ultimately

957
00:31:12,480 --> 00:31:13,760
successful mission

958
00:31:13,760 --> 00:31:18,080
and i think i'm out of time

959
00:31:18,080 --> 00:31:19,600
i'll hang around at the end if anybody's

960
00:31:19,600 --> 00:31:21,760
got any questions um

961
00:31:21,760 --> 00:31:23,760
and um yeah otherwise hope you enjoyed

962
00:31:23,760 --> 00:31:24,720
the talk

963
00:31:24,720 --> 00:31:28,519
and thank you

964
00:31:33,600 --> 00:31:35,678
you

