1
00:00:01,040 --> 00:00:01,760
Thank you very much.

2
00:00:03,360 --> 00:00:10,160
That is a surprising number of people and Jonty 
was not joking about the spiders. Hi, I'm here to  

3
00:00:10,160 --> 00:00:14,240
talk to you about hacking train tickets. I have 72 
slides to get through, so it's going to be quick.  

4
00:00:15,760 --> 00:00:20,720
I am a site reliability engineer at WORTH - 
we're hiring - I also help out at these events,  

5
00:00:20,720 --> 00:00:25,599
as was alluded to. Come to MCH2022 as well in 
the Netherlands - it's going to be awesome.

6
00:00:27,360 --> 00:00:32,000
So why am I here? Back in 
2016 the BBC ran an article  

7
00:00:32,000 --> 00:00:37,040
about people making copies of train tickets. 
This was really interesting to me - especially  

8
00:00:37,040 --> 00:00:41,200
this specific paragraph - which says 
they couldn't write the magstripe.  

9
00:00:41,200 --> 00:00:50,160
Now, obviously anyone with a thermal printer and 
photoshop can make the front of a train ticket  

10
00:00:50,160 --> 00:00:54,080
and make it look real, but if you can't make it 
go through the gateline is it really a ticket?  

11
00:00:55,440 --> 00:01:00,000
So i asked TfL - who were the only public body 
you could FoI about this stuff - what's on the  

12
00:01:00,000 --> 00:01:06,720
magstripe? They said they wouldn't tell me. 
So there had to be another way to find out.

13
00:01:09,120 --> 00:01:15,040
For the agenda, we're going to take a brief detour 
- maybe not brief - through some historical stuff  

14
00:01:15,040 --> 00:01:18,320
from the National Archives because that is 
literally the only way to find out about  

15
00:01:18,320 --> 00:01:22,160
some of this stuff. We'll talk a bit about 
the data layout and how you read the ticket,  

16
00:01:23,200 --> 00:01:28,000
and then - very briefly if we get to the end 
- about digital ticketing and stuff like that.

17
00:01:29,520 --> 00:01:37,679
Some things you don't want to learn more about. 
These are bad - yeah, don't do them. And just  

18
00:01:37,680 --> 00:01:42,160
for clarity I don't have enough time to be 
comprehensive so, I'm sorry if I missed something  

19
00:01:42,160 --> 00:01:49,039
out or make a mistake. This is purely research 
please don't go and hack train tickets and put  

20
00:01:49,040 --> 00:01:52,720
them through barriers because that would be bad. 
And the opinions are - obviously - only mine.

21
00:01:53,680 --> 00:01:58,000
So, some history. For those of you not from 
the UK, you'll probably want to know a bit  

22
00:01:58,000 --> 00:02:03,440
more about the weird train system that we 
have here. Back in like the 19th century,  

23
00:02:03,440 --> 00:02:09,840
it was private, then it was public, then it was 
private again, and now it's maybe public again.  

24
00:02:11,600 --> 00:02:17,840
This means the specification for tickets 
changes through different organisations,  

25
00:02:17,840 --> 00:02:22,000
it belongs to different people, and 
it's changed throughout the years,  

26
00:02:22,800 --> 00:02:26,880
No one specification has really belonged 
to one organisation at any one time  

27
00:02:27,680 --> 00:02:35,120
and it can often be very difficult to find out 
exactly what was going on at any particular time.

28
00:02:35,680 --> 00:02:42,080
So back in the 60s we had these, these were called 
Edmondson tickets, they were invented in the  

29
00:02:42,080 --> 00:02:48,640
Victorian era. You would go to a station and buy 
them, they would have a massive rack of them. They  

30
00:02:48,640 --> 00:02:55,200
were serial numbered, but they were pre-printed. 
You could buy a ticket from a place to a place  

31
00:02:55,200 --> 00:02:59,839
uh. Any sort of bookkeeping was all in 
manual ledgers - it was all written down  

32
00:02:59,840 --> 00:03:02,560
and then sent to a head office who 
would work out who had sold what.  

33
00:03:03,120 --> 00:03:10,160
They were very basic. British Rail did update them 
a bit so they looked a bit fancier - I'm not sure  

34
00:03:10,160 --> 00:03:12,000
they really were very much 
fancier, but there you go.

35
00:03:13,680 --> 00:03:18,880
But then we started to get - in the 60s and 
70s - we invented things like computers,  

36
00:03:19,760 --> 00:03:25,280
and better mechanical computers specifically. 
So they started to issue these. Now these are  

37
00:03:25,280 --> 00:03:34,800
machine-issued tickets. They were very mechanical 
machines so you would not encode anything on them  

38
00:03:34,800 --> 00:03:41,840
really - nothing machine readable - it would just 
be printing stuff. There was no real tabulation,  

39
00:03:42,560 --> 00:03:49,040
other than manual ledgers, and there 
were a lot of them. Every region had  

40
00:03:49,040 --> 00:03:56,000
a different type of machine. So we had some that 
look like this, and some more that look like this.  

41
00:03:57,200 --> 00:04:04,079
These are actually made by NCR - National Cash 
Registers - who still exist today. This obviously  

42
00:04:04,080 --> 00:04:10,240
created a problem - by the 80s these machines that 
were making these tickets were really unreliable,  

43
00:04:10,240 --> 00:04:13,360
no one knew how to maintain them. The 
manufacturers didn't want to maintain them,  

44
00:04:13,360 --> 00:04:17,680
so British Rail had to find another 
way to make tickets, otherwise they  

45
00:04:17,680 --> 00:04:23,840
wouldn't be able to. And you can see here, the 
number of different ticket machines that they had.

46
00:04:25,360 --> 00:04:33,120
So, different manufacturers, most of them not in 
support by this point - this document is from the  

47
00:04:33,120 --> 00:04:39,840
from the 80s - and most of them are 
falling to pieces. So British Rail came  

48
00:04:39,840 --> 00:04:45,200
up with something called INTIS. So, INTIS 
is the Intermediate Ticket Issuing System.  

49
00:04:45,760 --> 00:04:49,280
Not a huge amount is known about it, 
because it didn't exist for very long,  

50
00:04:49,280 --> 00:04:57,119
but it does resemble the ticket that you would 
buy today. So this is an INTIS ticket - the very  

51
00:04:57,120 --> 00:05:03,600
interesting thing about it is what's called the 
NLC - I think it's National Location Code - so  

52
00:05:03,600 --> 00:05:12,400
that's the numeric value. So 8355 represents 
South Elmsall and 8591 represents Wakefield West.

53
00:05:12,400 --> 00:05:21,039
So these are not like CRS codes like RDG or 
London Terminals - LON - these are mainly for  

54
00:05:21,040 --> 00:05:30,400
accountancy purposes and represent, basically, an 
office. So you can see at this point, we do have  

55
00:05:32,800 --> 00:05:40,720
some kind of accountancy going on - some actual 
tracking within a ledger from a machine. They  

56
00:05:40,720 --> 00:05:46,640
were actually tape-driven so they would write 
out onto a tape deck which would get posted off  

57
00:05:47,840 --> 00:05:52,560
and would give them, back in the head office, 
some idea of which office had sold how many  

58
00:05:52,560 --> 00:05:57,440
tickets to where - which was a really big thing, 
because before this was completely manual.  

59
00:05:59,120 --> 00:06:03,760
This is what it looks like in the ticketing 
manual in the national archives - slightly  

60
00:06:03,760 --> 00:06:11,200
different start of ticket but very similar thing. 
But this is INTIS, so it's intermediate - it  

61
00:06:11,200 --> 00:06:17,599
wasn't designed to be a permanent solution - 
it didn't have a magstripe, it didn't really  

62
00:06:18,400 --> 00:06:22,239
do all the things they wanted it to. They 
still had to mail tapes backwards and forwards,  

63
00:06:22,880 --> 00:06:26,880
it had a very limited amount of things it could 
do. So they had to come up with something else.

64
00:06:27,520 --> 00:06:33,280
Obviously, more specifications, that's 
definitely what we need. So they came  

65
00:06:33,280 --> 00:06:38,239
up with something called APTIS - and PORTIS 
which is the portable version - so APTIS was  

66
00:06:39,120 --> 00:06:45,840
basically an evolution of INTIS. So APTIS looks 
very similar - which we'll see in a moment.  

67
00:06:47,200 --> 00:06:51,680
It was designed to do basically everything, 
so you would be able to go to a station  

68
00:06:51,680 --> 00:06:58,480
and buy a ticket from British Rail - an 
APTIS ticket - and the ticket machine  

69
00:06:58,480 --> 00:07:03,120
would be able to record that had sold 
it to you, that you had bought it, and  

70
00:07:03,120 --> 00:07:08,080
it would encode all the information they needed 
on it - not on the mag stripe - on the front  

71
00:07:08,080 --> 00:07:12,800
of the ticket so they could do ticket checking 
and all that kind of stuff. So an APTIS ticket  

72
00:07:12,800 --> 00:07:19,280
looks like this - which is the type of ticket 
you see today. So this is back in the 80s.

73
00:07:23,520 --> 00:07:26,240
As I said, they do look very 
similar - so a comparison side  

74
00:07:26,240 --> 00:07:33,120
by side - one's a travelcard one's a British 
Rail-era ticket and they also did variations,  

75
00:07:33,680 --> 00:07:40,880
which are sort of side notes - this one does have 
a magstripe - you could buy railcards and stuff  

76
00:07:41,520 --> 00:07:49,599
which would all be printed on APTIS tickets. So it 
really was the new ticket system for British Rail.  

77
00:07:50,720 --> 00:07:56,560
British Rail came up with some future requirements 
for it. The main one was that - if you look at  

78
00:07:56,560 --> 00:08:07,360
7.1.2 - that they wanted to be able to read credit 
cards - that wasn't a thing they'd been able to do  

79
00:08:07,360 --> 00:08:13,680
before, APTIS was supposed to help them with that. 
And they also - in 7.1.1 - wanted to be able to  

80
00:08:13,680 --> 00:08:20,400
encode magnetic stripe data on the 
back of the tickets, for some reasons.  

81
00:08:22,240 --> 00:08:27,680
It was at the time perceived to be an anti-fraud 
measure basically. In the 80s people were starting  

82
00:08:27,680 --> 00:08:34,400
to get printers - dot matrix - that you could 
print tickets with. Not dissimilar to the people  

83
00:08:34,400 --> 00:08:41,199
in 2016 printing tickets that they had made on 
a thermal printer. And British Rail were worried  

84
00:08:41,200 --> 00:08:46,880
that people would print their own tickets and 
not pay for them and there was also a legal thing  

85
00:08:46,880 --> 00:08:53,200
about it as well. But it wasn't the only reason 
because at that time London Underground wanted  

86
00:08:53,200 --> 00:09:00,480
to issue magstripe tickets, and so for political 
reasons - which aren't really specified - British  

87
00:09:00,480 --> 00:09:05,360
Rail had to basically implement the London 
Underground specification for these.  

88
00:09:07,360 --> 00:09:13,840
And that really drives a lot of the data layout 
I think that we see on the tickets today. One  

89
00:09:13,840 --> 00:09:19,200
of the very interesting things is that British 
Rail actually got London Transport to pay for  

90
00:09:19,200 --> 00:09:24,240
the upgrade to APTIS. So, bigger processing 
power, bigger memory for their machines,  

91
00:09:25,760 --> 00:09:32,640
they had to change the printer to print 
different characters and stuff. British  

92
00:09:32,640 --> 00:09:36,960
Rail managed to get London Transport to pay for 
that! Which i think is very ingenious of them.  

93
00:09:38,080 --> 00:09:41,840
But it does mean that we get a 
specification for some of the magstripe.  

94
00:09:41,840 --> 00:09:45,280
So this is actually a really important 
document, because this tells us  

95
00:09:46,400 --> 00:09:52,240
exactly how the magstripe data - well, not how 
it is laid out - but what type of magstripe it  

96
00:09:52,240 --> 00:10:00,160
is. So, as you may be aware it is a single track 
magstripe - that's not very common, you won't see  

97
00:10:00,160 --> 00:10:10,160
it outside many transport applications. Even 
the New York Metro uses side-aligned tickets,  

98
00:10:10,160 --> 00:10:14,560
and that means it's really really difficult 
to read. It's also not any ISO standard - it  

99
00:10:14,560 --> 00:10:19,839
was invented in the 80s to a weird other 
specification that no one really knows about,  

100
00:10:21,280 --> 00:10:23,920
and as a consequence it is 
really difficult to read.  

101
00:10:25,680 --> 00:10:31,680
From this document, we can deduce the data layout. 
So we have a 16-bit header at the front and a  

102
00:10:31,680 --> 00:10:37,920
16-bit footer at the back. In between, we have 
152 bits of stuff and some kind of checksum.  

103
00:10:39,360 --> 00:10:44,160
I don't know how to compute the checksum - 
that's something we can look at working out  

104
00:10:44,160 --> 00:10:50,240
at some point in the future. This is what the 
header should look like, so you should have  

105
00:10:50,960 --> 00:10:57,200
a load of zeros at the beginning and then 
1010 to tell you that it's forward direction  

106
00:10:57,200 --> 00:11:01,520
and then reverse direction - so if you feed the 
ticket in the wrong way, it knows it's reading it  

107
00:11:01,520 --> 00:11:08,400
backwards - you should get a load of zeros and 
then four ones. This is actually really really  

108
00:11:08,400 --> 00:11:12,400
useful because it means that when we're trying 
to read the tickets, we can actually work out if  

109
00:11:12,400 --> 00:11:17,439
we're reading something that looks like valid data 
or whether we're just reading a mistake - which  

110
00:11:17,440 --> 00:11:23,600
turns out is most of what i spent my time doing. 
So reading and writing these is really hard.  

111
00:11:24,400 --> 00:11:30,720
Back in 2017 I did try to do this with a standard 
magstripe reader/writer you can buy on the  

112
00:11:30,720 --> 00:11:36,640
internet - doesn't work, you get garbage. They 
expect ISO standard credit cards, they expect it  

113
00:11:36,640 --> 00:11:41,840
to be sidetracked, they do not - they can't read 
these. It's just not what they're designed to do.  

114
00:11:42,400 --> 00:11:47,120
And as a result you get completely 
garbage data that doesn't mean anything.

115
00:11:47,120 --> 00:11:55,200
There was a talk a while ago - I think in 2005 
at CCC - which was about the New York Metro  

116
00:11:55,200 --> 00:11:59,120
and reading the data off that 
and reverse engineering it.  

117
00:12:00,400 --> 00:12:07,439
Back then they suggested this method of doing it, 
so having a jack and basically reading the audio  

118
00:12:08,480 --> 00:12:12,400
through that and then writing software to 
decode that. I thought that was a bit too  

119
00:12:12,400 --> 00:12:19,040
difficult so I decided to go for an alternative 
approach. This is a ticket printer - the  

120
00:12:20,480 --> 00:12:27,680
ND4020 - it's made by Newbury Data. It 
prints tickets. It also magnetically  

121
00:12:27,680 --> 00:12:34,880
encodes them and they are fairly common - 
certainly in the early days of privatisation  

122
00:12:34,880 --> 00:12:41,600
you would have come across one as APTIS died out 
and they started replacing APTIS with new systems.  

123
00:12:42,160 --> 00:12:47,439
These were one of them very common machines that 
were used. They are actually designed to have a  

124
00:12:47,440 --> 00:12:53,200
whole sort of hopper system on the back, so you 
can feed huge amounts of tickets through them for  

125
00:12:53,200 --> 00:12:56,320
things like posting them out to you - so if you 
don't want to collect them at the station you can  

126
00:12:56,320 --> 00:13:01,120
get them posted to you. They have a sort of whole 
automated thing that you can set up with this.

127
00:13:02,320 --> 00:13:10,800
But, the most interesting thing is, you can buy 
these on eBay. Yes. They're quite expensive. So  

128
00:13:10,800 --> 00:13:14,959
you can see a bit what it looks like - the bit 
at the top is where the tickets go in, they sit  

129
00:13:18,960 --> 00:13:23,280
along the top of that - there's a whole bit above 
this that isn't here and they will fall down  

130
00:13:23,280 --> 00:13:29,920
and get pulled through to the front. So the ticket 
path is usually down and out but, as I mentioned,  

131
00:13:29,920 --> 00:13:33,599
they do have the facility to have a whole sort of 
hopper system at the back so they can actually be  

132
00:13:33,600 --> 00:13:41,440
fed straight through, which is what I was doing 
later on. Yeah, comes with a lot of electronics.  

133
00:13:43,120 --> 00:13:49,280
So this is what the electronics actually looks 
like. There's some ROM chips on there. They are  

134
00:13:49,840 --> 00:13:56,800
surface mount. Reading them is a pain - 
don't try that. But what we can try and do,  

135
00:13:56,800 --> 00:14:03,120
because it has RS232, is try and talk 
to it via serial. So it turns out this  

136
00:14:03,120 --> 00:14:07,680
is actually quite difficult because again 
like tickets it's not publicly documented.  

137
00:14:08,880 --> 00:14:16,320
It does, after a lot of trying - thank you our lab 
for letting me sit there for a long time and all  

138
00:14:16,320 --> 00:14:23,600
the various people that helped me - you eventually 
can get it to - by fiddling with some pins on  

139
00:14:23,600 --> 00:14:27,120
the board and flicking the power switch enough 
times - you can get it to give you some serial.  

140
00:14:27,760 --> 00:14:33,840
So that's what a serial connection looks like to 
it - it is just RS232 the baud rate's uh 15200  

141
00:14:35,440 --> 00:14:41,200
I think - maybe I'm missing a zero. And you can 
talk to it - it has a serial interface, you can  

142
00:14:41,200 --> 00:14:46,640
send it data, and it will send you data back, like 
this. I don't know how legible that is, sorry.  

143
00:14:47,520 --> 00:14:52,480
So it has a whole menu thing, you can even set 
the time - it doesn't have a backup battery so  

144
00:14:52,480 --> 00:14:58,240
if you unplug it it will forget the time. I don't 
know why it needs a timestamp - it doesn't really  

145
00:14:58,240 --> 00:15:05,520
use it as far as i know. The interesting thing 
is it has quite a lot of onboard storage. So it  

146
00:15:05,520 --> 00:15:10,800
has a whole facility for you to be able to write 
data into memory locations and then read it back.  

147
00:15:11,840 --> 00:15:18,480
This is kind of a weird feature because it's not 
really how I would expect something like this to  

148
00:15:18,480 --> 00:15:22,400
work. I'm sure there's some very good reasons it's 
designed like this and I'm sure there are some  

149
00:15:22,960 --> 00:15:26,880
excellent drivers for it. I did try and 
decompile some software that works with it  

150
00:15:27,440 --> 00:15:36,400
but i couldn't find anything useful because I'm 
not very good with assembly. This is what the data  

151
00:15:36,400 --> 00:15:44,400
bank looks like before i overwrote it with ones 
because, obviously. You can specify a register and  

152
00:15:44,400 --> 00:15:49,520
get it to pull data back for you. The other thing 
you can do is tell it where you want to execute.  

153
00:15:49,520 --> 00:15:55,040
So you can give it a memory address and 
it will then ask you some details about  

154
00:15:55,040 --> 00:15:59,760
that function - it assumes it's a function - 
so you can say "I want to execute something,  

155
00:16:00,320 --> 00:16:05,520
does the function return a value? Yes. How 
many parameters does it have? I don't know,  

156
00:16:05,520 --> 00:16:11,600
zero?" and then hopefully it will execute 
it. Well no, it actually just resets.

157
00:16:12,240 --> 00:16:18,560
So, this is when it kind of got a bit 
boring because, without any manual for this,  

158
00:16:18,560 --> 00:16:23,199
without any idea how to interface with the 
serial stuff, how to even generate data for  

159
00:16:23,200 --> 00:16:27,840
it. Because it's not just feeding it binary - 
it has to print stuff as well, remember. So,  

160
00:16:29,360 --> 00:16:35,840
don't know how to do that. So, gave up, but this 
is probably how it works from a bit of Googling.  

161
00:16:36,400 --> 00:16:42,240
It probably uses PECTAB - in fact it does most 
definitely use PECTAB, which is a way of defining  

162
00:16:42,240 --> 00:16:46,640
a layout - it's most commonly used for airline 
tickets and baggage tags. Apparently it's also  

163
00:16:46,640 --> 00:16:52,560
used for train tickets. No idea how that works - 
if someone would like to tell me I'd love to know.  

164
00:16:53,920 --> 00:16:59,439
You load that with some ticket parameters stick, 
it into the printer, and then press execute and  

165
00:16:59,440 --> 00:17:04,960
it prints out a ticket. Is the theory. As 
I say, don't really know because I went for  

166
00:17:04,960 --> 00:17:10,079
the alternative approach, which was taking it 
to pieces and putting it on the oscilloscope.

167
00:17:13,200 --> 00:17:19,920
It actually takes 24 volts DC in, as I discovered 
after blowing one of them up, but we'll get to  

168
00:17:19,920 --> 00:17:26,319
that, and you can drive the motor separately - 
it's actually really quite well engineered - if  

169
00:17:26,319 --> 00:17:31,120
you want to come and have a look at it later 
you can. It's got geared motors and everything.  

170
00:17:31,120 --> 00:17:36,080
So you can just drive the motors through 
the ticket path and put tickets through it,  

171
00:17:36,640 --> 00:17:42,000
and then because it has a magstripe reader 
on it - so it can read the tickets it writes,  

172
00:17:42,000 --> 00:17:46,640
because quality - you actually want to verify 
that you've written correct data to the ticket.  

173
00:17:48,400 --> 00:17:54,640
You can then interface with that and pull data 
off it. So this is what it looks like when you  

174
00:17:54,640 --> 00:18:00,480
run a ticket through it. So the yellow line 
is a clock line, the blue line is a data line,  

175
00:18:01,040 --> 00:18:07,040
so if we remember the data spec from before - the 
magstripe spec - it does mention clock sync bytes.  

176
00:18:08,560 --> 00:18:15,200
So this is why they exist, so that you have enough 
time to sync your clock - well not sync your clock  

177
00:18:15,200 --> 00:18:19,280
- you have enough clock bytes to align with the 
data that you're going to start coming through.
  

178
00:18:22,240 --> 00:18:26,400
This actually took quite a while of fiddling 
around with different settings to try and get it  

179
00:18:26,400 --> 00:18:31,600
to actually do this. You do actually need to 
feed it with power, and then power the motor  

180
00:18:31,600 --> 00:18:36,000
separately in order to get this, because it 
does some weird voltages with the magstripe  

181
00:18:36,560 --> 00:18:41,679
reader. The easiest thing is just to feed it 
power which turns the magstripe reader on,  

182
00:18:41,680 --> 00:18:46,240
and then power the motor separately, put the 
ticket through, and you get data on the scope.

183
00:18:47,840 --> 00:18:53,760
But that's not immensely useful because I 
can't read binary from a trace on a scope,  

184
00:18:54,480 --> 00:18:59,840
but luckily you can do scope captures. There 
is some open source software for Rigol scopes,  

185
00:18:59,840 --> 00:19:04,399
and you can pull a CSV of the trace that 
you have on there, amongst other things.  

186
00:19:05,120 --> 00:19:12,560
This means you get data like this. Now, as you 
might be aware, you have a rising edge and a  

187
00:19:12,560 --> 00:19:19,120
falling edge, so in order to know when you have 
data, you need to detect the rising edge on both  

188
00:19:19,120 --> 00:19:27,919
the clock and the data lines, and then that's a 
one if you get - it's actually falling edge - it  

189
00:19:27,920 --> 00:19:34,400
pulls the line low when it's activating it. So 
actually you're detecting a falling edge on both  

190
00:19:34,400 --> 00:19:39,280
of them for one and a falling edge on just a clock 
for zero. And this is quite difficult to do with  

191
00:19:39,280 --> 00:19:43,120
the data that comes out the scope capture 
because it's not really designed for that,  

192
00:19:43,120 --> 00:19:47,439
as far as I can make out, and there's no way to 
alter the resolution and all that kind of stuff.

193
00:19:47,440 --> 00:19:53,920
So you end up with data that looks like that, 
which is not what we expected. This is also  

194
00:19:53,920 --> 00:20:03,200
when I blew up one of them. It turns out that 
AC is not DC and 230 volts is not 24 volts.

195
00:20:04,520 --> 00:20:05,520
[laughter]

196
00:20:05,520 --> 00:20:10,639
Who knew? It blew the track right off the 
board as well, it was quite impressive.  

197
00:20:13,120 --> 00:20:16,800
It was expensive - another £100 to eBay...one  

198
00:20:16,800 --> 00:20:24,080
and a half weeks ago - yes I like cutting it 
fine with my talks - and we have another board.  

199
00:20:24,080 --> 00:20:30,800
So this one, excitingly, has ROMs that you 
can pull off. It's an earlier revision,  

200
00:20:30,800 --> 00:20:35,919
it has a bodge wire on the back, but we can do a 
very similar thing. We can plug it into the scope,  

201
00:20:38,000 --> 00:20:42,560
we can power the motor and we can put a ticket 
through except this time you can see there's a  

202
00:20:42,560 --> 00:20:50,240
circuit playground I think it's called? I blew 
up my one of my microcontrollers in the 230 volt  

203
00:20:50,240 --> 00:20:54,200
episode so i have to borrow one - thank 
you to the person that got me that -  

204
00:20:54,960 --> 00:21:02,160
to do the voltage comparison on some hardware. 
So, instead of having to pull something off  

205
00:21:02,160 --> 00:21:07,280
the scope we can just write some python and we 
can get some data back, which looks like this.

206
00:21:08,400 --> 00:21:14,720
So this is a bit more what we want to see. You 
can see in bold we have some zeros and then we  

207
00:21:14,720 --> 00:21:21,200
have a 1001 and then then at the end we have 
four ones and then we have a load of zeros.  

208
00:21:21,200 --> 00:21:26,320
That's the kind of data we're expecting 
to see. So when you start putting loads  

209
00:21:26,320 --> 00:21:31,520
of tickets through you eventually get a 
load of binary that looks pretty similar,  

210
00:21:31,520 --> 00:21:37,360
and this is truncated - it's the first something 
bytes of a load of travelcards - and you can see  

211
00:21:37,360 --> 00:21:42,240
the data looks really really similar, which 
is good, because that's what we would expect.  

212
00:21:42,240 --> 00:21:48,880
There are various bits at the end that don't look 
similar but data looks pretty similar, except for  

213
00:21:48,880 --> 00:21:55,840
the 17th of February which you can see is offset 
a bit, so something's gone a bit wrong. So it's  

214
00:21:55,840 --> 00:22:02,639
actually really easy to see ones that don't 
look correct just by eye and we can remove it.

215
00:22:03,840 --> 00:22:08,399
Now, these are all travel cards - they all look 
the same - which is not particularly useful.  

216
00:22:10,000 --> 00:22:13,600
When we're trying to reverse engineer the 
specification and understand where data  

217
00:22:15,600 --> 00:22:20,560
sits in the magstripe, we want to compare 
different types of tickets. So here are  

218
00:22:20,560 --> 00:22:26,879
some other tickets. So we have Reading 
- the top ones are Reading travelcards,  

219
00:22:26,880 --> 00:22:30,480
then we have a Reading to Hook - which is 
somewhere in Berkshire - and Hook to Reading.  

220
00:22:31,280 --> 00:22:35,760
And the interesting thing is you can see the 
substring is repeated. So the 110010010101  

221
00:22:39,440 --> 00:22:45,120
is repeated but in a different place on the Hooks 
already. So we can make a pretty good guess,  

222
00:22:45,120 --> 00:22:51,439
since it doesn't repeat anywhere else in that 
string - I checked - that that indicates Reading.  

223
00:22:52,000 --> 00:22:58,840
And when you move it - because it's also in the 
travelcards, remember, so when we move it to -  

224
00:23:00,320 --> 00:23:06,320
in the return portion, we can see that 
it's moved further down the magstripe.

225
00:23:07,040 --> 00:23:14,879
So we've now identified fairly well the arrival 
and departure station indication on the magstripe  

226
00:23:14,880 --> 00:23:19,600
just by looking at it, and we can validate 
that by adding another ticket, so this is  

227
00:23:25,600 --> 00:23:31,040
Oxford to Reading and you can see again 
that the return portion has the substring  

228
00:23:31,040 --> 00:23:35,680
in that same position that we would expect. So 
that's really good. We can read data from it,  

229
00:23:35,680 --> 00:23:40,560
we can make some kind of interpretation 
about what it looks like, and what it means.

230
00:23:43,600 --> 00:23:48,320
The other thing that we can do is identify other 
things in this - so you can see there that we  

231
00:23:49,040 --> 00:23:55,440
arrive at the Hook station code, so again 
it kind of works both ways - we can validate  

232
00:23:55,440 --> 00:24:02,880
that we are actually making an inference 
about something that is correct. So Hook  

233
00:24:04,320 --> 00:24:08,879
moves from the beginning of the magstripe to 
the end of the magstrike in the portion from  

234
00:24:08,880 --> 00:24:13,360
Reading to Hook and Reading moves from the front 
of the magstripe to the end of the magstripe when  

235
00:24:13,360 --> 00:24:19,120
you're going from Hook to Reading. That's what we 
expect. So what does this actually mean? So...I  

236
00:24:20,400 --> 00:24:25,280
dunno. These are the NLCs at the 
end in bold so Reading is 3149.  

237
00:24:27,040 --> 00:24:34,399
The beginning of it does not match the 
NLC, I don't know how these are encoded but  

238
00:24:36,080 --> 00:24:40,159
there seems to be some kind of pattern. The the 
way that you would find this out is basically  

239
00:24:40,160 --> 00:24:47,360
by putting more magstripe tickets through the 
machine and recording loads more data. But,  

240
00:24:48,000 --> 00:24:52,720
if we take a zoomed-out view, we can 
also identify other patterns in the data.  

241
00:24:52,720 --> 00:24:58,480
So the top block of these are the travelcards 
you saw before, the bottom block aren't. And you  

242
00:24:58,480 --> 00:25:03,520
can see that, just above the block shaded green, 
there's a load of data in the travelcards and this  

243
00:25:03,520 --> 00:25:10,000
appears to indicate that that's where you specify 
a travelcard for TfL. And obviously that's not  

244
00:25:10,560 --> 00:25:15,919
present on tickets that don't have their 
travelcards because they're not a travelcard,  

245
00:25:15,920 --> 00:25:20,320
so they don't have any data there. Good, that's 
what we expect to see. And then you can see  

246
00:25:21,040 --> 00:25:28,720
in the red section, that's the one and then two, 
that there is some data there. And those are  

247
00:25:28,720 --> 00:25:35,440
tickets which are "via London". So a ticket where 
you're going from Reading to Leeds or something  

248
00:25:35,440 --> 00:25:40,720
via London and you need to use the Tube to go 
through from one terminal station to another.

249
00:25:41,280 --> 00:25:47,520
So, again we're seeing data where we 
expect to see it. It looks correct  

250
00:25:47,520 --> 00:25:54,480
um and we can begin to sort of deduce, by putting 
more and more tickets through, exactly what  

251
00:25:55,360 --> 00:25:57,840
this this could be and what 
the bits could actually mean.  

252
00:26:00,000 --> 00:26:07,600
I have about a minute left I think. Just to sort 
of sum up, this is not encrypted - we can see that  

253
00:26:07,600 --> 00:26:12,080
because we get reliable data when you put multiple 
tickets through. They all look vaguely the same,  

254
00:26:12,080 --> 00:26:18,480
we can see patterns by eye, which is really good. 
It's not hugely obscure either, you can buy one of  

255
00:26:18,480 --> 00:26:23,840
these on eBay and do the same thing, but you 
can't really do it with any other equipment.  

256
00:26:24,400 --> 00:26:28,160
I think if you want to do it manually you 
could do it the old school method by running  

257
00:26:28,880 --> 00:26:33,520
some reader over it, but I can't guarantee that 
will work because it is a really weird mag stripe.  

258
00:26:34,720 --> 00:26:39,600
There is also a checksum. We don't know how 
to calculate the checksum, so it's going to be  

259
00:26:39,600 --> 00:26:43,120
pretty difficult to write a ticket that's going 
to be accepted by a barrier and you shouldn't  

260
00:26:43,120 --> 00:26:49,520
put it through a barrier to check because that 
would not be legal, I understand. So, pattern  

261
00:26:49,520 --> 00:26:54,160
matching is doable and if you have a corpus 
of ticket data you would be able to do that.

262
00:26:55,040 --> 00:27:00,080
I think one of the things that probably shouldn't 
be the case is that you can buy these on eBay.  

263
00:27:00,720 --> 00:27:07,040
I'm not sure that's the intended electronic 
waste disposal method for them, but it seems to  

264
00:27:07,040 --> 00:27:12,480
be where they're going right now. I think it might 
become a bit of a problem because as soon as you  

265
00:27:13,760 --> 00:27:19,120
manage to crack these - work out exactly what's 
on the tickets - and you can buy one of these  

266
00:27:19,120 --> 00:27:27,600
machines, you can probably just write your own. 
Where is it going next? As i say, collecting a lot  

267
00:27:27,600 --> 00:27:32,879
of ticket data if you collect enough data you'll 
be able to do some alignment and work out exactly  

268
00:27:32,880 --> 00:27:39,360
what stuff does. One of the ideas is using BLAST 
or FASTA - these are bioinformatics tools usually  

269
00:27:39,360 --> 00:27:44,639
used for aligning protein strands, they can 
possibly be hacked to align ticket data strands  

270
00:27:45,440 --> 00:27:51,040
with enough energy and time. That could be 
quite an interesting thing because you get  

271
00:27:51,040 --> 00:27:55,120
substrings that match and then you want to 
see the differences between between tickets  

272
00:27:55,120 --> 00:28:00,800
so you're basically determining the best alignment 
which is what BLAST is for. The other interesting  

273
00:28:00,800 --> 00:28:04,560
thing would be to dump the ROMs and also try 
writing via this machine which - I don't know  

274
00:28:04,560 --> 00:28:09,040
how hard that is because I didn't try it. I don't 
have much time to talk about ITSO and e-tickets,  

275
00:28:10,000 --> 00:28:17,360
other than to say they're much better. And just to 
sort of finish off, this is very much security by  

276
00:28:17,360 --> 00:28:24,479
obscurity. I'm already, with a few tickets and 
a week, pulling quite a lot of interesting data  

277
00:28:24,480 --> 00:28:27,520
off. If anyone wants to send me more tickets 
to put through, that would be really helpful,  

278
00:28:28,320 --> 00:28:30,879
because with enough tickets you will 
be able to reverse engineer this.  

279
00:28:31,840 --> 00:28:37,280
Some of the assumptions that were made about how 
mag strike would be used, I don't think are true  

280
00:28:37,280 --> 00:28:41,200
anymore, especially when you can buy this on 
eBay, and it is only going to be a matter of  

281
00:28:41,200 --> 00:28:45,520
time before someone is writing their own, that 
has worked out how to calculate that checksum.

282
00:28:45,520 --> 00:28:52,960
So really we need digital tickets now, not in 
several years because I don't think it's going  

283
00:28:52,960 --> 00:28:58,160
to be too long before the fraudsters have upped 
their game and can write the magstripe as well as  

284
00:28:58,160 --> 00:29:08,903
print the tickets. I hope that was useful and that 
is it, if you have any questions, I'll be outside.

285
00:29:08,903 --> 00:29:09,317
[applause]

