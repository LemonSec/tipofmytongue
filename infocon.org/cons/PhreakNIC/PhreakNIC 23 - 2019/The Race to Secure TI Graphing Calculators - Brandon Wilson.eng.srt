1
00:00:01,860 --> 00:00:07,210
alright thanks for showing up I know

2
00:00:04,960 --> 00:00:11,080
it's a kind of a different talking for

3
00:00:07,210 --> 00:00:15,719
the others so how many you guys are

4
00:00:11,080 --> 00:00:18,640
familiar with di Capri oculars everybody

5
00:00:15,720 --> 00:00:20,980
a a lot of people probably familiar with

6
00:00:18,640 --> 00:00:23,530
them from school they're very expensive

7
00:00:20,980 --> 00:00:26,400
very overpriced devices that schools

8
00:00:23,530 --> 00:00:28,990
require you to buy or use a math class

9
00:00:26,400 --> 00:00:30,880
some people are probably also familiar

10
00:00:28,990 --> 00:00:32,759
with the fact they're programmable that

11
00:00:30,880 --> 00:00:35,710
you can make them do all sorts of things

12
00:00:32,759 --> 00:00:38,678
with math assignments - taking notes for

13
00:00:35,710 --> 00:00:44,769
science classes and then of course

14
00:00:38,679 --> 00:00:45,969
you're playing games yeah but what

15
00:00:44,769 --> 00:00:48,269
people outside the community might not

16
00:00:45,969 --> 00:00:50,679
might not know is that they're a good

17
00:00:48,269 --> 00:00:52,409
learning tools for getting into

18
00:00:50,679 --> 00:00:54,729
programming and reverse engineering a

19
00:00:52,409 --> 00:00:56,620
big chunk of what the community knows

20
00:00:54,729 --> 00:00:57,839
about programming Africa alligators we

21
00:00:56,620 --> 00:01:00,099
know because we figured it out ourselves

22
00:00:57,839 --> 00:01:04,170
so we wrote code not knowing what was

23
00:01:00,100 --> 00:01:08,260
gonna happen we run tests hardware

24
00:01:04,170 --> 00:01:09,970
experiment with it so on so that's never

25
00:01:08,260 --> 00:01:11,080
more applicable than with trying to

26
00:01:09,970 --> 00:01:17,620
break the security that's built into

27
00:01:11,080 --> 00:01:19,390
these things so my goal here is to

28
00:01:17,620 --> 00:01:21,280
provide a personal and historical

29
00:01:19,390 --> 00:01:23,260
overview of what the calculator

30
00:01:21,280 --> 00:01:25,120
community is how it started two major

31
00:01:23,260 --> 00:01:28,200
things that have happened in it where

32
00:01:25,120 --> 00:01:30,220
we're at now hopefully we're going

33
00:01:28,200 --> 00:01:31,570
starts out as kind of like an overview

34
00:01:30,220 --> 00:01:32,950
but it gets really technical really

35
00:01:31,570 --> 00:01:35,529
quickly

36
00:01:32,950 --> 00:01:39,900
there's a lot of slides here so talking

37
00:01:35,530 --> 00:01:39,900
fast but if you have a questions

38
00:01:44,140 --> 00:01:51,430
so Who am I I'm just a guy with a lot of

39
00:01:47,380 --> 00:01:53,470
calculators probably too many okay there

40
00:01:51,430 --> 00:01:57,550
what got me started in the software

41
00:01:53,470 --> 00:02:00,190
development industry and now security

42
00:01:57,550 --> 00:02:01,810
industry these are not complete pictures

43
00:02:00,190 --> 00:02:04,479
because I do have more than what you see

44
00:02:01,810 --> 00:02:06,550
here but as far as I know it is the

45
00:02:04,479 --> 00:02:08,649
world's largest collection of Texas

46
00:02:06,550 --> 00:02:11,350
Instruments graphic calculators and

47
00:02:08,649 --> 00:02:14,350
accessories by that I mean in terms of

48
00:02:11,350 --> 00:02:16,090
variation there are one or two people

49
00:02:14,350 --> 00:02:17,829
that have more of them just in terms of

50
00:02:16,090 --> 00:02:19,120
sheer numbers but as as far as every

51
00:02:17,830 --> 00:02:20,260
model this is everything that I have at

52
00:02:19,120 --> 00:02:22,630
least one of every model that's ever

53
00:02:20,260 --> 00:02:24,459
been married so that's every model from

54
00:02:22,630 --> 00:02:26,739
all over the world every hardware vision

55
00:02:24,459 --> 00:02:28,470
every color very separate one because

56
00:02:26,739 --> 00:02:30,670
there's just so many different colors

57
00:02:28,470 --> 00:02:32,770
every view screen or teachers edition

58
00:02:30,670 --> 00:02:36,339
version every easy spot yellow school

59
00:02:32,770 --> 00:02:38,470
version and a number of one-of-a-kind or

60
00:02:36,340 --> 00:02:42,430
close to one kind of prototypes of

61
00:02:38,470 --> 00:02:44,890
engineering so yeah I grew up with these

62
00:02:42,430 --> 00:02:47,440
things they they gave me my career my

63
00:02:44,890 --> 00:02:50,350
life so I love them and I want to make

64
00:02:47,440 --> 00:02:53,489
sure that they can do absolutely

65
00:02:50,350 --> 00:02:53,489
everything that they're capable of doing

66
00:02:53,850 --> 00:02:59,530
and make sure that everybody else can do

67
00:02:56,910 --> 00:03:00,940
because I'm not the only one they've

68
00:02:59,530 --> 00:03:03,190
actually jump-started a lot of different

69
00:03:00,940 --> 00:03:04,570
a lot of careers and knowledge about

70
00:03:03,190 --> 00:03:06,400
low-level engineering

71
00:03:04,570 --> 00:03:10,810
embedded devices software engineering

72
00:03:06,400 --> 00:03:12,070
and hardware and software so my hope is

73
00:03:10,810 --> 00:03:14,200
that I can share with you a little bit

74
00:03:12,070 --> 00:03:16,420
of my journey with these devices how far

75
00:03:14,200 --> 00:03:20,950
they've come and learn

76
00:03:16,420 --> 00:03:23,140
this phaeton so what is a graphing

77
00:03:20,950 --> 00:03:24,640
calculator well first and foremost its

78
00:03:23,140 --> 00:03:26,319
calculator it's capable of doing

79
00:03:24,640 --> 00:03:27,970
everything a scientific calculator can

80
00:03:26,319 --> 00:03:32,350
do but it also has a large screen

81
00:03:27,970 --> 00:03:33,820
capable graph equations for tracing tray

82
00:03:32,350 --> 00:03:37,090
solutions along the graph or drawn

83
00:03:33,820 --> 00:03:38,709
whatever you want it's got a two point

84
00:03:37,090 --> 00:03:40,810
five millimeter i/o port or in some

85
00:03:38,709 --> 00:03:42,070
cases USB so that you can share

86
00:03:40,810 --> 00:03:43,510
variables and programs between two

87
00:03:42,070 --> 00:03:46,840
calculators or you can connect it to a

88
00:03:43,510 --> 00:03:48,130
computer share them with the

89
00:03:46,840 --> 00:03:50,320
programmable which means you can create

90
00:03:48,130 --> 00:03:52,120
programs like I said that we saw mad for

91
00:03:50,320 --> 00:03:54,310
engineering problems do that using a

92
00:03:52,120 --> 00:03:55,800
basic like language that TI invented

93
00:03:54,310 --> 00:03:58,030
called ti-basic

94
00:03:55,800 --> 00:03:59,860
it does have some very basic commands

95
00:03:58,030 --> 00:04:02,620
for programming games like gather key

96
00:03:59,860 --> 00:04:04,959
parts input and draw on the screen but

97
00:04:02,620 --> 00:04:07,390
it's way too slow to really utilize the

98
00:04:04,959 --> 00:04:10,120
hardware to its maximum potential so for

99
00:04:07,390 --> 00:04:11,619
that we have assembly language and in

100
00:04:10,120 --> 00:04:16,750
one form or another every model with the

101
00:04:11,620 --> 00:04:18,730
exception of the ti-84 unning the

102
00:04:16,750 --> 00:04:19,988
arbitrary neighbor code so some of them

103
00:04:18,730 --> 00:04:23,310
have this capability built into them and

104
00:04:19,988 --> 00:04:23,310
then some of them had to be hacked first

105
00:04:23,850 --> 00:04:27,970
so if the models that came first with

106
00:04:25,840 --> 00:04:29,440
dialogue models or C log I'm

107
00:04:27,970 --> 00:04:32,520
appreciating pronounced it's a log but

108
00:04:29,440 --> 00:04:32,520
I've always said C log so

109
00:04:33,680 --> 00:04:38,600
but these use the zilog z80 processor

110
00:04:36,410 --> 00:04:40,520
which is a very old processor that's

111
00:04:38,600 --> 00:04:41,750
used in a number of devices or devices

112
00:04:40,520 --> 00:04:43,659
in new devices because it's actually

113
00:04:41,750 --> 00:04:46,250
pretty nice it's a very versatile chip

114
00:04:43,660 --> 00:04:48,110
it's six megahertz or on some models

115
00:04:46,250 --> 00:04:50,479
it's been sped up to 50 megahertz

116
00:04:48,110 --> 00:04:52,699
it's an 8-bit CPU is 16-bit addressing

117
00:04:50,479 --> 00:04:55,280
which means it can access a maximum of

118
00:04:52,699 --> 00:04:56,990
64 kilobytes of memory at once and it

119
00:04:55,280 --> 00:04:58,400
has an 8-bit IO port interface so you

120
00:04:56,990 --> 00:05:00,350
can interact with the hardware by

121
00:04:58,400 --> 00:05:02,810
outputting or inputting from one of up

122
00:05:00,350 --> 00:05:05,000
to 206 logical ports and they have

123
00:05:02,810 --> 00:05:07,010
anywhere from up to 32 kilobytes of RAM

124
00:05:05,000 --> 00:05:08,570
while we have to the 128 kilobytes and

125
00:05:07,010 --> 00:05:10,550
some of them the most interesting ones

126
00:05:08,570 --> 00:05:12,349
have flash memory which ranges anywhere

127
00:05:10,550 --> 00:05:14,139
from one megabyte all the way up to four

128
00:05:12,350 --> 00:05:16,250
megabytes

129
00:05:14,139 --> 00:05:17,720
now the first model capable of running

130
00:05:16,250 --> 00:05:19,729
the native assembly programs was the tid

131
00:05:17,720 --> 00:05:22,880
5 very old model that you don't see a

132
00:05:19,729 --> 00:05:24,229
lot of these days rumor has it that TI

133
00:05:22,880 --> 00:05:25,699
employees actually had a bet as to

134
00:05:24,229 --> 00:05:27,889
whether we figure out a way to run

135
00:05:25,699 --> 00:05:29,150
native assembly programs and that turns

136
00:05:27,889 --> 00:05:31,190
out that was a safe bet because the

137
00:05:29,150 --> 00:05:33,859
community did figure out a way and it

138
00:05:31,190 --> 00:05:36,289
was through something called Z show to

139
00:05:33,860 --> 00:05:38,750
explain on T show works to elaborate on

140
00:05:36,289 --> 00:05:40,330
what on a particular feature that some

141
00:05:38,750 --> 00:05:43,669
of these little models have and that's

142
00:05:40,330 --> 00:05:48,020
to transfer backups via the chat graph

143
00:05:43,669 --> 00:05:49,760
link ok exploit millimeter I ok that's

144
00:05:48,020 --> 00:05:51,530
what connects them to the computer and

145
00:05:49,760 --> 00:05:53,539
so these backups are actually just dumps

146
00:05:51,530 --> 00:05:55,340
of the entire gram not just where

147
00:05:53,539 --> 00:05:57,919
variables are stored but the system's

148
00:05:55,340 --> 00:05:58,940
Ram as well and there's also the

149
00:05:57,919 --> 00:06:00,889
calculator software system also supports

150
00:05:58,940 --> 00:06:02,060
something called custom menu entry so

151
00:06:00,889 --> 00:06:04,099
that's what that red arrows pointing to

152
00:06:02,060 --> 00:06:05,960
with a custom button on the keyboard and

153
00:06:04,099 --> 00:06:07,430
so you can add your most commonly used

154
00:06:05,960 --> 00:06:10,659
OS commands in here and be able to

155
00:06:07,430 --> 00:06:10,660
access the

156
00:06:11,369 --> 00:06:15,779
and interested in the way the OS stores

157
00:06:13,589 --> 00:06:17,400
things in this menu is by just keeping

158
00:06:15,779 --> 00:06:18,990
track of the address of the code that

159
00:06:17,400 --> 00:06:21,179
would handle this OS commanded to

160
00:06:18,990 --> 00:06:22,889
selected my dear Anna and it keeps track

161
00:06:21,180 --> 00:06:25,199
of this in system rank which is included

162
00:06:22,889 --> 00:06:26,460
in that computer backup so what that

163
00:06:25,199 --> 00:06:27,899
means is all you have to do is change

164
00:06:26,460 --> 00:06:30,388
the address of one of these custom menu

165
00:06:27,899 --> 00:06:33,449
entries to point to code that we also

166
00:06:30,389 --> 00:06:35,129
embedded that ran back up and execution

167
00:06:33,449 --> 00:06:36,599
and that's what Z shows it's just a

168
00:06:35,129 --> 00:06:40,080
small program that lets you run other

169
00:06:36,599 --> 00:06:41,159
programs so that secret right since you

170
00:06:40,080 --> 00:06:42,359
can even write programs to store them on

171
00:06:41,159 --> 00:06:44,180
the calculator in the form of string

172
00:06:42,360 --> 00:06:47,490
ridiculous

173
00:06:44,180 --> 00:06:49,009
then the tid too came along and it also

174
00:06:47,490 --> 00:06:51,710
had to be hacked in order to enable

175
00:06:49,009 --> 00:06:53,789
executing native assembly code

176
00:06:51,710 --> 00:06:56,388
unfortunately though it has no custom

177
00:06:53,789 --> 00:06:59,009
menu so another method had to be found

178
00:06:56,389 --> 00:07:00,419
but it does have memory backups so we

179
00:06:59,009 --> 00:07:02,749
start taking a look at other things that

180
00:07:00,419 --> 00:07:05,099
are stored in the system Ram

181
00:07:02,749 --> 00:07:06,389
now that the opera system on the

182
00:07:05,099 --> 00:07:08,399
governor is essentially just a series of

183
00:07:06,389 --> 00:07:10,080
water called contexts we're just kind of

184
00:07:08,399 --> 00:07:11,699
like built-in applications things like

185
00:07:10,080 --> 00:07:13,800
the home screen the equation editors the

186
00:07:11,699 --> 00:07:15,389
graph screen things like that in each

187
00:07:13,800 --> 00:07:16,620
context is a table of addresses that

188
00:07:15,389 --> 00:07:17,969
point to handlers for different things

189
00:07:16,620 --> 00:07:20,520
like what happens when you press the key

190
00:07:17,969 --> 00:07:22,229
and the key press handler is the most

191
00:07:20,520 --> 00:07:25,229
important one it's called the CX main

192
00:07:22,229 --> 00:07:26,459
handler and whenever you switch to so

193
00:07:25,229 --> 00:07:27,748
whenever you switch to a new context

194
00:07:26,459 --> 00:07:29,639
these handler addresses gets stored in

195
00:07:27,749 --> 00:07:31,680
the consistent Ram so our goal is to

196
00:07:29,639 --> 00:07:33,930
find a way at runtime to override that's

197
00:07:31,680 --> 00:07:36,889
the X main Handler and that's done by

198
00:07:33,930 --> 00:07:39,089
another piece of functionality that is

199
00:07:36,889 --> 00:07:41,430
storing values to variables like real

200
00:07:39,089 --> 00:07:44,309
variables mathematically real Erebus

201
00:07:41,430 --> 00:07:47,370
complex variables those are stored in

202
00:07:44,309 --> 00:07:49,469
RAM as 9 bytes and then when you copy

203
00:07:47,370 --> 00:07:50,969
from one variable to another those 9

204
00:07:49,469 --> 00:07:54,209
bytes are just copied from the source

205
00:07:50,969 --> 00:07:56,490
variable to wherever the data for second

206
00:07:54,209 --> 00:07:59,550
parallelism so if we modify one variable

207
00:07:56,490 --> 00:08:00,990
like X with the bytes that we want if we

208
00:07:59,550 --> 00:08:02,969
modify it with the address of code that

209
00:08:00,990 --> 00:08:04,529
we have bed in that memory back up and

210
00:08:02,969 --> 00:08:06,719
then modify the location of a second

211
00:08:04,529 --> 00:08:09,180
real variable like why it's a point to

212
00:08:06,719 --> 00:08:10,040
see X main instead of the actual data

213
00:08:09,180 --> 00:08:12,230
for that

214
00:08:10,040 --> 00:08:14,540
the Macan overwrites the x-men by just

215
00:08:12,230 --> 00:08:15,830
storing X to Y so just over rice just

216
00:08:14,540 --> 00:08:18,110
copies 9 bytes from one place to another

217
00:08:15,830 --> 00:08:19,460
so once you do that CX mains overridden

218
00:08:18,110 --> 00:08:22,790
and then the next time you press a key

219
00:08:19,460 --> 00:08:24,109
you got Cobra so that gives us a shell

220
00:08:22,790 --> 00:08:28,640
we wish to run other programs just like

221
00:08:24,110 --> 00:08:30,710
you see show link came along the ti-83

222
00:08:28,640 --> 00:08:32,720
it's at this model actually has backdoor

223
00:08:30,710 --> 00:08:34,370
in it the T I put there which allows

224
00:08:32,720 --> 00:08:36,710
directly running assembly programs that

225
00:08:34,370 --> 00:08:38,630
are stored in RAM and that backdoor is

226
00:08:36,710 --> 00:08:40,010
hidden in the send command which is

227
00:08:38,630 --> 00:08:41,750
normally used for transferring variables

228
00:08:40,010 --> 00:08:44,660
from one calculator to another using

229
00:08:41,750 --> 00:08:45,890
that to my report but if you put a nine

230
00:08:44,660 --> 00:08:47,150
right after the command

231
00:08:45,890 --> 00:08:48,890
they won't transfer the variable at all

232
00:08:47,150 --> 00:08:51,079
instead execute it as the over native

233
00:08:48,890 --> 00:08:52,640
code so the th piece the first

234
00:08:51,080 --> 00:08:56,240
calculator I ever had so this is right

235
00:08:52,640 --> 00:08:57,650
around the time that I and then when T I

236
00:08:56,240 --> 00:08:59,180
saw that there was a big booming

237
00:08:57,650 --> 00:09:01,699
interest in assembly programming through

238
00:08:59,180 --> 00:09:03,500
this backdoor they decided to add really

239
00:09:01,700 --> 00:09:07,250
nice assembly support to the taking 6

240
00:09:03,500 --> 00:09:08,860
which is a new and improved 5 and that

241
00:09:07,250 --> 00:09:10,850
calculator has a brand new command ASM

242
00:09:08,860 --> 00:09:12,710
which is intended for running assembly

243
00:09:10,850 --> 00:09:14,420
programs right from the beginning so

244
00:09:12,710 --> 00:09:15,950
they not only provided some basic

245
00:09:14,420 --> 00:09:17,719
documentation for how they used system

246
00:09:15,950 --> 00:09:19,520
RAM and how you sir Ram is laid out they

247
00:09:17,720 --> 00:09:21,470
even included OS hooks so we can

248
00:09:19,520 --> 00:09:27,410
integrate with the OS and expand its

249
00:09:21,470 --> 00:09:30,140
functionality which is really and then

250
00:09:27,410 --> 00:09:31,579
came Flash technology so these to me are

251
00:09:30,140 --> 00:09:33,980
the most interesting models because they

252
00:09:31,580 --> 00:09:36,320
are upgradeable in terms of OS upgrades

253
00:09:33,980 --> 00:09:37,430
flash applications which have tighter OS

254
00:09:36,320 --> 00:09:40,910
integration and they're stored in

255
00:09:37,430 --> 00:09:42,770
Flash's the RAM USB ports and security

256
00:09:40,910 --> 00:09:45,170
application implementations to protect

257
00:09:42,770 --> 00:09:48,300
some of that and whenever something's

258
00:09:45,170 --> 00:09:54,120
designed to keep you from doing it

259
00:09:48,300 --> 00:09:55,800
so just the note in Europe they make

260
00:09:54,120 --> 00:09:56,760
these model numbers really confusing it

261
00:09:55,800 --> 00:10:00,089
makes it really difficult to collect

262
00:09:56,760 --> 00:10:01,740
them so first they made the teddy 3 then

263
00:10:00,090 --> 00:10:03,240
they may be taking Plus and then they

264
00:10:01,740 --> 00:10:04,980
may get 84 plus so there was never

265
00:10:03,240 --> 00:10:07,890
actually a plain old ta before they just

266
00:10:04,980 --> 00:10:10,200
went straight to the plus so that would

267
00:10:07,890 --> 00:10:11,699
lead you to believe that because there's

268
00:10:10,200 --> 00:10:12,930
no plus in the name might not have flash

269
00:10:11,700 --> 00:10:15,810
memory but actually just doesn't exist

270
00:10:12,930 --> 00:10:18,000
and then then they made a model call the

271
00:10:15,810 --> 00:10:19,650
Katy for Pocket FR which is just a

272
00:10:18,000 --> 00:10:21,150
physically smaller 284 plus so it is a

273
00:10:19,650 --> 00:10:24,329
plus but they didn't put plus in the

274
00:10:21,150 --> 00:10:25,890
name it's otherwise identical in every

275
00:10:24,330 --> 00:10:27,900
way and then they may be to give you

276
00:10:25,890 --> 00:10:29,730
four plus pocket SC which is just a

277
00:10:27,900 --> 00:10:31,199
physically smaller ta four plus Silver

278
00:10:29,730 --> 00:10:34,290
Edition except they did put plus in the

279
00:10:31,200 --> 00:10:35,610
name so it's just then there were all

280
00:10:34,290 --> 00:10:38,010
sorts of duplicates so the exact same

281
00:10:35,610 --> 00:10:40,640
calculators so doesn't spread they just

282
00:10:38,010 --> 00:10:43,380
left a different name on it so like the

283
00:10:40,640 --> 00:10:45,600
tape do stats and TT stands afar

284
00:10:43,380 --> 00:10:47,640
my apartments France by the way they're

285
00:10:45,600 --> 00:10:49,080
really just EIU threes then you have a

286
00:10:47,640 --> 00:10:49,860
given T plus thought fr which actually

287
00:10:49,080 --> 00:10:51,420
could be referring to two different

288
00:10:49,860 --> 00:10:53,100
calculators they use the exact same name

289
00:10:51,420 --> 00:10:54,780
of your binoculars one is it just--it 80

290
00:10:53,100 --> 00:10:56,880
plus and then the other is t4 plus

291
00:10:54,780 --> 00:10:59,040
Silver Edition then there's a taking two

292
00:10:56,880 --> 00:11:00,630
plus which is just an 83 plus exact same

293
00:10:59,040 --> 00:11:03,000
thing they just put two minus two or

294
00:11:00,630 --> 00:11:04,950
three and then the ti-83 premium see he

295
00:11:03,000 --> 00:11:07,560
which is exactly the same as T plus C

296
00:11:04,950 --> 00:11:09,360
and then they made it a 4 plus T stands

297
00:11:07,560 --> 00:11:13,560
for test but that's actually just t4

298
00:11:09,360 --> 00:11:15,510
plus Silver Edition so it's just and

299
00:11:13,560 --> 00:11:17,689
they're still really just release two

300
00:11:15,510 --> 00:11:17,689
more

301
00:11:18,850 --> 00:11:22,610
so while the z80 models are by far my

302
00:11:21,470 --> 00:11:24,290
favorite we're on the most knowledgeable

303
00:11:22,610 --> 00:11:26,690
there are of course others such as the

304
00:11:24,290 --> 00:11:28,520
Motorola 6800 models at least starting

305
00:11:26,690 --> 00:11:30,410
with decoding TI 92 which came out

306
00:11:28,520 --> 00:11:32,840
around the same time isn't e85 and it

307
00:11:30,410 --> 00:11:34,339
has a QWERTY keyboard which is which is

308
00:11:32,840 --> 00:11:35,450
cool but unfortunately like I said

309
00:11:34,340 --> 00:11:37,310
banned on most standardized tests

310
00:11:35,450 --> 00:11:40,370
because it's technically considered a

311
00:11:37,310 --> 00:11:42,079
computer desk one thing that's unique

312
00:11:40,370 --> 00:11:43,610
about this model is that had actually

313
00:11:42,080 --> 00:11:45,350
had an expansion port on the back of it

314
00:11:43,610 --> 00:11:47,020
which would let you add features or even

315
00:11:45,350 --> 00:11:49,370
turn it into an entirely different model

316
00:11:47,020 --> 00:11:51,949
so these models are really rare because

317
00:11:49,370 --> 00:11:53,990
there's the TI 9 T 2 module 1092 2

318
00:11:51,950 --> 00:11:55,310
module and there's the TI 9 to me module

319
00:11:53,990 --> 00:11:57,980
II for Europe and that just adds more

320
00:11:55,310 --> 00:11:59,750
RAM language options to it and then

321
00:11:57,980 --> 00:12:02,330
there's the TI 92 plus module which is

322
00:11:59,750 --> 00:12:05,030
by far the most interesting one it's

323
00:12:02,330 --> 00:12:07,100
equally as rare though it turns to TI 92

324
00:12:05,030 --> 00:12:08,600
well it turns a TI 92 into a 10 92 Plus

325
00:12:07,100 --> 00:12:11,150
which gives it flash memory and upgrade

326
00:12:08,600 --> 00:12:14,170
ability and that model is basically the

327
00:12:11,150 --> 00:12:16,250
same as the TI 89 which is that black

328
00:12:14,170 --> 00:12:17,930
except the TI 89 doesn't have a great

329
00:12:16,250 --> 00:12:20,330
keyboard and then the TI on titanium

330
00:12:17,930 --> 00:12:22,250
next to it in grey which has some minor

331
00:12:20,330 --> 00:12:26,810
hardware changes and it adds a USB port

332
00:12:22,250 --> 00:12:28,730
to it which is really useful then

333
00:12:26,810 --> 00:12:32,209
there's the ti-nspire models which are

334
00:12:28,730 --> 00:12:33,560
ARM based I really hate these

335
00:12:32,210 --> 00:12:35,030
calculators because they're really big a

336
00:12:33,560 --> 00:12:37,160
volume and they're not really useful

337
00:12:35,030 --> 00:12:39,709
they're more educational tools and are

338
00:12:37,160 --> 00:12:41,360
really practical devices but they do

339
00:12:39,710 --> 00:12:42,590
have swappable keyboards and probably

340
00:12:41,360 --> 00:12:44,600
the most significant one is the TI 84

341
00:12:42,590 --> 00:12:46,760
plus keypad as a most significant keypad

342
00:12:44,600 --> 00:12:48,650
which if you snap that into it causes it

343
00:12:46,760 --> 00:12:50,870
to emulate the TI 84 plus which makes it

344
00:12:48,650 --> 00:12:53,270
kind of sort of useful again and then

345
00:12:50,870 --> 00:12:54,890
there are versions that that don't have

346
00:12:53,270 --> 00:12:58,150
a cast and then versions that do cast

347
00:12:54,890 --> 00:12:58,150
means computer out for system

348
00:13:00,070 --> 00:13:04,089
[Music]

349
00:13:01,410 --> 00:13:05,380
then they have the ti-nspire CX models

350
00:13:04,089 --> 00:13:07,690
again both the cast and Anan cast

351
00:13:05,380 --> 00:13:08,649
version those have color LCDs and

352
00:13:07,690 --> 00:13:13,149
they're redesigned to be a little bit

353
00:13:08,649 --> 00:13:14,110
sleeker but they're another big reason I

354
00:13:13,149 --> 00:13:16,330
think these is that they're completely

355
00:13:14,110 --> 00:13:17,950
100% locked down unlike all the others

356
00:13:16,330 --> 00:13:20,550
until you understand lockdown no way to

357
00:13:17,950 --> 00:13:22,630
execute native code at all unless you

358
00:13:20,550 --> 00:13:24,579
jailbreak it for lack of a better term

359
00:13:22,630 --> 00:13:27,089
there's something called endless it's

360
00:13:24,579 --> 00:13:29,890
kind of like the Z show that lets you

361
00:13:27,089 --> 00:13:32,529
read it real Abel's unsigned code

362
00:13:29,890 --> 00:13:34,209
execution on for some reason ci fights

363
00:13:32,529 --> 00:13:36,010
this really hard they try to fix

364
00:13:34,209 --> 00:13:38,079
vulnerabilities that uses as soon as

365
00:13:36,010 --> 00:13:42,040
they can weigh more than the autumn of

366
00:13:38,079 --> 00:13:44,219
other models which is why they why did

367
00:13:42,040 --> 00:13:47,260
we focus on the worst ones I don't know

368
00:13:44,220 --> 00:13:49,480
and then finally we have the EZ eight

369
00:13:47,260 --> 00:13:50,920
models these are the newest models that

370
00:13:49,480 --> 00:13:53,410
have color LCDs you go to Walmart this

371
00:13:50,920 --> 00:13:55,540
is what you see unlike the z80 models

372
00:13:53,410 --> 00:13:58,260
these have what's called an easy a TV

373
00:13:55,540 --> 00:14:01,269
for enhanced I guess nobody really knows

374
00:13:58,260 --> 00:14:04,529
this is CTU supports a 24-bit addressing

375
00:14:01,269 --> 00:14:04,529
and it has backward compatibility with

376
00:14:06,540 --> 00:14:11,620
the basic and the hardware interface

377
00:14:10,149 --> 00:14:12,399
that's inside of the calculators

378
00:14:11,620 --> 00:14:14,079
completely new

379
00:14:12,399 --> 00:14:17,950
it's totally redesigned with security in

380
00:14:14,079 --> 00:14:19,870
mind so unlike the z80 models which have

381
00:14:17,950 --> 00:14:22,120
like a paging or bank switching system

382
00:14:19,870 --> 00:14:26,589
the easy idea models have a flat memory

383
00:14:22,120 --> 00:14:28,800
model which change the security based on

384
00:14:26,589 --> 00:14:28,800
that

385
00:14:28,880 --> 00:14:34,760
the TA through premium Cee hardware-wise

386
00:14:31,370 --> 00:14:36,260
is identical to this model but it has a

387
00:14:34,760 --> 00:14:38,030
different OS on it which includes an

388
00:14:36,260 --> 00:14:38,480
exact math engine that's only sold in

389
00:14:38,030 --> 00:14:40,850
Europe

390
00:14:38,480 --> 00:14:42,740
so one thing TI really wants to prevent

391
00:14:40,850 --> 00:14:48,440
is being able to run that nicer OS on

392
00:14:42,740 --> 00:14:51,380
the US ta for plus C but there and then

393
00:14:48,440 --> 00:14:53,630
the then there's RT 84 + c e - t team

394
00:14:51,380 --> 00:14:55,280
for test which is the european version

395
00:14:53,630 --> 00:14:56,840
of the plus C it's actually got a

396
00:14:55,280 --> 00:14:59,689
testing led on and then playing steering

397
00:14:56,840 --> 00:15:00,800
the tests you know that's like a special

398
00:14:59,690 --> 00:15:02,150
testing mode where you can access

399
00:15:00,800 --> 00:15:03,949
documents or notes or anything so you

400
00:15:02,150 --> 00:15:06,550
can't cheat so take a good look at your

401
00:15:03,950 --> 00:15:06,550
desk

402
00:15:09,530 --> 00:15:13,910
so having said all that there are some

403
00:15:12,830 --> 00:15:15,110
really cool things you can do with these

404
00:15:13,910 --> 00:15:16,550
to have absolutely nothing to do with

405
00:15:15,110 --> 00:15:20,510
calculators nothing to do with math or

406
00:15:16,550 --> 00:15:23,209
school or even games since some of these

407
00:15:20,510 --> 00:15:24,710
models have worked on the go USB ports

408
00:15:23,210 --> 00:15:26,300
it's possible to connect any number of

409
00:15:24,710 --> 00:15:27,380
years before it rolls to it so instead

410
00:15:26,300 --> 00:15:30,740
of plugging in the computer you can also

411
00:15:27,380 --> 00:15:32,960
plug of the devices into it so anything

412
00:15:30,740 --> 00:15:34,220
from Bluetooth or Wi-Fi adapters so the

413
00:15:32,960 --> 00:15:36,740
cop goes can communicate wirelessly with

414
00:15:34,220 --> 00:15:38,810
each other serial adapters - keyboards

415
00:15:36,740 --> 00:15:42,020
and mice even using flash drives hard

416
00:15:38,810 --> 00:15:47,660
drives floppy drives all that actually

417
00:15:42,020 --> 00:15:49,670
exists except for the Wi-Fi one but the

418
00:15:47,660 --> 00:15:51,110
others do exist and they have a these

419
00:15:49,670 --> 00:15:53,300
hapless have a great unique on the go

420
00:15:51,110 --> 00:15:54,770
USB controller USB controller one that's

421
00:15:53,300 --> 00:15:56,300
really flexible and allows you to do

422
00:15:54,770 --> 00:15:58,880
things that really should not be able to

423
00:15:56,300 --> 00:16:01,250
do real or pieces of DSP protocol and

424
00:15:58,880 --> 00:16:03,920
the best example of that would be the

425
00:16:01,250 --> 00:16:06,040
PlayStation 3 jailbreak which they might

426
00:16:03,920 --> 00:16:06,040
remember

427
00:16:09,350 --> 00:16:13,550
that happened shortly after our OS was

428
00:16:11,420 --> 00:16:15,530
taken away long story short there was a

429
00:16:13,550 --> 00:16:17,390
USB based exploit that required

430
00:16:15,530 --> 00:16:19,699
connecting a teensy or similar device

431
00:16:17,390 --> 00:16:21,740
like that to your ps3 to enable unsigned

432
00:16:19,700 --> 00:16:22,970
code execution but when it came out of

433
00:16:21,740 --> 00:16:24,590
course teens is all over the world sold

434
00:16:22,970 --> 00:16:26,120
out and we're back order nobody could

435
00:16:24,590 --> 00:16:28,100
get them so they needed some other way

436
00:16:26,120 --> 00:16:29,840
to trigger the exploit so I looked into

437
00:16:28,100 --> 00:16:31,310
how it works and realized that it's

438
00:16:29,840 --> 00:16:33,050
basically it's basically simulating a

439
00:16:31,310 --> 00:16:34,339
USB hub and it's virtually attaching and

440
00:16:33,050 --> 00:16:36,290
detaching devices in a very particular

441
00:16:34,340 --> 00:16:39,580
order to trigger a memory corruption

442
00:16:36,290 --> 00:16:42,620
exploit and the way that it does that is

443
00:16:39,580 --> 00:16:44,150
the USB peripheral like the teensy has

444
00:16:42,620 --> 00:16:45,920
to be able to pretend to be other USB

445
00:16:44,150 --> 00:16:49,250
devices temporarily by changing its own

446
00:16:45,920 --> 00:16:50,839
address in software so that it can

447
00:16:49,250 --> 00:16:52,040
pretend to be these virtual devices that

448
00:16:50,840 --> 00:16:53,570
it claims are being attached and

449
00:16:52,040 --> 00:16:55,160
detached and that is something that the

450
00:16:53,570 --> 00:16:58,730
calculators are able to do so I

451
00:16:55,160 --> 00:16:59,780
implemented it and like two days after

452
00:16:58,730 --> 00:17:01,730
that came out people were able to

453
00:16:59,780 --> 00:17:05,240
jailbreak the ps3 using these

454
00:17:01,730 --> 00:17:06,380
calculators and then of course you know

455
00:17:05,240 --> 00:17:09,010
you can also simulate other devices

456
00:17:06,380 --> 00:17:12,709
other USB devices as well such as wispy

457
00:17:09,010 --> 00:17:14,990
keyboards mice Skylanders Portola Disney

458
00:17:12,709 --> 00:17:17,510
infinity portal I have included a

459
00:17:14,990 --> 00:17:18,740
calculator or a computer off off these

460
00:17:17,510 --> 00:17:19,970
doctors might put it by having they tend

461
00:17:18,740 --> 00:17:27,079
to be using a flash drive for the blue

462
00:17:19,970 --> 00:17:29,300
Amazon and then of course yeah so why

463
00:17:27,079 --> 00:17:30,590
have security in calculators well with

464
00:17:29,300 --> 00:17:32,480
flash memory first came into the car to

465
00:17:30,590 --> 00:17:35,090
the world see I actually sold plastic

466
00:17:32,480 --> 00:17:37,220
applications for $7 and $15 a piece in

467
00:17:35,090 --> 00:17:38,540
their online store and these would range

468
00:17:37,220 --> 00:17:40,610
anywhere from pocket organizer

469
00:17:38,540 --> 00:17:43,909
applications to spreadsheet applications

470
00:17:40,610 --> 00:17:45,110
to figure out table applications to you

471
00:17:43,910 --> 00:17:46,400
know everything to enhancing the

472
00:17:45,110 --> 00:17:49,070
built-in math capabilities they even

473
00:17:46,400 --> 00:17:51,080
release games and they would provide an

474
00:17:49,070 --> 00:17:53,689
SDK for free so that you could make your

475
00:17:51,080 --> 00:17:55,250
own but then they would charge $99 for

476
00:17:53,690 --> 00:17:57,620
the right to release three applications

477
00:17:55,250 --> 00:17:59,120
in their online store or for free so

478
00:17:57,620 --> 00:18:01,219
they turn $9 fee so you could make three

479
00:17:59,120 --> 00:18:02,179
free applications and naturally they

480
00:18:01,220 --> 00:18:04,100
wouldn't want these applications to be

481
00:18:02,180 --> 00:18:05,120
pirated so they had to restrict how and

482
00:18:04,100 --> 00:18:07,219
where these applications

483
00:18:05,120 --> 00:18:08,419
install and then of course they also

484
00:18:07,220 --> 00:18:09,830
learned prevent cheating in the

485
00:18:08,420 --> 00:18:11,720
classroom so you can have students

486
00:18:09,830 --> 00:18:13,310
accessing notes or they type to enter

487
00:18:11,720 --> 00:18:15,980
programs that would solve you know the

488
00:18:13,310 --> 00:18:18,050
problems for them during tests so they

489
00:18:15,980 --> 00:18:19,250
had to they one of the Condors to have

490
00:18:18,050 --> 00:18:20,659
like I mention before I have some kind

491
00:18:19,250 --> 00:18:23,000
of restricted mode for the duration of

492
00:18:20,660 --> 00:18:24,740
that test so by the can look at notes or

493
00:18:23,000 --> 00:18:26,930
view programs they wrote or just type

494
00:18:24,740 --> 00:18:27,980
notes into it and then they wanted to

495
00:18:26,930 --> 00:18:30,770
prevent tampering of the operating

496
00:18:27,980 --> 00:18:32,450
systems so we could because if we could

497
00:18:30,770 --> 00:18:37,490
modify that system then we could just

498
00:18:32,450 --> 00:18:38,600
easily patch these in fact I'm convinced

499
00:18:37,490 --> 00:18:39,980
I'm convinced we can actually make a

500
00:18:38,600 --> 00:18:49,459
better OS than them in terms of

501
00:18:39,980 --> 00:18:52,160
capability performance so it's not

502
00:18:49,460 --> 00:18:53,210
really the TI wants to enforce all these

503
00:18:52,160 --> 00:18:54,800
protections they really amounts to

504
00:18:53,210 --> 00:18:57,560
pressure from educators and schools

505
00:18:54,800 --> 00:18:58,790
teachers types of people like that so

506
00:18:57,560 --> 00:19:00,919
they're forced to create an ty

507
00:18:58,790 --> 00:19:02,750
achievement applications like something

508
00:19:00,920 --> 00:19:04,760
called test guard which you can connect

509
00:19:02,750 --> 00:19:07,190
to another calculator remotely delete or

510
00:19:04,760 --> 00:19:08,510
disable programs applications and they

511
00:19:07,190 --> 00:19:09,980
have something called Presta tests which

512
00:19:08,510 --> 00:19:11,300
is a feature in the OS where you can

513
00:19:09,980 --> 00:19:13,520
hold down the key combination and it

514
00:19:11,300 --> 00:19:14,690
puts it in that restricted mode and you

515
00:19:13,520 --> 00:19:16,700
can't get out of it and so you transfer

516
00:19:14,690 --> 00:19:18,140
another variable to it so if you're in

517
00:19:16,700 --> 00:19:20,990
the classroom they could just come by

518
00:19:18,140 --> 00:19:22,250
press those keys and then get run games

519
00:19:20,990 --> 00:19:25,120
you can't do anything unless you get

520
00:19:22,250 --> 00:19:25,120
back till you get back home

521
00:19:25,530 --> 00:19:28,560
which that doesn't keep anybody else

522
00:19:27,480 --> 00:19:29,790
we're doing the same thing so somebody

523
00:19:28,560 --> 00:19:34,679
really hate you they just welcome to

524
00:19:29,790 --> 00:19:38,010
your calculator press those keys now so

525
00:19:34,680 --> 00:19:41,220
I really don't like that feature and

526
00:19:38,010 --> 00:19:44,010
then there's the this is the user

527
00:19:41,220 --> 00:19:45,630
community this that's another key player

528
00:19:44,010 --> 00:19:47,580
in this that that wants to be able to

529
00:19:45,630 --> 00:19:49,200
maintain control over this so if this

530
00:19:47,580 --> 00:19:52,889
really overpriced hardware that we may

531
00:19:49,200 --> 00:19:54,030
be forced to buy so this couch does

532
00:19:52,890 --> 00:19:56,010
countless numbers of things we can make

533
00:19:54,030 --> 00:20:00,750
them do which not only help the kana

534
00:19:56,010 --> 00:20:03,800
community but so now that we know a

535
00:20:00,750 --> 00:20:05,730
little bit about who those players are

536
00:20:03,800 --> 00:20:07,860
start getting into the technical parts

537
00:20:05,730 --> 00:20:14,150
how these work how the security is in

538
00:20:07,860 --> 00:20:14,149
them and how can have will continue to

539
00:20:14,510 --> 00:20:18,360
so at a hardware level the z80 models

540
00:20:17,190 --> 00:20:21,060
really consist of three things you have

541
00:20:18,360 --> 00:20:22,379
the async which is the flash tube and

542
00:20:21,060 --> 00:20:24,389
then all the other hardware that basic

543
00:20:22,380 --> 00:20:26,640
interacts with such as the LCD display

544
00:20:24,390 --> 00:20:29,070
must be boards the i/o boards the

545
00:20:26,640 --> 00:20:30,810
keyboard and all that this is not a

546
00:20:29,070 --> 00:20:32,189
percent accurate because the hardware is

547
00:20:30,810 --> 00:20:34,110
changed over the decades

548
00:20:32,190 --> 00:20:35,820
for example the RAM wasn't always

549
00:20:34,110 --> 00:20:37,740
internal to the async and either the

550
00:20:35,820 --> 00:20:39,360
ASIC by the way is the chip that's all

551
00:20:37,740 --> 00:20:40,980
the subtlety that was singular Schiavone

552
00:20:39,360 --> 00:20:43,409
so the RAM wasn't always in there and

553
00:20:40,980 --> 00:20:44,880
either most the CPU but this is the most

554
00:20:43,410 --> 00:20:48,390
component the most common configuration

555
00:20:44,880 --> 00:20:50,640
that you come across so as I mentioned

556
00:20:48,390 --> 00:20:52,440
the z80 is a six megahertz CPU 16 bit of

557
00:20:50,640 --> 00:20:54,960
dressing can only access 64 kilobytes

558
00:20:52,440 --> 00:20:55,980
memory at a time so since the OS is much

559
00:20:54,960 --> 00:20:58,200
larger than that they have to utilize

560
00:20:55,980 --> 00:20:59,880
something called Bank switching which is

561
00:20:58,200 --> 00:21:02,460
where that's 64 kilobytes split

562
00:20:59,880 --> 00:21:04,650
logically into 4 16 kilobyte pages or

563
00:21:02,460 --> 00:21:06,210
banks and each of those banks can hold

564
00:21:04,650 --> 00:21:07,830
any 16 kilobyte region of memory that

565
00:21:06,210 --> 00:21:09,180
you want so if you what you want access

566
00:21:07,830 --> 00:21:10,620
is the curly swapped into one of those

567
00:21:09,180 --> 00:21:12,870
four banks you just reconfigure that

568
00:21:10,620 --> 00:21:14,250
Bank so that it points to the

569
00:21:12,870 --> 00:21:15,840
two kilobytes which one and then you

570
00:21:14,250 --> 00:21:18,540
access it by accessing the memory

571
00:21:15,840 --> 00:21:20,250
address for that bank as far as

572
00:21:18,540 --> 00:21:22,080
accessing the hardware the znd has 8-bit

573
00:21:20,250 --> 00:21:23,700
IO aggressing so there's a maximum

574
00:21:22,080 --> 00:21:25,770
attune Orca to six IO ports that it can

575
00:21:23,700 --> 00:21:27,540
talk to and the purpose of each i/o port

576
00:21:25,770 --> 00:21:28,950
is different for each model but the

577
00:21:27,540 --> 00:21:31,320
flash models all follow the same basic

578
00:21:28,950 --> 00:21:34,200
pattern which is everything from 0 all

579
00:21:31,320 --> 00:21:36,240
the way up support AF they do everything

580
00:21:34,200 --> 00:21:40,520
from AC configuration LCD access

581
00:21:36,240 --> 00:21:42,540
keyboard input USB control everything so

582
00:21:40,520 --> 00:21:44,430
there are a few rules about how the Bank

583
00:21:42,540 --> 00:21:45,899
switching works in 82 plus in 84 plus

584
00:21:44,430 --> 00:21:47,850
series like I said is split up into four

585
00:21:45,900 --> 00:21:49,530
banks 16 kilobytes each starting at

586
00:21:47,850 --> 00:21:52,800
address zero four thousand eight

587
00:21:49,530 --> 00:21:54,720
thousand and sees the first Bank except

588
00:21:52,800 --> 00:21:57,149
there's some weirdness during the cold

589
00:21:54,720 --> 00:21:59,309
boot it always has wrong page zero which

590
00:21:57,150 --> 00:22:00,960
is the start of the OS and the second

591
00:21:59,309 --> 00:22:02,760
Bank is constantly being used to swap in

592
00:22:00,960 --> 00:22:04,980
different chunks of the OS which is way

593
00:22:02,760 --> 00:22:06,210
bigger than support otherwise I'm

594
00:22:04,980 --> 00:22:08,220
constantly swapping and what it needs

595
00:22:06,210 --> 00:22:09,630
when it needs it and then the third and

596
00:22:08,220 --> 00:22:11,070
the fourth banks typically have grandpa

597
00:22:09,630 --> 00:22:13,140
just swapped in meaning there's usually

598
00:22:11,070 --> 00:22:15,300
32 kilobytes of RAM accessible to the OS

599
00:22:13,140 --> 00:22:16,500
at any given time some of that is

600
00:22:15,300 --> 00:22:18,090
usually a m-- and some of that is the

601
00:22:16,500 --> 00:22:19,850
hardware stack and then the rest of the

602
00:22:18,090 --> 00:22:22,110
system ran with us can use internally

603
00:22:19,850 --> 00:22:24,000
and as you can see the last big banks

604
00:22:22,110 --> 00:22:26,639
all have IO ports that control of those

605
00:22:24,000 --> 00:22:28,470
the last two banks on IO ports that

606
00:22:26,640 --> 00:22:30,330
control what pages swap them so if you

607
00:22:28,470 --> 00:22:32,580
want to swap rompe one into the second

608
00:22:30,330 --> 00:22:35,580
bank you just write a 1 into IO 46

609
00:22:32,580 --> 00:22:37,830
that's the second box or if you want to

610
00:22:35,580 --> 00:22:44,820
swap rampage 81 into the third bank you

611
00:22:37,830 --> 00:22:46,710
write 81 to IO 4 7 so now the most

612
00:22:44,820 --> 00:22:47,639
important i/o port in the entire ASIC is

613
00:22:46,710 --> 00:22:49,500
414

614
00:22:47,640 --> 00:22:51,480
which controls flash unlocking and

615
00:22:49,500 --> 00:22:52,980
relocking so whenever the flash chip is

616
00:22:51,480 --> 00:22:55,290
blocked which is almost always the case

617
00:22:52,980 --> 00:22:56,130
right in a race commands to the flash

618
00:22:55,290 --> 00:22:57,870
chip are ignored

619
00:22:56,130 --> 00:23:00,710
so essentially you can't modify flash

620
00:22:57,870 --> 00:23:00,709
and save a market

621
00:23:00,770 --> 00:23:04,030
and the only code that kind of mock it

622
00:23:02,540 --> 00:23:07,790
is the flash so I can only modify itself

623
00:23:04,030 --> 00:23:09,740
so it also controls whether certain I of

624
00:23:07,790 --> 00:23:11,210
work that I used to be modified so we

625
00:23:09,740 --> 00:23:12,950
court is like that we call that a

626
00:23:11,210 --> 00:23:14,059
privileged i/o for it because / it's

627
00:23:12,950 --> 00:23:16,610
going to be a lot before you can write

628
00:23:14,059 --> 00:23:18,050
to it so it doesn't always deal with

629
00:23:16,610 --> 00:23:20,360
class that's just what it's come to be

630
00:23:18,050 --> 00:23:22,129
known by and the way it works is very

631
00:23:20,360 --> 00:23:24,469
simple you just write a one to unlock it

632
00:23:22,130 --> 00:23:27,080
or a zero to lock it back what's not

633
00:23:24,470 --> 00:23:28,100
simple though is that you can only write

634
00:23:27,080 --> 00:23:30,080
to that port in certain circumstances

635
00:23:28,100 --> 00:23:32,860
there's a special sequence of z80

636
00:23:30,080 --> 00:23:34,520
instructions which are this five there

637
00:23:32,860 --> 00:23:36,740
there's a certain sequence of

638
00:23:34,520 --> 00:23:38,389
instructions that say like I am one and

639
00:23:36,740 --> 00:23:41,150
Row 1 and D I disable interrupts that

640
00:23:38,390 --> 00:23:44,840
has to be run in order for a right step

641
00:23:41,150 --> 00:23:46,940
or stick and those instructions

642
00:23:44,840 --> 00:23:48,080
explicitly prevent interrupts from

643
00:23:46,940 --> 00:23:49,490
running and interfering with this

644
00:23:48,080 --> 00:23:53,149
process it can't steal control of

645
00:23:49,490 --> 00:23:54,650
Saturday the privileged paid ranges are

646
00:23:53,150 --> 00:23:56,270
mentioned there but as you can see the

647
00:23:54,650 --> 00:24:01,250
only pages that are allowed to modify

648
00:23:56,270 --> 00:24:04,510
clash are the flash which is the OS so

649
00:24:01,250 --> 00:24:04,510
you can't modify the eyes unless you are

650
00:24:07,390 --> 00:24:16,100
yes special sequence is just required to

651
00:24:12,740 --> 00:24:18,170
make it work or is enforced to prevent

652
00:24:16,100 --> 00:24:20,300
it's required it's required to make it

653
00:24:18,170 --> 00:24:22,040
work if you don't have not not I'm on di

654
00:24:20,300 --> 00:24:23,540
if you just if you just simply you know

655
00:24:22,040 --> 00:24:25,340
put one and a and then right now you

656
00:24:23,540 --> 00:24:26,870
have a go for 14 nothing happens it gets

657
00:24:25,340 --> 00:24:28,520
ignored so rights to that port are

658
00:24:26,870 --> 00:24:29,629
ignored unless that it's preceded by

659
00:24:28,520 --> 00:24:31,220
those instruction so there's some

660
00:24:29,630 --> 00:24:33,080
hardware that's looking at what

661
00:24:31,220 --> 00:24:34,250
instructions are going on exactly

662
00:24:33,080 --> 00:24:35,389
yeah there's hardware that actually

663
00:24:34,250 --> 00:24:36,590
looks to see to make sure those

664
00:24:35,390 --> 00:24:38,360
instructions are fetched from a

665
00:24:36,590 --> 00:24:40,629
privileged page otherwise the rights my

666
00:24:38,360 --> 00:24:40,629
custody

667
00:24:42,030 --> 00:24:48,360
so to give an example of with howhow TI

668
00:24:46,980 --> 00:24:52,410
uses this protection there's logic

669
00:24:48,360 --> 00:24:54,149
behind receiving here's the logic for

670
00:24:52,410 --> 00:24:56,790
receiving and installing an OS upgrade

671
00:24:54,150 --> 00:24:58,650
so in a loop the boot code will one

672
00:24:56,790 --> 00:24:59,760
receive a chunk of the OS data and where

673
00:24:58,650 --> 00:25:02,550
should be written to you on the flash

674
00:24:59,760 --> 00:25:03,990
chip to unlock flash using that

675
00:25:02,550 --> 00:25:06,570
privilege sequence and then writing the

676
00:25:03,990 --> 00:25:07,800
one to port 14 and then it checks for a

677
00:25:06,570 --> 00:25:09,780
whole bunch of tricks that we might use

678
00:25:07,800 --> 00:25:12,000
to still control away while that's

679
00:25:09,780 --> 00:25:13,320
unlocked and then three it writes the OS

680
00:25:12,000 --> 00:25:15,270
data to the specified area of the

681
00:25:13,320 --> 00:25:16,800
question and then finally for a real aux

682
00:25:15,270 --> 00:25:18,960
flashback using the same privilege

683
00:25:16,800 --> 00:25:21,510
sequence as poor writing a 0 to lock it

684
00:25:18,960 --> 00:25:23,100
back so anytime do is does something

685
00:25:21,510 --> 00:25:24,780
involving modifying flash it will unlock

686
00:25:23,100 --> 00:25:25,830
it performs some simple operation as

687
00:25:24,780 --> 00:25:30,840
quickly as it can in the relocker

688
00:25:25,830 --> 00:25:33,169
flashback it's a try to minimize so as I

689
00:25:30,840 --> 00:25:36,240
mentioned the checks for trickery

690
00:25:33,170 --> 00:25:37,530
specifically it checks one checks to

691
00:25:36,240 --> 00:25:40,410
make sure that the SP the stack pointer

692
00:25:37,530 --> 00:25:42,720
lies between C 0 0 and F F of H so

693
00:25:40,410 --> 00:25:43,860
that's the last Bank and it does this to

694
00:25:42,720 --> 00:25:45,690
make sure as B's pointing somewhere in

695
00:25:43,860 --> 00:25:47,100
that last bank somewhere in RAM so that

696
00:25:45,690 --> 00:25:48,630
when it returns back to the caller it

697
00:25:47,100 --> 00:25:50,879
gets what it assumes would be a valid

698
00:25:48,630 --> 00:25:53,160
return address from the stack C one make

699
00:25:50,880 --> 00:25:55,170
sure you can't mess with that too it

700
00:25:53,160 --> 00:25:56,700
checks to make sure or 6 contains a

701
00:25:55,170 --> 00:25:58,020
privileged faster flash page because

702
00:25:56,700 --> 00:26:01,170
that's where any flash 1 locking code

703
00:25:58,020 --> 00:26:03,090
would be running from 3 it checks for 7

704
00:26:01,170 --> 00:26:04,500
to make sure it contains rampage 1 or

705
00:26:03,090 --> 00:26:06,510
system Ram mess and what the OS would

706
00:26:04,500 --> 00:26:08,880
consider the normal running operating

707
00:26:06,510 --> 00:26:10,860
scenario and then for and compliments to

708
00:26:08,880 --> 00:26:12,510
fights at 8000 and Caesar 0 which

709
00:26:10,860 --> 00:26:17,459
confirms that the third and fourth banks

710
00:26:12,510 --> 00:26:22,260
contain writable rampages so in addition

711
00:26:17,460 --> 00:26:24,120
to this there is Harper checks so why

712
00:26:22,260 --> 00:26:26,510
would t I care if we point SP or the

713
00:26:24,120 --> 00:26:29,040
stack pointer to an area of flash well

714
00:26:26,510 --> 00:26:30,840
let's try it and play it out

715
00:26:29,040 --> 00:26:31,980
for starters modifying flash is

716
00:26:30,840 --> 00:26:33,419
complicated it's not as simple as

717
00:26:31,980 --> 00:26:35,670
loading a register value to a memory

718
00:26:33,420 --> 00:26:36,650
address it requires a sequence of memory

719
00:26:35,670 --> 00:26:39,170
management

720
00:26:36,650 --> 00:26:41,480
commands like get chip ID or a sector

721
00:26:39,170 --> 00:26:43,010
program bike things like that so if we

722
00:26:41,480 --> 00:26:45,170
point to speak to a location that's

723
00:26:43,010 --> 00:26:47,300
definitely in ROM such as 1000 which is

724
00:26:45,170 --> 00:26:49,340
in the first bank it's deep and on page

725
00:26:47,300 --> 00:26:51,110
0 first bank and then we jump into some

726
00:26:49,340 --> 00:26:52,310
code that unlocks flash and calls some

727
00:26:51,110 --> 00:26:53,179
sort of sub routine something

728
00:26:52,310 --> 00:26:55,429
interesting lat

729
00:26:53,180 --> 00:26:57,560
the call instruction is gonna attempt to

730
00:26:55,430 --> 00:26:59,660
write the return address to the location

731
00:26:57,560 --> 00:27:01,790
pointed to by a speaker but because s

732
00:26:59,660 --> 00:27:05,060
B's pointing to wrong like if this

733
00:27:01,790 --> 00:27:06,379
screenshots as punch of 80 bytes those

734
00:27:05,060 --> 00:27:07,879
rights are going to be ignored as it's

735
00:27:06,380 --> 00:27:09,410
not following the sequence of

736
00:27:07,880 --> 00:27:12,380
instructions the flash tip instructions

737
00:27:09,410 --> 00:27:14,090
in the exam so when it in violent when

738
00:27:12,380 --> 00:27:15,950
that subroutine finally encounters a

739
00:27:14,090 --> 00:27:17,270
return instruction will do what the

740
00:27:15,950 --> 00:27:18,770
return instruction always does it reads

741
00:27:17,270 --> 00:27:21,080
the first two bytes pointed to by SP

742
00:27:18,770 --> 00:27:23,320
which is 80 and 80 and it'll jump there

743
00:27:21,080 --> 00:27:25,490
so that means no jump to address 8080

744
00:27:23,320 --> 00:27:27,080
not at all what the code intend to do

745
00:27:25,490 --> 00:27:29,330
but because we messed with SP it's

746
00:27:27,080 --> 00:27:30,530
exactly what happens so this would be a

747
00:27:29,330 --> 00:27:32,750
really cool way to still control away

748
00:27:30,530 --> 00:27:33,800
from the OS and the boot code but they

749
00:27:32,750 --> 00:27:36,640
did think of that that was the point of

750
00:27:33,800 --> 00:27:38,960
that check so what do we try next well

751
00:27:36,640 --> 00:27:40,610
this is where the harbor is interesting

752
00:27:38,960 --> 00:27:42,500
we learned through experimentation that

753
00:27:40,610 --> 00:27:43,729
the privileged sequence of instructions

754
00:27:42,500 --> 00:27:44,840
only needs to be read from the

755
00:27:43,730 --> 00:27:46,460
privileged page it doesn't necessarily

756
00:27:44,840 --> 00:27:48,830
have to be executed from that page so

757
00:27:46,460 --> 00:27:50,660
that requires thinking about what

758
00:27:48,830 --> 00:27:52,010
actually happens on the day of us when

759
00:27:50,660 --> 00:27:55,070
instructions are actually being executed

760
00:27:52,010 --> 00:27:57,830
by the processor so when it goes to

761
00:27:55,070 --> 00:27:59,060
execute the RLC which is rotate left

762
00:27:57,830 --> 00:28:01,490
with carry instructions the first yell

763
00:27:59,060 --> 00:28:02,659
over it first has to read the bytes or

764
00:28:01,490 --> 00:28:04,400
the op codes that make up that

765
00:28:02,660 --> 00:28:07,550
instructions that's how it decodes that

766
00:28:04,400 --> 00:28:09,170
is our OC and because it uses index

767
00:28:07,550 --> 00:28:12,350
register IX that's a four byte

768
00:28:09,170 --> 00:28:14,300
instruction and z80 so it reads d DC v

769
00:28:12,350 --> 00:28:16,429
zero zero zero from that privileged page

770
00:28:14,300 --> 00:28:17,870
and then it has to actually execute that

771
00:28:16,430 --> 00:28:21,130
instruction and to do that it has to

772
00:28:17,870 --> 00:28:23,719
read the third bite at IX at offset zero

773
00:28:21,130 --> 00:28:25,160
that's the Eenie byte from the filter

774
00:28:23,720 --> 00:28:27,680
space so there's an awful lot that goes

775
00:28:25,160 --> 00:28:29,240
on just in that one instruction then it

776
00:28:27,680 --> 00:28:30,470
goes to execute the load HL into D

777
00:28:29,240 --> 00:28:32,720
instruction is the second Galdo

778
00:28:30,470 --> 00:28:35,000
instruction which means it has to read

779
00:28:32,720 --> 00:28:36,140
that off code so that's 56 from the

780
00:28:35,000 --> 00:28:38,150
purpose page and then it actually

781
00:28:36,140 --> 00:28:40,940
executes it which means it has to read a

782
00:28:38,150 --> 00:28:42,500
3 by 2 from the printers page so the z80

783
00:28:40,940 --> 00:28:44,960
equivalent of all those instructions all

784
00:28:42,500 --> 00:28:47,000
those bytes is not that I wanna be

785
00:28:44,960 --> 00:28:50,750
which is the unlock sequence so if you

786
00:28:47,000 --> 00:28:54,140
proceed the output support 14 with all

787
00:28:50,750 --> 00:28:55,850
that and set up some memory just set up

788
00:28:54,140 --> 00:28:58,070
IX and I'll set up some memory correctly

789
00:28:55,850 --> 00:29:00,469
so that those mites will be fetched then

790
00:28:58,070 --> 00:29:02,510
at work and the big advantage here is

791
00:29:00,470 --> 00:29:03,919
that none of those instructions actually

792
00:29:02,510 --> 00:29:05,870
disable interrupts they don't set any

793
00:29:03,919 --> 00:29:07,840
remote one which means that after it

794
00:29:05,870 --> 00:29:10,309
runs we could steal control away from

795
00:29:07,840 --> 00:29:16,129
that code or allow other things to run

796
00:29:10,309 --> 00:29:18,620
it could have a nurbs run so all we have

797
00:29:16,130 --> 00:29:20,409
to do is find the instructions in yellow

798
00:29:18,620 --> 00:29:22,399
on our privilege page somewhere

799
00:29:20,409 --> 00:29:22,730
unfortunately though they're not

800
00:29:22,399 --> 00:29:25,279
anywhere

801
00:29:22,730 --> 00:29:27,200
and so as awesome as this is we can see

802
00:29:25,279 --> 00:29:28,700
but it's useful if we make our own OS

803
00:29:27,200 --> 00:29:29,809
because now we can along flash and write

804
00:29:28,700 --> 00:29:31,309
to it without having to disable

805
00:29:29,809 --> 00:29:32,539
interrupts that's something I can't do

806
00:29:31,309 --> 00:29:36,039
since we don't care about the security

807
00:29:32,539 --> 00:29:38,360
we can so

808
00:29:36,039 --> 00:29:40,250
well then comes along the ti-83 plus

809
00:29:38,360 --> 00:29:43,399
Silver Edition which is an enhanced

810
00:29:40,250 --> 00:29:44,630
version of a ti-83 plus it has 128

811
00:29:43,399 --> 00:29:47,299
kilobytes rooms that are just 32

812
00:29:44,630 --> 00:29:49,159
kilobytes it's got a flash chip twice as

813
00:29:47,299 --> 00:29:50,720
large and it's CPU as capable switching

814
00:29:49,159 --> 00:29:52,039
between six megazor megahertz and 50

815
00:29:50,720 --> 00:29:54,590
megahertz so it's actually fine faster

816
00:29:52,039 --> 00:29:56,539
at certain times it takes it got a few

817
00:29:54,590 --> 00:29:58,730
upgrades as well namely IO port five

818
00:29:56,539 --> 00:29:59,779
that's a new i/o port and this i/o for

819
00:29:58,730 --> 00:30:01,520
it actually allows controlling the

820
00:29:59,779 --> 00:30:04,640
rampage has swapped into the last week

821
00:30:01,520 --> 00:30:07,730
forth something that you couldn't do on

822
00:30:04,640 --> 00:30:09,649
yours Mayan plus the thing is though see

823
00:30:07,730 --> 00:30:12,049
I didn't actually update their trickery

824
00:30:09,649 --> 00:30:14,928
checks to validate that the value of

825
00:30:12,049 --> 00:30:17,110
four five makes sense so this can be

826
00:30:14,929 --> 00:30:20,899
used to our advantage

827
00:30:17,110 --> 00:30:22,639
so the OS always expects rampage one to

828
00:30:20,899 --> 00:30:24,439
be in the third bank and it always specs

829
00:30:22,640 --> 00:30:26,179
expects rampage zero to be in the fourth

830
00:30:24,440 --> 00:30:29,299
map but what happens if we swap the

831
00:30:26,179 --> 00:30:32,450
rampage into the last two mates so both

832
00:30:29,299 --> 00:30:34,668
of them have the same rampage well now

833
00:30:32,450 --> 00:30:36,500
things are all kinds of screwed up

834
00:30:34,669 --> 00:30:39,380
even though SP the stack pointer which

835
00:30:36,500 --> 00:30:40,850
has to point in the last Bank even

836
00:30:39,380 --> 00:30:42,830
though it's pointing there the stack is

837
00:30:40,850 --> 00:30:44,510
not there anymore so now we have the

838
00:30:42,830 --> 00:30:46,580
same page swapped into two banks at the

839
00:30:44,510 --> 00:30:48,350
same time so if I were to write a value

840
00:30:46,580 --> 00:30:50,149
to the first byte of the third bank

841
00:30:48,350 --> 00:30:51,860
first drive diabetic box I would

842
00:30:50,149 --> 00:30:53,870
actually be able to read that same byte

843
00:30:51,860 --> 00:30:55,939
from the first byte of the fourth

844
00:30:53,870 --> 00:30:59,629
second redbones so that's definitely

845
00:30:55,940 --> 00:31:01,100
very interesting so what we need to do

846
00:30:59,630 --> 00:31:02,360
is we need to find a section of the OS

847
00:31:01,100 --> 00:31:04,879
or the boot code that unlocks flash

848
00:31:02,360 --> 00:31:07,100
writes a value into the third bank which

849
00:31:04,880 --> 00:31:09,350
is for system Ramos and then attempts to

850
00:31:07,100 --> 00:31:11,060
relock flashback and as luck would have

851
00:31:09,350 --> 00:31:12,500
it there is a very convenient block of

852
00:31:11,060 --> 00:31:14,149
code that does that there is a

853
00:31:12,500 --> 00:31:15,770
particular bit and in fact an entire

854
00:31:14,150 --> 00:31:17,420
fight of the certificate region of flash

855
00:31:15,770 --> 00:31:19,190
that holds whether the OS is valid or

856
00:31:17,420 --> 00:31:21,110
not if it's valid as it usually is

857
00:31:19,190 --> 00:31:22,730
because you're running code on it the

858
00:31:21,110 --> 00:31:24,560
value will be zero so what we can do is

859
00:31:22,730 --> 00:31:26,210
jump directly into the boot code at the

860
00:31:24,560 --> 00:31:27,620
point that it unlocks flash just before

861
00:31:26,210 --> 00:31:29,810
it reads this bike from the certificate

862
00:31:27,620 --> 00:31:31,969
it will read it and it will store it to

863
00:31:29,810 --> 00:31:33,740
an area system Ram called op1 which is

864
00:31:31,970 --> 00:31:36,770
in the third bank and it's that address

865
00:31:33,740 --> 00:31:38,870
84-78 so since we've just used i/o port

866
00:31:36,770 --> 00:31:40,790
five to swap Rampage one into both of

867
00:31:38,870 --> 00:31:44,449
the last two banks writing a zero to

868
00:31:40,790 --> 00:31:46,580
84-78 will also write as area c 478

869
00:31:44,450 --> 00:31:48,440
which is exactly 16 kilobytes ahead in

870
00:31:46,580 --> 00:31:50,300
the fourth bank so if we can craft

871
00:31:48,440 --> 00:31:51,920
things just right we can set the stack

872
00:31:50,300 --> 00:31:55,850
pointer SP so that by the time it gets

873
00:31:51,920 --> 00:31:58,610
to that right to 84-78 SP will be

874
00:31:55,850 --> 00:32:00,320
pointing to say 478 so it will corrupt

875
00:31:58,610 --> 00:32:01,490
itself so when it performs that right

876
00:32:00,320 --> 00:32:03,830
it'll corrupt the return address the

877
00:32:01,490 --> 00:32:06,080
espys pointing to so if the return

878
00:32:03,830 --> 00:32:08,659
address used to be 40 61 writing that

879
00:32:06,080 --> 00:32:09,740
zero will change it to zero zero so as

880
00:32:08,660 --> 00:32:11,180
soon as the code hits the return

881
00:32:09,740 --> 00:32:12,080
instruction it's gonna it's not gonna

882
00:32:11,180 --> 00:32:14,360
return to the boot code it's gonna

883
00:32:12,080 --> 00:32:15,649
return to zero zero you wanted a which

884
00:32:14,360 --> 00:32:18,020
is deep in the OS NRO's

885
00:32:15,650 --> 00:32:19,430
name wrong babe zero and we can use an

886
00:32:18,020 --> 00:32:21,050
OS cursor up at that point there's still

887
00:32:19,430 --> 00:32:22,640
control away from it clean up the stack

888
00:32:21,050 --> 00:32:23,930
or store the value of horn five back to

889
00:32:22,640 --> 00:32:28,490
what it originally was and we still have

890
00:32:23,930 --> 00:32:30,560
question so great for us to use so

891
00:32:28,490 --> 00:32:32,210
that's great but this four five trick

892
00:32:30,560 --> 00:32:37,850
very only works on the apt plus Silver

893
00:32:32,210 --> 00:32:39,590
Edition and up not the original and even

894
00:32:37,850 --> 00:32:42,379
worse we had to use an OS hook to steal

895
00:32:39,590 --> 00:32:44,600
control back made hard code the value of

896
00:32:42,380 --> 00:32:46,550
sv based on the call stack for that

897
00:32:44,600 --> 00:32:48,139
particular OS version Emma had to hard

898
00:32:46,550 --> 00:32:50,210
code a return address that starts at

899
00:32:48,140 --> 00:32:51,830
zero all of which could change from OS

900
00:32:50,210 --> 00:32:53,780
version to OS version so we could be

901
00:32:51,830 --> 00:32:55,010
able to version so what would be really

902
00:32:53,780 --> 00:32:56,750
nice as if we had something that worked

903
00:32:55,010 --> 00:32:57,770
on every more every OS version every

904
00:32:56,750 --> 00:32:59,900
boot code version every hardware

905
00:32:57,770 --> 00:33:01,340
Fishman's to do that you're gonna have

906
00:32:59,900 --> 00:33:02,960
to attack functionality that not only

907
00:33:01,340 --> 00:33:04,929
exist on all models but isn't likely or

908
00:33:02,960 --> 00:33:08,330
you're even able to be changed easily

909
00:33:04,930 --> 00:33:09,920
one such feature is the OSS ability to

910
00:33:08,330 --> 00:33:11,030
receive flash applications from a

911
00:33:09,920 --> 00:33:13,010
connected computer or have the copper

912
00:33:11,030 --> 00:33:14,720
cooler since flash applications are

913
00:33:13,010 --> 00:33:17,210
fixed to multiples of 16 kilobytes in

914
00:33:14,720 --> 00:33:19,220
size even the smallest flash application

915
00:33:17,210 --> 00:33:21,410
can't fit in RAM all at once so that

916
00:33:19,220 --> 00:33:23,390
means the OS has to in the loom receive

917
00:33:21,410 --> 00:33:25,430
a chunk of flash data on long flash

918
00:33:23,390 --> 00:33:26,930
write that to an arbitrary location of

919
00:33:25,430 --> 00:33:28,370
large arbitrary is important and then

920
00:33:26,930 --> 00:33:30,320
relock flash back over and over again

921
00:33:28,370 --> 00:33:32,360
total all the application of the she'd

922
00:33:30,320 --> 00:33:33,830
written the flash now that functionality

923
00:33:32,360 --> 00:33:35,120
has existed in every OS version for

924
00:33:33,830 --> 00:33:36,800
every model since the beginning and they

925
00:33:35,120 --> 00:33:39,699
can't take it out so if it's possible

926
00:33:36,800 --> 00:33:42,020
that would be the perfect name to attack

927
00:33:39,700 --> 00:33:43,610
before something to do as could unlock

928
00:33:42,020 --> 00:33:45,290
splash writes data to an arbitrary

929
00:33:43,610 --> 00:33:46,760
destination we know we have to you know

930
00:33:45,290 --> 00:33:48,710
we have control over the destination

931
00:33:46,760 --> 00:33:51,050
flash page and address the number of

932
00:33:48,710 --> 00:33:52,730
lights to write and device to be written

933
00:33:51,050 --> 00:33:54,200
but we don't have control over is the

934
00:33:52,730 --> 00:33:57,980
source address which is a gram

935
00:33:54,200 --> 00:34:00,080
that means this seven of eight in C 80

936
00:33:57,980 --> 00:34:02,780
there's register pairs HL is a 16-bit

937
00:34:00,080 --> 00:34:04,550
address so H would be the height like

938
00:34:02,780 --> 00:34:07,210
so v 7 of 8 will always be set because

939
00:34:04,550 --> 00:34:11,029
it has to be in RAM and it one of

940
00:34:07,210 --> 00:34:14,120
register iy plus 25 for main reset so we

941
00:34:11,030 --> 00:34:16,670
could set it as in this code the code

942
00:34:14,120 --> 00:34:19,100
that will the wraps de around from 8000

943
00:34:16,670 --> 00:34:20,630
back to 4,000 won't run and then this

944
00:34:19,100 --> 00:34:23,330
routine this routine will write data to

945
00:34:20,630 --> 00:34:24,920
address above 8000 which is all RAM so

946
00:34:23,330 --> 00:34:26,540
it effectively would turn this command

947
00:34:24,920 --> 00:34:29,080
into a Rams Ram copy instead of a

948
00:34:26,540 --> 00:34:29,080
blaster

949
00:34:30,409 --> 00:34:34,639
that's actually a good thing because we

950
00:34:32,600 --> 00:34:37,040
can use this to overwrite the data near

951
00:34:34,639 --> 00:34:38,690
SP SEC corner to all the same values

952
00:34:37,040 --> 00:34:40,940
such as 8080 like in that screenshot

953
00:34:38,690 --> 00:34:42,470
before so when this routine hits a

954
00:34:40,940 --> 00:34:43,970
return instruction they'll jump to 8080

955
00:34:42,469 --> 00:34:45,560
instead we can take control

956
00:34:43,969 --> 00:34:48,859
clean up the stack and return the splash

957
00:34:45,560 --> 00:34:51,080
zone so how do we ensure bit one of our

958
00:34:48,860 --> 00:34:53,720
levels 25 is set even when this routine

959
00:34:51,080 --> 00:34:58,160
will start out by resetting it use

960
00:34:53,719 --> 00:34:59,540
something very similar to 4.0 why - 25 -

961
00:34:58,160 --> 00:35:01,700
a one can flash for a bit one is set

962
00:34:59,540 --> 00:35:03,860
then the boot codes attempt to reset it

963
00:35:01,700 --> 00:35:05,390
with a simple reset bit instructions the

964
00:35:03,860 --> 00:35:07,510
instruction won't work because it's it's

965
00:35:05,390 --> 00:35:09,560
annoying so that simple remember

966
00:35:07,510 --> 00:35:11,030
modifying flash involves memory magic

967
00:35:09,560 --> 00:35:12,290
commands to program a single byte at a

968
00:35:11,030 --> 00:35:13,610
time so these sydney's set and reset

969
00:35:12,290 --> 00:35:15,830
instructions aren't gonna do anything

970
00:35:13,610 --> 00:35:18,140
so if data that's wrong so we can force

971
00:35:15,830 --> 00:35:21,100
it to effectively ignore the effect of

972
00:35:18,140 --> 00:35:23,150
executing that instruction so that's

973
00:35:21,100 --> 00:35:25,850
entirely dependent on the fact that they

974
00:35:23,150 --> 00:35:27,830
never set Iowa after Flash's online they

975
00:35:25,850 --> 00:35:29,810
say once when the OS starts and never

976
00:35:27,830 --> 00:35:31,730
touch it again so it's fixed easily

977
00:35:29,810 --> 00:35:33,850
enough in the OS if they would just set

978
00:35:31,730 --> 00:35:36,110
it again right before this code runs but

979
00:35:33,850 --> 00:35:38,480
similar functionality exists in the boot

980
00:35:36,110 --> 00:35:44,180
code and that can't be easily fixed so

981
00:35:38,480 --> 00:35:45,680
they're not having systems you can't and

982
00:35:44,180 --> 00:35:47,720
if they diffic sit there are a number of

983
00:35:45,680 --> 00:35:50,299
flash other flash on lock exploits that

984
00:35:47,720 --> 00:35:52,339
can be used and there's a dozen of them

985
00:35:50,300 --> 00:35:55,480
I've never disclosed so they ever decide

986
00:35:52,340 --> 00:35:55,480
to start getting aggressive with this

987
00:35:57,820 --> 00:36:01,610
being able to unlock flash and modify it

988
00:36:00,020 --> 00:36:04,220
ourselves nice but if we wanted to write

989
00:36:01,610 --> 00:36:06,430
our own OS we have to rely on custom OS

990
00:36:04,220 --> 00:36:08,419
receivers which are platform dependent

991
00:36:06,430 --> 00:36:10,069
error-prone and just trouble so the best

992
00:36:08,420 --> 00:36:12,050
way it would be nice if we could just

993
00:36:10,070 --> 00:36:13,880
pass the OS and have re-sign in

994
00:36:12,050 --> 00:36:17,000
ourselves or write our own OS and sign

995
00:36:13,880 --> 00:36:17,960
it it's T is private RSA key but of

996
00:36:17,000 --> 00:36:21,410
course they're gonna have to Sam that

997
00:36:17,960 --> 00:36:22,820
key over to us flash upgradeable ZD

998
00:36:21,410 --> 00:36:25,100
model started out around the time that

999
00:36:22,820 --> 00:36:28,400
the TI seventy-three came out

1000
00:36:25,100 --> 00:36:31,220
that was around 1997 in 1997 512-bit of

1001
00:36:28,400 --> 00:36:32,450
RSA keys were looking pretty secure and

1002
00:36:31,220 --> 00:36:34,370
if you don't know are as they strength

1003
00:36:32,450 --> 00:36:36,080
isn't the inability to factor the public

1004
00:36:34,370 --> 00:36:38,210
key which is an extremely large number

1005
00:36:36,080 --> 00:36:39,799
it's a two prime numbers and computer

1006
00:36:38,210 --> 00:36:41,330
power competing power not being what it

1007
00:36:39,800 --> 00:36:43,760
is today that was considered to possible

1008
00:36:41,330 --> 00:36:45,290
way back to night time to seven but last

1009
00:36:43,760 --> 00:36:47,060
word ten years or so and one person

1010
00:36:45,290 --> 00:36:49,190
decided to give it a shot anyway on his

1011
00:36:47,060 --> 00:36:51,650
computer they used something called the

1012
00:36:49,190 --> 00:36:53,470
GFS Jennifer Jennifer field sieve which

1013
00:36:51,650 --> 00:36:56,630
at least at the time and maybe still is

1014
00:36:53,470 --> 00:36:58,220
was considered the most efficient known

1015
00:36:56,630 --> 00:37:00,950
method of factoring numbers into primes

1016
00:36:58,220 --> 00:37:02,750
so he kicked off the process for the 83

1017
00:37:00,950 --> 00:37:04,970
plus OS signing team I'd let it run on

1018
00:37:02,750 --> 00:37:07,970
his computer for about two months before

1019
00:37:04,970 --> 00:37:08,990
it finally spit out the primes so he had

1020
00:37:07,970 --> 00:37:10,459
actually proven what was long

1021
00:37:08,990 --> 00:37:12,439
disregarded that it actually was

1022
00:37:10,460 --> 00:37:14,810
possible to factor those keys after

1023
00:37:12,440 --> 00:37:16,960
enough time passed so we posted about it

1024
00:37:14,810 --> 00:37:18,410
online and very shortly after TI

1025
00:37:16,960 --> 00:37:20,840
silenced him

1026
00:37:18,410 --> 00:37:22,339
they actually actually sent someone to

1027
00:37:20,840 --> 00:37:23,750
his home to talk to him strongly

1028
00:37:22,340 --> 00:37:25,760
encouraged him not to work on the same

1029
00:37:23,750 --> 00:37:27,370
wall or talk about it which is you can

1030
00:37:25,760 --> 00:37:30,320
imagine scared the crap out of them but

1031
00:37:27,370 --> 00:37:31,790
the damage was done and the community

1032
00:37:30,320 --> 00:37:33,970
knew it was possible so we took the

1033
00:37:31,790 --> 00:37:35,990
remaining 13 public keys we started a

1034
00:37:33,970 --> 00:37:38,959
distributed computing project to factor

1035
00:37:35,990 --> 00:37:40,609
the rest of it so we had hundreds

1036
00:37:38,960 --> 00:37:42,140
thousands of people all open to factor

1037
00:37:40,610 --> 00:37:44,270
the keys as quickly as possible before

1038
00:37:42,140 --> 00:37:46,129
we knew it we had all thirteen keys just

1039
00:37:44,270 --> 00:37:51,230
either month all under the nose without

1040
00:37:46,130 --> 00:37:52,520
them fun you know since nobody had ever

1041
00:37:51,230 --> 00:37:54,560
had the OS Keys before or even

1042
00:37:52,520 --> 00:37:56,420
application keys on other models there

1043
00:37:54,560 --> 00:37:59,660
were no tools to sign modified OS sister

1044
00:37:56,420 --> 00:38:01,670
applications so I made some validated

1045
00:37:59,660 --> 00:38:02,569
that every key was correct and could

1046
00:38:01,670 --> 00:38:03,830
produce the west's and flash

1047
00:38:02,570 --> 00:38:04,910
applications that each calculator would

1048
00:38:03,830 --> 00:38:06,980
accept which I could do because I had

1049
00:38:04,910 --> 00:38:08,120
all the characters and then publish

1050
00:38:06,980 --> 00:38:10,550
those tools along with the key files

1051
00:38:08,120 --> 00:38:12,080
needed to use and that seemed to be the

1052
00:38:10,550 --> 00:38:15,560
final straw and there's security for

1053
00:38:12,080 --> 00:38:17,270
these things because well it's the final

1054
00:38:15,560 --> 00:38:20,190
straw for Ti because they actually sent

1055
00:38:17,270 --> 00:38:22,349
me a DMCA takedown notice

1056
00:38:20,190 --> 00:38:23,900
which you don't know the MSA stands for

1057
00:38:22,349 --> 00:38:26,309
digital millenium Copyright Act versus

1058
00:38:23,900 --> 00:38:27,569
the basic estates behind you if you feel

1059
00:38:26,309 --> 00:38:28,980
your copy rights being violated you can

1060
00:38:27,569 --> 00:38:30,450
send a takedown notice to the offender

1061
00:38:28,980 --> 00:38:33,240
and then that person says four hours to

1062
00:38:30,450 --> 00:38:34,288
remove the offending material and if

1063
00:38:33,240 --> 00:38:34,649
they don't they have a right to sue the

1064
00:38:34,289 --> 00:38:37,289
person

1065
00:38:34,650 --> 00:38:38,099
so we're it not for the e FF which is

1066
00:38:37,289 --> 00:38:40,230
the Electronic Frontier Foundation

1067
00:38:38,099 --> 00:38:43,020
stepping in offering to defend me

1068
00:38:40,230 --> 00:38:45,119
legally against TI's threats I woulda

1069
00:38:43,020 --> 00:38:46,859
been forced to comply with that but the

1070
00:38:45,119 --> 00:38:48,390
EFS sent a letter to Texas Instruments

1071
00:38:46,859 --> 00:38:50,700
stating that you can't copyright a

1072
00:38:48,390 --> 00:38:52,710
number which is essentially published

1073
00:38:50,700 --> 00:38:53,910
and they should along because it's not

1074
00:38:52,710 --> 00:38:56,250
worth destroying a person over just

1075
00:38:53,910 --> 00:38:58,440
calculators see I did not respond to

1076
00:38:56,250 --> 00:39:00,390
that letter so matters dropped and I'm

1077
00:38:58,440 --> 00:39:06,030
still hosting all fifteen bucks over the

1078
00:39:00,390 --> 00:39:07,710
keys to this day knowing that they had

1079
00:39:06,030 --> 00:39:09,990
lost this particular battle see I

1080
00:39:07,710 --> 00:39:13,349
started using impossible to factor

1081
00:39:09,990 --> 00:39:16,729
2048-bit RSA keys in newly manufactured

1082
00:39:13,349 --> 00:39:18,539
models at the table plus silver issue

1083
00:39:16,730 --> 00:39:19,799
and since the hardware was never

1084
00:39:18,539 --> 00:39:23,250
designed to validate such a large

1085
00:39:19,799 --> 00:39:24,990
signature it's actually invalidating the

1086
00:39:23,250 --> 00:39:26,700
OSI being transferred knew of an Oso

1087
00:39:24,990 --> 00:39:31,020
great now takes six minutes where before

1088
00:39:26,700 --> 00:39:33,450
was instantaneous now you have to wait

1089
00:39:31,020 --> 00:39:36,779
around six minutes for it to calculate

1090
00:39:33,450 --> 00:39:38,129
this so that's just accepted so we're

1091
00:39:36,779 --> 00:39:43,200
gonna fall back on the flash Lamacq

1092
00:39:38,130 --> 00:39:44,520
exploits to get rid of that six minute

1093
00:39:43,200 --> 00:39:46,379
validation we have to understand how the

1094
00:39:44,520 --> 00:39:48,509
calculator moves and how OS upgrades

1095
00:39:46,380 --> 00:39:49,890
work when you first turn the that

1096
00:39:48,510 --> 00:39:51,450
are on the boot codes the very first

1097
00:39:49,890 --> 00:39:52,980
thing that gets controlled so it does

1098
00:39:51,450 --> 00:39:54,720
some basic hardware initialization and

1099
00:39:52,980 --> 00:39:56,400
then it checks the OS valid marker just

1100
00:39:54,720 --> 00:39:58,049
one sector zero with the flash to a bar

1101
00:39:56,400 --> 00:39:59,279
and if that marker is valid it jumps

1102
00:39:58,049 --> 00:40:01,319
into the OS and the coder starts

1103
00:39:59,279 --> 00:40:03,240
normally if the markers not valid then

1104
00:40:01,319 --> 00:40:05,970
it waits to receive a new valid OS or

1105
00:40:03,240 --> 00:40:07,410
link boards and for a typical OS

1106
00:40:05,970 --> 00:40:09,000
transfer the first thing the blue code

1107
00:40:07,410 --> 00:40:10,440
will do is it will invalidate the OS

1108
00:40:09,000 --> 00:40:13,470
quotes in the certificate and by erasing

1109
00:40:10,440 --> 00:40:14,880
flush lectures or reset the OS valid and

1110
00:40:13,470 --> 00:40:16,828
then a balloon keeps receiving small

1111
00:40:14,880 --> 00:40:19,380
chunks of the OS over and over into ram

1112
00:40:16,829 --> 00:40:20,549
and then unlocking flash writing back to

1113
00:40:19,380 --> 00:40:23,609
its destination at the relocking

1114
00:40:20,549 --> 00:40:25,049
flashback once that's all done it's time

1115
00:40:23,609 --> 00:40:26,308
for the boot code to validate to five to

1116
00:40:25,049 --> 00:40:28,320
a bit signature in the OS which is

1117
00:40:26,309 --> 00:40:29,250
effectively useless now because

1118
00:40:28,320 --> 00:40:30,990
speaking generate that signature

1119
00:40:29,250 --> 00:40:33,450
ourselves but then he goes to validate a

1120
00:40:30,990 --> 00:40:34,799
2048-bit signature if all those checks

1121
00:40:33,450 --> 00:40:36,240
pass that marks the OS is valid

1122
00:40:34,800 --> 00:40:41,040
intersections ero and certificate man

1123
00:40:36,240 --> 00:40:43,290
jumps into it so digging in a little

1124
00:40:41,040 --> 00:40:45,540
further we look at how the Ballet's this

1125
00:40:43,290 --> 00:40:46,920
2048 mid signature unlike the original

1126
00:40:45,540 --> 00:40:49,380
phytolith signature this new one is

1127
00:40:46,920 --> 00:40:50,240
stored linked indexed so that means

1128
00:40:49,380 --> 00:40:52,500
there's a word at the beginning

1129
00:40:50,240 --> 00:40:56,069
indicating that is 206 why it's a big

1130
00:40:52,500 --> 00:40:57,420
that's how big if you but if you know if

1131
00:40:56,070 --> 00:40:59,070
you know this things 24 a bit or

1132
00:40:57,420 --> 00:41:01,620
eternities explains why are you storing

1133
00:40:59,070 --> 00:41:03,570
the length it opens up the possibility

1134
00:41:01,620 --> 00:41:05,819
that it could be exploited as it turns

1135
00:41:03,570 --> 00:41:07,260
out yes you can they don't they don't

1136
00:41:05,820 --> 00:41:10,200
bounce check this thing so we can take

1137
00:41:07,260 --> 00:41:12,480
advantage of that we can embed a really

1138
00:41:10,200 --> 00:41:14,100
really large signature into the OSLC and

1139
00:41:12,480 --> 00:41:15,780
because the boot code doesn't check that

1140
00:41:14,100 --> 00:41:17,370
it's the same value it will blindly copy

1141
00:41:15,780 --> 00:41:20,370
the signature to the start of RAM at

1142
00:41:17,370 --> 00:41:21,930
8,000 so we can store 80 bytes of

1143
00:41:20,370 --> 00:41:23,910
garbage there then is the 80 jump

1144
00:41:21,930 --> 00:41:26,430
instruction which is all come c3 and

1145
00:41:23,910 --> 00:41:27,870
then the address and then to put lots

1146
00:41:26,430 --> 00:41:29,370
and lots and lots and lots and lots of

1147
00:41:27,870 --> 00:41:31,920
80s that eventually will totally

1148
00:41:29,370 --> 00:41:33,240
overwrite ran including the stack so the

1149
00:41:31,920 --> 00:41:35,130
next time the code tries to return it

1150
00:41:33,240 --> 00:41:37,560
it'll jump to address 8080 where we have

1151
00:41:35,130 --> 00:41:40,320
is a jump instruction that'll jump to

1152
00:41:37,560 --> 00:41:44,190
where we calculated our payload will

1153
00:41:40,320 --> 00:41:45,840
actually be at so then we get execution

1154
00:41:44,190 --> 00:41:47,850
so once we get control we can do some

1155
00:41:45,840 --> 00:41:49,710
cleanup such as marking the OS valid and

1156
00:41:47,850 --> 00:41:51,420
the certificate ourselves but they're in

1157
00:41:49,710 --> 00:41:53,400
the flash sector because we flash don't

1158
00:41:51,420 --> 00:41:55,310
launch so we can modify it ourselves and

1159
00:41:53,400 --> 00:41:57,390
then just jump into the start of the O's

1160
00:41:55,310 --> 00:41:59,880
the nice thing about this is that no

1161
00:41:57,390 --> 00:42:01,230
custom OS transfer tools are required we

1162
00:41:59,880 --> 00:42:03,990
just create a specially crafted OS

1163
00:42:01,230 --> 00:42:05,880
update file with this big signature and

1164
00:42:03,990 --> 00:42:07,500
this exploits the read-only boot code so

1165
00:42:05,880 --> 00:42:14,010
all in all models manufactured up to

1166
00:42:07,500 --> 00:42:16,620
that date are vulnerable so any question

1167
00:42:14,010 --> 00:42:18,630
yeah why does the number 80 80 keep

1168
00:42:16,620 --> 00:42:22,049
appearing that's just my favorite number

1169
00:42:18,630 --> 00:42:24,420
it's okay that's thing number repeated

1170
00:42:22,050 --> 00:42:26,340
8080 is very near the beginning of

1171
00:42:24,420 --> 00:42:28,240
system Ram which is kind of a scratch

1172
00:42:26,340 --> 00:42:41,290
space in the OS and the leuco

1173
00:42:28,240 --> 00:42:43,598
so just a convenience so it actually

1174
00:42:41,290 --> 00:42:44,950
gets better so another big discovery in

1175
00:42:43,599 --> 00:42:46,869
the community and another nail in the

1176
00:42:44,950 --> 00:42:48,609
coffin in the security of this has to do

1177
00:42:46,869 --> 00:42:52,150
with modifying what should be read on

1178
00:42:48,609 --> 00:42:53,950
the boot sectors one thing I noticed is

1179
00:42:52,150 --> 00:42:55,210
that you have the ti-84 plus a need for

1180
00:42:53,950 --> 00:42:57,730
plus supper addition loop sectors are

1181
00:42:55,210 --> 00:42:58,810
almost identical in fact other than the

1182
00:42:57,730 --> 00:43:00,339
fact that the first one has a one

1183
00:42:58,810 --> 00:43:01,540
megabyte flesh tip and the other one has

1184
00:43:00,339 --> 00:43:03,790
a two megabyte question they are

1185
00:43:01,540 --> 00:43:05,619
identical calculators every way except

1186
00:43:03,790 --> 00:43:07,990
for one little I or I in the loop code

1187
00:43:05,619 --> 00:43:09,730
so when the caterpillars first booting

1188
00:43:07,990 --> 00:43:13,509
and initializing hardware and IO it

1189
00:43:09,730 --> 00:43:14,980
writes either a 0 or 1 - I owe 421 this

1190
00:43:13,510 --> 00:43:16,359
is a protected port which means flash

1191
00:43:14,980 --> 00:43:18,700
has to be unlocked before it can be

1192
00:43:16,359 --> 00:43:21,609
written to and by the way you see the

1193
00:43:18,700 --> 00:43:23,799
unlock sequence after these right before

1194
00:43:21,609 --> 00:43:24,970
the port 21 22 23 rights you don't have

1195
00:43:23,800 --> 00:43:26,619
to have that I don't think that even

1196
00:43:24,970 --> 00:43:30,330
they understand why how it works

1197
00:43:26,619 --> 00:43:30,330
the - you have to have it's only 414

1198
00:43:33,480 --> 00:43:42,070
yeah they actually have macros that but

1199
00:43:38,560 --> 00:43:44,859
both copters run exactly the same OS so

1200
00:43:42,070 --> 00:43:46,930
the OS actually reads the value for 21

1201
00:43:44,859 --> 00:43:48,279
bit 0 for 21 to determine which model

1202
00:43:46,930 --> 00:43:49,839
that's running on so they can have the

1203
00:43:48,280 --> 00:43:52,119
exact same OS run on both calculators

1204
00:43:49,839 --> 00:43:54,750
and it's just intelligent about which

1205
00:43:52,119 --> 00:43:58,420
one it's running on so it's critical

1206
00:43:54,750 --> 00:44:00,010
that it notice because the OS is

1207
00:43:58,420 --> 00:44:02,800
actually organized into two halves two

1208
00:44:00,010 --> 00:44:04,690
sections so here's the flash layout

1209
00:44:02,800 --> 00:44:05,740
fancy 84 plus not the silver additions

1210
00:44:04,690 --> 00:44:09,280
is just the regulator for plus the

1211
00:44:05,740 --> 00:44:10,689
smaller it has 40 hex splash pages the

1212
00:44:09,280 --> 00:44:12,849
first OS sections at the very beginning

1213
00:44:10,690 --> 00:44:15,520
of the flash chip at sector 0 that's the

1214
00:44:12,849 --> 00:44:17,349
yellow area runs from flashback 0 to

1215
00:44:15,520 --> 00:44:19,000
flash page 8 and then near the end of

1216
00:44:17,349 --> 00:44:20,680
the flash chip and greet is the second

1217
00:44:19,000 --> 00:44:22,000
part of us these are the privileged

1218
00:44:20,680 --> 00:44:23,080
pages and that's why it has to split up

1219
00:44:22,000 --> 00:44:25,610
into two the green part has got the

1220
00:44:23,080 --> 00:44:28,549
privileged code

1221
00:44:25,610 --> 00:44:30,890
so both the upper o s range which is

1222
00:44:28,550 --> 00:44:32,600
ingrained within the book page read or

1223
00:44:30,890 --> 00:44:34,670
privileged but the booth page is

1224
00:44:32,600 --> 00:44:36,500
supposedly read only and then in between

1225
00:44:34,670 --> 00:44:37,640
the two other sections that Brown area

1226
00:44:36,500 --> 00:44:40,240
is the user archived events where flash

1227
00:44:37,640 --> 00:44:42,589
applications archive area better support

1228
00:44:40,240 --> 00:44:43,759
so the here is the flashlight opportune

1229
00:44:42,590 --> 00:44:45,470
for plus Silver Edition which is twice

1230
00:44:43,760 --> 00:44:47,420
as big basically the same except the

1231
00:44:45,470 --> 00:44:49,580
silver editions got twice flashed by

1232
00:44:47,420 --> 00:44:53,480
something the boot page is now 7f

1233
00:44:49,580 --> 00:44:55,490
instead of three it's higher and then

1234
00:44:53,480 --> 00:44:59,780
the upper OS page range is 7 c m7 d

1235
00:44:55,490 --> 00:45:02,029
instead of 3 c the boot code initially

1236
00:44:59,780 --> 00:45:03,470
sets the value of io 421 indicating

1237
00:45:02,030 --> 00:45:04,880
which model it is what would happen if

1238
00:45:03,470 --> 00:45:05,810
we unlocked flash and we modify it

1239
00:45:04,880 --> 00:45:08,300
ourselves

1240
00:45:05,810 --> 00:45:10,100
so 14 84 plus Silver Edition went to 0-2

1241
00:45:08,300 --> 00:45:12,560
421 and the OS would believe it's

1242
00:45:10,100 --> 00:45:14,630
actually a TV 4 plus nan so Perdition

1243
00:45:12,560 --> 00:45:16,430
and vice versa by the way the reason I

1244
00:45:14,630 --> 00:45:17,720
thought about doing this is I thought

1245
00:45:16,430 --> 00:45:19,549
I'd be willing to make a virus that

1246
00:45:17,720 --> 00:45:22,129
could run on somebody still radition and

1247
00:45:19,550 --> 00:45:23,780
it would cut the flesh size in half and

1248
00:45:22,130 --> 00:45:25,070
they no matter how much they reset the

1249
00:45:23,780 --> 00:45:26,660
ocular reset the OS or whatever it

1250
00:45:25,070 --> 00:45:32,920
wouldn't it wouldn't it wouldn't fix

1251
00:45:26,660 --> 00:45:32,920
itself so they that's what started

1252
00:45:34,270 --> 00:45:38,120
normally this would just after writing

1253
00:45:36,830 --> 00:45:39,259
the wrong value normally this would just

1254
00:45:38,120 --> 00:45:41,779
crash the calculator because suddenly

1255
00:45:39,260 --> 00:45:43,430
it's looking at page 3 seen for example

1256
00:45:41,780 --> 00:45:46,130
when it really wants to look at 7c

1257
00:45:43,430 --> 00:45:48,080
advice person but I had an idea that I

1258
00:45:46,130 --> 00:45:49,580
could just witness virus words as I've

1259
00:45:48,080 --> 00:45:51,890
had an idea I would just copy the upper

1260
00:45:49,580 --> 00:45:53,690
OS pages and the boot page so the green

1261
00:45:51,890 --> 00:45:57,710
and red boxes to the middle of the flash

1262
00:45:53,690 --> 00:45:59,390
chip ranges 3 C 2 3 F so that when you

1263
00:45:57,710 --> 00:46:01,610
modify that port in the OS actually goes

1264
00:45:59,390 --> 00:46:02,600
to look for the OS data pretty see it

1265
00:46:01,610 --> 00:46:05,980
would actually find it and it would

1266
00:46:02,600 --> 00:46:08,060
contain functional the thing is though

1267
00:46:05,980 --> 00:46:09,350
instead of the dark orange area in the

1268
00:46:08,060 --> 00:46:11,720
middle it would only consider that first

1269
00:46:09,350 --> 00:46:12,920
dark orange boxes news archive so that

1270
00:46:11,720 --> 00:46:14,209
would affect the cut it in half so

1271
00:46:12,920 --> 00:46:15,830
that's that's what that was the thought

1272
00:46:14,210 --> 00:46:18,230
it would cut in that brown area in half

1273
00:46:15,830 --> 00:46:20,720
but when I tried to do this by changing

1274
00:46:18,230 --> 00:46:23,390
port 21 and copying pages 7 see there's

1275
00:46:20,720 --> 00:46:26,939
7f 2 3 cm 3 of the coffee operation will

1276
00:46:23,390 --> 00:46:28,710
work it turns out there's an excellent

1277
00:46:26,940 --> 00:46:30,900
when I changed it by a port 21 I

1278
00:46:28,710 --> 00:46:33,329
actually changed which page which range

1279
00:46:30,900 --> 00:46:35,579
of pages was read-only so I changed

1280
00:46:33,329 --> 00:46:37,170
which region was red so by changing the

1281
00:46:35,579 --> 00:46:39,150
value for 21 I actually changed the

1282
00:46:37,170 --> 00:46:40,410
protection from one region to another so

1283
00:46:39,150 --> 00:46:42,690
all this time we thought the flash chip

1284
00:46:40,410 --> 00:46:44,549
was edit locked on the booth babes it

1285
00:46:42,690 --> 00:46:46,140
was the hardware was controlling it but

1286
00:46:44,550 --> 00:46:47,520
notice this the ASIC it's just port 21

1287
00:46:46,140 --> 00:46:49,558
on the a stick that's keeping it at

1288
00:46:47,520 --> 00:46:50,579
large so by temporarily flipping the

1289
00:46:49,559 --> 00:46:54,270
value of course when we can actually

1290
00:46:50,579 --> 00:46:56,460
modify the boot code and then there's

1291
00:46:54,270 --> 00:46:58,200
anything I've said making it possible or

1292
00:46:56,460 --> 00:47:00,750
about a good code and modify it we did

1293
00:46:58,200 --> 00:47:01,770
we put diagnostic utilities in there we

1294
00:47:00,750 --> 00:47:03,359
admitted them in the book page so that

1295
00:47:01,770 --> 00:47:05,880
it was impossible to permanently break

1296
00:47:03,359 --> 00:47:08,279
it and most importantly we just patch

1297
00:47:05,880 --> 00:47:09,990
out the 2048 bit signature check so

1298
00:47:08,280 --> 00:47:11,339
naturally when they figured out you can

1299
00:47:09,990 --> 00:47:13,500
do this they changed the way the

1300
00:47:11,339 --> 00:47:15,000
congressman factory they now edit lock

1301
00:47:13,500 --> 00:47:16,260
the boot sector onto flash tip and

1302
00:47:15,000 --> 00:47:18,809
hardware so the basic protections

1303
00:47:16,260 --> 00:47:20,430
actually redundant so it's Hardware

1304
00:47:18,809 --> 00:47:21,540
doesn't have that a see the ASIC does it

1305
00:47:20,430 --> 00:47:24,540
and the hardware doesn't look that hard

1306
00:47:21,540 --> 00:47:26,670
what matters here's the really fun part

1307
00:47:24,540 --> 00:47:28,259
shortly after tea I came up with their

1308
00:47:26,670 --> 00:47:30,270
first and only z80 calculator to have a

1309
00:47:28,260 --> 00:47:32,040
color LCD not only did it have a color

1310
00:47:30,270 --> 00:47:33,599
LCD but it had a four megabyte flash tip

1311
00:47:32,040 --> 00:47:35,160
instead of a two megabyte flash chip and

1312
00:47:33,599 --> 00:47:36,210
they call it the ti-84 plus C Silver

1313
00:47:35,160 --> 00:47:38,970
Edition C for color

1314
00:47:36,210 --> 00:47:39,750
the only difference that's the only

1315
00:47:38,970 --> 00:47:41,160
difference between that in the other

1316
00:47:39,750 --> 00:47:43,799
models they even used exactly the same

1317
00:47:41,160 --> 00:47:45,058
AC even though it wasn't designed to

1318
00:47:43,799 --> 00:47:46,950
work with a flash chip that was larger

1319
00:47:45,059 --> 00:47:48,299
than two Meg guys the problem isn't the

1320
00:47:46,950 --> 00:47:49,410
for Megan Wi-Fi chip has a different

1321
00:47:48,299 --> 00:47:49,829
sector layout compared to the one

1322
00:47:49,410 --> 00:47:53,220
megabyte

1323
00:47:49,829 --> 00:47:54,569
2 megabyte watch juice so the supposedly

1324
00:47:53,220 --> 00:47:55,919
read-only pages at the end of the 2

1325
00:47:54,569 --> 00:47:57,480
megabyte flash chip are now in the

1326
00:47:55,920 --> 00:47:58,859
middle of the 4 megabyte flash chip

1327
00:47:57,480 --> 00:48:01,670
which is now part of the new calculators

1328
00:47:58,859 --> 00:48:04,558
use archives they need to modify that

1329
00:48:01,670 --> 00:48:06,660
but their ASIC is designed to protect

1330
00:48:04,559 --> 00:48:09,210
against that so what did they do they

1331
00:48:06,660 --> 00:48:10,680
use the word around they temporarily

1332
00:48:09,210 --> 00:48:11,819
talk about which region is protected

1333
00:48:10,680 --> 00:48:13,049
because they can't just turn it off all

1334
00:48:11,819 --> 00:48:14,579
they can do is misconfigure in a

1335
00:48:13,049 --> 00:48:16,770
different way do their rights and then

1336
00:48:14,579 --> 00:48:28,290
toggle it back so to think it the idea

1337
00:48:16,770 --> 00:48:29,490
from us so the constant toggling a 421

1338
00:48:28,290 --> 00:48:29,820
actually slows the calculator down to

1339
00:48:29,490 --> 00:48:31,020
the

1340
00:48:29,820 --> 00:48:32,280
the performance really isn't that great

1341
00:48:31,020 --> 00:48:34,890
so they actually ditched that model

1342
00:48:32,280 --> 00:48:36,570
don't know by this yourself and the

1343
00:48:34,890 --> 00:48:38,549
distant in favor of the ti-84 plus CE II

1344
00:48:36,570 --> 00:48:41,280
which is a brand-new color calculator

1345
00:48:38,550 --> 00:48:42,510
with a different easy a DCP now the EC

1346
00:48:41,280 --> 00:48:43,980
eighty sports Society backers

1347
00:48:42,510 --> 00:48:45,840
credibility so that you could run

1348
00:48:43,980 --> 00:48:47,670
regular LZ instructions in addition to

1349
00:48:45,840 --> 00:48:49,590
the new easy any ones which support

1350
00:48:47,670 --> 00:48:52,290
24-bit addressing and a 16-bit higher

1351
00:48:49,590 --> 00:48:53,280
range they just make marriage this they

1352
00:48:52,290 --> 00:48:54,509
have twenty four bit of dressing now

1353
00:48:53,280 --> 00:48:56,670
they ditched the Beijing and Bank

1354
00:48:54,510 --> 00:48:59,370
switching madness in favor of a flat

1355
00:48:56,670 --> 00:49:00,930
memory model like lazy down here they

1356
00:48:59,370 --> 00:49:02,040
also revamp the port protection since

1357
00:49:00,930 --> 00:49:04,140
there are no privileged pages anymore

1358
00:49:02,040 --> 00:49:05,790
now certain address ranges are

1359
00:49:04,140 --> 00:49:07,259
considered privileged and certain i/o

1360
00:49:05,790 --> 00:49:08,970
ports mainly where the height is zero

1361
00:49:07,260 --> 00:49:10,290
artists that are protected and uncle and

1362
00:49:08,970 --> 00:49:12,450
can only be written to from a privileged

1363
00:49:10,290 --> 00:49:15,210
address range like the red or yellow

1364
00:49:12,450 --> 00:49:16,350
berries the MOOC region had started the

1365
00:49:15,210 --> 00:49:18,540
flash tips now it started too much

1366
00:49:16,350 --> 00:49:20,490
difference at the end it's read-only in

1367
00:49:18,540 --> 00:49:23,130
order it's locked in harbor and always

1368
00:49:20,490 --> 00:49:25,020
privileged and then the variable size of

1369
00:49:23,130 --> 00:49:27,330
OS politic and then the rest of that is

1370
00:49:25,020 --> 00:49:28,620
user archive since the OS the the size

1371
00:49:27,330 --> 00:49:30,420
of the OS can vary from version to

1372
00:49:28,620 --> 00:49:32,339
version the ASIC has to be configured

1373
00:49:30,420 --> 00:49:34,020
somehow so that it knows which parts of

1374
00:49:32,340 --> 00:49:36,650
the flash tip to consider privileged and

1375
00:49:34,020 --> 00:49:39,210
that very much ranges configured be

1376
00:49:36,650 --> 00:49:41,580
configured via protected i/o ports zero

1377
00:49:39,210 --> 00:49:43,020
zero one day through 0 1 F which can

1378
00:49:41,580 --> 00:49:44,759
only be modified of course my code of

1379
00:49:43,020 --> 00:49:47,970
the privileged reasons so how did the

1380
00:49:44,760 --> 00:49:50,040
protected I oh well with any privileged

1381
00:49:47,970 --> 00:49:51,779
i/o port right t I must load a constant

1382
00:49:50,040 --> 00:49:52,770
value into register white that value to

1383
00:49:51,780 --> 00:49:54,300
the protected i/o port and then

1384
00:49:52,770 --> 00:49:55,590
immediately verified at that register

1385
00:49:54,300 --> 00:49:57,330
contains the same constant value they

1386
00:49:55,590 --> 00:49:58,680
just loaded they have to do that because

1387
00:49:57,330 --> 00:50:00,090
otherwise we could just jump right into

1388
00:49:58,680 --> 00:50:01,680
the boot code right before the court

1389
00:50:00,090 --> 00:50:03,840
right with our own value

1390
00:50:01,680 --> 00:50:04,859
so it's tedious but they like I said

1391
00:50:03,840 --> 00:50:06,960
they got a bunch of macros to do that

1392
00:50:04,860 --> 00:50:09,150
constant problem though is that the OS

1393
00:50:06,960 --> 00:50:10,350
is is variable not constant so it's not

1394
00:50:09,150 --> 00:50:11,850
something that they can hard code they

1395
00:50:10,350 --> 00:50:13,620
can't do that with these right

1396
00:50:11,850 --> 00:50:15,000
specifically so we could set around

1397
00:50:13,620 --> 00:50:17,069
register value and jump into the boot

1398
00:50:15,000 --> 00:50:19,050
code right before the port one D I over

1399
00:50:17,070 --> 00:50:21,450
maybe still control away through a

1400
00:50:19,050 --> 00:50:24,200
variety of means air ups there's a

1401
00:50:21,450 --> 00:50:24,200
method that's even dumber

1402
00:50:24,329 --> 00:50:27,809
the easy Eddie as I said as microts

1403
00:50:26,489 --> 00:50:29,900
compatibility for running cozy a vote

1404
00:50:27,809 --> 00:50:32,190
the easy Eddie mode has something called

1405
00:50:29,900 --> 00:50:34,200
it's called a something called haenyeo

1406
00:50:32,190 --> 00:50:35,999
mode

1407
00:50:34,200 --> 00:50:38,640
that's where 24-bit address and come

1408
00:50:35,999 --> 00:50:40,558
into play but even better any individual

1409
00:50:38,640 --> 00:50:42,569
instruction can run an ad Elmo or NCAA

1410
00:50:40,559 --> 00:50:44,220
so in ATO mode you can actually call a

1411
00:50:42,569 --> 00:50:45,630
subroutine that runs into dat mode and

1412
00:50:44,220 --> 00:50:47,669
then it returns you're back in eighty

1413
00:50:45,630 --> 00:50:49,440
OMA and even better than that and the

1414
00:50:47,670 --> 00:50:51,289
z80 mode subroutine you can have a deal

1415
00:50:49,440 --> 00:50:54,180
instructions such as those 64

1416
00:50:51,289 --> 00:50:56,249
ministrations so surely the protection

1417
00:50:54,180 --> 00:51:00,989
on the protected IO ports works when

1418
00:50:56,249 --> 00:51:03,779
your whether you're a DM oh no no it

1419
00:51:00,989 --> 00:51:05,489
doesn't so to effectively negate the

1420
00:51:03,779 --> 00:51:07,380
protection we just set the upper bounds

1421
00:51:05,489 --> 00:51:08,789
of the privilege range to be really

1422
00:51:07,380 --> 00:51:12,749
really high way out there something like

1423
00:51:08,789 --> 00:51:14,579
that beans or so on line 27 of this

1424
00:51:12,749 --> 00:51:16,348
screenshot it temporarily jumps into z80

1425
00:51:14,579 --> 00:51:18,569
mode to execute a single instruction the

1426
00:51:16,349 --> 00:51:20,220
one that writes to protect the ports one

1427
00:51:18,569 --> 00:51:21,569
day through one F which really should

1428
00:51:20,220 --> 00:51:26,069
not work and then it returns back to a

1429
00:51:21,569 --> 00:51:28,079
do so someone over there really

1430
00:51:26,069 --> 00:51:29,849
should've caught this these new models

1431
00:51:28,079 --> 00:51:30,839
are actually way less secure the ones

1432
00:51:29,849 --> 00:51:34,829
for twenty years ago and they were

1433
00:51:30,839 --> 00:51:36,210
actually trying to version 4 5 so in my

1434
00:51:34,829 --> 00:51:39,299
opinion the original unlock protection

1435
00:51:36,210 --> 00:51:41,069
used on the older models for plus series

1436
00:51:39,299 --> 00:51:42,930
it's actually perfect as long as they

1437
00:51:41,069 --> 00:51:45,210
stay on top of code related exploits but

1438
00:51:42,930 --> 00:51:47,368
they didn't and I don't think they're

1439
00:51:45,210 --> 00:51:49,380
going to but as far as this protection

1440
00:51:47,369 --> 00:51:51,150
the i/o port protection is likely in the

1441
00:51:49,380 --> 00:51:52,589
async just like before and they can't

1442
00:51:51,150 --> 00:51:54,299
fix it through software updates and

1443
00:51:52,589 --> 00:51:55,739
after the fact that they can reuse the

1444
00:51:54,299 --> 00:51:58,349
original a stick and need to make the a

1445
00:51:55,739 --> 00:51:59,640
4 + C Silver Edition and use that for 21

1446
00:51:58,349 --> 00:52:01,200
workaround instead of just simply

1447
00:51:59,640 --> 00:52:03,118
disabling that feature in Nasik that

1448
00:52:01,200 --> 00:52:04,558
leads me to believe that making even

1449
00:52:03,119 --> 00:52:06,630
minor change to the ASIC is cost

1450
00:52:04,559 --> 00:52:07,799
prohibitive so this really dumb exploit

1451
00:52:06,630 --> 00:52:09,930
is likely here to stay they can't afford

1452
00:52:07,799 --> 00:52:13,819
to change to make a view ASIC to to fix

1453
00:52:09,930 --> 00:52:13,819
it but just the case is not there are

1454
00:52:16,190 --> 00:52:19,519
and just a breathing school circle there

1455
00:52:17,900 --> 00:52:21,589
is one new model called the teen to

1456
00:52:19,519 --> 00:52:23,930
advanced which is really just a ti-84

1457
00:52:21,589 --> 00:52:26,839
plus non silver edition without the 2.4

1458
00:52:23,930 --> 00:52:28,969
movement or IO port its European only

1459
00:52:26,839 --> 00:52:30,499
very lockdown compared to the others no

1460
00:52:28,969 --> 00:52:31,849
more assembly program execution no more

1461
00:52:30,499 --> 00:52:32,899
flash applications transferred with a PC

1462
00:52:31,849 --> 00:52:35,599
they're actually hard-coded and built

1463
00:52:32,900 --> 00:52:36,680
into the OS and they put an LED and like

1464
00:52:35,599 --> 00:52:39,319
I mentioned before the bling stirred

1465
00:52:36,680 --> 00:52:41,629
test instead of that IO board so how do

1466
00:52:39,319 --> 00:52:43,099
we have this thing well the obvious

1467
00:52:41,630 --> 00:52:43,849
thing is to resort back to the original

1468
00:52:43,099 --> 00:52:45,799
t82 hex

1469
00:52:43,849 --> 00:52:47,150
there's OS even after all these years

1470
00:52:45,799 --> 00:52:49,640
still pretty much rhythm still pretty

1471
00:52:47,150 --> 00:52:50,630
similar this one so to do that many

1472
00:52:49,640 --> 00:52:52,368
brand backups

1473
00:52:50,630 --> 00:52:53,930
that's no my something that happens over

1474
00:52:52,369 --> 00:52:56,329
the g15 longer IO port which we don't

1475
00:52:53,930 --> 00:52:58,359
ever have but unbeknownst to most people

1476
00:52:56,329 --> 00:53:01,519
ran backups actually do work over USB

1477
00:52:58,359 --> 00:53:03,109
sort of no link software supports it cuz

1478
00:53:01,519 --> 00:53:05,029
nobody ever bothered to look but the

1479
00:53:03,109 --> 00:53:07,308
code actually is there there is code to

1480
00:53:05,029 --> 00:53:09,079
handle it so I came up with a memory

1481
00:53:07,309 --> 00:53:10,880
backup especially crack the memory

1482
00:53:09,079 --> 00:53:12,289
backup corrupted real variables as well

1483
00:53:10,880 --> 00:53:15,619
as a script to transfer that Noreen back

1484
00:53:12,289 --> 00:53:17,599
up from DC to the calculator using that

1485
00:53:15,619 --> 00:53:18,829
code and it does work you can't get

1486
00:53:17,599 --> 00:53:21,380
coded execution on it and you can even

1487
00:53:18,829 --> 00:53:22,609
unlock flash same as the ones but then

1488
00:53:21,380 --> 00:53:24,140
they went released another model very

1489
00:53:22,609 --> 00:53:25,578
similar to this one called the t-84 + T

1490
00:53:24,140 --> 00:53:28,279
which is just a Silver Edition version

1491
00:53:25,579 --> 00:53:30,259
of this womanhood except they removed

1492
00:53:28,279 --> 00:53:32,229
the back in functionality so that

1493
00:53:30,259 --> 00:53:34,309
function is probably disappear stick

1494
00:53:32,229 --> 00:53:39,390
well it does work is probably gonna go

1495
00:53:34,309 --> 00:53:40,800
away so overall where do we go from here

1496
00:53:39,390 --> 00:53:42,240
well there's still plenty of X place to

1497
00:53:40,800 --> 00:53:43,650
release endless with daily inspires

1498
00:53:42,240 --> 00:53:45,330
constantly being fought mighty I like

1499
00:53:43,650 --> 00:53:46,950
enrichment so helps always appreciate

1500
00:53:45,330 --> 00:53:48,210
their you know they just went over we

1501
00:53:46,950 --> 00:53:49,529
need a method code privilege code

1502
00:53:48,210 --> 00:53:51,390
execution with the table advanced or

1503
00:53:49,530 --> 00:53:52,860
just T that's kind of an old-school

1504
00:53:51,390 --> 00:53:54,629
challenge that's still outstanding I

1505
00:53:52,860 --> 00:53:55,800
still get emails from people really

1506
00:53:54,630 --> 00:53:57,450
wanting code execution on this thing

1507
00:53:55,800 --> 00:53:59,100
specially in Europe and it's not

1508
00:53:57,450 --> 00:54:01,830
particularly just needs to do it I just

1509
00:53:59,100 --> 00:54:04,170
on time and then of course there's TA

1510
00:54:01,830 --> 00:54:05,880
for plus C e family where we need to

1511
00:54:04,170 --> 00:54:08,160
stay on top of new developments new

1512
00:54:05,880 --> 00:54:09,870
hardware revisions new OS versions you

1513
00:54:08,160 --> 00:54:11,370
never know when CI is going gonna make a

1514
00:54:09,870 --> 00:54:13,620
manufacturing change or an OS update

1515
00:54:11,370 --> 00:54:15,540
that has a big impact in community more

1516
00:54:13,620 --> 00:54:17,190
than once I've seen release OS updates

1517
00:54:15,540 --> 00:54:18,300
that have very serious bugs in them that

1518
00:54:17,190 --> 00:54:20,550
mess up programs that have been around

1519
00:54:18,300 --> 00:54:21,150
for decades so if we don't let them know

1520
00:54:20,550 --> 00:54:23,100
about these things

1521
00:54:21,150 --> 00:54:29,900
and the technical details to play into

1522
00:54:23,100 --> 00:54:31,920
wrong and how to fix it so in conclusion

1523
00:54:29,900 --> 00:54:34,110
hopefully you see now these can be great

1524
00:54:31,920 --> 00:54:35,070
educational tools they're simple devices

1525
00:54:34,110 --> 00:54:36,510
on the surface but they're actually

1526
00:54:35,070 --> 00:54:38,820
incredibly complex they have a rich

1527
00:54:36,510 --> 00:54:39,930
history behind them they show up early

1528
00:54:38,820 --> 00:54:41,280
in people's lives in high school or

1529
00:54:39,930 --> 00:54:41,940
sometimes even earlier for me it was so

1530
00:54:41,280 --> 00:54:44,340
great

1531
00:54:41,940 --> 00:54:45,960
the community started the community s

1532
00:54:44,340 --> 00:54:46,860
surrounding them have to deal with the

1533
00:54:45,960 --> 00:54:48,720
same issues that you see in other

1534
00:54:46,860 --> 00:54:49,950
communities things like exploit research

1535
00:54:48,720 --> 00:54:51,600
legal and ethical issues surrounding

1536
00:54:49,950 --> 00:54:53,339
what you work on or the least as well as

1537
00:54:51,600 --> 00:54:54,750
planning and why and you learn an awful

1538
00:54:53,340 --> 00:54:55,860
lot about embedded devices both high and

1539
00:54:54,750 --> 00:54:57,410
low level programming reverse

1540
00:54:55,860 --> 00:55:00,300
engineering game programming everything

1541
00:54:57,410 --> 00:55:01,290
really cannot recommend them enough and

1542
00:55:00,300 --> 00:55:02,460
they get a lot of people start in a

1543
00:55:01,290 --> 00:55:04,140
programming and reverse engineering that

1544
00:55:02,460 --> 00:55:05,580
you mean so whether you just start now

1545
00:55:04,140 --> 00:55:09,690
you just might take deeper into this

1546
00:55:05,580 --> 00:55:10,740
kind of thing also don't live legal

1547
00:55:09,690 --> 00:55:12,150
threats intimidate you if you're

1548
00:55:10,740 --> 00:55:14,759
upsetting someone you're probably doing

1549
00:55:12,150 --> 00:55:15,630
something right standing up to that kind

1550
00:55:14,760 --> 00:55:19,350
of intimidations

1551
00:55:15,630 --> 00:55:21,360
how change happens so that's

1552
00:55:19,350 --> 00:55:24,540
so if you're scared you know you're

1553
00:55:21,360 --> 00:55:29,190
purple yeah okay

1554
00:55:24,540 --> 00:55:31,410
it's there links that so you know if

1555
00:55:29,190 --> 00:55:34,800
you're scared about what you're working

1556
00:55:31,410 --> 00:55:36,029
on reach out you know there are people

1557
00:55:34,800 --> 00:55:38,190
out there that can help you if you need

1558
00:55:36,030 --> 00:55:40,140
it first you have to do something that

1559
00:55:38,190 --> 00:55:41,520
requires you to get help so don't fret

1560
00:55:40,140 --> 00:55:43,440
don't put something off because of the

1561
00:55:41,520 --> 00:55:44,850
way you're afraid might have them do it

1562
00:55:43,440 --> 00:55:51,240
first and then see what you can do with

1563
00:55:44,850 --> 00:55:52,350
it so my opinion here we squashed a lot

1564
00:55:51,240 --> 00:55:54,209
of problems in the calculon community

1565
00:55:52,350 --> 00:55:55,650
over the years but it's never over the

1566
00:55:54,210 --> 00:55:58,380
community needs your help or your kids

1567
00:55:55,650 --> 00:56:00,840
help your students out the case may be

1568
00:55:58,380 --> 00:56:01,830
there's always something more to do even

1569
00:56:00,840 --> 00:56:03,030
in this talk I'm into some of the

1570
00:56:01,830 --> 00:56:05,250
security related things that still need

1571
00:56:03,030 --> 00:56:06,330
to get done so it's important this kind

1572
00:56:05,250 --> 00:56:08,280
of research continue not just at this

1573
00:56:06,330 --> 00:56:09,990
community but just speak it generally so

1574
00:56:08,280 --> 00:56:12,800
we discuss stuff interests you stick

1575
00:56:09,990 --> 00:56:15,149
with it I promise you it's worth it so

1576
00:56:12,800 --> 00:56:18,180
my contact information is there on the

1577
00:56:15,150 --> 00:56:20,820
screen this is my website spring bebida

1578
00:56:18,180 --> 00:56:23,540
net and that is the YouTube channel its

1579
00:56:20,820 --> 00:56:23,540
tid programmer

