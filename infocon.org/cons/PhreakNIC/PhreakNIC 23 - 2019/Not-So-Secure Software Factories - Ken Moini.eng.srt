1
00:00:01,510 --> 00:00:15,549
oh right a gang villains these friends

2
00:00:05,590 --> 00:00:18,509
new enemies excited to battle but thank

3
00:00:15,549 --> 00:00:21,880
you for joining nice little post-lunch

4
00:00:18,509 --> 00:00:25,210
discussion roundtable fireside chat

5
00:00:21,880 --> 00:00:27,490
whatever we're doing these days we are

6
00:00:25,210 --> 00:00:29,740
going to discuss software

7
00:00:27,490 --> 00:00:31,479
I love software if you haven't figured

8
00:00:29,740 --> 00:00:33,100
that out I love infrastructure and

9
00:00:31,480 --> 00:00:36,640
everything in between

10
00:00:33,100 --> 00:00:38,320
which makes me a weirdo I guess but

11
00:00:36,640 --> 00:00:39,670
today we're gonna talk about these

12
00:00:38,320 --> 00:00:40,840
software factories as I mentioned it

13
00:00:39,670 --> 00:00:42,399
yesterday we're actually going to kind

14
00:00:40,840 --> 00:00:42,879
of spin one up so let's see if that

15
00:00:42,399 --> 00:00:45,309
works

16
00:00:42,879 --> 00:00:48,039
yesterday I did talk about automation

17
00:00:45,309 --> 00:00:49,449
why you should be doing it already you

18
00:00:48,039 --> 00:00:52,660
can this 2019

19
00:00:49,449 --> 00:00:56,559
I installed hands one good last night

20
00:00:52,660 --> 00:00:58,569
excellent um if you need some help

21
00:00:56,559 --> 00:01:01,989
holler at me I will do it happy to help

22
00:00:58,570 --> 00:01:03,609
you we didn't I think I've got a bunch

23
00:01:01,989 --> 00:01:06,640
of ants what workshops let's end you're

24
00:01:03,609 --> 00:01:08,710
way too soon but uh we learned yeah

25
00:01:06,640 --> 00:01:10,780
automation super key super easy you'll

26
00:01:08,710 --> 00:01:12,820
love it that's exciting pretty cool I'm

27
00:01:10,780 --> 00:01:15,300
sure a bunch of y'all went down docker

28
00:01:12,820 --> 00:01:18,220
and did some kubernetes fun stuff as

29
00:01:15,300 --> 00:01:20,770
well and we're all doing DevOps now

30
00:01:18,220 --> 00:01:24,090
right like that mops is cool DevOps is

31
00:01:20,770 --> 00:01:24,089
hot and this is not

32
00:01:30,040 --> 00:01:34,500
first before this side there we go

33
00:01:44,409 --> 00:01:50,409
do with no cut they said get a

34
00:01:47,640 --> 00:01:54,190
PowerPoint they said it's cool it's easy

35
00:01:50,409 --> 00:02:00,159
it's great they said it is it's great I

36
00:01:54,190 --> 00:02:02,399
like it but ain't got the Internet kind

37
00:02:00,159 --> 00:02:02,399
of song

38
00:02:10,780 --> 00:02:15,040
this is the dark and full tears apart

39
00:02:13,360 --> 00:02:16,960
like this is running on kubernetes

40
00:02:15,040 --> 00:02:20,140
cluster which is why I'm like I'm trying

41
00:02:16,960 --> 00:02:23,230
to try and soon joined dog food to

42
00:02:20,140 --> 00:02:25,510
services and things that I'm working so

43
00:02:23,230 --> 00:02:29,829
hard to put together right because I saw

44
00:02:25,510 --> 00:02:31,269
on I work lower cool stuff that it's

45
00:02:29,830 --> 00:02:34,030
built up money that's what we talked

46
00:02:31,270 --> 00:02:37,090
about yesterday hey it is working now

47
00:02:34,030 --> 00:02:38,230
that's great huh someone mentioned we've

48
00:02:37,090 --> 00:02:39,760
got you reference so I definitely have

49
00:02:38,230 --> 00:02:44,260
but this is actually normally a lot of

50
00:02:39,760 --> 00:02:46,299
my other presentations but it is - super

51
00:02:44,260 --> 00:02:53,799
hot everyone's doing it and it is

52
00:02:46,300 --> 00:02:58,270
SuperDuper cool right now that's cool to

53
00:02:53,800 --> 00:03:00,010
see kids right maybe I don't know though

54
00:02:58,270 --> 00:03:01,690
let's think about there

55
00:03:00,010 --> 00:03:03,880
there are tires actually not that cool

56
00:03:01,690 --> 00:03:06,579
there's some software in there you know

57
00:03:03,880 --> 00:03:09,609
they've got a couple tracking sensors in

58
00:03:06,580 --> 00:03:11,739
their shoulders and as they enter and

59
00:03:09,610 --> 00:03:15,880
leave school attracts them and you're

60
00:03:11,739 --> 00:03:17,739
thinking darn ah well I'll just give him

61
00:03:15,880 --> 00:03:19,510
my jacket to a buddy at the tunnel put

62
00:03:17,739 --> 00:03:21,519
in his backpack and then also just still

63
00:03:19,510 --> 00:03:24,910
skip school and you know smoke

64
00:03:21,519 --> 00:03:27,519
cigarettes my friends well they also use

65
00:03:24,910 --> 00:03:30,359
facial recognition technology as you

66
00:03:27,519 --> 00:03:32,650
entered to make sure that you're not

67
00:03:30,360 --> 00:03:36,549
software is doing some really cool

68
00:03:32,650 --> 00:03:38,560
things these days right and software is

69
00:03:36,549 --> 00:03:42,610
having some interesting effects as far

70
00:03:38,560 --> 00:03:44,920
as our security goes software is hot

71
00:03:42,610 --> 00:03:54,190
they does hot it is with more valuable

72
00:03:44,920 --> 00:03:57,160
than oil and gold we are we've been

73
00:03:54,190 --> 00:04:00,280
under a cyber war for a long time

74
00:03:57,160 --> 00:04:03,630
especially on the public sector if

75
00:04:00,280 --> 00:04:06,130
anyone isn't familiar with how the

76
00:04:03,630 --> 00:04:08,290
armed forces and branches of the

77
00:04:06,130 --> 00:04:10,510
government work with contractors the

78
00:04:08,290 --> 00:04:12,280
aren't meaning the Navy the Air Force

79
00:04:10,510 --> 00:04:14,530
they really do a lot of computer stuff

80
00:04:12,280 --> 00:04:17,440
alright they contract out to different

81
00:04:14,530 --> 00:04:19,750
companies DoD CIOs initiative it's done

82
00:04:17,440 --> 00:04:23,770
by this company called cloud one I think

83
00:04:19,750 --> 00:04:25,480
a level one it's a silly name but they

84
00:04:23,770 --> 00:04:28,990
do that for a lot of reasons indemnities

85
00:04:25,480 --> 00:04:31,300
one of the big reasons right that's how

86
00:04:28,990 --> 00:04:34,560
Accenture can hire offshore developers

87
00:04:31,300 --> 00:04:37,150
and whatever they poop the bed

88
00:04:34,560 --> 00:04:38,980
hey they underbid everybody so we're

89
00:04:37,150 --> 00:04:42,039
just gonna try again on the next picture

90
00:04:38,980 --> 00:04:43,750
but cycle either way if the whole

91
00:04:42,040 --> 00:04:47,310
Snowden thing didn't get you interested

92
00:04:43,750 --> 00:04:49,540
in how Booz Allen Hamilton and Boeing

93
00:04:47,310 --> 00:04:51,130
General Dynamics of General Atomics and

94
00:04:49,540 --> 00:04:54,400
all these other folk work just check it

95
00:04:51,130 --> 00:04:58,570
out it is an interesting ecosystem it's

96
00:04:54,400 --> 00:05:02,370
weird to be in it now software otherwise

97
00:04:58,570 --> 00:05:02,370
the development of software itself

98
00:05:04,850 --> 00:05:14,050
they're here a little too far though I'm

99
00:05:10,220 --> 00:05:16,820
here to pick on software to break so I

100
00:05:14,050 --> 00:05:21,950
like JavaScript I do a lot of JavaScript

101
00:05:16,820 --> 00:05:23,659
myself now

102
00:05:21,950 --> 00:05:25,760
the underpinnings of our software is

103
00:05:23,660 --> 00:05:28,850
laying on matchsticks

104
00:05:25,760 --> 00:05:32,030
actually there's I miss quoted the

105
00:05:28,850 --> 00:05:35,210
statistic yesterday but if we just typed

106
00:05:32,030 --> 00:05:37,130
the wrong packages here and there we

107
00:05:35,210 --> 00:05:39,310
didn't do some pretty good damage to it

108
00:05:37,130 --> 00:05:39,310
right

109
00:05:45,439 --> 00:05:48,369
ouch done

110
00:05:50,479 --> 00:06:00,229
all right good

111
00:05:55,749 --> 00:06:02,629
um I have tried that actually um well

112
00:06:00,229 --> 00:06:04,430
I'm going to try this which runs is a

113
00:06:02,629 --> 00:06:19,270
real access point and in Sweetzer

114
00:06:04,430 --> 00:06:19,270
Murphysboro I know that was the truth

115
00:06:23,470 --> 00:06:34,020
to rent my P let's login I agree to

116
00:06:28,810 --> 00:06:34,020
whatever monitoring you're about to do

117
00:06:37,120 --> 00:06:41,940
great alright

118
00:06:47,510 --> 00:06:51,830
maybe the pot is failing on the

119
00:06:49,340 --> 00:06:53,289
kubernetes cluster who knows that would

120
00:06:51,830 --> 00:06:55,669
be great

121
00:06:53,290 --> 00:06:57,880
alright much faster just look much

122
00:06:55,670 --> 00:06:57,880
better

123
00:06:59,800 --> 00:07:04,300
all right so all right house is built on

124
00:07:02,440 --> 00:07:07,000
matchsticks that is ready to burn them

125
00:07:04,300 --> 00:07:09,849
and again as much as I like to have fun

126
00:07:07,000 --> 00:07:11,500
Acts JavaScript let's also poke fun at

127
00:07:09,849 --> 00:07:13,599
somebody else that's pretty cool the

128
00:07:11,500 --> 00:07:15,789
important in the enterprise environment

129
00:07:13,599 --> 00:07:21,780
bad news Java any Java developers out

130
00:07:15,789 --> 00:07:21,780
here do you know what bouncy castle is

131
00:07:23,610 --> 00:07:34,569
ok bouncy castle is one of the one of

132
00:07:31,389 --> 00:07:39,009
the cryptography libraries in Java it's

133
00:07:34,569 --> 00:07:40,630
very core crucial cryptography library

134
00:07:39,009 --> 00:07:43,150
it's been vulnerable there have been

135
00:07:40,630 --> 00:07:49,900
numerous boner bull Persians of it out

136
00:07:43,150 --> 00:07:52,000
there in the ecosystem for decades and

137
00:07:49,900 --> 00:07:55,120
there's still vulnerable versions

138
00:07:52,000 --> 00:08:00,009
downloaded to this day this buddy of

139
00:07:55,120 --> 00:08:01,960
mine on Nexus or soda tank rather they

140
00:08:00,009 --> 00:08:03,280
run the maven repository so if you

141
00:08:01,960 --> 00:08:05,229
download Java components is likely

142
00:08:03,280 --> 00:08:10,508
coming from maven repository it's like

143
00:08:05,229 --> 00:08:11,710
the tube but a lot of that's probably

144
00:08:10,509 --> 00:08:15,130
from Jenkins and we'll see that later

145
00:08:11,710 --> 00:08:18,659
today so what I'm saying is that as

146
00:08:15,130 --> 00:08:22,120
anyone in the security industry knows

147
00:08:18,659 --> 00:08:24,789
it's awful shut we're just pretending it

148
00:08:22,120 --> 00:08:26,919
all just kind of works together my name

149
00:08:24,789 --> 00:08:31,599
is Ken Monty and I am here to tell you

150
00:08:26,919 --> 00:08:34,328
that your baby's ugly you can see my

151
00:08:31,599 --> 00:08:37,299
 code I'm github watch you see out

152
00:08:34,328 --> 00:08:40,059
here MIT well posts on the Twitter

153
00:08:37,299 --> 00:08:45,370
if it looks like a polar bear you're the

154
00:08:40,059 --> 00:08:47,050
right place I work for a company called

155
00:08:45,370 --> 00:08:48,700
for your software this is a value-added

156
00:08:47,050 --> 00:08:50,979
reseller we work on public sector so we

157
00:08:48,700 --> 00:08:53,620
actually get to go on site to some of

158
00:08:50,980 --> 00:08:55,450
those contractors I'm named earlier and

159
00:08:53,620 --> 00:08:58,600
I got to teach them this stuff we get

160
00:08:55,450 --> 00:09:01,060
hands on keyboards and we do ansible

161
00:08:58,600 --> 00:09:03,579
workshops we do all sorts of different

162
00:09:01,060 --> 00:09:05,130
things and I put a lot of these things

163
00:09:03,579 --> 00:09:07,770
together for them help

164
00:09:05,130 --> 00:09:09,930
get started again a little extra value

165
00:09:07,770 --> 00:09:10,949
we don't just sell you the software we

166
00:09:09,930 --> 00:09:14,250
want to make sure that it's not just

167
00:09:10,950 --> 00:09:15,510
shelf we're here yep second fits six

168
00:09:14,250 --> 00:09:19,410
months later because you haven't got the

169
00:09:15,510 --> 00:09:21,900
road but either way we do some cool

170
00:09:19,410 --> 00:09:26,370
stuff got a League of workshops on

171
00:09:21,900 --> 00:09:28,920
ansible on data science on containers on

172
00:09:26,370 --> 00:09:34,380
security of cyber threat hunting secure

173
00:09:28,920 --> 00:09:36,150
software factory we'll see but yesterday

174
00:09:34,380 --> 00:09:40,020
we talked a little bit about kubernetes

175
00:09:36,150 --> 00:09:44,280
right the kubernetes comes from the

176
00:09:40,020 --> 00:09:47,060
greek word of fun factor will

177
00:09:44,280 --> 00:09:51,569
tribute ansible comes from Enders game

178
00:09:47,060 --> 00:09:53,339
but by the way kubernetes is that

179
00:09:51,570 --> 00:09:54,840
magical thing it's gonna take your

180
00:09:53,340 --> 00:09:56,820
containers and it's gonna run them

181
00:09:54,840 --> 00:10:00,720
across your enterprise right great group

182
00:09:56,820 --> 00:10:02,550
solve all of our problems now well what

183
00:10:00,720 --> 00:10:06,630
is the container just as a recap it is a

184
00:10:02,550 --> 00:10:08,099
process as process isolation was a small

185
00:10:06,630 --> 00:10:12,240
swarm compute as far as you're concerned

186
00:10:08,100 --> 00:10:14,550
in this context we get a couple things

187
00:10:12,240 --> 00:10:17,000
kind of misconstrued in this ecosystem

188
00:10:14,550 --> 00:10:18,270
one container images and container

189
00:10:17,000 --> 00:10:20,900
runtimes

190
00:10:18,270 --> 00:10:24,930
binaries right so you've got docker

191
00:10:20,900 --> 00:10:27,360
which is the runtime they run docker run

192
00:10:24,930 --> 00:10:35,939
that is the runtime actually acting on

193
00:10:27,360 --> 00:10:37,410
an image okay yeah discern between there

194
00:10:35,940 --> 00:10:38,700
are a couple different runtimes they're

195
00:10:37,410 --> 00:10:40,140
a little bit more about the source a

196
00:10:38,700 --> 00:10:42,080
little bit more community driven because

197
00:10:40,140 --> 00:10:44,970
dr. kind of went a little ways away

198
00:10:42,080 --> 00:10:47,280
there were sort of image formats as well

199
00:10:44,970 --> 00:10:48,810
two ways to build them some cool stuff

200
00:10:47,280 --> 00:10:52,699
and then you go system now as you

201
00:10:48,810 --> 00:10:55,410
might've seen from that explosion time

202
00:10:52,700 --> 00:10:57,840
now you're gonna get these container

203
00:10:55,410 --> 00:10:58,920
images from a repository yay we're

204
00:10:57,840 --> 00:11:00,360
pulling things from a little better

205
00:10:58,920 --> 00:11:03,979
you've probably heard of docker hub

206
00:11:00,360 --> 00:11:06,200
right we're able to tag them

207
00:11:03,980 --> 00:11:07,880
different names conversion them so if

208
00:11:06,200 --> 00:11:10,940
you're used to get it's gonna feel very

209
00:11:07,880 --> 00:11:13,250
familiar to you right what is really

210
00:11:10,940 --> 00:11:15,950
cool actually I'll point out is that say

211
00:11:13,250 --> 00:11:19,580
we deploy a new application right let's

212
00:11:15,950 --> 00:11:22,550
say front end in 2.0 and we realize oh

213
00:11:19,580 --> 00:11:24,410
no it doesn't work in this particular

214
00:11:22,550 --> 00:11:26,990
cluster that we deployed it to that's

215
00:11:24,410 --> 00:11:29,510
great we deployed everything with latest

216
00:11:26,990 --> 00:11:34,490
well we know that 1.1 works we're just

217
00:11:29,510 --> 00:11:37,850
gonna redeploy 1.1 that's atomic

218
00:11:34,490 --> 00:11:40,520
versioning that hashing between the

219
00:11:37,850 --> 00:11:42,710
changes of the file system is pretty

220
00:11:40,520 --> 00:11:44,300
cool and it is just an overlay file

221
00:11:42,710 --> 00:11:47,540
system it's basically it's horrible

222
00:11:44,300 --> 00:11:50,270
that's what it is right these are all

223
00:11:47,540 --> 00:11:53,480
like primitive technologies made easy to

224
00:11:50,270 --> 00:11:54,920
use so containers run a pods that's how

225
00:11:53,480 --> 00:11:57,260
you actually kind of address them in a

226
00:11:54,920 --> 00:12:00,530
nun Samba now you can actually assign

227
00:11:57,260 --> 00:12:01,670
them my piece put multiple pods or

228
00:12:00,530 --> 00:12:05,000
multiple containers in a pod

229
00:12:01,670 --> 00:12:06,829
traditionally you want to run a single

230
00:12:05,000 --> 00:12:08,960
container in a pot because you're going

231
00:12:06,830 --> 00:12:10,610
to be scaling PI's you're not scaling

232
00:12:08,960 --> 00:12:13,910
containers in an orchestration of

233
00:12:10,610 --> 00:12:15,410
dreamers you're stealing pawns scaling

234
00:12:13,910 --> 00:12:18,439
multiple containers in a pod is very

235
00:12:15,410 --> 00:12:20,660
difficult and it's the silly monolithic

236
00:12:18,440 --> 00:12:23,540
way of doing things right if your

237
00:12:20,660 --> 00:12:25,189
messaging queue is starting to fill up

238
00:12:23,540 --> 00:12:26,990
you need a scale that you don't need to

239
00:12:25,190 --> 00:12:28,880
scale your front end you got the

240
00:12:26,990 --> 00:12:30,410
containers all on pod your scaling and

241
00:12:28,880 --> 00:12:33,230
everything together that's just a

242
00:12:30,410 --> 00:12:34,760
thought deployment sets deployment

243
00:12:33,230 --> 00:12:36,880
configurations there are different ways

244
00:12:34,760 --> 00:12:39,650
to deploy basically you can take a

245
00:12:36,880 --> 00:12:41,480
verbose description in you handle the

246
00:12:39,650 --> 00:12:46,520
same stuff that ansible is written in

247
00:12:41,480 --> 00:12:49,130
and you can join ensemble of these pods

248
00:12:46,520 --> 00:12:50,360
and have their configurations now how do

249
00:12:49,130 --> 00:12:52,850
you address these pods

250
00:12:50,360 --> 00:12:54,770
you've got services this is just

251
00:12:52,850 --> 00:12:56,480
produced by DNS okay so if you don't

252
00:12:54,770 --> 00:12:57,890
know much about d-nice you should learn

253
00:12:56,480 --> 00:12:59,060
a little bit about dns because the

254
00:12:57,890 --> 00:13:00,620
answers gonna be everywhere in a

255
00:12:59,060 --> 00:13:04,849
kubernetes cluster and it is going to be

256
00:13:00,620 --> 00:13:06,960
paddle for you kubernetes natively only

257
00:13:04,850 --> 00:13:09,149
brings coop dns internally we

258
00:13:06,960 --> 00:13:12,660
this back-end service that's allows you

259
00:13:09,149 --> 00:13:13,230
to name pods and address them between

260
00:13:12,660 --> 00:13:15,240
each other

261
00:13:13,230 --> 00:13:17,339
right so now what I'm able to do is

262
00:13:15,240 --> 00:13:18,930
invoke the front-end service from back

263
00:13:17,339 --> 00:13:21,990
it then I'm really just be read the

264
00:13:18,930 --> 00:13:27,359
backend as an fqdn so if I'm clearing an

265
00:13:21,990 --> 00:13:31,560
API and I'm say use Mel gun API to send

266
00:13:27,360 --> 00:13:34,470
out transactional emails right cool

267
00:13:31,560 --> 00:13:37,709
so that's API that mailgun calm for

268
00:13:34,470 --> 00:13:44,160
slash b1 blah blah know your address is

269
00:13:37,709 --> 00:13:46,560
just pretty cool stuff again DNS so get

270
00:13:44,160 --> 00:13:48,689
used to that's kind of our kubernetes

271
00:13:46,560 --> 00:13:50,369
stops this is where you start to think

272
00:13:48,690 --> 00:13:51,540
about your ingress all right there are a

273
00:13:50,370 --> 00:13:53,339
couple different kinds of ingress is

274
00:13:51,540 --> 00:13:59,189
that you can have your nginx in grass

275
00:13:53,339 --> 00:14:00,390
you've got got a couple other ones that

276
00:13:59,190 --> 00:14:01,830
I'm forgetting I don't know I just use

277
00:14:00,390 --> 00:14:04,290
the nginx ingress that's great

278
00:14:01,830 --> 00:14:07,770
actually some people use a virtualized

279
00:14:04,290 --> 00:14:10,079
big-ip f5 f5

280
00:14:07,770 --> 00:14:12,120
wow that was backward scratch that

281
00:14:10,080 --> 00:14:14,750
reverse it but you can do a couple

282
00:14:12,120 --> 00:14:19,170
different things for your ingress

283
00:14:14,750 --> 00:14:20,520
north-south traffic now you separate

284
00:14:19,170 --> 00:14:22,800
your different projects into different

285
00:14:20,520 --> 00:14:25,529
namespaces and that kind of keeps things

286
00:14:22,800 --> 00:14:27,750
and people and applications and systems

287
00:14:25,529 --> 00:14:28,950
where they're supposed to be they can

288
00:14:27,750 --> 00:14:32,880
talk between each other but

289
00:14:28,950 --> 00:14:35,279
traditionally they dump all right so

290
00:14:32,880 --> 00:14:39,029
we've got Reddy's right and we're ready

291
00:14:35,279 --> 00:14:41,189
to rock and roll nope well some of that

292
00:14:39,029 --> 00:14:42,900
networking actually is not really built

293
00:14:41,190 --> 00:14:45,450
into kubernetes a lot of the kubernetes

294
00:14:42,900 --> 00:14:48,180
deployers will deploy like flower or

295
00:14:45,450 --> 00:14:50,459
weaver open vSwitch right so that's no

296
00:14:48,180 --> 00:14:52,140
problem this is traditionally what

297
00:14:50,459 --> 00:14:56,219
people think of as kubernetes start off

298
00:14:52,140 --> 00:14:57,600
with if you're running kubernetes you're

299
00:14:56,220 --> 00:14:59,010
going to be pulling in those images

300
00:14:57,600 --> 00:15:01,350
right so you're not going to be want to

301
00:14:59,010 --> 00:15:05,250
be pulling from a hub on the internet

302
00:15:01,350 --> 00:15:08,550
every single time every single node

303
00:15:05,250 --> 00:15:09,440
deploys another pod that sucks so we're

304
00:15:08,550 --> 00:15:13,579
gonna load it up

305
00:15:09,440 --> 00:15:15,110
tomorrow that's great um otherwise we

306
00:15:13,580 --> 00:15:16,730
need a little visibility because as soon

307
00:15:15,110 --> 00:15:19,250
as a pot dies everything else with it

308
00:15:16,730 --> 00:15:21,350
dives traditionally including locks so

309
00:15:19,250 --> 00:15:24,050
if your pot is erroring out and it's

310
00:15:21,350 --> 00:15:25,750
just going into a crash loop that's what

311
00:15:24,050 --> 00:15:28,729
it's called a crash loop it just

312
00:15:25,750 --> 00:15:31,400
operates dies operates and dies operate

313
00:15:28,730 --> 00:15:34,250
sometimes and it stops kubernetes we go

314
00:15:31,400 --> 00:15:38,510
said okay this isn't working out I need

315
00:15:34,250 --> 00:15:40,610
some space but if you don't have

316
00:15:38,510 --> 00:15:43,040
persistent metrics logging you can't

317
00:15:40,610 --> 00:15:45,140
really see what's going home very still

318
00:15:43,040 --> 00:15:46,430
we need to be able to imagine life cycle

319
00:15:45,140 --> 00:15:48,050
this is also kind of a little bit more

320
00:15:46,430 --> 00:15:51,829
built in kubernetes over the last couple

321
00:15:48,050 --> 00:15:53,209
of versions application services I just

322
00:15:51,830 --> 00:15:54,230
started to build out these platforms of

323
00:15:53,210 --> 00:15:55,700
course you need something integrated

324
00:15:54,230 --> 00:15:57,650
think a little blue that goes together

325
00:15:55,700 --> 00:15:59,540
and of course a little click panel pal

326
00:15:57,650 --> 00:16:01,490
and then there's a bunch of other stuff

327
00:15:59,540 --> 00:16:06,110
that kind of goes into operational

328
00:16:01,490 --> 00:16:09,530
kubernetes do kubernetes the hard way I

329
00:16:06,110 --> 00:16:12,380
am before you do it it's great you learn

330
00:16:09,530 --> 00:16:19,160
so much especially about public key

331
00:16:12,380 --> 00:16:21,740
infrastructure it is very important to

332
00:16:19,160 --> 00:16:24,230
know and it kind of unveils all the

333
00:16:21,740 --> 00:16:26,660
things that it does and that you still

334
00:16:24,230 --> 00:16:28,910
need you'll find a lot of these things

335
00:16:26,660 --> 00:16:30,890
here on the side chart again is things

336
00:16:28,910 --> 00:16:32,600
gonna hunt if you're gonna get into this

337
00:16:30,890 --> 00:16:34,100
ecosystem this thing's gonna haunt you

338
00:16:32,600 --> 00:16:38,110
and it's updated pretty much every day

339
00:16:34,100 --> 00:16:41,320
this thing's already out of date the one

340
00:16:38,110 --> 00:16:44,810
thing though a little like mention is

341
00:16:41,320 --> 00:16:46,760
and I promised myself like not to make

342
00:16:44,810 --> 00:16:47,959
this like two salesy or whatever that's

343
00:16:46,760 --> 00:16:51,080
what I do there one day today I'm

344
00:16:47,960 --> 00:16:53,380
talking like concepts but we're gonna

345
00:16:51,080 --> 00:16:56,380
talk a little bit

346
00:16:53,380 --> 00:16:57,430
that is what makes my life easy just

347
00:16:56,380 --> 00:16:59,410
like ansible right

348
00:16:57,430 --> 00:17:01,120
I love ansible for automation that's

349
00:16:59,410 --> 00:17:04,869
what I use and a lot of shell scripts

350
00:17:01,120 --> 00:17:11,170
but OpenShift makes my life easy

351
00:17:04,869 --> 00:17:14,619
oh this is I'm sorry this is the cloud

352
00:17:11,170 --> 00:17:17,230
native foundations it's like the Linux

353
00:17:14,619 --> 00:17:19,030
Foundation has a bunch of people soup

354
00:17:17,230 --> 00:17:21,390
like glad-handing and patting each other

355
00:17:19,030 --> 00:17:23,649
on back for support open-source but

356
00:17:21,390 --> 00:17:26,590
there's money behind it they help drive

357
00:17:23,650 --> 00:17:28,090
innovation so there's some good but the

358
00:17:26,589 --> 00:17:30,340
cloud native foundation this is their

359
00:17:28,089 --> 00:17:33,310
cloud native landscape there are

360
00:17:30,340 --> 00:17:35,560
different sort of levels for being in

361
00:17:33,310 --> 00:17:37,330
this ecosystem as you're gonna bet

362
00:17:35,560 --> 00:17:39,879
you've probably got to pay money to be

363
00:17:37,330 --> 00:17:41,919
on him right so there's a little bit of

364
00:17:39,880 --> 00:17:44,500
price to get your logo on here but there

365
00:17:41,920 --> 00:17:46,240
is massive exposure like you're cute

366
00:17:44,500 --> 00:17:48,460
Khan and all sorts of fun stuff so if

367
00:17:46,240 --> 00:17:50,650
you are developing a kubernetes native

368
00:17:48,460 --> 00:17:53,110
application this actually might be your

369
00:17:50,650 --> 00:17:55,390
trajectory this is actually where we're

370
00:17:53,110 --> 00:18:02,080
going to be landing with our secure

371
00:17:55,390 --> 00:18:04,060
software factor it's pretty cool we're

372
00:18:02,080 --> 00:18:06,090
already in the process of deploying our

373
00:18:04,060 --> 00:18:08,830
container as a certified Red Hat

374
00:18:06,090 --> 00:18:11,620
container which is really exciting that

375
00:18:08,830 --> 00:18:15,070
just means that we're enabled to be

376
00:18:11,620 --> 00:18:18,100
deployed into FedRAMP locations like a

377
00:18:15,070 --> 00:18:19,419
rock by either way I'm babbling on but

378
00:18:18,100 --> 00:18:21,520
this is really cool and this literally

379
00:18:19,420 --> 00:18:24,700
changes the data thing there is a date

380
00:18:21,520 --> 00:18:27,100
on here nowhere because I scrubbed it

381
00:18:24,700 --> 00:18:29,110
out exams really embarrassed last time

382
00:18:27,100 --> 00:18:30,459
somebody pointed out how old it was but

383
00:18:29,110 --> 00:18:34,000
this thing really changes out very

384
00:18:30,460 --> 00:18:36,280
quickly what will I do really like is

385
00:18:34,000 --> 00:18:38,170
overshoot because instead of doing this

386
00:18:36,280 --> 00:18:40,060
whole building of kubernetes things

387
00:18:38,170 --> 00:18:41,590
which really sucks no to kubernetes

388
00:18:40,060 --> 00:18:44,320
clusters are gonna be the same really

389
00:18:41,590 --> 00:18:46,030
yeah you can template deploy yourself

390
00:18:44,320 --> 00:18:47,428
but I'm not gonna make it the same way

391
00:18:46,030 --> 00:18:50,799
you're

392
00:18:47,429 --> 00:18:53,200
and I guarantee you that by the time

393
00:18:50,799 --> 00:18:54,879
that I do all the work to set it up and

394
00:18:53,200 --> 00:18:56,590
secure it or you know whatever your

395
00:18:54,879 --> 00:18:58,449
organization does and new versions come

396
00:18:56,590 --> 00:19:00,668
out the API is changed are a couple

397
00:18:58,450 --> 00:19:02,919
different manifesting custom resource

398
00:19:00,669 --> 00:19:07,299
types definitions to make your life a

399
00:19:02,919 --> 00:19:09,279
new nightmare right so let's

400
00:19:07,299 --> 00:19:11,080
operationalize let's offload that task

401
00:19:09,279 --> 00:19:12,519
lets you know get read have to do it

402
00:19:11,080 --> 00:19:18,610
there's an open-source version called

403
00:19:12,519 --> 00:19:20,830
okd or origin kubernetes distribution

404
00:19:18,610 --> 00:19:23,740
yeah Wow I know that one

405
00:19:20,830 --> 00:19:25,809
it is the upstream version of open

406
00:19:23,740 --> 00:19:27,759
shipped so if you're looking at just

407
00:19:25,809 --> 00:19:30,220
like want to run Red Hat's ownership for

408
00:19:27,759 --> 00:19:32,830
free okay deep right now if you're

409
00:19:30,220 --> 00:19:34,809
looking to run openshift for it would be

410
00:19:32,830 --> 00:19:36,699
code ready containers that's the new

411
00:19:34,809 --> 00:19:38,769
like they love changing things I mean

412
00:19:36,700 --> 00:19:40,539
that's how you everybody kept on their

413
00:19:38,769 --> 00:19:43,659
feet right they do a lot of security

414
00:19:40,539 --> 00:19:45,730
Hardy a lot of extra validation into the

415
00:19:43,659 --> 00:19:49,570
SC Linux context we'll get into at the

416
00:19:45,730 --> 00:19:52,330
moment in a lot of other jazz and it is

417
00:19:49,570 --> 00:19:54,939
pre foundational in our secure software

418
00:19:52,330 --> 00:19:57,460
factory um but as I like to tell people

419
00:19:54,940 --> 00:20:00,039
that I don't really care about open

420
00:19:57,460 --> 00:20:02,529
ships and it's something it is the

421
00:20:00,039 --> 00:20:04,509
platform broken dreams like all right

422
00:20:02,529 --> 00:20:06,460
let's say a bunch of open ship but

423
00:20:04,509 --> 00:20:11,559
without workloads go on there you gonna

424
00:20:06,460 --> 00:20:12,610
be upset and that's usually actually

425
00:20:11,559 --> 00:20:14,230
what happens with a bunch of people who

426
00:20:12,610 --> 00:20:18,369
jump into container workloads without

427
00:20:14,230 --> 00:20:19,960
figuring it out first what's really

428
00:20:18,369 --> 00:20:21,158
important is not open ship it's

429
00:20:19,960 --> 00:20:23,230
everything that you've got running on

430
00:20:21,159 --> 00:20:26,379
top of it okay

431
00:20:23,230 --> 00:20:28,210
it's as pipelines Jenkins that's

432
00:20:26,379 --> 00:20:29,408
delivering your applications through

433
00:20:28,210 --> 00:20:30,519
your different namespaces through its

434
00:20:29,409 --> 00:20:33,909
different processes

435
00:20:30,519 --> 00:20:35,649
it's a centralization on your developer

436
00:20:33,909 --> 00:20:38,049
workflows I've gone on organizations

437
00:20:35,649 --> 00:20:41,518
where they've had bitbucket mercurial

438
00:20:38,049 --> 00:20:41,519
SVN and they use github

439
00:20:44,010 --> 00:20:48,240
now we're also working organizations

440
00:20:46,590 --> 00:20:50,370
that have centralized around a specific

441
00:20:48,240 --> 00:20:52,020
one most times it's github like they get

442
00:20:50,370 --> 00:20:53,760
you get hub enterprise but there di like

443
00:20:52,020 --> 00:20:56,129
through Microsoft now that they've done

444
00:20:53,760 --> 00:21:00,629
it just works out well for them I can -

445
00:20:56,130 --> 00:21:02,540
okay it's a good solution for them but

446
00:21:00,630 --> 00:21:04,620
as soon as you centralized around

447
00:21:02,540 --> 00:21:07,260
repository management you're gonna get

448
00:21:04,620 --> 00:21:10,309
some cool stuff a couple steps through

449
00:21:07,260 --> 00:21:12,480
here important concepts to think of

450
00:21:10,309 --> 00:21:13,620
again I don't want to get too salesy I

451
00:21:12,480 --> 00:21:16,320
just rip this out of my normal

452
00:21:13,620 --> 00:21:19,500
presentation slides automation

453
00:21:16,320 --> 00:21:20,909
everywhere okay if you're doing it in a

454
00:21:19,500 --> 00:21:22,200
secure context like a lot of our

455
00:21:20,910 --> 00:21:25,260
customers are you going to be dealing

456
00:21:22,200 --> 00:21:25,830
with different sort of benchmarks and

457
00:21:25,260 --> 00:21:28,350
Stig's

458
00:21:25,830 --> 00:21:30,270
this is sticks a lot CIS is another

459
00:21:28,350 --> 00:21:31,290
benchmark that we're seeing a lot

460
00:21:30,270 --> 00:21:36,000
whenever you're deploying cloud

461
00:21:31,290 --> 00:21:39,389
workloads right use automation to set

462
00:21:36,000 --> 00:21:41,700
that baseline security context there is

463
00:21:39,390 --> 00:21:45,179
a project called ansible lockdown it

464
00:21:41,700 --> 00:21:49,049
actually takes CIS and this is stig

465
00:21:45,179 --> 00:21:51,000
benchmarks and you can flip a bunch of

466
00:21:49,049 --> 00:21:53,879
switches set whatever sort of level you

467
00:21:51,000 --> 00:21:58,679
want to scan act it scans it does an

468
00:21:53,880 --> 00:22:00,360
open essence cap stig skin and then it

469
00:21:58,679 --> 00:22:01,799
applies your actions if you want and

470
00:22:00,360 --> 00:22:03,540
then it gives you another report to show

471
00:22:01,799 --> 00:22:07,820
you the difference in our cool color

472
00:22:03,540 --> 00:22:11,460
coded Sharpe it's dope check it out now

473
00:22:07,820 --> 00:22:13,740
software analysis something like sonar

474
00:22:11,460 --> 00:22:15,120
cube another open source project what's

475
00:22:13,740 --> 00:22:19,520
cool about that is it does two things

476
00:22:15,120 --> 00:22:23,580
like code smells it does you know type

477
00:22:19,520 --> 00:22:24,780
checking all sorts of fun stuff just to

478
00:22:23,580 --> 00:22:27,030
make sure that your developers aren't

479
00:22:24,780 --> 00:22:28,918
making like common errors right it's

480
00:22:27,030 --> 00:22:32,660
gonna improve the baseline quality of

481
00:22:28,919 --> 00:22:36,750
your code software code analysis took

482
00:22:32,660 --> 00:22:39,030
tools like certain types nexus

483
00:22:36,750 --> 00:22:42,570
repository management what's pretty cool

484
00:22:39,030 --> 00:22:44,668
about that is that for instance you want

485
00:22:42,570 --> 00:22:46,260
to find out what's really built in your

486
00:22:44,669 --> 00:22:46,700
java application you want to find out

487
00:22:46,260 --> 00:22:48,350
what

488
00:22:46,700 --> 00:22:50,150
built in your container we want to find

489
00:22:48,350 --> 00:22:53,020
out what's really builds your node

490
00:22:50,150 --> 00:22:56,390
application because you don't trust your

491
00:22:53,020 --> 00:22:58,790
package.json right what our case may be

492
00:22:56,390 --> 00:23:01,910
you throw your application at it it

493
00:22:58,790 --> 00:23:03,409
proxies registries like NPM and docker

494
00:23:01,910 --> 00:23:05,480
hub and this that and the other lets you

495
00:23:03,410 --> 00:23:08,120
put policies around that and all sorts

496
00:23:05,480 --> 00:23:09,800
of lockdown and fun stuff but um it'll

497
00:23:08,120 --> 00:23:11,449
also produce you a bomb a bill of

498
00:23:09,800 --> 00:23:14,360
materials right so it's actually going

499
00:23:11,450 --> 00:23:16,900
to produce a list of the dependencies

500
00:23:14,360 --> 00:23:19,669
and different components in your

501
00:23:16,900 --> 00:23:22,780
software which is really cool also

502
00:23:19,670 --> 00:23:27,430
discovers licenses we're gonna yeah

503
00:23:22,780 --> 00:23:30,530
something about my senses not too much

504
00:23:27,430 --> 00:23:33,020
some licenses are kind of aggressive

505
00:23:30,530 --> 00:23:35,780
like the a GPL license honorable

506
00:23:33,020 --> 00:23:37,790
organizations that I work with do not

507
00:23:35,780 --> 00:23:40,250
allow a GPL in their organization

508
00:23:37,790 --> 00:23:41,780
because that license mandates that

509
00:23:40,250 --> 00:23:47,060
whatever it touches is also open source

510
00:23:41,780 --> 00:23:48,590
a lot of our customers like to consume

511
00:23:47,060 --> 00:23:53,899
open source but they can't give out of

512
00:23:48,590 --> 00:23:55,580
the source I do but different ways so

513
00:23:53,900 --> 00:23:57,200
that's something important maybe your

514
00:23:55,580 --> 00:23:59,899
organization doesn't want to support

515
00:23:57,200 --> 00:24:03,040
something like beer we're okay here's a

516
00:23:59,900 --> 00:24:03,040
beer we're license

517
00:24:05,009 --> 00:24:11,320
huh isn't free yeah well no it is free

518
00:24:09,340 --> 00:24:12,939
free isn't beer but the beer we're

519
00:24:11,320 --> 00:24:19,989
license says that if you meet me in a

520
00:24:12,940 --> 00:24:23,169
bar you need to buy me a drink it's not

521
00:24:19,989 --> 00:24:25,269
a bad license right Church of latter-day

522
00:24:23,169 --> 00:24:30,609
saints does not allow that license in

523
00:24:25,269 --> 00:24:32,499
their organization they do it with some

524
00:24:30,609 --> 00:24:35,939
time so they blocked like certain sort

525
00:24:32,499 --> 00:24:39,009
of licenses and that's one of them and

526
00:24:35,940 --> 00:24:40,960
we're seeing a lot more issues come up

527
00:24:39,009 --> 00:24:42,850
with licensing especially in that open

528
00:24:40,960 --> 00:24:45,279
source community we're seeing different

529
00:24:42,850 --> 00:24:47,309
open source projects kind of divest

530
00:24:45,279 --> 00:24:49,359
their licensing and also that fun jazz

531
00:24:47,309 --> 00:24:51,309
by the way to kind of blow through this

532
00:24:49,359 --> 00:24:53,590
need to be able to scan your containers

533
00:24:51,309 --> 00:24:57,309
they are basically just links systems in

534
00:24:53,590 --> 00:24:59,019
an overlay file system you can stick and

535
00:24:57,309 --> 00:25:01,749
scan and act upon these sort of

536
00:24:59,019 --> 00:25:03,369
benchmarks with of an S cap ansible

537
00:25:01,749 --> 00:25:06,369
enterprises one that makes a little bit

538
00:25:03,369 --> 00:25:07,539
more operational and then Oasis app is

539
00:25:06,369 --> 00:25:09,459
pretty cool

540
00:25:07,539 --> 00:25:10,960
it lets you kind of brute force a couple

541
00:25:09,460 --> 00:25:14,200
things and go through just a bunch of

542
00:25:10,960 --> 00:25:16,359
you know well known exploits and say

543
00:25:14,200 --> 00:25:20,320
you've built like a PHP application you

544
00:25:16,359 --> 00:25:23,470
want all your inputs just thrown garbage

545
00:25:20,320 --> 00:25:26,289
a little chaos engineering you throw it

546
00:25:23,470 --> 00:25:29,320
this way it doesn't cool dynamic

547
00:25:26,289 --> 00:25:34,480
application state testing all right um

548
00:25:29,320 --> 00:25:35,918
this is gonna be weird let's order up

549
00:25:34,480 --> 00:25:38,129
one of these secure software factories

550
00:25:35,919 --> 00:25:38,129
right

551
00:25:42,020 --> 00:25:46,700
all right

552
00:25:43,820 --> 00:25:49,309
so I believe from making everything a

553
00:25:46,700 --> 00:25:51,350
little web app because blind eye

554
00:25:49,309 --> 00:25:53,479
whenever you're deploying a lot of these

555
00:25:51,350 --> 00:25:55,639
things and I'll go through a couple of

556
00:25:53,479 --> 00:25:59,299
them in a minute you have a lot of very

557
00:25:55,639 --> 00:26:00,799
common configuration bits and if you

558
00:25:59,299 --> 00:26:03,109
don't automate it if you don't kind of

559
00:26:00,799 --> 00:26:04,489
inline it humans will mess it up I've

560
00:26:03,109 --> 00:26:06,978
gone through hours of troubleshooting

561
00:26:04,489 --> 00:26:12,429
just because someone has taken a bunch

562
00:26:06,979 --> 00:26:12,429
of manifests these manifests and facts

563
00:26:14,529 --> 00:26:24,950
say Nexus IQ server so this is a

564
00:26:19,909 --> 00:26:26,320
deployment you take one of these maybe

565
00:26:24,950 --> 00:26:28,309
with a little persistent storage

566
00:26:26,320 --> 00:26:30,019
template makes it available to your

567
00:26:28,309 --> 00:26:32,720
cluster that's all that's left on stuff

568
00:26:30,019 --> 00:26:34,090
a bunch of variables in there they

569
00:26:32,720 --> 00:26:36,619
deploy and there's a couple dozen

570
00:26:34,090 --> 00:26:38,418
different sort of repost like this and

571
00:26:36,619 --> 00:26:42,369
it kind of gets overwhelming at times

572
00:26:38,419 --> 00:26:45,649
but pretty much automated at all and

573
00:26:42,369 --> 00:26:47,059
integrated in life so secure software

574
00:26:45,649 --> 00:26:48,949
factories one of the main concerns

575
00:26:47,059 --> 00:26:52,609
you're gonna have is identity access

576
00:26:48,950 --> 00:26:54,200
management right you'd be surprised how

577
00:26:52,609 --> 00:26:56,960
many organizations aren't really

578
00:26:54,200 --> 00:26:59,359
prepared to handle Active Directory or

579
00:26:56,960 --> 00:27:04,220
LDAP outside of the node authentication

580
00:26:59,359 --> 00:27:06,918
like outside of logging into a box so

581
00:27:04,220 --> 00:27:08,929
one of reasons why I hate gitlab

582
00:27:06,919 --> 00:27:13,070
they have to people across the entire

583
00:27:08,929 --> 00:27:16,999
world that is responsible for access and

584
00:27:13,070 --> 00:27:19,639
I was telling them how broken their LDAP

585
00:27:16,999 --> 00:27:23,149
sinc functions were I should not be

586
00:27:19,639 --> 00:27:25,609
telling a vendor how do you like it's

587
00:27:23,149 --> 00:27:27,799
really important so if your organization

588
00:27:25,609 --> 00:27:29,439
does not have that properly set up

589
00:27:27,799 --> 00:27:31,629
you're probably going to get

590
00:27:29,440 --> 00:27:33,919
side-channel I exploited through it

591
00:27:31,629 --> 00:27:34,428
because a lot of these systems get very

592
00:27:33,919 --> 00:27:36,349
complicated

593
00:27:34,429 --> 00:27:37,580
you can't deploy get lab I've actually

594
00:27:36,349 --> 00:27:37,909
done that already we're not going to do

595
00:27:37,580 --> 00:27:41,060
that

596
00:27:37,910 --> 00:27:43,940
but share resources for this workshop

597
00:27:41,060 --> 00:27:45,649
just so we've got a team there it's got

598
00:27:43,940 --> 00:27:47,690
Eclipse chain there which is a

599
00:27:45,650 --> 00:27:51,170
cloud-based IDE and a couple other

600
00:27:47,690 --> 00:27:53,810
little fun things sample apps cloudBees

601
00:27:51,170 --> 00:27:56,060
core hobbies core is just enterprise

602
00:27:53,810 --> 00:27:58,070
Jenkins it does some cool stuff to make

603
00:27:56,060 --> 00:27:59,600
it manageable across your enterprise so

604
00:27:58,070 --> 00:28:00,860
if you are doing something more than

605
00:27:59,600 --> 00:28:02,600
just like little rinky dinky little

606
00:28:00,860 --> 00:28:06,979
application on your laptop you're gonna

607
00:28:02,600 --> 00:28:10,429
need this Sora cube again some of that

608
00:28:06,980 --> 00:28:13,460
smell checking of your code so to type

609
00:28:10,430 --> 00:28:16,520
Nexus so that is going to proxy all your

610
00:28:13,460 --> 00:28:18,770
requests to your difference and p.m. and

611
00:28:16,520 --> 00:28:22,400
maven registries and also fun guys

612
00:28:18,770 --> 00:28:23,780
so type IQ sets your policies so if I

613
00:28:22,400 --> 00:28:25,280
don't want that beer we're license

614
00:28:23,780 --> 00:28:29,330
that's no problem I'm gonna set that

615
00:28:25,280 --> 00:28:32,930
their rocket chat because you need chat

616
00:28:29,330 --> 00:28:35,240
I like fashion house let's also throw

617
00:28:32,930 --> 00:28:37,190
that in there too so cool little sample

618
00:28:35,240 --> 00:28:50,270
wizard I'm just gonna throw some garbage

619
00:28:37,190 --> 00:28:55,880
values in here we're gonna make two

620
00:28:50,270 --> 00:28:57,800
users password is axe that's actually

621
00:28:55,880 --> 00:28:59,960
our workshop password that's going to

622
00:28:57,800 --> 00:29:03,740
provision namespaces this is the school

623
00:28:59,960 --> 00:29:04,760
workshop resources team resources thing

624
00:29:03,740 --> 00:29:06,320
is pretty cool because it actually

625
00:29:04,760 --> 00:29:08,060
provisions a bunch of resources that

626
00:29:06,320 --> 00:29:10,120
provisions a bunch of roles it sets a

627
00:29:08,060 --> 00:29:13,250
lot of security context it sets

628
00:29:10,120 --> 00:29:14,989
permissions on what they do and access

629
00:29:13,250 --> 00:29:16,760
because some of these tools do have root

630
00:29:14,990 --> 00:29:21,080
access to the cluster which is not

631
00:29:16,760 --> 00:29:23,780
really supposed to do right I try to

632
00:29:21,080 --> 00:29:26,419
practice what I preach but it does a lot

633
00:29:23,780 --> 00:29:29,030
of cool stuff in the background one a

634
00:29:26,420 --> 00:29:32,200
little checkbox to enable LDAP throw in

635
00:29:29,030 --> 00:29:34,820
a little bit here we're not gonna use

636
00:29:32,200 --> 00:29:36,680
unsecure held that because that would be

637
00:29:34,820 --> 00:29:41,590
screaming my directory manager password

638
00:29:36,680 --> 00:29:47,020
across the inner where that and not pass

639
00:29:41,590 --> 00:29:49,300
and ldap realm is yeah we're gonna do

640
00:29:47,020 --> 00:29:52,330
that in that too all right Google demo

641
00:29:49,300 --> 00:29:55,180
app we're gonna secure routes with edge

642
00:29:52,330 --> 00:29:57,580
TLS I've got wild card SSL throughout

643
00:29:55,180 --> 00:29:59,740
everything on my cluster it's freaking

644
00:29:57,580 --> 00:30:02,050
beautiful you know even if you work with

645
00:29:59,740 --> 00:30:04,600
let's encrypt to do you know sleep will

646
00:30:02,050 --> 00:30:05,860
app deployment with as a cell or if you

647
00:30:04,600 --> 00:30:07,840
manage your own certificate authority

648
00:30:05,860 --> 00:30:09,969
it's still this is really nice

649
00:30:07,840 --> 00:30:11,590
just a little checkbox we're gonna

650
00:30:09,970 --> 00:30:14,350
integrate that with that left to nice

651
00:30:11,590 --> 00:30:18,399
little checkbox and go through here more

652
00:30:14,350 --> 00:30:21,850
checkboxes boom it's kind of integrate

653
00:30:18,400 --> 00:30:26,710
this so there are a couple of caveats we

654
00:30:21,850 --> 00:30:29,320
are deploying most LDAP services Active

655
00:30:26,710 --> 00:30:30,730
Directory services there is certificate

656
00:30:29,320 --> 00:30:32,139
authority at the base of in a lot of

657
00:30:30,730 --> 00:30:33,910
those times that certificate authority

658
00:30:32,140 --> 00:30:36,040
is going to be self signed because

659
00:30:33,910 --> 00:30:37,600
you're not gonna set LDAP up or Active

660
00:30:36,040 --> 00:30:41,320
Directory with you know Verisign or

661
00:30:37,600 --> 00:30:43,139
Komodo script or whatever right there

662
00:30:41,320 --> 00:30:45,730
different sort of kind of CA

663
00:30:43,140 --> 00:30:49,290
authorizations button in order to allow

664
00:30:45,730 --> 00:30:49,290
yourself signed certificate to get

665
00:30:49,410 --> 00:30:58,000
authorized Java has a couple issues with

666
00:30:53,350 --> 00:31:00,699
it you have to basically rebuild your

667
00:30:58,000 --> 00:31:03,070
key store and doing it on open shift you

668
00:31:00,700 --> 00:31:05,170
can't do that with the system key store

669
00:31:03,070 --> 00:31:07,300
so you have to copy you have to eject it

670
00:31:05,170 --> 00:31:09,220
you have to reset the job options to

671
00:31:07,300 --> 00:31:12,220
actually redeploy because open ship does

672
00:31:09,220 --> 00:31:16,420
not allow route execution normally

673
00:31:12,220 --> 00:31:18,850
unless you specifically set it to oh so

674
00:31:16,420 --> 00:31:20,380
we're gonna check a couple more boxes

675
00:31:18,850 --> 00:31:22,060
we're gonna secure everything we're

676
00:31:20,380 --> 00:31:24,840
going to integrate everything with LDAP

677
00:31:22,060 --> 00:31:27,760
because you know why not bing-bang-boom

678
00:31:24,840 --> 00:31:30,129
that also needs its own repo because

679
00:31:27,760 --> 00:31:31,470
that also is a job application yeah why

680
00:31:30,130 --> 00:31:36,960
not

681
00:31:31,470 --> 00:31:36,960
Java eats the world this is not my

682
00:31:46,470 --> 00:31:52,620
my pass hello

683
00:31:53,650 --> 00:31:59,559
yes and clippings all right we're gonna

684
00:31:57,850 --> 00:32:01,149
ignore that because this is just my

685
00:31:59,559 --> 00:32:03,250
workshop deployer so I don't have any

686
00:32:01,150 --> 00:32:05,260
customers looking at it so I got to this

687
00:32:03,250 --> 00:32:07,660
is like my a jewel I didn't get myself

688
00:32:05,260 --> 00:32:09,550
me a real feedback here but what should

689
00:32:07,660 --> 00:32:09,880
Apple see mr. clean finish yeah it still

690
00:32:09,550 --> 00:32:11,710
works

691
00:32:09,880 --> 00:32:13,630
oh you get a nice little zip file right

692
00:32:11,710 --> 00:32:14,800
you got a deployer you got a teardown

693
00:32:13,630 --> 00:32:17,980
script because I'll tell you what you've

694
00:32:14,800 --> 00:32:19,300
got 400 different namespaces and rolls

695
00:32:17,980 --> 00:32:21,520
to remove you don't want to do it

696
00:32:19,300 --> 00:32:23,230
through a CLI like mainly or you don't

697
00:32:21,520 --> 00:32:25,540
want to do through a web UI mainly

698
00:32:23,230 --> 00:32:27,130
that's gonna suck so that was very key

699
00:32:25,540 --> 00:32:28,928
and you're trying to deploy these

700
00:32:27,130 --> 00:32:31,510
containerized brick loads figure out how

701
00:32:28,929 --> 00:32:33,610
to tear it down to usually involves a

702
00:32:31,510 --> 00:32:35,710
lot of labeling labeling and annotations

703
00:32:33,610 --> 00:32:38,649
and kubernetes is very important very

704
00:32:35,710 --> 00:32:40,830
useful and we got a deployment script

705
00:32:38,650 --> 00:32:40,830
here

706
00:32:43,770 --> 00:32:49,600
of course it on this screen all right

707
00:32:47,770 --> 00:32:51,190
so hey just a little bash script here

708
00:32:49,600 --> 00:32:53,889
bunch of little variables you can switch

709
00:32:51,190 --> 00:32:55,890
them on and off afterwards a couple

710
00:32:53,890 --> 00:32:58,210
checks we're gonna set a lot of

711
00:32:55,890 --> 00:32:59,980
OpenShift commands here up shift by the

712
00:32:58,210 --> 00:33:01,570
way is again just contains two OC

713
00:32:59,980 --> 00:33:04,210
commands basically are just coupe

714
00:33:01,570 --> 00:33:05,909
control commands fun little fact and

715
00:33:04,210 --> 00:33:12,720
we're gonna do a bunch of stuff right

716
00:33:05,910 --> 00:33:12,720
I've already got going

717
00:33:19,419 --> 00:33:25,570
all right I know that look SuperDuper

718
00:33:21,639 --> 00:33:27,309
exciting right we're gonna let that just

719
00:33:25,570 --> 00:33:30,759
kind of roll for minute because there's

720
00:33:27,309 --> 00:33:31,899
a pretty pretty big little execution

721
00:33:30,759 --> 00:33:35,009
script we're gonna fly through the rest

722
00:33:31,899 --> 00:33:37,629
of this container security bit alright

723
00:33:35,009 --> 00:33:39,279
so well that is deploying it's doing a

724
00:33:37,629 --> 00:33:40,779
bunch of fun stuff in the background

725
00:33:39,279 --> 00:33:42,279
we're gonna go in there we're gonna have

726
00:33:40,779 --> 00:33:45,070
to break it in order to actually deploy

727
00:33:42,279 --> 00:33:47,289
the rest of it in a minute but otherwise

728
00:33:45,070 --> 00:33:49,359
let's talk about container security

729
00:33:47,289 --> 00:33:52,299
right thanks security is the fundamental

730
00:33:49,359 --> 00:33:53,649
part what you need to do before he gets

731
00:33:52,299 --> 00:33:56,019
kubernetes guess whether there are more

732
00:33:53,649 --> 00:33:58,029
container exploits to escape like

733
00:33:56,019 --> 00:34:00,879
container context and there are to

734
00:33:58,029 --> 00:34:02,469
attack your kubernetes api okay fun

735
00:34:00,879 --> 00:34:04,299
thing to do with kubernetes api if you

736
00:34:02,469 --> 00:34:07,539
get access to it just Dawson it'll kill

737
00:34:04,299 --> 00:34:10,210
itself I've destroyed clusters by

738
00:34:07,539 --> 00:34:14,980
accident just telling it to do too much

739
00:34:10,210 --> 00:34:16,690
at once it will boss itself and if you

740
00:34:14,980 --> 00:34:20,079
got large enough cluster it'll do it

741
00:34:16,690 --> 00:34:21,819
very quickly um either way what are

742
00:34:20,079 --> 00:34:22,299
containers again it depends upon who you

743
00:34:21,819 --> 00:34:24,969
ask

744
00:34:22,299 --> 00:34:26,949
opps alright that's like a tiny VM right

745
00:34:24,969 --> 00:34:29,168
you just get more little tiny VMS on it

746
00:34:26,949 --> 00:34:31,299
and my developers they think it looks

747
00:34:29,168 --> 00:34:33,279
like did i put my application in there I

748
00:34:31,299 --> 00:34:34,809
say I need Python 3 instead of 2 and

749
00:34:33,279 --> 00:34:39,159
then it's all ready to rock and roll

750
00:34:34,809 --> 00:34:43,059
great now it's not quite as simple as

751
00:34:39,159 --> 00:34:44,859
that in a secure context ok actually

752
00:34:43,059 --> 00:34:47,559
gets pretty fun so let's talk about the

753
00:34:44,859 --> 00:34:49,889
ten layers container of security really

754
00:34:47,559 --> 00:34:49,889
really good

755
00:34:52,750 --> 00:34:58,600
this is the one right hand slide

756
00:34:55,350 --> 00:35:00,250
multi-tenancy your host everything is

757
00:34:58,600 --> 00:35:02,170
abstracted from your Linux kernel if

758
00:35:00,250 --> 00:35:06,030
your Linux kernel isn't that robust then

759
00:35:02,170 --> 00:35:10,000
you're kind of boned

760
00:35:06,030 --> 00:35:12,160
some of these constructs are not

761
00:35:10,000 --> 00:35:14,380
available in all Linux kernels and not

762
00:35:12,160 --> 00:35:17,170
available in all Linux operating systems

763
00:35:14,380 --> 00:35:20,200
so if you're running well your set sense

764
00:35:17,170 --> 00:35:23,170
Auster's set core OS which is a specific

765
00:35:20,200 --> 00:35:25,750
type of container operating system based

766
00:35:23,170 --> 00:35:27,670
with OS tree that is immutable and more

767
00:35:25,750 --> 00:35:29,440
atomic it's done really used normal

768
00:35:27,670 --> 00:35:32,290
Linux file system suppose weird stuff

769
00:35:29,440 --> 00:35:34,540
but they are a little bit more secure

770
00:35:32,290 --> 00:35:36,820
they do have a couple more functions to

771
00:35:34,540 --> 00:35:41,890
secure this bit otherwise I've scrubbed

772
00:35:36,820 --> 00:35:43,540
out their name spaces namespaces

773
00:35:41,890 --> 00:35:44,799
actually been around links for a little

774
00:35:43,540 --> 00:35:46,960
while but they haven't really been

775
00:35:44,800 --> 00:35:48,520
operationalized that easily write

776
00:35:46,960 --> 00:35:50,680
namespaces contain pretty much

777
00:35:48,520 --> 00:35:54,640
everything that you have about a process

778
00:35:50,680 --> 00:35:57,149
or a series of processes okay so again

779
00:35:54,640 --> 00:36:02,770
we can put multiple containers in a pod

780
00:35:57,150 --> 00:36:04,210
okay now SC latex is something that's

781
00:36:02,770 --> 00:36:09,820
very important how many of y'all still

782
00:36:04,210 --> 00:36:13,390
turn off selinux that's natural honestly

783
00:36:09,820 --> 00:36:15,340
I do it a lot of times but in a

784
00:36:13,390 --> 00:36:18,089
production system you learn how to make

785
00:36:15,340 --> 00:36:20,350
policies I've gotten selinux a workshop

786
00:36:18,090 --> 00:36:22,870
happy to send you a link to help you out

787
00:36:20,350 --> 00:36:26,799
with that whatever is platter it's good

788
00:36:22,870 --> 00:36:28,150
it makes it a lot simpler but it's the

789
00:36:26,800 --> 00:36:29,590
low ceilings it sucks but it is very

790
00:36:28,150 --> 00:36:31,090
important I see links to the core is

791
00:36:29,590 --> 00:36:33,700
just labeling system everything on linux

792
00:36:31,090 --> 00:36:35,590
is file but se links labels those files

793
00:36:33,700 --> 00:36:37,149
with who can use it what it can do where

794
00:36:35,590 --> 00:36:38,680
can go and all sorts of fun stuff right

795
00:36:37,150 --> 00:36:41,290
and this is kind of what one of those

796
00:36:38,680 --> 00:36:44,950
labels looks like so if you give things

797
00:36:41,290 --> 00:36:47,320
the Z tag like LS or PS z Big Z it's

798
00:36:44,950 --> 00:36:49,180
going to give you the SELinux context

799
00:36:47,320 --> 00:36:51,460
around that - I'm just going to tell you

800
00:36:49,180 --> 00:36:53,930
the users what kind of runtimes but this

801
00:36:51,460 --> 00:36:56,690
is a sign as a container runtime so we

802
00:36:53,930 --> 00:36:59,210
can execute container uploads great

803
00:36:56,690 --> 00:37:03,950
out-of-the-box we've got a little bit of

804
00:36:59,210 --> 00:37:05,480
an selinux policy base Oh ice some

805
00:37:03,950 --> 00:37:11,950
operating systems do not include that

806
00:37:05,480 --> 00:37:14,530
because like once you use a bar so good

807
00:37:11,950 --> 00:37:19,339
either

808
00:37:14,530 --> 00:37:20,930
as far as tagging things again SELinux

809
00:37:19,340 --> 00:37:24,590
is just labeling system what we can also

810
00:37:20,930 --> 00:37:26,839
do is now tag things with container

811
00:37:24,590 --> 00:37:30,560
contents so what this little container

812
00:37:26,840 --> 00:37:34,760
context here lists is that host can be

813
00:37:30,560 --> 00:37:36,890
accessed by container 0 and 1 and

814
00:37:34,760 --> 00:37:38,330
secrets can be accessed by containers 0

815
00:37:36,890 --> 00:37:41,660
& 1 as well any other container without

816
00:37:38,330 --> 00:37:44,330
those sort of context and IDs will not

817
00:37:41,660 --> 00:37:47,149
be able to access it it also will allow

818
00:37:44,330 --> 00:37:49,180
access to any other user in or outside

819
00:37:47,150 --> 00:37:52,670
of the container so that's pretty much -

820
00:37:49,180 --> 00:37:55,279
and turned off SELinux you're vulnerable

821
00:37:52,670 --> 00:37:57,650
now SELinux is actually stopped a number

822
00:37:55,280 --> 00:38:00,860
of container exploits there's been a

823
00:37:57,650 --> 00:38:03,410
number of runs see exploits that have

824
00:38:00,860 --> 00:38:06,440
allowed escaping containers very quickly

825
00:38:03,410 --> 00:38:10,040
from web applications they're pretty

826
00:38:06,440 --> 00:38:12,200
scary but otherwise another really cool

827
00:38:10,040 --> 00:38:13,340
useful function in the Linux system is

828
00:38:12,200 --> 00:38:15,200
Seager's

829
00:38:13,340 --> 00:38:17,960
or container groups container groups

830
00:38:15,200 --> 00:38:19,189
basically just take your resources and

831
00:38:17,960 --> 00:38:21,140
put them together and give you an

832
00:38:19,190 --> 00:38:25,460
addressable way to interact with them

833
00:38:21,140 --> 00:38:28,580
right set cops this is again something

834
00:38:25,460 --> 00:38:32,690
kind of unique to what RAL Cintas

835
00:38:28,580 --> 00:38:35,870
happened this allows you to deny system

836
00:38:32,690 --> 00:38:38,900
calls lower-level system calls to

837
00:38:35,870 --> 00:38:42,529
containers okay so that's very useful

838
00:38:38,900 --> 00:38:49,340
and completely blacklisting network

839
00:38:42,530 --> 00:38:52,390
access now it is a way to remove and

840
00:38:49,340 --> 00:38:54,980
give privileges so you can set specific

841
00:38:52,390 --> 00:38:57,240
always allowing the spins to make the

842
00:38:54,980 --> 00:38:59,250
knots all right

843
00:38:57,240 --> 00:39:01,790
there are a couple read-only mounts

844
00:38:59,250 --> 00:39:04,050
there are currently read-only but

845
00:39:01,790 --> 00:39:07,080
everybody thinks that oh I didn't assign

846
00:39:04,050 --> 00:39:08,910
my container volumes well it has no

847
00:39:07,080 --> 00:39:19,460
access to my hosts file system that's

848
00:39:08,910 --> 00:39:21,000
not true watch in cold waters talks

849
00:39:19,460 --> 00:39:24,120
they've got some pretty interesting

850
00:39:21,000 --> 00:39:26,580
stuff but also think about where your

851
00:39:24,120 --> 00:39:28,290
sources come from right so where are

852
00:39:26,580 --> 00:39:29,850
your container images coming from are

853
00:39:28,290 --> 00:39:32,700
you spoiling your face images from

854
00:39:29,850 --> 00:39:34,770
doctor hub it's like it's not that hard

855
00:39:32,700 --> 00:39:36,480
to build a tanner look at that dr. BOTS

856
00:39:34,770 --> 00:39:40,820
got a bunch online check it out super

857
00:39:36,480 --> 00:39:40,820
like a dozen nights from scratch

858
00:39:40,880 --> 00:39:45,690
do-it-yourself okay if you are getting

859
00:39:44,370 --> 00:39:47,279
from somewhere you need to be able to

860
00:39:45,690 --> 00:39:49,980
get some health metrics about it because

861
00:39:47,280 --> 00:39:51,270
maybe there are some tolerable risks in

862
00:39:49,980 --> 00:39:55,200
that container

863
00:39:51,270 --> 00:39:58,380
for the meantime mitigate with certain

864
00:39:55,200 --> 00:40:01,560
devices right a little envision into

865
00:39:58,380 --> 00:40:04,860
that and just run your own container

866
00:40:01,560 --> 00:40:06,900
registry to be honest we're finding that

867
00:40:04,860 --> 00:40:08,580
a lot of registries are kind of getting

868
00:40:06,900 --> 00:40:10,110
up and down so what happens whenever you

869
00:40:08,580 --> 00:40:11,520
need to ploy a workload and you've got

870
00:40:10,110 --> 00:40:15,480
all your private registries and dr.

871
00:40:11,520 --> 00:40:17,790
Kodaka is now on site registries are

872
00:40:15,480 --> 00:40:18,900
beautiful so restrict where your

873
00:40:17,790 --> 00:40:20,400
containers come from maybe you just

874
00:40:18,900 --> 00:40:23,190
don't want dr. hub in your enterprise

875
00:40:20,400 --> 00:40:24,330
that's a great idea okay we're running

876
00:40:23,190 --> 00:40:26,310
on the registry let's just lock that

877
00:40:24,330 --> 00:40:28,200
down what happens whenever you try to

878
00:40:26,310 --> 00:40:31,770
run an image anyway we built an image

879
00:40:28,200 --> 00:40:34,859
here we try to pull it in well we got a

880
00:40:31,770 --> 00:40:37,050
403 from the kubernetes api again it's

881
00:40:34,860 --> 00:40:39,440
just a rest api so it's gonna respond

882
00:40:37,050 --> 00:40:41,340
with an unauthorized pretty cool stuff

883
00:40:39,440 --> 00:40:42,690
you're thinking about building your

884
00:40:41,340 --> 00:40:44,190
containers don't just build a container

885
00:40:42,690 --> 00:40:45,960
for this and build a container for that

886
00:40:44,190 --> 00:40:47,490
I don't a container over here another

887
00:40:45,960 --> 00:40:51,090
container over there build them and

888
00:40:47,490 --> 00:40:52,950
layers really a powerful tool is that

889
00:40:51,090 --> 00:40:56,010
let's pretty much everyone get into this

890
00:40:52,950 --> 00:40:59,040
DevOps lifecycle which is very useful

891
00:40:56,010 --> 00:41:00,900
for cultural enablement right some

892
00:40:59,040 --> 00:41:02,000
operations poker like I'm not going to

893
00:41:00,900 --> 00:41:03,200
deal with all this

894
00:41:02,000 --> 00:41:05,180
the developers are gonna give me a

895
00:41:03,200 --> 00:41:06,859
container and throw it like docker swarm

896
00:41:05,180 --> 00:41:09,618
or whatever and I'm like yeah that's

897
00:41:06,859 --> 00:41:10,970
great so you can do that and forget

898
00:41:09,619 --> 00:41:13,369
about it or you can use these tools

899
00:41:10,970 --> 00:41:17,299
yourself and upskill to an SRE role

900
00:41:13,369 --> 00:41:19,040
which is really nice but they're gonna

901
00:41:17,300 --> 00:41:21,320
build some container images your basic

902
00:41:19,040 --> 00:41:24,080
secure think of user gold and image

903
00:41:21,320 --> 00:41:26,210
right got that sitting around we've got

904
00:41:24,080 --> 00:41:27,859
that from our BMS then we're going to

905
00:41:26,210 --> 00:41:29,780
make sure that everything in between it

906
00:41:27,859 --> 00:41:31,940
is available so I'm gonna give you a

907
00:41:29,780 --> 00:41:33,650
Python to version and a Python free

908
00:41:31,940 --> 00:41:34,369
version and the set in the other and

909
00:41:33,650 --> 00:41:36,050
give you a couple other little

910
00:41:34,369 --> 00:41:38,390
middleware layers and your applications

911
00:41:36,050 --> 00:41:39,830
kind of rests on top but what's cool

912
00:41:38,390 --> 00:41:41,299
about that is that if there is a

913
00:41:39,830 --> 00:41:42,950
vulnerability in that middleware minute

914
00:41:41,300 --> 00:41:45,050
layer like saying there's a little job

915
00:41:42,950 --> 00:41:46,848
of vulnerability heavens forbid we can

916
00:41:45,050 --> 00:41:47,990
swap that out from all the containers

917
00:41:46,849 --> 00:41:49,670
that it's built upon

918
00:41:47,990 --> 00:41:51,500
all the applications that are built upon

919
00:41:49,670 --> 00:41:53,660
that layer we can swap it out you have

920
00:41:51,500 --> 00:41:55,280
to touch that base container image weeks

921
00:41:53,660 --> 00:41:58,310
again these are just tar files built on

922
00:41:55,280 --> 00:42:00,710
top of each other all right did you

923
00:41:58,310 --> 00:42:05,029
mention a particular tool to build

924
00:42:00,710 --> 00:42:08,150
containers in layers uh pretty much all

925
00:42:05,030 --> 00:42:09,710
of the container building runtimes will

926
00:42:08,150 --> 00:42:11,450
do it in layers so basically what

927
00:42:09,710 --> 00:42:12,619
happens in like a docker file doctor

928
00:42:11,450 --> 00:42:15,049
file can be run on a bunch of different

929
00:42:12,619 --> 00:42:17,060
runtimes what happens you got a bunch of

930
00:42:15,050 --> 00:42:19,310
different tasks you can add files you

931
00:42:17,060 --> 00:42:21,799
can copy files you can run commands

932
00:42:19,310 --> 00:42:23,119
after it exits set the entry point one

933
00:42:21,800 --> 00:42:26,750
of the major tasks you can do is just

934
00:42:23,119 --> 00:42:30,470
run a series of shell that's right so

935
00:42:26,750 --> 00:42:33,920
what's very common is copy file over

936
00:42:30,470 --> 00:42:36,759
like copy my shell script over then your

937
00:42:33,920 --> 00:42:39,440
next command is run shell scripts right

938
00:42:36,760 --> 00:42:42,680
so that's a very easy thing comes thing

939
00:42:39,440 --> 00:42:47,330
that we see in container builds what the

940
00:42:42,680 --> 00:42:50,598
container build time container builder

941
00:42:47,330 --> 00:42:52,640
runtime will do is that I'll take that

942
00:42:50,599 --> 00:42:54,710
base image like say we base it off of a

943
00:42:52,640 --> 00:42:57,319
boot to route based it off the universal

944
00:42:54,710 --> 00:42:57,680
you know base image whatever you want to

945
00:42:57,320 --> 00:42:59,060
do

946
00:42:57,680 --> 00:43:02,310
I'll pull edit that's your first layer

947
00:42:59,060 --> 00:43:05,520
your add command is your second layer

948
00:43:02,310 --> 00:43:07,080
your run command is your third liquor if

949
00:43:05,520 --> 00:43:08,700
you have any other subsequent like

950
00:43:07,080 --> 00:43:10,200
initial commands afterwards it's gonna

951
00:43:08,700 --> 00:43:12,149
add that as another layer which is

952
00:43:10,200 --> 00:43:15,029
really cool right so let's say I'm

953
00:43:12,150 --> 00:43:16,890
helping a little container and starting

954
00:43:15,030 --> 00:43:21,540
from top to bottom it fails on the 8th

955
00:43:16,890 --> 00:43:24,359
out of ninth step okay pretty common as

956
00:43:21,540 --> 00:43:26,610
well for the first seven steps those

957
00:43:24,360 --> 00:43:29,520
layers were argued buildings it knows

958
00:43:26,610 --> 00:43:31,350
well enough because it's that thomassie

959
00:43:29,520 --> 00:43:33,330
gives you that benefit of going okay

960
00:43:31,350 --> 00:43:35,130
I've already done this let's just do

961
00:43:33,330 --> 00:43:38,250
this last bit and you're just trying to

962
00:43:35,130 --> 00:43:40,860
get past that wall till your container

963
00:43:38,250 --> 00:43:43,920
finally builds it's pretty cool that

964
00:43:40,860 --> 00:43:49,170
layer aspect kind of gives you some

965
00:43:43,920 --> 00:43:53,460
really rapid development practices good

966
00:43:49,170 --> 00:43:55,350
question SEC secure context constraints

967
00:43:53,460 --> 00:43:57,750
also something kind of unique in their

968
00:43:55,350 --> 00:44:00,900
little flavor a little kernel what this

969
00:43:57,750 --> 00:44:03,210
allows you to do is basically just kind

970
00:44:00,900 --> 00:44:06,060
of gate where things are so what this

971
00:44:03,210 --> 00:44:08,640
allows for instance an overshift cluster

972
00:44:06,060 --> 00:44:12,120
is on kubernetes cluster you're running

973
00:44:08,640 --> 00:44:14,310
everything in the root truce yeah that's

974
00:44:12,120 --> 00:44:16,589
great I'm assuming there's an SCC

975
00:44:14,310 --> 00:44:19,110
applied that does not allow anything to

976
00:44:16,590 --> 00:44:20,670
run is root by anyone even if I'm the

977
00:44:19,110 --> 00:44:22,980
cluster administrator I cannot run

978
00:44:20,670 --> 00:44:24,750
something as groups unless I ask luster

979
00:44:22,980 --> 00:44:29,760
administrator say I can run something as

980
00:44:24,750 --> 00:44:32,430
route in this namespace container

981
00:44:29,760 --> 00:44:34,620
deployment permissions that's also

982
00:44:32,430 --> 00:44:36,540
important sometimes you don't want to

983
00:44:34,620 --> 00:44:38,759
allow people deploy as long people to

984
00:44:36,540 --> 00:44:40,500
consume so rolls pretty nice

985
00:44:38,760 --> 00:44:41,760
let's also scan these containers because

986
00:44:40,500 --> 00:44:43,380
after we've built them let's make sure

987
00:44:41,760 --> 00:44:44,790
that there's nothing hokey in them so we

988
00:44:43,380 --> 00:44:48,660
actually take some of those open s cap

989
00:44:44,790 --> 00:44:50,610
scans ants will lock down and actually

990
00:44:48,660 --> 00:44:52,799
point about a container image and scan

991
00:44:50,610 --> 00:44:54,660
it just like another Linux system pretty

992
00:44:52,800 --> 00:44:57,780
cool stuff so especially if you're

993
00:44:54,660 --> 00:44:59,209
trying to get like stig containers which

994
00:44:57,780 --> 00:45:03,390
is

995
00:44:59,209 --> 00:45:05,089
anyway this is kind of useful to kind of

996
00:45:03,390 --> 00:45:07,920
get you there

997
00:45:05,089 --> 00:45:09,690
authorization again identity access

998
00:45:07,920 --> 00:45:12,509
management LDAP something a lot of

999
00:45:09,690 --> 00:45:15,209
organizations struggle with passed notes

1000
00:45:12,509 --> 00:45:16,920
how do you use that in a namespace

1001
00:45:15,209 --> 00:45:20,069
context how do you use that in a

1002
00:45:16,920 --> 00:45:21,660
container context like attaching the

1003
00:45:20,069 --> 00:45:24,119
realms of containers actually pretty

1004
00:45:21,660 --> 00:45:26,009
difficult but it's not impossible and if

1005
00:45:24,119 --> 00:45:27,539
you're not comfortable with certificate

1006
00:45:26,009 --> 00:45:29,249
authorities and running your own and

1007
00:45:27,539 --> 00:45:31,579
public key infrastructure you've got to

1008
00:45:29,249 --> 00:45:35,430
because guess what the part of all these

1009
00:45:31,579 --> 00:45:38,489
nodes is SSL encryption between all

1010
00:45:35,430 --> 00:45:40,469
their communication now what's funny is

1011
00:45:38,489 --> 00:45:42,660
I've seen a lot of these proof of

1012
00:45:40,469 --> 00:45:45,359
concept clusters that are just quickly

1013
00:45:42,660 --> 00:45:48,229
sprayed out into some infrastructure a

1014
00:45:45,359 --> 00:45:50,459
year after its deployed start to fit

1015
00:45:48,229 --> 00:45:52,379
they're looking is like why can I not

1016
00:45:50,459 --> 00:45:53,999
access anything in my cluster my

1017
00:45:52,380 --> 00:45:57,239
workloads are still going but I can't

1018
00:45:53,999 --> 00:46:00,988
access my kubernetes api answer is your

1019
00:45:57,239 --> 00:46:03,059
certificate authority that's that's

1020
00:46:00,989 --> 00:46:08,489
great so you need to learn how to manage

1021
00:46:03,059 --> 00:46:10,019
keys isolating workloads with containers

1022
00:46:08,489 --> 00:46:12,900
kubernetes are just gonna put it

1023
00:46:10,019 --> 00:46:14,968
wherever you put right you don't want to

1024
00:46:12,900 --> 00:46:17,039
put it wherever to put a lot of people

1025
00:46:14,969 --> 00:46:18,779
don't want to maybe you want it to run

1026
00:46:17,039 --> 00:46:20,160
on specific kind of hardware maybe

1027
00:46:18,779 --> 00:46:24,119
you're allocating some specific

1028
00:46:20,160 --> 00:46:27,449
resources not too much what about on a

1029
00:46:24,119 --> 00:46:29,009
network sup well that depends on what

1030
00:46:27,449 --> 00:46:30,569
sort of networking layer yet there's

1031
00:46:29,009 --> 00:46:32,670
open V switch there's weave there's

1032
00:46:30,569 --> 00:46:35,459
flannel there's a couple other

1033
00:46:32,670 --> 00:46:38,309
additional service mesh add-ins and add

1034
00:46:35,459 --> 00:46:40,879
extra functionality to this as well it

1035
00:46:38,309 --> 00:46:43,289
depends on what you do pick but

1036
00:46:40,880 --> 00:46:45,059
important to note that if you are

1037
00:46:43,289 --> 00:46:47,670
running multiple users within a similar

1038
00:46:45,059 --> 00:46:50,209
cluster base you need something that

1039
00:46:47,670 --> 00:46:54,749
does support multi-tenancy

1040
00:46:50,209 --> 00:46:56,788
and just like all of our other gamal we

1041
00:46:54,749 --> 00:46:57,238
can define network policy so this is

1042
00:46:56,789 --> 00:46:59,609
interesting

1043
00:46:57,239 --> 00:47:01,800
network policy you might have seen kinds

1044
00:46:59,609 --> 00:47:03,450
like Todd's route services done

1045
00:47:01,800 --> 00:47:05,280
those are all are just custom resources

1046
00:47:03,450 --> 00:47:07,140
right you don't get that normal

1047
00:47:05,280 --> 00:47:09,120
kubernetes clusters even you need

1048
00:47:07,140 --> 00:47:12,540
customer resource definitions kind of

1049
00:47:09,120 --> 00:47:16,589
lock down that policy with your never be

1050
00:47:12,540 --> 00:47:18,870
late now your ingress and egress your

1051
00:47:16,590 --> 00:47:22,920
load balancer say I don't want anything

1052
00:47:18,870 --> 00:47:27,660
to hit my master nodes even if they're

1053
00:47:22,920 --> 00:47:29,880
excess in a private or a public region

1054
00:47:27,660 --> 00:47:31,740
you can actually lock it down where the

1055
00:47:29,880 --> 00:47:33,450
cluster knows of your load balancers so

1056
00:47:31,740 --> 00:47:36,330
that no the communication will occur

1057
00:47:33,450 --> 00:47:40,710
it's really nice for your main entry

1058
00:47:36,330 --> 00:47:43,230
point to your API again everything

1059
00:47:40,710 --> 00:47:46,260
between the nodes is encrypted with

1060
00:47:43,230 --> 00:47:48,270
IPSec but you can extend that out with

1061
00:47:46,260 --> 00:47:51,300
additional network infrastructure if you

1062
00:47:48,270 --> 00:47:54,720
want to overlay additional connections

1063
00:47:51,300 --> 00:47:56,430
bridges your storage layer there's wait

1064
00:47:54,720 --> 00:47:59,339
as attached storage after the containers

1065
00:47:56,430 --> 00:48:00,930
run there's ways to attach other

1066
00:47:59,340 --> 00:48:04,410
people's storage after your container

1067
00:48:00,930 --> 00:48:08,879
from wares really fun too there's ways

1068
00:48:04,410 --> 00:48:11,339
to basically tell kubernetes hey stop

1069
00:48:08,880 --> 00:48:12,510
this pod real quick and we'll but

1070
00:48:11,340 --> 00:48:14,520
because it's deployment configuration

1071
00:48:12,510 --> 00:48:16,350
replicas set whatever you have is set up

1072
00:48:14,520 --> 00:48:18,420
in a stable set however you've got it

1073
00:48:16,350 --> 00:48:21,480
it'll just redeploy right but between

1074
00:48:18,420 --> 00:48:23,630
that and its termination you just

1075
00:48:21,480 --> 00:48:26,820
attached its persistent volume

1076
00:48:23,630 --> 00:48:28,800
persistent volumes real kludgy systems

1077
00:48:26,820 --> 00:48:32,580
you've got storage classes so I've got

1078
00:48:28,800 --> 00:48:37,040
GP to for you know EBS on Amazon then

1079
00:48:32,580 --> 00:48:39,210
you can have like an NFS storage class

1080
00:48:37,040 --> 00:48:40,320
but you're going to have the surge

1081
00:48:39,210 --> 00:48:41,880
classes you're going to have a

1082
00:48:40,320 --> 00:48:43,740
persistent ball you mean you're going to

1083
00:48:41,880 --> 00:48:45,390
provision that for your users like I'm

1084
00:48:43,740 --> 00:48:47,669
going to be like here's ten gigs to use

1085
00:48:45,390 --> 00:48:50,370
for whatever you've got then we're going

1086
00:48:47,670 --> 00:48:53,040
to claim X amount of those gigs that

1087
00:48:50,370 --> 00:48:55,589
I've got and then as soon as we've got

1088
00:48:53,040 --> 00:48:57,870
that we can attach it to an actual pod

1089
00:48:55,590 --> 00:48:59,490
and that way your pod and container

1090
00:48:57,870 --> 00:49:02,819
actually have persistent storage because

1091
00:48:59,490 --> 00:49:04,109
otherwise these are ephemeral beings as

1092
00:49:02,820 --> 00:49:06,120
soon as you make a change to filesystem

1093
00:49:04,110 --> 00:49:08,880
and turn off that pod container its

1094
00:49:06,120 --> 00:49:10,170
columns so people think that storage is

1095
00:49:08,880 --> 00:49:11,370
pretty hard in container it's not about

1096
00:49:10,170 --> 00:49:14,130
doing this securely

1097
00:49:11,370 --> 00:49:16,920
a bi mansion with a lot of different

1098
00:49:14,130 --> 00:49:20,010
things you're employing micro-services

1099
00:49:16,920 --> 00:49:22,290
now JWT here there and everywhere

1100
00:49:20,010 --> 00:49:24,630
well you need to learn how to manage

1101
00:49:22,290 --> 00:49:27,590
that coming in and out of your services

1102
00:49:24,630 --> 00:49:29,730
and in that of your routing sections

1103
00:49:27,590 --> 00:49:33,030
there are a bunch of different sort of

1104
00:49:29,730 --> 00:49:36,450
API gateways honestly you can use in

1105
00:49:33,030 --> 00:49:38,520
genetics it's pretty cool and we have

1106
00:49:36,450 --> 00:49:42,359
gotten really used to being able to

1107
00:49:38,520 --> 00:49:43,950
deploy clusters of cloud resources here

1108
00:49:42,360 --> 00:49:46,650
there and everywhere if I want something

1109
00:49:43,950 --> 00:49:48,810
in the APAC region and if I want some

1110
00:49:46,650 --> 00:49:52,230
VMs in Ireland I can do that right now

1111
00:49:48,810 --> 00:49:53,790
and I know how to manage that how do you

1112
00:49:52,230 --> 00:49:57,540
manage container workloads

1113
00:49:53,790 --> 00:50:01,100
in a multi region fashion how do you

1114
00:49:57,540 --> 00:50:04,620
share resources how you share secrets

1115
00:50:01,100 --> 00:50:07,680
and how do you care communication

1116
00:50:04,620 --> 00:50:09,540
between because kubernetes is keeping

1117
00:50:07,680 --> 00:50:11,129
log of everything going on in that

1118
00:50:09,540 --> 00:50:13,590
cluster with something called Etsy D is

1119
00:50:11,130 --> 00:50:16,770
just key value store just those ensures

1120
00:50:13,590 --> 00:50:20,480
estates maybe you've got a long time

1121
00:50:16,770 --> 00:50:22,950
delay between your communication points

1122
00:50:20,480 --> 00:50:24,240
request you're gonna have a bad time

1123
00:50:22,950 --> 00:50:29,549
you're gonna have some split-brain

1124
00:50:24,240 --> 00:50:31,500
issues I know you think I said ten

1125
00:50:29,550 --> 00:50:35,790
layers of container security they're

1126
00:50:31,500 --> 00:50:36,720
like 80 hey you saw well it gets even

1127
00:50:35,790 --> 00:50:37,980
deeper than that and that's just on the

1128
00:50:36,720 --> 00:50:39,240
container side and that's usually on the

1129
00:50:37,980 --> 00:50:41,010
orchestration side there's still a

1130
00:50:39,240 --> 00:50:47,700
little bit more kind of goes into the

1131
00:50:41,010 --> 00:50:49,380
application layers as well so this is

1132
00:50:47,700 --> 00:50:53,669
where kind of security kind of starts to

1133
00:50:49,380 --> 00:50:55,170
fall in right we're usually just

1134
00:50:53,670 --> 00:50:59,190
throwing things over the wall something

1135
00:50:55,170 --> 00:51:01,380
just tells us to stop and do not go and

1136
00:50:59,190 --> 00:51:02,850
in a DevOps environment with containers

1137
00:51:01,380 --> 00:51:04,230
once you have in secure containers and

1138
00:51:02,850 --> 00:51:06,509
start to have to figure out how to run

1139
00:51:04,230 --> 00:51:08,910
it after you build your workloads and

1140
00:51:06,510 --> 00:51:10,860
you're left the Liberty application is a

1141
00:51:08,910 --> 00:51:13,649
hard conversation

1142
00:51:10,860 --> 00:51:18,510
have so we have to encompass security

1143
00:51:13,650 --> 00:51:23,370
right I'm going to kind of skip a handle

1144
00:51:18,510 --> 00:51:25,470
a little bit of this just because run

1145
00:51:23,370 --> 00:51:29,100
out of time I'm Nellie but a couple of

1146
00:51:25,470 --> 00:51:32,100
takeaways from here as far as building

1147
00:51:29,100 --> 00:51:34,380
software developing containers deploying

1148
00:51:32,100 --> 00:51:36,660
them at all so it's kind of complicated

1149
00:51:34,380 --> 00:51:37,440
I told you yesterday you want to push

1150
00:51:36,660 --> 00:51:39,120
the easy button

1151
00:51:37,440 --> 00:51:42,050
oh actually kind of does a lot of

1152
00:51:39,120 --> 00:51:46,560
those 18 layers born

1153
00:51:42,050 --> 00:51:49,320
what does open shipped origin there are

1154
00:51:46,560 --> 00:51:51,990
a couple other container run platforms

1155
00:51:49,320 --> 00:51:54,480
out there like pebbles got one what's

1156
00:51:51,990 --> 00:52:01,830
funny about docker enterprise dr.

1157
00:51:54,480 --> 00:52:03,810
enterprise just ships kubernetes then

1158
00:52:01,830 --> 00:52:05,910
use docker swarm anyone more remember

1159
00:52:03,810 --> 00:52:08,820
yesterday I said standardize everyone

1160
00:52:05,910 --> 00:52:11,129
has standardized on kubernetes pretty

1161
00:52:08,820 --> 00:52:14,960
much there were a couple other container

1162
00:52:11,130 --> 00:52:18,950
runtime environments come and gone but

1163
00:52:14,960 --> 00:52:18,950
everybody's like yeah this is make sense

1164
00:52:22,900 --> 00:52:27,880
so push that easy button if you can if

1165
00:52:26,680 --> 00:52:29,589
you want to get started on your laptop

1166
00:52:27,880 --> 00:52:30,880
check out mini shift mini shift is a

1167
00:52:29,590 --> 00:52:33,010
great way to kind of get started with

1168
00:52:30,880 --> 00:52:36,220
those workloads not everything should be

1169
00:52:33,010 --> 00:52:37,270
in a container some little fun thing you

1170
00:52:36,220 --> 00:52:38,439
got to figure out what workloads you

1171
00:52:37,270 --> 00:52:41,380
want to put in a container

1172
00:52:38,440 --> 00:52:42,700
alright some people are like I can't put

1173
00:52:41,380 --> 00:52:44,380
an Oracle database in a container

1174
00:52:42,700 --> 00:52:46,000
because storage and also that fun stuff

1175
00:52:44,380 --> 00:52:49,150
yeah you could but you don't really want

1176
00:52:46,000 --> 00:52:50,680
to but we should also scope out is how

1177
00:52:49,150 --> 00:52:53,320
some of these underlaying systems work

1178
00:52:50,680 --> 00:52:54,580
like OpenSSH some people are like I told

1179
00:52:53,320 --> 00:52:55,660
you yesterday you're not necessary in

1180
00:52:54,580 --> 00:52:58,930
those containers anymore that's just

1181
00:52:55,660 --> 00:53:02,230
you're just gonna rebuild better than

1182
00:52:58,930 --> 00:53:04,299
ever before what they're having people

1183
00:53:02,230 --> 00:53:06,750
who try to put SSH it's okay you can do

1184
00:53:04,300 --> 00:53:09,910
that but the issue with that is that

1185
00:53:06,750 --> 00:53:13,180
OpenSSH requires root level access to

1186
00:53:09,910 --> 00:53:18,549
some systems to spawn up new tty devices

1187
00:53:13,180 --> 00:53:22,210
right so in order to run OpenSSH in a

1188
00:53:18,550 --> 00:53:25,690
container in a secure context oh

1189
00:53:22,210 --> 00:53:29,590
you need a break allow root access

1190
00:53:25,690 --> 00:53:32,380
so you just provision your users an

1191
00:53:29,590 --> 00:53:35,560
application a web SSH terminal open that

1192
00:53:32,380 --> 00:53:39,820
cessation whatever running root on your

1193
00:53:35,560 --> 00:53:41,740
cluster all right that's kind of like

1194
00:53:39,820 --> 00:53:44,530
giving the keys to be Center of beers

1195
00:53:41,740 --> 00:53:46,870
for your piece beer Lotus now I can do

1196
00:53:44,530 --> 00:53:49,930
everything now they have root on one of

1197
00:53:46,870 --> 00:53:52,990
our nodes and I'm one of the I'm in I'm

1198
00:53:49,930 --> 00:53:55,000
in the game I'm an application of hey we

1199
00:53:52,990 --> 00:53:59,620
trade it that's a sell certificates like

1200
00:53:55,000 --> 00:54:01,840
you know me you know me once you watch

1201
00:53:59,620 --> 00:54:08,410
just turn everything off and run some of

1202
00:54:01,840 --> 00:54:11,020
these crypto miners don't do that but

1203
00:54:08,410 --> 00:54:13,210
anyway if that does happen you need to

1204
00:54:11,020 --> 00:54:14,920
wait till you find out about Corrections

1205
00:54:13,210 --> 00:54:16,859
normally does not come with metrics

1206
00:54:14,920 --> 00:54:20,430
Logging's you're probably gonna walk

1207
00:54:16,859 --> 00:54:22,109
to use something like elastic elastic

1208
00:54:20,430 --> 00:54:24,709
really cool they'll stack to check it

1209
00:54:22,109 --> 00:54:27,180
out very fast stuff too

1210
00:54:24,709 --> 00:54:30,029
but always think about where your

1211
00:54:27,180 --> 00:54:31,558
sources are coming from where are your

1212
00:54:30,029 --> 00:54:33,539
dependencies for your containers coming

1213
00:54:31,559 --> 00:54:37,519
from if you're not building your own

1214
00:54:33,539 --> 00:54:42,059
it's easy but also for your applications

1215
00:54:37,519 --> 00:54:45,868
right there are a lot of ways to kind of

1216
00:54:42,059 --> 00:54:47,369
spike the punch as far as open source

1217
00:54:45,869 --> 00:54:48,559
dependencies come from we've seen that a

1218
00:54:47,369 --> 00:54:51,660
couple of times already

1219
00:54:48,559 --> 00:54:53,869
but any new crap things up right on the

1220
00:54:51,660 --> 00:55:01,589
buzzer bell questions comments concerns

1221
00:54:53,869 --> 00:55:08,309
as Hardy earlier so an SRE is a site

1222
00:55:01,589 --> 00:55:12,469
reliability engineer so one fancy newer

1223
00:55:08,309 --> 00:55:18,180
turns as of last couple of years right

1224
00:55:12,469 --> 00:55:20,039
add some big King stuff right there

1225
00:55:18,180 --> 00:55:28,098
I thought you mentioned it as some kind

1226
00:55:20,039 --> 00:55:31,259
of a know maybe SCC's security

1227
00:55:28,099 --> 00:55:36,650
constraints but sres

1228
00:55:31,259 --> 00:55:39,359
are what ops are going to become if you

1229
00:55:36,650 --> 00:55:41,099
use these automation practices if you

1230
00:55:39,359 --> 00:55:43,380
learn how to build your face containers

1231
00:55:41,099 --> 00:55:48,949
if you have you embed yourself with

1232
00:55:43,380 --> 00:55:51,630
these new practices right if you go I

1233
00:55:48,949 --> 00:55:55,739
don't need to learn this I don't need to

1234
00:55:51,630 --> 00:55:57,029
do this it's not my concern and a couple

1235
00:55:55,739 --> 00:55:59,099
of years are gonna find out that pretty

1236
00:55:57,029 --> 00:56:01,829
much everyone is doing this from data

1237
00:55:59,099 --> 00:56:04,799
scientists I got data scientists doing

1238
00:56:01,829 --> 00:56:08,099
get ops with Hadoop clusters that's

1239
00:56:04,799 --> 00:56:10,650
weird but everyone is doing this sort of

1240
00:56:08,099 --> 00:56:13,739
development lifecycle the software

1241
00:56:10,650 --> 00:56:15,749
development lifecycle the supply chain

1242
00:56:13,739 --> 00:56:17,819
is extremely important so but either way

1243
00:56:15,749 --> 00:56:19,769
site reliability engineers if you adopt

1244
00:56:17,819 --> 00:56:21,239
these automation practices and these

1245
00:56:19,769 --> 00:56:25,500
containerized workloads and know how to

1246
00:56:21,239 --> 00:56:28,440
run kubernetes and know how to

1247
00:56:25,500 --> 00:56:31,700
access the metrics the logs and get the

1248
00:56:28,440 --> 00:56:34,200
visibility from what's going on on site

1249
00:56:31,700 --> 00:56:39,299
you become the site reliability engineer

1250
00:56:34,200 --> 00:56:41,330
where you are missions know everything

1251
00:56:39,300 --> 00:56:43,560
that's going on through your enterprise

1252
00:56:41,330 --> 00:56:46,200
and you know exactly what happens

1253
00:56:43,560 --> 00:56:50,310
whenever one of these pods starts acting

1254
00:56:46,200 --> 00:56:53,399
up very important role because single

1255
00:56:50,310 --> 00:56:57,090
runaway workload can actually ruin your

1256
00:56:53,400 --> 00:57:03,300
entire cluster psyche reliability

1257
00:56:57,090 --> 00:57:04,080
engineers are very important yeah they

1258
00:57:03,300 --> 00:57:07,400
are on

1259
00:57:04,080 --> 00:57:07,400
[Music]

1260
00:57:12,569 --> 00:57:20,609
so if you go to fierce SW that Network

1261
00:57:16,890 --> 00:57:26,249
and it is quick and easy way to get to

1262
00:57:20,609 --> 00:57:29,279
it got a couple things here you got a

1263
00:57:26,249 --> 00:57:30,718
couple of my presentations then we want

1264
00:57:29,279 --> 00:57:33,890
to check out some other weird stuff I've

1265
00:57:30,719 --> 00:57:37,140
done the github from our main github the

1266
00:57:33,890 --> 00:57:40,650
that's I don't color if it's downstream

1267
00:57:37,140 --> 00:57:41,939
I'm upstream cool stuff some my repos I

1268
00:57:40,650 --> 00:57:45,660
haven't really sing to you I'm not good

1269
00:57:41,939 --> 00:57:47,879
at sinking we're gonna start only thing

1270
00:57:45,660 --> 00:57:49,439
that teleprompter we use that for some

1271
00:57:47,880 --> 00:57:51,059
of our uh little video productions

1272
00:57:49,439 --> 00:57:56,609
that's local sources check it out two

1273
00:57:51,059 --> 00:58:02,999
workshops though ah alright and we've

1274
00:57:56,609 --> 00:58:04,469
got there we go we've got a couple up

1275
00:58:02,999 --> 00:58:06,479
here we've got another one coming up

1276
00:58:04,469 --> 00:58:09,390
here soon the cloud era ones you've got

1277
00:58:06,479 --> 00:58:11,428
your data science 101 and 102 and some

1278
00:58:09,390 --> 00:58:12,499
fun stuff those are big boys I can't

1279
00:58:11,429 --> 00:58:15,539
deploy that today

1280
00:58:12,499 --> 00:58:18,299
bye otherwise here a couple other kind

1281
00:58:15,539 --> 00:58:20,779
of Red Hat centric ones we have a larger

1282
00:58:18,299 --> 00:58:20,779
list

1283
00:58:24,810 --> 00:58:30,400
they're a list of free containers and

1284
00:58:27,340 --> 00:58:34,750
someone could play with to dorka ralph

1285
00:58:30,400 --> 00:58:38,980
disability was born what are you freakin

1286
00:58:34,750 --> 00:58:42,640
tapes Bobby yeah like images or

1287
00:58:38,980 --> 00:58:45,340
something yeah um then I'm on my docker

1288
00:58:42,640 --> 00:58:47,890
hub I mean profile you've got a bunch

1289
00:58:45,340 --> 00:58:50,410
I've got a bunch of resources up there

1290
00:58:47,890 --> 00:58:53,680
to check out pretty much all we're

1291
00:58:50,410 --> 00:58:56,140
pulled in from my github as well outside

1292
00:58:53,680 --> 00:58:59,410
of that there are a bunch of different

1293
00:58:56,140 --> 00:59:02,560
registries to check out a bunch of yeah

1294
00:58:59,410 --> 00:59:05,399
I mean docker hub has I think like 3 3

1295
00:59:02,560 --> 00:59:07,540
billion different images on there

1296
00:59:05,400 --> 00:59:09,040
there's a lot to start off and I've got

1297
00:59:07,540 --> 00:59:10,960
a lot of resource break to I'll probably

1298
00:59:09,040 --> 00:59:13,200
be sitting out there to finish this

1299
00:59:10,960 --> 00:59:14,400
deployment that I didn't get to finish

1300
00:59:13,200 --> 00:59:16,419
[Music]

1301
00:59:14,400 --> 00:59:18,340
just finished setting up in software

1302
00:59:16,420 --> 00:59:21,400
factory if anyone wants to see me break

1303
00:59:18,340 --> 00:59:25,420
CSRF validation in order to play this

1304
00:59:21,400 --> 00:59:26,650
which is asinine stuff to do but I can

1305
00:59:25,420 --> 00:59:37,240
show you that I can give you some extra

1306
00:59:26,650 --> 00:59:41,170
resources on some so I love these naming

1307
00:59:37,240 --> 00:59:43,689
conventions so ants will enterprise like

1308
00:59:41,170 --> 00:59:46,330
there's the runtime the CLI and there's

1309
00:59:43,690 --> 00:59:47,950
a tower right so that's one Enterprise

1310
00:59:46,330 --> 00:59:50,290
right now both of them is what they're

1311
00:59:47,950 --> 00:59:52,750
offering is the Enterprise version tower

1312
00:59:50,290 --> 00:59:54,940
the community version is called a WX

1313
00:59:52,750 --> 00:59:56,620
it's free its upstream check it out just

1314
00:59:54,940 --> 00:59:59,590
like the normal khomeini versions of

1315
00:59:56,620 --> 01:00:00,880
ansible tower i can if you're interested

1316
00:59:59,590 --> 01:00:02,650
in if you guys are interested in ants

1317
01:00:00,880 --> 01:00:04,600
like be more happy to deploy a little

1318
01:00:02,650 --> 01:00:07,710
workshop got a couple different ones up

1319
01:00:04,600 --> 01:00:08,890
here run you through a couple quick gigs

1320
01:00:07,710 --> 01:00:11,410
this

1321
01:00:08,890 --> 01:00:13,118
do you have a good system libraries

1322
01:00:11,410 --> 01:00:14,710
scanner originally we were using black

1323
01:00:13,119 --> 01:00:15,279
duck for their pricing structure was so

1324
01:00:14,710 --> 01:00:19,930
insane

1325
01:00:15,279 --> 01:00:21,190
then we ran away screaming yeah I mean

1326
01:00:19,930 --> 01:00:22,749
what kind of metrics are you trying to

1327
01:00:21,190 --> 01:00:28,480
what workloads and what kind of metric

1328
01:00:22,749 --> 01:00:30,430
bullets yeah alrighty guys thank you for

1329
01:00:28,480 --> 01:00:40,109
questions pay attention all the sponge

1330
01:00:30,430 --> 01:00:40,109
ass and for your patients as well

1331
01:00:41,860 --> 01:00:44,939
[Applause]

