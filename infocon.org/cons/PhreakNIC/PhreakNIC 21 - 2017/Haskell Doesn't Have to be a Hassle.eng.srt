1
00:00:01,800 --> 00:00:10,049
welcome to talk on a school doesn't<font color="#E5E5E5"> have</font>

2
00:00:07,120 --> 00:00:10,049
<font color="#E5E5E5">to be a</font><font color="#CCCCCC"> hassle</font>

3
00:00:10,630 --> 00:00:16,440
hi my name's my<font color="#CCCCCC"> handles</font><font color="#E5E5E5"> Alpina bunny</font>

4
00:00:18,150 --> 00:00:26,710
it's<font color="#E5E5E5"> just my third year</font><font color="#CCCCCC"> and freakin it</font>

5
00:00:21,329 --> 00:00:31,090
and as<font color="#E5E5E5"> far as speaking and conferences</font>

6
00:00:26,710 --> 00:00:35,350
go<font color="#CCCCCC"> I have a I have a friend former</font>

7
00:00:31,090 --> 00:00:37,690
coworker<font color="#E5E5E5"> who wouldn't speak it he speaks</font>

8
00:00:35,350 --> 00:00:39,879
<font color="#E5E5E5">it a lot of conferences</font><font color="#CCCCCC"> all the time</font><font color="#E5E5E5"> and</font>

9
00:00:37,690 --> 00:00:43,239
so he gave me<font color="#CCCCCC"> a bit of advice I said I</font>

10
00:00:39,879 --> 00:00:45,960
was I was<font color="#E5E5E5"> kind of interested</font><font color="#CCCCCC"> in looking</font>

11
00:00:43,239 --> 00:00:50,260
into<font color="#E5E5E5"> speaking at conferences and he said</font>

12
00:00:45,960 --> 00:00:51,789
<font color="#E5E5E5">just you know</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> was telling him I was</font>

13
00:00:50,260 --> 00:00:54,129
<font color="#CCCCCC">having a hard time preparing all my</font>

14
00:00:51,789 --> 00:00:56,140
stuff<font color="#E5E5E5"> and getting it ready for the</font>

15
00:00:54,129 --> 00:01:00,190
deadline to<font color="#CCCCCC"> present</font>

16
00:00:56,140 --> 00:01:04,210
and he said well just write the abstract

17
00:01:00,190 --> 00:01:06,880
<font color="#E5E5E5">first and then you know</font><font color="#CCCCCC"> before you have</font>

18
00:01:04,209 --> 00:01:10,570
anything and then you'll<font color="#CCCCCC"> be pressured to</font>

19
00:01:06,880 --> 00:01:15,158
actually<font color="#E5E5E5"> tell and so I took his advice</font>

20
00:01:10,570 --> 00:01:16,270
<font color="#CCCCCC">and it wasn't</font><font color="#E5E5E5"> I in hindsight I don't</font>

21
00:01:15,159 --> 00:01:18,340
think that's the<font color="#CCCCCC"> best idea</font>

22
00:01:16,270 --> 00:01:21,908
<font color="#CCCCCC">it's the best</font><font color="#E5E5E5"> approach so here is my</font>

23
00:01:18,340 --> 00:01:24,820
<font color="#CCCCCC">disclaimer I've been off more than I</font>

24
00:01:21,909 --> 00:01:30,000
could chew<font color="#E5E5E5"> anyone has read the abstract</font>

25
00:01:24,820 --> 00:01:37,419
that that I was<font color="#E5E5E5"> on freaking</font><font color="#CCCCCC"> website</font><font color="#E5E5E5"> I</font>

26
00:01:30,000 --> 00:01:42,789
said I promised an n64<font color="#E5E5E5"> and I haven't</font>

27
00:01:37,420 --> 00:01:44,380
completed it<font color="#E5E5E5"> it's it's in process</font><font color="#CCCCCC"> I've</font>

28
00:01:42,790 --> 00:01:46,990
figured<font color="#CCCCCC"> out</font><font color="#E5E5E5"> that it's gonna be a</font><font color="#CCCCCC"> whole</font>

29
00:01:44,380 --> 00:01:50,320
<font color="#CCCCCC">lot more complex than</font><font color="#E5E5E5"> I expected I will</font>

30
00:01:46,990 --> 00:01:52,149
<font color="#E5E5E5">tell you the method that was using to</font>

31
00:01:50,320 --> 00:01:54,130
build<font color="#E5E5E5"> it and I can show you the code and</font>

32
00:01:52,149 --> 00:01:57,890
<font color="#E5E5E5">I've got right now I've got thousands of</font>

33
00:01:54,130 --> 00:02:02,600
lines written but it's it's<font color="#E5E5E5"> not</font>

34
00:01:57,890 --> 00:02:11,360
working<font color="#CCCCCC"> it I was</font><font color="#E5E5E5"> using I'm using</font>

35
00:02:02,600 --> 00:02:14,690
<font color="#E5E5E5">movement of 64 plus it's a GPL</font><font color="#CCCCCC"> 64</font>

36
00:02:11,360 --> 00:02:18,830
emulator is pregnancy<font color="#E5E5E5"> akiza's</font><font color="#CCCCCC"> STL for</font>

37
00:02:14,690 --> 00:02:22,400
its graphics inputs and<font color="#E5E5E5"> it's it</font><font color="#CCCCCC"> really</font>

38
00:02:18,830 --> 00:02:24,410
is a good a good one to do a conversion

39
00:02:22,400 --> 00:02:28,250
<font color="#CCCCCC">and</font><font color="#E5E5E5"> really what i want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do is</font><font color="#CCCCCC"> i want</font>

40
00:02:24,410 --> 00:02:30,640
<font color="#CCCCCC">to</font><font color="#E5E5E5"> show you see here's Haskell kind of a</font>

41
00:02:28,250 --> 00:02:35,900
rosetta stone of<font color="#E5E5E5"> what it would</font><font color="#CCCCCC"> look like</font>

42
00:02:30,640 --> 00:02:41,019
- I think I'll probably<font color="#E5E5E5"> have that done</font>

43
00:02:35,900 --> 00:02:41,020
in a<font color="#E5E5E5"> few months</font><font color="#CCCCCC"> I ran this max because</font>

44
00:02:41,500 --> 00:02:48,080
right after I submit my<font color="#E5E5E5"> abstract</font><font color="#CCCCCC"> I lost</font>

45
00:02:45,410 --> 00:02:53,109
my job and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> my wife lost her</font><font color="#E5E5E5"> job</font>

46
00:02:48,080 --> 00:02:55,730
about few weeks later<font color="#E5E5E5"> and so I was so</font>

47
00:02:53,110 --> 00:02:57,470
you know<font color="#E5E5E5"> things were really really</font>

48
00:02:55,730 --> 00:03:00,769
stressful and I was doing a whole<font color="#CCCCCC"> lot of</font>

49
00:02:57,470 --> 00:03:03,769
things other than<font color="#E5E5E5"> and this talk while I</font>

50
00:03:00,770 --> 00:03:07,550
was<font color="#E5E5E5"> going on but now my wife's got a new</font>

51
00:03:03,769 --> 00:03:10,130
job and she's making<font color="#CCCCCC"> more money and I'm</font>

52
00:03:07,550 --> 00:03:12,230
the stay-at-home dad who or something<font color="#CCCCCC"> so</font>

53
00:03:10,130 --> 00:03:20,090
I'm gonna be<font color="#E5E5E5"> spending a lot more time on</font>

54
00:03:12,230 --> 00:03:22,339
<font color="#CCCCCC">this and</font><font color="#E5E5E5"> and my functional programming</font>

55
00:03:20,090 --> 00:03:25,280
meetup group in<font color="#CCCCCC"> Knoxville is hounding</font><font color="#E5E5E5"> me</font>

56
00:03:22,340 --> 00:03:30,650
<font color="#CCCCCC">to get it done</font><font color="#E5E5E5"> so I should be getting at</font>

57
00:03:25,280 --> 00:03:33,280
<font color="#E5E5E5">dark</font><font color="#CCCCCC"> roots</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so who here is has used</font>

58
00:03:30,650 --> 00:03:33,280
Haskell

59
00:03:33,440 --> 00:03:38,940
do people when<font color="#E5E5E5"> one you</font><font color="#CCCCCC"> be is task goal</font>

60
00:03:38,010 --> 00:03:40,890
has it done

61
00:03:38,940 --> 00:03:52,710
you know you've<font color="#E5E5E5"> kind of</font><font color="#CCCCCC"> dabbled ed</font><font color="#E5E5E5"> or</font>

62
00:03:40,890 --> 00:03:56,390
would you consider yourself right well

63
00:03:52,710 --> 00:03:58,920
and<font color="#E5E5E5"> that's I've been using a school of</font>

64
00:03:56,390 --> 00:04:05,160
<font color="#E5E5E5">kind of forcing myself to try to learn</font>

65
00:03:58,920 --> 00:04:07,850
Haskell<font color="#CCCCCC"> for about</font><font color="#E5E5E5"> six months now</font><font color="#CCCCCC"> I I'd</font>

66
00:04:05,160 --> 00:04:13,350
like to consider myself<font color="#E5E5E5"> an immediate</font>

67
00:04:07,850 --> 00:04:18,510
developer with it<font color="#E5E5E5"> but it</font><font color="#CCCCCC"> is been quite</font><font color="#E5E5E5"> -</font>

68
00:04:13,350 --> 00:04:22,530
quite the<font color="#E5E5E5"> challenge to learn but you</font>

69
00:04:18,510 --> 00:04:26,760
<font color="#CCCCCC">know I guess everyone whatever one may</font>

70
00:04:22,530 --> 00:04:28,650
<font color="#CCCCCC">go you know raising up knows assholes of</font>

71
00:04:26,760 --> 00:04:33,390
pure functional programming language

72
00:04:28,650 --> 00:04:35,820
it's fully static strongly typed and it

73
00:04:33,390 --> 00:04:38,700
was you may not know<font color="#CCCCCC"> but it was</font><font color="#E5E5E5"> sponsor</font>

74
00:04:35,820 --> 00:04:45,080
<font color="#E5E5E5">involved by team super smart</font><font color="#CCCCCC"> people at</font>

75
00:04:38,700 --> 00:04:47,670
<font color="#CCCCCC">the University of Glasgow Scotland</font><font color="#E5E5E5"> and</font>

76
00:04:45,080 --> 00:04:54,810
it kind of gets<font color="#CCCCCC"> a reputation for being</font>

77
00:04:47,670 --> 00:04:58,530
<font color="#E5E5E5">an ivory tower</font><font color="#CCCCCC"> very academia language at</font>

78
00:04:54,810 --> 00:05:00,690
<font color="#CCCCCC">some time it kind of makes me chuckle</font>

79
00:04:58,530 --> 00:05:02,520
inside to think<font color="#E5E5E5"> of a little bunch of</font>

80
00:05:00,690 --> 00:05:05,460
Scottish professors sitting around

81
00:05:02,520 --> 00:05:09,810
drinking scotch and saying you know we

82
00:05:05,460 --> 00:05:11,780
need<font color="#CCCCCC"> you know would it be possible maybe</font>

83
00:05:09,810 --> 00:05:14,790
we could build a programming language

84
00:05:11,780 --> 00:05:19,289
<font color="#E5E5E5">where we write programs</font><font color="#CCCCCC"> that don't have</font>

85
00:05:14,790 --> 00:05:21,390
any<font color="#CCCCCC"> books once there and and then they</font>

86
00:05:19,290 --> 00:05:26,790
all laugh<font color="#E5E5E5"> but then one guy says wait a</font>

87
00:05:21,390 --> 00:05:30,349
<font color="#E5E5E5">minute oh my scotch and that's kind of</font>

88
00:05:26,790 --> 00:05:30,350
<font color="#CCCCCC">how I</font><font color="#E5E5E5"> let's see Haskell</font>

89
00:05:30,410 --> 00:05:36,410
so they created the Glasgow Haskell

90
00:05:33,170 --> 00:05:40,340
compiler<font color="#E5E5E5"> that came out</font><font color="#CCCCCC"> of the University</font>

91
00:05:36,410 --> 00:05:42,530
of Glasgow and<font color="#E5E5E5"> it is the most popular</font>

92
00:05:40,340 --> 00:05:47,210
<font color="#CCCCCC">Haskell</font><font color="#E5E5E5"> compiler and that's why I'm</font>

93
00:05:42,530 --> 00:05:49,460
using an online examples here I went

94
00:05:47,210 --> 00:05:51,140
over that's it's got a reputation of

95
00:05:49,460 --> 00:05:53,690
being a programming language really<font color="#E5E5E5"> only</font>

96
00:05:51,140 --> 00:05:58,520
for mathematicians<font color="#CCCCCC"> and theoretical with</font>

97
00:05:53,690 --> 00:06:02,180
your scientists but<font color="#CCCCCC"> in practice I have</font>

98
00:05:58,520 --> 00:06:06,469
found Haskell<font color="#E5E5E5"> to really be essentially</font>

99
00:06:02,180 --> 00:06:08,920
see without<font color="#E5E5E5"> pointers when you really get</font>

100
00:06:06,470 --> 00:06:08,920
talented

101
00:06:09,010 --> 00:06:15,260
now why would I use Haskell

102
00:06:11,330 --> 00:06:20,240
well so you know<font color="#E5E5E5"> before I lost my job I</font>

103
00:06:15,260 --> 00:06:24,770
was<font color="#E5E5E5"> writing code</font><font color="#CCCCCC"> full-time</font><font color="#E5E5E5"> c-sharp and</font>

104
00:06:20,240 --> 00:06:30,400
<font color="#E5E5E5">then I would come home and I'd want</font><font color="#CCCCCC"> to</font>

105
00:06:24,770 --> 00:06:34,460
write more code<font color="#CCCCCC"> I want to get things and</font>

106
00:06:30,400 --> 00:06:36,590
and I was having<font color="#E5E5E5"> to debug yeah I'm fine</font>

107
00:06:34,460 --> 00:06:38,810
something would<font color="#E5E5E5"> go wrong and at the end</font>

108
00:06:36,590 --> 00:06:45,080
of my hard work day<font color="#CCCCCC"> I didn't want</font><font color="#E5E5E5"> to</font>

109
00:06:38,810 --> 00:06:47,780
debug worked<font color="#E5E5E5"> ever it was exhausting so I</font>

110
00:06:45,080 --> 00:06:51,620
<font color="#CCCCCC">like the</font><font color="#E5E5E5"> idea of having to only write</font>

111
00:06:47,780 --> 00:06:55,010
something once<font color="#E5E5E5"> and ask for the full</font>

112
00:06:51,620 --> 00:06:57,200
prompt domain has to be now<font color="#E5E5E5"> in order</font><font color="#CCCCCC"> for</font>

113
00:06:55,010 --> 00:06:58,849
it to compile for<font color="#CCCCCC"> the most part if</font>

114
00:06:57,200 --> 00:07:01,969
you're<font color="#CCCCCC"> talking through the pure pure</font>

115
00:06:58,850 --> 00:07:04,610
functions<font color="#CCCCCC"> there hasn't been a</font><font color="#E5E5E5"> whole lot</font>

116
00:07:01,970 --> 00:07:10,160
<font color="#CCCCCC">of syntax that's changed over the years</font>

117
00:07:04,610 --> 00:07:12,380
<font color="#E5E5E5">it's very stable pure functions in the</font>

118
00:07:10,160 --> 00:07:15,440
language can<font color="#E5E5E5"> be automatically</font>

119
00:07:12,380 --> 00:07:19,010
asynchronously<font color="#E5E5E5"> parallelized</font><font color="#CCCCCC"> by the</font>

120
00:07:15,440 --> 00:07:22,880
compiler<font color="#E5E5E5"> in</font><font color="#CCCCCC"> mode</font><font color="#E5E5E5"> in certain cases and</font>

121
00:07:19,010 --> 00:07:25,248
you can just put a slash<font color="#CCCCCC"> threat or a -</font>

122
00:07:22,880 --> 00:07:27,889
<font color="#CCCCCC">threaded option</font><font color="#E5E5E5"> on compiling and you</font>

123
00:07:25,249 --> 00:07:29,929
and run across<font color="#CCCCCC"> parkour</font><font color="#E5E5E5"> and certain</font>

124
00:07:27,889 --> 00:07:36,049
pieces of your program<font color="#E5E5E5"> or just get</font>

125
00:07:29,929 --> 00:07:38,479
<font color="#E5E5E5">picked up and distributed it can</font><font color="#CCCCCC"> operate</font>

126
00:07:36,049 --> 00:07:41,299
as a<font color="#E5E5E5"> lower level languages and it</font>

127
00:07:38,479 --> 00:07:47,989
compiles all<font color="#E5E5E5"> the code down to</font><font color="#CCCCCC"> assistant</font>

128
00:07:41,299 --> 00:07:51,258
partner it ties in easily<font color="#CCCCCC"> with C</font><font color="#E5E5E5"> so if</font>

129
00:07:47,989 --> 00:07:53,359
<font color="#E5E5E5">we have a scene or you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> C dll's</font>

130
00:07:51,259 --> 00:07:55,939
<font color="#E5E5E5">where you want to have a Haskell DOL</font>

131
00:07:53,359 --> 00:08:01,479
that<font color="#E5E5E5"> you important to see they go both</font>

132
00:07:55,939 --> 00:08:08,929
<font color="#E5E5E5">ways</font><font color="#CCCCCC"> the same Pascal compiler runs on</font>

133
00:08:01,479 --> 00:08:14,329
<font color="#E5E5E5">x86 64 and arm architectures now</font><font color="#CCCCCC"> Pascal</font>

134
00:08:08,929 --> 00:08:17,208
actually is a<font color="#E5E5E5"> Haskell hassle and in a</font>

135
00:08:14,329 --> 00:08:20,389
sense that because<font color="#CCCCCC"> a lot of</font><font color="#E5E5E5"> people use</font>

136
00:08:17,209 --> 00:08:24,219
it as theoretically<font color="#E5E5E5"> a lot of the</font>

137
00:08:20,389 --> 00:08:28,249
documentation<font color="#CCCCCC"> I found is you</font><font color="#E5E5E5"> know from</font>

138
00:08:24,219 --> 00:08:30,889
mathematician and<font color="#E5E5E5"> computer science</font>

139
00:08:28,249 --> 00:08:33,939
people<font color="#CCCCCC"> I really</font><font color="#E5E5E5"> don't understand why why</font>

140
00:08:30,889 --> 00:08:38,599
you would be using<font color="#CCCCCC"> it to doing</font><font color="#E5E5E5"> things</font>

141
00:08:33,938 --> 00:08:45,139
you know<font color="#CCCCCC"> constructed what</font><font color="#E5E5E5"> going in</font><font color="#CCCCCC"> 6</font>

142
00:08:38,599 --> 00:08:47,120
before<font color="#CCCCCC"> those who do understand it these</font>

143
00:08:45,139 --> 00:08:48,800
<font color="#E5E5E5">people</font><font color="#CCCCCC"> seem to have a different language</font>

144
00:08:47,120 --> 00:08:49,850
<font color="#CCCCCC">than other developers they've made up to</font>

145
00:08:48,800 --> 00:08:52,790
all their own terms

146
00:08:49,850 --> 00:08:56,329
<font color="#E5E5E5">and I've had to</font><font color="#CCCCCC"> basically build my own</font>

147
00:08:52,790 --> 00:08:59,269
lexicon<font color="#E5E5E5"> of when they say</font><font color="#CCCCCC"> liar it means</font>

148
00:08:56,329 --> 00:09:01,809
event<font color="#CCCCCC"> handler</font><font color="#E5E5E5"> when they say you know</font>

149
00:08:59,269 --> 00:09:06,610
they have certain terms<font color="#CCCCCC"> freak each thing</font>

150
00:09:01,809 --> 00:09:12,949
<font color="#CCCCCC">and I'll go</font><font color="#E5E5E5"> into that further</font><font color="#CCCCCC"> there's a</font>

151
00:09:06,610 --> 00:09:15,080
stigma that<font color="#CCCCCC"> ASCO is</font>

152
00:09:12,950 --> 00:09:18,560
you know really<font color="#CCCCCC"> just an odd root our</font>

153
00:09:15,080 --> 00:09:19,820
language<font color="#E5E5E5"> and I've run into this a lot of</font>

154
00:09:18,560 --> 00:09:22,640
my functional<font color="#E5E5E5"> programming</font>

155
00:09:19,820 --> 00:09:24,320
<font color="#E5E5E5">Lido's is I'll start</font><font color="#CCCCCC"> trying to talk a</font>

156
00:09:22,640 --> 00:09:27,530
school with<font color="#E5E5E5"> people</font>

157
00:09:24,320 --> 00:09:30,950
<font color="#E5E5E5">I'll talk about react I'll talk about</font>

158
00:09:27,530 --> 00:09:32,569
JavaScript<font color="#CCCCCC"> I'll talk about f-sharp but I</font>

159
00:09:30,950 --> 00:09:36,890
don't want<font color="#E5E5E5"> to talk about</font><font color="#CCCCCC"> Haskell</font><font color="#E5E5E5"> because</font>

160
00:09:32,570 --> 00:09:42,080
it's<font color="#E5E5E5"> two up here and I think</font><font color="#CCCCCC"> there's a</font>

161
00:09:36,890 --> 00:09:45,260
misconception<font color="#E5E5E5"> that there is you</font><font color="#CCCCCC"> know not</font>

162
00:09:42,080 --> 00:09:48,440
as<font color="#E5E5E5"> much developer support certainly</font>

163
00:09:45,260 --> 00:09:52,550
there is<font color="#CCCCCC"> a Haskell</font><font color="#E5E5E5"> IDE that works pretty</font>

164
00:09:48,440 --> 00:09:54,620
well<font color="#CCCCCC"> but in</font><font color="#E5E5E5"> general you're</font><font color="#CCCCCC"> not going to</font>

165
00:09:52,550 --> 00:09:57,199
get<font color="#E5E5E5"> intellisense we're going to get you</font>

166
00:09:54,620 --> 00:09:59,950
know anything that<font color="#E5E5E5"> really just rice or</font>

167
00:09:57,200 --> 00:09:59,950
code for you

168
00:10:00,740 --> 00:10:07,460
truth be told<font color="#E5E5E5"> it's actually kind of a</font>

169
00:10:03,560 --> 00:10:09,530
challenge<font color="#E5E5E5"> to learn that's kind of</font><font color="#CCCCCC"> you</font>

170
00:10:07,460 --> 00:10:11,630
<font color="#E5E5E5">know it's not it's a hassle</font><font color="#CCCCCC"> when I'm</font>

171
00:10:09,530 --> 00:10:16,160
mentally fatigued<font color="#CCCCCC"> and</font><font color="#E5E5E5"> in general I</font>

172
00:10:11,630 --> 00:10:22,070
<font color="#E5E5E5">really like to</font><font color="#CCCCCC"> and so</font><font color="#E5E5E5"> ask oh really you</font>

173
00:10:16,160 --> 00:10:24,709
know has<font color="#CCCCCC"> been fun to</font><font color="#E5E5E5"> get into other</font>

174
00:10:22,070 --> 00:10:28,280
benefits<font color="#CCCCCC"> to Haskell cope</font><font color="#E5E5E5"> and extreme</font>

175
00:10:24,710 --> 00:10:31,520
<font color="#E5E5E5">Lincoln</font><font color="#CCCCCC"> suits it's no real</font><font color="#E5E5E5"> need for</font>

176
00:10:28,280 --> 00:10:34,339
boilerplate code you<font color="#CCCCCC"> just</font><font color="#E5E5E5"> write a</font>

177
00:10:31,520 --> 00:10:39,050
function that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> don't have to repeat</font>

178
00:10:34,340 --> 00:10:42,200
yourself<font color="#E5E5E5"> anywhere</font><font color="#CCCCCC"> lots of shortcuts that</font>

179
00:10:39,050 --> 00:10:45,920
can elegantly do most things<font color="#CCCCCC"> there</font>

180
00:10:42,200 --> 00:10:49,030
extensive libraries<font color="#E5E5E5"> support advanced</font>

181
00:10:45,920 --> 00:10:53,780
concurrent program so you can<font color="#CCCCCC"> really</font>

182
00:10:49,030 --> 00:10:58,490
take take if you've<font color="#E5E5E5"> got a multi-core</font>

183
00:10:53,780 --> 00:11:00,670
system you can really leverage all<font color="#CCCCCC"> of</font>

184
00:10:58,490 --> 00:11:00,670
that

185
00:11:02,880 --> 00:11:08,850
Haskell also holds no punches<font color="#CCCCCC"> if you</font>

186
00:11:06,250 --> 00:11:13,290
want<font color="#E5E5E5"> a large pure functional programming</font>

187
00:11:08,850 --> 00:11:17,019
<font color="#CCCCCC">Pascal's your language</font><font color="#E5E5E5"> it forces you to</font>

188
00:11:13,290 --> 00:11:20,439
think functionally<font color="#CCCCCC"> whereas programming</font>

189
00:11:17,019 --> 00:11:23,010
languages like<font color="#CCCCCC"> f-sharp it says it's</font>

190
00:11:20,440 --> 00:11:25,589
functional but<font color="#CCCCCC"> you can still do a lot of</font>

191
00:11:23,010 --> 00:11:29,620
<font color="#E5E5E5">object-oriented programming and</font>

192
00:11:25,589 --> 00:11:36,329
<font color="#E5E5E5">structure program or it's a school</font><font color="#CCCCCC"> it's</font>

193
00:11:29,620 --> 00:11:38,950
gotta<font color="#E5E5E5"> be</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> getting into the syntax</font>

194
00:11:36,329 --> 00:11:41,140
important data structures to<font color="#E5E5E5"> know most</font>

195
00:11:38,950 --> 00:11:45,579
important<font color="#E5E5E5"> you have your list and your</font>

196
00:11:41,140 --> 00:11:50,380
<font color="#E5E5E5">topic list probably most every one</font><font color="#CCCCCC"> of</font>

197
00:11:45,579 --> 00:11:53,500
<font color="#E5E5E5">your product knows list is</font><font color="#CCCCCC"> a list of</font>

198
00:11:50,380 --> 00:11:56,620
<font color="#E5E5E5">items</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> have the same type</font><font color="#CCCCCC"> tupple is</font>

199
00:11:53,500 --> 00:11:58,990
a container of items to have multiple

200
00:11:56,620 --> 00:12:00,790
<font color="#E5E5E5">different types so your topple is going</font>

201
00:11:58,990 --> 00:12:05,140
to be your object your list or more your

202
00:12:00,790 --> 00:12:07,240
<font color="#E5E5E5">race</font><font color="#CCCCCC"> you can use the type keyword to</font>

203
00:12:05,140 --> 00:12:09,880
define you talk to you one two<font color="#E5E5E5"> and</font>

204
00:12:07,240 --> 00:12:14,529
you've got primitive types available<font color="#E5E5E5"> and</font>

205
00:12:09,880 --> 00:12:19,060
float character etc string<font color="#E5E5E5"> is available</font>

206
00:12:14,529 --> 00:12:23,380
it's actually a list<font color="#E5E5E5"> of characters</font><font color="#CCCCCC"> so</font>

207
00:12:19,060 --> 00:12:26,410
creating a new type is pretty pretty

208
00:12:23,380 --> 00:12:29,020
simple<font color="#E5E5E5"> you just have the keyword type</font>

209
00:12:26,410 --> 00:12:33,730
and what you want to<font color="#CCCCCC"> make the time and</font>

210
00:12:29,020 --> 00:12:35,770
that<font color="#E5E5E5"> you set up what it way they waste</font>

211
00:12:33,730 --> 00:12:40,690
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the same as</font><font color="#E5E5E5"> type of death and</font>

212
00:12:35,770 --> 00:12:43,000
see essentially and then you can have

213
00:12:40,690 --> 00:12:46,720
what I<font color="#CCCCCC"> like</font><font color="#E5E5E5"> to call properties but it's</font>

214
00:12:43,000 --> 00:12:51,520
really<font color="#E5E5E5"> these are religious functions we</font>

215
00:12:46,720 --> 00:12:52,470
have a function<font color="#E5E5E5"> that</font><font color="#CCCCCC"> has a pattern</font>

216
00:12:51,520 --> 00:12:59,760
<font color="#E5E5E5">matching</font>

217
00:12:52,470 --> 00:13:01,920
and you know<font color="#CCCCCC"> base so</font><font color="#E5E5E5"> kind of me only</font><font color="#CCCCCC"> I'm</font>

218
00:12:59,760 --> 00:13:06,930
actually<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to what you're saying</font>

219
00:13:01,920 --> 00:13:09,120
<font color="#E5E5E5">here so this top line</font><font color="#CCCCCC"> for position X</font><font color="#E5E5E5"> so</font>

220
00:13:06,930 --> 00:13:14,219
we're<font color="#CCCCCC"> defining a pixel position so we</font>

221
00:13:09,120 --> 00:13:16,950
have an accent<font color="#E5E5E5"> one</font><font color="#CCCCCC"> and so the in our</font>

222
00:13:14,220 --> 00:13:19,380
definition<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the pixel position it's</font>

223
00:13:16,950 --> 00:13:21,810
<font color="#E5E5E5">going to be a tough hole that has to an</font>

224
00:13:19,380 --> 00:13:24,810
integer<font color="#E5E5E5"> and an integer and so that's</font>

225
00:13:21,810 --> 00:13:28,260
your X and your Y and so these functions

226
00:13:24,810 --> 00:13:32,819
<font color="#E5E5E5">will pull back position X or position</font>

227
00:13:28,260 --> 00:13:36,750
<font color="#E5E5E5">one</font><font color="#CCCCCC"> and so that way and then we could</font>

228
00:13:32,820 --> 00:13:39,300
define now you know<font color="#CCCCCC"> strongly tied say</font>

229
00:13:36,750 --> 00:13:41,010
we're going to<font color="#E5E5E5"> receive</font><font color="#CCCCCC"> for position X</font>

230
00:13:39,300 --> 00:13:42,479
we're going<font color="#CCCCCC"> to receive</font><font color="#E5E5E5"> pixel position</font>

231
00:13:41,010 --> 00:13:45,270
from it and we're<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> return an</font>

232
00:13:42,480 --> 00:13:49,650
integer and so right there where we<font color="#CCCCCC"> have</font>

233
00:13:45,270 --> 00:13:52,079
X and then the underscore axis is<font color="#CCCCCC"> your</font>

234
00:13:49,650 --> 00:13:54,300
<font color="#CCCCCC">seen pixel position</font><font color="#E5E5E5"> X is what's going to</font>

235
00:13:52,080 --> 00:13:59,520
<font color="#E5E5E5">be returned which is the first integer</font>

236
00:13:54,300 --> 00:14:02,339
<font color="#E5E5E5">and pixel position so then we can also</font>

237
00:13:59,520 --> 00:14:04,710
say once we've<font color="#CCCCCC"> defined pixel position</font>

238
00:14:02,340 --> 00:14:08,880
<font color="#E5E5E5">that we have a</font><font color="#CCCCCC"> rectum</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> we could</font>

239
00:14:04,710 --> 00:14:13,980
define<font color="#E5E5E5"> a rectangle rectangle as either a</font>

240
00:14:08,880 --> 00:14:16,740
list of pixel positions in which case we

241
00:14:13,980 --> 00:14:21,630
want to stop<font color="#E5E5E5"> it for items of the pixel</font>

242
00:14:16,740 --> 00:14:25,260
in the in the rectangle or we could<font color="#E5E5E5"> have</font>

243
00:14:21,630 --> 00:14:26,900
a<font color="#CCCCCC"> couple</font><font color="#E5E5E5"> of for pixel positions and then</font>

244
00:14:25,260 --> 00:14:31,160
that could<font color="#E5E5E5"> be</font><font color="#CCCCCC"> ranked</font>

245
00:14:26,900 --> 00:14:31,160
<font color="#CCCCCC">two</font><font color="#E5E5E5"> different approaches</font><font color="#CCCCCC"> you could</font><font color="#E5E5E5"> use</font>

246
00:14:31,339 --> 00:14:38,100
<font color="#E5E5E5">important to note case matters and</font>

247
00:14:34,140 --> 00:14:44,480
<font color="#CCCCCC">Pascal you will have all kinds compiler</font>

248
00:14:38,100 --> 00:14:48,120
errors are difficult to understand<font color="#E5E5E5"> if</font>

249
00:14:44,480 --> 00:14:51,660
this happened<font color="#E5E5E5"> to me if I screwed up the</font>

250
00:14:48,120 --> 00:14:54,480
casing<font color="#CCCCCC"> I didn't know where I was at once</font>

251
00:14:51,660 --> 00:14:56,130
I figured out the case matter<font color="#CCCCCC"> items</font><font color="#E5E5E5"> that</font>

252
00:14:54,480 --> 00:14:59,339
start with an uppercase letter<font color="#E5E5E5"> are</font>

253
00:14:56,130 --> 00:15:00,930
traitors<font color="#CCCCCC"> types or modules I have</font><font color="#E5E5E5"> to</font>

254
00:14:59,339 --> 00:15:06,839
start<font color="#E5E5E5"> with the lowercase letter</font><font color="#CCCCCC"> you're</font>

255
00:15:00,930 --> 00:15:08,849
treated as functions and values<font color="#E5E5E5"> right</font>

256
00:15:06,839 --> 00:15:16,800
<font color="#CCCCCC">here we're pulling</font><font color="#E5E5E5"> the entire from a</font>

257
00:15:08,850 --> 00:15:21,029
list<font color="#E5E5E5"> so pull out</font><font color="#CCCCCC"> to or the index</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> t</font>

258
00:15:16,800 --> 00:15:26,329
will return<font color="#E5E5E5"> to see this case concatenate</font>

259
00:15:21,029 --> 00:15:28,230
lists<font color="#E5E5E5"> very simple</font><font color="#CCCCCC"> but I want to</font><font color="#E5E5E5"> get into</font>

260
00:15:26,330 --> 00:15:34,740
who here knows with<font color="#CCCCCC"> the higher-order</font>

261
00:15:28,230 --> 00:15:37,560
<font color="#E5E5E5">functions very good</font><font color="#CCCCCC"> a higher work</font>

262
00:15:34,740 --> 00:15:40,500
function<font color="#CCCCCC"> and this is a computer science</font>

263
00:15:37,560 --> 00:15:44,550
<font color="#CCCCCC">definition it</font><font color="#E5E5E5"> is a function that can</font>

264
00:15:40,500 --> 00:15:47,040
take a<font color="#E5E5E5"> function as normal and they or</font>

265
00:15:44,550 --> 00:15:52,130
<font color="#E5E5E5">and</font><font color="#CCCCCC"> or may return a function as it</font>

266
00:15:47,040 --> 00:15:55,170
resolved so you have to find out a

267
00:15:52,130 --> 00:15:58,470
function<font color="#E5E5E5"> you can pass in another</font>

268
00:15:55,170 --> 00:16:00,569
function<font color="#CCCCCC"> to that function and</font><font color="#E5E5E5"> then you</font>

269
00:15:58,470 --> 00:16:06,270
can<font color="#E5E5E5"> return just as the result of a</font>

270
00:16:00,570 --> 00:16:08,310
function<font color="#CCCCCC"> a school has this it's an</font>

271
00:16:06,270 --> 00:16:10,439
integral part<font color="#CCCCCC"> of the language</font><font color="#E5E5E5"> there are</font>

272
00:16:08,310 --> 00:16:12,390
<font color="#E5E5E5">other languages</font><font color="#CCCCCC"> that are implementing it</font>

273
00:16:10,440 --> 00:16:15,570
now if<font color="#E5E5E5"> you think that lambda expressions</font>

274
00:16:12,390 --> 00:16:19,350
<font color="#E5E5E5">probably used it and not realized it if</font>

275
00:16:15,570 --> 00:16:22,750
<font color="#CCCCCC">you V</font><font color="#E5E5E5"> is lambda expression is easy but</font>

276
00:16:19,350 --> 00:16:29,620
integral integral of<font color="#CCCCCC"> Pascal is higher</font>

277
00:16:22,750 --> 00:16:32,350
functions<font color="#E5E5E5"> pure functions definition of</font>

278
00:16:29,620 --> 00:16:35,320
the<font color="#CCCCCC"> pure function a pure function will</font>

279
00:16:32,350 --> 00:16:39,520
always<font color="#E5E5E5"> return</font><font color="#CCCCCC"> the same result</font><font color="#E5E5E5"> given the</font>

280
00:16:35,320 --> 00:16:42,640
same<font color="#E5E5E5"> arguments and the process by which</font>

281
00:16:39,520 --> 00:16:46,060
the function<font color="#E5E5E5"> is</font><font color="#CCCCCC"> executed</font><font color="#E5E5E5"> does not cause</font>

282
00:16:42,640 --> 00:16:50,290
an observable<font color="#E5E5E5"> side effect</font><font color="#CCCCCC"> so that what</font>

283
00:16:46,060 --> 00:16:55,750
<font color="#E5E5E5">this means is that everything</font><font color="#CCCCCC"> that</font>

284
00:16:50,290 --> 00:16:57,670
happens inside<font color="#E5E5E5"> the function so the</font>

285
00:16:55,750 --> 00:17:00,430
function<font color="#E5E5E5"> when the function wrongs</font>

286
00:16:57,670 --> 00:17:02,260
it does not<font color="#E5E5E5"> change anything outside the</font>

287
00:17:00,430 --> 00:17:06,369
function<font color="#CCCCCC"> it does</font><font color="#E5E5E5"> not touch anything</font>

288
00:17:02,260 --> 00:17:11,319
outside<font color="#E5E5E5"> it pulls in its inputs its</font>

289
00:17:06,369 --> 00:17:15,310
arguments it uses that it does its thing

290
00:17:11,319 --> 00:17:20,849
and then it returns<font color="#CCCCCC"> out</font><font color="#E5E5E5"> when you have a</font>

291
00:17:15,310 --> 00:17:27,520
pure function<font color="#E5E5E5"> like this you dependently</font>

292
00:17:20,849 --> 00:17:30,129
dependably<font color="#E5E5E5"> know that it's</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to do</font>

293
00:17:27,520 --> 00:17:36,750
<font color="#CCCCCC">exactly what</font><font color="#E5E5E5"> you think it is for the</font>

294
00:17:30,130 --> 00:17:36,750
same input every time it's consistent

295
00:17:36,880 --> 00:17:41,860
and this is<font color="#E5E5E5"> really the building blocks</font>

296
00:17:39,539 --> 00:17:46,720
<font color="#E5E5E5">building block of</font><font color="#CCCCCC"> Haskell analyzed</font>

297
00:17:41,860 --> 00:17:49,780
<font color="#E5E5E5">survival</font><font color="#CCCCCC"> all hospitals all values in</font>

298
00:17:46,720 --> 00:17:52,510
<font color="#E5E5E5">Haskell are beautiful as the canopy</font>

299
00:17:49,780 --> 00:17:55,510
challenge wants to<font color="#E5E5E5"> create it so</font><font color="#CCCCCC"> if you</font>

300
00:17:52,510 --> 00:17:58,510
say<font color="#E5E5E5"> X equals 5 X will equal 5 forever</font>

301
00:17:55,510 --> 00:18:04,110
<font color="#CCCCCC">you can't get that go say x</font><font color="#E5E5E5"> equals 6 or</font>

302
00:17:58,510 --> 00:18:08,260
<font color="#CCCCCC">X plus</font><font color="#E5E5E5"> plus</font><font color="#CCCCCC"> that doesn't work now</font>

303
00:18:04,110 --> 00:18:13,299
because<font color="#CCCCCC"> of this there</font><font color="#E5E5E5"> is no wild form</font>

304
00:18:08,260 --> 00:18:19,570
for each a lives live searching through

305
00:18:13,299 --> 00:18:24,639
<font color="#E5E5E5">person so for instance we have</font><font color="#CCCCCC"> a map</font>

306
00:18:19,570 --> 00:18:27,700
function<font color="#E5E5E5"> that mimics</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> for each it takes</font>

307
00:18:24,640 --> 00:18:31,270
a function whatever<font color="#E5E5E5"> you whatever you</font>

308
00:18:27,700 --> 00:18:34,600
want to<font color="#E5E5E5"> run so you have a function the</font>

309
00:18:31,270 --> 00:18:37,539
thing you<font color="#CCCCCC"> want to iterate through</font><font color="#E5E5E5"> and</font>

310
00:18:34,600 --> 00:18:40,059
you<font color="#CCCCCC"> have a list</font><font color="#E5E5E5"> of parameters and</font><font color="#CCCCCC"> it</font>

311
00:18:37,539 --> 00:18:42,610
returns that<font color="#E5E5E5"> list of parameters after</font>

312
00:18:40,059 --> 00:18:44,770
<font color="#CCCCCC">it's been passed taking the function</font><font color="#E5E5E5"> and</font>

313
00:18:42,610 --> 00:18:48,389
<font color="#E5E5E5">the function has been applied to every</font>

314
00:18:44,770 --> 00:18:48,389
single<font color="#CCCCCC"> item on that list</font>

315
00:18:49,020 --> 00:18:54,800
<font color="#CCCCCC">zip function</font>

316
00:18:51,380 --> 00:18:57,530
<font color="#CCCCCC">it will</font><font color="#E5E5E5"> stretch this as well you take</font>

317
00:18:54,800 --> 00:19:02,780
<font color="#CCCCCC">tip the</font><font color="#E5E5E5"> two lists of any type same size</font>

318
00:18:57,530 --> 00:19:06,340
and it<font color="#E5E5E5"> zips them together and makes a</font>

319
00:19:02,780 --> 00:19:09,350
tupple a list of tuples<font color="#E5E5E5"> that contain</font>

320
00:19:06,340 --> 00:19:12,020
both lips<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know the items of both</font>

321
00:19:09,350 --> 00:19:16,820
<font color="#E5E5E5">bliss so in this case we have current</font>

322
00:19:12,020 --> 00:19:21,590
<font color="#E5E5E5">let us 0 1 2 3</font><font color="#CCCCCC"> and strings and we take</font>

323
00:19:16,820 --> 00:19:27,919
the<font color="#E5E5E5"> length of the current list and we</font>

324
00:19:21,590 --> 00:19:33,139
can<font color="#E5E5E5"> we have an enumeration I actually</font>

325
00:19:27,920 --> 00:19:39,410
<font color="#E5E5E5">have to fix that so it it would it</font>

326
00:19:33,140 --> 00:19:42,260
should yield 0 1 2<font color="#CCCCCC"> 3 in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> comment here</font>

327
00:19:39,410 --> 00:19:47,470
I meant to fix it last time<font color="#CCCCCC"> but yeah if</font>

328
00:19:42,260 --> 00:19:51,080
it<font color="#CCCCCC"> actually ran this</font><font color="#E5E5E5"> would be 0 1 2 3</font>

329
00:19:47,470 --> 00:19:58,360
going<font color="#E5E5E5"> across and so you can have a key</font>

330
00:19:51,080 --> 00:19:58,360
value<font color="#E5E5E5"> pair object that you</font><font color="#CCCCCC"> can pass</font>

331
00:20:00,200 --> 00:20:05,659
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so we know what pure functions are</font>

332
00:20:03,080 --> 00:20:09,249
how do we impure<font color="#E5E5E5"> because at some</font><font color="#CCCCCC"> point</font>

333
00:20:05,659 --> 00:20:12,850
we're going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to do something</font>

334
00:20:09,249 --> 00:20:16,549
important<font color="#E5E5E5"> if you had only pure functions</font>

335
00:20:12,850 --> 00:20:18,399
and you couldn't talk to<font color="#CCCCCC"> the i/o</font><font color="#E5E5E5"> you</font>

336
00:20:16,549 --> 00:20:20,989
<font color="#CCCCCC">couldn't use a random</font><font color="#E5E5E5"> number</font><font color="#CCCCCC"> generator</font>

337
00:20:18,399 --> 00:20:26,748
<font color="#E5E5E5">you couldn't do anything that you'd</font>

338
00:20:20,989 --> 00:20:29,059
really<font color="#CCCCCC"> need to do in</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> program so of</font>

339
00:20:26,749 --> 00:20:31,330
course our objective is Haskell<font color="#CCCCCC"> code</font>

340
00:20:29,059 --> 00:20:35,658
<font color="#CCCCCC">developers places much code as possible</font>

341
00:20:31,330 --> 00:20:37,428
<font color="#CCCCCC">and at the pure functions because that</font>

342
00:20:35,659 --> 00:20:40,009
actually<font color="#E5E5E5"> reduces</font><font color="#CCCCCC"> the potential for</font>

343
00:20:37,429 --> 00:20:42,019
unexpected<font color="#E5E5E5"> program behavior we always</font>

344
00:20:40,009 --> 00:20:45,190
know what the result of<font color="#CCCCCC"> a pure function</font>

345
00:20:42,019 --> 00:20:48,739
is going to<font color="#E5E5E5"> be and</font><font color="#CCCCCC"> that can be</font>

346
00:20:45,190 --> 00:20:53,659
asynchronously parallelized<font color="#E5E5E5"> very very</font>

347
00:20:48,739 --> 00:20:56,090
simply<font color="#E5E5E5"> it eliminates bugs but when we</font>

348
00:20:53,659 --> 00:21:03,259
actually<font color="#E5E5E5"> want to do</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> risky we</font>

349
00:20:56,090 --> 00:21:08,600
have to use what's called<font color="#CCCCCC"> a mana so to</font>

350
00:21:03,259 --> 00:21:10,399
actually run an<font color="#E5E5E5"> ass-full program we like</font>

351
00:21:08,600 --> 00:21:15,139
<font color="#E5E5E5">many</font><font color="#CCCCCC"> programs which is you have a main</font>

352
00:21:10,399 --> 00:21:22,219
<font color="#CCCCCC">method</font><font color="#E5E5E5"> and the main method returns an</font>

353
00:21:15,139 --> 00:21:24,799
<font color="#E5E5E5">i/o you know empty couple which really</font>

354
00:21:22,220 --> 00:21:28,279
in this<font color="#E5E5E5"> case we can</font><font color="#CCCCCC"> think of</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> as a</font>

355
00:21:24,799 --> 00:21:32,509
void<font color="#E5E5E5"> if you'll receive</font><font color="#CCCCCC"> it's returning</font>

356
00:21:28,279 --> 00:21:36,289
<font color="#E5E5E5">for in which case it's</font><font color="#CCCCCC"> also returning</font>

357
00:21:32,509 --> 00:21:38,359
<font color="#CCCCCC">anything you wanted</font><font color="#E5E5E5"> to return I owe in</font>

358
00:21:36,289 --> 00:21:41,830
this case is<font color="#E5E5E5"> of type</font><font color="#CCCCCC"> Anand</font>

359
00:21:38,359 --> 00:21:41,830
<font color="#E5E5E5">it's the I am</font>

360
00:21:43,540 --> 00:21:50,930
in this in<font color="#CCCCCC"> main</font><font color="#E5E5E5"> we have</font><font color="#CCCCCC"> main equals do</font>

361
00:21:47,540 --> 00:21:56,300
and we can put any number<font color="#CCCCCC"> of</font>

362
00:21:50,930 --> 00:21:59,140
instructions<font color="#CCCCCC"> that do statement and what</font>

363
00:21:56,300 --> 00:22:04,210
that does is it will<font color="#CCCCCC"> actually run</font><font color="#E5E5E5"> each</font>

364
00:21:59,140 --> 00:22:08,420
instruction<font color="#E5E5E5"> incremental e without</font>

365
00:22:04,210 --> 00:22:10,640
certain flags<font color="#E5E5E5"> or intervention this is</font>

366
00:22:08,420 --> 00:22:12,040
not it easily asynchronously

367
00:22:10,640 --> 00:22:15,230
parallelized

368
00:22:12,040 --> 00:22:20,389
because it's supposed to be<font color="#CCCCCC"> Harriton</font>

369
00:22:15,230 --> 00:22:24,800
it's supposed to be<font color="#E5E5E5"> run and each one of</font>

370
00:22:20,390 --> 00:22:32,120
<font color="#CCCCCC">these lines is going to return an</font><font color="#E5E5E5"> i/o on</font>

371
00:22:24,800 --> 00:22:34,760
<font color="#CCCCCC">it so yes so this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> how over oh by the</font>

372
00:22:32,120 --> 00:22:35,959
way<font color="#E5E5E5"> and you know if you do that what</font>

373
00:22:34,760 --> 00:22:39,050
it's going to do is it's<font color="#E5E5E5"> going to print</font>

374
00:22:35,960 --> 00:22:42,550
out hello world to the screen and<font color="#E5E5E5"> then</font>

375
00:22:39,050 --> 00:22:42,550
return<font color="#CCCCCC"> back</font><font color="#E5E5E5"> I Oh</font>

376
00:22:45,380 --> 00:22:56,190
<font color="#E5E5E5">okay so if we go that may method</font><font color="#CCCCCC"> we say</font>

377
00:22:50,159 --> 00:23:00,270
<font color="#E5E5E5">okay I want</font><font color="#CCCCCC"> to use a a function and I</font>

378
00:22:56,190 --> 00:23:02,610
want to return<font color="#CCCCCC"> a value and story when</font>

379
00:23:00,270 --> 00:23:04,590
you're using<font color="#E5E5E5"> when you're pulling a value</font>

380
00:23:02,610 --> 00:23:08,719
from a function that<font color="#E5E5E5"> returns a lot at</font>

381
00:23:04,590 --> 00:23:14,158
type you'll have to use this arrow

382
00:23:08,720 --> 00:23:18,899
<font color="#E5E5E5">looking operator and you can just just</font>

383
00:23:14,159 --> 00:23:22,250
write the value or<font color="#CCCCCC"> the name of the</font><font color="#E5E5E5"> of</font>

384
00:23:18,899 --> 00:23:25,770
<font color="#E5E5E5">the time it was stored it and you just</font>

385
00:23:22,250 --> 00:23:27,990
call the function and you'll<font color="#E5E5E5"> get back</font><font color="#CCCCCC"> to</font>

386
00:23:25,770 --> 00:23:30,389
the zone<font color="#E5E5E5"> but</font><font color="#CCCCCC"> when you want</font><font color="#E5E5E5"> to pull</font><font color="#CCCCCC"> it</font>

387
00:23:27,990 --> 00:23:33,090
value from<font color="#E5E5E5"> a pure I'm going to add</font>

388
00:23:30,390 --> 00:23:39,570
non-suspect function<font color="#CCCCCC"> you used to let</font>

389
00:23:33,090 --> 00:23:42,360
keyword and<font color="#E5E5E5"> say you say let the variable</font>

390
00:23:39,570 --> 00:23:52,610
name and then you call the function that

391
00:23:42,360 --> 00:23:52,610
<font color="#E5E5E5">way so first example have a menu display</font>

392
00:24:46,780 --> 00:24:57,030
okay so right here<font color="#CCCCCC"> what</font><font color="#E5E5E5"> we're</font><font color="#CCCCCC"> going to</font>

393
00:24:50,680 --> 00:24:57,030
do is that could be different

394
00:25:09,370 --> 00:25:16,659
<font color="#CCCCCC">okay so we have our our main method and</font>

395
00:25:14,800 --> 00:25:20,970
it's<font color="#E5E5E5"> basically just going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> give us a</font>

396
00:25:16,660 --> 00:25:26,950
minute<font color="#CCCCCC"> and right here</font><font color="#E5E5E5"> we have condition</font>

397
00:25:20,970 --> 00:25:32,140
where I say okay if if the input is<font color="#CCCCCC"> H</font>

398
00:25:26,950 --> 00:25:37,270
and print hello world<font color="#E5E5E5"> if it's Q exit if</font>

399
00:25:32,140 --> 00:25:38,950
it's anything<font color="#E5E5E5"> else show the</font><font color="#CCCCCC"> menu</font><font color="#E5E5E5"> and if</font>

400
00:25:37,270 --> 00:25:41,560
you<font color="#E5E5E5"> notice here we're calling managing</font>

401
00:25:38,950 --> 00:25:44,680
and other programming languages this

402
00:25:41,560 --> 00:25:51,490
would be bad practice but a<font color="#E5E5E5"> Haskell</font><font color="#CCCCCC"> this</font>

403
00:25:44,680 --> 00:25:54,300
is normal so we're going to run<font color="#E5E5E5"> that</font><font color="#CCCCCC"> and</font>

404
00:25:51,490 --> 00:25:54,300
see<font color="#CCCCCC"> what happens</font>

405
00:25:56,020 --> 00:26:01,710
so you<font color="#E5E5E5"> just</font><font color="#CCCCCC"> compile it like this</font><font color="#E5E5E5"> you're</font>

406
00:25:59,200 --> 00:26:01,710
just<font color="#CCCCCC"> a man</font>

407
00:26:04,110 --> 00:26:16,049
oops<font color="#E5E5E5"> we have a problem right here and</font>

408
00:26:09,110 --> 00:26:20,699
the condition<font color="#E5E5E5"> we have three items three</font>

409
00:26:16,049 --> 00:26:22,408
lines here<font color="#E5E5E5"> puts the string one you know</font>

410
00:26:20,700 --> 00:26:24,750
we have two of those<font color="#CCCCCC"> and then we're</font>

411
00:26:22,409 --> 00:26:30,299
calling<font color="#CCCCCC"> mannequin what</font><font color="#E5E5E5"> happen is</font>

412
00:26:24,750 --> 00:26:32,700
happening<font color="#E5E5E5"> there</font><font color="#CCCCCC"> is we have several types</font>

413
00:26:30,299 --> 00:26:35,789
that are being that are<font color="#E5E5E5"> pulling back</font>

414
00:26:32,700 --> 00:26:39,000
power saying you can't do that<font color="#CCCCCC"> you can</font>

415
00:26:35,789 --> 00:26:41,519
<font color="#CCCCCC">only when you go off and you execute</font>

416
00:26:39,000 --> 00:26:45,929
these things<font color="#E5E5E5"> I should only be receiving</font>

417
00:26:41,519 --> 00:26:51,630
back in<font color="#E5E5E5"> IR</font><font color="#CCCCCC"> mana</font><font color="#E5E5E5"> and so in which case if</font>

418
00:26:45,929 --> 00:26:58,350
you'll notice we we can't have<font color="#E5E5E5"> three</font>

419
00:26:51,630 --> 00:27:01,080
different<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> pockets executed</font>

420
00:26:58,350 --> 00:27:06,840
underneath the<font color="#CCCCCC"> if state we</font><font color="#E5E5E5"> should only</font>

421
00:27:01,080 --> 00:27:10,439
<font color="#E5E5E5">have</font><font color="#CCCCCC"> warm and so what you</font><font color="#E5E5E5"> can do is you</font>

422
00:27:06,840 --> 00:27:13,439
have<font color="#CCCCCC"> to put into a function up here we</font>

423
00:27:10,440 --> 00:27:14,880
<font color="#E5E5E5">have our</font><font color="#CCCCCC"> hello or function it has all of</font>

424
00:27:13,440 --> 00:27:17,639
those things<font color="#CCCCCC"> that</font><font color="#E5E5E5"> are going to execute</font>

425
00:27:14,880 --> 00:27:24,370
<font color="#E5E5E5">but it's only going to return</font><font color="#CCCCCC"> you have a</font>

426
00:27:17,639 --> 00:27:27,449
<font color="#CCCCCC">month so up down here</font>

427
00:27:24,370 --> 00:27:27,449
<font color="#E5E5E5">Oh function</font>

428
00:27:32,860 --> 00:27:37,289
pilot looks good

429
00:27:37,870 --> 00:27:42,909
now we've got our program so

430
00:27:44,750 --> 00:27:55,230
<font color="#CCCCCC">impress</font><font color="#E5E5E5"> H we get a hello world press Q</font>

431
00:27:51,020 --> 00:27:59,010
<font color="#CCCCCC">with another thing we</font><font color="#E5E5E5"> can do is we have</font>

432
00:27:55,230 --> 00:28:01,470
this<font color="#CCCCCC"> fill</font><font color="#E5E5E5"> about this method here</font><font color="#CCCCCC"> and we</font>

433
00:27:59,010 --> 00:28:04,260
have<font color="#CCCCCC"> Gardens and</font><font color="#E5E5E5"> what guards do is they</font>

434
00:28:01,470 --> 00:28:07,490
act as<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of a switch thing so in all</font>

435
00:28:04,260 --> 00:28:14,360
of<font color="#E5E5E5"> your functions you can put these</font>

436
00:28:07,490 --> 00:28:17,250
<font color="#CCCCCC">pipes</font><font color="#E5E5E5"> here that actives basically it's a</font>

437
00:28:14,360 --> 00:28:19,500
condition we have conditions<font color="#E5E5E5"> all the way</font>

438
00:28:17,250 --> 00:28:22,230
down and then<font color="#E5E5E5"> when we have the square</font>

439
00:28:19,500 --> 00:28:25,470
<font color="#CCCCCC">statement here we can actually define</font>

440
00:28:22,230 --> 00:28:29,220
out other variables that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> need to use</font>

441
00:28:25,470 --> 00:28:31,890
in our conditions in order<font color="#CCCCCC"> to do any</font>

442
00:28:29,220 --> 00:28:33,290
<font color="#E5E5E5">calculations over here so or any</font>

443
00:28:31,890 --> 00:28:36,660
manipulations

444
00:28:33,290 --> 00:28:39,960
<font color="#E5E5E5">so here</font><font color="#CCCCCC"> I've you know I've had</font><font color="#E5E5E5"> it to</font>

445
00:28:36,660 --> 00:28:41,760
parse out<font color="#CCCCCC"> the input and</font><font color="#E5E5E5"> it will do it</font>

446
00:28:39,960 --> 00:28:46,080
exactly<font color="#E5E5E5"> like it was doing</font><font color="#CCCCCC"> before and</font>

447
00:28:41,760 --> 00:28:51,510
then it will tell<font color="#CCCCCC"> us what type of</font><font color="#E5E5E5"> letter</font>

448
00:28:46,080 --> 00:28:54,300
<font color="#CCCCCC">what case was was chosen so in this case</font>

449
00:28:51,510 --> 00:28:56,540
we don't<font color="#CCCCCC"> even need any of these</font>

450
00:28:54,300 --> 00:28:56,540
conditions

451
00:28:58,900 --> 00:29:02,040
we can just<font color="#E5E5E5"> comment</font>

452
00:29:02,860 --> 00:29:06,479
and we can just do a<font color="#E5E5E5"> horse</font>

453
00:29:20,450 --> 00:29:30,350
and so now it does hello world<font color="#E5E5E5"> letter</font>

454
00:29:25,820 --> 00:29:34,210
chosen was a page was lowercase<font color="#CCCCCC"> H</font><font color="#E5E5E5"> an</font>

455
00:29:30,350 --> 00:29:34,209
uppercase H with the implication

456
00:29:42,900 --> 00:29:45,650
<font color="#E5E5E5">okay</font>

457
00:29:48,200 --> 00:29:53,299
so I'd<font color="#E5E5E5"> like</font><font color="#CCCCCC"> to think of</font><font color="#E5E5E5"> my Haskell</font>

458
00:29:51,259 --> 00:29:58,669
programs as<font color="#E5E5E5"> compound words anyway no</font>

459
00:29:53,299 --> 00:30:02,480
would come so basically a comma where

460
00:29:58,669 --> 00:30:05,470
you have a<font color="#E5E5E5"> lot of software development</font>

461
00:30:02,480 --> 00:30:11,299
shops<font color="#CCCCCC"> there like a wall</font><font color="#E5E5E5"> of columns and</font>

462
00:30:05,470 --> 00:30:16,070
each<font color="#E5E5E5"> column is a step and a tax on the</font>

463
00:30:11,299 --> 00:30:20,389
life software life cycle<font color="#E5E5E5"> on its way to</font>

464
00:30:16,070 --> 00:30:26,389
being fully developed<font color="#CCCCCC"> shipped</font><font color="#E5E5E5"> I like to</font>

465
00:30:20,389 --> 00:30:29,988
think<font color="#E5E5E5"> of each column as a as a</font><font color="#CCCCCC"> function</font>

466
00:30:26,389 --> 00:30:37,279
and my sticky note is the type that's

467
00:30:29,989 --> 00:30:40,700
moving through<font color="#E5E5E5"> all the functions</font><font color="#CCCCCC"> so in</font>

468
00:30:37,279 --> 00:30:43,909
this case for<font color="#E5E5E5"> the main method we</font><font color="#CCCCCC"> have an</font>

469
00:30:40,700 --> 00:30:46,100
<font color="#CCCCCC">object of type IO mana</font>

470
00:30:43,909 --> 00:30:48,559
that's<font color="#CCCCCC"> a sticky note and smoothing</font>

471
00:30:46,100 --> 00:30:53,080
through all the instructions all the way

472
00:30:48,559 --> 00:30:53,080
down to the deal<font color="#CCCCCC"> the do statement</font>

473
00:30:56,100 --> 00:31:02,040
<font color="#CCCCCC">goes through that chain of</font><font color="#E5E5E5"> functions</font><font color="#CCCCCC"> and</font>

474
00:30:59,450 --> 00:31:05,010
you know<font color="#CCCCCC"> it can they can go back through</font>

475
00:31:02,040 --> 00:31:08,909
functions it can<font color="#E5E5E5"> it can be a recursion</font>

476
00:31:05,010 --> 00:31:11,910
it can loop through<font color="#E5E5E5"> you know multiple</font>

477
00:31:08,910 --> 00:31:17,550
steps is deep and there's there can be a

478
00:31:11,910 --> 00:31:22,020
<font color="#E5E5E5">control flow for my n64 emulator</font><font color="#CCCCCC"> I'm</font>

479
00:31:17,550 --> 00:31:26,370
<font color="#E5E5E5">sending an object of</font><font color="#CCCCCC"> type device through</font>

480
00:31:22,020 --> 00:31:30,530
all the<font color="#CCCCCC"> functions per each instruction</font>

481
00:31:26,370 --> 00:31:30,530
that's pulled from object of type game

482
00:31:31,880 --> 00:31:36,590
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> so how do i do need tricky stuff</font>

483
00:31:37,730 --> 00:31:46,020
<font color="#CCCCCC">here's an</font><font color="#E5E5E5"> example I want to pull</font><font color="#CCCCCC"> an</font>

484
00:31:41,040 --> 00:31:48,200
<font color="#CCCCCC">argument</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> console</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I want to</font>

485
00:31:46,020 --> 00:31:48,200
use

486
00:32:21,600 --> 00:32:28,010
<font color="#E5E5E5">so here</font>

487
00:32:24,000 --> 00:32:31,560
we're getting system<font color="#CCCCCC"> down environment</font>

488
00:32:28,010 --> 00:32:38,750
<font color="#CCCCCC">where all we have to do for this</font><font color="#E5E5E5"> really</font>

489
00:32:31,560 --> 00:32:39,870
is to using the phone on silent<font color="#CCCCCC"> one</font>

490
00:32:38,750 --> 00:32:45,920
<font color="#CCCCCC">Operator</font>

491
00:32:39,870 --> 00:32:48,689
<font color="#E5E5E5">trying to get all the arguments</font><font color="#CCCCCC"> and then</font>

492
00:32:45,920 --> 00:32:52,530
I'm going<font color="#CCCCCC"> to print</font><font color="#E5E5E5"> them out it's one at</font>

493
00:32:48,690 --> 00:32:55,650
a time<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the screen</font><font color="#E5E5E5"> so if</font><font color="#CCCCCC"> they can be</font>

494
00:32:52,530 --> 00:32:56,850
<font color="#E5E5E5">seen at the console and you</font><font color="#CCCCCC"> know once</font>

495
00:32:55,650 --> 00:33:00,120
they're pulled in you can do anything

496
00:32:56,850 --> 00:33:01,169
<font color="#E5E5E5">with them with this kind of example</font><font color="#CCCCCC"> but</font>

497
00:33:00,120 --> 00:33:04,879
we're just<font color="#CCCCCC"> gonna put</font><font color="#E5E5E5"> them out to the</font>

498
00:33:01,170 --> 00:33:11,820
screen<font color="#CCCCCC"> and as I said earlier we you know</font>

499
00:33:04,880 --> 00:33:19,020
<font color="#E5E5E5">use the map pure function in order</font><font color="#CCCCCC"> to do</font>

500
00:33:11,820 --> 00:33:21,179
a forage<font color="#E5E5E5"> on your care variables in order</font>

501
00:33:19,020 --> 00:33:24,389
<font color="#E5E5E5">to do this for the Monad you need the</font>

502
00:33:21,180 --> 00:33:26,120
map<font color="#E5E5E5"> in function as we're doing</font><font color="#CCCCCC"> it on a</font>

503
00:33:24,390 --> 00:33:29,610
Manhattan<font color="#CCCCCC"> it's not going to be returning</font>

504
00:33:26,120 --> 00:33:34,409
a it's going<font color="#E5E5E5"> to be returning</font><font color="#CCCCCC"> monitoring</font>

505
00:33:29,610 --> 00:33:36,870
<font color="#E5E5E5">and then if you don't want if you want</font>

506
00:33:34,410 --> 00:33:41,760
to<font color="#CCCCCC"> ignore</font><font color="#E5E5E5"> the output you can put an</font>

507
00:33:36,870 --> 00:33:45,030
underscore<font color="#E5E5E5"> after that one of those</font>

508
00:33:41,760 --> 00:33:47,370
things that<font color="#E5E5E5"> took me a lot of googling to</font>

509
00:33:45,030 --> 00:33:51,379
<font color="#CCCCCC">figure out how to</font><font color="#E5E5E5"> get certain things to</font>

510
00:33:47,370 --> 00:33:51,379
work so it's

511
00:33:58,620 --> 00:34:03,408
<font color="#E5E5E5">okay so there were no arguments so</font>

512
00:34:00,929 --> 00:34:03,409
there's no out

513
00:34:07,880 --> 00:34:16,340
<font color="#E5E5E5">and now we have argument 0 1 2</font><font color="#CCCCCC"> & 3 and</font>

514
00:34:12,909 --> 00:34:24,770
you just<font color="#E5E5E5"> even pointing in arguments and</font>

515
00:34:16,340 --> 00:34:28,280
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can use them in a practical another</font>

516
00:34:24,770 --> 00:34:30,969
thing that I wanted to<font color="#CCCCCC"> demonstrate is</font>

517
00:34:28,280 --> 00:34:30,970
how to do

518
00:34:32,159 --> 00:34:35,839
random number generation

519
00:34:46,830 --> 00:34:52,400
so I<font color="#E5E5E5"> built a character generator for</font>

520
00:34:49,679 --> 00:34:52,400
role-playing games

521
00:35:06,820 --> 00:35:19,220
and here I put<font color="#CCCCCC"> it</font>

522
00:35:09,650 --> 00:35:22,960
several different modules<font color="#CCCCCC"> so this is how</font>

523
00:35:19,220 --> 00:35:28,120
you can get<font color="#E5E5E5"> a random number in Haskell</font>

524
00:35:22,960 --> 00:35:34,370
<font color="#CCCCCC">there's a</font><font color="#E5E5E5"> system</font><font color="#CCCCCC"> that random library and</font>

525
00:35:28,120 --> 00:35:38,810
it<font color="#E5E5E5"> uses the using the</font><font color="#CCCCCC"> IO monad we can</font>

526
00:35:34,370 --> 00:35:40,759
pull back<font color="#CCCCCC"> an integer and this is</font>

527
00:35:38,810 --> 00:35:42,920
basically rolling the dice<font color="#E5E5E5"> so this will</font>

528
00:35:40,760 --> 00:35:46,190
<font color="#E5E5E5">you know based on the numbers</font><font color="#CCCCCC"> that go in</font>

529
00:35:42,920 --> 00:35:49,480
I say<font color="#CCCCCC"> passing a zero and an 18</font><font color="#E5E5E5"> and give</font>

530
00:35:46,190 --> 00:35:49,480
me an integer between<font color="#CCCCCC"> zero eight</font>

531
00:35:53,600 --> 00:36:03,440
and so here I've<font color="#CCCCCC"> got different vocations</font>

532
00:35:57,730 --> 00:36:06,880
<font color="#E5E5E5">for</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> character our cleric immunologist</font>

533
00:36:03,440 --> 00:36:10,810
<font color="#CCCCCC">hacker healer</font>

534
00:36:06,880 --> 00:36:17,280
we can get one of<font color="#E5E5E5"> those</font><font color="#CCCCCC"> vocations</font><font color="#E5E5E5"> by its</font>

535
00:36:10,810 --> 00:36:22,270
index and this<font color="#E5E5E5"> returns the the max</font>

536
00:36:17,280 --> 00:36:25,000
complications now this is a module<font color="#CCCCCC"> you</font>

537
00:36:22,270 --> 00:36:29,620
can<font color="#E5E5E5"> make modules</font><font color="#CCCCCC"> put them in</font><font color="#E5E5E5"> here in</font>

538
00:36:25,000 --> 00:36:32,530
your program directory and module is

539
00:36:29,620 --> 00:36:36,880
<font color="#CCCCCC">basically you</font><font color="#E5E5E5"> know like it is in a lot</font>

540
00:36:32,530 --> 00:36:41,320
<font color="#CCCCCC">of languages when do</font><font color="#E5E5E5"> you put the name</font><font color="#CCCCCC"> of</font>

541
00:36:36,880 --> 00:36:43,870
the method<font color="#E5E5E5"> or</font><font color="#CCCCCC"> the value up here</font><font color="#E5E5E5"> the</font>

542
00:36:41,320 --> 00:36:47,100
function or the<font color="#E5E5E5"> or the value up</font><font color="#CCCCCC"> here</font>

543
00:36:43,870 --> 00:36:49,500
then it determines whether it's public

544
00:36:47,100 --> 00:36:53,279
<font color="#CCCCCC">so if you put it in there</font><font color="#E5E5E5"> it's public</font>

545
00:36:49,500 --> 00:36:53,280
everywhere else<font color="#E5E5E5"> it's product</font>

546
00:36:56,670 --> 00:36:59,510
so then

547
00:36:59,630 --> 00:37:07,279
<font color="#CCCCCC">this is the main method I'll generate</font><font color="#E5E5E5"> a</font>

548
00:37:03,569 --> 00:37:10,940
character with you know all the stats

549
00:37:07,279 --> 00:37:10,940
with the dice<font color="#CCCCCC"> rules</font>

550
00:37:25,349 --> 00:37:31,490
and there we go

551
00:37:28,100 --> 00:37:35,000
so we got an elf<font color="#CCCCCC"> it's awful good</font><font color="#E5E5E5"> happens</font>

552
00:37:31,490 --> 00:37:38,649
to<font color="#E5E5E5"> be a communist and he's pretty good</font>

553
00:37:35,000 --> 00:37:43,210
demonologist<font color="#E5E5E5"> he's not very lucky but</font>

554
00:37:38,650 --> 00:37:43,210
he's got pretty decent Americans

555
00:38:00,210 --> 00:38:06,039
<font color="#E5E5E5">okay so</font>

556
00:38:03,339 --> 00:38:06,449
what about event handling and that's to

557
00:38:06,039 --> 00:38:09,249
you

558
00:38:06,449 --> 00:38:11,499
so the like I<font color="#E5E5E5"> said earlier gun the</font>

559
00:38:09,249 --> 00:38:14,468
<font color="#E5E5E5">movement 64</font><font color="#CCCCCC"> plus simulator</font><font color="#E5E5E5"> and I'm</font>

560
00:38:11,499 --> 00:38:19,029
trying to<font color="#E5E5E5"> mimic and Haskell</font><font color="#CCCCCC"> has written</font>

561
00:38:14,469 --> 00:38:26,499
<font color="#CCCCCC">C is sto libraries and handles</font><font color="#E5E5E5"> graphic</font>

562
00:38:19,029 --> 00:38:34,569
<font color="#CCCCCC">and</font><font color="#E5E5E5"> gameplay using us to</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> event</font>

563
00:38:26,499 --> 00:38:41,218
handling is done and you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> they</font>

564
00:38:34,569 --> 00:38:44,288
have their<font color="#E5E5E5"> own event handling in Haskell</font>

565
00:38:41,219 --> 00:38:46,229
<font color="#CCCCCC">from my</font><font color="#E5E5E5"> research seems to be best</font>

566
00:38:44,289 --> 00:38:50,439
achieved using what are called wires

567
00:38:46,229 --> 00:38:54,038
internet wire package if you're using

568
00:38:50,439 --> 00:38:56,678
Haskell<font color="#CCCCCC"> let's say ubuntu like I am you</font>

569
00:38:54,039 --> 00:38:59,109
<font color="#CCCCCC">can just look for that net wire package</font>

570
00:38:56,679 --> 00:39:01,599
is in<font color="#E5E5E5"> the synaptic package manager' and</font>

571
00:38:59,109 --> 00:39:05,140
install it the dead<font color="#E5E5E5"> version and it will</font>

572
00:39:01,599 --> 00:39:09,599
be<font color="#CCCCCC"> available in</font><font color="#E5E5E5"> any of your Haskell</font>

573
00:39:05,140 --> 00:39:09,598
programs<font color="#E5E5E5"> and you go compile</font><font color="#CCCCCC"> it the juice</font>

574
00:39:09,869 --> 00:39:18,549
<font color="#E5E5E5">one thing you want to do when you work</font>

575
00:39:13,900 --> 00:39:23,019
on my<font color="#CCCCCC"> er stuff is brushed up on arrow</font>

576
00:39:18,549 --> 00:39:25,839
syntax<font color="#CCCCCC"> Google Ferreira</font><font color="#E5E5E5"> syntax and read</font>

577
00:39:23,019 --> 00:39:29,890
up on it it will<font color="#E5E5E5"> help you figure out</font>

578
00:39:25,839 --> 00:39:33,130
what is<font color="#CCCCCC"> going on</font><font color="#E5E5E5"> otherwise will be lost</font>

579
00:39:29,890 --> 00:39:34,379
<font color="#E5E5E5">I'm still a little lost on how it all</font>

580
00:39:33,130 --> 00:39:36,479
works

581
00:39:34,380 --> 00:39:41,549
I'm going to show an example<font color="#E5E5E5"> program I</font>

582
00:39:36,479 --> 00:39:44,549
found<font color="#E5E5E5"> online and said this this website</font>

583
00:39:41,549 --> 00:39:45,930
it did not come up<font color="#E5E5E5"> with</font><font color="#CCCCCC"> this code and in</font>

584
00:39:44,549 --> 00:39:48,630
fact I'm trying<font color="#CCCCCC"> to work</font><font color="#E5E5E5"> through it</font>

585
00:39:45,930 --> 00:39:50,969
<font color="#CCCCCC">figure out</font><font color="#E5E5E5"> how to use it and pull it</font>

586
00:39:48,630 --> 00:39:56,690
<font color="#E5E5E5">into what I'm doing but it</font><font color="#CCCCCC"> is a good</font>

587
00:39:50,969 --> 00:39:59,969
<font color="#CCCCCC">demonstration of how</font><font color="#E5E5E5"> to draw a rectangle</font>

588
00:39:56,690 --> 00:40:03,029
<font color="#E5E5E5">and building</font><font color="#CCCCCC"> barracks such that you can</font>

589
00:39:59,969 --> 00:40:05,640
press the left and right keys to move

590
00:40:03,029 --> 00:40:11,150
the<font color="#E5E5E5"> rectangle</font><font color="#CCCCCC"> back and forth across</font><font color="#E5E5E5"> the</font>

591
00:40:05,640 --> 00:40:11,150
<font color="#E5E5E5">screen and screen taking like home or</font>

592
00:40:13,190 --> 00:40:16,190
break

593
00:40:50,590 --> 00:40:54,030
<font color="#E5E5E5">okay so</font>

594
00:40:55,840 --> 00:41:08,580
we are importing the wire<font color="#E5E5E5"> DRS and tax</font>

595
00:41:02,440 --> 00:41:08,580
and the<font color="#CCCCCC"> monitor</font><font color="#E5E5E5"> control those things</font>

596
00:41:09,240 --> 00:41:23,370
<font color="#CCCCCC">we're importing the STL library and the</font>

597
00:41:17,400 --> 00:41:23,370
event handling library for the<font color="#CCCCCC"> Liars</font>

598
00:41:24,090 --> 00:41:27,240
defining out

599
00:41:37,040 --> 00:41:50,500
and then these functions<font color="#E5E5E5"> set up the the</font>

600
00:41:42,290 --> 00:41:50,500
wires set<font color="#CCCCCC"> up our surface</font>

601
00:41:52,660 --> 00:41:55,890
following events

602
00:42:03,990 --> 00:42:14,629
<font color="#CCCCCC">combined all the events and handle</font>

603
00:42:11,630 --> 00:42:14,630
positions

604
00:42:21,509 --> 00:42:24,739
handle<font color="#CCCCCC"> Alto</font>

605
00:42:26,200 --> 00:42:29,609
and<font color="#E5E5E5"> here's our main method</font>

606
00:42:53,510 --> 00:42:58,810
so if you're interested<font color="#CCCCCC"> in us</font><font color="#E5E5E5"> today I'd</font>

607
00:42:55,550 --> 00:42:58,810
recommend going<font color="#E5E5E5"> to that site</font>

608
00:42:59,960 --> 00:43:07,340
I guess<font color="#E5E5E5"> further things they're not going</font>

609
00:43:03,770 --> 00:43:09,170
to<font color="#E5E5E5"> be doing is</font><font color="#CCCCCC"> looking into parallel</font>

610
00:43:07,340 --> 00:43:11,660
concurrent programming in Haskell by

611
00:43:09,170 --> 00:43:18,160
side with<font color="#CCCCCC"> Marlow</font><font color="#E5E5E5"> he is one</font><font color="#CCCCCC"> of the people</font>

612
00:43:11,660 --> 00:43:18,160
<font color="#E5E5E5">who developed it actually actively</font>

613
00:43:18,490 --> 00:43:25,819
develops the Glasgow Haskell compiler<font color="#E5E5E5"> in</font>

614
00:43:22,820 --> 00:43:27,560
Scotland<font color="#E5E5E5"> and so I'm gonna be picking up</font>

615
00:43:25,820 --> 00:43:30,470
that<font color="#E5E5E5"> book and reading through it I want</font>

616
00:43:27,560 --> 00:43:32,330
to put<font color="#CCCCCC"> it</font><font color="#E5E5E5"> out of realist</font><font color="#CCCCCC"> learning you</font>

617
00:43:30,470 --> 00:43:34,759
and Haskell for<font color="#CCCCCC"> a great good is where I</font>

618
00:43:32,330 --> 00:43:36,980
started<font color="#E5E5E5"> learn Haskell</font>

619
00:43:34,760 --> 00:43:40,430
it's an incredibly good resource<font color="#CCCCCC"> it's</font>

620
00:43:36,980 --> 00:43:44,200
free it's on that site learn you in

621
00:43:40,430 --> 00:43:47,480
Haskell<font color="#CCCCCC"> comm</font><font color="#E5E5E5"> I ready to chapter a time</font>

622
00:43:44,200 --> 00:43:49,730
and just did<font color="#E5E5E5"> everything in the chapter</font>

623
00:43:47,480 --> 00:43:52,460
<font color="#E5E5E5">if I didn't understand</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> I just</font>

624
00:43:49,730 --> 00:43:54,200
<font color="#E5E5E5">kept read it's a very important thing to</font>

625
00:43:52,460 --> 00:43:59,540
<font color="#CCCCCC">do with hospital don't</font><font color="#E5E5E5"> sit there and</font>

626
00:43:54,200 --> 00:44:01,819
<font color="#E5E5E5">just chew</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> just keep going</font><font color="#CCCCCC"> a split</font><font color="#E5E5E5"> up</font>

627
00:43:59,540 --> 00:44:08,360
board has a whole ton of good resources

628
00:44:01,820 --> 00:44:10,670
listed out<font color="#E5E5E5"> Google as on</font><font color="#CCCCCC"> pass code</font><font color="#E5E5E5"> or so</font>

629
00:44:08,360 --> 00:44:12,710
has called a Doric<font color="#CCCCCC"> slash Google is a</font>

630
00:44:10,670 --> 00:44:16,280
house for reference search engine so

631
00:44:12,710 --> 00:44:19,610
<font color="#E5E5E5">anything you know compiler blows up and</font>

632
00:44:16,280 --> 00:44:21,800
says something<font color="#CCCCCC"> crazy</font><font color="#E5E5E5"> and you don't</font>

633
00:44:19,610 --> 00:44:25,460
really know what it's telling you I've

634
00:44:21,800 --> 00:44:29,200
been<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> Google</font><font color="#E5E5E5"> and you know it's</font>

635
00:44:25,460 --> 00:44:29,200
it's very<font color="#E5E5E5"> easy to get</font><font color="#CCCCCC"> the answer</font>

636
00:44:29,460 --> 00:44:37,420
the for those who are interested<font color="#E5E5E5"> in the</font>

637
00:44:34,930 --> 00:44:39,040
movement<font color="#E5E5E5"> demo showed there's also</font>

638
00:44:37,420 --> 00:44:41,800
another resource that<font color="#CCCCCC"> I found</font><font color="#E5E5E5"> called</font>

639
00:44:39,040 --> 00:44:43,840
getting<font color="#E5E5E5"> started</font><font color="#CCCCCC"> with that learn STL it</font>

640
00:44:41,800 --> 00:44:48,880
explains a lot<font color="#CCCCCC"> of what's in the minimum</font>

641
00:44:43,840 --> 00:44:54,510
<font color="#E5E5E5">game logic tutorial</font><font color="#CCCCCC"> and how it works</font>

642
00:44:48,880 --> 00:44:54,510
is code examples don't they don't<font color="#E5E5E5"> know</font>

643
00:44:55,020 --> 00:45:04,150
but<font color="#E5E5E5"> this</font><font color="#CCCCCC"> explanation of</font><font color="#E5E5E5"> how it</font><font color="#CCCCCC"> all works</font>

644
00:44:59,110 --> 00:45:08,380
is<font color="#E5E5E5"> pretty good</font><font color="#CCCCCC"> so I guess that's about</font>

645
00:45:04,150 --> 00:45:10,800
<font color="#E5E5E5">all</font><font color="#CCCCCC"> I've got thanks for coming as</font><font color="#E5E5E5"> anyone</font>

646
00:45:08,380 --> 00:45:10,800
have any questions

