1
00:00:02,740 --> 00:00:04,940
[Applause]

2
00:00:04,940 --> 00:00:08,429
thank you for the introduction okay yes

3
00:00:08,429 --> 00:00:11,610
so I'm talking today about multimedia

4
00:00:11,610 --> 00:00:15,299
fun fun is like fun for coders so not

5
00:00:15,299 --> 00:00:18,690
actual like jokes or anything and yeah

6
00:00:18,690 --> 00:00:21,180
was already introduced I'm hosting bit

7
00:00:21,180 --> 00:00:23,420
Loney's lab I'm doing that full-time and

8
00:00:23,420 --> 00:00:26,939
yeah behind the goofy faces there's

9
00:00:26,939 --> 00:00:30,510
quite a lot of actual valuable content

10
00:00:30,510 --> 00:00:33,030
probably and I hope you enjoy it as well

11
00:00:33,030 --> 00:00:35,370
if you don't know my channel yet please

12
00:00:35,370 --> 00:00:39,809
check it out okay so I have like 60

13
00:00:39,809 --> 00:00:42,030
slides only 30 minutes and I planned

14
00:00:42,030 --> 00:00:44,340
like 1 hour and I've only 30 minutes to

15
00:00:44,340 --> 00:00:48,360
talk so let's do it quick who of you

16
00:00:48,360 --> 00:00:51,149
knows they used to be 32 okay everyone

17
00:00:51,149 --> 00:00:53,460
so you don't need you don't need that

18
00:00:53,460 --> 00:00:56,160
much introduction into that one so it's

19
00:00:56,160 --> 00:01:00,379
a successor of the esp8266 and 32-bit

20
00:01:00,379 --> 00:01:03,719
process of dual core and has an

21
00:01:03,719 --> 00:01:06,030
additional core so it's three core so

22
00:01:06,030 --> 00:01:08,600
this ultra low power coprocessor

23
00:01:08,600 --> 00:01:12,780
it's actually a three core system on

24
00:01:12,780 --> 00:01:16,140
chip and the main course can go up to

25
00:01:16,140 --> 00:01:18,990
240 megahertz that's quite quick so you

26
00:01:18,990 --> 00:01:22,290
can do a lot of stuff on that and we got

27
00:01:22,290 --> 00:01:25,110
an Arduino extension so then the bots

28
00:01:25,110 --> 00:01:27,600
manager you can add it like a link and

29
00:01:27,600 --> 00:01:30,780
use it with the Arduino IDE so it's

30
00:01:30,780 --> 00:01:32,610
quite convenient to get started with

31
00:01:32,610 --> 00:01:36,990
with that and there are some key

32
00:01:36,990 --> 00:01:41,600
features that that is outstanding as a

33
00:01:41,600 --> 00:01:46,430
microcontroller so we get like 520

34
00:01:46,430 --> 00:01:51,149
kilobytes of SRAM and that's that's

35
00:01:51,149 --> 00:01:53,310
quite a lot that's a lot more more than

36
00:01:53,310 --> 00:01:55,890
every other micro processor and you can

37
00:01:55,890 --> 00:01:59,159
get and debt in in this price range and

38
00:01:59,159 --> 00:02:01,200
what we have at the end is like 200

39
00:02:01,200 --> 00:02:05,280
kilobytes left in the Arduino because we

40
00:02:05,280 --> 00:02:11,750
have like only 360 for data and so the

41
00:02:11,750 --> 00:02:15,740
the coat is like loaded from from the

42
00:02:15,740 --> 00:02:18,990
from the flash into a portion of the RAM

43
00:02:18,990 --> 00:02:21,540
so and there's a Bluetooth stack and

44
00:02:21,540 --> 00:02:24,330
Wi-Fi stack and we have like 200

45
00:02:24,330 --> 00:02:26,760
kilobytes left and we can work with that

46
00:02:26,760 --> 00:02:29,550
so there's plenty of room for frame of

47
00:02:29,550 --> 00:02:34,500
us and we get ton of peripherals and two

48
00:02:34,500 --> 00:02:37,410
of the most interesting ones for our for

49
00:02:37,410 --> 00:02:40,050
us is right now the 2 I squared s

50
00:02:40,050 --> 00:02:43,890
channels and they have DMA capabilities

51
00:02:43,890 --> 00:02:47,850
of course and to digital to analog

52
00:02:47,850 --> 00:02:51,090
converters that are built-in so let's

53
00:02:51,090 --> 00:02:54,630
talk about I squared s and D ma it does

54
00:02:54,630 --> 00:02:58,590
the data transfer without any cpu so you

55
00:02:58,590 --> 00:03:00,660
can just set it up and it will do it

56
00:03:00,660 --> 00:03:04,530
where it's working behind the scenes and

57
00:03:04,530 --> 00:03:08,130
you can achieve with that like 32

58
00:03:08,130 --> 00:03:10,860
two-bit samples like 10 mega samples a

59
00:03:10,860 --> 00:03:13,739
second 16-bit like twice as much and up

60
00:03:13,739 --> 00:03:17,310
to 40 mega samples a second 8 in the

61
00:03:17,310 --> 00:03:18,630
8-bit mode which is only available

62
00:03:18,630 --> 00:03:20,900
unfortunately in the second channel and

63
00:03:20,900 --> 00:03:23,220
yeah we have two modes serial and

64
00:03:23,220 --> 00:03:27,239
parallel mode and we can directly access

65
00:03:27,239 --> 00:03:30,540
the digital to analog converters using

66
00:03:30,540 --> 00:03:34,200
the first channel we have also the

67
00:03:34,200 --> 00:03:37,070
convenience of using GPIO metrics to

68
00:03:37,070 --> 00:03:41,790
connect like any any output of the I

69
00:03:41,790 --> 00:03:45,200
squared s like that parallel data lines

70
00:03:45,200 --> 00:03:48,950
to any output pin on the microcontroller

71
00:03:48,950 --> 00:03:53,130
so let's talk about a bandwidth a bit we

72
00:03:53,130 --> 00:03:56,519
need to set up a clock so this is how

73
00:03:56,519 --> 00:03:59,610
like the block diagram of the clock

74
00:03:59,610 --> 00:04:03,480
looks for the I squared s and we we take

75
00:04:03,480 --> 00:04:07,320
like two different clocks and PLL / -

76
00:04:07,320 --> 00:04:10,739
it's like the main clock which is 80

77
00:04:10,739 --> 00:04:13,440
megahertz and that's divided by 2 we get

78
00:04:13,440 --> 00:04:15,780
like 40 40 in and then you have like

79
00:04:15,780 --> 00:04:18,630
nasty dividers here and you usually

80
00:04:18,630 --> 00:04:22,070
don't want that so why why why should I

81
00:04:22,070 --> 00:04:25,840
divided the clock i need plenty of power

82
00:04:25,840 --> 00:04:29,620
and plenty of speed so we want to get

83
00:04:29,620 --> 00:04:32,580
this as low as possible so and

84
00:04:32,580 --> 00:04:36,220
unfortunately we yeah oh I didn't tell

85
00:04:36,220 --> 00:04:39,250
that yeah for video we need like 12 mega

86
00:04:39,250 --> 00:04:43,389
samples so like this okay sorry I was

87
00:04:43,389 --> 00:04:46,870
confused for a second and yeah so we

88
00:04:46,870 --> 00:04:49,720
want that clock to be really fast so but

89
00:04:49,720 --> 00:04:52,240
I will talk about it in a moment

90
00:04:52,240 --> 00:04:54,280
so what do they are analog digital

91
00:04:54,280 --> 00:04:55,240
converter

92
00:04:55,240 --> 00:04:57,940
do they convert like simply digital

93
00:04:57,940 --> 00:05:01,720
values to analog voltages so we get like

94
00:05:01,720 --> 00:05:05,080
between 0 and 3.3 volts anything we want

95
00:05:05,080 --> 00:05:08,410
and we can use like 8 bits because

96
00:05:08,410 --> 00:05:10,510
because they're built in and X are 8

97
00:05:10,510 --> 00:05:12,400
bits and usually they're like

98
00:05:12,400 --> 00:05:14,770
implemented on resistor letters and they

99
00:05:14,770 --> 00:05:17,139
have like an additional buffers like an

100
00:05:17,139 --> 00:05:20,350
op-amp to to get like good impedance or

101
00:05:20,350 --> 00:05:24,699
something so let's talk about audio so

102
00:05:24,699 --> 00:05:28,510
let's start with that we have to digital

103
00:05:28,510 --> 00:05:30,550
a lot of converters and we can do likes

104
00:05:30,550 --> 00:05:33,460
tirion that and we can do that also

105
00:05:33,460 --> 00:05:35,830
about I squared s we can access them

106
00:05:35,830 --> 00:05:39,430
directly by our registers and what has

107
00:05:39,430 --> 00:05:41,650
been done with that is like internet

108
00:05:41,650 --> 00:05:45,310
radio already by other people and mp3

109
00:05:45,310 --> 00:05:48,820
player but I will not show that here

110
00:05:48,820 --> 00:05:52,510
because I want to show my stuff and so I

111
00:05:52,510 --> 00:05:55,360
did like a super simple AM radio

112
00:05:55,360 --> 00:05:58,660
broadcast we have like super super fast

113
00:05:58,660 --> 00:06:01,570
I squared s output with digital

114
00:06:01,570 --> 00:06:04,560
conversion and I littles like

115
00:06:04,560 --> 00:06:06,849
implementation of like a sound engine

116
00:06:06,849 --> 00:06:11,680
that I certainly and you can use that

117
00:06:11,680 --> 00:06:14,830
already to like play waves and and since

118
00:06:14,830 --> 00:06:17,800
and and so on we haven't used it that

119
00:06:17,800 --> 00:06:22,030
much but yet but I have several projects

120
00:06:22,030 --> 00:06:24,970
that I might show so let's start with

121
00:06:24,970 --> 00:06:30,010
the ma radio so it's quite simple hope

122
00:06:30,010 --> 00:06:34,930
that plays yeah so simple setup we have

123
00:06:34,930 --> 00:06:37,930
here this this this jumper wire that's

124
00:06:37,930 --> 00:06:39,190
our antenna and

125
00:06:39,190 --> 00:06:41,650
I actually I connected even the probe so

126
00:06:41,650 --> 00:06:43,930
yeah that the length of the antenna

127
00:06:43,930 --> 00:06:46,870
isn't that long but the distance that we

128
00:06:46,870 --> 00:06:50,740
have to to get to the receiver is is not

129
00:06:50,740 --> 00:06:55,470
that far as well so that should work and

130
00:06:56,550 --> 00:06:59,530
so you can see this is this is our base

131
00:06:59,530 --> 00:07:02,820
frequency of 800 kilohertz around and

132
00:07:02,820 --> 00:07:08,650
then we can do a lot of stuff like small

133
00:07:08,650 --> 00:07:18,310
gadget or troll grandmother's or

134
00:07:18,310 --> 00:07:22,690
something so yeah quite it's a neat

135
00:07:22,690 --> 00:07:24,730
project you can you just need to connect

136
00:07:24,730 --> 00:07:29,320
a wire to a pin and you have any a me AM

137
00:07:29,320 --> 00:07:32,350
radio transmitter so another project

138
00:07:32,350 --> 00:07:38,560
that used sound and in this case I used

139
00:07:38,560 --> 00:07:40,480
to I squared as only for the RGB LEDs

140
00:07:40,480 --> 00:07:43,090
but we will get to that later and we

141
00:07:43,090 --> 00:07:45,970
just take that that's lights lightsaber

142
00:07:45,970 --> 00:07:49,300
so and when you will that you want at

143
00:07:49,300 --> 00:07:51,669
that cool wielding that that noise that

144
00:07:51,669 --> 00:07:54,970
hum and we can can take like gyroscope

145
00:07:54,970 --> 00:07:57,760
input and take the angular velocity and

146
00:07:57,760 --> 00:08:00,100
synthesize like a cool hum that that's

147
00:08:00,100 --> 00:08:03,310
actually synced with with what you are

148
00:08:03,310 --> 00:08:06,880
doing so so the engine looks like like

149
00:08:06,880 --> 00:08:09,310
that somehow so the timer just writes

150
00:08:09,310 --> 00:08:10,840
the digital to analog converter and

151
00:08:10,840 --> 00:08:12,580
takes like the samples from the mixed

152
00:08:12,580 --> 00:08:15,340
buffer and we have like sound objects at

153
00:08:15,340 --> 00:08:17,770
playing at their speed but we can also

154
00:08:17,770 --> 00:08:20,950
put in like a simple object that we can

155
00:08:20,950 --> 00:08:24,460
implement and do like synthesis and

156
00:08:24,460 --> 00:08:27,310
inside of it so we I just I just used

157
00:08:27,310 --> 00:08:30,220
like audacity and took like a hump from

158
00:08:30,220 --> 00:08:33,429
the movie and analyze which which major

159
00:08:33,429 --> 00:08:36,130
frequencies are appearing in this and I

160
00:08:36,130 --> 00:08:39,669
just take the base frequencies and yeah

161
00:08:39,669 --> 00:08:42,400
and then like this the simple class just

162
00:08:42,400 --> 00:08:44,260
takes the next that the sound engine

163
00:08:44,260 --> 00:08:46,960
takes the next sample and this is simply

164
00:08:46,960 --> 00:08:49,000
synthesized in here so this is a basic

165
00:08:49,000 --> 00:08:51,190
synthesizer and what we get in the end

166
00:08:51,190 --> 00:08:52,510
is like the

167
00:08:52,510 --> 00:09:02,350
lightsaber yeah so so yeah I did that

168
00:09:02,350 --> 00:09:03,910
for Electra maker so this is

169
00:09:03,910 --> 00:09:05,949
unfortunately not on my channel but it

170
00:09:05,949 --> 00:09:07,930
was nevertheless one of my close project

171
00:09:07,930 --> 00:09:09,010
I think so

172
00:09:09,010 --> 00:09:11,560
we had like when when opening when when

173
00:09:11,560 --> 00:09:13,839
turning it on it was like a sample plate

174
00:09:13,839 --> 00:09:16,389
and turning off it was also a sample but

175
00:09:16,389 --> 00:09:18,430
the wielding sound was actually

176
00:09:18,430 --> 00:09:21,790
synthesized in real time on the SP 32 so

177
00:09:21,790 --> 00:09:26,440
you probably were thinking okay yeah you

178
00:09:26,440 --> 00:09:30,790
like the timer and 22 to like kilo

179
00:09:30,790 --> 00:09:34,930
samples a second that's like you call it

180
00:09:34,930 --> 00:09:37,060
quite often and you have to do that like

181
00:09:37,060 --> 00:09:39,760
that it's maybe taking too much too much

182
00:09:39,760 --> 00:09:42,250
too much power or interrupting too too

183
00:09:42,250 --> 00:09:45,519
often so I tried so maybe we can utilize

184
00:09:45,519 --> 00:09:47,470
this ultra low power coprocessor yeah it

185
00:09:47,470 --> 00:09:52,300
has like four four kilobyte of of RAM

186
00:09:52,300 --> 00:09:54,040
that you can use for data and code and

187
00:09:54,040 --> 00:09:58,810
you can access this directly from from

188
00:09:58,810 --> 00:10:01,180
the other course and I thought okay

189
00:10:01,180 --> 00:10:05,079
maybe we can yeah the actual frequency

190
00:10:05,079 --> 00:10:08,139
of that core is eight megahertz which is

191
00:10:08,139 --> 00:10:11,199
quite fast so that was like an older

192
00:10:11,199 --> 00:10:15,190
eighty tiny in full speed so but we have

193
00:10:15,190 --> 00:10:17,470
to it's almost it's around eight

194
00:10:17,470 --> 00:10:19,269
megahertz so we have to measure the

195
00:10:19,269 --> 00:10:21,730
actual frequency but actually the API

196
00:10:21,730 --> 00:10:24,970
give us the the functions to do that so

197
00:10:24,970 --> 00:10:27,760
we can while initializing it we can

198
00:10:27,760 --> 00:10:30,339
measure the actual frequency of the of

199
00:10:30,339 --> 00:10:35,980
the coprocessor and then we can set the

200
00:10:35,980 --> 00:10:40,839
delays in the code of the coprocessor to

201
00:10:40,839 --> 00:10:44,680
match our actual frequency that we want

202
00:10:44,680 --> 00:10:47,319
to have so we want the processor at the

203
00:10:47,319 --> 00:10:50,050
qu processor to put out the samples at

204
00:10:50,050 --> 00:10:52,510
the rate and an actual rate of 22

205
00:10:52,510 --> 00:10:54,399
kilohertz or something so and that's

206
00:10:54,399 --> 00:10:55,779
actually it's achievable

207
00:10:55,779 --> 00:10:58,779
the the the instruction set is really

208
00:10:58,779 --> 00:11:01,449
low but you can access the decorous it

209
00:11:01,449 --> 00:11:04,269
registers but yeah unfortunately only

210
00:11:04,269 --> 00:11:06,350
with fixed values so you can't low

211
00:11:06,350 --> 00:11:09,290
like a bite from a buffer and write it

212
00:11:09,290 --> 00:11:11,330
to the deck you have to write like a

213
00:11:11,330 --> 00:11:15,020
certain value so but okay yeah we can

214
00:11:15,020 --> 00:11:19,030
work with that we just make a huge huge

215
00:11:19,030 --> 00:11:23,270
switch yeah that's in C++ but we did an

216
00:11:23,270 --> 00:11:27,140
assembly so I I wrote like generator

217
00:11:27,140 --> 00:11:29,990
like with a loop the assembly code in

218
00:11:29,990 --> 00:11:33,650
that that actually writes 0 writes 1 and

219
00:11:33,650 --> 00:11:36,770
then after that always a jump back so we

220
00:11:36,770 --> 00:11:38,900
have like a jump jump to the we can

221
00:11:38,900 --> 00:11:41,840
calculate the offset jump there write

222
00:11:41,840 --> 00:11:44,030
the value and jump back so yeah that

223
00:11:44,030 --> 00:11:46,850
takes a lot of our 8 kilobytes but still

224
00:11:46,850 --> 00:11:49,130
we have like 4 kilobytes left for for

225
00:11:49,130 --> 00:11:53,270
our samples and then yeah that's quite

226
00:11:53,270 --> 00:11:56,840
cool because then we we don't have to

227
00:11:56,840 --> 00:12:00,290
like use the interrupts for like 20

228
00:12:00,290 --> 00:12:03,490
thousand times a second we can just let

229
00:12:03,490 --> 00:12:06,850
the ultra-low power processor act like a

230
00:12:06,850 --> 00:12:11,000
small sound sound processor so how about

231
00:12:11,000 --> 00:12:15,770
video umm yeah sure can we do digital

232
00:12:15,770 --> 00:12:19,490
video with the SP 32 yeah 50 this place

233
00:12:19,490 --> 00:12:21,410
I've been done that was one of the first

234
00:12:21,410 --> 00:12:24,830
example projects and even I Scott S has

235
00:12:24,830 --> 00:12:27,320
this LCD mode so the parallel mode is

236
00:12:27,320 --> 00:12:29,210
called a CD mode and in the

237
00:12:29,210 --> 00:12:31,550
documentation so that has been done I

238
00:12:31,550 --> 00:12:34,340
don't have to cover that and how about

239
00:12:34,340 --> 00:12:38,410
DVI HDMI oh yeah that could it's hard I

240
00:12:38,410 --> 00:12:43,430
would say no but I already I also said

241
00:12:43,430 --> 00:12:47,030
that about Paul color and actually it

242
00:12:47,030 --> 00:12:50,450
worked after all so yeah but it's quite

243
00:12:50,450 --> 00:12:52,130
hard to achieve you have like an

244
00:12:52,130 --> 00:12:55,790
differential TMDs signal with the lowest

245
00:12:55,790 --> 00:12:59,630
resolution of VGA needs 25 megahertz and

246
00:12:59,630 --> 00:13:02,510
this times 10 bits since this is a

247
00:13:02,510 --> 00:13:06,910
serial protocol so you would need like

248
00:13:06,910 --> 00:13:11,210
250 megahertz clock on that so that's

249
00:13:11,210 --> 00:13:13,250
unfortunately not achievable since the

250
00:13:13,250 --> 00:13:15,620
GPIO metrics of the I squared s works

251
00:13:15,620 --> 00:13:20,060
only with maximum of 40 megahertz

252
00:13:20,060 --> 00:13:23,420
okay yeah okay LED matrices we can do

253
00:13:23,420 --> 00:13:27,680
that so we can use simply neopixels we

254
00:13:27,680 --> 00:13:29,780
have seen this in the lightsaber project

255
00:13:29,780 --> 00:13:33,920
already and yeah I call it the serial

256
00:13:33,920 --> 00:13:37,400
moss protocol so Charles have shown that

257
00:13:37,400 --> 00:13:42,890
before and we can use I squared 0 mode

258
00:13:42,890 --> 00:13:47,420
for that and the DMA transfer issues a

259
00:13:47,420 --> 00:13:50,660
perfect timing so with the real-time

260
00:13:50,660 --> 00:13:55,850
operating system of from of the SP 32 we

261
00:13:55,850 --> 00:13:57,950
get often problems with with the timing

262
00:13:57,950 --> 00:14:02,990
since it's like test based system but

263
00:14:02,990 --> 00:14:06,230
the transfer via DMA asurs we get like

264
00:14:06,230 --> 00:14:09,920
the actual at timing that we need and

265
00:14:09,920 --> 00:14:12,320
but we also need the gamma correction

266
00:14:12,320 --> 00:14:14,090
that's really important if you want to

267
00:14:14,090 --> 00:14:16,960
display like actual images because then

268
00:14:16,960 --> 00:14:20,720
the you get like nasty color shifts you

269
00:14:20,720 --> 00:14:24,050
have like a lot of of red and a little

270
00:14:24,050 --> 00:14:26,300
bit of blue and a little bit of green

271
00:14:26,300 --> 00:14:29,420
but the little bits of blue and green is

272
00:14:29,420 --> 00:14:31,640
so bright you get like a pink instead of

273
00:14:31,640 --> 00:14:35,080
red so you need to gamma correction and

274
00:14:35,080 --> 00:14:37,070
yeah how do you do this

275
00:14:37,070 --> 00:14:42,350
so it shows you that that's a little bit

276
00:14:42,350 --> 00:14:44,780
familiar isn't it if you have seen

277
00:14:44,780 --> 00:14:46,910
Charles Charles talk before on loads

278
00:14:46,910 --> 00:14:49,310
yeah that's actually what I did as well

279
00:14:49,310 --> 00:14:55,520
but I did like that's 32 bits wide and I

280
00:14:55,520 --> 00:15:00,920
have like not not and it's like 256

281
00:15:00,920 --> 00:15:04,400
values so I convert directly RGB or BGR

282
00:15:04,400 --> 00:15:08,840
or always this confusion I convert it

283
00:15:08,840 --> 00:15:11,960
and then write 2 bytes and the gamma

284
00:15:11,960 --> 00:15:13,970
correction you can even count it in that

285
00:15:13,970 --> 00:15:16,310
loot but that's an older implementation

286
00:15:16,310 --> 00:15:19,160
that didn't have have that yet but my

287
00:15:19,160 --> 00:15:23,750
LED wall did the test so let's take a

288
00:15:23,750 --> 00:15:27,640
look how that looks so you can do

289
00:15:27,640 --> 00:15:30,980
procedural graphics that works nice that

290
00:15:30,980 --> 00:15:34,310
our point I 11.2

291
00:15:34,310 --> 00:15:37,190
okay addressable LEDs and you can even

292
00:15:37,190 --> 00:15:40,580
use like espeak em and transfer via UDP

293
00:15:40,580 --> 00:15:44,540
packets the video from another ESP over

294
00:15:44,540 --> 00:15:46,580
Wi-Fi it's a little bit choppy but it

295
00:15:46,580 --> 00:15:49,610
works okay the Beamer doesn't show it

296
00:15:49,610 --> 00:15:52,640
well but yeah you can transfer video and

297
00:15:52,640 --> 00:15:56,660
and display it on the LED wall so that's

298
00:15:56,660 --> 00:16:01,160
great so that's how we covered digital

299
00:16:01,160 --> 00:16:04,070
video okay let's try the analog video

300
00:16:04,070 --> 00:16:08,450
now and that's the interesting simple

301
00:16:08,450 --> 00:16:10,220
vector display on the oscilloscope all

302
00:16:10,220 --> 00:16:12,470
school and it's super cool you have to

303
00:16:12,470 --> 00:16:15,560
do that we will and then we can do

304
00:16:15,560 --> 00:16:18,880
composite video and that works as well I

305
00:16:18,880 --> 00:16:21,560
didn't manage to get NCC color running

306
00:16:21,560 --> 00:16:24,460
so you have to take Charles code N and

307
00:16:24,460 --> 00:16:27,500
but we can also do VGA that's a little

308
00:16:27,500 --> 00:16:28,970
bit more problematic since you need to

309
00:16:28,970 --> 00:16:30,950
treat the drill to another converters

310
00:16:30,950 --> 00:16:33,860
for the three color components but we

311
00:16:33,860 --> 00:16:35,480
can do that with external resistor

312
00:16:35,480 --> 00:16:38,960
letters or we can just use one bit per

313
00:16:38,960 --> 00:16:43,190
color for the color component so yeah as

314
00:16:43,190 --> 00:16:45,260
mentioned a Charles did that were on the

315
00:16:45,260 --> 00:16:48,020
ESP 32 which was super impressive and I

316
00:16:48,020 --> 00:16:50,630
just understand what how he did that

317
00:16:50,630 --> 00:16:54,170
yesterday when he that has rehearsal and

318
00:16:54,170 --> 00:16:56,690
I was surprised that it's quite similar

319
00:16:56,690 --> 00:17:00,440
to what I did at the end so let's let's

320
00:17:00,440 --> 00:17:03,260
take a look first at the vector display

321
00:17:03,260 --> 00:17:06,980
so if you have like an super old school

322
00:17:06,980 --> 00:17:09,530
analog oscilloscope keep it yeah they're

323
00:17:09,530 --> 00:17:11,540
doing really good graphics I don't have

324
00:17:11,540 --> 00:17:14,720
a video on oscilloscope I forgot to

325
00:17:14,720 --> 00:17:18,500
somehow take it with me but I can show

326
00:17:18,500 --> 00:17:21,109
some footage of digital one so you

327
00:17:21,109 --> 00:17:25,010
connect probes super easy GPIO 25 and 26

328
00:17:25,010 --> 00:17:27,189
other digital to analog converters and

329
00:17:27,189 --> 00:17:31,190
you set your scope to XY mode okay yeah

330
00:17:31,190 --> 00:17:34,880
that's what we did and then you can use

331
00:17:34,880 --> 00:17:37,300
on digital scope you you need to trigger

332
00:17:37,300 --> 00:17:39,770
because then you get yet like your

333
00:17:39,770 --> 00:17:43,220
display frames will be like shifted and

334
00:17:43,220 --> 00:17:46,160
it's it doesn't look good but you can

335
00:17:46,160 --> 00:17:47,809
use a trigger you can

336
00:17:47,809 --> 00:17:51,320
we send like on X or Y you can use like

337
00:17:51,320 --> 00:17:54,019
a high value and use that actually as a

338
00:17:54,019 --> 00:17:56,269
trigger so you can have the start of

339
00:17:56,269 --> 00:18:00,049
your frame then you need like to set the

340
00:18:00,049 --> 00:18:02,330
memory depth so to a lower value not

341
00:18:02,330 --> 00:18:05,149
high memory values that don't work well

342
00:18:05,149 --> 00:18:08,570
with digital scopes with as a vector

343
00:18:08,570 --> 00:18:10,999
display and you need to set up your time

344
00:18:10,999 --> 00:18:14,090
frame and and then actually yeah

345
00:18:14,090 --> 00:18:17,330
duration is equals bright brightness so

346
00:18:17,330 --> 00:18:21,969
if you keep a point at at one keep like

347
00:18:21,969 --> 00:18:24,799
center point repeatedly it will get

348
00:18:24,799 --> 00:18:28,009
brighter even on the digital scope so

349
00:18:28,009 --> 00:18:30,169
what you do what do you do when you have

350
00:18:30,169 --> 00:18:33,469
like a graphics system implemented yeah

351
00:18:33,469 --> 00:18:37,009
you do like 3d engine yeah or or even a

352
00:18:37,009 --> 00:18:41,349
camera input so back then the cameras

353
00:18:41,349 --> 00:18:44,299
one of the cheapest ones now you have

354
00:18:44,299 --> 00:18:47,389
ESP cam which is super cool module yeah

355
00:18:47,389 --> 00:18:50,809
so how let's take on a short video on

356
00:18:50,809 --> 00:18:53,570
that so real time yeah you can use a

357
00:18:53,570 --> 00:18:56,089
scan of yourself that you have done with

358
00:18:56,089 --> 00:18:58,989
Kinect so like display a point cloud

359
00:18:58,989 --> 00:19:01,789
here that's also a point cloud of some

360
00:19:01,789 --> 00:19:04,489
Stanford and even like wireframes it

361
00:19:04,489 --> 00:19:06,409
doesn't look that well on that scope

362
00:19:06,409 --> 00:19:09,289
yeah but real-time camera input yeah

363
00:19:09,289 --> 00:19:12,019
that works really great I was surprised

364
00:19:12,019 --> 00:19:17,749
of that as well yeah okay yeah that was

365
00:19:17,749 --> 00:19:20,809
the old-school one now we can do NTSC

366
00:19:20,809 --> 00:19:25,309
and PAL and that's a long topic so we

367
00:19:25,309 --> 00:19:27,919
need only one wire for that all the

368
00:19:27,919 --> 00:19:30,589
video comes through to one wire and we

369
00:19:30,589 --> 00:19:32,779
have like color frequencies then that we

370
00:19:32,779 --> 00:19:35,210
have to modulate and that is the power

371
00:19:35,210 --> 00:19:37,669
frequency I don't know which which is

372
00:19:37,669 --> 00:19:41,210
the NTSC I didn't write it down but then

373
00:19:41,210 --> 00:19:45,769
we have some like grown features so over

374
00:19:45,769 --> 00:19:48,499
time we have like interlacing then we

375
00:19:48,499 --> 00:19:50,119
have to do like the horizontal thing

376
00:19:50,119 --> 00:19:53,389
then this color burst and plenty of

377
00:19:53,389 --> 00:19:55,580
awkward stuff like for the vertical

378
00:19:55,580 --> 00:19:59,670
thing we have like half lines so

379
00:19:59,670 --> 00:20:01,980
what what is that so let's let's just

380
00:20:01,980 --> 00:20:05,280
start taking a look at the line so this

381
00:20:05,280 --> 00:20:09,150
is like 40 64 microseconds and we have

382
00:20:09,150 --> 00:20:13,200
like the sync signal that's voltage

383
00:20:13,200 --> 00:20:15,330
level zero and then we have like black

384
00:20:15,330 --> 00:20:19,140
that's around 0.3 volts and then we have

385
00:20:19,140 --> 00:20:21,870
the gray values then we have a bang face

386
00:20:21,870 --> 00:20:25,100
so this is the visible visible area and

387
00:20:25,100 --> 00:20:28,170
yeah the vertical sync is a little bit

388
00:20:28,170 --> 00:20:30,860
more complicated you can see up there

389
00:20:30,860 --> 00:20:33,930
some some pulses and down there and

390
00:20:33,930 --> 00:20:37,140
there is even a lot have a line so I can

391
00:20:37,140 --> 00:20:39,900
see that but you have like since these

392
00:20:39,900 --> 00:20:43,350
are the two fields of this nasty

393
00:20:43,350 --> 00:20:48,150
interlacing you have to shift like 1/2

394
00:20:48,150 --> 00:20:50,970
1/2 of the line to get it like

395
00:20:50,970 --> 00:20:53,730
interlaced and they did it like very

396
00:20:53,730 --> 00:20:57,780
very very awkwardly ok so to achieve

397
00:20:57,780 --> 00:21:00,840
video we have to go beyond the API since

398
00:21:00,840 --> 00:21:03,980
you can set the I squared s o'clock to

399
00:21:03,980 --> 00:21:07,770
higher than 1 megahertz from from like

400
00:21:07,770 --> 00:21:11,790
the API calls the technical reference

401
00:21:11,790 --> 00:21:15,480
manual is your friend as really it's I

402
00:21:15,480 --> 00:21:20,070
love it I 669 pages I didn't read all of

403
00:21:20,070 --> 00:21:24,270
them but the page it's really well

404
00:21:24,270 --> 00:21:26,550
written it's it's so much documentation

405
00:21:26,550 --> 00:21:30,150
it's so so good it's more documentation

406
00:21:30,150 --> 00:21:33,000
that then then the total I made in my

407
00:21:33,000 --> 00:21:36,330
complete career including university and

408
00:21:36,330 --> 00:21:39,150
school and so yeah it's quite impressive

409
00:21:39,150 --> 00:21:41,610
and I love it so but you also don't

410
00:21:41,610 --> 00:21:44,130
trust the limit state they write down

411
00:21:44,130 --> 00:21:47,760
there so but if you if you go over the

412
00:21:47,760 --> 00:21:49,920
specification you have to try this I

413
00:21:49,920 --> 00:21:51,630
dodged a bullet with with a board that I

414
00:21:51,630 --> 00:21:55,050
sold where in my library I used like

415
00:21:55,050 --> 00:21:57,570
higher frequency but then it works on

416
00:21:57,570 --> 00:22:00,390
half the modules and then I got like one

417
00:22:00,390 --> 00:22:02,430
it was simply black I didn't see any

418
00:22:02,430 --> 00:22:04,800
video and that was but I could simply

419
00:22:04,800 --> 00:22:09,500
update the library and that worked fine

420
00:22:09,500 --> 00:22:13,680
yeah so one example is this divider we

421
00:22:13,680 --> 00:22:14,050
had to

422
00:22:14,050 --> 00:22:17,680
before and we want this not to be like a

423
00:22:17,680 --> 00:22:19,180
high value since our clock will be

424
00:22:19,180 --> 00:22:23,350
divided by by high value and the manual

425
00:22:23,350 --> 00:22:27,220
says whose value is higher or equal to

426
00:22:27,220 --> 00:22:27,670
two

427
00:22:27,670 --> 00:22:29,800
but actually you can write one and it

428
00:22:29,800 --> 00:22:34,300
works so do it try it try it so if you

429
00:22:34,300 --> 00:22:38,260
if you trying something and just just

430
00:22:38,260 --> 00:22:41,650
take other values that probably it might

431
00:22:41,650 --> 00:22:45,810
work so yeah do it

432
00:22:45,810 --> 00:22:48,340
it's quite simple we have the clock set

433
00:22:48,340 --> 00:22:53,050
and we need to like just fill have a

434
00:22:53,050 --> 00:22:57,600
line of buffer width with the sings and

435
00:22:57,600 --> 00:23:01,570
video then we simply take the buffer and

436
00:23:01,570 --> 00:23:04,120
in queue it to I squared s using the API

437
00:23:04,120 --> 00:23:07,270
call that's super simple and it works

438
00:23:07,270 --> 00:23:10,000
for for for this case and simply repeat

439
00:23:10,000 --> 00:23:14,110
so this is how it looks like we just

440
00:23:14,110 --> 00:23:18,940
connect to GPIO 25 and ground and let's

441
00:23:18,940 --> 00:23:23,980
take a look at the video so yeah you

442
00:23:23,980 --> 00:23:26,830
create of yeah it's also cool and you

443
00:23:26,830 --> 00:23:31,480
create obviously a like 3d engine yeah

444
00:23:31,480 --> 00:23:34,060
that works nice 50 frames per second and

445
00:23:34,060 --> 00:23:38,170
a lot of triangles a lot like 90s a lot

446
00:23:38,170 --> 00:23:41,950
and yeah but something is missing we

447
00:23:41,950 --> 00:23:45,250
need audio so we have wanted to do to

448
00:23:45,250 --> 00:23:48,040
allow converter that we use with 13.3

449
00:23:48,040 --> 00:23:52,150
mega samples that's a good value sense

450
00:23:52,150 --> 00:23:56,200
it's like like you have the base clock

451
00:23:56,200 --> 00:23:58,810
of 18 megahertz that I used and that's

452
00:23:58,810 --> 00:24:01,450
like a part of that that you get not

453
00:24:01,450 --> 00:24:03,970
like it's you get a clean clock without

454
00:24:03,970 --> 00:24:06,630
any jitter and your pixels are fine so

455
00:24:06,630 --> 00:24:09,790
but we have an additional digital to

456
00:24:09,790 --> 00:24:11,680
analog converter and we want to use that

457
00:24:11,680 --> 00:24:14,080
for audio but we don't want to over

458
00:24:14,080 --> 00:24:17,760
sample like 13 mega mega Hertz audio no

459
00:24:17,760 --> 00:24:22,680
we want to use like 20 kilohertz we can

460
00:24:22,680 --> 00:24:26,590
actually not do this so both digital to

461
00:24:26,590 --> 00:24:27,580
analog converters

462
00:24:27,580 --> 00:24:31,659
are using one o'clock but I read the

463
00:24:31,659 --> 00:24:33,489
documentation you won't find this

464
00:24:33,489 --> 00:24:36,369
anywhere in in the API so there are

465
00:24:36,369 --> 00:24:39,519
there are certain modes that you can set

466
00:24:39,519 --> 00:24:45,639
for for the FIFO and you can set it such

467
00:24:45,639 --> 00:24:48,639
that one channel will be taken from from

468
00:24:48,639 --> 00:24:50,860
the data input and one channel will be

469
00:24:50,860 --> 00:24:54,129
taken from a single data register and

470
00:24:54,129 --> 00:24:56,559
you can write it register anytime you

471
00:24:56,559 --> 00:24:57,009
want

472
00:24:57,009 --> 00:25:00,580
so we take our sound engine do like a

473
00:25:00,580 --> 00:25:03,489
time or call and and set that single

474
00:25:03,489 --> 00:25:05,859
date data value and the FIFO will simply

475
00:25:05,859 --> 00:25:09,340
take every like 13 million times a

476
00:25:09,340 --> 00:25:11,289
second we'll take simply the single data

477
00:25:11,289 --> 00:25:14,200
value and write it to the digital analog

478
00:25:14,200 --> 00:25:16,269
converter and it doesn't matter how

479
00:25:16,269 --> 00:25:18,730
often we update it it will simply work

480
00:25:18,730 --> 00:25:23,080
and actually it does work so yeah you

481
00:25:23,080 --> 00:25:27,249
simply need to control us and then you

482
00:25:27,249 --> 00:25:31,869
get like yeah you you create like we

483
00:25:31,869 --> 00:25:35,410
create teachers

484
00:25:35,410 --> 00:25:38,440
and but you update the broad to and you

485
00:25:38,440 --> 00:25:41,010
are like Falcon Heavy start and some

486
00:25:41,010 --> 00:25:47,620
booster landings and then flyby of the

487
00:25:47,620 --> 00:25:55,810
roadster to Mars yeah and then you can

488
00:25:55,810 --> 00:25:59,680
like take and a small CT from intercom

489
00:25:59,680 --> 00:26:03,340
and and create like a small Retro Game

490
00:26:03,340 --> 00:26:05,140
Boy that's even more ritual data already

491
00:26:05,140 --> 00:26:11,620
than the original one it it's a little

492
00:26:11,620 --> 00:26:15,220
bit chunky yeah but it works well but it

493
00:26:15,220 --> 00:26:20,320
draws some power okay so how about how

494
00:26:20,320 --> 00:26:24,340
about color okay yeah I didn't get NCSC

495
00:26:24,340 --> 00:26:29,290
working so use the ESP 66 and so it's

496
00:26:29,290 --> 00:26:32,910
lower code check out this his talk on

497
00:26:32,910 --> 00:26:37,060
deaths from before it's it's on youtube

498
00:26:37,060 --> 00:26:39,750
so you can watch it if you didn't see it

499
00:26:39,750 --> 00:26:43,660
yeah but I took over power and I'm from

500
00:26:43,660 --> 00:26:46,150
Europe so that's obvious that's a good

501
00:26:46,150 --> 00:26:50,440
choice and yeah we have we have used

502
00:26:50,440 --> 00:26:53,290
thirteen thirteen point three mega

503
00:26:53,290 --> 00:26:56,020
samples a second and we have a color

504
00:26:56,020 --> 00:26:57,700
color career of four point four

505
00:26:57,700 --> 00:27:00,700
megahertz and that actually aligns quite

506
00:27:00,700 --> 00:27:03,670
good so you get like almost perfect

507
00:27:03,670 --> 00:27:06,450
three samples three samples per pixel

508
00:27:06,450 --> 00:27:09,310
for the color carrier yeah but our

509
00:27:09,310 --> 00:27:11,680
digital to analog converter at thirteen

510
00:27:11,680 --> 00:27:13,330
megahertz this is a square wave

511
00:27:13,330 --> 00:27:16,240
according to the digital converter yeah

512
00:27:16,240 --> 00:27:20,880
so I don't know if we can get a clean

513
00:27:20,880 --> 00:27:24,160
whoops I get a get a clean signal there

514
00:27:24,160 --> 00:27:27,760
that's recognized by a TV so what we

515
00:27:27,760 --> 00:27:30,430
want is a signal like that so that's

516
00:27:30,430 --> 00:27:34,270
like perfect sine wave and what we what

517
00:27:34,270 --> 00:27:38,650
we get with our 13 and Megas samples on

518
00:27:38,650 --> 00:27:42,210
NTSC color Korea is something like that

519
00:27:42,210 --> 00:27:45,520
yeah okay about what

520
00:27:45,520 --> 00:27:48,520
what we get on Powell is there

521
00:27:48,520 --> 00:27:51,470
pretty good isn't it so it's little

522
00:27:51,470 --> 00:27:54,020
shifted from from here to there but it

523
00:27:54,020 --> 00:27:57,799
works fine so that's probably why works

524
00:27:57,799 --> 00:28:01,520
but yeah what do we need for Part II y

525
00:28:01,520 --> 00:28:05,000
UV color space Oh knows yeah

526
00:28:05,000 --> 00:28:07,580
then quadrature amplitude modulation

527
00:28:07,580 --> 00:28:12,160
what is that and face alternating line

528
00:28:12,160 --> 00:28:14,840
okay let's let's take a look what's

529
00:28:14,840 --> 00:28:18,010
what's quadrature amplitude modulation

530
00:28:18,010 --> 00:28:20,419
yeah I'm not an electric engineer I'm

531
00:28:20,419 --> 00:28:22,340
sorry I don't know that I didn't have

532
00:28:22,340 --> 00:28:24,679
signaled Theory let's just take a look

533
00:28:24,679 --> 00:28:26,980
in Wikipedia shouldn't be that hard oh

534
00:28:26,980 --> 00:28:32,890
okay yeah so so this is the point where

535
00:28:32,890 --> 00:28:35,630
so this is the point where I would give

536
00:28:35,630 --> 00:28:38,150
up but actually if you browse the web

537
00:28:38,150 --> 00:28:40,010
you you find some additional information

538
00:28:40,010 --> 00:28:44,330
and just use this formula so this this

539
00:28:44,330 --> 00:28:46,490
is one line this is the second line and

540
00:28:46,490 --> 00:28:49,490
E is like the energy so that's your

541
00:28:49,490 --> 00:28:52,789
amplitude or whatever and there's Y

542
00:28:52,789 --> 00:28:56,570
there is U and V and a sine and cosine

543
00:28:56,570 --> 00:28:59,929
that's like fixed for every pixel in the

544
00:28:59,929 --> 00:29:02,419
line so that start it's the burst signal

545
00:29:02,419 --> 00:29:04,100
and you have the time and it's

546
00:29:04,100 --> 00:29:06,409
multiplied by a factor that gives you

547
00:29:06,409 --> 00:29:09,230
the color carrier so that isn't very

548
00:29:09,230 --> 00:29:11,480
complicated if you write it down like

549
00:29:11,480 --> 00:29:15,490
that and maybe do like JavaScript

550
00:29:15,490 --> 00:29:18,770
emulator to do that so you can check

551
00:29:18,770 --> 00:29:21,799
this out on my page I did this to try to

552
00:29:21,799 --> 00:29:24,500
understand how this actually works and

553
00:29:24,500 --> 00:29:26,600
you can even introduce like an error

554
00:29:26,600 --> 00:29:28,549
since you have like a compensation in

555
00:29:28,549 --> 00:29:31,880
power it compensates between the two

556
00:29:31,880 --> 00:29:34,400
lines and the the error cancels out and

557
00:29:34,400 --> 00:29:37,130
you have like here is the shifted color

558
00:29:37,130 --> 00:29:39,830
so this would be the hue is completely

559
00:29:39,830 --> 00:29:43,010
off but this correction does a quite

560
00:29:43,010 --> 00:29:45,409
good job so it's way better than never

561
00:29:45,409 --> 00:29:49,610
the same color and yeah so I that was

562
00:29:49,610 --> 00:29:52,940
that was how I more or less understood

563
00:29:52,940 --> 00:29:54,710
how it's working or was convinced okay

564
00:29:54,710 --> 00:29:57,860
that that could work so is it good

565
00:29:57,860 --> 00:30:01,510
enough yeah we need a frame buffer

566
00:30:01,510 --> 00:30:06,670
and I use like y UV Y is like the

567
00:30:06,670 --> 00:30:09,880
brightness so I for each pixel I have

568
00:30:09,880 --> 00:30:12,610
like 4 bits for Y and then a color

569
00:30:12,610 --> 00:30:15,040
component since we have this alternating

570
00:30:15,040 --> 00:30:17,260
alternating line then the resolution of

571
00:30:17,260 --> 00:30:20,680
the color is is vertical as 1/2 anyway

572
00:30:20,680 --> 00:30:23,920
so I just write V and u alternating

573
00:30:23,920 --> 00:30:27,190
between the lines so we can use like for

574
00:30:27,190 --> 00:30:30,610
one pixel one by it and that fits in our

575
00:30:30,610 --> 00:30:34,270
memory and then I'll use like for

576
00:30:34,270 --> 00:30:37,960
conversion between RGB and y UV I just

577
00:30:37,960 --> 00:30:41,500
use a lookup table and then yeah can we

578
00:30:41,500 --> 00:30:42,100
do this

579
00:30:42,100 --> 00:30:44,860
9 13 million times a second is this

580
00:30:44,860 --> 00:30:47,620
calculation so yeah I hinted you off

581
00:30:47,620 --> 00:30:50,740
that these both values are constant and

582
00:30:50,740 --> 00:30:52,570
the new F is just on only addition and

583
00:30:52,570 --> 00:30:55,300
multiplication yes sure you can do that

584
00:30:55,300 --> 00:30:58,150
and that utilizes one core hundred

585
00:30:58,150 --> 00:31:01,930
percent you do this quadrature amplitude

586
00:31:01,930 --> 00:31:06,520
modulation using look-up tables and this

587
00:31:06,520 --> 00:31:08,290
multiplication has fixed point

588
00:31:08,290 --> 00:31:11,440
arithmetic so that works and this is the

589
00:31:11,440 --> 00:31:14,620
code yeah so this is the inner loop you

590
00:31:14,620 --> 00:31:16,870
see there are plenty of lots so I'm

591
00:31:16,870 --> 00:31:20,020
actually really calculating this this

592
00:31:20,020 --> 00:31:22,140
modulation and we get a lot of color

593
00:31:22,140 --> 00:31:24,700
options there but yeah you have them

594
00:31:24,700 --> 00:31:27,330
awkward word packing that yes you have

595
00:31:27,330 --> 00:31:31,000
swapped the byte byte order for I

596
00:31:31,000 --> 00:31:34,780
squared s buffers but yeah I try to

597
00:31:34,780 --> 00:31:38,050
optimize this code and I thought okay I

598
00:31:38,050 --> 00:31:40,930
will do like this and that and I tried

599
00:31:40,930 --> 00:31:44,410
like four hours and every time I just

600
00:31:44,410 --> 00:31:48,790
swapped two to two instructions and it

601
00:31:48,790 --> 00:31:52,660
broke so this is really the optimum code

602
00:31:52,660 --> 00:31:55,720
in C++ to do this anything else won't

603
00:31:55,720 --> 00:31:58,470
work at least for me not I I didn't find

604
00:31:58,470 --> 00:32:02,610
any any permutation of codes that works

605
00:32:02,610 --> 00:32:06,880
except for this one so yeah but we can

606
00:32:06,880 --> 00:32:07,780
simplify further

607
00:32:07,780 --> 00:32:09,720
so no non-interlaced power that that

608
00:32:09,720 --> 00:32:12,520
interlacing is so nasty we want to get

609
00:32:12,520 --> 00:32:15,160
rid of that so game consoles of the 90s

610
00:32:15,160 --> 00:32:16,900
have used that already so you simply

611
00:32:16,900 --> 00:32:20,650
sent over the the first field over and

612
00:32:20,650 --> 00:32:23,230
over again and you get your frequency

613
00:32:23,230 --> 00:32:25,300
it's a little bit off it's not 50 Hertz

614
00:32:25,300 --> 00:32:28,980
it's a little bit more but yeah you can

615
00:32:28,980 --> 00:32:31,810
you can get rid of this half line that

616
00:32:31,810 --> 00:32:35,500
you have to send and you get 50 frames

617
00:32:35,500 --> 00:32:37,390
per second half the vertical resolution

618
00:32:37,390 --> 00:32:39,430
we don't have a big frame buffer anyway

619
00:32:39,430 --> 00:32:41,590
so that's what we go with and the final

620
00:32:41,590 --> 00:32:45,910
code is only one of code and it's even I

621
00:32:45,910 --> 00:32:47,800
think I even published it on the public

622
00:32:47,800 --> 00:32:51,280
domain so yeah let's take a look what we

623
00:32:51,280 --> 00:32:53,460
got

624
00:32:56,550 --> 00:33:11,390
[Music]

625
00:33:11,390 --> 00:33:14,580
yeah and we don't need any components we

626
00:33:14,580 --> 00:33:17,100
can just take like some connectors and

627
00:33:17,100 --> 00:33:19,610
yeah okay mica we can take like a

628
00:33:19,610 --> 00:33:22,230
capacitor to get rid of the DC offset

629
00:33:22,230 --> 00:33:25,110
for for the audio and we can simply

630
00:33:25,110 --> 00:33:28,950
built a simple console for light def kit

631
00:33:28,950 --> 00:33:32,880
and we have a simple console like like

632
00:33:32,880 --> 00:33:38,190
that it works very good on a TFT and

633
00:33:38,190 --> 00:33:40,740
it's super quick where DSP you have

634
00:33:40,740 --> 00:33:43,110
still one cord then we can do a lot a

635
00:33:43,110 --> 00:33:45,710
lot of stuff on that and you could even

636
00:33:45,710 --> 00:33:48,299
you could even do it like that without

637
00:33:48,299 --> 00:33:50,669
that capacitor since most of the

638
00:33:50,669 --> 00:33:53,309
amplifiers will take care of this DC

639
00:33:53,309 --> 00:33:55,470
offset anyways and you get even better

640
00:33:55,470 --> 00:33:58,320
base so yeah but there is a slight

641
00:33:58,320 --> 00:34:01,919
problem with the the the digital

642
00:34:01,919 --> 00:34:04,529
converters a very delicate you have you

643
00:34:04,529 --> 00:34:09,000
never shot them with like the 3.3 volts

644
00:34:09,000 --> 00:34:11,280
they will break so I have like a box

645
00:34:11,280 --> 00:34:14,250
full of ESP thirty twos with broken one

646
00:34:14,250 --> 00:34:18,510
one or the other and converter so the

647
00:34:18,510 --> 00:34:21,899
conclusion of this is we have ton of

648
00:34:21,899 --> 00:34:24,030
peripherals but there is one missing

649
00:34:24,030 --> 00:34:28,530
here yeah we can add this it's just a

650
00:34:28,530 --> 00:34:29,159
driver

651
00:34:29,159 --> 00:34:32,310
so I driver you don't need an extra

652
00:34:32,310 --> 00:34:34,830
hardware and that works works nice yeah

653
00:34:34,830 --> 00:34:37,369
but we have some drawbacks

654
00:34:37,369 --> 00:34:42,629
we utilize one core completely and yeah

655
00:34:42,629 --> 00:34:45,239
we don't have enough memory for four

656
00:34:45,239 --> 00:34:48,659
ring buffer where we would like let I

657
00:34:48,659 --> 00:34:51,149
squared s say send the frame over and

658
00:34:51,149 --> 00:34:54,389
over again we just change the pixels yet

659
00:34:54,389 --> 00:34:56,219
the problem is we need like three

660
00:34:56,219 --> 00:34:58,859
samples per pixel and then we have this

661
00:34:58,859 --> 00:35:01,920
factor of two the the problem is we can

662
00:35:01,920 --> 00:35:04,140
use on the first channel where the

663
00:35:04,140 --> 00:35:05,970
digital to analog converters are fixed

664
00:35:05,970 --> 00:35:08,970
to we can only use 16-bit mode there so

665
00:35:08,970 --> 00:35:12,390
the decks are 8-bit but yeah we waste

666
00:35:12,390 --> 00:35:16,950
like half of the of the memory to four

667
00:35:16,950 --> 00:35:19,319
because it's not not possible to send

668
00:35:19,319 --> 00:35:19,890
8-bit

669
00:35:19,890 --> 00:35:22,410
data on that so and we don't have like

670
00:35:22,410 --> 00:35:27,559
500 kilobytes of memory to do it without

671
00:35:27,559 --> 00:35:31,410
recalculating every single line okay

672
00:35:31,410 --> 00:35:34,109
yeah you get also problems with the

673
00:35:34,109 --> 00:35:36,900
Wi-Fi since the core also takes care of

674
00:35:36,900 --> 00:35:39,720
the Wi-Fi stack it the Wi-Fi works but

675
00:35:39,720 --> 00:35:42,539
then your friends will drop out and the

676
00:35:42,539 --> 00:35:44,880
signal is distinct and and so on and

677
00:35:44,880 --> 00:35:48,779
yeah y-you V oh yeah you don't want to

678
00:35:48,779 --> 00:35:51,089
do this since if you like write a game

679
00:35:51,089 --> 00:35:53,099
and you want to do some blending and you

680
00:35:53,099 --> 00:35:54,809
have like Alpha Channel

681
00:35:54,809 --> 00:35:57,690
I eat there I simply take the Y

682
00:35:57,690 --> 00:35:59,970
component and do like blending with the

683
00:35:59,970 --> 00:36:01,710
Y component and I'll just ignore the

684
00:36:01,710 --> 00:36:05,369
color I just take the last last UV

685
00:36:05,369 --> 00:36:09,089
components that works okay but yeah how

686
00:36:09,089 --> 00:36:12,539
about VGA yeah resistor let us yeah

687
00:36:12,539 --> 00:36:14,789
external digital to analog converters we

688
00:36:14,789 --> 00:36:17,670
have two parallel I squid s that we can

689
00:36:17,670 --> 00:36:20,460
simply route to to any GPIO s and yeah

690
00:36:20,460 --> 00:36:25,410
we just add two external decks and yeah

691
00:36:25,410 --> 00:36:28,619
we have five signals for the VGA G and B

692
00:36:28,619 --> 00:36:31,890
analog signals for the components and

693
00:36:31,890 --> 00:36:33,450
then we have a horizontal thing that's a

694
00:36:33,450 --> 00:36:36,779
digital signal and the vertical think so

695
00:36:36,779 --> 00:36:40,170
and yeah we can use what theis good as

696
00:36:40,170 --> 00:36:43,589
we can use like 16-bit mode and 16 bits

697
00:36:43,589 --> 00:36:46,559
per pixel we reserved of this 16 we

698
00:36:46,559 --> 00:36:48,930
reserved 2 bits for the sync signals

699
00:36:48,930 --> 00:36:52,049
since these are digital and take the

700
00:36:52,049 --> 00:36:56,190
other other 14 bits for the color

701
00:36:56,190 --> 00:36:59,940
components and we simply store these the

702
00:36:59,940 --> 00:37:01,529
single signals in the frame buffer as

703
00:37:01,529 --> 00:37:07,680
well so this is how it looks like ok I'm

704
00:37:07,680 --> 00:37:09,289
almost finished

705
00:37:09,289 --> 00:37:13,589
ok it's like 30 more slides it's not

706
00:37:13,589 --> 00:37:18,089
much no it's so we get like high color

707
00:37:18,089 --> 00:37:22,259
ish yeah it's only 14 bits but it's good

708
00:37:22,259 --> 00:37:25,829
enough I would say short introduction to

709
00:37:25,829 --> 00:37:30,630
the DMA buffers since yeah we don't get

710
00:37:30,630 --> 00:37:33,270
along with with the API

711
00:37:33,270 --> 00:37:37,170
anymore we want the real deal

712
00:37:37,170 --> 00:37:41,310
we just initialize the DMA DMA buffers

713
00:37:41,310 --> 00:37:43,830
ourselves and and the DMA prefers the

714
00:37:43,830 --> 00:37:45,900
work of descriptors so that's all like

715
00:37:45,900 --> 00:37:50,460
small small like structures where that

716
00:37:50,460 --> 00:37:53,490
have pointers to data buffer and a

717
00:37:53,490 --> 00:37:57,540
pointer to the next descriptor so okay

718
00:37:57,540 --> 00:37:59,670
I'm not sure about this anymore since I

719
00:37:59,670 --> 00:38:04,560
talked to sprite about that yeah and but

720
00:38:04,560 --> 00:38:06,480
you have only four kilobytes per buffer

721
00:38:06,480 --> 00:38:08,670
so you have like to chain multiple

722
00:38:08,670 --> 00:38:11,970
buffers to get like you data data send

723
00:38:11,970 --> 00:38:17,940
and the the the buffers have always be -

724
00:38:17,940 --> 00:38:20,460
in DMA memory that's how they call it

725
00:38:20,460 --> 00:38:23,960
and that DMA memory is actually SRAM

726
00:38:23,960 --> 00:38:26,580
yeah that's good

727
00:38:26,580 --> 00:38:29,730
so this is this is SRAM PS Ram doesn't

728
00:38:29,730 --> 00:38:33,240
work that's too slow and it's fetched

729
00:38:33,240 --> 00:38:37,130
over SPI so and that's even too slow for

730
00:38:37,130 --> 00:38:40,820
to be used like 50 frames a second like

731
00:38:40,820 --> 00:38:44,490
there's this high high bandwidth then

732
00:38:44,490 --> 00:38:47,100
yeah that's that's I'm not sure about

733
00:38:47,100 --> 00:38:50,070
this this anymore since sprite wasn't

734
00:38:50,070 --> 00:38:52,290
aware of this as well but yeah there are

735
00:38:52,290 --> 00:38:55,200
certain rules but we can set up a ring

736
00:38:55,200 --> 00:39:00,900
buffer so we can store a complete map is

737
00:39:00,900 --> 00:39:03,900
called story complete frame in DMA

738
00:39:03,900 --> 00:39:09,330
memory and simply we have like the sync

739
00:39:09,330 --> 00:39:11,790
signals and maybe black lines which are

740
00:39:11,790 --> 00:39:14,609
invisible and we can like only

741
00:39:14,609 --> 00:39:17,880
initialize one black line and one cygnus

742
00:39:17,880 --> 00:39:22,109
sync pulse and then multiple descriptors

743
00:39:22,109 --> 00:39:24,300
just point to dead single one and so you

744
00:39:24,300 --> 00:39:26,880
can save a lot of memory on that and you

745
00:39:26,880 --> 00:39:29,970
can use cropping to reduce your memory

746
00:39:29,970 --> 00:39:33,270
consumption like nice white mode but you

747
00:39:33,270 --> 00:39:37,800
only saving memory and yes you let the

748
00:39:37,800 --> 00:39:39,390
last descriptor just point to the first

749
00:39:39,390 --> 00:39:43,170
one and let sql's run and it will run

750
00:39:43,170 --> 00:39:43,830
forever

751
00:39:43,830 --> 00:39:47,000
and you only just up

752
00:39:47,000 --> 00:39:49,340
the frame buffer and the processor is

753
00:39:49,340 --> 00:39:50,690
free to do anything you want

754
00:39:50,690 --> 00:39:54,080
so yeah that's quite good how do we do

755
00:39:54,080 --> 00:39:58,100
that resistor letters external ones I

756
00:39:58,100 --> 00:40:00,140
don't even have a buffer at the end I

757
00:40:00,140 --> 00:40:01,940
simply write this I connect this

758
00:40:01,940 --> 00:40:04,910
directly to to the VGA cable and I have

759
00:40:04,910 --> 00:40:08,420
like a trimmer a resistor here to get

760
00:40:08,420 --> 00:40:10,850
the right voltage level that works good

761
00:40:10,850 --> 00:40:13,100
enough so it's a little bit messy messy

762
00:40:13,100 --> 00:40:15,670
on the bread pot and let's take a look

763
00:40:15,670 --> 00:40:19,730
what the result is yeah it's it's really

764
00:40:19,730 --> 00:40:22,370
crisp so the the pixels are much nicer

765
00:40:22,370 --> 00:40:26,330
than then with with Paul and I also

766
00:40:26,330 --> 00:40:29,330
wrote like libraries so you can and we

767
00:40:29,330 --> 00:40:30,980
can do real-time ray tracing since we

768
00:40:30,980 --> 00:40:33,650
have now two cores for four for our

769
00:40:33,650 --> 00:40:36,050
purposes so we get like six frames with

770
00:40:36,050 --> 00:40:38,990
reflections shadows and so on only like

771
00:40:38,990 --> 00:40:41,720
three primitives but yeah okay that

772
00:40:41,720 --> 00:40:42,310
works

773
00:40:42,310 --> 00:40:46,910
so I that was so nice and I wanted to

774
00:40:46,910 --> 00:40:49,130
make it available to everyone and I

775
00:40:49,130 --> 00:40:51,590
wrote to like a library yeah you

776
00:40:51,590 --> 00:40:54,020
probably hate the ESP 30 tulip name but

777
00:40:54,020 --> 00:40:56,360
I won't include their sound and Paul

778
00:40:56,360 --> 00:40:58,820
implementation as well and in this too

779
00:40:58,820 --> 00:41:02,240
just since I don't like to have like ton

780
00:41:02,240 --> 00:41:04,070
of different libraries that I have to

781
00:41:04,070 --> 00:41:06,650
include and update and so on I will just

782
00:41:06,650 --> 00:41:09,350
maintain one library that has all the

783
00:41:09,350 --> 00:41:11,390
good stuff and I wrote also a wrapper

784
00:41:11,390 --> 00:41:13,820
for the other 50g fix library so you can

785
00:41:13,820 --> 00:41:16,550
just take take it and use it with your

786
00:41:16,550 --> 00:41:18,560
old projects it will work you can simply

787
00:41:18,560 --> 00:41:21,410
display it on an old VGA monitor that

788
00:41:21,410 --> 00:41:25,100
every everyone is showing into interest

789
00:41:25,100 --> 00:41:26,720
since they don't have a HDMI or

790
00:41:26,720 --> 00:41:32,510
something so yeah a bomber so we have

791
00:41:32,510 --> 00:41:34,520
8-bit is missing on the first channel

792
00:41:34,520 --> 00:41:39,350
and yeah they're internal decks we could

793
00:41:39,350 --> 00:41:43,160
use power with 8-bit mode and we would

794
00:41:43,160 --> 00:41:46,340
have like the same ring buffer for for

795
00:41:46,340 --> 00:41:49,400
PAL but yeah it's unfortunately not

796
00:41:49,400 --> 00:41:52,340
possible and that that first channel

797
00:41:52,340 --> 00:41:54,920
would waste like 50% of the memory in

798
00:41:54,920 --> 00:41:57,410
bandwidth but I talked to sprite and he

799
00:41:57,410 --> 00:42:00,440
actually opened like an issue and

800
00:42:00,440 --> 00:42:02,900
that will probably change that and like

801
00:42:02,900 --> 00:42:06,890
the not the next one but the next after

802
00:42:06,890 --> 00:42:09,770
that so we probably will even have like

803
00:42:09,770 --> 00:42:13,130
Paul in the future without utilizing a

804
00:42:13,130 --> 00:42:17,060
core completely and what we can do with

805
00:42:17,060 --> 00:42:20,750
this 8-bit mode is we can use like two

806
00:42:20,750 --> 00:42:22,550
bits for color component and we have

807
00:42:22,550 --> 00:42:24,560
liked the sync signals at the end and we

808
00:42:24,560 --> 00:42:27,620
can get with the 1440 mega samples we

809
00:42:27,620 --> 00:42:33,110
can get up to 800 by 600 resolution but

810
00:42:33,110 --> 00:42:34,670
we don't have enough memory for the

811
00:42:34,670 --> 00:42:37,370
frame before we can do like cropping but

812
00:42:37,370 --> 00:42:39,260
we can also use an interrupt to feel

813
00:42:39,260 --> 00:42:44,510
fill even the individual line like on

814
00:42:44,510 --> 00:42:47,300
the fly with procedural graphics or like

815
00:42:47,300 --> 00:42:49,520
some compression I did that even

816
00:42:49,520 --> 00:42:51,560
compression decompression like run

817
00:42:51,560 --> 00:42:54,350
length encoding in the interrupt so that

818
00:42:54,350 --> 00:42:59,140
simply draws and fills the buffer so

819
00:42:59,140 --> 00:43:02,990
this is a video is it missing no whoops

820
00:43:02,990 --> 00:43:08,630
oh yeah so this is this is how the 8-bit

821
00:43:08,630 --> 00:43:10,550
mode looks like and this is a high

822
00:43:10,550 --> 00:43:13,220
resolution there is free memory 30

823
00:43:13,220 --> 00:43:16,910
kilobytes left and yeah you can use also

824
00:43:16,910 --> 00:43:23,600
text mode yeah and okay let's make it

825
00:43:23,600 --> 00:43:26,960
quick you can also use VGA without extra

826
00:43:26,960 --> 00:43:29,930
components you simply use one bit color

827
00:43:29,930 --> 00:43:33,350
color component and have like only like

828
00:43:33,350 --> 00:43:35,090
three bit graphics so we have the

829
00:43:35,090 --> 00:43:39,530
comparison here it doesn't look so good

830
00:43:39,530 --> 00:43:42,680
anymore but yeah this this one actually

831
00:43:42,680 --> 00:43:47,390
does so you can take it so what is our

832
00:43:47,390 --> 00:43:48,560
conclusion for that

833
00:43:48,560 --> 00:43:51,230
yeah SP 32 is a beast you can do all

834
00:43:51,230 --> 00:43:53,630
your video obviously and you can use one

835
00:43:53,630 --> 00:43:58,850
color as a GPU cool and the memory is

836
00:43:58,850 --> 00:44:01,910
crucial so I was asked quite often why

837
00:44:01,910 --> 00:44:05,240
don't you use the SD stm32 yeah I did

838
00:44:05,240 --> 00:44:09,740
there there are stm32 that have like 512

839
00:44:09,740 --> 00:44:11,770
kilobytes but yeah

840
00:44:11,770 --> 00:44:14,110
they're a lot more expensive and have

841
00:44:14,110 --> 00:44:17,830
like 1 million pins and are huge but the

842
00:44:17,830 --> 00:44:21,340
SP 32 does it very well so for anyone

843
00:44:21,340 --> 00:44:24,370
who's designing microcontrollers please

844
00:44:24,370 --> 00:44:27,670
put in like maybe 640 kilobytes that's

845
00:44:27,670 --> 00:44:31,240
enough for everyone and we can do frame

846
00:44:31,240 --> 00:44:33,670
buffers and graphics and you can build

847
00:44:33,670 --> 00:44:35,860
like for seven dollars you can build a

848
00:44:35,860 --> 00:44:38,200
game console including the controller

849
00:44:38,200 --> 00:44:41,140
from Aliexpress obviously so what's the

850
00:44:41,140 --> 00:44:44,320
future you can follow my journey this

851
00:44:44,320 --> 00:44:46,570
was like three years of my life and you

852
00:44:46,570 --> 00:44:48,250
can follow my journey on my channel

853
00:44:48,250 --> 00:44:51,190
yeah I'm building like a mini computer

854
00:44:51,190 --> 00:44:54,190
and I'm trying to optimize the console a

855
00:44:54,190 --> 00:44:56,920
bit more and you can follow me on

856
00:44:56,920 --> 00:45:00,280
Twitter YouTube and maybe my page or

857
00:45:00,280 --> 00:45:03,640
github or check out from time to time I

858
00:45:03,640 --> 00:45:05,770
have even stuff on my my tinder store

859
00:45:05,770 --> 00:45:07,570
and I want to thank you for your

860
00:45:07,570 --> 00:45:10,050
attention

