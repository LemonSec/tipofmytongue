1
00:00:00,000 --> 00:00:01,319
so what we're going to talk about today

2
00:00:01,319 --> 00:00:05,150
is really attacking hardware because

3
00:00:05,150 --> 00:00:07,200
attacking hardware is really fun there's

4
00:00:07,200 --> 00:00:08,880
and there are many reasons that we might

5
00:00:08,880 --> 00:00:12,090
want to attack Hardware maybe you want

6
00:00:12,090 --> 00:00:14,790
to extract secrets right we all have

7
00:00:14,790 --> 00:00:16,410
mobile phones these mobile phones are

8
00:00:16,410 --> 00:00:18,060
typically carrying all of our data

9
00:00:18,060 --> 00:00:20,520
that's encrypted and we can't even

10
00:00:20,520 --> 00:00:23,010
actually get the key often we have TPMS

11
00:00:23,010 --> 00:00:24,300
we have secure enclaves we have

12
00:00:24,300 --> 00:00:25,650
encryption chips that are actually pry

13
00:00:25,650 --> 00:00:27,840
that are storing keys that protect our

14
00:00:27,840 --> 00:00:30,060
data which is nice but we can't even get

15
00:00:30,060 --> 00:00:31,949
to that maybe you want to extract those

16
00:00:31,949 --> 00:00:33,300
keys maybe you want to create a device

17
00:00:33,300 --> 00:00:36,149
that can be compatible with something

18
00:00:36,149 --> 00:00:39,510
else maybe you want to modify your

19
00:00:39,510 --> 00:00:41,070
hardware maybe you bought something and

20
00:00:41,070 --> 00:00:42,600
you want it to run different type of

21
00:00:42,600 --> 00:00:44,879
code that the manufacturer doesn't want

22
00:00:44,879 --> 00:00:45,300
you to

23
00:00:45,300 --> 00:00:46,710
but it's your device I think you should

24
00:00:46,710 --> 00:00:48,329
be able to and if you're interested I

25
00:00:48,329 --> 00:00:49,649
mean we'll go a little bit into this

26
00:00:49,649 --> 00:00:51,899
sort of stuff I've been getting a lot of

27
00:00:51,899 --> 00:00:53,340
emails from people who say they've lost

28
00:00:53,340 --> 00:00:55,379
their dongle for their keyboard or Mouse

29
00:00:55,379 --> 00:00:57,840
and they're like hey can you like can I

30
00:00:57,840 --> 00:00:59,520
make a dongle and like actually yes you

31
00:00:59,520 --> 00:01:01,079
can you don't have to buy an entirely

32
00:01:01,079 --> 00:01:02,370
new keyboard but that's actually what

33
00:01:02,370 --> 00:01:04,049
manufacturers make us do today if you

34
00:01:04,049 --> 00:01:06,119
lose the USB dongle that stores the

35
00:01:06,119 --> 00:01:08,520
private key of the encryption key that's

36
00:01:08,520 --> 00:01:10,140
shared between your keyboard and dongle

37
00:01:10,140 --> 00:01:11,970
you don't have to buy a new keyboard now

38
00:01:11,970 --> 00:01:13,170
imagine if that happened with your car

39
00:01:13,170 --> 00:01:15,119
right imagine if you lost your key and

40
00:01:15,119 --> 00:01:16,979
the manufacturer said you have to buy a

41
00:01:16,979 --> 00:01:19,650
new car they can do that right there's

42
00:01:19,650 --> 00:01:20,759
actually nothing stopping them today

43
00:01:20,759 --> 00:01:22,590
that says you they have to gate sell you

44
00:01:22,590 --> 00:01:24,509
a key and really an overpriced key right

45
00:01:24,509 --> 00:01:25,290
these keys are about three hundred

46
00:01:25,290 --> 00:01:27,810
dollars for what I mean Michael Osman

47
00:01:27,810 --> 00:01:30,240
has like a CC 1110 chip what is that

48
00:01:30,240 --> 00:01:31,770
couple bucks I mean that's basically

49
00:01:31,770 --> 00:01:34,140
what's inside of these devices it's kind

50
00:01:34,140 --> 00:01:37,890
of crazy so this understanding this sort

51
00:01:37,890 --> 00:01:39,299
of stuff will just give you access to

52
00:01:39,299 --> 00:01:40,770
your hardware to your software the

53
00:01:40,770 --> 00:01:42,659
things that you own potentially other

54
00:01:42,659 --> 00:01:44,880
things that other people are on bit so

55
00:01:44,880 --> 00:01:47,880
in this in this talk we'll use the

56
00:01:47,880 --> 00:01:49,829
Arduino Uno it because it's it's pretty

57
00:01:49,829 --> 00:01:51,360
ubiquitous right we've role at least

58
00:01:51,360 --> 00:01:53,340
familiar with it it's a microcontroller

59
00:01:53,340 --> 00:01:56,640
and we use that as a great example just

60
00:01:56,640 --> 00:01:58,200
to give an idea who has performed

61
00:01:58,200 --> 00:02:01,619
side-channel attacks before okay awesome

62
00:02:01,619 --> 00:02:05,219
and who has performed fault intentional

63
00:02:05,219 --> 00:02:08,280
fault injection okay cool

64
00:02:08,280 --> 00:02:10,739
all right what we'll go we'll go from

65
00:02:10,739 --> 00:02:12,420
the very basics by the end of this you

66
00:02:12,420 --> 00:02:13,730
will be able to do some really cool

67
00:02:13,730 --> 00:02:15,890
attacks with the hardware that you have

68
00:02:15,890 --> 00:02:18,830
in your back so what is a side channel

69
00:02:18,830 --> 00:02:21,319
right let's just understand I think this

70
00:02:21,319 --> 00:02:22,549
is actually a really cool example like

71
00:02:22,549 --> 00:02:23,930
being able to just listen to the ground

72
00:02:23,930 --> 00:02:26,209
and kilometres away that's right

73
00:02:26,209 --> 00:02:28,879
kilometers away you can actually hear

74
00:02:28,879 --> 00:02:30,500
something coming right you can hear a

75
00:02:30,500 --> 00:02:32,330
horse coming that's essentially a side

76
00:02:32,330 --> 00:02:33,739
channel it's information that you're

77
00:02:33,739 --> 00:02:35,900
gathering from an implementation rather

78
00:02:35,900 --> 00:02:39,950
than the algorithm or system itself and

79
00:02:39,950 --> 00:02:41,629
there's some really cool examples of

80
00:02:41,629 --> 00:02:44,150
side channels this isn't from a video of

81
00:02:44,150 --> 00:02:45,980
Mark Rover did where he took a FLIR

82
00:02:45,980 --> 00:02:47,239
infrared camera that you can get for

83
00:02:47,239 --> 00:02:48,890
your phone you just put on top of your

84
00:02:48,890 --> 00:02:50,510
phone and then you went into a store

85
00:02:50,510 --> 00:02:52,940
someone typed their pin code on the ATM

86
00:02:52,940 --> 00:02:55,549
and immediately he took a photo

87
00:02:55,549 --> 00:02:57,530
you couldn't even notice and you can see

88
00:02:57,530 --> 00:02:59,540
thermally the code is one two three four

89
00:02:59,540 --> 00:03:01,489
five because the heat five is the

90
00:03:01,489 --> 00:03:03,560
hottest which means it was last hit by

91
00:03:03,560 --> 00:03:05,390
someone's finger it's really cool so

92
00:03:05,390 --> 00:03:06,829
this is an infrared side channel for

93
00:03:06,829 --> 00:03:09,019
example we have sound there are many

94
00:03:09,019 --> 00:03:10,670
different papers and examples of using

95
00:03:10,670 --> 00:03:13,220
sound as a side channel Berkeley used a

96
00:03:13,220 --> 00:03:15,170
microphone to track acoustic emanations

97
00:03:15,170 --> 00:03:17,840
from keyboards now what they could do is

98
00:03:17,840 --> 00:03:19,400
after a few hundred keystrokes after

99
00:03:19,400 --> 00:03:21,709
typing on a keyboard and having a phone

100
00:03:21,709 --> 00:03:24,319
simply nearby listening they could tell

101
00:03:24,319 --> 00:03:26,329
what you're typing now how does that

102
00:03:26,329 --> 00:03:26,810
work

103
00:03:26,810 --> 00:03:29,389
because you're just pressing keys right

104
00:03:29,389 --> 00:03:31,190
they all sound pretty similar except

105
00:03:31,190 --> 00:03:32,480
they actually all sound very unique

106
00:03:32,480 --> 00:03:34,160
because it's a location on a keyboard

107
00:03:34,160 --> 00:03:36,079
they will produce the same sound if you

108
00:03:36,079 --> 00:03:37,310
hit on your keyboard

109
00:03:37,310 --> 00:03:40,790
a a a a verse s SSS those will have two

110
00:03:40,790 --> 00:03:42,739
different sounds now the amplitude might

111
00:03:42,739 --> 00:03:44,690
be slightly different but you can use

112
00:03:44,690 --> 00:03:47,389
algorithms like dynamic time warping to

113
00:03:47,389 --> 00:03:49,519
actually figure figure out that these

114
00:03:49,519 --> 00:03:51,260
are the same and if you know the

115
00:03:51,260 --> 00:03:52,579
language that someone is typing let's

116
00:03:52,579 --> 00:03:54,079
say they're typing English you know that

117
00:03:54,079 --> 00:03:56,090
the space is going to be used more than

118
00:03:56,090 --> 00:03:57,709
anything so you immediately say oh this

119
00:03:57,709 --> 00:04:00,019
key is here here and here it's use the

120
00:04:00,019 --> 00:04:01,459
most so now you just have your word

121
00:04:01,459 --> 00:04:02,750
separator then you're just doing

122
00:04:02,750 --> 00:04:06,440
frequency analysis Italian truth Lou

123
00:04:06,440 --> 00:04:09,319
what's the what's the term some people

124
00:04:09,319 --> 00:04:11,989
don't know what that is so that would be

125
00:04:11,989 --> 00:04:13,669
a sound sound sign channel there's

126
00:04:13,669 --> 00:04:16,820
visible light the guys at inverse path

127
00:04:16,820 --> 00:04:20,329
and andrea bar a san san e and daniel

128
00:04:20,329 --> 00:04:23,150
Bianco an inverse path they use a laser

129
00:04:23,150 --> 00:04:23,930
at Def Con

130
00:04:23,930 --> 00:04:25,639
maybe many years ago and they would

131
00:04:25,639 --> 00:04:27,680
bounce it off of a reflective portion of

132
00:04:27,680 --> 00:04:29,780
a laptop and similar to the sound the

133
00:04:29,780 --> 00:04:32,300
frequency analysis of sound they're now

134
00:04:32,300 --> 00:04:34,430
doing this with mechanical vibration and

135
00:04:34,430 --> 00:04:36,169
visible light so the visible light that

136
00:04:36,169 --> 00:04:39,490
bounces off reflected on to their

137
00:04:39,490 --> 00:04:43,130
whatever optical receiver that they had

138
00:04:43,130 --> 00:04:44,960
they can then perform the same exact

139
00:04:44,960 --> 00:04:46,280
analysis and figure out what you're

140
00:04:46,280 --> 00:04:48,139
typing and this could be this could be

141
00:04:48,139 --> 00:04:50,570
visible you could use infrared as well I

142
00:04:50,570 --> 00:04:52,430
think I first heard about the side

143
00:04:52,430 --> 00:04:55,970
channel stuff with the NSA yeah sorry

144
00:04:55,970 --> 00:04:59,270
about the the URL there but in the 60s

145
00:04:59,270 --> 00:05:01,759
the NSA developed tempest attacks and

146
00:05:01,759 --> 00:05:04,070
Tempest was when they found that CRT

147
00:05:04,070 --> 00:05:06,320
monitors are constantly emitting a ton

148
00:05:06,320 --> 00:05:09,110
of electromagnetic radiation so from a

149
00:05:09,110 --> 00:05:11,330
side room they could have an antenna set

150
00:05:11,330 --> 00:05:13,039
up and see what's happening on that

151
00:05:13,039 --> 00:05:14,960
screen because of the radiofrequency

152
00:05:14,960 --> 00:05:16,940
emanations that are coming off of here I

153
00:05:16,940 --> 00:05:18,259
mean this stuff is just like absolutely

154
00:05:18,259 --> 00:05:20,270
amazing and I think what's cool about

155
00:05:20,270 --> 00:05:21,949
all of these attacks at least the ones

156
00:05:21,949 --> 00:05:23,539
that I'm sharing with you is that we can

157
00:05:23,539 --> 00:05:25,160
all do these all right this doesn't

158
00:05:25,160 --> 00:05:27,169
require nation state funding this

159
00:05:27,169 --> 00:05:29,840
doesn't require ridiculous computation

160
00:05:29,840 --> 00:05:31,840
this is stuff that we can do ourselves

161
00:05:31,840 --> 00:05:35,360
ultrasound this is super super cool the

162
00:05:35,360 --> 00:05:37,520
University of Tel Aviv was able to take

163
00:05:37,520 --> 00:05:39,949
a standard mobile device put it next to

164
00:05:39,949 --> 00:05:41,840
a laptop and listen to the ultrasound

165
00:05:41,840 --> 00:05:43,760
coming off of a computer why is there

166
00:05:43,760 --> 00:05:45,199
why is your computer in producing

167
00:05:45,199 --> 00:05:47,120
ultrasound we can't hear ultrasound but

168
00:05:47,120 --> 00:05:48,620
your computer is producing it constantly

169
00:05:48,620 --> 00:05:50,210
the capacitor is going through something

170
00:05:50,210 --> 00:05:52,610
called it electro electro strict effect

171
00:05:52,610 --> 00:05:54,650
where basically they're moving due to an

172
00:05:54,650 --> 00:05:55,970
electric field they're physically moving

173
00:05:55,970 --> 00:05:58,009
the capacitors inside and they're moving

174
00:05:58,009 --> 00:05:59,690
against your PCB they're happening fast

175
00:05:59,690 --> 00:06:00,919
enough that is producing the ultrasound

176
00:06:00,919 --> 00:06:02,419
that you and I can't hear but that a

177
00:06:02,419 --> 00:06:04,370
standard microphone in any mobile device

178
00:06:04,370 --> 00:06:06,409
can actually listen to then they're

179
00:06:06,409 --> 00:06:08,870
using that to perform analysis on what

180
00:06:08,870 --> 00:06:10,639
instructions are being run because if

181
00:06:10,639 --> 00:06:12,409
say you're encrypting something with RSA

182
00:06:12,409 --> 00:06:15,409
with the 4096 bit secure key well that's

183
00:06:15,409 --> 00:06:16,909
going to take a different operation if

184
00:06:16,909 --> 00:06:19,340
you're doing using a zero bit versus a 1

185
00:06:19,340 --> 00:06:21,409
bit in your in your key you're actually

186
00:06:21,409 --> 00:06:22,430
doing I think something like a

187
00:06:22,430 --> 00:06:24,199
multiplication verse a multiplication

188
00:06:24,199 --> 00:06:26,030
plus some other operation maybe modulo

189
00:06:26,030 --> 00:06:27,830
and because of that you can then do

190
00:06:27,830 --> 00:06:29,389
timing and power analysis just by that

191
00:06:29,389 --> 00:06:31,639
ultrasound and having just a simple

192
00:06:31,639 --> 00:06:32,900
phone you can record that information

193
00:06:32,900 --> 00:06:35,060
and extract the full key I mean

194
00:06:35,060 --> 00:06:37,700
absolutely crazy there's power attacks

195
00:06:37,700 --> 00:06:39,730
so that was ultra sound we have power

196
00:06:39,730 --> 00:06:42,170
all these physical phenomena are all

197
00:06:42,170 --> 00:06:43,940
leaking all this information all the

198
00:06:43,940 --> 00:06:46,190
time on everything we use it's crazy you

199
00:06:46,190 --> 00:06:47,810
can measure power to discover leakage

200
00:06:47,810 --> 00:06:50,030
the inverse path guys also did a

201
00:06:50,030 --> 00:06:51,290
demonstration where they could plug into

202
00:06:51,290 --> 00:06:53,000
a ground on a circuit and then pick up

203
00:06:53,000 --> 00:06:55,130
information or noise that was coming off

204
00:06:55,130 --> 00:06:57,380
of a keyboard somewhere else on the same

205
00:06:57,380 --> 00:06:58,670
circuit and they can figure out what

206
00:06:58,670 --> 00:07:00,110
you're typing or give you power announce

207
00:07:00,110 --> 00:07:01,970
to extract keys like we saw with

208
00:07:01,970 --> 00:07:04,670
ultrasound this is terrifying this is a

209
00:07:04,670 --> 00:07:07,280
bag of potato chips if you see this

210
00:07:07,280 --> 00:07:09,350
watch out someone could be listening to

211
00:07:09,350 --> 00:07:11,780
what you're saying what MIT was in a

212
00:07:11,780 --> 00:07:13,790
soundproof room they did a demonstration

213
00:07:13,790 --> 00:07:15,320
where they put a bag of potato chips in

214
00:07:15,320 --> 00:07:17,630
a soundproof room with soundproof glass

215
00:07:17,630 --> 00:07:20,180
and then on the outside they took a DSLR

216
00:07:20,180 --> 00:07:21,730
camera looked inside of that room and

217
00:07:21,730 --> 00:07:24,500
recorded the video at standard 60 frames

218
00:07:24,500 --> 00:07:26,540
per second and they were able to then

219
00:07:26,540 --> 00:07:29,300
extract sound that was being being

220
00:07:29,300 --> 00:07:32,390
stated what someone was saying inside of

221
00:07:32,390 --> 00:07:33,650
the room and they're doing that by

222
00:07:33,650 --> 00:07:35,930
looking at sound is vibration of air so

223
00:07:35,930 --> 00:07:37,880
that air is then vibrating against the

224
00:07:37,880 --> 00:07:39,890
bag of potato chips and then the potato

225
00:07:39,890 --> 00:07:41,720
chip slightly moves right not enough

226
00:07:41,720 --> 00:07:43,520
that you or I could see but a computer

227
00:07:43,520 --> 00:07:45,020
could easily see it and what's kind of

228
00:07:45,020 --> 00:07:47,090
incredible is that hearing is a 2220

229
00:07:47,090 --> 00:07:48,830
killers right 20 Hertz to 20 kilohertz

230
00:07:48,830 --> 00:07:51,500
but they're able to use DSLRs camera is

231
00:07:51,500 --> 00:07:53,060
not actually taking 60 frames per second

232
00:07:53,060 --> 00:07:55,130
it's taking many many many many many

233
00:07:55,130 --> 00:07:57,080
pixels per second right so if you're

234
00:07:57,080 --> 00:07:58,610
watching these pixels that's actually

235
00:07:58,610 --> 00:08:00,230
changing many times more than 60 frames

236
00:08:00,230 --> 00:08:01,790
per second and they're able to convert

237
00:08:01,790 --> 00:08:04,280
that visible light or that motion back

238
00:08:04,280 --> 00:08:06,230
to sound and hear what was in the

239
00:08:06,230 --> 00:08:10,880
soundproof room via light it's crazy and

240
00:08:10,880 --> 00:08:13,130
time time is an excellent isn't an

241
00:08:13,130 --> 00:08:15,500
excellent side Channel so we'll use that

242
00:08:15,500 --> 00:08:18,230
as a simple example so again well look

243
00:08:18,230 --> 00:08:20,360
at the Arduino you know we're all

244
00:08:20,360 --> 00:08:21,920
familiar with Arduino Uno for the most

245
00:08:21,920 --> 00:08:24,350
part really the brains the Uno is the 80

246
00:08:24,350 --> 00:08:25,400
mega 328p

247
00:08:25,400 --> 00:08:28,880
and that's a standard microcontroller

248
00:08:28,880 --> 00:08:32,450
well AVR architecture will take a little

249
00:08:32,450 --> 00:08:35,390
bit deeper look here but a clock is

250
00:08:35,390 --> 00:08:37,460
pretty much driving everything on most

251
00:08:37,460 --> 00:08:40,280
processors most microcontrollers mmm

252
00:08:40,280 --> 00:08:42,169
excuse me so you've a ton of sequential

253
00:08:42,169 --> 00:08:43,429
logic that's controlling flip-flops

254
00:08:43,429 --> 00:08:45,620
flash ram FIFO is all this stuff and

255
00:08:45,620 --> 00:08:49,040
we'll take a simple simple program it's

256
00:08:49,040 --> 00:08:50,100
very basic

257
00:08:50,100 --> 00:08:53,220
we create a password and we asked the

258
00:08:53,220 --> 00:08:54,810
user let's say let's say where this

259
00:08:54,810 --> 00:08:56,339
software developer writing the firmware

260
00:08:56,339 --> 00:08:59,370
for this chip we ask for a password the

261
00:08:59,370 --> 00:09:00,720
user enters their password over the

262
00:09:00,720 --> 00:09:03,930
serial and we validate is the password

263
00:09:03,930 --> 00:09:05,819
equal to the guests we're using the

264
00:09:05,819 --> 00:09:07,769
string library here so that will handle

265
00:09:07,769 --> 00:09:09,839
things like equal equal so what's wrong

266
00:09:09,839 --> 00:09:12,779
with this code and I think the answer is

267
00:09:12,779 --> 00:09:14,269
nothing is actually wrong with this code

268
00:09:14,269 --> 00:09:16,470
unfortunately there are a ton of hot

269
00:09:16,470 --> 00:09:18,630
side channels that can exploit this code

270
00:09:18,630 --> 00:09:20,490
so we're going to be revisiting this

271
00:09:20,490 --> 00:09:23,639
code a couple times now so if we look at

272
00:09:23,639 --> 00:09:25,620
this we see password equals equals guess

273
00:09:25,620 --> 00:09:27,269
so how is it validating that the

274
00:09:27,269 --> 00:09:29,790
password we entered is hunter too well

275
00:09:29,790 --> 00:09:31,139
we can take a look at what equal equal

276
00:09:31,139 --> 00:09:32,730
does and if you pull up the Arduino or

277
00:09:32,730 --> 00:09:35,819
AVR core if you look at Arduino this

278
00:09:35,819 --> 00:09:37,860
equal equal is actually defined in W

279
00:09:37,860 --> 00:09:39,810
string dot CPP so you can look at your

280
00:09:39,810 --> 00:09:41,790
Arduino source code pull this up you can

281
00:09:41,790 --> 00:09:42,930
see what's happening this is a snippet

282
00:09:42,930 --> 00:09:44,160
of the code but this is really the

283
00:09:44,160 --> 00:09:46,380
critical part here we're saying equal

284
00:09:46,380 --> 00:09:47,850
equal gets overloaded and calls this

285
00:09:47,850 --> 00:09:49,889
equals function in your string class and

286
00:09:49,889 --> 00:09:52,199
then equals is taking your basically

287
00:09:52,199 --> 00:09:53,399
your two things and saying are they

288
00:09:53,399 --> 00:09:54,839
equal it's doing that be a string

289
00:09:54,839 --> 00:09:56,759
compare string compare as part of the

290
00:09:56,759 --> 00:09:58,889
Lib C library so if we look at Lib C

291
00:09:58,889 --> 00:10:02,730
then we can look at how that's doing how

292
00:10:02,730 --> 00:10:04,920
that's being done so looking at Lib C

293
00:10:04,920 --> 00:10:06,360
string compare all we're doing is we're

294
00:10:06,360 --> 00:10:08,430
looping through a string character by

295
00:10:08,430 --> 00:10:10,350
character and saying are they equal or

296
00:10:10,350 --> 00:10:12,750
not very simple and then if we compile

297
00:10:12,750 --> 00:10:14,459
that down we actually get assembly and

298
00:10:14,459 --> 00:10:16,079
if we look at that then it's again very

299
00:10:16,079 --> 00:10:18,449
simple very similar we're just going

300
00:10:18,449 --> 00:10:20,399
bite by bite through the password we're

301
00:10:20,399 --> 00:10:22,800
starting at 402 we start at H and then

302
00:10:22,800 --> 00:10:24,540
go to you validate that each character

303
00:10:24,540 --> 00:10:26,880
is the same and if any of mismatch then

304
00:10:26,880 --> 00:10:30,290
we break each branch and we return

305
00:10:30,290 --> 00:10:32,579
that's pretty cool that all makes sense

306
00:10:32,579 --> 00:10:35,040
but what's interesting here is that

307
00:10:35,040 --> 00:10:36,990
again we have this clock that's

308
00:10:36,990 --> 00:10:38,610
controlling everything so the clock is

309
00:10:38,610 --> 00:10:41,100
fetching instructions from flash it's

310
00:10:41,100 --> 00:10:42,329
putting in a destructor instruction

311
00:10:42,329 --> 00:10:43,709
register and then we're doing this

312
00:10:43,709 --> 00:10:46,829
validation byte by byte now all this

313
00:10:46,829 --> 00:10:49,740
takes time a clock is really takes time

314
00:10:49,740 --> 00:10:51,630
right and that's the idea of a clock so

315
00:10:51,630 --> 00:10:53,790
what if we measured that time this is a

316
00:10:53,790 --> 00:10:55,680
very very simple attack that you can

317
00:10:55,680 --> 00:10:57,509
perform today with virtually any

318
00:10:57,509 --> 00:10:59,309
equipment I mean all you need is an

319
00:10:59,309 --> 00:11:01,379
Arduino to actually perform this type

320
00:11:01,379 --> 00:11:04,079
of actual attack so if we're taking if

321
00:11:04,079 --> 00:11:06,479
we type let's say H a K versus GA K

322
00:11:06,479 --> 00:11:08,579
there will be a difference in the timing

323
00:11:08,579 --> 00:11:11,249
the amount of time it will take is going

324
00:11:11,249 --> 00:11:13,229
to be slightly longer for H a K because

325
00:11:13,229 --> 00:11:14,519
the H was correct

326
00:11:14,519 --> 00:11:16,619
how much time well I measured it with a

327
00:11:16,619 --> 00:11:18,779
saline logic analyzer we see about three

328
00:11:18,779 --> 00:11:20,819
microseconds three microseconds is

329
00:11:20,819 --> 00:11:23,249
something like 333 kilohertz so if you

330
00:11:23,249 --> 00:11:24,269
have something that's running at say a

331
00:11:24,269 --> 00:11:27,269
megahertz like an eighty tiny internal

332
00:11:27,269 --> 00:11:28,799
oscillator you will be able to measure

333
00:11:28,799 --> 00:11:31,559
this type of difference and all you have

334
00:11:31,559 --> 00:11:33,299
to do at that point is then go through

335
00:11:33,299 --> 00:11:34,829
all of your characters so instead of

336
00:11:34,829 --> 00:11:36,479
brute forcing the entire key space

337
00:11:36,479 --> 00:11:38,009
you're only brute forcing the first

338
00:11:38,009 --> 00:11:40,079
character it's saying oh this character

339
00:11:40,079 --> 00:11:41,789
takes slightly longer than all the other

340
00:11:41,789 --> 00:11:43,319
characters and now we know your first

341
00:11:43,319 --> 00:11:45,089
character is then you go on to your

342
00:11:45,089 --> 00:11:46,559
second character and you perform the

343
00:11:46,559 --> 00:11:49,079
same loop this is absolutely incredible

344
00:11:49,079 --> 00:11:51,509
this is a very simple timing attack it's

345
00:11:51,509 --> 00:11:52,979
been known for a long time but it's

346
00:11:52,979 --> 00:11:55,589
something you can do on devices today so

347
00:11:55,589 --> 00:11:57,869
very exciting and you can use side

348
00:11:57,869 --> 00:11:59,899
channels to do a lot of other cool stuff

349
00:11:59,899 --> 00:12:02,999
for example i'll a aes an RSA key

350
00:12:02,999 --> 00:12:04,559
extraction so if you have some sort of

351
00:12:04,559 --> 00:12:06,569
key that's stored inside of your device

352
00:12:06,569 --> 00:12:08,329
maybe it's a mobile device maybe it's a

353
00:12:08,329 --> 00:12:10,379
some sort of console maybe it's a

354
00:12:10,379 --> 00:12:12,209
computer you can use these same types of

355
00:12:12,209 --> 00:12:15,119
attacks and using side channels using

356
00:12:15,119 --> 00:12:16,049
the various side channels that we

357
00:12:16,049 --> 00:12:17,489
mentioned before and and hopefully

358
00:12:17,489 --> 00:12:20,629
others that some of you will create and

359
00:12:20,629 --> 00:12:23,639
think about you can extract all sorts of

360
00:12:23,639 --> 00:12:26,699
things some of the tools that i would

361
00:12:26,699 --> 00:12:28,589
suggest that i've used the chip

362
00:12:28,589 --> 00:12:29,999
whisperer is an amazing tool from kala

363
00:12:29,999 --> 00:12:33,839
no flint it's inexpensive has an fpga

364
00:12:33,839 --> 00:12:36,209
built-in and if he's created an amazing

365
00:12:36,209 --> 00:12:38,459
videos tutorials online so much

366
00:12:38,459 --> 00:12:40,259
information that you can use online to

367
00:12:40,259 --> 00:12:41,699
really learn how to pull off these

368
00:12:41,699 --> 00:12:44,729
attacks and he's just doing he's doing a

369
00:12:44,729 --> 00:12:46,409
great job really explaining how a lot of

370
00:12:46,409 --> 00:12:48,059
these things work as well as providing

371
00:12:48,059 --> 00:12:49,979
open source tool chain open source

372
00:12:49,979 --> 00:12:51,569
hardware open source software that you

373
00:12:51,569 --> 00:12:53,009
can perform all this stuff and he's

374
00:12:53,009 --> 00:12:54,539
using real targets which is another

375
00:12:54,539 --> 00:12:56,039
thing i really appreciate is that he's

376
00:12:56,039 --> 00:12:57,539
grabbing actual chips that many people

377
00:12:57,539 --> 00:12:58,829
are using and demonstrating how you can

378
00:12:58,829 --> 00:13:01,199
actually perform those attacks if you

379
00:13:01,199 --> 00:13:02,399
want to start small if you want to start

380
00:13:02,399 --> 00:13:04,199
on maybe a cheaper scale you can buy the

381
00:13:04,199 --> 00:13:08,279
istick it's $25 for an ice 40 fpga and

382
00:13:08,279 --> 00:13:10,409
you can perform these types of tax with

383
00:13:10,409 --> 00:13:11,550
a nice stick

384
00:13:11,550 --> 00:13:14,610
very cool stuff an oscilloscope right uh

385
00:13:14,610 --> 00:13:17,760
I they're very inexpensive again these

386
00:13:17,760 --> 00:13:19,140
are also starting maybe two hundred

387
00:13:19,140 --> 00:13:20,310
three hundred dollars and you can get

388
00:13:20,310 --> 00:13:23,250
something and extremely powerful a

389
00:13:23,250 --> 00:13:25,890
really cool Sayle a logic analyzer say

390
00:13:25,890 --> 00:13:27,270
liya is on the more expensive side of

391
00:13:27,270 --> 00:13:28,970
logic analyzers but I love this software

392
00:13:28,970 --> 00:13:30,990
but there's plenty of other logic

393
00:13:30,990 --> 00:13:32,460
analyzers that you can use there's open

394
00:13:32,460 --> 00:13:33,720
source software like cig rock that you

395
00:13:33,720 --> 00:13:37,200
can use and you can start doing these

396
00:13:37,200 --> 00:13:39,480
types of really cool attacks now a side

397
00:13:39,480 --> 00:13:41,700
channel is one area but there's also a

398
00:13:41,700 --> 00:13:43,830
fault injection and I think we talked

399
00:13:43,830 --> 00:13:45,510
about where we're interested in

400
00:13:45,510 --> 00:13:47,130
intentional fault injection where we can

401
00:13:47,130 --> 00:13:49,410
might where we can extract secrets or

402
00:13:49,410 --> 00:13:50,970
modify a device to do something

403
00:13:50,970 --> 00:13:52,610
interesting

404
00:13:52,610 --> 00:13:56,100
Jasper van Luton burg did a pretty cool

405
00:13:56,100 --> 00:13:57,870
exact all example in one of his talks

406
00:13:57,870 --> 00:13:59,460
where he was talking about fault

407
00:13:59,460 --> 00:14:01,830
injection and he used this as an example

408
00:14:01,830 --> 00:14:04,530
he used a pinball machine and a cool

409
00:14:04,530 --> 00:14:06,510
fault injection attack on a pinball

410
00:14:06,510 --> 00:14:08,760
machine is tilt right if you can tilt

411
00:14:08,760 --> 00:14:10,500
this you can make the ball maybe go

412
00:14:10,500 --> 00:14:12,510
somewhere that it shouldn't even though

413
00:14:12,510 --> 00:14:13,680
normally you're only supposed to be

414
00:14:13,680 --> 00:14:15,600
using let's say those those flappers on

415
00:14:15,600 --> 00:14:18,930
the side so what are some types of fault

416
00:14:18,930 --> 00:14:20,700
injection attacks and if we look at all

417
00:14:20,700 --> 00:14:21,720
the stuff we that we did with the shy

418
00:14:21,720 --> 00:14:22,980
channel we can do the same thing with

419
00:14:22,980 --> 00:14:24,210
fault injection but now instead of

420
00:14:24,210 --> 00:14:26,250
receiving we're more transmitting so

421
00:14:26,250 --> 00:14:29,190
some cool examples there's an

422
00:14:29,190 --> 00:14:30,780
interesting example of there's multiple

423
00:14:30,780 --> 00:14:33,120
identity of examples of cracking safes

424
00:14:33,120 --> 00:14:35,910
using fault injection this safe you can

425
00:14:35,910 --> 00:14:37,230
actually do the same type of side

426
00:14:37,230 --> 00:14:38,970
channel analysis you can see how long

427
00:14:38,970 --> 00:14:41,310
does it take if I enter a 1 1 1 1 verse

428
00:14:41,310 --> 00:14:44,370
a to 1 1 1 if the 2 is correct then it

429
00:14:44,370 --> 00:14:46,110
will take Lee take a little bit longer

430
00:14:46,110 --> 00:14:47,910
because now it says 2 is correct I'm now

431
00:14:47,910 --> 00:14:49,860
going to go back and check is this next

432
00:14:49,860 --> 00:14:51,330
character correct so we'll take a little

433
00:14:51,330 --> 00:14:51,720
longer

434
00:14:51,720 --> 00:14:55,110
however this specific safe has some

435
00:14:55,110 --> 00:14:56,760
protection mechanism against that so

436
00:14:56,760 --> 00:14:59,070
every time that you actually enter a pin

437
00:14:59,070 --> 00:15:01,560
an incorrect pin it then writes to

438
00:15:01,560 --> 00:15:04,740
EEPROM and says oh this person performed

439
00:15:04,740 --> 00:15:06,570
an incorrect pin and I'm only going to

440
00:15:06,570 --> 00:15:08,190
I'm gonna have a timeout it's kind of

441
00:15:08,190 --> 00:15:09,210
like going on your phone if you're

442
00:15:09,210 --> 00:15:10,470
trying to enter the wrong code over and

443
00:15:10,470 --> 00:15:12,210
over and over again it will start to

444
00:15:12,210 --> 00:15:16,160
back off or it'll have a time delay so

445
00:15:16,160 --> 00:15:18,720
what they did was they said there's also

446
00:15:18,720 --> 00:15:20,640
a reset attack where you can then reset

447
00:15:20,640 --> 00:15:22,550
the chip so that it doesn't

448
00:15:22,550 --> 00:15:23,870
member so it doesn't remember oh this

449
00:15:23,870 --> 00:15:25,250
person just tried three incorrect codes

450
00:15:25,250 --> 00:15:28,220
make them wait ten minutes however they

451
00:15:28,220 --> 00:15:29,240
thought about they thought about that

452
00:15:29,240 --> 00:15:30,529
and said no we're going to write to the

453
00:15:30,529 --> 00:15:31,970
EEPROM and say this person just an

454
00:15:31,970 --> 00:15:33,470
incorrect code so even if they try a

455
00:15:33,470 --> 00:15:35,120
reset attack and they try to reset this

456
00:15:35,120 --> 00:15:37,070
chip we're going to know that and we're

457
00:15:37,070 --> 00:15:39,019
still gonna know exactly how many times

458
00:15:39,019 --> 00:15:40,610
they did that but interesting thing

459
00:15:40,610 --> 00:15:43,430
about EEPROM it's electrically erasable

460
00:15:43,430 --> 00:15:45,320
programmable programmable read-only

461
00:15:45,320 --> 00:15:47,480
memory which makes no sense because how

462
00:15:47,480 --> 00:15:49,730
does that read-only just call it

463
00:15:49,730 --> 00:15:52,790
something else but okay the way EEPROM

464
00:15:52,790 --> 00:15:54,769
works is that in order to write to it

465
00:15:54,769 --> 00:15:56,089
you must first erase it

466
00:15:56,089 --> 00:15:58,910
so if you can accurately time that and

467
00:15:58,910 --> 00:16:02,450
let's say you enter an incorrect code so

468
00:16:02,450 --> 00:16:04,760
now that be prompt turns to one and then

469
00:16:04,760 --> 00:16:06,170
you can turn another incorrect code now

470
00:16:06,170 --> 00:16:07,640
that you problem turns to two and now

471
00:16:07,640 --> 00:16:08,570
you're about to enter another code

472
00:16:08,570 --> 00:16:09,890
that's about to lock you out for five

473
00:16:09,890 --> 00:16:10,310
minutes

474
00:16:10,310 --> 00:16:12,579
well if you can time it accurately and

475
00:16:12,579 --> 00:16:15,790
which you you can all of this stuff is

476
00:16:15,790 --> 00:16:18,740
time dependent then you can say I am

477
00:16:18,740 --> 00:16:20,720
going to wait for the EEPROM to start

478
00:16:20,720 --> 00:16:24,190
first erasing that to two is zero and

479
00:16:24,190 --> 00:16:27,380
then reset and before it has the chance

480
00:16:27,380 --> 00:16:29,839
to then program you've now reset that

481
00:16:29,839 --> 00:16:31,250
counter and you can perform your attack

482
00:16:31,250 --> 00:16:33,079
again and then you brute force you put

483
00:16:33,079 --> 00:16:34,459
on the same side channel attack or

484
00:16:34,459 --> 00:16:35,600
timing analysis that we did initially

485
00:16:35,600 --> 00:16:38,510
and you've now cracked this UL security

486
00:16:38,510 --> 00:16:41,270
listed safe there's an excellent I've

487
00:16:41,270 --> 00:16:44,060
linked to the to the video someone else

488
00:16:44,060 --> 00:16:46,730
perform this attack at Def Con very cool

489
00:16:46,730 --> 00:16:48,440
and just really interesting to see the

490
00:16:48,440 --> 00:16:50,120
types of faults that can be done in

491
00:16:50,120 --> 00:16:51,980
conjunction with side channel analysis

492
00:16:51,980 --> 00:16:54,470
power analysis time analysis so just to

493
00:16:54,470 --> 00:16:55,579
talk about some of the other cool

494
00:16:55,579 --> 00:16:57,350
physical phenomena around fault

495
00:16:57,350 --> 00:17:00,170
injection a really cool paper on

496
00:17:00,170 --> 00:17:02,390
attacking drones and controlling drones

497
00:17:02,390 --> 00:17:04,640
using ultrasound so all of all of our

498
00:17:04,640 --> 00:17:06,530
drones they have I am use right these

499
00:17:06,530 --> 00:17:07,609
are accelerometers gyroscopes

500
00:17:07,609 --> 00:17:09,230
magnetometers that are measuring okay

501
00:17:09,230 --> 00:17:10,819
where am I the nice thing about drone

502
00:17:10,819 --> 00:17:12,230
the reasons so cheap is because there's

503
00:17:12,230 --> 00:17:14,059
really just a little micro controller

504
00:17:14,059 --> 00:17:15,949
and an IMU that's controlling everything

505
00:17:15,949 --> 00:17:18,589
it's saying oh that's that's unfortunate

506
00:17:18,589 --> 00:17:21,020
that my left front wing is really heavy

507
00:17:21,020 --> 00:17:23,900
or propeller I'm going to account for

508
00:17:23,900 --> 00:17:25,369
that because I see my dryer scripts

509
00:17:25,369 --> 00:17:27,470
telling me oh I'm like I'm going down so

510
00:17:27,470 --> 00:17:31,400
the the CPU well does I know let me add

511
00:17:31,400 --> 00:17:33,350
some more power here and spin up and

512
00:17:33,350 --> 00:17:35,300
that's how you get that accuracy but a

513
00:17:35,300 --> 00:17:36,020
lot of these

514
00:17:36,020 --> 00:17:38,060
MEMS accelerometers and gyroscopes have

515
00:17:38,060 --> 00:17:39,410
resonant frequencies that if you hit

516
00:17:39,410 --> 00:17:41,600
with ultrasound you can make the device

517
00:17:41,600 --> 00:17:42,980
believe it's somewhere else or it's in a

518
00:17:42,980 --> 00:17:44,030
different position than it actually is

519
00:17:44,030 --> 00:17:45,770
and you can now control it to do

520
00:17:45,770 --> 00:17:47,860
something else

521
00:17:47,860 --> 00:17:50,900
there's temperature temperature is super

522
00:17:50,900 --> 00:17:54,020
cool there's the cold boot attack if we

523
00:17:54,020 --> 00:17:55,910
take a look at RAM wasn't let's say what

524
00:17:55,910 --> 00:17:57,800
you log into your computer you're typing

525
00:17:57,800 --> 00:17:59,840
in your password and your password gets

526
00:17:59,840 --> 00:18:01,250
stored in memory so that it can decrypt

527
00:18:01,250 --> 00:18:02,510
your hard drive because all of our hard

528
00:18:02,510 --> 00:18:05,090
drives are encrypted today and that is

529
00:18:05,090 --> 00:18:06,200
stored in memory and then maybe you

530
00:18:06,200 --> 00:18:08,120
close your computer but the key is still

531
00:18:08,120 --> 00:18:09,590
stored in memory now no one should be

532
00:18:09,590 --> 00:18:10,910
able to actually access your data

533
00:18:10,910 --> 00:18:12,050
because when they open it they self to

534
00:18:12,050 --> 00:18:14,110
reenter a password to actually log in

535
00:18:14,110 --> 00:18:16,700
but your key is in memory so can we pull

536
00:18:16,700 --> 00:18:18,560
that off the problem is I could try to

537
00:18:18,560 --> 00:18:20,060
pull your memory out of your computer

538
00:18:20,060 --> 00:18:24,830
but memory is a vault right it'll it

539
00:18:24,830 --> 00:18:26,900
will disappear in a second after pulling

540
00:18:26,900 --> 00:18:28,850
it out but inside of memory if we're

541
00:18:28,850 --> 00:18:31,160
looking at DRAM DRAM was really just a

542
00:18:31,160 --> 00:18:33,710
grid of transistors and capacitors a

543
00:18:33,710 --> 00:18:35,750
single transistor and capacitor is the

544
00:18:35,750 --> 00:18:37,550
capacitors holding a state a bit of

545
00:18:37,550 --> 00:18:39,020
information it's how there are 1 or 0

546
00:18:39,020 --> 00:18:41,120
and that is constantly being refreshed

547
00:18:41,120 --> 00:18:43,520
now the capacitor is really just holding

548
00:18:43,520 --> 00:18:45,530
it's just if there's voltage or there's

549
00:18:45,530 --> 00:18:46,760
really just a difference of electrons

550
00:18:46,760 --> 00:18:48,710
between the two sides right between the

551
00:18:48,710 --> 00:18:49,310
two poles

552
00:18:49,310 --> 00:18:52,400
now electrons will if you remove power

553
00:18:52,400 --> 00:18:54,380
that will leak and you'll have

554
00:18:54,380 --> 00:18:56,600
eventually they will equalize and have

555
00:18:56,600 --> 00:18:58,700
no voltage on them but if you cool it

556
00:18:58,700 --> 00:19:00,440
down now you are now actually cooling

557
00:19:00,440 --> 00:19:02,720
down that capacitor and making it take

558
00:19:02,720 --> 00:19:05,090
much much much longer so you can use

559
00:19:05,090 --> 00:19:08,480
canned air upside down get your memory

560
00:19:08,480 --> 00:19:10,310
to be really really really cold and form

561
00:19:10,310 --> 00:19:12,500
what's called a cold boot attack you can

562
00:19:12,500 --> 00:19:14,120
then pull that memory out and you have

563
00:19:14,120 --> 00:19:15,680
one or two minutes where you insert it

564
00:19:15,680 --> 00:19:17,420
into another device and then use just

565
00:19:17,420 --> 00:19:19,130
the RAM and pull all the contents out

566
00:19:19,130 --> 00:19:20,960
extract your key and now you've pulled

567
00:19:20,960 --> 00:19:23,990
the keys out Bunny has done a really

568
00:19:23,990 --> 00:19:26,110
cool demonstration with resetting pic18

569
00:19:26,110 --> 00:19:29,420
818 F tips the fuses on them we don't

570
00:19:29,420 --> 00:19:31,130
actually have fuses anymore just FYI

571
00:19:31,130 --> 00:19:33,980
they're actually fuses so the fuses in

572
00:19:33,980 --> 00:19:35,810
our microcontrollers are resettable fuse

573
00:19:35,810 --> 00:19:38,090
is not actually resettable right if you

574
00:19:38,090 --> 00:19:40,010
break a fuse you have to replace it

575
00:19:40,010 --> 00:19:42,860
these are efuses so what these are doing

576
00:19:42,860 --> 00:19:45,560
is in the pic for example these are set

577
00:19:45,560 --> 00:19:48,230
via ultraviolet light or reset via

578
00:19:48,230 --> 00:19:49,190
ultraviolet light which

579
00:19:49,190 --> 00:19:50,900
how you can actually reset the fuses so

580
00:19:50,900 --> 00:19:53,240
what bunny did was he had a chip it had

581
00:19:53,240 --> 00:19:54,800
firmware that he wanted to extract out

582
00:19:54,800 --> 00:19:57,170
of there but there was a few set that

583
00:19:57,170 --> 00:19:58,520
said no I'm not gonna allow lat any

584
00:19:58,520 --> 00:20:01,160
debugger or external device be able to

585
00:20:01,160 --> 00:20:04,280
extract any any firmware so he opened up

586
00:20:04,280 --> 00:20:06,110
the chip he drilled inside of it he

587
00:20:06,110 --> 00:20:08,930
covered part with tape with electrical

588
00:20:08,930 --> 00:20:12,800
tape and then and then shown a UV light

589
00:20:12,800 --> 00:20:15,410
on the rest to reset the fuses because

590
00:20:15,410 --> 00:20:17,420
it's UV light that resets them and was

591
00:20:17,420 --> 00:20:19,220
able to then connect and extract

592
00:20:19,220 --> 00:20:21,740
information so ultraviolet light

593
00:20:21,740 --> 00:20:25,370
temperature visible light just last week

594
00:20:25,370 --> 00:20:27,830
two weeks ago like commands comm came

595
00:20:27,830 --> 00:20:29,600
out demonstrating some sort of photo

596
00:20:29,600 --> 00:20:31,580
acoustic effect which I don't understand

597
00:20:31,580 --> 00:20:34,670
I will someone will have to explain to

598
00:20:34,670 --> 00:20:36,740
me but essentially being able to use a

599
00:20:36,740 --> 00:20:39,980
laser hit a microphone and for some

600
00:20:39,980 --> 00:20:42,580
reason that laser light turns into sound

601
00:20:42,580 --> 00:20:44,800
someone please explain that to me later

602
00:20:44,800 --> 00:20:47,600
but here's the link so let's let's just

603
00:20:47,600 --> 00:20:49,400
go back to our code here and see what we

604
00:20:49,400 --> 00:20:50,690
can do can we do something cool here

605
00:20:50,690 --> 00:20:56,350
what's wrong with this code nothing

606
00:20:56,350 --> 00:20:59,120
except how does this happen so we looked

607
00:20:59,120 --> 00:21:00,770
at password equals equals guest before

608
00:21:00,770 --> 00:21:02,420
and that was a string compare that we

609
00:21:02,420 --> 00:21:04,490
saw but if we take a higher level look

610
00:21:04,490 --> 00:21:06,380
we can take a look at the assembly

611
00:21:06,380 --> 00:21:08,030
instructions here so we have a call

612
00:21:08,030 --> 00:21:10,700
string compared at the top which was

613
00:21:10,700 --> 00:21:12,020
when we're string when we're comparing

614
00:21:12,020 --> 00:21:14,210
our function now that itself takes some

615
00:21:14,210 --> 00:21:17,000
time and once that's assuming that's

616
00:21:17,000 --> 00:21:20,720
true then we will end up we will end up

617
00:21:20,720 --> 00:21:22,730
skipping this branch instruction if it's

618
00:21:22,730 --> 00:21:24,650
false if our password is incorrect we

619
00:21:24,650 --> 00:21:26,390
will actually perform a branch and then

620
00:21:26,390 --> 00:21:28,790
end up at this other location this 3b

621
00:21:28,790 --> 00:21:31,370
seven and we will skip the good job

622
00:21:31,370 --> 00:21:33,770
message well what's really interesting

623
00:21:33,770 --> 00:21:37,040
is with fault injection you can now skip

624
00:21:37,040 --> 00:21:38,690
instructions all right there are ways

625
00:21:38,690 --> 00:21:39,710
there are techniques that you can use

626
00:21:39,710 --> 00:21:41,840
such as voltage glitching or clock

627
00:21:41,840 --> 00:21:44,660
glitching we'll get here we can do

628
00:21:44,660 --> 00:21:46,610
essentially a voltage glitch and all

629
00:21:46,610 --> 00:21:49,160
you're doing is you're removing voltage

630
00:21:49,160 --> 00:21:52,130
from the chip from part of the CPU for

631
00:21:52,130 --> 00:21:54,110
just a moment as it's performing that

632
00:21:54,110 --> 00:21:56,810
instruction instructions take time so

633
00:21:56,810 --> 00:21:58,220
you can perform a clock glitch where you

634
00:21:58,220 --> 00:22:01,280
send a clock let's say you're you know

635
00:22:01,280 --> 00:22:03,380
spec's maybe a 16 megahertz clock if you

636
00:22:03,380 --> 00:22:05,720
can glitch it's going to do everything

637
00:22:05,720 --> 00:22:07,880
on a rising edge so if you can say send

638
00:22:07,880 --> 00:22:09,530
a rising edge but not give it the time

639
00:22:09,530 --> 00:22:11,660
it needs to execute everything because

640
00:22:11,660 --> 00:22:13,220
everything is sequentially sequential

641
00:22:13,220 --> 00:22:14,960
logic here you can then skip that

642
00:22:14,960 --> 00:22:17,950
instruction this is actually extremely

643
00:22:17,950 --> 00:22:20,870
extremely easy you'll all be able to do

644
00:22:20,870 --> 00:22:23,780
this today and it looks like this

645
00:22:23,780 --> 00:22:25,370
basically you are giving a voltage

646
00:22:25,370 --> 00:22:26,840
typically you want to give a very low

647
00:22:26,840 --> 00:22:28,430
voltage and traditionally in these

648
00:22:28,430 --> 00:22:29,900
attacks at least in voltage glitching

649
00:22:29,900 --> 00:22:31,460
attacks you want to remove any bypass

650
00:22:31,460 --> 00:22:34,280
capacitors to prevent decoupling of

651
00:22:34,280 --> 00:22:36,560
decoupling so normally you have a

652
00:22:36,560 --> 00:22:38,120
voltage regulator and that's applying

653
00:22:38,120 --> 00:22:39,500
your power to your chip and then we have

654
00:22:39,500 --> 00:22:41,030
some bypass capacitors of the regulator

655
00:22:41,030 --> 00:22:43,010
can't provide enough power for the peak

656
00:22:43,010 --> 00:22:45,770
for some geek moment that those bypass

657
00:22:45,770 --> 00:22:47,600
capacitors will help you but this is

658
00:22:47,600 --> 00:22:49,910
essentially a tilt right by removing the

659
00:22:49,910 --> 00:22:51,620
voltage for just a moment just an

660
00:22:51,620 --> 00:22:53,000
instruction and removing the bypass

661
00:22:53,000 --> 00:22:53,690
capacitors

662
00:22:53,690 --> 00:22:56,540
so the CPU starves you will then skip an

663
00:22:56,540 --> 00:22:58,070
instruction assuming that your glitch

664
00:22:58,070 --> 00:23:00,110
voltage is low enough and your pulse

665
00:23:00,110 --> 00:23:03,290
width is long a long or short enough you

666
00:23:03,290 --> 00:23:04,910
will have to play with this stuff but

667
00:23:04,910 --> 00:23:06,140
the nice thing about devices like

668
00:23:06,140 --> 00:23:07,970
microcontrollers and FPGAs is that you

669
00:23:07,970 --> 00:23:09,950
can program them and you can make them

670
00:23:09,950 --> 00:23:13,700
do really cool stuff so fault injection

671
00:23:13,700 --> 00:23:14,930
we'll just look at some of the tools

672
00:23:14,930 --> 00:23:17,900
that we have we all have this thing in

673
00:23:17,900 --> 00:23:19,850
our bag which is pretty sweet so we have

674
00:23:19,850 --> 00:23:21,380
an FPGA that we can perform these types

675
00:23:21,380 --> 00:23:24,320
of attacks today again chip whisperer

676
00:23:24,320 --> 00:23:27,350
excellent for fault injection as I said

677
00:23:27,350 --> 00:23:29,660
the ice stick or the ice 40 another

678
00:23:29,660 --> 00:23:32,000
inexpensive $25 device that you can you

679
00:23:32,000 --> 00:23:34,730
can perform these types of attacks I'm

680
00:23:34,730 --> 00:23:36,920
not going to do a lot of FPGA I'm gonna

681
00:23:36,920 --> 00:23:38,810
go to a lot of more FPGA talks and learn

682
00:23:38,810 --> 00:23:40,910
from other people here and there are a

683
00:23:40,910 --> 00:23:42,920
ton of FPGA talks this year which was a

684
00:23:42,920 --> 00:23:46,370
surprise and very pleasant surprise well

685
00:23:46,370 --> 00:23:49,400
look super briefly at some basic code

686
00:23:49,400 --> 00:23:51,410
something that sort of like broke my

687
00:23:51,410 --> 00:23:52,880
brain when I started looking at FPGA is

688
00:23:52,880 --> 00:23:55,910
and very log and HDL and that this code

689
00:23:55,910 --> 00:23:57,530
is running in parallel so X is equal to

690
00:23:57,530 --> 00:23:59,960
1 Y is equal to X plus 1 you'd expect Y

691
00:23:59,960 --> 00:24:02,090
is equal to 2 but Y is not equal to 2

692
00:24:02,090 --> 00:24:04,040
until the next instruction because all

693
00:24:04,040 --> 00:24:05,570
of that stuff is running in parallel so

694
00:24:05,570 --> 00:24:08,720
that's pretty interesting and why is an

695
00:24:08,720 --> 00:24:10,400
FPGA I was sort of confused why is an

696
00:24:10,400 --> 00:24:13,520
FPGA a field programmable gate array how

697
00:24:13,520 --> 00:24:14,750
is it any more program

698
00:24:14,750 --> 00:24:16,460
and say my microcontroller right how's

699
00:24:16,460 --> 00:24:17,600
it born programmable in my Arduino

700
00:24:17,600 --> 00:24:20,270
except for the fact that in your say uno

701
00:24:20,270 --> 00:24:22,250
or your 80 mega you have all these

702
00:24:22,250 --> 00:24:24,740
different blocks right you have your you

703
00:24:24,740 --> 00:24:28,670
arts your spy your Ram your CPU your ALU

704
00:24:28,670 --> 00:24:30,380
all these different pieces are taking

705
00:24:30,380 --> 00:24:32,480
transistor space or silicon right there

706
00:24:32,480 --> 00:24:33,770
taking silicon space that you can then

707
00:24:33,770 --> 00:24:36,110
replace with something else maybe you

708
00:24:36,110 --> 00:24:37,940
wanted to make a rainbow table maybe you

709
00:24:37,940 --> 00:24:39,350
want to generate rainbow tables instead

710
00:24:39,350 --> 00:24:42,080
of having SRAM maybe you wanted to make

711
00:24:42,080 --> 00:24:44,690
rainbow tables instead of having UART or

712
00:24:44,690 --> 00:24:47,240
a spy or I squared C or USB all of these

713
00:24:47,240 --> 00:24:50,450
devices can be reconfigured to do really

714
00:24:50,450 --> 00:24:51,740
interesting things and the nice thing

715
00:24:51,740 --> 00:24:53,960
with FPGA is when performing these types

716
00:24:53,960 --> 00:24:56,210
of attacks is that you get extremely

717
00:24:56,210 --> 00:24:59,060
precise clock extremely precise clock so

718
00:24:59,060 --> 00:25:00,260
when you're trying to do very precise

719
00:25:00,260 --> 00:25:02,960
attacks you can the FPGA will be very

720
00:25:02,960 --> 00:25:05,120
beneficial however you don't need to use

721
00:25:05,120 --> 00:25:08,240
an FPGA one thing that you will need for

722
00:25:08,240 --> 00:25:09,260
something like this is a fast

723
00:25:09,260 --> 00:25:11,210
multiplexer Chris Gro lynskey found this

724
00:25:11,210 --> 00:25:13,400
guy the max for six one nine which

725
00:25:13,400 --> 00:25:15,740
allows something like 10 to 20

726
00:25:15,740 --> 00:25:18,860
nanosecond times to switch which is

727
00:25:18,860 --> 00:25:20,390
absolutely incredible when you're

728
00:25:20,390 --> 00:25:22,760
talking about muxes so if you're doing

729
00:25:22,760 --> 00:25:24,980
something like switching a clock from a

730
00:25:24,980 --> 00:25:27,500
your normal clock to a different clock

731
00:25:27,500 --> 00:25:29,210
then you can use the max or Refuge

732
00:25:29,210 --> 00:25:30,920
switching from a voltage say your normal

733
00:25:30,920 --> 00:25:33,290
3.3 volts or 5 volts and you want to

734
00:25:33,290 --> 00:25:35,570
give point 2 volts to this device then

735
00:25:35,570 --> 00:25:36,830
you can use this MUX and this will

736
00:25:36,830 --> 00:25:39,020
switch for 10 nanoseconds and then

737
00:25:39,020 --> 00:25:40,790
switch back and that will be able to

738
00:25:40,790 --> 00:25:42,140
deplete your microcontroller with the

739
00:25:42,140 --> 00:25:45,140
power for the power to skip a specific

740
00:25:45,140 --> 00:25:46,760
instruction Oh

741
00:25:46,760 --> 00:25:49,070
teensy ok the new teensy 4 is just a

742
00:25:49,070 --> 00:25:51,710
beast right 600 megahertz but you can

743
00:25:51,710 --> 00:25:53,840
use even a teensy 3 to do these types of

744
00:25:53,840 --> 00:25:55,580
attacks so originally I was using the

745
00:25:55,580 --> 00:25:57,350
FPGA to do a lot of these attacks and I

746
00:25:57,350 --> 00:25:58,730
just wanted like can I use a teensy

747
00:25:58,730 --> 00:26:00,050
because that's something that many of us

748
00:26:00,050 --> 00:26:03,170
have and the answer is yes I'll provide

749
00:26:03,170 --> 00:26:05,780
a bunch of code so you can perform fault

750
00:26:05,780 --> 00:26:08,180
injection side channel analysis using a

751
00:26:08,180 --> 00:26:12,500
teensy in the 3 series so one more

752
00:26:12,500 --> 00:26:13,820
example that I think is pretty

753
00:26:13,820 --> 00:26:17,020
interesting what's wrong with this code

754
00:26:17,020 --> 00:26:19,730
nothing except for the fact that the

755
00:26:19,730 --> 00:26:22,010
password is right here the password has

756
00:26:22,010 --> 00:26:23,330
to be stored somewhere right it might be

757
00:26:23,330 --> 00:26:25,130
hashed in this case it's not hashed so

758
00:26:25,130 --> 00:26:26,980
that that is an issue and you

759
00:26:26,980 --> 00:26:28,780
wouldn't want to typically you want to

760
00:26:28,780 --> 00:26:30,700
have hash password if it's in your code

761
00:26:30,700 --> 00:26:32,830
but how can we talk to our chip

762
00:26:32,830 --> 00:26:35,440
maybe we can extract that password so to

763
00:26:35,440 --> 00:26:37,660
actually extract a password we can use

764
00:26:37,660 --> 00:26:40,150
something like a debugger so with you

765
00:26:40,150 --> 00:26:41,500
know you can get something like they

766
00:26:41,500 --> 00:26:43,870
have no ice you can use a JTAG or a Sega

767
00:26:43,870 --> 00:26:45,820
or J link things like that to basically

768
00:26:45,820 --> 00:26:47,890
communicate with the with the chip the

769
00:26:47,890 --> 00:26:50,380
chip has a boot rom it has debug wire

770
00:26:50,380 --> 00:26:51,730
and it has these features that allow you

771
00:26:51,730 --> 00:26:53,559
to actually access the flash inside and

772
00:26:53,559 --> 00:26:55,540
extract that now that itself is not an

773
00:26:55,540 --> 00:26:57,429
attack these are intentional right these

774
00:26:57,429 --> 00:26:59,110
chips are designed so that you can

775
00:26:59,110 --> 00:27:01,570
access the data the inside and verify

776
00:27:01,570 --> 00:27:04,240
whether it's correct or not except for

777
00:27:04,240 --> 00:27:05,440
the fact that they also have these

778
00:27:05,440 --> 00:27:08,140
features called lock bits or fuses and

779
00:27:08,140 --> 00:27:10,660
these will allow the designer to lock

780
00:27:10,660 --> 00:27:12,880
their protect their firmware their

781
00:27:12,880 --> 00:27:15,460
memory and the idea is to prevent other

782
00:27:15,460 --> 00:27:16,809
people from being able to access this

783
00:27:16,809 --> 00:27:20,380
data so if we look inside of here part

784
00:27:20,380 --> 00:27:22,210
of this stuff is the debug wire and the

785
00:27:22,210 --> 00:27:25,900
programming uses parallel and spy well

786
00:27:25,900 --> 00:27:28,390
all of this is also sequential all the

787
00:27:28,390 --> 00:27:30,160
on chip boot ROM the boot ROM itself

788
00:27:30,160 --> 00:27:31,780
that's protecting your chip is also

789
00:27:31,780 --> 00:27:33,940
sequential logic right it is running

790
00:27:33,940 --> 00:27:35,440
essentially a clock cycle after clock

791
00:27:35,440 --> 00:27:37,809
cycle after clock cycle so why can't you

792
00:27:37,809 --> 00:27:40,390
glitch this as well this is an example

793
00:27:40,390 --> 00:27:42,640
from Chris currency's set up several

794
00:27:42,640 --> 00:27:44,410
years ago he demonstrated by passing the

795
00:27:44,410 --> 00:27:46,990
NXP LPC bootloader which is used in a

796
00:27:46,990 --> 00:27:49,809
ton of chips it's used in various locks

797
00:27:49,809 --> 00:27:51,640
all sorts of interesting things and

798
00:27:51,640 --> 00:27:53,230
essentially by removing the bypass

799
00:27:53,230 --> 00:27:54,700
capacitors and performing a voltage

800
00:27:54,700 --> 00:27:55,120
glitch

801
00:27:55,120 --> 00:27:57,610
you can then bypass the boot protection

802
00:27:57,610 --> 00:27:59,350
that actually protects the flash if

803
00:27:59,350 --> 00:28:01,780
you're trying to say release a product

804
00:28:01,780 --> 00:28:03,910
and store some keys or some secret store

805
00:28:03,910 --> 00:28:05,410
some firmware that might have other

806
00:28:05,410 --> 00:28:07,330
faults might have a vulnerability in it

807
00:28:07,330 --> 00:28:09,700
you can bypass all of that with a simple

808
00:28:09,700 --> 00:28:13,270
voltage glitch I hope many of you start

809
00:28:13,270 --> 00:28:14,620
getting into this I'd be happy to chat

810
00:28:14,620 --> 00:28:16,780
after there's so much in this area to be

811
00:28:16,780 --> 00:28:18,940
done and so much to talk about but we

812
00:28:18,940 --> 00:28:21,610
have limited time I think one thing that

813
00:28:21,610 --> 00:28:23,169
I've been playing with recently which I

814
00:28:23,169 --> 00:28:24,669
think is pretty interesting is really

815
00:28:24,669 --> 00:28:26,919
evading tampering so normally with all

816
00:28:26,919 --> 00:28:28,210
the attacks that have been done so far

817
00:28:28,210 --> 00:28:30,280
you've had to modify your board you've

818
00:28:30,280 --> 00:28:31,630
had to let's say you remove the lock

819
00:28:31,630 --> 00:28:34,150
from the door or open the safe that's

820
00:28:34,150 --> 00:28:35,559
convenient I mean you have to open the

821
00:28:35,559 --> 00:28:37,240
safe and then remove bypass capacitors

822
00:28:37,240 --> 00:28:38,740
to perform these attacks which doesn't

823
00:28:38,740 --> 00:28:39,090
really

824
00:28:39,090 --> 00:28:41,910
cents so I'm working on how can we

825
00:28:41,910 --> 00:28:43,710
actually evade tampering

826
00:28:43,710 --> 00:28:45,660
so normally you either have to modify

827
00:28:45,660 --> 00:28:47,730
the crystal and actually provide your

828
00:28:47,730 --> 00:28:49,590
own clock or you have to remove the

829
00:28:49,590 --> 00:28:51,630
bypass capacitors or capacitors around

830
00:28:51,630 --> 00:28:54,330
the around the microcontroller because

831
00:28:54,330 --> 00:28:55,590
the capacitors are storing all this

832
00:28:55,590 --> 00:28:58,590
extra energy well what we want to

833
00:28:58,590 --> 00:29:00,420
actually do is a truly non-invasive

834
00:29:00,420 --> 00:29:02,490
attack so far we've been talking about

835
00:29:02,490 --> 00:29:04,320
primarily non-invasive attacks where you

836
00:29:04,320 --> 00:29:06,030
don't actually have to modify the IC

837
00:29:06,030 --> 00:29:08,760
itself or the but really you do have to

838
00:29:08,760 --> 00:29:10,320
modify the PCB so I think that is

839
00:29:10,320 --> 00:29:11,490
somewhat invasive if you're actually

840
00:29:11,490 --> 00:29:12,870
removing screws and you're breaking

841
00:29:12,870 --> 00:29:15,180
plastic and you're sitting outside of

842
00:29:15,180 --> 00:29:17,700
someone's hotel room trying to like with

843
00:29:17,700 --> 00:29:19,440
a PCB out there so not an invasive

844
00:29:19,440 --> 00:29:22,010
attack a very simple mechanism to

845
00:29:22,010 --> 00:29:24,780
perform a truly non invasive attack is

846
00:29:24,780 --> 00:29:27,840
through a capacitor just by adding a

847
00:29:27,840 --> 00:29:30,120
capacitor to say your voltage glitch

848
00:29:30,120 --> 00:29:32,160
line and ground what you're going to do

849
00:29:32,160 --> 00:29:34,350
is you're going to add a ton of

850
00:29:34,350 --> 00:29:36,660
capacitance to the voltage glitch so

851
00:29:36,660 --> 00:29:38,520
let's say your glitch is 0.2 volts and

852
00:29:38,520 --> 00:29:41,820
your device expects 3.3 volts so you're

853
00:29:41,820 --> 00:29:43,500
normally running a 3.3 volts and then

854
00:29:43,500 --> 00:29:45,720
for 20 nanoseconds or 200 and a seconds

855
00:29:45,720 --> 00:29:46,830
you're going to give it point 2 volts

856
00:29:46,830 --> 00:29:48,720
the problem is those bypass capacitors

857
00:29:48,720 --> 00:29:50,310
inside of the device which you haven't

858
00:29:50,310 --> 00:29:53,100
touched are going to now keep that 3.3

859
00:29:53,100 --> 00:29:54,300
volts steady for just a little bit

860
00:29:54,300 --> 00:29:56,460
before they deplete except for this

861
00:29:56,460 --> 00:29:58,410
capacitor which if you use a large

862
00:29:58,410 --> 00:29:59,640
capacitors they of course some of the

863
00:29:59,640 --> 00:30:01,470
micro farad capacitor on the outside

864
00:30:01,470 --> 00:30:03,480
well that is actually going to deplete

865
00:30:03,480 --> 00:30:06,000
that is going to deplete your bypass

866
00:30:06,000 --> 00:30:09,120
capacitors for you before the MCU has

867
00:30:09,120 --> 00:30:10,740
much time to essentially execute any

868
00:30:10,740 --> 00:30:12,540
instructions and you'll be able to then

869
00:30:12,540 --> 00:30:16,290
bypass security through without any

870
00:30:16,290 --> 00:30:18,990
modification happy to talk about this

871
00:30:18,990 --> 00:30:22,710
further and I have a bunch of code here

872
00:30:22,710 --> 00:30:24,180
that you can check some stuff out and

873
00:30:24,180 --> 00:30:28,310
happy to chat afterwards thanks so much

874
00:30:29,640 --> 00:30:33,819
[Applause]

