1
00:00:00,620 --> 00:00:01,700
[Applause]

2
00:00:01,700 --> 00:00:05,819
thank you all right thank you all for

3
00:00:05,819 --> 00:00:07,649
coming and those of you watching online

4
00:00:07,649 --> 00:00:10,769
thank you for watching those of you here

5
00:00:10,769 --> 00:00:12,150
if you like it so much you want to watch

6
00:00:12,150 --> 00:00:14,190
it again give it a thumbs up it'll be

7
00:00:14,190 --> 00:00:18,869
awesome so as I said I'm Scott I'm the

8
00:00:18,869 --> 00:00:20,820
lead maintainer of circuit Python for

9
00:00:20,820 --> 00:00:29,760
Adafruit today hold on he was running

10
00:00:29,760 --> 00:00:32,668
away from me okay so I go buy 10 new

11
00:00:32,668 --> 00:00:35,460
online as I said I'm Scott I'm a

12
00:00:35,460 --> 00:00:37,530
freelance software engineer but I work

13
00:00:37,530 --> 00:00:39,809
full-time for Adafruit they're my only

14
00:00:39,809 --> 00:00:41,930
client

15
00:00:41,930 --> 00:00:47,329
this is blinka the snake it's our mascot

16
00:00:47,329 --> 00:00:50,670
really fun to have a snake puppet it's

17
00:00:50,670 --> 00:00:54,449
quite unwieldy anyway here's our plan

18
00:00:54,449 --> 00:00:57,239
today I like to up the ante I've given

19
00:00:57,239 --> 00:00:58,739
this talk before but I've never done it

20
00:00:58,739 --> 00:01:01,559
with two demos on a laptop that is not

21
00:01:01,559 --> 00:01:04,019
mine so sit tight we'll see how that

22
00:01:04,019 --> 00:01:06,030
goes so what we're gonna do is we're

23
00:01:06,030 --> 00:01:08,549
gonna start with just a circuit not

24
00:01:08,549 --> 00:01:11,369
playground but circuit Python demo you

25
00:01:11,369 --> 00:01:13,530
have those badges that we're in your

26
00:01:13,530 --> 00:01:15,210
goodie bags and I just want to give you

27
00:01:15,210 --> 00:01:17,700
a brief taste if you haven't had a

28
00:01:17,700 --> 00:01:19,020
chance to play with it what circuit

29
00:01:19,020 --> 00:01:20,850
python is and then what we're gonna do

30
00:01:20,850 --> 00:01:22,200
is we're gonna talk at the very highest

31
00:01:22,200 --> 00:01:24,420
level of circuit Python and then go down

32
00:01:24,420 --> 00:01:26,040
and talk about all the layers underneath

33
00:01:26,040 --> 00:01:28,799
it until we get down to the bottom of

34
00:01:28,799 --> 00:01:31,530
the hardware and then we'll wrap up with

35
00:01:31,530 --> 00:01:35,009
a gameboy demo which is the like you can

36
00:01:35,009 --> 00:01:37,380
make even existing hardware great with

37
00:01:37,380 --> 00:01:41,520
circuit Python okay so not a circuit

38
00:01:41,520 --> 00:01:42,899
playground because I decided to use the

39
00:01:42,899 --> 00:01:48,180
badge but let's do this so what what I

40
00:01:48,180 --> 00:01:51,090
have here is just the stock edge badge

41
00:01:51,090 --> 00:01:52,740
that we all received in our goodie bags

42
00:01:52,740 --> 00:01:55,290
and there's five neopixels at the bottom

43
00:01:55,290 --> 00:01:56,939
and I'm gonna make those turn on and I'm

44
00:01:56,939 --> 00:01:59,130
gonna show you how easy it is to do that

45
00:01:59,130 --> 00:02:02,149
so first I have just a micro USB cable

46
00:02:02,149 --> 00:02:06,509
that I'm going to plug in here and again

47
00:02:06,509 --> 00:02:10,639
this is not my computer so

48
00:02:14,370 --> 00:02:17,770
alright it pops up as this keyboard

49
00:02:17,770 --> 00:02:19,420
thing because it hasn't seen the device

50
00:02:19,420 --> 00:02:22,380
before so you can just X out of that

51
00:02:22,380 --> 00:02:25,330
let's escape and what it does is it

52
00:02:25,330 --> 00:02:28,990
shows up as a USB device so we have this

53
00:02:28,990 --> 00:02:31,300
circuit PI Drive that has showed up

54
00:02:31,300 --> 00:02:33,580
because I've plugged it in if we open it

55
00:02:33,580 --> 00:02:37,840
up we see a code dot Pi file now this is

56
00:02:37,840 --> 00:02:39,550
the scary part I've not installed any

57
00:02:39,550 --> 00:02:41,200
text editor at all so we're gonna

58
00:02:41,200 --> 00:02:45,130
actually use text edit from that comes

59
00:02:45,130 --> 00:02:48,580
on a Mac by default I did try this

60
00:02:48,580 --> 00:02:52,600
earlier I think it works and I know how

61
00:02:52,600 --> 00:02:55,840
to make the font bigger but it thinks

62
00:02:55,840 --> 00:02:57,370
I'm writing human text so it's like I

63
00:02:57,370 --> 00:03:00,100
don't know what this stuff is so this is

64
00:03:00,100 --> 00:03:02,140
the almost the exact same code that

65
00:03:02,140 --> 00:03:04,780
shipped on the badge by default we have

66
00:03:04,780 --> 00:03:06,400
some imports and we have this nice

67
00:03:06,400 --> 00:03:08,500
library called PI badger that makes

68
00:03:08,500 --> 00:03:10,200
everything available that's on the badge

69
00:03:10,200 --> 00:03:12,760
the two things that I've added here are

70
00:03:12,760 --> 00:03:16,440
accessing the pixels on the bottom and

71
00:03:16,440 --> 00:03:18,970
I've set the brightness to zero that's

72
00:03:18,970 --> 00:03:21,660
why they don't show up at all but if I

73
00:03:21,660 --> 00:03:23,950
hopefully we have sunglasses in the

74
00:03:23,950 --> 00:03:25,740
front row it might be a little bright

75
00:03:25,740 --> 00:03:28,840
but if I change it to one and then I hit

76
00:03:28,840 --> 00:03:33,400
command s it should change I can't

77
00:03:33,400 --> 00:03:37,480
actually see it that it works awesome so

78
00:03:37,480 --> 00:03:39,370
the point is is that Sergey Python is

79
00:03:39,370 --> 00:03:41,470
really easy to go get going with I

80
00:03:41,470 --> 00:03:43,830
didn't install anything on this laptop

81
00:03:43,830 --> 00:03:47,710
as I said it's not mine but it's a text

82
00:03:47,710 --> 00:03:49,450
file with a USB Drive something that

83
00:03:49,450 --> 00:03:51,700
every most people have had experience

84
00:03:51,700 --> 00:03:53,140
with and they understand and are

85
00:03:53,140 --> 00:03:55,480
comfortable with so so that's what I

86
00:03:55,480 --> 00:03:57,220
mean when I say supercharged I mean

87
00:03:57,220 --> 00:03:59,860
supercharged by making it easy to access

88
00:03:59,860 --> 00:04:02,830
your hardware so I'll show one more

89
00:04:02,830 --> 00:04:05,650
thing you know to push my luck it should

90
00:04:05,650 --> 00:04:07,900
be purple right now and let's just make

91
00:04:07,900 --> 00:04:10,570
it straight red so all I'm doing up here

92
00:04:10,570 --> 00:04:12,700
is I'm saving so I could actually do go

93
00:04:12,700 --> 00:04:18,940
file save and it's unhappy for some

94
00:04:18,940 --> 00:04:21,700
reason I think this is a TextEdit

95
00:04:21,700 --> 00:04:23,710
specific thing because I use a Mac and I

96
00:04:23,710 --> 00:04:24,560
use

97
00:04:24,560 --> 00:04:28,070
Adam and it works just fine so text

98
00:04:28,070 --> 00:04:30,590
editors can make it better so let's move

99
00:04:30,590 --> 00:04:36,889
on I don't know why it does that but

100
00:04:36,889 --> 00:04:39,050
always ejector Drive if you want to be

101
00:04:39,050 --> 00:04:41,090
friendly to it otherwise it can come

102
00:04:41,090 --> 00:04:43,690
back to bite you

103
00:04:54,879 --> 00:05:00,099
I don't want to run down my battery like

104
00:05:00,099 --> 00:05:02,490
full brightness neopixels on two colors

105
00:05:02,490 --> 00:05:04,740
will definitely run down your battery

106
00:05:04,740 --> 00:05:05,919
okay

107
00:05:05,919 --> 00:05:09,129
so let's jump back into our slides

108
00:05:09,129 --> 00:05:18,089
not from TextEdit that's a full screen

109
00:05:19,740 --> 00:05:22,689
that's our plan that's our demo okay so

110
00:05:22,689 --> 00:05:24,879
at the highest level what is circuit

111
00:05:24,879 --> 00:05:27,129
Python and we think of it too

112
00:05:27,129 --> 00:05:29,110
poor things we think of it as code and

113
00:05:29,110 --> 00:05:32,199
we also think of it as community it's a

114
00:05:32,199 --> 00:05:33,909
very important distinction especially as

115
00:05:33,909 --> 00:05:35,469
a project to lead to recognize that

116
00:05:35,469 --> 00:05:37,719
there is time and effort spent into

117
00:05:37,719 --> 00:05:39,729
making a good community we'll talk just

118
00:05:39,729 --> 00:05:42,339
a little bit about what that means but

119
00:05:42,339 --> 00:05:44,649
first let's talk about code hopefully as

120
00:05:44,649 --> 00:05:46,809
I demonstrated Python is the easiest way

121
00:05:46,809 --> 00:05:49,839
to iterate on software and we've brought

122
00:05:49,839 --> 00:05:51,879
that two microcontrollers with circuit

123
00:05:51,879 --> 00:05:54,369
Python the code and the tool chain

124
00:05:54,369 --> 00:05:56,979
itself travels with you so if i hated

125
00:05:56,979 --> 00:05:59,169
john park the code up here in the front

126
00:05:59,169 --> 00:06:00,939
he would be able to edit the code that I

127
00:06:00,939 --> 00:06:03,699
had and start where I left off which is

128
00:06:03,699 --> 00:06:06,279
I think really awesome if you're

129
00:06:06,279 --> 00:06:07,719
interested in seeing the low-level

130
00:06:07,719 --> 00:06:09,879
details this is the github link for it

131
00:06:09,879 --> 00:06:11,740
and I want to give credit where credit

132
00:06:11,740 --> 00:06:12,099
is due

133
00:06:12,099 --> 00:06:18,819
micro Python was there's a very strange

134
00:06:18,819 --> 00:06:20,860
sound happening in this room and is now

135
00:06:20,860 --> 00:06:24,389
done for those of you who can't hear it

136
00:06:24,389 --> 00:06:26,829
so we were built on micro Python they

137
00:06:26,829 --> 00:06:29,499
did the work to bring the goodness of

138
00:06:29,499 --> 00:06:31,749
Python to microcontrollers so credit

139
00:06:31,749 --> 00:06:33,879
where credit is due they're on the

140
00:06:33,879 --> 00:06:36,059
community side we have a code of conduct

141
00:06:36,059 --> 00:06:38,860
which lays out what we expect how we

142
00:06:38,860 --> 00:06:40,569
expect people to behave and we are

143
00:06:40,569 --> 00:06:42,490
willing to enforce it which means that

144
00:06:42,490 --> 00:06:43,809
we have a very nice and friendly

145
00:06:43,809 --> 00:06:46,209
community around us which is always

146
00:06:46,209 --> 00:06:48,879
awesome and that community lives both on

147
00:06:48,879 --> 00:06:50,829
our github and our discord server and

148
00:06:50,829 --> 00:06:52,839
I'll have a link to the discord at the

149
00:06:52,839 --> 00:06:56,579
end right now we have 190 circuit Python

150
00:06:56,579 --> 00:06:59,139
compatible libraries which is growing

151
00:06:59,139 --> 00:07:00,819
and growing and growing so this is all

152
00:07:00,819 --> 00:07:02,229
the different devices that we could

153
00:07:02,229 --> 00:07:05,949
support and we have 83 plus supported

154
00:07:05,949 --> 00:07:08,110
boards

155
00:07:08,110 --> 00:07:12,039
so this is what our download page looks

156
00:07:12,039 --> 00:07:14,620
like because we have 83 now supported

157
00:07:14,620 --> 00:07:17,349
boards we want to try and get you to the

158
00:07:17,349 --> 00:07:19,090
newest version of circuit Python the

159
00:07:19,090 --> 00:07:21,909
fastest we can so if you go to circuit

160
00:07:21,909 --> 00:07:24,789
python.org slash downloads will show you

161
00:07:24,789 --> 00:07:26,400
all the different boards that we run on

162
00:07:26,400 --> 00:07:29,050
these are all Adafruit boards but we are

163
00:07:29,050 --> 00:07:31,270
very very interested in adding support

164
00:07:31,270 --> 00:07:33,250
for boards that are not manufactured by

165
00:07:33,250 --> 00:07:35,469
Adafruit there are a number that are

166
00:07:35,469 --> 00:07:37,139
available there just not on this slide

167
00:07:37,139 --> 00:07:40,539
so if you have a board reach out to me I

168
00:07:40,539 --> 00:07:42,310
would love for a circuit python to run

169
00:07:42,310 --> 00:07:45,099
on it but these are not also

170
00:07:45,099 --> 00:07:48,340
manufactured by Adafruit and they are

171
00:07:48,340 --> 00:07:49,750
also not manufactured at anytime

172
00:07:49,750 --> 00:07:52,120
recently so for those of you don't know

173
00:07:52,120 --> 00:07:54,250
these are all versions of the Nintendo

174
00:07:54,250 --> 00:07:57,550
Game Boy the one on the furthest left is

175
00:07:57,550 --> 00:08:01,180
the original original Gameboy has the

176
00:08:01,180 --> 00:08:05,229
model number dmg for dot-matrix grid and

177
00:08:05,229 --> 00:08:08,020
they're chunky I have a green one here

178
00:08:08,020 --> 00:08:11,469
that I will use later no more spoilers

179
00:08:11,469 --> 00:08:14,860
than that but it is the original the one

180
00:08:14,860 --> 00:08:16,330
in the middle is the pocket where they

181
00:08:16,330 --> 00:08:19,000
really cost optimized and shrunk down

182
00:08:19,000 --> 00:08:22,000
the same size and same functionality and

183
00:08:22,000 --> 00:08:23,529
then on the right hand side we have a

184
00:08:23,529 --> 00:08:25,629
gameboy color which took basically the

185
00:08:25,629 --> 00:08:28,180
guts of the Gameboy and just added one

186
00:08:28,180 --> 00:08:30,550
last step to add color palettes at the

187
00:08:30,550 --> 00:08:33,010
very end so that you could get colors

188
00:08:33,010 --> 00:08:37,289
out this is what they look on the inside

189
00:08:37,289 --> 00:08:40,479
the the general bit gist of how these

190
00:08:40,479 --> 00:08:44,890
work is that the kind of top chip in the

191
00:08:44,890 --> 00:08:47,589
in the middle it actually is labeled CPU

192
00:08:47,589 --> 00:08:49,300
and that's basically where all the logic

193
00:08:49,300 --> 00:08:52,060
lives so the CPU the sound generation

194
00:08:52,060 --> 00:08:54,250
Hardware the pixel generation hardware

195
00:08:54,250 --> 00:08:56,829
is all within that one chip and then the

196
00:08:56,829 --> 00:08:58,990
code actually lives on a cartridge and

197
00:08:58,990 --> 00:09:00,910
the cartridge is accessed through the

198
00:09:00,910 --> 00:09:03,430
big plastic bit there it has a bunch of

199
00:09:03,430 --> 00:09:06,310
contacts on it that read the memory that

200
00:09:06,310 --> 00:09:09,250
is stored in the cart and execute sit on

201
00:09:09,250 --> 00:09:13,199
the CPU so this is what carts look like

202
00:09:13,199 --> 00:09:16,420
on the left-hand side which I is the

203
00:09:16,420 --> 00:09:18,610
tetris kart it's kind of as basic as you

204
00:09:18,610 --> 00:09:21,520
get it's just a piece of memory that

205
00:09:21,520 --> 00:09:23,830
it can load code and it could load the

206
00:09:23,830 --> 00:09:25,899
bitmaps that it needs and the sounds

207
00:09:25,899 --> 00:09:28,860
information that it needs to run Tetris

208
00:09:28,860 --> 00:09:31,839
it doesn't have any safe state so you

209
00:09:31,839 --> 00:09:33,730
always start at the very beginning of

210
00:09:33,730 --> 00:09:37,120
Tetris and because it's very simple

211
00:09:37,120 --> 00:09:38,920
there are actually some games where you

212
00:09:38,920 --> 00:09:41,680
would learn a cheat word so that you

213
00:09:41,680 --> 00:09:45,040
could skip to where you were later but

214
00:09:45,040 --> 00:09:46,750
they also came up with a way to do save

215
00:09:46,750 --> 00:09:49,029
States and this middle cart mary kate

216
00:09:49,029 --> 00:09:51,459
nash lee's pocket planner is an example

217
00:09:51,459 --> 00:09:55,720
of that it's cut because I go to the

218
00:09:55,720 --> 00:09:57,160
store and I buy cheap Game Boy

219
00:09:57,160 --> 00:10:00,190
cartridges just for the plastics and

220
00:10:00,190 --> 00:10:02,290
I'll talk about that just a little bit

221
00:10:02,290 --> 00:10:03,700
later but a couple things I want to

222
00:10:03,700 --> 00:10:05,529
point out there's definitely more than

223
00:10:05,529 --> 00:10:07,420
one chip on this cartridge and the

224
00:10:07,420 --> 00:10:09,160
circular thing in the top right is

225
00:10:09,160 --> 00:10:11,920
actually a battery so this is before we

226
00:10:11,920 --> 00:10:13,720
had technologies that could store bits

227
00:10:13,720 --> 00:10:16,510
without battery power so no SD cards no

228
00:10:16,510 --> 00:10:18,640
flash technology instead what they would

229
00:10:18,640 --> 00:10:20,170
do is they would just put a battery in

230
00:10:20,170 --> 00:10:23,020
RAM so it's all RAM but it's battery

231
00:10:23,020 --> 00:10:25,690
backed and it saves your stuff so if

232
00:10:25,690 --> 00:10:27,279
you've been keeping your Gameboy from

233
00:10:27,279 --> 00:10:28,930
when you were little or when you had it

234
00:10:28,930 --> 00:10:30,760
and you have like Pokemon that you

235
00:10:30,760 --> 00:10:32,680
collected when you were like 10 maybe

236
00:10:32,680 --> 00:10:35,290
make sure you replace the Gameboy cart

237
00:10:35,290 --> 00:10:36,839
and back it up before the battery dies

238
00:10:36,839 --> 00:10:39,100
hopefully it hasn't already but just a

239
00:10:39,100 --> 00:10:42,070
general warning and you'll see if you

240
00:10:42,070 --> 00:10:43,540
ever go to like retro game stores

241
00:10:43,540 --> 00:10:45,550
they'll say like new save battery new

242
00:10:45,550 --> 00:10:47,050
save battery because they usually do

243
00:10:47,050 --> 00:10:50,589
that for you and it also has again the

244
00:10:50,589 --> 00:10:52,690
the regular memory that stores all of

245
00:10:52,690 --> 00:10:55,380
the assets and code for the game itself

246
00:10:55,380 --> 00:10:58,089
now on the right hand side is a

247
00:10:58,089 --> 00:11:00,040
cartridge that I designed you can see

248
00:11:00,040 --> 00:11:03,130
it's ash park purple and this is a

249
00:11:03,130 --> 00:11:04,959
little bit different than the other two

250
00:11:04,959 --> 00:11:07,810
so let me go into that here's a bigger

251
00:11:07,810 --> 00:11:11,890
view and it's not well it has memory but

252
00:11:11,890 --> 00:11:13,720
it's also a microcontroller in and of

253
00:11:13,720 --> 00:11:16,810
itself this idea of using a

254
00:11:16,810 --> 00:11:19,450
microcontroller to mimic the memory of a

255
00:11:19,450 --> 00:11:22,089
cartridge is not new there's a video

256
00:11:22,089 --> 00:11:24,180
online of somebody who actually used an

257
00:11:24,180 --> 00:11:28,720
stm32f4 as a gameboy part previously and

258
00:11:28,720 --> 00:11:31,180
the general idea of how this works is

259
00:11:31,180 --> 00:11:33,250
the game boy is saying hey give me an

260
00:11:33,250 --> 00:11:35,050
instruction or give me data

261
00:11:35,050 --> 00:11:36,940
and it does that at a 1 megahertz rate

262
00:11:36,940 --> 00:11:39,100
so whatever you put on the other side

263
00:11:39,100 --> 00:11:41,560
has to be able to keep up to keep the

264
00:11:41,560 --> 00:11:44,140
Gameboy CPU thinking that everything on

265
00:11:44,140 --> 00:11:47,380
that side is very dumb and so that's the

266
00:11:47,380 --> 00:11:51,399
challenge I chose to use a Sam d50 one

267
00:11:51,399 --> 00:11:53,140
which is a hundred and twenty megahertz

268
00:11:53,140 --> 00:11:56,050
and it also supports circuit pythons so

269
00:11:56,050 --> 00:11:58,209
if you didn't realize it before I love

270
00:11:58,209 --> 00:12:00,550
well we said it earlier I love putting

271
00:12:00,550 --> 00:12:02,230
circuit Python and things because it

272
00:12:02,230 --> 00:12:05,290
makes it really easy to program and the

273
00:12:05,290 --> 00:12:06,399
way that I thought I could make

274
00:12:06,399 --> 00:12:09,160
programming Gameboys easy is by making

275
00:12:09,160 --> 00:12:11,589
the cart smart and then just kind of

276
00:12:11,589 --> 00:12:13,180
telling the game boy oh dude just do

277
00:12:13,180 --> 00:12:15,519
this oh just do that play the sound as

278
00:12:15,519 --> 00:12:18,820
it will see in just a bit but let's talk

279
00:12:18,820 --> 00:12:22,300
about how that works and convince you

280
00:12:22,300 --> 00:12:25,620
that circuit Python is is quite awesome

281
00:12:25,620 --> 00:12:27,820
so there's a number of layers where

282
00:12:27,820 --> 00:12:29,589
we're software people we like

283
00:12:29,589 --> 00:12:32,320
abstractions so let's just talk a little

284
00:12:32,320 --> 00:12:34,420
bit from the top to the bottom what

285
00:12:34,420 --> 00:12:36,850
those layers are at the very top we have

286
00:12:36,850 --> 00:12:40,360
Python code this is pure Python code

287
00:12:40,360 --> 00:12:41,950
that we could use to make it easier to

288
00:12:41,950 --> 00:12:45,760
access different parts of the hardware

289
00:12:45,760 --> 00:12:48,190
so in our badge example or in our badge

290
00:12:48,190 --> 00:12:52,120
demo that was the PI badger class so

291
00:12:52,120 --> 00:12:53,740
that's pure Python that's meant to make

292
00:12:53,740 --> 00:12:56,860
things easier below that we have a

293
00:12:56,860 --> 00:12:59,200
Python API but that Python API is

294
00:12:59,200 --> 00:13:03,940
actually implemented in C so that's kind

295
00:13:03,940 --> 00:13:06,100
of like your dependency free level of

296
00:13:06,100 --> 00:13:08,890
Python then you have this intermediate C

297
00:13:08,890 --> 00:13:10,450
level that's just taking all these

298
00:13:10,450 --> 00:13:12,660
Python objects and converting them into

299
00:13:12,660 --> 00:13:16,180
C objects so you take a byte array in

300
00:13:16,180 --> 00:13:18,880
Python and make a C array out of it and

301
00:13:18,880 --> 00:13:21,100
get the length and store the length

302
00:13:21,100 --> 00:13:24,880
separately because it's C and then at

303
00:13:24,880 --> 00:13:27,190
the very bottom of that below that you

304
00:13:27,190 --> 00:13:29,170
have what you would normally see if you

305
00:13:29,170 --> 00:13:30,670
were doing embedded development which is

306
00:13:30,670 --> 00:13:34,269
C level probably register accesses that

307
00:13:34,269 --> 00:13:36,640
can do time critical time critical

308
00:13:36,640 --> 00:13:39,160
things and be specific to the chip that

309
00:13:39,160 --> 00:13:42,130
it's implemented on and then we'll talk

310
00:13:42,130 --> 00:13:44,680
a little bit about what the wire to the

311
00:13:44,680 --> 00:13:46,570
game the data on the wire to the game

312
00:13:46,570 --> 00:13:48,500
boy actually looks like

313
00:13:48,500 --> 00:13:50,660
so the demo that we're gonna try to do

314
00:13:50,660 --> 00:13:53,290
is we're gonna try to play a sound

315
00:13:53,290 --> 00:13:56,209
triggered by Python on the Gameboy and

316
00:13:56,209 --> 00:13:59,269
then depending on how this cooperates we

317
00:13:59,269 --> 00:14:02,420
may try to make it sound really cool too

318
00:14:02,420 --> 00:14:04,610
so the way that we play a sound is

319
00:14:04,610 --> 00:14:07,279
there's an 8-bit register at this magic

320
00:14:07,279 --> 00:14:10,639
address that causes the sound to be

321
00:14:10,639 --> 00:14:13,639
played it's the bit seven there and so

322
00:14:13,639 --> 00:14:17,029
how do we get from Python so this is our

323
00:14:17,029 --> 00:14:19,370
Python example code where we're just

324
00:14:19,370 --> 00:14:22,490
doing a hey at this offset in the memory

325
00:14:22,490 --> 00:14:25,610
store this value right so in from from

326
00:14:25,610 --> 00:14:28,519
Python we're able to do that how do we

327
00:14:28,519 --> 00:14:30,199
get all the way to the bottom we talked

328
00:14:30,199 --> 00:14:34,779
about the layers so this is kind of this

329
00:14:34,779 --> 00:14:39,199
index access is how we trigger that kind

330
00:14:39,199 --> 00:14:41,050
of whole chain that we just talked about

331
00:14:41,050 --> 00:14:43,430
and I'm not going to go into all those

332
00:14:43,430 --> 00:14:46,430
all those details so fewer slides of

333
00:14:46,430 --> 00:14:50,540
code so some layers later we get to the

334
00:14:50,540 --> 00:14:53,569
bottom and so this is our C code it is

335
00:14:53,569 --> 00:14:55,880
also a bit truncated but the general

336
00:14:55,880 --> 00:14:58,399
idea is that we are accessing direct

337
00:14:58,399 --> 00:15:01,670
like c structs that are defined by the

338
00:15:01,670 --> 00:15:04,610
Atmel sandy and we're using it to do DMA

339
00:15:04,610 --> 00:15:07,519
so the way that we keep up with the rate

340
00:15:07,519 --> 00:15:09,639
of the game boy saying hey every

341
00:15:09,639 --> 00:15:13,220
whatever period 1 megahertz is give me a

342
00:15:13,220 --> 00:15:15,410
bite and so that I can run it and

343
00:15:15,410 --> 00:15:19,310
execute it is that we use DMA and that

344
00:15:19,310 --> 00:15:22,220
DMA there's Charles was talking about

345
00:15:22,220 --> 00:15:23,089
look-up tables

346
00:15:23,089 --> 00:15:26,720
well the Sam D has like four they're

347
00:15:26,720 --> 00:15:30,139
very small they're very simple look-up

348
00:15:30,139 --> 00:15:33,800
tables but what you can do the DMA or

349
00:15:33,800 --> 00:15:36,920
the Game Boy cartridge has a clock line

350
00:15:36,920 --> 00:15:39,769
a read line to tell you whether the CPU

351
00:15:39,769 --> 00:15:41,649
is reading or writing to the cartridge

352
00:15:41,649 --> 00:15:44,660
and also we want to pay attention to a

353
00:15:44,660 --> 00:15:48,559
15 which is the upper bit of the address

354
00:15:48,559 --> 00:15:51,559
because if it's 1 then that means that

355
00:15:51,559 --> 00:15:53,480
other things in the gameboy are being

356
00:15:53,480 --> 00:15:55,970
written to not the cartridge so we use

357
00:15:55,970 --> 00:16:00,230
the Sam d50 ones CC lot to generate a

358
00:16:00,230 --> 00:16:01,910
signal out of those three

359
00:16:01,910 --> 00:16:04,220
puts and then that signal is used to do

360
00:16:04,220 --> 00:16:07,760
two things one it clocks the DMA so

361
00:16:07,760 --> 00:16:10,280
we're moving a bite from RAM into the

362
00:16:10,280 --> 00:16:12,560
thing that sets the pin out right so

363
00:16:12,560 --> 00:16:15,380
they're GPIO peripheral and then the

364
00:16:15,380 --> 00:16:18,380
other thing is we also have a tri-state

365
00:16:18,380 --> 00:16:21,440
bus that we can tell it Oh like leave

366
00:16:21,440 --> 00:16:23,900
the data bus as is or give it the byte

367
00:16:23,900 --> 00:16:26,210
that we're doing so we use this signal

368
00:16:26,210 --> 00:16:30,260
to set that so what does it look on the

369
00:16:30,260 --> 00:16:34,790
on the wire so here we have a clock at

370
00:16:34,790 --> 00:16:36,560
the top we have address in the middle

371
00:16:36,560 --> 00:16:38,660
and then we have a data line and when

372
00:16:38,660 --> 00:16:40,880
it's in the middle is when nothing is

373
00:16:40,880 --> 00:16:42,740
happening on data something else can be

374
00:16:42,740 --> 00:16:46,040
setting the data that's high Z as you

375
00:16:46,040 --> 00:16:49,730
may know and so the first thing we do is

376
00:16:49,730 --> 00:16:52,070
we get an address in we actually don't

377
00:16:52,070 --> 00:16:54,440
read it we don't actually know what

378
00:16:54,440 --> 00:16:56,000
address that's reading almost always

379
00:16:56,000 --> 00:16:58,190
there's one case that if you're curious

380
00:16:58,190 --> 00:17:01,520
you can ask me later but we the game boy

381
00:17:01,520 --> 00:17:02,930
actually doesn't care right it just

382
00:17:02,930 --> 00:17:05,240
wants the byte and it's used to being

383
00:17:05,240 --> 00:17:06,890
actually the same but there's no caching

384
00:17:06,890 --> 00:17:08,480
or anything so you can just give it

385
00:17:08,480 --> 00:17:11,780
whatever you want and it's just fine so

386
00:17:11,780 --> 00:17:12,829
the first thing we give it is the

387
00:17:12,829 --> 00:17:14,510
instruction to load a value into the

388
00:17:14,510 --> 00:17:17,780
register a the zero e is the instruction

389
00:17:17,780 --> 00:17:20,839
that's why I made it yellow so this is

390
00:17:20,839 --> 00:17:23,150
our value that was the zero B blah blah

391
00:17:23,150 --> 00:17:26,690
blah in Python here's the 3 e which is

392
00:17:26,690 --> 00:17:29,270
giving us the last byte of the address

393
00:17:29,270 --> 00:17:32,090
and then there's a a special instruction

394
00:17:32,090 --> 00:17:34,340
that takes C and adds it to the base F F

395
00:17:34,340 --> 00:17:37,640
0 0 it's a convenience function I don't

396
00:17:37,640 --> 00:17:41,750
think the original z80 processors had it

397
00:17:41,750 --> 00:17:44,020
but the Gameboy CPU is a little weird

398
00:17:44,020 --> 00:17:46,430
and it's convenient because basically

399
00:17:46,430 --> 00:17:48,290
all of the special registers are within

400
00:17:48,290 --> 00:17:50,630
that range so it makes it a little bit

401
00:17:50,630 --> 00:17:53,030
quicker to access them all so with that

402
00:17:53,030 --> 00:17:56,300
we've successfully written a bit from

403
00:17:56,300 --> 00:17:58,880
Python all the way down to C into the

404
00:17:58,880 --> 00:18:03,460
gameboy register and that continues on

405
00:18:03,460 --> 00:18:07,640
now let's do a Gameboy demo and we have

406
00:18:07,640 --> 00:18:10,070
some time so hopefully we can make some

407
00:18:10,070 --> 00:18:13,870
really funky sounds

408
00:18:14,060 --> 00:18:17,010
and maybe we'll have to restart it we'll

409
00:18:17,010 --> 00:18:22,140
see so if we get this turned up we

410
00:18:22,140 --> 00:18:29,720
should hear a de fruits dropping down

411
00:18:32,120 --> 00:18:38,940
nothing sorry maybe I should not hold it

412
00:18:38,940 --> 00:18:41,790
when we do that it won't play again let

413
00:18:41,790 --> 00:18:44,389
me restart it

414
00:18:56,250 --> 00:19:02,149
didn't work it's so touchy

415
00:19:02,149 --> 00:19:05,460
okay let's go to the back up you turn it

416
00:19:05,460 --> 00:19:09,299
off and I'll unplug it I'll just do it

417
00:19:09,299 --> 00:19:18,440
with the mic okay so here we go

418
00:19:23,559 --> 00:19:26,899
there we go that's the sound I wanted to

419
00:19:26,899 --> 00:19:31,669
hear okay so let's see what we can do

420
00:19:31,669 --> 00:19:37,669
with this so just like I did in the

421
00:19:37,669 --> 00:19:39,379
first demo I'm gonna just take the micro

422
00:19:39,379 --> 00:19:42,440
USB and the Gameboy cart has a micro USB

423
00:19:42,440 --> 00:19:47,299
on it so I'm gonna plug it in and you'll

424
00:19:47,299 --> 00:19:51,379
hear it actually it will restart after

425
00:19:51,379 --> 00:19:55,759
access is it maybe well we got Circuit

426
00:19:55,759 --> 00:20:01,460
Pi which is good trying to see it so

427
00:20:01,460 --> 00:20:03,499
every time a file is written to the

428
00:20:03,499 --> 00:20:05,149
circuit Python Drive even if it's

429
00:20:05,149 --> 00:20:07,609
because like I opened it up and Mac is

430
00:20:07,609 --> 00:20:09,919
like oh let me write something it will

431
00:20:09,919 --> 00:20:13,940
restart which can be fun and cannot be

432
00:20:13,940 --> 00:20:16,580
fun as well and I actually have a bug

433
00:20:16,580 --> 00:20:18,049
right now that I'm trying to work around

434
00:20:18,049 --> 00:20:20,749
so the reason you get that classic chime

435
00:20:20,749 --> 00:20:24,289
at the beginning is because I might

436
00:20:24,289 --> 00:20:25,789
actually get out of sync with the game

437
00:20:25,789 --> 00:20:27,649
boy and the game boy will run off and do

438
00:20:27,649 --> 00:20:29,450
what I don't want so I actually have it

439
00:20:29,450 --> 00:20:30,919
right now the Game Boy cartridge can

440
00:20:30,919 --> 00:20:32,989
reset the game boy so I'm doing that

441
00:20:32,989 --> 00:20:34,879
right now every reload just to make sure

442
00:20:34,879 --> 00:20:37,249
I start from the same place that I think

443
00:20:37,249 --> 00:20:45,109
I am okay so we've got our text edit

444
00:20:45,109 --> 00:20:50,210
window so if you notice I'm like sharing

445
00:20:50,210 --> 00:20:51,830
the mic with a game boy like anybody

446
00:20:51,830 --> 00:20:52,850
want to take an experience

447
00:20:52,850 --> 00:21:00,230
I love game boys thank you for being

448
00:21:00,230 --> 00:21:04,999
with me okay so I've got the code up

449
00:21:04,999 --> 00:21:08,059
here this is basically what I had on the

450
00:21:08,059 --> 00:21:10,309
slide except I've exposed or I've I've

451
00:21:10,309 --> 00:21:12,320
commented out every register that is

452
00:21:12,320 --> 00:21:14,179
involved in generating a sound on the

453
00:21:14,179 --> 00:21:16,730
game boy and I have notes on here of

454
00:21:16,730 --> 00:21:21,320
what each individual bit does on those

455
00:21:21,320 --> 00:21:23,090
sound registers so that I can stand here

456
00:21:23,090 --> 00:21:25,340
and hopefully play with them now we have

457
00:21:25,340 --> 00:21:27,080
the trouble where it was like not happy

458
00:21:27,080 --> 00:21:29,869
writing it later so I'm just gonna jump

459
00:21:29,869 --> 00:21:33,440
to the best part just in case it doesn't

460
00:21:33,440 --> 00:21:35,269
work did you notice that there was

461
00:21:35,269 --> 00:21:36,530
actually a third tone

462
00:21:36,530 --> 00:21:38,300
being played so it's like bumping and

463
00:21:38,300 --> 00:21:40,190
it's trying to play the same note at the

464
00:21:40,190 --> 00:21:44,420
same time now but the best register in

465
00:21:44,420 --> 00:21:47,060
this register set is the sweep register

466
00:21:47,060 --> 00:21:49,520
and what this does is it changes the

467
00:21:49,520 --> 00:21:51,920
frequency over the duration of the tone

468
00:21:51,920 --> 00:21:55,220
and it's typically used for all of the

469
00:21:55,220 --> 00:21:57,080
sound effects that you've heard in many

470
00:21:57,080 --> 00:21:59,060
many gameboy games so we're just gonna

471
00:21:59,060 --> 00:22:02,930
jump straight to the end and play that

472
00:22:02,930 --> 00:22:05,090
so let's do a save

473
00:22:05,090 --> 00:22:07,790
so I all I did here was I uncommon in it

474
00:22:07,790 --> 00:22:10,160
and hopefully we'll have some time to

475
00:22:10,160 --> 00:22:12,260
actually play with those bits but let me

476
00:22:12,260 --> 00:22:30,560
just try it it's very short let's see if

477
00:22:30,560 --> 00:22:32,930
we can make it a little bit longer I

478
00:22:32,930 --> 00:22:39,800
think that it's resetting again it's

479
00:22:39,800 --> 00:22:41,780
very fast to edit because it likes to do

480
00:22:41,780 --> 00:22:45,830
that oh you know what it might be trying

481
00:22:45,830 --> 00:22:52,880
to do it on my behalf let's just

482
00:22:52,880 --> 00:22:56,260
uncomment stuff and see what it does

483
00:23:00,790 --> 00:23:06,549
it's resetting again it's all the same

484
00:23:06,549 --> 00:23:08,820
okay here's what we might have to do

485
00:23:08,820 --> 00:23:11,850
because text said it I think is confused

486
00:23:11,850 --> 00:23:20,610
actually maybe if we just quit discard

487
00:23:20,610 --> 00:23:29,580
open again is it does VI come by default

488
00:23:29,580 --> 00:23:33,250
okay hold on I can't hold the Gameboy to

489
00:23:33,250 --> 00:23:39,130
type at the same time I have

490
00:23:39,130 --> 00:23:42,210
applications down there

491
00:23:50,059 --> 00:23:53,929
man's face thank you oh no it's not

492
00:23:53,929 --> 00:23:59,299
colemak let me look at my fingers like

493
00:23:59,299 --> 00:24:08,679
I'm a rookie yes

494
00:24:16,630 --> 00:24:19,810
so it's just a drive works like a normal

495
00:24:19,810 --> 00:24:22,169
Drive

496
00:24:28,640 --> 00:24:42,830
Oh Oh Catalina or not sudo it's not my

497
00:24:42,830 --> 00:24:48,920
laptop let's try it maybe it requires a

498
00:24:48,920 --> 00:24:58,450
password okay hold on

499
00:25:00,190 --> 00:25:12,380
good job hackaday sorry no let me eject

500
00:25:12,380 --> 00:25:14,630
and reset the Gameboy it might be that

501
00:25:14,630 --> 00:25:24,010
side and I'm I do have wrap-up sites

502
00:25:26,120 --> 00:25:28,130
at least we got something out of it rain

503
00:25:28,130 --> 00:25:41,450
I have heard it in person it was amazing

504
00:25:41,450 --> 00:25:44,330
all right we loaded the file and we

505
00:25:44,330 --> 00:25:45,740
wanted to make it longer

506
00:25:45,740 --> 00:25:57,890
I think that's making it short didn't

507
00:25:57,890 --> 00:26:00,159
get it

508
00:26:01,960 --> 00:26:04,619
wait

509
00:26:08,220 --> 00:26:14,620
did I make the volume zero volume is

510
00:26:14,620 --> 00:26:16,600
here all right let me comment that back

511
00:26:16,600 --> 00:26:24,060
out it's also duration here here's time

512
00:26:24,060 --> 00:26:28,150
see what this says last last one then

513
00:26:28,150 --> 00:26:34,230
I'm done it's like really slow to flush

514
00:26:34,230 --> 00:26:46,350
here goes oh I broke it okay sorry

515
00:26:47,550 --> 00:26:50,710
that'll do thank you for all all for

516
00:26:50,710 --> 00:26:54,150
helping me thanks John

517
00:26:54,150 --> 00:26:56,290
if you want to come play with it I'm

518
00:26:56,290 --> 00:26:59,350
happy to let folks poke around at it but

519
00:26:59,350 --> 00:27:06,760
let's finish this all right I just have

520
00:27:06,760 --> 00:27:09,070
wrap-up slides and them are good so if

521
00:27:09,070 --> 00:27:10,000
you want to know more about how the

522
00:27:10,000 --> 00:27:12,100
Gameboy works this talk actually got me

523
00:27:12,100 --> 00:27:14,380
into it it will cover both how the sound

524
00:27:14,380 --> 00:27:16,060
hardware works and how the pixel

525
00:27:16,060 --> 00:27:18,130
pipeline and all that stuff works covers

526
00:27:18,130 --> 00:27:20,260
all the registers it's super cool I

527
00:27:20,260 --> 00:27:26,440
highly highly highly recommend it and so

528
00:27:26,440 --> 00:27:27,850
what are the takeaways from this talk

529
00:27:27,850 --> 00:27:30,700
first circle python is the easiest way

530
00:27:30,700 --> 00:27:32,200
to program hardware I hope I

531
00:27:32,200 --> 00:27:33,880
demonstrated that even though I couldn't

532
00:27:33,880 --> 00:27:37,750
twiddle the right bits and for those of

533
00:27:37,750 --> 00:27:39,430
you who've done C remember you can

534
00:27:39,430 --> 00:27:41,590
always fall back to adding stuff to see

535
00:27:41,590 --> 00:27:43,750
if it needs to be faster you need access

536
00:27:43,750 --> 00:27:45,270
to something you don't have access to

537
00:27:45,270 --> 00:27:48,520
and that existing hardware can benefit

538
00:27:48,520 --> 00:27:49,930
from circuit python so if you've

539
00:27:49,930 --> 00:27:52,330
designed something already we'd love to

540
00:27:52,330 --> 00:27:55,090
add circuit Python to it how do you do

541
00:27:55,090 --> 00:27:55,870
that

542
00:27:55,870 --> 00:28:00,190
we support the Sandy 21:51 NRF 50 to 840

543
00:28:00,190 --> 00:28:02,880
and the stm32f4 series of

544
00:28:02,880 --> 00:28:05,620
microcontrollers if you have something

545
00:28:05,620 --> 00:28:06,910
that you've designed with any one of

546
00:28:06,910 --> 00:28:08,920
those things reach out to us we'd love

547
00:28:08,920 --> 00:28:11,050
to get circa Python running on it we're

548
00:28:11,050 --> 00:28:13,660
also planning on doing the IMX RT series

549
00:28:13,660 --> 00:28:15,160
which if you haven't looked at you

550
00:28:15,160 --> 00:28:17,920
should they're very inexpensive and

551
00:28:17,920 --> 00:28:19,440
they're like 500 megahertz

552
00:28:19,440 --> 00:28:22,950
at minimum with USB high-speed including

553
00:28:22,950 --> 00:28:24,870
the five so I highly recommend taking a

554
00:28:24,870 --> 00:28:26,940
look at those the teensy four has it

555
00:28:26,940 --> 00:28:28,380
currently so if you want to play around

556
00:28:28,380 --> 00:28:30,750
with the one now take it check out the

557
00:28:30,750 --> 00:28:33,510
teensy four and this is our link to our

558
00:28:33,510 --> 00:28:35,610
discord we'd love to have you pop up and

559
00:28:35,610 --> 00:28:37,350
ask questions if you're having trouble

560
00:28:37,350 --> 00:28:39,540
with your badge we'd love to answer any

561
00:28:39,540 --> 00:28:41,910
questions you have there again here's a

562
00:28:41,910 --> 00:28:44,460
link to the github everybody get a

563
00:28:44,460 --> 00:28:49,020
picture of it couple more I also do post

564
00:28:49,020 --> 00:28:51,300
my slides on my on my github account so

565
00:28:51,300 --> 00:28:53,790
you can go to github.com slash 10 new

566
00:28:53,790 --> 00:28:55,920
slash presentations and all the

567
00:28:55,920 --> 00:28:59,430
presentations that you go there and this

568
00:28:59,430 --> 00:29:01,710
is my contact info I go by 10 new on

569
00:29:01,710 --> 00:29:04,830
github on Twitter so you can reach out

570
00:29:04,830 --> 00:29:07,230
to me there there's my work email so you

571
00:29:07,230 --> 00:29:09,150
can drop me a line if you need a pointer

572
00:29:09,150 --> 00:29:11,340
to where you want to look at otherwise

573
00:29:11,340 --> 00:29:13,110
you can go to Circuit python.org to get

574
00:29:13,110 --> 00:29:16,260
more information so thank you very much

575
00:29:16,260 --> 00:29:18,120
for all attending and for those of you

576
00:29:18,120 --> 00:29:19,650
who are watching it later

577
00:29:19,650 --> 00:29:22,370
thank you as well

