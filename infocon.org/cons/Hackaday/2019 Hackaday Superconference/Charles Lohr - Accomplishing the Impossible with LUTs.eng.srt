1
00:00:00,000 --> 00:00:01,909
[Applause]

2
00:00:01,909 --> 00:00:07,350
thank you okay so who here let's

3
00:00:07,350 --> 00:00:08,790
actually just start with a question who

4
00:00:08,790 --> 00:00:10,889
here is here because they want to learn

5
00:00:10,889 --> 00:00:15,389
about lookup tables with FPGAs ooh who's

6
00:00:15,389 --> 00:00:17,100
here to learn one once to learn about

7
00:00:17,100 --> 00:00:18,600
look-up tables inside of

8
00:00:18,600 --> 00:00:20,220
microcontrollers and how to make them do

9
00:00:20,220 --> 00:00:22,830
some crazy things okay I got the kind of

10
00:00:22,830 --> 00:00:25,980
the right room here so I'm Charles I

11
00:00:25,980 --> 00:00:26,789
have a youtube channel

12
00:00:26,789 --> 00:00:27,930
I haven't actually posted anything a

13
00:00:27,930 --> 00:00:29,310
while because of a recent job change

14
00:00:29,310 --> 00:00:32,579
it's it's I really just love exploring

15
00:00:32,579 --> 00:00:33,930
the physical phenomenon and all sorts of

16
00:00:33,930 --> 00:00:35,910
crazy things and making things do what

17
00:00:35,910 --> 00:00:38,700
they really shouldn't do and the most

18
00:00:38,700 --> 00:00:40,890
powerful tool technical tool there are

19
00:00:40,890 --> 00:00:42,450
other tools like using Google and stuff

20
00:00:42,450 --> 00:00:43,590
like that but the most powerful

21
00:00:43,590 --> 00:00:45,480
technical specific engineering tool that

22
00:00:45,480 --> 00:00:48,329
I do that I use to do these crazy things

23
00:00:48,329 --> 00:00:51,180
are lookup tables which seems so odd

24
00:00:51,180 --> 00:00:52,620
because it's not like a course you take

25
00:00:52,620 --> 00:00:54,719
in school but it's it's literally the

26
00:00:54,719 --> 00:00:56,789
thing that that takes problems which

27
00:00:56,789 --> 00:00:58,199
would be impossible and makes them

28
00:00:58,199 --> 00:00:59,850
solvable in reasonable amounts of time

29
00:00:59,850 --> 00:01:02,070
and I'm kind of talking about stuff like

30
00:01:02,070 --> 00:01:04,489
this this is a logarithm lookup table

31
00:01:04,489 --> 00:01:06,570
and people have been doing this sort of

32
00:01:06,570 --> 00:01:08,700
stuff since like 500 I think was the

33
00:01:08,700 --> 00:01:10,350
first published mathematical lookup

34
00:01:10,350 --> 00:01:14,549
table like 8,500 and so we're not gonna

35
00:01:14,549 --> 00:01:17,070
look at a start to try to mix the

36
00:01:17,070 --> 00:01:18,960
paradigms that are in FPGAs and

37
00:01:18,960 --> 00:01:21,570
processors so this means kind of leaving

38
00:01:21,570 --> 00:01:23,220
the whole sort of I think about it in

39
00:01:23,220 --> 00:01:25,170
code and snake around way and think

40
00:01:25,170 --> 00:01:27,540
about it more in the FPGA sort of like

41
00:01:27,540 --> 00:01:29,250
link it all together shove it into a

42
00:01:29,250 --> 00:01:31,670
block and make it happen all at once way

43
00:01:31,670 --> 00:01:34,140
we're gonna kind of just do this because

44
00:01:34,140 --> 00:01:36,150
we want to combine hardware we have a

45
00:01:36,150 --> 00:01:37,920
whole bunch of bodge wires and a whole

46
00:01:37,920 --> 00:01:39,329
bunch of components all jammed together

47
00:01:39,329 --> 00:01:41,070
each one of these things has baggage

48
00:01:41,070 --> 00:01:43,049
with it and the fewer components you

49
00:01:43,049 --> 00:01:45,450
have the better and more reliable your

50
00:01:45,450 --> 00:01:47,189
design is probably going to be in the

51
00:01:47,189 --> 00:01:48,630
end because it's less points of failure

52
00:01:48,630 --> 00:01:50,310
and so that's one of the reasons I've

53
00:01:50,310 --> 00:01:51,899
always kind of been drawn towards this

54
00:01:51,899 --> 00:01:54,000
sort of thing this microcontrollers my

55
00:01:54,000 --> 00:01:56,610
favorite ones have Wi-Fi and a lot of

56
00:01:56,610 --> 00:01:58,950
times they they have the right mix of

57
00:01:58,950 --> 00:02:01,590
stuff that you want and just sometimes

58
00:02:01,590 --> 00:02:03,420
they can't do the job and you're like

59
00:02:03,420 --> 00:02:05,729
I'm really needing that PG a and that's

60
00:02:05,729 --> 00:02:07,140
where I've been time and time again

61
00:02:07,140 --> 00:02:08,940
until I was like oh I guess I actually

62
00:02:08,940 --> 00:02:11,610
don't need an FPGA because is one of my

63
00:02:11,610 --> 00:02:13,620
previous co-workers said

64
00:02:13,620 --> 00:02:16,500
it's a hardware problem but we can fix

65
00:02:16,500 --> 00:02:18,360
it in software and that's kind of a

66
00:02:18,360 --> 00:02:20,400
mentality I've really taken to the bank

67
00:02:20,400 --> 00:02:23,340
so you guys have probably seen look-up

68
00:02:23,340 --> 00:02:24,659
tables before you've probably heard

69
00:02:24,659 --> 00:02:26,250
about them for things like maybe color

70
00:02:26,250 --> 00:02:28,709
space conversion or you've probably seen

71
00:02:28,709 --> 00:02:30,870
palettes like the hackaday super Khan

72
00:02:30,870 --> 00:02:33,299
patch this year with the the logo where

73
00:02:33,299 --> 00:02:34,829
it has that animated sort of like

74
00:02:34,829 --> 00:02:37,170
exploding out thing going on that's just

75
00:02:37,170 --> 00:02:38,579
a glorified lookup table because you

76
00:02:38,579 --> 00:02:40,319
just have these colors on the screen

77
00:02:40,319 --> 00:02:42,690
which just get remapped so when you're

78
00:02:42,690 --> 00:02:44,579
going through you just decide the color

79
00:02:44,579 --> 00:02:48,989
to display based off of a palette a lot

80
00:02:48,989 --> 00:02:50,430
of times you guys might have heard about

81
00:02:50,430 --> 00:02:52,140
using look-up tables to compute sine or

82
00:02:52,140 --> 00:02:54,660
cosine and like a microcontroller

83
00:02:54,660 --> 00:02:56,370
because for these transcendental

84
00:02:56,370 --> 00:02:58,560
functions are gonna be crazy to try to

85
00:02:58,560 --> 00:03:00,599
compute on the fly but you don't need to

86
00:03:00,599 --> 00:03:02,700
you can just store the value and look it

87
00:03:02,700 --> 00:03:04,799
up and other image processing things

88
00:03:04,799 --> 00:03:06,959
that sort of stuff is common some of the

89
00:03:06,959 --> 00:03:09,450
more unusual ones though are CRC

90
00:03:09,450 --> 00:03:10,709
computation which you've probably

91
00:03:10,709 --> 00:03:12,659
noticed if you've ever looked at CRC

92
00:03:12,659 --> 00:03:14,400
code there's this table that somehow

93
00:03:14,400 --> 00:03:16,079
snakes around and does the right stuff

94
00:03:16,079 --> 00:03:18,630
and one of the more interesting ones I

95
00:03:18,630 --> 00:03:20,579
found out recently was Z live so this

96
00:03:20,579 --> 00:03:22,230
this compression algorithm the same

97
00:03:22,230 --> 00:03:24,269
thing it's used with like tar gzip and

98
00:03:24,269 --> 00:03:26,489
everything I think except for zip files

99
00:03:26,489 --> 00:03:27,959
or maybe even does anybody know if

100
00:03:27,959 --> 00:03:30,299
that's a files use that I don't I don't

101
00:03:30,299 --> 00:03:31,739
even know okay

102
00:03:31,739 --> 00:03:34,620
probably not um but that algorithm there

103
00:03:34,620 --> 00:03:36,840
used to be dedicated hardware in some

104
00:03:36,840 --> 00:03:39,060
processors to actually decompressing

105
00:03:39,060 --> 00:03:40,500
this stuff like they would include

106
00:03:40,500 --> 00:03:42,989
specialty hardware in these systems but

107
00:03:42,989 --> 00:03:44,910
it turns out some guy figured out oh

108
00:03:44,910 --> 00:03:46,199
actually I can just use a lookup table

109
00:03:46,199 --> 00:03:48,209
to do eight bits at a time and then it

110
00:03:48,209 --> 00:03:49,799
turned out actually then the software

111
00:03:49,799 --> 00:03:51,060
solution was faster than any of the

112
00:03:51,060 --> 00:03:52,319
hardware that had been built to begin

113
00:03:52,319 --> 00:03:53,849
with and so that was the end of that

114
00:03:53,849 --> 00:03:56,910
hardware and the last part that I really

115
00:03:56,910 --> 00:03:58,889
kind of want to get into is more of the

116
00:03:58,889 --> 00:04:01,709
nasty logic so we can start by looking

117
00:04:01,709 --> 00:04:04,079
at some real-world look-up tables so

118
00:04:04,079 --> 00:04:05,609
this is a this is something I found out

119
00:04:05,609 --> 00:04:07,500
about actually like four days ago was

120
00:04:07,500 --> 00:04:10,379
that Astron what they actually have is

121
00:04:10,379 --> 00:04:11,819
just tables for when they get out the

122
00:04:11,819 --> 00:04:13,949
seconds sextant and they look at a star

123
00:04:13,949 --> 00:04:15,660
they look it up in the table to figure

124
00:04:15,660 --> 00:04:17,849
out based on the time where they would

125
00:04:17,849 --> 00:04:19,470
be in a circle in one area you do it

126
00:04:19,470 --> 00:04:21,089
through a couple stars and then now you

127
00:04:21,089 --> 00:04:23,550
know where you are things like the

128
00:04:23,550 --> 00:04:25,110
Winter Garden if you ever seen the magic

129
00:04:25,110 --> 00:04:27,060
marble machine the thing has

130
00:04:27,060 --> 00:04:29,550
big drum which stores kind of

131
00:04:29,550 --> 00:04:31,560
information about the song that would be

132
00:04:31,560 --> 00:04:34,560
being played concordance --is and slide

133
00:04:34,560 --> 00:04:36,090
rules and one of the more interesting

134
00:04:36,090 --> 00:04:39,210
ones I thought were cams so in the way

135
00:04:39,210 --> 00:04:40,800
back when when when we were having these

136
00:04:40,800 --> 00:04:42,419
battleships that needed to shoot these

137
00:04:42,419 --> 00:04:44,040
shells a really long way really

138
00:04:44,040 --> 00:04:45,900
precisely they had these targeting

139
00:04:45,900 --> 00:04:47,669
computers that just baked in

140
00:04:47,669 --> 00:04:49,650
transcendental functions into just these

141
00:04:49,650 --> 00:04:52,050
literal like wheels where it would just

142
00:04:52,050 --> 00:04:53,700
be a pin that would give you the answer

143
00:04:53,700 --> 00:04:56,370
of what this hugely complicated like

144
00:04:56,370 --> 00:04:58,500
mathematical thing was just by like

145
00:04:58,500 --> 00:05:00,030
turning the knobs to the right places

146
00:05:00,030 --> 00:05:02,220
and one of the cooler ones that I like

147
00:05:02,220 --> 00:05:06,200
is this from the trainer what was called

148
00:05:06,200 --> 00:05:09,030
the long now that's right yeah the long

149
00:05:09,030 --> 00:05:11,070
now machine because it's actually like a

150
00:05:11,070 --> 00:05:13,050
two-dimensional lookup table where you

151
00:05:13,050 --> 00:05:14,910
have this like rotation and where you're

152
00:05:14,910 --> 00:05:16,740
reading it and that determines some of

153
00:05:16,740 --> 00:05:22,110
these astrological like values so if you

154
00:05:22,110 --> 00:05:23,610
guys know the right terms for these

155
00:05:23,610 --> 00:05:25,380
things that I'm gonna be covering please

156
00:05:25,380 --> 00:05:27,690
contact me please tell me please tell me

157
00:05:27,690 --> 00:05:28,860
after conference hey you're totally

158
00:05:28,860 --> 00:05:30,570
wrong because I want to know I've been

159
00:05:30,570 --> 00:05:32,700
googling this I cannot find any like

160
00:05:32,700 --> 00:05:34,680
actual definition for these different

161
00:05:34,680 --> 00:05:36,390
principles so I just made up some words

162
00:05:36,390 --> 00:05:38,490
and they are the idea of having a tome

163
00:05:38,490 --> 00:05:41,010
for a lookup table using process algebra

164
00:05:41,010 --> 00:05:42,750
in lookup tables this thing called

165
00:05:42,750 --> 00:05:44,010
switch-case syndrome which apparently

166
00:05:44,010 --> 00:05:45,690
that's actually what that name is called

167
00:05:45,690 --> 00:05:47,310
other people use it so that one might be

168
00:05:47,310 --> 00:05:49,890
real this idea of naive otamatone or a

169
00:05:49,890 --> 00:05:51,810
Chinese room a philosophical Chinese

170
00:05:51,810 --> 00:05:54,479
room and logic hiding and that's that's

171
00:05:54,479 --> 00:05:57,330
kind of the coolest one I think so the

172
00:05:57,330 --> 00:05:59,910
first one let's go like back to the

173
00:05:59,910 --> 00:06:02,370
start here we have tomes if you have a

174
00:06:02,370 --> 00:06:04,260
multiplication table you don't need to

175
00:06:04,260 --> 00:06:06,419
multiply you just look up in the table

176
00:06:06,419 --> 00:06:08,130
for the two values and now you have your

177
00:06:08,130 --> 00:06:11,310
answer and you can do interesting things

178
00:06:11,310 --> 00:06:14,580
like count the number of one bits in a

179
00:06:14,580 --> 00:06:16,530
value and this is useful for things like

180
00:06:16,530 --> 00:06:18,210
trying to figure out like well what is

181
00:06:18,210 --> 00:06:19,950
the value of this thing if I got a PDM

182
00:06:19,950 --> 00:06:22,140
signal coming in or or any of these

183
00:06:22,140 --> 00:06:24,270
other kind of weird things where you

184
00:06:24,270 --> 00:06:26,130
want to count the ones and by the way

185
00:06:26,130 --> 00:06:27,720
there's other kind of neat algorithms

186
00:06:27,720 --> 00:06:29,700
where if you can do this quickly you can

187
00:06:29,700 --> 00:06:31,620
do neat things like zigzag through 2d

188
00:06:31,620 --> 00:06:34,620
arrays and stuff like that and this is

189
00:06:34,620 --> 00:06:36,120
an example from the Stanford bit

190
00:06:36,120 --> 00:06:38,220
twiddling hacks website and it's the

191
00:06:38,220 --> 00:06:40,289
first example on how to do this so you

192
00:06:40,289 --> 00:06:40,870
know it's stair

193
00:06:40,870 --> 00:06:43,000
Herbal and for this what it does is it

194
00:06:43,000 --> 00:06:45,640
steps through and it counts the number

195
00:06:45,640 --> 00:06:48,940
of ones that you see in this this thing

196
00:06:48,940 --> 00:06:50,200
right here and so it would iterate

197
00:06:50,200 --> 00:06:52,330
through for every single bit it's got to

198
00:06:52,330 --> 00:06:55,000
go run that loop do the comparison or an

199
00:06:55,000 --> 00:06:57,790
and operator at plus tons of stuff this

200
00:06:57,790 --> 00:07:00,190
thing is hugely slow but if you look a

201
00:07:00,190 --> 00:07:02,200
little bit further down on the stanford

202
00:07:02,200 --> 00:07:04,270
twit bit twiddling hack site they have

203
00:07:04,270 --> 00:07:06,940
this example where they use some macros

204
00:07:06,940 --> 00:07:08,860
don't worry about that but it produces

205
00:07:08,860 --> 00:07:11,380
this table where for every possible

206
00:07:11,380 --> 00:07:14,320
8-bit value you have the answer of how

207
00:07:14,320 --> 00:07:18,100
many ones are in that message now the

208
00:07:18,100 --> 00:07:19,720
real power here comes when you start

209
00:07:19,720 --> 00:07:21,670
mixing these tables when you can

210
00:07:21,670 --> 00:07:25,750
decompose your your your table into or

211
00:07:25,750 --> 00:07:29,290
the the task into smaller pieces so if

212
00:07:29,290 --> 00:07:31,990
you want to say do this but for 32 bits

213
00:07:31,990 --> 00:07:34,090
you can just simply look up the top

214
00:07:34,090 --> 00:07:35,590
nibble add it to the next nibble of

215
00:07:35,590 --> 00:07:37,630
Earth top bite add to the next bite down

216
00:07:37,630 --> 00:07:39,280
added the next bite down add it to the

217
00:07:39,280 --> 00:07:41,500
next bite down and now it's not like

218
00:07:41,500 --> 00:07:43,540
automatic instantly you're done but it's

219
00:07:43,540 --> 00:07:45,580
still way faster than going through each

220
00:07:45,580 --> 00:07:47,680
and every bit inside of this this longer

221
00:07:47,680 --> 00:07:50,890
message and another kind of feature here

222
00:07:50,890 --> 00:07:52,420
is if you have something like a sign

223
00:07:52,420 --> 00:07:54,970
lookup table you don't need to store the

224
00:07:54,970 --> 00:07:56,380
values for all of the different sign

225
00:07:56,380 --> 00:07:58,960
things instead you can store many of the

226
00:07:58,960 --> 00:08:01,360
values you'd care about and then at each

227
00:08:01,360 --> 00:08:03,550
one of those points you can have a point

228
00:08:03,550 --> 00:08:06,100
and a slope and then you can look up

229
00:08:06,100 --> 00:08:08,050
anywhere in between and still get really

230
00:08:08,050 --> 00:08:10,270
accurate answers even if you're look up

231
00:08:10,270 --> 00:08:12,880
tables aren't that big and so really

232
00:08:12,880 --> 00:08:15,250
you're looking for situations where you

233
00:08:15,250 --> 00:08:17,560
can either put everything in a table or

234
00:08:17,560 --> 00:08:20,200
put some things in a table to help break

235
00:08:20,200 --> 00:08:22,200
down the hardest parts of your problem

236
00:08:22,200 --> 00:08:25,330
are you guys still with me that's the

237
00:08:25,330 --> 00:08:27,550
that's the easiest one this goes from

238
00:08:27,550 --> 00:08:29,860
like a medium talk and if if you guys

239
00:08:29,860 --> 00:08:31,600
start glossing out on the last couple

240
00:08:31,600 --> 00:08:35,919
slides that's okay I apologize in

241
00:08:35,919 --> 00:08:37,390
advance but we'll just keep going with

242
00:08:37,390 --> 00:08:40,659
this the next one is the idea of a naive

243
00:08:40,659 --> 00:08:42,820
otamatone or the chinese room the idea

244
00:08:42,820 --> 00:08:44,890
that this information can be stored in

245
00:08:44,890 --> 00:08:46,630
there or can be put in and other stuff

246
00:08:46,630 --> 00:08:48,040
can come out but there's no intelligence

247
00:08:48,040 --> 00:08:50,500
there's no no concept of what's actually

248
00:08:50,500 --> 00:08:53,320
happening so an example for this was

249
00:08:53,320 --> 00:08:54,850
that i used was i was earning

250
00:08:54,850 --> 00:08:56,529
this problem I wanted to run a minecraft

251
00:08:56,529 --> 00:08:58,690
server on a microscope slide on an 80

252
00:08:58,690 --> 00:09:03,759
mega 168 so how do you do that like

253
00:09:03,759 --> 00:09:05,860
that's that's it's tiny so you end up

254
00:09:05,860 --> 00:09:07,360
writing your own TCP stack and that

255
00:09:07,360 --> 00:09:09,339
works but then you run in like so you

256
00:09:09,339 --> 00:09:10,779
start building all these pieces and I

257
00:09:10,779 --> 00:09:12,160
didn't actually look ahead I just

258
00:09:12,160 --> 00:09:13,240
started building the pieces one at a

259
00:09:13,240 --> 00:09:14,829
time and I ran into this thing where oh

260
00:09:14,829 --> 00:09:17,110
yeah actually on minecraft if you want

261
00:09:17,110 --> 00:09:18,880
to be able to display any blocks you

262
00:09:18,880 --> 00:09:20,470
have to first load a chunk okay how do

263
00:09:20,470 --> 00:09:22,300
you load a chunk well the answer is you

264
00:09:22,300 --> 00:09:24,310
have to go create this entire thing

265
00:09:24,310 --> 00:09:26,470
which is all of the blocks in this huge

266
00:09:26,470 --> 00:09:30,069
16 by 16 by 128 area and then you have

267
00:09:30,069 --> 00:09:31,899
to like it has to be done with Z live

268
00:09:31,899 --> 00:09:33,699
compression and and all of this other

269
00:09:33,699 --> 00:09:36,250
stuff like how am I gonna do that on an

270
00:09:36,250 --> 00:09:38,680
on the thing that has 512 bytes of RAM

271
00:09:38,680 --> 00:09:43,149
like this is this is insane like that's

272
00:09:43,149 --> 00:09:45,100
not gonna be like how do i how do I

273
00:09:45,100 --> 00:09:47,410
actually like how am I even gonna do

274
00:09:47,410 --> 00:09:48,970
like the Z live compression part of this

275
00:09:48,970 --> 00:09:50,610
and the answer is you don't

276
00:09:50,610 --> 00:09:55,060
instead what you do is you take the

277
00:09:55,060 --> 00:09:57,819
messages you need and you compress them

278
00:09:57,819 --> 00:10:00,430
and then you glom them together and the

279
00:10:00,430 --> 00:10:02,259
system has no idea what any of those

280
00:10:02,259 --> 00:10:04,269
bytes mean but it knows if I just

281
00:10:04,269 --> 00:10:05,709
deliver this to the user the right thing

282
00:10:05,709 --> 00:10:10,269
happens and so I have no idea what those

283
00:10:10,269 --> 00:10:12,910
bytes do I I if you guys do that would

284
00:10:12,910 --> 00:10:16,000
be truly impressive but but it makes no

285
00:10:16,000 --> 00:10:18,970
sense to me but that's ok because what I

286
00:10:18,970 --> 00:10:21,550
actually did was I wrote 4 separate

287
00:10:21,550 --> 00:10:23,649
programs to help build the packet I just

288
00:10:23,649 --> 00:10:25,600
dumped the output of all the tools into

289
00:10:25,600 --> 00:10:27,670
Z libes deflate on the command line and

290
00:10:27,670 --> 00:10:30,009
I didn't need to worry about anything

291
00:10:30,009 --> 00:10:31,569
else from there and by the way it

292
00:10:31,569 --> 00:10:32,920
totally works you can actually run

293
00:10:32,920 --> 00:10:34,420
Minecraft on a microscope slide and

294
00:10:34,420 --> 00:10:39,160
everything's fine the next one that's

295
00:10:39,160 --> 00:10:41,529
this is kind of bridging the gap now so

296
00:10:41,529 --> 00:10:43,000
I'm sure a lot of you guys are kind of

297
00:10:43,000 --> 00:10:45,040
hardware leaning right like I don't know

298
00:10:45,040 --> 00:10:46,949
who here's more hardware than software

299
00:10:46,949 --> 00:10:49,600
ok then then we're kind of on the right

300
00:10:49,600 --> 00:10:52,990
row right ball game now so if you want

301
00:10:52,990 --> 00:10:55,839
to output to ws2812 or W is 2013 LEDs

302
00:10:55,839 --> 00:10:57,639
there are libraries which do it using

303
00:10:57,639 --> 00:10:59,769
special hardware like as I just found

304
00:10:59,769 --> 00:11:01,540
out last night a remote module on the

305
00:11:01,540 --> 00:11:04,300
ESP 32 but the way that it was done on

306
00:11:04,300 --> 00:11:06,579
the 80 to 66 and almost all hardware

307
00:11:06,579 --> 00:11:08,710
before that is it was done with

308
00:11:08,710 --> 00:11:10,180
shift registers built into the hardware

309
00:11:10,180 --> 00:11:14,680
so your your 80 mega your 80 tiny all of

310
00:11:14,680 --> 00:11:16,180
these chips have shift registers

311
00:11:16,180 --> 00:11:18,700
built-in and so what you can do is you

312
00:11:18,700 --> 00:11:21,100
can just give them these values in this

313
00:11:21,100 --> 00:11:24,190
case I have 16-bit values where the the

314
00:11:24,190 --> 00:11:26,200
values like the hardware just reads from

315
00:11:26,200 --> 00:11:28,570
left to right and outputs that value on

316
00:11:28,570 --> 00:11:30,220
the line and so if you're trying to

317
00:11:30,220 --> 00:11:32,200
control like those little blinky 2012

318
00:11:32,200 --> 00:11:34,210
LEDs you see it sends some ones and

319
00:11:34,210 --> 00:11:37,000
zeros all you do is you just look up a

320
00:11:37,000 --> 00:11:39,580
nibble in the table and if it's say like

321
00:11:39,580 --> 00:11:42,340
zero then what you have is one zero zero

322
00:11:42,340 --> 00:11:45,100
one zero one zero zero one zero zero

323
00:11:45,100 --> 00:11:46,870
zero and so what that does is that's

324
00:11:46,870 --> 00:11:49,530
effectively like zero zero zero zero

325
00:11:49,530 --> 00:11:53,410
yeah and then you look up the next

326
00:11:53,410 --> 00:11:55,240
nibble and you can just start sending

327
00:11:55,240 --> 00:11:57,640
the stuff out and this is ridiculously

328
00:11:57,640 --> 00:12:00,310
fast in comparison to trying to write

329
00:12:00,310 --> 00:12:02,260
code to figure out how to actually send

330
00:12:02,260 --> 00:12:04,900
that bit pattern so the idea is the code

331
00:12:04,900 --> 00:12:07,690
just no concept of any like what does

332
00:12:07,690 --> 00:12:10,600
any of that mean within the code but it

333
00:12:10,600 --> 00:12:12,760
does work out to have the right output

334
00:12:12,760 --> 00:12:16,320
okay still with me okay

335
00:12:16,320 --> 00:12:20,080
this next one is called I don't actually

336
00:12:20,080 --> 00:12:21,760
know this is the name some people seem

337
00:12:21,760 --> 00:12:24,700
to call it this but yeah and it's the

338
00:12:24,700 --> 00:12:26,110
same name that you use for other things

339
00:12:26,110 --> 00:12:28,750
not just lookup tables but anytime that

340
00:12:28,750 --> 00:12:30,760
you you have a situation where if you're

341
00:12:30,760 --> 00:12:34,030
trying to find the power of like a sign

342
00:12:34,030 --> 00:12:36,340
and you got like things that are going

343
00:12:36,340 --> 00:12:38,350
on and you have an input and output a

344
00:12:38,350 --> 00:12:41,710
lot of times if you rephrase the problem

345
00:12:41,710 --> 00:12:44,890
or you move the operations around you

346
00:12:44,890 --> 00:12:46,270
can find out that there's times where

347
00:12:46,270 --> 00:12:48,580
it's a lot less work so in this case

348
00:12:48,580 --> 00:12:50,500
this is something that I actually seeing

349
00:12:50,500 --> 00:12:52,870
code sometimes where where projects will

350
00:12:52,870 --> 00:12:54,400
have look-up tables for specific

351
00:12:54,400 --> 00:12:56,350
operations or functions to do specific

352
00:12:56,350 --> 00:12:59,080
operations when what they could do is

353
00:12:59,080 --> 00:13:01,870
they could just bake it all together so

354
00:13:01,870 --> 00:13:03,880
instead of having to do all of this code

355
00:13:03,880 --> 00:13:05,560
which by the way uses look-up tables and

356
00:13:05,560 --> 00:13:07,720
is reasonably fast now we can make it

357
00:13:07,720 --> 00:13:10,000
much faster just by having everything

358
00:13:10,000 --> 00:13:14,410
all baked together so don't get hung up

359
00:13:14,410 --> 00:13:16,630
on writing good reusable code here like

360
00:13:16,630 --> 00:13:18,610
just just don't worry about it don't

361
00:13:18,610 --> 00:13:20,170
worry about trying to make your look-up

362
00:13:20,170 --> 00:13:21,490
tables be something I can be truly

363
00:13:21,490 --> 00:13:22,030
general

364
00:13:22,030 --> 00:13:23,950
lies and I can use in future projects

365
00:13:23,950 --> 00:13:26,620
just recreate it it's takes like once

366
00:13:26,620 --> 00:13:28,420
you get good at this just takes almost

367
00:13:28,420 --> 00:13:31,750
no time and make purpose-built tables

368
00:13:31,750 --> 00:13:34,150
like just just make them exactly for

369
00:13:34,150 --> 00:13:36,040
what it is you need to do and then if

370
00:13:36,040 --> 00:13:37,360
you want to change it you don't like the

371
00:13:37,360 --> 00:13:39,010
way the LEDs are dimming or something

372
00:13:39,010 --> 00:13:43,090
like that just change the table so now

373
00:13:43,090 --> 00:13:45,970
we get to a project who here has seen

374
00:13:45,970 --> 00:13:48,640
this project of mine anybody so a couple

375
00:13:48,640 --> 00:13:52,660
people here okay so that's a little ASP

376
00:13:52,660 --> 00:13:55,450
82 66 right there it's got Wi-Fi on it

377
00:13:55,450 --> 00:13:58,540
that's 802 11 2.4 gigahertz how am I

378
00:13:58,540 --> 00:14:01,900
going to abuse that radio to transmit to

379
00:14:01,900 --> 00:14:04,120
a television this is this is just a wire

380
00:14:04,120 --> 00:14:06,910
on it is now broadcasting a VHF signal

381
00:14:06,910 --> 00:14:10,120
to that television I'm not gonna be

382
00:14:10,120 --> 00:14:11,620
using the radio I'm gonna be using an

383
00:14:11,620 --> 00:14:13,330
i/o port on it and I'm gonna have it

384
00:14:13,330 --> 00:14:14,710
hooked up to the nice little shift

385
00:14:14,710 --> 00:14:16,600
register built-in and I'm gonna start

386
00:14:16,600 --> 00:14:18,520
just bit banging some bits out but what

387
00:14:18,520 --> 00:14:22,360
bits do I bang out to create it so what

388
00:14:22,360 --> 00:14:23,890
I did was I wrote a little JavaScript

389
00:14:23,890 --> 00:14:25,750
program which by the way I'm a C

390
00:14:25,750 --> 00:14:27,730
programmer normally but the neat thing

391
00:14:27,730 --> 00:14:28,960
about look-up tables is they're like

392
00:14:28,960 --> 00:14:31,030
truly language agnostic like you could

393
00:14:31,030 --> 00:14:32,920
write them in any language and use them

394
00:14:32,920 --> 00:14:35,290
in any language and so I had this like

395
00:14:35,290 --> 00:14:36,820
little JavaScript program where I would

396
00:14:36,820 --> 00:14:38,620
actually create like a signal and the

397
00:14:38,620 --> 00:14:41,500
carrier for the chroma and all the weird

398
00:14:41,500 --> 00:14:45,040
stuff with that and and I would then

399
00:14:45,040 --> 00:14:47,350
look and see is it greater than 0.5 or

400
00:14:47,350 --> 00:14:49,330
less than 0.5 sided a little bit of a DC

401
00:14:49,330 --> 00:14:51,790
bias and it would create this bit stream

402
00:14:51,790 --> 00:14:53,860
that I would transfer to the processor

403
00:14:53,860 --> 00:14:56,260
and the processor kept this dictionary

404
00:14:56,260 --> 00:14:58,840
of colors to bitstreams so like oh yeah

405
00:14:58,840 --> 00:15:01,240
the the the bit stream for this one

406
00:15:01,240 --> 00:15:02,830
defines this color in this color and

407
00:15:02,830 --> 00:15:04,360
this color in this color and we just pop

408
00:15:04,360 --> 00:15:07,150
between them as it scanned across and so

409
00:15:07,150 --> 00:15:09,220
in this case I'm doing a couple things

410
00:15:09,220 --> 00:15:14,620
so it's I already talked through that it

411
00:15:14,620 --> 00:15:16,480
uses this idea of the tome the idea of

412
00:15:16,480 --> 00:15:18,610
every single time stamp or every single

413
00:15:18,610 --> 00:15:20,620
time base is is now defined what it

414
00:15:20,620 --> 00:15:22,030
should be outputting at that time is

415
00:15:22,030 --> 00:15:24,910
defined it's not a photometer Moton

416
00:15:24,910 --> 00:15:28,420
where the code has like the code that

417
00:15:28,420 --> 00:15:30,250
just reads through this has no idea what

418
00:15:30,250 --> 00:15:32,140
any of these bits mean like I wouldn't

419
00:15:32,140 --> 00:15:33,600
even be able to know what they mean but

420
00:15:33,600 --> 00:15:35,889
it was computed from that

421
00:15:35,889 --> 00:15:37,359
nice little JavaScript program which

422
00:15:37,359 --> 00:15:38,829
created those beautiful little waves

423
00:15:38,829 --> 00:15:40,329
which by the way if you look at it on

424
00:15:40,329 --> 00:15:42,309
like Osmo comm or like one of the the F

425
00:15:42,309 --> 00:15:44,920
of T fewer things the it does not look

426
00:15:44,920 --> 00:15:46,449
that good but it's still good enough

427
00:15:46,449 --> 00:15:48,429
good enough for the TV the TV still

428
00:15:48,429 --> 00:15:52,239
still did it and process algebra so now

429
00:15:52,239 --> 00:15:54,429
second to last concept here before we

430
00:15:54,429 --> 00:15:56,259
get into some more examples this is

431
00:15:56,259 --> 00:15:57,040
where it starts getting a little

432
00:15:57,040 --> 00:15:59,410
trickier okay a lot trickier is this

433
00:15:59,410 --> 00:16:02,439
idea of setup soup and this is a term

434
00:16:02,439 --> 00:16:04,569
which I don't really know why you would

435
00:16:04,569 --> 00:16:06,129
call right don't worry about that it's

436
00:16:06,129 --> 00:16:07,540
part of a bigger one which is the

437
00:16:07,540 --> 00:16:10,089
switch-case syndrome thing so the idea

438
00:16:10,089 --> 00:16:12,160
is you can write code to do that but in

439
00:16:12,160 --> 00:16:13,689
this case I was working on a system

440
00:16:13,689 --> 00:16:15,819
where I had one kilobyte between user

441
00:16:15,819 --> 00:16:18,309
code and like regular code on an 80 tiny

442
00:16:18,309 --> 00:16:19,449
13 and it needed to be a

443
00:16:19,449 --> 00:16:22,209
software-defined power supply and also a

444
00:16:22,209 --> 00:16:24,160
bootloader for the other code so you

445
00:16:24,160 --> 00:16:26,259
could turn the power on and off at the

446
00:16:26,259 --> 00:16:27,850
right times to make it boot into the

447
00:16:27,850 --> 00:16:29,499
bootloader and reflash it over the power

448
00:16:29,499 --> 00:16:31,689
it was just weird I don't know why I

449
00:16:31,689 --> 00:16:34,329
agreed to do this but the point was

450
00:16:34,329 --> 00:16:35,799
everything needs to be as small as

451
00:16:35,799 --> 00:16:36,399
possible

452
00:16:36,399 --> 00:16:39,369
and you actually can do that just by

453
00:16:39,369 --> 00:16:40,959
doing this you'd think well if I make a

454
00:16:40,959 --> 00:16:43,360
table I have to interpret the table but

455
00:16:43,360 --> 00:16:44,649
a lot of times you'll find that

456
00:16:44,649 --> 00:16:47,379
interpreting tables actually produces

457
00:16:47,379 --> 00:16:50,529
much smaller code then having the code

458
00:16:50,529 --> 00:16:52,139
to go do it in the first place and

459
00:16:52,139 --> 00:16:55,299
that's just one of the options the other

460
00:16:55,299 --> 00:16:56,919
one which is this is all part of this

461
00:16:56,919 --> 00:16:58,569
idea of the switch-case syndrome is that

462
00:16:58,569 --> 00:17:00,579
you can have a switch case that does all

463
00:17:00,579 --> 00:17:02,439
these different things and has some

464
00:17:02,439 --> 00:17:04,929
gnarly logic in there but another way

465
00:17:04,929 --> 00:17:07,269
around it is this is in JavaScript is

466
00:17:07,269 --> 00:17:09,459
just to have the functions you'd want to

467
00:17:09,459 --> 00:17:11,769
call in given situations in a table and

468
00:17:11,769 --> 00:17:13,869
this is really kind of critical to

469
00:17:13,869 --> 00:17:17,079
thinking in the way that that lookup

470
00:17:17,079 --> 00:17:19,990
tables can control your programs control

471
00:17:19,990 --> 00:17:22,148
flow that that look-up tables can

472
00:17:22,148 --> 00:17:23,709
actually like not just give you an

473
00:17:23,709 --> 00:17:25,299
answer from some input but it can also

474
00:17:25,299 --> 00:17:27,010
kind of like change the way that your

475
00:17:27,010 --> 00:17:29,679
code is executed in some really kind of

476
00:17:29,679 --> 00:17:33,580
interested in deep ways and now we come

477
00:17:33,580 --> 00:17:38,320
to the last big lookup table idea this

478
00:17:38,320 --> 00:17:40,720
was unfortunately published on April 1st

479
00:17:40,720 --> 00:17:42,070
I thought it would be a great idea I

480
00:17:42,070 --> 00:17:43,809
told Mike stich about it I was like oh

481
00:17:43,809 --> 00:17:45,220
my gosh I can do this thing it's

482
00:17:45,220 --> 00:17:47,350
ridiculous I'm gonna do it on April 1st

483
00:17:47,350 --> 00:17:48,669
and the joke is that it's gonna be it's

484
00:17:48,669 --> 00:17:49,820
not gonna be a joke

485
00:17:49,820 --> 00:17:51,260
the fact that very few people thought

486
00:17:51,260 --> 00:17:53,990
this was real and they were kind of

487
00:17:53,990 --> 00:17:56,270
right and it was I'm not going to do

488
00:17:56,270 --> 00:17:58,040
that again not for something this weird

489
00:17:58,040 --> 00:18:03,590
because like there there is no Ethernet

490
00:18:03,590 --> 00:18:05,570
controller inside that chip but you can

491
00:18:05,570 --> 00:18:07,430
still talk 10base2 Ethernet to it it's

492
00:18:07,430 --> 00:18:10,850
it's it's fine and you may be thinking

493
00:18:10,850 --> 00:18:13,850
how like you have so I have this this

494
00:18:13,850 --> 00:18:15,650
again this nice little shift register

495
00:18:15,650 --> 00:18:17,180
that I can operate at 40 megahertz in

496
00:18:17,180 --> 00:18:19,790
this thing thank you

497
00:18:19,790 --> 00:18:22,550
I know only a sprite is here from

498
00:18:22,550 --> 00:18:24,770
espresso but thank you so much to tell

499
00:18:24,770 --> 00:18:26,750
whoever put the first I squared s engine

500
00:18:26,750 --> 00:18:30,110
in an ESP like if I can give them a beer

501
00:18:30,110 --> 00:18:33,560
or something it's gonna be anyway you

502
00:18:33,560 --> 00:18:35,600
get this data stream coming on in it's

503
00:18:35,600 --> 00:18:37,520
coming in at 40 megabits per second and

504
00:18:37,520 --> 00:18:40,250
and and and you have the signal this 10

505
00:18:40,250 --> 00:18:41,900
base T Ethernet signal which by the way

506
00:18:41,900 --> 00:18:43,790
is actually 20 megahertz there's some

507
00:18:43,790 --> 00:18:45,440
neat things with like Manchester coding

508
00:18:45,440 --> 00:18:47,570
and all but in order to do 10 base T

509
00:18:47,570 --> 00:18:49,730
Ethernet on this ESP to be able to hook

510
00:18:49,730 --> 00:18:51,290
it up to an Ethernet jack and have it

511
00:18:51,290 --> 00:18:53,420
work you have to interpret the signal

512
00:18:53,420 --> 00:18:55,730
and figure out what bytes are actually

513
00:18:55,730 --> 00:18:59,120
being sent and that's really hard it's

514
00:18:59,120 --> 00:19:01,340
actually this hard this is all of the

515
00:19:01,340 --> 00:19:02,600
difference so like I went through on

516
00:19:02,600 --> 00:19:04,100
paper and went through like okay if it

517
00:19:04,100 --> 00:19:07,820
was a 1 and then it's a 0 then this and

518
00:19:07,820 --> 00:19:11,270
and all of these this is crazy stupid

519
00:19:11,270 --> 00:19:13,520
logic and this inner loop now has to

520
00:19:13,520 --> 00:19:15,350
execute at 40 megahertz like I don't

521
00:19:15,350 --> 00:19:16,520
even think you can do that on like a

522
00:19:16,520 --> 00:19:18,050
Pentium like you're not even a Pentium

523
00:19:18,050 --> 00:19:19,610
and i-5 I don't think you can just do it

524
00:19:19,610 --> 00:19:24,380
at all but but but what you can do is

525
00:19:24,380 --> 00:19:27,440
you can frame your problem as having

526
00:19:27,440 --> 00:19:30,110
some value some state that you have your

527
00:19:30,110 --> 00:19:33,470
input you're changing that and then at

528
00:19:33,470 --> 00:19:35,780
the end you know how those values

529
00:19:35,780 --> 00:19:37,880
changed and you have some bits that

530
00:19:37,880 --> 00:19:40,220
you've read in so this has a loop that

531
00:19:40,220 --> 00:19:43,310
iterates over 4 bits and I change the

532
00:19:43,310 --> 00:19:46,540
values so effectively what I'm doing is

533
00:19:46,540 --> 00:19:49,940
I'm doing this sort of thing down here

534
00:19:49,940 --> 00:19:52,040
by the way bit Looney thank you for kind

535
00:19:52,040 --> 00:19:53,210
of mentioning that last night I think

536
00:19:53,210 --> 00:19:56,570
this really helps in that you have some

537
00:19:56,570 --> 00:19:58,400
new data that's coming into this this

538
00:19:58,400 --> 00:20:02,120
lookup table and you have outputs which

539
00:20:02,120 --> 00:20:03,650
feed back into the input

540
00:20:03,650 --> 00:20:06,610
and that this idea is what has made

541
00:20:06,610 --> 00:20:09,320
basically a lot of my crazier projects

542
00:20:09,320 --> 00:20:11,840
possible and if you can phrase your

543
00:20:11,840 --> 00:20:14,390
problem in one of these ways where you

544
00:20:14,390 --> 00:20:16,970
can write a bunch of really wild code to

545
00:20:16,970 --> 00:20:18,620
just go figure out how to solve the

546
00:20:18,620 --> 00:20:21,890
problem you don't need to worry how fast

547
00:20:21,890 --> 00:20:24,380
or slow it executes because it all

548
00:20:24,380 --> 00:20:28,360
executes all at once in a single lookup

549
00:20:28,360 --> 00:20:31,190
so what I'll do is I'll write out what

550
00:20:31,190 --> 00:20:33,500
the different bits mean in the area so I

551
00:20:33,500 --> 00:20:35,210
know that like the most significant bit

552
00:20:35,210 --> 00:20:37,280
is whether or not it was a 1 or 0 is the

553
00:20:37,280 --> 00:20:39,920
last one the next one down was ok don't

554
00:20:39,920 --> 00:20:41,210
even worry about that kind of stuff

555
00:20:41,210 --> 00:20:43,670
point is I write out the table for what

556
00:20:43,670 --> 00:20:45,470
the inputs mean and what the outputs is

557
00:20:45,470 --> 00:20:47,690
my table mean and then I can then use

558
00:20:47,690 --> 00:20:49,640
the table and just start feeding it data

559
00:20:49,640 --> 00:20:51,620
feeding the output back into the input

560
00:20:51,620 --> 00:20:54,440
and now I can do incredible amounts of

561
00:20:54,440 --> 00:20:58,280
processing so this is totally definable

562
00:20:58,280 --> 00:21:01,010
in Verilog I could use I don't even know

563
00:21:01,010 --> 00:21:01,940
how many Lots it would take but it

564
00:21:01,940 --> 00:21:04,540
wouldn't take that many Lots Oh an FPGA

565
00:21:04,540 --> 00:21:07,220
but I can bake all of them all together

566
00:21:07,220 --> 00:21:09,860
all into a single table and it's a

567
00:21:09,860 --> 00:21:11,840
single lot that can be operated inside

568
00:21:11,840 --> 00:21:15,560
of just a normal processor by the way

569
00:21:15,560 --> 00:21:20,150
this also runs on an 80 tiny 85 you

570
00:21:20,150 --> 00:21:22,010
can't do a ton of stuff with it but you

571
00:21:22,010 --> 00:21:24,290
can ping it and if you ping it with the

572
00:21:24,290 --> 00:21:26,360
right packets you can send it colors to

573
00:21:26,360 --> 00:21:28,670
send to the LEDs and then it responds

574
00:21:28,670 --> 00:21:30,560
back by whether or not like the button

575
00:21:30,560 --> 00:21:34,370
is pressed so it works and by the way it

576
00:21:34,370 --> 00:21:39,740
uses exactly the same table and and the

577
00:21:39,740 --> 00:21:42,860
the TX also uses a lookup table for

578
00:21:42,860 --> 00:21:44,510
transmitting packets and it's the same

579
00:21:44,510 --> 00:21:46,280
sort of idea that you solved at ws2812

580
00:21:46,280 --> 00:21:49,100
sware where we have these these things

581
00:21:49,100 --> 00:21:50,720
and it shifts from left to right and

582
00:21:50,720 --> 00:21:52,490
that defines how the data goes out and

583
00:21:52,490 --> 00:21:54,080
by the way the convenient thing is on

584
00:21:54,080 --> 00:21:56,600
the the AVR is the the process to go

585
00:21:56,600 --> 00:21:58,340
through and use this table if you write

586
00:21:58,340 --> 00:22:01,400
it an assembly is exactly 8 commands so

587
00:22:01,400 --> 00:22:03,710
if you're if you're running your

588
00:22:03,710 --> 00:22:07,730
processor at 20 megahertz I think it's

589
00:22:07,730 --> 00:22:11,000
no it's 7 or not 7 4 or 8 or something

590
00:22:11,000 --> 00:22:12,380
like that point is it just works out

591
00:22:12,380 --> 00:22:14,180
that like it's processor complete and

592
00:22:14,180 --> 00:22:15,890
you can actually send 10 base T

593
00:22:15,890 --> 00:22:17,560
arbitrary packets from

594
00:22:17,560 --> 00:22:21,430
and it does all the magic stuff so we're

595
00:22:21,430 --> 00:22:23,020
gonna write a little bit of this out on

596
00:22:23,020 --> 00:22:25,360
paper and so this is actually how I

597
00:22:25,360 --> 00:22:27,580
start thinking through this this is an

598
00:22:27,580 --> 00:22:29,980
example of where I was doing full-speed

599
00:22:29,980 --> 00:22:32,230
and this never made it to video because

600
00:22:32,230 --> 00:22:34,150
I never finished the other part of it

601
00:22:34,150 --> 00:22:37,090
which there's a lot of projects I do

602
00:22:37,090 --> 00:22:38,680
that nobody's ever seen and that's okay

603
00:22:38,680 --> 00:22:40,960
and just fail and it's fine

604
00:22:40,960 --> 00:22:45,310
but I tried doing full speed USB using

605
00:22:45,310 --> 00:22:46,930
like software a bit banging and there's

606
00:22:46,930 --> 00:22:49,690
a bunch of low speed USB stuff but I I

607
00:22:49,690 --> 00:22:51,400
thought maybe I could do with full speed

608
00:22:51,400 --> 00:22:55,720
the answer is you kind of can but what I

609
00:22:55,720 --> 00:22:57,250
would do is I would write out on paper

610
00:22:57,250 --> 00:23:00,220
so if I see a bit transition now if it's

611
00:23:00,220 --> 00:23:02,500
like two bits that I get on my input

612
00:23:02,500 --> 00:23:05,290
shift register then it's it's invalid I

613
00:23:05,290 --> 00:23:06,820
know that that's bad and so I can just

614
00:23:06,820 --> 00:23:10,000
write that into like a table and if it's

615
00:23:10,000 --> 00:23:12,610
if it's three in a row and that's a one

616
00:23:12,610 --> 00:23:15,040
one one bit transition if it's if it's

617
00:23:15,040 --> 00:23:17,560
four it's also one but if I see five

618
00:23:17,560 --> 00:23:18,790
then I know that that's not really a

619
00:23:18,790 --> 00:23:21,550
valid thing I can see and so I would

620
00:23:21,550 --> 00:23:22,690
write out all the different

621
00:23:22,690 --> 00:23:24,340
possibilities one of the nice things

622
00:23:24,340 --> 00:23:25,780
about USB is it does this thing called

623
00:23:25,780 --> 00:23:27,550
bit stuffing so it guarantees you don't

624
00:23:27,550 --> 00:23:30,460
have really long runs of values so you

625
00:23:30,460 --> 00:23:33,010
don't get D synchronized but um but what

626
00:23:33,010 --> 00:23:34,360
I could do is I could write all of that

627
00:23:34,360 --> 00:23:36,490
out on paper and then I could kind of

628
00:23:36,490 --> 00:23:38,740
think about it as that table like how

629
00:23:38,740 --> 00:23:40,360
would I take this thing that I've kind

630
00:23:40,360 --> 00:23:42,100
of written out on table and turn it into

631
00:23:42,100 --> 00:23:45,250
a table and in this case what I thought

632
00:23:45,250 --> 00:23:47,290
of is like okay well I could read in

633
00:23:47,290 --> 00:23:49,900
eight bits at a time and this is like

634
00:23:49,900 --> 00:23:53,140
sequentially so 8 bits in time and I

635
00:23:53,140 --> 00:23:55,300
would need to store it's like five bits

636
00:23:55,300 --> 00:23:57,160
of state is the minimum that I could

637
00:23:57,160 --> 00:23:58,750
figure out how to get that down to and

638
00:23:58,750 --> 00:24:01,840
then on my output I can output the

639
00:24:01,840 --> 00:24:04,240
number of like actual logical bits that

640
00:24:04,240 --> 00:24:05,860
I'm gonna be outputting the bits

641
00:24:05,860 --> 00:24:07,660
themselves are stored in like the next

642
00:24:07,660 --> 00:24:09,550
couple bits over so if this was like

643
00:24:09,550 --> 00:24:11,320
zero zero then I don't even care about

644
00:24:11,320 --> 00:24:13,030
that if it was zero one that means

645
00:24:13,030 --> 00:24:14,680
there's one bit in here that's that's

646
00:24:14,680 --> 00:24:16,840
useful and actually it would be over

647
00:24:16,840 --> 00:24:19,510
there and and stuff like that and the

648
00:24:19,510 --> 00:24:22,240
idea is this I could then turn into a

649
00:24:22,240 --> 00:24:26,140
table and so it allows you to kind of

650
00:24:26,140 --> 00:24:27,580
think about the whole system like what

651
00:24:27,580 --> 00:24:29,890
are you really trying to accomplish what

652
00:24:29,890 --> 00:24:30,809
are the inputs that you

653
00:24:30,809 --> 00:24:32,340
to work with what do you have to keep

654
00:24:32,340 --> 00:24:34,559
track of and then you can make it into a

655
00:24:34,559 --> 00:24:37,590
table and the the two things that are

656
00:24:37,590 --> 00:24:39,120
really critical here when you think

657
00:24:39,120 --> 00:24:41,730
about this is understand that the input

658
00:24:41,730 --> 00:24:45,240
bits are really really valuable so if I

659
00:24:45,240 --> 00:24:46,470
can figure out how to do this with one

660
00:24:46,470 --> 00:24:49,019
bit less of state the size of my look-up

661
00:24:49,019 --> 00:24:51,389
tables now half the size if I can figure

662
00:24:51,389 --> 00:24:53,669
out how to do with it with several less

663
00:24:53,669 --> 00:24:55,590
or like if I can do say four bits of

664
00:24:55,590 --> 00:24:57,720
input at a time my table is much smaller

665
00:24:57,720 --> 00:25:00,450
like 1/16 the size but then you have to

666
00:25:00,450 --> 00:25:02,850
kind of make the trade-off so back to

667
00:25:02,850 --> 00:25:04,799
the the gzip thing so the thing that

668
00:25:04,799 --> 00:25:06,059
whenever you're compressing your

669
00:25:06,059 --> 00:25:08,490
uncompressing files there is a trade-off

670
00:25:08,490 --> 00:25:10,259
there and there's a lot of research that

671
00:25:10,259 --> 00:25:13,950
went into what size of a table do you

672
00:25:13,950 --> 00:25:15,960
use before you drop back and you do it

673
00:25:15,960 --> 00:25:18,509
in a naive way and the reason is if this

674
00:25:18,509 --> 00:25:20,490
table gets big on a processor that uses

675
00:25:20,490 --> 00:25:23,429
cache then you blow your cache all the

676
00:25:23,429 --> 00:25:25,710
time and you end up back in a situation

677
00:25:25,710 --> 00:25:26,999
where you be even slower than the

678
00:25:26,999 --> 00:25:31,499
original like solution so we have these

679
00:25:31,499 --> 00:25:34,470
building blocks and I have two more

680
00:25:34,470 --> 00:25:37,679
examples here one I was gonna go a lot

681
00:25:37,679 --> 00:25:39,269
more into but totally shouldn't

682
00:25:39,269 --> 00:25:42,539
especially considering time and yeah so

683
00:25:42,539 --> 00:25:44,070
we're at this and again if any of you

684
00:25:44,070 --> 00:25:45,450
guys know the actual names for these

685
00:25:45,450 --> 00:25:47,100
things or one of brainstorm better names

686
00:25:47,100 --> 00:25:50,210
please let me know let's get weird

687
00:25:50,210 --> 00:25:55,289
so Olivier Billy I don't know how to

688
00:25:55,289 --> 00:25:57,419
pronounce his name I hope I didn't just

689
00:25:57,419 --> 00:26:01,169
totally budget a botch botch it

690
00:26:01,169 --> 00:26:04,139
he made this cool thing so you guys are

691
00:26:04,139 --> 00:26:05,600
probably used to seeing a bunch of like

692
00:26:05,600 --> 00:26:08,700
computers made with 7400 series logic

693
00:26:08,700 --> 00:26:10,710
and like the the mega processor out of

694
00:26:10,710 --> 00:26:12,600
transistors and all of that this guy

695
00:26:12,600 --> 00:26:13,980
wanted the best of both he wanted a

696
00:26:13,980 --> 00:26:15,600
small computer that was actually a

697
00:26:15,600 --> 00:26:18,990
competent computer and in fact it was so

698
00:26:18,990 --> 00:26:20,610
competent that he could write a

699
00:26:20,610 --> 00:26:23,820
relatively high level language and it

700
00:26:23,820 --> 00:26:25,980
would solve the N Queens problem and

701
00:26:25,980 --> 00:26:28,470
that's that's literally all of that is

702
00:26:28,470 --> 00:26:29,940
running on this little computer right

703
00:26:29,940 --> 00:26:32,369
here and the computer is made out of

704
00:26:32,369 --> 00:26:35,070
nothing except for ROM and this one Ram

705
00:26:35,070 --> 00:26:37,649
chip right here and that's that's how it

706
00:26:37,649 --> 00:26:39,539
works is that all of the different major

707
00:26:39,539 --> 00:26:42,509
components are baked into the individual

708
00:26:42,509 --> 00:26:44,690
chips so

709
00:26:44,690 --> 00:26:48,320
sorry so what they would do for things

710
00:26:48,320 --> 00:26:51,470
like a an ALU which I don't know if you

711
00:26:51,470 --> 00:26:54,680
guys have seen that before an ALU takes

712
00:26:54,680 --> 00:26:56,660
in like two numbers and then you might

713
00:26:56,660 --> 00:26:58,190
want to add them or subtract them or

714
00:26:58,190 --> 00:27:00,230
divide them or whatever and then it

715
00:27:00,230 --> 00:27:03,440
outputs a value and it may output things

716
00:27:03,440 --> 00:27:05,300
like oh yeah actually you you skipped

717
00:27:05,300 --> 00:27:06,860
over when you added that and stuff like

718
00:27:06,860 --> 00:27:08,420
that so instead of having all of these

719
00:27:08,420 --> 00:27:10,880
complicated logic circuits for for doing

720
00:27:10,880 --> 00:27:12,970
that he just baked it into an EEPROM and

721
00:27:12,970 --> 00:27:15,830
again we see the other the ROM thing

722
00:27:15,830 --> 00:27:17,950
there that I mentioned before

723
00:27:17,950 --> 00:27:21,950
so emulators real quick do you guys know

724
00:27:21,950 --> 00:27:25,040
how this is Fabrice Beller did this how

725
00:27:25,040 --> 00:27:27,380
it woke a I I ran it but for Reese

726
00:27:27,380 --> 00:27:30,920
Ballard wrote it how I'm running Linux

727
00:27:30,920 --> 00:27:35,510
to 6 in Firefox this is by the way this

728
00:27:35,510 --> 00:27:40,520
is an x86 a 586 or 5 586 yeah emulated

729
00:27:40,520 --> 00:27:45,830
in Firefox running on Windows 2000 which

730
00:27:45,830 --> 00:27:49,580
is being emulated in Khurana on a 686 in

731
00:27:49,580 --> 00:27:54,920
Chrome running on my Ubuntu or Linux

732
00:27:54,920 --> 00:27:56,330
Mint that's what I was using as the

733
00:27:56,330 --> 00:27:58,850
desktop and this was relatively

734
00:27:58,850 --> 00:28:00,950
performant it only took two minutes to

735
00:28:00,950 --> 00:28:03,590
boot and in hello world by the way this

736
00:28:03,590 --> 00:28:05,030
is all bunk it didn't actually take

737
00:28:05,030 --> 00:28:06,650
point two three seconds it was a while

738
00:28:06,650 --> 00:28:08,480
but like it ran hello world and like

739
00:28:08,480 --> 00:28:10,130
under I think was like three seconds

740
00:28:10,130 --> 00:28:13,070
like it was relatively performant mind

741
00:28:13,070 --> 00:28:14,510
you when you go down these like to

742
00:28:14,510 --> 00:28:16,520
levels things get a for I don't even

743
00:28:16,520 --> 00:28:18,190
know it gets a little bit worried weird

744
00:28:18,190 --> 00:28:20,990
but guess what you look at his code very

745
00:28:20,990 --> 00:28:23,150
first thing look-up tables he uses it to

746
00:28:23,150 --> 00:28:25,490
help like do a really quick fall out to

747
00:28:25,490 --> 00:28:27,590
to be able to see the op codes and how

748
00:28:27,590 --> 00:28:29,840
to jump into them and one neat thing bit

749
00:28:29,840 --> 00:28:31,400
loony was just telling me he did exactly

750
00:28:31,400 --> 00:28:32,150
the same thing

751
00:28:32,150 --> 00:28:34,400
well not exactly actually Beller doesn't

752
00:28:34,400 --> 00:28:37,250
do a first I don't remember the details

753
00:28:37,250 --> 00:28:38,660
but he's doing some cool stuff with that

754
00:28:38,660 --> 00:28:41,290
too I hope I didn't give anything away

755
00:28:41,290 --> 00:28:44,450
but this is an FPGA conference and so

756
00:28:44,450 --> 00:28:45,590
let's look at at least one example

757
00:28:45,590 --> 00:28:47,330
because I have two minutes left right

758
00:28:47,330 --> 00:28:50,630
that's two okay mmm so we're gonna just

759
00:28:50,630 --> 00:28:52,250
breeze by this and don't worry about it

760
00:28:52,250 --> 00:28:53,360
I was gonna go into much more detail

761
00:28:53,360 --> 00:28:55,430
here I'm glad I spent more time on the

762
00:28:55,430 --> 00:28:57,650
rest of the talk and not this but we're

763
00:28:57,650 --> 00:28:58,460
gonna look at saying

764
00:28:58,460 --> 00:29:00,800
lfsr and we actually want to output this

765
00:29:00,800 --> 00:29:03,620
Huffman coded pseudo-random noise codes

766
00:29:03,620 --> 00:29:06,470
and they're used all over the place

767
00:29:06,470 --> 00:29:09,110
and why would you use an FPGA like like

768
00:29:09,110 --> 00:29:11,570
it's just it's logic gates the answer is

769
00:29:11,570 --> 00:29:12,830
like duh of course you'd want to use an

770
00:29:12,830 --> 00:29:14,390
FPGA because it is just logic gates

771
00:29:14,390 --> 00:29:17,270
except that you don't need one instead

772
00:29:17,270 --> 00:29:19,040
we're gonna just try to do all of this

773
00:29:19,040 --> 00:29:20,810
on an ESP 32 and see what kind of

774
00:29:20,810 --> 00:29:22,940
performance we have so what I do is I

775
00:29:22,940 --> 00:29:25,580
start and I I copy and paste the code

776
00:29:25,580 --> 00:29:27,860
off off of Wikipedia in this case and I

777
00:29:27,860 --> 00:29:30,620
run it and it runs and I was like cool I

778
00:29:30,620 --> 00:29:32,480
checked it the data is right and it's

779
00:29:32,480 --> 00:29:34,250
seven-point eight mega chips per second

780
00:29:34,250 --> 00:29:35,630
that was actually too low for this

781
00:29:35,630 --> 00:29:38,120
project but then I was like okay well

782
00:29:38,120 --> 00:29:39,770
what if I think about it and I go back

783
00:29:39,770 --> 00:29:41,120
to the Stanford bit twiddling hacks

784
00:29:41,120 --> 00:29:43,370
thing and I use this XOR thing here and

785
00:29:43,370 --> 00:29:45,410
it's it's faster in fact this was

786
00:29:45,410 --> 00:29:47,000
actually fast enough for the project but

787
00:29:47,000 --> 00:29:47,990
I was like okay you know I'm just gonna

788
00:29:47,990 --> 00:29:49,580
go all out and see how fast I can make

789
00:29:49,580 --> 00:29:52,700
this thing so I went and I I pretended I

790
00:29:52,700 --> 00:29:54,500
was writing assembly but I was actually

791
00:29:54,500 --> 00:29:56,240
writing C code which by the way is a

792
00:29:56,240 --> 00:29:57,620
really cool thing to do if you can take

793
00:29:57,620 --> 00:29:59,630
code compile it and then look at what

794
00:29:59,630 --> 00:30:01,730
the assembly was you can learn how to

795
00:30:01,730 --> 00:30:03,590
help the compiler write the code for you

796
00:30:03,590 --> 00:30:06,320
I need like one more minute and then

797
00:30:06,320 --> 00:30:09,200
that was super optimized at 23.6 but I'm

798
00:30:09,200 --> 00:30:10,580
like okay that's already faster than I

799
00:30:10,580 --> 00:30:12,020
need but I'm still just gonna keep going

800
00:30:12,020 --> 00:30:14,330
for it so what happens if you just give

801
00:30:14,330 --> 00:30:16,370
up and you write a table so you do the

802
00:30:16,370 --> 00:30:17,780
same thing where you take the outputs

803
00:30:17,780 --> 00:30:19,700
and then the way that that would shift

804
00:30:19,700 --> 00:30:21,770
that weird the the permutation the value

805
00:30:21,770 --> 00:30:23,480
that you're kind of shifting around and

806
00:30:23,480 --> 00:30:26,180
I do it for all combinations of eight

807
00:30:26,180 --> 00:30:28,970
bits and the lower value and then I just

808
00:30:28,970 --> 00:30:31,820
use the table in a really dumb way like

809
00:30:31,820 --> 00:30:33,800
there's no optimization there and it's

810
00:30:33,800 --> 00:30:36,680
so already 126 mega chips per second and

811
00:30:36,680 --> 00:30:38,720
just because I'm a masochist I decided

812
00:30:38,720 --> 00:30:40,340
to write it all in assembly just for fun

813
00:30:40,340 --> 00:30:43,520
and yeah sure it goes up to 215 so like

814
00:30:43,520 --> 00:30:46,280
the answer is without effort I was able

815
00:30:46,280 --> 00:30:47,990
to get a much higher performance value

816
00:30:47,990 --> 00:30:50,690
without anything really all that hard

817
00:30:50,690 --> 00:30:52,520
just by using the look-up tables

818
00:30:52,520 --> 00:30:55,640
so in summary these are the things that

819
00:30:55,640 --> 00:30:57,290
I found you can kinda remember them by

820
00:30:57,290 --> 00:30:59,060
their names maybe I don't know if you

821
00:30:59,060 --> 00:31:00,590
have any ideas please again come up and

822
00:31:00,590 --> 00:31:03,620
talk to me and hopefully this guy this

823
00:31:03,620 --> 00:31:05,870
lets you guys out there spread a little

824
00:31:05,870 --> 00:31:07,640
bit of the Luntz inside of all of your

825
00:31:07,640 --> 00:31:09,650
code to make things that may have been

826
00:31:09,650 --> 00:31:12,379
previously impossible now possible

827
00:31:12,379 --> 00:31:15,189
thank you

