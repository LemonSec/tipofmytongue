1
00:00:04,080 --> 00:00:15,210
[Music]

2
00:00:15,210 --> 00:00:16,149
[Applause]

3
00:00:16,149 --> 00:00:24,050
[Music]

4
00:00:24,050 --> 00:00:26,250
and to be the hardware than it is to

5
00:00:26,250 --> 00:00:27,869
change the heart change the software

6
00:00:27,869 --> 00:00:30,900
that was running on that old hardware so

7
00:00:30,900 --> 00:00:32,790
agreeing on the is a gets you lots of

8
00:00:32,790 --> 00:00:34,710
great software so you get tools that

9
00:00:34,710 --> 00:00:36,450
know how to speak this language so you

10
00:00:36,450 --> 00:00:39,090
get compilers assemblers you get tools

11
00:00:39,090 --> 00:00:41,309
that let you debug programs that are

12
00:00:41,309 --> 00:00:43,830
running on that kind of hardware you can

13
00:00:43,830 --> 00:00:45,809
get visualizers that you know show you

14
00:00:45,809 --> 00:00:48,690
how the code is executing through a

15
00:00:48,690 --> 00:00:51,180
machine speaking that language you get

16
00:00:51,180 --> 00:00:52,830
emulators of things that can pretend to

17
00:00:52,830 --> 00:00:55,229
be that hardware and simulators that can

18
00:00:55,229 --> 00:00:57,360
simulate that hardware and then you get

19
00:00:57,360 --> 00:00:59,370
all this great stuff like documentation

20
00:00:59,370 --> 00:01:01,530
and programmers guides application notes

21
00:01:01,530 --> 00:01:03,300
and like things that you can find when

22
00:01:03,300 --> 00:01:04,500
you search on the internet and go to

23
00:01:04,500 --> 00:01:06,060
stack overflow like there's actually

24
00:01:06,060 --> 00:01:08,340
answers there because people are you

25
00:01:08,340 --> 00:01:11,400
know using this is a so it's really

26
00:01:11,400 --> 00:01:13,440
important to understand that IFA is just

27
00:01:13,440 --> 00:01:15,150
the standard it's just what we agree on

28
00:01:15,150 --> 00:01:16,890
it's not any sort of implementation it's

29
00:01:16,890 --> 00:01:21,810
just the rules so but standards are

30
00:01:21,810 --> 00:01:23,130
really important they make a huge

31
00:01:23,130 --> 00:01:25,530
difference in the hardware world so for

32
00:01:25,530 --> 00:01:29,010
example in networking Ethernet tcp/ip is

33
00:01:29,010 --> 00:01:30,930
an open standard it's like you know you

34
00:01:30,930 --> 00:01:32,280
just go online and you can see it and

35
00:01:32,280 --> 00:01:36,690
you can implement your own version of it

36
00:01:36,690 --> 00:01:39,260
and I had to do this in one of my uh

37
00:01:39,260 --> 00:01:41,190
grad school classes I didn't do that

38
00:01:41,190 --> 00:01:43,440
great but you know students learn how to

39
00:01:43,440 --> 00:01:46,620
do networking this way and there's lots

40
00:01:46,620 --> 00:01:49,770
of proprietary implementations as well

41
00:01:49,770 --> 00:01:52,230
similarly for OS there as a standard for

42
00:01:52,230 --> 00:01:53,820
how to do multi-threaded things so you

43
00:01:53,820 --> 00:01:55,650
don't have to kind of understand what

44
00:01:55,650 --> 00:01:57,180
hardware you're writing on when you're

45
00:01:57,180 --> 00:01:59,130
trying to what kind of hardware you'll

46
00:01:59,130 --> 00:02:00,150
be running on when you're writing your

47
00:02:00,150 --> 00:02:02,430
user level application and so the

48
00:02:02,430 --> 00:02:04,020
operating system kind of provides that

49
00:02:04,020 --> 00:02:06,540
abstraction so Linux and FreeBSD are

50
00:02:06,540 --> 00:02:08,970
open implementations of this but you

51
00:02:08,970 --> 00:02:10,500
know Microsoft Windows does the exact

52
00:02:10,500 --> 00:02:12,989
same thing or uses the same standard so

53
00:02:12,989 --> 00:02:14,610
you can write apps that are kind of

54
00:02:14,610 --> 00:02:17,640
portable as possible.the to and like we

55
00:02:17,640 --> 00:02:20,550
said the C high-level language is also a

56
00:02:20,550 --> 00:02:23,280
standard I think you were head would

57
00:02:23,280 --> 00:02:24,659
kind of explode if somebody told you oh

58
00:02:24,659 --> 00:02:26,550
you don't you can't write a C program

59
00:02:26,550 --> 00:02:28,800
that you don't have a license for C it's

60
00:02:28,800 --> 00:02:30,719
an open standard anybody can use it and

61
00:02:30,719 --> 00:02:32,969
therefore there are free and open

62
00:02:32,969 --> 00:02:34,230
compilers

63
00:02:34,230 --> 00:02:37,349
GCC in LLVM and but there's also

64
00:02:37,349 --> 00:02:39,299
proprietary implementations of those

65
00:02:39,299 --> 00:02:42,599
compilers so for example intel has a

66
00:02:42,599 --> 00:02:44,430
compiler that will make sure that c code

67
00:02:44,430 --> 00:02:47,069
compiles really well to run on an x86

68
00:02:47,069 --> 00:02:49,620
processor and arm does the same thing to

69
00:02:49,620 --> 00:02:50,849
make sure that their stuff runs really

70
00:02:50,849 --> 00:02:52,890
well on ARM processors and they don't

71
00:02:52,890 --> 00:02:54,870
really want like the other side to see

72
00:02:54,870 --> 00:02:56,340
the cool tricks that they're doing so

73
00:02:56,340 --> 00:02:58,400
those are proprietary implementations

74
00:02:58,400 --> 00:03:02,269
similar with databases and graphics but

75
00:03:02,269 --> 00:03:04,530
before you know wrist 5 has been around

76
00:03:04,530 --> 00:03:05,819
a little while but before verse 5 there

77
00:03:05,819 --> 00:03:07,920
really wasn't an open standard there's

78
00:03:07,920 --> 00:03:09,329
just the standard just the rules that

79
00:03:09,329 --> 00:03:11,040
we're gonna follow and therefore there

80
00:03:11,040 --> 00:03:12,480
weren't really any free and open

81
00:03:12,480 --> 00:03:14,280
implementations of it's not existent

82
00:03:14,280 --> 00:03:16,379
standard but there were lots of

83
00:03:16,379 --> 00:03:18,900
proprietary standards like x86 and arm

84
00:03:18,900 --> 00:03:22,709
and so there are lots of proprietary

85
00:03:22,709 --> 00:03:27,780
implementations the problem with the

86
00:03:27,780 --> 00:03:29,940
proprietary ISAs is that they come and

87
00:03:29,940 --> 00:03:31,230
go they're kind of subject to the

88
00:03:31,230 --> 00:03:33,599
win-wins of companies and their

89
00:03:33,599 --> 00:03:35,160
successes and failures and business

90
00:03:35,160 --> 00:03:37,019
decisions and stockholder pressures and

91
00:03:37,019 --> 00:03:39,000
things like that so I mean some of these

92
00:03:39,000 --> 00:03:41,160
things I mean are before my time and

93
00:03:41,160 --> 00:03:44,400
Intel is now kind of x86 shop before

94
00:03:44,400 --> 00:03:45,930
that they had different processors

95
00:03:45,930 --> 00:03:48,359
different ISAs those are all kind of

96
00:03:48,359 --> 00:03:50,099
gone and retired if you had a program

97
00:03:50,099 --> 00:03:51,900
that worked on those you can't run

98
00:03:51,900 --> 00:03:54,230
anymore or you have to have an emulator

99
00:03:54,230 --> 00:03:57,510
another great example is MIT's so they

100
00:03:57,510 --> 00:04:00,510
have is a that the company built

101
00:04:00,510 --> 00:04:02,130
processors that use that I say it was

102
00:04:02,130 --> 00:04:04,380
proprietary the company got sold to

103
00:04:04,380 --> 00:04:07,049
imagination then they got by wave and

104
00:04:07,049 --> 00:04:08,910
anti startup then they open sourced

105
00:04:08,910 --> 00:04:10,169
their thing a year ago and it's like

106
00:04:10,169 --> 00:04:11,819
really exciting I just learned like

107
00:04:11,819 --> 00:04:13,169
yesterday that that's not even open

108
00:04:13,169 --> 00:04:14,459
source anymore they just like killed it

109
00:04:14,459 --> 00:04:17,029
so you're completely at the whims of

110
00:04:17,029 --> 00:04:20,220
companies and similar story with spark I

111
00:04:20,220 --> 00:04:24,150
mean they open source they're open they

112
00:04:24,150 --> 00:04:26,099
made their open open spark processor

113
00:04:26,099 --> 00:04:28,349
then the company got acquired by Oracle

114
00:04:28,349 --> 00:04:30,090
they got shut down there's still people

115
00:04:30,090 --> 00:04:32,550
making the processors but it just kind

116
00:04:32,550 --> 00:04:35,400
of comes and goes and even arm is like

117
00:04:35,400 --> 00:04:38,130
an incredibly popular right now but the

118
00:04:38,130 --> 00:04:40,500
company itself was sold to Softbank and

119
00:04:40,500 --> 00:04:42,390
now it's being sold off dog with Dobby

120
00:04:42,390 --> 00:04:44,490
and that's been fun it's just like never

121
00:04:44,490 --> 00:04:46,440
quite and sure what might happen

122
00:04:46,440 --> 00:04:47,700
but the these different kind of

123
00:04:47,700 --> 00:04:51,620
investors might decide to do with is a

124
00:04:52,790 --> 00:04:55,950
so one other thing about why risk five

125
00:04:55,950 --> 00:04:58,770
why is this five coming so if you look

126
00:04:58,770 --> 00:05:00,750
at a modern ship which you might call an

127
00:05:00,750 --> 00:05:02,430
SOC or system-on-a-chip

128
00:05:02,430 --> 00:05:04,920
the question is how many ISAs does it

129
00:05:04,920 --> 00:05:06,840
actually speak I mean this is a chip

130
00:05:06,840 --> 00:05:08,910
that comes from Nvidia so if you've been

131
00:05:08,910 --> 00:05:10,170
listen to my talk you might think it

132
00:05:10,170 --> 00:05:13,260
speaks the nvidia is a but that would be

133
00:05:13,260 --> 00:05:16,710
a wrong assumption and modern SRC is

134
00:05:16,710 --> 00:05:18,080
made up with lots of different

135
00:05:18,080 --> 00:05:22,140
processors actually there will be an

136
00:05:22,140 --> 00:05:25,080
applications processor often arm which

137
00:05:25,080 --> 00:05:27,240
is kind of the workhorse just kind of

138
00:05:27,240 --> 00:05:28,800
managing everybody else's tasks doing

139
00:05:28,800 --> 00:05:30,420
all the general-purpose stuff that's

140
00:05:30,420 --> 00:05:32,940
hard to generalize but then there's

141
00:05:32,940 --> 00:05:34,620
graphics processors that are doing lots

142
00:05:34,620 --> 00:05:37,080
of like matrix application operations

143
00:05:37,080 --> 00:05:38,850
and convolutions and stuff like that

144
00:05:38,850 --> 00:05:41,580
similar with image processors then

145
00:05:41,580 --> 00:05:43,470
they'll be like radio DSP that need to

146
00:05:43,470 --> 00:05:45,450
do Fourier transforms and like just

147
00:05:45,450 --> 00:05:47,280
process a lot of data and they don't

148
00:05:47,280 --> 00:05:49,380
need to do things like you know just

149
00:05:49,380 --> 00:05:50,880
random memory accesses and stuff like

150
00:05:50,880 --> 00:05:51,360
that

151
00:05:51,360 --> 00:05:54,030
similar with audio then they'll be

152
00:05:54,030 --> 00:05:55,560
security processors that are optimized

153
00:05:55,560 --> 00:05:58,320
for doing like AES operations or like

154
00:05:58,320 --> 00:06:00,630
block encrypt operations and they might

155
00:06:00,630 --> 00:06:02,340
be kind of hardened to make sure that

156
00:06:02,340 --> 00:06:03,900
they are resistant to attacks which I

157
00:06:03,900 --> 00:06:06,450
think that's how after this one and then

158
00:06:06,450 --> 00:06:07,680
they'll be like a power management

159
00:06:07,680 --> 00:06:09,600
processor that's super simple super

160
00:06:09,600 --> 00:06:11,640
boring you just want it to be small and

161
00:06:11,640 --> 00:06:14,580
work and not take up a lot of space and

162
00:06:14,580 --> 00:06:15,900
each of these have their own I say

163
00:06:15,900 --> 00:06:17,760
because they're all proprietary or why

164
00:06:17,760 --> 00:06:20,280
it why do they why is it like that so

165
00:06:20,280 --> 00:06:21,870
first of all the ISAs don't work very

166
00:06:21,870 --> 00:06:24,240
well to each other so the apps processor

167
00:06:24,240 --> 00:06:25,320
is a kind of have to deal with

168
00:06:25,320 --> 00:06:28,470
everything kind of well so it's big and

169
00:06:28,470 --> 00:06:30,870
inflexible and the accelerators like I

170
00:06:30,870 --> 00:06:31,919
don't I don't want to do all that stuff

171
00:06:31,919 --> 00:06:33,930
I just want to like you know do my

172
00:06:33,930 --> 00:06:36,030
Fourier transforms really well and so

173
00:06:36,030 --> 00:06:38,520
the accelerators have to come up with

174
00:06:38,520 --> 00:06:41,250
their own language and then secondly you

175
00:06:41,250 --> 00:06:42,900
know all of these IPS are actually

176
00:06:42,900 --> 00:06:44,250
coming from different companies I mean

177
00:06:44,250 --> 00:06:46,500
NVIDIA is not an expert in making all of

178
00:06:46,500 --> 00:06:47,130
these things

179
00:06:47,130 --> 00:06:51,810
sorry I've got my timer going so in

180
00:06:51,810 --> 00:06:54,960
video is not an X ok Nvidia is not an

181
00:06:54,960 --> 00:06:56,880
expert in making all of these things so

182
00:06:56,880 --> 00:06:59,430
they have to you know buy these things

183
00:06:59,430 --> 00:06:59,849
from

184
00:06:59,849 --> 00:07:01,349
different providers and the different

185
00:07:01,349 --> 00:07:02,819
providers you know don't have rights to

186
00:07:02,819 --> 00:07:04,409
each other's eyes essays so they'll have

187
00:07:04,409 --> 00:07:05,909
to come up with their own languages and

188
00:07:05,909 --> 00:07:07,679
then finally there's some things that

189
00:07:07,679 --> 00:07:09,569
are like so simple you might task

190
00:07:09,569 --> 00:07:11,759
someone on your in your own engineering

191
00:07:11,759 --> 00:07:13,559
staff to you know build the process for

192
00:07:13,559 --> 00:07:15,659
this thing and you know I'm a hardware

193
00:07:15,659 --> 00:07:16,800
designer someone comes to me and says

194
00:07:16,800 --> 00:07:18,569
hey I need you to build a processor for

195
00:07:18,569 --> 00:07:20,999
our chip you know I'm not gonna go buy

196
00:07:20,999 --> 00:07:22,649
someone else's because that's my job so

197
00:07:22,649 --> 00:07:24,029
I got to come up with and design

198
00:07:24,029 --> 00:07:25,709
something and so I have to make

199
00:07:25,709 --> 00:07:27,779
something up and then you know I have to

200
00:07:27,779 --> 00:07:28,770
make up my own tool chain and everything

201
00:07:28,770 --> 00:07:30,779
else so that's how we sort of end up in

202
00:07:30,779 --> 00:07:32,669
this mess of all these different

203
00:07:32,669 --> 00:07:36,990
languages being spoken on a chip so the

204
00:07:36,990 --> 00:07:38,699
question is really do we actually need

205
00:07:38,699 --> 00:07:40,679
all these different ices do they really

206
00:07:40,679 --> 00:07:42,779
have to be for priority and they have to

207
00:07:42,779 --> 00:07:45,479
keep vanishing so what if there was one

208
00:07:45,479 --> 00:07:47,459
stable free open I say that everybody

209
00:07:47,459 --> 00:07:51,269
could use for everything and that's

210
00:07:51,269 --> 00:07:53,789
really the idea of a high risk font so

211
00:07:53,789 --> 00:07:57,029
in 2010 some Berkeley students grad

212
00:07:57,029 --> 00:07:58,949
students Andrew Waterman and gets ugly

213
00:07:58,949 --> 00:08:00,839
guys on the outside in this picture

214
00:08:00,839 --> 00:08:02,879
we're working with their professor

215
00:08:02,879 --> 00:08:05,009
Krishna asana vaq and Dave Patterson of

216
00:08:05,009 --> 00:08:06,569
Hennessy and Patterson Fame if you ever

217
00:08:06,569 --> 00:08:07,919
had to take a computer architecture

218
00:08:07,919 --> 00:08:10,499
class so their group is a computer

219
00:08:10,499 --> 00:08:12,089
architecture research group and they're

220
00:08:12,089 --> 00:08:13,680
just trying to get their research done

221
00:08:13,680 --> 00:08:15,240
they've got cool ideas they want to try

222
00:08:15,240 --> 00:08:17,579
out and they need some computers I mean

223
00:08:17,579 --> 00:08:20,039
a CPU to start with that they can modify

224
00:08:20,039 --> 00:08:22,139
and do their cool research stuff but

225
00:08:22,139 --> 00:08:24,180
choosing that starting CPU is getting

226
00:08:24,180 --> 00:08:25,949
was was hard it was like getting the way

227
00:08:25,949 --> 00:08:29,819
of their actual research so they had

228
00:08:29,819 --> 00:08:31,769
some options they had the proprietary

229
00:08:31,769 --> 00:08:36,599
option of arm or x86 but their licensing

230
00:08:36,599 --> 00:08:38,669
issues they have to go to those vendors

231
00:08:38,669 --> 00:08:41,188
and say hey can I you know have your

232
00:08:41,188 --> 00:08:43,169
core and be able to modify your research

233
00:08:43,169 --> 00:08:45,120
and like companies companies don't

234
00:08:45,120 --> 00:08:46,680
generally allow that and for companies

235
00:08:46,680 --> 00:08:49,050
that they do allow for like Apple you

236
00:08:49,050 --> 00:08:50,519
know they just get paid like ridiculous

237
00:08:50,519 --> 00:08:53,160
amounts of money and also even if they

238
00:08:53,160 --> 00:08:54,720
were given permission it's a very

239
00:08:54,720 --> 00:08:57,000
complex language these things are kind

240
00:08:57,000 --> 00:08:59,130
of built up over time they've got all

241
00:08:59,130 --> 00:09:00,990
kinds of stuff in there and like it's

242
00:09:00,990 --> 00:09:02,639
not just add and subtract there's all

243
00:09:02,639 --> 00:09:04,230
kinds of crazy stuff and it's too

244
00:09:04,230 --> 00:09:05,939
complex as a starting point if you want

245
00:09:05,939 --> 00:09:08,610
to kind of add on to it so they looked

246
00:09:08,610 --> 00:09:11,100
also at open source options but at the

247
00:09:11,100 --> 00:09:13,080
time there weren't very many and

248
00:09:13,080 --> 00:09:14,940
kind of making a lot of assumptions

249
00:09:14,940 --> 00:09:16,830
about the implementation that they were

250
00:09:16,830 --> 00:09:18,779
going to use so like there might be an

251
00:09:18,779 --> 00:09:20,550
ISA that's very tightly coupled to the

252
00:09:20,550 --> 00:09:22,440
CPU that implements it which is not

253
00:09:22,440 --> 00:09:23,760
exactly what you want if all you wanted

254
00:09:23,760 --> 00:09:25,500
to find is a standard that anybody can

255
00:09:25,500 --> 00:09:28,080
implement so they were like all right

256
00:09:28,080 --> 00:09:29,579
well it's summer we don't anything else

257
00:09:29,579 --> 00:09:31,320
to do let's do this three-month project

258
00:09:31,320 --> 00:09:33,510
over the summer to just start from

259
00:09:33,510 --> 00:09:35,839
scratch with a clean slate I say and

260
00:09:35,839 --> 00:09:38,490
they called it risk five with the V

261
00:09:38,490 --> 00:09:41,459
because it represented the fist fifth

262
00:09:41,459 --> 00:09:44,610
major is a coming out of Berkeley so

263
00:09:44,610 --> 00:09:45,779
they've been kind of doing this stuff

264
00:09:45,779 --> 00:09:47,160
for years and you know students would

265
00:09:47,160 --> 00:09:49,529
come and go but risk five was going to

266
00:09:49,529 --> 00:09:51,060
kind of take everything that they've

267
00:09:51,060 --> 00:09:54,949
learned and start from scratch

268
00:09:56,089 --> 00:09:59,180
so risk five as an I say is super boring

269
00:09:59,180 --> 00:10:03,120
it goes back to basics the intention was

270
00:10:03,120 --> 00:10:04,560
for it to be simple to learn and

271
00:10:04,560 --> 00:10:06,540
implement so they want it to be a

272
00:10:06,540 --> 00:10:08,160
learning tool and an easy to implement

273
00:10:08,160 --> 00:10:09,390
so you can get on to your cool stuff

274
00:10:09,390 --> 00:10:11,610
that you actually wanna do but at its

275
00:10:11,610 --> 00:10:13,649
heart it also makes it easy to add bells

276
00:10:13,649 --> 00:10:15,480
and whistles so it's designed to be

277
00:10:15,480 --> 00:10:17,370
extensible it's designed to be modular

278
00:10:17,370 --> 00:10:19,320
so certain parts of it are defined but

279
00:10:19,320 --> 00:10:21,120
like you can add and remove them as you

280
00:10:21,120 --> 00:10:22,800
see fit and you can add your own custom

281
00:10:22,800 --> 00:10:26,940
stuff that you think of and actually

282
00:10:26,940 --> 00:10:29,070
it's so simple that if you go to the

283
00:10:29,070 --> 00:10:30,899
risk five website for every instruction

284
00:10:30,899 --> 00:10:33,000
in the ISA they actually trace the

285
00:10:33,000 --> 00:10:35,339
genealogy of the instructions back to

286
00:10:35,339 --> 00:10:37,740
like you know the first computers or

287
00:10:37,740 --> 00:10:39,720
whatever they implemented it and show

288
00:10:39,720 --> 00:10:41,040
that this is like there's no new ideas

289
00:10:41,040 --> 00:10:42,959
here it's just we just picked all the

290
00:10:42,959 --> 00:10:44,910
stuff that we showed over years actually

291
00:10:44,910 --> 00:10:49,170
worked but boring doesn't mean like slow

292
00:10:49,170 --> 00:10:52,200
or bad it just means it's really easy to

293
00:10:52,200 --> 00:10:54,270
implement which means you can like get

294
00:10:54,270 --> 00:10:56,220
on to the cool stuff and make it fast or

295
00:10:56,220 --> 00:11:00,750
add your custom stuff so you know they

296
00:11:00,750 --> 00:11:02,850
did this just for their own uses over

297
00:11:02,850 --> 00:11:05,610
the summer so they were kind of doing it

298
00:11:05,610 --> 00:11:07,320
and they were they had you know their

299
00:11:07,320 --> 00:11:09,089
like internal website or whatever and

300
00:11:09,089 --> 00:11:10,230
some papers that were being published

301
00:11:10,230 --> 00:11:11,940
and as they were doing it they're making

302
00:11:11,940 --> 00:11:14,459
changes and the people outside of

303
00:11:14,459 --> 00:11:16,380
Berkeley started complaining which is

304
00:11:16,380 --> 00:11:17,490
kind of weird because this is just

305
00:11:17,490 --> 00:11:19,769
mostly for them sounds like so it turned

306
00:11:19,769 --> 00:11:21,720
out that other people we're finding it

307
00:11:21,720 --> 00:11:23,760
really useful to have this simple boring

308
00:11:23,760 --> 00:11:26,740
easily extensible is a published

309
00:11:26,740 --> 00:11:28,270
as the Brickley people were doing work

310
00:11:28,270 --> 00:11:30,130
and like working on the tool chains and

311
00:11:30,130 --> 00:11:32,410
everything other people could use it but

312
00:11:32,410 --> 00:11:34,240
then they start you know if you change

313
00:11:34,240 --> 00:11:35,410
something then that you're like wait a

314
00:11:35,410 --> 00:11:36,520
minute like my computer doesn't

315
00:11:36,520 --> 00:11:38,050
understand your code anymore what

316
00:11:38,050 --> 00:11:39,730
happened oh you guys change the I say

317
00:11:39,730 --> 00:11:43,420
this this is getting annoying so they

318
00:11:43,420 --> 00:11:46,600
decided in May 2014 to actually freeze

319
00:11:46,600 --> 00:11:48,520
the user spec so they have started you

320
00:11:48,520 --> 00:11:51,310
know four years later after the three

321
00:11:51,310 --> 00:11:53,800
months summer project started they kind

322
00:11:53,800 --> 00:11:55,600
of had made enough learnings from all

323
00:11:55,600 --> 00:11:57,220
these tape outs and publications that

324
00:11:57,220 --> 00:11:59,260
they'd done a long way they did a like a

325
00:11:59,260 --> 00:12:01,450
ton of like you know cristes like super

326
00:12:01,450 --> 00:12:03,700
obsessed with how do the bits actually

327
00:12:03,700 --> 00:12:05,200
get lined up in the instruction to make

328
00:12:05,200 --> 00:12:08,130
sure they'll be really easy to code and

329
00:12:08,130 --> 00:12:11,200
so in May 2014 they actually said this

330
00:12:11,200 --> 00:12:12,670
is frozen we're not gonna change anymore

331
00:12:12,670 --> 00:12:15,460
cuz people care and then they decided to

332
00:12:15,460 --> 00:12:17,320
do something additional which is to

333
00:12:17,320 --> 00:12:18,940
create a separate foundation called the

334
00:12:18,940 --> 00:12:21,010
risk 5 foundation to maintain the

335
00:12:21,010 --> 00:12:22,540
standard because you know if it's at

336
00:12:22,540 --> 00:12:23,740
Berkeley there's like grad students they

337
00:12:23,740 --> 00:12:25,720
come and go and people's you know

338
00:12:25,720 --> 00:12:28,900
projects languish but the foundation was

339
00:12:28,900 --> 00:12:31,090
created to kind of keep this living in

340
00:12:31,090 --> 00:12:34,180
perpetuity so risk 5 is the open source

341
00:12:34,180 --> 00:12:37,210
hardware instruction set and it's free

342
00:12:37,210 --> 00:12:41,560
and open to use and the spec is was

343
00:12:41,560 --> 00:12:44,620
ratified in 2014 an additional specs

344
00:12:44,620 --> 00:12:46,060
have been ratified since then by the

345
00:12:46,060 --> 00:12:50,740
foundation so the foundation is a

346
00:12:50,740 --> 00:12:53,290
membership organization companies or

347
00:12:53,290 --> 00:12:56,440
individuals or other groups can join so

348
00:12:56,440 --> 00:12:59,950
there are 13 University members there

349
00:12:59,950 --> 00:13:02,200
are 29 research and consulting type

350
00:13:02,200 --> 00:13:05,140
organizations there are organizations

351
00:13:05,140 --> 00:13:07,090
who joined who do software and tools

352
00:13:07,090 --> 00:13:08,530
development who want to run stuff on

353
00:13:08,530 --> 00:13:09,420
risk 5

354
00:13:09,420 --> 00:13:12,340
there are people who do like machine

355
00:13:12,340 --> 00:13:13,870
learning and they have like custom

356
00:13:13,870 --> 00:13:15,610
hardware for that and so there are

357
00:13:15,610 --> 00:13:18,850
companies that build design chips and

358
00:13:18,850 --> 00:13:20,440
then there are companies that actually

359
00:13:20,440 --> 00:13:22,300
build chips that like manufacturers

360
00:13:22,300 --> 00:13:24,940
silicon wafer chips and things and then

361
00:13:24,940 --> 00:13:26,770
there's also individual members so

362
00:13:26,770 --> 00:13:28,450
anyone can join the foundation it's free

363
00:13:28,450 --> 00:13:30,310
you just have to like check off a thing

364
00:13:30,310 --> 00:13:32,520
that says you won't see each other and

365
00:13:32,520 --> 00:13:36,190
build about it yeah and it's also a

366
00:13:36,190 --> 00:13:39,580
worldwide movement so you know Intel is

367
00:13:39,580 --> 00:13:41,830
an American company and arm is a British

368
00:13:41,830 --> 00:13:44,350
company and other countries kind of like

369
00:13:44,350 --> 00:13:46,030
yellow grumpy you and they have to just

370
00:13:46,030 --> 00:13:47,710
use other people's technology so

371
00:13:47,710 --> 00:13:49,570
countries like India the Indian

372
00:13:49,570 --> 00:13:51,790
government actually declared risk 5 the

373
00:13:51,790 --> 00:13:56,490
National is a of the country true and

374
00:13:56,490 --> 00:13:59,050
the Chinese government is also like

375
00:13:59,050 --> 00:14:01,390
heavily investing in companies who are

376
00:14:01,390 --> 00:14:02,290
say that they're gonna do anything

377
00:14:02,290 --> 00:14:04,540
response because I really want to like

378
00:14:04,540 --> 00:14:06,250
get out of the yoke of this licensing

379
00:14:06,250 --> 00:14:08,440
thing themselves for you know national

380
00:14:08,440 --> 00:14:13,840
security reasons as well so there is

381
00:14:13,840 --> 00:14:16,000
five ecosystem the foundation is really

382
00:14:16,000 --> 00:14:18,280
you know just mandating the standard of

383
00:14:18,280 --> 00:14:19,900
maintaining the standard so they have

384
00:14:19,900 --> 00:14:22,270
the is a specification it's on their

385
00:14:22,270 --> 00:14:24,370
website there's a repositories and

386
00:14:24,370 --> 00:14:25,780
things where people on github you can

387
00:14:25,780 --> 00:14:27,790
comment and file bugs and stuff like

388
00:14:27,790 --> 00:14:30,550
that they also have a golden models

389
00:14:30,550 --> 00:14:33,310
so things that actually you know show

390
00:14:33,310 --> 00:14:34,540
you how the code is supposed to execute

391
00:14:34,540 --> 00:14:36,010
so you can run a program through it and

392
00:14:36,010 --> 00:14:37,630
be like ok it's mine doing the right

393
00:14:37,630 --> 00:14:39,640
thing just based on this model and then

394
00:14:39,640 --> 00:14:41,530
they also have compliance tests so if

395
00:14:41,530 --> 00:14:42,850
you have something you say I think this

396
00:14:42,850 --> 00:14:44,260
thing is risk 5 compliant I want the

397
00:14:44,260 --> 00:14:46,390
risk 5 sticker on it they maintain the

398
00:14:46,390 --> 00:14:48,550
like test suite to say ok yep it's

399
00:14:48,550 --> 00:14:50,470
compliant you can set the risk 5 logo on

400
00:14:50,470 --> 00:14:53,560
it but underneath that there's hardware

401
00:14:53,560 --> 00:14:55,270
so there's open source hardware tons of

402
00:14:55,270 --> 00:14:58,030
them tfor v32 is the one that you've got

403
00:14:58,030 --> 00:14:59,250
to of on your badge

404
00:14:59,250 --> 00:15:01,360
rocket is the one that I work with a lot

405
00:15:01,360 --> 00:15:03,940
and but then there's also commercial

406
00:15:03,940 --> 00:15:06,430
core providers so people who sell risk 5

407
00:15:06,430 --> 00:15:06,940
cores

408
00:15:06,940 --> 00:15:09,010
also some that's also something that I

409
00:15:09,010 --> 00:15:11,350
do and then there's also companies that

410
00:15:11,350 --> 00:15:13,570
develop cores in-house and they don't

411
00:15:13,570 --> 00:15:14,650
really you know they're doing the for

412
00:15:14,650 --> 00:15:15,940
their own purpose maybe for those power

413
00:15:15,940 --> 00:15:18,160
management CPUs and stuff but we know

414
00:15:18,160 --> 00:15:20,500
that they're on their chips and on top

415
00:15:20,500 --> 00:15:21,790
of that there's the whole open-source

416
00:15:21,790 --> 00:15:24,280
software ecosystem and the commercial

417
00:15:24,280 --> 00:15:26,410
software ecosystem building up on top of

418
00:15:26,410 --> 00:15:32,770
this specification alright so just so it

419
00:15:32,770 --> 00:15:34,300
like remind it and really drill him the

420
00:15:34,300 --> 00:15:37,090
point what is an is a it's just the

421
00:15:37,090 --> 00:15:39,160
standard it's not the actual piece of

422
00:15:39,160 --> 00:15:41,050
silicon that can execute code it's not

423
00:15:41,050 --> 00:15:42,970
the chip it's not the tools and

424
00:15:42,970 --> 00:15:44,650
compilers that you know you need to

425
00:15:44,650 --> 00:15:45,820
generate the code that's going to run on

426
00:15:45,820 --> 00:15:46,120
the chip

427
00:15:46,120 --> 00:15:48,850
it's not aspect for anything else on the

428
00:15:48,850 --> 00:15:50,319
chip this is also important to note like

429
00:15:50,319 --> 00:15:52,540
if you have something you say it's is a

430
00:15:52,540 --> 00:15:54,490
is a is risk five it doesn't say

431
00:15:54,490 --> 00:15:55,990
anything about yeah but how do I

432
00:15:55,990 --> 00:15:57,970
actually make the LEDs blink there's no

433
00:15:57,970 --> 00:15:59,740
like blink LEDs instructions so there's

434
00:15:59,740 --> 00:16:02,019
something about how do I map things to

435
00:16:02,019 --> 00:16:03,910
pins and like memory map doors they're

436
00:16:03,910 --> 00:16:06,959
special custom instructions or what and

437
00:16:06,959 --> 00:16:09,819
it's not all the OS is and drivers and

438
00:16:09,819 --> 00:16:11,499
software that are written to that

439
00:16:11,499 --> 00:16:13,809
standard and just to finish up my

440
00:16:13,809 --> 00:16:16,480
example of ISAs this is the ads section

441
00:16:16,480 --> 00:16:18,970
of the risk five manual that's on

442
00:16:18,970 --> 00:16:20,829
nervous five website and you can see

443
00:16:20,829 --> 00:16:22,389
it's very compact it actually have like

444
00:16:22,389 --> 00:16:24,490
a bunch of instructions including add in

445
00:16:24,490 --> 00:16:30,220
this one little section so universe five

446
00:16:30,220 --> 00:16:32,170
is really becoming the toy I say of

447
00:16:32,170 --> 00:16:34,029
choice for education if you've ever

448
00:16:34,029 --> 00:16:35,740
taken a computer architecture class you

449
00:16:35,740 --> 00:16:37,029
might have used one of these two books

450
00:16:37,029 --> 00:16:39,879
on the outside and those have both been

451
00:16:39,879 --> 00:16:41,470
kind of switched over to teach verse

452
00:16:41,470 --> 00:16:44,490
five and this is really cool because

453
00:16:44,490 --> 00:16:46,180
students are learning verse five and

454
00:16:46,180 --> 00:16:47,829
then they can come into industry and use

455
00:16:47,829 --> 00:16:49,120
verse five so I know when I took

456
00:16:49,120 --> 00:16:50,620
computer architecture I learned some

457
00:16:50,620 --> 00:16:53,920
sort of fake MIPS thing maybe and then

458
00:16:53,920 --> 00:16:56,350
when I came out and started you know

459
00:16:56,350 --> 00:16:57,339
okay now I try to send the code that's

460
00:16:57,339 --> 00:16:59,679
actually gonna work it was like x86 and

461
00:16:59,679 --> 00:17:02,829
I was like I don't know this at all like

462
00:17:02,829 --> 00:17:04,869
what is this and so it's really exciting

463
00:17:04,869 --> 00:17:06,549
to have students coming and interviewing

464
00:17:06,549 --> 00:17:08,829
for jobs that are like yeah I know verse

465
00:17:08,829 --> 00:17:10,720
five I did was five and it's just like

466
00:17:10,720 --> 00:17:12,159
it's just gonna make things so much more

467
00:17:12,159 --> 00:17:14,799
efficient for everyone and in the middle

468
00:17:14,799 --> 00:17:16,179
is the risk five reader which is a book

469
00:17:16,179 --> 00:17:18,819
that was written by David Patterson and

470
00:17:18,819 --> 00:17:20,230
Andrew Waterman which this is like a

471
00:17:20,230 --> 00:17:21,849
really great reference it's a little bit

472
00:17:21,849 --> 00:17:23,890
longer and more verbose than the actual

473
00:17:23,890 --> 00:17:28,449
spec so risk I there's also becoming the

474
00:17:28,449 --> 00:17:30,520
ISA of choice for researchers I made

475
00:17:30,520 --> 00:17:32,770
this very scientific graph by going to

476
00:17:32,770 --> 00:17:35,049
Google Scholar and googling risk five

477
00:17:35,049 --> 00:17:36,640
over the years apparently used to be

478
00:17:36,640 --> 00:17:37,779
able do this at the bots and they kind

479
00:17:37,779 --> 00:17:40,390
of killed it so I did do it manually but

480
00:17:40,390 --> 00:17:41,950
yeah I do remember the moment when I

481
00:17:41,950 --> 00:17:43,990
first got an email that's like hey you

482
00:17:43,990 --> 00:17:46,210
have a citation and I saw Everest five

483
00:17:46,210 --> 00:17:47,770
in the title and I was like it's

484
00:17:47,770 --> 00:17:50,590
happening so researchers are really

485
00:17:50,590 --> 00:17:52,090
starting to leverage the intention of

486
00:17:52,090 --> 00:17:55,000
RISC five to make theories get the

487
00:17:55,000 --> 00:17:58,149
research done and so one example of

488
00:17:58,149 --> 00:17:59,350
research I don't know I think this is

489
00:17:59,350 --> 00:17:59,830
kind of a

490
00:17:59,830 --> 00:18:03,460
Kersey so these team at MIT they built

491
00:18:03,460 --> 00:18:05,200
an actual carbon nanotube

492
00:18:05,200 --> 00:18:07,179
microprocessors the first time this has

493
00:18:07,179 --> 00:18:09,130
been done in the past you know people

494
00:18:09,130 --> 00:18:11,380
made a gate or like maybe a few little

495
00:18:11,380 --> 00:18:13,480
gates together but they actually made a

496
00:18:13,480 --> 00:18:16,720
working CPU and it's actually risk v

497
00:18:16,720 --> 00:18:18,820
which is so cool it's like half verse

498
00:18:18,820 --> 00:18:20,320
five because it's only 16 bits instead

499
00:18:20,320 --> 00:18:23,559
of 32 bits but the point is that because

500
00:18:23,559 --> 00:18:26,260
of us v we can really focus on the cool

501
00:18:26,260 --> 00:18:27,429
part of your project you don't have to

502
00:18:27,429 --> 00:18:28,870
sit around me like well if we're gonna

503
00:18:28,870 --> 00:18:30,820
design a CPU like what should the add

504
00:18:30,820 --> 00:18:32,260
instruction be it's like whatever just

505
00:18:32,260 --> 00:18:33,429
go read the rest five manual and they

506
00:18:33,429 --> 00:18:35,500
just you know make the carbon nanotubes

507
00:18:35,500 --> 00:18:39,039
do their thing so I think this is like

508
00:18:39,039 --> 00:18:41,110
the real power is five but it's not

509
00:18:41,110 --> 00:18:42,760
about the I say it's like it's not a

510
00:18:42,760 --> 00:18:44,130
problem anymore just do something else

511
00:18:44,130 --> 00:18:49,240
take that and move on so you know where

512
00:18:49,240 --> 00:18:51,220
I come into all this so I'm from

513
00:18:51,220 --> 00:18:53,500
Stanford I'm not from Berkeley so I kind

514
00:18:53,500 --> 00:18:55,899
of knew about this stuff in 2016 I was

515
00:18:55,899 --> 00:18:57,580
working at a crypto hardware company

516
00:18:57,580 --> 00:18:59,320
which was super cool but like super

517
00:18:59,320 --> 00:19:01,090
secretive and like nothing was closed

518
00:19:01,090 --> 00:19:03,700
open-source and I heard that there is

519
00:19:03,700 --> 00:19:05,169
five inventors were starting a company

520
00:19:05,169 --> 00:19:07,720
to actually build risk five silligan the

521
00:19:07,720 --> 00:19:10,840
company is called fire five and I had

522
00:19:10,840 --> 00:19:12,880
evaluated risk five for a project but at

523
00:19:12,880 --> 00:19:14,289
the time we were calling is is cool

524
00:19:14,289 --> 00:19:15,789
academic theme it's not really ready yet

525
00:19:15,789 --> 00:19:18,880
so I was like cool I can go work and

526
00:19:18,880 --> 00:19:20,500
help solve a problem that I'm facing an

527
00:19:20,500 --> 00:19:21,940
industry this problem of picking what

528
00:19:21,940 --> 00:19:24,370
processor to use and I can do it through

529
00:19:24,370 --> 00:19:26,649
open source projects yes please money so

530
00:19:26,649 --> 00:19:30,940
I joined sy5 and in that year so the

531
00:19:30,940 --> 00:19:32,710
first year we made the first

532
00:19:32,710 --> 00:19:34,630
commercially available risk five silicon

533
00:19:34,630 --> 00:19:36,490
so people had taped out risk five chips

534
00:19:36,490 --> 00:19:38,559
before I taped out a chip means you

535
00:19:38,559 --> 00:19:41,470
actually like make a chip but no one was

536
00:19:41,470 --> 00:19:43,450
selling them so we actually made a chip

537
00:19:43,450 --> 00:19:44,769
that you could go and crowd supply and

538
00:19:44,769 --> 00:19:46,779
buy the board and I think we're actually

539
00:19:46,779 --> 00:19:48,010
selling them on digit key now the same

540
00:19:48,010 --> 00:19:51,130
guys so that was in 2016 and then about

541
00:19:51,130 --> 00:19:53,169
a year and a half later we did the first

542
00:19:53,169 --> 00:19:55,389
Linux capable risk five multi-core chip

543
00:19:55,389 --> 00:20:00,610
and so the question is these are running

544
00:20:00,610 --> 00:20:03,159
risk five so are these open source chips

545
00:20:03,159 --> 00:20:07,179
and answer is kinda so free and open is

546
00:20:07,179 --> 00:20:09,480
a does not imply open source hardware

547
00:20:09,480 --> 00:20:12,130
but it allows people to make open source

548
00:20:12,130 --> 00:20:13,390
hardware implementation

549
00:20:13,390 --> 00:20:15,940
or closed-source or a mixture so the

550
00:20:15,940 --> 00:20:18,280
sci-fi chips are actually much of it as

551
00:20:18,280 --> 00:20:19,840
open-source but there's things on the

552
00:20:19,840 --> 00:20:23,260
chips that are proprietary IP and so

553
00:20:23,260 --> 00:20:25,840
those parts aren't open sourced and is a

554
00:20:25,840 --> 00:20:29,200
risk risk 5 is a says do whatever you

555
00:20:29,200 --> 00:20:31,690
want to do it's fine just don't lie and

556
00:20:31,690 --> 00:20:33,040
say it's verse 5 when it's not that's

557
00:20:33,040 --> 00:20:36,450
the only thing that cannot after you for

558
00:20:36,960 --> 00:20:39,309
but I think risk 5 does give you the

559
00:20:39,309 --> 00:20:40,900
ability to build open source hardware

560
00:20:40,900 --> 00:20:43,420
that's practical because so now people

561
00:20:43,420 --> 00:20:44,980
can build open source cores and

562
00:20:44,980 --> 00:20:48,250
platforms so again that badge fpga the

563
00:20:48,250 --> 00:20:49,900
cords that's on here is open source and

564
00:20:49,900 --> 00:20:52,240
it's one of many many risk 5 cores that

565
00:20:52,240 --> 00:20:53,500
are open source that you can find

566
00:20:53,500 --> 00:20:55,590
written lots of different languages and

567
00:20:55,590 --> 00:20:57,700
then you can build a platform around

568
00:20:57,700 --> 00:20:59,500
that but like how do i blink LEDs once I

569
00:20:59,500 --> 00:21:02,020
have this risk 5 core and you can use

570
00:21:02,020 --> 00:21:03,790
your open source compilers and you can

571
00:21:03,790 --> 00:21:06,520
run open source OS is and you can run a

572
00:21:06,520 --> 00:21:07,929
bunch of open source apps on top of

573
00:21:07,929 --> 00:21:11,470
those devices so this is what project

574
00:21:11,470 --> 00:21:15,760
that I did so are you can tell about my

575
00:21:15,760 --> 00:21:19,210
shirt is glowing in this picture but so

576
00:21:19,210 --> 00:21:20,920
basically this started with the 32-bit

577
00:21:20,920 --> 00:21:23,020
embedded rocket rest live core which is

578
00:21:23,020 --> 00:21:25,210
open source you can go see the stuff on

579
00:21:25,210 --> 00:21:28,390
github and we taped out that silicon

580
00:21:28,390 --> 00:21:30,790
that we talked about and we open sourced

581
00:21:30,790 --> 00:21:32,470
as much of that as we could on this repo

582
00:21:32,470 --> 00:21:36,340
and then we put that on the hi-5 one PCB

583
00:21:36,340 --> 00:21:37,780
which is an Arduino form-factor board I

584
00:21:37,780 --> 00:21:38,920
mean released all the schematics and

585
00:21:38,920 --> 00:21:42,780
everything and then we ported Arduino

586
00:21:42,780 --> 00:21:45,610
runtime thing and we call it Cinco and

587
00:21:45,610 --> 00:21:49,929
we had that running on that board and

588
00:21:49,929 --> 00:21:52,630
then I'm a big fan of the Adafruit stuff

589
00:21:52,630 --> 00:21:54,760
because it always just works so I ported

590
00:21:54,760 --> 00:21:56,380
the neopixel library for this little

591
00:21:56,380 --> 00:21:59,470
matrix and got my thing to glow so that

592
00:21:59,470 --> 00:22:00,940
I could go to maker faire and hold my

593
00:22:00,940 --> 00:22:03,580
head up and so I think it's really cool

594
00:22:03,580 --> 00:22:05,800
that I got to like touch all of this

595
00:22:05,800 --> 00:22:07,690
stuff and we kind of moved things a

596
00:22:07,690 --> 00:22:10,000
little bit farther down or up in my

597
00:22:10,000 --> 00:22:15,010
picture from where we were before just

598
00:22:15,010 --> 00:22:16,420
some other examples this is one from my

599
00:22:16,420 --> 00:22:19,840
coworker he ported Zephyr OS to a

600
00:22:19,840 --> 00:22:22,000
similar next revision of that board and

601
00:22:22,000 --> 00:22:24,580
he has all the open source demo for this

602
00:22:24,580 --> 00:22:26,530
the video doesn't really work in here

603
00:22:26,530 --> 00:22:26,800
but

604
00:22:26,800 --> 00:22:29,020
like it's a little pendulum demo but

605
00:22:29,020 --> 00:22:30,430
really the point is he was able to pour

606
00:22:30,430 --> 00:22:33,400
a zephyr OS and move that forward Chris

607
00:22:33,400 --> 00:22:37,690
5 and Zephyr together and then a be open

608
00:22:37,690 --> 00:22:39,730
is a you know a different company or

609
00:22:39,730 --> 00:22:41,920
different organization that took that

610
00:22:41,920 --> 00:22:44,890
Linux capable board as an example chip

611
00:22:44,890 --> 00:22:47,490
and a Linux capable board and an open

612
00:22:47,490 --> 00:22:50,200
FPGA image from micro semi and they put

613
00:22:50,200 --> 00:22:52,450
it all together with this like really

614
00:22:52,450 --> 00:22:54,640
well done Linux from Western Digital and

615
00:22:54,640 --> 00:22:56,620
they put it in a box and they all you

616
00:22:56,620 --> 00:22:58,930
have is five PC that actually you can

617
00:22:58,930 --> 00:23:01,770
definitely run like real apps and things

618
00:23:01,770 --> 00:23:04,330
so at pointa have mice

619
00:23:04,330 --> 00:23:06,460
what a point I'm trying to make is just

620
00:23:06,460 --> 00:23:08,920
because risks five doesn't require you

621
00:23:08,920 --> 00:23:09,580
to be open source

622
00:23:09,580 --> 00:23:11,140
it definitely enables you to do a lot of

623
00:23:11,140 --> 00:23:12,640
open source stuff that you couldn't do

624
00:23:12,640 --> 00:23:14,670
before

625
00:23:14,670 --> 00:23:17,470
so we're do a few GA is come in I'm

626
00:23:17,470 --> 00:23:24,040
guess we do charge so how we're def eg

627
00:23:24,040 --> 00:23:26,680
is come in so like why do we care about

628
00:23:26,680 --> 00:23:28,600
having an open source core chip I mean

629
00:23:28,600 --> 00:23:30,250
the point is that you can look at it you

630
00:23:30,250 --> 00:23:31,510
can read it you can understand it and

631
00:23:31,510 --> 00:23:33,190
then you can change it or you can throw

632
00:23:33,190 --> 00:23:35,200
it away but let's say you change the

633
00:23:35,200 --> 00:23:37,780
code for a core and then you say cool I

634
00:23:37,780 --> 00:23:39,760
changed it I went to your website and I

635
00:23:39,760 --> 00:23:42,870
changed their code and I want a new chip

636
00:23:42,870 --> 00:23:46,000
it's gonna take weeks or months to build

637
00:23:46,000 --> 00:23:47,590
that chip just the process of like

638
00:23:47,590 --> 00:23:49,840
slicing up silicon and like making

639
00:23:49,840 --> 00:23:52,630
little waif masks to shine light on the

640
00:23:52,630 --> 00:23:55,120
wafers and like chopping it up and

641
00:23:55,120 --> 00:23:56,650
polishing it like these are all the

642
00:23:56,650 --> 00:23:58,000
steps that go into actually building a

643
00:23:58,000 --> 00:23:59,200
chip so that's gonna take a long time

644
00:23:59,200 --> 00:24:01,690
and that's assuming you actually know

645
00:24:01,690 --> 00:24:03,070
what you want to build if you want to

646
00:24:03,070 --> 00:24:03,760
figure out what you're gonna want to

647
00:24:03,760 --> 00:24:05,140
actually build it's gonna take months

648
00:24:05,140 --> 00:24:07,990
two years on top of that so FPGA is

649
00:24:07,990 --> 00:24:11,080
totally solve this problem so FPGA

650
00:24:11,080 --> 00:24:12,790
stands for a field programmable gate

651
00:24:12,790 --> 00:24:14,560
array and it's like this thing on your

652
00:24:14,560 --> 00:24:17,920
chip the big guy and what it does is it

653
00:24:17,920 --> 00:24:20,800
allows you to change the chips hardware

654
00:24:20,800 --> 00:24:22,390
in a few minutes so when you're loading

655
00:24:22,390 --> 00:24:23,650
programs onto this and I'm sure someone

656
00:24:23,650 --> 00:24:24,640
will talk about this more in the

657
00:24:24,640 --> 00:24:26,260
workshop so everything you can either

658
00:24:26,260 --> 00:24:28,780
you know load code on to it it's like

659
00:24:28,780 --> 00:24:30,850
the program you want it to run or you

660
00:24:30,850 --> 00:24:33,340
can actually load a program of what is

661
00:24:33,340 --> 00:24:36,100
this chip supposed to act like so right

662
00:24:36,100 --> 00:24:37,510
now it's being it's told that you're

663
00:24:37,510 --> 00:24:39,190
supposed to act like you know to risk

664
00:24:39,190 --> 00:24:40,480
five cores and a bunch of other

665
00:24:40,480 --> 00:24:42,430
awesome stuff but you could go in there

666
00:24:42,430 --> 00:24:43,660
and you could change that and I think

667
00:24:43,660 --> 00:24:45,310
those workshops about that yesterday and

668
00:24:45,310 --> 00:24:50,620
today so here are five ways to modify a

669
00:24:50,620 --> 00:24:52,510
risk five based design that are like

670
00:24:52,510 --> 00:24:54,670
actually interesting now that you have

671
00:24:54,670 --> 00:24:55,930
an FPGA because you don't have to sit

672
00:24:55,930 --> 00:24:56,910
around waiting for a chip to come back

673
00:24:56,910 --> 00:25:00,130
so you could tune the CPU that's on

674
00:25:00,130 --> 00:25:02,800
there so that means you could take the

675
00:25:02,800 --> 00:25:04,300
CPU you could change things like the

676
00:25:04,300 --> 00:25:06,430
cache size how much memory does it have

677
00:25:06,430 --> 00:25:08,440
how much branch prediction does it do

678
00:25:08,440 --> 00:25:10,870
how deep is the pipeline so you're kind

679
00:25:10,870 --> 00:25:14,740
of trading off frequency and area to try

680
00:25:14,740 --> 00:25:16,300
to get something that works for your

681
00:25:16,300 --> 00:25:17,500
application maybe you need something

682
00:25:17,500 --> 00:25:18,940
that fits in this FPGA that's a tiny

683
00:25:18,940 --> 00:25:21,130
FPGA all you needed to do is like

684
00:25:21,130 --> 00:25:23,920
Lincoln led or you actually want to do

685
00:25:23,920 --> 00:25:25,680
some crazy you know machine learning

686
00:25:25,680 --> 00:25:28,150
acceleration thing and you need a lot

687
00:25:28,150 --> 00:25:30,460
more resources and it fits on the FPGA

688
00:25:30,460 --> 00:25:33,610
so you can change that stuff I would say

689
00:25:33,610 --> 00:25:35,560
this is kind of basic computer

690
00:25:35,560 --> 00:25:37,300
architecture stuff you don't really need

691
00:25:37,300 --> 00:25:39,280
a special is a to do this like all most

692
00:25:39,280 --> 00:25:41,860
is aids will let you tune these sorts of

693
00:25:41,860 --> 00:25:46,270
things next thing you can do is tweak

694
00:25:46,270 --> 00:25:49,540
the CPU so remember part of the glory of

695
00:25:49,540 --> 00:25:51,310
being having open source design is that

696
00:25:51,310 --> 00:25:52,450
you can actually look at it understand

697
00:25:52,450 --> 00:25:54,970
it so I was having a conversation with

698
00:25:54,970 --> 00:25:56,470
one of my mentors in grad school and he

699
00:25:56,470 --> 00:25:57,790
mentioned like oh yeah I think there's a

700
00:25:57,790 --> 00:26:01,600
patent on multiplication by zero like if

701
00:26:01,600 --> 00:26:03,940
you multiply by zero you can just not do

702
00:26:03,940 --> 00:26:05,620
it and then like saves you some power

703
00:26:05,620 --> 00:26:09,520
you just know the answer zero so I was

704
00:26:09,520 --> 00:26:11,830
like wondering do do people actually do

705
00:26:11,830 --> 00:26:13,300
that like forget the patents just like

706
00:26:13,300 --> 00:26:15,490
is that something computers actually do

707
00:26:15,490 --> 00:26:18,160
so I googled in somebody else asked the

708
00:26:18,160 --> 00:26:19,600
same question on Stack Overflow and

709
00:26:19,600 --> 00:26:20,830
nobody really knew the answer and this

710
00:26:20,830 --> 00:26:22,150
is a seven-year-old question so I don't

711
00:26:22,150 --> 00:26:25,120
know but the point is we can go into the

712
00:26:25,120 --> 00:26:27,550
FPGA CPU file and figure this out I

713
00:26:27,550 --> 00:26:29,260
don't know the answer and the point is

714
00:26:29,260 --> 00:26:31,270
it's a it's a trade-off you can decide

715
00:26:31,270 --> 00:26:33,250
what you want so if you're like I really

716
00:26:33,250 --> 00:26:34,600
want the best performance I don't want

717
00:26:34,600 --> 00:26:35,890
to be multiplying when I don't have to

718
00:26:35,890 --> 00:26:37,870
then you could change the code to make

719
00:26:37,870 --> 00:26:41,080
it do that optimization or if you're

720
00:26:41,080 --> 00:26:42,730
like a security researcher this is like

721
00:26:42,730 --> 00:26:44,080
making all the alarm bells in your head

722
00:26:44,080 --> 00:26:45,730
go off this is terrible like this is not

723
00:26:45,730 --> 00:26:47,260
constant time operation this is gonna

724
00:26:47,260 --> 00:26:49,120
have terrible side Channel I'm gonna go

725
00:26:49,120 --> 00:26:50,560
in there make sure it always multiplies

726
00:26:50,560 --> 00:26:54,070
by zero and so this is a really one

727
00:26:54,070 --> 00:26:55,240
the reasons that risk 5 is really

728
00:26:55,240 --> 00:26:57,370
exciting for security community if they

729
00:26:57,370 --> 00:26:59,380
can get in and look at it and say you

730
00:26:59,380 --> 00:27:01,120
know I don't have to do some crazy

731
00:27:01,120 --> 00:27:02,710
analysis to figure out if this is going

732
00:27:02,710 --> 00:27:05,410
to be susceptible to some of these

733
00:27:05,410 --> 00:27:07,210
Spectre and melt down attacks I can just

734
00:27:07,210 --> 00:27:09,340
go look at the code and then I can fix

735
00:27:09,340 --> 00:27:14,770
it to make sure it doesn't so that

736
00:27:14,770 --> 00:27:17,800
another thing we can do is customize the

737
00:27:17,800 --> 00:27:21,670
ISA so like you said the risk 5 is a is

738
00:27:21,670 --> 00:27:23,560
was designed from the ground up to be

739
00:27:23,560 --> 00:27:28,300
extensible and modular so the base

740
00:27:28,300 --> 00:27:30,160
instruction set is the the eye

741
00:27:30,160 --> 00:27:31,930
instruction set which is really not much

742
00:27:31,930 --> 00:27:35,620
more than add subtract load and yeah

743
00:27:35,620 --> 00:27:38,620
load and store basically and so even

744
00:27:38,620 --> 00:27:41,500
multiply is an extension which you're

745
00:27:41,500 --> 00:27:43,150
like doing isn't it definitely need to

746
00:27:43,150 --> 00:27:44,080
multiply it's like well you can do that

747
00:27:44,080 --> 00:27:45,880
with ads you just keep adding if you

748
00:27:45,880 --> 00:27:46,780
want to do divide you just keep

749
00:27:46,780 --> 00:27:48,610
subtracting so if you really don't want

750
00:27:48,610 --> 00:27:49,900
to waste the area for a multiplier you

751
00:27:49,900 --> 00:27:52,450
don't need to similar with F this stands

752
00:27:52,450 --> 00:27:54,730
for floating point which is a pretty

753
00:27:54,730 --> 00:27:56,260
expensive piece of hardware in any in

754
00:27:56,260 --> 00:27:58,450
any case and if you're just that power

755
00:27:58,450 --> 00:28:00,670
CPU controller thing you definitely

756
00:28:00,670 --> 00:28:01,840
don't need to plummet I don't know I

757
00:28:01,840 --> 00:28:03,040
never do line movies but you probably

758
00:28:03,040 --> 00:28:04,300
definitely don't need floating points so

759
00:28:04,300 --> 00:28:06,270
you're not gonna waste area for that and

760
00:28:06,270 --> 00:28:09,280
so the similar with a and D and other

761
00:28:09,280 --> 00:28:11,710
extensions so the idea is the hardware

762
00:28:11,710 --> 00:28:13,960
is modular and therefore the compilers

763
00:28:13,960 --> 00:28:16,170
know that and it compilers in modular

764
00:28:16,170 --> 00:28:18,370
and then addition to that there's a

765
00:28:18,370 --> 00:28:20,410
bunch of other extensions which are kind

766
00:28:20,410 --> 00:28:22,330
of in flight that are using this sort of

767
00:28:22,330 --> 00:28:24,790
reserved space and those are reserved

768
00:28:24,790 --> 00:28:26,890
for the risk 5 foundation

769
00:28:26,890 --> 00:28:29,980
standardization extensions but there's a

770
00:28:29,980 --> 00:28:32,590
separate part of the space which is

771
00:28:32,590 --> 00:28:34,510
especially designed for people to do

772
00:28:34,510 --> 00:28:35,860
whatever they want it's like the

773
00:28:35,860 --> 00:28:37,450
foundation promises we will never use a

774
00:28:37,450 --> 00:28:40,360
space it's only for custom extensions so

775
00:28:40,360 --> 00:28:41,920
if you're a company and you're like you

776
00:28:41,920 --> 00:28:43,360
know what I I have something that I

777
00:28:43,360 --> 00:28:44,470
think is really special and it's going

778
00:28:44,470 --> 00:28:46,450
to make my code on my hardware work

779
00:28:46,450 --> 00:28:48,550
really well I want to custom extension

780
00:28:48,550 --> 00:28:51,010
and I'm gonna put in this custom space

781
00:28:51,010 --> 00:28:51,820
that's fine

782
00:28:51,820 --> 00:28:53,530
you are like allowed and encouraged to

783
00:28:53,530 --> 00:28:57,220
do that so other companies have the

784
00:28:57,220 --> 00:29:00,550
concept of extensible ISAs but often the

785
00:29:00,550 --> 00:29:02,880
the extensions are sort of baked in and

786
00:29:02,880 --> 00:29:06,789
they kind of part of the product and

787
00:29:06,789 --> 00:29:09,099
it's in wrist lag it's really in your

788
00:29:09,099 --> 00:29:10,599
control like what makes sense this

789
00:29:10,599 --> 00:29:16,149
mix-and-match so another big one is you

790
00:29:16,149 --> 00:29:18,159
can just replace the whole CPU so if you

791
00:29:18,159 --> 00:29:20,259
get this FPGA and you're like oh Kiko RB

792
00:29:20,259 --> 00:29:21,969
32 is awesome but I designed my own

793
00:29:21,969 --> 00:29:23,649
thing or I saw this other thing I want

794
00:29:23,649 --> 00:29:25,629
to see how that works in comparison we

795
00:29:25,629 --> 00:29:27,099
just swap it out and in

796
00:29:27,099 --> 00:29:28,659
you know if everything's done right the

797
00:29:28,659 --> 00:29:30,369
software should just work because that

798
00:29:30,369 --> 00:29:32,919
is the true power of rs.5 is that you

799
00:29:32,919 --> 00:29:35,349
pick the I say first and then you pick

800
00:29:35,349 --> 00:29:37,119
the implementation before you had to

801
00:29:37,119 --> 00:29:38,379
kind of decide like well let me look at

802
00:29:38,379 --> 00:29:39,579
how much things cost and then I'll

803
00:29:39,579 --> 00:29:40,989
figure out which company them to talk to

804
00:29:40,989 --> 00:29:42,909
and then you know they're gonna kind of

805
00:29:42,909 --> 00:29:45,369
you know torch for me once I try to like

806
00:29:45,369 --> 00:29:46,989
change the next chip that I'm gonna do

807
00:29:46,989 --> 00:29:48,699
but now you're just like not Museum is

808
00:29:48,699 --> 00:29:51,159
five and if I don't find what I need

809
00:29:51,159 --> 00:29:53,529
today I'm gonna you know go to somebody

810
00:29:53,529 --> 00:29:53,949
else

811
00:29:53,949 --> 00:29:55,809
all right still find what I need I'll

812
00:29:55,809 --> 00:29:58,119
just design my own thing let's say I get

813
00:29:58,119 --> 00:30:00,009
start designing my own thing and I get

814
00:30:00,009 --> 00:30:01,119
about two-thirds of the way through and

815
00:30:01,119 --> 00:30:03,489
I'm like oh wow like how to interrupts a

816
00:30:03,489 --> 00:30:05,169
debugger dinner like interact again he's

817
00:30:05,169 --> 00:30:07,059
getting like tricky then you're like

818
00:30:07,059 --> 00:30:08,289
that's fine just go back and like look

819
00:30:08,289 --> 00:30:09,579
for alternatives or go look at what

820
00:30:09,579 --> 00:30:10,779
other people have done and see if you

821
00:30:10,779 --> 00:30:13,629
can improve your implementation but the

822
00:30:13,629 --> 00:30:15,099
point is you know these things should be

823
00:30:15,099 --> 00:30:18,669
fairly interchangeable you can also

824
00:30:18,669 --> 00:30:19,959
replace something that was like lower

825
00:30:19,959 --> 00:30:21,129
performance with something higher

826
00:30:21,129 --> 00:30:23,319
performance at you know to kind of have

827
00:30:23,319 --> 00:30:25,359
this maintain the same platform but it's

828
00:30:25,359 --> 00:30:26,979
people are coming out with like more and

829
00:30:26,979 --> 00:30:28,929
more impressive or spicy to use you can

830
00:30:28,929 --> 00:30:30,909
kind of just keep moving up on the on

831
00:30:30,909 --> 00:30:36,459
the chain and finally you can modify the

832
00:30:36,459 --> 00:30:38,349
platform so I know we're like very used

833
00:30:38,349 --> 00:30:40,149
to on these sorts of badges I know

834
00:30:40,149 --> 00:30:42,039
there's a cartridge so you can like add

835
00:30:42,039 --> 00:30:44,979
extra hardware on the board but with

836
00:30:44,979 --> 00:30:46,659
FPGA you can actually add extra Hardware

837
00:30:46,659 --> 00:30:49,239
in the FPGA so I've used the two

838
00:30:49,239 --> 00:30:51,099
projects that I saw when I was looking

839
00:30:51,099 --> 00:30:52,809
around so I've always wanted to have an

840
00:30:52,809 --> 00:30:54,519
FPGA driving neopixels because I feel

841
00:30:54,519 --> 00:30:56,919
like the neopixel code is like overly

842
00:30:56,919 --> 00:30:58,809
complicated for what it actually is and

843
00:30:58,809 --> 00:31:00,849
so somebody actually did this on this

844
00:31:00,849 --> 00:31:02,889
project called easy pixel as far as I

845
00:31:02,889 --> 00:31:04,179
can tell this is not an open-source

846
00:31:04,179 --> 00:31:05,409
project something it correct me if I'm

847
00:31:05,409 --> 00:31:08,259
wrong but you know you could go read the

848
00:31:08,259 --> 00:31:10,539
neopixel spec design some hardware that

849
00:31:10,539 --> 00:31:12,069
does in the Oh pixel thing open source

850
00:31:12,069 --> 00:31:13,719
it other people can put it on their

851
00:31:13,719 --> 00:31:17,249
badge and you know use that thing and

852
00:31:17,249 --> 00:31:20,470
another example is Nvidia open

853
00:31:20,470 --> 00:31:22,480
source their envy DLA accelerator for

854
00:31:22,480 --> 00:31:24,280
machine learning and so I five actually

855
00:31:24,280 --> 00:31:26,110
as a demo where we take that open-source

856
00:31:26,110 --> 00:31:28,510
thing and we add it to our open source

857
00:31:28,510 --> 00:31:31,150
Linux FPGA platform and you kind of you

858
00:31:31,150 --> 00:31:33,909
know enhance the whole system and all of

859
00:31:33,909 --> 00:31:35,350
this you know you knew it in a few

860
00:31:35,350 --> 00:31:36,760
minutes with an FPGA you don't have to

861
00:31:36,760 --> 00:31:39,789
like debugging and debug debug you just

862
00:31:39,789 --> 00:31:41,950
like try it and see if your pixels link

863
00:31:41,950 --> 00:31:48,429
or not so Russ 5 Foundation really

864
00:31:48,429 --> 00:31:50,710
recognizes the power of FPGAs and

865
00:31:50,710 --> 00:31:53,140
they've started an annual contest based

866
00:31:53,140 --> 00:31:54,190
around FPGA

867
00:31:54,190 --> 00:31:57,010
so in 2018 was the first year that they

868
00:31:57,010 --> 00:31:59,440
did this and they the challenge is

869
00:31:59,440 --> 00:32:01,360
basically like let's get as many people

870
00:32:01,360 --> 00:32:02,740
as possible to build risk 5 a few days

871
00:32:02,740 --> 00:32:05,830
of course and so there were two two

872
00:32:05,830 --> 00:32:09,750
challenges one was the smallest possible

873
00:32:09,750 --> 00:32:12,010
miss 5 thing that was compliant to the

874
00:32:12,010 --> 00:32:14,110
spec and then the next was the most

875
00:32:14,110 --> 00:32:17,080
performant that was able to fit on given

876
00:32:17,080 --> 00:32:19,539
a fee GA and you know they had tons of

877
00:32:19,539 --> 00:32:22,150
people entering lots of techniques lots

878
00:32:22,150 --> 00:32:23,890
of languages that people use people use

879
00:32:23,890 --> 00:32:25,030
different languages like Beryl logs

880
00:32:25,030 --> 00:32:28,650
Justin Beryl log chisels final HDL and

881
00:32:28,650 --> 00:32:31,539
probably other things that I'm not aware

882
00:32:31,539 --> 00:32:34,539
of that's just some C maybe I'm sorry if

883
00:32:34,539 --> 00:32:35,500
I'm not saying your favorite language

884
00:32:35,500 --> 00:32:38,740
and the cool thing is that part of the

885
00:32:38,740 --> 00:32:39,970
requirement of the contest was that they

886
00:32:39,970 --> 00:32:42,130
had to be open source that everyone

887
00:32:42,130 --> 00:32:46,539
could see and then in 2019 we rounded

888
00:32:46,539 --> 00:32:48,780
build on top of that by embracing the

889
00:32:48,780 --> 00:32:51,370
how well risk 5 works of the security

890
00:32:51,370 --> 00:32:54,429
community to have attacked resistant CPU

891
00:32:54,429 --> 00:32:55,780
challenge so there were five attack

892
00:32:55,780 --> 00:32:57,789
vectors that people needed to build

893
00:32:57,789 --> 00:32:59,799
hardware that was recidivist resistant

894
00:32:59,799 --> 00:33:02,200
to those and again they had to be open

895
00:33:02,200 --> 00:33:04,809
source fpga implementations and I think

896
00:33:04,809 --> 00:33:06,190
the 20/20 challenge will be announced

897
00:33:06,190 --> 00:33:08,710
probably in the summer but I hope like

898
00:33:08,710 --> 00:33:10,480
everyone here will be FPGA experts by

899
00:33:10,480 --> 00:33:13,409
then and you can participate

900
00:33:14,400 --> 00:33:17,230
so one last other cool project that's

901
00:33:17,230 --> 00:33:19,720
kind of risk five an FPGA there's a

902
00:33:19,720 --> 00:33:21,789
project also out of Berkeley called fire

903
00:33:21,789 --> 00:33:25,000
sin and it is basically a project that

904
00:33:25,000 --> 00:33:27,490
makes it easy to run stuff in the

905
00:33:27,490 --> 00:33:30,309
Amazons FPGA that are like in the clouds

906
00:33:30,309 --> 00:33:32,169
Amazon has this thing called f1 where

907
00:33:32,169 --> 00:33:33,940
you can kind of login

908
00:33:33,940 --> 00:33:35,860
fire up an FPGA and get your image on it

909
00:33:35,860 --> 00:33:37,060
so it's sort of like there's a badge

910
00:33:37,060 --> 00:33:38,890
somewhere in the cloud somewhere that

911
00:33:38,890 --> 00:33:40,180
you are talking to and you're saying

912
00:33:40,180 --> 00:33:41,230
this is what I want to put on that and

913
00:33:41,230 --> 00:33:43,630
then I want it to like act like a

914
00:33:43,630 --> 00:33:45,910
computer now that I've flashed it with

915
00:33:45,910 --> 00:33:48,790
this image and the thing that's really

916
00:33:48,790 --> 00:33:50,470
what it's really trying to do is not

917
00:33:50,470 --> 00:33:52,630
necessarily accelerate what you're doing

918
00:33:52,630 --> 00:33:55,420
and act like hardware and the most

919
00:33:55,420 --> 00:33:57,430
efficient way possible is trying to tell

920
00:33:57,430 --> 00:33:58,840
you exactly how it's going to work if

921
00:33:58,840 --> 00:34:00,190
you actually tape out a chip like this

922
00:34:00,190 --> 00:34:01,960
if you actually build a chip like this

923
00:34:01,960 --> 00:34:04,270
it has this sort of memory latency this

924
00:34:04,270 --> 00:34:07,120
sort of networking latency how well is

925
00:34:07,120 --> 00:34:08,440
your data center going to perform if you

926
00:34:08,440 --> 00:34:10,360
put a thousand of these together so I

927
00:34:10,360 --> 00:34:12,090
think it's a really cool project and

928
00:34:12,090 --> 00:34:15,639
it's not necessarily doesn't really have

929
00:34:15,639 --> 00:34:17,168
anything to do with risk five except

930
00:34:17,168 --> 00:34:18,610
without risk five they wouldn't have had

931
00:34:18,610 --> 00:34:20,530
anything to sort of start with to put on

932
00:34:20,530 --> 00:34:21,639
this project it would've been like well

933
00:34:21,639 --> 00:34:23,199
let's sit here and like see if I get a

934
00:34:23,199 --> 00:34:25,210
license from arm or see if we can design

935
00:34:25,210 --> 00:34:26,770
our own processor so that we can like

936
00:34:26,770 --> 00:34:28,270
start it's like no no we start with the

937
00:34:28,270 --> 00:34:30,280
rocket ship repo and then we work on the

938
00:34:30,280 --> 00:34:38,110
cool stuff so if you want to get

939
00:34:38,110 --> 00:34:40,449
involved in verse 5 that member the

940
00:34:40,449 --> 00:34:43,090
organization has working groups so when

941
00:34:43,090 --> 00:34:44,770
I first joined sci-fi one thing I wanted

942
00:34:44,770 --> 00:34:46,330
to do is actually get involved with the

943
00:34:46,330 --> 00:34:47,560
risk 5 foundation I think that's more

944
00:34:47,560 --> 00:34:49,989
excited about that been satisfied and so

945
00:34:49,989 --> 00:34:51,969
when I started the thing that was sort

946
00:34:51,969 --> 00:34:53,889
of on fire was a debug it was know

947
00:34:53,889 --> 00:34:55,060
people are saying you can't use this

948
00:34:55,060 --> 00:34:57,580
because we can't debug it so I worked

949
00:34:57,580 --> 00:34:59,890
with the debug task group and I chaired

950
00:34:59,890 --> 00:35:01,630
it for a while and so we came up with an

951
00:35:01,630 --> 00:35:03,730
actual specification for debugging and

952
00:35:03,730 --> 00:35:06,730
now both open source tool like open OCD

953
00:35:06,730 --> 00:35:09,040
influence the risk 5 debug standard and

954
00:35:09,040 --> 00:35:10,960
as well as tools like that Sega and

955
00:35:10,960 --> 00:35:15,940
Lauterbach and I are also do using the

956
00:35:15,940 --> 00:35:17,680
risk 5 standard but there's lots of

957
00:35:17,680 --> 00:35:19,330
other working groups some of the hot

958
00:35:19,330 --> 00:35:20,890
ones right now I think are the vector

959
00:35:20,890 --> 00:35:24,040
extension task group and the security

960
00:35:24,040 --> 00:35:25,960
and drug sentence task group there's

961
00:35:25,960 --> 00:35:27,670
also groups that are just like in charge

962
00:35:27,670 --> 00:35:29,170
of figuring out this compliance question

963
00:35:29,170 --> 00:35:32,310
so that's like a huge value add for the

964
00:35:32,310 --> 00:35:35,440
for the foundation but if there's

965
00:35:35,440 --> 00:35:36,910
anything here that you think sounds cool

966
00:35:36,910 --> 00:35:38,220
or if you have something that you think

967
00:35:38,220 --> 00:35:40,570
would be better like if you got more

968
00:35:40,570 --> 00:35:42,100
people involved in talking about it

969
00:35:42,100 --> 00:35:44,800
definitely go to riff 5 website and see

970
00:35:44,800 --> 00:35:46,780
if there's a group about it and I guess

971
00:35:46,780 --> 00:35:48,880
it's free to join as an individual you

972
00:35:48,880 --> 00:35:51,820
just have to check the whatever

973
00:35:51,820 --> 00:35:56,550
membership conditions or something and

974
00:35:56,550 --> 00:35:59,140
finally you know I wrote this slide and

975
00:35:59,140 --> 00:36:00,490
then I came here yesterday and I talked

976
00:36:00,490 --> 00:36:01,840
to a lot of people and I was like oh my

977
00:36:01,840 --> 00:36:05,410
information is way out of date so I had

978
00:36:05,410 --> 00:36:06,250
all these stuff that I thought we

979
00:36:06,250 --> 00:36:08,080
thought we needed and so one thing was

980
00:36:08,080 --> 00:36:10,000
like well we don't have any open source

981
00:36:10,000 --> 00:36:12,040
fpga tools but like if you flash this

982
00:36:12,040 --> 00:36:14,770
badge you're just like make and it like

983
00:36:14,770 --> 00:36:17,830
compiles the fpga image and that like

984
00:36:17,830 --> 00:36:19,900
blew my mind because that did not exist

985
00:36:19,900 --> 00:36:21,190
a few years so I'm really excited about

986
00:36:21,190 --> 00:36:23,650
I think Tim's talk tomorrow about Cena

987
00:36:23,650 --> 00:36:25,930
flow which is the tool chain that

988
00:36:25,930 --> 00:36:27,640
actually does this FPGA that makes it

989
00:36:27,640 --> 00:36:29,650
possible to really go top-to-bottom open

990
00:36:29,650 --> 00:36:33,670
source there's also a problem that I you

991
00:36:33,670 --> 00:36:35,590
know encounter is designing your chip

992
00:36:35,590 --> 00:36:38,080
itself with only open source tools so if

993
00:36:38,080 --> 00:36:40,000
you take your sort of logic like the

994
00:36:40,000 --> 00:36:41,290
thing you'll find when you go to look at

995
00:36:41,290 --> 00:36:45,580
the repo for this SOC this FPGA there's

996
00:36:45,580 --> 00:36:47,380
a bunch of code there and that has to

997
00:36:47,380 --> 00:36:48,760
finally get translated down to like

998
00:36:48,760 --> 00:36:50,830
little rectangles for the stencil in the

999
00:36:50,830 --> 00:36:53,140
factory and those tools are ridiculously

1000
00:36:53,140 --> 00:36:54,820
expensive and kind of awful because

1001
00:36:54,820 --> 00:36:55,750
nobody uses them because they're

1002
00:36:55,750 --> 00:36:57,280
expensive and so they don't have any

1003
00:36:57,280 --> 00:36:58,180
incentive to make them better because

1004
00:36:58,180 --> 00:37:00,340
nobody uses them so I was really excited

1005
00:37:00,340 --> 00:37:01,930
to hear yesterday about this open road

1006
00:37:01,930 --> 00:37:03,280
project which is trying to solve that

1007
00:37:03,280 --> 00:37:05,110
problem in the open source come up with

1008
00:37:05,110 --> 00:37:06,880
a full tool chain from Farrell log to

1009
00:37:06,880 --> 00:37:10,510
GDS I think there's still a problem for

1010
00:37:10,510 --> 00:37:12,580
designing an ssee with only open source

1011
00:37:12,580 --> 00:37:19,210
IPS so things like ddr5 and ethernet phy

1012
00:37:19,210 --> 00:37:23,440
hand even USB they are you know people

1013
00:37:23,440 --> 00:37:25,510
built design them and they sell them so

1014
00:37:25,510 --> 00:37:26,440
they have really no incentive to

1015
00:37:26,440 --> 00:37:28,120
open-source them I know people like my

1016
00:37:28,120 --> 00:37:29,620
old research group at Stanford is

1017
00:37:29,620 --> 00:37:32,410
working on a it's called dragonfly so

1018
00:37:32,410 --> 00:37:34,660
they're working on an open-source PI but

1019
00:37:34,660 --> 00:37:36,430
I think there's a ton of work to be done

1020
00:37:36,430 --> 00:37:39,880
here and also building your chip and an

1021
00:37:39,880 --> 00:37:42,160
open-source fab so I don't know I think

1022
00:37:42,160 --> 00:37:45,820
right now like the technologies are

1023
00:37:45,820 --> 00:37:46,840
getting smaller and smaller and smaller

1024
00:37:46,840 --> 00:37:49,060
if we go back in time to the ones that

1025
00:37:49,060 --> 00:37:52,270
were really big so like you know at some

1026
00:37:52,270 --> 00:37:53,440
point it's big enough that you could

1027
00:37:53,440 --> 00:37:55,060
actually make it was like an exacto

1028
00:37:55,060 --> 00:37:56,770
knife and like stuff I think the hard

1029
00:37:56,770 --> 00:37:59,260
part is the chemicals right so

1030
00:37:59,260 --> 00:38:00,430
I'm curious to see if anybody can

1031
00:38:00,430 --> 00:38:01,810
actually come up with an open-source fab

1032
00:38:01,810 --> 00:38:03,430
similar to like a MakerBot type thing

1033
00:38:03,430 --> 00:38:06,010
and I know this is a hardware conference

1034
00:38:06,010 --> 00:38:10,060
but also software is so important so you

1035
00:38:10,060 --> 00:38:11,560
know if you like porting things if you

1036
00:38:11,560 --> 00:38:15,670
like using you know your oppa are tosses

1037
00:38:15,670 --> 00:38:18,190
and operating systems and you've got you

1038
00:38:18,190 --> 00:38:19,660
know different languages like you see do

1039
00:38:19,660 --> 00:38:22,420
you like to see running software is

1040
00:38:22,420 --> 00:38:23,830
really important to kind of help this

1041
00:38:23,830 --> 00:38:28,030
ecosystem spread so thank you very much

1042
00:38:28,030 --> 00:38:30,100
let's talk about your projects this week

1043
00:38:30,100 --> 00:38:31,990
and I'm really having a great time of

1044
00:38:31,990 --> 00:38:34,319
this conference

