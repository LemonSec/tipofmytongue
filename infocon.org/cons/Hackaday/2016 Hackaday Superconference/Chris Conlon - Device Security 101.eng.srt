1
00:00:01,030 --> 00:00:04,230
[Music]

2
00:00:19,660 --> 00:00:29,830
[Music]

3
00:00:30,150 --> 00:00:36,850
hi my name is Julie um I am community

4
00:00:33,520 --> 00:00:38,890
leader for hackaday<font color="#E5E5E5"> I oh so I just want</font>

5
00:00:36,850 --> 00:00:42,220
<font color="#E5E5E5">to take a moment to introduce you to</font>

6
00:00:38,890 --> 00:00:44,950
<font color="#CCCCCC">Chris Coleman chris is</font><font color="#E5E5E5"> a device security</font>

7
00:00:42,220 --> 00:00:47,320
expert and software engineer he is an

8
00:00:44,950 --> 00:00:51,790
active developer for the wolf crypt

9
00:00:47,320 --> 00:00:59,550
cryptology and could cryptography engine

10
00:00:51,790 --> 00:01:04,110
so so round of applause for<font color="#E5E5E5"> that son</font>

11
00:00:59,550 --> 00:01:04,110
yessir me<font color="#CCCCCC"> okay there we go</font>

12
00:01:04,800 --> 00:01:10,810
<font color="#E5E5E5">alright so like I</font><font color="#CCCCCC"> was introduced I I'm a</font>

13
00:01:08,500 --> 00:01:13,780
software engineer with<font color="#CCCCCC"> Wolf SSL we</font>

14
00:01:10,810 --> 00:01:17,380
specialize in ssl/tls cryptography and

15
00:01:13,780 --> 00:01:20,470
related products and protocols so today

16
00:01:17,380 --> 00:01:22,600
thanks<font color="#E5E5E5"> for</font><font color="#CCCCCC"> coming to</font><font color="#E5E5E5"> this session the</font>

17
00:01:20,470 --> 00:01:24,640
goal of it is kind<font color="#E5E5E5"> of to give you a high</font>

18
00:01:22,600 --> 00:01:28,119
level introduction<font color="#E5E5E5"> to the fundamentals</font>

19
00:01:24,640 --> 00:01:29,860
<font color="#CCCCCC">of device security I know the the</font>

20
00:01:28,120 --> 00:01:33,040
knowledge<font color="#CCCCCC"> ranges really</font><font color="#E5E5E5"> between</font>

21
00:01:29,860 --> 00:01:36,100
attendees on our level<font color="#E5E5E5"> of detail and</font>

22
00:01:33,040 --> 00:01:39,010
security aspects and protocols so this

23
00:01:36,100 --> 00:01:41,080
will cover some of<font color="#E5E5E5"> the basic ones it'll</font>

24
00:01:39,010 --> 00:01:43,660
give you a good foundation to grow<font color="#CCCCCC"> your</font>

25
00:01:41,080 --> 00:01:45,490
own knowledge and then hopefully help

26
00:01:43,660 --> 00:01:50,410
you to make more secure devices in the

27
00:01:45,490 --> 00:01:53,199
future so promote we've seen this

28
00:01:50,410 --> 00:01:54,940
there's really three or four main key

29
00:01:53,200 --> 00:01:58,000
areas<font color="#CCCCCC"> that we think are important to</font>

30
00:01:54,940 --> 00:02:00,160
focus on for device security the first

31
00:01:58,000 --> 00:02:03,070
one being the network so this is<font color="#E5E5E5"> data in</font>

32
00:02:00,160 --> 00:02:06,130
motion the second one being storage or

33
00:02:03,070 --> 00:02:08,590
data at rest on<font color="#CCCCCC"> your device and the</font>

34
00:02:06,130 --> 00:02:10,570
third one being firmware so how are you

35
00:02:08,590 --> 00:02:12,790
updating your firmware are you

36
00:02:10,570 --> 00:02:15,010
protecting that and making<font color="#E5E5E5"> it secure</font>

37
00:02:12,790 --> 00:02:17,400
against malicious attackers loading

38
00:02:15,010 --> 00:02:21,880
their own firmware on your<font color="#E5E5E5"> device and</font>

39
00:02:17,400 --> 00:02:23,200
then the fourth element is is a little

40
00:02:21,880 --> 00:02:25,030
bit separate from the first three<font color="#E5E5E5"> key</font>

41
00:02:23,200 --> 00:02:32,079
areas but<font color="#E5E5E5"> it's cryptography and it sits</font>

42
00:02:25,030 --> 00:02:33,220
underneath all of<font color="#E5E5E5"> this top sorry so the</font>

43
00:02:32,080 --> 00:02:35,650
<font color="#E5E5E5">first section we'll talk about</font><font color="#CCCCCC"> is the</font>

44
00:02:33,220 --> 00:02:40,420
<font color="#E5E5E5">network or data in motion data in</font>

45
00:02:35,650 --> 00:02:42,430
transit so there's three top security

46
00:02:40,420 --> 00:02:44,470
goals that we<font color="#CCCCCC"> have to keep</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> mind that</font>

47
00:02:42,430 --> 00:02:46,600
we're trying<font color="#E5E5E5"> to accomplish here the</font>

48
00:02:44,470 --> 00:02:48,670
first one is you would<font color="#E5E5E5"> like to have</font>

49
00:02:46,600 --> 00:02:51,250
privacy this prevents against someone

50
00:02:48,670 --> 00:02:52,660
eavesdropping in your connection the

51
00:02:51,250 --> 00:02:54,760
second thing that<font color="#E5E5E5"> we're trying</font><font color="#CCCCCC"> to</font>

52
00:02:52,660 --> 00:02:55,840
accomplish is authentication so this<font color="#E5E5E5"> is</font>

53
00:02:54,760 --> 00:02:57,850
<font color="#E5E5E5">going to prevent against someone</font>

54
00:02:55,840 --> 00:03:00,459
impersonating<font color="#CCCCCC"> one or both sides of your</font>

55
00:02:57,850 --> 00:03:02,950
connection either your client or your

56
00:03:00,459 --> 00:03:04,550
server device and then the<font color="#E5E5E5"> third one is</font>

57
00:03:02,950 --> 00:03:07,040
integrity this is going<font color="#E5E5E5"> to</font>

58
00:03:04,550 --> 00:03:08,810
it's data being modified in transit so

59
00:03:07,040 --> 00:03:10,340
your client<font color="#CCCCCC"> is sending the data you</font>

60
00:03:08,810 --> 00:03:12,380
think it's sending or<font color="#CCCCCC"> it's receiving</font><font color="#E5E5E5"> the</font>

61
00:03:10,340 --> 00:03:17,120
data that hasn't been meant<font color="#E5E5E5"> to be sent</font>

62
00:03:12,380 --> 00:03:19,400
to it and there are several different

63
00:03:17,120 --> 00:03:21,980
protocols or methodologies we can use to

64
00:03:19,400 --> 00:03:25,070
<font color="#E5E5E5">accomplish these goals some of the main</font>

65
00:03:21,980 --> 00:03:26,630
ones being SSL and TLS which is secure

66
00:03:25,070 --> 00:03:30,980
socket layer and transport layer

67
00:03:26,630 --> 00:03:32,329
security or IPSec the difference<font color="#CCCCCC"> between</font>

68
00:03:30,980 --> 00:03:34,579
those two are really where they sit<font color="#CCCCCC"> in</font>

69
00:03:32,330 --> 00:03:36,620
the network stack so SSL sits between

70
00:03:34,580 --> 00:03:39,550
the application and transport layers or

71
00:03:36,620 --> 00:03:42,890
a zips<font color="#CCCCCC"> exits lower at</font><font color="#E5E5E5"> the network level</font>

72
00:03:39,550 --> 00:03:44,480
if<font color="#E5E5E5"> sec would be your application</font>

73
00:03:42,890 --> 00:03:45,920
everything<font color="#E5E5E5"> sitting on top wouldn't</font>

74
00:03:44,480 --> 00:03:50,299
really even know that it's being secured

75
00:03:45,920 --> 00:03:51,679
by IPSec underneath which is convenient

76
00:03:50,300 --> 00:03:54,830
<font color="#CCCCCC">for the application but it's also less</font>

77
00:03:51,680 --> 00:03:56,510
customizable for each application<font color="#E5E5E5"> if you</font>

78
00:03:54,830 --> 00:03:57,770
have three applications for example and

79
00:03:56,510 --> 00:04:00,049
they only they all want their<font color="#CCCCCC"> own</font>

80
00:03:57,770 --> 00:04:03,320
security<font color="#E5E5E5"> settings that makes it more</font>

81
00:04:00,050 --> 00:04:04,610
difficult whereas SSL and TLS lives more

82
00:04:03,320 --> 00:04:06,680
in the application layer so they can

83
00:04:04,610 --> 00:04:10,489
each customize the settings they want

84
00:04:06,680 --> 00:04:13,010
that appears they want to trust etc and

85
00:04:10,489 --> 00:04:15,560
then the other<font color="#CCCCCC"> thing sometimes people do</font>

86
00:04:13,010 --> 00:04:17,480
is design their own protocols this is

87
00:04:15,560 --> 00:04:20,298
this<font color="#E5E5E5"> is sometimes a lot harder than you</font>

88
00:04:17,480 --> 00:04:22,520
think it<font color="#E5E5E5"> might</font><font color="#CCCCCC"> be even when you look an</font>

89
00:04:20,298 --> 00:04:25,130
established protocol like if<font color="#CCCCCC"> secor</font><font color="#E5E5E5"> SSL</font>

90
00:04:22,520 --> 00:04:27,229
or TLS there's there's one er abilities

91
00:04:25,130 --> 00:04:29,630
found in problems and issues every<font color="#E5E5E5"> year</font>

92
00:04:27,230 --> 00:04:31,730
and those are<font color="#CCCCCC"> by groups of people who</font>

93
00:04:29,630 --> 00:04:34,550
are cryptographers and do that for<font color="#CCCCCC"> a</font>

94
00:04:31,730 --> 00:04:38,620
living so I just want you<font color="#E5E5E5"> twice before</font>

95
00:04:34,550 --> 00:04:38,620
you go<font color="#E5E5E5"> and implement your own protocol</font>

96
00:04:39,490 --> 00:04:44,210
so the most common<font color="#E5E5E5"> used protocol between</font>

97
00:04:42,140 --> 00:04:46,789
those two<font color="#CCCCCC"> is SSL and TLS so I'm</font><font color="#E5E5E5"> going to</font>

98
00:04:44,210 --> 00:04:48,440
<font color="#E5E5E5">dig into that a little bit deeper you</font>

99
00:04:46,790 --> 00:04:50,770
may be curious where it sits so this<font color="#E5E5E5"> is</font>

100
00:04:48,440 --> 00:04:53,570
a simplified diagram of the OSI model

101
00:04:50,770 --> 00:04:56,240
you have the transport layer<font color="#CCCCCC"> and gray</font>

102
00:04:53,570 --> 00:04:59,240
<font color="#CCCCCC">there typically that's tcp/ip but that</font>

103
00:04:56,240 --> 00:05:02,060
may be UDP<font color="#CCCCCC"> Bluetooth something some</font>

104
00:04:59,240 --> 00:05:04,610
other protocol<font color="#CCCCCC"> of your choice the the</font>

105
00:05:02,060 --> 00:05:07,840
blue boxes are the SSL and TLS protocols

106
00:05:04,610 --> 00:05:10,160
there's four sub protocols within that

107
00:05:07,840 --> 00:05:11,750
there's the handshake protocol the

108
00:05:10,160 --> 00:05:13,800
change self-respect protocols the alert

109
00:05:11,750 --> 00:05:15,860
protocol on the record layer

110
00:05:13,800 --> 00:05:18,449
the handshake is responsible for

111
00:05:15,860 --> 00:05:20,639
authenticating peers negotiating<font color="#CCCCCC"> a cyber</font>

112
00:05:18,449 --> 00:05:23,490
sweet to use the change diaper spectro

113
00:05:20,639 --> 00:05:26,129
recall signals changes in cipher<font color="#CCCCCC"> II</font>

114
00:05:23,490 --> 00:05:27,690
strategies the<font color="#CCCCCC"> Aleut protocol pretty</font>

115
00:05:26,129 --> 00:05:30,539
much<font color="#E5E5E5"> just does that it conveys alerts</font>

116
00:05:27,690 --> 00:05:32,819
fatal<font color="#CCCCCC"> or warning and then the record</font>

117
00:05:30,539 --> 00:05:34,378
layer is really the workhorse of SSL so

118
00:05:32,819 --> 00:05:37,199
that's what's taken care of the

119
00:05:34,379 --> 00:05:41,400
encryption men formatting the packets to

120
00:05:37,199 --> 00:05:43,110
be sent across<font color="#E5E5E5"> the wire you can see blue</font>

121
00:05:41,400 --> 00:05:45,810
boxes here those are<font color="#E5E5E5"> examples of</font>

122
00:05:43,110 --> 00:05:47,430
application layer protocols which could

123
00:05:45,810 --> 00:05:52,699
be either on top<font color="#CCCCCC"> of your transport layer</font>

124
00:05:47,430 --> 00:05:52,699
or one step up above the SSL and TLS

125
00:05:54,020 --> 00:05:58,830
this protocol has been<font color="#E5E5E5"> around for quite</font>

126
00:05:56,069 --> 00:06:01,860
a while it<font color="#E5E5E5"> was invented</font><font color="#CCCCCC"> by Netscape in</font>

127
00:05:58,830 --> 00:06:05,698
1994 the first version<font color="#E5E5E5"> of it ever being</font>

128
00:06:01,860 --> 00:06:07,229
released was sl 2 point 0 in 1995 since

129
00:06:05,699 --> 00:06:12,000
then 2 point 0 and through point O<font color="#CCCCCC"> of</font>

130
00:06:07,229 --> 00:06:14,520
<font color="#E5E5E5">SSL are now</font><font color="#CCCCCC"> insecure um in 1999 moved</font>

131
00:06:12,000 --> 00:06:16,560
<font color="#CCCCCC">it's switched names to TLS or transport</font>

132
00:06:14,520 --> 00:06:18,779
layer security and that now has<font color="#E5E5E5"> gone</font>

133
00:06:16,560 --> 00:06:22,460
through three revisions<font color="#E5E5E5"> one point 0 1.1</font>

134
00:06:18,779 --> 00:06:26,180
and 1.2 1.3 is currently in the works

135
00:06:22,460 --> 00:06:29,638
the TLS working group is working on

136
00:06:26,180 --> 00:06:32,130
finalizing the specification or RFC<font color="#CCCCCC"> and</font>

137
00:06:29,639 --> 00:06:34,259
the time<font color="#E5E5E5"> frame for that's kind of up in</font>

138
00:06:32,130 --> 00:06:38,130
the air we<font color="#E5E5E5"> thought it was going</font><font color="#CCCCCC"> to be</font>

139
00:06:34,259 --> 00:06:41,490
done at the<font color="#CCCCCC"> end of last year but it's</font>

140
00:06:38,130 --> 00:06:42,930
<font color="#E5E5E5">not it's still not done so someday that</font>

141
00:06:41,490 --> 00:06:45,029
will come there's some experimental

142
00:06:42,930 --> 00:06:46,909
support in browsers like<font color="#E5E5E5"> Chrome and</font>

143
00:06:45,029 --> 00:06:49,050
<font color="#E5E5E5">Firefox if you get their development</font>

144
00:06:46,909 --> 00:06:51,810
version or the development branch you

145
00:06:49,050 --> 00:06:57,330
can have a early<font color="#E5E5E5"> implementation of TLS</font>

146
00:06:51,810 --> 00:06:58,860
1.3<font color="#CCCCCC"> and then DTLS is Datagram TLS this</font>

147
00:06:57,330 --> 00:07:04,948
is TLS designed to be run over

148
00:06:58,860 --> 00:07:07,650
unreliable protocols like UDP and then

149
00:07:04,949 --> 00:07:10,349
<font color="#E5E5E5">this is</font><font color="#CCCCCC"> just a glimpse of an RFC which</font>

150
00:07:07,650 --> 00:07:12,859
defines these SSL and TLS and<font color="#CCCCCC"> DTLS</font>

151
00:07:10,349 --> 00:07:12,860
verticals

152
00:07:14,660 --> 00:07:19,890
so as a protocol it uses cryptography

153
00:07:17,790 --> 00:07:21,150
underneath and it uses different types

154
00:07:19,890 --> 00:07:24,900
of cryptography and puts them together

155
00:07:21,150 --> 00:07:29,190
and so it uses hash functions like eight

156
00:07:24,900 --> 00:07:32,820
like md5<font color="#CCCCCC"> sha1 sha256 blocker stream</font>

157
00:07:29,190 --> 00:07:35,370
ciphers like<font color="#E5E5E5"> AES Triple DES</font><font color="#CCCCCC"> ChaCha 20</font>

158
00:07:32,820 --> 00:07:38,070
and then public key functions like our

159
00:07:35,370 --> 00:07:40,290
essay or ECC and it put these into

160
00:07:38,070 --> 00:07:42,210
what's called a cipher suite which is

161
00:07:40,290 --> 00:07:44,190
pretty much<font color="#E5E5E5"> a string representation of</font>

162
00:07:42,210 --> 00:07:46,560
what<font color="#CCCCCC"> algorithms you're going to be using</font>

163
00:07:44,190 --> 00:07:48,810
in that<font color="#CCCCCC"> connection so if you've ever</font>

164
00:07:46,560 --> 00:07:51,600
configured a web server with SSL support

165
00:07:48,810 --> 00:07:54,030
or a client connecting to a server

166
00:07:51,600 --> 00:07:57,680
supporting TLS you probably dealt with

167
00:07:54,030 --> 00:07:57,679
something look somewhat similar to<font color="#E5E5E5"> this</font>

168
00:08:00,590 --> 00:08:04,500
when the client first connects to the

169
00:08:02,700 --> 00:08:07,800
server it goes through a process called

170
00:08:04,500 --> 00:08:09,300
<font color="#E5E5E5">the TLS handshake so this</font><font color="#CCCCCC"> is a kind of</font>

171
00:08:07,800 --> 00:08:12,240
what it looks like some of these

172
00:08:09,300 --> 00:08:13,710
<font color="#CCCCCC">messages are optional so the green</font>

173
00:08:12,240 --> 00:08:15,780
blocks are sent from<font color="#E5E5E5"> the client to the</font>

174
00:08:13,710 --> 00:08:17,460
server the red blocks are sent from<font color="#E5E5E5"> the</font>

175
00:08:15,780 --> 00:08:19,349
server to the client and the<font color="#CCCCCC"> yellow</font>

176
00:08:17,460 --> 00:08:21,450
blocks are optional that are sent

177
00:08:19,350 --> 00:08:25,050
depending on what what protocol or what

178
00:08:21,450 --> 00:08:26,460
options have been turned<font color="#E5E5E5"> on and so this</font>

179
00:08:25,050 --> 00:08:28,710
will get this will accomplish several

180
00:08:26,460 --> 00:08:31,260
things for us it will authenticate that

181
00:08:28,710 --> 00:08:34,289
the client<font color="#E5E5E5"> Android the server is who we</font>

182
00:08:31,260 --> 00:08:35,819
think it is it will establish that

183
00:08:34,289 --> 00:08:38,429
cipher suite so they set of algorithms

184
00:08:35,820 --> 00:08:39,810
being used in that<font color="#E5E5E5"> connection and then</font>

185
00:08:38,429 --> 00:08:41,400
down when you<font color="#E5E5E5"> get to the</font><font color="#CCCCCC"> bottom of</font><font color="#E5E5E5"> it</font>

186
00:08:39,809 --> 00:08:43,380
you have your you finally have<font color="#CCCCCC"> your</font>

187
00:08:41,400 --> 00:08:46,850
secure communication channel you can

188
00:08:43,380 --> 00:08:46,850
send and receive data across

189
00:08:49,960 --> 00:08:53,440
in addition<font color="#E5E5E5"> to cryptography the second</font>

190
00:08:52,420 --> 00:08:56,199
big thing it provides a is

191
00:08:53,440 --> 00:08:59,580
authentication this is done using<font color="#E5E5E5"> x.509</font>

192
00:08:56,200 --> 00:09:02,230
certificates and public key cryptography

193
00:08:59,580 --> 00:09:05,380
so one or both<font color="#E5E5E5"> sides of the connection</font>

194
00:09:02,230 --> 00:09:06,940
has a public<font color="#E5E5E5"> and private keeper this</font>

195
00:09:05,380 --> 00:09:11,680
would be generated<font color="#CCCCCC"> using an algorithm</font>

196
00:09:06,940 --> 00:09:13,690
like our essay or ECC and in TLS the

197
00:09:11,680 --> 00:09:16,959
public key is wrapped in what's called

198
00:09:13,690 --> 00:09:18,880
an x.509 certificate this is signed by<font color="#CCCCCC"> a</font>

199
00:09:16,960 --> 00:09:24,340
trusted<font color="#CCCCCC"> third party called a CA her</font>

200
00:09:18,880 --> 00:09:26,400
certificate authority and these

201
00:09:24,340 --> 00:09:29,380
certificates come in different types of

202
00:09:26,400 --> 00:09:31,810
formatting and encoding the two most

203
00:09:29,380 --> 00:09:36,220
<font color="#E5E5E5">popular being Pam or privacy enhanced</font>

204
00:09:31,810 --> 00:09:39,699
electronic mail and der<font color="#CCCCCC"> PEM is a base64</font>

205
00:09:36,220 --> 00:09:44,130
encoded representation an example you

206
00:09:39,700 --> 00:09:47,500
can see here der just being a binary

207
00:09:44,130 --> 00:09:48,700
representation or binary<font color="#E5E5E5"> encoding and</font>

208
00:09:47,500 --> 00:09:53,260
there's some others<font color="#CCCCCC"> that you might see</font>

209
00:09:48,700 --> 00:09:55,000
like pkcs7 excuse me<font color="#CCCCCC"> our pkcs12</font><font color="#E5E5E5"> because</font>

210
00:09:53,260 --> 00:09:58,060
<font color="#E5E5E5">cs7 is used for signing and encrypting</font>

211
00:09:55,000 --> 00:10:00,450
data pkcs12 is a bundle<font color="#E5E5E5"> of certificates</font>

212
00:09:58,060 --> 00:10:00,449
and keys

213
00:10:06,480 --> 00:10:09,300
so once you<font color="#CCCCCC"> have one of these</font>

214
00:10:07,829 --> 00:10:12,839
certificates you can chain them up

215
00:10:09,300 --> 00:10:13,979
that's<font color="#E5E5E5"> called a certificate chain so</font>

216
00:10:12,839 --> 00:10:16,050
that's where every certificate is signed

217
00:10:13,980 --> 00:10:18,720
by the one that has come previously

218
00:10:16,050 --> 00:10:21,719
before it and when<font color="#E5E5E5"> you finally reach the</font>

219
00:10:18,720 --> 00:10:23,279
top that's<font color="#E5E5E5"> called the root CA which is</font>

220
00:10:21,720 --> 00:10:24,540
the one you would want to load<font color="#E5E5E5"> into your</font>

221
00:10:23,279 --> 00:10:27,810
client if you're connecting<font color="#CCCCCC"> to a secure</font>

222
00:10:24,540 --> 00:10:31,439
server to correctly authenticate that

223
00:10:27,810 --> 00:10:34,410
server this is an example<font color="#CCCCCC"> of one of</font>

224
00:10:31,440 --> 00:10:36,209
<font color="#E5E5E5">those chains so this is for</font><font color="#CCCCCC"> Google you</font>

225
00:10:34,410 --> 00:10:39,300
can<font color="#CCCCCC"> see that Google's server certificate</font>

226
00:10:36,209 --> 00:10:42,029
is in blue here there's two intermediate

227
00:10:39,300 --> 00:10:44,279
cas finally signed by the root

228
00:10:42,029 --> 00:10:52,050
certificate authority the equifax secure

229
00:10:44,279 --> 00:10:56,579
CA so<font color="#E5E5E5"> there's some challenges when we</font>

230
00:10:52,050 --> 00:10:58,949
look<font color="#E5E5E5"> at embedded use with TLS as you</font>

231
00:10:56,579 --> 00:11:04,250
<font color="#E5E5E5">guys know embedded chips can be very</font>

232
00:10:58,949 --> 00:11:04,250
small other flash sizes or<font color="#CCCCCC"> ram sizes</font>

233
00:11:04,880 --> 00:11:09,269
there can be a number of operating

234
00:11:06,810 --> 00:11:11,189
systems so there's<font color="#E5E5E5"> that I don't know 20</font>

235
00:11:09,269 --> 00:11:16,529
30 real-time operating systems available

236
00:11:11,190 --> 00:11:18,029
today they<font color="#E5E5E5"> can be very slow mmm the</font>

237
00:11:16,529 --> 00:11:21,839
processor speeds they're not the same<font color="#E5E5E5"> as</font>

238
00:11:18,029 --> 00:11:25,709
desktop computers and<font color="#E5E5E5"> cryptography is</font>

239
00:11:21,839 --> 00:11:27,360
very performance intensive they can have

240
00:11:25,709 --> 00:11:30,899
little quirks like<font color="#E5E5E5"> locked and lacking a</font>

241
00:11:27,360 --> 00:11:33,600
file system having varying logging

242
00:11:30,899 --> 00:11:35,519
capabilities memory handlers can be

243
00:11:33,600 --> 00:11:37,380
different you can use different

244
00:11:35,519 --> 00:11:40,889
compilers you can have different

245
00:11:37,380 --> 00:11:43,760
standard<font color="#E5E5E5"> C libraries and the good thing</font>

246
00:11:40,889 --> 00:11:46,560
is there's solutions for most of these

247
00:11:43,760 --> 00:11:49,529
so<font color="#E5E5E5"> you can exclude algorithms you can</font>

248
00:11:46,560 --> 00:11:51,540
use smaller algorithms you can select

249
00:11:49,529 --> 00:11:52,980
different math libraries to use and

250
00:11:51,540 --> 00:11:56,130
there's these will help reduce your

251
00:11:52,980 --> 00:12:00,199
footprints I see your<font color="#CCCCCC"> RAM usage some</font>

252
00:11:56,130 --> 00:12:00,199
math<font color="#CCCCCC"> rbcs more</font><font color="#E5E5E5"> stacks I'm uses more heat</font>

253
00:12:01,579 --> 00:12:05,638
<font color="#E5E5E5">for the OS and the file system in</font>

254
00:12:03,870 --> 00:12:07,290
logging you'll want to look<font color="#E5E5E5"> for</font>

255
00:12:05,639 --> 00:12:09,779
libraries that have abstraction layers

256
00:12:07,290 --> 00:12:12,800
and porting it reporting areas that you

257
00:12:09,779 --> 00:12:16,019
can tie these into your specific needs

258
00:12:12,800 --> 00:12:17,260
for slow processor speeds you know

259
00:12:16,019 --> 00:12:19,280
there's a couple things you can

260
00:12:17,260 --> 00:12:22,550
you can<font color="#E5E5E5"> leverage charter base</font>

261
00:12:19,280 --> 00:12:26,000
cryptography you can also choose more

262
00:12:22,550 --> 00:12:27,790
performant algorithms and then for

263
00:12:26,000 --> 00:12:29,510
compilers on the standard libraries

264
00:12:27,790 --> 00:12:33,020
you'll just want<font color="#E5E5E5"> to look for cross</font>

265
00:12:29,510 --> 00:12:37,370
compiler compatibility and the ability

266
00:12:33,020 --> 00:12:39,140
to be able to cross compile libraries so

267
00:12:37,370 --> 00:12:45,770
there<font color="#E5E5E5"> are challenges but luckily we can</font>

268
00:12:39,140 --> 00:12:50,090
work through them so the second kick the

269
00:12:45,770 --> 00:12:55,760
second key area is storage or data at

270
00:12:50,090 --> 00:12:58,340
rest<font color="#CCCCCC"> now this one might seem kind</font><font color="#E5E5E5"> of</font>

271
00:12:55,760 --> 00:13:01,460
obvious at first so you want to encrypt

272
00:12:58,340 --> 00:13:03,670
sensitive information that rest that

273
00:13:01,460 --> 00:13:06,650
might be user passwords<font color="#E5E5E5"> that might be a</font>

274
00:13:03,670 --> 00:13:10,430
sensitive user data that might be keys

275
00:13:06,650 --> 00:13:17,090
and only store what you need to store on

276
00:13:10,430 --> 00:13:19,040
the<font color="#E5E5E5"> device so the security of your</font>

277
00:13:17,090 --> 00:13:22,700
system really depends<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the security of</font>

278
00:13:19,040 --> 00:13:25,040
your private key so there's a couple

279
00:13:22,700 --> 00:13:28,070
<font color="#E5E5E5">ways you can handle provisioning that</font>

280
00:13:25,040 --> 00:13:31,310
private key to your device<font color="#CCCCCC"> you can embed</font>

281
00:13:28,070 --> 00:13:33,260
it in your firmware from the factory you

282
00:13:31,310 --> 00:13:35,000
can transfer that from young<font color="#CCCCCC"> to do</font>

283
00:13:33,260 --> 00:13:38,090
embedded device from a remote key server

284
00:13:35,000 --> 00:13:40,580
somewhere and or you can another option

285
00:13:38,090 --> 00:13:43,070
<font color="#CCCCCC">to generate that on the fly on your</font>

286
00:13:40,580 --> 00:13:45,560
device itself so like upon first boot

287
00:13:43,070 --> 00:13:47,120
you generate your<font color="#E5E5E5"> keys and then they're</font>

288
00:13:45,560 --> 00:13:49,520
always on your<font color="#E5E5E5"> device</font><font color="#CCCCCC"> I never left your</font>

289
00:13:47,120 --> 00:13:51,140
device so there's less of a chance

290
00:13:49,520 --> 00:13:56,530
someone would have intercepted them

291
00:13:51,140 --> 00:13:58,970
during transit and some good practices

292
00:13:56,530 --> 00:14:02,180
you should use different keys for

293
00:13:58,970 --> 00:14:04,660
different purposes so use a different

294
00:14:02,180 --> 00:14:08,300
key for SSL and TLS versus code-signing

295
00:14:04,660 --> 00:14:10,130
versus data encryption so if one gets

296
00:14:08,300 --> 00:14:13,849
compromised and vulnerable the other

297
00:14:10,130 --> 00:14:15,590
areas are<font color="#E5E5E5"> still secure you should also</font>

298
00:14:13,850 --> 00:14:19,690
often you should<font color="#E5E5E5"> also think about</font>

299
00:14:15,590 --> 00:14:19,690
changing your keys on a periodic basis

300
00:14:20,290 --> 00:14:24,969
hmm so this will minimize vulnerability

301
00:14:22,360 --> 00:14:28,889
again the longer your key is<font color="#E5E5E5"> in use the</font>

302
00:14:24,970 --> 00:14:28,889
more chance it<font color="#CCCCCC"> has to become vulnerable</font>

303
00:14:33,300 --> 00:14:38,910
and then how do<font color="#E5E5E5"> you store your keys</font>

304
00:14:35,100 --> 00:14:42,540
securely so ideally<font color="#CCCCCC"> you'd have a secure</font>

305
00:14:38,910 --> 00:14:44,610
element you'd have<font color="#E5E5E5"> a TPM or an HSM that</font>

306
00:14:42,540 --> 00:14:47,550
provides a secure<font color="#E5E5E5"> area in hardware for</font>

307
00:14:44,610 --> 00:14:49,440
those keys to be<font color="#E5E5E5"> stored there's some</font>

308
00:14:47,550 --> 00:14:53,849
some cool advancements that's been

309
00:14:49,440 --> 00:14:58,560
happening at mill has a new<font color="#CCCCCC"> 85 05 08 and</font>

310
00:14:53,850 --> 00:15:02,180
the ECC 508 processor that has secure

311
00:14:58,560 --> 00:15:06,689
storage and ECT ECT ation ecdsa

312
00:15:02,180 --> 00:15:08,729
cryptography in the chip but what<font color="#E5E5E5"> if you</font>

313
00:15:06,690 --> 00:15:11,779
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> have the secure element there's a</font>

314
00:15:08,730 --> 00:15:14,160
couple<font color="#E5E5E5"> other options</font><font color="#CCCCCC"> that you can</font><font color="#E5E5E5"> do so</font>

315
00:15:11,779 --> 00:15:16,050
these<font color="#E5E5E5"> are just a few if your device is</font>

316
00:15:14,160 --> 00:15:18,300
attended you could require user input to

317
00:15:16,050 --> 00:15:21,180
decrypt those keys to then proceed to

318
00:15:18,300 --> 00:15:23,010
use them if it's a not attended you

319
00:15:21,180 --> 00:15:25,880
don't have that<font color="#E5E5E5"> option to have that user</font>

320
00:15:23,010 --> 00:15:28,620
in putting a password so you<font color="#E5E5E5"> want to</font>

321
00:15:25,880 --> 00:15:30,300
take some precautions like<font color="#E5E5E5"> maybe</font>

322
00:15:28,620 --> 00:15:33,149
automatically zeroing out the keys if

323
00:15:30,300 --> 00:15:34,560
the device is tampered with or using

324
00:15:33,149 --> 00:15:43,350
your crypto subsystem that<font color="#E5E5E5"> would</font>

325
00:15:34,560 --> 00:15:44,880
automatically zero out those for you so

326
00:15:43,350 --> 00:15:48,140
that brings me to<font color="#E5E5E5"> my third key point is</font>

327
00:15:44,880 --> 00:15:50,220
for more updates so traditionally

328
00:15:48,140 --> 00:15:53,120
<font color="#E5E5E5">firmware server sends a firm lower</font>

329
00:15:50,220 --> 00:15:55,470
bundle down and gets applied to a device

330
00:15:53,120 --> 00:15:57,240
so that works<font color="#CCCCCC"> great but how do</font><font color="#E5E5E5"> we</font>

331
00:15:55,470 --> 00:15:59,070
prevent against this attacker sending a

332
00:15:57,240 --> 00:16:04,260
malicious bundle down and getting

333
00:15:59,070 --> 00:16:05,760
applied to<font color="#E5E5E5"> our device how many of you</font>

334
00:16:04,260 --> 00:16:11,390
guys<font color="#E5E5E5"> have worked on a problem like this</font>

335
00:16:05,760 --> 00:16:11,390
before a couple

336
00:16:15,400 --> 00:16:19,720
so my next<font color="#E5E5E5"> couple slides show you</font>

337
00:16:17,350 --> 00:16:22,630
something kind of<font color="#E5E5E5"> a rough outline of how</font>

338
00:16:19,720 --> 00:16:27,340
that might be accomplished using public

339
00:16:22,630 --> 00:16:30,370
key cryptography and hash functions and

340
00:16:27,340 --> 00:16:33,370
so on your server side you<font color="#CCCCCC"> would need</font><font color="#E5E5E5"> to</font>

341
00:16:30,370 --> 00:16:36,910
generate a keeper using RSA or ECC or

342
00:16:33,370 --> 00:16:38,500
another public key algorithm you would

343
00:16:36,910 --> 00:16:40,420
have your firm learn you take a hash of

344
00:16:38,500 --> 00:16:44,110
out using a hash function in<font color="#E5E5E5"> this</font>

345
00:16:40,420 --> 00:16:46,959
example is shot 256 that will give you<font color="#E5E5E5"> H</font>

346
00:16:44,110 --> 00:16:50,110
<font color="#CCCCCC">pash</font><font color="#E5E5E5"> you'll</font><font color="#CCCCCC"> then do an RSA private</font>

347
00:16:46,960 --> 00:16:52,900
encrypt operation so this is taking<font color="#E5E5E5"> your</font>

348
00:16:50,110 --> 00:16:56,260
but your private key using RSA to

349
00:16:52,900 --> 00:16:57,880
generate a signature and then this<font color="#E5E5E5"> is</font>

350
00:16:56,260 --> 00:17:00,520
<font color="#CCCCCC">your signature for that firmware bundle</font>

351
00:16:57,880 --> 00:17:04,869
that you can apply but now that's<font color="#E5E5E5"> going</font>

352
00:17:00,520 --> 00:17:08,560
to be sent to your client<font color="#CCCCCC"> and so on the</font>

353
00:17:04,869 --> 00:17:10,300
client side this gets snapped over your

354
00:17:08,560 --> 00:17:13,179
clients gonna kind of undo those steps

355
00:17:10,300 --> 00:17:16,899
and do a verify operation so it'll take

356
00:17:13,180 --> 00:17:18,130
its own hash of the<font color="#CCCCCC"> firmware it needs a</font>

357
00:17:16,900 --> 00:17:20,650
way<font color="#CCCCCC"> to get</font><font color="#E5E5E5"> the public</font><font color="#CCCCCC"> key from</font><font color="#E5E5E5"> the</font>

358
00:17:18,130 --> 00:17:24,550
server or have<font color="#E5E5E5"> already been transferred</font>

359
00:17:20,650 --> 00:17:26,860
that key you live an RSA public

360
00:17:24,550 --> 00:17:28,690
<font color="#CCCCCC">decrypter the RSA is hearing as an</font>

361
00:17:26,859 --> 00:17:31,780
example<font color="#E5E5E5"> this could be ECC or something</font>

362
00:17:28,690 --> 00:17:33,520
else on that signature using<font color="#CCCCCC"> the public</font>

363
00:17:31,780 --> 00:17:36,730
key that will give you the original hash

364
00:17:33,520 --> 00:17:38,200
we generated on<font color="#CCCCCC"> the previous slide if</font>

365
00:17:36,730 --> 00:17:40,120
these hashes are the same we can be

366
00:17:38,200 --> 00:17:43,720
relatively confident that that came from

367
00:17:40,120 --> 00:17:45,280
who generated that original hash and we

368
00:17:43,720 --> 00:17:50,710
could we could<font color="#E5E5E5"> continue to apply this to</font>

369
00:17:45,280 --> 00:17:54,250
our device so sure that seems to make

370
00:17:50,710 --> 00:17:56,320
sense but another issue<font color="#E5E5E5"> is how do you</font>

371
00:17:54,250 --> 00:18:00,820
<font color="#E5E5E5">get the the firmware bundle to your</font>

372
00:17:56,320 --> 00:18:03,340
device securely sometimes people send

373
00:18:00,820 --> 00:18:06,250
that just over a<font color="#E5E5E5"> plain text like a TCP</font>

374
00:18:03,340 --> 00:18:07,810
connection or something but it's you

375
00:18:06,250 --> 00:18:09,640
<font color="#CCCCCC">know a little bit</font><font color="#E5E5E5"> more robust if that's</font>

376
00:18:07,810 --> 00:18:11,980
secured somehow have that transport<font color="#E5E5E5"> all</font>

377
00:18:09,640 --> 00:18:13,990
<font color="#E5E5E5">that so one thing that we've kind of</font>

378
00:18:11,980 --> 00:18:17,410
thought a little<font color="#E5E5E5"> bit about and I have a</font>

379
00:18:13,990 --> 00:18:21,910
little<font color="#E5E5E5"> bit is using MQTT as the secure</font>

380
00:18:17,410 --> 00:18:24,190
transport of that bundle MQTT is a

381
00:18:21,910 --> 00:18:27,510
message queuing technology<font color="#CCCCCC"> it's a</font>

382
00:18:24,190 --> 00:18:27,510
<font color="#CCCCCC">publish-subscribe</font><font color="#E5E5E5"> free</font><font color="#CCCCCC"> look</font>

383
00:18:28,289 --> 00:18:37,779
so this is<font color="#E5E5E5"> a simple diagram kind of how</font>

384
00:18:30,639 --> 00:18:40,539
an MQTT setup would work so we have our

385
00:18:37,779 --> 00:18:42,339
film or server we have an MQTT broker

386
00:18:40,539 --> 00:18:46,299
and these<font color="#E5E5E5"> are</font><font color="#CCCCCC"> our end devices which</font>

387
00:18:42,339 --> 00:18:49,239
would<font color="#E5E5E5"> also be acting as MQTT clients the</font>

388
00:18:46,299 --> 00:18:52,269
<font color="#CCCCCC">clients subscribe to a thread or topic</font>

389
00:18:49,239 --> 00:18:54,669
so for<font color="#E5E5E5"> example like if i have an iphone</font>

390
00:18:52,269 --> 00:18:58,210
there could be iphone 6<font color="#E5E5E5"> update thread</font><font color="#CCCCCC"> or</font>

391
00:18:54,669 --> 00:19:00,879
<font color="#E5E5E5">topic my server is publishing them to</font>

392
00:18:58,210 --> 00:19:03,879
that topic so it would push an update to

393
00:19:00,879 --> 00:19:05,830
the iphone 6 update topic that<font color="#E5E5E5"> would get</font>

394
00:19:03,879 --> 00:19:07,718
propagated through the broker and all

395
00:19:05,830 --> 00:19:09,460
the clients would pull it down so that

396
00:19:07,719 --> 00:19:13,029
have you done over<font color="#E5E5E5"> a secure link like</font>

397
00:19:09,460 --> 00:19:14,679
ssl/tls and then your clients would

398
00:19:13,029 --> 00:19:16,719
still be doing<font color="#E5E5E5"> that signing and</font>

399
00:19:14,679 --> 00:19:19,679
verifying between the client server that

400
00:19:16,719 --> 00:19:21,519
<font color="#CCCCCC">we looked at</font><font color="#E5E5E5"> on the previous two slides</font>

401
00:19:19,679 --> 00:19:23,669
so<font color="#CCCCCC"> that's this kind of a rough outline</font>

402
00:19:21,519 --> 00:19:28,259
of how one<font color="#CCCCCC"> of those systems might work</font>

403
00:19:23,669 --> 00:19:28,259
there's various implementations of that

404
00:19:30,599 --> 00:19:34,960
so the<font color="#E5E5E5"> first section now is going to</font>

405
00:19:33,549 --> 00:19:36,729
kind<font color="#E5E5E5"> of apply to all the three that we</font>

406
00:19:34,960 --> 00:19:38,889
<font color="#E5E5E5">just talked</font><font color="#CCCCCC"> about so that's cryptography</font>

407
00:19:36,729 --> 00:19:43,659
how do<font color="#E5E5E5"> you use</font><font color="#CCCCCC"> it effectively and make</font>

408
00:19:38,889 --> 00:19:45,008
<font color="#CCCCCC">sure you're using</font><font color="#E5E5E5"> it securely the first</font>

409
00:19:43,659 --> 00:19:47,469
thing<font color="#E5E5E5"> to talk about is random number</font>

410
00:19:45,009 --> 00:19:49,419
generation so just like<font color="#E5E5E5"> I said the</font>

411
00:19:47,469 --> 00:19:50,940
private keys are kind of important<font color="#CCCCCC"> for</font>

412
00:19:49,419 --> 00:19:54,219
the rest of the<font color="#CCCCCC"> security of your system</font>

413
00:19:50,940 --> 00:19:56,289
your whole crypto system security or at

414
00:19:54,219 --> 00:19:59,859
least part of it is dependent on true

415
00:19:56,289 --> 00:20:02,830
random numbers so you need<font color="#E5E5E5"> to generate</font>

416
00:19:59,859 --> 00:20:04,210
<font color="#E5E5E5">your randomness but that can be very</font>

417
00:20:02,830 --> 00:20:07,658
hard on an embedded device especially

418
00:20:04,210 --> 00:20:09,309
when you don't have<font color="#E5E5E5"> a lot going on I've</font>

419
00:20:07,659 --> 00:20:12,339
<font color="#E5E5E5">seen a lot of ways that</font><font color="#CCCCCC"> people have done</font>

420
00:20:09,309 --> 00:20:15,099
it badly her poorly sometimes<font color="#E5E5E5"> people</font>

421
00:20:12,339 --> 00:20:17,289
forget<font color="#E5E5E5"> to take test code out or they</font>

422
00:20:15,099 --> 00:20:19,629
just code a constant number<font color="#E5E5E5"> to return as</font>

423
00:20:17,289 --> 00:20:22,679
a random<font color="#E5E5E5"> number which has 20 randomness</font>

424
00:20:19,629 --> 00:20:26,349
that I've<font color="#E5E5E5"> seen people use clock source</font>

425
00:20:22,679 --> 00:20:28,359
which might seem random but if you<font color="#CCCCCC"> think</font>

426
00:20:26,349 --> 00:20:29,950
about it the time that you power will

427
00:20:28,359 --> 00:20:31,269
reset your device<font color="#E5E5E5"> to the time where you</font>

428
00:20:29,950 --> 00:20:33,969
get to that same<font color="#E5E5E5"> point in your code</font>

429
00:20:31,269 --> 00:20:36,159
where you doing a crypto operation is

430
00:20:33,969 --> 00:20:38,960
probably somewhat fairly<font color="#E5E5E5"> constant</font>

431
00:20:36,159 --> 00:20:41,100
there's not<font color="#E5E5E5"> a lot of random listen</font>

432
00:20:38,960 --> 00:20:43,680
some people<font color="#E5E5E5"> also try to use harbor</font>

433
00:20:41,100 --> 00:20:46,260
serial numbers<font color="#E5E5E5"> Mac numbers which may</font>

434
00:20:43,680 --> 00:20:47,910
<font color="#CCCCCC">seem kind</font><font color="#E5E5E5"> of random but they're probably</font>

435
00:20:46,260 --> 00:20:50,520
predictable if you can figure out the

436
00:20:47,910 --> 00:20:57,480
sequence of device device manufacturing

437
00:20:50,520 --> 00:20:58,950
I just some quick terminology before we

438
00:20:57,480 --> 00:21:01,560
keep talking about<font color="#E5E5E5"> random numbers</font>

439
00:20:58,950 --> 00:21:03,780
there's a<font color="#CCCCCC"> trng is a true random number</font>

440
00:21:01,560 --> 00:21:06,540
generator that's a generator<font color="#E5E5E5"> that's</font>

441
00:21:03,780 --> 00:21:09,210
getting entropy from from your

442
00:21:06,540 --> 00:21:12,510
environment so that could be like ring

443
00:21:09,210 --> 00:21:15,720
oscillators environmental noise noise on

444
00:21:12,510 --> 00:21:18,540
the chip a<font color="#CCCCCC"> PRNG is a pseudo-random</font>

445
00:21:15,720 --> 00:21:21,030
number generator this is a cryptography

446
00:21:18,540 --> 00:21:23,670
algorithm that mimics generating

447
00:21:21,030 --> 00:21:26,250
randomness it's a lot faster usually

448
00:21:23,670 --> 00:21:30,840
than a<font color="#CCCCCC"> trng and</font><font color="#E5E5E5"> you need to seed it with</font>

449
00:21:26,250 --> 00:21:32,340
entropy from the trng typically another

450
00:21:30,840 --> 00:21:34,290
thing you'll hear is drbg that's

451
00:21:32,340 --> 00:21:37,320
deterministic random bit generator and

452
00:21:34,290 --> 00:21:40,200
that's just<font color="#E5E5E5"> the kind of the see a</font><font color="#CCCCCC"> vp and</font>

453
00:21:37,320 --> 00:21:46,919
<font color="#CCCCCC">NIST's term for prng so those</font><font color="#E5E5E5"> are</font>

454
00:21:40,200 --> 00:21:48,570
equivalent<font color="#E5E5E5"> to those last year so you</font>

455
00:21:46,920 --> 00:21:51,510
want to verify<font color="#E5E5E5"> your energy is seated</font>

456
00:21:48,570 --> 00:21:53,159
with a good entropy source the

457
00:21:51,510 --> 00:21:56,460
oftentimes the best story on<font color="#E5E5E5"> embedded</font>

458
00:21:53,160 --> 00:21:58,170
devices is to use aren't a hard round

459
00:21:56,460 --> 00:22:01,080
rubber generator built into the silicon

460
00:21:58,170 --> 00:22:03,330
and it's really<font color="#E5E5E5"> becoming more prevalent</font>

461
00:22:01,080 --> 00:22:05,790
but these are found in embedded devices

462
00:22:03,330 --> 00:22:08,310
today these<font color="#E5E5E5"> are some</font><font color="#CCCCCC"> examples that I've</font>

463
00:22:05,790 --> 00:22:10,920
worked<font color="#CCCCCC"> with in the past it's all these</font>

464
00:22:08,310 --> 00:22:16,139
have some form of hardware<font color="#CCCCCC"> orangie in</font>

465
00:22:10,920 --> 00:22:17,640
the silicon alternatively another thing

466
00:22:16,140 --> 00:22:20,280
<font color="#CCCCCC">I recently read about you could get her</font>

467
00:22:17,640 --> 00:22:22,470
from a remote server and<font color="#CCCCCC"> I was looking</font>

468
00:22:20,280 --> 00:22:24,470
<font color="#E5E5E5">at this white wooden at random it's a</font>

469
00:22:22,470 --> 00:22:26,850
library that<font color="#CCCCCC"> allows you to</font><font color="#E5E5E5"> get</font>

470
00:22:24,470 --> 00:22:29,460
randomness across the network and

471
00:22:26,850 --> 00:22:34,740
there's<font color="#E5E5E5"> actually like a quantum based</font>

472
00:22:29,460 --> 00:22:37,560
solution you want to make sure your key

473
00:22:34,740 --> 00:22:41,850
links are adequate the list in this

474
00:22:37,560 --> 00:22:45,290
special publication 800-53 mendations

475
00:22:41,850 --> 00:22:47,790
one of them being recommended key sizes

476
00:22:45,290 --> 00:22:50,580
so this you can see there's a level<font color="#E5E5E5"> bits</font>

477
00:22:47,790 --> 00:22:51,000
of security and then it'll allow you to

478
00:22:50,580 --> 00:22:52,590
match up

479
00:22:51,000 --> 00:22:55,260
the right key length across all your

480
00:22:52,590 --> 00:22:57,090
<font color="#E5E5E5">different types of algorithms and the</font>

481
00:22:55,260 --> 00:22:58,770
effective level of your bits and

482
00:22:57,090 --> 00:23:01,560
securities only as good as your lowest

483
00:22:58,770 --> 00:23:03,660
algorithm or your lowest key length so

484
00:23:01,560 --> 00:23:06,750
if you were<font color="#E5E5E5"> trying to shoot for 128 bits</font>

485
00:23:03,660 --> 00:23:08,220
security but you're using shot one you

486
00:23:06,750 --> 00:23:14,970
would effectively only have 80 bits of

487
00:23:08,220 --> 00:23:18,300
security another kind of<font color="#E5E5E5"> gold references</font>

488
00:23:14,970 --> 00:23:20,370
this key links<font color="#CCCCCC"> calm it it gives you</font>

489
00:23:18,300 --> 00:23:22,290
recommended key sizes across all these

490
00:23:20,370 --> 00:23:25,110
different working groups or

491
00:23:22,290 --> 00:23:26,100
organizations sometimes<font color="#CCCCCC"> I can change</font>

492
00:23:25,110 --> 00:23:35,040
depending<font color="#E5E5E5"> on what area of the world</font>

493
00:23:26,100 --> 00:23:37,320
you're in another thing when you're

494
00:23:35,040 --> 00:23:38,909
tuning crypto keep in<font color="#CCCCCC"> mind that</font>

495
00:23:37,320 --> 00:23:42,840
algorithms perform differently in

496
00:23:38,910 --> 00:23:46,560
performance so here you can see HD 128

497
00:23:42,840 --> 00:23:48,149
stream cipher is way faster than<font color="#E5E5E5"> dark</font>

498
00:23:46,560 --> 00:23:54,720
for is the next stream cipher on this

499
00:23:48,150 --> 00:23:56,970
graph or AES is faster than triple dose

500
00:23:54,720 --> 00:23:59,250
for example so I'm an embedded device

501
00:23:56,970 --> 00:24:00,930
for your processors are not quite as

502
00:23:59,250 --> 00:24:02,940
fast as you<font color="#E5E5E5"> know you might expect in an</font>

503
00:24:00,930 --> 00:24:05,700
enterprise environment choices here make

504
00:24:02,940 --> 00:24:08,010
a pretty big<font color="#CCCCCC"> difference you want to</font>

505
00:24:05,700 --> 00:24:09,690
still use secure algorithms some of

506
00:24:08,010 --> 00:24:13,740
these are<font color="#E5E5E5"> known as weak weak ciphers or</font>

507
00:24:09,690 --> 00:24:18,780
weak algorithms like arc for our c4 is

508
00:24:13,740 --> 00:24:20,940
not recommended to use any<font color="#E5E5E5"> longer and</font>

509
00:24:18,780 --> 00:24:24,330
again now many vendors are offering this

510
00:24:20,940 --> 00:24:27,000
in in silicon so typically<font color="#E5E5E5"> you'll find</font>

511
00:24:24,330 --> 00:24:29,550
block ciphers and hash functions in many

512
00:24:27,000 --> 00:24:33,150
of the the part their processors and

513
00:24:29,550 --> 00:24:34,530
chips from some of these companies these

514
00:24:33,150 --> 00:24:37,350
are<font color="#E5E5E5"> some examples</font><font color="#CCCCCC"> of those that you</font>

515
00:24:34,530 --> 00:24:44,960
might typically find in silicon so<font color="#E5E5E5"> AES</font>

516
00:24:37,350 --> 00:24:47,129
des Triple DES md5<font color="#E5E5E5"> sha1 shot to you and</font>

517
00:24:44,960 --> 00:24:49,110
performance<font color="#E5E5E5"> also very like I was</font>

518
00:24:47,130 --> 00:24:51,450
mentioning the hardware's is a lot

519
00:24:49,110 --> 00:24:53,699
faster<font color="#E5E5E5"> usually three to ten times faster</font>

520
00:24:51,450 --> 00:24:56,640
than software crypto so this is<font color="#CCCCCC"> a</font>

521
00:24:53,700 --> 00:24:59,920
benchmark i did on a microchip pic 32 MZ

522
00:24:56,640 --> 00:25:03,010
platform here the the<font color="#E5E5E5"> blue</font>

523
00:24:59,920 --> 00:25:04,600
is suffer cryptography done in this was

524
00:25:03,010 --> 00:25:08,220
an<font color="#CCCCCC"> archival</font><font color="#E5E5E5"> library and then the red is</font>

525
00:25:04,600 --> 00:25:10,959
<font color="#E5E5E5">hard the hardware crypto being done and</font>

526
00:25:08,220 --> 00:25:20,710
then here I also did<font color="#CCCCCC"> it again this</font><font color="#E5E5E5"> is on</font>

527
00:25:10,960 --> 00:25:22,390
at nxp previously freescale k60 so that

528
00:25:20,710 --> 00:25:24,730
was my quick overview kind of some of

529
00:25:22,390 --> 00:25:28,090
the areas of security scuri is a huge

530
00:25:24,730 --> 00:25:29,170
broad field and so it's good to<font color="#E5E5E5"> start</font>

531
00:25:28,090 --> 00:25:31,179
out with<font color="#E5E5E5"> an overview and then kind of</font>

532
00:25:29,170 --> 00:25:35,200
<font color="#E5E5E5">drill down into specific areas if you</font>

533
00:25:31,180 --> 00:25:38,350
have interest in them so this is<font color="#CCCCCC"> my my</font>

534
00:25:35,200 --> 00:25:41,020
key takeaways for you guys for today use

535
00:25:38,350 --> 00:25:43,419
a secure protocol like SSL and TLS<font color="#CCCCCC"> for</font>

536
00:25:41,020 --> 00:25:47,830
<font color="#CCCCCC">for data in transit I don't use plain</font>

537
00:25:43,420 --> 00:25:49,450
text I custom protocol design is hard I

538
00:25:47,830 --> 00:25:51,850
encourage you not to try to design your

539
00:25:49,450 --> 00:25:54,030
own protocols unless<font color="#E5E5E5"> you're you have a</font>

540
00:25:51,850 --> 00:25:59,159
very strong backing in cryptography and

541
00:25:54,030 --> 00:26:01,240
security encrypt important data arrest

542
00:25:59,160 --> 00:26:05,350
and be concerned where your keys are

543
00:26:01,240 --> 00:26:09,460
stored and and how they're stored use

544
00:26:05,350 --> 00:26:11,139
<font color="#E5E5E5">Hardware key storage when you can the</font>

545
00:26:09,460 --> 00:26:13,870
options are getting cheaper<font color="#E5E5E5"> and more</font>

546
00:26:11,140 --> 00:26:16,720
much more plentiful prefer using

547
00:26:13,870 --> 00:26:19,120
stronger key links and referenced the

548
00:26:16,720 --> 00:26:20,530
sum of those those things that those

549
00:26:19,120 --> 00:26:24,550
bodies have already put together<font color="#E5E5E5"> for you</font>

550
00:26:20,530 --> 00:26:26,320
as the guidance for more updates I do

551
00:26:24,550 --> 00:26:27,639
pose a real attack vector we don't want

552
00:26:26,320 --> 00:26:29,550
someone taking control of our devices

553
00:26:27,640 --> 00:26:33,580
just<font color="#E5E5E5"> by flashing a different firmware</font>

554
00:26:29,550 --> 00:26:35,770
onto<font color="#E5E5E5"> the</font><font color="#CCCCCC"> vice if it's not intended sign</font>

555
00:26:33,580 --> 00:26:37,540
it and cook the updates and think about

556
00:26:35,770 --> 00:26:39,100
how your trance transferring from<font color="#E5E5E5"> the</font>

557
00:26:37,540 --> 00:26:43,090
<font color="#E5E5E5">client to the server or from the server</font>

558
00:26:39,100 --> 00:26:46,929
to the client I use true randomness<font color="#E5E5E5"> to</font>

559
00:26:43,090 --> 00:26:49,060
seed your crypto algorithms use secure

560
00:26:46,930 --> 00:26:50,680
cryptography and keep an eye on how the

561
00:26:49,060 --> 00:26:53,530
vulnerabilities are coming out over the

562
00:26:50,680 --> 00:26:55,270
years you don't want you<font color="#E5E5E5"> know you want</font>

563
00:26:53,530 --> 00:26:57,190
to<font color="#E5E5E5"> be able to the flexibility to change</font>

564
00:26:55,270 --> 00:27:00,850
from one I'll go to the other if

565
00:26:57,190 --> 00:27:02,920
something becomes vulnerable yeah don't

566
00:27:00,850 --> 00:27:05,139
be afraid to ask<font color="#CCCCCC"> an expert</font><font color="#E5E5E5"> there's a lot</font>

567
00:27:02,920 --> 00:27:06,580
<font color="#CCCCCC">of people</font><font color="#E5E5E5"> who do this for a living and</font>

568
00:27:05,140 --> 00:27:09,820
all these different<font color="#E5E5E5"> types of areas it's</font>

569
00:27:06,580 --> 00:27:11,919
a very complex field and there's<font color="#CCCCCC"> plenty</font>

570
00:27:09,820 --> 00:27:13,149
of people<font color="#E5E5E5"> to help and then most</font>

571
00:27:11,920 --> 00:27:15,669
importantly have fun

572
00:27:13,149 --> 00:27:17,978
I know it's sometimes it's kind of a

573
00:27:15,669 --> 00:27:19,960
looming topic that it's hard to approach

574
00:27:17,979 --> 00:27:23,919
but<font color="#E5E5E5"> it really just takes a little time</font>

575
00:27:19,960 --> 00:27:26,080
time to dig in so that's all<font color="#E5E5E5"> I</font><font color="#CCCCCC"> have for</font>

576
00:27:23,919 --> 00:27:27,390
you today thanks<font color="#E5E5E5"> for listening and again</font>

577
00:27:26,080 --> 00:27:31,389
for coming

578
00:27:27,390 --> 00:27:49,200
[Applause]

579
00:27:31,390 --> 00:27:49,200
[Music]

580
00:28:08,760 --> 00:28:11,829
[Music]

581
00:28:15,950 --> 00:28:47,509
[Music]

582
00:28:51,600 --> 00:28:54,659
[Music]

583
00:29:12,200 --> 00:29:15,249
[Music]

584
00:29:33,200 --> 00:30:07,400
[Music]

