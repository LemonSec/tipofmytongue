1
00:00:00,000 --> 00:00:08,400
[Music]

2
00:00:08,400 --> 00:00:09,440
hi there

3
00:00:09,440 --> 00:00:11,840
welcome to week four of embedded cereal

4
00:00:11,840 --> 00:00:14,400
buses this is it the final week

5
00:00:14,400 --> 00:00:16,160
where we're gonna bring it all together

6
00:00:16,160 --> 00:00:17,440
um i am

7
00:00:17,440 --> 00:00:19,279
alexander rousell once again for the

8
00:00:19,279 --> 00:00:20,480
last time

9
00:00:20,480 --> 00:00:23,119
there's my email on screen once again if

10
00:00:23,119 --> 00:00:24,640
you have any questions

11
00:00:24,640 --> 00:00:26,720
you can email me but you're also

12
00:00:26,720 --> 00:00:28,560
encouraged to post the questions to the

13
00:00:28,560 --> 00:00:30,480
comments page of the class

14
00:00:30,480 --> 00:00:33,040
uh page on hackadaytaio so that other

15
00:00:33,040 --> 00:00:35,440
people can see the questions

16
00:00:35,440 --> 00:00:38,800
and therefore the answers to them so

17
00:00:38,800 --> 00:00:41,200
i just want to go over some errata

18
00:00:41,200 --> 00:00:43,360
quickly some mistakes that were made in

19
00:00:43,360 --> 00:00:45,360
the past few weeks

20
00:00:45,360 --> 00:00:48,160
i squared c peripherals do have fets

21
00:00:48,160 --> 00:00:48,960
that connect

22
00:00:48,960 --> 00:00:52,480
to scl in the first week i showed in the

23
00:00:52,480 --> 00:00:53,840
schematic that they don't

24
00:00:53,840 --> 00:00:55,920
not all of them do but this is how they

25
00:00:55,920 --> 00:00:57,680
do clock stretching

26
00:00:57,680 --> 00:01:00,320
for i squared c devices that implement

27
00:01:00,320 --> 00:01:02,879
clock stretching

28
00:01:02,879 --> 00:01:04,879
this is a feature that some peripherals

29
00:01:04,879 --> 00:01:08,080
use to tell the controller to wait

30
00:01:08,080 --> 00:01:10,479
they're not ready to send data yet

31
00:01:10,479 --> 00:01:12,400
they're processing or whatever

32
00:01:12,400 --> 00:01:14,799
this is an alternate option to how we

33
00:01:14,799 --> 00:01:16,000
implemented it

34
00:01:16,000 --> 00:01:18,479
by pulling the device to see if it's

35
00:01:18,479 --> 00:01:19,439
ready

36
00:01:19,439 --> 00:01:21,360
you can also have it hold the clock line

37
00:01:21,360 --> 00:01:23,600
low until it's ready

38
00:01:23,600 --> 00:01:24,960
of course that prevents you from doing

39
00:01:24,960 --> 00:01:26,960
any other communication

40
00:01:26,960 --> 00:01:29,680
and you know typically i find that the

41
00:01:29,680 --> 00:01:30,799
polling

42
00:01:30,799 --> 00:01:33,600
method does work better but yes some ice

43
00:01:33,600 --> 00:01:34,960
cream c peripherals do have

44
00:01:34,960 --> 00:01:38,560
fets connected to scl another mistake i

45
00:01:38,560 --> 00:01:39,280
made

46
00:01:39,280 --> 00:01:41,759
unfortunately the sht 31 is different

47
00:01:41,759 --> 00:01:43,840
from the sht21

48
00:01:43,840 --> 00:01:46,079
the board that we linked for you to buy

49
00:01:46,079 --> 00:01:47,119
to do

50
00:01:47,119 --> 00:01:49,280
some of the demos in this course from

51
00:01:49,280 --> 00:01:50,479
adafruit

52
00:01:50,479 --> 00:01:52,000
unfortunately has a different command

53
00:01:52,000 --> 00:01:54,880
set that was already resolved

54
00:01:54,880 --> 00:01:57,680
the git branch in week two was

55
00:01:57,680 --> 00:01:59,439
specifically set up so that people with

56
00:01:59,439 --> 00:02:03,439
the shd 31 could still use the code

57
00:02:03,439 --> 00:02:06,719
this was my mistake the data sheet i had

58
00:02:06,719 --> 00:02:08,959
was for the 11 and the 21 and i assume

59
00:02:08,959 --> 00:02:11,038
that 31 was in the same family and

60
00:02:11,038 --> 00:02:12,000
therefore would have

61
00:02:12,000 --> 00:02:14,080
basically the same registered layout but

62
00:02:14,080 --> 00:02:17,520
it turns out it's completely different

63
00:02:17,680 --> 00:02:20,319
but the code is there for you to look at

64
00:02:20,319 --> 00:02:22,000
if you need it

65
00:02:22,000 --> 00:02:23,599
another question that came up during a

66
00:02:23,599 --> 00:02:25,760
question period was um

67
00:02:25,760 --> 00:02:28,879
about one wire and software delays and

68
00:02:28,879 --> 00:02:30,800
the only reason i did it experimentally

69
00:02:30,800 --> 00:02:32,000
is because

70
00:02:32,000 --> 00:02:34,640
i typically will calculate roughly what

71
00:02:34,640 --> 00:02:36,160
one microsecond of delay

72
00:02:36,160 --> 00:02:38,640
should be and then i'll multiply that

73
00:02:38,640 --> 00:02:40,239
out as needed for

74
00:02:40,239 --> 00:02:42,720
uh for one wire delays but then of

75
00:02:42,720 --> 00:02:43,840
course you're going to have to tweak

76
00:02:43,840 --> 00:02:45,200
that a little bit

77
00:02:45,200 --> 00:02:48,879
because it takes the chip time to switch

78
00:02:48,879 --> 00:02:50,800
gpios from high to low there's other

79
00:02:50,800 --> 00:02:52,400
things that can slow it down a little

80
00:02:52,400 --> 00:02:55,280
bit so that's why

81
00:02:55,360 --> 00:02:58,000
you can do it mathematically but i tend

82
00:02:58,000 --> 00:02:58,800
to sort of

83
00:02:58,800 --> 00:03:01,519
start with some mathematical calculation

84
00:03:01,519 --> 00:03:02,080
of what

85
00:03:02,080 --> 00:03:04,879
one microsecond would be multiply it and

86
00:03:04,879 --> 00:03:06,879
then tweak it as needed to get exactly

87
00:03:06,879 --> 00:03:07,840
the right

88
00:03:07,840 --> 00:03:10,560
lengths basically you want to see it

89
00:03:10,560 --> 00:03:11,920
decoding properly

90
00:03:11,920 --> 00:03:14,560
in the logic analyzer software once it's

91
00:03:14,560 --> 00:03:15,599
decoding there

92
00:03:15,599 --> 00:03:17,519
you know that it'll be according to the

93
00:03:17,519 --> 00:03:19,840
standard and it should work with any one

94
00:03:19,840 --> 00:03:21,920
wired device

95
00:03:21,920 --> 00:03:24,080
there were a few small issues here and

96
00:03:24,080 --> 00:03:25,599
there in the code

97
00:03:25,599 --> 00:03:27,840
the git lab repository always has the

98
00:03:27,840 --> 00:03:30,000
latest working code

99
00:03:30,000 --> 00:03:33,159
so make sure to check that out it's at

100
00:03:33,159 --> 00:03:34,959
getlab.com

101
00:03:34,959 --> 00:03:38,760
frozen electronics slash uh hackadayuse

102
00:03:38,760 --> 00:03:40,480
serialbuses.git i believe but don't

103
00:03:40,480 --> 00:03:42,640
quote me on that it's on the class page

104
00:03:42,640 --> 00:03:46,159
on hackaday.io it's on the left hand

105
00:03:46,159 --> 00:03:47,120
column you'll see

106
00:03:47,120 --> 00:03:48,959
a link to the gitlab source code

107
00:03:48,959 --> 00:03:51,120
repository that should take you right to

108
00:03:51,120 --> 00:03:52,640
it

109
00:03:52,640 --> 00:03:55,200
any other errors that come up because

110
00:03:55,200 --> 00:03:57,360
i'm not perfect far from it uh

111
00:03:57,360 --> 00:04:00,000
they'll be corrected on the course page

112
00:04:00,000 --> 00:04:02,000
these videos might also be updated in

113
00:04:02,000 --> 00:04:04,000
the future with improved information or

114
00:04:04,000 --> 00:04:05,760
corrected errors

115
00:04:05,760 --> 00:04:07,760
so check back to see if there's improved

116
00:04:07,760 --> 00:04:09,680
versions of these videos or keep an eye

117
00:04:09,680 --> 00:04:11,120
on the course page

118
00:04:11,120 --> 00:04:12,959
if any errors come up that's where they

119
00:04:12,959 --> 00:04:15,280
will be put

120
00:04:15,280 --> 00:04:17,279
so this is our final week together this

121
00:04:17,279 --> 00:04:19,120
week we're going to sort of wrap things

122
00:04:19,120 --> 00:04:20,320
up with a

123
00:04:20,320 --> 00:04:22,479
small project that combines everything

124
00:04:22,479 --> 00:04:24,880
we've learned so far

125
00:04:24,880 --> 00:04:28,160
we're going to be taking data from

126
00:04:28,160 --> 00:04:30,000
both one wire and i squared c and then

127
00:04:30,000 --> 00:04:31,199
displaying it

128
00:04:31,199 --> 00:04:34,400
on an i squared c enabled lcd screen

129
00:04:34,400 --> 00:04:36,720
these are very cheap and ubiquitous and

130
00:04:36,720 --> 00:04:39,360
easy to get on ebay if you want to

131
00:04:39,360 --> 00:04:42,400
actually run this code um

132
00:04:42,400 --> 00:04:44,400
at the end of this we're going to do an

133
00:04:44,400 --> 00:04:46,000
optional simple

134
00:04:46,000 --> 00:04:49,759
test that shows it's just a way for you

135
00:04:49,759 --> 00:04:51,440
to self-evaluate how well

136
00:04:51,440 --> 00:04:53,759
you absorb the material of course

137
00:04:53,759 --> 00:04:55,120
there's not going to be any grades or

138
00:04:55,120 --> 00:04:57,199
homework or anything

139
00:04:57,199 --> 00:04:59,280
if you have trouble answering the

140
00:04:59,280 --> 00:05:01,360
questions then you know go back and

141
00:05:01,360 --> 00:05:04,560
refer to things that you need to but

142
00:05:04,560 --> 00:05:04,880
it's

143
00:05:04,880 --> 00:05:07,360
you know again the most important skill

144
00:05:07,360 --> 00:05:08,960
is being able to find information

145
00:05:08,960 --> 00:05:10,960
quickly and not necessarily having

146
00:05:10,960 --> 00:05:12,560
everything memorized

147
00:05:12,560 --> 00:05:14,160
so it's a fallacy to think that if you

148
00:05:14,160 --> 00:05:15,919
don't do well on this test that you

149
00:05:15,919 --> 00:05:18,080
didn't learn anything

150
00:05:18,080 --> 00:05:19,840
once the ideas are in your head and you

151
00:05:19,840 --> 00:05:21,440
find the information the second time

152
00:05:21,440 --> 00:05:23,120
around you'll be able to absorb it

153
00:05:23,120 --> 00:05:24,960
much more quickly because you've already

154
00:05:24,960 --> 00:05:27,199
done it once so

155
00:05:27,199 --> 00:05:29,120
we're also going to touch on using logic

156
00:05:29,120 --> 00:05:30,240
analyzers

157
00:05:30,240 --> 00:05:31,919
an extremely important tool if you're

158
00:05:31,919 --> 00:05:33,919
working with embedded serial buses

159
00:05:33,919 --> 00:05:36,560
having a logic analyzer is priceless it

160
00:05:36,560 --> 00:05:37,440
makes the job

161
00:05:37,440 --> 00:05:41,199
so much easier so first let's talk about

162
00:05:41,199 --> 00:05:42,960
adding the lcd

163
00:05:42,960 --> 00:05:46,240
so standard character lcds

164
00:05:46,240 --> 00:05:49,280
come in a variety of sizes 16 by 2

165
00:05:49,280 --> 00:05:52,479
20 by two 20 by four and they use

166
00:05:52,479 --> 00:05:54,880
a parallel interface for writing to the

167
00:05:54,880 --> 00:05:56,319
screen now

168
00:05:56,319 --> 00:05:57,600
for a lot of reasons you might not want

169
00:05:57,600 --> 00:05:59,600
to use a parallel interface and pin

170
00:05:59,600 --> 00:06:03,039
count is usually one of those reasons so

171
00:06:03,039 --> 00:06:07,680
we can get these i squared c backpacks

172
00:06:07,680 --> 00:06:10,319
adafruit sells them and of course you

173
00:06:10,319 --> 00:06:12,080
can also buy cheaper versions these

174
00:06:12,080 --> 00:06:13,840
things have been around for a long time

175
00:06:13,840 --> 00:06:16,560
uh on the usual suspects ebay and amazon

176
00:06:16,560 --> 00:06:18,400
and such

177
00:06:18,400 --> 00:06:20,880
they essentially add an i squared c gpio

178
00:06:20,880 --> 00:06:21,919
expander

179
00:06:21,919 --> 00:06:25,520
um they convert the lcd interface into

180
00:06:25,520 --> 00:06:27,120
an i squared c interface

181
00:06:27,120 --> 00:06:29,520
there's also spi versions available that

182
00:06:29,520 --> 00:06:31,280
essentially use a shift register

183
00:06:31,280 --> 00:06:34,560
chip this moves a lot of the complexity

184
00:06:34,560 --> 00:06:36,560
from the hardware into the software but

185
00:06:36,560 --> 00:06:37,840
it reduces the pin

186
00:06:37,840 --> 00:06:40,560
count quite a bit uh you need typically

187
00:06:40,560 --> 00:06:41,440
a minimum of

188
00:06:41,440 --> 00:06:43,440
seven pins to connect to the parallel

189
00:06:43,440 --> 00:06:44,560
interface

190
00:06:44,560 --> 00:06:48,319
um and this will reduce it down to two

191
00:06:48,319 --> 00:06:49,680
for i squared c

192
00:06:49,680 --> 00:06:52,720
so that complexity in the software is

193
00:06:52,720 --> 00:06:54,800
often a worthy trade-off for something

194
00:06:54,800 --> 00:06:58,240
uh reducing the pin count by that much

195
00:06:58,240 --> 00:07:00,000
we're going to be essentially bitbanging

196
00:07:00,000 --> 00:07:02,639
the lcd via i squared c gpio

197
00:07:02,639 --> 00:07:06,160
so hopefully that's as clear as mud

198
00:07:06,240 --> 00:07:08,639
so here's a picture of one of these

199
00:07:08,639 --> 00:07:09,840
backpacks

200
00:07:09,840 --> 00:07:13,120
and attached to an lcd

201
00:07:13,120 --> 00:07:14,960
so it basically solders directly to the

202
00:07:14,960 --> 00:07:17,520
pins along the top there

203
00:07:17,520 --> 00:07:20,800
we've got the main i squared c chip on

204
00:07:20,800 --> 00:07:23,360
there is the pcf 8574

205
00:07:23,360 --> 00:07:26,080
this is a fairly old chip which you can

206
00:07:26,080 --> 00:07:26,560
tell

207
00:07:26,560 --> 00:07:29,759
based on the prefix pcf that was the

208
00:07:29,759 --> 00:07:32,000
prefix used when phillips was still the

209
00:07:32,000 --> 00:07:32,720
one

210
00:07:32,720 --> 00:07:35,919
uh maintaining the i squared c standard

211
00:07:35,919 --> 00:07:38,639
uh before it was bought out by nxp and

212
00:07:38,639 --> 00:07:39,520
uh

213
00:07:39,520 --> 00:07:41,440
it's a very very simple chip we'll get

214
00:07:41,440 --> 00:07:43,120
into the details about it

215
00:07:43,120 --> 00:07:45,199
it has a contrast potentiometer which is

216
00:07:45,199 --> 00:07:46,800
a really nice touch that's something

217
00:07:46,800 --> 00:07:47,440
that

218
00:07:47,440 --> 00:07:49,360
you need to provide anyway if you're

219
00:07:49,360 --> 00:07:51,039
driving an lcd

220
00:07:51,039 --> 00:07:52,560
there's a few pins on there that you

221
00:07:52,560 --> 00:07:54,879
need to connect a resistor between

222
00:07:54,879 --> 00:07:56,879
and depending on the value of the

223
00:07:56,879 --> 00:07:58,639
resistor it changes the contrast of the

224
00:07:58,639 --> 00:07:59,599
lcd

225
00:07:59,599 --> 00:08:01,440
so by having that potentiometer on the

226
00:08:01,440 --> 00:08:02,720
back you can quickly just

227
00:08:02,720 --> 00:08:04,879
adjust it to get the correct contrast

228
00:08:04,879 --> 00:08:07,840
and then it's set which is really nice

229
00:08:07,840 --> 00:08:09,520
it's got the i squared c connections on

230
00:08:09,520 --> 00:08:10,879
the side there

231
00:08:10,879 --> 00:08:12,960
all it needs is power ground and then

232
00:08:12,960 --> 00:08:16,720
the two i squared c lines sda and scl

233
00:08:16,720 --> 00:08:18,879
we've got some i squared c address

234
00:08:18,879 --> 00:08:20,800
selectors which is really nice so we can

235
00:08:20,800 --> 00:08:24,560
change the address of the pcf 8574

236
00:08:24,560 --> 00:08:26,800
in case you want to have multiples of

237
00:08:26,800 --> 00:08:29,440
this chip on the same bus

238
00:08:29,440 --> 00:08:32,240
you can add resistors there and by

239
00:08:32,240 --> 00:08:34,559
changing the values

240
00:08:34,559 --> 00:08:36,479
of which of those pins you pull to

241
00:08:36,479 --> 00:08:38,320
ground it'll change the address of the

242
00:08:38,320 --> 00:08:40,640
pcf 8574

243
00:08:40,640 --> 00:08:43,120
so that's a super super handy feature

244
00:08:43,120 --> 00:08:44,480
there's also a constant current

245
00:08:44,480 --> 00:08:45,440
backlight driver

246
00:08:45,440 --> 00:08:47,680
those two pins there on the left you can

247
00:08:47,680 --> 00:08:49,440
either short them together to use the

248
00:08:49,440 --> 00:08:51,040
onboard driver

249
00:08:51,040 --> 00:08:53,680
or you can drive one of them directly

250
00:08:53,680 --> 00:08:55,120
and that connects to the uh

251
00:08:55,120 --> 00:08:57,040
the backlight but if you just connect

252
00:08:57,040 --> 00:08:58,560
those two pins together they'll come

253
00:08:58,560 --> 00:09:00,160
with a jumper on them

254
00:09:00,160 --> 00:09:03,519
um then it'll drive the backlight with a

255
00:09:03,519 --> 00:09:04,640
standard

256
00:09:04,640 --> 00:09:06,320
current and it'll be you know nice and

257
00:09:06,320 --> 00:09:08,160
bright and readable so

258
00:09:08,160 --> 00:09:11,440
that's what the backpacks look like

259
00:09:11,440 --> 00:09:15,839
the pcf 8574 is as i said a gpio

260
00:09:15,839 --> 00:09:16,800
expander

261
00:09:16,800 --> 00:09:19,839
you basically control an 8-bit gpio port

262
00:09:19,839 --> 00:09:24,320
via i squared c it's a very basic device

263
00:09:24,320 --> 00:09:27,120
when you write to it whatever byte you

264
00:09:27,120 --> 00:09:27,519
write

265
00:09:27,519 --> 00:09:30,800
gets written directly to that 8-bit port

266
00:09:30,800 --> 00:09:32,720
and if you read from the device it

267
00:09:32,720 --> 00:09:33,920
changes all the

268
00:09:33,920 --> 00:09:36,880
pins to inputs and read reads whatever's

269
00:09:36,880 --> 00:09:38,399
on them

270
00:09:38,399 --> 00:09:40,560
so you don't have a lot of control but

271
00:09:40,560 --> 00:09:42,560
it's very reliable and works really well

272
00:09:42,560 --> 00:09:44,480
the adafruit backpacks and some of the

273
00:09:44,480 --> 00:09:46,160
more expensive ones will use the

274
00:09:46,160 --> 00:09:47,680
microchip

275
00:09:47,680 --> 00:09:50,959
2300x series they have much more

276
00:09:50,959 --> 00:09:52,240
advanced control

277
00:09:52,240 --> 00:09:54,640
analogous to what you would see inside a

278
00:09:54,640 --> 00:09:57,200
microcontroller's gpio section

279
00:09:57,200 --> 00:09:59,279
so you can explicitly change the pins

280
00:09:59,279 --> 00:10:01,120
between inputs and outputs

281
00:10:01,120 --> 00:10:03,279
you can have an interrupt whenever a pin

282
00:10:03,279 --> 00:10:05,200
changes state

283
00:10:05,200 --> 00:10:08,320
you can set pins up as open drain

284
00:10:08,320 --> 00:10:10,160
or have slew rate controls which is

285
00:10:10,160 --> 00:10:12,720
really nice and they can also have

286
00:10:12,720 --> 00:10:16,240
pull ups on the pins which is nice

287
00:10:16,240 --> 00:10:18,000
the cheap imitation boards work

288
00:10:18,000 --> 00:10:19,600
absolutely fine but they are much more

289
00:10:19,600 --> 00:10:22,560
likely to contain a pcf 8574

290
00:10:22,560 --> 00:10:24,959
the code that i've written uh of course

291
00:10:24,959 --> 00:10:28,640
is for a board that uses the 8574

292
00:10:28,640 --> 00:10:31,680
and so that's what i'm expecting with

293
00:10:31,680 --> 00:10:32,480
this code

294
00:10:32,480 --> 00:10:36,079
um because of the way it works the

295
00:10:36,079 --> 00:10:38,160
direct write to the output port

296
00:10:38,160 --> 00:10:39,920
we have to do some weird things in order

297
00:10:39,920 --> 00:10:44,000
to send commands and text to the lcd

298
00:10:44,000 --> 00:10:47,440
these lcds have a sort of standard

299
00:10:47,440 --> 00:10:48,240
interface

300
00:10:48,240 --> 00:10:51,440
um and the way it works is you send a

301
00:10:51,440 --> 00:10:53,760
command or character to it and then you

302
00:10:53,760 --> 00:10:54,320
have to

303
00:10:54,320 --> 00:10:57,279
latch it in by setting a pin high and

304
00:10:57,279 --> 00:10:58,000
then low

305
00:10:58,000 --> 00:11:00,560
the enable pin uh it needs to be driven

306
00:11:00,560 --> 00:11:02,480
high and then low again

307
00:11:02,480 --> 00:11:05,600
and we're running in four bit mode um

308
00:11:05,600 --> 00:11:08,640
so each command has to be split in half

309
00:11:08,640 --> 00:11:11,600
into two nibbles four bits at a time and

310
00:11:11,600 --> 00:11:13,360
sent separately

311
00:11:13,360 --> 00:11:15,760
so the lcd library i wrote and added to

312
00:11:15,760 --> 00:11:17,279
the gitlab

313
00:11:17,279 --> 00:11:19,680
repo does this all for us and it's quite

314
00:11:19,680 --> 00:11:20,800
easy to use

315
00:11:20,800 --> 00:11:22,480
if you're curious about how it's

316
00:11:22,480 --> 00:11:25,360
actually connected to the lcd

317
00:11:25,360 --> 00:11:27,360
the top four bits are connected directly

318
00:11:27,360 --> 00:11:29,920
to the data pins on the lcd and the

319
00:11:29,920 --> 00:11:30,720
bottom four

320
00:11:30,720 --> 00:11:33,440
bits are connected to the led controller

321
00:11:33,440 --> 00:11:35,279
you can actually turn the led backlight

322
00:11:35,279 --> 00:11:37,519
on and off in software which is cool

323
00:11:37,519 --> 00:11:39,839
the enable pin the read right pane and

324
00:11:39,839 --> 00:11:41,360
then the rs pin which

325
00:11:41,360 --> 00:11:43,200
basically tells it if what we're sending

326
00:11:43,200 --> 00:11:46,640
is a command or if it's data

327
00:11:46,640 --> 00:11:49,360
so basically our software has to work

328
00:11:49,360 --> 00:11:51,519
with that connection set and then make

329
00:11:51,519 --> 00:11:52,079
sure that

330
00:11:52,079 --> 00:11:54,839
the data that gets sent to the lcd makes

331
00:11:54,839 --> 00:11:56,720
sense

332
00:11:56,720 --> 00:11:58,320
we're also going to be using just

333
00:11:58,320 --> 00:12:00,160
because i happen to have it on the

334
00:12:00,160 --> 00:12:02,639
sensor hub booster pack and these are

335
00:12:02,639 --> 00:12:05,360
also very common and cheap to get

336
00:12:05,360 --> 00:12:08,720
bmp 180 pressure sensors

337
00:12:08,720 --> 00:12:11,040
the booster pack i have been using for

338
00:12:11,040 --> 00:12:12,000
all these examples

339
00:12:12,000 --> 00:12:14,079
also has this sensor on it so i decided

340
00:12:14,079 --> 00:12:16,720
to display this info as well

341
00:12:16,720 --> 00:12:19,440
if you don't have a bmp 180 you can just

342
00:12:19,440 --> 00:12:20,480
remove

343
00:12:20,480 --> 00:12:23,519
the bmp 180 files and remove the include

344
00:12:23,519 --> 00:12:25,959
statement from the main

345
00:12:25,959 --> 00:12:29,040
main.cpp file and then there's a few

346
00:12:29,040 --> 00:12:31,040
bmp commands that are really obvious you

347
00:12:31,040 --> 00:12:33,200
just have to delete those as well

348
00:12:33,200 --> 00:12:37,519
but the function that the bmp180 class

349
00:12:37,519 --> 00:12:40,240
implements is just called get pressure

350
00:12:40,240 --> 00:12:41,920
it returns both the pressure

351
00:12:41,920 --> 00:12:43,360
and the temperature but we're only going

352
00:12:43,360 --> 00:12:45,600
to be displaying the pressure from this

353
00:12:45,600 --> 00:12:46,639
chip

354
00:12:46,639 --> 00:12:48,880
now if you're curious i encourage you to

355
00:12:48,880 --> 00:12:51,440
check out the bmp180.cpp

356
00:12:51,440 --> 00:12:54,720
file the algorithm that's used to

357
00:12:54,720 --> 00:12:56,800
convert the raw data that comes back

358
00:12:56,800 --> 00:12:59,440
from the bmp180 into both temperature

359
00:12:59,440 --> 00:13:00,639
and pressure

360
00:13:00,639 --> 00:13:03,200
it's just crazy algorithm there's so

361
00:13:03,200 --> 00:13:05,600
many lines of formulas you have to do

362
00:13:05,600 --> 00:13:06,880
you know you're multiplying all these

363
00:13:06,880 --> 00:13:08,880
values together dividing them by

364
00:13:08,880 --> 00:13:12,000
you know 2 to the 10 or 2 to the 12 and

365
00:13:12,000 --> 00:13:14,399
bit shifting and it's just this huge

366
00:13:14,399 --> 00:13:15,440
series of steps

367
00:13:15,440 --> 00:13:18,160
luckily the way it's written in the data

368
00:13:18,160 --> 00:13:18,480
sheet

369
00:13:18,480 --> 00:13:20,560
is very easy to read you can basically

370
00:13:20,560 --> 00:13:22,399
copy and paste it into c

371
00:13:22,399 --> 00:13:25,760
more or less and i've basically done

372
00:13:25,760 --> 00:13:26,079
that

373
00:13:26,079 --> 00:13:28,079
and it comes out the other end with a

374
00:13:28,079 --> 00:13:29,920
pressure value that makes sense which is

375
00:13:29,920 --> 00:13:32,160
good

376
00:13:32,240 --> 00:13:34,320
i don't actually know what the algorithm

377
00:13:34,320 --> 00:13:36,959
is doing i have absolutely no clue how

378
00:13:36,959 --> 00:13:40,240
all those uh formulas work

379
00:13:40,240 --> 00:13:43,360
um i you'd have to really understand how

380
00:13:43,360 --> 00:13:45,040
this particular chip works to understand

381
00:13:45,040 --> 00:13:46,160
what it's doing

382
00:13:46,160 --> 00:13:48,959
but it's all handed for us in the bmp

383
00:13:48,959 --> 00:13:50,480
180 library

384
00:13:50,480 --> 00:13:52,000
uh we're going to be displaying

385
00:13:52,000 --> 00:13:54,480
temperature and humidity from the sht

386
00:13:54,480 --> 00:13:57,360
chip either the 21 to the 31 and we'll

387
00:13:57,360 --> 00:13:58,160
be displaying

388
00:13:58,160 --> 00:14:01,279
pressure from the bmp180

389
00:14:01,279 --> 00:14:05,440
so writing to the lcd now

390
00:14:05,440 --> 00:14:08,800
the lcd class has two

391
00:14:08,800 --> 00:14:12,079
20 character arrays one for each line of

392
00:14:12,079 --> 00:14:14,560
a 20 by two display

393
00:14:14,560 --> 00:14:17,279
these displays don't necessarily have

394
00:14:17,279 --> 00:14:19,199
just two lines there are versions that

395
00:14:19,199 --> 00:14:20,720
have four lines

396
00:14:20,720 --> 00:14:22,480
and of course some of them have 16

397
00:14:22,480 --> 00:14:25,440
characters or 20 characters wide

398
00:14:25,440 --> 00:14:28,399
when you create the lcd instance in the

399
00:14:28,399 --> 00:14:30,240
main file you'll see that the second

400
00:14:30,240 --> 00:14:31,279
argument

401
00:14:31,279 --> 00:14:34,720
to the constructor function is the width

402
00:14:34,720 --> 00:14:36,000
of your display

403
00:14:36,000 --> 00:14:38,320
so you need to either put 16 or 20 in

404
00:14:38,320 --> 00:14:40,240
there

405
00:14:40,240 --> 00:14:42,160
this just prevents it from writing past

406
00:14:42,160 --> 00:14:43,279
the end of the line

407
00:14:43,279 --> 00:14:44,959
it doesn't really actually matter all

408
00:14:44,959 --> 00:14:46,399
that much if you write past the end of

409
00:14:46,399 --> 00:14:47,120
the line

410
00:14:47,120 --> 00:14:48,959
technically it'll eventually wrap around

411
00:14:48,959 --> 00:14:50,399
to the second line

412
00:14:50,399 --> 00:14:52,320
but this is just to make the code sort

413
00:14:52,320 --> 00:14:55,120
of nice and neat

414
00:14:55,199 --> 00:14:57,040
simply put whatever text you want

415
00:14:57,040 --> 00:14:59,279
displayed into those two arrays

416
00:14:59,279 --> 00:15:01,839
and then call the update function on the

417
00:15:01,839 --> 00:15:02,560
lcd

418
00:15:02,560 --> 00:15:05,440
object and it'll take whatever is in

419
00:15:05,440 --> 00:15:07,120
those two arrays and print them to the

420
00:15:07,120 --> 00:15:07,680
screen

421
00:15:07,680 --> 00:15:10,720
directly we're going to be using sprint

422
00:15:10,720 --> 00:15:12,160
f again

423
00:15:12,160 --> 00:15:14,959
if you saw the code over the past few

424
00:15:14,959 --> 00:15:15,920
weeks

425
00:15:15,920 --> 00:15:18,079
you'll notice i've been using sprint f

426
00:15:18,079 --> 00:15:19,279
to send

427
00:15:19,279 --> 00:15:22,560
data to the console via the uart i was

428
00:15:22,560 --> 00:15:24,560
using this for debugging and just for a

429
00:15:24,560 --> 00:15:25,199
basic

430
00:15:25,199 --> 00:15:28,240
output display and we're using sprintf

431
00:15:28,240 --> 00:15:30,320
it works the exact same way as printf

432
00:15:30,320 --> 00:15:32,160
does the only difference is instead of

433
00:15:32,160 --> 00:15:32,880
writing

434
00:15:32,880 --> 00:15:35,680
to a standard output like you would on a

435
00:15:35,680 --> 00:15:36,800
computer

436
00:15:36,800 --> 00:15:39,199
you're instead writing it into an array

437
00:15:39,199 --> 00:15:41,199
or into a pointer to

438
00:15:41,199 --> 00:15:44,240
some memory so we're going to be using

439
00:15:44,240 --> 00:15:45,279
sprintf to

440
00:15:45,279 --> 00:15:48,880
format these values into these two lines

441
00:15:48,880 --> 00:15:52,160
putting them into those two

442
00:15:52,160 --> 00:15:54,160
arrays for line one and line two and

443
00:15:54,160 --> 00:15:56,240
then we call the update function and

444
00:15:56,240 --> 00:15:59,120
it'll display that

445
00:15:59,120 --> 00:16:00,800
if you're interested in how the lcd

446
00:16:00,800 --> 00:16:02,399
actually works all the commands are

447
00:16:02,399 --> 00:16:04,399
inside the header file

448
00:16:04,399 --> 00:16:05,839
and if you want to learn more about how

449
00:16:05,839 --> 00:16:08,240
these types of lcd displays work

450
00:16:08,240 --> 00:16:10,000
in general which is sort of outside the

451
00:16:10,000 --> 00:16:11,759
scope of this course

452
00:16:11,759 --> 00:16:14,959
do a search online for hd 44780 there's

453
00:16:14,959 --> 00:16:17,759
a whole bunch of data sheets around the

454
00:16:17,759 --> 00:16:18,680
hd

455
00:16:18,680 --> 00:16:21,680
44780 is a chip that was made by hitachi

456
00:16:21,680 --> 00:16:22,000
many

457
00:16:22,000 --> 00:16:25,120
years ago and has become ubiquitous it's

458
00:16:25,120 --> 00:16:27,519
used to drive all of these different

459
00:16:27,519 --> 00:16:28,880
character lcds

460
00:16:28,880 --> 00:16:32,079
from 16 characters wide to you know

461
00:16:32,079 --> 00:16:35,440
20 characters by four lines i think you

462
00:16:35,440 --> 00:16:36,160
can even get

463
00:16:36,160 --> 00:16:38,880
40 character wide versions they all use

464
00:16:38,880 --> 00:16:40,560
the same chip

465
00:16:40,560 --> 00:16:42,480
so knowing how it works is something

466
00:16:42,480 --> 00:16:43,759
that's just good to know

467
00:16:43,759 --> 00:16:46,000
if you take a look at how the library

468
00:16:46,000 --> 00:16:46,880
works

469
00:16:46,880 --> 00:16:48,560
you'll get sort of a hint about how it

470
00:16:48,560 --> 00:16:50,959
works but looking at the actual data

471
00:16:50,959 --> 00:16:53,440
sheet is always better

472
00:16:53,440 --> 00:16:54,720
one of the cool things about it is that

473
00:16:54,720 --> 00:16:56,079
it's possible to create custom

474
00:16:56,079 --> 00:16:57,199
characters

475
00:16:57,199 --> 00:16:58,959
for example we could add the degrees

476
00:16:58,959 --> 00:17:00,800
symbol for the temperature display if we

477
00:17:00,800 --> 00:17:01,680
wanted to

478
00:17:01,680 --> 00:17:04,559
i leave that as an exercise to you if

479
00:17:04,559 --> 00:17:06,880
you want to give that a try

480
00:17:06,880 --> 00:17:08,880
if you look at the lcd library you'll

481
00:17:08,880 --> 00:17:10,400
see that there's a way to send

482
00:17:10,400 --> 00:17:12,880
characters in a way to send commands you

483
00:17:12,880 --> 00:17:14,480
would need to send a command

484
00:17:14,480 --> 00:17:16,880
and then send the data that represents

485
00:17:16,880 --> 00:17:18,559
that symbol

486
00:17:18,559 --> 00:17:20,480
but i'll leave that as an exercise to

487
00:17:20,480 --> 00:17:21,679
you

488
00:17:21,679 --> 00:17:25,119
so here's a screenshot of it working

489
00:17:25,119 --> 00:17:27,160
this is the display connected to the

490
00:17:27,160 --> 00:17:29,360
msp430

491
00:17:29,360 --> 00:17:32,440
as you can see it's displaying humidity

492
00:17:32,440 --> 00:17:34,480
49.66 percent

493
00:17:34,480 --> 00:17:37,200
uh the temperature was 23.22 when i took

494
00:17:37,200 --> 00:17:40,520
the picture and the pressure was 98.944

495
00:17:40,520 --> 00:17:42,000
kilopascals

496
00:17:42,000 --> 00:17:44,640
now i know that kilopascals is a very

497
00:17:44,640 --> 00:17:46,000
canadian thing i don't think

498
00:17:46,000 --> 00:17:49,200
any other countries use kilo pascals

499
00:17:49,200 --> 00:17:51,760
i know the us uses inches of mercury i

500
00:17:51,760 --> 00:17:52,480
think

501
00:17:52,480 --> 00:17:54,240
and i know that other places use

502
00:17:54,240 --> 00:17:56,960
millimeters of mercury

503
00:17:56,960 --> 00:17:58,720
there is a formula to convert between

504
00:17:58,720 --> 00:18:00,640
them quite easily so if you want to

505
00:18:00,640 --> 00:18:02,240
change that to display

506
00:18:02,240 --> 00:18:04,559
inches of mercury that would be very

507
00:18:04,559 --> 00:18:06,559
easy to do

508
00:18:06,559 --> 00:18:09,039
and this you know the display i has is

509
00:18:09,039 --> 00:18:10,640
the blue display which i really like

510
00:18:10,640 --> 00:18:12,320
that blue with the black writing it's

511
00:18:12,320 --> 00:18:15,200
very easy to read

512
00:18:15,200 --> 00:18:18,480
so basically we're using i squared c and

513
00:18:18,480 --> 00:18:20,400
one wire to collect data

514
00:18:20,400 --> 00:18:22,320
while i squirt c mostly and then the one

515
00:18:22,320 --> 00:18:24,320
wire device is verifying that we are the

516
00:18:24,320 --> 00:18:25,679
correct board

517
00:18:25,679 --> 00:18:28,080
so that silicon serial number as they

518
00:18:28,080 --> 00:18:28,919
call it the

519
00:18:28,919 --> 00:18:32,160
2401 one wire chip

520
00:18:32,160 --> 00:18:33,760
it's the code that was in there from

521
00:18:33,760 --> 00:18:35,200
last week

522
00:18:35,200 --> 00:18:37,840
it reads from that chip makes sure that

523
00:18:37,840 --> 00:18:38,240
the

524
00:18:38,240 --> 00:18:40,400
serial number matches what it should be

525
00:18:40,400 --> 00:18:41,520
and then it will

526
00:18:41,520 --> 00:18:44,400
let the code run if it's correct if it's

527
00:18:44,400 --> 00:18:45,520
not correct

528
00:18:45,520 --> 00:18:47,840
it won't let it run if you don't have

529
00:18:47,840 --> 00:18:49,360
one of those for that demo

530
00:18:49,360 --> 00:18:51,360
you can just delete that section or

531
00:18:51,360 --> 00:18:52,960
comment it out and it'll

532
00:18:52,960 --> 00:18:55,120
go past it this actually bit me when i

533
00:18:55,120 --> 00:18:56,000
was prototyping

534
00:18:56,000 --> 00:18:58,559
this i was trying to figure out why

535
00:18:58,559 --> 00:19:00,880
isn't this working you know

536
00:19:00,880 --> 00:19:02,720
everything should be fine and

537
00:19:02,720 --> 00:19:04,559
everything's wired up correctly or so i

538
00:19:04,559 --> 00:19:06,160
thought then it turns out i had actually

539
00:19:06,160 --> 00:19:07,200
wired this chip

540
00:19:07,200 --> 00:19:09,600
incorrectly and so the code was doing

541
00:19:09,600 --> 00:19:12,400
exactly what it was supposed to be doing

542
00:19:12,400 --> 00:19:14,240
the comparison was wrong and so it

543
00:19:14,240 --> 00:19:16,720
wasn't running the code

544
00:19:16,720 --> 00:19:19,200
this is sort of a basic but complete

545
00:19:19,200 --> 00:19:20,240
example of

546
00:19:20,240 --> 00:19:24,320
a real world usage of serial buses

547
00:19:24,320 --> 00:19:26,240
you have multiple inputs that are

548
00:19:26,240 --> 00:19:27,760
different sensors

549
00:19:27,760 --> 00:19:29,600
you have an output in this case that's a

550
00:19:29,600 --> 00:19:30,960
display

551
00:19:30,960 --> 00:19:32,799
to actually display this data to the

552
00:19:32,799 --> 00:19:34,240
user

553
00:19:34,240 --> 00:19:36,000
and this is the sort of thing that you

554
00:19:36,000 --> 00:19:38,240
would actually see on a real

555
00:19:38,240 --> 00:19:40,799
product in the embedded world we could

556
00:19:40,799 --> 00:19:42,480
easily swap out that i squared z

557
00:19:42,480 --> 00:19:44,799
temperature sensor for a one wire sensor

558
00:19:44,799 --> 00:19:46,960
if we needed an immersible version for

559
00:19:46,960 --> 00:19:48,080
example

560
00:19:48,080 --> 00:19:52,160
the ds-18b20 is a very common one wire

561
00:19:52,160 --> 00:19:54,720
chip you can get in these little

562
00:19:54,720 --> 00:19:55,760
encapsulated

563
00:19:55,760 --> 00:19:58,000
tubes that are all sealed up so you can

564
00:19:58,000 --> 00:19:59,520
insert them into liquids

565
00:19:59,520 --> 00:20:01,440
to get the temperature of liquids or you

566
00:20:01,440 --> 00:20:03,760
can push them into soil

567
00:20:03,760 --> 00:20:05,360
basically anywhere you wouldn't want to

568
00:20:05,360 --> 00:20:06,960
put electronics

569
00:20:06,960 --> 00:20:08,799
it's nice and sealed so you can measure

570
00:20:08,799 --> 00:20:10,480
the temperature

571
00:20:10,480 --> 00:20:12,480
it would be very easy to swap out the i

572
00:20:12,480 --> 00:20:14,480
squared c temperature sensor to get

573
00:20:14,480 --> 00:20:16,559
you know the data from a one wire device

574
00:20:16,559 --> 00:20:18,000
instead

575
00:20:18,000 --> 00:20:20,000
the project is written all in c plus

576
00:20:20,000 --> 00:20:21,679
plus just like all the other weeks

577
00:20:21,679 --> 00:20:23,440
which makes reusing the libraries and

578
00:20:23,440 --> 00:20:25,440
other projects quite simple

579
00:20:25,440 --> 00:20:27,120
all the code that i wrote for this

580
00:20:27,120 --> 00:20:29,360
course is licensed under the mozilla

581
00:20:29,360 --> 00:20:30,960
public license

582
00:20:30,960 --> 00:20:33,120
so it's all fully open source you can do

583
00:20:33,120 --> 00:20:34,799
whatever you want with it you can

584
00:20:34,799 --> 00:20:36,640
modify you can use it in your own

585
00:20:36,640 --> 00:20:38,960
projects

586
00:20:38,960 --> 00:20:40,960
feel free to hack at it as much as you

587
00:20:40,960 --> 00:20:44,240
like it's there for you to use

588
00:20:44,240 --> 00:20:46,880
i did a basically a 1.0 release of the

589
00:20:46,880 --> 00:20:48,000
completed code

590
00:20:48,000 --> 00:20:51,360
i took the code composer studio project

591
00:20:51,360 --> 00:20:52,240
folder

592
00:20:52,240 --> 00:20:54,480
and zipped the whole thing up this was

593
00:20:54,480 --> 00:20:56,159
something that came up in the question

594
00:20:56,159 --> 00:20:57,440
and answer period

595
00:20:57,440 --> 00:20:59,919
last week or maybe it was on week two

596
00:20:59,919 --> 00:21:01,120
someone was asking

597
00:21:01,120 --> 00:21:04,400
if i could provide the full project

598
00:21:04,400 --> 00:21:05,919
so that you could import it directly

599
00:21:05,919 --> 00:21:07,840
into ccs that is up

600
00:21:07,840 --> 00:21:10,640
on the gitlab repository site if you

601
00:21:10,640 --> 00:21:12,480
look under releases you should see

602
00:21:12,480 --> 00:21:14,320
one there and you can download the zip

603
00:21:14,320 --> 00:21:15,919
file

604
00:21:15,919 --> 00:21:17,600
and once you extract it you should be

605
00:21:17,600 --> 00:21:19,679
able to import that folder directly into

606
00:21:19,679 --> 00:21:21,679
your code composer studio

607
00:21:21,679 --> 00:21:24,640
workspace and it should just work as

608
00:21:24,640 --> 00:21:26,080
long as you're using code composer

609
00:21:26,080 --> 00:21:29,200
studio 10 which is the latest version

610
00:21:29,200 --> 00:21:30,960
so yeah that's there if you want it and

611
00:21:30,960 --> 00:21:32,240
of course the

612
00:21:32,240 --> 00:21:34,720
git repo you can just clone as well and

613
00:21:34,720 --> 00:21:36,559
mess around with the code that way

614
00:21:36,559 --> 00:21:39,679
look at the different branches and so on

615
00:21:39,679 --> 00:21:41,200
all right so let's just take a very

616
00:21:41,200 --> 00:21:43,360
quick look at this lcd library i wrote

617
00:21:43,360 --> 00:21:44,000
so we can see

618
00:21:44,000 --> 00:21:47,520
how it ties into i squared c

619
00:21:47,600 --> 00:21:50,159
it has the lcd address and all this

620
00:21:50,159 --> 00:21:51,600
information in the header file

621
00:21:51,600 --> 00:21:53,039
all the different instructions that the

622
00:21:53,039 --> 00:21:54,799
lcd needs

623
00:21:54,799 --> 00:21:57,039
the class has that constructor function

624
00:21:57,039 --> 00:21:58,080
just like the other

625
00:21:58,080 --> 00:22:00,400
sensors we have we basically need to

626
00:22:00,400 --> 00:22:02,080
give it a connection to the i squared c

627
00:22:02,080 --> 00:22:02,880
bus

628
00:22:02,880 --> 00:22:05,039
and then in this case we tell it how

629
00:22:05,039 --> 00:22:07,520
wide our display is either 16 or 20

630
00:22:07,520 --> 00:22:08,720
characters

631
00:22:08,720 --> 00:22:10,400
and the only other command that you'll

632
00:22:10,400 --> 00:22:11,760
need to access is that

633
00:22:11,760 --> 00:22:14,720
update command which um whatever is in

634
00:22:14,720 --> 00:22:18,559
these two arrays line one and line two

635
00:22:18,559 --> 00:22:21,600
that will then be displayed if we

636
00:22:21,600 --> 00:22:23,200
actually look at the code for how this

637
00:22:23,200 --> 00:22:24,240
works

638
00:22:24,240 --> 00:22:27,679
you'll see that it's fairly simple we

639
00:22:27,679 --> 00:22:28,320
basically

640
00:22:28,320 --> 00:22:31,280
load whatever command we want to send

641
00:22:31,280 --> 00:22:33,360
into this lcd out variable

642
00:22:33,360 --> 00:22:36,159
and then we call the send function um

643
00:22:36,159 --> 00:22:36,720
which

644
00:22:36,720 --> 00:22:39,120
is down here and whether or not it's a

645
00:22:39,120 --> 00:22:40,640
command or not it does something

646
00:22:40,640 --> 00:22:42,799
different now this is that finagling i

647
00:22:42,799 --> 00:22:44,480
was talking about

648
00:22:44,480 --> 00:22:47,200
because of the way the pcf is connected

649
00:22:47,200 --> 00:22:47,679
to

650
00:22:47,679 --> 00:22:50,799
the lcd we have to do all this weird bit

651
00:22:50,799 --> 00:22:53,360
shifting and stuff where we

652
00:22:53,360 --> 00:22:56,799
take each half of the

653
00:22:56,799 --> 00:23:00,000
command so this in this first

654
00:23:00,000 --> 00:23:02,000
three instructions we're taking the top

655
00:23:02,000 --> 00:23:03,919
nibble and then we are

656
00:23:03,919 --> 00:23:06,240
basically toggling a pin on and off

657
00:23:06,240 --> 00:23:08,159
that's why it goes from eight to c

658
00:23:08,159 --> 00:23:10,880
to eight we're just turning um the

659
00:23:10,880 --> 00:23:12,880
fourth bit which is that enable pin

660
00:23:12,880 --> 00:23:16,000
on and then off again then we send the

661
00:23:16,000 --> 00:23:18,720
lower half of the nibble which is

662
00:23:18,720 --> 00:23:20,080
and then we do the same thing we turn

663
00:23:20,080 --> 00:23:23,280
that enable pin on and off

664
00:23:23,280 --> 00:23:25,120
this is loading all these commands into

665
00:23:25,120 --> 00:23:27,120
a buffer basically and then we

666
00:23:27,120 --> 00:23:31,280
send that out over the i squared c bus

667
00:23:31,280 --> 00:23:34,240
and it'll send all these out in order

668
00:23:34,240 --> 00:23:35,200
which will

669
00:23:35,200 --> 00:23:38,720
in turn manipulate the gpio

670
00:23:38,720 --> 00:23:42,000
on the i squared c expander chip

671
00:23:42,000 --> 00:23:45,120
um because whatever we write to it

672
00:23:45,120 --> 00:23:47,279
is literally what comes out on the pins

673
00:23:47,279 --> 00:23:48,640
i mean there's not much in the data

674
00:23:48,640 --> 00:23:50,159
sheet for this chip that's

675
00:23:50,159 --> 00:23:52,880
basically all it is so if it's a command

676
00:23:52,880 --> 00:23:54,320
we have

677
00:23:54,320 --> 00:23:57,440
a certain bit off if it's not a command

678
00:23:57,440 --> 00:23:58,240
then we turn

679
00:23:58,240 --> 00:24:00,640
on another bit and then it goes 9d 9

680
00:24:00,640 --> 00:24:02,640
because we have another bit on so

681
00:24:02,640 --> 00:24:04,640
this section is just doing all that

682
00:24:04,640 --> 00:24:05,679
juggling for us

683
00:24:05,679 --> 00:24:08,720
the update command as you can see um it

684
00:24:08,720 --> 00:24:10,240
just takes

685
00:24:10,240 --> 00:24:14,080
line one loops through it and sends it

686
00:24:14,080 --> 00:24:17,200
out character by character uh

687
00:24:17,200 --> 00:24:19,840
out to the lcd and then it does the same

688
00:24:19,840 --> 00:24:21,039
thing with line two

689
00:24:21,039 --> 00:24:24,320
after it repositions the cursor

690
00:24:24,320 --> 00:24:25,919
so it's a very simple library i mean you

691
00:24:25,919 --> 00:24:28,880
can see there's not much here

692
00:24:28,880 --> 00:24:31,200
this is what is nice about these gpio

693
00:24:31,200 --> 00:24:31,919
expanders

694
00:24:31,919 --> 00:24:35,760
is that yes this is sort of complex this

695
00:24:35,760 --> 00:24:36,320
function

696
00:24:36,320 --> 00:24:39,840
but if you have an i squared c library

697
00:24:39,840 --> 00:24:42,159
you know it doesn't really need to do a

698
00:24:42,159 --> 00:24:43,440
lot you just need to

699
00:24:43,440 --> 00:24:45,679
have all the commands that you need for

700
00:24:45,679 --> 00:24:46,720
the lcd

701
00:24:46,720 --> 00:24:48,159
and then just send them out in the right

702
00:24:48,159 --> 00:24:50,080
order and that's basically it

703
00:24:50,080 --> 00:24:52,240
so the way we've put this into our main

704
00:24:52,240 --> 00:24:54,640
function

705
00:24:54,799 --> 00:24:56,960
we've got the one wire thing at the top

706
00:24:56,960 --> 00:24:59,120
so if you don't have a one wire

707
00:24:59,120 --> 00:25:01,600
if you don't have one of those 2401

708
00:25:01,600 --> 00:25:03,440
silicon serial numbers

709
00:25:03,440 --> 00:25:05,279
you can just delete this whole section

710
00:25:05,279 --> 00:25:06,640
here

711
00:25:06,640 --> 00:25:10,760
and that's fine if you don't have the

712
00:25:10,760 --> 00:25:13,679
bmp-180 for pressure

713
00:25:13,679 --> 00:25:16,960
you can delete this

714
00:25:16,960 --> 00:25:20,400
line and as well as updating line

715
00:25:20,400 --> 00:25:22,720
two and then you'll just get the top

716
00:25:22,720 --> 00:25:24,159
line with the humidity and the

717
00:25:24,159 --> 00:25:25,760
temperature

718
00:25:25,760 --> 00:25:28,320
but basically we get the humidity and

719
00:25:28,320 --> 00:25:29,760
the temperature

720
00:25:29,760 --> 00:25:32,880
then we using string formats which

721
00:25:32,880 --> 00:25:34,799
is something you'll learn about in c

722
00:25:34,799 --> 00:25:37,279
it's basically a way to

723
00:25:37,279 --> 00:25:40,799
turn variables into strings using this

724
00:25:40,799 --> 00:25:42,640
special syntax

725
00:25:42,640 --> 00:25:45,440
it gets displayed it gets stored pardon

726
00:25:45,440 --> 00:25:47,760
me in line one

727
00:25:47,760 --> 00:25:50,080
then we get the pressure which actually

728
00:25:50,080 --> 00:25:51,679
gets the pressure and the temperature

729
00:25:51,679 --> 00:25:52,640
again

730
00:25:52,640 --> 00:25:54,559
and then we take the pressure and we

731
00:25:54,559 --> 00:25:55,679
stick it in line

732
00:25:55,679 --> 00:25:59,240
two pretty simple and then we call

733
00:25:59,240 --> 00:26:01,080
display.update i still have the

734
00:26:01,080 --> 00:26:03,520
console.debug info in here

735
00:26:03,520 --> 00:26:05,440
um so that if you don't have an lcd you

736
00:26:05,440 --> 00:26:07,360
can still see exactly what it's sending

737
00:26:07,360 --> 00:26:08,640
and you can still

738
00:26:08,640 --> 00:26:11,760
play around with these lines to get it

739
00:26:11,760 --> 00:26:14,640
working for you

740
00:26:15,200 --> 00:26:16,640
and then just like before there's a

741
00:26:16,640 --> 00:26:19,039
timer interrupt so it goes to sleep

742
00:26:19,039 --> 00:26:21,279
and then every six seconds or so it'll

743
00:26:21,279 --> 00:26:23,679
wake up and update the display

744
00:26:23,679 --> 00:26:25,600
if you want it to take longer than that

745
00:26:25,600 --> 00:26:26,880
you can change

746
00:26:26,880 --> 00:26:30,960
this number here to 927c

747
00:26:30,960 --> 00:26:34,320
and then that'll be about 60 seconds so

748
00:26:34,320 --> 00:26:36,159
that's basically the only major

749
00:26:36,159 --> 00:26:37,360
differences um

750
00:26:37,360 --> 00:26:40,159
from last week's code is the addition of

751
00:26:40,159 --> 00:26:41,760
this lcd code

752
00:26:41,760 --> 00:26:44,159
and uh the bmp code so yeah here's what

753
00:26:44,159 --> 00:26:46,320
i was talking about

754
00:26:46,320 --> 00:26:48,240
so we need to read all these values from

755
00:26:48,240 --> 00:26:51,039
the chip and then to actually convert

756
00:26:51,039 --> 00:26:54,320
the data from the chip into

757
00:26:54,320 --> 00:26:57,440
a pressure we have to go through this

758
00:26:57,440 --> 00:27:01,919
crazy series of formulas

759
00:27:01,919 --> 00:27:04,720
to first calculate the temperature once

760
00:27:04,720 --> 00:27:06,400
we have the temperature calculated then

761
00:27:06,400 --> 00:27:09,039
we use that to calculate the pressure

762
00:27:09,039 --> 00:27:11,039
but just look at all these variables and

763
00:27:11,039 --> 00:27:12,960
all the stuff it does all the processing

764
00:27:12,960 --> 00:27:14,480
and division and

765
00:27:14,480 --> 00:27:16,960
adding and multiplication and it's just

766
00:27:16,960 --> 00:27:18,559
crazy

767
00:27:18,559 --> 00:27:21,360
and then finally at the end we get

768
00:27:21,360 --> 00:27:22,080
pressure

769
00:27:22,080 --> 00:27:25,279
and we actually get pressure in pascals

770
00:27:25,279 --> 00:27:27,039
i then divide it by a thousand because

771
00:27:27,039 --> 00:27:28,320
i'm canadian and we use

772
00:27:28,320 --> 00:27:31,440
kilopascals for some reason at this

773
00:27:31,440 --> 00:27:33,600
point if you wanted to change it to

774
00:27:33,600 --> 00:27:36,240
inches of mercury you would just take

775
00:27:36,240 --> 00:27:37,520
this pressure value

776
00:27:37,520 --> 00:27:41,360
and then do a conversion to it

777
00:27:41,360 --> 00:27:45,200
to go from pascals to inches of mercury

778
00:27:45,200 --> 00:27:46,320
and that would be basically the only

779
00:27:46,320 --> 00:27:49,039
change you would need to make

780
00:27:49,039 --> 00:27:50,720
and then the header file for that bmp

781
00:27:50,720 --> 00:27:52,559
180 is quite simple there's just the two

782
00:27:52,559 --> 00:27:53,840
commands

783
00:27:53,840 --> 00:27:56,159
sample pressure and sample temperature

784
00:27:56,159 --> 00:27:57,919
uh and then

785
00:27:57,919 --> 00:27:59,919
basically once again we need to give it

786
00:27:59,919 --> 00:28:02,159
a connection to the i squared c bus

787
00:28:02,159 --> 00:28:03,679
we've got the one command to get

788
00:28:03,679 --> 00:28:05,679
pressure it returns it

789
00:28:05,679 --> 00:28:08,960
in these two uh pointers

790
00:28:08,960 --> 00:28:11,600
uh and that's it so very very simple

791
00:28:11,600 --> 00:28:12,640
actually

792
00:28:12,640 --> 00:28:14,159
it works great and it's a great

793
00:28:14,159 --> 00:28:15,679
demonstration especially if you have a

794
00:28:15,679 --> 00:28:17,120
logic analyzer and you can actually

795
00:28:17,120 --> 00:28:18,799
probe what's going on

796
00:28:18,799 --> 00:28:20,640
this is an excellent way to see what's

797
00:28:20,640 --> 00:28:22,080
actually going on on the bus

798
00:28:22,080 --> 00:28:23,919
when a fairly complex series of

799
00:28:23,919 --> 00:28:27,120
transactions is going on

800
00:28:27,600 --> 00:28:30,080
all right so let's talk about logic

801
00:28:30,080 --> 00:28:31,279
analyzers briefly

802
00:28:31,279 --> 00:28:34,399
so logic analyzers are super

803
00:28:34,399 --> 00:28:38,399
super useful tools um if you

804
00:28:38,399 --> 00:28:41,440
can't afford one you can still

805
00:28:41,440 --> 00:28:43,760
do work without them but um they're

806
00:28:43,760 --> 00:28:46,159
super super useful to have

807
00:28:46,159 --> 00:28:48,480
they're a class of tools that sample a

808
00:28:48,480 --> 00:28:50,159
digital signal and display it to the

809
00:28:50,159 --> 00:28:50,880
user

810
00:28:50,880 --> 00:28:52,720
you've seen traces throughout this

811
00:28:52,720 --> 00:28:55,440
course you've seen snapshots from

812
00:28:55,440 --> 00:28:58,480
a software i use called pulse view which

813
00:28:58,480 --> 00:29:00,080
i use to interface with my logic

814
00:29:00,080 --> 00:29:01,200
analyzers

815
00:29:01,200 --> 00:29:03,360
it's essentially a logic analyzer is

816
00:29:03,360 --> 00:29:04,720
basically an oscilloscope with

817
00:29:04,720 --> 00:29:06,080
hysteresis

818
00:29:06,080 --> 00:29:08,159
so if the voltage goes above a certain

819
00:29:08,159 --> 00:29:10,000
level it shows up as a high

820
00:29:10,000 --> 00:29:12,720
to the logic analyzer if it goes below a

821
00:29:12,720 --> 00:29:13,440
certain level

822
00:29:13,440 --> 00:29:17,520
it shows as a zero um you can configure

823
00:29:17,520 --> 00:29:19,360
typically what the logic level is that

824
00:29:19,360 --> 00:29:20,240
you're working with

825
00:29:20,240 --> 00:29:21,679
depending on if you're working with five

826
00:29:21,679 --> 00:29:25,440
volt logic 3.3 volt logic etc

827
00:29:25,440 --> 00:29:28,559
because it's a digital signal that it's

828
00:29:28,559 --> 00:29:29,679
sampling

829
00:29:29,679 --> 00:29:32,480
it can forego all the complex analog

830
00:29:32,480 --> 00:29:34,240
filtering and stuff that's needed in an

831
00:29:34,240 --> 00:29:35,360
oscilloscope

832
00:29:35,360 --> 00:29:37,360
therefore you can get them quite small

833
00:29:37,360 --> 00:29:38,960
you can get them into these small

834
00:29:38,960 --> 00:29:44,000
tiny little usb logic analyzers

835
00:29:44,399 --> 00:29:47,760
most logic analyzers the software will

836
00:29:47,760 --> 00:29:50,720
include a serial bus decoding function

837
00:29:50,720 --> 00:29:52,559
which is just i can't even put into

838
00:29:52,559 --> 00:29:53,039
words

839
00:29:53,039 --> 00:29:56,640
how useful and important that is

840
00:29:56,640 --> 00:29:58,720
you've seen snapshots of it through this

841
00:29:58,720 --> 00:29:59,760
course

842
00:29:59,760 --> 00:30:02,720
a good logic analyzer decoder will show

843
00:30:02,720 --> 00:30:03,039
you

844
00:30:03,039 --> 00:30:06,080
exactly what each byte value is what

845
00:30:06,080 --> 00:30:08,240
those bytes actually mean

846
00:30:08,240 --> 00:30:10,080
for i squared c it'll show you start

847
00:30:10,080 --> 00:30:11,760
conditions and stop conditions

848
00:30:11,760 --> 00:30:14,799
for uart it'll show you brake conditions

849
00:30:14,799 --> 00:30:16,159
it just tells you everything you could

850
00:30:16,159 --> 00:30:17,600
possibly need to know about what's going

851
00:30:17,600 --> 00:30:19,679
on on the bus

852
00:30:19,679 --> 00:30:22,640
even logic analyzers older ones that

853
00:30:22,640 --> 00:30:24,399
don't have serial decode can still be

854
00:30:24,399 --> 00:30:26,080
useful because then at least you can see

855
00:30:26,080 --> 00:30:27,760
what's going on on the bus

856
00:30:27,760 --> 00:30:30,640
you can decode by hand if you have to

857
00:30:30,640 --> 00:30:32,880
even just being able to see things like

858
00:30:32,880 --> 00:30:34,799
is the ice grid c bus working am i

859
00:30:34,799 --> 00:30:36,399
seeing a stop condition in a start

860
00:30:36,399 --> 00:30:37,679
condition

861
00:30:37,679 --> 00:30:39,120
does the data look like it's at the

862
00:30:39,120 --> 00:30:40,880
right speed that sort of thing can be

863
00:30:40,880 --> 00:30:42,960
super super helpful

864
00:30:42,960 --> 00:30:45,440
so when i was creating the code for this

865
00:30:45,440 --> 00:30:48,320
course i used both my chrono view

866
00:30:48,320 --> 00:30:51,360
which was a somewhat pricier logic

867
00:30:51,360 --> 00:30:52,399
analyzer

868
00:30:52,399 --> 00:30:54,159
that's unfortunately no longer available

869
00:30:54,159 --> 00:30:55,919
the company went out of business a few

870
00:30:55,919 --> 00:30:57,600
years ago

871
00:30:57,600 --> 00:31:00,640
as well as a cheap eight-channel

872
00:31:00,640 --> 00:31:03,519
they call them fx2lafw i guess that's

873
00:31:03,519 --> 00:31:06,000
the name of the chip inside

874
00:31:06,000 --> 00:31:10,559
that it uses a cheap eight channel

875
00:31:10,559 --> 00:31:12,399
logic analyzer that i got off of i think

876
00:31:12,399 --> 00:31:16,480
of off of ebay or amazon a while ago

877
00:31:16,480 --> 00:31:18,000
so just another thing i wanted to point

878
00:31:18,000 --> 00:31:19,679
out is that with these

879
00:31:19,679 --> 00:31:21,519
with pulse viewing with most logic

880
00:31:21,519 --> 00:31:23,679
analyzers you can pick the sampling rate

881
00:31:23,679 --> 00:31:24,960
because of course it's sampling a

882
00:31:24,960 --> 00:31:27,279
digital signal at a certain speed

883
00:31:27,279 --> 00:31:29,600
so just like an oscilloscope you have to

884
00:31:29,600 --> 00:31:31,360
make sure that the sampling speed

885
00:31:31,360 --> 00:31:33,519
remember nyquist theorem if you've ever

886
00:31:33,519 --> 00:31:34,880
looked at that before

887
00:31:34,880 --> 00:31:37,200
the sampling rate has to be at least

888
00:31:37,200 --> 00:31:38,080
double

889
00:31:38,080 --> 00:31:40,159
the speed of whatever you're looking at

890
00:31:40,159 --> 00:31:41,360
so if we're looking at

891
00:31:41,360 --> 00:31:44,159
say a one megahertz i squared c bus we

892
00:31:44,159 --> 00:31:45,279
need to sample

893
00:31:45,279 --> 00:31:48,159
at at least two megahertz preferably

894
00:31:48,159 --> 00:31:49,440
much higher than that

895
00:31:49,440 --> 00:31:51,440
four or eight megahertz to get good

896
00:31:51,440 --> 00:31:52,480
detail

897
00:31:52,480 --> 00:31:55,279
of what's going on um on the bus two

898
00:31:55,279 --> 00:31:58,399
megahertz you can recreate what's there

899
00:31:58,399 --> 00:32:00,559
um but you know the higher the sample

900
00:32:00,559 --> 00:32:01,919
rate the better

901
00:32:01,919 --> 00:32:05,279
the nice thing about these uh logic

902
00:32:05,279 --> 00:32:07,279
analyzers that work with pulseview or

903
00:32:07,279 --> 00:32:07,840
any

904
00:32:07,840 --> 00:32:10,960
laptop or pc software is unlike a

905
00:32:10,960 --> 00:32:12,799
benchtop logic analyzer

906
00:32:12,799 --> 00:32:14,480
it can take advantage of the fact that

907
00:32:14,480 --> 00:32:16,640
your laptop has a huge amount of memory

908
00:32:16,640 --> 00:32:19,360
i mean my laptop has 16 gigs of memory

909
00:32:19,360 --> 00:32:22,399
that a lot of samples so you can have a

910
00:32:22,399 --> 00:32:24,960
fairly high sample rate and you can also

911
00:32:24,960 --> 00:32:27,600
sample for a very long period of time

912
00:32:27,600 --> 00:32:29,039
which can be super useful if you're

913
00:32:29,039 --> 00:32:31,440
trying to pick out a glitch that happens

914
00:32:31,440 --> 00:32:32,880
on a serial bus

915
00:32:32,880 --> 00:32:34,320
or you know something that doesn't

916
00:32:34,320 --> 00:32:36,559
happen very often uh

917
00:32:36,559 --> 00:32:39,039
super super useful in combination with a

918
00:32:39,039 --> 00:32:40,799
laptop

919
00:32:40,799 --> 00:32:43,919
now these low-cost usb analyzers are

920
00:32:43,919 --> 00:32:45,519
basically all

921
00:32:45,519 --> 00:32:48,880
based on the celia if your budget allows

922
00:32:48,880 --> 00:32:49,120
it

923
00:32:49,120 --> 00:32:50,880
it's always worth buying a higher

924
00:32:50,880 --> 00:32:54,559
quality one like the celia logic pro

925
00:32:54,559 --> 00:32:57,039
they're a great company their software

926
00:32:57,039 --> 00:32:58,399
is excellent and that's one of the

927
00:32:58,399 --> 00:32:59,039
things that

928
00:32:59,039 --> 00:33:01,519
you get if you buy the real thing is you

929
00:33:01,519 --> 00:33:03,600
get access to their software

930
00:33:03,600 --> 00:33:05,440
you get support from them and from their

931
00:33:05,440 --> 00:33:06,960
community um

932
00:33:06,960 --> 00:33:08,840
and you're helping support a really cool

933
00:33:08,840 --> 00:33:10,080
company

934
00:33:10,080 --> 00:33:13,279
these low-cost clones of the say they

935
00:33:13,279 --> 00:33:14,000
basically

936
00:33:14,000 --> 00:33:16,159
work with pulseview which is a fully

937
00:33:16,159 --> 00:33:17,600
open source and free

938
00:33:17,600 --> 00:33:19,760
software that you can use on windows

939
00:33:19,760 --> 00:33:22,159
linux and macintosh

940
00:33:22,159 --> 00:33:24,159
but this is a tool and if you're going

941
00:33:24,159 --> 00:33:26,240
to get into embedded

942
00:33:26,240 --> 00:33:29,360
serial buses or embedded design at all

943
00:33:29,360 --> 00:33:31,440
it's worth buying a decent quality one

944
00:33:31,440 --> 00:33:33,760
that's why i got my chrono view

945
00:33:33,760 --> 00:33:36,399
it has a sampling rate of up to 100

946
00:33:36,399 --> 00:33:37,440
megahertz

947
00:33:37,440 --> 00:33:39,840
which is really good for when you're

948
00:33:39,840 --> 00:33:41,600
sampling higher speed buses

949
00:33:41,600 --> 00:33:44,480
these cheapo ones typically will only go

950
00:33:44,480 --> 00:33:46,480
to about 8 to 20 megahertz if you're

951
00:33:46,480 --> 00:33:47,679
lucky

952
00:33:47,679 --> 00:33:50,399
but they're under 20 bucks so you

953
00:33:50,399 --> 00:33:52,000
basically can't beat the price and

954
00:33:52,000 --> 00:33:53,360
they're great if you're

955
00:33:53,360 --> 00:33:55,919
on a strict budget or if you're just

956
00:33:55,919 --> 00:33:57,519
doing this as a hobby

957
00:33:57,519 --> 00:33:59,919
8 to 20 megahertz is fine for i squared

958
00:33:59,919 --> 00:34:02,240
c and uart and one wire

959
00:34:02,240 --> 00:34:05,519
and even low speed spi up to five to ten

960
00:34:05,519 --> 00:34:06,159
megahertz

961
00:34:06,159 --> 00:34:08,639
generally you can get away with um which

962
00:34:08,639 --> 00:34:09,520
is perfectly

963
00:34:09,520 --> 00:34:11,040
adequate for a lot of the stuff that you

964
00:34:11,040 --> 00:34:13,679
might be doing as a hobbyist

965
00:34:13,679 --> 00:34:16,399
as i said pulseview is an excellent free

966
00:34:16,399 --> 00:34:17,359
and open source

967
00:34:17,359 --> 00:34:19,760
piece of software that works with a wide

968
00:34:19,760 --> 00:34:20,960
variety of usb

969
00:34:20,960 --> 00:34:22,800
and benchtop logic analyzers and

970
00:34:22,800 --> 00:34:24,960
oscilloscopes you can actually connect

971
00:34:24,960 --> 00:34:26,879
radigal oscilloscopes hand tech

972
00:34:26,879 --> 00:34:28,719
oscilloscopes and a few other ones as

973
00:34:28,719 --> 00:34:30,560
well

974
00:34:30,560 --> 00:34:33,040
i think you can even connect the the

975
00:34:33,040 --> 00:34:36,399
keysight ones and some of the um

976
00:34:36,399 --> 00:34:39,839
tektronix scopes as well which is a

977
00:34:39,839 --> 00:34:40,800
great way to

978
00:34:40,800 --> 00:34:43,359
get live data on your laptop so you can

979
00:34:43,359 --> 00:34:44,560
decode it using

980
00:34:44,560 --> 00:34:48,639
pulseview often on oscilloscopes the

981
00:34:48,639 --> 00:34:50,719
serial bus decoding is an optional extra

982
00:34:50,719 --> 00:34:52,560
which can cost quite a lot of money

983
00:34:52,560 --> 00:34:54,560
depending on the manufacturer

984
00:34:54,560 --> 00:34:58,079
this is a great way to get serial decode

985
00:34:58,079 --> 00:35:02,160
just by adding a usb cable essentially

986
00:35:02,160 --> 00:35:05,280
pulse view can decode the list is huge

987
00:35:05,280 --> 00:35:07,040
of all the different serial buses and

988
00:35:07,040 --> 00:35:09,119
parallel buses it can decode

989
00:35:09,119 --> 00:35:10,800
you know you've got all the major ones

990
00:35:10,800 --> 00:35:12,800
uart spy

991
00:35:12,800 --> 00:35:15,200
i squared c one wire then you've got can

992
00:35:15,200 --> 00:35:16,400
and lin

993
00:35:16,400 --> 00:35:19,200
flex-ray

994
00:35:19,520 --> 00:35:21,680
like the military standard ones the ones

995
00:35:21,680 --> 00:35:24,079
that are used on airplanes

996
00:35:24,079 --> 00:35:27,200
just tons and tons and tons of stuff

997
00:35:27,200 --> 00:35:29,040
for analyzers as i said for analyzers

998
00:35:29,040 --> 00:35:30,560
which support it it'll use your

999
00:35:30,560 --> 00:35:32,560
computer's ram as the sample storage so

1000
00:35:32,560 --> 00:35:34,000
you can get you know

1001
00:35:34,000 --> 00:35:35,839
a huge amount of data collected which is

1002
00:35:35,839 --> 00:35:38,320
really nice

1003
00:35:38,320 --> 00:35:41,680
so if you happen to already own an mso

1004
00:35:41,680 --> 00:35:43,359
which is a mixed signal analog

1005
00:35:43,359 --> 00:35:45,680
oscilloscope

1006
00:35:45,680 --> 00:35:48,160
take advantage of the logic inputs you

1007
00:35:48,160 --> 00:35:49,119
can

1008
00:35:49,119 --> 00:35:50,880
just like with any oscilloscope you can

1009
00:35:50,880 --> 00:35:53,760
probe a logic circuit with the

1010
00:35:53,760 --> 00:35:55,920
analog input and that can be very useful

1011
00:35:55,920 --> 00:35:58,720
if you're trying to troubleshoot

1012
00:35:58,720 --> 00:36:00,240
something weird happening on the bus

1013
00:36:00,240 --> 00:36:02,320
that you can't see on the logic analyzer

1014
00:36:02,320 --> 00:36:04,560
there might be spikes or interference or

1015
00:36:04,560 --> 00:36:08,160
noise or something but if you have

1016
00:36:08,160 --> 00:36:10,079
the logic inputs take advantage of them

1017
00:36:10,079 --> 00:36:12,800
because that'll free up your analog

1018
00:36:12,800 --> 00:36:15,839
probes for something else and bench top

1019
00:36:15,839 --> 00:36:17,440
msos will typically

1020
00:36:17,440 --> 00:36:19,440
give you a much higher sample rate than

1021
00:36:19,440 --> 00:36:21,599
what usb analyzers

1022
00:36:21,599 --> 00:36:23,119
can do and therefore it'll give you much

1023
00:36:23,119 --> 00:36:24,880
better resolution you'll be able to see

1024
00:36:24,880 --> 00:36:28,480
smaller spikes that may happen any weird

1025
00:36:28,480 --> 00:36:30,640
transients that happen

1026
00:36:30,640 --> 00:36:33,119
and if they do have decode it'll be real

1027
00:36:33,119 --> 00:36:34,320
time

1028
00:36:34,320 --> 00:36:36,320
pulse view has to read the data in

1029
00:36:36,320 --> 00:36:38,960
sequentially and then decode it

1030
00:36:38,960 --> 00:36:41,680
so if you want real-time high-speed

1031
00:36:41,680 --> 00:36:42,800
decoding

1032
00:36:42,800 --> 00:36:45,760
often the only way to go is with an mso

1033
00:36:45,760 --> 00:36:47,680
if you only own a two-channel digital

1034
00:36:47,680 --> 00:36:48,160
scope

1035
00:36:48,160 --> 00:36:49,680
as i said you might still be able to

1036
00:36:49,680 --> 00:36:51,200
connect it to pulseview or

1037
00:36:51,200 --> 00:36:53,680
any other software that does decoding

1038
00:36:53,680 --> 00:36:55,599
via usb

1039
00:36:55,599 --> 00:36:56,960
or you might be able to add serial

1040
00:36:56,960 --> 00:36:59,440
decode as a software upgrade sometimes

1041
00:36:59,440 --> 00:37:00,960
that's really expensive sometimes

1042
00:37:00,960 --> 00:37:03,119
there's ways to get it for free so

1043
00:37:03,119 --> 00:37:05,280
look into that if it's an option but

1044
00:37:05,280 --> 00:37:06,880
even just being able to probe your

1045
00:37:06,880 --> 00:37:08,560
signals without decode

1046
00:37:08,560 --> 00:37:10,480
even if you just have an old analog

1047
00:37:10,480 --> 00:37:13,760
scope it can be super useful

1048
00:37:13,760 --> 00:37:15,440
just seeing that the bus is there and

1049
00:37:15,440 --> 00:37:16,880
working

1050
00:37:16,880 --> 00:37:18,560
can help you figure out what's going on

1051
00:37:18,560 --> 00:37:21,119
sometimes so on my old

1052
00:37:21,119 --> 00:37:24,800
hp 54645d it has a

1053
00:37:24,800 --> 00:37:27,599
16 channel logic analyzer but it doesn't

1054
00:37:27,599 --> 00:37:29,839
do any decoding at all but i used to use

1055
00:37:29,839 --> 00:37:33,200
it to decode i squared z and spi by hand

1056
00:37:33,200 --> 00:37:36,640
so definitely tedious definitely

1057
00:37:36,640 --> 00:37:38,400
not the most fun thing to do but is

1058
00:37:38,400 --> 00:37:40,400
definitely doable and help me solve a

1059
00:37:40,400 --> 00:37:42,240
lot of problems so even older

1060
00:37:42,240 --> 00:37:45,280
equipment is still perfectly valid

1061
00:37:45,280 --> 00:37:48,000
um so if we take a look at some of the

1062
00:37:48,000 --> 00:37:49,680
features of pulseview one of the really

1063
00:37:49,680 --> 00:37:51,520
nice ones is being able to save your

1064
00:37:51,520 --> 00:37:54,480
captures in a compressed format

1065
00:37:54,480 --> 00:37:56,320
all of the example traces that were used

1066
00:37:56,320 --> 00:37:58,240
in this course are available to download

1067
00:37:58,240 --> 00:37:59,920
on the course page

1068
00:37:59,920 --> 00:38:02,240
you can then open them in pulse view

1069
00:38:02,240 --> 00:38:02,960
zoom in

1070
00:38:02,960 --> 00:38:05,200
take a look around even if you don't

1071
00:38:05,200 --> 00:38:06,960
have a logic analyzer then you can

1072
00:38:06,960 --> 00:38:08,640
take a look at what the bus actually

1073
00:38:08,640 --> 00:38:10,000
looks like um

1074
00:38:10,000 --> 00:38:11,359
you can play around with the decode

1075
00:38:11,359 --> 00:38:13,599
settings and there are the files ending

1076
00:38:13,599 --> 00:38:16,079
in dot sr

1077
00:38:16,079 --> 00:38:17,920
that's a good way to get a good up close

1078
00:38:17,920 --> 00:38:20,160
look at how

1079
00:38:20,160 --> 00:38:21,920
the decoding works and what the bus

1080
00:38:21,920 --> 00:38:23,440
actually looks like

1081
00:38:23,440 --> 00:38:26,400
okay quiz time so get a piece of paper

1082
00:38:26,400 --> 00:38:27,359
if you

1083
00:38:27,359 --> 00:38:30,720
uh don't already have one handy open up

1084
00:38:30,720 --> 00:38:32,160
a blank notepad

1085
00:38:32,160 --> 00:38:34,800
or other word document if you want to

1086
00:38:34,800 --> 00:38:36,240
write down your answers

1087
00:38:36,240 --> 00:38:39,760
and here we go so questions and answers

1088
00:38:39,760 --> 00:38:40,880
by the way

1089
00:38:40,880 --> 00:38:42,400
the question slides are going to come

1090
00:38:42,400 --> 00:38:44,160
first so you can write down all your

1091
00:38:44,160 --> 00:38:45,200
answers

1092
00:38:45,200 --> 00:38:47,040
each slide will have one or more

1093
00:38:47,040 --> 00:38:48,880
questions on it

1094
00:38:48,880 --> 00:38:51,119
and you can pause if you want to think

1095
00:38:51,119 --> 00:38:52,560
about it for a minute to write down your

1096
00:38:52,560 --> 00:38:53,920
answer

1097
00:38:53,920 --> 00:38:56,079
then at the end we're going to go over

1098
00:38:56,079 --> 00:38:57,599
the answers

1099
00:38:57,599 --> 00:38:59,280
they're going to be listed in separate

1100
00:38:59,280 --> 00:39:01,680
slides at the end so

1101
00:39:01,680 --> 00:39:04,480
don't worry if you get things wrong this

1102
00:39:04,480 --> 00:39:06,480
is just basically a way to check and see

1103
00:39:06,480 --> 00:39:09,200
how much you absorbed the first time

1104
00:39:09,200 --> 00:39:10,079
through the course

1105
00:39:10,079 --> 00:39:12,400
often it takes time as well as practical

1106
00:39:12,400 --> 00:39:15,280
usage to become proficient in a subject

1107
00:39:15,280 --> 00:39:17,040
as i said the most important thing is

1108
00:39:17,040 --> 00:39:18,400
being able to

1109
00:39:18,400 --> 00:39:21,520
locate information knowing where to look

1110
00:39:21,520 --> 00:39:23,680
for information so with all these

1111
00:39:23,680 --> 00:39:25,359
examples and with i squared c

1112
00:39:25,359 --> 00:39:28,160
and one wire just like we looked at in

1113
00:39:28,160 --> 00:39:29,920
week two and three when we were actually

1114
00:39:29,920 --> 00:39:31,359
implementing i squared c

1115
00:39:31,359 --> 00:39:34,880
and one wire libraries is just knowing

1116
00:39:34,880 --> 00:39:36,720
where to look for that data so even if

1117
00:39:36,720 --> 00:39:37,839
you don't know the answer to these

1118
00:39:37,839 --> 00:39:39,119
questions

1119
00:39:39,119 --> 00:39:42,320
you will now at least know where to look

1120
00:39:42,320 --> 00:39:44,480
and the second time around if you know a

1121
00:39:44,480 --> 00:39:46,240
few months from now you need to look up

1122
00:39:46,240 --> 00:39:47,920
some of this information

1123
00:39:47,920 --> 00:39:49,359
the fact that you've already gone over

1124
00:39:49,359 --> 00:39:50,800
it once means you'll be able to pick it

1125
00:39:50,800 --> 00:39:52,400
up again really really quickly

1126
00:39:52,400 --> 00:39:57,599
so here we go with question number one

1127
00:39:57,599 --> 00:39:59,599
this is a fairly easy one if you

1128
00:39:59,599 --> 00:40:01,280
remember which i squared c

1129
00:40:01,280 --> 00:40:04,319
signal goes low first during a start

1130
00:40:04,319 --> 00:40:05,680
condition

1131
00:40:05,680 --> 00:40:07,520
so think back to what a start condition

1132
00:40:07,520 --> 00:40:09,920
is which of those two signals on the i

1133
00:40:09,920 --> 00:40:11,359
squared c bus goes low

1134
00:40:11,359 --> 00:40:14,560
first which one goes high first

1135
00:40:14,560 --> 00:40:17,040
in a stop condition so if you think

1136
00:40:17,040 --> 00:40:18,640
about the stop condition which of the

1137
00:40:18,640 --> 00:40:20,400
two signals goes high

1138
00:40:20,400 --> 00:40:24,720
first and why is this why

1139
00:40:24,720 --> 00:40:28,720
do they go in the order that they go in

1140
00:40:28,720 --> 00:40:30,000
so i'll give you a minute to write down

1141
00:40:30,000 --> 00:40:31,599
your answer or think about it you can

1142
00:40:31,599 --> 00:40:34,560
pause if you need to

1143
00:40:36,079 --> 00:40:39,359
question two how many bits

1144
00:40:39,359 --> 00:40:42,480
does an i squared c address have so

1145
00:40:42,480 --> 00:40:43,359
think about

1146
00:40:43,359 --> 00:40:45,599
the chips we've worked with and how long

1147
00:40:45,599 --> 00:40:48,720
those addresses are

1148
00:40:48,720 --> 00:40:51,280
how many bits does a one wire address

1149
00:40:51,280 --> 00:40:52,800
have

1150
00:40:52,800 --> 00:40:56,000
you can also answer in bytes for the one

1151
00:40:56,000 --> 00:40:58,800
wire address

1152
00:40:59,119 --> 00:41:00,960
take a minute to write those down if you

1153
00:41:00,960 --> 00:41:02,720
need

1154
00:41:02,720 --> 00:41:06,000
question three at the

1155
00:41:06,000 --> 00:41:08,319
end of every byte transmitted on an i

1156
00:41:08,319 --> 00:41:09,839
squared c bus

1157
00:41:09,839 --> 00:41:12,960
there is an additional bit what is this

1158
00:41:12,960 --> 00:41:13,599
bit

1159
00:41:13,599 --> 00:41:16,720
called which

1160
00:41:16,720 --> 00:41:20,160
side sends it take a minute to think

1161
00:41:20,160 --> 00:41:21,359
about that

1162
00:41:21,359 --> 00:41:22,960
write down your answers if you need you

1163
00:41:22,960 --> 00:41:25,599
can pause

1164
00:41:26,319 --> 00:41:30,079
what happens if it isn't sent

1165
00:41:32,720 --> 00:41:35,839
question four

1166
00:41:37,200 --> 00:41:39,440
what are the most common speeds that i

1167
00:41:39,440 --> 00:41:42,079
squared c runs at

1168
00:41:42,079 --> 00:41:43,839
so there's a few standard speeds that

1169
00:41:43,839 --> 00:41:45,680
you'll often see i squared c running at

1170
00:41:45,680 --> 00:41:48,560
what are the most common ones

1171
00:41:48,560 --> 00:41:50,640
can you remember the standard names for

1172
00:41:50,640 --> 00:41:51,920
each speed

1173
00:41:51,920 --> 00:41:53,920
often they'll be referred to by these

1174
00:41:53,920 --> 00:41:56,000
names and you'll have to sort of

1175
00:41:56,000 --> 00:41:57,440
remember what speed that they're

1176
00:41:57,440 --> 00:42:02,400
referring to

1177
00:42:02,400 --> 00:42:04,400
what speed does one wire run at by

1178
00:42:04,400 --> 00:42:06,480
default

1179
00:42:06,480 --> 00:42:08,640
so remember one wire runs at a very

1180
00:42:08,640 --> 00:42:10,800
particular speed

1181
00:42:10,800 --> 00:42:13,200
and how fast does it run in overdrive

1182
00:42:13,200 --> 00:42:14,319
mode

1183
00:42:14,319 --> 00:42:15,760
remember that there's a fairly simple

1184
00:42:15,760 --> 00:42:17,839
relationship between the speed it runs

1185
00:42:17,839 --> 00:42:18,880
at by default

1186
00:42:18,880 --> 00:42:23,119
and how fast it runs in overdrive

1187
00:42:23,599 --> 00:42:25,280
so take a minute to write those down and

1188
00:42:25,280 --> 00:42:28,400
think about it if you need

1189
00:42:29,040 --> 00:42:31,839
question five

1190
00:42:33,040 --> 00:42:35,119
what are the names of the four

1191
00:42:35,119 --> 00:42:37,680
addressing commands in one wire remember

1192
00:42:37,680 --> 00:42:39,040
each of the names

1193
00:42:39,040 --> 00:42:42,079
ends in rom so there's

1194
00:42:42,079 --> 00:42:44,880
four of them that are used to address

1195
00:42:44,880 --> 00:42:46,800
one wire devices

1196
00:42:46,800 --> 00:42:50,640
and each one will be blank rom

1197
00:42:52,400 --> 00:42:54,720
which of these do we try and avoid

1198
00:42:54,720 --> 00:42:56,160
there's one of them that we try and

1199
00:42:56,160 --> 00:42:58,960
avoid using if we can

1200
00:42:58,960 --> 00:43:02,800
why do we want to try and avoid using it

1201
00:43:02,800 --> 00:43:04,640
that's sort of a bit of a longer answer

1202
00:43:04,640 --> 00:43:06,000
so take a minute

1203
00:43:06,000 --> 00:43:12,640
pause if you need to to write it down

1204
00:43:12,640 --> 00:43:15,520
question six

1205
00:43:16,160 --> 00:43:19,119
what is the name of the mode in which a

1206
00:43:19,119 --> 00:43:20,400
one-wire device is

1207
00:43:20,400 --> 00:43:23,520
powered from the data line there's a

1208
00:43:23,520 --> 00:43:25,599
particular mode that one-wire devices

1209
00:43:25,599 --> 00:43:27,200
can run in where they're powered from

1210
00:43:27,200 --> 00:43:29,520
the data line what is that mode

1211
00:43:29,520 --> 00:43:32,000
called

1212
00:43:32,560 --> 00:43:35,760
how does it store power internally

1213
00:43:35,760 --> 00:43:41,839
from the data line

1214
00:43:42,000 --> 00:43:44,800
question seven

1215
00:43:47,760 --> 00:43:50,960
what happens if two i squared c devices

1216
00:43:50,960 --> 00:43:52,079
start talking

1217
00:43:52,079 --> 00:43:54,480
at once if they both start talking at

1218
00:43:54,480 --> 00:43:57,520
the same time what happens

1219
00:43:57,520 --> 00:44:00,720
and what is that called

1220
00:44:00,960 --> 00:44:04,000
how does this resolve itself if two

1221
00:44:04,000 --> 00:44:05,839
devices start talking at once

1222
00:44:05,839 --> 00:44:10,480
what happens how does that fix itself

1223
00:44:14,240 --> 00:44:16,959
question eight

1224
00:44:17,359 --> 00:44:20,560
how can a one-wire controller so

1225
00:44:20,560 --> 00:44:22,800
microcontroller typically

1226
00:44:22,800 --> 00:44:26,079
tell if more than one device responded

1227
00:44:26,079 --> 00:44:26,560
to a

1228
00:44:26,560 --> 00:44:29,280
read rom command that's the command

1229
00:44:29,280 --> 00:44:30,560
where it reads the

1230
00:44:30,560 --> 00:44:33,440
addresses from any device on the bus

1231
00:44:33,440 --> 00:44:34,880
there's a specific way

1232
00:44:34,880 --> 00:44:37,599
it can tell if more than one device

1233
00:44:37,599 --> 00:44:41,200
responded at the same time

1234
00:44:43,359 --> 00:44:45,040
there's something it should do if this

1235
00:44:45,040 --> 00:44:47,599
occurs there's a specific series of

1236
00:44:47,599 --> 00:44:49,520
steps it needs to take to resolve this

1237
00:44:49,520 --> 00:44:50,880
situation

1238
00:44:50,880 --> 00:44:53,839
what should the one wire controller do

1239
00:44:53,839 --> 00:44:56,079
if it detects that more than one device

1240
00:44:56,079 --> 00:44:58,800
responded

1241
00:45:00,960 --> 00:45:04,319
all right finally

1242
00:45:04,319 --> 00:45:07,200
question nine

1243
00:45:07,839 --> 00:45:11,119
what is the major similarity between one

1244
00:45:11,119 --> 00:45:11,839
wire and i

1245
00:45:11,839 --> 00:45:14,480
squared c there's one big thing that

1246
00:45:14,480 --> 00:45:14,880
they

1247
00:45:14,880 --> 00:45:16,960
share which makes them quite similar to

1248
00:45:16,960 --> 00:45:19,839
each other

1249
00:45:20,640 --> 00:45:22,800
why does the amount of capacitance on

1250
00:45:22,800 --> 00:45:24,079
either bus matter

1251
00:45:24,079 --> 00:45:27,520
why is that an important thing to know

1252
00:45:27,520 --> 00:45:30,720
and how does it affect the bus why does

1253
00:45:30,720 --> 00:45:33,839
this matter at all

1254
00:45:35,280 --> 00:45:37,760
okay so go back if you need to if you

1255
00:45:37,760 --> 00:45:47,839
missed any of the questions

1256
00:45:48,079 --> 00:45:50,640
okay go back if you need to take a look

1257
00:45:50,640 --> 00:45:52,319
at the questions again if you missed any

1258
00:45:52,319 --> 00:45:53,200
of them

1259
00:45:53,200 --> 00:45:56,480
we're going to go over the answers now

1260
00:45:56,480 --> 00:46:00,160
so for question one which line goes

1261
00:46:00,160 --> 00:46:03,760
first for a start condition it's sda

1262
00:46:03,760 --> 00:46:07,119
and the same was the answer for question

1263
00:46:07,119 --> 00:46:09,280
two of question one part two question

1264
00:46:09,280 --> 00:46:12,079
one sda goes high first in a stop

1265
00:46:12,079 --> 00:46:13,359
condition

1266
00:46:13,359 --> 00:46:16,480
in order to signal a start or a stop the

1267
00:46:16,480 --> 00:46:17,359
data online

1268
00:46:17,359 --> 00:46:21,119
must change why s while scl is high

1269
00:46:21,119 --> 00:46:23,680
this is the only time this is allowed so

1270
00:46:23,680 --> 00:46:24,480
that is

1271
00:46:24,480 --> 00:46:27,760
why sda has to change first is the only

1272
00:46:27,760 --> 00:46:31,440
way to signal a start or stop

1273
00:46:32,319 --> 00:46:34,319
question two how many bits does an i

1274
00:46:34,319 --> 00:46:35,920
squared c address have it has

1275
00:46:35,920 --> 00:46:38,560
seven bits and once the read write bit

1276
00:46:38,560 --> 00:46:40,640
is added they're eight bits so

1277
00:46:40,640 --> 00:46:42,400
either of those answers is technically

1278
00:46:42,400 --> 00:46:44,640
correct

1279
00:46:44,640 --> 00:46:47,760
one wire addresses have 64 bits

1280
00:46:47,760 --> 00:46:51,520
or 8 bytes either of those is an

1281
00:46:51,520 --> 00:46:54,480
acceptable answer

1282
00:46:55,359 --> 00:46:58,240
question three that extra bit at the end

1283
00:46:58,240 --> 00:47:00,160
of i squared c transmissions is called

1284
00:47:00,160 --> 00:47:00,880
the ack

1285
00:47:00,880 --> 00:47:04,160
or knack bit the side that sends it

1286
00:47:04,160 --> 00:47:06,800
is the one that is currently listening

1287
00:47:06,800 --> 00:47:08,720
so whatever side is currently receiving

1288
00:47:08,720 --> 00:47:09,920
data is the one that

1289
00:47:09,920 --> 00:47:11,760
sends the acknowledges or not

1290
00:47:11,760 --> 00:47:12,960
acknowledge

1291
00:47:12,960 --> 00:47:15,520
and if it's not sent if we don't send an

1292
00:47:15,520 --> 00:47:16,160
acknowledge

1293
00:47:16,160 --> 00:47:18,000
it becomes a knack because of the

1294
00:47:18,000 --> 00:47:19,280
pull-up resistor

1295
00:47:19,280 --> 00:47:22,480
so by default it goes into a known state

1296
00:47:22,480 --> 00:47:25,839
and transmission ends

1297
00:47:27,280 --> 00:47:32,000
okay page two

1298
00:47:32,000 --> 00:47:35,119
question four the two most common speeds

1299
00:47:35,119 --> 00:47:36,240
for i squared c

1300
00:47:36,240 --> 00:47:39,280
are 100 kilohertz and 400 kilohertz

1301
00:47:39,280 --> 00:47:41,599
which are called standard mode and fast

1302
00:47:41,599 --> 00:47:43,440
mode respectively

1303
00:47:43,440 --> 00:47:46,079
one megahertz is called fast mode plus

1304
00:47:46,079 --> 00:47:49,839
and 3.4 megahertz is high speed mode

1305
00:47:49,839 --> 00:47:52,720
so those are the common names as well

1306
00:47:52,720 --> 00:47:55,839
one wire runs at 16.7 kilobits by

1307
00:47:55,839 --> 00:47:56,640
default

1308
00:47:56,640 --> 00:47:59,760
or 16.7 kilohertz is an acceptable

1309
00:47:59,760 --> 00:48:00,480
answer

1310
00:48:00,480 --> 00:48:03,599
and it runs at 167 kilobits per second

1311
00:48:03,599 --> 00:48:05,040
in overdrive mode

1312
00:48:05,040 --> 00:48:08,960
that's exactly ten times faster

1313
00:48:09,599 --> 00:48:12,960
question five the main one wire

1314
00:48:12,960 --> 00:48:14,640
addressing commands are called

1315
00:48:14,640 --> 00:48:19,200
matron read rom skip rom and search rom

1316
00:48:19,200 --> 00:48:20,880
and it's the last one of those search

1317
00:48:20,880 --> 00:48:22,400
rom that we try and avoid because the

1318
00:48:22,400 --> 00:48:24,079
algorithm is fairly complex and

1319
00:48:24,079 --> 00:48:26,160
difficult to implement

1320
00:48:26,160 --> 00:48:28,240
if you need it of course then it's you

1321
00:48:28,240 --> 00:48:30,000
know you need it but if you don't need

1322
00:48:30,000 --> 00:48:30,960
it then

1323
00:48:30,960 --> 00:48:32,800
you may as well just try and use read

1324
00:48:32,800 --> 00:48:34,000
rom or skip rom

1325
00:48:34,000 --> 00:48:37,680
if you can question six

1326
00:48:37,680 --> 00:48:40,079
the mode that one wire devices use when

1327
00:48:40,079 --> 00:48:41,520
they're powered from the data line is

1328
00:48:41,520 --> 00:48:43,359
called parasitic power mode

1329
00:48:43,359 --> 00:48:45,920
it's kind of like a parasite sucking on

1330
00:48:45,920 --> 00:48:48,160
the data line i guess

1331
00:48:48,160 --> 00:48:50,640
it stores the charge internally through

1332
00:48:50,640 --> 00:48:52,720
a diode into a capacitor that's

1333
00:48:52,720 --> 00:48:53,520
typically about

1334
00:48:53,520 --> 00:48:56,640
80 picofarads

1335
00:48:58,000 --> 00:49:01,359
okay answer is page 3.

1336
00:49:01,359 --> 00:49:03,440
so if two i squared z devices start

1337
00:49:03,440 --> 00:49:04,960
talking at the same time

1338
00:49:04,960 --> 00:49:07,119
bus arbitration occurs that's what it's

1339
00:49:07,119 --> 00:49:09,440
called it's non-destructive

1340
00:49:09,440 --> 00:49:12,079
with i squared c each device checks to

1341
00:49:12,079 --> 00:49:13,760
make sure the state of the bus

1342
00:49:13,760 --> 00:49:16,319
is as they set it so if there's a

1343
00:49:16,319 --> 00:49:17,119
mismatch

1344
00:49:17,119 --> 00:49:18,800
then another device is transmitting and

1345
00:49:18,800 --> 00:49:20,720
they must wait for a stop condition

1346
00:49:20,720 --> 00:49:24,400
before trying to transmit again

1347
00:49:24,400 --> 00:49:26,079
because of the pull-up resistor bus

1348
00:49:26,079 --> 00:49:28,319
arbitration is automatic and it resolves

1349
00:49:28,319 --> 00:49:30,960
itself without damaging any data so we

1350
00:49:30,960 --> 00:49:32,480
we don't need to implement it in

1351
00:49:32,480 --> 00:49:34,800
software it's taken care of for us

1352
00:49:34,800 --> 00:49:36,880
just by us checking to make sure that

1353
00:49:36,880 --> 00:49:37,839
the bus is

1354
00:49:37,839 --> 00:49:40,960
as it's supposed to be

1355
00:49:41,359 --> 00:49:44,480
question eight one wire devices can tell

1356
00:49:44,480 --> 00:49:46,559
that more than one device responded

1357
00:49:46,559 --> 00:49:47,760
because the crc

1358
00:49:47,760 --> 00:49:50,800
checksum at the end of the data at the

1359
00:49:50,800 --> 00:49:53,520
end of the address will be incorrect

1360
00:49:53,520 --> 00:49:55,520
if that happens it should then use the

1361
00:49:55,520 --> 00:49:57,920
search rom algorithm to enumerate every

1362
00:49:57,920 --> 00:49:59,119
device on the bus

1363
00:49:59,119 --> 00:50:03,280
and get all their addresses individually

1364
00:50:03,280 --> 00:50:07,040
and question nine the major similarities

1365
00:50:07,040 --> 00:50:08,960
are that both use external pull-up

1366
00:50:08,960 --> 00:50:11,040
resistors and open drain outputs to

1367
00:50:11,040 --> 00:50:12,960
control the bus

1368
00:50:12,960 --> 00:50:15,200
and because of this too much capacitance

1369
00:50:15,200 --> 00:50:16,960
will slow bus communication

1370
00:50:16,960 --> 00:50:19,599
down this can be corrected with a

1371
00:50:19,599 --> 00:50:21,040
stronger pull-up resistor

1372
00:50:21,040 --> 00:50:24,160
by lowering the value of the resistor or

1373
00:50:24,160 --> 00:50:26,559
by somehow decreasing capacitance on the

1374
00:50:26,559 --> 00:50:28,960
bus by removing devices or by shortening

1375
00:50:28,960 --> 00:50:31,599
the cables

1376
00:50:31,760 --> 00:50:34,640
so how did you score did you get most of

1377
00:50:34,640 --> 00:50:37,359
all nine questions correct

1378
00:50:37,359 --> 00:50:39,520
if you got most or all of i'm correct

1379
00:50:39,520 --> 00:50:40,720
awesome good work

1380
00:50:40,720 --> 00:50:43,359
that's really awesome if you missed

1381
00:50:43,359 --> 00:50:44,319
questions that's

1382
00:50:44,319 --> 00:50:47,359
totally fine there as i said

1383
00:50:47,359 --> 00:50:48,880
at the beginning it's more important

1384
00:50:48,880 --> 00:50:50,880
than memorizing things is knowing where

1385
00:50:50,880 --> 00:50:52,720
to look to get the answers

1386
00:50:52,720 --> 00:50:54,960
so review the slides if you need to you

1387
00:50:54,960 --> 00:50:57,040
can download the slides from the class

1388
00:50:57,040 --> 00:50:58,800
page

1389
00:50:58,800 --> 00:51:00,480
or you can review the videos for the

1390
00:51:00,480 --> 00:51:02,559
earlier weeks or there's lots of other

1391
00:51:02,559 --> 00:51:04,640
resources on one wire and i squared c

1392
00:51:04,640 --> 00:51:07,599
out there if you find any good websites

1393
00:51:07,599 --> 00:51:08,000
that

1394
00:51:08,000 --> 00:51:09,200
you really like and make sure you

1395
00:51:09,200 --> 00:51:10,960
bookmark them because when you run into

1396
00:51:10,960 --> 00:51:13,359
issues it's good to have bookmarks handy

1397
00:51:13,359 --> 00:51:14,319
of

1398
00:51:14,319 --> 00:51:16,720
websites and locations you found that

1399
00:51:16,720 --> 00:51:18,160
give you the information you need

1400
00:51:18,160 --> 00:51:19,839
quickly

1401
00:51:19,839 --> 00:51:22,880
and again if you want a textbook for i

1402
00:51:22,880 --> 00:51:23,680
squared c

1403
00:51:23,680 --> 00:51:25,599
mastering the i squared c bus by vincent

1404
00:51:25,599 --> 00:51:27,119
hempy is

1405
00:51:27,119 --> 00:51:29,280
basically the best and only textbook out

1406
00:51:29,280 --> 00:51:31,200
there it's available from elektor which

1407
00:51:31,200 --> 00:51:34,240
is a european electronics outlet

1408
00:51:34,240 --> 00:51:36,000
so you have to paint your oils and have

1409
00:51:36,000 --> 00:51:37,760
it shipped over here sometimes they pop

1410
00:51:37,760 --> 00:51:39,200
up on amazon

1411
00:51:39,200 --> 00:51:41,839
it goes into a huge amount of detail on

1412
00:51:41,839 --> 00:51:43,040
i squared c

1413
00:51:43,040 --> 00:51:45,040
uh and includes a whole bunch of example

1414
00:51:45,040 --> 00:51:46,640
circuits if you buy it directly from

1415
00:51:46,640 --> 00:51:49,440
elector i think it comes with pcbs

1416
00:51:49,440 --> 00:51:52,319
in the book that you can then solder up

1417
00:51:52,319 --> 00:51:54,000
and you have some example circuits to

1418
00:51:54,000 --> 00:51:56,960
play with which is really really cool

1419
00:51:56,960 --> 00:51:59,040
so congratulations you've made it all

1420
00:51:59,040 --> 00:52:00,559
the way to the end of embedded serial

1421
00:52:00,559 --> 00:52:02,800
buses part one

1422
00:52:02,800 --> 00:52:04,480
make sure you try implementing all these

1423
00:52:04,480 --> 00:52:06,559
examples on the real hardware

1424
00:52:06,559 --> 00:52:08,880
um make sure you go back if you've got

1425
00:52:08,880 --> 00:52:12,480
your msp 430 and your sht 31

1426
00:52:12,480 --> 00:52:16,240
make sure you run those examples pick up

1427
00:52:16,240 --> 00:52:18,400
a logic analyzer if you need or the

1428
00:52:18,400 --> 00:52:19,520
other things we use

1429
00:52:19,520 --> 00:52:22,240
the lcd with the i squared c backpack

1430
00:52:22,240 --> 00:52:24,079
the bmp 180

1431
00:52:24,079 --> 00:52:25,839
any one wired devices that you want to

1432
00:52:25,839 --> 00:52:27,200
play with

1433
00:52:27,200 --> 00:52:29,520
give it a try the best way to learn is

1434
00:52:29,520 --> 00:52:31,440
by following the examples seeing how

1435
00:52:31,440 --> 00:52:32,000
they work

1436
00:52:32,000 --> 00:52:34,240
and then adapting them to use with other

1437
00:52:34,240 --> 00:52:36,079
chips

1438
00:52:36,079 --> 00:52:38,559
if you run into issues you can always

1439
00:52:38,559 --> 00:52:40,400
comment on the course page

1440
00:52:40,400 --> 00:52:43,280
you can there's now a course chat room

1441
00:52:43,280 --> 00:52:46,079
on hackaday.io which is really cool

1442
00:52:46,079 --> 00:52:49,040
you can always email me or you can ask

1443
00:52:49,040 --> 00:52:51,119
any online community that's involved in

1444
00:52:51,119 --> 00:52:53,200
electronics there's quite a few of them

1445
00:52:53,200 --> 00:52:55,359
hackaday of course but there's many

1446
00:52:55,359 --> 00:52:57,119
others out there

1447
00:52:57,119 --> 00:52:59,520
stay tuned to hackaday twitter and the

1448
00:52:59,520 --> 00:53:01,119
hackaday email newsletter for

1449
00:53:01,119 --> 00:53:02,640
information about part two of this

1450
00:53:02,640 --> 00:53:04,960
course which isn't confirmed yet

1451
00:53:04,960 --> 00:53:06,880
if we do do the part two it'll be

1452
00:53:06,880 --> 00:53:08,960
covering uart and spi it'll probably

1453
00:53:08,960 --> 00:53:12,000
take place in january

1454
00:53:12,000 --> 00:53:14,800
that's it i really want to thank you for

1455
00:53:14,800 --> 00:53:16,319
attending this course

1456
00:53:16,319 --> 00:53:18,800
um if you have any feedback on the

1457
00:53:18,800 --> 00:53:20,240
course that would be really really

1458
00:53:20,240 --> 00:53:21,440
appreciated

1459
00:53:21,440 --> 00:53:22,640
some of these videos might be

1460
00:53:22,640 --> 00:53:25,280
re-recorded for any small errors that i

1461
00:53:25,280 --> 00:53:25,680
made

1462
00:53:25,680 --> 00:53:27,280
if there's things you liked or didn't

1463
00:53:27,280 --> 00:53:29,040
like let me know

1464
00:53:29,040 --> 00:53:32,240
that means a lot to me um i hope i did a

1465
00:53:32,240 --> 00:53:33,200
good job

1466
00:53:33,200 --> 00:53:36,720
and thanks a huge thanks to hackaday you

1467
00:53:36,720 --> 00:53:37,040
for

1468
00:53:37,040 --> 00:53:39,119
doing this for partnering with me to

1469
00:53:39,119 --> 00:53:40,839
teach you this course

1470
00:53:40,839 --> 00:53:43,760
um they're working on non-profit

1471
00:53:43,760 --> 00:53:44,559
education

1472
00:53:44,559 --> 00:53:46,720
it's a really really cool model pay what

1473
00:53:46,720 --> 00:53:48,319
you like and

1474
00:53:48,319 --> 00:53:49,760
i really really hope you learned

1475
00:53:49,760 --> 00:53:52,400
something and now you are all

1476
00:53:52,400 --> 00:53:54,480
officially you can put this on your

1477
00:53:54,480 --> 00:53:57,200
resumes you are official

1478
00:53:57,200 --> 00:54:00,319
embedded serial bus ninjas you are an

1479
00:54:00,319 --> 00:54:03,440
i squared c ninja and one wire ninjas

1480
00:54:03,440 --> 00:54:06,000
so you can get out there and chop up any

1481
00:54:06,000 --> 00:54:08,480
circus and use your ninja skills

1482
00:54:08,480 --> 00:54:10,720
to fix any i squared c or one wire

1483
00:54:10,720 --> 00:54:11,839
problems you come across

1484
00:54:11,839 --> 00:54:14,880
so thank you so so very much and

1485
00:54:14,880 --> 00:54:16,559
hopefully we will see you for part two

1486
00:54:16,559 --> 00:54:23,359
of the course

