1
00:00:00,000 --> 00:00:08,559
[Music]

2
00:00:08,559 --> 00:00:10,320
welcome back to interactive art using

3
00:00:10,320 --> 00:00:11,599
sensors in light

4
00:00:11,599 --> 00:00:13,040
in our first class we looked at how to

5
00:00:13,040 --> 00:00:14,880
use capacitive touch sensing to trigger

6
00:00:14,880 --> 00:00:16,960
sound output in the second class we'll

7
00:00:16,960 --> 00:00:19,279
learn how to use leds to output light

8
00:00:19,279 --> 00:00:21,039
we'll get some inspiration for wearables

9
00:00:21,039 --> 00:00:22,480
and installations and learn how to

10
00:00:22,480 --> 00:00:24,480
create beautiful lighting animations

11
00:00:24,480 --> 00:00:26,640
moving patterns of light we'll also

12
00:00:26,640 --> 00:00:28,480
learn how to use the three sensors that

13
00:00:28,480 --> 00:00:29,920
come onboard the circuit playground

14
00:00:29,920 --> 00:00:30,640
express

15
00:00:30,640 --> 00:00:32,880
the temperature light and sound sensors

16
00:00:32,880 --> 00:00:34,880
to trigger interactive events

17
00:00:34,880 --> 00:00:36,880
we'll continue to develop our c plus

18
00:00:36,880 --> 00:00:38,399
programming skills as we learn about

19
00:00:38,399 --> 00:00:39,440
float variables

20
00:00:39,440 --> 00:00:42,399
if else if statements and while loops

21
00:00:42,399 --> 00:00:44,079
we've got a lot to cover today so let's

22
00:00:44,079 --> 00:00:46,559
get started

23
00:00:46,559 --> 00:00:48,320
if you're jumping into this course for

24
00:00:48,320 --> 00:00:50,520
the first time please visit

25
00:00:50,520 --> 00:00:52,000
mirabellejones.com

26
00:00:52,000 --> 00:00:56,000
forward slash hackaday hyphen sensors

27
00:00:56,000 --> 00:00:58,160
here you'll find links to the github

28
00:00:58,160 --> 00:00:59,840
that will have all of the course

29
00:00:59,840 --> 00:01:02,320
source code and also links to the

30
00:01:02,320 --> 00:01:03,199
slideshows

31
00:01:03,199 --> 00:01:06,400
which have links in turn

32
00:01:06,400 --> 00:01:08,320
and if you need help getting set up you

33
00:01:08,320 --> 00:01:11,119
can find the slides for class 1

34
00:01:11,119 --> 00:01:12,640
which will walk you through how to

35
00:01:12,640 --> 00:01:14,479
install the adafruit circuit playground

36
00:01:14,479 --> 00:01:14,960
board

37
00:01:14,960 --> 00:01:17,280
and library and also how to install

38
00:01:17,280 --> 00:01:18,240
arduino

39
00:01:18,240 --> 00:01:19,759
if you don't have your environment set

40
00:01:19,759 --> 00:01:22,240
up yet

41
00:01:22,640 --> 00:01:26,240
an led is a light emitting diode

42
00:01:26,240 --> 00:01:29,920
when current passes through the led

43
00:01:29,920 --> 00:01:33,439
it causes the led to light up

44
00:01:33,520 --> 00:01:35,439
to get to our example sketches we want

45
00:01:35,439 --> 00:01:36,880
to go to file

46
00:01:36,880 --> 00:01:38,960
examples and then down to adafruit

47
00:01:38,960 --> 00:01:41,040
circuit playground

48
00:01:41,040 --> 00:01:42,560
here you'll see a whole bunch of

49
00:01:42,560 --> 00:01:45,759
sketches that you can use

50
00:01:46,320 --> 00:01:47,840
you can really dig into these to learn

51
00:01:47,840 --> 00:01:50,320
how to use the microphone

52
00:01:50,320 --> 00:01:53,360
the light sensor and more but for

53
00:01:53,360 --> 00:01:54,079
starters

54
00:01:54,079 --> 00:01:57,119
let's just blink this led to get to the

55
00:01:57,119 --> 00:01:59,119
blink sketch we want to go to

56
00:01:59,119 --> 00:02:01,840
hello circuit playground underneath

57
00:02:01,840 --> 00:02:03,600
hello circuit playground there are some

58
00:02:03,600 --> 00:02:05,280
introductory sketches that should get

59
00:02:05,280 --> 00:02:07,280
you started using some of the onboard

60
00:02:07,280 --> 00:02:09,919
sensors of the circuit playground

61
00:02:09,919 --> 00:02:12,959
let's start with blink

62
00:02:12,959 --> 00:02:14,640
in this sketch we see that we're

63
00:02:14,640 --> 00:02:16,160
including the adafruit circuit

64
00:02:16,160 --> 00:02:17,360
playground library

65
00:02:17,360 --> 00:02:20,560
this is the first line of our sketch

66
00:02:20,560 --> 00:02:22,879
then we have a setup function and a loop

67
00:02:22,879 --> 00:02:24,400
function

68
00:02:24,400 --> 00:02:26,160
these are the two main functions in

69
00:02:26,160 --> 00:02:28,080
arduino

70
00:02:28,080 --> 00:02:30,400
in our setup we're initializing the

71
00:02:30,400 --> 00:02:31,840
circuit playground

72
00:02:31,840 --> 00:02:34,640
circuit playground.begin we'll need to

73
00:02:34,640 --> 00:02:35,120
do this

74
00:02:35,120 --> 00:02:37,360
every time we want to use any function

75
00:02:37,360 --> 00:02:40,720
that's in the circuit playground library

76
00:02:40,720 --> 00:02:43,120
then in our loop we're saying circuit

77
00:02:43,120 --> 00:02:43,840
playground

78
00:02:43,840 --> 00:02:46,879
dot red led high

79
00:02:46,879 --> 00:02:49,519
then we have a delay of 500 milliseconds

80
00:02:49,519 --> 00:02:50,000
or half

81
00:02:50,000 --> 00:02:52,640
of the second then we're saying circuit

82
00:02:52,640 --> 00:02:54,319
playground.red led

83
00:02:54,319 --> 00:02:56,800
low and then have another delay for half

84
00:02:56,800 --> 00:02:58,560
a second

85
00:02:58,560 --> 00:03:00,560
what this sketch is doing is it's

86
00:03:00,560 --> 00:03:02,000
targeting the red led

87
00:03:02,000 --> 00:03:04,400
which is d13 on the circuit playground

88
00:03:04,400 --> 00:03:05,440
express

89
00:03:05,440 --> 00:03:07,599
this is an indicator led that's a single

90
00:03:07,599 --> 00:03:08,800
color led

91
00:03:08,800 --> 00:03:11,280
just like the one i showed in the video

92
00:03:11,280 --> 00:03:13,120
this led will light up when current

93
00:03:13,120 --> 00:03:14,000
passes through

94
00:03:14,000 --> 00:03:16,560
again just like i showed in the video so

95
00:03:16,560 --> 00:03:18,400
what we're doing is we're saying

96
00:03:18,400 --> 00:03:21,760
hi which is sending the maximum voltage

97
00:03:21,760 --> 00:03:25,680
that we can to this led 255

98
00:03:25,680 --> 00:03:28,319
then we're setting it to low meaning

99
00:03:28,319 --> 00:03:29,920
that we're setting it to zero

100
00:03:29,920 --> 00:03:32,879
the lowest amount that we can send it

101
00:03:32,879 --> 00:03:34,879
and we have a delay in between

102
00:03:34,879 --> 00:03:36,799
so when we upload this we should see the

103
00:03:36,799 --> 00:03:38,239
led blink

104
00:03:38,239 --> 00:03:40,720
let's give it a try to upload a sketch

105
00:03:40,720 --> 00:03:43,120
you want to go to the arrow at the top

106
00:03:43,120 --> 00:03:45,920
if you hover over this it'll say upload

107
00:03:45,920 --> 00:03:47,519
you also want to make sure that you have

108
00:03:47,519 --> 00:03:48,159
the correct

109
00:03:48,159 --> 00:03:52,640
board and port selected

110
00:03:53,280 --> 00:03:55,120
once you know that this is the case

111
00:03:55,120 --> 00:03:58,879
click the arrow to upload your sketch

112
00:03:59,120 --> 00:04:00,879
you'll see the leds on the circuit

113
00:04:00,879 --> 00:04:02,640
playground go from red

114
00:04:02,640 --> 00:04:05,439
then to green when they've gone to green

115
00:04:05,439 --> 00:04:06,560
you know that it's been

116
00:04:06,560 --> 00:04:09,599
uploaded correctly

117
00:04:09,680 --> 00:04:12,879
now we can see the red indicator led d13

118
00:04:12,879 --> 00:04:15,840
blinking

119
00:04:17,918 --> 00:04:19,600
if you encounter any problems uploading

120
00:04:19,600 --> 00:04:21,199
your sketch you can press the reset

121
00:04:21,199 --> 00:04:22,320
button twice

122
00:04:22,320 --> 00:04:24,560
and reset your controller for your first

123
00:04:24,560 --> 00:04:26,639
challenge try going back to the sketch

124
00:04:26,639 --> 00:04:28,479
and trying to get the led to blink at a

125
00:04:28,479 --> 00:04:30,160
different rate as a hint

126
00:04:30,160 --> 00:04:33,199
try using a different delay value what

127
00:04:33,199 --> 00:04:34,960
is a neopixel

128
00:04:34,960 --> 00:04:38,160
each rgb led or neopixel is actually

129
00:04:38,160 --> 00:04:40,479
made up of three smaller leds

130
00:04:40,479 --> 00:04:42,960
one red one green and one blue the

131
00:04:42,960 --> 00:04:44,720
combination of these three color

132
00:04:44,720 --> 00:04:46,639
channels creates the visible color of

133
00:04:46,639 --> 00:04:47,840
the led

134
00:04:47,840 --> 00:04:49,600
when all three colors are turned on

135
00:04:49,600 --> 00:04:51,600
you'll see white and when none of them

136
00:04:51,600 --> 00:04:53,680
are that's black so black is always

137
00:04:53,680 --> 00:04:55,440
equivalent to off

138
00:04:55,440 --> 00:04:57,280
other colors are created by mixing the

139
00:04:57,280 --> 00:04:59,199
three color values

140
00:04:59,199 --> 00:05:00,720
you can try this out for yourself by

141
00:05:00,720 --> 00:05:02,720
using the hello neopixel sketch

142
00:05:02,720 --> 00:05:04,479
try changing the last three numbers in

143
00:05:04,479 --> 00:05:06,800
the parentheses to mix the red green

144
00:05:06,800 --> 00:05:09,120
and blue color values let's give this a

145
00:05:09,120 --> 00:05:11,840
try

146
00:05:16,240 --> 00:05:18,720
we see our leds light up with various

147
00:05:18,720 --> 00:05:20,320
rainbow colors

148
00:05:20,320 --> 00:05:25,120
and then they go black

149
00:05:25,120 --> 00:05:28,960
this happens at a half second cycle

150
00:05:31,039 --> 00:05:33,360
it's nice having source code to use but

151
00:05:33,360 --> 00:05:36,160
we learn best by trying things ourselves

152
00:05:36,160 --> 00:05:38,360
let's try changing the values in circuit

153
00:05:38,360 --> 00:05:40,320
playground.set pixel color

154
00:05:40,320 --> 00:05:42,960
to make our own colors can you try

155
00:05:42,960 --> 00:05:43,520
changing

156
00:05:43,520 --> 00:05:47,039
the pixel number and also the rgb values

157
00:05:47,039 --> 00:05:48,960
in the first challenge just try making

158
00:05:48,960 --> 00:05:51,680
your own colors have fun and experiment

159
00:05:51,680 --> 00:05:53,680
for the second challenge try turning all

160
00:05:53,680 --> 00:05:55,280
of them to purple

161
00:05:55,280 --> 00:05:57,280
for the third challenge try turning them

162
00:05:57,280 --> 00:05:58,400
all to white

163
00:05:58,400 --> 00:06:00,479
and then all off and then all white

164
00:06:00,479 --> 00:06:02,160
again

165
00:06:02,160 --> 00:06:04,880
for advanced users try using a for loop

166
00:06:04,880 --> 00:06:07,039
to set the color of all the leds at the

167
00:06:07,039 --> 00:06:08,639
same time

168
00:06:08,639 --> 00:06:12,639
or try making your own animations

169
00:06:15,840 --> 00:06:17,919
this principle of finding an example or

170
00:06:17,919 --> 00:06:19,039
demo sketch

171
00:06:19,039 --> 00:06:20,639
and then experimenting with the

172
00:06:20,639 --> 00:06:23,280
functions and also the variable values

173
00:06:23,280 --> 00:06:25,120
in order to see what they do will serve

174
00:06:25,120 --> 00:06:28,160
you well when learning arduino

175
00:06:28,160 --> 00:06:31,440
programmable rgb leds use an onboard

176
00:06:31,440 --> 00:06:33,280
driver chip to turn the electrical

177
00:06:33,280 --> 00:06:34,960
signals on your data wire

178
00:06:34,960 --> 00:06:37,280
into programmable colors by setting the

179
00:06:37,280 --> 00:06:39,840
red green and blue channels accordingly

180
00:06:39,840 --> 00:06:42,240
the library we'll be using fast led can

181
00:06:42,240 --> 00:06:44,880
handle most programmable led drivers

182
00:06:44,880 --> 00:06:48,639
the most commonly used are ws-2811 2812

183
00:06:48,639 --> 00:06:50,160
and 2813

184
00:06:50,160 --> 00:06:52,240
adafruit's neopixel line are some of our

185
00:06:52,240 --> 00:06:54,240
favorites due to the wide variety of

186
00:06:54,240 --> 00:06:55,759
products they offer

187
00:06:55,759 --> 00:06:57,599
but you can also find more affordable

188
00:06:57,599 --> 00:07:00,400
products online

189
00:07:00,400 --> 00:07:03,759
individual leds you can get surface

190
00:07:03,759 --> 00:07:06,319
mount through-hole and even sewable leds

191
00:07:06,319 --> 00:07:07,599
online

192
00:07:07,599 --> 00:07:09,280
these can be great for embedding subtle

193
00:07:09,280 --> 00:07:11,039
lights into projects or wearables

194
00:07:11,039 --> 00:07:12,639
without ending up with an overt

195
00:07:12,639 --> 00:07:16,080
light strip look

196
00:07:16,080 --> 00:07:19,280
led strip the led workhorse

197
00:07:19,280 --> 00:07:21,599
strip comes in densities from 30 leds

198
00:07:21,599 --> 00:07:24,240
per meter to 144

199
00:07:24,240 --> 00:07:27,440
higher density strips require more power

200
00:07:27,440 --> 00:07:29,919
note the led strip is easily damaged if

201
00:07:29,919 --> 00:07:32,400
you don't take care when installing it

202
00:07:32,400 --> 00:07:34,800
it's best to not bend or crease led

203
00:07:34,800 --> 00:07:35,520
strip

204
00:07:35,520 --> 00:07:37,440
so if you take it around a corner it's

205
00:07:37,440 --> 00:07:39,280
best to cut the strip and solder some

206
00:07:39,280 --> 00:07:42,400
jumper wires between the two strips

207
00:07:42,400 --> 00:07:45,680
led modules these are individual rgb

208
00:07:45,680 --> 00:07:46,479
leds

209
00:07:46,479 --> 00:07:48,639
each sealed into its own waterproof

210
00:07:48,639 --> 00:07:50,800
module with a diffuser

211
00:07:50,800 --> 00:07:53,360
short wires typically four inches

212
00:07:53,360 --> 00:07:55,759
separate each module from the next

213
00:07:55,759 --> 00:07:58,720
great for a light bright look or for

214
00:07:58,720 --> 00:08:00,720
embedding individual pixels into the

215
00:08:00,720 --> 00:08:04,479
surface of complex outdoor artworks

216
00:08:04,479 --> 00:08:07,520
led matrixes these come in square or

217
00:08:07,520 --> 00:08:09,440
rectangular formats

218
00:08:09,440 --> 00:08:12,560
larger matrixes require more power

219
00:08:12,560 --> 00:08:14,560
the leds in your matrix can either be

220
00:08:14,560 --> 00:08:16,560
wired across like a typewriter

221
00:08:16,560 --> 00:08:19,599
or back and forth like a snake fast led

222
00:08:19,599 --> 00:08:20,560
can address both

223
00:08:20,560 --> 00:08:22,160
as long as you tell it which type you

224
00:08:22,160 --> 00:08:24,400
have if your matrix doesn't say

225
00:08:24,400 --> 00:08:26,479
then don't worry experimenting is an

226
00:08:26,479 --> 00:08:29,360
easy way to find out

227
00:08:29,360 --> 00:08:32,000
led rings these come in sizes from about

228
00:08:32,000 --> 00:08:34,320
12 leds up to 60.

229
00:08:34,320 --> 00:08:36,320
the larger rings require two power

230
00:08:36,320 --> 00:08:39,120
injections we'll talk about those later

231
00:08:39,120 --> 00:08:41,200
the smalls can be powered off in arduino

232
00:08:41,200 --> 00:08:42,399
as is

233
00:08:42,399 --> 00:08:44,000
these look cool as they are but they're

234
00:08:44,000 --> 00:08:46,640
also fun to embed inside round objects

235
00:08:46,640 --> 00:08:48,880
they can make cool eyes if you install

236
00:08:48,880 --> 00:08:50,399
them in pairs and are careful with the

237
00:08:50,399 --> 00:08:52,560
programming

238
00:08:52,560 --> 00:08:55,600
side emitting led strip these are

239
00:08:55,600 --> 00:08:57,519
powerful when you want to use led strips

240
00:08:57,519 --> 00:08:59,200
but you need to attach the lights to the

241
00:08:59,200 --> 00:09:00,560
inside of a solid shape

242
00:09:00,560 --> 00:09:03,279
such as a tube or half dome or need them

243
00:09:03,279 --> 00:09:03,920
to shine

244
00:09:03,920 --> 00:09:07,040
out rather than up unlike regular flat

245
00:09:07,040 --> 00:09:08,720
strips these strips can bend to an

246
00:09:08,720 --> 00:09:11,519
extent without damage

247
00:09:11,519 --> 00:09:14,880
led neon these leds are embedded inside

248
00:09:14,880 --> 00:09:17,200
a thick neon look diffuser

249
00:09:17,200 --> 00:09:18,720
they're quite flexible making them

250
00:09:18,720 --> 00:09:21,040
perfect for lining complex surfaces

251
00:09:21,040 --> 00:09:23,360
using as recessed lighting in a room or

252
00:09:23,360 --> 00:09:25,200
making neon art

253
00:09:25,200 --> 00:09:27,440
now it's time to make our own animations

254
00:09:27,440 --> 00:09:29,600
using the fast led library

255
00:09:29,600 --> 00:09:31,600
vast led is a powerful library that

256
00:09:31,600 --> 00:09:33,360
allows us to make many patterns and

257
00:09:33,360 --> 00:09:34,080
animations

258
00:09:34,080 --> 00:09:37,040
pretty easily if you haven't already you

259
00:09:37,040 --> 00:09:39,680
can download the fast led library

260
00:09:39,680 --> 00:09:42,800
to do so go to manage libraries and then

261
00:09:42,800 --> 00:09:45,360
click add fast led

262
00:09:45,360 --> 00:09:47,440
you'll find example sketches from the

263
00:09:47,440 --> 00:09:48,800
fast led library

264
00:09:48,800 --> 00:09:52,399
under file examples fast led

265
00:09:52,399 --> 00:09:54,320
we can use any of the sketches in the

266
00:09:54,320 --> 00:09:56,000
fast led library

267
00:09:56,000 --> 00:09:58,399
with our circuit playground express all

268
00:09:58,399 --> 00:09:59,279
we have to do

269
00:09:59,279 --> 00:10:02,240
is change the data pin to 8. the data

270
00:10:02,240 --> 00:10:02,640
pin

271
00:10:02,640 --> 00:10:07,439
8 is where all the leds are wired to

272
00:10:08,880 --> 00:10:10,720
here's how to install the fast led

273
00:10:10,720 --> 00:10:13,760
library go to manage libraries

274
00:10:13,760 --> 00:10:16,959
and then in the search bar

275
00:10:16,959 --> 00:10:21,200
type in fast led it should be one word

276
00:10:21,200 --> 00:10:24,560
there may be a few options that come up

277
00:10:24,560 --> 00:10:26,480
but we want to grab the first one that's

278
00:10:26,480 --> 00:10:28,800
just called fast led

279
00:10:28,800 --> 00:10:30,959
select the most recent version and then

280
00:10:30,959 --> 00:10:33,839
click install

281
00:10:35,120 --> 00:10:38,000
once it's installed open up fast led's

282
00:10:38,000 --> 00:10:38,880
blink sketch

283
00:10:38,880 --> 00:10:41,519
this can be found under examples fast

284
00:10:41,519 --> 00:10:43,040
led

285
00:10:43,040 --> 00:10:47,839
and blink

286
00:10:51,760 --> 00:10:53,360
you'll notice that this sketch looks

287
00:10:53,360 --> 00:10:54,959
very different from our other blink

288
00:10:54,959 --> 00:10:55,920
sketch

289
00:10:55,920 --> 00:10:58,000
this is because fast led programs

290
00:10:58,000 --> 00:11:01,839
lighting a little differently

291
00:11:02,000 --> 00:11:03,519
first what we'll want to do is comment

292
00:11:03,519 --> 00:11:05,279
out clock pin

293
00:11:05,279 --> 00:11:08,640
we can do this with two forward slashes

294
00:11:08,640 --> 00:11:10,800
then we want to change the define for

295
00:11:10,800 --> 00:11:12,720
data pin to eight

296
00:11:12,720 --> 00:11:15,279
eight is the pin that all of our leds on

297
00:11:15,279 --> 00:11:16,720
board the circuit playground

298
00:11:16,720 --> 00:11:19,600
are connected to then we want to change

299
00:11:19,600 --> 00:11:21,279
the number of leds to 10

300
00:11:21,279 --> 00:11:24,880
there are 10 on-board leds

301
00:11:25,200 --> 00:11:28,720
double check your values then hit upload

302
00:11:28,720 --> 00:11:32,079
hmm only one led is blinking we change

303
00:11:32,079 --> 00:11:34,320
numb leds to 10 so why don't all of them

304
00:11:34,320 --> 00:11:35,519
work

305
00:11:35,519 --> 00:11:39,200
here's why leds within fast led

306
00:11:39,200 --> 00:11:41,680
are treated as elements in an array you

307
00:11:41,680 --> 00:11:43,920
can see the array declaration

308
00:11:43,920 --> 00:11:47,200
on or around line 14. if you don't have

309
00:11:47,200 --> 00:11:48,800
line numbers turned on

310
00:11:48,800 --> 00:11:52,160
you can go to preferences

311
00:11:52,800 --> 00:11:56,000
and then check displaying line numbers

312
00:11:56,000 --> 00:11:59,360
so on line 13 we see crgb

313
00:11:59,360 --> 00:12:03,040
leds num leds as an array

314
00:12:03,040 --> 00:12:05,040
this tells fast led we would like to

315
00:12:05,040 --> 00:12:06,880
reserve space for an array

316
00:12:06,880 --> 00:12:10,720
of 10 crgb objects aka

317
00:12:10,720 --> 00:12:13,839
rgb pixels note that this line

318
00:12:13,839 --> 00:12:15,839
always goes at the top outside of the

319
00:12:15,839 --> 00:12:18,720
setup and loop functions

320
00:12:18,720 --> 00:12:20,720
below you'll see the following line in

321
00:12:20,720 --> 00:12:21,920
setup

322
00:12:21,920 --> 00:12:26,000
fast led add leds neopixel data pin

323
00:12:26,000 --> 00:12:28,720
and then in parentheses leds comma num

324
00:12:28,720 --> 00:12:31,279
leds

325
00:12:33,440 --> 00:12:35,040
this tells fastlady that you have

326
00:12:35,040 --> 00:12:37,440
neopixels on data pin

327
00:12:37,440 --> 00:12:39,519
they're to be stored in the leds array

328
00:12:39,519 --> 00:12:42,160
and there are num leds of them

329
00:12:42,160 --> 00:12:44,880
you always need a fast led to add leds

330
00:12:44,880 --> 00:12:46,800
call and setup when working with fast

331
00:12:46,800 --> 00:12:47,839
led

332
00:12:47,839 --> 00:12:49,600
there are many options for this line

333
00:12:49,600 --> 00:12:51,360
since there are many kinds of leds in

334
00:12:51,360 --> 00:12:52,240
the world

335
00:12:52,240 --> 00:12:53,839
check out the other entries for some

336
00:12:53,839 --> 00:12:56,240
possibilities

337
00:12:56,240 --> 00:12:58,880
anyway scroll down to the loop function

338
00:12:58,880 --> 00:13:00,399
and we'll see why our leds aren't

339
00:13:00,399 --> 00:13:01,360
lighting up

340
00:13:01,360 --> 00:13:05,120
in loop our code says the following leds

341
00:13:05,120 --> 00:13:08,720
0 equals crgb red

342
00:13:08,720 --> 00:13:11,680
then there's a call to fast led show

343
00:13:11,680 --> 00:13:14,399
which is a function of fast led

344
00:13:14,399 --> 00:13:17,279
then we have a delay of half a second

345
00:13:17,279 --> 00:13:18,079
what this says

346
00:13:18,079 --> 00:13:21,519
is light leds number zero to red

347
00:13:21,519 --> 00:13:24,079
then call fast leds show then wait half

348
00:13:24,079 --> 00:13:26,399
a second before continuing

349
00:13:26,399 --> 00:13:28,160
then the code does the exact thing to

350
00:13:28,160 --> 00:13:30,720
set the led at zero back to black

351
00:13:30,720 --> 00:13:32,959
completing our blink cycle these three

352
00:13:32,959 --> 00:13:35,120
lines represent the fundamentals of any

353
00:13:35,120 --> 00:13:36,800
fast led sketch

354
00:13:36,800 --> 00:13:38,959
code that changes the values in the leds

355
00:13:38,959 --> 00:13:41,760
array a fast led dot show call

356
00:13:41,760 --> 00:13:44,320
and some timing code at its ordinary

357
00:13:44,320 --> 00:13:46,079
speed the arduino operates much

358
00:13:46,079 --> 00:13:48,240
too fast for humans to perceive so we

359
00:13:48,240 --> 00:13:49,760
need a way to change our lights more

360
00:13:49,760 --> 00:13:50,959
slowly

361
00:13:50,959 --> 00:13:52,720
note that delay is not the way you

362
00:13:52,720 --> 00:13:54,880
should do this in non-demo code

363
00:13:54,880 --> 00:13:56,560
we'll explain a better way in the next

364
00:13:56,560 --> 00:13:59,519
class the only confusing thing here

365
00:13:59,519 --> 00:14:02,639
is fastly d.show use this call whenever

366
00:14:02,639 --> 00:14:04,639
you want the strip to update

367
00:14:04,639 --> 00:14:06,560
it'll cause fast led to write the

368
00:14:06,560 --> 00:14:08,480
contents of the led array

369
00:14:08,480 --> 00:14:11,040
out to the actual lights often you'll

370
00:14:11,040 --> 00:14:11,680
use just

371
00:14:11,680 --> 00:14:13,920
one fast led show call at the end of

372
00:14:13,920 --> 00:14:15,199
your animation loop

373
00:14:15,199 --> 00:14:16,800
after you've made all the color changes

374
00:14:16,800 --> 00:14:18,720
you want to make this is important

375
00:14:18,720 --> 00:14:21,440
because fastled.show can be an expensive

376
00:14:21,440 --> 00:14:21,839
call

377
00:14:21,839 --> 00:14:24,560
in terms of time if you can call it just

378
00:14:24,560 --> 00:14:25,920
once per timing cycle

379
00:14:25,920 --> 00:14:27,519
you'll improve the efficiency of your

380
00:14:27,519 --> 00:14:30,480
code in the case of this demo however

381
00:14:30,480 --> 00:14:33,199
we have two show calls inside the loop

382
00:14:33,199 --> 00:14:34,800
one for the red color change

383
00:14:34,800 --> 00:14:37,839
and one for the black

384
00:14:40,240 --> 00:14:42,000
and this also happens to answer our

385
00:14:42,000 --> 00:14:43,680
question from earlier

386
00:14:43,680 --> 00:14:45,839
only one led is blinking because we're

387
00:14:45,839 --> 00:14:47,839
only changing leds

388
00:14:47,839 --> 00:14:52,959
zero which is the first led in our array

389
00:14:52,959 --> 00:14:55,440
note that arrays always count from zero

390
00:14:55,440 --> 00:14:56,320
and stop at

391
00:14:56,320 --> 00:14:59,440
one minus num leds in this case zero

392
00:14:59,440 --> 00:15:00,480
through nine

393
00:15:00,480 --> 00:15:02,800
it might seem intuitive to copy and

394
00:15:02,800 --> 00:15:04,399
paste

395
00:15:04,399 --> 00:15:08,560
in order to get all of the leds to show

396
00:15:08,800 --> 00:15:13,839
but this takes a long time

397
00:15:14,720 --> 00:15:17,199
maybe there's a better way to do this

398
00:15:17,199 --> 00:15:18,720
when you have this many pixels

399
00:15:18,720 --> 00:15:20,480
it's not really practical to copy and

400
00:15:20,480 --> 00:15:22,800
paste thus we're going to use a control

401
00:15:22,800 --> 00:15:24,720
structure called a for loop to do the

402
00:15:24,720 --> 00:15:25,839
work for us

403
00:15:25,839 --> 00:15:28,240
change your code to look like so first

404
00:15:28,240 --> 00:15:29,120
we're going to write

405
00:15:29,120 --> 00:15:32,800
4 opening parentheses

406
00:15:32,800 --> 00:15:35,920
int which stands for integer and number

407
00:15:35,920 --> 00:15:38,399
i which is a variable and we're going to

408
00:15:38,399 --> 00:15:41,600
start at zero

409
00:15:41,600 --> 00:15:45,120
while i is less than

410
00:15:45,440 --> 00:15:48,560
num leds which we already set earlier to

411
00:15:48,560 --> 00:15:50,800
10

412
00:15:50,880 --> 00:15:55,839
then we want to increase it i plus plus

413
00:15:57,040 --> 00:16:00,160
now what we want to do is instead of

414
00:16:00,160 --> 00:16:01,360
changing

415
00:16:01,360 --> 00:16:06,480
0 to red we want to change any led

416
00:16:06,480 --> 00:16:09,440
that is i to red then we're still going

417
00:16:09,440 --> 00:16:11,440
to do fast led show

418
00:16:11,440 --> 00:16:14,320
and then a delay now we want to do the

419
00:16:14,320 --> 00:16:15,519
same thing

420
00:16:15,519 --> 00:16:18,560
for turning the leds off

421
00:16:18,560 --> 00:16:20,399
you can type this out again or you can

422
00:16:20,399 --> 00:16:22,639
copy and paste

423
00:16:22,639 --> 00:16:24,880
again we're going to have this for loop

424
00:16:24,880 --> 00:16:26,480
and then instead of changing it to red

425
00:16:26,480 --> 00:16:27,759
we want to turn them off

426
00:16:27,759 --> 00:16:30,880
which remember is black

427
00:16:30,880 --> 00:16:37,839
let's give this a try

428
00:16:37,839 --> 00:16:40,079
now let's try an experiment what if in

429
00:16:40,079 --> 00:16:41,759
our for loop instead of having

430
00:16:41,759 --> 00:16:45,279
i as less than num leds we had

431
00:16:45,279 --> 00:16:49,839
i less than num leds divided by

432
00:16:49,839 --> 00:16:53,519
let's try this for both of our for loops

433
00:16:53,519 --> 00:16:55,920
what do you think will happen can you

434
00:16:55,920 --> 00:16:57,440
guess

435
00:16:57,440 --> 00:16:59,279
we'll see the first half of our leds

436
00:16:59,279 --> 00:17:01,680
light up

437
00:17:02,399 --> 00:17:05,359
let's make another change to our sketch

438
00:17:05,359 --> 00:17:07,280
what if instead of dividing the number

439
00:17:07,280 --> 00:17:08,880
of leds by 2

440
00:17:08,880 --> 00:17:12,160
for our up to in our array what if we

441
00:17:12,160 --> 00:17:13,119
changed int

442
00:17:13,119 --> 00:17:16,480
i to equal the number of leds divided by

443
00:17:16,480 --> 00:17:17,039
2.

444
00:17:17,039 --> 00:17:19,199
let's try doing this in both of our for

445
00:17:19,199 --> 00:17:21,520
loops

446
00:17:23,199 --> 00:17:25,760
can you guess what will happen now we

447
00:17:25,760 --> 00:17:29,520
see the other half of our leds light up

448
00:17:29,520 --> 00:17:31,200
by this point you may have worked out

449
00:17:31,200 --> 00:17:32,640
how for loops work

450
00:17:32,640 --> 00:17:34,240
you give them a starting point and

451
00:17:34,240 --> 00:17:36,480
ending point and instructions to execute

452
00:17:36,480 --> 00:17:37,840
at each step of the loop

453
00:17:37,840 --> 00:17:40,000
in most cases i plus plus which is a

454
00:17:40,000 --> 00:17:41,760
shorthand way of writing the most common

455
00:17:41,760 --> 00:17:42,720
iterator

456
00:17:42,720 --> 00:17:46,000
i equals i plus one aka do this for

457
00:17:46,000 --> 00:17:48,799
every entry in the array let's go back

458
00:17:48,799 --> 00:17:50,559
to our basic for loop

459
00:17:50,559 --> 00:17:53,200
what if instead of having i plus plus

460
00:17:53,200 --> 00:17:54,559
since this means

461
00:17:54,559 --> 00:17:57,919
i equals i plus 1 we had i

462
00:17:57,919 --> 00:18:01,840
equals i plus 2. let's try making this

463
00:18:01,840 --> 00:18:04,960
change for both of our for loops

464
00:18:04,960 --> 00:18:08,160
can you guess what will happen

465
00:18:08,960 --> 00:18:11,679
now we see every other pixel blank i bet

466
00:18:11,679 --> 00:18:13,679
you get the picture

467
00:18:13,679 --> 00:18:15,679
you'll use for loops later on to develop

468
00:18:15,679 --> 00:18:17,440
more complex lighting patterns

469
00:18:17,440 --> 00:18:19,280
to read more about for loops see the

470
00:18:19,280 --> 00:18:21,840
reference here

471
00:18:21,840 --> 00:18:23,360
one important thing to remember when

472
00:18:23,360 --> 00:18:25,120
experimenting with for loops is that

473
00:18:25,120 --> 00:18:26,880
trying to write to an array element

474
00:18:26,880 --> 00:18:28,960
which is beyond the end of your array

475
00:18:28,960 --> 00:18:32,240
as defined in num leds may cause crashes

476
00:18:32,240 --> 00:18:35,280
freezes and other undesirable effects

477
00:18:35,280 --> 00:18:37,200
likewise reading beyond the end of an

478
00:18:37,200 --> 00:18:40,080
array will return unexpected values

479
00:18:40,080 --> 00:18:41,280
because you're actually reading them

480
00:18:41,280 --> 00:18:43,120
from whatever happens to be stored right

481
00:18:43,120 --> 00:18:44,559
after your array

482
00:18:44,559 --> 00:18:47,280
these off by one errors are an extremely

483
00:18:47,280 --> 00:18:48,720
common cause of bugs

484
00:18:48,720 --> 00:18:51,440
even for seasoned programmers so always

485
00:18:51,440 --> 00:18:53,280
check your code to ensure that you don't

486
00:18:53,280 --> 00:18:55,679
access any pixels beyond the end of your

487
00:18:55,679 --> 00:18:56,160
num

488
00:18:56,160 --> 00:18:59,440
leds array when you're finished save the

489
00:18:59,440 --> 00:18:59,919
file

490
00:18:59,919 --> 00:19:02,400
we'll call it basic led playground you

491
00:19:02,400 --> 00:19:05,200
can use it as an example later on

492
00:19:05,200 --> 00:19:06,880
now let's go further with fast led

493
00:19:06,880 --> 00:19:09,039
sketches there are lots of ways to

494
00:19:09,039 --> 00:19:10,960
animate your leds instead of just

495
00:19:10,960 --> 00:19:12,400
turning them to one color

496
00:19:12,400 --> 00:19:14,480
a good place to start is with the fastly

497
00:19:14,480 --> 00:19:16,480
sketches in arduino

498
00:19:16,480 --> 00:19:19,600
to access them go to file examples and

499
00:19:19,600 --> 00:19:21,840
down to fast led

500
00:19:21,840 --> 00:19:23,360
there you'll see lots of sketches that

501
00:19:23,360 --> 00:19:25,200
you can play with but let's start with

502
00:19:25,200 --> 00:19:26,320
cylon

503
00:19:26,320 --> 00:19:28,320
here we see a very similar setup to what

504
00:19:28,320 --> 00:19:30,480
we had before

505
00:19:30,480 --> 00:19:33,280
to use cylon or any fast led sketch with

506
00:19:33,280 --> 00:19:35,120
our onboard leds for the circuit

507
00:19:35,120 --> 00:19:36,720
playground we want to change the number

508
00:19:36,720 --> 00:19:38,720
of leds to 10

509
00:19:38,720 --> 00:19:41,600
and the data pin to 8. we can ignore

510
00:19:41,600 --> 00:19:44,159
clock pin

511
00:19:45,120 --> 00:19:47,120
then we see we're creating an array a

512
00:19:47,120 --> 00:19:49,679
crgb array of leds

513
00:19:49,679 --> 00:19:51,840
we've added our leds and we've set the

514
00:19:51,840 --> 00:19:53,520
brightness to 84

515
00:19:53,520 --> 00:19:55,520
you can change this to any value up to

516
00:19:55,520 --> 00:19:57,760
255.

517
00:19:57,760 --> 00:20:00,480
then we see a function called fade all

518
00:20:00,480 --> 00:20:02,159
and a for loop

519
00:20:02,159 --> 00:20:04,159
in this for loop we see we're starting

520
00:20:04,159 --> 00:20:05,440
at zero

521
00:20:05,440 --> 00:20:08,080
we're going up to the number of leds and

522
00:20:08,080 --> 00:20:10,080
then we're iterating

523
00:20:10,080 --> 00:20:13,039
and then as we're doing so we're scaling

524
00:20:13,039 --> 00:20:15,120
something

525
00:20:15,120 --> 00:20:16,559
let's have a look and see if we can

526
00:20:16,559 --> 00:20:18,840
figure out what that is once we animate

527
00:20:18,840 --> 00:20:20,240
it

528
00:20:20,240 --> 00:20:23,360
then we see a loop that stores a hue

529
00:20:23,360 --> 00:20:26,880
value we have a serial print line

530
00:20:26,880 --> 00:20:30,000
statement of x and then

531
00:20:30,000 --> 00:20:33,039
for int i equals 0 and i is less than

532
00:20:33,039 --> 00:20:34,640
the number of leds we're going to

533
00:20:34,640 --> 00:20:35,760
iterate through

534
00:20:35,760 --> 00:20:39,280
the leds and we're going to turn the led

535
00:20:39,280 --> 00:20:44,480
to a chsv value that is hue plus plus

536
00:20:44,480 --> 00:20:47,360
so we're iterating through hues then

537
00:20:47,360 --> 00:20:48,000
we're showing

538
00:20:48,000 --> 00:20:53,360
the strip and then we're fading all

539
00:20:53,760 --> 00:20:55,280
and then we see that this goes in the

540
00:20:55,280 --> 00:20:57,280
other direction so what do you think

541
00:20:57,280 --> 00:20:59,600
will happen when we upload the sketch

542
00:20:59,600 --> 00:21:01,120
can you guess what the animation might

543
00:21:01,120 --> 00:21:03,760
be let's give it a try

544
00:21:03,760 --> 00:21:06,720
we see our leds fade through a rainbow

545
00:21:06,720 --> 00:21:07,840
pattern

546
00:21:07,840 --> 00:21:09,280
this is happening because we're

547
00:21:09,280 --> 00:21:12,640
iterating through hues and then fading

548
00:21:12,640 --> 00:21:15,360
fast led is a very involved library to

549
00:21:15,360 --> 00:21:16,000
learn more

550
00:21:16,000 --> 00:21:18,240
you can go to the facility github page

551
00:21:18,240 --> 00:21:20,080
which has an excellent reference

552
00:21:20,080 --> 00:21:21,760
but we won't be covering everything in

553
00:21:21,760 --> 00:21:23,679
this class

554
00:21:23,679 --> 00:21:25,679
if you want to know more about leds

555
00:21:25,679 --> 00:21:27,760
kathy and i have a separate class on

556
00:21:27,760 --> 00:21:30,480
fast led at hackaday u

557
00:21:30,480 --> 00:21:34,400
see the hackadayu website to sign up

558
00:21:34,400 --> 00:21:37,039
anukoprect is a dutch fashion designer

559
00:21:37,039 --> 00:21:40,720
who creates robotic dresses

560
00:21:41,280 --> 00:21:44,080
many of them use sensor systems as input

561
00:21:44,080 --> 00:21:45,600
in either servos

562
00:21:45,600 --> 00:21:50,240
leds smoke or other outputs

563
00:21:50,240 --> 00:21:54,320
the pangolin dress is a 1024

564
00:21:54,320 --> 00:21:57,440
channel vci brain computer interface

565
00:21:57,440 --> 00:22:02,320
dress that visualizes brain activity

566
00:22:02,320 --> 00:22:06,000
by changing 32 different 3d printed

567
00:22:06,000 --> 00:22:06,880
panels

568
00:22:06,880 --> 00:22:11,679
or scales with 32 implanted leds

569
00:22:11,679 --> 00:22:13,679
in this way the movement and light of

570
00:22:13,679 --> 00:22:17,679
the dress visualizes brain activity

571
00:22:17,679 --> 00:22:20,159
benaz farahi is a designer and creative

572
00:22:20,159 --> 00:22:21,039
technologist

573
00:22:21,039 --> 00:22:23,120
working at the intersection of fashion

574
00:22:23,120 --> 00:22:26,159
architecture and interactivity design

575
00:22:26,159 --> 00:22:27,760
she's trained as an architect and

576
00:22:27,760 --> 00:22:29,520
explores the potential of interactive

577
00:22:29,520 --> 00:22:30,240
environments

578
00:22:30,240 --> 00:22:33,360
in their relationship to the body body

579
00:22:33,360 --> 00:22:33,919
escape

580
00:22:33,919 --> 00:22:36,080
is an interactive 3d printed fashion

581
00:22:36,080 --> 00:22:38,480
item that's inspired by the movement of

582
00:22:38,480 --> 00:22:41,200
the human body

583
00:22:41,200 --> 00:22:44,799
as the wearer moves a gyroscope

584
00:22:44,799 --> 00:22:47,679
communicates the gestures to an led

585
00:22:47,679 --> 00:22:49,679
lighting control system

586
00:22:49,679 --> 00:22:52,159
and the lighting is visualized as a part

587
00:22:52,159 --> 00:22:55,840
of the movement

588
00:22:57,760 --> 00:23:00,320
benaz uses 3d printing to create

589
00:23:00,320 --> 00:23:01,840
delicate diffusers

590
00:23:01,840 --> 00:23:04,400
for the led lighting that can contour to

591
00:23:04,400 --> 00:23:06,880
the body

592
00:23:07,440 --> 00:23:10,400
this research is based on langer lines

593
00:23:10,400 --> 00:23:12,720
which are the topological lines of skin

594
00:23:12,720 --> 00:23:15,120
tension

595
00:23:18,240 --> 00:23:20,559
bodyscape is an investigation of our

596
00:23:20,559 --> 00:23:21,360
relationship

597
00:23:21,360 --> 00:23:25,760
between anatomy and materiality

598
00:23:25,919 --> 00:23:29,039
based in tokyo team lab is one of the

599
00:23:29,039 --> 00:23:31,120
most impressive interactive arts

600
00:23:31,120 --> 00:23:33,760
collectives on the planet

601
00:23:33,760 --> 00:23:36,559
they create enormous large-scale

602
00:23:36,559 --> 00:23:37,440
exhibitions

603
00:23:37,440 --> 00:23:51,200
in museums as well as pop-up exhibitions

604
00:23:51,200 --> 00:23:53,279
this installation features tens of

605
00:23:53,279 --> 00:23:54,960
thousands of led strips

606
00:23:54,960 --> 00:23:57,360
that hang from a ceiling in an enormous

607
00:23:57,360 --> 00:24:05,840
mirrored room

608
00:24:08,400 --> 00:24:11,200
as the viewer walks throughout the space

609
00:24:11,200 --> 00:24:12,960
it's as if they're within a crystalline

610
00:24:12,960 --> 00:24:13,840
forest

611
00:24:13,840 --> 00:24:15,679
and different lighting animations

612
00:24:15,679 --> 00:24:17,200
activate the space

613
00:24:17,200 --> 00:24:20,880
creating mystical environments

614
00:24:25,840 --> 00:24:28,640
here's another team lab piece where

615
00:24:28,640 --> 00:24:30,640
inflatable sculptures

616
00:24:30,640 --> 00:24:33,679
contain tilt sensors so that when

617
00:24:33,679 --> 00:24:35,679
they're touched and tilted

618
00:24:35,679 --> 00:24:38,880
the led lighting responds this creates a

619
00:24:38,880 --> 00:24:39,600
reactive

620
00:24:39,600 --> 00:24:46,320
environment using sculpture

621
00:24:46,320 --> 00:24:49,600
yaya kusuma is an artist from japan

622
00:24:49,600 --> 00:24:51,919
one of her most famous projects is the

623
00:24:51,919 --> 00:24:54,240
infiniti mirror room

624
00:24:54,240 --> 00:24:56,880
in which visitors are invited into a

625
00:24:56,880 --> 00:24:57,520
small

626
00:24:57,520 --> 00:25:00,880
closet sized space that's lined in

627
00:25:00,880 --> 00:25:03,120
mirrors

628
00:25:03,120 --> 00:25:05,120
strands of leds hang down from the

629
00:25:05,120 --> 00:25:06,240
ceiling

630
00:25:06,240 --> 00:25:08,080
and when replicated throughout the

631
00:25:08,080 --> 00:25:15,840
mirror create this infinity effect

632
00:25:19,200 --> 00:25:20,799
the effect is to create a large

633
00:25:20,799 --> 00:25:23,039
installation in a small space

634
00:25:23,039 --> 00:25:25,120
a sensor is an electronic device that

635
00:25:25,120 --> 00:25:27,200
detects and responds to some type of

636
00:25:27,200 --> 00:25:29,760
input from a physical environment

637
00:25:29,760 --> 00:25:31,279
there are lots of different types of

638
00:25:31,279 --> 00:25:33,279
sensors that can measure and respond to

639
00:25:33,279 --> 00:25:34,720
all kinds of input

640
00:25:34,720 --> 00:25:36,400
and this in turn can be used in many

641
00:25:36,400 --> 00:25:39,600
ways for example we might use proximity

642
00:25:39,600 --> 00:25:39,840
or

643
00:25:39,840 --> 00:25:41,760
ultrasonic sensors to detect the

644
00:25:41,760 --> 00:25:43,679
distance of obstructions for visually

645
00:25:43,679 --> 00:25:45,919
impaired persons

646
00:25:45,919 --> 00:25:47,919
or we might use environmental sensors

647
00:25:47,919 --> 00:25:50,400
which can determine air or water quality

648
00:25:50,400 --> 00:25:53,520
to make suggestions for city planning

649
00:25:53,520 --> 00:25:55,679
we can also use sensors in our artworks

650
00:25:55,679 --> 00:25:57,600
installations and wearables

651
00:25:57,600 --> 00:25:59,840
to explore and visualize sensor data

652
00:25:59,840 --> 00:26:02,559
making interactive works

653
00:26:02,559 --> 00:26:04,559
last class we explored using capacitive

654
00:26:04,559 --> 00:26:06,240
touch as a touch sensor

655
00:26:06,240 --> 00:26:07,840
and in the following section of this

656
00:26:07,840 --> 00:26:09,360
class we'll have a look at three

657
00:26:09,360 --> 00:26:10,799
on-board sensors of the circuit

658
00:26:10,799 --> 00:26:12,400
playground express

659
00:26:12,400 --> 00:26:15,600
sound light and temperature we'll also

660
00:26:15,600 --> 00:26:17,200
explore how we might trigger lighting

661
00:26:17,200 --> 00:26:18,159
and sound output

662
00:26:18,159 --> 00:26:22,159
using these sensors let's get started

663
00:26:22,159 --> 00:26:24,080
the circuit playground comes with a thin

664
00:26:24,080 --> 00:26:26,400
mems microphone that can be used to

665
00:26:26,400 --> 00:26:28,240
detect audio levels

666
00:26:28,240 --> 00:26:30,480
you can read the analog voltage on pin

667
00:26:30,480 --> 00:26:31,600
a4

668
00:26:31,600 --> 00:26:33,279
but in most cases we're actually going

669
00:26:33,279 --> 00:26:34,799
to want to detect the sound

670
00:26:34,799 --> 00:26:37,520
pressure level which is a pressure level

671
00:26:37,520 --> 00:26:39,200
that's taken over time

672
00:26:39,200 --> 00:26:41,760
this will range from 50 decibels to 100

673
00:26:41,760 --> 00:26:42,480
decibels

674
00:26:42,480 --> 00:26:44,400
in terms of if it's loud or if it's

675
00:26:44,400 --> 00:26:46,720
quiet

676
00:26:47,520 --> 00:26:51,520
open the sketch to hello sound sensor

677
00:26:51,520 --> 00:26:53,200
you can find this both in your course

678
00:26:53,200 --> 00:26:55,600
materials and in the examples

679
00:26:55,600 --> 00:26:57,200
but an annotated version is in the

680
00:26:57,200 --> 00:26:59,200
course files in this sketch

681
00:26:59,200 --> 00:27:01,600
we see a new kind of variable which is

682
00:27:01,600 --> 00:27:03,200
called a float

683
00:27:03,200 --> 00:27:06,559
a float is a variable that has a decimal

684
00:27:06,559 --> 00:27:08,799
this allows us to store more specific

685
00:27:08,799 --> 00:27:11,120
data than if we are using an integer

686
00:27:11,120 --> 00:27:13,840
which does not have a decimal this will

687
00:27:13,840 --> 00:27:17,120
make more sense once we see the value

688
00:27:17,120 --> 00:27:19,840
here we see that we're we're using our

689
00:27:19,840 --> 00:27:21,200
float sound value

690
00:27:21,200 --> 00:27:24,320
to store some data the data we're

691
00:27:24,320 --> 00:27:24,880
storing

692
00:27:24,880 --> 00:27:26,720
is coming from the circuit playground's

693
00:27:26,720 --> 00:27:29,120
mic and it's for the function

694
00:27:29,120 --> 00:27:32,240
sound pressure level we then see a

695
00:27:32,240 --> 00:27:33,200
number that's in

696
00:27:33,200 --> 00:27:36,159
parentheses this is because in order to

697
00:27:36,159 --> 00:27:38,320
calculate the sound pressure level

698
00:27:38,320 --> 00:27:40,480
the circuit playground has to take a

699
00:27:40,480 --> 00:27:42,240
specific piece of data

700
00:27:42,240 --> 00:27:45,200
and then calculate the result the kind

701
00:27:45,200 --> 00:27:46,480
of data that it's taking

702
00:27:46,480 --> 00:27:49,440
is a recording over a period of time so

703
00:27:49,440 --> 00:27:52,159
this is a recording of 10 milliseconds

704
00:27:52,159 --> 00:27:54,240
so it will use these 10 milliseconds in

705
00:27:54,240 --> 00:27:56,000
order to calculate the sound pressure

706
00:27:56,000 --> 00:27:57,120
level

707
00:27:57,120 --> 00:27:59,200
we can change this if desired but for

708
00:27:59,200 --> 00:28:02,320
now let's leave it at 10. then we're

709
00:28:02,320 --> 00:28:04,159
seeing a serial print statement

710
00:28:04,159 --> 00:28:06,640
that's printing out the sound sensor

711
00:28:06,640 --> 00:28:08,240
sound pressure level

712
00:28:08,240 --> 00:28:11,600
and then also printing the exact value

713
00:28:11,600 --> 00:28:13,360
then we see a short delay of 90

714
00:28:13,360 --> 00:28:14,960
milliseconds

715
00:28:14,960 --> 00:28:16,960
let's upload this and then try making

716
00:28:16,960 --> 00:28:18,159
some sounds

717
00:28:18,159 --> 00:28:21,120
if we open serial monitor under tools

718
00:28:21,120 --> 00:28:23,760
we'll see the sound pressure level

719
00:28:23,760 --> 00:28:25,520
as i'm speaking you can see that the

720
00:28:25,520 --> 00:28:28,399
sound level increases

721
00:28:28,399 --> 00:28:31,919
the baseline looks like it's about 58.89

722
00:28:31,919 --> 00:28:33,679
this might be a little different for you

723
00:28:33,679 --> 00:28:35,279
depending on what kind of environment

724
00:28:35,279 --> 00:28:36,720
you're in

725
00:28:36,720 --> 00:28:39,320
when i'm speaking it goes up to about

726
00:28:39,320 --> 00:28:42,000
62.41

727
00:28:42,000 --> 00:28:44,080
to see this increase more clearly we can

728
00:28:44,080 --> 00:28:46,000
look at the serial plotter

729
00:28:46,000 --> 00:28:48,000
this is next to serial monitor under

730
00:28:48,000 --> 00:28:50,080
tools

731
00:28:50,080 --> 00:28:52,240
if you open this up and then try

732
00:28:52,240 --> 00:28:53,600
speaking

733
00:28:53,600 --> 00:28:55,600
you'll see that the value increases when

734
00:28:55,600 --> 00:28:58,159
i'm speaking

735
00:28:58,159 --> 00:29:01,440
clapping yelling and talking

736
00:29:01,440 --> 00:29:03,840
and making other sounds to see how the

737
00:29:03,840 --> 00:29:06,240
sound pressure level changes

738
00:29:06,240 --> 00:29:08,159
to learn more about the sound sensor and

739
00:29:08,159 --> 00:29:10,559
how it works see the adafruit website's

740
00:29:10,559 --> 00:29:12,799
reference for sound sensor

741
00:29:12,799 --> 00:29:15,039
to add interactivity let's use the

742
00:29:15,039 --> 00:29:17,039
if-else statement we used in the last

743
00:29:17,039 --> 00:29:18,320
session

744
00:29:18,320 --> 00:29:21,600
open up if-else.ino in the sketch we

745
00:29:21,600 --> 00:29:24,399
still have a float for our sound value

746
00:29:24,399 --> 00:29:26,799
but we also have a float for a threshold

747
00:29:26,799 --> 00:29:27,840
value

748
00:29:27,840 --> 00:29:29,520
this is the value at which we are

749
00:29:29,520 --> 00:29:31,520
triggering our interactivity

750
00:29:31,520 --> 00:29:33,760
meaning we've decided it's the right

751
00:29:33,760 --> 00:29:36,399
volume level to trigger our lighting

752
00:29:36,399 --> 00:29:39,840
or our text or whatever our output is

753
00:29:39,840 --> 00:29:42,320
i've set it to 65 but this will change

754
00:29:42,320 --> 00:29:44,159
depending on what your specific sound

755
00:29:44,159 --> 00:29:46,480
environment is

756
00:29:46,480 --> 00:29:48,880
next i'm storing the sound value and

757
00:29:48,880 --> 00:29:52,000
taking a reading of 10 milliseconds

758
00:29:52,000 --> 00:29:55,520
on line 18 i have an if else statement

759
00:29:55,520 --> 00:29:57,200
this is what will be responsible for

760
00:29:57,200 --> 00:29:59,840
triggering our interactivity

761
00:29:59,840 --> 00:30:01,919
the first part of the if statement says

762
00:30:01,919 --> 00:30:03,200
if the sound value

763
00:30:03,200 --> 00:30:05,919
is greater than our threshold meaning if

764
00:30:05,919 --> 00:30:06,720
it's above

765
00:30:06,720 --> 00:30:11,120
65 decibels then we want to do something

766
00:30:11,120 --> 00:30:13,279
in this case we're saying serial print

767
00:30:13,279 --> 00:30:15,919
line sound detected

768
00:30:15,919 --> 00:30:17,760
serial print statements can be really

769
00:30:17,760 --> 00:30:21,120
useful for holding interactivity

770
00:30:21,120 --> 00:30:23,760
later we can change this code to

771
00:30:23,760 --> 00:30:25,600
actually trigger our output

772
00:30:25,600 --> 00:30:30,240
be that led lighting sound etc

773
00:30:30,240 --> 00:30:33,200
then we have an else statement so this

774
00:30:33,200 --> 00:30:33,679
means

775
00:30:33,679 --> 00:30:36,159
that if the sound value is not above the

776
00:30:36,159 --> 00:30:37,520
threshold

777
00:30:37,520 --> 00:30:41,520
then it will print silence as golden

778
00:30:41,520 --> 00:30:43,679
so one of two things will be happening

779
00:30:43,679 --> 00:30:45,520
all the time

780
00:30:45,520 --> 00:30:47,039
if we didn't want anything else to

781
00:30:47,039 --> 00:30:49,039
happen we could also comment out this

782
00:30:49,039 --> 00:30:49,520
line

783
00:30:49,520 --> 00:30:50,960
and then it would only print sound

784
00:30:50,960 --> 00:30:54,640
detected when a sound was detected

785
00:30:54,640 --> 00:30:57,600
let's try this out

786
00:31:01,679 --> 00:31:04,799
if we open up serial monitor we can see

787
00:31:04,799 --> 00:31:05,760
the statement

788
00:31:05,760 --> 00:31:09,279
silence is golden then when i speak over

789
00:31:09,279 --> 00:31:09,760
the mic

790
00:31:09,760 --> 00:31:12,720
and make a loud sound it says sound is

791
00:31:12,720 --> 00:31:15,360
detected

792
00:31:15,679 --> 00:31:17,760
you'll notice that sometimes it'll

793
00:31:17,760 --> 00:31:19,679
detect the sound continuously

794
00:31:19,679 --> 00:31:21,760
and sometimes it'll have silence as

795
00:31:21,760 --> 00:31:25,279
golden between the print statements

796
00:31:25,279 --> 00:31:27,519
this might mean that our threshold is

797
00:31:27,519 --> 00:31:29,840
too high or too low

798
00:31:29,840 --> 00:31:31,600
to make sure that our threshold is at

799
00:31:31,600 --> 00:31:33,120
the correct value

800
00:31:33,120 --> 00:31:36,480
we can uncomment the lines 15 and 16

801
00:31:36,480 --> 00:31:39,440
to print out the sound value that way we

802
00:31:39,440 --> 00:31:41,440
can make sure that our threshold is set

803
00:31:41,440 --> 00:31:42,960
correctly

804
00:31:42,960 --> 00:31:45,120
let's try uploading this and seeing if

805
00:31:45,120 --> 00:31:47,760
we can adjust the threshold

806
00:31:47,760 --> 00:31:50,159
now when i go to serial monitor i can

807
00:31:50,159 --> 00:31:53,679
see what the value is when i'm speaking

808
00:31:53,679 --> 00:31:55,840
it looks like when i'm speaking the

809
00:31:55,840 --> 00:31:57,440
value is about

810
00:31:57,440 --> 00:32:03,840
62 or so so if i adjust my threshold

811
00:32:03,840 --> 00:32:08,240
to be 62

812
00:32:08,240 --> 00:32:11,279
and then re-upload my code now i should

813
00:32:11,279 --> 00:32:13,279
get a more faithful result

814
00:32:13,279 --> 00:32:15,919
i could also lower the threshold so that

815
00:32:15,919 --> 00:32:17,600
it's more sensitive

816
00:32:17,600 --> 00:32:21,200
i think you get the idea now it's time

817
00:32:21,200 --> 00:32:22,880
for two challenges

818
00:32:22,880 --> 00:32:24,559
first see if you can adjust the

819
00:32:24,559 --> 00:32:26,720
threshold to trigger sound detected only

820
00:32:26,720 --> 00:32:28,320
when you're speaking

821
00:32:28,320 --> 00:32:30,000
if you have trouble doing this see the

822
00:32:30,000 --> 00:32:32,000
last video

823
00:32:32,000 --> 00:32:34,480
for a second challenge can you change

824
00:32:34,480 --> 00:32:35,200
the code

825
00:32:35,200 --> 00:32:38,399
so that instead of saying sound detected

826
00:32:38,399 --> 00:32:42,159
it lights up the leds as a hint try

827
00:32:42,159 --> 00:32:44,559
copying and pasting the for loop from

828
00:32:44,559 --> 00:32:45,919
two for loop

829
00:32:45,919 --> 00:32:49,039
or using two hello neil pixel

830
00:32:49,039 --> 00:32:51,120
for advanced students try triggering a

831
00:32:51,120 --> 00:32:53,360
fast led animation

832
00:32:53,360 --> 00:32:55,519
to solve this challenge i'm going to

833
00:32:55,519 --> 00:32:56,399
look and see

834
00:32:56,399 --> 00:32:58,960
what i need to replace from the led for

835
00:32:58,960 --> 00:33:00,240
loop sketch

836
00:33:00,240 --> 00:33:03,840
within my if-else sketch

837
00:33:03,840 --> 00:33:06,000
so right now i see that when the sound

838
00:33:06,000 --> 00:33:08,240
value is over a threshold

839
00:33:08,240 --> 00:33:11,039
it prints sound detected this is a

840
00:33:11,039 --> 00:33:13,360
placeholder for my interactivity

841
00:33:13,360 --> 00:33:14,960
so i know that this is where i want to

842
00:33:14,960 --> 00:33:17,039
put in the for loop that'll turn on my

843
00:33:17,039 --> 00:33:18,559
leds

844
00:33:18,559 --> 00:33:21,600
i can even write pseudocode to remind

845
00:33:21,600 --> 00:33:22,399
myself

846
00:33:22,399 --> 00:33:25,519
that this is where i should put it then

847
00:33:25,519 --> 00:33:27,519
i can either decide to just leave them

848
00:33:27,519 --> 00:33:29,840
on but maybe i want to turn them off

849
00:33:29,840 --> 00:33:31,840
when i'm not speaking

850
00:33:31,840 --> 00:33:33,679
in that case i want to use the else

851
00:33:33,679 --> 00:33:35,919
statement so instead of printing

852
00:33:35,919 --> 00:33:38,880
silences golden i want to turn off the

853
00:33:38,880 --> 00:33:41,440
leds

854
00:33:41,519 --> 00:33:43,679
now that i have my pseudo code i can

855
00:33:43,679 --> 00:33:45,200
find the code that will actually make

856
00:33:45,200 --> 00:33:46,000
this happen

857
00:33:46,000 --> 00:33:49,039
in my for loop code here we find the for

858
00:33:49,039 --> 00:33:50,159
loop for turning on

859
00:33:50,159 --> 00:33:52,559
our leds by setting the pixel color to

860
00:33:52,559 --> 00:33:53,600
purple

861
00:33:53,600 --> 00:33:55,440
i'm going to want to copy and paste the

862
00:33:55,440 --> 00:33:56,960
entire thing

863
00:33:56,960 --> 00:34:01,440
and put it where it says turn on leds

864
00:34:01,679 --> 00:34:03,440
now i want to find the code to turn off

865
00:34:03,440 --> 00:34:06,000
the leds

866
00:34:06,000 --> 00:34:07,960
and i know that it's circuit

867
00:34:07,960 --> 00:34:09,679
playground.clearpixels

868
00:34:09,679 --> 00:34:11,918
i'm going to copy that line and i'm

869
00:34:11,918 --> 00:34:13,520
going to put it in where it says turn

870
00:34:13,520 --> 00:34:13,839
off

871
00:34:13,839 --> 00:34:18,800
leds let's upload this and give it a try

872
00:34:18,800 --> 00:34:21,599
now i see that if i'm speaking the leds

873
00:34:21,599 --> 00:34:23,280
light up

874
00:34:23,280 --> 00:34:26,399
otherwise they're off

875
00:34:27,440 --> 00:34:29,359
the circuit playground express has an

876
00:34:29,359 --> 00:34:31,440
on-board light sensor that's connected

877
00:34:31,440 --> 00:34:32,560
to analog pin

878
00:34:32,560 --> 00:34:35,679
5. you can use analog read or you can

879
00:34:35,679 --> 00:34:37,520
use the light sensor function

880
00:34:37,520 --> 00:34:39,520
from the library in order to read the

881
00:34:39,520 --> 00:34:40,560
value

882
00:34:40,560 --> 00:34:43,679
the value will be between 0 and 123

883
00:34:43,679 --> 00:34:45,440
with higher values corresponding to

884
00:34:45,440 --> 00:34:47,119
brighter light levels

885
00:34:47,119 --> 00:34:50,159
the range is approximately 0 lux to 1500

886
00:34:50,159 --> 00:34:51,760
lux maximum

887
00:34:51,760 --> 00:34:54,320
because average daylight is 10 000 lux

888
00:34:54,320 --> 00:34:54,960
or so

889
00:34:54,960 --> 00:34:57,119
this sensor is best suited for indoor

890
00:34:57,119 --> 00:34:58,400
lighting

891
00:34:58,400 --> 00:35:00,480
an average indoor light level will be

892
00:35:00,480 --> 00:35:02,560
about 300

893
00:35:02,560 --> 00:35:04,560
we'll use the following sketch in order

894
00:35:04,560 --> 00:35:06,560
to tell what the average light level is

895
00:35:06,560 --> 00:35:07,920
for your environment

896
00:35:07,920 --> 00:35:10,880
as well as what is dark or bright for

897
00:35:10,880 --> 00:35:12,160
your environment

898
00:35:12,160 --> 00:35:14,480
open the sketch hello light sensor from

899
00:35:14,480 --> 00:35:16,320
either your course files or from the

900
00:35:16,320 --> 00:35:19,119
adafruit circuit playground library

901
00:35:19,119 --> 00:35:21,200
upload the sketch and try putting your

902
00:35:21,200 --> 00:35:23,119
hand over the circuit playground

903
00:35:23,119 --> 00:35:25,440
then taking it away to see changes in

904
00:35:25,440 --> 00:35:27,599
the data in serial monitor

905
00:35:27,599 --> 00:35:29,920
so in this sketch we're storing the

906
00:35:29,920 --> 00:35:31,200
light sensor value

907
00:35:31,200 --> 00:35:35,359
as a integer into value

908
00:35:35,359 --> 00:35:38,640
and then we're updating that in the loop

909
00:35:38,640 --> 00:35:42,320
by calling circuitplayground.lightsensor

910
00:35:42,320 --> 00:35:44,079
we're then printing out the light sensor

911
00:35:44,079 --> 00:35:45,920
and the value

912
00:35:45,920 --> 00:35:48,960
and then we have a delay of one second

913
00:35:48,960 --> 00:35:52,000
so it's taking readings pretty slow we

914
00:35:52,000 --> 00:35:53,680
could update this if we want to take the

915
00:35:53,680 --> 00:35:54,400
readings

916
00:35:54,400 --> 00:35:56,720
faster let's have a look at serial

917
00:35:56,720 --> 00:35:58,240
monitor and see

918
00:35:58,240 --> 00:36:01,280
what the default reading is for this

919
00:36:01,280 --> 00:36:03,520
room

920
00:36:06,320 --> 00:36:07,839
so you can see that the reading is

921
00:36:07,839 --> 00:36:10,839
pretty stable it's either

922
00:36:10,839 --> 00:36:14,880
197 to 199

923
00:36:14,880 --> 00:36:17,440
so it's a today is an overcast day which

924
00:36:17,440 --> 00:36:19,599
is typical in copenhagen

925
00:36:19,599 --> 00:36:21,760
not a lot of light in the room pretty

926
00:36:21,760 --> 00:36:23,920
dim if your room is brighter

927
00:36:23,920 --> 00:36:25,359
you probably have a light reading of

928
00:36:25,359 --> 00:36:27,280
about 300 or so

929
00:36:27,280 --> 00:36:29,200
and if it's very bright it's probably

930
00:36:29,200 --> 00:36:30,320
above that

931
00:36:30,320 --> 00:36:32,000
if it's lower than that i'm guessing

932
00:36:32,000 --> 00:36:34,079
that it's night time where you are at or

933
00:36:34,079 --> 00:36:36,640
it's very dim lighting now when i put my

934
00:36:36,640 --> 00:36:38,800
hand over the sensor

935
00:36:38,800 --> 00:36:41,760
you can see that it drops down to about

936
00:36:41,760 --> 00:36:43,200
40.

937
00:36:43,200 --> 00:36:45,280
this is with my hand completely covering

938
00:36:45,280 --> 00:36:47,920
the sensor

939
00:36:50,160 --> 00:36:51,920
if i put my hand on the circuit

940
00:36:51,920 --> 00:36:54,480
playground it drops down even further

941
00:36:54,480 --> 00:36:56,400
and now i'm just getting a single digit

942
00:36:56,400 --> 00:36:58,800
reading

943
00:37:00,640 --> 00:37:04,240
if i hold my hand over the sensor

944
00:37:04,240 --> 00:37:09,839
i get a reading of about 100 or so

945
00:37:23,760 --> 00:37:25,599
so you can see how you might start to

946
00:37:25,599 --> 00:37:27,040
play with these values

947
00:37:27,040 --> 00:37:28,880
as thresholds in order to trigger

948
00:37:28,880 --> 00:37:30,480
different kinds of interactivity

949
00:37:30,480 --> 00:37:31,520
depending on how

950
00:37:31,520 --> 00:37:34,640
light or dark something is you can also

951
00:37:34,640 --> 00:37:35,359
in this way

952
00:37:35,359 --> 00:37:38,480
use a light sensor as a proximity sensor

953
00:37:38,480 --> 00:37:39,839
because if light isn't shining on the

954
00:37:39,839 --> 00:37:41,680
sensor then you know that something is

955
00:37:41,680 --> 00:37:42,960
blocking it

956
00:37:42,960 --> 00:37:45,200
so in this way it can kind of be used to

957
00:37:45,200 --> 00:37:48,000
detect motion or an obstruction

958
00:37:48,000 --> 00:37:49,520
there are other sensors that do this

959
00:37:49,520 --> 00:37:51,359
more efficiently but

960
00:37:51,359 --> 00:37:53,200
unfortunately the circuit playground

961
00:37:53,200 --> 00:37:55,520
doesn't have any other proximity sensors

962
00:37:55,520 --> 00:37:56,400
on board

963
00:37:56,400 --> 00:37:58,320
so the light sensor is a good candidate

964
00:37:58,320 --> 00:37:59,920
if you're trying to see if something is

965
00:37:59,920 --> 00:38:01,920
in the way of the sensor

966
00:38:01,920 --> 00:38:04,400
from your course files open the sketch

967
00:38:04,400 --> 00:38:06,160
to light sensor

968
00:38:06,160 --> 00:38:08,799
if else

969
00:38:10,079 --> 00:38:12,400
in this sketch we have three different

970
00:38:12,400 --> 00:38:13,599
variables

971
00:38:13,599 --> 00:38:16,560
we have a light value and this is the

972
00:38:16,560 --> 00:38:17,280
variable

973
00:38:17,280 --> 00:38:20,560
that will store our light sensor value

974
00:38:20,560 --> 00:38:23,040
then we have a variable for average

975
00:38:23,040 --> 00:38:24,000
light

976
00:38:24,000 --> 00:38:26,640
and a variable for bright light so these

977
00:38:26,640 --> 00:38:29,040
are two different threshold values

978
00:38:29,040 --> 00:38:32,000
so we've decided that average light is

979
00:38:32,000 --> 00:38:32,800
anything

980
00:38:32,800 --> 00:38:36,160
between 150 to 550

981
00:38:36,160 --> 00:38:39,359
and then bright light is 550 or above

982
00:38:39,359 --> 00:38:41,359
anything that's under average light

983
00:38:41,359 --> 00:38:43,760
would be low lighting

984
00:38:43,760 --> 00:38:45,520
so let's take a look at how this might

985
00:38:45,520 --> 00:38:47,040
work if we wanted to have three

986
00:38:47,040 --> 00:38:49,200
different thresholds

987
00:38:49,200 --> 00:38:51,359
first we still want to update the

988
00:38:51,359 --> 00:38:52,880
variable for light value

989
00:38:52,880 --> 00:38:55,680
every loop and that is taking the

990
00:38:55,680 --> 00:38:57,200
reading from the light sensor and

991
00:38:57,200 --> 00:38:58,079
storing it as

992
00:38:58,079 --> 00:39:00,400
light value then we're going to print

993
00:39:00,400 --> 00:39:02,079
the value

994
00:39:02,079 --> 00:39:04,720
and then we have an if else if else

995
00:39:04,720 --> 00:39:06,480
statement

996
00:39:06,480 --> 00:39:09,599
so we've seen if and else before

997
00:39:09,599 --> 00:39:12,160
but now we're seeing else if which is a

998
00:39:12,160 --> 00:39:15,280
third condition and this is a program

999
00:39:15,280 --> 00:39:18,079
so it's going to be computing this in

1000
00:39:18,079 --> 00:39:18,800
order

1001
00:39:18,800 --> 00:39:20,560
so it's first going to check the if

1002
00:39:20,560 --> 00:39:22,560
statement then it's going to check the

1003
00:39:22,560 --> 00:39:24,240
else if statement and then it's

1004
00:39:24,240 --> 00:39:27,040
going to check the else statement so

1005
00:39:27,040 --> 00:39:28,720
first it checks

1006
00:39:28,720 --> 00:39:31,119
is the light value which again is our

1007
00:39:31,119 --> 00:39:32,320
reading from the sensor

1008
00:39:32,320 --> 00:39:34,800
is that greater than or equal to the

1009
00:39:34,800 --> 00:39:36,560
value for bright light

1010
00:39:36,560 --> 00:39:40,240
which again is 550

1011
00:39:40,240 --> 00:39:42,480
if it is then we're going to have it

1012
00:39:42,480 --> 00:39:45,040
print bright light

1013
00:39:45,040 --> 00:39:47,440
and then we're also going to have a for

1014
00:39:47,440 --> 00:39:50,000
loop where we set the pixel color

1015
00:39:50,000 --> 00:39:52,480
to red

1016
00:39:53,680 --> 00:39:58,240
and that's for each led

1017
00:39:58,640 --> 00:40:00,240
then we want to check if it's medium

1018
00:40:00,240 --> 00:40:02,800
light so we have this else if statement

1019
00:40:02,800 --> 00:40:04,160
that says

1020
00:40:04,160 --> 00:40:07,520
else if the light value is less than

1021
00:40:07,520 --> 00:40:09,040
bright light

1022
00:40:09,040 --> 00:40:12,240
and the light value is above average

1023
00:40:12,240 --> 00:40:13,599
light

1024
00:40:13,599 --> 00:40:15,440
so this is checking to make sure both of

1025
00:40:15,440 --> 00:40:17,359
these conditions are true

1026
00:40:17,359 --> 00:40:19,680
and this is how this double ampersand is

1027
00:40:19,680 --> 00:40:20,560
how you do an

1028
00:40:20,560 --> 00:40:23,520
and you can't use a plus because a plus

1029
00:40:23,520 --> 00:40:25,119
is a mathematical

1030
00:40:25,119 --> 00:40:27,839
operation so if you used a plus it would

1031
00:40:27,839 --> 00:40:29,440
try to add these two

1032
00:40:29,440 --> 00:40:32,960
together so we have to use this

1033
00:40:32,960 --> 00:40:35,680
combination of two ampersands to make an

1034
00:40:35,680 --> 00:40:36,000
and

1035
00:40:36,000 --> 00:40:39,520
statement but it's basically saying

1036
00:40:39,520 --> 00:40:43,520
if this is true and if this is true

1037
00:40:43,520 --> 00:40:45,680
so if both those things are true then we

1038
00:40:45,680 --> 00:40:47,680
want to print medium light

1039
00:40:47,680 --> 00:40:49,119
and then we want to set all the pixels

1040
00:40:49,119 --> 00:40:51,520
to green

1041
00:40:51,520 --> 00:40:54,160
lastly we want to see if it's low light

1042
00:40:54,160 --> 00:40:56,160
and we don't have to check that because

1043
00:40:56,160 --> 00:40:59,280
we know if these two things aren't true

1044
00:40:59,280 --> 00:41:01,280
then it's going to be low light because

1045
00:41:01,280 --> 00:41:04,000
it's the only option that's remaining

1046
00:41:04,000 --> 00:41:06,079
so if it's low light it'll print low

1047
00:41:06,079 --> 00:41:07,760
light and then it'll set

1048
00:41:07,760 --> 00:41:10,720
all the pixels to blue and then we have

1049
00:41:10,720 --> 00:41:11,520
a delay

1050
00:41:11,520 --> 00:41:14,160
of half of a second and that's between

1051
00:41:14,160 --> 00:41:15,200
every check

1052
00:41:15,200 --> 00:41:18,400
of this whole loop so let's try it out

1053
00:41:18,400 --> 00:41:22,079
and try to put our hand over the sensor

1054
00:41:22,079 --> 00:41:25,119
at varying distances and see if we can

1055
00:41:25,119 --> 00:41:27,440
get those three thresholds to work

1056
00:41:27,440 --> 00:41:29,200
you might have to adjust these numbers

1057
00:41:29,200 --> 00:41:30,720
so that they're more accurate to your

1058
00:41:30,720 --> 00:41:32,000
lighting environment

1059
00:41:32,000 --> 00:41:34,079
but the goal should be that when your

1060
00:41:34,079 --> 00:41:36,800
hand is not on the sensor

1061
00:41:36,800 --> 00:41:38,720
and there's bright light then it should

1062
00:41:38,720 --> 00:41:40,400
have its own

1063
00:41:40,400 --> 00:41:43,680
threshold and there should also be a

1064
00:41:43,680 --> 00:41:45,760
threshold for average light so if your

1065
00:41:45,760 --> 00:41:48,000
hand is hovering above the sensor

1066
00:41:48,000 --> 00:41:50,720
it should be whatever this value is and

1067
00:41:50,720 --> 00:41:52,560
then low light would be if you have your

1068
00:41:52,560 --> 00:41:55,280
hand covering the sensor completely

1069
00:41:55,280 --> 00:42:03,280
so let's give it a try

1070
00:42:03,280 --> 00:42:05,280
the circuit playground also comes with a

1071
00:42:05,280 --> 00:42:07,520
temperature sensor

1072
00:42:07,520 --> 00:42:10,560
it is a thermistor which is

1073
00:42:10,560 --> 00:42:13,359
a resistor that changes its resistance

1074
00:42:13,359 --> 00:42:15,359
based on the temperature

1075
00:42:15,359 --> 00:42:17,520
it's easy to calculate the temperature

1076
00:42:17,520 --> 00:42:19,920
based on the analog voltage on analog

1077
00:42:19,920 --> 00:42:20,400
pin

1078
00:42:20,400 --> 00:42:24,160
a0 there's a 10k one percent resistor

1079
00:42:24,160 --> 00:42:26,160
connected to it as a pull down

1080
00:42:26,160 --> 00:42:28,000
and you can read the analog value and

1081
00:42:28,000 --> 00:42:29,520
calculate the temperature

1082
00:42:29,520 --> 00:42:31,920
with the beta constant or just use the

1083
00:42:31,920 --> 00:42:34,240
circuit playground library

1084
00:42:34,240 --> 00:42:35,839
the circuit playground library has a

1085
00:42:35,839 --> 00:42:39,119
built-in circuitplayground.temperature

1086
00:42:39,119 --> 00:42:41,440
function which will give you a floating

1087
00:42:41,440 --> 00:42:44,000
point number in centigrade

1088
00:42:44,000 --> 00:42:46,319
also if you need to use fahrenheit they

1089
00:42:46,319 --> 00:42:47,839
have a built-in function for that as

1090
00:42:47,839 --> 00:42:48,400
well

1091
00:42:48,400 --> 00:42:50,720
which is circuit playground.temperature

1092
00:42:50,720 --> 00:42:52,480
f

1093
00:42:52,480 --> 00:42:55,760
we'll have a look at both of these

1094
00:42:55,760 --> 00:42:59,760
open up the sketch hello temperature

1095
00:42:59,760 --> 00:43:01,920
in this sketch we have float variables

1096
00:43:01,920 --> 00:43:04,000
for both the temperature and celsius

1097
00:43:04,000 --> 00:43:06,720
and the temperature in fahrenheit temp c

1098
00:43:06,720 --> 00:43:07,520
and temp f

1099
00:43:07,520 --> 00:43:10,720
accordingly in our loop function we're

1100
00:43:10,720 --> 00:43:13,359
updating the values for each variable

1101
00:43:13,359 --> 00:43:15,440
then we're printing out the data there's

1102
00:43:15,440 --> 00:43:18,240
a one second delay between readings

1103
00:43:18,240 --> 00:43:20,160
we upload the sketch and then open

1104
00:43:20,160 --> 00:43:23,118
serial monitor

1105
00:43:23,839 --> 00:43:25,599
we can see the temperature readings for

1106
00:43:25,599 --> 00:43:29,359
both celsius and fahrenheit

1107
00:43:33,280 --> 00:43:35,440
up until now we've been using sensors

1108
00:43:35,440 --> 00:43:37,440
that are pretty easy to adjust

1109
00:43:37,440 --> 00:43:40,240
like light and sound but how do you

1110
00:43:40,240 --> 00:43:42,800
change the temperature

1111
00:43:42,800 --> 00:43:44,480
try to get your temperature sensor to

1112
00:43:44,480 --> 00:43:46,960
display a different value

1113
00:43:46,960 --> 00:43:49,200
here a few potential solutions to this

1114
00:43:49,200 --> 00:43:51,119
challenge but there are probably many

1115
00:43:51,119 --> 00:43:52,240
more

1116
00:43:52,240 --> 00:43:55,520
one is to use fans or heaters to heat or

1117
00:43:55,520 --> 00:43:56,079
cool

1118
00:43:56,079 --> 00:43:59,119
the sensor another solution would be to

1119
00:43:59,119 --> 00:44:00,880
take your circuit playground express

1120
00:44:00,880 --> 00:44:02,000
outside

1121
00:44:02,000 --> 00:44:04,720
and get a temperature reading from there

1122
00:44:04,720 --> 00:44:06,000
you could also bring your circuit

1123
00:44:06,000 --> 00:44:07,760
playground into different rooms in your

1124
00:44:07,760 --> 00:44:09,200
house

1125
00:44:09,200 --> 00:44:10,560
you might also put your circuit

1126
00:44:10,560 --> 00:44:12,880
playground between your hands

1127
00:44:12,880 --> 00:44:14,640
lastly you can try breathing on the

1128
00:44:14,640 --> 00:44:16,000
sensor

1129
00:44:16,000 --> 00:44:17,599
give this a try and see if it will

1130
00:44:17,599 --> 00:44:19,440
detect a difference

1131
00:44:19,440 --> 00:44:21,440
in this way you could use the sensor as

1132
00:44:21,440 --> 00:44:23,440
a breath sensor

1133
00:44:23,440 --> 00:44:25,200
have a look at the birthday candles

1134
00:44:25,200 --> 00:44:27,280
example under microphone demos

1135
00:44:27,280 --> 00:44:29,440
in the circuit playground library to see

1136
00:44:29,440 --> 00:44:32,319
how this might be used

1137
00:44:32,319 --> 00:44:34,560
the circuit playground express has eight

1138
00:44:34,560 --> 00:44:37,040
general input output pads that are

1139
00:44:37,040 --> 00:44:37,920
available

1140
00:44:37,920 --> 00:44:40,720
for us to attach our own sensors and our

1141
00:44:40,720 --> 00:44:41,119
own

1142
00:44:41,119 --> 00:44:43,440
outputs such as servos which we'll get

1143
00:44:43,440 --> 00:44:46,560
to in the next class

1144
00:44:47,520 --> 00:44:49,599
inputs and outputs are at the heart of

1145
00:44:49,599 --> 00:44:52,240
interactive design

1146
00:44:52,240 --> 00:44:54,640
with interactive design we take in some

1147
00:44:54,640 --> 00:44:55,280
data

1148
00:44:55,280 --> 00:44:58,800
or stimulus usually from a sensor

1149
00:44:58,800 --> 00:45:02,319
or a button or a switch

1150
00:45:02,640 --> 00:45:05,760
then we output a response this could be

1151
00:45:05,760 --> 00:45:06,560
lighting

1152
00:45:06,560 --> 00:45:09,280
sound or smoke as seen here in a new

1153
00:45:09,280 --> 00:45:12,400
quiprex smoke dress

1154
00:45:14,000 --> 00:45:15,760
so far we've used a few inputs to

1155
00:45:15,760 --> 00:45:17,280
trigger a few outputs

1156
00:45:17,280 --> 00:45:18,800
can you think of all the inputs we've

1157
00:45:18,800 --> 00:45:21,280
used so far we've used the capacitive

1158
00:45:21,280 --> 00:45:22,079
touch

1159
00:45:22,079 --> 00:45:24,240
the microphone as a sound sensor the

1160
00:45:24,240 --> 00:45:25,359
temperature sensor

1161
00:45:25,359 --> 00:45:28,079
and the light sensor for outputs we've

1162
00:45:28,079 --> 00:45:29,839
been able to trigger print statements

1163
00:45:29,839 --> 00:45:31,920
led lighting and sound from the onboard

1164
00:45:31,920 --> 00:45:32,960
speaker

1165
00:45:32,960 --> 00:45:35,440
but this is just a handful of options

1166
00:45:35,440 --> 00:45:36,560
can you think what other

1167
00:45:36,560 --> 00:45:38,640
inputs and outputs there are which

1168
00:45:38,640 --> 00:45:40,160
inputs might you want to use in your

1169
00:45:40,160 --> 00:45:41,119
project

1170
00:45:41,119 --> 00:45:43,760
what about outputs in the next class

1171
00:45:43,760 --> 00:45:45,680
we'll look at developing more complex

1172
00:45:45,680 --> 00:45:47,839
interactivity using an interactivity

1173
00:45:47,839 --> 00:45:48,800
matrix

1174
00:45:48,800 --> 00:45:50,880
but for now feel free to explore places

1175
00:45:50,880 --> 00:45:52,640
like adafruit and sparkfun

1176
00:45:52,640 --> 00:45:54,560
to see what sensors there are and what

1177
00:45:54,560 --> 00:45:56,640
you might want to use in your projects

1178
00:45:56,640 --> 00:45:58,400
you can also consider different outputs

1179
00:45:58,400 --> 00:46:00,240
you might trigger and look for tutorials

1180
00:46:00,240 --> 00:46:03,359
that cover how to use them

1181
00:46:03,839 --> 00:46:05,839
so far we've looked at a few kinds of

1182
00:46:05,839 --> 00:46:07,119
loops

1183
00:46:07,119 --> 00:46:10,000
there's the setup loop and loop function

1184
00:46:10,000 --> 00:46:12,560
for our main arduino sketch

1185
00:46:12,560 --> 00:46:15,359
there's also a for loop there's also a

1186
00:46:15,359 --> 00:46:16,720
while loop

1187
00:46:16,720 --> 00:46:19,920
open up two while loop

1188
00:46:19,920 --> 00:46:22,079
this sketch looks very familiar to our

1189
00:46:22,079 --> 00:46:24,319
if else sketch

1190
00:46:24,319 --> 00:46:26,480
we're still storing the value of our

1191
00:46:26,480 --> 00:46:27,359
light sensor

1192
00:46:27,359 --> 00:46:30,720
in an integer into value we also have a

1193
00:46:30,720 --> 00:46:31,839
threshold value

1194
00:46:31,839 --> 00:46:33,280
over which we will trigger our

1195
00:46:33,280 --> 00:46:36,079
interactivity

1196
00:46:36,240 --> 00:46:38,319
then we see that in our loop we're

1197
00:46:38,319 --> 00:46:40,720
updating our value variable

1198
00:46:40,720 --> 00:46:44,400
to store the reading of the light sensor

1199
00:46:44,400 --> 00:46:46,560
this is followed by a delay of a tenth

1200
00:46:46,560 --> 00:46:48,880
of a second

1201
00:46:48,880 --> 00:46:52,160
then we have a while loop while

1202
00:46:52,160 --> 00:46:54,800
our value meaning the value from our

1203
00:46:54,800 --> 00:46:56,240
light sensor

1204
00:46:56,240 --> 00:46:58,560
is greater than our threshold in this

1205
00:46:58,560 --> 00:47:00,880
case 100

1206
00:47:00,880 --> 00:47:03,520
we want to print the line trigger

1207
00:47:03,520 --> 00:47:04,960
interactivity

1208
00:47:04,960 --> 00:47:07,200
then have a short delay of 200

1209
00:47:07,200 --> 00:47:09,839
milliseconds

1210
00:47:09,839 --> 00:47:13,440
while this is true this will continue to

1211
00:47:13,440 --> 00:47:15,119
run

1212
00:47:15,119 --> 00:47:18,079
when it is not true it will exit the

1213
00:47:18,079 --> 00:47:18,960
loop

1214
00:47:18,960 --> 00:47:21,599
and then go back to a delay of a tenth

1215
00:47:21,599 --> 00:47:23,280
of a second

1216
00:47:23,280 --> 00:47:26,240
then it will check once again the value

1217
00:47:26,240 --> 00:47:30,000
of light sensor and update it

1218
00:47:30,480 --> 00:47:33,520
let's give this a try so i'm going to

1219
00:47:33,520 --> 00:47:34,800
start with my hand

1220
00:47:34,800 --> 00:47:36,960
over the sensor because i know that when

1221
00:47:36,960 --> 00:47:38,720
it's light it will trigger the

1222
00:47:38,720 --> 00:47:40,800
interactivity

1223
00:47:40,800 --> 00:47:43,359
so right now my hand is on the sensor

1224
00:47:43,359 --> 00:47:44,720
but if i take it off

1225
00:47:44,720 --> 00:47:46,000
i'll see that it triggers the

1226
00:47:46,000 --> 00:47:47,920
interactivity

1227
00:47:47,920 --> 00:47:50,640
if i put it on again it will stop if i

1228
00:47:50,640 --> 00:47:52,000
take it off again it'll start

1229
00:47:52,000 --> 00:47:55,599
again as a challenge try changing the

1230
00:47:55,599 --> 00:47:56,400
threshold

1231
00:47:56,400 --> 00:47:58,319
to trigger the interactivity only when

1232
00:47:58,319 --> 00:48:01,440
it's a certain temperature

1233
00:48:01,520 --> 00:48:04,079
as a second challenge try replacing the

1234
00:48:04,079 --> 00:48:06,079
serial print line statement with code

1235
00:48:06,079 --> 00:48:07,920
that will turn on leds

1236
00:48:07,920 --> 00:48:10,800
or play a sound to solve this challenge

1237
00:48:10,800 --> 00:48:13,040
i'm going to open up both my while loop

1238
00:48:13,040 --> 00:48:15,119
sketch and also my hello temperature

1239
00:48:15,119 --> 00:48:16,079
sketch

1240
00:48:16,079 --> 00:48:17,680
because i'm going to want to combine

1241
00:48:17,680 --> 00:48:19,280
elements of each of them

1242
00:48:19,280 --> 00:48:21,359
and before i get started i've decided

1243
00:48:21,359 --> 00:48:23,280
that what i want to do

1244
00:48:23,280 --> 00:48:26,960
is i want to trigger my while loop

1245
00:48:26,960 --> 00:48:29,599
while the temperature sensor is at or

1246
00:48:29,599 --> 00:48:32,000
above my body temperature

1247
00:48:32,000 --> 00:48:34,160
and so i'm going to first figure out

1248
00:48:34,160 --> 00:48:35,200
what that is

1249
00:48:35,200 --> 00:48:37,920
by running the hello temperature sketch

1250
00:48:37,920 --> 00:48:38,400
and then

1251
00:48:38,400 --> 00:48:41,520
looking at what the read is for

1252
00:48:41,520 --> 00:48:44,400
temperature in fahrenheit when i blow on

1253
00:48:44,400 --> 00:48:46,400
the sensor versus when i don't blow on

1254
00:48:46,400 --> 00:48:47,680
the sensor

1255
00:48:47,680 --> 00:48:50,079
once it's uploaded if i open up serial

1256
00:48:50,079 --> 00:48:52,480
monitor

1257
00:48:52,480 --> 00:48:55,599
i can see the reading

1258
00:48:57,200 --> 00:49:02,240
now when i blow in my temperature sensor

1259
00:49:02,240 --> 00:49:04,160
i see that the temperature goes up to

1260
00:49:04,160 --> 00:49:07,759
about 80.64

1261
00:49:10,800 --> 00:49:17,200
so there it was 80.82

1262
00:49:17,200 --> 00:49:20,480
and that time it went up to 83 almost

1263
00:49:20,480 --> 00:49:22,559
so it looks like what i'm going to want

1264
00:49:22,559 --> 00:49:23,839
as a baseline

1265
00:49:23,839 --> 00:49:28,400
is any value that's less than 80

1266
00:49:28,400 --> 00:49:31,040
and then if it's over 80 i'll consider

1267
00:49:31,040 --> 00:49:33,520
that to be triggered

1268
00:49:33,520 --> 00:49:35,040
another way to look at this would be to

1269
00:49:35,040 --> 00:49:38,400
use the serial plotter

1270
00:49:38,960 --> 00:49:40,960
and the serial plotter i see the data

1271
00:49:40,960 --> 00:49:42,720
coming in this is without

1272
00:49:42,720 --> 00:49:45,839
me doing anything

1273
00:49:47,520 --> 00:49:49,440
and then we see a spike when i blow on

1274
00:49:49,440 --> 00:49:52,000
the sensor

1275
00:49:54,160 --> 00:49:56,640
and you'll see that there's two graphs

1276
00:49:56,640 --> 00:49:57,440
there's one

1277
00:49:57,440 --> 00:49:59,520
for temperature and fahrenheit and one

1278
00:49:59,520 --> 00:50:02,880
for temperature in celsius

1279
00:50:05,680 --> 00:50:07,200
so if i wanted to see just one of these

1280
00:50:07,200 --> 00:50:10,079
values say for example

1281
00:50:10,079 --> 00:50:14,000
fahrenheit i could upload this again

1282
00:50:14,000 --> 00:50:18,079
and now when i go to serial monitor

1283
00:50:18,079 --> 00:50:19,520
i just see the temperature for

1284
00:50:19,520 --> 00:50:21,359
fahrenheit

1285
00:50:21,359 --> 00:50:26,880
and then when i go to serial plotter

1286
00:50:26,880 --> 00:50:29,440
i just see the value for fahrenheit and

1287
00:50:29,440 --> 00:50:30,559
i can see that

1288
00:50:30,559 --> 00:50:33,920
a normal baseline is somewhere below

1289
00:50:33,920 --> 00:50:36,640
81.

1290
00:50:39,760 --> 00:50:41,680
and that when i breathe on the sensor it

1291
00:50:41,680 --> 00:50:44,400
goes above 81.

1292
00:50:44,400 --> 00:50:45,920
so i might if i want to make the

1293
00:50:45,920 --> 00:50:47,520
instrument really

1294
00:50:47,520 --> 00:50:50,559
sensitive and and if i want to reduce

1295
00:50:50,559 --> 00:50:53,680
the incidence of false positives meaning

1296
00:50:53,680 --> 00:50:54,400
results

1297
00:50:54,400 --> 00:50:57,040
that say that the sensor has been

1298
00:50:57,040 --> 00:50:58,800
triggered or is above the threshold when

1299
00:50:58,800 --> 00:50:59,839
it isn't

1300
00:50:59,839 --> 00:51:02,240
i might want to set my threshold to

1301
00:51:02,240 --> 00:51:02,880
something like

1302
00:51:02,880 --> 00:51:05,520
81. i'll do this test a couple more

1303
00:51:05,520 --> 00:51:07,119
times just to make sure that that's

1304
00:51:07,119 --> 00:51:08,240
accurate

1305
00:51:08,240 --> 00:51:11,119
and sensors are very obviously sensitive

1306
00:51:11,119 --> 00:51:13,359
to the environment that they're in

1307
00:51:13,359 --> 00:51:16,240
so the value may change a little bit

1308
00:51:16,240 --> 00:51:18,319
depending on where you're at

1309
00:51:18,319 --> 00:51:21,040
so that's something to keep in mind you

1310
00:51:21,040 --> 00:51:22,079
might have to reset

1311
00:51:22,079 --> 00:51:24,720
your threshold now that i know that my

1312
00:51:24,720 --> 00:51:28,240
threshold for my temperature is about 80

1313
00:51:28,240 --> 00:51:32,079
i can save this sketch as while loop

1314
00:51:32,079 --> 00:51:37,839
challenge before making changes to it

1315
00:51:39,200 --> 00:51:41,599
and then i can change my threshold and

1316
00:51:41,599 --> 00:51:42,400
we'll say

1317
00:51:42,400 --> 00:51:44,960
81

1318
00:51:46,079 --> 00:51:49,520
and instead of having int value

1319
00:51:49,520 --> 00:51:52,800
as my variable i need to store float

1320
00:51:52,800 --> 00:51:54,960
because the temperature data is stored

1321
00:51:54,960 --> 00:51:56,400
as a float

1322
00:51:56,400 --> 00:51:58,800
so i'm going to store it in fahrenheit

1323
00:51:58,800 --> 00:52:00,640
and steal this float

1324
00:52:00,640 --> 00:52:04,240
temp f and copy float temp f in place of

1325
00:52:04,240 --> 00:52:05,280
where our

1326
00:52:05,280 --> 00:52:07,760
value was previously now i need to make

1327
00:52:07,760 --> 00:52:08,480
sure that that

1328
00:52:08,480 --> 00:52:11,839
is changed throughout my sketch so to

1329
00:52:11,839 --> 00:52:13,839
start with i'm also not getting data

1330
00:52:13,839 --> 00:52:14,720
from

1331
00:52:14,720 --> 00:52:17,280
my light sensor i want to update the

1332
00:52:17,280 --> 00:52:18,480
variable for temp

1333
00:52:18,480 --> 00:52:21,760
f with the temperature so i'm going to

1334
00:52:21,760 --> 00:52:22,240
go

1335
00:52:22,240 --> 00:52:24,400
and take the line that says temp f

1336
00:52:24,400 --> 00:52:26,160
equals circuit playground

1337
00:52:26,160 --> 00:52:30,079
dot temperature f and i'll take that

1338
00:52:30,079 --> 00:52:34,559
and place that where value was

1339
00:52:34,559 --> 00:52:36,640
so now i'm updating the temperature

1340
00:52:36,640 --> 00:52:38,400
variable every time

1341
00:52:38,400 --> 00:52:40,559
and then i'm not comparing a value

1342
00:52:40,559 --> 00:52:42,720
anymore and comparing

1343
00:52:42,720 --> 00:52:46,160
a temperature rating and then

1344
00:52:46,160 --> 00:52:49,599
i also want to update it

1345
00:52:49,599 --> 00:52:51,680
while we're in the while loop so i'm

1346
00:52:51,680 --> 00:52:53,680
going to replace this line

1347
00:52:53,680 --> 00:52:56,160
as well and this is important because

1348
00:52:56,160 --> 00:52:57,119
the while loop

1349
00:52:57,119 --> 00:53:00,160
won't exit until it has a condition for

1350
00:53:00,160 --> 00:53:01,520
exiting

1351
00:53:01,520 --> 00:53:03,680
so the condition here is if the

1352
00:53:03,680 --> 00:53:04,559
temperature

1353
00:53:04,559 --> 00:53:07,599
is not greater than the threshold then

1354
00:53:07,599 --> 00:53:09,119
it exits the loop

1355
00:53:09,119 --> 00:53:10,880
but how will it know that unless it

1356
00:53:10,880 --> 00:53:12,880
takes the reading so you have to take

1357
00:53:12,880 --> 00:53:14,559
the reading within the while loop

1358
00:53:14,559 --> 00:53:16,720
as well as outside of the while loop

1359
00:53:16,720 --> 00:53:18,480
that's why it's written twice

1360
00:53:18,480 --> 00:53:20,160
and then here we have a serial print

1361
00:53:20,160 --> 00:53:23,280
line statement to trigger interactivity

1362
00:53:23,280 --> 00:53:25,839
and let's just test this before we put

1363
00:53:25,839 --> 00:53:27,760
in lighting or sound

1364
00:53:27,760 --> 00:53:29,599
i can see that it's saying to trigger

1365
00:53:29,599 --> 00:53:31,119
the interactivity

1366
00:53:31,119 --> 00:53:34,480
constantly so i know that

1367
00:53:34,480 --> 00:53:38,000
maybe my threshold is too low

1368
00:53:38,000 --> 00:53:42,319
so let's try setting this to 82.

1369
00:53:42,319 --> 00:53:44,720
and there i see that it isn't triggered

1370
00:53:44,720 --> 00:53:48,160
but when i blow on the sensor

1371
00:53:51,040 --> 00:53:52,400
you'll see that it prints trigger

1372
00:53:52,400 --> 00:53:56,000
interactivity with a small delay

1373
00:53:56,000 --> 00:53:57,599
to solve the other part of this

1374
00:53:57,599 --> 00:54:00,079
challenge which is to replace serial

1375
00:54:00,079 --> 00:54:00,800
print line

1376
00:54:00,800 --> 00:54:03,599
with either lighting or sound i can

1377
00:54:03,599 --> 00:54:05,920
either put in a for loop for lights

1378
00:54:05,920 --> 00:54:09,520
or i can play a tone so if i can't

1379
00:54:09,520 --> 00:54:11,040
remember how to do that

1380
00:54:11,040 --> 00:54:14,480
i can open up my

1381
00:54:14,480 --> 00:54:17,520
class files and i can open up my led for

1382
00:54:17,520 --> 00:54:18,960
loop

1383
00:54:18,960 --> 00:54:22,480
i can also open up hello speaker

1384
00:54:22,480 --> 00:54:24,800
and to play a tone what i'd want to do

1385
00:54:24,800 --> 00:54:25,920
is copy

1386
00:54:25,920 --> 00:54:29,920
the line circuitplayground.playtone

1387
00:54:29,920 --> 00:54:32,319
and i want to paste that where

1388
00:54:32,319 --> 00:54:33,920
interactivity is

1389
00:54:33,920 --> 00:54:35,839
and i'm going to make this a fairly low

1390
00:54:35,839 --> 00:54:37,680
tone that plays for

1391
00:54:37,680 --> 00:54:41,119
two seconds and then i also

1392
00:54:41,119 --> 00:54:45,280
want to put in

1393
00:54:45,280 --> 00:54:49,119
a for loop for changing my lighting

1394
00:54:49,119 --> 00:54:51,520
so i'm going to copy that from our led

1395
00:54:51,520 --> 00:54:53,760
for loop sketch

1396
00:54:53,760 --> 00:54:55,359
and i'm gonna i'm thinking of the

1397
00:54:55,359 --> 00:54:57,760
sequence here so

1398
00:54:57,760 --> 00:54:59,920
first it will print trigger

1399
00:54:59,920 --> 00:55:01,760
interactivity

1400
00:55:01,760 --> 00:55:04,240
then i want it to set all the pixels to

1401
00:55:04,240 --> 00:55:04,960
this color

1402
00:55:04,960 --> 00:55:07,440
and then i want to play the tone for two

1403
00:55:07,440 --> 00:55:08,799
seconds

1404
00:55:08,799 --> 00:55:11,839
the order does matter here because this

1405
00:55:11,839 --> 00:55:14,000
is a compiled language

1406
00:55:14,000 --> 00:55:17,760
and so whatever is written first

1407
00:55:17,760 --> 00:55:20,880
will get executed first so if i put

1408
00:55:20,880 --> 00:55:22,880
serial print line trigger interactivity

1409
00:55:22,880 --> 00:55:24,240
at the bottom here

1410
00:55:24,240 --> 00:55:25,760
that will be the last thing that gets

1411
00:55:25,760 --> 00:55:27,760
executed and it will happen

1412
00:55:27,760 --> 00:55:30,559
after playtone feel free to copy and

1413
00:55:30,559 --> 00:55:32,079
paste these and put them in different

1414
00:55:32,079 --> 00:55:33,040
locations

1415
00:55:33,040 --> 00:55:36,079
to see that happening but for now let's

1416
00:55:36,079 --> 00:55:39,119
upload this and see if it works for

1417
00:55:39,119 --> 00:55:41,680
homework and as a final challenge

1418
00:55:41,680 --> 00:55:44,319
try making changes to your while or if

1419
00:55:44,319 --> 00:55:45,440
else sketch

1420
00:55:45,440 --> 00:55:47,359
to create your own interactive events

1421
00:55:47,359 --> 00:55:49,680
for the light or sound sensor

1422
00:55:49,680 --> 00:55:51,280
you might also use the temperature

1423
00:55:51,280 --> 00:55:54,480
sensor or capacitive touch

1424
00:55:54,480 --> 00:55:56,880
then start to plan how you might install

1425
00:55:56,880 --> 00:55:58,880
your circuit playground

1426
00:55:58,880 --> 00:56:00,839
would you put it in a wearable or a

1427
00:56:00,839 --> 00:56:02,000
sculpture

1428
00:56:02,000 --> 00:56:05,119
how might that affect your data

1429
00:56:05,119 --> 00:56:07,280
grab materials and start rapid

1430
00:56:07,280 --> 00:56:09,359
prototyping

1431
00:56:09,359 --> 00:56:11,599
materials could be things like fabric

1432
00:56:11,599 --> 00:56:13,520
paper hollow toys

1433
00:56:13,520 --> 00:56:16,799
clothing and so on try installing the

1434
00:56:16,799 --> 00:56:17,839
circuit playground

1435
00:56:17,839 --> 00:56:20,319
using these materials and see how it

1436
00:56:20,319 --> 00:56:22,240
affects the data

1437
00:56:22,240 --> 00:56:24,960
see if you can write a program that uses

1438
00:56:24,960 --> 00:56:25,920
your input

1439
00:56:25,920 --> 00:56:28,799
and produces an output the output could

1440
00:56:28,799 --> 00:56:29,680
be lighting

1441
00:56:29,680 --> 00:56:32,400
sound or pseudocode for some other form

1442
00:56:32,400 --> 00:56:35,040
of interactivity

1443
00:56:35,040 --> 00:56:37,280
if you're out of ideas try creating a

1444
00:56:37,280 --> 00:56:39,359
lamp that does different animations at

1445
00:56:39,359 --> 00:56:42,319
different times of the day

1446
00:56:42,319 --> 00:56:45,280
we've covered a lot in this second class

1447
00:56:45,280 --> 00:56:47,200
we've learned all about leds and how to

1448
00:56:47,200 --> 00:56:48,960
create responsive lighting

1449
00:56:48,960 --> 00:56:50,240
we've even learned how to create

1450
00:56:50,240 --> 00:56:53,280
animations using the fast led library

1451
00:56:53,280 --> 00:56:55,040
we've also learned about inputs and

1452
00:56:55,040 --> 00:56:57,680
outputs as well as how to use three new

1453
00:56:57,680 --> 00:56:58,480
inputs

1454
00:56:58,480 --> 00:57:00,480
the temperature sensor the light sensor

1455
00:57:00,480 --> 00:57:03,760
and the microphone as a sound sensor

1456
00:57:03,760 --> 00:57:05,200
we've expanded upon our growing

1457
00:57:05,200 --> 00:57:07,359
knowledge of c plus plus by using if

1458
00:57:07,359 --> 00:57:08,400
else if

1459
00:57:08,400 --> 00:57:11,200
while loops and float variables we now

1460
00:57:11,200 --> 00:57:12,880
have all the tools we need to create a

1461
00:57:12,880 --> 00:57:14,960
simple input and output program

1462
00:57:14,960 --> 00:57:16,799
which takes in data from a sensor and

1463
00:57:16,799 --> 00:57:18,640
triggers lighting sound or print

1464
00:57:18,640 --> 00:57:20,160
statements

1465
00:57:20,160 --> 00:57:22,000
in the next class we'll go even further

1466
00:57:22,000 --> 00:57:23,440
with inputs and outputs

1467
00:57:23,440 --> 00:57:25,040
by looking into using buttons and

1468
00:57:25,040 --> 00:57:26,720
switches for control

1469
00:57:26,720 --> 00:57:28,640
and servos to make projects with moving

1470
00:57:28,640 --> 00:57:31,119
parts we'll also look at multiple inputs

1471
00:57:31,119 --> 00:57:32,079
and outputs

1472
00:57:32,079 --> 00:57:33,760
using more complicated logic and

1473
00:57:33,760 --> 00:57:40,559
programming see you next time

1474
00:57:40,559 --> 00:57:42,640
you

