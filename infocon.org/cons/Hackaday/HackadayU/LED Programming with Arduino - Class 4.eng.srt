1
00:00:00,000 --> 00:00:08,320
[Music]

2
00:00:08,320 --> 00:00:10,160
welcome to our fourth and final class

3
00:00:10,160 --> 00:00:12,160
for led programming with arduino and

4
00:00:12,160 --> 00:00:12,960
fast led

5
00:00:12,960 --> 00:00:15,599
at hackaday u we've learned a ton so far

6
00:00:15,599 --> 00:00:17,920
about how to program using fast led

7
00:00:17,920 --> 00:00:19,359
but this class we're going to take our

8
00:00:19,359 --> 00:00:21,600
led programming skills to the next level

9
00:00:21,600 --> 00:00:23,279
by exploring advanced patterns and

10
00:00:23,279 --> 00:00:25,920
behaviors for our led matrix

11
00:00:25,920 --> 00:00:27,599
up until now we've been demonstrating

12
00:00:27,599 --> 00:00:29,039
lighting patterns using the circuit

13
00:00:29,039 --> 00:00:31,679
playground express's on-board leds

14
00:00:31,679 --> 00:00:33,440
but if you go back you can apply any

15
00:00:33,440 --> 00:00:35,840
pattern we've created to use our matrix

16
00:00:35,840 --> 00:00:37,760
by adjusting the number of leds and

17
00:00:37,760 --> 00:00:38,960
adjusting the data pin

18
00:00:38,960 --> 00:00:40,719
to be the pin we've connected our matrix

19
00:00:40,719 --> 00:00:43,280
to that said the pattern might not

20
00:00:43,280 --> 00:00:44,800
always fill the matrix the way we'd

21
00:00:44,800 --> 00:00:45,760
expect

22
00:00:45,760 --> 00:00:48,000
because leds on matrixes can be wired

23
00:00:48,000 --> 00:00:50,000
either in series or in parallel

24
00:00:50,000 --> 00:00:52,079
it might be snaked or not snaked it'll

25
00:00:52,079 --> 00:00:53,680
change how the lights are output to our

26
00:00:53,680 --> 00:00:55,199
matrix and what kind of pattern that

27
00:00:55,199 --> 00:00:56,480
displays

28
00:00:56,480 --> 00:00:58,399
in this class we'll specifically explore

29
00:00:58,399 --> 00:00:59,840
patterns designed to work with our

30
00:00:59,840 --> 00:01:00,800
matrix

31
00:01:00,800 --> 00:01:02,559
we'll explore complex noise and

32
00:01:02,559 --> 00:01:04,400
generative patterns as well as how to

33
00:01:04,400 --> 00:01:05,438
create patterns from

34
00:01:05,438 --> 00:01:08,000
images to make our own pixel art we'll

35
00:01:08,000 --> 00:01:09,600
explore how to get our lighting effects

36
00:01:09,600 --> 00:01:11,119
to work with sound input

37
00:01:11,119 --> 00:01:13,280
in a more advanced way to create a sound

38
00:01:13,280 --> 00:01:14,640
spectralizer

39
00:01:14,640 --> 00:01:16,240
we'll conclude by discussing how we

40
00:01:16,240 --> 00:01:17,680
might use what we've learned so far

41
00:01:17,680 --> 00:01:19,200
about led products

42
00:01:19,200 --> 00:01:21,840
and power supplies in an installation

43
00:01:21,840 --> 00:01:23,520
and some considerations when working

44
00:01:23,520 --> 00:01:26,320
with leds and exhibitions we've got a

45
00:01:26,320 --> 00:01:28,000
ton to cover before we can call this

46
00:01:28,000 --> 00:01:28,960
class a wrap

47
00:01:28,960 --> 00:01:31,920
so let's jump in if you haven't already

48
00:01:31,920 --> 00:01:33,040
set up your matrix

49
00:01:33,040 --> 00:01:36,000
open the file color palette matrix

50
00:01:36,000 --> 00:01:37,119
upload the sketch to your

51
00:01:37,119 --> 00:01:38,560
microcontroller and then

52
00:01:38,560 --> 00:01:40,880
unplug your microcontroller make sure

53
00:01:40,880 --> 00:01:42,240
that everything is off

54
00:01:42,240 --> 00:01:44,960
before you attempt the following if you

55
00:01:44,960 --> 00:01:46,640
have set up your matrix already

56
00:01:46,640 --> 00:01:49,840
feel free to jump to the next section

57
00:01:49,840 --> 00:01:51,680
hey so i'm kathy and i'm going to show

58
00:01:51,680 --> 00:01:53,040
you how to connect

59
00:01:53,040 --> 00:01:55,920
your led matrix okay so the first thing

60
00:01:55,920 --> 00:01:56,719
to do

61
00:01:56,719 --> 00:01:59,200
make sure your power supply is set to 5

62
00:01:59,200 --> 00:02:00,640
volts

63
00:02:00,640 --> 00:02:04,399
as you can see mine's set to 5 volts

64
00:02:04,799 --> 00:02:06,399
and then make sure it's off make sure

65
00:02:06,399 --> 00:02:08,399
the circuit playground isn't plugged in

66
00:02:08,399 --> 00:02:10,080
everything's disconnected and we're

67
00:02:10,080 --> 00:02:11,840
ready to start

68
00:02:11,840 --> 00:02:15,599
so the first thing you need is a black

69
00:02:15,599 --> 00:02:18,800
alligator clip and we're going to

70
00:02:18,800 --> 00:02:21,120
connect we need to connect all the

71
00:02:21,120 --> 00:02:22,560
grounds here so we're going to connect

72
00:02:22,560 --> 00:02:23,280
it to

73
00:02:23,280 --> 00:02:26,720
ground on the circuit playground

74
00:02:26,720 --> 00:02:29,440
there we go and we're going to connect

75
00:02:29,440 --> 00:02:30,239
it to both

76
00:02:30,239 --> 00:02:33,680
of the grounds on the

77
00:02:33,680 --> 00:02:36,879
matrix so this one

78
00:02:36,879 --> 00:02:40,080
in the middle and this one

79
00:02:40,080 --> 00:02:43,440
on the first part the data in

80
00:02:43,440 --> 00:02:45,680
for the matrix and i kind of like to

81
00:02:45,680 --> 00:02:50,720
just hold them together like this and

82
00:02:50,720 --> 00:02:53,200
put this guy on here make sure it hits

83
00:02:53,200 --> 00:02:55,519
them both pretty good

84
00:02:55,519 --> 00:02:58,000
and then you want to connect that to the

85
00:02:58,000 --> 00:02:59,440
ground on the power supply

86
00:02:59,440 --> 00:03:02,000
and i usually just kind of jump it on in

87
00:03:02,000 --> 00:03:03,680
this case

88
00:03:03,680 --> 00:03:05,840
just like that and slide these down to

89
00:03:05,840 --> 00:03:07,200
cover it

90
00:03:07,200 --> 00:03:08,720
and make sure he's out of the way you

91
00:03:08,720 --> 00:03:10,480
don't ever want this to touch

92
00:03:10,480 --> 00:03:12,720
the power or your matrix will have a bad

93
00:03:12,720 --> 00:03:14,319
day

94
00:03:14,319 --> 00:03:17,120
and then the next step is get a yellow

95
00:03:17,120 --> 00:03:18,959
or blue or green

96
00:03:18,959 --> 00:03:21,519
of alligator clip we're going to connect

97
00:03:21,519 --> 00:03:23,040
it the data line

98
00:03:23,040 --> 00:03:27,200
connect pin a1

99
00:03:27,519 --> 00:03:30,080
on the circuit playground and i've got

100
00:03:30,080 --> 00:03:32,239
my my little resistor here

101
00:03:32,239 --> 00:03:35,360
so just connect it

102
00:03:35,360 --> 00:03:38,000
like so

103
00:03:39,519 --> 00:03:40,799
and if you have trouble with the

104
00:03:40,799 --> 00:03:42,959
resistor it is perfectly fine

105
00:03:42,959 --> 00:03:45,760
to skip it it's best practice but these

106
00:03:45,760 --> 00:03:48,000
will work without it

107
00:03:48,000 --> 00:03:49,440
so you've got that you're going to

108
00:03:49,440 --> 00:03:51,440
connect that to the data in

109
00:03:51,440 --> 00:03:54,720
on this left side of the matrix

110
00:03:54,720 --> 00:03:56,400
then once you've got that the last step

111
00:03:56,400 --> 00:03:57,840
is to connect the power

112
00:03:57,840 --> 00:04:00,799
from the power supply to this five volt

113
00:04:00,799 --> 00:04:01,200
pin

114
00:04:01,200 --> 00:04:06,560
on the middle of the matrix like so

115
00:04:06,640 --> 00:04:08,640
and yeah at that point that's the three

116
00:04:08,640 --> 00:04:11,120
connections we've you've got uh

117
00:04:11,120 --> 00:04:13,040
three grounds the one from the circuit

118
00:04:13,040 --> 00:04:14,159
playground and two

119
00:04:14,159 --> 00:04:17,440
on the matrix are tied to ground on the

120
00:04:17,440 --> 00:04:18,639
power supply

121
00:04:18,639 --> 00:04:20,639
you've got power on your matrix

122
00:04:20,639 --> 00:04:23,120
connected to power on the power supply

123
00:04:23,120 --> 00:04:26,479
and you've got pna1 run

124
00:04:26,479 --> 00:04:29,680
into data in on the matrix cool

125
00:04:29,680 --> 00:04:31,600
so now we're ready to turn it on i'm

126
00:04:31,600 --> 00:04:34,960
gonna go upload code and come on back

127
00:04:34,960 --> 00:04:37,520
okay and here we are i've uploaded code

128
00:04:37,520 --> 00:04:38,720
and i'm ready to uh

129
00:04:38,720 --> 00:04:40,800
turn this on the first thing we're gonna

130
00:04:40,800 --> 00:04:43,199
do is power up the power supply

131
00:04:43,199 --> 00:04:44,720
it's no big deal this time because we're

132
00:04:44,720 --> 00:04:47,199
not powering anything off the board

133
00:04:47,199 --> 00:04:51,040
but if you are you really want your

134
00:04:51,040 --> 00:04:52,000
power supply on

135
00:04:52,000 --> 00:04:54,560
first so that there'll be enough power

136
00:04:54,560 --> 00:04:56,720
for whatever lights you have plugged in

137
00:04:56,720 --> 00:04:58,720
if you have too many lights plugged in

138
00:04:58,720 --> 00:05:01,440
like running them off the board

139
00:05:01,440 --> 00:05:04,880
without uh like

140
00:05:04,880 --> 00:05:08,080
external power it's very easy to

141
00:05:08,080 --> 00:05:10,320
make your arduino freeze up because it

142
00:05:10,320 --> 00:05:12,400
it can't power itself

143
00:05:12,400 --> 00:05:14,000
so we're going to turn the power supply

144
00:05:14,000 --> 00:05:17,680
on first turn it on or plug it in

145
00:05:17,759 --> 00:05:19,520
and then we're very carefully going to

146
00:05:19,520 --> 00:05:20,800
plug in our

147
00:05:20,800 --> 00:05:25,840
micro controller just like this

148
00:05:26,800 --> 00:05:29,520
and there you have it it lights up uh

149
00:05:29,520 --> 00:05:30,240
yeah make sure

150
00:05:30,240 --> 00:05:33,120
nothing shorts you always want to keep

151
00:05:33,120 --> 00:05:33,840
ground

152
00:05:33,840 --> 00:05:36,800
and power like a good way away don't

153
00:05:36,800 --> 00:05:38,000
don't let those two touch

154
00:05:38,000 --> 00:05:40,320
it's a bad idea but anyway yeah this is

155
00:05:40,320 --> 00:05:41,520
a little bit

156
00:05:41,520 --> 00:05:43,680
washed out but you can see our lovely

157
00:05:43,680 --> 00:05:45,360
patterns

158
00:05:45,360 --> 00:05:48,800
and uh this file is on github for you

159
00:05:48,800 --> 00:05:52,560
it's uh it's called

160
00:05:52,560 --> 00:05:55,520
color palette matrix so yeah check that

161
00:05:55,520 --> 00:05:56,080
out

162
00:05:56,080 --> 00:05:59,680
and uh thanks for coming

163
00:06:00,080 --> 00:06:01,919
if you've got your example sketch loaded

164
00:06:01,919 --> 00:06:03,680
double check all your connections making

165
00:06:03,680 --> 00:06:05,280
sure that power and ground are not in

166
00:06:05,280 --> 00:06:06,720
contact with each other

167
00:06:06,720 --> 00:06:08,800
it falls well plug in the power supply

168
00:06:08,800 --> 00:06:10,319
and then your circuit playground and you

169
00:06:10,319 --> 00:06:11,840
should see the matrix light up with our

170
00:06:11,840 --> 00:06:12,880
test pattern

171
00:06:12,880 --> 00:06:15,360
if you don't see that stop immediately

172
00:06:15,360 --> 00:06:16,960
unplug the circuit playground and then

173
00:06:16,960 --> 00:06:18,639
the power supply and recheck your

174
00:06:18,639 --> 00:06:19,759
connections

175
00:06:19,759 --> 00:06:21,440
if things still aren't working come to

176
00:06:21,440 --> 00:06:25,199
our office hours we'll be glad to help

177
00:06:25,280 --> 00:06:26,880
once you've got everything working it's

178
00:06:26,880 --> 00:06:28,960
time to start developing code for our 16

179
00:06:28,960 --> 00:06:30,639
by 16 matrix

180
00:06:30,639 --> 00:06:32,319
but before we start i'd like to note

181
00:06:32,319 --> 00:06:34,160
that it's extremely important to keep

182
00:06:34,160 --> 00:06:35,919
the power draw low when working with the

183
00:06:35,919 --> 00:06:37,680
neopixel matrix

184
00:06:37,680 --> 00:06:39,440
i've set the brightness on all our

185
00:06:39,440 --> 00:06:42,560
examples to 64 to help do this

186
00:06:42,560 --> 00:06:45,440
as adafruit site points out quote don't

187
00:06:45,440 --> 00:06:48,080
forget with 256 leds

188
00:06:48,080 --> 00:06:50,639
you could use over 15 amps of current if

189
00:06:50,639 --> 00:06:51,199
you turn

190
00:06:51,199 --> 00:06:53,680
all of the leds onto white which we

191
00:06:53,680 --> 00:06:55,599
really do not recommend because we don't

192
00:06:55,599 --> 00:06:58,000
think the plex pcb can handle that much

193
00:06:58,000 --> 00:06:58,800
current

194
00:06:58,800 --> 00:07:00,960
try to keep the current draw at under 5

195
00:07:00,960 --> 00:07:02,080
amps please

196
00:07:02,080 --> 00:07:04,639
note flexible pcbs are not designed for

197
00:07:04,639 --> 00:07:06,800
repeated flexing

198
00:07:06,800 --> 00:07:09,280
end quote running the matrix at an

199
00:07:09,280 --> 00:07:10,960
excessive power draw could damage the

200
00:07:10,960 --> 00:07:13,360
matrix or even set it on fire

201
00:07:13,360 --> 00:07:15,440
as could flexing or bending it too much

202
00:07:15,440 --> 00:07:17,280
so let's keep the brightness low at all

203
00:07:17,280 --> 00:07:19,360
times and always try to keep your matrix

204
00:07:19,360 --> 00:07:20,639
flat on your desk

205
00:07:20,639 --> 00:07:23,680
got it right so let's get started

206
00:07:23,680 --> 00:07:28,479
from the course files open up xy matrix

207
00:07:28,720 --> 00:07:30,560
in this sketch we'll examine one way to

208
00:07:30,560 --> 00:07:32,639
translate two-dimensional animations

209
00:07:32,639 --> 00:07:35,599
onto our one-dimensional leds array

210
00:07:35,599 --> 00:07:40,080
first let's look at lines 27-29

211
00:07:40,080 --> 00:07:41,520
here's where we're defining both our

212
00:07:41,520 --> 00:07:44,319
matrix width and height as 16.

213
00:07:44,319 --> 00:07:46,479
if we had a matrix of a different size

214
00:07:46,479 --> 00:07:49,360
for example adafruit's 8 by 32 matrix

215
00:07:49,360 --> 00:07:52,400
that might look like this

216
00:07:54,479 --> 00:07:56,879
or if you have a smaller 8x8 matrix you

217
00:07:56,879 --> 00:07:59,440
can just set both values to 8.

218
00:07:59,440 --> 00:08:02,879
the next line 32 is very important

219
00:08:02,879 --> 00:08:04,639
fast led needs to know which way your

220
00:08:04,639 --> 00:08:06,000
matrix is wired

221
00:08:06,000 --> 00:08:08,560
in a serpentine fashion across down and

222
00:08:08,560 --> 00:08:10,000
back like a snake

223
00:08:10,000 --> 00:08:12,560
or a non-serpentine fashion from the end

224
00:08:12,560 --> 00:08:13,440
of each line

225
00:08:13,440 --> 00:08:15,280
back to the very beginning of the next

226
00:08:15,280 --> 00:08:16,960
like a typewriter

227
00:08:16,960 --> 00:08:19,039
our matrix is serpentine as are the vast

228
00:08:19,039 --> 00:08:20,960
majority of led matrixes

229
00:08:20,960 --> 00:08:22,560
because doing it the other way involves

230
00:08:22,560 --> 00:08:24,000
a lot more wire

231
00:08:24,000 --> 00:08:25,520
but you may see the other kind in the

232
00:08:25,520 --> 00:08:27,520
wild so if you're ever trying to animate

233
00:08:27,520 --> 00:08:29,280
a matrix and things just aren't making

234
00:08:29,280 --> 00:08:29,840
sense

235
00:08:29,840 --> 00:08:31,120
consider whether you might have the

236
00:08:31,120 --> 00:08:33,679
wrong mode set you can always check

237
00:08:33,679 --> 00:08:35,760
whether a matrix is serpentine or not

238
00:08:35,760 --> 00:08:38,000
by animating a simple chase pattern like

239
00:08:38,000 --> 00:08:40,159
our naive chase from class 2.

240
00:08:40,159 --> 00:08:42,000
if you watch the dot to see how it moves

241
00:08:42,000 --> 00:08:43,679
through the matrix and match the

242
00:08:43,679 --> 00:08:44,959
movement pattern to one of the

243
00:08:44,959 --> 00:08:47,519
illustrations at the top of x y matrix

244
00:08:47,519 --> 00:08:49,839
then set k matrix certainty layout to

245
00:08:49,839 --> 00:08:52,160
true or false accordingly

246
00:08:52,160 --> 00:08:54,000
before we go further with the sketch i

247
00:08:54,000 --> 00:08:55,760
want to talk a little bit about the xy

248
00:08:55,760 --> 00:08:57,279
coordinate system

249
00:08:57,279 --> 00:08:59,440
the xy coordinate system is the way most

250
00:08:59,440 --> 00:09:01,200
programming languages approach the

251
00:09:01,200 --> 00:09:03,519
layout of the pixels on a screen

252
00:09:03,519 --> 00:09:05,440
it's based on the cartesian coordinate

253
00:09:05,440 --> 00:09:07,440
system you may have learned in school

254
00:09:07,440 --> 00:09:10,160
although ours only uses positive numbers

255
00:09:10,160 --> 00:09:11,920
it looks like this

256
00:09:11,920 --> 00:09:14,320
as shown x is the position in the row

257
00:09:14,320 --> 00:09:16,080
across counting towards the right

258
00:09:16,080 --> 00:09:18,160
and y is the position in the column down

259
00:09:18,160 --> 00:09:19,600
counting from the top

260
00:09:19,600 --> 00:09:21,120
so combining the two describes the

261
00:09:21,120 --> 00:09:23,519
location of one pixel in the matrix

262
00:09:23,519 --> 00:09:26,720
for instance x y three comma six means

263
00:09:26,720 --> 00:09:29,360
the pixel in the third row six column

264
00:09:29,360 --> 00:09:31,360
for more information on this including

265
00:09:31,360 --> 00:09:32,560
some helpful diagrams

266
00:09:32,560 --> 00:09:37,839
see here

267
00:09:37,920 --> 00:09:40,640
the main part of the algorithm is on

268
00:09:40,640 --> 00:09:41,040
line

269
00:09:41,040 --> 00:09:43,760
86.

270
00:09:44,160 --> 00:09:47,760
it's the x y function x y

271
00:09:47,760 --> 00:09:50,320
maps an x and y-coordinate like the ones

272
00:09:50,320 --> 00:09:51,680
we just discussed

273
00:09:51,680 --> 00:09:55,040
to the matching index in the leds array

274
00:09:55,040 --> 00:09:58,240
line 91 is the easy case

275
00:09:58,240 --> 00:10:01,279
a non-serpentine matrix to get the index

276
00:10:01,279 --> 00:10:02,800
in the led's ray

277
00:10:02,800 --> 00:10:05,279
you take the y given coordinate multiply

278
00:10:05,279 --> 00:10:07,440
it by the total size of the y dimension

279
00:10:07,440 --> 00:10:08,480
in the matrix

280
00:10:08,480 --> 00:10:11,040
k matrix with to get the total number of

281
00:10:11,040 --> 00:10:13,120
pixels described by the y dimension

282
00:10:13,120 --> 00:10:15,440
and then add the x coordinate if you

283
00:10:15,440 --> 00:10:17,040
don't understand the principle

284
00:10:17,040 --> 00:10:18,880
try labeling the coordinates of a small

285
00:10:18,880 --> 00:10:20,880
matrix on a piece of graph paper

286
00:10:20,880 --> 00:10:22,560
doing the math by hand for a couple of

287
00:10:22,560 --> 00:10:24,640
points and counting each pixel

288
00:10:24,640 --> 00:10:26,880
out with your finger i find this helps

289
00:10:26,880 --> 00:10:28,320
when arrays get confusing

290
00:10:28,320 --> 00:10:32,079
especially two-dimensional arrays

291
00:10:32,079 --> 00:10:35,360
lines 94 through 103

292
00:10:35,360 --> 00:10:37,920
are the more difficult case a serpentine

293
00:10:37,920 --> 00:10:39,920
matrix like ours

294
00:10:39,920 --> 00:10:44,720
the first part the if y and 0x01

295
00:10:44,720 --> 00:10:46,880
is a somewhat lead way of checking

296
00:10:46,880 --> 00:10:47,920
whether y is an

297
00:10:47,920 --> 00:10:50,480
odd number odd numbers always have the

298
00:10:50,480 --> 00:10:52,959
bit in the binary ones place set

299
00:10:52,959 --> 00:10:54,640
which is what the expression is checking

300
00:10:54,640 --> 00:10:56,240
for

301
00:10:56,240 --> 00:11:00,399
y and 0x01 says take the bitwise

302
00:11:00,399 --> 00:11:04,000
and of y and 1 which is true if any of

303
00:11:04,000 --> 00:11:06,000
the same bits are set in both the number

304
00:11:06,000 --> 00:11:06,560
1

305
00:11:06,560 --> 00:11:10,320
which only has the one bit set and why

306
00:11:10,320 --> 00:11:12,560
so the only way it can be true is if the

307
00:11:12,560 --> 00:11:13,760
ones place bit

308
00:11:13,760 --> 00:11:16,480
is set in y which means it must be an

309
00:11:16,480 --> 00:11:17,600
odd number

310
00:11:17,600 --> 00:11:19,440
every odd number can be expressed as

311
00:11:19,440 --> 00:11:20,959
some even number

312
00:11:20,959 --> 00:11:24,160
which we're not even examining plus one

313
00:11:24,160 --> 00:11:25,760
for more on this frankly way too

314
00:11:25,760 --> 00:11:28,000
complicated thing to put in an example

315
00:11:28,000 --> 00:11:30,480
see here

316
00:11:32,800 --> 00:11:35,200
anyway long story short just trust me

317
00:11:35,200 --> 00:11:36,560
that this line means

318
00:11:36,560 --> 00:11:39,760
is why odd if so odd rows

319
00:11:39,760 --> 00:11:43,200
run backwards so we're doing the same y

320
00:11:43,200 --> 00:11:45,440
times k matrix with calculation as

321
00:11:45,440 --> 00:11:46,320
before

322
00:11:46,320 --> 00:11:48,480
and then adding the reverse position for

323
00:11:48,480 --> 00:11:49,360
x

324
00:11:49,360 --> 00:11:51,440
otherwise we're just going to take y

325
00:11:51,440 --> 00:11:53,200
times k matrix with

326
00:11:53,200 --> 00:11:56,639
and add x like earlier since x y

327
00:11:56,639 --> 00:12:00,000
wasn't on an odd row

328
00:12:00,240 --> 00:12:01,920
so that's how you calculate where in

329
00:12:01,920 --> 00:12:04,880
your leds matrix your coordinates are

330
00:12:04,880 --> 00:12:06,720
fortunately you can just cut and paste

331
00:12:06,720 --> 00:12:08,720
this function and use it forever without

332
00:12:08,720 --> 00:12:10,079
having to explain it

333
00:12:10,079 --> 00:12:13,120
which makes you luckier than me

334
00:12:13,120 --> 00:12:15,519
but before we move on let's take heed of

335
00:12:15,519 --> 00:12:16,320
the note given

336
00:12:16,320 --> 00:12:19,680
in the comment above x y

337
00:12:19,680 --> 00:12:21,680
as we discussed before writing to a

338
00:12:21,680 --> 00:12:24,240
position beyond the end of our array or

339
00:12:24,240 --> 00:12:26,320
before it can cause unpredictable

340
00:12:26,320 --> 00:12:28,639
effects and certainly won't animate your

341
00:12:28,639 --> 00:12:29,600
lights

342
00:12:29,600 --> 00:12:31,120
check to make sure your coordinates

343
00:12:31,120 --> 00:12:32,720
always fall between 0

344
00:12:32,720 --> 00:12:35,360
and k matrix width or k matrix height

345
00:12:35,360 --> 00:12:37,120
when using this function

346
00:12:37,120 --> 00:12:39,200
the next function you'll see down on

347
00:12:39,200 --> 00:12:41,279
line 155

348
00:12:41,279 --> 00:12:46,240
x y safe xy safe is a clever way around

349
00:12:46,240 --> 00:12:48,959
this problem as described in the

350
00:12:48,959 --> 00:12:50,800
extensive comment

351
00:12:50,800 --> 00:12:52,720
this declares an extra pixel in our

352
00:12:52,720 --> 00:12:54,800
array and then moves the pointer for the

353
00:12:54,800 --> 00:12:55,279
array

354
00:12:55,279 --> 00:12:57,680
up one element we haven't gotten into

355
00:12:57,680 --> 00:12:58,320
pointers

356
00:12:58,320 --> 00:13:00,399
but they are a more advanced c construct

357
00:13:00,399 --> 00:13:01,920
that allows you to point

358
00:13:01,920 --> 00:13:04,160
to a special variable called a pointer

359
00:13:04,160 --> 00:13:06,160
to the location and memory of another

360
00:13:06,160 --> 00:13:07,200
variable

361
00:13:07,200 --> 00:13:11,200
and that's what the star in crgb star

362
00:13:11,200 --> 00:13:15,519
equals portion of line 153 means

363
00:13:15,519 --> 00:13:17,360
this line creates a new pointer to a

364
00:13:17,360 --> 00:13:18,639
crgb object

365
00:13:18,639 --> 00:13:22,079
and points it to leds plus safety pixel

366
00:13:22,079 --> 00:13:26,320
plus one or leds plus safety pixel

367
00:13:26,320 --> 00:13:30,440
one then the magic is on lines 157 and

368
00:13:30,440 --> 00:13:33,440
158

369
00:13:33,600 --> 00:13:35,760
if x or y are beyond the size of the

370
00:13:35,760 --> 00:13:38,639
array the function returns negative one

371
00:13:38,639 --> 00:13:40,560
leds negative one would normally be

372
00:13:40,560 --> 00:13:42,480
nonsense and will cause you to write

373
00:13:42,480 --> 00:13:44,160
beyond the bounds of your array

374
00:13:44,160 --> 00:13:45,680
but since we've moved the whole array

375
00:13:45,680 --> 00:13:47,920
pointer up one led's

376
00:13:47,920 --> 00:13:50,399
negative one just points to leds plus

377
00:13:50,399 --> 00:13:51,360
safety pixel

378
00:13:51,360 --> 00:13:54,160
zero that position is safe to write to

379
00:13:54,160 --> 00:13:55,360
and it never gets drawn

380
00:13:55,360 --> 00:13:58,000
either because we never pass leds plus

381
00:13:58,000 --> 00:14:01,760
safety pixel to fast led show

382
00:14:01,760 --> 00:14:04,480
in short xy safe is a function you can

383
00:14:04,480 --> 00:14:06,480
use that ensures you can't write past

384
00:14:06,480 --> 00:14:07,760
the end of your array

385
00:14:07,760 --> 00:14:09,680
which can be surprisingly easy to do

386
00:14:09,680 --> 00:14:10,800
when writing code

387
00:14:10,800 --> 00:14:12,240
especially for arrays which aren't

388
00:14:12,240 --> 00:14:14,639
square i don't tend to use it

389
00:14:14,639 --> 00:14:16,720
i prefer to do my own error checking or

390
00:14:16,720 --> 00:14:18,240
i just design my for loops

391
00:14:18,240 --> 00:14:20,240
calls to random and other led

392
00:14:20,240 --> 00:14:22,560
assignments so they don't overwrite

393
00:14:22,560 --> 00:14:24,240
but you can use it elsewhere if you'd

394
00:14:24,240 --> 00:14:27,360
like just make sure to copy lines 152

395
00:14:27,360 --> 00:14:31,279
and lines 153 with it

396
00:14:31,279 --> 00:14:33,120
because if you try to use this function

397
00:14:33,120 --> 00:14:35,040
with an array you've defined normally

398
00:14:35,040 --> 00:14:38,079
like the crgb leds k matrix width times

399
00:14:38,079 --> 00:14:39,600
k matrix height

400
00:14:39,600 --> 00:14:43,120
chances are you'll write past it

401
00:14:43,120 --> 00:14:45,519
after all this our draw one frame and

402
00:14:45,519 --> 00:14:49,199
loop functions are pretty simple

403
00:14:49,360 --> 00:14:51,279
draw one frame smears pretty shifting

404
00:14:51,279 --> 00:14:53,600
bars of color across the whole matrix

405
00:14:53,600 --> 00:14:55,600
giving a starting hue in our loop

406
00:14:55,600 --> 00:14:57,360
function the starting hue is based on

407
00:14:57,360 --> 00:14:58,240
time

408
00:14:58,240 --> 00:15:00,320
and two deltas to add to the color for

409
00:15:00,320 --> 00:15:02,720
each step through x and y

410
00:15:02,720 --> 00:15:04,240
in our loop function these are

411
00:15:04,240 --> 00:15:05,920
calculated based on two slightly

412
00:15:05,920 --> 00:15:07,360
different cosine waves

413
00:15:07,360 --> 00:15:09,279
it's the cosines that drive the movement

414
00:15:09,279 --> 00:15:10,880
of the color bars

415
00:15:10,880 --> 00:15:13,040
upload this sketch and check out what it

416
00:15:13,040 --> 00:15:15,360
does congratulations you've just worked

417
00:15:15,360 --> 00:15:18,959
through your first matrix programming

418
00:15:24,839 --> 00:15:27,839
example

419
00:15:35,360 --> 00:15:38,800
open up the sketch noise plus palette

420
00:15:38,800 --> 00:15:40,480
in this sketch we'll learn to generate

421
00:15:40,480 --> 00:15:42,720
purlin simplex noise across an led

422
00:15:42,720 --> 00:15:44,079
matrix

423
00:15:44,079 --> 00:15:45,839
ken perlin is a programmer who

424
00:15:45,839 --> 00:15:47,680
originated many of the algorithms we

425
00:15:47,680 --> 00:15:49,040
used to generate what's called

426
00:15:49,040 --> 00:15:51,600
gradient noise ever shifting patterns

427
00:15:51,600 --> 00:15:53,519
which are used as textures in games

428
00:15:53,519 --> 00:15:56,720
cgi and other forms of computer art

429
00:15:56,720 --> 00:15:58,480
simplex noise which we'll be examining

430
00:15:58,480 --> 00:15:59,759
here is a later

431
00:15:59,759 --> 00:16:02,000
improvement on this original algorithm

432
00:16:02,000 --> 00:16:03,920
but both are often colloquially referred

433
00:16:03,920 --> 00:16:05,360
to as purlin noise

434
00:16:05,360 --> 00:16:07,680
fun fact perlin invented his first noise

435
00:16:07,680 --> 00:16:09,120
algorithm for one of my favorite

436
00:16:09,120 --> 00:16:10,160
all-time movies

437
00:16:10,160 --> 00:16:13,040
tron anyway the cool thing about noise

438
00:16:13,040 --> 00:16:14,399
is that it can be used to mimic the

439
00:16:14,399 --> 00:16:16,399
ordered randomness we see in nature

440
00:16:16,399 --> 00:16:19,360
waves clouds fire smoke lava islands

441
00:16:19,360 --> 00:16:20,560
whole continents

442
00:16:20,560 --> 00:16:23,120
random 1960s movie computer processing

443
00:16:23,120 --> 00:16:25,199
blips and many other fascinating effects

444
00:16:25,199 --> 00:16:27,279
can be generated with 2d noise

445
00:16:27,279 --> 00:16:30,800
in ways that never repeat for more on

446
00:16:30,800 --> 00:16:31,360
purlin

447
00:16:31,360 --> 00:16:33,199
and his algorithms see the following

448
00:16:33,199 --> 00:16:35,120
resources

449
00:16:35,120 --> 00:16:37,600
them itself is so complicated that fast

450
00:16:37,600 --> 00:16:39,680
led has implemented it in a convenient

451
00:16:39,680 --> 00:16:41,040
function for you

452
00:16:41,040 --> 00:16:42,800
we'll be learning how to use the in

453
00:16:42,800 --> 00:16:44,160
noise 8 function

454
00:16:44,160 --> 00:16:46,240
to fill a 2-dimensional array with noise

455
00:16:46,240 --> 00:16:47,920
values and then we'll learn how to

456
00:16:47,920 --> 00:16:49,759
translate the noise to colors from our

457
00:16:49,759 --> 00:16:52,399
color palettes and display it

458
00:16:52,399 --> 00:16:54,079
as a warning please note that some of

459
00:16:54,079 --> 00:16:55,600
the noise values in the sketch

460
00:16:55,600 --> 00:16:58,160
can create strobing or flashing effects

461
00:16:58,160 --> 00:16:59,680
which may affect you if you have

462
00:16:59,680 --> 00:17:01,880
photosensitive epilepsy or other

463
00:17:01,880 --> 00:17:03,440
photosensitivities

464
00:17:03,440 --> 00:17:05,599
if so you may wish to skip uploading

465
00:17:05,599 --> 00:17:08,000
this sketch at the end of the section

466
00:17:08,000 --> 00:17:09,679
the first thing we should discuss in

467
00:17:09,679 --> 00:17:12,400
this sketch is on line 39.

468
00:17:12,400 --> 00:17:14,319
here you'll see a define statement for

469
00:17:14,319 --> 00:17:16,000
max dimension

470
00:17:16,000 --> 00:17:19,760
and then you'll see some parameters

471
00:17:19,760 --> 00:17:21,919
the question mark here and the

472
00:17:21,919 --> 00:17:23,280
subsequent colon

473
00:17:23,280 --> 00:17:25,280
is a less common way of writing a one

474
00:17:25,280 --> 00:17:26,400
line if statement

475
00:17:26,400 --> 00:17:29,520
in c what this line says is

476
00:17:29,520 --> 00:17:33,120
if k matrix width is greater than height

477
00:17:33,120 --> 00:17:35,440
then define max dimension as k matrix

478
00:17:35,440 --> 00:17:36,720
width

479
00:17:36,720 --> 00:17:40,799
otherwise define it as k matrix height

480
00:17:40,799 --> 00:17:47,840
the formula is basically this

481
00:17:48,799 --> 00:17:50,559
we won't need to worry about this in our

482
00:17:50,559 --> 00:17:52,480
case because both matrix dimensions are

483
00:17:52,480 --> 00:17:53,120
the same

484
00:17:53,120 --> 00:17:54,799
but i wanted to point it out because it

485
00:17:54,799 --> 00:17:56,559
might be confusing if you've never seen

486
00:17:56,559 --> 00:17:59,120
this before

487
00:17:59,200 --> 00:18:02,720
next we've got our led array as normal

488
00:18:02,720 --> 00:18:05,200
and a set of xyz coordinates used to

489
00:18:05,200 --> 00:18:07,039
generate noise for every position in our

490
00:18:07,039 --> 00:18:09,679
noise array

491
00:18:09,679 --> 00:18:11,039
we'll be setting these to random

492
00:18:11,039 --> 00:18:13,360
locations inside setup so that our noise

493
00:18:13,360 --> 00:18:15,840
is never the same twice

494
00:18:15,840 --> 00:18:17,600
the next interesting things are our

495
00:18:17,600 --> 00:18:21,120
speed and scale variables

496
00:18:21,360 --> 00:18:24,559
you can see these annotated for you

497
00:18:24,559 --> 00:18:26,160
these are the primary controllable

498
00:18:26,160 --> 00:18:28,960
parameters for our noise algorithm

499
00:18:28,960 --> 00:18:31,280
speed is kind of self-explanatory how

500
00:18:31,280 --> 00:18:33,200
fast is the effect

501
00:18:33,200 --> 00:18:34,799
slow values might look more like

502
00:18:34,799 --> 00:18:37,039
drifting islands or clouds

503
00:18:37,039 --> 00:18:39,120
high values look more like water or

504
00:18:39,120 --> 00:18:41,200
flickering effects

505
00:18:41,200 --> 00:18:43,039
scale on the other hand determines how

506
00:18:43,039 --> 00:18:46,480
large the contiguous area of noise are

507
00:18:46,480 --> 00:18:48,559
small values create what looks like

508
00:18:48,559 --> 00:18:50,559
continents or lava blobs

509
00:18:50,559 --> 00:18:52,640
large values create smaller areas of

510
00:18:52,640 --> 00:18:54,960
noise until you finally end up with a

511
00:18:54,960 --> 00:18:59,120
crazy shifting blippi blinking effect

512
00:18:59,760 --> 00:19:01,760
this sketch changes the values for speed

513
00:19:01,760 --> 00:19:04,080
and scale based on the current palette

514
00:19:04,080 --> 00:19:05,600
which is a good way to ensure that the

515
00:19:05,600 --> 00:19:08,559
mood of the noise matches the colors

516
00:19:08,559 --> 00:19:10,080
once i've narrowed down the kind of

517
00:19:10,080 --> 00:19:12,320
effect i want though i personally also

518
00:19:12,320 --> 00:19:14,720
like to use the beats and wave functions

519
00:19:14,720 --> 00:19:17,280
we discussed in class 2 to vary noise

520
00:19:17,280 --> 00:19:19,520
parameters slightly over time

521
00:19:19,520 --> 00:19:21,360
this will give you even more variation

522
00:19:21,360 --> 00:19:22,880
in the way things look

523
00:19:22,880 --> 00:19:25,679
try it on your own and see what you get

524
00:19:25,679 --> 00:19:26,880
on line 65

525
00:19:26,880 --> 00:19:29,520
we have our noise array it's a two

526
00:19:29,520 --> 00:19:32,160
dimensional array declared like so

527
00:19:32,160 --> 00:19:34,320
as you can see if you're using a

528
00:19:34,320 --> 00:19:36,160
rectangular led matrix

529
00:19:36,160 --> 00:19:37,679
the noise array will end up being a

530
00:19:37,679 --> 00:19:39,360
square size to match the largest

531
00:19:39,360 --> 00:19:41,280
dimension of the matrix

532
00:19:41,280 --> 00:19:43,200
this ensures that we can colorize the

533
00:19:43,200 --> 00:19:44,960
noise across our whole ray without

534
00:19:44,960 --> 00:19:47,120
repeating any area of it

535
00:19:47,120 --> 00:19:49,840
we then see our definition for a palette

536
00:19:49,840 --> 00:19:50,960
as always

537
00:19:50,960 --> 00:19:52,880
and a color loop variable which adds a

538
00:19:52,880 --> 00:19:54,640
shifting base color to the palette when

539
00:19:54,640 --> 00:19:57,360
set to 1.

540
00:19:57,679 --> 00:20:01,039
our setup happens on line 70 to 79

541
00:20:01,039 --> 00:20:03,520
there's not a lot there we have our

542
00:20:03,520 --> 00:20:04,240
traditional

543
00:20:04,240 --> 00:20:07,919
fast led setup and then we have

544
00:20:07,919 --> 00:20:11,520
x y and z set to random 16.

545
00:20:11,520 --> 00:20:12,960
this means we're setting our starting

546
00:20:12,960 --> 00:20:14,720
coordinates for the noise array

547
00:20:14,720 --> 00:20:18,640
using the 16 bit random function

548
00:20:18,640 --> 00:20:21,919
and that brings us to fill noise 8 which

549
00:20:21,919 --> 00:20:24,400
actually generates our noise

550
00:20:24,400 --> 00:20:25,760
the first thing you'll notice is

551
00:20:25,760 --> 00:20:27,840
smoothing

552
00:20:27,840 --> 00:20:29,600
when running at slow speeds the fact

553
00:20:29,600 --> 00:20:31,600
that we're using 8-bit noise generates

554
00:20:31,600 --> 00:20:33,919
artifacts or off-looking pixels between

555
00:20:33,919 --> 00:20:35,039
frames

556
00:20:35,039 --> 00:20:37,200
to avoid this if the speed is less than

557
00:20:37,200 --> 00:20:39,760
50 we're computing a smoothing layer

558
00:20:39,760 --> 00:20:43,200
based on the speed to be used later on

559
00:20:43,200 --> 00:20:45,200
next we're determining an x and y

560
00:20:45,200 --> 00:20:47,039
position for each entry in the noise

561
00:20:47,039 --> 00:20:48,000
array

562
00:20:48,000 --> 00:20:49,919
this is where we add the scale variable

563
00:20:49,919 --> 00:20:52,159
to offset the position based on how far

564
00:20:52,159 --> 00:20:56,320
from the noise neighbors we want to be

565
00:20:56,320 --> 00:20:58,159
note that z doesn't change or at least

566
00:20:58,159 --> 00:21:00,240
not yet it only changes at the end of

567
00:21:00,240 --> 00:21:02,400
this function

568
00:21:02,400 --> 00:21:04,880
next as commented is some optional code

569
00:21:04,880 --> 00:21:06,080
to expand the value

570
00:21:06,080 --> 00:21:09,600
returned from inoise from 16 to 238

571
00:21:09,600 --> 00:21:12,480
back out to 0 to 255 then if we

572
00:21:12,480 --> 00:21:13,760
calculated it prior

573
00:21:13,760 --> 00:21:16,480
we're using our smoothing variable in an

574
00:21:16,480 --> 00:21:19,200
if statement

575
00:21:19,280 --> 00:21:21,440
we do this by examining the last value

576
00:21:21,440 --> 00:21:23,520
in the position of the noise array

577
00:21:23,520 --> 00:21:25,919
scaling it by our smoothing value and

578
00:21:25,919 --> 00:21:27,360
then adding our new data

579
00:21:27,360 --> 00:21:31,360
scaled to 256 minus the smoothing value

580
00:21:31,360 --> 00:21:33,520
this minimizes abrupt changes between

581
00:21:33,520 --> 00:21:35,039
the two sets of data

582
00:21:35,039 --> 00:21:36,960
preventing those visible artifacts we

583
00:21:36,960 --> 00:21:38,640
discussed earlier

584
00:21:38,640 --> 00:21:40,080
you can comment out this section of the

585
00:21:40,080 --> 00:21:41,919
code if it's confusing too

586
00:21:41,919 --> 00:21:43,840
just like the operations above since you

587
00:21:43,840 --> 00:21:45,520
may not even notice the artifacts at

588
00:21:45,520 --> 00:21:47,600
this animation speed

589
00:21:47,600 --> 00:21:49,440
then we're setting our noise data for

590
00:21:49,440 --> 00:21:51,280
this location in the noise array

591
00:21:51,280 --> 00:21:53,840
and then repeating for all the others

592
00:21:53,840 --> 00:21:54,400
zero

593
00:21:54,400 --> 00:21:57,840
through max dimension for both i and j

594
00:21:57,840 --> 00:22:00,640
lastly we bring in our speed variable

595
00:22:00,640 --> 00:22:02,720
which drives the z parameter we passed

596
00:22:02,720 --> 00:22:04,480
to i noise a earlier

597
00:22:04,480 --> 00:22:06,240
as well as adding a little spice to x

598
00:22:06,240 --> 00:22:08,559
and y this prevents our noise pattern

599
00:22:08,559 --> 00:22:10,480
from becoming too similar to itself over

600
00:22:10,480 --> 00:22:11,200
time

601
00:22:11,200 --> 00:22:12,480
although who knows if anyone would

602
00:22:12,480 --> 00:22:15,280
notice it thus every time you call

603
00:22:15,280 --> 00:22:17,039
fill noise 8 you're filling up the

604
00:22:17,039 --> 00:22:19,600
entire noise array using the i noise 8

605
00:22:19,600 --> 00:22:20,240
function

606
00:22:20,240 --> 00:22:22,799
purlin simplex noise algorithm feeding

607
00:22:22,799 --> 00:22:24,480
it slightly different values which are

608
00:22:24,480 --> 00:22:26,240
based on speed and scale plus the

609
00:22:26,240 --> 00:22:27,919
current position in the array

610
00:22:27,919 --> 00:22:29,440
the result is noise which shifts

611
00:22:29,440 --> 00:22:30,880
slightly every time you call the

612
00:22:30,880 --> 00:22:31,600
function

613
00:22:31,600 --> 00:22:33,280
which is exactly what we want for

614
00:22:33,280 --> 00:22:35,679
generating natural seaming patterns

615
00:22:35,679 --> 00:22:37,520
this is the heart of the effect used in

616
00:22:37,520 --> 00:22:39,840
this sketch the rest is just using the

617
00:22:39,840 --> 00:22:42,000
noise to generate colors for each pixel

618
00:22:42,000 --> 00:22:44,240
on our matrix

619
00:22:44,240 --> 00:22:47,440
in void map noise to leds using palette

620
00:22:47,440 --> 00:22:49,600
we do exactly that and at this point

621
00:22:49,600 --> 00:22:51,600
it's surprisingly simple

622
00:22:51,600 --> 00:22:56,639
for each pixel leds i j in the matrix

623
00:22:57,600 --> 00:22:59,440
we set the brightness to be equal to the

624
00:22:59,440 --> 00:23:00,799
noise at

625
00:23:00,799 --> 00:23:04,080
noise i j and then flip the values

626
00:23:04,080 --> 00:23:08,240
to noise j i to get out our color index

627
00:23:08,240 --> 00:23:10,320
if we set color loop earlier we're

628
00:23:10,320 --> 00:23:12,559
adding in a slowly shifting hue value so

629
00:23:12,559 --> 00:23:16,158
our colors don't repeat too much

630
00:23:17,280 --> 00:23:19,600
then we're brightening up the colors if

631
00:23:19,600 --> 00:23:21,120
the brightness value we got from our

632
00:23:21,120 --> 00:23:22,000
noise is already

633
00:23:22,000 --> 00:23:24,799
over 127 we're pegging the brightness of

634
00:23:24,799 --> 00:23:26,799
the color we get back from color palette

635
00:23:26,799 --> 00:23:28,480
to 255.

636
00:23:28,480 --> 00:23:30,320
note that this is always relative to the

637
00:23:30,320 --> 00:23:32,000
brightness of the entire strip

638
00:23:32,000 --> 00:23:34,720
which we set inside setup earlier

639
00:23:34,720 --> 00:23:36,240
otherwise we're using the built-in

640
00:23:36,240 --> 00:23:37,120
dimming function

641
00:23:37,120 --> 00:23:40,000
dim eight raw to multiply the brightness

642
00:23:40,000 --> 00:23:41,279
by two

643
00:23:41,279 --> 00:23:42,799
we're using this because the human

644
00:23:42,799 --> 00:23:44,559
perception of brightness isn't always

645
00:23:44,559 --> 00:23:45,520
linear

646
00:23:45,520 --> 00:23:47,760
what seems to us to be twice as bright

647
00:23:47,760 --> 00:23:49,520
is actually less than twice as bright in

648
00:23:49,520 --> 00:23:50,640
terms of numbers

649
00:23:50,640 --> 00:23:52,559
which makes twice as bright come off as

650
00:23:52,559 --> 00:23:53,760
too bright

651
00:23:53,760 --> 00:23:55,440
you can use this convenient function

652
00:23:55,440 --> 00:23:57,039
anytime you're calculating brightness

653
00:23:57,039 --> 00:23:58,000
differences

654
00:23:58,000 --> 00:23:59,760
which seem like they're a little less or

655
00:23:59,760 --> 00:24:01,679
more than you need them to be

656
00:24:01,679 --> 00:24:03,520
lastly we're grabbing the color from our

657
00:24:03,520 --> 00:24:05,120
palette just like we did in our color

658
00:24:05,120 --> 00:24:06,000
palette sketch

659
00:24:06,000 --> 00:24:08,720
in class 2 and we're using the x y

660
00:24:08,720 --> 00:24:09,440
function

661
00:24:09,440 --> 00:24:11,200
the same function we just used in the

662
00:24:11,200 --> 00:24:14,159
last segment to place it in our pixel

663
00:24:14,159 --> 00:24:15,760
and then we're increasing the hue in

664
00:24:15,760 --> 00:24:18,480
case we had color loop set

665
00:24:18,480 --> 00:24:21,039
next we enter our loop function the loop

666
00:24:21,039 --> 00:24:21,679
function

667
00:24:21,679 --> 00:24:23,840
is short and sweet all we do is check

668
00:24:23,840 --> 00:24:25,919
whether we need to change the palette

669
00:24:25,919 --> 00:24:27,760
generate our current frames worth of

670
00:24:27,760 --> 00:24:29,520
noise in the noise array

671
00:24:29,520 --> 00:24:31,840
call the map noise to leds using palette

672
00:24:31,840 --> 00:24:33,440
function to colorize it

673
00:24:33,440 --> 00:24:35,520
and then call fast led show to update

674
00:24:35,520 --> 00:24:36,559
the lights

675
00:24:36,559 --> 00:24:38,559
after all that this is the last thing in

676
00:24:38,559 --> 00:24:40,240
this sketch that isn't something we've

677
00:24:40,240 --> 00:24:41,760
already been through before

678
00:24:41,760 --> 00:24:43,760
again if you're photo sensitive you may

679
00:24:43,760 --> 00:24:46,000
choose not to upload this sketch

680
00:24:46,000 --> 00:24:48,880
or watch the subsequent video otherwise

681
00:24:48,880 --> 00:24:50,640
upload it to your circuit playground and

682
00:24:50,640 --> 00:25:01,840
see what it does

683
00:25:10,400 --> 00:25:12,559
i also recommend experimenting with the

684
00:25:12,559 --> 00:25:14,400
speed and scale variables

685
00:25:14,400 --> 00:25:16,400
set for each palette inside of change

686
00:25:16,400 --> 00:25:18,640
palette and settings periodically

687
00:25:18,640 --> 00:25:20,159
so you can get a better idea of what

688
00:25:20,159 --> 00:25:22,880
they do changing these and the color

689
00:25:22,880 --> 00:25:24,799
palettes of course is the primary way

690
00:25:24,799 --> 00:25:26,720
you can create multiple lighting effects

691
00:25:26,720 --> 00:25:29,760
from your simplex noise noise is a go-to

692
00:25:29,760 --> 00:25:32,080
for me anytime i want a natural evolving

693
00:25:32,080 --> 00:25:32,960
effect

694
00:25:32,960 --> 00:25:34,720
it's even better for this purpose than

695
00:25:34,720 --> 00:25:37,520
combining the waves and beats functions

696
00:25:37,520 --> 00:25:39,600
you can use it to get a convincing 2d

697
00:25:39,600 --> 00:25:42,320
fire water or clouds effect

698
00:25:42,320 --> 00:25:44,159
especially if you turn the speed down

699
00:25:44,159 --> 00:25:46,000
and just let the noise slowly evolve

700
00:25:46,000 --> 00:25:47,679
over time

701
00:25:47,679 --> 00:25:50,080
it's not just for matrixes either since

702
00:25:50,080 --> 00:25:51,279
it also looks cool on the

703
00:25:51,279 --> 00:25:53,760
one-dimensional array of the strip

704
00:25:53,760 --> 00:25:55,600
there is a 1d version of the noise

705
00:25:55,600 --> 00:25:57,360
function you can use for this

706
00:25:57,360 --> 00:26:00,400
simply call in noise 8x instead of

707
00:26:00,400 --> 00:26:04,240
in noise 8 xyz

708
00:26:04,480 --> 00:26:06,000
and of course you don't need to limit

709
00:26:06,000 --> 00:26:07,440
yourself to driving colors and

710
00:26:07,440 --> 00:26:09,200
brightness with noise

711
00:26:09,200 --> 00:26:10,960
it can be a great driver for pixel

712
00:26:10,960 --> 00:26:13,279
position animation speeds

713
00:26:13,279 --> 00:26:15,440
fades or any animation parameter that

714
00:26:15,440 --> 00:26:17,679
runs from 0 to 255

715
00:26:17,679 --> 00:26:20,320
which in fast led is most of them use

716
00:26:20,320 --> 00:26:22,640
the map function for the rest

717
00:26:22,640 --> 00:26:24,559
as a challenge can you change this

718
00:26:24,559 --> 00:26:26,640
sketch to smoothly transition between

719
00:26:26,640 --> 00:26:29,200
palettes rather than abruptly changing

720
00:26:29,200 --> 00:26:30,799
can you create your own palettes

721
00:26:30,799 --> 00:26:32,400
including gradient palettes

722
00:26:32,400 --> 00:26:34,320
and find matching noise parameters for

723
00:26:34,320 --> 00:26:36,960
them can you use the beats and wave

724
00:26:36,960 --> 00:26:38,880
functions discussed in class 2

725
00:26:38,880 --> 00:26:40,880
to vary the noise parameters for each

726
00:26:40,880 --> 00:26:43,840
animation slightly over time

727
00:26:43,840 --> 00:26:45,760
edit the code to try your hand at one or

728
00:26:45,760 --> 00:26:47,520
more of these challenges

729
00:26:47,520 --> 00:26:49,039
be sure to post your videos in the

730
00:26:49,039 --> 00:26:50,960
comments on our class page we'd love to

731
00:26:50,960 --> 00:26:53,840
see what you try

732
00:26:54,080 --> 00:26:56,240
in this next section we'll learn how to

733
00:26:56,240 --> 00:26:58,799
source edit and animate classic 8-bit

734
00:26:58,799 --> 00:27:00,240
sprite-based characters

735
00:27:00,240 --> 00:27:03,600
on our neopixel matrix step 1 is to

736
00:27:03,600 --> 00:27:05,360
think about what sprites you might want

737
00:27:05,360 --> 00:27:06,960
to animate

738
00:27:06,960 --> 00:27:09,679
you can use any bitmap editor or even

739
00:27:09,679 --> 00:27:11,679
photo editing software like or

740
00:27:11,679 --> 00:27:12,720
photoshop

741
00:27:12,720 --> 00:27:15,279
to create your own sprites or you can

742
00:27:15,279 --> 00:27:17,559
head to this site

743
00:27:17,559 --> 00:27:19,279
spriteshyphenresource.com and grab

744
00:27:19,279 --> 00:27:22,159
something classic

745
00:27:24,159 --> 00:27:26,559
the first problem we've got is that we

746
00:27:26,559 --> 00:27:29,039
have a 16 by 16 matrix

747
00:27:29,039 --> 00:27:31,679
and only the oldest 8-bit games are very

748
00:27:31,679 --> 00:27:34,080
small details from slightly newer games

749
00:27:34,080 --> 00:27:37,600
have sprites limited to 16x16 old arcade

750
00:27:37,600 --> 00:27:38,159
games

751
00:27:38,159 --> 00:27:40,159
like galaga or millipede are good

752
00:27:40,159 --> 00:27:41,200
sources

753
00:27:41,200 --> 00:27:44,799
as are some older nes and genesis games

754
00:27:44,799 --> 00:27:46,880
i wanted something from final fantasy

755
00:27:46,880 --> 00:27:48,000
but only the other world

756
00:27:48,000 --> 00:27:49,760
character sprites were small enough to

757
00:27:49,760 --> 00:27:51,039
fit in the matrix

758
00:27:51,039 --> 00:27:53,279
here's the image i've used but i've

759
00:27:53,279 --> 00:27:55,039
zoomed in on it because it would look so

760
00:27:55,039 --> 00:27:58,320
very tiny otherwise

761
00:27:59,360 --> 00:28:01,440
what you need to do is create a series

762
00:28:01,440 --> 00:28:02,480
of images

763
00:28:02,480 --> 00:28:05,679
each of exactly 16 by 16 pixels

764
00:28:05,679 --> 00:28:07,440
you can do this by trimming existing

765
00:28:07,440 --> 00:28:09,679
sprite sheets from spriter's resource

766
00:28:09,679 --> 00:28:12,480
or by drawing your own sprites you can

767
00:28:12,480 --> 00:28:15,120
do both using any image editor

768
00:28:15,120 --> 00:28:17,039
if you don't have one i recommend using

769
00:28:17,039 --> 00:28:19,279
the open source photo editor

770
00:28:19,279 --> 00:28:21,440
or you can google bitmap editor to find

771
00:28:21,440 --> 00:28:23,600
tools meant for creating sprites

772
00:28:23,600 --> 00:28:25,600
your animation will look best if you

773
00:28:25,600 --> 00:28:27,840
fill the 16 by 16 space with your

774
00:28:27,840 --> 00:28:28,640
character

775
00:28:28,640 --> 00:28:31,120
as much as possible otherwise it can be

776
00:28:31,120 --> 00:28:32,720
hard to keep the character's position

777
00:28:32,720 --> 00:28:34,640
from shifting in unwanted ways during

778
00:28:34,640 --> 00:28:36,320
animation

779
00:28:36,320 --> 00:28:39,120
make certain your images are exactly 16

780
00:28:39,120 --> 00:28:41,679
by 16 pixels in size

781
00:28:41,679 --> 00:28:43,440
otherwise the converted arrays will give

782
00:28:43,440 --> 00:28:44,960
you too many

783
00:28:44,960 --> 00:28:47,440
few initializers errors when you paste

784
00:28:47,440 --> 00:28:49,600
them into your arduino code

785
00:28:49,600 --> 00:28:51,520
if you're on windows save your completed

786
00:28:51,520 --> 00:28:52,720
images as bitmap

787
00:28:52,720 --> 00:28:55,840
files one file per frame of animation

788
00:28:55,840 --> 00:28:58,320
if you're on macos save them as png

789
00:28:58,320 --> 00:28:58,960
files

790
00:28:58,960 --> 00:29:02,080
one file per frame of animation once you

791
00:29:02,080 --> 00:29:03,520
have your images saved

792
00:29:03,520 --> 00:29:05,840
download the open source lcd image

793
00:29:05,840 --> 00:29:07,840
converter on windows or linux

794
00:29:07,840 --> 00:29:12,240
or pixel art sprite 2 hex for mac os

795
00:29:12,240 --> 00:29:14,159
we'll be using one of these two programs

796
00:29:14,159 --> 00:29:16,080
to convert each image to an array of

797
00:29:16,080 --> 00:29:20,000
colors for use in our arduino code

798
00:29:20,320 --> 00:29:22,320
once you have the converter open up your

799
00:29:22,320 --> 00:29:23,919
image and select

800
00:29:23,919 --> 00:29:27,840
options conversion from the menu

801
00:29:28,080 --> 00:29:31,279
change the type to color

802
00:29:31,440 --> 00:29:33,919
go to the image tab and change block

803
00:29:33,919 --> 00:29:41,840
size to 24 bit

804
00:29:45,760 --> 00:29:49,600
next go back to the prepare tab

805
00:29:49,679 --> 00:29:52,000
click use custom script to clear the

806
00:29:52,000 --> 00:29:55,840
existing script from the window

807
00:29:56,320 --> 00:29:58,559
then paste the following in to the code

808
00:29:58,559 --> 00:29:59,600
box

809
00:29:59,600 --> 00:30:01,840
you can find it on github in the lcd

810
00:30:01,840 --> 00:30:03,600
custom script text file for your

811
00:30:03,600 --> 00:30:06,080
convenience

812
00:30:06,080 --> 00:30:08,159
this may look familiar to you it's the

813
00:30:08,159 --> 00:30:10,399
serpentine rows logic from our x y

814
00:30:10,399 --> 00:30:11,360
function

815
00:30:11,360 --> 00:30:12,880
we're using it here so we won't have to

816
00:30:12,880 --> 00:30:14,960
reverse any of the lines by hand

817
00:30:14,960 --> 00:30:17,919
or use an external program once you have

818
00:30:17,919 --> 00:30:19,520
the new code entered you should see the

819
00:30:19,520 --> 00:30:21,200
scan direction animation on the right

820
00:30:21,200 --> 00:30:22,960
hand side of the window change

821
00:30:22,960 --> 00:30:25,120
to a back and forth pattern just the way

822
00:30:25,120 --> 00:30:27,600
our matrix is wired

823
00:30:27,600 --> 00:30:29,440
next click show preview button in the

824
00:30:29,440 --> 00:30:30,640
lower left hand corner

825
00:30:30,640 --> 00:30:32,080
select everything in the window that

826
00:30:32,080 --> 00:30:34,159
comes up and paste it into the curly

827
00:30:34,159 --> 00:30:35,520
braces

828
00:30:35,520 --> 00:30:37,520
set in the frame array in your arduino

829
00:30:37,520 --> 00:30:38,960
sketch

830
00:30:38,960 --> 00:30:40,960
repeat this process to convert each

831
00:30:40,960 --> 00:30:44,000
image in your animation

832
00:30:44,000 --> 00:30:46,559
most old sprites only have a handful of

833
00:30:46,559 --> 00:30:48,240
animation frames which makes this

834
00:30:48,240 --> 00:30:50,480
process not too too tedious

835
00:30:50,480 --> 00:30:52,159
or you can just animate our classic

836
00:30:52,159 --> 00:30:54,000
black mage since i've already pasted our

837
00:30:54,000 --> 00:30:55,679
little mage trend into the arrays for

838
00:30:55,679 --> 00:30:56,080
you

839
00:30:56,080 --> 00:30:57,840
next we'll walk through the process for

840
00:30:57,840 --> 00:30:59,440
mac os

841
00:30:59,440 --> 00:31:02,480
go to this github link

842
00:31:02,480 --> 00:31:04,159
and then you're going to want to select

843
00:31:04,159 --> 00:31:05,919
the green button for code

844
00:31:05,919 --> 00:31:08,559
and then select download zip once the

845
00:31:08,559 --> 00:31:10,399
file's finished downloading

846
00:31:10,399 --> 00:31:12,720
double-click it to unzip it and then

847
00:31:12,720 --> 00:31:14,240
copy it to your desktop

848
00:31:14,240 --> 00:31:15,840
or wherever else you would like to copy

849
00:31:15,840 --> 00:31:18,080
it to then copy

850
00:31:18,080 --> 00:31:20,880
all the png files you wish to convert to

851
00:31:20,880 --> 00:31:22,320
this directory

852
00:31:22,320 --> 00:31:24,480
i also recommend keeping a separate copy

853
00:31:24,480 --> 00:31:26,080
of your files elsewhere in case

854
00:31:26,080 --> 00:31:29,039
something goes wrong

855
00:31:31,200 --> 00:31:34,799
next open a terminal window

856
00:31:34,799 --> 00:31:36,960
navigate to the directory where you

857
00:31:36,960 --> 00:31:39,600
unzipped the pixel art folder

858
00:31:39,600 --> 00:31:42,559
for me that's my desktop so i would say

859
00:31:42,559 --> 00:31:43,200
cd

860
00:31:43,200 --> 00:31:47,919
to navigate and then i would say desktop

861
00:31:47,919 --> 00:31:49,600
and now i can see that i'm working in my

862
00:31:49,600 --> 00:31:51,279
desktop

863
00:31:51,279 --> 00:32:01,840
then i want to cd into that file

864
00:32:01,840 --> 00:32:03,519
and i'll see that i'm correctly in that

865
00:32:03,519 --> 00:32:05,360
file now type in

866
00:32:05,360 --> 00:32:10,159
php sprite

867
00:32:10,159 --> 00:32:13,360
to hex

868
00:32:13,360 --> 00:32:16,320
dot php

869
00:32:17,279 --> 00:32:19,120
if everything went right you should have

870
00:32:19,120 --> 00:32:21,279
a set of beautiful arduino arrays in

871
00:32:21,279 --> 00:32:22,960
your terminal window

872
00:32:22,960 --> 00:32:29,840
each named after the original png file

873
00:32:32,080 --> 00:32:34,120
from the course files open up

874
00:32:34,120 --> 00:32:37,120
pixelart.eno

875
00:32:37,760 --> 00:32:39,600
in the sketch pixel art you'll see a

876
00:32:39,600 --> 00:32:41,519
couple options for copying and pasting

877
00:32:41,519 --> 00:32:43,120
your own frames

878
00:32:43,120 --> 00:32:45,120
first there's a blank frame format that

879
00:32:45,120 --> 00:32:46,240
you can use

880
00:32:46,240 --> 00:32:48,799
that has some frames laid out for you

881
00:32:48,799 --> 00:32:52,240
you can add or delete frames as needed

882
00:32:52,240 --> 00:32:54,720
you can also copy and paste into the

883
00:32:54,720 --> 00:32:56,640
existing frames

884
00:32:56,640 --> 00:32:58,960
so for example if i wanted to paste in

885
00:32:58,960 --> 00:33:00,480
my frog1

886
00:33:00,480 --> 00:33:01,919
i would just want to make sure that i

887
00:33:01,919 --> 00:33:05,679
selected all of this

888
00:33:05,679 --> 00:33:08,559
for frame one

889
00:33:09,440 --> 00:33:11,440
and then replaced it where i see frame

890
00:33:11,440 --> 00:33:13,679
one

891
00:33:16,480 --> 00:33:19,120
i want to continue to do this for frame

892
00:33:19,120 --> 00:33:19,519
two

893
00:33:19,519 --> 00:33:21,760
and for frame three i only have three

894
00:33:21,760 --> 00:33:23,200
frames

895
00:33:23,200 --> 00:33:25,600
if you want you can also use the classic

896
00:33:25,600 --> 00:33:27,600
black mage example that we already have

897
00:33:27,600 --> 00:33:28,559
set up

898
00:33:28,559 --> 00:33:30,960
just leave the sketch as is once you're

899
00:33:30,960 --> 00:33:32,480
done cutting and pasting

900
00:33:32,480 --> 00:33:34,880
carefully count the number of frames

901
00:33:34,880 --> 00:33:36,960
converted image files that you ended up

902
00:33:36,960 --> 00:33:37,679
with

903
00:33:37,679 --> 00:33:40,720
and change the num frames defined at the

904
00:33:40,720 --> 00:33:41,679
top

905
00:33:41,679 --> 00:33:44,320
to match this number so for my frog

906
00:33:44,320 --> 00:33:46,640
animation i only have three frames

907
00:33:46,640 --> 00:33:50,240
so i would change this to three

908
00:33:50,399 --> 00:33:53,279
if for some reason your matrix is not 16

909
00:33:53,279 --> 00:33:54,960
by 16

910
00:33:54,960 --> 00:33:57,120
set the matrix width and the matrix

911
00:33:57,120 --> 00:33:59,360
height to match the correct dimensions

912
00:33:59,360 --> 00:34:02,000
that you have

913
00:34:03,279 --> 00:34:06,080
for example if i had an 8 by 8 matrix i

914
00:34:06,080 --> 00:34:07,440
would change it

915
00:34:07,440 --> 00:34:11,599
like so at this point i recommend

916
00:34:11,599 --> 00:34:13,440
verifying your sketch

917
00:34:13,440 --> 00:34:15,440
you can do so using this little check

918
00:34:15,440 --> 00:34:18,079
mark at the top

919
00:34:18,079 --> 00:34:20,159
if you get any errors carefully check

920
00:34:20,159 --> 00:34:22,000
your curly bracket formatting on your

921
00:34:22,000 --> 00:34:23,040
array

922
00:34:23,040 --> 00:34:25,199
if arduino complains that you have too

923
00:34:25,199 --> 00:34:26,879
many initializers

924
00:34:26,879 --> 00:34:29,599
or too few initializers your image was

925
00:34:29,599 --> 00:34:32,320
not exactly 16 by 16.

926
00:34:32,320 --> 00:34:34,239
check to make sure that you have 16

927
00:34:34,239 --> 00:34:35,839
entries in each row

928
00:34:35,839 --> 00:34:38,320
and 16 entries in each column of each

929
00:34:38,320 --> 00:34:40,000
one of your frames

930
00:34:40,000 --> 00:34:42,079
i left a comment with the proper format

931
00:34:42,079 --> 00:34:43,599
near the top of the sketch

932
00:34:43,599 --> 00:34:45,599
to help you compare yours to the working

933
00:34:45,599 --> 00:34:47,119
one

934
00:34:47,119 --> 00:34:49,280
if you get stuck i recommend using the

935
00:34:49,280 --> 00:34:51,918
animation i've already converted for you

936
00:34:51,918 --> 00:34:53,760
okay now that you've got your images

937
00:34:53,760 --> 00:34:55,119
converted let's run through the

938
00:34:55,119 --> 00:34:56,320
algorithm

939
00:34:56,320 --> 00:34:58,320
this one is just so simple which is

940
00:34:58,320 --> 00:35:00,400
exactly why old games use sprite based

941
00:35:00,400 --> 00:35:01,599
animations

942
00:35:01,599 --> 00:35:02,960
they're one of the easiest ways to

943
00:35:02,960 --> 00:35:05,520
animate characters on a screen

944
00:35:05,520 --> 00:35:07,200
starting at line 10 we have our

945
00:35:07,200 --> 00:35:09,839
traditional led boilerplate

946
00:35:09,839 --> 00:35:12,000
we need to know how many color codes are

947
00:35:12,000 --> 00:35:17,520
in each frame of the animation

948
00:35:17,520 --> 00:35:20,240
this is 16 by 16 or the same amount as

949
00:35:20,240 --> 00:35:21,359
num leds

950
00:35:21,359 --> 00:35:24,720
256 then we need to know the number of

951
00:35:24,720 --> 00:35:27,118
frames

952
00:35:28,320 --> 00:35:30,240
update this to match your own frame

953
00:35:30,240 --> 00:35:32,720
numbers if you're off you'll either see

954
00:35:32,720 --> 00:35:34,400
fewer frames than you intended

955
00:35:34,400 --> 00:35:36,720
or arduino will draw one or more frames

956
00:35:36,720 --> 00:35:38,800
of random trash across the array

957
00:35:38,800 --> 00:35:41,119
at the end of your animation loop

958
00:35:41,119 --> 00:35:42,880
remember reading beyond the bounds of an

959
00:35:42,880 --> 00:35:46,240
array will get you unpredictable results

960
00:35:46,240 --> 00:35:49,280
next come our animation parameters

961
00:35:49,280 --> 00:35:51,760
change light update time to your desired

962
00:35:51,760 --> 00:35:52,880
update speed

963
00:35:52,880 --> 00:35:55,680
or keep it as is slow times are better

964
00:35:55,680 --> 00:35:57,680
for pixel animations

965
00:35:57,680 --> 00:35:59,599
note that we've added our usual lighting

966
00:35:59,599 --> 00:36:02,640
timer plus a curve frame variable to

967
00:36:02,640 --> 00:36:04,560
help us keep track of which frame is

968
00:36:04,560 --> 00:36:06,400
being displayed

969
00:36:06,400 --> 00:36:08,480
the setup function should look entirely

970
00:36:08,480 --> 00:36:10,320
familiar to you by now

971
00:36:10,320 --> 00:36:13,200
next comes display frame it's what fills

972
00:36:13,200 --> 00:36:15,680
and draws our leds array

973
00:36:15,680 --> 00:36:17,760
check out how simple it is all we need

974
00:36:17,760 --> 00:36:19,680
to do is step through the array

975
00:36:19,680 --> 00:36:22,079
in the given frame setting each color

976
00:36:22,079 --> 00:36:24,000
straight from the hex color code that we

977
00:36:24,000 --> 00:36:26,160
got on our image converter so

978
00:36:26,160 --> 00:36:29,839
easy the loop function is equally simple

979
00:36:29,839 --> 00:36:31,760
when our lighting timer goes off call

980
00:36:31,760 --> 00:36:33,760
display frame on the current frame to

981
00:36:33,760 --> 00:36:36,000
fill and show our leds array

982
00:36:36,000 --> 00:36:38,640
increase the current frame variable by 1

983
00:36:38,640 --> 00:36:40,320
resetting to 0 if we've reached the

984
00:36:40,320 --> 00:36:41,599
final frame

985
00:36:41,599 --> 00:36:43,520
and then reset the timer for the next

986
00:36:43,520 --> 00:36:45,200
time that's it

987
00:36:45,200 --> 00:36:47,760
you've animated your 8-bit sprites

988
00:36:47,760 --> 00:36:49,760
upload the sketch and see what you think

989
00:36:49,760 --> 00:36:51,359
if you ran into any problems getting

990
00:36:51,359 --> 00:36:53,200
your converted images to work

991
00:36:53,200 --> 00:36:55,599
i recommend using my values re-download

992
00:36:55,599 --> 00:36:58,079
the sketch from github if you need to

993
00:36:58,079 --> 00:36:59,920
and you can come to our office hours or

994
00:36:59,920 --> 00:37:02,720
post to our class page for help

995
00:37:02,720 --> 00:37:04,480
as a challenge can you animate your

996
00:37:04,480 --> 00:37:06,720
sprite based on sensor input

997
00:37:06,720 --> 00:37:09,520
maybe from the accelerometer or four pad

998
00:37:09,520 --> 00:37:11,280
cap touch controller

999
00:37:11,280 --> 00:37:23,839
show us what you come up with

1000
00:37:29,440 --> 00:37:34,240
open up the sketch mic fft express

1001
00:37:34,240 --> 00:37:36,160
in this sketch we're going to explore an

1002
00:37:36,160 --> 00:37:38,400
algorithm which transforms raw signal

1003
00:37:38,400 --> 00:37:40,880
data into its constituent frequencies

1004
00:37:40,880 --> 00:37:44,320
called a fourier transform

1005
00:37:47,680 --> 00:37:49,520
in this sketch we'll learn to examine

1006
00:37:49,520 --> 00:37:51,040
the sound spectrum using

1007
00:37:51,040 --> 00:37:54,240
fft to transform the raw sound data

1008
00:37:54,240 --> 00:37:55,599
coming in through the built-in

1009
00:37:55,599 --> 00:37:58,560
microphone first we need to install a

1010
00:37:58,560 --> 00:38:00,160
library

1011
00:38:00,160 --> 00:38:03,520
to do so go to sketch

1012
00:38:03,520 --> 00:38:06,560
include library

1013
00:38:06,720 --> 00:38:10,480
and then go to manage libraries

1014
00:38:12,160 --> 00:38:19,839
in the search bar type fft

1015
00:38:20,400 --> 00:38:23,680
select adafruit 0 fft library which

1016
00:38:23,680 --> 00:38:26,320
should be the first one that comes up

1017
00:38:26,320 --> 00:38:29,040
select the most recent version and click

1018
00:38:29,040 --> 00:38:31,520
install

1019
00:38:31,520 --> 00:38:33,440
if it asks you to install additional

1020
00:38:33,440 --> 00:38:37,119
libraries please do so

1021
00:38:38,000 --> 00:38:40,880
a fast fourier transform is an algorithm

1022
00:38:40,880 --> 00:38:43,359
that transforms raw signal data into its

1023
00:38:43,359 --> 00:38:44,160
constituent

1024
00:38:44,160 --> 00:38:46,960
frequencies or vice versa it's

1025
00:38:46,960 --> 00:38:48,960
especially common in music and sound

1026
00:38:48,960 --> 00:38:50,720
recording applications

1027
00:38:50,720 --> 00:38:52,800
so much so that many libraries have a

1028
00:38:52,800 --> 00:38:54,720
function to compute it for you

1029
00:38:54,720 --> 00:38:57,520
including ours you can read more about

1030
00:38:57,520 --> 00:38:57,760
it

1031
00:38:57,760 --> 00:39:01,839
on the wikipedia page

1032
00:39:06,720 --> 00:39:08,800
now we're ready to use the sketch and

1033
00:39:08,800 --> 00:39:10,160
you'll see that we've included the

1034
00:39:10,160 --> 00:39:12,839
library as one of the first lines of the

1035
00:39:12,839 --> 00:39:14,320
sketch

1036
00:39:14,320 --> 00:39:15,920
the other lines in the first part of the

1037
00:39:15,920 --> 00:39:18,079
sketch are defines and variables that

1038
00:39:18,079 --> 00:39:19,680
will be the same every time you do

1039
00:39:19,680 --> 00:39:21,200
spectrum analysis

1040
00:39:21,200 --> 00:39:22,720
unless you want to capture different

1041
00:39:22,720 --> 00:39:24,800
frequencies or amounts of data that are

1042
00:39:24,800 --> 00:39:26,160
shown here

1043
00:39:26,160 --> 00:39:28,079
the next section is an array of color

1044
00:39:28,079 --> 00:39:30,320
values we'll use when we're visualizing

1045
00:39:30,320 --> 00:39:32,079
the spectrum

1046
00:39:32,079 --> 00:39:33,680
and then there's a very short setup

1047
00:39:33,680 --> 00:39:35,839
function just initializing our circuit

1048
00:39:35,839 --> 00:39:37,680
playground

1049
00:39:37,680 --> 00:39:40,720
then we have a couple more variables as

1050
00:39:40,720 --> 00:39:42,640
you can see in the comment this tracks

1051
00:39:42,640 --> 00:39:44,480
low and high levels for dynamic

1052
00:39:44,480 --> 00:39:45,599
adjustment

1053
00:39:45,599 --> 00:39:47,920
the whole algorithm itself is inside of

1054
00:39:47,920 --> 00:39:50,400
our loop

1055
00:39:50,560 --> 00:39:52,079
but first we have to begin with

1056
00:39:52,079 --> 00:39:54,640
capturing our data

1057
00:39:54,640 --> 00:39:58,079
this line circuitplayground.mic.capture

1058
00:39:58,079 --> 00:40:00,160
with parentheses input data comma

1059
00:40:00,160 --> 00:40:01,599
datasize

1060
00:40:01,599 --> 00:40:04,000
is what reads our raw sample data into

1061
00:40:04,000 --> 00:40:06,160
our input data array

1062
00:40:06,160 --> 00:40:07,599
everything else in the loop will

1063
00:40:07,599 --> 00:40:09,680
transform the raw data we've already

1064
00:40:09,680 --> 00:40:11,680
read into an array containing spectrum

1065
00:40:11,680 --> 00:40:12,400
data

1066
00:40:12,400 --> 00:40:14,400
and then display it first we'll center

1067
00:40:14,400 --> 00:40:17,119
our data on the average of said data

1068
00:40:17,119 --> 00:40:19,200
this moves outliers in the data closer

1069
00:40:19,200 --> 00:40:21,520
to the center

1070
00:40:21,520 --> 00:40:24,880
then we'll call 0fft

1071
00:40:24,880 --> 00:40:28,319
input data size to run the fft algorithm

1072
00:40:28,319 --> 00:40:31,359
over the input array

1073
00:40:31,359 --> 00:40:34,560
next we'll sort our data into bins

1074
00:40:34,560 --> 00:40:37,839
first we're using memset

1075
00:40:37,839 --> 00:40:39,680
clear the existing data in the pixel

1076
00:40:39,680 --> 00:40:41,280
data array

1077
00:40:41,280 --> 00:40:43,920
memsat as you might imagine sets memory

1078
00:40:43,920 --> 00:40:45,760
it's an efficient call to use when you

1079
00:40:45,760 --> 00:40:47,760
need to clear or copy a large amount of

1080
00:40:47,760 --> 00:40:48,720
memory

1081
00:40:48,720 --> 00:40:50,240
although you need to be careful with it

1082
00:40:50,240 --> 00:40:51,920
because it's easy to overwrite things

1083
00:40:51,920 --> 00:40:54,240
when you don't intend to

1084
00:40:54,240 --> 00:40:57,200
next we're binning our data at last i

1085
00:40:57,200 --> 00:40:58,000
printed min

1086
00:40:58,000 --> 00:41:00,240
index and max index to see what was

1087
00:41:00,240 --> 00:41:01,359
happening here

1088
00:41:01,359 --> 00:41:03,760
but basically the fft algorithm has

1089
00:41:03,760 --> 00:41:06,240
created 28 bins of its own

1090
00:41:06,240 --> 00:41:08,240
each with the current amplitude for the

1091
00:41:08,240 --> 00:41:10,000
part of the spectrum

1092
00:41:10,000 --> 00:41:12,880
we need to translate those into 11 bins

1093
00:41:12,880 --> 00:41:14,800
one for each of the neopixels in our

1094
00:41:14,800 --> 00:41:15,599
ring

1095
00:41:15,599 --> 00:41:17,680
plus one to hold part of the spectrum

1096
00:41:17,680 --> 00:41:19,599
that's visually uninteresting

1097
00:41:19,599 --> 00:41:21,359
we accomplish this using the map

1098
00:41:21,359 --> 00:41:22,960
function for each

1099
00:41:22,960 --> 00:41:25,359
index in the original bins map the index

1100
00:41:25,359 --> 00:41:27,680
from min max index to 0 through num

1101
00:41:27,680 --> 00:41:30,240
pixels

1102
00:41:32,640 --> 00:41:34,720
then add the data in that index to our

1103
00:41:34,720 --> 00:41:37,359
actual bin

1104
00:41:41,920 --> 00:41:44,640
that's the core of this algorithm bins

1105
00:41:44,640 --> 00:41:45,359
may change

1106
00:41:45,359 --> 00:41:47,520
and will in the next sketch depending on

1107
00:41:47,520 --> 00:41:49,359
how many points of the sound spectrum

1108
00:41:49,359 --> 00:41:50,800
you want to examine

1109
00:41:50,800 --> 00:41:52,560
but the technique is pretty much always

1110
00:41:52,560 --> 00:41:55,040
the same take sound data

1111
00:41:55,040 --> 00:41:57,680
run 0fft on it to transform it into

1112
00:41:57,680 --> 00:41:58,640
frequencies

1113
00:41:58,640 --> 00:42:01,520
and then sort the frequencies into bins

1114
00:42:01,520 --> 00:42:03,440
then you can print or visualize the bins

1115
00:42:03,440 --> 00:42:05,440
to see what each part of the spectrum is

1116
00:42:05,440 --> 00:42:07,599
doing

1117
00:42:07,599 --> 00:42:09,920
in the next part of the sketch we're

1118
00:42:09,920 --> 00:42:11,280
figuring out which value

1119
00:42:11,280 --> 00:42:14,319
is the highest and lowest then we add a

1120
00:42:14,319 --> 00:42:16,560
bonus factor if the difference is too

1121
00:42:16,560 --> 00:42:17,520
small

1122
00:42:17,520 --> 00:42:19,200
otherwise the display will flicker too

1123
00:42:19,200 --> 00:42:20,640
much

1124
00:42:20,640 --> 00:42:22,480
and we check the loudest and quietest

1125
00:42:22,480 --> 00:42:24,240
sounds to see if they're louder or

1126
00:42:24,240 --> 00:42:27,280
quieter than our max and min so far

1127
00:42:27,280 --> 00:42:30,400
if so we set max level or min level

1128
00:42:30,400 --> 00:42:32,800
to a lot and if not we set it to a

1129
00:42:32,800 --> 00:42:35,119
little

1130
00:42:35,520 --> 00:42:39,280
then we actually display our data

1131
00:42:39,280 --> 00:42:42,960
this algorithm uses 511 as the top value

1132
00:42:42,960 --> 00:42:46,800
because it's one less than two times 255

1133
00:42:46,800 --> 00:42:50,000
basically the call to map is doubling

1134
00:42:50,000 --> 00:42:51,760
the amplitude of the data

1135
00:42:51,760 --> 00:42:53,680
so that the display code can use two

1136
00:42:53,680 --> 00:42:55,200
different color schemes

1137
00:42:55,200 --> 00:42:57,359
one for the top end of the data colors

1138
00:42:57,359 --> 00:42:58,240
into white

1139
00:42:58,240 --> 00:43:00,079
and one for the bottom end of the data

1140
00:43:00,079 --> 00:43:02,000
black into colors

1141
00:43:02,000 --> 00:43:03,440
check out the code and see if you can

1142
00:43:03,440 --> 00:43:06,480
work out what it's doing

1143
00:43:08,400 --> 00:43:10,400
okay let's upload the sketch and put on

1144
00:43:10,400 --> 00:43:13,839
some music and see what it does

1145
00:43:44,880 --> 00:43:47,800
from your course files open up

1146
00:43:47,800 --> 00:43:49,520
soundspectralizer.eno

1147
00:43:49,520 --> 00:43:51,280
in this sketch we'll learn to visualize

1148
00:43:51,280 --> 00:43:55,839
sensor data across an led matrix

1149
00:43:56,319 --> 00:43:57,680
we'll build a sound reactive

1150
00:43:57,680 --> 00:43:59,920
spectralizer and interactive matrix

1151
00:43:59,920 --> 00:44:02,720
lighting project

1152
00:44:03,280 --> 00:44:08,240
we'll need to install the fft library

1153
00:44:08,240 --> 00:44:09,920
if you haven't installed it and need

1154
00:44:09,920 --> 00:44:12,720
instructions please see the last section

1155
00:44:12,720 --> 00:44:14,400
which will show you how to install this

1156
00:44:14,400 --> 00:44:15,920
library

1157
00:44:15,920 --> 00:44:18,240
this sketch is a synthesis of fast led

1158
00:44:18,240 --> 00:44:19,359
animation code

1159
00:44:19,359 --> 00:44:21,440
and the fft algorithm from the last

1160
00:44:21,440 --> 00:44:22,960
section

1161
00:44:22,960 --> 00:44:24,800
for the former the main thing that

1162
00:44:24,800 --> 00:44:27,280
changes is the number of bins

1163
00:44:27,280 --> 00:44:29,839
when using fft algorithms you need to

1164
00:44:29,839 --> 00:44:31,520
think about how many bins you want to

1165
00:44:31,520 --> 00:44:32,400
use

1166
00:44:32,400 --> 00:44:35,280
in the last case we used only 11 bins or

1167
00:44:35,280 --> 00:44:37,839
the 10 pixels on the neopixel ring

1168
00:44:37,839 --> 00:44:39,760
plus 1 at the highest frequency to

1169
00:44:39,760 --> 00:44:42,000
discard

1170
00:44:42,000 --> 00:44:45,119
in this case we're using 17 bins or the

1171
00:44:45,119 --> 00:44:46,480
16 rows

1172
00:44:46,480 --> 00:44:48,720
in our matrix plus 1 at the highest

1173
00:44:48,720 --> 00:44:51,119
frequencies to discard

1174
00:44:51,119 --> 00:44:53,599
this way the 16 bins we care about

1175
00:44:53,599 --> 00:44:55,359
represent the physical layout of the

1176
00:44:55,359 --> 00:44:56,160
matrix

1177
00:44:56,160 --> 00:44:59,040
which makes it easy to visualize them

1178
00:44:59,040 --> 00:45:01,040
this is accomplished in the define

1179
00:45:01,040 --> 00:45:04,480
on line 26 as you can see in the

1180
00:45:04,480 --> 00:45:05,040
comments

1181
00:45:05,040 --> 00:45:07,440
it says how many bins we want the length

1182
00:45:07,440 --> 00:45:08,640
of the matrix because

1183
00:45:08,640 --> 00:45:12,560
each row will be displaying one bin

1184
00:45:12,880 --> 00:45:15,839
i also redefined frequency min and

1185
00:45:15,839 --> 00:45:19,680
frequency max

1186
00:45:19,680 --> 00:45:21,359
because originally i wasn't getting as

1187
00:45:21,359 --> 00:45:22,880
much movement in the center of the

1188
00:45:22,880 --> 00:45:24,640
spectrum as i'd wanted

1189
00:45:24,640 --> 00:45:28,078
nor in the base frequencies

1190
00:45:29,680 --> 00:45:31,599
the rest of the sketch is the same as

1191
00:45:31,599 --> 00:45:33,599
last time although i renamed a few

1192
00:45:33,599 --> 00:45:35,280
variables to help us understand what

1193
00:45:35,280 --> 00:45:36,400
their purpose is

1194
00:45:36,400 --> 00:45:38,079
now that we're not animating across the

1195
00:45:38,079 --> 00:45:40,319
neopixels directly

1196
00:45:40,319 --> 00:45:42,160
check out the last section again and see

1197
00:45:42,160 --> 00:45:46,960
if there's anything you don't understand

1198
00:45:46,960 --> 00:45:49,440
in this section we've added our usual

1199
00:45:49,440 --> 00:45:51,440
lighting timer and a setup function

1200
00:45:51,440 --> 00:45:55,359
which sets up fast led for us

1201
00:45:57,119 --> 00:46:01,280
and then there's just our loop

1202
00:46:01,280 --> 00:46:03,920
the first chunk of the loop other than

1203
00:46:03,920 --> 00:46:05,359
some renamed variables

1204
00:46:05,359 --> 00:46:07,119
and the addition of our lighting timer

1205
00:46:07,119 --> 00:46:09,520
is exactly the same as it was in mic

1206
00:46:09,520 --> 00:46:12,240
fft express so i'm going to skip

1207
00:46:12,240 --> 00:46:13,440
describing it

1208
00:46:13,440 --> 00:46:15,280
you can go back to the next section if

1209
00:46:15,280 --> 00:46:18,160
you need help or want more explanation

1210
00:46:18,160 --> 00:46:19,599
for now let's move on to what's

1211
00:46:19,599 --> 00:46:21,359
different in the sketch

1212
00:46:21,359 --> 00:46:23,359
the next big change happens where this

1213
00:46:23,359 --> 00:46:26,720
comment is display the data

1214
00:46:26,720 --> 00:46:28,640
here i'm using three variables to

1215
00:46:28,640 --> 00:46:30,400
calculate an hsb color

1216
00:46:30,400 --> 00:46:32,880
for each pixel in the matrix assuming it

1217
00:46:32,880 --> 00:46:33,520
has data

1218
00:46:33,520 --> 00:46:36,480
otherwise it'll be black the base color

1219
00:46:36,480 --> 00:46:38,800
is the base color for each zone

1220
00:46:38,800 --> 00:46:41,599
i divided the matrix in thirds blue for

1221
00:46:41,599 --> 00:46:42,240
the base

1222
00:46:42,240 --> 00:46:45,520
purple for mid-range red for the highs

1223
00:46:45,520 --> 00:46:47,920
next the bonus color goes up a small

1224
00:46:47,920 --> 00:46:49,440
amount for each bin

1225
00:46:49,440 --> 00:46:51,440
giving them each a very slightly

1226
00:46:51,440 --> 00:46:52,880
different hue last

1227
00:46:52,880 --> 00:46:55,599
the base hue for each column goes up by

1228
00:46:55,599 --> 00:46:56,079
5

1229
00:46:56,079 --> 00:46:58,640
for each pixel in the column causing the

1230
00:46:58,640 --> 00:47:00,319
colors to change near the top of the

1231
00:47:00,319 --> 00:47:01,119
matrix

1232
00:47:01,119 --> 00:47:02,640
when greater amounts of data are

1233
00:47:02,640 --> 00:47:04,720
measured you'll see this at work in the

1234
00:47:04,720 --> 00:47:06,880
video later

1235
00:47:06,880 --> 00:47:08,319
next we're stepping through each bin

1236
00:47:08,319 --> 00:47:10,560
with our first for loop

1237
00:47:10,560 --> 00:47:12,400
the first part of this code is the same

1238
00:47:12,400 --> 00:47:14,640
as it was in mic fft express

1239
00:47:14,640 --> 00:47:16,079
except that we're using the matrix

1240
00:47:16,079 --> 00:47:18,160
height and the max value to map our bin

1241
00:47:18,160 --> 00:47:19,520
data to

1242
00:47:19,520 --> 00:47:22,000
here we're getting a variable n with the

1243
00:47:22,000 --> 00:47:24,160
current level of this bin spectrum data

1244
00:47:24,160 --> 00:47:27,760
in it we're also calculating the base

1245
00:47:27,760 --> 00:47:28,960
color for this bin

1246
00:47:28,960 --> 00:47:31,119
or column depending on how far through

1247
00:47:31,119 --> 00:47:33,520
the width of the array it is

1248
00:47:33,520 --> 00:47:35,359
the first third of the matrix is the

1249
00:47:35,359 --> 00:47:36,640
base frequencies

1250
00:47:36,640 --> 00:47:38,880
and i liked blue for those i chose

1251
00:47:38,880 --> 00:47:40,319
purple for the next third

1252
00:47:40,319 --> 00:47:44,720
the mid-range and red for the last third

1253
00:47:45,280 --> 00:47:47,119
then to calculate the actual color for

1254
00:47:47,119 --> 00:47:48,800
each pixel i'm stepping through

1255
00:47:48,800 --> 00:47:51,760
from 0 to n the current level for this

1256
00:47:51,760 --> 00:47:53,200
bin we got earlier

1257
00:47:53,200 --> 00:47:57,439
increasing base hue a little each time

1258
00:47:57,839 --> 00:47:59,760
then to calculate the actual color for

1259
00:47:59,760 --> 00:48:01,440
each pixel i'm stepping through

1260
00:48:01,440 --> 00:48:04,000
0 to n the current level for this bin we

1261
00:48:04,000 --> 00:48:05,200
got earlier

1262
00:48:05,200 --> 00:48:07,520
increasing base hue a little each time

1263
00:48:07,520 --> 00:48:09,200
and then adding base color

1264
00:48:09,200 --> 00:48:12,000
bonus color and base hue to get a final

1265
00:48:12,000 --> 00:48:14,160
hue value for each pixel

1266
00:48:14,160 --> 00:48:16,559
i load this into the array for each and

1267
00:48:16,559 --> 00:48:18,240
then step back over the rest of the

1268
00:48:18,240 --> 00:48:19,040
column

1269
00:48:19,040 --> 00:48:21,760
from n to matrix height to set the rest

1270
00:48:21,760 --> 00:48:23,440
of the pixels to black

1271
00:48:23,440 --> 00:48:25,760
this ensures that old data won't just

1272
00:48:25,760 --> 00:48:28,800
linger on the display

1273
00:48:29,359 --> 00:48:32,240
and that's it the four loops one for

1274
00:48:32,240 --> 00:48:34,319
every bin and then one for each pixel in

1275
00:48:34,319 --> 00:48:36,160
the column corresponding to the bin

1276
00:48:36,160 --> 00:48:38,480
have colorized every pixel in the array

1277
00:48:38,480 --> 00:48:39,760
all we need to do now

1278
00:48:39,760 --> 00:48:42,079
is call fast led show and update our

1279
00:48:42,079 --> 00:48:45,200
timer for next time

1280
00:48:45,680 --> 00:48:48,319
lastly i've pasted the y routine from x

1281
00:48:48,319 --> 00:48:50,559
y matrix into the bottom of the file so

1282
00:48:50,559 --> 00:48:54,000
we can use it inside the loop

1283
00:48:54,160 --> 00:48:56,800
that's it you did it put on some tunes

1284
00:48:56,800 --> 00:49:03,839
and stare at the colored lights

1285
00:49:05,570 --> 00:49:50,650
[Music]

1286
00:50:01,680 --> 00:50:03,599
you can also use this online tone

1287
00:50:03,599 --> 00:50:05,680
generator to test whether your spectrum

1288
00:50:05,680 --> 00:50:08,240
analyzer is working properly

1289
00:50:08,240 --> 00:50:09,839
turn down the volume to a comfortable

1290
00:50:09,839 --> 00:50:12,800
level put the slider at about 200 hertz

1291
00:50:12,800 --> 00:50:14,880
press play and whip the slider slowly to

1292
00:50:14,880 --> 00:50:18,079
the right to watch your analyzer react

1293
00:50:18,079 --> 00:50:19,920
you should see the bars move across the

1294
00:50:19,920 --> 00:50:21,680
display as the tone moves

1295
00:50:21,680 --> 00:50:23,359
the video is upside down because that's

1296
00:50:23,359 --> 00:50:24,960
where my computer is relative to the

1297
00:50:24,960 --> 00:50:28,400
matrix but you get the picture

1298
00:50:31,520 --> 00:50:33,119
the circuit playground's microphone

1299
00:50:33,119 --> 00:50:34,720
isn't the world's best but i think it's

1300
00:50:34,720 --> 00:50:35,920
pretty darn good

1301
00:50:35,920 --> 00:50:37,680
experiment with the frequency min and

1302
00:50:37,680 --> 00:50:39,920
frequency max variables and music volume

1303
00:50:39,920 --> 00:50:41,760
to dial in your spectralizer how you

1304
00:50:41,760 --> 00:50:55,839
want it

1305
00:50:56,880 --> 00:50:58,319
now that you're a lighting programmer

1306
00:50:58,319 --> 00:50:59,839
let's briefly walk through the sort of

1307
00:50:59,839 --> 00:51:01,520
planning that might go into an led

1308
00:51:01,520 --> 00:51:03,359
installation

1309
00:51:03,359 --> 00:51:05,280
when planning an led installation i

1310
00:51:05,280 --> 00:51:07,200
usually start by measuring the room or

1311
00:51:07,200 --> 00:51:07,839
object

1312
00:51:07,839 --> 00:51:09,200
and by thinking about what kind of

1313
00:51:09,200 --> 00:51:11,839
effect i want do i want a matrix

1314
00:51:11,839 --> 00:51:13,920
whether purchased pre-built or custom

1315
00:51:13,920 --> 00:51:16,000
soldered using sections of led strip

1316
00:51:16,000 --> 00:51:18,319
serpentine style or do i want linear

1317
00:51:18,319 --> 00:51:19,359
strips

1318
00:51:19,359 --> 00:51:22,240
and if so top emitting or side emitting

1319
00:51:22,240 --> 00:51:23,440
led neon

1320
00:51:23,440 --> 00:51:26,720
may be sealed pre-defused pixel modules

1321
00:51:26,720 --> 00:51:28,559
next i'll look up a couple of candidates

1322
00:51:28,559 --> 00:51:29,839
of each type

1323
00:51:29,839 --> 00:51:32,800
useful sites include adafruit alituv

1324
00:51:32,800 --> 00:51:34,160
superbright leds

1325
00:51:34,160 --> 00:51:36,960
or ebay make sure your lights are

1326
00:51:36,960 --> 00:51:39,119
controllable using fast led

1327
00:51:39,119 --> 00:51:42,079
many led strips are not rgb controllable

1328
00:51:42,079 --> 00:51:42,559
at all

1329
00:51:42,559 --> 00:51:45,280
or use the dmx protocol i recommend

1330
00:51:45,280 --> 00:51:47,280
sticking with apa 102s

1331
00:51:47,280 --> 00:51:50,240
or the ws281 family but there's a

1332
00:51:50,240 --> 00:51:51,119
convenient

1333
00:51:51,119 --> 00:51:53,440
list of recommended protocols for fast

1334
00:51:53,440 --> 00:51:54,480
led here

1335
00:51:54,480 --> 00:52:05,839
that will update as time goes on

1336
00:52:12,319 --> 00:52:13,839
once you know what lights you want to

1337
00:52:13,839 --> 00:52:15,520
get and what area you want to add your

1338
00:52:15,520 --> 00:52:16,400
lights to

1339
00:52:16,400 --> 00:52:18,000
you can start calculating how many

1340
00:52:18,000 --> 00:52:19,920
meters or how many pixels you'll be

1341
00:52:19,920 --> 00:52:20,640
ordering

1342
00:52:20,640 --> 00:52:22,319
along with how many amps it'll take to

1343
00:52:22,319 --> 00:52:24,400
run them and how many power injections

1344
00:52:24,400 --> 00:52:25,440
you'll need

1345
00:52:25,440 --> 00:52:27,040
the data sheet for your lights should

1346
00:52:27,040 --> 00:52:29,760
give either amps per pixel or per meter

1347
00:52:29,760 --> 00:52:31,599
multiply this by your total linear

1348
00:52:31,599 --> 00:52:33,599
distance in order to get a rough idea of

1349
00:52:33,599 --> 00:52:35,040
how much total power

1350
00:52:35,040 --> 00:52:36,960
the installation will draw then

1351
00:52:36,960 --> 00:52:38,880
determine how many power supplies and of

1352
00:52:38,880 --> 00:52:40,400
what size you'll need

1353
00:52:40,400 --> 00:52:42,240
do this by dividing your total power

1354
00:52:42,240 --> 00:52:44,880
draw by each power supply's rated amps

1355
00:52:44,880 --> 00:52:48,240
minus the rated amps times 0.2

1356
00:52:48,240 --> 00:52:50,720
the latter includes your 20 overhead for

1357
00:52:50,720 --> 00:52:51,839
safety

1358
00:52:51,839 --> 00:52:53,599
at this point i like to figure out what

1359
00:52:53,599 --> 00:52:55,680
sections of lights go on which power

1360
00:52:55,680 --> 00:52:56,640
supply

1361
00:52:56,640 --> 00:52:59,680
don't forget to allow that 20 margin and

1362
00:52:59,680 --> 00:53:02,000
where my power injections will be

1363
00:53:02,000 --> 00:53:04,160
an injection every 50 pixels is a good

1364
00:53:04,160 --> 00:53:06,720
rule of thumb for 5 volt neopixels

1365
00:53:06,720 --> 00:53:08,480
don't forget that you can also inject at

1366
00:53:08,480 --> 00:53:10,480
the beginning and the end of the strip

1367
00:53:10,480 --> 00:53:12,480
a strip with 100 pixels doesn't need an

1368
00:53:12,480 --> 00:53:14,720
injection in the middle you can also use

1369
00:53:14,720 --> 00:53:16,480
this calculator to get an idea of where

1370
00:53:16,480 --> 00:53:19,119
your power draw starts to get over 15

1371
00:53:19,119 --> 00:53:21,839
or so also pay attention to the wire

1372
00:53:21,839 --> 00:53:22,400
length

1373
00:53:22,400 --> 00:53:24,400
on the right hand side of the calculator

1374
00:53:24,400 --> 00:53:25,599
for best results

1375
00:53:25,599 --> 00:53:27,280
keep your power supplies as close as

1376
00:53:27,280 --> 00:53:29,599
possible to the lights they're powering

1377
00:53:29,599 --> 00:53:31,440
a quick warning it's really easy to

1378
00:53:31,440 --> 00:53:33,760
overpower a room with rgb controllable

1379
00:53:33,760 --> 00:53:34,720
lighting

1380
00:53:34,720 --> 00:53:37,280
most home circuits have a 10 or 20 amp

1381
00:53:37,280 --> 00:53:38,000
breaker

1382
00:53:38,000 --> 00:53:39,839
more than that including everything else

1383
00:53:39,839 --> 00:53:41,920
you may want to run off of that circuit

1384
00:53:41,920 --> 00:53:43,839
and you'll pop the breaker

1385
00:53:43,839 --> 00:53:46,319
think about whether less is more you may

1386
00:53:46,319 --> 00:53:48,319
choose to run fewer feet of lighting

1387
00:53:48,319 --> 00:53:50,160
the lights at a lower brightness run

1388
00:53:50,160 --> 00:53:52,400
fewer lit pixels in your animation

1389
00:53:52,400 --> 00:53:54,240
diffuse your strip or pixels so they

1390
00:53:54,240 --> 00:53:56,240
come off as larger than they are

1391
00:53:56,240 --> 00:53:58,240
or combine led lighting with lighting

1392
00:53:58,240 --> 00:53:59,839
methods which have a larger light and

1393
00:53:59,839 --> 00:54:00,640
color spread

1394
00:54:00,640 --> 00:54:04,400
like dmx wash lights or video projectors

1395
00:54:04,400 --> 00:54:05,920
some of the coolest concert lighting

1396
00:54:05,920 --> 00:54:07,920
installations i've seen combine video

1397
00:54:07,920 --> 00:54:10,079
projection with a flat surface with

1398
00:54:10,079 --> 00:54:12,240
programmable leds embedded into that

1399
00:54:12,240 --> 00:54:13,119
surface

1400
00:54:13,119 --> 00:54:15,040
also note that large installations can

1401
00:54:15,040 --> 00:54:16,480
exceed the amount of memory on the

1402
00:54:16,480 --> 00:54:17,839
microcontroller

1403
00:54:17,839 --> 00:54:19,599
you can always check by changing num

1404
00:54:19,599 --> 00:54:21,680
leds in an example sketch to the number

1405
00:54:21,680 --> 00:54:23,359
of pixels you'd like to use

1406
00:54:23,359 --> 00:54:25,599
and then verifying the sketch the

1407
00:54:25,599 --> 00:54:27,760
arduino ide will warn you if you start

1408
00:54:27,760 --> 00:54:29,520
to run out of memory

1409
00:54:29,520 --> 00:54:31,599
in my experience anywhere up to about

1410
00:54:31,599 --> 00:54:33,920
ninety percent of memory used is fine

1411
00:54:33,920 --> 00:54:35,520
even though arduino starts to warn you

1412
00:54:35,520 --> 00:54:37,200
at about eighty percent

1413
00:54:37,200 --> 00:54:38,559
if you get too close to a hundred

1414
00:54:38,559 --> 00:54:41,119
percent you can experience unpredictable

1415
00:54:41,119 --> 00:54:43,200
effects so try not to exceed ninety

1416
00:54:43,200 --> 00:54:44,240
percent

1417
00:54:44,240 --> 00:54:45,680
also don't forget that your lighting

1418
00:54:45,680 --> 00:54:47,760
algorithm itself may take up more space

1419
00:54:47,760 --> 00:54:49,599
than the example sketch does

1420
00:54:49,599 --> 00:54:51,520
if you've used too much memory you may

1421
00:54:51,520 --> 00:54:52,960
need multiple lighting controllers to

1422
00:54:52,960 --> 00:54:54,400
handle your room

1423
00:54:54,400 --> 00:54:56,160
when i realize that i'll need more than

1424
00:54:56,160 --> 00:54:58,079
two or maybe three microcontrollers for

1425
00:54:58,079 --> 00:54:59,280
a single install

1426
00:54:59,280 --> 00:55:01,280
i like to stop and consider a control

1427
00:55:01,280 --> 00:55:02,799
method that scales better

1428
00:55:02,799 --> 00:55:04,799
like touch designer driving a large

1429
00:55:04,799 --> 00:55:06,720
streaming acn controller

1430
00:55:06,720 --> 00:55:08,720
it may cost more but you'll save a lot

1431
00:55:08,720 --> 00:55:09,920
of headaches

1432
00:55:09,920 --> 00:55:11,760
otherwise you can use an army of cheap

1433
00:55:11,760 --> 00:55:14,240
controllers and communicate via ethernet

1434
00:55:14,240 --> 00:55:16,240
osc in order to orchestrate your

1435
00:55:16,240 --> 00:55:17,599
animations

1436
00:55:17,599 --> 00:55:19,920
ethernet messages have some inherent lag

1437
00:55:19,920 --> 00:55:21,440
but depending on your frame rate it can

1438
00:55:21,440 --> 00:55:22,559
totally work

1439
00:55:22,559 --> 00:55:24,000
at this point i tend to build a

1440
00:55:24,000 --> 00:55:26,079
spreadsheet with names product links and

1441
00:55:26,079 --> 00:55:28,079
prices for all of my lights controllers

1442
00:55:28,079 --> 00:55:29,839
power supplies and any accessories i

1443
00:55:29,839 --> 00:55:30,880
plan to buy

1444
00:55:30,880 --> 00:55:33,359
including wires sensors aluminum channel

1445
00:55:33,359 --> 00:55:34,640
double sided thermal tape

1446
00:55:34,640 --> 00:55:37,440
zip ties and zip tie bases or other

1447
00:55:37,440 --> 00:55:39,599
forms of wire strain relief

1448
00:55:39,599 --> 00:55:40,880
now you've got a sheet that shows the

1449
00:55:40,880 --> 00:55:42,960
total cost of the project and where to

1450
00:55:42,960 --> 00:55:44,160
buy everything

1451
00:55:44,160 --> 00:55:45,680
from here you can buy the whole thing

1452
00:55:45,680 --> 00:55:47,520
but if i have time i like to buy and

1453
00:55:47,520 --> 00:55:49,119
build just one power supply one

1454
00:55:49,119 --> 00:55:49,839
controller

1455
00:55:49,839 --> 00:55:51,760
and a matching amount of lights just to

1456
00:55:51,760 --> 00:55:54,160
make sure i have all my ducks in a row

1457
00:55:54,160 --> 00:55:55,760
you can use this smaller rig to check

1458
00:55:55,760 --> 00:55:58,319
your voltage draw test interactivity

1459
00:55:58,319 --> 00:56:00,480
experiment with diffusion materials

1460
00:56:00,480 --> 00:56:02,079
prototype how you'd like to attach

1461
00:56:02,079 --> 00:56:04,000
the lights and sensors or hide them

1462
00:56:04,000 --> 00:56:05,200
inside objects

1463
00:56:05,200 --> 00:56:07,359
and test out other things like animation

1464
00:56:07,359 --> 00:56:09,040
looks that are tough to try before you

1465
00:56:09,040 --> 00:56:10,400
have lighting in hand

1466
00:56:10,400 --> 00:56:12,160
once you're sure you're ready you can

1467
00:56:12,160 --> 00:56:14,000
buy your lighting power supplies and

1468
00:56:14,000 --> 00:56:14,799
controllers

1469
00:56:14,799 --> 00:56:16,960
and begin building your installation

1470
00:56:16,960 --> 00:56:18,640
remember to connect all ground wires

1471
00:56:18,640 --> 00:56:19,760
within your project

1472
00:56:19,760 --> 00:56:21,839
including those on each microcontroller

1473
00:56:21,839 --> 00:56:24,000
and on each power run from the supply

1474
00:56:24,000 --> 00:56:25,599
to prevent ground loops and other

1475
00:56:25,599 --> 00:56:28,079
interference we did this with our matrix

1476
00:56:28,079 --> 00:56:29,520
and the same principle applies for

1477
00:56:29,520 --> 00:56:30,000
larger

1478
00:56:30,000 --> 00:56:31,760
installs especially if you're running

1479
00:56:31,760 --> 00:56:33,280
more than one power supply

1480
00:56:33,280 --> 00:56:35,440
on more than one circuit now you're

1481
00:56:35,440 --> 00:56:37,599
ready to create your own interactive led

1482
00:56:37,599 --> 00:56:38,400
art

1483
00:56:38,400 --> 00:56:40,160
let us know what you make on our class

1484
00:56:40,160 --> 00:56:42,559
page or at our office hours

1485
00:56:42,559 --> 00:56:45,839
thanks for coming happy hacking

