1
00:00:00,000 --> 00:00:08,639
[Music]

2
00:00:08,639 --> 00:00:10,639
welcome back to led programming using

3
00:00:10,639 --> 00:00:13,679
arduino and fast led from hackaday u

4
00:00:13,679 --> 00:00:15,759
in this last class we covered the basics

5
00:00:15,759 --> 00:00:17,520
of led programming and introduced the

6
00:00:17,520 --> 00:00:19,119
fast led library

7
00:00:19,119 --> 00:00:20,720
we learned the difference between single

8
00:00:20,720 --> 00:00:23,519
color leds and programmable rgb neopixel

9
00:00:23,519 --> 00:00:24,480
leds

10
00:00:24,480 --> 00:00:26,160
explored some of the led products that

11
00:00:26,160 --> 00:00:27,920
are available and took a look at some

12
00:00:27,920 --> 00:00:29,279
sources of inspiration

13
00:00:29,279 --> 00:00:31,840
to get some ideas for our projects we

14
00:00:31,840 --> 00:00:33,840
also learned how to power external leds

15
00:00:33,840 --> 00:00:35,360
as well as how to hook up an external

16
00:00:35,360 --> 00:00:38,079
led strip or an led matrix

17
00:00:38,079 --> 00:00:39,760
in the second class we'll dive deeper

18
00:00:39,760 --> 00:00:41,440
into the fast led library

19
00:00:41,440 --> 00:00:43,040
and learn more about how to control our

20
00:00:43,040 --> 00:00:45,200
led animations including brightness and

21
00:00:45,200 --> 00:00:47,200
hue saturation value

22
00:00:47,200 --> 00:00:48,960
we'll also learn how to program leds

23
00:00:48,960 --> 00:00:50,399
that are wired in parallel

24
00:00:50,399 --> 00:00:53,120
or snaked and in series we'll explore

25
00:00:53,120 --> 00:00:54,719
how to create color palettes which will

26
00:00:54,719 --> 00:00:56,719
be helpful in programming installations

27
00:00:56,719 --> 00:00:58,160
wearables and artworks

28
00:00:58,160 --> 00:00:59,600
that have different lighting modes which

29
00:00:59,600 --> 00:01:01,680
might evoke different emotions

30
00:01:01,680 --> 00:01:03,359
and very importantly we'll ditch the

31
00:01:03,359 --> 00:01:05,119
delay and learn how to use timers to

32
00:01:05,119 --> 00:01:06,400
control our lighting

33
00:01:06,400 --> 00:01:08,960
as well as how to use randomness beats

34
00:01:08,960 --> 00:01:09,920
and signs

35
00:01:09,920 --> 00:01:12,640
to make generative patterns we've got a

36
00:01:12,640 --> 00:01:16,159
lot to cover today so let's get started

37
00:01:16,159 --> 00:01:18,520
if you're just jumping in please visit

38
00:01:18,520 --> 00:01:19,759
miribeljones.com

39
00:01:19,759 --> 00:01:23,520
forward slash hackaday underscore leds

40
00:01:23,520 --> 00:01:26,000
here you'll find links to this slideshow

41
00:01:26,000 --> 00:01:27,840
the github that has all of our source

42
00:01:27,840 --> 00:01:28,560
code

43
00:01:28,560 --> 00:01:32,159
and the course hub if you haven't set up

44
00:01:32,159 --> 00:01:33,280
arduino

45
00:01:33,280 --> 00:01:35,200
the circuit playground or installed the

46
00:01:35,200 --> 00:01:37,200
circuit playground library

47
00:01:37,200 --> 00:01:39,119
you can find instructions on how to do

48
00:01:39,119 --> 00:01:41,439
that in the slideshow for our first

49
00:01:41,439 --> 00:01:42,720
class

50
00:01:42,720 --> 00:01:46,640
we won't be covering it in this video

51
00:01:46,640 --> 00:01:48,560
if you're a returning student you'll

52
00:01:48,560 --> 00:01:50,640
find new sketches available on the

53
00:01:50,640 --> 00:01:52,640
github for the class

54
00:01:52,640 --> 00:01:54,560
please download these so that you can

55
00:01:54,560 --> 00:01:57,119
use them and follow along with the video

56
00:01:57,119 --> 00:01:58,719
i'd like to take a look at the color

57
00:01:58,719 --> 00:02:00,960
palette sketch and go into more detail

58
00:02:00,960 --> 00:02:01,840
about it

59
00:02:01,840 --> 00:02:04,399
but before we do that i want to examine

60
00:02:04,399 --> 00:02:05,200
crgb

61
00:02:05,200 --> 00:02:07,840
objects and get to know what those are

62
00:02:07,840 --> 00:02:09,840
and how to use them

63
00:02:09,840 --> 00:02:12,640
crgb objects are used in fast led

64
00:02:12,640 --> 00:02:13,760
frequently

65
00:02:13,760 --> 00:02:15,440
and they're used in the color palette

66
00:02:15,440 --> 00:02:23,840
sketch in many locations

67
00:02:24,400 --> 00:02:27,280
the fast lad reference has the crgb

68
00:02:27,280 --> 00:02:28,319
struct reference

69
00:02:28,319 --> 00:02:30,879
listed but this still might be a bit

70
00:02:30,879 --> 00:02:33,840
complicated to understand

71
00:02:33,840 --> 00:02:35,680
if you scroll to the bottom you'll see

72
00:02:35,680 --> 00:02:38,239
that a crgb object is a strut

73
00:02:38,239 --> 00:02:41,040
aka a structure that represents a given

74
00:02:41,040 --> 00:02:42,400
color value

75
00:02:42,400 --> 00:02:44,800
it has three members one byte for the

76
00:02:44,800 --> 00:02:46,879
red value which is between 0

77
00:02:46,879 --> 00:02:50,480
and 255 one byte for the green value

78
00:02:50,480 --> 00:02:53,760
which is between 0 and 255 and one byte

79
00:02:53,760 --> 00:02:55,760
for the blue value which is also between

80
00:02:55,760 --> 00:02:56,160
0

81
00:02:56,160 --> 00:02:59,920
and 255. there are actually a few ways

82
00:02:59,920 --> 00:03:03,440
that we can code a crgb object

83
00:03:03,440 --> 00:03:06,000
in this first example from blink we're

84
00:03:06,000 --> 00:03:07,280
referring to

85
00:03:07,280 --> 00:03:10,480
leds array 0

86
00:03:10,480 --> 00:03:12,080
and then we're setting it equal to a

87
00:03:12,080 --> 00:03:13,680
crgb value

88
00:03:13,680 --> 00:03:16,560
of red green blue where these values are

89
00:03:16,560 --> 00:03:18,159
between parentheses

90
00:03:18,159 --> 00:03:23,040
from 0 to 255. another way to write this

91
00:03:23,040 --> 00:03:27,680
would be to assign this value to crgb

92
00:03:27,680 --> 00:03:30,159
then with two colons and then have a

93
00:03:30,159 --> 00:03:32,400
common name for the color

94
00:03:32,400 --> 00:03:35,599
on the fastly d pixel reference guide

95
00:03:35,599 --> 00:03:39,519
we can see more about crgb references

96
00:03:39,519 --> 00:03:42,080
and how to create them and at the very

97
00:03:42,080 --> 00:03:42,560
bottom

98
00:03:42,560 --> 00:03:44,799
we'll find a list of predefined colors

99
00:03:44,799 --> 00:03:46,480
that we can use as well as their

100
00:03:46,480 --> 00:03:49,680
hexadecimal values

101
00:03:49,680 --> 00:03:52,879
a third way would be to

102
00:03:52,879 --> 00:03:56,080
create the red green and blue values as

103
00:03:56,080 --> 00:03:57,599
such

104
00:03:57,599 --> 00:04:00,000
where we are referring to the red

105
00:04:00,000 --> 00:04:01,920
channel of leds

106
00:04:01,920 --> 00:04:05,920
0 as 0 green as 255

107
00:04:05,920 --> 00:04:10,400
and so on a fourth way to define a crgb

108
00:04:10,400 --> 00:04:12,720
object would be to use a hexadecimal

109
00:04:12,720 --> 00:04:13,760
code

110
00:04:13,760 --> 00:04:15,680
in order to do this you would set the

111
00:04:15,680 --> 00:04:18,000
value equal to crgb

112
00:04:18,000 --> 00:04:19,759
and then in parentheses you would put

113
00:04:19,759 --> 00:04:21,680
the hexadecimal code

114
00:04:21,680 --> 00:04:23,440
you may see this done differently in

115
00:04:23,440 --> 00:04:25,440
different fast led sketches because

116
00:04:25,440 --> 00:04:28,080
every programmer has their preference

117
00:04:28,080 --> 00:04:29,840
it's up to you as well which one you'd

118
00:04:29,840 --> 00:04:32,080
like to use

119
00:04:32,080 --> 00:04:33,840
most of the time these methods will work

120
00:04:33,840 --> 00:04:35,840
just fine but things like making a

121
00:04:35,840 --> 00:04:37,759
smooth rainbow fade or choosing purely

122
00:04:37,759 --> 00:04:40,240
random colors using the rgb color space

123
00:04:40,240 --> 00:04:42,000
can be a little annoying because it

124
00:04:42,000 --> 00:04:43,440
involves a bunch of math

125
00:04:43,440 --> 00:04:45,360
or choosing three random values when you

126
00:04:45,360 --> 00:04:47,360
really just want to choose one

127
00:04:47,360 --> 00:04:49,680
to make this easier fast led has support

128
00:04:49,680 --> 00:04:52,960
for the hsb color space

129
00:04:52,960 --> 00:04:55,280
each color in the hsb color space is

130
00:04:55,280 --> 00:04:56,800
made up of three parts

131
00:04:56,800 --> 00:05:00,160
a hue a saturation and a value

132
00:05:00,160 --> 00:05:03,199
the hue is the color it's between 0

133
00:05:03,199 --> 00:05:07,120
and 255 the hsb color wheel starts at

134
00:05:07,120 --> 00:05:07,600
red

135
00:05:07,600 --> 00:05:10,400
and moves through yellow green cyan blue

136
00:05:10,400 --> 00:05:12,479
and magenta

137
00:05:12,479 --> 00:05:14,639
the next value the saturation is

138
00:05:14,639 --> 00:05:16,880
equivalent to the amount of gray

139
00:05:16,880 --> 00:05:21,199
which is also on a scale of 0 to 255

140
00:05:21,199 --> 00:05:23,680
lastly there's the value for brightness

141
00:05:23,680 --> 00:05:24,800
which is between

142
00:05:24,800 --> 00:05:28,320
0 and 255.

143
00:05:28,479 --> 00:05:30,320
note that hue is often described in

144
00:05:30,320 --> 00:05:31,520
terms of degrees

145
00:05:31,520 --> 00:05:35,440
out of 360 but in the case of fast led

146
00:05:35,440 --> 00:05:38,960
it uses one byte 0 to 255.

147
00:05:38,960 --> 00:05:40,560
there's a convenient chart that shows

148
00:05:40,560 --> 00:05:43,120
which numbers correspond to which hue

149
00:05:43,120 --> 00:05:45,759
right here you can find it on the github

150
00:05:45,759 --> 00:05:46,639
fast led

151
00:05:46,639 --> 00:05:50,639
pixel reference for a chsb

152
00:05:50,639 --> 00:05:52,560
as you can see the cool thing about the

153
00:05:52,560 --> 00:05:53,840
hsv color space

154
00:05:53,840 --> 00:05:55,680
is that you can create a smooth rainbow

155
00:05:55,680 --> 00:05:58,319
fade through every color using just one

156
00:05:58,319 --> 00:05:59,919
for loop

157
00:05:59,919 --> 00:06:01,919
in code this would look something like

158
00:06:01,919 --> 00:06:04,159
this

159
00:06:05,199 --> 00:06:09,680
open the sketch hsb 1 led

160
00:06:09,680 --> 00:06:11,520
here you'll see that we're using a for

161
00:06:11,520 --> 00:06:13,120
loop to iterate

162
00:06:13,120 --> 00:06:15,680
through the hues each time through the

163
00:06:15,680 --> 00:06:18,080
for loop we're increasing the hue

164
00:06:18,080 --> 00:06:19,919
this for loop will give you a continuous

165
00:06:19,919 --> 00:06:22,080
rainbow of bright jewel tone colors on

166
00:06:22,080 --> 00:06:23,440
one led

167
00:06:23,440 --> 00:06:26,319
try it out real quick we see a

168
00:06:26,319 --> 00:06:30,080
continuous cycle of colors

169
00:06:33,600 --> 00:06:35,600
as a challenge what change would you

170
00:06:35,600 --> 00:06:36,880
have to make to the code

171
00:06:36,880 --> 00:06:39,280
in order to get all of the onboard leds

172
00:06:39,280 --> 00:06:42,560
to exhibit the same rainbow pattern

173
00:06:42,560 --> 00:06:45,120
this was a difficult problem to solve so

174
00:06:45,120 --> 00:06:47,039
if you weren't able to do it don't feel

175
00:06:47,039 --> 00:06:48,319
too bad

176
00:06:48,319 --> 00:06:50,639
the solution can be found in the sketch

177
00:06:50,639 --> 00:06:51,440
hsb

178
00:06:51,440 --> 00:06:55,039
underscore all leds

179
00:07:01,680 --> 00:07:04,000
in the sketch we have something called a

180
00:07:04,000 --> 00:07:06,000
nested for loop

181
00:07:06,000 --> 00:07:08,240
so if you remember from before the way

182
00:07:08,240 --> 00:07:10,639
that we set all of our leds to a certain

183
00:07:10,639 --> 00:07:11,440
color

184
00:07:11,440 --> 00:07:14,560
was to use a for loop we still include

185
00:07:14,560 --> 00:07:16,560
that in our sketch

186
00:07:16,560 --> 00:07:20,319
right here so at this part of the sketch

187
00:07:20,319 --> 00:07:23,680
lines 20 through 22 we're starting at

188
00:07:23,680 --> 00:07:24,960
led 0

189
00:07:24,960 --> 00:07:27,520
and while the led is less than our

190
00:07:27,520 --> 00:07:29,120
number of leds

191
00:07:29,120 --> 00:07:30,960
we're going to go from one led to the

192
00:07:30,960 --> 00:07:33,599
next we're going to increment

193
00:07:33,599 --> 00:07:36,800
then for that specific led we're going

194
00:07:36,800 --> 00:07:37,520
to change

195
00:07:37,520 --> 00:07:40,560
the chsv value to

196
00:07:40,560 --> 00:07:44,000
i 255 and 255.

197
00:07:44,000 --> 00:07:46,720
and you may be wondering what is i well

198
00:07:46,720 --> 00:07:49,599
that's where the other for loop comes in

199
00:07:49,599 --> 00:07:51,759
outside of this for loop we have a for

200
00:07:51,759 --> 00:07:54,400
loop for changing our hue

201
00:07:54,400 --> 00:07:57,680
so this is saying while int i

202
00:07:57,680 --> 00:08:01,919
equals 0 and i is less than 256

203
00:08:01,919 --> 00:08:05,520
because we can have up to 255 hues

204
00:08:05,520 --> 00:08:09,280
go through each hue in plain terms this

205
00:08:09,280 --> 00:08:10,000
is saying

206
00:08:10,000 --> 00:08:13,039
for each color step through the leds

207
00:08:13,039 --> 00:08:15,919
and set them each to the color then show

208
00:08:15,919 --> 00:08:16,639
the pattern

209
00:08:16,639 --> 00:08:20,400
and delay then repeat for the next color

210
00:08:20,400 --> 00:08:27,840
upload the sketch and give this a try

211
00:08:30,240 --> 00:08:32,479
another cool thing about the hsv color

212
00:08:32,479 --> 00:08:34,399
space is that it makes it easy to choose

213
00:08:34,399 --> 00:08:36,240
colors at random

214
00:08:36,240 --> 00:08:38,320
check out line 100 of the color palette

215
00:08:38,320 --> 00:08:39,279
sketch

216
00:08:39,279 --> 00:08:40,958
the setup totally random palette

217
00:08:40,958 --> 00:08:43,839
function for an example

218
00:08:43,839 --> 00:08:45,920
you could also limit your random number

219
00:08:45,920 --> 00:08:47,519
to a small window

220
00:08:47,519 --> 00:08:50,880
say 0 to 40 for the red oranges or you

221
00:08:50,880 --> 00:08:51,360
could pick

222
00:08:51,360 --> 00:08:54,399
random hues with one primary color doing

223
00:08:54,399 --> 00:08:56,160
this can lend your animations a lot of

224
00:08:56,160 --> 00:08:58,080
constantly changing variation and

225
00:08:58,080 --> 00:08:59,360
character

226
00:08:59,360 --> 00:09:01,680
to try this out for yourself try to make

227
00:09:01,680 --> 00:09:03,760
a variation of our hsb

228
00:09:03,760 --> 00:09:06,480
all leds sketch that only goes through

229
00:09:06,480 --> 00:09:08,720
red and orange tones

230
00:09:08,720 --> 00:09:10,640
again don't worry if you didn't get this

231
00:09:10,640 --> 00:09:13,040
one it's a bit tricky

232
00:09:13,040 --> 00:09:15,760
the solution can be found in hsv all

233
00:09:15,760 --> 00:09:16,640
leds

234
00:09:16,640 --> 00:09:20,480
red tones here we see the same sketch as

235
00:09:20,480 --> 00:09:21,360
before

236
00:09:21,360 --> 00:09:24,560
only under chsv my color

237
00:09:24,560 --> 00:09:28,000
we assigned chsb to a random number

238
00:09:28,000 --> 00:09:31,920
between 0 and 40. and then we set

239
00:09:31,920 --> 00:09:35,120
our saturation to 255

240
00:09:35,120 --> 00:09:38,240
and our value also to a random 8

241
00:09:38,240 --> 00:09:40,240
then we have our for loop where we go

242
00:09:40,240 --> 00:09:41,360
through and

243
00:09:41,360 --> 00:09:45,279
change the color for j to my color

244
00:09:45,279 --> 00:09:48,800
try changing the values between 0 and 40

245
00:09:48,800 --> 00:09:52,000
to go through different color ranges

246
00:09:52,000 --> 00:09:54,160
see if you can choose a specific color

247
00:09:54,160 --> 00:09:57,200
range using the values in this chart

248
00:09:57,200 --> 00:09:59,040
as you can see when i upload the

249
00:09:59,040 --> 00:10:00,240
original sketch

250
00:10:00,240 --> 00:10:03,200
with random values between 0 and 40 i

251
00:10:03,200 --> 00:10:04,399
get different colors

252
00:10:04,399 --> 00:10:08,000
between that range but say i wanted only

253
00:10:08,000 --> 00:10:10,000
pink and purple values

254
00:10:10,000 --> 00:10:15,040
i see that purple is 192 and pink is 224

255
00:10:15,040 --> 00:10:18,880
i'll change the first value to 192.

256
00:10:18,880 --> 00:10:22,160
and the second value to 224

257
00:10:22,160 --> 00:10:24,560
now each time when it iterates through

258
00:10:24,560 --> 00:10:26,800
it'll choose a number between 192

259
00:10:26,800 --> 00:10:30,399
and 224 to set all the leds to

260
00:10:30,399 --> 00:10:33,839
let's give this a try

261
00:10:36,000 --> 00:10:38,320
now that we understand a bit more about

262
00:10:38,320 --> 00:10:40,000
hue saturation value

263
00:10:40,000 --> 00:10:42,959
and also what crgb objects are let's

264
00:10:42,959 --> 00:10:45,200
revisit our color palette example which

265
00:10:45,200 --> 00:10:46,880
we looked at for homework

266
00:10:46,880 --> 00:10:49,440
to find it we need to go to our example

267
00:10:49,440 --> 00:10:51,440
files for fast led

268
00:10:51,440 --> 00:10:55,839
these are located under files examples

269
00:10:55,839 --> 00:10:58,839
fast led and there you'll find color

270
00:10:58,839 --> 00:11:01,600
palette to use this with the onboard

271
00:11:01,600 --> 00:11:03,680
leds of the circuit playground we need

272
00:11:03,680 --> 00:11:05,360
to change the led pin to

273
00:11:05,360 --> 00:11:08,079
8 and then change the number of leds to

274
00:11:08,079 --> 00:11:09,279
10.

275
00:11:09,279 --> 00:11:11,040
if you're using a matrix you should

276
00:11:11,040 --> 00:11:13,279
change this led pin to whatever

277
00:11:13,279 --> 00:11:15,839
pin you have your matrix attached to and

278
00:11:15,839 --> 00:11:17,839
you should change that number of leds to

279
00:11:17,839 --> 00:11:20,320
the number of leds in your matrix

280
00:11:20,320 --> 00:11:22,320
if you are using a matrix i recommend

281
00:11:22,320 --> 00:11:24,079
turning the brightness level down

282
00:11:24,079 --> 00:11:26,399
so that you consume less power let's

283
00:11:26,399 --> 00:11:27,360
have a look at this

284
00:11:27,360 --> 00:11:29,120
and see if we can anticipate what it

285
00:11:29,120 --> 00:11:31,839
might be doing

286
00:11:32,800 --> 00:11:35,440
there's a lot here so it might be best

287
00:11:35,440 --> 00:11:37,519
to upload the sketch and then see if we

288
00:11:37,519 --> 00:11:37,839
can

289
00:11:37,839 --> 00:11:40,079
figure out what it's doing by reverse

290
00:11:40,079 --> 00:11:41,279
engineering it

291
00:11:41,279 --> 00:11:43,440
this sketch runs the same algorithm over

292
00:11:43,440 --> 00:11:45,200
several different color palettes

293
00:11:45,200 --> 00:11:47,040
what this shows you is that clever use

294
00:11:47,040 --> 00:11:48,399
of palettes can create a bunch of

295
00:11:48,399 --> 00:11:49,760
different animation effects

296
00:11:49,760 --> 00:11:51,920
using the same base animation things

297
00:11:51,920 --> 00:11:53,600
like stripes chase patterns

298
00:11:53,600 --> 00:11:55,600
smooth fades and other common animation

299
00:11:55,600 --> 00:11:57,920
effects are super easy to create using

300
00:11:57,920 --> 00:12:00,399
fast led palettes

301
00:12:00,399 --> 00:12:02,320
so what is actually happening in this

302
00:12:02,320 --> 00:12:03,760
sketch

303
00:12:03,760 --> 00:12:06,560
one of the most basic palette setups is

304
00:12:06,560 --> 00:12:06,959
seen

305
00:12:06,959 --> 00:12:08,880
in the setup black and white striped

306
00:12:08,880 --> 00:12:11,279
palette line

307
00:12:11,279 --> 00:12:14,880
a crgb palette 16 object is an array

308
00:12:14,880 --> 00:12:16,079
that holds 16

309
00:12:16,079 --> 00:12:18,800
color values assigned in any of the ways

310
00:12:18,800 --> 00:12:21,279
we've already discussed

311
00:12:21,279 --> 00:12:24,079
most fast led sketches use one called

312
00:12:24,079 --> 00:12:25,120
current palette

313
00:12:25,120 --> 00:12:27,120
to hold the palette being shown on the

314
00:12:27,120 --> 00:12:29,760
leds

315
00:12:30,240 --> 00:12:33,120
as shown above fill solid is a function

316
00:12:33,120 --> 00:12:33,839
you can use

317
00:12:33,839 --> 00:12:35,760
to fill a whole array of colors

318
00:12:35,760 --> 00:12:38,079
instantly just by giving it

319
00:12:38,079 --> 00:12:40,160
the array name the number of values to

320
00:12:40,160 --> 00:12:42,959
fill and a color

321
00:12:42,959 --> 00:12:44,560
there are other convenient functions

322
00:12:44,560 --> 00:12:47,120
like this such as fill rainbow and fill

323
00:12:47,120 --> 00:12:47,839
gradient

324
00:12:47,839 --> 00:12:49,440
along with the ones we've been using

325
00:12:49,440 --> 00:12:52,160
most often fill palette

326
00:12:52,160 --> 00:12:56,000
you can find out more about them here

327
00:13:00,000 --> 00:13:02,079
but as shown the bottom line here is

328
00:13:02,079 --> 00:13:03,760
that we're creating a black and white

329
00:13:03,760 --> 00:13:05,200
striped color palette

330
00:13:05,200 --> 00:13:07,519
by setting the whole palette to black

331
00:13:07,519 --> 00:13:10,560
and then adding four spots of white

332
00:13:10,560 --> 00:13:12,480
depending on the length of the strip

333
00:13:12,480 --> 00:13:14,480
these will either be single dots

334
00:13:14,480 --> 00:13:17,680
or wide stripes the perceived size of

335
00:13:17,680 --> 00:13:20,000
each of the 16 colors in the palette

336
00:13:20,000 --> 00:13:22,079
always depends on the total size of the

337
00:13:22,079 --> 00:13:24,480
leds array

338
00:13:24,480 --> 00:13:26,639
another commonly used pattern lets us

339
00:13:26,639 --> 00:13:28,560
store our palettes in flash memory

340
00:13:28,560 --> 00:13:29,839
instead of ram

341
00:13:29,839 --> 00:13:31,360
this is important because many

342
00:13:31,360 --> 00:13:33,279
microcontrollers have a lot of flash

343
00:13:33,279 --> 00:13:34,000
memory

344
00:13:34,000 --> 00:13:35,760
but very little storage space for

345
00:13:35,760 --> 00:13:37,279
programs in ram

346
00:13:37,279 --> 00:13:40,959
in color palette we see this line extern

347
00:13:40,959 --> 00:13:44,160
crgb palette 16 and then we see the name

348
00:13:44,160 --> 00:13:45,680
of the palette

349
00:13:45,680 --> 00:13:48,320
this defines a space to hold the palette

350
00:13:48,320 --> 00:13:49,440
the next line

351
00:13:49,440 --> 00:13:51,680
tells arduino that the actual definition

352
00:13:51,680 --> 00:13:52,800
of the palette will come

353
00:13:52,800 --> 00:13:57,600
later and will be stored in prog mem

354
00:13:57,600 --> 00:14:00,079
then if we scroll down we'll see the

355
00:14:00,079 --> 00:14:03,839
definition of our palette

356
00:14:05,920 --> 00:14:08,320
here it is so this is the actual

357
00:14:08,320 --> 00:14:09,120
definition

358
00:14:09,120 --> 00:14:12,560
of our palette it defines the 16 colors

359
00:14:12,560 --> 00:14:15,519
down below and then it stores it in

360
00:14:15,519 --> 00:14:16,800
memory

361
00:14:16,800 --> 00:14:19,040
like we said before all this constix

362
00:14:19,040 --> 00:14:21,120
stern progmom stuff is ugly

363
00:14:21,120 --> 00:14:23,360
and a little confusing but you can just

364
00:14:23,360 --> 00:14:25,040
cut and paste this pattern from the

365
00:14:25,040 --> 00:14:25,680
examples

366
00:14:25,680 --> 00:14:28,880
99 of the time next let's talk about how

367
00:14:28,880 --> 00:14:30,880
we actually fill our leds

368
00:14:30,880 --> 00:14:33,760
using these palettes if you go to the

369
00:14:33,760 --> 00:14:35,519
top of the sketch

370
00:14:35,519 --> 00:14:37,920
right above where we have the extern and

371
00:14:37,920 --> 00:14:40,240
pragma lines we just mentioned

372
00:14:40,240 --> 00:14:42,480
we see the normal definition for a color

373
00:14:42,480 --> 00:14:43,760
palette

374
00:14:43,760 --> 00:14:47,440
so first what you would do is you would

375
00:14:47,440 --> 00:14:50,320
declare the current palette and then you

376
00:14:50,320 --> 00:14:50,880
also

377
00:14:50,880 --> 00:14:54,160
would declare a type of blending

378
00:14:54,160 --> 00:14:57,519
if we scroll down to setup we can see

379
00:14:57,519 --> 00:14:59,519
that the current palette we have defined

380
00:14:59,519 --> 00:15:01,920
is rainbow colors this is the name of

381
00:15:01,920 --> 00:15:02,880
the palette

382
00:15:02,880 --> 00:15:05,279
and then we have a blending option the

383
00:15:05,279 --> 00:15:07,600
two options here are linear blend and no

384
00:15:07,600 --> 00:15:08,560
blend

385
00:15:08,560 --> 00:15:11,040
i almost always choose linear blend but

386
00:15:11,040 --> 00:15:12,000
you can experiment

387
00:15:12,000 --> 00:15:13,839
with this and see what the difference is

388
00:15:13,839 --> 00:15:16,480
in the output of your leds

389
00:15:16,480 --> 00:15:19,519
if we continue down to loop we see

390
00:15:19,519 --> 00:15:21,519
we have a function to change the palette

391
00:15:21,519 --> 00:15:22,800
periodically

392
00:15:22,800 --> 00:15:25,279
which means it will switch palettes and

393
00:15:25,279 --> 00:15:27,040
we can look at that function in a little

394
00:15:27,040 --> 00:15:28,079
bit

395
00:15:28,079 --> 00:15:31,120
we have a starting index and then we

396
00:15:31,120 --> 00:15:31,680
have

397
00:15:31,680 --> 00:15:33,759
set the starting index to starting index

398
00:15:33,759 --> 00:15:36,320
plus one which is the speed

399
00:15:36,320 --> 00:15:38,839
and then this is the normal way to fill

400
00:15:38,839 --> 00:15:41,680
colors fill leds from palette colors

401
00:15:41,680 --> 00:15:42,959
start index

402
00:15:42,959 --> 00:15:45,360
and then if we go down to fill leds from

403
00:15:45,360 --> 00:15:46,880
palette colors

404
00:15:46,880 --> 00:15:49,279
we see how that actually works so we

405
00:15:49,279 --> 00:15:51,600
have again our for loop

406
00:15:51,600 --> 00:15:54,160
and then that goes throughout the number

407
00:15:54,160 --> 00:15:56,399
of leds that we have

408
00:15:56,399 --> 00:15:58,320
and then it chooses a color from the

409
00:15:58,320 --> 00:15:59,680
palette

410
00:15:59,680 --> 00:16:01,600
as above you'll be cutting and pasting

411
00:16:01,600 --> 00:16:03,680
this over and over as you work with fast

412
00:16:03,680 --> 00:16:04,880
led

413
00:16:04,880 --> 00:16:06,720
the main tweak points here are the

414
00:16:06,720 --> 00:16:08,560
animation update speed

415
00:16:08,560 --> 00:16:11,920
shown as updates per second

416
00:16:11,920 --> 00:16:13,920
and we'll have a look at this and a

417
00:16:13,920 --> 00:16:15,920
better way to do this that uses timers

418
00:16:15,920 --> 00:16:17,519
later

419
00:16:17,519 --> 00:16:21,279
the motion speed which in this case is

420
00:16:21,279 --> 00:16:24,240
start index star index plus one you can

421
00:16:24,240 --> 00:16:25,440
change the plus one

422
00:16:25,440 --> 00:16:27,759
shown to larger values to cause faster

423
00:16:27,759 --> 00:16:28,480
movement

424
00:16:28,480 --> 00:16:32,480
or to zero to freeze the strips movement

425
00:16:32,480 --> 00:16:35,680
then we have a color index if you

426
00:16:35,680 --> 00:16:37,519
comment out the color index

427
00:16:37,519 --> 00:16:40,320
plus equals three you can apply the

428
00:16:40,320 --> 00:16:44,240
palette to the entire strip at once

429
00:16:46,959 --> 00:16:48,480
rather than spreading it across the

430
00:16:48,480 --> 00:16:52,720
strip in the usual moving sliding effect

431
00:17:00,560 --> 00:17:03,839
as a challenge how might you reverse the

432
00:17:03,839 --> 00:17:04,559
direction

433
00:17:04,559 --> 00:17:07,599
of the movement effect

434
00:17:07,599 --> 00:17:11,520
pause the video and give this a try

435
00:17:12,880 --> 00:17:15,119
the solution could be to change the

436
00:17:15,119 --> 00:17:16,400
start index

437
00:17:16,400 --> 00:17:20,480
to 255. and then instead of moving

438
00:17:20,480 --> 00:17:22,640
forward we want to move backward

439
00:17:22,640 --> 00:17:27,039
so we change this to negative one

440
00:17:27,919 --> 00:17:32,000
let's upload this and see how it looks

441
00:17:32,000 --> 00:17:34,160
sure enough we see that our leds are

442
00:17:34,160 --> 00:17:36,480
moving in the reverse direction

443
00:17:36,480 --> 00:17:39,200
note that one special feature of uint

444
00:17:39,200 --> 00:17:40,880
eight underscore t

445
00:17:40,880 --> 00:17:43,120
slash bite objects in arduino is that

446
00:17:43,120 --> 00:17:45,039
they seamlessly roll over

447
00:17:45,039 --> 00:17:48,480
255 plus one resolves to zero and zero

448
00:17:48,480 --> 00:17:51,120
minus one resolves to 255

449
00:17:51,120 --> 00:17:53,120
this is not something you can count on

450
00:17:53,120 --> 00:17:55,760
with signed values like ins or floats

451
00:17:55,760 --> 00:17:57,760
but it's super useful when doing color

452
00:17:57,760 --> 00:17:58,960
math since almost

453
00:17:58,960 --> 00:18:00,720
everything to do with colors is defined

454
00:18:00,720 --> 00:18:03,440
internally as a bite

455
00:18:03,440 --> 00:18:05,600
double bonus how might you make the

456
00:18:05,600 --> 00:18:07,120
effect go back and forth

457
00:18:07,120 --> 00:18:10,719
changing direction every time

458
00:18:11,280 --> 00:18:12,960
at this point let's take a minute to

459
00:18:12,960 --> 00:18:15,600
experiment with the sketch as given

460
00:18:15,600 --> 00:18:17,600
try changing some of the colors in the

461
00:18:17,600 --> 00:18:19,919
palettes tweaking the values we just

462
00:18:19,919 --> 00:18:21,520
talked about in the loop

463
00:18:21,520 --> 00:18:23,760
and fill leds from palette colors

464
00:18:23,760 --> 00:18:24,880
functions

465
00:18:24,880 --> 00:18:26,640
and changing the brightness and updates

466
00:18:26,640 --> 00:18:29,679
per second variable to see what they do

467
00:18:29,679 --> 00:18:31,840
upload the sketch between each change to

468
00:18:31,840 --> 00:18:33,840
get a feel for how your changes affect

469
00:18:33,840 --> 00:18:35,520
the animation

470
00:18:35,520 --> 00:18:37,600
if you finish too quickly try to figure

471
00:18:37,600 --> 00:18:39,200
out the answer to the double secret

472
00:18:39,200 --> 00:18:41,679
bonus question above

473
00:18:41,679 --> 00:18:44,080
earlier we mentioned that there's issues

474
00:18:44,080 --> 00:18:47,440
with using the delay function for timing

475
00:18:47,440 --> 00:18:49,520
and we also mentioned we'd present some

476
00:18:49,520 --> 00:18:51,440
alternatives

477
00:18:51,440 --> 00:18:54,320
two of these are every n milliseconds an

478
00:18:54,320 --> 00:18:54,559
n

479
00:18:54,559 --> 00:18:57,840
blend pellet towards palette you might

480
00:18:57,840 --> 00:18:59,679
have noticed that the transitions of

481
00:18:59,679 --> 00:19:01,440
different palettes in the color palette

482
00:19:01,440 --> 00:19:04,559
sketch are abrupt and a bit ugly

483
00:19:04,559 --> 00:19:07,360
fastly d provides a better way as shown

484
00:19:07,360 --> 00:19:08,480
in this example

485
00:19:08,480 --> 00:19:12,000
color palette transitions

486
00:19:12,240 --> 00:19:14,400
in this example you'll define two

487
00:19:14,400 --> 00:19:15,520
palette arrays

488
00:19:15,520 --> 00:19:19,440
current palette and a target palette

489
00:19:22,559 --> 00:19:24,640
and then you'll only ever change the

490
00:19:24,640 --> 00:19:26,000
ladder

491
00:19:26,000 --> 00:19:28,160
to transition between palettes with a

492
00:19:28,160 --> 00:19:29,360
smooth blend

493
00:19:29,360 --> 00:19:31,520
all you need to do is change target

494
00:19:31,520 --> 00:19:33,440
palette when you want to start your

495
00:19:33,440 --> 00:19:34,240
change

496
00:19:34,240 --> 00:19:36,480
and then make sure the following lines

497
00:19:36,480 --> 00:19:39,840
are in your loop

498
00:19:44,720 --> 00:19:46,960
the every n milliseconds control

499
00:19:46,960 --> 00:19:50,320
construct comes in handy in fast led

500
00:19:50,320 --> 00:19:52,720
i always recommend using it or the

501
00:19:52,720 --> 00:19:53,840
millis timers

502
00:19:53,840 --> 00:19:55,919
which we'll be discussing shortly

503
00:19:55,919 --> 00:19:57,120
instead of delays

504
00:19:57,120 --> 00:19:59,520
because delays block which means they

505
00:19:59,520 --> 00:20:02,080
stop the arduino from processing code

506
00:20:02,080 --> 00:20:05,360
while they finish 99.9

507
00:20:05,360 --> 00:20:07,679
of the time this is not what you want

508
00:20:07,679 --> 00:20:09,440
because you typically want to be reading

509
00:20:09,440 --> 00:20:10,080
sensors

510
00:20:10,080 --> 00:20:12,480
or writing output or doing literally

511
00:20:12,480 --> 00:20:14,159
anything else while your lights are

512
00:20:14,159 --> 00:20:15,360
updating

513
00:20:15,360 --> 00:20:17,679
you can use every n milliseconds or a

514
00:20:17,679 --> 00:20:19,200
millis timer instead

515
00:20:19,200 --> 00:20:21,200
to ensure that your arduino is always

516
00:20:21,200 --> 00:20:22,799
working for you

517
00:20:22,799 --> 00:20:25,360
try to upload this sketch and see how it

518
00:20:25,360 --> 00:20:26,960
functions differently

519
00:20:26,960 --> 00:20:29,919
we can see our color palettes blend one

520
00:20:29,919 --> 00:20:30,720
to another

521
00:20:30,720 --> 00:20:33,120
smoothly and if we wanted to add in some

522
00:20:33,120 --> 00:20:34,559
other interactivity

523
00:20:34,559 --> 00:20:38,080
say a sensor or another output like

524
00:20:38,080 --> 00:20:40,320
a servo we could do that at the same

525
00:20:40,320 --> 00:20:42,320
time without worrying about ruining our

526
00:20:42,320 --> 00:20:43,679
led timing

527
00:20:43,679 --> 00:20:46,080
another useful blending and timing

528
00:20:46,080 --> 00:20:48,080
technique can be found in the sketch

529
00:20:48,080 --> 00:20:51,440
palette crossfade in this sketch

530
00:20:51,440 --> 00:20:53,440
we see the same setup for our current

531
00:20:53,440 --> 00:20:56,720
palette and our target palette

532
00:20:56,720 --> 00:20:59,280
then on line 46 we see the call to

533
00:20:59,280 --> 00:21:02,080
change the palette periodically

534
00:21:02,080 --> 00:21:05,280
on line 57 and 58 we see

535
00:21:05,280 --> 00:21:08,080
n blend palette towards palette this

536
00:21:08,080 --> 00:21:10,000
will go from the current palette to the

537
00:21:10,000 --> 00:21:11,280
target palette

538
00:21:11,280 --> 00:21:13,440
for the maximum number of changes which

539
00:21:13,440 --> 00:21:16,080
we've set to 24.

540
00:21:16,080 --> 00:21:18,320
the rest should seem familiar we're

541
00:21:18,320 --> 00:21:20,400
filling the leds from the palette colors

542
00:21:20,400 --> 00:21:22,080
at the starting index

543
00:21:22,080 --> 00:21:23,919
and then we're iterating through our

544
00:21:23,919 --> 00:21:25,600
number of leds

545
00:21:25,600 --> 00:21:28,640
to change the color for timing we're

546
00:21:28,640 --> 00:21:30,640
using millies

547
00:21:30,640 --> 00:21:32,159
if you look under change palette

548
00:21:32,159 --> 00:21:34,960
periodically we're using

549
00:21:34,960 --> 00:21:38,400
a timer in order to change the colors

550
00:21:38,400 --> 00:21:40,159
there's another very useful type of

551
00:21:40,159 --> 00:21:42,240
color palette i'd like to show you

552
00:21:42,240 --> 00:21:44,640
gradient palettes these avoid the

553
00:21:44,640 --> 00:21:46,720
somewhat static look of a 16 color

554
00:21:46,720 --> 00:21:47,280
palette

555
00:21:47,280 --> 00:21:49,120
by defining the palette as a gradient

556
00:21:49,120 --> 00:21:51,120
which smoothly transitions from color to

557
00:21:51,120 --> 00:21:52,240
color

558
00:21:52,240 --> 00:21:54,000
you can define as few or as many

559
00:21:54,000 --> 00:21:55,840
gradient points as you like

560
00:21:55,840 --> 00:21:59,120
up to 255 and fast led will handle the

561
00:21:59,120 --> 00:22:01,600
fades between them for you

562
00:22:01,600 --> 00:22:03,679
the documentation for these can be found

563
00:22:03,679 --> 00:22:05,600
on the fast led wiki

564
00:22:05,600 --> 00:22:07,360
and the gradient palettes are defined

565
00:22:07,360 --> 00:22:09,840
like so

566
00:22:10,960 --> 00:22:14,000
the first number runs from 0 to 255

567
00:22:14,000 --> 00:22:16,000
and is the spot on the gradient's color

568
00:22:16,000 --> 00:22:19,120
line where we want to put this color

569
00:22:19,120 --> 00:22:21,440
0 is the beginning of the line or the

570
00:22:21,440 --> 00:22:22,240
first color

571
00:22:22,240 --> 00:22:25,280
and 255 is the end or the last color on

572
00:22:25,280 --> 00:22:26,240
the line

573
00:22:26,240 --> 00:22:28,400
the other three numbers are the rgb

574
00:22:28,400 --> 00:22:29,840
component of the color

575
00:22:29,840 --> 00:22:33,440
from 0 to 255. check out the gradient

576
00:22:33,440 --> 00:22:35,760
color palette file on github for a baked

577
00:22:35,760 --> 00:22:37,039
in example

578
00:22:37,039 --> 00:22:38,960
open the sketch for gradient palette

579
00:22:38,960 --> 00:22:40,400
from the course files

580
00:22:40,400 --> 00:22:42,240
this gives an explanation of how

581
00:22:42,240 --> 00:22:44,960
gradient palettes work

582
00:22:44,960 --> 00:22:46,880
here we can see we've defined several

583
00:22:46,880 --> 00:22:50,640
palettes at the beginning of the sketch

584
00:22:51,360 --> 00:22:53,679
we have one that goes from black to red

585
00:22:53,679 --> 00:22:54,880
to bright yellow

586
00:22:54,880 --> 00:22:58,159
to full white it starts at black towards

587
00:22:58,159 --> 00:23:00,400
the beginning of the strip

588
00:23:00,400 --> 00:23:03,679
and then fades towards red at the very

589
00:23:03,679 --> 00:23:06,400
end it fades towards yellow to white

590
00:23:06,400 --> 00:23:08,799
this might give us a fire sort of

591
00:23:08,799 --> 00:23:10,880
animation

592
00:23:10,880 --> 00:23:12,799
in the second sketch which we've called

593
00:23:12,799 --> 00:23:14,000
ice map

594
00:23:14,000 --> 00:23:17,280
we go from black to blue to almost white

595
00:23:17,280 --> 00:23:18,640
to full white

596
00:23:18,640 --> 00:23:20,480
again we're transitioning from almost

597
00:23:20,480 --> 00:23:22,000
white to full white at the very

598
00:23:22,000 --> 00:23:24,159
end of the strip whereas we're

599
00:23:24,159 --> 00:23:25,360
transitioning

600
00:23:25,360 --> 00:23:28,400
to blue in the middle

601
00:23:28,400 --> 00:23:30,720
lastly we have an animation that goes

602
00:23:30,720 --> 00:23:31,440
from black

603
00:23:31,440 --> 00:23:34,480
to light purple to full purple to full

604
00:23:34,480 --> 00:23:36,720
white upload the sketch and give it a

605
00:23:36,720 --> 00:23:37,600
try

606
00:23:37,600 --> 00:23:39,919
see what it looks like you can try

607
00:23:39,919 --> 00:23:41,520
changing the different colors

608
00:23:41,520 --> 00:23:43,760
and changing the timing in order to

609
00:23:43,760 --> 00:23:45,679
experiment and really learn how this

610
00:23:45,679 --> 00:23:47,840
sketch works

611
00:23:47,840 --> 00:23:49,919
here we see the transition between the

612
00:23:49,919 --> 00:23:52,080
first palette and the second palette in

613
00:23:52,080 --> 00:23:54,799
our playlist

614
00:23:56,240 --> 00:23:57,919
i bet you're wondering how you can

615
00:23:57,919 --> 00:23:59,919
define these palettes for yourself and

616
00:23:59,919 --> 00:24:02,720
create your own colorful gradients

617
00:24:02,720 --> 00:24:04,559
luckily there's a tool called palette

618
00:24:04,559 --> 00:24:06,159
knife that you can use to grab

619
00:24:06,159 --> 00:24:08,720
already formatted color palettes from an

620
00:24:08,720 --> 00:24:10,320
open palette repository

621
00:24:10,320 --> 00:24:14,159
called cpt city you can find it at the

622
00:24:14,159 --> 00:24:16,480
following urls

623
00:24:16,480 --> 00:24:18,720
on the palette knife website you'll find

624
00:24:18,720 --> 00:24:20,159
instructions on how to use

625
00:24:20,159 --> 00:24:22,880
palette knife in short you want to add

626
00:24:22,880 --> 00:24:24,720
the palette knife bookmarklet to your

627
00:24:24,720 --> 00:24:25,600
browser

628
00:24:25,600 --> 00:24:28,720
and then browse cpt city when you find a

629
00:24:28,720 --> 00:24:29,679
palette you like

630
00:24:29,679 --> 00:24:31,520
you can just click the bookmarklet to

631
00:24:31,520 --> 00:24:32,720
save any palette

632
00:24:32,720 --> 00:24:35,520
in fast led format ready to be pasted

633
00:24:35,520 --> 00:24:37,120
into your code

634
00:24:37,120 --> 00:24:40,320
give it a try to use fast led's palette

635
00:24:40,320 --> 00:24:41,279
knife tool

636
00:24:41,279 --> 00:24:43,679
we're going to go to fastly d dot io

637
00:24:43,679 --> 00:24:44,960
forward slash tools

638
00:24:44,960 --> 00:24:48,000
forward slash palette knife

639
00:24:48,000 --> 00:24:49,520
and you'll see there's already a lot of

640
00:24:49,520 --> 00:24:51,440
instructions here

641
00:24:51,440 --> 00:24:54,159
on how to get started but it's pretty

642
00:24:54,159 --> 00:24:54,960
simple

643
00:24:54,960 --> 00:24:56,640
first of all i should point out that you

644
00:24:56,640 --> 00:24:59,200
need to have chrome or safari

645
00:24:59,200 --> 00:25:01,760
palette knife won't work with firefox or

646
00:25:01,760 --> 00:25:03,279
internet explorer

647
00:25:03,279 --> 00:25:05,039
and you'll see under installing palette

648
00:25:05,039 --> 00:25:06,880
knife that the first thing it says to do

649
00:25:06,880 --> 00:25:09,279
is to drag this bookmarklet into a

650
00:25:09,279 --> 00:25:11,200
browser toolbar

651
00:25:11,200 --> 00:25:13,039
if you don't have your browser toolbar

652
00:25:13,039 --> 00:25:14,320
visible

653
00:25:14,320 --> 00:25:16,799
you can go up to view in chrome and then

654
00:25:16,799 --> 00:25:18,000
select always show

655
00:25:18,000 --> 00:25:20,880
bookmarks bar and that will reveal this

656
00:25:20,880 --> 00:25:21,440
bar

657
00:25:21,440 --> 00:25:24,159
right here that's below the search bar

658
00:25:24,159 --> 00:25:25,440
then all you want to do

659
00:25:25,440 --> 00:25:29,200
is click palette knife and drag it

660
00:25:29,200 --> 00:25:31,440
in and then you'll see that it'll say

661
00:25:31,440 --> 00:25:32,320
palette knife

662
00:25:32,320 --> 00:25:34,000
and that's all you need to do to install

663
00:25:34,000 --> 00:25:36,640
it then we need to go and grab

664
00:25:36,640 --> 00:25:38,559
palette and you'll see under using

665
00:25:38,559 --> 00:25:40,840
palette knife it directs you to cpt

666
00:25:40,840 --> 00:25:44,159
city if you open that up

667
00:25:44,159 --> 00:25:45,919
you'll find hundreds and hundreds of

668
00:25:45,919 --> 00:25:47,520
pallets that you can use in your

669
00:25:47,520 --> 00:25:49,840
projects that are already made for you

670
00:25:49,840 --> 00:25:54,240
so let's just open up one random one

671
00:25:54,240 --> 00:25:56,720
and we see a lot of different varieties

672
00:25:56,720 --> 00:25:58,320
of colors here

673
00:25:58,320 --> 00:26:00,559
and i'm going to select chroma and you

674
00:26:00,559 --> 00:26:02,159
can imagine that this would be a really

675
00:26:02,159 --> 00:26:03,919
complicated pattern

676
00:26:03,919 --> 00:26:07,360
to create manually so it's really great

677
00:26:07,360 --> 00:26:09,360
that it's already been created for us

678
00:26:09,360 --> 00:26:11,200
now if i want to save this all i have to

679
00:26:11,200 --> 00:26:14,880
do is select palette knife

680
00:26:14,960 --> 00:26:17,600
and if you get an error like this it

681
00:26:17,600 --> 00:26:18,000
means

682
00:26:18,000 --> 00:26:20,880
that the palette is too big so it might

683
00:26:20,880 --> 00:26:21,600
not contain

684
00:26:21,600 --> 00:26:23,440
all of the colors but we'll just click

685
00:26:23,440 --> 00:26:24,720
ok

686
00:26:24,720 --> 00:26:27,200
and then it'll come up with the code and

687
00:26:27,200 --> 00:26:29,600
we can copy and paste this code directly

688
00:26:29,600 --> 00:26:32,159
into our arduino sketch in order to use

689
00:26:32,159 --> 00:26:34,640
this palette so i'm going to click ok

690
00:26:34,640 --> 00:26:36,240
after i copy this code

691
00:26:36,240 --> 00:26:38,000
now when i go back to my gradient

692
00:26:38,000 --> 00:26:39,760
palette sketch

693
00:26:39,760 --> 00:26:42,960
i can paste the code

694
00:26:42,960 --> 00:26:45,520
to define a new gradient palette as you

695
00:26:45,520 --> 00:26:47,360
can see this is a big one and it didn't

696
00:26:47,360 --> 00:26:48,720
get all of the values

697
00:26:48,720 --> 00:26:52,000
but that's okay as we mentioned before

698
00:26:52,000 --> 00:26:55,840
it can save up to 255 and after that

699
00:26:55,840 --> 00:26:58,720
it it won't work so it's already defined

700
00:26:58,720 --> 00:27:00,880
this palette and named it as chroma

701
00:27:00,880 --> 00:27:03,120
underscore gp so if i want to use it

702
00:27:03,120 --> 00:27:04,840
what i'll do is i'll copy

703
00:27:04,840 --> 00:27:07,279
that and then i can add it to my

704
00:27:07,279 --> 00:27:09,360
playlist or include it anywhere in my

705
00:27:09,360 --> 00:27:10,559
sketch

706
00:27:10,559 --> 00:27:12,720
so here i can include this in my

707
00:27:12,720 --> 00:27:13,760
playlist

708
00:27:13,760 --> 00:27:16,880
and say instead of going from heat map i

709
00:27:16,880 --> 00:27:17,919
want to

710
00:27:17,919 --> 00:27:21,039
go to my new palette

711
00:27:21,039 --> 00:27:24,399
i can just copy and paste that in here

712
00:27:24,399 --> 00:27:26,640
and so now it will blend towards this

713
00:27:26,640 --> 00:27:28,799
palette before it goes to icemap

714
00:27:28,799 --> 00:27:32,720
and i can also replace that here as well

715
00:27:32,720 --> 00:27:34,399
so now instead of seeing the heat map

716
00:27:34,399 --> 00:27:36,399
animation i will see my chroma

717
00:27:36,399 --> 00:27:40,080
animation give this a try

718
00:27:40,080 --> 00:27:42,320
and play around with copying and pasting

719
00:27:42,320 --> 00:27:44,320
different palettes into your sketch

720
00:27:44,320 --> 00:27:47,760
ppt city has tons and tons of palettes

721
00:27:47,760 --> 00:27:49,039
that you can just grab

722
00:27:49,039 --> 00:27:51,279
using the palette knife but what if you

723
00:27:51,279 --> 00:27:53,760
want a very particular palette

724
00:27:53,760 --> 00:27:55,840
and in fact you want to design your own

725
00:27:55,840 --> 00:27:57,039
palette

726
00:27:57,039 --> 00:27:59,480
well there's a tool online called

727
00:27:59,480 --> 00:28:00,720
angrytools.com

728
00:28:00,720 --> 00:28:03,679
gradient generator and you can get to it

729
00:28:03,679 --> 00:28:05,440
at angrytools.com

730
00:28:05,440 --> 00:28:08,240
forward slash gradient here you'll see

731
00:28:08,240 --> 00:28:08,960
that there's

732
00:28:08,960 --> 00:28:12,399
a gradient generator that has a gui

733
00:28:12,399 --> 00:28:15,520
with a color box and

734
00:28:15,520 --> 00:28:18,640
also it has different orientations and

735
00:28:18,640 --> 00:28:20,000
you can combine these

736
00:28:20,000 --> 00:28:22,640
in addition with the rotation tool to

737
00:28:22,640 --> 00:28:23,279
create a

738
00:28:23,279 --> 00:28:26,799
very specific gradient so say i wanted

739
00:28:26,799 --> 00:28:28,080
to have a gradient

740
00:28:28,080 --> 00:28:33,200
that was made up of purple and blue hues

741
00:28:33,200 --> 00:28:35,039
so what i would do is i would start by

742
00:28:35,039 --> 00:28:37,919
selecting a purple tone that i liked

743
00:28:37,919 --> 00:28:39,760
and that would be at one end of the

744
00:28:39,760 --> 00:28:41,840
gradient and you can see a preview of it

745
00:28:41,840 --> 00:28:44,240
here and then the mixer here

746
00:28:44,240 --> 00:28:47,679
i can use these sliders to change

747
00:28:47,679 --> 00:28:50,480
that first value and where it is in the

748
00:28:50,480 --> 00:28:51,679
map

749
00:28:51,679 --> 00:28:53,520
and i can also do that with the last

750
00:28:53,520 --> 00:28:55,760
value

751
00:28:55,760 --> 00:28:58,640
but say i want to change this value i

752
00:28:58,640 --> 00:28:59,760
would click on

753
00:28:59,760 --> 00:29:02,640
this box and then i would want to select

754
00:29:02,640 --> 00:29:03,840
my other

755
00:29:03,840 --> 00:29:08,640
purpley pink hue so let's go for maybe a

756
00:29:08,640 --> 00:29:12,640
very dark purple

757
00:29:12,640 --> 00:29:16,000
i can also add colors in here too to do

758
00:29:16,000 --> 00:29:17,600
that i would just want to click

759
00:29:17,600 --> 00:29:20,080
anywhere on my map and that will add a

760
00:29:20,080 --> 00:29:21,840
new little box

761
00:29:21,840 --> 00:29:25,200
and i can again select a color for that

762
00:29:25,200 --> 00:29:27,679
box

763
00:29:27,679 --> 00:29:29,679
so say i wanted to put in a stripe of

764
00:29:29,679 --> 00:29:30,720
green

765
00:29:30,720 --> 00:29:33,120
and as also mentioned you can change the

766
00:29:33,120 --> 00:29:34,480
rotation

767
00:29:34,480 --> 00:29:36,000
and this might be something to think

768
00:29:36,000 --> 00:29:38,320
about in terms of if you're using a

769
00:29:38,320 --> 00:29:40,080
strip or a matrix or

770
00:29:40,080 --> 00:29:42,960
how you're actually addressing your leds

771
00:29:42,960 --> 00:29:43,600
and we'll talk

772
00:29:43,600 --> 00:29:46,000
more about that in a little bit and you

773
00:29:46,000 --> 00:29:46,720
can also

774
00:29:46,720 --> 00:29:49,760
use predefined gradient palettes too if

775
00:29:49,760 --> 00:29:50,960
it's easier for you

776
00:29:50,960 --> 00:29:53,440
so if you know that you want to select

777
00:29:53,440 --> 00:29:54,640
five different colors

778
00:29:54,640 --> 00:29:57,840
you can select one that has these

779
00:29:57,840 --> 00:29:59,919
already set up for you and again you

780
00:29:59,919 --> 00:30:02,240
would just change them by clicking on

781
00:30:02,240 --> 00:30:05,520
the box for each color and then

782
00:30:05,520 --> 00:30:07,520
selecting a color and then moving these

783
00:30:07,520 --> 00:30:08,799
around

784
00:30:08,799 --> 00:30:11,039
you can also change the orientation from

785
00:30:11,039 --> 00:30:12,799
linear to radial

786
00:30:12,799 --> 00:30:14,559
so now that i have that that's pretty

787
00:30:14,559 --> 00:30:15,919
straightforward

788
00:30:15,919 --> 00:30:18,000
but what isn't straightforward is how to

789
00:30:18,000 --> 00:30:19,679
bring this into

790
00:30:19,679 --> 00:30:21,919
fast led because you'll already see that

791
00:30:21,919 --> 00:30:23,600
if we look down to where the code is

792
00:30:23,600 --> 00:30:24,640
generated

793
00:30:24,640 --> 00:30:26,559
this is all very useful if we want to

794
00:30:26,559 --> 00:30:28,799
use this in graphic design

795
00:30:28,799 --> 00:30:31,039
but it's a little trickier to bring it

796
00:30:31,039 --> 00:30:32,720
into that

797
00:30:32,720 --> 00:30:35,760
gradient format that we saw earlier

798
00:30:35,760 --> 00:30:38,960
but if you click the tab for svg

799
00:30:38,960 --> 00:30:40,320
you'll see that we get something that's

800
00:30:40,320 --> 00:30:42,320
a little bit more similar to what our

801
00:30:42,320 --> 00:30:44,000
defined gradient is

802
00:30:44,000 --> 00:30:45,840
so what we can do is we can actually

803
00:30:45,840 --> 00:30:48,159
copy this and then we can convert

804
00:30:48,159 --> 00:30:51,360
this to looking something like

805
00:30:51,360 --> 00:30:54,320
what our gradient palette looks like so

806
00:30:54,320 --> 00:30:56,480
here's an example of a palette that's

807
00:30:56,480 --> 00:30:57,279
generated

808
00:30:57,279 --> 00:30:59,120
by with the angry tools gradient

809
00:30:59,120 --> 00:31:00,480
generator

810
00:31:00,480 --> 00:31:04,080
translated into our fast led format

811
00:31:04,080 --> 00:31:06,399
the trick here is to look at the stop

812
00:31:06,399 --> 00:31:07,200
offset

813
00:31:07,200 --> 00:31:10,080
percentage and we want to convert that

814
00:31:10,080 --> 00:31:14,000
to a value that's from 0 to 255

815
00:31:14,000 --> 00:31:16,960
so you can use a calculator to do this

816
00:31:16,960 --> 00:31:18,880
and as long as you don't have

817
00:31:18,880 --> 00:31:21,360
too many pallets it's not that big of a

818
00:31:21,360 --> 00:31:22,000
problem

819
00:31:22,000 --> 00:31:23,679
and of course once you've converted it

820
00:31:23,679 --> 00:31:25,200
you can reuse that pallet

821
00:31:25,200 --> 00:31:27,840
again and again if you have more than a

822
00:31:27,840 --> 00:31:28,640
few pallets

823
00:31:28,640 --> 00:31:30,559
it quickly becomes annoying to change

824
00:31:30,559 --> 00:31:32,559
them using simple functions

825
00:31:32,559 --> 00:31:35,519
like the examples we've used so far and

826
00:31:35,519 --> 00:31:37,039
what if you want to pick palettes at

827
00:31:37,039 --> 00:31:38,000
random

828
00:31:38,000 --> 00:31:40,799
there has to be a better way fortunately

829
00:31:40,799 --> 00:31:42,480
there is

830
00:31:42,480 --> 00:31:44,480
take a look at our color waves with

831
00:31:44,480 --> 00:31:46,320
palettes sketch

832
00:31:46,320 --> 00:31:48,399
if we scroll down to the very bottom of

833
00:31:48,399 --> 00:31:50,080
the sketch we'll see

834
00:31:50,080 --> 00:31:53,360
our gradient palette playlist this is

835
00:31:53,360 --> 00:31:53,840
below

836
00:31:53,840 --> 00:31:56,880
all of our gradient palettes so scroll

837
00:31:56,880 --> 00:31:58,080
all the way down

838
00:31:58,080 --> 00:32:01,120
and towards the very end you'll see

839
00:32:01,120 --> 00:32:04,240
this line const t prog mem

840
00:32:04,240 --> 00:32:07,600
rgb gradient palette pointer g gradient

841
00:32:07,600 --> 00:32:09,200
palettes

842
00:32:09,200 --> 00:32:11,679
and what this is is this is an array

843
00:32:11,679 --> 00:32:12,880
that is holding

844
00:32:12,880 --> 00:32:16,320
all of our gradient palettes

845
00:32:16,320 --> 00:32:17,919
so all of the palettes that we've

846
00:32:17,919 --> 00:32:19,760
defined up here

847
00:32:19,760 --> 00:32:22,399
are in this playlist at the very bottom

848
00:32:22,399 --> 00:32:23,440
of the sketch

849
00:32:23,440 --> 00:32:26,000
we see a line that actually cleverly

850
00:32:26,000 --> 00:32:26,559
counts

851
00:32:26,559 --> 00:32:29,679
all of our playlist objects for us

852
00:32:29,679 --> 00:32:31,279
so that we don't have to worry about

853
00:32:31,279 --> 00:32:34,000
keeping track of how many we have

854
00:32:34,000 --> 00:32:36,080
if we jump to the top of the sketch

855
00:32:36,080 --> 00:32:37,840
we'll see how this works

856
00:32:37,840 --> 00:32:39,760
we'll see that we start our sketch by

857
00:32:39,760 --> 00:32:42,399
giving a forward declaration of an array

858
00:32:42,399 --> 00:32:43,279
of cpt

859
00:32:43,279 --> 00:32:45,919
city gradient palettes and a count of

860
00:32:45,919 --> 00:32:47,760
how many there are

861
00:32:47,760 --> 00:32:49,760
it also mentions that the color palette

862
00:32:49,760 --> 00:32:51,279
definitions are at the bottom of the

863
00:32:51,279 --> 00:32:53,679
file which is what we just saw

864
00:32:53,679 --> 00:32:58,080
we then see that below this

865
00:32:58,080 --> 00:32:59,919
that we have a variable that's storing

866
00:32:59,919 --> 00:33:01,679
the current palette number

867
00:33:01,679 --> 00:33:04,320
for our playlist and then we see two

868
00:33:04,320 --> 00:33:05,120
more lines

869
00:33:05,120 --> 00:33:07,360
current palette and target palette which

870
00:33:07,360 --> 00:33:10,720
are familiar to us so in short

871
00:33:10,720 --> 00:33:13,360
you've got an array of palettes a g

872
00:33:13,360 --> 00:33:14,799
palette number variable

873
00:33:14,799 --> 00:33:17,120
that holds which palette you're on and

874
00:33:17,120 --> 00:33:19,120
the usual current palette and target

875
00:33:19,120 --> 00:33:21,039
palette variables

876
00:33:21,039 --> 00:33:22,960
then to change palettes all you've got

877
00:33:22,960 --> 00:33:24,720
to do is

878
00:33:24,720 --> 00:33:26,720
put this in your loop the every n

879
00:33:26,720 --> 00:33:28,240
seconds transition

880
00:33:28,240 --> 00:33:31,360
which we've seen before you might wonder

881
00:33:31,360 --> 00:33:34,080
in the every n seconds function what

882
00:33:34,080 --> 00:33:34,480
this

883
00:33:34,480 --> 00:33:38,480
add mod 8 is doing in here what the add

884
00:33:38,480 --> 00:33:40,080
mod 8 function does

885
00:33:40,080 --> 00:33:42,240
is it adds one to the current palette

886
00:33:42,240 --> 00:33:44,480
number rolling over if it ever

887
00:33:44,480 --> 00:33:47,039
exceeds the total number of palettes

888
00:33:47,039 --> 00:33:49,600
this function can be super useful

889
00:33:49,600 --> 00:33:52,640
so remember it same with every n

890
00:33:52,640 --> 00:33:54,720
seconds which is a lovely companion to

891
00:33:54,720 --> 00:33:56,720
the every n milliseconds that we've seen

892
00:33:56,720 --> 00:33:58,799
before

893
00:33:58,799 --> 00:34:00,960
then the last line above just sets the

894
00:34:00,960 --> 00:34:03,120
target palette to the new palette number

895
00:34:03,120 --> 00:34:06,000
in the array

896
00:34:06,000 --> 00:34:08,320
and then we use n blend palette towards

897
00:34:08,320 --> 00:34:11,520
palette to take care of the rest

898
00:34:11,520 --> 00:34:13,679
i use these palette playlists constantly

899
00:34:13,679 --> 00:34:14,879
because once you have more than a

900
00:34:14,879 --> 00:34:16,800
handful of palettes it gets annoying to

901
00:34:16,800 --> 00:34:18,800
refer to them by name

902
00:34:18,800 --> 00:34:20,879
this way you've only ever got one array

903
00:34:20,879 --> 00:34:22,239
name to deal with

904
00:34:22,239 --> 00:34:23,918
if you really want to name them you can

905
00:34:23,918 --> 00:34:25,839
always use the define to give a shorter

906
00:34:25,839 --> 00:34:27,599
name to the array index and where they

907
00:34:27,599 --> 00:34:28,320
live

908
00:34:28,320 --> 00:34:30,320
and then you can access them more easily

909
00:34:30,320 --> 00:34:32,839
while still retaining the benefits of a

910
00:34:32,839 --> 00:34:34,320
playlist

911
00:34:34,320 --> 00:34:36,800
if you're wondering what using a define

912
00:34:36,800 --> 00:34:38,399
and then assigning a name to your

913
00:34:38,399 --> 00:34:40,000
palette might look like

914
00:34:40,000 --> 00:34:41,679
here's an example of how this might

915
00:34:41,679 --> 00:34:48,480
appear in code

916
00:34:48,480 --> 00:34:50,879
if you wanted to choose a random palette

917
00:34:50,879 --> 00:34:53,760
you can use the random function

918
00:34:53,760 --> 00:34:56,000
you would change your code to look as

919
00:34:56,000 --> 00:34:59,359
follows under target palette equals

920
00:34:59,359 --> 00:35:01,040
you would still select from gradient

921
00:35:01,040 --> 00:35:02,880
palettes but this time you would use the

922
00:35:02,880 --> 00:35:04,480
random function

923
00:35:04,480 --> 00:35:07,040
the random function has two arguments

924
00:35:07,040 --> 00:35:07,599
the first

925
00:35:07,599 --> 00:35:09,920
is a starting value and the second is

926
00:35:09,920 --> 00:35:11,680
the ending value

927
00:35:11,680 --> 00:35:13,839
random will select a value between these

928
00:35:13,839 --> 00:35:16,720
two so you'll want to start at 0 and end

929
00:35:16,720 --> 00:35:19,920
it at your gradient pellet count

930
00:35:19,920 --> 00:35:21,839
give this a try and see if you can

931
00:35:21,839 --> 00:35:25,119
generate a random palette

932
00:35:25,119 --> 00:35:28,880
open up the sketch to timer

933
00:35:28,880 --> 00:35:30,800
earlier we promised to show you another

934
00:35:30,800 --> 00:35:33,359
way to do non-blocking timers

935
00:35:33,359 --> 00:35:35,680
in addition to using every n seconds and

936
00:35:35,680 --> 00:35:37,440
every n milliseconds

937
00:35:37,440 --> 00:35:39,440
i like this timing technique because

938
00:35:39,440 --> 00:35:41,359
it's very easy to change your timing on

939
00:35:41,359 --> 00:35:42,880
the fly

940
00:35:42,880 --> 00:35:45,440
i usually call these millies timers

941
00:35:45,440 --> 00:35:47,680
since they use arduino's millis function

942
00:35:47,680 --> 00:35:49,280
for time keeping

943
00:35:49,280 --> 00:35:51,839
if we open up the arduino reference for

944
00:35:51,839 --> 00:35:53,119
millies

945
00:35:53,119 --> 00:35:56,000
we'll see more information first we'll

946
00:35:56,000 --> 00:35:56,400
see

947
00:35:56,400 --> 00:35:58,400
that millies is a function and it

948
00:35:58,400 --> 00:36:00,720
returns the number of milliseconds

949
00:36:00,720 --> 00:36:03,040
that have passed since the arduino board

950
00:36:03,040 --> 00:36:05,760
began running the current program

951
00:36:05,760 --> 00:36:08,079
this number it says will overflow or go

952
00:36:08,079 --> 00:36:08,960
back to zero

953
00:36:08,960 --> 00:36:11,680
after approximately 50 days so the

954
00:36:11,680 --> 00:36:13,440
longest period of time we can leave

955
00:36:13,440 --> 00:36:14,320
something running

956
00:36:14,320 --> 00:36:17,200
and still keep track is 50 days there

957
00:36:17,200 --> 00:36:18,960
are solutions for this

958
00:36:18,960 --> 00:36:20,480
but we won't be getting into those at

959
00:36:20,480 --> 00:36:23,200
this time we'll also see some example

960
00:36:23,200 --> 00:36:26,480
code that uses millis in this

961
00:36:26,480 --> 00:36:30,160
we have an unsigned long that's time

962
00:36:30,160 --> 00:36:33,200
then we print out the time in millies

963
00:36:33,200 --> 00:36:35,119
you can try this sketch if you want to

964
00:36:35,119 --> 00:36:37,200
see more about millies and understand

965
00:36:37,200 --> 00:36:39,119
how it works

966
00:36:39,119 --> 00:36:41,520
but as you can probably guess we can use

967
00:36:41,520 --> 00:36:44,240
this as a way to keep track of time

968
00:36:44,240 --> 00:36:46,240
and to also program our lighting

969
00:36:46,240 --> 00:36:48,960
according to how much time has passed

970
00:36:48,960 --> 00:36:52,560
we can do this by creating a timer

971
00:36:52,560 --> 00:36:54,480
here i've added serial print line

972
00:36:54,480 --> 00:36:56,800
statements to update the timer

973
00:36:56,800 --> 00:36:59,520
when it's time and also to print out

974
00:36:59,520 --> 00:37:00,400
millies

975
00:37:00,400 --> 00:37:02,480
and lighting millies so that we can see

976
00:37:02,480 --> 00:37:04,240
their values

977
00:37:04,240 --> 00:37:06,240
if i upload this sketch and then go to

978
00:37:06,240 --> 00:37:09,200
serial monitor

979
00:37:09,200 --> 00:37:12,160
i can see that every 20 milliseconds

980
00:37:12,160 --> 00:37:13,920
it's updating the timer

981
00:37:13,920 --> 00:37:16,320
and where it says its time is where it's

982
00:37:16,320 --> 00:37:19,359
updating our lighting algorithm

983
00:37:19,359 --> 00:37:21,839
and then we also see a continuous count

984
00:37:21,839 --> 00:37:23,119
of millies

985
00:37:23,119 --> 00:37:26,880
that's happening every 20 milliseconds

986
00:37:26,880 --> 00:37:29,839
as a challenge try taking any fast led

987
00:37:29,839 --> 00:37:30,480
sketch

988
00:37:30,480 --> 00:37:33,920
that uses a delay and instead

989
00:37:33,920 --> 00:37:37,119
try converting it to use a timer

990
00:37:37,119 --> 00:37:38,880
at the heart of using a timer you're

991
00:37:38,880 --> 00:37:40,800
going to want to define your timer

992
00:37:40,800 --> 00:37:43,119
so in this case we have a light update

993
00:37:43,119 --> 00:37:44,320
timer

994
00:37:44,320 --> 00:37:46,960
again 20 to 30 milliseconds is usually a

995
00:37:46,960 --> 00:37:48,880
good amount of time

996
00:37:48,880 --> 00:37:50,320
next we're going to want to have a

997
00:37:50,320 --> 00:37:53,680
variable in order to hold the millis

998
00:37:53,680 --> 00:37:55,599
this has to be an unsigned long

999
00:37:55,599 --> 00:37:57,680
otherwise we can accidentally overflow

1000
00:37:57,680 --> 00:37:58,720
our variable

1001
00:37:58,720 --> 00:38:00,960
so in this case it's unsigned long

1002
00:38:00,960 --> 00:38:04,480
lighting millies

1003
00:38:04,480 --> 00:38:06,079
then we're going to want to have an if

1004
00:38:06,079 --> 00:38:07,599
statement and this

1005
00:38:07,599 --> 00:38:09,359
if statement is going to compare the

1006
00:38:09,359 --> 00:38:10,640
value of millis

1007
00:38:10,640 --> 00:38:12,400
which is the time that it has since we

1008
00:38:12,400 --> 00:38:14,240
started running our program

1009
00:38:14,240 --> 00:38:16,800
to our light update timer to see if it's

1010
00:38:16,800 --> 00:38:17,520
time

1011
00:38:17,520 --> 00:38:20,400
to update our algorithm we're going to

1012
00:38:20,400 --> 00:38:22,480
need the algorithm itself which what is

1013
00:38:22,480 --> 00:38:24,480
whatever is sending color data to our

1014
00:38:24,480 --> 00:38:25,599
lights

1015
00:38:25,599 --> 00:38:27,119
then we're going to want to have a fast

1016
00:38:27,119 --> 00:38:30,800
led show to display that color data

1017
00:38:30,800 --> 00:38:32,800
the last thing we want to do is to

1018
00:38:32,800 --> 00:38:35,839
update the value of lighting millies

1019
00:38:35,839 --> 00:38:39,359
to equal our current millis count

1020
00:38:39,359 --> 00:38:43,599
and also our light update timer count

1021
00:38:43,599 --> 00:38:45,520
i've put together a sketch called color

1022
00:38:45,520 --> 00:38:47,680
palette playground

1023
00:38:47,680 --> 00:38:51,520
let's review it together in the sketch

1024
00:38:51,520 --> 00:38:55,040
we use a timer you can see this

1025
00:38:55,040 --> 00:38:58,079
defined as light update time

1026
00:38:58,079 --> 00:39:01,440
and it's 10 milliseconds we also have an

1027
00:39:01,440 --> 00:39:02,400
unsigned long

1028
00:39:02,400 --> 00:39:06,480
to store our lighting millions value

1029
00:39:07,040 --> 00:39:10,320
then we also have a palette update timer

1030
00:39:10,320 --> 00:39:12,720
and another variable in order to store

1031
00:39:12,720 --> 00:39:15,759
our palette millies

1032
00:39:15,920 --> 00:39:17,839
then we have a definition of a few

1033
00:39:17,839 --> 00:39:20,799
gradient palettes

1034
00:39:23,040 --> 00:39:25,040
in our loop we see that we're changing

1035
00:39:25,040 --> 00:39:27,680
the palette periodically

1036
00:39:27,680 --> 00:39:30,240
and every n milliseconds we're blending

1037
00:39:30,240 --> 00:39:33,118
towards a palette

1038
00:39:33,200 --> 00:39:35,359
then we see our if statement to check if

1039
00:39:35,359 --> 00:39:36,400
the time has come

1040
00:39:36,400 --> 00:39:40,160
to update our lights we learned this by

1041
00:39:40,160 --> 00:39:41,280
comparing millies

1042
00:39:41,280 --> 00:39:44,560
to our lighting milease if it's time

1043
00:39:44,560 --> 00:39:47,040
then we want to run our loop for our

1044
00:39:47,040 --> 00:39:48,880
algorithm

1045
00:39:48,880 --> 00:39:50,960
our algorithm has a starting index of

1046
00:39:50,960 --> 00:39:53,599
zero and then it has a plus one

1047
00:39:53,599 --> 00:39:56,640
each time which is the motion speed then

1048
00:39:56,640 --> 00:39:58,480
we're filling the leds from palette

1049
00:39:58,480 --> 00:40:01,280
colors at the start index

1050
00:40:01,280 --> 00:40:05,040
and lastly we're updating our timer

1051
00:40:05,040 --> 00:40:08,079
the rest should look pretty familiar

1052
00:40:08,079 --> 00:40:10,720
try playing around with this sketch

1053
00:40:10,720 --> 00:40:12,319
using the tools that we've learned so

1054
00:40:12,319 --> 00:40:13,680
far

1055
00:40:13,680 --> 00:40:17,040
can you add a gradient to the palettes

1056
00:40:17,040 --> 00:40:19,119
can you define that gradient using a

1057
00:40:19,119 --> 00:40:21,040
variable

1058
00:40:21,040 --> 00:40:24,079
can you change the timing

1059
00:40:24,079 --> 00:40:27,119
try it out here we see one possible

1060
00:40:27,119 --> 00:40:27,680
result

1061
00:40:27,680 --> 00:40:31,520
of incorporating our new timer

1062
00:40:36,079 --> 00:40:37,760
at this point we've learned to draw

1063
00:40:37,760 --> 00:40:39,839
flowing color palettes across our strip

1064
00:40:39,839 --> 00:40:42,720
in two directions with variable speed

1065
00:40:42,720 --> 00:40:44,480
along with drawing them across the whole

1066
00:40:44,480 --> 00:40:46,720
strip at once

1067
00:40:46,720 --> 00:40:49,280
the demo 100 file in the fast led

1068
00:40:49,280 --> 00:40:50,720
examples directory

1069
00:40:50,720 --> 00:40:52,560
has some examples of simple patterns

1070
00:40:52,560 --> 00:40:55,200
that you can use in your animations

1071
00:40:55,200 --> 00:40:58,400
you can find it in arduino under file

1072
00:40:58,400 --> 00:41:01,599
examples fast led

1073
00:41:01,599 --> 00:41:06,720
demo reel 100. let's have a look at it

1074
00:41:06,720 --> 00:41:08,720
first off you'll notice that mark is

1075
00:41:08,720 --> 00:41:10,960
using an animation palette trick similar

1076
00:41:10,960 --> 00:41:12,720
to what we did earlier with the color

1077
00:41:12,720 --> 00:41:13,920
pellets

1078
00:41:13,920 --> 00:41:15,760
you can see this down below where it

1079
00:41:15,760 --> 00:41:17,920
says list of patterns to cycle through

1080
00:41:17,920 --> 00:41:20,640
each is defined as a separate function

1081
00:41:20,640 --> 00:41:22,000
so here we have

1082
00:41:22,000 --> 00:41:24,240
the following patterns rainbow rainbow

1083
00:41:24,240 --> 00:41:26,000
with glitter confetti

1084
00:41:26,000 --> 00:41:29,440
cylon juggle and bpm by now you should

1085
00:41:29,440 --> 00:41:30,800
get the idea here

1086
00:41:30,800 --> 00:41:34,720
the only confusing thing is this

1087
00:41:34,720 --> 00:41:37,599
type def void and then there's a pointer

1088
00:41:37,599 --> 00:41:41,599
to simple pattern list which is an array

1089
00:41:41,599 --> 00:41:43,680
what this is doing is creating a type

1090
00:41:43,680 --> 00:41:46,079
definition that equates to an array of

1091
00:41:46,079 --> 00:41:48,400
pointers to functions

1092
00:41:48,400 --> 00:41:50,640
it's a bit ugly but you can just copy

1093
00:41:50,640 --> 00:41:51,440
and paste it

1094
00:41:51,440 --> 00:41:53,599
anytime you need to create an array that

1095
00:41:53,599 --> 00:41:55,760
holds arduino functions

1096
00:41:55,760 --> 00:41:57,839
then you can use it the same way that we

1097
00:41:57,839 --> 00:41:59,200
used our palette array

1098
00:41:59,200 --> 00:42:02,000
by defining an array and the size of in

1099
00:42:02,000 --> 00:42:03,760
order to understand

1100
00:42:03,760 --> 00:42:05,839
what the size of the array is you can

1101
00:42:05,839 --> 00:42:08,319
see this on line 62 where we see

1102
00:42:08,319 --> 00:42:12,240
define array size a size of a

1103
00:42:12,240 --> 00:42:15,839
divided by size of a and then in

1104
00:42:15,839 --> 00:42:17,520
brackets we have a zero

1105
00:42:17,520 --> 00:42:19,520
this is also a little ugly but it's

1106
00:42:19,520 --> 00:42:21,599
necessary in order to step through each

1107
00:42:21,599 --> 00:42:22,240
of the array

1108
00:42:22,240 --> 00:42:25,280
of functions what this is saying is that

1109
00:42:25,280 --> 00:42:27,599
each function pointer is the size of the

1110
00:42:27,599 --> 00:42:28,400
array

1111
00:42:28,400 --> 00:42:30,880
divided by the size of the first element

1112
00:42:30,880 --> 00:42:32,640
in the array

1113
00:42:32,640 --> 00:42:35,119
once we've got this we can create a next

1114
00:42:35,119 --> 00:42:36,160
pattern function

1115
00:42:36,160 --> 00:42:39,200
which is shown below

1116
00:42:39,839 --> 00:42:41,920
in this next pattern function we're

1117
00:42:41,920 --> 00:42:43,920
adding 1 to the current pattern number

1118
00:42:43,920 --> 00:42:45,680
and then wrapping around

1119
00:42:45,680 --> 00:42:47,920
right at the end many of the animation

1120
00:42:47,920 --> 00:42:48,800
functions here

1121
00:42:48,800 --> 00:42:51,040
are pretty easy to understand especially

1122
00:42:51,040 --> 00:42:53,040
if you poke around with them

1123
00:42:53,040 --> 00:42:54,640
but i'd like to explain a couple of

1124
00:42:54,640 --> 00:42:56,480
things because they're useful when you

1125
00:42:56,480 --> 00:42:59,680
want to create your own animations

1126
00:42:59,680 --> 00:43:02,640
the first one is fade to black this is

1127
00:43:02,640 --> 00:43:04,560
an extremely useful function

1128
00:43:04,560 --> 00:43:08,240
that fades an leds array of num leds

1129
00:43:08,240 --> 00:43:11,440
by in this case 10 steps you can use

1130
00:43:11,440 --> 00:43:12,240
this to create

1131
00:43:12,240 --> 00:43:14,720
breathing effects starlight twinkles and

1132
00:43:14,720 --> 00:43:17,040
a million other fun led effects

1133
00:43:17,040 --> 00:43:20,000
but how to fade back up it's easy if

1134
00:43:20,000 --> 00:43:22,160
you're using hsb colors

1135
00:43:22,160 --> 00:43:25,200
can you think of how to do it

1136
00:43:25,200 --> 00:43:27,440
in answer to the previous question we

1137
00:43:27,440 --> 00:43:28,720
can use a fade

1138
00:43:28,720 --> 00:43:32,960
up loop by using a nested for loop

1139
00:43:32,960 --> 00:43:36,160
which we've seen before we'll want to

1140
00:43:36,160 --> 00:43:36,560
use

1141
00:43:36,560 --> 00:43:40,240
a maximize brightness function like so

1142
00:43:40,240 --> 00:43:42,000
i wrote this function quickly as an

1143
00:43:42,000 --> 00:43:44,480
example but the truth is that i didn't

1144
00:43:44,480 --> 00:43:45,520
really like it

1145
00:43:45,520 --> 00:43:47,839
because it has a fast led show and a

1146
00:43:47,839 --> 00:43:48,880
delay

1147
00:43:48,880 --> 00:43:51,760
inside of the animation loop like i

1148
00:43:51,760 --> 00:43:52,720
mentioned earlier

1149
00:43:52,720 --> 00:43:55,359
this is fine for demos and examples but

1150
00:43:55,359 --> 00:43:57,040
it's better to try to use millie's

1151
00:43:57,040 --> 00:43:57,760
timers

1152
00:43:57,760 --> 00:43:59,920
to ensure that you only run fast led

1153
00:43:59,920 --> 00:44:01,200
show once

1154
00:44:01,200 --> 00:44:03,200
and it's always best to avoid the delay

1155
00:44:03,200 --> 00:44:04,960
function

1156
00:44:04,960 --> 00:44:07,280
check out the demo reel 100 file in our

1157
00:44:07,280 --> 00:44:09,760
github for an example fade up function

1158
00:44:09,760 --> 00:44:11,119
that's a little more difficult to

1159
00:44:11,119 --> 00:44:13,119
understand but eliminates this

1160
00:44:13,119 --> 00:44:15,440
issue

1161
00:44:20,079 --> 00:44:22,720
in addition to using maximize brightness

1162
00:44:22,720 --> 00:44:24,000
or instead of

1163
00:44:24,000 --> 00:44:26,480
you could also use the brightness value

1164
00:44:26,480 --> 00:44:28,560
that we've seen in many of our sketches

1165
00:44:28,560 --> 00:44:31,440
including the demo reel this is set with

1166
00:44:31,440 --> 00:44:32,079
the function

1167
00:44:32,079 --> 00:44:35,280
fast led set brightness and then

1168
00:44:35,280 --> 00:44:37,760
is used with the brightness variable to

1169
00:44:37,760 --> 00:44:38,400
control

1170
00:44:38,400 --> 00:44:41,599
the master brightness another

1171
00:44:41,599 --> 00:44:44,079
interesting aspect that we see in both

1172
00:44:44,079 --> 00:44:44,880
cylon

1173
00:44:44,880 --> 00:44:48,560
and our bpm functions is

1174
00:44:48,560 --> 00:44:52,160
a beats sign you can see that

1175
00:44:52,160 --> 00:44:56,560
on line 102 of cylon

1176
00:44:57,280 --> 00:45:01,760
and also you can see it on line 111

1177
00:45:01,760 --> 00:45:04,800
of bpm and you might be wondering

1178
00:45:04,800 --> 00:45:07,040
what is this beats per minute or beats

1179
00:45:07,040 --> 00:45:08,800
sign what does that mean

1180
00:45:08,800 --> 00:45:12,240
in sign lan we see that our position

1181
00:45:12,240 --> 00:45:15,839
is being assigned to beat sign 16

1182
00:45:15,839 --> 00:45:18,880
and that has a 13 a 0 and a num leds

1183
00:45:18,880 --> 00:45:20,319
minus 1.

1184
00:45:20,319 --> 00:45:22,400
the best way to think of this and its 8

1185
00:45:22,400 --> 00:45:23,599
bit wave cousin

1186
00:45:23,599 --> 00:45:26,800
beat sign 8 which we see in

1187
00:45:26,800 --> 00:45:30,720
bpm is that it works like so

1188
00:45:30,720 --> 00:45:33,280
it gives a beats per minute a minimum

1189
00:45:33,280 --> 00:45:34,079
value

1190
00:45:34,079 --> 00:45:37,520
and then also a maximum value the beats

1191
00:45:37,520 --> 00:45:39,760
function creates a sine wave pattern

1192
00:45:39,760 --> 00:45:42,079
that runs from a minimum value to a

1193
00:45:42,079 --> 00:45:43,359
maximum value

1194
00:45:43,359 --> 00:45:45,760
and then returns to the minimum value

1195
00:45:45,760 --> 00:45:48,480
beats per minute times a minute

1196
00:45:48,480 --> 00:45:50,720
this is really useful because sine waves

1197
00:45:50,720 --> 00:45:53,040
tend to feel natural and alive when you

1198
00:45:53,040 --> 00:45:55,200
use them in animations

1199
00:45:55,200 --> 00:45:57,119
this example uses the sine wave to

1200
00:45:57,119 --> 00:45:58,960
determine the position of led

1201
00:45:58,960 --> 00:46:01,520
that's being lit but you can also use

1202
00:46:01,520 --> 00:46:03,440
sine waves to choose colors

1203
00:46:03,440 --> 00:46:05,680
or change animation speeds in other

1204
00:46:05,680 --> 00:46:07,119
parameters

1205
00:46:07,119 --> 00:46:08,880
playing around with these can create a

1206
00:46:08,880 --> 00:46:12,560
ton of cool animation effects

1207
00:46:12,800 --> 00:46:14,800
there are some other ways you can use

1208
00:46:14,800 --> 00:46:17,280
two not just sine waves

1209
00:46:17,280 --> 00:46:20,319
the functions tri-wave 8 square wave 8

1210
00:46:20,319 --> 00:46:23,359
quad wave 8 and cubic wave 8 take a

1211
00:46:23,359 --> 00:46:26,319
single internally increasing 8-bit value

1212
00:46:26,319 --> 00:46:28,640
and convert it to a wave of the given

1213
00:46:28,640 --> 00:46:29,520
shape

1214
00:46:29,520 --> 00:46:32,480
sawtooth square wave quad wave like a

1215
00:46:32,480 --> 00:46:34,480
sine wave but slightly more flat towards

1216
00:46:34,480 --> 00:46:35,359
the edges

1217
00:46:35,359 --> 00:46:37,680
and cubic wave like a sine wave but

1218
00:46:37,680 --> 00:46:39,280
significantly more flat towards the

1219
00:46:39,280 --> 00:46:40,720
edges

1220
00:46:40,720 --> 00:46:44,240
these functions work like so

1221
00:46:47,599 --> 00:46:49,839
what this does is give you a cubic wave

1222
00:46:49,839 --> 00:46:52,240
that you can then use to grab a chsv

1223
00:46:52,240 --> 00:46:53,520
color

1224
00:46:53,520 --> 00:46:55,920
you can use it to drive any 8-bit value

1225
00:46:55,920 --> 00:46:57,520
too like the rgb

1226
00:46:57,520 --> 00:47:00,240
components of a color however you can

1227
00:47:00,240 --> 00:47:02,000
use these waves to drive literally

1228
00:47:02,000 --> 00:47:06,400
any value using arduino's map function

1229
00:47:06,400 --> 00:47:09,920
what this says is here's a value index

1230
00:47:09,920 --> 00:47:12,480
which goes from 0 to 255.

1231
00:47:12,480 --> 00:47:14,640
please smoothly map it to an equivalent

1232
00:47:14,640 --> 00:47:15,839
value between

1233
00:47:15,839 --> 00:47:19,440
min spd and max spd then return

1234
00:47:19,440 --> 00:47:22,000
it here's a bit more on the map function

1235
00:47:22,000 --> 00:47:25,839
which is very useful

1236
00:47:29,200 --> 00:47:31,040
using it as above will give you a cubic

1237
00:47:31,040 --> 00:47:33,359
wave driven value that runs from 100 to

1238
00:47:33,359 --> 00:47:34,800
1000 and back

1239
00:47:34,800 --> 00:47:36,800
you can time how fast the wave moves by

1240
00:47:36,800 --> 00:47:38,000
using a millis timer

1241
00:47:38,000 --> 00:47:40,640
as we explained above check out cubic

1242
00:47:40,640 --> 00:47:43,119
color in our demo reel 100 file on

1243
00:47:43,119 --> 00:47:44,960
github for an animation example that

1244
00:47:44,960 --> 00:47:46,240
uses this technique

1245
00:47:46,240 --> 00:47:50,319
to drive color selection and animation

1246
00:47:50,839 --> 00:47:53,839
speed

1247
00:48:00,640 --> 00:48:02,559
one cool thing about this technique is

1248
00:48:02,559 --> 00:48:05,119
that the beat sign 16 and beat sign 8

1249
00:48:05,119 --> 00:48:07,200
functions can react badly if you change

1250
00:48:07,200 --> 00:48:08,720
their parameters while the wave is

1251
00:48:08,720 --> 00:48:09,599
running

1252
00:48:09,599 --> 00:48:11,520
for instance changing the min value and

1253
00:48:11,520 --> 00:48:13,440
max value to create more variation in

1254
00:48:13,440 --> 00:48:15,040
your animations

1255
00:48:15,040 --> 00:48:17,040
doing this can cause a visible hitch in

1256
00:48:17,040 --> 00:48:18,640
your animations

1257
00:48:18,640 --> 00:48:20,000
there's a trick you can use to get

1258
00:48:20,000 --> 00:48:22,559
around this basically changing your max

1259
00:48:22,559 --> 00:48:24,480
value when the wave is at the min

1260
00:48:24,480 --> 00:48:26,880
and your min when it's at the max but

1261
00:48:26,880 --> 00:48:28,079
there's an easier way

1262
00:48:28,079 --> 00:48:30,640
with the map function because we're

1263
00:48:30,640 --> 00:48:31,520
always getting

1264
00:48:31,520 --> 00:48:33,760
one consistent value from the wave and

1265
00:48:33,760 --> 00:48:35,760
then mapping it to another one

1266
00:48:35,760 --> 00:48:37,599
you can change the range you're mapping

1267
00:48:37,599 --> 00:48:39,040
to all day long

1268
00:48:39,040 --> 00:48:40,800
and your animations will look smooth as

1269
00:48:40,800 --> 00:48:43,440
butter no more worrying over complicated

1270
00:48:43,440 --> 00:48:44,240
for loops

1271
00:48:44,240 --> 00:48:46,000
to increment and decrement your

1272
00:48:46,000 --> 00:48:47,520
animation parameters

1273
00:48:47,520 --> 00:48:50,800
now you're in control at this point

1274
00:48:50,800 --> 00:48:52,319
let's step through the process of

1275
00:48:52,319 --> 00:48:55,520
creating our own animations from scratch

1276
00:48:55,520 --> 00:48:57,280
we'll be building two commonly used

1277
00:48:57,280 --> 00:48:59,200
animations a chase

1278
00:48:59,200 --> 00:49:01,040
where one light moves through a darkened

1279
00:49:01,040 --> 00:49:03,440
strip and a theater chase

1280
00:49:03,440 --> 00:49:06,240
the opposite where one dark pixel moves

1281
00:49:06,240 --> 00:49:08,400
through a lit strip

1282
00:49:08,400 --> 00:49:10,240
i like to start by thinking through

1283
00:49:10,240 --> 00:49:11,920
exactly what each pixel

1284
00:49:11,920 --> 00:49:15,119
needs to do when arduino boots up then i

1285
00:49:15,119 --> 00:49:16,319
put that code

1286
00:49:16,319 --> 00:49:18,800
in setup so that the strip always starts

1287
00:49:18,800 --> 00:49:20,559
where it needs to be

1288
00:49:20,559 --> 00:49:23,839
for a traditional chase leds 0 needs to

1289
00:49:23,839 --> 00:49:25,280
be set to a color

1290
00:49:25,280 --> 00:49:27,280
and the rest of the leds need to be set

1291
00:49:27,280 --> 00:49:28,720
to black

1292
00:49:28,720 --> 00:49:32,480
in this sketch to chase part 1

1293
00:49:32,480 --> 00:49:36,400
we've set up our basic led code

1294
00:49:36,400 --> 00:49:40,000
the includes defines in crgb leds num

1295
00:49:40,000 --> 00:49:41,920
leds lines at the top

1296
00:49:41,920 --> 00:49:44,960
of demo reel or color palette playground

1297
00:49:44,960 --> 00:49:46,880
and then we've added the following to

1298
00:49:46,880 --> 00:49:49,040
the setup as per usual

1299
00:49:49,040 --> 00:49:52,160
we're including fast led add leds and

1300
00:49:52,160 --> 00:49:53,920
we're setting the brightness

1301
00:49:53,920 --> 00:49:57,440
we're also using chsb color so we can

1302
00:49:57,440 --> 00:50:00,720
easily shift the colors of our pixels

1303
00:50:00,720 --> 00:50:03,200
to do this we need a huge variable to

1304
00:50:03,200 --> 00:50:04,640
hold this in

1305
00:50:04,640 --> 00:50:07,599
which we've called g-hue and we also

1306
00:50:07,599 --> 00:50:08,000
need

1307
00:50:08,000 --> 00:50:10,160
the position of the lip pixel in our

1308
00:50:10,160 --> 00:50:11,440
animation

1309
00:50:11,440 --> 00:50:15,200
which we've labeled as pos position

1310
00:50:15,200 --> 00:50:18,400
upload this sketch and see what happens

1311
00:50:18,400 --> 00:50:20,640
you should see that the first led is set

1312
00:50:20,640 --> 00:50:22,000
to red

1313
00:50:22,000 --> 00:50:23,520
note that there is nothing in the loop

1314
00:50:23,520 --> 00:50:26,400
function and yet our sketch still works

1315
00:50:26,400 --> 00:50:28,800
this is because programmable leds hold

1316
00:50:28,800 --> 00:50:29,760
their color value

1317
00:50:29,760 --> 00:50:32,160
once set until they are reset or until

1318
00:50:32,160 --> 00:50:34,880
power is removed

1319
00:50:34,880 --> 00:50:36,880
quick question what happens if we

1320
00:50:36,880 --> 00:50:38,960
reverse the order of the fill solid and

1321
00:50:38,960 --> 00:50:39,599
leds

1322
00:50:39,599 --> 00:50:42,880
0 equal chs-v lines

1323
00:50:42,880 --> 00:50:45,200
the answer is that the led 0 will get

1324
00:50:45,200 --> 00:50:46,240
set to red

1325
00:50:46,240 --> 00:50:48,559
but then the fill solid call will set it

1326
00:50:48,559 --> 00:50:50,319
back to black

1327
00:50:50,319 --> 00:50:52,480
because it all happens before fast led

1328
00:50:52,480 --> 00:50:53,440
show is called

1329
00:50:53,440 --> 00:50:56,720
you'll never even see the led turn on

1330
00:50:56,720 --> 00:50:59,119
this principle sequential operations

1331
00:50:59,119 --> 00:51:01,280
build up to a final set of colors

1332
00:51:01,280 --> 00:51:03,599
inside the leds array which are then

1333
00:51:03,599 --> 00:51:05,760
written out to the lights using fastly d

1334
00:51:05,760 --> 00:51:08,079
show is the basis for making lighting

1335
00:51:08,079 --> 00:51:11,040
algorithms in fast led

1336
00:51:11,040 --> 00:51:12,800
okay so now we've got our starting

1337
00:51:12,800 --> 00:51:14,480
condition that one

1338
00:51:14,480 --> 00:51:17,440
light is lit and the others are static

1339
00:51:17,440 --> 00:51:18,240
but how do we

1340
00:51:18,240 --> 00:51:20,240
move and clear our lights to create the

1341
00:51:20,240 --> 00:51:21,359
chase pattern

1342
00:51:21,359 --> 00:51:24,800
open up the sketch to chase part 2.

1343
00:51:24,800 --> 00:51:27,119
in this sketch we put our animation loop

1344
00:51:27,119 --> 00:51:28,319
inside of a function

1345
00:51:28,319 --> 00:51:32,079
called naive chase it's always a good

1346
00:51:32,079 --> 00:51:34,000
idea to put your animation loop inside

1347
00:51:34,000 --> 00:51:35,040
of a function

1348
00:51:35,040 --> 00:51:36,720
because it makes your code much more

1349
00:51:36,720 --> 00:51:38,720
flexible and readable

1350
00:51:38,720 --> 00:51:40,720
if you want to change out an animation

1351
00:51:40,720 --> 00:51:42,400
it's as easy as changing the function

1352
00:51:42,400 --> 00:51:42,880
call

1353
00:51:42,880 --> 00:51:45,040
in loop the obvious answer to our

1354
00:51:45,040 --> 00:51:47,040
question is to use a for loop with a

1355
00:51:47,040 --> 00:51:47,599
timer

1356
00:51:47,599 --> 00:51:50,640
like this so in this loop we have an if

1357
00:51:50,640 --> 00:51:52,319
statement and we're checking to see

1358
00:51:52,319 --> 00:51:54,400
if millies which is the amount of time

1359
00:51:54,400 --> 00:51:55,920
that's elapsed since we started our

1360
00:51:55,920 --> 00:51:56,880
program

1361
00:51:56,880 --> 00:52:00,000
is greater than lighting millis if it is

1362
00:52:00,000 --> 00:52:01,760
then we want to iterate through this for

1363
00:52:01,760 --> 00:52:03,839
loop

1364
00:52:03,839 --> 00:52:07,599
in this for loop what we're doing is

1365
00:52:07,599 --> 00:52:11,760
we're setting i to equal to the position

1366
00:52:11,760 --> 00:52:14,960
and then setting the led i equal to this

1367
00:52:14,960 --> 00:52:18,880
q or else we're setting it to black

1368
00:52:18,880 --> 00:52:21,920
then we're increasing the position if

1369
00:52:21,920 --> 00:52:22,720
the position

1370
00:52:22,720 --> 00:52:24,880
equals the number of leds then we're

1371
00:52:24,880 --> 00:52:28,480
resetting the position back to zero

1372
00:52:28,480 --> 00:52:30,079
then we're shifting the color for the

1373
00:52:30,079 --> 00:52:32,000
next time so that g-hue

1374
00:52:32,000 --> 00:52:34,720
increments then we're doing a fast led

1375
00:52:34,720 --> 00:52:36,640
show call

1376
00:52:36,640 --> 00:52:39,760
lastly we're updating our timer

1377
00:52:39,760 --> 00:52:41,839
then the only thing that goes into loop

1378
00:52:41,839 --> 00:52:44,559
is the call to our naive chase

1379
00:52:44,559 --> 00:52:46,960
upload this code and give it a try

1380
00:52:46,960 --> 00:52:48,559
there's nothing really wrong with this

1381
00:52:48,559 --> 00:52:50,480
approach it totally works

1382
00:52:50,480 --> 00:52:52,559
however i'll tell you a secret this kind

1383
00:52:52,559 --> 00:52:54,559
of animation is inefficient

1384
00:52:54,559 --> 00:52:56,640
you won't notice with 10 leds but when

1385
00:52:56,640 --> 00:52:59,040
you have a room full of 1500 leds you

1386
00:52:59,040 --> 00:53:00,720
may really notice

1387
00:53:00,720 --> 00:53:02,319
the solution is to rethink our

1388
00:53:02,319 --> 00:53:03,920
algorithms to avoid

1389
00:53:03,920 --> 00:53:06,559
for loops when possible the exceptions

1390
00:53:06,559 --> 00:53:07,839
are simple loops

1391
00:53:07,839 --> 00:53:09,680
which step through the leds to set

1392
00:53:09,680 --> 00:53:11,280
colors such as in

1393
00:53:11,280 --> 00:53:13,839
demo reel 100s cubic color or color

1394
00:53:13,839 --> 00:53:14,400
pellets

1395
00:53:14,400 --> 00:53:16,800
fill leds from palette colors there's

1396
00:53:16,800 --> 00:53:18,480
not really a more efficient way to make

1397
00:53:18,480 --> 00:53:20,160
those kinds of loops

1398
00:53:20,160 --> 00:53:21,839
but whenever you've got a position to

1399
00:53:21,839 --> 00:53:24,319
keep track of the technique used in demo

1400
00:53:24,319 --> 00:53:25,200
reel 100

1401
00:53:25,200 --> 00:53:28,240
cylon or juggling functions is better

1402
00:53:28,240 --> 00:53:30,319
in short think of what you need to do to

1403
00:53:30,319 --> 00:53:31,839
your position at each step

1404
00:53:31,839 --> 00:53:34,000
through your loop along with what you

1405
00:53:34,000 --> 00:53:36,400
need to do to the other leds as related

1406
00:53:36,400 --> 00:53:37,599
to that position

1407
00:53:37,599 --> 00:53:39,359
then you can try to eliminate the for

1408
00:53:39,359 --> 00:53:41,440
loop in this case what's the minimum

1409
00:53:41,440 --> 00:53:42,480
thing we need to do

1410
00:53:42,480 --> 00:53:44,400
every time through the loop starting

1411
00:53:44,400 --> 00:53:47,040
from position and setup

1412
00:53:47,040 --> 00:53:48,880
well we need to light the led at

1413
00:53:48,880 --> 00:53:50,559
position right

1414
00:53:50,559 --> 00:53:52,319
and we need to black out all the other

1415
00:53:52,319 --> 00:53:55,119
leds so that it's always the only one

1416
00:53:55,119 --> 00:53:57,359
lit but here's the trick

1417
00:53:57,359 --> 00:53:59,359
we know that there's only one led which

1418
00:53:59,359 --> 00:54:00,800
was lit last time

1419
00:54:00,800 --> 00:54:03,280
we know which one it was it's the led

1420
00:54:03,280 --> 00:54:05,440
before our position or position

1421
00:54:05,440 --> 00:54:08,480
-1 the only thing we need to remember

1422
00:54:08,480 --> 00:54:10,240
is that we can't access positions

1423
00:54:10,240 --> 00:54:11,680
outside our array

1424
00:54:11,680 --> 00:54:13,359
which means that there's a special case

1425
00:54:13,359 --> 00:54:15,200
when the position is zero

1426
00:54:15,200 --> 00:54:17,200
then we need to clear the last led in

1427
00:54:17,200 --> 00:54:18,880
the array instead of clearing a

1428
00:54:18,880 --> 00:54:22,000
non-existent pixel at leds minus one

1429
00:54:22,000 --> 00:54:24,240
if we revise our algorithm it will look

1430
00:54:24,240 --> 00:54:25,920
more like this

1431
00:54:25,920 --> 00:54:29,599
open up to chase smarterchase

1432
00:54:29,599 --> 00:54:32,079
here we have our smarter chase and what

1433
00:54:32,079 --> 00:54:33,119
we're doing

1434
00:54:33,119 --> 00:54:35,119
is that we're clearing the position

1435
00:54:35,119 --> 00:54:36,799
minus one

1436
00:54:36,799 --> 00:54:40,400
if the position is less than zero

1437
00:54:40,400 --> 00:54:42,559
believe it or not this one change makes

1438
00:54:42,559 --> 00:54:43,599
our algorithm run

1439
00:54:43,599 --> 00:54:46,079
almost 10 times faster because we've

1440
00:54:46,079 --> 00:54:47,520
replaced a for loop

1441
00:54:47,520 --> 00:54:49,760
with 10 iterations with just one

1442
00:54:49,760 --> 00:54:51,680
iteration that does a similar amount of

1443
00:54:51,680 --> 00:54:53,520
work

1444
00:54:53,520 --> 00:54:55,520
like i said above you won't notice this

1445
00:54:55,520 --> 00:54:58,000
when working with a few leds

1446
00:54:58,000 --> 00:54:59,760
so if this way of thinking drives you

1447
00:54:59,760 --> 00:55:01,839
nuts don't worry about it

1448
00:55:01,839 --> 00:55:03,440
but i think you'll really benefit from

1449
00:55:03,440 --> 00:55:05,520
learning to convert for loop animations

1450
00:55:05,520 --> 00:55:07,359
to single iteration animations

1451
00:55:07,359 --> 00:55:11,680
when possible one last tip

1452
00:55:11,680 --> 00:55:13,839
be sure to lean on fast led's built-in

1453
00:55:13,839 --> 00:55:14,799
functions

1454
00:55:14,799 --> 00:55:16,640
they're built to be super efficient and

1455
00:55:16,640 --> 00:55:18,480
fast and they take care of a lot of

1456
00:55:18,480 --> 00:55:20,319
things you need to do on a daily basis

1457
00:55:20,319 --> 00:55:22,000
with fast led

1458
00:55:22,000 --> 00:55:24,319
the truth is there's a super easy way to

1459
00:55:24,319 --> 00:55:25,760
achieve this effect

1460
00:55:25,760 --> 00:55:28,000
we can use fade to black by to take care

1461
00:55:28,000 --> 00:55:30,720
of clearing away the leds

1462
00:55:30,720 --> 00:55:33,280
you can find this in two chase smartest

1463
00:55:33,280 --> 00:55:34,640
chase

1464
00:55:34,640 --> 00:55:36,640
there's a reason i used fade to black

1465
00:55:36,640 --> 00:55:39,040
rather than fill solid for this

1466
00:55:39,040 --> 00:55:41,520
if you tune your fade by value along

1467
00:55:41,520 --> 00:55:43,119
with your update speed

1468
00:55:43,119 --> 00:55:45,599
you can create a cool fading trail that

1469
00:55:45,599 --> 00:55:49,839
follows your lit led

1470
00:55:52,480 --> 00:55:54,880
or alter the algorithm's effect entirely

1471
00:55:54,880 --> 00:55:56,480
so that it's more like a wave of

1472
00:55:56,480 --> 00:56:00,000
brightness that moves through a lit

1473
00:56:00,839 --> 00:56:03,839
strip

1474
00:56:03,839 --> 00:56:06,160
the trail effect is tough to spot on

1475
00:56:06,160 --> 00:56:07,520
only 10 leds

1476
00:56:07,520 --> 00:56:09,760
but it looks especially neat on a long

1477
00:56:09,760 --> 00:56:10,799
strip

1478
00:56:10,799 --> 00:56:12,400
more like a comet that sweeps through

1479
00:56:12,400 --> 00:56:14,240
the strip rather than a single moving

1480
00:56:14,240 --> 00:56:15,440
led

1481
00:56:15,440 --> 00:56:17,280
you can see all of these different

1482
00:56:17,280 --> 00:56:19,200
iterations of chases

1483
00:56:19,200 --> 00:56:21,839
in the custom algorithm hello world file

1484
00:56:21,839 --> 00:56:23,680
in order to compare them

1485
00:56:23,680 --> 00:56:25,520
in this example we see our brightness

1486
00:56:25,520 --> 00:56:31,839
values controlled by a wave chase

1487
00:56:34,079 --> 00:56:35,920
in this example we can see the trail

1488
00:56:35,920 --> 00:56:44,000
that i was speaking of earlier

1489
00:56:44,000 --> 00:56:46,400
one fun thing to try is to use a wave

1490
00:56:46,400 --> 00:56:48,880
whether through beat sign 16 or wave 8

1491
00:56:48,880 --> 00:56:49,760
functions

1492
00:56:49,760 --> 00:56:52,000
to drive your fade value then you'll get

1493
00:56:52,000 --> 00:56:53,839
a fade that constantly changes

1494
00:56:53,839 --> 00:56:58,640
like in this example

1495
00:56:58,640 --> 00:57:00,880
when i make algorithms the last step is

1496
00:57:00,880 --> 00:57:02,319
often throwing in some evolving

1497
00:57:02,319 --> 00:57:03,680
behaviors like this

1498
00:57:03,680 --> 00:57:05,599
so that the animation parameters i've

1499
00:57:05,599 --> 00:57:08,240
already decided on change over time

1500
00:57:08,240 --> 00:57:09,760
you might notice that i did this with

1501
00:57:09,760 --> 00:57:12,240
the hue on the finished algorithm

1502
00:57:12,240 --> 00:57:15,440
also using a different value for the bpm

1503
00:57:15,440 --> 00:57:17,200
doing this ensures that the color and

1504
00:57:17,200 --> 00:57:19,359
fade parameters don't always match up

1505
00:57:19,359 --> 00:57:20,799
which means our light pattern is

1506
00:57:20,799 --> 00:57:22,480
constantly changing

1507
00:57:22,480 --> 00:57:24,559
the human eye adapts to exact patterns

1508
00:57:24,559 --> 00:57:26,720
quickly if there's a repeating pattern

1509
00:57:26,720 --> 00:57:28,480
we tend to look at an led strip for a

1510
00:57:28,480 --> 00:57:30,160
minute or two and then think

1511
00:57:30,160 --> 00:57:32,799
oh i see what the strip does but

1512
00:57:32,799 --> 00:57:34,720
patterns that don't quite repeat or are

1513
00:57:34,720 --> 00:57:36,799
full of variations as they repeat

1514
00:57:36,799 --> 00:57:39,359
hold the eye they fascinate and make us

1515
00:57:39,359 --> 00:57:40,480
wonder

1516
00:57:40,480 --> 00:57:42,079
and that's the goal i always have with

1517
00:57:42,079 --> 00:57:44,079
led lighting for homework

1518
00:57:44,079 --> 00:57:45,760
try mixing and matching the techniques

1519
00:57:45,760 --> 00:57:47,520
we've learned so far to create your own

1520
00:57:47,520 --> 00:57:49,440
evolving light animations

1521
00:57:49,440 --> 00:57:51,359
as a bonus challenge can you figure out

1522
00:57:51,359 --> 00:57:52,480
how to combine

1523
00:57:52,480 --> 00:57:55,119
color palette style animations with demo

1524
00:57:55,119 --> 00:57:56,799
reel style animations

1525
00:57:56,799 --> 00:57:58,960
in the same file choosing a random

1526
00:57:58,960 --> 00:58:01,440
animation every n seconds

1527
00:58:01,440 --> 00:58:04,000
give it a try stay tuned for next time

1528
00:58:04,000 --> 00:58:05,760
we'll learn how to connect our animation

1529
00:58:05,760 --> 00:58:07,599
parameters to the inputs on the circuit

1530
00:58:07,599 --> 00:58:08,480
playground

1531
00:58:08,480 --> 00:58:10,400
so that your lighting can truly react to

1532
00:58:10,400 --> 00:58:11,920
the environment

1533
00:58:11,920 --> 00:58:19,200
see you next time

