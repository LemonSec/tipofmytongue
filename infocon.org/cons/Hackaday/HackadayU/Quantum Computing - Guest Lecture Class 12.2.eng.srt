1
00:00:00,000 --> 00:00:08,160
[Music]

2
00:00:08,160 --> 00:00:09,599
welcome everyone

3
00:00:09,599 --> 00:00:12,799
thank you for joining this is our 22nd

4
00:00:12,799 --> 00:00:15,519
session at hackaday quantum computing

5
00:00:15,519 --> 00:00:18,080
so two weeks ago we had our first guest

6
00:00:18,080 --> 00:00:19,039
lecture

7
00:00:19,039 --> 00:00:21,439
today we have another guest lecture i

8
00:00:21,439 --> 00:00:22,960
will introduce you

9
00:00:22,960 --> 00:00:26,000
ralph in a little bit before we go into

10
00:00:26,000 --> 00:00:28,080
that just a reminder that

11
00:00:28,080 --> 00:00:31,039
all of the class materials are on

12
00:00:31,039 --> 00:00:32,320
hackaday

13
00:00:32,320 --> 00:00:34,960
in the quantum computing through comics

14
00:00:34,960 --> 00:00:36,320
course

15
00:00:36,320 --> 00:00:38,800
if you search in hackaday.org you can

16
00:00:38,800 --> 00:00:39,840
find it

17
00:00:39,840 --> 00:00:42,000
and usually we spend 30 minutes to an

18
00:00:42,000 --> 00:00:44,719
hour on sunday on one concept

19
00:00:44,719 --> 00:00:46,480
and it could be theoretical it could be

20
00:00:46,480 --> 00:00:50,000
on hardware or programming

21
00:00:50,160 --> 00:00:52,480
we also have been using the q shock

22
00:00:52,480 --> 00:00:54,559
documentation from microsoft and quantum

23
00:00:54,559 --> 00:00:56,640
coders as our exercises

24
00:00:56,640 --> 00:00:59,520
if you look at some previous classes

25
00:00:59,520 --> 00:01:00,399
you'll find

26
00:01:00,399 --> 00:01:04,080
the materials and some classes involve

27
00:01:04,080 --> 00:01:05,438
coding

28
00:01:05,438 --> 00:01:09,600
so as i mentioned

29
00:01:09,600 --> 00:01:13,119
earlier we have been we just started our

30
00:01:13,119 --> 00:01:14,640
guest lectures

31
00:01:14,640 --> 00:01:17,280
so last week uh we had to change

32
00:01:17,280 --> 00:01:19,200
schedule for professor chris

33
00:01:19,200 --> 00:01:22,400
fury but today we are very

34
00:01:22,400 --> 00:01:25,119
lucky to have ralph here joining from

35
00:01:25,119 --> 00:01:26,240
the q shark

36
00:01:26,240 --> 00:01:29,520
community and we have all these great

37
00:01:29,520 --> 00:01:30,320
lineups

38
00:01:30,320 --> 00:01:33,600
in the next few weeks uh before

39
00:01:33,600 --> 00:01:36,400
we uh before i introduce ralph i also

40
00:01:36,400 --> 00:01:37,280
wanted to

41
00:01:37,280 --> 00:01:40,320
remind everyone that we have a lot of

42
00:01:40,320 --> 00:01:41,520
learning materials

43
00:01:41,520 --> 00:01:44,399
and i like to show people this uh

44
00:01:44,399 --> 00:01:46,799
community that is building the ecosystem

45
00:01:46,799 --> 00:01:47,680
together

46
00:01:47,680 --> 00:01:50,399
so a lot of us in this class are curious

47
00:01:50,399 --> 00:01:51,520
hobbyists

48
00:01:51,520 --> 00:01:53,759
but we have a lot of material that's out

49
00:01:53,759 --> 00:01:54,960
there that is

50
00:01:54,960 --> 00:01:58,479
available for you to upscale upgrade

51
00:01:58,479 --> 00:02:02,320
your skills so i want to

52
00:02:02,320 --> 00:02:06,000
point people to the new ms learn modules

53
00:02:06,000 --> 00:02:08,318
we launched this a while back with two

54
00:02:08,318 --> 00:02:09,280
modules

55
00:02:09,280 --> 00:02:12,319
and at microsoft ignite we just

56
00:02:12,319 --> 00:02:14,959
launched another two modules so now we

57
00:02:14,959 --> 00:02:16,400
have a learning path of

58
00:02:16,400 --> 00:02:19,599
four modules the first one is to help

59
00:02:19,599 --> 00:02:20,720
you get started with

60
00:02:20,720 --> 00:02:23,920
coding q sharp but if you need some

61
00:02:23,920 --> 00:02:26,400
quantum concepts you can also take a

62
00:02:26,400 --> 00:02:28,000
module on that

63
00:02:28,000 --> 00:02:31,280
then we have a more deeper dive

64
00:02:31,280 --> 00:02:33,840
algorithm module on google search and

65
00:02:33,840 --> 00:02:34,480
then

66
00:02:34,480 --> 00:02:37,040
there is also a module on solving

67
00:02:37,040 --> 00:02:38,720
optimization problems this is more

68
00:02:38,720 --> 00:02:39,680
theoretical

69
00:02:39,680 --> 00:02:42,640
so i will highly encourage you to go

70
00:02:42,640 --> 00:02:43,760
through all of these

71
00:02:43,760 --> 00:02:48,160
and i i am very eager to see more people

72
00:02:48,160 --> 00:02:50,959
jumping from the curious hobbies towards

73
00:02:50,959 --> 00:02:51,760
the more

74
00:02:51,760 --> 00:02:54,879
quantum professionals

75
00:02:54,879 --> 00:02:58,400
so i think ralph here is a great example

76
00:02:58,400 --> 00:03:02,080
of quantum developers and who

77
00:03:02,080 --> 00:03:05,280
have been making a lot of contribution

78
00:03:05,280 --> 00:03:08,400
professionally to the quantum community

79
00:03:08,400 --> 00:03:11,280
uh and also i uh want to thank people

80
00:03:11,280 --> 00:03:12,720
for buying my book

81
00:03:12,720 --> 00:03:15,760
the the content computing comics book

82
00:03:15,760 --> 00:03:19,920
now is available on amazon in 13 markets

83
00:03:19,920 --> 00:03:23,280
the best actually people

84
00:03:23,280 --> 00:03:25,760
people like the drawings but i think to

85
00:03:25,760 --> 00:03:26,720
get the best

86
00:03:26,720 --> 00:03:30,239
results actually is to watch

87
00:03:30,239 --> 00:03:34,720
the classes of the corresponding

88
00:03:34,720 --> 00:03:37,200
topic and on this side you can even take

89
00:03:37,200 --> 00:03:39,760
notes that's why i have this notes and

90
00:03:39,760 --> 00:03:42,319
empty pages for people to take notes

91
00:03:42,319 --> 00:03:43,920
while they walk through

92
00:03:43,920 --> 00:03:47,200
these topics so this

93
00:03:47,200 --> 00:03:50,000
would be what i think the best way of

94
00:03:50,000 --> 00:03:51,840
using the comics book

95
00:03:51,840 --> 00:03:56,000
okay so without furth further ado let's

96
00:03:56,000 --> 00:03:59,760
introduce ralph crossman uh

97
00:03:59,760 --> 00:04:03,120
i hope i pronounced my name

98
00:04:04,239 --> 00:04:07,680
thank you doesn't matter welcome to our

99
00:04:07,680 --> 00:04:08,239
class

100
00:04:08,239 --> 00:04:11,360
at hackaday on sunday

101
00:04:11,360 --> 00:04:14,400
ralph as i mentioned has been an active

102
00:04:14,400 --> 00:04:15,280
member of

103
00:04:15,280 --> 00:04:17,680
the q sharp community he actually

104
00:04:17,680 --> 00:04:18,478
organizes

105
00:04:18,478 --> 00:04:22,240
and manages it with dr sarah kaiser

106
00:04:22,240 --> 00:04:25,360
and the qsr community is an open source

107
00:04:25,360 --> 00:04:28,000
community that's

108
00:04:28,000 --> 00:04:31,280
driven by the community for open source

109
00:04:31,280 --> 00:04:33,120
projects and contributions

110
00:04:33,120 --> 00:04:36,479
to the libraries for q sharp language

111
00:04:36,479 --> 00:04:40,479
and rough is similar to a lot of us here

112
00:04:40,479 --> 00:04:43,120
and i will also show the q sharp

113
00:04:43,120 --> 00:04:45,360
community website here i pointed people

114
00:04:45,360 --> 00:04:47,199
to it some time ago

115
00:04:47,199 --> 00:04:50,479
uh also he's he's a hobbyist for a lot

116
00:04:50,479 --> 00:04:50,800
of

117
00:04:50,800 --> 00:04:53,360
interesting maker stuff and he has his

118
00:04:53,360 --> 00:04:54,840
makerspace

119
00:04:54,840 --> 00:04:58,880
uh yeah and

120
00:04:58,880 --> 00:05:02,080
today he is going to introduce to us the

121
00:05:02,080 --> 00:05:05,600
quad project qrtrip

122
00:05:05,600 --> 00:05:08,479
is a project that you can run on

123
00:05:08,479 --> 00:05:09,600
microsoft

124
00:05:09,600 --> 00:05:13,039
simulators using qferb and

125
00:05:13,039 --> 00:05:15,520
he's going to show us how we can work

126
00:05:15,520 --> 00:05:16,320
with it and

127
00:05:16,320 --> 00:05:19,360
how you can do your own programming on

128
00:05:19,360 --> 00:05:21,280
simulators

129
00:05:21,280 --> 00:05:24,000
especially with the hardware limitations

130
00:05:24,000 --> 00:05:25,680
at the moment

131
00:05:25,680 --> 00:05:29,199
um all of the recording will be posted

132
00:05:29,199 --> 00:05:30,320
very quickly

133
00:05:30,320 --> 00:05:32,880
after the class on both youtube and

134
00:05:32,880 --> 00:05:34,720
hackaday

135
00:05:34,720 --> 00:05:38,160
and also yeah just a reminder next week

136
00:05:38,160 --> 00:05:41,520
i will be speaking at zen 4 maker on

137
00:05:41,520 --> 00:05:43,440
google's algorithm so we won't have a

138
00:05:43,440 --> 00:05:45,120
class on october 4th

139
00:05:45,120 --> 00:05:47,680
so note the time change if you want to

140
00:05:47,680 --> 00:05:49,440
join that class you can

141
00:05:49,440 --> 00:05:52,639
go to zen 4 makers and then

142
00:05:52,639 --> 00:05:56,400
the week after we have dr maria shout

143
00:05:56,400 --> 00:05:59,120
talking about quantum machine learning

144
00:05:59,120 --> 00:05:59,440
so

145
00:05:59,440 --> 00:06:02,639
a lot to look forward to thank you

146
00:06:02,639 --> 00:06:06,319
ralph i will give the screen to you now

147
00:06:06,319 --> 00:06:09,919
thanks let's see if this works

148
00:06:10,240 --> 00:06:13,280
feat number two

149
00:06:15,440 --> 00:06:18,639
can you see the screen yes

150
00:06:18,639 --> 00:06:22,560
very good cool so hi everybody

151
00:06:22,560 --> 00:06:26,000
uh i'm rolf hausmann

152
00:06:26,000 --> 00:06:29,280
i'm talking for the uh like

153
00:06:29,280 --> 00:06:31,680
la kitty already introduced i'm a part

154
00:06:31,680 --> 00:06:33,199
and one of the maintainers from the q

155
00:06:33,199 --> 00:06:34,800
sharp committee

156
00:06:34,800 --> 00:06:36,880
in my daytime job i'm an enterprise

157
00:06:36,880 --> 00:06:38,479
security architect

158
00:06:38,479 --> 00:06:41,520
architect foreign multinational bank

159
00:06:41,520 --> 00:06:43,039
so normally i'm not allowed to talk a

160
00:06:43,039 --> 00:06:44,720
lot about those kind of things but in my

161
00:06:44,720 --> 00:06:45,600
private life

162
00:06:45,600 --> 00:06:48,560
i live in the netherlands i'm dutch i

163
00:06:48,560 --> 00:06:49,039
have

164
00:06:49,039 --> 00:06:51,280
i'm a dad and i'm really like to make

165
00:06:51,280 --> 00:06:52,800
and tinker with stuff

166
00:06:52,800 --> 00:06:56,160
and i'm a real big enthusiast of

167
00:06:56,160 --> 00:06:58,960
quantum computing and with all things

168
00:06:58,960 --> 00:06:59,360
that

169
00:06:59,360 --> 00:07:02,479
you really enjoy and really like to do

170
00:07:02,479 --> 00:07:04,960
when you're only alone you're only alone

171
00:07:04,960 --> 00:07:05,759
and you don't

172
00:07:05,759 --> 00:07:07,840
get together and do things and really

173
00:07:07,840 --> 00:07:09,520
get to talk about them

174
00:07:09,520 --> 00:07:13,360
so a while ago and it's to the 27th of

175
00:07:13,360 --> 00:07:14,479
april already i

176
00:07:14,479 --> 00:07:16,800
i had to look it up it's more than a

177
00:07:16,800 --> 00:07:18,160
year ago

178
00:07:18,160 --> 00:07:21,360
together with dr sara kaiser crazy for

179
00:07:21,360 --> 00:07:21,759
pie

180
00:07:21,759 --> 00:07:24,800
as we uh nicknamed her sometimes we

181
00:07:24,800 --> 00:07:26,080
together

182
00:07:26,080 --> 00:07:28,240
essentially set up a community for q

183
00:07:28,240 --> 00:07:29,280
sharp the

184
00:07:29,280 --> 00:07:31,599
quantum language you already know from

185
00:07:31,599 --> 00:07:33,199
microsoft

186
00:07:33,199 --> 00:07:36,800
and on this site we have we talk

187
00:07:36,800 --> 00:07:37,440
together

188
00:07:37,440 --> 00:07:39,599
we play together we have opportunities

189
00:07:39,599 --> 00:07:40,639
for block

190
00:07:40,639 --> 00:07:42,560
posts and people usually communicate a

191
00:07:42,560 --> 00:07:45,520
lot and in our open source community we

192
00:07:45,520 --> 00:07:47,360
also have our open source projects

193
00:07:47,360 --> 00:07:49,440
within which we collaborate together

194
00:07:49,440 --> 00:07:53,039
so we have two types of projects

195
00:07:53,039 --> 00:07:55,199
the first type is the real q sharp

196
00:07:55,199 --> 00:07:56,560
projects that

197
00:07:56,560 --> 00:07:59,280
are libraries and things to to to

198
00:07:59,280 --> 00:08:00,000
program for

199
00:08:00,000 --> 00:08:03,320
for example uh sarah together with

200
00:08:03,320 --> 00:08:04,800
[Music]

201
00:08:04,800 --> 00:08:07,919
olivia wrote the qram library which is a

202
00:08:07,919 --> 00:08:10,560
library you can use for q sharp

203
00:08:10,560 --> 00:08:14,080
to facilitate uh the the possible

204
00:08:14,080 --> 00:08:16,639
possibility of using essentially qram

205
00:08:16,639 --> 00:08:18,080
for machine learning

206
00:08:18,080 --> 00:08:21,440
uh sarah started the algorithm zoo

207
00:08:21,440 --> 00:08:24,800
which is a platform of re-implementing a

208
00:08:24,800 --> 00:08:25,680
lot of

209
00:08:25,680 --> 00:08:27,919
base algorithms algorithms everybody

210
00:08:27,919 --> 00:08:29,199
knows from the textbook

211
00:08:29,199 --> 00:08:31,599
and show and see how they look in the in

212
00:08:31,599 --> 00:08:34,479
the essentially in the q sharp language

213
00:08:34,479 --> 00:08:37,519
and uh where i'm mostly focused on and

214
00:08:37,519 --> 00:08:39,200
and what we also like to do is in

215
00:08:39,200 --> 00:08:41,120
essentially the tooling to make q sharp

216
00:08:41,120 --> 00:08:42,479
better and to be able

217
00:08:42,479 --> 00:08:45,839
to make better use of it and the tooling

218
00:08:45,839 --> 00:08:47,680
projects we have in that space is the q

219
00:08:47,680 --> 00:08:49,360
sharp integrations the

220
00:08:49,360 --> 00:08:52,720
chp simulator and q fill which

221
00:08:52,720 --> 00:08:54,640
is will be our latest addition a new

222
00:08:54,640 --> 00:08:57,040
project that we're starting

223
00:08:57,040 --> 00:08:58,800
for for our essentially our community

224
00:08:58,800 --> 00:09:00,320
and we invite everybody to

225
00:09:00,320 --> 00:09:02,080
essentially have around and think around

226
00:09:02,080 --> 00:09:03,920
with this

227
00:09:03,920 --> 00:09:07,519
so what do we do we have a slack channel

228
00:09:07,519 --> 00:09:10,000
in which we collaborate together have

229
00:09:10,000 --> 00:09:11,519
have fun have chats

230
00:09:11,519 --> 00:09:14,080
and we basically debug and and and play

231
00:09:14,080 --> 00:09:15,120
around together

232
00:09:15,120 --> 00:09:17,279
with our fancy u-sharp applications and

233
00:09:17,279 --> 00:09:18,399
the library

234
00:09:18,399 --> 00:09:20,800
and you can see this uh this is a real

235
00:09:20,800 --> 00:09:22,320
screenshot from essentially our

236
00:09:22,320 --> 00:09:24,080
conversation here you see for example

237
00:09:24,080 --> 00:09:25,600
amir as well

238
00:09:25,600 --> 00:09:26,959
there are a lot of people which are

239
00:09:26,959 --> 00:09:28,720
interested i really want to learn and

240
00:09:28,720 --> 00:09:29,920
once you have a problem

241
00:09:29,920 --> 00:09:31,680
people really want to debug and get into

242
00:09:31,680 --> 00:09:33,519
the nitty-gritty

243
00:09:33,519 --> 00:09:37,040
so in our community we now are starting

244
00:09:37,040 --> 00:09:37,839
a new project

245
00:09:37,839 --> 00:09:40,240
and that's project q thrill and that's

246
00:09:40,240 --> 00:09:42,240
what i want to talk about you

247
00:09:42,240 --> 00:09:45,440
what is it why do we need it and and why

248
00:09:45,440 --> 00:09:46,480
do we

249
00:09:46,480 --> 00:09:48,480
do we even need these kind of things and

250
00:09:48,480 --> 00:09:50,080
to explain what q3

251
00:09:50,080 --> 00:09:53,680
is that's that multi uh that ability to

252
00:09:53,680 --> 00:09:54,399
plug in

253
00:09:54,399 --> 00:09:57,839
multiple uh simulators into q sharp

254
00:09:57,839 --> 00:09:59,839
we also need to talk about our chp

255
00:09:59,839 --> 00:10:01,120
simulator which

256
00:10:01,120 --> 00:10:04,959
is essentially the same but using a more

257
00:10:04,959 --> 00:10:08,640
specific purpose attribution to it

258
00:10:08,640 --> 00:10:10,880
i will show you uh once we've talked you

259
00:10:10,880 --> 00:10:12,959
through on what it does and how it does

260
00:10:12,959 --> 00:10:15,760
i'm going to show you some some demos

261
00:10:15,760 --> 00:10:16,959
and

262
00:10:16,959 --> 00:10:19,120
of queue fill that one is a really early

263
00:10:19,120 --> 00:10:20,000
pog

264
00:10:20,000 --> 00:10:23,040
um we only got that one compiling only a

265
00:10:23,040 --> 00:10:25,279
few days uh only a day ago

266
00:10:25,279 --> 00:10:27,519
so let's hope that that one works and

267
00:10:27,519 --> 00:10:29,040
this is the first time it will run on

268
00:10:29,040 --> 00:10:29,920
mac so let's

269
00:10:29,920 --> 00:10:32,800
see if it works and then a call to

270
00:10:32,800 --> 00:10:34,160
action

271
00:10:34,160 --> 00:10:38,160
so what is q fill and and why would

272
00:10:38,160 --> 00:10:42,160
we need that well let's go back to that

273
00:10:42,160 --> 00:10:45,120
nice sheet that we are collaborating on

274
00:10:45,120 --> 00:10:46,880
some code

275
00:10:46,880 --> 00:10:48,880
this was during the period that we were

276
00:10:48,880 --> 00:10:51,360
developing the qram library so this was

277
00:10:51,360 --> 00:10:53,600
a very new opportunity where

278
00:10:53,600 --> 00:10:56,880
we we were looking at okay how can you

279
00:10:56,880 --> 00:10:59,120
make better use of qubits so that you

280
00:10:59,120 --> 00:11:00,320
have the ability

281
00:11:00,320 --> 00:11:02,800
to map to other points of data so that

282
00:11:02,800 --> 00:11:04,399
you can bring essentially for machine

283
00:11:04,399 --> 00:11:07,040
learning your data into your program

284
00:11:07,040 --> 00:11:10,079
and we were running in some small

285
00:11:10,079 --> 00:11:13,120
bugs and defects mostly interface

286
00:11:13,120 --> 00:11:16,000
algorithms and then amir said like hey

287
00:11:16,000 --> 00:11:16,880
you know what

288
00:11:16,880 --> 00:11:18,880
i'm just going to make a small export of

289
00:11:18,880 --> 00:11:20,160
this

290
00:11:20,160 --> 00:11:22,640
well this is what that small export

291
00:11:22,640 --> 00:11:24,000
looked like

292
00:11:24,000 --> 00:11:29,120
it was 32 of these pages and

293
00:11:29,120 --> 00:11:31,680
yeah if if if if you have worked with

294
00:11:31,680 --> 00:11:33,760
larger programs like the toy examples

295
00:11:33,760 --> 00:11:36,720
you can still draw out on one screen

296
00:11:36,720 --> 00:11:39,120
this one even if you have an 8k monitor

297
00:11:39,120 --> 00:11:40,079
i think you

298
00:11:40,079 --> 00:11:41,839
still would have to need some additional

299
00:11:41,839 --> 00:11:43,120
real estate on your la

300
00:11:43,120 --> 00:11:46,000
on your desktop um and we were looking

301
00:11:46,000 --> 00:11:47,839
at this and and we were trying to debut

302
00:11:47,839 --> 00:11:48,720
this and

303
00:11:48,720 --> 00:11:50,880
eventually olivia came around and he

304
00:11:50,880 --> 00:11:52,639
said like yeah oh yeah i just

305
00:11:52,639 --> 00:11:54,480
switched around one t-gate in this

306
00:11:54,480 --> 00:11:56,560
complete stack

307
00:11:56,560 --> 00:11:59,279
it is complete stack and yeah we fixed

308
00:11:59,279 --> 00:12:00,320
it now

309
00:12:00,320 --> 00:12:03,680
but as you can imagine as as if you are

310
00:12:03,680 --> 00:12:05,360
writing these kinds of programs in

311
00:12:05,360 --> 00:12:07,200
reality you are building these kinds of

312
00:12:07,200 --> 00:12:07,920
programs

313
00:12:07,920 --> 00:12:09,920
you need a better way of dealing with

314
00:12:09,920 --> 00:12:11,600
these

315
00:12:11,600 --> 00:12:13,839
so there are multiple options to deal

316
00:12:13,839 --> 00:12:14,800
with this i mean

317
00:12:14,800 --> 00:12:17,200
we could have really big power for

318
00:12:17,200 --> 00:12:18,720
quantum computers to run these

319
00:12:18,720 --> 00:12:19,760
algorithms

320
00:12:19,760 --> 00:12:22,079
well i think someone on the chat line is

321
00:12:22,079 --> 00:12:24,160
working on that

322
00:12:24,160 --> 00:12:25,839
we'll you could also have a big

323
00:12:25,839 --> 00:12:28,560
simulator uh with a huge amount of ram

324
00:12:28,560 --> 00:12:30,000
to be able to run these kinds of

325
00:12:30,000 --> 00:12:31,440
algorithms which

326
00:12:31,440 --> 00:12:34,160
yeah basically for a community is not

327
00:12:34,160 --> 00:12:35,680
really feasible

328
00:12:35,680 --> 00:12:38,160
so the path we are looking for and and

329
00:12:38,160 --> 00:12:39,360
why we are looking

330
00:12:39,360 --> 00:12:41,839
into these kind of things is to break

331
00:12:41,839 --> 00:12:44,320
essentially pieces of these codes up

332
00:12:44,320 --> 00:12:46,880
pieces of these of the code up and to be

333
00:12:46,880 --> 00:12:48,800
able to test them individually

334
00:12:48,800 --> 00:12:51,120
and run them on specific purpose

335
00:12:51,120 --> 00:12:53,120
simulators that are capable of running

336
00:12:53,120 --> 00:12:55,200
that specific piece of code

337
00:12:55,200 --> 00:12:59,519
so we can test them in more situations

338
00:12:59,519 --> 00:13:03,120
so how do we do that well the microsoft

339
00:13:03,120 --> 00:13:04,240
qdk stack

340
00:13:04,240 --> 00:13:06,639
which essentially gets shipped if you

341
00:13:06,639 --> 00:13:08,480
essentially download

342
00:13:08,480 --> 00:13:10,000
the q sharp project and you start

343
00:13:10,000 --> 00:13:11,920
playing around with it and a lot of you

344
00:13:11,920 --> 00:13:13,279
probably have

345
00:13:13,279 --> 00:13:16,000
they basically have four simulators

346
00:13:16,000 --> 00:13:17,440
already in the box

347
00:13:17,440 --> 00:13:19,839
there is the real full stage simulator

348
00:13:19,839 --> 00:13:20,720
which

349
00:13:20,720 --> 00:13:23,440
can handle all the uh can handle all the

350
00:13:23,440 --> 00:13:24,560
operations but

351
00:13:24,560 --> 00:13:26,639
that one if you start using more than

352
00:13:26,639 --> 00:13:27,600
for example

353
00:13:27,600 --> 00:13:30,639
30 qubits requires so much ram

354
00:13:30,639 --> 00:13:32,480
that you basically can't run on a normal

355
00:13:32,480 --> 00:13:34,000
machine anymore you need to scale

356
00:13:34,000 --> 00:13:36,000
out to for example azure quantum later

357
00:13:36,000 --> 00:13:39,199
on uh hosted service for us

358
00:13:39,199 --> 00:13:41,279
but if you're a problem that you wrote

359
00:13:41,279 --> 00:13:42,959
down and basically

360
00:13:42,959 --> 00:13:45,120
developed is small enough and only

361
00:13:45,120 --> 00:13:47,120
contains for example to foley gauge

362
00:13:47,120 --> 00:13:49,600
x and c naughts in there you're also

363
00:13:49,600 --> 00:13:50,320
able to

364
00:13:50,320 --> 00:13:54,000
use the tofoli simulator from microsoft

365
00:13:54,000 --> 00:13:56,639
that one can handle a lot more qubits

366
00:13:56,639 --> 00:13:57,120
but

367
00:13:57,120 --> 00:13:59,440
the downside of it is it can't handle

368
00:13:59,440 --> 00:14:01,279
things like hadamard gates or phase

369
00:14:01,279 --> 00:14:02,079
gates

370
00:14:02,079 --> 00:14:03,839
and it can only measure in the poly

371
00:14:03,839 --> 00:14:05,760
z-axis

372
00:14:05,760 --> 00:14:07,519
there are also some other simulators

373
00:14:07,519 --> 00:14:09,279
which are special purpose for things

374
00:14:09,279 --> 00:14:10,320
like resources and

375
00:14:10,320 --> 00:14:12,639
estimators and trace simulators but for

376
00:14:12,639 --> 00:14:13,680
our if we

377
00:14:13,680 --> 00:14:15,519
really are starting to test large

378
00:14:15,519 --> 00:14:17,360
applications when we start to

379
00:14:17,360 --> 00:14:20,240
really test algorithms yeah you need to

380
00:14:20,240 --> 00:14:22,399
be able to focus them out

381
00:14:22,399 --> 00:14:25,040
so these are quite useful how could you

382
00:14:25,040 --> 00:14:26,240
build your own

383
00:14:26,240 --> 00:14:30,000
well a while ago we had a community

384
00:14:30,000 --> 00:14:33,120
project called the chp simulator

385
00:14:33,120 --> 00:14:35,680
that's a simulator based on chp sub

386
00:14:35,680 --> 00:14:36,639
theory

387
00:14:36,639 --> 00:14:39,440
and that one can do hadamard the phase

388
00:14:39,440 --> 00:14:41,279
gate and the c naught

389
00:14:41,279 --> 00:14:44,079
in and because of that combination also

390
00:14:44,079 --> 00:14:47,040
the power x in all axes of the pauli

391
00:14:47,040 --> 00:14:50,160
uh in all measures of of boundary

392
00:14:50,160 --> 00:14:52,560
this will already allow you to test

393
00:14:52,560 --> 00:14:53,760
things like

394
00:14:53,760 --> 00:14:56,639
linear error correction teleportation

395
00:14:56,639 --> 00:14:58,000
dense quantum coding

396
00:14:58,000 --> 00:15:01,760
and g8 and the gh z paradox

397
00:15:01,760 --> 00:15:04,560
and we were really essentially plugging

398
00:15:04,560 --> 00:15:06,079
into the quantum language where we can

399
00:15:06,079 --> 00:15:08,000
still make use of the quantum

400
00:15:08,000 --> 00:15:11,040
the q sharp language as a dsl

401
00:15:11,040 --> 00:15:13,279
but essentially add our own plumbing and

402
00:15:13,279 --> 00:15:15,519
tooling in there so that we can

403
00:15:15,519 --> 00:15:17,600
and you will see later on in the demo

404
00:15:17,600 --> 00:15:19,440
you can run much bigger programs than

405
00:15:19,440 --> 00:15:21,920
you normally would be able to

406
00:15:21,920 --> 00:15:24,399
so this made us wonder we were

407
00:15:24,399 --> 00:15:26,079
developing this and zara developed

408
00:15:26,079 --> 00:15:29,839
this online on our twitch stream

409
00:15:29,839 --> 00:15:31,920
and and we wonder like how far can we

410
00:15:31,920 --> 00:15:33,199
take this

411
00:15:33,199 --> 00:15:37,120
well that's where q thrill comes in

412
00:15:37,120 --> 00:15:39,360
if you're familiar with the q sharp

413
00:15:39,360 --> 00:15:41,360
language the name of q sharp it's a

414
00:15:41,360 --> 00:15:42,720
little bit based on the c

415
00:15:42,720 --> 00:15:45,920
sharp name right and c sharp was

416
00:15:45,920 --> 00:15:47,920
originally a music symbol which was

417
00:15:47,920 --> 00:15:49,839
c plus plus and if you add plus plus to

418
00:15:49,839 --> 00:15:51,839
it you get a sharp symbol

419
00:15:51,839 --> 00:15:54,240
so what we thought is that what we want

420
00:15:54,240 --> 00:15:56,480
is something that is more melodical

421
00:15:56,480 --> 00:15:59,199
like multiple vibrations in the tone of

422
00:15:59,199 --> 00:16:00,240
our system

423
00:16:00,240 --> 00:16:02,560
and it needs to be in the same theme so

424
00:16:02,560 --> 00:16:04,240
that's why we called it frill

425
00:16:04,240 --> 00:16:05,920
and because every quantum computing

426
00:16:05,920 --> 00:16:07,680
language needs a queue in front we call

427
00:16:07,680 --> 00:16:08,160
it q

428
00:16:08,160 --> 00:16:12,240
frail so what do we want

429
00:16:12,240 --> 00:16:14,959
well we want to keep q sharp as the dsl

430
00:16:14,959 --> 00:16:16,079
as we already said

431
00:16:16,079 --> 00:16:17,680
because that's where the value of q

432
00:16:17,680 --> 00:16:19,360
sharp is it allows you to

433
00:16:19,360 --> 00:16:21,680
essentially deploy to multiple target

434
00:16:21,680 --> 00:16:23,360
systems and it will allow you to reason

435
00:16:23,360 --> 00:16:24,480
in a uniform way

436
00:16:24,480 --> 00:16:26,720
about quantum computing but we want to

437
00:16:26,720 --> 00:16:28,560
take out blocks of code

438
00:16:28,560 --> 00:16:31,120
and test them individually q sharp

439
00:16:31,120 --> 00:16:32,880
allows you to have unit tests and those

440
00:16:32,880 --> 00:16:34,639
unit tests also allow you to get to

441
00:16:34,639 --> 00:16:37,120
specify which specific

442
00:16:37,120 --> 00:16:39,040
simulator you want for that specific

443
00:16:39,040 --> 00:16:40,720
piece to be tested

444
00:16:40,720 --> 00:16:44,000
and we want to test that with

445
00:16:44,000 --> 00:16:46,240
specific noise models because if you're

446
00:16:46,240 --> 00:16:48,720
developing for example for real hardware

447
00:16:48,720 --> 00:16:50,480
you would see that you also want to

448
00:16:50,480 --> 00:16:52,160
encompass like okay we have these

449
00:16:52,160 --> 00:16:54,480
deviations we have these systems

450
00:16:54,480 --> 00:16:56,720
and and test for them with a huge number

451
00:16:56,720 --> 00:16:58,079
of qubits

452
00:16:58,079 --> 00:17:01,199
so that boiled us down to

453
00:17:01,199 --> 00:17:03,759
we really need to have an ability to

454
00:17:03,759 --> 00:17:04,880
essentially plug in

455
00:17:04,880 --> 00:17:08,640
multiple simulators and

456
00:17:08,640 --> 00:17:11,839
what the chp

457
00:17:12,160 --> 00:17:14,559
simulator taught us is that yeah given

458
00:17:14,559 --> 00:17:16,720
that we already know how to make our own

459
00:17:16,720 --> 00:17:17,679
simulator

460
00:17:17,679 --> 00:17:19,919
why don't we hack this together and

461
00:17:19,919 --> 00:17:21,599
that's basically where the project

462
00:17:21,599 --> 00:17:24,319
was and it's currently in the pog phase

463
00:17:24,319 --> 00:17:26,640
we're currently testing multiple options

464
00:17:26,640 --> 00:17:29,440
and our intent is really to plug in

465
00:17:29,440 --> 00:17:31,600
multiple specific

466
00:17:31,600 --> 00:17:35,120
quantum simulators and

467
00:17:35,120 --> 00:17:38,400
you know um an another option would be

468
00:17:38,400 --> 00:17:39,520
that

469
00:17:39,520 --> 00:17:42,080
yeah there is there was on hecate this

470
00:17:42,080 --> 00:17:43,520
this this quantum

471
00:17:43,520 --> 00:17:45,600
computer and somebody tried to build it

472
00:17:45,600 --> 00:17:46,559
himself

473
00:17:46,559 --> 00:17:49,200
well nobody would be foolish enough to

474
00:17:49,200 --> 00:17:50,080
redo that

475
00:17:50,080 --> 00:17:52,799
and try connecting q sharp to that so

476
00:17:52,799 --> 00:17:55,760
let's not talk about that one for now

477
00:17:55,760 --> 00:17:59,039
so if you look at q q thrill and what

478
00:17:59,039 --> 00:18:01,440
we are currently working on and and how

479
00:18:01,440 --> 00:18:02,799
we see the world is there are

480
00:18:02,799 --> 00:18:05,120
three different types of simulators you

481
00:18:05,120 --> 00:18:06,480
have the incremental

482
00:18:06,480 --> 00:18:08,480
simulators and basically you have your

483
00:18:08,480 --> 00:18:09,840
program running

484
00:18:09,840 --> 00:18:13,440
and the world starts um and your program

485
00:18:13,440 --> 00:18:14,799
essentially interweaves with your

486
00:18:14,799 --> 00:18:15,520
simulator

487
00:18:15,520 --> 00:18:17,600
for example if you execute an harder mod

488
00:18:17,600 --> 00:18:19,039
gate oh the harder mod

489
00:18:19,039 --> 00:18:20,960
gate is executed in the simulator and

490
00:18:20,960 --> 00:18:22,240
you essentially

491
00:18:22,240 --> 00:18:25,039
go back and forward the qdk simulators

492
00:18:25,039 --> 00:18:25,360
are

493
00:18:25,360 --> 00:18:27,520
like this you also have to stop the

494
00:18:27,520 --> 00:18:29,360
world simulators where you basically

495
00:18:29,360 --> 00:18:30,720
have a complete program

496
00:18:30,720 --> 00:18:32,720
you throw it in your simulator the world

497
00:18:32,720 --> 00:18:34,720
stops it get executed

498
00:18:34,720 --> 00:18:37,360
you get uh you get a result back and you

499
00:18:37,360 --> 00:18:38,799
process out again

500
00:18:38,799 --> 00:18:41,360
and you have the concurrent types where

501
00:18:41,360 --> 00:18:42,240
hand over

502
00:18:42,240 --> 00:18:46,160
the gates and essentially the simulator

503
00:18:46,160 --> 00:18:48,080
runs on the back and start processing

504
00:18:48,080 --> 00:18:49,280
them

505
00:18:49,280 --> 00:18:52,320
because the qdk is incremental

506
00:18:52,320 --> 00:18:54,559
the current infrastructure that we have

507
00:18:54,559 --> 00:18:56,960
is also built for the incremental world

508
00:18:56,960 --> 00:18:59,600
and our current plans are to work around

509
00:18:59,600 --> 00:19:01,840
that limitation essentially of how those

510
00:19:01,840 --> 00:19:03,280
processes work

511
00:19:03,280 --> 00:19:06,320
by essentially either having

512
00:19:06,320 --> 00:19:09,200
milling the top out of the top of a

513
00:19:09,200 --> 00:19:10,240
third-party

514
00:19:10,240 --> 00:19:12,559
simulator and we have done that before

515
00:19:12,559 --> 00:19:14,080
and it works quite well

516
00:19:14,080 --> 00:19:17,520
that we can have existing simulators

517
00:19:17,520 --> 00:19:20,960
run in process or we

518
00:19:20,960 --> 00:19:24,240
or for the for us for the simulators

519
00:19:24,240 --> 00:19:25,280
where we're not able

520
00:19:25,280 --> 00:19:27,840
or allowed to do so we want to build a

521
00:19:27,840 --> 00:19:29,520
harness that we can essentially have

522
00:19:29,520 --> 00:19:31,600
stop the world simulator executing

523
00:19:31,600 --> 00:19:33,200
individual jobs

524
00:19:33,200 --> 00:19:36,559
and process them so

525
00:19:36,559 --> 00:19:39,600
why is this fun well this is really fun

526
00:19:39,600 --> 00:19:40,320
because this is

527
00:19:40,320 --> 00:19:43,039
uncharted territory nobody knows on if

528
00:19:43,039 --> 00:19:44,559
we're gonna plug that in

529
00:19:44,559 --> 00:19:47,120
how everything is going to react and and

530
00:19:47,120 --> 00:19:49,679
what the end of the possibilities are

531
00:19:49,679 --> 00:19:52,400
about this we're currently in the design

532
00:19:52,400 --> 00:19:54,240
and prototyping phase right

533
00:19:54,240 --> 00:19:56,640
and that also means that we're currently

534
00:19:56,640 --> 00:19:58,799
validating if this works and we think it

535
00:19:58,799 --> 00:19:59,360
does

536
00:19:59,360 --> 00:20:01,679
um the prototypes and the prototype

537
00:20:01,679 --> 00:20:02,799
going to show you hope

538
00:20:02,799 --> 00:20:05,120
hopefully works and i will be able to

539
00:20:05,120 --> 00:20:06,559
show you that

540
00:20:06,559 --> 00:20:09,280
the concept works but we're really in

541
00:20:09,280 --> 00:20:10,320
looking at like okay

542
00:20:10,320 --> 00:20:12,400
how would we do this the best way how

543
00:20:12,400 --> 00:20:13,679
can we integrate that

544
00:20:13,679 --> 00:20:15,679
if you really like these kind of things

545
00:20:15,679 --> 00:20:17,280
well

546
00:20:17,280 --> 00:20:19,679
we're going to send out a deck join us

547
00:20:19,679 --> 00:20:21,360
this is really fun material to

548
00:20:21,360 --> 00:20:25,360
to talk about so let's talk a bit

549
00:20:25,360 --> 00:20:28,080
on how technically we are going to do

550
00:20:28,080 --> 00:20:29,280
this

551
00:20:29,280 --> 00:20:31,360
and for that i'm going to give you some

552
00:20:31,360 --> 00:20:33,840
inspiration and what was our inspiration

553
00:20:33,840 --> 00:20:34,240
for

554
00:20:34,240 --> 00:20:36,640
our q-fil simulator which was the chp

555
00:20:36,640 --> 00:20:38,159
simulator

556
00:20:38,159 --> 00:20:40,960
so the chp simulator and zara started

557
00:20:40,960 --> 00:20:41,760
this one

558
00:20:41,760 --> 00:20:45,600
is based on the stabilizer stabilizers

559
00:20:45,600 --> 00:20:49,600
theorem of godzman from 1996.

560
00:20:49,600 --> 00:20:52,880
it can handle uh hadamard uh phase and c

561
00:20:52,880 --> 00:20:53,360
naught

562
00:20:53,360 --> 00:20:55,600
uh and also and therefore within that

563
00:20:55,600 --> 00:20:57,600
space also the pauli exclusion

564
00:20:57,600 --> 00:21:00,880
uh in in all in all axes and

565
00:21:00,880 --> 00:21:02,799
you can find it in the bottom link if

566
00:21:02,799 --> 00:21:04,159
you really want to see how it

567
00:21:04,159 --> 00:21:07,280
technically works so

568
00:21:07,280 --> 00:21:09,600
if you look at these gates because

569
00:21:09,600 --> 00:21:11,039
people will usually ask

570
00:21:11,039 --> 00:21:13,280
why these gates if you look at this case

571
00:21:13,280 --> 00:21:15,360
you would see that the hadamard

572
00:21:15,360 --> 00:21:19,600
has has the ability to go from the zero

573
00:21:19,600 --> 00:21:20,080
state

574
00:21:20,080 --> 00:21:22,159
to the plus state from the one state to

575
00:21:22,159 --> 00:21:23,760
the minus state

576
00:21:23,760 --> 00:21:26,000
the phase state can bring from zero to

577
00:21:26,000 --> 00:21:27,840
zero from one to i

578
00:21:27,840 --> 00:21:31,360
and et cetera et cetera none of these

579
00:21:31,360 --> 00:21:32,000
gates

580
00:21:32,000 --> 00:21:33,520
essentially and that's also why they're

581
00:21:33,520 --> 00:21:35,039
called clifford gates

582
00:21:35,039 --> 00:21:37,600
can bring you to essentially all the

583
00:21:37,600 --> 00:21:38,320
sub-states

584
00:21:38,320 --> 00:21:41,520
of the blaspheme and that's an

585
00:21:41,520 --> 00:21:43,600
opportunity where you can make use of so

586
00:21:43,600 --> 00:21:44,960
for example where

587
00:21:44,960 --> 00:21:46,880
you probably have seen this block sphere

588
00:21:46,880 --> 00:21:49,120
where every point on the block sphere

589
00:21:49,120 --> 00:21:51,520
is a possible state in your application

590
00:21:51,520 --> 00:21:52,880
in the chp set

591
00:21:52,880 --> 00:21:55,679
you only have six states from one qubit

592
00:21:55,679 --> 00:21:56,640
and that will

593
00:21:56,640 --> 00:21:59,440
that will allows us to massively

594
00:21:59,440 --> 00:22:00,240
compress

595
00:22:00,240 --> 00:22:03,919
the states that we use using

596
00:22:03,919 --> 00:22:07,760
um here we go using power

597
00:22:07,760 --> 00:22:10,000
matrix multiplication so what we do is

598
00:22:10,000 --> 00:22:11,760
we use group theory

599
00:22:11,760 --> 00:22:13,200
and if you want to know it in much more

600
00:22:13,200 --> 00:22:16,080
detail there is the paper from irons and

601
00:22:16,080 --> 00:22:20,480
gotspa but basically what this allows us

602
00:22:20,480 --> 00:22:22,799
is to simulate this specific set in a

603
00:22:22,799 --> 00:22:24,880
very efficient way

604
00:22:24,880 --> 00:22:27,919
on a classical computer as long as we

605
00:22:27,919 --> 00:22:30,080
keep to these gates

606
00:22:30,080 --> 00:22:32,720
well okay that's the theory of a chp

607
00:22:32,720 --> 00:22:33,360
simulator

608
00:22:33,360 --> 00:22:35,600
how do we connect it up to the q sharp

609
00:22:35,600 --> 00:22:36,480
language

610
00:22:36,480 --> 00:22:38,480
well there are basically three ways of

611
00:22:38,480 --> 00:22:40,240
connecting a program

612
00:22:40,240 --> 00:22:43,120
up to the q sharp language you can build

613
00:22:43,120 --> 00:22:44,720
unplugging your own simulator

614
00:22:44,720 --> 00:22:48,159
and that's basically how our

615
00:22:48,159 --> 00:22:51,039
q-thrill sorry how a chp simulator works

616
00:22:51,039 --> 00:22:52,320
and our q-fil

617
00:22:52,320 --> 00:22:54,799
proof-of-concept currently works other

618
00:22:54,799 --> 00:22:56,240
options would have been the custom

619
00:22:56,240 --> 00:22:58,159
compiler extensions so if you really

620
00:22:58,159 --> 00:23:00,240
want to rewrite code and do all the

621
00:23:00,240 --> 00:23:02,880
other stuff qsharp has the ability to do

622
00:23:02,880 --> 00:23:04,880
those kind of things

623
00:23:04,880 --> 00:23:07,360
another option and it's it came out on

624
00:23:07,360 --> 00:23:08,000
wednesday

625
00:23:08,000 --> 00:23:10,960
that's the qir or quantum intermediate

626
00:23:10,960 --> 00:23:13,039
representation which is basically the

627
00:23:13,039 --> 00:23:15,280
msil language for quantum computers

628
00:23:15,280 --> 00:23:16,400
later on

629
00:23:16,400 --> 00:23:18,960
and we are currently looking at if we

630
00:23:18,960 --> 00:23:19,520
can

631
00:23:19,520 --> 00:23:21,919
make it work use it but that will

632
00:23:21,919 --> 00:23:22,960
probably be

633
00:23:22,960 --> 00:23:26,400
our focus for queue for later on

634
00:23:26,400 --> 00:23:29,520
so let's go back to the qa to the chp

635
00:23:29,520 --> 00:23:31,360
simulator how do you build your custom

636
00:23:31,360 --> 00:23:32,720
simulator

637
00:23:32,720 --> 00:23:36,240
well first let's discuss on how a q

638
00:23:36,240 --> 00:23:38,080
sharp is normally executed

639
00:23:38,080 --> 00:23:40,000
you normally have a q sheet sharp

640
00:23:40,000 --> 00:23:41,919
program and it has its

641
00:23:41,919 --> 00:23:44,320
host program which is technically

642
00:23:44,320 --> 00:23:45,840
optional but under the hood you always

643
00:23:45,840 --> 00:23:46,720
have that

644
00:23:46,720 --> 00:23:49,760
and it executes the q sharp programs and

645
00:23:49,760 --> 00:23:52,480
it executes the programs against either

646
00:23:52,480 --> 00:23:53,360
a quantum

647
00:23:53,360 --> 00:23:55,600
device which they call a target machine

648
00:23:55,600 --> 00:23:56,400
or

649
00:23:56,400 --> 00:23:58,480
basically the simulators and the way

650
00:23:58,480 --> 00:24:00,480
this technically works and you can plug

651
00:24:00,480 --> 00:24:02,159
and play this without changing the q

652
00:24:02,159 --> 00:24:04,400
sharp code is that if you have for

653
00:24:04,400 --> 00:24:06,159
example the program on the left

654
00:24:06,159 --> 00:24:10,400
and this is within visual studio code

655
00:24:10,400 --> 00:24:13,919
a lot of you might use more that jupiter

656
00:24:13,919 --> 00:24:16,159
notebooks for this so this is the

657
00:24:16,159 --> 00:24:18,240
code representation as you would see in

658
00:24:18,240 --> 00:24:21,039
in the development studio environment

659
00:24:21,039 --> 00:24:22,960
where you have an application with a and

660
00:24:22,960 --> 00:24:24,400
b and you have the item

661
00:24:24,400 --> 00:24:26,559
hadamard gate executed the c not gate

662
00:24:26,559 --> 00:24:28,720
executed et cetera et cetera et cetera

663
00:24:28,720 --> 00:24:31,600
for all of these steps in the simulator

664
00:24:31,600 --> 00:24:32,240
and this is

665
00:24:32,240 --> 00:24:36,480
a class depending uh which extends the

666
00:24:36,480 --> 00:24:39,279
quantum processor base all the methods

667
00:24:39,279 --> 00:24:41,279
are called for all these gates

668
00:24:41,279 --> 00:24:43,919
so for example the hadamard gate the h

669
00:24:43,919 --> 00:24:46,000
function is called for the c not gate

670
00:24:46,000 --> 00:24:48,400
the c not function is called and by

671
00:24:48,400 --> 00:24:50,400
implementing your own version of these

672
00:24:50,400 --> 00:24:51,600
you can build up

673
00:24:51,600 --> 00:24:54,799
essentially your own simulator so if you

674
00:24:54,799 --> 00:24:55,760
do that correctly

675
00:24:55,760 --> 00:24:59,120
and and this is a an export of of of how

676
00:24:59,120 --> 00:25:00,640
the what that looks like

677
00:25:00,640 --> 00:25:03,840
on the top you see the left program

678
00:25:03,840 --> 00:25:07,679
using using the traditional

679
00:25:07,679 --> 00:25:09,840
full state quantum simulator which uses

680
00:25:09,840 --> 00:25:12,159
matrix multiplications to

681
00:25:12,159 --> 00:25:15,200
essentially execute uh the program you

682
00:25:15,200 --> 00:25:16,080
see that

683
00:25:16,080 --> 00:25:18,400
the end result on the bottom is zero

684
00:25:18,400 --> 00:25:19,520
zero as

685
00:25:19,520 --> 00:25:22,080
you would expect and on the bottom side

686
00:25:22,080 --> 00:25:22,960
you see that

687
00:25:22,960 --> 00:25:24,799
uh with the dotnet command rights you

688
00:25:24,799 --> 00:25:26,720
can plug in our own simulator which does

689
00:25:26,720 --> 00:25:28,320
the same which does all the

690
00:25:28,320 --> 00:25:30,400
interesting stuff with the matrices and

691
00:25:30,400 --> 00:25:31,760
all the other stuff

692
00:25:31,760 --> 00:25:35,120
and also executes the same well

693
00:25:35,120 --> 00:25:37,520
and it also executes with the same zero

694
00:25:37,520 --> 00:25:38,480
zero so

695
00:25:38,480 --> 00:25:40,799
that way we basically don't change the

696
00:25:40,799 --> 00:25:42,640
program but we can plug in different

697
00:25:42,640 --> 00:25:43,440
simulators

698
00:25:43,440 --> 00:25:47,520
so let's show that in real life

699
00:25:50,240 --> 00:25:53,679
so what program am i going to use for

700
00:25:53,679 --> 00:25:57,279
the q sharpen for these demos well sarah

701
00:25:57,279 --> 00:25:59,200
is currently working on the algorithm

702
00:25:59,200 --> 00:26:02,000
zoom and one of the algorithms

703
00:26:02,000 --> 00:26:05,120
zoo applications she implemented is the

704
00:26:05,120 --> 00:26:06,320
bernstein

705
00:26:06,320 --> 00:26:09,919
far far zee rani going to butcher that

706
00:26:09,919 --> 00:26:12,480
name sorry

707
00:26:14,320 --> 00:26:17,440
so this com this this class essentially

708
00:26:17,440 --> 00:26:18,559
is implementing

709
00:26:18,559 --> 00:26:22,320
as a community or all of the

710
00:26:22,320 --> 00:26:24,799
algorithms that are on the quantum

711
00:26:24,799 --> 00:26:25,760
algorithm zoo

712
00:26:25,760 --> 00:26:27,679
page and we're going to implement them

713
00:26:27,679 --> 00:26:29,279
one by one and we'll add them

714
00:26:29,279 --> 00:26:31,279
as public contributions so everybody can

715
00:26:31,279 --> 00:26:32,480
see and have

716
00:26:32,480 --> 00:26:35,679
a crack at them so if i take that

717
00:26:35,679 --> 00:26:37,520
algorithm and this is the

718
00:26:37,520 --> 00:26:40,880
q sharp version on my laptop

719
00:26:40,880 --> 00:26:43,919
in visual studio code because i'm more

720
00:26:43,919 --> 00:26:45,600
of a developer person so i

721
00:26:45,600 --> 00:26:48,320
like this kind of infrastructure what

722
00:26:48,320 --> 00:26:48,880
you see

723
00:26:48,880 --> 00:26:53,279
is the uh

724
00:26:53,279 --> 00:26:54,799
the bench line uh let's call the bench

725
00:26:54,799 --> 00:26:56,799
there for now uh algorithm

726
00:26:56,799 --> 00:26:59,520
where you have been given an article and

727
00:26:59,520 --> 00:27:00,320
that article

728
00:27:00,320 --> 00:27:02,799
uh function has a hidden var it has a

729
00:27:02,799 --> 00:27:04,240
hidden value

730
00:27:04,240 --> 00:27:06,720
and the what the algorithm does is

731
00:27:06,720 --> 00:27:08,720
basically by querying it tries to

732
00:27:08,720 --> 00:27:10,159
determine what value

733
00:27:10,159 --> 00:27:13,279
is in that oracle function and normal on

734
00:27:13,279 --> 00:27:15,279
a classical computer

735
00:27:15,279 --> 00:27:16,799
you would get a list and you would need

736
00:27:16,799 --> 00:27:19,360
to execute all kinds of combinations

737
00:27:19,360 --> 00:27:21,600
but for a quantum computer using

738
00:27:21,600 --> 00:27:22,559
superposition

739
00:27:22,559 --> 00:27:25,440
we can just say basically query them all

740
00:27:25,440 --> 00:27:26,559
and have out what

741
00:27:26,559 --> 00:27:29,600
the oracle function is

742
00:27:29,679 --> 00:27:33,039
so let's test this algorithm on a

743
00:27:33,039 --> 00:27:34,720
on a classical computer is this screen

744
00:27:34,720 --> 00:27:38,000
big enough for people or not

745
00:27:38,720 --> 00:27:42,399
no yeah

746
00:27:42,399 --> 00:27:45,919
yeah okay there are some questions

747
00:27:45,919 --> 00:27:48,960
in the chat we can get to it i don't

748
00:27:48,960 --> 00:27:50,960
know if you want to oh sure sure

749
00:27:50,960 --> 00:27:54,880
go ahead i i can't see the

750
00:27:54,880 --> 00:27:57,919
uh the query uh the query scenes

751
00:27:57,919 --> 00:28:00,880
screen so if you can tell me yeah

752
00:28:00,880 --> 00:28:01,679
there's uh

753
00:28:01,679 --> 00:28:05,120
two questions from sumit one is was the

754
00:28:05,120 --> 00:28:08,640
quantum class in c-sharp

755
00:28:08,640 --> 00:28:11,919
uh the simulators are the simulator

756
00:28:11,919 --> 00:28:13,360
extensions as we wrote them are in

757
00:28:13,360 --> 00:28:15,520
c-sharp yes

758
00:28:15,520 --> 00:28:17,760
and then the second question oh yeah

759
00:28:17,760 --> 00:28:18,960
it's the same so

760
00:28:18,960 --> 00:28:21,120
they're asking if it's in stabilizer

761
00:28:21,120 --> 00:28:22,880
processor

762
00:28:22,880 --> 00:28:26,000
yeah the stabilizer processor

763
00:28:26,000 --> 00:28:29,520
is the i have them here

764
00:28:29,520 --> 00:28:32,080
the stabilizer processor is basically

765
00:28:32,080 --> 00:28:32,799
the

766
00:28:32,799 --> 00:28:34,640
component which plugs in the runtime

767
00:28:34,640 --> 00:28:36,880
essentially that one gets called for

768
00:28:36,880 --> 00:28:40,399
all the gates and this code is

769
00:28:40,399 --> 00:28:42,640
public on the github page by the way if

770
00:28:42,640 --> 00:28:45,679
people want to review and see this

771
00:28:45,679 --> 00:28:48,320
so this is my application and i'm now

772
00:28:48,320 --> 00:28:49,120
going to run

773
00:28:49,120 --> 00:28:50,720
the application on the traditional

774
00:28:50,720 --> 00:28:52,399
simulator so this is the quantum

775
00:28:52,399 --> 00:28:53,440
simulator

776
00:28:53,440 --> 00:28:55,840
dot net run the project sample quantum

777
00:28:55,840 --> 00:28:56,720
simulator

778
00:28:56,720 --> 00:28:58,000
i put it the secret that's just the

779
00:28:58,000 --> 00:29:00,080
secret i'm going to put in the article

780
00:29:00,080 --> 00:29:02,880
i'm going to query

781
00:29:02,880 --> 00:29:04,799
and then i'm i'm going to execute this

782
00:29:04,799 --> 00:29:08,000
with 16 qubits

783
00:29:08,799 --> 00:29:11,039
sara is also providing the links thank

784
00:29:11,039 --> 00:29:13,120
you sarah

785
00:29:13,120 --> 00:29:15,600
so this is running on my machine and

786
00:29:15,600 --> 00:29:17,679
what you see is that it executes and i

787
00:29:17,679 --> 00:29:20,240
get the same results back

788
00:29:20,240 --> 00:29:23,840
so this so what we build is a

789
00:29:23,840 --> 00:29:25,840
the simulator the csp stabilization

790
00:29:25,840 --> 00:29:27,039
simulator oh

791
00:29:27,039 --> 00:29:28,480
that's a little bit too much yeah for

792
00:29:28,480 --> 00:29:30,320
now and what you see is

793
00:29:30,320 --> 00:29:32,399
i can execute the same program and it

794
00:29:32,399 --> 00:29:35,440
will give me the same results hopefully

795
00:29:35,440 --> 00:29:38,840
yes it still gives me the same results

796
00:29:38,840 --> 00:29:40,640
back so how does

797
00:29:40,640 --> 00:29:42,159
how does this work with this with the

798
00:29:42,159 --> 00:29:44,640
simulator so what we have

799
00:29:44,640 --> 00:29:47,120
and it's it's how you can plug this in

800
00:29:47,120 --> 00:29:49,200
is we have a process simulator

801
00:29:49,200 --> 00:29:53,200
which extends from quantum processor

802
00:29:53,200 --> 00:29:54,159
dispatcher

803
00:29:54,159 --> 00:29:56,880
which basically creates a custom class

804
00:29:56,880 --> 00:29:57,200
which

805
00:29:57,200 --> 00:29:58,880
will be hooked up into the runtime and

806
00:29:58,880 --> 00:30:00,880
you can specify this class

807
00:30:00,880 --> 00:30:03,520
and that's the name of which you specify

808
00:30:03,520 --> 00:30:05,039
with the simulator tag

809
00:30:05,039 --> 00:30:09,840
oh do you want the text bigger oh sorry

810
00:30:12,240 --> 00:30:14,559
which you can which essentially creates

811
00:30:14,559 --> 00:30:16,399
and hooks in the

812
00:30:16,399 --> 00:30:18,480
real simulator that you want to execute

813
00:30:18,480 --> 00:30:19,440
and the real

814
00:30:19,440 --> 00:30:21,360
execute simulator is in stabilizer

815
00:30:21,360 --> 00:30:22,559
processor

816
00:30:22,559 --> 00:30:24,880
and basically that one contains the

817
00:30:24,880 --> 00:30:27,520
override methods from the processor

818
00:30:27,520 --> 00:30:30,559
quantum processor base which are the

819
00:30:30,559 --> 00:30:33,679
components which get executed

820
00:30:33,679 --> 00:30:36,720
if you go even deeper you will see

821
00:30:36,720 --> 00:30:40,480
all the plumbing and definitions and how

822
00:30:40,480 --> 00:30:42,559
we implemented the rest

823
00:30:42,559 --> 00:30:45,120
but basically this is how the glue of

824
00:30:45,120 --> 00:30:46,480
the q sharp language

825
00:30:46,480 --> 00:30:49,919
and the custom simulator interact

826
00:30:49,919 --> 00:30:51,440
together

827
00:30:51,440 --> 00:30:53,840
and and that's and that's and you can

828
00:30:53,840 --> 00:30:54,880
play uh

829
00:30:54,880 --> 00:30:57,760
you go on and on and on back and forward

830
00:30:57,760 --> 00:30:59,360
so this is nice but

831
00:30:59,360 --> 00:31:01,200
if i already have a simulator from

832
00:31:01,200 --> 00:31:04,000
microsoft why should i implement this

833
00:31:04,000 --> 00:31:06,880
well the problem comes once you start

834
00:31:06,880 --> 00:31:09,919
getting into this territory

835
00:31:09,919 --> 00:31:13,360
the q sharp also compiles to il um

836
00:31:13,360 --> 00:31:15,200
it's a little bit more complex than that

837
00:31:15,200 --> 00:31:16,399
uh this

838
00:31:16,399 --> 00:31:19,760
q program gets

839
00:31:19,760 --> 00:31:22,640
parsed and if you look in the object

840
00:31:22,640 --> 00:31:23,760
directory

841
00:31:23,760 --> 00:31:27,360
you can see the components at which

842
00:31:27,360 --> 00:31:28,320
scott

843
00:31:28,320 --> 00:31:31,440
got implemented too sorry this one

844
00:31:31,440 --> 00:31:34,159
it it gets on the back it gets compiled

845
00:31:34,159 --> 00:31:35,360
to this

846
00:31:35,360 --> 00:31:37,679
c-sharp file which basically calls back

847
00:31:37,679 --> 00:31:39,679
the simulator

848
00:31:39,679 --> 00:31:42,640
and this is compiled into the dll and

849
00:31:42,640 --> 00:31:43,360
that

850
00:31:43,360 --> 00:31:46,240
is an il for now but if in the future

851
00:31:46,240 --> 00:31:47,679
for example if you have a target machine

852
00:31:47,679 --> 00:31:48,720
you would have other stuff

853
00:31:48,720 --> 00:31:51,519
poking in here

854
00:31:51,840 --> 00:31:56,080
so today yes today it compiles to il

855
00:31:56,080 --> 00:31:59,200
so going back if i have my

856
00:31:59,200 --> 00:32:02,080
quantum project and suppose this

857
00:32:02,080 --> 00:32:04,000
application would be a lot bigger

858
00:32:04,000 --> 00:32:06,080
and i now want to simulate this with 60

859
00:32:06,080 --> 00:32:07,200
qubits so okay

860
00:32:07,200 --> 00:32:10,080
i'll execute this with 60 qubits using

861
00:32:10,080 --> 00:32:11,279
the traditional

862
00:32:11,279 --> 00:32:14,960
simulator and nothing happens

863
00:32:14,960 --> 00:32:17,760
it's it's silence i can't do anything

864
00:32:17,760 --> 00:32:18,320
and

865
00:32:18,320 --> 00:32:21,080
the re if you look at my uh process

866
00:32:21,080 --> 00:32:23,679
statistics you would see that the

867
00:32:23,679 --> 00:32:26,240
net runtime will grow will grow will

868
00:32:26,240 --> 00:32:27,200
grow

869
00:32:27,200 --> 00:32:30,080
well it's currently at five gigabytes it

870
00:32:30,080 --> 00:32:32,080
will eventually stop at 16 because

871
00:32:32,080 --> 00:32:33,840
there's only 16 gigabytes in this

872
00:32:33,840 --> 00:32:34,880
machine

873
00:32:34,880 --> 00:32:36,960
and then it will die like hey i'm out of

874
00:32:36,960 --> 00:32:39,039
memory i can't simulate that many

875
00:32:39,039 --> 00:32:42,080
qubits so this this

876
00:32:42,080 --> 00:32:45,200
won't work for these kind of programs

877
00:32:45,200 --> 00:32:50,320
well okay let's try the other one

878
00:32:51,840 --> 00:32:57,679
let's do this one with 60 qubits

879
00:32:57,679 --> 00:33:01,440
oh here's the result does this mean that

880
00:33:01,440 --> 00:33:02,960
the full state

881
00:33:02,960 --> 00:33:06,320
simulator is bad no definitely not

882
00:33:06,320 --> 00:33:08,960
this simulator is specifically purpose

883
00:33:08,960 --> 00:33:10,000
for these kinds

884
00:33:10,000 --> 00:33:13,200
of simulations which only cre only make

885
00:33:13,200 --> 00:33:14,960
use of the hadamard gate

886
00:33:14,960 --> 00:33:18,000
this uh the hadamard gate

887
00:33:18,000 --> 00:33:21,600
the pauli exclusion gate the x-axis and

888
00:33:21,600 --> 00:33:24,000
essentially the face and the c knot and

889
00:33:24,000 --> 00:33:24,799
that's why

890
00:33:24,799 --> 00:33:26,799
this is able to essentially for those

891
00:33:26,799 --> 00:33:28,240
specific use cases

892
00:33:28,240 --> 00:33:29,919
if you plug it in you're able to

893
00:33:29,919 --> 00:33:31,600
simulate much much

894
00:33:31,600 --> 00:33:36,399
bigger quantum computing devices

895
00:33:36,399 --> 00:33:39,360
you can even um and i will show you this

896
00:33:39,360 --> 00:33:40,559
by default

897
00:33:40,559 --> 00:33:44,399
uh we fill it with 1024 qubits

898
00:33:44,399 --> 00:33:46,480
yeah just because we can in the

899
00:33:46,480 --> 00:33:48,480
simulator so even if you have really

900
00:33:48,480 --> 00:33:50,399
really big programs

901
00:33:50,399 --> 00:33:53,679
and if you don't just have these um

902
00:33:53,679 --> 00:33:56,080
if you just use these gates yeah you can

903
00:33:56,080 --> 00:33:58,799
still run them

904
00:33:59,600 --> 00:34:02,640
okay so that's nice um

905
00:34:02,640 --> 00:34:06,000
so how does uh so so this is how you can

906
00:34:06,000 --> 00:34:08,719
plug in your own telemetry and how you

907
00:34:08,719 --> 00:34:09,119
can

908
00:34:09,119 --> 00:34:11,119
essentially plug in your own uh

909
00:34:11,119 --> 00:34:14,079
simulators this way

910
00:34:14,800 --> 00:34:18,719
so what does this look for qfril

911
00:34:18,719 --> 00:34:22,079
well in the case of q frill and this is

912
00:34:22,079 --> 00:34:24,079
a very early prototype

913
00:34:24,079 --> 00:34:27,199
i have here a very uh in

914
00:34:27,199 --> 00:34:30,879
c uh some from a research paper i got a

915
00:34:30,879 --> 00:34:33,040
version of a simulator

916
00:34:33,040 --> 00:34:36,320
by scott harrison himself uh who wrote a

917
00:34:36,320 --> 00:34:37,599
simulator in c

918
00:34:37,599 --> 00:34:39,679
to just execute these kind of things and

919
00:34:39,679 --> 00:34:41,440
this is in hardcoded c

920
00:34:41,440 --> 00:34:44,399
it compiles to uh to a real native

921
00:34:44,399 --> 00:34:45,359
program

922
00:34:45,359 --> 00:34:48,639
can't run it okay so how do i plug this

923
00:34:48,639 --> 00:34:51,040
then in and that's basically where our

924
00:34:51,040 --> 00:34:52,399
first prototype

925
00:34:52,399 --> 00:34:55,280
is essentially capable of doing so by

926
00:34:55,280 --> 00:34:58,240
switching that one around

927
00:34:58,240 --> 00:35:01,440
and now i need to do this

928
00:35:01,440 --> 00:35:04,240
switcheroo

929
00:35:06,240 --> 00:35:09,919
and i really hope this one works

930
00:35:10,240 --> 00:35:14,000
uh this is sample

931
00:35:14,000 --> 00:35:17,839
this is the q field simulator

932
00:35:35,200 --> 00:35:37,839
did we break yes we break that's the

933
00:35:37,839 --> 00:35:39,680
nice thing about

934
00:35:39,680 --> 00:35:45,839
beta applications

935
00:35:45,839 --> 00:35:48,880
need to recompile sorry

936
00:35:49,359 --> 00:35:52,400
we can but what you what you're seeing

937
00:35:52,400 --> 00:35:52,640
is

938
00:35:52,640 --> 00:35:54,800
that we're switching around simulators

939
00:35:54,800 --> 00:35:56,480
on the fly and this will be as

940
00:35:56,480 --> 00:35:58,880
easy as switching machines later on as

941
00:35:58,880 --> 00:36:00,960
well this really proves that

942
00:36:00,960 --> 00:36:02,960
the q sharp language is really a

943
00:36:02,960 --> 00:36:05,119
language that is not dependent on what

944
00:36:05,119 --> 00:36:07,040
kind of hardware or simulator is below

945
00:36:07,040 --> 00:36:07,839
that

946
00:36:07,839 --> 00:36:10,880
and essentially a dsl which yeah will

947
00:36:10,880 --> 00:36:15,359
allow you to reuse this later on as well

948
00:36:16,240 --> 00:36:21,359
okay attempt number two

949
00:36:25,200 --> 00:36:27,920
off so what you see now is that i

950
00:36:27,920 --> 00:36:28,880
switched out

951
00:36:28,880 --> 00:36:32,240
the the simulator and it's now using the

952
00:36:32,240 --> 00:36:36,560
uh the research paper simulator from

953
00:36:36,560 --> 00:36:39,040
scott evanson and i'm using this in the

954
00:36:39,040 --> 00:36:40,640
q sharp language

955
00:36:40,640 --> 00:36:43,200
notice i didn't change anything i just

956
00:36:43,200 --> 00:36:45,520
plugged it in and it works

957
00:36:45,520 --> 00:36:47,440
and this is our intention to go even

958
00:36:47,440 --> 00:36:48,560
beyond this to have

959
00:36:48,560 --> 00:36:51,760
more uh ability and i get the correct

960
00:36:51,760 --> 00:36:54,160
result which is not unimportant

961
00:36:54,160 --> 00:36:57,599
so i now have i now have the ability to

962
00:36:57,599 --> 00:36:59,359
plug in all kinds of simulators and what

963
00:36:59,359 --> 00:37:00,880
we want is to even have

964
00:37:00,880 --> 00:37:03,119
more types of simulators so we can

965
00:37:03,119 --> 00:37:04,640
really focus our

966
00:37:04,640 --> 00:37:09,839
the sets that we want to test on

967
00:37:10,320 --> 00:37:14,079
so let me get back to my deck

968
00:37:17,040 --> 00:37:20,160
so this is one of the projects that you

969
00:37:20,160 --> 00:37:20,480
see

970
00:37:20,480 --> 00:37:22,960
on the github page that we are currently

971
00:37:22,960 --> 00:37:24,160
working on

972
00:37:24,160 --> 00:37:26,000
but there are much more fun things that

973
00:37:26,000 --> 00:37:27,280
we have as well so

974
00:37:27,280 --> 00:37:29,280
like i said we have the algorithm sue

975
00:37:29,280 --> 00:37:31,520
and we also are working on quantum

976
00:37:31,520 --> 00:37:34,560
we also worked on the quantum realm and

977
00:37:34,560 --> 00:37:36,640
quantum realm memory libraries to

978
00:37:36,640 --> 00:37:38,079
execute on those

979
00:37:38,079 --> 00:37:40,000
and these are really fun things to do

980
00:37:40,000 --> 00:37:42,079
and don't do those things alone

981
00:37:42,079 --> 00:37:43,920
do those things together it's much more

982
00:37:43,920 --> 00:37:45,359
fun because

983
00:37:45,359 --> 00:37:47,520
if you're alone you're just alone so

984
00:37:47,520 --> 00:37:49,040
come join us if you don't want to be

985
00:37:49,040 --> 00:37:51,839
left behind

