1
00:00:00,000 --> 00:00:08,720
[Music]

2
00:00:08,720 --> 00:00:10,240
welcome to this third class of

3
00:00:10,240 --> 00:00:11,200
interactive art

4
00:00:11,200 --> 00:00:14,000
using sensors and light at heca de u i'm

5
00:00:14,000 --> 00:00:15,920
maribel jones former senior designer

6
00:00:15,920 --> 00:00:17,359
developer at meow wolf

7
00:00:17,359 --> 00:00:19,119
and current instructor of interactive

8
00:00:19,119 --> 00:00:20,800
art and design

9
00:00:20,800 --> 00:00:22,800
i'm very excited about this third class

10
00:00:22,800 --> 00:00:24,320
because we'll be getting into

11
00:00:24,320 --> 00:00:26,240
the first stages of creating projects

12
00:00:26,240 --> 00:00:27,840
with moving parts

13
00:00:27,840 --> 00:00:29,599
that's right we'll be exploring just a

14
00:00:29,599 --> 00:00:31,199
little bit of the exciting world of

15
00:00:31,199 --> 00:00:33,120
animatronics and robotics

16
00:00:33,120 --> 00:00:34,480
we'll also go further with our

17
00:00:34,480 --> 00:00:36,079
understanding of creating interactive

18
00:00:36,079 --> 00:00:36,880
programs

19
00:00:36,880 --> 00:00:38,399
by learning more about inputs and

20
00:00:38,399 --> 00:00:40,719
outputs we'll also look into creating

21
00:00:40,719 --> 00:00:42,800
tools like flowcharts and interactivity

22
00:00:42,800 --> 00:00:43,520
matrixes

23
00:00:43,520 --> 00:00:45,200
to help us plan the logic of our

24
00:00:45,200 --> 00:00:47,920
programs we'll ditch using delay so we

25
00:00:47,920 --> 00:00:49,440
can have more than one thing happening

26
00:00:49,440 --> 00:00:50,640
at the same time

27
00:00:50,640 --> 00:00:52,480
which is a must if you want to develop

28
00:00:52,480 --> 00:00:53,920
programs that have several

29
00:00:53,920 --> 00:00:56,399
inputs and outputs we'll also learn

30
00:00:56,399 --> 00:00:57,680
about control hardware

31
00:00:57,680 --> 00:00:59,760
like buttons and switches and how to use

32
00:00:59,760 --> 00:01:00,879
those

33
00:01:00,879 --> 00:01:02,480
and we'll learn about one of the coolest

34
00:01:02,480 --> 00:01:04,159
sensors on board the circuit playground

35
00:01:04,159 --> 00:01:05,040
express

36
00:01:05,040 --> 00:01:07,360
the accelerometer which allows us to

37
00:01:07,360 --> 00:01:08,560
sense movements

38
00:01:08,560 --> 00:01:11,520
jostling and also orientation along the

39
00:01:11,520 --> 00:01:13,840
way i encourage you to pause the videos

40
00:01:13,840 --> 00:01:16,000
and experiment with the code we've

41
00:01:16,000 --> 00:01:17,439
mostly been running pre-programmed

42
00:01:17,439 --> 00:01:18,080
sketches

43
00:01:18,080 --> 00:01:19,600
but you'll learn more if you create your

44
00:01:19,600 --> 00:01:21,200
own sketches from scratch

45
00:01:21,200 --> 00:01:23,200
in addition to copying and pasting parts

46
00:01:23,200 --> 00:01:25,280
from one sketch to another

47
00:01:25,280 --> 00:01:27,119
see if you can challenge yourself to

48
00:01:27,119 --> 00:01:28,640
test what you've learned so far about

49
00:01:28,640 --> 00:01:29,520
variables

50
00:01:29,520 --> 00:01:32,560
for loops functions and more we've got a

51
00:01:32,560 --> 00:01:33,759
lot to cover this week

52
00:01:33,759 --> 00:01:36,799
so let's get started

53
00:01:37,119 --> 00:01:40,159
from your course files open the sketch 3

54
00:01:40,159 --> 00:01:43,280
every n milliseconds

55
00:01:43,280 --> 00:01:49,040
open the sketch 3 every end milliseconds

56
00:01:49,200 --> 00:01:51,920
in this sketch we're doing two things at

57
00:01:51,920 --> 00:01:53,280
the same time

58
00:01:53,280 --> 00:01:56,560
we're reading our cap touch pin and then

59
00:01:56,560 --> 00:01:59,280
if we're over a threshold we're playing

60
00:01:59,280 --> 00:02:01,759
a tone

61
00:02:01,840 --> 00:02:05,360
we're also printing touched

62
00:02:05,439 --> 00:02:08,000
and then the other thing we're doing is

63
00:02:08,000 --> 00:02:08,959
a

64
00:02:08,959 --> 00:02:11,440
fast led lighting effect that is a

65
00:02:11,440 --> 00:02:14,239
breathing pattern

66
00:02:14,480 --> 00:02:16,400
so if we were to try to do this with the

67
00:02:16,400 --> 00:02:18,640
delay it wouldn't work

68
00:02:18,640 --> 00:02:20,640
because basically while we were fading

69
00:02:20,640 --> 00:02:22,319
up or fading down

70
00:02:22,319 --> 00:02:24,319
we would have a delay and during that

71
00:02:24,319 --> 00:02:26,480
delay we couldn't check the cap touch

72
00:02:26,480 --> 00:02:27,840
data

73
00:02:27,840 --> 00:02:29,680
at the same time if we were trying to

74
00:02:29,680 --> 00:02:31,840
check the cap touch data and we had a

75
00:02:31,840 --> 00:02:32,720
delay

76
00:02:32,720 --> 00:02:35,680
it would stop our animation so you can

77
00:02:35,680 --> 00:02:38,400
see how this would be a problem

78
00:02:38,400 --> 00:02:40,640
every n milliseconds is a function that

79
00:02:40,640 --> 00:02:43,680
resolves this issue

80
00:02:43,680 --> 00:02:46,640
basically instead of using a delay we're

81
00:02:46,640 --> 00:02:47,680
saying

82
00:02:47,680 --> 00:02:51,040
don't stop the program but only do this

83
00:02:51,040 --> 00:02:55,120
certain thing every n milliseconds

84
00:02:55,120 --> 00:02:58,159
the n meaning how many milliseconds

85
00:02:58,159 --> 00:03:00,159
is listed in the parentheses of this

86
00:03:00,159 --> 00:03:01,280
function

87
00:03:01,280 --> 00:03:04,560
so our first part of this loop is

88
00:03:04,560 --> 00:03:07,920
doing something every 250 milliseconds

89
00:03:07,920 --> 00:03:11,120
or every quarter of a second and every

90
00:03:11,120 --> 00:03:12,800
quarter of a second

91
00:03:12,800 --> 00:03:15,680
we are reading our cap touch data and if

92
00:03:15,680 --> 00:03:17,519
it's over the threshold

93
00:03:17,519 --> 00:03:19,680
we're printing touched and then we're

94
00:03:19,680 --> 00:03:21,599
also playing a tone

95
00:03:21,599 --> 00:03:24,799
for a second if

96
00:03:24,799 --> 00:03:26,319
it's not over the threshold we're

97
00:03:26,319 --> 00:03:28,080
currently not doing anything

98
00:03:28,080 --> 00:03:30,000
but as a challenge feel free to put in

99
00:03:30,000 --> 00:03:31,360
whatever you like here

100
00:03:31,360 --> 00:03:33,120
you could put in a serial print line

101
00:03:33,120 --> 00:03:34,640
statement or

102
00:03:34,640 --> 00:03:36,080
playing a different tone if you wanted

103
00:03:36,080 --> 00:03:39,920
to consistently be making sounds

104
00:03:39,920 --> 00:03:41,840
in the second part of our loop we have

105
00:03:41,840 --> 00:03:47,200
another every n millisecond statement

106
00:03:47,200 --> 00:03:49,920
here our argument is 10 milliseconds so

107
00:03:49,920 --> 00:03:52,080
this is very fast

108
00:03:52,080 --> 00:03:54,080
and this is the rate at which we need to

109
00:03:54,080 --> 00:03:56,480
have the animation functioning

110
00:03:56,480 --> 00:03:59,599
because we're fading up and fading down

111
00:03:59,599 --> 00:04:01,360
if we were to change this we would get a

112
00:04:01,360 --> 00:04:03,360
different breathing pattern

113
00:04:03,360 --> 00:04:05,519
you can give this a try try changing it

114
00:04:05,519 --> 00:04:08,159
to 200 and see what happens

115
00:04:08,159 --> 00:04:10,400
but if we have it at 10 we can see it's

116
00:04:10,400 --> 00:04:12,560
a smooth breathing pattern that goes up

117
00:04:12,560 --> 00:04:16,320
and down because these are both

118
00:04:16,320 --> 00:04:18,720
in different every n milliseconds loops

119
00:04:18,720 --> 00:04:22,400
they don't interfere with one another

120
00:04:22,720 --> 00:04:25,040
every n milliseconds uses the internal

121
00:04:25,040 --> 00:04:26,960
clock of the circuit playground

122
00:04:26,960 --> 00:04:30,880
to keep time and every n milliseconds

123
00:04:30,880 --> 00:04:32,880
it will change whatever is within the

124
00:04:32,880 --> 00:04:35,199
loop

125
00:04:35,360 --> 00:04:37,600
you can try adding different every n

126
00:04:37,600 --> 00:04:39,040
milliseconds loops

127
00:04:39,040 --> 00:04:43,520
to see if you can have a third behavior

128
00:04:43,520 --> 00:04:45,360
here we can see the breathing pattern at

129
00:04:45,360 --> 00:04:46,800
work

130
00:04:46,800 --> 00:04:48,880
and when we touch the cap touch pin we

131
00:04:48,880 --> 00:04:56,800
can play a tone

132
00:04:56,800 --> 00:04:58,479
here you can see the breathing pattern

133
00:04:58,479 --> 00:05:02,960
at work inside some organs of fabric

134
00:05:03,680 --> 00:05:05,520
another way to keep time that's a little

135
00:05:05,520 --> 00:05:08,479
more organized is using timers

136
00:05:08,479 --> 00:05:10,240
for an example of this open up the

137
00:05:10,240 --> 00:05:14,080
sketch 3 basic timer

138
00:05:14,639 --> 00:05:17,360
a basic timer allows us to keep track of

139
00:05:17,360 --> 00:05:18,800
time

140
00:05:18,800 --> 00:05:21,840
and just like every n milliseconds we

141
00:05:21,840 --> 00:05:24,560
can have something happen by tracking

142
00:05:24,560 --> 00:05:27,120
this time value

143
00:05:27,120 --> 00:05:30,000
in this sketch we have an event update

144
00:05:30,000 --> 00:05:31,280
time

145
00:05:31,280 --> 00:05:33,280
this is the time at which we will do

146
00:05:33,280 --> 00:05:35,120
whatever we we want to do in our

147
00:05:35,120 --> 00:05:37,280
interactivity

148
00:05:37,280 --> 00:05:39,280
we're going to do it every 1000

149
00:05:39,280 --> 00:05:42,960
milliseconds or every second

150
00:05:42,960 --> 00:05:46,080
then we have a value to hold the time

151
00:05:46,080 --> 00:05:48,560
it's an unsigned long which means it's a

152
00:05:48,560 --> 00:05:50,000
very long number

153
00:05:50,000 --> 00:05:52,000
and we need to have this be an unsigned

154
00:05:52,000 --> 00:05:54,479
long or we might accidentally overflow

155
00:05:54,479 --> 00:05:55,440
the variable

156
00:05:55,440 --> 00:05:57,440
this is true of any variable that's

157
00:05:57,440 --> 00:06:00,960
going to hold a millis value

158
00:06:00,960 --> 00:06:04,080
then in our loop we see if millies

159
00:06:04,080 --> 00:06:07,520
is greater than timing millies millis

160
00:06:07,520 --> 00:06:09,280
as you can tell by the fact that it's

161
00:06:09,280 --> 00:06:12,160
orange is a built-in arduino function

162
00:06:12,160 --> 00:06:14,720
and what it does is it returns the time

163
00:06:14,720 --> 00:06:15,840
in milliseconds

164
00:06:15,840 --> 00:06:19,440
since the sketch ran so what we're doing

165
00:06:19,440 --> 00:06:22,400
is we're checking to see if the time

166
00:06:22,400 --> 00:06:23,759
that the sketch ran

167
00:06:23,759 --> 00:06:27,840
is greater than our timing millies value

168
00:06:27,840 --> 00:06:30,319
to begin with that value is zero so

169
00:06:30,319 --> 00:06:31,440
we'll start out

170
00:06:31,440 --> 00:06:34,560
with our loop in our loop we do

171
00:06:34,560 --> 00:06:35,520
something

172
00:06:35,520 --> 00:06:37,840
once the time has elapsed in this case

173
00:06:37,840 --> 00:06:39,520
i'm just doing a print statement to

174
00:06:39,520 --> 00:06:40,000
print

175
00:06:40,000 --> 00:06:44,560
boop after that event i update my timer

176
00:06:44,560 --> 00:06:47,039
and now timing millies equals millies

177
00:06:47,039 --> 00:06:48,800
which again is the amount of time that's

178
00:06:48,800 --> 00:06:51,520
elapsed since we first ran our sketch

179
00:06:51,520 --> 00:06:54,720
plus the event update timer so what this

180
00:06:54,720 --> 00:06:56,160
is doing is it's keeping

181
00:06:56,160 --> 00:06:59,360
constant track of the time and it's

182
00:06:59,360 --> 00:06:59,840
saying

183
00:06:59,840 --> 00:07:02,639
if the amount of time has elapsed then

184
00:07:02,639 --> 00:07:05,599
we want to do whatever is in our loop

185
00:07:05,599 --> 00:07:07,599
and if not we're not doing anything but

186
00:07:07,599 --> 00:07:09,440
we could include an else statement if we

187
00:07:09,440 --> 00:07:11,360
wanted to

188
00:07:11,360 --> 00:07:12,800
this will make more sense once you

189
00:07:12,800 --> 00:07:14,639
upload the sketch when you look at

190
00:07:14,639 --> 00:07:15,599
serial monitor

191
00:07:15,599 --> 00:07:17,520
you can see that every thousand

192
00:07:17,520 --> 00:07:19,440
milliseconds or every second

193
00:07:19,440 --> 00:07:23,280
it's printing boop if we wanted to

194
00:07:23,280 --> 00:07:25,840
we could change the timer and have boob

195
00:07:25,840 --> 00:07:27,599
print faster

196
00:07:27,599 --> 00:07:29,280
now it'll print every quarter of a

197
00:07:29,280 --> 00:07:31,840
second

198
00:07:32,639 --> 00:07:34,000
now we see that it's printing every

199
00:07:34,000 --> 00:07:35,759
quarter of a second

200
00:07:35,759 --> 00:07:37,280
instead of having a serial print

201
00:07:37,280 --> 00:07:40,000
statement we could have a lighting loop

202
00:07:40,000 --> 00:07:43,039
or we could have it play a tone give

203
00:07:43,039 --> 00:07:44,240
this a try

204
00:07:44,240 --> 00:07:47,280
i've updated my loop so that now every

205
00:07:47,280 --> 00:07:50,560
three seconds or 3000 milliseconds it'll

206
00:07:50,560 --> 00:07:51,599
play a tone

207
00:07:51,599 --> 00:07:53,680
then it'll update my timer you could

208
00:07:53,680 --> 00:07:55,520
create multiple timers for different

209
00:07:55,520 --> 00:07:56,960
events

210
00:07:56,960 --> 00:07:59,120
and in this way you can keep track of

211
00:07:59,120 --> 00:08:00,319
what's happening

212
00:08:00,319 --> 00:08:03,039
and easily change when it occurs without

213
00:08:03,039 --> 00:08:05,840
having to dig through your code

214
00:08:05,840 --> 00:08:08,160
for a sort of tricky challenge can you

215
00:08:08,160 --> 00:08:10,160
rewrite the every end millisecond

216
00:08:10,160 --> 00:08:12,319
sketch that has the breathing lighting

217
00:08:12,319 --> 00:08:14,160
animation to use a timer

218
00:08:14,160 --> 00:08:16,639
instead of every n milliseconds give it

219
00:08:16,639 --> 00:08:17,680
a try

220
00:08:17,680 --> 00:08:19,919
up until now we've explored two exciting

221
00:08:19,919 --> 00:08:22,000
outputs lighting and sound

222
00:08:22,000 --> 00:08:23,599
but there's a third output that we're

223
00:08:23,599 --> 00:08:25,199
missing that opens up the door for

224
00:08:25,199 --> 00:08:25,840
incredibly

225
00:08:25,840 --> 00:08:28,879
interesting interactivity movement

226
00:08:28,879 --> 00:08:30,560
in the next section we'll hook up our

227
00:08:30,560 --> 00:08:32,559
servo to dip our toes into the robust

228
00:08:32,559 --> 00:08:34,880
world of robotics and animatronics

229
00:08:34,880 --> 00:08:36,799
we'll learn how to control servos the

230
00:08:36,799 --> 00:08:38,799
difference between servos and motors

231
00:08:38,799 --> 00:08:40,640
considerations for using more robust

232
00:08:40,640 --> 00:08:42,640
turbos and in general how to make

233
00:08:42,640 --> 00:08:44,640
projects that have moving parts

234
00:08:44,640 --> 00:08:46,560
we'll also see some work from some of my

235
00:08:46,560 --> 00:08:48,080
favorite artists who are working in the

236
00:08:48,080 --> 00:08:50,080
fields of installation art and wearable

237
00:08:50,080 --> 00:08:51,440
electronics

238
00:08:51,440 --> 00:08:54,480
let's jump in so what

239
00:08:54,480 --> 00:08:57,440
are servos well a servo is an electronic

240
00:08:57,440 --> 00:08:58,240
component

241
00:08:58,240 --> 00:08:59,920
that allows us to make projects that

242
00:08:59,920 --> 00:09:01,920
have moving parts

243
00:09:01,920 --> 00:09:04,640
servos can rotate to a specific degree

244
00:09:04,640 --> 00:09:04,959
or

245
00:09:04,959 --> 00:09:07,440
move back and forth continuously we'll

246
00:09:07,440 --> 00:09:09,760
try this out to see how it works

247
00:09:09,760 --> 00:09:12,320
servos have a power a ground and a data

248
00:09:12,320 --> 00:09:14,560
line the data line is what allows us to

249
00:09:14,560 --> 00:09:15,200
control

250
00:09:15,200 --> 00:09:17,839
the degree servos also come with

251
00:09:17,839 --> 00:09:19,920
attachment arms that allow us to

252
00:09:19,920 --> 00:09:22,000
attach materials to them extending their

253
00:09:22,000 --> 00:09:24,480
use these arms will often click in place

254
00:09:24,480 --> 00:09:26,160
and then you can secure them using a

255
00:09:26,160 --> 00:09:27,680
screw you can attach

256
00:09:27,680 --> 00:09:30,480
paper clips paper and so on to the arms

257
00:09:30,480 --> 00:09:32,160
in order to demonstrate

258
00:09:32,160 --> 00:09:33,440
other parts that you might want to

259
00:09:33,440 --> 00:09:35,360
attach unlike motors

260
00:09:35,360 --> 00:09:38,880
servos often can only rotate 180 degrees

261
00:09:38,880 --> 00:09:40,720
this makes them ideal when you want to

262
00:09:40,720 --> 00:09:42,560
move something to a specific angle

263
00:09:42,560 --> 00:09:44,160
but not when you want a continuous

264
00:09:44,160 --> 00:09:46,480
rotation in that case you'd probably use

265
00:09:46,480 --> 00:09:47,360
a motor

266
00:09:47,360 --> 00:09:49,279
to connect our servo to our circuit

267
00:09:49,279 --> 00:09:50,480
playground express

268
00:09:50,480 --> 00:09:52,240
we're going to want to use the alligator

269
00:09:52,240 --> 00:09:54,160
clips that have a male jumper

270
00:09:54,160 --> 00:09:56,640
end you're going to want to make sure

271
00:09:56,640 --> 00:09:58,000
that the brown pin

272
00:09:58,000 --> 00:10:00,880
goes to ground on your controller that

273
00:10:00,880 --> 00:10:01,839
the red

274
00:10:01,839 --> 00:10:06,000
goes to v out and that orange goes to a3

275
00:10:06,000 --> 00:10:10,480
open up the sketch 3 servo position

276
00:10:10,480 --> 00:10:12,320
in this sketch we aren't including the

277
00:10:12,320 --> 00:10:14,480
adafruit circuit playground library

278
00:10:14,480 --> 00:10:16,839
instead we're including the servo

279
00:10:16,839 --> 00:10:18,320
library

280
00:10:18,320 --> 00:10:21,120
next we have our servo pin defined as

281
00:10:21,120 --> 00:10:22,399
10.

282
00:10:22,399 --> 00:10:25,040
we can either define this ripo pin as 10

283
00:10:25,040 --> 00:10:27,120
or write it as it is below

284
00:10:27,120 --> 00:10:29,600
where we attach it to 10. either one

285
00:10:29,600 --> 00:10:30,959
will work

286
00:10:30,959 --> 00:10:33,360
we also have a delay value of a thousand

287
00:10:33,360 --> 00:10:35,279
milliseconds or one second

288
00:10:35,279 --> 00:10:37,839
and then we have a servo object servo my

289
00:10:37,839 --> 00:10:39,120
servo

290
00:10:39,120 --> 00:10:41,760
this is referring to our servo object if

291
00:10:41,760 --> 00:10:43,519
we had more than one servo we'd have to

292
00:10:43,519 --> 00:10:45,680
create multiple objects

293
00:10:45,680 --> 00:10:47,360
finally we have an integer that's

294
00:10:47,360 --> 00:10:49,279
holding our position

295
00:10:49,279 --> 00:10:52,560
in this case we're starting at 0 degrees

296
00:10:52,560 --> 00:10:54,640
this could be anything from 0 degrees to

297
00:10:54,640 --> 00:10:55,680
180

298
00:10:55,680 --> 00:10:58,839
because our servo only goes to 180

299
00:10:58,839 --> 00:11:00,800
degrees

300
00:11:00,800 --> 00:11:05,680
finally in setup we have myservo.attach

301
00:11:05,680 --> 00:11:08,560
and then in parentheses we have 10.

302
00:11:08,560 --> 00:11:09,120
again

303
00:11:09,120 --> 00:11:11,440
10 is the digital pin that our servo is

304
00:11:11,440 --> 00:11:13,040
attached to which is also

305
00:11:13,040 --> 00:11:15,360
3.

306
00:11:16,800 --> 00:11:20,200
then in our loop we have the function

307
00:11:20,200 --> 00:11:22,000
myservo.write90.

308
00:11:22,000 --> 00:11:25,279
this is telling the servo to write

309
00:11:25,279 --> 00:11:28,320
itself to 90 degrees meaning to change

310
00:11:28,320 --> 00:11:29,120
its position

311
00:11:29,120 --> 00:11:32,160
to 90 degrees then we have a short delay

312
00:11:32,160 --> 00:11:34,160
of our delay value

313
00:11:34,160 --> 00:11:36,640
in the next line we have my servo.write

314
00:11:36,640 --> 00:11:37,200
0

315
00:11:37,200 --> 00:11:39,600
telling it to go back to 0 degrees and

316
00:11:39,600 --> 00:11:41,760
then another delay

317
00:11:41,760 --> 00:11:43,279
can you guess what this behavior would

318
00:11:43,279 --> 00:11:45,680
be like

319
00:11:46,880 --> 00:11:48,959
as you might have guessed the servo goes

320
00:11:48,959 --> 00:11:50,160
from 0

321
00:11:50,160 --> 00:11:54,000
to 90 degrees and back open the sketch

322
00:11:54,000 --> 00:11:57,760
3 servo sweep this sketch allows us to

323
00:11:57,760 --> 00:12:00,079
have a continuous sweeping motion

324
00:12:00,079 --> 00:12:02,959
but how will we do this well using a for

325
00:12:02,959 --> 00:12:04,560
loop of course

326
00:12:04,560 --> 00:12:06,639
so in our loop function you see that we

327
00:12:06,639 --> 00:12:08,399
have a for loop

328
00:12:08,399 --> 00:12:10,959
this sweeps the servo arm forward and

329
00:12:10,959 --> 00:12:13,600
back from zero to 180 degrees

330
00:12:13,600 --> 00:12:17,839
which is as far as the servo arm can go

331
00:12:17,839 --> 00:12:19,760
you can see that in our for loop we're

332
00:12:19,760 --> 00:12:24,079
starting with a position of zero

333
00:12:24,079 --> 00:12:26,399
then while the position is less than or

334
00:12:26,399 --> 00:12:27,120
equal to

335
00:12:27,120 --> 00:12:30,320
180 which is the maximum degree it can

336
00:12:30,320 --> 00:12:31,279
go

337
00:12:31,279 --> 00:12:33,279
we want to increment increasing the

338
00:12:33,279 --> 00:12:36,000
position one each time

339
00:12:36,000 --> 00:12:38,880
we then have our myservo.write statement

340
00:12:38,880 --> 00:12:40,560
and a small delay

341
00:12:40,560 --> 00:12:43,360
in the next loop we're going from 180

342
00:12:43,360 --> 00:12:44,399
degrees

343
00:12:44,399 --> 00:12:49,360
back down to zero and we're decrementing

344
00:12:49,360 --> 00:12:52,639
so going down each time

345
00:12:52,639 --> 00:12:54,560
and then we have again my servo dot

346
00:12:54,560 --> 00:12:57,279
right position

347
00:12:57,279 --> 00:13:00,079
give this a try

348
00:13:00,399 --> 00:13:04,639
our servo now has a smooth sweeping

349
00:13:04,839 --> 00:13:07,839
motion

350
00:13:10,639 --> 00:13:12,560
you might have noticed that our servo is

351
00:13:12,560 --> 00:13:14,800
only capable of moving very lightweight

352
00:13:14,800 --> 00:13:16,160
things

353
00:13:16,160 --> 00:13:18,399
if you want to move a heavier object

354
00:13:18,399 --> 00:13:21,279
you're going to need a beefier servo

355
00:13:21,279 --> 00:13:24,560
but what kind of servo should you use

356
00:13:24,560 --> 00:13:26,880
servos usually come with a specification

357
00:13:26,880 --> 00:13:27,680
sheet

358
00:13:27,680 --> 00:13:29,440
these will tell us useful information

359
00:13:29,440 --> 00:13:30,959
about the servo

360
00:13:30,959 --> 00:13:32,720
in selecting the servo you'll want to

361
00:13:32,720 --> 00:13:34,480
consider the weight and the resistance

362
00:13:34,480 --> 00:13:36,079
of the material and object you're trying

363
00:13:36,079 --> 00:13:36,880
to move

364
00:13:36,880 --> 00:13:38,959
as well as the speed and the motion

365
00:13:38,959 --> 00:13:40,480
you'll need a servo that's powerful

366
00:13:40,480 --> 00:13:43,440
enough to do the job

367
00:13:43,680 --> 00:13:45,600
it's also important to consider if you

368
00:13:45,600 --> 00:13:48,240
need a servo or a motor

369
00:13:48,240 --> 00:13:50,320
servos as i mentioned before are often

370
00:13:50,320 --> 00:13:52,399
limited in their range of rotation

371
00:13:52,399 --> 00:13:55,360
usually they can just do 180 degrees and

372
00:13:55,360 --> 00:13:56,959
motors can usually do

373
00:13:56,959 --> 00:14:00,320
a continuous rotation but continuous

374
00:14:00,320 --> 00:14:03,040
rotation servos also exist and some

375
00:14:03,040 --> 00:14:05,279
motors have encoders so you can rotate

376
00:14:05,279 --> 00:14:06,639
to a specific degree

377
00:14:06,639 --> 00:14:09,199
just like with the servo motors are

378
00:14:09,199 --> 00:14:09,680
usually

379
00:14:09,680 --> 00:14:12,160
heavier but have more power and servos

380
00:14:12,160 --> 00:14:13,279
are usually lighter

381
00:14:13,279 --> 00:14:15,760
but have less power you might also be

382
00:14:15,760 --> 00:14:17,519
wondering how you choose a motor or

383
00:14:17,519 --> 00:14:18,959
servo for your project

384
00:14:18,959 --> 00:14:21,360
animatronics projects can require a lot

385
00:14:21,360 --> 00:14:22,720
of planning when choosing the right

386
00:14:22,720 --> 00:14:25,440
parts especially for a motor or servo

387
00:14:25,440 --> 00:14:27,920
you want to consider speed torque and

388
00:14:27,920 --> 00:14:29,600
load as well as the behavior of whatever

389
00:14:29,600 --> 00:14:30,720
you're creating

390
00:14:30,720 --> 00:14:32,320
do you need something that rotates

391
00:14:32,320 --> 00:14:34,480
continuously or do you need it to rotate

392
00:14:34,480 --> 00:14:36,480
to a specific degree

393
00:14:36,480 --> 00:14:39,199
are the lightness of the parts a concern

394
00:14:39,199 --> 00:14:41,120
if you have concerns about what servo or

395
00:14:41,120 --> 00:14:41,920
motor to use

396
00:14:41,920 --> 00:14:44,160
i recommend hitting up the arduino forum

397
00:14:44,160 --> 00:14:45,600
or searching on the web to see if

398
00:14:45,600 --> 00:14:48,480
someone has done a similar project

399
00:14:48,480 --> 00:14:50,639
animatronics projects usually use a

400
00:14:50,639 --> 00:14:52,560
combination of this position

401
00:14:52,560 --> 00:14:55,360
data and sweeping in order to create

402
00:14:55,360 --> 00:14:57,199
certain motions

403
00:14:57,199 --> 00:15:00,560
can you write your own motions

404
00:15:00,560 --> 00:15:02,639
you can try attaching paperclips and

405
00:15:02,639 --> 00:15:04,880
paper forms to the arms to brainstorm

406
00:15:04,880 --> 00:15:06,720
movements and how you might attach

407
00:15:06,720 --> 00:15:09,839
larger objects more robotics is outside

408
00:15:09,839 --> 00:15:11,279
the scope of this course

409
00:15:11,279 --> 00:15:12,800
but if you're interested i would

410
00:15:12,800 --> 00:15:14,639
encourage you to try building a robotic

411
00:15:14,639 --> 00:15:16,320
arm or robotic vehicle

412
00:15:16,320 --> 00:15:19,279
using one of these tutorials neil

413
00:15:19,279 --> 00:15:20,240
mendoza

414
00:15:20,240 --> 00:15:22,880
is an artist who creates really exciting

415
00:15:22,880 --> 00:15:23,519
funny and

416
00:15:23,519 --> 00:15:25,440
interesting installations involving

417
00:15:25,440 --> 00:15:41,839
moving parts they often make sounds

418
00:15:42,400 --> 00:16:46,140
[Music]

419
00:16:48,839 --> 00:16:51,839
so

420
00:16:55,130 --> 00:17:02,669
[Music]

421
00:17:02,839 --> 00:17:05,839
so

422
00:17:06,460 --> 00:17:12,969
[Music]

423
00:17:16,839 --> 00:17:18,400
so

424
00:17:18,400 --> 00:17:24,319
[Music]

425
00:17:26,940 --> 00:17:33,670
[Music]

426
00:17:34,559 --> 00:17:36,720
another interesting robotics project is

427
00:17:36,720 --> 00:17:38,559
by look mom no computer

428
00:17:38,559 --> 00:17:47,840
it's a furby organ

429
00:17:50,420 --> 00:17:56,249
[Music]

430
00:17:58,840 --> 00:18:01,840
so

431
00:18:08,070 --> 00:18:17,879
[Music]

432
00:18:20,120 --> 00:18:26,840
[Music]

433
00:18:26,840 --> 00:18:29,840
so

434
00:18:30,900 --> 00:18:40,840
[Music]

435
00:18:40,840 --> 00:18:43,840
do

436
00:18:44,480 --> 00:18:46,559
a new quiprect is a robotic fashion

437
00:18:46,559 --> 00:18:48,000
designer who creates

438
00:18:48,000 --> 00:18:50,320
dresses with moving parts that display

439
00:18:50,320 --> 00:18:52,880
emotions

440
00:18:52,880 --> 00:18:55,120
the spider dress features a proximity

441
00:18:55,120 --> 00:18:56,080
sensor

442
00:18:56,080 --> 00:18:58,400
when someone approaches too quickly the

443
00:18:58,400 --> 00:19:00,559
robotic limbs will jut out

444
00:19:00,559 --> 00:19:03,679
creating space for the wearer the

445
00:19:03,679 --> 00:19:04,720
tentacle dress

446
00:19:04,720 --> 00:19:07,600
uses facial recognition in order to tell

447
00:19:07,600 --> 00:19:10,240
what someone's expression is if they're

448
00:19:10,240 --> 00:19:10,960
happy

449
00:19:10,960 --> 00:19:14,240
the tentacles will dance

450
00:19:21,679 --> 00:19:24,160
when as ferrahi's breathing wall uses

451
00:19:24,160 --> 00:19:25,039
motors

452
00:19:25,039 --> 00:19:39,840
to respond to human movements

453
00:19:40,640 --> 00:19:43,200
in banaza's most recent project can the

454
00:19:43,200 --> 00:19:44,880
subaltern speak

455
00:19:44,880 --> 00:19:46,960
she explores creating a morse code

456
00:19:46,960 --> 00:19:47,919
language

457
00:19:47,919 --> 00:19:50,559
with a bunch of tiny eyes that blink

458
00:19:50,559 --> 00:19:50,960
using

459
00:19:50,960 --> 00:19:53,840
small motors

460
00:19:58,630 --> 00:19:59,919
[Applause]

461
00:19:59,919 --> 00:20:01,840
we've gone over a lot of sensors that

462
00:20:01,840 --> 00:20:03,200
can trigger interactivity

463
00:20:03,200 --> 00:20:05,039
but we've left out a couple of very

464
00:20:05,039 --> 00:20:06,640
important pieces of hardware

465
00:20:06,640 --> 00:20:08,159
that are almost always used in

466
00:20:08,159 --> 00:20:10,559
electronics buttons and switches

467
00:20:10,559 --> 00:20:11,679
if you think about the different

468
00:20:11,679 --> 00:20:13,679
electronics in your life they probably

469
00:20:13,679 --> 00:20:16,000
all start with a button or a switch

470
00:20:16,000 --> 00:20:18,240
try to think of some examples light

471
00:20:18,240 --> 00:20:20,320
switches are an easy one how about the

472
00:20:20,320 --> 00:20:22,320
button on your electric toothbrush

473
00:20:22,320 --> 00:20:24,640
or the different modes of a blender what

474
00:20:24,640 --> 00:20:26,320
other buttons and switches can you think

475
00:20:26,320 --> 00:20:27,280
of

476
00:20:27,280 --> 00:20:28,960
in the next section we'll learn how to

477
00:20:28,960 --> 00:20:30,799
use buttons and switches to control the

478
00:20:30,799 --> 00:20:34,159
flow of our programs

479
00:20:34,159 --> 00:20:36,000
the slide switch can be difficult to

480
00:20:36,000 --> 00:20:38,799
locate but if you have a hard time

481
00:20:38,799 --> 00:20:41,440
just look between the reset button and

482
00:20:41,440 --> 00:20:42,320
the jst

483
00:20:42,320 --> 00:20:45,600
jack it's directly across from the usb

484
00:20:45,600 --> 00:20:50,159
port on the far side where it says d7

485
00:20:50,159 --> 00:20:52,159
there you'll find a little tab that you

486
00:20:52,159 --> 00:20:54,080
can move back and forth

487
00:20:54,080 --> 00:20:58,080
give it a try open the sketch

488
00:20:58,080 --> 00:21:02,559
hello slide switch

489
00:21:02,559 --> 00:21:06,799
open up the sketch 3 hello slide switch

490
00:21:06,799 --> 00:21:08,720
in this sketch we've set our slide

491
00:21:08,720 --> 00:21:11,760
switch object to a boolean value

492
00:21:11,760 --> 00:21:14,880
a boolean is either on or off so it

493
00:21:14,880 --> 00:21:16,480
makes sense that we would select this

494
00:21:16,480 --> 00:21:17,760
for our slide switch

495
00:21:17,760 --> 00:21:19,600
because it can only be in two states

496
00:21:19,600 --> 00:21:21,120
either on or off

497
00:21:21,120 --> 00:21:23,360
then in our loop we're reading the slide

498
00:21:23,360 --> 00:21:24,559
switch state

499
00:21:24,559 --> 00:21:26,640
and setting it equal to slide switch

500
00:21:26,640 --> 00:21:28,559
this is done with circuit playground dot

501
00:21:28,559 --> 00:21:31,039
slide switch

502
00:21:31,039 --> 00:21:32,799
then we're printing the state of the

503
00:21:32,799 --> 00:21:35,840
slide switch here we see if slide switch

504
00:21:35,840 --> 00:21:39,200
meaning if slide switch is true meaning

505
00:21:39,200 --> 00:21:42,480
if the slide switch is switched to on

506
00:21:42,480 --> 00:21:46,000
then we print a plus else if the slide

507
00:21:46,000 --> 00:21:48,000
switch is not set to on

508
00:21:48,000 --> 00:21:50,320
we print a negative then we have a delay

509
00:21:50,320 --> 00:21:51,520
of one second

510
00:21:51,520 --> 00:21:53,840
upload the sketch and then try sliding

511
00:21:53,840 --> 00:21:56,080
the slide switch back and forth

512
00:21:56,080 --> 00:21:58,000
if you have trouble locating it you can

513
00:21:58,000 --> 00:22:00,640
look at the diagram again

514
00:22:00,640 --> 00:22:02,960
the circuit playground express also has

515
00:22:02,960 --> 00:22:04,000
two buttons

516
00:22:04,000 --> 00:22:07,360
that are already on board these buttons

517
00:22:07,360 --> 00:22:09,520
are located on either side of the reset

518
00:22:09,520 --> 00:22:11,679
button which is in the center

519
00:22:11,679 --> 00:22:13,679
they can be used to control the flow of

520
00:22:13,679 --> 00:22:15,280
your program and to trigger

521
00:22:15,280 --> 00:22:17,440
interactivity

522
00:22:17,440 --> 00:22:21,760
open the sketch three hello buttons

523
00:22:22,080 --> 00:22:24,000
our button sketch looks very similar to

524
00:22:24,000 --> 00:22:26,480
our slide switch sketch

525
00:22:26,480 --> 00:22:28,559
but here we have two buttons so at the

526
00:22:28,559 --> 00:22:31,039
top we declare two different objects

527
00:22:31,039 --> 00:22:33,200
we have a boolean value for left button

528
00:22:33,200 --> 00:22:35,520
pressed and a boolean value for right

529
00:22:35,520 --> 00:22:36,799
button pressed

530
00:22:36,799 --> 00:22:39,760
this will hold the state of our button

531
00:22:39,760 --> 00:22:40,080
so

532
00:22:40,080 --> 00:22:42,159
the button can either be pressed or not

533
00:22:42,159 --> 00:22:44,080
pressed so it makes sense to have a

534
00:22:44,080 --> 00:22:46,159
boolean value

535
00:22:46,159 --> 00:22:47,760
then in our loop as you might have

536
00:22:47,760 --> 00:22:50,400
guessed we have our left button pressed

537
00:22:50,400 --> 00:22:52,720
assigned to circuitplayground.left

538
00:22:52,720 --> 00:22:53,600
button

539
00:22:53,600 --> 00:22:56,720
which reads the state of the button

540
00:22:56,720 --> 00:22:58,640
we have the same for the right button

541
00:22:58,640 --> 00:22:59,799
except it's circuit

542
00:22:59,799 --> 00:23:02,799
playground.writebutton

543
00:23:02,880 --> 00:23:04,799
then we're printing out the state of the

544
00:23:04,799 --> 00:23:06,240
button again

545
00:23:06,240 --> 00:23:08,799
if the left button has been pressed

546
00:23:08,799 --> 00:23:09,360
meaning

547
00:23:09,360 --> 00:23:12,320
if left button pressed equals true then

548
00:23:12,320 --> 00:23:13,039
we'll print

549
00:23:13,039 --> 00:23:16,080
down because the button has pressed down

550
00:23:16,080 --> 00:23:19,200
else will print up we do the same for

551
00:23:19,200 --> 00:23:20,400
the right button

552
00:23:20,400 --> 00:23:22,960
and then we have a delay of one second

553
00:23:22,960 --> 00:23:25,120
give this a try and try pressing either

554
00:23:25,120 --> 00:23:26,559
of the buttons

555
00:23:26,559 --> 00:23:28,559
buttons and switches can be used to

556
00:23:28,559 --> 00:23:29,760
control the flow

557
00:23:29,760 --> 00:23:32,799
of our interactivity

558
00:23:32,799 --> 00:23:35,200
as a challenge can you change the code

559
00:23:35,200 --> 00:23:36,799
for hello's slide switch

560
00:23:36,799 --> 00:23:38,799
and hello buttons so that a tone is

561
00:23:38,799 --> 00:23:40,400
played when the slide switch is switched

562
00:23:40,400 --> 00:23:41,279
to on

563
00:23:41,279 --> 00:23:44,000
or when the buttons are pressed can you

564
00:23:44,000 --> 00:23:45,919
set a different tone to play for each

565
00:23:45,919 --> 00:23:47,360
button

566
00:23:47,360 --> 00:23:49,679
how about triggering a fast led lighting

567
00:23:49,679 --> 00:23:51,200
loop

568
00:23:51,200 --> 00:23:53,279
hint you might have to use the every n

569
00:23:53,279 --> 00:23:54,400
milliseconds

570
00:23:54,400 --> 00:23:58,559
or a timer in order to avoid blocking

571
00:23:58,559 --> 00:24:00,720
for a second challenge try to write a

572
00:24:00,720 --> 00:24:03,039
program that sweeps the servo arm from

573
00:24:03,039 --> 00:24:04,799
right to left when you press the left

574
00:24:04,799 --> 00:24:05,760
button

575
00:24:05,760 --> 00:24:07,440
and from left to right when you press

576
00:24:07,440 --> 00:24:09,279
the right button

577
00:24:09,279 --> 00:24:11,919
how would you go about doing this if you

578
00:24:11,919 --> 00:24:12,960
get stuck

579
00:24:12,960 --> 00:24:15,360
have a look at the button sketch and

580
00:24:15,360 --> 00:24:16,720
also have a look

581
00:24:16,720 --> 00:24:20,559
at our servo sweep sketch let's open up

582
00:24:20,559 --> 00:24:22,720
the hello button sketch and also the

583
00:24:22,720 --> 00:24:24,240
servo sweep sketch

584
00:24:24,240 --> 00:24:25,840
then let's create a new sketch in

585
00:24:25,840 --> 00:24:27,520
arduino

586
00:24:27,520 --> 00:24:29,520
in the sketch let's begin by including

587
00:24:29,520 --> 00:24:33,840
the adafruit circuit playground library

588
00:24:34,159 --> 00:24:36,440
we also see that we need to include

589
00:24:36,440 --> 00:24:40,400
servo.h which is a library for our servo

590
00:24:40,400 --> 00:24:43,039
and we also need to define which pin our

591
00:24:43,039 --> 00:24:44,720
servo is attached to

592
00:24:44,720 --> 00:24:46,720
then we need to create an object to

593
00:24:46,720 --> 00:24:47,919
control the servo

594
00:24:47,919 --> 00:24:49,760
and we need to have a position that's

595
00:24:49,760 --> 00:24:50,960
stored

596
00:24:50,960 --> 00:24:54,720
so let's select all of this and copy it

597
00:24:54,720 --> 00:25:01,039
into our new sketch in hello buttons

598
00:25:01,039 --> 00:25:03,679
we need booleans that hold the left and

599
00:25:03,679 --> 00:25:05,840
right button press date

600
00:25:05,840 --> 00:25:08,960
so let's copy those two

601
00:25:08,960 --> 00:25:10,640
now we have everything that's copied

602
00:25:10,640 --> 00:25:14,400
before or setup

603
00:25:14,400 --> 00:25:16,880
in setup we're going to want to have our

604
00:25:16,880 --> 00:25:18,159
servo attached

605
00:25:18,159 --> 00:25:20,880
to our pin

606
00:25:21,679 --> 00:25:24,000
then we're going to want to have serial

607
00:25:24,000 --> 00:25:25,760
begin so that we can print a serial

608
00:25:25,760 --> 00:25:26,960
monitor

609
00:25:26,960 --> 00:25:28,799
and we're also going to want to initiate

610
00:25:28,799 --> 00:25:31,840
our circuit playground

611
00:25:33,039 --> 00:25:34,400
that should be everything that we need

612
00:25:34,400 --> 00:25:37,120
to do in setup

613
00:25:37,120 --> 00:25:40,720
now the tricky part is the loop

614
00:25:40,720 --> 00:25:42,720
the main control flow is when the

615
00:25:42,720 --> 00:25:44,240
buttons are pressed

616
00:25:44,240 --> 00:25:48,080
so let's copy all of that first

617
00:25:53,039 --> 00:25:54,559
now in our loop we're checking the

618
00:25:54,559 --> 00:25:56,320
button state and then

619
00:25:56,320 --> 00:25:57,919
if the left button is pressed we're

620
00:25:57,919 --> 00:25:59,760
doing something and if the right button

621
00:25:59,760 --> 00:26:01,279
is pressed we're doing something else

622
00:26:01,279 --> 00:26:02,880
let's write some pseudo codes so we can

623
00:26:02,880 --> 00:26:04,640
remember what it is that we actually

624
00:26:04,640 --> 00:26:06,799
have to put in

625
00:26:06,799 --> 00:26:10,960
if the left button is pressed we want to

626
00:26:10,960 --> 00:26:14,000
rotate servo

627
00:26:14,480 --> 00:26:18,400
from right

628
00:26:18,400 --> 00:26:24,880
to left

629
00:26:24,880 --> 00:26:28,159
and if our right button is pressed

630
00:26:28,159 --> 00:26:32,480
we want to rotate servo

631
00:26:32,480 --> 00:26:38,559
from left to right

632
00:26:38,559 --> 00:26:40,880
we don't have to print down or up so

633
00:26:40,880 --> 00:26:43,039
let's remove those lines

634
00:26:43,039 --> 00:26:45,760
and we also aren't doing anything in the

635
00:26:45,760 --> 00:26:46,400
case

636
00:26:46,400 --> 00:26:53,840
where the buttons aren't being pressed

637
00:26:53,840 --> 00:26:56,480
now we have our pseudocode we can start

638
00:26:56,480 --> 00:26:57,120
to put in

639
00:26:57,120 --> 00:27:01,120
our code for changing our position

640
00:27:01,120 --> 00:27:03,039
in our loop we see that we're going from

641
00:27:03,039 --> 00:27:06,240
zero degrees to 180 degrees and then

642
00:27:06,240 --> 00:27:07,200
we're going back

643
00:27:07,200 --> 00:27:10,559
from 180 degrees to zero degrees

644
00:27:10,559 --> 00:27:14,320
so what we can do is we can say

645
00:27:14,320 --> 00:27:18,240
that for our going from left to right

646
00:27:18,240 --> 00:27:22,960
we can go from 0 to 180 degrees

647
00:27:28,559 --> 00:27:31,360
and then if we want to go left we can

648
00:27:31,360 --> 00:27:32,240
copy

649
00:27:32,240 --> 00:27:35,840
going in the other direction

650
00:27:37,600 --> 00:27:41,120
let's give this a try the circuit

651
00:27:41,120 --> 00:27:42,960
playground comes with a powerful

652
00:27:42,960 --> 00:27:46,880
mems accelerometer in the very center

653
00:27:46,880 --> 00:27:49,520
this is labeled with an x y and z

654
00:27:49,520 --> 00:27:51,840
because it can measure three values

655
00:27:51,840 --> 00:27:54,799
x orientation y orientation and z

656
00:27:54,799 --> 00:27:57,279
orientation

657
00:27:57,279 --> 00:27:59,840
accelerometers are popular devices that

658
00:27:59,840 --> 00:28:01,279
are in your smartphone

659
00:28:01,279 --> 00:28:04,480
wiimote or other devices that sense tilt

660
00:28:04,480 --> 00:28:05,039
gravity

661
00:28:05,039 --> 00:28:08,320
motion and tap effects

662
00:28:08,399 --> 00:28:10,240
an accelerometer like the one included

663
00:28:10,240 --> 00:28:12,159
with the playground measures relative

664
00:28:12,159 --> 00:28:13,840
movement

665
00:28:13,840 --> 00:28:16,640
ours measures in three directions any

666
00:28:16,640 --> 00:28:18,640
change in location of the accelerometer

667
00:28:18,640 --> 00:28:18,960
chip

668
00:28:18,960 --> 00:28:20,640
will be registered as changes in the

669
00:28:20,640 --> 00:28:22,880
values it sends out

670
00:28:22,880 --> 00:28:24,880
you can use this to detect movement in

671
00:28:24,880 --> 00:28:26,240
any of the directions

672
00:28:26,240 --> 00:28:29,120
or you can pull the xyz values and use

673
00:28:29,120 --> 00:28:30,000
the values to see

674
00:28:30,000 --> 00:28:31,760
which directions the motion has taken

675
00:28:31,760 --> 00:28:34,799
place and how much it has moved

676
00:28:34,799 --> 00:28:36,960
if a project needs to detect movement or

677
00:28:36,960 --> 00:28:38,080
measuring movement

678
00:28:38,080 --> 00:28:41,440
an accelerometer is a perfect fit

679
00:28:41,440 --> 00:28:43,520
our accelerometer also includes support

680
00:28:43,520 --> 00:28:45,039
for tap detection

681
00:28:45,039 --> 00:28:47,440
double tap detection orientation

682
00:28:47,440 --> 00:28:48,320
information

683
00:28:48,320 --> 00:28:50,960
i.e which side is up which site is down

684
00:28:50,960 --> 00:28:53,360
and free fall detection

685
00:28:53,360 --> 00:28:55,039
let's learn how to use it by trying it

686
00:28:55,039 --> 00:28:58,080
out from your course files open the

687
00:28:58,080 --> 00:29:01,200
sketch hello accelerometer

688
00:29:01,200 --> 00:29:03,840
open the file hello accelerometer and

689
00:29:03,840 --> 00:29:05,600
check out the built-in 3-axis

690
00:29:05,600 --> 00:29:07,600
motion sensor on the circuit playground

691
00:29:07,600 --> 00:29:09,919
express

692
00:29:09,919 --> 00:29:12,080
as you can see reading motion data from

693
00:29:12,080 --> 00:29:14,159
all three axes is very easy

694
00:29:14,159 --> 00:29:17,840
it's just three different function calls

695
00:29:18,799 --> 00:29:22,480
and then we're just printing the values

696
00:29:24,480 --> 00:29:26,399
note that motion detection is always

697
00:29:26,399 --> 00:29:28,159
relative to the position in which the

698
00:29:28,159 --> 00:29:30,000
circuit playground starts

699
00:29:30,000 --> 00:29:32,000
you can't get objective position data

700
00:29:32,000 --> 00:29:33,279
from an accelerometer

701
00:29:33,279 --> 00:29:35,039
since it's more about motion than

702
00:29:35,039 --> 00:29:36,559
location

703
00:29:36,559 --> 00:29:38,640
put the board on a table with the usb

704
00:29:38,640 --> 00:29:41,360
cable facing away from you

705
00:29:41,360 --> 00:29:43,360
then upload the code and look at serial

706
00:29:43,360 --> 00:29:45,760
monitor

707
00:29:48,399 --> 00:29:51,120
the x-axis is aligned horizontally from

708
00:29:51,120 --> 00:29:52,399
left to right

709
00:29:52,399 --> 00:29:54,799
in a neutral position x should always be

710
00:29:54,799 --> 00:29:56,559
around zero

711
00:29:56,559 --> 00:30:00,158
if you tilt the board to the left

712
00:30:00,240 --> 00:30:03,039
you'll see that x is positive if you

713
00:30:03,039 --> 00:30:05,600
tilt it to the right

714
00:30:05,600 --> 00:30:09,840
you'll see that x is negative

715
00:30:10,159 --> 00:30:12,559
the y axis is aligned vertically from

716
00:30:12,559 --> 00:30:14,480
bottom to top

717
00:30:14,480 --> 00:30:17,200
in a neutral position y should always be

718
00:30:17,200 --> 00:30:19,279
around zero

719
00:30:19,279 --> 00:30:21,600
if you tilt the board forward up towards

720
00:30:21,600 --> 00:30:23,840
you

721
00:30:25,120 --> 00:30:28,080
y is positive

722
00:30:28,240 --> 00:30:31,840
if you tilt the board away from you

723
00:30:32,399 --> 00:30:36,240
y is negative the z-axis is

724
00:30:36,240 --> 00:30:38,399
perpendicular to the board

725
00:30:38,399 --> 00:30:42,080
and pointing down when the board is at

726
00:30:42,080 --> 00:30:42,720
rest

727
00:30:42,720 --> 00:30:45,760
z is aligned with earth's gravity it

728
00:30:45,760 --> 00:30:46,880
should read around

729
00:30:46,880 --> 00:30:51,840
9.8 meters per second each second

730
00:31:13,120 --> 00:31:15,840
open up the sketch hello accelerometer

731
00:31:15,840 --> 00:31:17,279
lighting

732
00:31:17,279 --> 00:31:19,360
in the sketch hello accelerometer

733
00:31:19,360 --> 00:31:21,600
lighting we'll connect some lighting to

734
00:31:21,600 --> 00:31:24,080
the three axes of motion

735
00:31:24,080 --> 00:31:26,320
let's start with something simple once

736
00:31:26,320 --> 00:31:27,440
you've got this down

737
00:31:27,440 --> 00:31:29,120
you can try experimenting with the

738
00:31:29,120 --> 00:31:31,120
animation parameters on your own

739
00:31:31,120 --> 00:31:34,159
to create your own motion-based art

740
00:31:34,159 --> 00:31:35,919
in the sketch we're recording the data

741
00:31:35,919 --> 00:31:38,000
for x y and z

742
00:31:38,000 --> 00:31:40,559
but then we're mapping it to red green

743
00:31:40,559 --> 00:31:42,640
and blue

744
00:31:42,640 --> 00:31:44,399
you can see that we're using our map

745
00:31:44,399 --> 00:31:46,880
function here to convert the max and min

746
00:31:46,880 --> 00:31:48,559
values we're seeing from the

747
00:31:48,559 --> 00:31:51,120
accelerometer to the range we expect for

748
00:31:51,120 --> 00:31:52,320
red green and blue

749
00:31:52,320 --> 00:31:56,320
which is between 0 and 255

750
00:31:56,320 --> 00:31:58,159
it's kind of hard to show this effect in

751
00:31:58,159 --> 00:32:15,840
a video but have a look here

752
00:32:34,880 --> 00:32:38,880
open up the file excel tab

753
00:32:40,080 --> 00:32:41,440
in this sketch we'll look at the

754
00:32:41,440 --> 00:32:43,600
accelerometer's built-in tap and double

755
00:32:43,600 --> 00:32:45,200
tap detection

756
00:32:45,200 --> 00:32:47,120
you can use this to power a star track

757
00:32:47,120 --> 00:32:48,399
com badge

758
00:32:48,399 --> 00:32:50,240
and it's also a big part of the mouse

759
00:32:50,240 --> 00:32:52,320
replacement example i mentioned earlier

760
00:32:52,320 --> 00:32:55,279
which is in the adafruit examples

761
00:32:55,279 --> 00:32:57,600
tap and double tap detection work best

762
00:32:57,600 --> 00:32:59,440
via interrupts which are a built-in

763
00:32:59,440 --> 00:33:00,080
mechanism

764
00:33:00,080 --> 00:33:02,080
arduino provides to allow you to

765
00:33:02,080 --> 00:33:03,840
interrupt normal execution upon

766
00:33:03,840 --> 00:33:05,760
detection of an event

767
00:33:05,760 --> 00:33:07,200
these are a little beyond the scope of

768
00:33:07,200 --> 00:33:09,120
this class but luckily most sensors

769
00:33:09,120 --> 00:33:10,159
which use them

770
00:33:10,159 --> 00:33:12,399
come with an example so you can get

771
00:33:12,399 --> 00:33:14,080
started without knowing too much about

772
00:33:14,080 --> 00:33:17,120
how interrupts work

773
00:33:17,120 --> 00:33:18,640
let's take a look at how this sketch

774
00:33:18,640 --> 00:33:21,679
works upload it as is and have a look at

775
00:33:21,679 --> 00:33:25,840
serial monitor

776
00:33:37,600 --> 00:33:41,279
so how is this sketch working

777
00:33:41,679 --> 00:33:46,159
the magic is all right here on this line

778
00:33:46,159 --> 00:33:48,240
as you can see in the comments there are

779
00:33:48,240 --> 00:33:50,960
different arguments you can give to

780
00:33:50,960 --> 00:33:52,880
set circuitplayground.excel tab in order

781
00:33:52,880 --> 00:33:55,679
to detect different things

782
00:33:55,679 --> 00:33:58,080
you'll use one for single tap detection

783
00:33:58,080 --> 00:33:59,200
as shown

784
00:33:59,200 --> 00:34:02,399
and two for double tap detection zero

785
00:34:02,399 --> 00:34:06,000
turns tap detection off

786
00:34:06,000 --> 00:34:08,239
let's give this a try and try changing

787
00:34:08,239 --> 00:34:09,760
one to two

788
00:34:09,760 --> 00:34:12,879
then try uploading the sketch

789
00:34:12,879 --> 00:34:14,800
now see if you can get it to detect a

790
00:34:14,800 --> 00:34:17,040
double tap

791
00:34:17,040 --> 00:34:18,879
you'll see it print tapped to the serial

792
00:34:18,879 --> 00:34:20,480
monitor when you tap twice

793
00:34:20,480 --> 00:34:21,918
and you should notice that it mostly

794
00:34:21,918 --> 00:34:24,480
doesn't respond to a single tap anymore

795
00:34:24,480 --> 00:34:34,079
pretty cool

796
00:34:34,079 --> 00:34:35,918
you might be wondering what this line is

797
00:34:35,918 --> 00:34:37,280
doing

798
00:34:37,280 --> 00:34:40,320
the first argument takes a digital pin c

799
00:34:40,320 --> 00:34:44,000
play lis 3dh interrupt

800
00:34:44,000 --> 00:34:45,839
which is a defined value that circuit

801
00:34:45,839 --> 00:34:47,359
playground sets up for you in the

802
00:34:47,359 --> 00:34:48,239
library

803
00:34:48,239 --> 00:34:50,159
and converts it from an ordinary digital

804
00:34:50,159 --> 00:34:51,760
pin to an interrupt

805
00:34:51,760 --> 00:34:53,599
this is the pin arduino will be watching

806
00:34:53,599 --> 00:34:55,918
to trigger the interrupt

807
00:34:55,918 --> 00:34:59,920
next comes a function tap time

808
00:35:00,720 --> 00:35:03,520
to be run when the interrupt goes off

809
00:35:03,520 --> 00:35:05,280
note that you can put literally anything

810
00:35:05,280 --> 00:35:06,960
inside your interrupt function

811
00:35:06,960 --> 00:35:08,560
but keep in mind that interrupts will

812
00:35:08,560 --> 00:35:10,640
block ie interrupt

813
00:35:10,640 --> 00:35:13,119
normal execution so normally what you

814
00:35:13,119 --> 00:35:14,960
want to do is something quick

815
00:35:14,960 --> 00:35:16,880
you can just change a global variable

816
00:35:16,880 --> 00:35:18,960
defined as a volatile variable so the

817
00:35:18,960 --> 00:35:20,560
arduino knows that it might change

818
00:35:20,560 --> 00:35:22,079
outside the control block in which it

819
00:35:22,079 --> 00:35:22,960
appears

820
00:35:22,960 --> 00:35:24,800
for instance so that your main loop

821
00:35:24,800 --> 00:35:26,880
knows you've detected a tap

822
00:35:26,880 --> 00:35:30,640
we'll walk through this in a second

823
00:35:30,640 --> 00:35:35,279
the third argument you see is falling

824
00:35:35,839 --> 00:35:39,119
the three options here are falling

825
00:35:39,119 --> 00:35:41,119
interrupt when the pin goes from high to

826
00:35:41,119 --> 00:35:42,560
low

827
00:35:42,560 --> 00:35:46,079
or rising low to high

828
00:35:46,079 --> 00:35:50,160
or change interrupt on both changes

829
00:35:50,160 --> 00:35:52,400
in this case falling and rising are

830
00:35:52,400 --> 00:35:54,000
basically interchangeable

831
00:35:54,000 --> 00:35:56,560
since we only care about a tap but there

832
00:35:56,560 --> 00:35:58,240
are times

833
00:35:58,240 --> 00:36:00,960
ie when reading a momentary button when

834
00:36:00,960 --> 00:36:03,920
this really matters

835
00:36:04,480 --> 00:36:06,720
as a bonus what do you think will happen

836
00:36:06,720 --> 00:36:09,520
if you set it to change

837
00:36:09,520 --> 00:36:11,839
if you said it'll detect two taps every

838
00:36:11,839 --> 00:36:12,560
time you tap

839
00:36:12,560 --> 00:36:15,119
it you're right give it a try and see

840
00:36:15,119 --> 00:36:16,160
what you get

841
00:36:16,160 --> 00:36:17,920
be sure to change it back to falling

842
00:36:17,920 --> 00:36:20,480
afterwards

843
00:36:21,839 --> 00:36:23,920
for more information about interrupts

844
00:36:23,920 --> 00:36:27,839
you can see the arduino reference

845
00:36:28,640 --> 00:36:31,839
open up the file excel tap lighting in

846
00:36:31,839 --> 00:36:32,720
excel tap

847
00:36:32,720 --> 00:36:34,880
lighting we'll make our lights respond

848
00:36:34,880 --> 00:36:36,800
to a double tap

849
00:36:36,800 --> 00:36:38,960
first we'll add our usual fast led

850
00:36:38,960 --> 00:36:41,599
boiler plate to the top of the file

851
00:36:41,599 --> 00:36:44,240
and our usual fast led setup code to set

852
00:36:44,240 --> 00:36:46,399
up

853
00:36:50,320 --> 00:36:52,560
let's also make sure our leds are set to

854
00:36:52,560 --> 00:36:55,839
black to start

855
00:36:58,560 --> 00:37:02,400
to do so we'll say fill leds

856
00:37:02,400 --> 00:37:05,440
and then leds num leds and then give

857
00:37:05,440 --> 00:37:08,400
them a crgb value of black

858
00:37:08,400 --> 00:37:11,839
then we'll do a fast led show call

859
00:37:11,839 --> 00:37:13,920
then we'll want to create a volatile

860
00:37:13,920 --> 00:37:16,160
variable to run our tap detection for

861
00:37:16,160 --> 00:37:20,800
us and let's add a second timer so we

862
00:37:20,800 --> 00:37:22,720
can decide how long we want the lights

863
00:37:22,720 --> 00:37:24,800
to show after someone taps the circuit

864
00:37:24,800 --> 00:37:27,280
playground

865
00:37:28,800 --> 00:37:30,960
let's make this one volatile so we can

866
00:37:30,960 --> 00:37:32,960
use it inside the interrupt

867
00:37:32,960 --> 00:37:34,839
cool now we're ready to change our

868
00:37:34,839 --> 00:37:37,680
lights add the following to the tap time

869
00:37:37,680 --> 00:37:40,160
function

870
00:37:43,520 --> 00:37:46,079
by changing tapped to 1 we'll be

871
00:37:46,079 --> 00:37:49,200
signaling the main execution thread

872
00:37:49,200 --> 00:37:52,000
interrupts are technically threads to

873
00:37:52,000 --> 00:37:54,720
let it know that the interrupt went off

874
00:37:54,720 --> 00:37:58,000
then it'll do our work for us likewise

875
00:37:58,000 --> 00:37:59,200
we're capturing the time

876
00:37:59,200 --> 00:38:01,920
in our tap millies variable so that we

877
00:38:01,920 --> 00:38:04,160
can start a timer based on when we were

878
00:38:04,160 --> 00:38:06,400
inside the interrupt

879
00:38:06,400 --> 00:38:08,400
as above you always want to use this

880
00:38:08,400 --> 00:38:10,960
method because delay and millies

881
00:38:10,960 --> 00:38:13,760
did not work inside interrupt functions

882
00:38:13,760 --> 00:38:15,440
you might notice that you can call

883
00:38:15,440 --> 00:38:17,119
millies over and over inside an

884
00:38:17,119 --> 00:38:18,720
interrupt and it will never

885
00:38:18,720 --> 00:38:21,040
update it's always frozen at the moment

886
00:38:21,040 --> 00:38:23,440
arduino entered the interrupt

887
00:38:23,440 --> 00:38:25,359
that makes it pretty hard to do almost

888
00:38:25,359 --> 00:38:28,880
anything with lighting inside interrupts

889
00:38:28,880 --> 00:38:30,960
next we have a lighting algorithm that's

890
00:38:30,960 --> 00:38:32,079
copied from another

891
00:38:32,079 --> 00:38:34,880
fast led sketch and then we'll add the

892
00:38:34,880 --> 00:38:36,160
following to our loop

893
00:38:36,160 --> 00:38:39,200
and light some lights you might notice

894
00:38:39,200 --> 00:38:40,880
that the logic we're using for our

895
00:38:40,880 --> 00:38:41,920
millis timer

896
00:38:41,920 --> 00:38:43,760
is essentially backwards from what we've

897
00:38:43,760 --> 00:38:46,240
been doing with the lights this is

898
00:38:46,240 --> 00:38:49,280
because a lighting timer runs eternally

899
00:38:49,280 --> 00:38:51,280
we know we always want it to run at the

900
00:38:51,280 --> 00:38:52,800
current value of millies

901
00:38:52,800 --> 00:38:56,400
plus time but in this case we only want

902
00:38:56,400 --> 00:38:58,320
our timer to go off once

903
00:38:58,320 --> 00:39:00,560
and only if the current time is our

904
00:39:00,560 --> 00:39:01,760
interrupt time

905
00:39:01,760 --> 00:39:04,560
plus time so that's why the logic is

906
00:39:04,560 --> 00:39:05,920
backwards

907
00:39:05,920 --> 00:39:07,760
and you'll notice that we don't set tap

908
00:39:07,760 --> 00:39:10,560
melees at the end of our loop this time

909
00:39:10,560 --> 00:39:12,720
instead only the interrupt changes it

910
00:39:12,720 --> 00:39:14,880
this is a good general way to do timing

911
00:39:14,880 --> 00:39:16,480
based on an event

912
00:39:16,480 --> 00:39:18,640
in this case our interrupt but you can

913
00:39:18,640 --> 00:39:19,839
use it when values

914
00:39:19,839 --> 00:39:22,240
exceed a given threshold when buttons

915
00:39:22,240 --> 00:39:23,920
are pressed and more

916
00:39:23,920 --> 00:39:27,040
it's a super useful construct

917
00:39:27,040 --> 00:39:29,520
anyway put it all together or just grab

918
00:39:29,520 --> 00:39:31,440
the excel tap lighting file from our

919
00:39:31,440 --> 00:39:32,560
github

920
00:39:32,560 --> 00:39:43,839
upload it and give it a double tap

921
00:39:48,880 --> 00:39:50,880
by now we've learned enough to work with

922
00:39:50,880 --> 00:39:52,880
multiple inputs and outputs

923
00:39:52,880 --> 00:39:55,599
and write some pretty complicated logic

924
00:39:55,599 --> 00:39:57,440
as a challenge can you write a

925
00:39:57,440 --> 00:39:59,040
non-blocking program

926
00:39:59,040 --> 00:40:00,480
that plays a tone when the circuit

927
00:40:00,480 --> 00:40:02,800
playground express is double tapped

928
00:40:02,800 --> 00:40:05,040
does the breathing animation in every n

929
00:40:05,040 --> 00:40:07,119
milliseconds all the time

930
00:40:07,119 --> 00:40:10,000
except when a1 has been touched then it

931
00:40:10,000 --> 00:40:12,400
should set all the leds to red

932
00:40:12,400 --> 00:40:15,040
unless the slide switch is set to off

933
00:40:15,040 --> 00:40:17,760
then it should set the leds to green

934
00:40:17,760 --> 00:40:20,240
how would you write this when our

935
00:40:20,240 --> 00:40:22,160
projects start to get complicated like

936
00:40:22,160 --> 00:40:22,800
this one

937
00:40:22,800 --> 00:40:24,880
it helps to create a flow chart that

938
00:40:24,880 --> 00:40:26,800
demonstrates each state

939
00:40:26,800 --> 00:40:29,440
and the logic behind each transition

940
00:40:29,440 --> 00:40:31,359
this way we can keep track of what's

941
00:40:31,359 --> 00:40:31,920
doing

942
00:40:31,920 --> 00:40:34,800
what and when here are a couple tools

943
00:40:34,800 --> 00:40:36,079
that are excellent for creating

944
00:40:36,079 --> 00:40:37,599
flowcharts

945
00:40:37,599 --> 00:40:39,520
these tools also allow you to share

946
00:40:39,520 --> 00:40:41,760
documents with friends and co-workers

947
00:40:41,760 --> 00:40:45,040
which can be great for collaboration

948
00:40:45,040 --> 00:40:47,599
flowcharts usually use certain symbols

949
00:40:47,599 --> 00:40:48,800
to designate

950
00:40:48,800 --> 00:40:51,760
what that step is in the flowchart for

951
00:40:51,760 --> 00:40:53,839
example a terminator which would either

952
00:40:53,839 --> 00:40:55,359
be the start or the beginning of your

953
00:40:55,359 --> 00:40:56,240
program

954
00:40:56,240 --> 00:40:59,440
might be an oval a decision is usually a

955
00:40:59,440 --> 00:41:00,960
diamond

956
00:41:00,960 --> 00:41:06,960
input output data is usually a trapezoid

957
00:41:06,960 --> 00:41:10,000
head over to lucidchart or draw.io or

958
00:41:10,000 --> 00:41:12,319
another flowchart tool of your choice

959
00:41:12,319 --> 00:41:14,240
and see if you can make a flowchart to

960
00:41:14,240 --> 00:41:21,839
solve this challenge

961
00:41:36,319 --> 00:41:38,160
here's a flow chart that i made in

962
00:41:38,160 --> 00:41:40,480
draw.io

963
00:41:40,480 --> 00:41:43,040
we have our start and then we have a

964
00:41:43,040 --> 00:41:45,760
polling of our inputs and outputs

965
00:41:45,760 --> 00:41:47,359
on the one hand we want to check if

966
00:41:47,359 --> 00:41:49,359
there's been a double tap

967
00:41:49,359 --> 00:41:50,960
if there hasn't then we don't do

968
00:41:50,960 --> 00:41:54,000
anything but we don't play a tone

969
00:41:54,000 --> 00:41:55,839
if there has been a double tap then we

970
00:41:55,839 --> 00:41:57,359
play a tone

971
00:41:57,359 --> 00:41:59,839
that process happens independently of

972
00:41:59,839 --> 00:42:00,640
whether or not

973
00:42:00,640 --> 00:42:03,359
the cap touch has been triggered so we

974
00:42:03,359 --> 00:42:04,079
can just count

975
00:42:04,079 --> 00:42:07,280
as an independent loop next we want to

976
00:42:07,280 --> 00:42:10,000
check if a1 has been touched

977
00:42:10,000 --> 00:42:11,760
meaning if our capacitive touch has been

978
00:42:11,760 --> 00:42:14,000
triggered if not

979
00:42:14,000 --> 00:42:16,560
then we want our led breathing pattern

980
00:42:16,560 --> 00:42:18,079
but if it has been touched

981
00:42:18,079 --> 00:42:19,440
then we want to check to see if the

982
00:42:19,440 --> 00:42:22,079
slide switch is on if it is we set all

983
00:42:22,079 --> 00:42:23,599
the leds to red

984
00:42:23,599 --> 00:42:26,160
if not then we set them to green so

985
00:42:26,160 --> 00:42:26,960
essentially

986
00:42:26,960 --> 00:42:29,119
there are three states that the leds can

987
00:42:29,119 --> 00:42:31,040
be in a breathing pattern

988
00:42:31,040 --> 00:42:34,000
all green or all red and there's only

989
00:42:34,000 --> 00:42:35,839
one state that the speaker's in

990
00:42:35,839 --> 00:42:38,480
it's either playing a tone or it's not

991
00:42:38,480 --> 00:42:40,640
another useful tool for resolving

992
00:42:40,640 --> 00:42:42,160
interactivity questions

993
00:42:42,160 --> 00:42:45,280
is an interactivity matrix this is

994
00:42:45,280 --> 00:42:47,680
simply a chart or a spreadsheet

995
00:42:47,680 --> 00:42:50,240
that usually lists each of your states

996
00:42:50,240 --> 00:42:52,079
and then also the transition

997
00:42:52,079 --> 00:42:54,880
to go from one state to a next you might

998
00:42:54,880 --> 00:42:55,359
also

999
00:42:55,359 --> 00:42:58,240
list whether or not a input is active

1000
00:42:58,240 --> 00:43:00,240
meaning if it'll change the state or

1001
00:43:00,240 --> 00:43:04,160
it's polling for data or if your outputs

1002
00:43:04,160 --> 00:43:04,880
are active

1003
00:43:04,880 --> 00:43:07,200
and if so what they're doing so for

1004
00:43:07,200 --> 00:43:09,040
example in the simple interactivity

1005
00:43:09,040 --> 00:43:10,000
matrix

1006
00:43:10,000 --> 00:43:13,440
we have a speaker and leds as outputs

1007
00:43:13,440 --> 00:43:15,200
and they have different states

1008
00:43:15,200 --> 00:43:17,280
in the first state we're playing melody

1009
00:43:17,280 --> 00:43:19,520
a and we have cylon

1010
00:43:19,520 --> 00:43:21,760
in the second state we have melody b but

1011
00:43:21,760 --> 00:43:24,800
we're still doing cylon for our leds

1012
00:43:24,800 --> 00:43:27,280
in state 3 we go back to playing melody

1013
00:43:27,280 --> 00:43:28,560
a on our speaker

1014
00:43:28,560 --> 00:43:30,480
but our leds are now playing a fire

1015
00:43:30,480 --> 00:43:31,920
animation

1016
00:43:31,920 --> 00:43:34,480
here's an example of a more complicated

1017
00:43:34,480 --> 00:43:36,400
interactivity matrix

1018
00:43:36,400 --> 00:43:39,200
this lists five different states to a

1019
00:43:39,200 --> 00:43:41,520
game as well as the transition to go

1020
00:43:41,520 --> 00:43:42,480
from one state

1021
00:43:42,480 --> 00:43:45,920
to a next it also lists our inputs and

1022
00:43:45,920 --> 00:43:47,839
whether they're active or inactive

1023
00:43:47,839 --> 00:43:50,000
meaning if they have some sway over that

1024
00:43:50,000 --> 00:43:51,440
state

1025
00:43:51,440 --> 00:43:53,359
and then we have our outputs and what

1026
00:43:53,359 --> 00:43:55,119
they're doing in each state

1027
00:43:55,119 --> 00:43:57,119
let's see if we can use our flow chart

1028
00:43:57,119 --> 00:43:58,800
to write some pseudo code for this

1029
00:43:58,800 --> 00:44:00,240
program

1030
00:44:00,240 --> 00:44:02,160
we want to begin by including the

1031
00:44:02,160 --> 00:44:04,560
adafruit circuit playground library

1032
00:44:04,560 --> 00:44:06,160
then we want to begin serial

1033
00:44:06,160 --> 00:44:09,040
communication in setup

1034
00:44:09,040 --> 00:44:11,280
we also want to initialize the circuit

1035
00:44:11,280 --> 00:44:14,319
playground express

1036
00:44:14,720 --> 00:44:18,240
in our loop function we're going to want

1037
00:44:18,240 --> 00:44:21,200
to assign our cap touch value

1038
00:44:21,200 --> 00:44:25,280
to our reading and hold it in a variable

1039
00:44:25,280 --> 00:44:29,119
better make sure we have that at the top

1040
00:44:35,280 --> 00:44:36,720
then we're going to want to check to see

1041
00:44:36,720 --> 00:44:40,799
if the cap touch pin has been triggered

1042
00:44:43,040 --> 00:44:44,640
you might be thinking about using our

1043
00:44:44,640 --> 00:44:47,759
threshold sketch here

1044
00:44:48,800 --> 00:44:52,400
if it has then we know that we also want

1045
00:44:52,400 --> 00:44:52,960
to check

1046
00:44:52,960 --> 00:44:55,599
to see if the slide switch has been set

1047
00:44:55,599 --> 00:44:57,119
to on

1048
00:44:57,119 --> 00:44:59,200
and if it is just like it says in our

1049
00:44:59,200 --> 00:45:01,599
flow chart we want to turn all the leds

1050
00:45:01,599 --> 00:45:03,040
to red

1051
00:45:03,040 --> 00:45:05,040
if not then we want to turn them all to

1052
00:45:05,040 --> 00:45:07,359
green

1053
00:45:08,400 --> 00:45:10,560
we might write our pseudo code in blocks

1054
00:45:10,560 --> 00:45:11,920
so that we can remember

1055
00:45:11,920 --> 00:45:15,440
what parts need to go where

1056
00:45:15,920 --> 00:45:17,760
so in this case i know i want to do a

1057
00:45:17,760 --> 00:45:19,200
double tap check

1058
00:45:19,200 --> 00:45:22,079
and i also want to do a cap touch check

1059
00:45:22,079 --> 00:45:23,839
and that these will essentially be

1060
00:45:23,839 --> 00:45:24,880
different functions

1061
00:45:24,880 --> 00:45:26,240
because they're two independent

1062
00:45:26,240 --> 00:45:28,720
processes which is easy to see from my

1063
00:45:28,720 --> 00:45:29,760
flowchart

1064
00:45:29,760 --> 00:45:31,599
it has been tapped then we want to play

1065
00:45:31,599 --> 00:45:34,000
a tone when i first started as a

1066
00:45:34,000 --> 00:45:35,599
professional installation artist

1067
00:45:35,599 --> 00:45:37,280
i would often do things a bit out of

1068
00:45:37,280 --> 00:45:39,200
order instead of sitting down and

1069
00:45:39,200 --> 00:45:41,359
narrowing the idea for my program

1070
00:45:41,359 --> 00:45:43,359
doing sketches than flowcharting or

1071
00:45:43,359 --> 00:45:45,200
creating an interactivity matrix

1072
00:45:45,200 --> 00:45:47,599
prototyping and so on i would be running

1073
00:45:47,599 --> 00:45:49,599
back and forth between technologies

1074
00:45:49,599 --> 00:45:51,119
development and testing

1075
00:45:51,119 --> 00:45:52,640
until i finally achieved an

1076
00:45:52,640 --> 00:45:54,640
interactivity that would work

1077
00:45:54,640 --> 00:45:56,160
while there's no shame in doing things

1078
00:45:56,160 --> 00:45:58,240
that way i highly recommend being a bit

1079
00:45:58,240 --> 00:45:59,040
more mindful

1080
00:45:59,040 --> 00:46:01,520
and organized in your projects using

1081
00:46:01,520 --> 00:46:03,920
flowcharts and interactivity matrixes

1082
00:46:03,920 --> 00:46:05,839
writing pseudocode and also paper

1083
00:46:05,839 --> 00:46:08,160
prototyping are extremely useful time

1084
00:46:08,160 --> 00:46:10,560
saving techniques we'll talk a lot more

1085
00:46:10,560 --> 00:46:11,920
about the process of creating

1086
00:46:11,920 --> 00:46:14,000
installations in class 4.

1087
00:46:14,000 --> 00:46:15,520
but in the meantime i'd like you to

1088
00:46:15,520 --> 00:46:17,920
consider your own creators process

1089
00:46:17,920 --> 00:46:20,160
what does it look like do you first turn

1090
00:46:20,160 --> 00:46:21,920
to sketching then flowcharting

1091
00:46:21,920 --> 00:46:23,599
or do you launch right into hands-on

1092
00:46:23,599 --> 00:46:25,119
experimentation

1093
00:46:25,119 --> 00:46:26,880
what questions do you ask yourself when

1094
00:46:26,880 --> 00:46:28,800
you're planning to create something

1095
00:46:28,800 --> 00:46:30,720
for example i like to question whether

1096
00:46:30,720 --> 00:46:32,319
or not my project really needs the

1097
00:46:32,319 --> 00:46:34,640
electronics i'm planning to use at all

1098
00:46:34,640 --> 00:46:36,240
i've found that when i ask myself this

1099
00:46:36,240 --> 00:46:38,319
question i see there's often a simpler

1100
00:46:38,319 --> 00:46:40,640
way to execute the same idea

1101
00:46:40,640 --> 00:46:42,319
if i get too hung up on the use of a

1102
00:46:42,319 --> 00:46:44,400
single technology my project runs the

1103
00:46:44,400 --> 00:46:45,359
risk of becoming

1104
00:46:45,359 --> 00:46:47,440
tech for tech's sake and while it's

1105
00:46:47,440 --> 00:46:49,280
again perfectly acceptable to have a

1106
00:46:49,280 --> 00:46:51,680
work that demonstrates a cool technology

1107
00:46:51,680 --> 00:46:53,280
i feel like the projects which i'm

1108
00:46:53,280 --> 00:46:55,359
really drawn to and which linger on

1109
00:46:55,359 --> 00:46:57,040
in my mind are the ones which use

1110
00:46:57,040 --> 00:46:58,960
technology very thoughtfully

1111
00:46:58,960 --> 00:47:02,079
i.e with a really good reason

1112
00:47:02,079 --> 00:47:05,680
for a challenge open up three pseudocode

1113
00:47:05,680 --> 00:47:07,200
this has all of the pseudo code that

1114
00:47:07,200 --> 00:47:08,720
we've written so far

1115
00:47:08,720 --> 00:47:11,280
but a few things are missing can you

1116
00:47:11,280 --> 00:47:13,119
fill in the blanks and then try to get

1117
00:47:13,119 --> 00:47:14,800
this sketch to actually work by

1118
00:47:14,800 --> 00:47:17,760
replacing it with real code

1119
00:47:17,760 --> 00:47:19,599
here are a few things that got left out

1120
00:47:19,599 --> 00:47:21,040
of the pseudocode

1121
00:47:21,040 --> 00:47:24,160
including the fastled library and

1122
00:47:24,160 --> 00:47:26,400
defining a threshold value

1123
00:47:26,400 --> 00:47:29,520
also anything related to fast led setup

1124
00:47:29,520 --> 00:47:33,440
and anything related in the beginning

1125
00:47:35,440 --> 00:47:37,760
we also forgot to include our breathing

1126
00:47:37,760 --> 00:47:41,040
animation by default

1127
00:47:41,040 --> 00:47:43,040
we also forgot that we want our sketch

1128
00:47:43,040 --> 00:47:44,880
to be non-blocking so we'll have to

1129
00:47:44,880 --> 00:47:47,839
consider timing

1130
00:47:49,200 --> 00:47:51,280
because checking the cap touch data is

1131
00:47:51,280 --> 00:47:52,960
an independent process

1132
00:47:52,960 --> 00:47:54,559
it makes sense to make it its own

1133
00:47:54,559 --> 00:47:56,880
function so let's declare

1134
00:47:56,880 --> 00:48:01,760
avoid and check cap lighting

1135
00:48:03,440 --> 00:48:05,520
let's copy our pseudo code into this

1136
00:48:05,520 --> 00:48:07,359
function so that we can remember what we

1137
00:48:07,359 --> 00:48:10,240
have to put in there

1138
00:48:19,760 --> 00:48:21,680
to keep ourselves from having to rewrite

1139
00:48:21,680 --> 00:48:23,839
code let's open up two cap touch

1140
00:48:23,839 --> 00:48:25,839
threshold

1141
00:48:25,839 --> 00:48:27,280
let's see if anything needs to be

1142
00:48:27,280 --> 00:48:29,839
carried over

1143
00:48:29,839 --> 00:48:32,160
ah well we have to include the adafruit

1144
00:48:32,160 --> 00:48:34,559
circuit playground library so let's copy

1145
00:48:34,559 --> 00:48:37,280
and paste that in

1146
00:48:39,520 --> 00:48:41,920
let's see what else well we define a cap

1147
00:48:41,920 --> 00:48:43,440
pin and a threshold

1148
00:48:43,440 --> 00:48:46,160
we're going to need those too let's copy

1149
00:48:46,160 --> 00:48:49,839
those over

1150
00:48:51,359 --> 00:48:53,839
next we're beginning serial and we can

1151
00:48:53,839 --> 00:48:56,720
copy that too

1152
00:48:58,559 --> 00:49:00,839
and we're also initializing the circuit

1153
00:49:00,839 --> 00:49:03,280
playground

1154
00:49:03,280 --> 00:49:06,880
now we can put that in real code

1155
00:49:07,599 --> 00:49:11,119
we don't need to include the delay

1156
00:49:11,280 --> 00:49:13,200
then we want to include our loop for

1157
00:49:13,200 --> 00:49:14,880
checking the cap touch data

1158
00:49:14,880 --> 00:49:18,000
and updating it we can put this

1159
00:49:18,000 --> 00:49:20,800
inside of our new function let's start

1160
00:49:20,800 --> 00:49:22,079
by copying the line

1161
00:49:22,079 --> 00:49:26,079
that declares our cap touch data as an

1162
00:49:28,839 --> 00:49:30,720
integer

1163
00:49:30,720 --> 00:49:32,559
we don't need to copy the lines that

1164
00:49:32,559 --> 00:49:34,480
print out the data

1165
00:49:34,480 --> 00:49:45,200
but we do need to copy the if-else loop

1166
00:49:45,200 --> 00:49:47,520
looking at our pseudo code we can see

1167
00:49:47,520 --> 00:49:48,319
that if

1168
00:49:48,319 --> 00:49:51,680
the cap touch pin has been triggered

1169
00:49:51,680 --> 00:49:53,680
we want to see if the slide switch has

1170
00:49:53,680 --> 00:49:56,160
been turned on

1171
00:49:56,160 --> 00:49:59,119
now we want to copy over our if else

1172
00:49:59,119 --> 00:49:59,599
loop

1173
00:49:59,599 --> 00:50:02,480
from our slide switch sketch and we can

1174
00:50:02,480 --> 00:50:03,359
paste that

1175
00:50:03,359 --> 00:50:12,000
right where our pseudo code is

1176
00:50:12,000 --> 00:50:14,720
but instead of a print statement we want

1177
00:50:14,720 --> 00:50:16,000
to either turn

1178
00:50:16,000 --> 00:50:18,960
all the leds to red or all the leds to

1179
00:50:18,960 --> 00:50:19,359
green

1180
00:50:19,359 --> 00:50:20,960
so let's put pseudo code in there for

1181
00:50:20,960 --> 00:50:23,200
now

1182
00:50:23,359 --> 00:50:25,280
then in our else statement we know that

1183
00:50:25,280 --> 00:50:27,920
we want to do our breathing pattern

1184
00:50:27,920 --> 00:50:30,000
so we can copy that over into the

1185
00:50:30,000 --> 00:50:33,200
pseudocode for that loop

1186
00:50:36,240 --> 00:50:38,319
now we have all our conditions met and

1187
00:50:38,319 --> 00:50:41,839
in place

1188
00:50:43,119 --> 00:50:45,200
now we just need to update the lighting

1189
00:50:45,200 --> 00:50:48,558
to make it actually happen

1190
00:50:48,800 --> 00:50:51,119
let's start with our breathing pattern

1191
00:50:51,119 --> 00:50:53,280
and to get that let's open up the sketch

1192
00:50:53,280 --> 00:50:56,800
for every n milliseconds

1193
00:50:57,119 --> 00:50:58,960
now there's probably a lot that we have

1194
00:50:58,960 --> 00:51:00,800
to copy from the sketch that's related

1195
00:51:00,800 --> 00:51:02,480
to fast led

1196
00:51:02,480 --> 00:51:04,559
for starters we have to include the fast

1197
00:51:04,559 --> 00:51:07,280
led library

1198
00:51:07,280 --> 00:51:09,040
we also have to define the number of

1199
00:51:09,040 --> 00:51:10,960
leds the data pin

1200
00:51:10,960 --> 00:51:13,599
the crgb array and the brightness in

1201
00:51:13,599 --> 00:51:14,400
order to get

1202
00:51:14,400 --> 00:51:17,599
our algorithm to work so let's paste

1203
00:51:17,599 --> 00:51:18,160
that all

1204
00:51:18,160 --> 00:51:23,839
in the beginning of our sketch

1205
00:51:30,880 --> 00:51:34,160
now if we go down into our setup we also

1206
00:51:34,160 --> 00:51:35,280
see that we have to

1207
00:51:35,280 --> 00:51:39,280
add the leds and the first line there is

1208
00:51:39,280 --> 00:51:40,160
fast led

1209
00:51:40,160 --> 00:51:43,359
add leds so let's copy that over into

1210
00:51:43,359 --> 00:51:45,759
setup

1211
00:51:45,839 --> 00:51:49,200
then there are a few more lines

1212
00:51:49,200 --> 00:51:52,240
this is to fill the leds and also to

1213
00:51:52,240 --> 00:51:53,119
show them

1214
00:51:53,119 --> 00:51:56,319
and increase the brightness

1215
00:51:59,359 --> 00:52:05,839
now we can move on to our loop function

1216
00:52:13,920 --> 00:52:16,000
we want to copy the second part which is

1217
00:52:16,000 --> 00:52:19,599
related to our animation

1218
00:52:19,599 --> 00:52:23,359
and then we'll paste it into our loop

1219
00:52:28,480 --> 00:52:31,839
that can go into else to turn

1220
00:52:31,839 --> 00:52:34,160
all the leds to red and green we can

1221
00:52:34,160 --> 00:52:36,640
simply use a for loop

1222
00:52:36,640 --> 00:52:38,720
we can copy this from the for loop

1223
00:52:38,720 --> 00:52:41,040
sketch

1224
00:52:43,760 --> 00:52:45,359
and then we just want to paste it in

1225
00:52:45,359 --> 00:52:48,558
where our pseudocode is

1226
00:52:53,599 --> 00:52:56,720
for both red and for green

1227
00:52:56,720 --> 00:52:58,480
for red we want to change the first

1228
00:52:58,480 --> 00:53:00,079
value to 255

1229
00:53:00,079 --> 00:53:02,079
and then the other values should be zero

1230
00:53:02,079 --> 00:53:04,640
in zero

1231
00:53:08,480 --> 00:53:11,520
for green it should be zero 255

1232
00:53:11,520 --> 00:53:15,839
and then zero

1233
00:53:16,400 --> 00:53:19,760
this is okay but it's a little ugly

1234
00:53:19,760 --> 00:53:22,480
that else part is pretty messy and it

1235
00:53:22,480 --> 00:53:24,400
might be a bit confusing

1236
00:53:24,400 --> 00:53:26,960
so let's refactor it by making it its

1237
00:53:26,960 --> 00:53:28,800
own function

1238
00:53:28,800 --> 00:53:33,599
to do so let's copy the entire animation

1239
00:53:35,520 --> 00:53:39,200
and then let's make a new function

1240
00:53:39,760 --> 00:53:44,720
called void breathing pattern

1241
00:53:47,520 --> 00:53:51,119
and then let's paste in our code

1242
00:53:55,599 --> 00:53:59,359
we can then delete it from the loop

1243
00:54:08,079 --> 00:54:11,839
now we can just call breathing pattern

1244
00:54:13,200 --> 00:54:15,599
we also want to remember to include the

1245
00:54:15,599 --> 00:54:16,559
fade step

1246
00:54:16,559 --> 00:54:19,040
as part of our breathing animation so

1247
00:54:19,040 --> 00:54:21,440
let's copy and paste that from loop

1248
00:54:21,440 --> 00:54:25,839
into our breathing animation function

1249
00:54:33,359 --> 00:54:34,640
next we want to bring in our

1250
00:54:34,640 --> 00:54:37,760
accelerometer so let's open up excel tap

1251
00:54:37,760 --> 00:54:40,640
and then see what we need to copy over

1252
00:54:40,640 --> 00:54:42,720
we can see we need to copy the wire and

1253
00:54:42,720 --> 00:54:45,040
spy libraries and then we also need to

1254
00:54:45,040 --> 00:54:45,760
copy

1255
00:54:45,760 --> 00:54:50,160
a variable which is the click threshold

1256
00:54:50,559 --> 00:54:54,319
then we need to copy all of this

1257
00:54:54,319 --> 00:54:56,880
and this is just the setup for the

1258
00:54:56,880 --> 00:54:59,119
accelerometer

1259
00:54:59,119 --> 00:55:02,880
which we went over last section

1260
00:55:04,799 --> 00:55:07,839
we want to change this value to 2

1261
00:55:07,839 --> 00:55:09,920
because we're detecting a double click

1262
00:55:09,920 --> 00:55:12,400
instead of a single click

1263
00:55:12,400 --> 00:55:13,680
and then we're already calling a

1264
00:55:13,680 --> 00:55:15,599
function tab time

1265
00:55:15,599 --> 00:55:19,359
so we can just copy that over

1266
00:55:19,520 --> 00:55:22,400
and paste it in

1267
00:55:25,760 --> 00:55:28,319
and instead of a serial print statement

1268
00:55:28,319 --> 00:55:30,640
we want to play a tone right

1269
00:55:30,640 --> 00:55:32,520
so let's write

1270
00:55:32,520 --> 00:55:33,760
circuitplayground.playtone

1271
00:55:33,760 --> 00:55:37,440
and then whatever tone we want to play

1272
00:55:46,720 --> 00:55:48,799
looking it over it looks like we have

1273
00:55:48,799 --> 00:55:52,160
all of our conditions met

1274
00:55:52,880 --> 00:55:55,920
let's upload it and see how it works

1275
00:55:55,920 --> 00:55:57,599
if you found this challenging don't

1276
00:55:57,599 --> 00:55:59,920
worry you can find the solution on

1277
00:55:59,920 --> 00:56:00,559
github

1278
00:56:00,559 --> 00:56:04,799
as three challenge solution

1279
00:56:05,200 --> 00:56:07,440
you'll get better at writing pseudocode

1280
00:56:07,440 --> 00:56:08,559
and code

1281
00:56:08,559 --> 00:56:10,480
as you continue to develop your skills

1282
00:56:10,480 --> 00:56:12,720
and practice

1283
00:56:12,720 --> 00:56:15,280
it's good to start small and start where

1284
00:56:15,280 --> 00:56:16,400
you're familiar

1285
00:56:16,400 --> 00:56:18,079
so if you don't understand something

1286
00:56:18,079 --> 00:56:19,520
don't feel like you have to make the

1287
00:56:19,520 --> 00:56:21,359
jump to create a very complicated

1288
00:56:21,359 --> 00:56:23,359
program

1289
00:56:23,359 --> 00:56:25,920
you can learn a lot by trying new things

1290
00:56:25,920 --> 00:56:27,680
and combining different sketches

1291
00:56:27,680 --> 00:56:30,880
in this way it'll also really help to

1292
00:56:30,880 --> 00:56:33,200
start with things like flow charts

1293
00:56:33,200 --> 00:56:36,319
interactivity matrixes and pseudocode so

1294
00:56:36,319 --> 00:56:38,000
that you know what's supposed to happen

1295
00:56:38,000 --> 00:56:39,359
where

1296
00:56:39,359 --> 00:56:40,960
the sketch that we wrote is still a

1297
00:56:40,960 --> 00:56:43,359
little messy

1298
00:56:43,359 --> 00:56:45,119
can you think of what you could do in

1299
00:56:45,119 --> 00:56:46,799
order to clean it up a little and make

1300
00:56:46,799 --> 00:56:48,400
it more efficient

1301
00:56:48,400 --> 00:56:51,440
give it a try for homework try to write

1302
00:56:51,440 --> 00:56:53,280
your own sketch that combines

1303
00:56:53,280 --> 00:56:55,440
more than one sketch that we've used so

1304
00:56:55,440 --> 00:56:56,880
far

1305
00:56:56,880 --> 00:56:58,960
can you make a sketch using the servo

1306
00:56:58,960 --> 00:57:00,480
arm

1307
00:57:00,480 --> 00:57:02,319
can you create different states of

1308
00:57:02,319 --> 00:57:05,760
interactivity or different functions

1309
00:57:05,760 --> 00:57:07,839
try to write your own program that uses

1310
00:57:07,839 --> 00:57:10,160
multiple inputs and outputs

1311
00:57:10,160 --> 00:57:11,920
feel free to copy and paste from the

1312
00:57:11,920 --> 00:57:15,599
sketches that we've used so far

1313
00:57:15,920 --> 00:57:18,079
thanks for tuning in again this week and

1314
00:57:18,079 --> 00:57:20,160
for all of your hard work in this course

1315
00:57:20,160 --> 00:57:21,839
today we've covered buttons and switches

1316
00:57:21,839 --> 00:57:23,440
to control our programs

1317
00:57:23,440 --> 00:57:25,040
learned a bit about animatronics by

1318
00:57:25,040 --> 00:57:27,040
hooking up our servo and learn how to

1319
00:57:27,040 --> 00:57:28,640
use the accelerometer

1320
00:57:28,640 --> 00:57:30,559
we've also learned how to use every n

1321
00:57:30,559 --> 00:57:32,480
milliseconds and timers to create

1322
00:57:32,480 --> 00:57:34,160
programs that have more than one thing

1323
00:57:34,160 --> 00:57:34,640
happening

1324
00:57:34,640 --> 00:57:37,200
simultaneously we've also started to

1325
00:57:37,200 --> 00:57:37,760
look

1326
00:57:37,760 --> 00:57:40,000
into project planning including how to

1327
00:57:40,000 --> 00:57:41,680
create tools like flowcharts and

1328
00:57:41,680 --> 00:57:43,839
interactivity matrixes to help us with

1329
00:57:43,839 --> 00:57:44,720
programming

1330
00:57:44,720 --> 00:57:46,480
and also to just make sure that our

1331
00:57:46,480 --> 00:57:48,240
programs are working as we expect them

1332
00:57:48,240 --> 00:57:49,200
to

1333
00:57:49,200 --> 00:57:50,880
in the next class we'll talk more about

1334
00:57:50,880 --> 00:57:52,960
how to plan interactive experiences

1335
00:57:52,960 --> 00:57:55,119
some common types of interactivity and

1336
00:57:55,119 --> 00:57:56,799
how to program a state machine

1337
00:57:56,799 --> 00:57:58,799
so that you can easily chop your program

1338
00:57:58,799 --> 00:58:00,319
into states which are essentially

1339
00:58:00,319 --> 00:58:01,599
different modes

1340
00:58:01,599 --> 00:58:02,960
we'll talk about how to hook up

1341
00:58:02,960 --> 00:58:05,119
off-board sensors and go over some of my

1342
00:58:05,119 --> 00:58:06,640
favorite sensors

1343
00:58:06,640 --> 00:58:08,000
i'm really excited to see what you've

1344
00:58:08,000 --> 00:58:10,160
been making so please drop into the

1345
00:58:10,160 --> 00:58:12,079
office hour or feel free to post your

1346
00:58:12,079 --> 00:58:13,799
work on the course page which is on

1347
00:58:13,799 --> 00:58:15,440
hackaday.io

1348
00:58:15,440 --> 00:58:22,559
see you next time

