1
00:00:01,580 --> 00:00:04,649
[Music]

2
00:00:11,840 --> 00:00:14,460
all right so our first talk today we

3
00:00:14,460 --> 00:00:17,640
have Cuba Cuba is a natural born hacker

4
00:00:17,640 --> 00:00:19,380
with a penchant for diving into

5
00:00:19,380 --> 00:00:21,900
encrypted software in ways it was never

6
00:00:21,900 --> 00:00:24,359
meant for classic

7
00:00:24,359 --> 00:00:26,580
today's talk is an illustrated approach

8
00:00:26,580 --> 00:00:28,439
to cracking encrypted software in

9
00:00:28,439 --> 00:00:30,300
various creative ways and also includes

10
00:00:30,300 --> 00:00:32,579
references to Old Computers our favorite

11
00:00:32,579 --> 00:00:35,040
please welcome to the hackaday supercon

12
00:00:35,040 --> 00:00:37,030
stage kuba

13
00:00:37,030 --> 00:00:40,140
[Applause]

14
00:00:40,140 --> 00:00:41,820
thank you

15
00:00:41,820 --> 00:00:45,480
hi everyone my name is Kuba

16
00:00:45,480 --> 00:00:48,840
and welcome to my talk let's uh let's

17
00:00:48,840 --> 00:00:50,940
hear a little more about me

18
00:00:50,940 --> 00:00:52,500
uh

19
00:00:52,500 --> 00:00:55,020
and even more uh in in some more detail

20
00:00:55,020 --> 00:00:57,660
I hope you can read some of it I have

21
00:00:57,660 --> 00:00:59,579
some had some interesting Adventures

22
00:00:59,579 --> 00:01:02,699
such as hacking Grandpa's tractor with a

23
00:01:02,699 --> 00:01:04,979
lot of Damages I think my dad had beaten

24
00:01:04,979 --> 00:01:07,860
the world's 100 meters record on that

25
00:01:07,860 --> 00:01:10,380
day trying to stop me

26
00:01:10,380 --> 00:01:13,500
um I've uh I do have a commercial

27
00:01:13,500 --> 00:01:16,200
product that I do sell occasionally for

28
00:01:16,200 --> 00:01:18,060
silicon Graphics workstations basically

29
00:01:18,060 --> 00:01:20,520
a power supply converter simple but it

30
00:01:20,520 --> 00:01:24,060
works I have broken AES it's not as

31
00:01:24,060 --> 00:01:26,040
glamorous as it looks it was brute

32
00:01:26,040 --> 00:01:29,880
forcing AES and the purpose was to do it

33
00:01:29,880 --> 00:01:32,460
in a finite time so you find that

34
00:01:32,460 --> 00:01:35,520
basically 20 bits is all you can do as

35
00:01:35,520 --> 00:01:37,400
far as the length of the key

36
00:01:37,400 --> 00:01:40,020
I've run an internet provider for about

37
00:01:40,020 --> 00:01:42,540
13 years kind of by accident because

38
00:01:42,540 --> 00:01:44,100
that was the best way to transfer

39
00:01:44,100 --> 00:01:47,820
software between others and so on and so

40
00:01:47,820 --> 00:01:49,979
on we're going to skip

41
00:01:49,979 --> 00:01:51,600
some of the other deals you can see all

42
00:01:51,600 --> 00:01:54,659
of it so what are we dealing with here

43
00:01:54,659 --> 00:01:57,240
um we have an encrypted application that

44
00:01:57,240 --> 00:01:58,920
is meant to run

45
00:01:58,920 --> 00:02:01,259
in an untrusted environment so you're

46
00:02:01,259 --> 00:02:03,799
shipping your application to a customer

47
00:02:03,799 --> 00:02:07,259
and you need to run it there but what if

48
00:02:07,259 --> 00:02:10,318
that customer is very interested in

49
00:02:10,318 --> 00:02:12,060
breaking it or accessing your secret

50
00:02:12,060 --> 00:02:14,700
sauce so that's what we're dealing with

51
00:02:14,700 --> 00:02:16,800
in this particular case this is a

52
00:02:16,800 --> 00:02:20,060
machine learning model with a code in r

53
00:02:20,060 --> 00:02:22,800
r is a scripted language that kind of

54
00:02:22,800 --> 00:02:25,260
helps because well it's an interpreter

55
00:02:25,260 --> 00:02:27,739
than script link it's script language so

56
00:02:27,739 --> 00:02:30,599
you kind of you cannot compile it easily

57
00:02:30,599 --> 00:02:32,580
to a binary form so it has to ship

58
00:02:32,580 --> 00:02:35,340
together with that runtime and that all

59
00:02:35,340 --> 00:02:37,080
goes in a Docker container that actually

60
00:02:37,080 --> 00:02:38,640
doesn't matter

61
00:02:38,640 --> 00:02:41,640
and then what did we get what do we have

62
00:02:41,640 --> 00:02:44,340
we have three very simple files the dec

63
00:02:44,340 --> 00:02:46,700
is just the binary that runs everything

64
00:02:46,700 --> 00:02:50,459
and it also does have libraries like the

65
00:02:50,459 --> 00:02:52,680
r interpreter libraries elsewhere it's

66
00:02:52,680 --> 00:02:55,040
in in our library

67
00:02:55,040 --> 00:02:58,200
path but this is the actual bundle that

68
00:02:58,200 --> 00:03:00,180
we're getting then there is an encrypted

69
00:03:00,180 --> 00:03:03,120
model and data test data that it just

70
00:03:03,120 --> 00:03:05,160
verifies against that model is already

71
00:03:05,160 --> 00:03:09,780
pre-trained so it has some of these uh

72
00:03:09,780 --> 00:03:12,720
all the factors and all the secret uh

73
00:03:12,720 --> 00:03:13,680
sort of

74
00:03:13,680 --> 00:03:17,700
uh numbers uh built in so this is how we

75
00:03:17,700 --> 00:03:19,620
run it just in case we're disabling

76
00:03:19,620 --> 00:03:21,300
Network because we don't need it and we

77
00:03:21,300 --> 00:03:22,860
don't want it to call home just in case

78
00:03:22,860 --> 00:03:25,440
if if it attempted to and then just run

79
00:03:25,440 --> 00:03:28,019
it in a very simple uh very simple

80
00:03:28,019 --> 00:03:31,140
command line with these two files as

81
00:03:31,140 --> 00:03:33,959
arguments and that is going to be

82
00:03:33,959 --> 00:03:35,700
important at some point this is how it

83
00:03:35,700 --> 00:03:37,340
looks when it runs there's nothing

84
00:03:37,340 --> 00:03:41,159
ordinary it's just some weights uh very

85
00:03:41,159 --> 00:03:43,019
simple output

86
00:03:43,019 --> 00:03:45,360
so let's take a look at that binary

87
00:03:45,360 --> 00:03:49,519
we can see it's an Intel binary x86

88
00:03:49,519 --> 00:03:52,620
it uses shared libraries that's a good

89
00:03:52,620 --> 00:03:54,780
thing we might look into this in the

90
00:03:54,780 --> 00:03:57,120
future it's not been stripped which

91
00:03:57,120 --> 00:03:59,040
might also help in case we needed to

92
00:03:59,040 --> 00:04:01,379
look inside

93
00:04:01,379 --> 00:04:02,819
um and I just highlighted these two

94
00:04:02,819 --> 00:04:04,920
sections because we might have some

95
00:04:04,920 --> 00:04:08,040
interest so what would the modern hacker

96
00:04:08,040 --> 00:04:08,760
do

97
00:04:08,760 --> 00:04:11,640
you will just use gidra or radar and

98
00:04:11,640 --> 00:04:14,459
then it will probably just give you a

99
00:04:14,459 --> 00:04:16,560
lot of that information a lot of the

100
00:04:16,560 --> 00:04:20,040
secrets maybe some decryption key it

101
00:04:20,040 --> 00:04:21,720
might be there in the text section of

102
00:04:21,720 --> 00:04:24,180
your of your binary but now we're going

103
00:04:24,180 --> 00:04:26,880
to look at look at this with more

104
00:04:26,880 --> 00:04:29,580
old-school way so first

105
00:04:29,580 --> 00:04:33,060
one of the first uh Swiss army knife

106
00:04:33,060 --> 00:04:34,620
tools that you should have at your

107
00:04:34,620 --> 00:04:37,139
disposal would be ldd just look at those

108
00:04:37,139 --> 00:04:41,040
libraries the important ones are the two

109
00:04:41,040 --> 00:04:42,960
the second and third from the top you

110
00:04:42,960 --> 00:04:46,979
have lib SSL so it is using openssl that

111
00:04:46,979 --> 00:04:49,440
might be interesting then it's using lib

112
00:04:49,440 --> 00:04:51,960
R like I said and the rest doesn't

113
00:04:51,960 --> 00:04:54,660
matter so much we can skip most of the

114
00:04:54,660 --> 00:04:56,520
rest uh

115
00:04:56,520 --> 00:05:00,180
and then obj dump so we're taking a look

116
00:05:00,180 --> 00:05:03,120
this is complete this is just trimmed a

117
00:05:03,120 --> 00:05:05,820
lot that output is way bigger but I just

118
00:05:05,820 --> 00:05:07,680
highlighted and involved the two

119
00:05:07,680 --> 00:05:09,960
interesting sections so this is how

120
00:05:09,960 --> 00:05:11,940
we're confirming that this is an actual

121
00:05:11,940 --> 00:05:16,080
open SSL uh a linked binary it uses

122
00:05:16,080 --> 00:05:18,600
these two methods two functions to do

123
00:05:18,600 --> 00:05:21,660
something it uses AES with 256 bits

124
00:05:21,660 --> 00:05:24,720
that's useful then The Cypher CTX the

125
00:05:24,720 --> 00:05:27,300
EVP Cypher CTX new is actually one of

126
00:05:27,300 --> 00:05:29,940
the uh one of the decryption functions

127
00:05:29,940 --> 00:05:31,979
in this case and then if you really

128
00:05:31,979 --> 00:05:34,080
wanted to dig into this in like very

129
00:05:34,080 --> 00:05:36,060
high detail

130
00:05:36,060 --> 00:05:38,580
um you could probably figure out which

131
00:05:38,580 --> 00:05:40,139
arguments it's passing to these

132
00:05:40,139 --> 00:05:41,580
functions just by looking at the stack

133
00:05:41,580 --> 00:05:43,139
it's it's popping a lot of things from

134
00:05:43,139 --> 00:05:45,419
the stack but we're not even going to go

135
00:05:45,419 --> 00:05:47,160
anywhere near that

136
00:05:47,160 --> 00:05:51,300
uh we suspect just by looking at these

137
00:05:51,300 --> 00:05:53,580
things educator guess how the by looking

138
00:05:53,580 --> 00:05:57,240
at how the binary runs that it starts it

139
00:05:57,240 --> 00:05:59,100
somehow obtains a decryption key which

140
00:05:59,100 --> 00:06:01,620
is baked into the binary it loads the

141
00:06:01,620 --> 00:06:04,199
encrypter model then decrypts the model

142
00:06:04,199 --> 00:06:07,560
obviously and starts the runtime from

143
00:06:07,560 --> 00:06:09,840
the r library that was there it does

144
00:06:09,840 --> 00:06:11,820
some R magic and then it just produces

145
00:06:11,820 --> 00:06:14,520
output this is almost definitely almost

146
00:06:14,520 --> 00:06:16,680
certainly how it might work even if we

147
00:06:16,680 --> 00:06:18,060
didn't know that

148
00:06:18,060 --> 00:06:19,440
so

149
00:06:19,440 --> 00:06:21,479
the best method of debugging and

150
00:06:21,479 --> 00:06:22,740
troubleshooting

151
00:06:22,740 --> 00:06:26,419
it's not GDB it's printfs

152
00:06:26,419 --> 00:06:31,380
so I basically took out a lot of openssl

153
00:06:31,380 --> 00:06:34,020
source code and I've re-implemented a

154
00:06:34,020 --> 00:06:36,060
couple of these functions and compiled

155
00:06:36,060 --> 00:06:38,819
it and the biggest addition is here in

156
00:06:38,819 --> 00:06:39,780
the bottom

157
00:06:39,780 --> 00:06:42,180
so that the secret sauce is here this is

158
00:06:42,180 --> 00:06:44,520
basically how it copies the decrypted

159
00:06:44,520 --> 00:06:46,740
output into a

160
00:06:46,740 --> 00:06:50,280
object and a variable called b or out in

161
00:06:50,280 --> 00:06:53,600
fact and it just prints it to the screen

162
00:06:53,600 --> 00:06:57,360
so how do we get that Library

163
00:06:57,360 --> 00:06:59,580
into our binary or how do we get the

164
00:06:59,580 --> 00:07:02,699
binary to load this out this fake

165
00:07:02,699 --> 00:07:05,220
openssl Library well

166
00:07:05,220 --> 00:07:07,020
actually

167
00:07:07,020 --> 00:07:09,600
using uh is it here it's not here or

168
00:07:09,600 --> 00:07:11,460
actually yeah we're using LD preload

169
00:07:11,460 --> 00:07:13,440
which is one of the very cool features

170
00:07:13,440 --> 00:07:16,440
that you cannot ever disable

171
00:07:16,440 --> 00:07:19,020
um Linux or Unix machine there are ways

172
00:07:19,020 --> 00:07:21,960
to do it but in ordinary environment you

173
00:07:21,960 --> 00:07:22,860
can't

174
00:07:22,860 --> 00:07:25,319
so we're pre-loading that new openssl

175
00:07:25,319 --> 00:07:30,300
fake Library running it and

176
00:07:30,300 --> 00:07:34,020
this is how the output looks you have a

177
00:07:34,020 --> 00:07:37,319
full complete unscrambled private key it

178
00:07:37,319 --> 00:07:40,560
has been redacted with some uh funny

179
00:07:40,560 --> 00:07:43,620
things in here that I've so this is not

180
00:07:43,620 --> 00:07:45,419
necessarily it's actually hacks

181
00:07:45,419 --> 00:07:48,900
compatible but yeah uh and it just

182
00:07:48,900 --> 00:07:50,400
prints a lot of other stuff so I've

183
00:07:50,400 --> 00:07:51,900
shortened it just for the sake of

184
00:07:51,900 --> 00:07:55,020
readability and you're getting the whole

185
00:07:55,020 --> 00:07:57,360
private key and then later

186
00:07:57,360 --> 00:08:02,340
that printf out that you've seen well it

187
00:08:02,340 --> 00:08:05,759
eventually prints this which happens to

188
00:08:05,759 --> 00:08:06,660
be

189
00:08:06,660 --> 00:08:09,960
an R code so we're not only gotten the

190
00:08:09,960 --> 00:08:11,880
private key which we don't even need and

191
00:08:11,880 --> 00:08:14,039
then we just we've printed out on the

192
00:08:14,039 --> 00:08:16,620
screen the r code that was supposed to

193
00:08:16,620 --> 00:08:18,120
be the very secret sauce that you're

194
00:08:18,120 --> 00:08:20,039
supposed to protect

195
00:08:20,039 --> 00:08:22,860
so well we hacked

196
00:08:22,860 --> 00:08:26,460
some encrypted software with printfs fun

197
00:08:26,460 --> 00:08:28,860
right that was the hard way

198
00:08:28,860 --> 00:08:31,080
okay there is a much easier way to go

199
00:08:31,080 --> 00:08:32,240
about that

200
00:08:32,240 --> 00:08:37,080
uh I broke something here okay so

201
00:08:37,080 --> 00:08:39,539
if you're old enough some computers back

202
00:08:39,539 --> 00:08:40,740
in the day used to have freezer

203
00:08:40,740 --> 00:08:42,240
cartridges you could basically press a

204
00:08:42,240 --> 00:08:44,520
button and freeze your computer in time

205
00:08:44,520 --> 00:08:46,800
so

206
00:08:46,800 --> 00:08:51,000
who has ever seen one or used one okay

207
00:08:51,000 --> 00:08:54,660
one two okay fine uh I didn't bring one

208
00:08:54,660 --> 00:08:56,640
but they do have a photo that's how it

209
00:08:56,640 --> 00:08:58,620
used to that's how they looked this is

210
00:08:58,620 --> 00:09:00,480
my own personal action replay cartridge

211
00:09:00,480 --> 00:09:02,820
for Commodore 64. the right one is a

212
00:09:02,820 --> 00:09:04,680
freeze you just press it and the Machine

213
00:09:04,680 --> 00:09:07,080
freezes you can poke around the memory

214
00:09:07,080 --> 00:09:08,519
do whatever you want

215
00:09:08,519 --> 00:09:11,459
so is it possible to do that no more on

216
00:09:11,459 --> 00:09:14,339
a modern PC not necessarily not in a

217
00:09:14,339 --> 00:09:17,640
hardware sense because you can't pause a

218
00:09:17,640 --> 00:09:19,800
PC they run way too fast things would

219
00:09:19,800 --> 00:09:21,360
just start disappearing

220
00:09:21,360 --> 00:09:23,399
I don't even think registers would hold

221
00:09:23,399 --> 00:09:28,320
up this long so you can't freeze it

222
00:09:28,320 --> 00:09:30,060
but

223
00:09:30,060 --> 00:09:31,680
the biggest challenge that we're going

224
00:09:31,680 --> 00:09:34,019
to deal with is not how because we will

225
00:09:34,019 --> 00:09:36,180
figure out how to freeze the machine how

226
00:09:36,180 --> 00:09:37,680
to freeze the binary we're not going to

227
00:09:37,680 --> 00:09:38,820
freeze the whole PC we're going to

228
00:09:38,820 --> 00:09:40,140
freeze the binary

229
00:09:40,140 --> 00:09:43,140
but where and when to do it

230
00:09:43,140 --> 00:09:46,260
how how do you press a pause button a

231
00:09:46,260 --> 00:09:49,140
computer at the right moment when the

232
00:09:49,140 --> 00:09:51,120
suspected decryption key is in memory

233
00:09:51,120 --> 00:09:52,680
where you can access it that's not the

234
00:09:52,680 --> 00:09:54,660
easy thing normally

235
00:09:54,660 --> 00:09:57,000
but

236
00:09:57,000 --> 00:09:59,880
if you look carefully we run the binary

237
00:09:59,880 --> 00:10:01,860
with two arguments that were there was a

238
00:10:01,860 --> 00:10:04,019
model and there was a test data

239
00:10:04,019 --> 00:10:05,580
so

240
00:10:05,580 --> 00:10:08,519
as I said the first argument was the

241
00:10:08,519 --> 00:10:10,380
encrypted model

242
00:10:10,380 --> 00:10:12,660
and the second argument is just a test

243
00:10:12,660 --> 00:10:14,820
file so

244
00:10:14,820 --> 00:10:18,180
wouldn't it be ideal if we could freeze

245
00:10:18,180 --> 00:10:20,519
it before it loads that model hoping

246
00:10:20,519 --> 00:10:22,980
that by the time it loads the model

247
00:10:22,980 --> 00:10:25,980
it has the decryption key in memory okay

248
00:10:25,980 --> 00:10:27,899
so if we had that freeze button we could

249
00:10:27,899 --> 00:10:30,420
do that but how well

250
00:10:30,420 --> 00:10:33,060
let me tell you about fifos

251
00:10:33,060 --> 00:10:35,060
if you read a file

252
00:10:35,060 --> 00:10:38,160
that firefill actually is FIFA looks

253
00:10:38,160 --> 00:10:41,339
like a file to a to to to Linux kernel

254
00:10:41,339 --> 00:10:44,339
right to your software but it will wait

255
00:10:44,339 --> 00:10:47,760
forever if there is no data that read

256
00:10:47,760 --> 00:10:49,320
call will block

257
00:10:49,320 --> 00:10:52,019
and that read call will never return

258
00:10:52,019 --> 00:10:55,160
unless it sees some data on the fifo

259
00:10:55,160 --> 00:10:58,320
which we're never going to give

260
00:10:58,320 --> 00:11:00,660
okay so we're going to keep that read

261
00:11:00,660 --> 00:11:03,360
call suspended forever and that's our

262
00:11:03,360 --> 00:11:05,940
freeze button okay in this case so we're

263
00:11:05,940 --> 00:11:07,500
making a little FIFA we're running our

264
00:11:07,500 --> 00:11:10,200
binary we don't need our open SSL

265
00:11:10,200 --> 00:11:12,079
anymore we can throw that Library away

266
00:11:12,079 --> 00:11:14,940
and we froze in the software we're

267
00:11:14,940 --> 00:11:17,220
Frozen at binary in time

268
00:11:17,220 --> 00:11:20,519
so how do you access memory gcore is

269
00:11:20,519 --> 00:11:22,440
your best friend you find a PID of that

270
00:11:22,440 --> 00:11:25,620
process you run gcore and then we have a

271
00:11:25,620 --> 00:11:26,700
core file

272
00:11:26,700 --> 00:11:28,079
and then

273
00:11:28,079 --> 00:11:30,480
we're just literally running Less on

274
00:11:30,480 --> 00:11:32,040
that core file

275
00:11:32,040 --> 00:11:35,459
and here is our secret sauce okay it's

276
00:11:35,459 --> 00:11:38,579
the same ourselves our source code that

277
00:11:38,579 --> 00:11:40,320
you may have seen in their previous

278
00:11:40,320 --> 00:11:42,720
screen so now we've done it in two

279
00:11:42,720 --> 00:11:45,120
very different ways that you would have

280
00:11:45,120 --> 00:11:48,240
normally not think about

281
00:11:48,240 --> 00:11:53,700
so we've just retrieved that source of

282
00:11:53,700 --> 00:11:56,579
that R script the secret our script from

283
00:11:56,579 --> 00:11:58,740
the core dump in plain text it's not

284
00:11:58,740 --> 00:12:01,019
even encrypted anymore it's been already

285
00:12:01,019 --> 00:12:04,440
done for us didn't need a private key at

286
00:12:04,440 --> 00:12:05,579
all they don't need to hack any

287
00:12:05,579 --> 00:12:09,480
opennesses with a simple fifo it's

288
00:12:09,480 --> 00:12:11,760
almost like macgyvering something with a

289
00:12:11,760 --> 00:12:13,860
paper clip it's a very simple tool and

290
00:12:13,860 --> 00:12:16,320
it doesn't need to be Advanced at all

291
00:12:16,320 --> 00:12:19,860
so now let's get a little bit more well

292
00:12:19,860 --> 00:12:21,839
half serious

293
00:12:21,839 --> 00:12:24,360
how could you ever prevent this from

294
00:12:24,360 --> 00:12:26,339
happening if you were to do this

295
00:12:26,339 --> 00:12:28,680
yourself if you were to ship that kind

296
00:12:28,680 --> 00:12:31,980
of software to a customer well the first

297
00:12:31,980 --> 00:12:34,380
thing you roll your own crypto we all

298
00:12:34,380 --> 00:12:37,260
know how that works usually the advices

299
00:12:37,260 --> 00:12:39,720
don't do it but maybe

300
00:12:39,720 --> 00:12:42,480
or maybe you ship a variant of that open

301
00:12:42,480 --> 00:12:45,060
sslr library with some arguments changed

302
00:12:45,060 --> 00:12:47,100
so that I can see what it is

303
00:12:47,100 --> 00:12:49,940
it will make it slightly harder

304
00:12:49,940 --> 00:12:53,100
use a different open SSL Library we've

305
00:12:53,100 --> 00:12:55,019
learned about one at this event called

306
00:12:55,019 --> 00:12:57,420
wolf SSL as well there are a couple

307
00:12:57,420 --> 00:13:00,240
errors available that would make it

308
00:13:00,240 --> 00:13:02,279
slightly harder too if it's less popular

309
00:13:02,279 --> 00:13:04,740
if it's closed source and if you can't

310
00:13:04,740 --> 00:13:07,980
easily compile your own and pre-load it

311
00:13:07,980 --> 00:13:10,040
it would make it slightly harder

312
00:13:10,040 --> 00:13:12,779
you could do you could escrow those

313
00:13:12,779 --> 00:13:15,240
private Keys using an online service

314
00:13:15,240 --> 00:13:18,779
like activation style or Hardware Key

315
00:13:18,779 --> 00:13:20,940
like some software companies used to do

316
00:13:20,940 --> 00:13:23,579
that's an option you could off your

317
00:13:23,579 --> 00:13:26,040
skate the r code so it wouldn't look

318
00:13:26,040 --> 00:13:28,500
like it did in a memory in plain text

319
00:13:28,500 --> 00:13:30,540
but you don't know how the library will

320
00:13:30,540 --> 00:13:32,160
behave you don't know how the r

321
00:13:32,160 --> 00:13:34,740
interpreter would show it in memory if

322
00:13:34,740 --> 00:13:38,220
we did our fifo attack

323
00:13:38,220 --> 00:13:41,220
um you could embed the actual model in a

324
00:13:41,220 --> 00:13:43,139
binary so it doesn't need to load it if

325
00:13:43,139 --> 00:13:44,760
it doesn't need to load files we can't

326
00:13:44,760 --> 00:13:46,380
do fifo anymore

327
00:13:46,380 --> 00:13:48,480
it will be much harder you'd have to do

328
00:13:48,480 --> 00:13:51,899
something like uh write another library

329
00:13:51,899 --> 00:13:54,300
and then use GDB to put a breakpoint

330
00:13:54,300 --> 00:13:56,459
there's lots of other ways but it will

331
00:13:56,459 --> 00:13:59,160
make it harder it's all and every single

332
00:13:59,160 --> 00:14:00,540
one of these the ones that I mentioned

333
00:14:00,540 --> 00:14:03,180
before they all make it slightly harder

334
00:14:03,180 --> 00:14:05,399
but none of these prevents

335
00:14:05,399 --> 00:14:07,500
these attacks from happening it just

336
00:14:07,500 --> 00:14:09,380
takes a little more time

337
00:14:09,380 --> 00:14:12,120
you can actually detect the fifo you can

338
00:14:12,120 --> 00:14:14,579
just simply run stat on every file that

339
00:14:14,579 --> 00:14:16,440
you load when you're writing your

340
00:14:16,440 --> 00:14:18,720
software you could just run stat check

341
00:14:18,720 --> 00:14:21,240
if it's a real file

342
00:14:21,240 --> 00:14:23,639
but then it's also a very reactive

343
00:14:23,639 --> 00:14:27,000
method of protecting your software

344
00:14:27,000 --> 00:14:29,519
um you could statically link some

345
00:14:29,519 --> 00:14:31,500
libraries I don't know if it's even

346
00:14:31,500 --> 00:14:33,660
possible to statically link openssl

347
00:14:33,660 --> 00:14:36,899
maybe then it wouldn't be loading so

348
00:14:36,899 --> 00:14:39,079
that the preload attack wouldn't work

349
00:14:39,079 --> 00:14:41,639
there are ways to turn off and disable

350
00:14:41,639 --> 00:14:44,459
preload usually by using different lib C

351
00:14:44,459 --> 00:14:46,560
that makes it hard because if you're

352
00:14:46,560 --> 00:14:48,839
shipping your software to a client

353
00:14:48,839 --> 00:14:51,480
you don't really want to mess with very

354
00:14:51,480 --> 00:14:54,420
core library that

355
00:14:54,420 --> 00:14:57,600
require is required to run your software

356
00:14:57,600 --> 00:14:59,820
right it's kind of it's a risky bat you

357
00:14:59,820 --> 00:15:01,019
could probably put some requirements

358
00:15:01,019 --> 00:15:02,699
around it but it makes it a little

359
00:15:02,699 --> 00:15:06,240
harder uh there is a one one of the more

360
00:15:06,240 --> 00:15:08,399
reliable ways is actually the banner

361
00:15:08,399 --> 00:15:10,920
itself your main code could inspect

362
00:15:10,920 --> 00:15:13,019
every shared object that it loads

363
00:15:13,019 --> 00:15:15,480
through some callbacks and just

364
00:15:15,480 --> 00:15:16,920
basically look for libraries it doesn't

365
00:15:16,920 --> 00:15:20,459
recognize that's that's one of the very

366
00:15:20,459 --> 00:15:22,320
reliable ways there are some

367
00:15:22,320 --> 00:15:25,260
anti-forantics forensics techniques you

368
00:15:25,260 --> 00:15:28,139
could scramble the memory in ways that

369
00:15:28,139 --> 00:15:30,360
malware and viruses do

370
00:15:30,360 --> 00:15:33,240
but then what if your software shows up

371
00:15:33,240 --> 00:15:35,639
in you know in somebody's antivirus

372
00:15:35,639 --> 00:15:37,800
software that doesn't look very good if

373
00:15:37,800 --> 00:15:40,680
you ship it to a customer anymore uh

374
00:15:40,680 --> 00:15:42,680
yeah manipulating page double entries

375
00:15:42,680 --> 00:15:45,360
memory area structures and kernel a

376
00:15:45,360 --> 00:15:48,839
little risky but that's one of the ways

377
00:15:48,839 --> 00:15:52,560
to to hide some of your some of your

378
00:15:52,560 --> 00:15:56,060
secret sauce potentially so

379
00:15:56,060 --> 00:15:59,279
we all can see that whoever made that

380
00:15:59,279 --> 00:16:00,720
binary didn't really put that much

381
00:16:00,720 --> 00:16:01,980
thought into this they could have

382
00:16:01,980 --> 00:16:04,139
probably done a better job there are

383
00:16:04,139 --> 00:16:07,620
ways to do it and prevent like I said

384
00:16:07,620 --> 00:16:10,560
the the measures that I list that

385
00:16:10,560 --> 00:16:12,420
they're very reactive like every single

386
00:16:12,420 --> 00:16:14,220
one of them is basically squashing that

387
00:16:14,220 --> 00:16:17,220
particular scenario so you just

388
00:16:17,220 --> 00:16:18,720
basically have to enumerate all the

389
00:16:18,720 --> 00:16:22,079
possible scenarios of attack and

390
00:16:22,079 --> 00:16:23,940
mitigate each and every one of them

391
00:16:23,940 --> 00:16:25,920
there isn't a foolproof method there

392
00:16:25,920 --> 00:16:28,079
isn't a hack proof method

393
00:16:28,079 --> 00:16:30,660
but sometimes and that's the funniest

394
00:16:30,660 --> 00:16:33,360
takeaway here the most primitive of all

395
00:16:33,360 --> 00:16:37,980
methods printfs fifos they just work

396
00:16:37,980 --> 00:16:42,300
uh so that's the uh that's the best part

397
00:16:42,300 --> 00:16:43,920
sometimes you really don't have to be a

398
00:16:43,920 --> 00:16:45,839
sophisticated hacker or don't have to

399
00:16:45,839 --> 00:16:47,839
use sophisticated tools

400
00:16:47,839 --> 00:16:51,660
and you can still achieve something that

401
00:16:51,660 --> 00:16:53,759
no one thought was possible like

402
00:16:53,759 --> 00:16:55,620
basically poke around your memory or

403
00:16:55,620 --> 00:16:59,519
freeze a PC in time thank you

404
00:16:59,519 --> 00:17:02,519
foreign

