1
00:00:01,580 --> 00:00:04,649
[Music]

2
00:00:12,620 --> 00:00:15,480
our next speaker is an engineering major

3
00:00:15,480 --> 00:00:19,260
at Harvey muddy mud uh College whose

4
00:00:19,260 --> 00:00:21,240
technical interests include single

5
00:00:21,240 --> 00:00:23,939
processing and digital design his talk

6
00:00:23,939 --> 00:00:25,920
today represents an acoustic phased

7
00:00:25,920 --> 00:00:28,199
array that is open source and easy to

8
00:00:28,199 --> 00:00:30,900
use so please welcome our hackaday

9
00:00:30,900 --> 00:00:33,420
supercon at our hackaday supercon stage

10
00:00:33,420 --> 00:00:35,579
Alec fairchusi

11
00:00:35,579 --> 00:00:36,500
foreign

12
00:00:36,500 --> 00:00:41,059
[Applause]

13
00:00:41,059 --> 00:00:43,200
today I'll be presenting on a low-cost

14
00:00:43,200 --> 00:00:45,480
underwater ultrasonic phased array this

15
00:00:45,480 --> 00:00:47,160
work was done by

16
00:00:47,160 --> 00:00:49,079
um at Harvey Mudd College with professor

17
00:00:49,079 --> 00:00:50,700
Matthew Spencer and fellow students

18
00:00:50,700 --> 00:00:54,000
Tejas Rao and riazaverchan

19
00:00:54,000 --> 00:00:56,460
so for a bit of motivation as to why we

20
00:00:56,460 --> 00:00:58,980
want to do Ultrasonics underwater is

21
00:00:58,980 --> 00:01:01,620
that traditional electromagnetic waves

22
00:01:01,620 --> 00:01:03,600
don't propagate well underwater at radio

23
00:01:03,600 --> 00:01:05,420
frequencies because water is a conductor

24
00:01:05,420 --> 00:01:07,860
radio waves don't propagate just the

25
00:01:07,860 --> 00:01:09,060
same way that a radio wave doesn't

26
00:01:09,060 --> 00:01:10,799
propagate well through metal it's not

27
00:01:10,799 --> 00:01:12,900
going to propagate well through water at

28
00:01:12,900 --> 00:01:15,960
um past non-trivial deaths at the same

29
00:01:15,960 --> 00:01:18,780
time light doesn't propagate that well

30
00:01:18,780 --> 00:01:22,080
through water because you know of uh

31
00:01:22,080 --> 00:01:23,820
scattering in the water often there's

32
00:01:23,820 --> 00:01:25,920
particles that just cause it make it

33
00:01:25,920 --> 00:01:27,680
hard to see

34
00:01:27,680 --> 00:01:29,759
sound does propagate extremely well

35
00:01:29,759 --> 00:01:32,040
through water however and we can see an

36
00:01:32,040 --> 00:01:33,960
example of that this is a sonar image in

37
00:01:33,960 --> 00:01:36,240
the figure to the right taken of a

38
00:01:36,240 --> 00:01:39,559
shipwreck over 200 feet down

39
00:01:41,400 --> 00:01:43,320
um so we want to take advantage of

40
00:01:43,320 --> 00:01:45,659
acoustic propagation underwater to do

41
00:01:45,659 --> 00:01:47,640
fish tracking with an array and as an

42
00:01:47,640 --> 00:01:49,200
intermediate step towards that we built

43
00:01:49,200 --> 00:01:51,600
an underwater 3D imager we're leaving

44
00:01:51,600 --> 00:01:52,799
with the results here because we think

45
00:01:52,799 --> 00:01:54,659
they're pretty cool and the figure to

46
00:01:54,659 --> 00:01:57,180
the left you can see the array we built

47
00:01:57,180 --> 00:02:00,000
pointed away from the camera this is an

48
00:02:00,000 --> 00:02:01,880
underwater test tank

49
00:02:01,880 --> 00:02:05,460
in the background you see a steel Target

50
00:02:05,460 --> 00:02:07,619
test plate and in the figure to the

51
00:02:07,619 --> 00:02:09,000
right we see the point Cloud generated

52
00:02:09,000 --> 00:02:11,220
by our Imager

53
00:02:11,220 --> 00:02:12,959
so the question is how do we use sound

54
00:02:12,959 --> 00:02:15,360
to create an imager and the answer is

55
00:02:15,360 --> 00:02:17,520
that if we're able to transmit a beam of

56
00:02:17,520 --> 00:02:19,140
sound in a specific Direction and we're

57
00:02:19,140 --> 00:02:21,060
able to steer that beam of sound all we

58
00:02:21,060 --> 00:02:22,739
have to do is steer at different angles

59
00:02:22,739 --> 00:02:24,959
in Azimuth and elevation send out a

60
00:02:24,959 --> 00:02:26,819
pulse and if we get an echo from that

61
00:02:26,819 --> 00:02:28,020
direction we know there's something

62
00:02:28,020 --> 00:02:30,300
there we can use the time that it took

63
00:02:30,300 --> 00:02:32,459
the echo to get back to figure out the

64
00:02:32,459 --> 00:02:34,560
round trip distance to the Target and

65
00:02:34,560 --> 00:02:36,200
create a point cloud from that

66
00:02:36,200 --> 00:02:38,520
the figure to the right shows the

67
00:02:38,520 --> 00:02:40,739
envelope of a received signal bouncing

68
00:02:40,739 --> 00:02:43,980
off of the steel test plate so the test

69
00:02:43,980 --> 00:02:45,840
plate is around 1.2 meters away so we

70
00:02:45,840 --> 00:02:48,540
can see a big spike here and this

71
00:02:48,540 --> 00:02:50,160
actually this the small Spike here is

72
00:02:50,160 --> 00:02:52,019
due to multi-path it bounces off the

73
00:02:52,019 --> 00:02:54,060
test plate and then probably off the

74
00:02:54,060 --> 00:02:55,920
back wall behind the array back to the

75
00:02:55,920 --> 00:02:57,599
test plate again effectively doubling

76
00:02:57,599 --> 00:02:59,879
the distance

77
00:02:59,879 --> 00:03:01,080
um so I'm going to talk about the whole

78
00:03:01,080 --> 00:03:02,519
system from the bottom up to describe

79
00:03:02,519 --> 00:03:04,260
this imager and how we do this I've kind

80
00:03:04,260 --> 00:03:06,660
of got three sections first we need an

81
00:03:06,660 --> 00:03:08,819
element that can create sound we need to

82
00:03:08,819 --> 00:03:10,200
be able to control that sound with the

83
00:03:10,200 --> 00:03:11,519
circuit and then we need to make use

84
00:03:11,519 --> 00:03:12,900
those circuits to create a directional

85
00:03:12,900 --> 00:03:14,459
beam then I'll talk a bit about the

86
00:03:14,459 --> 00:03:15,840
results

87
00:03:15,840 --> 00:03:18,420
so first we need um

88
00:03:18,420 --> 00:03:20,400
we need an element that creates sound

89
00:03:20,400 --> 00:03:21,959
and so to create sound underwater you

90
00:03:21,959 --> 00:03:24,120
need something that vibrates and appears

91
00:03:24,120 --> 00:03:26,940
to Electric material can do that

92
00:03:26,940 --> 00:03:28,980
a piezoelectric material when voltage is

93
00:03:28,980 --> 00:03:32,940
applied deformed slightly to create uh

94
00:03:32,940 --> 00:03:34,920
acoustic propagation and we can

95
00:03:34,920 --> 00:03:37,019
understand the converse is true as well

96
00:03:37,019 --> 00:03:39,959
if you deform a Piezo like material a

97
00:03:39,959 --> 00:03:42,599
material it'll create a voltage and so

98
00:03:42,599 --> 00:03:44,400
this piezoelectric material can act as a

99
00:03:44,400 --> 00:03:46,500
transducer which is both a speaker and a

100
00:03:46,500 --> 00:03:48,540
microphone we can intuitively understand

101
00:03:48,540 --> 00:03:50,280
how this works by you looking at the

102
00:03:50,280 --> 00:03:52,680
unit cell of pzt which is an extremely

103
00:03:52,680 --> 00:03:55,080
common piezoelectric material we see in

104
00:03:55,080 --> 00:03:58,560
this unit cell that we have a positively

105
00:03:58,560 --> 00:04:00,239
charged atom that's slightly off center

106
00:04:00,239 --> 00:04:01,680
so there's going to be a bit of a charge

107
00:04:01,680 --> 00:04:04,140
distribution a positive charge at the

108
00:04:04,140 --> 00:04:05,700
top of the unit cell and a negative

109
00:04:05,700 --> 00:04:07,019
charge at the bottom of the unit cell

110
00:04:07,019 --> 00:04:08,879
when an electric field is applied the

111
00:04:08,879 --> 00:04:10,319
positive charge wants to move with the

112
00:04:10,319 --> 00:04:12,180
field the negative charge wants to move

113
00:04:12,180 --> 00:04:14,099
away from the field and so the unit cell

114
00:04:14,099 --> 00:04:15,680
is going to deform

115
00:04:15,680 --> 00:04:19,199
practically RP is a transducer is shown

116
00:04:19,199 --> 00:04:20,940
on the figure to the right so for some

117
00:04:20,940 --> 00:04:23,100
sense of context this is about a 1.6

118
00:04:23,100 --> 00:04:25,440
centimeters in diameter

119
00:04:25,440 --> 00:04:28,259
apologies the

120
00:04:28,259 --> 00:04:30,540
the electric field is applied between

121
00:04:30,540 --> 00:04:32,940
two terminals um this is a hollow sphere

122
00:04:32,940 --> 00:04:34,500
the electric field is applied between

123
00:04:34,500 --> 00:04:37,199
two terminals um on the outer ring and

124
00:04:37,199 --> 00:04:40,080
on the inner ring of the transducer the

125
00:04:40,080 --> 00:04:42,180
non-central symmetric Titanium or the

126
00:04:42,180 --> 00:04:43,740
non-setro symmetric positively charged

127
00:04:43,740 --> 00:04:46,500
atom is kind of pointing inwards here so

128
00:04:46,500 --> 00:04:48,960
when we apply this electric field the

129
00:04:48,960 --> 00:04:50,540
hollow

130
00:04:50,540 --> 00:04:53,400
cylinder is going to expand and contract

131
00:04:53,400 --> 00:04:54,180
um

132
00:04:54,180 --> 00:04:56,820
which will push water kind of in and out

133
00:04:56,820 --> 00:05:00,660
of the transducer creating a sound wave

134
00:05:00,660 --> 00:05:02,699
um so now we have the transducers but to

135
00:05:02,699 --> 00:05:04,919
let them to make them work underwater we

136
00:05:04,919 --> 00:05:06,600
need to do two things which is

137
00:05:06,600 --> 00:05:08,940
waterproof them and do acoustic

138
00:05:08,940 --> 00:05:10,680
impedance matching

139
00:05:10,680 --> 00:05:12,240
so the way we accomplish both of these

140
00:05:12,240 --> 00:05:14,580
things both of these things is by

141
00:05:14,580 --> 00:05:16,680
dipping them into a thin layer of

142
00:05:16,680 --> 00:05:18,720
silicone this accomplishes the

143
00:05:18,720 --> 00:05:20,639
waterproofing by just covering the

144
00:05:20,639 --> 00:05:23,759
transducers in a thin layer of silicone

145
00:05:23,759 --> 00:05:24,539
um

146
00:05:24,539 --> 00:05:27,060
Sorry by by covering the terminals of

147
00:05:27,060 --> 00:05:28,979
the transducers and this also

148
00:05:28,979 --> 00:05:30,840
accomplishes acoustic impedance matching

149
00:05:30,840 --> 00:05:33,780
it turns out that pressure wave carries

150
00:05:33,780 --> 00:05:36,900
a lot about the the ratio between the

151
00:05:36,900 --> 00:05:40,740
speed of sound of a material and the

152
00:05:40,740 --> 00:05:42,180
density of that material and that's

153
00:05:42,180 --> 00:05:44,520
called specific acoustic impedance this

154
00:05:44,520 --> 00:05:47,340
is analogous to electrical impedance

155
00:05:47,340 --> 00:05:51,060
which cares about voltage to current

156
00:05:51,060 --> 00:05:51,900
um

157
00:05:51,900 --> 00:05:54,600
the specific acoustic impedance of

158
00:05:54,600 --> 00:05:56,160
silicone is very similar to that of

159
00:05:56,160 --> 00:05:57,840
water so at the boundary between

160
00:05:57,840 --> 00:05:59,820
silicone and water

161
00:05:59,820 --> 00:06:01,500
um to a pressure wave it seems like

162
00:06:01,500 --> 00:06:03,300
there's no boundary at all the specific

163
00:06:03,300 --> 00:06:05,880
acoustic impedance of PCT material

164
00:06:05,880 --> 00:06:07,740
however is much higher than that of

165
00:06:07,740 --> 00:06:09,180
water so it's kind of a hard to cross

166
00:06:09,180 --> 00:06:12,060
boundary we improve the coupling the

167
00:06:12,060 --> 00:06:14,039
power transfer between the water and our

168
00:06:14,039 --> 00:06:16,560
transducers by

169
00:06:16,560 --> 00:06:17,280
um

170
00:06:17,280 --> 00:06:19,080
by having our boundary kind of between

171
00:06:19,080 --> 00:06:21,360
this be the silicone to water boundary

172
00:06:21,360 --> 00:06:24,960
instead of the water to PCT boundary

173
00:06:24,960 --> 00:06:27,060
uh so now we have the transducers

174
00:06:27,060 --> 00:06:28,500
figured out I'll talk a bit about the

175
00:06:28,500 --> 00:06:31,319
circuits that drives a pzt element

176
00:06:31,319 --> 00:06:33,600
oh and uh quickly this is the array

177
00:06:33,600 --> 00:06:36,000
we've made it's these nine um silicone

178
00:06:36,000 --> 00:06:40,520
dipped elements mounted on a foam plate

179
00:06:41,699 --> 00:06:42,960
okay

180
00:06:42,960 --> 00:06:44,940
um so now I'll get into the electronics

181
00:06:44,940 --> 00:06:45,960
here

182
00:06:45,960 --> 00:06:48,000
um basically each there's a channel

183
00:06:48,000 --> 00:06:49,800
board a single Channel board that drives

184
00:06:49,800 --> 00:06:54,979
a single PCT element times nine

185
00:06:56,460 --> 00:06:58,440
on the transmit side we want to be able

186
00:06:58,440 --> 00:07:01,440
to generate a um a wave with an

187
00:07:01,440 --> 00:07:03,360
arbitrary amplitude an arbitrary a

188
00:07:03,360 --> 00:07:04,919
pulsed sine wave with an arbitrary

189
00:07:04,919 --> 00:07:07,199
amplitude arbitrary frequency arbitrary

190
00:07:07,199 --> 00:07:09,660
phase shift and arbitrary like length of

191
00:07:09,660 --> 00:07:11,340
the pulse as well and the way we can do

192
00:07:11,340 --> 00:07:13,199
that using a microcontroller and a

193
00:07:13,199 --> 00:07:15,180
simple analog front end is by taking

194
00:07:15,180 --> 00:07:16,680
advantage of a couple of the peripherals

195
00:07:16,680 --> 00:07:19,979
on that microcontroller so here we have

196
00:07:19,979 --> 00:07:21,240
an

197
00:07:21,240 --> 00:07:24,720
here we have an analog multiplexer that

198
00:07:24,720 --> 00:07:28,259
uses a pwm peripheral as the select line

199
00:07:28,259 --> 00:07:31,380
and it selects between the static output

200
00:07:31,380 --> 00:07:33,599
of a digital to analog converter and

201
00:07:33,599 --> 00:07:36,120
ground this produces a square wave with

202
00:07:36,120 --> 00:07:38,520
an arbitrary amplitude selected by the

203
00:07:38,520 --> 00:07:40,979
static digital analog converter and with

204
00:07:40,979 --> 00:07:43,139
frequency and phase parameters basically

205
00:07:43,139 --> 00:07:45,900
selected by the pwm peripheral

206
00:07:45,900 --> 00:07:48,060
we can filter out the harmonics of the

207
00:07:48,060 --> 00:07:50,039
square wave to create a sine wave and we

208
00:07:50,039 --> 00:07:51,360
do this with a second order low pass

209
00:07:51,360 --> 00:07:54,900
filter a sound key topology we then AC

210
00:07:54,900 --> 00:07:57,720
couple the signal to zero Center it and

211
00:07:57,720 --> 00:08:00,360
it's Amplified by a linear audio power

212
00:08:00,360 --> 00:08:04,380
amplifier which drives the transducer

213
00:08:04,380 --> 00:08:07,919
on the receive side the signal is uh

214
00:08:07,919 --> 00:08:09,720
filtered with the 60 hertz rejection

215
00:08:09,720 --> 00:08:12,440
filter so this filters out things like

216
00:08:12,440 --> 00:08:14,160
electromagnetic interference from the

217
00:08:14,160 --> 00:08:16,199
wall sockets for example then we have a

218
00:08:16,199 --> 00:08:18,300
couple op-amp stages to do front end

219
00:08:18,300 --> 00:08:20,099
amplification and it's sampled directly

220
00:08:20,099 --> 00:08:22,139
by the microcontroller the

221
00:08:22,139 --> 00:08:23,759
microcontroller samples at one Mega

222
00:08:23,759 --> 00:08:25,379
sample per second and it uses direct

223
00:08:25,379 --> 00:08:28,259
memory access to write this into

224
00:08:28,259 --> 00:08:30,479
internal into internal memory of the

225
00:08:30,479 --> 00:08:32,039
microcontroller

226
00:08:32,039 --> 00:08:34,260
samples are then offloaded on an i

227
00:08:34,260 --> 00:08:36,240
squared C bus to a host computer to do

228
00:08:36,240 --> 00:08:38,880
the processing

229
00:08:38,880 --> 00:08:42,740
okay uh you'll note that we kind of have

230
00:08:42,740 --> 00:08:45,480
nine different elements here and that's

231
00:08:45,480 --> 00:08:47,880
ultimately how we're able to create

232
00:08:47,880 --> 00:08:48,560
um

233
00:08:48,560 --> 00:08:50,940
it sound traveling in a very specific

234
00:08:50,940 --> 00:08:51,959
Direction how we can create a

235
00:08:51,959 --> 00:08:53,580
directional beam of sound and the

236
00:08:53,580 --> 00:08:55,500
technique we use to do that as with a

237
00:08:55,500 --> 00:08:56,820
phased array

238
00:08:56,820 --> 00:08:58,440
um so I'm only going to introduce kind

239
00:08:58,440 --> 00:09:00,060
of a phased array very briefly here

240
00:09:00,060 --> 00:09:03,180
because it's been done in the past

241
00:09:03,180 --> 00:09:06,300
um in 2018 at supercon Hunter Scott gave

242
00:09:06,300 --> 00:09:08,519
a great presentation about phased arrays

243
00:09:08,519 --> 00:09:11,459
kind of in the context of RF this is in

244
00:09:11,459 --> 00:09:14,279
the context of Acoustics so it's a lot

245
00:09:14,279 --> 00:09:17,399
lower frequency but if we take a look

246
00:09:17,399 --> 00:09:19,680
at a single element we can see that a

247
00:09:19,680 --> 00:09:21,420
single element emanates like a very

248
00:09:21,420 --> 00:09:23,339
spherical wavefront but if we have

249
00:09:23,339 --> 00:09:25,500
multiple elements

250
00:09:25,500 --> 00:09:27,959
if we have multiple elements uh

251
00:09:27,959 --> 00:09:30,300
emanating wavefronts and we look at a

252
00:09:30,300 --> 00:09:31,860
specific Direction constructive

253
00:09:31,860 --> 00:09:33,120
interference is going to make it look

254
00:09:33,120 --> 00:09:36,060
like there's one single plane wave

255
00:09:36,060 --> 00:09:37,800
emanating from that direction and the

256
00:09:37,800 --> 00:09:39,800
key takeaway here is that we can control

257
00:09:39,800 --> 00:09:42,959
by by varying the phase shift

258
00:09:42,959 --> 00:09:44,700
um or you know the time that each

259
00:09:44,700 --> 00:09:47,459
element fires we can control a steering

260
00:09:47,459 --> 00:09:50,519
angle so in this case this element is

261
00:09:50,519 --> 00:09:52,260
firing slightly before this one this

262
00:09:52,260 --> 00:09:53,820
one's slightly before this one and vice

263
00:09:53,820 --> 00:09:55,620
versa and so that causes that steering

264
00:09:55,620 --> 00:09:57,480
angle to be in this direction but you

265
00:09:57,480 --> 00:09:59,100
can imagine if all elements were firing

266
00:09:59,100 --> 00:10:00,779
at the exact same time we'd have zero

267
00:10:00,779 --> 00:10:02,459
steering angle the plane wave would

268
00:10:02,459 --> 00:10:04,860
basically be traveling exactly away from

269
00:10:04,860 --> 00:10:07,440
the Tran of the array

270
00:10:07,440 --> 00:10:09,660
uh so the figure to the right shows us

271
00:10:09,660 --> 00:10:12,120
practically implementing this

272
00:10:12,120 --> 00:10:14,100
we have the measured beam pattern here

273
00:10:14,100 --> 00:10:17,399
so this is kind of power versus angle of

274
00:10:17,399 --> 00:10:19,440
our array this is steering directly away

275
00:10:19,440 --> 00:10:21,360
from the array

276
00:10:21,360 --> 00:10:23,339
steering directly away from the array

277
00:10:23,339 --> 00:10:25,200
and then we we slightly vary the

278
00:10:25,200 --> 00:10:27,360
steering angle to the right more and

279
00:10:27,360 --> 00:10:28,160
more

280
00:10:28,160 --> 00:10:30,360
and it does match pretty closely with

281
00:10:30,360 --> 00:10:32,640
the theoretical measurements uh the

282
00:10:32,640 --> 00:10:34,440
theoretic the theory which which is good

283
00:10:34,440 --> 00:10:36,839
we'll note that this bottom figure here

284
00:10:36,839 --> 00:10:39,180
shows that we have to kind of limit our

285
00:10:39,180 --> 00:10:41,339
maximum steering angle and that's due to

286
00:10:41,339 --> 00:10:43,800
grading lobes

287
00:10:43,800 --> 00:10:45,600
which is due to the physical setup of

288
00:10:45,600 --> 00:10:48,260
the array itself

289
00:10:49,019 --> 00:10:50,940
okay so now I'll talk a little bit about

290
00:10:50,940 --> 00:10:52,200
the results

291
00:10:52,200 --> 00:10:53,640
I'll talk a little bit about the results

292
00:10:53,640 --> 00:10:55,440
uh

293
00:10:55,440 --> 00:10:57,480
this figure here shows the traces at

294
00:10:57,480 --> 00:10:59,640
different parts of the transmit chain we

295
00:10:59,640 --> 00:11:01,700
produce this red signal

296
00:11:01,700 --> 00:11:04,860
which drives the PCT and again to do

297
00:11:04,860 --> 00:11:08,160
that we have this analog multiplexer the

298
00:11:08,160 --> 00:11:10,019
blue tray shows the output of the static

299
00:11:10,019 --> 00:11:12,120
DAC the orange tray shows the output of

300
00:11:12,120 --> 00:11:14,220
the analog multiplexer so we have this

301
00:11:14,220 --> 00:11:17,339
arbitrary amplitude Square wave after

302
00:11:17,339 --> 00:11:19,079
filtering out the harmonics to produce a

303
00:11:19,079 --> 00:11:21,300
sine wave that that shows this that's

304
00:11:21,300 --> 00:11:23,880
shown by this green Trace here so we can

305
00:11:23,880 --> 00:11:25,440
see it's a sine wave there's a little

306
00:11:25,440 --> 00:11:26,760
bit of weirdness here on the front and

307
00:11:26,760 --> 00:11:28,820
that's the settling time of the filter

308
00:11:28,820 --> 00:11:31,980
and then this is zero centered using the

309
00:11:31,980 --> 00:11:33,720
AC coupling and then Amplified by the

310
00:11:33,720 --> 00:11:36,440
power amplifier

311
00:11:37,860 --> 00:11:39,180
okay

312
00:11:39,180 --> 00:11:40,440
um so

313
00:11:40,440 --> 00:11:43,079
this figure at the bottom here shows the

314
00:11:43,079 --> 00:11:44,700
microcontroller sampling the received

315
00:11:44,700 --> 00:11:47,220
signal and so this is a um

316
00:11:47,220 --> 00:11:49,440
and a signal sorry this is an echo

317
00:11:49,440 --> 00:11:51,060
that's coming in at an angle relative to

318
00:11:51,060 --> 00:11:53,579
the array so we see that it's a planar

319
00:11:53,579 --> 00:11:55,980
wavefront and it's because it's coming

320
00:11:55,980 --> 00:11:57,480
in at an angle relative to the array

321
00:11:57,480 --> 00:11:59,040
it's got a slightly different travel

322
00:11:59,040 --> 00:12:01,079
time to each element in the array and

323
00:12:01,079 --> 00:12:03,959
that produces this phase shift here so

324
00:12:03,959 --> 00:12:05,820
if we're looking in a very specific in

325
00:12:05,820 --> 00:12:07,140
software if we're looking at a very

326
00:12:07,140 --> 00:12:09,420
specific if we're looking straight out

327
00:12:09,420 --> 00:12:11,040
from the array

328
00:12:11,040 --> 00:12:13,260
and we just sum these signals directly

329
00:12:13,260 --> 00:12:14,940
that's going to produce destructive

330
00:12:14,940 --> 00:12:17,040
interference and so the magnitude of the

331
00:12:17,040 --> 00:12:19,560
envelope of the signal isn't going to be

332
00:12:19,560 --> 00:12:22,920
very high but if we're looking at a

333
00:12:22,920 --> 00:12:24,180
um if we're looking at the direction

334
00:12:24,180 --> 00:12:26,519
that this signal came in we essentially

335
00:12:26,519 --> 00:12:30,060
reverse the delays to have these signals

336
00:12:30,060 --> 00:12:32,399
you know have zero phase shift to each

337
00:12:32,399 --> 00:12:34,680
other if we sum them then that produces

338
00:12:34,680 --> 00:12:36,180
constructive interference that creates

339
00:12:36,180 --> 00:12:38,220
an echo with a large magnitude so that's

340
00:12:38,220 --> 00:12:39,540
how we kind of do the receive beam

341
00:12:39,540 --> 00:12:41,399
forming

342
00:12:41,399 --> 00:12:43,620
now I'll show the test setup so these

343
00:12:43,620 --> 00:12:46,079
are the pcbs we have apologies for all

344
00:12:46,079 --> 00:12:47,459
the cabling here

345
00:12:47,459 --> 00:12:50,119
foreign

346
00:12:54,000 --> 00:12:56,700
so this is the motherboard it houses a

347
00:12:56,700 --> 00:12:57,540
central

348
00:12:57,540 --> 00:12:59,160
um multi-channel transmit and receive

349
00:12:59,160 --> 00:13:01,740
switch and the piezos are connected to

350
00:13:01,740 --> 00:13:03,320
it via twisted pair

351
00:13:03,320 --> 00:13:05,600
wires and that just goes into the tank

352
00:13:05,600 --> 00:13:08,459
uh then the motherboard is connected to

353
00:13:08,459 --> 00:13:10,139
each of the nine Channel boards which

354
00:13:10,139 --> 00:13:11,579
has the microcontroller and the analog

355
00:13:11,579 --> 00:13:13,860
front end on it I'm using a coax cable

356
00:13:13,860 --> 00:13:15,420
for the receive side which is sensitive

357
00:13:15,420 --> 00:13:17,399
signals and then for the transmit side

358
00:13:17,399 --> 00:13:19,339
just this twisted pair wire

359
00:13:19,339 --> 00:13:23,220
one issue we had in the uh physically

360
00:13:23,220 --> 00:13:24,540
building the system was with

361
00:13:24,540 --> 00:13:26,579
synchronization of the sampling

362
00:13:26,579 --> 00:13:29,040
um the internal oscillators on the

363
00:13:29,040 --> 00:13:30,480
microcontroller which we were originally

364
00:13:30,480 --> 00:13:32,399
using as the sample clock for the adcs

365
00:13:32,399 --> 00:13:34,620
vary by like plus or minus five percent

366
00:13:34,620 --> 00:13:36,660
even after calibration from the factory

367
00:13:36,660 --> 00:13:38,880
and this was completely unacceptable for

368
00:13:38,880 --> 00:13:40,139
you know sampling these signals and

369
00:13:40,139 --> 00:13:42,000
trying to do beam forming with them um

370
00:13:42,000 --> 00:13:44,339
so we have a one megahertz uh kind of

371
00:13:44,339 --> 00:13:46,680
clock distribution to act as the sample

372
00:13:46,680 --> 00:13:48,779
clock for the ADC we also do another

373
00:13:48,779 --> 00:13:50,339
synchronization technique as well where

374
00:13:50,339 --> 00:13:52,079
we have a signal that basically on the

375
00:13:52,079 --> 00:13:54,300
rising Edge triggers an interrupt on the

376
00:13:54,300 --> 00:13:55,800
microcontroller to start the transmit

377
00:13:55,800 --> 00:13:57,300
sequence and on the falling Edge

378
00:13:57,300 --> 00:14:00,899
triggers the receive sequence so using

379
00:14:00,899 --> 00:14:02,639
these two techniques we can basically

380
00:14:02,639 --> 00:14:05,760
have synchronous sampling

381
00:14:05,760 --> 00:14:08,220
uh so now for the results here so this

382
00:14:08,220 --> 00:14:10,680
is the same set of images shown at the

383
00:14:10,680 --> 00:14:11,420
beginning

384
00:14:11,420 --> 00:14:14,100
again with the array here and the test

385
00:14:14,100 --> 00:14:16,019
set up here showing this point Cloud

386
00:14:16,019 --> 00:14:18,120
it's kind of hard to see here but this

387
00:14:18,120 --> 00:14:20,120
point Cloud isn't actually rectangular

388
00:14:20,120 --> 00:14:21,959
unfortunately it's kind of more of a

389
00:14:21,959 --> 00:14:23,399
sphere and this has to do with the point

390
00:14:23,399 --> 00:14:26,360
spread function of the imager itself

391
00:14:26,360 --> 00:14:28,560
basically the beam produced by this

392
00:14:28,560 --> 00:14:31,019
array isn't infinitely small so if we

393
00:14:31,019 --> 00:14:32,160
you know if we shoot in a specific

394
00:14:32,160 --> 00:14:33,540
direction we're going to get Echoes

395
00:14:33,540 --> 00:14:34,800
coming back from another direction that

396
00:14:34,800 --> 00:14:36,899
affects our measurement uh the reason

397
00:14:36,899 --> 00:14:39,240
this array the the width of the beam is

398
00:14:39,240 --> 00:14:40,800
so large ultimately has to do with the

399
00:14:40,800 --> 00:14:43,079
amount of elements we're using and also

400
00:14:43,079 --> 00:14:46,500
kind of how far apart they're spaced but

401
00:14:46,500 --> 00:14:47,639
um and that's that's kind of future work

402
00:14:47,639 --> 00:14:50,120
for the project

403
00:14:51,600 --> 00:14:53,880
this image here shows a kind of a 2d

404
00:14:53,880 --> 00:14:56,880
slice of that uh of that setup so we're

405
00:14:56,880 --> 00:14:58,380
just scanning an Azimuth now not in

406
00:14:58,380 --> 00:15:00,600
elevation and so we can see the steel

407
00:15:00,600 --> 00:15:03,139
plate here

408
00:15:06,120 --> 00:15:08,459
uh okay uh so in conclusion we've open

409
00:15:08,459 --> 00:15:10,560
sourced the design files for this and

410
00:15:10,560 --> 00:15:11,820
they're available on GitHub and we

411
00:15:11,820 --> 00:15:13,680
invite you to check it out

412
00:15:13,680 --> 00:15:16,620
um also feel free to email me at the

413
00:15:16,620 --> 00:15:19,440
email address on this slide

414
00:15:19,440 --> 00:15:20,880
and thank you guys very much for

415
00:15:20,880 --> 00:15:21,770
listening

416
00:15:21,770 --> 00:15:25,079
[Applause]

