1
00:00:11,450 --> 00:00:15,480
first speaker really needs no

2
00:00:13,469 --> 00:00:16,800
introduction is the guy whose last name

3
00:00:15,480 --> 00:00:19,230
you really don't know no<font color="#E5E5E5"> one knows how</font>

4
00:00:16,800 --> 00:00:21,420
<font color="#E5E5E5">to pronounce it</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> its dish it's a</font>

5
00:00:19,230 --> 00:00:29,849
managing editor of hackaday<font color="#CCCCCC"> calm Mike's</font>

6
00:00:21,420 --> 00:00:31,529
dish Thank<font color="#E5E5E5"> You Alec it's a pleasure</font><font color="#CCCCCC"> to</font>

7
00:00:29,849 --> 00:00:33,540
be<font color="#E5E5E5"> here just my second time in Europe</font>

8
00:00:31,529 --> 00:00:35,460
and I got<font color="#E5E5E5"> into Belgrade yesterday we</font>

9
00:00:33,540 --> 00:00:37,260
went out and had a great<font color="#E5E5E5"> time but the</font>

10
00:00:35,460 --> 00:00:39,000
casual<font color="#CCCCCC"> hang out a ton</font><font color="#E5E5E5"> of people showed</font>

11
00:00:37,260 --> 00:00:41,309
up thank you so much for that stayed out

12
00:00:39,000 --> 00:00:43,530
way too late and giving the first talk

13
00:00:41,309 --> 00:00:45,989
so it's the right way to do it so far

14
00:00:43,530 --> 00:00:47,910
it's been a whirlwind one of the<font color="#E5E5E5"> things</font>

15
00:00:45,989 --> 00:00:50,370
I'm<font color="#CCCCCC"> really excited about is that we have</font>

16
00:00:47,910 --> 00:00:53,898
fantastic hardware badge that voya and

17
00:00:50,370 --> 00:00:55,980
<font color="#CCCCCC">Tony developed for the conference</font>

18
00:00:53,899 --> 00:00:57,570
embedded systems are one of my favorite

19
00:00:55,980 --> 00:00:59,849
things to<font color="#E5E5E5"> play with and I had a lot of</font>

20
00:00:57,570 --> 00:01:02,280
fun working on the<font color="#E5E5E5"> sea framework for</font>

21
00:00:59,850 --> 00:01:04,199
this and when we started talking about

22
00:01:02,280 --> 00:01:05,339
<font color="#E5E5E5">this</font><font color="#CCCCCC"> I started looking</font><font color="#E5E5E5"> around at other</font>

23
00:01:04,199 --> 00:01:07,560
projects what other people were doing

24
00:01:05,339 --> 00:01:09,390
what this chip is being used for and I

25
00:01:07,560 --> 00:01:13,040
kept coming<font color="#CCCCCC"> across this argument and</font>

26
00:01:09,390 --> 00:01:17,549
comments on posts about 8-bit<font color="#E5E5E5"> versus</font>

27
00:01:13,040 --> 00:01:20,070
32-bit families and and the virtues of

28
00:01:17,549 --> 00:01:22,259
those<font color="#E5E5E5"> I actually started off getting</font>

29
00:01:20,070 --> 00:01:25,048
into engineering through building beam

30
00:01:22,259 --> 00:01:26,250
robots and<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> just little simple</font>

31
00:01:25,049 --> 00:01:27,960
robots that kind<font color="#E5E5E5"> of react to their</font>

32
00:01:26,250 --> 00:01:29,520
environment do something very basic and

33
00:01:27,960 --> 00:01:31,470
I'm one<font color="#E5E5E5"> of them to get more and more</font>

34
00:01:29,520 --> 00:01:33,570
complex ended up getting on Dave cooks

35
00:01:31,470 --> 00:01:37,679
book called robot building for beginners

36
00:01:33,570 --> 00:01:39,419
and I built sandwich the line following

37
00:01:37,680 --> 00:01:41,990
robot which just has like a comparator

38
00:01:39,420 --> 00:01:44,909
chip in it and it compares like photo on

39
00:01:41,990 --> 00:01:47,039
resistors to see if there's like a black

40
00:01:44,909 --> 00:01:48,840
line underneath them and it kind of

41
00:01:47,040 --> 00:01:50,100
worked<font color="#E5E5E5"> it was pretty good it was fun but</font>

42
00:01:48,840 --> 00:01:51,540
I wanted it to be smarter and when I

43
00:01:50,100 --> 00:01:53,070
started<font color="#E5E5E5"> looking around if you want your</font>

44
00:01:51,540 --> 00:01:56,640
robot to be smarter<font color="#E5E5E5"> your options are</font>

45
00:01:53,070 --> 00:01:58,408
become an analog circuitry<font color="#E5E5E5"> God or learn</font>

46
00:01:56,640 --> 00:02:00,719
to program microcontrollers which is but

47
00:01:58,409 --> 00:02:02,549
far the easier thing I<font color="#CCCCCC"> think and so I</font>

48
00:02:00,719 --> 00:02:05,908
got my first microcontroller basic stamp

49
00:02:02,549 --> 00:02:08,099
to within like a week or something I

50
00:02:05,909 --> 00:02:11,220
realized how slow that is and quickly

51
00:02:08,098 --> 00:02:13,739
<font color="#E5E5E5">went on to upgrade to like a tte 30</font>

52
00:02:11,220 --> 00:02:15,000
microcontrollers and once I started to

53
00:02:13,740 --> 00:02:17,100
see the power<font color="#E5E5E5"> of those that really took</font>

54
00:02:15,000 --> 00:02:18,810
<font color="#E5E5E5">over my life and</font><font color="#CCCCCC"> I just</font><font color="#E5E5E5"> kind of learned</font>

55
00:02:17,100 --> 00:02:22,290
everything that<font color="#CCCCCC"> I could about them and I</font>

56
00:02:18,810 --> 00:02:24,090
have the luxury of not making my living

57
00:02:22,290 --> 00:02:26,250
by designing hardware so I can waste a

58
00:02:24,090 --> 00:02:28,080
ton of time learning esoteric things

59
00:02:26,250 --> 00:02:30,840
about<font color="#CCCCCC"> Hardware just just because I like</font>

60
00:02:28,080 --> 00:02:33,180
it but whenever I meet people that are

61
00:02:30,840 --> 00:02:34,440
embedded engineers for a living I always

62
00:02:33,180 --> 00:02:38,280
asked them like what is<font color="#E5E5E5"> your background</font>

63
00:02:34,440 --> 00:02:41,310
what did you train and almost zero I

64
00:02:38,280 --> 00:02:42,930
pretty close to zero we will say oh yeah

65
00:02:41,310 --> 00:02:44,820
I went<font color="#E5E5E5"> to school</font><font color="#CCCCCC"> for for</font><font color="#E5E5E5"> embedded</font>

66
00:02:42,930 --> 00:02:46,650
systems like it's starting<font color="#E5E5E5"> to become a</font>

67
00:02:44,820 --> 00:02:48,239
thing<font color="#E5E5E5"> now but most people that are</font>

68
00:02:46,650 --> 00:02:51,330
<font color="#E5E5E5">working in embedded systems have come</font>

69
00:02:48,240 --> 00:02:53,010
from either an<font color="#E5E5E5"> EE electronics</font>

70
00:02:51,330 --> 00:02:54,600
engineering background or computer

71
00:02:53,010 --> 00:02:56,760
science background and have kind<font color="#E5E5E5"> of</font>

72
00:02:54,600 --> 00:02:58,530
learned on everything from there and so

73
00:02:56,760 --> 00:03:00,359
what you<font color="#CCCCCC"> find is that most of the people</font>

74
00:02:58,530 --> 00:03:03,450
that<font color="#CCCCCC"> are working with embedded systems</font>

75
00:03:00,360 --> 00:03:05,700
have their foot in like every different

76
00:03:03,450 --> 00:03:07,019
part of whatever that product is<font color="#CCCCCC"> for so</font>

77
00:03:05,700 --> 00:03:08,940
they're involved maybe in some of the

78
00:03:07,020 --> 00:03:10,500
circuit design and layout they're

79
00:03:08,940 --> 00:03:12,329
involved<font color="#E5E5E5"> in the user experience they're</font>

80
00:03:10,500 --> 00:03:14,310
involved<font color="#CCCCCC"> in what the thing looks like</font>

81
00:03:12,330 --> 00:03:17,310
and everywhere in between and they tend

82
00:03:14,310 --> 00:03:18,450
to be one of<font color="#CCCCCC"> the first people pulled in</font>

83
00:03:17,310 --> 00:03:21,180
when there's a problem that<font color="#CCCCCC"> needs</font>

84
00:03:18,450 --> 00:03:23,010
solving and you know the<font color="#E5E5E5"> real question</font>

85
00:03:21,180 --> 00:03:25,110
is like how you get<font color="#E5E5E5"> to the point where</font>

86
00:03:23,010 --> 00:03:27,600
you have<font color="#E5E5E5"> the experience through</font>

87
00:03:25,110 --> 00:03:33,360
everything and I think it's kind of like

88
00:03:27,600 --> 00:03:34,650
a mastery of basic core skills let's<font color="#E5E5E5"> get</font>

89
00:03:33,360 --> 00:03:36,780
back to that argument the argument

90
00:03:34,650 --> 00:03:37,739
usually see is you'll see a project

91
00:03:36,780 --> 00:03:40,380
that's bill<font color="#CCCCCC"> it's a 32-bit</font>

92
00:03:37,739 --> 00:03:41,970
microcontroller and you know someone

93
00:03:40,380 --> 00:03:43,650
will say hey why'd<font color="#CCCCCC"> you use a 32-bit</font>

94
00:03:41,970 --> 00:03:46,290
microcontroller you know you're throwing

95
00:03:43,650 --> 00:03:47,430
the book at this tiny tiny problem or on

96
00:03:46,290 --> 00:03:49,200
the<font color="#CCCCCC"> other</font><font color="#E5E5E5"> side you'll see someone</font><font color="#CCCCCC"> that</font>

97
00:03:47,430 --> 00:03:50,370
is like squeezed every last cycle out of

98
00:03:49,200 --> 00:03:51,869
an a bit chip and people<font color="#E5E5E5"> would be like</font>

99
00:03:50,370 --> 00:03:53,340
why are<font color="#E5E5E5"> you wasting your time you could</font>

100
00:03:51,870 --> 00:03:55,440
<font color="#CCCCCC">have you know</font><font color="#E5E5E5"> using an armed ship for</font>

101
00:03:53,340 --> 00:03:57,540
that it would have<font color="#E5E5E5"> been great on the</font>

102
00:03:55,440 --> 00:03:59,850
<font color="#E5E5E5">interesting thing about this is 32-bit</font>

103
00:03:57,540 --> 00:04:01,859
does bring more to the table so

104
00:03:59,850 --> 00:04:03,989
everything that<font color="#CCCCCC"> you could possibly do</font>

105
00:04:01,860 --> 00:04:05,820
with a microcontroller is usually packed

106
00:04:03,989 --> 00:04:07,440
into those 32-bit devices you know

107
00:04:05,820 --> 00:04:09,299
there's you<font color="#CCCCCC"> know some have one feature</font>

108
00:04:07,440 --> 00:04:10,859
some of the other but really everything

109
00:04:09,299 --> 00:04:13,049
that could be on that die is already on

110
00:04:10,860 --> 00:04:16,049
there so why wouldn't you just say let's

111
00:04:13,049 --> 00:04:19,870
get rid of 8-bit controllers and do

112
00:04:16,048 --> 00:04:21,459
everything in 32-bit now the

113
00:04:19,870 --> 00:04:23,530
counter-argument to that<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> has a</font>

114
00:04:21,459 --> 00:04:25,120
lot of validity is almost everything

115
00:04:23,530 --> 00:04:27,580
<font color="#CCCCCC">that we use micro controllers in is</font>

116
00:04:25,120 --> 00:04:29,080
simple like ninety-nine point nine

117
00:04:27,580 --> 00:04:30,940
percent of the stuff in your life that

118
00:04:29,080 --> 00:04:34,448
has a microcontroller and it does like

119
00:04:30,940 --> 00:04:36,880
nothing so if you think<font color="#CCCCCC"> about like every</font>

120
00:04:34,449 --> 00:04:38,350
electronic thing inside<font color="#CCCCCC"> of your car has</font>

121
00:04:36,880 --> 00:04:40,389
a microcontroller in it because they're

122
00:04:38,350 --> 00:04:42,100
all on can bus so like you you know

123
00:04:40,389 --> 00:04:43,479
press the door lock button and it's not

124
00:04:42,100 --> 00:04:46,240
actually connected to the door lock it's

125
00:04:43,479 --> 00:04:48,430
connected to<font color="#E5E5E5"> the can bus but the the</font>

126
00:04:46,240 --> 00:04:50,020
computing power for that is tiny you

127
00:04:48,430 --> 00:04:53,199
know if you think about children's toys

128
00:04:50,020 --> 00:04:55,150
children's shoes you have<font color="#CCCCCC"> a home</font>

129
00:04:53,199 --> 00:04:57,550
automation hardware that really is just

130
00:04:55,150 --> 00:05:01,150
a simple basically like a radio bridge

131
00:04:57,550 --> 00:05:03,039
<font color="#CCCCCC">too and I'm not turning a LED on and off</font>

132
00:05:01,150 --> 00:05:04,960
so most things don't actually have much

133
00:05:03,039 --> 00:05:08,080
computing power in them it don't need a

134
00:05:04,960 --> 00:05:11,349
giant beefy processor I think there's

135
00:05:08,080 --> 00:05:14,139
this kind of valley or this this gap in

136
00:05:11,350 --> 00:05:15,370
between um where what 8-bit controllers

137
00:05:14,139 --> 00:05:16,900
and simple controllers are really good

138
00:05:15,370 --> 00:05:18,280
at and then where you get to the point

139
00:05:16,900 --> 00:05:20,198
where you need like embedded Linux

140
00:05:18,280 --> 00:05:22,000
system on a chip and that's very well

141
00:05:20,199 --> 00:05:23,770
fulfilled by that 32<font color="#E5E5E5"> bit but it doesn't</font>

142
00:05:22,000 --> 00:05:27,039
<font color="#E5E5E5">necessarily mean everything should be on</font>

143
00:05:23,770 --> 00:05:28,810
there with a<font color="#E5E5E5"> 32-bit this is one good</font>

144
00:05:27,039 --> 00:05:30,610
example of you know where you're going

145
00:05:28,810 --> 00:05:32,889
to see really simple<font color="#E5E5E5"> stuff this is</font>

146
00:05:30,610 --> 00:05:35,080
<font color="#CCCCCC">Sylvania</font><font color="#E5E5E5"> on color switching light bulb</font>

147
00:05:32,889 --> 00:05:38,590
and you know you<font color="#E5E5E5"> just screw it in and it</font>

148
00:05:35,080 --> 00:05:40,539
changes colors kind of boring I think to

149
00:05:38,590 --> 00:05:41,770
me but I guess some people really<font color="#E5E5E5"> loved</font>

150
00:05:40,539 --> 00:05:44,200
it for parties or something like that

151
00:05:41,770 --> 00:05:47,020
but<font color="#E5E5E5"> if you cut it open it's got a really</font>

152
00:05:44,200 --> 00:05:50,110
simple circuit inside that's an ATT 13

153
00:05:47,020 --> 00:05:51,969
microcontroller and to RGB LEDs and it

154
00:05:50,110 --> 00:05:53,500
just uses pulse width modulation to

155
00:05:51,970 --> 00:05:57,460
scroll through those whenever it's

156
00:05:53,500 --> 00:06:00,070
powered up really<font color="#E5E5E5"> simple application but</font>

157
00:05:57,460 --> 00:06:03,039
I<font color="#E5E5E5"> think we're 8-bit really wins is it</font>

158
00:06:00,070 --> 00:06:04,750
allows you to have the most basic

159
00:06:03,039 --> 00:06:06,280
<font color="#E5E5E5">knowledge of what's going on with that</font>

160
00:06:04,750 --> 00:06:08,650
microcontroller because it doesn't have

161
00:06:06,280 --> 00:06:11,859
layer<font color="#CCCCCC"> upon layer upon layer of features</font>

162
00:06:08,650 --> 00:06:14,530
and peripherals and everything<font color="#E5E5E5"> that's in</font>

163
00:06:11,860 --> 00:06:16,030
there and I also think that coming from

164
00:06:14,530 --> 00:06:18,520
the toolchain you're looking at a little

165
00:06:16,030 --> 00:06:20,530
bit simpler<font color="#CCCCCC"> setup you can</font><font color="#E5E5E5"> actually</font>

166
00:06:18,520 --> 00:06:23,560
understand what's going on<font color="#E5E5E5"> under the</font>

167
00:06:20,530 --> 00:06:25,659
hood<font color="#E5E5E5"> with that really what you want</font><font color="#CCCCCC"> to</font>

168
00:06:23,560 --> 00:06:27,760
do for a full understanding to become

169
00:06:25,660 --> 00:06:28,950
<font color="#CCCCCC">that you know hacker by nature for</font>

170
00:06:27,760 --> 00:06:30,719
embedded is you want to start<font color="#E5E5E5"> with</font>

171
00:06:28,950 --> 00:06:33,539
knowing everything

172
00:06:30,720 --> 00:06:34,950
about the chip and so I really say you

173
00:06:33,540 --> 00:06:37,290
have to be the master you<font color="#CCCCCC"> have to be the</font>

174
00:06:34,950 --> 00:06:39,960
micro Yoda of this and I<font color="#E5E5E5"> think it's a</font>

175
00:06:37,290 --> 00:06:42,630
good analogy because if you look at what

176
00:06:39,960 --> 00:06:44,070
Yoda did to teach Luke the the ways of

177
00:06:42,630 --> 00:06:46,140
the Jedi he didn't start<font color="#E5E5E5"> off you know</font>

178
00:06:44,070 --> 00:06:48,000
teaching him how to invisibly choke

179
00:06:46,140 --> 00:06:49,500
people from one starship to the next you

180
00:06:48,000 --> 00:06:51,960
taught them how to you know stack some

181
00:06:49,500 --> 00:06:54,300
boxes one on top of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> other and that</font>

182
00:06:51,960 --> 00:06:56,820
from that basic skill having that basic

183
00:06:54,300 --> 00:06:59,760
mastery everything<font color="#E5E5E5"> comes from that so of</font>

184
00:06:56,820 --> 00:07:01,800
<font color="#E5E5E5">course the analogy in a better for that</font>

185
00:06:59,760 --> 00:07:05,310
is blinking an LED so turning on<font color="#E5E5E5"> your</font>

186
00:07:01,800 --> 00:07:07,380
first led on it's<font color="#E5E5E5"> kind of a joke like oh</font>

187
00:07:05,310 --> 00:07:08,670
you know you blinked your first led but

188
00:07:07,380 --> 00:07:11,820
it's a really a full stack of

189
00:07:08,670 --> 00:07:13,260
<font color="#E5E5E5">understanding and so if you've put</font>

190
00:07:11,820 --> 00:07:15,090
<font color="#CCCCCC">together a project that blinking an LED</font>

191
00:07:13,260 --> 00:07:17,010
you've proven that you can figure<font color="#E5E5E5"> out a</font>

192
00:07:15,090 --> 00:07:18,780
power supply and you can<font color="#E5E5E5"> get it hooked</font>

193
00:07:17,010 --> 00:07:20,520
up to<font color="#E5E5E5"> the microcontroller correctly and</font>

194
00:07:18,780 --> 00:07:23,039
you<font color="#CCCCCC"> can get a programmer hooked up to</font>

195
00:07:20,520 --> 00:07:25,979
the microcontroller and you can have a

196
00:07:23,040 --> 00:07:27,990
compiler and a<font color="#E5E5E5"> makefile and actually do</font>

197
00:07:25,980 --> 00:07:29,580
the coding that goes into that<font color="#E5E5E5"> and then</font>

198
00:07:27,990 --> 00:07:31,650
on the hardware side of things like if

199
00:07:29,580 --> 00:07:33,060
you just turn on an LED hey great but if

200
00:07:31,650 --> 00:07:34,650
you<font color="#E5E5E5"> actually turn it on have it stand</font>

201
00:07:33,060 --> 00:07:36,419
for a little while turn it off have its

202
00:07:34,650 --> 00:07:38,400
day off for a little while then you show

203
00:07:36,419 --> 00:07:40,080
that you understand on the<font color="#CCCCCC"> clock and you</font>

204
00:07:38,400 --> 00:07:42,570
understand what kind of cycles are going

205
00:07:40,080 --> 00:07:45,270
through that now of<font color="#CCCCCC"> course you can</font>

206
00:07:42,570 --> 00:07:47,400
download all<font color="#CCCCCC"> kinds of IDEs that take</font>

207
00:07:45,270 --> 00:07:49,320
care of this it's all abstract it out at

208
00:07:47,400 --> 00:07:51,150
sea but<font color="#E5E5E5"> you're actually aren't going to</font>

209
00:07:49,320 --> 00:07:52,349
be learning anything about the way<font color="#E5E5E5"> that</font>

210
00:07:51,150 --> 00:07:55,739
the hardware is actually working by

211
00:07:52,350 --> 00:07:57,840
doing that so if you go with a 32-bit

212
00:07:55,740 --> 00:08:00,240
microcontroller it generally you're

213
00:07:57,840 --> 00:08:02,340
going to be forced<font color="#E5E5E5"> immediately into an</font>

214
00:08:00,240 --> 00:08:05,100
ID very few people are programming arm

215
00:08:02,340 --> 00:08:07,590
microcontrollers with a text editor<font color="#CCCCCC"> and</font>

216
00:08:05,100 --> 00:08:09,419
a make file that they program themselves

217
00:08:07,590 --> 00:08:11,909
but<font color="#E5E5E5"> if you start out with an 8-bit ship</font>

218
00:08:09,419 --> 00:08:14,789
you<font color="#CCCCCC"> can totally</font><font color="#E5E5E5"> do that you can use GCC</font>

219
00:08:11,910 --> 00:08:16,260
for many of the 8-bit families you can

220
00:08:14,790 --> 00:08:20,750
write a make file yourself that is

221
00:08:16,260 --> 00:08:23,669
probably six lines long you can write a

222
00:08:20,750 --> 00:08:27,720
just a basic see file that<font color="#CCCCCC"> it</font><font color="#E5E5E5"> you know</font>

223
00:08:23,669 --> 00:08:29,640
your main dot C which is<font color="#E5E5E5"> if you're just</font>

224
00:08:27,720 --> 00:08:31,290
killing cycles<font color="#E5E5E5"> with loops you can</font>

225
00:08:29,640 --> 00:08:33,449
probably<font color="#CCCCCC"> do that in about ten lines</font><font color="#E5E5E5"> of</font>

226
00:08:31,290 --> 00:08:35,789
code and it gives you that basic

227
00:08:33,450 --> 00:08:37,289
understanding that allows you to<font color="#CCCCCC"> kind of</font>

228
00:08:35,789 --> 00:08:40,409
move to the next level I also think

229
00:08:37,289 --> 00:08:42,429
hardware debugging on is best learned on

230
00:08:40,409 --> 00:08:44,829
really simple system so

231
00:08:42,429 --> 00:08:48,459
this was just some<font color="#E5E5E5"> I was playing around</font>

232
00:08:44,830 --> 00:08:51,070
with 59 fine shift 595 shift registers

233
00:08:48,460 --> 00:08:56,020
so I've just<font color="#E5E5E5"> got a couple lines coming</font>

234
00:08:51,070 --> 00:08:58,870
in on the IDC cable and feeding in clock

235
00:08:56,020 --> 00:09:00,699
data and latch<font color="#E5E5E5"> on to these and one of</font>

236
00:08:58,870 --> 00:09:02,770
<font color="#E5E5E5">the things that you learn is this</font>

237
00:09:00,700 --> 00:09:05,440
pattern of LEDs right here is really bad

238
00:09:02,770 --> 00:09:07,240
<font color="#E5E5E5">for troubleshooting because which side</font>

239
00:09:05,440 --> 00:09:09,250
do you think got shifted in to that

240
00:09:07,240 --> 00:09:11,950
shift register going every other one you

241
00:09:09,250 --> 00:09:13,779
have no<font color="#E5E5E5"> idea it seems really simple but</font>

242
00:09:11,950 --> 00:09:15,520
kind of looking<font color="#E5E5E5"> at this going through</font>

243
00:09:13,779 --> 00:09:17,080
<font color="#E5E5E5">these exercises and learning boy when I</font>

244
00:09:15,520 --> 00:09:19,240
need to troubleshoot something blindly

245
00:09:17,080 --> 00:09:20,470
if I can't figure<font color="#E5E5E5"> it out this is not</font><font color="#CCCCCC"> the</font>

246
00:09:19,240 --> 00:09:22,810
way to do it I need to<font color="#E5E5E5"> put in a pattern</font>

247
00:09:20,470 --> 00:09:24,730
you can tell which end is which and can

248
00:09:22,810 --> 00:09:26,640
<font color="#E5E5E5">get a little</font><font color="#CCCCCC"> more data that way so</font>

249
00:09:24,730 --> 00:09:28,810
that's<font color="#E5E5E5"> kind of like dead reckoning</font>

250
00:09:26,640 --> 00:09:30,550
debugging but then also if you<font color="#CCCCCC"> look at</font>

251
00:09:28,810 --> 00:09:33,279
hardware debugging which is amazingly

252
00:09:30,550 --> 00:09:36,040
useful for<font color="#E5E5E5"> embedded systems almost every</font>

253
00:09:33,279 --> 00:09:37,959
8-bit system has some type of debugging

254
00:09:36,040 --> 00:09:41,170
so like with the atmel microcontrollers

255
00:09:37,959 --> 00:09:43,630
they have debug wire<font color="#CCCCCC"> one wire debugging</font>

256
00:09:41,170 --> 00:09:45,430
for the small microcontrollers and then

257
00:09:43,630 --> 00:09:46,900
they have cereal debugging and some

258
00:09:45,430 --> 00:09:49,439
other ways for the larger

259
00:09:46,900 --> 00:09:52,510
microcontrollers and again just<font color="#E5E5E5"> with a</font>

260
00:09:49,440 --> 00:09:54,730
just with a text file you can use open

261
00:09:52,510 --> 00:09:57,250
source like gdb or you can go<font color="#CCCCCC"> through an</font>

262
00:09:54,730 --> 00:09:59,560
IDE if you want to go that way<font color="#E5E5E5"> and you</font>

263
00:09:57,250 --> 00:10:01,060
know put in a<font color="#E5E5E5"> breakpoint at any point in</font>

264
00:09:59,560 --> 00:10:02,949
<font color="#E5E5E5">your code and</font><font color="#CCCCCC"> then you know look</font><font color="#E5E5E5"> at the</font>

265
00:10:01,060 --> 00:10:04,810
registers and actually say what are

266
00:10:02,950 --> 00:10:07,120
these registers why is this register

267
00:10:04,810 --> 00:10:09,369
reading a 0xff every time I read it<font color="#E5E5E5"> even</font>

268
00:10:07,120 --> 00:10:10,300
<font color="#E5E5E5">though it shouldn't be on and I</font><font color="#CCCCCC"> think</font>

269
00:10:09,370 --> 00:10:15,160
the<font color="#CCCCCC"> thing that's really</font><font color="#E5E5E5"> interesting</font>

270
00:10:10,300 --> 00:10:17,199
about<font color="#E5E5E5"> that is you know like</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> said</font><font color="#CCCCCC"> one</font>

271
00:10:15,160 --> 00:10:18,819
<font color="#CCCCCC">armed embedded at the beginning so we're</font>

272
00:10:17,200 --> 00:10:20,860
tying one arm behind our back here we're

273
00:10:18,820 --> 00:10:22,900
saying let's let's kind of go down and

274
00:10:20,860 --> 00:10:26,829
only work with the<font color="#E5E5E5"> small part of this</font>

275
00:10:22,900 --> 00:10:28,600
but if you start from a small<font color="#E5E5E5"> system</font>

276
00:10:26,829 --> 00:10:30,609
like<font color="#CCCCCC"> that you can actually look at</font>

277
00:10:28,600 --> 00:10:32,230
what's coming out of the compiler as

278
00:10:30,610 --> 00:10:34,600
assembly I think it's much more

279
00:10:32,230 --> 00:10:37,089
difficult I haven't found anyone that is

280
00:10:34,600 --> 00:10:39,190
writing all assembly forearm controllers

281
00:10:37,089 --> 00:10:40,959
and I think having looked at some<font color="#CCCCCC"> of the</font>

282
00:10:39,190 --> 00:10:42,640
arm code that I've<font color="#E5E5E5"> written myself it's</font>

283
00:10:40,959 --> 00:10:44,020
much more difficult to<font color="#E5E5E5"> pick out where</font>

284
00:10:42,640 --> 00:10:45,910
your code<font color="#CCCCCC"> is because there's so much</font>

285
00:10:44,020 --> 00:10:48,670
happening through the header files and

286
00:10:45,910 --> 00:10:50,920
so much happening on you know the<font color="#CCCCCC"> the</font>

287
00:10:48,670 --> 00:10:53,459
back side of<font color="#E5E5E5"> things that your assembler</font>

288
00:10:50,920 --> 00:10:56,639
code doesn't isn't<font color="#CCCCCC"> as easy to parse</font>

289
00:10:53,459 --> 00:10:58,079
when you look<font color="#E5E5E5"> at it as an 8-bit code is</font>

290
00:10:56,639 --> 00:11:00,540
so you can learn<font color="#E5E5E5"> a little bit more about</font>

291
00:10:58,079 --> 00:11:02,339
<font color="#E5E5E5">assembly and learn what your</font><font color="#CCCCCC"> C code is</font>

292
00:11:00,540 --> 00:11:04,559
actually getting compiled down in if you

293
00:11:02,339 --> 00:11:06,480
start<font color="#E5E5E5"> with the simpler system I also</font>

294
00:11:04,559 --> 00:11:09,629
think you can read the data sheet on any

295
00:11:06,480 --> 00:11:12,420
bit microcontroller so my favorite kind

296
00:11:09,629 --> 00:11:15,059
<font color="#E5E5E5">of go to is the Omega 168 and this data</font>

297
00:11:12,420 --> 00:11:17,189
sheets 660 pages read every page of it I

298
00:11:15,059 --> 00:11:19,350
really enjoy it I know where<font color="#E5E5E5"> everything</font>

299
00:11:17,189 --> 00:11:23,849
is in it one of the<font color="#CCCCCC"> ARM chips that</font><font color="#E5E5E5"> I</font>

300
00:11:19,350 --> 00:11:26,819
like to<font color="#CCCCCC"> use is</font><font color="#E5E5E5"> stm32f4 05 it's on one</font><font color="#CCCCCC"> of</font>

301
00:11:23,850 --> 00:11:29,730
the discovery boards I've got a<font color="#E5E5E5"> bunch of</font>

302
00:11:26,819 --> 00:11:31,139
the STM discovery boards it's a<font color="#E5E5E5"> great</font>

303
00:11:29,730 --> 00:11:33,449
ship though the problem is if you

304
00:11:31,139 --> 00:11:35,670
download the the data sheet for this

305
00:11:33,449 --> 00:11:37,920
it's 200 pages and then<font color="#E5E5E5"> you go and look</font>

306
00:11:35,670 --> 00:11:39,899
up like the GPIO registers in there and

307
00:11:37,920 --> 00:11:42,628
it's not in there because<font color="#E5E5E5"> they just have</font>

308
00:11:39,899 --> 00:11:45,480
another reference manual of 1731 pages

309
00:11:42,629 --> 00:11:47,970
for<font color="#CCCCCC"> the for the entire family of chips</font>

310
00:11:45,480 --> 00:11:50,189
so if you're starting<font color="#E5E5E5"> out and you know</font>

311
00:11:47,970 --> 00:11:51,809
you get the ID<font color="#E5E5E5"> set up and you write some</font>

312
00:11:50,189 --> 00:11:53,069
basic blink code and<font color="#E5E5E5"> get it to work on</font>

313
00:11:51,809 --> 00:11:54,629
there that's great but then when you

314
00:11:53,069 --> 00:11:57,360
<font color="#E5E5E5">actually need</font><font color="#CCCCCC"> to go and figure out on</font>

315
00:11:54,629 --> 00:11:59,009
you know how do I get this peripheral to

316
00:11:57,360 --> 00:12:00,629
work font you just finding<font color="#CCCCCC"> it in the</font>

317
00:11:59,009 --> 00:12:01,769
data sheet is tough and actually

318
00:12:00,629 --> 00:12:04,709
understanding what you're looking at is

319
00:12:01,769 --> 00:12:07,709
even tougher so looking at gpio for for

320
00:12:04,709 --> 00:12:09,388
<font color="#E5E5E5">instance so there's a ton of registers</font>

321
00:12:07,709 --> 00:12:13,709
on this if you like the mode like input

322
00:12:09,389 --> 00:12:16,529
<font color="#E5E5E5">output type i think is for ultimate</font>

323
00:12:13,709 --> 00:12:17,969
alternate types speed is interesting one

324
00:12:16,529 --> 00:12:21,089
so you<font color="#CCCCCC"> can actually set the</font><font color="#E5E5E5"> slew rate</font>

325
00:12:17,970 --> 00:12:22,499
like how fast the voltage on these pins

326
00:12:21,089 --> 00:12:24,660
is going to ramp up when you turn one of

327
00:12:22,499 --> 00:12:26,249
them on and so if you're doing something

328
00:12:24,660 --> 00:12:27,629
that's<font color="#E5E5E5"> super</font><font color="#CCCCCC"> high speed you want</font><font color="#E5E5E5"> to have</font>

329
00:12:26,249 --> 00:12:29,399
the slew rate be really high but<font color="#E5E5E5"> then</font>

330
00:12:27,629 --> 00:12:31,139
you're going to burn a lot more power

331
00:12:29,399 --> 00:12:34,139
that way so if you're doing low power

332
00:12:31,139 --> 00:12:35,879
you can set that appropriately there's

333
00:12:34,139 --> 00:12:38,339
pull up pull down resistors in it which

334
00:12:35,879 --> 00:12:39,540
is kind<font color="#E5E5E5"> of nice so normally in simpler</font>

335
00:12:38,339 --> 00:12:41,100
chips you only can have pull-up

336
00:12:39,540 --> 00:12:42,360
resistors whenever you have a pull-up

337
00:12:41,100 --> 00:12:43,679
resistor you're going to be draining

338
00:12:42,360 --> 00:12:45,899
some current through that which if

339
00:12:43,679 --> 00:12:47,490
you're running<font color="#E5E5E5"> on batteries on not the</font>

340
00:12:45,899 --> 00:12:48,540
greatest of things<font color="#E5E5E5"> and then if you're</font>

341
00:12:47,490 --> 00:12:50,160
going<font color="#E5E5E5"> to go to sleep</font><font color="#CCCCCC"> you have to</font><font color="#E5E5E5"> turn</font>

342
00:12:48,540 --> 00:12:51,420
them on remember to turn them back or

343
00:12:50,160 --> 00:12:53,279
turn them off and turn it back on when

344
00:12:51,420 --> 00:12:55,079
you when<font color="#CCCCCC"> you wake</font><font color="#E5E5E5"> up with this you can</font>

345
00:12:53,279 --> 00:12:56,970
set a pulldown resistor you can set a

346
00:12:55,079 --> 00:12:58,920
button<font color="#E5E5E5"> and then have that button toilet</font>

347
00:12:56,970 --> 00:13:01,499
to the voltage rail that way you're only

348
00:12:58,920 --> 00:13:03,120
a sinking current when you press the

349
00:13:01,499 --> 00:13:04,679
button so you're not burning current

350
00:13:03,120 --> 00:13:06,710
through a pull-up resistor at all which

351
00:13:04,679 --> 00:13:08,510
is nice and<font color="#E5E5E5"> then there</font>

352
00:13:06,710 --> 00:13:11,450
like a bunch of other data registers

353
00:13:08,510 --> 00:13:14,540
stuff in there alternately this is for

354
00:13:11,450 --> 00:13:17,330
the atmega 168 or yeah probably<font color="#E5E5E5"> that</font>

355
00:13:14,540 --> 00:13:19,180
there are only three registers total for

356
00:13:17,330 --> 00:13:21,530
your input<font color="#CCCCCC"> and output on any</font>

357
00:13:19,180 --> 00:13:24,109
microcontroller so you can you can read

358
00:13:21,530 --> 00:13:26,959
this really easily it explains<font color="#E5E5E5"> it more</font>

359
00:13:24,110 --> 00:13:28,580
but you're<font color="#CCCCCC"> looking at a data direction</font>

360
00:13:26,960 --> 00:13:31,010
register you can<font color="#E5E5E5"> set things as input or</font>

361
00:13:28,580 --> 00:13:33,590
output once you<font color="#E5E5E5"> have it set as an output</font>

362
00:13:31,010 --> 00:13:34,610
anything you write to<font color="#CCCCCC"> this 8-bit port</font>

363
00:13:33,590 --> 00:13:37,190
right here is going<font color="#E5E5E5"> to show up on the</font>

364
00:13:34,610 --> 00:13:40,430
pins so as<font color="#E5E5E5"> far as blinking you're</font>

365
00:13:37,190 --> 00:13:43,400
turning on<font color="#E5E5E5"> your first time</font><font color="#CCCCCC"> LED you can</font>

366
00:13:40,430 --> 00:13:47,449
set you know port<font color="#E5E5E5"> b2 0xff make all these</font>

367
00:13:43,400 --> 00:13:50,120
outputs and set your your port<font color="#E5E5E5"> B</font>

368
00:13:47,450 --> 00:13:52,430
register to 0xff and and turn everything

369
00:13:50,120 --> 00:13:53,660
on and it's just going<font color="#E5E5E5"> to happen if you</font>

370
00:13:52,430 --> 00:13:55,370
did the same thing with an arm

371
00:13:53,660 --> 00:13:57,680
microcontroller if you weren't using the

372
00:13:55,370 --> 00:13:59,180
peripheral<font color="#CCCCCC"> libraries most likely it</font>

373
00:13:57,680 --> 00:14:00,949
wouldn't turn<font color="#E5E5E5"> on because you have</font><font color="#CCCCCC"> to do</font>

374
00:13:59,180 --> 00:14:02,479
other steps along the way like get<font color="#E5E5E5"> the</font>

375
00:14:00,950 --> 00:14:04,100
clock to actually start running and then

376
00:14:02,480 --> 00:14:06,890
<font color="#E5E5E5">I think the gotcha for me when I was</font>

377
00:14:04,100 --> 00:14:08,750
first doing an STM<font color="#CCCCCC"> ARM chip is you have</font>

378
00:14:06,890 --> 00:14:10,730
to turn on the peripheral clock to the

379
00:14:08,750 --> 00:14:12,470
actual port that you're using as well

380
00:14:10,730 --> 00:14:14,030
it's a power saving feature which<font color="#CCCCCC"> is</font>

381
00:14:12,470 --> 00:14:16,400
which<font color="#CCCCCC"> is pretty nice but as far as</font>

382
00:14:14,030 --> 00:14:17,930
understanding what's going on on the

383
00:14:16,400 --> 00:14:20,390
hardware can be very difficult for

384
00:14:17,930 --> 00:14:22,010
someone who's trying<font color="#E5E5E5"> to learn the basics</font>

385
00:14:20,390 --> 00:14:26,900
of microcontrollers to figure that part

386
00:14:22,010 --> 00:14:29,300
of it out this is one of<font color="#CCCCCC"> the registers</font>

387
00:14:26,900 --> 00:14:30,860
from that STM chip as well just to show

388
00:14:29,300 --> 00:14:32,750
<font color="#CCCCCC">you</font><font color="#E5E5E5"> how deep some of the features go</font>

389
00:14:30,860 --> 00:14:35,390
they they stack everything that they can

390
00:14:32,750 --> 00:14:38,270
into these<font color="#E5E5E5"> dies and it's wonderful so</font>

391
00:14:35,390 --> 00:14:39,860
this is a bit set and reset register so

392
00:14:38,270 --> 00:14:42,020
instead<font color="#CCCCCC"> of just saying all right I</font><font color="#E5E5E5"> want</font>

393
00:14:39,860 --> 00:14:44,810
to turn<font color="#CCCCCC"> a pin on or off you can you</font><font color="#E5E5E5"> can</font>

394
00:14:42,020 --> 00:14:46,579
say any of<font color="#E5E5E5"> the bits right here if you</font>

395
00:14:44,810 --> 00:14:48,890
set them are going<font color="#E5E5E5"> to make that</font>

396
00:14:46,580 --> 00:14:50,330
corresponding pin high and any of the

397
00:14:48,890 --> 00:14:51,710
bits right here if<font color="#CCCCCC"> you set them are</font>

398
00:14:50,330 --> 00:14:53,750
going<font color="#E5E5E5"> to make that corresponding pin low</font>

399
00:14:51,710 --> 00:14:55,550
anything left 0 is going to be untouched

400
00:14:53,750 --> 00:14:56,990
and so at first it's kind of hard to

401
00:14:55,550 --> 00:14:58,729
figure out<font color="#E5E5E5"> like why would you</font><font color="#CCCCCC"> use this</font>

402
00:14:56,990 --> 00:15:00,980
<font color="#E5E5E5">why can't you just write</font><font color="#CCCCCC"> to the register</font>

403
00:14:58,730 --> 00:15:03,620
and the thing<font color="#CCCCCC"> is if you want to have</font>

404
00:15:00,980 --> 00:15:05,690
some<font color="#E5E5E5"> of the pins on the output just</font>

405
00:15:03,620 --> 00:15:07,070
<font color="#E5E5E5">remain the same and it's undetermined</font>

406
00:15:05,690 --> 00:15:09,020
what they are and you want to change

407
00:15:07,070 --> 00:15:10,640
some of<font color="#E5E5E5"> the others some of them you want</font>

408
00:15:09,020 --> 00:15:12,860
to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> won some of them you want to</font><font color="#E5E5E5"> be 0</font>

409
00:15:10,640 --> 00:15:14,569
this register allows you to do all<font color="#CCCCCC"> that</font>

410
00:15:12,860 --> 00:15:15,980
in a single instruction because it's

411
00:15:14,570 --> 00:15:19,070
<font color="#E5E5E5">only going to change the ones that you</font>

412
00:15:15,980 --> 00:15:19,910
set or reset<font color="#E5E5E5"> on here and you</font><font color="#CCCCCC"> can you can</font>

413
00:15:19,070 --> 00:15:22,400
mix them because<font color="#CCCCCC"> it's a</font>

414
00:15:19,910 --> 00:15:24,650
32bit right all at the same time on an

415
00:15:22,400 --> 00:15:25,819
APM microcontroller there isn't if there

416
00:15:24,650 --> 00:15:27,800
isn't a register<font color="#E5E5E5"> like that so you're</font>

417
00:15:25,820 --> 00:15:30,940
actually going<font color="#E5E5E5"> to have to read what the</font>

418
00:15:27,800 --> 00:15:33,229
current values are do your logical

419
00:15:30,940 --> 00:15:35,320
manipulation to that register and then

420
00:15:33,230 --> 00:15:37,250
write it back to the port and I<font color="#E5E5E5"> think</font>

421
00:15:35,320 --> 00:15:38,840
<font color="#CCCCCC">understanding that when you're when</font>

422
00:15:37,250 --> 00:15:40,820
you're talking<font color="#E5E5E5"> about like sinking things</font>

423
00:15:38,840 --> 00:15:42,590
doing<font color="#CCCCCC"> high-speed video and that sort of</font>

424
00:15:40,820 --> 00:15:44,000
thing understanding what the hardware is

425
00:15:42,590 --> 00:15:46,070
doing and why you would want to write to

426
00:15:44,000 --> 00:15:48,230
this register rather than do a read

427
00:15:46,070 --> 00:15:52,940
modify write is kind of a<font color="#E5E5E5"> really</font>

428
00:15:48,230 --> 00:15:55,100
powerful lesson to learn and so this<font color="#CCCCCC"> is</font>

429
00:15:52,940 --> 00:15:57,320
a nokia display that I polite<font color="#E5E5E5"> at an old</font>

430
00:15:55,100 --> 00:15:58,520
<font color="#E5E5E5">cell phone I really bad at getting rid</font>

431
00:15:57,320 --> 00:15:59,810
of my old electronics I don't know if

432
00:15:58,520 --> 00:16:01,069
you guys are the same<font color="#CCCCCC"> problem but I end</font>

433
00:15:59,810 --> 00:16:02,599
up with a ton of cell phone sitting

434
00:16:01,070 --> 00:16:03,770
around and so one day I<font color="#E5E5E5"> was like you</font>

435
00:16:02,600 --> 00:16:06,170
<font color="#E5E5E5">know what I'm gonna see if I can</font><font color="#CCCCCC"> make</font>

436
00:16:03,770 --> 00:16:08,750
that<font color="#E5E5E5"> cell phone screen work and I put it</font>

437
00:16:06,170 --> 00:16:11,810
on an 8-bit microcontroller and is like

438
00:16:08,750 --> 00:16:13,340
hey I'm gonna use the you know the

439
00:16:11,810 --> 00:16:15,650
hardware peripherals because this is<font color="#E5E5E5"> SPI</font>

440
00:16:13,340 --> 00:16:17,120
and I don't want a bit bang it out and I

441
00:16:15,650 --> 00:16:20,420
started looking<font color="#E5E5E5"> into the data sheet this</font>

442
00:16:17,120 --> 00:16:22,610
screen uses<font color="#E5E5E5"> 9 bit spi so on an 8-bit</font>

443
00:16:20,420 --> 00:16:24,560
microcontroller you can only load<font color="#CCCCCC"> eight</font>

444
00:16:22,610 --> 00:16:26,270
bits and you send them<font color="#E5E5E5"> out in the ninth</font>

445
00:16:24,560 --> 00:16:28,099
bit for<font color="#CCCCCC"> this screen you have to send</font><font color="#E5E5E5"> out</font>

446
00:16:26,270 --> 00:16:30,230
separately so I actually kind of act

447
00:16:28,100 --> 00:16:31,310
around and added<font color="#CCCCCC"> that bit in manually</font>

448
00:16:30,230 --> 00:16:34,490
and then I<font color="#E5E5E5"> was like oh I'm</font><font color="#CCCCCC"> just gonna</font>

449
00:16:31,310 --> 00:16:35,869
bit bang<font color="#E5E5E5"> this it was a good learning</font>

450
00:16:34,490 --> 00:16:38,210
<font color="#E5E5E5">experience though because it makes you</font>

451
00:16:35,870 --> 00:16:39,740
appreciate again those things the 32-bit

452
00:16:38,210 --> 00:16:41,980
microcontroller has so when<font color="#E5E5E5"> you move to</font>

453
00:16:39,740 --> 00:16:44,060
arm and arm<font color="#E5E5E5"> chip is going to have</font>

454
00:16:41,980 --> 00:16:45,910
configurable<font color="#E5E5E5"> SPI it's probably going to</font>

455
00:16:44,060 --> 00:16:48,800
<font color="#E5E5E5">have multiple of them like redundant</font>

456
00:16:45,910 --> 00:16:51,290
features on there and a lot of the arm

457
00:16:48,800 --> 00:16:53,170
controllers you can choose<font color="#E5E5E5"> six seven</font>

458
00:16:51,290 --> 00:16:56,060
<font color="#E5E5E5">eight nine like usually six through</font><font color="#CCCCCC"> ten</font>

459
00:16:53,170 --> 00:16:57,979
bits on your<font color="#E5E5E5"> SPI so all the sudden I had</font>

460
00:16:56,060 --> 00:17:00,199
this like really hacky library on any

461
00:16:57,980 --> 00:17:01,670
bit microcontroller when I moved to<font color="#E5E5E5"> an</font>

462
00:17:00,200 --> 00:17:04,010
arm microcontroller on this I was able

463
00:17:01,670 --> 00:17:05,599
<font color="#E5E5E5">to write it all in</font><font color="#CCCCCC"> Hardware it was just</font>

464
00:17:04,010 --> 00:17:08,420
a few lines of code to set it up<font color="#CCCCCC"> and</font>

465
00:17:05,599 --> 00:17:10,399
then a few lines to push from from

466
00:17:08,420 --> 00:17:11,840
memory out the<font color="#E5E5E5"> other thing you want to</font>

467
00:17:10,400 --> 00:17:13,520
think about when you're moving from an

468
00:17:11,839 --> 00:17:15,980
8-bit to a 32-bit microcontrollers

469
00:17:13,520 --> 00:17:18,349
usually change voltage levels so on<font color="#E5E5E5"> a</font>

470
00:17:15,980 --> 00:17:20,060
<font color="#E5E5E5">pem microcontrollers often will have a</font>

471
00:17:18,349 --> 00:17:22,219
range like two point seven two five

472
00:17:20,060 --> 00:17:24,409
point five volts so a lot of<font color="#E5E5E5"> people</font>

473
00:17:22,220 --> 00:17:25,819
start off in that<font color="#E5E5E5"> five volt common range</font>

474
00:17:24,410 --> 00:17:27,830
and end up buying all of their I'm

475
00:17:25,819 --> 00:17:30,340
prototyping hardware and so I think in

476
00:17:27,829 --> 00:17:32,830
itself it's a good learning experience

477
00:17:30,340 --> 00:17:35,049
I've got a couple of level shifters

478
00:17:32,830 --> 00:17:37,000
level shifters so going from<font color="#E5E5E5"> 5 volt on</font>

479
00:17:35,049 --> 00:17:39,370
one side to 3.3<font color="#CCCCCC"> volt</font><font color="#E5E5E5"> on the other side</font>

480
00:17:37,000 --> 00:17:43,120
so this screens a 5 volt screen and<font color="#E5E5E5"> then</font>

481
00:17:39,370 --> 00:17:46,539
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a TI Launchpad this is a</font><font color="#E5E5E5"> Tiva</font>

482
00:17:43,120 --> 00:17:48,340
<font color="#E5E5E5">see microcontroller on there and you</font>

483
00:17:46,539 --> 00:17:49,600
know this<font color="#CCCCCC"> is more than</font><font color="#E5E5E5"> just coding now</font>

484
00:17:48,340 --> 00:17:50,740
you're actually looking at like how do i

485
00:17:49,600 --> 00:17:52,299
hook the hardware up what are the

486
00:17:50,740 --> 00:17:53,440
different features on level shifters

487
00:17:52,299 --> 00:17:54,820
that i can use<font color="#E5E5E5"> what</font><font color="#CCCCCC"> kind of level</font>

488
00:17:53,440 --> 00:17:56,470
shifter is going to be best for this is

489
00:17:54,820 --> 00:18:00,309
it going to fit the speed that<font color="#E5E5E5"> i want to</font>

490
00:17:56,470 --> 00:18:01,900
run in that<font color="#E5E5E5"> sort of thing so again</font>

491
00:18:00,309 --> 00:18:04,000
looking at the the benefits of going

492
00:18:01,900 --> 00:18:05,529
towards<font color="#E5E5E5"> the</font><font color="#CCCCCC"> 32 bit i think it's you</font><font color="#E5E5E5"> just</font>

493
00:18:04,000 --> 00:18:07,120
have all of the hardware options in the

494
00:18:05,529 --> 00:18:08,649
world so if you already understand

495
00:18:07,120 --> 00:18:10,510
you've kind<font color="#E5E5E5"> of gone through that you</font>

496
00:18:08,649 --> 00:18:12,100
know boot camp of figuring out how to

497
00:18:10,510 --> 00:18:14,470
manipulate registers how to manipulate

498
00:18:12,100 --> 00:18:16,029
bits then moving up is very empowering

499
00:18:14,470 --> 00:18:18,880
and you actually then have appreciation

500
00:18:16,029 --> 00:18:20,500
like with that nine bit<font color="#CCCCCC"> SPI screen you</font>

501
00:18:18,880 --> 00:18:22,510
can say having all the hardware in the

502
00:18:20,500 --> 00:18:24,909
world on this chip is wonderful you're

503
00:18:22,510 --> 00:18:26,260
also<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> have a lot of 100</font><font color="#E5E5E5"> a lot of</font>

504
00:18:24,909 --> 00:18:30,760
that hardware be redundant so you're

505
00:18:26,260 --> 00:18:32,260
going to have like a ton of you arts you

506
00:18:30,760 --> 00:18:33,789
might get a chip<font color="#E5E5E5"> that has six you arts</font>

507
00:18:32,260 --> 00:18:35,770
on you can<font color="#E5E5E5"> you can kind of go through</font>

508
00:18:33,789 --> 00:18:38,080
parametric search and find that sort of

509
00:18:35,770 --> 00:18:39,250
thing on it you also have flexible pin

510
00:18:38,080 --> 00:18:41,590
mapping so you're able to move that

511
00:18:39,250 --> 00:18:45,640
stuff around which is really<font color="#E5E5E5"> nice I</font>

512
00:18:41,590 --> 00:18:47,470
think<font color="#E5E5E5"> you know a lot</font><font color="#CCCCCC"> of times you the</font>

513
00:18:45,640 --> 00:18:49,120
design changes on while you're

514
00:18:47,470 --> 00:18:51,700
prototyping if you have a pin that can

515
00:18:49,120 --> 00:18:53,139
change the mapping you can you know

516
00:18:51,700 --> 00:18:55,029
change it for your next iteration but

517
00:18:53,140 --> 00:18:58,210
still use your current um you know

518
00:18:55,029 --> 00:18:59,770
hardware setup for prototyping<font color="#E5E5E5"> dma is on</font>

519
00:18:58,210 --> 00:19:00,940
here twice because it is one<font color="#CCCCCC"> of my</font>

520
00:18:59,770 --> 00:19:03,460
favorite things if you've never

521
00:19:00,940 --> 00:19:05,320
programmed with<font color="#E5E5E5"> DMA before that should</font>

522
00:19:03,460 --> 00:19:08,950
be the first<font color="#E5E5E5"> project that you go</font><font color="#CCCCCC"> back</font>

523
00:19:05,320 --> 00:19:12,039
and try out<font color="#CCCCCC"> so's direct memory access it</font>

524
00:19:08,950 --> 00:19:13,210
allows you basically to offload stuff

525
00:19:12,039 --> 00:19:16,000
that traditionally would be done in the

526
00:19:13,210 --> 00:19:18,669
<font color="#CCCCCC">CPU you can set up hardware interrupts</font>

527
00:19:16,000 --> 00:19:20,309
to call the direct memory access to then

528
00:19:18,669 --> 00:19:22,539
load<font color="#E5E5E5"> something out of a memory</font><font color="#CCCCCC"> address</font>

529
00:19:20,309 --> 00:19:26,110
into your next peripheral so if you're

530
00:19:22,539 --> 00:19:27,640
sending<font color="#CCCCCC"> that 99 bit SPI you can tell it</font>

531
00:19:26,110 --> 00:19:29,469
look every time<font color="#E5E5E5"> every time you're done</font>

532
00:19:27,640 --> 00:19:32,110
sending those 9 bits pull the<font color="#E5E5E5"> next thing</font>

533
00:19:29,470 --> 00:19:33,370
out<font color="#CCCCCC"> of memory you could have you know</font>

534
00:19:32,110 --> 00:19:36,100
you can set it<font color="#E5E5E5"> up so you got a user</font>

535
00:19:33,370 --> 00:19:37,840
interrupt pin so whenever<font color="#E5E5E5"> somebody</font>

536
00:19:36,100 --> 00:19:39,340
presses a button it automatically loads

537
00:19:37,840 --> 00:19:40,629
a new screen

538
00:19:39,340 --> 00:19:42,610
and you<font color="#CCCCCC"> could do that</font><font color="#E5E5E5"> with all without</font>

539
00:19:40,630 --> 00:19:44,800
interrupting the<font color="#E5E5E5"> CPU just really</font>

540
00:19:42,610 --> 00:19:47,679
powerful on if you've heard of the TT

541
00:19:44,800 --> 00:19:51,190
3.2 there's a ton of libraries on there

542
00:19:47,680 --> 00:19:54,400
that have been written that use DMA for

543
00:19:51,190 --> 00:19:56,080
like audio and for video and allow the

544
00:19:54,400 --> 00:19:57,400
user then to just pull in those

545
00:19:56,080 --> 00:19:59,080
libraries and do everything that<font color="#E5E5E5"> they</font>

546
00:19:57,400 --> 00:20:01,000
want on the cpu without having to worry

547
00:19:59,080 --> 00:20:03,550
about you know<font color="#E5E5E5"> what's going on in the</font>

548
00:20:01,000 --> 00:20:05,500
background the other thing<font color="#CCCCCC"> I</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> like</font>

549
00:20:03,550 --> 00:20:06,970
about 32-bit microcontrollers is they

550
00:20:05,500 --> 00:20:09,280
tend to bring in some unified tools

551
00:20:06,970 --> 00:20:10,780
although I was talking with my<font color="#E5E5E5"> Kirsten</font>

552
00:20:09,280 --> 00:20:12,820
last night about this and maybe it's

553
00:20:10,780 --> 00:20:16,410
because<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> using a linux operating</font>

554
00:20:12,820 --> 00:20:19,000
system to develop on these but I<font color="#E5E5E5"> I find</font>

555
00:20:16,410 --> 00:20:22,390
using a jtag programmer<font color="#E5E5E5"> I can program</font>

556
00:20:19,000 --> 00:20:25,090
almost any family of arm controllers now

557
00:20:22,390 --> 00:20:26,260
and I wasn't able able to do that with

558
00:20:25,090 --> 00:20:27,939
<font color="#CCCCCC">eight</font><font color="#E5E5E5"> bits so when I was working with a</font>

559
00:20:26,260 --> 00:20:30,040
bit i had to<font color="#E5E5E5"> have a different controller</font>

560
00:20:27,940 --> 00:20:33,040
for<font color="#CCCCCC"> pic and a different controller for</font>

561
00:20:30,040 --> 00:20:35,940
on a VR and<font color="#CCCCCC"> a different controller for</font>

562
00:20:33,040 --> 00:20:38,710
STM eight so that's something I value

563
00:20:35,940 --> 00:20:40,990
the open OCD has been really great for

564
00:20:38,710 --> 00:20:42,880
debugging so it's on<font color="#E5E5E5"> chip debugging and</font>

565
00:20:40,990 --> 00:20:46,600
almost every board that I've tried to

566
00:20:42,880 --> 00:20:48,820
debug with has had a configuration file

567
00:20:46,600 --> 00:20:50,139
for OCD already and I there was one that

568
00:20:48,820 --> 00:20:52,600
I came across that I didn't I was able

569
00:20:50,140 --> 00:20:54,610
<font color="#E5E5E5">to modify it myself and then you know</font>

570
00:20:52,600 --> 00:20:56,409
submit that back so that it's available

571
00:20:54,610 --> 00:20:59,709
<font color="#E5E5E5">for anybody else that wants to use</font><font color="#CCCCCC"> it</font>

572
00:20:56,410 --> 00:21:02,980
and<font color="#CCCCCC"> then GCC is open source compiler and</font>

573
00:20:59,710 --> 00:21:05,740
I would compile GCC for arm and it works

574
00:21:02,980 --> 00:21:07,360
pretty well across platforms I think one

575
00:21:05,740 --> 00:21:08,290
of the things I ran into<font color="#E5E5E5"> is I hadn't</font>

576
00:21:07,360 --> 00:21:09,850
compiled it with the right

577
00:21:08,290 --> 00:21:11,950
floating-point support for Texas

578
00:21:09,850 --> 00:21:14,800
Instruments chips but you can recompile

579
00:21:11,950 --> 00:21:16,480
you know it for specific architectures

580
00:21:14,800 --> 00:21:18,850
and have those<font color="#E5E5E5"> two you'll change side by</font>

581
00:21:16,480 --> 00:21:20,920
side you know you don't<font color="#E5E5E5"> need a</font>

582
00:21:18,850 --> 00:21:24,219
proprietary tool chain to work with

583
00:21:20,920 --> 00:21:25,990
these things and<font color="#E5E5E5"> I</font><font color="#CCCCCC"> think the arm core is</font>

584
00:21:24,220 --> 00:21:28,300
something that I find<font color="#E5E5E5"> very valuable so</font>

585
00:21:25,990 --> 00:21:30,400
arm arm kind of sets a specification

586
00:21:28,300 --> 00:21:32,409
it's like the IBM of 32-bit

587
00:21:30,400 --> 00:21:34,630
microcontrollers they say you need to

588
00:21:32,410 --> 00:21:36,820
have the<font color="#E5E5E5"> they actually licensing out the</font>

589
00:21:34,630 --> 00:21:38,800
the platform to be put in the chips and

590
00:21:36,820 --> 00:21:40,750
<font color="#E5E5E5">what it means is you can expect certain</font>

591
00:21:38,800 --> 00:21:42,490
things in hardware so this bottom layer

592
00:21:40,750 --> 00:21:45,250
here is what you can always expect in

593
00:21:42,490 --> 00:21:46,570
the arm cortex chips some of the things

594
00:21:45,250 --> 00:21:48,970
that<font color="#E5E5E5"> are really nice little</font><font color="#CCCCCC"> exists tick</font>

595
00:21:46,570 --> 00:21:50,879
so up counting hardware timer it's

596
00:21:48,970 --> 00:21:52,130
<font color="#E5E5E5">something I almost always implement</font>

597
00:21:50,880 --> 00:21:53,690
anyway

598
00:21:52,130 --> 00:21:55,670
and just the fact that it's<font color="#E5E5E5"> already in</font>

599
00:21:53,690 --> 00:21:56,990
there and already<font color="#E5E5E5"> going it's got a</font>

600
00:21:55,670 --> 00:21:59,300
really great vector control for

601
00:21:56,990 --> 00:22:01,160
interrupts so you can you can map how

602
00:21:59,300 --> 00:22:02,510
you want your<font color="#E5E5E5"> interrupts what your where</font>

603
00:22:01,160 --> 00:22:05,390
you want the priority what you want them

604
00:22:02,510 --> 00:22:08,000
<font color="#CCCCCC">to do and there's a ton of them there's</font>

605
00:22:05,390 --> 00:22:10,550
great support like I said<font color="#CCCCCC"> for debugging</font>

606
00:22:08,000 --> 00:22:13,310
and when you go up a little bit more so

607
00:22:10,550 --> 00:22:15,440
this is this seems this core is like a

608
00:22:13,310 --> 00:22:17,690
peripheral standard API standard that

609
00:22:15,440 --> 00:22:20,180
<font color="#E5E5E5">you can expect to work for all the chips</font>

610
00:22:17,690 --> 00:22:23,630
so I'm kind of a<font color="#E5E5E5"> really high level</font><font color="#CCCCCC"> hand</font>

611
00:22:20,180 --> 00:22:25,190
<font color="#CCCCCC">wavy platform you can say all</font><font color="#E5E5E5"> right I've</font>

612
00:22:23,630 --> 00:22:27,170
got these features that I always<font color="#E5E5E5"> want to</font>

613
00:22:25,190 --> 00:22:28,880
implement when I start a new<font color="#E5E5E5"> project you</font>

614
00:22:27,170 --> 00:22:31,340
can<font color="#E5E5E5"> kind of expect them to work through</font>

615
00:22:28,880 --> 00:22:32,660
that and then there are a lot of higher

616
00:22:31,340 --> 00:22:35,899
level features too so if you're doing

617
00:22:32,660 --> 00:22:38,620
DSP you need a<font color="#E5E5E5"> real-time system you can</font>

618
00:22:35,900 --> 00:22:41,330
you can lock into some of these so it is

619
00:22:38,620 --> 00:22:43,219
it's a lot<font color="#CCCCCC"> more uniformed across</font>

620
00:22:41,330 --> 00:22:45,139
different architectures and different on

621
00:22:43,220 --> 00:22:49,450
ships within families just because of

622
00:22:45,140 --> 00:22:51,680
this standard when I look at this this

623
00:22:49,450 --> 00:22:53,270
argument of like a you<font color="#CCCCCC"> should have</font>

624
00:22:51,680 --> 00:22:54,950
used<font color="#CCCCCC"> a 32-bit controller you should be</font>

625
00:22:53,270 --> 00:22:56,750
used in 8-bit controller<font color="#E5E5E5"> I really think</font>

626
00:22:54,950 --> 00:22:58,490
the buying into it is is the wrong thing

627
00:22:56,750 --> 00:23:00,170
it's<font color="#E5E5E5"> the stupid argument to have so a</font>

628
00:22:58,490 --> 00:23:03,190
good friend of<font color="#CCCCCC"> mine who I've known for</font>

629
00:23:00,170 --> 00:23:06,580
years fantastic carpenter makes great

630
00:23:03,190 --> 00:23:09,290
you know custom cabinetry built houses

631
00:23:06,580 --> 00:23:11,270
but when he's come over to tell about

632
00:23:09,290 --> 00:23:13,879
with projects he doesn't just<font color="#E5E5E5"> bring a</font>

633
00:23:11,270 --> 00:23:15,370
hammer he has a nail gun<font color="#CCCCCC"> and he uses</font>

634
00:23:13,880 --> 00:23:17,810
both you know you can hammer a nail into

635
00:23:15,370 --> 00:23:19,699
shots when he needs<font color="#E5E5E5"> to but when he when</font>

636
00:23:17,810 --> 00:23:21,889
he's reaching the entire roof used as a

637
00:23:19,700 --> 00:23:23,270
nail gun at the same time you know if

638
00:23:21,890 --> 00:23:24,680
he's gonna reach for<font color="#CCCCCC"> a circular saw and</font>

639
00:23:23,270 --> 00:23:27,110
you're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to do a corner cut with the</font>

640
00:23:24,680 --> 00:23:28,610
circular saw because of this or call the

641
00:23:27,110 --> 00:23:30,530
curve of<font color="#E5E5E5"> the blade you can't finish that</font>

642
00:23:28,610 --> 00:23:33,290
corner so he's got a handsaw to finish

643
00:23:30,530 --> 00:23:34,580
that he wouldn't come<font color="#E5E5E5"> over and say I'm</font>

644
00:23:33,290 --> 00:23:36,680
<font color="#CCCCCC">not gonna use a hand stock because it's</font>

645
00:23:34,580 --> 00:23:39,169
old he would<font color="#E5E5E5"> have all of those tools in</font>

646
00:23:36,680 --> 00:23:40,790
his toolbox and I think we should to you

647
00:23:39,170 --> 00:23:42,050
shouldn't say I'm not<font color="#CCCCCC"> going to use one</font>

648
00:23:40,790 --> 00:23:45,860
architecture or the other because you

649
00:23:42,050 --> 00:23:47,690
<font color="#E5E5E5">think one is older one is newer on take</font>

650
00:23:45,860 --> 00:23:51,500
a really great example I had recently I

651
00:23:47,690 --> 00:23:53,720
went<font color="#E5E5E5"> and participated in a</font><font color="#CCCCCC"> weekend-long</font>

652
00:23:51,500 --> 00:23:57,350
<font color="#CCCCCC">chi cad workshop the new newell mile</font>

653
00:23:53,720 --> 00:23:59,810
area was hosting at nova labs and it

654
00:23:57,350 --> 00:24:01,100
wasn't really<font color="#E5E5E5"> prepared</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> guess</font><font color="#CCCCCC"> i didn't</font>

655
00:23:59,810 --> 00:24:03,080
<font color="#CCCCCC">think to myself oh you're</font><font color="#E5E5E5"> going to do a</font>

656
00:24:01,100 --> 00:24:04,760
circuit layout workshop you should have

657
00:24:03,080 --> 00:24:06,620
a circuit in mind so all this

658
00:24:04,760 --> 00:24:07,850
I had to come up with an idea like on

659
00:24:06,620 --> 00:24:09,639
the spot and<font color="#E5E5E5"> I've always wanted to do a</font>

660
00:24:07,850 --> 00:24:12,860
spinning persistence of vision display

661
00:24:09,640 --> 00:24:14,300
and so I very quickly thought about you

662
00:24:12,860 --> 00:24:18,219
know what<font color="#CCCCCC"> Parts I would want</font><font color="#E5E5E5"> to use I</font>

663
00:24:14,300 --> 00:24:22,220
chose these APA 102 RGB LEDs which are

664
00:24:18,220 --> 00:24:24,230
basically spi driven and I thought<font color="#E5E5E5"> okay</font>

665
00:24:22,220 --> 00:24:25,550
how fast is this going<font color="#E5E5E5"> to spin how many</font>

666
00:24:24,230 --> 00:24:27,170
bits am I going to<font color="#E5E5E5"> have to push out and</font>

667
00:24:25,550 --> 00:24:29,450
I calculated my clock speed and I'm like

668
00:24:27,170 --> 00:24:32,750
oh 20 megahertz is going to be fine<font color="#E5E5E5"> I'll</font>

669
00:24:29,450 --> 00:24:35,900
throw my favorite<font color="#E5E5E5"> 80 mega 168 on there</font>

670
00:24:32,750 --> 00:24:38,180
and we'll be fine<font color="#CCCCCC"> until i actually got</font>

671
00:24:35,900 --> 00:24:40,610
it and populated and started coding and

672
00:24:38,180 --> 00:24:43,960
realized<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> have enough RAM on this</font>

673
00:24:40,610 --> 00:24:47,990
thing so it's got 17 pixels 24-bit color

674
00:24:43,960 --> 00:24:50,750
spinning if you do<font color="#E5E5E5"> 11 slice on every</font>

675
00:24:47,990 --> 00:24:53,210
degree<font color="#E5E5E5"> you've got 360 degrees per frame</font>

676
00:24:50,750 --> 00:24:55,910
and it's something<font color="#CCCCCC"> like 18k of ram and</font>

677
00:24:53,210 --> 00:24:57,800
so I put this you know I put this little

678
00:24:55,910 --> 00:25:00,140
8-bit controller on here it's got plenty

679
00:24:57,800 --> 00:25:01,460
of speed but it's<font color="#E5E5E5"> only got 2k of</font><font color="#CCCCCC"> RAM so</font>

680
00:25:00,140 --> 00:25:03,350
I'm really<font color="#E5E5E5"> short so then you're</font><font color="#CCCCCC"> looking</font>

681
00:25:01,460 --> 00:25:05,900
<font color="#E5E5E5">at can I sacrifice some of that speed to</font>

682
00:25:03,350 --> 00:25:08,000
do look<font color="#E5E5E5"> up tables so that the 20 you</font>

683
00:25:05,900 --> 00:25:10,280
know I don't in store a frame and RAM

684
00:25:08,000 --> 00:25:12,650
and not have run out of memory so

685
00:25:10,280 --> 00:25:14,720
quickly the sad thing is on<font color="#E5E5E5"> this one off</font>

686
00:25:12,650 --> 00:25:16,100
prototype I only about enough parts to

687
00:25:14,720 --> 00:25:18,230
do three<font color="#E5E5E5"> of these i think i have 10</font>

688
00:25:16,100 --> 00:25:20,870
boards I've components for three<font color="#CCCCCC"> of them</font>

689
00:25:18,230 --> 00:25:24,740
this ship's<font color="#E5E5E5"> about two dollars and fifty</font>

690
00:25:20,870 --> 00:25:26,629
cents if I gone to that<font color="#E5E5E5"> stm32f4 05 chip</font>

691
00:25:24,740 --> 00:25:27,980
that I've been<font color="#E5E5E5"> showing data sheet stuff</font>

692
00:25:26,630 --> 00:25:30,530
from that would have been about seven

693
00:25:27,980 --> 00:25:32,660
dollars and fifty cents more per board

694
00:25:30,530 --> 00:25:34,399
and so that<font color="#E5E5E5"> sounds like why would you</font>

695
00:25:32,660 --> 00:25:35,630
ever add that to the bom<font color="#E5E5E5"> cost but for</font>

696
00:25:34,400 --> 00:25:37,130
the prototype it would have been a<font color="#CCCCCC"> lot</font>

697
00:25:35,630 --> 00:25:39,410
smarter for me to start off with<font color="#E5E5E5"> that</font>

698
00:25:37,130 --> 00:25:40,460
chip produce a bit like this figure out

699
00:25:39,410 --> 00:25:42,080
what all the problems were and then

700
00:25:40,460 --> 00:25:44,690
decide if<font color="#E5E5E5"> i can go to a less expensive</font>

701
00:25:42,080 --> 00:25:46,520
chip if I wanted to<font color="#E5E5E5"> make more of them as</font>

702
00:25:44,690 --> 00:25:47,780
it<font color="#CCCCCC"> is I saved seven dollars and fifty</font>

703
00:25:46,520 --> 00:25:50,690
cents but now I have<font color="#CCCCCC"> a board that I</font>

704
00:25:47,780 --> 00:25:53,030
can't really do my full programming on

705
00:25:50,690 --> 00:25:55,580
so my options at this point<font color="#E5E5E5"> I figure are</font>

706
00:25:53,030 --> 00:25:58,010
I don't<font color="#E5E5E5"> think you can find a direct pain</font>

707
00:25:55,580 --> 00:26:01,370
replacement for a controller that has at

708
00:25:58,010 --> 00:26:05,990
least 18 K of ram and that that s TM

709
00:26:01,370 --> 00:26:08,179
chip would have I want to say over over

710
00:26:05,990 --> 00:26:09,980
100k or bra minute that might<font color="#E5E5E5"> not</font><font color="#CCCCCC"> be</font>

711
00:26:08,180 --> 00:26:11,630
quite right but it's got plenty at any

712
00:26:09,980 --> 00:26:13,250
rate but I don't think<font color="#E5E5E5"> it's a direct pin</font>

713
00:26:11,630 --> 00:26:15,710
drop in so now<font color="#E5E5E5"> I'm going to have</font>

714
00:26:13,250 --> 00:26:17,750
you know either like glue controller on

715
00:26:15,710 --> 00:26:19,900
to this board and patch it in<font color="#E5E5E5"> or we spin</font>

716
00:26:17,750 --> 00:26:22,700
<font color="#CCCCCC">the board so this</font><font color="#E5E5E5"> is just one example</font>

717
00:26:19,900 --> 00:26:25,000
and I think<font color="#CCCCCC"> really you know the answer</font>

718
00:26:22,700 --> 00:26:28,280
is we<font color="#CCCCCC"> should be prototyping with 32-bit</font>

719
00:26:25,000 --> 00:26:30,470
and then you know boiling down what we

720
00:26:28,280 --> 00:26:32,120
need from there rather<font color="#E5E5E5"> than going the</font>

721
00:26:30,470 --> 00:26:34,220
other way where I figured<font color="#CCCCCC"> out I started</font>

722
00:26:32,120 --> 00:26:36,649
<font color="#E5E5E5">with the smaller chip and I can't use it</font>

723
00:26:34,220 --> 00:26:39,320
but<font color="#E5E5E5"> the caveat is you have to understand</font>

724
00:26:36,650 --> 00:26:41,660
the universe of embedded before you can

725
00:26:39,320 --> 00:26:43,370
go up<font color="#E5E5E5"> to that 32 bit because everything</font>

726
00:26:41,660 --> 00:26:47,380
is so abstracted and everything is so

727
00:26:43,370 --> 00:26:49,639
hidden that it's not going to be a full

728
00:26:47,380 --> 00:26:51,080
control of the hardware experience it's

729
00:26:49,640 --> 00:26:56,230
mostly going to be an abstracted coding

730
00:26:51,080 --> 00:26:56,230
experience thank you

