1
00:00:01,250 --> 00:00:05,839
[Music]

2
00:00:05,839 --> 00:00:07,839
thank you sergey for introduction

3
00:00:07,839 --> 00:00:11,440
and welcome everyone and thanks for

4
00:00:11,440 --> 00:00:12,160
joining

5
00:00:12,160 --> 00:00:15,280
i'll just share my screen yeah

6
00:00:15,280 --> 00:00:18,960
hope you can see this three slides

7
00:00:19,119 --> 00:00:21,359
so uh good morning good afternoon good

8
00:00:21,359 --> 00:00:23,039
evening from wherever you are

9
00:00:23,039 --> 00:00:26,560
and thanks for joining so let's start uh

10
00:00:26,560 --> 00:00:28,320
sophie has already introduced i would

11
00:00:28,320 --> 00:00:30,560
skip this so uh today's

12
00:00:30,560 --> 00:00:33,040
agenda would be we would be covering

13
00:00:33,040 --> 00:00:34,880
introduction to firmware

14
00:00:34,880 --> 00:00:36,640
and we'll look into why do we need

15
00:00:36,640 --> 00:00:38,079
firmware reversing

16
00:00:38,079 --> 00:00:40,480
what are different possible attacks with

17
00:00:40,480 --> 00:00:42,000
respect to firmware

18
00:00:42,000 --> 00:00:43,760
then we'll look into some of the tools

19
00:00:43,760 --> 00:00:45,680
that you should know if you are getting

20
00:00:45,680 --> 00:00:47,200
started in this thing

21
00:00:47,200 --> 00:00:49,600
and we'll look into some of the attacks

22
00:00:49,600 --> 00:00:50,640
uh which occurred due to the

23
00:00:50,640 --> 00:00:52,960
vulnerabilities in the firmware

24
00:00:52,960 --> 00:00:55,840
and finally we'll have some hands-on lab

25
00:00:55,840 --> 00:00:56,480
for the

26
00:00:56,480 --> 00:00:58,399
for which you have been provided with

27
00:00:58,399 --> 00:01:00,079
the virtual machine

28
00:01:00,079 --> 00:01:03,120
so it's suggested uh you can

29
00:01:03,120 --> 00:01:05,519
download it and keep it ready by that

30
00:01:05,519 --> 00:01:07,760
time

31
00:01:08,560 --> 00:01:11,119
coming to firmware it was coined by

32
00:01:11,119 --> 00:01:12,400
asher up there

33
00:01:12,400 --> 00:01:14,560
yeah and it was published in data

34
00:01:14,560 --> 00:01:16,080
machine articles

35
00:01:16,080 --> 00:01:19,200
it's the magazine so um according to

36
00:01:19,200 --> 00:01:21,680
wikipedia it says it's the software

37
00:01:21,680 --> 00:01:24,000
that keeps us the lower level and that

38
00:01:24,000 --> 00:01:25,680
gives us the access to the low level of

39
00:01:25,680 --> 00:01:26,720
the hardware

40
00:01:26,720 --> 00:01:29,840
and it controls monitors of all the

41
00:01:29,840 --> 00:01:30,960
product system

42
00:01:30,960 --> 00:01:34,000
in a simple terms if i say so all the

43
00:01:34,000 --> 00:01:35,200
smart devices

44
00:01:35,200 --> 00:01:38,000
the whether it is smart camera or

45
00:01:38,000 --> 00:01:38,640
routers

46
00:01:38,640 --> 00:01:40,560
these embedded devices that we are

47
00:01:40,560 --> 00:01:42,479
seeing around us

48
00:01:42,479 --> 00:01:44,880
have some software running on it similar

49
00:01:44,880 --> 00:01:46,880
to the applications that we see on our

50
00:01:46,880 --> 00:01:47,920
pcs running

51
00:01:47,920 --> 00:01:50,079
similarly those devices have some logic

52
00:01:50,079 --> 00:01:52,240
some software running inside it

53
00:01:52,240 --> 00:01:55,439
that we call firmware and uh they are

54
00:01:55,439 --> 00:01:57,119
mostly stored in non-volatile

55
00:01:57,119 --> 00:01:59,119
they are stored in a non-volatile memory

56
00:01:59,119 --> 00:02:00,719
especially like flash memory

57
00:02:00,719 --> 00:02:04,240
it could mostly in external flash memory

58
00:02:04,240 --> 00:02:06,719
and they have like they run on the

59
00:02:06,719 --> 00:02:09,598
embedded devices

60
00:02:09,598 --> 00:02:12,800
basically firmware are of two types

61
00:02:12,800 --> 00:02:15,760
you can be os based firmware and other

62
00:02:15,760 --> 00:02:16,080
is

63
00:02:16,080 --> 00:02:19,280
bare metal firmware when we say os based

64
00:02:19,280 --> 00:02:20,239
firmware

65
00:02:20,239 --> 00:02:23,040
it means you have we have a hardware on

66
00:02:23,040 --> 00:02:24,800
the top of hardware there is some os

67
00:02:24,800 --> 00:02:25,520
running

68
00:02:25,520 --> 00:02:29,200
it it can be your linux or

69
00:02:29,200 --> 00:02:32,000
vxworks so those os handles everything

70
00:02:32,000 --> 00:02:32,560
and

71
00:02:32,560 --> 00:02:34,959
work and gives to the application level

72
00:02:34,959 --> 00:02:36,879
but in case of bare metal

73
00:02:36,879 --> 00:02:39,920
we don't have os we have hardware

74
00:02:39,920 --> 00:02:42,879
abstraction layer that deals with it and

75
00:02:42,879 --> 00:02:45,120
then the applications are dealt

76
00:02:45,120 --> 00:02:47,519
so uh when it comes to from the

77
00:02:47,519 --> 00:02:49,680
reversing of embedded devices

78
00:02:49,680 --> 00:02:52,560
we can face two different types which if

79
00:02:52,560 --> 00:02:54,160
we extract the binary

80
00:02:54,160 --> 00:02:57,280
it could be either os based or it could

81
00:02:57,280 --> 00:03:00,319
be bare metal

82
00:03:00,400 --> 00:03:03,280
so a question comes why do we need to do

83
00:03:03,280 --> 00:03:04,560
firmware reversing what's the

84
00:03:04,560 --> 00:03:05,360
requirement

85
00:03:05,360 --> 00:03:09,360
so i'll take example of an iot device

86
00:03:09,360 --> 00:03:13,040
and this iot device has a hardware right

87
00:03:13,040 --> 00:03:16,319
the camera all those devices have some

88
00:03:16,319 --> 00:03:18,239
those embedded devices have the hardware

89
00:03:18,239 --> 00:03:19,760
inside them

90
00:03:19,760 --> 00:03:21,840
they have some user application with

91
00:03:21,840 --> 00:03:23,519
which we interact

92
00:03:23,519 --> 00:03:26,720
they for making the communication over

93
00:03:26,720 --> 00:03:28,480
the internet they have a communication

94
00:03:28,480 --> 00:03:29,519
layer

95
00:03:29,519 --> 00:03:31,599
then we have some kind of management

96
00:03:31,599 --> 00:03:33,040
storage these are

97
00:03:33,040 --> 00:03:36,239
complete link into this ecosystem

98
00:03:36,239 --> 00:03:40,319
so and then to moderate all these things

99
00:03:40,319 --> 00:03:41,599
we have some kind of

100
00:03:41,599 --> 00:03:43,440
logic given the main business logic

101
00:03:43,440 --> 00:03:44,799
given to the device that

102
00:03:44,799 --> 00:03:48,400
is the firmware and in case

103
00:03:48,400 --> 00:03:51,120
in most of the cases this firmware are

104
00:03:51,120 --> 00:03:52,959
sometimes like an ip

105
00:03:52,959 --> 00:03:56,080
ip for some vendors and if it get

106
00:03:56,080 --> 00:03:59,040
out it's a big business loss for them as

107
00:03:59,040 --> 00:04:00,560
well

108
00:04:00,560 --> 00:04:03,519
so if you are or any attacker is

109
00:04:03,519 --> 00:04:06,000
successful in finding any attack vector

110
00:04:06,000 --> 00:04:09,200
or any vulnerability on the firmware

111
00:04:09,200 --> 00:04:12,080
it could directly or indirectly affect

112
00:04:12,080 --> 00:04:14,879
the other part of the ecosystem

113
00:04:14,879 --> 00:04:18,959
so for example one one point comes

114
00:04:18,959 --> 00:04:22,560
uh if the firmware is ip for some vendor

115
00:04:22,560 --> 00:04:25,440
and someone is able to get that firmware

116
00:04:25,440 --> 00:04:26,000
getting

117
00:04:26,000 --> 00:04:27,919
to introduce there will be mostly

118
00:04:27,919 --> 00:04:30,240
talking into the basics of the reversing

119
00:04:30,240 --> 00:04:32,160
but getting firmware could be of from

120
00:04:32,160 --> 00:04:33,919
the different way it could be via the

121
00:04:33,919 --> 00:04:35,040
hardware attacks

122
00:04:35,040 --> 00:04:37,360
or some kind of tweak or you can also

123
00:04:37,360 --> 00:04:39,120
download it directly from the vendor's

124
00:04:39,120 --> 00:04:40,320
website

125
00:04:40,320 --> 00:04:42,560
so uh if you get the firmware and like

126
00:04:42,560 --> 00:04:44,320
if it's an ip obviously it will not be

127
00:04:44,320 --> 00:04:45,600
available on the website

128
00:04:45,600 --> 00:04:47,600
and you have to do it some kind of trick

129
00:04:47,600 --> 00:04:49,520
around the hardware hacking

130
00:04:49,520 --> 00:04:52,160
and one way if you get the hardware you

131
00:04:52,160 --> 00:04:53,919
can clone the device and

132
00:04:53,919 --> 00:04:57,520
it affects the ip and another thing is

133
00:04:57,520 --> 00:05:00,160
if you get the hardware and we perform

134
00:05:00,160 --> 00:05:01,840
reversing on it

135
00:05:01,840 --> 00:05:04,160
it leads to unearthing of another

136
00:05:04,160 --> 00:05:05,440
exploits

137
00:05:05,440 --> 00:05:08,080
so for example there could be something

138
00:05:08,080 --> 00:05:08,720
important

139
00:05:08,720 --> 00:05:11,120
or when you reverse it you will see

140
00:05:11,120 --> 00:05:12,960
something that can affect your

141
00:05:12,960 --> 00:05:14,240
communication layer

142
00:05:14,240 --> 00:05:16,400
that can affect your management layer

143
00:05:16,400 --> 00:05:17,600
though they might be

144
00:05:17,600 --> 00:05:20,080
on the software on the application user

145
00:05:20,080 --> 00:05:21,919
application site they might be developed

146
00:05:21,919 --> 00:05:22,840
very good

147
00:05:22,840 --> 00:05:26,479
authenticated but on the firmware side

148
00:05:26,479 --> 00:05:28,000
if you find something let's say hard

149
00:05:28,000 --> 00:05:28,479
coded

150
00:05:28,479 --> 00:05:30,720
thing you can use date and break the

151
00:05:30,720 --> 00:05:31,680
system

152
00:05:31,680 --> 00:05:34,320
break the other parts of the ecosystem

153
00:05:34,320 --> 00:05:35,440
so

154
00:05:35,440 --> 00:05:38,400
when it comes to what are the possible

155
00:05:38,400 --> 00:05:39,280
attack cases

156
00:05:39,280 --> 00:05:42,479
or what do we look uh when we do the

157
00:05:42,479 --> 00:05:45,360
firmware reversing on how do we get so

158
00:05:45,360 --> 00:05:46,639
today i would be

159
00:05:46,639 --> 00:05:48,639
since we just have two hours i would be

160
00:05:48,639 --> 00:05:50,320
focusing on the firmwares

161
00:05:50,320 --> 00:05:54,240
basically os based firmware and

162
00:05:54,240 --> 00:05:56,479
then you are when we are able to get the

163
00:05:56,479 --> 00:05:58,960
firmware from any device the binary

164
00:05:58,960 --> 00:06:01,280
and if we know how to deal with it we

165
00:06:01,280 --> 00:06:03,120
can look inside the file system

166
00:06:03,120 --> 00:06:06,160
we get the complete file system after

167
00:06:06,160 --> 00:06:08,319
getting the file system we can explore

168
00:06:08,319 --> 00:06:11,199
and for any custom binaries that may be

169
00:06:11,199 --> 00:06:13,199
exploitable

170
00:06:13,199 --> 00:06:14,880
we can look for some hard coded

171
00:06:14,880 --> 00:06:16,560
sensitive information so

172
00:06:16,560 --> 00:06:19,280
for example some any let's say uh some

173
00:06:19,280 --> 00:06:21,199
mqtt protocol is running on an iot

174
00:06:21,199 --> 00:06:21,919
device

175
00:06:21,919 --> 00:06:24,720
and it has some authentication and you

176
00:06:24,720 --> 00:06:26,479
need to log it for login

177
00:06:26,479 --> 00:06:28,720
if you are reversing the firmware and if

178
00:06:28,720 --> 00:06:30,240
you find these hard coded

179
00:06:30,240 --> 00:06:32,160
inside the firmware you can directly use

180
00:06:32,160 --> 00:06:34,400
the credential to break that part

181
00:06:34,400 --> 00:06:36,319
similarly you can look into config

182
00:06:36,319 --> 00:06:38,639
configuration files present inside the

183
00:06:38,639 --> 00:06:40,479
device you can look for if any

184
00:06:40,479 --> 00:06:41,759
certificates

185
00:06:41,759 --> 00:06:44,080
you can perform debugging it could be

186
00:06:44,080 --> 00:06:46,080
either hardware or software

187
00:06:46,080 --> 00:06:49,039
and even if you don't have the hardware

188
00:06:49,039 --> 00:06:49,440
uh

189
00:06:49,440 --> 00:06:52,400
but if you want to uh deal with some

190
00:06:52,400 --> 00:06:53,520
kind of analysis

191
00:06:53,520 --> 00:06:57,039
you can do emulation then the case comes

192
00:06:57,039 --> 00:06:58,160
you can pause the

193
00:06:58,160 --> 00:07:01,199
device that we'll see in next slides

194
00:07:01,199 --> 00:07:03,520
and you can also look for different

195
00:07:03,520 --> 00:07:05,280
vulnerabilities that could be remote

196
00:07:05,280 --> 00:07:06,319
called execution

197
00:07:06,319 --> 00:07:09,280
command injection dos attacks and in

198
00:07:09,280 --> 00:07:09,759
fact

199
00:07:09,759 --> 00:07:13,199
if the secure firmware update secure is

200
00:07:13,199 --> 00:07:14,960
not implemented securely

201
00:07:14,960 --> 00:07:17,039
there is possibility that you can patch

202
00:07:17,039 --> 00:07:19,120
the firmware with the back doors

203
00:07:19,120 --> 00:07:21,280
so there are different cases when we get

204
00:07:21,280 --> 00:07:22,960
the firmware and we look for these

205
00:07:22,960 --> 00:07:23,840
things

206
00:07:23,840 --> 00:07:25,520
through which way can we enter the

207
00:07:25,520 --> 00:07:27,280
system

208
00:07:27,280 --> 00:07:30,639
so uh coming to introduction to tools

209
00:07:30,639 --> 00:07:33,759
for we're looking into basic tools that

210
00:07:33,759 --> 00:07:34,160
we

211
00:07:34,160 --> 00:07:36,160
at first require when we deal with

212
00:07:36,160 --> 00:07:40,720
firmware static and dynamic analysis

213
00:07:40,720 --> 00:07:43,520
so what's the approach if we get the

214
00:07:43,520 --> 00:07:44,960
binary

215
00:07:44,960 --> 00:07:48,160
first we need to identify whether

216
00:07:48,160 --> 00:07:52,560
the binary is os based or barometer

217
00:07:52,560 --> 00:07:55,919
so if we know from which device the form

218
00:07:55,919 --> 00:07:58,319
of which device the firm there is we can

219
00:07:58,319 --> 00:07:59,440
uh identify

220
00:07:59,440 --> 00:08:01,919
its uh which type of firmware is it

221
00:08:01,919 --> 00:08:03,840
whether it is os based or bare metal

222
00:08:03,840 --> 00:08:04,560
firmware

223
00:08:04,560 --> 00:08:06,560
so if it is if you have got that

224
00:08:06,560 --> 00:08:08,639
firmware from any microcontroller based

225
00:08:08,639 --> 00:08:09,759
so mostly it could be

226
00:08:09,759 --> 00:08:13,440
bare metal uh that is having like

227
00:08:13,440 --> 00:08:16,160
oh and then if you have some heavy

228
00:08:16,160 --> 00:08:17,919
applications camera routers

229
00:08:17,919 --> 00:08:20,080
it could be os based from there so we

230
00:08:20,080 --> 00:08:21,360
need to check that

231
00:08:21,360 --> 00:08:23,440
then we have to check whether the

232
00:08:23,440 --> 00:08:26,400
firmware is encrypted or not

233
00:08:26,400 --> 00:08:28,879
in case the firmware is encrypted it's

234
00:08:28,879 --> 00:08:29,520
get

235
00:08:29,520 --> 00:08:31,680
bit tricky to deal with it so first

236
00:08:31,680 --> 00:08:32,719
before

237
00:08:32,719 --> 00:08:34,320
getting into the tools that i would be

238
00:08:34,320 --> 00:08:36,320
talking today we need to work around to

239
00:08:36,320 --> 00:08:38,159
decrypt that firmware

240
00:08:38,159 --> 00:08:41,039
and uh there are different ways it's

241
00:08:41,039 --> 00:08:42,320
though it's very tricky

242
00:08:42,320 --> 00:08:44,399
but there are different ways one could

243
00:08:44,399 --> 00:08:45,519
be uh

244
00:08:45,519 --> 00:08:47,519
in some of the cases when vendor

245
00:08:47,519 --> 00:08:48,959
released the firmware

246
00:08:48,959 --> 00:08:52,560
there are transition versions so

247
00:08:52,560 --> 00:08:55,760
though uh there could be uh there could

248
00:08:55,760 --> 00:08:58,000
be one final version which is completely

249
00:08:58,000 --> 00:08:59,040
encrypted

250
00:08:59,040 --> 00:09:01,200
but there are chances that in the

251
00:09:01,200 --> 00:09:03,839
transit in the transition version

252
00:09:03,839 --> 00:09:06,880
you can find its encryption algorithm

253
00:09:06,880 --> 00:09:08,399
which can be reversed

254
00:09:08,399 --> 00:09:10,640
and that could be used to break the

255
00:09:10,640 --> 00:09:12,160
encrypted firmware

256
00:09:12,160 --> 00:09:15,040
another thing goes to getting the keys

257
00:09:15,040 --> 00:09:16,240
via hardware attacks

258
00:09:16,240 --> 00:09:18,720
like sca here is side channel attacks to

259
00:09:18,720 --> 00:09:19,839
get the key

260
00:09:19,839 --> 00:09:21,920
and there are also many different ways

261
00:09:21,920 --> 00:09:23,839
that people have worked on like analysis

262
00:09:23,839 --> 00:09:24,880
of the patterns

263
00:09:24,880 --> 00:09:28,000
on the hex editors binvis tools so

264
00:09:28,000 --> 00:09:30,320
uh first if the firmware is encrypted we

265
00:09:30,320 --> 00:09:32,560
need to decrypt that thing

266
00:09:32,560 --> 00:09:35,839
and other cases if the firmware is of

267
00:09:35,839 --> 00:09:37,600
bare metal or auto space

268
00:09:37,600 --> 00:09:39,600
or if it is something proprietary for

269
00:09:39,600 --> 00:09:41,040
which most of the tools are not

270
00:09:41,040 --> 00:09:44,160
working out in that case also it gets

271
00:09:44,160 --> 00:09:46,640
uh like you we don't have much tools in

272
00:09:46,640 --> 00:09:47,519
our code

273
00:09:47,519 --> 00:09:49,440
and in that case first we need to

274
00:09:49,440 --> 00:09:50,720
identify

275
00:09:50,720 --> 00:09:53,920
what the controller running on it what

276
00:09:53,920 --> 00:09:56,640
we have to take the data sheet we after

277
00:09:56,640 --> 00:09:59,120
taking the data sheet we generally

278
00:09:59,120 --> 00:10:01,920
identify what is the architecture we map

279
00:10:01,920 --> 00:10:02,959
the memory

280
00:10:02,959 --> 00:10:05,040
and then accordingly we load in any

281
00:10:05,040 --> 00:10:06,240
disassembler tool like

282
00:10:06,240 --> 00:10:09,440
kydra ida pro and the

283
00:10:09,440 --> 00:10:11,839
most of the like manual reversing goes

284
00:10:11,839 --> 00:10:12,720
some of the

285
00:10:12,720 --> 00:10:14,640
using some plugins that help us out in

286
00:10:14,640 --> 00:10:16,320
somewhat automation

287
00:10:16,320 --> 00:10:18,640
and sometimes it's also it can also be

288
00:10:18,640 --> 00:10:20,480
done using partial emulation

289
00:10:20,480 --> 00:10:24,079
using a unicorn or chemo

290
00:10:24,079 --> 00:10:27,040
so yes uh if you have a os based

291
00:10:27,040 --> 00:10:28,079
firmware

292
00:10:28,079 --> 00:10:30,839
we can get ready with the tools and

293
00:10:30,839 --> 00:10:32,560
start

294
00:10:32,560 --> 00:10:35,920
coming to static analysis

295
00:10:35,920 --> 00:10:37,920
in case of static analysis it's

296
00:10:37,920 --> 00:10:39,440
basically you are not

297
00:10:39,440 --> 00:10:42,399
running that firmware on any device you

298
00:10:42,399 --> 00:10:42,800
just

299
00:10:42,800 --> 00:10:45,920
have the binary and you are you have you

300
00:10:45,920 --> 00:10:47,519
have to do the extra you're simply

301
00:10:47,519 --> 00:10:49,680
extracting that what's the file inside

302
00:10:49,680 --> 00:10:50,560
it

303
00:10:50,560 --> 00:10:52,800
you you are trying to find if some kind

304
00:10:52,800 --> 00:10:54,880
of interesting strings you can look into

305
00:10:54,880 --> 00:10:55,440
it

306
00:10:55,440 --> 00:10:58,160
then you do the hex term to identify if

307
00:10:58,160 --> 00:10:59,120
there are some

308
00:10:59,120 --> 00:11:01,279
common patterns that you can check that

309
00:11:01,279 --> 00:11:02,720
can give you a hint

310
00:11:02,720 --> 00:11:05,360
some five signatures and so on and then

311
00:11:05,360 --> 00:11:06,720
you need to identify

312
00:11:06,720 --> 00:11:09,360
if in case you are unable to identify

313
00:11:09,360 --> 00:11:10,079
through

314
00:11:10,079 --> 00:11:13,120
uh standard tools you need to bit of

315
00:11:13,120 --> 00:11:14,800
look into the assembly codes to

316
00:11:14,800 --> 00:11:15,519
understand

317
00:11:15,519 --> 00:11:18,079
what the instruction set could be on the

318
00:11:18,079 --> 00:11:20,479
device

319
00:11:20,640 --> 00:11:24,079
in case of dynamic analysis

320
00:11:24,079 --> 00:11:28,160
we have emulation so what happens uh the

321
00:11:28,160 --> 00:11:28,560
first

322
00:11:28,560 --> 00:11:30,320
phase when it comes of the static

323
00:11:30,320 --> 00:11:32,160
analysis what we do

324
00:11:32,160 --> 00:11:35,600
in that case we get the firmware we

325
00:11:35,600 --> 00:11:39,040
analyze it we check uh we load it in any

326
00:11:39,040 --> 00:11:40,640
disassembler

327
00:11:40,640 --> 00:11:43,600
and we look for any hard-coded data will

328
00:11:43,600 --> 00:11:45,200
reverse some algorithms

329
00:11:45,200 --> 00:11:48,480
then that gives us somewhat idea that

330
00:11:48,480 --> 00:11:51,120
possibly this could be the vulnerability

331
00:11:51,120 --> 00:11:52,639
in the device

332
00:11:52,639 --> 00:11:55,839
now we need to check that whether what i

333
00:11:55,839 --> 00:11:56,079
am

334
00:11:56,079 --> 00:11:58,639
assuming or what my research says is it

335
00:11:58,639 --> 00:11:59,920
correct or not

336
00:11:59,920 --> 00:12:01,920
for that obviously you need to run the

337
00:12:01,920 --> 00:12:03,360
attack on the

338
00:12:03,360 --> 00:12:06,399
device it could be possible that

339
00:12:06,399 --> 00:12:08,240
you don't have the hardware with you in

340
00:12:08,240 --> 00:12:10,480
your hand and

341
00:12:10,480 --> 00:12:13,519
in that case emulation works so

342
00:12:13,519 --> 00:12:15,760
uh for example if you have you if you

343
00:12:15,760 --> 00:12:16,800
are running some

344
00:12:16,800 --> 00:12:19,200
network camera or you have the firmware

345
00:12:19,200 --> 00:12:20,399
of any router

346
00:12:20,399 --> 00:12:22,560
and you after reversing you found that

347
00:12:22,560 --> 00:12:23,440
it could be

348
00:12:23,440 --> 00:12:25,920
some xyz attacks possible after

349
00:12:25,920 --> 00:12:27,360
reversing i find

350
00:12:27,360 --> 00:12:29,760
and then what you can do to implement

351
00:12:29,760 --> 00:12:32,000
that you can simply emulate that so

352
00:12:32,000 --> 00:12:33,279
we'll look into the what are the

353
00:12:33,279 --> 00:12:35,040
different emulation tools that can help

354
00:12:35,040 --> 00:12:35,360
you

355
00:12:35,360 --> 00:12:38,480
out then comes fuzzing so

356
00:12:38,480 --> 00:12:40,800
uh you would have seen that most of

357
00:12:40,800 --> 00:12:42,639
these network devices have some kind of

358
00:12:42,639 --> 00:12:44,880
user interface could be web interface

359
00:12:44,880 --> 00:12:48,000
or app interface by which we need to put

360
00:12:48,000 --> 00:12:50,160
in some user data sometimes like

361
00:12:50,160 --> 00:12:52,639
login password or any kind of data that

362
00:12:52,639 --> 00:12:54,399
user has to enter

363
00:12:54,399 --> 00:12:57,920
in that case what we do we try to check

364
00:12:57,920 --> 00:13:00,800
is it possible that we can put it any

365
00:13:00,800 --> 00:13:01,680
random data

366
00:13:01,680 --> 00:13:04,959
and the device get crashed sometimes or

367
00:13:04,959 --> 00:13:07,920
is it uh doing proper sanitization while

368
00:13:07,920 --> 00:13:08,720
accepting the

369
00:13:08,720 --> 00:13:11,040
input from the user this gets the

370
00:13:11,040 --> 00:13:12,560
another attack point

371
00:13:12,560 --> 00:13:15,760
and then other thing gets when we do

372
00:13:15,760 --> 00:13:18,639
dynamic analysis and by our debugging so

373
00:13:18,639 --> 00:13:20,399
if we have the hardware

374
00:13:20,399 --> 00:13:23,200
we can do the debugging using gdb by

375
00:13:23,200 --> 00:13:24,639
connecting it to hardware

376
00:13:24,639 --> 00:13:27,760
and like through the normal gdp

377
00:13:27,760 --> 00:13:29,279
operations that we do

378
00:13:29,279 --> 00:13:31,920
but in case we don't have the hardware

379
00:13:31,920 --> 00:13:34,480
what we do we do the emulation and again

380
00:13:34,480 --> 00:13:38,000
uh uh we debug it via gdb after the

381
00:13:38,000 --> 00:13:39,279
emulation is set up

382
00:13:39,279 --> 00:13:41,360
so we can do both hardware and software

383
00:13:41,360 --> 00:13:42,639
debugging to

384
00:13:42,639 --> 00:13:46,480
re to this gives us better idea at

385
00:13:46,480 --> 00:13:49,199
what stage what kind of registers are

386
00:13:49,199 --> 00:13:50,079
being dealt

387
00:13:50,079 --> 00:13:54,000
it gives a more in-depth understanding

388
00:13:55,760 --> 00:13:59,279
so uh coming for tools for

389
00:13:59,279 --> 00:14:02,880
static analysis it's the

390
00:14:02,880 --> 00:14:05,839
one of the basic tools is hex editor so

391
00:14:05,839 --> 00:14:06,639
when we are

392
00:14:06,639 --> 00:14:09,760
given the binary of any uh like

393
00:14:09,760 --> 00:14:12,240
the from their binary so we generally

394
00:14:12,240 --> 00:14:13,040
learn uh

395
00:14:13,040 --> 00:14:15,680
run it with hex editor to identify if

396
00:14:15,680 --> 00:14:17,279
some kind of

397
00:14:17,279 --> 00:14:20,560
file signatures could be found or if we

398
00:14:20,560 --> 00:14:21,839
can find any patterns

399
00:14:21,839 --> 00:14:25,279
so if it is sometimes encrypted if it is

400
00:14:25,279 --> 00:14:27,120
encrypted you might find some patterns

401
00:14:27,120 --> 00:14:29,120
inside it if not it could be some random

402
00:14:29,120 --> 00:14:29,680
thing

403
00:14:29,680 --> 00:14:32,720
you can also use strings to get uh if

404
00:14:32,720 --> 00:14:34,399
any strings present in the data just

405
00:14:34,399 --> 00:14:38,639
strings command and the binary file name

406
00:14:39,120 --> 00:14:42,240
next tool that is uh

407
00:14:42,240 --> 00:14:44,320
important that should be with us is

408
00:14:44,320 --> 00:14:45,279
benwalk

409
00:14:45,279 --> 00:14:49,040
so uh this helps uh it also would not be

410
00:14:49,040 --> 00:14:51,440
very useful if our firmware is from bare

411
00:14:51,440 --> 00:14:52,639
metal or

412
00:14:52,639 --> 00:14:55,120
encrypted it's useful when our when we

413
00:14:55,120 --> 00:14:57,440
have os based and

414
00:14:57,440 --> 00:15:00,720
and not encrypted so most of the time it

415
00:15:00,720 --> 00:15:01,040
has

416
00:15:01,040 --> 00:15:04,639
it gives a very like we can know

417
00:15:04,639 --> 00:15:07,920
by via its entropy we can know whether

418
00:15:07,920 --> 00:15:09,920
the firmware is encrypted or not

419
00:15:09,920 --> 00:15:13,680
so if so it's entropy range from 0 to 1

420
00:15:13,680 --> 00:15:16,959
so if we run windwork dash capital e

421
00:15:16,959 --> 00:15:19,199
and the file name and the entropy graph

422
00:15:19,199 --> 00:15:22,079
shows complete linear on the top of

423
00:15:22,079 --> 00:15:24,560
near to 1 something so it means it's

424
00:15:24,560 --> 00:15:25,600
encrypted

425
00:15:25,600 --> 00:15:28,000
if we run again on the some binary and

426
00:15:28,000 --> 00:15:29,759
if there are some spikes in between it

427
00:15:29,759 --> 00:15:31,279
means there are some part which is not

428
00:15:31,279 --> 00:15:33,199
encrypted and it means we can get some

429
00:15:33,199 --> 00:15:35,519
something out of that binary similarly

430
00:15:35,519 --> 00:15:36,320
been work can

431
00:15:36,320 --> 00:15:38,480
if it been works small dash e you do you

432
00:15:38,480 --> 00:15:40,720
it can completely extract your file

433
00:15:40,720 --> 00:15:41,759
system whatever

434
00:15:41,759 --> 00:15:44,240
is inside in our binary so let's help

435
00:15:44,240 --> 00:15:46,000
you in getting your file system

436
00:15:46,000 --> 00:15:47,440
so similarly there are different

437
00:15:47,440 --> 00:15:49,440
features that you can look and play

438
00:15:49,440 --> 00:15:50,160
around with

439
00:15:50,160 --> 00:15:55,040
the bin bob

440
00:15:55,040 --> 00:15:58,720
next tool is gaidra so uh

441
00:15:58,720 --> 00:16:02,480
kaidra is uh it's it's good because it's

442
00:16:02,480 --> 00:16:03,519
open source

443
00:16:03,519 --> 00:16:06,880
and it has a very good disassembler

444
00:16:06,880 --> 00:16:09,199
so even if we are not very comfortable

445
00:16:09,199 --> 00:16:10,720
with assembly language

446
00:16:10,720 --> 00:16:12,800
because it could be some of you might be

447
00:16:12,800 --> 00:16:14,639
very good at x86 or

448
00:16:14,639 --> 00:16:16,399
some of you might not be knowing or

449
00:16:16,399 --> 00:16:17,839
might not be comfortable with

450
00:16:17,839 --> 00:16:20,880
assembling but it's uh so there this is

451
00:16:20,880 --> 00:16:23,279
how it's look like you have these

452
00:16:23,279 --> 00:16:25,600
symbol tables and this main where you

453
00:16:25,600 --> 00:16:27,440
see the assembly part

454
00:16:27,440 --> 00:16:30,320
then you have this disassembler where

455
00:16:30,320 --> 00:16:32,320
sudo c code i would say you will you can

456
00:16:32,320 --> 00:16:33,759
be able to see like much in

457
00:16:33,759 --> 00:16:37,759
much readable pattern and it gives you a

458
00:16:37,759 --> 00:16:40,000
a good it's a very good platform to

459
00:16:40,000 --> 00:16:41,040
reverse if you

460
00:16:41,040 --> 00:16:44,320
if you want to reverse any binary

461
00:16:44,320 --> 00:16:46,160
another thing is ida and radar are

462
00:16:46,160 --> 00:16:51,279
obviously the other options

463
00:16:51,279 --> 00:16:54,800
uh our next tool is firmworker

464
00:16:54,800 --> 00:16:58,720
so this tool uh

465
00:16:58,720 --> 00:17:02,320
so as i said uh while doing static

466
00:17:02,320 --> 00:17:03,600
analysis

467
00:17:03,600 --> 00:17:06,240
we go through different files in the

468
00:17:06,240 --> 00:17:07,439
file system

469
00:17:07,439 --> 00:17:10,079
to check if there are some hard-coded

470
00:17:10,079 --> 00:17:11,280
credentials

471
00:17:11,280 --> 00:17:13,839
are there some configuration files or

472
00:17:13,839 --> 00:17:14,799
any certificates

473
00:17:14,799 --> 00:17:17,439
that we can look so there is one way we

474
00:17:17,439 --> 00:17:18,000
go

475
00:17:18,000 --> 00:17:20,480
inside the file system will look every

476
00:17:20,480 --> 00:17:23,520
file manually one by one to identify

477
00:17:23,520 --> 00:17:26,880
our attack point but the formworker

478
00:17:26,880 --> 00:17:27,679
helps you

479
00:17:27,679 --> 00:17:30,000
in identifying the location of these

480
00:17:30,000 --> 00:17:30,799
files

481
00:17:30,799 --> 00:17:33,919
so if it files if it does not find any

482
00:17:33,919 --> 00:17:35,039
of these certificates

483
00:17:35,039 --> 00:17:37,280
it will not give you any result if it

484
00:17:37,280 --> 00:17:38,400
finds any

485
00:17:38,400 --> 00:17:39,919
if you find that there are some

486
00:17:39,919 --> 00:17:42,080
important binaries it will give you that

487
00:17:42,080 --> 00:17:44,000
that these are the binaries that are

488
00:17:44,000 --> 00:17:46,480
present inside your uh

489
00:17:46,480 --> 00:17:48,080
inside your file system that you can

490
00:17:48,080 --> 00:17:50,559
probably look at and similarly there are

491
00:17:50,559 --> 00:17:52,080
what are the different web servers

492
00:17:52,080 --> 00:17:53,039
running

493
00:17:53,039 --> 00:17:55,440
uh what are the possible password files

494
00:17:55,440 --> 00:17:56,720
present in that

495
00:17:56,720 --> 00:17:58,880
in the file system so that you do not

496
00:17:58,880 --> 00:18:00,160
need to look at

497
00:18:00,160 --> 00:18:03,760
you know do not need to look and trace

498
00:18:03,760 --> 00:18:07,360
manually everything it saves time

499
00:18:07,360 --> 00:18:10,160
uh factor this i haven't used personally

500
00:18:10,160 --> 00:18:11,919
uh but it has a good

501
00:18:11,919 --> 00:18:15,039
like web ui and it it has

502
00:18:15,039 --> 00:18:17,200
impacted everything the bin work

503
00:18:17,200 --> 00:18:19,200
everything and it it gives you all this

504
00:18:19,200 --> 00:18:21,280
this is somewhat this entropy graph that

505
00:18:21,280 --> 00:18:22,559
i was talking about

506
00:18:22,559 --> 00:18:25,520
so if this graph is spike is this near

507
00:18:25,520 --> 00:18:26,160
to one

508
00:18:26,160 --> 00:18:29,440
always this is like

509
00:18:29,440 --> 00:18:32,080
encrypted and if it has some spikes it

510
00:18:32,080 --> 00:18:34,240
means you can get some data out of it

511
00:18:34,240 --> 00:18:36,480
similarly it gives you all the file path

512
00:18:36,480 --> 00:18:39,120
and everything

513
00:18:39,200 --> 00:18:42,720
another is exploit from their auditor

514
00:18:42,720 --> 00:18:45,440
and this also has almost the same

515
00:18:45,440 --> 00:18:47,120
feature as this fact

516
00:18:47,120 --> 00:18:50,160
it has the bin walk in uh in back end

517
00:18:50,160 --> 00:18:50,480
you

518
00:18:50,480 --> 00:18:53,280
you just have to load your binary here

519
00:18:53,280 --> 00:18:54,080
and you

520
00:18:54,080 --> 00:18:57,520
get the entropy graph you get all the

521
00:18:57,520 --> 00:18:59,679
file system related to it along with

522
00:18:59,679 --> 00:19:00,080
their

523
00:19:00,080 --> 00:19:03,200
path so if it is your password file

524
00:19:03,200 --> 00:19:05,039
it gives you where your password files

525
00:19:05,039 --> 00:19:07,520
are located if it is your configuration

526
00:19:07,520 --> 00:19:08,960
file it's give where

527
00:19:08,960 --> 00:19:10,799
exactly your configuration files are

528
00:19:10,799 --> 00:19:13,600
located so these tools helps and saves

529
00:19:13,600 --> 00:19:14,720
our time in

530
00:19:14,720 --> 00:19:18,559
manual and manual analysis

531
00:19:21,120 --> 00:19:23,760
so uh these were the tools that i just

532
00:19:23,760 --> 00:19:25,520
discussed

533
00:19:25,520 --> 00:19:30,879
so if there are any questions before i

534
00:19:36,840 --> 00:19:38,160
move

535
00:19:38,160 --> 00:19:41,280
yes there is a question and

536
00:19:41,280 --> 00:19:43,200
question is when sniffing high speed

537
00:19:43,200 --> 00:19:46,720
buses what tools do you recommend

538
00:19:46,720 --> 00:19:49,600
sorry can you please repeat the question

539
00:19:49,600 --> 00:19:51,440
so the question is when sniffing

540
00:19:51,440 --> 00:19:52,880
high-speed buses

541
00:19:52,880 --> 00:19:56,240
what tools do you recommend so that

542
00:19:56,240 --> 00:19:59,280
comes mostly into hardware part uh so

543
00:19:59,280 --> 00:20:01,600
uh yeah so this is actually where today

544
00:20:01,600 --> 00:20:03,200
discussing about the firmware

545
00:20:03,200 --> 00:20:06,400
so when again it comes to uh the

546
00:20:06,400 --> 00:20:08,240
sniffing of buses

547
00:20:08,240 --> 00:20:10,880
on the hardware it gets uh so you need

548
00:20:10,880 --> 00:20:12,159
like logic analyzer

549
00:20:12,159 --> 00:20:14,960
is one thing but uh if again if it's

550
00:20:14,960 --> 00:20:16,720
very hard it is not via the logic

551
00:20:16,720 --> 00:20:17,520
analyzer

552
00:20:17,520 --> 00:20:21,840
or via the this oscilloscope thing

553
00:20:22,640 --> 00:20:25,600
on something related to this workshop

554
00:20:25,600 --> 00:20:28,000
question

555
00:20:32,159 --> 00:20:36,080
no not yet yeah

556
00:20:36,400 --> 00:20:39,440
so uh basically these were your static

557
00:20:39,440 --> 00:20:40,720
analysis tools

558
00:20:40,720 --> 00:20:44,240
so this tool helps you in getting

559
00:20:44,240 --> 00:20:47,440
some basic understanding or

560
00:20:47,440 --> 00:20:49,840
something that you can use further to

561
00:20:49,840 --> 00:20:50,880
attack your device

562
00:20:50,880 --> 00:20:53,760
so you can keep the point for any

563
00:20:53,760 --> 00:20:55,120
hard-coded things

564
00:20:55,120 --> 00:20:58,240
or any suspected binaries that you see

565
00:20:58,240 --> 00:21:00,240
or if any configuration file that could

566
00:21:00,240 --> 00:21:01,440
be patched

567
00:21:01,440 --> 00:21:04,640
uh if the let's say in the one of the

568
00:21:04,640 --> 00:21:06,320
formworker example we saw some of the

569
00:21:06,320 --> 00:21:07,919
service like ssh

570
00:21:07,919 --> 00:21:10,159
telnet that can give you the remote

571
00:21:10,159 --> 00:21:12,159
control of the device if those services

572
00:21:12,159 --> 00:21:13,039
are running

573
00:21:13,039 --> 00:21:15,840
they they they form your attack vector

574
00:21:15,840 --> 00:21:18,000
so there is one case you can either

575
00:21:18,000 --> 00:21:20,880
tamper with that or if the on the

576
00:21:20,880 --> 00:21:21,919
hardware side

577
00:21:21,919 --> 00:21:23,600
from there update security is not

578
00:21:23,600 --> 00:21:25,200
properly implemented

579
00:21:25,200 --> 00:21:28,880
you can change the binary and then

580
00:21:28,880 --> 00:21:31,039
patch with it some if the telnet is

581
00:21:31,039 --> 00:21:33,039
let's say disabled you can enable it

582
00:21:33,039 --> 00:21:34,960
and then patch with the vulnerable

583
00:21:34,960 --> 00:21:36,320
binary in the hardware

584
00:21:36,320 --> 00:21:39,200
to get the remote control of the device

585
00:21:39,200 --> 00:21:39,679
and

586
00:21:39,679 --> 00:21:41,760
but if in that case proper secure boot

587
00:21:41,760 --> 00:21:44,080
and implemented this won't work

588
00:21:44,080 --> 00:21:46,400
similarly you get uh after analysis you

589
00:21:46,400 --> 00:21:47,280
might see

590
00:21:47,280 --> 00:21:50,159
uh after analysis in tools like guydra

591
00:21:50,159 --> 00:21:51,039
you might see

592
00:21:51,039 --> 00:21:54,480
that whether by accepting the input from

593
00:21:54,480 --> 00:21:55,840
the user whether

594
00:21:55,840 --> 00:21:58,960
proper length checking is done or not

595
00:21:58,960 --> 00:22:00,880
then it gives you idea if it is not done

596
00:22:00,880 --> 00:22:02,640
then you can probably go for

597
00:22:02,640 --> 00:22:04,880
attacks like buffer overflow and check

598
00:22:04,880 --> 00:22:05,840
that out so

599
00:22:05,840 --> 00:22:07,600
analysis and reversing why are these

600
00:22:07,600 --> 00:22:08,960
static tools give you

601
00:22:08,960 --> 00:22:11,760
a base i would say for your further

602
00:22:11,760 --> 00:22:14,158
attacks

603
00:22:14,880 --> 00:22:18,000
coming to our dynamic analysis so yeah

604
00:22:18,000 --> 00:22:21,520
once we are once we get idea

605
00:22:21,520 --> 00:22:25,200
of our attacks why are the static tools

606
00:22:25,200 --> 00:22:27,679
we now see we now look forward to

607
00:22:27,679 --> 00:22:30,000
perform our attack so for that

608
00:22:30,000 --> 00:22:32,960
as sometimes static tools don't give a

609
00:22:32,960 --> 00:22:34,400
very better approach

610
00:22:34,400 --> 00:22:37,600
so in some cases we want to know that

611
00:22:37,600 --> 00:22:39,840
what happens when i am uh

612
00:22:39,840 --> 00:22:42,880
when such function or which when such

613
00:22:42,880 --> 00:22:46,480
thing is running on my uh on my uh

614
00:22:46,480 --> 00:22:49,360
on on this firmware when this stage is

615
00:22:49,360 --> 00:22:50,880
coming then what is happening on the

616
00:22:50,880 --> 00:22:53,039
register side which register is loaded

617
00:22:53,039 --> 00:22:53,600
or

618
00:22:53,600 --> 00:22:56,720
or what what values are being disturbed

619
00:22:56,720 --> 00:22:58,720
so in that case you can perform dynamic

620
00:22:58,720 --> 00:23:00,159
analysis by gdb

621
00:23:00,159 --> 00:23:02,240
so if you have hardware available that

622
00:23:02,240 --> 00:23:03,919
gives you a good

623
00:23:03,919 --> 00:23:05,280
a very good surface that you can

624
00:23:05,280 --> 00:23:07,120
directly interact with the hardware play

625
00:23:07,120 --> 00:23:09,200
around with by setting its registers and

626
00:23:09,200 --> 00:23:10,559
check the behavior of the

627
00:23:10,559 --> 00:23:13,520
device other you can perform software

628
00:23:13,520 --> 00:23:15,200
debugging by

629
00:23:15,200 --> 00:23:17,840
emulation and then attaching it with

630
00:23:17,840 --> 00:23:19,360
rgdb

631
00:23:19,360 --> 00:23:22,240
another important tool is chemo that's

632
00:23:22,240 --> 00:23:23,039
helps you

633
00:23:23,039 --> 00:23:26,559
in emulation and it's

634
00:23:26,559 --> 00:23:29,840
so it came has two emulation mode like

635
00:23:29,840 --> 00:23:33,200
user mode and full system emulation

636
00:23:33,200 --> 00:23:35,440
so in case of full system emulation you

637
00:23:35,440 --> 00:23:36,400
need to have

638
00:23:36,400 --> 00:23:38,799
those or kernel images and all and it

639
00:23:38,799 --> 00:23:40,400
gets a bit heavy

640
00:23:40,400 --> 00:23:42,799
and in case of user mode emulation you

641
00:23:42,799 --> 00:23:44,000
can directly

642
00:23:44,000 --> 00:23:46,080
uh the firmware that you have extracted

643
00:23:46,080 --> 00:23:48,080
the binary that you have extracted

644
00:23:48,080 --> 00:23:50,000
you can directly go inside that file

645
00:23:50,000 --> 00:23:53,039
system and you can put your

646
00:23:53,039 --> 00:23:56,880
camo uh chemo exit table inside it and

647
00:23:56,880 --> 00:23:59,120
directly run a one particular binary you

648
00:23:59,120 --> 00:24:00,799
do not need to load all the kernel

649
00:24:00,799 --> 00:24:03,279
images and everything

650
00:24:03,279 --> 00:24:06,720
next thing is avatar avatar is a very uh

651
00:24:06,720 --> 00:24:08,960
good tool and that helps in dynamic

652
00:24:08,960 --> 00:24:10,240
analysis how

653
00:24:10,240 --> 00:24:13,440
because when we emulate any firmware

654
00:24:13,440 --> 00:24:16,159
it's obvious that we need something that

655
00:24:16,159 --> 00:24:18,559
can support its hardware too

656
00:24:18,559 --> 00:24:21,200
so it gets a very challenging while

657
00:24:21,200 --> 00:24:22,640
during emulation

658
00:24:22,640 --> 00:24:25,679
uh that we don't have

659
00:24:25,679 --> 00:24:27,440
like so much support for all the

660
00:24:27,440 --> 00:24:29,200
hardware that is available on

661
00:24:29,200 --> 00:24:32,080
our device so avatar helps us in

662
00:24:32,080 --> 00:24:33,039
providing those

663
00:24:33,039 --> 00:24:35,919
uh support so this is one thing that

664
00:24:35,919 --> 00:24:37,520
that would be

665
00:24:37,520 --> 00:24:39,679
that could be very interesting to and

666
00:24:39,679 --> 00:24:40,720
helps in dynamic

667
00:24:40,720 --> 00:24:44,320
analysis next is pharmady permadine is

668
00:24:44,320 --> 00:24:46,480
based on top of chemo but it

669
00:24:46,480 --> 00:24:49,760
it reduces our work it

670
00:24:49,760 --> 00:24:52,480
it also like these tools is not like

671
00:24:52,480 --> 00:24:55,039
they'll work on everything so we need to

672
00:24:55,039 --> 00:24:57,120
sometimes play around we get error on

673
00:24:57,120 --> 00:24:58,480
anything we need to fix those

674
00:24:58,480 --> 00:25:01,919
issues and then get our things done

675
00:25:01,919 --> 00:25:04,159
so pharmadyne is one of those which

676
00:25:04,159 --> 00:25:05,200
helps again in

677
00:25:05,200 --> 00:25:07,120
emulation and you're performing the

678
00:25:07,120 --> 00:25:09,600
dynamic analysis

679
00:25:09,600 --> 00:25:12,799
unicorn is based on chemo but it just

680
00:25:12,799 --> 00:25:16,159
see it just perform cpu emulation so uh

681
00:25:16,159 --> 00:25:19,279
thing is on camo you can just emulate

682
00:25:19,279 --> 00:25:20,240
you cannot

683
00:25:20,240 --> 00:25:23,120
perform or develop your own tool to

684
00:25:23,120 --> 00:25:25,600
perform the analysis or you cannot do

685
00:25:25,600 --> 00:25:28,559
patching or something on on on the run

686
00:25:28,559 --> 00:25:30,080
but in case of tools like

687
00:25:30,080 --> 00:25:32,640
unicorn and chilling you can directly

688
00:25:32,640 --> 00:25:34,240
develop your own scripts

689
00:25:34,240 --> 00:25:37,840
your own tools uh that you can you um

690
00:25:37,840 --> 00:25:40,400
have like run on the fly and check your

691
00:25:40,400 --> 00:25:41,440
thing and plus

692
00:25:41,440 --> 00:25:43,919
the they have different like class

693
00:25:43,919 --> 00:25:46,480
across platform plus multi architecture

694
00:25:46,480 --> 00:25:48,480
so in case of chemo if you are let's say

695
00:25:48,480 --> 00:25:51,120
doing user mode emulation

696
00:25:51,120 --> 00:25:54,159
so if it's a linux based os

697
00:25:54,159 --> 00:25:56,880
then only it run in it will run on this

698
00:25:56,880 --> 00:25:57,679
uh your

699
00:25:57,679 --> 00:26:01,360
camo user mode because when it if you go

700
00:26:01,360 --> 00:26:03,679
in in its more detail you will find uh

701
00:26:03,679 --> 00:26:05,520
how it's forward the request from

702
00:26:05,520 --> 00:26:07,279
the that virtual environment to the

703
00:26:07,279 --> 00:26:08,559
system host

704
00:26:08,559 --> 00:26:10,880
but in case of unicorn and chilling they

705
00:26:10,880 --> 00:26:11,919
are they can run

706
00:26:11,919 --> 00:26:14,080
on like they are all multi architecture

707
00:26:14,080 --> 00:26:16,159
plus multi-platform like windows linux

708
00:26:16,159 --> 00:26:18,000
and things

709
00:26:18,000 --> 00:26:20,159
and coming to chilling chilling is based

710
00:26:20,159 --> 00:26:21,039
on unicorn

711
00:26:21,039 --> 00:26:23,120
but it's supposed also system level

712
00:26:23,120 --> 00:26:24,880
emulation so in that case

713
00:26:24,880 --> 00:26:27,200
uh so unicorn does not does not

714
00:26:27,200 --> 00:26:29,120
understand high level system so

715
00:26:29,120 --> 00:26:32,640
if you wanna implement at register level

716
00:26:32,640 --> 00:26:36,080
or just uh uh a chunk of your code

717
00:26:36,080 --> 00:26:38,400
you can do it via unicorn so this is

718
00:26:38,400 --> 00:26:39,760
very good tool if we

719
00:26:39,760 --> 00:26:41,919
want to emulate something like our bare

720
00:26:41,919 --> 00:26:43,840
metal which is not having the os

721
00:26:43,840 --> 00:26:46,240
but for that you need we need to be

722
00:26:46,240 --> 00:26:48,000
thorough with the registers

723
00:26:48,000 --> 00:26:49,760
responsible for particular function

724
00:26:49,760 --> 00:26:51,039
inside those

725
00:26:51,039 --> 00:26:54,080
devices and that this helps

726
00:26:54,080 --> 00:26:56,320
for those emulation and similarly

727
00:26:56,320 --> 00:26:58,960
chilling chilling uh helps you emulation

728
00:26:58,960 --> 00:27:00,880
os space it has like system level

729
00:27:00,880 --> 00:27:03,120
understanding and you can in fact

730
00:27:03,120 --> 00:27:06,720
perform the on the fly it has very good

731
00:27:06,720 --> 00:27:08,559
uh like plugins and all that you can

732
00:27:08,559 --> 00:27:10,320
perform all on the fly

733
00:27:10,320 --> 00:27:12,960
your attacks and check you can patch on

734
00:27:12,960 --> 00:27:13,600
the fly

735
00:27:13,600 --> 00:27:16,480
you can identify the address and do

736
00:27:16,480 --> 00:27:18,960
modifications onto it

737
00:27:18,960 --> 00:27:21,919
the apart from these tools we need some

738
00:27:21,919 --> 00:27:23,600
kind of buzzing tools that i was

739
00:27:23,600 --> 00:27:24,320
discussing

740
00:27:24,320 --> 00:27:26,399
so uh there are different types of

741
00:27:26,399 --> 00:27:27,520
fuzzing like

742
00:27:27,520 --> 00:27:29,279
it has dummy fuzzing then you have

743
00:27:29,279 --> 00:27:30,880
coverage guided fuzzings

744
00:27:30,880 --> 00:27:33,600
so basically uh tools like radhamsa what

745
00:27:33,600 --> 00:27:34,640
they do

746
00:27:34,640 --> 00:27:37,520
you give them the input they will mutate

747
00:27:37,520 --> 00:27:39,520
your input

748
00:27:39,520 --> 00:27:43,039
so you can simply instead of providing

749
00:27:43,039 --> 00:27:45,360
random input manually these tools helps

750
00:27:45,360 --> 00:27:46,240
you in

751
00:27:46,240 --> 00:27:49,039
mutating and providing random amount of

752
00:27:49,039 --> 00:27:51,039
random length or random type of data

753
00:27:51,039 --> 00:27:54,159
to your input to the system so when this

754
00:27:54,159 --> 00:27:55,600
works

755
00:27:55,600 --> 00:27:58,080
let's say uh a scenario let's take a

756
00:27:58,080 --> 00:27:59,200
scenario

757
00:27:59,200 --> 00:28:01,840
you are we we got a binary firmware

758
00:28:01,840 --> 00:28:02,799
binary of

759
00:28:02,799 --> 00:28:06,000
a camera or a router and we

760
00:28:06,000 --> 00:28:08,640
via static analysis we were able to

761
00:28:08,640 --> 00:28:09,919
extract that

762
00:28:09,919 --> 00:28:12,799
we got into its file system we

763
00:28:12,799 --> 00:28:14,880
identified the binary which is

764
00:28:14,880 --> 00:28:16,880
responsible for running the web server

765
00:28:16,880 --> 00:28:18,080
let's say it's running

766
00:28:18,080 --> 00:28:21,760
httpd we opened that binary in tools

767
00:28:21,760 --> 00:28:24,720
like gydra we performed some kind of

768
00:28:24,720 --> 00:28:26,000
static analysis

769
00:28:26,000 --> 00:28:29,039
like reversing on where is it and

770
00:28:29,039 --> 00:28:32,240
looked for some of the important system

771
00:28:32,240 --> 00:28:34,480
functions inside the binary and check

772
00:28:34,480 --> 00:28:35,600
how it is taking

773
00:28:35,600 --> 00:28:38,880
input from the user then we check like

774
00:28:38,880 --> 00:28:41,279
whether it is properly sanitizing what

775
00:28:41,279 --> 00:28:43,520
it is taking from the user

776
00:28:43,520 --> 00:28:46,799
if not then that becomes the possibility

777
00:28:46,799 --> 00:28:47,200
that

778
00:28:47,200 --> 00:28:50,320
if i give the input random

779
00:28:50,320 --> 00:28:53,840
to this thing this may crash the device

780
00:28:53,840 --> 00:28:57,200
or this may lead to some kind of exploit

781
00:28:57,200 --> 00:29:00,799
then we move forward so if we have the

782
00:29:00,799 --> 00:29:02,640
hardware we can directly run

783
00:29:02,640 --> 00:29:05,360
the device power on the device run the

784
00:29:05,360 --> 00:29:07,440
server and perform our fuzzing attack

785
00:29:07,440 --> 00:29:09,679
if we don't have we perf we do the

786
00:29:09,679 --> 00:29:10,720
emulation

787
00:29:10,720 --> 00:29:13,120
and then like uh so for example let's

788
00:29:13,120 --> 00:29:14,640
say if you there is a section where you

789
00:29:14,640 --> 00:29:15,360
need to provide

790
00:29:15,360 --> 00:29:17,360
username password or any kind of logging

791
00:29:17,360 --> 00:29:18,559
from the user

792
00:29:18,559 --> 00:29:22,480
you uh uh you sniff the communication

793
00:29:22,480 --> 00:29:25,679
between the device the

794
00:29:25,679 --> 00:29:27,120
web server and the device that is

795
00:29:27,120 --> 00:29:29,120
communicating and

796
00:29:29,120 --> 00:29:31,279
using tools like bob sue the web

797
00:29:31,279 --> 00:29:33,600
communication you got the packet pattern

798
00:29:33,600 --> 00:29:35,279
that which type of packet is being

799
00:29:35,279 --> 00:29:36,159
passed

800
00:29:36,159 --> 00:29:38,559
so you take that you took you we take

801
00:29:38,559 --> 00:29:40,640
that input as a sample then provide it

802
00:29:40,640 --> 00:29:42,480
to the tools let's say radamsa

803
00:29:42,480 --> 00:29:45,919
it will mutate that input it will

804
00:29:45,919 --> 00:29:48,399
mutate that sample and then we throw

805
00:29:48,399 --> 00:29:49,279
back that sample

806
00:29:49,279 --> 00:29:51,440
to in through the input side to check

807
00:29:51,440 --> 00:29:53,279
that whether the device is having any

808
00:29:53,279 --> 00:29:55,120
effect by throwing back any random

809
00:29:55,120 --> 00:29:57,279
types of data similarly we have other

810
00:29:57,279 --> 00:29:59,039
tools like afl we have more coverage

811
00:29:59,039 --> 00:30:00,240
guided tools

812
00:30:00,240 --> 00:30:03,679
so uh this uh uh this fuzzing

813
00:30:03,679 --> 00:30:07,200
and emulation gets uh more they are

814
00:30:07,200 --> 00:30:09,760
very good when we are doing when we are

815
00:30:09,760 --> 00:30:11,360
performing our exploits on the firm

816
00:30:11,360 --> 00:30:13,600
there

817
00:30:16,960 --> 00:30:20,240
so uh coming to uh attacks

818
00:30:20,240 --> 00:30:23,600
so uh basically the attacks which i will

819
00:30:23,600 --> 00:30:26,799
show now uh would be with

820
00:30:26,799 --> 00:30:30,000
uh show how these uh

821
00:30:30,000 --> 00:30:33,120
analysis uh results in

822
00:30:33,120 --> 00:30:35,360
uh this type of exploits the

823
00:30:35,360 --> 00:30:36,720
vulnerabilities

824
00:30:36,720 --> 00:30:38,720
so in order to reach these

825
00:30:38,720 --> 00:30:39,840
vulnerabilities

826
00:30:39,840 --> 00:30:42,559
we need to start somewhere we need to

827
00:30:42,559 --> 00:30:43,679
start somewhere

828
00:30:43,679 --> 00:30:47,520
so today in the lab session we would

829
00:30:47,520 --> 00:30:49,840
check we will perform some of the basic

830
00:30:49,840 --> 00:30:50,799
labs

831
00:30:50,799 --> 00:30:54,080
of uh how how to start uh

832
00:30:54,080 --> 00:30:58,000
so that we can reach to this thing

833
00:30:58,720 --> 00:31:02,320
so uh coming to our first example

834
00:31:02,320 --> 00:31:05,840
uh the cv201

835
00:31:06,880 --> 00:31:11,120
that is the command injection

836
00:31:11,440 --> 00:31:15,279
and i'm sorry i think i missed this cv

837
00:31:15,279 --> 00:31:19,279
please uh correct that this cv is 2019

838
00:31:19,279 --> 00:31:22,240
this would be the cv here so this is

839
00:31:22,240 --> 00:31:22,960
this cv

840
00:31:22,960 --> 00:31:25,039
so basically this was found in the

841
00:31:25,039 --> 00:31:26,240
router d-link

842
00:31:26,240 --> 00:31:29,600
router and it was a command injection

843
00:31:29,600 --> 00:31:30,720
attack

844
00:31:30,720 --> 00:31:34,000
so uh what happened they attacked us

845
00:31:34,000 --> 00:31:36,640
found an etch nap this is the uh home

846
00:31:36,640 --> 00:31:37,519
network uh

847
00:31:37,519 --> 00:31:40,559
this protocol that that's uh used in

848
00:31:40,559 --> 00:31:42,240
these type of devices cameras and

849
00:31:42,240 --> 00:31:43,679
network devices

850
00:31:43,679 --> 00:31:47,279
so inside the file bin go ahead

851
00:31:47,279 --> 00:31:51,279
there was api hn app api function

852
00:31:51,279 --> 00:31:54,720
inside that function the proper input

853
00:31:54,720 --> 00:31:56,799
sanitization was not

854
00:31:56,799 --> 00:32:00,399
done by a which the attacker if

855
00:32:00,399 --> 00:32:03,360
able to control that thing can pass any

856
00:32:03,360 --> 00:32:05,440
type of command to the system

857
00:32:05,440 --> 00:32:08,960
so for example uh

858
00:32:08,960 --> 00:32:13,120
in this was uh taken from this

859
00:32:13,120 --> 00:32:16,320
of the article this was a sniffed uh

860
00:32:16,320 --> 00:32:18,720
when that communication was happening

861
00:32:18,720 --> 00:32:20,799
and during sniffing as you can see here

862
00:32:20,799 --> 00:32:22,320
some kind of username

863
00:32:22,320 --> 00:32:24,880
and like password was being there is

864
00:32:24,880 --> 00:32:25,360
being

865
00:32:25,360 --> 00:32:28,480
taken forward so after

866
00:32:28,480 --> 00:32:30,799
so this is what i was telling when i was

867
00:32:30,799 --> 00:32:32,480
telling sniffing from the bob soup

868
00:32:32,480 --> 00:32:34,640
this is taken in the bob suit so it it

869
00:32:34,640 --> 00:32:35,519
gives you

870
00:32:35,519 --> 00:32:37,840
what the packet is passed when you come

871
00:32:37,840 --> 00:32:39,519
when your device is communicating with

872
00:32:39,519 --> 00:32:40,000
your

873
00:32:40,000 --> 00:32:42,559
web application so you get some kind of

874
00:32:42,559 --> 00:32:43,679
input pattern

875
00:32:43,679 --> 00:32:46,000
so for example you can further take this

876
00:32:46,000 --> 00:32:46,880
input and

877
00:32:46,880 --> 00:32:48,880
give it to radamsha it will mutate it

878
00:32:48,880 --> 00:32:50,799
and you'll

879
00:32:50,799 --> 00:32:53,440
forward this packet so but in this case

880
00:32:53,440 --> 00:32:54,640
they found that

881
00:32:54,640 --> 00:32:58,240
this thing was being passed at the

882
00:32:58,240 --> 00:33:02,000
as a username and login so if uh

883
00:33:02,000 --> 00:33:04,960
it was reversed this uh go ahead of

884
00:33:04,960 --> 00:33:06,320
binary was reversed

885
00:33:06,320 --> 00:33:09,440
and inside that hnap api function

886
00:33:09,440 --> 00:33:12,880
it was found that when the

887
00:33:12,880 --> 00:33:15,519
input is taken from the user so these

888
00:33:15,519 --> 00:33:16,000
this is

889
00:33:16,000 --> 00:33:18,240
a mips architecture this maps

890
00:33:18,240 --> 00:33:19,440
instruction set

891
00:33:19,440 --> 00:33:22,480
and these a0 a1 a2 a3 for

892
00:33:22,480 --> 00:33:24,320
you are saying it's the parameters that

893
00:33:24,320 --> 00:33:26,880
that is passed to the function

894
00:33:26,880 --> 00:33:29,120
so if you check here there is a system

895
00:33:29,120 --> 00:33:30,159
function so

896
00:33:30,159 --> 00:33:32,399
the system function that can directly

897
00:33:32,399 --> 00:33:33,279
that directly

898
00:33:33,279 --> 00:33:35,840
up your like it says open file or any

899
00:33:35,840 --> 00:33:37,039
run any command

900
00:33:37,039 --> 00:33:39,039
that we run on the system so these

901
00:33:39,039 --> 00:33:41,039
functions used for running those

902
00:33:41,039 --> 00:33:42,240
commands

903
00:33:42,240 --> 00:33:45,600
and by passing the argument to the this

904
00:33:45,600 --> 00:33:46,480
system function

905
00:33:46,480 --> 00:33:48,880
as you can see it's directly accepting

906
00:33:48,880 --> 00:33:50,080
from

907
00:33:50,080 --> 00:33:52,960
the address space and without any input

908
00:33:52,960 --> 00:33:53,679
passing like

909
00:33:53,679 --> 00:33:56,159
there is there is no check that whether

910
00:33:56,159 --> 00:33:56,720
proper

911
00:33:56,720 --> 00:33:59,600
length is what is the length of input

912
00:33:59,600 --> 00:34:01,120
that is taken or

913
00:34:01,120 --> 00:34:03,360
if their kind of character that should

914
00:34:03,360 --> 00:34:04,720
not be accepted

915
00:34:04,720 --> 00:34:06,799
so this no checks are being done over

916
00:34:06,799 --> 00:34:08,000
here it's directly

917
00:34:08,000 --> 00:34:10,399
accepted from the user and parts passed

918
00:34:10,399 --> 00:34:12,000
to the system function

919
00:34:12,000 --> 00:34:14,480
so if such type of implementation is

920
00:34:14,480 --> 00:34:16,000
done in the firmware

921
00:34:16,000 --> 00:34:18,879
it can lead to those attacks so if for

922
00:34:18,879 --> 00:34:19,440
example

923
00:34:19,440 --> 00:34:22,639
as a user if if it can pass any length

924
00:34:22,639 --> 00:34:23,520
of function or

925
00:34:23,520 --> 00:34:25,520
any command and since there is no

926
00:34:25,520 --> 00:34:27,599
checking that whether it is slash or any

927
00:34:27,599 --> 00:34:28,399
kind of

928
00:34:28,399 --> 00:34:30,879
those no character checking neither the

929
00:34:30,879 --> 00:34:31,839
length checking

930
00:34:31,839 --> 00:34:34,159
then it can execute any functions inside

931
00:34:34,159 --> 00:34:35,040
it that

932
00:34:35,040 --> 00:34:36,639
and this can lead you to the attacks

933
00:34:36,639 --> 00:34:40,079
like command injections and all

934
00:34:40,480 --> 00:34:44,000
so uh so similarly if uh so so how

935
00:34:44,000 --> 00:34:46,960
how do we reach to this attack so before

936
00:34:46,960 --> 00:34:48,719
getting this we need to

937
00:34:48,719 --> 00:34:51,040
get the binary file firmware of this

938
00:34:51,040 --> 00:34:52,239
device right

939
00:34:52,239 --> 00:34:54,079
after that we get the firmware of the

940
00:34:54,079 --> 00:34:56,159
device we need to

941
00:34:56,159 --> 00:34:58,240
perform our static analysis from the

942
00:34:58,240 --> 00:35:00,640
tools data that i discussed before

943
00:35:00,640 --> 00:35:03,280
after performing the static analysis we

944
00:35:03,280 --> 00:35:05,200
like when we get the file system

945
00:35:05,200 --> 00:35:08,160
we go around the file we find the binary

946
00:35:08,160 --> 00:35:09,359
that is interesting

947
00:35:09,359 --> 00:35:11,839
or the web related basically the target

948
00:35:11,839 --> 00:35:13,760
goes to web related binaries

949
00:35:13,760 --> 00:35:16,000
so we found that okay there is some go

950
00:35:16,000 --> 00:35:17,920
ahead binary running inside it

951
00:35:17,920 --> 00:35:21,040
we opened that binary inside the gydra

952
00:35:21,040 --> 00:35:24,000
then from gydra uh link any disassembler

953
00:35:24,000 --> 00:35:24,800
tool uh

954
00:35:24,800 --> 00:35:26,480
any disassembler tool of your choice you

955
00:35:26,480 --> 00:35:28,240
can use so

956
00:35:28,240 --> 00:35:30,160
you use this in your the disassembler

957
00:35:30,160 --> 00:35:31,920
tool you find

958
00:35:31,920 --> 00:35:34,560
like you like you could you reverse

959
00:35:34,560 --> 00:35:36,320
these uh instruction sets

960
00:35:36,320 --> 00:35:39,200
and then identified what could be the

961
00:35:39,200 --> 00:35:40,160
possible

962
00:35:40,160 --> 00:35:43,359
flaws and you find that okay it's

963
00:35:43,359 --> 00:35:46,079
there is we look for system function

964
00:35:46,079 --> 00:35:47,760
system function is being called

965
00:35:47,760 --> 00:35:50,640
its argument is taken and it's accepted

966
00:35:50,640 --> 00:35:52,960
but there is nowhere any input parsing

967
00:35:52,960 --> 00:35:53,280
check

968
00:35:53,280 --> 00:35:56,000
or any kind of sanitization being done

969
00:35:56,000 --> 00:35:56,720
it means

970
00:35:56,720 --> 00:35:59,680
if i pass any if any if i pass any

971
00:35:59,680 --> 00:36:01,920
command it should be acceptable

972
00:36:01,920 --> 00:36:04,240
then you check from the burp suit you

973
00:36:04,240 --> 00:36:04,960
take that

974
00:36:04,960 --> 00:36:06,880
and you start performing your attacks on

975
00:36:06,880 --> 00:36:08,079
the device

976
00:36:08,079 --> 00:36:09,920
if the device is available you do

977
00:36:09,920 --> 00:36:12,079
directly on the web otherwise you

978
00:36:12,079 --> 00:36:15,680
emulate and perform that attack

979
00:36:17,599 --> 00:36:22,880
another comes the the cv2020861 pro

980
00:36:22,880 --> 00:36:26,000
it was a remote code execution on

981
00:36:26,000 --> 00:36:29,680
ascii device it's also a router and

982
00:36:29,680 --> 00:36:32,560
basically you know it's a wi-fi extender

983
00:36:32,560 --> 00:36:32,960
and

984
00:36:32,960 --> 00:36:36,079
in this case if you see it has two

985
00:36:36,079 --> 00:36:37,839
vulnerabilities

986
00:36:37,839 --> 00:36:41,040
one was it it was it was it

987
00:36:41,040 --> 00:36:44,720
had it had a ftb server running and

988
00:36:44,720 --> 00:36:47,119
that has a hard coded credential that

989
00:36:47,119 --> 00:36:49,280
can be used by any attacker to load any

990
00:36:49,280 --> 00:36:51,119
malicious firmware

991
00:36:51,119 --> 00:36:54,160
and another thing was they had some

992
00:36:54,160 --> 00:36:55,440
service running

993
00:36:55,440 --> 00:36:58,480
and it there was flaw in that service

994
00:36:58,480 --> 00:37:02,320
that could be exploited so see uh

995
00:37:02,320 --> 00:37:04,880
to reach to this these point that this

996
00:37:04,880 --> 00:37:06,400
could be there we need to

997
00:37:06,400 --> 00:37:09,280
like or the basic step steps that i

998
00:37:09,280 --> 00:37:11,280
discussed remains the same

999
00:37:11,280 --> 00:37:13,839
on all the things that remain further is

1000
00:37:13,839 --> 00:37:14,720
how do we

1001
00:37:14,720 --> 00:37:17,119
are if someone is having experience in

1002
00:37:17,119 --> 00:37:17,760
binary

1003
00:37:17,760 --> 00:37:20,640
reversing maybe it of any architecture

1004
00:37:20,640 --> 00:37:22,000
then this part gets

1005
00:37:22,000 --> 00:37:24,480
very easier once you are clear with what

1006
00:37:24,480 --> 00:37:25,920
you have to do in the start then you

1007
00:37:25,920 --> 00:37:27,520
have to reverse and

1008
00:37:27,520 --> 00:37:30,240
perform your reversing steps so if you

1009
00:37:30,240 --> 00:37:30,960
look at this

1010
00:37:30,960 --> 00:37:34,400
uh it was the cgi files that are

1011
00:37:34,400 --> 00:37:35,599
generally used

1012
00:37:35,599 --> 00:37:37,839
in this web application so inside the

1013
00:37:37,839 --> 00:37:38,960
cgi file

1014
00:37:38,960 --> 00:37:41,200
there is just a system command it's

1015
00:37:41,200 --> 00:37:42,640
taking the file

1016
00:37:42,640 --> 00:37:44,880
and storing at the space so when taking

1017
00:37:44,880 --> 00:37:46,000
the file

1018
00:37:46,000 --> 00:37:49,280
this thing was its hard coded credential

1019
00:37:49,280 --> 00:37:52,960
as username and the password over here

1020
00:37:52,960 --> 00:37:56,560
so this can directly be after reversing

1021
00:37:56,560 --> 00:37:58,160
the binary in any tool

1022
00:37:58,160 --> 00:38:00,480
this can directly be seen by the

1023
00:38:00,480 --> 00:38:01,599
attacker and he

1024
00:38:01,599 --> 00:38:04,160
it can he can use same credentials to

1025
00:38:04,160 --> 00:38:06,320
perform any attack or

1026
00:38:06,320 --> 00:38:10,079
load any of the malicious thing plus

1027
00:38:10,079 --> 00:38:13,280
some of this this thing had a right to

1028
00:38:13,280 --> 00:38:15,119
perform

1029
00:38:15,119 --> 00:38:17,119
like changes in most of the directories

1030
00:38:17,119 --> 00:38:18,320
of that server

1031
00:38:18,320 --> 00:38:20,640
and that can help the attacker to

1032
00:38:20,640 --> 00:38:22,400
perform any kind of

1033
00:38:22,400 --> 00:38:24,400
backdoor manipulation and implant his

1034
00:38:24,400 --> 00:38:27,280
own firmware inside it

1035
00:38:27,280 --> 00:38:30,000
in fact by loading the firmware in this

1036
00:38:30,000 --> 00:38:31,200
case no

1037
00:38:31,200 --> 00:38:33,040
no signature check was being matched so

1038
00:38:33,040 --> 00:38:34,800
any file that was loaded

1039
00:38:34,800 --> 00:38:36,880
and since the credentials are already

1040
00:38:36,880 --> 00:38:38,720
hard coded this can be used by the

1041
00:38:38,720 --> 00:38:42,400
attacker to load any malicious firmware

1042
00:38:42,400 --> 00:38:46,720
another things come the service

1043
00:38:46,720 --> 00:38:49,680
so uh basically uh when we when any

1044
00:38:49,680 --> 00:38:51,280
device is running it has some kind of

1045
00:38:51,280 --> 00:38:53,599
services running it could be your telnet

1046
00:38:53,599 --> 00:38:54,560
ssh or

1047
00:38:54,560 --> 00:38:56,800
any related services running on the

1048
00:38:56,800 --> 00:38:58,079
device

1049
00:38:58,079 --> 00:39:01,040
so similarly on this case there was some

1050
00:39:01,040 --> 00:39:01,680
bd

1051
00:39:01,680 --> 00:39:04,079
svr running so it's accepting the

1052
00:39:04,079 --> 00:39:04,960
communication

1053
00:39:04,960 --> 00:39:08,760
listening on this d3 ac that is port

1054
00:39:08,760 --> 00:39:11,760
54188 and

1055
00:39:11,760 --> 00:39:14,320
it was like it was after the reversing

1056
00:39:14,320 --> 00:39:15,599
it was observed

1057
00:39:15,599 --> 00:39:20,079
that once this uh socket was creating uh

1058
00:39:20,079 --> 00:39:22,400
created and then the it was waiting in a

1059
00:39:22,400 --> 00:39:24,240
while loop for that connections

1060
00:39:24,240 --> 00:39:27,839
and inside those uh binaries there were

1061
00:39:27,839 --> 00:39:28,400
different

1062
00:39:28,400 --> 00:39:31,359
functions that were susceptible so uh

1063
00:39:31,359 --> 00:39:32,560
when we do

1064
00:39:32,560 --> 00:39:36,000
uh the reversing part we look for these

1065
00:39:36,000 --> 00:39:39,119
such either web related binaries that

1066
00:39:39,119 --> 00:39:39,440
are

1067
00:39:39,440 --> 00:39:41,280
there where we have the possibility to

1068
00:39:41,280 --> 00:39:42,800
attack or some kind of

1069
00:39:42,800 --> 00:39:47,359
custom binaries or when we perform the

1070
00:39:47,359 --> 00:39:49,440
network scanning we see some ports

1071
00:39:49,440 --> 00:39:50,800
running on the device

1072
00:39:50,800 --> 00:39:53,119
so that helps in identifying if there

1073
00:39:53,119 --> 00:39:55,040
are some ports that are not standard or

1074
00:39:55,040 --> 00:39:56,000
very strange type

1075
00:39:56,000 --> 00:39:58,240
that gives us the idea that there might

1076
00:39:58,240 --> 00:40:00,000
be some custom services running inside

1077
00:40:00,000 --> 00:40:01,839
it and then we look and

1078
00:40:01,839 --> 00:40:03,520
search for that binary file inside the

1079
00:40:03,520 --> 00:40:05,119
file system load it

1080
00:40:05,119 --> 00:40:07,760
in the disassembler and then look for

1081
00:40:07,760 --> 00:40:08,880
different functions

1082
00:40:08,880 --> 00:40:11,520
for functions or attacking point inside

1083
00:40:11,520 --> 00:40:12,240
it

1084
00:40:12,240 --> 00:40:13,839
so they were having similarly some

1085
00:40:13,839 --> 00:40:15,520
command send read

1086
00:40:15,520 --> 00:40:18,560
write applications so when uh

1087
00:40:18,560 --> 00:40:20,880
it's it was observed then it was

1088
00:40:20,880 --> 00:40:21,599
observed that

1089
00:40:21,599 --> 00:40:24,319
these functions were calling system

1090
00:40:24,319 --> 00:40:25,119
level

1091
00:40:25,119 --> 00:40:27,760
the thing system level function so like

1092
00:40:27,760 --> 00:40:28,319
a file

1093
00:40:28,319 --> 00:40:31,200
related write open open directory it

1094
00:40:31,200 --> 00:40:31,920
means it

1095
00:40:31,920 --> 00:40:35,599
these functions can help the attacker to

1096
00:40:35,599 --> 00:40:37,599
directly interact with the file system

1097
00:40:37,599 --> 00:40:39,040
of the device

1098
00:40:39,040 --> 00:40:41,119
so after further observing reversing

1099
00:40:41,119 --> 00:40:42,480
these functions it was

1100
00:40:42,480 --> 00:40:45,920
observed that if a certain pattern of

1101
00:40:45,920 --> 00:40:49,680
input is provided via this function then

1102
00:40:49,680 --> 00:40:53,200
they then those functions were accepted

1103
00:40:53,200 --> 00:40:53,760
by

1104
00:40:53,760 --> 00:40:57,200
the device and it could be able to write

1105
00:40:57,200 --> 00:41:00,000
used by the attacker to send any kind of

1106
00:41:00,000 --> 00:41:01,359
crafted input

1107
00:41:01,359 --> 00:41:04,319
so this pattern was identified and

1108
00:41:04,319 --> 00:41:05,119
similarly

1109
00:41:05,119 --> 00:41:08,000
using simple python script uh it was

1110
00:41:08,000 --> 00:41:09,920
once the connection was established on

1111
00:41:09,920 --> 00:41:10,880
that port

1112
00:41:10,880 --> 00:41:14,400
then the this the message in the similar

1113
00:41:14,400 --> 00:41:15,599
crafted pattern so it

1114
00:41:15,599 --> 00:41:18,319
it has a magic signature so it was sent

1115
00:41:18,319 --> 00:41:19,520
over here

1116
00:41:19,520 --> 00:41:23,119
this this magic magic signature

1117
00:41:23,119 --> 00:41:25,359
then similarly command type payload and

1118
00:41:25,359 --> 00:41:27,599
then finally the custom file content

1119
00:41:27,599 --> 00:41:30,400
so this the patent remained the same and

1120
00:41:30,400 --> 00:41:31,359
we fi

1121
00:41:31,359 --> 00:41:34,560
send her our custom file system so this

1122
00:41:34,560 --> 00:41:34,960
case

1123
00:41:34,960 --> 00:41:38,560
by reversing the binaries the attacker

1124
00:41:38,560 --> 00:41:40,319
was able to understand

1125
00:41:40,319 --> 00:41:44,079
what kind of input could be accept

1126
00:41:44,079 --> 00:41:46,240
is could be accepted if it is waiting

1127
00:41:46,240 --> 00:41:48,319
for some kind of connection and

1128
00:41:48,319 --> 00:41:50,400
it was reversed and similarly crafted

1129
00:41:50,400 --> 00:41:52,240
input was sent that was accepted and

1130
00:41:52,240 --> 00:41:53,599
executed

1131
00:41:53,599 --> 00:41:56,560
so again

1132
00:41:57,119 --> 00:41:59,520
this is how the vulnerability in the

1133
00:41:59,520 --> 00:42:00,240
firmware

1134
00:42:00,240 --> 00:42:03,200
can help you in remotely attacking or

1135
00:42:03,200 --> 00:42:04,560
taking control of the device even

1136
00:42:04,560 --> 00:42:07,119
remotely

1137
00:42:07,359 --> 00:42:11,040
we have our next example that is

1138
00:42:11,040 --> 00:42:14,480
buffer overflow so uh this was found in

1139
00:42:14,480 --> 00:42:14,880
the

1140
00:42:14,880 --> 00:42:18,480
tp-link router and it was running

1141
00:42:18,480 --> 00:42:22,400
it has the httpd binary so uh

1142
00:42:22,400 --> 00:42:25,520
so when it was observed it has a

1143
00:42:25,520 --> 00:42:28,560
the pattern remained the same like

1144
00:42:28,560 --> 00:42:30,640
extracting the binary taking it in the

1145
00:42:30,640 --> 00:42:32,319
disassembler and reversing part

1146
00:42:32,319 --> 00:42:34,480
so it had a function called that that

1147
00:42:34,480 --> 00:42:36,400
was handling the string

1148
00:42:36,400 --> 00:42:40,160
and uh inside it it had like destination

1149
00:42:40,160 --> 00:42:43,200
size source so and there was several

1150
00:42:43,200 --> 00:42:45,920
escape characters that it was escaping

1151
00:42:45,920 --> 00:42:47,520
their through

1152
00:42:47,520 --> 00:42:50,560
so this same function was called inside

1153
00:42:50,560 --> 00:42:54,480
another function which had

1154
00:42:54,480 --> 00:42:56,480
this string modify same function was

1155
00:42:56,480 --> 00:42:58,160
called inside this

1156
00:42:58,160 --> 00:43:00,880
right page param set function and this

1157
00:43:00,880 --> 00:43:02,880
function was generally used inside

1158
00:43:02,880 --> 00:43:06,480
a user rpm function to print some value

1159
00:43:06,480 --> 00:43:08,319
that is passed through get

1160
00:43:08,319 --> 00:43:10,160
so when as a get parameter is passed so

1161
00:43:10,160 --> 00:43:12,000
whatever the value is passed it it helps

1162
00:43:12,000 --> 00:43:12,800
in printing

1163
00:43:12,800 --> 00:43:16,079
so all this right parameter func

1164
00:43:16,079 --> 00:43:18,640
write page parameter was passed was

1165
00:43:18,640 --> 00:43:20,079
called in this function

1166
00:43:20,079 --> 00:43:23,119
so if you check this it has

1167
00:43:23,119 --> 00:43:26,400
a request value so

1168
00:43:26,400 --> 00:43:28,960
it accepts the request and this is the

1169
00:43:28,960 --> 00:43:30,400
value of the buffer

1170
00:43:30,400 --> 00:43:33,440
so this same buffer this value is

1171
00:43:33,440 --> 00:43:36,000
passed over the string modify and the

1172
00:43:36,000 --> 00:43:37,040
string modify

1173
00:43:37,040 --> 00:43:40,560
is the source so this becomes the source

1174
00:43:40,560 --> 00:43:41,119
for that

1175
00:43:41,119 --> 00:43:44,560
string modify function and this is the

1176
00:43:44,560 --> 00:43:45,599
destination

1177
00:43:45,599 --> 00:43:48,920
destination is and its buffer size is

1178
00:43:48,920 --> 00:43:50,319
512.

1179
00:43:50,319 --> 00:43:52,319
so this is the destination this is a

1180
00:43:52,319 --> 00:43:53,440
source and

1181
00:43:53,440 --> 00:43:56,560
source is if you see is has having the

1182
00:43:56,560 --> 00:43:56,960
size

1183
00:43:56,960 --> 00:44:00,240
68 so size is 68

1184
00:44:00,240 --> 00:44:02,720
the buffer is of destination buffer is

1185
00:44:02,720 --> 00:44:04,000
512

1186
00:44:04,000 --> 00:44:06,960
but think if you say it's the size

1187
00:44:06,960 --> 00:44:07,839
character

1188
00:44:07,839 --> 00:44:10,880
uh so this decides so how how this

1189
00:44:10,880 --> 00:44:12,160
function is working

1190
00:44:12,160 --> 00:44:15,200
it either stops accepting until it

1191
00:44:15,200 --> 00:44:18,000
uh encounters the null character or the

1192
00:44:18,000 --> 00:44:19,839
size byte is consumed

1193
00:44:19,839 --> 00:44:21,760
it has two way to stop accepting the

1194
00:44:21,760 --> 00:44:24,079
input so when it comes to this

1195
00:44:24,079 --> 00:44:27,200
if you see this uh the size

1196
00:44:27,200 --> 00:44:30,720
to which it will stop is 0x200

1197
00:44:30,720 --> 00:44:32,800
if you convert it to decimal it's okay

1198
00:44:32,800 --> 00:44:34,400
it's 512.

1199
00:44:34,400 --> 00:44:37,440
it means the size acceptable size and

1200
00:44:37,440 --> 00:44:40,240
the size of the destination is same

1201
00:44:40,240 --> 00:44:43,200
and though the size of input buffer is

1202
00:44:43,200 --> 00:44:44,319
68

1203
00:44:44,319 --> 00:44:47,359
so there is nowhere nowhere

1204
00:44:47,359 --> 00:44:50,079
size check of what the size of the value

1205
00:44:50,079 --> 00:44:51,599
what the value

1206
00:44:51,599 --> 00:44:54,880
uh this uh source size is being sent by

1207
00:44:54,880 --> 00:44:56,560
the user

1208
00:44:56,560 --> 00:44:59,040
so though it could be it means if it is

1209
00:44:59,040 --> 00:44:59,839
having

1210
00:44:59,839 --> 00:45:01,760
there is no check there is no string

1211
00:45:01,760 --> 00:45:03,680
modifying its stopping only when its

1212
00:45:03,680 --> 00:45:06,400
size is reached and in this case size is

1213
00:45:06,400 --> 00:45:08,960
same as the destination 512 it means

1214
00:45:08,960 --> 00:45:11,200
though it is 68 but even if the attacker

1215
00:45:11,200 --> 00:45:13,440
provide any large number of slightly

1216
00:45:13,440 --> 00:45:15,280
large size of payload it could be

1217
00:45:15,280 --> 00:45:18,000
until this 512 or null it would be

1218
00:45:18,000 --> 00:45:19,760
accepted by this thing

1219
00:45:19,760 --> 00:45:23,280
so this is how another this this

1220
00:45:23,280 --> 00:45:24,960
gets the buffer overflow so those the

1221
00:45:24,960 --> 00:45:26,960
buffer size is just 68 you can

1222
00:45:26,960 --> 00:45:30,839
any size length could be accepted over

1223
00:45:30,839 --> 00:45:32,400
here

1224
00:45:32,400 --> 00:45:35,839
and this is a another example

1225
00:45:35,839 --> 00:45:39,599
so it's more in on the running services

1226
00:45:39,599 --> 00:45:40,560
side

1227
00:45:40,560 --> 00:45:43,359
so in most cases uh during debugging or

1228
00:45:43,359 --> 00:45:44,720
during development

1229
00:45:44,720 --> 00:45:48,079
developers have this keep telnet or ssh

1230
00:45:48,079 --> 00:45:48,800
open

1231
00:45:48,800 --> 00:45:50,960
for their purpose but when it comes to

1232
00:45:50,960 --> 00:45:52,240
production

1233
00:45:52,240 --> 00:45:54,160
it's always recommended that these

1234
00:45:54,160 --> 00:45:55,599
remote accessible port

1235
00:45:55,599 --> 00:45:58,560
should not be left open so in this case

1236
00:45:58,560 --> 00:45:58,960
it's

1237
00:45:58,960 --> 00:46:01,599
uh it's the shaker endoscope that

1238
00:46:01,599 --> 00:46:03,359
generally used to

1239
00:46:03,359 --> 00:46:05,119
like look into such system which are

1240
00:46:05,119 --> 00:46:06,960
cannot be reached by human

1241
00:46:06,960 --> 00:46:10,000
so in medical devices in garages

1242
00:46:10,000 --> 00:46:12,800
these devices are used so what it does

1243
00:46:12,800 --> 00:46:13,440
it

1244
00:46:13,440 --> 00:46:16,880
though since the telnet was enabled

1245
00:46:16,880 --> 00:46:20,000
attacker could directly connect

1246
00:46:20,000 --> 00:46:23,680
through its uh network and using that

1247
00:46:23,680 --> 00:46:26,800
telnet service running it can get the

1248
00:46:26,800 --> 00:46:28,560
remote access of it

1249
00:46:28,560 --> 00:46:31,839
so this is how so

1250
00:46:31,839 --> 00:46:33,680
coming to though authentication could

1251
00:46:33,680 --> 00:46:35,680
have been implemented

1252
00:46:35,680 --> 00:46:38,079
but the taking credential for these

1253
00:46:38,079 --> 00:46:39,599
services is not

1254
00:46:39,599 --> 00:46:41,680
that tough it could either be brute

1255
00:46:41,680 --> 00:46:43,040
forced or

1256
00:46:43,040 --> 00:46:45,760
uh or it could be if it is hard coded or

1257
00:46:45,760 --> 00:46:47,200
it is set to default

1258
00:46:47,200 --> 00:46:49,040
it could be reversed via the firmware if

1259
00:46:49,040 --> 00:46:51,440
it is the firmware is accessible

1260
00:46:51,440 --> 00:46:55,440
so this is how uh the vulnerabilities

1261
00:46:55,440 --> 00:46:58,480
in the firmware though it it we are

1262
00:46:58,480 --> 00:46:59,440
seeing it

1263
00:46:59,440 --> 00:47:01,520
being attacked from the application

1264
00:47:01,520 --> 00:47:02,640
level after

1265
00:47:02,640 --> 00:47:04,079
like by the web application we are

1266
00:47:04,079 --> 00:47:06,000
attacking or via some services we are

1267
00:47:06,000 --> 00:47:06,800
attacking

1268
00:47:06,800 --> 00:47:09,440
but to reach to this attack we need to

1269
00:47:09,440 --> 00:47:10,880
come from the bottom to top

1270
00:47:10,880 --> 00:47:12,880
after the binary we need to perform

1271
00:47:12,880 --> 00:47:14,560
those static thing then we need to

1272
00:47:14,560 --> 00:47:15,920
actually identify

1273
00:47:15,920 --> 00:47:18,160
what do i what should i attack so we

1274
00:47:18,160 --> 00:47:20,160
know these are the possibility of attack

1275
00:47:20,160 --> 00:47:23,359
it gives us a somewhat better hit

1276
00:47:23,359 --> 00:47:26,240
that possibly if i can find some

1277
00:47:26,240 --> 00:47:27,839
functions like system and all

1278
00:47:27,839 --> 00:47:30,000
while disassembling or while reversing

1279
00:47:30,000 --> 00:47:31,440
that could be my point

1280
00:47:31,440 --> 00:47:33,200
then if i find some kind of system

1281
00:47:33,200 --> 00:47:35,599
related function then i need to check

1282
00:47:35,599 --> 00:47:38,559
that whether the what kind of argument

1283
00:47:38,559 --> 00:47:40,000
is being passed to that

1284
00:47:40,000 --> 00:47:42,240
is that argument such that that is

1285
00:47:42,240 --> 00:47:43,119
accepting

1286
00:47:43,119 --> 00:47:46,480
from the user or it is

1287
00:47:46,480 --> 00:47:48,800
uh it or it is not it is not related to

1288
00:47:48,800 --> 00:47:50,000
user anyway

1289
00:47:50,000 --> 00:47:52,400
and in case it is accepting from user

1290
00:47:52,400 --> 00:47:55,280
then whether those uh

1291
00:47:55,280 --> 00:47:58,079
length or or proper length check is done

1292
00:47:58,079 --> 00:47:58,559
or not

1293
00:47:58,559 --> 00:48:00,480
proper character acceptance check is

1294
00:48:00,480 --> 00:48:02,480
done or not all these things

1295
00:48:02,480 --> 00:48:04,960
matters in our reversing and then once

1296
00:48:04,960 --> 00:48:06,319
that give us the idea

1297
00:48:06,319 --> 00:48:08,720
of possible attacks we come to our

1298
00:48:08,720 --> 00:48:10,480
dynamic analysis to perform

1299
00:48:10,480 --> 00:48:12,559
our if we do not have the hardware we

1300
00:48:12,559 --> 00:48:13,839
perform the emulation

1301
00:48:13,839 --> 00:48:17,280
and first that part and that is how we

1302
00:48:17,280 --> 00:48:18,839
lead to these

1303
00:48:18,839 --> 00:48:23,200
uh these attacks then

1304
00:48:23,200 --> 00:48:27,359
so uh i'll so we'll go with the labs

1305
00:48:27,359 --> 00:48:30,400
if we have any question so uh basically

1306
00:48:30,400 --> 00:48:31,359
since we have

1307
00:48:31,359 --> 00:48:33,119
the introductory part of the firmware

1308
00:48:33,119 --> 00:48:35,680
reversing we'll go

1309
00:48:35,680 --> 00:48:38,160
we'll practice will have some hands-on

1310
00:48:38,160 --> 00:48:39,520
practice on those

1311
00:48:39,520 --> 00:48:42,000
how we what do we do we get just a

1312
00:48:42,000 --> 00:48:48,319
binary thing

1313
00:48:48,319 --> 00:48:51,760
so if we have question

1314
00:48:51,760 --> 00:48:53,760
uh yeah i believe all the questions are

1315
00:48:53,760 --> 00:48:55,680
answered by the fellow attendees

1316
00:48:55,680 --> 00:48:58,079
but still i think in the personal chat

1317
00:48:58,079 --> 00:49:00,720
some questions i'd rather

1318
00:49:00,720 --> 00:49:03,839
just have a look

1319
00:49:07,359 --> 00:49:09,839
i've got a few of the questions captured

1320
00:49:09,839 --> 00:49:10,559
so

1321
00:49:10,559 --> 00:49:13,760
one of the early ones was just asking

1322
00:49:13,760 --> 00:49:14,880
about

1323
00:49:14,880 --> 00:49:16,720
what the entropy graph was and

1324
00:49:16,720 --> 00:49:19,119
specifically what the entropy being

1325
00:49:19,119 --> 00:49:23,040
referenced there was relative to

1326
00:49:23,040 --> 00:49:25,760
there was some discussion in the chat

1327
00:49:25,760 --> 00:49:28,880
but if you want to weigh in on it

1328
00:49:28,880 --> 00:49:31,440
yeah so uh when it comes to entropy

1329
00:49:31,440 --> 00:49:33,680
entropy is basically randomness in the

1330
00:49:33,680 --> 00:49:34,559
firmware

1331
00:49:34,559 --> 00:49:37,839
or randomness of anything of which you

1332
00:49:37,839 --> 00:49:40,319
are calculating the entropy of so when

1333
00:49:40,319 --> 00:49:42,480
we calculate the entropy of the firmware

1334
00:49:42,480 --> 00:49:43,760
we see that randomness

1335
00:49:43,760 --> 00:49:47,119
inside it and uh the graph that i

1336
00:49:47,119 --> 00:49:50,160
uh that's the that key that is

1337
00:49:50,160 --> 00:49:52,880
obtained by that bin work it it gives us

1338
00:49:52,880 --> 00:49:54,480
the

1339
00:49:54,480 --> 00:49:56,400
randomness which is present in that

1340
00:49:56,400 --> 00:49:58,480
firmware so if it is more random

1341
00:49:58,480 --> 00:50:00,480
if it is more random probably its more

1342
00:50:00,480 --> 00:50:01,520
encrypted thing so

1343
00:50:01,520 --> 00:50:04,559
if we have a binary and we do normal

1344
00:50:04,559 --> 00:50:05,599
strings on it

1345
00:50:05,599 --> 00:50:08,000
and we get a very gibberish type of

1346
00:50:08,000 --> 00:50:09,440
thing that we cannot be

1347
00:50:09,440 --> 00:50:11,040
understand by normal humans look

1348
00:50:11,040 --> 00:50:13,280
something very random it could be

1349
00:50:13,280 --> 00:50:16,640
uh its entropy would be high and it

1350
00:50:16,640 --> 00:50:18,480
means it could be encrypted

1351
00:50:18,480 --> 00:50:21,680
but if its entropy is low and it means

1352
00:50:21,680 --> 00:50:22,160
it has

1353
00:50:22,160 --> 00:50:24,079
less randomness means there is something

1354
00:50:24,079 --> 00:50:26,160
that is human human readable

1355
00:50:26,160 --> 00:50:28,720
it means we can probably extract it and

1356
00:50:28,720 --> 00:50:31,759
get something out of it

1357
00:50:32,319 --> 00:50:35,440
cool another one that came through was

1358
00:50:35,440 --> 00:50:39,440
are these tools analyzing elf binaries

1359
00:50:39,440 --> 00:50:43,280
to what extent are they disassembling

1360
00:50:43,280 --> 00:50:44,960
them and then

1361
00:50:44,960 --> 00:50:48,240
further can they be used to to look into

1362
00:50:48,240 --> 00:50:50,240
arduino firmware or

1363
00:50:50,240 --> 00:50:52,960
would different tools be used for that

1364
00:50:52,960 --> 00:50:53,599
type of

1365
00:50:53,599 --> 00:50:57,280
inspection yeah

1366
00:50:57,280 --> 00:51:00,319
so uh basically uh

1367
00:51:00,319 --> 00:51:04,000
for this uh arduino type of firmware

1368
00:51:04,000 --> 00:51:07,359
it's more of bare metal firmware so it

1369
00:51:07,359 --> 00:51:08,400
does not has

1370
00:51:08,400 --> 00:51:11,920
os into it so any any

1371
00:51:11,920 --> 00:51:13,920
any application any firmware that is

1372
00:51:13,920 --> 00:51:15,280
running having

1373
00:51:15,280 --> 00:51:18,559
either rtos a real time uh os

1374
00:51:18,559 --> 00:51:22,000
or uh normal or just without any os like

1375
00:51:22,000 --> 00:51:24,960
bare metal thing so those things can you

1376
00:51:24,960 --> 00:51:26,000
for that thing

1377
00:51:26,000 --> 00:51:28,800
we need to know a bit more detail about

1378
00:51:28,800 --> 00:51:29,280
let's say

1379
00:51:29,280 --> 00:51:32,079
arduino uh a trio is having a controller

1380
00:51:32,079 --> 00:51:32,640
avr

1381
00:51:32,640 --> 00:51:35,440
so for avr we need to know the avr

1382
00:51:35,440 --> 00:51:36,880
memory location

1383
00:51:36,880 --> 00:51:39,680
and its its avr architecture and then

1384
00:51:39,680 --> 00:51:42,079
you can directly load that binary in

1385
00:51:42,079 --> 00:51:44,160
gydra so in that case your bin work will

1386
00:51:44,160 --> 00:51:45,359
not work so

1387
00:51:45,359 --> 00:51:47,680
uh been work does not support those type

1388
00:51:47,680 --> 00:51:49,200
of firmware it works when you have

1389
00:51:49,200 --> 00:51:50,240
proper os

1390
00:51:50,240 --> 00:51:53,040
linux or any vxbox type of os file there

1391
00:51:53,040 --> 00:51:54,880
so you can load it in gydra

1392
00:51:54,880 --> 00:51:57,280
and in case of disassembly when you say

1393
00:51:57,280 --> 00:51:58,400
to what extent

1394
00:51:58,400 --> 00:52:01,119
it does not give you the exact like the

1395
00:52:01,119 --> 00:52:02,720
source code thingy

1396
00:52:02,720 --> 00:52:05,839
a pseudo code thing pseudo c code

1397
00:52:05,839 --> 00:52:08,400
that helps you and in understanding what

1398
00:52:08,400 --> 00:52:09,359
is happening

1399
00:52:09,359 --> 00:52:12,960
uh but still for some of the

1400
00:52:12,960 --> 00:52:15,359
bare metal thing for example stm and all

1401
00:52:15,359 --> 00:52:16,160
there are

1402
00:52:16,160 --> 00:52:18,720
plugins called for example svd loader

1403
00:52:18,720 --> 00:52:20,000
svd loader

1404
00:52:20,000 --> 00:52:23,680
uh for gydra uh since i have used

1405
00:52:23,680 --> 00:52:26,079
geider i have not used and somewhat to

1406
00:52:26,079 --> 00:52:27,440
that array also but i have not used

1407
00:52:27,440 --> 00:52:29,280
ida pro so i'm not very sure what's the

1408
00:52:29,280 --> 00:52:30,880
functionality of ida pro

1409
00:52:30,880 --> 00:52:33,680
but for kydra there are plugins for

1410
00:52:33,680 --> 00:52:34,319
those things

1411
00:52:34,319 --> 00:52:36,079
but but still there are in case of bare

1412
00:52:36,079 --> 00:52:37,920
metal we have to do a lot of

1413
00:52:37,920 --> 00:52:40,880
manual reversing like if we see any

1414
00:52:40,880 --> 00:52:42,000
register value

1415
00:52:42,000 --> 00:52:44,079
if we see any register value we need

1416
00:52:44,079 --> 00:52:45,520
let's uh we need to

1417
00:52:45,520 --> 00:52:47,760
take that value and go back to the data

1418
00:52:47,760 --> 00:52:48,880
sheet and match

1419
00:52:48,880 --> 00:52:50,880
that what this register is corresponding

1420
00:52:50,880 --> 00:52:52,400
to so for example in

1421
00:52:52,400 --> 00:52:54,559
your in your arduino you are running

1422
00:52:54,559 --> 00:52:56,880
blinking led code and you try to

1423
00:52:56,880 --> 00:52:59,119
reverse that thing in your but when

1424
00:52:59,119 --> 00:53:00,559
walks bin work will not work

1425
00:53:00,559 --> 00:53:02,960
you have to load that in gyro then in

1426
00:53:02,960 --> 00:53:03,839
gydra you

1427
00:53:03,839 --> 00:53:05,839
you when you do uh if you are good with

1428
00:53:05,839 --> 00:53:07,680
assembly it's very helpful in reversing

1429
00:53:07,680 --> 00:53:08,559
always

1430
00:53:08,559 --> 00:53:10,960
like i would always say if if you are at

1431
00:53:10,960 --> 00:53:11,839
least have

1432
00:53:11,839 --> 00:53:14,960
a good um go through with

1433
00:53:14,960 --> 00:53:17,680
any of the in uh instructions yet in iot

1434
00:53:17,680 --> 00:53:19,680
devices most commonly used are arm

1435
00:53:19,680 --> 00:53:23,119
and maps so uh you look into the guidera

1436
00:53:23,119 --> 00:53:25,760
and you see those register values and

1437
00:53:25,760 --> 00:53:26,720
then match

1438
00:53:26,720 --> 00:53:29,359
it it will not give you like exactly

1439
00:53:29,359 --> 00:53:30,960
what this do we have to go back and

1440
00:53:30,960 --> 00:53:33,680
check ourselves

1441
00:53:34,340 --> 00:53:37,429
[Music]

1442
00:53:37,839 --> 00:53:40,160
to bundle a couple together and there

1443
00:53:40,160 --> 00:53:41,680
was some discussion in the chat about

1444
00:53:41,680 --> 00:53:42,559
this

1445
00:53:42,559 --> 00:53:44,559
can you put a bit of the process in

1446
00:53:44,559 --> 00:53:47,599
perspective relative to kind of

1447
00:53:47,599 --> 00:53:50,800
getting started you know kind of

1448
00:53:50,800 --> 00:53:54,160
the the thing itself beginning

1449
00:53:54,160 --> 00:53:57,040
to look around and then how long you

1450
00:53:57,040 --> 00:53:57,520
know

1451
00:53:57,520 --> 00:54:00,240
days weeks months for some of this uh

1452
00:54:00,240 --> 00:54:02,640
vulnerability

1453
00:54:02,640 --> 00:54:05,760
inspection uh

1454
00:54:05,760 --> 00:54:07,359
can you please repeat i think voice

1455
00:54:07,359 --> 00:54:11,839
broke and i didn't got the question

1456
00:54:15,760 --> 00:54:17,839
yeah can you please repeat the question

1457
00:54:17,839 --> 00:54:18,800
i think that the

1458
00:54:18,800 --> 00:54:20,640
at least last part of the question uh

1459
00:54:20,640 --> 00:54:22,240
was about how long

1460
00:54:22,240 --> 00:54:25,520
you would generally expect this kind of

1461
00:54:25,520 --> 00:54:27,359
reversing process to take

1462
00:54:27,359 --> 00:54:31,040
like hours days or weeks

1463
00:54:31,040 --> 00:54:34,160
uh yeah so it depends on what kind of

1464
00:54:34,160 --> 00:54:35,760
firmware we have got so if it is

1465
00:54:35,760 --> 00:54:36,799
encrypted it

1466
00:54:36,799 --> 00:54:39,839
it takes time like weeks

1467
00:54:39,839 --> 00:54:44,000
uh but if and in case of if it is

1468
00:54:44,000 --> 00:54:46,400
not encrypted just the decryption path

1469
00:54:46,400 --> 00:54:47,760
and in that case

1470
00:54:47,760 --> 00:54:51,040
we it it takes few days

1471
00:54:51,040 --> 00:54:53,520
if we are good with like it also depends

1472
00:54:53,520 --> 00:54:54,240
on how much

1473
00:54:54,240 --> 00:54:56,799
uh like we are good an experience with

1474
00:54:56,799 --> 00:54:58,079
that part

1475
00:54:58,079 --> 00:54:59,760
but if it is encrypted it really get

1476
00:54:59,760 --> 00:55:01,359
tough to uh

1477
00:55:01,359 --> 00:55:04,000
do stuff

1478
00:55:05,359 --> 00:55:07,839
uh so i just had one small comment as

1479
00:55:07,839 --> 00:55:08,400
well not

1480
00:55:08,400 --> 00:55:10,240
not so much a question but a comment uh

1481
00:55:10,240 --> 00:55:13,200
you were talking about input sanitation

1482
00:55:13,200 --> 00:55:16,559
or input sanitization maybe uh um

1483
00:55:16,559 --> 00:55:18,400
when i've been reading about this before

1484
00:55:18,400 --> 00:55:20,960
i've seen a point that might be helpful

1485
00:55:20,960 --> 00:55:22,880
but sometimes it might be useful to

1486
00:55:22,880 --> 00:55:24,559
think of it as rather output

1487
00:55:24,559 --> 00:55:25,680
sanitization

1488
00:55:25,680 --> 00:55:28,160
so when you get improv input from the

1489
00:55:28,160 --> 00:55:29,200
outside

1490
00:55:29,200 --> 00:55:31,680
the network for example uh where you

1491
00:55:31,680 --> 00:55:34,400
actually output that to other things

1492
00:55:34,400 --> 00:55:36,720
like for example the system call and

1493
00:55:36,720 --> 00:55:37,760
things like this or

1494
00:55:37,760 --> 00:55:39,680
sql queries or something like this where

1495
00:55:39,680 --> 00:55:41,040
the

1496
00:55:41,040 --> 00:55:43,119
sanitization is very much dependent on

1497
00:55:43,119 --> 00:55:44,240
where you send it

1498
00:55:44,240 --> 00:55:48,160
if it might be useful or attackable

1499
00:55:48,160 --> 00:55:51,200
i assume the question says uh

1500
00:55:51,200 --> 00:55:52,720
like i talked about the input

1501
00:55:52,720 --> 00:55:55,680
sanitization and how about the output

1502
00:55:55,680 --> 00:55:57,280
yeah there's just a small comment that

1503
00:55:57,280 --> 00:55:59,200
sometimes it might be helpful to think

1504
00:55:59,200 --> 00:56:01,280
in terms more of output sanitization

1505
00:56:01,280 --> 00:56:03,520
rather than inputs

1506
00:56:03,520 --> 00:56:06,559
not a question but more comments yeah

1507
00:56:06,559 --> 00:56:09,200
that could be again uh i think that that

1508
00:56:09,200 --> 00:56:09,680
could be

1509
00:56:09,680 --> 00:56:13,040
other way round so if so before passing

1510
00:56:13,040 --> 00:56:16,880
whatever we are taking from the uh

1511
00:56:16,880 --> 00:56:18,720
whatever we are taking uh taking from

1512
00:56:18,720 --> 00:56:20,720
the input we can further

1513
00:56:20,720 --> 00:56:23,920
uh uh we can do it either side before

1514
00:56:23,920 --> 00:56:24,319
taking

1515
00:56:24,319 --> 00:56:26,000
accepting the input or after accepting

1516
00:56:26,000 --> 00:56:27,839
the input from the user

1517
00:56:27,839 --> 00:56:29,920
anything before passing through any

1518
00:56:29,920 --> 00:56:31,760
critical functions like system we should

1519
00:56:31,760 --> 00:56:33,920
uh sanitize it it could be on either

1520
00:56:33,920 --> 00:56:35,040
side

1521
00:56:35,040 --> 00:56:38,640
so we can go with lab sure so

1522
00:56:38,640 --> 00:56:42,160
yeah so i hope everyone is set up with

1523
00:56:42,160 --> 00:56:44,079
the vm

1524
00:56:44,079 --> 00:56:46,559
i'll just uh share my vm screen over

1525
00:56:46,559 --> 00:56:50,319
here so the first lab would be

1526
00:56:50,640 --> 00:56:53,839
so first lab would be to identify

1527
00:56:53,839 --> 00:56:56,160
the firmware like you will be given in

1528
00:56:56,160 --> 00:56:57,440
lab one you will be given

1529
00:56:57,440 --> 00:57:00,079
the binary and we have to extract that

1530
00:57:00,079 --> 00:57:00,640
binary

1531
00:57:00,640 --> 00:57:02,880
we need to look into the file system and

1532
00:57:02,880 --> 00:57:03,920
we have to find

1533
00:57:03,920 --> 00:57:06,640
the telnet credentials inside it so i'll

1534
00:57:06,640 --> 00:57:07,440
just

1535
00:57:07,440 --> 00:57:12,960
share my vm

1536
00:57:12,960 --> 00:57:16,880
yeah i hope you all can see my

1537
00:57:16,880 --> 00:57:19,680
vm so

1538
00:57:21,760 --> 00:57:25,440
so inside this folder you have

1539
00:57:25,440 --> 00:57:27,839
lab

1540
00:57:31,040 --> 00:57:34,079
you go lab and we'll go with this lab

1541
00:57:34,079 --> 00:57:36,480
first

1542
00:57:37,520 --> 00:57:40,000
so this is the binary file which we have

1543
00:57:40,000 --> 00:57:41,359
from lab1

1544
00:57:41,359 --> 00:57:44,960
so our task is to uh extract this binary

1545
00:57:44,960 --> 00:57:45,599
first

1546
00:57:45,599 --> 00:57:50,319
so before before running any uh

1547
00:57:50,319 --> 00:57:52,319
to get the information you can either do

1548
00:57:52,319 --> 00:57:53,440
any hexdum

1549
00:57:53,440 --> 00:57:56,960
or random strings to get some data

1550
00:57:56,960 --> 00:57:59,200
you can run file command if you get

1551
00:57:59,200 --> 00:58:01,440
something

1552
00:58:01,440 --> 00:58:03,680
nothing much you can check with bin work

1553
00:58:03,680 --> 00:58:05,599
that i was talking about

1554
00:58:05,599 --> 00:58:09,280
so if you do just bin work and data

1555
00:58:09,280 --> 00:58:12,960
file name so you get

1556
00:58:12,960 --> 00:58:14,880
see something like you get somewhat some

1557
00:58:14,880 --> 00:58:16,000
squash of this file is

1558
00:58:16,000 --> 00:58:18,240
present over there so there is something

1559
00:58:18,240 --> 00:58:19,280
inside it so

1560
00:58:19,280 --> 00:58:21,440
the entropy that i was talking about you

1561
00:58:21,440 --> 00:58:23,359
just do pinball

1562
00:58:23,359 --> 00:58:27,359
dash capital e and lab

1563
00:58:27,359 --> 00:58:29,599
perform their name so get some graph

1564
00:58:29,599 --> 00:58:31,119
like this

1565
00:58:31,119 --> 00:58:35,280
so there is uh you see here there is

1566
00:58:35,280 --> 00:58:38,319
a spike here the the

1567
00:58:38,319 --> 00:58:39,599
everything is high but there is

1568
00:58:39,599 --> 00:58:42,720
something which has the low entropy

1569
00:58:42,720 --> 00:58:45,040
if i expand this thing so this is which

1570
00:58:45,040 --> 00:58:46,480
is having so it values

1571
00:58:46,480 --> 00:58:49,119
varies from 0 to 1 so 0 means it is less

1572
00:58:49,119 --> 00:58:50,079
random

1573
00:58:50,079 --> 00:58:52,079
one means more random it means this part

1574
00:58:52,079 --> 00:58:53,599
are encrypted or compressed

1575
00:58:53,599 --> 00:58:55,760
but this thing is accessible it means

1576
00:58:55,760 --> 00:58:56,799
even a

1577
00:58:56,799 --> 00:58:59,280
part is accessible it means we can file

1578
00:58:59,280 --> 00:59:00,240
at least

1579
00:59:00,240 --> 00:59:04,720
some file system inside it

1580
00:59:04,720 --> 00:59:07,839
so we'll try to extract this file using

1581
00:59:07,839 --> 00:59:09,119
been walk

1582
00:59:09,119 --> 00:59:14,720
been work dash small e and the file name

1583
00:59:16,319 --> 00:59:18,960
so if you look you will see some

1584
00:59:18,960 --> 00:59:22,000
directory inside it

1585
00:59:23,760 --> 00:59:26,880
oh just

1586
00:59:28,319 --> 00:59:31,200
so uh

1587
00:59:31,520 --> 00:59:35,599
if anyone who is able to

1588
00:59:36,000 --> 00:59:39,359
uh reach please uh like who has

1589
00:59:39,359 --> 00:59:41,440
problem please mention in the chat who

1590
00:59:41,440 --> 00:59:44,960
has not extracted the layer

1591
00:59:45,119 --> 00:59:48,400
so if you are

1592
00:59:48,400 --> 00:59:51,760
successful in extracting

1593
00:59:52,319 --> 00:59:55,359
if you look inside it you will see

1594
00:59:55,359 --> 00:59:57,760
the one of the five systems like we have

1595
00:59:57,760 --> 00:59:59,280
different file systems any linux

1596
00:59:59,280 --> 01:00:01,200
firmware it could be gffs

1597
01:00:01,200 --> 01:00:03,599
squareships so we have this squareship

1598
01:00:03,599 --> 01:00:05,119
as filesystem

1599
01:00:05,119 --> 01:00:09,359
we can go inside this

1600
01:00:09,359 --> 01:00:14,000
file system and you can see the whole

1601
01:00:17,200 --> 01:00:20,079
you can see this all the linux file

1602
01:00:20,079 --> 01:00:22,640
system that we generally see in our

1603
01:00:22,640 --> 01:00:25,040
linux machine also so this file system

1604
01:00:25,040 --> 01:00:26,240
is from inside

1605
01:00:26,240 --> 01:00:29,520
the the device of which the firmware is

1606
01:00:29,520 --> 01:00:32,559
so now once we are successful in

1607
01:00:32,559 --> 01:00:34,960
extracting the firmware so for

1608
01:00:34,960 --> 01:00:38,319
extracting you have to keep

1609
01:00:38,559 --> 01:00:42,000
ma that's a small e

1610
01:00:46,880 --> 01:00:48,960
extract this file system so once we are

1611
01:00:48,960 --> 01:00:51,040
successfully extracting the file system

1612
01:00:51,040 --> 01:00:53,680
now the things come what could be the

1613
01:00:53,680 --> 01:00:56,079
architecture or

1614
01:00:56,079 --> 01:00:58,319
what that so so the some of the

1615
01:00:58,319 --> 01:00:59,760
important binaries

1616
01:00:59,760 --> 01:01:02,319
we generally find in bin directory we

1617
01:01:02,319 --> 01:01:04,079
can directly do

1618
01:01:04,079 --> 01:01:08,480
ls dot slash bin

1619
01:01:09,680 --> 01:01:12,880
and you find this binary so if we can do

1620
01:01:12,880 --> 01:01:15,920
file command on any of this binary

1621
01:01:15,920 --> 01:01:19,040
let's do on busy box

1622
01:01:19,040 --> 01:01:21,599
and it gives you what architecture it is

1623
01:01:21,599 --> 01:01:22,480
having

1624
01:01:22,480 --> 01:01:26,319
so it is having mips architecture

1625
01:01:26,319 --> 01:01:29,680
so now our task is uh we have

1626
01:01:29,680 --> 01:01:32,960
extracted we know its architecture is

1627
01:01:32,960 --> 01:01:34,319
using maps

1628
01:01:34,319 --> 01:01:36,640
then our task is to find telnet

1629
01:01:36,640 --> 01:01:38,559
credentials inside it

1630
01:01:38,559 --> 01:01:42,480
so if anyone uh like after extraction it

1631
01:01:42,480 --> 01:01:43,040
becomes

1632
01:01:43,040 --> 01:01:47,359
a bit easy so if anyone

1633
01:01:47,359 --> 01:01:50,319
is able to find this credential please

1634
01:01:50,319 --> 01:01:51,599
do post in the chat

1635
01:01:51,599 --> 01:01:54,079
but i'll continue here so to find since

1636
01:01:54,079 --> 01:01:54,880
we know

1637
01:01:54,880 --> 01:01:57,039
since here we have been given the option

1638
01:01:57,039 --> 01:01:58,400
i have told you that we have to find the

1639
01:01:58,400 --> 01:02:00,720
telnet credential it's get much easier

1640
01:02:00,720 --> 01:02:02,640
but in some cases we don't know what do

1641
01:02:02,640 --> 01:02:03,920
we what credentials do

1642
01:02:03,920 --> 01:02:06,000
we are looking for what service so in

1643
01:02:06,000 --> 01:02:08,079
that case you can either

1644
01:02:08,079 --> 01:02:11,119
do grep on many things or if you are

1645
01:02:11,119 --> 01:02:12,640
able to run the device

1646
01:02:12,640 --> 01:02:14,960
and you can scan the network then in the

1647
01:02:14,960 --> 01:02:17,520
network scanning also you can check what

1648
01:02:17,520 --> 01:02:20,880
services it is running or so it's

1649
01:02:20,880 --> 01:02:24,799
let's just to grep on the file system

1650
01:02:25,039 --> 01:02:28,400
we'll check for telnet

1651
01:02:32,240 --> 01:02:35,520
so uh coming to telnet we have find

1652
01:02:35,520 --> 01:02:36,880
these sources

1653
01:02:36,880 --> 01:02:39,839
so this script these are this this is

1654
01:02:39,839 --> 01:02:41,680
the script file that that is having that

1655
01:02:41,680 --> 01:02:43,440
tell it related services

1656
01:02:43,440 --> 01:02:49,839
so we can directly go to this file

1657
01:02:55,839 --> 01:02:59,280
and then so this is the script that is

1658
01:02:59,280 --> 01:03:00,160
responsible

1659
01:03:00,160 --> 01:03:03,119
for so init zero dot d as we know like

1660
01:03:03,119 --> 01:03:04,400
most of the startup scripts

1661
01:03:04,400 --> 01:03:07,359
file that the scripts that run into in

1662
01:03:07,359 --> 01:03:09,280
the during the start are inside this

1663
01:03:09,280 --> 01:03:12,799
so it is having this script file

1664
01:03:12,799 --> 01:03:15,440
now i think you all can identify what

1665
01:03:15,440 --> 01:03:19,359
should be the credential for telnet

1666
01:03:21,760 --> 01:03:25,280
let me check the chat if anyone

1667
01:03:28,839 --> 01:03:31,839
identified

1668
01:03:34,559 --> 01:03:38,640
uh squash gives me command not found uh

1669
01:03:38,640 --> 01:03:40,480
well for what purpose you are using

1670
01:03:40,480 --> 01:03:42,079
squash

1671
01:03:42,079 --> 01:03:45,839
yes justin is right

1672
01:03:45,839 --> 01:03:50,319
so uh if you if you would have extracted

1673
01:03:50,319 --> 01:03:54,160
yes so if you would have extracted using

1674
01:03:54,160 --> 01:03:54,960
bingo

1675
01:03:54,960 --> 01:03:58,559
you you you don't need uh

1676
01:03:58,559 --> 01:04:01,200
uh like you already get this squash file

1677
01:04:01,200 --> 01:04:02,799
system that directory so you can

1678
01:04:02,799 --> 01:04:04,559
directly get into it otherwise

1679
01:04:04,559 --> 01:04:06,400
if you want to extract it then you have

1680
01:04:06,400 --> 01:04:07,839
that one square shift s

1681
01:04:07,839 --> 01:04:09,200
but if you do through window i don't

1682
01:04:09,200 --> 01:04:10,799
think you didn't you need a square

1683
01:04:10,799 --> 01:04:12,319
shipper's thing

1684
01:04:12,319 --> 01:04:14,640
so coming to this you can see as most of

1685
01:04:14,640 --> 01:04:16,160
you have already found it

1686
01:04:16,160 --> 01:04:18,079
so if you check inside it you see

1687
01:04:18,079 --> 01:04:20,720
something login and then dash you

1688
01:04:20,720 --> 01:04:23,039
this is alpha network it means your

1689
01:04:23,039 --> 01:04:24,799
username is alpha network

1690
01:04:24,799 --> 01:04:26,720
and it means colon means it should be

1691
01:04:26,720 --> 01:04:29,280
password and this is dollar the variable

1692
01:04:29,280 --> 01:04:31,599
so we can check what this variable

1693
01:04:31,599 --> 01:04:33,039
correspond to

1694
01:04:33,039 --> 01:04:36,319
this variable correspond to this file

1695
01:04:36,319 --> 01:04:39,119
so we can go and check what's inside

1696
01:04:39,119 --> 01:04:41,839
this file

1697
01:04:44,720 --> 01:04:48,640
oh sorry it should be dot

1698
01:04:50,079 --> 01:04:53,520
yeah so here you got the password so uh

1699
01:04:53,520 --> 01:04:54,000
this

1700
01:04:54,000 --> 01:04:57,280
is how uh things are so if this services

1701
01:04:57,280 --> 01:05:00,960
are running and you uh and we

1702
01:05:00,960 --> 01:05:03,520
we and if you we are able to extract the

1703
01:05:03,520 --> 01:05:05,359
binary and we find such

1704
01:05:05,359 --> 01:05:08,559
hard-coded credentials inside it so they

1705
01:05:08,559 --> 01:05:10,400
can be now used for in

1706
01:05:10,400 --> 01:05:15,200
to take the control at from the remote

1707
01:05:20,839 --> 01:05:23,839
level

1708
01:05:24,079 --> 01:05:26,559
can we get written sure after this lab

1709
01:05:26,559 --> 01:05:27,599
uh during

1710
01:05:27,599 --> 01:05:29,839
by sharing the slide what i'll do in the

1711
01:05:29,839 --> 01:05:30,720
slides i'll

1712
01:05:30,720 --> 01:05:32,880
write step by step what i did in the lab

1713
01:05:32,880 --> 01:05:34,480
so that could be more easier for

1714
01:05:34,480 --> 01:05:36,559
everyone to maybe flatter you wanna try

1715
01:05:36,559 --> 01:05:37,599
on yourself

1716
01:05:37,599 --> 01:05:51,839
with yourself

1717
01:06:00,720 --> 01:06:02,960
what's the best way to hide this okay

1718
01:06:02,960 --> 01:06:04,000
okay so uh

1719
01:06:04,000 --> 01:06:07,440
best this is always uh don't store it

1720
01:06:07,440 --> 01:06:08,640
hard coded like

1721
01:06:08,640 --> 01:06:11,280
what's the purpose of storing like or in

1722
01:06:11,280 --> 01:06:12,240
fact it is so

1723
01:06:12,240 --> 01:06:15,359
simple plain text thing so

1724
01:06:15,359 --> 01:06:17,200
it's it's never recommended in the

1725
01:06:17,200 --> 01:06:18,720
binary that you

1726
01:06:18,720 --> 01:06:20,240
though you are you are developing your

1727
01:06:20,240 --> 01:06:21,760
application is never recommended to

1728
01:06:21,760 --> 01:06:24,000
store anything in the plain text

1729
01:06:24,000 --> 01:06:26,160
you either keep it encrypted and then

1730
01:06:26,160 --> 01:06:27,280
the encryption key

1731
01:06:27,280 --> 01:06:30,799
is is stored in some kind of more uh

1732
01:06:30,799 --> 01:06:34,480
like trusted trusted platform modules

1733
01:06:34,480 --> 01:06:36,720
that could keep your key secret or

1734
01:06:36,720 --> 01:06:37,839
implementing uh

1735
01:06:37,839 --> 01:06:40,160
trust zones that can keep your things

1736
01:06:40,160 --> 01:06:41,920
secret

1737
01:06:41,920 --> 01:06:45,440
all right so we can move on to our next

1738
01:06:45,440 --> 01:06:47,839
lab

1739
01:06:55,119 --> 01:07:00,960
just again i'll share my

1740
01:07:00,960 --> 01:07:04,400
yeah so um in the next lab

1741
01:07:04,400 --> 01:07:06,400
lengths of firmware modification and

1742
01:07:06,400 --> 01:07:07,599
re-packing so

1743
01:07:07,599 --> 01:07:10,000
in that case so as i have already told

1744
01:07:10,000 --> 01:07:10,799
you that

1745
01:07:10,799 --> 01:07:13,039
if if the things like proper signature

1746
01:07:13,039 --> 01:07:15,039
check or secure boot is not implemented

1747
01:07:15,039 --> 01:07:16,240
it is possible

1748
01:07:16,240 --> 01:07:18,559
that we can extract the firmware we can

1749
01:07:18,559 --> 01:07:19,520
do the changes

1750
01:07:19,520 --> 01:07:22,640
and flash back the malicious firmware

1751
01:07:22,640 --> 01:07:25,599
so we'll do this but for flashing back

1752
01:07:25,599 --> 01:07:27,680
the malicious firmware we need to know

1753
01:07:27,680 --> 01:07:30,000
how to repack that extracted firmware in

1754
01:07:30,000 --> 01:07:30,480
the

1755
01:07:30,480 --> 01:07:33,359
in the binary back into the binary right

1756
01:07:33,359 --> 01:07:33,760
so

1757
01:07:33,760 --> 01:07:36,000
uh

1758
01:07:38,640 --> 01:07:42,000
yeah just so coming to

1759
01:07:42,000 --> 01:07:44,880
our lab

1760
01:07:46,400 --> 01:07:49,359
lab2 folder

1761
01:07:53,599 --> 01:07:56,480
here is the binary and our task is that

1762
01:07:56,480 --> 01:07:58,480
we need to extract the binary that i

1763
01:07:58,480 --> 01:08:00,400
think now you can do it yourself for

1764
01:08:00,400 --> 01:08:02,640
taking help from the previous lab after

1765
01:08:02,640 --> 01:08:04,799
extracting the binary

1766
01:08:04,799 --> 01:08:07,760
you can do changes anywhere you want so

1767
01:08:07,760 --> 01:08:10,079
some of the files like password files or

1768
01:08:10,079 --> 01:08:12,160
shadow files that contains the

1769
01:08:12,160 --> 01:08:15,680
file you can do the changes then we will

1770
01:08:15,680 --> 01:08:18,479
make that binary to pack back in this

1771
01:08:18,479 --> 01:08:19,520
dot bin file

1772
01:08:19,520 --> 01:08:21,679
because when we flash the binary into

1773
01:08:21,679 --> 01:08:23,120
any hardware we need

1774
01:08:23,120 --> 01:08:25,759
binary dot pin we cannot flash the

1775
01:08:25,759 --> 01:08:27,120
directory inside it we need

1776
01:08:27,120 --> 01:08:30,799
the binary file so we'll

1777
01:08:30,799 --> 01:08:38,000
simply extract it

1778
01:08:38,000 --> 01:08:41,839
unless we'll go back

1779
01:08:42,880 --> 01:08:47,439
so again it has having this specific

1780
01:08:47,439 --> 01:08:50,000
and then we can go into any file to

1781
01:08:50,000 --> 01:08:50,640
perform

1782
01:08:50,640 --> 01:08:52,479
to do any changes you want it could be

1783
01:08:52,479 --> 01:08:54,399
in any configuration

1784
01:08:54,399 --> 01:08:58,319
so let me do in the password file

1785
01:08:58,319 --> 01:09:03,279
so cat dot slash etc

1786
01:09:03,359 --> 01:09:06,319
so there are shadow files that's having

1787
01:09:06,319 --> 01:09:08,640
that keeps the password so i'll just do

1788
01:09:08,640 --> 01:09:12,560
shadow so it is having this thing

1789
01:09:12,560 --> 01:09:15,600
so what we can do we can just do any

1790
01:09:15,600 --> 01:09:18,560
random changes so let me do

1791
01:09:18,560 --> 01:09:23,198
sudo vi so i will be doing changes here

1792
01:09:23,198 --> 01:09:27,120
inside shadow file in the etc

1793
01:09:32,319 --> 01:09:35,839
so let me add anything in the start

1794
01:09:35,839 --> 01:09:39,600
let's say zzzz

1795
01:09:39,600 --> 01:09:41,839
so i have just added this random it's a

1796
01:09:41,839 --> 01:09:43,920
push thing inside this password

1797
01:09:43,920 --> 01:09:46,960
we'll just save this

1798
01:09:47,520 --> 01:09:51,679
all right so now if you see

1799
01:09:53,279 --> 01:09:55,520
so now you see this is what we have

1800
01:09:55,520 --> 01:09:57,199
changed the password thing

1801
01:09:57,199 --> 01:10:00,159
we have changed now our next target is

1802
01:10:00,159 --> 01:10:01,520
though we have changed what to do with

1803
01:10:01,520 --> 01:10:02,320
this thing

1804
01:10:02,320 --> 01:10:05,600
we need to repack it and then uh

1805
01:10:05,600 --> 01:10:10,000
and then do the change so for this thing

1806
01:10:12,159 --> 01:10:14,640
so for this thing we use the tool called

1807
01:10:14,640 --> 01:10:15,280
fmk

1808
01:10:15,280 --> 01:10:20,480
fmk so instead of been walk

1809
01:10:29,679 --> 01:10:31,920
so instead of so wherever helps that's

1810
01:10:31,920 --> 01:10:33,679
an instruction giving all this form

1811
01:10:33,679 --> 01:10:36,080
file system so what happens when we

1812
01:10:36,080 --> 01:10:38,080
there is a tool called fmk firmware mod

1813
01:10:38,080 --> 01:10:38,640
kit

1814
01:10:38,640 --> 01:10:41,040
so it has uh that we have already

1815
01:10:41,040 --> 01:10:42,800
installed in this virtual machine

1816
01:10:42,800 --> 01:10:46,960
so you can directly run a command called

1817
01:10:46,960 --> 01:10:49,600
extract

1818
01:10:51,280 --> 01:10:54,480
extract firmware dot sh so that

1819
01:10:54,480 --> 01:10:57,520
bin work thing did we just the revision

1820
01:10:57,520 --> 01:10:59,199
thing that you extracted and got

1821
01:10:59,199 --> 01:11:01,440
the thing but after doing thing how do

1822
01:11:01,440 --> 01:11:03,120
we park we don't have

1823
01:11:03,120 --> 01:11:05,120
like we don't see any way to repack

1824
01:11:05,120 --> 01:11:06,640
everything we have those

1825
01:11:06,640 --> 01:11:09,199
this directory but we cannot flash back

1826
01:11:09,199 --> 01:11:10,159
this directory

1827
01:11:10,159 --> 01:11:13,040
so for that we have this firmworker so

1828
01:11:13,040 --> 01:11:14,080
instead of

1829
01:11:14,080 --> 01:11:17,120
bin work for this case we use fmk who's

1830
01:11:17,120 --> 01:11:20,000
which is having this extract firmware.sh

1831
01:11:20,000 --> 01:11:21,520
and the binary name

1832
01:11:21,520 --> 01:11:24,080
not a direct binary name so if you do

1833
01:11:24,080 --> 01:11:24,800
this

1834
01:11:24,800 --> 01:11:27,920
it to the unpacking in a folder called

1835
01:11:27,920 --> 01:11:40,480
fmk let's take few seconds

1836
01:11:40,480 --> 01:11:43,520
so uh in shadow file i just did anything

1837
01:11:43,520 --> 01:11:44,400
so you can change

1838
01:11:44,400 --> 01:11:47,199
any file for your reference so the main

1839
01:11:47,199 --> 01:11:49,679
target of doing this lab is to making us

1840
01:11:49,679 --> 01:11:50,640
understand

1841
01:11:50,640 --> 01:11:54,000
how we can modify the binary and repack

1842
01:11:54,000 --> 01:11:56,239
back so that it can be made capable to

1843
01:11:56,239 --> 01:11:57,280
flashback

1844
01:11:57,280 --> 01:12:00,000
so uh this time if you see we do not

1845
01:12:00,000 --> 01:12:01,360
need to go into this

1846
01:12:01,360 --> 01:12:04,320
file extracted by bingo we have this fmk

1847
01:12:04,320 --> 01:12:05,199
folder

1848
01:12:05,199 --> 01:12:09,040
so if you look inside it fm key

1849
01:12:09,040 --> 01:12:12,239
you have this root root fs so it's that

1850
01:12:12,239 --> 01:12:12,880
same

1851
01:12:12,880 --> 01:12:15,520
square shape as file system root file

1852
01:12:15,520 --> 01:12:17,600
system and we have the same file

1853
01:12:17,600 --> 01:12:21,760
now if you do the changes over here

1854
01:12:21,760 --> 01:12:24,800
inside this because if we do changes in

1855
01:12:24,800 --> 01:12:27,040
that there is no way to repack it so i

1856
01:12:27,040 --> 01:12:30,080
will do same changes inside this

1857
01:12:30,080 --> 01:12:33,360
sudo vi dot slash

1858
01:12:33,360 --> 01:12:37,840
htc shadow

1859
01:12:37,840 --> 01:12:40,159
so i so this is what i have changed over

1860
01:12:40,159 --> 01:12:40,960
here

1861
01:12:40,960 --> 01:12:42,640
in the bin box thing so i'll again do

1862
01:12:42,640 --> 01:12:44,960
anything

1863
01:12:48,840 --> 01:12:51,840
escape

1864
01:13:06,080 --> 01:13:09,520
so you saw this change now we can uh

1865
01:13:09,520 --> 01:13:12,080
repack this how we need to go back to

1866
01:13:12,080 --> 01:13:12,960
our

1867
01:13:12,960 --> 01:13:16,239
where is our fmk and

1868
01:13:16,239 --> 01:13:18,960
then we have like there is a command

1869
01:13:18,960 --> 01:13:19,360
called

1870
01:13:19,360 --> 01:13:21,679
build

1871
01:13:22,880 --> 01:13:26,960
build dash forward.sh

1872
01:13:26,960 --> 01:13:30,640
i hope you all got this

1873
01:13:31,440 --> 01:13:34,080
can you use bin work to go backward to

1874
01:13:34,080 --> 01:13:34,960
binary

1875
01:13:34,960 --> 01:13:38,000
uh to buy no no benwa cannot help us in

1876
01:13:38,000 --> 01:13:41,360
uh going back to

1877
01:13:41,360 --> 01:13:44,480
uh the binary form if it's not signed

1878
01:13:44,480 --> 01:13:44,880
though

1879
01:13:44,880 --> 01:13:48,960
and you do not do it correctly with one

1880
01:13:50,400 --> 01:13:53,920
so uh so we use this fmk i hope everyone

1881
01:13:53,920 --> 01:13:54,320
got

1882
01:13:54,320 --> 01:13:57,679
these commands no issues if anyone is

1883
01:13:57,679 --> 01:13:59,199
having issues in the commands please do

1884
01:13:59,199 --> 01:14:00,000
let me know in the chat

1885
01:14:00,000 --> 01:14:03,120
so that i can put it there

1886
01:14:03,440 --> 01:14:06,080
yeah cool so now to repack this binary

1887
01:14:06,080 --> 01:14:08,400
you have to use this build firmware.sh

1888
01:14:08,400 --> 01:14:09,199
command

1889
01:14:09,199 --> 01:14:12,080
and give the part of this fmk file so it

1890
01:14:12,080 --> 01:14:13,199
is

1891
01:14:13,199 --> 01:14:17,040
dot dot slash fmk

1892
01:14:18,560 --> 01:14:22,560
so it's repacking it so now if you check

1893
01:14:22,560 --> 01:14:26,560
you got a new firmware binary new dash

1894
01:14:26,560 --> 01:14:29,840
firmware dot bin

1895
01:14:32,000 --> 01:14:34,480
so now uh if you want to cross check

1896
01:14:34,480 --> 01:14:36,080
that whether the change that you had

1897
01:14:36,080 --> 01:14:36,719
done

1898
01:14:36,719 --> 01:14:39,440
is properly implemented in this binary

1899
01:14:39,440 --> 01:14:40,159
or not

1900
01:14:40,159 --> 01:14:42,320
you can just do it by extracting this

1901
01:14:42,320 --> 01:14:43,199
new form there

1902
01:14:43,199 --> 01:14:45,679
and you can cross check so let's do it

1903
01:14:45,679 --> 01:14:46,320
now for

1904
01:14:46,320 --> 01:14:48,880
just extracting purpose we can use any

1905
01:14:48,880 --> 01:14:51,120
tool

1906
01:14:52,000 --> 01:14:54,960
repack command was build firmware.sh and

1907
01:14:54,960 --> 01:14:57,440
the file name

1908
01:14:57,440 --> 01:15:00,960
am i going fast yeah i'll take a bit

1909
01:15:00,960 --> 01:15:03,280
slower

1910
01:15:06,480 --> 01:15:11,520
yeah thanks thanks thanks for the review

1911
01:15:11,520 --> 01:15:15,120
i got this error new firmware

1912
01:15:15,120 --> 01:15:18,159
uh i hope you are giving uh ahmed i hope

1913
01:15:18,159 --> 01:15:19,840
you are giving right

1914
01:15:19,840 --> 01:15:23,440
path of fmk so for example if you are

1915
01:15:23,440 --> 01:15:27,520
doing from full build command it's like

1916
01:15:27,520 --> 01:15:32,719
build firmware

1917
01:15:33,360 --> 01:15:38,159
dot sh and the file

1918
01:15:50,840 --> 01:15:53,840
whatever

1919
01:15:53,920 --> 01:15:57,199
so i'll do band

1920
01:16:00,560 --> 01:16:03,679
firmware dot sh and

1921
01:16:03,679 --> 01:16:07,840
path to fmk

1922
01:16:15,840 --> 01:16:21,840
i just hope

1923
01:16:31,040 --> 01:16:34,480
uh no since uh

1924
01:16:34,480 --> 01:16:37,440
since we are

1925
01:16:40,159 --> 01:16:42,480
if you are trying flashing i it might

1926
01:16:42,480 --> 01:16:44,400
fail and you would have to recover the

1927
01:16:44,400 --> 01:16:45,600
device somehow break

1928
01:16:45,600 --> 01:16:48,640
yes so uh when in this case this is

1929
01:16:48,640 --> 01:16:49,199
helpful

1930
01:16:49,199 --> 01:16:52,480
so for example uh if you go to this

1931
01:16:52,480 --> 01:16:56,000
file system you have

1932
01:16:56,000 --> 01:17:00,880
uh let's say your let's go to fmk

1933
01:17:00,880 --> 01:17:03,600
so this uh we have tested on some of the

1934
01:17:03,600 --> 01:17:04,800
devices

1935
01:17:04,800 --> 01:17:06,320
where the secure would proper

1936
01:17:06,320 --> 01:17:08,400
implementation was not met

1937
01:17:08,400 --> 01:17:12,880
and in that case uh what happened

1938
01:17:12,880 --> 01:17:16,239
uh in that case what happens uh

1939
01:17:16,239 --> 01:17:19,280
you have to do just one bit change so

1940
01:17:19,280 --> 01:17:22,480
i'll let's say telnet is disabled using

1941
01:17:22,480 --> 01:17:25,120
telnet and it is zero it's zero uh

1942
01:17:25,120 --> 01:17:27,120
corresponding to it like it's disabled

1943
01:17:27,120 --> 01:17:30,159
so what we do we just turn that zero

1944
01:17:30,159 --> 01:17:33,199
into one and then repack that so in that

1945
01:17:33,199 --> 01:17:34,719
case it does not uh

1946
01:17:34,719 --> 01:17:37,760
uh like it accepts the flashing properly

1947
01:17:37,760 --> 01:17:40,880
so this we have found in most of the

1948
01:17:40,880 --> 01:17:43,760
uh like uh devices in which we were able

1949
01:17:43,760 --> 01:17:47,280
to patch this thing with this thing

1950
01:17:55,360 --> 01:18:00,559
so if you look at let me do anything

1951
01:18:04,159 --> 01:18:06,800
so uh regarding the compression it is

1952
01:18:06,800 --> 01:18:07,520
having uh

1953
01:18:07,520 --> 01:18:10,560
like a huffman compression it uses

1954
01:18:10,560 --> 01:18:27,840
so if you are getting error

1955
01:18:40,159 --> 01:18:42,239
so it is placing the new firmware inside

1956
01:18:42,239 --> 01:18:44,400
fmk because we are currently in the fmk

1957
01:18:44,400 --> 01:18:45,440
directory

1958
01:18:45,440 --> 01:18:48,560
it so let's see yeah so uh so just let

1959
01:18:48,560 --> 01:18:50,239
me take it a bit slower i'll

1960
01:18:50,239 --> 01:18:52,080
i'll take this again i'll take this

1961
01:18:52,080 --> 01:18:54,080
again so that it gets more clear

1962
01:18:54,080 --> 01:18:56,320
so uh let me know if i have to repeat

1963
01:18:56,320 --> 01:18:57,440
lab one

1964
01:18:57,440 --> 01:19:00,159
or lab one is clear to everybody the lab

1965
01:19:00,159 --> 01:19:02,799
one bidder

1966
01:19:02,960 --> 01:19:09,840
yeah love one is good all right so

1967
01:19:11,440 --> 01:19:13,600
uh let me take lap two again so it

1968
01:19:13,600 --> 01:19:15,280
should be a bit more clear

1969
01:19:15,280 --> 01:19:23,840
so i'll remove everything from here

1970
01:19:28,400 --> 01:19:30,880
so we have this directory all right so

1971
01:19:30,880 --> 01:19:31,840
we had already

1972
01:19:31,840 --> 01:19:34,719
seen that uh from when work we though we

1973
01:19:34,719 --> 01:19:36,080
were able to do the changes

1974
01:19:36,080 --> 01:19:39,840
but uh packing it back was different

1975
01:19:39,840 --> 01:19:42,640
uh was difficult so for that we use this

1976
01:19:42,640 --> 01:19:43,600
tool

1977
01:19:43,600 --> 01:19:51,840
uh fmk

1978
01:19:52,080 --> 01:19:56,480
so i'll just to

1979
01:19:56,880 --> 01:20:01,360
will do extract this using firmworker

1980
01:20:01,360 --> 01:20:05,040
extract firmware dot sh

1981
01:20:05,040 --> 01:20:09,040
and the file name binary name

1982
01:20:09,040 --> 01:20:19,840
i'll put this in a chat

1983
01:20:30,840 --> 01:20:33,840
oops

1984
01:20:39,920 --> 01:20:42,719
so first you have to extract using the

1985
01:20:42,719 --> 01:20:44,400
formworker tool

1986
01:20:44,400 --> 01:20:47,280
extract firmware dot sh and finally so

1987
01:20:47,280 --> 01:20:49,600
the first with the very first step to

1988
01:20:49,600 --> 01:20:52,719
repack back with the fmk tool we need to

1989
01:20:52,719 --> 01:20:53,360
first

1990
01:20:53,360 --> 01:20:56,159
extract with the fmk tool all right so

1991
01:20:56,159 --> 01:20:58,320
you have to use this command and use

1992
01:20:58,320 --> 01:21:02,000
fmk tool to extract it i'll just extract

1993
01:21:02,000 --> 01:21:04,080
it

1994
01:21:11,360 --> 01:21:15,839
so it take few seconds

1995
01:21:17,360 --> 01:21:19,840
yes yes i can use been walk to extract

1996
01:21:19,840 --> 01:21:20,480
but the

1997
01:21:20,480 --> 01:21:23,760
problem is our task is that we need to

1998
01:21:23,760 --> 01:21:27,280
uh repack back so if i extract with been

1999
01:21:27,280 --> 01:21:28,320
work then

2000
01:21:28,320 --> 01:21:30,960
the fmk is not in that the the file

2001
01:21:30,960 --> 01:21:32,639
system is not in that format that'll

2002
01:21:32,639 --> 01:21:33,760
repack back

2003
01:21:33,760 --> 01:21:36,880
so to repack to repack this thing we

2004
01:21:36,880 --> 01:21:37,760
need to use

2005
01:21:37,760 --> 01:21:40,159
the fmk tool to extract and repack back

2006
01:21:40,159 --> 01:21:43,839
with the fmk tool

2007
01:21:48,880 --> 01:21:51,920
all right so i hope this thing

2008
01:21:51,920 --> 01:21:55,360
there so we are now we got every i hope

2009
01:21:55,360 --> 01:21:58,400
everyone got this fmk directory we will

2010
01:21:58,400 --> 01:21:59,600
go to this

2011
01:21:59,600 --> 01:22:03,120
fmk directory and

2012
01:22:03,120 --> 01:22:05,600
you see the root fs root file system we

2013
01:22:05,600 --> 01:22:07,040
will go inside this

2014
01:22:07,040 --> 01:22:10,239
root file system and you chop

2015
01:22:10,239 --> 01:22:12,080
and you can get all this file system

2016
01:22:12,080 --> 01:22:13,920
that we had general

2017
01:22:13,920 --> 01:22:16,000
so now our task is that we want to

2018
01:22:16,000 --> 01:22:17,600
change somewhere we want to change

2019
01:22:17,600 --> 01:22:18,320
somewhere

2020
01:22:18,320 --> 01:22:22,799
so i can do like we can do change

2021
01:22:22,840 --> 01:22:25,679
anywhere so let's say i am doing this

2022
01:22:25,679 --> 01:22:27,679
time

2023
01:22:27,679 --> 01:22:31,760
so scat edc

2024
01:22:31,760 --> 01:22:34,880
let's say password file anything so you

2025
01:22:34,880 --> 01:22:36,400
have something in password looks like

2026
01:22:36,400 --> 01:22:36,719
this

2027
01:22:36,719 --> 01:22:39,360
so what am i go what am i going to do

2028
01:22:39,360 --> 01:22:40,639
i'll just

2029
01:22:40,639 --> 01:22:44,080
you know vi

2030
01:22:44,080 --> 01:22:47,120
etc password you can do change anywhere

2031
01:22:47,120 --> 01:22:47,679
so

2032
01:22:47,679 --> 01:22:49,440
it could be more applicable in some

2033
01:22:49,440 --> 01:22:50,719
cases where

2034
01:22:50,719 --> 01:22:52,639
you are doing changes in some

2035
01:22:52,639 --> 01:22:54,239
configuration files so if we

2036
01:22:54,239 --> 01:22:56,880
take time bit to reverse this file and

2037
01:22:56,880 --> 01:22:57,920
find that where

2038
01:22:57,920 --> 01:23:00,400
this telnet service is being enabled or

2039
01:23:00,400 --> 01:23:02,480
disabled so making one to zero or zero

2040
01:23:02,480 --> 01:23:04,239
to one you can make some service enable

2041
01:23:04,239 --> 01:23:05,120
or disable

2042
01:23:05,120 --> 01:23:07,760
so similarly you can if the let's say

2043
01:23:07,760 --> 01:23:09,360
some word is written that is of

2044
01:23:09,360 --> 01:23:11,199
size that is having four character we

2045
01:23:11,199 --> 01:23:12,400
can replace

2046
01:23:12,400 --> 01:23:14,480
with similar four character to make the

2047
01:23:14,480 --> 01:23:15,840
size same

2048
01:23:15,840 --> 01:23:17,760
so this changes so let's say i am doing

2049
01:23:17,760 --> 01:23:19,520
any random changes

2050
01:23:19,520 --> 01:23:24,960
again anyway so i'll just save this

2051
01:23:25,840 --> 01:23:29,440
right so uh this is if we

2052
01:23:29,440 --> 01:23:32,719
check that you get this now our task

2053
01:23:32,719 --> 01:23:36,000
is to repack it back

2054
01:23:36,000 --> 01:23:38,639
like we have extracted it we have

2055
01:23:38,639 --> 01:23:39,360
changes

2056
01:23:39,360 --> 01:23:42,080
now we want to pack it back all right so

2057
01:23:42,080 --> 01:23:43,360
what we'll do we'll go

2058
01:23:43,360 --> 01:23:46,080
back since everyone was confused why it

2059
01:23:46,080 --> 01:23:46,480
is in

2060
01:23:46,480 --> 01:23:49,199
fmk directory we will go to our lab

2061
01:23:49,199 --> 01:23:50,400
directory now we are

2062
01:23:50,400 --> 01:23:52,400
out of fmk directory all right we are

2063
01:23:52,400 --> 01:23:54,480
not into the fmk directory

2064
01:23:54,480 --> 01:23:57,840
now we will give pass the build

2065
01:23:57,840 --> 01:24:01,679
uh build time so

2066
01:24:07,760 --> 01:24:12,239
and then we'll give the path of our fmk

2067
01:24:12,480 --> 01:24:17,839
i'll also put it in the chat

2068
01:24:25,040 --> 01:24:27,519
so uh

2069
01:24:28,159 --> 01:24:33,280
so if it is where does this

2070
01:24:42,320 --> 01:24:46,080
if it is so i'll just put bill

2071
01:24:46,080 --> 01:24:49,520
dash dot

2072
01:24:49,520 --> 01:24:54,159
sh dot slash fmk

2073
01:25:02,159 --> 01:25:13,839
you do this

2074
01:25:48,239 --> 01:25:51,840
so so basically the min

2075
01:25:51,840 --> 01:25:54,400
functions uses like if it is giving size

2076
01:25:54,400 --> 01:25:56,480
related error then we use that main

2077
01:25:56,480 --> 01:25:58,799
option

2078
01:25:59,679 --> 01:26:03,199
when it it gives the size related option

2079
01:26:03,199 --> 01:26:04,400
then we use this

2080
01:26:04,400 --> 01:26:09,839
main option

2081
01:26:14,960 --> 01:26:18,880
so okay it it say it save to this thing

2082
01:26:18,880 --> 01:26:22,560
fmk dot for new firmware dot bin

2083
01:26:22,560 --> 01:26:25,760
so it it could be inside this tool to

2084
01:26:25,760 --> 01:26:26,480
say it

2085
01:26:26,480 --> 01:26:29,520
has a path to save this so if you run

2086
01:26:29,520 --> 01:26:32,800
this command build firmware dot extract

2087
01:26:32,800 --> 01:26:33,360
from

2088
01:26:33,360 --> 01:26:36,159
the fmk directory it should not give you

2089
01:26:36,159 --> 01:26:38,320
that size related error

2090
01:26:38,320 --> 01:26:39,840
it should not give you the size related

2091
01:26:39,840 --> 01:26:41,600
error but if you are running from

2092
01:26:41,600 --> 01:26:43,440
outside the fmk directory

2093
01:26:43,440 --> 01:26:47,440
then you need to give this dash min

2094
01:26:48,840 --> 01:26:51,840
option

2095
01:26:52,320 --> 01:26:56,480
so this time we have

2096
01:26:57,120 --> 01:27:02,159
i hope everybody got this new from their

2097
01:27:02,840 --> 01:27:05,840
dashboard

2098
01:27:14,320 --> 01:27:19,840
so we can now to check it

2099
01:27:20,320 --> 01:27:22,480
we can now extract and see we can use

2100
01:27:22,480 --> 01:27:33,839
any tool to extract

2101
01:27:47,760 --> 01:27:50,159
uh we had done changes in i suppose

2102
01:27:50,159 --> 01:27:51,920
password file right pass

2103
01:27:51,920 --> 01:27:55,280
wd yes so if you look uh you

2104
01:27:55,280 --> 01:27:57,520
get what the change you have done in

2105
01:27:57,520 --> 01:27:58,639
your

2106
01:27:58,639 --> 01:28:01,600
new firmware binary so this is the tool

2107
01:28:01,600 --> 01:28:02,239
that you

2108
01:28:02,239 --> 01:28:05,600
uh that helps you in uh

2109
01:28:05,600 --> 01:28:07,840
like repacking if you if you are trying

2110
01:28:07,840 --> 01:28:09,120
to repack something so

2111
01:28:09,120 --> 01:28:10,719
this is something which which which

2112
01:28:10,719 --> 01:28:15,840
helps you

2113
01:28:17,840 --> 01:28:21,120
so yeah so when the uh

2114
01:28:22,320 --> 01:28:25,840
yes again that uh some so if we keep the

2115
01:28:25,840 --> 01:28:26,320
size

2116
01:28:26,320 --> 01:28:28,560
save so it should not affect the check

2117
01:28:28,560 --> 01:28:30,159
checksum but if we

2118
01:28:30,159 --> 01:28:34,320
vary the size it may be rejected by the

2119
01:28:40,840 --> 01:28:42,320
device

2120
01:28:42,320 --> 01:28:45,040
uh since there are chat and things mixed

2121
01:28:45,040 --> 01:28:47,120
so if anyone is putting the question

2122
01:28:47,120 --> 01:28:49,120
just do one thing uh you just put

2123
01:28:49,120 --> 01:28:50,880
question and then put your question so

2124
01:28:50,880 --> 01:28:52,960
it it becomes more clear to me that

2125
01:28:52,960 --> 01:28:54,239
whether it's

2126
01:28:54,239 --> 01:28:56,080
the general chat or whether it is the

2127
01:28:56,080 --> 01:28:58,480
question

2128
01:29:00,639 --> 01:29:03,360
so uh if anyone having issue in this

2129
01:29:03,360 --> 01:29:04,159
thing

2130
01:29:04,159 --> 01:29:11,839
or or shall i proceed to our next lab

2131
01:29:19,040 --> 01:29:23,760
yeah thanks thanks for your so

2132
01:29:23,760 --> 01:29:27,920
i'll just check what's our next lab is

2133
01:29:32,880 --> 01:29:35,440
so uh even if someone face the issue

2134
01:29:35,440 --> 01:29:37,199
don't worry i'll what i'll do

2135
01:29:37,199 --> 01:29:39,360
when by sharing this slide i will also

2136
01:29:39,360 --> 01:29:40,960
share the lab steps

2137
01:29:40,960 --> 01:29:42,719
so that would be easier to you in case

2138
01:29:42,719 --> 01:29:44,880
you want to practice a bad

2139
01:29:44,880 --> 01:29:47,600
letter so now the next thing comes crack

2140
01:29:47,600 --> 01:29:48,719
the password

2141
01:29:48,719 --> 01:29:52,159
so uh we know that in the

2142
01:29:52,159 --> 01:29:54,639
linux we have that shadow files that

2143
01:29:54,639 --> 01:29:55,280
contains

2144
01:29:55,280 --> 01:29:58,960
uh des passwords

2145
01:29:58,960 --> 01:30:02,400
in etc shadow file so in this case our

2146
01:30:02,400 --> 01:30:04,080
task would be

2147
01:30:04,080 --> 01:30:06,080
identical somewhat to previous one to

2148
01:30:06,080 --> 01:30:07,760
extract the binary

2149
01:30:07,760 --> 01:30:10,800
and after extracting the binary our task

2150
01:30:10,800 --> 01:30:11,840
would be to

2151
01:30:11,840 --> 01:30:16,800
track the password or inside the

2152
01:30:18,840 --> 01:30:21,840
system

2153
01:30:38,639 --> 01:30:40,800
and to the moderators if if there are

2154
01:30:40,800 --> 01:30:43,360
any just in case any chat that is uh

2155
01:30:43,360 --> 01:30:45,040
like that is related to the present lab

2156
01:30:45,040 --> 01:30:47,199
that i am doing so please let me

2157
01:30:47,199 --> 01:30:48,960
like on the spot but if it is some

2158
01:30:48,960 --> 01:30:51,360
gender i can take on later also

2159
01:30:51,360 --> 01:30:53,600
so that if someone should not lag back

2160
01:30:53,600 --> 01:30:54,639
in the lab

2161
01:30:54,639 --> 01:31:00,159
at least so we'll go back

2162
01:31:00,639 --> 01:31:05,679
labs again and we have lab three

2163
01:31:09,199 --> 01:31:13,360
yep so we have a binary

2164
01:31:13,360 --> 01:31:15,520
i hope you all can now extract the

2165
01:31:15,520 --> 01:31:17,679
binary by yourself

2166
01:31:17,679 --> 01:31:19,920
so our task is we need to extract the

2167
01:31:19,920 --> 01:31:20,880
binary

2168
01:31:20,880 --> 01:31:24,480
we need to get the firmware and they can

2169
01:31:24,480 --> 01:31:25,199
uh

2170
01:31:25,199 --> 01:31:28,560
like this system of system 5

2171
01:31:28,560 --> 01:31:31,679
passwords are stored inside etc shadow

2172
01:31:31,679 --> 01:31:32,320
file

2173
01:31:32,320 --> 01:31:36,080
that is like uh dash encrypted

2174
01:31:36,080 --> 01:31:38,239
and for that we will be using that tool

2175
01:31:38,239 --> 01:31:41,040
john the riper

2176
01:31:43,600 --> 01:31:47,360
i'll just do been work

2177
01:31:47,520 --> 01:31:50,239
dash e

2178
01:31:53,120 --> 01:31:55,360
so someone had a significance of

2179
01:31:55,360 --> 01:31:56,719
squarespace file system

2180
01:31:56,719 --> 01:31:58,480
so there are different file systems used

2181
01:31:58,480 --> 01:32:00,400
like gffs squareship s

2182
01:32:00,400 --> 01:32:02,719
so again here it depends on the kind of

2183
01:32:02,719 --> 01:32:04,400
application that is being developed so

2184
01:32:04,400 --> 01:32:05,520
since i had

2185
01:32:05,520 --> 01:32:07,440
i was uh i didn't download different

2186
01:32:07,440 --> 01:32:09,040
different binaries i was trying to play

2187
01:32:09,040 --> 01:32:10,320
around with one binary

2188
01:32:10,320 --> 01:32:11,760
and that's why you can see one five

2189
01:32:11,760 --> 01:32:14,159
system some can have gram fs

2190
01:32:14,159 --> 01:32:16,960
some can have gfss so been work is

2191
01:32:16,960 --> 01:32:17,679
having

2192
01:32:17,679 --> 01:32:21,360
uh like plugins for everything like they

2193
01:32:21,360 --> 01:32:21,840
support

2194
01:32:21,840 --> 01:32:24,320
gffs gram files square shippers so it

2195
01:32:24,320 --> 01:32:26,239
helps you in extracting all those things

2196
01:32:26,239 --> 01:32:27,920
but for that you need to do been work

2197
01:32:27,920 --> 01:32:29,520
installation properly in your

2198
01:32:29,520 --> 01:32:32,000
machine they have reform labs then work

2199
01:32:32,000 --> 01:32:34,239
installation page where they

2200
01:32:34,239 --> 01:32:36,480
see this like mention their steps

2201
01:32:36,480 --> 01:32:40,000
clearly so we'll go through this

2202
01:32:40,000 --> 01:32:44,560
yeah same steps

2203
01:32:45,040 --> 01:32:49,679
cat ttc

2204
01:32:50,639 --> 01:32:54,639
shadow so there is this

2205
01:32:54,639 --> 01:32:57,840
something there is a root user and to

2206
01:32:57,840 --> 01:32:58,320
this

2207
01:32:58,320 --> 01:33:00,320
it's the containing password but we need

2208
01:33:00,320 --> 01:33:02,320
to like somehow crack this

2209
01:33:02,320 --> 01:33:09,679
what the possible password could be

2210
01:33:09,679 --> 01:33:12,960
so uh we have a tool uh john the riper

2211
01:33:12,960 --> 01:33:15,440
uh so you can also read more about on it

2212
01:33:15,440 --> 01:33:17,280
how does it work

2213
01:33:17,280 --> 01:33:21,600
just uh so before that

2214
01:33:21,600 --> 01:33:25,040
we want to crack past wd file

2215
01:33:25,040 --> 01:33:27,920
all right this file shadow file we want

2216
01:33:27,920 --> 01:33:29,600
to crack the password from this file

2217
01:33:29,600 --> 01:33:33,040
so let's take it out from this

2218
01:33:33,040 --> 01:33:35,360
and copy in our main directory where we

2219
01:33:35,360 --> 01:33:37,440
have stored the password list

2220
01:33:37,440 --> 01:33:39,760
so john the reaper has different ways so

2221
01:33:39,760 --> 01:33:42,639
we are using the word list method

2222
01:33:42,639 --> 01:33:44,880
so we have this stored password list

2223
01:33:44,880 --> 01:33:47,199
which we will be using during our crack

2224
01:33:47,199 --> 01:33:52,799
so let let us copy the file from etc

2225
01:33:53,199 --> 01:33:56,480
the squash fs inside

2226
01:33:56,480 --> 01:34:00,960
etc we had shadow file

2227
01:34:00,960 --> 01:34:04,800
so we will i'll copy it here

2228
01:34:04,800 --> 01:34:07,280
so you can now see password list and

2229
01:34:07,280 --> 01:34:08,239
shadow

2230
01:34:08,239 --> 01:34:11,360
so we'll just use

2231
01:34:11,360 --> 01:34:14,480
john command by our file name

2232
01:34:14,480 --> 01:34:16,800
and the word list that we want that we

2233
01:34:16,800 --> 01:34:18,960
are providing to it

2234
01:34:18,960 --> 01:34:22,960
but list equals to

2235
01:34:30,159 --> 01:34:34,400
so i'll put the command in the chat also

2236
01:34:38,080 --> 01:34:40,719
yeah john the ripper is a very uh good

2237
01:34:40,719 --> 01:34:42,400
tool that are used by the hackers to

2238
01:34:42,400 --> 01:34:44,239
crack the password it support many

2239
01:34:44,239 --> 01:34:46,719
uh no no this is not dictionary based

2240
01:34:46,719 --> 01:34:47,840
attack uh uh

2241
01:34:47,840 --> 01:34:50,960
uh they are uh uh they have uh

2242
01:34:50,960 --> 01:34:53,679
three different ways the in which they

2243
01:34:53,679 --> 01:34:54,400
do

2244
01:34:54,400 --> 01:34:56,880
uh i'm also not very in depth of like

2245
01:34:56,880 --> 01:34:58,159
how the exactly but it's not a

2246
01:34:58,159 --> 01:34:59,760
dictionary or brute force thing it's not

2247
01:34:59,760 --> 01:35:02,080
it's not dictionary

2248
01:35:02,080 --> 01:35:04,239
so you can do cat password list you will

2249
01:35:04,239 --> 01:35:05,679
get uh so cat password

2250
01:35:05,679 --> 01:35:10,000
contains general default default thing

2251
01:35:10,000 --> 01:35:13,040
uh so the password command i'll just put

2252
01:35:13,040 --> 01:35:15,520
over here

2253
01:35:15,520 --> 01:35:18,960
john shadow

2254
01:35:18,960 --> 01:35:22,320
file dash dash

2255
01:35:22,320 --> 01:35:25,920
word list equals to

2256
01:35:25,920 --> 01:35:29,040
password dot

2257
01:35:29,040 --> 01:35:31,360
list

2258
01:35:34,080 --> 01:35:36,800
yes yeah if you do without uh giving

2259
01:35:36,800 --> 01:35:39,119
this password file it will take a lot of

2260
01:35:39,119 --> 01:35:39,679
time

2261
01:35:39,679 --> 01:35:42,239
so this standard password file are also

2262
01:35:42,239 --> 01:35:42,719
present

2263
01:35:42,719 --> 01:35:46,639
online so you do there are some very

2264
01:35:46,639 --> 01:35:48,239
default thing passwords that are

2265
01:35:48,239 --> 01:35:51,519
generally present inside it

2266
01:35:53,760 --> 01:35:57,280
i hope you all so yeah

2267
01:35:57,280 --> 01:36:00,239
last what we had this so if you check

2268
01:36:00,239 --> 01:36:02,480
here

2269
01:36:07,840 --> 01:36:10,560
so if you see for root user root user

2270
01:36:10,560 --> 01:36:11,840
you have this password

2271
01:36:11,840 --> 01:36:14,239
so it was able to crack your password in

2272
01:36:14,239 --> 01:36:15,280
few seconds

2273
01:36:15,280 --> 01:36:17,920
right so this is how uh so this is

2274
01:36:17,920 --> 01:36:19,119
helpful when you

2275
01:36:19,119 --> 01:36:22,880
are let's say via hardware hardware

2276
01:36:22,880 --> 01:36:26,960
uh i got no password if you don't run as

2277
01:36:26,960 --> 01:36:39,840
sudo it won't work

2278
01:36:51,040 --> 01:36:53,920
so yes uh so if it has been uh tried one

2279
01:36:53,920 --> 01:36:56,000
time so it sometimes create a default

2280
01:36:56,000 --> 01:36:59,360
file inside this uh

2281
01:37:02,719 --> 01:37:06,800
let's start slash

2282
01:37:10,960 --> 01:37:13,600
so there is they are default port files

2283
01:37:13,600 --> 01:37:15,040
so it does not work if

2284
01:37:15,040 --> 01:37:17,440
like if these are so before if we are

2285
01:37:17,440 --> 01:37:19,440
getting error try to remove this

2286
01:37:19,440 --> 01:37:21,600
with these files from here and then

2287
01:37:21,600 --> 01:37:22,880
that's

2288
01:37:22,880 --> 01:37:24,639
then probably uh this should run so you

2289
01:37:24,639 --> 01:37:26,639
should get something like this

2290
01:37:26,639 --> 01:37:28,480
so for the root user you'll get the

2291
01:37:28,480 --> 01:37:35,839
corresponding password

2292
01:37:36,880 --> 01:37:39,119
yeah so uh show password is basically

2293
01:37:39,119 --> 01:37:40,719
sometimes what people do when there are

2294
01:37:40,719 --> 01:37:42,639
many password they save it in a file

2295
01:37:42,639 --> 01:37:46,320
and then we use a dash show to like

2296
01:37:46,320 --> 01:37:51,360
give that representable form on the

2297
01:38:00,840 --> 01:38:03,440
screen

2298
01:38:03,440 --> 01:38:06,960
so if let me know if i can proceed to

2299
01:38:06,960 --> 01:38:07,920
our next lap

2300
01:38:07,920 --> 01:38:11,360
we just have i guess few 20 minutes

2301
01:38:11,360 --> 01:38:16,239
no 15 minute left

2302
01:38:16,239 --> 01:38:20,799
yeah so our next lab is

2303
01:38:21,119 --> 01:38:25,040
more into dynamic analysis

2304
01:38:25,040 --> 01:38:27,840
so till now we saw some of the basic

2305
01:38:27,840 --> 01:38:31,040
examples related to static analysis

2306
01:38:31,040 --> 01:38:33,760
then we come to dynamic analysis so in

2307
01:38:33,760 --> 01:38:35,679
this case what we'll do we will

2308
01:38:35,679 --> 01:38:38,239
we are having the will be giving the

2309
01:38:38,239 --> 01:38:39,199
binary

2310
01:38:39,199 --> 01:38:41,440
and we need to identify the custom

2311
01:38:41,440 --> 01:38:43,040
binary

2312
01:38:43,040 --> 01:38:45,679
sorry so we need to identify the custom

2313
01:38:45,679 --> 01:38:46,320
binary

2314
01:38:46,320 --> 01:38:48,159
we need to emulate it since we don't

2315
01:38:48,159 --> 01:38:49,600
have the hardware we just have this

2316
01:38:49,600 --> 01:38:51,679
firmware we will be emulating it and try

2317
01:38:51,679 --> 01:38:52,400
if we can

2318
01:38:52,400 --> 01:38:55,599
put any random data

2319
01:38:56,639 --> 01:39:00,320
so i'll just share

2320
01:39:03,280 --> 01:39:07,679
so let's go back to our

2321
01:39:21,440 --> 01:39:27,520
i can just remove

2322
01:39:27,520 --> 01:39:30,400
so this is through binbow so i'll just

2323
01:39:30,400 --> 01:39:40,639
if you want

2324
01:39:40,639 --> 01:39:44,159
so you could be having looking

2325
01:39:44,159 --> 01:39:47,119
these files in your right so again our

2326
01:39:47,119 --> 01:39:49,840
task is to

2327
01:39:49,840 --> 01:39:55,840
extract this

2328
01:40:05,080 --> 01:40:06,800
so we get

2329
01:40:06,800 --> 01:40:12,800
into the phi system we get into

2330
01:40:13,119 --> 01:40:16,400
so uh our task is we want to emulate the

2331
01:40:16,400 --> 01:40:17,040
binary

2332
01:40:17,040 --> 01:40:20,639
so to test to test our

2333
01:40:20,639 --> 01:40:24,159
thing what we do let's

2334
01:40:24,159 --> 01:40:27,280
emulate just the busy box so the busy

2335
01:40:27,280 --> 01:40:28,239
box that is

2336
01:40:28,239 --> 01:40:31,360
present inside dot bin

2337
01:40:31,360 --> 01:40:34,560
bz box so it's like the standard binary

2338
01:40:34,560 --> 01:40:36,320
that generally contain all the different

2339
01:40:36,320 --> 01:40:38,159
services inside it so

2340
01:40:38,159 --> 01:40:40,000
what we'll try to do we will try to run

2341
01:40:40,000 --> 01:40:41,199
this binary so

2342
01:40:41,199 --> 01:40:44,320
now if you try to run this binary just

2343
01:40:44,320 --> 01:40:46,000
like this

2344
01:40:46,000 --> 01:40:49,119
so let's check if it

2345
01:40:49,520 --> 01:40:53,199
so so it says no such file order like

2346
01:40:53,199 --> 01:40:54,719
it's

2347
01:40:54,719 --> 01:40:56,639
and if you check the architecture of

2348
01:40:56,639 --> 01:40:58,639
this file

2349
01:40:58,639 --> 01:41:05,440
busy box

2350
01:41:05,440 --> 01:41:08,560
sorry it should be dot yeah

2351
01:41:08,560 --> 01:41:10,400
if you check the architecture of this

2352
01:41:10,400 --> 01:41:11,760
file

2353
01:41:11,760 --> 01:41:15,199
it is mips architecture right

2354
01:41:15,199 --> 01:41:18,239
so we need something that can emulate

2355
01:41:18,239 --> 01:41:18,719
the

2356
01:41:18,719 --> 01:41:22,239
file of mixed architecture to our x86

2357
01:41:22,239 --> 01:41:25,920
architecture so uh for this we have camo

2358
01:41:25,920 --> 01:41:28,880
so one way to do is if the cable is

2359
01:41:28,880 --> 01:41:29,760
already installed

2360
01:41:29,760 --> 01:41:33,040
what you can do is you can just do which

2361
01:41:33,040 --> 01:41:36,639
camo mips so we'll do use smith static

2362
01:41:36,639 --> 01:41:37,600
here

2363
01:41:37,600 --> 01:41:40,639
we'll use k moves user mode emulation

2364
01:41:40,639 --> 01:41:43,760
when i say user mode emulation it means

2365
01:41:43,760 --> 01:41:45,840
we are not providing any new kernel

2366
01:41:45,840 --> 01:41:49,360
image or like a full system image to

2367
01:41:49,360 --> 01:41:51,920
boot up with the whole complete system

2368
01:41:51,920 --> 01:41:54,080
but we will use justice directory

2369
01:41:54,080 --> 01:41:57,280
squash fs root system and

2370
01:41:57,280 --> 01:42:00,400
when we use ch root uh space

2371
01:42:00,400 --> 01:42:03,360
dot that would take this directory as

2372
01:42:03,360 --> 01:42:05,199
the virtual host directory

2373
01:42:05,199 --> 01:42:07,440
and then this would in the back end

2374
01:42:07,440 --> 01:42:08,239
forward the

2375
01:42:08,239 --> 01:42:10,239
calls system related call to our main

2376
01:42:10,239 --> 01:42:11,600
host so

2377
01:42:11,600 --> 01:42:14,960
for this we need to put camo mips

2378
01:42:14,960 --> 01:42:18,400
static inside this folder

2379
01:42:18,400 --> 01:42:22,320
inside this or in

2380
01:42:23,679 --> 01:42:26,320
so what will do you just need to do

2381
01:42:26,320 --> 01:42:27,119
which came

2382
01:42:27,119 --> 01:42:30,719
bin user bin mips static you copy this

2383
01:42:30,719 --> 01:42:33,040
path

2384
01:42:33,920 --> 01:42:42,320
and copy this file into this directory

2385
01:42:42,320 --> 01:42:45,360
all right you we got this thing

2386
01:42:45,360 --> 01:42:48,800
so we got our uh uh

2387
01:42:48,800 --> 01:42:50,960
since it is why we are taking cable mips

2388
01:42:50,960 --> 01:42:53,520
because our file is of maps architecture

2389
01:42:53,520 --> 01:42:56,000
and uh if it would have been armed we

2390
01:42:56,000 --> 01:42:57,600
would have taken k mo arm

2391
01:42:57,600 --> 01:42:59,600
so now our next thing would be we will

2392
01:42:59,600 --> 01:43:01,600
be doing ch root

2393
01:43:01,600 --> 01:43:06,000
space dot so ch root space dot means

2394
01:43:06,000 --> 01:43:08,400
we i want to do the root to this

2395
01:43:08,400 --> 01:43:10,239
directory dot means this present

2396
01:43:10,239 --> 01:43:12,480
square shafts directory then we will

2397
01:43:12,480 --> 01:43:15,919
pass this k boom whips

2398
01:43:16,000 --> 01:43:18,239
and then the binary we want to emulate

2399
01:43:18,239 --> 01:43:25,839
so let's say we want to emulate busy box

2400
01:43:26,960 --> 01:43:30,480
sorry it need sudo

2401
01:43:30,480 --> 01:43:35,040
ch root so you can see that my busy box

2402
01:43:35,040 --> 01:43:38,639
is running so it shows what's

2403
01:43:38,639 --> 01:43:41,360
inside the busy box and everything so if

2404
01:43:41,360 --> 01:43:42,320
for people who

2405
01:43:42,320 --> 01:43:45,199
have been able to do this thing it means

2406
01:43:45,199 --> 01:43:45,679
your

2407
01:43:45,679 --> 01:43:48,239
kmu setup like user mode setup is

2408
01:43:48,239 --> 01:43:53,839
working fine

2409
01:43:56,960 --> 01:44:00,320
yeah so if it worked good now we'll just

2410
01:44:00,320 --> 01:44:03,280
move our main attack so as i have said

2411
01:44:03,280 --> 01:44:03,679
you

2412
01:44:03,679 --> 01:44:06,560
we had to explore inside this file so

2413
01:44:06,560 --> 01:44:08,080
since we have less time i'll

2414
01:44:08,080 --> 01:44:09,760
i would have told you to look inside the

2415
01:44:09,760 --> 01:44:11,520
file but i'll just directly tell you the

2416
01:44:11,520 --> 01:44:12,880
file location now

2417
01:44:12,880 --> 01:44:15,679
so the thing is uh there are many binary

2418
01:44:15,679 --> 01:44:16,719
custom binaries

2419
01:44:16,719 --> 01:44:19,199
so you can either look into bin file or

2420
01:44:19,199 --> 01:44:20,480
the s bin file

2421
01:44:20,480 --> 01:44:24,718
so let's list the file inside s bin

2422
01:44:24,880 --> 01:44:27,440
so sorry so if you look inside the s bin

2423
01:44:27,440 --> 01:44:28,960
there are many different

2424
01:44:28,960 --> 01:44:31,280
uh binaries inside it so there are some

2425
01:44:31,280 --> 01:44:33,119
custom binaries like k keeps

2426
01:44:33,119 --> 01:44:36,400
reconnect kpki seek y and k keeps on

2427
01:44:36,400 --> 01:44:39,360
so if we don't know the binary our task

2428
01:44:39,360 --> 01:44:41,440
generally is that whatever suspected

2429
01:44:41,440 --> 01:44:42,880
binary that we find

2430
01:44:42,880 --> 01:44:45,520
we emulate it via chemo so but today i'm

2431
01:44:45,520 --> 01:44:47,199
telling you that this is the suspected

2432
01:44:47,199 --> 01:44:49,199
binary because we have less time

2433
01:44:49,199 --> 01:44:51,440
so but if it would not so we would have

2434
01:44:51,440 --> 01:44:53,280
tried on different binaries to

2435
01:44:53,280 --> 01:44:55,679
by running it with chemo to check if it

2436
01:44:55,679 --> 01:44:56,480
is giving

2437
01:44:56,480 --> 01:44:58,639
something or listening on some port or

2438
01:44:58,639 --> 01:44:59,760
not so

2439
01:44:59,760 --> 01:45:02,560
now our task would be to emulate this

2440
01:45:02,560 --> 01:45:03,600
binary using

2441
01:45:03,600 --> 01:45:07,119
chemo all right so we will use the same

2442
01:45:07,119 --> 01:45:07,679
command

2443
01:45:07,679 --> 01:45:10,800
as busybox but

2444
01:45:10,800 --> 01:45:13,040
instead of busybox we will give the path

2445
01:45:13,040 --> 01:45:17,679
name of this file

2446
01:45:17,679 --> 01:45:20,880
keeps seek wi-fi so

2447
01:45:20,880 --> 01:45:23,920
uh so when you run this binary when you

2448
01:45:23,920 --> 01:45:25,199
run this binary

2449
01:45:25,199 --> 01:45:26,960
you will see something waiting for

2450
01:45:26,960 --> 01:45:29,440
connection it means it is listening for

2451
01:45:29,440 --> 01:45:30,719
something

2452
01:45:30,719 --> 01:45:35,280
it means if you check let's check our

2453
01:45:38,560 --> 01:45:41,119
let's start to check if some something

2454
01:45:41,119 --> 01:45:42,560
is some

2455
01:45:42,560 --> 01:45:45,840
port is running or not

2456
01:45:49,360 --> 01:45:51,920
so if you check on using the network

2457
01:45:51,920 --> 01:45:53,199
netstat command

2458
01:45:53,199 --> 01:45:56,239
you will find that this camo mips that

2459
01:45:56,239 --> 01:45:57,040
we had run

2460
01:45:57,040 --> 01:46:00,639
is listening on this port right because

2461
01:46:00,639 --> 01:46:02,719
this application so though this

2462
01:46:02,719 --> 01:46:04,400
application is running but why is it

2463
01:46:04,400 --> 01:46:06,639
showing here camo mibs because

2464
01:46:06,639 --> 01:46:10,639
this uh this is being emulated using

2465
01:46:10,639 --> 01:46:12,400
the main thing in them before the main

2466
01:46:12,400 --> 01:46:14,800
hosting machine is

2467
01:46:14,800 --> 01:46:17,040
mips so it is telling you that it is

2468
01:46:17,040 --> 01:46:18,560
listening on this port

2469
01:46:18,560 --> 01:46:22,239
now and now our task would be to try to

2470
01:46:22,239 --> 01:46:24,639
send using this port something to this

2471
01:46:24,639 --> 01:46:25,679
application

2472
01:46:25,679 --> 01:46:28,639
and check if it is listening or not so

2473
01:46:28,639 --> 01:46:29,119
just

2474
01:46:29,119 --> 01:46:33,040
to let's say eco

2475
01:46:33,040 --> 01:46:37,119
random hackaday

2476
01:46:37,119 --> 01:46:42,560
anything and we'll pipe it to netcat

2477
01:46:42,560 --> 01:46:45,679
let it quit in three seconds and

2478
01:46:45,679 --> 01:46:48,639
local host and our port number that we

2479
01:46:48,639 --> 01:46:50,000
saw over here

2480
01:46:50,000 --> 01:46:52,560
that is five eight zero zero nine in my

2481
01:46:52,560 --> 01:46:53,760
case

2482
01:46:53,760 --> 01:46:59,040
five eight zero zero nine if i do this

2483
01:46:59,040 --> 01:47:00,880
you see this message is received over

2484
01:47:00,880 --> 01:47:02,480
here right

2485
01:47:02,480 --> 01:47:05,600
so what your next task would be

2486
01:47:05,600 --> 01:47:09,280
to try to send different different types

2487
01:47:09,280 --> 01:47:11,040
of data through this

2488
01:47:11,040 --> 01:47:13,119
try to mutate this using tools like

2489
01:47:13,119 --> 01:47:15,280
radhamsa and send any kind of thing

2490
01:47:15,280 --> 01:47:18,639
and check if this application crashes

2491
01:47:18,639 --> 01:47:22,400
somewhere or not

2492
01:47:22,400 --> 01:47:24,800
uh can you listen to me i am getting

2493
01:47:24,800 --> 01:47:26,719
some message on hacker day

2494
01:47:26,719 --> 01:47:31,360
zoom related uh

2495
01:47:34,960 --> 01:47:38,880
uh i hope everyone

2496
01:47:40,719 --> 01:47:44,159
so this is how you can try on these

2497
01:47:44,159 --> 01:47:46,480
stuff

2498
01:47:48,840 --> 01:47:51,840
just

2499
01:47:52,560 --> 01:47:55,520
so we have seven more minutes left if

2500
01:47:55,520 --> 01:47:57,360
you have yeah this workshop

2501
01:47:57,360 --> 01:47:59,600
room is close so we are done with the

2502
01:47:59,600 --> 01:48:02,239
laps so if you have any questions

2503
01:48:02,239 --> 01:48:05,760
uh do let me know or uh you can also ask

2504
01:48:05,760 --> 01:48:06,960
me why the public

2505
01:48:06,960 --> 01:48:09,920
chat what was eco so eco was just for me

2506
01:48:09,920 --> 01:48:10,400
to

2507
01:48:10,400 --> 01:48:13,360
uh like to send piping i was echoing and

2508
01:48:13,360 --> 01:48:15,360
then piping the same thing to our

2509
01:48:15,360 --> 01:48:19,520
netcast so i i i can respond my public

2510
01:48:19,520 --> 01:48:19,920
chat

2511
01:48:19,920 --> 01:48:23,119
and will also send this thing uh

2512
01:48:23,119 --> 01:48:25,679
lab step by step and the presentation

2513
01:48:25,679 --> 01:48:27,520
probably sophie on the public chat

2514
01:48:27,520 --> 01:48:32,639
itself or i have to mail you

2515
01:48:32,639 --> 01:48:35,760
uh you can you can email it to me and

2516
01:48:35,760 --> 01:48:38,239
or you can just add it to the project

2517
01:48:38,239 --> 01:48:39,199
yourself

2518
01:48:39,199 --> 01:48:40,719
you're a member on the project but if

2519
01:48:40,719 --> 01:48:42,400
it's easier for you just email it to me

2520
01:48:42,400 --> 01:48:43,920
and we'll add it

2521
01:48:43,920 --> 01:48:46,080
sure and thank you everyone for

2522
01:48:46,080 --> 01:48:48,000
listening

2523
01:48:48,000 --> 01:48:50,159
thank you so much we are so happy that

2524
01:48:50,159 --> 01:48:54,000
you came and gave this awesome workshop

2525
01:48:55,360 --> 01:48:58,159
so this was very basic that i told you

2526
01:48:58,159 --> 01:48:58,480
all

2527
01:48:58,480 --> 01:49:01,280
because if you are good at binary

2528
01:49:01,280 --> 01:49:02,159
reversing

2529
01:49:02,159 --> 01:49:05,119
so this first initial steps help you in

2530
01:49:05,119 --> 01:49:06,560
taking forward your next

2531
01:49:06,560 --> 01:49:09,440
steps like reversing those binary and

2532
01:49:09,440 --> 01:49:10,960
how to deal with it so if you are able

2533
01:49:10,960 --> 01:49:12,000
to put it

2534
01:49:12,000 --> 01:49:13,760
uh i just hope i could have shown you

2535
01:49:13,760 --> 01:49:16,080
the gaidra one but unfortunately not

2536
01:49:16,080 --> 01:49:19,840
but still that i will try to put in the

2537
01:49:22,280 --> 01:49:25,280
dock

