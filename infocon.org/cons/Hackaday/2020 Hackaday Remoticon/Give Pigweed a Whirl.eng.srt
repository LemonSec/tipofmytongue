1
00:00:01,250 --> 00:00:06,160
[Music]

2
00:00:06,160 --> 00:00:08,240
all right welcome everyone to roancon

3
00:00:08,240 --> 00:00:09,200
2020.

4
00:00:09,200 --> 00:00:11,519
um we're very excited to have here with

5
00:00:11,519 --> 00:00:12,559
us today from

6
00:00:12,559 --> 00:00:15,920
google um a few quick reminders as folks

7
00:00:15,920 --> 00:00:16,480
are still

8
00:00:16,480 --> 00:00:20,080
joining this workshop is being recorded

9
00:00:20,080 --> 00:00:22,400
but all participants will be edited out

10
00:00:22,400 --> 00:00:24,480
of the final version

11
00:00:24,480 --> 00:00:26,720
and as always feel free to use the chat

12
00:00:26,720 --> 00:00:28,000
to interact with kier

13
00:00:28,000 --> 00:00:31,199
as we also have a moderator andrew to

14
00:00:31,199 --> 00:00:34,480
help with any questions

15
00:00:36,160 --> 00:00:37,680
all right so please give a warm welcome

16
00:00:37,680 --> 00:00:40,879
to pierre meyerle

17
00:00:41,600 --> 00:00:45,520
everyone i'm kier nice to meet you

18
00:00:45,520 --> 00:00:47,600
and i'm here to talk to you a little bit

19
00:00:47,600 --> 00:00:49,440
about this new thing called

20
00:00:49,440 --> 00:00:52,719
pigweed uh and before we get into it

21
00:00:52,719 --> 00:00:55,600
just wanted to emphasize that we're

22
00:00:55,600 --> 00:00:56,879
we're looking at a chat and actually

23
00:00:56,879 --> 00:00:58,960
some of the team is here as well

24
00:00:58,960 --> 00:01:02,000
to help out with any issues um i think

25
00:01:02,000 --> 00:01:03,280
there's a good chance it'll probably be

26
00:01:03,280 --> 00:01:04,000
a couple

27
00:01:04,000 --> 00:01:07,360
a couple challenges since we've been

28
00:01:07,360 --> 00:01:08,799
seriously trying to get some of the code

29
00:01:08,799 --> 00:01:10,840
ready to go for this

30
00:01:10,840 --> 00:01:12,880
and i think maybe some of it is a little

31
00:01:12,880 --> 00:01:15,119
bit hot off the presses

32
00:01:15,119 --> 00:01:17,600
so don't be shy and hop into that

33
00:01:17,600 --> 00:01:18,799
hackaday chat

34
00:01:18,799 --> 00:01:21,840
and we'll try to help you out there

35
00:01:21,840 --> 00:01:26,159
also we're available for um

36
00:01:26,159 --> 00:01:29,600
to to talk with us later in our normal

37
00:01:29,600 --> 00:01:32,079
um chat room which is on on discord and

38
00:01:32,079 --> 00:01:35,439
you can find that pigweed.dev

39
00:01:35,920 --> 00:01:39,040
cool well with that uh let's

40
00:01:39,040 --> 00:01:42,479
let's get into it so

41
00:01:43,040 --> 00:01:46,560
uh all right so first off

42
00:01:46,560 --> 00:01:48,240
the thing everyone should be starting

43
00:01:48,240 --> 00:01:49,920
with is

44
00:01:49,920 --> 00:01:53,119
to clone pigweed

45
00:01:53,119 --> 00:01:56,880
uh actually before i get into this

46
00:01:56,880 --> 00:02:00,479
i'm just trying to see if there is uh

47
00:02:00,479 --> 00:02:03,840
if people are in the chat

48
00:02:06,479 --> 00:02:09,840
ah there's the chat okay cool

49
00:02:14,000 --> 00:02:17,360
ah yes

50
00:02:21,760 --> 00:02:25,120
so this workshop is going to break into

51
00:02:25,120 --> 00:02:26,400
just a couple parts

52
00:02:26,400 --> 00:02:29,520
so first part of the workshop is that

53
00:02:29,520 --> 00:02:30,480
i'll talk to you a little bit about

54
00:02:30,480 --> 00:02:32,959
pigweed

55
00:02:33,280 --> 00:02:36,720
and why are we doing it

56
00:02:36,720 --> 00:02:38,720
uh and then we're gonna spend most of

57
00:02:38,720 --> 00:02:40,000
the time going through

58
00:02:40,000 --> 00:02:42,959
and doing some exercises to kind of try

59
00:02:42,959 --> 00:02:44,480
to use some of the facilities

60
00:02:44,480 --> 00:02:47,280
in pigweed uh and through that we're

61
00:02:47,280 --> 00:02:48,160
gonna build up

62
00:02:48,160 --> 00:02:51,440
kind of a really super basic

63
00:02:51,440 --> 00:02:54,879
factory test station uh which

64
00:02:54,879 --> 00:02:56,560
and i'll go through you know what what

65
00:02:56,560 --> 00:02:58,959
this is as we get there

66
00:02:58,959 --> 00:03:01,920
to kind of help um understand the source

67
00:03:01,920 --> 00:03:02,720
of you know why

68
00:03:02,720 --> 00:03:06,239
and why did we build pigweed

69
00:03:06,239 --> 00:03:10,239
uh so that yeah exercises

70
00:03:15,280 --> 00:03:17,599
so we're going to put that together and

71
00:03:17,599 --> 00:03:19,680
hopefully by the end of it you'll have

72
00:03:19,680 --> 00:03:21,440
a little bit of code that will let you

73
00:03:21,440 --> 00:03:23,760
exercise some functionality

74
00:03:23,760 --> 00:03:26,799
on on a piece of hardware that

75
00:03:26,799 --> 00:03:29,440
that you have and we have two pieces of

76
00:03:29,440 --> 00:03:31,200
hardware that are supported

77
00:03:31,200 --> 00:03:34,400
one of them is the teensy

78
00:03:34,400 --> 00:03:38,200
and tt i think 3 or 4

79
00:03:38,200 --> 00:03:41,440
3.2 to 4 i think should work and

80
00:03:41,440 --> 00:03:43,840
this which is the discovery board now

81
00:03:43,840 --> 00:03:45,200
when we first started the workshop we

82
00:03:45,200 --> 00:03:47,280
didn't have support for tnt

83
00:03:47,280 --> 00:03:48,879
the team has been hard at work making

84
00:03:48,879 --> 00:03:50,799
that go

85
00:03:50,799 --> 00:03:52,560
and that should be should be working now

86
00:03:52,560 --> 00:03:53,599
and that's actually what i'll be

87
00:03:53,599 --> 00:03:56,000
demonstrating on today

88
00:03:56,000 --> 00:04:00,640
um so yeah

89
00:04:00,640 --> 00:04:03,920
okay so before i hop into some of the

90
00:04:03,920 --> 00:04:05,680
exercises i wanted to talk for a couple

91
00:04:05,680 --> 00:04:06,720
minutes about

92
00:04:06,720 --> 00:04:08,879
like what is pigweed then and why why

93
00:04:08,879 --> 00:04:10,080
did we build it

94
00:04:10,080 --> 00:04:12,959
and when might you want to use it and

95
00:04:12,959 --> 00:04:14,879
where does it fit in the ecosystem of

96
00:04:14,879 --> 00:04:16,798
other kind of embedded

97
00:04:16,798 --> 00:04:20,160
systems and

98
00:04:20,160 --> 00:04:22,720
the answer to this is kind of in short

99
00:04:22,720 --> 00:04:25,600
that google has

100
00:04:25,600 --> 00:04:27,600
quite a number of different mechanisms

101
00:04:27,600 --> 00:04:29,600
for doing embedded

102
00:04:29,600 --> 00:04:32,560
development uh you know various rtos

103
00:04:32,560 --> 00:04:33,759
related systems

104
00:04:33,759 --> 00:04:37,600
but there is some fragmentation

105
00:04:37,600 --> 00:04:41,040
and so pigweed was kind of an effort to

106
00:04:41,040 --> 00:04:44,400
try and make an opportunity to share

107
00:04:44,400 --> 00:04:47,919
code among teams to just better leverage

108
00:04:47,919 --> 00:04:48,400
some

109
00:04:48,400 --> 00:04:50,880
engineering resources so that's why when

110
00:04:50,880 --> 00:04:52,400
we joke around and say pigweed's just a

111
00:04:52,400 --> 00:04:54,160
collection of libraries it

112
00:04:54,160 --> 00:04:56,400
it's kind of true it's really just a

113
00:04:56,400 --> 00:04:59,919
series of middleware components

114
00:05:02,320 --> 00:05:04,560
um

115
00:05:06,240 --> 00:05:09,120
now a collection of libraries is great

116
00:05:09,120 --> 00:05:09,520
but

117
00:05:09,520 --> 00:05:11,759
typically if you're doing a new and

118
00:05:11,759 --> 00:05:12,880
better project you might

119
00:05:12,880 --> 00:05:14,160
want to do a little bit more than just

120
00:05:14,160 --> 00:05:15,600
have some additional libraries you know

121
00:05:15,600 --> 00:05:16,160
maybe

122
00:05:16,160 --> 00:05:18,639
maybe you're starting a new project and

123
00:05:18,639 --> 00:05:21,280
you want to have

124
00:05:21,280 --> 00:05:25,120
some common big software tools like

125
00:05:25,120 --> 00:05:27,520
linting and unit testing and so on and

126
00:05:27,520 --> 00:05:29,039
so pigweed offers more than just

127
00:05:29,039 --> 00:05:30,479
libraries

128
00:05:30,479 --> 00:05:32,880
for things like you know logging

129
00:05:32,880 --> 00:05:33,759
tokenization

130
00:05:33,759 --> 00:05:39,199
logging and key value store

131
00:05:39,199 --> 00:05:41,120
it also offers some additional stuff

132
00:05:41,120 --> 00:05:44,720
around general software development

133
00:05:46,800 --> 00:05:48,320
which includes things like as i

134
00:05:48,320 --> 00:05:50,240
mentioned earlier unit testing

135
00:05:50,240 --> 00:05:53,199
which you know unit testing is pretty

136
00:05:53,199 --> 00:05:53,840
normal

137
00:05:53,840 --> 00:05:56,400
on host when you're developing with a

138
00:05:56,400 --> 00:05:57,199
big computer

139
00:05:57,199 --> 00:05:58,800
but when you're developing on an

140
00:05:58,800 --> 00:06:00,400
embedded device

141
00:06:00,400 --> 00:06:02,639
it's not as common uh it is something

142
00:06:02,639 --> 00:06:03,759
that's done

143
00:06:03,759 --> 00:06:06,160
but uh we have found that it's it's not

144
00:06:06,160 --> 00:06:07,199
prevalent

145
00:06:07,199 --> 00:06:09,039
and so one of the things we offer in

146
00:06:09,039 --> 00:06:11,440
pigweed is unit testing facilities

147
00:06:11,440 --> 00:06:14,080
and additionally things like linting

148
00:06:14,080 --> 00:06:17,039
static analysis

149
00:06:17,199 --> 00:06:21,840
and so on

150
00:06:22,240 --> 00:06:24,160
today we're going to look at kind of a

151
00:06:24,160 --> 00:06:25,520
bit of both of these

152
00:06:25,520 --> 00:06:27,600
we're going to look at the collection of

153
00:06:27,600 --> 00:06:28,880
libraries and see

154
00:06:28,880 --> 00:06:31,840
some of the facilities there uh but also

155
00:06:31,840 --> 00:06:33,039
some of the tooling

156
00:06:33,039 --> 00:06:36,400
which just kind of helps get going with

157
00:06:36,400 --> 00:06:38,000
embedded development like setting up

158
00:06:38,000 --> 00:06:38,960
your tool chains

159
00:06:38,960 --> 00:06:42,479
and and other such things

160
00:06:42,639 --> 00:06:49,840
um yeah so

161
00:06:50,080 --> 00:06:51,280
another thing i want to talk a little

162
00:06:51,280 --> 00:06:53,759
bit about briefly is just you know why

163
00:06:53,759 --> 00:06:55,919
why pigley so code sharing is one of the

164
00:06:55,919 --> 00:06:57,280
reasons

165
00:06:57,280 --> 00:07:00,000
but another reason is that we wanted to

166
00:07:00,000 --> 00:07:00,479
bring

167
00:07:00,479 --> 00:07:03,840
some of these modern tooling things to

168
00:07:03,840 --> 00:07:06,000
the embedded space and so unit testing

169
00:07:06,000 --> 00:07:08,240
is one thing i mentioned earlier

170
00:07:08,240 --> 00:07:10,080
but there's another area that's pretty

171
00:07:10,080 --> 00:07:12,400
common and we're going to get into it

172
00:07:12,400 --> 00:07:15,440
which is just communicating between

173
00:07:15,440 --> 00:07:17,840
a host and a device for things like

174
00:07:17,840 --> 00:07:20,319
factory testing

175
00:07:20,319 --> 00:07:23,919
so actually well uh

176
00:07:23,919 --> 00:07:25,919
so we have a few people in the chat yeah

177
00:07:25,919 --> 00:07:27,120
great so i

178
00:07:27,120 --> 00:07:28,400
just wanted to get a little bit of a

179
00:07:28,400 --> 00:07:30,800
pull um

180
00:07:30,800 --> 00:07:34,240
how many people here have done any sort

181
00:07:34,240 --> 00:07:35,120
of

182
00:07:35,120 --> 00:07:38,319
high volume electronics manufacturing

183
00:07:38,319 --> 00:07:40,800
where high volume will say is more than

184
00:07:40,800 --> 00:07:44,080
you know 100 or 200 devices

185
00:07:44,080 --> 00:07:47,199
just out of curiosity

186
00:07:48,400 --> 00:07:50,960
maybe just put a yes or no in the chat

187
00:07:50,960 --> 00:07:52,400
if i have a sense for

188
00:07:52,400 --> 00:07:54,400
um for who here has some of this

189
00:07:54,400 --> 00:07:56,560
experience

190
00:07:56,560 --> 00:07:59,360
cool awesome so call people have done

191
00:07:59,360 --> 00:08:00,800
some

192
00:08:00,800 --> 00:08:03,759
yeah yes ish

193
00:08:06,879 --> 00:08:10,479
okay great uh in that case

194
00:08:10,479 --> 00:08:13,520
i think this will be a

195
00:08:13,520 --> 00:08:14,800
some of the things i say here will

196
00:08:14,800 --> 00:08:17,440
probably be more meaningful to those

197
00:08:17,440 --> 00:08:19,680
who've spent some time in the factory

198
00:08:19,680 --> 00:08:21,520
and for those who haven't i'll try to go

199
00:08:21,520 --> 00:08:23,039
through some of these

200
00:08:23,039 --> 00:08:26,879
some of these issues

201
00:08:26,879 --> 00:08:29,759
so uh one of them all right well let me

202
00:08:29,759 --> 00:08:30,879
back up a second

203
00:08:30,879 --> 00:08:33,759
so what does the typical

204
00:08:33,919 --> 00:08:37,039
factory process look like um

205
00:08:37,039 --> 00:08:38,399
you know typically you'll have a device

206
00:08:38,399 --> 00:08:40,399
that you build you know maybe it's

207
00:08:40,399 --> 00:08:41,760
it's something like like this board

208
00:08:41,760 --> 00:08:43,519
doesn't really have much on it

209
00:08:43,519 --> 00:08:46,480
but it might also be a device that has

210
00:08:46,480 --> 00:08:47,440
additional

211
00:08:47,440 --> 00:08:50,720
sensors or buttons or

212
00:08:50,720 --> 00:08:52,959
batteries and things that need to be

213
00:08:52,959 --> 00:08:54,240
verified

214
00:08:54,240 --> 00:08:58,240
and if you glue everything together

215
00:08:58,240 --> 00:08:59,839
in a factory that's not enough right you

216
00:08:59,839 --> 00:09:01,440
need to make sure that

217
00:09:01,440 --> 00:09:04,320
all the components work and to do that

218
00:09:04,320 --> 00:09:06,320
you typically need to

219
00:09:06,320 --> 00:09:08,800
connect to the device and verify that a

220
00:09:08,800 --> 00:09:11,440
component is functioning

221
00:09:11,440 --> 00:09:15,120
and classically in the embedded space

222
00:09:15,120 --> 00:09:17,279
a lot of this is done with text-based

223
00:09:17,279 --> 00:09:19,040
interfaces that are

224
00:09:19,040 --> 00:09:21,360
human-readable which is a benefit but

225
00:09:21,360 --> 00:09:22,080
can be

226
00:09:22,080 --> 00:09:23,760
challenging when you're scaling up to

227
00:09:23,760 --> 00:09:26,000
larger teams or you're doing

228
00:09:26,000 --> 00:09:28,640
higher speed communication or you want

229
00:09:28,640 --> 00:09:30,480
to have a more sophisticated

230
00:09:30,480 --> 00:09:32,399
interaction or concurrent communication

231
00:09:32,399 --> 00:09:33,760
between say

232
00:09:33,760 --> 00:09:38,240
logging and and sensor verification

233
00:09:38,240 --> 00:09:40,080
and so these text interfaces can be

234
00:09:40,080 --> 00:09:41,279
problematic

235
00:09:41,279 --> 00:09:43,279
and so this is actually one of the uh

236
00:09:43,279 --> 00:09:44,959
original motivations for

237
00:09:44,959 --> 00:09:47,519
for doing pig lead and actually some

238
00:09:47,519 --> 00:09:48,720
additional code that's not part of

239
00:09:48,720 --> 00:09:51,040
pigweed but that we worked on before

240
00:09:51,040 --> 00:09:54,160
before building pigweed and so this

241
00:09:54,160 --> 00:09:56,560
this whole core of bringing some of

242
00:09:56,560 --> 00:09:57,279
these more

243
00:09:57,279 --> 00:10:00,320
higher level abstractions to embedded

244
00:10:00,320 --> 00:10:02,560
than what we'd seen in some of the

245
00:10:02,560 --> 00:10:03,760
projects

246
00:10:03,760 --> 00:10:06,160
at google was was a big part of the

247
00:10:06,160 --> 00:10:07,519
motivation here

248
00:10:07,519 --> 00:10:09,120
and so you'll you'll get to go through

249
00:10:09,120 --> 00:10:12,000
the process of

250
00:10:12,959 --> 00:10:15,440
apparently google needs some more

251
00:10:15,440 --> 00:10:16,839
factory testing

252
00:10:16,839 --> 00:10:20,000
um we'll go through building a little

253
00:10:20,000 --> 00:10:22,959
factory test station

254
00:10:24,160 --> 00:10:27,760
okay so

255
00:10:27,760 --> 00:10:30,959
i'm gonna hop over to getting set up

256
00:10:30,959 --> 00:10:33,600
uh hopefully people have some stuff set

257
00:10:33,600 --> 00:10:35,680
up today this will be

258
00:10:35,680 --> 00:10:38,959
more uh like an interactive workshop uh

259
00:10:38,959 --> 00:10:41,040
where you know we'll i'd like for people

260
00:10:41,040 --> 00:10:42,800
to try to actually get this set up and

261
00:10:42,800 --> 00:10:44,720
and work

262
00:10:44,720 --> 00:10:46,560
as opposed to me just talking at you for

263
00:10:46,560 --> 00:10:49,360
a long time so

264
00:10:49,360 --> 00:10:50,880
i think we should get into it so before

265
00:10:50,880 --> 00:10:52,399
i do that just any

266
00:10:52,399 --> 00:10:55,360
last questions um on this area and of

267
00:10:55,360 --> 00:10:56,399
course we can talk

268
00:10:56,399 --> 00:11:00,240
more more later but yeah so if anybody

269
00:11:00,240 --> 00:11:01,120
wants to

270
00:11:01,120 --> 00:11:02,959
ask anything before we hop into getting

271
00:11:02,959 --> 00:11:06,239
it installed and getting going

272
00:11:10,320 --> 00:11:15,440
okay all right

273
00:11:15,440 --> 00:11:18,480
so what we've prepared today

274
00:11:18,480 --> 00:11:22,720
is a series of workshop steps

275
00:11:22,720 --> 00:11:25,680
and the idea is that if we have time

276
00:11:25,680 --> 00:11:27,519
we'll go through each of these

277
00:11:27,519 --> 00:11:29,600
and make some changes to each of them to

278
00:11:29,600 --> 00:11:32,640
implement some piece of functionality

279
00:11:32,640 --> 00:11:37,279
so the first part is setup and

280
00:11:37,279 --> 00:11:39,839
i already have everything set up but i

281
00:11:39,839 --> 00:11:42,720
will create a new

282
00:11:42,720 --> 00:11:45,040
a new repo here just to demonstrate it

283
00:11:45,040 --> 00:11:47,519
i'm afraid that it might

284
00:11:47,519 --> 00:11:49,440
overwhelm my bandwidth it does have to

285
00:11:49,440 --> 00:11:51,839
download some things

286
00:11:51,839 --> 00:11:54,880
uh but let let's try it so

287
00:11:54,880 --> 00:11:58,399
in short the repo you need to clone

288
00:11:58,399 --> 00:12:03,519
is here

289
00:12:03,760 --> 00:12:05,600
it's at the top of the remake here oh

290
00:12:05,600 --> 00:12:06,800
with it right there

291
00:12:06,800 --> 00:12:11,839
yeah oh thanks

292
00:12:12,079 --> 00:12:14,959
under repo setup

293
00:12:15,519 --> 00:12:25,839
oh yeah here we are okay cool

294
00:12:28,560 --> 00:12:32,000
and in short

295
00:12:32,639 --> 00:12:36,160
get a clone so you can get for this

296
00:12:36,160 --> 00:12:40,000
and this sample project by the way is

297
00:12:40,000 --> 00:12:42,800
what we're hoping to turn into just an

298
00:12:42,800 --> 00:12:44,240
easy to get going version

299
00:12:44,240 --> 00:12:47,279
of um

300
00:12:47,279 --> 00:12:50,240
you know a version of pigweed but a a

301
00:12:50,240 --> 00:12:51,600
starting spot that already has

302
00:12:51,600 --> 00:12:52,160
everything

303
00:12:52,160 --> 00:12:55,839
pre-integrated now one of the core ideas

304
00:12:55,839 --> 00:12:57,120
behind pigweed is that

305
00:12:57,120 --> 00:13:00,959
it's not a framework it's it's not a

306
00:13:00,959 --> 00:13:03,519
platform it's more like a collection of

307
00:13:03,519 --> 00:13:04,800
code that you can take into your

308
00:13:04,800 --> 00:13:06,240
existing project

309
00:13:06,240 --> 00:13:08,240
and use the parts that make sense for

310
00:13:08,240 --> 00:13:10,079
you but

311
00:13:10,079 --> 00:13:11,920
sometimes you just want to start

312
00:13:11,920 --> 00:13:13,279
something new and you want to have

313
00:13:13,279 --> 00:13:15,200
everything pre-configured

314
00:13:15,200 --> 00:13:19,040
and the sample project is our

315
00:13:19,040 --> 00:13:21,920
current version of how do you just hit

316
00:13:21,920 --> 00:13:24,320
the ground running you can just clone it

317
00:13:24,320 --> 00:13:26,560
and fork essentially this repo and then

318
00:13:26,560 --> 00:13:27,839
do whatever you want with it and it

319
00:13:27,839 --> 00:13:28,800
already has things

320
00:13:28,800 --> 00:13:33,279
set up so that's the idea with this

321
00:13:33,279 --> 00:13:37,200
all right so we clone it okay so

322
00:13:37,200 --> 00:13:40,240
one of the things in pigweed that

323
00:13:40,240 --> 00:13:44,480
is a little different than

324
00:13:44,480 --> 00:13:47,440
some of the other some of the other

325
00:13:47,440 --> 00:13:50,399
projects is that we

326
00:13:53,440 --> 00:13:56,160
um is that we have this tool called

327
00:13:56,160 --> 00:13:57,600
environment setup

328
00:13:57,600 --> 00:13:59,760
and you can see it running right here so

329
00:13:59,760 --> 00:14:02,000
the sample project

330
00:14:02,000 --> 00:14:05,120
has this bootstrap functionality which

331
00:14:05,120 --> 00:14:05,680
is

332
00:14:05,680 --> 00:14:08,160
implemented inside pigweed now you can

333
00:14:08,160 --> 00:14:09,680
customize it a little bit so you can see

334
00:14:09,680 --> 00:14:10,720
here

335
00:14:10,720 --> 00:14:13,600
oops you can see here that this banner

336
00:14:13,600 --> 00:14:14,320
that

337
00:14:14,320 --> 00:14:17,519
tony put together

338
00:14:17,519 --> 00:14:19,120
shows up and yeah it's kind of nice to

339
00:14:19,120 --> 00:14:20,480
put a little bit of flair for your

340
00:14:20,480 --> 00:14:20,959
project

341
00:14:20,959 --> 00:14:24,160
so that if new team members come in and

342
00:14:24,160 --> 00:14:25,680
start working on the project they get to

343
00:14:25,680 --> 00:14:27,199
see a little banner and

344
00:14:27,199 --> 00:14:29,680
actually serves a a a practical purpose

345
00:14:29,680 --> 00:14:30,720
which is that if you're working on

346
00:14:30,720 --> 00:14:32,000
multiple projects

347
00:14:32,000 --> 00:14:33,839
when you run bootstrap or activate it's

348
00:14:33,839 --> 00:14:36,480
clear which project you're in

349
00:14:36,480 --> 00:14:39,360
and what what this bootstrap does is it

350
00:14:39,360 --> 00:14:40,480
installs

351
00:14:40,480 --> 00:14:44,240
really two main components the first one

352
00:14:44,240 --> 00:14:46,079
is that it downloads this package

353
00:14:46,079 --> 00:14:47,839
manager from google called

354
00:14:47,839 --> 00:14:51,600
sifty or cipd it's used for chrome

355
00:14:51,600 --> 00:14:54,079
and it has a bunch of binary packages

356
00:14:54,079 --> 00:14:56,000
for things like

357
00:14:56,000 --> 00:14:59,360
gcc and uh it actually includes a

358
00:14:59,360 --> 00:15:01,120
version of python as well

359
00:15:01,120 --> 00:15:04,399
and a few others uh

360
00:15:04,399 --> 00:15:07,440
oh i see we had a question that cloned

361
00:15:07,440 --> 00:15:12,320
pigweed repo ah

362
00:15:12,320 --> 00:15:15,519
uh let's see here

363
00:15:17,600 --> 00:15:20,399
mark did you clone the um the pig lead

364
00:15:20,399 --> 00:15:23,680
repo or the sample project

365
00:15:23,680 --> 00:15:26,560
yeah i think for doing what we're doing

366
00:15:26,560 --> 00:15:28,399
today i think the sample project is the

367
00:15:28,399 --> 00:15:28,880
one

368
00:15:28,880 --> 00:15:31,120
you want because yeah that will also

369
00:15:31,120 --> 00:15:32,160
point to me

370
00:15:32,160 --> 00:15:33,680
yeah i had done it yesterday and i'd

371
00:15:33,680 --> 00:15:35,040
already done it before you put up this

372
00:15:35,040 --> 00:15:36,560
page so i had the other thing

373
00:15:36,560 --> 00:15:39,199
and that's i think why my tnc thing

374
00:15:39,199 --> 00:15:40,240
isn't working in

375
00:15:40,240 --> 00:15:42,320
in the other install doesn't work in the

376
00:15:42,320 --> 00:15:44,240
regular pigweed

377
00:15:44,240 --> 00:15:46,560
it should still work um and in fact i

378
00:15:46,560 --> 00:15:48,720
think 50 will even cache

379
00:15:48,720 --> 00:15:52,720
the downloaded packages um

380
00:15:52,720 --> 00:15:55,600
well you should i think the tt core

381
00:15:55,600 --> 00:15:56,880
installer won't work just because the

382
00:15:56,880 --> 00:15:58,000
paths are different

383
00:15:58,000 --> 00:15:59,600
mark that's probably why you you were

384
00:15:59,600 --> 00:16:01,839
saying yeah yeah yeah yeah it gets like

385
00:16:01,839 --> 00:16:02,240
is

386
00:16:02,240 --> 00:16:03,519
like everything is screwed up like it

387
00:16:03,519 --> 00:16:05,839
doesn't have the right touch anything

388
00:16:05,839 --> 00:16:07,440
so yeah sorry for the confusion there no

389
00:16:07,440 --> 00:16:09,360
problem

390
00:16:09,360 --> 00:16:11,440
i just while i have you on here so just

391
00:16:11,440 --> 00:16:12,880
to make it clear

392
00:16:12,880 --> 00:16:14,800
at the moment pigweed is not a thing

393
00:16:14,800 --> 00:16:16,880
separate from a project when you have a

394
00:16:16,880 --> 00:16:18,480
project using pigweed you kind of have

395
00:16:18,480 --> 00:16:20,959
all of pigweed sitting along with it

396
00:16:20,959 --> 00:16:23,440
uh no that's actually not the case so

397
00:16:23,440 --> 00:16:24,720
sample project

398
00:16:24,720 --> 00:16:27,120
is using a sub module like you get sub

399
00:16:27,120 --> 00:16:29,519
module to pull in pigweed

400
00:16:29,519 --> 00:16:31,120
so it does have all the piggly there

401
00:16:31,120 --> 00:16:32,720
just like another library

402
00:16:32,720 --> 00:16:34,800
however you don't have to do it that way

403
00:16:34,800 --> 00:16:36,000
so you can just

404
00:16:36,000 --> 00:16:38,000
go in and copy the individual modules

405
00:16:38,000 --> 00:16:39,120
you want and

406
00:16:39,120 --> 00:16:40,639
i'd rather share it i've got lots of

407
00:16:40,639 --> 00:16:41,920
different projects i don't want to have

408
00:16:41,920 --> 00:16:43,279
to have a separate copy

409
00:16:43,279 --> 00:16:46,240
oh yeah we certainly advocate the uh the

410
00:16:46,240 --> 00:16:47,759
sub module approach

411
00:16:47,759 --> 00:16:50,160
but you know some people prefer to to

412
00:16:50,160 --> 00:16:50,800
have the

413
00:16:50,800 --> 00:16:52,800
copies so they don't have to deal with

414
00:16:52,800 --> 00:16:54,480
git sub modules

415
00:16:54,480 --> 00:16:56,160
but it is designed to support either

416
00:16:56,160 --> 00:16:58,719
either mode

417
00:16:59,040 --> 00:17:02,839
um cool okay so yeah while this is still

418
00:17:02,839 --> 00:17:04,000
running

419
00:17:04,000 --> 00:17:05,679
so first part as i mentioned is the

420
00:17:05,679 --> 00:17:07,039
sipti package manager

421
00:17:07,039 --> 00:17:09,919
and it's essentially a binary downloader

422
00:17:09,919 --> 00:17:11,679
it's using chrome's infrastructure

423
00:17:11,679 --> 00:17:14,480
and it's used by a few teams at google

424
00:17:14,480 --> 00:17:16,000
it's

425
00:17:16,000 --> 00:17:17,520
yeah it works works pretty well and it's

426
00:17:17,520 --> 00:17:19,679
pretty fast uh

427
00:17:19,679 --> 00:17:22,160
and critically there are maintained

428
00:17:22,160 --> 00:17:24,480
versions of compilers for mac windows

429
00:17:24,480 --> 00:17:26,000
and linux

430
00:17:26,000 --> 00:17:28,319
as well as python versions and go and a

431
00:17:28,319 --> 00:17:29,520
few others

432
00:17:29,520 --> 00:17:32,640
that are actively updated more so than

433
00:17:32,640 --> 00:17:34,960
typical

434
00:17:34,960 --> 00:17:37,520
say linux distribution binaries or the

435
00:17:37,520 --> 00:17:40,480
the gcc that you get with your mac

436
00:17:40,480 --> 00:17:43,520
and this lets us have kind of a sort of

437
00:17:43,520 --> 00:17:45,440
docker without docker kind of experience

438
00:17:45,440 --> 00:17:47,679
where we download all the whole pieces

439
00:17:47,679 --> 00:17:50,080
and set them all up and we're confident

440
00:17:50,080 --> 00:17:51,600
that the version of everything

441
00:17:51,600 --> 00:17:54,720
is the same now it requires a little bit

442
00:17:54,720 --> 00:17:56,000
of fiddling because we have different

443
00:17:56,000 --> 00:17:57,360
versions of the binaries on different

444
00:17:57,360 --> 00:17:58,480
platforms

445
00:17:58,480 --> 00:18:01,520
but it works pretty well uh

446
00:18:01,520 --> 00:18:03,200
and we've been pretty happy with this so

447
00:18:03,200 --> 00:18:06,320
far so that's the first part is sippy

448
00:18:06,320 --> 00:18:09,679
and then the next part is is the python

449
00:18:09,679 --> 00:18:10,799
environment

450
00:18:10,799 --> 00:18:14,160
so typically in

451
00:18:14,160 --> 00:18:17,200
sort of big consumer electronics

452
00:18:17,200 --> 00:18:18,799
projects you'll end up with

453
00:18:18,799 --> 00:18:21,440
a combination of native code that runs

454
00:18:21,440 --> 00:18:22,640
on the device

455
00:18:22,640 --> 00:18:25,360
and a series of scripts and tools that

456
00:18:25,360 --> 00:18:27,520
are written to operate

457
00:18:27,520 --> 00:18:29,919
to either automate or flash or do

458
00:18:29,919 --> 00:18:30,880
various things with

459
00:18:30,880 --> 00:18:33,919
with the device and at least at google

460
00:18:33,919 --> 00:18:34,880
this is

461
00:18:34,880 --> 00:18:38,080
generally done with python

462
00:18:38,080 --> 00:18:41,840
and python has one challenge which is

463
00:18:41,840 --> 00:18:43,919
that it does need to have it's sensitive

464
00:18:43,919 --> 00:18:44,480
to the

465
00:18:44,480 --> 00:18:46,880
environment that it runs in so

466
00:18:46,880 --> 00:18:47,840
essentially we

467
00:18:47,840 --> 00:18:51,600
take sip the use that's download python

468
00:18:51,600 --> 00:18:53,280
then once we have a version of python

469
00:18:53,280 --> 00:18:54,160
that we're confident

470
00:18:54,160 --> 00:18:56,559
is a fixed version we then create a

471
00:18:56,559 --> 00:18:58,640
python virtual environment

472
00:18:58,640 --> 00:19:01,520
which is kind of like a local series of

473
00:19:01,520 --> 00:19:03,440
uh

474
00:19:03,440 --> 00:19:06,160
of python packages and and then leverage

475
00:19:06,160 --> 00:19:07,440
that

476
00:19:07,440 --> 00:19:09,200
and so that's what this little bootstrap

477
00:19:09,200 --> 00:19:11,679
does now why does it take so long to run

478
00:19:11,679 --> 00:19:13,919
it downloads about a gigabyte of stuff

479
00:19:13,919 --> 00:19:15,520
so it is big

480
00:19:15,520 --> 00:19:18,559
it is not required for this uh to use

481
00:19:18,559 --> 00:19:20,240
pigweed you can set it up without it

482
00:19:20,240 --> 00:19:22,080
it's a quite a bit of hassle because you

483
00:19:22,080 --> 00:19:22,720
have to

484
00:19:22,720 --> 00:19:25,760
you know install a bunch of packages and

485
00:19:25,760 --> 00:19:27,280
put a bunch of binaries in your path and

486
00:19:27,280 --> 00:19:29,520
so on and so forth but it is doable and

487
00:19:29,520 --> 00:19:31,679
some teams do that

488
00:19:31,679 --> 00:19:33,760
but for for many people we think this is

489
00:19:33,760 --> 00:19:36,240
a pretty convenient way to get going

490
00:19:36,240 --> 00:19:40,160
and it will reliably set up the tools

491
00:19:40,160 --> 00:19:43,600
so this is the bootstrap process uh

492
00:19:43,600 --> 00:19:46,000
you know just wanted to see if has

493
00:19:46,000 --> 00:19:47,679
anybody anyone been able to run this

494
00:19:47,679 --> 00:19:48,799
successfully

495
00:19:48,799 --> 00:19:51,600
in their uh with their cloned sample

496
00:19:51,600 --> 00:19:53,840
project

497
00:19:58,000 --> 00:20:00,080
yeah so it uses five gigs of space

498
00:20:00,080 --> 00:20:02,000
because the after uncompressing it

499
00:20:02,000 --> 00:20:07,039
downloads about a gigabyte of stuff

500
00:20:07,039 --> 00:20:08,960
cool okay great ah and we have people on

501
00:20:08,960 --> 00:20:11,120
windows ah we have one person who didn't

502
00:20:11,120 --> 00:20:13,440
have luck with it

503
00:20:13,440 --> 00:20:17,520
okay so windows is a bit of a challenge

504
00:20:17,520 --> 00:20:19,039
we've actually spent quite a bit of time

505
00:20:19,039 --> 00:20:20,559
trying to get windows

506
00:20:20,559 --> 00:20:22,400
going and it it's a little bit

507
00:20:22,400 --> 00:20:24,320
temperamental so

508
00:20:24,320 --> 00:20:25,919
if you have problems please post in the

509
00:20:25,919 --> 00:20:28,960
chat and um

510
00:20:28,960 --> 00:20:30,720
and some of the team are here so we can

511
00:20:30,720 --> 00:20:32,880
hopefully try to get it straightened out

512
00:20:32,880 --> 00:20:33,440
so

513
00:20:33,440 --> 00:20:36,960
please post a couple post a couple

514
00:20:36,960 --> 00:20:40,559
pace of the error messages

515
00:20:40,799 --> 00:20:42,320
okay cool so it sounds like we had some

516
00:20:42,320 --> 00:20:45,280
people successfully bootstrapping

517
00:20:45,280 --> 00:20:48,640
so that's great uh oh yeah i just

518
00:20:48,640 --> 00:20:49,679
noticed um

519
00:20:49,679 --> 00:20:51,840
pierce the if you have to you can't run

520
00:20:51,840 --> 00:20:53,840
inside get bash on windows it has to be

521
00:20:53,840 --> 00:20:54,679
in

522
00:20:54,679 --> 00:20:58,240
cmd.exe yeah sorry about that

523
00:20:58,240 --> 00:21:02,880
uh git bash is in this weird

524
00:21:02,880 --> 00:21:06,799
world where uh it's not quite

525
00:21:06,799 --> 00:21:09,039
linux and it's also not quite windows

526
00:21:09,039 --> 00:21:11,919
and it behaves a little strangely

527
00:21:11,919 --> 00:21:15,039
wsl actually does work but not with the

528
00:21:15,039 --> 00:21:15,600
usb

529
00:21:15,600 --> 00:21:17,919
interaction that you need for doing some

530
00:21:17,919 --> 00:21:19,360
of the flashing so if you're only doing

531
00:21:19,360 --> 00:21:22,000
host side development you can use wsl

532
00:21:22,000 --> 00:21:25,120
we've previously tested it works fine

533
00:21:25,120 --> 00:21:26,960
but for most of the stuff you're going

534
00:21:26,960 --> 00:21:28,240
to want to do an embedded you need

535
00:21:28,240 --> 00:21:29,440
access to

536
00:21:29,440 --> 00:21:31,919
usb so essentially you kind of need the

537
00:21:31,919 --> 00:21:32,720
native

538
00:21:32,720 --> 00:21:34,960
version i highly suggest windows

539
00:21:34,960 --> 00:21:37,679
terminal if you have not tried it it's

540
00:21:37,679 --> 00:21:40,159
really great

541
00:21:42,320 --> 00:21:43,919
okay so yeah git bash is probably the

542
00:21:43,919 --> 00:21:47,280
problem there cool

543
00:21:48,880 --> 00:21:52,640
all right and so this this will install

544
00:21:52,640 --> 00:21:54,320
the

545
00:21:54,320 --> 00:21:55,919
tnc core so if you're on the discovery

546
00:21:55,919 --> 00:21:59,840
you won't need this but i

547
00:22:00,000 --> 00:22:03,120
i'm using tt today

548
00:22:07,039 --> 00:22:08,400
so this will take just a moment yeah how

549
00:22:08,400 --> 00:22:10,480
many folks are using the discovery board

550
00:22:10,480 --> 00:22:11,200
actually

551
00:22:11,200 --> 00:22:14,400
oh yeah actually it's a great point um

552
00:22:14,400 --> 00:22:16,480
who yeah please please post in the chat

553
00:22:16,480 --> 00:22:18,320
if you're using teensy or

554
00:22:18,320 --> 00:22:22,240
discovery okay so we have one discovery

555
00:22:23,280 --> 00:22:25,039
we will have one challenge which is that

556
00:22:25,039 --> 00:22:28,000
i think on windows

557
00:22:28,000 --> 00:22:30,480
we might have some issues with rpc that

558
00:22:30,480 --> 00:22:33,039
we were discovering just earlier today

559
00:22:33,039 --> 00:22:36,000
so there might be some problems there so

560
00:22:36,000 --> 00:22:38,080
i want to apologize in advance

561
00:22:38,080 --> 00:22:41,840
when we get there it might not work

562
00:22:45,840 --> 00:22:55,520
okay cool so that ran great

563
00:22:55,520 --> 00:22:57,918
and then

564
00:22:58,799 --> 00:23:01,280
so actually while we're here as brings

565
00:23:01,280 --> 00:23:03,520
up an interesting point about pigweed

566
00:23:03,520 --> 00:23:07,200
so pigweed is using this build system

567
00:23:07,200 --> 00:23:08,400
one of the builds of sims pigweed

568
00:23:08,400 --> 00:23:10,559
supports currently supports gn

569
00:23:10,559 --> 00:23:13,600
and cmake gn is a build system that

570
00:23:13,600 --> 00:23:15,760
probably i would guess nobody here has

571
00:23:15,760 --> 00:23:17,039
heard of uh

572
00:23:17,039 --> 00:23:18,480
it's actually a curiosity has anybody

573
00:23:18,480 --> 00:23:20,960
here heard of gn outside of seeing the

574
00:23:20,960 --> 00:23:21,760
pigweed

575
00:23:21,760 --> 00:23:25,440
stuff yeah i'm not surprised

576
00:23:25,440 --> 00:23:29,520
yeah okay so gn is chrome's build system

577
00:23:29,520 --> 00:23:33,440
and you can kind of think of gn as basil

578
00:23:33,440 --> 00:23:36,640
but built with hindsight and design for

579
00:23:36,640 --> 00:23:38,400
client platforms where

580
00:23:38,400 --> 00:23:41,039
there's a large variety of configuration

581
00:23:41,039 --> 00:23:41,760
needed

582
00:23:41,760 --> 00:23:43,039
which is pretty different than the

583
00:23:43,039 --> 00:23:45,120
monorepo universe that most of

584
00:23:45,120 --> 00:23:48,720
google's engineers work in and so

585
00:23:48,720 --> 00:23:51,760
gn is inspired by basil but

586
00:23:51,760 --> 00:23:54,080
is in fact an imperative language as

587
00:23:54,080 --> 00:23:55,760
opposed to a declarative one

588
00:23:55,760 --> 00:23:58,880
like basil and it's kind of

589
00:23:58,880 --> 00:24:01,919
in my view uniquely suited to embedded

590
00:24:01,919 --> 00:24:02,640
or

591
00:24:02,640 --> 00:24:04,480
at least these environments where you

592
00:24:04,480 --> 00:24:05,679
want to have

593
00:24:05,679 --> 00:24:08,880
very differently configured builds and

594
00:24:08,880 --> 00:24:09,760
you're able to

595
00:24:09,760 --> 00:24:11,679
essentially run them all simultaneously

596
00:24:11,679 --> 00:24:13,919
with gn which is really cool

597
00:24:13,919 --> 00:24:16,960
so you'll see more of it later

598
00:24:16,960 --> 00:24:18,480
yeah cmake is the other one that seaweed

599
00:24:18,480 --> 00:24:20,000
supports and so if you have an existing

600
00:24:20,000 --> 00:24:21,679
project on cmake

601
00:24:21,679 --> 00:24:24,880
you can just list the subdirectory from

602
00:24:24,880 --> 00:24:26,240
cmake and you'll just be able to call

603
00:24:26,240 --> 00:24:27,520
stuff from pigweed

604
00:24:27,520 --> 00:24:29,600
but uh if you're going to go all in a

605
00:24:29,600 --> 00:24:31,279
big weed i think gn

606
00:24:31,279 --> 00:24:33,840
is really nice so you'll you'll see it's

607
00:24:33,840 --> 00:24:36,799
uh pretty fast

608
00:24:36,880 --> 00:24:42,400
okay so great so that ran

609
00:24:43,440 --> 00:24:47,279
now compiling stuff

610
00:24:47,279 --> 00:24:50,400
is usually reasonably quick um

611
00:24:50,400 --> 00:24:52,400
and so this is showing that gn oh by the

612
00:24:52,400 --> 00:24:53,760
way gn stands for

613
00:24:53,760 --> 00:24:56,880
generate ninja very creative

614
00:24:56,880 --> 00:24:59,039
and it's indeed quite fast so ninja is

615
00:24:59,039 --> 00:25:00,559
what's used to build a chrome it's used

616
00:25:00,559 --> 00:25:01,120
to build

617
00:25:01,120 --> 00:25:04,639
android and a bunch of other things

618
00:25:04,720 --> 00:25:07,679
so gn targets exclusively ninja but

619
00:25:07,679 --> 00:25:09,840
offers higher level constructs than

620
00:25:09,840 --> 00:25:13,120
what the one ninja offers

621
00:25:13,120 --> 00:25:16,320
ninjas kind of like you

622
00:25:16,320 --> 00:25:18,559
think of ninja as the assembly language

623
00:25:18,559 --> 00:25:20,720
of build systems

624
00:25:20,720 --> 00:25:24,000
it is a very focused tool that only

625
00:25:24,000 --> 00:25:26,880
executes build instructions very quickly

626
00:25:26,880 --> 00:25:28,400
and quickly determines the files have

627
00:25:28,400 --> 00:25:29,520
changed

628
00:25:29,520 --> 00:25:32,400
so it can do a no op rebuild very

629
00:25:32,400 --> 00:25:34,559
quickly

630
00:25:34,559 --> 00:25:36,960
it's also targetable from cmake which is

631
00:25:36,960 --> 00:25:39,200
nice

632
00:25:41,600 --> 00:25:45,760
okay cool so while that's running

633
00:25:50,080 --> 00:25:54,320
all right i'm gonna skip these steps

634
00:25:54,840 --> 00:25:57,840
great

635
00:25:58,640 --> 00:26:01,919
did someone have a question

636
00:26:02,960 --> 00:26:06,080
no okay uh no question i was just saying

637
00:26:06,080 --> 00:26:08,080
if you have there's a little gn

638
00:26:08,080 --> 00:26:09,840
reference at the bottom of the first

639
00:26:09,840 --> 00:26:10,559
setup page

640
00:26:10,559 --> 00:26:13,678
in case everyone needs it

641
00:26:17,440 --> 00:26:21,840
oh yeah yeah so there's some stuff here

642
00:26:21,840 --> 00:26:26,720
about gn and one one nice benefit to gn

643
00:26:26,720 --> 00:26:29,760
is that the code is clean and pretty

644
00:26:29,760 --> 00:26:30,320
short

645
00:26:30,320 --> 00:26:33,039
so you can just go in and hack it i was

646
00:26:33,039 --> 00:26:33,919
able to

647
00:26:33,919 --> 00:26:36,960
make a change to gn having not worked in

648
00:26:36,960 --> 00:26:38,400
the source code in

649
00:26:38,400 --> 00:26:40,559
in a day which was really great for even

650
00:26:40,559 --> 00:26:42,640
less than a day actually

651
00:26:42,640 --> 00:26:46,159
so that was pretty helpful okay so it's

652
00:26:46,159 --> 00:26:47,919
almost done building

653
00:26:47,919 --> 00:26:49,120
and actually while this is building i

654
00:26:49,120 --> 00:26:50,799
want to point something out which is

655
00:26:50,799 --> 00:26:51,679
that

656
00:26:51,679 --> 00:26:54,159
you can see this this first part here is

657
00:26:54,159 --> 00:26:56,480
the it's called a

658
00:26:56,480 --> 00:26:57,919
what we call a pigley target but

659
00:26:57,919 --> 00:26:59,520
essentially

660
00:26:59,520 --> 00:27:01,919
in gn there's these separate build

661
00:27:01,919 --> 00:27:03,039
environments

662
00:27:03,039 --> 00:27:05,120
for each of the targets so in this case

663
00:27:05,120 --> 00:27:06,159
it's building

664
00:27:06,159 --> 00:27:09,120
for teensy it's also building for

665
00:27:09,120 --> 00:27:10,799
discovery

666
00:27:10,799 --> 00:27:13,120
and additionally building for the host

667
00:27:13,120 --> 00:27:14,799
using the mac tooling

668
00:27:14,799 --> 00:27:16,559
so all these are being built in a single

669
00:27:16,559 --> 00:27:18,159
shot of

670
00:27:18,159 --> 00:27:21,919
of ninja which is pretty nice

671
00:27:21,919 --> 00:27:24,080
and so if you're doing development you

672
00:27:24,080 --> 00:27:25,440
can kind of get

673
00:27:25,440 --> 00:27:27,679
these things built at the same time and

674
00:27:27,679 --> 00:27:29,679
get the benefit of seeing that oh i may

675
00:27:29,679 --> 00:27:30,799
have made something that works on my

676
00:27:30,799 --> 00:27:32,240
local board but i broke

677
00:27:32,240 --> 00:27:33,679
the host build and you'll see it right

678
00:27:33,679 --> 00:27:35,039
away you don't have to wait until it

679
00:27:35,039 --> 00:27:35,760
gets

680
00:27:35,760 --> 00:27:39,279
pushed up into uh continuous integration

681
00:27:39,279 --> 00:27:42,559
um when you make the changes

682
00:27:42,880 --> 00:27:46,799
okay so i think this is

683
00:27:46,799 --> 00:27:50,240
the build and

684
00:27:51,200 --> 00:28:03,840
yeah great

685
00:28:07,600 --> 00:28:10,000
all right just looking good chat great

686
00:28:10,000 --> 00:28:11,360
okay so this list

687
00:28:11,360 --> 00:28:13,360
is showing some of the things that have

688
00:28:13,360 --> 00:28:14,960
built have been built

689
00:28:14,960 --> 00:28:18,080
and you can see that for example

690
00:28:18,080 --> 00:28:19,760
the logging event handler has been built

691
00:28:19,760 --> 00:28:21,520
for a couple different targets

692
00:28:21,520 --> 00:28:25,120
so one is host which is in my case a mac

693
00:28:25,120 --> 00:28:28,320
another one is the discovery

694
00:28:28,320 --> 00:28:30,880
and here's another one unit test uh you

695
00:28:30,880 --> 00:28:32,320
know the unit test library itself

696
00:28:32,320 --> 00:28:35,760
is built for arduino the host and the

697
00:28:35,760 --> 00:28:38,240
discovery

698
00:28:38,960 --> 00:28:40,960
okay so this is the this is basically it

699
00:28:40,960 --> 00:28:42,640
for build so i'm ready for us to move on

700
00:28:42,640 --> 00:28:45,919
to blinky before i do that

701
00:28:45,919 --> 00:28:50,000
do people have questions or thoughts

702
00:28:53,200 --> 00:28:54,159
how many people were able to

703
00:28:54,159 --> 00:28:56,080
successfully get through to running the

704
00:28:56,080 --> 00:28:57,440
build

705
00:28:57,440 --> 00:29:00,480
just put your hand up if yes or no or

706
00:29:00,480 --> 00:29:03,520
say yes or no in the chat

707
00:29:04,640 --> 00:29:08,480
cool i'm really glad this is all working

708
00:29:08,480 --> 00:29:11,520
nice awesome

709
00:29:11,520 --> 00:29:14,639
okay cool

710
00:29:17,360 --> 00:29:19,600
still building okay in that case i'm

711
00:29:19,600 --> 00:29:22,000
gonna flip over to blinky

712
00:29:22,000 --> 00:29:24,840
and hopefully any ongoing builds will be

713
00:29:24,840 --> 00:29:26,240
finished

714
00:29:26,240 --> 00:29:29,520
by the time we get through this

715
00:29:32,000 --> 00:29:34,720
okay so blinky of course the canonical

716
00:29:34,720 --> 00:29:35,679
thing to

717
00:29:35,679 --> 00:29:37,600
build in firmware when you're working

718
00:29:37,600 --> 00:29:39,200
with a new device or a new os

719
00:29:39,200 --> 00:29:42,480
is to blink an led of course bigwig is

720
00:29:42,480 --> 00:29:43,440
no different

721
00:29:43,440 --> 00:29:45,360
and we're going to do it by going

722
00:29:45,360 --> 00:29:48,720
through these series of commands

723
00:29:48,720 --> 00:29:52,399
so i think this was already

724
00:29:52,399 --> 00:29:54,399
done in the last step but we can run

725
00:29:54,399 --> 00:29:57,039
this again

726
00:30:05,520 --> 00:30:09,039
yeah and this was already built

727
00:30:09,039 --> 00:30:11,679
but probably won't do anything yeah

728
00:30:11,679 --> 00:30:13,039
actually i think one thing to note here

729
00:30:13,039 --> 00:30:13,600
is

730
00:30:13,600 --> 00:30:17,039
that that build this no-op build

731
00:30:17,039 --> 00:30:19,840
was super fast it only took i don't know

732
00:30:19,840 --> 00:30:22,000
a second or two

733
00:30:22,000 --> 00:30:23,440
and a fair number of things are being

734
00:30:23,440 --> 00:30:28,240
built here so that's why i like ninja

735
00:30:29,760 --> 00:30:32,960
okay so

736
00:30:32,960 --> 00:30:35,279
this command that i'm going to paste is

737
00:30:35,279 --> 00:30:36,480
going to

738
00:30:36,480 --> 00:30:39,840
flash the device with blinky and i want

739
00:30:39,840 --> 00:30:41,360
to point out a couple things here

740
00:30:41,360 --> 00:30:45,440
so first off is this arduino test runner

741
00:30:45,440 --> 00:30:47,200
which is the

742
00:30:47,200 --> 00:30:49,919
uh we call the target well target test

743
00:30:49,919 --> 00:30:50,320
runner

744
00:30:50,320 --> 00:30:51,760
there's one of these or something like

745
00:30:51,760 --> 00:30:53,919
this for every one of the targets

746
00:30:53,919 --> 00:30:56,399
including the discovery the host and so

747
00:30:56,399 --> 00:30:57,360
on

748
00:30:57,360 --> 00:30:59,519
and this is a mechanism that lets you

749
00:30:59,519 --> 00:31:01,279
customize how your particular custom

750
00:31:01,279 --> 00:31:02,080
product

751
00:31:02,080 --> 00:31:04,799
is handled uh and so that's why right

752
00:31:04,799 --> 00:31:06,559
now we don't have for example oh there's

753
00:31:06,559 --> 00:31:07,120
a

754
00:31:07,120 --> 00:31:08,799
pig lead flash script that works for

755
00:31:08,799 --> 00:31:10,320
everything we don't have it

756
00:31:10,320 --> 00:31:13,279
because every product is a kind of a

757
00:31:13,279 --> 00:31:14,960
special snowflake you know unique and

758
00:31:14,960 --> 00:31:15,679
different

759
00:31:15,679 --> 00:31:18,480
and so typically some custom flashing or

760
00:31:18,480 --> 00:31:19,360
code or

761
00:31:19,360 --> 00:31:22,399
little bits are needed in order to uh to

762
00:31:22,399 --> 00:31:23,360
flash the device

763
00:31:23,360 --> 00:31:26,000
and so that's what this in this case

764
00:31:26,000 --> 00:31:28,559
targeting a test runner is specific to

765
00:31:28,559 --> 00:31:31,840
running arduino stuff on

766
00:31:31,840 --> 00:31:34,640
pigweed so yeah you can see what this is

767
00:31:34,640 --> 00:31:35,519
doing

768
00:31:35,519 --> 00:31:37,679
oh there's a bunch of config we actually

769
00:31:37,679 --> 00:31:40,320
generate the config as part of gn

770
00:31:40,320 --> 00:31:41,840
um it's maybe a bit of a long

771
00:31:41,840 --> 00:31:43,600
explanation so i won't go into it

772
00:31:43,600 --> 00:31:45,039
but it's actually kind of interesting

773
00:31:45,039 --> 00:31:47,919
the way the whole thing works

774
00:31:47,919 --> 00:31:49,600
in this case we're not actually trying

775
00:31:49,600 --> 00:31:51,120
to run the test we're just trying to

776
00:31:51,120 --> 00:31:52,080
flash

777
00:31:52,080 --> 00:31:54,399
so that's what it's doing here and then

778
00:31:54,399 --> 00:31:56,240
since we're doing a multi-target build

779
00:31:56,240 --> 00:31:58,000
this path is kind of long

780
00:31:58,000 --> 00:32:00,159
but you can see here that for the

781
00:32:00,159 --> 00:32:01,760
arduino target

782
00:32:01,760 --> 00:32:03,600
there's object files and then inside the

783
00:32:03,600 --> 00:32:05,519
workshop and finally we have the blinky

784
00:32:05,519 --> 00:32:05,919
elf

785
00:32:05,919 --> 00:32:09,360
so let's run it and you could also see

786
00:32:09,360 --> 00:32:10,159
over here

787
00:32:10,159 --> 00:32:11,360
i don't know if it was fast enough for

788
00:32:11,360 --> 00:32:13,440
you to notice but the

789
00:32:13,440 --> 00:32:16,960
tnt flasher went active while

790
00:32:16,960 --> 00:32:21,760
i was doing this um this flashing

791
00:32:22,399 --> 00:32:27,039
so it looked like it it ran and then

792
00:32:27,519 --> 00:32:30,799
so right now the

793
00:32:31,120 --> 00:32:34,399
device oh actually we can just uh

794
00:32:34,399 --> 00:32:37,200
cool so flashed great before i go any

795
00:32:37,200 --> 00:32:38,799
further

796
00:32:38,799 --> 00:32:40,240
uh where is the flashing command okay

797
00:32:40,240 --> 00:32:43,120
flashing commands is

798
00:32:43,120 --> 00:32:46,720
here i'll just paste it to the chat

799
00:32:46,720 --> 00:32:51,360
um here so if you go to

800
00:32:51,360 --> 00:32:54,240
o1 blinky

801
00:32:55,120 --> 00:32:58,480
and then scroll down to flashblinky.elf

802
00:32:58,480 --> 00:33:02,480
this command or if you're on discovery

803
00:33:02,480 --> 00:33:05,519
it should be this command here

804
00:33:08,320 --> 00:33:11,279
i apologize if that um the discovery

805
00:33:11,279 --> 00:33:12,799
board command doesn't work i

806
00:33:12,799 --> 00:33:15,440
don't have a board to test it with it

807
00:33:15,440 --> 00:33:17,279
looks like at least one person got it to

808
00:33:17,279 --> 00:33:17,919
flash so

809
00:33:17,919 --> 00:33:21,200
that's good nice all right yeah which is

810
00:33:21,200 --> 00:33:21,840
awesome

811
00:33:21,840 --> 00:33:25,440
okay cool all right and we'll go through

812
00:33:25,440 --> 00:33:27,760
the code in just a second

813
00:33:27,760 --> 00:33:32,000
so all right for teensy

814
00:33:32,000 --> 00:33:35,440
currently the device doesn't actually

815
00:33:35,440 --> 00:33:38,000
start until you connect by a serial

816
00:33:38,000 --> 00:33:39,120
which is something we're

817
00:33:39,120 --> 00:33:42,240
going to probably change but uh let me

818
00:33:42,240 --> 00:33:42,720
just

819
00:33:42,720 --> 00:33:45,360
pull up my

820
00:33:49,440 --> 00:33:53,840
yeah so

821
00:33:58,080 --> 00:34:02,559
can people see the blinking on the

822
00:34:02,559 --> 00:34:04,720
on on my video i'm not sure if the video

823
00:34:04,720 --> 00:34:07,840
is still showing

824
00:34:09,440 --> 00:34:13,520
yep yeah okay great cool

825
00:34:13,520 --> 00:34:14,800
so in short this is what you should be

826
00:34:14,800 --> 00:34:17,918
seeing if you are on teensy it might not

827
00:34:17,918 --> 00:34:19,119
be working

828
00:34:19,119 --> 00:34:23,199
until you run the serial command

829
00:34:23,199 --> 00:34:26,560
here uh which

830
00:34:26,560 --> 00:34:30,239
as you'll see might in fact

831
00:34:30,560 --> 00:34:32,239
print and don't ignore that previous

832
00:34:32,239 --> 00:34:35,839
command oops

833
00:34:40,719 --> 00:34:42,560
so this command here python dash m

834
00:34:42,560 --> 00:34:44,239
serial tools.mini term

835
00:34:44,239 --> 00:34:46,879
raw this is connecting directly to in

836
00:34:46,879 --> 00:34:49,918
this case the tnc serial port

837
00:34:49,918 --> 00:34:52,960
okay and now this looks confusing what's

838
00:34:52,960 --> 00:34:55,599
going on it's viewing gibberish

839
00:34:55,599 --> 00:34:57,440
it's actually not and i'll i'll go into

840
00:34:57,440 --> 00:34:58,800
the details of what this is doing in a

841
00:34:58,800 --> 00:34:59,920
little bit

842
00:34:59,920 --> 00:35:02,960
but what you're seeing here is these raw

843
00:35:02,960 --> 00:35:06,079
hdlc packets which is our transport over

844
00:35:06,079 --> 00:35:06,960
uart

845
00:35:06,960 --> 00:35:08,640
uh actually you could choose whatever

846
00:35:08,640 --> 00:35:09,760
transport you want but the one that

847
00:35:09,760 --> 00:35:11,119
we're using for the example

848
00:35:11,119 --> 00:35:14,320
is this uh and so let me just

849
00:35:14,320 --> 00:35:17,839
ctrl c out of this

850
00:35:18,720 --> 00:35:21,119
um yeah now it turns out if you're on

851
00:35:21,119 --> 00:35:23,599
teensy you do need to run this command

852
00:35:23,599 --> 00:35:26,320
if you don't that the the teensy won't

853
00:35:26,320 --> 00:35:26,800
actually

854
00:35:26,800 --> 00:35:30,480
blink i'm not sure why it starts

855
00:35:30,480 --> 00:35:32,800
thoughts

856
00:35:37,280 --> 00:35:41,040
there it is okay

857
00:35:41,040 --> 00:35:42,950
so i see

858
00:35:42,950 --> 00:35:46,410
[Music]

859
00:35:49,119 --> 00:35:51,119
yes is there a wild serial semicolon in

860
00:35:51,119 --> 00:35:54,079
the code yes there is

861
00:35:54,079 --> 00:35:56,240
yeah we're going to remove it but it's

862
00:35:56,240 --> 00:35:57,440
just there for now

863
00:35:57,440 --> 00:35:59,280
yeah so if if anyone has a teensy and

864
00:35:59,280 --> 00:36:00,560
it's not blinking

865
00:36:00,560 --> 00:36:02,320
try that command that i posted

866
00:36:02,320 --> 00:36:03,920
essentially

867
00:36:03,920 --> 00:36:06,560
the tnt blocks that boot waiting for the

868
00:36:06,560 --> 00:36:07,599
serial to come up

869
00:36:07,599 --> 00:36:09,599
and so once you connect to it on serial

870
00:36:09,599 --> 00:36:13,280
it will start executing

871
00:36:13,280 --> 00:36:16,320
um cool so it sounds like we had a few

872
00:36:16,320 --> 00:36:18,880
people who are successfully

873
00:36:18,880 --> 00:36:21,680
able to get the blinking i think pierce

874
00:36:21,680 --> 00:36:22,079
is

875
00:36:22,079 --> 00:36:25,200
stuck okay yeah sorry pierce

876
00:36:25,200 --> 00:36:27,760
about the windows problems thanks for

877
00:36:27,760 --> 00:36:30,400
being patient

878
00:36:32,960 --> 00:36:38,000
could not find attached device huh

879
00:36:38,079 --> 00:36:41,839
was it able to flash

880
00:36:46,320 --> 00:36:49,119
i had your tt loader like so i tried

881
00:36:49,119 --> 00:36:50,320
blinky from

882
00:36:50,320 --> 00:36:52,880
regular old teensy like the blinky

883
00:36:52,880 --> 00:36:55,119
example sketch just to verify

884
00:36:55,119 --> 00:36:57,839
and like that worked fine and then i ran

885
00:36:57,839 --> 00:36:58,640
the

886
00:36:58,640 --> 00:37:01,200
i guess flashing command um except i

887
00:37:01,200 --> 00:37:02,400
realized i was running the flashy

888
00:37:02,400 --> 00:37:03,359
command

889
00:37:03,359 --> 00:37:08,800
from the pigweed main repository uh

890
00:37:08,800 --> 00:37:12,720
uh read me like pigweed.googlesource.com

891
00:37:12,720 --> 00:37:14,720
pigweed sample project that read me

892
00:37:14,720 --> 00:37:16,000
which is not the blinky

893
00:37:16,000 --> 00:37:18,720
one so that looked like it successfully

894
00:37:18,720 --> 00:37:20,400
flashed then running the

895
00:37:20,400 --> 00:37:23,040
uh teensy flashblinky.elf command from

896
00:37:23,040 --> 00:37:23,440
the

897
00:37:23,440 --> 00:37:25,520
link you just sent out that failed and

898
00:37:25,520 --> 00:37:28,079
would not work

899
00:37:34,839 --> 00:37:37,839
hmm

900
00:37:39,119 --> 00:37:41,839
i'm not sure

901
00:37:45,520 --> 00:37:48,000
so you flat doesn't flash and then it or

902
00:37:48,000 --> 00:37:49,119
it's just the uh

903
00:37:49,119 --> 00:37:51,520
it can't find the attached device oh i

904
00:37:51,520 --> 00:37:53,040
actually i just went back

905
00:37:53,040 --> 00:37:56,079
and opened teensyduino and reflashed the

906
00:37:56,079 --> 00:37:59,599
like oem blinky again this time it

907
00:37:59,599 --> 00:38:01,680
successfully flashed the firmware device

908
00:38:01,680 --> 00:38:04,079
to device when i ran your flash command

909
00:38:04,079 --> 00:38:05,680
but i have no flashing led

910
00:38:05,680 --> 00:38:10,000
is it hardwired to the pin 4.0

911
00:38:10,000 --> 00:38:13,440
oh i wonder if that's the issue actually

912
00:38:13,440 --> 00:38:15,760
well so it once you flash it will act

913
00:38:15,760 --> 00:38:17,359
for teensy it will not work

914
00:38:17,359 --> 00:38:19,760
until you connect through the cereal um

915
00:38:19,760 --> 00:38:20,400
oh i guess

916
00:38:20,400 --> 00:38:22,000
yeah yeah sorry that's that's what i was

917
00:38:22,000 --> 00:38:23,119
missing i was a little behind on that

918
00:38:23,119 --> 00:38:23,599
one

919
00:38:23,599 --> 00:38:25,520
you're right yeah and now our bad that's

920
00:38:25,520 --> 00:38:26,800
uh

921
00:38:26,800 --> 00:38:28,240
yeah it's just something we forgot to

922
00:38:28,240 --> 00:38:32,000
take out

923
00:38:32,000 --> 00:38:34,400
to tools serial monitor board at usb is

924
00:38:34,400 --> 00:38:36,400
not available

925
00:38:36,400 --> 00:38:39,200
tool serial all right so when you do

926
00:38:39,200 --> 00:38:39,920
this

927
00:38:39,920 --> 00:38:42,800
so i'm showing the oh python m serial

928
00:38:42,800 --> 00:38:43,839
tools yeah yeah okay

929
00:38:43,839 --> 00:38:47,599
let's try it that way then um

930
00:38:47,599 --> 00:38:50,720
and then just select four

931
00:38:53,359 --> 00:38:55,200
yeah if you connect with the serial it

932
00:38:55,200 --> 00:38:57,200
should blink the light

933
00:38:57,200 --> 00:39:00,079
as soon as you connect but it won't

934
00:39:00,079 --> 00:39:02,240
until then

935
00:39:02,240 --> 00:39:05,680
uh no oh i open a new window i have to

936
00:39:05,680 --> 00:39:09,040
go activate the environment again

937
00:39:10,640 --> 00:39:12,800
yeah so the environment activating is

938
00:39:12,800 --> 00:39:15,680
something that

939
00:39:15,680 --> 00:39:18,880
you're kind of there's just no good

940
00:39:18,880 --> 00:39:20,000
solution

941
00:39:20,000 --> 00:39:22,960
if you don't have an activate thing then

942
00:39:22,960 --> 00:39:24,880
you rely on people installing

943
00:39:24,880 --> 00:39:28,160
stuff globally which ends up being also

944
00:39:28,160 --> 00:39:30,000
a nightmare like it's easier to debug

945
00:39:30,000 --> 00:39:31,520
like oh you forgot to run activate

946
00:39:31,520 --> 00:39:32,480
versus

947
00:39:32,480 --> 00:39:34,640
your environment is in a mysteriously

948
00:39:34,640 --> 00:39:36,880
terrible and unknowable situation

949
00:39:36,880 --> 00:39:38,720
and who knows why random commands don't

950
00:39:38,720 --> 00:39:40,400
work or are using the wrong version of

951
00:39:40,400 --> 00:39:41,520
programs

952
00:39:41,520 --> 00:39:44,079
i literally just rebuilt my os before

953
00:39:44,079 --> 00:39:44,880
remoticon

954
00:39:44,880 --> 00:39:48,160
for that specific reason yes so

955
00:39:48,160 --> 00:39:50,000
i'm glad that you understand the pain so

956
00:39:50,000 --> 00:39:51,520
that's why we have activate

957
00:39:51,520 --> 00:39:54,240
and take a very strong stance on not

958
00:39:54,240 --> 00:39:55,359
installing

959
00:39:55,359 --> 00:39:58,960
random junk into your computer

960
00:39:58,960 --> 00:40:01,119
since i have personally spent quite a

961
00:40:01,119 --> 00:40:02,960
bit of time

962
00:40:02,960 --> 00:40:05,680
helping many people deal with these

963
00:40:05,680 --> 00:40:07,280
environment problems

964
00:40:07,280 --> 00:40:09,920
so we take a strong stance on that one

965
00:40:09,920 --> 00:40:12,000
okay were you able to get your

966
00:40:12,000 --> 00:40:15,520
the serial to connect

967
00:40:20,880 --> 00:40:23,839
available serial ports not the teensy

968
00:40:23,839 --> 00:40:25,680
still working

969
00:40:25,680 --> 00:40:27,599
that's odd try maybe try rebooting the

970
00:40:27,599 --> 00:40:29,359
teensy

971
00:40:29,359 --> 00:40:32,960
or just or replugging it

972
00:40:33,200 --> 00:40:34,880
because this this is part of the tnt

973
00:40:34,880 --> 00:40:37,520
firmware so i'm not sure

974
00:40:37,520 --> 00:40:41,920
uh yeah because the serial stuff is not

975
00:40:41,920 --> 00:40:46,800
inside pigweed's code it's in the tnt

976
00:40:50,839 --> 00:40:53,839
core

977
00:41:04,000 --> 00:41:08,400
okay uh so

978
00:41:08,400 --> 00:41:11,520
i think i might move forward

979
00:41:11,520 --> 00:41:12,880
because it sounds like there are some

980
00:41:12,880 --> 00:41:15,040
other people sorry sorry alex but i

981
00:41:15,040 --> 00:41:17,680
think we probably should move forward

982
00:41:17,680 --> 00:41:22,240
um maybe somebody

983
00:41:22,240 --> 00:41:25,439
from my team can help out

984
00:41:26,160 --> 00:41:27,440
there's a there's a few people who work

985
00:41:27,440 --> 00:41:30,880
on bigweed here in the chat

986
00:41:30,960 --> 00:41:33,599
okay okay cool all right i'm gonna move

987
00:41:33,599 --> 00:41:34,800
forward

988
00:41:34,800 --> 00:41:39,520
uh yeah so

989
00:41:40,480 --> 00:41:42,400
great so you can see this is spewing

990
00:41:42,400 --> 00:41:44,079
some output

991
00:41:44,079 --> 00:41:46,960
and it's a little bit unclear what this

992
00:41:46,960 --> 00:41:49,359
is doing right what is ascending

993
00:41:49,359 --> 00:41:52,640
so in short it's sending packets

994
00:41:52,640 --> 00:41:54,800
and you actually see an output here the

995
00:41:54,800 --> 00:41:56,240
tilt character is in fact

996
00:41:56,240 --> 00:41:59,359
the packet delimiter

997
00:41:59,359 --> 00:42:00,480
kind of think of it as like a curly

998
00:42:00,480 --> 00:42:02,400
blaze curly brace and something like

999
00:42:02,400 --> 00:42:03,760
jason

1000
00:42:03,760 --> 00:42:05,520
and then the first part here in this

1001
00:42:05,520 --> 00:42:08,160
case is um

1002
00:42:08,160 --> 00:42:10,480
is actually our tokenized logging and

1003
00:42:10,480 --> 00:42:13,280
then this last bit here is the

1004
00:42:13,280 --> 00:42:15,440
it's basically the crc for the message

1005
00:42:15,440 --> 00:42:17,040
so we have some error checking

1006
00:42:17,040 --> 00:42:18,079
so that's what you're seeing here so

1007
00:42:18,079 --> 00:42:20,160
it's not really that incomprehensible as

1008
00:42:20,160 --> 00:42:21,359
you might think

1009
00:42:21,359 --> 00:42:23,280
um if we didn't have tokenized logging

1010
00:42:23,280 --> 00:42:25,359
it would be a lot easier to understand

1011
00:42:25,359 --> 00:42:28,400
what's happening okay so let's actually

1012
00:42:28,400 --> 00:42:29,760
decode it

1013
00:42:29,760 --> 00:42:35,520
so yeah so we have

1014
00:42:35,520 --> 00:42:37,040
all right so now here i'm going to jump

1015
00:42:37,040 --> 00:42:38,640
ahead a little bit we're going to

1016
00:42:38,640 --> 00:42:41,359
see more of this in the next exercise

1017
00:42:41,359 --> 00:42:43,119
but

1018
00:42:43,119 --> 00:42:45,839
we can

1019
00:42:55,760 --> 00:42:57,680
okay so this command i'm running i'll

1020
00:42:57,680 --> 00:42:59,920
talk about in a moment but in short

1021
00:42:59,920 --> 00:43:02,960
it's connecting to the rpc service

1022
00:43:02,960 --> 00:43:05,760
and using

1023
00:43:09,680 --> 00:43:11,599
okay so we're going to go back to this

1024
00:43:11,599 --> 00:43:14,079
command in a second

1025
00:43:14,079 --> 00:43:17,280
and this command here started up the

1026
00:43:17,280 --> 00:43:18,880
serial connection

1027
00:43:18,880 --> 00:43:21,920
which is also in addition to

1028
00:43:21,920 --> 00:43:25,119
handling rbc which i will talk about

1029
00:43:25,119 --> 00:43:28,720
is also putting logs to a file

1030
00:43:28,720 --> 00:43:31,760
okay so

1031
00:43:31,760 --> 00:43:34,960
let's see is this still going

1032
00:43:35,200 --> 00:43:41,839
i'm not sure why this isn't following

1033
00:44:03,440 --> 00:44:05,280
okay so i'm not sure why this is not

1034
00:44:05,280 --> 00:44:07,359
tailing actually

1035
00:44:07,359 --> 00:44:23,839
this is odd

1036
00:44:34,240 --> 00:44:36,480
okay well for some reason this is not

1037
00:44:36,480 --> 00:44:37,359
working right now

1038
00:44:37,359 --> 00:44:39,680
um

1039
00:44:41,839 --> 00:44:45,040
can you um just tail the log file raw

1040
00:44:45,040 --> 00:44:48,839
see if anything's going to see a good

1041
00:44:48,839 --> 00:44:50,400
point

1042
00:44:50,400 --> 00:44:53,200
appears not

1043
00:44:57,520 --> 00:45:00,800
maybe disconnect the tc and then

1044
00:45:00,800 --> 00:45:05,040
start it over

1045
00:45:05,040 --> 00:45:09,920
i don't think this is a teensy because

1046
00:45:13,359 --> 00:45:18,160
yeah so this is working

1047
00:45:18,160 --> 00:45:21,359
but okay we can try it

1048
00:45:24,640 --> 00:45:26,800
while we're we're trying to figure this

1049
00:45:26,800 --> 00:45:28,560
out uh one thing i want to mention is

1050
00:45:28,560 --> 00:45:29,359
kind of cool

1051
00:45:29,359 --> 00:45:33,040
so our teensy support is pretty new

1052
00:45:33,040 --> 00:45:34,319
and the way it works is pretty

1053
00:45:34,319 --> 00:45:36,160
interesting it actually downloads the

1054
00:45:36,160 --> 00:45:38,240
arduino

1055
00:45:38,240 --> 00:45:41,920
installer and uses the metadata for

1056
00:45:41,920 --> 00:45:45,280
how teensy and arduino works

1057
00:45:45,280 --> 00:45:47,760
to actually generate the build files for

1058
00:45:47,760 --> 00:45:48,720
gn

1059
00:45:48,720 --> 00:45:50,319
uh which is kind of interesting so it

1060
00:45:50,319 --> 00:45:52,560
opens up the door supporting a lot more

1061
00:45:52,560 --> 00:45:56,000
arduino devices than just tp and so

1062
00:45:56,000 --> 00:45:57,200
that's kind of an interesting

1063
00:45:57,200 --> 00:46:01,440
little tidbit

1064
00:46:01,440 --> 00:46:05,040
okay so this is working

1065
00:46:12,880 --> 00:46:18,000
hmm this is odd i'm not sure why this is

1066
00:46:18,000 --> 00:46:20,240
not

1067
00:46:20,640 --> 00:46:29,839
sending the data

1068
00:46:35,920 --> 00:46:37,680
okay i'm not sure why this is not

1069
00:46:37,680 --> 00:46:40,480
working i'm going to move

1070
00:46:40,480 --> 00:46:43,760
forward but in short what i want you to

1071
00:46:43,760 --> 00:46:45,280
take away from this is that

1072
00:46:45,280 --> 00:46:48,480
the logs are coming over through this

1073
00:46:48,480 --> 00:46:50,720
hdlc mechanism

1074
00:46:50,720 --> 00:46:54,079
and they're tokenized

1075
00:46:54,079 --> 00:46:56,240
which is kind of an interesting concept

1076
00:46:56,240 --> 00:46:58,480
so let me pull up some code

1077
00:46:58,480 --> 00:47:02,640
and just show what this looks like

1078
00:47:03,040 --> 00:47:05,760
i'm cure i could demo it if you want was

1079
00:47:05,760 --> 00:47:08,319
it working for you

1080
00:47:08,319 --> 00:47:11,839
it was

1081
00:47:13,040 --> 00:47:16,240
okay so this code here is a pretty

1082
00:47:16,240 --> 00:47:18,240
typical

1083
00:47:18,240 --> 00:47:21,760
uh you know blank loop

1084
00:47:21,760 --> 00:47:25,440
and it just initializes board led

1085
00:47:25,440 --> 00:47:28,400
and then does this log log command which

1086
00:47:28,400 --> 00:47:29,440
is um

1087
00:47:29,440 --> 00:47:30,640
behind which there's a bunch of

1088
00:47:30,640 --> 00:47:34,640
machinery turns an led on

1089
00:47:34,640 --> 00:47:38,480
waits for a second and then turns it off

1090
00:47:38,480 --> 00:47:41,920
and does it forever indefinitely

1091
00:47:41,920 --> 00:47:44,240
and this is a all those bare metals

1092
00:47:44,240 --> 00:47:47,119
there's no art class here

1093
00:47:47,119 --> 00:47:50,640
um the interesting thing is that this

1094
00:47:50,640 --> 00:47:51,520
blink high

1095
00:47:51,520 --> 00:47:54,240
this text here is actually never in the

1096
00:47:54,240 --> 00:47:55,359
binary

1097
00:47:55,359 --> 00:47:59,680
so i'll show you what happens in short

1098
00:47:59,680 --> 00:48:03,280
these strings are tokenized into

1099
00:48:03,280 --> 00:48:06,480
an identifier a 32-bit

1100
00:48:06,480 --> 00:48:09,599
hash basically

1101
00:48:11,040 --> 00:48:14,400
and you can see that

1102
00:48:15,200 --> 00:48:20,480
here actually let me just install there

1103
00:48:20,480 --> 00:48:21,760
yeah so in this case there's actually a

1104
00:48:21,760 --> 00:48:23,599
few other things in here but this

1105
00:48:23,599 --> 00:48:26,960
this file tokenizerdatabase.csv

1106
00:48:26,960 --> 00:48:30,000
is showing all of the different

1107
00:48:30,000 --> 00:48:33,440
strings that are logged in the binary

1108
00:48:33,440 --> 00:48:36,800
and you can use the separate program

1109
00:48:36,800 --> 00:48:40,079
to decode these tokenized logs on the

1110
00:48:40,079 --> 00:48:41,359
host side

1111
00:48:41,359 --> 00:48:42,640
without having to store them on the

1112
00:48:42,640 --> 00:48:44,880
device and this is one of our

1113
00:48:44,880 --> 00:48:46,880
kind of flagship pieces of functionality

1114
00:48:46,880 --> 00:48:48,240
in pigweed

1115
00:48:48,240 --> 00:48:50,319
it works by using stable tokens that

1116
00:48:50,319 --> 00:48:51,599
don't change

1117
00:48:51,599 --> 00:48:54,559
even as you upgrade or modify the binary

1118
00:48:54,559 --> 00:48:56,000
the tokens will only change if you

1119
00:48:56,000 --> 00:48:58,400
change the log string

1120
00:48:58,400 --> 00:49:01,760
now the plus of this is that if you do a

1121
00:49:01,760 --> 00:49:03,200
lot of logging which we do we think

1122
00:49:03,200 --> 00:49:04,800
logging is a really important part of

1123
00:49:04,800 --> 00:49:07,599
embedded development

1124
00:49:07,760 --> 00:49:09,200
you get to remove these strings from the

1125
00:49:09,200 --> 00:49:10,800
binary this both

1126
00:49:10,800 --> 00:49:12,960
um makes it faster to execute you know

1127
00:49:12,960 --> 00:49:14,079
to format the log

1128
00:49:14,079 --> 00:49:17,200
it makes it smaller in flash

1129
00:49:17,200 --> 00:49:19,599
so the strings are not in flash at all

1130
00:49:19,599 --> 00:49:21,200
and makes it smaller in memory for

1131
00:49:21,200 --> 00:49:23,680
things like buffering logs or

1132
00:49:23,680 --> 00:49:25,200
having kind of a log ring buffer where

1133
00:49:25,200 --> 00:49:27,760
you can keep track of all the

1134
00:49:27,760 --> 00:49:30,559
logs that that you've done in the past

1135
00:49:30,559 --> 00:49:31,680
if you have to

1136
00:49:31,680 --> 00:49:34,240
hold on to them for some reason so

1137
00:49:34,240 --> 00:49:35,920
that's what's happening here and

1138
00:49:35,920 --> 00:49:38,960
if you look at this output that we were

1139
00:49:38,960 --> 00:49:39,599
watching

1140
00:49:39,599 --> 00:49:44,720
earlier this so this these are

1141
00:49:44,720 --> 00:49:47,760
tokens and the dollar sign is just an

1142
00:49:47,760 --> 00:49:50,000
indication that it's a base64 encoded

1143
00:49:50,000 --> 00:49:51,040
token

1144
00:49:51,040 --> 00:49:53,520
the equals equals is just the terminator

1145
00:49:53,520 --> 00:49:55,520
for the

1146
00:49:55,520 --> 00:49:57,920
the basics before encoding and then this

1147
00:49:57,920 --> 00:49:59,520
this part here

1148
00:49:59,520 --> 00:50:02,480
is the actual token with any arguments

1149
00:50:02,480 --> 00:50:03,680
attached in this case we don't have

1150
00:50:03,680 --> 00:50:05,359
arguments to the

1151
00:50:05,359 --> 00:50:09,040
to these but this one is probably

1152
00:50:09,040 --> 00:50:11,040
blink high and the other one is probably

1153
00:50:11,040 --> 00:50:12,480
blink low

1154
00:50:12,480 --> 00:50:14,319
so if i had to look at it you know this

1155
00:50:14,319 --> 00:50:15,680
plus is probably higher bit

1156
00:50:15,680 --> 00:50:18,720
so probably this one is

1157
00:50:18,720 --> 00:50:21,920
this one and this one is probably this

1158
00:50:21,920 --> 00:50:23,680
one

1159
00:50:23,680 --> 00:50:27,200
so just out of curiosity

1160
00:50:27,200 --> 00:50:30,319
has anybody in the talk

1161
00:50:30,319 --> 00:50:31,839
kind of worked with tokenized locking

1162
00:50:31,839 --> 00:50:34,640
systems before

1163
00:50:35,520 --> 00:50:37,359
we've we've found this to be critical

1164
00:50:37,359 --> 00:50:38,559
for

1165
00:50:38,559 --> 00:50:40,319
for some products in order to make them

1166
00:50:40,319 --> 00:50:42,960
economical because you can save so much

1167
00:50:42,960 --> 00:50:46,960
on flash if you log quite a bit

1168
00:50:48,000 --> 00:50:50,640
yeah so one of the things that we're not

1169
00:50:50,640 --> 00:50:52,000
going to have time to get into too much

1170
00:50:52,000 --> 00:50:52,480
today

1171
00:50:52,480 --> 00:50:55,760
is that with tokenized logging like this

1172
00:50:55,760 --> 00:50:58,640
and some of our kind of additional rpc

1173
00:50:58,640 --> 00:51:00,240
stuff that we'll go through

1174
00:51:00,240 --> 00:51:01,839
we'll be able to get our log buffers

1175
00:51:01,839 --> 00:51:04,000
down so that typical log messages only

1176
00:51:04,000 --> 00:51:04,319
take

1177
00:51:04,319 --> 00:51:06,480
10 bytes and that will include things

1178
00:51:06,480 --> 00:51:08,079
like the timestamp

1179
00:51:08,079 --> 00:51:10,800
and the level and a few other things in

1180
00:51:10,800 --> 00:51:12,160
order to enable

1181
00:51:12,160 --> 00:51:14,319
runtime filtering but still storing kind

1182
00:51:14,319 --> 00:51:16,000
of lots of

1183
00:51:16,000 --> 00:51:18,160
log messages locally which is really

1184
00:51:18,160 --> 00:51:19,040
cool

1185
00:51:19,040 --> 00:51:20,720
so we can talk more about that another

1186
00:51:20,720 --> 00:51:22,640
time maybe not today

1187
00:51:22,640 --> 00:51:26,558
but it is a pretty nice facility

1188
00:51:29,200 --> 00:51:30,880
yeah the deterministic message size is

1189
00:51:30,880 --> 00:51:32,960
really nice there is a caveat to that

1190
00:51:32,960 --> 00:51:34,800
though which is that you can see here oh

1191
00:51:34,800 --> 00:51:36,079
wait i guess there's none in here

1192
00:51:36,079 --> 00:51:39,119
but if you have a percent s so something

1193
00:51:39,119 --> 00:51:40,160
like this let me just show you an

1194
00:51:40,160 --> 00:51:42,160
example let's say you had

1195
00:51:42,160 --> 00:51:46,160
preview log info um

1196
00:51:47,359 --> 00:51:49,760
let's say you have a runtime string log

1197
00:51:49,760 --> 00:51:53,359
so let me just pull this over here

1198
00:51:59,920 --> 00:52:02,960
so the log tokenization

1199
00:52:02,960 --> 00:52:06,160
works on the compile time strings but

1200
00:52:06,160 --> 00:52:08,880
if you embed a string inside your log

1201
00:52:08,880 --> 00:52:10,960
like here

1202
00:52:10,960 --> 00:52:13,760
suddenly that can potentially blow over

1203
00:52:13,760 --> 00:52:15,440
all of the

1204
00:52:15,440 --> 00:52:18,240
the size issues so if this is generated

1205
00:52:18,240 --> 00:52:19,440
at runtime

1206
00:52:19,440 --> 00:52:22,400
or it's generated from a like a switch

1207
00:52:22,400 --> 00:52:23,920
statement or something

1208
00:52:23,920 --> 00:52:26,079
it needs to be put in literally so it's

1209
00:52:26,079 --> 00:52:28,240
still possible to have large

1210
00:52:28,240 --> 00:52:31,200
log statements even after tokenizing if

1211
00:52:31,200 --> 00:52:31,520
you

1212
00:52:31,520 --> 00:52:33,920
use a lot of string arguments but other

1213
00:52:33,920 --> 00:52:36,000
than that most things are pretty small

1214
00:52:36,000 --> 00:52:39,520
which is really nice how do you end the

1215
00:52:39,520 --> 00:52:40,559
gibberish output

1216
00:52:40,559 --> 00:52:44,800
control right square bracket

1217
00:52:44,800 --> 00:52:48,400
it should uh it should get out

1218
00:52:48,960 --> 00:52:50,079
but it sounds like it's working so

1219
00:52:50,079 --> 00:52:52,480
that's good

1220
00:52:52,559 --> 00:52:54,960
okay

1221
00:52:57,119 --> 00:53:00,319
so i'm still not sure why this this one

1222
00:53:00,319 --> 00:53:03,680
was not working here but we can

1223
00:53:04,559 --> 00:53:08,880
yeah we can move on past blinky

1224
00:53:12,800 --> 00:53:14,319
okay so next up we're going to do

1225
00:53:14,319 --> 00:53:16,240
testing and

1226
00:53:16,240 --> 00:53:18,000
as i mentioned earlier one of the ideas

1227
00:53:18,000 --> 00:53:20,240
with pigley is to make it easier to unit

1228
00:53:20,240 --> 00:53:22,640
test on embedded

1229
00:53:22,640 --> 00:53:25,520
personally i have found the best way to

1230
00:53:25,520 --> 00:53:27,520
ensure that your product has

1231
00:53:27,520 --> 00:53:30,480
not very many unit and automated tests

1232
00:53:30,480 --> 00:53:32,880
is to make it hard to write those tests

1233
00:53:32,880 --> 00:53:34,640
if there's no framework for doing

1234
00:53:34,640 --> 00:53:36,400
automated testing you're not going to

1235
00:53:36,400 --> 00:53:37,839
write tests

1236
00:53:37,839 --> 00:53:39,680
so in pigweed we just wanted to make

1237
00:53:39,680 --> 00:53:42,400
testing so easy and so natural and so

1238
00:53:42,400 --> 00:53:44,400
baked into the development process that

1239
00:53:44,400 --> 00:53:45,599
there's just no excuse

1240
00:53:45,599 --> 00:53:48,240
it's just very easy to and not just easy

1241
00:53:48,240 --> 00:53:49,680
enjoyable and fun

1242
00:53:49,680 --> 00:53:52,400
to do automated testing we feel really

1243
00:53:52,400 --> 00:53:53,839
strongly about this

1244
00:53:53,839 --> 00:53:55,359
this is why you'll see there's a bunch

1245
00:53:55,359 --> 00:53:57,920
of tests in pigweed and

1246
00:53:57,920 --> 00:54:00,480
generally pretty high coverage and we

1247
00:54:00,480 --> 00:54:02,000
think the best way to

1248
00:54:02,000 --> 00:54:05,040
make reliable software is just

1249
00:54:05,040 --> 00:54:07,119
catch all the bugs at the lowest level

1250
00:54:07,119 --> 00:54:08,160
you can

1251
00:54:08,160 --> 00:54:09,839
and sure you'll still find things in

1252
00:54:09,839 --> 00:54:11,280
integration and manual testing but

1253
00:54:11,280 --> 00:54:12,160
hopefully

1254
00:54:12,160 --> 00:54:14,640
by the point that you find a bug in an

1255
00:54:14,640 --> 00:54:16,559
automated in an iteration test or a

1256
00:54:16,559 --> 00:54:17,920
manual test

1257
00:54:17,920 --> 00:54:19,599
you can be pretty confident it's not an

1258
00:54:19,599 --> 00:54:21,760
issue with the pieces but in fact

1259
00:54:21,760 --> 00:54:26,160
an issue with their integration so

1260
00:54:26,160 --> 00:54:28,240
i'll take you through basically how this

1261
00:54:28,240 --> 00:54:29,920
works in pigweed

1262
00:54:29,920 --> 00:54:33,839
um all right so

1263
00:54:42,480 --> 00:54:52,079
okay so

1264
00:54:52,079 --> 00:54:53,920
um here when you're copying stuff just

1265
00:54:53,920 --> 00:54:56,720
triple click on the line

1266
00:54:56,720 --> 00:55:07,839
okay cool

1267
00:55:10,240 --> 00:55:14,160
all right so this is showing

1268
00:55:16,640 --> 00:55:21,200
it looks like a lot of output here but

1269
00:55:21,200 --> 00:55:24,399
this is i think

1270
00:55:28,720 --> 00:55:35,839
actually let me just uh

1271
00:55:38,400 --> 00:55:42,400
all right i forgot this one has been

1272
00:55:46,839 --> 00:55:49,839
tokenized

1273
00:56:09,280 --> 00:56:11,200
well it appears that we are having some

1274
00:56:11,200 --> 00:56:13,119
issues here

1275
00:56:13,119 --> 00:56:15,599
we did add some of this functionality

1276
00:56:15,599 --> 00:56:17,520
just before

1277
00:56:17,520 --> 00:56:20,319
the workshop so it appears as though

1278
00:56:20,319 --> 00:56:21,520
some of this is not

1279
00:56:21,520 --> 00:56:23,520
are you using the same log file in both

1280
00:56:23,520 --> 00:56:26,000
commands

1281
00:56:26,079 --> 00:56:31,839
that might be it

1282
00:56:32,799 --> 00:56:35,920
oh you just delete it

1283
00:56:37,520 --> 00:56:40,640
that's the problem well you set it to

1284
00:56:40,640 --> 00:56:45,200
out instead of input on the rpc console

1285
00:56:45,200 --> 00:56:47,359
oh that's right you want it out there

1286
00:56:47,359 --> 00:56:49,839
never mind

1287
00:56:52,079 --> 00:56:54,319
you're in different directories yeah

1288
00:56:54,319 --> 00:56:56,839
there's work slash workshop and works

1289
00:56:56,839 --> 00:56:59,760
live

1290
00:56:59,760 --> 00:57:02,319
so i had a bunch of the stuff prepared

1291
00:57:02,319 --> 00:57:04,480
and so i started a new one just now

1292
00:57:04,480 --> 00:57:13,839
that was the problem

1293
00:57:24,000 --> 00:57:27,839
sorry for this everyone

1294
00:57:28,319 --> 00:57:30,640
okay

1295
00:57:33,680 --> 00:57:37,280
okay all right great

1296
00:57:37,280 --> 00:57:40,640
um yeah yeah

1297
00:57:40,640 --> 00:57:43,040
cool and also if you might you might

1298
00:57:43,040 --> 00:57:44,160
remember that the uh

1299
00:57:44,160 --> 00:57:46,160
the packets previously looked big and

1300
00:57:46,160 --> 00:57:47,680
it's actually because this is doing some

1301
00:57:47,680 --> 00:57:49,760
string formatting

1302
00:57:49,760 --> 00:57:53,200
um that's run time okay cool

1303
00:57:53,200 --> 00:57:56,000
so this is the test executing and let me

1304
00:57:56,000 --> 00:57:57,839
just pull up the

1305
00:57:57,839 --> 00:58:00,558
code for that

1306
00:58:04,880 --> 00:58:07,280
so that was actually just a demo it's

1307
00:58:07,280 --> 00:58:09,839
not using the test

1308
00:58:09,839 --> 00:58:13,200
and we could flash the test

1309
00:58:13,200 --> 00:58:16,319
that would be a good thing to do next

1310
00:58:18,079 --> 00:58:23,839
that uses basic logging not tokenized

1311
00:58:24,079 --> 00:58:37,839
yes okay let's do it

1312
00:58:38,880 --> 00:58:51,839
see where's the test

1313
00:58:58,120 --> 00:59:01,279
[Applause]

1314
00:59:04,079 --> 00:59:06,160
okay so we're going to flash the test

1315
00:59:06,160 --> 00:59:19,839
next which doesn't have

1316
00:59:31,280 --> 00:59:34,799
so this version of the test

1317
00:59:37,760 --> 00:59:42,160
oh maybe there's nothing on this one

1318
00:59:42,160 --> 00:59:43,599
oh yeah you don't want to use a serial

1319
00:59:43,599 --> 00:59:45,280
runner you just want to

1320
00:59:45,280 --> 00:59:48,079
use the you just want to use the auto

1321
00:59:48,079 --> 00:59:51,280
arduino unit test runner

1322
00:59:51,440 --> 00:59:54,640
okay cool all right so

1323
00:59:56,240 --> 00:59:58,640
like take out if you have flash only in

1324
00:59:58,640 --> 01:00:00,559
there remove it

1325
01:00:00,559 --> 01:00:02,799
that way the test runner will show your

1326
01:00:02,799 --> 01:00:05,440
test output

1327
01:00:09,680 --> 01:00:13,200
in fact it was working okay so

1328
01:00:13,200 --> 01:00:15,599
by the way we don't actually use the

1329
01:00:15,599 --> 01:00:16,799
code like this very much

1330
01:00:16,799 --> 01:00:19,680
so you're seeing the kind of underbelly

1331
01:00:19,680 --> 01:00:20,000
of

1332
01:00:20,000 --> 01:00:23,280
how things work and so there's a

1333
01:00:23,280 --> 01:00:24,799
couple different layers but in short

1334
01:00:24,799 --> 01:00:26,640
what this command does

1335
01:00:26,640 --> 01:00:28,880
and i know it's a little bit long but

1336
01:00:28,880 --> 01:00:30,160
basically

1337
01:00:30,160 --> 01:00:33,119
arduino test runner it's using the

1338
01:00:33,119 --> 01:00:35,359
configuration that we generated

1339
01:00:35,359 --> 01:00:37,440
in this case it's saying okay we're

1340
01:00:37,440 --> 01:00:38,090
going to run

1341
01:00:38,090 --> 01:00:39,280
[Music]

1342
01:00:39,280 --> 01:00:42,000
this test and the runner is expecting

1343
01:00:42,000 --> 01:00:42,640
that the

1344
01:00:42,640 --> 01:00:46,319
test binary has a certain behavior which

1345
01:00:46,319 --> 01:00:47,040
is that it

1346
01:00:47,040 --> 01:00:49,040
it'll wait for an attach and then it'll

1347
01:00:49,040 --> 01:00:50,319
start executing

1348
01:00:50,319 --> 01:00:53,200
the unit test but more than that the

1349
01:00:53,200 --> 01:00:55,599
test runner kind of takes over

1350
01:00:55,599 --> 01:00:57,119
it's not expecting somebody else to

1351
01:00:57,119 --> 01:00:58,960
connect to it in this case

1352
01:00:58,960 --> 01:01:02,640
and it will connect listen for

1353
01:01:02,640 --> 01:01:06,400
the your output from the test running

1354
01:01:06,400 --> 01:01:08,640
and then parse it to determine pass or

1355
01:01:08,640 --> 01:01:09,760
fail

1356
01:01:09,760 --> 01:01:11,440
in this case you can see the output and

1357
01:01:11,440 --> 01:01:12,799
it looks very much like

1358
01:01:12,799 --> 01:01:16,000
google test on host but in fact these

1359
01:01:16,000 --> 01:01:17,520
strings are all generated

1360
01:01:17,520 --> 01:01:20,960
on the device and i can pull up the code

1361
01:01:20,960 --> 01:01:22,839
for that right here

1362
01:01:22,839 --> 01:01:25,839
so

1363
01:01:30,319 --> 01:01:34,160
so this is the resistor code

1364
01:01:34,480 --> 01:01:39,839
let's see if this is working

1365
01:01:47,520 --> 01:01:48,640
about to tell you about this thing

1366
01:01:48,640 --> 01:01:53,839
called tibia watch which is kind of cool

1367
01:02:04,839 --> 01:02:07,839
okay

1368
01:02:35,280 --> 01:02:36,960
so if any of you have seen google tests

1369
01:02:36,960 --> 01:02:39,680
this syntax is probably familiar to you

1370
01:02:39,680 --> 01:02:43,760
um so i want to point something out here

1371
01:02:43,760 --> 01:02:47,440
that's kind of interesting so

1372
01:02:47,440 --> 01:02:49,920
what is this what is this thing called

1373
01:02:49,920 --> 01:02:51,200
um

1374
01:02:51,200 --> 01:02:56,400
pw watch so if you're used to using ides

1375
01:02:56,400 --> 01:02:58,480
sometimes ide will automatically compile

1376
01:02:58,480 --> 01:03:00,079
your code for you

1377
01:03:00,079 --> 01:03:03,440
and it's great a bunch of us in pigweed

1378
01:03:03,440 --> 01:03:05,359
don't really use ides i mean they're

1379
01:03:05,359 --> 01:03:07,839
also popular for bigger users too

1380
01:03:07,839 --> 01:03:10,480
but sometimes you don't want to have to

1381
01:03:10,480 --> 01:03:11,440
use an ide

1382
01:03:11,440 --> 01:03:12,720
and so we built this little watcher

1383
01:03:12,720 --> 01:03:15,359
thing called qb watch

1384
01:03:15,359 --> 01:03:16,960
and the idea is it will help you run

1385
01:03:16,960 --> 01:03:18,960
tests automatically

1386
01:03:18,960 --> 01:03:20,240
now in this case something interesting

1387
01:03:20,240 --> 01:03:22,160
is happening

1388
01:03:22,160 --> 01:03:23,760
the watcher is detecting at something

1389
01:03:23,760 --> 01:03:26,240
change and re-running the build

1390
01:03:26,240 --> 01:03:31,039
the build is running tests on the host

1391
01:03:31,039 --> 01:03:32,960
which is my mac

1392
01:03:32,960 --> 01:03:35,760
and compiling for the device so it's not

1393
01:03:35,760 --> 01:03:37,119
running the on-device tests

1394
01:03:37,119 --> 01:03:39,599
it's just compiling them but you can see

1395
01:03:39,599 --> 01:03:41,760
here that the test is failing as

1396
01:03:41,760 --> 01:03:45,520
expected right we have a line here that

1397
01:03:45,520 --> 01:03:49,280
will not succeed and if i change this to

1398
01:03:49,280 --> 01:03:49,920
a one

1399
01:03:49,920 --> 01:03:52,480
and save you can see that it will run

1400
01:03:52,480 --> 01:03:54,240
again

1401
01:03:54,240 --> 01:03:57,200
and then it will pass so this is kind of

1402
01:03:57,200 --> 01:03:57,680
cool

1403
01:03:57,680 --> 01:03:59,440
but i brought this up because i actually

1404
01:03:59,440 --> 01:04:02,480
wanted to modify the on device one

1405
01:04:02,480 --> 01:04:05,039
and first off we can run this just to

1406
01:04:05,039 --> 01:04:07,599
see that it should pass

1407
01:04:07,599 --> 01:04:09,599
it's doing the flashing it will run it

1408
01:04:09,599 --> 01:04:11,280
passes okay

1409
01:04:11,280 --> 01:04:13,119
and now i'm going to change this to a

1410
01:04:13,119 --> 01:04:14,799
zero now of course the host one is going

1411
01:04:14,799 --> 01:04:16,319
to fail

1412
01:04:16,319 --> 01:04:18,400
as expected right so this is the host

1413
01:04:18,400 --> 01:04:20,559
one

1414
01:04:20,559 --> 01:04:26,480
we'll see what happens on the device

1415
01:04:26,480 --> 01:04:28,960
oh am i in the right place i am not in

1416
01:04:28,960 --> 01:04:41,839
the right place

1417
01:04:42,960 --> 01:04:44,400
i'm currently paying the price for

1418
01:04:44,400 --> 01:04:46,640
having a parallel

1419
01:04:46,640 --> 01:04:55,839
version of the repo checked out here

1420
01:05:06,839 --> 01:05:09,839
hmm

1421
01:05:15,680 --> 01:05:17,599
uh the tests so you try does that return

1422
01:05:17,599 --> 01:05:19,440
the flash yeah

1423
01:05:19,440 --> 01:05:21,760
test so the target's out arduino debug

1424
01:05:21,760 --> 01:05:24,079
tests

1425
01:05:25,599 --> 01:05:29,039
that's changed

1426
01:05:32,799 --> 01:05:36,240
yeah there you go okay so

1427
01:05:36,240 --> 01:05:38,960
this is gonna run should fail yeah great

1428
01:05:38,960 --> 01:05:39,359
okay

1429
01:05:39,359 --> 01:05:41,599
so you can see here that this is now

1430
01:05:41,599 --> 01:05:43,200
failing

1431
01:05:43,200 --> 01:05:44,480
and note that the output looks pretty

1432
01:05:44,480 --> 01:05:45,839
much the same so we actually have the

1433
01:05:45,839 --> 01:05:47,599
same unit test code running on both

1434
01:05:47,599 --> 01:05:50,640
host and device our test framework is

1435
01:05:50,640 --> 01:05:52,880
compatible with

1436
01:05:52,880 --> 01:05:55,119
compatible with google test without

1437
01:05:55,119 --> 01:05:57,520
support for mocking

1438
01:05:57,520 --> 01:06:00,000
unlike google tests ours is maybe 10

1439
01:06:00,000 --> 01:06:01,760
kilobytes or less of

1440
01:06:01,760 --> 01:06:05,119
flash google test is like 200 kilobytes

1441
01:06:05,119 --> 01:06:06,559
of flash or so

1442
01:06:06,559 --> 01:06:10,160
so you can fit pw unit tests

1443
01:06:10,160 --> 01:06:13,680
in most projects maybe not the case for

1444
01:06:13,680 --> 01:06:18,720
google test

1445
01:06:18,720 --> 01:06:22,480
cool okay so it looks like

1446
01:06:22,480 --> 01:06:25,280
oh thanks for the fix for the discovery

1447
01:06:25,280 --> 01:06:26,000
line

1448
01:06:26,000 --> 01:06:33,760
um maybe we can go get that fixed up

1449
01:06:33,760 --> 01:06:36,160
all right

1450
01:06:40,240 --> 01:06:42,880
okay great so this is uh so this is

1451
01:06:42,880 --> 01:06:44,079
showing the

1452
01:06:44,079 --> 01:06:46,640
unit test on device but i had to take an

1453
01:06:46,640 --> 01:06:47,760
extra step to flash

1454
01:06:47,760 --> 01:06:50,960
and make it run so what i'm going to try

1455
01:06:50,960 --> 01:06:52,720
doing now is show how to run it

1456
01:06:52,720 --> 01:06:55,280
automatically

1457
01:06:55,280 --> 01:06:59,359
with with watch so let me

1458
01:06:59,440 --> 01:07:02,799
the way you can do this and i

1459
01:07:05,359 --> 01:07:09,200
oh yeah this is here cool

1460
01:07:10,480 --> 01:07:15,839
so in short

1461
01:07:19,200 --> 01:07:22,640
so gn when you run it makes out

1462
01:07:22,640 --> 01:07:23,440
directory

1463
01:07:23,440 --> 01:07:24,880
inside the out directory is a file

1464
01:07:24,880 --> 01:07:26,880
called args.gen

1465
01:07:26,880 --> 01:07:29,440
that file is basically what configures

1466
01:07:29,440 --> 01:07:30,880
the commands you can kind of think of it

1467
01:07:30,880 --> 01:07:32,559
as similar to the cmake

1468
01:07:32,559 --> 01:07:36,240
cache and in short

1469
01:07:36,240 --> 01:07:38,319
this this one pw are doing a use test

1470
01:07:38,319 --> 01:07:39,760
server should be true

1471
01:07:39,760 --> 01:07:41,520
i think there is a corresponding

1472
01:07:41,520 --> 01:07:44,319
argument for

1473
01:07:44,559 --> 01:07:46,480
for discovery i think for discovery it's

1474
01:07:46,480 --> 01:07:48,400
just this

1475
01:07:48,400 --> 01:07:51,200
use test server

1476
01:07:54,960 --> 01:07:58,160
okay so i'm going to comment this out

1477
01:07:58,160 --> 01:08:00,640
for mine

1478
01:08:03,599 --> 01:08:06,079
you need to set that i will turn on the

1479
01:08:06,079 --> 01:08:06,880
test server

1480
01:08:06,880 --> 01:08:09,760
okay but you need an additional thing

1481
01:08:09,760 --> 01:08:10,319
and

1482
01:08:10,319 --> 01:08:12,799
we don't have time today to go into why

1483
01:08:12,799 --> 01:08:14,960
but there needs to be a separate

1484
01:08:14,960 --> 01:08:18,960
server to uh to actually run

1485
01:08:18,960 --> 01:08:21,839
the unit tests on the teensy itself so

1486
01:08:21,839 --> 01:08:23,759
the way this works is that the ninja

1487
01:08:23,759 --> 01:08:24,880
build

1488
01:08:24,880 --> 01:08:27,198
will trigger not just building the

1489
01:08:27,198 --> 01:08:27,920
firmware

1490
01:08:27,920 --> 01:08:30,080
for the teensy and somewhere in the test

1491
01:08:30,080 --> 01:08:31,279
for the tc

1492
01:08:31,279 --> 01:08:34,319
it will also trigger flashing the

1493
01:08:34,319 --> 01:08:36,960
test to the teensy running it seeing

1494
01:08:36,960 --> 01:08:37,759
that it got

1495
01:08:37,759 --> 01:08:39,839
the result that's expected or not and

1496
01:08:39,839 --> 01:08:41,279
reporting the results

1497
01:08:41,279 --> 01:08:43,279
all part of the ninja build are all as

1498
01:08:43,279 --> 01:08:44,640
part of the the build

1499
01:08:44,640 --> 01:08:49,279
so yeah so the first step was to

1500
01:08:49,279 --> 01:08:52,000
turn on this uh this command here 14th

1501
01:08:52,000 --> 01:08:53,040
users

1502
01:08:53,040 --> 01:08:54,960
and i believe it is this one for the

1503
01:08:54,960 --> 01:08:57,839
discovery users

1504
01:08:58,399 --> 01:09:00,880
yeah oh yeah and for people on windows

1505
01:09:00,880 --> 01:09:03,199
um

1506
01:09:05,040 --> 01:09:07,279
yeah i'm sorry about the problems and we

1507
01:09:07,279 --> 01:09:08,799
spent a lot of time on the windows one

1508
01:09:08,799 --> 01:09:10,560
and we still don't have it bulletproof

1509
01:09:10,560 --> 01:09:13,679
so yeah sorry

1510
01:09:13,679 --> 01:09:16,560
actually this if somebody is interested

1511
01:09:16,560 --> 01:09:18,238
we would love help with windows the

1512
01:09:18,238 --> 01:09:19,679
problem is right now none of us are

1513
01:09:19,679 --> 01:09:21,679
full-time windows users and so we end up

1514
01:09:21,679 --> 01:09:22,640
with

1515
01:09:22,640 --> 01:09:24,719
uh just kind of little problems that we

1516
01:09:24,719 --> 01:09:26,238
don't notice even though we have windows

1517
01:09:26,238 --> 01:09:26,640
running

1518
01:09:26,640 --> 01:09:30,158
in ci cq there still ends up being

1519
01:09:30,158 --> 01:09:32,319
trouble and it's just hard for us to

1520
01:09:32,319 --> 01:09:33,759
detect all these things when we're not

1521
01:09:33,759 --> 01:09:35,679
on windows ourselves

1522
01:09:35,679 --> 01:09:38,399
we even have windows machines and we do

1523
01:09:38,399 --> 01:09:38,880
use them

1524
01:09:38,880 --> 01:09:41,359
it's just not our primary development so

1525
01:09:41,359 --> 01:09:42,960
if there's somebody that

1526
01:09:42,960 --> 01:09:44,880
has a lot of windows experience and i

1527
01:09:44,880 --> 01:09:46,479
think powershell is something that we

1528
01:09:46,479 --> 01:09:48,158
just don't really know very well we'd

1529
01:09:48,158 --> 01:09:50,640
love help

1530
01:09:50,640 --> 01:09:54,000
okay so rx.gn uh

1531
01:09:54,000 --> 01:09:55,440
so the next thing that's needed is to

1532
01:09:55,440 --> 01:09:56,560
have the test server running so that's

1533
01:09:56,560 --> 01:09:58,000
what i was mentioning earlier

1534
01:09:58,000 --> 01:10:01,120
that a test server is needed and what

1535
01:10:01,120 --> 01:10:02,640
the test server does

1536
01:10:02,640 --> 01:10:06,640
is it serializes access to the hardware

1537
01:10:06,640 --> 01:10:10,320
now in the case of tc

1538
01:10:10,320 --> 01:10:11,920
we currently don't support running the

1539
01:10:11,920 --> 01:10:14,000
tmc devices in parallel

1540
01:10:14,000 --> 01:10:17,280
for the discovery i don't have it

1541
01:10:17,280 --> 01:10:18,320
working right now but we actually

1542
01:10:18,320 --> 01:10:18,960
support

1543
01:10:18,960 --> 01:10:22,000
running multiple discovery boards in

1544
01:10:22,000 --> 01:10:23,120
parallel

1545
01:10:23,120 --> 01:10:26,080
to have a little discovery cluster to

1546
01:10:26,080 --> 01:10:28,000
run all your tests in parallel

1547
01:10:28,000 --> 01:10:31,120
it's uh it's pretty cool it runs a lot

1548
01:10:31,120 --> 01:10:32,400
faster actually with two

1549
01:10:32,400 --> 01:10:34,640
it seems like it's faster than twice but

1550
01:10:34,640 --> 01:10:36,400
um but yeah

1551
01:10:36,400 --> 01:10:39,920
okay so i ran this little test server

1552
01:10:39,920 --> 01:10:41,679
here

1553
01:10:41,679 --> 01:10:43,840
and by the way if you're on mac and i

1554
01:10:43,840 --> 01:10:45,440
think

1555
01:10:45,440 --> 01:10:47,199
maybe on windows you have to allow this

1556
01:10:47,199 --> 01:10:48,719
because

1557
01:10:48,719 --> 01:10:50,640
there's a local connection it's using

1558
01:10:50,640 --> 01:10:51,920
grpc

1559
01:10:51,920 --> 01:10:55,199
to communicate between processes and so

1560
01:10:55,199 --> 01:10:56,560
that's what this is doing so essentially

1561
01:10:56,560 --> 01:10:58,159
you run this server command and it just

1562
01:10:58,159 --> 01:10:59,360
sits here

1563
01:10:59,360 --> 01:11:02,640
so arduino test server

1564
01:11:02,640 --> 01:11:04,560
is you know using the configuration that

1565
01:11:04,560 --> 01:11:07,120
was spit out in this file

1566
01:11:07,120 --> 01:11:09,120
found one device so it found this little

1567
01:11:09,120 --> 01:11:12,239
teensy that i'm holding here

1568
01:11:12,239 --> 01:11:15,520
and it is now waiting so you can see

1569
01:11:15,520 --> 01:11:17,840
here there's a worker waiting

1570
01:11:17,840 --> 01:11:20,400
and the command is going to run you can

1571
01:11:20,400 --> 01:11:22,719
see is this one so it's going to run

1572
01:11:22,719 --> 01:11:24,719
config file with all these settings that

1573
01:11:24,719 --> 01:11:27,679
we know about this you know this uh

1574
01:11:27,679 --> 01:11:31,040
it detected the serial port and when i

1575
01:11:31,040 --> 01:11:31,440
run

1576
01:11:31,440 --> 01:11:33,199
commands over here so i'm going to

1577
01:11:33,199 --> 01:11:34,880
trigger this again

1578
01:11:34,880 --> 01:11:40,320
and i think this should work

1579
01:11:40,320 --> 01:11:43,519
okay cool so it's working

1580
01:11:44,800 --> 01:11:47,760
so what's changed from last time when we

1581
01:11:47,760 --> 01:11:48,080
ran

1582
01:11:48,080 --> 01:11:51,280
without the server what's changed

1583
01:11:51,280 --> 01:11:53,600
is that uh instead of just one failure

1584
01:11:53,600 --> 01:11:55,280
this is the failure we saw before

1585
01:11:55,280 --> 01:11:58,800
local on a mac we have an additional one

1586
01:11:58,800 --> 01:11:59,840
which is right here

1587
01:11:59,840 --> 01:12:02,080
so this is a failure on the device

1588
01:12:02,080 --> 01:12:03,679
through the test server

1589
01:12:03,679 --> 01:12:05,280
and i didn't really have to do anything

1590
01:12:05,280 --> 01:12:06,880
to run it

1591
01:12:06,880 --> 01:12:08,480
well i just started test server but it

1592
01:12:08,480 --> 01:12:10,640
was done naturally with the rest of the

1593
01:12:10,640 --> 01:12:11,600
build

1594
01:12:11,600 --> 01:12:15,280
so let's make this pass again

1595
01:12:15,280 --> 01:12:18,320
and so gn is going through right and

1596
01:12:18,320 --> 01:12:20,719
actually you can just you can see here

1597
01:12:20,719 --> 01:12:24,159
that it it ran this so in fact i can

1598
01:12:24,159 --> 01:12:28,080
show this again let me just uh

1599
01:12:29,520 --> 01:12:31,440
let's just add a passing test here so

1600
01:12:31,440 --> 01:12:34,000
i'm going to clear out these lines

1601
01:12:34,000 --> 01:12:36,880
but there's nothing there i'm going to

1602
01:12:36,880 --> 01:12:38,239
save that's the only thing i'm going to

1603
01:12:38,239 --> 01:12:39,280
do

1604
01:12:39,280 --> 01:12:41,440
and then i hit enter you can see the

1605
01:12:41,440 --> 01:12:44,320
change is detected

1606
01:12:45,120 --> 01:12:48,000
and then right here

1607
01:12:48,159 --> 01:12:51,199
you can see these two lines so it just

1608
01:12:51,199 --> 01:12:54,159
executed a single test that changed and

1609
01:12:54,159 --> 01:12:54,719
then

1610
01:12:54,719 --> 01:12:57,679
finished running it and reported back to

1611
01:12:57,679 --> 01:13:00,159
it reports it actually back to ninja

1612
01:13:00,159 --> 01:13:01,840
which declares success and there's a

1613
01:13:01,840 --> 01:13:04,960
little stamp created for it

1614
01:13:04,960 --> 01:13:06,159
there's a few things that are kind of

1615
01:13:06,159 --> 01:13:07,920
cool about this so the fact that it's

1616
01:13:07,920 --> 01:13:09,280
integrated with the build

1617
01:13:09,280 --> 01:13:13,040
means that it

1618
01:13:13,040 --> 01:13:16,159
only runs the tests that change

1619
01:13:16,159 --> 01:13:18,320
so there's actually a few other tests in

1620
01:13:18,320 --> 01:13:19,679
here as well

1621
01:13:19,679 --> 01:13:22,400
that are are not listed but if you

1622
01:13:22,400 --> 01:13:24,000
modify just one test

1623
01:13:24,000 --> 01:13:26,640
it will only rerun that test or this is

1624
01:13:26,640 --> 01:13:28,239
the part that makes it really powerful

1625
01:13:28,239 --> 01:13:31,120
if you modify a library and that library

1626
01:13:31,120 --> 01:13:33,199
is used in say

1627
01:13:33,199 --> 01:13:36,000
three three tests or three executables

1628
01:13:36,000 --> 01:13:37,440
or the library has transitive

1629
01:13:37,440 --> 01:13:38,719
dependencies where

1630
01:13:38,719 --> 01:13:41,760
a core library like like an assert

1631
01:13:41,760 --> 01:13:43,120
library is used

1632
01:13:43,120 --> 01:13:45,760
in say a ring buffer library and the

1633
01:13:45,760 --> 01:13:47,440
ring buffer library is in turn used in

1634
01:13:47,440 --> 01:13:49,120
you know five tests

1635
01:13:49,120 --> 01:13:52,320
uh changing that assert library will

1636
01:13:52,320 --> 01:13:53,840
trigger

1637
01:13:53,840 --> 01:13:56,400
just the tests that you need to verify

1638
01:13:56,400 --> 01:13:58,080
everything working

1639
01:13:58,080 --> 01:14:00,080
which is really powerful uh it just

1640
01:14:00,080 --> 01:14:03,040
makes the the dev cycle really fast

1641
01:14:03,040 --> 01:14:06,560
so yeah so that's uh

1642
01:14:06,560 --> 01:14:08,640
that's kind of the watching thing now

1643
01:14:08,640 --> 01:14:11,040
we're kind of running out of time so i

1644
01:14:11,040 --> 01:14:13,120
was thinking i would actually

1645
01:14:13,120 --> 01:14:16,239
skip over the rest of this exercise

1646
01:14:16,239 --> 01:14:18,639
just for

1647
01:14:19,440 --> 01:14:22,320
those who are interested

1648
01:14:22,640 --> 01:14:23,840
i'll tell you what we're going to do

1649
01:14:23,840 --> 01:14:26,400
which is in

1650
01:14:26,960 --> 01:14:29,840
uh let's short

1651
01:14:32,880 --> 01:14:35,440
there's a function here that generates a

1652
01:14:35,440 --> 01:14:36,080
status

1653
01:14:36,080 --> 01:14:38,560
using string builder which is one of the

1654
01:14:38,560 --> 01:14:40,320
random libraries in pigweed that's

1655
01:14:40,320 --> 01:14:41,120
pretty useful

1656
01:14:41,120 --> 01:14:43,199
fun fact very easy to get in all pointer

1657
01:14:43,199 --> 01:14:44,480
errors when you're doing

1658
01:14:44,480 --> 01:14:46,800
stir copy and other such operations with

1659
01:14:46,800 --> 01:14:47,600
strings and

1660
01:14:47,600 --> 01:14:50,640
c but if you use the c plus primitives

1661
01:14:50,640 --> 01:14:52,880
i o stream and string string stream and

1662
01:14:52,880 --> 01:14:54,000
so on

1663
01:14:54,000 --> 01:14:56,880
you can just blow out your binary size

1664
01:14:56,880 --> 01:14:58,560
you know no problem just

1665
01:14:58,560 --> 01:15:00,800
pound include io stream immediately

1666
01:15:00,800 --> 01:15:03,120
triggers a 230 kilobyte inclusion

1667
01:15:03,120 --> 01:15:04,320
and of course that's completely

1668
01:15:04,320 --> 01:15:06,800
unacceptable for most embedded products

1669
01:15:06,800 --> 01:15:08,719
so instead we have a facility called

1670
01:15:08,719 --> 01:15:11,600
string builder

1671
01:15:11,600 --> 01:15:12,800
named here with stringbuffer because it

1672
01:15:12,800 --> 01:15:14,640
actually includes the buffer that does

1673
01:15:14,640 --> 01:15:15,760
no allocations

1674
01:15:15,760 --> 01:15:19,360
like most of pigweed no allocations and

1675
01:15:19,360 --> 01:15:22,080
you can see here that it does kind of

1676
01:15:22,080 --> 01:15:23,280
look like a stream

1677
01:15:23,280 --> 01:15:25,679
but it internally it's it doesn't

1678
01:15:25,679 --> 01:15:26,320
allocate

1679
01:15:26,320 --> 01:15:30,560
it it's a little bit simpler

1680
01:15:30,560 --> 01:15:32,159
and it formats it so what we're going to

1681
01:15:32,159 --> 01:15:34,480
do with this test is verify it but i'm

1682
01:15:34,480 --> 01:15:36,719
going to skip it

1683
01:15:36,719 --> 01:15:39,760
so before i move over to rpc

1684
01:15:39,760 --> 01:15:41,120
which is i think one of the highlights

1685
01:15:41,120 --> 01:15:42,080
and i want to make sure we have a little

1686
01:15:42,080 --> 01:15:43,600
bit of time for it

1687
01:15:43,600 --> 01:15:46,159
did anybody have questions so far or

1688
01:15:46,159 --> 01:15:47,760
also what people think like

1689
01:15:47,760 --> 01:15:49,360
is this something that looks interesting

1690
01:15:49,360 --> 01:15:53,839
or fun to work with

1691
01:16:01,360 --> 01:16:04,159
yeah the test server functionality were

1692
01:16:04,159 --> 01:16:05,920
we're pretty happy about it it's been a

1693
01:16:05,920 --> 01:16:07,120
real nice

1694
01:16:07,120 --> 01:16:10,000
uh a really helpful thing for especially

1695
01:16:10,000 --> 01:16:11,520
for development

1696
01:16:11,520 --> 01:16:14,159
um yeah integrating that with the test

1697
01:16:14,159 --> 01:16:15,840
execution just the whole package is

1698
01:16:15,840 --> 01:16:21,840
pretty nice

1699
01:16:22,480 --> 01:16:24,080
yeah let's see try and build a ninja

1700
01:16:24,080 --> 01:16:27,040
stuck stamp

1701
01:16:31,920 --> 01:16:34,000
yeah so actually it's a great point

1702
01:16:34,000 --> 01:16:35,679
being able to test things quickly on the

1703
01:16:35,679 --> 01:16:36,400
host

1704
01:16:36,400 --> 01:16:38,400
so the other benefit of being able to do

1705
01:16:38,400 --> 01:16:39,520
things on the host is that if you're

1706
01:16:39,520 --> 01:16:40,960
making complicated

1707
01:16:40,960 --> 01:16:44,320
logic you know you could just disable

1708
01:16:44,320 --> 01:16:45,120
momentarily

1709
01:16:45,120 --> 01:16:47,440
running on the device and how to include

1710
01:16:47,440 --> 01:16:49,040
iostream and print stuff out or do

1711
01:16:49,040 --> 01:16:51,280
whatever you want

1712
01:16:51,280 --> 01:16:53,040
do your debugging and then turn it off

1713
01:16:53,040 --> 01:16:54,400
or

1714
01:16:54,400 --> 01:16:57,040
you can use hosci and gdb which is just

1715
01:16:57,040 --> 01:16:57,920
easier to use

1716
01:16:57,920 --> 01:16:59,920
than having to go through the hassle of

1717
01:16:59,920 --> 01:17:01,199
connecting your jtag

1718
01:17:01,199 --> 01:17:04,400
and dealing with all that business and

1719
01:17:04,400 --> 01:17:07,520
now that the reality of doing evangel

1720
01:17:07,520 --> 01:17:09,440
with piggy that we've experienced over

1721
01:17:09,440 --> 01:17:10,239
our time

1722
01:17:10,239 --> 01:17:11,600
working with it and some previous

1723
01:17:11,600 --> 01:17:13,679
projects at google is that

1724
01:17:13,679 --> 01:17:16,080
frankly most of the time our code we

1725
01:17:16,080 --> 01:17:17,520
develop it on the desktop

1726
01:17:17,520 --> 01:17:19,440
it works the first time on the on the

1727
01:17:19,440 --> 01:17:22,239
device and has no changes

1728
01:17:22,239 --> 01:17:24,080
just because we spend so much time

1729
01:17:24,080 --> 01:17:26,080
developing all the unit tests

1730
01:17:26,080 --> 01:17:28,400
and so you just don't need the debugger

1731
01:17:28,400 --> 01:17:29,440
that much which is

1732
01:17:29,440 --> 01:17:30,960
the other philosophy we have don't use

1733
01:17:30,960 --> 01:17:32,719
debugger you know use the debugger only

1734
01:17:32,719 --> 01:17:34,000
if you really have to

1735
01:17:34,000 --> 01:17:36,239
but favor unit testing and high quality

1736
01:17:36,239 --> 01:17:39,759
logging before debugging

1737
01:17:41,360 --> 01:17:42,719
that was actually one reason why we

1738
01:17:42,719 --> 01:17:44,560
decided to go with teensies it's like

1739
01:17:44,560 --> 01:17:44,880
the

1740
01:17:44,880 --> 01:17:47,040
first board to support like they don't

1741
01:17:47,040 --> 01:17:48,400
have the hardware debugging

1742
01:17:48,400 --> 01:17:52,080
facilities built in yeah i mean

1743
01:17:52,080 --> 01:17:54,400
having some good logging and a nice way

1744
01:17:54,400 --> 01:17:58,000
to run tests is really helpful there

1745
01:18:01,280 --> 01:18:03,520
yeah so we've been we've really had a

1746
01:18:03,520 --> 01:18:04,400
good time

1747
01:18:04,400 --> 01:18:07,040
developing this

1748
01:18:07,440 --> 01:18:09,839
all right

1749
01:18:10,480 --> 01:18:13,679
uh okay oh yeah and i wanted to add like

1750
01:18:13,679 --> 01:18:14,560
unit testing on

1751
01:18:14,560 --> 01:18:16,000
on embedded there's actually nothing

1752
01:18:16,000 --> 01:18:18,320
special about it i mean it's just

1753
01:18:18,320 --> 01:18:20,000
like any other unit test the only

1754
01:18:20,000 --> 01:18:21,440
challenge is maybe you don't have access

1755
01:18:21,440 --> 01:18:22,800
to malik

1756
01:18:22,800 --> 01:18:24,800
or you can't create threads or you can't

1757
01:18:24,800 --> 01:18:26,320
use too much memory but really

1758
01:18:26,320 --> 01:18:29,520
there's nothing special it's just that

1759
01:18:29,520 --> 01:18:32,400
typically you need some additional um

1760
01:18:32,400 --> 01:18:33,440
like

1761
01:18:33,440 --> 01:18:36,560
framework and machinery in order to kind

1762
01:18:36,560 --> 01:18:38,400
of flash the device and

1763
01:18:38,400 --> 01:18:39,760
trigger the test running and get the

1764
01:18:39,760 --> 01:18:41,760
results back and parse them and

1765
01:18:41,760 --> 01:18:44,480
all that kind of stuff but it's not that

1766
01:18:44,480 --> 01:18:46,080
much work to put it in place and you

1767
01:18:46,080 --> 01:18:47,040
know that's what we have

1768
01:18:47,040 --> 01:18:49,600
here uh here in pigweed and we did the

1769
01:18:49,600 --> 01:18:51,040
work so you can just benefit from it you

1770
01:18:51,040 --> 01:18:54,100
know just use it

1771
01:18:54,100 --> 01:18:57,259
[Applause]

1772
01:19:00,719 --> 01:19:03,440
yeah it's very controversial by the way

1773
01:19:03,440 --> 01:19:05,440
the debugger should be a last resort

1774
01:19:05,440 --> 01:19:07,199
but i mean i personally feel pretty

1775
01:19:07,199 --> 01:19:09,040
strongly about this like

1776
01:19:09,040 --> 01:19:11,120
you know you're better off focusing on

1777
01:19:11,120 --> 01:19:13,120
fantastic unit tests

1778
01:19:13,120 --> 01:19:15,199
really high quality logging metrics and

1779
01:19:15,199 --> 01:19:16,159
instrumentation

1780
01:19:16,159 --> 01:19:18,239
those are durable assets that you can

1781
01:19:18,239 --> 01:19:19,840
reuse in the future

1782
01:19:19,840 --> 01:19:22,400
across products in the field and over

1783
01:19:22,400 --> 01:19:23,679
and over again

1784
01:19:23,679 --> 01:19:25,120
but that debug session that you

1785
01:19:25,120 --> 01:19:27,040
painstakingly put together the watch

1786
01:19:27,040 --> 01:19:28,719
point and add the little

1787
01:19:28,719 --> 01:19:31,040
break points to carefully track down and

1788
01:19:31,040 --> 01:19:32,800
then you single step through

1789
01:19:32,800 --> 01:19:35,199
that's an ephemeral artifact it's gone

1790
01:19:35,199 --> 01:19:36,719
once you're done debugging

1791
01:19:36,719 --> 01:19:39,520
but logs and metrics and unit tests

1792
01:19:39,520 --> 01:19:41,840
those are durable assets

1793
01:19:41,840 --> 01:19:43,360
and so that's one of the reasons i think

1794
01:19:43,360 --> 01:19:44,880
it's just strategically better

1795
01:19:44,880 --> 01:19:48,400
to focus on that and kind of debug as

1796
01:19:48,400 --> 01:19:52,239
a last resort uh what about unit testing

1797
01:19:52,239 --> 01:19:54,719
stuff that can only happen in hardware

1798
01:19:54,719 --> 01:19:57,840
uh well that's the idea with this

1799
01:19:57,840 --> 01:20:00,800
is that you know everything can be

1800
01:20:00,800 --> 01:20:02,480
tested on on the device i mean that's

1801
01:20:02,480 --> 01:20:05,760
that's the whole idea so if you can't do

1802
01:20:05,760 --> 01:20:06,719
some of the things

1803
01:20:06,719 --> 01:20:10,000
on the host you have a couple options

1804
01:20:10,000 --> 01:20:12,800
so one option is you make a simulated

1805
01:20:12,800 --> 01:20:13,360
device

1806
01:20:13,360 --> 01:20:15,040
so you can make in this case there's an

1807
01:20:15,040 --> 01:20:18,480
led you know blank led thing and i think

1808
01:20:18,480 --> 01:20:20,080
the host one

1809
01:20:20,080 --> 01:20:22,000
uh just prints the standard out as a

1810
01:20:22,000 --> 01:20:23,600
blink

1811
01:20:23,600 --> 01:20:27,120
um so that's one possibility

1812
01:20:27,120 --> 01:20:28,960
ah so how does bigley deal with target

1813
01:20:28,960 --> 01:20:30,320
only facilities

1814
01:20:30,320 --> 01:20:32,239
that's actually a great question um so

1815
01:20:32,239 --> 01:20:33,600
pigweed is ultimately

1816
01:20:33,600 --> 01:20:35,840
just a library a series of libraries so

1817
01:20:35,840 --> 01:20:37,440
just like in normal event development

1818
01:20:37,440 --> 01:20:38,960
you can have defines or

1819
01:20:38,960 --> 01:20:41,520
things like that that are different so

1820
01:20:41,520 --> 01:20:43,040
no different here

1821
01:20:43,040 --> 01:20:45,600
um the place where it's a little bit

1822
01:20:45,600 --> 01:20:47,040
ugly and this is something that frankly

1823
01:20:47,040 --> 01:20:48,000
we don't

1824
01:20:48,000 --> 01:20:50,080
have completely nailed down is things

1825
01:20:50,080 --> 01:20:51,840
like target capabilities

1826
01:20:51,840 --> 01:20:55,600
where you can say oh my target has

1827
01:20:55,600 --> 01:20:58,400
100 kilobytes of ram or it has a

1828
01:20:58,400 --> 01:20:59,520
megabyte and

1829
01:20:59,520 --> 01:21:01,120
maybe certain tests can only be run with

1830
01:21:01,120 --> 01:21:02,719
certain amounts of memory

1831
01:21:02,719 --> 01:21:04,480
so we have a plan for how to do it we

1832
01:21:04,480 --> 01:21:05,840
just haven't implemented it yet

1833
01:21:05,840 --> 01:21:10,000
it's coming um let's see

1834
01:21:10,000 --> 01:21:12,159
yeah is there a facility to mark stuff

1835
01:21:12,159 --> 01:21:14,560
as not host

1836
01:21:14,560 --> 01:21:17,600
so yes there uh there is a way to do it

1837
01:21:17,600 --> 01:21:20,159
it's not you basically say

1838
01:21:20,159 --> 01:21:23,199
if it's not the host build it and i

1839
01:21:23,199 --> 01:21:28,080
think i can give an example of that

1840
01:21:28,080 --> 01:21:30,480
one approach we use pretty typically

1841
01:21:30,480 --> 01:21:32,400
instead of pigweed is when you set up a

1842
01:21:32,400 --> 01:21:34,719
task that won't build for host

1843
01:21:34,719 --> 01:21:38,320
is you never you when you set up the

1844
01:21:38,320 --> 01:21:39,840
thing that triggers through

1845
01:21:39,840 --> 01:21:42,320
building it you only put that in the

1846
01:21:42,320 --> 01:21:43,840
device side

1847
01:21:43,840 --> 01:21:46,080
tests you don't set it for like you know

1848
01:21:46,080 --> 01:21:47,600
test you know all tests which

1849
01:21:47,600 --> 01:21:49,199
you know gets picked up by host and

1850
01:21:49,199 --> 01:21:51,199
device and

1851
01:21:51,199 --> 01:21:54,560
yeah you can set it just to be you just

1852
01:21:54,560 --> 01:21:56,719
only include it for doing it on a device

1853
01:21:56,719 --> 01:21:58,960
that's

1854
01:22:02,560 --> 01:22:06,239
mark if the blanky command runs but

1855
01:22:06,239 --> 01:22:08,480
doesn't do anything

1856
01:22:08,480 --> 01:22:09,760
so i think as we mentioned earlier you

1857
01:22:09,760 --> 01:22:11,199
have to connect to the serial to

1858
01:22:11,199 --> 01:22:12,080
basically

1859
01:22:12,080 --> 01:22:15,040
start the device on teensy uh something

1860
01:22:15,040 --> 01:22:16,159
we want to fix but

1861
01:22:16,159 --> 01:22:20,799
so if you run that python-m command

1862
01:22:20,880 --> 01:22:24,800
oh does the host run oh okay

1863
01:22:24,800 --> 01:22:26,480
yeah i think we haven't actually there's

1864
01:22:26,480 --> 01:22:28,000
no reason it couldn't um

1865
01:22:28,000 --> 01:22:30,639
it could just print or log something i

1866
01:22:30,639 --> 01:22:32,480
don't know if it's implemented though

1867
01:22:32,480 --> 01:22:36,000
so so we have the led facade

1868
01:22:36,000 --> 01:22:39,440
and it has arduino and stm32 and i think

1869
01:22:39,440 --> 01:22:40,960
host implementations

1870
01:22:40,960 --> 01:22:44,560
oh cool okay yeah we were expecting it

1871
01:22:44,560 --> 01:22:45,600
to output emojis

1872
01:22:45,600 --> 01:22:49,280
for a light on or off but

1873
01:22:49,280 --> 01:22:53,360
not yeah okay so i i want to

1874
01:22:53,360 --> 01:22:56,400
but these are great questions by the way

1875
01:22:56,400 --> 01:23:01,519
yeah okay

1876
01:23:08,800 --> 01:23:11,440
all right cool

1877
01:23:12,400 --> 01:23:16,639
all right so i'm going to move on

1878
01:23:16,639 --> 01:23:19,520
to the next one

1879
01:23:19,679 --> 01:23:21,760
which is rpc and i think in practice

1880
01:23:21,760 --> 01:23:23,360
we're probably only gonna have time to

1881
01:23:23,360 --> 01:23:24,239
do this one

1882
01:23:24,239 --> 01:23:27,920
so yeah as as often happens we're

1883
01:23:27,920 --> 01:23:29,600
a little bit too ambitious in the amount

1884
01:23:29,600 --> 01:23:31,440
of things we'd be able to cover so

1885
01:23:31,440 --> 01:23:35,440
sorry about that but as i mentioned

1886
01:23:35,440 --> 01:23:38,639
are available in our discord after

1887
01:23:38,639 --> 01:23:42,560
so okay rpc

1888
01:23:46,239 --> 01:23:48,800
so actually before i go any further has

1889
01:23:48,800 --> 01:23:51,280
anybody

1890
01:23:51,360 --> 01:23:55,199
oh where do you host buildblocks go uh

1891
01:23:55,199 --> 01:23:57,920
it should if you're using watch they

1892
01:23:57,920 --> 01:23:59,199
should just be displayed

1893
01:23:59,199 --> 01:24:01,920
there um ninja's pre-terse it doesn't

1894
01:24:01,920 --> 01:24:03,199
really

1895
01:24:03,199 --> 01:24:06,000
print anything which is not actually

1896
01:24:06,000 --> 01:24:06,480
great

1897
01:24:06,480 --> 01:24:08,638
but

1898
01:24:10,880 --> 01:24:15,760
uh okay yeah so

1899
01:24:15,760 --> 01:24:20,080
rpc so rpc you can think of this as

1900
01:24:20,080 --> 01:24:22,880
well um if you fail the test it'll dump

1901
01:24:22,880 --> 01:24:23,679
them out to the

1902
01:24:23,679 --> 01:24:26,560
console otherwise it asks them on the pw

1903
01:24:26,560 --> 01:24:27,600
watch

1904
01:24:27,600 --> 01:24:31,840
on the success case

1905
01:24:34,000 --> 01:24:36,880
okay so

1906
01:24:37,679 --> 01:24:41,360
i see yeah

1907
01:24:41,360 --> 01:24:44,560
so rpc what's rpc so the idea with rpc

1908
01:24:44,560 --> 01:24:46,800
is that i just want to trigger

1909
01:24:46,800 --> 01:24:49,600
things on my device maybe i want to turn

1910
01:24:49,600 --> 01:24:50,880
an led on

1911
01:24:50,880 --> 01:24:54,080
maybe i want to

1912
01:24:55,040 --> 01:24:58,719
access the logs maybe i want to flash it

1913
01:24:58,719 --> 01:25:02,320
by sending it data maybe i want to

1914
01:25:02,320 --> 01:25:04,800
download the latest version of the

1915
01:25:04,800 --> 01:25:05,840
sensor data

1916
01:25:05,840 --> 01:25:08,480
from the device maybe i want to set the

1917
01:25:08,480 --> 01:25:10,080
manufacturing date

1918
01:25:10,080 --> 01:25:13,199
maybe i want to um set

1919
01:25:13,199 --> 01:25:16,639
a calibration value for an adc

1920
01:25:16,639 --> 01:25:18,320
or something like that so there's kind

1921
01:25:18,320 --> 01:25:20,560
of a million different ways

1922
01:25:20,560 --> 01:25:22,400
you might want to use remote procedure

1923
01:25:22,400 --> 01:25:24,400
calls and pigweed's

1924
01:25:24,400 --> 01:25:29,040
rpc system is modeled after grpc

1925
01:25:29,040 --> 01:25:31,600
so actually before i go too much further

1926
01:25:31,600 --> 01:25:33,120
um

1927
01:25:33,120 --> 01:25:36,719
if you have heard of grpc please say

1928
01:25:36,719 --> 01:25:40,080
you know i've heard of grpc or no

1929
01:25:40,080 --> 01:25:42,960
in the chat just to help me kind of

1930
01:25:42,960 --> 01:25:45,440
understand

1931
01:25:47,199 --> 01:25:49,280
okay so we got one person who has not

1932
01:25:49,280 --> 01:25:55,760
seen grpc

1933
01:25:55,760 --> 01:25:59,120
two people okay one person so two to

1934
01:25:59,120 --> 01:26:00,010
three

1935
01:26:00,010 --> 01:26:01,280
[Applause]

1936
01:26:01,280 --> 01:26:04,239
okay sounds like most people have not

1937
01:26:04,239 --> 01:26:06,159
seen grpc

1938
01:26:06,159 --> 01:26:07,920
all right so there's a few things here

1939
01:26:07,920 --> 01:26:10,719
that might be new

1940
01:26:10,719 --> 01:26:14,480
in short you can think of grpc

1941
01:26:14,480 --> 01:26:16,480
as one implementation of remote

1942
01:26:16,480 --> 01:26:17,920
procedure calls

1943
01:26:17,920 --> 01:26:20,320
where you have kind of a an interface

1944
01:26:20,320 --> 01:26:21,760
definition language which in this case

1945
01:26:21,760 --> 01:26:23,520
is protocol buffers

1946
01:26:23,520 --> 01:26:26,560
uh now actually before i go further

1947
01:26:26,560 --> 01:26:30,080
protobufs yes or no how

1948
01:26:30,080 --> 01:26:33,600
have people heard of broker buffers

1949
01:26:33,600 --> 01:26:37,199
yes okay got a few yeses her bro buffs

1950
01:26:37,199 --> 01:26:38,080
haven't used them

1951
01:26:38,080 --> 01:26:40,480
okay

1952
01:26:41,920 --> 01:26:44,320
cool okay all right well we got a couple

1953
01:26:44,320 --> 01:26:45,840
so protobufs are

1954
01:26:45,840 --> 01:26:48,239
a binary format for structured data you

1955
01:26:48,239 --> 01:26:49,760
kind of think of it as a struct

1956
01:26:49,760 --> 01:26:52,800
encoding and

1957
01:26:52,800 --> 01:26:54,239
you can store similar data to what you

1958
01:26:54,239 --> 01:26:55,840
might store in json

1959
01:26:55,840 --> 01:26:58,159
but unlike json it's binary and also

1960
01:26:58,159 --> 01:27:00,800
there is a schema

1961
01:27:00,800 --> 01:27:05,199
so yeah and arguably most

1962
01:27:05,199 --> 01:27:07,600
almost all data at google is stored in

1963
01:27:07,600 --> 01:27:11,199
protocol buffers in some capacity

1964
01:27:11,199 --> 01:27:14,638
here's an answer from google oh

1965
01:27:15,199 --> 01:27:17,120
so what you see here on the screen is

1966
01:27:17,120 --> 01:27:18,239
one

1967
01:27:18,239 --> 01:27:20,560
uh example of a protocol buffer

1968
01:27:20,560 --> 01:27:22,000
definition

1969
01:27:22,000 --> 01:27:24,960
so this is saying all right there's

1970
01:27:24,960 --> 01:27:26,400
syntax is pro three there's been a

1971
01:27:26,400 --> 01:27:28,159
couple versions

1972
01:27:28,159 --> 01:27:30,239
the package is fubar and we and i'll

1973
01:27:30,239 --> 01:27:31,520
show you some code for the american that

1974
01:27:31,520 --> 01:27:32,880
does this

1975
01:27:32,880 --> 01:27:36,560
there's a request struct which is empty

1976
01:27:36,560 --> 01:27:39,920
oh okay i see we have somebody who has

1977
01:27:39,920 --> 01:27:43,520
spent lots of time with us great um

1978
01:27:43,520 --> 01:27:46,000
request response and you can see the

1979
01:27:46,000 --> 01:27:47,840
response has a number

1980
01:27:47,840 --> 01:27:49,679
and then in this case and this is where

1981
01:27:49,679 --> 01:27:51,920
the rpc component comes in

1982
01:27:51,920 --> 01:27:54,000
in addition to these structs you have a

1983
01:27:54,000 --> 01:27:57,280
service that has called methods on it

1984
01:27:57,280 --> 01:27:59,840
so the idea is that your service might

1985
01:27:59,840 --> 01:28:02,400
be an led service to turn on or off

1986
01:28:02,400 --> 01:28:05,760
and you can

1987
01:28:05,760 --> 01:28:08,400
send data to the service to a method to

1988
01:28:08,400 --> 01:28:08,880
get

1989
01:28:08,880 --> 01:28:11,520
something back or maybe cause a change

1990
01:28:11,520 --> 01:28:12,159
and the

1991
01:28:12,159 --> 01:28:13,679
response will include some additional

1992
01:28:13,679 --> 01:28:15,679
structured data and these can be nested

1993
01:28:15,679 --> 01:28:16,560
so you can have

1994
01:28:16,560 --> 01:28:20,480
structs and structs and and so on

1995
01:28:22,639 --> 01:28:26,480
okay so yeah

1996
01:28:26,480 --> 01:28:30,159
so that's kind of the idea here and in

1997
01:28:30,159 --> 01:28:31,199
just to kind of give a little bit of

1998
01:28:31,199 --> 01:28:33,679
background i think it's often the case

1999
01:28:33,679 --> 01:28:36,320
in embedded that this is done with sort

2000
01:28:36,320 --> 01:28:37,360
of text

2001
01:28:37,360 --> 01:28:41,120
text mode command and response systems

2002
01:28:41,120 --> 01:28:44,639
and that is a pretty typical

2003
01:28:44,639 --> 01:28:46,960
and relatively easy to understand

2004
01:28:46,960 --> 01:28:49,120
solution in the embedded space it's

2005
01:28:49,120 --> 01:28:53,920
compact ish in code size and it's simple

2006
01:28:53,920 --> 01:28:56,000
but can run into some problems as you

2007
01:28:56,000 --> 01:28:57,920
scale your embedded device up as you

2008
01:28:57,920 --> 01:28:59,360
have larger teams of people

2009
01:28:59,360 --> 01:29:01,520
and you have potentially concurrent

2010
01:29:01,520 --> 01:29:03,120
communications happening

2011
01:29:03,120 --> 01:29:05,360
as you have increasingly rich

2012
01:29:05,360 --> 01:29:06,719
communications with

2013
01:29:06,719 --> 01:29:09,440
multiple different bits of data for each

2014
01:29:09,440 --> 01:29:11,040
request and response maybe you want to

2015
01:29:11,040 --> 01:29:12,000
send back

2016
01:29:12,000 --> 01:29:14,239
a stream of responses concurrently with

2017
01:29:14,239 --> 01:29:15,360
other ones

2018
01:29:15,360 --> 01:29:16,480
and the moment you get into that

2019
01:29:16,480 --> 01:29:19,120
territory it gets a little tricky to do

2020
01:29:19,120 --> 01:29:20,960
it with kind of ad hoc

2021
01:29:20,960 --> 01:29:24,560
text protocols and so that's kind of

2022
01:29:24,560 --> 01:29:24,960
where

2023
01:29:24,960 --> 01:29:29,600
the need for this comes from so

2024
01:29:29,600 --> 01:29:32,560
what i'm going to do is kind of show you

2025
01:29:32,560 --> 01:29:34,400
how this kind of works or

2026
01:29:34,400 --> 01:29:39,839
show you an example that's working

2027
01:29:42,480 --> 01:29:45,760
okay so i started a simple rpc service

2028
01:29:45,760 --> 01:29:47,120
and realistically we're not going to

2029
01:29:47,120 --> 01:29:49,520
have too much time to actually uh

2030
01:29:49,520 --> 01:29:54,080
fill this out but you can see here

2031
01:29:54,080 --> 01:29:55,760
this is a service the package is for

2032
01:29:55,760 --> 01:29:58,080
emoticon

2033
01:29:58,080 --> 01:30:01,360
and there is a request and response

2034
01:30:01,360 --> 01:30:04,000
stats requests and stats response and

2035
01:30:04,000 --> 01:30:05,360
the response is the number of loop

2036
01:30:05,360 --> 01:30:06,080
iterations

2037
01:30:06,080 --> 01:30:08,159
now i'll talk about that in a moment

2038
01:30:08,159 --> 01:30:09,360
you'll get to see

2039
01:30:09,360 --> 01:30:12,960
what that is uh what that actually means

2040
01:30:12,960 --> 01:30:14,800
and there's a service that has just one

2041
01:30:14,800 --> 01:30:16,880
method get stats

2042
01:30:16,880 --> 01:30:21,840
uh and that's it so

2043
01:30:22,159 --> 01:30:23,520
let's let's see if we can make this

2044
01:30:23,520 --> 01:30:26,000
actually work

2045
01:30:29,520 --> 01:30:32,159
so first i think this should already be

2046
01:30:32,159 --> 01:30:33,360
built

2047
01:30:33,360 --> 01:30:35,839
yes

2048
01:31:07,120 --> 01:31:10,239
all right so i'm just going to flash

2049
01:31:14,840 --> 01:31:17,840
this

2050
01:31:36,180 --> 01:31:39,239
[Music]

2051
01:31:42,840 --> 01:31:45,840
hmm

2052
01:32:06,719 --> 01:32:09,840
okay so just got this flashed

2053
01:32:09,840 --> 01:32:13,760
so this example is going to show

2054
01:32:13,760 --> 01:32:27,840
the device

2055
01:32:28,480 --> 01:32:32,400
actually let me just pull up the uh

2056
01:32:39,040 --> 01:32:41,840
yeah here we are

2057
01:32:45,199 --> 01:32:48,080
okay so after you flash which is what i

2058
01:32:48,080 --> 01:32:50,559
did here

2059
01:32:51,920 --> 01:32:55,840
slashes the rpc example as is

2060
01:32:55,840 --> 01:33:00,000
the next step is to connect to it

2061
01:33:00,000 --> 01:33:03,600
over the hdlc channel let me just fix

2062
01:33:03,600 --> 01:33:05,120
the port here

2063
01:33:05,120 --> 01:33:07,679
so this one doesn't detect automatically

2064
01:33:07,679 --> 01:33:08,320
detects

2065
01:33:08,320 --> 01:33:10,559
yet

2066
01:33:20,840 --> 01:33:23,840
oh

2067
01:33:27,199 --> 01:33:30,800
okay cool all right so

2068
01:33:30,800 --> 01:33:32,080
before we go any further i just want to

2069
01:33:32,080 --> 01:33:33,920
see if people are able to

2070
01:33:33,920 --> 01:33:36,239
get this to run so there's a couple

2071
01:33:36,239 --> 01:33:38,638
moving

2072
01:33:38,880 --> 01:33:51,840
pieces here

2073
01:33:52,159 --> 01:33:54,719
great okay whatever problem we were

2074
01:33:54,719 --> 01:33:56,159
having before with the following that's

2075
01:33:56,159 --> 01:33:57,920
working

2076
01:33:57,920 --> 01:34:00,239
great

2077
01:34:02,800 --> 01:34:06,320
so once this is built the thing

2078
01:34:06,320 --> 01:34:08,719
to do is flash the binary which is this

2079
01:34:08,719 --> 01:34:10,320
command here

2080
01:34:10,320 --> 01:34:14,639
so i'll just paste this into the

2081
01:34:14,639 --> 01:34:18,080
chat after you flash it

2082
01:34:18,080 --> 01:34:21,040
you need to run the rpc interactive

2083
01:34:21,040 --> 01:34:23,600
console which is this one here

2084
01:34:23,600 --> 01:34:27,920
and then the next step is to connect to

2085
01:34:27,920 --> 01:34:29,920
the log file now right now there's a lot

2086
01:34:29,920 --> 01:34:31,679
of commands needed to do this

2087
01:34:31,679 --> 01:34:33,360
this is something that we're working on

2088
01:34:33,360 --> 01:34:35,520
improving the reason it's like this

2089
01:34:35,520 --> 01:34:38,080
is that pigweed is designed to be sort

2090
01:34:38,080 --> 01:34:40,400
of like lego blocks that you can

2091
01:34:40,400 --> 01:34:42,400
reconfigure and use in a few different

2092
01:34:42,400 --> 01:34:44,000
ways this is

2093
01:34:44,000 --> 01:34:46,159
very nice if you have an existing system

2094
01:34:46,159 --> 01:34:47,760
and you need to plug pigweed into it

2095
01:34:47,760 --> 01:34:49,760
which is what it's designed for

2096
01:34:49,760 --> 01:34:52,000
but it means that if you're just

2097
01:34:52,000 --> 01:34:53,199
starting and you want to put things

2098
01:34:53,199 --> 01:34:54,000
together

2099
01:34:54,000 --> 01:34:56,080
it might require some additional work so

2100
01:34:56,080 --> 01:34:57,440
we we haven't yet built all the

2101
01:34:57,440 --> 01:35:01,760
integrated stuff just yet

2102
01:35:01,760 --> 01:35:06,239
okay so is anybody able to actually

2103
01:35:06,320 --> 01:35:10,320
run this these commands and get

2104
01:35:10,320 --> 01:35:15,840
to get it going

2105
01:35:29,440 --> 01:35:32,080
and any luck i see some silence if there

2106
01:35:32,080 --> 01:35:33,840
were problems that would also be useful

2107
01:35:33,840 --> 01:35:34,560
to hear

2108
01:35:34,560 --> 01:35:43,840
as well

2109
01:35:53,840 --> 01:35:59,600
okay well uh put it in the chat if you

2110
01:36:02,000 --> 01:36:04,239
oh

2111
01:36:06,880 --> 01:36:09,199
oh okay well uh here you should be able

2112
01:36:09,199 --> 01:36:10,639
to get caught up because there's not

2113
01:36:10,639 --> 01:36:12,480
really any change in the code

2114
01:36:12,480 --> 01:36:15,199
so alex if you want all you have to do

2115
01:36:15,199 --> 01:36:16,480
is

2116
01:36:16,480 --> 01:36:17,920
you should be able to just run this

2117
01:36:17,920 --> 01:36:20,400
command

2118
01:36:21,440 --> 01:36:24,639
to flash that flashes

2119
01:36:24,639 --> 01:36:29,280
the flashes the rpc example

2120
01:36:29,280 --> 01:36:32,560
and then the next step is

2121
01:36:32,560 --> 01:36:38,000
to run the

2122
01:36:38,000 --> 01:36:41,040
interactive console

2123
01:36:49,119 --> 01:36:53,119
uh which is the one i'm doing here

2124
01:36:53,119 --> 01:36:56,719
and then step four

2125
01:36:56,719 --> 01:37:07,840
step three is to run the d tokenizer

2126
01:37:10,800 --> 01:37:13,920
okay so

2127
01:37:14,080 --> 01:37:15,840
yeah why don't people give that a shot

2128
01:37:15,840 --> 01:37:17,920
because i think this is one of the more

2129
01:37:17,920 --> 01:37:20,880
exciting parts of pigweed is the rpc

2130
01:37:20,880 --> 01:37:21,280
stuff

2131
01:37:21,280 --> 01:37:23,840
and i love to get people a chance to to

2132
01:37:23,840 --> 01:37:24,560
play with it

2133
01:37:24,560 --> 01:37:26,320
so i think this is worth spending a

2134
01:37:26,320 --> 01:37:34,239
couple minutes on

2135
01:37:34,239 --> 01:37:37,360
if anyone needs uh additional

2136
01:37:37,360 --> 01:37:40,239
commands they're all in the rpc section

2137
01:37:40,239 --> 01:37:49,839
of the workshop readme

2138
01:37:54,800 --> 01:37:56,560
so if the serial port is busy it could

2139
01:37:56,560 --> 01:37:58,800
be that the test runner

2140
01:37:58,800 --> 01:38:01,840
is still in the background holding on to

2141
01:38:01,840 --> 01:38:02,400
the serial

2142
01:38:02,400 --> 01:38:05,440
so if you have the arduino

2143
01:38:05,440 --> 01:38:08,159
unit test runner hiding off in a

2144
01:38:08,159 --> 01:38:09,119
terminal somewhere

2145
01:38:09,119 --> 01:38:11,840
that can can interfere it's actually

2146
01:38:11,840 --> 01:38:13,280
something we're working we want to fix

2147
01:38:13,280 --> 01:38:13,920
but

2148
01:38:13,920 --> 01:38:15,119
for now you need to be a little bit

2149
01:38:15,119 --> 01:38:17,839
careful about it

2150
01:38:20,000 --> 01:38:23,040
yeah okay cool all right well let me

2151
01:38:23,040 --> 01:38:25,280
just

2152
01:38:25,520 --> 01:38:28,560
get this going okay so while people are

2153
01:38:28,560 --> 01:38:30,840
trying to get this going and

2154
01:38:30,840 --> 01:38:32,719
[Applause]

2155
01:38:32,719 --> 01:38:36,639
ah yes control c after flash

2156
01:38:39,199 --> 01:38:42,719
so what i want to highlight here is that

2157
01:38:42,719 --> 01:38:45,760
this is calling this function called

2158
01:38:45,760 --> 01:38:49,520
getstats from

2159
01:38:49,520 --> 01:38:52,639
the proto file so

2160
01:38:52,639 --> 01:38:54,719
this is this kind of command facility in

2161
01:38:54,719 --> 01:38:55,840
figly where

2162
01:38:55,840 --> 01:38:57,520
you define rpc service just like you

2163
01:38:57,520 --> 01:38:59,440
would if you were building a

2164
01:38:59,440 --> 01:39:02,400
internet service where or a web service

2165
01:39:02,400 --> 01:39:02,960
that

2166
01:39:02,960 --> 01:39:06,480
serves commands by requesting a response

2167
01:39:06,480 --> 01:39:09,600
with with these protocol buffer messages

2168
01:39:09,600 --> 01:39:10,960
you can do the same thing on your

2169
01:39:10,960 --> 01:39:12,960
embedded device

2170
01:39:12,960 --> 01:39:14,480
and so that's what this is showing here

2171
01:39:14,480 --> 01:39:16,400
so this little

2172
01:39:16,400 --> 01:39:18,560
command prompt is it's actually just

2173
01:39:18,560 --> 01:39:19,679
interactive python

2174
01:39:19,679 --> 01:39:22,880
so what this is doing is it's connecting

2175
01:39:22,880 --> 01:39:24,800
the device through serial

2176
01:39:24,800 --> 01:39:27,679
it's parsing these hdlc formatted

2177
01:39:27,679 --> 01:39:28,719
packets

2178
01:39:28,719 --> 01:39:30,639
and then using the pigweed rpc

2179
01:39:30,639 --> 01:39:31,760
infrastructure which

2180
01:39:31,760 --> 01:39:33,199
just needs to kind of pack it in pack it

2181
01:39:33,199 --> 01:39:35,199
out interface to

2182
01:39:35,199 --> 01:39:38,080
allow you to interact with the device

2183
01:39:38,080 --> 01:39:41,360
and so this object here rpcs

2184
01:39:41,360 --> 01:39:44,239
this is the the collection of services

2185
01:39:44,239 --> 01:39:45,360
that are available

2186
01:39:45,360 --> 01:39:48,159
on on the device and in this case you

2187
01:39:48,159 --> 01:39:49,600
can see there's actually two services so

2188
01:39:49,600 --> 01:39:51,520
one is the remote icon super loop

2189
01:39:51,520 --> 01:39:53,760
which is the one here and then the other

2190
01:39:53,760 --> 01:39:56,800
one is echo service

2191
01:39:59,040 --> 01:40:02,880
there's this one that lets you

2192
01:40:03,199 --> 01:40:05,040
send a message and then it will echo it

2193
01:40:05,040 --> 01:40:08,000
back so in rpc systems

2194
01:40:08,000 --> 01:40:10,960
so yeah when you're first writing code

2195
01:40:10,960 --> 01:40:13,840
you write a hello world with a print

2196
01:40:13,840 --> 01:40:15,920
and then when you're doing embedded or

2197
01:40:15,920 --> 01:40:18,239
hardware your hello world is the blink

2198
01:40:18,239 --> 01:40:19,840
and light

2199
01:40:19,840 --> 01:40:22,159
but with rpc systems the hello world is

2200
01:40:22,159 --> 01:40:23,440
the echo surface

2201
01:40:23,440 --> 01:40:25,280
which is that it just sends you back

2202
01:40:25,280 --> 01:40:28,080
what you sent in

2203
01:40:28,480 --> 01:40:31,040
and so that's what this is so the echo

2204
01:40:31,040 --> 01:40:32,480
service is just one of the

2205
01:40:32,480 --> 01:40:34,480
services inside pygmy that you can

2206
01:40:34,480 --> 01:40:38,320
include if you want to test out the rpcs

2207
01:40:38,560 --> 01:40:41,679
so okay cool all right awesome so you

2208
01:40:41,679 --> 01:40:42,880
got the tailing log

2209
01:40:42,880 --> 01:40:45,840
alex sounds like were you able to run

2210
01:40:45,840 --> 01:40:46,719
these commands here

2211
01:40:46,719 --> 01:40:50,320
use echo service so let me

2212
01:40:50,320 --> 01:40:56,000
just put this into the zoom chat

2213
01:41:00,159 --> 01:41:04,239
was is anybody able to run the rpc

2214
01:41:04,239 --> 01:41:06,320
yeah so actually i want to point out

2215
01:41:06,320 --> 01:41:07,679
that

2216
01:41:07,679 --> 01:41:10,400
it's ipython so all the the tab

2217
01:41:10,400 --> 01:41:12,320
completion goodies should work

2218
01:41:12,320 --> 01:41:14,239
um you know you have all the all the

2219
01:41:14,239 --> 01:41:17,360
nice things syntax highlighting even

2220
01:41:17,360 --> 01:41:20,480
uh yeah which is

2221
01:41:20,480 --> 01:41:24,799
oh yeah which is pretty cool

2222
01:41:27,040 --> 01:41:30,639
let's see all this stuff here

2223
01:41:30,880 --> 01:41:35,760
service oh yeah okay i guess here

2224
01:41:40,400 --> 01:41:43,440
okay cool so this

2225
01:41:43,440 --> 01:41:46,239
kind of shows the functionality and i

2226
01:41:46,239 --> 01:41:47,760
wanted to also point out this is running

2227
01:41:47,760 --> 01:41:49,040
in bare metal

2228
01:41:49,040 --> 01:41:50,800
uh and there's a loop that's kind of

2229
01:41:50,800 --> 01:41:52,080
doing

2230
01:41:52,080 --> 01:41:56,080
both blinking oh actually

2231
01:41:56,080 --> 01:41:58,000
let me show that it's actually blinking

2232
01:41:58,000 --> 01:41:59,760
as well so it's blinking

2233
01:41:59,760 --> 01:42:03,119
while handling rpcs

2234
01:42:03,840 --> 01:42:14,480
all right so any questions so far

2235
01:42:14,480 --> 01:42:17,520
all right so next up i want to show the

2236
01:42:17,520 --> 01:42:19,440
civil flesh code

2237
01:42:19,440 --> 01:42:21,199
so you can see it in the example and

2238
01:42:21,199 --> 01:42:23,440
i'll just walk through

2239
01:42:23,440 --> 01:42:24,800
here maybe you want to get into this

2240
01:42:24,800 --> 01:42:27,119
later but why

2241
01:42:27,119 --> 01:42:29,119
maybe you can give an example of why

2242
01:42:29,119 --> 01:42:30,880
you'd want to send rpcs

2243
01:42:30,880 --> 01:42:34,400
like from the host to a product

2244
01:42:34,400 --> 01:42:36,480
yeah so the classic reason you'd be

2245
01:42:36,480 --> 01:42:37,840
doing rpcs

2246
01:42:37,840 --> 01:42:40,880
from the host to the device at least for

2247
01:42:40,880 --> 01:42:42,560
high volume electronic stuff

2248
01:42:42,560 --> 01:42:44,800
is in factory tests now actually this

2249
01:42:44,800 --> 01:42:46,639
rpg system is designed to work also in

2250
01:42:46,639 --> 01:42:47,440
the field

2251
01:42:47,440 --> 01:42:49,040
in consumer hands for communicating

2252
01:42:49,040 --> 01:42:50,880
between microcontrollers

2253
01:42:50,880 --> 01:42:52,960
or say a microcontroller and a phone and

2254
01:42:52,960 --> 01:42:54,000
other other

2255
01:42:54,000 --> 01:42:56,800
possible situations but uh but the

2256
01:42:56,800 --> 01:42:58,080
classic one

2257
01:42:58,080 --> 01:42:59,920
that we originally started designing

2258
01:42:59,920 --> 01:43:02,560
this for was for a factory test

2259
01:43:02,560 --> 01:43:05,440
and the example is perhaps you want to

2260
01:43:05,440 --> 01:43:06,880
turn on an led

2261
01:43:06,880 --> 01:43:10,000
to verify that it works in the factory

2262
01:43:10,000 --> 01:43:12,960
and you would have a command where you

2263
01:43:12,960 --> 01:43:14,320
send something that says

2264
01:43:14,320 --> 01:43:17,920
turn on led and then a sensor so the

2265
01:43:17,920 --> 01:43:20,000
factory would have a test station

2266
01:43:20,000 --> 01:43:22,800
that looks at the led or maybe it's a

2267
01:43:22,800 --> 01:43:23,199
person

2268
01:43:23,199 --> 01:43:25,040
maybe it's you you're doing a small run

2269
01:43:25,040 --> 01:43:26,239
of devices

2270
01:43:26,239 --> 01:43:28,320
you want to check that the led works and

2271
01:43:28,320 --> 01:43:30,000
so maybe you would have a command that

2272
01:43:30,000 --> 01:43:31,760
turns on the led and says oh do you see

2273
01:43:31,760 --> 01:43:34,400
the led on you'd hit yes

2274
01:43:34,400 --> 01:43:35,920
and then it would turn it off and it

2275
01:43:35,920 --> 01:43:38,320
would go on to the next test

2276
01:43:38,320 --> 01:43:39,920
so that's one example another one might

2277
01:43:39,920 --> 01:43:41,679
be again in the factory

2278
01:43:41,679 --> 01:43:43,679
you're manufacturing you plug the device

2279
01:43:43,679 --> 01:43:45,520
into the first test station

2280
01:43:45,520 --> 01:43:47,199
and you want to write things like the

2281
01:43:47,199 --> 01:43:49,360
manufacturing date and the serial number

2282
01:43:49,360 --> 01:43:50,960
to the

2283
01:43:50,960 --> 01:43:52,800
to the device and that's another case

2284
01:43:52,800 --> 01:43:54,320
where you would use

2285
01:43:54,320 --> 01:43:59,679
uh an rpc so those are some examples

2286
01:43:59,679 --> 01:44:02,880
um other cases include things like maybe

2287
01:44:02,880 --> 01:44:03,920
there's crash handling actually

2288
01:44:03,920 --> 01:44:04,639
something that

2289
01:44:04,639 --> 01:44:08,159
isn't pigweed is is crash

2290
01:44:08,159 --> 01:44:11,199
handling where at crash time perhaps a

2291
01:44:11,199 --> 01:44:12,239
little bit of flash

2292
01:44:12,239 --> 01:44:15,600
is used to store the cpu state in order

2293
01:44:15,600 --> 01:44:17,440
to look at it later to understand what

2294
01:44:17,440 --> 01:44:18,960
happened to the device

2295
01:44:18,960 --> 01:44:21,520
and so maybe there will be an rpc to

2296
01:44:21,520 --> 01:44:23,040
download those

2297
01:44:23,040 --> 01:44:25,600
crash crash records so you can look at

2298
01:44:25,600 --> 01:44:26,800
them later

2299
01:44:26,800 --> 01:44:29,119
so i think that's a few examples of

2300
01:44:29,119 --> 01:44:31,440
where you might use rpc

2301
01:44:31,440 --> 01:44:35,839
um yeah

2302
01:44:36,010 --> 01:44:39,609
[Applause]

2303
01:44:43,440 --> 01:44:47,360
ah thanks for the command john

2304
01:44:47,360 --> 01:44:50,320
sounds like our our instructions might

2305
01:44:50,320 --> 01:44:51,520
have been slightly wrong so

2306
01:44:51,520 --> 01:44:56,719
sorry about that cool

2307
01:44:57,920 --> 01:45:01,760
all right great so uh so this is the

2308
01:45:01,760 --> 01:45:03,280
the kind of user experience you see that

2309
01:45:03,280 --> 01:45:04,880
you see this here actually i want to

2310
01:45:04,880 --> 01:45:05,440
point out

2311
01:45:05,440 --> 01:45:09,040
the rbc has a status and this message is

2312
01:45:09,040 --> 01:45:12,639
uh you know it's returned

2313
01:45:12,639 --> 01:45:16,320
but the other one is

2314
01:45:16,320 --> 01:45:18,880
the super loop get stats and you can see

2315
01:45:18,880 --> 01:45:20,880
here if i call this

2316
01:45:20,880 --> 01:45:25,199
um the number is going up

2317
01:45:25,199 --> 01:45:26,639
let's take a look at the code to see

2318
01:45:26,639 --> 01:45:31,840
what this is doing

2319
01:45:32,239 --> 01:45:34,159
if you get some interference on the like

2320
01:45:34,159 --> 01:45:36,480
serial line is there any kind of

2321
01:45:36,480 --> 01:45:39,199
air handling yeah so one of the nice

2322
01:45:39,199 --> 01:45:39,760
features

2323
01:45:39,760 --> 01:45:42,880
of this whole setup we have in pigweed

2324
01:45:42,880 --> 01:45:43,440
which

2325
01:45:43,440 --> 01:45:46,480
is it's all optional but the serial

2326
01:45:46,480 --> 01:45:47,040
handling

2327
01:45:47,040 --> 01:45:50,239
includes crc checking so if there's a

2328
01:45:50,239 --> 01:45:53,360
blip in the serial line you will know on

2329
01:45:53,360 --> 01:45:54,960
the on the host side you'll know that

2330
01:45:54,960 --> 01:45:56,719
something went wrong and also on the

2331
01:45:56,719 --> 01:45:57,440
device side

2332
01:45:57,440 --> 01:46:00,080
if there are corrupt packets it's

2333
01:46:00,080 --> 01:46:01,199
detected

2334
01:46:01,199 --> 01:46:04,080
and ignored um or if you can keep track

2335
01:46:04,080 --> 01:46:05,280
of it or put stuff actually one of the

2336
01:46:05,280 --> 01:46:06,639
exercises in here is to

2337
01:46:06,639 --> 01:46:10,840
track um track errors

2338
01:46:10,840 --> 01:46:13,920
so yeah and that's a really nice feature

2339
01:46:13,920 --> 01:46:14,560
that's

2340
01:46:14,560 --> 01:46:16,000
possible but a little bit harder to

2341
01:46:16,000 --> 01:46:17,760
implement if you have a regular text

2342
01:46:17,760 --> 01:46:18,239
mode

2343
01:46:18,239 --> 01:46:20,480
kind of human readable interface is that

2344
01:46:20,480 --> 01:46:21,440
you

2345
01:46:21,440 --> 01:46:23,920
you know it's just not practical or it's

2346
01:46:23,920 --> 01:46:25,440
just often not done

2347
01:46:25,440 --> 01:46:27,280
you just kind of have text interface

2348
01:46:27,280 --> 01:46:29,360
over a uart there's no

2349
01:46:29,360 --> 01:46:32,080
error checking or correcting and it's

2350
01:46:32,080 --> 01:46:32,560
just

2351
01:46:32,560 --> 01:46:34,000
you know that that is what it is and

2352
01:46:34,000 --> 01:46:35,600
things will sometimes fail

2353
01:46:35,600 --> 01:46:38,400
mysteriously especially under load and

2354
01:46:38,400 --> 01:46:39,440
at least with

2355
01:46:39,440 --> 01:46:41,920
with this approach because we're able to

2356
01:46:41,920 --> 01:46:43,119
take it over and go

2357
01:46:43,119 --> 01:46:46,719
binary uh the you know these types of

2358
01:46:46,719 --> 01:46:47,920
errors just don't happen

2359
01:46:47,920 --> 01:46:50,800
as much or at least if it does happen

2360
01:46:50,800 --> 01:46:55,520
you know there's no mystery

2361
01:46:55,520 --> 01:46:57,840
okay so i'm going to start going through

2362
01:46:57,840 --> 01:46:59,760
the code

2363
01:46:59,760 --> 01:47:02,560
for how this works and there's a couple

2364
01:47:02,560 --> 01:47:04,560
couple things i wanted to point out so

2365
01:47:04,560 --> 01:47:08,400
first off uh pw or pigweed in general is

2366
01:47:08,400 --> 01:47:08,880
this

2367
01:47:08,880 --> 01:47:10,560
modular stack there's a bunch of

2368
01:47:10,560 --> 01:47:12,239
different pieces

2369
01:47:12,239 --> 01:47:16,000
there's they're loose-ishly coupled

2370
01:47:16,000 --> 01:47:17,520
and you're supposed to be able to just

2371
01:47:17,520 --> 01:47:19,440
take the pieces that make sense for you

2372
01:47:19,440 --> 01:47:21,600
and plug them into your existing system

2373
01:47:21,600 --> 01:47:24,320
including your existing build system and

2374
01:47:24,320 --> 01:47:25,840
rpc is no different

2375
01:47:25,840 --> 01:47:29,520
so the way this is set up in the demo

2376
01:47:29,520 --> 01:47:32,639
on the tt is like this so in short

2377
01:47:32,639 --> 01:47:34,639
you have a uart which is the physical

2378
01:47:34,639 --> 01:47:35,679
pin now of course

2379
01:47:35,679 --> 01:47:37,760
okay on teensy it's actually you are

2380
01:47:37,760 --> 01:47:39,199
flowing over usb

2381
01:47:39,199 --> 01:47:41,920
but we'll ignore that for the moment um

2382
01:47:41,920 --> 01:47:42,560
uart

2383
01:47:42,560 --> 01:47:45,760
is then put through this thing called pw

2384
01:47:45,760 --> 01:47:46,560
sysio

2385
01:47:46,560 --> 01:47:49,040
you kind of think of ciscio as pigweed's

2386
01:47:49,040 --> 01:47:51,360
stdio is just like

2387
01:47:51,360 --> 01:47:53,600
yeah like standard in and out except it

2388
01:47:53,600 --> 01:47:56,880
doesn't use file descriptors

2389
01:47:56,880 --> 01:47:58,560
and you can see the the module docs for

2390
01:47:58,560 --> 01:48:00,960
that if you look it up

2391
01:48:00,960 --> 01:48:04,800
and then over sysio we flow hdlc which

2392
01:48:04,800 --> 01:48:06,239
you can kind of think of as just

2393
01:48:06,239 --> 01:48:09,040
a packet framing mechanism it's just a

2394
01:48:09,040 --> 01:48:10,080
way of converting

2395
01:48:10,080 --> 01:48:13,040
a byte stream into a packet stream with

2396
01:48:13,040 --> 01:48:14,719
some error checking

2397
01:48:14,719 --> 01:48:18,400
that's that's all it does uh and then

2398
01:48:18,400 --> 01:48:21,679
on top of that we have pw rpc

2399
01:48:21,679 --> 01:48:23,520
which is the the thing you're looking at

2400
01:48:23,520 --> 01:48:25,040
on the screen where

2401
01:48:25,040 --> 01:48:28,159
it in the rpc system expects

2402
01:48:28,159 --> 01:48:31,760
pack it in pack it out and then all the

2403
01:48:31,760 --> 01:48:33,679
rest of the rpg stuff happens with just

2404
01:48:33,679 --> 01:48:35,920
that

2405
01:48:36,080 --> 01:48:39,520
so before i go forward uh

2406
01:48:39,520 --> 01:48:42,480
does this kind of stack make sense uh

2407
01:48:42,480 --> 01:48:43,760
has anybody

2408
01:48:43,760 --> 01:48:45,520
any thoughts on this has anybody dealt

2409
01:48:45,520 --> 01:48:49,199
with unreliable cereal before

2410
01:48:58,840 --> 01:49:01,840
okay

2411
01:49:05,600 --> 01:49:08,159
oh cool well we uh we actually hadn't

2412
01:49:08,159 --> 01:49:10,400
seen hdlc before it was new to us so it

2413
01:49:10,400 --> 01:49:12,400
was recommended to us by

2414
01:49:12,400 --> 01:49:14,159
some people in our extended family of

2415
01:49:14,159 --> 01:49:16,080
embedded hackers at google

2416
01:49:16,080 --> 01:49:17,920
and turns out it's a great fit so i'm

2417
01:49:17,920 --> 01:49:20,000
really glad we decided to use it it's

2418
01:49:20,000 --> 01:49:22,560
really nice

2419
01:49:24,560 --> 01:49:29,840
hlvc uh

2420
01:49:30,400 --> 01:49:34,400
yeah i'm not sure yeah it's hldc at

2421
01:49:34,400 --> 01:49:37,598
least according to wikipedia

2422
01:49:39,119 --> 01:49:43,119
really do we do this wrong everywhere

2423
01:49:43,119 --> 01:49:46,800
wow okay i guess you go either way

2424
01:49:46,800 --> 01:49:51,840
high level data thing control huh

2425
01:49:52,159 --> 01:49:56,960
oh i think that the first l is

2426
01:49:56,960 --> 01:50:00,000
anyway yeah

2427
01:50:00,000 --> 01:50:03,920
okay yeah

2428
01:50:03,920 --> 01:50:05,840
so let me just go through briefly how

2429
01:50:05,840 --> 01:50:07,040
this is hooked up

2430
01:50:07,040 --> 01:50:10,080
so we have the cis sysio writer

2431
01:50:10,080 --> 01:50:12,880
that takes over the sysio interface and

2432
01:50:12,880 --> 01:50:14,080
converts it into

2433
01:50:14,080 --> 01:50:15,760
pigweed's kind of writer interface which

2434
01:50:15,760 --> 01:50:18,320
is just a essentially just a

2435
01:50:18,320 --> 01:50:21,599
callback with a write data function

2436
01:50:21,599 --> 01:50:23,520
and then we have this thing called a

2437
01:50:23,520 --> 01:50:25,199
hdlc channel output

2438
01:50:25,199 --> 01:50:28,239
so this is the magic where the rpc

2439
01:50:28,239 --> 01:50:30,560
system is connected to

2440
01:50:30,560 --> 01:50:34,080
the hdlc packet you know interface

2441
01:50:34,080 --> 01:50:35,920
and what's cool about this is that you

2442
01:50:35,920 --> 01:50:37,520
can use your own so sometimes people

2443
01:50:37,520 --> 01:50:38,320
have a

2444
01:50:38,320 --> 01:50:40,320
spy bus that works differently or they

2445
01:50:40,320 --> 01:50:41,679
have a

2446
01:50:41,679 --> 01:50:44,320
maybe it's they're running over ethernet

2447
01:50:44,320 --> 01:50:47,119
and they're sending ethernet packets

2448
01:50:47,119 --> 01:50:48,960
you would make an ethernet channel that

2449
01:50:48,960 --> 01:50:51,760
would bridge between rpc and ethernet

2450
01:50:51,760 --> 01:50:54,000
so this this is where you would do that

2451
01:50:54,000 --> 01:50:55,040
and in this case we

2452
01:50:55,040 --> 01:50:58,320
already have a implemented solution for

2453
01:50:58,320 --> 01:50:58,880
this

2454
01:50:58,880 --> 01:51:01,920
which is the hdlc light

2455
01:51:01,920 --> 01:51:05,440
rpc channel output and that's what this

2456
01:51:05,440 --> 01:51:07,440
is

2457
01:51:07,440 --> 01:51:10,000
so additionally some devices will have

2458
01:51:10,000 --> 01:51:11,199
multiple

2459
01:51:11,199 --> 01:51:13,119
channels so maybe you have a uart that

2460
01:51:13,119 --> 01:51:14,480
you want to do rpc over

2461
01:51:14,480 --> 01:51:17,280
but you also have a spy bus and maybe

2462
01:51:17,280 --> 01:51:18,880
there's even a low speed

2463
01:51:18,880 --> 01:51:20,800
bluetooth connection that you also want

2464
01:51:20,800 --> 01:51:22,320
to run rpcs over

2465
01:51:22,320 --> 01:51:26,400
so pw rpc supports simultaneously

2466
01:51:26,400 --> 01:51:29,119
having rpcs from all of these sources

2467
01:51:29,119 --> 01:51:30,480
where each one of them is a separate

2468
01:51:30,480 --> 01:51:31,119
channel

2469
01:51:31,119 --> 01:51:33,199
so that's what this would let you do in

2470
01:51:33,199 --> 01:51:35,040
this case there's just one channel which

2471
01:51:35,040 --> 01:51:36,880
is the one over serial

2472
01:51:36,880 --> 01:51:41,280
or hdlc over serial and so that's it

2473
01:51:42,639 --> 01:51:46,560
and the next up is this

2474
01:51:47,119 --> 01:51:49,119
which is the actual rpc server so this

2475
01:51:49,119 --> 01:51:51,119
rbc server is the object that

2476
01:51:51,119 --> 01:51:53,920
holds all the services and the channels

2477
01:51:53,920 --> 01:51:55,119
and does the actual work

2478
01:51:55,119 --> 01:51:58,159
to kind of route packets between them or

2479
01:51:58,159 --> 01:52:04,239
call called rpc handlers as appropriate

2480
01:52:04,239 --> 01:52:08,400
and then finally these two are the

2481
01:52:08,400 --> 01:52:11,119
um this is just the input buffer where

2482
01:52:11,119 --> 01:52:12,960
we're pulling packets in

2483
01:52:12,960 --> 01:52:15,040
while we're waiting for a full packet to

2484
01:52:15,040 --> 01:52:17,440
the input

2485
01:52:17,440 --> 01:52:20,400
and then this one here is the hdlc

2486
01:52:20,400 --> 01:52:21,520
decoder

2487
01:52:21,520 --> 01:52:23,440
that kind of holds on to bytes as they

2488
01:52:23,440 --> 01:52:24,800
come in and then when a

2489
01:52:24,800 --> 01:52:27,599
when a packet end byte comes in it will

2490
01:52:27,599 --> 01:52:28,480
verify the

2491
01:52:28,480 --> 01:52:32,239
crc and send along the

2492
01:52:32,239 --> 01:52:34,719
packet to rpc and you'll see how that

2493
01:52:34,719 --> 01:52:37,280
works below

2494
01:52:37,360 --> 01:52:39,520
okay now this part this is one of the

2495
01:52:39,520 --> 01:52:40,480
things that i think

2496
01:52:40,480 --> 01:52:43,840
makes pigweed's rpc really cool is that

2497
01:52:43,840 --> 01:52:46,719
it's just like grpc

2498
01:52:46,719 --> 01:52:49,840
and you can declare services that are in

2499
01:52:49,840 --> 01:52:51,199
shared libraries that can be

2500
01:52:51,199 --> 01:52:53,920
included in other projects so the

2501
01:52:53,920 --> 01:52:55,280
example here echo service

2502
01:52:55,280 --> 01:52:57,199
echo services is infigured upstream but

2503
01:52:57,199 --> 01:52:58,719
what we've done here is include it

2504
01:52:58,719 --> 01:53:01,280
in our binary as just a component that

2505
01:53:01,280 --> 01:53:02,320
you stick in

2506
01:53:02,320 --> 01:53:03,840
register it with your service or

2507
01:53:03,840 --> 01:53:05,520
register it with your server and you're

2508
01:53:05,520 --> 01:53:07,440
good to go

2509
01:53:07,440 --> 01:53:09,679
and this can be controlled with an if

2510
01:53:09,679 --> 01:53:10,800
death

2511
01:53:10,800 --> 01:53:12,639
or you know an if to decide whether or

2512
01:53:12,639 --> 01:53:13,920
not it's registered

2513
01:53:13,920 --> 01:53:15,840
which makes it pretty flexible so you

2514
01:53:15,840 --> 01:53:17,360
can have one

2515
01:53:17,360 --> 01:53:20,639
binary or you can control

2516
01:53:20,639 --> 01:53:22,880
how how or whether or not these services

2517
01:53:22,880 --> 01:53:25,199
are available

2518
01:53:25,199 --> 01:53:26,960
and then this one so this super loop

2519
01:53:26,960 --> 01:53:28,800
service this is the one that you saw in

2520
01:53:28,800 --> 01:53:30,480
the other file

2521
01:53:30,480 --> 01:53:33,760
uh is the one that lets you control or

2522
01:53:33,760 --> 01:53:36,480
see how far uh how many iterations have

2523
01:53:36,480 --> 01:53:37,280
been made

2524
01:53:37,280 --> 01:53:41,040
for the super loop you see here we have

2525
01:53:41,040 --> 01:53:42,800
the call to register the services

2526
01:53:42,800 --> 01:53:44,960
so this is where they're stuck into the

2527
01:53:44,960 --> 01:53:47,760
rpc server

2528
01:53:50,000 --> 01:53:52,320
okay so before i get into how the rpcs

2529
01:53:52,320 --> 01:53:53,599
are actually handled i'm going to hop

2530
01:53:53,599 --> 01:53:54,719
down to the

2531
01:53:54,719 --> 01:53:57,920
loop the super loop so how does this

2532
01:53:57,920 --> 01:53:59,599
whole thing work

2533
01:53:59,599 --> 01:54:04,239
in short forever it links to led

2534
01:54:04,239 --> 01:54:05,280
which is actually a little bit more

2535
01:54:05,280 --> 01:54:06,719
complicated than you might think and

2536
01:54:06,719 --> 01:54:08,400
i'll get into that

2537
01:54:08,400 --> 01:54:12,080
in a minute it

2538
01:54:12,080 --> 01:54:14,639
pulls one byte at a time from uart and

2539
01:54:14,639 --> 01:54:15,679
then if that byte

2540
01:54:15,679 --> 01:54:18,560
is a packet finisher so packet's

2541
01:54:18,560 --> 01:54:19,040
complete

2542
01:54:19,040 --> 01:54:21,440
it will send it over to the rpc system

2543
01:54:21,440 --> 01:54:23,440
to be handled

2544
01:54:23,440 --> 01:54:25,679
and then finally it increments the super

2545
01:54:25,679 --> 01:54:26,960
loop iteration counter

2546
01:54:26,960 --> 01:54:31,360
which is the uh what's happening here

2547
01:54:31,360 --> 01:54:32,480
you can see this number that's

2548
01:54:32,480 --> 01:54:35,040
incrementing that is

2549
01:54:35,040 --> 01:54:39,119
this variable that's been exported

2550
01:54:39,119 --> 01:54:42,239
okay so let's first talk about blink i

2551
01:54:42,239 --> 01:54:44,159
actually have a pop quiz on this one so

2552
01:54:44,159 --> 01:54:45,360
this is uh

2553
01:54:45,360 --> 01:54:47,679
this is a head scratcher and let's see

2554
01:54:47,679 --> 01:54:49,040
if people

2555
01:54:49,040 --> 01:54:52,400
can figure this out so i have a blank

2556
01:54:52,400 --> 01:54:53,599
function here

2557
01:54:53,599 --> 01:54:54,960
this one is the one that's running and

2558
01:54:54,960 --> 01:54:56,639
this works and i have a link function

2559
01:54:56,639 --> 01:54:57,679
here

2560
01:54:57,679 --> 01:55:00,960
and this one does not work

2561
01:55:02,000 --> 01:55:06,880
question for the audience any idea why

2562
01:55:06,880 --> 01:55:09,920
this one works but this one

2563
01:55:09,920 --> 01:55:12,480
does not

2564
01:55:13,040 --> 01:55:16,000
all right and you can see that the

2565
01:55:16,000 --> 01:55:18,159
second one

2566
01:55:18,159 --> 01:55:21,840
just spits out a log log statement

2567
01:55:21,840 --> 01:55:24,960
turns onto led waits for a second or so

2568
01:55:24,960 --> 01:55:28,400
and then sends another log message

2569
01:55:28,400 --> 01:55:30,719
and turns led off and then waits a

2570
01:55:30,719 --> 01:55:32,719
little bit more and yeah there's a

2571
01:55:32,719 --> 01:55:34,000
reasonable this is exactly the same code

2572
01:55:34,000 --> 01:55:36,639
that's in the other examples

2573
01:55:36,639 --> 01:55:38,560
so why doesn't it work here why are we

2574
01:55:38,560 --> 01:55:40,080
doing something different

2575
01:55:40,080 --> 01:55:43,360
for for this one

2576
01:55:44,239 --> 01:55:47,360
just totally pop quiz so

2577
01:55:47,360 --> 01:55:47,620
uh

2578
01:55:47,620 --> 01:55:50,720
[Music]

2579
01:55:54,560 --> 01:55:56,159
i see we have some alert audience

2580
01:55:56,159 --> 01:55:58,320
members exactly so the problem is that

2581
01:55:58,320 --> 01:55:59,280
this one blocks

2582
01:55:59,280 --> 01:56:01,280
we're in bare metal there's no threads

2583
01:56:01,280 --> 01:56:02,880
or anything so

2584
01:56:02,880 --> 01:56:05,040
this one is a spin delay completely

2585
01:56:05,040 --> 01:56:06,880
holding the processor hostage

2586
01:56:06,880 --> 01:56:09,599
so nothing is going to happen when it's

2587
01:56:09,599 --> 01:56:10,320
blinking

2588
01:56:10,320 --> 01:56:11,920
which means that essentially it's

2589
01:56:11,920 --> 01:56:13,599
reading one character per second

2590
01:56:13,599 --> 01:56:15,840
of course that totally doesn't work so

2591
01:56:15,840 --> 01:56:17,520
and here cure totally did not get

2592
01:56:17,520 --> 01:56:19,520
tripped up by this while developing this

2593
01:56:19,520 --> 01:56:22,800
yes i promise i did not make this error

2594
01:56:22,800 --> 01:56:25,199
when i was developing

2595
01:56:25,199 --> 01:56:28,239
i should know better but uh actually a

2596
01:56:28,239 --> 01:56:30,480
lot of the piggy stuff is used

2597
01:56:30,480 --> 01:56:33,840
uh in our house context even though

2598
01:56:33,840 --> 01:56:37,760
all the pigweed code is bare metal

2599
01:56:37,760 --> 01:56:39,520
most of the projects are are using our

2600
01:56:39,520 --> 01:56:41,280
tosses

2601
01:56:41,280 --> 01:56:43,440
yeah this would work in that context but

2602
01:56:43,440 --> 01:56:46,559
here it does not

2603
01:56:47,199 --> 01:56:49,599
yeah and i think everyone got this so

2604
01:56:49,599 --> 01:56:52,080
it's great

2605
01:56:52,800 --> 01:56:54,400
okay so that's how it's working and

2606
01:56:54,400 --> 01:56:56,239
essentially it's a delay loop

2607
01:56:56,239 --> 01:56:58,480
so it counts up until counter max and

2608
01:56:58,480 --> 01:56:59,760
then flips the

2609
01:56:59,760 --> 01:57:01,760
led but this function returns

2610
01:57:01,760 --> 01:57:03,199
immediately

2611
01:57:03,199 --> 01:57:05,920
if there's no flipping happening and it

2612
01:57:05,920 --> 01:57:07,760
allows the

2613
01:57:07,760 --> 01:57:11,840
uart parsing to proceed

2614
01:57:12,560 --> 01:57:14,080
okay cool so that's how the blinking

2615
01:57:14,080 --> 01:57:16,000
works without blocking

2616
01:57:16,000 --> 01:57:18,480
and now let's talk about how the rpc

2617
01:57:18,480 --> 01:57:20,880
stuff is handled

2618
01:57:20,880 --> 01:57:23,280
so in this function essentially all

2619
01:57:23,280 --> 01:57:24,639
you're doing is reading a byte

2620
01:57:24,639 --> 01:57:26,960
stepping into the hdlc decoder if you

2621
01:57:26,960 --> 01:57:28,159
got a packet

2622
01:57:28,159 --> 01:57:32,639
shovel it into the rpc subsystem

2623
01:57:32,639 --> 01:57:35,280
all right and so that's what this is

2624
01:57:35,280 --> 01:57:36,719
doing so this is trying to read a byte

2625
01:57:36,719 --> 01:57:37,520
just says

2626
01:57:37,520 --> 01:57:41,119
is our bite waiting in the

2627
01:57:41,119 --> 01:57:44,800
in the serial driver if there is

2628
01:57:44,800 --> 01:57:47,360
stuff stuff it into the hdlc decoder now

2629
01:57:47,360 --> 01:57:49,360
the hdlc decoder holds state

2630
01:57:49,360 --> 01:57:51,280
it kind of incrementally gets packets

2631
01:57:51,280 --> 01:57:53,440
and accumulates the crc

2632
01:57:53,440 --> 01:57:56,239
and then when it gets a closer packet it

2633
01:57:56,239 --> 01:57:58,000
it may it completes

2634
01:57:58,000 --> 01:57:59,679
and we'll do the verification of the crc

2635
01:57:59,679 --> 01:58:02,000
and so on

2636
01:58:02,000 --> 01:58:05,040
uh if the result is not okay which

2637
01:58:05,040 --> 01:58:06,480
actually can be not okay for a few

2638
01:58:06,480 --> 01:58:08,000
reasons

2639
01:58:08,000 --> 01:58:09,679
but one of them is you know result

2640
01:58:09,679 --> 01:58:10,880
unavailable or something like that that

2641
01:58:10,880 --> 01:58:11,840
indicates it's just

2642
01:58:11,840 --> 01:58:14,400
just not finished yet that's normal but

2643
01:58:14,400 --> 01:58:16,000
sometimes you can have

2644
01:58:16,000 --> 01:58:17,679
not result okay whereas corruption so

2645
01:58:17,679 --> 01:58:19,199
that's why i put a little exercise here

2646
01:58:19,199 --> 01:58:20,639
if you want to

2647
01:58:20,639 --> 01:58:23,280
use the pigmy metric system to track

2648
01:58:23,280 --> 01:58:24,239
that

2649
01:58:24,239 --> 01:58:25,920
okay but if it did finish and you got a

2650
01:58:25,920 --> 01:58:27,280
packet

2651
01:58:27,280 --> 01:58:29,119
which is what this is logging and by the

2652
01:58:29,119 --> 01:58:32,239
way you can actually see this

2653
01:58:32,840 --> 01:58:35,840
so

2654
01:58:36,800 --> 01:58:39,599
so you can actually see it says i call i

2655
01:58:39,599 --> 01:58:42,960
don't know if you can see but it says

2656
01:58:42,960 --> 01:58:45,679
complete hdlc packet so that's that log

2657
01:58:45,679 --> 01:58:46,840
statement

2658
01:58:46,840 --> 01:58:50,320
firing uh all right

2659
01:58:50,320 --> 01:58:52,080
and now this brings us to an interesting

2660
01:58:52,080 --> 01:58:54,080
property of hclc which is that there's a

2661
01:58:54,080 --> 01:58:55,760
channel concept

2662
01:58:55,760 --> 01:58:59,040
confe sorry an address concept and we

2663
01:58:59,040 --> 01:59:00,480
use it

2664
01:59:00,480 --> 01:59:04,000
to divide out the log data from the rpc

2665
01:59:04,000 --> 01:59:06,320
content so what you're seeing in this

2666
01:59:06,320 --> 01:59:08,080
window is that

2667
01:59:08,080 --> 01:59:10,719
uh these commands are actually running

2668
01:59:10,719 --> 01:59:11,840
over

2669
01:59:11,840 --> 01:59:14,960
address zero which might be a different

2670
01:59:14,960 --> 01:59:16,400
address but something

2671
01:59:16,400 --> 01:59:18,159
that's different than the log statements

2672
01:59:18,159 --> 01:59:19,599
so these log statements are running over

2673
01:59:19,599 --> 01:59:22,560
i think address one

2674
01:59:22,560 --> 01:59:23,840
and that's what allows them to be

2675
01:59:23,840 --> 01:59:26,320
divided so in this case

2676
01:59:26,320 --> 01:59:28,840
we're checking okay is this the expected

2677
01:59:28,840 --> 01:59:30,880
channel if it wasn't

2678
01:59:30,880 --> 01:59:33,040
just log something so that the other

2679
01:59:33,040 --> 01:59:36,159
side knows and then proceed and finally

2680
01:59:36,159 --> 01:59:37,920
process the packet so if everything else

2681
01:59:37,920 --> 01:59:39,199
is good

2682
01:59:39,199 --> 01:59:42,400
send it over to the rpc system

2683
01:59:42,400 --> 01:59:44,159
this this command remember we're in bare

2684
01:59:44,159 --> 01:59:45,840
metal so there's no threading there's no

2685
01:59:45,840 --> 01:59:47,280
queuing

2686
01:59:47,280 --> 01:59:50,400
this is going to run to completion

2687
01:59:50,400 --> 01:59:54,159
of that rpc um call

2688
01:59:54,159 --> 01:59:56,320
so if this invokes in this case say

2689
01:59:56,320 --> 01:59:58,080
super loop dot gets that

2690
01:59:58,080 --> 02:00:02,639
it will run until it is complete

2691
02:00:02,880 --> 02:00:04,320
okay so i haven't gone through what the

2692
02:00:04,320 --> 02:00:05,920
actual rpc implementation code looks

2693
02:00:05,920 --> 02:00:06,880
like

2694
02:00:06,880 --> 02:00:09,920
before i go there uh oh

2695
02:00:09,920 --> 02:00:14,560
okay yes thanks for coming benjamin

2696
02:00:14,560 --> 02:00:16,639
um sorry this we weren't able to get

2697
02:00:16,639 --> 02:00:19,280
through everything

2698
02:00:20,239 --> 02:00:21,599
yeah i don't know if we are gonna get

2699
02:00:21,599 --> 02:00:24,000
kicked out or not uh

2700
02:00:24,000 --> 02:00:27,119
yeah we're at time let me hop

2701
02:00:27,119 --> 02:00:32,000
over to the

2702
02:00:38,840 --> 02:00:41,199
implementation

2703
02:00:41,199 --> 02:00:44,239
okay so this next part is i'm just

2704
02:00:44,239 --> 02:00:45,599
showing you what the super loop service

2705
02:00:45,599 --> 02:00:47,119
looks like

2706
02:00:47,119 --> 02:00:51,280
so this is essentially the rpc stub

2707
02:00:51,280 --> 02:00:54,239
that matches the protofile that was in

2708
02:00:54,239 --> 02:00:55,360
the earlier

2709
02:00:55,360 --> 02:00:57,920
that i showed earlier so this getstats

2710
02:00:57,920 --> 02:00:58,800
here

2711
02:00:58,800 --> 02:01:02,560
is this method here now in this case the

2712
02:01:02,560 --> 02:01:03,760
implementation is actually somewhere

2713
02:01:03,760 --> 02:01:04,880
else and we're not going to get to doing

2714
02:01:04,880 --> 02:01:05,920
blink control

2715
02:01:05,920 --> 02:01:09,840
but that's what this is

2716
02:01:10,960 --> 02:01:13,760
so yeah so this is the file and the

2717
02:01:13,760 --> 02:01:16,480
interesting thing here is that uh

2718
02:01:16,480 --> 02:01:19,520
the class that matches the service this

2719
02:01:19,520 --> 02:01:23,119
generated thing here using the

2720
02:01:23,119 --> 02:01:25,440
curious curiously recurring template

2721
02:01:25,440 --> 02:01:26,400
pattern which is

2722
02:01:26,400 --> 02:01:28,480
not actually that complicated but sounds

2723
02:01:28,480 --> 02:01:30,400
fancy

2724
02:01:30,400 --> 02:01:33,440
in order to put the rpc methods that are

2725
02:01:33,440 --> 02:01:34,000
needed

2726
02:01:34,000 --> 02:01:38,000
into the service uh and that's about it

2727
02:01:38,000 --> 02:01:41,599
so other than just a normal class um

2728
02:01:41,599 --> 02:01:46,320
yeah okay

2729
02:01:46,320 --> 02:01:47,360
now i don't know if we're gonna be

2730
02:01:47,360 --> 02:01:49,440
kicked off by the way i i'm happy to go

2731
02:01:49,440 --> 02:01:50,880
a little bit longer but i understand

2732
02:01:50,880 --> 02:01:52,719
many people may have to go

2733
02:01:52,719 --> 02:01:57,119
so i'm not sure hackaday organizers

2734
02:01:57,119 --> 02:02:00,480
is it all right if we go a little longer

2735
02:02:01,920 --> 02:02:03,199
cool okay in that case i'm going to go a

2736
02:02:03,199 --> 02:02:05,360
little bit longer so people have to head

2737
02:02:05,360 --> 02:02:08,639
out no problem thanks for coming

2738
02:02:08,639 --> 02:02:09,920
so i'll show you what the implementation

2739
02:02:09,920 --> 02:02:12,639
of this looks like

2740
02:02:12,639 --> 02:02:16,840
in here so the other file was the header

2741
02:02:16,840 --> 02:02:19,199
file and there's one method that was not

2742
02:02:19,199 --> 02:02:22,400
implemented which is the actual

2743
02:02:22,400 --> 02:02:25,679
actual rfc method so you can see here

2744
02:02:25,679 --> 02:02:27,440
what this looks like so in this case

2745
02:02:27,440 --> 02:02:29,040
getstats

2746
02:02:29,040 --> 02:02:30,719
server context which we're not using in

2747
02:02:30,719 --> 02:02:32,320
this case but it lets you

2748
02:02:32,320 --> 02:02:34,080
do various things like check what

2749
02:02:34,080 --> 02:02:37,119
channel a request is coming on

2750
02:02:37,119 --> 02:02:39,440
and it has a an input and output so the

2751
02:02:39,440 --> 02:02:41,840
input in this case is stats request

2752
02:02:41,840 --> 02:02:43,760
in this case it's empty we're not you

2753
02:02:43,760 --> 02:02:45,119
can see from here

2754
02:02:45,119 --> 02:02:48,000
getstats has no arguments so there's

2755
02:02:48,000 --> 02:02:48,719
just nothing

2756
02:02:48,719 --> 02:02:52,400
so this empty but the response does

2757
02:02:52,400 --> 02:02:53,599
actually have something

2758
02:02:53,599 --> 02:02:55,520
so you can see here loop iterations is

2759
02:02:55,520 --> 02:02:56,880
set to you know whatever the loop

2760
02:02:56,880 --> 02:02:59,360
iterations were

2761
02:02:59,360 --> 02:03:01,199
and so you can see how this works so in

2762
02:03:01,199 --> 02:03:02,880
short

2763
02:03:02,880 --> 02:03:05,679
this proto is filled in so stats

2764
02:03:05,679 --> 02:03:06,400
response

2765
02:03:06,400 --> 02:03:09,599
is a nano pb struct there's multiple

2766
02:03:09,599 --> 02:03:11,119
implementations of vertical buffers that

2767
02:03:11,119 --> 02:03:11,679
will work

2768
02:03:11,679 --> 02:03:15,280
on embedded we're using nano pv here

2769
02:03:15,280 --> 02:03:18,080
pigweed also has its own nano sorry its

2770
02:03:18,080 --> 02:03:20,639
own protocol buffer library called pw

2771
02:03:20,639 --> 02:03:23,760
protobuf um we won't have time to go

2772
02:03:23,760 --> 02:03:24,239
into it

2773
02:03:24,239 --> 02:03:25,679
it makes a different set of tradeoffs

2774
02:03:25,679 --> 02:03:27,840
than uh pb

2775
02:03:27,840 --> 02:03:30,639
but in this case we're using nano tv

2776
02:03:30,639 --> 02:03:33,520
because i think it's easier for this uh

2777
02:03:33,520 --> 02:03:36,480
for this workshop and so all we have to

2778
02:03:36,480 --> 02:03:37,840
do is fill in the response

2779
02:03:37,840 --> 02:03:39,599
so response.loop iterations we just

2780
02:03:39,599 --> 02:03:41,679
assign it it's just a struct

2781
02:03:41,679 --> 02:03:43,520
and then we're done all we have to do is

2782
02:03:43,520 --> 02:03:46,080
respond back with status okay

2783
02:03:46,080 --> 02:03:49,199
and the pigweed rpc system will take

2784
02:03:49,199 --> 02:03:50,000
that struct

2785
02:03:50,000 --> 02:03:52,719
serialize it and then send it out over

2786
02:03:52,719 --> 02:03:53,440
the wire

2787
02:03:53,440 --> 02:03:55,440
as a response and so that's what you're

2788
02:03:55,440 --> 02:03:58,159
seeing here

2789
02:03:58,159 --> 02:04:01,520
uh now if we had a bunch more time

2790
02:04:01,520 --> 02:04:05,760
uh i would go through and

2791
02:04:05,760 --> 02:04:08,079
build more things here but i think we're

2792
02:04:08,079 --> 02:04:08,800
pretty much

2793
02:04:08,800 --> 02:04:11,920
out of time so i think

2794
02:04:11,920 --> 02:04:15,119
i think we might call it here so yeah

2795
02:04:15,119 --> 02:04:16,800
so why don't we open up the floor to any

2796
02:04:16,800 --> 02:04:18,320
questions really about anything

2797
02:04:18,320 --> 02:04:19,920
that we showed today or pigweed in

2798
02:04:19,920 --> 02:04:22,639
general uh you know we're here to answer

2799
02:04:22,639 --> 02:04:23,679
questions

2800
02:04:23,679 --> 02:04:27,599
so yeah what do people think

2801
02:04:30,000 --> 02:04:33,520
any thoughts any questions

2802
02:04:33,520 --> 02:04:36,400
and thanks everyone for coming really

2803
02:04:36,400 --> 02:04:37,840
really excited to have people come and

2804
02:04:37,840 --> 02:04:39,040
take a look at our stuff

2805
02:04:39,040 --> 02:04:41,440
even even in a somewhat early stage it's

2806
02:04:41,440 --> 02:04:43,920
it's really great

2807
02:04:43,920 --> 02:04:46,960
that would be uh that would be the scary

2808
02:04:46,960 --> 02:04:48,239
the one scary thing is like

2809
02:04:48,239 --> 02:04:49,840
wow there's a there's a lot set up in

2810
02:04:49,840 --> 02:04:52,239
this structure here like this whole data

2811
02:04:52,239 --> 02:04:54,159
this whole like the workshop structure

2812
02:04:54,159 --> 02:04:55,599
like if i wanted to adapt this to one of

2813
02:04:55,599 --> 02:04:56,239
my own

2814
02:04:56,239 --> 02:04:58,800
projects like i'm not sure i'd know

2815
02:04:58,800 --> 02:04:59,679
where to begin

2816
02:04:59,679 --> 02:05:01,520
like what in here is the stuff i'm

2817
02:05:01,520 --> 02:05:02,960
supposed to edit and what i'm not

2818
02:05:02,960 --> 02:05:03,920
supposed to

2819
02:05:03,920 --> 02:05:06,320
and where do i define things i don't

2820
02:05:06,320 --> 02:05:08,239
know if there's sort of a

2821
02:05:08,239 --> 02:05:11,360
yeah you need like a uh a guide

2822
02:05:11,360 --> 02:05:14,800
a map guide yeah

2823
02:05:14,800 --> 02:05:18,480
yep i i concur um so thanks for being

2824
02:05:18,480 --> 02:05:20,239
patient with this

2825
02:05:20,239 --> 02:05:22,880
uh were you thinking about the rbc

2826
02:05:22,880 --> 02:05:24,079
example specifically or just the whole

2827
02:05:24,079 --> 02:05:24,560
thing

2828
02:05:24,560 --> 02:05:26,480
i don't know the whole thing no yeah

2829
02:05:26,480 --> 02:05:28,560
frankly it doesn't interest me that much

2830
02:05:28,560 --> 02:05:30,719
but

2831
02:05:32,960 --> 02:05:36,239
yeah um

2832
02:05:36,960 --> 02:05:40,000
well so the idea with the sample project

2833
02:05:40,000 --> 02:05:43,440
is that it's supposed to just offer

2834
02:05:43,440 --> 02:05:45,920
uh like a canned example that has i

2835
02:05:45,920 --> 02:05:48,239
think we put in a reasonable place

2836
02:05:48,239 --> 02:05:51,119
and we'll have tests that you can you

2837
02:05:51,119 --> 02:05:52,239
know you can obviously write your own

2838
02:05:52,239 --> 02:05:54,800
test just kind of shows how to do it

2839
02:05:54,800 --> 02:05:57,199
uh probably what we need to do is as you

2840
02:05:57,199 --> 02:05:58,400
suggest put in

2841
02:05:58,400 --> 02:06:00,079
oh here's how you would add a test

2842
02:06:00,079 --> 02:06:02,159
here's how you add a module and it's

2843
02:06:02,159 --> 02:06:03,760
true this is not all documented right

2844
02:06:03,760 --> 02:06:06,000
now

2845
02:06:06,560 --> 02:06:08,639
so yeah that's good that's great if i

2846
02:06:08,639 --> 02:06:10,000
didn't want to start from

2847
02:06:10,000 --> 02:06:11,920
that not that it's a bad thing but like

2848
02:06:11,920 --> 02:06:13,199
like if i'm gonna actually do this for a

2849
02:06:13,199 --> 02:06:14,719
real project i'm gonna need to take all

2850
02:06:14,719 --> 02:06:15,599
the workshop stuff

2851
02:06:15,599 --> 02:06:18,159
out so that would be like okay where do

2852
02:06:18,159 --> 02:06:19,280
i add but how do i

2853
02:06:19,280 --> 02:06:21,119
how do i start afresh or how do i make

2854
02:06:21,119 --> 02:06:24,320
it freshly clean

2855
02:06:24,320 --> 02:06:28,840
yeah so new project setup is something

2856
02:06:28,840 --> 02:06:30,239
that

2857
02:06:30,239 --> 02:06:33,280
yeah it's a tough one so so

2858
02:06:33,280 --> 02:06:35,520
here's the problem if you make

2859
02:06:35,520 --> 02:06:37,119
everything

2860
02:06:37,119 --> 02:06:39,520
configurable you end up needing a little

2861
02:06:39,520 --> 02:06:40,560
bit more

2862
02:06:40,560 --> 02:06:42,639
boilerplate and if you have more

2863
02:06:42,639 --> 02:06:43,920
boilerplate it makes starting from

2864
02:06:43,920 --> 02:06:45,199
scratch more painful

2865
02:06:45,199 --> 02:06:47,840
if you're in this trade-off space where

2866
02:06:47,840 --> 02:06:49,679
you you have to decide do you want to

2867
02:06:49,679 --> 02:06:51,679
pre-can things which is possible and

2868
02:06:51,679 --> 02:06:53,040
then it's relatively straightforward you

2869
02:06:53,040 --> 02:06:53,599
just

2870
02:06:53,599 --> 02:06:55,840
add a sub module add like two files and

2871
02:06:55,840 --> 02:06:57,440
you're good to go

2872
02:06:57,440 --> 02:07:00,960
or do you want to make things

2873
02:07:00,960 --> 02:07:04,000
very kind of easy to configure and

2874
02:07:04,000 --> 02:07:04,960
which is what we've kind of done with

2875
02:07:04,960 --> 02:07:07,040
pigweed you end up needing a little bit

2876
02:07:07,040 --> 02:07:08,880
more

2877
02:07:08,880 --> 02:07:11,199
pomp and circumstance i guess there's a

2878
02:07:11,199 --> 02:07:12,000
bunch of

2879
02:07:12,000 --> 02:07:14,880
additional steps to get everything going

2880
02:07:14,880 --> 02:07:16,320
and so that's what sample project kind

2881
02:07:16,320 --> 02:07:17,599
of reflects

2882
02:07:17,599 --> 02:07:20,639
um with that said it is

2883
02:07:20,639 --> 02:07:24,239
not crazy to copy over just a few things

2884
02:07:24,239 --> 02:07:25,360
to get it working you don't actually

2885
02:07:25,360 --> 02:07:26,000
need all that

2886
02:07:26,000 --> 02:07:29,440
much uh

2887
02:07:29,440 --> 02:07:31,119
and so you're right we should probably

2888
02:07:31,119 --> 02:07:32,800
put together a guide that explains like

2889
02:07:32,800 --> 02:07:36,320
okay here's the core things you need

2890
02:07:37,040 --> 02:07:39,440
cool thank you so much i gotta run bye

2891
02:07:39,440 --> 02:07:40,400
cool thanks for coming

2892
02:07:40,400 --> 02:07:42,638
bye

2893
02:07:49,119 --> 02:07:51,199
all right alex sounds like you're

2894
02:07:51,199 --> 02:07:53,360
excited or interested in uh

2895
02:07:53,360 --> 02:07:57,199
digging into it so that's great cool

2896
02:07:57,199 --> 02:07:58,800
glad to hear some people might look at

2897
02:07:58,800 --> 02:08:01,840
it for their projects

2898
02:08:04,960 --> 02:08:06,719
i mean it's pretty obvious to me that i

2899
02:08:06,719 --> 02:08:08,239
would want to use it if it were set up

2900
02:08:08,239 --> 02:08:09,360
for me and i didn't

2901
02:08:09,360 --> 02:08:12,560
like have to go through the sort of

2902
02:08:12,560 --> 02:08:15,040
activation energy of figuring it all out

2903
02:08:15,040 --> 02:08:15,840
uh

2904
02:08:15,840 --> 02:08:18,159
i guess the question is basically his

2905
02:08:18,159 --> 02:08:19,599
which is

2906
02:08:19,599 --> 02:08:21,840
once i get around to actually having a

2907
02:08:21,840 --> 02:08:23,280
project that makes use of these things

2908
02:08:23,280 --> 02:08:24,159
and needs them

2909
02:08:24,159 --> 02:08:26,159
like i wonder what the activation energy

2910
02:08:26,159 --> 02:08:28,639
will be at that point

2911
02:08:28,639 --> 02:08:31,119
hopefully less i mean our goal with the

2912
02:08:31,119 --> 02:08:32,560
starter project is you literally just

2913
02:08:32,560 --> 02:08:34,079
fork it and you're done i mean you can

2914
02:08:34,079 --> 02:08:35,599
delete a couple directories and

2915
02:08:35,599 --> 02:08:38,320
if you want um you know you're good to

2916
02:08:38,320 --> 02:08:39,280
go

2917
02:08:39,280 --> 02:08:42,400
that's that's the that's the plan and

2918
02:08:42,400 --> 02:08:43,599
actually one of the things i didn't get

2919
02:08:43,599 --> 02:08:46,000
into is that one of the benefits of

2920
02:08:46,000 --> 02:08:46,960
having

2921
02:08:46,960 --> 02:08:48,320
something like the sample project is

2922
02:08:48,320 --> 02:08:50,159
that we have all this linting stuff set

2923
02:08:50,159 --> 02:08:51,199
up so

2924
02:08:51,199 --> 02:08:53,280
let me just uh click out of this i can

2925
02:08:53,280 --> 02:08:55,679
show you

2926
02:08:55,760 --> 02:08:57,119
i'm not sure if this actually works

2927
02:08:57,119 --> 02:08:59,360
right now but probably so beautiful

2928
02:08:59,360 --> 02:09:02,000
pre-submit thing that does all this

2929
02:09:02,000 --> 02:09:04,079
code formatting and whatnot it's all

2930
02:09:04,079 --> 02:09:06,079
already configured

2931
02:09:06,079 --> 02:09:09,920
and this is kind of nice

2932
02:09:09,920 --> 02:09:11,760
it takes a little bit of fiddling to get

2933
02:09:11,760 --> 02:09:14,000
this working in a new repo

2934
02:09:14,000 --> 02:09:15,520
without putting too many assumptions

2935
02:09:15,520 --> 02:09:18,400
about project structure and so things

2936
02:09:18,400 --> 02:09:19,440
like this are

2937
02:09:19,440 --> 02:09:22,719
they're just nice now maybe we could

2938
02:09:22,719 --> 02:09:23,360
have a

2939
02:09:23,360 --> 02:09:25,920
like a reduced sample project that has

2940
02:09:25,920 --> 02:09:27,599
less in it

2941
02:09:27,599 --> 02:09:30,719
uh sort of just a very minimal

2942
02:09:30,719 --> 02:09:33,040
set of things so that could be something

2943
02:09:33,040 --> 02:09:35,440
that we do

2944
02:09:38,239 --> 02:09:42,880
uh life cycle state okay great question

2945
02:09:42,880 --> 02:09:46,079
pigwy's early so right now we

2946
02:09:46,079 --> 02:09:48,320
have some pretty well developed modules

2947
02:09:48,320 --> 02:09:49,280
so things like

2948
02:09:49,280 --> 02:09:51,199
the tokenizer which i didn't go into in

2949
02:09:51,199 --> 02:09:52,719
two great details but that one's kind of

2950
02:09:52,719 --> 02:09:54,000
interesting tokenizer is pretty well

2951
02:09:54,000 --> 02:09:55,040
developed

2952
02:09:55,040 --> 02:09:58,639
pdrpc is

2953
02:09:58,960 --> 02:10:03,280
pretty developed um the key value store

2954
02:10:03,280 --> 02:10:06,719
is also pre-developed um you know the

2955
02:10:06,719 --> 02:10:08,159
crash handler there's a bunch of

2956
02:10:08,159 --> 02:10:09,920
individual pieces

2957
02:10:09,920 --> 02:10:12,960
that are production great now

2958
02:10:12,960 --> 02:10:16,400
now the overall thing is still early

2959
02:10:16,400 --> 02:10:20,239
so this sort of framework part of pygmy

2960
02:10:20,239 --> 02:10:21,679
the part that's more like this whole

2961
02:10:21,679 --> 02:10:22,480
system

2962
02:10:22,480 --> 02:10:23,760
as opposed to just a collection of

2963
02:10:23,760 --> 02:10:26,719
libraries uh you know it's still early

2964
02:10:26,719 --> 02:10:29,440
so we're missing a bunch of things for

2965
02:10:29,440 --> 02:10:30,560
example

2966
02:10:30,560 --> 02:10:32,880
we don't have rtos or synchronization

2967
02:10:32,880 --> 02:10:34,000
primitives this is something that we're

2968
02:10:34,000 --> 02:10:34,960
working on now

2969
02:10:34,960 --> 02:10:37,440
hopefully we'll have that in soon that

2970
02:10:37,440 --> 02:10:38,719
will allow you to make

2971
02:10:38,719 --> 02:10:41,360
portable code that does synchronization

2972
02:10:41,360 --> 02:10:43,119
with different r tosses

2973
02:10:43,119 --> 02:10:44,560
um so you can you know write your

2974
02:10:44,560 --> 02:10:47,040
component against the the pivot apis

2975
02:10:47,040 --> 02:10:49,119
which will mostly be standard sql plus

2976
02:10:49,119 --> 02:10:51,360
ones uh

2977
02:10:51,360 --> 02:10:52,960
and then share it across different r

2978
02:10:52,960 --> 02:10:55,280
tosses which we think is exciting

2979
02:10:55,280 --> 02:10:57,679
um so that's that's still incoming

2980
02:10:57,679 --> 02:10:59,040
another area that we don't have anything

2981
02:10:59,040 --> 02:10:59,360
for

2982
02:10:59,360 --> 02:11:03,040
this is a big deal there's no how

2983
02:11:03,040 --> 02:11:05,360
right if you want to control i squared c

2984
02:11:05,360 --> 02:11:07,520
if you want to

2985
02:11:07,520 --> 02:11:11,760
use an adc if you want to do a dac a spy

2986
02:11:11,760 --> 02:11:13,040
we don't have anything for these right

2987
02:11:13,040 --> 02:11:14,800
now

2988
02:11:14,800 --> 02:11:16,560
now if you think about the context of

2989
02:11:16,560 --> 02:11:18,400
piglet's youth in which is mostly to

2990
02:11:18,400 --> 02:11:19,040
kind of

2991
02:11:19,040 --> 02:11:23,040
slot into existing large code bases

2992
02:11:23,040 --> 02:11:25,040
a lot of these projects typically have

2993
02:11:25,040 --> 02:11:26,560
these facilities already there's already

2994
02:11:26,560 --> 02:11:28,639
an i squared c interface there's already

2995
02:11:28,639 --> 02:11:31,440
a favorite way to do dax there's already

2996
02:11:31,440 --> 02:11:32,400
a system for

2997
02:11:32,400 --> 02:11:35,599
even for os primitives um

2998
02:11:35,599 --> 02:11:37,360
so that's kind of why we don't have

2999
02:11:37,360 --> 02:11:39,280
those and so it's

3000
02:11:39,280 --> 02:11:41,679
more focused on middleware you know you

3001
02:11:41,679 --> 02:11:44,159
just don't need those facilities as much

3002
02:11:44,159 --> 02:11:46,560
but they're coming because obviously it

3003
02:11:46,560 --> 02:11:48,000
limits the amount of higher level things

3004
02:11:48,000 --> 02:11:48,960
you can do

3005
02:11:48,960 --> 02:11:50,480
if you don't have any way to access

3006
02:11:50,480 --> 02:11:53,119
hardware so that's coming

3007
02:11:53,119 --> 02:11:56,159
and it's not there yet uh

3008
02:11:56,159 --> 02:11:59,599
what else yeah in terms of development

3009
02:11:59,599 --> 02:12:00,239
it's under

3010
02:12:00,239 --> 02:12:01,520
pretty heavy development i mean you can

3011
02:12:01,520 --> 02:12:04,079
see in our garrett instance you can see

3012
02:12:04,079 --> 02:12:05,679
the amount of patches flying in so it's

3013
02:12:05,679 --> 02:12:08,159
pretty active

3014
02:12:08,159 --> 02:12:11,360
uh yeah very active development and in

3015
02:12:11,360 --> 02:12:13,440
terms of life cycle

3016
02:12:13,440 --> 02:12:17,440
uh i will say that parts of pigweed are

3017
02:12:17,440 --> 02:12:18,000
shipping

3018
02:12:18,000 --> 02:12:21,199
in google products uh that is all i can

3019
02:12:21,199 --> 02:12:23,519
say

3020
02:12:24,560 --> 02:12:26,639
yes i think that's most of it around

3021
02:12:26,639 --> 02:12:28,400
life cycle

3022
02:12:28,400 --> 02:12:32,000
uh so in terms of like developer

3023
02:12:32,000 --> 02:12:32,880
experience

3024
02:12:32,880 --> 02:12:35,360
and documentation we have some stuff

3025
02:12:35,360 --> 02:12:37,679
it's not quite to the level i would like

3026
02:12:37,679 --> 02:12:39,040
so things like this workshop are

3027
02:12:39,040 --> 02:12:41,040
actually really helpful for us to see

3028
02:12:41,040 --> 02:12:44,560
where people have problems getting their

3029
02:12:44,560 --> 02:12:48,320
stuff set up and working so yeah so

3030
02:12:48,320 --> 02:12:49,760
that's another area that we've done a

3031
02:12:49,760 --> 02:12:50,560
bunch of work but

3032
02:12:50,560 --> 02:12:54,079
a lot more work is still needed

3033
02:12:56,320 --> 02:12:57,840
so yeah that's kind of where we are in

3034
02:12:57,840 --> 02:13:00,159
the life cycle um

3035
02:13:00,159 --> 02:13:03,839
did that answer the question

3036
02:13:06,719 --> 02:13:08,960
cool

3037
02:13:10,000 --> 02:13:12,000
all right anybody have other questions

3038
02:13:12,000 --> 02:13:17,840
or thoughts

3039
02:13:26,000 --> 02:13:28,480
okay great well it was it was fun to

3040
02:13:28,480 --> 02:13:30,320
give everybody a tour around

3041
02:13:30,320 --> 02:13:32,400
some of the stuff in pigweed we're

3042
02:13:32,400 --> 02:13:34,719
really excited to have people using this

3043
02:13:34,719 --> 02:13:36,960
it's uh yeah we're very excited to also

3044
02:13:36,960 --> 02:13:39,440
open source that was some work

3045
02:13:39,440 --> 02:13:45,440
so yeah it's really exciting to share it

3046
02:13:45,440 --> 02:13:48,719
cool and uh just before we hop off just

3047
02:13:48,719 --> 02:13:50,639
wanted to mention we do have a discord

3048
02:13:50,639 --> 02:13:52,800
chat that's open to everybody so

3049
02:13:52,800 --> 02:13:54,480
please stop by if you're interested or

3050
02:13:54,480 --> 02:13:55,840
if you have any problems

3051
02:13:55,840 --> 02:13:58,719
working with pigweed or you know we're

3052
02:13:58,719 --> 02:13:59,760
we're there to chat and we're pretty

3053
02:13:59,760 --> 02:14:00,480
much there

3054
02:14:00,480 --> 02:14:04,559
all the time so come by anytime

3055
02:14:10,800 --> 02:14:13,119
all right well i think that's it for the

3056
02:14:13,119 --> 02:14:14,480
workshop so

3057
02:14:14,480 --> 02:14:16,000
thank you everyone for coming and i also

3058
02:14:16,000 --> 02:14:17,599
wanted to give a shout out for

3059
02:14:17,599 --> 02:14:18,880
the people on my team who put in a bunch

3060
02:14:18,880 --> 02:14:20,480
of time to make this happen so thank you

3061
02:14:20,480 --> 02:14:21,440
so much everyone

3062
02:14:21,440 --> 02:14:23,199
a great great job i'm really excited

3063
02:14:23,199 --> 02:14:24,960
that we were able to put together this

3064
02:14:24,960 --> 02:14:27,840
workshop

