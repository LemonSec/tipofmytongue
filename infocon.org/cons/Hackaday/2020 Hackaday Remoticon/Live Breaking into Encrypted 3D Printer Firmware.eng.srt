1
00:00:01,250 --> 00:00:06,000
[Music]

2
00:00:06,000 --> 00:00:06,480
so

3
00:00:06,480 --> 00:00:08,720
yuri is the co-founder of walkwee a

4
00:00:08,720 --> 00:00:10,559
platform for teaching arduino

5
00:00:10,559 --> 00:00:13,519
iot and electronics he co-organizes the

6
00:00:13,519 --> 00:00:16,000
iot makers and javascript israel meetup

7
00:00:16,000 --> 00:00:16,560
groups

8
00:00:16,560 --> 00:00:18,240
and he regularly blogs about his

9
00:00:18,240 --> 00:00:20,320
projects which combine web technologies

10
00:00:20,320 --> 00:00:23,600
electronics 3d printing robot robotics

11
00:00:23,600 --> 00:00:26,720
and neuroscientists he has been

12
00:00:26,720 --> 00:00:28,720
recognized as a google google developer

13
00:00:28,720 --> 00:00:29,760
expert for web

14
00:00:29,760 --> 00:00:32,800
technologies and firebase and so

15
00:00:32,800 --> 00:00:36,079
without further ado now i've lost my

16
00:00:36,079 --> 00:00:37,200
screen here

17
00:00:37,200 --> 00:00:38,800
where i'm going to turn this over to

18
00:00:38,800 --> 00:00:41,440
yuri great to see everybody here let's

19
00:00:41,440 --> 00:00:41,840
see

20
00:00:41,840 --> 00:00:45,200
uh we already have uh 57 people

21
00:00:45,200 --> 00:00:48,559
and one in the waiting room um

22
00:00:48,559 --> 00:00:52,079
and um let me share my screen and see

23
00:00:52,079 --> 00:00:53,520
what's going on there

24
00:00:53,520 --> 00:00:56,239
okay so today we are going to talk about

25
00:00:56,239 --> 00:00:56,879
wrecking

26
00:00:56,879 --> 00:01:00,239
uh encryption of a 3d printer firmware

27
00:01:00,239 --> 00:01:03,760
and i will be monitoring the chat so

28
00:01:03,760 --> 00:01:07,520
uh feel free to ping me with questions

29
00:01:07,520 --> 00:01:10,159
but more importantly there is this

30
00:01:10,159 --> 00:01:11,040
document

31
00:01:11,040 --> 00:01:13,680
and you should all have this document

32
00:01:13,680 --> 00:01:14,320
open

33
00:01:14,320 --> 00:01:17,040
because it contains all the links that

34
00:01:17,040 --> 00:01:17,840
we will use

35
00:01:17,840 --> 00:01:20,960
during this workshop so

36
00:01:20,960 --> 00:01:23,360
now that all of you are hopefully inside

37
00:01:23,360 --> 00:01:24,799
this document and the

38
00:01:24,799 --> 00:01:28,240
family drama that we have is uh over

39
00:01:28,240 --> 00:01:31,439
we can start talking about uh

40
00:01:31,439 --> 00:01:34,320
3d printing uh no breaking streamers

41
00:01:34,320 --> 00:01:35,360
let's do that

42
00:01:35,360 --> 00:01:38,560
so uh sophie introduced me but

43
00:01:38,560 --> 00:01:41,680
uh here are some fun facts about myself

44
00:01:41,680 --> 00:01:45,600
first of all um i tried once

45
00:01:45,600 --> 00:01:48,079
to be a unicorn it didn't work i'm not

46
00:01:48,079 --> 00:01:49,360
really a unicorn but

47
00:01:49,360 --> 00:01:52,560
i pretended that it was um

48
00:01:52,560 --> 00:01:55,520
i also uh played the peruvian pan flute

49
00:01:55,520 --> 00:01:55,920
um

50
00:01:55,920 --> 00:01:57,840
let me play you something really quick

51
00:01:57,840 --> 00:02:00,000
so uh i brought this blue from

52
00:02:00,000 --> 00:02:02,799
flute from peru 10 years ago and let's

53
00:02:02,799 --> 00:02:04,560
see if you recognize this tune you can

54
00:02:04,560 --> 00:02:05,520
write in the chat

55
00:02:05,520 --> 00:02:08,000
uh the first paper the first person will

56
00:02:08,000 --> 00:02:08,800
recognize it

57
00:02:08,800 --> 00:02:11,470
gets a thumbs up for me

58
00:02:11,470 --> 00:02:13,840
[Music]

59
00:02:13,840 --> 00:02:15,599
i don't know if it works well over zoom

60
00:02:15,599 --> 00:02:17,120
yeah you recognize it

61
00:02:17,120 --> 00:02:19,120
thank you enrico thumbs up i think you

62
00:02:19,120 --> 00:02:20,319
were the first

63
00:02:20,319 --> 00:02:23,920
um and uh sophie mentioned i work on

64
00:02:23,920 --> 00:02:25,840
walkway which is an online arduino

65
00:02:25,840 --> 00:02:27,120
simulator platform

66
00:02:27,120 --> 00:02:28,879
i won't drop you the link because i

67
00:02:28,879 --> 00:02:30,640
guess you all know how to use google if

68
00:02:30,640 --> 00:02:31,920
you are interested

69
00:02:31,920 --> 00:02:35,440
um and right now i'm like working on

70
00:02:35,440 --> 00:02:38,560
this uh nice little uh

71
00:02:38,560 --> 00:02:42,080
guy it's a hardware cts challenge

72
00:02:42,080 --> 00:02:43,840
capture the flag challenge

73
00:02:43,840 --> 00:02:46,800
and i actually have one request from you

74
00:02:46,800 --> 00:02:47,200
um

75
00:02:47,200 --> 00:02:50,400
i'm going to put a link in the doc in a

76
00:02:50,400 --> 00:02:51,360
moment

77
00:02:51,360 --> 00:02:54,720
where uh you can vote i i created

78
00:02:54,720 --> 00:02:58,080
uh two versions of the firmware code for

79
00:02:58,080 --> 00:02:58,480
this

80
00:02:58,480 --> 00:03:01,840
uh nice guy here and

81
00:03:01,840 --> 00:03:04,159
actually it's a lady for this nice lady

82
00:03:04,159 --> 00:03:06,480
here and i want you to vote uh which one

83
00:03:06,480 --> 00:03:08,239
do you think is more wicked

84
00:03:08,239 --> 00:03:10,000
so please vote on twitter if you have

85
00:03:10,000 --> 00:03:11,519
twitter

86
00:03:11,519 --> 00:03:14,480
and uh i think one more fun fact about

87
00:03:14,480 --> 00:03:16,159
me before we get started

88
00:03:16,159 --> 00:03:19,200
um i uh dance salsa

89
00:03:19,200 --> 00:03:21,360
i'm a salsa dance teacher so if there

90
00:03:21,360 --> 00:03:23,840
are any salsa dancers in the audience

91
00:03:23,840 --> 00:03:26,879
uh please let me know um thank

92
00:03:26,879 --> 00:03:29,200
jack for voting for roger that was weird

93
00:03:29,200 --> 00:03:31,440
i thought you would vote for jack anyway

94
00:03:31,440 --> 00:03:36,079
uh please vote on twitter not here um

95
00:03:36,159 --> 00:03:38,799
yes so uh let's get started with the

96
00:03:38,799 --> 00:03:39,599
story

97
00:03:39,599 --> 00:03:43,760
so once upon a time that was in 2014 i

98
00:03:43,760 --> 00:03:45,440
saw this

99
00:03:45,440 --> 00:03:49,120
kickstarter ad for uh the first truly

100
00:03:49,120 --> 00:03:51,440
consumer 3d printer and i thought like

101
00:03:51,440 --> 00:03:55,040
uh it's 300 bucks sounds reasonable

102
00:03:55,040 --> 00:03:58,239
it sounds really promising why not so uh

103
00:03:58,239 --> 00:04:00,720
the next day or so uh

104
00:04:00,720 --> 00:04:02,799
i backed this project this was the first

105
00:04:02,799 --> 00:04:03,760
kickstarter i

106
00:04:03,760 --> 00:04:07,040
ever backed and um

107
00:04:07,040 --> 00:04:10,640
it arrived i was excited

108
00:04:10,640 --> 00:04:13,920
as usually with kickstarter it took one

109
00:04:13,920 --> 00:04:14,319
year

110
00:04:14,319 --> 00:04:16,320
instead of like the five or six months

111
00:04:16,320 --> 00:04:18,399
they promised but it was

112
00:04:18,399 --> 00:04:21,199
on my desk actually on my bed and i was

113
00:04:21,199 --> 00:04:22,400
super happy

114
00:04:22,400 --> 00:04:26,840
trying to um start printing with it

115
00:04:26,840 --> 00:04:29,680
but then problems started

116
00:04:29,680 --> 00:04:32,080
and there were a lot of them so this is

117
00:04:32,080 --> 00:04:33,680
like uh something they

118
00:04:33,680 --> 00:04:36,479
uh wrote in the kickstarter campaign

119
00:04:36,479 --> 00:04:38,400
that it can be used out of the box

120
00:04:38,400 --> 00:04:41,040
and perfect for beginners uh just plug

121
00:04:41,040 --> 00:04:43,199
download hit print and

122
00:04:43,199 --> 00:04:45,840
it will print it and you can see here

123
00:04:45,840 --> 00:04:47,759
just one of the problems that

124
00:04:47,759 --> 00:04:51,280
i faced it just never worked from the

125
00:04:51,280 --> 00:04:54,320
first very first day and sebastian

126
00:04:54,320 --> 00:04:56,719
saying

127
00:04:57,360 --> 00:04:59,680
that he had the same experience with

128
00:04:59,680 --> 00:05:00,720
that printer

129
00:05:00,720 --> 00:05:03,280
so yes uh it didn't live up to the

130
00:05:03,280 --> 00:05:04,400
promise

131
00:05:04,400 --> 00:05:08,400
and um i was pretty desperate to get it

132
00:05:08,400 --> 00:05:11,600
working i spent tons of hours on that

133
00:05:11,600 --> 00:05:14,320
until at some point samurai a random guy

134
00:05:14,320 --> 00:05:16,880
on github

135
00:05:16,880 --> 00:05:19,360
created an alternative firmware for this

136
00:05:19,360 --> 00:05:20,000
printer

137
00:05:20,000 --> 00:05:22,479
that actually fixed most of the problems

138
00:05:22,479 --> 00:05:24,000
so actually the hardware

139
00:05:24,000 --> 00:05:26,560
was pretty it was not great but it was

140
00:05:26,560 --> 00:05:27,600
okay

141
00:05:27,600 --> 00:05:30,560
and um

142
00:05:30,720 --> 00:05:32,800
yeah i'm happy for you fairhack that you

143
00:05:32,800 --> 00:05:35,360
didn't have issues with this printer

144
00:05:35,360 --> 00:05:38,479
um but anyway um he

145
00:05:38,479 --> 00:05:40,800
he created an open source streamer and

146
00:05:40,800 --> 00:05:41,759
um

147
00:05:41,759 --> 00:05:44,960
uh that firmware like uh fixed most of

148
00:05:44,960 --> 00:05:46,800
the software products and the software

149
00:05:46,800 --> 00:05:48,880
started printing pretty well

150
00:05:48,880 --> 00:05:51,759
so uh i find it amazing that some random

151
00:05:51,759 --> 00:05:52,160
guy

152
00:05:52,160 --> 00:05:55,520
actually did the uh work of that company

153
00:05:55,520 --> 00:05:56,319
and created

154
00:05:56,319 --> 00:05:58,960
a firmware better than that that day

155
00:05:58,960 --> 00:05:59,759
ship

156
00:05:59,759 --> 00:06:02,880
but anyway you know that saying

157
00:06:02,880 --> 00:06:05,919
that you feel me once shame on you you

158
00:06:05,919 --> 00:06:07,199
fooled me of twice

159
00:06:07,199 --> 00:06:11,199
shame on me so yeah i was getting good

160
00:06:11,199 --> 00:06:14,400
good results but then about one year

161
00:06:14,400 --> 00:06:15,440
later

162
00:06:15,440 --> 00:06:18,560
they launched another printer and i

163
00:06:18,560 --> 00:06:21,360
fell for the same trap i was like hmm

164
00:06:21,360 --> 00:06:22,160
they say

165
00:06:22,160 --> 00:06:24,960
uh it's much better they have like they

166
00:06:24,960 --> 00:06:27,120
say here it's focused on reliability so

167
00:06:27,120 --> 00:06:28,800
maybe they learned from the first

168
00:06:28,800 --> 00:06:30,479
mistakes and they're going to

169
00:06:30,479 --> 00:06:33,440
ship a great product so of course

170
00:06:33,440 --> 00:06:34,000
without

171
00:06:34,000 --> 00:06:37,919
uh thinking twice 500 bucks spent

172
00:06:37,919 --> 00:06:41,520
and um yeah

173
00:06:41,520 --> 00:06:44,400
i got it uh just like the previous

174
00:06:44,400 --> 00:06:47,120
printer it had tons of issues

175
00:06:47,120 --> 00:06:51,759
and well

176
00:06:51,759 --> 00:06:55,599
i thought to myself maybe

177
00:06:55,599 --> 00:06:59,440
uh the guy who created the

178
00:06:59,440 --> 00:07:02,319
firmware for the first printer also has

179
00:07:02,319 --> 00:07:03,120
like

180
00:07:03,120 --> 00:07:06,000
started working on this one and i looked

181
00:07:06,000 --> 00:07:07,919
on github and i found this comment

182
00:07:07,919 --> 00:07:10,080
which says getting our own framework to

183
00:07:10,080 --> 00:07:12,560
run on the micro or the m3d pro that was

184
00:07:12,560 --> 00:07:14,639
the one that i got now

185
00:07:14,639 --> 00:07:17,520
first try figuring out how to decrypt

186
00:07:17,520 --> 00:07:19,520
m3d's official framework

187
00:07:19,520 --> 00:07:22,319
it turns out that the firmware of this

188
00:07:22,319 --> 00:07:23,039
printer

189
00:07:23,039 --> 00:07:26,960
was encrypted um and also like the first

190
00:07:26,960 --> 00:07:28,639
the original one the blue one

191
00:07:28,639 --> 00:07:30,800
had an encrypted firmware and they found

192
00:07:30,800 --> 00:07:33,039
the error he explained about this in the

193
00:07:33,039 --> 00:07:33,919
thread but

194
00:07:33,919 --> 00:07:36,639
they found a way to brute force it and

195
00:07:36,639 --> 00:07:37,280
uh

196
00:07:37,280 --> 00:07:39,120
apparently something changed with the

197
00:07:39,120 --> 00:07:40,639
new framers and

198
00:07:40,639 --> 00:07:43,680
uh it didn't work um

199
00:07:43,680 --> 00:07:45,840
and one important thing to point out is

200
00:07:45,840 --> 00:07:48,400
that this was a substitution cipher so

201
00:07:48,400 --> 00:07:49,199
every

202
00:07:49,199 --> 00:07:52,240
um byte was replaced with some other

203
00:07:52,240 --> 00:07:53,120
byte

204
00:07:53,120 --> 00:07:57,039
um and um oh thank you sophie for the

205
00:07:57,039 --> 00:07:58,240
link and

206
00:07:58,240 --> 00:08:01,280
um basically

207
00:08:01,280 --> 00:08:05,120
uh that was uh i saw this and i said

208
00:08:05,120 --> 00:08:05,440
like

209
00:08:05,440 --> 00:08:08,639
oh whoa there is some hope i might get

210
00:08:08,639 --> 00:08:10,160
it to work too

211
00:08:10,160 --> 00:08:14,000
so um let's see

212
00:08:14,000 --> 00:08:19,280
how do i trip the m3ds official firmware

213
00:08:19,520 --> 00:08:23,280
okay i'm going to do it and

214
00:08:23,280 --> 00:08:26,800
at some point i was uh thinking like

215
00:08:26,800 --> 00:08:29,360
uh maybe instead of decrypting it i

216
00:08:29,360 --> 00:08:31,039
should just like you know open the

217
00:08:31,039 --> 00:08:31,680
printer

218
00:08:31,680 --> 00:08:34,159
and try to get to connect to the

219
00:08:34,159 --> 00:08:36,159
debugging interface and extract the

220
00:08:36,159 --> 00:08:38,080
decrypted firmware because it happened

221
00:08:38,080 --> 00:08:39,519
that the

222
00:08:39,519 --> 00:08:41,839
firmware was decrypted by the bootloader

223
00:08:41,839 --> 00:08:44,080
so inside the printer it was stored

224
00:08:44,080 --> 00:08:46,640
uh decrypted but um

225
00:08:46,640 --> 00:08:47,839
[Music]

226
00:08:47,839 --> 00:08:50,000
i i did it was a new printer and i

227
00:08:50,000 --> 00:08:52,000
didn't really want to void warranty so i

228
00:08:52,000 --> 00:08:53,760
decided to try to do this

229
00:08:53,760 --> 00:08:57,360
software only just

230
00:08:57,680 --> 00:09:00,720
yeah i'm just laughing at the comments

231
00:09:00,720 --> 00:09:01,519
of the chat

232
00:09:01,519 --> 00:09:05,600
so it was uh i i tried to go

233
00:09:05,600 --> 00:09:07,519
software only passed without touching

234
00:09:07,519 --> 00:09:09,760
the hardware so the first thing i did

235
00:09:09,760 --> 00:09:12,720
there is a nice dotnet tool called dot

236
00:09:12,720 --> 00:09:13,519
peak

237
00:09:13,519 --> 00:09:17,040
and um oh i didn't um

238
00:09:17,040 --> 00:09:19,760
uh there is a nice dotnet tool called

239
00:09:19,760 --> 00:09:20,480
dot peak

240
00:09:20,480 --> 00:09:23,040
and i looked at their controller

241
00:09:23,040 --> 00:09:23,600
software

242
00:09:23,600 --> 00:09:25,760
that was the software that ran on the pc

243
00:09:25,760 --> 00:09:27,600
and spoke with the printer

244
00:09:27,600 --> 00:09:30,399
and i opened it with dot pic it's a

245
00:09:30,399 --> 00:09:32,320
reverse engineering tool it's free from

246
00:09:32,320 --> 00:09:33,120
jetbrains

247
00:09:33,120 --> 00:09:36,959
for uh net uh basically a disassembler

248
00:09:36,959 --> 00:09:39,200
and i found there like in one of the dll

249
00:09:39,200 --> 00:09:40,480
files three resources

250
00:09:40,480 --> 00:09:42,560
four resources that happened to be

251
00:09:42,560 --> 00:09:44,399
called embedded furion

252
00:09:44,399 --> 00:09:46,880
so i saved them to a file and by the way

253
00:09:46,880 --> 00:09:47,519
you can

254
00:09:47,519 --> 00:09:50,560
download dot pic and do it on your own

255
00:09:50,560 --> 00:09:52,800
but uh you don't actually need to

256
00:09:52,800 --> 00:09:53,680
because some

257
00:09:53,680 --> 00:09:56,480
other guy on github has just uh reverse

258
00:09:56,480 --> 00:09:58,399
engineered the whole thing with dot peak

259
00:09:58,399 --> 00:10:00,160
and put everything on git up

260
00:10:00,160 --> 00:10:02,640
i think uh yeah we'll have the link in

261
00:10:02,640 --> 00:10:04,079
the document in a moment

262
00:10:04,079 --> 00:10:07,600
so you can see that as well and

263
00:10:07,600 --> 00:10:10,320
uh i started like looking at these

264
00:10:10,320 --> 00:10:11,519
firmware files

265
00:10:11,519 --> 00:10:13,600
uh to see if they are really encrypted

266
00:10:13,600 --> 00:10:15,120
and what they look like

267
00:10:15,120 --> 00:10:18,240
so basically uh i checked for

268
00:10:18,240 --> 00:10:20,240
if there are any readable ascii strings

269
00:10:20,240 --> 00:10:21,760
i didn't found any

270
00:10:21,760 --> 00:10:24,399
so uh i guessed it must have been

271
00:10:24,399 --> 00:10:25,360
encrypted

272
00:10:25,360 --> 00:10:28,720
now i knew that the original uh printer

273
00:10:28,720 --> 00:10:30,839
framework was encrypted with a

274
00:10:30,839 --> 00:10:32,800
substitution cipher

275
00:10:32,800 --> 00:10:35,680
uh replacing each uh byte with a

276
00:10:35,680 --> 00:10:36,240
different

277
00:10:36,240 --> 00:10:40,640
uh pipe like uh 255 with

278
00:10:40,640 --> 00:10:44,320
150 and so on and i wanted to make sure

279
00:10:44,320 --> 00:10:44,880
that

280
00:10:44,880 --> 00:10:47,760
they didn't use a stronger encryption so

281
00:10:47,760 --> 00:10:49,839
this is the trick that i used here

282
00:10:49,839 --> 00:10:53,760
um basically i compress the files

283
00:10:53,760 --> 00:10:56,560
and if they used a stronger encryption

284
00:10:56,560 --> 00:10:57,279
such as

285
00:10:57,279 --> 00:11:01,040
aes or ds or one of the better ciphers

286
00:11:01,040 --> 00:11:02,959
then the files wouldn't compress well

287
00:11:02,959 --> 00:11:04,640
but the files compressed

288
00:11:04,640 --> 00:11:07,680
pretty well which was a good signal for

289
00:11:07,680 --> 00:11:08,000
me

290
00:11:08,000 --> 00:11:11,440
that um this was actually

291
00:11:11,440 --> 00:11:14,800
a substitution cipher as well uh so

292
00:11:14,800 --> 00:11:18,160
i decided to go on with that and uh

293
00:11:18,160 --> 00:11:20,480
i realized that there were actually two

294
00:11:20,480 --> 00:11:22,640
firmware files that were relevant for my

295
00:11:22,640 --> 00:11:24,240
printer it probably had two

296
00:11:24,240 --> 00:11:26,720
microcontrollers not only one

297
00:11:26,720 --> 00:11:30,000
and um as i said before the decryption

298
00:11:30,000 --> 00:11:31,279
itself happens

299
00:11:31,279 --> 00:11:34,959
inside the firmware so um when

300
00:11:34,959 --> 00:11:38,240
the firmware is uploaded encrypted to

301
00:11:38,240 --> 00:11:40,240
the printer the bootloader decrypts it

302
00:11:40,240 --> 00:11:43,200
and write it to the flash memory

303
00:11:43,200 --> 00:11:47,120
um so now we are going to start looking

304
00:11:47,120 --> 00:11:47,839
at this

305
00:11:47,839 --> 00:11:50,880
firmware um and i'm going to post

306
00:11:50,880 --> 00:11:54,079
a link in this dock where you can uh

307
00:11:54,079 --> 00:11:57,600
join me on this uh call up notebook um

308
00:11:57,600 --> 00:12:00,959
if you note about uh is that the right

309
00:12:00,959 --> 00:12:01,440
one

310
00:12:01,440 --> 00:12:03,680
oh yeah with the hello world yeah a few

311
00:12:03,680 --> 00:12:04,560
notes about

312
00:12:04,560 --> 00:12:07,839
uh collab and uh so co-op is like

313
00:12:07,839 --> 00:12:10,320
uh python notebooks you're probably uh

314
00:12:10,320 --> 00:12:11,440
familiar with this

315
00:12:11,440 --> 00:12:13,760
if you worked with data science data

316
00:12:13,760 --> 00:12:15,279
science tools

317
00:12:15,279 --> 00:12:17,680
and google co-op is just an online

318
00:12:17,680 --> 00:12:19,680
version that runs on top of google drive

319
00:12:19,680 --> 00:12:22,239
it's free

320
00:12:22,320 --> 00:12:25,360
and you can just uh use the link uh that

321
00:12:25,360 --> 00:12:26,160
you have here

322
00:12:26,160 --> 00:12:29,200
in this uh document and uh join me and

323
00:12:29,200 --> 00:12:32,880
view uh the uh workbook

324
00:12:32,880 --> 00:12:35,519
now there is one caveat it doesn't work

325
00:12:35,519 --> 00:12:37,519
in real time so for you to see my

326
00:12:37,519 --> 00:12:38,160
changes

327
00:12:38,160 --> 00:12:40,639
i first have to save and then you have

328
00:12:40,639 --> 00:12:42,160
to refresh the page

329
00:12:42,160 --> 00:12:44,639
so i will save every now and then and

330
00:12:44,639 --> 00:12:46,720
then you can refresh the page and

331
00:12:46,720 --> 00:12:51,040
get to the same point where i'm at

332
00:12:51,120 --> 00:12:53,600
so um let's get started the first thing

333
00:12:53,600 --> 00:12:54,959
we are going to do

334
00:12:54,959 --> 00:12:58,399
uh so there are like these uh firm files

335
00:12:58,399 --> 00:12:58,800
uh

336
00:12:58,800 --> 00:13:01,440
that that guy uh put from github the

337
00:13:01,440 --> 00:13:03,519
ones that he extracted from the desktop

338
00:13:03,519 --> 00:13:04,079
software

339
00:13:04,079 --> 00:13:07,279
oh so many cursors holy

340
00:13:07,279 --> 00:13:10,320
anyway um so

341
00:13:10,320 --> 00:13:13,440
uh we are going to download them so

342
00:13:13,440 --> 00:13:16,399
um we are going to download them to this

343
00:13:16,399 --> 00:13:16,720
uh

344
00:13:16,720 --> 00:13:19,519
online notebook so we can start using

345
00:13:19,519 --> 00:13:20,320
them

346
00:13:20,320 --> 00:13:23,040
and uh in order to do this we are going

347
00:13:23,040 --> 00:13:24,959
to run a few shell commands linux shell

348
00:13:24,959 --> 00:13:26,079
commands that

349
00:13:26,079 --> 00:13:28,560
are just downloading the files from

350
00:13:28,560 --> 00:13:29,360
github

351
00:13:29,360 --> 00:13:32,399
and then we can do uh

352
00:13:32,399 --> 00:13:35,040
ls minus la to confirm that we have

353
00:13:35,040 --> 00:13:36,079
these files

354
00:13:36,079 --> 00:13:38,160
so this thing is actually connected

355
00:13:38,160 --> 00:13:40,240
connected to a virtual machine

356
00:13:40,240 --> 00:13:42,880
on the google cloud uh that was

357
00:13:42,880 --> 00:13:43,839
provisioned for

358
00:13:43,839 --> 00:13:46,480
uh for us when we opened it i'm going to

359
00:13:46,480 --> 00:13:48,399
save so if you want to get to the same

360
00:13:48,399 --> 00:13:50,079
stage you can

361
00:13:50,079 --> 00:13:52,480
and um the next thing we are going to do

362
00:13:52,480 --> 00:13:54,079
we are actually going to

363
00:13:54,079 --> 00:13:57,279
uh import uh import let's remove this ls

364
00:13:57,279 --> 00:13:58,079
we don't

365
00:13:58,079 --> 00:14:00,160
no longer need it we have seen the

366
00:14:00,160 --> 00:14:01,760
firmware and this

367
00:14:01,760 --> 00:14:04,480
is the second so we have two theorem

368
00:14:04,480 --> 00:14:06,000
files as i said one

369
00:14:06,000 --> 00:14:09,440
of about 80 kilobytes and the other one

370
00:14:09,440 --> 00:14:12,800
is about uh 24 kilobytes

371
00:14:12,800 --> 00:14:16,160
um so uh yes

372
00:14:16,160 --> 00:14:18,079
uh somebody is asking if you just

373
00:14:18,079 --> 00:14:20,000
refresh and press play yes

374
00:14:20,000 --> 00:14:22,000
play or uh control or command a

375
00:14:22,000 --> 00:14:23,279
spaceship run

376
00:14:23,279 --> 00:14:27,279
command f9 my hebrew sleep um

377
00:14:27,279 --> 00:14:29,440
to run everything from the beginning if

378
00:14:29,440 --> 00:14:30,399
you want

379
00:14:30,399 --> 00:14:34,079
uh so we are importing this um

380
00:14:34,079 --> 00:14:36,240
and now the first thing we are going to

381
00:14:36,240 --> 00:14:37,760
do when we have

382
00:14:37,760 --> 00:14:41,279
uh some arbitrary firmware file

383
00:14:41,279 --> 00:14:44,160
or encrypted file we are going to look

384
00:14:44,160 --> 00:14:44,639
at

385
00:14:44,639 --> 00:14:47,839
an histogram of the probabilities of the

386
00:14:47,839 --> 00:14:48,800
bytes

387
00:14:48,800 --> 00:14:50,880
so uh this is how we are going to do

388
00:14:50,880 --> 00:14:52,639
this uh first of all

389
00:14:52,639 --> 00:14:56,480
uh let's call it firmware and open this

390
00:14:56,480 --> 00:14:59,120
let's start with a bigger file and read

391
00:14:59,120 --> 00:15:00,560
it into memory

392
00:15:00,560 --> 00:15:03,199
by the way all of these are like uh

393
00:15:03,199 --> 00:15:03,600
these

394
00:15:03,600 --> 00:15:07,360
jumping uh things are a cool thing that

395
00:15:07,360 --> 00:15:10,720
a cool feature of um cola but

396
00:15:10,720 --> 00:15:12,399
if you find it too distracting let me

397
00:15:12,399 --> 00:15:14,560
know and i will disable it

398
00:15:14,560 --> 00:15:17,760
um so we opened the firmware

399
00:15:17,760 --> 00:15:20,720
and okay uh you want to know how okay

400
00:15:20,720 --> 00:15:22,000
you go to settings

401
00:15:22,000 --> 00:15:24,720
and then mister lens miscellaneous and

402
00:15:24,720 --> 00:15:26,160
then you set

403
00:15:26,160 --> 00:15:28,880
power too many power now you know my

404
00:15:28,880 --> 00:15:30,000
secret

405
00:15:30,000 --> 00:15:32,880
it's not a secret anymore anyway so the

406
00:15:32,880 --> 00:15:34,160
first thing we are going to do we are

407
00:15:34,160 --> 00:15:35,839
going to plot an histogram

408
00:15:35,839 --> 00:15:39,279
of uh the values of each byte in this

409
00:15:39,279 --> 00:15:42,240
trimmer so uh basically let's create

410
00:15:42,240 --> 00:15:43,759
let's call it bins

411
00:15:43,759 --> 00:15:48,240
uh let's create an array of uh numpy

412
00:15:48,240 --> 00:15:51,680
rows for each of the possible

413
00:15:51,680 --> 00:15:54,399
bytes values and then basically for each

414
00:15:54,399 --> 00:15:54,880
byte

415
00:15:54,880 --> 00:15:58,480
in the firmware we are going to say uh

416
00:15:58,480 --> 00:16:02,079
just like increment that bean for that

417
00:16:02,079 --> 00:16:02,639
byte

418
00:16:02,639 --> 00:16:06,839
by one and finally uh we will plot these

419
00:16:06,839 --> 00:16:11,519
beans plt.show

420
00:16:13,040 --> 00:16:16,240
okay ah cool so this is the histogram it

421
00:16:16,240 --> 00:16:16,639
says

422
00:16:16,639 --> 00:16:19,920
uh for each byte value how many times it

423
00:16:19,920 --> 00:16:22,399
repeats inside the firmware and we can

424
00:16:22,399 --> 00:16:24,480
see there is a big peak here

425
00:16:24,480 --> 00:16:28,240
uh let's make it even a clearer uh

426
00:16:28,240 --> 00:16:31,600
let's add a grid yep

427
00:16:31,600 --> 00:16:33,759
even easier to watch so yeah you you

428
00:16:33,759 --> 00:16:35,199
consider like there is like there are a

429
00:16:35,199 --> 00:16:37,120
few smaller peaks but there is

430
00:16:37,120 --> 00:16:40,079
an apparent one that has more than six

431
00:16:40,079 --> 00:16:40,560
uh

432
00:16:40,560 --> 00:16:43,519
thousand repetitions that's like uh six

433
00:16:43,519 --> 00:16:45,440
thousand

434
00:16:45,440 --> 00:16:48,560
uh that's like

435
00:16:48,560 --> 00:16:51,839
um 7.5 percent of the

436
00:16:51,839 --> 00:16:54,320
camera file and can anybody guess what

437
00:16:54,320 --> 00:16:55,680
this value should be

438
00:16:55,680 --> 00:16:59,600
like the value that repeats uh

439
00:16:59,600 --> 00:17:02,800
yes zeros good good guess

440
00:17:02,800 --> 00:17:05,679
so let's see where what what is the

441
00:17:05,679 --> 00:17:06,400
actually

442
00:17:06,400 --> 00:17:09,520
um beans dot argmax where is this

443
00:17:09,520 --> 00:17:13,520
as peak found so this is um

444
00:17:13,520 --> 00:17:16,319
let's convert it to hexadecimal just uh

445
00:17:16,319 --> 00:17:18,240
to make it easier for ourselves

446
00:17:18,240 --> 00:17:21,839
so basically this is the value that

447
00:17:21,839 --> 00:17:25,439
8b that repeats most in this

448
00:17:25,439 --> 00:17:29,039
firmware file so um we are going to

449
00:17:29,039 --> 00:17:32,559
uh guess that this eight b

450
00:17:32,559 --> 00:17:37,280
is zero and this is of course i guess

451
00:17:37,280 --> 00:17:40,480
uh yeah um audio guesses

452
00:17:40,480 --> 00:17:44,160
are spaces let's write them down space

453
00:17:44,160 --> 00:17:48,240
or uh ff okay interesting

454
00:17:48,240 --> 00:17:51,840
so um we found uh

455
00:17:51,840 --> 00:17:54,160
one byte that repeats a lot and we guess

456
00:17:54,160 --> 00:17:55,760
it might be a zero or

457
00:17:55,760 --> 00:17:58,960
space let me say if you want to catch up

458
00:17:58,960 --> 00:18:02,880
up to here or ff i can already tell it's

459
00:18:02,880 --> 00:18:05,520
not a space like uh you wouldn't find a

460
00:18:05,520 --> 00:18:06,559
lot of spaces

461
00:18:06,559 --> 00:18:10,320
in binary code files uh zeros are very

462
00:18:10,320 --> 00:18:11,440
common because

463
00:18:11,440 --> 00:18:13,919
uh every string has a null terminator

464
00:18:13,919 --> 00:18:14,799
but

465
00:18:14,799 --> 00:18:17,679
usually you have like smaller numbers

466
00:18:17,679 --> 00:18:19,840
and these smaller numbers have a lot of

467
00:18:19,840 --> 00:18:20,559
like uh

468
00:18:20,559 --> 00:18:22,960
leading zeros so a d word with a value

469
00:18:22,960 --> 00:18:23,600
of one

470
00:18:23,600 --> 00:18:27,039
will be just three zeros and one so

471
00:18:27,039 --> 00:18:30,240
i guessed it was zero uh sf is

472
00:18:30,240 --> 00:18:32,720
also legitimate uh depending where it

473
00:18:32,720 --> 00:18:33,679
happens

474
00:18:33,679 --> 00:18:36,880
and um to get a better understanding

475
00:18:36,880 --> 00:18:39,600
let's run um i think i have a slide for

476
00:18:39,600 --> 00:18:40,559
that

477
00:18:40,559 --> 00:18:43,760
yes let's dump this firmware and see the

478
00:18:43,760 --> 00:18:45,679
hex dump so this is another linux shell

479
00:18:45,679 --> 00:18:46,320
command

480
00:18:46,320 --> 00:18:48,240
uh we are just going to show the hex

481
00:18:48,240 --> 00:18:50,000
dump of this firmware

482
00:18:50,000 --> 00:18:53,280
um yep uh

483
00:18:53,280 --> 00:18:55,600
somebody is asking about known playing

484
00:18:55,600 --> 00:18:56,400
text

485
00:18:56,400 --> 00:18:58,480
andy so what would you do with a known

486
00:18:58,480 --> 00:19:00,240
playing text i'm curious to know

487
00:19:00,240 --> 00:19:02,559
can you write it down but meanwhile

488
00:19:02,559 --> 00:19:04,000
let's have a look at this

489
00:19:04,000 --> 00:19:07,600
um this hex dump it's pretty long

490
00:19:07,600 --> 00:19:10,480
so my trick is just you know to first

491
00:19:10,480 --> 00:19:11,919
look at the beginning

492
00:19:11,919 --> 00:19:13,840
and we can see at the beginning there is

493
00:19:13,840 --> 00:19:14,960
already a lot of

494
00:19:14,960 --> 00:19:17,520
like these uh bytes that we guessed they

495
00:19:17,520 --> 00:19:18,000
might be

496
00:19:18,000 --> 00:19:21,440
zeros um and then

497
00:19:21,440 --> 00:19:24,160
uh there is another value let me copy it

498
00:19:24,160 --> 00:19:26,240
so it will be easier to see

499
00:19:26,240 --> 00:19:29,200
there is another value that repeats a

500
00:19:29,200 --> 00:19:30,000
lot this

501
00:19:30,000 --> 00:19:34,080
94. um so i'm not sure yet what it might

502
00:19:34,080 --> 00:19:34,640
be but

503
00:19:34,640 --> 00:19:36,880
it definitely uh caught my attention

504
00:19:36,880 --> 00:19:38,320
when i saw it

505
00:19:38,320 --> 00:19:41,760
and before investigating this 94

506
00:19:41,760 --> 00:19:44,880
let's go uh towards the end of the file

507
00:19:44,880 --> 00:19:48,000
and we'll make it larger in case you are

508
00:19:48,000 --> 00:19:49,600
having trouble seeing

509
00:19:49,600 --> 00:19:51,919
and we can see that the end of the file

510
00:19:51,919 --> 00:19:52,640
has

511
00:19:52,640 --> 00:19:55,840
a few one fs and

512
00:19:55,840 --> 00:19:59,200
any guess what this one f's could be

513
00:19:59,200 --> 00:20:01,600
if they are like at the very end of the

514
00:20:01,600 --> 00:20:02,640
file

515
00:20:02,640 --> 00:20:07,360
um yeah write it on the chat

516
00:20:07,360 --> 00:20:11,520
um okay

517
00:20:11,520 --> 00:20:14,559
so uh padding okay this this is a good

518
00:20:14,559 --> 00:20:15,280
idea

519
00:20:15,280 --> 00:20:16,960
but which kind of padding what what

520
00:20:16,960 --> 00:20:18,880
padding would you expect at the end of a

521
00:20:18,880 --> 00:20:20,880
firmware file

522
00:20:20,880 --> 00:20:24,480
so any ideas here uh yeah somebody says

523
00:20:24,480 --> 00:20:27,679
uh now uh and somebody else

524
00:20:27,679 --> 00:20:30,880
said i need to go up a bit yeah

525
00:20:30,880 --> 00:20:34,400
somebody says cr uh now snobs

526
00:20:34,400 --> 00:20:37,520
or ff so um

527
00:20:37,520 --> 00:20:40,640
yeah we guessed this was zero and

528
00:20:40,640 --> 00:20:43,120
uh my guess at least is was that this

529
00:20:43,120 --> 00:20:44,080
was ff

530
00:20:44,080 --> 00:20:47,679
because unprogrammed flash is always uh

531
00:20:47,679 --> 00:20:50,799
high all the bits are one so padding is

532
00:20:50,799 --> 00:20:51,679
usually

533
00:20:51,679 --> 00:20:55,200
just like unprogrammed flesh like fs

534
00:20:55,200 --> 00:20:58,320
so my guess was that one f equals

535
00:20:58,320 --> 00:21:03,679
fs and um what is the isa of the target

536
00:21:03,679 --> 00:21:04,159
can you

537
00:21:04,159 --> 00:21:07,520
explain that uh mr schneider

538
00:21:07,520 --> 00:21:09,919
um so this is another guest we already

539
00:21:09,919 --> 00:21:11,039
have two guesses

540
00:21:11,039 --> 00:21:14,320
uh this might be zero and this might be

541
00:21:14,320 --> 00:21:15,520
one f

542
00:21:15,520 --> 00:21:19,280
and um before uh

543
00:21:19,280 --> 00:21:22,880
we uh go to try somebody uh oh the

544
00:21:22,880 --> 00:21:23,760
instructions

545
00:21:23,760 --> 00:21:27,280
said yes uh we'll get to it uh

546
00:21:27,280 --> 00:21:29,760
okay we'll get it now you know what yes

547
00:21:29,760 --> 00:21:31,039
uh the instruction set

548
00:21:31,039 --> 00:21:33,039
so that's a good question where are we

549
00:21:33,039 --> 00:21:35,200
running so i asked myself the same

550
00:21:35,200 --> 00:21:36,080
question

551
00:21:36,080 --> 00:21:38,960
and i went on github and they said um

552
00:21:38,960 --> 00:21:39,679
they have

553
00:21:39,679 --> 00:21:43,200
an stm32f whatever inside

554
00:21:43,200 --> 00:21:46,000
so that's a good question that's a good

555
00:21:46,000 --> 00:21:47,440
piece of information

556
00:21:47,440 --> 00:21:52,159
yes that's an arm 32-bit cortex m0 cpu

557
00:21:52,159 --> 00:21:54,080
so if it's armed we know it's little

558
00:21:54,080 --> 00:21:55,919
indian that's important

559
00:21:55,919 --> 00:21:59,039
and uh now is a good time like to have a

560
00:21:59,039 --> 00:21:59,760
look at the

561
00:21:59,760 --> 00:22:03,280
uh documentation um

562
00:22:03,280 --> 00:22:06,320
okay um

563
00:22:06,320 --> 00:22:09,120
so uh if we look at the documentation we

564
00:22:09,120 --> 00:22:11,280
can see a few interesting things

565
00:22:11,280 --> 00:22:14,720
first of all uh let me see uh

566
00:22:14,720 --> 00:22:17,120
i i put the links to the documentation

567
00:22:17,120 --> 00:22:19,280
uh here so you can check it out but

568
00:22:19,280 --> 00:22:22,320
do it later so you won't lose track

569
00:22:22,320 --> 00:22:24,480
uh this is the important piece for a bit

570
00:22:24,480 --> 00:22:26,000
from the documentation

571
00:22:26,000 --> 00:22:29,120
where um i found this

572
00:22:29,120 --> 00:22:32,720
uh interrupt vector table and it says

573
00:22:32,720 --> 00:22:34,000
that it starts at

574
00:22:34,000 --> 00:22:36,640
address zero zero zero so it could be at

575
00:22:36,640 --> 00:22:38,400
the beginning of the code

576
00:22:38,400 --> 00:22:41,200
and the first value is the initial sb

577
00:22:41,200 --> 00:22:42,080
value

578
00:22:42,080 --> 00:22:44,000
and then there are like a few more

579
00:22:44,000 --> 00:22:46,080
values like three more values

580
00:22:46,080 --> 00:22:48,480
and then you can see they're like uh let

581
00:22:48,480 --> 00:22:49,600
me zoom in here

582
00:22:49,600 --> 00:22:53,600
oops what did they do i locked my screen

583
00:22:53,600 --> 00:22:56,720
um i hope screen is still recording well

584
00:22:56,720 --> 00:22:59,760
um yep oh oops yeah so

585
00:22:59,760 --> 00:23:03,120
um yeah and then so we had is sb value

586
00:23:03,120 --> 00:23:04,240
three more values

587
00:23:04,240 --> 00:23:06,640
then a bunch of reserved values then as

588
00:23:06,640 --> 00:23:08,640
we call and then reserved

589
00:23:08,640 --> 00:23:13,200
and what i noticed is that

590
00:23:13,520 --> 00:23:17,280
what i noticed is that

591
00:23:17,280 --> 00:23:18,880
if we look at the beginning of the file

592
00:23:18,880 --> 00:23:21,120
again let me copy that

593
00:23:21,120 --> 00:23:23,679
it pretty much follows the same pattern

594
00:23:23,679 --> 00:23:24,240
so

595
00:23:24,240 --> 00:23:28,159
uh there is like uh first of all let's

596
00:23:28,159 --> 00:23:31,679
replace all of these with zeros

597
00:23:31,679 --> 00:23:34,559
to make it easier to read so they are

598
00:23:34,559 --> 00:23:35,039
like

599
00:23:35,039 --> 00:23:38,640
uh this uh

600
00:23:38,640 --> 00:23:42,400
94 that repeats and uh it repeats every

601
00:23:42,400 --> 00:23:42,799
four

602
00:23:42,799 --> 00:23:45,840
uh bytes every four um

603
00:23:45,840 --> 00:23:49,360
uh in like it has a sequence and then

604
00:23:49,360 --> 00:23:51,919
if you uh assume that this is the

605
00:23:51,919 --> 00:23:53,760
interrupt vector table then this should

606
00:23:53,760 --> 00:23:54,240
be the

607
00:23:54,240 --> 00:23:57,279
stack pointer which makes sense to start

608
00:23:57,279 --> 00:23:59,360
with uh something different

609
00:23:59,360 --> 00:24:02,400
and then all of this would be pointers

610
00:24:02,400 --> 00:24:03,440
to the code

611
00:24:03,440 --> 00:24:05,440
and i would expect to have one stack

612
00:24:05,440 --> 00:24:06,640
pointer then

613
00:24:06,640 --> 00:24:09,600
three pointers to our code locations to

614
00:24:09,600 --> 00:24:11,520
the interrupt handler or to

615
00:24:11,520 --> 00:24:15,200
um routines inside the code

616
00:24:15,200 --> 00:24:17,360
then we have all these zeros which

617
00:24:17,360 --> 00:24:18,400
happen to match

618
00:24:18,400 --> 00:24:20,720
exactly so we have seven groups of zeros

619
00:24:20,720 --> 00:24:21,919
here

620
00:24:21,919 --> 00:24:23,760
and they happen to match exactly the

621
00:24:23,760 --> 00:24:26,400
reserved then we have one more

622
00:24:26,400 --> 00:24:30,000
and then we have two more which again

623
00:24:30,000 --> 00:24:33,200
matches the reserved section in the

624
00:24:33,200 --> 00:24:36,240
uh stack mapping and then we have a few

625
00:24:36,240 --> 00:24:37,679
more and we can see that there is a

626
00:24:37,679 --> 00:24:38,799
value that repeats

627
00:24:38,799 --> 00:24:40,720
uh multiple times these are probably

628
00:24:40,720 --> 00:24:42,799
interrupts that are hand handled or

629
00:24:42,799 --> 00:24:44,559
something like that so this is some kind

630
00:24:44,559 --> 00:24:46,400
of the default handler

631
00:24:46,400 --> 00:24:48,880
so at this point i was pretty convinced

632
00:24:48,880 --> 00:24:51,200
i was looking at the interrupt vector

633
00:24:51,200 --> 00:24:54,799
and all of these are um addresses into

634
00:24:54,799 --> 00:24:55,200
the

635
00:24:55,200 --> 00:24:58,480
uh code into the flash memory

636
00:24:58,480 --> 00:25:01,360
but uh and they all start like uh so

637
00:25:01,360 --> 00:25:03,440
this is little indian so they all start

638
00:25:03,440 --> 00:25:03,840
with

639
00:25:03,840 --> 00:25:06,400
the high bite is zero and then there is

640
00:25:06,400 --> 00:25:07,760
some other buy

641
00:25:07,760 --> 00:25:11,120
but where could that be so i went back

642
00:25:11,120 --> 00:25:12,159
to the docks

643
00:25:12,159 --> 00:25:15,760
and i found this um

644
00:25:15,760 --> 00:25:18,000
this shows you how the memory works on

645
00:25:18,000 --> 00:25:18,960
this chip

646
00:25:18,960 --> 00:25:22,159
and you can see that uh there is this uh

647
00:25:22,159 --> 00:25:25,600
section where it says slash memory it

648
00:25:25,600 --> 00:25:29,360
always starts with uh zero eight

649
00:25:29,360 --> 00:25:32,559
and there is uh something and i guess i

650
00:25:32,559 --> 00:25:34,720
didn't notice it back at the time

651
00:25:34,720 --> 00:25:37,440
it's zero eight zero zero zero zero zero

652
00:25:37,440 --> 00:25:40,640
zero so zero it should be the first byte

653
00:25:40,640 --> 00:25:43,840
um and i guess i just

654
00:25:43,840 --> 00:25:46,880
ignored it at the time i don't know why

655
00:25:46,880 --> 00:25:51,039
but i assume that um now am i looking it

656
00:25:51,039 --> 00:25:53,600
at it i don't know why i did but it was

657
00:25:53,600 --> 00:25:54,400
pretty good

658
00:25:54,400 --> 00:25:57,039
i assumed that this zero eight would

659
00:25:57,039 --> 00:25:57,840
basically

660
00:25:57,840 --> 00:26:01,360
uh match this 94 so

661
00:26:01,360 --> 00:26:04,559
based on um where i thought

662
00:26:04,559 --> 00:26:07,840
the code might load in memory and based

663
00:26:07,840 --> 00:26:09,360
on my knowledge this

664
00:26:09,360 --> 00:26:11,520
this should have been uh pointers to the

665
00:26:11,520 --> 00:26:12,480
code

666
00:26:12,480 --> 00:26:15,600
i guess that uh 94

667
00:26:15,600 --> 00:26:18,400
actually maps to let's organize this a

668
00:26:18,400 --> 00:26:19,919
bit

669
00:26:19,919 --> 00:26:23,520
zero eight um and this was a little bit

670
00:26:23,520 --> 00:26:24,080
of a long

671
00:26:24,080 --> 00:26:27,279
shot but i still like i had nothing else

672
00:26:27,279 --> 00:26:27,679
so

673
00:26:27,679 --> 00:26:30,960
i took this um

674
00:26:30,960 --> 00:26:34,159
and then uh let's actually uh

675
00:26:34,159 --> 00:26:37,679
save it into a dictionary so we can

676
00:26:37,679 --> 00:26:42,159
use it in the code so we can say

677
00:26:42,159 --> 00:26:46,640
0b maps to

678
00:26:46,720 --> 00:26:50,000
8b 0 0 and one f

679
00:26:50,000 --> 00:26:53,440
to maps to ff and again these are all

680
00:26:53,440 --> 00:26:55,120
guesses but they are education

681
00:26:55,120 --> 00:26:59,279
educated guesses and um

682
00:26:59,279 --> 00:27:01,200
let's just see what it looks like with

683
00:27:01,200 --> 00:27:03,360
this substitution so

684
00:27:03,360 --> 00:27:07,360
basically after those uh substitutions

685
00:27:07,360 --> 00:27:10,959
this would look something like

686
00:27:11,120 --> 00:27:14,640
this basically 0 0 um

687
00:27:14,640 --> 00:27:17,840
0 8 and then some random bytes we still

688
00:27:17,840 --> 00:27:21,679
don't know how to decipher

689
00:27:21,679 --> 00:27:24,240
okay so at this point i have three bytes

690
00:27:24,240 --> 00:27:25,200
already

691
00:27:25,200 --> 00:27:28,480
and um somebody had this idea of like

692
00:27:28,480 --> 00:27:30,080
looking for strings

693
00:27:30,080 --> 00:27:33,679
now obviously we can't looks for strings

694
00:27:33,679 --> 00:27:35,600
let's just remove this hex dump

695
00:27:35,600 --> 00:27:39,039
and save so you can follow along um

696
00:27:39,039 --> 00:27:41,120
obviously you can't look for strings in

697
00:27:41,120 --> 00:27:43,200
the encrypted oh it was not

698
00:27:43,200 --> 00:27:47,039
uh yeah this was the correct one

699
00:27:47,039 --> 00:27:50,240
94. so obviously you can't look for

700
00:27:50,240 --> 00:27:53,440
uh strings in the encrypted firmware

701
00:27:53,440 --> 00:27:55,120
because they would be encrypted

702
00:27:55,120 --> 00:27:58,399
but i think somebody's mentioned that uh

703
00:27:58,399 --> 00:28:03,679
oh by the way ah we only figured 1.17

704
00:28:03,679 --> 00:28:06,720
isn't that amazing progress not now

705
00:28:06,720 --> 00:28:09,760
it was very frustrating um

706
00:28:09,760 --> 00:28:12,720
so yeah so uh first of all we need to

707
00:28:12,720 --> 00:28:14,880
know what kind of strings we can

708
00:28:14,880 --> 00:28:17,679
find in this firmware if we wanted to

709
00:28:17,679 --> 00:28:20,880
pursue that direction

710
00:28:22,080 --> 00:28:26,720
so somebody says that the

711
00:28:27,120 --> 00:28:30,480
okay somebody said that once we had a

712
00:28:30,480 --> 00:28:32,080
few bytes we could look for the

713
00:28:32,080 --> 00:28:34,559
translation table in this bootloader

714
00:28:34,559 --> 00:28:37,600
um that's correct but i didn't have the

715
00:28:37,600 --> 00:28:39,200
code for the bootloader

716
00:28:39,200 --> 00:28:41,120
nor the encrypted one i just had a code

717
00:28:41,120 --> 00:28:43,120
for this viewer at that point

718
00:28:43,120 --> 00:28:45,679
uh the table is wrong right why did they

719
00:28:45,679 --> 00:28:46,799
do it so it was

720
00:28:46,799 --> 00:28:49,840
uh a8b right i'm not mistaken here i

721
00:28:49,840 --> 00:28:51,840
don't want to make any mistakes

722
00:28:51,840 --> 00:28:54,399
yeah i think that should be fine so

723
00:28:54,399 --> 00:28:55,440
thank you

724
00:28:55,440 --> 00:28:59,760
um so uh

725
00:28:59,760 --> 00:29:02,559
and there is andy has some ideas about

726
00:29:02,559 --> 00:29:02,880
uh

727
00:29:02,880 --> 00:29:06,240
db and b1 uh let's

728
00:29:06,240 --> 00:29:10,000
test them later if you were right uh

729
00:29:10,000 --> 00:29:14,080
um okay so uh in order to find

730
00:29:14,080 --> 00:29:16,000
which string the string which strings

731
00:29:16,000 --> 00:29:17,120
the uh

732
00:29:17,120 --> 00:29:18,640
printer might have in the firmware i

733
00:29:18,640 --> 00:29:20,320
decided to take a look at the controller

734
00:29:20,320 --> 00:29:21,279
software

735
00:29:21,279 --> 00:29:22,960
as i said before this is the software

736
00:29:22,960 --> 00:29:24,960
that runs on the pc it's written in

737
00:29:24,960 --> 00:29:25,760
dotnet

738
00:29:25,760 --> 00:29:28,720
it's easy to decompile uh using dot

739
00:29:28,720 --> 00:29:29,200
speaker

740
00:29:29,200 --> 00:29:32,640
now it's just on github so uh i

741
00:29:32,640 --> 00:29:35,440
posted the link and you could check it

742
00:29:35,440 --> 00:29:35,919
and

743
00:29:35,919 --> 00:29:39,039
um i found the code that talks with the

744
00:29:39,039 --> 00:29:39,679
printer

745
00:29:39,679 --> 00:29:43,679
in a file called empty spawning dot dlo

746
00:29:43,679 --> 00:29:47,840
so uh basically uh yeah i said uh

747
00:29:47,840 --> 00:29:50,320
we are uh the code that talks with the

748
00:29:50,320 --> 00:29:51,039
printer

749
00:29:51,039 --> 00:29:54,559
is in empty spooling.dll and there was

750
00:29:54,559 --> 00:29:58,320
uh it was inside this um

751
00:29:58,320 --> 00:30:00,480
firmware controller class so i put a

752
00:30:00,480 --> 00:30:01,440
link in this

753
00:30:01,440 --> 00:30:04,399
uh dock so you can take a look as well

754
00:30:04,399 --> 00:30:04,720
but

755
00:30:04,720 --> 00:30:06,320
inside this class there is a method

756
00:30:06,320 --> 00:30:09,200
called re-data from serial

757
00:30:09,200 --> 00:30:11,120
and the printer was connected to the

758
00:30:11,120 --> 00:30:13,360
computer using eos art so

759
00:30:13,360 --> 00:30:15,760
serial connection and this looked like

760
00:30:15,760 --> 00:30:16,880
the preset

761
00:30:16,880 --> 00:30:19,679
perfect place to find strings this

762
00:30:19,679 --> 00:30:22,080
printer might send to the computer

763
00:30:22,080 --> 00:30:24,879
so um

764
00:30:25,520 --> 00:30:28,640
let's see what happened there so we can

765
00:30:28,640 --> 00:30:29,440
see like

766
00:30:29,440 --> 00:30:32,799
uh it calls uh

767
00:30:32,799 --> 00:30:35,360
blah blah blah blah blah blah blah oh

768
00:30:35,360 --> 00:30:36,000
there is another

769
00:30:36,000 --> 00:30:38,559
one called process reads which probably

770
00:30:38,559 --> 00:30:40,320
which caused this method and then

771
00:30:40,320 --> 00:30:42,480
does something with the result so we see

772
00:30:42,480 --> 00:30:43,760
a couple of texts like

773
00:30:43,760 --> 00:30:46,880
okay rs skip wait but

774
00:30:46,880 --> 00:30:50,000
these are pretty short texts and we

775
00:30:50,000 --> 00:30:51,919
are probably not going to be able to

776
00:30:51,919 --> 00:30:53,520
find them however

777
00:30:53,520 --> 00:30:56,320
there is this text which looks

778
00:30:56,320 --> 00:30:57,440
interesting

779
00:30:57,440 --> 00:31:00,799
because it's pretty long and if we look

780
00:31:00,799 --> 00:31:02,399
at the

781
00:31:02,399 --> 00:31:04,399
pattern of repetitions like the

782
00:31:04,399 --> 00:31:05,519
repeating letters

783
00:31:05,519 --> 00:31:08,960
we might be able to uh figure where it

784
00:31:08,960 --> 00:31:10,480
stays in the firmware

785
00:31:10,480 --> 00:31:14,000
even though it's encrypted so um

786
00:31:14,000 --> 00:31:17,039
let me explain what i'm i'm talking

787
00:31:17,039 --> 00:31:18,080
about when i'm talking

788
00:31:18,080 --> 00:31:19,840
about when i'm saying the pattern of

789
00:31:19,840 --> 00:31:21,120
repetitions

790
00:31:21,120 --> 00:31:24,240
so um for that

791
00:31:24,240 --> 00:31:27,360
let's just make sure you can see the

792
00:31:27,360 --> 00:31:30,080
uh i don't know why somebody asked and

793
00:31:30,080 --> 00:31:30,840
but

794
00:31:30,840 --> 00:31:33,519
um for that i have a

795
00:31:33,519 --> 00:31:36,480
code snippet so we don't have to uh code

796
00:31:36,480 --> 00:31:37,919
it from scratch

797
00:31:37,919 --> 00:31:41,360
uh let me copy it so okay code snippet

798
00:31:41,360 --> 00:31:44,559
so uh this is a small visualization

799
00:31:44,559 --> 00:31:47,840
that i made and uh

800
00:31:47,840 --> 00:31:50,000
if you are interested in how it works

801
00:31:50,000 --> 00:31:51,679
there is actually a blog post i wrote

802
00:31:51,679 --> 00:31:54,080
about it i will put it in the uh

803
00:31:54,080 --> 00:31:57,200
links here in a moment um but

804
00:31:57,200 --> 00:32:00,240
basically what is task does it shows us

805
00:32:00,240 --> 00:32:02,559
the pattern of repetitions in a given

806
00:32:02,559 --> 00:32:03,360
string

807
00:32:03,360 --> 00:32:05,760
so in this hello world we can see for

808
00:32:05,760 --> 00:32:06,720
instance that

809
00:32:06,720 --> 00:32:10,320
there is the letter l it has

810
00:32:10,320 --> 00:32:13,600
uh it always has

811
00:32:13,600 --> 00:32:16,960
pink star above it in the same height

812
00:32:16,960 --> 00:32:20,000
so we can easily see that if we have

813
00:32:20,000 --> 00:32:23,200
three pink stars that the

814
00:32:23,200 --> 00:32:26,399
letter l repeats three times and like

815
00:32:26,399 --> 00:32:28,640
this is like the pattern of spacing

816
00:32:28,640 --> 00:32:31,840
between the repetitions of l so uh

817
00:32:31,840 --> 00:32:33,840
just one next to each other and then

818
00:32:33,840 --> 00:32:35,360
like uh one

819
00:32:35,360 --> 00:32:37,919
two three four five six seven eight

820
00:32:37,919 --> 00:32:40,080
characters apart another l

821
00:32:40,080 --> 00:32:42,080
and this uh string is not very

822
00:32:42,080 --> 00:32:44,159
interesting because we only have

823
00:32:44,159 --> 00:32:47,440
uh l and uh the uh

824
00:32:47,440 --> 00:32:50,480
o that repeating but if we look at the

825
00:32:50,480 --> 00:32:50,960
same

826
00:32:50,960 --> 00:32:56,399
um visualization for this string

827
00:32:57,279 --> 00:32:59,519
check

828
00:33:00,960 --> 00:33:04,240
we can see it has a lot of repeating

829
00:33:04,240 --> 00:33:04,880
letters

830
00:33:04,880 --> 00:33:08,000
uh with different intervals so

831
00:33:08,000 --> 00:33:11,279
we can see like um for instance uh

832
00:33:11,279 --> 00:33:14,399
n this is the green star we can see like

833
00:33:14,399 --> 00:33:15,120
there's one

834
00:33:15,120 --> 00:33:18,399
two three four five six

835
00:33:18,399 --> 00:33:22,399
um uh repetitions of that

836
00:33:22,399 --> 00:33:25,760
and it happens for many letters um

837
00:33:25,760 --> 00:33:28,320
so this is like a unique signature that

838
00:33:28,320 --> 00:33:29,679
we can look for

839
00:33:29,679 --> 00:33:32,000
in the hidden uh in the encrypted

840
00:33:32,000 --> 00:33:33,919
firmware we don't have to know the

841
00:33:33,919 --> 00:33:34,960
mapping we just

842
00:33:34,960 --> 00:33:37,760
have to look for a characters that

843
00:33:37,760 --> 00:33:38,320
repeat

844
00:33:38,320 --> 00:33:41,679
based on this pattern um

845
00:33:41,679 --> 00:33:45,679
so uh i was i think somebody suggested

846
00:33:45,679 --> 00:33:46,000
it

847
00:33:46,000 --> 00:33:49,360
in the uh chat before so uh

848
00:33:49,360 --> 00:33:51,440
that was a great call and we are going

849
00:33:51,440 --> 00:33:52,640
to do it now

850
00:33:52,640 --> 00:33:56,320
um just um one more fact

851
00:33:56,320 --> 00:33:58,640
what we are working in right we with

852
00:33:58,640 --> 00:33:59,679
what we are working with

853
00:33:59,679 --> 00:34:03,120
right now is like in your version of the

854
00:34:03,120 --> 00:34:03,919
software

855
00:34:03,919 --> 00:34:06,559
like i had an older version of the

856
00:34:06,559 --> 00:34:08,320
firmware i didn't have the files on

857
00:34:08,320 --> 00:34:11,760
github so i did everything on that pic

858
00:34:11,760 --> 00:34:14,800
and my version had less strings

859
00:34:14,800 --> 00:34:18,159
than uh the newest version that you have

860
00:34:18,159 --> 00:34:20,639
so it was a bit more challenging but

861
00:34:20,639 --> 00:34:21,918
when i saw this string

862
00:34:21,918 --> 00:34:24,399
i i knew it's super unique like this

863
00:34:24,399 --> 00:34:25,918
pattern is super unique

864
00:34:25,918 --> 00:34:28,399
and there is probably no chance in the

865
00:34:28,399 --> 00:34:28,960
world

866
00:34:28,960 --> 00:34:32,320
i will find it if it's not there so

867
00:34:32,320 --> 00:34:35,599
um i wrote this uh code

868
00:34:35,599 --> 00:34:38,639
to search for this pattern and uh

869
00:34:38,639 --> 00:34:40,960
let's not type it i will just copy this

870
00:34:40,960 --> 00:34:42,320
and explain it

871
00:34:42,320 --> 00:34:44,960
so basically uh this code uh has the

872
00:34:44,960 --> 00:34:46,159
search string

873
00:34:46,159 --> 00:34:49,679
and we are going uh over each location

874
00:34:49,679 --> 00:34:53,040
inside the firmware and uh

875
00:34:53,040 --> 00:34:55,599
basically we are preparing um a

876
00:34:55,599 --> 00:34:57,040
temporary table

877
00:34:57,040 --> 00:35:00,320
and then when we uh we go um over

878
00:35:00,320 --> 00:35:01,839
each of the characters from that

879
00:35:01,839 --> 00:35:03,440
location in the firmware

880
00:35:03,440 --> 00:35:05,760
and we are trying to see do we uh have

881
00:35:05,760 --> 00:35:07,599
we encountered that before

882
00:35:07,599 --> 00:35:11,200
if yes we use that table we created

883
00:35:11,200 --> 00:35:14,560
um so

884
00:35:14,560 --> 00:35:18,000
if we we encountered them before

885
00:35:18,000 --> 00:35:20,480
uh we used that table we created to

886
00:35:20,480 --> 00:35:22,000
check if

887
00:35:22,000 --> 00:35:23,839
they are the characters we have we are

888
00:35:23,839 --> 00:35:25,680
expecting like

889
00:35:25,680 --> 00:35:28,960
if we see uh so if we see that the

890
00:35:28,960 --> 00:35:30,160
second character

891
00:35:30,160 --> 00:35:33,599
is uh for example uh an

892
00:35:33,599 --> 00:35:37,040
uh percent sign so

893
00:35:37,040 --> 00:35:40,400
we uh next time when we encounter the

894
00:35:40,400 --> 00:35:43,359
the same letter like the next and we'll

895
00:35:43,359 --> 00:35:44,079
see if it's

896
00:35:44,079 --> 00:35:46,960
still uh a percent sign in the encrypted

897
00:35:46,960 --> 00:35:48,880
femur if we have the same character

898
00:35:48,880 --> 00:35:51,040
uh in that location as well and in this

899
00:35:51,040 --> 00:35:52,960
location and in this location

900
00:35:52,960 --> 00:35:56,160
so basically uh checking if uh let's see

901
00:35:56,160 --> 00:35:58,160
if we can annotate here yep

902
00:35:58,160 --> 00:36:01,280
that would be easier so if we uh

903
00:36:01,280 --> 00:36:04,320
have a percent sign here if we see a

904
00:36:04,320 --> 00:36:05,520
percent sign

905
00:36:05,520 --> 00:36:08,880
in uh i plus one in uh

906
00:36:08,880 --> 00:36:12,160
second location after uh the car like

907
00:36:12,160 --> 00:36:13,119
after the current

908
00:36:13,119 --> 00:36:15,040
location we are looking at then we

909
00:36:15,040 --> 00:36:16,160
expect

910
00:36:16,160 --> 00:36:19,040
uh it to have a percent sign here and

911
00:36:19,040 --> 00:36:20,720
another one here

912
00:36:20,720 --> 00:36:23,599
and so on and so basically we are

913
00:36:23,599 --> 00:36:24,400
building this

914
00:36:24,400 --> 00:36:27,040
mapping as we go and whenever we

915
00:36:27,040 --> 00:36:28,160
encounter like

916
00:36:28,160 --> 00:36:31,200
a new letter we haven't seen before um

917
00:36:31,200 --> 00:36:33,520
in the current location we just add it

918
00:36:33,520 --> 00:36:35,359
to a table

919
00:36:35,359 --> 00:36:39,359
let's remove these annotations

920
00:36:39,359 --> 00:36:43,040
okay how do they stop annotating yes

921
00:36:43,040 --> 00:36:46,240
um and so

922
00:36:46,240 --> 00:36:49,280
if we encounter a new one we just put it

923
00:36:49,280 --> 00:36:50,800
in the table

924
00:36:50,800 --> 00:36:54,640
um and if we uh

925
00:36:54,640 --> 00:36:57,119
don't if we find something that doesn't

926
00:36:57,119 --> 00:36:58,000
match

927
00:36:58,000 --> 00:37:01,920
then uh we just uh say hey

928
00:37:01,920 --> 00:37:04,079
it's there is no match here it doesn't

929
00:37:04,079 --> 00:37:05,599
match the pattern

930
00:37:05,599 --> 00:37:09,680
and uh okay and uh we move on to the

931
00:37:09,680 --> 00:37:11,280
next firmware location

932
00:37:11,280 --> 00:37:13,839
and if we found the match then we print

933
00:37:13,839 --> 00:37:15,119
this happy message

934
00:37:15,119 --> 00:37:17,839
found at offset and we say where we

935
00:37:17,839 --> 00:37:18,880
found it

936
00:37:18,880 --> 00:37:21,440
so this is the code that looks for this

937
00:37:21,440 --> 00:37:23,119
pattern this repetition

938
00:37:23,119 --> 00:37:26,240
pattern in the framework code um

939
00:37:26,240 --> 00:37:29,760
see you later sophie thanks um

940
00:37:29,760 --> 00:37:32,960
and then if we run this code we can see

941
00:37:32,960 --> 00:37:34,800
there were no matches

942
00:37:34,800 --> 00:37:37,040
and that's pretty disappointing because

943
00:37:37,040 --> 00:37:38,400
it took me a long

944
00:37:38,400 --> 00:37:41,200
time to write this code and i also like

945
00:37:41,200 --> 00:37:42,079
debugged it

946
00:37:42,079 --> 00:37:44,079
on a few test scenarios just to make

947
00:37:44,079 --> 00:37:45,200
sure that uh

948
00:37:45,200 --> 00:37:47,839
it works well uh you see it's not the

949
00:37:47,839 --> 00:37:50,079
cleanest code in the world but

950
00:37:50,079 --> 00:37:52,240
it works well whatever let's save so if

951
00:37:52,240 --> 00:37:54,400
you want to follow through you can

952
00:37:54,400 --> 00:37:57,440
and um okay so

953
00:37:57,440 --> 00:38:00,400
what do we do next um one thing that

954
00:38:00,400 --> 00:38:01,599
caught my attention

955
00:38:01,599 --> 00:38:04,000
it says change check the micro motion

956
00:38:04,000 --> 00:38:05,440
cable connection

957
00:38:05,440 --> 00:38:08,000
and micro was their first printer so

958
00:38:08,000 --> 00:38:08,720
maybe this

959
00:38:08,720 --> 00:38:11,920
new printer uh doesn't even have this

960
00:38:11,920 --> 00:38:13,119
string in the firmware

961
00:38:13,119 --> 00:38:15,280
maybe i'm looking for something that is

962
00:38:15,280 --> 00:38:16,400
not there

963
00:38:16,400 --> 00:38:20,320
so i went back to the file and um

964
00:38:20,320 --> 00:38:23,520
started looking for other strings

965
00:38:23,520 --> 00:38:26,160
and you know like uh these are not

966
00:38:26,160 --> 00:38:27,200
really interested

967
00:38:27,200 --> 00:38:30,240
interesting string e or start

968
00:38:30,240 --> 00:38:33,680
this has two repeating tees but it's

969
00:38:33,680 --> 00:38:35,520
it's pretty common to find the character

970
00:38:35,520 --> 00:38:36,960
that uh repeats

971
00:38:36,960 --> 00:38:40,079
three letters apart um

972
00:38:40,079 --> 00:38:42,240
and then i found all these like framer

973
00:38:42,240 --> 00:38:43,680
name firmware version

974
00:38:43,680 --> 00:38:47,119
uh firmware url and i even found this

975
00:38:47,119 --> 00:38:48,880
one which is pretty interesting because

976
00:38:48,880 --> 00:38:51,520
if you check out this string it's pretty

977
00:38:51,520 --> 00:38:52,480
short

978
00:38:52,480 --> 00:38:55,440
but despite being short if we paste it

979
00:38:55,440 --> 00:38:57,440
here to our visualization

980
00:38:57,440 --> 00:38:59,760
we can see it has a lot of repetition

981
00:38:59,760 --> 00:39:00,640
like

982
00:39:00,640 --> 00:39:03,680
almost every little letter like one

983
00:39:03,680 --> 00:39:06,960
two three four five of the letters here

984
00:39:06,960 --> 00:39:09,359
are repeated and some of them repeat

985
00:39:09,359 --> 00:39:10,560
three more or

986
00:39:10,560 --> 00:39:13,359
uh yeah most of them repeat uh like one

987
00:39:13,359 --> 00:39:14,400
two three

988
00:39:14,400 --> 00:39:17,040
four of them repeat three times so uh

989
00:39:17,040 --> 00:39:18,640
it's pretty unique so

990
00:39:18,640 --> 00:39:21,839
i said uh one why won't we try that

991
00:39:21,839 --> 00:39:24,800
uh like let's search for that string it

992
00:39:24,800 --> 00:39:25,280
might

993
00:39:25,280 --> 00:39:29,200
uh we might get lucky so

994
00:39:29,200 --> 00:39:34,079
try that still no matches

995
00:39:34,079 --> 00:39:37,280
banner so let me describe to you how i

996
00:39:37,280 --> 00:39:38,960
felt at this point

997
00:39:38,960 --> 00:39:42,800
um i basically uh

998
00:39:42,800 --> 00:39:46,160
spent 10 hours or so maybe 16 i stopped

999
00:39:46,160 --> 00:39:48,000
counting at that point

1000
00:39:48,000 --> 00:39:50,320
um looking at different directions and i

1001
00:39:50,320 --> 00:39:51,119
didn't show you

1002
00:39:51,119 --> 00:39:53,680
everything i tried because uh that would

1003
00:39:53,680 --> 00:39:54,400
just take

1004
00:39:54,400 --> 00:39:57,520
forever um and

1005
00:39:57,520 --> 00:40:00,800
basically i really felt like this

1006
00:40:00,800 --> 00:40:03,440
after spending 10 hours i only had three

1007
00:40:03,440 --> 00:40:04,240
characters

1008
00:40:04,240 --> 00:40:07,599
and they were only guesses not even like

1009
00:40:07,599 --> 00:40:09,440
i couldn't even be sure i was on the

1010
00:40:09,440 --> 00:40:11,839
right path

1011
00:40:11,920 --> 00:40:15,520
i almost gave up but

1012
00:40:15,520 --> 00:40:17,680
you know i got nothing better to do i

1013
00:40:17,680 --> 00:40:20,880
guess so i gave it another shot

1014
00:40:20,880 --> 00:40:24,000
and um i started looking um

1015
00:40:24,000 --> 00:40:26,960
at some of the work the guy from github

1016
00:40:26,960 --> 00:40:28,160
did on the

1017
00:40:28,160 --> 00:40:31,119
previous firmware and i found an

1018
00:40:31,119 --> 00:40:31,760
interesting

1019
00:40:31,760 --> 00:40:34,079
point when i looked at his code he

1020
00:40:34,079 --> 00:40:35,760
actually has a software that

1021
00:40:35,760 --> 00:40:38,240
updates the firmware for the older

1022
00:40:38,240 --> 00:40:39,200
printer

1023
00:40:39,200 --> 00:40:42,400
and i found um i will post that link

1024
00:40:42,400 --> 00:40:44,480
in a moment to the document so you can

1025
00:40:44,480 --> 00:40:46,160
check it out too

1026
00:40:46,160 --> 00:40:49,359
but um i found an

1027
00:40:49,359 --> 00:40:52,720
interesting line there it basically uh

1028
00:40:52,720 --> 00:40:55,839
so uh looking at this line can you tell

1029
00:40:55,839 --> 00:40:56,160
me

1030
00:40:56,160 --> 00:40:59,280
what it does uh do you have like uh

1031
00:40:59,280 --> 00:41:02,480
it's uh c plus plus or c

1032
00:41:02,480 --> 00:41:05,599
uh so what does this do let me know what

1033
00:41:05,599 --> 00:41:06,079
do you think

1034
00:41:06,079 --> 00:41:09,119
it does um

1035
00:41:09,119 --> 00:41:12,800
this line okay so

1036
00:41:12,800 --> 00:41:16,560
yeah somebody monta that's right uh

1037
00:41:16,560 --> 00:41:20,000
it's swaps bike pairs so basically every

1038
00:41:20,000 --> 00:41:22,960
pair of pie why did they move to the

1039
00:41:22,960 --> 00:41:24,160
other screen i don't know

1040
00:41:24,160 --> 00:41:27,680
every bear a pair of bite gets swept

1041
00:41:27,680 --> 00:41:30,880
so i said well maybe they did it here as

1042
00:41:30,880 --> 00:41:31,760
well

1043
00:41:31,760 --> 00:41:35,200
so uh i wrote this uh function

1044
00:41:35,200 --> 00:41:38,000
let's write it

1045
00:41:38,319 --> 00:41:40,960
that's evil thank you fair i felt the

1046
00:41:40,960 --> 00:41:41,680
same

1047
00:41:41,680 --> 00:41:44,240
so um let's write this uh function

1048
00:41:44,240 --> 00:41:45,040
python

1049
00:41:45,040 --> 00:41:49,200
uh let me see i have it

1050
00:41:49,200 --> 00:41:52,720
yep i have it here so i will just

1051
00:41:52,720 --> 00:41:55,520
copy it from their code and pythonize it

1052
00:41:55,520 --> 00:41:56,000
so

1053
00:41:56,000 --> 00:41:59,680
it was oh that's evil yeah

1054
00:41:59,680 --> 00:42:02,720
true uh let's call it swappers and it

1055
00:42:02,720 --> 00:42:03,760
gets some

1056
00:42:03,760 --> 00:42:07,200
data and then let's uh build

1057
00:42:07,200 --> 00:42:11,119
a new byte array

1058
00:42:11,119 --> 00:42:13,599
from this data so we can mutate it and

1059
00:42:13,599 --> 00:42:14,880
then for i

1060
00:42:14,880 --> 00:42:17,599
in uh

1061
00:42:18,079 --> 00:42:21,839
so each byte of the data we just do this

1062
00:42:21,839 --> 00:42:25,119
uh swapping uh

1063
00:42:25,119 --> 00:42:27,760
let's just pythonize it so it should be

1064
00:42:27,760 --> 00:42:29,440
data

1065
00:42:29,440 --> 00:42:33,040
and this should be pythonized so

1066
00:42:33,040 --> 00:42:36,800
um we want

1067
00:42:36,800 --> 00:42:40,960
minus one if this else

1068
00:42:40,960 --> 00:42:44,720
this um it's probably indian related

1069
00:42:44,720 --> 00:42:48,560
i am not sure um i i i

1070
00:42:48,560 --> 00:42:51,040
i think their older like firmware was

1071
00:42:51,040 --> 00:42:51,839
avr

1072
00:42:51,839 --> 00:42:55,040
and i think avr's are big indian let's

1073
00:42:55,040 --> 00:42:57,520
google that real quick

1074
00:42:57,520 --> 00:43:02,160
ah oh it's a little indian yeah

1075
00:43:02,160 --> 00:43:04,960
so it might have to be with uh indiana's

1076
00:43:04,960 --> 00:43:05,599
um

1077
00:43:05,599 --> 00:43:09,200
anyway uh so now we can just return the

1078
00:43:09,200 --> 00:43:11,280
return that wouldn't work return the

1079
00:43:11,280 --> 00:43:12,240
result

1080
00:43:12,240 --> 00:43:15,760
and uh i quickly coded this

1081
00:43:15,760 --> 00:43:19,200
um let's just make it prettier swappers

1082
00:43:19,200 --> 00:43:22,560
and applied it on my

1083
00:43:22,560 --> 00:43:26,319
firmware data so

1084
00:43:26,319 --> 00:43:29,839
so i did and uh i went back

1085
00:43:29,839 --> 00:43:32,560
looking for this uh string so basically

1086
00:43:32,560 --> 00:43:33,359
we now have

1087
00:43:33,359 --> 00:43:37,680
every pair swapped and um

1088
00:43:38,240 --> 00:43:40,480
alexis i love your comment he says looks

1089
00:43:40,480 --> 00:43:41,920
like they spent more time

1090
00:43:41,920 --> 00:43:43,599
trying to encrypt the code than writing

1091
00:43:43,599 --> 00:43:45,760
good codes from this pretty 3d printer

1092
00:43:45,760 --> 00:43:47,839
framework that's so correct

1093
00:43:47,839 --> 00:43:50,960
uh thanks for that comment anyway so

1094
00:43:50,960 --> 00:43:53,359
uh at that point after i swapped the

1095
00:43:53,359 --> 00:43:54,000
parts

1096
00:43:54,000 --> 00:43:58,480
i ran it again and still no matches

1097
00:43:58,480 --> 00:44:03,119
or let's try the other one

1098
00:44:03,200 --> 00:44:06,960
hooray yes we found it

1099
00:44:06,960 --> 00:44:10,400
so um yeah we found it i'm so happy i'm

1100
00:44:10,400 --> 00:44:11,680
so glad we did

1101
00:44:11,680 --> 00:44:14,800
so at this point we found some uh some

1102
00:44:14,800 --> 00:44:16,000
of this

1103
00:44:16,000 --> 00:44:19,440
a match to this string so um

1104
00:44:19,440 --> 00:44:22,800
while i was uh looking for this match

1105
00:44:22,800 --> 00:44:24,960
you can see that i like updated this

1106
00:44:24,960 --> 00:44:27,119
table

1107
00:44:27,119 --> 00:44:29,200
with the temp table so basically if we

1108
00:44:29,200 --> 00:44:30,960
print our table we can see that we have

1109
00:44:30,960 --> 00:44:32,880
a lot more values now

1110
00:44:32,880 --> 00:44:35,520
and i think this is a good point let's

1111
00:44:35,520 --> 00:44:38,800
bring the length of the table

1112
00:44:40,160 --> 00:44:42,240
yeah it's great that the real time demos

1113
00:44:42,240 --> 00:44:44,799
goes well

1114
00:44:45,040 --> 00:44:48,400
no i i can't even type correctly anyway

1115
00:44:48,400 --> 00:44:51,599
uh yeah we have uh 12 uh bytes

1116
00:44:51,599 --> 00:44:55,040
candidates already uh yeah

1117
00:44:55,040 --> 00:44:58,560
and um at that point i decided to write

1118
00:44:58,560 --> 00:45:01,680
the most important piece of code in this

1119
00:45:01,680 --> 00:45:02,560
project

1120
00:45:02,560 --> 00:45:05,200
i called it progress and it just brings

1121
00:45:05,200 --> 00:45:06,000
uh

1122
00:45:06,000 --> 00:45:08,720
my progress towards solving this uh

1123
00:45:08,720 --> 00:45:09,680
mystery

1124
00:45:09,680 --> 00:45:13,680
uh so we can see we are already on 4.69

1125
00:45:13,680 --> 00:45:16,839
which is great um

1126
00:45:16,839 --> 00:45:20,800
and let's fix the indentation

1127
00:45:20,800 --> 00:45:23,520
it drives me crazy when the invitation

1128
00:45:23,520 --> 00:45:25,280
is not correct yeah

1129
00:45:25,280 --> 00:45:27,520
uh let me save so you can follow through

1130
00:45:27,520 --> 00:45:28,480
if you want

1131
00:45:28,480 --> 00:45:31,520
and at this case i guess my guess was

1132
00:45:31,520 --> 00:45:32,480
right and this

1133
00:45:32,480 --> 00:45:34,560
string doesn't appear in the pro but

1134
00:45:34,560 --> 00:45:35,920
this string does

1135
00:45:35,920 --> 00:45:39,119
uh let's try with one let's try with

1136
00:45:39,119 --> 00:45:42,160
one more string from the firmware

1137
00:45:42,160 --> 00:45:45,280
oh why doesn't it work

1138
00:45:45,280 --> 00:45:48,880
i don't know um

1139
00:45:49,119 --> 00:45:52,160
okay uh so let's try with

1140
00:45:52,160 --> 00:45:54,399
uh

1141
00:45:55,280 --> 00:45:58,560
this one maybe protocol version it has a

1142
00:45:58,560 --> 00:46:00,480
lot of o's

1143
00:46:00,480 --> 00:46:03,440
so it might be good oh and we already

1144
00:46:03,440 --> 00:46:04,880
know protocol

1145
00:46:04,880 --> 00:46:08,720
so that's also a good point and

1146
00:46:08,720 --> 00:46:12,640
no matches interesting um

1147
00:46:12,640 --> 00:46:17,280
okay so uh let's try one more

1148
00:46:17,280 --> 00:46:21,119
i know uh let's try

1149
00:46:21,119 --> 00:46:25,119
uh what else do we have here

1150
00:46:25,119 --> 00:46:29,040
firmware url firmware version that has

1151
00:46:29,040 --> 00:46:30,960
let's see how it works in terms of

1152
00:46:30,960 --> 00:46:33,680
repetitions

1153
00:46:35,119 --> 00:46:38,160
three ah

1154
00:46:38,160 --> 00:46:42,160
okay it might be a bit uh

1155
00:46:42,160 --> 00:46:45,280
too weak but let's try that anyway oh

1156
00:46:45,280 --> 00:46:47,760
we found a match and it's pretty close

1157
00:46:47,760 --> 00:46:48,960
to the previous match

1158
00:46:48,960 --> 00:46:52,319
like six seven five two four six seven

1159
00:46:52,319 --> 00:46:55,040
five six four so uh this seems pretty

1160
00:46:55,040 --> 00:46:55,599
legit

1161
00:46:55,599 --> 00:46:58,079
because we found them very close so this

1162
00:46:58,079 --> 00:47:00,319
might be a section with strings

1163
00:47:00,319 --> 00:47:03,359
now uh i would love to see a hex dump of

1164
00:47:03,359 --> 00:47:04,000
this

1165
00:47:04,000 --> 00:47:07,280
but uh oh let's check our progress yeah

1166
00:47:07,280 --> 00:47:10,400
we are a bit further now

1167
00:47:10,400 --> 00:47:12,880
i would love to show a hex dump of this

1168
00:47:12,880 --> 00:47:15,200
but uh standard hex dump would show me

1169
00:47:15,200 --> 00:47:16,560
the encrypted firmware

1170
00:47:16,560 --> 00:47:19,680
which is pretty uh useless so for that

1171
00:47:19,680 --> 00:47:22,319
uh we are going to create our own hex

1172
00:47:22,319 --> 00:47:23,200
dump

1173
00:47:23,200 --> 00:47:26,400
which will show us a combination of

1174
00:47:26,400 --> 00:47:29,359
the uh encrypted and decrypted firmware

1175
00:47:29,359 --> 00:47:30,480
based on the

1176
00:47:30,480 --> 00:47:33,760
values that we already have so uh this

1177
00:47:33,760 --> 00:47:35,119
is like the

1178
00:47:35,119 --> 00:47:37,680
smart hex dump and what it basically

1179
00:47:37,680 --> 00:47:38,400
does

1180
00:47:38,400 --> 00:47:41,839
uh it's pretty long code but basically

1181
00:47:41,839 --> 00:47:42,480
it goes

1182
00:47:42,480 --> 00:47:47,040
over each um byte in the given value

1183
00:47:47,040 --> 00:47:50,559
and then it formats it according to

1184
00:47:50,559 --> 00:47:53,040
whether it appears on the table or not

1185
00:47:53,040 --> 00:47:55,119
if it appears on the table

1186
00:47:55,119 --> 00:47:57,280
then this means that we already have the

1187
00:47:57,280 --> 00:47:58,160
decryption

1188
00:47:58,160 --> 00:48:01,359
uh for that byte can decrypt it and

1189
00:48:01,359 --> 00:48:02,960
we'll print it

1190
00:48:02,960 --> 00:48:06,319
black on white or on gray but if we

1191
00:48:06,319 --> 00:48:07,680
don't have this byte so

1192
00:48:07,680 --> 00:48:09,920
it's still encrypted we'll bring it

1193
00:48:09,920 --> 00:48:11,520
we'll print it

1194
00:48:11,520 --> 00:48:14,480
white on magenta this is a nice python

1195
00:48:14,480 --> 00:48:16,480
package that lets you print things in

1196
00:48:16,480 --> 00:48:18,559
colors and apparently this even works

1197
00:48:18,559 --> 00:48:20,079
inside notebooks

1198
00:48:20,079 --> 00:48:23,520
so with that hex dump we can now

1199
00:48:23,520 --> 00:48:26,319
look at this location at that offset and

1200
00:48:26,319 --> 00:48:27,760
let's hex dump the

1201
00:48:27,760 --> 00:48:31,280
firmware at that offset

1202
00:48:31,280 --> 00:48:35,839
let's say we want just 100 bytes

1203
00:48:36,000 --> 00:48:40,800
and interesting let's go a bit up

1204
00:48:40,800 --> 00:48:43,119
yeah we can see there uh this is a

1205
00:48:43,119 --> 00:48:44,000
section with

1206
00:48:44,000 --> 00:48:47,280
a few strings already there is a

1207
00:48:47,280 --> 00:48:48,960
repetier protocol

1208
00:48:48,960 --> 00:48:51,680
a firmware name firmware version uh you

1209
00:48:51,680 --> 00:48:52,480
can probably

1210
00:48:52,480 --> 00:48:57,599
guess what these two are and um

1211
00:49:01,760 --> 00:49:04,960
yep uh thank you brandon

1212
00:49:04,960 --> 00:49:08,559
um so you you can see like

1213
00:49:08,559 --> 00:49:12,079
uh at that point i did have to do some

1214
00:49:12,079 --> 00:49:12,640
guessing

1215
00:49:12,640 --> 00:49:16,079
like to guess that this was uh i will

1216
00:49:16,079 --> 00:49:18,000
let you guess it if you still haven't

1217
00:49:18,000 --> 00:49:21,040
or what this one was but basically now

1218
00:49:21,040 --> 00:49:23,760
they just uh they are just here so you

1219
00:49:23,760 --> 00:49:25,119
can find these strings here

1220
00:49:25,119 --> 00:49:27,440
and it's super simple to understand

1221
00:49:27,440 --> 00:49:28,319
which strings

1222
00:49:28,319 --> 00:49:31,680
are um printed here

1223
00:49:31,680 --> 00:49:34,880
um and now um

1224
00:49:34,880 --> 00:49:38,559
we love fortune okay uh i would love uh

1225
00:49:38,559 --> 00:49:40,960
to learn more about that later alexis uh

1226
00:49:40,960 --> 00:49:42,720
ping me on twitter and tell me why i'm

1227
00:49:42,720 --> 00:49:43,599
interested

1228
00:49:43,599 --> 00:49:47,040
anyway at this point i think

1229
00:49:47,040 --> 00:49:51,040
i'm going to let you try um

1230
00:49:51,040 --> 00:49:53,680
figure out some of the missing bites

1231
00:49:53,680 --> 00:49:55,599
yourself

1232
00:49:55,599 --> 00:49:57,599
i would just say that you can use this

1233
00:49:57,599 --> 00:49:58,960
hex dump and

1234
00:49:58,960 --> 00:50:02,400
um like uh just you know

1235
00:50:02,400 --> 00:50:04,079
update the table with values that you

1236
00:50:04,079 --> 00:50:06,000
found so for instance

1237
00:50:06,000 --> 00:50:09,440
uh we know that this is probably

1238
00:50:09,440 --> 00:50:13,920
a machine so uh that would be

1239
00:50:13,920 --> 00:50:17,599
uh the character the ascii code for

1240
00:50:17,599 --> 00:50:21,280
h and what happened

1241
00:50:21,280 --> 00:50:25,200
the ascii code yep uh so yeah and we can

1242
00:50:25,200 --> 00:50:26,079
see that the

1243
00:50:26,079 --> 00:50:28,880
uh hex stamp updated according to our

1244
00:50:28,880 --> 00:50:29,440
guest

1245
00:50:29,440 --> 00:50:31,920
so we can start making a lot of educated

1246
00:50:31,920 --> 00:50:32,480
guesses

1247
00:50:32,480 --> 00:50:35,040
based on this uh let's just save that so

1248
00:50:35,040 --> 00:50:35,839
you can

1249
00:50:35,839 --> 00:50:39,040
continue from here and you have two

1250
00:50:39,040 --> 00:50:40,240
firmware files

1251
00:50:40,240 --> 00:50:42,160
you know what let me do the work for you

1252
00:50:42,160 --> 00:50:44,240
and i will also load a second firmware

1253
00:50:44,240 --> 00:50:44,720
file

1254
00:50:44,720 --> 00:50:46,400
so you can see if you can find any

1255
00:50:46,400 --> 00:50:48,240
strings there as well

1256
00:50:48,240 --> 00:50:51,960
um how did i call that file that was

1257
00:50:51,960 --> 00:50:54,960
firmware.beam and the other one was

1258
00:50:54,960 --> 00:50:58,400
second so firmware 2

1259
00:50:58,400 --> 00:51:01,599
is second

1260
00:51:01,599 --> 00:51:04,000
so yeah so you can just like play with

1261
00:51:04,000 --> 00:51:06,480
this hex dump and give it random values

1262
00:51:06,480 --> 00:51:08,240
or you can just hex dump the

1263
00:51:08,240 --> 00:51:10,240
entire file if you want and your

1264
00:51:10,240 --> 00:51:12,319
computer is capable of it

1265
00:51:12,319 --> 00:51:15,200
and basically look for fragments of

1266
00:51:15,200 --> 00:51:16,240
strings

1267
00:51:16,240 --> 00:51:19,680
and i will give you like uh 10 minutes

1268
00:51:19,680 --> 00:51:22,720
and whenever you find something

1269
00:51:22,720 --> 00:51:31,359
please share it here in the dark

