1
00:00:40,160 --> 00:00:40,800
well

2
00:00:40,800 --> 00:00:42,719
hello everyone my name is bruce

3
00:00:42,719 --> 00:00:45,200
dominguez welcome to remotacon

4
00:00:45,200 --> 00:00:48,399
uh i hope you're having a good morning

5
00:00:48,399 --> 00:00:50,640
good afternoon or good evening wherever

6
00:00:50,640 --> 00:00:51,920
you may be

7
00:00:51,920 --> 00:00:55,039
and uh just fyi you can always post

8
00:00:55,039 --> 00:00:56,960
uh questions or comments in the group

9
00:00:56,960 --> 00:00:58,399
chat

10
00:00:58,399 --> 00:01:00,079
and respond to each other give each

11
00:01:00,079 --> 00:01:01,840
other feedback uh because that's what

12
00:01:01,840 --> 00:01:03,280
makes this community

13
00:01:03,280 --> 00:01:06,720
awesome and today we'll be joined

14
00:01:06,720 --> 00:01:09,920
by matthew alt

15
00:01:09,920 --> 00:01:12,880
and he'll be hosting a discussion on

16
00:01:12,880 --> 00:01:14,560
hardware debugging

17
00:01:14,560 --> 00:01:17,200
matthew is a reverse engineer with a

18
00:01:17,200 --> 00:01:19,360
focus on embedded systems

19
00:01:19,360 --> 00:01:21,439
uh he began working in the security

20
00:01:21,439 --> 00:01:23,360
industry for audible

21
00:01:23,360 --> 00:01:26,720
automobile performance and searching for

22
00:01:26,720 --> 00:01:29,759
vulnerabilities in uh engine control

23
00:01:29,759 --> 00:01:30,240
units

24
00:01:30,240 --> 00:01:33,759
and diagnostics implementations

25
00:01:33,759 --> 00:01:35,280
matthew currently works as a security

26
00:01:35,280 --> 00:01:37,520
researcher and as a trainer and

27
00:01:37,520 --> 00:01:38,880
consultant

28
00:01:38,880 --> 00:01:41,040
and he regularly posts projects to his

29
00:01:41,040 --> 00:01:44,320
github rongbod.github.io

30
00:01:44,320 --> 00:01:47,119
uh and with that uh matthew uh thank you

31
00:01:47,119 --> 00:01:48,560
for being with us

32
00:01:48,560 --> 00:01:51,360
yeah uh thanks for having me i see some

33
00:01:51,360 --> 00:01:52,960
familiar names in chat from the

34
00:01:52,960 --> 00:01:56,399
guidera course so uh those of you

35
00:01:56,399 --> 00:01:58,079
kind of know what you're getting into um

36
00:01:58,079 --> 00:02:00,399
as we you know go through these slides

37
00:02:00,399 --> 00:02:02,000
and work through

38
00:02:02,000 --> 00:02:03,200
uh what we're gonna work through on the

39
00:02:03,200 --> 00:02:04,880
hardware bench uh please feel free to

40
00:02:04,880 --> 00:02:05,680
ask questions

41
00:02:05,680 --> 00:02:07,759
and i'll get to them you know as soon as

42
00:02:07,759 --> 00:02:09,598
i can and

43
00:02:09,598 --> 00:02:11,280
kind of like they said before definitely

44
00:02:11,280 --> 00:02:13,120
open for you know having discussions

45
00:02:13,120 --> 00:02:14,319
about this and

46
00:02:14,319 --> 00:02:15,680
you know getting like a back and forth

47
00:02:15,680 --> 00:02:17,360
going so uh with

48
00:02:17,360 --> 00:02:18,560
uh with all that to say let's get

49
00:02:18,560 --> 00:02:20,640
started so the

50
00:02:20,640 --> 00:02:22,160
already got an introduction so we'll

51
00:02:22,160 --> 00:02:23,840
burn right through that um we're going

52
00:02:23,840 --> 00:02:24,800
to talk about like

53
00:02:24,800 --> 00:02:26,400
the overview and goals of the session

54
00:02:26,400 --> 00:02:27,840
what you know we want to try to learn

55
00:02:27,840 --> 00:02:29,040
what we want to try to do

56
00:02:29,040 --> 00:02:30,480
we're going to review you know what

57
00:02:30,480 --> 00:02:32,239
single wire debugging is

58
00:02:32,239 --> 00:02:35,840
and do a few exercises on it on the xbox

59
00:02:35,840 --> 00:02:37,440
controller that we have over here

60
00:02:37,440 --> 00:02:38,400
and then we're actually going to talk

61
00:02:38,400 --> 00:02:40,160
about dfu mode which i know we didn't

62
00:02:40,160 --> 00:02:41,280
mention in the project

63
00:02:41,280 --> 00:02:43,840
but found a nice little easter egg with

64
00:02:43,840 --> 00:02:45,599
this controller while trying to debug

65
00:02:45,599 --> 00:02:47,120
something after i bricked it

66
00:02:47,120 --> 00:02:48,560
and so we're going to talk about that

67
00:02:48,560 --> 00:02:50,800
which uh is pretty interesting

68
00:02:50,800 --> 00:02:52,640
and then if we have enough time we're

69
00:02:52,640 --> 00:02:55,280
gonna go over jtag at a pretty low level

70
00:02:55,280 --> 00:02:58,319
and show how to use that on an ssd

71
00:02:58,319 --> 00:03:01,040
that i have here on the bench and so

72
00:03:01,040 --> 00:03:02,959
yeah as they said before i'm matthew alt

73
00:03:02,959 --> 00:03:04,080
uh

74
00:03:04,080 --> 00:03:06,159
i post stuff under wrongbod and i'm a

75
00:03:06,159 --> 00:03:07,840
security researcher so we already talked

76
00:03:07,840 --> 00:03:09,120
through that we don't have to

77
00:03:09,120 --> 00:03:11,760
do that anymore um and so yeah the

78
00:03:11,760 --> 00:03:13,280
purpose of this workshop and this

79
00:03:13,280 --> 00:03:13,760
session

80
00:03:13,760 --> 00:03:15,680
is to explain to you how you know

81
00:03:15,680 --> 00:03:17,120
hardware debugging works

82
00:03:17,120 --> 00:03:19,120
and also show you how to interface with

83
00:03:19,120 --> 00:03:21,280
it using you know open source tools

84
00:03:21,280 --> 00:03:24,000
both software and hardware and so as we

85
00:03:24,000 --> 00:03:25,360
go through this we're going to take a

86
00:03:25,360 --> 00:03:26,959
look at two different targets an xbox

87
00:03:26,959 --> 00:03:29,040
one controller and a transcend

88
00:03:29,040 --> 00:03:32,799
ssd if we get enough time and

89
00:03:32,799 --> 00:03:35,680
so what i want everyone to get from this

90
00:03:35,680 --> 00:03:37,200
and what some of the takeaways i hope

91
00:03:37,200 --> 00:03:40,480
are or that you folks learn how to under

92
00:03:40,480 --> 00:03:41,840
like identify

93
00:03:41,840 --> 00:03:43,120
these ports when you look at them on a

94
00:03:43,120 --> 00:03:45,280
pcb and also understand

95
00:03:45,280 --> 00:03:48,480
kind of the core components that make up

96
00:03:48,480 --> 00:03:51,360
how a hardware debugger works so the use

97
00:03:51,360 --> 00:03:52,239
case being you know

98
00:03:52,239 --> 00:03:53,519
if you plug in all your tools and you

99
00:03:53,519 --> 00:03:54,959
hit the button and maybe it doesn't

100
00:03:54,959 --> 00:03:56,000
immediately work

101
00:03:56,000 --> 00:03:57,920
i'm hoping that after this you'll have

102
00:03:57,920 --> 00:03:59,439
an idea of where to go

103
00:03:59,439 --> 00:04:01,840
to figure out maybe how to tweak things

104
00:04:01,840 --> 00:04:03,200
to to get things to work properly

105
00:04:03,200 --> 00:04:04,400
because anyone that's tried to use you

106
00:04:04,400 --> 00:04:05,599
know open ocd

107
00:04:05,599 --> 00:04:08,560
or any kind of jtag software you know

108
00:04:08,560 --> 00:04:09,760
that sometimes there are quirks

109
00:04:09,760 --> 00:04:11,280
sometimes it works sometimes it doesn't

110
00:04:11,280 --> 00:04:11,920
and

111
00:04:11,920 --> 00:04:13,200
it's kind of hard to get down in the

112
00:04:13,200 --> 00:04:14,560
weeds and tweak things and figure out

113
00:04:14,560 --> 00:04:15,920
how to make it work for your particular

114
00:04:15,920 --> 00:04:16,880
target

115
00:04:16,880 --> 00:04:18,639
and so we're going to go through how to

116
00:04:18,639 --> 00:04:20,720
use you know openocd and your jtag to

117
00:04:20,720 --> 00:04:22,000
look at some of these ports

118
00:04:22,000 --> 00:04:24,080
and with the ultimate end goal of

119
00:04:24,080 --> 00:04:25,600
pulling firmware off of them

120
00:04:25,600 --> 00:04:27,360
uh reflashing that and then even doing

121
00:04:27,360 --> 00:04:29,040
you know single step debugging through

122
00:04:29,040 --> 00:04:31,520
gdp

123
00:04:33,520 --> 00:04:35,680
so the first platform we're going to

124
00:04:35,680 --> 00:04:37,120
take a look at is

125
00:04:37,120 --> 00:04:39,040
an xbox one controller we posted a link

126
00:04:39,040 --> 00:04:40,479
to that up on the

127
00:04:40,479 --> 00:04:42,720
hackaday i o page and the goal for this

128
00:04:42,720 --> 00:04:44,000
we want to extract ram

129
00:04:44,000 --> 00:04:46,479
flash and rewrite that flash and we'll

130
00:04:46,479 --> 00:04:48,000
talk about what protocols this target

131
00:04:48,000 --> 00:04:49,280
uses later on

132
00:04:49,280 --> 00:04:52,560
the second platform if we get a chance

133
00:04:52,560 --> 00:04:55,520
to look at it is let me move my i was

134
00:04:55,520 --> 00:04:57,280
asked to move my video up

135
00:04:57,280 --> 00:05:00,400
is that better i can make it smaller too

136
00:05:00,400 --> 00:05:03,520
um the second platform is this ssd and

137
00:05:03,520 --> 00:05:04,560
the goal of that is going to be to

138
00:05:04,560 --> 00:05:06,800
identify the jtag pins extract ram via

139
00:05:06,800 --> 00:05:07,840
jtag

140
00:05:07,840 --> 00:05:09,199
look for any data of interest in that

141
00:05:09,199 --> 00:05:10,400
dump and then take a look at how this

142
00:05:10,400 --> 00:05:11,520
thing behaves

143
00:05:11,520 --> 00:05:13,280
when you issue certain reset commands

144
00:05:13,280 --> 00:05:14,240
because it actually has some pretty

145
00:05:14,240 --> 00:05:17,520
interesting features in it as well

146
00:05:18,880 --> 00:05:20,800
and so this first platform this xbox one

147
00:05:20,800 --> 00:05:22,080
controller i'm going to flip over to the

148
00:05:22,080 --> 00:05:23,600
hardware view real quick for those of

149
00:05:23,600 --> 00:05:25,120
you that have one or those who that

150
00:05:25,120 --> 00:05:25,520
don't

151
00:05:25,520 --> 00:05:27,919
you can follow along here so we've got

152
00:05:27,919 --> 00:05:29,680
this xbox one controller

153
00:05:29,680 --> 00:05:32,000
now as you can see we've got you know a

154
00:05:32,000 --> 00:05:33,280
couple of

155
00:05:33,280 --> 00:05:35,360
epoxy blobs here probably covering the

156
00:05:35,360 --> 00:05:36,639
main cpu

157
00:05:36,639 --> 00:05:38,560
if you look at it closely you can see

158
00:05:38,560 --> 00:05:39,840
that there is a

159
00:05:39,840 --> 00:05:42,240
debug header right here and i've got

160
00:05:42,240 --> 00:05:43,039
some

161
00:05:43,039 --> 00:05:46,240
uh header pins soldered to that and

162
00:05:46,240 --> 00:05:48,320
in addition to that we've got another ic

163
00:05:48,320 --> 00:05:50,160
here we've got

164
00:05:50,160 --> 00:05:51,919
some pads for what looked to be you know

165
00:05:51,919 --> 00:05:53,759
an soi c8 chip so whether that might be

166
00:05:53,759 --> 00:05:54,960
an it could have been an additional

167
00:05:54,960 --> 00:05:56,960
eprom or something we're not sure

168
00:05:56,960 --> 00:05:59,840
there are multiple test pads throughout

169
00:05:59,840 --> 00:06:01,120
this thing that are labeled

170
00:06:01,120 --> 00:06:02,800
you know with different buttons that

171
00:06:02,800 --> 00:06:05,120
they can press or just you know tp

172
00:06:05,120 --> 00:06:08,560
and then a number um and so to give you

173
00:06:08,560 --> 00:06:10,000
a better view actually of the debug

174
00:06:10,000 --> 00:06:11,199
header i'm going to put it under the

175
00:06:11,199 --> 00:06:12,960
microscope

176
00:06:12,960 --> 00:06:16,960
and get that cable out of the way and so

177
00:06:16,960 --> 00:06:21,360
give me bear with me folks

178
00:06:21,360 --> 00:06:22,880
all right here we go yeah so here's our

179
00:06:22,880 --> 00:06:24,240
debug header let me get that in better

180
00:06:24,240 --> 00:06:26,240
focus

181
00:06:26,240 --> 00:06:28,479
yeah okay so we can even see looking at

182
00:06:28,479 --> 00:06:29,360
this header

183
00:06:29,360 --> 00:06:31,039
that if you look at it mirrored it would

184
00:06:31,039 --> 00:06:32,960
say swd

185
00:06:32,960 --> 00:06:35,199
and so some of these pins on this header

186
00:06:35,199 --> 00:06:36,639
are labeled this one the first one is

187
00:06:36,639 --> 00:06:38,240
not and then we have res

188
00:06:38,240 --> 00:06:41,919
a14 a13 and 3v3

189
00:06:41,919 --> 00:06:45,360
and so those of you that have looked at

190
00:06:45,360 --> 00:06:46,800
you know this kind of hardware before

191
00:06:46,800 --> 00:06:48,560
that's kind of an immediate indicator of

192
00:06:48,560 --> 00:06:49,840
something that you might want to start

193
00:06:49,840 --> 00:06:51,039
digging into

194
00:06:51,039 --> 00:06:53,440
um and so with that let's jump back to

195
00:06:53,440 --> 00:06:54,319
the slides here

196
00:06:54,319 --> 00:06:56,080
and so after taking a look at that right

197
00:06:56,080 --> 00:06:58,319
the core components that we see

198
00:06:58,319 --> 00:07:00,479
are you know this what is probably the

199
00:07:00,479 --> 00:07:02,080
cpu that's covered in

200
00:07:02,080 --> 00:07:04,880
epoxy we've got you know a labeled usb

201
00:07:04,880 --> 00:07:06,479
connection down here

202
00:07:06,479 --> 00:07:10,000
there's this additional sound chip here

203
00:07:10,000 --> 00:07:11,520
we've got you know this debug header

204
00:07:11,520 --> 00:07:13,599
that we just took a look at and then

205
00:07:13,599 --> 00:07:16,240
these pads for um you know what could be

206
00:07:16,240 --> 00:07:18,000
an eeprom or an additional

207
00:07:18,000 --> 00:07:19,599
some additional peripheral chip that may

208
00:07:19,599 --> 00:07:21,440
be used and my hypothesis

209
00:07:21,440 --> 00:07:24,080
is that this was used for the same

210
00:07:24,080 --> 00:07:26,400
design was probably also used for xbox

211
00:07:26,400 --> 00:07:27,280
360

212
00:07:27,280 --> 00:07:29,120
where they had an additional chip that

213
00:07:29,120 --> 00:07:30,240
would actually issue a challenge

214
00:07:30,240 --> 00:07:31,599
response over usb

215
00:07:31,599 --> 00:07:34,800
to authenticate with the xbox so with

216
00:07:34,800 --> 00:07:36,639
that

217
00:07:36,639 --> 00:07:38,479
um you know what can we infer from

218
00:07:38,479 --> 00:07:40,000
taking a look at this pcb well we don't

219
00:07:40,000 --> 00:07:41,120
know what the cpu is

220
00:07:41,120 --> 00:07:43,039
right because it's covered in this epoxy

221
00:07:43,039 --> 00:07:45,440
so we're already kind of in the dark

222
00:07:45,440 --> 00:07:46,800
which really isn't where we want to be

223
00:07:46,800 --> 00:07:48,240
as reverse engineers right you at least

224
00:07:48,240 --> 00:07:49,360
want to find

225
00:07:49,360 --> 00:07:50,960
a you know a part number or something

226
00:07:50,960 --> 00:07:52,720
you google and grab a data sheet but

227
00:07:52,720 --> 00:07:55,520
we're kind of already deep in the woods

228
00:07:55,520 --> 00:07:56,240
here

229
00:07:56,240 --> 00:07:59,120
um that ak-495 chip is actually an audio

230
00:07:59,120 --> 00:08:00,000
processing chip

231
00:08:00,000 --> 00:08:01,759
and so we'll go back real quick that's

232
00:08:01,759 --> 00:08:03,440
uh this chip right here

233
00:08:03,440 --> 00:08:05,199
and you know when you're looking at a

234
00:08:05,199 --> 00:08:06,960
pcb like this it's kind of easy

235
00:08:06,960 --> 00:08:08,560
or it can be easy to infer you know

236
00:08:08,560 --> 00:08:10,400
functionality based on the location

237
00:08:10,400 --> 00:08:12,560
on whatever the target is right so we

238
00:08:12,560 --> 00:08:14,400
have the headphone jack right here

239
00:08:14,400 --> 00:08:16,240
and then right next to that we have this

240
00:08:16,240 --> 00:08:18,160
audio amplification chip

241
00:08:18,160 --> 00:08:20,240
and so as i said before that other pad

242
00:08:20,240 --> 00:08:22,639
or set of pads is likely left over

243
00:08:22,639 --> 00:08:24,560
from you know the design for the xbox

244
00:08:24,560 --> 00:08:26,080
360 controller most likely

245
00:08:26,080 --> 00:08:28,080
from the same brand that was used for

246
00:08:28,080 --> 00:08:30,800
this external authentication i see

247
00:08:30,800 --> 00:08:33,039
and so this debug header that we

248
00:08:33,039 --> 00:08:35,200
identified this guy right here

249
00:08:35,200 --> 00:08:37,440
is probably our best bet right for

250
00:08:37,440 --> 00:08:38,559
learning more

251
00:08:38,559 --> 00:08:40,559
about you know how this target works or

252
00:08:40,559 --> 00:08:43,760
what components it might be used

253
00:08:45,519 --> 00:08:47,600
all right so if you know we can examine

254
00:08:47,600 --> 00:08:49,360
we examine those header pins

255
00:08:49,360 --> 00:08:51,519
and what can we determine about those

256
00:08:51,519 --> 00:08:52,399
from

257
00:08:52,399 --> 00:08:53,920
the silk screen right we looked at it we

258
00:08:53,920 --> 00:08:55,760
saw that one of them was labeled 3v3

259
00:08:55,760 --> 00:08:57,600
that's probably voltage one of them was

260
00:08:57,600 --> 00:08:59,839
labeled res there's a really good chance

261
00:08:59,839 --> 00:09:00,720
that that

262
00:09:00,720 --> 00:09:03,519
is going to be used for a reset line

263
00:09:03,519 --> 00:09:05,120
because it's pretty often when you have

264
00:09:05,120 --> 00:09:06,720
you know hardware level debugging you're

265
00:09:06,720 --> 00:09:08,959
going to have a hard reset line

266
00:09:08,959 --> 00:09:10,240
somewhere near the pins that you're

267
00:09:10,240 --> 00:09:12,080
using for that and so

268
00:09:12,080 --> 00:09:14,240
we can take a look at what this device

269
00:09:14,240 --> 00:09:16,160
looks like when we actually

270
00:09:16,160 --> 00:09:18,240
plug it in to the pi so let's do that

271
00:09:18,240 --> 00:09:20,720
really quick

272
00:09:20,839 --> 00:09:23,200
so

273
00:09:23,200 --> 00:09:25,120
i'm gonna go to uh terminal on the

274
00:09:25,120 --> 00:09:27,040
raspberry pi here

275
00:09:27,040 --> 00:09:29,519
and we're just gonna run d message and

276
00:09:29,519 --> 00:09:32,320
plug this controller in

277
00:09:32,320 --> 00:09:36,800
so we plug it in

278
00:09:36,800 --> 00:09:39,680
okay cool so as one would expect right

279
00:09:39,680 --> 00:09:41,760
it just shows up as a standard usb

280
00:09:41,760 --> 00:09:42,480
device

281
00:09:42,480 --> 00:09:46,880
um typical hid device you see we've got

282
00:09:46,880 --> 00:09:49,279
serial number manufacturer string and

283
00:09:49,279 --> 00:09:50,560
then

284
00:09:50,560 --> 00:09:52,080
the product description as well you'll

285
00:09:52,080 --> 00:09:53,440
notice the manufacturer string is a

286
00:09:53,440 --> 00:09:54,959
little messed up and we'll explain why

287
00:09:54,959 --> 00:09:57,120
that is a little later

288
00:09:57,120 --> 00:09:59,680
and so

289
00:10:00,800 --> 00:10:02,480
matt this is actually a custom image

290
00:10:02,480 --> 00:10:04,480
that i put together uh for the raspberry

291
00:10:04,480 --> 00:10:05,200
pi

292
00:10:05,200 --> 00:10:08,240
that presents itself as a present itself

293
00:10:08,240 --> 00:10:09,519
as an ethernet device to your host and

294
00:10:09,519 --> 00:10:11,600
then you can go through and access these

295
00:10:11,600 --> 00:10:12,320
tools

296
00:10:12,320 --> 00:10:13,680
from there but this is the same thing

297
00:10:13,680 --> 00:10:15,680
you would have if you were at a

298
00:10:15,680 --> 00:10:17,920
uh just a terminal on the pi but having

299
00:10:17,920 --> 00:10:19,519
it accessible through the browser makes

300
00:10:19,519 --> 00:10:22,160
life a little easy

301
00:10:22,640 --> 00:10:26,480
and so if we jump back

302
00:10:29,120 --> 00:10:32,000
so if we look at the voltage levels

303
00:10:32,000 --> 00:10:33,040
across

304
00:10:33,040 --> 00:10:35,279
uh the five pins that we have we have

305
00:10:35,279 --> 00:10:36,880
you know the first pin which we assume

306
00:10:36,880 --> 00:10:38,720
is probably ground right is zero volts

307
00:10:38,720 --> 00:10:41,680
the next pin which is the reset line is

308
00:10:41,680 --> 00:10:43,040
3.3 volts

309
00:10:43,040 --> 00:10:46,240
the third pin in the list is floating

310
00:10:46,240 --> 00:10:48,720
at 0.1 volts the third is at 3.3 and the

311
00:10:48,720 --> 00:10:50,560
fourth is also at 3.3

312
00:10:50,560 --> 00:10:52,000
which makes sense right because it was

313
00:10:52,000 --> 00:10:55,600
labeled 3.3 volts

314
00:10:57,040 --> 00:10:59,120
and so when we're looking at something

315
00:10:59,120 --> 00:11:00,720
like this right you want to always make

316
00:11:00,720 --> 00:11:02,000
sure that you're aware of what your

317
00:11:02,000 --> 00:11:03,120
logic levels are

318
00:11:03,120 --> 00:11:04,640
and the logic levels of whatever it is

319
00:11:04,640 --> 00:11:05,839
you're trying to interface with it and

320
00:11:05,839 --> 00:11:06,240
so

321
00:11:06,240 --> 00:11:07,519
we're going to be interfacing this

322
00:11:07,519 --> 00:11:09,360
controller with

323
00:11:09,360 --> 00:11:12,800
the pi they share the same logic level

324
00:11:12,800 --> 00:11:14,160
so they're both the 3.3

325
00:11:14,160 --> 00:11:16,000
so we don't have to worry about any kind

326
00:11:16,000 --> 00:11:19,519
of level shifting or anything like that

327
00:11:20,560 --> 00:11:22,800
and so if we look at these pins if we

328
00:11:22,800 --> 00:11:23,600
monitor

329
00:11:23,600 --> 00:11:25,360
monitor them on boot with a logic

330
00:11:25,360 --> 00:11:26,640
analyzer there's

331
00:11:26,640 --> 00:11:28,480
no data going across them they just

332
00:11:28,480 --> 00:11:30,240
remain at the same voltage and so

333
00:11:30,240 --> 00:11:31,519
the reason we would want to check

334
00:11:31,519 --> 00:11:32,959
something like that is because it could

335
00:11:32,959 --> 00:11:34,560
be you know potentially a uart or some

336
00:11:34,560 --> 00:11:35,360
other kind of

337
00:11:35,360 --> 00:11:38,399
you know debug console

338
00:11:40,000 --> 00:11:41,120
and so you know how does this thing

339
00:11:41,120 --> 00:11:43,120
present itself we've got here's the same

340
00:11:43,120 --> 00:11:44,399
d message output

341
00:11:44,399 --> 00:11:47,440
and so with that that header that we

342
00:11:47,440 --> 00:11:48,720
looked at it's not uart

343
00:11:48,720 --> 00:11:50,399
because we don't see or it could be uart

344
00:11:50,399 --> 00:11:51,760
but we're going to assume that it's

345
00:11:51,760 --> 00:11:52,720
probably not

346
00:11:52,720 --> 00:11:54,880
it's obviously not spy we don't see like

347
00:11:54,880 --> 00:11:56,000
any clock lines or anything

348
00:11:56,000 --> 00:11:58,320
like that and the interface is pretty

349
00:11:58,320 --> 00:12:00,000
much completely inactive so what could

350
00:12:00,000 --> 00:12:00,720
it be

351
00:12:00,720 --> 00:12:02,160
it very well could be you know a two

352
00:12:02,160 --> 00:12:04,160
wire interface called single wire debug

353
00:12:04,160 --> 00:12:06,160
and spoiler alert that's exactly what it

354
00:12:06,160 --> 00:12:08,160
is

355
00:12:08,160 --> 00:12:09,760
and so what we want to cover with the

356
00:12:09,760 --> 00:12:11,200
single wire debugging section is kind of

357
00:12:11,200 --> 00:12:12,399
learn what that is

358
00:12:12,399 --> 00:12:14,320
learn how to identify it we want to

359
00:12:14,320 --> 00:12:16,160
learn how to interface with it via open

360
00:12:16,160 --> 00:12:17,040
ocd

361
00:12:17,040 --> 00:12:20,320
and also kind of how to once we have the

362
00:12:20,320 --> 00:12:22,000
single wire debugging capability if we

363
00:12:22,000 --> 00:12:24,079
still don't understand everything about

364
00:12:24,079 --> 00:12:27,360
the target cpu learn how to

365
00:12:27,360 --> 00:12:30,240
identify what the cpu part number might

366
00:12:30,240 --> 00:12:30,560
be

367
00:12:30,560 --> 00:12:33,279
via memory reads and writes and so once

368
00:12:33,279 --> 00:12:34,399
we have that we're going to try to

369
00:12:34,399 --> 00:12:35,839
extract firmware from it and see if we

370
00:12:35,839 --> 00:12:37,360
can modify and understand this new

371
00:12:37,360 --> 00:12:38,320
firmware

372
00:12:38,320 --> 00:12:40,399
and the last thing if we get enough time

373
00:12:40,399 --> 00:12:42,240
to go through it is to take a look at

374
00:12:42,240 --> 00:12:44,240
dfu mode and how we might interact with

375
00:12:44,240 --> 00:12:46,320
that

376
00:12:46,320 --> 00:12:48,480
so to kind of jump into this single wire

377
00:12:48,480 --> 00:12:49,680
debugging is

378
00:12:49,680 --> 00:12:52,399
a debug interface that's specified by

379
00:12:52,399 --> 00:12:54,399
the arm debug interface specification or

380
00:12:54,399 --> 00:12:54,639
the

381
00:12:54,639 --> 00:12:56,800
the adi and some of you may be familiar

382
00:12:56,800 --> 00:12:57,920
with that it's a pretty

383
00:12:57,920 --> 00:12:59,920
excellent document that walks through

384
00:12:59,920 --> 00:13:02,000
how arm specifies these various

385
00:13:02,000 --> 00:13:04,480
debug peripherals to work and so what

386
00:13:04,480 --> 00:13:05,920
single wire debugging does is it

387
00:13:05,920 --> 00:13:07,839
interfaces with something called a debug

388
00:13:07,839 --> 00:13:08,800
access port

389
00:13:08,800 --> 00:13:10,720
and a lot of these terms kind of get

390
00:13:10,720 --> 00:13:12,160
muddled together and i'm hoping through

391
00:13:12,160 --> 00:13:13,600
this talk we'll be able to kind of clear

392
00:13:13,600 --> 00:13:15,120
up what these different terms mean and

393
00:13:15,120 --> 00:13:16,320
what they all do

394
00:13:16,320 --> 00:13:18,800
and so by accessing this debug access

395
00:13:18,800 --> 00:13:19,600
port

396
00:13:19,600 --> 00:13:23,040
access ports or aps are read to and

397
00:13:23,040 --> 00:13:24,079
written from

398
00:13:24,079 --> 00:13:26,800
in order to actually read and write

399
00:13:26,800 --> 00:13:28,480
memory or to interact with whatever

400
00:13:28,480 --> 00:13:30,320
internal peripheral you're trying to

401
00:13:30,320 --> 00:13:32,079
look at on the device whether that be

402
00:13:32,079 --> 00:13:34,639
for you know system level debugging or

403
00:13:34,639 --> 00:13:35,600
you know you're just trying to read and

404
00:13:35,600 --> 00:13:36,560
write memory or you're trying to

405
00:13:36,560 --> 00:13:38,160
interact with some other peripheral

406
00:13:38,160 --> 00:13:40,320
like coresight or something like that

407
00:13:40,320 --> 00:13:42,880
and so you know we have daps

408
00:13:42,880 --> 00:13:44,959
dps which are data ports aps which are

409
00:13:44,959 --> 00:13:45,920
access ports

410
00:13:45,920 --> 00:13:48,000
and all of these things are kind of

411
00:13:48,000 --> 00:13:49,600
connected to one another and the way in

412
00:13:49,600 --> 00:13:50,560
which they're connected

413
00:13:50,560 --> 00:13:52,880
is defined in the arm debug interface

414
00:13:52,880 --> 00:13:54,480
specification so if you just google you

415
00:13:54,480 --> 00:13:55,040
know

416
00:13:55,040 --> 00:13:57,279
arm adi you'll be able to find the

417
00:13:57,279 --> 00:13:58,720
latest version of their

418
00:13:58,720 --> 00:14:00,320
interface specification and that's

419
00:14:00,320 --> 00:14:02,720
extremely useful for getting a handle on

420
00:14:02,720 --> 00:14:06,079
these things at kind of a higher level

421
00:14:06,800 --> 00:14:10,160
and so the adi is what you know

422
00:14:10,160 --> 00:14:11,440
ultimately provides us

423
00:14:11,440 --> 00:14:13,519
access to these kinds of debug ports and

424
00:14:13,519 --> 00:14:14,959
so if you're familiar with jtag which

425
00:14:14,959 --> 00:14:16,000
kind of links the different

426
00:14:16,000 --> 00:14:18,079
tabs together or test access ports

427
00:14:18,079 --> 00:14:19,680
single wire debug kind of abstracts

428
00:14:19,680 --> 00:14:21,199
those out into different components like

429
00:14:21,199 --> 00:14:23,120
we said before we've got the debug port

430
00:14:23,120 --> 00:14:24,800
the debug access port and the access

431
00:14:24,800 --> 00:14:26,880
port and so

432
00:14:26,880 --> 00:14:30,000
these things are defined in the adi

433
00:14:30,000 --> 00:14:32,000
and you can interact with them through

434
00:14:32,000 --> 00:14:33,920
multiple kind of physical mediums right

435
00:14:33,920 --> 00:14:34,240
so

436
00:14:34,240 --> 00:14:36,560
single wire debug is just the physical

437
00:14:36,560 --> 00:14:37,839
interface that we use

438
00:14:37,839 --> 00:14:40,959
to interact with the debug access port

439
00:14:40,959 --> 00:14:42,000
which in turn

440
00:14:42,000 --> 00:14:44,000
interacts with the debug port and the

441
00:14:44,000 --> 00:14:45,440
various access ports

442
00:14:45,440 --> 00:14:47,519
and again i know that these these terms

443
00:14:47,519 --> 00:14:48,800
kind of get smashed together when you

444
00:14:48,800 --> 00:14:50,240
talk about it but we have some diagrams

445
00:14:50,240 --> 00:14:51,279
later that i think are going to help

446
00:14:51,279 --> 00:14:53,199
clear this up a little bit

447
00:14:53,199 --> 00:14:56,800
and so the reason i like to go over this

448
00:14:56,800 --> 00:14:57,920
kind of stuff is because when you're

449
00:14:57,920 --> 00:14:59,360
reverse engineering something you kind

450
00:14:59,360 --> 00:15:00,560
of have to break it down

451
00:15:00,560 --> 00:15:02,959
into the fundamental building blocks

452
00:15:02,959 --> 00:15:03,839
right because

453
00:15:03,839 --> 00:15:05,600
that's all you have we don't know who

454
00:15:05,600 --> 00:15:07,680
made this chip we don't know

455
00:15:07,680 --> 00:15:08,880
how they interfaced with it we don't

456
00:15:08,880 --> 00:15:10,720
know really anything except for

457
00:15:10,720 --> 00:15:12,320
that this might be a single wire to bug

458
00:15:12,320 --> 00:15:14,639
port and in order to understand how to

459
00:15:14,639 --> 00:15:16,240
interface with it from kind of a black

460
00:15:16,240 --> 00:15:17,279
box perspective

461
00:15:17,279 --> 00:15:18,720
it's important to understand you know

462
00:15:18,720 --> 00:15:20,399
how the core pieces work

463
00:15:20,399 --> 00:15:22,560
and so starting with that is the dap

464
00:15:22,560 --> 00:15:24,399
which is the externally facing

465
00:15:24,399 --> 00:15:25,279
peripheral

466
00:15:25,279 --> 00:15:27,199
right that's accessed via a single wire

467
00:15:27,199 --> 00:15:29,600
debug or jtag or serial jtag like we

468
00:15:29,600 --> 00:15:30,399
talked about

469
00:15:30,399 --> 00:15:32,800
in the last slide and so that consists

470
00:15:32,800 --> 00:15:34,480
of two parts you've got the debug port

471
00:15:34,480 --> 00:15:35,680
and the access port

472
00:15:35,680 --> 00:15:38,639
the debug port is by default always

473
00:15:38,639 --> 00:15:39,600
supposed to be there

474
00:15:39,600 --> 00:15:42,320
so the debug port is kind of your your

475
00:15:42,320 --> 00:15:43,920
ground truth

476
00:15:43,920 --> 00:15:47,120
and so aps or access ports are

477
00:15:47,120 --> 00:15:49,120
what define all the different debug

478
00:15:49,120 --> 00:15:50,959
features and functionality that

479
00:15:50,959 --> 00:15:53,199
one of these chips might have so if

480
00:15:53,199 --> 00:15:54,720
you've ever heard of you know coresight

481
00:15:54,720 --> 00:15:55,839
or

482
00:15:55,839 --> 00:15:57,600
any of the tracing features that a lot

483
00:15:57,600 --> 00:15:59,440
of arm chips have those are interacted

484
00:15:59,440 --> 00:16:00,160
with through

485
00:16:00,160 --> 00:16:02,639
these aps which are communicated with

486
00:16:02,639 --> 00:16:04,800
via these physical mediums like single

487
00:16:04,800 --> 00:16:07,199
wire to bug or jtag etc

488
00:16:07,199 --> 00:16:08,800
and so when you're doing single wire to

489
00:16:08,800 --> 00:16:10,480
bug every transaction or every little

490
00:16:10,480 --> 00:16:12,160
thing that occurs is going to be

491
00:16:12,160 --> 00:16:15,440
sent to either the debug port the dp

492
00:16:15,440 --> 00:16:19,440
or an access port in ap

493
00:16:19,680 --> 00:16:21,199
and so let's talk about the debug port

494
00:16:21,199 --> 00:16:22,959
right so this dp

495
00:16:22,959 --> 00:16:25,120
is contains various registers that you

496
00:16:25,120 --> 00:16:26,800
use to kind of monitor system state you

497
00:16:26,800 --> 00:16:27,839
can use it to get

498
00:16:27,839 --> 00:16:30,240
id information about the cpu and this is

499
00:16:30,240 --> 00:16:32,160
kind of the piece that you always know

500
00:16:32,160 --> 00:16:33,680
is supposed to be there this is what's

501
00:16:33,680 --> 00:16:35,680
defined in the spec and so

502
00:16:35,680 --> 00:16:38,560
with the dp you can actually read to and

503
00:16:38,560 --> 00:16:40,000
write from registers that are used to

504
00:16:40,000 --> 00:16:41,279
actually interact with

505
00:16:41,279 --> 00:16:44,320
the other aps and so

506
00:16:44,320 --> 00:16:46,800
this is all again independent of you

507
00:16:46,800 --> 00:16:48,720
know single wire debug or jtag or

508
00:16:48,720 --> 00:16:50,160
whatever physical medium you're using

509
00:16:50,160 --> 00:16:51,920
but this is kind of the first

510
00:16:51,920 --> 00:16:54,399
thing that you start talking to when you

511
00:16:54,399 --> 00:16:55,920
go to access something

512
00:16:55,920 --> 00:16:58,240
at the kind of hardware level for

513
00:16:58,240 --> 00:17:00,800
debugging

514
00:17:01,199 --> 00:17:04,000
and so access ports are really where

515
00:17:04,000 --> 00:17:05,280
kind of the meat is with hardware

516
00:17:05,280 --> 00:17:06,799
debugging that's where we can get access

517
00:17:06,799 --> 00:17:08,480
to memory that's where we get access to

518
00:17:08,480 --> 00:17:09,839
external peripherals and things like

519
00:17:09,839 --> 00:17:10,640
that

520
00:17:10,640 --> 00:17:13,039
and so these are accessed through the dp

521
00:17:13,039 --> 00:17:15,839
as we mentioned before

522
00:17:15,839 --> 00:17:18,240
dp is debug port it's essentially a

523
00:17:18,240 --> 00:17:19,599
register that's written to

524
00:17:19,599 --> 00:17:22,319
uh the debug port in the adi is like a

525
00:17:22,319 --> 00:17:24,319
bank of registers that is written to

526
00:17:24,319 --> 00:17:25,919
yeah so internally it may look like a

527
00:17:25,919 --> 00:17:27,359
bus but really it's gonna look

528
00:17:27,359 --> 00:17:30,080
more like a memory bank it does not

529
00:17:30,080 --> 00:17:30,720
quite

530
00:17:30,720 --> 00:17:32,080
one of the questions is does it act as a

531
00:17:32,080 --> 00:17:34,559
router it doesn't quite act as a router

532
00:17:34,559 --> 00:17:37,520
um you write to it exactly what you want

533
00:17:37,520 --> 00:17:39,120
to address and it will fetch that

534
00:17:39,120 --> 00:17:41,039
for you so it doesn't do it

535
00:17:41,039 --> 00:17:42,320
automatically you still have to tell it

536
00:17:42,320 --> 00:17:44,080
what you want so in a sense it does

537
00:17:44,080 --> 00:17:45,360
route data

538
00:17:45,360 --> 00:17:47,919
but as we'll learn later the the packet

539
00:17:47,919 --> 00:17:49,360
structure for single wire debug lets you

540
00:17:49,360 --> 00:17:51,120
access an ap directly so you don't have

541
00:17:51,120 --> 00:17:53,039
to go through the dp

542
00:17:53,039 --> 00:17:54,720
and so when you're looking at an access

543
00:17:54,720 --> 00:17:56,960
port there's one register that's always

544
00:17:56,960 --> 00:17:58,559
used to identify the ap

545
00:17:58,559 --> 00:18:00,160
type and you know we're talking about

546
00:18:00,160 --> 00:18:01,440
registers we're talking about access

547
00:18:01,440 --> 00:18:02,799
ports and you haven't even seen these

548
00:18:02,799 --> 00:18:04,960
things yet right these are all very

549
00:18:04,960 --> 00:18:07,280
kind of higher level ephemeral things

550
00:18:07,280 --> 00:18:08,880
but what you need to imagine them as is

551
00:18:08,880 --> 00:18:10,720
just kind of like banks of memory or

552
00:18:10,720 --> 00:18:12,480
banks of registers that can be

553
00:18:12,480 --> 00:18:14,559
read to or written from in order to

554
00:18:14,559 --> 00:18:16,320
access various things that are internal

555
00:18:16,320 --> 00:18:17,679
to the cpu

556
00:18:17,679 --> 00:18:19,760
and so there's two types of aps that are

557
00:18:19,760 --> 00:18:21,360
defined in the adi you've got you know

558
00:18:21,360 --> 00:18:23,280
memory aps which are used to access

559
00:18:23,280 --> 00:18:25,280
various internal memory buses and so

560
00:18:25,280 --> 00:18:26,880
those of you that are familiar with you

561
00:18:26,880 --> 00:18:29,039
know vlsi things like that

562
00:18:29,039 --> 00:18:31,760
uh are you know kind of understand that

563
00:18:31,760 --> 00:18:33,440
there are lots of internal buses that

564
00:18:33,440 --> 00:18:34,240
are

565
00:18:34,240 --> 00:18:36,000
being used within your cpu and this will

566
00:18:36,000 --> 00:18:37,679
let you kind of read and write to those

567
00:18:37,679 --> 00:18:40,559
and based on what capabilities the chip

568
00:18:40,559 --> 00:18:41,200
provides

569
00:18:41,200 --> 00:18:43,200
you can use you know these various

570
00:18:43,200 --> 00:18:44,960
memory aps that are presented

571
00:18:44,960 --> 00:18:47,440
to interact with these this debug

572
00:18:47,440 --> 00:18:49,200
functionality excuse me

573
00:18:49,200 --> 00:18:51,520
and then there's the jtag access port

574
00:18:51,520 --> 00:18:53,200
which is used for kind of traditional

575
00:18:53,200 --> 00:18:54,160
boundary scan

576
00:18:54,160 --> 00:18:56,799
or you know standard jtag uses so things

577
00:18:56,799 --> 00:18:58,000
for

578
00:18:58,000 --> 00:19:01,840
querying gpio pins things like that

579
00:19:02,240 --> 00:19:04,640
and so as we said before the the memory

580
00:19:04,640 --> 00:19:05,760
access port

581
00:19:05,760 --> 00:19:07,360
kind of gives you a window into some

582
00:19:07,360 --> 00:19:09,360
kind of abstract memory system or memory

583
00:19:09,360 --> 00:19:10,000
bus whether

584
00:19:10,000 --> 00:19:11,840
that is something that lets you you know

585
00:19:11,840 --> 00:19:13,600
read and write direct from

586
00:19:13,600 --> 00:19:15,360
directly from ram or something that's

587
00:19:15,360 --> 00:19:17,039
used to kind of interact with

588
00:19:17,039 --> 00:19:19,039
the debug unit of the processor and so

589
00:19:19,039 --> 00:19:20,480
this is just kind of an overarching

590
00:19:20,480 --> 00:19:21,280
category

591
00:19:21,280 --> 00:19:23,120
that's used to describe these various

592
00:19:23,120 --> 00:19:24,960
access ports that you talk to

593
00:19:24,960 --> 00:19:26,559
through you know single wire debug or

594
00:19:26,559 --> 00:19:29,039
jtag or whatever your mechanism is

595
00:19:29,039 --> 00:19:31,520
but at their core these mem aps are used

596
00:19:31,520 --> 00:19:33,039
to interact with the memory of the

597
00:19:33,039 --> 00:19:35,840
target cpu

598
00:19:35,919 --> 00:19:37,840
and so you know we've got these aps

599
00:19:37,840 --> 00:19:40,160
we've got these dps we've got the dap

600
00:19:40,160 --> 00:19:41,360
and then we've got swd

601
00:19:41,360 --> 00:19:43,200
we've got so many acronyms here it's out

602
00:19:43,200 --> 00:19:45,039
of this world but how do we you know

603
00:19:45,039 --> 00:19:45,600
learn

604
00:19:45,600 --> 00:19:46,799
when we're taking a look at like an

605
00:19:46,799 --> 00:19:48,320
unknown let's say we're looking at an

606
00:19:48,320 --> 00:19:50,080
unknown port and we can

607
00:19:50,080 --> 00:19:52,080
you know read from these dps and these

608
00:19:52,080 --> 00:19:53,520
aps we're going to learn how to do that

609
00:19:53,520 --> 00:19:54,240
later

610
00:19:54,240 --> 00:19:56,480
but how do you know what data is

611
00:19:56,480 --> 00:19:57,679
contained within there

612
00:19:57,679 --> 00:19:59,840
so each of these these dp's and these

613
00:19:59,840 --> 00:20:02,000
aps will point to something called a rom

614
00:20:02,000 --> 00:20:02,559
table

615
00:20:02,559 --> 00:20:05,440
and this rom table has information about

616
00:20:05,440 --> 00:20:06,960
whatever debug component you're talking

617
00:20:06,960 --> 00:20:07,600
to

618
00:20:07,600 --> 00:20:09,840
and so that is what actually connects to

619
00:20:09,840 --> 00:20:11,760
that internal bus that's pointed to by

620
00:20:11,760 --> 00:20:15,039
your memory ap and so

621
00:20:15,039 --> 00:20:19,039
each of these aps and dps

622
00:20:19,039 --> 00:20:21,039
have dedicated registers that point to

623
00:20:21,039 --> 00:20:22,960
these rom tables that are used

624
00:20:22,960 --> 00:20:24,720
to identify you know what their type is

625
00:20:24,720 --> 00:20:26,240
and what they're used for

626
00:20:26,240 --> 00:20:27,679
and you know i know this is a lot of

627
00:20:27,679 --> 00:20:29,039
we're throwing a lot of acronyms and a

628
00:20:29,039 --> 00:20:31,120
lot of definitions out so if anybody has

629
00:20:31,120 --> 00:20:32,640
questions toss them in the chat and

630
00:20:32,640 --> 00:20:35,919
we'll do our best to get to them

631
00:20:35,919 --> 00:20:37,919
so yeah we've got these three acronyms

632
00:20:37,919 --> 00:20:39,120
right dap app

633
00:20:39,120 --> 00:20:42,559
dp the the dap is kind of the entire

634
00:20:42,559 --> 00:20:44,320
overarching debug interface if you think

635
00:20:44,320 --> 00:20:46,480
about it the aps

636
00:20:46,480 --> 00:20:48,400
can provide access to like various

637
00:20:48,400 --> 00:20:50,000
peripherals or memory

638
00:20:50,000 --> 00:20:52,720
and internal cpu buses based on how

639
00:20:52,720 --> 00:20:54,000
they're designed and how and whether or

640
00:20:54,000 --> 00:20:55,520
not they're exposed

641
00:20:55,520 --> 00:20:59,600
and the dp is the way that you access

642
00:20:59,600 --> 00:21:01,200
these things you know initially it's

643
00:21:01,200 --> 00:21:02,640
kind of the standard way it's kind of

644
00:21:02,640 --> 00:21:04,240
the first step in the chain

645
00:21:04,240 --> 00:21:06,320
to access these various peripherals and

646
00:21:06,320 --> 00:21:08,480
buses

647
00:21:08,480 --> 00:21:11,120
and so finally what this ultimately ends

648
00:21:11,120 --> 00:21:11,840
up looking like

649
00:21:11,840 --> 00:21:13,440
is we've got this massive thing right

650
00:21:13,440 --> 00:21:15,200
here this is the debug access port right

651
00:21:15,200 --> 00:21:16,240
and we can see

652
00:21:16,240 --> 00:21:18,159
that it contains the debug port which is

653
00:21:18,159 --> 00:21:20,159
the first thing we read to and write to

654
00:21:20,159 --> 00:21:23,200
the ap access right which talks to our

655
00:21:23,200 --> 00:21:24,640
memory aps

656
00:21:24,640 --> 00:21:26,720
and then those are what in this part to

657
00:21:26,720 --> 00:21:28,320
us right is kind of done

658
00:21:28,320 --> 00:21:30,000
without us needing to know anything and

659
00:21:30,000 --> 00:21:31,679
that's why

660
00:21:31,679 --> 00:21:34,559
this is all that's why this is all

661
00:21:34,559 --> 00:21:35,760
defined this way

662
00:21:35,760 --> 00:21:38,960
so is the

663
00:21:38,960 --> 00:21:44,240
video blurry for everybody or is it

664
00:21:44,240 --> 00:21:46,559
hmm

665
00:21:51,919 --> 00:21:54,880
okay i'm getting mixed signals in chat

666
00:21:54,880 --> 00:21:56,400
um i'm gonna leave in

667
00:21:56,400 --> 00:22:00,000
oh sorry matt uh the

668
00:22:00,000 --> 00:22:01,919
the big screens the larger screens seem

669
00:22:01,919 --> 00:22:03,840
to be fine uh but if you went to a

670
00:22:03,840 --> 00:22:04,559
smaller

671
00:22:04,559 --> 00:22:07,919
if you switched to i believe some other

672
00:22:07,919 --> 00:22:09,600
the other graphics that you had where

673
00:22:09,600 --> 00:22:11,440
the text is really small

674
00:22:11,440 --> 00:22:14,000
then that becomes blurry okay uh i

675
00:22:14,000 --> 00:22:14,559
believe

676
00:22:14,559 --> 00:22:16,880
uh some other discussions and talks they

677
00:22:16,880 --> 00:22:17,600
switched

678
00:22:17,600 --> 00:22:21,679
uh using the straight zoom uh video feed

679
00:22:21,679 --> 00:22:24,720
so uh if you do maybe consider that uh

680
00:22:24,720 --> 00:22:25,679
if there's more

681
00:22:25,679 --> 00:22:29,120
issues okay i can do that for the

682
00:22:29,120 --> 00:22:30,400
for the terminal stuff i'll try to do

683
00:22:30,400 --> 00:22:32,159
that and see if we can okay

684
00:22:32,159 --> 00:22:36,480
let me go back um but yeah so

685
00:22:36,480 --> 00:22:38,640
i'll i'll do what i can to make the

686
00:22:38,640 --> 00:22:40,000
terminal video a little

687
00:22:40,000 --> 00:22:43,039
less blurry when we when we get to that

688
00:22:43,039 --> 00:22:44,559
so sorry about that

689
00:22:44,559 --> 00:22:47,039
the so this is kind of the overarching

690
00:22:47,039 --> 00:22:47,919
um

691
00:22:47,919 --> 00:22:50,159
picture of what these debug ports

692
00:22:50,159 --> 00:22:51,200
actually look like

693
00:22:51,200 --> 00:22:52,640
so you've got the physical connection

694
00:22:52,640 --> 00:22:54,240
which is going to be implemented via you

695
00:22:54,240 --> 00:22:56,000
know single wire to bug or jtag or

696
00:22:56,000 --> 00:22:58,159
serial jtag whatever that might be

697
00:22:58,159 --> 00:23:00,320
that then talks to the dp which is the

698
00:23:00,320 --> 00:23:01,520
first layer

699
00:23:01,520 --> 00:23:05,039
that we can perform these ap accesses

700
00:23:05,039 --> 00:23:07,039
that we then use to kind of get access

701
00:23:07,039 --> 00:23:08,080
to memory or

702
00:23:08,080 --> 00:23:10,240
you know various debug peripherals and

703
00:23:10,240 --> 00:23:11,760
the reason this is all abstracted away

704
00:23:11,760 --> 00:23:13,679
is that for you know various cpu designs

705
00:23:13,679 --> 00:23:15,120
now all you need to understand is how to

706
00:23:15,120 --> 00:23:15,840
access

707
00:23:15,840 --> 00:23:18,320
these things right here so the debug

708
00:23:18,320 --> 00:23:19,840
port and the memory aps and that's kind

709
00:23:19,840 --> 00:23:21,039
of where

710
00:23:21,039 --> 00:23:22,880
the beauty of things you know like open

711
00:23:22,880 --> 00:23:24,400
ocd and things like that come in because

712
00:23:24,400 --> 00:23:25,039
once you

713
00:23:25,039 --> 00:23:27,520
understand how to do this on some course

714
00:23:27,520 --> 00:23:28,559
you can

715
00:23:28,559 --> 00:23:31,039
it might carry over to other processors

716
00:23:31,039 --> 00:23:32,320
and so

717
00:23:32,320 --> 00:23:35,520
the ap is accessed so we got a question

718
00:23:35,520 --> 00:23:36,640
how do we connect to an ap

719
00:23:36,640 --> 00:23:38,559
directly you connect to it through

720
00:23:38,559 --> 00:23:40,400
either this physical connection which is

721
00:23:40,400 --> 00:23:41,679
single wire to bug

722
00:23:41,679 --> 00:23:44,880
and then you address you can address the

723
00:23:44,880 --> 00:23:45,520
ap

724
00:23:45,520 --> 00:23:47,200
through packets that are sent to the

725
00:23:47,200 --> 00:23:48,960
debug port and we'll go over that what

726
00:23:48,960 --> 00:23:50,159
that package structure looks like here

727
00:23:50,159 --> 00:23:52,640
in a moment

728
00:23:52,640 --> 00:23:54,159
and so yeah we have this first layer

729
00:23:54,159 --> 00:23:55,360
physical connection which is going to be

730
00:23:55,360 --> 00:23:56,880
your jtag your single wire to bug your

731
00:23:56,880 --> 00:23:58,480
serial jtag what have you

732
00:23:58,480 --> 00:24:00,480
and then that talks to you know our

733
00:24:00,480 --> 00:24:03,200
entire overarching debug access port

734
00:24:03,200 --> 00:24:05,520
the debug port is the first stage of the

735
00:24:05,520 --> 00:24:06,400
process that's

736
00:24:06,400 --> 00:24:08,080
how we kind of identify the target

737
00:24:08,080 --> 00:24:09,840
that's how we get information about it

738
00:24:09,840 --> 00:24:12,320
and then we can through that talk to

739
00:24:12,320 --> 00:24:14,159
these memory access ports which give us

740
00:24:14,159 --> 00:24:14,960
access to

741
00:24:14,960 --> 00:24:16,840
you know external memory and internal

742
00:24:16,840 --> 00:24:18,240
peripherals

743
00:24:18,240 --> 00:24:19,760
and you know one of those things that

744
00:24:19,760 --> 00:24:21,200
will give us is the ability to bug the

745
00:24:21,200 --> 00:24:23,679
processor

746
00:24:23,840 --> 00:24:26,000
and so you know we've got this physical

747
00:24:26,000 --> 00:24:27,520
interface single wire to bug

748
00:24:27,520 --> 00:24:30,000
this is implemented with two pins which

749
00:24:30,000 --> 00:24:31,679
is kind of why it's preferred over

750
00:24:31,679 --> 00:24:33,279
jtaggery was developed

751
00:24:33,279 --> 00:24:35,200
instead of jtag you've got you know

752
00:24:35,200 --> 00:24:36,960
serial clock and then serial data

753
00:24:36,960 --> 00:24:40,080
in and out the clock pin obviously is

754
00:24:40,080 --> 00:24:42,000
used to determine when you sample data

755
00:24:42,000 --> 00:24:45,039
on the single wire to bug line

756
00:24:45,039 --> 00:24:48,720
and the uh i o pin is bi-directional so

757
00:24:48,720 --> 00:24:49,600
there's like a

758
00:24:49,600 --> 00:24:51,840
direction bit in the packet that tells

759
00:24:51,840 --> 00:24:53,200
you whether or not you need to wait for

760
00:24:53,200 --> 00:24:55,840
a reader right to occur

761
00:24:55,840 --> 00:24:58,159
and so when we send these packets to the

762
00:24:58,159 --> 00:25:00,240
dp or the dap

763
00:25:00,240 --> 00:25:01,919
it can be split up kind of into three

764
00:25:01,919 --> 00:25:04,000
parts you've got your header

765
00:25:04,000 --> 00:25:06,960
uh the response bit and then data and so

766
00:25:06,960 --> 00:25:08,480
the header actually determines the

767
00:25:08,480 --> 00:25:09,919
direction of the payload whether or not

768
00:25:09,919 --> 00:25:11,679
the data portion is going to

769
00:25:11,679 --> 00:25:15,840
the device you're coming from

770
00:25:17,440 --> 00:25:19,679
and so here's a blurry picture of what

771
00:25:19,679 --> 00:25:20,640
the package structure

772
00:25:20,640 --> 00:25:24,320
looks like the

773
00:25:24,320 --> 00:25:26,640
the header part contains you know start

774
00:25:26,640 --> 00:25:27,360
bit

775
00:25:27,360 --> 00:25:29,039
uh a bit whether or not you're accessing

776
00:25:29,039 --> 00:25:30,400
an access port or a

777
00:25:30,400 --> 00:25:32,559
data port which we just talked about um

778
00:25:32,559 --> 00:25:33,840
whether it's a reader a write

779
00:25:33,840 --> 00:25:36,400
an address bit parity bit stop bit and a

780
00:25:36,400 --> 00:25:38,559
park bit or a turn around bit

781
00:25:38,559 --> 00:25:40,960
um and then you'll get an ack from the

782
00:25:40,960 --> 00:25:42,640
target and then following that

783
00:25:42,640 --> 00:25:44,000
you get the actual data that you care

784
00:25:44,000 --> 00:25:46,960
about and so

785
00:25:46,960 --> 00:25:48,880
these are two examples of kind of a read

786
00:25:48,880 --> 00:25:50,320
and a write transfer

787
00:25:50,320 --> 00:25:52,080
the the thing to take away here is to

788
00:25:52,080 --> 00:25:53,600
understand that you know we've got

789
00:25:53,600 --> 00:25:55,279
pieces of this that are used to access

790
00:25:55,279 --> 00:25:56,000
you know the ap

791
00:25:56,000 --> 00:25:58,880
versus the dp

792
00:25:59,120 --> 00:26:01,120
and yeah the address field is uh two

793
00:26:01,120 --> 00:26:03,439
bits

794
00:26:05,200 --> 00:26:08,240
and so that's

795
00:26:08,240 --> 00:26:10,960
the the data the data field is

796
00:26:10,960 --> 00:26:12,720
eventually used to write to other

797
00:26:12,720 --> 00:26:14,159
addresses so it gives you more than just

798
00:26:14,159 --> 00:26:15,600
a two-bit address space it's basically

799
00:26:15,600 --> 00:26:17,279
used to select whether or not you're at

800
00:26:17,279 --> 00:26:18,159
which ap

801
00:26:18,159 --> 00:26:21,039
you're gonna access if that makes sense

802
00:26:21,039 --> 00:26:21,600
and so

803
00:26:21,600 --> 00:26:23,520
the packet uh header is pretty small

804
00:26:23,520 --> 00:26:25,679
you've got eight bits total start bit

805
00:26:25,679 --> 00:26:27,840
the ap and dp bit which basically

806
00:26:27,840 --> 00:26:29,039
determines whether an ap

807
00:26:29,039 --> 00:26:31,840
is getting accessed or a dp the read and

808
00:26:31,840 --> 00:26:32,640
write bit

809
00:26:32,640 --> 00:26:35,120
uh one is a zero or one is a read zero's

810
00:26:35,120 --> 00:26:35,840
a right

811
00:26:35,840 --> 00:26:37,600
the address pit which bit which

812
00:26:37,600 --> 00:26:39,760
determines the address of the ap or dp

813
00:26:39,760 --> 00:26:41,120
that we're going to talk to

814
00:26:41,120 --> 00:26:43,600
um and then you know a parity bit stop

815
00:26:43,600 --> 00:26:45,279
bit and a park bit

816
00:26:45,279 --> 00:26:47,520
and so this is used the park bit is

817
00:26:47,520 --> 00:26:50,159
basically used as kind of a

818
00:26:50,159 --> 00:26:52,799
a timer or not a timer really but an

819
00:26:52,799 --> 00:26:54,559
indicator of when

820
00:26:54,559 --> 00:26:57,120
the host can drive the line um because

821
00:26:57,120 --> 00:26:57,679
it's a

822
00:26:57,679 --> 00:27:00,400
push-pull line or it's open drain line

823
00:27:00,400 --> 00:27:01,360
rather

824
00:27:01,360 --> 00:27:04,480
so for example to read you know

825
00:27:04,480 --> 00:27:06,799
the id code of a device over single

826
00:27:06,799 --> 00:27:08,159
wired to bug would look

827
00:27:08,159 --> 00:27:11,520
like some look something like this so

828
00:27:11,520 --> 00:27:14,880
first we see our our start bit which is

829
00:27:14,880 --> 00:27:15,600
one

830
00:27:15,600 --> 00:27:18,640
right we've got the

831
00:27:18,640 --> 00:27:20,880
access port or data port bit which is

832
00:27:20,880 --> 00:27:24,080
zero so we're talking to the dp

833
00:27:24,080 --> 00:27:26,240
we've got read and write uh so remember

834
00:27:26,240 --> 00:27:28,320
this is one so it's going to be a read

835
00:27:28,320 --> 00:27:31,440
and then the address here just zero and

836
00:27:31,440 --> 00:27:31,919
then

837
00:27:31,919 --> 00:27:35,200
zero because we're just talking to the

838
00:27:35,200 --> 00:27:36,640
data port with this because we're trying

839
00:27:36,640 --> 00:27:38,320
to read out the id code

840
00:27:38,320 --> 00:27:41,840
and so a data port read at address 0 0

841
00:27:41,840 --> 00:27:43,919
is always supposed to return the id code

842
00:27:43,919 --> 00:27:44,960
so that's one of those

843
00:27:44,960 --> 00:27:46,799
ground truth things that you can use to

844
00:27:46,799 --> 00:27:48,080
figure out whether or not you're talking

845
00:27:48,080 --> 00:27:49,360
to something that's single wire to bug

846
00:27:49,360 --> 00:27:51,200
similar to how with jtag you can try to

847
00:27:51,200 --> 00:27:52,159
clock out

848
00:27:52,159 --> 00:27:54,880
the id in order to figure out if the

849
00:27:54,880 --> 00:27:57,919
target port's a jtag port or not

850
00:27:57,919 --> 00:27:59,840
and so for the parity bit here we have

851
00:27:59,840 --> 00:28:02,399
one and then the stop bit and then park

852
00:28:02,399 --> 00:28:03,440
which is supposed to be one

853
00:28:03,440 --> 00:28:05,360
and then that gets followed up with an

854
00:28:05,360 --> 00:28:07,279
ack from the processor

855
00:28:07,279 --> 00:28:10,320
um where it's a three bit field and it

856
00:28:10,320 --> 00:28:12,000
can be either okay weight or fault

857
00:28:12,000 --> 00:28:13,760
that's what they use it for

858
00:28:13,760 --> 00:28:15,200
and so this is the processor coming back

859
00:28:15,200 --> 00:28:18,399
to us telling us okay

860
00:28:18,399 --> 00:28:20,559
and then it responds with the id code so

861
00:28:20,559 --> 00:28:22,399
this is the processor firing back the id

862
00:28:22,399 --> 00:28:23,600
code after we've

863
00:28:23,600 --> 00:28:26,880
asked it to read from the

864
00:28:26,880 --> 00:28:30,240
uh we asked it to read from the debug

865
00:28:30,240 --> 00:28:30,960
port

866
00:28:30,960 --> 00:28:33,200
add address zero and what it returned to

867
00:28:33,200 --> 00:28:36,399
us then is the id

868
00:28:37,840 --> 00:28:39,919
and so when you're taking a look at you

869
00:28:39,919 --> 00:28:41,200
know what you think might be

870
00:28:41,200 --> 00:28:43,440
a single wire debug pin or any debug

871
00:28:43,440 --> 00:28:45,520
port really you're going to have

872
00:28:45,520 --> 00:28:48,080
most likely a vcc pin near there to

873
00:28:48,080 --> 00:28:48,720
either

874
00:28:48,720 --> 00:28:50,640
grab the logic level or just to let

875
00:28:50,640 --> 00:28:52,080
whatever the target hardware is that's

876
00:28:52,080 --> 00:28:53,520
talking to it know what the logic levels

877
00:28:53,520 --> 00:28:55,279
is and this isn't unlike what you'd see

878
00:28:55,279 --> 00:28:58,399
on a ur port and it's unlikely

879
00:28:58,399 --> 00:29:01,440
that in typical usage you're going to

880
00:29:01,440 --> 00:29:02,399
actually

881
00:29:02,399 --> 00:29:04,720
be able to see any activity over these

882
00:29:04,720 --> 00:29:05,840
lines because they're designed to be

883
00:29:05,840 --> 00:29:07,360
talked to by a host so unless there's

884
00:29:07,360 --> 00:29:08,000
something

885
00:29:08,000 --> 00:29:10,240
you know on your target pcb that's

886
00:29:10,240 --> 00:29:12,480
actively talking to

887
00:29:12,480 --> 00:29:14,399
uh your cpu over single wire to bug

888
00:29:14,399 --> 00:29:15,679
you're not going to see any activity on

889
00:29:15,679 --> 00:29:16,399
these live

890
00:29:16,399 --> 00:29:19,440
on these uh on these lines um just

891
00:29:19,440 --> 00:29:20,960
looking at the chat real quick

892
00:29:20,960 --> 00:29:23,279
these i'm not sure if the slides are

893
00:29:23,279 --> 00:29:24,480
going to be shared and i

894
00:29:24,480 --> 00:29:26,880
i know the video is getting recorded so

895
00:29:26,880 --> 00:29:27,520
i'm

896
00:29:27,520 --> 00:29:28,960
assuming that'll get posted at some

897
00:29:28,960 --> 00:29:31,120
point

898
00:29:31,120 --> 00:29:34,640
uh and so the clock line usually uh

899
00:29:34,640 --> 00:29:36,080
utilizes a built-in pull-down

900
00:29:36,080 --> 00:29:38,799
the i o line usually is pulled up now

901
00:29:38,799 --> 00:29:41,279
that can change on different targets

902
00:29:41,279 --> 00:29:42,880
it's not always ground truth it's just

903
00:29:42,880 --> 00:29:44,159
kind of what

904
00:29:44,159 --> 00:29:47,520
is commonly seen out in the wild and

905
00:29:47,520 --> 00:29:48,960
the other thing too is it's really

906
00:29:48,960 --> 00:29:51,440
commonly used and seen on you know stm32

907
00:29:51,440 --> 00:29:53,279
mcus which i'm sure everyone in here

908
00:29:53,279 --> 00:29:56,320
is fairly familiar with

909
00:29:56,320 --> 00:29:57,760
and so when you're talking with single

910
00:29:57,760 --> 00:29:59,360
wire debug there's

911
00:29:59,360 --> 00:30:01,039
a fair amount of like different hardware

912
00:30:01,039 --> 00:30:02,480
interfaces you can use some of them

913
00:30:02,480 --> 00:30:05,760
are provided by the oem or the chip

914
00:30:05,760 --> 00:30:06,799
manufacturer

915
00:30:06,799 --> 00:30:08,720
and there are also you know open source

916
00:30:08,720 --> 00:30:10,240
tools that you can use like

917
00:30:10,240 --> 00:30:12,480
the ftdi chip you can use the segger j

918
00:30:12,480 --> 00:30:13,279
link which

919
00:30:13,279 --> 00:30:14,640
you know isn't open source but it's a

920
00:30:14,640 --> 00:30:15,919
fairly useful tool there's things like

921
00:30:15,919 --> 00:30:17,919
the fly swatter that people can use

922
00:30:17,919 --> 00:30:21,360
um and again most of the time when you

923
00:30:21,360 --> 00:30:22,720
get a microcontroller you get something

924
00:30:22,720 --> 00:30:24,640
from an oem they provide their own

925
00:30:24,640 --> 00:30:26,640
hardware solution for it or you know

926
00:30:26,640 --> 00:30:28,240
just implement it over usb or something

927
00:30:28,240 --> 00:30:29,760
like that or yeah like a blackmagic

928
00:30:29,760 --> 00:30:32,320
probe like someone's mentioning

929
00:30:32,320 --> 00:30:35,360
um and typically oem tools will also

930
00:30:35,360 --> 00:30:36,960
come with their own software suite for

931
00:30:36,960 --> 00:30:38,159
talking to these things

932
00:30:38,159 --> 00:30:39,679
but you know as a reverse engineer

933
00:30:39,679 --> 00:30:41,440
you're not going to have access to all

934
00:30:41,440 --> 00:30:43,440
that most of the time there may be cases

935
00:30:43,440 --> 00:30:44,000
when

936
00:30:44,000 --> 00:30:46,080
you will and that's always great but

937
00:30:46,080 --> 00:30:47,440
it's kind of always best to assume

938
00:30:47,440 --> 00:30:48,840
you're going to have as little data as

939
00:30:48,840 --> 00:30:50,559
possible and so

940
00:30:50,559 --> 00:30:53,919
with the raspberry pi we can interact

941
00:30:53,919 --> 00:30:55,840
with a single wired debug interface

942
00:30:55,840 --> 00:30:57,600
using openocd

943
00:30:57,600 --> 00:30:59,600
and telling it that we're actually we're

944
00:30:59,600 --> 00:31:01,679
using a single wire interface a single

945
00:31:01,679 --> 00:31:02,720
wire debug interface

946
00:31:02,720 --> 00:31:04,799
so there were some config files that

947
00:31:04,799 --> 00:31:05,919
were shared in the chat if people want

948
00:31:05,919 --> 00:31:06,960
to take a look at those

949
00:31:06,960 --> 00:31:09,039
uh for if you're ever going to use

950
00:31:09,039 --> 00:31:11,279
openocd with a raspberry pi

951
00:31:11,279 --> 00:31:14,480
and so you define in the config file the

952
00:31:14,480 --> 00:31:16,399
various jpeg or the various single wire

953
00:31:16,399 --> 00:31:19,679
to bug pins that are going to be used

954
00:31:19,679 --> 00:31:22,399
and so what i'm going to do is connect

955
00:31:22,399 --> 00:31:23,519
to

956
00:31:23,519 --> 00:31:27,200
the header and for

957
00:31:27,200 --> 00:31:30,080
a14 i'm going to connect that to pin 2

958
00:31:30,080 --> 00:31:30,799
of the

959
00:31:30,799 --> 00:31:35,200
raspberry pi the gpio and

960
00:31:35,600 --> 00:31:38,240
for uh gpio3 we're going to connect that

961
00:31:38,240 --> 00:31:40,640
to a13 so i'm going to switch over to

962
00:31:40,640 --> 00:31:47,039
the hardware view real quick

963
00:31:47,039 --> 00:31:50,320
all right hope everybody can see that

964
00:31:54,880 --> 00:31:57,519
all right so we're going to connect up

965
00:31:57,519 --> 00:31:58,640
to

966
00:31:58,640 --> 00:32:01,840
these first two pins uh this first pin

967
00:32:01,840 --> 00:32:03,279
after looking at it with the multimeter

968
00:32:03,279 --> 00:32:04,880
and doing a continuity test

969
00:32:04,880 --> 00:32:09,039
is ground so we're gonna ground that

970
00:32:10,799 --> 00:32:14,720
and then the next two pins 14 and 13.

971
00:32:14,720 --> 00:32:16,000
like we said we're going to connect them

972
00:32:16,000 --> 00:32:16,799
to

973
00:32:16,799 --> 00:32:20,399
two and three on the raspberry pi

974
00:32:26,640 --> 00:32:31,679
pin two and pin three

975
00:32:31,840 --> 00:32:33,440
and so you know fairly straightforward

976
00:32:33,440 --> 00:32:35,039
just three lines um

977
00:32:35,039 --> 00:32:37,200
which is nice for us and so we've got

978
00:32:37,200 --> 00:32:38,640
that connected to our raspberry pi now

979
00:32:38,640 --> 00:32:39,919
i'm gonna switch back over to the

980
00:32:39,919 --> 00:32:40,840
terminal

981
00:32:40,840 --> 00:32:43,679
and we will figure out

982
00:32:43,679 --> 00:32:46,080
the issues with resolution so bear with

983
00:32:46,080 --> 00:32:47,679
me here folks

984
00:32:47,679 --> 00:32:50,240
so here's our terminal is this too small

985
00:32:50,240 --> 00:32:53,039
can people read it

986
00:32:54,320 --> 00:32:57,840
i can make it larger

987
00:33:04,399 --> 00:33:05,760
okay i'm getting some i'm getting

988
00:33:05,760 --> 00:33:07,840
positive uh

989
00:33:07,840 --> 00:33:10,159
feedback here so i'm gonna i'm gonna

990
00:33:10,159 --> 00:33:11,039
leave it with this

991
00:33:11,039 --> 00:33:15,039
um yeah so apologies for that folks uh

992
00:33:15,039 --> 00:33:16,480
hopefully this is hopefully this is

993
00:33:16,480 --> 00:33:18,320
doable uh and i think

994
00:33:18,320 --> 00:33:20,880
this is the max unless i can yeah this

995
00:33:20,880 --> 00:33:25,840
is as high as i can go

996
00:33:26,399 --> 00:33:29,678
all right so

997
00:33:30,399 --> 00:33:33,279
uh we'll take a look at an initial what

998
00:33:33,279 --> 00:33:36,880
what the config file looks like

999
00:33:37,120 --> 00:33:38,799
so just so you're familiar and i shared

1000
00:33:38,799 --> 00:33:40,480
this was shared in chat

1001
00:33:40,480 --> 00:33:42,640
so first thing we're going to do we tell

1002
00:33:42,640 --> 00:33:44,240
it we tell openocd

1003
00:33:44,240 --> 00:33:45,919
which presents an interface to us over

1004
00:33:45,919 --> 00:33:47,519
telnet we're going to tell it what port

1005
00:33:47,519 --> 00:33:48,640
we want it to

1006
00:33:48,640 --> 00:33:50,799
uh present to us we're telling it hey

1007
00:33:50,799 --> 00:33:53,039
use the adapter driver for the raspberry

1008
00:33:53,039 --> 00:33:54,320
pi that's what this bcm

1009
00:33:54,320 --> 00:33:57,440
2835 gpio line is and

1010
00:33:57,440 --> 00:33:59,279
this is for the raspberry pi 4 this

1011
00:33:59,279 --> 00:34:00,880
peripheral base address this basically

1012
00:34:00,880 --> 00:34:02,080
is telling it you know what the base

1013
00:34:02,080 --> 00:34:03,600
address is for interfacing with these

1014
00:34:03,600 --> 00:34:04,960
gpios

1015
00:34:04,960 --> 00:34:06,240
and then we have you know speed

1016
00:34:06,240 --> 00:34:08,000
coefficients which we're using to

1017
00:34:08,000 --> 00:34:09,280
calibrate the

1018
00:34:09,280 --> 00:34:12,719
uh the clock speed for how quickly we're

1019
00:34:12,719 --> 00:34:14,159
going to interact with this target and

1020
00:34:14,159 --> 00:34:14,719
then

1021
00:34:14,719 --> 00:34:17,119
we've got we finally got our gpio

1022
00:34:17,119 --> 00:34:18,079
numbers here

1023
00:34:18,079 --> 00:34:20,639
for clock and data end data out now

1024
00:34:20,639 --> 00:34:22,000
you'll notice right that it's not the

1025
00:34:22,000 --> 00:34:24,639
header pin number it's the gpio number

1026
00:34:24,639 --> 00:34:27,359
and this works on uh various revisions

1027
00:34:27,359 --> 00:34:28,879
of the raspberry pi the only thing that

1028
00:34:28,879 --> 00:34:30,320
will change will be this base address

1029
00:34:30,320 --> 00:34:32,159
and they have example config files in

1030
00:34:32,159 --> 00:34:34,399
openocd for you to use

1031
00:34:34,399 --> 00:34:36,879
and so we're going to tell it to use you

1032
00:34:36,879 --> 00:34:38,079
know speed of

1033
00:34:38,079 --> 00:34:39,520
we're going to go 100 kilohertz and

1034
00:34:39,520 --> 00:34:41,760
we're saying for the

1035
00:34:41,760 --> 00:34:43,359
transport select which basically tells

1036
00:34:43,359 --> 00:34:44,879
it the physical interface that it's

1037
00:34:44,879 --> 00:34:45,760
going to go over

1038
00:34:45,760 --> 00:34:49,839
we're saying use a single wire to bug

1039
00:34:50,000 --> 00:34:54,879
so i'm going to pass it rpi single wired

1040
00:34:54,879 --> 00:34:58,000
config all right and so

1041
00:34:58,000 --> 00:34:59,280
the first thing we see you know it's

1042
00:34:59,280 --> 00:35:01,040
telling us all right for tickle

1043
00:35:01,040 --> 00:35:03,680
connections port 666

1044
00:35:03,680 --> 00:35:06,800
for telnet 0.1337 we're using the

1045
00:35:06,800 --> 00:35:10,320
bitbang driver for the raspberry pi

1046
00:35:10,320 --> 00:35:13,920
and then uh so

1047
00:35:13,920 --> 00:35:17,119
yeah let me see if i can make this

1048
00:35:17,119 --> 00:35:20,560
video any more clear for you

1049
00:35:24,160 --> 00:35:25,760
yeah i've got i've got the hd box

1050
00:35:25,760 --> 00:35:31,839
checked so i'm not sure

1051
00:35:32,480 --> 00:35:34,240
um so yeah i think this is probably as

1052
00:35:34,240 --> 00:35:35,680
good as it's going to get as far as

1053
00:35:35,680 --> 00:35:36,720
video goes folks

1054
00:35:36,720 --> 00:35:39,839
um so we've got you know

1055
00:35:39,839 --> 00:35:41,440
this the first error that we get and i

1056
00:35:41,440 --> 00:35:43,280
chose 100 kilohertz here just to

1057
00:35:43,280 --> 00:35:45,839
keep things relatively slow um it you

1058
00:35:45,839 --> 00:35:46,640
could go higher

1059
00:35:46,640 --> 00:35:48,320
if you want you could go lower i guess

1060
00:35:48,320 --> 00:35:49,760
if you really wanted to but

1061
00:35:49,760 --> 00:35:51,359
uh for the raspberry pi this is always a

1062
00:35:51,359 --> 00:35:53,280
good happy medium i've had some issues

1063
00:35:53,280 --> 00:35:54,000
with going

1064
00:35:54,000 --> 00:35:56,720
you know trying to go too high with

1065
00:35:56,720 --> 00:35:58,560
doing single wire to bug on targets that

1066
00:35:58,560 --> 00:36:00,720
aren't really you know expecting it or

1067
00:36:00,720 --> 00:36:02,320
necessarily designed for it so

1068
00:36:02,320 --> 00:36:03,440
this has always just been kind of the

1069
00:36:03,440 --> 00:36:05,839
sweet spot um and so it's telling us

1070
00:36:05,839 --> 00:36:06,960
here right this big

1071
00:36:06,960 --> 00:36:08,079
the big thing that we're seeing is this

1072
00:36:08,079 --> 00:36:09,760
thing gdp services needs one or more

1073
00:36:09,760 --> 00:36:11,119
targets to find

1074
00:36:11,119 --> 00:36:13,200
and so with that error i'm going to take

1075
00:36:13,200 --> 00:36:14,320
you back to

1076
00:36:14,320 --> 00:36:17,040
the powerpoint

1077
00:36:18,960 --> 00:36:21,920
and so we filled in the gpios to match

1078
00:36:21,920 --> 00:36:22,560
the

1079
00:36:22,560 --> 00:36:26,240
target wiring and the

1080
00:36:26,240 --> 00:36:28,079
there was originally a missing value for

1081
00:36:28,079 --> 00:36:29,839
transport select that we we added

1082
00:36:29,839 --> 00:36:31,440
telling it basically hey

1083
00:36:31,440 --> 00:36:33,040
we're going to be using uh single wire

1084
00:36:33,040 --> 00:36:36,560
debug as the transport mechanism

1085
00:36:36,560 --> 00:36:38,400
and so here's what that looks like for

1086
00:36:38,400 --> 00:36:39,440
those of you that maybe couldn't see it

1087
00:36:39,440 --> 00:36:41,839
on the terminal

1088
00:36:45,680 --> 00:36:47,599
and so we're getting this error right

1089
00:36:47,599 --> 00:36:48,800
that's telling us hey

1090
00:36:48,800 --> 00:36:50,560
i see that you know you've pro you

1091
00:36:50,560 --> 00:36:51,680
defined all the parameters of the

1092
00:36:51,680 --> 00:36:53,280
physical interface perfectly fine

1093
00:36:53,280 --> 00:36:54,960
but i need to know what target i'm

1094
00:36:54,960 --> 00:36:56,320
talking to right so that's basically

1095
00:36:56,320 --> 00:36:57,359
what it's telling us

1096
00:36:57,359 --> 00:37:00,560
so now we need to define you know adapt

1097
00:37:00,560 --> 00:37:03,760
that we just talked about so with

1098
00:37:03,760 --> 00:37:05,680
openocd you can find a new dap with you

1099
00:37:05,680 --> 00:37:08,079
know swd new dap

1100
00:37:08,079 --> 00:37:09,760
you give it a name tell it what kind it

1101
00:37:09,760 --> 00:37:11,359
is and then tell it to enable it

1102
00:37:11,359 --> 00:37:15,040
and then we create

1103
00:37:15,040 --> 00:37:16,400
we actually create the dap from the

1104
00:37:16,400 --> 00:37:18,560
thing that we named here

1105
00:37:18,560 --> 00:37:21,280
and then now we give it a target and so

1106
00:37:21,280 --> 00:37:22,079
i'm

1107
00:37:22,079 --> 00:37:24,800
going under the assumption that this is

1108
00:37:24,800 --> 00:37:25,119
a

1109
00:37:25,119 --> 00:37:27,839
cortex-m so you know we get a lot of

1110
00:37:27,839 --> 00:37:28,720
questions like

1111
00:37:28,720 --> 00:37:30,960
we know nothing about the cpu right we

1112
00:37:30,960 --> 00:37:31,920
don't know

1113
00:37:31,920 --> 00:37:33,440
the architecture we don't know anything

1114
00:37:33,440 --> 00:37:35,280
what we do know is that presumably we're

1115
00:37:35,280 --> 00:37:35,760
using

1116
00:37:35,760 --> 00:37:39,359
a single wire debug interface and

1117
00:37:39,359 --> 00:37:42,320
uh with that we know that stm32 uses

1118
00:37:42,320 --> 00:37:42,800
those

1119
00:37:42,800 --> 00:37:44,160
pretty regularly and so do a lot of

1120
00:37:44,160 --> 00:37:45,680
other kind of like cots arm chips so

1121
00:37:45,680 --> 00:37:46,000
just

1122
00:37:46,000 --> 00:37:49,280
as a start we're going to guess cortex m

1123
00:37:49,280 --> 00:37:50,400
or we're going to start with you know

1124
00:37:50,400 --> 00:37:53,680
kind of a more a more common chip

1125
00:37:53,680 --> 00:37:57,280
and this is you know an assumption

1126
00:37:57,280 --> 00:37:59,119
uh we'll find out that it's a fairly

1127
00:37:59,119 --> 00:38:01,839
reasonable one so if we look at

1128
00:38:01,839 --> 00:38:04,160
the xbox one config which is just that

1129
00:38:04,160 --> 00:38:06,079
same config file you had before

1130
00:38:06,079 --> 00:38:10,800
with the dap defined and

1131
00:38:11,280 --> 00:38:16,079
the other components defined so

1132
00:38:17,119 --> 00:38:19,040
if the so if the assumption is wrong we

1133
00:38:19,040 --> 00:38:20,320
got a question if the assumption is

1134
00:38:20,320 --> 00:38:21,040
wrong

1135
00:38:21,040 --> 00:38:22,480
it's not going to be able to properly

1136
00:38:22,480 --> 00:38:25,119
identify the chip so if we chose

1137
00:38:25,119 --> 00:38:26,400
you know mips or something weird like

1138
00:38:26,400 --> 00:38:28,720
that it simply just wouldn't work right

1139
00:38:28,720 --> 00:38:30,800
um and again a lot of this when you're

1140
00:38:30,800 --> 00:38:32,800
looking at you know an undocumented

1141
00:38:32,800 --> 00:38:34,640
debug interface with a chip that's

1142
00:38:34,640 --> 00:38:36,240
covered in epoxy there's a lot of

1143
00:38:36,240 --> 00:38:37,520
guesswork that goes on

1144
00:38:37,520 --> 00:38:39,040
and i've obviously streamlined that

1145
00:38:39,040 --> 00:38:40,720
guesswork because we only have so much

1146
00:38:40,720 --> 00:38:41,440
time here

1147
00:38:41,440 --> 00:38:43,040
right so when i was going through this

1148
00:38:43,040 --> 00:38:46,400
the first time i'm basically

1149
00:38:46,400 --> 00:38:48,480
uh you're basically you know you're

1150
00:38:48,480 --> 00:38:49,599
guessing different architectures you're

1151
00:38:49,599 --> 00:38:51,119
trying to figure out what it is and you

1152
00:38:51,119 --> 00:38:52,880
you know burn a lot of time doing that

1153
00:38:52,880 --> 00:38:56,240
so so let's see what happens when we run

1154
00:38:56,240 --> 00:38:57,200
open ocd

1155
00:38:57,200 --> 00:39:00,640
with the dap defined

1156
00:39:00,640 --> 00:39:02,880
all right so right here right we see a

1157
00:39:02,880 --> 00:39:04,320
lot of the same stuff we saw before but

1158
00:39:04,320 --> 00:39:06,400
we've also got single wire debug

1159
00:39:06,400 --> 00:39:09,760
data point idp idr so data port id

1160
00:39:09,760 --> 00:39:10,480
register

1161
00:39:10,480 --> 00:39:12,720
and it's spinning back like a proper id

1162
00:39:12,720 --> 00:39:14,000
and so by reading the

1163
00:39:14,000 --> 00:39:16,560
info that's defined in the data port

1164
00:39:16,560 --> 00:39:18,320
it's able to tell us that the cpu has

1165
00:39:18,320 --> 00:39:20,880
six break points four watch points and

1166
00:39:20,880 --> 00:39:22,720
it's spinning up you know a gdb server

1167
00:39:22,720 --> 00:39:23,599
for us

1168
00:39:23,599 --> 00:39:25,280
and as well as the tickle server in the

1169
00:39:25,280 --> 00:39:26,960
telnet server

1170
00:39:26,960 --> 00:39:31,040
so we're now able to query or openocd is

1171
00:39:31,040 --> 00:39:32,560
rather able to query

1172
00:39:32,560 --> 00:39:34,560
the dp get the id and get some

1173
00:39:34,560 --> 00:39:43,520
information back about the chip

1174
00:39:43,520 --> 00:39:45,280
and so for those of you that couldn't

1175
00:39:45,280 --> 00:39:46,800
see on the terminal hopefully this shows

1176
00:39:46,800 --> 00:39:47,680
up

1177
00:39:47,680 --> 00:39:52,480
um you see we get the dpidr here which

1178
00:39:52,480 --> 00:39:53,119
is the

1179
00:39:53,119 --> 00:39:55,280
identifier for the chip and you know

1180
00:39:55,280 --> 00:39:56,240
those of you that have looked at these

1181
00:39:56,240 --> 00:39:56,720
before

1182
00:39:56,720 --> 00:39:58,240
probably immediately know that that's an

1183
00:39:58,240 --> 00:40:00,160
stm32 series chip

1184
00:40:00,160 --> 00:40:03,280
um so this was

1185
00:40:03,280 --> 00:40:05,040
a response that was given to us by the

1186
00:40:05,040 --> 00:40:07,280
dp when openocd tried to enumerate the

1187
00:40:07,280 --> 00:40:09,040
target

1188
00:40:09,040 --> 00:40:11,520
and so now that we have this dap we can

1189
00:40:11,520 --> 00:40:13,040
go through and initialize it with the

1190
00:40:13,040 --> 00:40:14,560
init command this will go through and

1191
00:40:14,560 --> 00:40:16,319
kind of initialize all the registered

1192
00:40:16,319 --> 00:40:19,119
uh dps and aps that it can find and then

1193
00:40:19,119 --> 00:40:20,560
once that's done we can print out the

1194
00:40:20,560 --> 00:40:22,000
info that openocd is

1195
00:40:22,000 --> 00:40:25,680
able to query so let's take a look at

1196
00:40:25,680 --> 00:40:28,720
that we're going to go back to the

1197
00:40:36,839 --> 00:40:39,440
terminal so

1198
00:40:39,440 --> 00:40:43,839
sudo openocd dash f xbox.config

1199
00:40:43,839 --> 00:40:47,119
alright so if we go into another

1200
00:40:47,119 --> 00:40:48,560
terminal we connect to that

1201
00:40:48,560 --> 00:40:53,839
with telnet

1202
00:40:54,720 --> 00:40:58,160
so we do init and then we'll type in dap

1203
00:40:58,160 --> 00:41:00,480
info now this is going to be tough to

1204
00:41:00,480 --> 00:41:01,920
read so it's a lot of data

1205
00:41:01,920 --> 00:41:05,520
so hopefully we can follow along here

1206
00:41:05,520 --> 00:41:08,800
if we scroll up we can see here the

1207
00:41:08,800 --> 00:41:13,359
it gives us the id register right and

1208
00:41:13,359 --> 00:41:15,040
then we see it goes through and reads

1209
00:41:15,040 --> 00:41:16,960
the map so it grabs the base and then

1210
00:41:16,960 --> 00:41:18,480
starts reading the rom table

1211
00:41:18,480 --> 00:41:20,160
and so immediately looking at this right

1212
00:41:20,160 --> 00:41:21,680
we see that one of the peripheral ids

1213
00:41:21,680 --> 00:41:23,040
and the designer id is for

1214
00:41:23,040 --> 00:41:25,359
st microelectronics we have the part

1215
00:41:25,359 --> 00:41:27,200
number which is hex 411

1216
00:41:27,200 --> 00:41:30,160
and then when we look at this additional

1217
00:41:30,160 --> 00:41:31,359
rom table here this for

1218
00:41:31,359 --> 00:41:34,720
this uh peripheral address openocd is

1219
00:41:34,720 --> 00:41:35,920
able to go through and query that and

1220
00:41:35,920 --> 00:41:36,640
read it out

1221
00:41:36,640 --> 00:41:38,880
and figure out you know okay we can see

1222
00:41:38,880 --> 00:41:41,280
that it's a cortex m4 which is great

1223
00:41:41,280 --> 00:41:43,839
coincidentally you know obviously not a

1224
00:41:43,839 --> 00:41:45,359
guess it took a fair amount of time to

1225
00:41:45,359 --> 00:41:46,800
figure that out initially but

1226
00:41:46,800 --> 00:41:48,800
if you were looking at this and you had

1227
00:41:48,800 --> 00:41:50,720
the wrong architecture identified

1228
00:41:50,720 --> 00:41:53,040
and you could read through the rom table

1229
00:41:53,040 --> 00:41:54,960
you would see that this is a cortex m4

1230
00:41:54,960 --> 00:41:56,400
and so you would be able to get to this

1231
00:41:56,400 --> 00:41:58,160
data regardless of what architecture you

1232
00:41:58,160 --> 00:42:00,000
provided it

1233
00:42:00,000 --> 00:42:02,000
which is kind of nice and that's how i

1234
00:42:02,000 --> 00:42:03,200
found it to begin with

1235
00:42:03,200 --> 00:42:06,240
so you ask openocd to grab you this dap

1236
00:42:06,240 --> 00:42:07,520
info

1237
00:42:07,520 --> 00:42:09,040
and here we can see there's a couple of

1238
00:42:09,040 --> 00:42:10,880
we have a couple of different rom tables

1239
00:42:10,880 --> 00:42:12,560
that are telling us what the different

1240
00:42:12,560 --> 00:42:14,560
aps are used for right so we have one

1241
00:42:14,560 --> 00:42:14,880
for

1242
00:42:14,880 --> 00:42:16,400
flash patch and break point we've got

1243
00:42:16,400 --> 00:42:18,319
one for data watch point and trace

1244
00:42:18,319 --> 00:42:21,280
uh system control space etc and so these

1245
00:42:21,280 --> 00:42:22,640
are all the different peripherals that

1246
00:42:22,640 --> 00:42:23,920
we can interact with

1247
00:42:23,920 --> 00:42:27,280
via swd

1248
00:42:27,280 --> 00:42:29,119
and so we talked before about like there

1249
00:42:29,119 --> 00:42:30,720
might be trace modules involved we've

1250
00:42:30,720 --> 00:42:32,640
got this traceport interface unit

1251
00:42:32,640 --> 00:42:33,839
and this is where you know reading

1252
00:42:33,839 --> 00:42:35,040
through things like the coresight

1253
00:42:35,040 --> 00:42:36,319
specification and stuff like that will

1254
00:42:36,319 --> 00:42:38,240
come into

1255
00:42:38,240 --> 00:42:41,520
excuse me will come into play

1256
00:42:43,520 --> 00:42:46,640
and so now with that out of the way

1257
00:42:46,640 --> 00:42:49,520
we know that it's an st microelectronics

1258
00:42:49,520 --> 00:42:50,800
chip we know that much right it's

1259
00:42:50,800 --> 00:42:51,839
telling us right here

1260
00:42:51,839 --> 00:42:53,119
it's giving us the part number which is

1261
00:42:53,119 --> 00:42:54,720
unrecognized this isn't always something

1262
00:42:54,720 --> 00:42:57,200
you can go off of this hex 411

1263
00:42:57,200 --> 00:42:58,800
but the big takeaway here right is that

1264
00:42:58,800 --> 00:43:00,640
we know it's a cortex m4 because we're

1265
00:43:00,640 --> 00:43:01,839
seeing that in the dapper table and we

1266
00:43:01,839 --> 00:43:02,160
know

1267
00:43:02,160 --> 00:43:04,880
it's an st microelectronics chip so when

1268
00:43:04,880 --> 00:43:05,920
you start to kind of piece all that

1269
00:43:05,920 --> 00:43:07,520
together right it's an arm based

1270
00:43:07,520 --> 00:43:10,160
st chip using single wire to bug good

1271
00:43:10,160 --> 00:43:13,040
chance it's an stm32

1272
00:43:13,040 --> 00:43:14,640
but there's other ways we can figure

1273
00:43:14,640 --> 00:43:16,560
that out as well and so to walk through

1274
00:43:16,560 --> 00:43:17,920
that we're gonna go back to the

1275
00:43:17,920 --> 00:43:20,480
powerpoint

1276
00:43:23,680 --> 00:43:26,480
okay i'm sorry i'm getting right back

1277
00:43:26,480 --> 00:43:28,079
i'm getting to these questions now

1278
00:43:28,079 --> 00:43:30,240
so if the architecture was wrong yeah we

1279
00:43:30,240 --> 00:43:31,200
would still get the id

1280
00:43:31,200 --> 00:43:32,720
regardless of the architecture uh

1281
00:43:32,720 --> 00:43:34,000
debugging and things like that are what

1282
00:43:34,000 --> 00:43:35,280
would probably not work

1283
00:43:35,280 --> 00:43:36,720
and yeah the info we were looking at

1284
00:43:36,720 --> 00:43:38,640
earlier was from the rom table

1285
00:43:38,640 --> 00:43:42,920
and yeah so hex 411 doesn't exactly mean

1286
00:43:42,920 --> 00:43:45,839
stm32411 um it's just a manual it's just

1287
00:43:45,839 --> 00:43:46,720
another id

1288
00:43:46,720 --> 00:43:49,119
field that's used um sorry i'm trying to

1289
00:43:49,119 --> 00:43:50,720
get to these as i can here

1290
00:43:50,720 --> 00:43:53,760
um so yeah we took a look at the dap

1291
00:43:53,760 --> 00:43:56,640
output and you know we could see things

1292
00:43:56,640 --> 00:43:57,520
like

1293
00:43:57,520 --> 00:43:59,359
you know st microelectronics we got a

1294
00:43:59,359 --> 00:44:00,960
part number we got

1295
00:44:00,960 --> 00:44:03,599
the architecture as well and so we're

1296
00:44:03,599 --> 00:44:04,079
gonna

1297
00:44:04,079 --> 00:44:05,359
move forward you know assuming this is

1298
00:44:05,359 --> 00:44:09,760
probably an stm32 chip of some sort

1299
00:44:09,760 --> 00:44:12,160
and so these are extremely popular arm

1300
00:44:12,160 --> 00:44:12,800
cortex

1301
00:44:12,800 --> 00:44:15,440
you know microcontrollers they typically

1302
00:44:15,440 --> 00:44:17,760
have you know the cortex cpu core sram

1303
00:44:17,760 --> 00:44:19,359
internal flash and the debug interface

1304
00:44:19,359 --> 00:44:21,200
slash other external peripherals i'm

1305
00:44:21,200 --> 00:44:22,319
assuming everybody here

1306
00:44:22,319 --> 00:44:25,040
is fairly familiar with the stm32 it's

1307
00:44:25,040 --> 00:44:25,680
uh

1308
00:44:25,680 --> 00:44:28,480
it's an extremely popular chip and so

1309
00:44:28,480 --> 00:44:29,119
this

1310
00:44:29,119 --> 00:44:31,920
chip also utilizes the swd interface

1311
00:44:31,920 --> 00:44:34,720
which is good for us

1312
00:44:34,720 --> 00:44:37,599
and so these cpus store identification

1313
00:44:37,599 --> 00:44:38,400
info

1314
00:44:38,400 --> 00:44:41,119
in various memory regions right and so

1315
00:44:41,119 --> 00:44:41,760
at this

1316
00:44:41,760 --> 00:44:44,960
url um which i can i can post in the

1317
00:44:44,960 --> 00:44:45,520
chat

1318
00:44:45,520 --> 00:44:47,440
basically they have different regions of

1319
00:44:47,440 --> 00:44:48,960
memory that you can

1320
00:44:48,960 --> 00:44:52,000
read from to get cpu id information and

1321
00:44:52,000 --> 00:44:52,640
so

1322
00:44:52,640 --> 00:44:55,119
by doing that you can try to now that we

1323
00:44:55,119 --> 00:44:56,640
can interact with this

1324
00:44:56,640 --> 00:44:58,560
ap we have the proper architecture

1325
00:44:58,560 --> 00:45:00,240
figured out we can go through and try to

1326
00:45:00,240 --> 00:45:02,160
read from these memory regions to figure

1327
00:45:02,160 --> 00:45:03,920
out what specific chip we might be

1328
00:45:03,920 --> 00:45:05,119
looking at

1329
00:45:05,119 --> 00:45:09,839
and so let's take a look at that

1330
00:45:09,839 --> 00:45:12,240
as you can see there going back and

1331
00:45:12,240 --> 00:45:13,920
forth between the uh

1332
00:45:13,920 --> 00:45:15,040
terminal and powerpoint is kind of

1333
00:45:15,040 --> 00:45:16,960
annoying

1334
00:45:16,960 --> 00:45:20,079
so i'm going to pull up that stm memory

1335
00:45:20,079 --> 00:45:20,640
region

1336
00:45:20,640 --> 00:45:23,760
document real quick and if anybody has

1337
00:45:23,760 --> 00:45:27,200
any questions just drop them in the chat

1338
00:45:30,839 --> 00:45:33,839
please

1339
00:45:43,440 --> 00:45:47,839
all right so this url

1340
00:45:49,280 --> 00:45:51,760
yeah so the flash um if you're asking

1341
00:45:51,760 --> 00:45:52,960
when you say locked

1342
00:45:52,960 --> 00:45:55,440
the flash on these chips can be locked

1343
00:45:55,440 --> 00:45:56,000
and

1344
00:45:56,000 --> 00:46:00,240
we'll find out if this one is or not

1345
00:46:00,240 --> 00:46:02,880
so you can you can lock the flash memory

1346
00:46:02,880 --> 00:46:06,240
on these so that you can't get to them

1347
00:46:09,599 --> 00:46:10,880
all right and so if you look at that

1348
00:46:10,880 --> 00:46:12,560
document there are there's regions that

1349
00:46:12,560 --> 00:46:12,960
have

1350
00:46:12,960 --> 00:46:15,760
the generic device id register which is

1351
00:46:15,760 --> 00:46:16,800
at this address

1352
00:46:16,800 --> 00:46:20,800
so let me copy and paste it here

1353
00:46:21,520 --> 00:46:24,079
and so we're going to do mdw which is

1354
00:46:24,079 --> 00:46:26,079
the memory display word command

1355
00:46:26,079 --> 00:46:28,560
and we'll just look at four words there

1356
00:46:28,560 --> 00:46:30,160
all right so we get this

1357
00:46:30,160 --> 00:46:32,480
for the generic id which is probably

1358
00:46:32,480 --> 00:46:35,119
going to be the same

1359
00:46:35,119 --> 00:46:37,599
across uh different different stm32

1360
00:46:37,599 --> 00:46:38,319
chips

1361
00:46:38,319 --> 00:46:42,000
and so yeah the the dap information is

1362
00:46:42,000 --> 00:46:44,160
always there right unless the single

1363
00:46:44,160 --> 00:46:46,079
wire debug interface is locked out

1364
00:46:46,079 --> 00:46:49,200
which it very well could be um

1365
00:46:49,200 --> 00:46:51,200
so typically it's rare that you would

1366
00:46:51,200 --> 00:46:53,040
find the entire interface locked out

1367
00:46:53,040 --> 00:46:54,240
there was a question about whether or

1368
00:46:54,240 --> 00:46:57,200
not it's possible if the chip is locked

1369
00:46:57,200 --> 00:46:59,280
like flash locking and debug port

1370
00:46:59,280 --> 00:47:01,280
locking are independent of one another

1371
00:47:01,280 --> 00:47:04,160
so you can certainly lock the flash

1372
00:47:04,160 --> 00:47:05,200
without locking out

1373
00:47:05,200 --> 00:47:06,800
debug ports and that's pretty that

1374
00:47:06,800 --> 00:47:11,839
that's commonly seen

1375
00:47:13,280 --> 00:47:17,280
um hang on so here's the link sorry i

1376
00:47:17,280 --> 00:47:18,960
posted it in a dm

1377
00:47:18,960 --> 00:47:23,359
not in the chat my bad everybody

1378
00:47:23,359 --> 00:47:26,640
there you go okay yeah so we read from

1379
00:47:26,640 --> 00:47:27,200
this first

1380
00:47:27,200 --> 00:47:29,200
this first region which uh is kind of

1381
00:47:29,200 --> 00:47:31,119
the generic device id register and then

1382
00:47:31,119 --> 00:47:35,119
this next region is defined for stm32f0s

1383
00:47:35,119 --> 00:47:36,559
and stm32f3s

1384
00:47:36,559 --> 00:47:38,720
so we're gonna try to read a couple of

1385
00:47:38,720 --> 00:47:41,839
bytes from that and see if

1386
00:47:41,839 --> 00:47:43,920
we get anything all right so we have

1387
00:47:43,920 --> 00:47:44,960
nothing there

1388
00:47:44,960 --> 00:47:47,359
okay so we'll move down the list to the

1389
00:47:47,359 --> 00:47:49,400
next one which is one fff

1390
00:47:49,400 --> 00:47:53,839
f7e8 for stm32f1

1391
00:47:58,240 --> 00:48:01,520
and we get nothing for that as well so

1392
00:48:01,520 --> 00:48:07,839
one ff f7a10

1393
00:48:15,520 --> 00:48:18,839
okay so this is for stm32f2s and

1394
00:48:18,839 --> 00:48:21,119
stm32f4s and mike i knew that address

1395
00:48:21,119 --> 00:48:23,200
because they're labeled in that header

1396
00:48:23,200 --> 00:48:24,800
file that i just posted a link to

1397
00:48:24,800 --> 00:48:26,720
so those are commonly used addresses for

1398
00:48:26,720 --> 00:48:31,118
identifying various types of stm32 chips

1399
00:48:31,680 --> 00:48:34,079
all right cool so we got you know we saw

1400
00:48:34,079 --> 00:48:34,800
that we can read

1401
00:48:34,800 --> 00:48:36,400
we actually have something at this

1402
00:48:36,400 --> 00:48:38,400
address so between that

1403
00:48:38,400 --> 00:48:41,280
and what we saw in the rom table it's a

1404
00:48:41,280 --> 00:48:42,640
fairly safe bet that we're working with

1405
00:48:42,640 --> 00:48:43,839
an stm32

1406
00:48:43,839 --> 00:48:48,160
f2 series so now i'm going to go back to

1407
00:48:48,160 --> 00:48:50,799
the powerpoint

1408
00:48:57,920 --> 00:48:59,200
and so you'll see here i wanted to

1409
00:48:59,200 --> 00:49:01,359
include this example as well you'll get

1410
00:49:01,359 --> 00:49:02,000
an error if

1411
00:49:02,000 --> 00:49:03,599
it fails to read memory if you can't

1412
00:49:03,599 --> 00:49:04,640
actually read memory from that

1413
00:49:04,640 --> 00:49:05,599
particular address

1414
00:49:05,599 --> 00:49:07,920
that you're trying to read from so

1415
00:49:07,920 --> 00:49:09,040
someone had asked what if it's not

1416
00:49:09,040 --> 00:49:10,400
memory mapped this is exactly what

1417
00:49:10,400 --> 00:49:11,440
you're going to get or what you're going

1418
00:49:11,440 --> 00:49:13,280
to see

1419
00:49:13,280 --> 00:49:14,880
so of all these only one of them worked

1420
00:49:14,880 --> 00:49:17,440
and it was the one that was

1421
00:49:17,440 --> 00:49:20,640
specified for the f2 and f4 series

1422
00:49:20,640 --> 00:49:25,359
the stm32f2 stm32f4

1423
00:49:27,920 --> 00:49:30,440
so yeah this confirms to us that's an

1424
00:49:30,440 --> 00:49:33,040
stm32f2 or f4 series

1425
00:49:33,040 --> 00:49:35,440
and so luckily for us the good folks at

1426
00:49:35,440 --> 00:49:37,520
openocd have a configuration file for

1427
00:49:37,520 --> 00:49:39,359
that specific cpu

1428
00:49:39,359 --> 00:49:42,240
um yeah and it could also it could also

1429
00:49:42,240 --> 00:49:44,079
be an l0 that's correct so someone asked

1430
00:49:44,079 --> 00:49:44,480
here

1431
00:49:44,480 --> 00:49:47,280
f2 f4 or l0 yeah it could be any one of

1432
00:49:47,280 --> 00:49:48,960
those

1433
00:49:48,960 --> 00:49:51,680
so if we look in openocd at the config

1434
00:49:51,680 --> 00:49:52,800
files we have one

1435
00:49:52,800 --> 00:49:56,079
for the stm32 f2x

1436
00:49:56,079 --> 00:49:59,599
chip and so we can include that file

1437
00:49:59,599 --> 00:50:02,000
with our original config that we wrote

1438
00:50:02,000 --> 00:50:03,599
in order to get some more information

1439
00:50:03,599 --> 00:50:06,960
about the chips let's do that now

1440
00:50:08,559 --> 00:50:13,839
take you back to the terminal

1441
00:50:19,520 --> 00:50:21,839
so

1442
00:50:23,359 --> 00:50:25,839
and if you're looking for these if

1443
00:50:25,839 --> 00:50:27,680
you're looking for these config files

1444
00:50:27,680 --> 00:50:29,280
after you've installed openocd they're

1445
00:50:29,280 --> 00:50:30,480
in user local share

1446
00:50:30,480 --> 00:50:33,200
openocd

1447
00:50:36,160 --> 00:50:40,079
all right so again as we saw before

1448
00:50:40,079 --> 00:50:43,200
the rpi-swd config is kind of a generic

1449
00:50:43,200 --> 00:50:45,040
single-wire debug adapter config you can

1450
00:50:45,040 --> 00:50:47,359
use and i believe

1451
00:50:47,359 --> 00:50:49,839
that there are that openocd actually

1452
00:50:49,839 --> 00:50:50,960
comes with those

1453
00:50:50,960 --> 00:50:53,359
pre-installed for the pi um i just

1454
00:50:53,359 --> 00:50:55,440
wanted to use

1455
00:50:55,440 --> 00:50:57,119
i just wanted to you to write one to

1456
00:50:57,119 --> 00:50:58,640
give you an example of you know how

1457
00:50:58,640 --> 00:50:59,599
they're written and what the various

1458
00:50:59,599 --> 00:51:00,720
fields mean

1459
00:51:00,720 --> 00:51:02,720
all right so we provide the target

1460
00:51:02,720 --> 00:51:04,079
stm32f2

1461
00:51:04,079 --> 00:51:07,520
cfg all right cool

1462
00:51:07,520 --> 00:51:10,400
so the cpu gets created now we have a

1463
00:51:10,400 --> 00:51:11,920
gdp stub that's available but more

1464
00:51:11,920 --> 00:51:12,559
importantly

1465
00:51:12,559 --> 00:51:15,599
all the information in that file gives

1466
00:51:15,599 --> 00:51:16,880
us access to things

1467
00:51:16,880 --> 00:51:18,960
like the flash commands and it defines

1468
00:51:18,960 --> 00:51:20,559
the various flash banks and the various

1469
00:51:20,559 --> 00:51:22,000
debug peripherals so we can actually get

1470
00:51:22,000 --> 00:51:22,960
in there and start

1471
00:51:22,960 --> 00:51:26,079
interacting with the the target chip so

1472
00:51:26,079 --> 00:51:28,079
if we go back

1473
00:51:28,079 --> 00:51:31,119
now if we do flash

1474
00:51:31,119 --> 00:51:34,640
banks right we can see that we have

1475
00:51:34,640 --> 00:51:36,880
two flashbangs and these are defined in

1476
00:51:36,880 --> 00:51:37,680
that uh

1477
00:51:37,680 --> 00:51:40,880
that config file target stm32 f2x config

1478
00:51:40,880 --> 00:51:44,160
dot config so we've got the flash memory

1479
00:51:44,160 --> 00:51:45,520
and then we've got the

1480
00:51:45,520 --> 00:51:49,040
one time programmable memory here and so

1481
00:51:49,040 --> 00:51:51,040
that can be dumped to a file so for

1482
00:51:51,040 --> 00:51:52,319
those of you

1483
00:51:52,319 --> 00:51:55,359
that are uh following along

1484
00:51:55,359 --> 00:51:59,040
we can just do flash read bank

1485
00:51:59,040 --> 00:52:00,960
bank id we'll just give it zero and then

1486
00:52:00,960 --> 00:52:02,640
file name we'll call it bank zero

1487
00:52:02,640 --> 00:52:05,839
dot bin

1488
00:52:06,160 --> 00:52:09,760
all right and so again this if

1489
00:52:09,760 --> 00:52:11,599
the the flash in these chips can be

1490
00:52:11,599 --> 00:52:12,880
configured to be

1491
00:52:12,880 --> 00:52:15,920
uh re-locked and right locked so luckily

1492
00:52:15,920 --> 00:52:17,760
for us so far we can still read from it

1493
00:52:17,760 --> 00:52:19,599
and we'll find out later that it's fair

1494
00:52:19,599 --> 00:52:22,400
unlocking these is uh doable just via a

1495
00:52:22,400 --> 00:52:24,240
command that open ocd provides to unlock

1496
00:52:24,240 --> 00:52:24,960
the flash

1497
00:52:24,960 --> 00:52:26,640
which is nice it could have been locked

1498
00:52:26,640 --> 00:52:28,240
in the otp and then we would have had to

1499
00:52:28,240 --> 00:52:29,760
resort to you would have to resort to

1500
00:52:29,760 --> 00:52:30,640
something

1501
00:52:30,640 --> 00:52:33,520
like uh glitching to to bypass that so

1502
00:52:33,520 --> 00:52:34,079
for these

1503
00:52:34,079 --> 00:52:35,520
the uh the flash banks are unlocked

1504
00:52:35,520 --> 00:52:36,960
which make it kind of a nice target for

1505
00:52:36,960 --> 00:52:39,839
learning this kind of stuff

1506
00:52:44,720 --> 00:52:47,839
so now if we go back to the powerpoint

1507
00:52:47,839 --> 00:52:49,440
right we saw that we had you know two

1508
00:52:49,440 --> 00:52:50,800
flashbangs that are available for those

1509
00:52:50,800 --> 00:52:51,920
of you that are looking at it

1510
00:52:51,920 --> 00:52:53,200
and you know there's additional flash

1511
00:52:53,200 --> 00:52:55,119
commands which we'll take a look at uh

1512
00:52:55,119 --> 00:52:56,000
later on

1513
00:52:56,000 --> 00:52:58,240
and you can dump that out with flash

1514
00:52:58,240 --> 00:52:59,520
read underscore bank

1515
00:52:59,520 --> 00:53:00,880
and then give it the bank id and the

1516
00:53:00,880 --> 00:53:03,920
file name that you want to use

1517
00:53:10,160 --> 00:53:12,160
and so this is what flash list would

1518
00:53:12,160 --> 00:53:14,000
give you

1519
00:53:14,000 --> 00:53:16,160
and we saw this this is reading the bank

1520
00:53:16,160 --> 00:53:17,680
and yeah so luckily for us

1521
00:53:17,680 --> 00:53:19,599
uh which again is kind of why this makes

1522
00:53:19,599 --> 00:53:21,839
uh this controller makes for a nice

1523
00:53:21,839 --> 00:53:23,119
target for learning these kinds of

1524
00:53:23,119 --> 00:53:23,760
things

1525
00:53:23,760 --> 00:53:25,920
is uh the flash banks here are unlocked

1526
00:53:25,920 --> 00:53:26,960
so we're able to

1527
00:53:26,960 --> 00:53:30,319
read and write to them which is nice

1528
00:53:32,480 --> 00:53:34,000
and so we can read bank one and bank

1529
00:53:34,000 --> 00:53:36,640
zero if we want to take

1530
00:53:36,640 --> 00:53:39,280
if you want to take a look at that you

1531
00:53:39,280 --> 00:53:40,559
can do

1532
00:53:40,559 --> 00:53:41,920
you could look at it in a hex editor you

1533
00:53:41,920 --> 00:53:43,280
could do you know toss it into guidro

1534
00:53:43,280 --> 00:53:44,480
whatever you feel like doing

1535
00:53:44,480 --> 00:53:46,800
so at this point we've read you know

1536
00:53:46,800 --> 00:53:48,800
bank zero and bank one bank one being

1537
00:53:48,800 --> 00:53:50,000
the otp memory

1538
00:53:50,000 --> 00:53:51,520
which is where some of that lockout

1539
00:53:51,520 --> 00:53:57,839
information would be stored

1540
00:53:58,319 --> 00:54:00,319
and so now that we have these two these

1541
00:54:00,319 --> 00:54:01,680
two flash banks

1542
00:54:01,680 --> 00:54:03,200
we can you can take a look at it with

1543
00:54:03,200 --> 00:54:04,880
something like bin walk you could do hex

1544
00:54:04,880 --> 00:54:06,079
dump you could just

1545
00:54:06,079 --> 00:54:08,880
run strings on it um because you know

1546
00:54:08,880 --> 00:54:10,319
right now this is just a flat firmware

1547
00:54:10,319 --> 00:54:10,720
image

1548
00:54:10,720 --> 00:54:13,440
the the format is not necessarily known

1549
00:54:13,440 --> 00:54:15,040
but we'll find out later that it is

1550
00:54:15,040 --> 00:54:16,000
actually defined

1551
00:54:16,000 --> 00:54:19,280
in an abi for this chip but you know the

1552
00:54:19,280 --> 00:54:20,400
first step that you want to do with

1553
00:54:20,400 --> 00:54:21,520
something like this would be

1554
00:54:21,520 --> 00:54:23,200
to run you know bin walk or hex dump

1555
00:54:23,200 --> 00:54:25,119
strings what have you so

1556
00:54:25,119 --> 00:54:28,000
i'll hop back to the terminal real quick

1557
00:54:28,000 --> 00:54:30,240
just take a look at that

1558
00:54:30,240 --> 00:54:32,480
and yeah so someone asked in the chat

1559
00:54:32,480 --> 00:54:34,079
what is otp memory it's a one-time

1560
00:54:34,079 --> 00:54:36,720
programmable

1561
00:54:36,799 --> 00:54:40,079
so if we just run classic bin walk on it

1562
00:54:40,079 --> 00:54:41,680
see what ben walk says

1563
00:54:41,680 --> 00:54:43,280
probably not going to get much yeah

1564
00:54:43,280 --> 00:54:45,359
because this is just a flat memory image

1565
00:54:45,359 --> 00:54:46,160
if we

1566
00:54:46,160 --> 00:54:49,599
run strings on it

1567
00:54:49,599 --> 00:54:52,880
x0 and we'll pipe that up okay we're not

1568
00:54:52,880 --> 00:54:53,680
seeing much

1569
00:54:53,680 --> 00:54:55,599
this is all kind of garbage but we are

1570
00:54:55,599 --> 00:54:57,359
seeing you know

1571
00:54:57,359 --> 00:55:00,720
xbox input gamepad pdp gamepad etc

1572
00:55:00,720 --> 00:55:02,160
and so you know it's it's always good to

1573
00:55:02,160 --> 00:55:03,599
kind of do stuff like this to make sure

1574
00:55:03,599 --> 00:55:04,079
that you're

1575
00:55:04,079 --> 00:55:05,839
actually dumping stuff data that makes

1576
00:55:05,839 --> 00:55:07,119
sense um

1577
00:55:07,119 --> 00:55:08,559
and that you're you know not getting

1578
00:55:08,559 --> 00:55:11,040
corrupted data or anything like that

1579
00:55:11,040 --> 00:55:13,599
so another thing that we can infer right

1580
00:55:13,599 --> 00:55:15,040
if we're seeing plain text strings like

1581
00:55:15,040 --> 00:55:16,400
this in the firmware image it's likely

1582
00:55:16,400 --> 00:55:17,440
not compressed it's probably not

1583
00:55:17,440 --> 00:55:18,720
encrypted in any way

1584
00:55:18,720 --> 00:55:20,960
and you could use bin walk dash e to

1585
00:55:20,960 --> 00:55:23,520
figure that out

1586
00:55:24,960 --> 00:55:27,920
and so we go down and we see you know

1587
00:55:27,920 --> 00:55:29,200
some more of this

1588
00:55:29,200 --> 00:55:30,559
manufacturer data that we saw when we

1589
00:55:30,559 --> 00:55:32,640
enumerated the device and so yeah it

1590
00:55:32,640 --> 00:55:34,000
looks like we've got a relatively

1591
00:55:34,000 --> 00:55:36,960
complete image of the flash by just

1592
00:55:36,960 --> 00:55:38,720
using the flash commands and open ocd

1593
00:55:38,720 --> 00:55:41,359
just kind of nice

1594
00:55:42,720 --> 00:55:46,000
let's go back to the powerpoint

1595
00:55:46,720 --> 00:55:50,559
and so yeah this you know these uh

1596
00:55:50,559 --> 00:55:53,359
strings here let us know that one the

1597
00:55:53,359 --> 00:55:54,880
data is probably not encrypted

1598
00:55:54,880 --> 00:55:57,200
and or compressed in any way and these

1599
00:55:57,200 --> 00:55:58,559
also would be you know kind of good

1600
00:55:58,559 --> 00:55:59,440
candidates for

1601
00:55:59,440 --> 00:56:01,760
if we wanted to try to rewrite or patch

1602
00:56:01,760 --> 00:56:02,559
the firmware

1603
00:56:02,559 --> 00:56:03,680
this would be something we could change

1604
00:56:03,680 --> 00:56:07,920
to kind of get a visible result

1605
00:56:07,920 --> 00:56:10,240
but as as has been mentioned in the chat

1606
00:56:10,240 --> 00:56:11,359
stm32

1607
00:56:11,359 --> 00:56:13,520
chips can protect and lock these

1608
00:56:13,520 --> 00:56:14,480
flashbangs

1609
00:56:14,480 --> 00:56:15,920
and you can also prevent readouts as

1610
00:56:15,920 --> 00:56:18,319
well um and also when you are

1611
00:56:18,319 --> 00:56:19,839
writing to these flash chips they have

1612
00:56:19,839 --> 00:56:21,599
to be erased first it's kind of like if

1613
00:56:21,599 --> 00:56:22,799
you've ever read to or written from you

1614
00:56:22,799 --> 00:56:24,319
know a spy flash or an

1615
00:56:24,319 --> 00:56:28,400
uh an i2c flash um but you know openocd

1616
00:56:28,400 --> 00:56:29,599
has support

1617
00:56:29,599 --> 00:56:34,079
for halting the cpu obviously and then

1618
00:56:34,079 --> 00:56:35,440
you can try to unlock

1619
00:56:35,440 --> 00:56:36,960
the flashbang so that it can be read to

1620
00:56:36,960 --> 00:56:45,119
or written from and so

1621
00:56:45,119 --> 00:56:46,559
if you're you know if you're following

1622
00:56:46,559 --> 00:56:48,160
along at home you can now you know you

1623
00:56:48,160 --> 00:56:49,359
can try to patch it

1624
00:56:49,359 --> 00:56:51,520
and see if there's any changes you might

1625
00:56:51,520 --> 00:56:52,480
want to make

1626
00:56:52,480 --> 00:56:55,440
um but to flash your modified image to

1627
00:56:55,440 --> 00:56:56,799
the stm32

1628
00:56:56,799 --> 00:56:59,599
uh first we would want to halt it unlock

1629
00:56:59,599 --> 00:57:00,000
it

1630
00:57:00,000 --> 00:57:01,839
and then there's the right bank command

1631
00:57:01,839 --> 00:57:03,680
which does the erasing and writing for

1632
00:57:03,680 --> 00:57:05,200
you and then reset it

1633
00:57:05,200 --> 00:57:09,119
and so we can take some time now and

1634
00:57:09,119 --> 00:57:10,880
try to do that and see if we can change

1635
00:57:10,880 --> 00:57:12,400
something that we can actually visibly

1636
00:57:12,400 --> 00:57:12,720
see

1637
00:57:12,720 --> 00:57:15,680
so i'm gonna switch back

1638
00:57:18,079 --> 00:57:20,319
yeah so uh regions of the flash could

1639
00:57:20,319 --> 00:57:22,000
definitely be encrypted uh they could

1640
00:57:22,000 --> 00:57:23,520
definitely be compressed what have you

1641
00:57:23,520 --> 00:57:25,359
if we look at this in a hex editor so

1642
00:57:25,359 --> 00:57:27,599
let me go back to the terminal

1643
00:57:27,599 --> 00:57:28,720
if we take a look at this in a hex

1644
00:57:28,720 --> 00:57:31,040
editor

1645
00:57:34,799 --> 00:57:37,200
we're seeing you can see a lot of and i

1646
00:57:37,200 --> 00:57:38,799
know this is probably hard for cert for

1647
00:57:38,799 --> 00:57:42,400
folks to read um the there are like

1648
00:57:42,400 --> 00:57:44,000
definitely some patterns in this as you

1649
00:57:44,000 --> 00:57:45,280
take a look at it so

1650
00:57:45,280 --> 00:57:47,200
throughout it doesn't look like you know

1651
00:57:47,200 --> 00:57:48,480
it's compressed there's not a whole lot

1652
00:57:48,480 --> 00:57:49,839
there's not super high entropy here you

1653
00:57:49,839 --> 00:57:51,200
see we have like two

1654
00:57:51,200 --> 00:57:53,119
almost identical strings of bytes these

1655
00:57:53,119 --> 00:57:55,119
are all probably you know

1656
00:57:55,119 --> 00:57:57,040
similar instructions that are being run

1657
00:57:57,040 --> 00:57:59,119
um so yeah we're not seeing

1658
00:57:59,119 --> 00:58:00,720
you know high amounts of entropy we're

1659
00:58:00,720 --> 00:58:02,720
seeing plain text strings in kind of the

1660
00:58:02,720 --> 00:58:03,599
middle of

1661
00:58:03,599 --> 00:58:05,200
the memory dump we're not seeing it you

1662
00:58:05,200 --> 00:58:06,880
know at the header or the footer

1663
00:58:06,880 --> 00:58:09,359
so yeah this would you know lead one to

1664
00:58:09,359 --> 00:58:10,960
believe that it is probably

1665
00:58:10,960 --> 00:58:12,720
unencrypted and you know i've loaded

1666
00:58:12,720 --> 00:58:14,000
this up in ghidra and

1667
00:58:14,000 --> 00:58:15,280
patched it and modified it and i can

1668
00:58:15,280 --> 00:58:17,040
tell you that it's not encrypted in any

1669
00:58:17,040 --> 00:58:19,200
way

1670
00:58:20,799 --> 00:58:23,440
so if we want to you know find something

1671
00:58:23,440 --> 00:58:24,720
that we can modify

1672
00:58:24,720 --> 00:58:27,440
and change we've got these strings over

1673
00:58:27,440 --> 00:58:27,920
here

1674
00:58:27,920 --> 00:58:30,880
that we saw get you know presented when

1675
00:58:30,880 --> 00:58:34,079
the device was enumerated

1676
00:58:34,400 --> 00:58:39,119
and so let's go ahead and change this to

1677
00:58:41,200 --> 00:58:44,160
give me one second

1678
00:58:48,400 --> 00:58:51,839
always make backups

1679
00:58:56,240 --> 00:58:57,760
yeah the uh the terminal is browser

1680
00:58:57,760 --> 00:59:00,480
based um

1681
00:59:00,559 --> 00:59:02,799
use this for a training platform as well

1682
00:59:02,799 --> 00:59:04,160
and it just makes life typically makes

1683
00:59:04,160 --> 00:59:05,599
life a little easier if you're not uh

1684
00:59:05,599 --> 00:59:07,119
streaming to a bunch of people

1685
00:59:07,119 --> 00:59:09,680
so go back to where we saw those strings

1686
00:59:09,680 --> 00:59:10,720
and we'll just patch those to be

1687
00:59:10,720 --> 00:59:13,359
something different

1688
00:59:14,000 --> 00:59:16,640
and uh those of you that have read my

1689
00:59:16,640 --> 00:59:17,920
blog post before probably pretty

1690
00:59:17,920 --> 00:59:20,720
familiar with how a lot of this works

1691
00:59:20,720 --> 00:59:22,959
so

1692
00:59:31,680 --> 00:59:32,799
so let's do that so we're going to

1693
00:59:32,799 --> 00:59:34,559
modify one of these descriptor strings

1694
00:59:34,559 --> 00:59:35,200
to say

1695
00:59:35,200 --> 00:59:36,880
you know hack their emoticon firmware

1696
00:59:36,880 --> 00:59:39,599
patches etc so

1697
00:59:39,599 --> 00:59:44,160
save the changes so now

1698
00:59:45,359 --> 00:59:49,279
let's halt the processor

1699
00:59:49,440 --> 00:59:52,799
i'll do stm32f2x unlock

1700
00:59:52,799 --> 00:59:57,280
bank zero build unlock device

1701
00:59:57,280 --> 00:59:59,760
do it again and it works so this this is

1702
00:59:59,760 --> 01:00:01,200
another kind of quirk that you might see

1703
01:00:01,200 --> 01:00:02,640
when you're doing this with openocd

1704
01:00:02,640 --> 01:00:04,799
it does typically fail the first time

1705
01:00:04,799 --> 01:00:05,839
and i'm not sure

1706
01:00:05,839 --> 01:00:08,880
exactly why that is if there's any open

1707
01:00:08,880 --> 01:00:10,720
ocd experts in the chat that might be

1708
01:00:10,720 --> 01:00:11,760
able to explain that that would be

1709
01:00:11,760 --> 01:00:13,119
pretty cool but i have noticed

1710
01:00:13,119 --> 01:00:16,240
that you do have to issue the command

1711
01:00:16,240 --> 01:00:17,839
twice but so now that that's done we can

1712
01:00:17,839 --> 01:00:18,720
do flash

1713
01:00:18,720 --> 01:00:21,920
right bank and what we call

1714
01:00:21,920 --> 01:00:24,640
mod.bin

1715
01:00:25,200 --> 01:00:27,359
oh i forgot the bank id so bank zero

1716
01:00:27,359 --> 01:00:29,920
month.n

1717
01:00:31,119 --> 01:00:35,520
oh no error writing to flash why is that

1718
01:00:35,520 --> 01:00:38,720
failed to get read pointer

1719
01:00:38,880 --> 01:00:42,880
all right so we halt

1720
01:00:42,880 --> 01:00:46,000
unlocked oh i said read bank not right

1721
01:00:46,000 --> 01:00:46,400
bank

1722
01:00:46,400 --> 01:00:50,079
gee all right

1723
01:00:50,079 --> 01:00:52,319
okay

1724
01:00:53,119 --> 01:00:55,599
no yeah so uh enrico this firmware image

1725
01:00:55,599 --> 01:00:57,119
is uh

1726
01:00:57,119 --> 01:01:00,160
very friendly for modifications there's

1727
01:01:00,160 --> 01:01:02,000
not really any checks or anything on it

1728
01:01:02,000 --> 01:01:03,440
which is kind of why it makes for a good

1729
01:01:03,440 --> 01:01:04,799
target for a lot of the stuff and makes

1730
01:01:04,799 --> 01:01:06,400
it easy for people to hack on

1731
01:01:06,400 --> 01:01:08,079
yeah there's there's no check summing

1732
01:01:08,079 --> 01:01:10,000
there's no kind of signature

1733
01:01:10,000 --> 01:01:11,280
or anything i mean it turns out right

1734
01:01:11,280 --> 01:01:13,040
the mod the you know potential threat

1735
01:01:13,040 --> 01:01:14,799
model for something like this is not

1736
01:01:14,799 --> 01:01:17,359
super advanced um they're not really

1737
01:01:17,359 --> 01:01:18,559
expecting anybody to go

1738
01:01:18,559 --> 01:01:20,559
digging into it i don't think uh as it's

1739
01:01:20,559 --> 01:01:22,079
a pretty cheap controller

1740
01:01:22,079 --> 01:01:23,680
but in addition to that there's there's

1741
01:01:23,680 --> 01:01:25,680
also another debug interface that

1742
01:01:25,680 --> 01:01:28,559
we're going to take a look at later that

1743
01:01:28,559 --> 01:01:28,880
they

1744
01:01:28,880 --> 01:01:30,640
that they left in which is pretty cool

1745
01:01:30,640 --> 01:01:32,319
so we've reflashed

1746
01:01:32,319 --> 01:01:34,400
our firmware image uh that we just kind

1747
01:01:34,400 --> 01:01:36,160
of like patched those strings on

1748
01:01:36,160 --> 01:01:40,160
uh so now let's just exit here so we've

1749
01:01:40,160 --> 01:01:41,680
reflashed

1750
01:01:41,680 --> 01:01:44,319
let's kill our see anything we do d

1751
01:01:44,319 --> 01:01:44,880
message

1752
01:01:44,880 --> 01:01:47,839
w and so let's re-enumerate our

1753
01:01:47,839 --> 01:01:48,559
controller

1754
01:01:48,559 --> 01:01:53,680
and see what shows up

1755
01:01:53,680 --> 01:01:56,000
okay

1756
01:02:00,480 --> 01:02:02,640
all right so the product string is all

1757
01:02:02,640 --> 01:02:03,680
jacked up

1758
01:02:03,680 --> 01:02:05,599
and so i'm pretty sure that's because

1759
01:02:05,599 --> 01:02:07,440
we're using a different image that i

1760
01:02:07,440 --> 01:02:09,280
wrote that i actually wrote a different

1761
01:02:09,280 --> 01:02:10,880
patch for which is why that's so messed

1762
01:02:10,880 --> 01:02:12,000
up so let's see if we can get around

1763
01:02:12,000 --> 01:02:14,720
that and fix that

1764
01:02:17,520 --> 01:02:22,559
all right go back to the slides

1765
01:02:32,839 --> 01:02:35,839
okay

1766
01:02:44,480 --> 01:02:48,559
okay yeah so we were able to reflash

1767
01:02:48,559 --> 01:02:51,520
and patch it and so this actually we

1768
01:02:51,520 --> 01:02:52,400
weren't able to see

1769
01:02:52,400 --> 01:02:53,760
the changes that we made because this

1770
01:02:53,760 --> 01:02:55,680
actually has a different image that i've

1771
01:02:55,680 --> 01:02:57,280
that i've patched to do some other stuff

1772
01:02:57,280 --> 01:02:58,640
so i'm trying to see if i can find the

1773
01:02:58,640 --> 01:03:00,480
stock image to reflash it but

1774
01:03:00,480 --> 01:03:02,960
the the main takeaway here is that you

1775
01:03:02,960 --> 01:03:03,680
can

1776
01:03:03,680 --> 01:03:06,319
patch this with whatever you want and it

1777
01:03:06,319 --> 01:03:07,680
doesn't really do any checks or anything

1778
01:03:07,680 --> 01:03:08,240
on it

1779
01:03:08,240 --> 01:03:10,319
and so for this example here i had

1780
01:03:10,319 --> 01:03:11,680
patched it you know with wrong body's

1781
01:03:11,680 --> 01:03:12,720
artisanal patches

1782
01:03:12,720 --> 01:03:14,240
and i had managed to also spell

1783
01:03:14,240 --> 01:03:16,240
artisanal wrong so

1784
01:03:16,240 --> 01:03:17,680
with that you know you can unlock the

1785
01:03:17,680 --> 01:03:19,839
flashbang you can modify it and then you

1786
01:03:19,839 --> 01:03:21,760
can re-flash it all using you know open

1787
01:03:21,760 --> 01:03:24,000
ocd and single wire debug

1788
01:03:24,000 --> 01:03:26,799
which is pretty nice

1789
01:03:28,720 --> 01:03:30,400
and so you know we can modify the flash

1790
01:03:30,400 --> 01:03:31,839
content we have full control over what

1791
01:03:31,839 --> 01:03:33,039
it executes at this point

1792
01:03:33,039 --> 01:03:35,520
we can we could try you know if you

1793
01:03:35,520 --> 01:03:36,720
wanted to try to do something malicious

1794
01:03:36,720 --> 01:03:37,839
maybe overwrite some of those strings

1795
01:03:37,839 --> 01:03:39,119
with format strings see if anything

1796
01:03:39,119 --> 01:03:39,839
happens

1797
01:03:39,839 --> 01:03:42,000
um you have you know full debug

1798
01:03:42,000 --> 01:03:44,240
capabilities over this so you can single

1799
01:03:44,240 --> 01:03:45,359
step through instructions

1800
01:03:45,359 --> 01:03:48,559
you can you know halt it reset it

1801
01:03:48,559 --> 01:03:49,839
you know grab the register state

1802
01:03:49,839 --> 01:03:51,359
anything you would want to do uh with

1803
01:03:51,359 --> 01:03:53,520
you know gdb or what have you can now do

1804
01:03:53,520 --> 01:03:55,680
uh do thanks to openocd and single wire

1805
01:03:55,680 --> 01:03:57,599
debugging so let's take a look actually

1806
01:03:57,599 --> 01:03:58,240
at how to

1807
01:03:58,240 --> 01:04:01,200
do that with openocd and gdb so we're

1808
01:04:01,200 --> 01:04:04,000
gonna go back to the terminal

1809
01:04:04,000 --> 01:04:05,680
yeah totally you could so cisco just

1810
01:04:05,680 --> 01:04:07,039
asked you know you could add a bash

1811
01:04:07,039 --> 01:04:07,680
bunny

1812
01:04:07,680 --> 01:04:09,039
app of some sort yeah you could pretty

1813
01:04:09,039 --> 01:04:10,240
much do you know whatever you want you

1814
01:04:10,240 --> 01:04:11,599
have full control over the flash

1815
01:04:11,599 --> 01:04:13,280
you have full control over the target

1816
01:04:13,280 --> 01:04:14,799
and uh that's kind of where the magic of

1817
01:04:14,799 --> 01:04:16,319
hardware debugging play and yeah speed

1818
01:04:16,319 --> 01:04:17,119
run for sure

1819
01:04:17,119 --> 01:04:19,359
so that was actually the reason i came i

1820
01:04:19,359 --> 01:04:20,240
tried to look at this

1821
01:04:20,240 --> 01:04:23,280
before is i was so tired of getting my

1822
01:04:23,280 --> 01:04:25,200
butt kicked in marvel vs capcom

1823
01:04:25,200 --> 01:04:27,119
and i wanted to try to write some macros

1824
01:04:27,119 --> 01:04:28,640
to see if i could get it to work

1825
01:04:28,640 --> 01:04:31,200
and um i ended up writing something but

1826
01:04:31,200 --> 01:04:32,720
even that wasn't enough to help me not

1827
01:04:32,720 --> 01:04:33,839
be terrible with the game

1828
01:04:33,839 --> 01:04:35,760
so that's just you know that's just on

1829
01:04:35,760 --> 01:04:37,760
me so learned some cool stuff along the

1830
01:04:37,760 --> 01:04:38,240
way

1831
01:04:38,240 --> 01:04:40,559
uh and i hope that was uh you know

1832
01:04:40,559 --> 01:04:42,079
useful for you folks as well

1833
01:04:42,079 --> 01:04:45,520
um so uh what were we just we were just

1834
01:04:45,520 --> 01:04:47,760
talking about uh connecting it up to gdb

1835
01:04:47,760 --> 01:04:49,440
so let's take a look at how to do that

1836
01:04:49,440 --> 01:04:53,119
in the terminal so

1837
01:04:53,119 --> 01:04:58,319
again uh gdb gives us

1838
01:04:58,319 --> 01:05:02,160
a gdp stub when we spawn it so

1839
01:05:02,160 --> 01:05:04,400
do this again there we go and then over

1840
01:05:04,400 --> 01:05:05,200
here we'll just

1841
01:05:05,200 --> 01:05:08,079
type in gdb and so one thing to note

1842
01:05:08,079 --> 01:05:08,720
actually

1843
01:05:08,720 --> 01:05:10,799
uh we're running on a raspberry pi which

1844
01:05:10,799 --> 01:05:11,839
is arm

1845
01:05:11,839 --> 01:05:13,839
and so typically if you were trying to

1846
01:05:13,839 --> 01:05:15,039
run you know gdb

1847
01:05:15,039 --> 01:05:16,880
targeting a remote arm box you would

1848
01:05:16,880 --> 01:05:18,480
need to make sure your gdb was compiled

1849
01:05:18,480 --> 01:05:20,240
with arm support or with whatever you

1850
01:05:20,240 --> 01:05:20,720
know

1851
01:05:20,720 --> 01:05:23,359
architecture you're targeting support

1852
01:05:23,359 --> 01:05:24,480
the nice thing about

1853
01:05:24,480 --> 01:05:26,079
running all this from the pi is that for

1854
01:05:26,079 --> 01:05:27,520
arm targets obviously that's supported

1855
01:05:27,520 --> 01:05:28,240
out of the box

1856
01:05:28,240 --> 01:05:32,559
so we'll do set architecture arm

1857
01:05:32,559 --> 01:05:36,079
we'll do target remote local localhost

1858
01:05:36,079 --> 01:05:40,319
and the gdb port as you can see

1859
01:05:40,799 --> 01:05:43,920
is on three three three three

1860
01:05:43,920 --> 01:05:46,079
so we can see right here the gdp port is

1861
01:05:46,079 --> 01:05:51,839
on three three three three

1862
01:05:53,280 --> 01:05:56,559
so and there we go so

1863
01:05:56,559 --> 01:05:58,240
it's telling us you know we're executing

1864
01:05:58,240 --> 01:06:00,720
at eight zero our pc is eight zero zero

1865
01:06:00,720 --> 01:06:01,760
two f six six

1866
01:06:01,760 --> 01:06:05,440
we can do info reg sorry if i could type

1867
01:06:05,440 --> 01:06:06,640
info reg and then we'll get all the

1868
01:06:06,640 --> 01:06:08,559
register information and then if we

1869
01:06:08,559 --> 01:06:11,200
wanted to we can single step

1870
01:06:11,200 --> 01:06:12,559
so we're stepping through instructions

1871
01:06:12,559 --> 01:06:15,760
if we want to disassemble we can do x10i

1872
01:06:15,760 --> 01:06:18,240
at program counter and so here's the

1873
01:06:18,240 --> 01:06:19,520
instruction that's getting read

1874
01:06:19,520 --> 01:06:22,240
so you know and you could use a

1875
01:06:22,240 --> 01:06:23,599
graphical debugger basically if you

1876
01:06:23,599 --> 01:06:25,280
wanted to right because openocd gives

1877
01:06:25,280 --> 01:06:27,280
you a gdp stub with a lot which lots of

1878
01:06:27,280 --> 01:06:28,000
other tools

1879
01:06:28,000 --> 01:06:30,640
are designed to interact with um we're

1880
01:06:30,640 --> 01:06:31,920
using the command line version here

1881
01:06:31,920 --> 01:06:32,720
because it's

1882
01:06:32,720 --> 01:06:34,319
fairly easy to get up and running and to

1883
01:06:34,319 --> 01:06:36,559
use and to kind of demonstrate

1884
01:06:36,559 --> 01:06:39,039
the capability so yeah with this with

1885
01:06:39,039 --> 01:06:40,559
single wire debug and from the raspberry

1886
01:06:40,559 --> 01:06:42,799
pi now we have you know complete control

1887
01:06:42,799 --> 01:06:44,319
over this controller so you could turn

1888
01:06:44,319 --> 01:06:45,440
it into

1889
01:06:45,440 --> 01:06:48,160
really whatever you want um as long as

1890
01:06:48,160 --> 01:06:49,680
you took the time to

1891
01:06:49,680 --> 01:06:51,200
you know either patch the firmware or

1892
01:06:51,200 --> 01:06:53,359
write your own firmware um

1893
01:06:53,359 --> 01:06:55,440
but yeah so thanks to this hardware

1894
01:06:55,440 --> 01:06:56,960
debugging port we can now do

1895
01:06:56,960 --> 01:06:58,640
sort of whatever we want so if you

1896
01:06:58,640 --> 01:07:00,400
wanted to set breakpoints so let's take

1897
01:07:00,400 --> 01:07:01,520
a look

1898
01:07:01,520 --> 01:07:03,119
at where we are let's look at how many

1899
01:07:03,119 --> 01:07:04,559
instructions are in front of us

1900
01:07:04,559 --> 01:07:07,039
so we're doing x which is the examine

1901
01:07:07,039 --> 01:07:08,400
command in gdb for those of you that

1902
01:07:08,400 --> 01:07:09,039
don't know

1903
01:07:09,039 --> 01:07:11,760
and we're telling it to examine 10 uh

1904
01:07:11,760 --> 01:07:13,039
you give it a quantity first and then

1905
01:07:13,039 --> 01:07:14,640
you give it a format of what you want to

1906
01:07:14,640 --> 01:07:15,359
examine

1907
01:07:15,359 --> 01:07:17,839
and we are telling it uh instructions so

1908
01:07:17,839 --> 01:07:19,760
we're saying hey show me 10 instructions

1909
01:07:19,760 --> 01:07:20,319
at

1910
01:07:20,319 --> 01:07:23,039
pc which is the program counter so okay

1911
01:07:23,039 --> 01:07:23,599
cool

1912
01:07:23,599 --> 01:07:26,160
here is you know the current instruction

1913
01:07:26,160 --> 01:07:27,440
that we're executing

1914
01:07:27,440 --> 01:07:30,160
um you know we saw before that the

1915
01:07:30,160 --> 01:07:31,440
processor had a certain amount of break

1916
01:07:31,440 --> 01:07:32,799
points and watch points so if we want to

1917
01:07:32,799 --> 01:07:34,319
set a breakpoint we can now

1918
01:07:34,319 --> 01:07:36,400
do this so we can just highlight our

1919
01:07:36,400 --> 01:07:37,839
address

1920
01:07:37,839 --> 01:07:39,520
and so for those of you that have done

1921
01:07:39,520 --> 01:07:41,119
you know exploit development or reverse

1922
01:07:41,119 --> 01:07:42,160
engineering what have you

1923
01:07:42,160 --> 01:07:44,559
like having this level of debugging is

1924
01:07:44,559 --> 01:07:46,480
extremely useful right because you have

1925
01:07:46,480 --> 01:07:49,039
full control over the system you can you

1926
01:07:49,039 --> 01:07:50,720
know set break points set memory watch

1927
01:07:50,720 --> 01:07:52,160
points whatever you want so if we do

1928
01:07:52,160 --> 01:07:54,319
break

1929
01:07:54,319 --> 01:07:57,200
star and then our address it's telling

1930
01:07:57,200 --> 01:07:58,480
us we have a break point of this

1931
01:07:58,480 --> 01:08:00,079
and so now if we do continue to ask it

1932
01:08:00,079 --> 01:08:01,599
to continue execution

1933
01:08:01,599 --> 01:08:04,240
bam we hit our break point and so again

1934
01:08:04,240 --> 01:08:05,680
just to kind of illustrate that now

1935
01:08:05,680 --> 01:08:06,079
you've

1936
01:08:06,079 --> 01:08:10,559
got full control over this uh

1937
01:08:10,559 --> 01:08:13,119
full control over this controller that

1938
01:08:13,119 --> 01:08:14,079
sounded kind of weird

1939
01:08:14,079 --> 01:08:17,198
but so yeah via single wire debug

1940
01:08:17,198 --> 01:08:18,960
openocd

1941
01:08:18,960 --> 01:08:20,799
you now have full control over this

1942
01:08:20,799 --> 01:08:22,560
thing and you can reflash it to

1943
01:08:22,560 --> 01:08:24,560
run whatever you want you could you know

1944
01:08:24,560 --> 01:08:27,679
try to write macros try to patch it etc

1945
01:08:27,679 --> 01:08:29,040
so that's pretty that's a pretty

1946
01:08:29,040 --> 01:08:30,080
interesting thing and that's kind of the

1947
01:08:30,080 --> 01:08:30,799
power of

1948
01:08:30,799 --> 01:08:32,399
hardware debugging and we were kind of

1949
01:08:32,399 --> 01:08:34,799
going from you know a zero we were at

1950
01:08:34,799 --> 01:08:36,158
kind of a zero knowledge point when we

1951
01:08:36,158 --> 01:08:37,439
started right the cpu is covered in

1952
01:08:37,439 --> 01:08:38,158
epoxy

1953
01:08:38,158 --> 01:08:42,158
all we had was the uh the debug port

1954
01:08:42,158 --> 01:08:43,600
which you know luckily for us was

1955
01:08:43,600 --> 01:08:45,520
somewhat labeled and again as people

1956
01:08:45,520 --> 01:08:47,198
pointed out we are lucky that it

1957
01:08:47,198 --> 01:08:49,198
the flash was unlocked uh it totally

1958
01:08:49,198 --> 01:08:50,560
could have been locked and that would

1959
01:08:50,560 --> 01:08:50,880
have

1960
01:08:50,880 --> 01:08:52,080
completely that would have stopped us

1961
01:08:52,080 --> 01:08:54,640
pretty much dead in our tracks as far as

1962
01:08:54,640 --> 01:08:58,080
only using openocd and the raspberry pi

1963
01:08:58,080 --> 01:08:59,920
we would have had to resort to something

1964
01:08:59,920 --> 01:09:01,920
like glitching or some kind of timing

1965
01:09:01,920 --> 01:09:03,439
attack or something to bypass

1966
01:09:03,439 --> 01:09:05,040
that setting when trying to access the

1967
01:09:05,040 --> 01:09:07,759
flash

1968
01:09:07,759 --> 01:09:09,679
uh so yeah gdp these are all gdp

1969
01:09:09,679 --> 01:09:10,799
commands that i'm running there's some

1970
01:09:10,799 --> 01:09:12,080
questions in chat about that

1971
01:09:12,080 --> 01:09:14,719
uh gd also has a disassembler baked into

1972
01:09:14,719 --> 01:09:16,479
it so you can tell it like hey i need

1973
01:09:16,479 --> 01:09:17,759
you i want you to disassemble this

1974
01:09:17,759 --> 01:09:19,600
address

1975
01:09:19,600 --> 01:09:22,560
so what is running on the controller is

1976
01:09:22,560 --> 01:09:24,319
is a bare metal firmware image it's not

1977
01:09:24,319 --> 01:09:25,198
it's not an os

1978
01:09:25,198 --> 01:09:26,960
it's not a little rtos or anything like

1979
01:09:26,960 --> 01:09:28,960
that um

1980
01:09:28,960 --> 01:09:31,040
so yeah these are all gdb commands that

1981
01:09:31,040 --> 01:09:33,359
are that are being run right now

1982
01:09:33,359 --> 01:09:35,040
so c is continue and so we're still

1983
01:09:35,040 --> 01:09:38,080
hitting this break point um

1984
01:09:38,080 --> 01:09:40,238
yeah so now we have you know full full

1985
01:09:40,238 --> 01:09:42,000
control over the system we can single

1986
01:09:42,000 --> 01:09:44,560
step through instructions no problem

1987
01:09:44,560 --> 01:09:47,359
we can examine memory we can examine

1988
01:09:47,359 --> 01:09:48,640
instructions

1989
01:09:48,640 --> 01:09:50,799
so yeah at this point we have full

1990
01:09:50,799 --> 01:09:52,319
control over

1991
01:09:52,319 --> 01:09:54,238
the controller and with that i'm going

1992
01:09:54,238 --> 01:09:57,440
to go back to the powerpoint

1993
01:09:59,120 --> 01:10:01,199
the pi is running the gdb server that's

1994
01:10:01,199 --> 01:10:02,960
a great question so someone is asking

1995
01:10:02,960 --> 01:10:04,480
does the game controller have a gdp

1996
01:10:04,480 --> 01:10:06,239
server running on it no what the game

1997
01:10:06,239 --> 01:10:07,440
controller has right

1998
01:10:07,440 --> 01:10:10,159
is that that interface that single wire

1999
01:10:10,159 --> 01:10:12,480
debug interface that we are talking to

2000
01:10:12,480 --> 01:10:14,560
and that's where the magic of openocd

2001
01:10:14,560 --> 01:10:16,000
comes in because openocd

2002
01:10:16,000 --> 01:10:17,520
knows how to talk to all the internal

2003
01:10:17,520 --> 01:10:19,600
components all those internal aps

2004
01:10:19,600 --> 01:10:22,800
and spin up the same capabilities that a

2005
01:10:22,800 --> 01:10:24,800
gdb server would expect so openocd spins

2006
01:10:24,800 --> 01:10:26,800
up the gdb server handles all the memory

2007
01:10:26,800 --> 01:10:28,000
reads and writes for you

2008
01:10:28,000 --> 01:10:30,159
and does all that behind the scenes so

2009
01:10:30,159 --> 01:10:31,679
we have to thank the

2010
01:10:31,679 --> 01:10:33,360
the developers of openocd for setting

2011
01:10:33,360 --> 01:10:37,120
all that up for us which is really cool

2012
01:10:37,120 --> 01:10:39,520
so you know we've we talked about this

2013
01:10:39,520 --> 01:10:41,520
we can we can patch the firmware we can

2014
01:10:41,520 --> 01:10:43,120
do whatever we can rewrite the flash

2015
01:10:43,120 --> 01:10:44,880
what have you no big deal so

2016
01:10:44,880 --> 01:10:47,120
you know we can single step debug which

2017
01:10:47,120 --> 01:10:48,800
is also great

2018
01:10:48,800 --> 01:10:50,719
and we already went through this we

2019
01:10:50,719 --> 01:10:52,239
talked about looking at it with gdb we

2020
01:10:52,239 --> 01:10:53,840
set a break point et cetera i feel like

2021
01:10:53,840 --> 01:10:55,679
it's easier to show

2022
01:10:55,679 --> 01:10:58,960
in the terminal versus uh

2023
01:10:58,960 --> 01:11:02,880
powerpoint so someone asked is there an

2024
01:11:02,880 --> 01:11:04,480
advantage to using openocd

2025
01:11:04,480 --> 01:11:07,600
with the pi versus j-link um you can use

2026
01:11:07,600 --> 01:11:10,159
you can use either uh i wanted to focus

2027
01:11:10,159 --> 01:11:11,679
on the pi because i think it's more

2028
01:11:11,679 --> 01:11:15,520
accessible and it's you know as far as

2029
01:11:15,520 --> 01:11:16,880
the end result is is

2030
01:11:16,880 --> 01:11:18,000
a lot of the times it's going to be the

2031
01:11:18,000 --> 01:11:20,320
same there are platforms that j-link

2032
01:11:20,320 --> 01:11:21,760
might have better support for

2033
01:11:21,760 --> 01:11:23,280
are baked in support using their

2034
01:11:23,280 --> 01:11:26,080
software tooling uh i like to

2035
01:11:26,080 --> 01:11:28,560
try to use something that's as

2036
01:11:28,560 --> 01:11:30,080
configurable as possible if that makes

2037
01:11:30,080 --> 01:11:31,600
sense like the raspberry pi in case you

2038
01:11:31,600 --> 01:11:32,960
run into like some kind of bespoke

2039
01:11:32,960 --> 01:11:34,560
feature or some weird

2040
01:11:34,560 --> 01:11:35,760
quirk that you don't know how to deal

2041
01:11:35,760 --> 01:11:39,520
with so i like using the pi for this but

2042
01:11:39,520 --> 01:11:41,360
there's a number of different interfaces

2043
01:11:41,360 --> 01:11:42,640
you could use for this and they all kind

2044
01:11:42,640 --> 01:11:43,360
of have

2045
01:11:43,360 --> 01:11:46,480
their own pros and cons

2046
01:11:47,360 --> 01:11:50,480
so uh i mentioned before that i bricked

2047
01:11:50,480 --> 01:11:52,239
one of these on accident and so what i

2048
01:11:52,239 --> 01:11:53,760
had done was i

2049
01:11:53,760 --> 01:11:56,400
overwrote the flash with the wrong file

2050
01:11:56,400 --> 01:11:57,280
so i actually

2051
01:11:57,280 --> 01:12:00,080
i accidentally overwrote the flash with

2052
01:12:00,080 --> 01:12:00,400
a

2053
01:12:00,400 --> 01:12:03,679
chunk of a markdown file because i just

2054
01:12:03,679 --> 01:12:05,120
fat fingered some keys

2055
01:12:05,120 --> 01:12:07,120
and so what that did was it caused the

2056
01:12:07,120 --> 01:12:08,239
stm32

2057
01:12:08,239 --> 01:12:10,000
to obviously not enumerate when it got

2058
01:12:10,000 --> 01:12:11,679
powered up right

2059
01:12:11,679 --> 01:12:14,960
so i i reflashed it and

2060
01:12:14,960 --> 01:12:17,760
i plugged it in and nothing showed up so

2061
01:12:17,760 --> 01:12:19,280
because it wasn't getting enumerated

2062
01:12:19,280 --> 01:12:20,800
it obviously didn't show up as a usb

2063
01:12:20,800 --> 01:12:22,400
device it didn't even show

2064
01:12:22,400 --> 01:12:24,560
the single wire debug ports weren't even

2065
01:12:24,560 --> 01:12:26,159
active because they weren't properly

2066
01:12:26,159 --> 01:12:27,760
configured by

2067
01:12:27,760 --> 01:12:30,560
the the bootloader so like nothing had

2068
01:12:30,560 --> 01:12:31,199
run

2069
01:12:31,199 --> 01:12:34,400
and things were not working and

2070
01:12:34,400 --> 01:12:36,480
so you know that happens uh sometimes

2071
01:12:36,480 --> 01:12:37,679
you fat finger something sometimes you

2072
01:12:37,679 --> 01:12:38,719
goof stuff up

2073
01:12:38,719 --> 01:12:43,040
but as i was um i'll say it angrily like

2074
01:12:43,040 --> 01:12:44,400
trying to plug this thing back in and

2075
01:12:44,400 --> 01:12:45,520
figure out like how do i get this

2076
01:12:45,520 --> 01:12:48,880
stupid thing to work i found out that

2077
01:12:48,880 --> 01:12:51,360
this has what's called like a dfu mode

2078
01:12:51,360 --> 01:12:52,640
that's built into the boot realm for

2079
01:12:52,640 --> 01:12:54,239
this exact scenario for when a big dummy

2080
01:12:54,239 --> 01:12:54,640
like me

2081
01:12:54,640 --> 01:12:56,320
goes in and flashes the wrong firmware

2082
01:12:56,320 --> 01:12:59,280
to it and uh this was something i found

2083
01:12:59,280 --> 01:13:01,040
just a few days ago so i was excited to

2084
01:13:01,040 --> 01:13:02,480
be able to toss it in here which is kind

2085
01:13:02,480 --> 01:13:03,679
of cool

2086
01:13:03,679 --> 01:13:05,280
so if you have one of these controllers

2087
01:13:05,280 --> 01:13:07,440
at home and you hold these three buttons

2088
01:13:07,440 --> 01:13:08,880
in while you plug it in

2089
01:13:08,880 --> 01:13:10,719
you'll see that something different pops

2090
01:13:10,719 --> 01:13:12,239
up so i'm gonna i'm gonna load up d

2091
01:13:12,239 --> 01:13:12,719
message

2092
01:13:12,719 --> 01:13:14,320
in the terminal window for those of you

2093
01:13:14,320 --> 01:13:15,920
that can see it and we're gonna take a

2094
01:13:15,920 --> 01:13:18,400
look at what that does

2095
01:13:18,400 --> 01:13:19,520
all right so i'm sliding over here to

2096
01:13:19,520 --> 01:13:21,360
get to my hardware and so let me flip

2097
01:13:21,360 --> 01:13:22,239
this around

2098
01:13:22,239 --> 01:13:26,800
so it's uh these three buttons

2099
01:13:26,800 --> 01:13:30,560
so if you hold these down so spork i'll

2100
01:13:30,560 --> 01:13:31,920
show you we'll go to the hardware view

2101
01:13:31,920 --> 01:13:32,400
real quick

2102
01:13:32,400 --> 01:13:35,679
it's these these three buttons so here

2103
01:13:35,679 --> 01:13:38,800
here and here so if you hold these three

2104
01:13:38,800 --> 01:13:40,239
down

2105
01:13:40,239 --> 01:13:43,440
and we'll go back to

2106
01:13:43,440 --> 01:13:45,760
the terminal so we're gonna hold these

2107
01:13:45,760 --> 01:13:46,560
three down

2108
01:13:46,560 --> 01:13:50,159
unplug the controller we see a usb

2109
01:13:50,159 --> 01:13:50,880
disconnect

2110
01:13:50,880 --> 01:13:55,120
great and now plug it in again

2111
01:13:55,120 --> 01:13:57,440
we've got a totally different usb device

2112
01:13:57,440 --> 01:13:59,600
we see stm32 boot loader

2113
01:13:59,600 --> 01:14:03,679
manufacturer st microelectronics and so

2114
01:14:03,679 --> 01:14:06,000
this was kind of a godsend because i was

2115
01:14:06,000 --> 01:14:07,360
concerned that i had bricked this

2116
01:14:07,360 --> 01:14:09,520
and i used this a lot for courses and

2117
01:14:09,520 --> 01:14:10,560
training and i was

2118
01:14:10,560 --> 01:14:12,560
you know somewhat worried that if it's

2119
01:14:12,560 --> 01:14:13,840
this easy to brick it it's

2120
01:14:13,840 --> 01:14:15,440
extremely easy for other folks to break

2121
01:14:15,440 --> 01:14:17,360
it remotely but this

2122
01:14:17,360 --> 01:14:21,600
uh dfu mode can be used to reflash the

2123
01:14:21,600 --> 01:14:23,040
device and this is what you'll see a lot

2124
01:14:23,040 --> 01:14:23,520
of times

2125
01:14:23,520 --> 01:14:24,880
you know commercially available like

2126
01:14:24,880 --> 01:14:26,840
development boards will present this

2127
01:14:26,840 --> 01:14:28,800
interface

2128
01:14:28,800 --> 01:14:31,840
and dfu is a device firmware upgrade

2129
01:14:31,840 --> 01:14:34,880
so we'll go back to the powerpoint yeah

2130
01:14:34,880 --> 01:14:35,600
so dfu

2131
01:14:35,600 --> 01:14:37,679
device firmware upgrade this presents

2132
01:14:37,679 --> 01:14:39,360
you know a custom usb device that we can

2133
01:14:39,360 --> 01:14:41,679
interact with over usb to get access to

2134
01:14:41,679 --> 01:14:42,000
the

2135
01:14:42,000 --> 01:14:44,400
flash

2136
01:14:47,360 --> 01:14:49,280
and so here we go like we press these

2137
01:14:49,280 --> 01:14:51,280
three buttons and then we see this new

2138
01:14:51,280 --> 01:14:53,040
stm32 device show up

2139
01:14:53,040 --> 01:14:55,920
which is very nice someone says the

2140
01:14:55,920 --> 01:14:57,840
combos up up down down left right left

2141
01:14:57,840 --> 01:14:58,239
right

2142
01:14:58,239 --> 01:15:01,679
b apa yeah not quite um

2143
01:15:01,679 --> 01:15:03,440
so yeah this was kind of a neat little

2144
01:15:03,440 --> 01:15:04,800
easter egg that they left in there for

2145
01:15:04,800 --> 01:15:05,920
us and again like this

2146
01:15:05,920 --> 01:15:07,760
this controller is not built with a ton

2147
01:15:07,760 --> 01:15:09,199
of protections you know

2148
01:15:09,199 --> 01:15:11,600
in mind right so this is not something

2149
01:15:11,600 --> 01:15:13,440
you see on a ton of devices it's not

2150
01:15:13,440 --> 01:15:15,120
something that's super commonly found in

2151
01:15:15,120 --> 01:15:15,679
the wild

2152
01:15:15,679 --> 01:15:17,280
but it's it's a good thing to be aware

2153
01:15:17,280 --> 01:15:18,560
of right so you can think of this

2154
01:15:18,560 --> 01:15:19,840
similar to how like

2155
01:15:19,840 --> 01:15:21,199
you know certain android phones or most

2156
01:15:21,199 --> 01:15:22,480
android phones you hold the volume down

2157
01:15:22,480 --> 01:15:23,920
it goes into boot loader mode right

2158
01:15:23,920 --> 01:15:25,280
that's used for

2159
01:15:25,280 --> 01:15:28,159
recovery that's used for you know all

2160
01:15:28,159 --> 01:15:29,679
other kinds of like reflashing modes or

2161
01:15:29,679 --> 01:15:30,080
whatever

2162
01:15:30,080 --> 01:15:32,080
and this is kind of something similar

2163
01:15:32,080 --> 01:15:34,000
and so brandon says yeah except for the

2164
01:15:34,000 --> 01:15:37,280
auth chip that's a hundred percent

2165
01:15:37,280 --> 01:15:40,640
true the these do have an internal uh

2166
01:15:40,640 --> 01:15:42,080
authentication algorithm that has to go

2167
01:15:42,080 --> 01:15:44,159
back and forth with the xbox one um i

2168
01:15:44,159 --> 01:15:45,840
looked at that pretty heavily with the

2169
01:15:45,840 --> 01:15:47,360
360. i haven't looked at it with the

2170
01:15:47,360 --> 01:15:49,040
xbox one so i'm not quite sure how it's

2171
01:15:49,040 --> 01:15:50,800
implemented but basically

2172
01:15:50,800 --> 01:15:53,280
what you would do on the 360 is you

2173
01:15:53,280 --> 01:15:55,120
would capture that authentication you

2174
01:15:55,120 --> 01:15:56,800
would capture the

2175
01:15:56,800 --> 01:15:58,560
using something like usb proxy you could

2176
01:15:58,560 --> 01:16:00,719
capture the authentication request

2177
01:16:00,719 --> 01:16:03,120
and then after that redirect the usb

2178
01:16:03,120 --> 01:16:04,800
traffic to essentially like another code

2179
01:16:04,800 --> 01:16:05,840
path so

2180
01:16:05,840 --> 01:16:08,080
instead of reading from the controller

2181
01:16:08,080 --> 01:16:09,440
you would have like a man in the middle

2182
01:16:09,440 --> 01:16:10,640
kind of thing

2183
01:16:10,640 --> 01:16:13,040
that would uh basically perform the off

2184
01:16:13,040 --> 01:16:14,719
and then you would hot swap over to

2185
01:16:14,719 --> 01:16:16,320
your custom controller that would send

2186
01:16:16,320 --> 01:16:17,840
the necessary hid stuff and that's what

2187
01:16:17,840 --> 01:16:19,120
most of the commercial stuff

2188
01:16:19,120 --> 01:16:20,640
i actually will do that's why you have

2189
01:16:20,640 --> 01:16:22,320
to plug a real controller into it

2190
01:16:22,320 --> 01:16:23,760
a lot of the commercial older commercial

2191
01:16:23,760 --> 01:16:25,440
stuff because you have to pay money for

2192
01:16:25,440 --> 01:16:26,400
this like

2193
01:16:26,400 --> 01:16:29,040
little ic that you soldered your board

2194
01:16:29,040 --> 01:16:29,600
and

2195
01:16:29,600 --> 01:16:31,840
the original xbox would send you like a

2196
01:16:31,840 --> 01:16:32,960
nonce basically

2197
01:16:32,960 --> 01:16:34,640
you would send that to the ic you would

2198
01:16:34,640 --> 01:16:36,080
get a challenge back ship that back to

2199
01:16:36,080 --> 01:16:36,800
the xbox

2200
01:16:36,800 --> 01:16:39,600
and that's how you would keep it from uh

2201
01:16:39,600 --> 01:16:40,800
you know keep people from making

2202
01:16:40,800 --> 01:16:42,480
third-party knock-off controllers and

2203
01:16:42,480 --> 01:16:44,239
yeah this controller is a third-party

2204
01:16:44,239 --> 01:16:46,239
controller it's not an official

2205
01:16:46,239 --> 01:16:47,920
xbox controller i haven't looked at the

2206
01:16:47,920 --> 01:16:49,760
official ones mainly because they're

2207
01:16:49,760 --> 01:16:51,360
they're kind of pricey and i don't feel

2208
01:16:51,360 --> 01:16:52,719
like breaking something that costs you

2209
01:16:52,719 --> 01:16:53,520
know

2210
01:16:53,520 --> 01:16:55,920
that much money but these are a little

2211
01:16:55,920 --> 01:16:57,600
more expendable

2212
01:16:57,600 --> 01:17:02,560
so again now we have this device in

2213
01:17:02,560 --> 01:17:06,560
dfu mode so with that you can use

2214
01:17:06,560 --> 01:17:08,640
the dfu util to kind of interact with

2215
01:17:08,640 --> 01:17:10,000
these and that's an open source tool

2216
01:17:10,000 --> 01:17:11,360
that you can use to interact with these

2217
01:17:11,360 --> 01:17:12,000
devices

2218
01:17:12,000 --> 01:17:14,640
while they're in dfu mode and so by

2219
01:17:14,640 --> 01:17:16,000
passing it the dash l

2220
01:17:16,000 --> 01:17:19,040
argument you can see

2221
01:17:19,679 --> 01:17:22,320
uh the different dfu essentially like

2222
01:17:22,320 --> 01:17:23,760
peripherals that are presented so we can

2223
01:17:23,760 --> 01:17:25,679
go back to the terminal and do that real

2224
01:17:25,679 --> 01:17:28,000
quick

2225
01:17:28,840 --> 01:17:31,840
so

2226
01:17:32,080 --> 01:17:45,840
dfu until

2227
01:17:47,120 --> 01:17:49,840
all right so

2228
01:17:55,360 --> 01:17:58,320
what did i do oh sorry folks give me one

2229
01:17:58,320 --> 01:17:59,520
second

2230
01:17:59,520 --> 01:18:00,719
i thought i had already built this

2231
01:18:00,719 --> 01:18:03,600
apparently i had not

2232
01:18:04,320 --> 01:18:05,760
see how well this works building

2233
01:18:05,760 --> 01:18:07,199
something live i don't understand what

2234
01:18:07,199 --> 01:18:12,640
could go wrong here

2235
01:18:12,640 --> 01:18:16,480
uh matt there's a link to the um

2236
01:18:16,480 --> 01:18:20,159
the controller on

2237
01:18:20,159 --> 01:18:23,520
the hackaday io page and uh i can i can

2238
01:18:23,520 --> 01:18:24,560
post that as well

2239
01:18:24,560 --> 01:18:27,840
just give me one second

2240
01:18:30,560 --> 01:18:32,159
so yeah as we watch this go by i'm happy

2241
01:18:32,159 --> 01:18:34,239
to answer any questions people have

2242
01:18:34,239 --> 01:18:36,800
um so is there otp bootloader reading

2243
01:18:36,800 --> 01:18:38,320
the pins and jumping to the wrong boot

2244
01:18:38,320 --> 01:18:38,960
loader

2245
01:18:38,960 --> 01:18:40,719
or did they hook the buttons up to the

2246
01:18:40,719 --> 01:18:42,719
boot pins great question andy i don't

2247
01:18:42,719 --> 01:18:43,120
know

2248
01:18:43,120 --> 01:18:44,400
and it's kind of hard to tell because

2249
01:18:44,400 --> 01:18:46,640
the chip is covered in epoxy uh so i

2250
01:18:46,640 --> 01:18:48,159
can't tell what pins they're connected

2251
01:18:48,159 --> 01:18:48,960
to

2252
01:18:48,960 --> 01:18:50,480
i only know the outcome when you hold

2253
01:18:50,480 --> 01:18:52,159
those three buttons

2254
01:18:52,159 --> 01:18:54,239
uh i wish we had the pin out right if we

2255
01:18:54,239 --> 01:18:55,440
had the pin out and we had the part

2256
01:18:55,440 --> 01:18:57,040
number we probably wouldn't be here

2257
01:18:57,040 --> 01:18:58,000
doing this

2258
01:18:58,000 --> 01:19:00,400
um so i have to assume the otp

2259
01:19:00,400 --> 01:19:01,040
bootloader

2260
01:19:01,040 --> 01:19:03,760
is jumping to some other internal uh

2261
01:19:03,760 --> 01:19:07,040
read-only memory that's usable

2262
01:19:07,040 --> 01:19:10,000
all right so that seems good let's build

2263
01:19:10,000 --> 01:19:11,360
this

2264
01:19:11,360 --> 01:19:14,559
now please don't

2265
01:19:16,719 --> 01:19:19,440
all right looks like we're good so now

2266
01:19:19,440 --> 01:19:20,080
if we do

2267
01:19:20,080 --> 01:19:23,760
dfu util

2268
01:19:23,760 --> 01:19:26,480
dash l can't open the device we have to

2269
01:19:26,480 --> 01:19:27,920
run it as a super user

2270
01:19:27,920 --> 01:19:32,400
all right cool so now we're seeing these

2271
01:19:33,600 --> 01:19:34,800
these uh these interfaces that are

2272
01:19:34,800 --> 01:19:37,040
presented and so these are the different

2273
01:19:37,040 --> 01:19:37,679
features

2274
01:19:37,679 --> 01:19:39,040
that if you've ever written code for an

2275
01:19:39,040 --> 01:19:41,040
stm32 there are options

2276
01:19:41,040 --> 01:19:42,560
you know option bytes basically to

2277
01:19:42,560 --> 01:19:43,760
configure various things about the

2278
01:19:43,760 --> 01:19:44,480
processor

2279
01:19:44,480 --> 01:19:45,920
there's you know feature bytes that you

2280
01:19:45,920 --> 01:19:47,440
can read and write from and then the

2281
01:19:47,440 --> 01:19:49,040
one-time programmable memory that we

2282
01:19:49,040 --> 01:19:50,960
talked about before

2283
01:19:50,960 --> 01:19:53,520
so uh we also have you know access to

2284
01:19:53,520 --> 01:19:54,480
the internal flash

2285
01:19:54,480 --> 01:19:56,960
which is super useful because in my case

2286
01:19:56,960 --> 01:19:58,400
when i had reflashed this controller

2287
01:19:58,400 --> 01:19:59,760
with a markdown file

2288
01:19:59,760 --> 01:20:01,679
and it didn't run it was nice to be able

2289
01:20:01,679 --> 01:20:04,400
to access the flash via

2290
01:20:04,400 --> 01:20:08,080
this dfu utility so

2291
01:20:08,080 --> 01:20:10,000
if you want to read that out you can do

2292
01:20:10,000 --> 01:20:11,280
it with the following

2293
01:20:11,280 --> 01:20:17,120
command so we can do let me go back here

2294
01:20:17,120 --> 01:20:20,400
dfu util

2295
01:20:25,440 --> 01:20:28,239
and then so first of all we'll give it

2296
01:20:28,239 --> 01:20:29,120
the

2297
01:20:29,120 --> 01:20:30,320
alternative number here so we're going

2298
01:20:30,320 --> 01:20:31,600
to say if we wanted to read the internal

2299
01:20:31,600 --> 01:20:32,320
flash

2300
01:20:32,320 --> 01:20:35,520
we do dash a zero dash

2301
01:20:35,520 --> 01:20:38,800
s and then give it the range so we see

2302
01:20:38,800 --> 01:20:40,159
here that it starts at

2303
01:20:40,159 --> 01:20:42,960
hex eight zero zero zero zero zero zero

2304
01:20:42,960 --> 01:20:44,400
which makes sense right that was about

2305
01:20:44,400 --> 01:20:46,639
the address range that we saw in uh the

2306
01:20:46,639 --> 01:20:47,199
gdb

2307
01:20:47,199 --> 01:20:49,760
prompt that we were in so let's paste

2308
01:20:49,760 --> 01:20:51,440
that

2309
01:20:51,440 --> 01:20:55,120
and then the flash size we know

2310
01:20:55,120 --> 01:20:57,199
from before but you can also see here

2311
01:20:57,199 --> 01:20:58,239
that they've got

2312
01:20:58,239 --> 01:21:02,159
um the calculation here so this four

2313
01:21:02,159 --> 01:21:04,639
times zero one six kg essentially

2314
01:21:04,639 --> 01:21:06,159
translates to zero x

2315
01:21:06,159 --> 01:21:08,480
four one two three four and then we're

2316
01:21:08,480 --> 01:21:10,480
gonna tell it to upload

2317
01:21:10,480 --> 01:21:12,880
which might seem counterintuitive upload

2318
01:21:12,880 --> 01:21:13,679
meaning

2319
01:21:13,679 --> 01:21:16,400
uh upload the code back from you know

2320
01:21:16,400 --> 01:21:17,199
the device

2321
01:21:17,199 --> 01:21:20,639
and let's just call this dfutest.bin

2322
01:21:20,639 --> 01:21:22,639
very creative with our names here so

2323
01:21:22,639 --> 01:21:23,760
we'll do that

2324
01:21:23,760 --> 01:21:25,520
see we're uploading the internal flash

2325
01:21:25,520 --> 01:21:27,360
now if we look at

2326
01:21:27,360 --> 01:21:28,719
the let's let's take a look at the

2327
01:21:28,719 --> 01:21:29,920
strings of the internal flash just to

2328
01:21:29,920 --> 01:21:31,679
verify we're actually getting what we

2329
01:21:31,679 --> 01:21:32,719
wrote to it before

2330
01:21:32,719 --> 01:21:35,120
so remember before we change that string

2331
01:21:35,120 --> 01:21:35,920
to say you know

2332
01:21:35,920 --> 01:21:38,400
hackaday u remotocon what have you so

2333
01:21:38,400 --> 01:21:40,560
let's take a look at this dfu test

2334
01:21:40,560 --> 01:21:44,320
step in like that

2335
01:21:44,320 --> 01:21:46,880
less and let's go keep scrolling down

2336
01:21:46,880 --> 01:21:48,080
i'm sure this is

2337
01:21:48,080 --> 01:21:49,280
horrific for those of you that are

2338
01:21:49,280 --> 01:21:51,679
trying to read this and so

2339
01:21:51,679 --> 01:21:56,560
let's see

2340
01:21:56,560 --> 01:21:59,920
let's go back to this

2341
01:21:59,920 --> 01:22:01,280
so this is the hex editor in the

2342
01:22:01,280 --> 01:22:03,840
terminal let's go back and see

2343
01:22:03,840 --> 01:22:06,480
if our changes are still in here

2344
01:22:06,480 --> 01:22:07,440
assuming we didn't

2345
01:22:07,440 --> 01:22:11,839
mess anything up

2346
01:22:14,239 --> 01:22:17,440
oh interesting so something got

2347
01:22:17,440 --> 01:22:20,800
something got messed up huh so it looks

2348
01:22:20,800 --> 01:22:24,480
like it didn't actually

2349
01:22:24,480 --> 01:22:26,320
what did we do wrong all right let's

2350
01:22:26,320 --> 01:22:28,880
take a look at this

2351
01:22:29,120 --> 01:22:30,400
so yeah we read this app but what we

2352
01:22:30,400 --> 01:22:31,840
read out is actually different than what

2353
01:22:31,840 --> 01:22:33,600
we had written to before i may have

2354
01:22:33,600 --> 01:22:36,239
oh crap i sorry folks i swapped

2355
01:22:36,239 --> 01:22:37,760
controllers on you

2356
01:22:37,760 --> 01:22:39,280
in between i grab i have three of them

2357
01:22:39,280 --> 01:22:40,480
here on my desk and i grabbed the wrong

2358
01:22:40,480 --> 01:22:41,120
one

2359
01:22:41,120 --> 01:22:44,159
so we we read the flash out over

2360
01:22:44,159 --> 01:22:45,679
dfu till someone was asking for the

2361
01:22:45,679 --> 01:22:48,239
arguments

2362
01:22:49,040 --> 01:22:53,840
and the arguments are right here

2363
01:22:56,159 --> 01:22:59,760
so the arguments are dash a for the

2364
01:22:59,760 --> 01:23:03,120
essentially like the address or the um

2365
01:23:03,120 --> 01:23:06,159
the interface number so in the dash l

2366
01:23:06,159 --> 01:23:08,159
output you could see that there were

2367
01:23:08,159 --> 01:23:09,920
interface numbers that were appended to

2368
01:23:09,920 --> 01:23:11,120
things so we have

2369
01:23:11,120 --> 01:23:13,440
zero whoops we have zero one two and

2370
01:23:13,440 --> 01:23:14,560
three

2371
01:23:14,560 --> 01:23:18,400
and so dash a is for zero one two and

2372
01:23:18,400 --> 01:23:18,800
three

2373
01:23:18,800 --> 01:23:20,800
and then s is the start address and then

2374
01:23:20,800 --> 01:23:24,080
the size upload saying hey we want to

2375
01:23:24,080 --> 01:23:26,639
uh we want you to upload code us and

2376
01:23:26,639 --> 01:23:29,920
then dfu flash.bim

2377
01:23:29,920 --> 01:23:32,560
and so we can use this this dfu utility

2378
01:23:32,560 --> 01:23:34,639
to read out the various flashbangs

2379
01:23:34,639 --> 01:23:36,000
the alt setting which is how we tell it

2380
01:23:36,000 --> 01:23:38,800
what bank we want

2381
01:23:39,440 --> 01:23:42,320
the address range so we give it the

2382
01:23:42,320 --> 01:23:45,120
range that we care about

2383
01:23:45,120 --> 01:23:46,960
and then we tell it hey we want to

2384
01:23:46,960 --> 01:23:48,880
upload the information back to

2385
01:23:48,880 --> 01:23:51,120
us

2386
01:23:52,000 --> 01:23:54,639
and so now we can you know write the

2387
01:23:54,639 --> 01:23:55,600
original image back

2388
01:23:55,600 --> 01:23:57,920
we can also erase and unprotect the

2389
01:23:57,920 --> 01:23:58,639
flash

2390
01:23:58,639 --> 01:24:02,719
so i'm going to do that now

2391
01:24:02,719 --> 01:24:05,120
in the terminal if anybody has any other

2392
01:24:05,120 --> 01:24:06,719
questions definitely feel free

2393
01:24:06,719 --> 01:24:07,840
yeah these controllers someone's

2394
01:24:07,840 --> 01:24:09,440
mentioning in the chat these controllers

2395
01:24:09,440 --> 01:24:10,400
are super cheap

2396
01:24:10,400 --> 01:24:12,719
used um they're like typically less than

2397
01:24:12,719 --> 01:24:17,840
ten dollars

2398
01:24:22,719 --> 01:24:25,760
so i'm typing in that command now

2399
01:24:25,760 --> 01:24:30,719
to change that

2400
01:24:30,719 --> 01:24:32,320
okay and just so you can see what that

2401
01:24:32,320 --> 01:24:34,799
looks like

2402
01:24:40,080 --> 01:24:43,040
so we're telling it hey we want to force

2403
01:24:43,040 --> 01:24:45,600
unprotect the flash region

2404
01:24:45,600 --> 01:24:47,280
for this interface and it tells us right

2405
01:24:47,280 --> 01:24:48,639
here that everything's good

2406
01:24:48,639 --> 01:24:51,679
and so when it disconnects though that's

2407
01:24:51,679 --> 01:24:53,199
not necessarily a problem but we've

2408
01:24:53,199 --> 01:24:54,960
unprotected the flash

2409
01:24:54,960 --> 01:24:56,840
it disconnects and now it's showing up

2410
01:24:56,840 --> 01:24:58,400
as

2411
01:24:58,400 --> 01:25:01,199
the the original device again let me see

2412
01:25:01,199 --> 01:25:02,080
if i have

2413
01:25:02,080 --> 01:25:03,920
a stock firmware image that we can flash

2414
01:25:03,920 --> 01:25:05,600
to it really quick

2415
01:25:05,600 --> 01:25:12,239
one moment

2416
01:25:12,239 --> 01:25:14,000
and yeah any questions definitely toss

2417
01:25:14,000 --> 01:25:15,600
them in the chat and we'll

2418
01:25:15,600 --> 01:25:18,239
we'll get to them

2419
01:25:19,840 --> 01:25:22,880
uh some people are asking um

2420
01:25:22,880 --> 01:25:24,560
yeah so you'll you do you will notice on

2421
01:25:24,560 --> 01:25:25,840
the silk screen if you have one of these

2422
01:25:25,840 --> 01:25:27,520
it does say single wire to bug backwards

2423
01:25:27,520 --> 01:25:29,280
so if you hold it up into a mirror

2424
01:25:29,280 --> 01:25:31,760
you know kind of like candyman style and

2425
01:25:31,760 --> 01:25:33,360
say its name three times you can

2426
01:25:33,360 --> 01:25:34,719
also get access to the single wire to

2427
01:25:34,719 --> 01:25:40,239
bug port that way

2428
01:25:40,239 --> 01:25:41,440
let's give me one moment here i'm

2429
01:25:41,440 --> 01:25:43,600
looking to see if i have a

2430
01:25:43,600 --> 01:25:47,440
firmware image that we can reflash to it

2431
01:25:47,440 --> 01:25:49,600
and yeah please by all means ask ask

2432
01:25:49,600 --> 01:25:55,840
away as far as questions go

2433
01:26:04,480 --> 01:26:07,120
it is so jack is asking um is it

2434
01:26:07,120 --> 01:26:08,719
internal flash or spy it's internal

2435
01:26:08,719 --> 01:26:11,040
flash

2436
01:26:16,159 --> 01:26:19,199
uh so now right if we want to

2437
01:26:19,199 --> 01:26:21,199
upload a new image the first thing we

2438
01:26:21,199 --> 01:26:23,520
have to do is boot it back into

2439
01:26:23,520 --> 01:26:25,440
dfu mode so we've unlocked that

2440
01:26:25,440 --> 01:26:26,639
flashbang

2441
01:26:26,639 --> 01:26:30,639
so let's boot it back into dfu mode

2442
01:26:30,800 --> 01:26:32,960
okay we can see that there stm32

2443
01:26:32,960 --> 01:26:35,199
bootloader

2444
01:26:35,199 --> 01:26:38,960
and let's go back here so now

2445
01:26:38,960 --> 01:26:40,480
let's take our let's take our image that

2446
01:26:40,480 --> 01:26:43,199
we just read

2447
01:26:44,320 --> 01:26:50,639
let's copy that to rank it up in

2448
01:26:50,639 --> 01:26:54,000
and let's change let's see

2449
01:26:54,000 --> 01:26:57,199
if we can change the serial number so we

2450
01:26:57,199 --> 01:26:58,560
can see here the serial number is zero

2451
01:26:58,560 --> 01:26:59,199
zero zero

2452
01:26:59,199 --> 01:27:05,839
fd7 c95 so let's see if we can find this

2453
01:27:18,960 --> 01:27:21,920
okay not found great uh probably not

2454
01:27:21,920 --> 01:27:23,760
true this is not the best text editor i

2455
01:27:23,760 --> 01:27:25,600
just use it uh in the terminal so that

2456
01:27:25,600 --> 01:27:26,560
other folks can see

2457
01:27:26,560 --> 01:27:29,840
what's going on so let's see what we can

2458
01:27:29,840 --> 01:27:30,239
find

2459
01:27:30,239 --> 01:27:32,000
if we could find that and change it see

2460
01:27:32,000 --> 01:27:35,920
if we can re-upload that

2461
01:27:44,840 --> 01:27:47,120
okay

2462
01:27:47,120 --> 01:27:48,960
yeah so this data is all kinds of

2463
01:27:48,960 --> 01:27:50,880
corrupted here which is interesting i'm

2464
01:27:50,880 --> 01:27:51,440
not sure

2465
01:27:51,440 --> 01:27:54,000
what i was thinking when i flashed this

2466
01:27:54,000 --> 01:27:54,719
one

2467
01:27:54,719 --> 01:27:58,480
um i also may have another

2468
01:27:58,480 --> 01:28:02,638
stock one somewhere um

2469
01:28:03,760 --> 01:28:08,800
so let me see

2470
01:28:08,960 --> 01:28:10,639
give me one second let me see if i have

2471
01:28:10,639 --> 01:28:12,239
another another stock one that we can

2472
01:28:12,239 --> 01:28:15,839
grab since we've got a little time

2473
01:28:31,199 --> 01:28:32,560
all right folks we're in luck we've got

2474
01:28:32,560 --> 01:28:35,280
a we've got a stock

2475
01:28:35,280 --> 01:28:38,320
stock controller so

2476
01:28:38,320 --> 01:28:41,360
so running uh running a stock tune um

2477
01:28:41,360 --> 01:28:42,320
all right so let's go ahead i'm going to

2478
01:28:42,320 --> 01:28:44,960
connect that one up so

2479
01:28:44,960 --> 01:28:48,400
yeah you guys are at the hardware view

2480
01:28:48,400 --> 01:28:50,480
uh jaren is asking how did you get

2481
01:28:50,480 --> 01:28:51,440
started with all this do you mean

2482
01:28:51,440 --> 01:28:52,719
reversing in general or with this

2483
01:28:52,719 --> 01:28:53,760
controller

2484
01:28:53,760 --> 01:28:55,199
because i had explained before the

2485
01:28:55,199 --> 01:28:56,960
controller stuff started because

2486
01:28:56,960 --> 01:28:58,239
i'm terrible at fighting games and i

2487
01:28:58,239 --> 01:28:59,600
wanted to try to stand a chance against

2488
01:28:59,600 --> 01:29:00,239
my friends and

2489
01:29:00,239 --> 01:29:03,440
obviously that didn't work very well

2490
01:29:03,520 --> 01:29:05,440
yeah so i can totally just grab the the

2491
01:29:05,440 --> 01:29:07,120
flashover dfu and i'm going to do that

2492
01:29:07,120 --> 01:29:07,440
with

2493
01:29:07,440 --> 01:29:09,679
this this new stock controller that

2494
01:29:09,679 --> 01:29:11,360
doesn't have any kind of modifications

2495
01:29:11,360 --> 01:29:13,760
to the image so that we can actually uh

2496
01:29:13,760 --> 01:29:14,719
see some changes

2497
01:29:14,719 --> 01:29:17,760
when they happen so

2498
01:29:17,760 --> 01:29:21,280
plug this guy in let's go into let's go

2499
01:29:21,280 --> 01:29:23,120
into dfu mode

2500
01:29:23,120 --> 01:29:24,800
hold down the buttons and another

2501
01:29:24,800 --> 01:29:25,840
interesting thing if you have this

2502
01:29:25,840 --> 01:29:26,719
controller

2503
01:29:26,719 --> 01:29:29,199
you can um when you hold those buttons

2504
01:29:29,199 --> 01:29:30,719
it makes the

2505
01:29:30,719 --> 01:29:32,400
the motors rumble i don't know if you

2506
01:29:32,400 --> 01:29:33,760
guys could see that on the camera

2507
01:29:33,760 --> 01:29:35,440
but uh it makes the motor rumble which

2508
01:29:35,440 --> 01:29:36,880
is kind of an interesting feature it

2509
01:29:36,880 --> 01:29:38,400
actually it almost sort of scared me

2510
01:29:38,400 --> 01:29:39,440
when it happened the first time

2511
01:29:39,440 --> 01:29:42,000
like what on earth is this uh so yeah we

2512
01:29:42,000 --> 01:29:42,960
plugged it in

2513
01:29:42,960 --> 01:29:46,239
and again here it's showing up so stm32

2514
01:29:46,239 --> 01:29:47,280
bootloader

2515
01:29:47,280 --> 01:29:51,199
so let's upload it and we'll do

2516
01:29:51,199 --> 01:29:55,040
stock firmware

2517
01:29:55,360 --> 01:29:57,360
cool so we've now read the enter the

2518
01:29:57,360 --> 01:30:00,159
internal flash

2519
01:30:00,560 --> 01:30:07,840
and so

2520
01:30:08,400 --> 01:30:09,920
one thing that you'll notice if any of

2521
01:30:09,920 --> 01:30:11,520
you do decide to

2522
01:30:11,520 --> 01:30:14,800
take a look at this and to modify it um

2523
01:30:14,800 --> 01:30:16,480
the null termination on a lot of these

2524
01:30:16,480 --> 01:30:18,719
strings like isn't really properly

2525
01:30:18,719 --> 01:30:20,159
implemented so you have to be careful

2526
01:30:20,159 --> 01:30:21,760
when you're just patching this

2527
01:30:21,760 --> 01:30:24,960
hex file um so that you don't uh

2528
01:30:24,960 --> 01:30:28,639
overrun anything so we know that this

2529
01:30:28,639 --> 01:30:31,040
shows up so let's try let's try we let's

2530
01:30:31,040 --> 01:30:32,719
try that again

2531
01:30:32,719 --> 01:30:35,520
so we're going to say hello hackaday

2532
01:30:35,520 --> 01:30:37,040
emoticon

2533
01:30:37,040 --> 01:30:41,920
remo take on get it together matt

2534
01:30:43,360 --> 01:30:47,760
and yeah so then it's going to say

2535
01:30:47,760 --> 01:30:48,840
testing

2536
01:30:48,840 --> 01:30:53,600
controller firmware patches

2537
01:30:53,600 --> 01:30:56,880
and then we'll just do all right

2538
01:30:56,880 --> 01:30:59,440
so here's our let me just i didn't

2539
01:30:59,440 --> 01:31:00,480
realize you folks were looking at the

2540
01:31:00,480 --> 01:31:01,679
hardware i apologize

2541
01:31:01,679 --> 01:31:05,040
so here is uh let me move myself out of

2542
01:31:05,040 --> 01:31:07,360
the way

2543
01:31:07,600 --> 01:31:09,360
so here's our little patch that we're

2544
01:31:09,360 --> 01:31:11,040
going to add

2545
01:31:11,040 --> 01:31:14,840
and so now let's see if we can flash

2546
01:31:14,840 --> 01:31:16,239
that

2547
01:31:16,239 --> 01:31:18,719
apologies that the camera is kind of all

2548
01:31:18,719 --> 01:31:21,280
over the place

2549
01:31:22,080 --> 01:31:26,080
all right yes save the changes so now

2550
01:31:26,080 --> 01:31:29,280
we're gonna unlock the flash

2551
01:31:29,280 --> 01:31:32,400
um and

2552
01:31:32,400 --> 01:31:34,639
we're gonna need to it'll reset itself

2553
01:31:34,639 --> 01:31:36,080
so i'm gonna hold the buttons when i run

2554
01:31:36,080 --> 01:31:37,120
this because it's gonna unlock the

2555
01:31:37,120 --> 01:31:39,120
flashbangs and then do like a soft reset

2556
01:31:39,120 --> 01:31:42,239
so we'll do this

2557
01:31:42,840 --> 01:31:46,639
okay and so let's just double check

2558
01:31:46,639 --> 01:31:48,480
d message make sure it's showing up it

2559
01:31:48,480 --> 01:31:49,760
is it's showing up as our

2560
01:31:49,760 --> 01:31:52,239
bootloader device and so now to reflash

2561
01:31:52,239 --> 01:31:53,280
a new image

2562
01:31:53,280 --> 01:31:57,360
we'll do dash so defuse address the same

2563
01:31:57,360 --> 01:31:58,960
eight and then six zeros one two three

2564
01:31:58,960 --> 01:32:00,320
four five six yeah

2565
01:32:00,320 --> 01:32:02,159
the rumble was actually a little jarring

2566
01:32:02,159 --> 01:32:03,760
um

2567
01:32:03,760 --> 01:32:05,440
i wasn't sure if i if the first time it

2568
01:32:05,440 --> 01:32:06,639
happened i was just squeezing the

2569
01:32:06,639 --> 01:32:07,760
controller too hard because i was

2570
01:32:07,760 --> 01:32:08,880
frustrated

2571
01:32:08,880 --> 01:32:10,400
but uh yeah the rumble can be very

2572
01:32:10,400 --> 01:32:12,400
jarring so we'll do uh dash d

2573
01:32:12,400 --> 01:32:13,679
for the target file we want to do and

2574
01:32:13,679 --> 01:32:15,920
then mod.bin so we've

2575
01:32:15,920 --> 01:32:18,320
uh we pulled the stock image we patched

2576
01:32:18,320 --> 01:32:18,960
it

2577
01:32:18,960 --> 01:32:22,000
and then we are now gonna we unlocked

2578
01:32:22,000 --> 01:32:22,960
the flash

2579
01:32:22,960 --> 01:32:24,400
it reset itself we put it back into

2580
01:32:24,400 --> 01:32:26,159
bootloader mode and now we're gonna

2581
01:32:26,159 --> 01:32:29,760
push this modified flash image

2582
01:32:29,760 --> 01:32:31,120
and yeah joseph is saying they probably

2583
01:32:31,120 --> 01:32:32,719
stored it somewhere i think he's right

2584
01:32:32,719 --> 01:32:34,560
um because that same serial number i

2585
01:32:34,560 --> 01:32:36,239
think does show up in one of the other

2586
01:32:36,239 --> 01:32:37,040
like otp

2587
01:32:37,040 --> 01:32:40,239
blobs if i recall correctly so

2588
01:32:40,239 --> 01:32:42,480
with a dash capital d now let's see if

2589
01:32:42,480 --> 01:32:43,840
we can re-flash

2590
01:32:43,840 --> 01:32:45,760
with our mod.bin file let's see what

2591
01:32:45,760 --> 01:32:47,440
happens here

2592
01:32:47,440 --> 01:32:49,600
okay so first you're seeing that it's

2593
01:32:49,600 --> 01:32:50,480
erasing

2594
01:32:50,480 --> 01:32:51,679
so we talked about that before we have

2595
01:32:51,679 --> 01:32:53,520
to erase first and then we have to write

2596
01:32:53,520 --> 01:32:54,400
to it

2597
01:32:54,400 --> 01:32:58,719
so let this get moving

2598
01:32:58,960 --> 01:33:00,480
yeah there are there are a lot of mats

2599
01:33:00,480 --> 01:33:03,199
in the chat huh

2600
01:33:06,840 --> 01:33:09,840
um

2601
01:33:10,000 --> 01:33:13,360
yeah so in general um re

2602
01:33:13,360 --> 01:33:14,719
for me i kind of got started just

2603
01:33:14,719 --> 01:33:16,560
patching games in college like older

2604
01:33:16,560 --> 01:33:18,000
game boy games and things like that i

2605
01:33:18,000 --> 01:33:20,080
had a lot of friends that were playing

2606
01:33:20,080 --> 01:33:21,920
uh emulated versions of pokemon and i

2607
01:33:21,920 --> 01:33:23,679
didn't have the time to keep up so i was

2608
01:33:23,679 --> 01:33:24,639
trying to like

2609
01:33:24,639 --> 01:33:26,480
patch save files so that i didn't have

2610
01:33:26,480 --> 01:33:27,679
to play as much

2611
01:33:27,679 --> 01:33:30,960
um most of my re uh

2612
01:33:30,960 --> 01:33:32,560
initial steps in aria were me just being

2613
01:33:32,560 --> 01:33:34,239
lazy with games if i'm being completely

2614
01:33:34,239 --> 01:33:34,960
honest

2615
01:33:34,960 --> 01:33:36,159
but it made it interesting and it made

2616
01:33:36,159 --> 01:33:38,239
it more fun um so that's why i like when

2617
01:33:38,239 --> 01:33:39,840
i teach this stuff i try to do it

2618
01:33:39,840 --> 01:33:40,560
through like

2619
01:33:40,560 --> 01:33:42,239
game consoles and things like that or

2620
01:33:42,239 --> 01:33:43,840
you know console peripherals smaller

2621
01:33:43,840 --> 01:33:45,760
game cabinets etc

2622
01:33:45,760 --> 01:33:48,960
so all right so we

2623
01:33:48,960 --> 01:33:51,520
we've reflashed it and now let's uh

2624
01:33:51,520 --> 01:33:52,960
let's try to reenumerate and see if our

2625
01:33:52,960 --> 01:33:54,800
changes actually took place

2626
01:33:54,800 --> 01:33:58,480
so i'm unplugging the controller now

2627
01:33:58,480 --> 01:34:01,040
plug it back in so we see usb device

2628
01:34:01,040 --> 01:34:02,960
what do we got

2629
01:34:02,960 --> 01:34:05,280
hey so there we go here's our hello

2630
01:34:05,280 --> 01:34:07,040
hackaday remotocon testing controller

2631
01:34:07,040 --> 01:34:09,840
firmware patches

2632
01:34:11,600 --> 01:34:14,800
so uh we can now we can reflash this

2633
01:34:14,800 --> 01:34:16,639
via two ways right we can do it via

2634
01:34:16,639 --> 01:34:18,480
single wire to bug and open ocd or we

2635
01:34:18,480 --> 01:34:19,360
can do it via

2636
01:34:19,360 --> 01:34:23,120
dfu util and the the nice thing about

2637
01:34:23,120 --> 01:34:24,800
dfu u2 i think is andy's pointing out

2638
01:34:24,800 --> 01:34:26,400
here is if you know how to make it enter

2639
01:34:26,400 --> 01:34:27,440
this mode you don't have to solder

2640
01:34:27,440 --> 01:34:28,159
anything to it

2641
01:34:28,159 --> 01:34:29,679
so those of you that have this at home

2642
01:34:29,679 --> 01:34:31,199
you don't have to crack the controller

2643
01:34:31,199 --> 01:34:31,600
open

2644
01:34:31,600 --> 01:34:33,920
and solder to those pins because

2645
01:34:33,920 --> 01:34:35,520
unfortunately with those pins soldered

2646
01:34:35,520 --> 01:34:36,719
to you can't close it back

2647
01:34:36,719 --> 01:34:40,400
up so now that you have

2648
01:34:40,400 --> 01:34:42,960
this little bit of knowledge you can go

2649
01:34:42,960 --> 01:34:43,679
through and

2650
01:34:43,679 --> 01:34:45,199
just hold those buttons when you plug it

2651
01:34:45,199 --> 01:34:46,960
in and uh

2652
01:34:46,960 --> 01:34:48,719
then you can use dfu util to read and

2653
01:34:48,719 --> 01:34:51,520
write and re-flash the firmware

2654
01:34:51,520 --> 01:34:52,880
and so with that i'm going to jump back

2655
01:34:52,880 --> 01:34:55,440
to the slides

2656
01:34:55,440 --> 01:34:57,040
uh spork is asking how we learned that

2657
01:34:57,040 --> 01:34:59,040
it was dfu enabled that was

2658
01:34:59,040 --> 01:35:00,880
honestly completely by accident i was

2659
01:35:00,880 --> 01:35:02,239
holding buttons down

2660
01:35:02,239 --> 01:35:04,639
while i plugged it in and uh i noticed

2661
01:35:04,639 --> 01:35:06,560
that it rumbled when i plugged it in

2662
01:35:06,560 --> 01:35:09,360
um and so it's not an uncommon feature

2663
01:35:09,360 --> 01:35:10,639
as other people are saying in chat to

2664
01:35:10,639 --> 01:35:12,480
have certain gpio lines tied to certain

2665
01:35:12,480 --> 01:35:13,199
boot modes

2666
01:35:13,199 --> 01:35:15,199
uh it's super common in the automotive

2667
01:35:15,199 --> 01:35:16,719
space it's common in

2668
01:35:16,719 --> 01:35:18,480
i mean most microcontrollers right they

2669
01:35:18,480 --> 01:35:20,880
can they can boot up into other boot

2670
01:35:20,880 --> 01:35:22,159
loader modes in order to

2671
01:35:22,159 --> 01:35:26,320
you know re-flash or read firmware so

2672
01:35:26,320 --> 01:35:27,760
oh it wasn't the rumble that told me it

2673
01:35:27,760 --> 01:35:29,920
was dfu uh someone said it was the fact

2674
01:35:29,920 --> 01:35:31,840
that it presented itself as uh let me go

2675
01:35:31,840 --> 01:35:33,520
back we're in the terminal now so

2676
01:35:33,520 --> 01:35:35,440
it presents itself as a different device

2677
01:35:35,440 --> 01:35:36,719
and that's how

2678
01:35:36,719 --> 01:35:38,800
it was uh understood that it was dfu

2679
01:35:38,800 --> 01:35:39,840
yeah it wasn't uh

2680
01:35:39,840 --> 01:35:41,679
i'm not like a rumble whisperer i didn't

2681
01:35:41,679 --> 01:35:43,520
know like oh it rumbled this many times

2682
01:35:43,520 --> 01:35:45,840
it's this is obviously a dfu rumble no

2683
01:35:45,840 --> 01:35:47,119
it was a it showed up

2684
01:35:47,119 --> 01:35:48,480
because what had happened was because i

2685
01:35:48,480 --> 01:35:50,159
had overwritten the device

2686
01:35:50,159 --> 01:35:52,560
with a bad firmware image nothing showed

2687
01:35:52,560 --> 01:35:53,679
up when i plugged it in

2688
01:35:53,679 --> 01:35:55,520
so i'm you know frantically sitting in d

2689
01:35:55,520 --> 01:35:57,119
message plugging and replugging

2690
01:35:57,119 --> 01:35:58,960
and then i had access i was accidentally

2691
01:35:58,960 --> 01:36:00,000
holding those buttons down when i

2692
01:36:00,000 --> 01:36:01,920
plugged it in and the device showed up

2693
01:36:01,920 --> 01:36:05,040
um so that was a fun fun evening for

2694
01:36:05,040 --> 01:36:06,719
sure but yeah as someone mentioned uh

2695
01:36:06,719 --> 01:36:10,000
yeah hard work to avoid playing yeah

2696
01:36:10,000 --> 01:36:11,520
that's that's pretty accurate actually

2697
01:36:11,520 --> 01:36:14,639
working hard to avoid play

2698
01:36:16,639 --> 01:36:18,800
so yes let's go back we'll go back to

2699
01:36:18,800 --> 01:36:20,000
these slides now and so yeah people ask

2700
01:36:20,000 --> 01:36:21,520
you we can pull the firmware over dfu

2701
01:36:21,520 --> 01:36:22,960
you can reflash it we can do

2702
01:36:22,960 --> 01:36:24,639
uh basically everything that we can do

2703
01:36:24,639 --> 01:36:26,239
over um

2704
01:36:26,239 --> 01:36:28,560
single wire to bug except for obviously

2705
01:36:28,560 --> 01:36:30,639
the image isn't running so

2706
01:36:30,639 --> 01:36:32,320
you can't single step through the

2707
01:36:32,320 --> 01:36:34,560
firmware when it's in dfu mode dfu mode

2708
01:36:34,560 --> 01:36:35,119
is used

2709
01:36:35,119 --> 01:36:37,600
strictly for reflashing and and you know

2710
01:36:37,600 --> 01:36:39,679
it's frankly probably a little safer

2711
01:36:39,679 --> 01:36:40,880
because you're not

2712
01:36:40,880 --> 01:36:42,320
running an active firmware image while

2713
01:36:42,320 --> 01:36:43,679
you're trying to reflash things if maybe

2714
01:36:43,679 --> 01:36:45,280
if you don't properly halt and try to

2715
01:36:45,280 --> 01:36:46,480
re-flash it which could have been what

2716
01:36:46,480 --> 01:36:48,320
happened before when we saw our issues

2717
01:36:48,320 --> 01:36:50,400
um this stuff never work you know when

2718
01:36:50,400 --> 01:36:51,920
you're approaching this as a reverse

2719
01:36:51,920 --> 01:36:53,199
engineer it's important to remember this

2720
01:36:53,199 --> 01:36:53,679
stuff

2721
01:36:53,679 --> 01:36:55,440
doesn't always just work out of the box

2722
01:36:55,440 --> 01:36:56,880
like it's supposed to right you're gonna

2723
01:36:56,880 --> 01:36:58,320
run into setbacks you're gonna you're

2724
01:36:58,320 --> 01:36:59,679
gonna have issues and that's why it's

2725
01:36:59,679 --> 01:37:00,080
kind of

2726
01:37:00,080 --> 01:37:02,560
important to understand what these

2727
01:37:02,560 --> 01:37:03,360
things look like

2728
01:37:03,360 --> 01:37:05,600
at an extremely low level and so if you

2729
01:37:05,600 --> 01:37:07,040
took the geidra course that we put

2730
01:37:07,040 --> 01:37:07,840
together

2731
01:37:07,840 --> 01:37:10,639
we kind of architected it such that you

2732
01:37:10,639 --> 01:37:11,280
know you

2733
01:37:11,280 --> 01:37:13,280
had such a the goal was to give you like

2734
01:37:13,280 --> 01:37:14,159
a strong understanding of the

2735
01:37:14,159 --> 01:37:14,880
fundamentals

2736
01:37:14,880 --> 01:37:16,560
and it's really no different here right

2737
01:37:16,560 --> 01:37:18,320
so by understanding the protocols and

2738
01:37:18,320 --> 01:37:19,520
like what to look for

2739
01:37:19,520 --> 01:37:21,440
and things like that you you're in a

2740
01:37:21,440 --> 01:37:23,679
better position than just kind of

2741
01:37:23,679 --> 01:37:26,080
blindly you know trying to fire away and

2742
01:37:26,080 --> 01:37:27,600
get stuff to work because nine times out

2743
01:37:27,600 --> 01:37:28,159
of ten

2744
01:37:28,159 --> 01:37:31,280
the tools are obviously awesome

2745
01:37:31,280 --> 01:37:33,679
but they're not designed necessarily

2746
01:37:33,679 --> 01:37:35,280
specifically for reverse engineering

2747
01:37:35,280 --> 01:37:36,639
right they kind of assume you know a lot

2748
01:37:36,639 --> 01:37:37,520
about your target

2749
01:37:37,520 --> 01:37:38,719
they assume you have the right hardware

2750
01:37:38,719 --> 01:37:40,400
interface and a lot of times that's just

2751
01:37:40,400 --> 01:37:41,119
not the case

2752
01:37:41,119 --> 01:37:42,560
so as a reverse engineer you kind of

2753
01:37:42,560 --> 01:37:43,840
have to make do with what you have and

2754
01:37:43,840 --> 01:37:45,840
what we have are the core fundamentals

2755
01:37:45,840 --> 01:37:47,440
of the protocol that we've talked about

2756
01:37:47,440 --> 01:37:50,480
today and i hope that makes sense if not

2757
01:37:50,480 --> 01:37:52,960
i'm happy to elaborate

2758
01:37:52,960 --> 01:37:55,840
i hope that's not too preachy but so

2759
01:37:55,840 --> 01:37:58,639
yeah dfu mode

2760
01:37:58,639 --> 01:38:00,400
i can post the command line for this on

2761
01:38:00,400 --> 01:38:01,840
the course page if people are interested

2762
01:38:01,840 --> 01:38:02,719
in that

2763
01:38:02,719 --> 01:38:03,600
for those of you that have the

2764
01:38:03,600 --> 01:38:04,960
controller at home and want to take a

2765
01:38:04,960 --> 01:38:06,560
look at it without

2766
01:38:06,560 --> 01:38:09,840
soldering and desoldering

2767
01:38:10,320 --> 01:38:13,280
and so yeah this was interesting in dfu

2768
01:38:13,280 --> 01:38:15,199
mode single wire debug doesn't work

2769
01:38:15,199 --> 01:38:17,040
so that's why when i had originally

2770
01:38:17,040 --> 01:38:19,199
bricked mine um

2771
01:38:19,199 --> 01:38:22,639
the this was super useful so there

2772
01:38:22,639 --> 01:38:24,880
may be ways to get it to work in uh

2773
01:38:24,880 --> 01:38:26,800
single wire to bug i was unable to get

2774
01:38:26,800 --> 01:38:28,960
single wire debug working in dfu mode

2775
01:38:28,960 --> 01:38:30,639
and i wasn't sure if maybe the port was

2776
01:38:30,639 --> 01:38:31,840
just

2777
01:38:31,840 --> 01:38:35,440
disabled so that was just an interesting

2778
01:38:35,440 --> 01:38:36,000
thing

2779
01:38:36,000 --> 01:38:37,840
but basically regardless of what state

2780
01:38:37,840 --> 01:38:39,280
you put this device in unless you

2781
01:38:39,280 --> 01:38:41,119
somehow overwrite that core bootloader

2782
01:38:41,119 --> 01:38:42,320
which i wouldn't recommend you

2783
01:38:42,320 --> 01:38:44,960
do uh and that may even be otp right

2784
01:38:44,960 --> 01:38:46,080
there's a good chance that that internal

2785
01:38:46,080 --> 01:38:47,199
bootloader isn't something you can

2786
01:38:47,199 --> 01:38:48,320
access anyway

2787
01:38:48,320 --> 01:38:50,719
um so but between dfu and single wire

2788
01:38:50,719 --> 01:38:51,360
debugging

2789
01:38:51,360 --> 01:38:53,440
we have you know complete control of

2790
01:38:53,440 --> 01:38:54,560
this uh

2791
01:38:54,560 --> 01:38:58,560
of this controller so

2792
01:38:58,560 --> 01:39:01,679
um you know quick recap the controller

2793
01:39:01,679 --> 01:39:03,440
has two mechanisms through which we can

2794
01:39:03,440 --> 01:39:05,119
upload and download firmware single wire

2795
01:39:05,119 --> 01:39:06,960
debugging and device firmware upgrade

2796
01:39:06,960 --> 01:39:08,000
dfu mode

2797
01:39:08,000 --> 01:39:09,920
and as was pointed out there are no

2798
01:39:09,920 --> 01:39:11,840
protections on the flash banks

2799
01:39:11,840 --> 01:39:13,199
if there were that would have prevented

2800
01:39:13,199 --> 01:39:14,960
us from reading or writing

2801
01:39:14,960 --> 01:39:16,400
and so luckily for us that was not the

2802
01:39:16,400 --> 01:39:18,400
case and the boot rom for this

2803
01:39:18,400 --> 01:39:20,000
particular stm32

2804
01:39:20,000 --> 01:39:22,239
has handlers that are capable of jumping

2805
01:39:22,239 --> 01:39:24,159
into dfu mode which we found that you

2806
01:39:24,159 --> 01:39:25,679
could enter by pressing those three

2807
01:39:25,679 --> 01:39:26,000
buttons

2808
01:39:26,000 --> 01:39:29,520
on the controller so

2809
01:39:29,520 --> 01:39:32,639
uh just a quick quiz uh if people want

2810
01:39:32,639 --> 01:39:32,960
to

2811
01:39:32,960 --> 01:39:34,400
shout these out and chat you know how

2812
01:39:34,400 --> 01:39:36,239
many lines do you need to implement yep

2813
01:39:36,239 --> 01:39:37,679
two people got it yeah you need two

2814
01:39:37,679 --> 01:39:39,679
lines to implement single wired a

2815
01:39:39,679 --> 01:39:42,800
um what determines the direction of data

2816
01:39:42,800 --> 01:39:44,400
flow in the packet and i know it's been

2817
01:39:44,400 --> 01:39:45,920
a while since we looked at the packet

2818
01:39:45,920 --> 01:39:50,000
um but so let's

2819
01:39:50,000 --> 01:39:52,560
yep header bit perfect and so uh and

2820
01:39:52,560 --> 01:39:54,159
this question is probably a little vague

2821
01:39:54,159 --> 01:39:55,679
but where does single wire debugging fit

2822
01:39:55,679 --> 01:39:56,880
in the grand scheme of the

2823
01:39:56,880 --> 01:39:59,119
dap that we talked about right so how

2824
01:39:59,119 --> 01:40:00,320
does single wire debugging

2825
01:40:00,320 --> 01:40:02,320
fit in that that equation that we had

2826
01:40:02,320 --> 01:40:04,400
with we had you know the dap the dp the

2827
01:40:04,400 --> 01:40:05,520
ap

2828
01:40:05,520 --> 01:40:08,080
right so single wire debugging is the

2829
01:40:08,080 --> 01:40:09,040
hardware

2830
01:40:09,040 --> 01:40:10,719
interface that's used to talk to these

2831
01:40:10,719 --> 01:40:13,360
things perfect and so

2832
01:40:13,360 --> 01:40:16,560
how many types of aps are specified

2833
01:40:16,560 --> 01:40:22,239
in the uh the arm debug specification

2834
01:40:22,239 --> 01:40:23,600
oh man you guys are paying attention

2835
01:40:23,600 --> 01:40:25,440
that's awesome uh yeah so there's two

2836
01:40:25,440 --> 01:40:28,639
mem ap and jtag ap uh and someone asked

2837
01:40:28,639 --> 01:40:30,000
the flash unlock features are they

2838
01:40:30,000 --> 01:40:32,159
available in jlink or openocd

2839
01:40:32,159 --> 01:40:34,719
they are available in both i believe

2840
01:40:34,719 --> 01:40:36,880
they both have mechanisms for

2841
01:40:36,880 --> 01:40:41,199
uh um unlocking flashbangs

2842
01:40:41,840 --> 01:40:43,679
does it require is it common for dfu

2843
01:40:43,679 --> 01:40:46,080
buttons to require those and only those

2844
01:40:46,080 --> 01:40:47,600
um that's a good question we can find

2845
01:40:47,600 --> 01:40:49,520
out let me uh i'll hold down more

2846
01:40:49,520 --> 01:40:52,400
buttons than those three and we'll see

2847
01:40:52,400 --> 01:40:54,159
if it still boots into dfu mode i have a

2848
01:40:54,159 --> 01:40:54,960
feeling it will

2849
01:40:54,960 --> 01:40:57,920
um but could be wrong and andy's asking

2850
01:40:57,920 --> 01:41:00,080
openocd can use the j-link hardware yes

2851
01:41:00,080 --> 01:41:00,639
it can

2852
01:41:00,639 --> 01:41:03,920
um the thing about it is with j

2853
01:41:03,920 --> 01:41:06,159
link and openocd from what i understand

2854
01:41:06,159 --> 01:41:07,440
and things may be different

2855
01:41:07,440 --> 01:41:09,679
um it has a i don't want to say

2856
01:41:09,679 --> 01:41:10,880
rudimentary because that sounds

2857
01:41:10,880 --> 01:41:11,679
condescending

2858
01:41:11,679 --> 01:41:15,360
uh it it does openocd's driver for the

2859
01:41:15,360 --> 01:41:17,679
j-link adapter i don't think is able to

2860
01:41:17,679 --> 01:41:20,159
control it in a super

2861
01:41:20,159 --> 01:41:22,400
uh well-defined or like in a super

2862
01:41:22,400 --> 01:41:24,000
granular way so they're able to

2863
01:41:24,000 --> 01:41:25,440
you're obviously able to do single wire

2864
01:41:25,440 --> 01:41:27,040
debug and jtag and things like that but

2865
01:41:27,040 --> 01:41:27,520
i think

2866
01:41:27,520 --> 01:41:29,840
the segger j-link software is capable of

2867
01:41:29,840 --> 01:41:31,520
doing more with that hardware than open

2868
01:41:31,520 --> 01:41:32,800
ocd

2869
01:41:32,800 --> 01:41:34,880
and that was a long answer to a fairly

2870
01:41:34,880 --> 01:41:37,040
short question but yes you can use it um

2871
01:41:37,040 --> 01:41:38,639
but some of the more advanced features

2872
01:41:38,639 --> 01:41:39,760
that you might see in the segger

2873
01:41:39,760 --> 01:41:41,199
software i don't know if those

2874
01:41:41,199 --> 01:41:42,960
immediately translate over to open ocd

2875
01:41:42,960 --> 01:41:43,520
or not

2876
01:41:43,520 --> 01:41:45,040
and i think that's because the driver

2877
01:41:45,040 --> 01:41:46,719
for that device is closed source

2878
01:41:46,719 --> 01:41:48,719
right so spork is saying uh it has its

2879
01:41:48,719 --> 01:41:50,159
own driver and commands exactly that's

2880
01:41:50,159 --> 01:41:50,719
why

2881
01:41:50,719 --> 01:41:53,199
the way openocd interfaces with it is

2882
01:41:53,199 --> 01:41:54,080
fairly

2883
01:41:54,080 --> 01:41:55,520
bare bones so you don't get a lot of

2884
01:41:55,520 --> 01:41:57,679
those additional features

2885
01:41:57,679 --> 01:42:00,320
so i'm going to hold additional buttons

2886
01:42:00,320 --> 01:42:01,440
on the controller

2887
01:42:01,440 --> 01:42:04,480
and unplug and replug so i'm holding the

2888
01:42:04,480 --> 01:42:06,400
three buttons and i'm gonna hold

2889
01:42:06,400 --> 01:42:09,679
geez i'm gonna hold down a as well

2890
01:42:09,679 --> 01:42:11,360
and let's see in the d message window

2891
01:42:11,360 --> 01:42:13,520
what happens

2892
01:42:13,520 --> 01:42:16,159
okay we got a usb device disconnect as

2893
01:42:16,159 --> 01:42:18,400
expected

2894
01:42:18,400 --> 01:42:20,480
yep still shows up with uh holding

2895
01:42:20,480 --> 01:42:21,679
additional buttons so it looks like it

2896
01:42:21,679 --> 01:42:23,920
only looks for these three

2897
01:42:23,920 --> 01:42:26,480
uh which is interesting actually let me

2898
01:42:26,480 --> 01:42:28,400
see if it only needs one

2899
01:42:28,400 --> 01:42:32,719
um i i always assumed it was just three

2900
01:42:33,360 --> 01:42:36,880
oh interesting yeah okay yeah so it

2901
01:42:36,880 --> 01:42:38,800
looks like it's just those three

2902
01:42:38,800 --> 01:42:43,840
uh so it only works with the three but

2903
01:42:45,520 --> 01:42:48,320
so uh with that being said we are like

2904
01:42:48,320 --> 01:42:49,520
right at seven o'clock

2905
01:42:49,520 --> 01:42:52,000
and we just got through a single wire

2906
01:42:52,000 --> 01:42:53,040
debug

2907
01:42:53,040 --> 01:42:54,560
so i don't think we're going to have

2908
01:42:54,560 --> 01:42:56,800
time to get through

2909
01:42:56,800 --> 01:43:01,119
jtag so with these last few minutes

2910
01:43:01,280 --> 01:43:03,119
we'll wrap up and then take take any

2911
01:43:03,119 --> 01:43:04,320
questions and

2912
01:43:04,320 --> 01:43:07,119
talk with folks so um you know single

2913
01:43:07,119 --> 01:43:07,840
wire debug

2914
01:43:07,840 --> 01:43:09,360
is a physical interface that's used to

2915
01:43:09,360 --> 01:43:10,719
act interact with the hardware level

2916
01:43:10,719 --> 01:43:12,400
debugger it's commonly implemented on

2917
01:43:12,400 --> 01:43:14,719
you know stm32 and other arm based chips

2918
01:43:14,719 --> 01:43:15,119
again

2919
01:43:15,119 --> 01:43:16,560
it's the arm debug interface

2920
01:43:16,560 --> 01:43:18,480
specification so it makes sense you can

2921
01:43:18,480 --> 01:43:19,840
see it on a lot of arm chips

2922
01:43:19,840 --> 01:43:23,280
and that specification is what defines

2923
01:43:23,280 --> 01:43:24,719
all of the various hardware components

2924
01:43:24,719 --> 01:43:26,719
that are utilized by swd so the

2925
01:43:26,719 --> 01:43:29,360
different aps the dps all those

2926
01:43:29,360 --> 01:43:31,760
acronyms that we talked about before and

2927
01:43:31,760 --> 01:43:33,520
so using single wire debug

2928
01:43:33,520 --> 01:43:35,440
we can take full control over this

2929
01:43:35,440 --> 01:43:36,880
target system but it's important to

2930
01:43:36,880 --> 01:43:37,600
remember

2931
01:43:37,600 --> 01:43:40,159
that there are security mechanisms that

2932
01:43:40,159 --> 01:43:41,920
can be put in place to restrict the

2933
01:43:41,920 --> 01:43:43,520
level of access we have over single wire

2934
01:43:43,520 --> 01:43:45,119
debug and it's extremely common in

2935
01:43:45,119 --> 01:43:46,320
targets to see

2936
01:43:46,320 --> 01:43:49,280
the flash banks uh be locked so

2937
01:43:49,280 --> 01:43:49,920
essentially

2938
01:43:49,920 --> 01:43:53,360
they'll get locked to where they're uh

2939
01:43:53,360 --> 01:43:56,000
like write only so you have to erase it

2940
01:43:56,000 --> 01:43:57,199
and then you can write to it but you

2941
01:43:57,199 --> 01:43:58,719
can't read from it and people do that to

2942
01:43:58,719 --> 01:43:59,520
protect ip

2943
01:43:59,520 --> 01:44:07,119
things like that

2944
01:44:07,119 --> 01:44:10,560
all right so any questions

2945
01:44:10,560 --> 01:44:13,040
oh four more hours yeah i can't i can't

2946
01:44:13,040 --> 01:44:14,639
uh i can't quite

2947
01:44:14,639 --> 01:44:16,800
do four more hours folks i'd love to but

2948
01:44:16,800 --> 01:44:18,320
i really uh

2949
01:44:18,320 --> 01:44:20,239
i really can't but i i really hope this

2950
01:44:20,239 --> 01:44:21,440
was helpful and i'm sorry that there

2951
01:44:21,440 --> 01:44:23,119
were some issues with the terminal

2952
01:44:23,119 --> 01:44:26,239
um i hope that you know hopefully in the

2953
01:44:26,239 --> 01:44:27,920
future i can figure out a better way to

2954
01:44:27,920 --> 01:44:29,119
do that i

2955
01:44:29,119 --> 01:44:30,480
my my monitors are pretty high

2956
01:44:30,480 --> 01:44:32,080
resolution so that's that's that's on me

2957
01:44:32,080 --> 01:44:33,600
so i apologize for that i'll try to make

2958
01:44:33,600 --> 01:44:35,280
that better for the last time

2959
01:44:35,280 --> 01:44:39,280
um so yeah i hope that uh

2960
01:44:39,280 --> 01:44:43,040
i hope you guys had fun and

2961
01:44:43,600 --> 01:44:44,880
i hope you learned something and yeah

2962
01:44:44,880 --> 01:44:46,960
i'll hang out uh for any questions folks

2963
01:44:46,960 --> 01:44:47,520
have

2964
01:44:47,520 --> 01:44:50,719
happily um uh

2965
01:44:50,719 --> 01:44:52,880
well matthew i think we're we're we're

2966
01:44:52,880 --> 01:44:55,040
good until 4 50 or 7 15

2967
01:44:55,040 --> 01:44:58,159
or 15 more minutes uh so you can

2968
01:44:58,159 --> 01:44:59,119
definitely

2969
01:44:59,119 --> 01:45:02,560
free up i've got some time so okay

2970
01:45:02,560 --> 01:45:04,400
yeah we can jump we can start to do the

2971
01:45:04,400 --> 01:45:06,639
jtag stuff um

2972
01:45:06,639 --> 01:45:09,840
for sure so we can

2973
01:45:09,840 --> 01:45:11,920
yeah we probably won't get into a lot of

2974
01:45:11,920 --> 01:45:13,679
the tooling and stuff because that takes

2975
01:45:13,679 --> 01:45:15,119
a fair amount of time but we can at

2976
01:45:15,119 --> 01:45:16,159
least go over it

2977
01:45:16,159 --> 01:45:19,280
um if there's no other

2978
01:45:19,280 --> 01:45:22,480
uh questions doesn't look like there is

2979
01:45:22,480 --> 01:45:25,440
yeah um so for more you know material

2980
01:45:25,440 --> 01:45:26,719
and stuff check out the

2981
01:45:26,719 --> 01:45:28,639
the github i o page for this class uh

2982
01:45:28,639 --> 01:45:30,000
some people were asking about the geidra

2983
01:45:30,000 --> 01:45:30,560
course

2984
01:45:30,560 --> 01:45:32,080
that we put on through hackadayu there's

2985
01:45:32,080 --> 01:45:34,080
a github bio page for that as well

2986
01:45:34,080 --> 01:45:37,440
um and uh yeah we can all drop some

2987
01:45:37,440 --> 01:45:39,040
links to that in the chat before it ends

2988
01:45:39,040 --> 01:45:44,639
i'll do that right now before i forget

2989
01:45:44,639 --> 01:45:48,000
um yeah in case you aren't

2990
01:45:48,000 --> 01:45:49,760
completely tired of listening to me talk

2991
01:45:49,760 --> 01:45:52,000
here's hours more of it

2992
01:45:52,000 --> 01:45:53,360
all right so here's the here's the

2993
01:45:53,360 --> 01:45:55,360
guidry oh i sent that to thomas again i

2994
01:45:55,360 --> 01:45:56,320
don't know why i keep doing that i'm

2995
01:45:56,320 --> 01:45:57,520
sorry thomas i don't know why it keeps

2996
01:45:57,520 --> 01:45:58,480
defaulting to you

2997
01:45:58,480 --> 01:46:03,440
uh yeah so here's the guidera course and

2998
01:46:03,600 --> 01:46:06,639
here's uh my

2999
01:46:06,639 --> 01:46:10,159
other page with various embedded re

3000
01:46:10,159 --> 01:46:14,159
musings feel free to enjoy that um

3001
01:46:14,159 --> 01:46:15,760
so yeah we can jump in we can with the

3002
01:46:15,760 --> 01:46:17,440
time we have left we can jump into jtech

3003
01:46:17,440 --> 01:46:18,960
from kind of a high level so let's do

3004
01:46:18,960 --> 01:46:21,199
that

3005
01:46:23,360 --> 01:46:26,960
all right so this is

3006
01:46:26,960 --> 01:46:29,280
ssd we're not really worried about this

3007
01:46:29,280 --> 01:46:30,320
we're just going to burn through this

3008
01:46:30,320 --> 01:46:31,119
really quick

3009
01:46:31,119 --> 01:46:34,239
this is we don't care about any of this

3010
01:46:34,239 --> 01:46:37,600
all right so um

3011
01:46:37,600 --> 01:46:39,920
we're going to spend the next couple of

3012
01:46:39,920 --> 01:46:41,280
minutes just talking about how jtag

3013
01:46:41,280 --> 01:46:42,719
works what it is what it isn't

3014
01:46:42,719 --> 01:46:44,480
uh things like that because it's an ext

3015
01:46:44,480 --> 01:46:46,719
much like the debug access port it's an

3016
01:46:46,719 --> 01:46:48,560
extremely overloaded term

3017
01:46:48,560 --> 01:46:51,920
as you'll come to find um so what is

3018
01:46:51,920 --> 01:46:53,360
jtag it's an ieee spec

3019
01:46:53,360 --> 01:46:55,360
joint test action group similar to how

3020
01:46:55,360 --> 01:46:56,880
single-wire debug is a

3021
01:46:56,880 --> 01:46:59,040
physical specification for interacting

3022
01:46:59,040 --> 01:47:01,280
with a hardware peripheral jtag behaves

3023
01:47:01,280 --> 01:47:02,400
the same way

3024
01:47:02,400 --> 01:47:05,119
it was originally designed to grab i o

3025
01:47:05,119 --> 01:47:05,840
levels

3026
01:47:05,840 --> 01:47:08,560
for different chips and to grab you know

3027
01:47:08,560 --> 01:47:09,679
pin states

3028
01:47:09,679 --> 01:47:11,679
over a small amount of pins so instead

3029
01:47:11,679 --> 01:47:13,119
of having to you know physically test

3030
01:47:13,119 --> 01:47:14,400
each pin you could

3031
01:47:14,400 --> 01:47:16,000
clock signals through this interface and

3032
01:47:16,000 --> 01:47:17,520
figure out what the i o state was of

3033
01:47:17,520 --> 01:47:18,239
every

3034
01:47:18,239 --> 01:47:21,360
external gpio pin where this

3035
01:47:21,360 --> 01:47:24,320
gets confusing is that jtag both defines

3036
01:47:24,320 --> 01:47:25,679
the

3037
01:47:25,679 --> 01:47:28,000
the protocol layer specification and the

3038
01:47:28,000 --> 01:47:29,440
test access port that's used for

3039
01:47:29,440 --> 01:47:31,199
debugging so think of that as like the

3040
01:47:31,199 --> 01:47:32,960
dap that we talked about before

3041
01:47:32,960 --> 01:47:35,679
that's defined in uh the jtag

3042
01:47:35,679 --> 01:47:37,119
specification as the

3043
01:47:37,119 --> 01:47:40,480
tap and so it's

3044
01:47:40,480 --> 01:47:41,760
this is where like it can get really

3045
01:47:41,760 --> 01:47:43,280
confusing and it's extremely overloaded

3046
01:47:43,280 --> 01:47:44,719
term you hear people talking about like

3047
01:47:44,719 --> 01:47:46,880
a j tagged xbox and stuff like that it's

3048
01:47:46,880 --> 01:47:48,000
like it's not a verb

3049
01:47:48,000 --> 01:47:50,080
it's not you know it's uh it can be you

3050
01:47:50,080 --> 01:47:51,760
know very confusing uh when you first

3051
01:47:51,760 --> 01:47:53,600
jump into it yeah someone here says jtag

3052
01:47:53,600 --> 01:47:55,360
is not jtag that's a great way of

3053
01:47:55,360 --> 01:47:56,480
putting it

3054
01:47:56,480 --> 01:47:58,000
so at a minimum it's made up of these

3055
01:47:58,000 --> 01:47:59,600
four pins you've got clock

3056
01:47:59,600 --> 01:48:02,320
test mode select tdi tdo data and data

3057
01:48:02,320 --> 01:48:02,639
out

3058
01:48:02,639 --> 01:48:03,920
there's other additional pins that you

3059
01:48:03,920 --> 01:48:06,159
can add uh like real time clock

3060
01:48:06,159 --> 01:48:08,080
and tap reset for controlling the state

3061
01:48:08,080 --> 01:48:09,360
machine

3062
01:48:09,360 --> 01:48:11,520
um but that is you know in a nutshell

3063
01:48:11,520 --> 01:48:13,280
what the physical interface looks like

3064
01:48:13,280 --> 01:48:15,280
it's typically at least four pins you'll

3065
01:48:15,280 --> 01:48:17,199
often see a system reset pin connected

3066
01:48:17,199 --> 01:48:18,320
to this as well

3067
01:48:18,320 --> 01:48:20,560
and you'll see you know power and ground

3068
01:48:20,560 --> 01:48:22,960
typically too

3069
01:48:22,960 --> 01:48:25,199
so clock is used to control you know

3070
01:48:25,199 --> 01:48:27,440
when data sampled how data is sampled

3071
01:48:27,440 --> 01:48:29,840
tms is used to control where we are

3072
01:48:29,840 --> 01:48:31,760
going in the jtag state machine so

3073
01:48:31,760 --> 01:48:33,360
there's a state machine that the jtag

3074
01:48:33,360 --> 01:48:34,960
specification defines

3075
01:48:34,960 --> 01:48:37,360
that controls what you're writing to

3076
01:48:37,360 --> 01:48:38,560
what you're reading from

3077
01:48:38,560 --> 01:48:41,440
and we'll show that here in a moment tdi

3078
01:48:41,440 --> 01:48:43,280
is used to sample data and write data

3079
01:48:43,280 --> 01:48:45,119
into the register tdo is used to read

3080
01:48:45,119 --> 01:48:46,080
data out

3081
01:48:46,080 --> 01:48:48,560
and so a lot of times when you you see

3082
01:48:48,560 --> 01:48:49,920
people talk about jtag

3083
01:48:49,920 --> 01:48:51,440
they'll talk about it acting like a

3084
01:48:51,440 --> 01:48:53,280
shift register and that

3085
01:48:53,280 --> 01:48:55,199
analogy is great if you already

3086
01:48:55,199 --> 01:48:56,560
understand how it works

3087
01:48:56,560 --> 01:48:58,159
but if you don't understand how it works

3088
01:48:58,159 --> 01:48:59,679
it's extremely confusing right because

3089
01:48:59,679 --> 01:49:00,960
you think well it's a shift register i'm

3090
01:49:00,960 --> 01:49:02,159
just feeding data in and i'm just

3091
01:49:02,159 --> 01:49:03,520
clocking it back out to me

3092
01:49:03,520 --> 01:49:05,360
so what is that what does that mean what

3093
01:49:05,360 --> 01:49:06,639
people forget to

3094
01:49:06,639 --> 01:49:08,400
mention is that they are linked together

3095
01:49:08,400 --> 01:49:10,639
like a shift register but essentially

3096
01:49:10,639 --> 01:49:12,719
you shift data in navigate the state

3097
01:49:12,719 --> 01:49:14,480
machine to a different state

3098
01:49:14,480 --> 01:49:16,239
then you shift data out and through

3099
01:49:16,239 --> 01:49:17,599
doing that you've changed the data

3100
01:49:17,599 --> 01:49:20,480
that's going to come back out on tdo

3101
01:49:20,480 --> 01:49:22,718
so

3102
01:49:24,880 --> 01:49:27,920
the tap or the test access point similar

3103
01:49:27,920 --> 01:49:29,760
to the dap that we talked about

3104
01:49:29,760 --> 01:49:33,360
is what we are going to be interacting

3105
01:49:33,360 --> 01:49:33,760
with

3106
01:49:33,760 --> 01:49:36,080
with that physical interface so every

3107
01:49:36,080 --> 01:49:37,440
internal register access that we're

3108
01:49:37,440 --> 01:49:38,719
going to talk about can be accessed

3109
01:49:38,719 --> 01:49:40,719
through what's called the tab controller

3110
01:49:40,719 --> 01:49:43,199
and the jtag specification defines the

3111
01:49:43,199 --> 01:49:44,960
state machine and the registers that

3112
01:49:44,960 --> 01:49:46,880
this controller interacts with

3113
01:49:46,880 --> 01:49:49,199
and so everything on top of this right

3114
01:49:49,199 --> 01:49:51,040
memory read memory write all the

3115
01:49:51,040 --> 01:49:52,880
components that we actually want

3116
01:49:52,880 --> 01:49:55,440
are implemented outside of the jtag

3117
01:49:55,440 --> 01:49:56,080
state machine

3118
01:49:56,080 --> 01:49:57,360
that we're going to talk about so the

3119
01:49:57,360 --> 01:49:59,199
core jtag state machine is used

3120
01:49:59,199 --> 01:50:02,320
to read and write to a specific set of

3121
01:50:02,320 --> 01:50:03,040
registers

3122
01:50:03,040 --> 01:50:05,199
now what those registers do is entirely

3123
01:50:05,199 --> 01:50:06,480
up to the target chip that you're

3124
01:50:06,480 --> 01:50:07,920
looking at and that's where it can get

3125
01:50:07,920 --> 01:50:09,760
really confusing

3126
01:50:09,760 --> 01:50:11,520
and so here's an example of this state

3127
01:50:11,520 --> 01:50:13,119
machine right so

3128
01:50:13,119 --> 01:50:15,199
we've all seen this diagram or i assume

3129
01:50:15,199 --> 01:50:16,159
a lot of you have probably seen this

3130
01:50:16,159 --> 01:50:17,840
diagram if you've tried to look at jtag

3131
01:50:17,840 --> 01:50:18,560
before

3132
01:50:18,560 --> 01:50:21,840
and so as far as timing goes

3133
01:50:21,840 --> 01:50:23,840
and how data is read on through this

3134
01:50:23,840 --> 01:50:25,119
state machine

3135
01:50:25,119 --> 01:50:28,400
data is valid on tdo when the on the

3136
01:50:28,400 --> 01:50:29,119
falling edge

3137
01:50:29,119 --> 01:50:32,080
of clock in certain ir states now that

3138
01:50:32,080 --> 01:50:32,480
is a

3139
01:50:32,480 --> 01:50:35,360
mouthful right i don't expect anybody to

3140
01:50:35,360 --> 01:50:36,719
understand that like right now

3141
01:50:36,719 --> 01:50:37,920
and we're gonna go through all the

3142
01:50:37,920 --> 01:50:39,360
states so that you understand what that

3143
01:50:39,360 --> 01:50:40,400
actually means

3144
01:50:40,400 --> 01:50:43,440
um data is not

3145
01:50:43,440 --> 01:50:46,719
shifted in when this shift state is

3146
01:50:46,719 --> 01:50:48,400
entered so you enter the state and then

3147
01:50:48,400 --> 01:50:49,679
you start i'm pointing to the monitor

3148
01:50:49,679 --> 01:50:51,040
like you can see that i'm sorry

3149
01:50:51,040 --> 01:50:54,880
so data is not shifted in in this state

3150
01:50:54,880 --> 01:50:57,760
um basically you enter the state and

3151
01:50:57,760 --> 01:50:58,400
then data

3152
01:50:58,400 --> 01:51:01,840
is shifted in and so

3153
01:51:01,840 --> 01:51:04,080
it is shifted in on in the exit state

3154
01:51:04,080 --> 01:51:06,080
and again that's a lot to take in that's

3155
01:51:06,080 --> 01:51:08,320
a lot of

3156
01:51:08,320 --> 01:51:10,560
sort of timing stuff and definitions

3157
01:51:10,560 --> 01:51:11,920
that you're not super quite familiar

3158
01:51:11,920 --> 01:51:13,280
with yet so let's just try to get

3159
01:51:13,280 --> 01:51:14,880
through

3160
01:51:14,880 --> 01:51:17,520
to the core pieces which is this so the

3161
01:51:17,520 --> 01:51:19,360
jtag specification in its entirety

3162
01:51:19,360 --> 01:51:21,280
defines a state machine that you can use

3163
01:51:21,280 --> 01:51:23,199
to read and write to two registers just

3164
01:51:23,199 --> 01:51:23,599
two

3165
01:51:23,599 --> 01:51:24,880
there's no apps there's no dapps there's

3166
01:51:24,880 --> 01:51:26,800
none of that stuff all that stuff gets

3167
01:51:26,800 --> 01:51:27,440
implemented

3168
01:51:27,440 --> 01:51:28,639
you know at a kind of a different level

3169
01:51:28,639 --> 01:51:31,119
but at its core the jtag state machine

3170
01:51:31,119 --> 01:51:32,960
lets you read and write from instruction

3171
01:51:32,960 --> 01:51:33,599
registers

3172
01:51:33,599 --> 01:51:36,080
and data registers now when i say

3173
01:51:36,080 --> 01:51:37,440
instruction and data i'm not talking

3174
01:51:37,440 --> 01:51:39,119
about like a harvard architecture kind

3175
01:51:39,119 --> 01:51:40,239
of thing right there's a there's a

3176
01:51:40,239 --> 01:51:41,840
register that's used to denote

3177
01:51:41,840 --> 01:51:43,280
an instruction that's going to take

3178
01:51:43,280 --> 01:51:45,520
place and there's a register that's used

3179
01:51:45,520 --> 01:51:47,360
to provide additional data for that

3180
01:51:47,360 --> 01:51:48,880
instruction that's going to take place

3181
01:51:48,880 --> 01:51:50,800
so think of a read operation right what

3182
01:51:50,800 --> 01:51:52,400
do you need if you want to do a read

3183
01:51:52,400 --> 01:51:54,639
operation you need a target address

3184
01:51:54,639 --> 01:51:56,880
so you would put in the instruction

3185
01:51:56,880 --> 01:51:58,560
register the read command and in the

3186
01:51:58,560 --> 01:52:00,080
data register you would put the address

3187
01:52:00,080 --> 01:52:01,280
you want to read from

3188
01:52:01,280 --> 01:52:03,440
and so by writing to those two specific

3189
01:52:03,440 --> 01:52:05,360
registers you would perform the read and

3190
01:52:05,360 --> 01:52:06,719
then shift the data back

3191
01:52:06,719 --> 01:52:07,920
out and we're going to show an example

3192
01:52:07,920 --> 01:52:10,159
of how that works but these registers

3193
01:52:10,159 --> 01:52:11,360
define how you

3194
01:52:11,360 --> 01:52:14,320
interact with the tap of the target cpu

3195
01:52:14,320 --> 01:52:14,960
right

3196
01:52:14,960 --> 01:52:18,400
and so every cpu has a different

3197
01:52:18,400 --> 01:52:20,400
essentially a different implementation

3198
01:52:20,400 --> 01:52:21,520
and what different

3199
01:52:21,520 --> 01:52:22,960
and different definitions for the

3200
01:52:22,960 --> 01:52:24,719
instruction registers now the spec

3201
01:52:24,719 --> 01:52:25,599
defines

3202
01:52:25,599 --> 01:52:29,360
that id code is um a certain

3203
01:52:29,360 --> 01:52:32,639
uh instruction value and that bypasses a

3204
01:52:32,639 --> 01:52:34,000
certain instruction value

3205
01:52:34,000 --> 01:52:36,480
and so again we talked about you know

3206
01:52:36,480 --> 01:52:37,599
when you're reverse engineering you want

3207
01:52:37,599 --> 01:52:39,520
to boil something down to its core

3208
01:52:39,520 --> 01:52:40,960
pieces

3209
01:52:40,960 --> 01:52:42,639
we know that those two things have to be

3210
01:52:42,639 --> 01:52:44,800
defined in order for

3211
01:52:44,800 --> 01:52:47,599
the uh tap controller to be jtag

3212
01:52:47,599 --> 01:52:48,880
compliant so those are the two things

3213
01:52:48,880 --> 01:52:49,920
that we'll focus on

3214
01:52:49,920 --> 01:52:52,239
but for now on the whole what you guys

3215
01:52:52,239 --> 01:52:53,280
need to understand

3216
01:52:53,280 --> 01:52:54,880
is that the jtag tab controller

3217
01:52:54,880 --> 01:52:56,400
interacts with two registers the data

3218
01:52:56,400 --> 01:52:58,560
register and the instruction register

3219
01:52:58,560 --> 01:53:00,480
and data is shifted in on tdi as the

3220
01:53:00,480 --> 01:53:02,159
name would imply and it shifted out on

3221
01:53:02,159 --> 01:53:03,679
tdo again as the

3222
01:53:03,679 --> 01:53:07,440
name implies so we talked about

3223
01:53:07,440 --> 01:53:09,760
the instruction register and so these

3224
01:53:09,760 --> 01:53:12,239
are the this register is written to to

3225
01:53:12,239 --> 01:53:13,920
tell the jtag state machine like what

3226
01:53:13,920 --> 01:53:16,239
operation you want to perform

3227
01:53:16,239 --> 01:53:18,400
and so the standard defines the bypass

3228
01:53:18,400 --> 01:53:19,280
instruction

3229
01:53:19,280 --> 01:53:21,199
the ex test instruction the sample

3230
01:53:21,199 --> 01:53:22,960
preload instruction and the id code

3231
01:53:22,960 --> 01:53:23,760
instruction

3232
01:53:23,760 --> 01:53:26,560
now most uh implementations of this that

3233
01:53:26,560 --> 01:53:27,360
you're going to look at you'll

3234
01:53:27,360 --> 01:53:28,400
definitely see id

3235
01:53:28,400 --> 01:53:30,560
code and bypass the other two are a bit

3236
01:53:30,560 --> 01:53:33,920
more tough to maybe define or see

3237
01:53:33,920 --> 01:53:35,280
i'm just saying in the things that i've

3238
01:53:35,280 --> 01:53:36,880
looked at id code and bypass have been

3239
01:53:36,880 --> 01:53:38,000
the two that i've always been able to

3240
01:53:38,000 --> 01:53:39,599
find

3241
01:53:39,599 --> 01:53:41,920
so like like i said before this

3242
01:53:41,920 --> 01:53:43,199
instruction register is used to

3243
01:53:43,199 --> 01:53:44,800
determine what operation is actually

3244
01:53:44,800 --> 01:53:46,000
going to be performed right whether it's

3245
01:53:46,000 --> 01:53:47,440
a read or a write or

3246
01:53:47,440 --> 01:53:49,119
you know querying the status or what

3247
01:53:49,119 --> 01:53:50,320
have you and this is all going to be

3248
01:53:50,320 --> 01:53:50,880
defined

3249
01:53:50,880 --> 01:53:53,599
by the cpu vendor and this is where like

3250
01:53:53,599 --> 01:53:55,440
black box jtag reversing

3251
01:53:55,440 --> 01:53:57,920
becomes pretty difficult because it is

3252
01:53:57,920 --> 01:53:59,520
just a black box right you write to this

3253
01:53:59,520 --> 01:54:00,800
instruction register you write to this

3254
01:54:00,800 --> 01:54:02,400
data register and you just try to see

3255
01:54:02,400 --> 01:54:03,520
what comes out

3256
01:54:03,520 --> 01:54:04,639
and you're just kind of hoping for the

3257
01:54:04,639 --> 01:54:07,199
best now there are tricks that you can

3258
01:54:07,199 --> 01:54:08,320
do to

3259
01:54:08,320 --> 01:54:10,239
infer more about what different

3260
01:54:10,239 --> 01:54:12,159
registers do and how they behave and

3261
01:54:12,159 --> 01:54:12,480
we'll

3262
01:54:12,480 --> 01:54:13,679
you know we might get to that we

3263
01:54:13,679 --> 01:54:15,679
probably won't but

3264
01:54:15,679 --> 01:54:17,599
uh the instruction register is used to

3265
01:54:17,599 --> 01:54:20,239
tell this the tap or the debugging core

3266
01:54:20,239 --> 01:54:22,480
what you want to do

3267
01:54:22,480 --> 01:54:26,159
the data register are used to

3268
01:54:26,159 --> 01:54:28,000
basically provide additional information

3269
01:54:28,000 --> 01:54:29,440
to the instruction register and so this

3270
01:54:29,440 --> 01:54:30,719
is another thing you'll hear people say

3271
01:54:30,719 --> 01:54:32,719
and it's 100 true but to me it was

3272
01:54:32,719 --> 01:54:35,280
very confusing initially was that the

3273
01:54:35,280 --> 01:54:36,320
instruction register

3274
01:54:36,320 --> 01:54:37,920
the instruction register selects the

3275
01:54:37,920 --> 01:54:39,599
data register

3276
01:54:39,599 --> 01:54:41,679
yes that makes total sense but you might

3277
01:54:41,679 --> 01:54:43,199
think about it too much and think like

3278
01:54:43,199 --> 01:54:44,560
wait then why do we even have it if it

3279
01:54:44,560 --> 01:54:46,159
just picks a data register why can't i

3280
01:54:46,159 --> 01:54:47,520
pick a data register

3281
01:54:47,520 --> 01:54:50,000
well the instruction register when that

3282
01:54:50,000 --> 01:54:51,199
gets selected

3283
01:54:51,199 --> 01:54:53,679
that loads up a particular data register

3284
01:54:53,679 --> 01:54:55,520
it basically maps to a particular data

3285
01:54:55,520 --> 01:54:56,480
register right

3286
01:54:56,480 --> 01:54:59,199
so that is what people mean like when

3287
01:54:59,199 --> 01:55:00,239
they say that the

3288
01:55:00,239 --> 01:55:02,639
data the instruction register selects a

3289
01:55:02,639 --> 01:55:04,800
data register

3290
01:55:04,800 --> 01:55:06,159
and so again we talked about it can be

3291
01:55:06,159 --> 01:55:08,320
used for things like target address

3292
01:55:08,320 --> 01:55:09,760
or a target value if you're trying to

3293
01:55:09,760 --> 01:55:11,520
write

3294
01:55:11,520 --> 01:55:14,960
but the the

3295
01:55:14,960 --> 01:55:17,679
data register is you know read write so

3296
01:55:17,679 --> 01:55:18,000
when

3297
01:55:18,000 --> 01:55:19,920
you perform an operation and you want to

3298
01:55:19,920 --> 01:55:21,920
look at the result you read from the

3299
01:55:21,920 --> 01:55:24,560
data register for that operation

3300
01:55:24,560 --> 01:55:26,000
and i think we'll get to a point where

3301
01:55:26,000 --> 01:55:27,119
we'll walk through the state machine and

3302
01:55:27,119 --> 01:55:29,199
this will make more sense

3303
01:55:29,199 --> 01:55:30,719
so again sorry i'm talking really fast

3304
01:55:30,719 --> 01:55:31,760
i'm trying to get you guys through the

3305
01:55:31,760 --> 01:55:33,360
core pieces here so i'm sorry please

3306
01:55:33,360 --> 01:55:35,440
toss questions in and i'll uh i'll

3307
01:55:35,440 --> 01:55:36,400
answer them at the end

3308
01:55:36,400 --> 01:55:38,560
if we have time the state machine

3309
01:55:38,560 --> 01:55:40,239
defines like the core piece of jtag

3310
01:55:40,239 --> 01:55:40,960
functionality

3311
01:55:40,960 --> 01:55:42,400
uh each node in the state machine has a

3312
01:55:42,400 --> 01:55:43,520
different purpose and we'll talk about

3313
01:55:43,520 --> 01:55:44,560
what those are

3314
01:55:44,560 --> 01:55:46,960
tms is used to basically navigate

3315
01:55:46,960 --> 01:55:48,800
between these different state machines

3316
01:55:48,800 --> 01:55:50,400
and by interacting with the state

3317
01:55:50,400 --> 01:55:52,239
machine you get access to those two core

3318
01:55:52,239 --> 01:55:53,599
registers we talked about right

3319
01:55:53,599 --> 01:55:55,040
the instruction register and the data

3320
01:55:55,040 --> 01:55:57,040
register and

3321
01:55:57,040 --> 01:55:58,320
by reading and writing to these

3322
01:55:58,320 --> 01:56:00,239
registers we can eventually perform the

3323
01:56:00,239 --> 01:56:01,920
desired debug operations that we care

3324
01:56:01,920 --> 01:56:04,159
about

3325
01:56:04,400 --> 01:56:07,280
so state machine navigation uh the state

3326
01:56:07,280 --> 01:56:09,199
machine is navigated by the

3327
01:56:09,199 --> 01:56:12,480
clock and the tms signal so the clock

3328
01:56:12,480 --> 01:56:14,480
signals when you sample when tms gets

3329
01:56:14,480 --> 01:56:15,599
sampled tms

3330
01:56:15,599 --> 01:56:17,760
controls which state in that machine it

3331
01:56:17,760 --> 01:56:18,960
jumps to next

3332
01:56:18,960 --> 01:56:22,719
so every clock cycle tms is sampled and

3333
01:56:22,719 --> 01:56:24,000
the state machine is updated

3334
01:56:24,000 --> 01:56:26,800
now if there's a tap reset pin that's

3335
01:56:26,800 --> 01:56:28,480
asserted on a clock cycle

3336
01:56:28,480 --> 01:56:31,280
you will jump to the default value for

3337
01:56:31,280 --> 01:56:32,639
the state machine you'll jump back to

3338
01:56:32,639 --> 01:56:32,960
the

3339
01:56:32,960 --> 01:56:37,119
initial state so test logic reset

3340
01:56:37,119 --> 01:56:42,080
first state in the state machine

3341
01:56:42,080 --> 01:56:44,000
is the reset state for the tap so this

3342
01:56:44,000 --> 01:56:46,000
is where it starts

3343
01:56:46,000 --> 01:56:48,880
um you can get to this state machine

3344
01:56:48,880 --> 01:56:51,119
from any state by holding tmsi

3345
01:56:51,119 --> 01:56:52,880
high for five clock cycles and this is

3346
01:56:52,880 --> 01:56:55,599
all defined in the specification

3347
01:56:55,599 --> 01:56:57,599
and when this happens this is important

3348
01:56:57,599 --> 01:57:00,000
to know when this happens the id code

3349
01:57:00,000 --> 01:57:00,639
instruction

3350
01:57:00,639 --> 01:57:02,960
is loaded so what that means is that the

3351
01:57:02,960 --> 01:57:04,800
data register now contains

3352
01:57:04,800 --> 01:57:06,560
the id code for the chip and this is

3353
01:57:06,560 --> 01:57:08,639
what things like the jtagulator use

3354
01:57:08,639 --> 01:57:11,920
to try to find the state of the uh

3355
01:57:11,920 --> 01:57:13,599
controller right or try to find what

3356
01:57:13,599 --> 01:57:15,199
pins or what so essentially the

3357
01:57:15,199 --> 01:57:16,239
algorithm is

3358
01:57:16,239 --> 01:57:19,040
you hold tms high you clock in you know

3359
01:57:19,040 --> 01:57:19,440
five

3360
01:57:19,440 --> 01:57:22,880
clock cycles you navigate to the uh

3361
01:57:22,880 --> 01:57:25,760
shift dr state and read it and look for

3362
01:57:25,760 --> 01:57:26,880
an id code

3363
01:57:26,880 --> 01:57:28,480
and that's there's a really great paper

3364
01:57:28,480 --> 01:57:30,159
called a black box jtag reverse

3365
01:57:30,159 --> 01:57:31,360
engineering i'll try to grab

3366
01:57:31,360 --> 01:57:33,440
a link to it and drop it in the chat um

3367
01:57:33,440 --> 01:57:36,840
that defines this very very well so let

3368
01:57:36,840 --> 01:57:38,639
me

3369
01:57:38,639 --> 01:57:42,159
grab this real quick it's from uh

3370
01:57:42,159 --> 01:57:45,520
i don't wanna i don't wanna if i try to

3371
01:57:45,520 --> 01:57:46,639
pronounce the author

3372
01:57:46,639 --> 01:57:48,080
author's name i'll probably butcher it

3373
01:57:48,080 --> 01:57:49,920
but here is the link to the paper

3374
01:57:49,920 --> 01:57:51,920
um and this will cover everything that

3375
01:57:51,920 --> 01:57:53,040
we were going to cover

3376
01:57:53,040 --> 01:57:56,000
today so this is a really great starting

3377
01:57:56,000 --> 01:57:57,679
point for uh people that want to learn

3378
01:57:57,679 --> 01:57:58,400
how

3379
01:57:58,400 --> 01:57:59,679
jtag works from like a reverse

3380
01:57:59,679 --> 01:58:01,280
engineering perspective and it's it's a

3381
01:58:01,280 --> 01:58:02,239
really easy read

3382
01:58:02,239 --> 01:58:04,800
it's written really well um it's a it's

3383
01:58:04,800 --> 01:58:05,679
a great paper

3384
01:58:05,679 --> 01:58:07,920
it's really great can't recommend it i

3385
01:58:07,920 --> 01:58:09,119
really can't recommend it higher enough

3386
01:58:09,119 --> 01:58:09,520
like

3387
01:58:09,520 --> 01:58:11,920
if you're confused by you know what jtag

3388
01:58:11,920 --> 01:58:12,800
is or what it does

3389
01:58:12,800 --> 01:58:15,840
give this paper two or three reads

3390
01:58:15,840 --> 01:58:18,960
uh and it's very short um but it's it's

3391
01:58:18,960 --> 01:58:20,320
really it's really great

3392
01:58:20,320 --> 01:58:24,080
um all right

3393
01:58:24,080 --> 01:58:26,560
yeah so test logic reset is the default

3394
01:58:26,560 --> 01:58:28,000
state of the state machine

3395
01:58:28,000 --> 01:58:30,480
um and then you have run test idle this

3396
01:58:30,480 --> 01:58:32,400
state literally performs nothing it's

3397
01:58:32,400 --> 01:58:34,159
just for idling or for waiting if you're

3398
01:58:34,159 --> 01:58:35,599
waiting for an operation to finish or

3399
01:58:35,599 --> 01:58:36,639
you know something might take a certain

3400
01:58:36,639 --> 01:58:37,840
amount of time you can return to that

3401
01:58:37,840 --> 01:58:39,599
state

3402
01:58:39,599 --> 01:58:41,520
so select dr scan this is basically

3403
01:58:41,520 --> 01:58:42,719
telling the tap

3404
01:58:42,719 --> 01:58:44,960
that or select ir scan it's basically

3405
01:58:44,960 --> 01:58:46,480
telling the tab hey i want to select the

3406
01:58:46,480 --> 01:58:49,119
instruction register or i want to

3407
01:58:49,119 --> 01:58:52,080
select the data register so if tms is

3408
01:58:52,080 --> 01:58:53,199
one

3409
01:58:53,199 --> 01:58:55,119
so if tms is one we go here and then if

3410
01:58:55,119 --> 01:58:57,119
we clock one again it goes here

3411
01:58:57,119 --> 01:58:58,719
okay just so people are clear on how

3412
01:58:58,719 --> 01:59:00,239
this state machine is navigated

3413
01:59:00,239 --> 01:59:03,440
these numbers uh depict the state of tms

3414
01:59:03,440 --> 01:59:05,920
when a clock cycle is read

3415
01:59:05,920 --> 01:59:10,320
and i guess with that i think we are at

3416
01:59:10,320 --> 01:59:16,080
i think we're at 7 15 i don't think

3417
01:59:16,080 --> 01:59:17,840
yeah there's so much more to get through

3418
01:59:17,840 --> 01:59:19,920
but in a nutshell

3419
01:59:19,920 --> 01:59:22,159
that's there's a lot of it um there's a

3420
01:59:22,159 --> 01:59:22,960
lot of this but

3421
01:59:22,960 --> 01:59:26,480
uh that is

3422
01:59:26,480 --> 01:59:28,320
uh and so what you might see let me just

3423
01:59:28,320 --> 01:59:30,000
real quick uh before people head

3424
01:59:30,000 --> 01:59:32,000
out if you're looking for you know

3425
01:59:32,000 --> 01:59:33,440
potential headers let me switch over to

3426
01:59:33,440 --> 01:59:36,320
the microscope here

3427
01:59:37,599 --> 01:59:40,080
um

3428
01:59:40,960 --> 01:59:43,360
this would be this we've got eight pins

3429
01:59:43,360 --> 01:59:44,639
here lined up and there's

3430
01:59:44,639 --> 01:59:47,679
you know four additional pins uh on top

3431
01:59:47,679 --> 01:59:49,520
of it which are actually used uh for

3432
01:59:49,520 --> 01:59:50,800
in system programming for this

3433
01:59:50,800 --> 01:59:52,880
particular chip which is pretty neat but

3434
01:59:52,880 --> 01:59:54,880
yeah you got four pins lined up like

3435
01:59:54,880 --> 01:59:56,800
that uh pretty small pitch

3436
01:59:56,800 --> 01:59:58,000
well it's actually just two millimeter

3437
01:59:58,000 --> 01:59:59,920
it's not that weird but yeah you'll

3438
01:59:59,920 --> 02:00:02,639
typically see you know more than

3439
02:00:02,639 --> 02:00:06,159
six pins for a jtag header um

3440
02:00:06,159 --> 02:00:07,760
if the header is not broken out the

3441
02:00:07,760 --> 02:00:09,280
minimum amount you need are those four

3442
02:00:09,280 --> 02:00:12,480
pins tms tck tdi and tdo

3443
02:00:12,480 --> 02:00:15,599
and so that was the 15-minute speed run

3444
02:00:15,599 --> 02:00:15,920
of

3445
02:00:15,920 --> 02:00:18,080
of jtag i know we didn't really get to

3446
02:00:18,080 --> 02:00:19,840
everything but

3447
02:00:19,840 --> 02:00:22,159
you know read that paper that paper is

3448
02:00:22,159 --> 02:00:24,480
great and uh you know reach out to me on

3449
02:00:24,480 --> 02:00:25,840
twitter or wherever if you have any

3450
02:00:25,840 --> 02:00:27,440
questions about about this kind of stuff

3451
02:00:27,440 --> 02:00:29,440
i'm happy to help

3452
02:00:29,440 --> 02:00:32,400
well matthew uh thank you for presenting

3453
02:00:32,400 --> 02:00:32,960
such

3454
02:00:32,960 --> 02:00:35,920
an engaging engaging program for us

3455
02:00:35,920 --> 02:00:37,920
there was a lot of information

3456
02:00:37,920 --> 02:00:40,000
uh but you didn't let it become an

3457
02:00:40,000 --> 02:00:42,719
overwhelming flood of data

3458
02:00:42,719 --> 02:00:45,920
uh and i i have to say you have a great

3459
02:00:45,920 --> 02:00:46,800
cadence for

3460
02:00:46,800 --> 02:00:50,159
presenting very technical material

3461
02:00:50,159 --> 02:00:51,840
and seeing you breeze through this

3462
02:00:51,840 --> 02:00:53,520
debugging session

3463
02:00:53,520 --> 02:00:55,199
i can tell that you're a very patient

3464
02:00:55,199 --> 02:00:55,780
person

3465
02:00:55,780 --> 02:00:58,800
[Laughter]

3466
02:00:58,800 --> 02:01:00,400
but i'd like to invite everyone to

3467
02:01:00,400 --> 02:01:02,000
continue the discussion

3468
02:01:02,000 --> 02:01:04,960
on the hackaday.ios webpage in its

3469
02:01:04,960 --> 02:01:06,159
public chat

3470
02:01:06,159 --> 02:01:08,560
and i posted it in the group chat on the

3471
02:01:08,560 --> 02:01:09,360
side here

3472
02:01:09,360 --> 02:01:12,400
of the zoom room and i'd like to say

3473
02:01:12,400 --> 02:01:15,440
uh thank you to all the attendees uh you

3474
02:01:15,440 --> 02:01:17,199
know this is really a community that

3475
02:01:17,199 --> 02:01:20,480
rallies around sharing knowledge uh

3476
02:01:20,480 --> 02:01:23,679
giving positive feedback and that's

3477
02:01:23,679 --> 02:01:26,000
one of the things that's made remote con

3478
02:01:26,000 --> 02:01:28,480
a really great experience

3479
02:01:28,480 --> 02:01:31,119
uh so uh you'll be able to catch and

3480
02:01:31,119 --> 02:01:31,760
view

3481
02:01:31,760 --> 02:01:34,000
uh the other discussions and videos that

3482
02:01:34,000 --> 02:01:35,199
you may have missed

3483
02:01:35,199 --> 02:01:38,239
on hackaday's youtube channel

3484
02:01:38,239 --> 02:01:40,560
and with that uh i'd like to thank

3485
02:01:40,560 --> 02:01:41,520
everyone for

3486
02:01:41,520 --> 02:01:44,719
participating in ramonacon uh hope

3487
02:01:44,719 --> 02:01:47,040
we'll hope to see you again or very soon

3488
02:01:47,040 --> 02:01:48,560
so uh

3489
02:01:48,560 --> 02:01:50,159
keep a look out for our social media

3490
02:01:50,159 --> 02:01:53,440
accounts and uh yeah

3491
02:01:53,440 --> 02:01:56,320
all right everyone thank you again yeah

3492
02:01:56,320 --> 02:01:57,599
thanks for thanks for hanging out thanks

3493
02:01:57,599 --> 02:02:00,800
for the questions everybody this was

3494
02:02:02,840 --> 02:02:05,840
great

3495
02:02:11,840 --> 02:02:13,920
you

