1
00:00:04,400 --> 00:00:06,240
hello everyone my name is christina

2
00:00:06,240 --> 00:00:08,320
panos i'm one of hackaday's staff

3
00:00:08,320 --> 00:00:10,000
writers

4
00:00:10,000 --> 00:00:12,160
our next speaker rob weinstein is an

5
00:00:12,160 --> 00:00:14,240
electrical engineer who has spent 30

6
00:00:14,240 --> 00:00:17,279
years designing with fpgas primarily in

7
00:00:17,279 --> 00:00:19,840
the wireless communications field but

8
00:00:19,840 --> 00:00:21,760
like most of us he was doing fun stuff

9
00:00:21,760 --> 00:00:24,000
on the side the entire time

10
00:00:24,000 --> 00:00:26,480
most recently rob reverse engineered a

11
00:00:26,480 --> 00:00:28,960
45 year old patent into a working

12
00:00:28,960 --> 00:00:32,079
replica of the hp 35 just in time for

13
00:00:32,079 --> 00:00:34,480
the calculator's 50th birthday

14
00:00:34,480 --> 00:00:37,840
please welcome rob weinstein

15
00:00:37,840 --> 00:00:40,800
hello i'm rob weinstein in commemoration

16
00:00:40,800 --> 00:00:42,960
of the upcoming 50-year anniversary of

17
00:00:42,960 --> 00:00:45,840
the introduction of the hp 35 calculator

18
00:00:45,840 --> 00:00:48,559
i'm presenting patently obvious reverse

19
00:00:48,559 --> 00:00:51,120
engineering a 45 year old patent into a

20
00:00:51,120 --> 00:00:53,760
fully functional replica of the hp35

21
00:00:53,760 --> 00:00:55,920
scientific calculator

22
00:00:55,920 --> 00:00:57,760
this presentation is about how i built a

23
00:00:57,760 --> 00:01:00,320
fully functional replica of the hp35

24
00:01:00,320 --> 00:01:02,559
calculator based on u.s patent four

25
00:01:02,559 --> 00:01:05,360
million one thousand five sixty nine i

26
00:01:05,360 --> 00:01:07,439
used a small fpga board for each of the

27
00:01:07,439 --> 00:01:10,320
seven ics each designed faithfully to

28
00:01:10,320 --> 00:01:12,640
what's described in 569

29
00:01:12,640 --> 00:01:15,600
together the seven ics comprise a 56-bit

30
00:01:15,600 --> 00:01:18,560
serial cpu and display subsystem that

31
00:01:18,560 --> 00:01:20,479
runs a calculator program stored in

32
00:01:20,479 --> 00:01:22,640
three of the ics there's no

33
00:01:22,640 --> 00:01:26,159
microprocessor emulation here

34
00:01:26,159 --> 00:01:27,680
how i got here

35
00:01:27,680 --> 00:01:30,720
in college my trusty hp 41c calculator

36
00:01:30,720 --> 00:01:32,960
got me through my engineering degree in

37
00:01:32,960 --> 00:01:36,079
my career i migrated to pc based tools

38
00:01:36,079 --> 00:01:39,439
and my hp 41c eventually bit the dust a

39
00:01:39,439 --> 00:01:41,360
corroded flex circuit

40
00:01:41,360 --> 00:01:44,720
years later about 2007 i bought hp's

41
00:01:44,720 --> 00:01:48,240
newly introduced hp 35s a modern update

42
00:01:48,240 --> 00:01:50,399
of their first pocket calculator the hp

43
00:01:50,399 --> 00:01:51,680
35

44
00:01:51,680 --> 00:01:53,840
about that time i discovered a whole

45
00:01:53,840 --> 00:01:55,680
world of classic hp calculator

46
00:01:55,680 --> 00:01:57,680
enthusiasts on the web

47
00:01:57,680 --> 00:02:00,000
first i thought they were lunatics but i

48
00:02:00,000 --> 00:02:02,880
couldn't look away eventually i quietly

49
00:02:02,880 --> 00:02:04,399
became one of them

50
00:02:04,399 --> 00:02:06,320
here's a short list of the websites that

51
00:02:06,320 --> 00:02:08,720
sent me on my way

52
00:02:08,720 --> 00:02:11,038
eric smith my first introduction to

53
00:02:11,038 --> 00:02:13,040
reverse engineering of classic hp

54
00:02:13,040 --> 00:02:15,599
calculators was the work of eric smith

55
00:02:15,599 --> 00:02:17,680
namely his chasm sim and nonpareil

56
00:02:17,680 --> 00:02:19,520
software simulators that run the

57
00:02:19,520 --> 00:02:22,319
original hp calculator rom code in the

58
00:02:22,319 --> 00:02:23,920
readme files included in those

59
00:02:23,920 --> 00:02:26,879
simulators i read quote the design of

60
00:02:26,879 --> 00:02:29,200
the processor and the instruction set

61
00:02:29,200 --> 00:02:31,760
are described in detail in united states

62
00:02:31,760 --> 00:02:35,480
patents 3863060

63
00:02:36,080 --> 00:02:39,360
4 million 1569

64
00:02:39,360 --> 00:02:42,000
my curiosity was peaked so i downloaded

65
00:02:42,000 --> 00:02:44,239
copies of those patents and was amazed

66
00:02:44,239 --> 00:02:45,920
at the level of detail

67
00:02:45,920 --> 00:02:49,040
i learned that o6d describes the hp 80

68
00:02:49,040 --> 00:02:52,879
while 569 describes the hp45

69
00:02:52,879 --> 00:02:54,480
these two patents contain much of the

70
00:02:54,480 --> 00:02:56,640
same information with differences only

71
00:02:56,640 --> 00:02:58,640
for the specific functionality of their

72
00:02:58,640 --> 00:03:01,200
respective calculators

73
00:03:01,200 --> 00:03:03,280
jacques laporte i had come across

74
00:03:03,280 --> 00:03:04,959
jacques laporte's website some years

75
00:03:04,959 --> 00:03:07,040
earlier but i hadn't yet been bitten by

76
00:03:07,040 --> 00:03:09,760
the classic hp calculator bug i've since

77
00:03:09,760 --> 00:03:11,599
learned that masu laporte had passed

78
00:03:11,599 --> 00:03:14,560
away and his website fell into disrepair

79
00:03:14,560 --> 00:03:16,480
lucky for me and for classic hp

80
00:03:16,480 --> 00:03:19,440
calculator aficionados everywhere eric

81
00:03:19,440 --> 00:03:22,319
recklen proprietor of hpcalc.org

82
00:03:22,319 --> 00:03:24,799
had rebuilt and re-hosted the site at

83
00:03:24,799 --> 00:03:26,640
the link shown here

84
00:03:26,640 --> 00:03:29,360
other than the 569 patent this site is

85
00:03:29,360 --> 00:03:31,360
the single most comprehensive source of

86
00:03:31,360 --> 00:03:33,840
technical information about the hp35

87
00:03:33,840 --> 00:03:36,959
calculator available anywhere

88
00:03:36,959 --> 00:03:39,760
peter monta peter has physically opened

89
00:03:39,760 --> 00:03:42,480
the original hp35 roms and through

90
00:03:42,480 --> 00:03:44,959
optical methods extracted the raw bit

91
00:03:44,959 --> 00:03:46,959
array and converted it to a list of

92
00:03:46,959 --> 00:03:49,440
machine code instructions

93
00:03:49,440 --> 00:03:52,239
tony nixon tony has a trove of classic

94
00:03:52,239 --> 00:03:54,720
hp calculator information as well as an

95
00:03:54,720 --> 00:03:56,640
emulator and various reproduction

96
00:03:56,640 --> 00:03:58,159
hardware for sale

97
00:03:58,159 --> 00:03:59,920
his notes on classic calculator

98
00:03:59,920 --> 00:04:02,239
operation is a fantastic resource for

99
00:04:02,239 --> 00:04:04,799
the classic hps in general and their

100
00:04:04,799 --> 00:04:07,439
display operation in particular

101
00:04:07,439 --> 00:04:10,640
david hicks hp museum a great resource

102
00:04:10,640 --> 00:04:13,200
for all hp calculators i've been lurking

103
00:04:13,200 --> 00:04:16,478
on their forum for years

104
00:04:16,478 --> 00:04:19,759
hp 35 background

105
00:04:19,759 --> 00:04:23,759
this is the hp 9100a hp's first desktop

106
00:04:23,759 --> 00:04:25,759
scientific calculator its basic

107
00:04:25,759 --> 00:04:28,400
architecture was designed by tom osborne

108
00:04:28,400 --> 00:04:30,160
its machine coding was done by dave

109
00:04:30,160 --> 00:04:31,360
cochran

110
00:04:31,360 --> 00:04:33,120
this product was the result of

111
00:04:33,120 --> 00:04:36,080
significant contributions by many at hp

112
00:04:36,080 --> 00:04:39,120
with the 9100a finally shipping bill

113
00:04:39,120 --> 00:04:41,280
hewlett asked dave cochran

114
00:04:41,280 --> 00:04:43,600
when can i have a 9100a that fits in my

115
00:04:43,600 --> 00:04:45,840
shirt pocket

116
00:04:45,840 --> 00:04:47,600
dave cochran was the project leader for

117
00:04:47,600 --> 00:04:50,560
the hp35 this is not his picture by the

118
00:04:50,560 --> 00:04:51,440
way

119
00:04:51,440 --> 00:04:53,600
in addition to leading the project he

120
00:04:53,600 --> 00:04:56,080
used his experience in the 9100a to

121
00:04:56,080 --> 00:04:57,840
develop the algorithms and write the

122
00:04:57,840 --> 00:05:01,360
microcode for the hp35 the hp 35 was

123
00:05:01,360 --> 00:05:05,360
introduced in early 1972 for 395 dollars

124
00:05:05,360 --> 00:05:07,600
that's 2500 today

125
00:05:07,600 --> 00:05:09,840
their first 100 000 unit production run

126
00:05:09,840 --> 00:05:12,560
sold out in two months

127
00:05:12,560 --> 00:05:16,479
the amazing 569 patent

128
00:05:16,479 --> 00:05:18,800
as i mentioned above i was surprised at

129
00:05:18,800 --> 00:05:21,440
what i found in the 569 patent i was

130
00:05:21,440 --> 00:05:23,360
expecting a quaint collection of special

131
00:05:23,360 --> 00:05:25,520
purpose logic circuits that directly

132
00:05:25,520 --> 00:05:27,919
implement the arithmetic functions to my

133
00:05:27,919 --> 00:05:30,080
surprise i found that the calculator is

134
00:05:30,080 --> 00:05:31,840
a portable battery-operated

135
00:05:31,840 --> 00:05:33,840
microcomputer running a scientific

136
00:05:33,840 --> 00:05:35,440
calculator program

137
00:05:35,440 --> 00:05:37,520
i was amazed at the level of detail in

138
00:05:37,520 --> 00:05:39,919
the patent there are block diagrams

139
00:05:39,919 --> 00:05:42,639
logic diagrams schematic diagrams timing

140
00:05:42,639 --> 00:05:45,680
diagrams flow charts instruction tables

141
00:05:45,680 --> 00:05:47,759
operating instructions and even a

142
00:05:47,759 --> 00:05:50,400
complete assembly language code listing

143
00:05:50,400 --> 00:05:53,199
569 is a gold mine

144
00:05:53,199 --> 00:05:55,919
just so there's no misunderstanding 569

145
00:05:55,919 --> 00:05:58,800
describes the hp 45 calculator there's

146
00:05:58,800 --> 00:06:02,160
no patent specific to the hp35 however

147
00:06:02,160 --> 00:06:05,440
since the hp 35 is a subset of the 45

148
00:06:05,440 --> 00:06:07,840
569 has everything i need to reverse

149
00:06:07,840 --> 00:06:10,560
engineer the hp 35 hardware here's a

150
00:06:10,560 --> 00:06:12,880
sampling of the images

151
00:06:12,880 --> 00:06:15,440
here's a sampling of the 37 figures in

152
00:06:15,440 --> 00:06:17,280
569.

153
00:06:17,280 --> 00:06:19,919
here's a sampling of the 77 or so tables

154
00:06:19,919 --> 00:06:21,680
in 569

155
00:06:21,680 --> 00:06:24,080
and here's a sampling of the 28 pages of

156
00:06:24,080 --> 00:06:27,120
the hp 45's machine code listings in

157
00:06:27,120 --> 00:06:29,919
569.

158
00:06:29,919 --> 00:06:31,919
in addition to plentiful figures tables

159
00:06:31,919 --> 00:06:34,720
and code listings the text describes

160
00:06:34,720 --> 00:06:36,319
every aspect of the calculator's

161
00:06:36,319 --> 00:06:37,360
operation

162
00:06:37,360 --> 00:06:39,280
the basic machine architecture the five

163
00:06:39,280 --> 00:06:41,520
wire serial serial bus that connects the

164
00:06:41,520 --> 00:06:44,479
main ics a precise detailed description

165
00:06:44,479 --> 00:06:46,800
of each of the ic's operation

166
00:06:46,800 --> 00:06:48,720
the energy saving inductive drive

167
00:06:48,720 --> 00:06:51,280
technique for the led display

168
00:06:51,280 --> 00:06:53,199
the complete instruction set

169
00:06:53,199 --> 00:06:55,680
a switch mode power supply and even the

170
00:06:55,680 --> 00:06:58,000
keyboard including details of its over

171
00:06:58,000 --> 00:07:00,639
center or follow a feel

172
00:07:00,639 --> 00:07:01,919
and i'm just going to point out a few

173
00:07:01,919 --> 00:07:04,319
items here in the middle i show figure 2

174
00:07:04,319 --> 00:07:07,120
the main block diagram from the patent

175
00:07:07,120 --> 00:07:09,759
and then within that figure i've circled

176
00:07:09,759 --> 00:07:11,759
with colored boxes the different blocks

177
00:07:11,759 --> 00:07:13,599
that make up

178
00:07:13,599 --> 00:07:16,000
the calculator and then

179
00:07:16,000 --> 00:07:17,840
the patent goes on to expand each of

180
00:07:17,840 --> 00:07:20,880
those blocks into larger block diagrams

181
00:07:20,880 --> 00:07:23,520
and then behind each block are many

182
00:07:23,520 --> 00:07:25,840
paragraphs of text that describes

183
00:07:25,840 --> 00:07:29,039
exactly how it works

184
00:07:29,360 --> 00:07:32,960
so how does the hp35 work

185
00:07:32,960 --> 00:07:34,560
those of you who are students of

186
00:07:34,560 --> 00:07:36,880
computer history might recognize this as

187
00:07:36,880 --> 00:07:39,039
the block diagram of the computer that

188
00:07:39,039 --> 00:07:41,199
von neumann described in section 2 of

189
00:07:41,199 --> 00:07:44,560
his famous 1945 paper first draft of a

190
00:07:44,560 --> 00:07:46,479
report on the edvac

191
00:07:46,479 --> 00:07:48,560
this is now called the von neumann

192
00:07:48,560 --> 00:07:50,560
architecture let's compare this to

193
00:07:50,560 --> 00:07:53,120
figure 2 in the patent

194
00:07:53,120 --> 00:07:55,599
at the top is von neumann's architecture

195
00:07:55,599 --> 00:07:57,840
and at the bottom is figure 2 from the

196
00:07:57,840 --> 00:07:59,759
569 patent

197
00:07:59,759 --> 00:08:01,440
as you can see there's a one-to-one

198
00:08:01,440 --> 00:08:03,280
correspondence between the von neumann

199
00:08:03,280 --> 00:08:05,280
architecture and what's described in

200
00:08:05,280 --> 00:08:06,800
569.

201
00:08:06,800 --> 00:08:12,400
it's clear the hp 35 is a computer

202
00:08:12,400 --> 00:08:14,479
after reading the patent i fell in love

203
00:08:14,479 --> 00:08:16,240
with the hp35

204
00:08:16,240 --> 00:08:18,400
why because of how much they did with

205
00:08:18,400 --> 00:08:21,360
the resources they had for example there

206
00:08:21,360 --> 00:08:23,199
were no microprocessors available when

207
00:08:23,199 --> 00:08:25,840
the hp 35 was designed intel had

208
00:08:25,840 --> 00:08:28,400
launched their 4004 just 3 months before

209
00:08:28,400 --> 00:08:31,360
the hp 35 was introduced hp had to

210
00:08:31,360 --> 00:08:33,760
design their own processor

211
00:08:33,760 --> 00:08:35,839
static memory was too large and power

212
00:08:35,839 --> 00:08:37,919
hungry they had to use dynamic shift

213
00:08:37,919 --> 00:08:40,320
register memory instead implemented in

214
00:08:40,320 --> 00:08:41,839
pmos

215
00:08:41,839 --> 00:08:43,440
and since all the registers were shift

216
00:08:43,440 --> 00:08:45,680
registers this forced the designers to

217
00:08:45,680 --> 00:08:48,240
employ serial processing throughout

218
00:08:48,240 --> 00:08:50,399
it could be carried in your shirt pocket

219
00:08:50,399 --> 00:08:52,160
because it was small and portable it had

220
00:08:52,160 --> 00:08:54,240
to be battery operated which forced the

221
00:08:54,240 --> 00:08:56,080
designers to employ low power design

222
00:08:56,080 --> 00:08:57,519
techniques

223
00:08:57,519 --> 00:08:59,440
an led display that's powered by

224
00:08:59,440 --> 00:09:00,480
batteries

225
00:09:00,480 --> 00:09:03,040
they had to coax power hungry leds to

226
00:09:03,040 --> 00:09:05,040
only sip power

227
00:09:05,040 --> 00:09:09,360
a tiny rom only 768 10-bit words this

228
00:09:09,360 --> 00:09:11,440
required hand-crafted machine language

229
00:09:11,440 --> 00:09:12,720
coding

230
00:09:12,720 --> 00:09:14,640
the algorithms for the transcendental

231
00:09:14,640 --> 00:09:16,399
functions were based on the work of

232
00:09:16,399 --> 00:09:19,760
henry briggs from the year 1624

233
00:09:19,760 --> 00:09:22,560
talk about your prior art and floating

234
00:09:22,560 --> 00:09:25,360
point arithmetic 10 digit accuracy in

235
00:09:25,360 --> 00:09:28,160
most cases

236
00:09:28,399 --> 00:09:30,160
of all the amazing techniques revealed

237
00:09:30,160 --> 00:09:32,640
in the 569 patent i only have time to

238
00:09:32,640 --> 00:09:35,200
talk about two of them i've chosen the

239
00:09:35,200 --> 00:09:37,120
inductive drive technique for the led

240
00:09:37,120 --> 00:09:39,839
display and the serial processing

241
00:09:39,839 --> 00:09:41,360
architecture used throughout the

242
00:09:41,360 --> 00:09:42,800
calculator

243
00:09:42,800 --> 00:09:44,320
so much was left on the cutting room

244
00:09:44,320 --> 00:09:48,160
floor so to speak let's get started

245
00:09:48,160 --> 00:09:50,560
the patent says quote the inductive

246
00:09:50,560 --> 00:09:52,320
drive technique employed for the led

247
00:09:52,320 --> 00:09:54,399
display is inherently efficient because

248
00:09:54,399 --> 00:09:57,440
there are no dissipative components

249
00:09:57,440 --> 00:09:59,360
what they mean is no dropping resistors

250
00:09:59,360 --> 00:10:01,920
are used dropping resistors work by

251
00:10:01,920 --> 00:10:03,760
throwing away power and they can't

252
00:10:03,760 --> 00:10:06,240
afford that in this battery-operated

253
00:10:06,240 --> 00:10:08,079
pre-cmos design

254
00:10:08,079 --> 00:10:10,480
the basic scheme they developed is

255
00:10:10,480 --> 00:10:13,200
closing an anode switch puts energy in

256
00:10:13,200 --> 00:10:14,399
its inductor

257
00:10:14,399 --> 00:10:16,720
opening that anode switch discharges

258
00:10:16,720 --> 00:10:19,279
that energy through an led segment

259
00:10:19,279 --> 00:10:21,360
by carefully choosing the inductor value

260
00:10:21,360 --> 00:10:23,440
and the switch timing the designers

261
00:10:23,440 --> 00:10:25,279
delivered exactly the right amount of

262
00:10:25,279 --> 00:10:27,360
current to light the leds without

263
00:10:27,360 --> 00:10:29,519
wasting any power

264
00:10:29,519 --> 00:10:30,720
in the next slide i'm going to

265
00:10:30,720 --> 00:10:32,880
demonstrate how hp engineers carefully

266
00:10:32,880 --> 00:10:34,800
orchestrated the timing of their

267
00:10:34,800 --> 00:10:37,200
inductive drive technique to multiplex a

268
00:10:37,200 --> 00:10:40,079
seven segment plus decimal point led

269
00:10:40,079 --> 00:10:42,399
display across the calculator's 15

270
00:10:42,399 --> 00:10:44,880
digits

271
00:10:45,440 --> 00:10:47,040
this animation demonstrates the

272
00:10:47,040 --> 00:10:49,120
inductive drive technique in combination

273
00:10:49,120 --> 00:10:51,120
with multiplexing the first two digits

274
00:10:51,120 --> 00:10:52,880
of the display

275
00:10:52,880 --> 00:10:53,839
first

276
00:10:53,839 --> 00:10:55,760
first a note about the conventions i'm

277
00:10:55,760 --> 00:10:56,800
using

278
00:10:56,800 --> 00:10:58,959
blue lines represent current flow that

279
00:10:58,959 --> 00:11:01,839
builds up the inductor's magnetic field

280
00:11:01,839 --> 00:11:03,839
red lines represent current flow

281
00:11:03,839 --> 00:11:05,760
resulting from a collapse in the

282
00:11:05,760 --> 00:11:07,760
inductor's magnetic field

283
00:11:07,760 --> 00:11:09,360
the thickness of the colored line

284
00:11:09,360 --> 00:11:11,200
represents the magnitude of the current

285
00:11:11,200 --> 00:11:13,760
flow a thin line for a small current a

286
00:11:13,760 --> 00:11:15,920
fat line for a large current

287
00:11:15,920 --> 00:11:18,480
in this demonstration digits 1 and 2

288
00:11:18,480 --> 00:11:22,160
will display 8 8 all segments lit

289
00:11:22,160 --> 00:11:24,959
we start with digit 1 its cathode switch

290
00:11:24,959 --> 00:11:27,760
is closed it remains closed until all

291
00:11:27,760 --> 00:11:30,560
segments in that digit are processed

292
00:11:30,560 --> 00:11:33,839
and here's where that switch is located

293
00:11:33,839 --> 00:11:35,920
with the digit selected the topmost

294
00:11:35,920 --> 00:11:38,320
anode switch is closed and here's the

295
00:11:38,320 --> 00:11:42,079
topmost anode switch

296
00:11:42,079 --> 00:11:43,120
um

297
00:11:43,120 --> 00:11:45,200
anyway the topmost anode switch is

298
00:11:45,200 --> 00:11:46,959
closed current starts flowing through

299
00:11:46,959 --> 00:11:48,800
the inductor and its magnetic field

300
00:11:48,800 --> 00:11:51,519
starts to build a blue line now we

301
00:11:51,519 --> 00:11:53,519
repeat the following sequence for each

302
00:11:53,519 --> 00:11:56,800
segment in the selected digit one close

303
00:11:56,800 --> 00:11:58,959
the next anode switch current starts

304
00:11:58,959 --> 00:12:01,279
flowing through its inductor a thin blue

305
00:12:01,279 --> 00:12:03,279
line and its magnetic field starts

306
00:12:03,279 --> 00:12:04,399
building

307
00:12:04,399 --> 00:12:07,279
two open the previous anode switch its

308
00:12:07,279 --> 00:12:09,040
inductor's magnetic field begins to

309
00:12:09,040 --> 00:12:12,079
collapse and the induced current a fat

310
00:12:12,079 --> 00:12:14,480
red line discharges through the led

311
00:12:14,480 --> 00:12:16,160
segment and through the selected

312
00:12:16,160 --> 00:12:18,639
catheter cathode switch

313
00:12:18,639 --> 00:12:20,880
when the last anode switch for digit 1

314
00:12:20,880 --> 00:12:22,959
has been opened and its current allowed

315
00:12:22,959 --> 00:12:25,760
to decay move the cathode selector from

316
00:12:25,760 --> 00:12:28,560
digit 1 to digit 2. repeat this sequence

317
00:12:28,560 --> 00:12:30,399
for digit 2.

318
00:12:30,399 --> 00:12:32,240
as you can see while the inductor's

319
00:12:32,240 --> 00:12:34,079
magnetic field for the currently lit

320
00:12:34,079 --> 00:12:36,560
segment is collapsing a red line the

321
00:12:36,560 --> 00:12:38,720
next segment's inductor is building up a

322
00:12:38,720 --> 00:12:40,240
blue line

323
00:12:40,240 --> 00:12:42,160
if you didn't quite follow all of that

324
00:12:42,160 --> 00:12:43,839
then just pay attention to this one

325
00:12:43,839 --> 00:12:44,639
thing

326
00:12:44,639 --> 00:12:46,959
notice how the blue lines step their way

327
00:12:46,959 --> 00:12:49,600
down through the rows and the red lines

328
00:12:49,600 --> 00:12:53,480
trail just behind

329
00:12:56,639 --> 00:12:58,880
this diagram is not in the patent but i

330
00:12:58,880 --> 00:13:00,639
wanted to show how the inductive drive

331
00:13:00,639 --> 00:13:03,040
technique and display multiplexing are

332
00:13:03,040 --> 00:13:05,279
orchestrated within the calculator's 56

333
00:13:05,279 --> 00:13:07,200
clock machine cycle

334
00:13:07,200 --> 00:13:09,600
it reveals the synchronicity or a kind

335
00:13:09,600 --> 00:13:11,600
of harmony between every element of the

336
00:13:11,600 --> 00:13:12,560
design

337
00:13:12,560 --> 00:13:14,399
what's not shown is that the keyboard

338
00:13:14,399 --> 00:13:16,560
scanning and the serial processors fetch

339
00:13:16,560 --> 00:13:18,240
and execute cycles

340
00:13:18,240 --> 00:13:21,040
all map into this timing exactly not a

341
00:13:21,040 --> 00:13:23,440
single clock cycle is wasted this is

342
00:13:23,440 --> 00:13:27,839
what makes the hp 35 so amazing

343
00:13:27,839 --> 00:13:29,760
now let's look at the serial processing

344
00:13:29,760 --> 00:13:32,480
architecture

345
00:13:32,800 --> 00:13:34,560
don't try to absorb the details of this

346
00:13:34,560 --> 00:13:36,560
diagram it's only meant to demonstrate

347
00:13:36,560 --> 00:13:38,480
that the register bits within the main

348
00:13:38,480 --> 00:13:40,959
processor components are constantly

349
00:13:40,959 --> 00:13:43,279
shifting to the right and recirculating

350
00:13:43,279 --> 00:13:44,399
i want to point out that this

351
00:13:44,399 --> 00:13:46,399
recirculation doesn't happen as the

352
00:13:46,399 --> 00:13:48,959
result of some operation but rather is

353
00:13:48,959 --> 00:13:51,600
happening continuously as long as power

354
00:13:51,600 --> 00:13:53,680
is applied all bits shift by one

355
00:13:53,680 --> 00:13:56,079
position on each and every clock cycle

356
00:13:56,079 --> 00:13:57,440
this means that if you want to perform

357
00:13:57,440 --> 00:14:00,160
an operation on particular bits you must

358
00:14:00,160 --> 00:14:02,000
precisely time when those bits become

359
00:14:02,000 --> 00:14:03,760
available at the rightmost end of the

360
00:14:03,760 --> 00:14:06,079
shift register then steer those bits

361
00:14:06,079 --> 00:14:08,399
through the desired functional block

362
00:14:08,399 --> 00:14:12,079
such as the add or subtractor

363
00:14:12,240 --> 00:14:14,839
paper design and

364
00:14:14,839 --> 00:14:17,120
documentation this photo shows some of

365
00:14:17,120 --> 00:14:19,199
the binders full of design documentation

366
00:14:19,199 --> 00:14:22,399
i created for the project

367
00:14:22,399 --> 00:14:25,040
this spreadsheet lists most of the 45

368
00:14:25,040 --> 00:14:26,720
separate diagrams i made during the

369
00:14:26,720 --> 00:14:28,399
course of this project

370
00:14:28,399 --> 00:14:30,160
many of these diagrams have multiple

371
00:14:30,160 --> 00:14:32,639
pages as shown in the fifth column in

372
00:14:32,639 --> 00:14:37,120
total i drew 338 individual pages

373
00:14:37,120 --> 00:14:38,560
you'll be relieved to know that i'm not

374
00:14:38,560 --> 00:14:41,199
going to show all 338 pages of diagrams

375
00:14:41,199 --> 00:14:43,279
in this presentation but i want to show

376
00:14:43,279 --> 00:14:45,440
a few of the more interesting diagrams

377
00:14:45,440 --> 00:14:48,399
for example display animation

378
00:14:48,399 --> 00:14:50,959
barber pole timing algorithmic state

379
00:14:50,959 --> 00:14:53,279
machines

380
00:14:53,279 --> 00:14:54,800
this animation shows how the

381
00:14:54,800 --> 00:14:57,279
recirculating a and b registers in the

382
00:14:57,279 --> 00:14:59,519
arithmetic and register circuit are

383
00:14:59,519 --> 00:15:02,320
encoded on the a through e lines i'm

384
00:15:02,320 --> 00:15:04,480
going to point out a few details

385
00:15:04,480 --> 00:15:06,560
at the top here these these two rows

386
00:15:06,560 --> 00:15:10,240
represent the register a and register b

387
00:15:10,240 --> 00:15:12,959
in the arithmetic and register circuit

388
00:15:12,959 --> 00:15:15,199
you'll notice that the values within are

389
00:15:15,199 --> 00:15:17,760
shifting to the right continuously when

390
00:15:17,760 --> 00:15:19,440
a value reaches the rightmost end it

391
00:15:19,440 --> 00:15:21,120
recirculates back to the left and

392
00:15:21,120 --> 00:15:23,519
continues on its way

393
00:15:23,519 --> 00:15:26,000
the rightmost bit and three other bits

394
00:15:26,000 --> 00:15:28,880
at the leftmost end all come down and

395
00:15:28,880 --> 00:15:32,160
get latched into the display buffer

396
00:15:32,160 --> 00:15:34,079
there's also a buffer register for the

397
00:15:34,079 --> 00:15:36,240
decimal point

398
00:15:36,240 --> 00:15:40,000
here is the bcd to seven segment decoder

399
00:15:40,000 --> 00:15:43,199
and along here are the multiplexers that

400
00:15:43,199 --> 00:15:45,040
multiplex all of those seven segments

401
00:15:45,040 --> 00:15:47,759
plus the decimal point onto these five a

402
00:15:47,759 --> 00:15:50,959
through e lines that go over to the

403
00:15:50,959 --> 00:15:53,600
anode driver chip

404
00:15:53,600 --> 00:15:56,399
to the right are timing diagrams these

405
00:15:56,399 --> 00:15:58,160
are taken right out of figure 12 of the

406
00:15:58,160 --> 00:16:00,480
patent but i've added an animated

407
00:16:00,480 --> 00:16:03,040
overlay to show where you are through

408
00:16:03,040 --> 00:16:04,560
the timing diagram

409
00:16:04,560 --> 00:16:06,240
and finally at the bottom we have the

410
00:16:06,240 --> 00:16:09,120
led display a few things to notice about

411
00:16:09,120 --> 00:16:10,399
that display

412
00:16:10,399 --> 00:16:13,279
is it's written from the right to the

413
00:16:13,279 --> 00:16:14,160
left

414
00:16:14,160 --> 00:16:16,320
lsb first so to speak

415
00:16:16,320 --> 00:16:19,040
and you'll notice that the segments are

416
00:16:19,040 --> 00:16:21,199
drawn individually rather than a whole

417
00:16:21,199 --> 00:16:23,519
digit appearing at once this is to

418
00:16:23,519 --> 00:16:25,839
reduce simultaneous current draw from

419
00:16:25,839 --> 00:16:28,399
the batteries

420
00:16:28,399 --> 00:16:30,399
next page

421
00:16:30,399 --> 00:16:32,320
in order to work out the detailed timing

422
00:16:32,320 --> 00:16:34,079
of the recirculating registers within

423
00:16:34,079 --> 00:16:36,320
the control and timing circuit i

424
00:16:36,320 --> 00:16:38,160
developed a technique i call a barber

425
00:16:38,160 --> 00:16:40,560
pole timing diagram for reasons that

426
00:16:40,560 --> 00:16:43,518
will become obvious

427
00:16:43,680 --> 00:16:45,920
the contents of the 28-bit register are

428
00:16:45,920 --> 00:16:48,399
shown as a horizontal row of boxes at

429
00:16:48,399 --> 00:16:51,279
the next clock cycle i show the 28 boxes

430
00:16:51,279 --> 00:16:53,519
shifted one position to the right and

431
00:16:53,519 --> 00:16:55,920
the rightmost box returned to the

432
00:16:55,920 --> 00:16:58,560
leftmost position each subsequent clock

433
00:16:58,560 --> 00:17:00,720
cycle shows the register contents

434
00:17:00,720 --> 00:17:03,279
circulated to the right by one bit since

435
00:17:03,279 --> 00:17:05,039
i used different colors for the three

436
00:17:05,039 --> 00:17:08,799
fields a barber pole pattern emerges

437
00:17:08,799 --> 00:17:10,959
and i want to point out these fields

438
00:17:10,959 --> 00:17:13,359
so the at the top here on the left is

439
00:17:13,359 --> 00:17:16,000
the rom address in yellow

440
00:17:16,000 --> 00:17:18,240
in the middle are the 12 status bits in

441
00:17:18,240 --> 00:17:19,520
green

442
00:17:19,520 --> 00:17:21,520
and at the right are the eight return

443
00:17:21,520 --> 00:17:24,480
address bits in sort of pink

444
00:17:24,480 --> 00:17:26,959
in modern parlance we'd call the rom

445
00:17:26,959 --> 00:17:29,120
address the program counter

446
00:17:29,120 --> 00:17:31,440
we'd call the status bits the condition

447
00:17:31,440 --> 00:17:33,360
codes register

448
00:17:33,360 --> 00:17:35,280
and we'd call the return address the

449
00:17:35,280 --> 00:17:36,400
stack

450
00:17:36,400 --> 00:17:39,039
not the stack pointer the entire stack

451
00:17:39,039 --> 00:17:41,679
the hp 35 processor can only do one

452
00:17:41,679 --> 00:17:44,640
level of subroutine

453
00:17:45,440 --> 00:17:47,200
now that i've got all the shift register

454
00:17:47,200 --> 00:17:49,600
content shown over time i refer to the

455
00:17:49,600 --> 00:17:51,200
patent which tells me that the rom

456
00:17:51,200 --> 00:17:52,960
address will be incremented during bit

457
00:17:52,960 --> 00:17:56,960
times d47 through b54 since the bits can

458
00:17:56,960 --> 00:17:58,320
only be used when they reach the

459
00:17:58,320 --> 00:18:00,240
rightmost end of the shift register then

460
00:18:00,240 --> 00:18:02,720
these bits must reach the rightmost

461
00:18:02,720 --> 00:18:05,280
position during those times the patent

462
00:18:05,280 --> 00:18:06,799
goes on to say that the incremented

463
00:18:06,799 --> 00:18:08,799
address is transmitted during bit times

464
00:18:08,799 --> 00:18:12,480
b19 through b26 again bits can only be

465
00:18:12,480 --> 00:18:14,240
used when they reach the rightmost end

466
00:18:14,240 --> 00:18:16,320
of the shift register so the incremented

467
00:18:16,320 --> 00:18:18,320
address bits must reach the rightmost

468
00:18:18,320 --> 00:18:20,720
position at those times with this

469
00:18:20,720 --> 00:18:22,799
information i can fill in the remaining

470
00:18:22,799 --> 00:18:26,080
bid times and the main bus signals

471
00:18:26,080 --> 00:18:28,160
with the bid times and main bus signals

472
00:18:28,160 --> 00:18:30,640
all sketched in the state of the

473
00:18:30,640 --> 00:18:33,600
microprogrammed controller can be added

474
00:18:33,600 --> 00:18:35,440
the purpose of this exercise was to

475
00:18:35,440 --> 00:18:37,760
determine the state sequences for a

476
00:18:37,760 --> 00:18:40,480
particular instruction type to determine

477
00:18:40,480 --> 00:18:42,720
all the state sequences i drew 18

478
00:18:42,720 --> 00:18:45,280
separate barber pole timing diagrams

479
00:18:45,280 --> 00:18:46,799
each with about twice as much

480
00:18:46,799 --> 00:18:50,320
information as depicted here

481
00:18:51,120 --> 00:18:53,520
the micro programmed controller the

482
00:18:53,520 --> 00:18:55,039
patent discloses much of the

483
00:18:55,039 --> 00:18:57,679
calculator's logic in ample detail

484
00:18:57,679 --> 00:18:59,840
however it's silent on the internal

485
00:18:59,840 --> 00:19:02,640
details of one very important block item

486
00:19:02,640 --> 00:19:06,720
46 the micro programmed controller

487
00:19:06,720 --> 00:19:08,480
since a micro programmed controller is

488
00:19:08,480 --> 00:19:10,480
an optimized implementation of a finite

489
00:19:10,480 --> 00:19:12,720
state machine i decided to start by

490
00:19:12,720 --> 00:19:14,320
designing the state machine using the

491
00:19:14,320 --> 00:19:16,559
technique that tom osborne pioneered

492
00:19:16,559 --> 00:19:18,400
during his time at hp

493
00:19:18,400 --> 00:19:21,919
called algorithmic state machine or asm

494
00:19:21,919 --> 00:19:24,080
this is very likely the same approach

495
00:19:24,080 --> 00:19:25,840
that the designers of this calculator

496
00:19:25,840 --> 00:19:27,039
employed

497
00:19:27,039 --> 00:19:29,440
osborne's asm techniques were collected

498
00:19:29,440 --> 00:19:31,919
organized and expanded by hp's

499
00:19:31,919 --> 00:19:36,240
christopher clare in the book shown here

500
00:19:36,400 --> 00:19:38,559
this slide shows my actual algorithmic

501
00:19:38,559 --> 00:19:40,320
state machine diagrams

502
00:19:40,320 --> 00:19:42,400
at this stage my barber pole timing

503
00:19:42,400 --> 00:19:44,559
diagrams showed how the bits had to move

504
00:19:44,559 --> 00:19:46,320
between the shift registers and the

505
00:19:46,320 --> 00:19:48,720
various resources to perform each

506
00:19:48,720 --> 00:19:50,160
instruction type

507
00:19:50,160 --> 00:19:52,640
a few slides ago i showed that i added

508
00:19:52,640 --> 00:19:54,480
the state signal to the barber pole

509
00:19:54,480 --> 00:19:57,760
timing diagrams state shows what needs

510
00:19:57,760 --> 00:20:00,080
to be done during each bit time to

511
00:20:00,080 --> 00:20:01,840
perform the steps required for each

512
00:20:01,840 --> 00:20:03,280
instruction type

513
00:20:03,280 --> 00:20:04,960
once i had the states worked out for

514
00:20:04,960 --> 00:20:07,120
every instruction type i sketched the

515
00:20:07,120 --> 00:20:09,360
state transition diagrams using the asm

516
00:20:09,360 --> 00:20:11,120
techniques in claire's book

517
00:20:11,120 --> 00:20:13,760
the asm diagrams fully document the

518
00:20:13,760 --> 00:20:15,520
operation of the micro programmed

519
00:20:15,520 --> 00:20:18,080
controller

520
00:20:18,159 --> 00:20:21,520
fpga coding and simulation

521
00:20:21,520 --> 00:20:23,520
to demonstrate how i performed fpga

522
00:20:23,520 --> 00:20:25,440
coding and simulation from the patent

523
00:20:25,440 --> 00:20:27,360
i'll focus on a small but important sub

524
00:20:27,360 --> 00:20:30,320
module the serial adder subtractor item

525
00:20:30,320 --> 00:20:32,960
84 as shown here in figure 10 within the

526
00:20:32,960 --> 00:20:35,760
arithmetic and register circuit this sub

527
00:20:35,760 --> 00:20:37,840
module is essentially the calculator's

528
00:20:37,840 --> 00:20:39,440
entire alu

529
00:20:39,440 --> 00:20:42,240
or just a u because there are no logic

530
00:20:42,240 --> 00:20:45,440
instructions in the hp 35's processor

531
00:20:45,440 --> 00:20:48,559
a little digression the hp35 employs a

532
00:20:48,559 --> 00:20:51,360
56-bit word size but the data that's

533
00:20:51,360 --> 00:20:53,760
represented in that word are always

534
00:20:53,760 --> 00:20:56,320
decimal numbers so data such as

535
00:20:56,320 --> 00:20:58,640
characters or binary values are not

536
00:20:58,640 --> 00:20:59,679
allowed

537
00:20:59,679 --> 00:21:01,280
a common technique for working with

538
00:21:01,280 --> 00:21:04,080
decimal numbers in a binary computer is

539
00:21:04,080 --> 00:21:06,640
to represent each digit using binary

540
00:21:06,640 --> 00:21:10,159
coded decimal or bcd for short

541
00:21:10,159 --> 00:21:12,880
bcd uses four bits to represent any

542
00:21:12,880 --> 00:21:14,799
digit zero to nine

543
00:21:14,799 --> 00:21:17,679
there's room for 14 bcd values in the hp

544
00:21:17,679 --> 00:21:21,440
35's 56-bit word size so 14-digit

545
00:21:21,440 --> 00:21:23,440
decimal arithmetic is theoretically

546
00:21:23,440 --> 00:21:25,840
possible

547
00:21:26,720 --> 00:21:28,559
on the right side of this slide is the

548
00:21:28,559 --> 00:21:30,320
block diagram of the arithmetic and

549
00:21:30,320 --> 00:21:32,720
register circuit on the left is what the

550
00:21:32,720 --> 00:21:34,880
patent has to say about the serial adder

551
00:21:34,880 --> 00:21:37,200
subtracting subtractor

552
00:21:37,200 --> 00:21:38,720
using this information we'll try to

553
00:21:38,720 --> 00:21:40,559
write the verilog code for the serial

554
00:21:40,559 --> 00:21:43,679
adder subtractor circuit

555
00:21:43,679 --> 00:21:46,240
since i knew a serial adder can be done

556
00:21:46,240 --> 00:21:48,400
with a simple full adder circuit this

557
00:21:48,400 --> 00:21:49,679
should be easy

558
00:21:49,679 --> 00:21:51,840
the patent even explains how so i'll

559
00:21:51,840 --> 00:21:53,760
start sketching it up

560
00:21:53,760 --> 00:21:55,840
here is the full header

561
00:21:55,840 --> 00:21:57,600
here's the register that holds the

562
00:21:57,600 --> 00:21:59,679
previous carry bit and here are some

563
00:21:59,679 --> 00:22:01,919
multiplexers to steer the various

564
00:22:01,919 --> 00:22:04,400
registers into the full adder so far so

565
00:22:04,400 --> 00:22:06,000
good

566
00:22:06,000 --> 00:22:08,480
wait what's this about bcd correction

567
00:22:08,480 --> 00:22:11,520
the patent says quote it is not known if

568
00:22:11,520 --> 00:22:13,280
a correction is needed until the first

569
00:22:13,280 --> 00:22:14,559
three bits of the sum have been

570
00:22:14,559 --> 00:22:17,120
generated so i'll add a three-bit

571
00:22:17,120 --> 00:22:19,679
shifter on the main sum

572
00:22:19,679 --> 00:22:22,720
it says if the sum exceeds nine

573
00:22:22,720 --> 00:22:27,120
so i need to compare the sum to nine

574
00:22:27,120 --> 00:22:29,679
then it says a correction addition of

575
00:22:29,679 --> 00:22:33,039
six to the bcd sum must be made so i

576
00:22:33,039 --> 00:22:35,520
need a second adder to add six and

577
00:22:35,520 --> 00:22:39,120
here's the six that gets shifted in

578
00:22:39,120 --> 00:22:41,600
the next sentence is the key it tells me

579
00:22:41,600 --> 00:22:43,760
i was doing it all wrong so i have to

580
00:22:43,760 --> 00:22:48,240
undo my first attempt so get rid of this

581
00:22:48,240 --> 00:22:50,720
and do what it says quote this is

582
00:22:50,720 --> 00:22:52,400
accomplished by adding a four bit

583
00:22:52,400 --> 00:22:56,640
holding register a60 through a57

584
00:22:56,640 --> 00:22:58,799
and inserting the corrected sum into a

585
00:22:58,799 --> 00:22:59,840
portion

586
00:22:59,840 --> 00:23:02,559
a56 through a53

587
00:23:02,559 --> 00:23:05,760
of register a if a carry is generated

588
00:23:05,760 --> 00:23:09,120
well now i have two carries here

589
00:23:09,120 --> 00:23:10,320
and here

590
00:23:10,320 --> 00:23:12,640
and i still have an address subtraction

591
00:23:12,640 --> 00:23:14,640
the patent only says

592
00:23:14,640 --> 00:23:16,480
quote a similar correction for

593
00:23:16,480 --> 00:23:19,200
subtraction is necessary not much to go

594
00:23:19,200 --> 00:23:21,440
on i'm starting to realize this is more

595
00:23:21,440 --> 00:23:24,240
complex than it seems

596
00:23:24,240 --> 00:23:25,679
at this point i thought it might be a

597
00:23:25,679 --> 00:23:27,280
good idea to see what i could find on

598
00:23:27,280 --> 00:23:28,240
the web

599
00:23:28,240 --> 00:23:30,159
a lot of searching led me to a paper by

600
00:23:30,159 --> 00:23:32,480
glenn langdon of ibm published in the

601
00:23:32,480 --> 00:23:36,320
ieee transactions on computers in 1969

602
00:23:36,320 --> 00:23:37,840
this paper was a gold mine of

603
00:23:37,840 --> 00:23:40,400
information on bcd subtraction i learned

604
00:23:40,400 --> 00:23:42,799
that typical bcd subtraction circuits

605
00:23:42,799 --> 00:23:45,039
using binary adders employ a method

606
00:23:45,039 --> 00:23:47,600
called subtrahend complementation and

607
00:23:47,600 --> 00:23:50,480
add 10 decimal correction langdon

608
00:23:50,480 --> 00:23:52,559
presents an alternative called minuend

609
00:23:52,559 --> 00:23:54,880
complementation

610
00:23:54,880 --> 00:23:57,200
i'll sketch two versions this one

611
00:23:57,200 --> 00:23:59,120
employs subtraction by traditional

612
00:23:59,120 --> 00:24:01,600
subtrahend complementation and add 10

613
00:24:01,600 --> 00:24:03,120
correction

614
00:24:03,120 --> 00:24:05,120
the next one employs subtraction using

615
00:24:05,120 --> 00:24:08,960
langdon's menu end complementation

616
00:24:08,960 --> 00:24:10,799
of the two options i've chosen the

617
00:24:10,799 --> 00:24:13,039
second version that employs langdon's

618
00:24:13,039 --> 00:24:15,600
subtraction by minuend complementation

619
00:24:15,600 --> 00:24:17,840
because it always adds six regardless of

620
00:24:17,840 --> 00:24:20,159
add or subtract and the carry output

621
00:24:20,159 --> 00:24:22,640
logic is simpler

622
00:24:22,640 --> 00:24:25,120
using the second logic diagram i'll code

623
00:24:25,120 --> 00:24:27,600
it in verilog this image shows the

624
00:24:27,600 --> 00:24:30,480
module ports

625
00:24:30,640 --> 00:24:33,679
up to now it's all been paper design but

626
00:24:33,679 --> 00:24:36,080
finally this is where i go from just

627
00:24:36,080 --> 00:24:38,720
writing about an hp 35 to actually

628
00:24:38,720 --> 00:24:40,000
making one

629
00:24:40,000 --> 00:24:42,480
with this level of detail in the diagram

630
00:24:42,480 --> 00:24:44,400
it's just a simple matter of coding up

631
00:24:44,400 --> 00:24:46,480
each related idea into a block of

632
00:24:46,480 --> 00:24:47,520
verilog

633
00:24:47,520 --> 00:24:50,559
let's go through it real quick

634
00:24:50,559 --> 00:24:52,880
so here's the full adder and it's

635
00:24:52,880 --> 00:24:54,640
exclusive or for doing the minuen

636
00:24:54,640 --> 00:24:57,200
complementation that is coded in this

637
00:24:57,200 --> 00:24:59,840
block of verilog

638
00:24:59,840 --> 00:25:01,520
right here in the middle is a

639
00:25:01,520 --> 00:25:03,760
multiplexer that sequences the binary

640
00:25:03,760 --> 00:25:05,919
value for six

641
00:25:05,919 --> 00:25:07,520
that's shown in this little block of

642
00:25:07,520 --> 00:25:09,120
verilog

643
00:25:09,120 --> 00:25:11,360
over here is the second full adder that

644
00:25:11,360 --> 00:25:12,960
adds the six

645
00:25:12,960 --> 00:25:15,760
and that's shown in this block

646
00:25:15,760 --> 00:25:17,760
the two outputs with their exclusive

647
00:25:17,760 --> 00:25:20,000
ores are coded up in this little block

648
00:25:20,000 --> 00:25:21,760
of error log

649
00:25:21,760 --> 00:25:23,600
the carryout logic

650
00:25:23,600 --> 00:25:26,960
is coded up in this block of verilog

651
00:25:26,960 --> 00:25:29,919
the two carry flip flops are coated up

652
00:25:29,919 --> 00:25:31,919
in this block of verilog

653
00:25:31,919 --> 00:25:34,159
and finally the gate on the carry end of

654
00:25:34,159 --> 00:25:36,480
the first full ladder is coated up in

655
00:25:36,480 --> 00:25:39,919
this block of airlock

656
00:25:41,679 --> 00:25:44,159
once the module is coded in verilog i

657
00:25:44,159 --> 00:25:46,640
need to test it since the serial adder

658
00:25:46,640 --> 00:25:48,960
subtractor is the fundamental element

659
00:25:48,960 --> 00:25:51,039
where all the hp 35's results are

660
00:25:51,039 --> 00:25:53,679
calculator calculated it needs to be

661
00:25:53,679 --> 00:25:55,679
rock solid i chose to write a

662
00:25:55,679 --> 00:25:57,600
self-checking test bench in which i

663
00:25:57,600 --> 00:25:59,840
could run thousands or even millions of

664
00:25:59,840 --> 00:26:02,400
test values through my module i drew the

665
00:26:02,400 --> 00:26:04,799
detailed test bench then coded it in

666
00:26:04,799 --> 00:26:07,120
verilog by inspection i'll point out a

667
00:26:07,120 --> 00:26:09,120
few highlights

668
00:26:09,120 --> 00:26:11,039
well this big yellow block in the middle

669
00:26:11,039 --> 00:26:13,600
is the unit under test the serial adder

670
00:26:13,600 --> 00:26:14,960
subtractor

671
00:26:14,960 --> 00:26:16,720
this block on the left is the test

672
00:26:16,720 --> 00:26:19,520
vector generator it generates random

673
00:26:19,520 --> 00:26:21,360
values to be added or subtracted

674
00:26:21,360 --> 00:26:23,360
together those values are stored in

675
00:26:23,360 --> 00:26:24,640
shift registers

676
00:26:24,640 --> 00:26:26,159
because of course this is a serial

677
00:26:26,159 --> 00:26:28,400
device and i need to shift the values in

678
00:26:28,400 --> 00:26:30,400
to the unit under test

679
00:26:30,400 --> 00:26:31,919
to the right here i have another shift

680
00:26:31,919 --> 00:26:35,200
register that captures the serial output

681
00:26:35,200 --> 00:26:38,240
at the bottom i have two registers here

682
00:26:38,240 --> 00:26:39,360
that

683
00:26:39,360 --> 00:26:42,159
perform a latency matching function so

684
00:26:42,159 --> 00:26:44,000
that the output from the test vector

685
00:26:44,000 --> 00:26:45,840
that their generator

686
00:26:45,840 --> 00:26:48,320
reaches the end at the same time as the

687
00:26:48,320 --> 00:26:49,919
actual results

688
00:26:49,919 --> 00:26:51,679
and at this point in the

689
00:26:51,679 --> 00:26:54,559
diagram i can compare the actual to the

690
00:26:54,559 --> 00:26:56,320
expected values

691
00:26:56,320 --> 00:26:58,960
and if they match i increment a good

692
00:26:58,960 --> 00:26:59,919
count

693
00:26:59,919 --> 00:27:01,679
if they don't match i increment a bad

694
00:27:01,679 --> 00:27:02,720
count

695
00:27:02,720 --> 00:27:05,360
then this little block of code

696
00:27:05,360 --> 00:27:07,279
captures all the results and saves them

697
00:27:07,279 --> 00:27:09,919
to a file

698
00:27:11,200 --> 00:27:13,360
here's the entire test bench

699
00:27:13,360 --> 00:27:16,000
once again i've decided to sketch

700
00:27:16,000 --> 00:27:18,080
the detailed diagram of the test bench

701
00:27:18,080 --> 00:27:20,159
this time it's a simple matter of coding

702
00:27:20,159 --> 00:27:24,559
up each idea into a chunk of verilog

703
00:27:24,640 --> 00:27:26,799
testbench results file

704
00:27:26,799 --> 00:27:28,480
the self-checking test bench compares

705
00:27:28,480 --> 00:27:30,559
the expected and actual results and

706
00:27:30,559 --> 00:27:32,480
dumps the results to a text file shown

707
00:27:32,480 --> 00:27:35,200
here i print a tally of good and bad

708
00:27:35,200 --> 00:27:38,880
comparisons num good and numb bad for

709
00:27:38,880 --> 00:27:40,960
the 1000 iterations of random values

710
00:27:40,960 --> 00:27:43,520
that i ran in this test i got num good

711
00:27:43,520 --> 00:27:46,240
equal a thousand and num bad equals zero

712
00:27:46,240 --> 00:27:48,640
i'd say i nailed it but just so you know

713
00:27:48,640 --> 00:27:50,559
i've also run it with over a million

714
00:27:50,559 --> 00:27:53,200
iterations and i still get

715
00:27:53,200 --> 00:27:55,919
num good for every iteration and num bad

716
00:27:55,919 --> 00:27:58,640
equals zero

717
00:27:58,960 --> 00:28:01,200
i use the techniques described above

718
00:28:01,200 --> 00:28:03,600
first to diagram then to code up and

719
00:28:03,600 --> 00:28:06,399
simulate each module in the patent

720
00:28:06,399 --> 00:28:09,679
it took about 18 months or roughly 750

721
00:28:09,679 --> 00:28:14,399
hours to complete just the rtl design

722
00:28:14,559 --> 00:28:18,159
constructing a working replica

723
00:28:18,159 --> 00:28:20,000
once i had the fpga code written and

724
00:28:20,000 --> 00:28:21,440
simulated

725
00:28:21,440 --> 00:28:23,279
i drew up a schematic i used a

726
00:28:23,279 --> 00:28:25,279
commercially available fpga board for

727
00:28:25,279 --> 00:28:28,320
each of the seven ics in the design

728
00:28:28,320 --> 00:28:30,080
i worked out a preliminary component

729
00:28:30,080 --> 00:28:31,200
placement

730
00:28:31,200 --> 00:28:33,440
then a final component placement

731
00:28:33,440 --> 00:28:35,679
then i assembled the replica let's go

732
00:28:35,679 --> 00:28:38,960
over the details of the front side

733
00:28:38,960 --> 00:28:41,360
um to the upper left here we have a 1.6

734
00:28:41,360 --> 00:28:43,679
megahertz crystal oscillator the real

735
00:28:43,679 --> 00:28:46,320
calculator used an 800 kilohertz lc

736
00:28:46,320 --> 00:28:48,399
oscillator but because i wanted to use

737
00:28:48,399 --> 00:28:51,760
registered synchronous logic in the fpga

738
00:28:51,760 --> 00:28:54,480
i doubled the clock rate but the main

739
00:28:54,480 --> 00:28:57,120
processor clock is still 200 kilohertz

740
00:28:57,120 --> 00:28:59,760
just like the real calculator

741
00:28:59,760 --> 00:29:01,600
these two modules

742
00:29:01,600 --> 00:29:04,080
form the anode driver of output display

743
00:29:04,080 --> 00:29:06,799
unit 14.

744
00:29:06,799 --> 00:29:09,039
this block is the circuit for detecting

745
00:29:09,039 --> 00:29:11,520
low battery voltage

746
00:29:11,520 --> 00:29:14,320
these three modules comprise the cathode

747
00:29:14,320 --> 00:29:17,360
driver of output display unit 14

748
00:29:17,360 --> 00:29:19,039
and finally at the bottom we have the

749
00:29:19,039 --> 00:29:22,000
seven segment led output display

750
00:29:22,000 --> 00:29:24,159
to the right i list the specific parts i

751
00:29:24,159 --> 00:29:26,559
used

752
00:29:26,559 --> 00:29:28,480
now a detailed view of the lower part of

753
00:29:28,480 --> 00:29:30,480
the front side let's step through the

754
00:29:30,480 --> 00:29:32,559
circle blocks here's a list of the

755
00:29:32,559 --> 00:29:33,919
interesting parts

756
00:29:33,919 --> 00:29:35,600
the upper left we have the arithmetic

757
00:29:35,600 --> 00:29:37,679
and register circuit

758
00:29:37,679 --> 00:29:39,760
on the left middle we have the read-only

759
00:29:39,760 --> 00:29:41,840
memory circuit so there's three roms in

760
00:29:41,840 --> 00:29:43,600
the real calculator and three little

761
00:29:43,600 --> 00:29:45,919
boards on my replica

762
00:29:45,919 --> 00:29:47,360
at the bottom we have the control and

763
00:29:47,360 --> 00:29:49,679
timing circuit

764
00:29:49,679 --> 00:29:51,440
to the left here we have the power on

765
00:29:51,440 --> 00:29:52,480
circuit

766
00:29:52,480 --> 00:29:55,440
and as a nod to hackaday i used a 555

767
00:29:55,440 --> 00:29:56,880
timer

768
00:29:56,880 --> 00:29:58,320
and in the middle here we have these

769
00:29:58,320 --> 00:30:00,480
five brass wires these are the

770
00:30:00,480 --> 00:30:02,960
interconnecting buses and lines and i

771
00:30:02,960 --> 00:30:04,640
want to make a point that

772
00:30:04,640 --> 00:30:07,200
these buses are individual wires the

773
00:30:07,200 --> 00:30:12,240
entire interconnecting bus is five wires

774
00:30:12,240 --> 00:30:14,720
and of course here is the keyboard input

775
00:30:14,720 --> 00:30:17,200
unit number 12. again to the right are

776
00:30:17,200 --> 00:30:21,120
the exact details of what parts i used

777
00:30:21,120 --> 00:30:22,880
of course i also sketched up the

778
00:30:22,880 --> 00:30:24,880
backside

779
00:30:24,880 --> 00:30:27,760
added the wiring and power supply

780
00:30:27,760 --> 00:30:29,440
then i hooked it all up

781
00:30:29,440 --> 00:30:32,960
again let's go over the details

782
00:30:32,960 --> 00:30:34,840
right in the middle here we have a

783
00:30:34,840 --> 00:30:38,240
18650 lithium ion cell

784
00:30:38,240 --> 00:30:39,840
at the top we have a load-sharing

785
00:30:39,840 --> 00:30:41,840
lithium-ion battery charge management

786
00:30:41,840 --> 00:30:43,840
controller

787
00:30:43,840 --> 00:30:46,159
below we have a pair of step-up

788
00:30:46,159 --> 00:30:49,200
step-down dc to dc converters

789
00:30:49,200 --> 00:30:52,000
and this whole block is a separate power

790
00:30:52,000 --> 00:30:53,679
supply module that plugs into the

791
00:30:53,679 --> 00:30:55,279
breadboard

792
00:30:55,279 --> 00:30:57,360
on the left side we have the back of the

793
00:30:57,360 --> 00:30:59,039
cathode driver

794
00:30:59,039 --> 00:31:00,559
and to the right you can see the back of

795
00:31:00,559 --> 00:31:02,559
the anode driver

796
00:31:02,559 --> 00:31:03,919
note that the power supply is not a

797
00:31:03,919 --> 00:31:06,640
replica of the original hp35

798
00:31:06,640 --> 00:31:08,960
and that my replica runs for about 30

799
00:31:08,960 --> 00:31:12,080
hours on a full charge

800
00:31:12,080 --> 00:31:13,679
now here's a detailed view of the lower

801
00:31:13,679 --> 00:31:15,760
part of the back side let's step through

802
00:31:15,760 --> 00:31:17,360
the circle blocks

803
00:31:17,360 --> 00:31:18,960
at the top here we have the back of the

804
00:31:18,960 --> 00:31:20,960
seven segment display

805
00:31:20,960 --> 00:31:23,279
below it we have the five by eight

806
00:31:23,279 --> 00:31:25,200
matrix of switches

807
00:31:25,200 --> 00:31:27,679
and you can see i made a point to

808
00:31:27,679 --> 00:31:30,320
highlight the matrix uh

809
00:31:30,320 --> 00:31:32,399
nature of it

810
00:31:32,399 --> 00:31:33,679
over here we have the back of the

811
00:31:33,679 --> 00:31:36,000
register register and arithmetic circuit

812
00:31:36,000 --> 00:31:37,679
we have the back of the read-only

813
00:31:37,679 --> 00:31:39,840
memories here's the back of the control

814
00:31:39,840 --> 00:31:42,080
and timing circuit and finally the back

815
00:31:42,080 --> 00:31:45,360
of the power on circuit

816
00:31:45,440 --> 00:31:47,440
now i'll show a short video that

817
00:31:47,440 --> 00:31:50,240
demonstrates a few example calculations

818
00:31:50,240 --> 00:31:55,159
from the 50-year-old operating manual

819
00:31:59,610 --> 00:32:22,079
[Music]

820
00:32:28,930 --> 00:32:41,720
[Music]

821
00:32:52,650 --> 00:32:55,729
[Music]

822
00:33:18,100 --> 00:33:21,149
[Music]

823
00:33:44,650 --> 00:33:47,729
[Music]

824
00:33:57,710 --> 00:34:00,829
[Music]

825
00:34:11,280 --> 00:34:14,839
[Music]

826
00:34:25,199 --> 00:34:27,599
so for future goals

827
00:34:27,599 --> 00:34:30,560
perhaps i would i'll do a pcb version of

828
00:34:30,560 --> 00:34:32,239
this calculator

829
00:34:32,239 --> 00:34:34,480
and what i'd really like to do is a gate

830
00:34:34,480 --> 00:34:36,480
level version along the lines of the

831
00:34:36,480 --> 00:34:38,480
monster 6502

832
00:34:38,480 --> 00:34:40,399
now i know the monster 6502 is a

833
00:34:40,399 --> 00:34:41,839
transistor level

834
00:34:41,839 --> 00:34:44,480
but uh for my purposes i think using

835
00:34:44,480 --> 00:34:47,359
tiny logic gate level design would be

836
00:34:47,359 --> 00:34:49,679
fantastic

837
00:34:49,679 --> 00:34:51,918
and finally uh here's some contact

838
00:34:51,918 --> 00:34:54,960
information a get love get lab

839
00:34:54,960 --> 00:34:57,200
repository which is empty at this point

840
00:34:57,200 --> 00:34:59,440
but i will be adding the files

841
00:34:59,440 --> 00:35:01,520
and my niece drew this picture and you

842
00:35:01,520 --> 00:35:03,599
can clearly tell uh who's holding the

843
00:35:03,599 --> 00:35:05,680
calculator in that picture

844
00:35:05,680 --> 00:35:07,440
and that is the end of my presentation

845
00:35:07,440 --> 00:35:10,599
thank you

