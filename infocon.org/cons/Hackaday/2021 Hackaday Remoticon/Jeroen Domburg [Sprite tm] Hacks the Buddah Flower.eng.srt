1
00:00:05,279 --> 00:00:07,359
okay everybody welcome back

2
00:00:07,359 --> 00:00:08,960
um let's see if we can get through a

3
00:00:08,960 --> 00:00:10,480
talk without mentioning turtles this

4
00:00:10,480 --> 00:00:12,639
time or maybe we've mentioned turtles

5
00:00:12,639 --> 00:00:14,480
it's okay

6
00:00:14,480 --> 00:00:16,079
our next speaker is well known to the

7
00:00:16,079 --> 00:00:18,240
hackaday community uh having presented

8
00:00:18,240 --> 00:00:20,560
at every con we've had so far

9
00:00:20,560 --> 00:00:22,240
if you're you were lucky enough to

10
00:00:22,240 --> 00:00:26,000
attend the 2019 card uh conn the uh

11
00:00:26,000 --> 00:00:27,840
conference badge that everyone got to

12
00:00:27,840 --> 00:00:30,560
play with was his design today he's

13
00:00:30,560 --> 00:00:32,558
going to take us on a journey beneath

14
00:00:32,558 --> 00:00:34,239
the plastic blob

15
00:00:34,239 --> 00:00:36,160
covering a chip on board device and show

16
00:00:36,160 --> 00:00:38,480
us just how hard reverse engineering an

17
00:00:38,480 --> 00:00:40,559
unknown shift can be you probably know

18
00:00:40,559 --> 00:00:42,960
him better as sprite tm but please

19
00:00:42,960 --> 00:00:45,920
welcome joran domberg

20
00:00:45,920 --> 00:00:48,879
so hello everyone um

21
00:00:48,879 --> 00:00:50,480
yeah i think everything should be set up

22
00:00:50,480 --> 00:00:52,320
now okay thank you dan for this great

23
00:00:52,320 --> 00:00:54,320
introduction um

24
00:00:54,320 --> 00:00:56,960
yeah uh so what we're gonna do today is

25
00:00:56,960 --> 00:00:59,520
look at the mysteries of this particular

26
00:00:59,520 --> 00:01:01,920
piece of tat

27
00:01:01,920 --> 00:01:03,039
this is

28
00:01:03,039 --> 00:01:05,040
well we call it a buddha flower it's

29
00:01:05,040 --> 00:01:08,159
actually a meditation aid

30
00:01:08,159 --> 00:01:10,320
that you can buy on the internet in

31
00:01:10,320 --> 00:01:13,360
order to help you meditate and

32
00:01:13,360 --> 00:01:15,280
what it does it actually if you turn it

33
00:01:15,280 --> 00:01:17,119
on there's electronics inside obviously

34
00:01:17,119 --> 00:01:19,759
there's electronics inside

35
00:01:19,759 --> 00:01:22,479
it it

36
00:01:22,640 --> 00:01:24,880
plays music it plays buddhist chants

37
00:01:24,880 --> 00:01:26,880
both to help you meditate as well as

38
00:01:26,880 --> 00:01:29,040
something that here in china you can put

39
00:01:29,040 --> 00:01:32,159
next to when someone has died

40
00:01:32,159 --> 00:01:34,320
you have effectively an automated prayer

41
00:01:34,320 --> 00:01:35,600
machine

42
00:01:35,600 --> 00:01:37,680
and

43
00:01:37,680 --> 00:01:39,520
the

44
00:01:39,520 --> 00:01:41,600
let's see if i can get to my

45
00:01:41,600 --> 00:01:42,280
presentation

46
00:01:42,280 --> 00:01:44,000
[Music]

47
00:01:44,000 --> 00:01:46,240
sorry it's still early here i'm very not

48
00:01:46,240 --> 00:01:49,520
in a multitasking mood

49
00:01:49,520 --> 00:01:51,920
okay um so

50
00:01:51,920 --> 00:01:54,479
obviously the question is how

51
00:01:54,479 --> 00:01:56,960
did i why did i get such an obvious

52
00:01:56,960 --> 00:01:59,680
piece of that that is of

53
00:01:59,680 --> 00:02:01,680
a religion that i'm not even like in a

54
00:02:01,680 --> 00:02:05,360
member of well um it all started with

55
00:02:05,360 --> 00:02:07,040
the um

56
00:02:07,040 --> 00:02:10,080
that the youtube uh channel bigclife.com

57
00:02:10,080 --> 00:02:12,480
you probably all know it and if not go

58
00:02:12,480 --> 00:02:15,200
and if not go and watch it

59
00:02:15,200 --> 00:02:18,239
um and he had uh

60
00:02:18,239 --> 00:02:20,000
this this buddha flower he got it of

61
00:02:20,000 --> 00:02:22,640
aliexpress or something and

62
00:02:22,640 --> 00:02:24,800
he was interested in what makes it tick

63
00:02:24,800 --> 00:02:25,680
and

64
00:02:25,680 --> 00:02:28,319
so he opened it up and what's in there

65
00:02:28,319 --> 00:02:30,720
is effectively a little pcb

66
00:02:30,720 --> 00:02:33,200
that runs the entire show and obviously

67
00:02:33,200 --> 00:02:35,360
there's also a bunch of leds and a

68
00:02:35,360 --> 00:02:37,280
speaker in there but the most important

69
00:02:37,280 --> 00:02:39,840
part is this this little pcb

70
00:02:39,840 --> 00:02:44,400
so um what's actually on the pcb is a

71
00:02:44,400 --> 00:02:46,080
82 megabyte

72
00:02:46,080 --> 00:02:48,319
spi flash chip which is just a jelly

73
00:02:48,319 --> 00:02:50,080
bean part and probably the songs are in

74
00:02:50,080 --> 00:02:51,360
there we assume

75
00:02:51,360 --> 00:02:54,000
and the other thing is a so-called blob

76
00:02:54,000 --> 00:02:56,560
a chip on board a bare piece of silicon

77
00:02:56,560 --> 00:02:58,560
that has been bonded to

78
00:02:58,560 --> 00:03:00,319
the board and

79
00:03:00,319 --> 00:03:01,760
is

80
00:03:01,760 --> 00:03:03,599
you know people put some epoxy over it

81
00:03:03,599 --> 00:03:06,000
and they call it the day

82
00:03:06,000 --> 00:03:07,840
however the flagship is interesting

83
00:03:07,840 --> 00:03:09,760
because that is very common and you can

84
00:03:09,760 --> 00:03:12,319
dump that and you can reprogram that so

85
00:03:12,319 --> 00:03:14,560
the question he asked was effectively

86
00:03:14,560 --> 00:03:16,720
would it be possible to replace the

87
00:03:16,720 --> 00:03:18,959
songs on this on this flower for

88
00:03:18,959 --> 00:03:20,159
something

89
00:03:20,159 --> 00:03:21,360
a bit more

90
00:03:21,360 --> 00:03:22,480
um

91
00:03:22,480 --> 00:03:24,799
you know western maybe

92
00:03:24,799 --> 00:03:27,200
so obviously the entire comment section

93
00:03:27,200 --> 00:03:28,560
of the youtube

94
00:03:28,560 --> 00:03:30,480
video immediately went

95
00:03:30,480 --> 00:03:34,239
to to look at it um so i

96
00:03:34,239 --> 00:03:36,159
so uh the

97
00:03:36,159 --> 00:03:38,480
hello my presentation is not doing what

98
00:03:38,480 --> 00:03:40,879
i wanted to do

99
00:03:40,879 --> 00:03:45,399
hello what are you up to

100
00:03:46,000 --> 00:03:47,599
my keyboard is running away from me i

101
00:03:47,599 --> 00:03:49,680
have no idea what that was sorry

102
00:03:49,680 --> 00:03:52,959
um so uh we got a file called bud.bin

103
00:03:52,959 --> 00:03:56,879
which is two megabytes exactly um and uh

104
00:03:56,879 --> 00:03:58,840
obviously everyone ran the usual

105
00:03:58,840 --> 00:04:01,599
suspects on it when it comes to

106
00:04:01,599 --> 00:04:03,519
inspecting what a file what firmware

107
00:04:03,519 --> 00:04:05,439
does so you start off with the unix

108
00:04:05,439 --> 00:04:07,360
program file which happily tells me it's

109
00:04:07,360 --> 00:04:10,000
data thank you captain obvious

110
00:04:10,000 --> 00:04:11,840
bin walk which is usually very good at

111
00:04:11,840 --> 00:04:14,319
finding stuff finds absolutely nothing

112
00:04:14,319 --> 00:04:16,639
and even strings can't really find

113
00:04:16,639 --> 00:04:18,880
anything human readable in the

114
00:04:18,880 --> 00:04:20,079
binary

115
00:04:20,079 --> 00:04:22,240
so bimwalk has an entropy view which

116
00:04:22,240 --> 00:04:24,880
effectively tells you over the

117
00:04:24,880 --> 00:04:27,600
size of the file how random it is and if

118
00:04:27,600 --> 00:04:29,360
it's more random it either means that

119
00:04:29,360 --> 00:04:30,800
stuff is encrypted or stuff is

120
00:04:30,800 --> 00:04:32,800
compressed you unfortunately can't

121
00:04:32,800 --> 00:04:34,000
really see the difference between the

122
00:04:34,000 --> 00:04:34,800
two

123
00:04:34,800 --> 00:04:36,639
and what you see here is that most of

124
00:04:36,639 --> 00:04:39,040
the time the entropy is very high so

125
00:04:39,040 --> 00:04:41,280
it's either compressed or encrypted

126
00:04:41,280 --> 00:04:43,840
there's only a few tiny little blips

127
00:04:43,840 --> 00:04:46,880
where the um where the line goes up and

128
00:04:46,880 --> 00:04:47,600
and

129
00:04:47,600 --> 00:04:48,639
you know

130
00:04:48,639 --> 00:04:50,479
to a level that is not like very close

131
00:04:50,479 --> 00:04:52,160
to one

132
00:04:52,160 --> 00:04:54,639
so obviously with all automated tools uh

133
00:04:54,639 --> 00:04:56,560
failing we still have

134
00:04:56,560 --> 00:04:58,720
one remaining tool and that is to just

135
00:04:58,720 --> 00:05:00,479
look at the hex data and what we see

136
00:05:00,479 --> 00:05:02,320
here also doesn't quite make sense i

137
00:05:02,320 --> 00:05:04,000
mean you can see that there's some

138
00:05:04,000 --> 00:05:06,000
pattern to it

139
00:05:06,000 --> 00:05:07,520
but if you look at the hex values

140
00:05:07,520 --> 00:05:09,280
there's not really anything in there

141
00:05:09,280 --> 00:05:11,759
that seems to stand out

142
00:05:11,759 --> 00:05:13,440
and a little bit later in the other low

143
00:05:13,440 --> 00:05:15,280
entropy section there's there's more of

144
00:05:15,280 --> 00:05:17,759
the same you can see it repeats but what

145
00:05:17,759 --> 00:05:20,080
all these individual things mean

146
00:05:20,080 --> 00:05:22,880
it doesn't really seem to to to make any

147
00:05:22,880 --> 00:05:25,759
sense and even later in the large

148
00:05:25,759 --> 00:05:27,440
high entropy section it just becomes

149
00:05:27,440 --> 00:05:30,160
bubbly good and there's no pattern that

150
00:05:30,160 --> 00:05:32,320
we could discern in there

151
00:05:32,320 --> 00:05:33,120
so

152
00:05:33,120 --> 00:05:34,479
you know sometimes you just have to

153
00:05:34,479 --> 00:05:36,400
stare at these things for long enough

154
00:05:36,400 --> 00:05:39,039
and and just simply hope for

155
00:05:39,039 --> 00:05:40,639
enlightenment

156
00:05:40,639 --> 00:05:42,960
and if you do that on this code you can

157
00:05:42,960 --> 00:05:45,199
kind of

158
00:05:45,199 --> 00:05:47,120
start seeing something there's there's a

159
00:05:47,120 --> 00:05:49,440
certain pattern that is emerging you can

160
00:05:49,440 --> 00:05:51,039
see the pattern

161
00:05:51,039 --> 00:05:53,680
but there's nothing really that stands

162
00:05:53,680 --> 00:05:54,800
out

163
00:05:54,800 --> 00:05:57,520
you know i think this is something this

164
00:05:57,520 --> 00:06:00,799
is shitty encryption

165
00:06:00,960 --> 00:06:02,400
okay so

166
00:06:02,400 --> 00:06:04,080
i need to qualify that what is shitty

167
00:06:04,080 --> 00:06:06,160
encryption well there are certain levels

168
00:06:06,160 --> 00:06:07,520
of encryption you've got your old

169
00:06:07,520 --> 00:06:09,759
standard aes encryption for instance and

170
00:06:09,759 --> 00:06:12,479
all the other proven and reliable and

171
00:06:12,479 --> 00:06:14,960
tested encryption methods and these are

172
00:06:14,960 --> 00:06:17,280
effectively if well implemented these

173
00:06:17,280 --> 00:06:18,240
are

174
00:06:18,240 --> 00:06:19,680
bulletproof

175
00:06:19,680 --> 00:06:21,440
as in you put in a key you put it on a

176
00:06:21,440 --> 00:06:23,680
short string you a s encrypt that and

177
00:06:23,680 --> 00:06:25,039
you get gobbly and without the

178
00:06:25,039 --> 00:06:26,639
proper key you'll never get that string

179
00:06:26,639 --> 00:06:28,160
back

180
00:06:28,160 --> 00:06:30,560
however you can also implement it badly

181
00:06:30,560 --> 00:06:32,960
there's a very famous image of a picture

182
00:06:32,960 --> 00:06:35,199
that is encrypted using this method and

183
00:06:35,199 --> 00:06:36,800
you probably can't tell what this

184
00:06:36,800 --> 00:06:38,800
picture originally was because the

185
00:06:38,800 --> 00:06:39,919
encryption

186
00:06:39,919 --> 00:06:42,319
you know makes it into goblet right

187
00:06:42,319 --> 00:06:43,440
right

188
00:06:43,440 --> 00:06:46,400
anyway um then you have encryption that

189
00:06:46,400 --> 00:06:48,400
people just made up like you had a

190
00:06:48,400 --> 00:06:50,080
programmer and they were like oh this

191
00:06:50,080 --> 00:06:52,639
sounds like a few very good routines and

192
00:06:52,639 --> 00:06:55,280
if i if i run this on my code then no

193
00:06:55,280 --> 00:06:57,360
one can ever figure out what it is so

194
00:06:57,360 --> 00:06:59,199
this this is what that would look like

195
00:06:59,199 --> 00:07:00,800
you take hello

196
00:07:00,800 --> 00:07:03,039
you decrease all the bits by one

197
00:07:03,039 --> 00:07:05,199
you flip all the bits you you bit you

198
00:07:05,199 --> 00:07:07,199
you bit wise invert it and and then you

199
00:07:07,199 --> 00:07:08,400
revert in

200
00:07:08,400 --> 00:07:11,199
reverse the entire sequence so

201
00:07:11,199 --> 00:07:12,880
whatever programmer came up with that

202
00:07:12,880 --> 00:07:14,240
might have thought that it was a very

203
00:07:14,240 --> 00:07:16,560
good idea might have even sung about it

204
00:07:16,560 --> 00:07:18,720
but yeah if you know a little bit about

205
00:07:18,720 --> 00:07:20,400
cryptography you know that this can be

206
00:07:20,400 --> 00:07:22,080
broken pretty quickly

207
00:07:22,080 --> 00:07:24,080
and finally you have when they don't

208
00:07:24,080 --> 00:07:26,240
even try this is called obfuscation and

209
00:07:26,240 --> 00:07:28,080
obfuscation is effectively used if you

210
00:07:28,080 --> 00:07:30,000
don't want people to see immediately

211
00:07:30,000 --> 00:07:31,599
what it's on about but you don't really

212
00:07:31,599 --> 00:07:35,120
care if they break the scheme or not

213
00:07:35,120 --> 00:07:37,199
so

214
00:07:37,199 --> 00:07:39,199
another definition of shitty encryption

215
00:07:39,199 --> 00:07:41,199
or at least where it comes from is a

216
00:07:41,199 --> 00:07:43,599
very nice quote by bruce snyder anyone

217
00:07:43,599 --> 00:07:45,360
from the most clueless amateur to the

218
00:07:45,360 --> 00:07:47,120
best cryptographer can create an

219
00:07:47,120 --> 00:07:49,199
algorithm that they themselves can't

220
00:07:49,199 --> 00:07:50,319
break

221
00:07:50,319 --> 00:07:52,960
and this is kind of what i think

222
00:07:52,960 --> 00:07:55,280
happened here maybe

223
00:07:55,280 --> 00:07:57,280
and in order to show how it works i

224
00:07:57,280 --> 00:07:58,800
gotta tell a little bit about xr

225
00:07:58,800 --> 00:08:00,560
encryption if you already know this this

226
00:08:00,560 --> 00:08:03,120
is only gonna take a few slides so if i

227
00:08:03,120 --> 00:08:05,440
take the text hello remote called people

228
00:08:05,440 --> 00:08:07,520
and i do xor encryption with super

229
00:08:07,520 --> 00:08:09,759
secret uh key materials what effectively

230
00:08:09,759 --> 00:08:11,520
happens is that i take

231
00:08:11,520 --> 00:08:13,520
every byte in the

232
00:08:13,520 --> 00:08:15,440
original text and i xor it with the

233
00:08:15,440 --> 00:08:18,160
corresponding byte in the key

234
00:08:18,160 --> 00:08:21,199
and what you get is again goblin

235
00:08:21,199 --> 00:08:22,879
however if i take a different string

236
00:08:22,879 --> 00:08:24,639
that is changed only a little bit it now

237
00:08:24,639 --> 00:08:26,319
says hello hackaday people instead of

238
00:08:26,319 --> 00:08:28,560
hello remote econ people and i encrypt

239
00:08:28,560 --> 00:08:30,479
it with exactly the same as exactly the

240
00:08:30,479 --> 00:08:31,520
same key

241
00:08:31,520 --> 00:08:33,200
you actually get something interesting

242
00:08:33,200 --> 00:08:36,559
because this works on a by by basis

243
00:08:36,559 --> 00:08:38,479
the first and the last bit of the

244
00:08:38,479 --> 00:08:40,640
encrypted data are exactly the same the

245
00:08:40,640 --> 00:08:42,159
middle bit is different obviously

246
00:08:42,159 --> 00:08:44,080
because the text there is different but

247
00:08:44,080 --> 00:08:46,320
the first and the last bit are the same

248
00:08:46,320 --> 00:08:49,120
and if i only have the plain text i can

249
00:08:49,120 --> 00:08:50,399
tell that

250
00:08:50,399 --> 00:08:52,480
you know probably the data in those

251
00:08:52,480 --> 00:08:54,640
locations is exactly the same

252
00:08:54,640 --> 00:08:56,560
and there's a second property

253
00:08:56,560 --> 00:08:58,640
and that is if you xor encrypt data that

254
00:08:58,640 --> 00:09:01,120
is all zeros your result effectively is

255
00:09:01,120 --> 00:09:03,440
the key so you should make sure to never

256
00:09:03,440 --> 00:09:04,800
do that because you can just read the

257
00:09:04,800 --> 00:09:06,839
key straight out of the encrypted data

258
00:09:06,839 --> 00:09:09,920
stream so too long didn't read this if

259
00:09:09,920 --> 00:09:11,440
you xor data with a key you get

260
00:09:11,440 --> 00:09:12,800
gibberish something that i didn't

261
00:09:12,800 --> 00:09:14,560
mention but it's true that you xor it

262
00:09:14,560 --> 00:09:17,120
with the key again you get the data back

263
00:09:17,120 --> 00:09:19,200
both the data and the key kind of leak

264
00:09:19,200 --> 00:09:22,399
into the the the gibberish and uh yeah

265
00:09:22,399 --> 00:09:24,320
you should never um

266
00:09:24,320 --> 00:09:26,240
try to encrypt all zeros

267
00:09:26,240 --> 00:09:27,920
with that in mind if we go back to the

268
00:09:27,920 --> 00:09:30,399
binaries something interesting pops up

269
00:09:30,399 --> 00:09:32,560
and if we take the other region and and

270
00:09:32,560 --> 00:09:34,480
also look at that then you know more

271
00:09:34,480 --> 00:09:36,480
interesting stuff pops up and a little

272
00:09:36,480 --> 00:09:38,880
bit later you get even more interesting

273
00:09:38,880 --> 00:09:39,839
stuff

274
00:09:39,839 --> 00:09:41,040
so

275
00:09:41,040 --> 00:09:42,640
strangely all these things for instance

276
00:09:42,640 --> 00:09:44,560
start with eff and these are all

277
00:09:44,560 --> 00:09:47,279
structures they're either 32-bit sorry

278
00:09:47,279 --> 00:09:49,839
32 bytes or 16-byte structures that

279
00:09:49,839 --> 00:09:51,440
describe something

280
00:09:51,440 --> 00:09:53,279
and i'll tell you you often get in

281
00:09:53,279 --> 00:09:55,360
structures like that it's all zeros so

282
00:09:55,360 --> 00:09:56,720
it's very likely that of these

283
00:09:56,720 --> 00:09:59,040
structures a whole bunch of them start

284
00:09:59,040 --> 00:10:01,440
out with all zeros which means that we

285
00:10:01,440 --> 00:10:03,839
now know the first two

286
00:10:03,839 --> 00:10:05,760
bytes of our key stream which is likely

287
00:10:05,760 --> 00:10:07,839
eff

288
00:10:07,839 --> 00:10:09,920
so a whole bunch of us started working

289
00:10:09,920 --> 00:10:12,000
on that and we recovered the key stream

290
00:10:12,000 --> 00:10:15,440
it's ef ffdf9f

291
00:10:15,440 --> 00:10:16,490
1f3e7cf

292
00:10:16,490 --> 00:10:18,880
[Music]

293
00:10:18,880 --> 00:10:21,600
oh this goes on forever

294
00:10:21,600 --> 00:10:25,519
yeah this this doesn't repeat itself so

295
00:10:25,519 --> 00:10:27,519
there must be something that generates

296
00:10:27,519 --> 00:10:29,279
this and we can actually

297
00:10:29,279 --> 00:10:31,600
figure this out pretty easily because

298
00:10:31,600 --> 00:10:33,440
if you see how

299
00:10:33,440 --> 00:10:35,519
the xor

300
00:10:35,519 --> 00:10:37,600
key changes from y to bytes you see that

301
00:10:37,600 --> 00:10:40,320
ef for instance only goes to ff 9f only

302
00:10:40,320 --> 00:10:42,560
goes to one out of two values

303
00:10:42,560 --> 00:10:44,720
f0 also goes only to one out of two

304
00:10:44,720 --> 00:10:47,440
values there's no third option

305
00:10:47,440 --> 00:10:49,600
and in general if you look at these

306
00:10:49,600 --> 00:10:51,519
values hard enough you can figure out

307
00:10:51,519 --> 00:10:54,000
that if you have a certain

308
00:10:54,000 --> 00:10:55,279
previous

309
00:10:55,279 --> 00:10:56,880
xor value x

310
00:10:56,880 --> 00:10:59,519
then it either becomes x

311
00:10:59,519 --> 00:11:01,440
sorry then it either becomes the value

312
00:11:01,440 --> 00:11:03,839
left shifted by one or the value left

313
00:11:03,839 --> 00:11:06,240
shifted by one exhorts with

314
00:11:06,240 --> 00:11:08,320
21 hexadecimal

315
00:11:08,320 --> 00:11:10,640
so here's that routine in

316
00:11:10,640 --> 00:11:12,160
c if you

317
00:11:12,160 --> 00:11:14,079
if you think it's easier to read that

318
00:11:14,079 --> 00:11:16,480
but the trick is that it's dependent on

319
00:11:16,480 --> 00:11:18,240
a certain bit that is generated

320
00:11:18,240 --> 00:11:20,640
somewhere else that bit decides which of

321
00:11:20,640 --> 00:11:21,839
the two

322
00:11:21,839 --> 00:11:23,440
values to use

323
00:11:23,440 --> 00:11:25,279
and obviously because we have the key

324
00:11:25,279 --> 00:11:27,120
stream we can also look at what those

325
00:11:27,120 --> 00:11:30,160
bits must have been and you get this

326
00:11:30,160 --> 00:11:31,839
this range out of there

327
00:11:31,839 --> 00:11:34,480
and the issue is that again it goes on

328
00:11:34,480 --> 00:11:36,800
forever and in this particular case

329
00:11:36,800 --> 00:11:38,399
there's no real

330
00:11:38,399 --> 00:11:40,480
pattern discernible in there it kind of

331
00:11:40,480 --> 00:11:43,279
looks like random

332
00:11:43,279 --> 00:11:45,600
so again there's not much to do here

333
00:11:45,600 --> 00:11:48,399
with our tools we have to just you know

334
00:11:48,399 --> 00:11:51,120
meditate on this a bit and

335
00:11:51,120 --> 00:11:52,880
then you then you start thinking like

336
00:11:52,880 --> 00:11:55,360
this looks random so first of all it

337
00:11:55,360 --> 00:11:57,200
must be generated so there must be some

338
00:11:57,200 --> 00:11:59,839
generator in there and it looks random

339
00:11:59,839 --> 00:12:02,320
but it is repeatable so maybe this is a

340
00:12:02,320 --> 00:12:04,399
pseudo-random number generator it seems

341
00:12:04,399 --> 00:12:06,560
likely so what kind of pseudo random

342
00:12:06,560 --> 00:12:08,399
number generator would you implement in

343
00:12:08,399 --> 00:12:10,560
a small chip well that must be a linear

344
00:12:10,560 --> 00:12:12,399
feedback shift register it's just about

345
00:12:12,399 --> 00:12:14,480
the cheapest way to implement a pseudo

346
00:12:14,480 --> 00:12:17,200
pseudo random number stream

347
00:12:17,200 --> 00:12:19,040
so linear feedback shift register looks

348
00:12:19,040 --> 00:12:21,040
like this the top bit is hardware you

349
00:12:21,040 --> 00:12:23,519
effectively have 16 flip flops or a a

350
00:12:23,519 --> 00:12:25,360
certain amount of flip-flops

351
00:12:25,360 --> 00:12:26,399
and

352
00:12:26,399 --> 00:12:28,320
they form a shift register but every now

353
00:12:28,320 --> 00:12:30,720
and then there is an xor inserted that

354
00:12:30,720 --> 00:12:31,760
exhorts

355
00:12:31,760 --> 00:12:34,480
the value with the last

356
00:12:34,480 --> 00:12:36,160
flip-flops value

357
00:12:36,160 --> 00:12:38,320
and the bit under it is how you would

358
00:12:38,320 --> 00:12:40,000
implement it in c

359
00:12:40,000 --> 00:12:43,200
so lfsrs come in a few different uh

360
00:12:43,200 --> 00:12:44,320
sizes

361
00:12:44,320 --> 00:12:46,000
so there's a few unknowns we don't know

362
00:12:46,000 --> 00:12:48,079
the length of the lfsr so how many flip

363
00:12:48,079 --> 00:12:49,600
flops are involved we don't know the

364
00:12:49,600 --> 00:12:52,959
position of the tabs so where the xor

365
00:12:52,959 --> 00:12:55,040
gates are inserted and we don't know

366
00:12:55,040 --> 00:12:56,639
what the initial state of the flip flops

367
00:12:56,639 --> 00:12:57,600
are

368
00:12:57,600 --> 00:13:00,079
well we can guess a few things so the

369
00:13:00,079 --> 00:13:02,240
length of the lfsr we can guess it's

370
00:13:02,240 --> 00:13:04,240
probably probably a multiple of eight

371
00:13:04,240 --> 00:13:06,240
because that's common and it's probably

372
00:13:06,240 --> 00:13:07,920
not 8 because that's a little bit on the

373
00:13:07,920 --> 00:13:10,560
low side so that's likely 16 bit

374
00:13:10,560 --> 00:13:12,800
that positions we don't know so you know

375
00:13:12,800 --> 00:13:14,720
there's two to the 16th possible depth

376
00:13:14,720 --> 00:13:16,959
positions we need to try the same thing

377
00:13:16,959 --> 00:13:18,800
is true with the start states there's 2

378
00:13:18,800 --> 00:13:21,360
to the 16s so that means that we've got

379
00:13:21,360 --> 00:13:24,160
four uh four billion options to go

380
00:13:24,160 --> 00:13:25,200
through

381
00:13:25,200 --> 00:13:27,040
and you might think like oh that's a lot

382
00:13:27,040 --> 00:13:29,600
yeah it's not lfsr is really

383
00:13:29,600 --> 00:13:31,760
small and quick to do so on my five year

384
00:13:31,760 --> 00:13:33,279
laptop i can

385
00:13:33,279 --> 00:13:35,600
burst through that in 60 seconds even

386
00:13:35,600 --> 00:13:36,880
less

387
00:13:36,880 --> 00:13:39,839
so with some code and that code ended up

388
00:13:39,839 --> 00:13:42,720
being a encryption brute forcer so i now

389
00:13:42,720 --> 00:13:44,320
have a program that is everything

390
00:13:44,320 --> 00:13:46,399
described above automatically so you

391
00:13:46,399 --> 00:13:48,240
feed a binary into it and it gives you

392
00:13:48,240 --> 00:13:49,760
the keys

393
00:13:49,760 --> 00:13:51,680
so that results in effectively the

394
00:13:51,680 --> 00:13:53,839
binary is now fully tracked and you can

395
00:13:53,839 --> 00:13:55,600
see stuff show up and this actually

396
00:13:55,600 --> 00:13:57,760
looks like a file system of source and

397
00:13:57,760 --> 00:14:00,399
that's true it is a file system

398
00:14:00,399 --> 00:14:02,079
and this is what it normally contains

399
00:14:02,079 --> 00:14:04,639
you've got a file called code.app uh

400
00:14:04,639 --> 00:14:06,320
which is a file which has its own

401
00:14:06,320 --> 00:14:08,240
internal segments and then you've got a

402
00:14:08,240 --> 00:14:09,440
whole bunch of files called

403
00:14:09,440 --> 00:14:11,519
something.f1a

404
00:14:11,519 --> 00:14:14,480
so the stuff in the code.app is well

405
00:14:14,480 --> 00:14:15,360
code

406
00:14:15,360 --> 00:14:16,560
as it says

407
00:14:16,560 --> 00:14:19,680
and the stuff the f1a stuff must be

408
00:14:19,680 --> 00:14:21,920
audio because it's effectively

409
00:14:21,920 --> 00:14:23,600
covering the largest part of the flash

410
00:14:23,600 --> 00:14:24,560
space

411
00:14:24,560 --> 00:14:26,639
and there's there's just as many in

412
00:14:26,639 --> 00:14:28,240
there as there are supposed to be songs

413
00:14:28,240 --> 00:14:29,760
in the thing

414
00:14:29,760 --> 00:14:31,760
so we now have machine code but what cpu

415
00:14:31,760 --> 00:14:33,839
is it well um

416
00:14:33,839 --> 00:14:36,399
you actually have tools for that and cpu

417
00:14:36,399 --> 00:14:40,560
rack actually tells me it's an 8051

418
00:14:40,560 --> 00:14:41,519
okay

419
00:14:41,519 --> 00:14:45,199
so an 8051 i had a whole section here um

420
00:14:45,199 --> 00:14:47,360
detailing the ins and outs on it i have

421
00:14:47,360 --> 00:14:50,320
a few opinions on it i'm not gonna get

422
00:14:50,320 --> 00:14:52,399
into it i don't want to make this too

423
00:14:52,399 --> 00:14:55,199
opinionated but so just let's let's

424
00:14:55,199 --> 00:14:57,120
let's skip over this

425
00:14:57,120 --> 00:15:00,000
the truth is we do have an atl61 and we

426
00:15:00,000 --> 00:15:01,920
can now see that this disassembly of

427
00:15:01,920 --> 00:15:04,959
those overlay uh chunks in the code dot

428
00:15:04,959 --> 00:15:07,519
app sync which is great i mean we we've

429
00:15:07,519 --> 00:15:09,760
got code to look at and because this is

430
00:15:09,760 --> 00:15:12,000
in flash we could even you know replace

431
00:15:12,000 --> 00:15:14,079
this code with something else

432
00:15:14,079 --> 00:15:16,079
however the thing is that

433
00:15:16,079 --> 00:15:19,120
the code is unfortunately incomplete

434
00:15:19,120 --> 00:15:21,040
so why is it incomplete well not all the

435
00:15:21,040 --> 00:15:23,040
code is in flash and there's a few

436
00:15:23,040 --> 00:15:25,600
reasons we can we can we can deduce that

437
00:15:25,600 --> 00:15:27,680
well first of all the code that app is

438
00:15:27,680 --> 00:15:30,240
only 9k of size which seems a little bit

439
00:15:30,240 --> 00:15:32,160
on the small side

440
00:15:32,160 --> 00:15:33,519
the other thing is something needs to

441
00:15:33,519 --> 00:15:35,680
load to the code.adb something needs to

442
00:15:35,680 --> 00:15:37,920
do the decryption and you know figure

443
00:15:37,920 --> 00:15:40,480
out where code.app is and that that is

444
00:15:40,480 --> 00:15:42,160
likely some other code

445
00:15:42,160 --> 00:15:44,399
and the most obvious smoking bullet is

446
00:15:44,399 --> 00:15:46,399
that the code that abps calls and jumps

447
00:15:46,399 --> 00:15:49,519
into so memory region we don't have yet

448
00:15:49,519 --> 00:15:51,839
so up till now we've done everything

449
00:15:51,839 --> 00:15:55,199
just using the two megabytes flash

450
00:15:55,199 --> 00:15:59,199
binary dump that clive made

451
00:15:59,199 --> 00:16:01,199
but now it's time to actually get our

452
00:16:01,199 --> 00:16:04,320
own buddha flower so i got one of taobao

453
00:16:04,320 --> 00:16:06,399
it cost me like this is the equivalent

454
00:16:06,399 --> 00:16:08,720
of like seven dollars i think

455
00:16:08,720 --> 00:16:11,600
and um yeah i received it it looks

456
00:16:11,600 --> 00:16:14,160
exactly the same as big clive's

457
00:16:14,160 --> 00:16:16,959
only mine has 56 songs here are all of

458
00:16:16,959 --> 00:16:18,880
them if you're interested

459
00:16:18,880 --> 00:16:21,040
and obviously i opened it up

460
00:16:21,040 --> 00:16:22,800
it looks pretty much the same internally

461
00:16:22,800 --> 00:16:25,040
but the pcb is a little bit different

462
00:16:25,040 --> 00:16:26,880
i don't get a blob i actually get a

463
00:16:26,880 --> 00:16:29,040
proper 16 pin chip

464
00:16:29,040 --> 00:16:31,120
unfortunately the chip is not marked

465
00:16:31,120 --> 00:16:33,759
anywhere so i still don't know what what

466
00:16:33,759 --> 00:16:36,800
ship this is or who makes it well never

467
00:16:36,800 --> 00:16:38,800
mind we have something to do we actually

468
00:16:38,800 --> 00:16:42,320
need to figure out what the data in the

469
00:16:42,320 --> 00:16:44,639
unknown sections in in in probably the

470
00:16:44,639 --> 00:16:46,800
realm of this chip is and we need to get

471
00:16:46,800 --> 00:16:48,000
it out

472
00:16:48,000 --> 00:16:49,600
while reading it out is not that hard

473
00:16:49,600 --> 00:16:51,040
because we can't just replace one of the

474
00:16:51,040 --> 00:16:52,720
overlays with something that reads out

475
00:16:52,720 --> 00:16:55,680
the data but how do we get it to a pc

476
00:16:55,680 --> 00:16:58,560
how do i get the binary on my hard disk

477
00:16:58,560 --> 00:17:00,399
well that's a bit of a problem because i

478
00:17:00,399 --> 00:17:02,880
didn't see a uart anywhere if i scoped

479
00:17:02,880 --> 00:17:04,880
around i don't see any serial signals

480
00:17:04,880 --> 00:17:06,640
there's a one button gpio there but

481
00:17:06,640 --> 00:17:08,400
that's the input and i have no idea what

482
00:17:08,400 --> 00:17:10,640
the chip is so i can't turn it into an

483
00:17:10,640 --> 00:17:12,160
output we uh

484
00:17:12,160 --> 00:17:14,400
i i actually checked uh there's there's

485
00:17:14,400 --> 00:17:15,520
common

486
00:17:15,520 --> 00:17:18,079
peripherals for an a251 but this this

487
00:17:18,079 --> 00:17:20,319
one doesn't seem to match that

488
00:17:20,319 --> 00:17:22,480
so maybe the sbi maybe if i poke around

489
00:17:22,480 --> 00:17:25,119
i can just find the spi data register

490
00:17:25,119 --> 00:17:26,880
and maybe that's enough

491
00:17:26,880 --> 00:17:28,880
and spi would actually work great

492
00:17:28,880 --> 00:17:29,840
because

493
00:17:29,840 --> 00:17:32,960
this is a quick sketch of how the thing

494
00:17:32,960 --> 00:17:34,799
how the pcb works so you've got the

495
00:17:34,799 --> 00:17:36,559
mystery chip and the flash chip and

496
00:17:36,559 --> 00:17:39,120
they're connected by an spi bus

497
00:17:39,120 --> 00:17:41,039
and how an spi bus normally works is

498
00:17:41,039 --> 00:17:42,720
that you pull the chip select line low

499
00:17:42,720 --> 00:17:44,400
in order to indicate in the flash hey

500
00:17:44,400 --> 00:17:46,240
i'm going to do something and then you

501
00:17:46,240 --> 00:17:48,640
do they communicate it over the data and

502
00:17:48,640 --> 00:17:50,160
the clock lines

503
00:17:50,160 --> 00:17:52,160
however if you communicate over the data

504
00:17:52,160 --> 00:17:53,840
and the clock lines when chip select is

505
00:17:53,840 --> 00:17:56,559
high the flash chip is effectively deaf

506
00:17:56,559 --> 00:17:58,000
it'll ignore that little bit of

507
00:17:58,000 --> 00:17:59,520
communication

508
00:17:59,520 --> 00:18:02,799
so if we can um you know trick the

509
00:18:02,799 --> 00:18:05,360
mystery chip into doing that we can just

510
00:18:05,360 --> 00:18:07,039
you know connect the logic analyzer to

511
00:18:07,039 --> 00:18:09,200
those pins and then

512
00:18:09,200 --> 00:18:11,600
read that that ignore data into the pc

513
00:18:11,600 --> 00:18:13,600
decode it and you know we can

514
00:18:13,600 --> 00:18:16,480
communicate with our dumper

515
00:18:16,480 --> 00:18:17,440
so

516
00:18:17,440 --> 00:18:19,039
yeah let's do that so read all the

517
00:18:19,039 --> 00:18:20,960
memory so it's very simple we take the

518
00:18:20,960 --> 00:18:23,120
flash image we unpack it we replace one

519
00:18:23,120 --> 00:18:25,039
of the overlays with our dumper program

520
00:18:25,039 --> 00:18:27,039
that just reads the memory and pushes it

521
00:18:27,039 --> 00:18:30,000
to the spi data register we repack the

522
00:18:30,000 --> 00:18:32,480
flash we program the flash chip we

523
00:18:32,480 --> 00:18:34,240
re-solder it we attach our logic

524
00:18:34,240 --> 00:18:36,960
analyzer power the entire thing on dump

525
00:18:36,960 --> 00:18:39,600
the spi traffic and you know we've got

526
00:18:39,600 --> 00:18:41,520
our binary awesome

527
00:18:41,520 --> 00:18:43,679
so that actually works

528
00:18:43,679 --> 00:18:45,760
and now we got a look at what the binary

529
00:18:45,760 --> 00:18:48,480
is and luckily um one of the good things

530
00:18:48,480 --> 00:18:51,200
that the nsa has left us is ghidra which

531
00:18:51,200 --> 00:18:52,559
is an awesome

532
00:18:52,559 --> 00:18:53,520
tool

533
00:18:53,520 --> 00:18:54,320
for

534
00:18:54,320 --> 00:18:56,720
reverse engineering stuff and it also

535
00:18:56,720 --> 00:18:59,440
understands the 8051 so we can happily

536
00:18:59,440 --> 00:19:01,520
uh reverse engineer this

537
00:19:01,520 --> 00:19:03,520
and this is this is what that looks like

538
00:19:03,520 --> 00:19:05,679
so you've got a nice disassembly guitar

539
00:19:05,679 --> 00:19:07,919
also does a brave attempt to convert it

540
00:19:07,919 --> 00:19:09,679
into c code given the fact that half of

541
00:19:09,679 --> 00:19:11,360
the code isn't even written in c that's

542
00:19:11,360 --> 00:19:13,200
pretty interesting

543
00:19:13,200 --> 00:19:15,039
and one of the things is we can now

544
00:19:15,039 --> 00:19:16,720
explore the ship a little bit more for

545
00:19:16,720 --> 00:19:18,880
instance we can we can

546
00:19:18,880 --> 00:19:20,480
figure out what the memory space looks

547
00:19:20,480 --> 00:19:22,559
like so this is the memory space of the

548
00:19:22,559 --> 00:19:25,120
chip you've got 4k of ram here

549
00:19:25,120 --> 00:19:27,600
you've got 8k of very clear obvious

550
00:19:27,600 --> 00:19:29,520
wrong routines here

551
00:19:29,520 --> 00:19:31,919
you've got a mystery region here which

552
00:19:31,919 --> 00:19:34,320
is 8k i'll come back to that later

553
00:19:34,320 --> 00:19:35,360
and

554
00:19:35,360 --> 00:19:37,360
but let's let's first focus on the ram

555
00:19:37,360 --> 00:19:39,919
so because the

556
00:19:39,919 --> 00:19:41,520
spi flash

557
00:19:41,520 --> 00:19:43,679
code regions are actually executed from

558
00:19:43,679 --> 00:19:46,080
here and the reason i call it overlays

559
00:19:46,080 --> 00:19:47,840
is because they actually work like that

560
00:19:47,840 --> 00:19:48,880
and

561
00:19:48,880 --> 00:19:50,880
the way it works effectively is say

562
00:19:50,880 --> 00:19:52,720
overlay zero is in ram and it wants to

563
00:19:52,720 --> 00:19:55,039
call the function in overlay 2.

564
00:19:55,039 --> 00:19:56,160
what actually happens is that the

565
00:19:56,160 --> 00:20:00,240
compiler inserts a call into rom instead

566
00:20:00,240 --> 00:20:03,280
so overlay 0 will call into rom and rom

567
00:20:03,280 --> 00:20:04,159
will

568
00:20:04,159 --> 00:20:06,799
use the spi peripheral to load overlay 2

569
00:20:06,799 --> 00:20:07,919
into

570
00:20:07,919 --> 00:20:10,080
ram so it entirely overwrites the

571
00:20:10,080 --> 00:20:11,760
calling code

572
00:20:11,760 --> 00:20:14,240
it'll then jump into overlay 2 and just

573
00:20:14,240 --> 00:20:16,080
execute whatever function it is and as

574
00:20:16,080 --> 00:20:18,000
soon as it returns it returns to rom

575
00:20:18,000 --> 00:20:20,960
again and the rom will reload overlay

576
00:20:20,960 --> 00:20:24,240
zero and execution will happily

577
00:20:24,240 --> 00:20:26,480
continue from there so it's a pretty

578
00:20:26,480 --> 00:20:29,280
interesting way of doing things

579
00:20:29,280 --> 00:20:31,440
but hold up there was a region that has

580
00:20:31,440 --> 00:20:33,919
a big question mark what's up with that

581
00:20:33,919 --> 00:20:35,840
well if you go into g drive and you see

582
00:20:35,840 --> 00:20:37,600
this guitar detects that there are

583
00:20:37,600 --> 00:20:39,280
subroutines here because there's other

584
00:20:39,280 --> 00:20:42,240
codes jumping to this code

585
00:20:42,240 --> 00:20:44,799
but the memory region reaches all zeros

586
00:20:44,799 --> 00:20:45,600
so

587
00:20:45,600 --> 00:20:47,200
they're trying to keep something from us

588
00:20:47,200 --> 00:20:50,799
seemingly this rom is not readable

589
00:20:50,799 --> 00:20:53,360
so we got to make sure that we also have

590
00:20:53,360 --> 00:20:55,280
this because obviously we want to have

591
00:20:55,280 --> 00:20:56,960
access to all the code that's in this

592
00:20:56,960 --> 00:20:58,240
chip

593
00:20:58,240 --> 00:21:00,799
so the idea of the secret rom actually

594
00:21:00,799 --> 00:21:02,480
reminded me of the game by advance it

595
00:21:02,480 --> 00:21:04,640
has something pretty similar

596
00:21:04,640 --> 00:21:06,640
if you look at a very simplified memory

597
00:21:06,640 --> 00:21:08,400
subsystem structure of the gameboy

598
00:21:08,400 --> 00:21:10,720
advance this is what it looks like and

599
00:21:10,720 --> 00:21:12,720
the trick is that if you want to read

600
00:21:12,720 --> 00:21:14,799
the raw memory from the cartridge you

601
00:21:14,799 --> 00:21:17,120
can't if you want to read the

602
00:21:17,120 --> 00:21:19,520
raw memory from ram you can't nintendo

603
00:21:19,520 --> 00:21:21,120
actually designed the hardware to stop

604
00:21:21,120 --> 00:21:23,280
you from doing that the only thing that

605
00:21:23,280 --> 00:21:24,880
can read from

606
00:21:24,880 --> 00:21:27,120
the raw memory is code running in the

607
00:21:27,120 --> 00:21:28,400
rom itself

608
00:21:28,400 --> 00:21:30,159
so you need to run your code from the

609
00:21:30,159 --> 00:21:32,159
rom in order to read the wrong but

610
00:21:32,159 --> 00:21:33,760
obviously you can't just stash your own

611
00:21:33,760 --> 00:21:35,440
code in wrong because it's read only

612
00:21:35,440 --> 00:21:36,640
memory

613
00:21:36,640 --> 00:21:37,760
so

614
00:21:37,760 --> 00:21:39,840
in order to read it what the people

615
00:21:39,840 --> 00:21:41,679
reverse engineering the gamewell advance

616
00:21:41,679 --> 00:21:43,360
had to do is find

617
00:21:43,360 --> 00:21:45,440
a routine that could be abused in order

618
00:21:45,440 --> 00:21:46,559
to

619
00:21:46,559 --> 00:21:49,679
read from the rom and then return data

620
00:21:49,679 --> 00:21:52,080
and nintendo obviously is not a big fan

621
00:21:52,080 --> 00:21:55,360
of this so for most of the

622
00:21:55,360 --> 00:21:57,520
routines in rom they actually check if

623
00:21:57,520 --> 00:21:59,679
you're trying to

624
00:21:59,679 --> 00:22:01,440
do something with a

625
00:22:01,440 --> 00:22:03,200
with an address that itself is in the

626
00:22:03,200 --> 00:22:05,039
secret room and they will just return

627
00:22:05,039 --> 00:22:06,640
zero then

628
00:22:06,640 --> 00:22:08,640
except for one function there's one

629
00:22:08,640 --> 00:22:10,240
function that you can actually feed a

630
00:22:10,240 --> 00:22:11,679
pointer into

631
00:22:11,679 --> 00:22:13,760
rom and it won't check that and it

632
00:22:13,760 --> 00:22:17,520
returns a certain value that you can

633
00:22:18,000 --> 00:22:22,240
d-mangle to whatever byte was at that

634
00:22:22,240 --> 00:22:23,520
certain

635
00:22:23,520 --> 00:22:24,880
rom pointer thing

636
00:22:24,880 --> 00:22:26,480
so now we need to find something similar

637
00:22:26,480 --> 00:22:27,919
in our chip

638
00:22:27,919 --> 00:22:30,080
and and obviously hope that they don't

639
00:22:30,080 --> 00:22:32,159
that they're smarter than than nintendo

640
00:22:32,159 --> 00:22:33,039
and do

641
00:22:33,039 --> 00:22:35,200
and

642
00:22:35,679 --> 00:22:37,039
we got to hope that they're not smarter

643
00:22:37,039 --> 00:22:39,360
than nintendo so they don't check every

644
00:22:39,360 --> 00:22:42,000
pointer that goes into that

645
00:22:42,000 --> 00:22:43,760
uh obviously we have no idea in this

646
00:22:43,760 --> 00:22:45,760
case what what the wrong functions do so

647
00:22:45,760 --> 00:22:48,240
i just picked one as random uh this this

648
00:22:48,240 --> 00:22:49,679
is a bit of code that i do have that

649
00:22:49,679 --> 00:22:51,679
calls a run function that lives in each

650
00:22:51,679 --> 00:22:53,919
control i have no idea what it does but

651
00:22:53,919 --> 00:22:55,360
it looks good because you can actually

652
00:22:55,360 --> 00:22:57,039
see that it

653
00:22:57,039 --> 00:22:59,039
that one of the arguments is a pointer

654
00:22:59,039 --> 00:22:59,919
into

655
00:22:59,919 --> 00:23:02,240
the non-secret rom so maybe it can also

656
00:23:02,240 --> 00:23:03,760
do something with the secret room who

657
00:23:03,760 --> 00:23:05,760
knows

658
00:23:05,760 --> 00:23:07,679
so literally first function i grabbed

659
00:23:07,679 --> 00:23:09,919
and i actually was lucky because

660
00:23:09,919 --> 00:23:12,400
yes a side effect of that that function

661
00:23:12,400 --> 00:23:14,080
that's called is that the accumulator

662
00:23:14,080 --> 00:23:16,240
register gets filled with

663
00:23:16,240 --> 00:23:18,080
the memory at

664
00:23:18,080 --> 00:23:21,200
the d pointer plus three bytes

665
00:23:21,200 --> 00:23:22,799
which is awesome because it means that i

666
00:23:22,799 --> 00:23:25,520
can just run that um with the d pointer

667
00:23:25,520 --> 00:23:27,200
pointing at the entire secret wrong

668
00:23:27,200 --> 00:23:29,200
range and i'll just get the secret wrong

669
00:23:29,200 --> 00:23:30,559
which is great

670
00:23:30,559 --> 00:23:32,799
um and then i had the secret roman i was

671
00:23:32,799 --> 00:23:34,480
actually curious what does this routine

672
00:23:34,480 --> 00:23:37,600
do like what what what was the way that

673
00:23:37,600 --> 00:23:38,960
me calling this and reading the

674
00:23:38,960 --> 00:23:41,840
accumulators snuck past all of their

675
00:23:41,840 --> 00:23:45,440
defenses i mean maybe they just left the

676
00:23:45,440 --> 00:23:47,200
maybe they just overlooked the fact that

677
00:23:47,200 --> 00:23:48,480
there was a side effect that the

678
00:23:48,480 --> 00:23:50,240
accumulator got used and then not

679
00:23:50,240 --> 00:23:51,279
cleared

680
00:23:51,279 --> 00:23:53,200
well actually no the function does a

681
00:23:53,200 --> 00:23:55,679
plain memory copy of four bytes there's

682
00:23:55,679 --> 00:23:58,159
no checks at all

683
00:23:58,159 --> 00:24:01,120
i could even read the rom if i used the

684
00:24:01,120 --> 00:24:04,080
the this function like the way you shoot

685
00:24:04,080 --> 00:24:05,039
so

686
00:24:05,039 --> 00:24:06,320
yeah this is a great example of the

687
00:24:06,320 --> 00:24:08,240
hardware guys making stuff secret and

688
00:24:08,240 --> 00:24:09,919
then the software guy is messing it up

689
00:24:09,919 --> 00:24:12,080
entirely so we now have all the secret

690
00:24:12,080 --> 00:24:13,760
routines as well which means that we

691
00:24:13,760 --> 00:24:14,640
have

692
00:24:14,640 --> 00:24:17,039
to my knowledge all the code that runs

693
00:24:17,039 --> 00:24:19,760
in this little chip which is great

694
00:24:19,760 --> 00:24:21,600
but unfortunately there are still no

695
00:24:21,600 --> 00:24:23,840
clues to who makes this ship in there

696
00:24:23,840 --> 00:24:25,760
the roms doesn't contain any strings or

697
00:24:25,760 --> 00:24:28,000
any other stuff that makes it very

698
00:24:28,000 --> 00:24:29,360
obvious

699
00:24:29,360 --> 00:24:31,360
so

700
00:24:31,360 --> 00:24:33,279
however at this time obviously i wasn't

701
00:24:33,279 --> 00:24:35,520
the only person who wanted to have their

702
00:24:35,520 --> 00:24:37,559
own buddha flowers someone else

703
00:24:37,559 --> 00:24:40,880
needle555 also ordered his and

704
00:24:40,880 --> 00:24:43,039
he got it and his pcb was different

705
00:24:43,039 --> 00:24:44,000
again

706
00:24:44,000 --> 00:24:45,760
so he doesn't get a block and he also

707
00:24:45,760 --> 00:24:47,440
doesn't get a nameless chip he actually

708
00:24:47,440 --> 00:24:50,480
get a chip with silk screen on it

709
00:24:50,480 --> 00:24:53,360
so this chip is made by a company called

710
00:24:53,360 --> 00:24:54,880
g-lee

711
00:24:54,880 --> 00:24:55,919
it is

712
00:24:55,919 --> 00:24:57,200
if you have a cheap-ass bluetooth

713
00:24:57,200 --> 00:24:59,600
headset it's very likely that their chip

714
00:24:59,600 --> 00:25:00,640
is in there

715
00:25:00,640 --> 00:25:02,880
and obviously like the pcb is different

716
00:25:02,880 --> 00:25:05,120
the chip might be different

717
00:25:05,120 --> 00:25:06,159
they might just have switched

718
00:25:06,159 --> 00:25:07,919
manufacturers and this might just be an

719
00:25:07,919 --> 00:25:09,760
entirely different chip so there's

720
00:25:09,760 --> 00:25:12,480
actually a way to find this out because

721
00:25:12,480 --> 00:25:15,760
there was a random provided of the flash

722
00:25:15,760 --> 00:25:18,320
chip in this on this pcb as well

723
00:25:18,320 --> 00:25:19,760
and i can just feed it into my brute

724
00:25:19,760 --> 00:25:22,159
forcer and my brute forcer happily found

725
00:25:22,159 --> 00:25:24,000
the key materials and i could happily

726
00:25:24,000 --> 00:25:26,159
unpack this flash winery so yes it's

727
00:25:26,159 --> 00:25:28,320
exactly the same chip so now we know

728
00:25:28,320 --> 00:25:30,080
which tip it is but

729
00:25:30,080 --> 00:25:32,320
as you probably know if you only have a

730
00:25:32,320 --> 00:25:33,840
type number and you throw that into

731
00:25:33,840 --> 00:25:36,480
google you're not likely to get results

732
00:25:36,480 --> 00:25:40,559
for it for obscure chinese manufacturers

733
00:25:40,559 --> 00:25:42,559
so one of the tricks you do then is um

734
00:25:42,559 --> 00:25:44,480
you just take the name and you just

735
00:25:44,480 --> 00:25:46,320
backspace the last characters until you

736
00:25:46,320 --> 00:25:48,799
get a hit and we actually did that

737
00:25:48,799 --> 00:25:49,679
and

738
00:25:49,679 --> 00:25:52,559
um a familiar person popped up so uh

739
00:25:52,559 --> 00:25:54,840
foon they twittered about this a while

740
00:25:54,840 --> 00:25:57,600
ago and it's a chip with similar

741
00:25:57,600 --> 00:25:59,360
markings the last bit doesn't match but

742
00:25:59,360 --> 00:26:00,960
the first bit does

743
00:26:00,960 --> 00:26:03,039
and he actually found this on a cheap

744
00:26:03,039 --> 00:26:05,840
mp3 player pcb

745
00:26:05,840 --> 00:26:07,120
and

746
00:26:07,120 --> 00:26:09,039
he and his twitter

747
00:26:09,039 --> 00:26:13,039
fans did some research and it's actually

748
00:26:13,039 --> 00:26:13,760
a

749
00:26:13,760 --> 00:26:16,080
something with an 8051 core they found a

750
00:26:16,080 --> 00:26:18,400
data sheet and they also found the name

751
00:26:18,400 --> 00:26:20,960
it's often called the ac1082

752
00:26:20,960 --> 00:26:23,840
so hey this is a lead you know if this

753
00:26:23,840 --> 00:26:26,880
has an 8051 and it's publicly known then

754
00:26:26,880 --> 00:26:30,320
maybe um there's also an sdk out there

755
00:26:30,320 --> 00:26:32,720
uh you tend to have these these obscure

756
00:26:32,720 --> 00:26:34,880
websites where people just upload all

757
00:26:34,880 --> 00:26:38,159
sorts of private stuff like sdks and and

758
00:26:38,159 --> 00:26:40,320
stuff they're usually like obscure

759
00:26:40,320 --> 00:26:42,799
chinese or russian sites so i'm like

760
00:26:42,799 --> 00:26:44,640
maybe with some more google foo now i

761
00:26:44,640 --> 00:26:46,640
know that this thing isn't

762
00:26:46,640 --> 00:26:49,840
that this thing is an ac 1052 i can find

763
00:26:49,840 --> 00:26:50,960
something

764
00:26:50,960 --> 00:26:52,799
and i actually didn't find anything but

765
00:26:52,799 --> 00:26:56,000
i did find a chinese blogger who posted

766
00:26:56,000 --> 00:26:57,840
a bunch of posts on how to work with

767
00:26:57,840 --> 00:26:59,919
this sdk

768
00:26:59,919 --> 00:27:03,039
and even if you can't read this

769
00:27:03,039 --> 00:27:04,559
even if you can't read chinese you can

770
00:27:04,559 --> 00:27:05,679
probably

771
00:27:05,679 --> 00:27:07,279
understand that there was some some

772
00:27:07,279 --> 00:27:08,960
frustration involved there i don't need

773
00:27:08,960 --> 00:27:10,880
to translate this you probably recognize

774
00:27:10,880 --> 00:27:11,840
this

775
00:27:11,840 --> 00:27:14,320
um but one of the the things there was

776
00:27:14,320 --> 00:27:16,559
that he posted a bunch of screenshots

777
00:27:16,559 --> 00:27:18,799
and in there it showed that the ac calls

778
00:27:18,799 --> 00:27:22,399
itself the sdk underscore ac109n

779
00:27:22,399 --> 00:27:24,880
so i've got something new to google for

780
00:27:24,880 --> 00:27:27,919
and yes i got lucky after some googling

781
00:27:27,919 --> 00:27:30,720
i actually found a copy of the sdk

782
00:27:30,720 --> 00:27:33,279
in the in the in the hive of scum in

783
00:27:33,279 --> 00:27:35,440
villainy on the backwards bits of the

784
00:27:35,440 --> 00:27:37,200
internet that's called

785
00:27:37,200 --> 00:27:38,480
github

786
00:27:38,480 --> 00:27:41,039
yeah it was just out there on github

787
00:27:41,039 --> 00:27:44,799
so great uh we downloaded it and

788
00:27:44,799 --> 00:27:47,039
i'll i'll spare you the details i'll

789
00:27:47,039 --> 00:27:48,799
just give you a summary so the good

790
00:27:48,799 --> 00:27:50,559
parts of the sdk is that we actually

791
00:27:50,559 --> 00:27:52,399
found some code that matches the binary

792
00:27:52,399 --> 00:27:54,399
so this is certainly in the same family

793
00:27:54,399 --> 00:27:56,000
of our chip

794
00:27:56,000 --> 00:27:58,080
the sdk has some hardware registered

795
00:27:58,080 --> 00:27:59,520
definitions

796
00:27:59,520 --> 00:28:01,279
it also has some peripheral drivers

797
00:28:01,279 --> 00:28:02,720
although they're not that useful because

798
00:28:02,720 --> 00:28:05,440
i squared c yeah i don't care about that

799
00:28:05,440 --> 00:28:07,440
and it has some hardware docs they're

800
00:28:07,440 --> 00:28:09,120
obviously in chinese and they're very

801
00:28:09,120 --> 00:28:11,919
sparse but they're there

802
00:28:11,919 --> 00:28:13,440
so the best thing is that we can't

803
00:28:13,440 --> 00:28:15,120
really make our own firmware because

804
00:28:15,120 --> 00:28:18,559
this uses a proprietary keel compiler

805
00:28:18,559 --> 00:28:20,399
it doesn't help us reverse engineer the

806
00:28:20,399 --> 00:28:22,080
chip that much either because most of

807
00:28:22,080 --> 00:28:24,640
the logic is in binary blobs that just

808
00:28:24,640 --> 00:28:26,799
get linked into your thing

809
00:28:26,799 --> 00:28:28,320
the audio hardware is entirely

810
00:28:28,320 --> 00:28:29,919
undocumented you're supposed to use

811
00:28:29,919 --> 00:28:33,120
those binary blobs to talk to it

812
00:28:33,120 --> 00:28:34,159
and

813
00:28:34,159 --> 00:28:35,840
unfortunately there's also some things

814
00:28:35,840 --> 00:28:39,200
that i really wanted in there so

815
00:28:39,200 --> 00:28:42,000
first of all i would i would like to

816
00:28:42,000 --> 00:28:44,559
i would like to apologize i would like

817
00:28:44,559 --> 00:28:46,960
to have some mention of the f1a format

818
00:28:46,960 --> 00:28:48,399
because you know in the end that's what

819
00:28:48,399 --> 00:28:49,760
we're trying to do we're trying to

820
00:28:49,760 --> 00:28:52,240
encode our own f1as and and replace the

821
00:28:52,240 --> 00:28:54,480
music in those scenes this thing doesn't

822
00:28:54,480 --> 00:28:56,320
mention it

823
00:28:56,320 --> 00:28:58,399
some peripheral registers actually seem

824
00:28:58,399 --> 00:29:01,520
inaccurate even in the examples they're

825
00:29:01,520 --> 00:29:03,440
writing to registers that are not

826
00:29:03,440 --> 00:29:05,600
supposed to be gpios when they write to

827
00:29:05,600 --> 00:29:07,760
gpios i'm not entirely sure what's going

828
00:29:07,760 --> 00:29:09,039
on there

829
00:29:09,039 --> 00:29:11,600
um so there's no banking or encryption

830
00:29:11,600 --> 00:29:13,279
info luckily we don't need that we

831
00:29:13,279 --> 00:29:14,720
already figured that out all by

832
00:29:14,720 --> 00:29:16,159
ourselves

833
00:29:16,159 --> 00:29:18,320
and the peripherals don't match our chip

834
00:29:18,320 --> 00:29:20,159
and that's a bit of a problem because it

835
00:29:20,159 --> 00:29:21,840
would be great if we could just write

836
00:29:21,840 --> 00:29:23,360
your peripherals

837
00:29:23,360 --> 00:29:25,760
and know what that was going to do but

838
00:29:25,760 --> 00:29:27,360
uh there seems to be some sort of

839
00:29:27,360 --> 00:29:28,960
mismatch

840
00:29:28,960 --> 00:29:30,720
there's there's there's some overlap as

841
00:29:30,720 --> 00:29:32,960
well but not everything

842
00:29:32,960 --> 00:29:34,960
so the sdk and knowing that this is the

843
00:29:34,960 --> 00:29:36,880
family we need to look at did actually

844
00:29:36,880 --> 00:29:38,720
help us because someone else also did

845
00:29:38,720 --> 00:29:40,559
their own squirreling

846
00:29:40,559 --> 00:29:41,360
and

847
00:29:41,360 --> 00:29:41,930
oh yes

848
00:29:41,930 --> 00:29:43,600
[Music]

849
00:29:43,600 --> 00:29:45,919
yeah so peripherals don't mess the chip

850
00:29:45,919 --> 00:29:49,440
sorry i'm looking at the preview

851
00:29:49,520 --> 00:29:51,440
so someone else also

852
00:29:51,440 --> 00:29:53,200
did some scrolling and they found

853
00:29:53,200 --> 00:29:54,720
another project

854
00:29:54,720 --> 00:29:58,320
product by glee which is the ad140

855
00:29:58,320 --> 00:30:00,720
and i have no idea what that is but it

856
00:30:00,720 --> 00:30:02,960
does come with a tool to do audio

857
00:30:02,960 --> 00:30:05,200
conversion it's in chinese obviously

858
00:30:05,200 --> 00:30:08,080
it's windows only obviously

859
00:30:08,080 --> 00:30:08,960
but

860
00:30:08,960 --> 00:30:10,480
the idea is that you can put a bunch of

861
00:30:10,480 --> 00:30:12,799
waves or mp3s or whatever in there you

862
00:30:12,799 --> 00:30:15,279
select the the format you want to encode

863
00:30:15,279 --> 00:30:17,520
it into and it supports f1a and you

864
00:30:17,520 --> 00:30:19,440
press ok and it

865
00:30:19,440 --> 00:30:22,240
just does the thing which is great

866
00:30:22,240 --> 00:30:23,840
obviously we also looked at what this

867
00:30:23,840 --> 00:30:25,679
did a little bit because we're now very

868
00:30:25,679 --> 00:30:27,600
curious what that f1a format is there

869
00:30:27,600 --> 00:30:30,880
was a lot of speculation about adpcm and

870
00:30:30,880 --> 00:30:33,520
aac and maybe an mp3 thing

871
00:30:33,520 --> 00:30:36,000
well actually it turns out this wma

872
00:30:36,000 --> 00:30:38,960
windows media audio who the thunk

873
00:30:38,960 --> 00:30:41,200
so what happens is that

874
00:30:41,200 --> 00:30:42,880
the thing is a pipeline that converts it

875
00:30:42,880 --> 00:30:45,200
to a low bitrate windows media audio

876
00:30:45,200 --> 00:30:48,159
file and it then strips all the metadata

877
00:30:48,159 --> 00:30:50,880
off the windows media audio file only

878
00:30:50,880 --> 00:30:53,120
keeping the bare bones data and that's

879
00:30:53,120 --> 00:30:55,200
your f1a file

880
00:30:55,200 --> 00:30:57,200
so that means that we now have something

881
00:30:57,200 --> 00:30:59,360
that can encode f1as which means that we

882
00:30:59,360 --> 00:31:01,279
can replace the songs which is

883
00:31:01,279 --> 00:31:05,120
absolutely great because i can

884
00:31:05,120 --> 00:31:07,120
i can show you this

885
00:31:07,120 --> 00:31:09,679
yep you should see me again

886
00:31:09,679 --> 00:31:12,080
so i now have one of the buddha machines

887
00:31:12,080 --> 00:31:14,559
that produces something way more

888
00:31:14,559 --> 00:31:19,480
relaxing than chinese chance

889
00:31:20,880 --> 00:31:23,279
and i'll cut it off there before

890
00:31:23,279 --> 00:31:25,360
you know youtube does content matching

891
00:31:25,360 --> 00:31:27,519
shenanigans

892
00:31:27,519 --> 00:31:30,159
so uh yeah that's great we can replace

893
00:31:30,159 --> 00:31:31,360
songs

894
00:31:31,360 --> 00:31:32,840
we you know

895
00:31:32,840 --> 00:31:35,039
[Music]

896
00:31:35,039 --> 00:31:37,440
fix the encryption uh we can

897
00:31:37,440 --> 00:31:39,440
replace an f1a we can repack and

898
00:31:39,440 --> 00:31:41,840
re-encrypt the thing and yeah

899
00:31:41,840 --> 00:31:44,080
now now the music that's in there is all

900
00:31:44,080 --> 00:31:45,120
ours

901
00:31:45,120 --> 00:31:47,360
great now what so

902
00:31:47,360 --> 00:31:50,399
yeah we have um we have an encrypter and

903
00:31:50,399 --> 00:31:52,720
decrypter we have an uh

904
00:31:52,720 --> 00:31:54,159
we have so many information about the

905
00:31:54,159 --> 00:31:56,559
soc but some of it is incorrect and we

906
00:31:56,559 --> 00:31:58,799
know what the f1a is so what can we do

907
00:31:58,799 --> 00:32:00,159
with that what do we want to do with

908
00:32:00,159 --> 00:32:02,240
that we could make an open source

909
00:32:02,240 --> 00:32:05,279
encoder but wma is proprietary and very

910
00:32:05,279 --> 00:32:08,159
undocumented there's no low bit rate

911
00:32:08,159 --> 00:32:09,919
open source encoder

912
00:32:09,919 --> 00:32:11,760
out there ffmpeg can only do high

913
00:32:11,760 --> 00:32:13,440
bitrate things and we don't entirely

914
00:32:13,440 --> 00:32:16,880
understand the format yet so

915
00:32:17,200 --> 00:32:19,200
maybe we should make an open source sdk

916
00:32:19,200 --> 00:32:20,880
but well you've probably seen what i

917
00:32:20,880 --> 00:32:22,559
think about the architecture it would

918
00:32:22,559 --> 00:32:24,960
make way more reverse engineering and

919
00:32:24,960 --> 00:32:26,080
you can't

920
00:32:26,080 --> 00:32:29,760
obtain the chip anyway so yeah

921
00:32:29,760 --> 00:32:31,760
so does that mean that that you know we

922
00:32:31,760 --> 00:32:33,440
just call it the day and we chuck away

923
00:32:33,440 --> 00:32:36,240
the the the thing i wasn't really

924
00:32:36,240 --> 00:32:37,760
feeling like that either it's probably

925
00:32:37,760 --> 00:32:38,880
better to

926
00:32:38,880 --> 00:32:41,440
to you know reuse it

927
00:32:41,440 --> 00:32:43,279
and actually someone

928
00:32:43,279 --> 00:32:47,840
posted a few weeks before the con

929
00:32:47,840 --> 00:32:49,760
something really nice namely a design to

930
00:32:49,760 --> 00:32:51,760
make your own

931
00:32:51,760 --> 00:32:53,600
your own remote contour batch and it

932
00:32:53,600 --> 00:32:56,080
came in the form of a kai-cat

933
00:32:56,080 --> 00:32:57,679
file that you could just put your own

934
00:32:57,679 --> 00:32:59,200
schematics in

935
00:32:59,200 --> 00:33:01,279
so i did i replicated the schematic in

936
00:33:01,279 --> 00:33:03,600
the buddha flower added some leds and

937
00:33:03,600 --> 00:33:05,120
and you know

938
00:33:05,120 --> 00:33:07,519
send it off to be made unfortunately

939
00:33:07,519 --> 00:33:09,360
it's green i'd rather have it be in like

940
00:33:09,360 --> 00:33:11,360
purple or blue but i had a choice

941
00:33:11,360 --> 00:33:13,519
between green or way too late for the

942
00:33:13,519 --> 00:33:16,399
tom so yeah that was an easy choice

943
00:33:16,399 --> 00:33:17,279
and

944
00:33:17,279 --> 00:33:20,640
this is what it looks like and it does

945
00:33:20,640 --> 00:33:22,559
so

946
00:33:22,559 --> 00:33:24,240
you may have already seen it this is the

947
00:33:24,240 --> 00:33:26,880
thing and if you turn it on

948
00:33:26,880 --> 00:33:28,640
it plays the the theme of the aurora

949
00:33:28,640 --> 00:33:29,679
musical

950
00:33:29,679 --> 00:33:33,200
and um the leds you see there um they

951
00:33:33,200 --> 00:33:35,760
actually output the

952
00:33:35,760 --> 00:33:38,720
values that are generated by the lfsr

953
00:33:38,720 --> 00:33:41,440
that encrypts the uh that decrypts the

954
00:33:41,440 --> 00:33:42,320
flash

955
00:33:42,320 --> 00:33:44,640
so what was one secret is now happily

956
00:33:44,640 --> 00:33:46,080
blinked out

957
00:33:46,080 --> 00:33:48,559
so that's great

958
00:33:48,559 --> 00:33:53,440
and with that with my nice memento of

959
00:33:53,440 --> 00:33:55,200
this year's ramoticon

960
00:33:55,200 --> 00:33:56,480
my

961
00:33:56,480 --> 00:33:58,080
my talk ends

962
00:33:58,080 --> 00:34:01,200
i'd like to thank all the people who

963
00:34:01,200 --> 00:34:02,720
came along in this journey as i said

964
00:34:02,720 --> 00:34:04,880
this is not something that i did

965
00:34:04,880 --> 00:34:06,240
this is something that a whole bunch of

966
00:34:06,240 --> 00:34:10,159
people did on on youtube and on the uh

967
00:34:10,159 --> 00:34:11,440
subreddit

968
00:34:11,440 --> 00:34:13,520
uh these are all the the people that

969
00:34:13,520 --> 00:34:15,679
really helped if your name is in there i

970
00:34:15,679 --> 00:34:17,040
really hope to

971
00:34:17,040 --> 00:34:19,520
do a project like this with you again

972
00:34:19,520 --> 00:34:20,030
and

973
00:34:20,030 --> 00:34:21,359
[Music]

974
00:34:21,359 --> 00:34:23,760
then all that remains is to thank thank

975
00:34:23,760 --> 00:34:25,270
everyone to

976
00:34:25,270 --> 00:34:26,480
[Music]

977
00:34:26,480 --> 00:34:28,800
for listening and for watching

978
00:34:28,800 --> 00:34:32,079
and that was my talk

979
00:34:32,079 --> 00:34:33,599
wow

980
00:34:33,599 --> 00:34:34,560
um

981
00:34:34,560 --> 00:34:35,839
yeah i mean that's that's the kind of

982
00:34:35,839 --> 00:34:37,679
stuff that got me uh

983
00:34:37,679 --> 00:34:39,040
got me interested in hackaday in the

984
00:34:39,040 --> 00:34:40,399
first place all those years ago that's

985
00:34:40,399 --> 00:34:42,800
exactly the kind of stuff that

986
00:34:42,800 --> 00:34:45,520
i used to like to to read in in articles

987
00:34:45,520 --> 00:34:47,520
and uh and hearing about it now in

988
00:34:47,520 --> 00:34:50,000
person that was awesome um

989
00:34:50,000 --> 00:34:52,239
it's really fun to do as well it looks

990
00:34:52,239 --> 00:34:53,599
like a blast

991
00:34:53,599 --> 00:34:56,239
the the the the people here the mistake

992
00:34:56,239 --> 00:34:57,920
that they made with the encryption is

993
00:34:57,920 --> 00:35:00,160
that they actually made it fun to to

994
00:35:00,160 --> 00:35:02,320
break and they should never do that

995
00:35:02,320 --> 00:35:03,920
you're hanging you're hanging red meat

996
00:35:03,920 --> 00:35:05,760
in front of uh in front of people like

997
00:35:05,760 --> 00:35:07,200
you when you when you do something like

998
00:35:07,200 --> 00:35:10,079
that um yeah so you know everybody wants

999
00:35:10,079 --> 00:35:14,200
to clap so i'll clap for you

