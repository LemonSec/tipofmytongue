1
00:00:02,929 --> 00:00:05,339
bill heard from hackaday today I'm

2
00:00:05,339 --> 00:00:07,350
dropping in an open source logic

3
00:00:07,350 --> 00:00:10,200
analyzer on a 22 dollar FPGA board I'm

4
00:00:10,200 --> 00:00:12,719
back from the hackaday super con if you

5
00:00:12,719 --> 00:00:15,120
didn't go this year you got to go to the

6
00:00:15,120 --> 00:00:17,760
next one we had a great time on my way

7
00:00:17,760 --> 00:00:21,390
there I saw an article about somebody

8
00:00:21,390 --> 00:00:24,150
who had taken the little eye stick and

9
00:00:24,150 --> 00:00:25,710
will show this a little bit more here in

10
00:00:25,710 --> 00:00:29,160
a second and dropped a sump analyzer

11
00:00:29,160 --> 00:00:31,260
sump is the open source logic analyzer

12
00:00:31,260 --> 00:00:34,920
but it's a some v2 where he did some

13
00:00:34,920 --> 00:00:37,320
things to make it fit in this and I

14
00:00:37,320 --> 00:00:39,180
thought hey I got to do this when I get

15
00:00:39,180 --> 00:00:41,340
back I got a play around with this and

16
00:00:41,340 --> 00:00:44,250
show it to you so here we go so this is

17
00:00:44,250 --> 00:00:47,850
based on the ice stick which al Williams

18
00:00:47,850 --> 00:00:50,340
has written a great series of articles

19
00:00:50,340 --> 00:00:52,500
for hackaday from I check him out if you

20
00:00:52,500 --> 00:00:54,660
want to program from scratch he's got

21
00:00:54,660 --> 00:00:56,550
open-source tools he did a lot of cool

22
00:00:56,550 --> 00:00:58,559
things and should walk you through vert

23
00:00:58,559 --> 00:01:00,660
logged programming what I'm doing today

24
00:01:00,660 --> 00:01:01,980
is a little different I'm going to go

25
00:01:01,980 --> 00:01:03,359
ahead and use the tools that come with

26
00:01:03,359 --> 00:01:06,659
the stick and they're free so they're

27
00:01:06,659 --> 00:01:09,000
kind of like open source to me and I get

28
00:01:09,000 --> 00:01:09,990
I like getting close to the

29
00:01:09,990 --> 00:01:11,880
manufacturers tools just my background

30
00:01:11,880 --> 00:01:15,900
for over the years and then I'm going to

31
00:01:15,900 --> 00:01:18,030
take the code from a guy named Kevin

32
00:01:18,030 --> 00:01:20,100
Hubbard from Black Mesa labs wrote and

33
00:01:20,100 --> 00:01:22,140
really converted the heck out of it

34
00:01:22,140 --> 00:01:24,119
to make it fit in this and to not use

35
00:01:24,119 --> 00:01:25,890
Ram and if you think of a logic analyzer

36
00:01:25,890 --> 00:01:27,780
in all those squiggles and everything

37
00:01:27,780 --> 00:01:30,329
they use a lot of RAM to record that if

38
00:01:30,329 --> 00:01:31,860
you're recording each and every time

39
00:01:31,860 --> 00:01:34,650
slice well what Kevin does is he does

40
00:01:34,650 --> 00:01:36,960
run length encoding and this is one of

41
00:01:36,960 --> 00:01:38,729
the oldest and simplest compression

42
00:01:38,729 --> 00:01:40,740
schemes and basically it says hey if

43
00:01:40,740 --> 00:01:42,600
you've got a one in a long distance of

44
00:01:42,600 --> 00:01:44,850
zeros and then another one instead of

45
00:01:44,850 --> 00:01:46,829
going one zero zero zero zero zero zero

46
00:01:46,829 --> 00:01:49,350
zero zero it goes one and twenty eight

47
00:01:49,350 --> 00:01:51,180
zeros and another one so you're

48
00:01:51,180 --> 00:01:52,680
literally are storing only a couple

49
00:01:52,680 --> 00:01:54,930
bites to do a whole length of time and

50
00:01:54,930 --> 00:01:58,920
the example Kevin uses is radar where

51
00:01:58,920 --> 00:02:00,390
you do a ping and you wait a long time

52
00:02:00,390 --> 00:02:02,460
for it to come back he can digitize all

53
00:02:02,460 --> 00:02:04,049
of that with run length encoding and

54
00:02:04,049 --> 00:02:05,939
just take up a little bit of room now

55
00:02:05,939 --> 00:02:07,979
and and if you're an old fart like me

56
00:02:07,979 --> 00:02:10,378
you remember the Voyager Voyager 1

57
00:02:10,378 --> 00:02:12,840
Voyager 2 probably not the one from the

58
00:02:12,840 --> 00:02:13,830
Star Trek show

59
00:02:13,830 --> 00:02:16,260
where they did a flyby of uranus and

60
00:02:16,260 --> 00:02:19,470
neptune and they lost a bit in their

61
00:02:19,470 --> 00:02:21,870
really old machine and it came out right

62
00:02:21,870 --> 00:02:24,360
in the r-la run-length encoding and they

63
00:02:24,360 --> 00:02:26,220
had black streaks and the really cool

64
00:02:26,220 --> 00:02:29,070
programmers at JPL reprogrammed the code

65
00:02:29,070 --> 00:02:30,870
to jump around the bad bit and the black

66
00:02:30,870 --> 00:02:33,090
streaks went away for n run length

67
00:02:33,090 --> 00:02:35,220
encoding worked correctly so it's a cool

68
00:02:35,220 --> 00:02:37,260
technique he manages then to store lots

69
00:02:37,260 --> 00:02:41,550
and lots of of transitions in a very

70
00:02:41,550 --> 00:02:43,710
minimal amount of RAM so let me show you

71
00:02:43,710 --> 00:02:45,930
the istick up close all right here's a

72
00:02:45,930 --> 00:02:48,240
close-up of the stick and before I get

73
00:02:48,240 --> 00:02:49,830
going too far I also want to mention

74
00:02:49,830 --> 00:02:52,260
Jenny lists also featured this in a

75
00:02:52,260 --> 00:02:54,330
hackaday article and again I do want to

76
00:02:54,330 --> 00:02:56,550
point you at Al's a great set of

77
00:02:56,550 --> 00:02:58,920
articles using this stick as just a real

78
00:02:58,920 --> 00:03:01,230
cheap way to get started and that's what

79
00:03:01,230 --> 00:03:04,410
got my attention the $22.00 part I've

80
00:03:04,410 --> 00:03:06,480
been kind of playing around with just

81
00:03:06,480 --> 00:03:08,490
the old standard way of doing it you

82
00:03:08,490 --> 00:03:10,410
know just kind of spare time stuff and

83
00:03:10,410 --> 00:03:11,790
I've got a collection of boards that

84
00:03:11,790 --> 00:03:13,800
that I was thinking about maybe

85
00:03:13,800 --> 00:03:17,100
importing the old some v1 or just write

86
00:03:17,100 --> 00:03:18,989
a brute-force logic analyzer which

87
00:03:18,989 --> 00:03:21,540
basically would grab and shove whatever

88
00:03:21,540 --> 00:03:23,820
it's diseased on the signals into SRAM

89
00:03:23,820 --> 00:03:27,060
and you know eight now I may do this but

90
00:03:27,060 --> 00:03:28,830
again the beauty in this is that it fits

91
00:03:28,830 --> 00:03:30,600
in this small package and you can play

92
00:03:30,600 --> 00:03:32,760
with one of these for what 22 bucks and

93
00:03:32,760 --> 00:03:35,489
some test leads so if we look at what we

94
00:03:35,489 --> 00:03:37,800
have here on the board here's our

95
00:03:37,800 --> 00:03:40,650
lattice device it's a 40 HX 1k and it's

96
00:03:40,650 --> 00:03:43,560
got 160 LEDs in it if you don't know

97
00:03:43,560 --> 00:03:44,880
what that means it means it's medium

98
00:03:44,880 --> 00:03:49,140
small by my reckoning 144 pins and you

99
00:03:49,140 --> 00:03:51,510
know what Kevin did was he found sixteen

100
00:03:51,510 --> 00:03:53,190
i/o lines that we can use here now these

101
00:03:53,190 --> 00:03:55,470
i/o lines are three volt and I'm going

102
00:03:55,470 --> 00:03:57,300
to demonstrate on three volt and if you

103
00:03:57,300 --> 00:03:59,459
remember some of my other videos there's

104
00:03:59,459 --> 00:04:01,080
a lot of ways to convert from three volt

105
00:04:01,080 --> 00:04:03,959
to five volt again Black Mesa Labs has a

106
00:04:03,959 --> 00:04:05,970
small board that you can just build

107
00:04:05,970 --> 00:04:07,739
right off ah sh parky as in the public

108
00:04:07,739 --> 00:04:10,260
domain there that's basically just five

109
00:04:10,260 --> 00:04:12,360
volt tolerant three volt buffer that can

110
00:04:12,360 --> 00:04:14,250
feed into this so you know for the cost

111
00:04:14,250 --> 00:04:17,160
of a buck or two fromage park so this

112
00:04:17,160 --> 00:04:20,070
thing does run in 96 megabits per second

113
00:04:20,070 --> 00:04:22,320
which is pretty pretty awesome kind of

114
00:04:22,320 --> 00:04:24,780
for something the size and we got a he's

115
00:04:24,780 --> 00:04:26,970
got a total of 16 bits there's the other

116
00:04:26,970 --> 00:04:28,020
piece to this is

117
00:04:28,020 --> 00:04:30,449
the Python GUI that actually displays

118
00:04:30,449 --> 00:04:32,729
the signals so before we get going on

119
00:04:32,729 --> 00:04:35,130
the actual development software I'm

120
00:04:35,130 --> 00:04:37,500
jumping on over to Black Mesa labs

121
00:04:37,500 --> 00:04:39,150
WordPress com

122
00:04:39,150 --> 00:04:42,300
I'll put this link up and where

123
00:04:42,300 --> 00:04:44,190
Kevin's got his project and at the

124
00:04:44,190 --> 00:04:47,520
bottom we have the source files now you

125
00:04:47,520 --> 00:04:49,680
can do just a bit file if you just want

126
00:04:49,680 --> 00:04:52,080
to run a programmer I'm going to be

127
00:04:52,080 --> 00:04:53,759
using the design files and actually

128
00:04:53,759 --> 00:04:55,620
compile it for you and while you're here

129
00:04:55,620 --> 00:04:57,599
there's two more files to grab for the

130
00:04:57,599 --> 00:05:00,690
Python GUI portion of it he also has a

131
00:05:00,690 --> 00:05:03,300
troubleshooting back here somewhere that

132
00:05:03,300 --> 00:05:06,210
I didn't find an open till after I had

133
00:05:06,210 --> 00:05:07,860
troubleshoot something that was actually

134
00:05:07,860 --> 00:05:10,110
in the troubleshooting fax so you might

135
00:05:10,110 --> 00:05:12,360
want to grab that - over on the lattice

136
00:05:12,360 --> 00:05:14,070
semiconductor website if you drill down

137
00:05:14,070 --> 00:05:17,669
under IceCube - which is their free

138
00:05:17,669 --> 00:05:19,620
development software you'll see you have

139
00:05:19,620 --> 00:05:21,840
a choice for Linux or Windows and the

140
00:05:21,840 --> 00:05:23,699
only thing is there is a licensing step

141
00:05:23,699 --> 00:05:25,470
where you need to register the mac

142
00:05:25,470 --> 00:05:27,870
address of your computer to me it's a

143
00:05:27,870 --> 00:05:29,909
small price for some pretty reasonable

144
00:05:29,909 --> 00:05:32,639
software next you'll want the programmer

145
00:05:32,639 --> 00:05:35,759
again off their website and here's their

146
00:05:35,759 --> 00:05:39,360
selection 32-bit 64-bit and this is also

147
00:05:39,360 --> 00:05:41,789
free and I don't recall having to

148
00:05:41,789 --> 00:05:43,919
register the MAC address but don't hold

149
00:05:43,919 --> 00:05:45,719
it against me my memory sucks these days

150
00:05:45,719 --> 00:05:47,639
so you'll you'll need to grab this

151
00:05:47,639 --> 00:05:49,199
regardless where you get the Ice Cube

152
00:05:49,199 --> 00:05:51,389
this is how we get it on to the istick

153
00:05:51,389 --> 00:05:53,820
here's the lattice Ice Cube to software

154
00:05:53,820 --> 00:05:57,330
and to load the file you navigate to the

155
00:05:57,330 --> 00:05:59,280
files you unpack from Black Mesa labs

156
00:05:59,280 --> 00:06:03,930
and under the impacter a is a project

157
00:06:03,930 --> 00:06:06,030
that you load you can see right there

158
00:06:06,030 --> 00:06:08,490
says project once you're done the all

159
00:06:08,490 --> 00:06:10,620
the design files are there here's our

160
00:06:10,620 --> 00:06:13,469
top with a cool little image of the

161
00:06:13,469 --> 00:06:16,830
istick and all the all the different

162
00:06:16,830 --> 00:06:19,680
blocks that made this do what it does so

163
00:06:19,680 --> 00:06:21,570
let me show you a block diagram here

164
00:06:21,570 --> 00:06:23,580
before we go much further here's the

165
00:06:23,580 --> 00:06:27,210
sump to block diagram and remember our

166
00:06:27,210 --> 00:06:29,820
Le meaning run length encoding you know

167
00:06:29,820 --> 00:06:32,550
it's at the core of this thing in what

168
00:06:32,550 --> 00:06:34,860
the author Kevin did was he made it so

169
00:06:34,860 --> 00:06:36,810
that this could be real small and he

170
00:06:36,810 --> 00:06:39,120
could stick it in an FPGA he was working

171
00:06:39,120 --> 00:06:41,430
on without taking a lot of room that's

172
00:06:41,430 --> 00:06:42,360
why it fits in

173
00:06:42,360 --> 00:06:45,240
this little $22 thing or it can actually

174
00:06:45,240 --> 00:06:47,939
be expanded and just do some hongcun

175
00:06:47,939 --> 00:06:49,979
let's get rid of that zero there very

176
00:06:49,979 --> 00:06:50,340
good

177
00:06:50,340 --> 00:06:53,490
get all that does you can do a honkin

178
00:06:53,490 --> 00:06:57,120
wide grab of memory straight into static

179
00:06:57,120 --> 00:07:00,060
Ram SRAM but the mode were using it in

180
00:07:00,060 --> 00:07:02,310
is we've got the events which is his

181
00:07:02,310 --> 00:07:03,960
name for the signals we're listening to

182
00:07:03,960 --> 00:07:06,270
and in the lattice we're doing 16 of

183
00:07:06,270 --> 00:07:08,490
those it's going into a trigger detect

184
00:07:08,490 --> 00:07:10,740
and that trigger detect is something we

185
00:07:10,740 --> 00:07:13,439
programmed through the USB port to write

186
00:07:13,439 --> 00:07:15,960
to this is oh here's the condition it

187
00:07:15,960 --> 00:07:18,599
was listening and recording the you

188
00:07:18,599 --> 00:07:20,460
should see me I'm waving my hands now it

189
00:07:20,460 --> 00:07:23,669
was was recording the data that happened

190
00:07:23,669 --> 00:07:24,900
before the trigger event and then it

191
00:07:24,900 --> 00:07:26,520
records the data after in the trigger

192
00:07:26,520 --> 00:07:28,439
somewhere in the middle and so it's

193
00:07:28,439 --> 00:07:31,229
compressing this and putting it in SRAM

194
00:07:31,229 --> 00:07:33,539
already compressed and the address

195
00:07:33,539 --> 00:07:35,340
generator is that thing that makes a

196
00:07:35,340 --> 00:07:37,139
circular buffer to use the SRAM that's

197
00:07:37,139 --> 00:07:39,150
there and this SRAM is actually the

198
00:07:39,150 --> 00:07:41,099
stuff built right in the nut pga so you

199
00:07:41,099 --> 00:07:43,439
can imagine there's not a lot of it so

200
00:07:43,439 --> 00:07:45,870
and here you see mesa bus interface he's

201
00:07:45,870 --> 00:07:47,789
probably used in his code that he's

202
00:07:47,789 --> 00:07:50,219
written for other projects i think all

203
00:07:50,219 --> 00:07:51,779
good guys do that you probably do it

204
00:07:51,779 --> 00:07:53,879
yourself and then down here at the

205
00:07:53,879 --> 00:07:56,639
bottom we have straight-up SRAM now this

206
00:07:56,639 --> 00:07:58,379
was probably what i was going to do on

207
00:07:58,379 --> 00:08:00,389
my own board if i ever got around to it

208
00:08:00,389 --> 00:08:02,430
because to me I was I'm not trying to

209
00:08:02,430 --> 00:08:03,779
squeeze it in with something else I just

210
00:08:03,779 --> 00:08:06,360
wanted simple honking words of data

211
00:08:06,360 --> 00:08:08,190
going into SRAM and again the address

212
00:08:08,190 --> 00:08:10,710
generator would sit there and make a big

213
00:08:10,710 --> 00:08:13,169
ol circular buffer out of it so pretty

214
00:08:13,169 --> 00:08:14,779
straightforward is just kind of

215
00:08:14,779 --> 00:08:17,550
addressing RAM and listening except that

216
00:08:17,550 --> 00:08:19,620
he's got this step in here where he run

217
00:08:19,620 --> 00:08:22,349
length encoding the sump original

218
00:08:22,349 --> 00:08:25,139
suspect tried to run length encoding to

219
00:08:25,139 --> 00:08:27,029
send it across the bus to speed it up

220
00:08:27,029 --> 00:08:29,580
and what Kevin Hubbard did was run

221
00:08:29,580 --> 00:08:31,229
length and go tit before it even gets in

222
00:08:31,229 --> 00:08:35,159
the SRAM here are the design files

223
00:08:35,159 --> 00:08:37,260
they're written in very log and again

224
00:08:37,260 --> 00:08:39,390
the author's taken the time to show

225
00:08:39,390 --> 00:08:41,549
Smith a cute little picture here I'm

226
00:08:41,549 --> 00:08:43,049
going to show you three files real quick

227
00:08:43,049 --> 00:08:44,459
the rest if you go into them there's a

228
00:08:44,459 --> 00:08:45,060
you are

229
00:08:45,060 --> 00:08:47,459
there's SPI prom I mean they're pretty

230
00:08:47,459 --> 00:08:49,380
straightforward he's got his own version

231
00:08:49,380 --> 00:08:51,990
of a local bus and bus he calls Mesa bus

232
00:08:51,990 --> 00:08:54,930
but it's real typical to have a top

233
00:08:54,930 --> 00:08:56,020
something I

234
00:08:56,020 --> 00:08:57,970
usually call it taught myself sometimes

235
00:08:57,970 --> 00:09:00,730
I call it you on you too if I need to

236
00:09:00,730 --> 00:09:02,770
keep several in the same design separate

237
00:09:02,770 --> 00:09:06,010
then um there's almost always something

238
00:09:06,010 --> 00:09:07,930
dealing with the clock and if I import

239
00:09:07,930 --> 00:09:10,480
this tile Tara or Xilinx I'm going to

240
00:09:10,480 --> 00:09:12,640
have to redo the PLL the phase lock loop

241
00:09:12,640 --> 00:09:14,050
the way it clocks

242
00:09:14,050 --> 00:09:16,300
he used the GUI built into this I doubt

243
00:09:16,300 --> 00:09:17,830
I'm going to have time to show it to you

244
00:09:17,830 --> 00:09:19,960
today I do something very similar now

245
00:09:19,960 --> 00:09:21,550
Tara where I tend to work matter of fact

246
00:09:21,550 --> 00:09:23,560
I fire up an old version just to get the

247
00:09:23,560 --> 00:09:25,660
wizard because I don't remember all the

248
00:09:25,660 --> 00:09:29,470
40 different encoding abbreviations that

249
00:09:29,470 --> 00:09:33,100
sound like me and stuff so I use a

250
00:09:33,100 --> 00:09:36,400
wizard the final one is some and that's

251
00:09:36,400 --> 00:09:38,980
where he does the the majority of the

252
00:09:38,980 --> 00:09:42,040
work that's that is unique to this logic

253
00:09:42,040 --> 00:09:44,410
analyzer and here is where I was talking

254
00:09:44,410 --> 00:09:46,210
about where you can set how deep you

255
00:09:46,210 --> 00:09:47,890
want how do you want to use run length

256
00:09:47,890 --> 00:09:49,570
encoding do you not want to use when run

257
00:09:49,570 --> 00:09:51,520
length encoding how many bits do you

258
00:09:51,520 --> 00:09:53,470
want is all that stuff is set right here

259
00:09:53,470 --> 00:09:56,140
as opposed to hard-coded and if my

260
00:09:56,140 --> 00:09:58,330
memories crack the someone project was

261
00:09:58,330 --> 00:10:01,210
lots of hard coding so it's more tedious

262
00:10:01,210 --> 00:10:02,770
to do it this way again

263
00:10:02,770 --> 00:10:06,010
good good writing style if you if you if

264
00:10:06,010 --> 00:10:08,080
using good writing style this is what it

265
00:10:08,080 --> 00:10:10,990
looks like the next step let's say you

266
00:10:10,990 --> 00:10:12,700
did change some of the variables or just

267
00:10:12,700 --> 00:10:14,800
want to compile it yourself you run the

268
00:10:14,800 --> 00:10:19,150
run simplify pro synthesis and one thing

269
00:10:19,150 --> 00:10:21,730
I'll tell you real quick is that all the

270
00:10:21,730 --> 00:10:24,490
things the constraints are already done

271
00:10:24,490 --> 00:10:26,260
as part of the project so we don't have

272
00:10:26,260 --> 00:10:27,850
to worry about the pin numbers and the

273
00:10:27,850 --> 00:10:29,980
voltages and everything like that even

274
00:10:29,980 --> 00:10:31,750
though you know I showed you the ver log

275
00:10:31,750 --> 00:10:33,130
files there's other stuff in the

276
00:10:33,130 --> 00:10:34,420
background that's that's called the

277
00:10:34,420 --> 00:10:37,300
constraints so from here we just have to

278
00:10:37,300 --> 00:10:40,510
actually do all of the steps placing

279
00:10:40,510 --> 00:10:42,340
them routing and finally creating the

280
00:10:42,340 --> 00:10:45,360
bitmap so we'll run the place in router

281
00:10:45,360 --> 00:10:48,450
yeah go ahead run from the beginning and

282
00:10:48,450 --> 00:10:50,890
here we see that it's generated the

283
00:10:50,890 --> 00:10:53,650
bitmap and so from here on it's just a

284
00:10:53,650 --> 00:10:55,600
matter of running the programmer I've

285
00:10:55,600 --> 00:10:57,190
opened the programmer which is now

286
00:10:57,190 --> 00:10:59,650
called diamond programmer even though

287
00:10:59,650 --> 00:11:01,300
that's not what it was called when we

288
00:11:01,300 --> 00:11:03,100
downloaded it from the lattice website

289
00:11:03,100 --> 00:11:05,200
I'm going to open an existing product

290
00:11:05,200 --> 00:11:08,950
project because remember that the that

291
00:11:08,950 --> 00:11:10,030
the author pre did the

292
00:11:10,030 --> 00:11:12,910
project for us and so it already knows

293
00:11:12,910 --> 00:11:14,470
that I'm going to be talking to a nice

294
00:11:14,470 --> 00:11:17,350
40 and the device and everything but the

295
00:11:17,350 --> 00:11:19,210
one thing we do need to change is that

296
00:11:19,210 --> 00:11:20,590
the file we're going to program with

297
00:11:20,590 --> 00:11:22,600
quite simply the path is wrong for my

298
00:11:22,600 --> 00:11:24,550
system it's probably wrong for your

299
00:11:24,550 --> 00:11:26,260
system as well so I'm going to click in

300
00:11:26,260 --> 00:11:28,060
here and change it to where the bin

301
00:11:28,060 --> 00:11:30,340
actually did compile to alright I've

302
00:11:30,340 --> 00:11:32,110
already installed Python on this

303
00:11:32,110 --> 00:11:34,660
computer and I'm not going to go into

304
00:11:34,660 --> 00:11:36,820
all the different ways environments can

305
00:11:36,820 --> 00:11:39,370
be different I will say that this works

306
00:11:39,370 --> 00:11:41,170
with the most recent copy of Python that

307
00:11:41,170 --> 00:11:43,780
I just got off the off their site

308
00:11:43,780 --> 00:11:46,090
probably 35 or something like that so

309
00:11:46,090 --> 00:11:48,340
the author had some directions for how

310
00:11:48,340 --> 00:11:49,660
to do this but I'm going to try and

311
00:11:49,660 --> 00:11:51,700
recreate how I did it when I first

312
00:11:51,700 --> 00:11:55,510
tested it so let's see how it goes so

313
00:11:55,510 --> 00:11:57,610
I'm tending to do instead of going out

314
00:11:57,610 --> 00:12:00,190
and downloading I'm just using the built

315
00:12:00,190 --> 00:12:02,080
in installer to install the different

316
00:12:02,080 --> 00:12:04,270
modules here so I installed setup tools

317
00:12:04,270 --> 00:12:06,670
I'm installing PI serial I'm installing

318
00:12:06,670 --> 00:12:09,400
wheel I don't know if I need it I don't

319
00:12:09,400 --> 00:12:12,040
remember if I need it but I know I did

320
00:12:12,040 --> 00:12:16,890
it and I'm installing PI gain which the

321
00:12:16,890 --> 00:12:19,630
application actually runs under so the

322
00:12:19,630 --> 00:12:21,520
author has instructions that you need to

323
00:12:21,520 --> 00:12:23,650
follow for getting the latus stick to

324
00:12:23,650 --> 00:12:25,750
talk correctly I'm actually a little out

325
00:12:25,750 --> 00:12:27,610
of order here I did the Python first for

326
00:12:27,610 --> 00:12:29,830
you all but you get the idea and the

327
00:12:29,830 --> 00:12:31,300
instructions are straightforward as you

328
00:12:31,300 --> 00:12:33,250
see here but really what we're trying to

329
00:12:33,250 --> 00:12:37,180
do is we're going to go to the USB

330
00:12:37,180 --> 00:12:38,950
serial port for the lattice which you'll

331
00:12:38,950 --> 00:12:40,720
find a new your devices I'm doing this

332
00:12:40,720 --> 00:12:43,870
in Windows and you'll click love VCP and

333
00:12:43,870 --> 00:12:46,060
then we're going to unplug the stick and

334
00:12:46,060 --> 00:12:48,550
replug it back in here I've dumped the

335
00:12:48,550 --> 00:12:50,560
two scripts and in any file that came

336
00:12:50,560 --> 00:12:53,110
with the Black Mesa project into our

337
00:12:53,110 --> 00:12:55,750
Python scripts goes places any there's

338
00:12:55,750 --> 00:12:58,570
two pieces to the python part there's a

339
00:12:58,570 --> 00:13:01,510
server that camps on the port and then

340
00:13:01,510 --> 00:13:04,050
there's the PI game application itself

341
00:13:04,050 --> 00:13:07,090
called sump but we're going to first

342
00:13:07,090 --> 00:13:09,670
start the server and it will probably

343
00:13:09,670 --> 00:13:11,320
fail and you should see the failure

344
00:13:11,320 --> 00:13:13,090
because it'll probably fail for you and

345
00:13:13,090 --> 00:13:16,780
here's I'll show you how to fix it okay

346
00:13:16,780 --> 00:13:19,270
what happens if the server software even

347
00:13:19,270 --> 00:13:21,430
started up for you which it probably

348
00:13:21,430 --> 00:13:23,920
will it pops yet another

349
00:13:23,920 --> 00:13:26,800
endo and you can see that it's camping

350
00:13:26,800 --> 00:13:29,470
on a TCP socket but then right after

351
00:13:29,470 --> 00:13:31,420
that it says failed and the connection

352
00:13:31,420 --> 00:13:34,360
to USB auto failed and then down here we

353
00:13:34,360 --> 00:13:37,060
see that also and so what's got to

354
00:13:37,060 --> 00:13:38,889
happen is we've got to hunt down the any

355
00:13:38,889 --> 00:13:42,699
file and change the comport to the one

356
00:13:42,699 --> 00:13:45,880
that it actually came up with in your

357
00:13:45,880 --> 00:13:48,279
system and I had to go to on my laptop

358
00:13:48,279 --> 00:13:50,260
it showed up right under devices that

359
00:13:50,260 --> 00:13:53,139
showed the comport on this computer here

360
00:13:53,139 --> 00:13:55,449
I had to dig down into the hardware

361
00:13:55,449 --> 00:13:57,519
preferences under system device driver

362
00:13:57,519 --> 00:13:59,889
manager and get the comport in my case

363
00:13:59,889 --> 00:14:02,649
its comport nineteen yeah I must have a

364
00:14:02,649 --> 00:14:04,899
lot of comport so hang on a second

365
00:14:04,899 --> 00:14:07,750
here's the file BD underscore server dot

366
00:14:07,750 --> 00:14:11,079
ini and I'm going to change the auto

367
00:14:11,079 --> 00:14:12,880
forget the spelling I just did that I'm

368
00:14:12,880 --> 00:14:15,990
going to change the auto to my comport

369
00:14:15,990 --> 00:14:17,949
and I'm going to save this out we're

370
00:14:17,949 --> 00:14:19,570
going to try it again here's what it

371
00:14:19,570 --> 00:14:20,649
looks like when it completes

372
00:14:20,649 --> 00:14:22,750
successfully you see all four okay's and

373
00:14:22,750 --> 00:14:25,089
it says five by five now I did have to

374
00:14:25,089 --> 00:14:27,130
jump over to the workbench PC to make

375
00:14:27,130 --> 00:14:28,810
this work which is now on comm four

376
00:14:28,810 --> 00:14:32,079
instead of comm nineteen my video PC it

377
00:14:32,079 --> 00:14:33,910
just has too many things going on it

378
00:14:33,910 --> 00:14:35,890
streams video it does audio straight

379
00:14:35,890 --> 00:14:38,620
into a mixer panel and stuff so we're on

380
00:14:38,620 --> 00:14:41,529
the workbench moving forward so now now

381
00:14:41,529 --> 00:14:43,570
we go ahead and load the application

382
00:14:43,570 --> 00:14:49,209
itself starting some 2py you can put

383
00:14:49,209 --> 00:14:50,829
this in a batch file as Kevin mentioned

384
00:14:50,829 --> 00:14:53,829
in his notes and there's the PI game

385
00:14:53,829 --> 00:14:57,070
application running showing the the

386
00:14:57,070 --> 00:14:59,260
events the signal lines now what's not

387
00:14:59,260 --> 00:15:01,600
obvious is to zoom in and out of this

388
00:15:01,600 --> 00:15:04,839
you use page up I'm sorry use home and

389
00:15:04,839 --> 00:15:09,459
end now it's not in the menu Kevin

390
00:15:09,459 --> 00:15:11,230
mentioned that if you were to go to

391
00:15:11,230 --> 00:15:13,029
miscellaneous it's supposed to be here

392
00:15:13,029 --> 00:15:18,010
what I found was if you go to line 5641

393
00:15:18,010 --> 00:15:23,350
in some 2py 5641 here some two WI and

394
00:15:23,350 --> 00:15:25,930
uncomment this out it will appear in

395
00:15:25,930 --> 00:15:28,120
your menu so just make that change save

396
00:15:28,120 --> 00:15:31,810
it and stop and start the psalm to py

397
00:15:31,810 --> 00:15:33,790
and you'll you'll have the font larger

398
00:15:33,790 --> 00:15:36,920
and smaller because I'm an old guy and

399
00:15:36,920 --> 00:15:40,459
I can't see the small things sometimes

400
00:15:40,459 --> 00:15:43,459
these days here the author is actually

401
00:15:43,459 --> 00:15:45,740
showing how he tested his I could have

402
00:15:45,740 --> 00:15:47,480
built one of these but I'm kind of shy

403
00:15:47,480 --> 00:15:49,910
on time today so I'm just going to show

404
00:15:49,910 --> 00:15:51,560
you what he did he built a counter

405
00:15:51,560 --> 00:15:54,709
shoved it into the inputs on his lettuce

406
00:15:54,709 --> 00:15:58,070
and we get a pretty functional waveform

407
00:15:58,070 --> 00:16:01,730
display so you know is it everything no

408
00:16:01,730 --> 00:16:03,470
or do you need something professionally

409
00:16:03,470 --> 00:16:05,060
maybe you need to check out say leg or

410
00:16:05,060 --> 00:16:07,490
something but the thing about this is

411
00:16:07,490 --> 00:16:10,550
it's open source so functions can be

412
00:16:10,550 --> 00:16:12,829
added maybe you're the one to add them

413
00:16:12,829 --> 00:16:16,220
so again to see this you can go to Black

414
00:16:16,220 --> 00:16:18,829
Mesa labs wordpress.com no I don't work

415
00:16:18,829 --> 00:16:20,209
for them no we're not selling anything

416
00:16:20,209 --> 00:16:22,610
this is just a cool little open-source

417
00:16:22,610 --> 00:16:25,370
thing and I'll tell you that if you have

418
00:16:25,370 --> 00:16:27,350
something you think you wouldn't mind me

419
00:16:27,350 --> 00:16:29,209
tearing into and sending a couple

420
00:16:29,209 --> 00:16:31,120
hundred emails asking questions about

421
00:16:31,120 --> 00:16:33,589
shoot me a line at bil herd at hackaday

422
00:16:33,589 --> 00:16:36,589
comm or you can put it into the tip line

423
00:16:36,589 --> 00:16:40,100
for a hackaday and by the way bill herds

424
00:16:40,100 --> 00:16:43,190
with one L you know that right but you

425
00:16:43,190 --> 00:16:44,660
can put it into the tip line and you

426
00:16:44,660 --> 00:16:46,250
might put something the thing as subject

427
00:16:46,250 --> 00:16:47,930
for video and I'll tell the people what

428
00:16:47,930 --> 00:16:49,760
that might mean if I get around to it

429
00:16:49,760 --> 00:16:52,459
so but cute little display here and

430
00:16:52,459 --> 00:16:54,949
again open source so that wraps up this

431
00:16:54,949 --> 00:16:58,459
video again $22 open source add to it

432
00:16:58,459 --> 00:17:00,290
make it something better you can find

433
00:17:00,290 --> 00:17:01,850
things like these online and make

434
00:17:01,850 --> 00:17:04,400
yourself actually a pretty real scan a

435
00:17:04,400 --> 00:17:06,679
real logic analyzer actually I want to

436
00:17:06,679 --> 00:17:08,480
add state tables to it do disassembly

437
00:17:08,480 --> 00:17:11,179
and maybe spi analysis you know anything

438
00:17:11,179 --> 00:17:14,030
but and it's great looking in on on

439
00:17:14,030 --> 00:17:16,189
somebody else's code it's always gives

440
00:17:16,189 --> 00:17:18,679
you a new perspective and if you do look

441
00:17:18,679 --> 00:17:20,000
in on this though it seems kind of high

442
00:17:20,000 --> 00:17:22,400
level don't don't be concerned it is

443
00:17:22,400 --> 00:17:24,530
high level but again you can build on it

444
00:17:24,530 --> 00:17:27,250
or you can take the idea simplify it and

445
00:17:27,250 --> 00:17:31,700
$22 some bill heard from hackaday uh you

446
00:17:31,700 --> 00:17:32,960
know if you got something you want to

447
00:17:32,960 --> 00:17:34,880
have any tear apart let me know

448
00:17:34,880 --> 00:17:39,160
otherwise we'll catch on the next video

