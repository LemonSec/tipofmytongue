1
00:00:02,240 --> 00:00:04,259
Bell heard from hackaday

2
00:00:04,259 --> 00:00:06,960
today I'm showing you the rev on my obd

3
00:00:06,960 --> 00:00:08,670
hardware and we're going to debug it

4
00:00:08,670 --> 00:00:11,460
with an in circuit emulator to recap the

5
00:00:11,460 --> 00:00:15,000
last video I was inspired if you want to

6
00:00:15,000 --> 00:00:17,640
call it that or I was ticked one of the

7
00:00:17,640 --> 00:00:21,480
two uh into wanting to create a small

8
00:00:21,480 --> 00:00:24,449
box that could plug into the obd plug on

9
00:00:24,449 --> 00:00:26,880
my truck and create a series of pulses

10
00:00:26,880 --> 00:00:28,949
representing the speed of the truck my

11
00:00:28,949 --> 00:00:32,159
GPS needed this as it turns out in my

12
00:00:32,159 --> 00:00:34,050
truck it's very hard to find that stupid

13
00:00:34,050 --> 00:00:37,140
GPA that that speed pulse wire they

14
00:00:37,140 --> 00:00:38,730
pretty much done away with it for their

15
00:00:38,730 --> 00:00:40,379
own stereos and now they use it to

16
00:00:40,379 --> 00:00:41,969
control the speed of their windshield

17
00:00:41,969 --> 00:00:44,579
wipers here's what that hardware board

18
00:00:44,579 --> 00:00:46,500
look like and I'm not going to spend a

19
00:00:46,500 --> 00:00:48,149
lot of time rehashing it so I want to

20
00:00:48,149 --> 00:00:50,430
get into this in-circuit emulator stuff

21
00:00:50,430 --> 00:00:52,500
here today but this was the first board

22
00:00:52,500 --> 00:00:55,710
and it did all of the protocols of obd

23
00:00:55,710 --> 00:00:57,870
well guess what they really aren't in

24
00:00:57,870 --> 00:00:59,789
use I didn't know that when I started

25
00:00:59,789 --> 00:01:02,579
because I'm old and I grew up with the

26
00:01:02,579 --> 00:01:04,860
cars that had all those various versions

27
00:01:04,860 --> 00:01:07,590
of protocols and things so we get rid of

28
00:01:07,590 --> 00:01:10,409
this and I did a version that is just

29
00:01:10,409 --> 00:01:13,229
kin based which is the popular one it's

30
00:01:13,229 --> 00:01:14,820
now been in existence for seven years

31
00:01:14,820 --> 00:01:16,530
again see the old video for all the

32
00:01:16,530 --> 00:01:19,830
details but essentially what's on here

33
00:01:19,830 --> 00:01:22,159
is a protocol converter from the canvas

34
00:01:22,159 --> 00:01:24,540
does all the other ones too so I'm

35
00:01:24,540 --> 00:01:26,610
overpaying I suppose for that for the

36
00:01:26,610 --> 00:01:30,210
use of justcan and I've got a 80 mega I

37
00:01:30,210 --> 00:01:32,670
turned all this back into through

38
00:01:32,670 --> 00:01:35,400
through-hole see this it was a strange

39
00:01:35,400 --> 00:01:37,500
mixture of surface mount for the chips

40
00:01:37,500 --> 00:01:39,720
and I was standing resistors up because

41
00:01:39,720 --> 00:01:41,700
I just really hate putting on 40

42
00:01:41,700 --> 00:01:44,460
resistor SMD resistors because I can't

43
00:01:44,460 --> 00:01:45,780
read the color codes on them I'm always

44
00:01:45,780 --> 00:01:47,369
getting confuse I ended up throwing them

45
00:01:47,369 --> 00:01:49,680
away once they I get my piles like wiped

46
00:01:49,680 --> 00:01:52,020
out or something so we're going to do

47
00:01:52,020 --> 00:01:54,649
this but then I'm going to plug it into

48
00:01:54,649 --> 00:01:58,140
this and this is a true in-circuit

49
00:01:58,140 --> 00:02:02,520
emulator this is different then opening

50
00:02:02,520 --> 00:02:05,659
your Arduino sketchbook thingy that IDE

51
00:02:05,659 --> 00:02:07,979
integrated development environment or

52
00:02:07,979 --> 00:02:12,540
even an Eclipse IDE this actually plugs

53
00:02:12,540 --> 00:02:13,590
in

54
00:02:13,590 --> 00:02:17,610
into the processor and you run your code

55
00:02:17,610 --> 00:02:20,520
on the board under very close control

56
00:02:20,520 --> 00:02:22,890
the processor you can actually watch it

57
00:02:22,890 --> 00:02:24,750
working stop it do all that it's not

58
00:02:24,750 --> 00:02:27,480
just printing to the print for debugging

59
00:02:27,480 --> 00:02:29,610
I'm going to try and tell you what an in

60
00:02:29,610 --> 00:02:32,099
circuit emulator is I don't see it

61
00:02:32,099 --> 00:02:33,989
mentioned a lot and all the stuff going

62
00:02:33,989 --> 00:02:36,090
along with Arduino ish things and there

63
00:02:36,090 --> 00:02:37,380
and I think there's some reasons for

64
00:02:37,380 --> 00:02:40,860
that first it's already made everything

65
00:02:40,860 --> 00:02:42,510
already works when you're trying to

66
00:02:42,510 --> 00:02:44,069
write code so you're talking to a

67
00:02:44,069 --> 00:02:46,500
computer smalls it is microcontroller

68
00:02:46,500 --> 00:02:50,730
that is done it's in production you're

69
00:02:50,730 --> 00:02:52,860
not dealing with missing address lines

70
00:02:52,860 --> 00:02:54,750
RAM or ROM that doesn't work all the

71
00:02:54,750 --> 00:02:56,549
things I'll knock a processor off its

72
00:02:56,549 --> 00:02:59,220
feet end there's something else this

73
00:02:59,220 --> 00:03:01,860
microcontroller wants to be talked to

74
00:03:01,860 --> 00:03:03,810
it's got a bootloader in it there's code

75
00:03:03,810 --> 00:03:06,450
already in here that says oh if you tell

76
00:03:06,450 --> 00:03:08,340
me on the serial part what you want I'll

77
00:03:08,340 --> 00:03:10,680
put it memory and execute it for you by

78
00:03:10,680 --> 00:03:12,930
the way if it's wrong or right I'll try

79
00:03:12,930 --> 00:03:15,120
and you know I'll use my I'll use my

80
00:03:15,120 --> 00:03:16,860
terminal port console port to tell you

81
00:03:16,860 --> 00:03:17,910
about it right because you can only

82
00:03:17,910 --> 00:03:22,470
debug by watching LEDs flash or what the

83
00:03:22,470 --> 00:03:24,269
serial terminal puts out and we do a lot

84
00:03:24,269 --> 00:03:26,280
of that right there and that's only it

85
00:03:26,280 --> 00:03:27,900
there's another processor on here

86
00:03:27,900 --> 00:03:29,880
controller and that's the thing that

87
00:03:29,880 --> 00:03:32,040
says well let's use USB port you know

88
00:03:32,040 --> 00:03:35,250
and so it's actually another Atmel it or

89
00:03:35,250 --> 00:03:37,140
you know our smart USB controller

90
00:03:37,140 --> 00:03:39,450
depending on one of one of the versions

91
00:03:39,450 --> 00:03:42,389
or so many of these so that's fine for

92
00:03:42,389 --> 00:03:43,799
talking to this and I'm a lousy

93
00:03:43,799 --> 00:03:45,959
programmer right so I'm printf

94
00:03:45,959 --> 00:03:47,730
statements everywhere but this is not

95
00:03:47,730 --> 00:03:48,660
how I grew up

96
00:03:48,660 --> 00:03:53,100
I grew up using Isis in circuit

97
00:03:53,100 --> 00:03:55,260
emulators why did I do that well when

98
00:03:55,260 --> 00:03:57,060
you I design a computer from the ground

99
00:03:57,060 --> 00:03:59,730
up nothing works literally nothing works

100
00:03:59,730 --> 00:04:02,549
I have a processor I'm a upon doin good

101
00:04:02,549 --> 00:04:04,350
that day the oscillator came up the

102
00:04:04,350 --> 00:04:07,049
reset circuit did its job but unless all

103
00:04:07,049 --> 00:04:08,970
the address lines all the data lines all

104
00:04:08,970 --> 00:04:11,670
the bus control circuitry works and I

105
00:04:11,670 --> 00:04:14,160
can get to the EEPROM prom to get my

106
00:04:14,160 --> 00:04:16,709
reset vector and then that takes me

107
00:04:16,709 --> 00:04:18,959
somewhere and that place works and the

108
00:04:18,959 --> 00:04:21,180
RAM works Rhys pushed onto the stack and

109
00:04:21,180 --> 00:04:24,300
then I jump so let's find once it all

110
00:04:24,300 --> 00:04:25,919
works not really there's you can get

111
00:04:25,919 --> 00:04:27,190
things corruption where you

112
00:04:27,190 --> 00:04:29,650
memory changes without you changing it

113
00:04:29,650 --> 00:04:31,360
well how would you know right well I

114
00:04:31,360 --> 00:04:33,400
didn't write it well the hardware failed

115
00:04:33,400 --> 00:04:35,140
right we got to deal with that so how do

116
00:04:35,140 --> 00:04:38,440
we do we plug in a processor that is so

117
00:04:38,440 --> 00:04:41,500
much under our control that even if the

118
00:04:41,500 --> 00:04:43,720
circuits broken it tells us what's going

119
00:04:43,720 --> 00:04:47,020
on in it like a 6502 you would actually

120
00:04:47,020 --> 00:04:48,520
pull it out of the socket plug in this

121
00:04:48,520 --> 00:04:51,550
cable and there's a 6502 up here that

122
00:04:51,550 --> 00:04:53,470
was actually running and he's kind of

123
00:04:53,470 --> 00:04:55,150
buffered and stuff so you don't blow him

124
00:04:55,150 --> 00:04:57,130
up and he would go yeah I'm going oh

125
00:04:57,130 --> 00:04:59,710
look there's no RAM and I'm still alive

126
00:04:59,710 --> 00:05:01,690
to tell you there's no RAM because he's

127
00:05:01,690 --> 00:05:03,820
living up on a different assembly

128
00:05:03,820 --> 00:05:05,740
somewhere and then we would do things

129
00:05:05,740 --> 00:05:09,070
like you could make it go down execute

130
00:05:09,070 --> 00:05:10,990
one instruction and stop and come back

131
00:05:10,990 --> 00:05:13,690
and you would observe the changes can't

132
00:05:13,690 --> 00:05:16,300
do that you know with this guy right he

133
00:05:16,300 --> 00:05:18,520
dissed prints off to you it's a so

134
00:05:18,520 --> 00:05:20,470
that's what an in circuit emulator does

135
00:05:20,470 --> 00:05:22,600
is it allows us to control that

136
00:05:22,600 --> 00:05:24,280
processor in the case of the app Mel

137
00:05:24,280 --> 00:05:28,240
there's a there's we use debug wire on

138
00:05:28,240 --> 00:05:29,980
the one there's all kinds ways to do you

139
00:05:29,980 --> 00:05:33,610
use a different technologies but on

140
00:05:33,610 --> 00:05:35,290
these real small things in my real small

141
00:05:35,290 --> 00:05:37,660
thing I'm using debug wire a one wire

142
00:05:37,660 --> 00:05:39,490
debugger how can that how can that work

143
00:05:39,490 --> 00:05:42,040
because the chip was designed to use it

144
00:05:42,040 --> 00:05:43,630
it's already got an interface where you

145
00:05:43,630 --> 00:05:45,610
can say oh set your break instructions

146
00:05:45,610 --> 00:05:47,410
here's even a new instruction that says

147
00:05:47,410 --> 00:05:50,530
stop what you're doing and go report

148
00:05:50,530 --> 00:05:53,730
back to this thing controlling you so

149
00:05:53,730 --> 00:05:56,980
great I've got a one wire interface on

150
00:05:56,980 --> 00:05:59,620
the out on these guys if you have to

151
00:05:59,620 --> 00:06:01,390
desolder some capacitors because it's

152
00:06:01,390 --> 00:06:03,010
actually the reset wire and they like to

153
00:06:03,010 --> 00:06:05,169
put a capacitor so it comes up slow

154
00:06:05,169 --> 00:06:07,810
turns on after a power cycle I'll show

155
00:06:07,810 --> 00:06:09,730
you that a little bit of that but that's

156
00:06:09,730 --> 00:06:11,860
the idea behind an in circuit emulator

157
00:06:11,860 --> 00:06:14,680
is now we're executing code on the board

158
00:06:14,680 --> 00:06:15,970
under our control

159
00:06:15,970 --> 00:06:17,830
not just flinging it over the wall and

160
00:06:17,830 --> 00:06:19,810
telling it to print back some of its

161
00:06:19,810 --> 00:06:22,630
statuses I love that all right I'm a

162
00:06:22,630 --> 00:06:24,370
hardware engineer I want to look and

163
00:06:24,370 --> 00:06:25,870
peek and poke memory I want to watch it

164
00:06:25,870 --> 00:06:28,030
change I want to write two registers and

165
00:06:28,030 --> 00:06:30,250
in fact being the horrible coder that I

166
00:06:30,250 --> 00:06:33,130
am when it didn't first come up I just

167
00:06:33,130 --> 00:06:35,289
poked at the register that was my first

168
00:06:35,289 --> 00:06:37,210
guess of what I'd blown and it comes up

169
00:06:37,210 --> 00:06:38,830
I'll show you that forgot to set the

170
00:06:38,830 --> 00:06:40,249
data Direction register on

171
00:06:40,249 --> 00:06:42,589
timer right so to plug the ice in in

172
00:06:42,589 --> 00:06:44,239
here I've got the ice lid off they show

173
00:06:44,239 --> 00:06:46,369
you how to take it off and I took it off

174
00:06:46,369 --> 00:06:47,839
I mean you might as well be able to drop

175
00:06:47,839 --> 00:06:49,879
metal and stuff and short it out I like

176
00:06:49,879 --> 00:06:52,249
a true hardware fashion and I like the

177
00:06:52,249 --> 00:06:53,689
look of it and laying around like that

178
00:06:53,689 --> 00:06:55,849
but what they do is one of the

179
00:06:55,849 --> 00:06:58,039
connectors is a flying lead set and I

180
00:06:58,039 --> 00:06:59,959
have what amounts to the in circuit

181
00:06:59,959 --> 00:07:02,749
programmer connector right here which is

182
00:07:02,749 --> 00:07:05,089
basically remember I said it's the reset

183
00:07:05,089 --> 00:07:07,519
wire for debug but you do need the SPI

184
00:07:07,519 --> 00:07:10,459
interface to get started in the stop and

185
00:07:10,459 --> 00:07:13,429
the reason is there's a fuse inside the

186
00:07:13,429 --> 00:07:16,159
AAT mega that needs to be blown to allow

187
00:07:16,159 --> 00:07:19,399
the debug wire to work so even though

188
00:07:19,399 --> 00:07:22,069
you only use debug you need SPI to get

189
00:07:22,069 --> 00:07:24,889
going and to stop so I've broken out all

190
00:07:24,889 --> 00:07:28,309
of those in my custom board here another

191
00:07:28,309 --> 00:07:31,899
way to do it is let's get you plugged in

192
00:07:31,899 --> 00:07:34,849
here's a standard old Arduino leash

193
00:07:34,849 --> 00:07:37,369
thing and it's got the ISP plug that

194
00:07:37,369 --> 00:07:38,929
you're used to seeing is right here and

195
00:07:38,929 --> 00:07:41,269
it just plugs straight in and actually

196
00:07:41,269 --> 00:07:42,649
there's two as you may know member I

197
00:07:42,649 --> 00:07:44,239
said there were two on this board if you

198
00:07:44,239 --> 00:07:46,459
plug in here suddenly it shows up as

199
00:07:46,459 --> 00:07:48,169
like an eight u or something instead of

200
00:07:48,169 --> 00:07:49,669
your 328p

201
00:07:49,669 --> 00:07:52,309
and that shows you're talking to the

202
00:07:52,309 --> 00:07:54,979
second one so real straightforward to

203
00:07:54,979 --> 00:07:58,069
plug this in and let's fire it up Here I

204
00:07:58,069 --> 00:08:00,679
am inside AVR studio this is version

205
00:08:00,679 --> 00:08:03,139
seven I gotta warn you it's a heavy lift

206
00:08:03,139 --> 00:08:04,969
I had to try three different machines

207
00:08:04,969 --> 00:08:08,059
before one would actually work it got

208
00:08:08,059 --> 00:08:09,979
itself all twisted wanting different

209
00:08:09,979 --> 00:08:13,009
security packs for Windows and even

210
00:08:13,009 --> 00:08:14,299
though I did installed it under what's

211
00:08:14,299 --> 00:08:16,579
called a convenience roll-up it said no

212
00:08:16,579 --> 00:08:18,110
you didn't install it but when you try

213
00:08:18,110 --> 00:08:19,809
to install it's already installed and

214
00:08:19,809 --> 00:08:22,579
it's just a mess it's a big piece of

215
00:08:22,579 --> 00:08:25,999
software luckily it it's going to work

216
00:08:25,999 --> 00:08:28,099
on this very stripped down station that

217
00:08:28,099 --> 00:08:30,259
I dedicated and literally do this to

218
00:08:30,259 --> 00:08:32,839
show you today so it looks like a pretty

219
00:08:32,839 --> 00:08:35,058
standard IDE this looks like what you

220
00:08:35,058 --> 00:08:37,279
might be doing your Arduino ish things

221
00:08:37,279 --> 00:08:39,740
with there's even an import I'm going

222
00:08:39,740 --> 00:08:41,448
look for it but there's an import wizard

223
00:08:41,448 --> 00:08:43,818
- you know import sketches which I guess

224
00:08:43,818 --> 00:08:45,559
that's what we use call programs in the

225
00:08:45,559 --> 00:08:49,250
old days and before we get going let me

226
00:08:49,250 --> 00:08:54,430
show you what the task before it is

227
00:08:54,430 --> 00:08:57,740
if you remember from last week that I

228
00:08:57,740 --> 00:08:59,810
took a note from the last video I took

229
00:08:59,810 --> 00:09:03,350
an obd-ii port I have an obd interpreter

230
00:09:03,350 --> 00:09:06,950
in the stn 1110 and I have an 18 Meghan

231
00:09:06,950 --> 00:09:09,320
a transistor literally to make myself an

232
00:09:09,320 --> 00:09:12,050
open collector pulse with stream so

233
00:09:12,050 --> 00:09:14,180
inside the 18 mega the parts I'm more

234
00:09:14,180 --> 00:09:16,940
interested in is the UART because those

235
00:09:16,940 --> 00:09:19,280
things speak in a 9600 baud standard

236
00:09:19,280 --> 00:09:22,010
ASCII thingy actually the command set

237
00:09:22,010 --> 00:09:24,260
looks like a modem to a lot extent the

238
00:09:24,260 --> 00:09:26,150
processor do some thinking for me and

239
00:09:26,150 --> 00:09:28,730
I'm going to use a hardware timer to

240
00:09:28,730 --> 00:09:31,760
create this pulse string now the way I

241
00:09:31,760 --> 00:09:34,100
in start by using is actually creates a

242
00:09:34,100 --> 00:09:37,040
square wave but it does so without the

243
00:09:37,040 --> 00:09:39,200
processor being involved it's a hardware

244
00:09:39,200 --> 00:09:41,570
counter I tell to preset some clock

245
00:09:41,570 --> 00:09:43,220
pulses and then I'm going to actually

246
00:09:43,220 --> 00:09:45,620
tell it how far to count and the number

247
00:09:45,620 --> 00:09:48,410
I write in for how far to count is going

248
00:09:48,410 --> 00:09:50,090
to be based on what the you are told me

249
00:09:50,090 --> 00:09:52,430
and we might as well review now a little

250
00:09:52,430 --> 00:09:54,500
bit about the AVR the 80 mega it's as

251
00:09:54,500 --> 00:09:57,410
distracting the time of any this is kind

252
00:09:57,410 --> 00:09:59,000
of the superset depending on how many

253
00:09:59,000 --> 00:10:01,310
pins and what version you have but the

254
00:10:01,310 --> 00:10:03,170
kind I've chosen any straight simple one

255
00:10:03,170 --> 00:10:05,240
usually has at least one you are check

256
00:10:05,240 --> 00:10:07,280
we're going to use that and the timer

257
00:10:07,280 --> 00:10:09,350
I'm using to create my pulse stream is

258
00:10:09,350 --> 00:10:12,800
the 16-bit TC one counter now in real

259
00:10:12,800 --> 00:10:16,520
life if I wanted to make a real-time

260
00:10:16,520 --> 00:10:18,800
aware system don't and hopefully I have

261
00:10:18,800 --> 00:10:20,060
time at the end to talk about the

262
00:10:20,060 --> 00:10:22,670
solenoid a little more you know there's

263
00:10:22,670 --> 00:10:24,290
I don't want to say real-time operating

264
00:10:24,290 --> 00:10:26,120
system that implies more but if I want

265
00:10:26,120 --> 00:10:28,970
to convert a dongle here that doesn't

266
00:10:28,970 --> 00:10:31,430
get hung up doesn't get crashed doesn't

267
00:10:31,430 --> 00:10:34,310
you know hang because it missed an event

268
00:10:34,310 --> 00:10:36,470
then I'm going to want to do things like

269
00:10:36,470 --> 00:10:38,270
turn on the watchdog timer and I'm

270
00:10:38,270 --> 00:10:39,740
actually going to want to run another

271
00:10:39,740 --> 00:10:42,380
timer so that I'm aware the passage of

272
00:10:42,380 --> 00:10:44,990
time and I can time things out and I

273
00:10:44,990 --> 00:10:47,420
would also use interrupts so I'm not go

274
00:10:47,420 --> 00:10:48,770
and talk about those just yet but

275
00:10:48,770 --> 00:10:50,840
hopefully at the end I have a chance to

276
00:10:50,840 --> 00:10:53,180
kind of tie those in with you so we also

277
00:10:53,180 --> 00:10:55,670
see power management that that if we're

278
00:10:55,670 --> 00:10:57,530
doing a real system we absolutely would

279
00:10:57,530 --> 00:10:59,240
want to make this thing be low-power

280
00:10:59,240 --> 00:11:01,520
you don't want to turn off your truck

281
00:11:01,520 --> 00:11:03,470
and have this thing pulling power and

282
00:11:03,470 --> 00:11:05,090
kill your battery that's the first

283
00:11:05,090 --> 00:11:07,830
example right there and even between of

284
00:11:07,830 --> 00:11:09,540
and say could find the time to go to

285
00:11:09,540 --> 00:11:13,140
sleep so also you will see here's our

286
00:11:13,140 --> 00:11:15,210
little debug wire I wasn't kidding

287
00:11:15,210 --> 00:11:16,710
that's built into the point where it's

288
00:11:16,710 --> 00:11:18,390
on the block diagram here here's the

289
00:11:18,390 --> 00:11:20,520
reset line and again if you want to do

290
00:11:20,520 --> 00:11:22,290
this on an Arduino ish machine you've

291
00:11:22,290 --> 00:11:24,780
got to your little board you've got to

292
00:11:24,780 --> 00:11:27,570
go find that reset circuit and find C 5

293
00:11:27,570 --> 00:11:29,580
or C 3 or whatever it is it's next to

294
00:11:29,580 --> 00:11:33,120
that reset enable pads some time and and

295
00:11:33,120 --> 00:11:35,190
remove it so that it's there's no

296
00:11:35,190 --> 00:11:36,810
capacitor across it you can't do

297
00:11:36,810 --> 00:11:39,060
high-speed talking across the reset line

298
00:11:39,060 --> 00:11:41,760
with a big old cap hanging on it so for

299
00:11:41,760 --> 00:11:43,380
today we're not going to be using in

300
00:11:43,380 --> 00:11:44,820
these i/o ports we're going to grab a

301
00:11:44,820 --> 00:11:47,100
timer we're going to grab a UART and if

302
00:11:47,100 --> 00:11:48,570
I were doing it right I type my watchdog

303
00:11:48,570 --> 00:11:50,760
and another timer and some interrupts

304
00:11:50,760 --> 00:11:53,160
flying around last before I get going I

305
00:11:53,160 --> 00:11:55,080
want to show you the boat I'm using the

306
00:11:55,080 --> 00:11:57,780
timer in now timers are good for doing

307
00:11:57,780 --> 00:12:00,120
things without the intervention of the

308
00:12:00,120 --> 00:12:02,370
processor if the processor had to get

309
00:12:02,370 --> 00:12:03,810
involved things that are very time

310
00:12:03,810 --> 00:12:06,090
sensitive might wiggle depending on the

311
00:12:06,090 --> 00:12:07,650
latency of the processor getting there

312
00:12:07,650 --> 00:12:09,150
in the number of instructions everything

313
00:12:09,150 --> 00:12:12,480
so they can do things like fire off as

314
00:12:12,480 --> 00:12:14,490
soon as a pin goes low or high you know

315
00:12:14,490 --> 00:12:16,980
trigger off like for measuring analog to

316
00:12:16,980 --> 00:12:19,350
digital or something in this case the

317
00:12:19,350 --> 00:12:21,600
timer counts to a preset value to a

318
00:12:21,600 --> 00:12:24,360
compare value and then resets and starts

319
00:12:24,360 --> 00:12:26,220
over again as you see here and then if

320
00:12:26,220 --> 00:12:27,900
you make it smaller it happens more

321
00:12:27,900 --> 00:12:29,940
often and then we're in the mode where

322
00:12:29,940 --> 00:12:33,480
the output compared pin toggles so it's

323
00:12:33,480 --> 00:12:35,100
running it basically half the frequency

324
00:12:35,100 --> 00:12:38,040
of the counter but every time this times

325
00:12:38,040 --> 00:12:39,810
out it automatically starts over again

326
00:12:39,810 --> 00:12:42,270
so no delay there and the output pin

327
00:12:42,270 --> 00:12:45,330
will will flip clarity so I can create a

328
00:12:45,330 --> 00:12:47,280
square wave just by writing once and

329
00:12:47,280 --> 00:12:50,010
then letting it go and I can rewrite if

330
00:12:50,010 --> 00:12:52,680
I'm careful I can rewrite that compare

331
00:12:52,680 --> 00:12:54,930
value in such a way that I never create

332
00:12:54,930 --> 00:12:57,510
a strange waveform or miss it miss a

333
00:12:57,510 --> 00:13:00,570
pulse or something and and this is also

334
00:13:00,570 --> 00:13:02,790
really useful there's ways to create PWM

335
00:13:02,790 --> 00:13:04,080
and all that kind of stuff stepper

336
00:13:04,080 --> 00:13:06,870
motors but all done in hardware timer

337
00:13:06,870 --> 00:13:09,210
control down here is the block diagram

338
00:13:09,210 --> 00:13:11,760
we see our output compare and this is

339
00:13:11,760 --> 00:13:13,440
the way this is where it decides where

340
00:13:13,440 --> 00:13:15,930
to do the exclusive or not and here we

341
00:13:15,930 --> 00:13:17,670
see at last that you still have to turn

342
00:13:17,670 --> 00:13:19,770
on the data Direction register before

343
00:13:19,770 --> 00:13:20,950
going out to the

344
00:13:20,950 --> 00:13:22,960
and so there's the mode we're using our

345
00:13:22,960 --> 00:13:24,880
timer in it's like mode five something

346
00:13:24,880 --> 00:13:27,310
like that where it does an automatic

347
00:13:27,310 --> 00:13:30,280
compare and toggle once the timers run

348
00:13:30,280 --> 00:13:32,020
all right it's time to run this sucker

349
00:13:32,020 --> 00:13:35,560
here we are in the app male studio you

350
00:13:35,560 --> 00:13:37,390
know standard code stuff I'm setting up

351
00:13:37,390 --> 00:13:39,670
the timer I'm doing some initialization

352
00:13:39,670 --> 00:13:42,610
and I set and loop basically getting a

353
00:13:42,610 --> 00:13:45,190
value from the OBD stream and I'm

354
00:13:45,190 --> 00:13:47,830
changing it to a timer value and I'm

355
00:13:47,830 --> 00:13:49,270
doing a little bit of averaging here I

356
00:13:49,270 --> 00:13:52,810
just keep two samples typical get UART

357
00:13:52,810 --> 00:13:54,700
stuff get a character set and wait for

358
00:13:54,700 --> 00:13:57,550
that character to arrive and then the

359
00:13:57,550 --> 00:14:00,700
part that takes two ASCII characters

360
00:14:00,700 --> 00:14:03,280
that look like a hexadecimal value and

361
00:14:03,280 --> 00:14:05,890
turn them into a hexadecimal value and

362
00:14:05,890 --> 00:14:07,300
you need scratch your head a little bit

363
00:14:07,300 --> 00:14:09,400
on that it's not quite as simple as it

364
00:14:09,400 --> 00:14:11,440
sounds God do some shuffling and

365
00:14:11,440 --> 00:14:14,440
shifting and subtracting and stuff so we

366
00:14:14,440 --> 00:14:18,400
are going to click debug start debugging

367
00:14:18,400 --> 00:14:22,450
and break and it's attached now to that

368
00:14:22,450 --> 00:14:24,910
hardware as I've been talking and I

369
00:14:24,910 --> 00:14:26,770
actually made sure the compile was good

370
00:14:26,770 --> 00:14:28,660
I mean this is the compiler and

371
00:14:28,660 --> 00:14:33,010
everything and it starts it up and stops

372
00:14:33,010 --> 00:14:35,170
on the first instruction this little

373
00:14:35,170 --> 00:14:37,630
arrow right here the world has just

374
00:14:37,630 --> 00:14:39,730
changed we are on the inside of a

375
00:14:39,730 --> 00:14:43,330
processor looking out if you remember

376
00:14:43,330 --> 00:14:47,530
the memory map that look like this from

377
00:14:47,530 --> 00:14:50,650
the datasheet we have a memory map here

378
00:14:50,650 --> 00:14:53,230
that is actual live memory down on the

379
00:14:53,230 --> 00:14:55,630
board right so if we luckily see

380
00:14:55,630 --> 00:14:58,240
register starting at 0 0 0 well those

381
00:14:58,240 --> 00:15:03,490
are the registers up up here at 0 0 0 if

382
00:15:03,490 --> 00:15:06,490
you want to see mapped i/o starting at 0

383
00:15:06,490 --> 00:15:11,040
20 there's the mapped i/o and here is

384
00:15:11,040 --> 00:15:15,970
static Ram starting at a 100 hex and you

385
00:15:15,970 --> 00:15:17,830
can actually see in there if you go and

386
00:15:17,830 --> 00:15:20,170
look around you'll actually see some of

387
00:15:20,170 --> 00:15:22,030
your program you can see ASCII variables

388
00:15:22,030 --> 00:15:24,160
and things you can read and write to

389
00:15:24,160 --> 00:15:27,010
this Ram right now you can stop the

390
00:15:27,010 --> 00:15:29,830
program look at variables this is really

391
00:15:29,830 --> 00:15:32,920
cool stuff right so what we are going to

392
00:15:32,920 --> 00:15:33,560
do for

393
00:15:33,560 --> 00:15:39,080
let me get rid of that and we're going

394
00:15:39,080 --> 00:15:41,990
to run down to where we initialize the

395
00:15:41,990 --> 00:15:45,680
timer so I'm going to tell it to debug

396
00:15:45,680 --> 00:15:55,730
run to cursor okay now I also should

397
00:15:55,730 --> 00:15:58,250
show you the disassembly underneath

398
00:15:58,250 --> 00:16:00,950
remember you don't run see you run

399
00:16:00,950 --> 00:16:04,360
machine code assembly code on the

400
00:16:04,360 --> 00:16:07,100
processor itself and this is a great way

401
00:16:07,100 --> 00:16:10,310
to learn some assembly code now when C

402
00:16:10,310 --> 00:16:12,410
writes you know gets converted assembly

403
00:16:12,410 --> 00:16:14,540
it does some things by convention the

404
00:16:14,540 --> 00:16:17,270
way it uses registers and stuff but here

405
00:16:17,270 --> 00:16:20,540
is we've actually stopped about to write

406
00:16:20,540 --> 00:16:26,390
to that register that we see here where

407
00:16:26,390 --> 00:16:29,120
I'm about to set the timer register the

408
00:16:29,120 --> 00:16:31,310
timer compare register I want to just

409
00:16:31,310 --> 00:16:35,120
give it a value of 170 right so I'm

410
00:16:35,120 --> 00:16:38,089
going to bring up a scope here alright

411
00:16:38,089 --> 00:16:40,550
and and here we have on our scope we

412
00:16:40,550 --> 00:16:43,550
just have the ASCII receiving transmit

413
00:16:43,550 --> 00:16:46,190
on the top and the timer that I'm trying

414
00:16:46,190 --> 00:16:48,610
to create pulses with on the bottom and

415
00:16:48,610 --> 00:16:52,610
let us scroll so we can see what's going

416
00:16:52,610 --> 00:16:55,640
on and I'm going to step it one more

417
00:16:55,640 --> 00:16:59,360
time I've written to the timer value but

418
00:16:59,360 --> 00:17:02,120
it didn't turn on for me well quick

419
00:17:02,120 --> 00:17:04,010
glance of the documentation show that I

420
00:17:04,010 --> 00:17:06,109
forgot to actually enable the output you

421
00:17:06,109 --> 00:17:08,270
can have a timer with the output on so

422
00:17:08,270 --> 00:17:10,250
that's why I did so I'm going to run one

423
00:17:10,250 --> 00:17:12,050
more instruction and in theory we'll

424
00:17:12,050 --> 00:17:16,130
watch the timer turn on wait first I'm

425
00:17:16,130 --> 00:17:19,010
going to watch the registers you should

426
00:17:19,010 --> 00:17:20,599
actually be able to see the right-half

427
00:17:20,599 --> 00:17:22,780
in here

428
00:17:22,780 --> 00:17:26,199
step into

429
00:17:27,000 --> 00:17:30,510
and everything in red just changed and

430
00:17:30,510 --> 00:17:33,030
lo and behold there's our timer value

431
00:17:33,030 --> 00:17:34,049
okay

432
00:17:34,049 --> 00:17:36,419
so in theory I should be able to go in

433
00:17:36,419 --> 00:17:39,240
here and turn that on and off where you

434
00:17:39,240 --> 00:17:43,230
and and so here you can see I can turn

435
00:17:43,230 --> 00:17:47,429
the data Direction register myself by

436
00:17:47,429 --> 00:17:49,559
writing to it and I should be able to

437
00:17:49,559 --> 00:17:53,700
bring this back on and off imagine now

438
00:17:53,700 --> 00:17:57,179
that means that if you are debugging

439
00:17:57,179 --> 00:18:00,059
your code you don't have to keep

440
00:18:00,059 --> 00:18:02,130
recompiling it to find out what you

441
00:18:02,130 --> 00:18:03,809
messed up with the registers you can go

442
00:18:03,809 --> 00:18:05,700
in and find the right registers to get

443
00:18:05,700 --> 00:18:07,799
the right values you want and everything

444
00:18:07,799 --> 00:18:10,320
without having to keep you know hitting

445
00:18:10,320 --> 00:18:13,049
the old build and compiled one of the

446
00:18:13,049 --> 00:18:14,700
things you can do for example is

447
00:18:14,700 --> 00:18:17,610
actually change the timer while it's

448
00:18:17,610 --> 00:18:19,740
running and by the way the processor is

449
00:18:19,740 --> 00:18:22,020
stopped and there is a flag in this

450
00:18:22,020 --> 00:18:24,990
program or in the studio that says do

451
00:18:24,990 --> 00:18:27,030
you stop the timers when you do a break

452
00:18:27,030 --> 00:18:28,980
or do you keep them running I told it

453
00:18:28,980 --> 00:18:30,929
keep them running since this is kind of

454
00:18:30,929 --> 00:18:32,970
what I'm doing anyways but here it's

455
00:18:32,970 --> 00:18:35,220
been already written at AAA is just kind

456
00:18:35,220 --> 00:18:37,679
of a starter value and I can change the

457
00:18:37,679 --> 00:18:40,490
value and we see the timer change so

458
00:18:40,490 --> 00:18:42,720
calculate it carefully get it off by a

459
00:18:42,720 --> 00:18:44,669
factor to go in and find out what really

460
00:18:44,669 --> 00:18:47,429
works for you all right and finally

461
00:18:47,429 --> 00:18:50,400
let's run the program I'm now going not

462
00:18:50,400 --> 00:18:52,530
going to single step any longer I'm just

463
00:18:52,530 --> 00:18:55,409
going to tell it to run bang let's get

464
00:18:55,409 --> 00:18:57,740
our register window out of our way here

465
00:18:57,740 --> 00:19:01,260
and what's happening here on the right I

466
00:19:01,260 --> 00:19:04,080
have to run secure CRT for a terminal

467
00:19:04,080 --> 00:19:06,900
because it allows me to easily modify

468
00:19:06,900 --> 00:19:09,480
carriage returns new lines that kind of

469
00:19:09,480 --> 00:19:14,039
thing but down on my scope you can see

470
00:19:14,039 --> 00:19:20,460
the OBD sending querying for the speed

471
00:19:20,460 --> 00:19:22,350
that's on my emulator if you remember I

472
00:19:22,350 --> 00:19:25,020
had a little pot on the emulator that

473
00:19:25,020 --> 00:19:27,480
set the speed and then I'm reading it

474
00:19:27,480 --> 00:19:29,940
back so let me start twisting and

475
00:19:29,940 --> 00:19:32,640
changing that so here you can see me

476
00:19:32,640 --> 00:19:35,580
changing the speed on the OBD simulator

477
00:19:35,580 --> 00:19:38,130
and my pulse width is changing and

478
00:19:38,130 --> 00:19:40,000
that's what we set out to do

479
00:19:40,000 --> 00:19:42,230
so right at the end there I said

480
00:19:42,230 --> 00:19:43,730
pulse-width but what it was really

481
00:19:43,730 --> 00:19:45,320
changing was both high and low pulse

482
00:19:45,320 --> 00:19:46,880
width so it was the frequency and I

483
00:19:46,880 --> 00:19:49,060
think I calculate something like um

484
00:19:49,060 --> 00:19:52,310
fifty fifty Hertz would be about the

485
00:19:52,310 --> 00:19:54,620
same as 50 miles an hour so you know

486
00:19:54,620 --> 00:19:56,540
we're right in the ballpark one way or

487
00:19:56,540 --> 00:20:00,020
the other so boy sorry for the length on

488
00:20:00,020 --> 00:20:01,970
this one I'm going to dive out here

489
00:20:01,970 --> 00:20:04,100
leaving a lot of things untouched but I

490
00:20:04,100 --> 00:20:06,470
just might do lay a one on the ice

491
00:20:06,470 --> 00:20:08,420
itself there's just a lot in there we

492
00:20:08,420 --> 00:20:10,100
didn't touch stepping over routines

493
00:20:10,100 --> 00:20:12,470
they're commonly called step in twos the

494
00:20:12,470 --> 00:20:15,860
i/o part you saw just a ton of stuff and

495
00:20:15,860 --> 00:20:17,390
and then there's even a front end where

496
00:20:17,390 --> 00:20:18,980
I actually used the wizard to help me

497
00:20:18,980 --> 00:20:21,410
write those timer values which is why I

498
00:20:21,410 --> 00:20:24,200
missed the data Direction register but

499
00:20:24,200 --> 00:20:25,850
just a lot of things in there and again

500
00:20:25,850 --> 00:20:28,190
this is in the old days or I mean not

501
00:20:28,190 --> 00:20:29,420
just the old days but when you're

502
00:20:29,420 --> 00:20:31,190
starting a computer from scratch you

503
00:20:31,190 --> 00:20:32,780
need that one thing that works well a

504
00:20:32,780 --> 00:20:34,550
lot of time it's the ice and you're on

505
00:20:34,550 --> 00:20:36,350
the inside looking out of the system as

506
00:20:36,350 --> 00:20:39,050
it builds up so bill heard from hackaday

507
00:20:39,050 --> 00:20:41,450
uh you know come by for the next one

508
00:20:41,450 --> 00:20:43,100
maybe it'll be a nice maybe what summer

509
00:20:43,100 --> 00:20:44,810
coming will do fiberglassing or

510
00:20:44,810 --> 00:20:47,330
something so again bill heard from

511
00:20:47,330 --> 00:20:49,920
hackaday and we'll see on the next

512
00:20:49,920 --> 00:21:14,830
[Music]

513
00:21:14,830 --> 00:21:15,570
by

514
00:21:15,570 --> 00:21:16,030
[Music]

515
00:21:16,030 --> 00:21:18,920
[Applause]

516
00:21:18,920 --> 00:21:19,970
[Music]

517
00:21:19,970 --> 00:21:22,870
[Applause]

518
00:21:22,870 --> 00:21:35,090
[Music]

