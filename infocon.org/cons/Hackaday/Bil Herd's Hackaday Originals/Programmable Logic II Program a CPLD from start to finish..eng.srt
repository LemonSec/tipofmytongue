1
00:00:00,030 --> 00:00:01,979
they'll heard from hackaday today we're

2
00:00:01,979 --> 00:00:03,929
going to be programming a Cpl D from

3
00:00:03,929 --> 00:00:06,109
start to finish

4
00:00:06,109 --> 00:00:09,599
here's a small selection of FPGA and Cpl

5
00:00:09,599 --> 00:00:12,059
D boards this one's an altaira

6
00:00:12,059 --> 00:00:14,460
FPGA and you see a lot of pins broken

7
00:00:14,460 --> 00:00:16,980
out on it this is our Tara this is cool

8
00:00:16,980 --> 00:00:20,369
you can do high level video programming

9
00:00:20,369 --> 00:00:22,199
on that real high level stuff you don't

10
00:00:22,199 --> 00:00:23,609
have to worry about the color planes and

11
00:00:23,609 --> 00:00:25,439
stuff it tracks everything for you we've

12
00:00:25,439 --> 00:00:27,930
got a lattice this one I did a couple

13
00:00:27,930 --> 00:00:31,380
years ago this is a full of video based

14
00:00:31,380 --> 00:00:34,530
DSP system where the processor and the

15
00:00:34,530 --> 00:00:37,370
DSP work was all put in a pga form and

16
00:00:37,370 --> 00:00:39,690
here's one I'm working on right now this

17
00:00:39,690 --> 00:00:41,610
happens to be a CPL d but it's hundred

18
00:00:41,610 --> 00:00:44,550
forty four pins it's got a close-coupled

19
00:00:44,550 --> 00:00:46,590
SRAM on this one and I also have another

20
00:00:46,590 --> 00:00:48,780
version that's got a some level

21
00:00:48,780 --> 00:00:50,460
converters on it so let's start with him

22
00:00:50,460 --> 00:00:52,739
I wanted to take a moment and show you

23
00:00:52,739 --> 00:00:55,050
the board that I designed up here for

24
00:00:55,050 --> 00:00:58,020
our little test it's it's not hugely

25
00:00:58,020 --> 00:01:01,170
complicated this is it is a four layer

26
00:01:01,170 --> 00:01:04,019
board but it took me about an hour to

27
00:01:04,019 --> 00:01:06,689
lay out the power supply and and the

28
00:01:06,689 --> 00:01:09,299
multiple voltages for that and then an

29
00:01:09,299 --> 00:01:11,070
hour with the auto router constraining

30
00:01:11,070 --> 00:01:13,380
the auto router to come up with this but

31
00:01:13,380 --> 00:01:15,360
what I want her to show you is these

32
00:01:15,360 --> 00:01:18,900
CPLDs and FPGAs these days are have

33
00:01:18,900 --> 00:01:21,299
multiple voltages in a standard four

34
00:01:21,299 --> 00:01:23,790
layer board you would put VCC on one

35
00:01:23,790 --> 00:01:25,619
layer and ground on another they usually

36
00:01:25,619 --> 00:01:27,689
say to make the ground on top it lowers

37
00:01:27,689 --> 00:01:31,380
the inductance up the top components and

38
00:01:31,380 --> 00:01:35,250
adds a ground shielding value to as to

39
00:01:35,250 --> 00:01:36,720
some of the components on the top of the

40
00:01:36,720 --> 00:01:40,020
board but when you have three voltages

41
00:01:40,020 --> 00:01:42,210
including ground what do you do so I

42
00:01:42,210 --> 00:01:44,340
wanted to show you that let me turn on

43
00:01:44,340 --> 00:01:47,970
some layers here and see if we can turn

44
00:01:47,970 --> 00:01:53,159
off allure so this is a combination of

45
00:01:53,159 --> 00:01:56,700
the inner two layers where there's no

46
00:01:56,700 --> 00:01:58,799
really there's no signals on here other

47
00:01:58,799 --> 00:02:00,509
than this is the power supply and this

48
00:02:00,509 --> 00:02:03,960
happens to be the 1.8 volt supply for

49
00:02:03,960 --> 00:02:07,140
the CPL d and so the 3.3 comes in on one

50
00:02:07,140 --> 00:02:09,090
of the layers but you have to break up

51
00:02:09,090 --> 00:02:11,099
the layer so these two colors are where

52
00:02:11,099 --> 00:02:13,530
I jump from layer to layer so I don't

53
00:02:13,530 --> 00:02:15,360
you know construed you know constrictor

54
00:02:15,360 --> 00:02:17,190
you pass from getting through and also

55
00:02:17,190 --> 00:02:18,990
to keep the impedance down multiple

56
00:02:18,990 --> 00:02:22,020
exits but when you have a loop like this

57
00:02:22,020 --> 00:02:24,030
the noise can't hit the end of the line

58
00:02:24,030 --> 00:02:26,280
and bounce back and and the impedance

59
00:02:26,280 --> 00:02:28,110
doesn't go up suddenly at the end and

60
00:02:28,110 --> 00:02:30,840
stuff like that so this is just kind of

61
00:02:30,840 --> 00:02:31,950
like the only rule when you deal with

62
00:02:31,950 --> 00:02:33,630
these kind out the only rule but this is

63
00:02:33,630 --> 00:02:35,400
a major rule to when you're dealing with

64
00:02:35,400 --> 00:02:37,739
these parts is to get them a good supply

65
00:02:37,739 --> 00:02:42,330
so let's move on from here and let's see

66
00:02:42,330 --> 00:02:48,269
if we can get this thing working so here

67
00:02:48,269 --> 00:02:51,060
we are inside the design software called

68
00:02:51,060 --> 00:02:54,840
Cortis for altaira brand of CPLDs and

69
00:02:54,840 --> 00:02:57,300
what I did do is I did look up the pin

70
00:02:57,300 --> 00:02:59,550
numbers and I created output pins and

71
00:02:59,550 --> 00:03:01,709
I've labeled up LEDs they hooked to some

72
00:03:01,709 --> 00:03:03,810
LEDs on the board I just showed you and

73
00:03:03,810 --> 00:03:07,380
then we've got an input pin which is for

74
00:03:07,380 --> 00:03:09,690
the clock input and what I'd like to do

75
00:03:09,690 --> 00:03:12,450
is make a counter that counts the 50

76
00:03:12,450 --> 00:03:14,370
megahertz oh it's you know kind of a

77
00:03:14,370 --> 00:03:16,500
high speed therefore if trying to view

78
00:03:16,500 --> 00:03:19,920
with your the human eye so we're going

79
00:03:19,920 --> 00:03:22,590
to divide that down to some LEDs and

80
00:03:22,590 --> 00:03:25,530
should be able to see the LED blinking

81
00:03:25,530 --> 00:03:27,470
at some point if we slow it down enough

82
00:03:27,470 --> 00:03:31,380
so the first thing I need to do is in

83
00:03:31,380 --> 00:03:35,160
the in almost all the PGA's in PLD

84
00:03:35,160 --> 00:03:37,680
architectures there's a global clock a

85
00:03:37,680 --> 00:03:40,019
clock that runs to every flip-flop in

86
00:03:40,019 --> 00:03:41,640
the place to where all you have to do is

87
00:03:41,640 --> 00:03:43,890
set a bit to turn it on and this tries

88
00:03:43,890 --> 00:03:46,380
to eliminate the skew of the clocks

89
00:03:46,380 --> 00:03:48,900
across the chip if you took the output

90
00:03:48,900 --> 00:03:50,549
of things and ran it to the input of

91
00:03:50,549 --> 00:03:52,410
clocks you'd get a big mess so they

92
00:03:52,410 --> 00:03:55,019
always tell you don't don't make the

93
00:03:55,019 --> 00:03:56,609
input of a clock be due to a

94
00:03:56,609 --> 00:03:58,590
combinational logic it should be this

95
00:03:58,590 --> 00:04:01,470
global clock so let's make this a global

96
00:04:01,470 --> 00:04:06,470
clock so I'm going into altaira

97
00:04:06,470 --> 00:04:15,019
primitives buffer let's try there global

98
00:04:18,529 --> 00:04:21,019
here I've opened the assignment editor

99
00:04:21,019 --> 00:04:22,670
for the whole part this is cool because

100
00:04:22,670 --> 00:04:25,040
I can see the shape of the part in case

101
00:04:25,040 --> 00:04:27,200
you forgot well where my pins are

102
00:04:27,200 --> 00:04:29,810
located and there's a concept here that

103
00:04:29,810 --> 00:04:31,730
says that these are in IO banks

104
00:04:31,730 --> 00:04:33,680
input/output banks and actually the

105
00:04:33,680 --> 00:04:35,960
banks are programmable as a bank as to I

106
00:04:35,960 --> 00:04:38,450
can set one to be three volt 3.3 volts

107
00:04:38,450 --> 00:04:41,060
and everyone to be 2.5 so I've got a

108
00:04:41,060 --> 00:04:42,830
clock going in here and I'm using some

109
00:04:42,830 --> 00:04:45,710
some output pins right up here and so

110
00:04:45,710 --> 00:04:48,980
down below what I did was I I named the

111
00:04:48,980 --> 00:04:54,500
the pen out 138 because I knew I knew I

112
00:04:54,500 --> 00:04:56,780
wanted on pin 138 the PC boards done

113
00:04:56,780 --> 00:04:59,660
then when I went in and picked the

114
00:04:59,660 --> 00:05:02,810
actual pin number for the part I made

115
00:05:02,810 --> 00:05:05,360
138 equal to 138 so that's just my way

116
00:05:05,360 --> 00:05:07,850
of saying hey I've pre assigned a pin

117
00:05:07,850 --> 00:05:09,919
but but they better hook together when

118
00:05:09,919 --> 00:05:11,900
you're done and then we also have some

119
00:05:11,900 --> 00:05:13,400
other things you can see the different

120
00:05:13,400 --> 00:05:16,730
voltages that we can do here and Lavoie

121
00:05:16,730 --> 00:05:21,940
is TTL a voltage CMOS I don't see any

122
00:05:21,940 --> 00:05:24,919
low voltage differential there and then

123
00:05:24,919 --> 00:05:27,260
we also can set some of the output

124
00:05:27,260 --> 00:05:28,850
current drive now this is a simple

125
00:05:28,850 --> 00:05:30,500
device trust me this list would be a way

126
00:05:30,500 --> 00:05:34,220
is a lot longer in a more modern FPGA so

127
00:05:34,220 --> 00:05:35,720
we're all done with the assignments

128
00:05:35,720 --> 00:05:39,290
which takes us back to the top alright

129
00:05:39,290 --> 00:05:44,090
and so next we need our counter so what

130
00:05:44,090 --> 00:05:45,290
I'm going to do is we're going to come

131
00:05:45,290 --> 00:05:53,080
over here and I'm going to do a file new

132
00:05:53,919 --> 00:05:57,380
ver log HDL file

133
00:05:57,380 --> 00:06:14,360
and bear with me while I type this so

134
00:06:14,360 --> 00:06:16,490
I'm not putting resets or any of those

135
00:06:16,490 --> 00:06:17,750
things that you're always always

136
00:06:17,750 --> 00:06:19,610
supposed to have in there I'm just as

137
00:06:19,610 --> 00:06:24,190
just bare-bones for a demonstration here

138
00:06:28,570 --> 00:06:32,090
and yes I type much slower since I lost

139
00:06:32,090 --> 00:06:36,830
my finger all right so we're going to

140
00:06:36,830 --> 00:06:39,200
save the bear log file we just did in

141
00:06:39,200 --> 00:06:43,010
fact I'll just do a save all and now I'm

142
00:06:43,010 --> 00:06:46,220
going to here's the file and now we're

143
00:06:46,220 --> 00:06:47,890
going to just right-click on it and

144
00:06:47,890 --> 00:06:50,150
create a simple file and it's going to

145
00:06:50,150 --> 00:06:53,950
fire up the compiler real quick so let's

146
00:06:53,950 --> 00:06:57,200
let's install that symbol that we just

147
00:06:57,200 --> 00:06:59,440
made

148
00:07:05,820 --> 00:07:11,770
yes it's the encounter all right

149
00:07:11,770 --> 00:07:13,990
see if we can do a little bump and run

150
00:07:13,990 --> 00:07:19,030
here oh yeah I love it all right

151
00:07:19,030 --> 00:07:24,820
I'll save all and we are going to set

152
00:07:24,820 --> 00:07:26,889
the parameter so there was one value I

153
00:07:26,889 --> 00:07:29,380
didn't describe it but I embedded the

154
00:07:29,380 --> 00:07:32,380
ability to program the width of the

155
00:07:32,380 --> 00:07:35,580
counter so the counter is now 63

156
00:07:35,580 --> 00:07:39,430
flip-flops wide so to speak and I just I

157
00:07:39,430 --> 00:07:42,130
I always try and use buses and try and

158
00:07:42,130 --> 00:07:44,410
use these span values like this whenever

159
00:07:44,410 --> 00:07:47,440
I can include an in real deep in d8 DSP

160
00:07:47,440 --> 00:07:52,680
type stuff so let's uh see if this works

161
00:08:00,260 --> 00:08:02,940
excellent the compilation is done glad I

162
00:08:02,940 --> 00:08:06,090
didn't have to do that by hand and let's

163
00:08:06,090 --> 00:08:07,980
throw it over to the workstation on the

164
00:08:07,980 --> 00:08:11,840
bench and download it see if it works

165
00:08:12,140 --> 00:08:15,060
here's the programming part of the

166
00:08:15,060 --> 00:08:17,370
quartz software so the first challenge

167
00:08:17,370 --> 00:08:21,690
is always getting the USB blaster to to

168
00:08:21,690 --> 00:08:24,210
be seen especially in the x64 world and

169
00:08:24,210 --> 00:08:25,980
maybe I'll blog about the specifics of

170
00:08:25,980 --> 00:08:30,360
that there excellent so we go ahead add

171
00:08:30,360 --> 00:08:34,289
that as the hardware and this is the

172
00:08:34,289 --> 00:08:36,330
part if you design these boards that you

173
00:08:36,330 --> 00:08:38,909
always cross your fingers for and when

174
00:08:38,909 --> 00:08:41,490
it sees your device it's a it's a woohoo

175
00:08:41,490 --> 00:08:44,960
moment so woohoo all right let's

176
00:08:44,960 --> 00:08:48,150
associate this with a file that we want

177
00:08:48,150 --> 00:08:53,100
to program it output files keep up with

178
00:08:53,100 --> 00:08:55,310
me

179
00:08:59,580 --> 00:09:03,830
and you don't wear your glasses one time

180
00:09:08,450 --> 00:09:11,240
okay here the download finished and

181
00:09:11,240 --> 00:09:14,040
immediately the LED started blinking

182
00:09:14,040 --> 00:09:15,960
which is what all this has been about

183
00:09:15,960 --> 00:09:18,510
all this programming just a make some

184
00:09:18,510 --> 00:09:20,970
LEDs blink in this case you can see that

185
00:09:20,970 --> 00:09:24,240
it is embedded in the flash a comparison

186
00:09:24,240 --> 00:09:27,960
without having to reload that reloaded

187
00:09:27,960 --> 00:09:30,510
from the programmer so let's review a

188
00:09:30,510 --> 00:09:33,300
little bit we started with the part

189
00:09:33,300 --> 00:09:36,660
shown here which is a CP LD device from

190
00:09:36,660 --> 00:09:40,830
L Tara this is a 570 device again 144

191
00:09:40,830 --> 00:09:45,180
pin flash based and inside of it R is an

192
00:09:45,180 --> 00:09:48,480
array of logic blocks so here's here's

193
00:09:48,480 --> 00:09:50,430
what a typical logic block looks like

194
00:09:50,430 --> 00:09:52,080
these are reconfigurable they have

195
00:09:52,080 --> 00:09:54,660
things like adder mode and stuff but

196
00:09:54,660 --> 00:09:56,400
pretty much it's it's what you see here

197
00:09:56,400 --> 00:09:58,350
there's some luck up tables and there's

198
00:09:58,350 --> 00:10:00,120
clock selectors and that kind of thing

199
00:10:00,120 --> 00:10:02,430
and it's it's basically the

200
00:10:02,430 --> 00:10:04,770
jack-of-all-trades block for this device

201
00:10:04,770 --> 00:10:09,210
and what we what the compiler does is

202
00:10:09,210 --> 00:10:11,520
take your code and figure out the best

203
00:10:11,520 --> 00:10:14,670
way to use these blocks to accomplish

204
00:10:14,670 --> 00:10:17,340
what you told it to do so in this case

205
00:10:17,340 --> 00:10:19,680
it's this fair log file as we see here

206
00:10:19,680 --> 00:10:23,190
and this is extremely simple that's why

207
00:10:23,190 --> 00:10:24,990
actually I wanted to type it it right in

208
00:10:24,990 --> 00:10:27,810
front of you was this is and nothing

209
00:10:27,810 --> 00:10:30,120
more than at the positive edge of the

210
00:10:30,120 --> 00:10:32,580
clock take whatever is in the value and

211
00:10:32,580 --> 00:10:35,310
add one to it so you heard me say I

212
00:10:35,310 --> 00:10:37,260
didn't do resets or anything like that

213
00:10:37,260 --> 00:10:40,260
well in real life we would we want it to

214
00:10:40,260 --> 00:10:42,570
start from a known position in real life

215
00:10:42,570 --> 00:10:44,490
but we also wanted to start from a known

216
00:10:44,490 --> 00:10:47,040
position so we can simulate it I also

217
00:10:47,040 --> 00:10:49,140
pushed down the width of it you see

218
00:10:49,140 --> 00:10:51,660
prama equals seven here seven just

219
00:10:51,660 --> 00:10:53,460
happens to be a default from the top

220
00:10:53,460 --> 00:10:56,820
sheet I told it 63 which means 64 bits

221
00:10:56,820 --> 00:10:59,190
and that means I can call this counter

222
00:10:59,190 --> 00:11:00,870
over and over again using different

223
00:11:00,870 --> 00:11:02,880
widths just by specifying different

224
00:11:02,880 --> 00:11:05,430
widths on the top sheet and that that

225
00:11:05,430 --> 00:11:06,870
makes sense because that's where I'm

226
00:11:06,870 --> 00:11:08,760
going to see the bus with so I can look

227
00:11:08,760 --> 00:11:11,760
and say ah there's a bus of 64 lined up

228
00:11:11,760 --> 00:11:12,740
with a counter of

229
00:11:12,740 --> 00:11:15,920
sixty-four so this wasn't meant to be an

230
00:11:15,920 --> 00:11:18,410
end-all be-all of CPLDs of course I just

231
00:11:18,410 --> 00:11:19,610
wanted to go through each of the steps

232
00:11:19,610 --> 00:11:21,920
once because I'm convinced that you two

233
00:11:21,920 --> 00:11:25,459
can program a CP LD the software is free

234
00:11:25,459 --> 00:11:27,830
and really at this point the the hard

235
00:11:27,830 --> 00:11:29,990
part's getting the find and aboard

236
00:11:29,990 --> 00:11:32,899
that's that's just a simple CP LD board

237
00:11:32,899 --> 00:11:34,880
so I'm going to be on the lookout of

238
00:11:34,880 --> 00:11:36,770
some of those for you alright that

239
00:11:36,770 --> 00:11:39,500
brings us to the end of programming a CP

240
00:11:39,500 --> 00:11:41,779
LD that went by kind of quick but that

241
00:11:41,779 --> 00:11:43,640
was the point we did one of everything

242
00:11:43,640 --> 00:11:46,040
all the way through and and the point is

243
00:11:46,040 --> 00:11:48,589
you can do this if you haven't done a

244
00:11:48,589 --> 00:11:51,649
programmable logic before so who knows

245
00:11:51,649 --> 00:11:53,480
in a year from now maybe we'll be making

246
00:11:53,480 --> 00:11:56,480
our own arithmetic logic units or if we

247
00:11:56,480 --> 00:11:58,279
can get into the DSP stuff that'd be

248
00:11:58,279 --> 00:11:59,930
really cool or some cool things you can

249
00:11:59,930 --> 00:12:02,779
do so meanwhile bill heard from hackaday

250
00:12:02,779 --> 00:12:07,240
and if you have a mind to keep hacking

