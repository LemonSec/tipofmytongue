1
00:00:10,910 --> 00:00:15,559
hello everybody I'm here today to

2
00:00:13,280 --> 00:00:17,960
present a paper entitled confirm

3
00:00:15,559 --> 00:00:20,270
evaluating compatibility and relevance

4
00:00:17,960 --> 00:00:23,150
of control for integrity protections for

5
00:00:20,270 --> 00:00:25,700
modern software so I'm changsu and this

6
00:00:23,150 --> 00:00:28,549
is a collaboration with my lab mate

7
00:00:25,700 --> 00:00:31,430
masu when how my advisor dr. Hamlin for

8
00:00:28,550 --> 00:00:37,579
a University of Texas at Dallas and dr.

9
00:00:31,430 --> 00:00:39,890
ring from Ohio State University so

10
00:00:37,579 --> 00:00:42,380
control integrity enforcement give is a

11
00:00:39,890 --> 00:00:45,380
great idea pioneered by a body and other

12
00:00:42,380 --> 00:00:47,990
co-authors back in 2005 and the main

13
00:00:45,380 --> 00:00:51,620
idea is to prevent people from hijacking

14
00:00:47,990 --> 00:00:54,950
software we they're kind of Garko that

15
00:00:51,620 --> 00:00:55,610
restricts the target of control flow

16
00:00:54,950 --> 00:00:58,910
transfers

17
00:00:55,610 --> 00:01:01,970
either compile time or source agnostic

18
00:00:58,910 --> 00:01:04,488
binary to binary transformation so this

19
00:01:01,970 --> 00:01:08,240
is lots of better than say fuzzing to

20
00:01:04,489 --> 00:01:10,939
try to detect hijacking vulnerabilities

21
00:01:08,240 --> 00:01:12,560
because CFI can precisely enforce

22
00:01:10,939 --> 00:01:14,350
control flow graph policies where

23
00:01:12,560 --> 00:01:18,549
fuzzing just sort of um

24
00:01:14,350 --> 00:01:18,548
probabilistically detect possible faults

25
00:01:19,600 --> 00:01:24,770
so here is a timeline of research into

26
00:01:22,759 --> 00:01:29,389
CF I along with software fault isolation

27
00:01:24,770 --> 00:01:32,569
SFI and vtable protection so CFI was

28
00:01:29,389 --> 00:01:34,548
invented back in 2005 and there were

29
00:01:32,569 --> 00:01:37,189
serious or following works that improve

30
00:01:34,549 --> 00:01:38,950
depend on it providing better partition

31
00:01:37,189 --> 00:01:41,359
more accurate policies better

32
00:01:38,950 --> 00:01:43,249
performance and starting from two

33
00:01:41,359 --> 00:01:45,079
thousand two thousand fourteen there has

34
00:01:43,249 --> 00:01:48,229
been a complete explosion in the number

35
00:01:45,079 --> 00:01:50,089
of CFI because there are some really

36
00:01:48,229 --> 00:01:52,729
really hard problems getting to work

37
00:01:50,090 --> 00:01:54,139
efficiently um lots of architecture

38
00:01:52,729 --> 00:01:57,020
architectures and different applications

39
00:01:54,139 --> 00:01:59,209
for example one of the hard problem is

40
00:01:57,020 --> 00:02:02,949
how do you implement survive when you

41
00:01:59,209 --> 00:02:05,509
have a lot of object with writable

42
00:02:02,950 --> 00:02:08,899
function method tables floating around

43
00:02:05,509 --> 00:02:11,330
and one of my prayer works objectivity

44
00:02:08,899 --> 00:02:14,150
was talking in that problem and another

45
00:02:11,330 --> 00:02:17,330
example problem is can you somehow use

46
00:02:14,150 --> 00:02:20,030
type information to gather enforcement

47
00:02:17,330 --> 00:02:23,300
better and there are several works that

48
00:02:20,030 --> 00:02:26,660
work on that one of them is toss a Fi

49
00:02:23,300 --> 00:02:29,330
so we have made impressive progress

50
00:02:26,660 --> 00:02:31,510
tackling all these problems and there

51
00:02:29,330 --> 00:02:34,460
was a survey paper published in Cesar

52
00:02:31,510 --> 00:02:36,560
2017 that summarizes the fire sell

53
00:02:34,460 --> 00:02:38,870
fireworks and people if you want to read

54
00:02:36,560 --> 00:02:40,640
more about safe ice on precision

55
00:02:38,870 --> 00:02:42,320
security and performance issue

56
00:02:40,640 --> 00:02:45,290
definitely raise this wonderful paper

57
00:02:42,320 --> 00:02:50,450
and it was in varying to us for this

58
00:02:45,290 --> 00:02:53,120
work so although with this harvest of

59
00:02:50,450 --> 00:02:56,390
CFI solutions we are not aware of any

60
00:02:53,120 --> 00:03:00,290
work that can fully secure say Microsoft

61
00:02:56,390 --> 00:03:02,359
Office suite so why is that so to enter

62
00:03:00,290 --> 00:03:06,890
this question we have surveyed a total

63
00:03:02,360 --> 00:03:08,840
of 54 CFI papers from 2005 2018

64
00:03:06,890 --> 00:03:09,529
published in the top four security

65
00:03:08,840 --> 00:03:12,020
venues

66
00:03:09,530 --> 00:03:15,650
among these papers twenty four percent

67
00:03:12,020 --> 00:03:17,630
of them are evaluated on linux and only

68
00:03:15,650 --> 00:03:20,510
four percent of them are evaluated on

69
00:03:17,630 --> 00:03:23,990
windows that reports expand experimental

70
00:03:20,510 --> 00:03:27,019
results for at least one complete non

71
00:03:23,990 --> 00:03:28,490
benchmark application so we have all

72
00:03:27,020 --> 00:03:30,590
been there building this great

73
00:03:28,490 --> 00:03:32,120
technologies and of course there's a

74
00:03:30,590 --> 00:03:35,300
hope that these things can eventually

75
00:03:32,120 --> 00:03:38,420
protect us from terrible cyberattacks

76
00:03:35,300 --> 00:03:40,250
but unfortunately we look at what cyber

77
00:03:38,420 --> 00:03:44,329
criminals are actually attacking and

78
00:03:40,250 --> 00:03:46,400
here's a list of top 10 in 2018 so among

79
00:03:44,330 --> 00:03:48,860
these top 10 eight of them are windows

80
00:03:46,400 --> 00:03:51,230
specific vulnerabilities and including

81
00:03:48,860 --> 00:03:54,770
five Microsoft Office bugs and three

82
00:03:51,230 --> 00:03:57,410
internet support bugs and if you go out

83
00:03:54,770 --> 00:03:59,240
to look at larger list see top 20 top 30

84
00:03:57,410 --> 00:04:02,770
they are basically basically all

85
00:03:59,240 --> 00:04:05,570
windows-based the vulnerabilities so

86
00:04:02,770 --> 00:04:08,180
these are the actual compromises in the

87
00:04:05,570 --> 00:04:10,790
real world but they are by far dominated

88
00:04:08,180 --> 00:04:12,440
by windows compromises so what I'd like

89
00:04:10,790 --> 00:04:14,690
to do and I think every certified

90
00:04:12,440 --> 00:04:16,820
researchers would like to do is to be

91
00:04:14,690 --> 00:04:18,230
able to block those attacks those are

92
00:04:16,820 --> 00:04:20,269
the ones that are happening all the time

93
00:04:18,230 --> 00:04:25,040
the ones someone stealing your credit

94
00:04:20,269 --> 00:04:27,320
card information but actually this is

95
00:04:25,040 --> 00:04:29,480
not a surprise when you look at the

96
00:04:27,320 --> 00:04:32,840
market share of text operating systems

97
00:04:29,480 --> 00:04:35,360
out there you can see that about 98% of

98
00:04:32,840 --> 00:04:36,159
that stopped operating systems are non

99
00:04:35,360 --> 00:04:37,809
Linux

100
00:04:36,159 --> 00:04:40,149
and even in mission critical

101
00:04:37,809 --> 00:04:42,939
environments we got the same picture and

102
00:04:40,149 --> 00:04:45,909
here are some reports we collected so

103
00:04:42,939 --> 00:04:48,879
according to the OE about 75% of control

104
00:04:45,909 --> 00:04:51,159
systems are running Microsoft Windows XP

105
00:04:48,879 --> 00:04:52,869
and more than a quarter of all the

106
00:04:51,159 --> 00:04:55,989
government computers currently run all

107
00:04:52,869 --> 00:04:58,029
dated Windows or Mac OS various agencies

108
00:04:55,989 --> 00:05:00,188
currently stored their security

109
00:04:58,029 --> 00:05:02,739
information on outdated Windows 2003

110
00:05:00,189 --> 00:05:05,169
servers and there are hundreds of

111
00:05:02,739 --> 00:05:08,649
satellites running Windows 95 above our

112
00:05:05,169 --> 00:05:10,119
house so this is a real world it would

113
00:05:08,649 --> 00:05:12,459
be a great thing to hit if we can

114
00:05:10,119 --> 00:05:14,949
protect all the things with the existing

115
00:05:12,459 --> 00:05:16,509
sci-fi solutions and I think there's an

116
00:05:14,949 --> 00:05:19,719
expectation on the side of us

117
00:05:16,509 --> 00:05:21,999
researchers that we can simply take the

118
00:05:19,719 --> 00:05:23,830
CFI solutions and apply them to Windows

119
00:05:21,999 --> 00:05:26,379
applications with a little bit

120
00:05:23,830 --> 00:05:28,389
Engineering but as the technology is

121
00:05:26,379 --> 00:05:32,349
written great majority we and everyone

122
00:05:28,389 --> 00:05:34,809
are finding out that is not true and

123
00:05:32,349 --> 00:05:37,089
this is hard even to find out why the

124
00:05:34,809 --> 00:05:40,209
Windows and Mac OS applications are

125
00:05:37,089 --> 00:05:42,699
breaking because when we try to apply

126
00:05:40,209 --> 00:05:46,179
existing Linux based survive solutions

127
00:05:42,699 --> 00:05:48,279
to them because those are usually closed

128
00:05:46,179 --> 00:05:50,409
source ecosystems we don't have source

129
00:05:48,279 --> 00:05:54,249
code for most of the binary code that

130
00:05:50,409 --> 00:05:56,709
breaks so like those CVS they are

131
00:05:54,249 --> 00:05:58,779
proprietary web browsers and Microsoft

132
00:05:56,709 --> 00:06:01,149
Office that we don't have source for or

133
00:05:58,779 --> 00:06:02,889
libraries that have closed source so

134
00:06:01,149 --> 00:06:07,779
this is a challenge in front of all of

135
00:06:02,889 --> 00:06:09,519
us and how to waste them on this we

136
00:06:07,779 --> 00:06:11,789
conclude that the problem is really

137
00:06:09,519 --> 00:06:14,319
something to do with compatibility

138
00:06:11,789 --> 00:06:17,469
compatibility so the system might be

139
00:06:14,319 --> 00:06:19,509
secure if only the software works after

140
00:06:17,469 --> 00:06:21,879
you apply the several reason the

141
00:06:19,509 --> 00:06:26,439
difficulty is figuring out what broke in

142
00:06:21,879 --> 00:06:28,179
this piece of complex software so in the

143
00:06:26,439 --> 00:06:31,300
past we sort of dodged this problem

144
00:06:28,179 --> 00:06:32,948
because we have conducted most of the

145
00:06:31,300 --> 00:06:35,829
evaluation in terms of security and

146
00:06:32,949 --> 00:06:37,779
performance but there hasn't been a

147
00:06:35,829 --> 00:06:40,179
systematic study of the accountability

148
00:06:37,779 --> 00:06:42,579
problems that's why we don't know what

149
00:06:40,179 --> 00:06:45,789
they are and there's a lot of aggressive

150
00:06:42,579 --> 00:06:47,619
testing done with a few benchmarks but

151
00:06:45,789 --> 00:06:49,419
those are probably good for a

152
00:06:47,619 --> 00:06:49,950
performance performance testing

153
00:06:49,419 --> 00:06:51,810
best

154
00:06:49,950 --> 00:06:54,750
reveal what the compatibility problems

155
00:06:51,810 --> 00:06:58,290
are because CPU benchmarks I think we

156
00:06:54,750 --> 00:07:00,930
are great are not presented of the

157
00:06:58,290 --> 00:07:03,300
control flow control flow graphs of say

158
00:07:00,930 --> 00:07:06,210
Microsoft Word those are very different

159
00:07:03,300 --> 00:07:10,800
programs so in order to cope with these

160
00:07:06,210 --> 00:07:12,870
problems we propose our solution control

161
00:07:10,800 --> 00:07:15,390
flow integrity relevance metrics confirm

162
00:07:12,870 --> 00:07:17,640
our paper we identified a total of

163
00:07:15,390 --> 00:07:19,740
twenty comfortability problems that are

164
00:07:17,640 --> 00:07:22,950
challenging for CFA enforcement and

165
00:07:19,740 --> 00:07:25,470
based on this in these problems confirm

166
00:07:22,950 --> 00:07:27,930
is the first testing switch that is

167
00:07:25,470 --> 00:07:30,780
designed specifically for CFI solution

168
00:07:27,930 --> 00:07:33,090
evaluation and using confirm we

169
00:07:30,780 --> 00:07:36,599
re-evaluated 12 publicly available

170
00:07:33,090 --> 00:07:39,539
certified implementations and overall we

171
00:07:36,600 --> 00:07:42,090
got about 53 percent success rate in

172
00:07:39,540 --> 00:07:43,770
solving Z compatibility problems then in

173
00:07:42,090 --> 00:07:46,169
the end we did a correlation analysis

174
00:07:43,770 --> 00:07:48,659
between confirm and the CPU benchmarks

175
00:07:46,170 --> 00:07:50,700
which so confirm is now publicly

176
00:07:48,660 --> 00:07:53,900
available on github please download it

177
00:07:50,700 --> 00:07:53,900
and check it out if you're interested

178
00:07:54,860 --> 00:08:00,300
in order to study the self i competitive

179
00:07:58,080 --> 00:08:03,419
limitations with laborious lis

180
00:08:00,300 --> 00:08:05,370
disassembled and debugged CFI or isms

181
00:08:03,420 --> 00:08:07,380
apply to many many large complicated

182
00:08:05,370 --> 00:08:09,810
closed source software products and

183
00:08:07,380 --> 00:08:12,090
other results of this hundreds of men's

184
00:08:09,810 --> 00:08:14,910
hours of testing of the things we were

185
00:08:12,090 --> 00:08:18,150
able to come up with 20 categories a

186
00:08:14,910 --> 00:08:20,940
week of what we call widespread classes

187
00:08:18,150 --> 00:08:23,580
of CFI compatibility problems so here

188
00:08:20,940 --> 00:08:25,770
the list on the right hand side there

189
00:08:23,580 --> 00:08:27,719
are some of these software products that

190
00:08:25,770 --> 00:08:30,740
we found a sin scene to show you these

191
00:08:27,720 --> 00:08:34,070
are real things now some pretend

192
00:08:30,740 --> 00:08:37,380
compatibility issues it will be obvious

193
00:08:34,070 --> 00:08:39,720
very difficult to simply apply your

194
00:08:37,380 --> 00:08:41,789
several rhythm to Adobe Reader and they

195
00:08:39,720 --> 00:08:44,760
breaks probably for seven different

196
00:08:41,789 --> 00:08:46,140
comparable compatibility reasons you

197
00:08:44,760 --> 00:08:48,750
don't have this what's code for it is

198
00:08:46,140 --> 00:08:51,090
very complicated so in order to make

199
00:08:48,750 --> 00:08:53,970
this job much easier for researchers so

200
00:08:51,090 --> 00:08:55,650
we have developed a toy programs that

201
00:08:53,970 --> 00:08:59,000
each exhibits some of these

202
00:08:55,650 --> 00:08:59,000
compatibility problems

203
00:08:59,780 --> 00:09:05,000
in this chart the tour programs are

204
00:09:02,720 --> 00:09:07,730
listed on the left for each of them we

205
00:09:05,000 --> 00:09:10,010
applied 12 major CFI solutions to that

206
00:09:07,730 --> 00:09:12,530
and use it to try to evaluate whether

207
00:09:10,010 --> 00:09:15,020
that solution is compatible with that

208
00:09:12,530 --> 00:09:17,990
problem we give it a cross market the

209
00:09:15,020 --> 00:09:21,410
test program reports either compilation

210
00:09:17,990 --> 00:09:24,380
error error or crashes at run time

211
00:09:21,410 --> 00:09:25,760
meaning incompatible at all and we give

212
00:09:24,380 --> 00:09:28,100
it a warning mark if it passes

213
00:09:25,760 --> 00:09:30,830
compatibility tack that fails cured

214
00:09:28,100 --> 00:09:33,710
attack and depending on which program it

215
00:09:30,830 --> 00:09:35,780
is - some of them can double as micro

216
00:09:33,710 --> 00:09:39,560
benchmarks they give performance results

217
00:09:35,780 --> 00:09:42,020
so when it has to succeed for one of

218
00:09:39,560 --> 00:09:44,930
those we report the performance overhead

219
00:09:42,020 --> 00:09:46,460
as a percentage if there's no

220
00:09:44,930 --> 00:09:49,339
performance number we just gave a

221
00:09:46,460 --> 00:09:52,190
checkmark so many of this reported

222
00:09:49,340 --> 00:09:54,650
failures or warnings are probably very

223
00:09:52,190 --> 00:09:56,090
easy to fix the reason why is it went

224
00:09:54,650 --> 00:09:58,640
undiscovered when the paper was

225
00:09:56,090 --> 00:10:00,590
originated originally published was

226
00:09:58,640 --> 00:10:03,140
because there wasn't any easy way to

227
00:10:00,590 --> 00:10:05,060
attach a test all day things and that's

228
00:10:03,140 --> 00:10:08,750
what we're trying to do we're trying to

229
00:10:05,060 --> 00:10:11,150
provide that but on the other hand some

230
00:10:08,750 --> 00:10:13,430
of these are really hard problems that

231
00:10:11,150 --> 00:10:15,050
maybe nobody can solve so we don't know

232
00:10:13,430 --> 00:10:17,479
how to solve them but they haven't been

233
00:10:15,050 --> 00:10:19,670
started very much because there hasn't

234
00:10:17,480 --> 00:10:21,830
been the test suite to show what they

235
00:10:19,670 --> 00:10:24,650
are so I don't have time to cover all

236
00:10:21,830 --> 00:10:28,670
them that all of them here today let me

237
00:10:24,650 --> 00:10:30,319
give you some examples of each I start

238
00:10:28,670 --> 00:10:33,020
with how easy I raise and protect

239
00:10:30,320 --> 00:10:36,020
returns so in this program both the

240
00:10:33,020 --> 00:10:38,569
functions of delegate and print prompt

241
00:10:36,020 --> 00:10:41,870
causes a same subroutine F so we want to

242
00:10:38,570 --> 00:10:43,910
make sure that if it it is print prompt

243
00:10:41,870 --> 00:10:46,250
that is call enough it better returns

244
00:10:43,910 --> 00:10:49,069
back to itself a lying number 10 of

245
00:10:46,250 --> 00:10:50,720
source code because if we allowed it to

246
00:10:49,070 --> 00:10:53,300
return to the call side in your

247
00:10:50,720 --> 00:10:57,589
sonicated align for then suddenly it got

248
00:10:53,300 --> 00:10:59,599
authenticated then assembly level as we

249
00:10:57,589 --> 00:11:01,730
know the return address is post onto the

250
00:10:59,600 --> 00:11:04,670
stack and point you too bad the ESP

251
00:11:01,730 --> 00:11:08,360
register and usually the way almost all

252
00:11:04,670 --> 00:11:10,459
CFI applications work that they find

253
00:11:08,360 --> 00:11:13,580
dangerous instructions like this return

254
00:11:10,459 --> 00:11:16,520
instruction at line number 12

255
00:11:13,580 --> 00:11:18,530
then the ins or some kind of Garko here

256
00:11:16,520 --> 00:11:21,079
to prevent that from going to a bad

257
00:11:18,530 --> 00:11:23,240
place and usually the guard code logic

258
00:11:21,080 --> 00:11:25,250
something like this if we return target

259
00:11:23,240 --> 00:11:28,880
is going to take is invalid it's an

260
00:11:25,250 --> 00:11:31,460
abort otherwise continue but we need to

261
00:11:28,880 --> 00:11:33,410
be careful before saying whether it

262
00:11:31,460 --> 00:11:35,570
returned target about it or not first of

263
00:11:33,410 --> 00:11:38,150
all we need to make sure that it returns

264
00:11:35,570 --> 00:11:40,880
to call sites but we also need to

265
00:11:38,150 --> 00:11:42,740
remember which cosine it was because

266
00:11:40,880 --> 00:11:45,350
obviously if you don't restrict a to

267
00:11:42,740 --> 00:11:46,970
call sites well then it returns for

268
00:11:45,350 --> 00:11:50,060
arbitrary address and God authenticated

269
00:11:46,970 --> 00:11:52,190
but if we just restrict it to call sites

270
00:11:50,060 --> 00:11:54,589
but not a process one we still have the

271
00:11:52,190 --> 00:12:00,020
same problem it got an indicated by just

272
00:11:54,590 --> 00:12:03,380
calling print prompt so one of the ways

273
00:12:00,020 --> 00:12:04,970
to implement that return guard is to use

274
00:12:03,380 --> 00:12:07,580
a shadow stack and let's see what

275
00:12:04,970 --> 00:12:11,420
happened here in this program the main

276
00:12:07,580 --> 00:12:15,440
function calls F and F koschie in the

277
00:12:11,420 --> 00:12:18,110
try block then G cost function H by far

278
00:12:15,440 --> 00:12:20,120
the shadows that code is maintaining a

279
00:12:18,110 --> 00:12:23,300
separate stack at the same as a regular

280
00:12:20,120 --> 00:12:26,570
call stack and now in H it throws an

281
00:12:23,300 --> 00:12:28,130
exception the way that the low-level

282
00:12:26,570 --> 00:12:29,900
binary code works is that there's

283
00:12:28,130 --> 00:12:31,910
something called Stockholm whining that

284
00:12:29,900 --> 00:12:34,670
her curse where things get a problem of

285
00:12:31,910 --> 00:12:37,189
the regular stack on here it hits the

286
00:12:34,670 --> 00:12:39,469
call frame which consists the correct

287
00:12:37,190 --> 00:12:43,070
catch block and in this case the call

288
00:12:39,470 --> 00:12:45,140
frame of function f so suddenly a whole

289
00:12:43,070 --> 00:12:48,110
bunch of frames go away without any

290
00:12:45,140 --> 00:12:50,060
return executed and the shadow stack

291
00:12:48,110 --> 00:12:52,550
implementation somehow has to know that

292
00:12:50,060 --> 00:12:54,589
this has happened otherwise these call

293
00:12:52,550 --> 00:12:56,780
frames are not going to match up but it

294
00:12:54,590 --> 00:12:58,400
turns out to be very hard to implement a

295
00:12:56,780 --> 00:13:00,890
shadow stack that works in this way

296
00:12:58,400 --> 00:13:04,010
because there are so many different ways

297
00:13:00,890 --> 00:13:08,540
that a whole bunch of frames can be a

298
00:13:04,010 --> 00:13:10,280
gap can be gap table at once in fact it

299
00:13:08,540 --> 00:13:13,250
can be done with a single assembly

300
00:13:10,280 --> 00:13:15,740
instruction that just as a number to the

301
00:13:13,250 --> 00:13:18,460
ESP register how do you find that

302
00:13:15,740 --> 00:13:21,320
instruction and different it

303
00:13:18,460 --> 00:13:23,660
differentiate from all the other ESP add

304
00:13:21,320 --> 00:13:26,120
instructions that just popping off one

305
00:13:23,660 --> 00:13:27,350
frame is very difficult so we call this

306
00:13:26,120 --> 00:13:30,650
problem unmatched

307
00:13:27,350 --> 00:13:32,660
caught return pairs and here when they

308
00:13:30,650 --> 00:13:35,329
return instruction from after two men is

309
00:13:32,660 --> 00:13:36,770
executed the return guard coach acts of

310
00:13:35,330 --> 00:13:38,480
whether a return address on the shadow

311
00:13:36,770 --> 00:13:40,340
stack is equal to the one on the

312
00:13:38,480 --> 00:13:42,800
irregular call stack and then this

313
00:13:40,340 --> 00:13:47,480
benign program abort with by policy

314
00:13:42,800 --> 00:13:49,670
violation now we look back to this table

315
00:13:47,480 --> 00:13:52,400
and yes all these software products have

316
00:13:49,670 --> 00:13:54,589
that problem in there including PDF

317
00:13:52,400 --> 00:13:56,030
Reader Apache web server Microsoft

318
00:13:54,590 --> 00:13:58,010
Office web browsers

319
00:13:56,030 --> 00:14:01,670
so the Albrecht when you try to

320
00:13:58,010 --> 00:14:03,680
implement CFI in this way and another

321
00:14:01,670 --> 00:14:06,020
problem that seems to be hard to fix is

322
00:14:03,680 --> 00:14:07,910
multi-threading multi-threading is not

323
00:14:06,020 --> 00:14:10,160
extremely important for software

324
00:14:07,910 --> 00:14:15,410
efficiency but it can be problematic for

325
00:14:10,160 --> 00:14:18,350
CFI enforcement because it turns out

326
00:14:15,410 --> 00:14:20,569
that in Windows and Mac OS all the

327
00:14:18,350 --> 00:14:23,420
thread have write access to each other

328
00:14:20,570 --> 00:14:26,660
stacks they all live in a flat or a

329
00:14:23,420 --> 00:14:28,069
space so a compromise read can override

330
00:14:26,660 --> 00:14:30,439
the return address on the other thread

331
00:14:28,070 --> 00:14:32,780
between the check and the use of that

332
00:14:30,440 --> 00:14:34,850
return address so it's a time to track

333
00:14:32,780 --> 00:14:36,890
to time to use vulnerability we call

334
00:14:34,850 --> 00:14:39,080
this a cross thread stack smashing

335
00:14:36,890 --> 00:14:42,560
attack so here threat U is being

336
00:14:39,080 --> 00:14:45,260
protected by some CFI solution and the

337
00:14:42,560 --> 00:14:47,839
Hydra threat one here tries to override

338
00:14:45,260 --> 00:14:50,630
the return address of threat to to some

339
00:14:47,840 --> 00:14:52,580
dangerous address in an infinitive it's

340
00:14:50,630 --> 00:14:59,210
just waiting for the right moment to

341
00:14:52,580 --> 00:15:01,370
exploit this talk to window and we found

342
00:14:59,210 --> 00:15:02,510
out that using this we can break every

343
00:15:01,370 --> 00:15:05,540
sci-fi sandbox

344
00:15:02,510 --> 00:15:08,390
we tested we're not aware of any way to

345
00:15:05,540 --> 00:15:11,240
fix this problem except by introducing

346
00:15:08,390 --> 00:15:14,480
huge performance overhead maybe a

347
00:15:11,240 --> 00:15:16,280
randomized randomized safe stack does

348
00:15:14,480 --> 00:15:18,110
the performance of that is like a

349
00:15:16,280 --> 00:15:21,740
solvent person or something it's very

350
00:15:18,110 --> 00:15:24,170
hard another wise rests worth of

351
00:15:21,740 --> 00:15:26,480
unsolved problems we discovered is that

352
00:15:24,170 --> 00:15:28,760
there's a lot of code out there that

353
00:15:26,480 --> 00:15:33,470
does runtime modification to itself and

354
00:15:28,760 --> 00:15:36,110
it was it's not just G compilers even if

355
00:15:33,470 --> 00:15:37,610
it was just to come Harris that would be

356
00:15:36,110 --> 00:15:39,980
a problem because there are lots of

357
00:15:37,610 --> 00:15:43,790
languages that are now becoming too

358
00:15:39,980 --> 00:15:46,370
hyoh including Python Java C sharp etc

359
00:15:43,790 --> 00:15:48,770
but there are some programs at her

360
00:15:46,370 --> 00:15:51,440
runtime unpacked little use component

361
00:15:48,770 --> 00:15:53,600
and there's even self hooking behavior

362
00:15:51,440 --> 00:15:56,180
and this is a reason that nobody has

363
00:15:53,600 --> 00:16:02,150
successfully applied CFI to the entire

364
00:15:56,180 --> 00:16:05,089
Microsoft Office suite since we

365
00:16:02,150 --> 00:16:07,730
developed the confirmed tests and we

366
00:16:05,090 --> 00:16:09,500
then had a set of micro benchmarks for

367
00:16:07,730 --> 00:16:12,050
which we can get a bunch of independent

368
00:16:09,500 --> 00:16:14,150
performance results we decided to try to

369
00:16:12,050 --> 00:16:17,420
answer a long-standing question that we

370
00:16:14,150 --> 00:16:19,610
had and that is to what degree do spec

371
00:16:17,420 --> 00:16:22,610
CPU benchmarks exhibit code features

372
00:16:19,610 --> 00:16:25,040
that are even related to sci-fi ok some

373
00:16:22,610 --> 00:16:27,440
of them have really simple control flow

374
00:16:25,040 --> 00:16:31,819
graphs for which almost no protection is

375
00:16:27,440 --> 00:16:34,130
needed and so when we get performance

376
00:16:31,820 --> 00:16:36,320
results for those it's not necessarily

377
00:16:34,130 --> 00:16:38,980
representative of what the performance

378
00:16:36,320 --> 00:16:41,600
will be on a real large application with

379
00:16:38,980 --> 00:16:44,450
complicated control flow graphs like say

380
00:16:41,600 --> 00:16:47,060
PowerPoint so weighted a correlation

381
00:16:44,450 --> 00:16:49,250
analysis from confirms force versus spec

382
00:16:47,060 --> 00:16:52,300
CPU performance scores in the presence

383
00:16:49,250 --> 00:16:54,860
of CF I then we came up with this table

384
00:16:52,300 --> 00:16:56,479
so the correlation analysis results are

385
00:16:54,860 --> 00:16:59,930
listed in the right rendering from

386
00:16:56,480 --> 00:17:02,810
negative 1 to 1 1 in k1 indicates that

387
00:16:59,930 --> 00:17:05,119
the overhead of a spec CPU benchmark and

388
00:17:02,810 --> 00:17:07,250
confirm over half millions are most

389
00:17:05,119 --> 00:17:09,709
directly related and negative 1

390
00:17:07,250 --> 00:17:12,020
indicates most inverse related so you

391
00:17:09,710 --> 00:17:14,329
can see that almost half of them even

392
00:17:12,020 --> 00:17:16,670
have negative correlations and an

393
00:17:14,329 --> 00:17:19,609
overall correlation of only 0.36 on

394
00:17:16,670 --> 00:17:22,460
average shows that spec CPU benchmarks

395
00:17:19,609 --> 00:17:26,750
might consist largely of code features

396
00:17:22,460 --> 00:17:29,390
unrelated to self I over has so we're

397
00:17:26,750 --> 00:17:31,910
now saying that CPU benchmarks are not

398
00:17:29,390 --> 00:17:34,970
predictive of real world over has but if

399
00:17:31,910 --> 00:17:37,640
we rely primarily on spec CPU benchmark

400
00:17:34,970 --> 00:17:40,340
over has to assess performance of CFI

401
00:17:37,640 --> 00:17:42,590
then we might be getting misleading

402
00:17:40,340 --> 00:17:45,260
results because lots of those programs

403
00:17:42,590 --> 00:17:47,449
don't have features that we know are

404
00:17:45,260 --> 00:17:52,670
present in large programs and that

405
00:17:47,450 --> 00:17:53,840
significantly affects efi over has ok to

406
00:17:52,670 --> 00:17:56,900
conclude my talk

407
00:17:53,840 --> 00:17:59,449
we found out that compatibility of CFI

408
00:17:56,900 --> 00:18:01,790
solutions are understudied this is

409
00:17:59,450 --> 00:18:04,070
because of the difficulty of figuring

410
00:18:01,790 --> 00:18:06,020
out various compatibility problems

411
00:18:04,070 --> 00:18:08,720
hiding in large complicated software

412
00:18:06,020 --> 00:18:10,820
products and we also found out that CFI

413
00:18:08,720 --> 00:18:13,580
implementations are commonly evaluated

414
00:18:10,820 --> 00:18:16,460
in terms of performance and security and

415
00:18:13,580 --> 00:18:19,610
CPU benchmarks are widely adopted for

416
00:18:16,460 --> 00:18:21,860
CFI evaluation we therefore propose to

417
00:18:19,610 --> 00:18:24,439
confirm that covers they set up 20

418
00:18:21,860 --> 00:18:26,870
widespread classes of CFI compatible

419
00:18:24,440 --> 00:18:29,720
compatibility problems and confirmed is

420
00:18:26,870 --> 00:18:32,929
a first testing switch that is designed

421
00:18:29,720 --> 00:18:35,600
specifically for CFI testing then we use

422
00:18:32,930 --> 00:18:38,270
confirm to reevaluated 12 publicly

423
00:18:35,600 --> 00:18:40,580
available CFI implementations in the end

424
00:18:38,270 --> 00:18:44,600
we did a correlation analysis between

425
00:18:40,580 --> 00:18:46,429
spec CPU benchmark suite and confirm so

426
00:18:44,600 --> 00:18:48,790
again confirmed is publicly available

427
00:18:46,430 --> 00:19:00,320
online please check it out

428
00:18:48,790 --> 00:19:02,360
thank you hi justin campus nyu first off

429
00:19:00,320 --> 00:19:05,600
I want to say I really like this work I

430
00:19:02,360 --> 00:19:07,040
think this is uncomfortable work for a

431
00:19:05,600 --> 00:19:09,350
lot of people who published in this

432
00:19:07,040 --> 00:19:11,960
space I think what is very necessary

433
00:19:09,350 --> 00:19:16,310
work that they probably should have done

434
00:19:11,960 --> 00:19:17,900
themselves to be honest so have any of

435
00:19:16,310 --> 00:19:21,460
the systems that you studied been

436
00:19:17,900 --> 00:19:24,500
deployed today in their papers present

437
00:19:21,460 --> 00:19:27,230
any information about practical

438
00:19:24,500 --> 00:19:29,900
deployment or use outside of just

439
00:19:27,230 --> 00:19:34,640
testing them spec benchmarks and other

440
00:19:29,900 --> 00:19:36,620
toy examples I'm sorry Casey did any of

441
00:19:34,640 --> 00:19:38,510
the papers that you looked at have

442
00:19:36,620 --> 00:19:41,810
results where they talked about a

443
00:19:38,510 --> 00:19:46,160
practical real-world use of their CFI

444
00:19:41,810 --> 00:19:49,040
system at scale by actual customers sure

445
00:19:46,160 --> 00:19:52,400
there are some some lovely papers we do

446
00:19:49,040 --> 00:19:55,129
a very great job like I think one of

447
00:19:52,400 --> 00:19:58,880
this lockdown and some other works that

448
00:19:55,130 --> 00:20:02,360
reports lots of experimental results for

449
00:19:58,880 --> 00:20:04,310
large complicated software products so

450
00:20:02,360 --> 00:20:07,330
but is this a production use because I'm

451
00:20:04,310 --> 00:20:09,129
curious if a large company use

452
00:20:07,330 --> 00:20:11,949
listen production part of what I'm

453
00:20:09,130 --> 00:20:13,510
taking away from your talk is that it

454
00:20:11,950 --> 00:20:15,010
feels like they would have found a lot

455
00:20:13,510 --> 00:20:18,430
of these issues that you're describing

456
00:20:15,010 --> 00:20:23,010
is that the case or am i misinterpreting

457
00:20:18,430 --> 00:20:26,560
your message I think so yeah thank you

458
00:20:23,010 --> 00:20:28,510
Aditya from Minnesota so I was looking

459
00:20:26,560 --> 00:20:31,090
at one of your slides which was

460
00:20:28,510 --> 00:20:34,750
mentioning exploiting the doctor window

461
00:20:31,090 --> 00:20:37,540
for cross-type smashing I just like

462
00:20:34,750 --> 00:20:40,990
question on how this exploit works like

463
00:20:37,540 --> 00:20:44,710
was this a valid exploit no I think you

464
00:20:40,990 --> 00:20:47,110
a bit further yeah that's like you so I

465
00:20:44,710 --> 00:20:49,210
I just want to know how is this a

466
00:20:47,110 --> 00:20:50,860
practical exploit or is this just a

467
00:20:49,210 --> 00:20:54,010
proof of concept that you're suggesting

468
00:20:50,860 --> 00:20:58,689
that this exploit might exist we applied

469
00:20:54,010 --> 00:21:03,160
this one to the 12 CFI works and the

470
00:20:58,690 --> 00:21:07,060
actual broke every of all of them so

471
00:21:03,160 --> 00:21:10,030
this particular idea would be used to

472
00:21:07,060 --> 00:21:12,970
any software would you suggest or does

473
00:21:10,030 --> 00:21:15,250
this require any specific other any

474
00:21:12,970 --> 00:21:18,250
specific prereq that this word this

475
00:21:15,250 --> 00:21:21,880
attack would work on they talk to window

476
00:21:18,250 --> 00:21:25,000
exploiting the talk to window so my

477
00:21:21,880 --> 00:21:27,630
question is this since you said you were

478
00:21:25,000 --> 00:21:32,710
you tried this exploit on 12 different

479
00:21:27,630 --> 00:21:35,350
exploits or twelve different entities so

480
00:21:32,710 --> 00:21:38,290
my question is this how how can you

481
00:21:35,350 --> 00:21:41,830
generalize this idea of talk to window

482
00:21:38,290 --> 00:21:42,750
that's also doing a cross threaded stack

483
00:21:41,830 --> 00:21:47,290
smashing

484
00:21:42,750 --> 00:21:50,530
so how is this idea scalable to any

485
00:21:47,290 --> 00:21:53,670
other potential talk to window so it's

486
00:21:50,530 --> 00:21:56,970
just we just want to show that

487
00:21:53,670 --> 00:22:00,760
monitoring is a problem for a I find

488
00:21:56,970 --> 00:22:05,710
enforcement so this is kind of a proof

489
00:22:00,760 --> 00:22:09,340
of concept at hack okay thank you drew

490
00:22:05,710 --> 00:22:12,640
Dean Amazon okay can ask for some more

491
00:22:09,340 --> 00:22:15,100
specifics on your spec benchmarking how

492
00:22:12,640 --> 00:22:16,240
many iterations of the benchmarks were

493
00:22:15,100 --> 00:22:18,399
you running on him

494
00:22:16,240 --> 00:22:23,620
chain with one socket or more than one

495
00:22:18,400 --> 00:22:26,260
socket and was ASLR turned on you're

496
00:22:23,620 --> 00:22:30,459
talking about confirm or aspects if you

497
00:22:26,260 --> 00:22:33,750
have been tomorrow's yeah what this one

498
00:22:30,460 --> 00:22:37,870
I mean yes I believe so

499
00:22:33,750 --> 00:22:40,809
so what is it then the the details of

500
00:22:37,870 --> 00:22:44,199
how you ran the spec benchmarks like how

501
00:22:40,809 --> 00:22:46,780
many iterations were you running so we

502
00:22:44,200 --> 00:22:49,450
try to let each program running for

503
00:22:46,780 --> 00:22:52,710
around 5 minutes that is it is

504
00:22:49,450 --> 00:22:59,290
configurable you feel look at our github

505
00:22:52,710 --> 00:23:01,790
okay thank you thank you alright let's

506
00:22:59,290 --> 00:23:05,659
thank you again thank you

507
00:23:01,790 --> 00:23:05,659
[Applause]

