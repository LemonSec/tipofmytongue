1
00:00:11,140 --> 00:00:15,380
so hi i'm charlie rice from the chrome

2
00:00:13,730 --> 00:00:17,779
security team and i'm going to be

3
00:00:15,380 --> 00:00:21,260
talking today about our launch of site

4
00:00:17,779 --> 00:00:23,420
isolation in the chrome web browser to

5
00:00:21,260 --> 00:00:27,109
better align the browser security model

6
00:00:23,420 --> 00:00:28,580
with OS process boundaries and our goal

7
00:00:27,109 --> 00:00:30,380
in this work was really to provide a

8
00:00:28,580 --> 00:00:32,150
second line of defense against

9
00:00:30,380 --> 00:00:34,190
vulnerabilities in the rendering engine

10
00:00:32,150 --> 00:00:35,750
which were common and something that we

11
00:00:34,190 --> 00:00:38,480
were concerned about leaking cross-site

12
00:00:35,750 --> 00:00:40,040
data to website attackers but it turned

13
00:00:38,480 --> 00:00:41,989
out that this was also important work

14
00:00:40,040 --> 00:00:44,329
for defending against specter and

15
00:00:41,989 --> 00:00:47,120
transient execution attacks which also

16
00:00:44,329 --> 00:00:49,250
work within the browser so I'll talk

17
00:00:47,120 --> 00:00:51,620
about how we ship site isolation to all

18
00:00:49,250 --> 00:00:54,739
chrome desktop users that's on Windows

19
00:00:51,620 --> 00:00:57,589
Mac Linux and Chrome OS as a mitigation

20
00:00:54,739 --> 00:00:59,419
for these types of attacks to do this we

21
00:00:57,590 --> 00:01:01,640
needed overcome many challenges beyond

22
00:00:59,420 --> 00:01:04,940
prior research browsers like gazelle and

23
00:01:01,640 --> 00:01:06,500
ope to make this practical to deploy in

24
00:01:04,940 --> 00:01:08,690
particular we had to make trade-offs to

25
00:01:06,500 --> 00:01:10,310
support compatibility with the full web

26
00:01:08,690 --> 00:01:12,649
platform to launch this in an actual

27
00:01:10,310 --> 00:01:16,220
browser and to make it perform it enough

28
00:01:12,649 --> 00:01:17,810
to for launching as a result there were

29
00:01:16,220 --> 00:01:19,429
some limitations in the security

30
00:01:17,810 --> 00:01:22,280
protections we find that we have

31
00:01:19,430 --> 00:01:24,140
opportunities to improve those and that

32
00:01:22,280 --> 00:01:25,909
I'll show that this offers the best path

33
00:01:24,140 --> 00:01:30,380
to protection against these types of

34
00:01:25,909 --> 00:01:33,350
attacks so the motivation for this work

35
00:01:30,380 --> 00:01:35,869
really goes back about a decade to when

36
00:01:33,350 --> 00:01:37,789
we were first making web browsers

37
00:01:35,869 --> 00:01:40,009
multi-process and splitting out the

38
00:01:37,790 --> 00:01:42,500
browser process into a privileged

39
00:01:40,009 --> 00:01:44,329
process and a separate sandbox renderer

40
00:01:42,500 --> 00:01:46,700
process where we could put most of the

41
00:01:44,329 --> 00:01:48,020
attack surface the goal here of course

42
00:01:46,700 --> 00:01:49,880
was to make it so that even if an

43
00:01:48,020 --> 00:01:51,770
attacker has a security bug and the

44
00:01:49,880 --> 00:01:54,020
browser that they know about it's hard

45
00:01:51,770 --> 00:01:56,439
to get out of the sandbox and install

46
00:01:54,020 --> 00:01:59,329
malware or get access to local resources

47
00:01:56,439 --> 00:02:00,979
now we knew even then that we wanted to

48
00:01:59,329 --> 00:02:02,539
do more than that that there's a lot of

49
00:02:00,979 --> 00:02:04,759
sensitive data that can still be within

50
00:02:02,540 --> 00:02:07,430
that renderer process that we want to

51
00:02:04,759 --> 00:02:10,459
protect and in particular it's very easy

52
00:02:07,430 --> 00:02:13,880
for an attackers website to get victim

53
00:02:10,459 --> 00:02:17,209
data into the same process they can load

54
00:02:13,880 --> 00:02:18,890
a cross-site iframe or pop up to bring

55
00:02:17,209 --> 00:02:21,290
potentially credential information into

56
00:02:18,890 --> 00:02:22,579
the same renderer process so we wanted

57
00:02:21,290 --> 00:02:24,060
to provide a second line of defense

58
00:02:22,580 --> 00:02:26,409
against those types of it

59
00:02:24,060 --> 00:02:29,920
so in our work we were trying to defend

60
00:02:26,409 --> 00:02:32,349
against two new attacker types the first

61
00:02:29,920 --> 00:02:34,030
is a render exploit attacker that knows

62
00:02:32,349 --> 00:02:37,179
of a bug in the browser and wants to get

63
00:02:34,030 --> 00:02:39,040
access to this cross-site data so this

64
00:02:37,180 --> 00:02:41,230
type of attacker is very powerful they

65
00:02:39,040 --> 00:02:43,390
can basically run arbitrary code within

66
00:02:41,230 --> 00:02:44,319
the renderer process they can send

67
00:02:43,390 --> 00:02:46,690
spoofed

68
00:02:44,319 --> 00:02:48,310
IPC messages to the browser process to

69
00:02:46,690 --> 00:02:51,099
lie and try and ask for more data and

70
00:02:48,310 --> 00:02:53,049
they want access to the users other

71
00:02:51,099 --> 00:02:54,970
accounts on different websites and so on

72
00:02:53,049 --> 00:02:58,060
so we would a second line of defense

73
00:02:54,970 --> 00:02:59,349
against this type of attacker but

74
00:02:58,060 --> 00:03:01,810
there's a second type of attacker that

75
00:02:59,349 --> 00:03:03,988
proved relevant as well and when Specter

76
00:03:01,810 --> 00:03:07,510
and other transient execution attacks

77
00:03:03,989 --> 00:03:09,700
came out we found out that these also

78
00:03:07,510 --> 00:03:11,140
work from JavaScript code or web

79
00:03:09,700 --> 00:03:13,238
assembly code that can run within the

80
00:03:11,140 --> 00:03:17,250
browser itself and so you can basically

81
00:03:13,239 --> 00:03:20,590
run side-channel attacks on CPU state

82
00:03:17,250 --> 00:03:22,750
within the render process and use that

83
00:03:20,590 --> 00:03:24,970
to access memory addresses within the

84
00:03:22,750 --> 00:03:27,040
process and that may include data like

85
00:03:24,970 --> 00:03:29,019
things that are in cross-site iframes or

86
00:03:27,040 --> 00:03:31,510
other pages in the render arbitrary data

87
00:03:29,019 --> 00:03:33,400
in there now this is a qualitatively

88
00:03:31,510 --> 00:03:35,500
different attacker than the render

89
00:03:33,400 --> 00:03:38,019
exploit one it's not as powerful

90
00:03:35,500 --> 00:03:40,359
you can't run arbitrary code and you

91
00:03:38,019 --> 00:03:43,239
can't send IPC messages that lie to the

92
00:03:40,359 --> 00:03:44,889
browser process but it is one that

93
00:03:43,239 --> 00:03:46,870
doesn't depend on any bugs in the

94
00:03:44,889 --> 00:03:48,549
browser that you can have a completely

95
00:03:46,870 --> 00:03:51,519
correct implementation and this attack

96
00:03:48,549 --> 00:03:53,230
will still be possible and put the same

97
00:03:51,519 --> 00:03:53,980
origin policy at risk so it's very

98
00:03:53,230 --> 00:03:56,819
important to have an effective

99
00:03:53,980 --> 00:03:59,410
mitigation for both types of attacker

100
00:03:56,819 --> 00:04:01,060
so side isolation is an architecture

101
00:03:59,410 --> 00:04:03,400
that tries to make it possible to

102
00:04:01,060 --> 00:04:05,049
mitigate both types of attacker by

103
00:04:03,400 --> 00:04:08,470
putting data that's worth stealing out

104
00:04:05,049 --> 00:04:10,870
of reach at a high level the

105
00:04:08,470 --> 00:04:14,739
architecture consists of two main

106
00:04:10,870 --> 00:04:16,599
concepts one is providing render

107
00:04:14,739 --> 00:04:18,579
processes that can be dedicated to a

108
00:04:16,599 --> 00:04:19,930
single site principle so all the

109
00:04:18,579 --> 00:04:22,240
documents and workers within that

110
00:04:19,930 --> 00:04:24,130
process are limited to that particular

111
00:04:22,240 --> 00:04:27,880
site even in the case of things like

112
00:04:24,130 --> 00:04:30,219
iframes and second filtering what sort

113
00:04:27,880 --> 00:04:32,650
of information is allowed into that

114
00:04:30,220 --> 00:04:34,060
process especially from the network and

115
00:04:32,650 --> 00:04:36,190
this is challenging for compatibility

116
00:04:34,060 --> 00:04:36,630
reasons because web pages can't access

117
00:04:36,190 --> 00:04:40,740
lots of

118
00:04:36,630 --> 00:04:42,510
I did so I'll go into just parts of this

119
00:04:40,740 --> 00:04:45,150
architecture to give you a sense for

120
00:04:42,510 --> 00:04:47,280
what was involved out of process iframes

121
00:04:45,150 --> 00:04:50,280
was one of the largest amounts of effort

122
00:04:47,280 --> 00:04:52,109
that went into this project to put this

123
00:04:50,280 --> 00:04:54,150
in context you can think about the move

124
00:04:52,110 --> 00:04:55,830
to a multi-process browser is basically

125
00:04:54,150 --> 00:04:57,780
taking an existing off-the-shelf

126
00:04:55,830 --> 00:05:00,090
rendering engine which is WebKit in our

127
00:04:57,780 --> 00:05:01,859
case and more or less running multiple

128
00:05:00,090 --> 00:05:04,380
copies of it side by side in different

129
00:05:01,860 --> 00:05:06,210
tabs there were more changes needed than

130
00:05:04,380 --> 00:05:08,520
just that but it's not it wasn't too

131
00:05:06,210 --> 00:05:09,840
disruptive for out of process iframes

132
00:05:08,520 --> 00:05:11,549
it's a very different story you

133
00:05:09,840 --> 00:05:13,919
basically have to decompose everything

134
00:05:11,550 --> 00:05:15,720
in the rendering engine to work at a

135
00:05:13,920 --> 00:05:17,970
frame granularity and this means that

136
00:05:15,720 --> 00:05:19,560
paints need to be composited across

137
00:05:17,970 --> 00:05:21,420
multiple processes you need to know

138
00:05:19,560 --> 00:05:23,250
where to send input events you need

139
00:05:21,420 --> 00:05:24,930
representations of frames that live in

140
00:05:23,250 --> 00:05:27,660
other processes you can send messages to

141
00:05:24,930 --> 00:05:30,780
them and then there's an enormous long

142
00:05:27,660 --> 00:05:32,850
tail of features that all assumed that

143
00:05:30,780 --> 00:05:35,099
the all the frames of a page were in

144
00:05:32,850 --> 00:05:36,780
long process so things like find in page

145
00:05:35,100 --> 00:05:39,390
where you're just searching for a string

146
00:05:36,780 --> 00:05:41,159
in the Dom suddenly now become

147
00:05:39,390 --> 00:05:42,780
effectively a distributed system where

148
00:05:41,160 --> 00:05:44,040
you're collecting partial results and

149
00:05:42,780 --> 00:05:45,659
they may come back slowly or in a

150
00:05:44,040 --> 00:05:48,780
different order or not at all and you

151
00:05:45,660 --> 00:05:50,520
can't leak results to other processes so

152
00:05:48,780 --> 00:05:52,770
there were a lot of changes we needed to

153
00:05:50,520 --> 00:05:54,000
make to support the entire web platform

154
00:05:52,770 --> 00:05:56,130
and all the features that were involved

155
00:05:54,000 --> 00:05:59,760
so this was probably the bulk of the

156
00:05:56,130 --> 00:06:01,350
work and most of the over 400,000 lines

157
00:05:59,760 --> 00:06:06,180
of code that we needed update to make

158
00:06:01,350 --> 00:06:07,260
side isolation possible but we faced

159
00:06:06,180 --> 00:06:10,260
different types of compatibility

160
00:06:07,260 --> 00:06:12,390
challenges as well so for filtering data

161
00:06:10,260 --> 00:06:13,710
out of the render process we have

162
00:06:12,390 --> 00:06:16,500
something called cross origin read

163
00:06:13,710 --> 00:06:20,310
blocking that we need to allow through

164
00:06:16,500 --> 00:06:21,810
images JavaScript files CSS from any web

165
00:06:20,310 --> 00:06:24,300
site because that's allowed by the web

166
00:06:21,810 --> 00:06:26,340
platform but we don't want an attacker

167
00:06:24,300 --> 00:06:28,230
to say oh I'm asking for this image

168
00:06:26,340 --> 00:06:30,690
which is actually a secret HTML file

169
00:06:28,230 --> 00:06:32,430
from another website and have that come

170
00:06:30,690 --> 00:06:34,650
into the render it wouldn't render as an

171
00:06:32,430 --> 00:06:36,120
image but you still have access to it

172
00:06:34,650 --> 00:06:39,060
from a specter attacker from a render

173
00:06:36,120 --> 00:06:41,910
exploit so we can look at types like

174
00:06:39,060 --> 00:06:43,410
HTML and XML and JSON that are most

175
00:06:41,910 --> 00:06:44,550
likely to have sensitive data in them

176
00:06:43,410 --> 00:06:46,410
and that won't work in these sub

177
00:06:44,550 --> 00:06:48,300
resource types and try and keep them out

178
00:06:46,410 --> 00:06:50,580
of the process but to do this in a

179
00:06:48,300 --> 00:06:51,900
compatible way we have to deal with

180
00:06:50,580 --> 00:06:54,180
out of the mess that's out there on the

181
00:06:51,900 --> 00:06:56,549
web as well if you just looked at

182
00:06:54,180 --> 00:06:58,800
content type you'd end up blocking a lot

183
00:06:56,550 --> 00:07:01,680
of legitimate JavaScript files that just

184
00:06:58,800 --> 00:07:04,110
happen to be labeled as text HTML and we

185
00:07:01,680 --> 00:07:06,360
want to block HTML files so but we can't

186
00:07:04,110 --> 00:07:07,199
block that file we can't use just

187
00:07:06,360 --> 00:07:09,150
off-the-shelf

188
00:07:07,199 --> 00:07:11,189
content sniffing either because

189
00:07:09,150 --> 00:07:12,870
something that starts with an HTML

190
00:07:11,189 --> 00:07:14,879
comment it might look like hTML is

191
00:07:12,870 --> 00:07:18,810
actually valid for the JavaScript engine

192
00:07:14,879 --> 00:07:20,789
as well so we have to use custom

193
00:07:18,810 --> 00:07:23,280
sniffing logic to confirm that something

194
00:07:20,789 --> 00:07:25,318
is actually HTML XML or JSON before we

195
00:07:23,280 --> 00:07:28,469
block it we've done a lot of work to try

196
00:07:25,319 --> 00:07:34,889
and protect as much as possible while

197
00:07:28,469 --> 00:07:36,389
still preserving compatibility so having

198
00:07:34,889 --> 00:07:39,030
dedicated processes in this sort of

199
00:07:36,389 --> 00:07:40,860
filtering is sufficient to deal with the

200
00:07:39,030 --> 00:07:42,929
memory disclosure attackers where you

201
00:07:40,860 --> 00:07:44,550
can't lie to the browser process but for

202
00:07:42,930 --> 00:07:48,029
render exploits you also need to catch

203
00:07:44,550 --> 00:07:49,620
Melissa's IPC messages which might be

204
00:07:48,029 --> 00:07:52,469
asking for more data than that render

205
00:07:49,620 --> 00:07:55,050
process is allowed to access so we have

206
00:07:52,469 --> 00:07:56,849
a notion in the browser process of what

207
00:07:55,050 --> 00:07:59,490
site a process is locked to and if we

208
00:07:56,849 --> 00:08:01,650
see it asking for things from other site

209
00:07:59,490 --> 00:08:03,120
that's not allowed to we know that

210
00:08:01,650 --> 00:08:05,190
normally the security text within the

211
00:08:03,120 --> 00:08:07,020
render would have caught that but we can

212
00:08:05,190 --> 00:08:08,520
have a second line of defense there and

213
00:08:07,020 --> 00:08:12,299
terminate a misbehaving render process

214
00:08:08,520 --> 00:08:14,729
before it does anything more so to

215
00:08:12,300 --> 00:08:16,110
evaluate how well this architecture can

216
00:08:14,729 --> 00:08:18,449
be deployed and used against these

217
00:08:16,110 --> 00:08:20,009
attacks we wanted to look at what sort

218
00:08:18,449 --> 00:08:22,379
of coverage it provides and what

219
00:08:20,009 --> 00:08:26,099
limitations it faces how we can address

220
00:08:22,379 --> 00:08:30,690
those limitations and how practical is

221
00:08:26,099 --> 00:08:33,838
this to deploy to actual users so for

222
00:08:30,690 --> 00:08:35,549
render exploits I first want to call out

223
00:08:33,839 --> 00:08:38,490
that this is a problem that matters in

224
00:08:35,549 --> 00:08:40,828
practice that we looked at Universal

225
00:08:38,490 --> 00:08:42,209
cross-site scripting like bugs which are

226
00:08:40,828 --> 00:08:44,039
high severity bugs that allow one

227
00:08:42,208 --> 00:08:47,640
website to access data from other

228
00:08:44,039 --> 00:08:49,860
websites from 2014 to 2018 we had ninety

229
00:08:47,640 --> 00:08:52,319
four of these in chrome over that period

230
00:08:49,860 --> 00:08:53,820
so that's about 20 a year which is

231
00:08:52,320 --> 00:08:57,300
something that we really want to have a

232
00:08:53,820 --> 00:08:58,440
second line of defense against in terms

233
00:08:57,300 --> 00:09:00,180
of the coverage that we're getting from

234
00:08:58,440 --> 00:09:02,310
this we looked at it from the

235
00:09:00,180 --> 00:09:04,529
perspective of a web developer who in

236
00:09:02,310 --> 00:09:07,050
the past had to throw up their arms

237
00:09:04,529 --> 00:09:08,970
against any attacker that had a bug in

238
00:09:07,050 --> 00:09:10,800
the browser that if they could exploit

239
00:09:08,970 --> 00:09:13,050
the rendering engine then any sort of

240
00:09:10,800 --> 00:09:15,120
authentication or crosswords and

241
00:09:13,050 --> 00:09:16,769
messaging just had no guarantees before

242
00:09:15,120 --> 00:09:18,990
and they've just been transparently

243
00:09:16,769 --> 00:09:20,819
upgraded to be robust against those

244
00:09:18,990 --> 00:09:23,420
attackers for things like authentication

245
00:09:20,819 --> 00:09:25,290
with cookies and save passwords

246
00:09:23,420 --> 00:09:27,779
confidential data that's protected by

247
00:09:25,290 --> 00:09:29,610
cross origin read blocking we can verify

248
00:09:27,779 --> 00:09:32,069
the source and target origins of post

249
00:09:29,610 --> 00:09:34,110
message and I clicked jackin like

250
00:09:32,069 --> 00:09:36,089
x-frame options and CSP frame ancestors

251
00:09:34,110 --> 00:09:37,470
and use of storage and permissions these

252
00:09:36,089 --> 00:09:39,089
are all things that the browser process

253
00:09:37,470 --> 00:09:40,800
can now enforce even in the presence of

254
00:09:39,089 --> 00:09:42,209
a compromised render so we're really

255
00:09:40,800 --> 00:09:45,120
excited about these sort of defenses

256
00:09:42,209 --> 00:09:48,420
that are now available to websites on

257
00:09:45,120 --> 00:09:50,009
the transient execution attack side we

258
00:09:48,420 --> 00:09:52,589
want to compare against other mitigation

259
00:09:50,009 --> 00:09:54,600
strategies that were considered by

260
00:09:52,589 --> 00:09:57,990
browsers so when these were first

261
00:09:54,600 --> 00:10:00,120
disclosed browsers started by removing

262
00:09:57,990 --> 00:10:01,170
precise timers from the platform they're

263
00:10:00,120 --> 00:10:04,259
trying to make things like performance

264
00:10:01,170 --> 00:10:06,990
dot now less granular and removing

265
00:10:04,259 --> 00:10:08,899
features that could be used as implicit

266
00:10:06,990 --> 00:10:10,769
timers like shared array buffer

267
00:10:08,899 --> 00:10:12,240
unfortunately this proved not to be

268
00:10:10,769 --> 00:10:14,220
effective against the attacks we saw

269
00:10:12,240 --> 00:10:15,660
many proofs of concept where even

270
00:10:14,220 --> 00:10:18,689
extremely coarse timers could be

271
00:10:15,660 --> 00:10:21,959
amplified to still perform the attack

272
00:10:18,689 --> 00:10:24,149
just at a slightly reduced bandwidth and

273
00:10:21,959 --> 00:10:26,489
at the same time this sort of change to

274
00:10:24,149 --> 00:10:28,709
the web platform is harmful to web

275
00:10:26,490 --> 00:10:30,120
developers that they want to use precise

276
00:10:28,709 --> 00:10:32,069
timers they want to use features like

277
00:10:30,120 --> 00:10:34,110
shared array buffers and web assembly

278
00:10:32,069 --> 00:10:35,670
threads to build powerful applications

279
00:10:34,110 --> 00:10:37,410
so we don't view this as a good

280
00:10:35,670 --> 00:10:41,939
long-term mitigation to this sort of

281
00:10:37,410 --> 00:10:43,980
attack second browser vendors looked at

282
00:10:41,939 --> 00:10:47,129
doing compiler and runtime mitigations

283
00:10:43,980 --> 00:10:49,500
for transient execution attacks to

284
00:10:47,129 --> 00:10:52,199
basically say maybe we'll make it hard

285
00:10:49,500 --> 00:10:54,929
to express this attack and to have the

286
00:10:52,199 --> 00:10:56,519
JavaScript the JIT compiler output the

287
00:10:54,929 --> 00:10:59,699
patterns of code necessary to do this

288
00:10:56,519 --> 00:11:01,230
attack this unfortunately turned out to

289
00:10:59,699 --> 00:11:02,758
not be effective either there are a lot

290
00:11:01,230 --> 00:11:04,379
of variants of taranti and execution

291
00:11:02,759 --> 00:11:06,059
attacks that are very difficult to

292
00:11:04,379 --> 00:11:07,439
mitigate in this way such as specter

293
00:11:06,059 --> 00:11:09,389
variant for with store to load

294
00:11:07,439 --> 00:11:11,790
forwarding there's a great paper by the

295
00:11:09,389 --> 00:11:14,069
v8 team called specter is here to stay

296
00:11:11,790 --> 00:11:16,110
which explains in a much deeper sense of

297
00:11:14,069 --> 00:11:18,099
why we don't think this is a practical

298
00:11:16,110 --> 00:11:21,020
way forward

299
00:11:18,100 --> 00:11:22,820
so that leaves a strategy of trying to

300
00:11:21,020 --> 00:11:24,410
keep the data out of reach of an

301
00:11:22,820 --> 00:11:27,290
attacker which is what we were trying to

302
00:11:24,410 --> 00:11:29,360
do a side isolation anyway so this is

303
00:11:27,290 --> 00:11:30,589
effective against same process variance

304
00:11:29,360 --> 00:11:32,690
for data that we can keep out of the

305
00:11:30,590 --> 00:11:34,370
process it's worth noting that transient

306
00:11:32,690 --> 00:11:37,250
execution attacks can sometimes have

307
00:11:34,370 --> 00:11:39,530
cross process or kernel implications and

308
00:11:37,250 --> 00:11:41,630
for that we need to combine with OS and

309
00:11:39,530 --> 00:11:44,900
hardware level mitigations to protect

310
00:11:41,630 --> 00:11:46,970
those cases but it is still important to

311
00:11:44,900 --> 00:11:48,800
have something like site isolation for

312
00:11:46,970 --> 00:11:50,870
the same process variant because OS and

313
00:11:48,800 --> 00:11:52,400
hardware don't have any visibility into

314
00:11:50,870 --> 00:11:53,990
the abstractions within a browser about

315
00:11:52,400 --> 00:11:55,310
where the security domains are so you

316
00:11:53,990 --> 00:11:58,790
really need both of these types of

317
00:11:55,310 --> 00:12:01,400
mitigations so that brings me to some of

318
00:11:58,790 --> 00:12:04,189
the limitations that we needed to

319
00:12:01,400 --> 00:12:06,140
address so one I've been talking about

320
00:12:04,190 --> 00:12:07,940
sites here has a definition which is

321
00:12:06,140 --> 00:12:09,590
actually a little more coarse than the

322
00:12:07,940 --> 00:12:12,740
origins that are used in the same origin

323
00:12:09,590 --> 00:12:14,530
policy so a site is a scheme plus

324
00:12:12,740 --> 00:12:17,930
basically a registered domain name

325
00:12:14,530 --> 00:12:19,699
rather than a full scheme host and port

326
00:12:17,930 --> 00:12:20,689
so it would be something like HTTP

327
00:12:19,700 --> 00:12:22,790
Google com

328
00:12:20,690 --> 00:12:25,040
and this is due to features on the web

329
00:12:22,790 --> 00:12:27,860
like document domain where web pages can

330
00:12:25,040 --> 00:12:30,079
change their origin at runtime within

331
00:12:27,860 --> 00:12:32,300
the boundary of a site this is a feature

332
00:12:30,080 --> 00:12:34,010
that we would love to deprecated from

333
00:12:32,300 --> 00:12:37,459
the web if we can move enough websites

334
00:12:34,010 --> 00:12:39,470
in that direction in the meantime we're

335
00:12:37,460 --> 00:12:41,780
trying to provide opt in origin level

336
00:12:39,470 --> 00:12:43,880
isolation for sites that don't want to

337
00:12:41,780 --> 00:12:45,709
use this document dot domain feature and

338
00:12:43,880 --> 00:12:50,660
that want to isolate a particular origin

339
00:12:45,710 --> 00:12:52,700
from the rest of their site second there

340
00:12:50,660 --> 00:12:54,589
are many types of data that that are not

341
00:12:52,700 --> 00:12:57,260
yet protected by Korb and that we want

342
00:12:54,589 --> 00:12:59,510
to keep out of the renderer process so

343
00:12:57,260 --> 00:13:01,850
we have a few directions forward here

344
00:12:59,510 --> 00:13:04,580
one there is a opt-in header that sites

345
00:13:01,850 --> 00:13:08,390
can adopt on any type of data called

346
00:13:04,580 --> 00:13:10,730
cross-origin resource policy and we're

347
00:13:08,390 --> 00:13:12,830
also working to add more types of core

348
00:13:10,730 --> 00:13:15,020
protected types to the browser for

349
00:13:12,830 --> 00:13:18,470
example we've also included PDFs and

350
00:13:15,020 --> 00:13:20,030
zips and other file formats to try and

351
00:13:18,470 --> 00:13:22,250
protect them so that web developers

352
00:13:20,030 --> 00:13:23,870
don't have to do any work but ultimately

353
00:13:22,250 --> 00:13:26,709
we're looking more towards ecosystem

354
00:13:23,870 --> 00:13:29,209
level changes where we make things like

355
00:13:26,709 --> 00:13:30,880
same site cookies the default and

356
00:13:29,209 --> 00:13:33,640
that'll make it much more

357
00:13:30,880 --> 00:13:36,070
difficult for an attackers webpage to

358
00:13:33,640 --> 00:13:38,140
pull in non-public data into that

359
00:13:36,070 --> 00:13:41,260
process unless they use something like

360
00:13:38,140 --> 00:13:43,150
Korres to use credentials so we're

361
00:13:41,260 --> 00:13:45,250
hopeful for that being a good mechanism

362
00:13:43,150 --> 00:13:49,090
towards keeping sensitive data out of a

363
00:13:45,250 --> 00:13:50,830
rendering process I mentioned cross

364
00:13:49,090 --> 00:13:52,300
processed transient execution attacks

365
00:13:50,830 --> 00:13:53,710
and things that might target the kernel

366
00:13:52,300 --> 00:13:56,709
these are things like micro

367
00:13:53,710 --> 00:13:58,030
architectural data sampling or you may

368
00:13:56,710 --> 00:14:00,700
know as fallout and things like that

369
00:13:58,030 --> 00:14:03,100
where another hyper threat on the same

370
00:14:00,700 --> 00:14:04,960
core might be targeted and in these

371
00:14:03,100 --> 00:14:07,300
cases we need to combine with OS and

372
00:14:04,960 --> 00:14:08,410
hardware level mitigations to ensure

373
00:14:07,300 --> 00:14:12,099
that we have protection against these

374
00:14:08,410 --> 00:14:14,890
attacks and finally this is a launch

375
00:14:12,100 --> 00:14:16,720
that we did on Chrome desktop platforms

376
00:14:14,890 --> 00:14:20,740
and we haven't yet launched it on

377
00:14:16,720 --> 00:14:23,800
Android or on mobile devices so we are

378
00:14:20,740 --> 00:14:26,740
doing work here to try and deal with the

379
00:14:23,800 --> 00:14:29,140
other types of workloads that we face on

380
00:14:26,740 --> 00:14:33,550
those devices to be able to isolate a

381
00:14:29,140 --> 00:14:36,040
subset of sites on Android in terms of

382
00:14:33,550 --> 00:14:38,109
practicality on desktop we had a lot of

383
00:14:36,040 --> 00:14:40,089
concerns about the impact that this

384
00:14:38,110 --> 00:14:42,070
would have then when we looked at how

385
00:14:40,090 --> 00:14:44,440
many render processes chrome users have

386
00:14:42,070 --> 00:14:47,020
in the wild at the 99th percentile

387
00:14:44,440 --> 00:14:52,000
without site isolation they already have

388
00:14:47,020 --> 00:14:53,470
35 processes in chrome with a naive

389
00:14:52,000 --> 00:14:55,210
implementation of site isolation that

390
00:14:53,470 --> 00:14:58,120
could have driven that up to about 80

391
00:14:55,210 --> 00:14:59,440
processes based on the number of tabs in

392
00:14:58,120 --> 00:15:03,550
the number of sites that users had in

393
00:14:59,440 --> 00:15:05,470
those tabs so we were able to do a

394
00:15:03,550 --> 00:15:07,990
number of performance optimizations and

395
00:15:05,470 --> 00:15:10,180
process consolidation things where in

396
00:15:07,990 --> 00:15:11,680
same site cases we can reuse existing

397
00:15:10,180 --> 00:15:14,170
processes while preserving

398
00:15:11,680 --> 00:15:17,650
responsiveness and bring that 80 down to

399
00:15:14,170 --> 00:15:19,360
53 processes at the 99th percentile now

400
00:15:17,650 --> 00:15:21,970
that's still a fairly large increase in

401
00:15:19,360 --> 00:15:23,530
the number of render of processes but we

402
00:15:21,970 --> 00:15:26,320
were happy to see that this did not have

403
00:15:23,530 --> 00:15:28,569
a significant impact on the total memory

404
00:15:26,320 --> 00:15:30,580
use of the browser that these render

405
00:15:28,570 --> 00:15:32,290
processes we have more of them but they

406
00:15:30,580 --> 00:15:34,390
are smaller shorter-lived and less

407
00:15:32,290 --> 00:15:37,510
fragmented now and the total memory

408
00:15:34,390 --> 00:15:39,819
overhead ended up being only 13% of low

409
00:15:37,510 --> 00:15:41,890
percentiles and 9% at high percentiles

410
00:15:39,820 --> 00:15:44,350
so we were really pleasantly surprised

411
00:15:41,890 --> 00:15:48,819
with our ability to ship

412
00:15:44,350 --> 00:15:50,200
to all users so as a result combining

413
00:15:48,820 --> 00:15:52,530
with some of the optimizations we did

414
00:15:50,200 --> 00:15:55,120
for navigation and input event latency

415
00:15:52,530 --> 00:15:56,770
we really saw improved performance there

416
00:15:55,120 --> 00:15:58,960
and in fact in many cases we saw

417
00:15:56,770 --> 00:16:00,579
benefits from the parallelism splitting

418
00:15:58,960 --> 00:16:06,150
up pages and having the mainframe become

419
00:16:00,580 --> 00:16:09,040
more responsive so in conclusion this

420
00:16:06,150 --> 00:16:11,050
defense that we set out to build as a

421
00:16:09,040 --> 00:16:12,939
second line of defense for render

422
00:16:11,050 --> 00:16:14,500
exploits also proved to be very

423
00:16:12,940 --> 00:16:16,090
important for transient execution

424
00:16:14,500 --> 00:16:17,920
attacks which really pose a new threat

425
00:16:16,090 --> 00:16:19,840
in the web threat in the web security

426
00:16:17,920 --> 00:16:22,630
model because they don't require any

427
00:16:19,840 --> 00:16:24,460
bugs in the browser we find that site

428
00:16:22,630 --> 00:16:26,040
isolation offers the best path to

429
00:16:24,460 --> 00:16:28,570
protection against these in the browser

430
00:16:26,040 --> 00:16:31,089
by not leaking data to these types of

431
00:16:28,570 --> 00:16:33,160
attackers we found it was practical to

432
00:16:31,090 --> 00:16:35,830
deploy this to all Chrome desktop users

433
00:16:33,160 --> 00:16:36,939
and we are making progress on protecting

434
00:16:35,830 --> 00:16:39,520
more types of data with this

435
00:16:36,940 --> 00:16:41,050
architecture finally it's worth noting

436
00:16:39,520 --> 00:16:42,610
that this type of architecture change

437
00:16:41,050 --> 00:16:44,349
might be something that other systems

438
00:16:42,610 --> 00:16:46,420
need to consider if they run

439
00:16:44,350 --> 00:16:48,310
untrustworthy code within the same

440
00:16:46,420 --> 00:16:49,780
process of sensitive data that we're

441
00:16:48,310 --> 00:16:52,989
really are facing a different set of

442
00:16:49,780 --> 00:16:55,209
threats now and it's worth addressing

443
00:16:52,990 --> 00:16:58,170
them at the architecture level so thank

444
00:16:55,210 --> 00:16:58,170
you and I'm happy to take questions

445
00:17:01,550 --> 00:17:11,639
thanks charlie you have a few minutes

446
00:17:04,650 --> 00:17:14,490
for questions hi this is not wondering

447
00:17:11,640 --> 00:17:18,540
you're from MSR I didn't understand you

448
00:17:14,490 --> 00:17:21,000
talk how you actually perform the track

449
00:17:18,540 --> 00:17:22,680
for your cross origin data is it done

450
00:17:21,000 --> 00:17:23,310
inside the Honda process how is it done

451
00:17:22,680 --> 00:17:24,900
outside

452
00:17:23,310 --> 00:17:27,089
good question yes so that needs to be

453
00:17:24,900 --> 00:17:29,520
done in the privileged process outside

454
00:17:27,089 --> 00:17:32,429
of the sandbox and for in our case we

455
00:17:29,520 --> 00:17:34,260
have a network service process that can

456
00:17:32,430 --> 00:17:35,610
watch the responses coming in and look

457
00:17:34,260 --> 00:17:37,110
at things like the content type and

458
00:17:35,610 --> 00:17:39,540
what's in the response before allowing

459
00:17:37,110 --> 00:17:44,669
it into the render process okay thank

460
00:17:39,540 --> 00:17:46,470
you hi my name is Bobo from Facebook

461
00:17:44,670 --> 00:17:47,850
great talk thank you so much for it

462
00:17:46,470 --> 00:17:49,890
I was wondering if you could talk more

463
00:17:47,850 --> 00:17:51,870
about the performance improvements that

464
00:17:49,890 --> 00:17:53,100
you made while you were optimizing for

465
00:17:51,870 --> 00:17:56,310
practical deployability

466
00:17:53,100 --> 00:17:57,929
and what kinds of and you mentioned a

467
00:17:56,310 --> 00:17:59,580
lot of different features that web

468
00:17:57,930 --> 00:18:01,140
developers might want to use including

469
00:17:59,580 --> 00:18:02,790
web assembly and other more powerful

470
00:18:01,140 --> 00:18:04,230
things I'm curious where you were

471
00:18:02,790 --> 00:18:06,510
getting the performance winds that you

472
00:18:04,230 --> 00:18:09,210
optimized for good the parallelism sure

473
00:18:06,510 --> 00:18:13,260
so the performance winds that we saw

474
00:18:09,210 --> 00:18:17,220
within the browser were often in cases

475
00:18:13,260 --> 00:18:19,170
where a page had crosshead iframes maybe

476
00:18:17,220 --> 00:18:20,700
there were ads or things that might slow

477
00:18:19,170 --> 00:18:23,250
down the responsiveness of the the

478
00:18:20,700 --> 00:18:25,140
top-level page the other optimizations

479
00:18:23,250 --> 00:18:27,420
that we added within the browser to make

480
00:18:25,140 --> 00:18:29,310
this feasible to deploy there's many in

481
00:18:27,420 --> 00:18:31,290
the paper but one example is having a

482
00:18:29,310 --> 00:18:33,720
spare renderer process that we carefully

483
00:18:31,290 --> 00:18:35,909
managed and stopped using as memory

484
00:18:33,720 --> 00:18:37,440
overhead gets high but it means that

485
00:18:35,910 --> 00:18:38,910
there's less latency on a cross

486
00:18:37,440 --> 00:18:40,680
processed navigation which is much more

487
00:18:38,910 --> 00:18:44,970
common in this architecture very cool

488
00:18:40,680 --> 00:18:48,270
thanks thanks I thank you for the talk

489
00:18:44,970 --> 00:18:51,420
I'm cheating from my ATM address so if

490
00:18:48,270 --> 00:18:54,600
there's a webpage that is pointing lee

491
00:18:51,420 --> 00:18:58,440
asking for multiple origins something

492
00:18:54,600 --> 00:19:00,780
like a DDoS worried it's trying to

493
00:18:58,440 --> 00:19:02,580
impact a performance by requesting

494
00:19:00,780 --> 00:19:06,300
multiple origins will it affect the

495
00:19:02,580 --> 00:19:08,129
performance badly yes so pages could try

496
00:19:06,300 --> 00:19:10,950
to have many different costed iframes

497
00:19:08,130 --> 00:19:14,220
across many sites to create a lot of

498
00:19:10,950 --> 00:19:15,220
processes so we want to have defenses in

499
00:19:14,220 --> 00:19:17,590
place to

500
00:19:15,220 --> 00:19:19,330
limit the number and we have some limits

501
00:19:17,590 --> 00:19:20,500
in place for the number of iframes that

502
00:19:19,330 --> 00:19:22,330
are allowed on a page we can certainly

503
00:19:20,500 --> 00:19:22,750
do that for a number of processes and so

504
00:19:22,330 --> 00:19:26,169
on

505
00:19:22,750 --> 00:19:28,350
thank you all right let's thank jolly

506
00:19:26,170 --> 00:19:28,350
again

