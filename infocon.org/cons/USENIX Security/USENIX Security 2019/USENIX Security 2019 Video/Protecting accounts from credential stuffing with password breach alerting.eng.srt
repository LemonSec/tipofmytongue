1
00:00:11,150 --> 00:00:13,850
all right thank you for that

2
00:00:12,260 --> 00:00:14,870
introduction again my name is Kurt

3
00:00:13,850 --> 00:00:16,700
Thomas I'm one of the research

4
00:00:14,870 --> 00:00:17,990
scientists at Google and today I want to

5
00:00:16,700 --> 00:00:19,580
talk about protecting consequent

6
00:00:17,990 --> 00:00:22,759
credential stuffing and after the last

7
00:00:19,580 --> 00:00:24,889
talk that's in any language so the

8
00:00:22,759 --> 00:00:26,900
motivation for our work is that in the

9
00:00:24,890 --> 00:00:28,369
last couple of years billions of stolen

10
00:00:26,900 --> 00:00:31,070
of credentials have become widely

11
00:00:28,369 --> 00:00:33,649
available and this is because dumps at

12
00:00:31,070 --> 00:00:35,870
former sites have become repackaged and

13
00:00:33,649 --> 00:00:37,280
redistributed in underground forums so

14
00:00:35,870 --> 00:00:39,379
if this headline from Wired recently

15
00:00:37,280 --> 00:00:41,000
just back in January where there are two

16
00:00:39,380 --> 00:00:43,929
point two billion passwords that can be

17
00:00:41,000 --> 00:00:45,739
downloaded all in one go right now

18
00:00:43,929 --> 00:00:48,320
challenge here is that this turbulences

19
00:00:45,739 --> 00:00:50,660
hijacker access to accounts if we user

20
00:00:48,320 --> 00:00:53,629
Ellis happens to reuse their password on

21
00:00:50,660 --> 00:00:55,760
say their email site their cloud storage

22
00:00:53,629 --> 00:00:57,890
and their finance site all of those

23
00:00:55,760 --> 00:00:59,839
resources become accessible to the

24
00:00:57,890 --> 00:01:01,850
hijacker be a credential stuffing attack

25
00:00:59,839 --> 00:01:03,858
and this is more than just like a

26
00:01:01,850 --> 00:01:05,300
hypothetical problem we've done some

27
00:01:03,859 --> 00:01:07,310
research in the past where we found that

28
00:01:05,300 --> 00:01:09,200
accounts that have had a password leaked

29
00:01:07,310 --> 00:01:13,190
and a third party breach are 10 times

30
00:01:09,200 --> 00:01:14,900
more likely to go on to be hijacked now

31
00:01:13,190 --> 00:01:16,820
Google we rely on a defense-in-depth

32
00:01:14,900 --> 00:01:19,040
strategy to defend against this type of

33
00:01:16,820 --> 00:01:20,869
attack we use Grist analysis to actually

34
00:01:19,040 --> 00:01:23,570
block hundreds of thousands of automated

35
00:01:20,870 --> 00:01:25,820
hijacking attempts every day and we also

36
00:01:23,570 --> 00:01:28,039
search for password breaches and

37
00:01:25,820 --> 00:01:30,259
proactively reset users that are part of

38
00:01:28,040 --> 00:01:31,670
those breaches but the problem are

39
00:01:30,260 --> 00:01:33,140
actually trying to solve them is how do

40
00:01:31,670 --> 00:01:35,930
you actually protect the long tail of

41
00:01:33,140 --> 00:01:38,270
sites and all of the users across the

42
00:01:35,930 --> 00:01:40,340
web and here it's fundamentally a

43
00:01:38,270 --> 00:01:41,810
problem of an asymmetry of knowledge on

44
00:01:40,340 --> 00:01:43,430
the one hand we have attackers with

45
00:01:41,810 --> 00:01:45,380
access to billions of usernames and

46
00:01:43,430 --> 00:01:47,600
passwords and in the other hand we have

47
00:01:45,380 --> 00:01:49,640
users and identity providers that are

48
00:01:47,600 --> 00:01:51,320
unaware of what's going on and don't

49
00:01:49,640 --> 00:01:54,590
have resources to actually address this

50
00:01:51,320 --> 00:01:57,080
problem now their services right now

51
00:01:54,590 --> 00:01:58,700
that try to bridge this knowledge gap so

52
00:01:57,080 --> 00:02:00,590
have I been pwned as a prominent one

53
00:01:58,700 --> 00:02:01,910
where you can go look up your email and

54
00:02:00,590 --> 00:02:03,740
they'll tell you what breaches that

55
00:02:01,910 --> 00:02:05,750
you've been part of but there's some

56
00:02:03,740 --> 00:02:07,850
challenges here one is a risk of an

57
00:02:05,750 --> 00:02:10,038
accurate advice so if you look up just

58
00:02:07,850 --> 00:02:11,599
your username if you've already happened

59
00:02:10,038 --> 00:02:12,890
to change your password you're still

60
00:02:11,599 --> 00:02:14,720
going to get the same advice that you

61
00:02:12,890 --> 00:02:16,518
were part of a breach and if you are

62
00:02:14,720 --> 00:02:19,129
compromised on site X but happen to

63
00:02:16,519 --> 00:02:20,209
reuse your password on site y&z you're

64
00:02:19,129 --> 00:02:21,890
not going to get any advice that you

65
00:02:20,209 --> 00:02:24,530
need to go and remediate there as well

66
00:02:21,890 --> 00:02:24,829
and also when you use these types of

67
00:02:24,530 --> 00:02:26,540
serve

68
00:02:24,830 --> 00:02:28,100
there's actually a privacy risk of what

69
00:02:26,540 --> 00:02:29,929
data you share with them you may be

70
00:02:28,100 --> 00:02:32,780
giving them your plain text username and

71
00:02:29,930 --> 00:02:34,490
some services just do like sha-1 hash of

72
00:02:32,780 --> 00:02:36,740
your password so all that actually

73
00:02:34,490 --> 00:02:40,340
exposes you risk if the breach alerting

74
00:02:36,740 --> 00:02:41,810
service happens to be an adversary so

75
00:02:40,340 --> 00:02:44,450
today the research that I'm going to

76
00:02:41,810 --> 00:02:46,700
cover is really how can we do better and

77
00:02:44,450 --> 00:02:48,140
build a privacy preserving protocol for

78
00:02:46,700 --> 00:02:50,420
detecting whether you've been in a

79
00:02:48,140 --> 00:02:51,799
breach and go beyond just designing a

80
00:02:50,420 --> 00:02:53,660
protocol and actually do a real-world

81
00:02:51,800 --> 00:02:54,920
deployment where we had six hundred and

82
00:02:53,660 --> 00:02:58,250
sixty seven thousand participants

83
00:02:54,920 --> 00:02:59,660
actually go and use this and lessons we

84
00:02:58,250 --> 00:03:03,830
learned from what's the state of

85
00:02:59,660 --> 00:03:05,959
credentials in the wild so as we talk

86
00:03:03,830 --> 00:03:07,610
about password breaches and it's a huge

87
00:03:05,959 --> 00:03:09,560
part of this research I want to give a

88
00:03:07,610 --> 00:03:11,090
note on ethics that just because data

89
00:03:09,560 --> 00:03:13,040
has been exposed and widely available

90
00:03:11,090 --> 00:03:15,080
now in the internet doesn't mean we as

91
00:03:13,040 --> 00:03:17,420
researchers can just do whatever we want

92
00:03:15,080 --> 00:03:19,010
with that data so the context of why

93
00:03:17,420 --> 00:03:20,869
we're looking at this and collecting it

94
00:03:19,010 --> 00:03:22,310
is really to help risa cure users

95
00:03:20,870 --> 00:03:25,760
because we know there's a real threat

96
00:03:22,310 --> 00:03:28,670
out there but any protocol we do that

97
00:03:25,760 --> 00:03:30,739
amplifies access to this information has

98
00:03:28,670 --> 00:03:33,829
to be designed with abuse from a ground

99
00:03:30,739 --> 00:03:35,720
principle so it led us to think of like

100
00:03:33,830 --> 00:03:37,700
what are the principles that we need to

101
00:03:35,720 --> 00:03:39,709
bake into any sort of breach alerting

102
00:03:37,700 --> 00:03:42,018
protocol and the first we came up with

103
00:03:39,709 --> 00:03:43,310
is that we went to Ma critized access if

104
00:03:42,019 --> 00:03:45,050
we're going to solve this for the long

105
00:03:43,310 --> 00:03:46,550
tail of the internet and all the

106
00:03:45,050 --> 00:03:48,769
different identity providers and users

107
00:03:46,550 --> 00:03:52,160
they need to be able to tap into this

108
00:03:48,769 --> 00:03:54,620
technology the second is that we really

109
00:03:52,160 --> 00:03:56,209
want to focus on actionable not

110
00:03:54,620 --> 00:03:58,910
informational things that we can pass

111
00:03:56,209 --> 00:04:00,620
the user so when you're in a breach and

112
00:03:58,910 --> 00:04:02,269
you've had your password exposed you can

113
00:04:00,620 --> 00:04:04,010
actually go and reset that and that's a

114
00:04:02,269 --> 00:04:06,260
simple step that we can give to users

115
00:04:04,010 --> 00:04:07,820
and advice we can pass on to them if

116
00:04:06,260 --> 00:04:08,929
your phone number was in a breach or

117
00:04:07,820 --> 00:04:10,850
your mailing address in the breach

118
00:04:08,930 --> 00:04:12,980
there's not a simple step we can say oh

119
00:04:10,850 --> 00:04:15,049
you should do this now it's just

120
00:04:12,980 --> 00:04:18,079
informational so we can set out of scope

121
00:04:15,050 --> 00:04:19,700
for the protocol we're designing the

122
00:04:18,079 --> 00:04:21,440
other thing is that user retention is

123
00:04:19,700 --> 00:04:23,479
incredibly precious and a limited

124
00:04:21,440 --> 00:04:25,430
resource so how do we get them to focus

125
00:04:23,479 --> 00:04:28,130
on breach passwords not just weak

126
00:04:25,430 --> 00:04:29,450
passwords so in our context we only care

127
00:04:28,130 --> 00:04:31,940
about turning on when your exact

128
00:04:29,450 --> 00:04:33,530
username and password is exposed not

129
00:04:31,940 --> 00:04:34,940
just because you use a password like

130
00:04:33,530 --> 00:04:36,210
chocolate one which is the top

131
00:04:34,940 --> 00:04:38,820
thousandth pass where

132
00:04:36,210 --> 00:04:40,200
in our corpus you know we think a

133
00:04:38,820 --> 00:04:41,580
password strength meter is better to

134
00:04:40,200 --> 00:04:43,080
handle that we want to focus people

135
00:04:41,580 --> 00:04:46,020
first on the most predominant threat

136
00:04:43,080 --> 00:04:47,400
that we know is out there and the last

137
00:04:46,020 --> 00:04:49,260
is that we need the protocol to be near

138
00:04:47,400 --> 00:04:51,210
real-time like there are very fancy

139
00:04:49,260 --> 00:04:53,669
privacy and crypto primitives that are

140
00:04:51,210 --> 00:04:55,049
available but that may not be tenable

141
00:04:53,669 --> 00:04:57,599
for a solution when you need to

142
00:04:55,050 --> 00:04:59,790
integrate into a login flow or give a

143
00:04:57,600 --> 00:05:04,290
warning as soon as somebody signs into a

144
00:04:59,790 --> 00:05:05,880
website so I'm gonna cover some of the

145
00:05:04,290 --> 00:05:07,410
details of how we designed this protocol

146
00:05:05,880 --> 00:05:09,000
but I will refer you to the paper for

147
00:05:07,410 --> 00:05:10,680
like the full construction of what we're

148
00:05:09,000 --> 00:05:12,419
trying to accomplish but it's very

149
00:05:10,680 --> 00:05:14,220
simplest what we're trying to do is say

150
00:05:12,419 --> 00:05:16,500
you have user name and password as a

151
00:05:14,220 --> 00:05:19,080
user we want you to query our service

152
00:05:16,500 --> 00:05:20,520
that happens to know and you know user

153
00:05:19,080 --> 00:05:22,289
names and passwords that aren't breaches

154
00:05:20,520 --> 00:05:24,270
and return you a bit whether or not

155
00:05:22,290 --> 00:05:26,010
you've actually been in that breach but

156
00:05:24,270 --> 00:05:27,690
we need to take into account both an

157
00:05:26,010 --> 00:05:29,729
adversarial client who's abusing the

158
00:05:27,690 --> 00:05:31,169
system as well as an adversarial server

159
00:05:29,729 --> 00:05:35,250
who's trying to learn a user's username

160
00:05:31,169 --> 00:05:37,229
and password in the context of an

161
00:05:35,250 --> 00:05:38,729
adverse a client one of the simple

162
00:05:37,229 --> 00:05:41,130
things we can do is rely on a proof of

163
00:05:38,729 --> 00:05:43,050
work so we can just slow you down such

164
00:05:41,130 --> 00:05:44,580
that you can't brute force the API and

165
00:05:43,050 --> 00:05:47,280
try a bunch of different usernames and

166
00:05:44,580 --> 00:05:48,840
passwords here we use argon 2 is a hash

167
00:05:47,280 --> 00:05:51,359
to accomplish this and this heads is a

168
00:05:48,840 --> 00:05:53,280
nice side benefit of were our storage

169
00:05:51,360 --> 00:05:55,530
system to ever be breached it's also

170
00:05:53,280 --> 00:05:57,479
secure against any type of attack so

171
00:05:55,530 --> 00:05:59,520
there's no benefit of going via the API

172
00:05:57,479 --> 00:06:00,690
or directly attacking our service the

173
00:05:59,520 --> 00:06:03,479
amount of work you have to do is the

174
00:06:00,690 --> 00:06:04,680
same in either context the more

175
00:06:03,479 --> 00:06:06,659
challenging problem is how do we

176
00:06:04,680 --> 00:06:08,490
actually protect you as a user from

177
00:06:06,660 --> 00:06:10,380
revealing any secret information to the

178
00:06:08,490 --> 00:06:11,880
service there's a lot of different you

179
00:06:10,380 --> 00:06:14,100
know techniques that are available here

180
00:06:11,880 --> 00:06:16,200
we settled on private 10 intersection

181
00:06:14,100 --> 00:06:17,160
and the idealized example of this it's

182
00:06:16,200 --> 00:06:20,039
kind of like a diffie-hellman key

183
00:06:17,160 --> 00:06:21,930
exchange a user has a secret a that only

184
00:06:20,039 --> 00:06:23,580
they know and they're going to encrypt

185
00:06:21,930 --> 00:06:25,950
their username and password the hash of

186
00:06:23,580 --> 00:06:28,109
that and send it to the service that's

187
00:06:25,950 --> 00:06:30,120
meaningless to the service but what we

188
00:06:28,110 --> 00:06:32,310
can do on the flip side is take a secret

189
00:06:30,120 --> 00:06:34,350
that only the service knows encrypt all

190
00:06:32,310 --> 00:06:36,150
the records that we have access to and

191
00:06:34,350 --> 00:06:37,830
then basically provide you a secret

192
00:06:36,150 --> 00:06:40,590
index into that database that you need

193
00:06:37,830 --> 00:06:42,419
to look up so there's a lot more details

194
00:06:40,590 --> 00:06:43,560
about how this works in the paper but

195
00:06:42,419 --> 00:06:45,960
this is kind of the high level

196
00:06:43,560 --> 00:06:47,650
instrument of how do you do a secret

197
00:06:45,960 --> 00:06:49,870
lookup without revealing what your

198
00:06:47,650 --> 00:06:51,489
you're looking up but this is idealized

199
00:06:49,870 --> 00:06:53,440
the challenges right now you have to

200
00:06:51,490 --> 00:06:56,020
pass back the entire database back to

201
00:06:53,440 --> 00:06:57,760
the user which is billions of records so

202
00:06:56,020 --> 00:07:00,549
hundreds of gigabytes of data this is

203
00:06:57,760 --> 00:07:02,380
not tenable in practice so we can do is

204
00:07:00,550 --> 00:07:04,449
actually we can private center section

205
00:07:02,380 --> 00:07:06,370
to be a can and in any problem if you're

206
00:07:04,449 --> 00:07:09,460
willing to reveal in this construction

207
00:07:06,370 --> 00:07:10,810
some bits of a hash of your username we

208
00:07:09,460 --> 00:07:12,400
can actually partition that whole

209
00:07:10,810 --> 00:07:14,139
database of usernames and passwords we

210
00:07:12,400 --> 00:07:16,419
know our breaches just the one that

211
00:07:14,139 --> 00:07:18,130
you're guaranteed to be in if your

212
00:07:16,419 --> 00:07:20,260
username happens to be in one of the

213
00:07:18,130 --> 00:07:22,030
breaches and so the trade off we

214
00:07:20,260 --> 00:07:24,280
selected was if you're willing to leak

215
00:07:22,030 --> 00:07:25,809
two bytes of your username prefix which

216
00:07:24,280 --> 00:07:28,448
amounts to about a Canon Amity of

217
00:07:25,810 --> 00:07:29,740
roughly sixty thousand users then you

218
00:07:28,449 --> 00:07:30,850
can learn you're in a breach and the

219
00:07:29,740 --> 00:07:33,250
consequence is you only have to download

220
00:07:30,850 --> 00:07:34,930
about one to two megabytes of data which

221
00:07:33,250 --> 00:07:36,370
we think is okay for a desktop style

222
00:07:34,930 --> 00:07:40,210
environment which we're targeting is our

223
00:07:36,370 --> 00:07:42,250
first cut the other last attack I want

224
00:07:40,210 --> 00:07:44,198
to talk about is denial of service you

225
00:07:42,250 --> 00:07:45,729
know we don't want to expose our use

226
00:07:44,199 --> 00:07:47,590
service to basically being shut down

227
00:07:45,729 --> 00:07:50,680
because the attacker gets angry with us

228
00:07:47,590 --> 00:07:53,138
so what we opted to do here is instead

229
00:07:50,680 --> 00:07:54,880
of dynamically selecting a key that the

230
00:07:53,139 --> 00:07:56,680
server would use we actually used a

231
00:07:54,880 --> 00:07:57,099
fixed key and we can rotate it when we

232
00:07:56,680 --> 00:07:59,110
need to

233
00:07:57,099 --> 00:08:00,520
but this then turns us into a static

234
00:07:59,110 --> 00:08:02,080
serving problem which is great from

235
00:08:00,520 --> 00:08:04,150
actually an engineering standpoint and

236
00:08:02,080 --> 00:08:06,039
building the service out so nearly all

237
00:08:04,150 --> 00:08:07,810
the work is being done on the client the

238
00:08:06,039 --> 00:08:09,550
only thing the server has to do is do

239
00:08:07,810 --> 00:08:14,289
some cryptographic signing when a

240
00:08:09,550 --> 00:08:16,900
request comes in so we wanted to build

241
00:08:14,289 --> 00:08:19,539
this in practice and what we opted doing

242
00:08:16,900 --> 00:08:22,000
is a Chrome extension as a first cut

243
00:08:19,539 --> 00:08:23,349
pass for like a prototype so the idea is

244
00:08:22,000 --> 00:08:25,210
as you type in your username and

245
00:08:23,349 --> 00:08:27,340
password the extension would identify

246
00:08:25,210 --> 00:08:29,440
that data would do all the encryption

247
00:08:27,340 --> 00:08:31,719
and then on the flipside the server we

248
00:08:29,440 --> 00:08:34,059
created it as a cloud function so it's

249
00:08:31,720 --> 00:08:35,229
serverless it scales automatically to

250
00:08:34,059 --> 00:08:37,809
the number of clients that are going to

251
00:08:35,229 --> 00:08:39,339
be using the system and you know all we

252
00:08:37,809 --> 00:08:41,199
have to do is then connect to a cloud

253
00:08:39,339 --> 00:08:43,719
storage and decide hey you passed us

254
00:08:41,200 --> 00:08:45,220
this username prefix which bucket do we

255
00:08:43,719 --> 00:08:47,350
need to look in to serve you any data

256
00:08:45,220 --> 00:08:50,620
back and then everything else is handled

257
00:08:47,350 --> 00:08:52,270
on the client in terms of where we're

258
00:08:50,620 --> 00:08:53,950
getting all of our data we have four

259
00:08:52,270 --> 00:08:55,780
billion usernames and passwords that

260
00:08:53,950 --> 00:08:58,899
have been exposed in breaches these are

261
00:08:55,780 --> 00:09:02,410
across sites in the US and Europe and

262
00:08:58,899 --> 00:09:04,119
China Vietnam across the world if you're

263
00:09:02,410 --> 00:09:06,040
interested in how we actually do this an

264
00:09:04,119 --> 00:09:08,110
ongoing process we have a paper a couple

265
00:09:06,040 --> 00:09:09,399
years ago at CCS which goes into the

266
00:09:08,110 --> 00:09:11,319
details of like how do you go find these

267
00:09:09,399 --> 00:09:14,559
underground forums clean up the data and

268
00:09:11,319 --> 00:09:15,939
things like that so we're gonna try

269
00:09:14,559 --> 00:09:20,410
something which is very risky we're

270
00:09:15,939 --> 00:09:22,240
gonna actually demo this so I have in my

271
00:09:20,410 --> 00:09:23,889
upper right corner this is our extension

272
00:09:22,240 --> 00:09:26,319
actually live it's called password check

273
00:09:23,889 --> 00:09:27,399
up and this is github which is one of

274
00:09:26,319 --> 00:09:29,740
the properties who are concerned about

275
00:09:27,399 --> 00:09:32,139
furred for developers so I'm going to

276
00:09:29,740 --> 00:09:33,610
use a username and password this is one

277
00:09:32,139 --> 00:09:34,629
that happens to be in a breach so what's

278
00:09:33,610 --> 00:09:36,309
happening right now in the background

279
00:09:34,629 --> 00:09:38,679
the in the upper right you know blue

280
00:09:36,309 --> 00:09:39,579
icon it's thinking it's encrypting your

281
00:09:38,679 --> 00:09:41,769
username and password

282
00:09:39,579 --> 00:09:43,628
it's then coming up with that hash

283
00:09:41,769 --> 00:09:45,279
prefix sends it to the server and gets a

284
00:09:43,629 --> 00:09:46,569
response and because this is in a breach

285
00:09:45,279 --> 00:09:48,579
we then display a warning and the

286
00:09:46,569 --> 00:09:51,309
browser says hey you need to change your

287
00:09:48,579 --> 00:09:52,569
password we give users options if for

288
00:09:51,309 --> 00:09:54,160
some reason it's a mistake or it's like

289
00:09:52,569 --> 00:09:56,309
a low value account to them they can

290
00:09:54,160 --> 00:10:00,699
ignore it otherwise they can close it

291
00:09:56,309 --> 00:10:03,519
and then also up here what we have here

292
00:10:00,699 --> 00:10:04,959
is that now there's a warning that if

293
00:10:03,519 --> 00:10:06,519
you ever need to go back and find what

294
00:10:04,959 --> 00:10:08,679
that password was you know your github

295
00:10:06,519 --> 00:10:12,790
account was exposed go and change the

296
00:10:08,679 --> 00:10:14,050
password so that's the very light detail

297
00:10:12,790 --> 00:10:15,519
if you want to try this out it's

298
00:10:14,050 --> 00:10:17,199
available in the Chrome Web Store you

299
00:10:15,519 --> 00:10:20,379
can kind of go demo on your own pages

300
00:10:17,199 --> 00:10:22,240
and things like that one thing we wanted

301
00:10:20,379 --> 00:10:23,649
to do though to kind of prove the value

302
00:10:22,240 --> 00:10:25,149
of this is that we had to extend the

303
00:10:23,649 --> 00:10:28,029
protocol to actually connect some

304
00:10:25,149 --> 00:10:29,829
anonymous telemetry so when you log in

305
00:10:28,029 --> 00:10:31,420
one of the things we collect is did you

306
00:10:29,829 --> 00:10:33,489
actually receive a breach warning and

307
00:10:31,420 --> 00:10:34,899
how long did it actually do to do the

308
00:10:33,490 --> 00:10:37,629
proof of work and the round-trip time

309
00:10:34,899 --> 00:10:39,339
involved there if users opted to ignore

310
00:10:37,629 --> 00:10:40,779
it we want to know because is the

311
00:10:39,339 --> 00:10:42,910
warning actually being effective and

312
00:10:40,779 --> 00:10:46,660
adhered to or people like having

313
00:10:42,910 --> 00:10:48,399
problems with the process and the last

314
00:10:46,660 --> 00:10:50,110
is if you change your password we can

315
00:10:48,399 --> 00:10:52,089
actually automatically detect that right

316
00:10:50,110 --> 00:10:53,829
now with the extension and we look at

317
00:10:52,089 --> 00:10:56,019
both the strengths before and after to

318
00:10:53,829 --> 00:10:59,138
see are we nudging people to better

319
00:10:56,019 --> 00:11:00,730
security moving forward so we actually

320
00:10:59,139 --> 00:11:03,249
deployed this in practice back in

321
00:11:00,730 --> 00:11:04,569
February and there was a huge uptick way

322
00:11:03,249 --> 00:11:05,799
more than we were expecting we told

323
00:11:04,569 --> 00:11:08,229
people as an experiment that they could

324
00:11:05,799 --> 00:11:09,819
be involved in if they wanted we had six

325
00:11:08,230 --> 00:11:11,880
hundred and sixty seven thousand users

326
00:11:09,819 --> 00:11:14,620
in the very first month

327
00:11:11,880 --> 00:11:17,470
thankfully like as I said misra dynasty

328
00:11:14,620 --> 00:11:18,880
static serving and via cloud functions

329
00:11:17,470 --> 00:11:21,220
were able to go from just our internal

330
00:11:18,880 --> 00:11:23,649
beta testers of like a hundred people in

331
00:11:21,220 --> 00:11:25,600
February 5th and automatically scaled to

332
00:11:23,649 --> 00:11:28,149
hundreds of thousands of users over the

333
00:11:25,600 --> 00:11:31,149
course of just a day or two where we hit

334
00:11:28,149 --> 00:11:32,980
a peak of about 20 QPS and the total

335
00:11:31,149 --> 00:11:35,139
query time that like from typing in your

336
00:11:32,980 --> 00:11:37,690
password to finally seeing a warning was

337
00:11:35,139 --> 00:11:39,310
about eight and a half seconds and half

338
00:11:37,690 --> 00:11:41,139
of that is spent in the proof of work so

339
00:11:39,310 --> 00:11:42,369
that's by design the other is right now

340
00:11:41,139 --> 00:11:43,750
you have to download that one to two

341
00:11:42,370 --> 00:11:45,759
megabytes of data so that's something

342
00:11:43,750 --> 00:11:47,470
we'd love to potentially improve in the

343
00:11:45,759 --> 00:11:50,740
future and looking for help from folks

344
00:11:47,470 --> 00:11:52,300
in the audience to do that what's

345
00:11:50,740 --> 00:11:53,769
interesting about the extension though

346
00:11:52,300 --> 00:11:56,170
and the protocol is it actually provides

347
00:11:53,769 --> 00:11:58,180
us a lens into the ecosystem of what's

348
00:11:56,170 --> 00:12:00,579
the state of password security so we

349
00:11:58,180 --> 00:12:02,800
scanned about 21 million logins over the

350
00:12:00,579 --> 00:12:04,810
course of that one month period during

351
00:12:02,800 --> 00:12:06,790
that time we identified three hundred

352
00:12:04,810 --> 00:12:07,329
and sixteen thousand passwords is being

353
00:12:06,790 --> 00:12:09,880
breached

354
00:12:07,329 --> 00:12:11,769
so roughly one in two users would have

355
00:12:09,880 --> 00:12:13,209
seen a warning we estimate we don't have

356
00:12:11,769 --> 00:12:16,120
actual identifiers so we can only

357
00:12:13,209 --> 00:12:17,619
estimate but what we can say is that 1.5

358
00:12:16,120 --> 00:12:19,750
percent of all logins on the web right

359
00:12:17,620 --> 00:12:21,610
now are relying on breached passwords

360
00:12:19,750 --> 00:12:23,230
and we think this is a lower bound you

361
00:12:21,610 --> 00:12:24,670
know we have a security tech savvy

362
00:12:23,230 --> 00:12:26,470
audience that was installing the

363
00:12:24,670 --> 00:12:28,420
extension so they're already prone

364
00:12:26,470 --> 00:12:29,949
cribbing not to reusing passwords and

365
00:12:28,420 --> 00:12:31,389
there's some other details we go into

366
00:12:29,949 --> 00:12:34,839
the paper as to why we think this is

367
00:12:31,389 --> 00:12:37,060
higher than it actually is the other

368
00:12:34,839 --> 00:12:39,399
thing is we can actually see where is

369
00:12:37,060 --> 00:12:40,959
this threat most prominent so even on

370
00:12:39,399 --> 00:12:43,600
some of the most sensitive pages like

371
00:12:40,959 --> 00:12:45,849
government and finance and email we're

372
00:12:43,600 --> 00:12:47,800
seeing relatively high volumes of

373
00:12:45,850 --> 00:12:49,720
password news and you know these ratios

374
00:12:47,800 --> 00:12:51,939
look fairly small but when you scale

375
00:12:49,720 --> 00:12:53,470
this out to billions of users these are

376
00:12:51,940 --> 00:12:55,019
tens of millions of people who are at

377
00:12:53,470 --> 00:12:57,430
risk of having their account hijacked

378
00:12:55,019 --> 00:12:59,649
but even more so it's that long tail of

379
00:12:57,430 --> 00:13:00,939
the Internet where this is happening so

380
00:12:59,649 --> 00:13:03,220
on shopping sites where you may have

381
00:13:00,939 --> 00:13:04,449
credit card details stored news sites

382
00:13:03,220 --> 00:13:06,220
with subscriptions and your

383
00:13:04,449 --> 00:13:08,560
entertainment properties this is where

384
00:13:06,220 --> 00:13:10,569
we see up to you know 6.3 percent of all

385
00:13:08,560 --> 00:13:15,219
logins to those pages being vulnerable

386
00:13:10,569 --> 00:13:17,079
to hijacking now we didn't just want to

387
00:13:15,220 --> 00:13:19,180
study the state of passwords we actually

388
00:13:17,079 --> 00:13:22,180
wanted to make them better and so with

389
00:13:19,180 --> 00:13:24,170
our warnings 26% of users actually went

390
00:13:22,180 --> 00:13:25,339
on to go Andry secure their password

391
00:13:24,170 --> 00:13:27,140
and this is lower than we were hoping

392
00:13:25,339 --> 00:13:29,810
for but there's a lot of things that are

393
00:13:27,140 --> 00:13:32,209
going on here you can have one an uneasy

394
00:13:29,810 --> 00:13:34,339
path like our warning doesn't offer you

395
00:13:32,209 --> 00:13:35,930
to the account reset page because we

396
00:13:34,339 --> 00:13:38,420
don't know where that is for all of the

397
00:13:35,930 --> 00:13:39,890
pages across the internet the other

398
00:13:38,420 --> 00:13:41,689
challenge is that some people may have

399
00:13:39,890 --> 00:13:42,920
shared accounts you don't necessarily if

400
00:13:41,690 --> 00:13:44,240
you have like a Netflix account with

401
00:13:42,920 --> 00:13:46,099
your partner you can't necessarily

402
00:13:44,240 --> 00:13:48,200
change the password even though it may

403
00:13:46,100 --> 00:13:50,959
be weak so I think there's work to be

404
00:13:48,200 --> 00:13:52,820
done here but 26% was a great first cut

405
00:13:50,959 --> 00:13:56,449
for us actually seeing positive change

406
00:13:52,820 --> 00:13:57,500
from these warnings and even better we

407
00:13:56,450 --> 00:13:59,899
were able to measure the password

408
00:13:57,500 --> 00:14:01,670
strength and say that 94% of users at

409
00:13:59,899 --> 00:14:03,140
least adopted a password that was as

410
00:14:01,670 --> 00:14:06,410
strong or stronger than it was before

411
00:14:03,140 --> 00:14:08,750
and about 60% of them are in the safely

412
00:14:06,410 --> 00:14:10,519
unguessable range by zxe dvn standards

413
00:14:08,750 --> 00:14:13,160
which means takes about a hundred

414
00:14:10,519 --> 00:14:17,420
million guesses before you would be able

415
00:14:13,160 --> 00:14:19,189
to crack that password so in terms of

416
00:14:17,420 --> 00:14:22,969
takeaways that I'd love the audience to

417
00:14:19,190 --> 00:14:24,589
have is that so in terms of takeaways

418
00:14:22,970 --> 00:14:26,600
that I'd love the audience to have is

419
00:14:24,589 --> 00:14:27,860
that this privacy preserving breach or

420
00:14:26,600 --> 00:14:30,260
learning protocol actually has the

421
00:14:27,860 --> 00:14:32,720
potential to help millions of users from

422
00:14:30,260 --> 00:14:34,880
account hijacking but we'd actually love

423
00:14:32,720 --> 00:14:37,100
your help in making this more real which

424
00:14:34,880 --> 00:14:39,019
is you could share breaches with us to

425
00:14:37,100 --> 00:14:41,449
make this you know more access to more

426
00:14:39,019 --> 00:14:42,890
users to get the word out there you can

427
00:14:41,449 --> 00:14:44,449
help us improve the protocol for low-end

428
00:14:42,890 --> 00:14:46,490
devices so if you're a cryptographer

429
00:14:44,449 --> 00:14:47,269
you're working in Hardware enclaves or

430
00:14:46,490 --> 00:14:48,769
things like that

431
00:14:47,269 --> 00:14:50,180
we're open to ideas of how do we

432
00:14:48,769 --> 00:14:52,459
actually reduce the computational

433
00:14:50,180 --> 00:14:54,410
balance on the protocol and if you work

434
00:14:52,459 --> 00:14:56,390
in the UX space how do we actually ease

435
00:14:54,410 --> 00:14:58,670
this process of doing account recovery

436
00:14:56,390 --> 00:15:00,260
or even designing warnings to alert

437
00:14:58,670 --> 00:15:01,490
people to the most sensitive actions

438
00:15:00,260 --> 00:15:04,100
that they should take on their account

439
00:15:01,490 --> 00:15:05,149
so with that I'm happy to answer any

440
00:15:04,100 --> 00:15:07,420
questions and thank you for all for

441
00:15:05,149 --> 00:15:07,420
coming

442
00:15:10,170 --> 00:15:15,579
thanks very much get some questions

443
00:15:12,939 --> 00:15:18,399
alright y'all from Rice University this

444
00:15:15,579 --> 00:15:21,309
is great work I cannot wait for testing

445
00:15:18,399 --> 00:15:23,619
my password is rich or not we are doing

446
00:15:21,309 --> 00:15:27,339
it later our one quick questions that

447
00:15:23,619 --> 00:15:30,100
suppose I use centralized the password

448
00:15:27,339 --> 00:15:31,839
management service like one password I

449
00:15:30,100 --> 00:15:35,050
can imagine they could also provide

450
00:15:31,839 --> 00:15:37,689
similar services so for me a user which

451
00:15:35,050 --> 00:15:39,758
is more secure how do we how to connect

452
00:15:37,689 --> 00:15:43,719
how how can you help decide how many

453
00:15:39,759 --> 00:15:46,240
site which service is better well so

454
00:15:43,720 --> 00:15:48,399
there's two parts to this I think one is

455
00:15:46,240 --> 00:15:50,499
we designed the API to be open so even

456
00:15:48,399 --> 00:15:52,569
if you use a password manager you could

457
00:15:50,499 --> 00:15:54,189
potentially go and integrate this as

458
00:15:52,569 --> 00:15:56,740
part of your service to get this type of

459
00:15:54,189 --> 00:15:59,379
advice as for which password manager to

460
00:15:56,740 --> 00:16:01,480
use any is great to start like the vast

461
00:15:59,379 --> 00:16:03,970
majority of users right now don't use

462
00:16:01,480 --> 00:16:05,439
one so we're like if you think of like

463
00:16:03,970 --> 00:16:07,269
the advice that we could give people

464
00:16:05,439 --> 00:16:08,199
we're so far on the spectrum right now

465
00:16:07,269 --> 00:16:10,839
I'm just saying like let's address

466
00:16:08,199 --> 00:16:13,269
breaches then we can worry about you

467
00:16:10,839 --> 00:16:15,249
know reuse and using automated or

468
00:16:13,269 --> 00:16:16,990
stronger passwords and then go from

469
00:16:15,249 --> 00:16:18,670
there to two-factor authentication so

470
00:16:16,990 --> 00:16:19,959
advice is a spectrum we're starting with

471
00:16:18,670 --> 00:16:21,819
the biggest problem that we see right

472
00:16:19,959 --> 00:16:25,359
now Thanks

473
00:16:21,819 --> 00:16:28,240
let's go to the back Mike hi thanks Nick

474
00:16:25,360 --> 00:16:29,670
McKee for IQ Stony Brook because of your

475
00:16:28,240 --> 00:16:31,959
implementation with a browser extension

476
00:16:29,670 --> 00:16:33,429
are there any issues with fingerprint

477
00:16:31,959 --> 00:16:36,819
ability because you're injecting this

478
00:16:33,429 --> 00:16:39,910
warning could the site learn something

479
00:16:36,819 --> 00:16:41,679
about the user being involved in you

480
00:16:39,910 --> 00:16:44,379
know in a compromised that they wouldn't

481
00:16:41,679 --> 00:16:46,899
know before yeah so the way we

482
00:16:44,379 --> 00:16:48,790
rationalize this threat model was the

483
00:16:46,899 --> 00:16:51,279
site that we're injecting into already

484
00:16:48,790 --> 00:16:53,649
has access to username and password so

485
00:16:51,279 --> 00:16:55,389
the risk of us exposing any additional

486
00:16:53,649 --> 00:16:57,790
details is fairly small

487
00:16:55,389 --> 00:17:00,309
we like the challenge we had and there's

488
00:16:57,790 --> 00:17:02,049
much to do in improving the UI is we

489
00:17:00,309 --> 00:17:03,670
wanted an in context warning that was

490
00:17:02,049 --> 00:17:05,918
associated with the action you just took

491
00:17:03,670 --> 00:17:07,569
and browser extensions don't provide a

492
00:17:05,919 --> 00:17:10,149
great mechanism but you could imagine

493
00:17:07,569 --> 00:17:13,359
like that service itself could integrate

494
00:17:10,148 --> 00:17:16,029
and provide the warning post log n so

495
00:17:13,359 --> 00:17:17,260
this is a first cut pass for us we think

496
00:17:16,029 --> 00:17:18,990
there's a lot of ways to improve it and

497
00:17:17,260 --> 00:17:22,890
we'd love suggestions on how to do that

498
00:17:18,990 --> 00:17:24,000
thank you hello I'm Jeffrey Goldberg

499
00:17:22,890 --> 00:17:26,610
from 1password

500
00:17:24,000 --> 00:17:31,770
we do actually integrate not with this

501
00:17:26,609 --> 00:17:34,110
but with have I been pum four so we so

502
00:17:31,770 --> 00:17:38,639
we're using have I been pound and I was

503
00:17:34,110 --> 00:17:44,779
very interested in your choice for the

504
00:17:38,640 --> 00:17:50,520
breach not week because that is I mean

505
00:17:44,779 --> 00:17:52,140
I've got yeah so our philosophy was like

506
00:17:50,520 --> 00:17:54,000
I said user attention is a precious

507
00:17:52,140 --> 00:17:56,279
resource so how do we get them to focus

508
00:17:54,000 --> 00:17:57,840
on the largest problem and some of the

509
00:17:56,279 --> 00:17:59,640
research we've done in the past is it's

510
00:17:57,840 --> 00:18:01,770
not guessing attacks that like online

511
00:17:59,640 --> 00:18:02,549
are happening very often there is

512
00:18:01,770 --> 00:18:04,799
evidence of that

513
00:18:02,549 --> 00:18:06,179
but it's this kind of password washing

514
00:18:04,799 --> 00:18:07,408
where you just try one username one

515
00:18:06,179 --> 00:18:08,370
password you go through everything

516
00:18:07,409 --> 00:18:10,860
that's in the breach

517
00:18:08,370 --> 00:18:12,570
that's netting the most victims so we

518
00:18:10,860 --> 00:18:14,129
were like let's solve that weak

519
00:18:12,570 --> 00:18:16,289
passwords are probably the next thing

520
00:18:14,130 --> 00:18:18,169
that you have to address but can we at

521
00:18:16,289 --> 00:18:22,260
least make a dent in this problem first

522
00:18:18,169 --> 00:18:24,090
so yeah okay we've got time for two more

523
00:18:22,260 --> 00:18:26,789
quick questions thank you

524
00:18:24,090 --> 00:18:29,340
hi I'm Divina from face book thank you

525
00:18:26,789 --> 00:18:30,870
for the fascinating work and I was

526
00:18:29,340 --> 00:18:33,990
wondering whether you did any UX

527
00:18:30,870 --> 00:18:36,360
research prior to releasing this and

528
00:18:33,990 --> 00:18:40,440
what were the result and how did they

529
00:18:36,360 --> 00:18:41,010
vary across different population tech

530
00:18:40,440 --> 00:18:47,610
savviness

531
00:18:41,010 --> 00:18:49,379
yeah we didn't have the the expertise to

532
00:18:47,610 --> 00:18:51,299
do all the UX research that we wanted

533
00:18:49,380 --> 00:18:53,010
what we tried to model was after Safe

534
00:18:51,299 --> 00:18:55,230
Browsing and taking all the lessons that

535
00:18:53,010 --> 00:18:56,460
they had so having a very actionable

536
00:18:55,230 --> 00:18:58,799
thing you saw what they're warning was

537
00:18:56,460 --> 00:19:00,929
change your password so clear next step

538
00:18:58,799 --> 00:19:02,220
we had like a Help Center page where

539
00:19:00,929 --> 00:19:05,580
people could learn more if they actually

540
00:19:02,220 --> 00:19:06,990
needed help through the process but yes

541
00:19:05,580 --> 00:19:09,178
what we'd really like to understand is

542
00:19:06,990 --> 00:19:10,590
once you see that warning how hard is it

543
00:19:09,179 --> 00:19:12,480
for you to go to the next page and

544
00:19:10,590 --> 00:19:14,639
actually reset so I think there's a ton

545
00:19:12,480 --> 00:19:16,860
of work to do in that domain we're like

546
00:19:14,640 --> 00:19:18,809
how do we do the cryptographic heavy

547
00:19:16,860 --> 00:19:20,789
lifting and then the next step is how do

548
00:19:18,809 --> 00:19:24,500
we actually you know have empathy for

549
00:19:20,789 --> 00:19:24,500
users and walk them through this process

550
00:19:26,230 --> 00:19:31,250
hi this is Asia from Microsoft Research

551
00:19:28,730 --> 00:19:32,990
so I was wondering you said that you are

552
00:19:31,250 --> 00:19:34,850
collecting telemetry and whether the

553
00:19:32,990 --> 00:19:37,550
client is getting a breach alert or not

554
00:19:34,850 --> 00:19:39,199
so I'm slightly confused with the threat

555
00:19:37,550 --> 00:19:40,639
model then if you are connecting the

556
00:19:39,200 --> 00:19:42,050
breach alert then why do it on the

557
00:19:40,640 --> 00:19:44,510
client tender at all why can't you just

558
00:19:42,050 --> 00:19:48,470
check it on the server and why not do

559
00:19:44,510 --> 00:19:51,140
this communication protocol so I should

560
00:19:48,470 --> 00:19:52,580
differentiate the extension never sees

561
00:19:51,140 --> 00:19:55,490
your username and password and that's by

562
00:19:52,580 --> 00:19:57,770
design the telemetry only reveals the

563
00:19:55,490 --> 00:20:00,110
the one bit status of was in a breach

564
00:19:57,770 --> 00:20:01,910
and some information about password

565
00:20:00,110 --> 00:20:03,979
strength and some other things so

566
00:20:01,910 --> 00:20:06,200
checking this rate so this is a private

567
00:20:03,980 --> 00:20:08,360
set membership plane so you can do it on

568
00:20:06,200 --> 00:20:10,640
the server to get the bit out why do you

569
00:20:08,360 --> 00:20:13,429
do it on the client side at all why do I

570
00:20:10,640 --> 00:20:14,840
do it at the browser I might have to

571
00:20:13,430 --> 00:20:16,430
take this offline but like for the

572
00:20:14,840 --> 00:20:17,990
telemetry purposes it was so that we

573
00:20:16,430 --> 00:20:19,600
could understand as a service are we

574
00:20:17,990 --> 00:20:21,950
actually providing something of value

575
00:20:19,600 --> 00:20:23,510
you we have actually an opt-out button

576
00:20:21,950 --> 00:20:25,220
where users can say I don't want to

577
00:20:23,510 --> 00:20:26,720
report any Salama tree and they still

578
00:20:25,220 --> 00:20:28,130
get all the benefit of these name and

579
00:20:26,720 --> 00:20:29,660
password alert I said you are you

580
00:20:28,130 --> 00:20:32,000
collecting the telemetry in some private

581
00:20:29,660 --> 00:20:35,030
way are like some differentially private

582
00:20:32,000 --> 00:20:38,480
way or just saying we have no user

583
00:20:35,030 --> 00:20:40,730
identifiers so everything is just the

584
00:20:38,480 --> 00:20:42,770
like three bits that we send along so I

585
00:20:40,730 --> 00:20:45,110
we can talk more if you like thanks

586
00:20:42,770 --> 00:20:45,860
great let's thank the speaker again very

587
00:20:45,110 --> 00:20:51,760
much thank you

588
00:20:45,860 --> 00:20:51,760
[Applause]

