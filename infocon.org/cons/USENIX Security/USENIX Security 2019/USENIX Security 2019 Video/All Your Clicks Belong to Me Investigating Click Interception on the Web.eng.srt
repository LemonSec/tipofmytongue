1
00:00:10,940 --> 00:00:14,959
um girlfriend I'm Way more um Chinese

2
00:00:13,130 --> 00:00:16,490
University of Hong Kong regard to be

3
00:00:14,959 --> 00:00:20,150
here especially than in my flying

4
00:00:16,490 --> 00:00:22,610
council so this is joint work with my

5
00:00:20,150 --> 00:00:25,580
students in show john and chk i Cory

6
00:00:22,610 --> 00:00:28,130
said my colleagues and homely family and

7
00:00:25,580 --> 00:00:29,570
she machines so I'm presenting how you

8
00:00:28,130 --> 00:00:32,238
this call you may be manipulative on the

9
00:00:29,570 --> 00:00:34,010
web so we know that click is the most

10
00:00:32,238 --> 00:00:35,690
important way that we in care is content

11
00:00:34,010 --> 00:00:37,160
down the web today my free example if

12
00:00:35,690 --> 00:00:38,059
you visit a news web page like this one

13
00:00:37,160 --> 00:00:40,220
bbc.com

14
00:00:38,059 --> 00:00:43,220
if we see some interesting articles what

15
00:00:40,220 --> 00:00:45,080
we would do yuri is suppose on a desktop

16
00:00:43,220 --> 00:00:47,660
browser what do we would do is we will

17
00:00:45,080 --> 00:00:49,430
remove our mouse over some of the titles

18
00:00:47,660 --> 00:00:51,620
of the articles and then we would do a

19
00:00:49,430 --> 00:00:54,979
click so normally the browser would take

20
00:00:51,620 --> 00:00:57,650
us to the destination we want to go to

21
00:00:54,979 --> 00:00:59,869
so in this case we're landing as the

22
00:00:57,650 --> 00:01:01,909
articles page which is good but have you

23
00:00:59,869 --> 00:01:04,309
ever imagined a situation like this like

24
00:01:01,909 --> 00:01:04,908
what if you when we click something can

25
00:01:04,309 --> 00:01:07,580
be wrong

26
00:01:04,909 --> 00:01:09,860
for example the browser still opens a

27
00:01:07,580 --> 00:01:11,960
page but to shows you a different page

28
00:01:09,860 --> 00:01:13,000
that is not hosted on PBS it'll come at

29
00:01:11,960 --> 00:01:16,880
all

30
00:01:13,000 --> 00:01:20,869
so this is actually just an artificial

31
00:01:16,880 --> 00:01:23,270
example created that how people's clicks

32
00:01:20,869 --> 00:01:28,310
men period on the web to control the

33
00:01:23,270 --> 00:01:30,469
urls you visit but how about a real one

34
00:01:28,310 --> 00:01:32,990
so let me demonstrate another ones that

35
00:01:30,469 --> 00:01:35,538
we actually detected in your research so

36
00:01:32,990 --> 00:01:38,600
in this video a virtual one we visit

37
00:01:35,539 --> 00:01:43,159
another webpage and we click on one of

38
00:01:38,600 --> 00:01:46,520
the links so you see a new page actually

39
00:01:43,159 --> 00:01:50,869
is opening the previous one pana Ratan

40
00:01:46,520 --> 00:01:52,759
Lodi and in this page the doors are also

41
00:01:50,869 --> 00:01:55,100
tells user to tap the password to

42
00:01:52,759 --> 00:01:57,319
install the binary so this is actually a

43
00:01:55,100 --> 00:01:59,538
real attack we detect in your research

44
00:01:57,319 --> 00:02:01,999
so we find it for a lot of this kind of

45
00:01:59,539 --> 00:02:04,549
attacks to work by manipulating the

46
00:02:01,999 --> 00:02:06,949
crazy user delivered to a webpage and

47
00:02:04,549 --> 00:02:09,770
they normally want to ask a youtube

48
00:02:06,950 --> 00:02:11,360
video URL control so in this work we are

49
00:02:09,770 --> 00:02:15,050
interesting detecting how JavaScript

50
00:02:11,360 --> 00:02:16,760
code can be used to manipulate research

51
00:02:15,050 --> 00:02:18,950
intercept use Eclipse to control the

52
00:02:16,760 --> 00:02:22,160
users navigation so let me give you a

53
00:02:18,950 --> 00:02:25,369
quick tutorial about how Java Script can

54
00:02:22,160 --> 00:02:27,380
use the to manipulate the user codes so

55
00:02:25,370 --> 00:02:29,360
the first technology through controlling

56
00:02:27,380 --> 00:02:30,230
hyperlinks which are implemented with

57
00:02:29,360 --> 00:02:34,340
the anchor

58
00:02:30,230 --> 00:02:36,140
in the HTML so what do they can do is

59
00:02:34,340 --> 00:02:38,000
they can modify existing one like this

60
00:02:36,140 --> 00:02:40,790
one suppose this shows the simplify

61
00:02:38,000 --> 00:02:43,250
decoder for the same article on bbc.com

62
00:02:40,790 --> 00:02:46,340
so a link is usually wrapped up within

63
00:02:43,250 --> 00:02:47,660
this anchor element where very important

64
00:02:46,340 --> 00:02:49,459
the attributes called ashraf that

65
00:02:47,660 --> 00:02:52,250
controls the default destination of your

66
00:02:49,459 --> 00:02:54,860
navigation using javascript super simple

67
00:02:52,250 --> 00:02:57,739
get a reference to the element the

68
00:02:54,860 --> 00:02:59,629
modified ashraf URL to one you control

69
00:02:57,739 --> 00:03:02,180
and then the coder will become something

70
00:02:59,629 --> 00:03:04,220
like this but really to a normal user is

71
00:03:02,180 --> 00:03:06,709
to still are the same you still the same

72
00:03:04,220 --> 00:03:09,290
and if you click the destination will be

73
00:03:06,709 --> 00:03:11,180
someone something different from the

74
00:03:09,290 --> 00:03:14,209
previous one

75
00:03:11,180 --> 00:03:16,340
the second way for manipulating anchor

76
00:03:14,209 --> 00:03:18,079
elements by creating a huge hyperlink

77
00:03:16,340 --> 00:03:19,819
for example we can have a very large one

78
00:03:18,079 --> 00:03:22,489
that includes a lot of content and

79
00:03:19,819 --> 00:03:24,980
whatever in whichever part of you click

80
00:03:22,489 --> 00:03:27,049
on this in closer area the clean will be

81
00:03:24,980 --> 00:03:29,090
delivered to the same anchor element and

82
00:03:27,049 --> 00:03:30,950
still performing this kind of so-called

83
00:03:29,090 --> 00:03:34,129
attacks is super easy create a new one

84
00:03:30,950 --> 00:03:36,410
attached to the dom and then you can you

85
00:03:34,129 --> 00:03:38,418
can you can like change the Dom

86
00:03:36,410 --> 00:03:40,310
structure in whatever way you want so

87
00:03:38,419 --> 00:03:42,260
the result will be the same so the

88
00:03:40,310 --> 00:03:43,430
second demand technology for

89
00:03:42,260 --> 00:03:46,660
manipulating you the creases through

90
00:03:43,430 --> 00:03:48,530
your ventilation errs which actually

91
00:03:46,660 --> 00:03:50,359
functions that are executed in

92
00:03:48,530 --> 00:03:52,160
JavaScript when some predefined events

93
00:03:50,359 --> 00:03:56,540
happens so you don't really necessarily

94
00:03:52,160 --> 00:03:59,720
need a hyperlink to close an application

95
00:03:56,540 --> 00:04:02,720
you can use a click even handle and set

96
00:03:59,720 --> 00:04:06,530
a free example in this case we can use

97
00:04:02,720 --> 00:04:07,910
JavaScript to attach even another event

98
00:04:06,530 --> 00:04:11,510
listener listening for the click event

99
00:04:07,910 --> 00:04:13,160
on this element and when this is

100
00:04:11,510 --> 00:04:15,078
clickable the user the callback function

101
00:04:13,160 --> 00:04:16,370
here will be as cute either so that is

102
00:04:15,079 --> 00:04:18,789
the users navigation error will be

103
00:04:16,370 --> 00:04:18,789
changed

104
00:04:19,630 --> 00:04:26,330
finally the there is another server

105
00:04:23,990 --> 00:04:28,699
category of technique to intercept user

106
00:04:26,330 --> 00:04:30,199
clicks which we call video deception is

107
00:04:28,699 --> 00:04:31,820
a little this is a little bit of

108
00:04:30,199 --> 00:04:33,860
controversial like in order all people

109
00:04:31,820 --> 00:04:36,169
especially the expert sitting here will

110
00:04:33,860 --> 00:04:37,970
be triggered by this kind of trick so

111
00:04:36,169 --> 00:04:39,740
for video deception the first is in

112
00:04:37,970 --> 00:04:42,530
JavaScript and ooh is Christian mimicry

113
00:04:39,740 --> 00:04:43,969
elements but for example in this page we

114
00:04:42,530 --> 00:04:46,308
have some first party elements

115
00:04:43,969 --> 00:04:49,069
already displayed here the superscript

116
00:04:46,309 --> 00:04:51,949
like a malicious script can create some

117
00:04:49,069 --> 00:04:53,599
other elements that video looks very

118
00:04:51,949 --> 00:04:56,599
similar to the existing ones they can

119
00:04:53,599 --> 00:04:58,399
even swap the waters so that is better

120
00:04:56,599 --> 00:04:59,899
integrated with the existing content and

121
00:04:58,399 --> 00:05:02,749
the user may be triggering to collecting

122
00:04:59,899 --> 00:05:04,819
this part so that is the URL to the

123
00:05:02,749 --> 00:05:07,369
navigation you are maybe intercepted

124
00:05:04,819 --> 00:05:09,139
secondly they can also use a transparent

125
00:05:07,369 --> 00:05:11,089
overlay so if you are familiar with

126
00:05:09,139 --> 00:05:13,339
clickjacking this is one of the way

127
00:05:11,089 --> 00:05:15,199
people were doing for a quick injection

128
00:05:13,339 --> 00:05:18,259
a long time ago but basically you can

129
00:05:15,199 --> 00:05:20,719
create a some large element that

130
00:05:18,259 --> 00:05:22,339
overlays of first party wine so if it's

131
00:05:20,719 --> 00:05:25,099
something like this one then probably a

132
00:05:22,339 --> 00:05:27,229
normal user will knock like but how

133
00:05:25,099 --> 00:05:29,179
about we change the opacity value of

134
00:05:27,229 --> 00:05:31,639
this element so currently it's 100%

135
00:05:29,179 --> 00:05:35,508
opaque so let's reduce the opacity to

136
00:05:31,639 --> 00:05:38,179
50% now we can see through this third

137
00:05:35,509 --> 00:05:39,889
party element but it still looks a

138
00:05:38,179 --> 00:05:42,948
little bit strange people may not click

139
00:05:39,889 --> 00:05:45,639
it necessarily better how about 10% well

140
00:05:42,949 --> 00:05:49,009
now it looks like we have a blueish area

141
00:05:45,639 --> 00:05:51,319
area with brittle background some people

142
00:05:49,009 --> 00:05:54,619
well careful people may see some of the

143
00:05:51,319 --> 00:05:57,319
words here but how about a 1% so if you

144
00:05:54,619 --> 00:06:00,610
change it to 1% then I think this is

145
00:05:57,319 --> 00:06:04,339
barely visible for a lot of humans okay

146
00:06:00,610 --> 00:06:05,539
and if you click it would be colleague

147
00:06:04,339 --> 00:06:07,699
who would be captured by the overlay

148
00:06:05,539 --> 00:06:10,429
element and then you there would be

149
00:06:07,699 --> 00:06:13,579
landing the two URL country by that

150
00:06:10,429 --> 00:06:15,378
hacker so formally your Emoto we can see

151
00:06:13,579 --> 00:06:17,239
your website at user directly with it

152
00:06:15,379 --> 00:06:20,299
which we call first party website here

153
00:06:17,239 --> 00:06:22,369
Hado calm so the website would include

154
00:06:20,299 --> 00:06:25,519
elements that were generated by the

155
00:06:22,369 --> 00:06:28,159
first party directly like for example it

156
00:06:25,519 --> 00:06:30,679
can be parses statically from the raw

157
00:06:28,159 --> 00:06:31,369
HTML code the of course can include a

158
00:06:30,679 --> 00:06:34,669
Java Script

159
00:06:31,369 --> 00:06:36,199
to dynamically insert a new elements but

160
00:06:34,669 --> 00:06:38,329
it's also very common today for

161
00:06:36,199 --> 00:06:40,099
applications to include their content

162
00:06:38,329 --> 00:06:41,809
from third parties so it's very common

163
00:06:40,099 --> 00:06:44,329
to find a third party scripts like this

164
00:06:41,809 --> 00:06:46,339
ones and because they are all loaded in

165
00:06:44,329 --> 00:06:47,869
the same frame so the third part scripts

166
00:06:46,339 --> 00:06:49,339
have the same privileges as first party

167
00:06:47,869 --> 00:06:51,589
scripts which means they can do whatever

168
00:06:49,339 --> 00:06:53,839
see the first party script can do and of

169
00:06:51,589 --> 00:06:57,139
course including creating new elements

170
00:06:53,839 --> 00:06:57,889
like this so immoral way single the

171
00:06:57,139 --> 00:07:00,680
first parties

172
00:06:57,889 --> 00:07:02,180
are trustworthy but is this can be our

173
00:07:00,680 --> 00:07:04,580
liver because for example if the user

174
00:07:02,180 --> 00:07:06,620
directly visited malicious website then

175
00:07:04,580 --> 00:07:08,568
that one that one website is already

176
00:07:06,620 --> 00:07:11,599
malicious you may not be trusted at all

177
00:07:08,569 --> 00:07:14,659
but we're thinking in this work the

178
00:07:11,599 --> 00:07:15,378
first part is our trust worsen the third

179
00:07:14,659 --> 00:07:18,169
part scrip

180
00:07:15,379 --> 00:07:20,000
on the other hand can intercept click on

181
00:07:18,169 --> 00:07:22,669
any element in the same page in the same

182
00:07:20,000 --> 00:07:24,319
frame but we think it's okay for them

183
00:07:22,669 --> 00:07:25,969
for them to intercept the clicks on

184
00:07:24,319 --> 00:07:28,430
elements of their own so we are very

185
00:07:25,970 --> 00:07:30,440
interested in detecting the third-party

186
00:07:28,430 --> 00:07:33,110
scripts collocate interception on

187
00:07:30,440 --> 00:07:35,569
elements nor created by them so to

188
00:07:33,110 --> 00:07:38,960
detect reception we face the several

189
00:07:35,569 --> 00:07:41,090
challenges like the we we are

190
00:07:38,960 --> 00:07:43,340
interesting understanding the behavior

191
00:07:41,090 --> 00:07:45,169
JavaScript but it is well known that

192
00:07:43,340 --> 00:07:47,869
analyzing JavaScript code is a very

193
00:07:45,169 --> 00:07:49,490
difficult it's a dynamic language and on

194
00:07:47,870 --> 00:07:52,190
the other hand some script can be

195
00:07:49,490 --> 00:07:54,349
inserted as an inline script which do

196
00:07:52,190 --> 00:07:55,849
not have this ashraf attributed so it

197
00:07:54,349 --> 00:07:57,710
will be really difficult determined

198
00:07:55,849 --> 00:08:00,319
whether it's really your first party or

199
00:07:57,710 --> 00:08:02,779
third-party script and we also needed to

200
00:08:00,319 --> 00:08:04,669
monitor the creation and the mutation of

201
00:08:02,779 --> 00:08:07,909
some elements for example the hyperlinks

202
00:08:04,669 --> 00:08:10,880
and also the script tags but however in

203
00:08:07,909 --> 00:08:13,219
javascript javascript is unable to tell

204
00:08:10,880 --> 00:08:16,400
the initial script for particular

205
00:08:13,219 --> 00:08:17,960
elements but however in the browser we

206
00:08:16,400 --> 00:08:19,609
do have access to an object called a

207
00:08:17,960 --> 00:08:23,590
mutation observers that allows us to

208
00:08:19,610 --> 00:08:26,659
track the change of a particular element

209
00:08:23,590 --> 00:08:28,520
but the steward does not tell you which

210
00:08:26,659 --> 00:08:30,050
script caused the change and if you want

211
00:08:28,520 --> 00:08:31,758
to watch the whole page you have to

212
00:08:30,050 --> 00:08:34,279
create a new notation observer for use

213
00:08:31,759 --> 00:08:36,020
of the element some people may ask why

214
00:08:34,279 --> 00:08:39,110
don't you use a browser extension well

215
00:08:36,020 --> 00:08:41,539
that's possible but unfortunately

216
00:08:39,110 --> 00:08:43,640
browser extension in yourself is also

217
00:08:41,539 --> 00:08:44,750
develop and mostly using javascript for

218
00:08:43,640 --> 00:08:48,290
the case of a qualm

219
00:08:44,750 --> 00:08:50,089
so it has similar limitation as we

220
00:08:48,290 --> 00:08:52,790
described here so to solve this

221
00:08:50,089 --> 00:08:54,470
challenges we develop the browser based

222
00:08:52,790 --> 00:08:56,870
analysis framework which we'll call

223
00:08:54,470 --> 00:08:59,000
observer so by modifying the browser we

224
00:08:56,870 --> 00:09:00,649
has a browser with the functionalities

225
00:08:59,000 --> 00:09:05,149
that we can track all the events related

226
00:09:00,649 --> 00:09:07,160
to click inception so use chrome as

227
00:09:05,149 --> 00:09:09,199
example in today's browser here consists

228
00:09:07,160 --> 00:09:10,709
of two important parts the first is the

229
00:09:09,199 --> 00:09:12,000
JavaScript engine data

230
00:09:10,710 --> 00:09:14,310
the environment if our JavaScript

231
00:09:12,000 --> 00:09:16,110
program to execute the second why is the

232
00:09:14,310 --> 00:09:19,619
rendering engine that is used for

233
00:09:16,110 --> 00:09:21,720
loading parsing and rendering the

234
00:09:19,620 --> 00:09:23,250
content from remote hosts in the

235
00:09:21,720 --> 00:09:24,990
rendering engine there are several

236
00:09:23,250 --> 00:09:27,210
layers and the two important ones a

237
00:09:24,990 --> 00:09:30,570
JavaScript Banyan layer and the bottom

238
00:09:27,210 --> 00:09:33,780
layer the Dom layer implements the API

239
00:09:30,570 --> 00:09:35,430
is described in the Dom standard and for

240
00:09:33,780 --> 00:09:37,319
charge square between vocals of the API

241
00:09:35,430 --> 00:09:39,599
is like for example creating new

242
00:09:37,320 --> 00:09:42,300
elements or modifying the area

243
00:09:39,600 --> 00:09:44,370
attributes they have to interact ly

244
00:09:42,300 --> 00:09:47,310
invoke the API as defining at one layer

245
00:09:44,370 --> 00:09:49,980
through the JavaScript binding layer so

246
00:09:47,310 --> 00:09:51,479
what we did is by enhancing the

247
00:09:49,980 --> 00:09:53,670
rendering engine and adding or

248
00:09:51,480 --> 00:09:55,980
monitoring code in both Java Script

249
00:09:53,670 --> 00:09:58,800
binding layer and the Dom layer so that

250
00:09:55,980 --> 00:10:01,160
we can observe all these interactions

251
00:09:58,800 --> 00:10:03,900
between JavaScript world and it's done

252
00:10:01,160 --> 00:10:06,329
so let me show an example how we modify

253
00:10:03,900 --> 00:10:08,850
the browser the Chrome browser - like

254
00:10:06,330 --> 00:10:11,010
for example detection is - hyperlinks so

255
00:10:08,850 --> 00:10:12,660
on the top right we have the sample code

256
00:10:11,010 --> 00:10:15,480
of the JavaScript to modify the edge

257
00:10:12,660 --> 00:10:17,370
graph and it's obscuring the JavaScript

258
00:10:15,480 --> 00:10:20,670
engine and the case of Chrome's relate

259
00:10:17,370 --> 00:10:22,860
so when this love code is as cute either

260
00:10:20,670 --> 00:10:24,990
actually you would invoke masterly

261
00:10:22,860 --> 00:10:26,970
increment either in the very pending

262
00:10:24,990 --> 00:10:28,380
layer like this you don't have to read

263
00:10:26,970 --> 00:10:30,150
all the code but the one important thing

264
00:10:28,380 --> 00:10:33,750
to note here is there is an

265
00:10:30,150 --> 00:10:36,329
implementation reference to the anchor

266
00:10:33,750 --> 00:10:38,280
element object and actually there is

267
00:10:36,330 --> 00:10:41,310
another invocation of a method of this

268
00:10:38,280 --> 00:10:43,709
element that of course the real method

269
00:10:41,310 --> 00:10:45,449
implemented in the dawn layer to change

270
00:10:43,710 --> 00:10:47,730
the Ashraf attribute of this anchor

271
00:10:45,450 --> 00:10:50,220
element so what we did is our first to

272
00:10:47,730 --> 00:10:52,830
create a new method in the Dom layer to

273
00:10:50,220 --> 00:10:57,870
lock the changes and this method that

274
00:10:52,830 --> 00:11:01,170
takes her argument which is identifier

275
00:10:57,870 --> 00:11:04,110
of the JavaScript that is doing this

276
00:11:01,170 --> 00:11:06,270
modification together this script ID we

277
00:11:04,110 --> 00:11:09,600
created another helper function in the

278
00:11:06,270 --> 00:11:12,390
very very engine that could return the

279
00:11:09,600 --> 00:11:15,060
script ID of the bottom frames bottom

280
00:11:12,390 --> 00:11:16,890
function frame in the call stack of

281
00:11:15,060 --> 00:11:18,390
course you can also log all the cold

282
00:11:16,890 --> 00:11:20,160
frames in the crosstab but it would be

283
00:11:18,390 --> 00:11:22,260
actually a little bit expensive to do

284
00:11:20,160 --> 00:11:24,089
that so for performance reasons we only

285
00:11:22,260 --> 00:11:27,450
are store the buttons

286
00:11:24,090 --> 00:11:30,570
frames identifiers and then once we have

287
00:11:27,450 --> 00:11:33,650
all the same we only need to add one one

288
00:11:30,570 --> 00:11:36,150
line of code here so that whenever

289
00:11:33,650 --> 00:11:38,370
JavaScript tries to modify the suf

290
00:11:36,150 --> 00:11:40,439
attribute like this or motor encoder

291
00:11:38,370 --> 00:11:41,910
will be invoked and so what's noting

292
00:11:40,440 --> 00:11:43,890
that as this coding no exposed to

293
00:11:41,910 --> 00:11:46,589
JavaScript so there's no way for jasper

294
00:11:43,890 --> 00:11:48,420
to bypass our detection so similarly we

295
00:11:46,590 --> 00:11:50,720
modify the browser to support the

296
00:11:48,420 --> 00:11:54,060
detection of creation of new elements

297
00:11:50,720 --> 00:11:56,460
javascript objects and even handlers so

298
00:11:54,060 --> 00:11:58,589
i will not cover all of them here for vo

299
00:11:56,460 --> 00:12:00,180
deceptions we use some alcohol to

300
00:11:58,590 --> 00:12:02,100
approach it like this for example from

301
00:12:00,180 --> 00:12:05,489
inquiry we were the first to detect two

302
00:12:02,100 --> 00:12:07,650
element groups one first party and one

303
00:12:05,490 --> 00:12:09,240
third party groups then we want to find

304
00:12:07,650 --> 00:12:11,520
out how really similar doing some

305
00:12:09,240 --> 00:12:15,240
structure information like in your CSS

306
00:12:11,520 --> 00:12:17,579
class name number of media elements the

307
00:12:15,240 --> 00:12:20,340
the size and relative size of the media

308
00:12:17,580 --> 00:12:23,400
elements and then we try to do a

309
00:12:20,340 --> 00:12:25,500
similarity calculation and it will means

310
00:12:23,400 --> 00:12:27,120
this is not a perfect solution so there

311
00:12:25,500 --> 00:12:28,500
are tons of better algorithm to do it

312
00:12:27,120 --> 00:12:30,900
but this in order the focus of our work

313
00:12:28,500 --> 00:12:33,360
for transparent overlay elements we are

314
00:12:30,900 --> 00:12:37,980
interested in finding if there could be

315
00:12:33,360 --> 00:12:40,140
a huge element that will cover some

316
00:12:37,980 --> 00:12:42,060
first party elements but however we

317
00:12:40,140 --> 00:12:43,920
don't know how a user would in character

318
00:12:42,060 --> 00:12:45,900
with this page and in water sides of the

319
00:12:43,920 --> 00:12:47,300
browser window so when the user is

320
00:12:45,900 --> 00:12:49,290
scrolling the page probably some

321
00:12:47,300 --> 00:12:51,930
positions of a different elements may

322
00:12:49,290 --> 00:12:54,420
move so we would actually virtually

323
00:12:51,930 --> 00:12:56,400
squirrel this element vertically and

324
00:12:54,420 --> 00:12:59,040
horizontally to calculate the overlap

325
00:12:56,400 --> 00:13:00,930
with first party elements and if we find

326
00:12:59,040 --> 00:13:02,310
the overlap the maximum overlap is

327
00:13:00,930 --> 00:13:03,930
greater than some threshold we know this

328
00:13:02,310 --> 00:13:06,030
could it be some Allen on the cover and

329
00:13:03,930 --> 00:13:07,800
first party potentially then we would

330
00:13:06,030 --> 00:13:09,209
also check the opacity value like for

331
00:13:07,800 --> 00:13:11,520
example if the opacity value is very

332
00:13:09,210 --> 00:13:14,730
small we will label this one as a

333
00:13:11,520 --> 00:13:16,410
transparent overlay but to remember so

334
00:13:14,730 --> 00:13:18,210
we will not report all these elements as

335
00:13:16,410 --> 00:13:20,730
the necessarily malicious we will only

336
00:13:18,210 --> 00:13:23,100
check if they cost a vacation when the

337
00:13:20,730 --> 00:13:25,830
user clicks on them so we implemented

338
00:13:23,100 --> 00:13:28,710
our system based on chromium's

339
00:13:25,830 --> 00:13:30,480
version 64 we use a selenium to

340
00:13:28,710 --> 00:13:33,360
automatically drive the browser to visit

341
00:13:30,480 --> 00:13:35,430
a large set of websites and for all the

342
00:13:33,360 --> 00:13:37,310
elements on the website we would collect

343
00:13:35,430 --> 00:13:40,020
them automatically

344
00:13:37,310 --> 00:13:42,000
to make sure we can finish all the

345
00:13:40,020 --> 00:13:43,260
clicks within one page load so that is a

346
00:13:42,000 --> 00:13:45,780
browser done away to some other pages

347
00:13:43,260 --> 00:13:47,490
were disabled the page navigation in the

348
00:13:45,780 --> 00:13:51,660
browser but still we can lock the URLs

349
00:13:47,490 --> 00:13:55,260
so using this setup we visit hero 250k

350
00:13:51,660 --> 00:13:58,530
websites in the dataset we were able to

351
00:13:55,260 --> 00:14:00,600
load a 90% of them within the 30 second

352
00:13:58,530 --> 00:14:02,760
time out and collect some data here are

353
00:14:00,600 --> 00:14:04,830
not very important so the results are

354
00:14:02,760 --> 00:14:06,270
summarized in this table which you can

355
00:14:04,830 --> 00:14:09,630
find exactly the same data in your paper

356
00:14:06,270 --> 00:14:12,390
so basically we categorize the results

357
00:14:09,630 --> 00:14:14,400
based on the technology techniques they

358
00:14:12,390 --> 00:14:15,810
use to intercept clicks number of cases

359
00:14:14,400 --> 00:14:18,000
number websites we determine the

360
00:14:15,810 --> 00:14:21,770
percentage so we found in the majority

361
00:14:18,000 --> 00:14:24,450
of clicking subject cases are using the

362
00:14:21,770 --> 00:14:26,130
ways to modify hyperlinks especially

363
00:14:24,450 --> 00:14:28,260
modifying first-party hyperlinks by

364
00:14:26,130 --> 00:14:30,540
surprise JavaScript which is clearly

365
00:14:28,260 --> 00:14:32,400
abuse of their privilege we're also

366
00:14:30,540 --> 00:14:34,530
detect event listener base to clear

367
00:14:32,400 --> 00:14:36,840
inception and the video deception spirit

368
00:14:34,530 --> 00:14:41,040
to summarize we find four hundred unique

369
00:14:36,840 --> 00:14:43,020
scripts over six hundred websites and if

370
00:14:41,040 --> 00:14:44,969
you assume the their visitors do not

371
00:14:43,020 --> 00:14:46,949
overlap with each other then in total

372
00:14:44,970 --> 00:14:48,990
the CUDA received 43 million tell

373
00:14:46,950 --> 00:14:50,790
readers but of course not all the users

374
00:14:48,990 --> 00:14:52,530
would have should and the finally let me

375
00:14:50,790 --> 00:14:54,870
present some interesting cases we

376
00:14:52,530 --> 00:14:57,930
started we detected so the same website

377
00:14:54,870 --> 00:14:59,550
magazine web so if you click this is

378
00:14:57,930 --> 00:15:02,250
actually one with the intermediary page

379
00:14:59,550 --> 00:15:04,979
we were directly to the units as to

380
00:15:02,250 --> 00:15:07,740
watch advertisements of probably a fake

381
00:15:04,980 --> 00:15:09,180
Flash Player and the URL is actually

382
00:15:07,740 --> 00:15:11,190
controlled by a service called a tf2

383
00:15:09,180 --> 00:15:13,170
while that provides us some kind of you

384
00:15:11,190 --> 00:15:14,700
are shortening services and if you read

385
00:15:13,170 --> 00:15:17,520
the page they would ask you included

386
00:15:14,700 --> 00:15:20,850
scripts in return for payment whenever

387
00:15:17,520 --> 00:15:22,650
the user clicks any of the link unseen

388
00:15:20,850 --> 00:15:25,110
page the square powers who use the

389
00:15:22,650 --> 00:15:28,020
JavaScript to even handlers to

390
00:15:25,110 --> 00:15:30,960
manipulate user clicks so first users

391
00:15:28,020 --> 00:15:33,210
taken to another intermediary redirect

392
00:15:30,960 --> 00:15:35,850
page and finally landed at landing page

393
00:15:33,210 --> 00:15:39,390
and you can notice that this is actually

394
00:15:35,850 --> 00:15:42,750
pop up the original destinations open in

395
00:15:39,390 --> 00:15:44,100
another tab so this is something Google

396
00:15:42,750 --> 00:15:45,270
claimed in their original version of

397
00:15:44,100 --> 00:15:46,650
Chrome is you have already fix this

398
00:15:45,270 --> 00:15:49,199
problem but unfortunately we find out

399
00:15:46,650 --> 00:15:50,730
this is a force for mimicry can you tell

400
00:15:49,200 --> 00:15:53,459
which element here is created by

401
00:15:50,730 --> 00:15:54,839
party well I don't have the time so let

402
00:15:53,459 --> 00:15:55,349
me just give you the reason to answer

403
00:15:54,839 --> 00:15:57,480
directly

404
00:15:55,350 --> 00:16:00,690
so it's this element that is created by

405
00:15:57,480 --> 00:16:03,510
a box or not you may see there is a very

406
00:16:00,690 --> 00:16:05,550
tiny caption set sponsored so actually

407
00:16:03,510 --> 00:16:08,100
this is common practice for that

408
00:16:05,550 --> 00:16:09,839
industry today to show a zing a

409
00:16:08,100 --> 00:16:12,089
non-intrusive well so you there are more

410
00:16:09,839 --> 00:16:14,040
likely to catch them and finally we also

411
00:16:12,089 --> 00:16:16,649
have a transparent overlay that is

412
00:16:14,040 --> 00:16:19,139
invisible here to realize it it's this

413
00:16:16,649 --> 00:16:22,560
huge pink element that is created by

414
00:16:19,139 --> 00:16:25,199
another edit script and we also see

415
00:16:22,560 --> 00:16:27,239
landing pages like this that the user is

416
00:16:25,199 --> 00:16:29,449
trickling to visiting this kind of

417
00:16:27,240 --> 00:16:32,370
filter of a website so use of

418
00:16:29,449 --> 00:16:35,219
conceptions may be exposed to malicious

419
00:16:32,370 --> 00:16:37,079
content so to conclude we study a new

420
00:16:35,220 --> 00:16:38,940
class of previously abused by third

421
00:16:37,079 --> 00:16:42,930
party JavaScript we implement a system

422
00:16:38,940 --> 00:16:45,930
called observer and we find a 400 more

423
00:16:42,930 --> 00:16:49,319
than 400 Concepcion scripts 600 websites

424
00:16:45,930 --> 00:16:51,810
and we find this kind of attack header

425
00:16:49,320 --> 00:16:54,540
being used as a new way for committing

426
00:16:51,810 --> 00:16:56,489
correctly for what and the users may be

427
00:16:54,540 --> 00:16:58,860
late to malicious content and we can

428
00:16:56,490 --> 00:17:00,480
actually intended the system to stop

429
00:16:58,860 --> 00:17:07,559
them so X I'm happy to take questions

430
00:17:00,480 --> 00:17:09,510
now okay so as before use the mics

431
00:17:07,559 --> 00:17:12,089
name and affiliation in your question so

432
00:17:09,510 --> 00:17:13,709
injury from Johns Hopkins University so

433
00:17:12,089 --> 00:17:16,770
very nice work I like you very much

434
00:17:13,709 --> 00:17:19,770
so I have a question so to observe any

435
00:17:16,770 --> 00:17:21,629
legitimate use of injecting sorority

436
00:17:19,770 --> 00:17:24,569
links for example I can imagine it is

437
00:17:21,630 --> 00:17:26,400
like a translation a third-party script

438
00:17:24,569 --> 00:17:29,280
and it can translate all the pages on

439
00:17:26,400 --> 00:17:30,900
Wow yeah yeah of course there's a lot of

440
00:17:29,280 --> 00:17:33,030
scripts the service revenue can be used

441
00:17:30,900 --> 00:17:34,500
for legitimate purposes and it's very

442
00:17:33,030 --> 00:17:36,090
common today so we are only increasing

443
00:17:34,500 --> 00:17:38,070
if they are abusing their privileges

444
00:17:36,090 --> 00:17:40,590
like this one so that's why we would

445
00:17:38,070 --> 00:17:43,409
treat a cloaca really and a check if the

446
00:17:40,590 --> 00:17:45,240
destiny destination URL a user server

447
00:17:43,410 --> 00:17:47,780
you are not at the one controller by the

448
00:17:45,240 --> 00:17:47,780
first part directly

449
00:17:48,080 --> 00:17:56,040
hello Jeffrey Goldberg from one password

450
00:17:51,419 --> 00:17:57,070
and the problem of dynamically changing

451
00:17:56,040 --> 00:18:00,279
links

452
00:17:57,070 --> 00:18:02,769
is something that we and other password

453
00:18:00,279 --> 00:18:05,169
managers will have looked at and I'm

454
00:18:02,769 --> 00:18:07,960
wondering if you've talked to any of us

455
00:18:05,169 --> 00:18:10,210
about how we detect and defend against

456
00:18:07,960 --> 00:18:13,210
those no we're going to ask me now I

457
00:18:10,210 --> 00:18:15,309
don't know I just know that we do or at

458
00:18:13,210 --> 00:18:18,279
least we worry about it all right

459
00:18:15,309 --> 00:18:19,990
oh yeah unfortunately I didn't so yeah

460
00:18:18,279 --> 00:18:23,880
probably you've been asked to to talk to

461
00:18:19,990 --> 00:18:23,880
you offline about more about this Thanks

462
00:18:25,080 --> 00:18:31,928
from Amazon so how prevalent is this

463
00:18:29,049 --> 00:18:33,610
kind of click interception have you have

464
00:18:31,929 --> 00:18:35,710
you observed that well this is a

465
00:18:33,610 --> 00:18:38,500
waterway we find it from real websites

466
00:18:35,710 --> 00:18:41,139
we visit here 250k websites in the Alta

467
00:18:38,500 --> 00:18:43,360
dataset we only visited a tall frame I

468
00:18:41,139 --> 00:18:45,129
know the front page and it was only one

469
00:18:43,360 --> 00:18:47,080
shot so actually it's interesting that

470
00:18:45,129 --> 00:18:49,480
we found some websites are some scripts

471
00:18:47,080 --> 00:18:50,860
are trying to evade this kind of

472
00:18:49,480 --> 00:18:53,470
detection of my free example they have a

473
00:18:50,860 --> 00:18:55,090
square because that is trying to tell if

474
00:18:53,470 --> 00:18:57,100
the user is a first-time visitor and

475
00:18:55,090 --> 00:18:58,840
they would have set us on timeout so

476
00:18:57,100 --> 00:19:02,199
that they don't do this too frequently

477
00:18:58,840 --> 00:19:02,740
to the users but yeah you or your

478
00:19:02,200 --> 00:19:06,549
environment

479
00:19:02,740 --> 00:19:09,789
so basically 400 scripts 600 websites

480
00:19:06,549 --> 00:19:12,310
visited at that thank you okay all right

481
00:19:09,789 --> 00:19:17,190
the next thing to the speaker again

482
00:19:12,310 --> 00:19:17,190
[Applause]

