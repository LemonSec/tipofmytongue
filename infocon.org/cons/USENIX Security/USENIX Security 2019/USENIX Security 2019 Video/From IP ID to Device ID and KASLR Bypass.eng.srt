1
00:00:10,440 --> 00:00:15,879
thank you so good afternoon and welcome

2
00:00:13,260 --> 00:00:18,340
to my session about

3
00:00:15,880 --> 00:00:21,460
from IP ID to a device ID in case law

4
00:00:18,340 --> 00:00:23,500
bypass this research was done jointly

5
00:00:21,460 --> 00:00:27,730
with Professor Benny Pincus from the

6
00:00:23,500 --> 00:00:32,100
bar-ilan University so this this is all

7
00:00:27,730 --> 00:00:34,780
about user or more explicit more

8
00:00:32,100 --> 00:00:36,550
accurately device tracking why do we

9
00:00:34,780 --> 00:00:39,660
need their that well we don't really

10
00:00:36,550 --> 00:00:41,949
need that it's mostly done for real-time

11
00:00:39,660 --> 00:00:44,110
targeted marketing which we all love to

12
00:00:41,950 --> 00:00:46,660
hate actually John will and their one of

13
00:00:44,110 --> 00:00:48,700
the keynote speakers yesterday called it

14
00:00:46,660 --> 00:00:50,890
nicely across site

15
00:00:48,700 --> 00:00:53,350
tracking and of course we have campaign

16
00:00:50,890 --> 00:00:55,540
measurement on a more positive side we

17
00:00:53,350 --> 00:00:57,730
have the fraud detection and protection

18
00:00:55,540 --> 00:01:01,150
against account hijacking and virus many

19
00:00:57,730 --> 00:01:03,959
other reasons good or bad for a four

20
00:01:01,150 --> 00:01:07,509
device tracking so we're going to use

21
00:01:03,960 --> 00:01:09,880
the IP ID header for device tracking and

22
00:01:07,509 --> 00:01:12,790
just to remind you all very quickly what

23
00:01:09,880 --> 00:01:16,570
IP ID is it's a 16-bit IP header field

24
00:01:12,790 --> 00:01:19,810
used for a packet fragmentation and the

25
00:01:16,570 --> 00:01:22,749
D Forman tation as such it should not

26
00:01:19,810 --> 00:01:25,539
repeat too closely within interval of

27
00:01:22,749 --> 00:01:29,189
minutes ideally for the same source IP

28
00:01:25,539 --> 00:01:31,630
address and destination IP address and

29
00:01:29,189 --> 00:01:34,568
following a twenty plus years of

30
00:01:31,630 --> 00:01:38,079
security research it should also be not

31
00:01:34,569 --> 00:01:41,139
predictable and the implementation of

32
00:01:38,079 --> 00:01:42,758
choice for Windows and for Linux and

33
00:01:41,139 --> 00:01:46,880
Android the stateless protocols like a

34
00:01:42,759 --> 00:01:49,670
UDP and ICMP error follows

35
00:01:46,880 --> 00:01:52,070
Falls the the same the same approach the

36
00:01:49,670 --> 00:01:54,500
same concept having a large area of

37
00:01:52,070 --> 00:01:57,649
counters several thousand counters

38
00:01:54,500 --> 00:01:59,600
having a hash function from the source

39
00:01:57,650 --> 00:02:03,860
IP address and destination IP address in

40
00:01:59,600 --> 00:02:06,559
some secret key into this disarray this

41
00:02:03,860 --> 00:02:08,750
finally this calculating and index using

42
00:02:06,560 --> 00:02:11,630
this hash value incrementing the counter

43
00:02:08,750 --> 00:02:13,760
and the Linux and nano that this extra

44
00:02:11,630 --> 00:02:16,100
twist of adding some extra randomness

45
00:02:13,760 --> 00:02:18,230
based on time and then using the result

46
00:02:16,100 --> 00:02:21,320
and in this case Windows has an extra

47
00:02:18,230 --> 00:02:23,000
twist of adding another hash value of

48
00:02:21,320 --> 00:02:26,000
again the source IP address destination

49
00:02:23,000 --> 00:02:28,400
PRS and another key so you can see that

50
00:02:26,000 --> 00:02:30,590
the structure of the IP ID generation

51
00:02:28,400 --> 00:02:33,920
algorithm in Windows and in Linux and

52
00:02:30,590 --> 00:02:40,280
Android is pretty much similar of course

53
00:02:33,920 --> 00:02:42,260
there are some specific deviations for

54
00:02:40,280 --> 00:02:44,630
for each operating system and we are

55
00:02:42,260 --> 00:02:47,630
going to exploit this structure for

56
00:02:44,630 --> 00:02:50,720
generating a device ID the idea of

57
00:02:47,630 --> 00:02:53,890
attack is that or the general setup of

58
00:02:50,720 --> 00:02:57,140
our attack is that that attacker

59
00:02:53,890 --> 00:02:59,809
generates tracking HTML snippet that

60
00:02:57,140 --> 00:03:01,609
contains some JavaScript code and this

61
00:02:59,810 --> 00:03:04,390
snippet can be embedded in practically

62
00:03:01,610 --> 00:03:07,070
in any side hence cross-site tracking

63
00:03:04,390 --> 00:03:09,859
this snippet will generate it will

64
00:03:07,070 --> 00:03:11,959
calculate this device ID and the snippet

65
00:03:09,860 --> 00:03:13,489
works by forcing the browser to connect

66
00:03:11,959 --> 00:03:15,890
to multiple attacker controlled IP

67
00:03:13,489 --> 00:03:18,590
addresses the attacker then collects the

68
00:03:15,890 --> 00:03:22,339
IP ID for this for the traffic generated

69
00:03:18,590 --> 00:03:23,989
- it's a IP addresses and we show how an

70
00:03:22,340 --> 00:03:26,540
attacker can calculate a device at the

71
00:03:23,989 --> 00:03:29,660
basis of that this device ID will remain

72
00:03:26,540 --> 00:03:33,769
unchanged across browsers network

73
00:03:29,660 --> 00:03:35,930
switches VPNs and privacy mode and

74
00:03:33,769 --> 00:03:38,720
therefore it can be used to track the

75
00:03:35,930 --> 00:03:40,880
user or more accurately the device and

76
00:03:38,720 --> 00:03:42,709
the lovely thing is of course is that

77
00:03:40,880 --> 00:03:44,090
each snippet or each site can use a

78
00:03:42,709 --> 00:03:46,579
different set of destination IP

79
00:03:44,090 --> 00:03:49,250
addresses in other words you cannot use

80
00:03:46,579 --> 00:03:51,470
a specific set of IP addresses in one

81
00:03:49,250 --> 00:03:56,630
side to see how that other side is also

82
00:03:51,470 --> 00:03:59,120
using the same tracking mechanism so we

83
00:03:56,630 --> 00:04:00,450
do that by crypto not crypt analyzing

84
00:03:59,120 --> 00:04:01,620
the IP ID generation

85
00:04:00,450 --> 00:04:05,040
were written both for Windows and

86
00:04:01,620 --> 00:04:08,430
Foligno / Android our attack requires as

87
00:04:05,040 --> 00:04:10,799
I mentioned earlier sending IPS sending

88
00:04:08,430 --> 00:04:13,140
traffic to multiple attacker controlled

89
00:04:10,800 --> 00:04:16,079
IP addresses and collecting the IP IDs

90
00:04:13,140 --> 00:04:17,849
if of the of those packets and then the

91
00:04:16,079 --> 00:04:20,850
interesting part is that we are using

92
00:04:17,850 --> 00:04:22,350
collisions of the that hash function I

93
00:04:20,850 --> 00:04:24,030
mentioned earlier that hash function

94
00:04:22,350 --> 00:04:26,040
that takes the ISOs IP address

95
00:04:24,030 --> 00:04:30,450
destination IP address and turns them in

96
00:04:26,040 --> 00:04:32,580
a key and turns it into an index into

97
00:04:30,450 --> 00:04:35,130
the area of counters we are going to use

98
00:04:32,580 --> 00:04:38,580
collisions of this hash function which

99
00:04:35,130 --> 00:04:39,590
results in in packets for different IP

100
00:04:38,580 --> 00:04:42,810
addresses

101
00:04:39,590 --> 00:04:45,419
having either IP ID generated by the

102
00:04:42,810 --> 00:04:48,780
same counter in different times and we

103
00:04:45,419 --> 00:04:51,570
use that to find the algorithm key

104
00:04:48,780 --> 00:04:54,530
either in in full or in part this key

105
00:04:51,570 --> 00:04:57,300
will effectively be 32 bits to 48 bits

106
00:04:54,530 --> 00:04:59,219
depending on the use case and this case

107
00:04:57,300 --> 00:05:01,050
since disk is essentially unique pair

108
00:04:59,220 --> 00:05:03,650
device up to the birthday paradox it

109
00:05:01,050 --> 00:05:06,120
will serve as the device ID practically

110
00:05:03,650 --> 00:05:09,570
the nice thing about this case that it

111
00:05:06,120 --> 00:05:12,060
is only regenerated at startup and even

112
00:05:09,570 --> 00:05:14,700
nicer with Windows is that this key is

113
00:05:12,060 --> 00:05:17,820
only generated at restart which is not

114
00:05:14,700 --> 00:05:19,830
equal shutdown to start so if you do a

115
00:05:17,820 --> 00:05:22,080
shot on to start the key is not

116
00:05:19,830 --> 00:05:24,120
regenerated it's the same key from from

117
00:05:22,080 --> 00:05:27,870
the from the earlier from the previous

118
00:05:24,120 --> 00:05:30,600
session and obviously since it's a IP

119
00:05:27,870 --> 00:05:32,010
it's at the IP level it's the same key

120
00:05:30,600 --> 00:05:34,289
for all the browser's including the

121
00:05:32,010 --> 00:05:37,860
privacy mode and it's the same key for

122
00:05:34,289 --> 00:05:41,190
all networks including many VPNs and of

123
00:05:37,860 --> 00:05:42,690
course since it's just a one key it's

124
00:05:41,190 --> 00:05:47,039
invariant with respect to a set of

125
00:05:42,690 --> 00:05:49,160
destination IP addresses so let's look

126
00:05:47,039 --> 00:05:51,810
at the windows implementation and we

127
00:05:49,160 --> 00:05:54,300
call better at the counter array which

128
00:05:51,810 --> 00:05:56,849
is of size a bit more than 8,000 a

129
00:05:54,300 --> 00:05:59,099
buckets and IP ID generation algorithm

130
00:05:56,849 --> 00:06:04,050
as we reverse engineer it from the TCP a

131
00:05:59,099 --> 00:06:06,360
TCP IP system windows driver uses the

132
00:06:04,050 --> 00:06:09,210
india calculates the index based only on

133
00:06:06,360 --> 00:06:09,620
the class b network of the destination

134
00:06:09,210 --> 00:06:11,659
IP

135
00:06:09,620 --> 00:06:16,190
which will be which will come very handy

136
00:06:11,660 --> 00:06:20,600
in a moment and then it adds the it it

137
00:06:16,190 --> 00:06:23,740
calculates some it adds some value K 1

138
00:06:20,600 --> 00:06:26,060
exclusive or TK blah blah blah

139
00:06:23,740 --> 00:06:28,480
increments the counter and uses that the

140
00:06:26,060 --> 00:06:33,110
value it calculated earlier as the IP ID

141
00:06:28,480 --> 00:06:35,390
and this T function or over there is the

142
00:06:33,110 --> 00:06:37,970
topless hash function which is a bi

143
00:06:35,390 --> 00:06:40,490
linear function which again comes in

144
00:06:37,970 --> 00:06:43,940
very very handy because it's it's

145
00:06:40,490 --> 00:06:46,400
extremely weak so we attack windows in

146
00:06:43,940 --> 00:06:50,000
two phases in phase one we know that

147
00:06:46,400 --> 00:06:52,159
since the index I are into the air area

148
00:06:50,000 --> 00:06:53,900
of buckets depends only on the Class B

149
00:06:52,160 --> 00:06:56,000
of the network destination IP address

150
00:06:53,900 --> 00:06:59,390
and since only the 15 least significant

151
00:06:56,000 --> 00:07:01,910
bits of the counter are used we take

152
00:06:59,390 --> 00:07:04,219
several like six IP addresses in the

153
00:07:01,910 --> 00:07:06,980
same class b the arctic tiger needs to

154
00:07:04,220 --> 00:07:09,560
set up those addresses in the same class

155
00:07:06,980 --> 00:07:13,940
bits it's quite trivial I did it a sure

156
00:07:09,560 --> 00:07:16,070
very easily and doing some crypto math

157
00:07:13,940 --> 00:07:18,530
here we get up to the situation where in

158
00:07:16,070 --> 00:07:22,430
at the left hand side we have quantity

159
00:07:18,530 --> 00:07:26,450
that we can calculate because we we

160
00:07:22,430 --> 00:07:29,120
guess the beta of of I that's the 15

161
00:07:26,450 --> 00:07:33,560
bits that we that we enumerate over and

162
00:07:29,120 --> 00:07:35,630
then we know the IP idea to position P

163
00:07:33,560 --> 00:07:37,340
we know P and so we can calculate the

164
00:07:35,630 --> 00:07:39,740
left hand side at the right hand side

165
00:07:37,340 --> 00:07:43,400
since we know the IP address as we know

166
00:07:39,740 --> 00:07:45,710
the exclusive-or value so it the only

167
00:07:43,400 --> 00:07:48,140
thing that women remains unknown is the

168
00:07:45,710 --> 00:07:52,580
K at the right hand side hence we have

169
00:07:48,140 --> 00:07:58,070
15 bits with 15 equations over GF 2 on

170
00:07:52,580 --> 00:08:00,440
bits of K and it's naively speaking it

171
00:07:58,070 --> 00:08:02,510
I'd say it's enough to have two such

172
00:08:00,440 --> 00:08:04,580
sets of equation to calculations to

173
00:08:02,510 --> 00:08:07,370
calculate 30 bits of K in practice we

174
00:08:04,580 --> 00:08:10,280
need some more details of course in the

175
00:08:07,370 --> 00:08:15,830
paper but at the end of the day we get

176
00:08:10,280 --> 00:08:17,510
30 bits of K and we can that we move to

177
00:08:15,830 --> 00:08:20,390
the second phase where we take

178
00:08:17,510 --> 00:08:20,969
additional pairs of IP addresses in

179
00:08:20,390 --> 00:08:24,330
addition

180
00:08:20,970 --> 00:08:26,610
a class B's and again we use some

181
00:08:24,330 --> 00:08:29,130
quantity X that we calculate in faith we

182
00:08:26,610 --> 00:08:33,169
can calculate from phase one and arrive

183
00:08:29,130 --> 00:08:36,809
at this two equations one for J equals 0

184
00:08:33,169 --> 00:08:39,510
v bucket and one for J equals 1 the

185
00:08:36,809 --> 00:08:42,449
second packet of a pair and since they

186
00:08:39,510 --> 00:08:46,050
are both equal to the right hand side

187
00:08:42,450 --> 00:08:48,360
being the initial value of this of this

188
00:08:46,050 --> 00:08:53,000
arbitrary counter that is used for those

189
00:08:48,360 --> 00:08:55,740
for the pair we have another 15 bits

190
00:08:53,000 --> 00:08:58,170
elimination power from its each such

191
00:08:55,740 --> 00:09:02,040
pair for this enumeration over the

192
00:08:58,170 --> 00:09:03,860
additional 16 bits of K all together at

193
00:09:02,040 --> 00:09:06,930
the end of the day after phase 2 we get

194
00:09:03,860 --> 00:09:09,300
theoretically 46 bits of K practically

195
00:09:06,930 --> 00:09:11,670
for somewhere between 41 to 45 again

196
00:09:09,300 --> 00:09:14,189
this is all explained in the paper and

197
00:09:11,670 --> 00:09:17,969
this serves us as a device ID for

198
00:09:14,190 --> 00:09:22,260
Windows so one of so a quantity of 32 41

199
00:09:17,970 --> 00:09:24,810
to 45 bits that is generated at boot is

200
00:09:22,260 --> 00:09:26,040
the device ID for window as I expand I

201
00:09:24,810 --> 00:09:27,290
explained right now how to calculate

202
00:09:26,040 --> 00:09:31,650
that

203
00:09:27,290 --> 00:09:33,770
moving to Linux and Android and I want

204
00:09:31,650 --> 00:09:37,199
to do first a quick refresher of what

205
00:09:33,770 --> 00:09:39,000
calories so case allows kernel address

206
00:09:37,200 --> 00:09:44,010
space layout randomization it's a

207
00:09:39,000 --> 00:09:46,590
specific specific use case for a address

208
00:09:44,010 --> 00:09:49,140
space layout randomization SLR and

209
00:09:46,590 --> 00:09:51,900
Azariah is used to mitigate rope attacks

210
00:09:49,140 --> 00:09:54,960
warp is return-oriented programming it's

211
00:09:51,900 --> 00:09:58,020
also used to to deflect job attacks and

212
00:09:54,960 --> 00:10:01,470
similar attacks and the rope attack is

213
00:09:58,020 --> 00:10:04,170
based on chaining small snippets of code

214
00:10:01,470 --> 00:10:06,690
that are called Rob gadgets to form a

215
00:10:04,170 --> 00:10:09,420
malicious program now this Rob gadgets

216
00:10:06,690 --> 00:10:12,690
needs to resign it are pieces of code

217
00:10:09,420 --> 00:10:15,870
that the attacker the attacker knows

218
00:10:12,690 --> 00:10:19,050
where were to locate in the in the

219
00:10:15,870 --> 00:10:21,300
memory of the target process so in order

220
00:10:19,050 --> 00:10:23,400
to mitigate such attack SLR was invented

221
00:10:21,300 --> 00:10:25,740
in SLI simply randomizes the image load

222
00:10:23,400 --> 00:10:27,600
address of modules programs and pieces

223
00:10:25,740 --> 00:10:29,400
and other useful pieces of code to

224
00:10:27,600 --> 00:10:32,250
prevent the attacker from knowing the

225
00:10:29,400 --> 00:10:33,720
locations of those gadgets case'll are

226
00:10:32,250 --> 00:10:35,699
obviously does the same

227
00:10:33,720 --> 00:10:38,060
the kernel level and at a minimum it

228
00:10:35,699 --> 00:10:41,160
randomized the kernel image load address

229
00:10:38,060 --> 00:10:45,359
and I want to stress that enumeration in

230
00:10:41,160 --> 00:10:47,069
four of the random offset is quite not

231
00:10:45,360 --> 00:10:50,519
applicable at the kernel level because

232
00:10:47,069 --> 00:10:52,979
each miss each wrong guess will get the

233
00:10:50,519 --> 00:10:55,439
operating system to crash and or freeze

234
00:10:52,980 --> 00:10:57,089
this is of course very invasive and it's

235
00:10:55,439 --> 00:10:59,310
time-consuming takes time for the

236
00:10:57,089 --> 00:11:01,410
operating system to load itself at so

237
00:10:59,310 --> 00:11:04,500
quite impractical the attacker really

238
00:11:01,410 --> 00:11:07,560
needs to know the offset of the of the

239
00:11:04,500 --> 00:11:12,000
random offset of of the Kasler in order

240
00:11:07,560 --> 00:11:14,910
to mount a rope attack so it so having a

241
00:11:12,000 --> 00:11:17,250
case cell or bypass means or it is

242
00:11:14,910 --> 00:11:20,370
equals to knowing the kernel image

243
00:11:17,250 --> 00:11:25,199
address offset and this will be useful

244
00:11:20,370 --> 00:11:27,990
in a moment so the IP ID generation

245
00:11:25,199 --> 00:11:31,519
algorithm for linux an android-only for

246
00:11:27,990 --> 00:11:34,170
a stateless protocols like UDP and ICMP

247
00:11:31,519 --> 00:11:36,480
the algorithm simply uses a keyed hash

248
00:11:34,170 --> 00:11:39,059
of over the destination IP address the

249
00:11:36,480 --> 00:11:41,399
source IP address a protocol which is 17

250
00:11:39,059 --> 00:11:45,990
for UDP it's it's constant part of the

251
00:11:41,399 --> 00:11:48,149
IP RFC and something and G of net which

252
00:11:45,990 --> 00:11:50,309
I will touch in a moment and then

253
00:11:48,149 --> 00:11:53,399
there's this is the index to the array

254
00:11:50,309 --> 00:11:56,430
we take the bucket it detect the counter

255
00:11:53,399 --> 00:12:00,269
value in that bucket we add 1 to it and

256
00:11:56,430 --> 00:12:02,939
we also add a random quantity between 0

257
00:12:00,269 --> 00:12:05,160
and the time elapsing between now and

258
00:12:02,939 --> 00:12:09,180
the previous time this bucket was

259
00:12:05,160 --> 00:12:14,519
updated and we use that for the IP idea

260
00:12:09,180 --> 00:12:19,258
as well and we have in this case 2000

261
00:12:14,519 --> 00:12:22,759
counters and this timer is is is the

262
00:12:19,259 --> 00:12:26,899
chiefest timer which is a 100 Hertz

263
00:12:22,759 --> 00:12:31,290
250 Hertz or 300 Hertz clock counter

264
00:12:26,899 --> 00:12:35,009
initialized at boot what is net net is

265
00:12:31,290 --> 00:12:38,779
actually a kernel address of a static

266
00:12:35,009 --> 00:12:42,240
kernel variable so it has its offset

267
00:12:38,779 --> 00:12:44,459
known from it has a known offset from

268
00:12:42,240 --> 00:12:46,330
the kernel image load address up to of

269
00:12:44,459 --> 00:12:48,699
course a SLR

270
00:12:46,330 --> 00:12:50,380
which of course the builds dependent but

271
00:12:48,700 --> 00:12:52,600
we assume that the attacker can figure

272
00:12:50,380 --> 00:12:55,180
out the exact build it's it's pretty

273
00:12:52,600 --> 00:12:57,880
easy at least for many on Linux and

274
00:12:55,180 --> 00:13:00,969
Android models and G is just a function

275
00:12:57,880 --> 00:13:05,140
that shifts all those random ksl R bits

276
00:13:00,970 --> 00:13:07,510
offset bits into the low 32 bits of of

277
00:13:05,140 --> 00:13:10,060
the result so the result the result is

278
00:13:07,510 --> 00:13:14,590
32 bits including that that includes

279
00:13:10,060 --> 00:13:17,219
bits from the case LR offset and the

280
00:13:14,590 --> 00:13:19,540
underlying issue in Linux and Android

281
00:13:17,220 --> 00:13:22,150
Apparel appears to be the fact that they

282
00:13:19,540 --> 00:13:24,520
do use a crypt or not a phenomenal

283
00:13:22,150 --> 00:13:25,959
crypto this hash function is not overly

284
00:13:24,520 --> 00:13:28,660
strong but at least it has some

285
00:13:25,960 --> 00:13:31,870
cryptographic value as opposed to linear

286
00:13:28,660 --> 00:13:35,500
function for example but it uses so with

287
00:13:31,870 --> 00:13:38,770
a ridiculously small key space of 32

288
00:13:35,500 --> 00:13:41,620
bits so the attack goes is following

289
00:13:38,770 --> 00:13:43,480
it's a bit simplified version in the

290
00:13:41,620 --> 00:13:45,340
browser will force the browser the

291
00:13:43,480 --> 00:13:49,420
snippet forces the browser to send a

292
00:13:45,340 --> 00:13:51,670
burst of say 400 UDP packets one to each

293
00:13:49,420 --> 00:13:53,469
IP address that the attacker control so

294
00:13:51,670 --> 00:13:56,050
the attacker needs to control like 400

295
00:13:53,470 --> 00:13:59,500
IP bug IP addresses it's doable it's not

296
00:13:56,050 --> 00:14:03,089
within our budget but it's doable now

297
00:13:59,500 --> 00:14:07,210
what happens when two such IP address IP

298
00:14:03,090 --> 00:14:09,160
addresses have collision a collision so

299
00:14:07,210 --> 00:14:12,490
that they have the same index into the

300
00:14:09,160 --> 00:14:15,699
counter array this means that the time

301
00:14:12,490 --> 00:14:18,040
elapsed between those two calculations

302
00:14:15,700 --> 00:14:19,600
of IP ID is pretty small because we are

303
00:14:18,040 --> 00:14:22,870
in a burst and empirically we are

304
00:14:19,600 --> 00:14:26,380
talking about less than 0.6 seconds so

305
00:14:22,870 --> 00:14:29,500
even with the worst case clock at 300

306
00:14:26,380 --> 00:14:32,530
Hertz we are talking about less than 180

307
00:14:29,500 --> 00:14:34,690
so the difference in IP ID values in

308
00:14:32,530 --> 00:14:37,810
between those such packets would be less

309
00:14:34,690 --> 00:14:42,100
than 180 this is as opposed to the

310
00:14:37,810 --> 00:14:45,040
average 32,000 on something that you get

311
00:14:42,100 --> 00:14:48,570
for two random IP addresses and two

312
00:14:45,040 --> 00:14:52,240
random IP IDs so obviously it's easy to

313
00:14:48,570 --> 00:14:53,920
find candidates for for such bucket

314
00:14:52,240 --> 00:14:56,410
collisions and we do that we collect

315
00:14:53,920 --> 00:14:59,500
pairs of IP addresses that obey that

316
00:14:56,410 --> 00:15:02,170
this Delta ID ID less than 100

317
00:14:59,500 --> 00:15:04,480
lady and of course there will be false

318
00:15:02,170 --> 00:15:07,300
positive but we will have a large body

319
00:15:04,480 --> 00:15:09,790
of of true positives so then we

320
00:15:07,300 --> 00:15:12,459
enumerate over the 32-bit key and if we

321
00:15:09,790 --> 00:15:14,410
have newer Android kernels and Linux

322
00:15:12,460 --> 00:15:16,270
kernels we also need to a tournament

323
00:15:14,410 --> 00:15:17,380
over the castle our set which is nine

324
00:15:16,270 --> 00:15:19,810
bits for Unix

325
00:15:17,380 --> 00:15:22,870
following up sorry in sixteen bits for

326
00:15:19,810 --> 00:15:25,989
for Android and for each key we count

327
00:15:22,870 --> 00:15:28,090
the number of of a real bucket

328
00:15:25,990 --> 00:15:30,610
collisions inside our candidate pool and

329
00:15:28,090 --> 00:15:32,590
we calculate in the paper

330
00:15:30,610 --> 00:15:35,980
good threshold of eleven so if the

331
00:15:32,590 --> 00:15:38,410
number of true true positives go is

332
00:15:35,980 --> 00:15:40,870
above eleven we found the good keys and

333
00:15:38,410 --> 00:15:43,060
the good offset now this can be a CPU

334
00:15:40,870 --> 00:15:46,210
intensive especially with in the case of

335
00:15:43,060 --> 00:15:50,500
newer Android where we have 48 bits to

336
00:15:46,210 --> 00:15:52,930
enumerate but the upside is that we also

337
00:15:50,500 --> 00:15:55,900
find the K cell are offset and therefore

338
00:15:52,930 --> 00:15:59,949
we have a case alibi pass and so this

339
00:15:55,900 --> 00:16:02,890
this kid is 32 bits to 48 bits depending

340
00:15:59,950 --> 00:16:05,170
on the Android the kernel version serves

341
00:16:02,890 --> 00:16:09,610
in the Linux tone and Android as the

342
00:16:05,170 --> 00:16:11,800
device ID so of course we updated we

343
00:16:09,610 --> 00:16:14,440
notified with Microsoft and the Linux

344
00:16:11,800 --> 00:16:17,010
Foundation and Microsoft fixed in in

345
00:16:14,440 --> 00:16:21,670
April 2000 and 19 and issued the CV

346
00:16:17,010 --> 00:16:25,390
Linux fixed in april/may timeframe they

347
00:16:21,670 --> 00:16:29,380
also had us contribute effects to the

348
00:16:25,390 --> 00:16:35,800
older 3x branches and issue and we issue

349
00:16:29,380 --> 00:16:39,939
to CVS and so you can relax everything

350
00:16:35,800 --> 00:16:42,160
is now fixed and the conclusions we have

351
00:16:39,940 --> 00:16:44,170
from this from this research are that

352
00:16:42,160 --> 00:16:46,600
the security and privacy are concerned

353
00:16:44,170 --> 00:16:48,849
even when generating seemingly non

354
00:16:46,600 --> 00:16:53,290
security data such as this God forsaken

355
00:16:48,850 --> 00:16:55,060
IP header we recommend of course using

356
00:16:53,290 --> 00:16:59,110
industrial-strength crypto as opposed to

357
00:16:55,060 --> 00:17:01,780
linear functions we recommend using

358
00:16:59,110 --> 00:17:04,420
adequate size care rather than 32 bits

359
00:17:01,780 --> 00:17:07,030
and of course we recommend not using

360
00:17:04,420 --> 00:17:11,230
sensitive data such as kernel addresses

361
00:17:07,030 --> 00:17:12,770
as part of your key and that's it thank

362
00:17:11,230 --> 00:17:20,410
you very much

363
00:17:12,770 --> 00:17:20,410
[Applause]

364
00:17:21,869 --> 00:17:32,110
do any questions for a speaker I have

365
00:17:29,740 --> 00:17:34,419
one part that I didn't get which is for

366
00:17:32,110 --> 00:17:36,908
the Linux and Android attacks you

367
00:17:34,419 --> 00:17:39,340
require UDP packets to be sent so how

368
00:17:36,909 --> 00:17:42,010
does the attacker get the victim to send

369
00:17:39,340 --> 00:17:44,470
UDP packets to it excellent question and

370
00:17:42,010 --> 00:17:46,990
actually puzzled us a bit and we found

371
00:17:44,470 --> 00:17:51,159
that you can do that actually with two

372
00:17:46,990 --> 00:17:53,980
methods we used in our research stun

373
00:17:51,159 --> 00:17:59,350
packets over WebRTC which you can emit

374
00:17:53,980 --> 00:18:01,510
through this with html5 html5 api's from

375
00:17:59,350 --> 00:18:03,279
JavaScript you can do that actually it's

376
00:18:01,510 --> 00:18:06,730
it's and the nice thing about it is that

377
00:18:03,279 --> 00:18:09,370
it's bursty but you can also in Google

378
00:18:06,730 --> 00:18:12,130
Chrome you can also use a Jake quick

379
00:18:09,370 --> 00:18:15,250
because it's over UDP but we didn't

380
00:18:12,130 --> 00:18:17,620
bother with that and then for both

381
00:18:15,250 --> 00:18:20,049
attacks on Windows and Linux and Android

382
00:18:17,620 --> 00:18:20,500
how much time are we talking about in

383
00:18:20,049 --> 00:18:23,230
order

384
00:18:20,500 --> 00:18:25,899
well time in the in the in the snippet

385
00:18:23,230 --> 00:18:28,360
or calculation time world time to

386
00:18:25,899 --> 00:18:31,239
actually get the to get the key broke so

387
00:18:28,360 --> 00:18:34,090
calculation time like attack time yeah

388
00:18:31,240 --> 00:18:40,929
so in in Windows we actually have it

389
00:18:34,090 --> 00:18:43,360
like sub sub second and in Linux if

390
00:18:40,929 --> 00:18:47,470
we're talking about 32-bit enumeration

391
00:18:43,360 --> 00:18:52,299
you can do it in good hardware you could

392
00:18:47,470 --> 00:18:57,940
do it in seconds if I did I did break a

393
00:18:52,299 --> 00:19:03,879
41 bit Linux key with 32 bits plus plus

394
00:18:57,940 --> 00:19:09,220
9 bits of offset 12 hours run of but

395
00:19:03,880 --> 00:19:15,399
bottom of a very average machine let's

396
00:19:09,220 --> 00:19:17,980
say of course it gets more it gets less

397
00:19:15,399 --> 00:19:20,080
practical 48 bits but still if you have

398
00:19:17,980 --> 00:19:22,230
enough horsepower you can do that as

399
00:19:20,080 --> 00:19:22,230
well

400
00:19:24,800 --> 00:19:28,450
okay let's thank our speaker again thank

401
00:19:27,600 --> 00:19:33,169
you

402
00:19:28,450 --> 00:19:33,170
[Applause]

