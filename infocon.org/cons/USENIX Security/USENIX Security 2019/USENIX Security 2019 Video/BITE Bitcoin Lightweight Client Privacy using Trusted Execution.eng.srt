1
00:00:10,540 --> 00:00:16,710
so Thank You Allah for the introduction

2
00:00:14,430 --> 00:00:19,439
and thank you all for coming to the

3
00:00:16,710 --> 00:00:22,019
so this is the joint work between ETH

4
00:00:19,439 --> 00:00:23,460
Zurich and an EC labs in Europe what

5
00:00:22,019 --> 00:00:25,590
we're going to talk about today is about

6
00:00:23,460 --> 00:00:28,469
light weight about the light weight

7
00:00:25,590 --> 00:00:31,439
client privacy in Bitcoin using trusted

8
00:00:28,469 --> 00:00:35,129
execution so to start off a little bit

9
00:00:31,439 --> 00:00:37,530
just the characteristics of a Bitcoin we

10
00:00:35,129 --> 00:00:40,829
all know I mean it's the first and still

11
00:00:37,530 --> 00:00:44,309
most popular crypto currency based on

12
00:00:40,829 --> 00:00:47,640
blockchain and since its inception in

13
00:00:44,309 --> 00:00:50,280
2008 it has really fueled considerable

14
00:00:47,640 --> 00:00:52,230
interest in decentralized currencies and

15
00:00:50,280 --> 00:00:54,179
other blockchain applications so I mean

16
00:00:52,230 --> 00:00:56,218
as you can see the overall market cap

17
00:00:54,179 --> 00:01:00,329
currently is over two hundred billion US

18
00:00:56,219 --> 00:01:02,940
dollars it's it's still very heavily it

19
00:01:00,329 --> 00:01:06,509
is heavily used with more than 360,000

20
00:01:02,940 --> 00:01:09,030
transactions per day and with some

21
00:01:06,509 --> 00:01:13,759
overall ok throughput and latency while

22
00:01:09,030 --> 00:01:16,289
considering the technical limitations so

23
00:01:13,759 --> 00:01:19,050
to dwell in a little bit deeper into the

24
00:01:16,289 --> 00:01:21,060
characteristics so the one of the main

25
00:01:19,050 --> 00:01:24,479
characters of Bitcoin is that it has

26
00:01:21,060 --> 00:01:26,369
significant deployment issue and this is

27
00:01:24,479 --> 00:01:29,670
client requirement so if you really want

28
00:01:26,369 --> 00:01:30,990
to have a Bitcoin full node well you

29
00:01:29,670 --> 00:01:35,759
need to download and process the entire

30
00:01:30,990 --> 00:01:37,829
chain which accounts to around 230 Giga

31
00:01:35,759 --> 00:01:40,200
bytes right now and participating in the

32
00:01:37,829 --> 00:01:44,820
peer-to-peer network also carries high

33
00:01:40,200 --> 00:01:47,369
communication overhead Bitcoin offers

34
00:01:44,820 --> 00:01:50,100
partial anonymity achieved through

35
00:01:47,369 --> 00:01:52,020
pseudonymity so what are the

36
00:01:50,100 --> 00:01:53,880
implications of this so using some

37
00:01:52,020 --> 00:01:57,149
mobile clients for transaction

38
00:01:53,880 --> 00:01:59,070
confirmation is usually infeasible to

39
00:01:57,149 --> 00:02:01,460
address I mean to address this problem

40
00:01:59,070 --> 00:02:03,508
most major block teens and Bitcoin alike

41
00:02:01,460 --> 00:02:05,939
support the so called lightweight

42
00:02:03,509 --> 00:02:08,669
clients that outsource most of the

43
00:02:05,939 --> 00:02:12,060
computational and storage burden to the

44
00:02:08,669 --> 00:02:14,548
full blockchain nodes however the

45
00:02:12,060 --> 00:02:17,040
problem with that is that the live

46
00:02:14,549 --> 00:02:19,350
clients have full resilience full

47
00:02:17,040 --> 00:02:22,530
reliance on the full node that stores

48
00:02:19,350 --> 00:02:24,340
the entire chain which in essence if you

49
00:02:22,530 --> 00:02:27,700
need the full node to

50
00:02:24,340 --> 00:02:29,920
process your requests well you lose the

51
00:02:27,700 --> 00:02:34,380
privacy even the pseudonymity that the

52
00:02:29,920 --> 00:02:38,859
Bitcoin offers you per se you lose it

53
00:02:34,380 --> 00:02:39,850
with the lightweight client so why why

54
00:02:38,860 --> 00:02:42,640
is this important

55
00:02:39,850 --> 00:02:45,640
so as the recent as one of the study

56
00:02:42,640 --> 00:02:47,440
says so basically there's around five

57
00:02:45,640 --> 00:02:50,799
point eight to eleven million active

58
00:02:47,440 --> 00:02:52,359
Bitcoin different Bitcoin wallets and

59
00:02:50,800 --> 00:02:55,540
there's only around ten thousand full

60
00:02:52,360 --> 00:02:57,010
nodes which means that the estimation

61
00:02:55,540 --> 00:02:58,890
from one of the recent work says that

62
00:02:57,010 --> 00:03:03,390
from four to nine million

63
00:02:58,890 --> 00:03:11,410
wallets are actually lightweight clients

64
00:03:03,390 --> 00:03:13,720
so to address this concern the original

65
00:03:11,410 --> 00:03:16,420
Bitcoin paper also proposed the solution

66
00:03:13,720 --> 00:03:18,550
called simplified payment verification

67
00:03:16,420 --> 00:03:20,859
well in this technique the light clients

68
00:03:18,550 --> 00:03:22,690
store only the block headers check their

69
00:03:20,860 --> 00:03:25,209
proof of work puzzles and then request

70
00:03:22,690 --> 00:03:27,130
their own transactions and the Myrtle

71
00:03:25,209 --> 00:03:29,560
pads they're needed to verify their

72
00:03:27,130 --> 00:03:31,269
presence into blocks full node that

73
00:03:29,560 --> 00:03:31,989
stores the entire chain so how it

74
00:03:31,269 --> 00:03:33,940
actually works

75
00:03:31,989 --> 00:03:34,959
well you have a full node you have the

76
00:03:33,940 --> 00:03:36,579
light client or not a

77
00:03:34,959 --> 00:03:40,030
resource-constrained device like a

78
00:03:36,580 --> 00:03:41,880
mobile phone tablet laptop etc you

79
00:03:40,030 --> 00:03:44,830
deliver the addresses to the full node

80
00:03:41,880 --> 00:03:47,200
the full node processes it scans blocks

81
00:03:44,830 --> 00:03:50,290
for transactions related to that address

82
00:03:47,200 --> 00:03:54,010
and gives you back the matching

83
00:03:50,290 --> 00:03:55,150
transactions along with miracle pads so

84
00:03:54,010 --> 00:03:58,060
this works

85
00:03:55,150 --> 00:04:03,670
however as said before sharing the

86
00:03:58,060 --> 00:04:05,440
addresses completely breaks privacy so

87
00:04:03,670 --> 00:04:07,149
the other approach that was developed

88
00:04:05,440 --> 00:04:10,720
later on it's called improvement

89
00:04:07,150 --> 00:04:12,730
proposal bit 37 actually introduces

90
00:04:10,720 --> 00:04:14,440
bloom filters that allow the light

91
00:04:12,730 --> 00:04:17,440
client to request a subset of all

92
00:04:14,440 --> 00:04:19,750
transactions in the in the blocks that

93
00:04:17,440 --> 00:04:23,130
you're interested about to preserve some

94
00:04:19,750 --> 00:04:25,570
privacy without them needing to download

95
00:04:23,130 --> 00:04:28,210
the full chain how it actually works is

96
00:04:25,570 --> 00:04:31,450
you define a set of transactions with

97
00:04:28,210 --> 00:04:33,520
four positives and then request the full

98
00:04:31,450 --> 00:04:36,400
node delivered to you essentially this

99
00:04:33,520 --> 00:04:39,250
approach presents a trade-off between

100
00:04:36,400 --> 00:04:45,219
the communication efficiency and privacy

101
00:04:39,250 --> 00:04:47,650
however recent work has also shown that

102
00:04:45,220 --> 00:04:52,599
sharing the filter still breaks privacy

103
00:04:47,650 --> 00:04:55,690
with a high confidence of above 99% so

104
00:04:52,599 --> 00:04:58,270
you can really this actually effectively

105
00:04:55,690 --> 00:04:59,130
does not bring you privacy again so what

106
00:04:58,270 --> 00:05:01,780
can we do next

107
00:04:59,130 --> 00:05:05,560
well what about sharing addresses with a

108
00:05:01,780 --> 00:05:07,119
trusted execution environment and to go

109
00:05:05,560 --> 00:05:09,070
with that I'll explain a little bit what

110
00:05:07,120 --> 00:05:11,320
I mean by that so in general trusted

111
00:05:09,070 --> 00:05:13,630
computing as you all might already know

112
00:05:11,320 --> 00:05:16,419
broad term the refers the set of

113
00:05:13,630 --> 00:05:18,909
technologies and proposals that resolve

114
00:05:16,419 --> 00:05:22,000
these computer security problems to

115
00:05:18,910 --> 00:05:23,770
Hardware it materializes to trusted

116
00:05:22,000 --> 00:05:26,200
execution environments that effectively

117
00:05:23,770 --> 00:05:29,169
enable isolated execution within a

118
00:05:26,200 --> 00:05:31,000
user's system so basically in generally

119
00:05:29,169 --> 00:05:33,760
these are secure integrity protected

120
00:05:31,000 --> 00:05:36,370
environments that provide processing

121
00:05:33,760 --> 00:05:39,430
memory and storage capabilities over the

122
00:05:36,370 --> 00:05:41,770
last few decades we had many examples of

123
00:05:39,430 --> 00:05:43,690
these trusted execution environments

124
00:05:41,770 --> 00:05:46,120
like smart cards aren't trusts so on the

125
00:05:43,690 --> 00:05:48,550
recent one with RISC five keystone etc

126
00:05:46,120 --> 00:05:50,710
and one of them is Intel SGX so I'll

127
00:05:48,550 --> 00:05:52,330
give a it's it's not a new one anymore

128
00:05:50,710 --> 00:05:56,020
it was a couple of years ago so I'll

129
00:05:52,330 --> 00:05:58,719
just give a brief overview what SGX is

130
00:05:56,020 --> 00:06:01,479
well it's an it's it's coming from Intel

131
00:05:58,720 --> 00:06:03,520
it's an architecture containing a set of

132
00:06:01,479 --> 00:06:06,130
new instructions in terms kind of

133
00:06:03,520 --> 00:06:07,900
protective mechanisms and key material

134
00:06:06,130 --> 00:06:09,940
in the CPU

135
00:06:07,900 --> 00:06:12,310
what it effectively provides you is that

136
00:06:09,940 --> 00:06:14,860
you have a runtime isolation full memory

137
00:06:12,310 --> 00:06:16,930
encryption of the enclaved code ceiling

138
00:06:14,860 --> 00:06:19,090
to store data locally under this can

139
00:06:16,930 --> 00:06:22,120
attestation that enables you to verify a

140
00:06:19,090 --> 00:06:24,429
specific end clave of protected code is

141
00:06:22,120 --> 00:06:26,740
running in an SGX environment and as you

142
00:06:24,430 --> 00:06:29,080
can really prove it the trust model

143
00:06:26,740 --> 00:06:30,820
itself is just the CPU and the protected

144
00:06:29,080 --> 00:06:33,039
enclaves which is separated from the

145
00:06:30,820 --> 00:06:38,070
untrusted system software including the

146
00:06:33,039 --> 00:06:41,020
OS that resides outside OneNote

147
00:06:38,070 --> 00:06:42,520
important one is that also the recent

148
00:06:41,020 --> 00:06:46,000
work has showed that these protective

149
00:06:42,520 --> 00:06:47,349
mechanisms can be over passed especially

150
00:06:46,000 --> 00:06:49,689
to a side channel

151
00:06:47,349 --> 00:06:53,199
side-channel attacks but we'll talk a

152
00:06:49,689 --> 00:06:56,889
little bit more about that later so if

153
00:06:53,199 --> 00:06:58,689
you go back to our Stroman solutions so

154
00:06:56,889 --> 00:07:01,719
what what happens if we share the

155
00:06:58,689 --> 00:07:06,159
addresses with a te or in this specific

156
00:07:01,719 --> 00:07:08,498
case with an SG x anklet so we add an

157
00:07:06,159 --> 00:07:10,539
anklet here and you know based on the

158
00:07:08,499 --> 00:07:12,189
based on the characteristics it should

159
00:07:10,539 --> 00:07:13,659
all be fine you deliver the addresses

160
00:07:12,189 --> 00:07:16,270
the enclaves the end click does the work

161
00:07:13,659 --> 00:07:20,259
for you brings back your result your

162
00:07:16,270 --> 00:07:22,289
Saviour it's privacy however it's better

163
00:07:20,259 --> 00:07:24,339
but the anklet is still leaked and

164
00:07:22,289 --> 00:07:26,639
privacy is a problem is mentioned

165
00:07:24,339 --> 00:07:28,719
earlier so through side-channel attacks

166
00:07:26,639 --> 00:07:30,580
what if we would also deliver the

167
00:07:28,719 --> 00:07:32,439
private key to the full node well if the

168
00:07:30,580 --> 00:07:35,979
anklet would leak the client could also

169
00:07:32,439 --> 00:07:39,099
be able to lose all the money related to

170
00:07:35,979 --> 00:07:43,869
a specific world so this again actually

171
00:07:39,099 --> 00:07:45,550
doesn't really work out of the box so it

172
00:07:43,869 --> 00:07:46,569
seems so that none of these strong

173
00:07:45,550 --> 00:07:50,979
solutions

174
00:07:46,569 --> 00:07:53,800
present an easy to apply solution to our

175
00:07:50,979 --> 00:07:57,519
problem so but let's stick to the TE

176
00:07:53,800 --> 00:08:01,330
story and let's see what we can do to

177
00:07:57,519 --> 00:08:02,949
make it happen so what are the

178
00:08:01,330 --> 00:08:05,318
challenges of this isolated execution

179
00:08:02,949 --> 00:08:07,389
and the leakage so basically the CPU

180
00:08:05,319 --> 00:08:10,689
doesn't force that other software cannot

181
00:08:07,389 --> 00:08:13,949
access the enclaved memory and the

182
00:08:10,689 --> 00:08:16,749
enclaves are protected however physical

183
00:08:13,949 --> 00:08:21,279
resources in terms of for example CPU

184
00:08:16,749 --> 00:08:23,169
cache our shared side channels is not a

185
00:08:21,279 --> 00:08:24,729
discovery that the the edge X is

186
00:08:23,169 --> 00:08:26,948
susceptible to side channels because

187
00:08:24,729 --> 00:08:28,050
even in the original documentation from

188
00:08:26,949 --> 00:08:30,430
SGX

189
00:08:28,050 --> 00:08:33,219
it says the software side channels might

190
00:08:30,430 --> 00:08:35,919
be possible and first first five

191
00:08:33,219 --> 00:08:38,560
channels were found almost immediately

192
00:08:35,919 --> 00:08:42,130
after the technology went out

193
00:08:38,559 --> 00:08:43,958
so essentially SGX itself does not

194
00:08:42,130 --> 00:08:46,269
provide the protection against external

195
00:08:43,958 --> 00:08:48,699
and internal information leakage when I

196
00:08:46,269 --> 00:08:50,589
say external I mean anything that is

197
00:08:48,699 --> 00:08:52,990
related that can be observed by the OS

198
00:08:50,589 --> 00:08:56,439
so accessing to the disk doing some

199
00:08:52,990 --> 00:08:58,060
processing saving and storing files and

200
00:08:56,439 --> 00:09:00,459
when I say internal information leakage

201
00:08:58,060 --> 00:09:03,459
I mostly think about branching control

202
00:09:00,460 --> 00:09:06,010
floo execution so that the OS and or the

203
00:09:03,460 --> 00:09:08,460
root axis can observe how the code is

204
00:09:06,010 --> 00:09:11,470
being executed inside of the anklet

205
00:09:08,460 --> 00:09:14,320
given such limitations of SGX the

206
00:09:11,470 --> 00:09:15,760
primary research problem that we want to

207
00:09:14,320 --> 00:09:18,520
solve here in the contribution of this

208
00:09:15,760 --> 00:09:20,830
work is how to design and implement a

209
00:09:18,520 --> 00:09:24,040
solution that enables private processing

210
00:09:20,830 --> 00:09:27,250
of light client requests in the presence

211
00:09:24,040 --> 00:09:29,890
of this include leakage and without

212
00:09:27,250 --> 00:09:33,760
compromising the overall performance of

213
00:09:29,890 --> 00:09:34,870
the system so how to prevent side

214
00:09:33,760 --> 00:09:36,700
channels on SGX

215
00:09:34,870 --> 00:09:38,800
well there are several ways to do it so

216
00:09:36,700 --> 00:09:40,570
first we could well do the side channel

217
00:09:38,800 --> 00:09:42,280
resilient implementations which is

218
00:09:40,570 --> 00:09:44,290
actually also an Intel recommendation

219
00:09:42,280 --> 00:09:46,390
however this is difficult to apply for

220
00:09:44,290 --> 00:09:49,270
all enclaves in general we can use

221
00:09:46,390 --> 00:09:52,230
developer annotation like work like

222
00:09:49,270 --> 00:09:54,400
cloak and raccoon that obfuscate the

223
00:09:52,230 --> 00:09:55,870
execution however this is difficult to

224
00:09:54,400 --> 00:09:59,890
assess it's difficult to assess what

225
00:09:55,870 --> 00:10:02,710
might leak you can use solution that

226
00:09:59,890 --> 00:10:05,199
address specific attack factors like TX

227
00:10:02,710 --> 00:10:07,510
or DejaVu however this does not prevent

228
00:10:05,200 --> 00:10:09,880
all attacks you can use private

229
00:10:07,510 --> 00:10:12,340
information retrieval to protect against

230
00:10:09,880 --> 00:10:14,980
external leakage but this presents a

231
00:10:12,340 --> 00:10:17,170
very high overhead and control flow and

232
00:10:14,980 --> 00:10:20,080
timing linkages to plot are still a

233
00:10:17,170 --> 00:10:22,680
problem and you don't have oblivious

234
00:10:20,080 --> 00:10:26,830
execution there so what we really

235
00:10:22,680 --> 00:10:28,270
present here is is byte in the system so

236
00:10:26,830 --> 00:10:30,910
to address all of these non-trivial

237
00:10:28,270 --> 00:10:33,010
challenges we carefully selected and

238
00:10:30,910 --> 00:10:34,839
applied non private information

239
00:10:33,010 --> 00:10:38,860
retrieval inside shiny protection

240
00:10:34,840 --> 00:10:40,390
techniques and combine them into a novel

241
00:10:38,860 --> 00:10:42,430
solution that needs the performance

242
00:10:40,390 --> 00:10:45,040
requirements that we had so the at least

243
00:10:42,430 --> 00:10:49,390
very close to the original ones that you

244
00:10:45,040 --> 00:10:51,069
can get so the idea is as it is in the

245
00:10:49,390 --> 00:10:52,750
strawman solution the like line shares

246
00:10:51,070 --> 00:10:55,420
the addresses with the enclaves on the

247
00:10:52,750 --> 00:10:57,880
full note but the enclaves are hardened

248
00:10:55,420 --> 00:11:00,099
using known techniques so first memory

249
00:10:57,880 --> 00:11:02,710
access so in memory or m to prepare a

250
00:11:00,100 --> 00:11:05,440
response for for a client response so

251
00:11:02,710 --> 00:11:08,350
you use the or arm to hide the external

252
00:11:05,440 --> 00:11:10,870
leakage then for the control flow we

253
00:11:08,350 --> 00:11:13,290
have secret dependent branching removed

254
00:11:10,870 --> 00:11:17,560
using the Seymour instruction which

255
00:11:13,290 --> 00:11:19,709
effectively removes the branching in the

256
00:11:17,560 --> 00:11:23,400
code and makes the execution oblivious

257
00:11:19,710 --> 00:11:26,500
regardless of which which instruction

258
00:11:23,400 --> 00:11:29,470
flow is happening and then for the

259
00:11:26,500 --> 00:11:31,510
response which is externally caged we

260
00:11:29,470 --> 00:11:33,850
fix the ratio between the response size

261
00:11:31,510 --> 00:11:36,550
and the number of scan blocks so the

262
00:11:33,850 --> 00:11:38,620
external attacker or the OS cannot infer

263
00:11:36,550 --> 00:11:40,209
for example if your address had ten

264
00:11:38,620 --> 00:11:43,150
matching transactions in these ten

265
00:11:40,210 --> 00:11:46,360
blocks or five because the ratio between

266
00:11:43,150 --> 00:11:49,870
a request and a response is always the

267
00:11:46,360 --> 00:11:51,730
same we developed two variants scanning

268
00:11:49,870 --> 00:11:54,310
window and oblivious database and we'll

269
00:11:51,730 --> 00:11:56,860
come back to them a little bit later so

270
00:11:54,310 --> 00:11:58,660
to present the the system model on the

271
00:11:56,860 --> 00:12:00,130
right side see here you have the Bitcoin

272
00:11:58,660 --> 00:12:02,890
phone all the bit compared to peer

273
00:12:00,130 --> 00:12:05,200
network everything is usual however now

274
00:12:02,890 --> 00:12:07,360
we add the enclaves on the full nodes

275
00:12:05,200 --> 00:12:09,850
and to look a little bit more in deep

276
00:12:07,360 --> 00:12:11,500
how this looks in one of the nodes so

277
00:12:09,850 --> 00:12:15,880
you have the original code of the full

278
00:12:11,500 --> 00:12:19,180
node the blockchain the new TX so as a

279
00:12:15,880 --> 00:12:20,890
database of unspent outputs however with

280
00:12:19,180 --> 00:12:23,709
the addition of a secure and clave and

281
00:12:20,890 --> 00:12:25,870
the anklet Beauty EXO and this is mostly

282
00:12:23,710 --> 00:12:27,970
related to the angler you take so to the

283
00:12:25,870 --> 00:12:29,920
oblivious database and on the left side

284
00:12:27,970 --> 00:12:32,860
you have Bitcoin lightweight clients

285
00:12:29,920 --> 00:12:37,930
that connect to the full node and

286
00:12:32,860 --> 00:12:46,810
request information now I have this nice

287
00:12:37,930 --> 00:12:49,180
animation okay so in the beginning of

288
00:12:46,810 --> 00:12:51,849
course the Bitcoin node is doing the

289
00:12:49,180 --> 00:12:54,819
same thing as usual it participates in

290
00:12:51,850 --> 00:12:59,140
the peer-to-peer network it updates the

291
00:12:54,820 --> 00:13:01,660
blockchain updates the UT X so when a

292
00:12:59,140 --> 00:13:03,520
client wants to connect and requests on

293
00:13:01,660 --> 00:13:05,079
sections for itself it first connects to

294
00:13:03,520 --> 00:13:06,490
the Bitcoin peer-to-peer network and

295
00:13:05,080 --> 00:13:08,800
acquires the latest blog header which

296
00:13:06,490 --> 00:13:11,350
serves the purpose of confirming later

297
00:13:08,800 --> 00:13:13,900
on that the response was made on the

298
00:13:11,350 --> 00:13:15,430
longest chain it then performs at the

299
00:13:13,900 --> 00:13:18,100
station establishes a TLS connection

300
00:13:15,430 --> 00:13:20,560
with the end clave and then the process

301
00:13:18,100 --> 00:13:22,600
can start so the first example that I

302
00:13:20,560 --> 00:13:23,979
want to show is the scanning window so

303
00:13:22,600 --> 00:13:25,200
this kind of window can be seen as an

304
00:13:23,980 --> 00:13:27,900
extension of the current

305
00:13:25,200 --> 00:13:30,840
simplified payment verification mode but

306
00:13:27,900 --> 00:13:32,640
without reliance on bloom filters so

307
00:13:30,840 --> 00:13:34,860
based on the client request the enclaves

308
00:13:32,640 --> 00:13:38,240
on the full node scans the blockchain

309
00:13:34,860 --> 00:13:41,040
and replies with a sector with a set of

310
00:13:38,240 --> 00:13:42,630
merkel paths that the client uses to

311
00:13:41,040 --> 00:13:45,209
verify its own transaction so how it

312
00:13:42,630 --> 00:13:47,370
really works the enclaves the address it

313
00:13:45,210 --> 00:13:50,880
creates a response structure and then

314
00:13:47,370 --> 00:13:53,220
uses a specifically created scanning

315
00:13:50,880 --> 00:13:54,930
mechanism to go from the latest block up

316
00:13:53,220 --> 00:13:58,460
to the block that the client requested

317
00:13:54,930 --> 00:14:02,250
and scans for transactions it moves it

318
00:13:58,460 --> 00:14:06,150
obliviously to the response so there is

319
00:14:02,250 --> 00:14:08,130
no the the OS cannot see if if in a

320
00:14:06,150 --> 00:14:12,360
specific block client had or did not

321
00:14:08,130 --> 00:14:16,590
have a specific transaction when it's

322
00:14:12,360 --> 00:14:20,130
when this is finished the response the

323
00:14:16,590 --> 00:14:21,510
response is returned to the the

324
00:14:20,130 --> 00:14:23,280
lightweight client along with the

325
00:14:21,510 --> 00:14:25,230
transaction block headers merkel pads

326
00:14:23,280 --> 00:14:26,930
and then the client can verify the proof

327
00:14:25,230 --> 00:14:31,830
of work and the longest chain and

328
00:14:26,930 --> 00:14:34,109
verified transactions in the second

329
00:14:31,830 --> 00:14:36,540
version it's important to say that the

330
00:14:34,110 --> 00:14:38,640
scanning window protects only against

331
00:14:36,540 --> 00:14:40,589
externally external leakage and not also

332
00:14:38,640 --> 00:14:42,240
from the internal leakage so in order to

333
00:14:40,590 --> 00:14:44,400
tackle the internal leakage as well we

334
00:14:42,240 --> 00:14:46,140
have a we have a different variant or

335
00:14:44,400 --> 00:14:47,850
the protocol in this called oblivious

336
00:14:46,140 --> 00:14:49,770
database this one works a bit

337
00:14:47,850 --> 00:14:52,200
differently so it's a completely new

338
00:14:49,770 --> 00:14:55,680
verification mode that doesn't share the

339
00:14:52,200 --> 00:14:57,560
same properties as SPV and in this

340
00:14:55,680 --> 00:15:00,120
variant the ankov on the full node

341
00:14:57,560 --> 00:15:02,550
maintains are specifically crafted the

342
00:15:00,120 --> 00:15:05,430
version of the unspent transaction

343
00:15:02,550 --> 00:15:08,189
outputs which is encrypted indexed and

344
00:15:05,430 --> 00:15:09,660
accessed using or on and when a client

345
00:15:08,190 --> 00:15:11,130
sends a verification request the

346
00:15:09,660 --> 00:15:13,319
enclaved checks for the present of

347
00:15:11,130 --> 00:15:15,810
clients outputs in this in this new

348
00:15:13,320 --> 00:15:20,010
database and oblivious obliviously

349
00:15:15,810 --> 00:15:22,319
extracts them into the response so the

350
00:15:20,010 --> 00:15:25,640
same story goes again so you have an

351
00:15:22,320 --> 00:15:29,100
information request with the addresses a

352
00:15:25,640 --> 00:15:31,230
response structure is created and then

353
00:15:29,100 --> 00:15:34,440
the enclaved searches to the specific

354
00:15:31,230 --> 00:15:36,690
anklet you TXO and move transactions to

355
00:15:34,440 --> 00:15:38,600
the response using the ORM if there is

356
00:15:36,690 --> 00:15:40,890
no transactions needed its

357
00:15:38,600 --> 00:15:44,640
nothing using Gorham and it's a property

358
00:15:40,890 --> 00:15:47,279
of Orem that the external entity cannot

359
00:15:44,640 --> 00:15:49,470
see what is really happening inside of

360
00:15:47,279 --> 00:15:51,439
the code of course as I said before or

361
00:15:49,470 --> 00:15:55,500
I'm itself is also susceptible to

362
00:15:51,440 --> 00:15:58,620
internal leakage but we we we fix that

363
00:15:55,500 --> 00:16:00,660
by using the seam of instruction making

364
00:15:58,620 --> 00:16:04,709
our implementation of Orem fully

365
00:16:00,660 --> 00:16:15,870
oblivious to the attacker performing

366
00:16:04,709 --> 00:16:19,079
side channels after the request has been

367
00:16:15,870 --> 00:16:20,820
processed the client gets the client

368
00:16:19,079 --> 00:16:22,260
gets the information back the

369
00:16:20,820 --> 00:16:24,720
transaction in the latest blog header

370
00:16:22,260 --> 00:16:28,110
keep in mind that in this version since

371
00:16:24,720 --> 00:16:31,200
the unspent transaction output does not

372
00:16:28,110 --> 00:16:33,180
have merkel pads the end clave is the

373
00:16:31,200 --> 00:16:35,310
one that actually performs the

374
00:16:33,180 --> 00:16:38,040
verification for the client itself so

375
00:16:35,310 --> 00:16:40,800
the client has even less work to do

376
00:16:38,040 --> 00:16:41,310
however of course by trusting the

377
00:16:40,800 --> 00:16:46,439
enclaved

378
00:16:41,310 --> 00:16:49,829
itself so to speak a little bit about

379
00:16:46,440 --> 00:16:54,959
performance of this solution here it's a

380
00:16:49,829 --> 00:16:57,359
good example where this can be seen so

381
00:16:54,959 --> 00:17:01,829
the the scanning window the scanning

382
00:16:57,360 --> 00:17:05,040
window variant and the dashed line is

383
00:17:01,829 --> 00:17:08,309
the is the SPV mode with bloom filters

384
00:17:05,040 --> 00:17:10,859
so you have the false positive rates of

385
00:17:08,309 --> 00:17:13,290
0.0 which equals really nothing so

386
00:17:10,859 --> 00:17:16,889
exactly the transactions that match I

387
00:17:13,290 --> 00:17:18,599
returned 0.1 0.5 and 5 so the processing

388
00:17:16,890 --> 00:17:20,459
time based on the number of blocks for

389
00:17:18,599 --> 00:17:22,980
the scanning window is a bit higher than

390
00:17:20,459 --> 00:17:25,110
that however for the oblivious database

391
00:17:22,980 --> 00:17:28,020
variant it's constant regardless of the

392
00:17:25,109 --> 00:17:29,399
number of scan blocks because the anklet

393
00:17:28,020 --> 00:17:32,309
doesn't really scan through the blocks

394
00:17:29,400 --> 00:17:35,340
and just accesses the Oram database

395
00:17:32,309 --> 00:17:38,610
which is constant time when it comes to

396
00:17:35,340 --> 00:17:40,559
the communication overhead this is where

397
00:17:38,610 --> 00:17:42,389
the solution is is also far more better

398
00:17:40,559 --> 00:17:46,770
so you can see that the scanning widow

399
00:17:42,390 --> 00:17:49,450
option presents far more less response

400
00:17:46,770 --> 00:17:53,379
size and the oblivious database version

401
00:17:49,450 --> 00:17:56,019
is almost equal to the fpr zero so the

402
00:17:53,380 --> 00:17:59,200
simple simple simplified payment

403
00:17:56,019 --> 00:18:03,519
verification that does not have any

404
00:17:59,200 --> 00:18:06,669
privacy protections to finalize so

405
00:18:03,519 --> 00:18:09,669
basically bite as it is is the first

406
00:18:06,669 --> 00:18:11,230
practical solution that enables a strong

407
00:18:09,669 --> 00:18:14,049
privacy protection for Bitcoin

408
00:18:11,230 --> 00:18:17,169
lightweight clients it provides all the

409
00:18:14,049 --> 00:18:18,940
necessary data for the light clients in

410
00:18:17,169 --> 00:18:22,360
order to be able to confirm their

411
00:18:18,940 --> 00:18:25,149
transactions to create new output from

412
00:18:22,360 --> 00:18:28,559
their wallets we designed the system to

413
00:18:25,149 --> 00:18:31,330
tolerate a strong adversary so basically

414
00:18:28,559 --> 00:18:33,220
our adversarial model includes a

415
00:18:31,330 --> 00:18:36,850
malicious node a malicious full node

416
00:18:33,220 --> 00:18:38,289
that performs side-channel attacks on

417
00:18:36,850 --> 00:18:40,090
the end clave in terms of the oblivious

418
00:18:38,289 --> 00:18:42,250
database and all it can observe for

419
00:18:40,090 --> 00:18:45,850
external leakage when it comes to the

420
00:18:42,250 --> 00:18:47,559
scanning window the the adversary can

421
00:18:45,850 --> 00:18:49,689
also monitor control flow on an

422
00:18:47,559 --> 00:18:51,158
instruction level which is also very

423
00:18:49,690 --> 00:18:53,260
difficult in the current state of time

424
00:18:51,159 --> 00:18:57,220
so we are still at a couple of

425
00:18:53,260 --> 00:19:01,299
instruction level the most advanced

426
00:18:57,220 --> 00:19:03,639
attacks and we provide something that we

427
00:19:01,299 --> 00:19:05,679
call graceful failure so even if you

428
00:19:03,639 --> 00:19:07,689
completely break down the in clave what

429
00:19:05,679 --> 00:19:09,190
you really lose is only the privacy that

430
00:19:07,690 --> 00:19:12,600
you didn't really have in the first

431
00:19:09,190 --> 00:19:12,600
place so thank you

432
00:19:12,610 --> 00:19:18,490
[Applause]

433
00:19:16,110 --> 00:19:22,090
we're a little short on time we can

434
00:19:18,490 --> 00:19:24,360
accommodate one or two questions anyone

435
00:19:22,090 --> 00:19:24,360
has questions

436
00:19:28,320 --> 00:19:34,800
so you mentioned your solution uses SGX

437
00:19:31,950 --> 00:19:37,140
and it targets mobile devices but I saw

438
00:19:34,800 --> 00:19:39,860
as I understand mobile devices usually

439
00:19:37,140 --> 00:19:43,170
use ARM based architecture not inhale

440
00:19:39,860 --> 00:19:45,120
yeah so so the SGX is not on the light

441
00:19:43,170 --> 00:19:47,910
client itself the light client is on a

442
00:19:45,120 --> 00:19:50,699
mobile device the SGX and lives in the

443
00:19:47,910 --> 00:19:54,410
full node okay so the anchor is used to

444
00:19:50,700 --> 00:19:56,790
process client requests on the full node

445
00:19:54,410 --> 00:19:58,230
so you don't have to have any trusted

446
00:19:56,790 --> 00:19:58,770
execution environments on your mobile

447
00:19:58,230 --> 00:20:08,850
device

448
00:19:58,770 --> 00:20:10,650
all right cool thanks two versions of

449
00:20:08,850 --> 00:20:12,629
your solution one with the scanning we

450
00:20:10,650 --> 00:20:14,610
do it one with oblivious database and it

451
00:20:12,630 --> 00:20:17,040
looks like oblivious database is always

452
00:20:14,610 --> 00:20:19,649
much better is there a situation where

453
00:20:17,040 --> 00:20:22,740
scanning window would be better in some

454
00:20:19,650 --> 00:20:25,050
case so the reason why there are two

455
00:20:22,740 --> 00:20:27,720
solutions is that during the update of

456
00:20:25,050 --> 00:20:29,340
the during the it's a bit more detail so

457
00:20:27,720 --> 00:20:30,800
during the update of the if you want to

458
00:20:29,340 --> 00:20:33,270
use the oblivious database version

459
00:20:30,800 --> 00:20:34,620
during the update process of the anklet

460
00:20:33,270 --> 00:20:38,250
Beauty EXO you need to have a mechanism

461
00:20:34,620 --> 00:20:40,320
that you could still use to scan the

462
00:20:38,250 --> 00:20:42,150
blocks and this is where the scanning

463
00:20:40,320 --> 00:20:44,700
window comes in as an intermediary

464
00:20:42,150 --> 00:20:46,500
solution that okay it's actually the

465
00:20:44,700 --> 00:20:49,100
combination of those two that you need

466
00:20:46,500 --> 00:20:49,100
thank you

467
00:20:50,310 --> 00:20:54,450
[Applause]

