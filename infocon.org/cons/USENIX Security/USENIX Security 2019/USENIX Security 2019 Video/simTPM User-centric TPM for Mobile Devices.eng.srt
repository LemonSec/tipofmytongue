1
00:00:10,940 --> 00:00:15,389
hello everyone and welcome to the

2
00:00:13,080 --> 00:00:18,029
presentation of our paper simply PMI

3
00:00:15,389 --> 00:00:19,680
user-centric TPM for mobile devices as

4
00:00:18,029 --> 00:00:21,630
in CI already introduced my name is de

5
00:00:19,680 --> 00:00:24,930
man and this work is jointly done with

6
00:00:21,630 --> 00:00:27,390
Lu Chen has leaked and Sven Bogle TPM or

7
00:00:24,930 --> 00:00:29,460
our trusted compare platform module is a

8
00:00:27,390 --> 00:00:32,369
de facto industry standard for trusted

9
00:00:29,460 --> 00:00:34,980
computing solutions like BitLocker Intel

10
00:00:32,369 --> 00:00:37,110
txt or Chrome OS actively uses various

11
00:00:34,980 --> 00:00:39,000
TPM features like secure storage script

12
00:00:37,110 --> 00:00:41,579
echo processing measured boot or

13
00:00:39,000 --> 00:00:45,239
extended authorization policies in a

14
00:00:41,579 --> 00:00:48,840
desktop domain TPM being the trusted

15
00:00:45,239 --> 00:00:52,530
computing agent it tries to serves with

16
00:00:48,840 --> 00:00:54,450
all of its features - most of the

17
00:00:52,530 --> 00:00:57,180
stakeholders that is active in the

18
00:00:54,450 --> 00:00:59,460
domain but when we see in the mobile

19
00:00:57,180 --> 00:01:02,880
domain the only available implementation

20
00:00:59,460 --> 00:01:04,920
of a TPM is a Microsoft FTP M which is

21
00:01:02,880 --> 00:01:07,380
solely designed for Microsoft devices

22
00:01:04,920 --> 00:01:10,170
catered only for the system applications

23
00:01:07,380 --> 00:01:12,689
and operating system did create this

24
00:01:10,170 --> 00:01:15,270
creates a gap for the other stakeholders

25
00:01:12,689 --> 00:01:18,208
those are active in the domain this

26
00:01:15,270 --> 00:01:21,090
motivates asked to create a user centric

27
00:01:18,209 --> 00:01:24,689
TPM for mobile devices and we choose the

28
00:01:21,090 --> 00:01:28,079
SIM card as the representation of the

29
00:01:24,689 --> 00:01:29,639
users before going deep into the design

30
00:01:28,079 --> 00:01:32,339
and implementation of the same card we

31
00:01:29,639 --> 00:01:34,079
wanted to see their work well in the

32
00:01:32,340 --> 00:01:36,420
landscape of trusted computing our

33
00:01:34,079 --> 00:01:38,279
implementation is the best fit for that

34
00:01:36,420 --> 00:01:41,719
one we devised a systematization of

35
00:01:38,279 --> 00:01:44,098
exist existing TPM technologies

36
00:01:41,719 --> 00:01:46,770
comparing technologies like Microsoft

37
00:01:44,099 --> 00:01:49,380
FTP M Intel SGX and two variants of

38
00:01:46,770 --> 00:01:51,810
IBM's virtual TPM from the server domain

39
00:01:49,380 --> 00:01:53,818
one supported by a hardware TPM and

40
00:01:51,810 --> 00:01:56,789
another one is supported by a secure

41
00:01:53,819 --> 00:02:00,299
core processor though here the Intel SGX

42
00:01:56,789 --> 00:02:02,429
is not a TPM technology but many of his

43
00:02:00,299 --> 00:02:05,969
features are similar to a hardware TPM

44
00:02:02,429 --> 00:02:07,770
and in recent research past we can see

45
00:02:05,969 --> 00:02:10,109
that there are handful of tries to

46
00:02:07,770 --> 00:02:12,599
implement software TPM inside the

47
00:02:10,110 --> 00:02:16,140
enclaves of the Intel SGX to provide

48
00:02:12,599 --> 00:02:18,299
trusted computing to the users now to do

49
00:02:16,140 --> 00:02:22,859
a systematization we need a set of

50
00:02:18,300 --> 00:02:24,360
objectives here the objective s 1 to s 6

51
00:02:22,860 --> 00:02:26,760
and a1 to a3

52
00:02:24,360 --> 00:02:29,550
our interpretation of trusted computing

53
00:02:26,760 --> 00:02:32,420
groups provided her specification for

54
00:02:29,550 --> 00:02:36,270
hardware TPM and mobile trusted module T

55
00:02:32,420 --> 00:02:38,820
specifications the objective D 1 and D 2

56
00:02:36,270 --> 00:02:41,700
are the objectives that we think a

57
00:02:38,820 --> 00:02:44,010
symbol TPM should have and the objective

58
00:02:41,700 --> 00:02:45,299
D 3 that is bound RTM are bound root of

59
00:02:44,010 --> 00:02:48,899
trust of measurements I'm going to

60
00:02:45,300 --> 00:02:50,070
present in the letter in slides to

61
00:02:48,900 --> 00:02:53,310
create a baseline for our

62
00:02:50,070 --> 00:02:55,230
systematization we use the hardware TPM

63
00:02:53,310 --> 00:02:56,970
with with our objectives and we

64
00:02:55,230 --> 00:02:58,950
immediately find out that except the

65
00:02:56,970 --> 00:03:01,200
mobile availability and movability

66
00:02:58,950 --> 00:03:02,760
a hardware TPM supports all of the

67
00:03:01,200 --> 00:03:04,380
objectives and this is no surprise

68
00:03:02,760 --> 00:03:08,370
because the hardware TPM was never

69
00:03:04,380 --> 00:03:11,310
designed for mobile devices due to time

70
00:03:08,370 --> 00:03:13,290
constraint I am unable to talk about how

71
00:03:11,310 --> 00:03:16,290
we device all the objectives but I will

72
00:03:13,290 --> 00:03:18,480
talk about a handful of them in my

73
00:03:16,290 --> 00:03:19,950
motivational Science I already talked

74
00:03:18,480 --> 00:03:21,390
about multiple stakeholder and the

75
00:03:19,950 --> 00:03:23,190
current scenario in the mobile dev

76
00:03:21,390 --> 00:03:25,589
domain with the multiple stakeholder

77
00:03:23,190 --> 00:03:27,420
objective the other two objective that I

78
00:03:25,590 --> 00:03:30,780
want to talk about our early

79
00:03:27,420 --> 00:03:32,760
availability and bound are TM early

80
00:03:30,780 --> 00:03:36,690
availability is important for measured

81
00:03:32,760 --> 00:03:38,880
boot in a multi module boot chain with a

82
00:03:36,690 --> 00:03:41,040
measured boot each each and every

83
00:03:38,880 --> 00:03:42,780
component tries to measure the next

84
00:03:41,040 --> 00:03:45,000
component that will going to be in the

85
00:03:42,780 --> 00:03:47,100
chain store the measurement inside the

86
00:03:45,000 --> 00:03:50,610
TPM and then transfer the control to the

87
00:03:47,100 --> 00:03:52,440
next component to have this measured

88
00:03:50,610 --> 00:03:55,769
boot from the beginning of the boot

89
00:03:52,440 --> 00:03:58,019
chain a TPM has to be early available in

90
00:03:55,769 --> 00:04:01,110
our systematization we find out that

91
00:03:58,019 --> 00:04:03,600
both SGX and F TPM does not support this

92
00:04:01,110 --> 00:04:05,850
objective for esri X this is no surprise

93
00:04:03,600 --> 00:04:08,670
again because s DX was never designed to

94
00:04:05,850 --> 00:04:10,859
support this objective but interestingly

95
00:04:08,670 --> 00:04:13,018
F TPM also does not support this

96
00:04:10,860 --> 00:04:14,880
objective due to the fact that F TPM is

97
00:04:13,019 --> 00:04:17,190
being a trusted application running

98
00:04:14,880 --> 00:04:18,298
inside the trusted execution environment

99
00:04:17,190 --> 00:04:21,060
or in the figure you can see that's the

100
00:04:18,298 --> 00:04:23,789
called T which appears late in the boot

101
00:04:21,060 --> 00:04:26,040
chain the next objective I want to talk

102
00:04:23,790 --> 00:04:28,710
about is bound R TM or bound root of

103
00:04:26,040 --> 00:04:31,410
trust of measurement this is important

104
00:04:28,710 --> 00:04:33,750
for a trustworthy measured boot because

105
00:04:31,410 --> 00:04:35,460
the first measurement that is coming in

106
00:04:33,750 --> 00:04:37,190
a measured boot change should come from

107
00:04:35,460 --> 00:04:39,859
a trustworthy component

108
00:04:37,190 --> 00:04:41,810
otherwise any arbitrary component in the

109
00:04:39,860 --> 00:04:44,270
boot chain suddenly can send fake

110
00:04:41,810 --> 00:04:47,900
measurement to the TPM and end up having

111
00:04:44,270 --> 00:04:49,880
an untrustworthy measured boot chain so

112
00:04:47,900 --> 00:04:52,250
we define bound RTM as the first

113
00:04:49,880 --> 00:04:54,500
measurement reported to TPM has to come

114
00:04:52,250 --> 00:04:58,700
from our TM for a trust or the chain of

115
00:04:54,500 --> 00:05:00,470
trust now this property in today's

116
00:04:58,700 --> 00:05:03,740
implementation is kind of a god-given

117
00:05:00,470 --> 00:05:06,740
property just because TPM and our TM

118
00:05:03,740 --> 00:05:09,680
both are part of the silicon and TCG

119
00:05:06,740 --> 00:05:11,660
provides no guideline to define how this

120
00:05:09,680 --> 00:05:14,530
objective can be achieved in real ly

121
00:05:11,660 --> 00:05:17,270
devices in our systematization

122
00:05:14,530 --> 00:05:19,400
interestingly we found out that both of

123
00:05:17,270 --> 00:05:22,969
the V TPM implementation does not

124
00:05:19,400 --> 00:05:26,179
support and also a V TPM with secure

125
00:05:22,970 --> 00:05:28,820
coprocessor in retrospective does not

126
00:05:26,180 --> 00:05:30,650
support completely this objective this

127
00:05:28,820 --> 00:05:32,960
due to the fact that the secure core

128
00:05:30,650 --> 00:05:35,210
processor is connected using a PCIe bus

129
00:05:32,960 --> 00:05:37,609
to the device and there is no guarantee

130
00:05:35,210 --> 00:05:39,049
that the first measurement that is

131
00:05:37,610 --> 00:05:42,380
coming to the secure core processor is

132
00:05:39,050 --> 00:05:44,240
coming from a trustworthy r TM the rest

133
00:05:42,380 --> 00:05:45,560
of the systematization is available on

134
00:05:44,240 --> 00:05:47,540
the paper and again due to time

135
00:05:45,560 --> 00:05:50,420
constraint I couldn't able to present

136
00:05:47,540 --> 00:05:53,890
all of the comparisons but the knowledge

137
00:05:50,420 --> 00:05:56,990
that we gathered from this

138
00:05:53,890 --> 00:05:58,990
systematization we start then started

139
00:05:56,990 --> 00:06:01,820
designing our TPM inside the sim card

140
00:05:58,990 --> 00:06:04,390
now SIM cards are general-purpose smart

141
00:06:01,820 --> 00:06:06,980
cards it has its own operating system

142
00:06:04,390 --> 00:06:09,860
for example could be Java card OS or

143
00:06:06,980 --> 00:06:11,990
multi source it has its own processor it

144
00:06:09,860 --> 00:06:14,560
has its own memory inside the card so

145
00:06:11,990 --> 00:06:17,180
these are small computers in our pockets

146
00:06:14,560 --> 00:06:19,520
SIM card supports multiple applets and

147
00:06:17,180 --> 00:06:21,440
the security manager applet that resides

148
00:06:19,520 --> 00:06:23,870
within the same cards assures that apply

149
00:06:21,440 --> 00:06:26,030
segregation so we leverage this

150
00:06:23,870 --> 00:06:28,100
capability of the sim card and we

151
00:06:26,030 --> 00:06:31,159
implemented the sim TPM as a separate

152
00:06:28,100 --> 00:06:33,260
applet inside the sim card we inter

153
00:06:31,160 --> 00:06:36,919
introduced a secure non-volatile storage

154
00:06:33,260 --> 00:06:38,659
and a PCR Bank for the TPM applet just

155
00:06:36,919 --> 00:06:41,000
by using some of the non-volatile

156
00:06:38,660 --> 00:06:42,650
storage offered by the smart card the

157
00:06:41,000 --> 00:06:44,600
communication with this kind of cell

158
00:06:42,650 --> 00:06:46,640
smart card or SIM card normally happens

159
00:06:44,600 --> 00:06:49,130
with application protocol data unit

160
00:06:46,640 --> 00:06:51,500
commands or apdu commands which are iso

161
00:06:49,130 --> 00:06:55,130
standards so we devised some custom

162
00:06:51,500 --> 00:06:57,170
PDU commands using those the components

163
00:06:55,130 --> 00:06:59,150
those are outside environment of this

164
00:06:57,170 --> 00:07:02,420
teepee a sim card can communicate to our

165
00:06:59,150 --> 00:07:04,940
sim TPM applet as I already mentioned

166
00:07:02,420 --> 00:07:07,910
that these sim cards are having their

167
00:07:04,940 --> 00:07:10,010
own coprocessor so we can use this

168
00:07:07,910 --> 00:07:11,690
coprocessor for cryptography that is

169
00:07:10,010 --> 00:07:14,510
working completely isolated from the

170
00:07:11,690 --> 00:07:16,880
rest of the device but the limitation

171
00:07:14,510 --> 00:07:18,200
the sim cards are having is that the sim

172
00:07:16,880 --> 00:07:20,630
card does not support modular

173
00:07:18,200 --> 00:07:23,030
multiplication or ecliptic curve point

174
00:07:20,630 --> 00:07:25,130
addition due to the fact we cannot

175
00:07:23,030 --> 00:07:27,650
introduce a general TPM remote

176
00:07:25,130 --> 00:07:30,200
attestation in this car this sim cards

177
00:07:27,650 --> 00:07:32,299
so to overcome this problem we

178
00:07:30,200 --> 00:07:34,729
introduced a new crypto building block

179
00:07:32,300 --> 00:07:36,980
for remote attestation which will

180
00:07:34,730 --> 00:07:39,160
execute this remote attestation solely

181
00:07:36,980 --> 00:07:42,200
within the TPM without host in

182
00:07:39,160 --> 00:07:43,730
involvement the all crypto primitives

183
00:07:42,200 --> 00:07:45,650
and proofs are available in the paper

184
00:07:43,730 --> 00:07:49,370
and again due to time constant I'm kind

185
00:07:45,650 --> 00:07:50,690
of unable to present the proofs here but

186
00:07:49,370 --> 00:07:52,490
one thing one point I want to make clear

187
00:07:50,690 --> 00:07:54,140
here that this crypto that we

188
00:07:52,490 --> 00:07:56,510
implemented at the building block for

189
00:07:54,140 --> 00:07:58,099
the whole TPM applet that is working

190
00:07:56,510 --> 00:07:59,620
inside the sim card and if someone

191
00:07:58,100 --> 00:08:02,960
doesn't like our crypto implement

192
00:07:59,620 --> 00:08:05,900
implementation I just implement your own

193
00:08:02,960 --> 00:08:09,200
cryptography within the card and just

194
00:08:05,900 --> 00:08:11,989
run that if your sim TPM as you want and

195
00:08:09,200 --> 00:08:14,120
to our knowledge orange lab does have

196
00:08:11,990 --> 00:08:16,340
similar implementation but unfortunately

197
00:08:14,120 --> 00:08:20,600
that implementation is not available to

198
00:08:16,340 --> 00:08:22,729
the public next for at TPM we need

199
00:08:20,600 --> 00:08:24,710
trustworthy endorsement to introduce

200
00:08:22,729 --> 00:08:26,510
trustworthy endorsement in 70 p.m. we

201
00:08:24,710 --> 00:08:29,780
followed the same approach of a hardware

202
00:08:26,510 --> 00:08:32,030
TPM that we in implemented unique a

203
00:08:29,780 --> 00:08:34,400
symmetric endorsement key inside our TPM

204
00:08:32,030 --> 00:08:36,770
applet this endorsement key will stay

205
00:08:34,400 --> 00:08:38,929
active as long as the TPM applet will be

206
00:08:36,770 --> 00:08:42,280
alive this will help us to differentiate

207
00:08:38,929 --> 00:08:45,140
between a genuine and a rogue TPM

208
00:08:42,280 --> 00:08:48,350
another important point for a TPM is

209
00:08:45,140 --> 00:08:50,630
that TPM needs a trusted clock in a

210
00:08:48,350 --> 00:08:52,760
mobile device SIM card generally draws

211
00:08:50,630 --> 00:08:55,070
its clock from the basement processor

212
00:08:52,760 --> 00:08:57,260
and by design the baseband processor is

213
00:08:55,070 --> 00:08:58,640
completely segregated from the rest of

214
00:08:57,260 --> 00:09:00,589
the software stack that is running on

215
00:08:58,640 --> 00:09:02,990
the mobile device so this baseband

216
00:09:00,589 --> 00:09:04,339
processor due to its design can be a

217
00:09:02,990 --> 00:09:07,910
secure

218
00:09:04,339 --> 00:09:10,639
joxer's for the same TPM as well so till

219
00:09:07,910 --> 00:09:13,100
now I talked about how we designed and

220
00:09:10,639 --> 00:09:15,079
implemented the TPM inside the same card

221
00:09:13,100 --> 00:09:17,749
the next question comes is that how we

222
00:09:15,079 --> 00:09:20,599
are integrating this same TPM for with a

223
00:09:17,749 --> 00:09:22,459
mobile device for that one we use

224
00:09:20,600 --> 00:09:23,870
Android as a target operating system

225
00:09:22,459 --> 00:09:27,199
just because it is open-source

226
00:09:23,870 --> 00:09:28,910
we used arm trusted firmware again

227
00:09:27,199 --> 00:09:31,670
because it's open-source bootloader that

228
00:09:28,910 --> 00:09:35,329
runs with Android and we use high key

229
00:09:31,670 --> 00:09:37,519
960 board as a hardware platform so we

230
00:09:35,329 --> 00:09:39,949
added SIM card communication to each and

231
00:09:37,519 --> 00:09:42,829
every sub module of the bootloader this

232
00:09:39,949 --> 00:09:46,309
will help us to achieve the objective of

233
00:09:42,829 --> 00:09:48,349
early availability and then we

234
00:09:46,309 --> 00:09:51,860
introduced new radio interface library

235
00:09:48,350 --> 00:09:53,480
that houses the custom apd commands that

236
00:09:51,860 --> 00:09:56,120
we already devised to communicate to the

237
00:09:53,480 --> 00:09:58,660
sim TPM so that the operate Android

238
00:09:56,120 --> 00:10:01,160
operating system or even the third party

239
00:09:58,660 --> 00:10:02,870
applications or through the third party

240
00:10:01,160 --> 00:10:04,189
applications that user can communicate

241
00:10:02,870 --> 00:10:06,410
to the sim TPM for their trusted

242
00:10:04,189 --> 00:10:08,389
computing need this help helps us to

243
00:10:06,410 --> 00:10:13,670
achieve the objective of multiple

244
00:10:08,389 --> 00:10:16,339
stakeholder at this point we again

245
00:10:13,670 --> 00:10:18,949
stumble to the same problem that how we

246
00:10:16,339 --> 00:10:22,129
are binding our sim TPM with the RTM

247
00:10:18,949 --> 00:10:24,378
because our sim TPM is having a user

248
00:10:22,129 --> 00:10:27,709
centric nature and due to that fact the

249
00:10:24,379 --> 00:10:30,679
same TPM is movable so to overcome this

250
00:10:27,709 --> 00:10:32,839
problem we propose to solution one is

251
00:10:30,679 --> 00:10:35,839
using the trusted execution environment

252
00:10:32,839 --> 00:10:38,569
or T as a TPM proxy and the another one

253
00:10:35,839 --> 00:10:42,050
is using a kind of distance bonding

254
00:10:38,569 --> 00:10:44,719
protocol in trusted execution

255
00:10:42,050 --> 00:10:46,459
environment and TV as a TPM proxy what

256
00:10:44,720 --> 00:10:48,769
we did that we created a secure

257
00:10:46,459 --> 00:10:50,899
end-to-end channel using the device

258
00:10:48,769 --> 00:10:52,749
specific key that is solely available to

259
00:10:50,899 --> 00:10:55,910
the trusted execution environment and

260
00:10:52,749 --> 00:10:58,370
the same TPM only reacts to the command

261
00:10:55,910 --> 00:11:00,620
that is coming through this channel so

262
00:10:58,370 --> 00:11:04,129
this will make sure that the same TPM is

263
00:11:00,620 --> 00:11:06,019
actually talking to our securely trusted

264
00:11:04,129 --> 00:11:07,910
Lea booted up trusted execution

265
00:11:06,019 --> 00:11:10,819
environment that is running inside an

266
00:11:07,910 --> 00:11:12,860
untampered device and same TPM will

267
00:11:10,819 --> 00:11:16,279
release data only through this channel

268
00:11:12,860 --> 00:11:18,110
now this proposal is having some

269
00:11:16,279 --> 00:11:19,910
shortcomings that this limits

270
00:11:18,110 --> 00:11:23,990
early availability of the same TPM

271
00:11:19,910 --> 00:11:25,730
because thus the same TPM has to wait

272
00:11:23,990 --> 00:11:27,320
till the trusted execution environment

273
00:11:25,730 --> 00:11:29,060
is available late in the boots chain

274
00:11:27,320 --> 00:11:32,390
otherwise the secure end-to-end channel

275
00:11:29,060 --> 00:11:34,430
will not going to start but this can be

276
00:11:32,390 --> 00:11:36,140
overcome by designing the bootloader

277
00:11:34,430 --> 00:11:37,310
such a way that they will pass the

278
00:11:36,140 --> 00:11:39,890
measurement through the trusted

279
00:11:37,310 --> 00:11:41,689
execution environment and the Microsoft

280
00:11:39,890 --> 00:11:45,050
FTP end could have been extended this

281
00:11:41,690 --> 00:11:49,010
way to achieve measured boot the other

282
00:11:45,050 --> 00:11:51,229
way that we try to bind our rtm with the

283
00:11:49,010 --> 00:11:54,230
same TPM is by using a distance pounding

284
00:11:51,230 --> 00:11:57,500
protocol where the same TPM and the RTM

285
00:11:54,230 --> 00:11:59,149
will run a timed protocol using the

286
00:11:57,500 --> 00:12:03,560
first measurement that is coming from

287
00:11:59,149 --> 00:12:05,720
the RTM to the same card after that will

288
00:12:03,560 --> 00:12:07,760
make are the same TPM to understand that

289
00:12:05,720 --> 00:12:09,709
it is actually talking to the RTM that

290
00:12:07,760 --> 00:12:12,640
is residing on the device where the same

291
00:12:09,709 --> 00:12:14,479
TPM is also connected we ran some

292
00:12:12,640 --> 00:12:16,160
experiment for our distance bonding

293
00:12:14,480 --> 00:12:17,959
protocol and we end up having a seven

294
00:12:16,160 --> 00:12:19,579
hundred and twenty one microsecond

295
00:12:17,959 --> 00:12:24,279
threshold for it eighty-three percent

296
00:12:19,579 --> 00:12:27,199
success rate of successful boot for an

297
00:12:24,279 --> 00:12:30,920
in a practical situation for a practical

298
00:12:27,199 --> 00:12:34,219
attacker with a 50 M bits relay Network

299
00:12:30,920 --> 00:12:36,380
his chance will be 0.1% to break this

300
00:12:34,220 --> 00:12:38,180
protocol but at the end this is a

301
00:12:36,380 --> 00:12:41,300
probabilistic game so a more powerful

302
00:12:38,180 --> 00:12:46,609
attacker can increase the probability of

303
00:12:41,300 --> 00:12:49,719
defeating the game so we designed the

304
00:12:46,610 --> 00:12:55,250
TPM we integrated the TPM with the

305
00:12:49,720 --> 00:12:57,079
device at this point we again went back

306
00:12:55,250 --> 00:12:59,510
to our systematization objectives to

307
00:12:57,079 --> 00:13:01,489
find out are we matching with our

308
00:12:59,510 --> 00:13:04,010
systematization objectives or not and

309
00:13:01,490 --> 00:13:07,250
there we find out that except the bound

310
00:13:04,010 --> 00:13:10,459
RTM all of the other objectives are met

311
00:13:07,250 --> 00:13:12,829
with same TPM this is due to the fact

312
00:13:10,459 --> 00:13:16,518
that we wanted to make our simply p.m. a

313
00:13:12,829 --> 00:13:18,739
user centric sim TPR TPM that means that

314
00:13:16,519 --> 00:13:20,810
the same TPM is currently active on

315
00:13:18,740 --> 00:13:23,570
device 1 and user will move the device

316
00:13:20,810 --> 00:13:25,729
in TPM to device 2 and suddenly the user

317
00:13:23,570 --> 00:13:29,750
centric secure storage will be available

318
00:13:25,730 --> 00:13:31,190
on the device to do to that we need to

319
00:13:29,750 --> 00:13:32,470
make a trade-off with the bound our

320
00:13:31,190 --> 00:13:35,540
tiempo

321
00:13:32,470 --> 00:13:37,399
now the bigger question comes that is

322
00:13:35,540 --> 00:13:40,790
this implementation is a practical

323
00:13:37,399 --> 00:13:43,429
implementation or not for that one we

324
00:13:40,790 --> 00:13:46,790
devised two different implementation of

325
00:13:43,429 --> 00:13:49,488
Infineon TPM 2.0 one is running in a

326
00:13:46,790 --> 00:13:51,738
Lenovo laptop we call it as an empty PM

327
00:13:49,489 --> 00:13:53,919
or embedded TPM and another one is a

328
00:13:51,739 --> 00:13:57,350
plug-and-play TPM that is running on a

329
00:13:53,919 --> 00:13:59,509
Raspberry Pi we call it pi TPM our sim

330
00:13:57,350 --> 00:14:01,220
TPM is running on a high key 960 bulb

331
00:13:59,509 --> 00:14:03,649
where the software stack is run by

332
00:14:01,220 --> 00:14:06,079
Android so we selected some of the

333
00:14:03,649 --> 00:14:07,999
frequently used TPM commands and then we

334
00:14:06,079 --> 00:14:10,189
ran the commands 50 times to get our

335
00:14:07,999 --> 00:14:13,309
numbers for the to create the

336
00:14:10,189 --> 00:14:15,169
performance analysis the first set of

337
00:14:13,309 --> 00:14:17,569
commands that we used are the

338
00:14:15,169 --> 00:14:20,179
cryptographic commands that those are

339
00:14:17,569 --> 00:14:23,149
ECC keygen that is on the top left hash

340
00:14:20,179 --> 00:14:25,459
on the top right Cinthia TPM seal on the

341
00:14:23,149 --> 00:14:28,339
bottom left and TPM on sale on the

342
00:14:25,459 --> 00:14:30,768
bottom right and here we can see that

343
00:14:28,339 --> 00:14:32,359
empty PM are embedded TPM is a clear

344
00:14:30,769 --> 00:14:34,579
winner you can see that there in the

345
00:14:32,359 --> 00:14:38,029
picture embedded TPM is in the middle

346
00:14:34,579 --> 00:14:40,368
row but the symptom that is on the Left

347
00:14:38,029 --> 00:14:42,499
row the numbers are on par with the

348
00:14:40,369 --> 00:14:44,119
plugin per TPM that is the PI TPM

349
00:14:42,499 --> 00:14:49,009
running on a Raspberry Pi on the right

350
00:14:44,119 --> 00:14:53,029
row of the picture exactly why we have

351
00:14:49,009 --> 00:14:55,009
this particular graphs is a little bit

352
00:14:53,029 --> 00:14:57,109
hard for us to answer because we cannot

353
00:14:55,009 --> 00:14:58,999
completely answer this question due to

354
00:14:57,109 --> 00:15:02,049
the fact that the implementation of the

355
00:14:58,999 --> 00:15:04,850
Infineon TPM is not publicly available

356
00:15:02,049 --> 00:15:09,199
the next set of commands that we tried

357
00:15:04,850 --> 00:15:11,689
here are the TPM specific commands the

358
00:15:09,199 --> 00:15:14,660
top left is again the PCR read top right

359
00:15:11,689 --> 00:15:17,118
is PCR extent and bottom left is random

360
00:15:14,660 --> 00:15:19,969
number generator here we can see that

361
00:15:17,119 --> 00:15:22,399
the sim TPM is a clear winner except the

362
00:15:19,970 --> 00:15:25,039
PCR extreme commands this happens

363
00:15:22,399 --> 00:15:27,079
because our PCR extend implementation is

364
00:15:25,039 --> 00:15:29,329
a software only implementation and which

365
00:15:27,079 --> 00:15:31,459
is also an optimized implementation so

366
00:15:29,329 --> 00:15:33,769
with the support of more support from

367
00:15:31,459 --> 00:15:36,768
the hardware platform this PCR extend

368
00:15:33,769 --> 00:15:38,600
implementation could have been optimized

369
00:15:36,769 --> 00:15:42,860
in a better way so that the results

370
00:15:38,600 --> 00:15:44,449
could have been better so from the

371
00:15:42,860 --> 00:15:46,369
performance evaluation we can

372
00:15:44,449 --> 00:15:49,939
conclude that there is no clear winner

373
00:15:46,369 --> 00:15:52,579
and our implementation of this sim TPM

374
00:15:49,939 --> 00:15:57,230
prototype is up can be a practical

375
00:15:52,579 --> 00:16:00,319
implementation before I conclude my talk

376
00:15:57,230 --> 00:16:02,569
I want to talk about a nice challenge

377
00:16:00,319 --> 00:16:04,219
that is currently going on where they

378
00:16:02,569 --> 00:16:07,009
wanted to use the same card as a

379
00:16:04,220 --> 00:16:09,679
security element for mobile devices and

380
00:16:07,009 --> 00:16:12,350
as we in future going to add the fighter

381
00:16:09,679 --> 00:16:13,970
protocol on top of our sim TPM we think

382
00:16:12,350 --> 00:16:16,309
that our implementation could have been

383
00:16:13,970 --> 00:16:19,129
a really good fit for this challenge and

384
00:16:16,309 --> 00:16:23,358
we can go for this $100,000 which is not

385
00:16:19,129 --> 00:16:25,489
a less money to win but unfortunately

386
00:16:23,359 --> 00:16:27,739
our team is consists of a German

387
00:16:25,489 --> 00:16:30,109
appalled and an Indian and we don't have

388
00:16:27,739 --> 00:16:32,959
any US password holder and because of

389
00:16:30,109 --> 00:16:35,239
that we cannot join this challenge but

390
00:16:32,959 --> 00:16:37,459
ok the deadlines are over so we cannot

391
00:16:35,239 --> 00:16:39,919
go for this challenge anymore but in

392
00:16:37,459 --> 00:16:44,858
future we would love to collaborate with

393
00:16:39,919 --> 00:16:44,859
anyone who comes with a u.s. passport so

394
00:16:45,279 --> 00:16:51,410
so in conclusion in this project with

395
00:16:49,209 --> 00:16:53,660
probably the first time we did a

396
00:16:51,410 --> 00:16:55,969
systematization of existing trusted

397
00:16:53,660 --> 00:16:58,699
platform module technologies to see what

398
00:16:55,970 --> 00:17:00,319
is the current situation then we find

399
00:16:58,699 --> 00:17:02,569
out the gaps in mobile domain through

400
00:17:00,319 --> 00:17:05,240
our systematization to fill the gap we

401
00:17:02,569 --> 00:17:08,569
design the TPM that runs on in the sim

402
00:17:05,240 --> 00:17:11,539
TPM having both user centric and device

403
00:17:08,569 --> 00:17:15,589
centric nature then we try to provide

404
00:17:11,539 --> 00:17:18,049
two ways to bind us TPM with the RTM and

405
00:17:15,589 --> 00:17:20,418
through our performance evaluation we

406
00:17:18,049 --> 00:17:22,849
try to show that our implementation is a

407
00:17:20,419 --> 00:17:25,130
practical implementation and on that

408
00:17:22,849 --> 00:17:28,899
note I would like to thank you guys for

409
00:17:25,130 --> 00:17:28,899
listening to me thanks speaker

410
00:17:30,690 --> 00:17:46,900
any questions hi I'm Muhammad so my

411
00:17:44,500 --> 00:17:49,990
basic question is going to be like for

412
00:17:46,900 --> 00:17:54,580
example in my iPhone I can take out the

413
00:17:49,990 --> 00:17:56,440
SIM card and if I have access to any of

414
00:17:54,580 --> 00:17:58,899
the Android device and I don't know the

415
00:17:56,440 --> 00:18:01,690
password but if I can take out the SIM

416
00:17:58,900 --> 00:18:03,340
card and I reverse the engineer and all

417
00:18:01,690 --> 00:18:06,700
the stuff and then I'll be able to steal

418
00:18:03,340 --> 00:18:09,459
the passwords all the stuff yes our

419
00:18:06,700 --> 00:18:11,650
implementation is having two aspects one

420
00:18:09,460 --> 00:18:13,240
is the device centric aspect another one

421
00:18:11,650 --> 00:18:15,280
is the user centric aspect the device

422
00:18:13,240 --> 00:18:16,720
centric part keeps the measurement that

423
00:18:15,280 --> 00:18:18,610
comes from the device and the user

424
00:18:16,720 --> 00:18:21,190
centric parts will keeps that password

425
00:18:18,610 --> 00:18:23,229
that is the user is using so if you take

426
00:18:21,190 --> 00:18:24,760
the SIM card out of your iPhone and put

427
00:18:23,230 --> 00:18:27,010
it in an Android device there will be a

428
00:18:24,760 --> 00:18:28,420
authorization policy running so that it

429
00:18:27,010 --> 00:18:31,000
will identify that it is talking to the

430
00:18:28,420 --> 00:18:33,160
correct user or not if that part is

431
00:18:31,000 --> 00:18:34,780
complete then the user power centric

432
00:18:33,160 --> 00:18:36,490
part where your keys are available will

433
00:18:34,780 --> 00:18:38,649
be available but the device centric part

434
00:18:36,490 --> 00:18:40,270
will never be available because the UID

435
00:18:38,650 --> 00:18:43,720
of the device will never gonna match

436
00:18:40,270 --> 00:18:45,970
with the stored inside the TPM so the in

437
00:18:43,720 --> 00:18:49,330
TPM you only release the secrets once

438
00:18:45,970 --> 00:18:52,720
you authenticate the running device or

439
00:18:49,330 --> 00:18:57,189
running host yeah okay

440
00:18:52,720 --> 00:18:59,559
thank you so thanks for the talk

441
00:18:57,190 --> 00:19:02,170
so did I hear correctly did you does the

442
00:18:59,559 --> 00:19:03,850
security of the scheme depend on the

443
00:19:02,170 --> 00:19:07,900
assumption that the basement subsystem

444
00:19:03,850 --> 00:19:09,428
is trusted does the security of the

445
00:19:07,900 --> 00:19:12,940
scheme depend on the assumption that the

446
00:19:09,429 --> 00:19:15,490
baseband subsystem is trusted yes that

447
00:19:12,940 --> 00:19:16,960
that generally the basement processor is

448
00:19:15,490 --> 00:19:19,510
the software that is running inside is

449
00:19:16,960 --> 00:19:23,740
like once installed never gonna change

450
00:19:19,510 --> 00:19:25,540
so and rest of the software system

451
00:19:23,740 --> 00:19:26,800
cannot actually go and suddenly change

452
00:19:25,540 --> 00:19:28,809
the clock that is running for the

453
00:19:26,800 --> 00:19:30,309
basement processor so this is an

454
00:19:28,809 --> 00:19:32,980
assumption that we use that the basement

455
00:19:30,309 --> 00:19:34,270
processor is a secure processor so I

456
00:19:32,980 --> 00:19:37,030
guess I should have introduced myself

457
00:19:34,270 --> 00:19:39,330
I'm Alex I work at Qualcomm

458
00:19:37,030 --> 00:19:41,799
I probably broke some veggies later I

459
00:19:39,330 --> 00:19:43,030
guess so if you already trust the

460
00:19:41,799 --> 00:19:44,289
basement why not just implement

461
00:19:43,030 --> 00:19:47,158
everything on the basement processor it

462
00:19:44,289 --> 00:19:50,020
has a lot more power in the last class

463
00:19:47,159 --> 00:19:51,880
then the problem will happen that again

464
00:19:50,020 --> 00:19:53,289
your TPM will become a device bound TPM

465
00:19:51,880 --> 00:19:54,789
and they use eccentric nature that we

466
00:19:53,289 --> 00:19:55,480
want to introduce here will completely

467
00:19:54,789 --> 00:19:58,658
go away

468
00:19:55,480 --> 00:20:01,059
so that will give you a device TPM

469
00:19:58,659 --> 00:20:03,250
running on a chip so yeah simply simply

470
00:20:01,059 --> 00:20:05,350
you can do that one but then you if you

471
00:20:03,250 --> 00:20:07,030
ask okay give me a key from the TPM it

472
00:20:05,350 --> 00:20:09,219
will give you but your device will be

473
00:20:07,030 --> 00:20:11,678
bricked and you don't have that key

474
00:20:09,220 --> 00:20:19,929
anymore well still you can recover the

475
00:20:11,679 --> 00:20:22,360
key in the same TPM thank you it sounds

476
00:20:19,929 --> 00:20:23,860
like your implementation is actually can

477
00:20:22,360 --> 00:20:25,299
be generalized to just smart cars in

478
00:20:23,860 --> 00:20:29,889
general and not just SIM cards is that

479
00:20:25,299 --> 00:20:31,750
correct England we didn't implement in

480
00:20:29,890 --> 00:20:33,309
general SIM card because the general SIM

481
00:20:31,750 --> 00:20:36,039
cards are normally encrypted with the

482
00:20:33,309 --> 00:20:38,110
key that is provided by the telcos so we

483
00:20:36,039 --> 00:20:39,970
did it on a programmable SIM card but if

484
00:20:38,110 --> 00:20:42,219
we get support from the telcos it can be

485
00:20:39,970 --> 00:20:43,929
implemented in a general SIM card I

486
00:20:42,220 --> 00:20:46,020
meant more like generalized smart cards

487
00:20:43,929 --> 00:20:48,340
so like anything that implements this

488
00:20:46,020 --> 00:20:51,220
many sim card that you can cut into the

489
00:20:48,340 --> 00:20:52,959
form of a SIM card and that can go and

490
00:20:51,220 --> 00:20:54,460
talk to your phone through the same sort

491
00:20:52,960 --> 00:20:56,200
that is available on your phone it does

492
00:20:54,460 --> 00:20:58,330
library will work in that one because

493
00:20:56,200 --> 00:21:01,559
the crazy idea I have is like imagine if

494
00:20:58,330 --> 00:21:04,360
you take so the EMV protocol happens on

495
00:21:01,559 --> 00:21:07,000
various smart cards we consider doing

496
00:21:04,360 --> 00:21:10,570
something ridiculous by saying if a TPM

497
00:21:07,000 --> 00:21:12,309
could run on someone's credit card I

498
00:21:10,570 --> 00:21:17,309
cannot get the last part of the question

499
00:21:12,309 --> 00:21:20,110
okay so EMV is the europay MasterCard

500
00:21:17,309 --> 00:21:22,840
it's the standard in which Chip and PIN

501
00:21:20,110 --> 00:21:25,120
happens for and it's using the smart

502
00:21:22,840 --> 00:21:26,799
card kind of form factor uh-huh

503
00:21:25,120 --> 00:21:29,080
so the ridiculous idea is what if you

504
00:21:26,799 --> 00:21:31,780
ran a TPM on someone's credit card yeah

505
00:21:29,080 --> 00:21:33,760
you can you can you can it's just me for

506
00:21:31,780 --> 00:21:35,500
our implementation we need 64 kilobyte

507
00:21:33,760 --> 00:21:37,179
of space to implement the whole TPM so

508
00:21:35,500 --> 00:21:40,240
if the card can provide that much of

509
00:21:37,179 --> 00:21:42,360
space you can thank you okay that's a

510
00:21:40,240 --> 00:21:44,450
speaker again

511
00:21:42,360 --> 00:21:44,449
you

