1
00:00:11,030 --> 00:00:16,090
hello everyone my name is Shiwei and I'm

2
00:00:14,059 --> 00:00:18,430
a PhD student from Colombia

3
00:00:16,090 --> 00:00:20,259
University and today I'm going to talk

4
00:00:18,430 --> 00:00:22,509
about my work in protecting virtual

5
00:00:20,260 --> 00:00:25,060
machines from hypervisor and host

6
00:00:22,510 --> 00:00:27,460
operating system exploits and I

7
00:00:25,060 --> 00:00:29,970
collaborated with drunko and Jason Lee

8
00:00:27,460 --> 00:00:29,970
and this work

9
00:00:33,280 --> 00:00:37,510
virtualization is the central technology

10
00:00:35,440 --> 00:00:39,879
that drives popular cloud computing

11
00:00:37,510 --> 00:00:42,309
services that we are all probably

12
00:00:39,879 --> 00:00:44,589
familiar with the basic idea is that

13
00:00:42,309 --> 00:00:46,360
virtualization allows multiple virtual

14
00:00:44,590 --> 00:00:48,399
machines to run on a single piece of

15
00:00:46,360 --> 00:00:50,079
hardware and these virtual machines and

16
00:00:48,399 --> 00:00:52,149
their resources are managed by a

17
00:00:50,079 --> 00:00:56,710
privileged software called hypervisor

18
00:00:52,149 --> 00:00:58,780
and modern hypervisors trusted computing

19
00:00:56,710 --> 00:01:00,850
basis usually consists of a full

20
00:00:58,780 --> 00:01:02,890
operating system kernel which includes

21
00:01:00,850 --> 00:01:05,290
millions of lines of code because

22
00:01:02,890 --> 00:01:08,410
hypervisor can then reuse the existing

23
00:01:05,290 --> 00:01:11,380
of OS functionality to support many

24
00:01:08,410 --> 00:01:13,450
virtualization features and however this

25
00:01:11,380 --> 00:01:16,869
results in a huge potential attack

26
00:01:13,450 --> 00:01:19,390
surface that the hypervisor codebase

27
00:01:16,869 --> 00:01:22,810
with full access to VM data in CPU

28
00:01:19,390 --> 00:01:25,300
register memory and i/o and therefore

29
00:01:22,810 --> 00:01:28,119
hypervisors has been a tantalizing

30
00:01:25,300 --> 00:01:30,160
target for attackers as an adversary

31
00:01:28,119 --> 00:01:33,390
that exploited the hypervisor can't gain

32
00:01:30,160 --> 00:01:37,720
full access to our hosts abeyance data

33
00:01:33,390 --> 00:01:40,630
and two of the most popular commodity

34
00:01:37,720 --> 00:01:42,940
hypervisors are kvn then and both of

35
00:01:40,630 --> 00:01:46,089
them include a full Linux kernel as part

36
00:01:42,940 --> 00:01:48,910
of their TCB's KVM as shown on the left

37
00:01:46,090 --> 00:01:51,490
integrates a full Linux kernel directly

38
00:01:48,910 --> 00:01:53,679
in its hypervisor well then as shown on

39
00:01:51,490 --> 00:01:55,958
the right runs a full external in a

40
00:01:53,679 --> 00:01:58,179
privileged VM called dom0 to provide IO

41
00:01:55,959 --> 00:02:01,270
and management functions like PN

42
00:01:58,179 --> 00:02:03,610
snapshot and these hypervisors inherit

43
00:02:01,270 --> 00:02:05,830
all the vulnerabilities of the included

44
00:02:03,610 --> 00:02:11,080
Linux kernel and all the bugs in its

45
00:02:05,830 --> 00:02:12,849
large code base and several previous

46
00:02:11,080 --> 00:02:15,090
work has attempted to address this

47
00:02:12,849 --> 00:02:18,730
security issue in hypervisors who

48
00:02:15,090 --> 00:02:21,040
protect virtual machine data first over

49
00:02:18,730 --> 00:02:23,290
shadow in intact design a framework to

50
00:02:21,040 --> 00:02:26,409
protect application data from malicious

51
00:02:23,290 --> 00:02:28,810
operating system interview however these

52
00:02:26,409 --> 00:02:29,630
approaches rely on a trusted hypervisor

53
00:02:28,810 --> 00:02:31,760
to

54
00:02:29,630 --> 00:02:33,530
the security guarantee and did not

55
00:02:31,760 --> 00:02:37,060
address the threats from complex

56
00:02:33,530 --> 00:02:40,190
hypervisor to virtual machine data

57
00:02:37,060 --> 00:02:43,400
others design micro hypervisors to

58
00:02:40,190 --> 00:02:45,560
reduce the hypervisor TCB and as shown

59
00:02:43,400 --> 00:02:48,710
in the diagram the resulting TCB and

60
00:02:45,560 --> 00:02:51,290
micro hypervisors is much smaller than

61
00:02:48,710 --> 00:02:54,220
commodity hypervisors like kb m NZ and

62
00:02:51,290 --> 00:02:56,150
however micro hypervisors applied

63
00:02:54,220 --> 00:02:58,340
microkernel design principles to

64
00:02:56,150 --> 00:03:01,100
reemployment the hypervisor from scratch

65
00:02:58,340 --> 00:03:03,530
which the implementation itself is not

66
00:03:01,100 --> 00:03:08,329
easy to maintain and many virtualization

67
00:03:03,530 --> 00:03:10,820
features are lacking another approach

68
00:03:08,330 --> 00:03:12,770
used by cloud visor is to leverage nest

69
00:03:10,820 --> 00:03:15,470
advertised ation to de privileged the

70
00:03:12,770 --> 00:03:17,960
hypervisor in a virtual machine to

71
00:03:15,470 --> 00:03:21,170
protect the virtual machines host

72
00:03:17,960 --> 00:03:23,450
divisions data however net sterilization

73
00:03:21,170 --> 00:03:25,880
incurs unwanted overhead to virtual

74
00:03:23,450 --> 00:03:28,820
machine performance also features like

75
00:03:25,880 --> 00:03:32,329
parry virtual IO is not supported by the

76
00:03:28,820 --> 00:03:38,030
encryption based approach used by call

77
00:03:32,330 --> 00:03:41,060
visor and therefore to address this

78
00:03:38,030 --> 00:03:43,280
critical issue in hypervisor security we

79
00:03:41,060 --> 00:03:46,910
propose a new hypervisor design called

80
00:03:43,280 --> 00:03:49,130
hype SiC our design reduces the

81
00:03:46,910 --> 00:03:52,220
hypervisor TCB necessary to protect

82
00:03:49,130 --> 00:03:54,560
virtual machine data and the goal of our

83
00:03:52,220 --> 00:03:57,140
design is to improve security of

84
00:03:54,560 --> 00:03:59,870
hypervisors with modest implementation

85
00:03:57,140 --> 00:04:03,290
efforts but provide for operating system

86
00:03:59,870 --> 00:04:05,600
function for hypervisor functionality so

87
00:04:03,290 --> 00:04:07,510
unlike micro hypervisors our design

88
00:04:05,600 --> 00:04:10,250
focuses on retrofitting existing

89
00:04:07,510 --> 00:04:13,790
hypervisors instead of rewriting a new

90
00:04:10,250 --> 00:04:15,890
hypervisor as it's a difficult task that

91
00:04:13,790 --> 00:04:20,779
limits both functionality and deployment

92
00:04:15,890 --> 00:04:23,750
and therefore hype 6 design partitions

93
00:04:20,779 --> 00:04:26,359
are monolithic hypervisors into a small

94
00:04:23,750 --> 00:04:29,750
and trusted core visor in a large and

95
00:04:26,360 --> 00:04:33,590
untrusted host measure the core visor is

96
00:04:29,750 --> 00:04:36,890
the TCB of hype stick and as shown in

97
00:04:33,590 --> 00:04:39,169
the diagram here when applying hype set

98
00:04:36,890 --> 00:04:41,390
to retrofit k vm

99
00:04:39,169 --> 00:04:43,639
the linux kernel is included in the

100
00:04:41,390 --> 00:04:45,259
untrusted host visor which

101
00:04:43,639 --> 00:04:50,240
capsule eights most of the hypervisor

102
00:04:45,259 --> 00:04:51,800
complexity type ii leverages hardware

103
00:04:50,240 --> 00:04:55,069
bertrise different features widely

104
00:04:51,800 --> 00:04:57,650
available on arm and x86 hardware to

105
00:04:55,069 --> 00:04:59,629
simplify its design which uses the

106
00:04:57,650 --> 00:05:01,789
hardware to efficiently D privileged the

107
00:04:59,629 --> 00:05:07,060
host visor and protect virtual machine

108
00:05:01,789 --> 00:05:09,469
data and also unlike previous work

109
00:05:07,060 --> 00:05:11,120
hypothesis it's an access control based

110
00:05:09,469 --> 00:05:15,199
approach to protect virtual machines

111
00:05:11,120 --> 00:05:17,509
instead of encryption so unlike car

112
00:05:15,199 --> 00:05:19,729
visor our design is flexible enough to

113
00:05:17,509 --> 00:05:26,029
support commonly used virtualization

114
00:05:19,729 --> 00:05:28,758
functions like per virtual IO and hype

115
00:05:26,029 --> 00:05:31,629
stack protects VM data in CPU registers

116
00:05:28,759 --> 00:05:35,990
memory boot images and I hope a person

117
00:05:31,629 --> 00:05:38,479
and now before we discuss how hypes like

118
00:05:35,990 --> 00:05:41,240
protects VM data here we introduce our

119
00:05:38,479 --> 00:05:43,370
threat model so the goal of hi-tech is

120
00:05:41,240 --> 00:05:45,039
to protect the confidentiality and

121
00:05:43,370 --> 00:05:48,349
integrity of virtual machine data

122
00:05:45,039 --> 00:05:52,159
against remote attackers with asses to

123
00:05:48,349 --> 00:05:53,810
the hypervisor or its host events here

124
00:05:52,159 --> 00:05:55,520
we do not consider attacks on

125
00:05:53,810 --> 00:05:57,710
availability

126
00:05:55,520 --> 00:06:03,109
physical attacks and side channel

127
00:05:57,710 --> 00:06:05,899
attacks in our threat model so hype sex

128
00:06:03,110 --> 00:06:07,129
design is inspired by our observation

129
00:06:05,899 --> 00:06:08,839
that many hypervisor

130
00:06:07,129 --> 00:06:13,759
functions can be supported without

131
00:06:08,839 --> 00:06:16,460
accessing VM data for example a 6 to VM

132
00:06:13,759 --> 00:06:20,509
CPU register is unnecessary for CPU

133
00:06:16,460 --> 00:06:24,258
scheduling and therefore to keep the TCB

134
00:06:20,509 --> 00:06:26,240
small in hype stick our design tasks the

135
00:06:24,259 --> 00:06:29,050
core advisor to provide functions that

136
00:06:26,240 --> 00:06:32,000
require full access to VM data and

137
00:06:29,050 --> 00:06:37,099
mechanisms to protect VM data against

138
00:06:32,000 --> 00:06:39,710
the untrusted host budget and therefore

139
00:06:37,099 --> 00:06:41,839
the core advisor is in charge of

140
00:06:39,710 --> 00:06:44,388
enforcing access control policy to VM

141
00:06:41,839 --> 00:06:46,699
data and providing hypervisor functions

142
00:06:44,389 --> 00:06:48,860
that required for access to VM data

143
00:06:46,699 --> 00:06:51,860
including CPU virtualization and page

144
00:06:48,860 --> 00:06:53,509
table management while the host visor on

145
00:06:51,860 --> 00:06:55,729
the other hand provides complex

146
00:06:53,509 --> 00:06:56,990
hypervisor functions that require no

147
00:06:55,729 --> 00:07:00,560
access to on incur

148
00:06:56,990 --> 00:07:03,440
the VM data for instance the host module

149
00:07:00,560 --> 00:07:06,740
provides i/o and interpretation as well

150
00:07:03,440 --> 00:07:08,510
as resource allocation due to time

151
00:07:06,740 --> 00:07:11,420
constraint we do not enumerate all the

152
00:07:08,510 --> 00:07:13,820
hypervisor functions the design supports

153
00:07:11,420 --> 00:07:16,450
here so please refer to our paper for

154
00:07:13,820 --> 00:07:16,450
more details

155
00:07:17,710 --> 00:07:25,489
hypertext approach is to protecting the

156
00:07:21,770 --> 00:07:29,359
EM data using the following principles

157
00:07:25,490 --> 00:07:32,720
the core advisor focuses on only access

158
00:07:29,360 --> 00:07:36,880
control policy on VM data in CPU and

159
00:07:32,720 --> 00:07:40,340
memory and relies on the virtual machine

160
00:07:36,880 --> 00:07:42,380
themselves to protect your i/o data this

161
00:07:40,340 --> 00:07:46,429
simplified the core advisor complexity

162
00:07:42,380 --> 00:07:48,170
and we think this is possible because

163
00:07:46,430 --> 00:07:50,330
recent applications are increasingly

164
00:07:48,170 --> 00:07:52,700
designed to use end-to-end encryption to

165
00:07:50,330 --> 00:07:55,039
protect their IO channels already so

166
00:07:52,700 --> 00:07:59,330
there is no need to for the core visor

167
00:07:55,040 --> 00:08:01,220
to duplicate the protection effort so a

168
00:07:59,330 --> 00:08:04,310
virtual machine can use security network

169
00:08:01,220 --> 00:08:07,400
connections like TOS SSL or virtual disk

170
00:08:04,310 --> 00:08:09,380
encryption the core visor protects the

171
00:08:07,400 --> 00:08:11,690
encryption keys used by the virtual

172
00:08:09,380 --> 00:08:14,000
machines to protect their IO data out

173
00:08:11,690 --> 00:08:19,160
there that are loaded to VM CPU

174
00:08:14,000 --> 00:08:21,200
registers and memory so after

175
00:08:19,160 --> 00:08:24,830
introducing hype six general approach of

176
00:08:21,200 --> 00:08:26,690
VM data protection here we first discuss

177
00:08:24,830 --> 00:08:28,520
how and where should hype stack

178
00:08:26,690 --> 00:08:32,360
interposed on BM data accesses who

179
00:08:28,520 --> 00:08:34,400
protect me and data in hype sec the core

180
00:08:32,360 --> 00:08:38,080
advisor is granted full access to

181
00:08:34,400 --> 00:08:42,799
hardware resources and with four axes

182
00:08:38,080 --> 00:08:45,890
the core advisor controls accesses to VM

183
00:08:42,799 --> 00:08:49,339
data in all switches between house visor

184
00:08:45,890 --> 00:08:51,980
and virtual machines the core visor

185
00:08:49,340 --> 00:08:54,620
controls the hardware to interpose vm

186
00:08:51,980 --> 00:08:56,780
exists and interrupts to protect virtual

187
00:08:54,620 --> 00:08:59,660
machine data and depending on the exit

188
00:08:56,780 --> 00:09:02,510
reason the core visor could handle and

189
00:08:59,660 --> 00:09:04,550
exit directly by himself to to protect

190
00:09:02,510 --> 00:09:09,140
the data or switch to the host visor to

191
00:09:04,550 --> 00:09:10,699
use its functionality for instance to

192
00:09:09,140 --> 00:09:13,490
handle interrupts or

193
00:09:10,700 --> 00:09:15,410
were bein accesses to virtual IO devices

194
00:09:13,490 --> 00:09:18,650
as mentioned earlier are provided by the

195
00:09:15,410 --> 00:09:22,670
host version the core visor protects VM

196
00:09:18,650 --> 00:09:25,600
data in the switch before going to the

197
00:09:22,670 --> 00:09:29,449
host Bajor to use this device drivers

198
00:09:25,600 --> 00:09:31,790
and here knowing that hype SiC

199
00:09:29,450 --> 00:09:34,340
interposes on VM exists who provide its

200
00:09:31,790 --> 00:09:36,980
protection mechanism we now explain how

201
00:09:34,340 --> 00:09:42,020
hype secretary end data in CPU and

202
00:09:36,980 --> 00:09:44,840
memory hype cycle leverages nester page

203
00:09:42,020 --> 00:09:46,850
tables provided by virtualization

204
00:09:44,840 --> 00:09:49,250
hardware to protect me a memory against

205
00:09:46,850 --> 00:09:53,030
the host measure the curvature manages

206
00:09:49,250 --> 00:09:56,390
mapping in the host next a page table as

207
00:09:53,030 --> 00:10:00,130
shown in the diagram here to control

208
00:09:56,390 --> 00:10:03,590
house measures access to physical memory

209
00:10:00,130 --> 00:10:06,620
and here when the host badger is running

210
00:10:03,590 --> 00:10:10,100
the MMU first watch the host page tables

211
00:10:06,620 --> 00:10:11,930
as shown as host PT here to the host by

212
00:10:10,100 --> 00:10:14,360
Jermaine tanks to translate the host

213
00:10:11,930 --> 00:10:19,040
virtual address to what we call vh PA

214
00:10:14,360 --> 00:10:20,960
and then M mu walks the host nester page

215
00:10:19,040 --> 00:10:23,089
table maintained by the core visor to

216
00:10:20,960 --> 00:10:29,180
translate vh PA to machine physical

217
00:10:23,090 --> 00:10:31,880
address and B HPA is one-to-one map to

218
00:10:29,180 --> 00:10:34,459
host physical addresses by the core

219
00:10:31,880 --> 00:10:36,620
advisor so to give the host visor

220
00:10:34,460 --> 00:10:39,080
essentially have the same view to

221
00:10:36,620 --> 00:10:42,020
physical memory as if it's running on

222
00:10:39,080 --> 00:10:45,830
bare metal so this allows it to

223
00:10:42,020 --> 00:10:48,199
implicitly manage physical memory the

224
00:10:45,830 --> 00:10:50,690
core visor allows host visor to access

225
00:10:48,200 --> 00:10:52,550
an allocated physical memory to provide

226
00:10:50,690 --> 00:10:57,020
memory allocation support for virtual

227
00:10:52,550 --> 00:10:59,390
machine and in normal case the curvature

228
00:10:57,020 --> 00:11:02,030
ensures that the host nester page table

229
00:10:59,390 --> 00:11:03,680
can never contain mapping to the core

230
00:11:02,030 --> 00:11:08,959
visor so memory or virtual machines

231
00:11:03,680 --> 00:11:11,089
memory however hypnic allows host visor

232
00:11:08,960 --> 00:11:13,850
to access memory shared by virtual

233
00:11:11,090 --> 00:11:15,980
machines as this can be useful to

234
00:11:13,850 --> 00:11:18,140
support functionality like para virtual

235
00:11:15,980 --> 00:11:20,090
that requires shared memory

236
00:11:18,140 --> 00:11:22,569
communication between the host visor and

237
00:11:20,090 --> 00:11:22,570
virtual machines

238
00:11:23,120 --> 00:11:30,680
and here like to protect virtual machine

239
00:11:27,379 --> 00:11:32,930
CPU the core advisor interposes vm exits

240
00:11:30,680 --> 00:11:36,258
and stores the vm cpu contacts from

241
00:11:32,930 --> 00:11:38,329
hardware to v cpu state structure the B

242
00:11:36,259 --> 00:11:41,029
CPU state structure is allocated from

243
00:11:38,329 --> 00:11:43,910
the core visors private memory so the

244
00:11:41,029 --> 00:11:46,550
host visor and the attackers has no

245
00:11:43,910 --> 00:11:50,600
access to the state to compromise me in

246
00:11:46,550 --> 00:11:53,449
data and the core visor allows the host

247
00:11:50,600 --> 00:11:56,480
visor to access intermediate state as

248
00:11:53,449 --> 00:11:58,719
shown in the diagram here which contains

249
00:11:56,480 --> 00:12:01,730
VM general purpose register values

250
00:11:58,720 --> 00:12:04,699
necessary for host visor to provide its

251
00:12:01,730 --> 00:12:08,899
functionality and the intermediate state

252
00:12:04,699 --> 00:12:10,819
is sanitized and contains no VM data for

253
00:12:08,899 --> 00:12:12,709
example as mentioned earlier io is

254
00:12:10,819 --> 00:12:16,309
provided by the host batcher

255
00:12:12,709 --> 00:12:18,739
so to handle for example here a MMI

256
00:12:16,309 --> 00:12:20,509
alright the core visor provides the

257
00:12:18,740 --> 00:12:23,509
right data from beyond general-purpose

258
00:12:20,509 --> 00:12:25,490
registers to the intermediate state so

259
00:12:23,509 --> 00:12:28,100
the host visor can take the value and

260
00:12:25,490 --> 00:12:32,029
updates virtual devices that it

261
00:12:28,100 --> 00:12:35,240
maintains and on the other hand to

262
00:12:32,029 --> 00:12:37,189
handle a memory mapped i/o read the host

263
00:12:35,240 --> 00:12:39,230
value provides the read data it gets

264
00:12:37,189 --> 00:12:41,209
from the virtual device to the

265
00:12:39,230 --> 00:12:44,029
intermediate state so the core visor

266
00:12:41,209 --> 00:12:46,040
then copies the data to Hardware

267
00:12:44,029 --> 00:12:51,679
general-purpose registers of the virtual

268
00:12:46,040 --> 00:12:54,469
machine and here based on the design we

269
00:12:51,679 --> 00:12:57,079
have applied hype set to retrofit the

270
00:12:54,470 --> 00:12:58,910
KVM hypervisor the current

271
00:12:57,079 --> 00:13:00,739
implementation supports hardware with

272
00:12:58,910 --> 00:13:02,959
arm virtualization extensions and

273
00:13:00,740 --> 00:13:05,120
provides wide range of hypervisor

274
00:13:02,959 --> 00:13:08,239
functions on various hardware platforms

275
00:13:05,120 --> 00:13:11,089
as shown in the table or a hive second

276
00:13:08,240 --> 00:13:13,550
communication based on KBN results in

277
00:13:11,089 --> 00:13:16,100
significantly smaller TCB than the main

278
00:13:13,550 --> 00:13:20,899
like IBM and then while providing strong

279
00:13:16,100 --> 00:13:23,269
VM data protection our hive second

280
00:13:20,899 --> 00:13:25,189
foundation on our leverages Hardware

281
00:13:23,269 --> 00:13:28,819
Braille translation features provided by

282
00:13:25,189 --> 00:13:32,329
our virtualization extensions as shown

283
00:13:28,819 --> 00:13:35,310
in the diagram the Coe visor runs on

284
00:13:32,329 --> 00:13:37,529
Yeoh to the hypervisor mode

285
00:13:35,310 --> 00:13:40,229
the privilege CPU mode provided by armed

286
00:13:37,529 --> 00:13:45,000
on top of the existing kernel mode and

287
00:13:40,230 --> 00:13:46,889
user mode to run hypervisors the host

288
00:13:45,000 --> 00:13:49,199
visor on the other hand is the privilege

289
00:13:46,889 --> 00:13:53,250
to buy the core advisor to run in the

290
00:13:49,199 --> 00:13:56,008
eo1 mode which is kernel mode on arm the

291
00:13:53,250 --> 00:13:58,279
curvature uses stage to page tables the

292
00:13:56,009 --> 00:14:00,990
nested level page tables on our MBE

293
00:13:58,279 --> 00:14:03,870
translation extensions to support host

294
00:14:00,990 --> 00:14:07,339
visors memory accesses and to restrict

295
00:14:03,870 --> 00:14:10,439
it and protect me virtual machine data

296
00:14:07,339 --> 00:14:13,399
and finally the core advisor controls

297
00:14:10,439 --> 00:14:19,469
the system memory management unit to

298
00:14:13,399 --> 00:14:22,170
protect DMA accesses and we tested

299
00:14:19,470 --> 00:14:24,480
application workloads as listed in the

300
00:14:22,170 --> 00:14:28,529
table on real RM server class Hardware

301
00:14:24,480 --> 00:14:32,819
on both bare metal and virtual machines

302
00:14:28,529 --> 00:14:35,699
running on kb m and hype sake the word

303
00:14:32,819 --> 00:14:37,829
closed here includes a mix of CPU and

304
00:14:35,699 --> 00:14:39,599
i/o intensive benchmarks which some of

305
00:14:37,829 --> 00:14:42,120
them are commonly used server

306
00:14:39,600 --> 00:14:46,170
applications including Apache memcache D

307
00:14:42,120 --> 00:14:48,389
and my sequel and here the graph shows

308
00:14:46,170 --> 00:14:51,990
the application performance of VMs

309
00:14:48,389 --> 00:14:54,569
running mainline KVM in hype SiC the

310
00:14:51,990 --> 00:14:56,790
numbers here are all normalized to bare

311
00:14:54,569 --> 00:14:58,610
metal performance so lower bar means

312
00:14:56,790 --> 00:15:01,949
better performance

313
00:14:58,610 --> 00:15:04,829
so as can be seen hype SEC incurs small

314
00:15:01,949 --> 00:15:08,099
overhead in most of the benchmarks the

315
00:15:04,829 --> 00:15:10,258
only exception is TCP mert's which the

316
00:15:08,100 --> 00:15:12,540
benchmark measures depend with of VN

317
00:15:10,259 --> 00:15:15,959
sending network data to client machine

318
00:15:12,540 --> 00:15:17,819
and while the word IO driver in kb m is

319
00:15:15,959 --> 00:15:19,829
able to patch the transaction our

320
00:15:17,819 --> 00:15:21,360
current implementation of the word io

321
00:15:19,829 --> 00:15:25,199
front-end driver in the virtual machine

322
00:15:21,360 --> 00:15:28,709
shops additionally on each transaction

323
00:15:25,199 --> 00:15:31,758
to the core visor due to the memory

324
00:15:28,709 --> 00:15:35,550
access control mechanism we provides and

325
00:15:31,759 --> 00:15:39,990
we leave the optimizations in batching

326
00:15:35,550 --> 00:15:43,229
their transactions as future work so

327
00:15:39,990 --> 00:15:45,959
here is to conclude my presentation we

328
00:15:43,230 --> 00:15:49,350
have created hype psychic new hypervisor

329
00:15:45,959 --> 00:15:51,810
design that reduces the TCB necessary to

330
00:15:49,350 --> 00:15:54,750
virtual machines and high-tech

331
00:15:51,810 --> 00:15:57,630
decomposes a monolithic hypervisor into

332
00:15:54,750 --> 00:16:00,240
a small and trusted advisor in a large

333
00:15:57,630 --> 00:16:02,430
but untrusted host module with the

334
00:16:00,240 --> 00:16:05,460
latter could include an entire host

335
00:16:02,430 --> 00:16:07,079
operating system kernel and when VMs

336
00:16:05,460 --> 00:16:10,440
employ end to an encryption to protect

337
00:16:07,080 --> 00:16:13,410
their IO data pipe SEC can protect the

338
00:16:10,440 --> 00:16:16,530
confidentiality and integrity of all VM

339
00:16:13,410 --> 00:16:18,900
and finally we demonstrated the

340
00:16:16,530 --> 00:16:20,819
feasibility of high tech that it can

341
00:16:18,900 --> 00:16:23,400
support commodity hypervisors by

342
00:16:20,820 --> 00:16:28,740
retrofitting KPN and significantly

343
00:16:23,400 --> 00:16:30,569
reduces its tcp and that's it for my

344
00:16:28,740 --> 00:16:38,850
talk thanks for listening I'm now happy

345
00:16:30,570 --> 00:16:41,160
to answer questions hi Andrew Warren

346
00:16:38,850 --> 00:16:44,040
here from Google can you tell us more

347
00:16:41,160 --> 00:16:46,800
about how you use the SMU to prevent a

348
00:16:44,040 --> 00:16:49,410
compromised host visor or VM from using

349
00:16:46,800 --> 00:16:52,620
DMA to bypass your memory protections so

350
00:16:49,410 --> 00:16:55,410
we provide we do like chalk and emulate

351
00:16:52,620 --> 00:16:58,320
right so we are map the SME you register

352
00:16:55,410 --> 00:17:00,120
from host visor so everything that the

353
00:16:58,320 --> 00:17:02,160
host visor tried to access has to travel

354
00:17:00,120 --> 00:17:05,520
to the core visor right so we have

355
00:17:02,160 --> 00:17:07,770
control over the page table that the

356
00:17:05,520 --> 00:17:10,079
host visor configures so we do the same

357
00:17:07,770 --> 00:17:12,389
memory access control mechanism we use

358
00:17:10,079 --> 00:17:15,210
for memory management memory management

359
00:17:12,390 --> 00:17:18,480
unit we have like we track the ownership

360
00:17:15,210 --> 00:17:22,530
of pages when the host visor bills you

361
00:17:18,480 --> 00:17:24,329
know the the page table for smmu for

362
00:17:22,530 --> 00:17:26,700
each other advice so they can now

363
00:17:24,329 --> 00:17:28,889
control the device to do motherships

364
00:17:26,700 --> 00:17:30,600
dmarc's ok so it has to be a subset of

365
00:17:28,890 --> 00:17:32,460
yeah remember it has access to anomaly

366
00:17:30,600 --> 00:17:34,500
sorry so the memory the which it can use

367
00:17:32,460 --> 00:17:36,510
they can program it so Mewtwo has to be

368
00:17:34,500 --> 00:17:41,970
a subset of the memory there BM had

369
00:17:36,510 --> 00:17:43,260
access to yeah ok yeah all right thank

370
00:17:41,970 --> 00:17:45,510
you John Criswell University of

371
00:17:43,260 --> 00:17:47,190
Rochester nice talk they comment in a

372
00:17:45,510 --> 00:17:50,430
question first your work reminds me of

373
00:17:47,190 --> 00:17:53,310
the dichotomy work published in Vee 2016

374
00:17:50,430 --> 00:17:54,270
maybe afterwards we can chat about the

375
00:17:53,310 --> 00:17:57,419
similarities and differences between

376
00:17:54,270 --> 00:18:00,960
those two but my question is is so you

377
00:17:57,420 --> 00:18:02,880
have this this hypervisor that runs on

378
00:18:00,960 --> 00:18:04,800
top of the core visor I forget its name

379
00:18:02,880 --> 00:18:06,900
um so you're you're successfully

380
00:18:04,800 --> 00:18:08,550
protecting one guest virtual machine

381
00:18:06,900 --> 00:18:11,040
from another because the core visors are

382
00:18:08,550 --> 00:18:13,919
small but you're still increasing the

383
00:18:11,040 --> 00:18:16,020
size of the TCB for one guest virtual

384
00:18:13,920 --> 00:18:17,790
machine right so if I'm an attacker I

385
00:18:16,020 --> 00:18:19,170
can either attack applications that

386
00:18:17,790 --> 00:18:20,730
guest virtual machine the operating

387
00:18:19,170 --> 00:18:23,160
system that guest virtual machine or now

388
00:18:20,730 --> 00:18:25,950
your additional hypervisor running on

389
00:18:23,160 --> 00:18:30,000
top of core visor but below that

390
00:18:25,950 --> 00:18:31,740
operating system so in my correct am I

391
00:18:30,000 --> 00:18:33,720
correct in that assessment and if so do

392
00:18:31,740 --> 00:18:36,810
you have ideas on how to on how to

393
00:18:33,720 --> 00:18:40,170
reduce the TCB even further yeah so our

394
00:18:36,810 --> 00:18:42,270
story model is not to prevent the VM

395
00:18:40,170 --> 00:18:44,820
itself from being compromised right so

396
00:18:42,270 --> 00:18:47,220
the VM can be compromised but we isolate

397
00:18:44,820 --> 00:18:50,280
even this malicious VN from the rest of

398
00:18:47,220 --> 00:18:54,030
the GU viens right so it can now get

399
00:18:50,280 --> 00:18:56,910
access to even host wiser so our model

400
00:18:54,030 --> 00:18:59,850
is that we assume host visor or a VM can

401
00:18:56,910 --> 00:19:01,860
be compromised but we guarantee that the

402
00:18:59,850 --> 00:19:04,560
rest of the good ones the GU viens are

403
00:19:01,860 --> 00:19:06,479
not affected okay yeah I understand that

404
00:19:04,560 --> 00:19:07,710
your threat model yeah I think that

405
00:19:06,480 --> 00:19:09,630
would be an interesting direction for

406
00:19:07,710 --> 00:19:12,090
future work okay all right thank you

407
00:19:09,630 --> 00:19:14,290
yeah we can chat later thanks thanks a

408
00:19:12,090 --> 00:19:19,809
lot that was great thank you

409
00:19:14,290 --> 00:19:19,809
[Applause]

