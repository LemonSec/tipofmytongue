1
00:00:10,150 --> 00:00:13,960
so thank you Matthias for the

2
00:00:11,860 --> 00:00:16,630
introduction so my SM ray

3
00:00:13,960 --> 00:00:19,900
I'm from the rural university both home

4
00:00:16,630 --> 00:00:22,000
from Germany and yeah that's we

5
00:00:19,900 --> 00:00:24,459
interestingly have developed

6
00:00:22,000 --> 00:00:28,180
independently the same techniques

7
00:00:24,460 --> 00:00:30,040
against fuzzing but I think we have a

8
00:00:28,180 --> 00:00:34,239
different approach on how we did it

9
00:00:30,040 --> 00:00:37,469
right yeah so so what is the motivation

10
00:00:34,239 --> 00:00:41,919
why do we actually want to do this right

11
00:00:37,469 --> 00:00:45,429
so let's say you are someone who does

12
00:00:41,920 --> 00:00:47,710
not want their application to be out

13
00:00:45,429 --> 00:00:50,260
there and people finding bugs right you

14
00:00:47,710 --> 00:00:53,050
have a binary and you have some kind of

15
00:00:50,260 --> 00:00:55,059
trusted party which is you yourself and

16
00:00:53,050 --> 00:00:58,089
your team right so you have your own

17
00:00:55,059 --> 00:01:00,550
security team who's hunting bugs and you

18
00:00:58,089 --> 00:01:03,519
have also an untrusted party which are

19
00:01:00,550 --> 00:01:07,030
people you do not know maybe and from

20
00:01:03,519 --> 00:01:11,170
whom you don't want to find bugs right

21
00:01:07,030 --> 00:01:13,960
so if this is your goal that they should

22
00:01:11,170 --> 00:01:15,880
not be able to find bugs the question is

23
00:01:13,960 --> 00:01:20,169
so how can we stop them from finding

24
00:01:15,880 --> 00:01:22,960
bugs right so the first idea you might

25
00:01:20,170 --> 00:01:25,450
have is to say hey if they can't reverse

26
00:01:22,960 --> 00:01:28,210
engineer my binary they might not be

27
00:01:25,450 --> 00:01:30,790
able to find the bugs right so you might

28
00:01:28,210 --> 00:01:33,520
want to make that harder so they are not

29
00:01:30,790 --> 00:01:36,430
able to look in this into your code but

30
00:01:33,520 --> 00:01:38,350
in that case the question remains so

31
00:01:36,430 --> 00:01:39,550
what about automated bug finding right

32
00:01:38,350 --> 00:01:41,710
what about fuzzing

33
00:01:39,550 --> 00:01:44,289
so obfuscation hinders manual reverse

34
00:01:41,710 --> 00:01:47,259
engineering but if you have tools like

35
00:01:44,290 --> 00:01:49,600
AFL it's still super easy and in our

36
00:01:47,260 --> 00:01:52,870
paper we have shown that most occupation

37
00:01:49,600 --> 00:01:55,419
techniques do not actually help against

38
00:01:52,870 --> 00:01:58,150
housing right they will still be able to

39
00:01:55,420 --> 00:02:02,020
find bugs and it's become super easy to

40
00:01:58,150 --> 00:02:04,450
use tools like AFL so I had the student

41
00:02:02,020 --> 00:02:06,250
who never heard of AFL before so he knew

42
00:02:04,450 --> 00:02:08,080
something about fuzzing and in just one

43
00:02:06,250 --> 00:02:11,860
day he figured out how to use it and

44
00:02:08,080 --> 00:02:14,379
then found bugs in one major online

45
00:02:11,860 --> 00:02:16,599
multiplayer game that's exploitable I

46
00:02:14,379 --> 00:02:18,450
think even remotely I'm not sure so it's

47
00:02:16,599 --> 00:02:22,119
super easy to use right there are also

48
00:02:18,450 --> 00:02:23,799
projects like fast ex machina who took

49
00:02:22,120 --> 00:02:26,860
the top 500

50
00:02:23,800 --> 00:02:28,990
our clinics packages and then trust them

51
00:02:26,860 --> 00:02:30,700
for a couple of days and in two days

52
00:02:28,990 --> 00:02:32,800
they found several bugs that are

53
00:02:30,700 --> 00:02:34,570
exploitable so this has become super

54
00:02:32,800 --> 00:02:37,930
easy right you don't know but you don't

55
00:02:34,570 --> 00:02:40,359
have to know much about security so how

56
00:02:37,930 --> 00:02:44,140
do we impede fuzzing audits with that in

57
00:02:40,360 --> 00:02:46,780
mind so what we want you to do is get a

58
00:02:44,140 --> 00:02:50,410
diverse set of photos and analyze them

59
00:02:46,780 --> 00:02:53,230
and the idea behind that is let's find

60
00:02:50,410 --> 00:02:56,530
some assumptions that fathers have to

61
00:02:53,230 --> 00:02:58,660
make necessarily and then break these

62
00:02:56,530 --> 00:03:02,140
assumptions so what we did not want to

63
00:02:58,660 --> 00:03:04,480
make what we did not want to do is just

64
00:03:02,140 --> 00:03:06,220
target AFL specifically right we do not

65
00:03:04,480 --> 00:03:07,660
want to detect is AFL running or

66
00:03:06,220 --> 00:03:09,720
something like this let's find

67
00:03:07,660 --> 00:03:12,010
assumptions that fathers have to make

68
00:03:09,720 --> 00:03:13,990
contemporary fathers but also future for

69
00:03:12,010 --> 00:03:16,359
us and then break those assumptions so

70
00:03:13,990 --> 00:03:20,620
this should work universally so this is

71
00:03:16,360 --> 00:03:23,050
the idea so what we did is we compiled a

72
00:03:20,620 --> 00:03:25,240
list of contemporary fuzzing tools and

73
00:03:23,050 --> 00:03:26,740
the ones with the black dot are the ones

74
00:03:25,240 --> 00:03:29,320
that we actually looked at in our

75
00:03:26,740 --> 00:03:31,900
evaluation and we tried to find out

76
00:03:29,320 --> 00:03:34,180
assumptions which are the columns a B C

77
00:03:31,900 --> 00:03:36,700
and D so we found four core assumptions

78
00:03:34,180 --> 00:03:39,400
for these fathers and then we generalize

79
00:03:36,700 --> 00:03:42,640
them to the to this list of 19,000 right

80
00:03:39,400 --> 00:03:44,680
so they are all based on at least one of

81
00:03:42,640 --> 00:03:47,619
the assumptions and then we break them

82
00:03:44,680 --> 00:03:49,810
so what are these four assumptions so to

83
00:03:47,620 --> 00:03:51,310
come to that I will use a demo

84
00:03:49,810 --> 00:03:54,370
application to demonstrate the

85
00:03:51,310 --> 00:03:56,230
techniques this is a simple one where

86
00:03:54,370 --> 00:03:58,600
you just compare the first three bytes

87
00:03:56,230 --> 00:04:01,869
of the input to elf and if that's the

88
00:03:58,600 --> 00:04:03,700
case you just crash right and if that's

89
00:04:01,870 --> 00:04:08,200
not the case you print out a warning

90
00:04:03,700 --> 00:04:10,570
this is not a well at alpha right okay

91
00:04:08,200 --> 00:04:13,720
so what are the assumptions that we

92
00:04:10,570 --> 00:04:16,329
attack you so the first assumption is

93
00:04:13,720 --> 00:04:20,230
coverage yields relevant feedback so

94
00:04:16,329 --> 00:04:22,750
what does that mean you have to kind of

95
00:04:20,230 --> 00:04:23,440
follow so in our paper we the courage

96
00:04:22,750 --> 00:04:25,900
guided father

97
00:04:23,440 --> 00:04:29,050
our fathers like AFL they use feedback

98
00:04:25,900 --> 00:04:31,299
right and there are blind fathers that's

99
00:04:29,050 --> 00:04:33,130
the name that we chose in our paper for

100
00:04:31,300 --> 00:04:35,610
the ones they do they do not have any

101
00:04:33,130 --> 00:04:37,900
feedback so both of them

102
00:04:35,610 --> 00:04:41,470
they have some kind of input that they

103
00:04:37,900 --> 00:04:44,349
mutate and both of them can see if a

104
00:04:41,470 --> 00:04:46,990
crash has happened due to this input

105
00:04:44,350 --> 00:04:47,680
right but in the case of the coverage

106
00:04:46,990 --> 00:04:50,020
guided fada

107
00:04:47,680 --> 00:04:52,900
we can also see if there was some new

108
00:04:50,020 --> 00:04:54,940
coverage found and if there was new

109
00:04:52,900 --> 00:04:57,489
coverage we can add it to the queue and

110
00:04:54,940 --> 00:05:00,040
then mutated again later on to find even

111
00:04:57,490 --> 00:05:01,389
more courage because find by finding

112
00:05:00,040 --> 00:05:04,930
more coverage you get closer to

113
00:05:01,389 --> 00:05:06,790
potential bugs right so here the

114
00:05:04,930 --> 00:05:09,280
assumption is that the father's had to

115
00:05:06,790 --> 00:05:11,350
make as that new courage means new

116
00:05:09,280 --> 00:05:13,270
behavior if you find new courage you

117
00:05:11,350 --> 00:05:15,370
fault new behavior that means you could

118
00:05:13,270 --> 00:05:17,169
find potentially find new bugs right

119
00:05:15,370 --> 00:05:18,610
this is a reasonable assumption nothing

120
00:05:17,169 --> 00:05:21,070
wrong with this assumption works really

121
00:05:18,610 --> 00:05:24,970
well but for us this is good to know so

122
00:05:21,070 --> 00:05:27,430
we can attack it so what we did was we

123
00:05:24,970 --> 00:05:30,010
added so there's a demo application

124
00:05:27,430 --> 00:05:31,930
which a bunch of fake branches that have

125
00:05:30,010 --> 00:05:34,960
some constraints that are seem

126
00:05:31,930 --> 00:05:37,620
implausible that just jumped to each

127
00:05:34,960 --> 00:05:41,219
other right so if some father is

128
00:05:37,620 --> 00:05:43,720
observing this behavior it sees a lot of

129
00:05:41,220 --> 00:05:46,419
jumping around a lot of new code code

130
00:05:43,720 --> 00:05:50,229
coverage and the jumping around is based

131
00:05:46,419 --> 00:05:52,180
on the input so the input is the seed

132
00:05:50,229 --> 00:05:54,820
for the random number generator so you

133
00:05:52,180 --> 00:05:57,160
just flip one bit of the input and it

134
00:05:54,820 --> 00:05:59,919
will take another pass through this maze

135
00:05:57,160 --> 00:06:01,780
that we introduced so for the father it

136
00:05:59,919 --> 00:06:03,099
looks like every input is interesting

137
00:06:01,780 --> 00:06:06,580
every input does something interesting

138
00:06:03,100 --> 00:06:09,460
so the queue gets full of input that is

139
00:06:06,580 --> 00:06:12,400
actually irrelevant but it's it's not

140
00:06:09,460 --> 00:06:14,440
obvious for the father to see that in

141
00:06:12,400 --> 00:06:16,750
case of AFL also as demonstrated earlier

142
00:06:14,440 --> 00:06:18,370
the bitmap gets false you have so many

143
00:06:16,750 --> 00:06:22,570
collisions you'd actually don't see

144
00:06:18,370 --> 00:06:24,669
anything new happen so after you've done

145
00:06:22,570 --> 00:06:25,990
that the father is actually blind it

146
00:06:24,669 --> 00:06:28,630
rightly it can't use that feedback

147
00:06:25,990 --> 00:06:31,090
measure mechanism any useful way but it

148
00:06:28,630 --> 00:06:33,370
can still detect crashes so the second

149
00:06:31,090 --> 00:06:35,770
assumption that we had is that crashes

150
00:06:33,370 --> 00:06:39,850
obviously have to be observable for an

151
00:06:35,770 --> 00:06:42,070
outside entity for the father and so the

152
00:06:39,850 --> 00:06:45,370
idea is to just say hey why don't we

153
00:06:42,070 --> 00:06:47,349
overwrite the signals and then at our

154
00:06:45,370 --> 00:06:49,430
own custom signal handler that says oh

155
00:06:47,349 --> 00:06:52,009
I've seen that we

156
00:06:49,430 --> 00:06:54,710
she called me a crash has happened and I

157
00:06:52,009 --> 00:06:57,470
will just gracefully exit instead right

158
00:06:54,710 --> 00:06:59,900
so the outside entity just sees all the

159
00:06:57,470 --> 00:07:01,610
application exited so there was no trash

160
00:06:59,900 --> 00:07:05,270
there are also some other techniques

161
00:07:01,610 --> 00:07:08,120
like detecting pee trace because that's

162
00:07:05,270 --> 00:07:09,948
what hung fast users or gdb uses to see

163
00:07:08,120 --> 00:07:12,020
that a crash has happened so this is the

164
00:07:09,949 --> 00:07:14,509
one that you can actually add more stuff

165
00:07:12,020 --> 00:07:18,830
to it if you if you know that more

166
00:07:14,509 --> 00:07:20,720
techniques to detect crashes so now your

167
00:07:18,830 --> 00:07:22,789
your father can't use the feedback

168
00:07:20,720 --> 00:07:25,720
mechanism the coverage grandfather and

169
00:07:22,789 --> 00:07:27,919
also can't see any crashes but also

170
00:07:25,720 --> 00:07:30,710
there's a certain assumption that we

171
00:07:27,919 --> 00:07:34,250
found out about which is that you need a

172
00:07:30,710 --> 00:07:37,310
lot of executions per second to use

173
00:07:34,250 --> 00:07:39,320
fuzzing in an efficient way so the

174
00:07:37,310 --> 00:07:42,110
question that we asked ourselves why is

175
00:07:39,320 --> 00:07:44,659
FL so good at what it does right so FL

176
00:07:42,110 --> 00:07:47,120
is of news as a basis also in research

177
00:07:44,660 --> 00:07:49,669
to build your own research on top of it

178
00:07:47,120 --> 00:07:51,740
because it works so well right so there

179
00:07:49,669 --> 00:07:54,770
are many reasons why it's good but for

180
00:07:51,740 --> 00:07:57,620
us one of the most important is that

181
00:07:54,770 --> 00:07:59,990
human knowledge is not necessary for FL

182
00:07:57,620 --> 00:08:02,419
FL does not have to know and this is

183
00:07:59,990 --> 00:08:04,699
this kind of application or what kind of

184
00:08:02,419 --> 00:08:06,889
structure the application needs it just

185
00:08:04,699 --> 00:08:10,599
knows this is a binary that I need to

186
00:08:06,889 --> 00:08:13,370
fuss and coupled with there comes that

187
00:08:10,599 --> 00:08:15,560
FL is just really well implemented it's

188
00:08:13,370 --> 00:08:19,610
super fast it can do thousands of

189
00:08:15,560 --> 00:08:23,539
executions per second even more and so

190
00:08:19,610 --> 00:08:25,039
if you have these two conditions then

191
00:08:23,539 --> 00:08:27,260
you don't actually have to be smart

192
00:08:25,039 --> 00:08:29,990
about the code so yeah so the thing is

193
00:08:27,260 --> 00:08:32,390
as long as you are fast as a FL as long

194
00:08:29,990 --> 00:08:34,190
as you can introduce mutations and check

195
00:08:32,390 --> 00:08:36,169
if the application part new coverage or

196
00:08:34,190 --> 00:08:38,060
crash then you don't have to be smart

197
00:08:36,169 --> 00:08:39,529
about what you're doing you don't have

198
00:08:38,059 --> 00:08:41,869
to check like oh this is this kind of

199
00:08:39,529 --> 00:08:44,150
constraint how do I solve it just add

200
00:08:41,870 --> 00:08:45,890
more runs to just add more executions to

201
00:08:44,150 --> 00:08:48,819
it and after a while most of the

202
00:08:45,890 --> 00:08:51,410
constraints are solvable not all of them

203
00:08:48,820 --> 00:08:53,390
so how do we beat this assumption right

204
00:08:51,410 --> 00:08:56,300
so the bad approach would be to say

205
00:08:53,390 --> 00:08:57,980
let's just slow down the application so

206
00:08:56,300 --> 00:08:59,420
let's just add a slowdown of 100

207
00:08:57,980 --> 00:09:01,070
milliseconds you will only get 10

208
00:08:59,420 --> 00:09:02,910
executions the second but that's

209
00:09:01,070 --> 00:09:04,770
actually bad because in

210
00:09:02,910 --> 00:09:06,390
scenarios the binary that you're using

211
00:09:04,770 --> 00:09:09,660
will also be slowed down by 100

212
00:09:06,390 --> 00:09:11,880
milliseconds so what we ask ourself is

213
00:09:09,660 --> 00:09:14,550
how can we do how can we do a better

214
00:09:11,880 --> 00:09:16,410
version of this so we still want to slow

215
00:09:14,550 --> 00:09:18,930
down the application so we only get 10

216
00:09:16,410 --> 00:09:21,089
executions per second or less but what

217
00:09:18,930 --> 00:09:24,599
if we can do this only when being fast

218
00:09:21,090 --> 00:09:26,700
right but the idea is here to not detect

219
00:09:24,600 --> 00:09:28,830
that you are being fast right not check

220
00:09:26,700 --> 00:09:31,800
the environment like malware does right

221
00:09:28,830 --> 00:09:33,780
not like going oh this is like sandbox

222
00:09:31,800 --> 00:09:36,660
life this is AF Ellis running let's

223
00:09:33,780 --> 00:09:39,449
let's introduce a slower but instead do

224
00:09:36,660 --> 00:09:41,790
something a little bit more smart so

225
00:09:39,450 --> 00:09:43,710
what we ask ourself is so what is the

226
00:09:41,790 --> 00:09:45,900
implication of being fast where is the

227
00:09:43,710 --> 00:09:48,840
difference of being fast and not being

228
00:09:45,900 --> 00:09:50,790
fast and used in the real word pipe so

229
00:09:48,840 --> 00:09:52,250
you know the answer because as I said

230
00:09:50,790 --> 00:09:55,949
earlier they came with the same

231
00:09:52,250 --> 00:09:58,320
techniques so what we can do is what we

232
00:09:55,950 --> 00:10:00,210
observe is that most inputs while being

233
00:09:58,320 --> 00:10:02,640
fast will be malformed right if you

234
00:10:00,210 --> 00:10:03,960
start with an empty seat of course most

235
00:10:02,640 --> 00:10:06,540
of the inputs depending on the

236
00:10:03,960 --> 00:10:08,430
application will be malformed if you

237
00:10:06,540 --> 00:10:11,189
took took lib traffic for example

238
00:10:08,430 --> 00:10:12,900
started with an empty seat most of the

239
00:10:11,190 --> 00:10:16,260
things that you trying at the beginning

240
00:10:12,900 --> 00:10:18,630
will be malformed right if you start

241
00:10:16,260 --> 00:10:20,340
with a valid JPEG file most of the

242
00:10:18,630 --> 00:10:21,870
random rotations because a effeminate

243
00:10:20,340 --> 00:10:24,300
most fathers don't know anything about

244
00:10:21,870 --> 00:10:27,270
the application will lead to a malformed

245
00:10:24,300 --> 00:10:29,370
input file but in real mad scenarios

246
00:10:27,270 --> 00:10:32,040
again depending on the application

247
00:10:29,370 --> 00:10:34,290
most inputs will be well-formed so most

248
00:10:32,040 --> 00:10:37,829
JPEGs potentially that you find in the

249
00:10:34,290 --> 00:10:40,860
wild will be well-formed right so the

250
00:10:37,830 --> 00:10:43,590
idea here is to say let's just slow down

251
00:10:40,860 --> 00:10:48,510
the application only if the input is

252
00:10:43,590 --> 00:10:50,430
malformed so real words usage of the

253
00:10:48,510 --> 00:10:54,330
binary will not be affected so that's

254
00:10:50,430 --> 00:10:57,780
the idea so what we have done is to say

255
00:10:54,330 --> 00:11:00,420
okay let's just go to the point where

256
00:10:57,780 --> 00:11:03,060
the developer already decided that all

257
00:11:00,420 --> 00:11:06,030
this is not a valid file and at a sleep

258
00:11:03,060 --> 00:11:07,859
or something that it's maybe harder to

259
00:11:06,030 --> 00:11:11,069
detect Allah to remove right some kind

260
00:11:07,860 --> 00:11:13,380
of slowdown so it prints out there's not

261
00:11:11,070 --> 00:11:14,630
a well Adel file and then it introduces

262
00:11:13,380 --> 00:11:18,200
a sleep of 100

263
00:11:14,630 --> 00:11:21,250
for example so we have broken this

264
00:11:18,200 --> 00:11:23,360
assumption - so the last assumption is

265
00:11:21,250 --> 00:11:26,240
constraints are solvable the symbolic

266
00:11:23,360 --> 00:11:27,830
execution so as you have seen earlier on

267
00:11:26,240 --> 00:11:30,290
the table there were some father's that

268
00:11:27,830 --> 00:11:33,080
built upon this assumption not all of

269
00:11:30,290 --> 00:11:35,930
them some fathers use symbolic execution

270
00:11:33,080 --> 00:11:39,620
so the question is why do they do this

271
00:11:35,930 --> 00:11:41,239
why would you use symbolic execution as

272
00:11:39,620 --> 00:11:43,820
it turns out there are some constraints

273
00:11:41,240 --> 00:11:47,780
that are just too hard to solve for FL

274
00:11:43,820 --> 00:11:50,480
for example let's for example D word

275
00:11:47,780 --> 00:11:52,130
comparison if you use plane AFL it's

276
00:11:50,480 --> 00:11:54,740
just too hard to solve because you would

277
00:11:52,130 --> 00:11:56,540
have to get four bytes of it at the same

278
00:11:54,740 --> 00:11:58,580
time right it would take a lot of

279
00:11:56,540 --> 00:12:00,380
execution to get that right but for

280
00:11:58,580 --> 00:12:01,820
symbolic execution this is no problem it

281
00:12:00,380 --> 00:12:03,020
can just tell you all these are the four

282
00:12:01,820 --> 00:12:04,910
bytes that you need to solve this

283
00:12:03,020 --> 00:12:08,660
constraint so it's efficient to use it

284
00:12:04,910 --> 00:12:11,449
in that case so the Assumption here is

285
00:12:08,660 --> 00:12:13,069
that there are some constraints that are

286
00:12:11,450 --> 00:12:15,020
too hard to solve by random rotations

287
00:12:13,070 --> 00:12:18,770
alone but symbolic executions can

288
00:12:15,020 --> 00:12:21,560
actually help help you with that so how

289
00:12:18,770 --> 00:12:23,780
do we break this assumption we develop

290
00:12:21,560 --> 00:12:25,939
two techniques one of the techniques is

291
00:12:23,780 --> 00:12:28,220
again similar to the falsification guys

292
00:12:25,940 --> 00:12:30,170
we replace constant comparison by hash

293
00:12:28,220 --> 00:12:32,660
comparison instead of saying hey added

294
00:12:30,170 --> 00:12:34,490
three input bytes equal to elf we say

295
00:12:32,660 --> 00:12:37,880
other is the hash of the three input

296
00:12:34,490 --> 00:12:40,730
bytes equal to the hash of elf right and

297
00:12:37,880 --> 00:12:42,770
the second idea that we introduced is

298
00:12:40,730 --> 00:12:44,900
let's just put the input through

299
00:12:42,770 --> 00:12:47,060
encryption decryption that does actually

300
00:12:44,900 --> 00:12:49,189
nothing it's the same here it's the same

301
00:12:47,060 --> 00:12:50,959
output but again for the symbolic

302
00:12:49,190 --> 00:12:52,670
execution engine no the task would be

303
00:12:50,960 --> 00:12:55,310
for the hash conversion to actually

304
00:12:52,670 --> 00:12:57,439
figure out what was the correct input to

305
00:12:55,310 --> 00:12:59,719
get this check to be right and in the

306
00:12:57,440 --> 00:13:01,610
case of encryption decryption also to

307
00:12:59,720 --> 00:13:01,970
automatically prove that the output

308
00:13:01,610 --> 00:13:04,250
bites

309
00:13:01,970 --> 00:13:06,290
only depend on the input bytes right so

310
00:13:04,250 --> 00:13:06,980
that nothing happened and this is

311
00:13:06,290 --> 00:13:08,449
obvious

312
00:13:06,980 --> 00:13:11,360
so this pockets are symbolic execution

313
00:13:08,450 --> 00:13:14,420
engine it can't actually give you any

314
00:13:11,360 --> 00:13:18,440
results or it would take so so much time

315
00:13:14,420 --> 00:13:21,020
that it's not efficient anymore so our

316
00:13:18,440 --> 00:13:23,990
demo application looks like this so we

317
00:13:21,020 --> 00:13:25,290
get the input put it through encryption

318
00:13:23,990 --> 00:13:27,660
and decryption

319
00:13:25,290 --> 00:13:32,040
then we replaced the elf compersion by

320
00:13:27,660 --> 00:13:35,430
their respective hash comparisons so

321
00:13:32,040 --> 00:13:37,829
yeah for the evaluation so the most part

322
00:13:35,430 --> 00:13:41,430
of this of this paper was doing the

323
00:13:37,829 --> 00:13:43,380
evaluation right so one of the things

324
00:13:41,430 --> 00:13:45,870
that we did is we used a very simple

325
00:13:43,380 --> 00:13:48,180
example a dummy application that just

326
00:13:45,870 --> 00:13:49,889
checks for different bytes if they are

327
00:13:48,180 --> 00:13:52,050
correct and if they are correct it just

328
00:13:49,889 --> 00:13:53,940
crashes so the idea was if we can

329
00:13:52,050 --> 00:13:56,910
protect this application this very

330
00:13:53,940 --> 00:13:59,160
simple application from father's then

331
00:13:56,910 --> 00:14:00,839
every more difficult more complex

332
00:13:59,160 --> 00:14:03,509
application will also be protected and

333
00:14:00,839 --> 00:14:06,449
as we can see here the father's that we

334
00:14:03,509 --> 00:14:08,730
evaluated this on the assumptions that

335
00:14:06,449 --> 00:14:10,709
we broke actually applies specifically

336
00:14:08,730 --> 00:14:12,569
to those fellows that have this

337
00:14:10,709 --> 00:14:14,699
assumption right that's all rely on this

338
00:14:12,569 --> 00:14:17,130
assumption and we execute it then all

339
00:14:14,699 --> 00:14:20,399
for 24 hours so they did not find a very

340
00:14:17,130 --> 00:14:22,709
easy bug that was that they were able to

341
00:14:20,399 --> 00:14:25,170
find in seconds or minutes before on the

342
00:14:22,709 --> 00:14:27,000
plain binary and now with an tifa's they

343
00:14:25,170 --> 00:14:29,339
are not able to find any bugs and then

344
00:14:27,000 --> 00:14:31,319
we activated all of the features and let

345
00:14:29,339 --> 00:14:33,269
it run for 100 hours and still they were

346
00:14:31,319 --> 00:14:37,949
unable to find any bugs to observe

347
00:14:33,269 --> 00:14:40,709
anything and - yeah so you might think

348
00:14:37,949 --> 00:14:42,569
that yeah ok if you mask every bug if

349
00:14:40,709 --> 00:14:45,239
you just hide the box of course you

350
00:14:42,569 --> 00:14:46,740
won't see any bugs right so we wanted

351
00:14:45,240 --> 00:14:49,050
also to demonstrate that this is not

352
00:14:46,740 --> 00:14:51,510
just about hiding the back but also to

353
00:14:49,050 --> 00:14:54,300
impeding fuzzing audits right so we let

354
00:14:51,510 --> 00:14:56,220
it run for 24 hour 3 runs each and this

355
00:14:54,300 --> 00:14:59,130
is one of the examples for binutils for

356
00:14:56,220 --> 00:15:01,589
object dump and you can see that on the

357
00:14:59,130 --> 00:15:03,689
plain binary it finds a lot of courage

358
00:15:01,589 --> 00:15:05,279
in 24 hours the for thousands that we

359
00:15:03,690 --> 00:15:07,470
looked at but when you protect the

360
00:15:05,279 --> 00:15:09,930
application with anti fast it barely

361
00:15:07,470 --> 00:15:11,639
finds more than the baseline right so

362
00:15:09,930 --> 00:15:13,170
all the low-hanging fruit that you find

363
00:15:11,639 --> 00:15:15,389
in the beginning that are too easy to

364
00:15:13,170 --> 00:15:18,689
find those are the ones that you can

365
00:15:15,389 --> 00:15:22,980
actually find so funding attempts are

366
00:15:18,689 --> 00:15:25,349
actually really impeded by this so to

367
00:15:22,980 --> 00:15:29,339
conclude this talk so what we did was we

368
00:15:25,350 --> 00:15:33,269
had an systematic analysis of the worst

369
00:15:29,339 --> 00:15:35,160
set of fathers and we found four core

370
00:15:33,269 --> 00:15:37,200
assumptions that they rely on in the

371
00:15:35,160 --> 00:15:39,089
hope that other father

372
00:15:37,200 --> 00:15:41,040
in the future would also rely on this

373
00:15:39,090 --> 00:15:43,080
assumption so we just break the

374
00:15:41,040 --> 00:15:44,790
assumptions now and hopefully all the

375
00:15:43,080 --> 00:15:47,790
other fathers that we do not know about

376
00:15:44,790 --> 00:15:50,930
will also be broken so these are the

377
00:15:47,790 --> 00:15:53,670
four right break courage guided fuzzing

378
00:15:50,930 --> 00:15:56,069
just masks and just hide the bugs that

379
00:15:53,670 --> 00:15:58,110
are still being found and then just slow

380
00:15:56,070 --> 00:16:00,720
down the fuzzing attempt but not in

381
00:15:58,110 --> 00:16:05,220
real-world cases and also boggle down

382
00:16:00,720 --> 00:16:07,800
any symbolic execution attempts yeah so

383
00:16:05,220 --> 00:16:10,470
this is what anti fast us and we

384
00:16:07,800 --> 00:16:12,540
implemented it in a Python script that

385
00:16:10,470 --> 00:16:15,240
generates a C header file that you can

386
00:16:12,540 --> 00:16:18,199
include into your project and you can

387
00:16:15,240 --> 00:16:22,410
find it here on our Rube Cystic page

388
00:16:18,200 --> 00:16:23,430
yeah and yeah you can play around so

389
00:16:22,410 --> 00:16:33,920
thank you for attention

390
00:16:23,430 --> 00:16:33,920
any questions questions oh yeah sure

391
00:16:35,030 --> 00:16:42,150
very good ask the same question no I

392
00:16:37,860 --> 00:16:44,450
like this one so for your input

393
00:16:42,150 --> 00:16:46,709
manipulation where you're looking for

394
00:16:44,450 --> 00:16:48,180
what's considered a valid input and

395
00:16:46,710 --> 00:16:51,360
invalid input yeah I'm assuming you're

396
00:16:48,180 --> 00:16:54,329
looking at the program checks to kind of

397
00:16:51,360 --> 00:16:56,670
verify that so let me say and at this

398
00:16:54,330 --> 00:16:59,160
point this is all manually added by the

399
00:16:56,670 --> 00:17:01,800
developer okay so we so the pacification

400
00:16:59,160 --> 00:17:03,900
guys did the automatic finding of this

401
00:17:01,800 --> 00:17:06,899
so we did not do this we said so the

402
00:17:03,900 --> 00:17:09,720
developer knows where the past is the

403
00:17:06,900 --> 00:17:13,740
file is now from it just at line of code

404
00:17:09,720 --> 00:17:16,170
okay have you put any thought into what

405
00:17:13,740 --> 00:17:18,720
type of file formats or input formats

406
00:17:16,170 --> 00:17:21,709
would you no not really

407
00:17:18,720 --> 00:17:24,449
this wouldn't be applicable to yeah so

408
00:17:21,709 --> 00:17:27,449
we actually the the one that I showed

409
00:17:24,449 --> 00:17:29,820
the object um it actually accepts a lot

410
00:17:27,449 --> 00:17:31,980
of pellets things right so when we edit

411
00:17:29,820 --> 00:17:33,480
the slowed down to this so most of the

412
00:17:31,980 --> 00:17:35,610
times they did not do anything so I

413
00:17:33,480 --> 00:17:37,080
could see the FLL output and it actually

414
00:17:35,610 --> 00:17:39,570
could still do one hundreds or thousands

415
00:17:37,080 --> 00:17:41,610
of executions right so I think there are

416
00:17:39,570 --> 00:17:44,159
some programs that do not have any kind

417
00:17:41,610 --> 00:17:46,649
of structure where it's not important so

418
00:17:44,160 --> 00:17:48,720
in those cases it does not work but a

419
00:17:46,650 --> 00:17:49,380
lot of applications we did not do any

420
00:17:48,720 --> 00:17:51,390
evaluation

421
00:17:49,380 --> 00:17:54,420
on which applications in specific in

422
00:17:51,390 --> 00:17:57,330
particular but I think most applications

423
00:17:54,420 --> 00:17:59,520
will have some kind of detection of math

424
00:17:57,330 --> 00:18:00,409
on the input okay cool thank you thank

425
00:17:59,520 --> 00:18:03,270
you

426
00:18:00,410 --> 00:18:05,400
thanks for a nice stack I'm Mohammed

427
00:18:03,270 --> 00:18:07,740
from UC Irvine my question is that did

428
00:18:05,400 --> 00:18:10,860
you evaluate the effect of your work on

429
00:18:07,740 --> 00:18:12,510
normal execution of the program yeah so

430
00:18:10,860 --> 00:18:15,419
we had on the paper we had some

431
00:18:12,510 --> 00:18:17,190
evaluation on the overhead introduced so

432
00:18:15,420 --> 00:18:20,130
we protected the application with anti

433
00:18:17,190 --> 00:18:26,040
fast and then we evaluated what the

434
00:18:20,130 --> 00:18:28,710
overhead was on that application oh I

435
00:18:26,040 --> 00:18:30,899
think it was so small that we couldn't

436
00:18:28,710 --> 00:18:35,640
measure it so it's a really small number

437
00:18:30,900 --> 00:18:37,770
great Huysmans yeah

438
00:18:35,640 --> 00:18:40,740
so one question I had is if you're

439
00:18:37,770 --> 00:18:43,050
relying on adding these delays to

440
00:18:40,740 --> 00:18:44,820
uncommon paths then if this is like a

441
00:18:43,050 --> 00:18:47,399
server application does this mean that

442
00:18:44,820 --> 00:18:50,070
if I can make your server hit an

443
00:18:47,400 --> 00:18:52,230
uncommon path path reliably I can cause

444
00:18:50,070 --> 00:18:54,480
an ILO service this is a really good

445
00:18:52,230 --> 00:18:56,220
point I should have mentioned that so of

446
00:18:54,480 --> 00:18:57,960
course as a developer you should decide

447
00:18:56,220 --> 00:19:00,420
when to introduce these techniques or

448
00:18:57,960 --> 00:19:01,650
not and so application is a perfect

449
00:19:00,420 --> 00:19:03,390
example where you should not do this

450
00:19:01,650 --> 00:19:05,310
right so any kind of performance

451
00:19:03,390 --> 00:19:10,620
critical application you should not do

452
00:19:05,310 --> 00:19:13,139
any kind of slowdown but I also wondered

453
00:19:10,620 --> 00:19:15,629
that as a as an attacker could you knock

454
00:19:13,140 --> 00:19:17,850
out individual locations that you find

455
00:19:15,630 --> 00:19:19,430
it slow down to fuzzing or use some form

456
00:19:17,850 --> 00:19:21,959
of grammar based approach where you only

457
00:19:19,430 --> 00:19:24,000
constrain the mutation to a certain part

458
00:19:21,960 --> 00:19:25,740
of the program where it is valid so that

459
00:19:24,000 --> 00:19:27,720
you get past all of these checks and

460
00:19:25,740 --> 00:19:29,520
then can still find different kinds of

461
00:19:27,720 --> 00:19:32,610
vulnerabilities deeper into the program

462
00:19:29,520 --> 00:19:35,430
yeah so so in our case in anti fast it's

463
00:19:32,610 --> 00:19:37,679
super easy to to remove so in our paper

464
00:19:35,430 --> 00:19:39,450
what we actually said was that if you

465
00:19:37,680 --> 00:19:41,430
are using anti fast you're probably also

466
00:19:39,450 --> 00:19:43,080
using obfuscation and you should write

467
00:19:41,430 --> 00:19:45,300
if you add anti fast and then you add

468
00:19:43,080 --> 00:19:47,460
obfuscation on top so this is not easy

469
00:19:45,300 --> 00:19:49,350
to remove so if you look just on an a

470
00:19:47,460 --> 00:19:52,350
binary that is protected by an anti fast

471
00:19:49,350 --> 00:19:53,939
you will see the ten thousand of fake

472
00:19:52,350 --> 00:19:55,020
edges that you introduce right it's

473
00:19:53,940 --> 00:19:57,180
super easy to remove

474
00:19:55,020 --> 00:19:59,860
so at obfuscation and then it's all

475
00:19:57,180 --> 00:20:04,190
based on the security of the

476
00:19:59,860 --> 00:20:06,550
perfect any other questions otherwise

477
00:20:04,190 --> 00:20:11,970
let's thank American

478
00:20:06,550 --> 00:20:11,970
[Applause]

