1
00:00:10,809 --> 00:00:15,399
okay thank you for the introduction

2
00:00:12,629 --> 00:00:18,099
hello I am Gino Jung from Georgia Tech

3
00:00:15,400 --> 00:00:20,740
and today I am going to introduce and -

4
00:00:18,099 --> 00:00:22,900
technique called the codification his

5
00:00:20,740 --> 00:00:26,799
work is collaboration between Georgia

6
00:00:22,900 --> 00:00:29,168
Tech and University of Georgia voting is

7
00:00:26,800 --> 00:00:32,739
very good because fudging discovered

8
00:00:29,169 --> 00:00:34,630
many vulnerabilities for example a group

9
00:00:32,738 --> 00:00:37,959
of researchers discovered the 50 burner

10
00:00:34,630 --> 00:00:38,410
abilities in 50 days which is very

11
00:00:37,960 --> 00:00:41,379
amazing

12
00:00:38,410 --> 00:00:44,410
and nowadays Google support closer the

13
00:00:41,379 --> 00:00:49,120
fudging and this they discovered 9,000

14
00:00:44,410 --> 00:00:51,279
bucks in two years okay voting is very

15
00:00:49,120 --> 00:00:54,550
nice when developers develop a program

16
00:00:51,280 --> 00:00:56,949
and release the binary testers lunches

17
00:00:54,550 --> 00:01:01,178
fudging to discover the bug while the

18
00:00:56,949 --> 00:01:04,330
normal users enjoy the binary however

19
00:01:01,179 --> 00:01:06,580
unfortunately attackers also use fudging

20
00:01:04,330 --> 00:01:07,890
to discover the vulnerabilities and

21
00:01:06,580 --> 00:01:10,900
whenever they find the vulnerabilities

22
00:01:07,890 --> 00:01:15,520
they may use the bug to impute rate your

23
00:01:10,900 --> 00:01:18,430
system this is narubu story so our

24
00:01:15,520 --> 00:01:19,298
motivation begins here we wanted to make

25
00:01:18,430 --> 00:01:23,310
the project

26
00:01:19,299 --> 00:01:25,240
only effective to the testers by

27
00:01:23,310 --> 00:01:28,360
proposing the technique called the

28
00:01:25,240 --> 00:01:30,579
falsification by applying the

29
00:01:28,360 --> 00:01:32,250
pacification will release to fortify the

30
00:01:30,579 --> 00:01:35,589
binary to the user

31
00:01:32,250 --> 00:01:38,469
it means articles only on attackers has

32
00:01:35,590 --> 00:01:41,950
to use the fortify the binary for the

33
00:01:38,469 --> 00:01:44,500
fudging as a result attackers may end up

34
00:01:41,950 --> 00:01:46,899
with a less number of a bug while the

35
00:01:44,500 --> 00:01:48,689
testers discover more number of a book

36
00:01:46,899 --> 00:01:53,170
using the normally compared binary

37
00:01:48,689 --> 00:01:55,689
that's our motivation for this research

38
00:01:53,170 --> 00:01:58,929
we assumed one realistic scenario

39
00:01:55,689 --> 00:02:03,038
first the de bursary tried to discover

40
00:01:58,929 --> 00:02:05,409
bug by using the fudging however

41
00:02:03,039 --> 00:02:07,630
attackers does not have access to the

42
00:02:05,409 --> 00:02:10,690
source code or the normally compiled

43
00:02:07,630 --> 00:02:13,440
binary attackers only has a copy of the

44
00:02:10,690 --> 00:02:16,450
fortified binary in this scenario

45
00:02:13,440 --> 00:02:17,950
finally the attackers knows about the

46
00:02:16,450 --> 00:02:20,170
pacification technique and try to

47
00:02:17,950 --> 00:02:22,709
nullify for the better fighting

48
00:02:20,170 --> 00:02:22,708
performance

49
00:02:22,819 --> 00:02:27,858
considering our motivation and the

50
00:02:25,670 --> 00:02:31,969
threat model what could be a good

51
00:02:27,859 --> 00:02:34,489
research goal of course we should reduce

52
00:02:31,969 --> 00:02:37,430
the number of discover the bug that's

53
00:02:34,489 --> 00:02:39,500
most important and since we don't know

54
00:02:37,430 --> 00:02:42,439
which it project or the bursary we use

55
00:02:39,500 --> 00:02:44,720
to discover the vulnerabilities our

56
00:02:42,439 --> 00:02:49,010
solutions should be generally to the

57
00:02:44,720 --> 00:02:52,579
most of the fathers and the fortify the

58
00:02:49,010 --> 00:02:54,379
binary should introduce high overhead

59
00:02:52,579 --> 00:02:57,920
only to the attackers not the normal

60
00:02:54,379 --> 00:02:59,480
users finally since we assume that all

61
00:02:57,920 --> 00:03:01,578
the bursary knows about our technique

62
00:02:59,480 --> 00:03:06,379
our solution shall be resilient ax to

63
00:03:01,579 --> 00:03:08,810
daughter bursary analysis now let's talk

64
00:03:06,379 --> 00:03:12,439
about a possible solution for the entire

65
00:03:08,810 --> 00:03:15,319
fuzzing packing or obfuscation could be

66
00:03:12,439 --> 00:03:17,599
one candidate because it slows the

67
00:03:15,319 --> 00:03:19,760
forging execution at the same time it

68
00:03:17,599 --> 00:03:23,480
also slows the execution speed of the

69
00:03:19,760 --> 00:03:26,328
normal user and bog injection technique

70
00:03:23,480 --> 00:03:28,879
tries to inject many number of an

71
00:03:26,329 --> 00:03:32,209
exploratory bug to the binary but since

72
00:03:28,879 --> 00:03:36,198
it has a steady parent of the bug it is

73
00:03:32,209 --> 00:03:38,359
not vigilant to the bursary and for the

74
00:03:36,199 --> 00:03:40,760
detection technique tries to identify

75
00:03:38,359 --> 00:03:42,769
the project process and whenever it

76
00:03:40,760 --> 00:03:45,530
detected a fudging process it try to

77
00:03:42,769 --> 00:03:48,019
show the parental behavior but this is

78
00:03:45,530 --> 00:03:50,180
not generic because it requires specific

79
00:03:48,019 --> 00:03:52,370
information about the father and it is

80
00:03:50,180 --> 00:03:56,030
not also not resilient to the diversity

81
00:03:52,370 --> 00:03:58,400
to the steady parent an emulated

82
00:03:56,030 --> 00:04:00,319
iteration technique tries to infer

83
00:03:58,400 --> 00:04:03,919
whether the process is run by the

84
00:04:00,319 --> 00:04:06,768
emulator such as QEMU similar to the

85
00:04:03,919 --> 00:04:09,199
photo detection this solution is not

86
00:04:06,769 --> 00:04:12,260
generic and not resilient toodle-doo

87
00:04:09,199 --> 00:04:14,599
bursaries so now we came up with a new

88
00:04:12,260 --> 00:04:18,699
solution called the classification which

89
00:04:14,599 --> 00:04:18,699
is satisfied all the criterias for

90
00:04:18,909 --> 00:04:23,979
duplication hinders all the best

91
00:04:21,470 --> 00:04:28,159
pictures over modern modern forgers

92
00:04:23,979 --> 00:04:30,830
first modern poser is very fast they are

93
00:04:28,159 --> 00:04:32,930
very fast with several features by

94
00:04:30,830 --> 00:04:35,479
utilizing parallel execution or the

95
00:04:32,930 --> 00:04:36,140
hardware features were using the focus

96
00:04:35,479 --> 00:04:39,650
over

97
00:04:36,140 --> 00:04:41,539
so to make them slow we propose the

98
00:04:39,650 --> 00:04:45,169
first component called the speed bump

99
00:04:41,540 --> 00:04:48,980
and nowadays fathers check the coverage

100
00:04:45,170 --> 00:04:51,500
of the execution so to make the coverage

101
00:04:48,980 --> 00:04:53,660
management usually lists we proposed the

102
00:04:51,500 --> 00:04:56,660
second component called the branch trip

103
00:04:53,660 --> 00:04:58,910
and finally modern trend shows that

104
00:04:56,660 --> 00:05:01,510
father is working with the symbolic

105
00:04:58,910 --> 00:05:04,940
execution or dynamic paint analysis tool

106
00:05:01,510 --> 00:05:07,520
so for the hybrid forger we prepared the

107
00:05:04,940 --> 00:05:11,030
fourth or the component called the anti

108
00:05:07,520 --> 00:05:13,250
hybrid ok now let's talk about the

109
00:05:11,030 --> 00:05:16,219
personal component now you are seeing a

110
00:05:13,250 --> 00:05:19,240
very simple control flow by using the

111
00:05:16,220 --> 00:05:21,650
many number of samples we purse identify

112
00:05:19,240 --> 00:05:26,630
frequently and rarely execute to the

113
00:05:21,650 --> 00:05:29,510
pass and then if this is important we

114
00:05:26,630 --> 00:05:32,390
inject delays from the most rarely

115
00:05:29,510 --> 00:05:35,120
visited edges from this example since

116
00:05:32,390 --> 00:05:38,570
the aji between 1 & 2 is the most rarely

117
00:05:35,120 --> 00:05:41,090
visited edge we put a delay here this is

118
00:05:38,570 --> 00:05:42,920
a very effective solution because normal

119
00:05:41,090 --> 00:05:46,159
user usually follows the common path

120
00:05:42,920 --> 00:05:49,130
indicated by the blue line whereas the

121
00:05:46,160 --> 00:05:51,320
attackers searched for the new path so

122
00:05:49,130 --> 00:05:53,719
our important intuition here is that the

123
00:05:51,320 --> 00:05:58,640
impact of delay is more significant

124
00:05:53,720 --> 00:06:00,230
atutor order bursaries now you know

125
00:05:58,640 --> 00:06:02,289
where to inject to delay the next

126
00:06:00,230 --> 00:06:05,600
question will be how to inject a delay

127
00:06:02,290 --> 00:06:07,640
the simple solution is to use the sleep

128
00:06:05,600 --> 00:06:09,890
function however this is very easy to

129
00:06:07,640 --> 00:06:12,770
nullify this is of very obvious to the

130
00:06:09,890 --> 00:06:15,890
audible sorry so instead of using the

131
00:06:12,770 --> 00:06:17,690
sleep function we use randomly generated

132
00:06:15,890 --> 00:06:20,780
code to avoid aesthetic parametric

133
00:06:17,690 --> 00:06:23,090
analysis we also impose the control flow

134
00:06:20,780 --> 00:06:25,849
and there are flow dependencies to avoid

135
00:06:23,090 --> 00:06:29,810
the automated analysis let us see the

136
00:06:25,850 --> 00:06:33,230
detailed example of the delay alright

137
00:06:29,810 --> 00:06:36,170
assume that we identify this location is

138
00:06:33,230 --> 00:06:38,810
rarely executed code first we try to

139
00:06:36,170 --> 00:06:41,090
define the global variable and make a

140
00:06:38,810 --> 00:06:43,130
function call and actually in the

141
00:06:41,090 --> 00:06:45,109
function function G consists of the

142
00:06:43,130 --> 00:06:48,800
randomly generated code but not just

143
00:06:45,110 --> 00:06:49,850
random but also try to modify the define

144
00:06:48,800 --> 00:06:52,460
the global variable

145
00:06:49,850 --> 00:06:55,550
and modify the local beta preparing the

146
00:06:52,460 --> 00:06:59,270
pest pestered local pest argument value

147
00:06:55,550 --> 00:07:03,710
here this is how the delivers using the

148
00:06:59,270 --> 00:07:05,750
randomly generated code now let's move

149
00:07:03,710 --> 00:07:07,700
on to the second component called the

150
00:07:05,750 --> 00:07:11,180
branch trap which hinders coverage

151
00:07:07,700 --> 00:07:15,409
management we built multiple functions

152
00:07:11,180 --> 00:07:17,540
on on the branch trap so the bridge turn

153
00:07:15,410 --> 00:07:21,470
number one fabricate input sensitive a

154
00:07:17,540 --> 00:07:24,200
pest let's see what input sensitive

155
00:07:21,470 --> 00:07:27,890
opposite means there is one input and

156
00:07:24,200 --> 00:07:30,500
goes through the control flow one two

157
00:07:27,890 --> 00:07:34,700
and three and four the mutator input

158
00:07:30,500 --> 00:07:36,560
slightly and the control flow also shows

159
00:07:34,700 --> 00:07:38,930
that the control flow are one two and

160
00:07:36,560 --> 00:07:41,420
three use the same control flow and same

161
00:07:38,930 --> 00:07:42,860
Cobra G meaning that the father's think

162
00:07:41,420 --> 00:07:45,230
okay the second input is not that

163
00:07:42,860 --> 00:07:46,580
important let's discard that's how the

164
00:07:45,230 --> 00:07:48,710
effective up Roger works

165
00:07:46,580 --> 00:07:52,340
however after we've applied the branch

166
00:07:48,710 --> 00:07:54,919
trap the first input visit our packet

167
00:07:52,340 --> 00:07:56,719
passed between one and two and the

168
00:07:54,920 --> 00:07:58,910
second input widget another fake pass

169
00:07:56,720 --> 00:08:01,010
between two and three now further think

170
00:07:58,910 --> 00:08:04,010
okay both inputs are very important

171
00:08:01,010 --> 00:08:08,390
let's equip both inputs and then for the

172
00:08:04,010 --> 00:08:10,700
real ways of their variable times now

173
00:08:08,390 --> 00:08:14,270
let us see how the detail of the fake

174
00:08:10,700 --> 00:08:16,070
pass we took the idea from the

175
00:08:14,270 --> 00:08:17,690
return-oriented programming so there is

176
00:08:16,070 --> 00:08:20,510
a function and you know that the

177
00:08:17,690 --> 00:08:22,430
function haploid instructions first we

178
00:08:20,510 --> 00:08:24,800
try to identify all the same

179
00:08:22,430 --> 00:08:27,290
instructions who Dakota snippet across

180
00:08:24,800 --> 00:08:29,360
the binary so in this example we

181
00:08:27,290 --> 00:08:31,880
identify the end number of the same code

182
00:08:29,360 --> 00:08:34,789
snippet when there is a function call

183
00:08:31,880 --> 00:08:37,849
invoking we calculate index ability

184
00:08:34,789 --> 00:08:39,978
using the actual argument and using the

185
00:08:37,849 --> 00:08:42,380
index value we make a jump in the

186
00:08:39,979 --> 00:08:45,080
syllable V decided to jump to the second

187
00:08:42,380 --> 00:08:47,750
code snippet and then jump it back to

188
00:08:45,080 --> 00:08:49,970
the original instruction this is a very

189
00:08:47,750 --> 00:08:51,980
effective because whenever data is

190
00:08:49,970 --> 00:08:54,200
changed the argument value is also

191
00:08:51,980 --> 00:08:58,160
changed it means data changes will

192
00:08:54,200 --> 00:09:01,100
affect to the control flow price

193
00:08:58,160 --> 00:09:01,860
remember to try to saturate a feedback

194
00:09:01,100 --> 00:09:03,960
state so

195
00:09:01,860 --> 00:09:07,700
it consists of a huge number of

196
00:09:03,960 --> 00:09:10,770
deterministic branches so similar to the

197
00:09:07,700 --> 00:09:14,040
speed bump it is installed in the early

198
00:09:10,770 --> 00:09:15,689
XQ to the past and weight of long time

199
00:09:14,040 --> 00:09:18,270
like a several hours and several days

200
00:09:15,690 --> 00:09:22,140
once a father Bridget dislocation is

201
00:09:18,270 --> 00:09:24,720
suddenly saturated coverage a bitmap so

202
00:09:22,140 --> 00:09:26,610
after the saturation photo revealed that

203
00:09:24,720 --> 00:09:29,550
discovered a new interesting input

204
00:09:26,610 --> 00:09:32,390
because all the in all the copies mark

205
00:09:29,550 --> 00:09:32,390
the abilities

206
00:09:32,450 --> 00:09:37,470
finally let me introduced of anti hybrid

207
00:09:35,190 --> 00:09:40,680
component which hinders hybrid fudging

208
00:09:37,470 --> 00:09:42,360
to hinder the hybrid fudging we tackle

209
00:09:40,680 --> 00:09:45,870
the challenges of the hybrid of dodging

210
00:09:42,360 --> 00:09:48,060
for the dynamic data analysis tracing

211
00:09:45,870 --> 00:09:51,780
the implicit flow is very expensive so

212
00:09:48,060 --> 00:09:54,569
we transform existing explicit data flow

213
00:09:51,780 --> 00:09:57,089
into the implicit data flow and photo

214
00:09:54,570 --> 00:09:58,500
symbolic execution text explosion is a

215
00:09:57,090 --> 00:10:01,650
very long problem and difficulty to

216
00:09:58,500 --> 00:10:05,610
solve so we introduce an arbitrary path

217
00:10:01,650 --> 00:10:07,860
explosion for example if there is a

218
00:10:05,610 --> 00:10:10,470
input barrier character variable and we

219
00:10:07,860 --> 00:10:13,350
define another variable called anti DTA

220
00:10:10,470 --> 00:10:16,020
here and we try to import the contents

221
00:10:13,350 --> 00:10:18,060
of the original input and also a new

222
00:10:16,020 --> 00:10:20,850
input to the newly defined variable

223
00:10:18,060 --> 00:10:22,280
since there is no parity title

224
00:10:20,850 --> 00:10:24,870
relationship between two variables

225
00:10:22,280 --> 00:10:30,630
dynamic content analysis engine cannot

226
00:10:24,870 --> 00:10:33,210
taint the new variable here and for the

227
00:10:30,630 --> 00:10:35,100
past explosion we transform the branch

228
00:10:33,210 --> 00:10:37,320
condition to use the hash operation

229
00:10:35,100 --> 00:10:39,600
since the heavy operation will require a

230
00:10:37,320 --> 00:10:41,610
large number of symbols symbolic

231
00:10:39,600 --> 00:10:48,210
execution engine may end up with the try

232
00:10:41,610 --> 00:10:51,930
mount now let me put it all together in

233
00:10:48,210 --> 00:10:54,990
the work oak floors so there's a source

234
00:10:51,930 --> 00:10:58,069
code and we put many number of valid and

235
00:10:54,990 --> 00:11:01,140
invalid examples to the binary and

236
00:10:58,070 --> 00:11:04,200
collect a profile of the binary after we

237
00:11:01,140 --> 00:11:06,840
collect all the information we try to

238
00:11:04,200 --> 00:11:08,760
inject a three-component using the

239
00:11:06,840 --> 00:11:11,010
profile information and then measure

240
00:11:08,760 --> 00:11:14,100
overhead if the overhead is satisfied

241
00:11:11,010 --> 00:11:15,679
user specified the budget we try to

242
00:11:14,100 --> 00:11:18,179
inject a more calm

243
00:11:15,679 --> 00:11:20,429
and if there's no space to inject

244
00:11:18,179 --> 00:11:25,249
component then we released a fortified

245
00:11:20,429 --> 00:11:29,129
binary to the user we implemented

246
00:11:25,249 --> 00:11:32,009
multiplication using Python and C++ and

247
00:11:29,129 --> 00:11:34,619
in our evaluation we try to answer the

248
00:11:32,009 --> 00:11:36,679
number abilities to reduce to reduce to

249
00:11:34,619 --> 00:11:38,909
the discover the pass and the bug and

250
00:11:36,679 --> 00:11:43,738
effectiveness on the barrios of Rogers

251
00:11:38,909 --> 00:11:46,859
and overhead overall we reduce to the

252
00:11:43,739 --> 00:11:49,679
discover the coverage by 71% and this

253
00:11:46,859 --> 00:11:51,809
shows one example so compared to the

254
00:11:49,679 --> 00:11:54,839
original binary which indicates as a

255
00:11:51,809 --> 00:11:56,939
Orange Line to modify the binary the

256
00:11:54,839 --> 00:12:01,289
blue line shows a significant reduction

257
00:11:56,939 --> 00:12:03,629
on the discover the pass when you test

258
00:12:01,289 --> 00:12:07,319
on the different binaries we could

259
00:12:03,629 --> 00:12:09,569
observe the similar tendency and when he

260
00:12:07,319 --> 00:12:13,579
tests on the various of orders we could

261
00:12:09,569 --> 00:12:16,069
also reduce down the discover the path

262
00:12:13,579 --> 00:12:19,618
when we talk about the discover the bog

263
00:12:16,069 --> 00:12:23,779
on the be neutral libraries we could

264
00:12:19,619 --> 00:12:26,639
reduce 97% of the discovered crashes and

265
00:12:23,779 --> 00:12:33,629
67% of the reduction on the lapidarist

266
00:12:26,639 --> 00:12:36,179
set and there's the overhead so there is

267
00:12:33,629 --> 00:12:40,439
a 62% of the size overhead and about 4%

268
00:12:36,179 --> 00:12:43,919
of the CPU overhead on the pin UTS and

269
00:12:40,439 --> 00:12:46,649
for the layered application 5% of just

270
00:12:43,919 --> 00:12:50,728
file overhead and less than 1% of the

271
00:12:46,649 --> 00:12:53,159
CPU overhead so our solution is best

272
00:12:50,729 --> 00:12:55,949
effort based approach against a at the

273
00:12:53,159 --> 00:12:58,139
bursary analysis and our solution is

274
00:12:55,949 --> 00:13:00,419
complementary to the other deepest

275
00:12:58,139 --> 00:13:02,609
techniques so we are not hiding all the

276
00:13:00,419 --> 00:13:05,189
vulnerabilities but we are introducing

277
00:13:02,609 --> 00:13:07,709
significant coastal to the other other

278
00:13:05,189 --> 00:13:11,189
bursaries so interesting in the next

279
00:13:07,709 --> 00:13:14,128
talk is also about the entire forging by

280
00:13:11,189 --> 00:13:16,409
the MLA so we briefly compared the two

281
00:13:14,129 --> 00:13:18,719
researches we both support the delay

282
00:13:16,409 --> 00:13:21,629
execution and we also support effect

283
00:13:18,719 --> 00:13:23,759
coverage but modification only supported

284
00:13:21,629 --> 00:13:26,309
coverage saturation and anti-fraud unit

285
00:13:23,759 --> 00:13:27,390
support crash prevention and we both

286
00:13:26,309 --> 00:13:29,069
support anti hi

287
00:13:27,390 --> 00:13:32,040
falsification consider the

288
00:13:29,070 --> 00:13:33,840
countermeasures okay multiplication

289
00:13:32,040 --> 00:13:36,480
makes the fudging only effective to the

290
00:13:33,840 --> 00:13:38,340
testers by using three components speed

291
00:13:36,480 --> 00:13:41,130
bump injected delays and pressed Rev

292
00:13:38,340 --> 00:13:42,840
insert input sensitive branches and the

293
00:13:41,130 --> 00:13:47,180
third component and the hybrid hinders

294
00:13:42,840 --> 00:13:50,540
hybrid approach in technics thank you

295
00:13:47,180 --> 00:13:57,479
[Applause]

296
00:13:50,540 --> 00:13:59,040
questions hey Dan from Google so if I've

297
00:13:57,480 --> 00:14:00,840
never seen this binary before I don't

298
00:13:59,040 --> 00:14:03,360
really have any information about it and

299
00:14:00,840 --> 00:14:05,700
therefore I don't really know normally

300
00:14:03,360 --> 00:14:07,620
what a commonly executed path looks like

301
00:14:05,700 --> 00:14:10,200
and what a rare path looks like could I

302
00:14:07,620 --> 00:14:11,820
use programs that have been transformed

303
00:14:10,200 --> 00:14:13,860
by this technique can I use kind of

304
00:14:11,820 --> 00:14:16,860
artifacts from that to potentially find

305
00:14:13,860 --> 00:14:18,030
bugs quicker Oh what do you think could

306
00:14:16,860 --> 00:14:19,740
be used to address that

307
00:14:18,030 --> 00:14:21,689
okay the ocean dental user of the

308
00:14:19,740 --> 00:14:22,200
pacification is the developer of the

309
00:14:21,690 --> 00:14:24,270
software

310
00:14:22,200 --> 00:14:27,000
it means the typical person knows about

311
00:14:24,270 --> 00:14:29,850
the main path and who has enough number

312
00:14:27,000 --> 00:14:31,260
of test cases so he can identify what it

313
00:14:29,850 --> 00:14:32,940
what the normal path is what the real

314
00:14:31,260 --> 00:14:34,620
task it addresses right but the whole

315
00:14:32,940 --> 00:14:36,660
point of this is to make it so that an

316
00:14:34,620 --> 00:14:38,430
attacker can't you know effectively fog

317
00:14:36,660 --> 00:14:40,319
and or fuzz your program and find bugs

318
00:14:38,430 --> 00:14:42,150
right but these artifacts you're

319
00:14:40,320 --> 00:14:43,530
introducing on the rare paths are

320
00:14:42,150 --> 00:14:45,209
something I'd want to look for as an

321
00:14:43,530 --> 00:14:49,140
attacker to potentially look for bugs

322
00:14:45,210 --> 00:14:51,980
can you comment on that sure if there's

323
00:14:49,140 --> 00:14:55,110
a Pend Oreille let's get to the past

324
00:14:51,980 --> 00:14:56,910
it's still we can delay because we are

325
00:14:55,110 --> 00:14:58,530
delaying the path to the real last kid

326
00:14:56,910 --> 00:15:00,600
to the one so it means if there's an

327
00:14:58,530 --> 00:15:04,290
extra bug in that that passed sure we

328
00:15:00,600 --> 00:15:06,450
are dealing most effectively that pest

329
00:15:04,290 --> 00:15:10,860
okay I think we can talk later about

330
00:15:06,450 --> 00:15:14,340
this I think maybe as a follow-up I

331
00:15:10,860 --> 00:15:16,410
until other people walk up what happens

332
00:15:14,340 --> 00:15:18,420
if you continuously update the software

333
00:15:16,410 --> 00:15:20,579
and you have multiple different versions

334
00:15:18,420 --> 00:15:21,810
of the software to analyze maybe after

335
00:15:20,580 --> 00:15:26,190
patching or something like that

336
00:15:21,810 --> 00:15:28,770
what is this void that guards that you

337
00:15:26,190 --> 00:15:30,300
insert or not could an attacker use this

338
00:15:28,770 --> 00:15:34,380
to analyze where the cards are being

339
00:15:30,300 --> 00:15:36,260
placed in terms of the developer side

340
00:15:34,380 --> 00:15:38,780
right

341
00:15:36,260 --> 00:15:40,760
yes as an attacker could could you

342
00:15:38,780 --> 00:15:44,689
leverage and collect multiple updates

343
00:15:40,760 --> 00:15:46,250
and then do binary diffing okay to see

344
00:15:44,690 --> 00:15:48,310
where the different guards are being

345
00:15:46,250 --> 00:15:51,860
inserted to knock them out or something

346
00:15:48,310 --> 00:15:58,030
interesting question I think even if

347
00:15:51,860 --> 00:16:01,700
there is an update I think we can still

348
00:15:58,030 --> 00:16:03,650
delay the crash discovery because we

349
00:16:01,700 --> 00:16:06,470
will deterministically identified the

350
00:16:03,650 --> 00:16:09,680
refugees past and we will also put

351
00:16:06,470 --> 00:16:14,120
another compound into the similar places

352
00:16:09,680 --> 00:16:19,189
so so my answer is yes we can delay okay

353
00:16:14,120 --> 00:16:22,100
we will take it offline okay my table in

354
00:16:19,190 --> 00:16:24,770
force a quick comment I don't believe

355
00:16:22,100 --> 00:16:28,070
that people would then continue and

356
00:16:24,770 --> 00:16:30,290
tester on software I think they just use

357
00:16:28,070 --> 00:16:33,950
your tool and hope that nobody finds

358
00:16:30,290 --> 00:16:36,770
their bugs but the question is do you

359
00:16:33,950 --> 00:16:39,020
think you can inversely use all your

360
00:16:36,770 --> 00:16:39,530
techniques to remove it again from the

361
00:16:39,020 --> 00:16:42,860
binary

362
00:16:39,530 --> 00:16:45,680
oh sure transfer is yes because I know

363
00:16:42,860 --> 00:16:47,600
about this technique and there should be

364
00:16:45,680 --> 00:16:50,060
always it should be the way to invert

365
00:16:47,600 --> 00:16:52,490
this operation but our point is that we

366
00:16:50,060 --> 00:16:55,130
can significantly delay the time for the

367
00:16:52,490 --> 00:16:57,640
inverse and time for the analysis that's

368
00:16:55,130 --> 00:16:57,640
our point

369
00:16:58,270 --> 00:17:05,559
let's thank the speaker again

370
00:17:01,120 --> 00:17:05,559
[Applause]

