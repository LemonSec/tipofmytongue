1
00:00:10,570 --> 00:00:15,309
thank you this is you from Ching hai

2
00:00:13,270 --> 00:00:17,590
University it is my pleasure to

3
00:00:15,309 --> 00:00:20,410
introduce infants in cember funding

4
00:00:17,590 --> 00:00:24,990
approach with state synchronization

5
00:00:20,410 --> 00:00:29,020
among diverse fathers as we know

6
00:00:24,990 --> 00:00:33,190
fighting is oh sorry I don't know what

7
00:00:29,020 --> 00:00:40,769
happened okay when we for a moment I

8
00:00:33,190 --> 00:00:40,769
think it is automatically okay

9
00:00:44,290 --> 00:00:48,010
funny is one of the most popular

10
00:00:46,090 --> 00:00:50,950
software vulnerabilities detection

11
00:00:48,010 --> 00:00:53,500
techniques they have already found a

12
00:00:50,950 --> 00:00:55,570
large number of dangerous packs and the

13
00:00:53,500 --> 00:00:59,080
security or abilities across a wide

14
00:00:55,570 --> 00:01:02,140
range of systems there are mainly three

15
00:00:59,080 --> 00:01:05,459
types of fathers and each type has his

16
00:01:02,140 --> 00:01:08,590
own body in strategy for example

17
00:01:05,459 --> 00:01:10,929
generation based a father like I father

18
00:01:08,590 --> 00:01:14,500
ended masa they generate imposed by the

19
00:01:10,930 --> 00:01:17,110
specification of input format the

20
00:01:14,500 --> 00:01:18,640
mutation based the father such as AFA

21
00:01:17,110 --> 00:01:21,130
and the deep father they generate

22
00:01:18,640 --> 00:01:24,399
impulse by mutating the eliciting inputs

23
00:01:21,130 --> 00:01:28,240
and the hybrid combining father such as

24
00:01:24,399 --> 00:01:31,149
Twitter and QAM they combine fighting

25
00:01:28,240 --> 00:01:34,210
this conclusion those father's are

26
00:01:31,149 --> 00:01:37,860
usually evaluated with data sets such as

27
00:01:34,210 --> 00:01:40,929
CQC and allow am with injected box

28
00:01:37,860 --> 00:01:44,110
they are usually evaluated with magic

29
00:01:40,930 --> 00:01:47,680
such as pass number branch number in the

30
00:01:44,110 --> 00:01:50,140
unique crashes of back a number based on

31
00:01:47,680 --> 00:01:52,570
these base father's they are different

32
00:01:50,140 --> 00:01:56,530
optimizations in different stages for

33
00:01:52,570 --> 00:01:59,350
example in the seed selection stage AFL

34
00:01:56,530 --> 00:02:01,560
fast and the AFL go they will assign

35
00:01:59,350 --> 00:02:04,030
different priority to different seeds

36
00:02:01,560 --> 00:02:06,820
like based on the frequency of the

37
00:02:04,030 --> 00:02:09,669
Coward pass in the city mutation stage

38
00:02:06,820 --> 00:02:11,459
fell fast they use dedicated mutation

39
00:02:09,669 --> 00:02:15,070
equation to ensure that high quality

40
00:02:11,459 --> 00:02:17,799
seed will not be destroyed and also in

41
00:02:15,070 --> 00:02:19,540
the preparation stage we've usually we

42
00:02:17,799 --> 00:02:22,989
use adjust in Tizer

43
00:02:19,540 --> 00:02:25,950
- haven't you skillet binary or usable

44
00:02:22,989 --> 00:02:28,750
execution to generate high quality seeds

45
00:02:25,950 --> 00:02:31,510
but when they apply those powders on

46
00:02:28,750 --> 00:02:34,030
some real-world applications such as the

47
00:02:31,510 --> 00:02:37,239
best as such and OpenSSL contained in

48
00:02:34,030 --> 00:02:39,190
google faster suit the strategies do not

49
00:02:37,239 --> 00:02:41,230
always perform well and the

50
00:02:39,190 --> 00:02:44,500
effectiveness on different applications

51
00:02:41,230 --> 00:02:47,140
where else accordingly from these four

52
00:02:44,500 --> 00:02:49,390
fingers we can see that we chose AFA as

53
00:02:47,140 --> 00:02:52,059
the baseline and compared other tools

54
00:02:49,390 --> 00:02:53,899
with AFA on past coverage to demonstrate

55
00:02:52,060 --> 00:02:57,049
the issue of the generalization

56
00:02:53,900 --> 00:02:58,670
datian here are the results in front of

57
00:02:57,049 --> 00:03:00,260
the picture we can see that the

58
00:02:58,670 --> 00:03:02,390
performance of these fathers is

59
00:03:00,260 --> 00:03:05,929
challenged by the diversity of real

60
00:03:02,390 --> 00:03:08,958
applications in almost half of the

61
00:03:05,930 --> 00:03:12,650
applications such additional AFL is the

62
00:03:08,959 --> 00:03:15,170
best this programs also exists in the

63
00:03:12,650 --> 00:03:16,909
hybrid father of qim except for the

64
00:03:15,170 --> 00:03:20,238
generation the mutation based the father

65
00:03:16,909 --> 00:03:23,540
and from the picture we can see that if

66
00:03:20,239 --> 00:03:26,720
we do not use symbol description such

67
00:03:23,540 --> 00:03:30,950
additional results are good in maybe

68
00:03:26,720 --> 00:03:33,760
about 10 applications but symbolic

69
00:03:30,950 --> 00:03:37,970
fuchsia only accelerate in 3 or 2

70
00:03:33,760 --> 00:03:40,340
applications in addition we also ran

71
00:03:37,970 --> 00:03:42,290
those fathers in period mode and here

72
00:03:40,340 --> 00:03:45,200
are the results we can see that the

73
00:03:42,290 --> 00:03:47,870
generalization limitation did not only

74
00:03:45,200 --> 00:03:53,108
list in single mode but also in parallel

75
00:03:47,870 --> 00:03:55,639
mode and in power mode we find that the

76
00:03:53,109 --> 00:03:59,510
optimizations are not as good as a

77
00:03:55,639 --> 00:04:02,690
traditional AFL in power mode the

78
00:03:59,510 --> 00:04:07,310
traditional AFL works better in most of

79
00:04:02,690 --> 00:04:09,799
the applications in the parallel mode so

80
00:04:07,310 --> 00:04:15,049
how to improve the generalization

81
00:04:09,799 --> 00:04:16,849
ability in in machine learning domain in

82
00:04:15,049 --> 00:04:20,090
sembilan is good a solution to this

83
00:04:16,849 --> 00:04:23,300
issue what if we did nap in same

84
00:04:20,089 --> 00:04:26,900
baffling approach lastly a motivating

85
00:04:23,300 --> 00:04:29,960
example firstly it takes two strings as

86
00:04:26,900 --> 00:04:32,210
input and the crashes when one of the

87
00:04:29,960 --> 00:04:33,830
two strings is magic string and the

88
00:04:32,210 --> 00:04:35,989
other is magic nun

89
00:04:33,830 --> 00:04:38,780
suppose we have two different fathers

90
00:04:35,990 --> 00:04:42,080
father one good absolving the magic

91
00:04:38,780 --> 00:04:44,719
stream problem so it can cover T 1 2 T 3

92
00:04:42,080 --> 00:04:47,780
Pass father too good at solving the

93
00:04:44,720 --> 00:04:51,409
magic nun program so it can cover T 2 2

94
00:04:47,780 --> 00:04:54,289
T six pass if you use them both and only

95
00:04:51,409 --> 00:04:58,099
in cember the results in the end we can

96
00:04:54,289 --> 00:04:59,990
cover to pass four branches harbor if we

97
00:04:58,099 --> 00:05:02,060
in cember these two fathers with some

98
00:04:59,990 --> 00:05:05,240
synchronization me Canada throughout the

99
00:05:02,060 --> 00:05:07,430
funding process once father one reach T

100
00:05:05,240 --> 00:05:09,860
one branch it synchronizes the

101
00:05:07,430 --> 00:05:12,710
that can currently one to the spider

102
00:05:09,860 --> 00:05:16,190
father to then with a synchronized see

103
00:05:12,710 --> 00:05:18,830
father to can also reach t1 and because

104
00:05:16,190 --> 00:05:22,460
of the ability of Soviet genome program

105
00:05:18,830 --> 00:05:24,560
father to can also reach his full father

106
00:05:22,460 --> 00:05:27,229
meanwhile bees help of input

107
00:05:24,560 --> 00:05:29,990
synchronized by father to for the one

108
00:05:27,229 --> 00:05:32,508
can also reach T to identify a colony

109
00:05:29,990 --> 00:05:35,080
all false paths and the six branches can

110
00:05:32,509 --> 00:05:37,699
be covered through the assemble approach

111
00:05:35,080 --> 00:05:40,039
to achieve an efficient in assemble

112
00:05:37,699 --> 00:05:43,070
father we need to deal with two main

113
00:05:40,039 --> 00:05:45,530
challenges the first is based father

114
00:05:43,070 --> 00:05:47,630
selection in this challenge we should

115
00:05:45,530 --> 00:05:49,849
chose different fathers expert in

116
00:05:47,630 --> 00:05:51,770
different domains and the second

117
00:05:49,850 --> 00:05:54,740
challenge is the insane bacterial design

118
00:05:51,770 --> 00:05:56,510
in the second challenge we should ensure

119
00:05:54,740 --> 00:05:59,260
that interesting seeds can be

120
00:05:56,510 --> 00:06:01,789
synchronized to obeys father's family

121
00:05:59,260 --> 00:06:04,880
here is overview of our insane black

122
00:06:01,789 --> 00:06:07,310
textured design first when a target

123
00:06:04,880 --> 00:06:09,919
application is prepared for padding we

124
00:06:07,310 --> 00:06:11,690
first chose several base fathers the

125
00:06:09,919 --> 00:06:13,580
existing structures of any

126
00:06:11,690 --> 00:06:15,979
single father are usually designed with

127
00:06:13,580 --> 00:06:18,469
some preference as is Parliament before

128
00:06:15,979 --> 00:06:20,539
shows in real practice these preferences

129
00:06:18,470 --> 00:06:22,820
vary greatly across different

130
00:06:20,539 --> 00:06:25,760
applications they can be helpful in some

131
00:06:22,820 --> 00:06:27,979
applications but not effective in other

132
00:06:25,760 --> 00:06:30,530
applications the four chosen based

133
00:06:27,979 --> 00:06:33,199
fathers with more diversity leads to

134
00:06:30,530 --> 00:06:35,059
better in Semba performance after the

135
00:06:33,199 --> 00:06:37,220
base father's selection we integrated

136
00:06:35,060 --> 00:06:39,590
father's with globally are synchronized

137
00:06:37,220 --> 00:06:42,020
and locally synchronized based still

138
00:06:39,590 --> 00:06:44,330
synchronization mechanism the key idea

139
00:06:42,020 --> 00:06:46,698
is to monitor the filing status of each

140
00:06:44,330 --> 00:06:49,000
base father and share interesting scenes

141
00:06:46,699 --> 00:06:51,440
among them finally we can collect

142
00:06:49,000 --> 00:06:53,300
crushing the couch information and fill

143
00:06:51,440 --> 00:06:56,810
this information into the final Fabian

144
00:06:53,300 --> 00:06:58,699
report for the base father selection we

145
00:06:56,810 --> 00:07:00,530
cross the diversity of base method

146
00:06:58,699 --> 00:07:03,070
according to three heuristics

147
00:07:00,530 --> 00:07:06,198
the first is City mutation and selection

148
00:07:03,070 --> 00:07:09,020
strategy based hero stick for example a

149
00:07:06,199 --> 00:07:11,360
FL fastest Alexis that excites low

150
00:07:09,020 --> 00:07:14,090
frequency pass and mutate the modems

151
00:07:11,360 --> 00:07:16,039
fail fast strives to ensure that the

152
00:07:14,090 --> 00:07:18,400
mutant sees heat and the right branch

153
00:07:16,039 --> 00:07:20,440
the second is the coverage information

154
00:07:18,400 --> 00:07:22,239
granularity based the hero stay

155
00:07:20,440 --> 00:07:24,160
for example if father guys see the

156
00:07:22,240 --> 00:07:27,910
mutation by checking blood coverage

157
00:07:24,160 --> 00:07:30,340
while AFL Chuck's care coverage so sorry

158
00:07:27,910 --> 00:07:32,650
the input generation strategy paste the

159
00:07:30,340 --> 00:07:34,599
hero stick for example red Meza and

160
00:07:32,650 --> 00:07:36,429
peach use formal specification and

161
00:07:34,600 --> 00:07:39,070
others may lend the format during

162
00:07:36,430 --> 00:07:41,410
funding to generate the disease based on

163
00:07:39,070 --> 00:07:43,659
these three hero sticks we can select

164
00:07:41,410 --> 00:07:45,610
the different based father's we can

165
00:07:43,660 --> 00:07:48,940
chose the father's as diverse as

166
00:07:45,610 --> 00:07:50,980
possible the second step is since

167
00:07:48,940 --> 00:07:52,840
tokenization mechanism the main idea is

168
00:07:50,980 --> 00:07:56,140
to identify the interest in seeds of

169
00:07:52,840 --> 00:07:58,000
each base father in shadows interesting

170
00:07:56,140 --> 00:08:01,360
scene synchronously among all fighting

171
00:07:58,000 --> 00:08:03,820
processes it employs a global local

172
00:08:01,360 --> 00:08:06,010
narrative structure the local seed queue

173
00:08:03,820 --> 00:08:07,630
is maintained by each base father while

174
00:08:06,010 --> 00:08:09,370
the global pool is maintained by the

175
00:08:07,630 --> 00:08:12,159
monitor for sharing interesting seeds

176
00:08:09,370 --> 00:08:13,630
among all base fathers in the instant

177
00:08:12,160 --> 00:08:15,130
pervading the union of this base

178
00:08:13,630 --> 00:08:17,260
father's result he needed to identify

179
00:08:15,130 --> 00:08:20,080
interesting seeds during the whole

180
00:08:17,260 --> 00:08:22,210
funding process accordingly the global

181
00:08:20,080 --> 00:08:24,039
coverage map is designed in any new

182
00:08:22,210 --> 00:08:25,810
paths or new branches covered by the

183
00:08:24,040 --> 00:08:28,150
interesting seeds will be added into

184
00:08:25,810 --> 00:08:29,770
this global map this government can not

185
00:08:28,150 --> 00:08:31,810
only help decide which they should be

186
00:08:29,770 --> 00:08:35,049
synchronised but also healthy tip user

187
00:08:31,810 --> 00:08:36,700
and the children results in this step we

188
00:08:35,049 --> 00:08:38,978
will collect the interest in seeds of

189
00:08:36,700 --> 00:08:41,289
each base father and then so in the

190
00:08:38,979 --> 00:08:45,760
global map and then dispatch these seeds

191
00:08:41,289 --> 00:08:48,040
to each basic father for the

192
00:08:45,760 --> 00:08:50,380
implementation we first chose six

193
00:08:48,040 --> 00:08:51,670
popular fathers as space fathers based

194
00:08:50,380 --> 00:08:54,790
on three hero sticks

195
00:08:51,670 --> 00:08:56,430
we chose a FL a FL faster fell fast and

196
00:08:54,790 --> 00:08:59,560
deep Roger there are mutations based

197
00:08:56,430 --> 00:09:01,390
fathers and we also chose red Meza their

198
00:08:59,560 --> 00:09:05,709
generation based the father and also

199
00:09:01,390 --> 00:09:07,540
accusing it is the hybrid father during

200
00:09:05,710 --> 00:09:10,470
the implementation we need to adjust the

201
00:09:07,540 --> 00:09:12,719
following four main engineer programs

202
00:09:10,470 --> 00:09:15,550
the first is a standard interface

203
00:09:12,720 --> 00:09:18,190
encapsulating because different father's

204
00:09:15,550 --> 00:09:20,770
they use different standard driver

205
00:09:18,190 --> 00:09:23,800
interface driver we need to use a

206
00:09:20,770 --> 00:09:25,930
standard one the second challenge is the

207
00:09:23,800 --> 00:09:28,990
Lib father continuously father

208
00:09:25,930 --> 00:09:31,150
Picasa father they will stop with a

209
00:09:28,990 --> 00:09:32,610
crash font and also the krusty

210
00:09:31,150 --> 00:09:34,890
duplicating and

211
00:09:32,610 --> 00:09:36,360
charging technique also thus in

212
00:09:34,890 --> 00:09:40,019
synchronization the result in the

213
00:09:36,360 --> 00:09:43,140
grading method is implemented we

214
00:09:40,019 --> 00:09:47,279
implement four types of in Samba fading

215
00:09:43,140 --> 00:09:50,970
based on different basic fathers in fact

216
00:09:47,279 --> 00:09:54,630
a it is based on mutation based fighting

217
00:09:50,970 --> 00:09:58,110
owning a FL FL fast and FL fats in fast

218
00:09:54,630 --> 00:10:01,800
q is based on FL FL fast fail fast and

219
00:09:58,110 --> 00:10:03,930
accusing in fast air is based on a FL FL

220
00:10:01,800 --> 00:10:06,689
fast fail fast and the father and in

221
00:10:03,930 --> 00:10:09,630
fast is based on the three mutation

222
00:10:06,690 --> 00:10:12,300
based fat and red masa when you relate

223
00:10:09,630 --> 00:10:14,839
on to data set the first in the lava em

224
00:10:12,300 --> 00:10:19,079
and the second is Google fast astute

225
00:10:14,839 --> 00:10:21,089
each toy is wrong was wrong SN had an

226
00:10:19,079 --> 00:10:22,250
boundaries with forefather instances for

227
00:10:21,089 --> 00:10:26,760
24 hours

228
00:10:22,250 --> 00:10:30,029
first let's see the results on lava M

229
00:10:26,760 --> 00:10:32,910
which I think it is a small size of

230
00:10:30,029 --> 00:10:38,240
benchmarks because the code size is

231
00:10:32,910 --> 00:10:42,000
between 2,000 to 5,000 lines of codes

232
00:10:38,240 --> 00:10:44,850
from this result we can find that symbol

233
00:10:42,000 --> 00:10:49,079
execution based method outperforms

234
00:10:44,850 --> 00:10:51,810
mutation based of father's the result is

235
00:10:49,079 --> 00:10:54,510
amazing I think because symbol execution

236
00:10:51,810 --> 00:10:57,209
is good at solving complex branches and

237
00:10:54,510 --> 00:11:00,480
the final significantly more bugs but

238
00:10:57,209 --> 00:11:04,469
when they integrate and in symbolic

239
00:11:00,480 --> 00:11:07,440
ution into the original mutation based

240
00:11:04,470 --> 00:11:10,170
father's the synchronization mechanism

241
00:11:07,440 --> 00:11:14,640
performs what we are and we outperforms

242
00:11:10,170 --> 00:11:18,120
cusing for the results on the Google

243
00:11:14,640 --> 00:11:20,579
fastest suit we can find that in fast

244
00:11:18,120 --> 00:11:23,640
outperforms or other father's on each

245
00:11:20,579 --> 00:11:25,050
project the first things clones of this

246
00:11:23,640 --> 00:11:26,880
table reveal the issue of the

247
00:11:25,050 --> 00:11:29,459
performance variation in those base

248
00:11:26,880 --> 00:11:32,010
father's as they perform various Leon

249
00:11:29,459 --> 00:11:35,729
different applications but compared with

250
00:11:32,010 --> 00:11:37,560
AFL limb father performs better on 15

251
00:11:35,730 --> 00:11:40,440
applications but worse online

252
00:11:37,560 --> 00:11:42,540
applications rather performs better on

253
00:11:40,440 --> 00:11:45,899
eight applications but also worse on

254
00:11:42,540 --> 00:11:46,740
sixth team applications using performs

255
00:11:45,899 --> 00:11:50,880
better

256
00:11:46,740 --> 00:11:54,650
only nines but worse on 15 applications

257
00:11:50,880 --> 00:11:57,810
for the universe it is the best on both

258
00:11:54,650 --> 00:12:00,810
pass coverage and also the back

259
00:11:57,810 --> 00:12:05,699
detection number from this table we can

260
00:12:00,810 --> 00:12:11,219
find that infants can discover 16 unique

261
00:12:05,700 --> 00:12:13,770
bugs not unique rush because we also did

262
00:12:11,220 --> 00:12:16,770
you create the unique crash four unique

263
00:12:13,770 --> 00:12:19,680
bug and also manually confirmed and

264
00:12:16,770 --> 00:12:22,319
identify each unique back from the

265
00:12:19,680 --> 00:12:26,370
result we can find that in fast it

266
00:12:22,320 --> 00:12:29,160
detects the most number of bugs and also

267
00:12:26,370 --> 00:12:33,300
from this table we can find that on

268
00:12:29,160 --> 00:12:36,000
different data sets different fathers

269
00:12:33,300 --> 00:12:39,300
they perform differently on the lava em

270
00:12:36,000 --> 00:12:43,380
dataset using is the best in the find

271
00:12:39,300 --> 00:12:45,990
lots of bugs and laws of paths but on

272
00:12:43,380 --> 00:12:48,630
the father testitude of google we found

273
00:12:45,990 --> 00:12:52,380
their traditional airfare funds Warbucks

274
00:12:48,630 --> 00:12:54,660
thank using and also the lib father also

275
00:12:52,380 --> 00:12:57,780
found more bugs than using without

276
00:12:54,660 --> 00:13:01,860
symbolic yueshen the performance is even

277
00:12:57,780 --> 00:13:03,689
better we also chose a FL as the

278
00:13:01,860 --> 00:13:06,030
baseline the Kemper in December Francis

279
00:13:03,690 --> 00:13:07,830
with FL on past coverage to the most

280
00:13:06,030 --> 00:13:10,079
rated performance of in December fading

281
00:13:07,830 --> 00:13:13,170
as mentioned before we implement four

282
00:13:10,080 --> 00:13:16,230
types and we want to the most shape what

283
00:13:13,170 --> 00:13:19,500
will happen of these four types we can

284
00:13:16,230 --> 00:13:22,320
find that more diversity of those space

285
00:13:19,500 --> 00:13:25,740
fathers in fast configuration we are

286
00:13:22,320 --> 00:13:28,860
performs better as we can see from the

287
00:13:25,740 --> 00:13:32,130
picture that insane / Q performs better

288
00:13:28,860 --> 00:13:34,920
than assemble a in semble air performs

289
00:13:32,130 --> 00:13:37,740
better than in fossa instant break you

290
00:13:34,920 --> 00:13:41,910
well in fact always perform the best in

291
00:13:37,740 --> 00:13:45,960
fast perform the best because they which

292
00:13:41,910 --> 00:13:49,949
shows the different fathers they belong

293
00:13:45,960 --> 00:13:54,600
to three different types not two types

294
00:13:49,950 --> 00:13:57,390
or 1 types so the result is better from

295
00:13:54,600 --> 00:14:00,420
this picture we can see the overview of

296
00:13:57,390 --> 00:14:03,839
the insane pervading the performance

297
00:14:00,420 --> 00:14:05,699
x-m XML is a widely used XML library

298
00:14:03,839 --> 00:14:08,279
read XML data and stream from the

299
00:14:05,700 --> 00:14:10,740
application we can see the number of

300
00:14:08,279 --> 00:14:14,640
paths branch and unique crash and the

301
00:14:10,740 --> 00:14:18,390
eunich bug from this picture and the

302
00:14:14,640 --> 00:14:20,209
statics we can also find that may be

303
00:14:18,390 --> 00:14:22,980
unique a crash is not a good

304
00:14:20,209 --> 00:14:26,010
identification of Fadden because from

305
00:14:22,980 --> 00:14:30,630
the picture on the number we can see

306
00:14:26,010 --> 00:14:34,500
that 17 7 unique crash only refers to

307
00:14:30,630 --> 00:14:38,370
one unique bug and the second infants

308
00:14:34,500 --> 00:14:41,250
it has 919 unique crash it only has a

309
00:14:38,370 --> 00:14:42,990
four unique back maybe I think you need

310
00:14:41,250 --> 00:14:47,180
a bagger maybe better than the unique

311
00:14:42,990 --> 00:14:50,130
crash if we apply in fact two more

312
00:14:47,180 --> 00:14:53,219
real-world applications we can find that

313
00:14:50,130 --> 00:14:57,240
more real wood more real bugs has been

314
00:14:53,220 --> 00:15:00,060
detected we apply in fast too fast some

315
00:14:57,240 --> 00:15:02,339
more real fast projects such as image

316
00:15:00,060 --> 00:15:05,579
processing library Olympian G and the

317
00:15:02,339 --> 00:15:06,600
leap jpg the video processing library

318
00:15:05,579 --> 00:15:09,750
lip-dub

319
00:15:06,600 --> 00:15:13,980
AV those projects are where fast of

320
00:15:09,750 --> 00:15:17,070
existing works such by FL by FL faster

321
00:15:13,980 --> 00:15:19,620
by Africa but they are all there are

322
00:15:17,070 --> 00:15:22,050
lots of vulnerabilities or bug that has

323
00:15:19,620 --> 00:15:26,010
not been detected before but within fast

324
00:15:22,050 --> 00:15:28,349
we can get those parks covered and six

325
00:15:26,010 --> 00:15:30,769
more unknown bugs including 44

326
00:15:28,350 --> 00:15:33,720
successful registers CVE

327
00:15:30,769 --> 00:15:36,149
for conclusion I think the

328
00:15:33,720 --> 00:15:38,190
generalization limitation certain exist

329
00:15:36,149 --> 00:15:43,019
in existing father's and the visiting

330
00:15:38,190 --> 00:15:45,630
apply optimizations maybe instead of

331
00:15:43,019 --> 00:15:48,420
adding is a good solution we should try

332
00:15:45,630 --> 00:15:51,870
to integrate different optimizations

333
00:15:48,420 --> 00:15:55,199
together to achieve a better performance

334
00:15:51,870 --> 00:15:57,990
and the results also showed that in

335
00:15:55,199 --> 00:16:02,779
fascist who are effective but also some

336
00:15:57,990 --> 00:16:06,510
problems for example when they integrate

337
00:16:02,779 --> 00:16:09,829
AFL fast and fail fast together we found

338
00:16:06,510 --> 00:16:13,560
that if we integrate and together their

339
00:16:09,829 --> 00:16:14,489
performance will decrease because

340
00:16:13,560 --> 00:16:18,359
optimized

341
00:16:14,490 --> 00:16:22,260
Asians of them conflict and we need to

342
00:16:18,360 --> 00:16:26,850
adjust those conflicts during our

343
00:16:22,260 --> 00:16:29,730
assembly optimization for we also

344
00:16:26,850 --> 00:16:32,100
provide a website version for a free

345
00:16:29,730 --> 00:16:34,560
trial of inves and everyone can use the

346
00:16:32,100 --> 00:16:37,880
server for free fighting and testing

347
00:16:34,560 --> 00:16:37,880
yeah thank you

348
00:16:38,190 --> 00:16:43,579
[Applause]

349
00:16:43,820 --> 00:16:48,480
this is Muhammad from UC Irvine thanks

350
00:16:46,830 --> 00:16:49,850
for the great project I have a question

351
00:16:48,480 --> 00:16:55,860
about the slide

352
00:16:49,850 --> 00:16:59,700
22:22 yeah about the evaluations yeah it

353
00:16:55,860 --> 00:17:03,000
shows that for example find 60 bucks in

354
00:16:59,700 --> 00:17:06,660
total but alphas runs a couple of these

355
00:17:03,000 --> 00:17:10,819
fathers together yes and do we know that

356
00:17:06,660 --> 00:17:14,880
if we want the father's that infers run

357
00:17:10,819 --> 00:17:19,260
independently how many unique bugs they

358
00:17:14,880 --> 00:17:23,569
can find in total because for example

359
00:17:19,260 --> 00:17:27,119
AFL 133rd 34 bucks yeah and other one

360
00:17:23,569 --> 00:17:30,928
funds 33 yeah they make they might not

361
00:17:27,119 --> 00:17:32,399
overlap completely okay this is a worry

362
00:17:30,929 --> 00:17:36,750
what very good question

363
00:17:32,400 --> 00:17:41,090
yeah because I think this is a Mystics

364
00:17:36,750 --> 00:17:46,110
Parliament in the paper maybe we need to

365
00:17:41,090 --> 00:17:49,490
manually identify the box which is

366
00:17:46,110 --> 00:17:53,729
overlap which is not overlap we

367
00:17:49,490 --> 00:17:59,990
supplemented as supplemental fire in the

368
00:17:53,730 --> 00:18:04,200
github you can find that in the 16 buck

369
00:17:59,990 --> 00:18:10,070
26 that are not covered by those degrees

370
00:18:04,200 --> 00:18:10,070
team fathers yeah thanks

371
00:18:12,510 --> 00:18:17,710
that furry of my uc-irvine

372
00:18:14,710 --> 00:18:19,720
really nice talk um I was wondering do

373
00:18:17,710 --> 00:18:22,780
you have a plan to bring this kernel

374
00:18:19,720 --> 00:18:27,910
fuzzy and if you have a plan what will

375
00:18:22,780 --> 00:18:32,520
be the heuristic yeah I think to kernel

376
00:18:27,910 --> 00:18:41,140
fuss I think it is hard work I think

377
00:18:32,520 --> 00:18:42,970
because the matrix used in kernel in the

378
00:18:41,140 --> 00:18:47,440
application I think it is different and

379
00:18:42,970 --> 00:18:50,200
we cannot easily customize our selection

380
00:18:47,440 --> 00:18:54,580
here we all stick to kernof as I think

381
00:18:50,200 --> 00:18:56,360
yeah thanks let's thank the speaker

382
00:18:54,580 --> 00:19:01,189
again

383
00:18:56,360 --> 00:19:01,189
[Applause]

