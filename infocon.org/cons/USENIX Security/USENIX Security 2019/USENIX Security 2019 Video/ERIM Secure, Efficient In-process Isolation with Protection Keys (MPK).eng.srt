1
00:00:10,810 --> 00:00:15,280
thank you hello everyone as you said I'm

2
00:00:13,389 --> 00:00:16,450
Manu and this is joint work with my

3
00:00:15,280 --> 00:00:18,520
colleagues from the Max pregnancy for

4
00:00:16,450 --> 00:00:20,230
software systems and in this work we

5
00:00:18,520 --> 00:00:21,910
demonstrated how to securely and

6
00:00:20,230 --> 00:00:24,460
efficiently isolate sensitive data

7
00:00:21,910 --> 00:00:26,170
within the same process using memory

8
00:00:24,460 --> 00:00:28,779
protection keys memory protection keys

9
00:00:26,170 --> 00:00:30,640
is a recent Hardware feature in x86 as

10
00:00:28,779 --> 00:00:32,619
well as power architecture that allows

11
00:00:30,640 --> 00:00:36,460
an application to selectively control

12
00:00:32,619 --> 00:00:38,800
access to a subset of pages but before I

13
00:00:36,460 --> 00:00:40,809
talk about isolation let's first look at

14
00:00:38,800 --> 00:00:42,220
the drawbacks of an application without

15
00:00:40,809 --> 00:00:44,860
any in process isolation

16
00:00:42,220 --> 00:00:46,829
so when sensitive data is not isolated

17
00:00:44,860 --> 00:00:49,420
it is vulnerable to being leaked and

18
00:00:46,829 --> 00:00:51,700
corrupted by bugs and security and

19
00:00:49,420 --> 00:00:53,680
malicious attacks for instance a

20
00:00:51,700 --> 00:00:56,079
malicious attack could exploit a

21
00:00:53,680 --> 00:00:59,620
security vulnerability and simply leak

22
00:00:56,079 --> 00:01:01,360
the key or your sensitive data in the

23
00:00:59,620 --> 00:01:03,399
past we have seen widespread attacks

24
00:01:01,360 --> 00:01:04,929
against sensitive data like the

25
00:01:03,399 --> 00:01:06,820
heartbleed bug which basically leaked

26
00:01:04,930 --> 00:01:09,340
private web server keys all over the

27
00:01:06,820 --> 00:01:11,110
internet more generally though we see

28
00:01:09,340 --> 00:01:13,780
that memory safety issues account for a

29
00:01:11,110 --> 00:01:15,700
large number of reported software bugs

30
00:01:13,780 --> 00:01:20,110
and this was recently reported by

31
00:01:15,700 --> 00:01:22,510
Microsoft well we all also know that

32
00:01:20,110 --> 00:01:23,830
protecting sensitive data using

33
00:01:22,510 --> 00:01:26,049
isolation is a very good idea

34
00:01:23,830 --> 00:01:27,939
in that case bugs and security

35
00:01:26,049 --> 00:01:31,119
vulnerabilities are unable to leak and

36
00:01:27,939 --> 00:01:33,130
corrupt data for instance we can isolate

37
00:01:31,119 --> 00:01:35,200
the cryptographic keys from the

38
00:01:33,130 --> 00:01:37,750
untrusted application and permit access

39
00:01:35,200 --> 00:01:38,950
only by a very narrow interface for

40
00:01:37,750 --> 00:01:41,650
example the decrypt and encrypt

41
00:01:38,950 --> 00:01:43,360
functions an attacker inside the

42
00:01:41,650 --> 00:01:47,130
untrusted application can no longer

43
00:01:43,360 --> 00:01:49,600
directly access the key and leak it a

44
00:01:47,130 --> 00:01:51,850
memory safe language and its runtime

45
00:01:49,600 --> 00:01:54,039
provide memory safety but when they

46
00:01:51,850 --> 00:01:56,500
start using a native library written in

47
00:01:54,040 --> 00:01:59,710
an unsafe language the runtime becomes

48
00:01:56,500 --> 00:02:01,390
vulnerable again to avoid a bug in the

49
00:01:59,710 --> 00:02:03,759
native library from violating the

50
00:02:01,390 --> 00:02:05,680
managed runtime security guarantees it

51
00:02:03,759 --> 00:02:08,350
has to isolate itself from the native

52
00:02:05,680 --> 00:02:11,920
library unfortunately today's

53
00:02:08,350 --> 00:02:13,450
applications make only limited use of

54
00:02:11,920 --> 00:02:16,660
the isolation techniques that we have

55
00:02:13,450 --> 00:02:19,720
due to the lack of efficient and robust

56
00:02:16,660 --> 00:02:21,190
memory isolation techniques I'll quickly

57
00:02:19,720 --> 00:02:24,700
clarify the threat model that we

58
00:02:21,190 --> 00:02:26,109
considered so we consider the CPU the OS

59
00:02:24,700 --> 00:02:29,109
and our isolation technique to be

60
00:02:26,110 --> 00:02:31,510
trusted we don't trust the nd

61
00:02:29,110 --> 00:02:33,940
application but a small trusted

62
00:02:31,510 --> 00:02:35,950
compartment in particular we allow

63
00:02:33,940 --> 00:02:37,569
malicious attacks to exploit memory

64
00:02:35,950 --> 00:02:40,869
corruption and control flow hijack

65
00:02:37,569 --> 00:02:42,790
attacks on the other hand we do not

66
00:02:40,870 --> 00:02:47,290
consider side-channel ro hammer and

67
00:02:42,790 --> 00:02:48,750
micro architectural attacks based on

68
00:02:47,290 --> 00:02:51,670
this threat model I will quickly go over

69
00:02:48,750 --> 00:02:53,920
the drawbacks of existing isolation

70
00:02:51,670 --> 00:02:55,510
techniques in case your isolation

71
00:02:53,920 --> 00:02:58,268
technique relies on hardware provided

72
00:02:55,510 --> 00:03:00,130
isolation such as a page table you

73
00:02:58,269 --> 00:03:02,049
typically find high switch costs between

74
00:03:00,130 --> 00:03:04,480
the untrusted application and the

75
00:03:02,049 --> 00:03:06,130
sensitive data in contrast to these

76
00:03:04,480 --> 00:03:07,810
techniques our language and runtime

77
00:03:06,130 --> 00:03:09,670
based techniques which in current laws

78
00:03:07,810 --> 00:03:10,959
which cost and they isolate by

79
00:03:09,670 --> 00:03:13,030
instrument entering the untrusted

80
00:03:10,959 --> 00:03:15,790
application with bounced checks on every

81
00:03:13,030 --> 00:03:17,530
in direct memory access such techniques

82
00:03:15,790 --> 00:03:19,750
have to be combined with a control for

83
00:03:17,530 --> 00:03:21,880
integrity technique to cop to prevent a

84
00:03:19,750 --> 00:03:24,370
malicious attack from circumventing the

85
00:03:21,880 --> 00:03:26,319
instrumentation that we just added as a

86
00:03:24,370 --> 00:03:29,760
result they suffer from high execution

87
00:03:26,319 --> 00:03:33,130
overheads to perform these safety checks

88
00:03:29,760 --> 00:03:36,100
our goal with Aaron is to avoid both the

89
00:03:33,130 --> 00:03:38,049
costly contact switches and the high

90
00:03:36,100 --> 00:03:40,299
overhead for the execution and

91
00:03:38,049 --> 00:03:42,430
performing the safety checks we achieve

92
00:03:40,299 --> 00:03:44,739
this by relying on memory protection

93
00:03:42,430 --> 00:03:47,109
keys and strengthening its threat model

94
00:03:44,739 --> 00:03:49,120
so before I provide you the overview of

95
00:03:47,109 --> 00:03:51,459
how Aaron works I'll quickly introduce

96
00:03:49,120 --> 00:03:54,160
memory protection keys as said it's a

97
00:03:51,459 --> 00:03:56,500
new ISO extension for x86 and power and

98
00:03:54,160 --> 00:03:59,709
has become available in skylake service

99
00:03:56,500 --> 00:04:01,750
EP use it allows to tag a memory page in

100
00:03:59,709 --> 00:04:04,180
the page table entry with a protection

101
00:04:01,750 --> 00:04:07,480
key all pages start with the protection

102
00:04:04,180 --> 00:04:09,160
key 0 and using a new system call an

103
00:04:07,480 --> 00:04:12,429
application can update the protection

104
00:04:09,160 --> 00:04:16,810
key of a page and assign it to one of 16

105
00:04:12,430 --> 00:04:18,668
protection keys access to memory pages

106
00:04:16,810 --> 00:04:20,649
of a particular protection key is

107
00:04:18,668 --> 00:04:23,469
controlled via a new processor register

108
00:04:20,649 --> 00:04:25,239
called key k ru this permission register

109
00:04:23,470 --> 00:04:27,400
holds a read and write bit for every

110
00:04:25,240 --> 00:04:29,440
protection key and application starts

111
00:04:27,400 --> 00:04:34,659
only protection key zero is accessible

112
00:04:29,440 --> 00:04:36,490
to enable or disable access to data in a

113
00:04:34,659 --> 00:04:38,440
particular protection key a new user

114
00:04:36,490 --> 00:04:41,080
space instruction called write PKU

115
00:04:38,440 --> 00:04:42,910
updates this permission register this

116
00:04:41,080 --> 00:04:45,430
userspace instruction is what makes Arum

117
00:04:42,910 --> 00:04:47,470
very fast in our experiments we observed

118
00:04:45,430 --> 00:04:49,600
a single switch to take between eleven

119
00:04:47,470 --> 00:04:52,570
and two hundred sixty cycles depending

120
00:04:49,600 --> 00:04:55,840
on the pipeline state of the CPU the

121
00:04:52,570 --> 00:04:58,450
fastest page table switch based on VM

122
00:04:55,840 --> 00:05:01,599
func takes at least 330 cycles in our

123
00:04:58,450 --> 00:05:03,400
experiments and after we updated the

124
00:05:01,600 --> 00:05:06,040
permission register data of a page

125
00:05:03,400 --> 00:05:07,599
simply becomes available so using memory

126
00:05:06,040 --> 00:05:09,910
protection keys an application can

127
00:05:07,600 --> 00:05:12,250
divide as outer space and up to 60

128
00:05:09,910 --> 00:05:16,020
memory domains and selectively grant

129
00:05:12,250 --> 00:05:19,120
access with relatively little overhead

130
00:05:16,020 --> 00:05:20,859
unfortunately this fast user spec user

131
00:05:19,120 --> 00:05:22,180
space switching makes me a memory

132
00:05:20,860 --> 00:05:24,880
protection key is vulnerable to

133
00:05:22,180 --> 00:05:26,500
malicious attacks a malicious attack can

134
00:05:24,880 --> 00:05:30,670
simply create its own permission

135
00:05:26,500 --> 00:05:31,900
register and update sorry it can create

136
00:05:30,670 --> 00:05:34,290
its own permission register update

137
00:05:31,900 --> 00:05:37,570
instruction to grant access to all

138
00:05:34,290 --> 00:05:39,730
protection keys hence by itself memory

139
00:05:37,570 --> 00:05:42,669
protection keys cannot prevent malicious

140
00:05:39,730 --> 00:05:43,990
attacks so here is the overview of Ihram

141
00:05:42,669 --> 00:05:46,630
and how we prevent this privilege

142
00:05:43,990 --> 00:05:49,090
escalation we isolate the sensitive data

143
00:05:46,630 --> 00:05:51,370
in a trusted compartment in pages marked

144
00:05:49,090 --> 00:05:53,200
with protection key one and then we

145
00:05:51,370 --> 00:05:55,120
prevent malicious attacks from gaining

146
00:05:53,200 --> 00:05:58,419
access to this protection key one in a

147
00:05:55,120 --> 00:05:59,890
two-step approach we first define a safe

148
00:05:58,419 --> 00:06:02,140
way to switch between the untrusted

149
00:05:59,890 --> 00:06:05,919
application and the trusted compartments

150
00:06:02,140 --> 00:06:07,990
using Colgate's and second we prevent an

151
00:06:05,919 --> 00:06:09,760
attacker from executing instructions

152
00:06:07,990 --> 00:06:11,850
that would violate our isolation

153
00:06:09,760 --> 00:06:14,080
guarantees for the trusted compartment

154
00:06:11,850 --> 00:06:16,270
Aaron prevents this by vetting all

155
00:06:14,080 --> 00:06:19,270
executable memory before enabling the

156
00:06:16,270 --> 00:06:21,640
execute permission in case Aaron finds a

157
00:06:19,270 --> 00:06:25,990
violating instruction it would simply

158
00:06:21,640 --> 00:06:28,060
hold the execution at this point the

159
00:06:25,990 --> 00:06:30,130
attacker is unable to circumvent Aaron's

160
00:06:28,060 --> 00:06:32,320
isolation guarantees in the process

161
00:06:30,130 --> 00:06:34,810
though Aaron may stop the execution of

162
00:06:32,320 --> 00:06:36,400
some applications these applications are

163
00:06:34,810 --> 00:06:39,730
not in line with our EM safety checks

164
00:06:36,400 --> 00:06:41,650
and this is the result of including

165
00:06:39,730 --> 00:06:45,220
inadvertent instructions and that

166
00:06:41,650 --> 00:06:47,109
updates permission register to enable

167
00:06:45,220 --> 00:06:49,300
the execution of such applications again

168
00:06:47,110 --> 00:06:51,260
we are device we have devised rewrite

169
00:06:49,300 --> 00:06:52,790
strategies to eliminate

170
00:06:51,260 --> 00:06:54,800
this permission register update

171
00:06:52,790 --> 00:06:57,740
instructions while maintaining the

172
00:06:54,800 --> 00:06:59,930
semantics of the binary code rewriting

173
00:06:57,740 --> 00:07:01,220
approach has already enjoyed a lot of

174
00:06:59,930 --> 00:07:05,450
independent interest and has already

175
00:07:01,220 --> 00:07:07,400
been adopted in several work lastly we

176
00:07:05,450 --> 00:07:09,260
take this isolation technique and apply

177
00:07:07,400 --> 00:07:11,179
it to frequently switching use cases on

178
00:07:09,260 --> 00:07:14,510
observe a substantially lower overhead

179
00:07:11,180 --> 00:07:15,950
compared to prior art so before I tell

180
00:07:14,510 --> 00:07:17,450
you how we prevent the malicious attacks

181
00:07:15,950 --> 00:07:19,099
I will quickly introduce the to

182
00:07:17,450 --> 00:07:21,680
corporate instructions the first one is

183
00:07:19,100 --> 00:07:23,390
right PKU it simply takes the EAX

184
00:07:21,680 --> 00:07:25,700
register and writes it into the PKI you

185
00:07:23,390 --> 00:07:27,530
register the second one is X our store

186
00:07:25,700 --> 00:07:29,990
which loads the register from a given

187
00:07:27,530 --> 00:07:31,820
memory address our goal is to prevent an

188
00:07:29,990 --> 00:07:35,360
attacker from making an unsafe use of

189
00:07:31,820 --> 00:07:37,640
each of these instructions so at first

190
00:07:35,360 --> 00:07:40,760
really find a safe way to use them using

191
00:07:37,640 --> 00:07:43,210
Colgate's and we switch between the

192
00:07:40,760 --> 00:07:46,310
trusted and untrusted cim compartment

193
00:07:43,210 --> 00:07:48,770
using these call gates this technique is

194
00:07:46,310 --> 00:07:51,140
what makes Arum very efficient when we

195
00:07:48,770 --> 00:07:53,180
switch from the untrusted complication

196
00:07:51,140 --> 00:07:55,070
to the trusted compartment we increase

197
00:07:53,180 --> 00:07:56,800
the permission register to grant access

198
00:07:55,070 --> 00:07:59,000
to the trusted compartment and

199
00:07:56,800 --> 00:08:01,190
immediately call a designated entry

200
00:07:59,000 --> 00:08:03,620
point in the trusted compartment using a

201
00:08:01,190 --> 00:08:05,930
direct jump afterwards the trusted

202
00:08:03,620 --> 00:08:07,520
compartment will guarantee to reduce the

203
00:08:05,930 --> 00:08:09,110
permission register before handing back

204
00:08:07,520 --> 00:08:12,440
the execution to the untrusted

205
00:08:09,110 --> 00:08:13,910
application when we are switching back

206
00:08:12,440 --> 00:08:15,710
to the untrusted application the

207
00:08:13,910 --> 00:08:17,690
permission register has to be updated to

208
00:08:15,710 --> 00:08:20,810
exclude the trunk trusted compartment

209
00:08:17,690 --> 00:08:23,270
but without any further protection and

210
00:08:20,810 --> 00:08:25,310
that particular write PKU is vulnerable

211
00:08:23,270 --> 00:08:28,370
to an attack where the malicious

212
00:08:25,310 --> 00:08:30,710
attacker creates updates the EAX

213
00:08:28,370 --> 00:08:33,289
register to include the trusted

214
00:08:30,710 --> 00:08:35,929
compartment in the permission bits and

215
00:08:33,289 --> 00:08:39,140
then a new control flow hijack directly

216
00:08:35,929 --> 00:08:41,510
jumps to the right PKU to update the

217
00:08:39,140 --> 00:08:42,949
register afterwards the control would

218
00:08:41,510 --> 00:08:45,530
again continue inside the untrusted

219
00:08:42,950 --> 00:08:49,280
application violating our trusted

220
00:08:45,530 --> 00:08:51,199
compartment security guarantees so this

221
00:08:49,280 --> 00:08:52,970
three attack requires us to add another

222
00:08:51,200 --> 00:08:55,220
safety check after the right PKU

223
00:08:52,970 --> 00:08:56,990
instruction with this check we ensure

224
00:08:55,220 --> 00:08:58,550
that the access permission has either

225
00:08:56,990 --> 00:09:00,290
been reduced to the untrusted

226
00:08:58,550 --> 00:09:02,559
application only or the execution

227
00:09:00,290 --> 00:09:05,420
execution stops

228
00:09:02,559 --> 00:09:08,179
so now we can use safely right pika use

229
00:09:05,420 --> 00:09:10,069
our goal has become to eliminate all

230
00:09:08,179 --> 00:09:13,160
unsafe uses of replicas use an exhaust

231
00:09:10,069 --> 00:09:15,049
or Aaron prevents the execution of pages

232
00:09:13,160 --> 00:09:17,089
that include such unsafe replicas use

233
00:09:15,049 --> 00:09:20,149
annex are stores by vetting every memory

234
00:09:17,089 --> 00:09:21,040
page before enabling the execute

235
00:09:20,149 --> 00:09:23,119
permission

236
00:09:21,040 --> 00:09:25,129
therefore we monitor the untrusted

237
00:09:23,119 --> 00:09:27,230
application and remove the execute

238
00:09:25,129 --> 00:09:30,589
permission from system calls that set

239
00:09:27,230 --> 00:09:32,929
the page permissions as a result the

240
00:09:30,589 --> 00:09:35,860
execution of a new page without any a

241
00:09:32,929 --> 00:09:38,059
execute permission leads to a page fault

242
00:09:35,860 --> 00:09:40,639
Aram's trusts the page fault handler at

243
00:09:38,059 --> 00:09:42,019
this point is invoked which again bets

244
00:09:40,639 --> 00:09:45,410
the page and only allows the execution

245
00:09:42,019 --> 00:09:50,299
to continue if it did not find any

246
00:09:45,410 --> 00:09:51,679
unsafe write PK I use or X are stores so

247
00:09:50,299 --> 00:09:53,480
given these two techniques we have

248
00:09:51,679 --> 00:09:55,549
prevented an attacker from accessing the

249
00:09:53,480 --> 00:09:57,499
trusted compartment in the process

250
00:09:55,549 --> 00:09:59,660
though we have introduced checks which

251
00:09:57,499 --> 00:10:02,329
may result in halting the execution of

252
00:09:59,660 --> 00:10:04,879
some applications our goal is now to

253
00:10:02,329 --> 00:10:06,618
rewrite these applications so that they

254
00:10:04,879 --> 00:10:10,069
do not contain contain unsafe

255
00:10:06,619 --> 00:10:13,100
instructions and this is a challenge due

256
00:10:10,069 --> 00:10:17,299
to the complexity of x86 and its ability

257
00:10:13,100 --> 00:10:18,739
to execute any byte aligned address the

258
00:10:17,299 --> 00:10:20,059
two examples I'm showing here are

259
00:10:18,739 --> 00:10:23,509
replicate your instructions

260
00:10:20,059 --> 00:10:26,089
sequences in the form of 0 F 0 1 EF

261
00:10:23,509 --> 00:10:28,429
which can either occur across two

262
00:10:26,089 --> 00:10:30,199
instructions or in one longer

263
00:10:28,429 --> 00:10:32,480
instruction while these two examples

264
00:10:30,199 --> 00:10:35,169
focus on right peek-a-ru the same holds

265
00:10:32,480 --> 00:10:38,329
for the X our store sequence as well

266
00:10:35,169 --> 00:10:40,610
with Aaron we rely on binary writing to

267
00:10:38,329 --> 00:10:43,969
eliminate these inadvertent but unsafe

268
00:10:40,610 --> 00:10:45,230
write PK use so the rewriting here can

269
00:10:43,970 --> 00:10:47,360
be integrated either into your

270
00:10:45,230 --> 00:10:49,480
compilation process prior to enabling

271
00:10:47,360 --> 00:10:52,249
the execute permission at runtime or

272
00:10:49,480 --> 00:10:54,290
statically by rewriting the binary

273
00:10:52,249 --> 00:10:56,019
before the application starts we have

274
00:10:54,290 --> 00:10:58,248
devised seven rewrite rules to generate

275
00:10:56,019 --> 00:11:00,619
semantically equivalent instructions

276
00:10:58,249 --> 00:11:04,249
without the unsafe sequences that you

277
00:11:00,619 --> 00:11:06,980
see here in the instance I'm showing

278
00:11:04,249 --> 00:11:08,989
here the right PKA ufp occurs across two

279
00:11:06,980 --> 00:11:10,910
instructions a simple rewrite rule

280
00:11:08,989 --> 00:11:12,799
inserts a no op instruction between the

281
00:11:10,910 --> 00:11:14,890
two original instruction which would

282
00:11:12,799 --> 00:11:17,959
break the sequence

283
00:11:14,890 --> 00:11:19,569
rewriting the sequence within a larger

284
00:11:17,960 --> 00:11:22,700
instruction is more difficult

285
00:11:19,570 --> 00:11:24,710
luckily the x86 instruction set follows

286
00:11:22,700 --> 00:11:26,390
a general format and we use this format

287
00:11:24,710 --> 00:11:28,340
to devise rewrite rules that are

288
00:11:26,390 --> 00:11:31,460
independent of the instruction opcode as

289
00:11:28,340 --> 00:11:35,510
a result the reread rules only depend on

290
00:11:31,460 --> 00:11:37,460
which part the sequence occurs in the

291
00:11:35,510 --> 00:11:39,560
example here is an add instruction that

292
00:11:37,460 --> 00:11:41,800
includes the right PKU instruction in

293
00:11:39,560 --> 00:11:45,260
the Mott RM and the displacement value

294
00:11:41,800 --> 00:11:47,959
we chose to rewrite the used register

295
00:11:45,260 --> 00:11:53,300
assignment and therefore we first free

296
00:11:47,960 --> 00:11:54,620
up a register here EAX and alter the

297
00:11:53,300 --> 00:11:56,930
register assignment in the add

298
00:11:54,620 --> 00:11:59,210
instruction as a result the leading 0 F

299
00:11:56,930 --> 00:12:01,849
changes into a 0 7 which again breaks

300
00:11:59,210 --> 00:12:03,830
the sequence while this were these were

301
00:12:01,850 --> 00:12:06,140
just two examples we have devised

302
00:12:03,830 --> 00:12:07,850
similar rules for the complete x86

303
00:12:06,140 --> 00:12:11,689
instruction set and I urge you to read

304
00:12:07,850 --> 00:12:13,670
the paper for all the glory details now

305
00:12:11,690 --> 00:12:15,320
we have a secure and usable isolation

306
00:12:13,670 --> 00:12:17,719
technique and we would like to apply it

307
00:12:15,320 --> 00:12:19,070
to a frequently switching use case let

308
00:12:17,720 --> 00:12:21,080
me first tell you about our prototype

309
00:12:19,070 --> 00:12:22,640
it's the user space library which

310
00:12:21,080 --> 00:12:24,890
provides you the safe call gates that I

311
00:12:22,640 --> 00:12:26,510
talked about in the beginning a memory

312
00:12:24,890 --> 00:12:28,760
allocator for the trusted compartment

313
00:12:26,510 --> 00:12:31,720
and an inspection mechanism to find

314
00:12:28,760 --> 00:12:34,790
unsafe write PK use and nix our stores

315
00:12:31,720 --> 00:12:36,200
we additionally provide you with a user

316
00:12:34,790 --> 00:12:39,050
space monitor and a layer of security

317
00:12:36,200 --> 00:12:42,490
module to intercept system calls that

318
00:12:39,050 --> 00:12:44,810
enabled execute permissions for pages in

319
00:12:42,490 --> 00:12:46,760
addition we implemented the binary

320
00:12:44,810 --> 00:12:50,030
writing in a static binary writing tool

321
00:12:46,760 --> 00:12:51,710
which is based on dynast we evaluated

322
00:12:50,030 --> 00:12:53,810
Erin by asking too many questions the

323
00:12:51,710 --> 00:12:56,030
first one is how frequent do inadvertent

324
00:12:53,810 --> 00:12:59,050
by PK I use an X our score our stores

325
00:12:56,030 --> 00:13:02,329
occur in today's binaries to that end we

326
00:12:59,050 --> 00:13:05,569
inspected 200,000 binaries of 5 minutes

327
00:13:02,330 --> 00:13:08,180
of solutions we found about 1200

328
00:13:05,570 --> 00:13:11,089
replicas and our store instances in the

329
00:13:08,180 --> 00:13:14,120
binary code we then used I Nance to

330
00:13:11,089 --> 00:13:16,370
disassemble about 1,000 of them which is

331
00:13:14,120 --> 00:13:18,530
a prerequisite to actually rewrite them

332
00:13:16,370 --> 00:13:20,270
afterwards and then using our rewrite

333
00:13:18,530 --> 00:13:21,680
rules were successfully able to rewrite

334
00:13:20,270 --> 00:13:23,540
all of the instances we were able to

335
00:13:21,680 --> 00:13:25,040
disassemble and the paper

336
00:13:23,540 --> 00:13:27,079
additionally we described a dynamic

337
00:13:25,040 --> 00:13:29,860
rewriting approach for pages that could

338
00:13:27,080 --> 00:13:32,660
not statically be

339
00:13:29,860 --> 00:13:35,030
the second question we asked was about

340
00:13:32,660 --> 00:13:37,579
Arabs overhead and frequently switching

341
00:13:35,030 --> 00:13:39,530
use-case and due to my limitation in

342
00:13:37,580 --> 00:13:41,660
time I will only talk about how we

343
00:13:39,530 --> 00:13:44,949
isolate session keys with an nginx a

344
00:13:41,660 --> 00:13:47,719
high performance commercial web server

345
00:13:44,950 --> 00:13:49,640
today's implementation of nginx uses

346
00:13:47,720 --> 00:13:52,130
open SSL and does not protect the keys

347
00:13:49,640 --> 00:13:54,439
at all it's vulnerable to bugs and

348
00:13:52,130 --> 00:13:57,350
security and security vulnerabilities

349
00:13:54,440 --> 00:13:58,850
that could leak or corrupt the keys for

350
00:13:57,350 --> 00:14:01,910
example the heartbleed bug was just a

351
00:13:58,850 --> 00:14:03,740
simple example with Aaron we isolate the

352
00:14:01,910 --> 00:14:06,230
AES session key into a trusted

353
00:14:03,740 --> 00:14:08,210
compartment and only allow accessed via

354
00:14:06,230 --> 00:14:09,680
a narrow interface in particular the key

355
00:14:08,210 --> 00:14:12,920
initialization and the encryption and

356
00:14:09,680 --> 00:14:14,959
decryption functions this experiment

357
00:14:12,920 --> 00:14:17,420
here runs a single worker nginx instance

358
00:14:14,960 --> 00:14:18,740
and queries different file sizes we

359
00:14:17,420 --> 00:14:21,380
compare the native throughput without

360
00:14:18,740 --> 00:14:23,510
any isolation to the previously

361
00:14:21,380 --> 00:14:25,610
described isolation using air overall

362
00:14:23,510 --> 00:14:27,680
Aram's throughput is within 5% of the

363
00:14:25,610 --> 00:14:29,240
native performance while protecting the

364
00:14:27,680 --> 00:14:31,729
session keys against bugs and security

365
00:14:29,240 --> 00:14:36,170
vulnerabilities in the nginx server as

366
00:14:31,730 --> 00:14:37,700
well as large parts of the open ssl we

367
00:14:36,170 --> 00:14:39,829
achieve this high throughput despite

368
00:14:37,700 --> 00:14:42,760
performing 1.3 million switches per

369
00:14:39,830 --> 00:14:44,870
second in this particular experiment

370
00:14:42,760 --> 00:14:47,450
existing techniques can simply not

371
00:14:44,870 --> 00:14:50,150
sustain such high switch rates in case

372
00:14:47,450 --> 00:14:51,640
of VM funk it has three times higher

373
00:14:50,150 --> 00:14:54,319
switch cost

374
00:14:51,640 --> 00:14:56,330
similarly run time based techniques even

375
00:14:54,320 --> 00:14:59,690
if they use hardware provided bounce

376
00:14:56,330 --> 00:15:02,690
checks cannot perform at the rate of

377
00:14:59,690 --> 00:15:04,400
Ihram at larger file size this be a

378
00:15:02,690 --> 00:15:06,830
particular experiment becomes Network

379
00:15:04,400 --> 00:15:10,329
bound at which all techniques actually

380
00:15:06,830 --> 00:15:13,280
achieve a similar performance

381
00:15:10,330 --> 00:15:15,410
so to summarize arum efficiently and

382
00:15:13,280 --> 00:15:17,270
securely isolates sensitive data within

383
00:15:15,410 --> 00:15:17,660
the same process using memory protection

384
00:15:17,270 --> 00:15:19,730
keys

385
00:15:17,660 --> 00:15:22,219
we protect against malicious attacks by

386
00:15:19,730 --> 00:15:25,520
creating safe call gates and monitoring

387
00:15:22,220 --> 00:15:27,800
the executable memory we overcome the

388
00:15:25,520 --> 00:15:30,470
limitations of Aram's environment by

389
00:15:27,800 --> 00:15:33,439
devising reread rules that create a

390
00:15:30,470 --> 00:15:35,060
runnable binaries again our extensive

391
00:15:33,440 --> 00:15:36,620
evaluation has shown that Arum can be

392
00:15:35,060 --> 00:15:38,959
applied to frequently switching use

393
00:15:36,620 --> 00:15:41,250
cases and we observe a substantially

394
00:15:38,960 --> 00:15:44,069
lower overhead

395
00:15:41,250 --> 00:15:46,050
- prior art with that I would like to

396
00:15:44,069 --> 00:15:47,819
thank you and mention that our code is

397
00:15:46,050 --> 00:15:49,859
available so feel free to check it out

398
00:15:47,819 --> 00:16:04,769
and I'd be happy to take your questions

399
00:15:49,860 --> 00:16:07,980
thank you UC Irvine fantastic work

400
00:16:04,769 --> 00:16:10,740
lightweight contacts use to set up page

401
00:16:07,980 --> 00:16:14,250
tables to protect yes in process memory

402
00:16:10,740 --> 00:16:16,470
so actually last year's MCCS there's a

403
00:16:14,250 --> 00:16:19,050
what call me call me though also used to

404
00:16:16,470 --> 00:16:22,259
set up page tables and they also used

405
00:16:19,050 --> 00:16:25,829
clock is very similar to this design do

406
00:16:22,259 --> 00:16:30,600
you think that is enough or also

407
00:16:25,829 --> 00:16:32,849
benefits on top of that so Colgate's

408
00:16:30,600 --> 00:16:33,779
itself have been I think invented quite

409
00:16:32,850 --> 00:16:37,410
a while back right

410
00:16:33,779 --> 00:16:39,660
so a for sure we have a newer Colgate

411
00:16:37,410 --> 00:16:42,480
that's like it has to be adopted into

412
00:16:39,660 --> 00:16:44,189
the technique that you're using true but

413
00:16:42,480 --> 00:16:46,920
I think the benefit here is that we show

414
00:16:44,189 --> 00:16:51,599
how we actually enable a stronger threat

415
00:16:46,920 --> 00:16:55,229
model by allowing the rewrites right

416
00:16:51,600 --> 00:17:00,959
once we eliminated the unsafe sequences

417
00:16:55,230 --> 00:17:03,300
okay thanks well John hi John Criswell

418
00:17:00,959 --> 00:17:05,010
University of Rochester so I had a

419
00:17:03,300 --> 00:17:07,649
question about the about the binary

420
00:17:05,010 --> 00:17:09,959
writing approach so as I understand it

421
00:17:07,650 --> 00:17:12,419
disassembling x86 code is an undecidable

422
00:17:09,959 --> 00:17:14,610
problem so is there something about the

423
00:17:12,419 --> 00:17:16,620
WPA are you instruction in its encoding

424
00:17:14,609 --> 00:17:17,609
where the situations where it can occur

425
00:17:16,619 --> 00:17:20,399
is something where you can always

426
00:17:17,609 --> 00:17:22,379
reliably rewrite or is it just the case

427
00:17:20,400 --> 00:17:25,350
that as it happens you can always

428
00:17:22,380 --> 00:17:26,880
rewrite it successfully in your test

429
00:17:25,349 --> 00:17:28,408
cases so it's something that in theory

430
00:17:26,880 --> 00:17:31,530
could be a problem but in practice is

431
00:17:28,409 --> 00:17:33,929
not know so we have we went basically

432
00:17:31,530 --> 00:17:37,918
through the entire x86 instruction set

433
00:17:33,929 --> 00:17:39,750
and looked at what cases exist right and

434
00:17:37,919 --> 00:17:42,179
then we device these three bread rolls

435
00:17:39,750 --> 00:17:44,400
right but but the issue the question

436
00:17:42,179 --> 00:17:46,260
that I have is that disassembling x86 is

437
00:17:44,400 --> 00:17:48,059
in general undecidable right oh yeah

438
00:17:46,260 --> 00:17:50,220
sure right so so is that like a

439
00:17:48,059 --> 00:17:51,809
theoretical problem with your approach

440
00:17:50,220 --> 00:17:53,429
or is it or is there something about the

441
00:17:51,809 --> 00:17:54,930
way that the instructions are encoded

442
00:17:53,429 --> 00:17:56,550
that no matter how your

443
00:17:54,930 --> 00:17:57,690
it's always going to sure something it's

444
00:17:56,550 --> 00:18:00,960
so it with something is functioning so

445
00:17:57,690 --> 00:18:02,400
that this assembly is an issue that a

446
00:18:00,960 --> 00:18:05,100
dine-in Springs them right we are using

447
00:18:02,400 --> 00:18:07,620
actually a rewrite tool financed which

448
00:18:05,100 --> 00:18:09,240
we ourselves have not written right the

449
00:18:07,620 --> 00:18:11,219
the technique for actually rewriting and

450
00:18:09,240 --> 00:18:16,710
how they disassemble is provided by the

451
00:18:11,220 --> 00:18:19,290
tool itself and they require us to

452
00:18:16,710 --> 00:18:20,790
disassemble x86 binaries if you for

453
00:18:19,290 --> 00:18:22,370
example imagine that this technique

454
00:18:20,790 --> 00:18:26,070
would be integrated into a compiler

455
00:18:22,370 --> 00:18:27,870
right this way yeah yeah about compiler

456
00:18:26,070 --> 00:18:30,389
scissors that's obviously fixable and

457
00:18:27,870 --> 00:18:32,340
just yeah yeah I'm just asking about

458
00:18:30,390 --> 00:18:34,530
like if I give up let's quit let's go

459
00:18:32,340 --> 00:18:35,909
ahead and take this offline yeah sure

460
00:18:34,530 --> 00:18:40,620
I won't we have time for one more

461
00:18:35,910 --> 00:18:42,240
question quick hi Matt is from Oracle so

462
00:18:40,620 --> 00:18:43,889
I was wondering you have a pretty strong

463
00:18:42,240 --> 00:18:46,460
thread model already basically giving

464
00:18:43,890 --> 00:18:49,170
the attacker control of a native code

465
00:18:46,460 --> 00:18:51,390
the only thing that you explicitly

466
00:18:49,170 --> 00:18:53,550
exclude is essentially microarchitecture

467
00:18:51,390 --> 00:18:54,720
attacks I was wondering if you thought

468
00:18:53,550 --> 00:18:56,760
about extending towards that direction

469
00:18:54,720 --> 00:18:58,530
as well because it seems that if you

470
00:18:56,760 --> 00:19:00,120
would add that and you have in process

471
00:18:58,530 --> 00:19:04,170
isolation that also includes that we

472
00:19:00,120 --> 00:19:06,780
could get rid of site isolation so I

473
00:19:04,170 --> 00:19:08,160
mean it's definitely an interest there

474
00:19:06,780 --> 00:19:10,920
is an interest to go into that direction

475
00:19:08,160 --> 00:19:12,750
right but we are relying on memory in

476
00:19:10,920 --> 00:19:14,220
the underlying fundamentals of memory

477
00:19:12,750 --> 00:19:18,060
protection keys which is implemented in

478
00:19:14,220 --> 00:19:19,680
hardware right so it's although we can

479
00:19:18,060 --> 00:19:21,780
use some of the techniques like elf

480
00:19:19,680 --> 00:19:25,290
fences to protect against some

481
00:19:21,780 --> 00:19:28,200
vulnerabilities right you may not always

482
00:19:25,290 --> 00:19:29,610
be able to protect against all micro

483
00:19:28,200 --> 00:19:32,880
architectural attacks that you don't

484
00:19:29,610 --> 00:19:34,600
even know about okay thank you go ahead

485
00:19:32,880 --> 00:19:39,910
and thank our speaker once again

486
00:19:34,600 --> 00:19:39,909
[Applause]

