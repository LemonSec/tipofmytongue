1
00:00:11,250 --> 00:00:17,529
okay so I'm Santiago I'm a PhD student

2
00:00:14,440 --> 00:00:19,810
at NYU and today we'll be talking about

3
00:00:17,529 --> 00:00:23,140
in total in total is the first framework

4
00:00:19,810 --> 00:00:25,240
to cryptographically protect the supply

5
00:00:23,140 --> 00:00:26,619
chain as a whole the software supply

6
00:00:25,240 --> 00:00:30,698
chain now you may be wondering what a

7
00:00:26,619 --> 00:00:32,110
software supply chain is well every

8
00:00:30,699 --> 00:00:33,519
single piece of software that you have

9
00:00:32,110 --> 00:00:35,980
in your machine right now was made

10
00:00:33,519 --> 00:00:37,870
through a software supply chain for

11
00:00:35,980 --> 00:00:41,500
example here's a very simple software

12
00:00:37,870 --> 00:00:43,930
supply chain that's using four nodes or

13
00:00:41,500 --> 00:00:46,510
four servers you have a version control

14
00:00:43,930 --> 00:00:48,610
system you have a CI system that's

15
00:00:46,510 --> 00:00:50,199
running tests constantly against all of

16
00:00:48,610 --> 00:00:53,110
the commits in the version control

17
00:00:50,200 --> 00:00:56,739
system you also have a box building and

18
00:00:53,110 --> 00:00:59,079
build farm order or anything really

19
00:00:56,739 --> 00:01:01,660
that's building your source code and

20
00:00:59,079 --> 00:01:03,489
then you have your packaging step that

21
00:01:01,660 --> 00:01:05,259
takes the binaries and then puts them on

22
00:01:03,489 --> 00:01:07,990
a package this could be a Debian package

23
00:01:05,259 --> 00:01:10,509
that's shipped to the users now we're in

24
00:01:07,990 --> 00:01:12,940
juice Nick security so it wouldn't be a

25
00:01:10,509 --> 00:01:15,360
surprise for anybody here that things

26
00:01:12,940 --> 00:01:17,289
can happen in the software supply chain

27
00:01:15,360 --> 00:01:19,209
hackers can break into the version

28
00:01:17,289 --> 00:01:21,630
control system of our Juniper firewall a

29
00:01:19,209 --> 00:01:24,910
flip pseudo-random c4a

30
00:01:21,630 --> 00:01:27,880
for the IPSec stack and be able to

31
00:01:24,910 --> 00:01:30,220
decrypt all of the IPSec connections to

32
00:01:27,880 --> 00:01:32,530
all of the unipro firewalls boxes and

33
00:01:30,220 --> 00:01:35,560
like this there has been many other

34
00:01:32,530 --> 00:01:37,119
compromises on different systems the

35
00:01:35,560 --> 00:01:38,550
same thing can happen in the build in

36
00:01:37,119 --> 00:01:42,190
the real system

37
00:01:38,550 --> 00:01:45,099
hackers can provide you developers a

38
00:01:42,190 --> 00:01:46,840
temperate version of Xcode that will

39
00:01:45,099 --> 00:01:49,360
produce the backdoored version of Xcode

40
00:01:46,840 --> 00:01:52,929
that's shipped to iOS into the iOS App

41
00:01:49,360 --> 00:01:55,840
Store and it compromises many many of

42
00:01:52,929 --> 00:01:58,869
these users this is of course not an

43
00:01:55,840 --> 00:02:01,420
isolated incident either the same thing

44
00:01:58,869 --> 00:02:04,360
can happen in the packaging step you can

45
00:02:01,420 --> 00:02:06,700
have a backboard version of PHP myadmin

46
00:02:04,360 --> 00:02:10,348
sitting on a Korean mirror that's

47
00:02:06,700 --> 00:02:12,550
targeting a specific set of people and

48
00:02:10,348 --> 00:02:15,160
installing a backdoored version of PHP

49
00:02:12,550 --> 00:02:17,170
myadmin on their box this is of course

50
00:02:15,160 --> 00:02:20,079
as you may have guessed not an isolated

51
00:02:17,170 --> 00:02:21,670
incident either and the same questions

52
00:02:20,080 --> 00:02:23,959
arise when we're talking about testing

53
00:02:21,670 --> 00:02:26,750
screw-top LED and compliance

54
00:02:23,959 --> 00:02:28,459
there has been a case in which body

55
00:02:26,750 --> 00:02:30,829
windows update was released and many

56
00:02:28,459 --> 00:02:33,140
people were actually suspecting that

57
00:02:30,829 --> 00:02:35,269
there was like foul play because it was

58
00:02:33,140 --> 00:02:37,010
actually just bring these to a certain

59
00:02:35,269 --> 00:02:39,319
portion of the population in Kazakhstan

60
00:02:37,010 --> 00:02:41,929
as you may have guessed again this is

61
00:02:39,319 --> 00:02:44,480
not an isolated incident now software

62
00:02:41,930 --> 00:02:46,939
supply chain attacks happen as we have

63
00:02:44,480 --> 00:02:51,170
seen very often as a matter of fact the

64
00:02:46,939 --> 00:02:53,828
cement the semantic internet security

65
00:02:51,170 --> 00:02:56,869
threat intelligence report said that in

66
00:02:53,829 --> 00:03:00,230
2017 software supply chain compromises

67
00:02:56,870 --> 00:03:04,340
went up 200% and in 2018 they went up

68
00:03:00,230 --> 00:03:05,780
another 76 percent and I'm just stopping

69
00:03:04,340 --> 00:03:07,370
here for a second because I want you

70
00:03:05,780 --> 00:03:09,409
guys to see that in this very simple

71
00:03:07,370 --> 00:03:12,379
very toy example site project type of

72
00:03:09,409 --> 00:03:14,720
thing for server software supply chain

73
00:03:12,379 --> 00:03:17,000
you have eight points in which is simple

74
00:03:14,720 --> 00:03:21,200
compromise may be devastating for the

75
00:03:17,000 --> 00:03:23,299
end-user and well I'll be moving on to

76
00:03:21,200 --> 00:03:25,849
well you know that there's a specific

77
00:03:23,299 --> 00:03:27,620
point solutions and and we're not trying

78
00:03:25,849 --> 00:03:29,388
to fix this we know that there's a git

79
00:03:27,620 --> 00:03:31,069
commit signing that can prevent hackers

80
00:03:29,389 --> 00:03:32,329
from tampering with the version control

81
00:03:31,069 --> 00:03:33,948
system there's things such as

82
00:03:32,329 --> 00:03:37,060
reproducible builds that can help you

83
00:03:33,949 --> 00:03:39,260
from backdooring compilers there's a

84
00:03:37,060 --> 00:03:43,250
project such as notary in tough that are

85
00:03:39,260 --> 00:03:46,159
protecting users every day now even with

86
00:03:43,250 --> 00:03:48,079
those there's the element of well is the

87
00:03:46,159 --> 00:03:50,060
security policy actual in place is it

88
00:03:48,079 --> 00:03:52,310
actually being followed is this product

89
00:03:50,060 --> 00:03:55,790
actually being shipped into the next

90
00:03:52,310 --> 00:03:58,040
step and this this security policy the

91
00:03:55,790 --> 00:04:01,459
same or as was expected and so on and so

92
00:03:58,040 --> 00:04:03,590
forth now this is why we came up with in

93
00:04:01,459 --> 00:04:05,150
toto we're trying to rethink a way to

94
00:04:03,590 --> 00:04:08,239
protect the software supply chain as a

95
00:04:05,150 --> 00:04:10,099
whole we do this with three major

96
00:04:08,239 --> 00:04:14,000
principles the first one is compromise

97
00:04:10,099 --> 00:04:16,130
resilience we want to be we want we know

98
00:04:14,000 --> 00:04:17,690
that it's possible that attackers will

99
00:04:16,130 --> 00:04:19,579
break into individual nodes and we want

100
00:04:17,690 --> 00:04:23,150
to minimize the impact we do this

101
00:04:19,579 --> 00:04:25,010
through a to two techniques one of them

102
00:04:23,150 --> 00:04:27,080
is Rosa / separation and the other one

103
00:04:25,010 --> 00:04:31,159
is having replication and key rotation

104
00:04:27,080 --> 00:04:33,950
as a primary as first less primitives

105
00:04:31,159 --> 00:04:35,389
the second one is all we want in total

106
00:04:33,950 --> 00:04:36,680
to be all-encompassing we want to

107
00:04:35,389 --> 00:04:39,350
protect from all the way

108
00:04:36,680 --> 00:04:41,270
to the left and to all the way to the

109
00:04:39,350 --> 00:04:43,610
right from the moment the first line of

110
00:04:41,270 --> 00:04:46,430
code has been committed all the way into

111
00:04:43,610 --> 00:04:48,979
the end-user installation advice we do

112
00:04:46,430 --> 00:04:50,660
this through two very simple properties

113
00:04:48,979 --> 00:04:52,699
one of them is being to let Gnostic that

114
00:04:50,660 --> 00:04:54,830
allows us to be seamlessly integrated in

115
00:04:52,699 --> 00:04:58,100
any supply chain and finally we don't

116
00:04:54,830 --> 00:05:00,349
want to enforce any type of use and we

117
00:04:58,100 --> 00:05:03,199
want the or system to be expressive

118
00:05:00,350 --> 00:05:05,090
enough to be adaptive everywhere I'll

119
00:05:03,199 --> 00:05:06,740
elaborate a little bit of this so we

120
00:05:05,090 --> 00:05:08,539
have this software supply chain again

121
00:05:06,740 --> 00:05:10,130
and we know that there's four actors

122
00:05:08,539 --> 00:05:12,440
operating on it we have Bob that's

123
00:05:10,130 --> 00:05:14,900
tagging and gate release we have Karl

124
00:05:12,440 --> 00:05:17,300
that's building we have Aaron that's

125
00:05:14,900 --> 00:05:19,849
packaging everything together and then

126
00:05:17,300 --> 00:05:22,009
we have Dave that's testing we know that

127
00:05:19,849 --> 00:05:24,949
compromise has happened and so it

128
00:05:22,009 --> 00:05:26,570
happens that they've is compromised we

129
00:05:24,949 --> 00:05:28,520
want that even if they've is compromised

130
00:05:26,570 --> 00:05:31,580
we're able to still provide some degree

131
00:05:28,520 --> 00:05:34,039
of security on the resulting package and

132
00:05:31,580 --> 00:05:37,430
we also want to be able to take a day

133
00:05:34,039 --> 00:05:39,919
ski-out or tapes privileges tests and

134
00:05:37,430 --> 00:05:41,539
replace it with say a DES that we trust

135
00:05:39,919 --> 00:05:45,650
that she can actually perform the tests

136
00:05:41,539 --> 00:05:47,840
correctly the second principle is being

137
00:05:45,650 --> 00:05:50,090
tool agnostic we know that this is a

138
00:05:47,840 --> 00:05:52,460
very very common supply chain we know

139
00:05:50,090 --> 00:05:54,650
that many of you recognize some of the

140
00:05:52,460 --> 00:05:57,380
logos here but we also know that you may

141
00:05:54,650 --> 00:05:58,880
recognize mercurial many types of

142
00:05:57,380 --> 00:06:01,639
software are built using different

143
00:05:58,880 --> 00:06:02,960
version control systems and by being

144
00:06:01,639 --> 00:06:03,830
pool agnostic we're able to be

145
00:06:02,960 --> 00:06:05,810
all-encompassing

146
00:06:03,830 --> 00:06:09,409
which is a third property that we're

147
00:06:05,810 --> 00:06:11,090
looking for now today this is how a

148
00:06:09,409 --> 00:06:12,650
software supply chain looks at a toy

149
00:06:11,090 --> 00:06:14,508
example tomorrow it could be anything

150
00:06:12,650 --> 00:06:17,388
else and I'm trying to go like all the

151
00:06:14,509 --> 00:06:19,659
way out here and let's think that gene

152
00:06:17,389 --> 00:06:22,130
sudoc came out with a fingerprint reader

153
00:06:19,659 --> 00:06:24,889
enabled fairy station system for every

154
00:06:22,130 --> 00:06:26,930
single line that has been written and we

155
00:06:24,889 --> 00:06:28,460
want in order to be able to wrap and

156
00:06:26,930 --> 00:06:30,520
authorize the operations done that

157
00:06:28,460 --> 00:06:33,049
specific step of the supply chain and

158
00:06:30,520 --> 00:06:35,810
thinking of like farther down I'm going

159
00:06:33,050 --> 00:06:38,530
crazy here let's say that the gene sudha

160
00:06:35,810 --> 00:06:41,630
came up with a hypno attack in 2021 and

161
00:06:38,530 --> 00:06:44,239
on 2022 he also came out with a using

162
00:06:41,630 --> 00:06:46,310
security paper that detects the intent

163
00:06:44,240 --> 00:06:47,450
of people so that we know that even if

164
00:06:46,310 --> 00:06:48,860
there even at eyes they're not

165
00:06:47,450 --> 00:06:50,510
committing anything malicious into the

166
00:06:48,860 --> 00:06:52,790
server well we want

167
00:06:50,510 --> 00:06:56,510
to be also be able to be protective

168
00:06:52,790 --> 00:06:58,370
using Intel Oh so this whole this is

169
00:06:56,510 --> 00:07:01,370
finally let leaves us to this like

170
00:06:58,370 --> 00:07:03,110
expressive property that lets us pretty

171
00:07:01,370 --> 00:07:04,760
much protect any supply chain out there

172
00:07:03,110 --> 00:07:07,810
in existence and we've actually seen

173
00:07:04,760 --> 00:07:09,830
that we can represent any supply chain

174
00:07:07,810 --> 00:07:15,290
using our very simple domain-specific

175
00:07:09,830 --> 00:07:17,090
language and a very minimal schema so

176
00:07:15,290 --> 00:07:21,650
I'm going to explain how we do this we

177
00:07:17,090 --> 00:07:23,570
have a three main goals one of them is

178
00:07:21,650 --> 00:07:25,130
we want to verify we'll say what needs

179
00:07:23,570 --> 00:07:27,560
to happen what are the steps in the

180
00:07:25,130 --> 00:07:29,630
software supply chain the second one is

181
00:07:27,560 --> 00:07:33,460
we want to verifiably define who is

182
00:07:29,630 --> 00:07:36,290
allowed to make this happen we want to

183
00:07:33,460 --> 00:07:38,630
define the author authorized actors in

184
00:07:36,290 --> 00:07:40,280
the software supply chain and finally we

185
00:07:38,630 --> 00:07:42,530
want to provide a tight binding between

186
00:07:40,280 --> 00:07:44,599
the servers for the notes and software

187
00:07:42,530 --> 00:07:46,340
supply chain this is a this is a chain

188
00:07:44,600 --> 00:07:49,640
after all and we want to make all of the

189
00:07:46,340 --> 00:07:51,560
links connect together properly so the

190
00:07:49,640 --> 00:07:53,960
first element of Intel is policy

191
00:07:51,560 --> 00:07:56,780
language what we call an internal layout

192
00:07:53,960 --> 00:07:58,940
that basically contains the steps what

193
00:07:56,780 --> 00:08:02,179
needs to happen it also defines the

194
00:07:58,940 --> 00:08:03,980
public keys and the actors we call them

195
00:08:02,180 --> 00:08:05,720
functionaries these are the people that

196
00:08:03,980 --> 00:08:08,660
are allowed to perform operations in the

197
00:08:05,720 --> 00:08:12,170
supply chain then we also have a way to

198
00:08:08,660 --> 00:08:13,850
describe how the artifacts the inputs

199
00:08:12,170 --> 00:08:15,560
and outputs of every single step it

200
00:08:13,850 --> 00:08:17,660
could be source code it could be

201
00:08:15,560 --> 00:08:20,750
binaries it could be container images it

202
00:08:17,660 --> 00:08:23,180
could be packages it could be PNG s it

203
00:08:20,750 --> 00:08:25,580
could be anything we describe how this

204
00:08:23,180 --> 00:08:27,820
AR how this relate to their steps

205
00:08:25,580 --> 00:08:31,190
themselves and finally we provide a

206
00:08:27,820 --> 00:08:33,590
version to the language to be able to

207
00:08:31,190 --> 00:08:35,679
type this together we want to say that

208
00:08:33,590 --> 00:08:38,330
if there's a tag release with a version

209
00:08:35,679 --> 00:08:40,489
with a version of the source code is the

210
00:08:38,330 --> 00:08:42,830
same one that's used as an input in the

211
00:08:40,490 --> 00:08:44,390
C in the CI system and it's exactly the

212
00:08:42,830 --> 00:08:48,110
same one that's input into the build

213
00:08:44,390 --> 00:08:49,340
system and so on and so forth now we

214
00:08:48,110 --> 00:08:52,520
also want to have an authoritative

215
00:08:49,340 --> 00:08:54,860
source of this policy so we expect this

216
00:08:52,520 --> 00:08:57,740
to be signed by a project owner in

217
00:08:54,860 --> 00:08:59,420
practice and we'll see later this could

218
00:08:57,740 --> 00:09:01,430
be a release manager this could be a

219
00:08:59,420 --> 00:09:03,050
security team this could be the

220
00:09:01,430 --> 00:09:04,660
benevolent dictator for life on an open

221
00:09:03,050 --> 00:09:06,709
source project

222
00:09:04,660 --> 00:09:08,750
now that we know what needs to happen

223
00:09:06,710 --> 00:09:11,090
the next element that we need is

224
00:09:08,750 --> 00:09:13,910
information about what happened so we

225
00:09:11,090 --> 00:09:16,310
built a very simple tool chain that

226
00:09:13,910 --> 00:09:19,189
pretty much wraps any single possible

227
00:09:16,310 --> 00:09:20,630
process or operation and this produce at

228
00:09:19,190 --> 00:09:22,400
the station this at the stations are

229
00:09:20,630 --> 00:09:24,140
signed with a private keys of the

230
00:09:22,400 --> 00:09:26,420
functionaries in the supply chain and

231
00:09:24,140 --> 00:09:28,330
they provide information about hosts

232
00:09:26,420 --> 00:09:30,380
they provide information about the

233
00:09:28,330 --> 00:09:33,800
materials that they use that the

234
00:09:30,380 --> 00:09:35,330
products that they creative and any

235
00:09:33,800 --> 00:09:37,819
other useful information like standard

236
00:09:35,330 --> 00:09:39,500
input standard output and so on with

237
00:09:37,820 --> 00:09:42,560
this we can actually verify that the

238
00:09:39,500 --> 00:09:46,550
software supply chain has been integrity

239
00:09:42,560 --> 00:09:49,130
its integrity has been not violated we

240
00:09:46,550 --> 00:09:50,359
we use three elements we use the

241
00:09:49,130 --> 00:09:52,460
artifact that you're going to install

242
00:09:50,360 --> 00:09:55,160
back in our example it could be a Debian

243
00:09:52,460 --> 00:09:56,840
package we have our policy and we have a

244
00:09:55,160 --> 00:09:59,600
series of active stations of the

245
00:09:56,840 --> 00:10:01,010
operations that were performed then the

246
00:09:59,600 --> 00:10:02,570
verification is simple we want to make

247
00:10:01,010 --> 00:10:04,550
sure that all of the other stations form

248
00:10:02,570 --> 00:10:06,230
a graph and does this graph look like

249
00:10:04,550 --> 00:10:10,099
the graph that we will have to scrub in

250
00:10:06,230 --> 00:10:11,810
the policy language now we know that

251
00:10:10,100 --> 00:10:13,520
this this is this verification can pass

252
00:10:11,810 --> 00:10:16,849
now we want to make sure that this

253
00:10:13,520 --> 00:10:19,819
actually protects against compromises

254
00:10:16,850 --> 00:10:24,010
that we have seen in the wild well we

255
00:10:19,820 --> 00:10:26,660
have a very simple very minimal no

256
00:10:24,010 --> 00:10:28,370
threat model it's very encompassing but

257
00:10:26,660 --> 00:10:29,959
it's a it's very easy to follow we

258
00:10:28,370 --> 00:10:31,460
assume that anything can be compromised

259
00:10:29,960 --> 00:10:33,020
because we have seen that everything has

260
00:10:31,460 --> 00:10:36,350
been compromising the software supplied

261
00:10:33,020 --> 00:10:38,510
a core infrastructure search as version

262
00:10:36,350 --> 00:10:40,430
control systems package package

263
00:10:38,510 --> 00:10:42,530
repositories testing infrastructure

264
00:10:40,430 --> 00:10:44,870
build machines all of that can be

265
00:10:42,530 --> 00:10:46,430
compromised we also assume that the

266
00:10:44,870 --> 00:10:48,350
communication channels between all of

267
00:10:46,430 --> 00:10:50,030
the servers can be also compromised so

268
00:10:48,350 --> 00:10:51,470
if something is floating on an HTTP

269
00:10:50,030 --> 00:10:53,209
connection they man in the middle it

270
00:10:51,470 --> 00:10:56,210
they flip a bit and you're also

271
00:10:53,210 --> 00:10:57,890
compromised and we also assume that they

272
00:10:56,210 --> 00:11:00,110
can the attackers can compromise

273
00:10:57,890 --> 00:11:02,980
developer keys or Fortuner keys our

274
00:11:00,110 --> 00:11:05,660
compel functionaries into signing

275
00:11:02,980 --> 00:11:07,580
different operations just for the sake

276
00:11:05,660 --> 00:11:09,860
of keeping the security analysis simple

277
00:11:07,580 --> 00:11:11,870
I'm going to ignore this for a second

278
00:11:09,860 --> 00:11:15,680
and then we'll get back to it

279
00:11:11,870 --> 00:11:17,480
so to quickly follow this is we know

280
00:11:15,680 --> 00:11:18,180
that the policy cannot be changed unless

281
00:11:17,480 --> 00:11:20,819
they

282
00:11:18,180 --> 00:11:23,248
the functionary key the product owner

283
00:11:20,819 --> 00:11:24,779
key has been compromised so they cannot

284
00:11:23,249 --> 00:11:29,040
define your steps or they cannot remove

285
00:11:24,779 --> 00:11:31,350
steps or provide a incomplete final

286
00:11:29,040 --> 00:11:32,879
product we also know that these

287
00:11:31,350 --> 00:11:34,350
operations are all the operations that

288
00:11:32,879 --> 00:11:37,290
need to happen because they're described

289
00:11:34,350 --> 00:11:38,910
in the policy and unless the attackers

290
00:11:37,290 --> 00:11:40,199
are able to compromise developer keys

291
00:11:38,910 --> 00:11:41,490
they won't be able to produce at the

292
00:11:40,199 --> 00:11:44,430
stations on behalf of these

293
00:11:41,490 --> 00:11:47,220
functionaries and since there's a hash

294
00:11:44,430 --> 00:11:49,800
chaining mechanism that makes sure that

295
00:11:47,220 --> 00:11:51,990
the artifacts that were produced and

296
00:11:49,800 --> 00:11:53,160
consumed throughout the chain haven't

297
00:11:51,990 --> 00:11:56,189
been tampered with

298
00:11:53,160 --> 00:11:59,490
attackers cannot change the artifacts as

299
00:11:56,189 --> 00:12:03,180
they flow through the chain now going

300
00:11:59,490 --> 00:12:04,410
back to the key compromise we assume

301
00:12:03,180 --> 00:12:09,709
that attackers can actually compromise

302
00:12:04,410 --> 00:12:11,879
keys if if the attacker can compromise

303
00:12:09,709 --> 00:12:13,649
fewer than a threshold we're back to the

304
00:12:11,879 --> 00:12:15,779
example for if an attacker can

305
00:12:13,649 --> 00:12:18,120
compromise functionary keys the effect

306
00:12:15,779 --> 00:12:19,649
will be pretty much scoped by the

307
00:12:18,120 --> 00:12:22,889
domain-specific language that we

308
00:12:19,649 --> 00:12:25,470
produced and if more than a threshold of

309
00:12:22,889 --> 00:12:26,730
product keys say that many keys of the

310
00:12:25,470 --> 00:12:27,899
function eyes have been compromised or

311
00:12:26,730 --> 00:12:30,059
the project owner key has been

312
00:12:27,899 --> 00:12:32,459
compromised then we're pretty much back

313
00:12:30,059 --> 00:12:36,089
to step 0 this is a compromise as if in

314
00:12:32,459 --> 00:12:38,939
total didn't exist now this is payable

315
00:12:36,089 --> 00:12:41,579
from the paper I invite you guys to read

316
00:12:38,939 --> 00:12:43,439
it but it's basically just to point out

317
00:12:41,579 --> 00:12:44,939
the three elements that are in play if

318
00:12:43,439 --> 00:12:46,860
you compromise me from a functionary

319
00:12:44,939 --> 00:12:48,899
that's in which the domain-specific

320
00:12:46,860 --> 00:12:50,970
language allows them to create something

321
00:12:48,899 --> 00:12:52,829
and that's something that's created is

322
00:12:50,970 --> 00:12:56,779
being used further down then the

323
00:12:52,829 --> 00:13:00,199
attacker can tamper with an artifact

324
00:12:56,779 --> 00:13:04,980
that we call that product modification

325
00:13:00,199 --> 00:13:06,990
and that's coped under the that's cooked

326
00:13:04,980 --> 00:13:09,420
under their specific patterns that the

327
00:13:06,990 --> 00:13:11,939
domain-specific language will will

328
00:13:09,420 --> 00:13:13,589
define now to ground this a little bit

329
00:13:11,939 --> 00:13:15,870
more in reality I wanted to go through

330
00:13:13,589 --> 00:13:17,819
the integrations in total is being used

331
00:13:15,870 --> 00:13:19,649
pretty much everywhere there's it's

332
00:13:17,819 --> 00:13:22,079
inside of thousands of companies today

333
00:13:19,649 --> 00:13:23,790
and you may be protected by this and you

334
00:13:22,079 --> 00:13:27,870
don't even know it which is like the

335
00:13:23,790 --> 00:13:29,790
good thing of security products I will

336
00:13:27,870 --> 00:13:31,350
go into the data or example which

337
00:13:29,790 --> 00:13:33,740
actually encompasses a bunch of all of

338
00:13:31,350 --> 00:13:38,880
this other use

339
00:13:33,740 --> 00:13:42,810
data dog is a cloud of servant agent

340
00:13:38,880 --> 00:13:45,330
it's a matrix system and to do so it

341
00:13:42,810 --> 00:13:47,689
installs an agent inside of all of the

342
00:13:45,330 --> 00:13:50,670
different element servers in the cloud

343
00:13:47,690 --> 00:13:54,000
this is very critical because if this

344
00:13:50,670 --> 00:13:56,880
agent were to be compromised then well

345
00:13:54,000 --> 00:13:58,890
it could do devastating damage to all of

346
00:13:56,880 --> 00:14:01,320
this companies that you saw before in

347
00:13:58,890 --> 00:14:02,699
order to the data dog agent to

348
00:14:01,320 --> 00:14:04,530
understand the different workloads in

349
00:14:02,700 --> 00:14:06,900
the cloud they have something they call

350
00:14:04,530 --> 00:14:08,790
integrations which are pretty much

351
00:14:06,900 --> 00:14:11,310
translation layers between the workloads

352
00:14:08,790 --> 00:14:12,990
like an MySQL workload or an NG X

353
00:14:11,310 --> 00:14:16,500
workload or an Amazon

354
00:14:12,990 --> 00:14:18,980
akes workload and this translation

355
00:14:16,500 --> 00:14:21,090
layers are installed into the different

356
00:14:18,980 --> 00:14:24,360
agents that are running this workloads

357
00:14:21,090 --> 00:14:25,830
in the cloud now this this specific

358
00:14:24,360 --> 00:14:27,900
integrations are the ones that are

359
00:14:25,830 --> 00:14:30,060
protected within Toto and they use this

360
00:14:27,900 --> 00:14:32,069
very simple software supply chain to

361
00:14:30,060 --> 00:14:37,410
produce the integrations they have

362
00:14:32,070 --> 00:14:39,270
developers produce the source code they

363
00:14:37,410 --> 00:14:41,969
use hardware token and they actually to

364
00:14:39,270 --> 00:14:43,710
physically touch a hardware token every

365
00:14:41,970 --> 00:14:45,900
time they commit a new version of the

366
00:14:43,710 --> 00:14:47,940
integration and then this is pushed into

367
00:14:45,900 --> 00:14:49,860
an entrusted CIA CD system that's

368
00:14:47,940 --> 00:14:52,470
creating this up to stations as well as

369
00:14:49,860 --> 00:14:55,530
the things follow-through finally this

370
00:14:52,470 --> 00:14:57,930
is all pulled by the agent and the agent

371
00:14:55,530 --> 00:15:00,480
inspects that all of the all of the

372
00:14:57,930 --> 00:15:02,910
sources came in the package actually

373
00:15:00,480 --> 00:15:06,870
came from authorized actions by the

374
00:15:02,910 --> 00:15:08,699
developers or the CI this actually this

375
00:15:06,870 --> 00:15:11,900
actually was pretty cool because we

376
00:15:08,700 --> 00:15:15,480
found out that vulnerabilities on sip

377
00:15:11,900 --> 00:15:17,160
extractors cannot affect this

378
00:15:15,480 --> 00:15:20,340
integration because even if you're able

379
00:15:17,160 --> 00:15:23,850
to bypass paths or change the sources of

380
00:15:20,340 --> 00:15:25,590
everything the agent will be able to

381
00:15:23,850 --> 00:15:27,510
track back all of the sources and all of

382
00:15:25,590 --> 00:15:30,710
the paths to the original source that

383
00:15:27,510 --> 00:15:33,660
was the developers using hardware tokens

384
00:15:30,710 --> 00:15:34,950
now this is how it's used today we'll

385
00:15:33,660 --> 00:15:37,410
use all of the information from the date

386
00:15:34,950 --> 00:15:43,230
of deployment in order to explore how

387
00:15:37,410 --> 00:15:45,959
costly or how data the how how in total

388
00:15:43,230 --> 00:15:48,150
would perform we also explore

389
00:15:45,960 --> 00:15:49,410
he´ll software supply chain compromises

390
00:15:48,150 --> 00:15:50,819
that have happened in the last three

391
00:15:49,410 --> 00:15:52,680
years would affect in toto

392
00:15:50,820 --> 00:15:54,270
we found out that depending on how you

393
00:15:52,680 --> 00:15:55,650
define the policy some of them will

394
00:15:54,270 --> 00:15:58,040
apply some of them would not be

395
00:15:55,650 --> 00:15:59,699
protected but most of them more than

396
00:15:58,040 --> 00:16:02,640
three-quarters of them would be

397
00:15:59,700 --> 00:16:05,340
prevented by in toto we also checked out

398
00:16:02,640 --> 00:16:07,020
the metadata cost sometimes it

399
00:16:05,340 --> 00:16:08,970
oscillates between 20 and 30 percent

400
00:16:07,020 --> 00:16:12,540
there's special edge cases that are

401
00:16:08,970 --> 00:16:14,340
mostly due to test files but in general

402
00:16:12,540 --> 00:16:16,980
it's just a couple of kilobytes so users

403
00:16:14,340 --> 00:16:20,280
don't mind paying the cost for the

404
00:16:16,980 --> 00:16:23,280
benefit of protection and just include

405
00:16:20,280 --> 00:16:26,040
in toto is a novel supply chain

406
00:16:23,280 --> 00:16:28,020
mechanism that uses three principles to

407
00:16:26,040 --> 00:16:29,910
protect yourself supply chain one of

408
00:16:28,020 --> 00:16:32,280
them is compromise resilience the second

409
00:16:29,910 --> 00:16:34,530
one is being all encompassing being able

410
00:16:32,280 --> 00:16:36,480
to protect everything the third one is

411
00:16:34,530 --> 00:16:38,939
its expressive enough to actually

412
00:16:36,480 --> 00:16:42,300
represent any supply chain in existence

413
00:16:38,940 --> 00:16:43,470
we're protecting through this we're able

414
00:16:42,300 --> 00:16:45,990
to protect thousands of organizations

415
00:16:43,470 --> 00:16:47,910
and companies and we're a vibrant

416
00:16:45,990 --> 00:16:50,430
community of 30-something contributors

417
00:16:47,910 --> 00:16:55,020
today from 10 different organizations

418
00:16:50,430 --> 00:16:56,819
including Google Red Hat IBM and some

419
00:16:55,020 --> 00:16:58,740
others that I cannot mention we invite

420
00:16:56,820 --> 00:17:02,490
you to the Linux Foundation CNC fqq and

421
00:16:58,740 --> 00:17:04,650
San Diego in November 18 to 21 we're

422
00:17:02,490 --> 00:17:06,599
actually now part of the Linux

423
00:17:04,650 --> 00:17:10,650
Foundation were under a non profit

424
00:17:06,599 --> 00:17:12,149
organization we're actually hoping that

425
00:17:10,650 --> 00:17:13,290
we will become the standard for its

426
00:17:12,150 --> 00:17:15,810
change of software supply chain

427
00:17:13,290 --> 00:17:18,180
information the future and finally I

428
00:17:15,810 --> 00:17:19,589
want to thank all of my contributors all

429
00:17:18,180 --> 00:17:22,380
of the people that make this a reality

430
00:17:19,589 --> 00:17:25,230
it's been a three-year long process to

431
00:17:22,380 --> 00:17:30,600
make this project be out there

432
00:17:25,230 --> 00:17:39,170
protecting everybody for this thank you

433
00:17:30,600 --> 00:17:39,169
[Applause]

434
00:17:42,429 --> 00:17:49,669
hi couple Singh from IBM research very

435
00:17:46,820 --> 00:17:54,470
interesting talk one question I had is

436
00:17:49,669 --> 00:17:57,380
how do you incentivize different supply

437
00:17:54,470 --> 00:18:00,919
chains for example if you are a lot of

438
00:17:57,380 --> 00:18:03,289
work as you use open source from

439
00:18:00,919 --> 00:18:05,570
different sources how do you make those

440
00:18:03,289 --> 00:18:08,629
developers write the policies you

441
00:18:05,570 --> 00:18:11,149
require and we are talking about

442
00:18:08,630 --> 00:18:13,190
millions of libraries out there

443
00:18:11,150 --> 00:18:15,169
Red Hat you mentioned Red Hat Red Hat's

444
00:18:13,190 --> 00:18:17,780
one of the business model is to do

445
00:18:15,169 --> 00:18:20,510
anyone verify those libraries so how do

446
00:18:17,780 --> 00:18:22,610
you incent drys verification of those

447
00:18:20,510 --> 00:18:25,039
libraries and writing the code or the

448
00:18:22,610 --> 00:18:27,350
policies required under than a person of

449
00:18:25,039 --> 00:18:29,419
these open source libraries well that's

450
00:18:27,350 --> 00:18:31,219
a good question it there's a lot to do

451
00:18:29,419 --> 00:18:32,750
with a cannot except open source but I

452
00:18:31,220 --> 00:18:36,470
can tell you that we are actually

453
00:18:32,750 --> 00:18:39,200
available in arch linux and and in

454
00:18:36,470 --> 00:18:41,809
debian and we are actually if you read

455
00:18:39,200 --> 00:18:43,130
the paper you'll see that there's an in

456
00:18:41,809 --> 00:18:45,168
total transport to verify

457
00:18:43,130 --> 00:18:47,059
reproducibility of builds in your Debian

458
00:18:45,169 --> 00:18:49,970
packages today using different route

459
00:18:47,059 --> 00:18:53,780
builders across the across like academia

460
00:18:49,970 --> 00:18:56,179
and nonprofits and authors I think that

461
00:18:53,780 --> 00:18:57,830
since this is becoming more and more of

462
00:18:56,179 --> 00:19:00,110
a threat people are starting to awake

463
00:18:57,830 --> 00:19:03,889
and go hey we need to actually take care

464
00:19:00,110 --> 00:19:06,469
of this we are working with other big

465
00:19:03,890 --> 00:19:08,570
companies have want to push one of the

466
00:19:06,470 --> 00:19:11,440
mr. earth hat want to push this to be a

467
00:19:08,570 --> 00:19:13,760
standard so you can essentially pull in

468
00:19:11,440 --> 00:19:15,049
open source package that has all

469
00:19:13,760 --> 00:19:18,408
information about the policy that was

470
00:19:15,049 --> 00:19:19,789
followed and you can in like introspect

471
00:19:18,409 --> 00:19:24,350
into it and decide whether if you're

472
00:19:19,789 --> 00:19:26,750
going to use it or not I don't I don't

473
00:19:24,350 --> 00:19:28,789
know what's the best way to push people

474
00:19:26,750 --> 00:19:30,130
towards it I just think it's a it will

475
00:19:28,789 --> 00:19:33,810
become a reality

476
00:19:30,130 --> 00:19:36,880
thank you problem

477
00:19:33,810 --> 00:19:39,940
this is uh this is really really cool

478
00:19:36,880 --> 00:19:43,660
and I was wondering if you'd given some

479
00:19:39,940 --> 00:19:46,750
thought to how the this might actually

480
00:19:43,660 --> 00:19:49,240
also hook in future to the sort of the

481
00:19:46,750 --> 00:19:50,590
what is operating on this in the system

482
00:19:49,240 --> 00:19:54,340
what's afterwards running in the system

483
00:19:50,590 --> 00:19:57,490
and at a stations of what's operational

484
00:19:54,340 --> 00:19:59,740
right so so you already have some sense

485
00:19:57,490 --> 00:20:02,500
of of the supply chain of where the

486
00:19:59,740 --> 00:20:04,660
software was produced and now maybe as

487
00:20:02,500 --> 00:20:06,580
you're running your system you're just

488
00:20:04,660 --> 00:20:09,280
an administrator you want to know that

489
00:20:06,580 --> 00:20:11,590
the things you thought you had are

490
00:20:09,280 --> 00:20:14,290
actually running in the system hooks

491
00:20:11,590 --> 00:20:17,199
into what's going on how you attest to

492
00:20:14,290 --> 00:20:20,139
that and how you use some of what you've

493
00:20:17,200 --> 00:20:24,160
produced to do that given any thought to

494
00:20:20,140 --> 00:20:27,700
that so I'll try to answer as fast as I

495
00:20:24,160 --> 00:20:31,060
can because we're over but there's a you

496
00:20:27,700 --> 00:20:33,280
can recursively verify using in toto so

497
00:20:31,060 --> 00:20:35,800
you can take part of the tool chain and

498
00:20:33,280 --> 00:20:37,629
say hey this part of the supply chain

499
00:20:35,800 --> 00:20:42,909
needs to be verified further down and

500
00:20:37,630 --> 00:20:45,190
the other is you can you can use a

501
00:20:42,910 --> 00:20:49,090
hardware base at station to like provide

502
00:20:45,190 --> 00:20:50,680
like state of the system before you run

503
00:20:49,090 --> 00:20:52,110
of all of the executions that's part of

504
00:20:50,680 --> 00:20:54,250
the future work that we're looking at

505
00:20:52,110 --> 00:20:57,189
we're going to call this function area

506
00:20:54,250 --> 00:20:58,960
in a box okay thank you very much

507
00:20:57,190 --> 00:21:02,250
and of course we now know some of what

508
00:20:58,960 --> 00:21:02,250
gene sudoc is working on

509
00:21:05,130 --> 00:21:07,190
you

