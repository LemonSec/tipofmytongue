1
00:00:11,070 --> 00:00:16,020
thank you hi my name is Michael I'm from

2
00:00:14,190 --> 00:00:17,759
UC Berkeley and I'm going to be

3
00:00:16,020 --> 00:00:20,400
presenting wave which is a decentralized

4
00:00:17,760 --> 00:00:24,119
authorization framework with transitive

5
00:00:20,400 --> 00:00:27,060
delegation so authorization is a very

6
00:00:24,119 --> 00:00:28,560
common problem that we all face so it's

7
00:00:27,060 --> 00:00:29,759
kind of useful to ground it in an

8
00:00:28,560 --> 00:00:31,470
example that brings out some of the

9
00:00:29,759 --> 00:00:33,420
nuances so throughout this talk I'm

10
00:00:31,470 --> 00:00:35,370
going to be using an example from IOT

11
00:00:33,420 --> 00:00:36,809
and cyber-physical systems because it

12
00:00:35,370 --> 00:00:39,300
brings out some of the more interesting

13
00:00:36,809 --> 00:00:42,328
parts so the running example let's say

14
00:00:39,300 --> 00:00:44,940
we have a a building owner and they own

15
00:00:42,329 --> 00:00:46,770
multiple buildings and they're now going

16
00:00:44,940 --> 00:00:49,949
to rent a floor of one of these

17
00:00:46,770 --> 00:00:51,660
buildings to a company so they obviously

18
00:00:49,950 --> 00:00:54,630
need to grant the CEO of this company

19
00:00:51,660 --> 00:00:55,919
access to the cyber physical assets on

20
00:00:54,630 --> 00:00:57,600
the floor that they're renting so they

21
00:00:55,920 --> 00:01:00,780
can control the lighting and access the

22
00:00:57,600 --> 00:01:03,239
doors and control the HVAC and so on but

23
00:01:00,780 --> 00:01:05,519
that company also naturally has

24
00:01:03,239 --> 00:01:07,229
employees within it and it's not going

25
00:01:05,519 --> 00:01:09,689
to be the CEO who is managing all of

26
00:01:07,229 --> 00:01:11,460
these these assets in the building it's

27
00:01:09,689 --> 00:01:13,559
going to be delegated to employees so

28
00:01:11,460 --> 00:01:15,960
there's going to be some permission that

29
00:01:13,560 --> 00:01:17,310
needs to be shared from the CEO with the

30
00:01:15,960 --> 00:01:19,860
employees so that the person who's

31
00:01:17,310 --> 00:01:23,670
responsible for controlling the HVAC can

32
00:01:19,860 --> 00:01:25,530
do their job now if this were done in

33
00:01:23,670 --> 00:01:26,640
the traditional approach the way that

34
00:01:25,530 --> 00:01:28,590
we're all sort of very familiar with

35
00:01:26,640 --> 00:01:30,330
there would be some central

36
00:01:28,590 --> 00:01:31,920
authorization server maybe Active

37
00:01:30,330 --> 00:01:34,289
Directory or LDAP or something like that

38
00:01:31,920 --> 00:01:37,500
and all of this authorization policy

39
00:01:34,290 --> 00:01:39,990
would be captured on that server the

40
00:01:37,500 --> 00:01:42,960
problem with this approach is that this

41
00:01:39,990 --> 00:01:45,149
is a central point of attack we have a

42
00:01:42,960 --> 00:01:46,979
system here where there are multiple

43
00:01:45,150 --> 00:01:48,540
buildings multiple tenants within these

44
00:01:46,979 --> 00:01:50,490
buildings and if this one server gets

45
00:01:48,540 --> 00:01:51,960
compromised all of those tenants gets

46
00:01:50,490 --> 00:01:53,339
compromised all of the devices within

47
00:01:51,960 --> 00:01:54,720
the buildings get compromised because

48
00:01:53,340 --> 00:01:56,930
the attacker can manipulate

49
00:01:54,720 --> 00:01:59,850
authorization policy

50
00:01:56,930 --> 00:02:03,000
additionally we can't even trust the

51
00:01:59,850 --> 00:02:04,619
operator of the server so on the left

52
00:02:03,000 --> 00:02:06,060
hand side here the building owner has

53
00:02:04,619 --> 00:02:08,038
granted permission to the CEO but

54
00:02:06,060 --> 00:02:09,658
there's likely other similar grants to

55
00:02:08,038 --> 00:02:12,089
other tenants in other buildings that

56
00:02:09,658 --> 00:02:14,129
they own and that's what a relationship

57
00:02:12,090 --> 00:02:17,069
there is is private between the bullion

58
00:02:14,129 --> 00:02:18,750
and the CEO within the company there are

59
00:02:17,069 --> 00:02:20,369
permission grants to the various

60
00:02:18,750 --> 00:02:21,959
different employees and these permission

61
00:02:20,370 --> 00:02:24,680
grants likely represent some

62
00:02:21,959 --> 00:02:26,750
organizational hierarchy so that's what

63
00:02:24,680 --> 00:02:28,849
information is private and it should

64
00:02:26,750 --> 00:02:30,680
exist only within the company if the

65
00:02:28,849 --> 00:02:33,140
building owner runs the authorization

66
00:02:30,680 --> 00:02:34,459
server they have visibility into the

67
00:02:33,140 --> 00:02:35,958
permission grants that occurred and the

68
00:02:34,459 --> 00:02:37,459
company that can see the private

69
00:02:35,959 --> 00:02:39,560
permission data in the company that they

70
00:02:37,459 --> 00:02:41,900
shouldn't be able to see and likewise if

71
00:02:39,560 --> 00:02:43,430
the CEO or the company runs a server

72
00:02:41,900 --> 00:02:44,900
they can see permission grants that the

73
00:02:43,430 --> 00:02:47,959
building owner is doing to other tenants

74
00:02:44,900 --> 00:02:49,790
that they shouldn't be able to see in

75
00:02:47,959 --> 00:02:51,349
addition in the traditional approach

76
00:02:49,790 --> 00:02:53,540
sometimes delegation is simply

77
00:02:51,349 --> 00:02:56,179
unsupported and you may be familiar with

78
00:02:53,540 --> 00:02:57,739
things like lifx or Netflix where you

79
00:02:56,180 --> 00:02:59,209
simply can't delegate permission to

80
00:02:57,739 --> 00:03:00,409
someone you have to share your username

81
00:02:59,209 --> 00:03:03,500
and password to share your whole account

82
00:03:00,409 --> 00:03:06,590
and even when delegation is supported

83
00:03:03,500 --> 00:03:08,540
it's it's often not transitive so when

84
00:03:06,590 --> 00:03:10,519
the authorization policy is captured in

85
00:03:08,540 --> 00:03:12,918
the central server its manifest as a set

86
00:03:10,519 --> 00:03:15,019
of entries in a central ACL so if the

87
00:03:12,919 --> 00:03:16,669
building owner were to revoke the

88
00:03:15,019 --> 00:03:18,919
permission that the CEO would have that

89
00:03:16,669 --> 00:03:20,299
would remove one entry from the ACL but

90
00:03:18,919 --> 00:03:23,060
all of the delegations within the

91
00:03:20,299 --> 00:03:24,530
company would continue to be valid so

92
00:03:23,060 --> 00:03:26,060
this is very common for example in

93
00:03:24,530 --> 00:03:27,079
Google Docs if you share a document with

94
00:03:26,060 --> 00:03:29,180
someone and they share it with someone

95
00:03:27,079 --> 00:03:30,680
else you can revoke the initial person's

96
00:03:29,180 --> 00:03:33,229
access but everyone they shared with

97
00:03:30,680 --> 00:03:34,549
retains access to the document ideally

98
00:03:33,229 --> 00:03:36,709
what we would want is that when that

99
00:03:34,549 --> 00:03:39,099
initial revocation happened everyone

100
00:03:36,709 --> 00:03:42,859
within the company was was also revoked

101
00:03:39,099 --> 00:03:44,358
so exists basically this comes down to

102
00:03:42,859 --> 00:03:45,769
the fact that existing work sort of

103
00:03:44,359 --> 00:03:48,349
relaxed a bunch of important features

104
00:03:45,769 --> 00:03:51,010
that are that are necessary when you

105
00:03:48,349 --> 00:03:54,290
look at more complex authorization cases

106
00:03:51,010 --> 00:03:55,970
so one of the big ones is that a lot of

107
00:03:54,290 --> 00:03:57,470
authorization systems have a central

108
00:03:55,970 --> 00:03:59,060
authority whether or not that's a

109
00:03:57,470 --> 00:04:01,459
central place permissions are stored or

110
00:03:59,060 --> 00:04:05,120
only a central authority that can verify

111
00:04:01,459 --> 00:04:06,859
permissions additionally a lot of work

112
00:04:05,120 --> 00:04:09,199
out there doesn't have an opinion on how

113
00:04:06,859 --> 00:04:11,319
people discover their permissions which

114
00:04:09,199 --> 00:04:13,639
leads to our banned mechanisms that may

115
00:04:11,319 --> 00:04:16,449
imply additional constraints like

116
00:04:13,639 --> 00:04:19,039
participants having to be online and

117
00:04:16,449 --> 00:04:21,079
most existing work doesn't protect the

118
00:04:19,039 --> 00:04:22,820
permissions they're not encrypted in

119
00:04:21,079 --> 00:04:24,080
storage they're not sort of protected

120
00:04:22,820 --> 00:04:26,180
while they're busy being shared between

121
00:04:24,080 --> 00:04:27,949
people so the operators of the

122
00:04:26,180 --> 00:04:31,400
infrastructure have a lot of visibility

123
00:04:27,949 --> 00:04:33,889
into the permissions so wave is designed

124
00:04:31,400 --> 00:04:36,049
to provide these missing characteristics

125
00:04:33,889 --> 00:04:38,630
it's a cryptographically enforced

126
00:04:36,050 --> 00:04:40,550
decentralized authorization system

127
00:04:38,630 --> 00:04:43,400
and it can be used in place of most

128
00:04:40,550 --> 00:04:45,320
mainstream authorization systems anyone

129
00:04:43,400 --> 00:04:47,049
can delegate permissions or revoke

130
00:04:45,320 --> 00:04:49,340
permissions that they have delegated

131
00:04:47,050 --> 00:04:51,410
anyone could discover permissions that

132
00:04:49,340 --> 00:04:54,380
they've been granted and form a proof of

133
00:04:51,410 --> 00:04:56,540
authorization and anyone including IOT

134
00:04:54,380 --> 00:05:00,500
devices can verify these proofs of

135
00:04:56,540 --> 00:05:02,960
authorization and waive achieves this

136
00:05:00,500 --> 00:05:04,610
using three techniques which I will go

137
00:05:02,960 --> 00:05:06,349
through the first being graph based

138
00:05:04,610 --> 00:05:09,500
authorization then an encryption

139
00:05:06,350 --> 00:05:11,900
mechanism and a storage mechanism so

140
00:05:09,500 --> 00:05:13,880
growth based authorization is not a new

141
00:05:11,900 --> 00:05:16,940
technique this was popularized by sudsy

142
00:05:13,880 --> 00:05:18,350
spooky in 1996 the general idea here is

143
00:05:16,940 --> 00:05:21,200
that you represent permissions as a

144
00:05:18,350 --> 00:05:22,490
graph rather than an ACL table so the

145
00:05:21,200 --> 00:05:24,320
pictures that I gave earlier which

146
00:05:22,490 --> 00:05:26,690
represent delegation actions between

147
00:05:24,320 --> 00:05:28,460
people now actually represent the real

148
00:05:26,690 --> 00:05:30,920
data structure that is used to store the

149
00:05:28,460 --> 00:05:33,380
permissions and this very naturally

150
00:05:30,920 --> 00:05:35,360
represents transitive delegation so in

151
00:05:33,380 --> 00:05:37,700
this model the participants in the

152
00:05:35,360 --> 00:05:38,720
system are entities their collections of

153
00:05:37,700 --> 00:05:41,539
cryptographic keys

154
00:05:38,720 --> 00:05:44,390
these can be devices services or people

155
00:05:41,540 --> 00:05:47,090
and the grants of permissions between

156
00:05:44,390 --> 00:05:48,830
them are attestations these are signed

157
00:05:47,090 --> 00:05:50,929
certificates that are created by the

158
00:05:48,830 --> 00:05:53,630
entities to represent a granted

159
00:05:50,930 --> 00:05:56,210
permissions attestations grant

160
00:05:53,630 --> 00:05:59,390
permissions on a resource and this

161
00:05:56,210 --> 00:06:01,549
resource looks like a URI that may

162
00:05:59,390 --> 00:06:03,890
correspond to a device control points or

163
00:06:01,550 --> 00:06:06,590
it may be an API or something like that

164
00:06:03,890 --> 00:06:08,479
these resources are located within a

165
00:06:06,590 --> 00:06:11,750
namespace which identifies the entity

166
00:06:08,480 --> 00:06:13,340
that created them that entity being the

167
00:06:11,750 --> 00:06:15,860
creator of this resource is the

168
00:06:13,340 --> 00:06:20,179
authority entity for that resource from

169
00:06:15,860 --> 00:06:21,590
which permissions flow a proof of

170
00:06:20,180 --> 00:06:23,990
permissions in the graph based

171
00:06:21,590 --> 00:06:26,210
authorization model is a path through

172
00:06:23,990 --> 00:06:28,310
the graph from a namespace authority to

173
00:06:26,210 --> 00:06:30,380
some entity that's wanting to prove that

174
00:06:28,310 --> 00:06:32,150
they have permissions so you would

175
00:06:30,380 --> 00:06:33,740
assemble two of these attestations

176
00:06:32,150 --> 00:06:36,049
together and concatenate them and that

177
00:06:33,740 --> 00:06:37,700
would be a proof that allows you to show

178
00:06:36,050 --> 00:06:39,680
that you have permissions on something

179
00:06:37,700 --> 00:06:41,270
and the proof grants the intersection of

180
00:06:39,680 --> 00:06:43,160
the permissions of each of its

181
00:06:41,270 --> 00:06:45,289
constituent excitation x' it's

182
00:06:43,160 --> 00:06:48,020
verifiable by anyone at least in our

183
00:06:45,290 --> 00:06:49,460
work not not in such a spooky and it's

184
00:06:48,020 --> 00:06:50,630
attached to messages on all sorts of

185
00:06:49,460 --> 00:06:51,979
interactions to prove that they're

186
00:06:50,630 --> 00:06:54,890
authorized

187
00:06:51,980 --> 00:06:57,250
these attestations and entities form a

188
00:06:54,890 --> 00:06:59,270
single global graph of authorization

189
00:06:57,250 --> 00:07:00,890
even though this is a single global

190
00:06:59,270 --> 00:07:02,719
graph they're obviously multiple

191
00:07:00,890 --> 00:07:05,630
namespace authorities within the graph

192
00:07:02,720 --> 00:07:07,790
and different entities will only be able

193
00:07:05,630 --> 00:07:09,050
to see portions of this global graph

194
00:07:07,790 --> 00:07:11,930
through a mechanism that I'll talk about

195
00:07:09,050 --> 00:07:14,930
next the graph is publicly accessible

196
00:07:11,930 --> 00:07:18,620
and so that obviously leads to the

197
00:07:14,930 --> 00:07:20,480
question of well how do we hide portions

198
00:07:18,620 --> 00:07:24,110
of the graph if this is going to be

199
00:07:20,480 --> 00:07:25,490
publicly accessible the answer is a new

200
00:07:24,110 --> 00:07:27,440
technique called reverse discover rule

201
00:07:25,490 --> 00:07:28,940
encryption and to set this up let's take

202
00:07:27,440 --> 00:07:30,920
the example that we started with earlier

203
00:07:28,940 --> 00:07:32,990
and let's simplify it a little bit let's

204
00:07:30,920 --> 00:07:35,540
say the building owner has granted

205
00:07:32,990 --> 00:07:39,050
permissions on floor 3 and floor 4 to

206
00:07:35,540 --> 00:07:40,640
the CEO and as CEO now needs to grant

207
00:07:39,050 --> 00:07:42,620
permissions on floor 3 to the manager

208
00:07:40,640 --> 00:07:45,200
who's going to be in charge of floor 3

209
00:07:42,620 --> 00:07:47,240
let's also say that the building owner

210
00:07:45,200 --> 00:07:49,340
has contracted a separate company in

211
00:07:47,240 --> 00:07:50,870
janitorial services and they need to

212
00:07:49,340 --> 00:07:52,130
give them access to floor 3 so they can

213
00:07:50,870 --> 00:07:55,430
get you know through the doors at night

214
00:07:52,130 --> 00:07:58,310
to do their job now let's say the floor

215
00:07:55,430 --> 00:08:00,170
3 manager is installing a new IOT

216
00:07:58,310 --> 00:08:02,600
control service and an HVAC controller

217
00:08:00,170 --> 00:08:04,520
in the building and so he gives it

218
00:08:02,600 --> 00:08:05,810
access to some resources on floor 3 and

219
00:08:04,520 --> 00:08:07,760
let's look at this from the perspective

220
00:08:05,810 --> 00:08:09,470
of the HVAC controller that is now

221
00:08:07,760 --> 00:08:11,680
wanting to do the first step which is

222
00:08:09,470 --> 00:08:14,210
discovering the permissions that it has

223
00:08:11,680 --> 00:08:15,590
so if we look at this sort of subset of

224
00:08:14,210 --> 00:08:17,479
the global authorization graph from a

225
00:08:15,590 --> 00:08:18,830
perspective of the HVAC controller we

226
00:08:17,480 --> 00:08:21,440
see that there's really sort of three

227
00:08:18,830 --> 00:08:24,440
categories of added stations the first

228
00:08:21,440 --> 00:08:26,390
category are those that lie on a path

229
00:08:24,440 --> 00:08:28,430
from the authority to the HVAC

230
00:08:26,390 --> 00:08:30,289
controller and all of the permissions

231
00:08:28,430 --> 00:08:32,750
granted by those data stations intersect

232
00:08:30,290 --> 00:08:34,190
so these are the useful at the stations

233
00:08:32,750 --> 00:08:36,140
the HVAC controller could take these

234
00:08:34,190 --> 00:08:38,060
together concatenate them and form a

235
00:08:36,140 --> 00:08:41,059
proof that it is authorized to access

236
00:08:38,059 --> 00:08:42,919
that resource there are also at stations

237
00:08:41,059 --> 00:08:44,750
that do lie on a path to the controller

238
00:08:42,919 --> 00:08:46,939
but they don't have intersecting

239
00:08:44,750 --> 00:08:49,250
permissions so there couldn't be used in

240
00:08:46,940 --> 00:08:50,750
a proof this one grants from flow 3 the

241
00:08:49,250 --> 00:08:52,370
subsequent ones on oh sorry the first

242
00:08:50,750 --> 00:08:54,080
one a flow for the subsequent on floor 3

243
00:08:52,370 --> 00:08:56,240
so it's not useful to the HVAC

244
00:08:54,080 --> 00:08:58,490
controller and there are also some metro

245
00:08:56,240 --> 00:08:59,900
stations that don't lie on a path to the

246
00:08:58,490 --> 00:09:01,310
HVAC controller at all so it's not

247
00:08:59,900 --> 00:09:04,040
really relevant what permissions are

248
00:09:01,310 --> 00:09:05,170
granted on those edges because it it

249
00:09:04,040 --> 00:09:07,420
never leads back to the

250
00:09:05,170 --> 00:09:09,250
tract controller so the general

251
00:09:07,420 --> 00:09:11,260
technique for reverse discoverable

252
00:09:09,250 --> 00:09:13,600
encryption is obviously to encrypt at

253
00:09:11,260 --> 00:09:16,149
the stations but when you do so you

254
00:09:13,600 --> 00:09:18,310
include in that edge station a secret

255
00:09:16,149 --> 00:09:20,410
that allows you to decrypt upstream meta

256
00:09:18,310 --> 00:09:21,849
stations that have intersecting

257
00:09:20,410 --> 00:09:23,889
permissions and that's basically the

258
00:09:21,850 --> 00:09:25,930
first category those that are useful in

259
00:09:23,889 --> 00:09:29,470
a proof that lie on a path and have

260
00:09:25,930 --> 00:09:31,660
intersecting permissions so the HVAC

261
00:09:29,470 --> 00:09:33,579
controller would be able to decrypt this

262
00:09:31,660 --> 00:09:35,740
first attestation because it's encrypted

263
00:09:33,579 --> 00:09:37,959
under a key that it has and when it does

264
00:09:35,740 --> 00:09:39,820
so it learns some kind of secret that

265
00:09:37,959 --> 00:09:41,859
allows you to decrypt this next at the

266
00:09:39,820 --> 00:09:44,230
station upstream and when it does that

267
00:09:41,860 --> 00:09:46,180
it learns a new secret that allows you

268
00:09:44,230 --> 00:09:48,579
to decrypt the next attestation upstream

269
00:09:46,180 --> 00:09:50,709
that has an intersecting permission so

270
00:09:48,579 --> 00:09:52,269
importantly it was unable to decrypt

271
00:09:50,709 --> 00:09:54,760
these other two at the stations in red

272
00:09:52,269 --> 00:09:56,170
because they didn't have intersecting

273
00:09:54,760 --> 00:10:00,100
permissions or they didn't lie on a path

274
00:09:56,170 --> 00:10:02,019
of course the challenge here is that the

275
00:10:00,100 --> 00:10:03,250
encryption mechanism and the secret

276
00:10:02,019 --> 00:10:05,470
that's passed around must somehow

277
00:10:03,250 --> 00:10:08,110
capture the permissions in order to be

278
00:10:05,470 --> 00:10:10,120
able to enable this so the mechanism we

279
00:10:08,110 --> 00:10:12,970
use is to use wildcard identity based

280
00:10:10,120 --> 00:10:14,529
encryption which is a similar to normal

281
00:10:12,970 --> 00:10:16,810
identity based encryption except you can

282
00:10:14,529 --> 00:10:19,810
have wildcards in the key so one key can

283
00:10:16,810 --> 00:10:22,029
match multiple IDs but importantly in

284
00:10:19,810 --> 00:10:24,339
our application there is no private key

285
00:10:22,029 --> 00:10:27,370
generator every entity in the system has

286
00:10:24,339 --> 00:10:29,199
their own ybe system and the system is

287
00:10:27,370 --> 00:10:32,199
used just for our de for averse

288
00:10:29,199 --> 00:10:33,819
discoverable encryption nothing else so

289
00:10:32,199 --> 00:10:36,250
when you create an action when you're

290
00:10:33,820 --> 00:10:38,529
granting permissions you form an ID that

291
00:10:36,250 --> 00:10:40,120
is some function of the permissions that

292
00:10:38,529 --> 00:10:42,040
are that is being granted you then

293
00:10:40,120 --> 00:10:45,250
generate the private key corresponding

294
00:10:42,040 --> 00:10:47,230
to that ID using your own master ybe key

295
00:10:45,250 --> 00:10:49,329
and you include that private key in the

296
00:10:47,230 --> 00:10:50,949
attestation you then encrypt the whole

297
00:10:49,329 --> 00:10:53,589
excitation including the key that you

298
00:10:50,949 --> 00:10:55,149
just included using the same ID but

299
00:10:53,589 --> 00:10:57,279
using the recipients ybe

300
00:10:55,149 --> 00:10:58,510
public parameters so it's a little bit

301
00:10:57,279 --> 00:11:01,569
simplified you can see the paper for

302
00:10:58,510 --> 00:11:03,279
more details and what this leads to is a

303
00:11:01,569 --> 00:11:05,589
graph that looks a little bit like this

304
00:11:03,279 --> 00:11:07,209
where each actor station contains a key

305
00:11:05,589 --> 00:11:09,370
a corresponds to obscene matter stations

306
00:11:07,209 --> 00:11:11,229
so the HVAC controller starts off with

307
00:11:09,370 --> 00:11:13,420
the orange key because it's its own key

308
00:11:11,230 --> 00:11:15,190
you can generate that part trivially so

309
00:11:13,420 --> 00:11:16,360
it's able to decrypt this first at the

310
00:11:15,190 --> 00:11:18,910
station that was encrypted with the

311
00:11:16,360 --> 00:11:20,980
orange lock when it does so

312
00:11:18,910 --> 00:11:22,689
it learns this light blue key which is

313
00:11:20,980 --> 00:11:24,910
sort of tied to the permissions that are

314
00:11:22,690 --> 00:11:27,160
being granted but comes from full three

315
00:11:24,910 --> 00:11:29,380
manager which then allows us to decrypt

316
00:11:27,160 --> 00:11:32,110
the next upstream attestation that is

317
00:11:29,380 --> 00:11:36,790
also tied to flow three permissions but

318
00:11:32,110 --> 00:11:39,070
is comes from the CEO system using that

319
00:11:36,790 --> 00:11:41,439
it can then decrypt the next upstream

320
00:11:39,070 --> 00:11:43,240
attestation which is also tied to the

321
00:11:41,440 --> 00:11:45,100
same permissions and it's not really

322
00:11:43,240 --> 00:11:47,380
important that this contains a secret

323
00:11:45,100 --> 00:11:48,610
key because no one grants permissions to

324
00:11:47,380 --> 00:11:51,189
the authority the permission the

325
00:11:48,610 --> 00:11:53,860
authority already has permissions so

326
00:11:51,190 --> 00:11:55,390
importantly we were unable to decrypt

327
00:11:53,860 --> 00:11:58,150
this association here granting

328
00:11:55,390 --> 00:12:00,280
permissions on floor 4 because it's the

329
00:11:58,150 --> 00:12:01,689
wrong resource so because we're using an

330
00:12:00,280 --> 00:12:03,459
encryption scheme that are sort of

331
00:12:01,690 --> 00:12:05,140
parameterised by the permissions that

332
00:12:03,460 --> 00:12:06,730
are being granted we can ensure that

333
00:12:05,140 --> 00:12:07,870
only the keys that we did with the keys

334
00:12:06,730 --> 00:12:09,790
that we discover are only able to

335
00:12:07,870 --> 00:12:14,140
decrypt sort of intersecting permissions

336
00:12:09,790 --> 00:12:16,390
so this remains undetermined also this

337
00:12:14,140 --> 00:12:18,280
one despite being on a permission that

338
00:12:16,390 --> 00:12:19,569
actually is the same as several of the

339
00:12:18,280 --> 00:12:22,150
keys that the HF controller has

340
00:12:19,570 --> 00:12:23,920
discovered it remains under cryptical

341
00:12:22,150 --> 00:12:26,079
because there is no key from janitorial

342
00:12:23,920 --> 00:12:27,640
services that is granted to the hvac

343
00:12:26,080 --> 00:12:29,500
controller there's no path between

344
00:12:27,640 --> 00:12:32,410
janitorial services and the HVAC

345
00:12:29,500 --> 00:12:33,910
controller so in summary reverse

346
00:12:32,410 --> 00:12:35,230
discoverable encryption allows us to

347
00:12:33,910 --> 00:12:36,760
decrypt these at the stations that are

348
00:12:35,230 --> 00:12:39,280
useful to us that we could use in a

349
00:12:36,760 --> 00:12:40,750
proof but it doesn't require any

350
00:12:39,280 --> 00:12:42,400
out-of-band communication there's no

351
00:12:40,750 --> 00:12:44,050
sort of key setup phase where we have to

352
00:12:42,400 --> 00:12:45,610
communicate it works when these

353
00:12:44,050 --> 00:12:49,209
associations are granted in any

354
00:12:45,610 --> 00:12:51,100
chronological order and we also in the

355
00:12:49,210 --> 00:12:55,210
papers show how you can support expiry

356
00:12:51,100 --> 00:12:58,090
of attestations using this scheme now

357
00:12:55,210 --> 00:13:00,520
the next problem is we have this global

358
00:12:58,090 --> 00:13:02,440
graph and weve encrypted it so that only

359
00:13:00,520 --> 00:13:03,970
portions of the graph are are visible to

360
00:13:02,440 --> 00:13:05,860
entities they can only see the portions

361
00:13:03,970 --> 00:13:07,720
of the graph that are useful to them but

362
00:13:05,860 --> 00:13:11,560
we still need a place to store these

363
00:13:07,720 --> 00:13:15,010
encrypted data stations a bulk chain

364
00:13:11,560 --> 00:13:16,390
very nearly works our initial work did

365
00:13:15,010 --> 00:13:18,580
use a blockchain and we published some

366
00:13:16,390 --> 00:13:20,380
stuff on that it has cryptographically

367
00:13:18,580 --> 00:13:21,940
proven integrity you can store the whole

368
00:13:20,380 --> 00:13:23,740
global graph there people can't tamper

369
00:13:21,940 --> 00:13:25,600
with the graph or remove pieces with of

370
00:13:23,740 --> 00:13:28,720
it and block chains don't really have

371
00:13:25,600 --> 00:13:30,610
any central authorities but it doesn't

372
00:13:28,720 --> 00:13:32,770
scale particularly well if you're trying

373
00:13:30,610 --> 00:13:34,570
to build an authorization system that

374
00:13:32,770 --> 00:13:36,160
sort of has this single graph and

375
00:13:34,570 --> 00:13:37,900
multiple parties are interacting with it

376
00:13:36,160 --> 00:13:39,130
it needs to be able to scale to at least

377
00:13:37,900 --> 00:13:40,750
the load that current authorization

378
00:13:39,130 --> 00:13:41,740
systems are able to handle and

379
00:13:40,750 --> 00:13:43,960
blockchains

380
00:13:41,740 --> 00:13:46,180
don't really go past a few tens of

381
00:13:43,960 --> 00:13:47,620
transactions per second especially if

382
00:13:46,180 --> 00:13:48,849
the transactions are large they're not

383
00:13:47,620 --> 00:13:50,500
financial transactions but they're

384
00:13:48,850 --> 00:13:53,530
storing objects it may be a hundred

385
00:13:50,500 --> 00:13:56,260
kilobytes so we developed this

386
00:13:53,530 --> 00:13:58,180
unequivocal log derived map which is

387
00:13:56,260 --> 00:14:00,160
designed to provide similar guarantees

388
00:13:58,180 --> 00:14:02,229
to a blockchain when you're only storing

389
00:14:00,160 --> 00:14:03,640
objects so it can't do smart contract

390
00:14:02,230 --> 00:14:05,350
execution and it doesn't do financial

391
00:14:03,640 --> 00:14:07,060
transactions but if you're only storing

392
00:14:05,350 --> 00:14:08,650
objects it can get you similar

393
00:14:07,060 --> 00:14:11,469
guarantees to a blockchain

394
00:14:08,650 --> 00:14:13,270
it's a horizontally scalable public

395
00:14:11,470 --> 00:14:15,310
ledger with cryptographic integrity

396
00:14:13,270 --> 00:14:16,840
proofs and it's similar to something

397
00:14:15,310 --> 00:14:18,160
like certificate transparency or key

398
00:14:16,840 --> 00:14:20,860
transparency that you may be familiar

399
00:14:18,160 --> 00:14:22,600
with except that it supports a proof of

400
00:14:20,860 --> 00:14:25,390
non-existence which allows for

401
00:14:22,600 --> 00:14:27,790
revocation it also has very efficient

402
00:14:25,390 --> 00:14:29,500
auditing clients only rarely communicate

403
00:14:27,790 --> 00:14:31,390
with auditors and the auditing load-in

404
00:14:29,500 --> 00:14:33,550
in total scales with the number of

405
00:14:31,390 --> 00:14:35,199
additions to storage not the size of the

406
00:14:33,550 --> 00:14:38,439
storage as you may find in key

407
00:14:35,200 --> 00:14:40,090
transparency and I'll only be able to

408
00:14:38,440 --> 00:14:41,230
give a very high-level overview here you

409
00:14:40,090 --> 00:14:43,150
can go and look in the paper for more

410
00:14:41,230 --> 00:14:44,830
information so you have some storage

411
00:14:43,150 --> 00:14:46,240
servers and you have clients interacting

412
00:14:44,830 --> 00:14:48,790
with them to discover the portions of

413
00:14:46,240 --> 00:14:49,330
the graph that that they need to form

414
00:14:48,790 --> 00:14:52,240
proofs

415
00:14:49,330 --> 00:14:54,190
there are also some auditors which speak

416
00:14:52,240 --> 00:14:55,570
to the servers and are going to be doing

417
00:14:54,190 --> 00:14:58,390
something in order to to check that

418
00:14:55,570 --> 00:14:59,980
those servers are intact and are

419
00:14:58,390 --> 00:15:02,050
maintaining integrity clients and

420
00:14:59,980 --> 00:15:03,730
auditors speak to sort of random subsets

421
00:15:02,050 --> 00:15:05,949
of the total set of storage servers that

422
00:15:03,730 --> 00:15:08,200
exist and the storage service themselves

423
00:15:05,950 --> 00:15:10,570
are constructed using three Merkle trees

424
00:15:08,200 --> 00:15:12,310
the first tree is an operation log the

425
00:15:10,570 --> 00:15:14,710
stores things like add an attestation

426
00:15:12,310 --> 00:15:16,599
add an entity or add a revocation and a

427
00:15:14,710 --> 00:15:18,310
local tree log can prove that it is

428
00:15:16,600 --> 00:15:20,980
append only and it can approve it can

429
00:15:18,310 --> 00:15:23,140
prove that values exist within it this

430
00:15:20,980 --> 00:15:25,450
gets then turn into a sparse Merkle tree

431
00:15:23,140 --> 00:15:27,970
map and Merkle tree maps can prove that

432
00:15:25,450 --> 00:15:29,950
values do not exist within them and also

433
00:15:27,970 --> 00:15:31,960
that values exist within them of course

434
00:15:29,950 --> 00:15:34,030
because it's a Merkel tree it has a root

435
00:15:31,960 --> 00:15:35,860
hash and we take this root hash of the

436
00:15:34,030 --> 00:15:38,890
map and we insert it into a third Merkel

437
00:15:35,860 --> 00:15:40,300
tree log and so every version of the map

438
00:15:38,890 --> 00:15:42,490
that was used to satisfy queries is

439
00:15:40,300 --> 00:15:44,319
captured in this log and this final log

440
00:15:42,490 --> 00:15:46,090
as normal can't prove that it is append

441
00:15:44,320 --> 00:15:49,190
only and values exist within it

442
00:15:46,090 --> 00:15:51,320
the auditors connect to the storage

443
00:15:49,190 --> 00:15:52,880
servers and replay the operation log to

444
00:15:51,320 --> 00:15:55,540
construct a replica map and a

445
00:15:52,880 --> 00:15:58,520
corresponding replica map route log and

446
00:15:55,540 --> 00:16:01,520
they they then communicate with the

447
00:15:58,520 --> 00:16:03,079
clients to share the the route of the

448
00:16:01,520 --> 00:16:04,280
mat root log so the clients will send

449
00:16:03,080 --> 00:16:05,690
this to the auditors and the auditors

450
00:16:04,280 --> 00:16:07,670
will compare that with what they have

451
00:16:05,690 --> 00:16:09,230
reconstructed this has two things the

452
00:16:07,670 --> 00:16:10,910
first thing is it ensures the object map

453
00:16:09,230 --> 00:16:12,710
is properly derived from the operation

454
00:16:10,910 --> 00:16:15,079
log so we know that the operation log is

455
00:16:12,710 --> 00:16:17,780
now both append-only and it has an

456
00:16:15,080 --> 00:16:19,100
anything removed on it and we ensure

457
00:16:17,780 --> 00:16:20,480
that every client is seeing the same

458
00:16:19,100 --> 00:16:21,980
data structure so there's a family of

459
00:16:20,480 --> 00:16:23,720
attacks where service might give

460
00:16:21,980 --> 00:16:25,160
internally consistent views but

461
00:16:23,720 --> 00:16:27,590
different to different clients we

462
00:16:25,160 --> 00:16:29,480
prevent that class of attacks by talking

463
00:16:27,590 --> 00:16:31,310
with the auditors periodically and it

464
00:16:29,480 --> 00:16:35,000
doesn't need to be often it can be daily

465
00:16:31,310 --> 00:16:37,579
or weekly so in summary the unequivocal

466
00:16:35,000 --> 00:16:39,170
log drive map stores encrypted data

467
00:16:37,580 --> 00:16:41,330
stations and entity objects and

468
00:16:39,170 --> 00:16:43,339
revocations and it uses cryptographic

469
00:16:41,330 --> 00:16:45,260
proofs of integrity which force the

470
00:16:43,340 --> 00:16:47,450
server of operators to be honest or

471
00:16:45,260 --> 00:16:48,800
being detected as dishonest much the

472
00:16:47,450 --> 00:16:51,530
same model as certificate transparency

473
00:16:48,800 --> 00:16:52,969
our our auditing however only requires

474
00:16:51,530 --> 00:16:56,000
very infrequent communication between

475
00:16:52,970 --> 00:16:58,040
the clients and the auditors wave is a

476
00:16:56,000 --> 00:16:59,930
fully implemented system it's written in

477
00:16:58,040 --> 00:17:01,969
go there's some crypto that's in C++

478
00:16:59,930 --> 00:17:03,680
we've used various versions of it over

479
00:17:01,970 --> 00:17:05,180
the course of three years securing over

480
00:17:03,680 --> 00:17:08,060
200 devices and their associated

481
00:17:05,180 --> 00:17:10,550
services in 20 buildings across multiple

482
00:17:08,060 --> 00:17:12,260
organizations and multiple namespaces so

483
00:17:10,550 --> 00:17:14,240
we've had a lot of experience with that

484
00:17:12,260 --> 00:17:15,920
and and the challenges that arise when

485
00:17:14,240 --> 00:17:18,829
trying to secure that kind of that kind

486
00:17:15,920 --> 00:17:20,390
of workload and it's pretty fast the

487
00:17:18,829 --> 00:17:22,040
graph changing operations we use sort of

488
00:17:20,390 --> 00:17:24,079
grant permissions or change the graph

489
00:17:22,040 --> 00:17:26,899
are very fast by UI standards granting

490
00:17:24,079 --> 00:17:28,310
permissions takes 45 milliseconds which

491
00:17:26,900 --> 00:17:30,770
is about the length of a perceivable

492
00:17:28,310 --> 00:17:32,510
mouse-click for a user and then the hot

493
00:17:30,770 --> 00:17:34,370
path operations like proof building and

494
00:17:32,510 --> 00:17:36,080
verifications are very fast in our

495
00:17:34,370 --> 00:17:38,540
experience we find that most proofs are

496
00:17:36,080 --> 00:17:40,129
less than five at two stations long and

497
00:17:38,540 --> 00:17:41,690
we find that proof building is less than

498
00:17:40,130 --> 00:17:42,830
fifteen milliseconds and verifying that

499
00:17:41,690 --> 00:17:44,630
proof text less than eight milliseconds

500
00:17:42,830 --> 00:17:45,470
so it's very compatible with existing

501
00:17:44,630 --> 00:17:47,780
systems

502
00:17:45,470 --> 00:17:49,880
so in conclusion wave is a decentralized

503
00:17:47,780 --> 00:17:51,860
authorization system that uses that

504
00:17:49,880 --> 00:17:54,200
office transitive delegation stores the

505
00:17:51,860 --> 00:17:55,639
graph and global storage and encrypts

506
00:17:54,200 --> 00:17:57,020
these at the stations hiding the graph

507
00:17:55,640 --> 00:17:59,150
and it can be used in place in most

508
00:17:57,020 --> 00:17:59,940
traditional authorization systems thank

509
00:17:59,150 --> 00:18:08,100
you

510
00:17:59,940 --> 00:18:10,350
thank you question well I actually thank

511
00:18:08,100 --> 00:18:12,179
you we've been looking for this for a

512
00:18:10,350 --> 00:18:15,240
long time as the original author of

513
00:18:12,180 --> 00:18:18,600
Radiesse and I was involved in spooky

514
00:18:15,240 --> 00:18:22,050
and have you taken a look at how this

515
00:18:18,600 --> 00:18:25,709
could be to available to improve DNS

516
00:18:22,050 --> 00:18:28,350
sack all of these in one you know an

517
00:18:25,710 --> 00:18:32,970
application this is could be widespread

518
00:18:28,350 --> 00:18:35,070
use yeah thank you yeah we do see that

519
00:18:32,970 --> 00:18:37,860
there are sort of many use cases that

520
00:18:35,070 --> 00:18:39,179
you could drop this into many places

521
00:18:37,860 --> 00:18:40,379
where people have stuck a traditional

522
00:18:39,180 --> 00:18:42,690
ization server that you can drop this

523
00:18:40,380 --> 00:18:46,140
into and you gain a bunch of useful

524
00:18:42,690 --> 00:18:48,150
features from it yeah but you haven't

525
00:18:46,140 --> 00:18:50,820
actually looked at expanding your field

526
00:18:48,150 --> 00:18:52,410
yet no so we've actually used this in a

527
00:18:50,820 --> 00:18:53,730
bunch of different places I used the IOT

528
00:18:52,410 --> 00:18:54,720
example running through because it's

529
00:18:53,730 --> 00:18:57,600
quite challenging you cross

530
00:18:54,720 --> 00:18:59,640
administrative domains but we've used

531
00:18:57,600 --> 00:19:01,439
this to secure sort of G RPC api's on

532
00:18:59,640 --> 00:19:03,000
Web Services and we've used this in many

533
00:19:01,440 --> 00:19:05,250
places that you've that would you

534
00:19:03,000 --> 00:19:09,930
traditionally does it handle loops well

535
00:19:05,250 --> 00:19:12,750
like if the HVAC also needed to be

536
00:19:09,930 --> 00:19:14,130
responsible to yeah yeah the loops loops

537
00:19:12,750 --> 00:19:16,110
are fine the graph doesn't actually have

538
00:19:14,130 --> 00:19:18,120
to be a dag you can have loops alerts

539
00:19:16,110 --> 00:19:20,040
they end up being not traversed when

540
00:19:18,120 --> 00:19:24,090
you're doing discovery so it doesn't

541
00:19:20,040 --> 00:19:27,030
cause any problems yeah okay thank you

542
00:19:24,090 --> 00:19:29,730
oh you have a question you got a minute

543
00:19:27,030 --> 00:19:31,560
so about the storages are basically

544
00:19:29,730 --> 00:19:35,190
using the miracle trees aren't the

545
00:19:31,560 --> 00:19:36,990
auditors basically the like the central

546
00:19:35,190 --> 00:19:38,790
authority because without the auditors

547
00:19:36,990 --> 00:19:41,430
in place different clients could see

548
00:19:38,790 --> 00:19:43,470
different things yeah so they can be

549
00:19:41,430 --> 00:19:45,810
what we did to ensure that this wasn't

550
00:19:43,470 --> 00:19:47,100
the case is that the the actual contents

551
00:19:45,810 --> 00:19:48,600
of the map are just the hashes of the

552
00:19:47,100 --> 00:19:50,219
object so when you're constructing the

553
00:19:48,600 --> 00:19:51,899
replicas it's actually several orders of

554
00:19:50,220 --> 00:19:54,210
magnitude smaller than the full data

555
00:19:51,900 --> 00:19:55,860
structure so it's very lightweight to be

556
00:19:54,210 --> 00:19:57,480
an auditor anyone can download the

557
00:19:55,860 --> 00:19:59,250
auditing software started to run them up

558
00:19:57,480 --> 00:20:01,110
so we're assuming that there's gonna be

559
00:19:59,250 --> 00:20:05,070
multiple auditors run by different

560
00:20:01,110 --> 00:20:06,580
people who are unlikely to collude okay

561
00:20:05,070 --> 00:20:10,780
thanks a lot

562
00:20:06,580 --> 00:20:10,780
[Applause]

