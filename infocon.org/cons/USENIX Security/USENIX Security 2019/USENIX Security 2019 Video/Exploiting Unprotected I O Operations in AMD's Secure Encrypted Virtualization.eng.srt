1
00:00:10,350 --> 00:00:15,930
hello everyone my name is Mohan Lee I'm

2
00:00:13,530 --> 00:00:18,950
from the Ohio State University

3
00:00:15,930 --> 00:00:22,650
today I'm going to present our paper

4
00:00:18,950 --> 00:00:25,680
exploding unprotected eye operation MD

5
00:00:22,650 --> 00:00:28,168
secure encrypted or visualization this

6
00:00:25,680 --> 00:00:31,079
is a joint work with dr. Chen Lin from

7
00:00:28,169 --> 00:00:33,630
OSU dr. Ian Stirling from University of

8
00:00:31,079 --> 00:00:37,230
San Florida and my other wiser doctorate

9
00:00:33,630 --> 00:00:39,420
in Chandra well traditional cloud

10
00:00:37,230 --> 00:00:42,180
service will always face two problems

11
00:00:39,420 --> 00:00:44,250
one problem is that had poison must

12
00:00:42,180 --> 00:00:47,760
enforce full isolation between Cobb

13
00:00:44,250 --> 00:00:50,040
residence clients however analogical

14
00:00:47,760 --> 00:00:52,949
isolation use page table is usually not

15
00:00:50,040 --> 00:00:56,100
good enough sometimes it may break down

16
00:00:52,950 --> 00:00:58,200
and there are so many very famous at

17
00:00:56,100 --> 00:01:01,980
hack like meltdown and hack specter

18
00:00:58,200 --> 00:01:04,259
attack and another poor instance the

19
00:01:01,980 --> 00:01:07,170
clouding user must have fully trusted

20
00:01:04,259 --> 00:01:09,479
the cloud host because of this many

21
00:01:07,170 --> 00:01:11,520
cloud users worry about hypothesis

22
00:01:09,479 --> 00:01:14,460
stealing their data and morning turd

23
00:01:11,520 --> 00:01:16,500
their behaviors so current clouded

24
00:01:14,460 --> 00:01:20,190
designs not ideal for both the you

25
00:01:16,500 --> 00:01:22,500
society and the cloud hostess I'd based

26
00:01:20,190 --> 00:01:25,020
on those concerned MD combines

27
00:01:22,500 --> 00:01:27,840
traditional cloud service with Hardware

28
00:01:25,020 --> 00:01:30,350
memory encryption and they put forward a

29
00:01:27,840 --> 00:01:33,780
new technology called secure encrypted

30
00:01:30,350 --> 00:01:37,729
virtualization as II we let's look at

31
00:01:33,780 --> 00:01:39,060
how as he handles those problems in AMD

32
00:01:37,729 --> 00:01:42,030
system-on-chip

33
00:01:39,060 --> 00:01:44,580
besides CPU there is another process

34
00:01:42,030 --> 00:01:47,520
called a secure processor which will

35
00:01:44,580 --> 00:01:50,729
manage some IES keys and handle sua

36
00:01:47,520 --> 00:01:53,009
api's there is another unit called

37
00:01:50,729 --> 00:01:55,490
memory controller which will in charge

38
00:01:53,010 --> 00:01:59,010
of AES encryption in the decryption

39
00:01:55,490 --> 00:02:02,070
for software level the hypervisor will

40
00:01:59,010 --> 00:02:04,020
still need to host the guest VMs well at

41
00:02:02,070 --> 00:02:06,630
the same time it'll need to call

42
00:02:04,020 --> 00:02:09,508
different SEO a ps4 we imagine

43
00:02:06,630 --> 00:02:12,120
management there are also some slight

44
00:02:09,508 --> 00:02:14,879
change in guest OS kernel to fit ICU

45
00:02:12,120 --> 00:02:17,400
environments like choosing which memory

46
00:02:14,879 --> 00:02:21,480
region to be encrypted using its own

47
00:02:17,400 --> 00:02:24,030
caste the page table with the help of se

48
00:02:21,480 --> 00:02:27,450
way all data in random assess

49
00:02:24,030 --> 00:02:29,790
is a es encrypted in default in both

50
00:02:27,450 --> 00:02:33,030
hypervisor and the guest OEMs have their

51
00:02:29,790 --> 00:02:35,819
own and unique AES keys and this case

52
00:02:33,030 --> 00:02:39,360
will never be exposed to hypo esocast

53
00:02:35,819 --> 00:02:43,109
Who I am more details when data is

54
00:02:39,360 --> 00:02:46,140
stolen cache in CPU those cache attacked

55
00:02:43,110 --> 00:02:49,730
with their ID the suppose the guest VM

56
00:02:46,140 --> 00:02:53,040
or host cannot assess other schedule I

57
00:02:49,730 --> 00:02:55,049
in random access memory data are

58
00:02:53,040 --> 00:02:57,720
encrypted with different keys

59
00:02:55,050 --> 00:02:59,700
so when guess we am rich data from

60
00:02:57,720 --> 00:03:02,940
memory to cache cache will be

61
00:02:59,700 --> 00:03:05,220
automatically decrypted by a yes engine

62
00:03:02,940 --> 00:03:07,560
and when gas to try to write data to

63
00:03:05,220 --> 00:03:10,680
memory data will be automatically

64
00:03:07,560 --> 00:03:13,200
encrypted so both the holster and the

65
00:03:10,680 --> 00:03:15,269
malicious we end who try to assess

66
00:03:13,200 --> 00:03:17,760
other's memory region will only get

67
00:03:15,269 --> 00:03:22,440
useless data because they are key are

68
00:03:17,760 --> 00:03:24,569
different this su is design it can

69
00:03:22,440 --> 00:03:27,930
protect the different kinds of attacks

70
00:03:24,569 --> 00:03:31,708
like some physical cells attacks and as

71
00:03:27,930 --> 00:03:35,100
an administrator assess attacks so as

72
00:03:31,709 --> 00:03:37,620
you will provide way to isolate guest VM

73
00:03:35,100 --> 00:03:40,530
or container from Malaysia's tenants and

74
00:03:37,620 --> 00:03:44,130
it can also help protect against owner

75
00:03:40,530 --> 00:03:46,709
from malicious hypervisor which is able

76
00:03:44,130 --> 00:03:51,000
to convince those customers there we M

77
00:03:46,709 --> 00:03:53,850
are safe in the cloud more it is very

78
00:03:51,000 --> 00:03:55,950
convenient for guests of owner to use as

79
00:03:53,850 --> 00:04:00,200
the races there's no need to change

80
00:03:55,950 --> 00:04:00,200
their own software or existing code

81
00:04:00,530 --> 00:04:06,780
there is an additional technique detail

82
00:04:03,900 --> 00:04:09,440
of se which is related to our work that

83
00:04:06,780 --> 00:04:12,630
is the AES algorithm used by Cu II

84
00:04:09,440 --> 00:04:13,739
because the memories assess the randomly

85
00:04:12,630 --> 00:04:16,769
as you we use

86
00:04:13,739 --> 00:04:19,530
ECB mode and additional physical address

87
00:04:16,769 --> 00:04:22,200
based at wig function here so when the

88
00:04:19,529 --> 00:04:24,500
AES ng encrypts the data the data will

89
00:04:22,200 --> 00:04:28,020
first be it was always the twig function

90
00:04:24,500 --> 00:04:29,700
or the twig function can be easily

91
00:04:28,020 --> 00:04:32,280
reversed engineered

92
00:04:29,700 --> 00:04:37,260
according to the paper securing quippy

93
00:04:32,280 --> 00:04:39,450
the visualization is unsecure in 2017

94
00:04:37,260 --> 00:04:42,210
that's the end of the background and

95
00:04:39,450 --> 00:04:46,020
let's begin to look at the problem in a

96
00:04:42,210 --> 00:04:48,870
series design so when we look at today

97
00:04:46,020 --> 00:04:52,469
as us design we find that as you we

98
00:04:48,870 --> 00:04:55,110
focus on protecting memory you and some

99
00:04:52,470 --> 00:04:57,900
Paris attack towards se we also only

100
00:04:55,110 --> 00:05:01,680
focus on how to break as you is memory

101
00:04:57,900 --> 00:05:04,500
integrity but when we look at the Gaston

102
00:05:01,680 --> 00:05:09,030
Williams other components in cloud like

103
00:05:04,500 --> 00:05:11,310
storage i/o Network IO or display IO we

104
00:05:09,030 --> 00:05:13,650
find that those components are on the

105
00:05:11,310 --> 00:05:17,760
host is fully control but there is no

106
00:05:13,650 --> 00:05:21,000
protection from hardware so here comes

107
00:05:17,760 --> 00:05:23,700
the question how do se we handle IO

108
00:05:21,000 --> 00:05:27,690
request from Gaston a.m. and are they

109
00:05:23,700 --> 00:05:30,180
secure enough let's first look at an

110
00:05:27,690 --> 00:05:34,139
example of a disk IO read and request

111
00:05:30,180 --> 00:05:36,750
from Gaston eme SUV the castle we am

112
00:05:34,139 --> 00:05:39,770
will firstly check its own page cache if

113
00:05:36,750 --> 00:05:42,660
that file isn't in its memory yet

114
00:05:39,770 --> 00:05:45,359
then this request will be handled by

115
00:05:42,660 --> 00:05:48,060
hypervisor use clear a.m. and QEMU

116
00:05:45,360 --> 00:05:50,550
structure then the hypervisor will read

117
00:05:48,060 --> 00:05:54,870
the file front disk and the store the

118
00:05:50,550 --> 00:05:57,720
data is on page cache however the thing

119
00:05:54,870 --> 00:06:00,210
host page cache cannot be directly used

120
00:05:57,720 --> 00:06:05,550
by guest win because the data is not

121
00:06:00,210 --> 00:06:07,799
encrypted by we ends AES key yet to

122
00:06:05,550 --> 00:06:10,500
solve this problem because the VM needs

123
00:06:07,800 --> 00:06:15,120
to use a structure called software IO

124
00:06:10,500 --> 00:06:18,060
translation buffer SWI oto be the guest

125
00:06:15,120 --> 00:06:21,330
OS kernel will set the software IO

126
00:06:18,060 --> 00:06:24,389
translation buffer as unencrypted in the

127
00:06:21,330 --> 00:06:29,010
redzone this memory region to transmit

128
00:06:24,389 --> 00:06:31,350
IO data with hypervisor with the help of

129
00:06:29,010 --> 00:06:33,960
software IO translation buffer the

130
00:06:31,350 --> 00:06:37,320
hypervisor will put data into this area

131
00:06:33,960 --> 00:06:40,580
and then guest OS kernel will perform a

132
00:06:37,320 --> 00:06:42,229
memory copy to copy IO data to its own

133
00:06:40,580 --> 00:06:45,030
gasification

134
00:06:42,229 --> 00:06:48,800
this is how as you a handle I Oh

135
00:06:45,030 --> 00:06:48,799
requests for guest VM

136
00:06:49,199 --> 00:06:54,719
then shoot that's the current IO design

137
00:06:52,319 --> 00:06:57,659
I mean the software IO translation

138
00:06:54,719 --> 00:07:00,689
buffer is not securing SEO environment

139
00:06:57,659 --> 00:07:04,740
which may break the confidentiality in

140
00:07:00,689 --> 00:07:07,020
the integrity of SEO is trust model we

141
00:07:04,740 --> 00:07:09,719
will issue how software IO translation

142
00:07:07,020 --> 00:07:12,568
buffer may break the trust model when

143
00:07:09,719 --> 00:07:14,879
the aisle is not software encrypted or

144
00:07:12,569 --> 00:07:20,580
even when the i/o is under software

145
00:07:14,879 --> 00:07:22,830
encryption we consider the attack here a

146
00:07:20,580 --> 00:07:25,318
privilege of the words array like a

147
00:07:22,830 --> 00:07:28,830
malicious host who can control the cue

148
00:07:25,319 --> 00:07:31,289
em in the QEMU structure so without

149
00:07:28,830 --> 00:07:34,650
software encryption the malicious host

150
00:07:31,289 --> 00:07:38,969
can directly sniff and modify guestlist

151
00:07:34,650 --> 00:07:42,359
io data like here for example during

152
00:07:38,969 --> 00:07:45,150
boot period when guest:we m'lord SSH

153
00:07:42,360 --> 00:07:48,449
binary the malicious host can sniff

154
00:07:45,150 --> 00:07:51,270
called segments of SSH binary and I

155
00:07:48,449 --> 00:07:55,589
change some code before the binary is

156
00:07:51,270 --> 00:07:58,710
actually used by the guest right here we

157
00:07:55,589 --> 00:08:04,740
only change 5 bytes later in SS binary

158
00:07:58,710 --> 00:08:07,888
from eh C - PFF PFF to be eight zero

159
00:08:04,740 --> 00:08:10,110
zero zero zero zero zero zero zero by

160
00:08:07,889 --> 00:08:12,599
doing so the malicious host can bypass

161
00:08:10,110 --> 00:08:15,240
the authentication process in the

162
00:08:12,599 --> 00:08:18,990
directly linking the control of se we

163
00:08:15,240 --> 00:08:21,779
guessed OEM this example is trying to

164
00:08:18,990 --> 00:08:24,419
show that if I don't have any software

165
00:08:21,779 --> 00:08:28,529
encryption the malicious host can be

166
00:08:24,419 --> 00:08:32,338
rather powerful however even with

167
00:08:28,529 --> 00:08:36,299
software encryption like SSL TLS

168
00:08:32,339 --> 00:08:40,890
encryption or for disk encryption the SE

169
00:08:36,299 --> 00:08:43,490
week SVM is still unsecured we will show

170
00:08:40,890 --> 00:08:46,760
that even encrypted IO can produce

171
00:08:43,490 --> 00:08:49,920
decryption and the encryption Oracle

172
00:08:46,760 --> 00:08:52,680
will first talk about attack scenario

173
00:08:49,920 --> 00:08:55,319
the open SSL trees are common software

174
00:08:52,680 --> 00:08:58,760
in cloud William and is widely used by

175
00:08:55,319 --> 00:09:01,260
cloud clients to control their we MS o

176
00:08:58,760 --> 00:09:03,220
transmission between guests owner and we

177
00:09:01,260 --> 00:09:06,910
M is software encrypted

178
00:09:03,220 --> 00:09:10,240
so it is really safe we will then show

179
00:09:06,910 --> 00:09:12,520
how high person make use of SSH packets

180
00:09:10,240 --> 00:09:14,650
to build a decryption Oracle and the

181
00:09:12,520 --> 00:09:18,310
encryption Oracle in the test

182
00:09:14,650 --> 00:09:20,530
break the memory encryption let's first

183
00:09:18,310 --> 00:09:22,750
talk about the decryption Oracle the

184
00:09:20,530 --> 00:09:25,870
decryption Oracle can be further divided

185
00:09:22,750 --> 00:09:28,270
into three steps the first step is Pat

186
00:09:25,870 --> 00:09:30,700
imagine the second steps is separate

187
00:09:28,270 --> 00:09:36,220
taxi replacements and the third step is

188
00:09:30,700 --> 00:09:39,550
packing to recovery the attack steps so

189
00:09:36,220 --> 00:09:42,430
because the SS h handshake protocol is

190
00:09:39,550 --> 00:09:44,800
performed in plaintext the attack who

191
00:09:42,430 --> 00:09:47,770
comes through the hypervisor can act as

192
00:09:44,800 --> 00:09:50,859
a man-in-the-middle attack and recognize

193
00:09:47,770 --> 00:09:54,760
the establish SS channel by its IP

194
00:09:50,860 --> 00:09:57,430
address and the TCP port number once the

195
00:09:54,760 --> 00:09:59,770
secure channel is established there will

196
00:09:57,430 --> 00:10:02,099
be frequent packets interaction between

197
00:09:59,770 --> 00:10:05,230
guess we M and a guest on there

198
00:10:02,100 --> 00:10:07,930
every character guest owner types will

199
00:10:05,230 --> 00:10:11,020
produce a SSH package and the

200
00:10:07,930 --> 00:10:13,989
corresponding acknowledged package so

201
00:10:11,020 --> 00:10:16,390
here high voice the targets all SSH

202
00:10:13,990 --> 00:10:19,120
package and when hypothesis ends there's

203
00:10:16,390 --> 00:10:22,090
an incoming SSH package from guest owner

204
00:10:19,120 --> 00:10:24,520
it will clean all present bits in the

205
00:10:22,090 --> 00:10:27,690
nasty the page table in order to videos

206
00:10:24,520 --> 00:10:30,400
of fine green the paid for side channel

207
00:10:27,690 --> 00:10:32,530
the fine green paid for the side channel

208
00:10:30,400 --> 00:10:35,650
is based on two level page table

209
00:10:32,530 --> 00:10:38,740
structure in se we assuming the figure

210
00:10:35,650 --> 00:10:41,290
you will augustness memories encrypted

211
00:10:38,740 --> 00:10:43,300
as well as guest the page table the

212
00:10:41,290 --> 00:10:45,910
hardware is still in charge of managing

213
00:10:43,300 --> 00:10:48,370
nested page tables which we will

214
00:10:45,910 --> 00:10:50,219
transfer guest a physical address to the

215
00:10:48,370 --> 00:10:53,860
real system physical address

216
00:10:50,220 --> 00:10:56,260
thus if hypo is a clean percent bits in

217
00:10:53,860 --> 00:10:58,600
the nested page table when guess we am

218
00:10:56,260 --> 00:11:01,180
assessed a memory page again there will

219
00:10:58,600 --> 00:11:03,670
be a page fault and the pitfalls will

220
00:11:01,180 --> 00:11:09,010
need to be handled by hypervisor where

221
00:11:03,670 --> 00:11:11,439
we am except at the same time this we MX

222
00:11:09,010 --> 00:11:13,420
set will leak many information such as

223
00:11:11,440 --> 00:11:15,970
that guess the physical address that we

224
00:11:13,420 --> 00:11:17,020
M want to assess the paid for the error

225
00:11:15,970 --> 00:11:19,540
code like

226
00:11:17,020 --> 00:11:22,720
is a white operation or read operation

227
00:11:19,540 --> 00:11:25,060
by recording and analyzing those paid

228
00:11:22,720 --> 00:11:27,130
forward sequence the corresponding time

229
00:11:25,060 --> 00:11:32,020
the hypothesis against on how long ago

230
00:11:27,130 --> 00:11:35,230
so EMS behavior so after receiving the

231
00:11:32,020 --> 00:11:38,069
incoming SST packets the gatholian will

232
00:11:35,230 --> 00:11:42,040
send a acknowledged packet back to the

233
00:11:38,070 --> 00:11:45,010
guest owner internally in the gatholian

234
00:11:42,040 --> 00:11:47,980
when as I said try to send that package

235
00:11:45,010 --> 00:11:50,530
the encrypted data is first copy to the

236
00:11:47,980 --> 00:11:52,720
buffer of the transport layer then the

237
00:11:50,530 --> 00:11:55,120
buffer of the network layer and then the

238
00:11:52,720 --> 00:11:57,730
buffer of the data link layer in each

239
00:11:55,120 --> 00:12:00,850
layer a new packet header are added

240
00:11:57,730 --> 00:12:03,160
eventually the entire network packet is

241
00:12:00,850 --> 00:12:06,940
storing a data structure called escape

242
00:12:03,160 --> 00:12:09,339
offer then the kernel will call function

243
00:12:06,940 --> 00:12:11,560
to transfer the data in escape over to

244
00:12:09,340 --> 00:12:15,310
the device driver where we call it

245
00:12:11,560 --> 00:12:17,290
Pruett above her BP the cool here in

246
00:12:15,310 --> 00:12:19,780
step one pattern matching is to locate

247
00:12:17,290 --> 00:12:24,010
buried buffer use fine green the paid

248
00:12:19,780 --> 00:12:26,439
fold side channel so after locating the

249
00:12:24,010 --> 00:12:29,650
period buffer the attacker will replace

250
00:12:26,440 --> 00:12:31,900
the header of the outgoing SS package

251
00:12:29,650 --> 00:12:35,650
with the secret the attack want to

252
00:12:31,900 --> 00:12:38,770
decrypt let's look at the detail of an

253
00:12:35,650 --> 00:12:41,699
SS packet and why attack are able to

254
00:12:38,770 --> 00:12:44,290
replace the header with the secret a

255
00:12:41,700 --> 00:12:49,360
suing the figure the header of a

256
00:12:44,290 --> 00:12:51,760
register packet contains many metadata

257
00:12:49,360 --> 00:12:54,940
like destination address source address

258
00:12:51,760 --> 00:12:57,280
the network pork tags or flags which

259
00:12:54,940 --> 00:13:00,880
will always remain the same in the left

260
00:12:57,280 --> 00:13:04,089
time of the SSH connection so for one

261
00:13:00,880 --> 00:13:07,450
SSH acknowledged packet which is usually

262
00:13:04,090 --> 00:13:10,120
around 90 bytes so the two bytes of

263
00:13:07,450 --> 00:13:12,880
metadata can be predicted and it can be

264
00:13:10,120 --> 00:13:15,040
temporarily modified by attack and the

265
00:13:12,880 --> 00:13:16,710
attack is also able to recover those

266
00:13:15,040 --> 00:13:19,839
data later

267
00:13:16,710 --> 00:13:22,540
let's go back to the attack steps so

268
00:13:19,840 --> 00:13:25,540
after the attack replaced the header of

269
00:13:22,540 --> 00:13:28,120
the package then because of the setting

270
00:13:25,540 --> 00:13:30,939
of software IO translation buffer the

271
00:13:28,120 --> 00:13:33,910
guest VM will do a memory copy from

272
00:13:30,940 --> 00:13:36,370
a buffer to the shared buffer and the

273
00:13:33,910 --> 00:13:38,890
attack is able to direct to reader the

274
00:13:36,370 --> 00:13:42,130
block in software IO translation buffer

275
00:13:38,890 --> 00:13:45,790
and get a plaintext of the secret using

276
00:13:42,130 --> 00:13:48,340
the trig function after that the tag

277
00:13:45,790 --> 00:13:50,949
will recover the packet with correct

278
00:13:48,340 --> 00:13:54,070
header and the forward of those packets

279
00:13:50,950 --> 00:13:56,560
to client owner the whole process is

280
00:13:54,070 --> 00:13:59,170
efficient and can be done with also

281
00:13:56,560 --> 00:14:03,280
notice of both gasp OEM and a guest

282
00:13:59,170 --> 00:14:06,490
owner let's look at some performance

283
00:14:03,280 --> 00:14:08,439
data for the PET imaging performance the

284
00:14:06,490 --> 00:14:11,320
training and testing where my different

285
00:14:08,440 --> 00:14:14,980
Williams with the same emotion the every

286
00:14:11,320 --> 00:14:18,780
ranger position is about 96% and the

287
00:14:14,980 --> 00:14:21,520
arranger Iroquois around 85% and

288
00:14:18,780 --> 00:14:24,400
according to our experiment the poet

289
00:14:21,520 --> 00:14:27,130
buffer will remind unchanged and reused

290
00:14:24,400 --> 00:14:29,350
for multiple network packets this

291
00:14:27,130 --> 00:14:31,360
greatly helped attack either by

292
00:14:29,350 --> 00:14:34,540
performing pattern matching ones and

293
00:14:31,360 --> 00:14:37,750
reusing the simple buffer directly in

294
00:14:34,540 --> 00:14:41,770
subsequent packets or by improving the

295
00:14:37,750 --> 00:14:44,470
accuracy of the gases we recalled 5000's

296
00:14:41,770 --> 00:14:47,890
acid package with rates ranging from 0.5

297
00:14:44,470 --> 00:14:51,250
to 20 packets per second in the correct

298
00:14:47,890 --> 00:14:55,689
over 200 different buffers in the

299
00:14:51,250 --> 00:14:59,710
experiment 56 per buffers are realz more

300
00:14:55,690 --> 00:15:03,250
than 100 times in 95% pearl offers are

301
00:14:59,710 --> 00:15:05,020
reused more than nine times this table

302
00:15:03,250 --> 00:15:08,100
should performance of an end-to-end

303
00:15:05,020 --> 00:15:12,189
attack in decrypting a memory page of

304
00:15:08,100 --> 00:15:14,650
4096 bytes in 10 PBS setting when used

305
00:15:12,190 --> 00:15:20,310
to blocks to do the decryption it will

306
00:15:14,650 --> 00:15:25,689
only take around 18 seconds to decrypt a

307
00:15:20,310 --> 00:15:28,119
4096 bytes memory page well then the

308
00:15:25,690 --> 00:15:30,339
encryption Oracle the encryption Oracle

309
00:15:28,120 --> 00:15:33,100
is a very similar but reverse the

310
00:15:30,339 --> 00:15:35,170
process for detail of the encryption

311
00:15:33,100 --> 00:15:37,020
Oracle please refer to our paper for

312
00:15:35,170 --> 00:15:41,079
more details

313
00:15:37,020 --> 00:15:42,920
ok the discussion first we want to talk

314
00:15:41,080 --> 00:15:46,670
about the solutions to

315
00:15:42,920 --> 00:15:48,378
protected IO operations in SEO e there

316
00:15:46,670 --> 00:15:51,559
is some hardware solution like

317
00:15:48,379 --> 00:15:54,709
authenticated encryption which we will

318
00:15:51,559 --> 00:15:57,319
talk more detail in the paper but here

319
00:15:54,709 --> 00:16:00,768
we want to talk more about the software

320
00:15:57,319 --> 00:16:04,128
solution to temporarily fix the problem

321
00:16:00,769 --> 00:16:07,790
ohayo operations including network i/o

322
00:16:04,129 --> 00:16:10,730
this and or display i/o must be

323
00:16:07,790 --> 00:16:13,699
forwarded to a trusted server that is

324
00:16:10,730 --> 00:16:15,859
controlled by the way M owner an old

325
00:16:13,699 --> 00:16:18,858
transmission need to be encrypted with

326
00:16:15,859 --> 00:16:23,230
transport key which is only known to the

327
00:16:18,859 --> 00:16:25,579
guest owner and the AMD secure processor

328
00:16:23,230 --> 00:16:27,970
second we want to talk about the

329
00:16:25,579 --> 00:16:31,309
physical address based wig function

330
00:16:27,970 --> 00:16:34,489
according to all contact with se we team

331
00:16:31,309 --> 00:16:38,329
they are planning to use other ones that

332
00:16:34,489 --> 00:16:40,850
wig function in the next release however

333
00:16:38,329 --> 00:16:43,099
because of the software IO translation

334
00:16:40,850 --> 00:16:45,949
buffer there will always be many pairs

335
00:16:43,100 --> 00:16:49,850
of panties in the cyber attacks during

336
00:16:45,949 --> 00:16:52,008
the left time of a guest VM whether we

337
00:16:49,850 --> 00:16:54,529
can reverse engineering the new trick

338
00:16:52,009 --> 00:16:56,110
function or make use of it is still

339
00:16:54,529 --> 00:16:59,869
unknown

340
00:16:56,110 --> 00:17:03,709
the server we want to talk about se we

341
00:16:59,869 --> 00:17:07,250
and sua encrypted estate which is a more

342
00:17:03,709 --> 00:17:09,500
secure version of su e su EES white

343
00:17:07,250 --> 00:17:13,609
paper it will mask some information

344
00:17:09,500 --> 00:17:16,959
during we M exit but because se we yes

345
00:17:13,609 --> 00:17:20,388
is not published yet we have done some

346
00:17:16,959 --> 00:17:23,389
experiments in pet imagine to find the

347
00:17:20,388 --> 00:17:27,500
pattern without some information which

348
00:17:23,388 --> 00:17:30,620
may be must like the offset the paid for

349
00:17:27,500 --> 00:17:33,710
error code and we only use the

350
00:17:30,620 --> 00:17:36,408
sequential page VIN number the site to

351
00:17:33,710 --> 00:17:39,710
build a course bring the paid for side

352
00:17:36,409 --> 00:17:42,139
channel the result shows the area G

353
00:17:39,710 --> 00:17:46,149
position is still 90 percent and the

354
00:17:42,139 --> 00:17:48,769
average recoils around with 70 percent

355
00:17:46,149 --> 00:17:52,729
firstly we want to talk about hardware

356
00:17:48,769 --> 00:17:54,620
encryption supported DMA for intercept

357
00:17:52,730 --> 00:17:56,240
you there will be a similar technology

358
00:17:54,620 --> 00:17:57,949
called the total memory

359
00:17:56,240 --> 00:18:00,950
and the multi key total memory

360
00:17:57,950 --> 00:18:03,110
encryption in their white paper the DMA

361
00:18:00,950 --> 00:18:06,260
will also be supported by hardware

362
00:18:03,110 --> 00:18:08,570
encryption with different keys this may

363
00:18:06,260 --> 00:18:11,810
produce a way to solve the IO problems

364
00:18:08,570 --> 00:18:15,530
in SE way however there's no set future

365
00:18:11,810 --> 00:18:19,030
for AMD CPUs yet here comes the

366
00:18:15,530 --> 00:18:22,220
conclusion it it is the first

367
00:18:19,030 --> 00:18:25,160
exploration of unprotected IO operation

368
00:18:22,220 --> 00:18:28,310
in SE we and we should example of

369
00:18:25,160 --> 00:18:31,420
encryption and decryption Oracle caused

370
00:18:28,310 --> 00:18:34,490
by empathetic unprotected IO operations

371
00:18:31,420 --> 00:18:37,640
and we proposed both hardware and

372
00:18:34,490 --> 00:18:40,670
software account measures and more

373
00:18:37,640 --> 00:18:43,820
importantly we want to make su a clients

374
00:18:40,670 --> 00:18:47,960
aware of a serious limitation which may

375
00:18:43,820 --> 00:18:49,909
help them make better use of su e thanks

376
00:18:47,960 --> 00:18:52,220
for your listening if will help some

377
00:18:49,910 --> 00:19:03,970
questions feel free to contact me with

378
00:18:52,220 --> 00:19:08,140
the email thank you the questioners

379
00:19:03,970 --> 00:19:15,620
questions are I'll go ahead and ask one

380
00:19:08,140 --> 00:19:18,080
so it showed how to do the Oracle with

381
00:19:15,620 --> 00:19:21,080
network packets how would it work would

382
00:19:18,080 --> 00:19:23,480
it be different with disk i/o or is it

383
00:19:21,080 --> 00:19:25,159
just application dependent if they're

384
00:19:23,480 --> 00:19:27,290
always the same thing

385
00:19:25,160 --> 00:19:29,450
oh but we just do not do this experiment

386
00:19:27,290 --> 00:19:31,460
but in theory as always our pollution

387
00:19:29,450 --> 00:19:33,980
they're all vulnerable to this due to

388
00:19:31,460 --> 00:19:36,500
this turbo attack okay and the key step

389
00:19:33,980 --> 00:19:37,880
is being able to do a true man in the

390
00:19:36,500 --> 00:19:40,160
middle where you can fake the second

391
00:19:37,880 --> 00:19:41,900
half well I would say well did the key

392
00:19:40,160 --> 00:19:43,880
studies to identify the buffer the

393
00:19:41,900 --> 00:19:46,160
increase buffer in the gospel we arm and

394
00:19:43,880 --> 00:19:53,080
then we place the content of that buffer

395
00:19:46,160 --> 00:19:56,780
that's the key stuff right - plus key

396
00:19:53,080 --> 00:19:58,820
from a Juna thank you for the talk a

397
00:19:56,780 --> 00:20:01,940
quick question about

398
00:19:58,820 --> 00:20:03,950
and tweakable ciphers or you mentioned

399
00:20:01,940 --> 00:20:07,010
kind of some concerns around being able

400
00:20:03,950 --> 00:20:09,620
to reverse engineer the tweak the tweak

401
00:20:07,010 --> 00:20:11,210
function is usually completely known so

402
00:20:09,620 --> 00:20:13,219
what are exactly the concerns around

403
00:20:11,210 --> 00:20:13,970
that and what's the else right sorry I

404
00:20:13,220 --> 00:20:16,669
did not hear you

405
00:20:13,970 --> 00:20:18,860
so the tweak fund treatable ciphers the

406
00:20:16,669 --> 00:20:21,440
tweak function is usually known there's

407
00:20:18,860 --> 00:20:24,168
no need to hide the function itself what

408
00:20:21,440 --> 00:20:26,840
exactly are the concerns there okay so

409
00:20:24,169 --> 00:20:29,090
about this weak function if the fatigue

410
00:20:26,840 --> 00:20:33,199
function is known that means that the

411
00:20:29,090 --> 00:20:35,659
attacker is about you reconstructs will

412
00:20:33,200 --> 00:20:38,740
final correlation between the ciphertext

413
00:20:35,660 --> 00:20:42,890
and the plan text very easily because

414
00:20:38,740 --> 00:20:44,630
the wrote the tick function will go to

415
00:20:42,890 --> 00:20:47,150
take actually the tick function takes

416
00:20:44,630 --> 00:20:48,980
the input as the physical address right

417
00:20:47,150 --> 00:20:51,049
if the attacker knows the target

418
00:20:48,980 --> 00:20:54,500
physical address the attacker is able to

419
00:20:51,049 --> 00:20:57,049
reconstruct a target ciphertext but in

420
00:20:54,500 --> 00:20:59,720
the new design I believe AMD will try to

421
00:20:57,049 --> 00:21:01,340
hide the trig function so that the

422
00:20:59,720 --> 00:21:03,290
attacker is not able to cast a trig

423
00:21:01,340 --> 00:21:06,830
function to reconstruct the cipher text

424
00:21:03,290 --> 00:21:09,620
at specific location I think this is the

425
00:21:06,830 --> 00:21:13,668
goal of the and this new design but I do

426
00:21:09,620 --> 00:21:15,500
not know the adapted design detail but

427
00:21:13,669 --> 00:21:18,049
and I cannot say whether this is secure

428
00:21:15,500 --> 00:21:20,419
or not but this is one of the

429
00:21:18,049 --> 00:21:24,320
countermeasure against this attack by

430
00:21:20,419 --> 00:21:26,910
hiding the trick function thanks okay

431
00:21:24,320 --> 00:21:31,029
all right let's thank our speaker

432
00:21:26,910 --> 00:21:31,029
[Applause]

