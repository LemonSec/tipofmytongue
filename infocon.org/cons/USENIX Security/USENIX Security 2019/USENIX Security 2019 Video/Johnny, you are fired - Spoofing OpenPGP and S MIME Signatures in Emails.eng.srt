1
00:00:10,320 --> 00:00:15,000
okay so hello everyone um welcome to

2
00:00:13,320 --> 00:00:17,040
this year's email security talk at

3
00:00:15,000 --> 00:00:18,689
USENIX so my name is Ken small am a PhD

4
00:00:17,040 --> 00:00:20,880
student at teacher for Network and data

5
00:00:18,689 --> 00:00:23,099
security at university of rome in

6
00:00:20,880 --> 00:00:24,270
Germany and this is joint work with

7
00:00:23,099 --> 00:00:25,830
University of Applied Sciences and

8
00:00:24,270 --> 00:00:29,460
minister as well as independent

9
00:00:25,830 --> 00:00:32,579
researchers on spoofing PGP and Esmond

10
00:00:29,460 --> 00:00:35,220
signatures in emails let's get straight

11
00:00:32,579 --> 00:00:38,130
into the subject so what you can see

12
00:00:35,220 --> 00:00:39,930
here is a screenshot of a PGP signed

13
00:00:38,130 --> 00:00:41,880
message in roundcube

14
00:00:39,930 --> 00:00:45,450
which is a popular open-source web not

15
00:00:41,880 --> 00:00:48,090
earned take yourself a second and ask

16
00:00:45,450 --> 00:00:50,700
yourself what could possibly go wrong if

17
00:00:48,090 --> 00:00:54,480
we present the results of signature

18
00:00:50,700 --> 00:00:56,940
verification to the user like this so

19
00:00:54,480 --> 00:01:00,419
remember we are an HTML email that my

20
00:00:56,940 --> 00:01:02,519
client and also the signature is shown

21
00:01:00,420 --> 00:01:06,450
in the email body itself which is an

22
00:01:02,520 --> 00:01:08,119
attacker controlled UI element so what

23
00:01:06,450 --> 00:01:11,490
an attacker needs to do is basically

24
00:01:08,119 --> 00:01:14,100
spoof that green bar and into the logo

25
00:01:11,490 --> 00:01:16,530
using HTML you know okay so obviously

26
00:01:14,100 --> 00:01:17,550
that's really lame attack so how did we

27
00:01:16,530 --> 00:01:22,260
make it to use Nix

28
00:01:17,550 --> 00:01:23,908
so we did not only attack some some you

29
00:01:22,260 --> 00:01:26,159
I'm testing some presentation attacks

30
00:01:23,909 --> 00:01:28,950
also we we attack the interpretation and

31
00:01:26,159 --> 00:01:32,659
the parsing of of the underlying data

32
00:01:28,950 --> 00:01:35,400
formats of PGP and s/mime signatures

33
00:01:32,659 --> 00:01:36,780
however I know this is the crypto

34
00:01:35,400 --> 00:01:38,970
session and I know you'll be

35
00:01:36,780 --> 00:01:40,680
disappointed now we're not going to

36
00:01:38,970 --> 00:01:42,630
attack the actual crypto okay we're not

37
00:01:40,680 --> 00:01:44,820
going to affect your large numbers and

38
00:01:42,630 --> 00:01:46,979
whatsoever however it may be an

39
00:01:44,820 --> 00:01:50,809
interesting example of what can go wrong

40
00:01:46,979 --> 00:01:53,549
if developers implement crypto

41
00:01:50,810 --> 00:01:57,090
okay so here's the attacker model so our

42
00:01:53,549 --> 00:01:59,010
attack Eve she can send a spoofed or she

43
00:01:57,090 --> 00:02:01,950
can send an email to the victim and also

44
00:01:59,010 --> 00:02:04,590
she can obviously set arbitrary a header

45
00:02:01,950 --> 00:02:06,990
data so she can of course set the from

46
00:02:04,590 --> 00:02:08,908
header okay so one reason why you want

47
00:02:06,990 --> 00:02:11,640
to use digital signatures in email is to

48
00:02:08,908 --> 00:02:14,819
get send autant a city which Senna demo

49
00:02:11,640 --> 00:02:17,970
doesn't have okay and for some of the

50
00:02:14,819 --> 00:02:21,179
attacks if also may already have

51
00:02:17,970 --> 00:02:23,160
obtained on an orally signed message by

52
00:02:21,180 --> 00:02:25,110
the victim to be impersonated and use it

53
00:02:23,160 --> 00:02:27,030
different context for some of the

54
00:02:25,110 --> 00:02:29,820
attacks she may also have already have

55
00:02:27,030 --> 00:02:34,500
had previous communication with the

56
00:02:29,820 --> 00:02:36,660
victim okay um so basically what we do

57
00:02:34,500 --> 00:02:39,360
is we attack different layers of email

58
00:02:36,660 --> 00:02:41,090
we divide our text into five classes

59
00:02:39,360 --> 00:02:43,560
thoroughly so simple you are addressing

60
00:02:41,090 --> 00:02:45,500
targeting how the results of signature

61
00:02:43,560 --> 00:02:48,810
verification are presented to the user

62
00:02:45,500 --> 00:02:51,060
also be targeted the missing binding of

63
00:02:48,810 --> 00:02:53,880
designers identity to the sender address

64
00:02:51,060 --> 00:02:55,560
derived from the email header we are

65
00:02:53,880 --> 00:02:57,660
some interesting man rapping attacks

66
00:02:55,560 --> 00:03:00,240
very attacked the body of the actual

67
00:02:57,660 --> 00:03:03,120
email and we have a deeper look at how

68
00:03:00,240 --> 00:03:06,450
canopy G for example processes the PGP

69
00:03:03,120 --> 00:03:10,470
signature format as well as CMS which is

70
00:03:06,450 --> 00:03:12,179
the container format is by Earthman okay

71
00:03:10,470 --> 00:03:14,910
let me give some examples for each class

72
00:03:12,180 --> 00:03:16,260
of attacks so we have first of all of

73
00:03:14,910 --> 00:03:18,840
course the first three attacks there

74
00:03:16,260 --> 00:03:21,060
work at the target PGP and s/mime and

75
00:03:18,840 --> 00:03:23,730
and the last two are specific for for

76
00:03:21,060 --> 00:03:25,590
PGP or s mom obviously now let me give

77
00:03:23,730 --> 00:03:27,660
you an example for you addressing your

78
00:03:25,590 --> 00:03:30,480
error so that are simple roundcube

79
00:03:27,660 --> 00:03:32,459
examples so what detector can do is you

80
00:03:30,480 --> 00:03:35,310
can look at the source code what 1q does

81
00:03:32,459 --> 00:03:38,190
for example if it wants to inject HTML

82
00:03:35,310 --> 00:03:40,980
to display a valid message copy that

83
00:03:38,190 --> 00:03:43,170
HTML code compose a new message with the

84
00:03:40,980 --> 00:03:46,350
HTML code but change the actual message

85
00:03:43,170 --> 00:03:49,140
and therefore easily to be easily spoof

86
00:03:46,350 --> 00:03:51,510
virtually indistinguishable emails okay

87
00:03:49,140 --> 00:03:54,089
that obviously works in the context of

88
00:03:51,510 --> 00:03:55,410
HTML email because a lot of people for

89
00:03:54,090 --> 00:03:57,150
whatever reason they want fancy

90
00:03:55,410 --> 00:03:59,280
formatting in the emails and therefore

91
00:03:57,150 --> 00:04:01,530
you make lines they support HTML CSS and

92
00:03:59,280 --> 00:04:05,100
valid images and so on and unfortunately

93
00:04:01,530 --> 00:04:07,140
a lot of immigrant vendors they display

94
00:04:05,100 --> 00:04:10,200
the results of signature verification in

95
00:04:07,140 --> 00:04:14,850
the email body which is an attacker

96
00:04:10,200 --> 00:04:16,380
controlled UI element okay which is kind

97
00:04:14,850 --> 00:04:18,540
of natural if you want to implement a

98
00:04:16,380 --> 00:04:20,310
third-party PGP plugin and also kind of

99
00:04:18,540 --> 00:04:23,370
intuitive because actually it's the body

100
00:04:20,310 --> 00:04:26,070
that son it's not the header ok the next

101
00:04:23,370 --> 00:04:28,050
class only the the countermeasure that

102
00:04:26,070 --> 00:04:30,690
was applied by for example by enigma

103
00:04:28,050 --> 00:04:33,900
which is to default or PGP plugin for

104
00:04:30,690 --> 00:04:36,569
Thunderbird is to move the security

105
00:04:33,900 --> 00:04:39,568
indicators out of the body

106
00:04:36,569 --> 00:04:42,689
moving up there which yeah looks a bit

107
00:04:39,569 --> 00:04:44,999
Viet but probably should be final next

108
00:04:42,689 --> 00:04:47,189
class of attacks targets the missing a

109
00:04:44,999 --> 00:04:48,539
binding between the signers address and

110
00:04:47,189 --> 00:04:51,719
the sender's address okay

111
00:04:48,539 --> 00:04:54,029
so assume our attacker Eve she would

112
00:04:51,719 --> 00:04:56,308
simply sign an email under her own

113
00:04:54,029 --> 00:04:59,399
identity using her own private key and

114
00:04:56,309 --> 00:05:01,229
then spoof D from address and then

115
00:04:59,399 --> 00:05:03,300
assume the receiving email client would

116
00:05:01,229 --> 00:05:05,669
simply display that's a valid signature

117
00:05:03,300 --> 00:05:06,779
but it wouldn't say signed by whom so

118
00:05:05,669 --> 00:05:09,119
okay so it's super important of course

119
00:05:06,779 --> 00:05:11,550
to know by whom the message was signed

120
00:05:09,119 --> 00:05:14,339
so about half of the email clients we

121
00:05:11,550 --> 00:05:16,529
tested the explicitly show the email

122
00:05:14,339 --> 00:05:18,990
address derived from the signature from

123
00:05:16,529 --> 00:05:21,240
the certificate and then let the user

124
00:05:18,990 --> 00:05:24,300
decide if that's okay or not okay

125
00:05:21,240 --> 00:05:26,369
and the other half they to a different

126
00:05:24,300 --> 00:05:29,789
day share something like well trusted

127
00:05:26,369 --> 00:05:31,740
sender address how do they do that so

128
00:05:29,789 --> 00:05:34,709
let's have a look at the s Malhar see

129
00:05:31,740 --> 00:05:36,509
the s policy states that receiving email

130
00:05:34,709 --> 00:05:38,669
clients say must check that the address

131
00:05:36,509 --> 00:05:41,189
in the from or send the header of an

132
00:05:38,669 --> 00:05:45,029
email matches the image res derived from

133
00:05:41,189 --> 00:05:47,099
the certificate okay yeah fair enough so

134
00:05:45,029 --> 00:05:50,610
if we develop an email client you could

135
00:05:47,099 --> 00:05:52,769
simply check and compare basically if

136
00:05:50,610 --> 00:05:55,490
this our signers address is the same

137
00:05:52,769 --> 00:05:57,629
more than the bonnet problem right easy

138
00:05:55,490 --> 00:05:59,459
unfortunately in practice practice it's

139
00:05:57,629 --> 00:06:02,459
not that easy like there's for example

140
00:05:59,459 --> 00:06:04,919
display names okay so we can only check

141
00:06:02,459 --> 00:06:07,800
if it is contained which makes our recs

142
00:06:04,919 --> 00:06:09,719
much more complicated and also a lot of

143
00:06:07,800 --> 00:06:11,909
email clients they are they tend to show

144
00:06:09,719 --> 00:06:13,680
on its display name okay not DM address

145
00:06:11,909 --> 00:06:15,569
so we can already set this to someone

146
00:06:13,680 --> 00:06:18,990
else we can even set an email address to

147
00:06:15,569 --> 00:06:20,909
the display name from an image lined

148
00:06:18,990 --> 00:06:22,680
shows page to display name and team

149
00:06:20,909 --> 00:06:24,659
address like Outlook dust for example

150
00:06:22,680 --> 00:06:26,189
there are a couple of Unicode tricks or

151
00:06:24,659 --> 00:06:28,949
what about just adding a bunch of new

152
00:06:26,189 --> 00:06:31,259
lines and therefore we are going to cut

153
00:06:28,949 --> 00:06:33,149
the actual email address out of the

154
00:06:31,259 --> 00:06:38,189
display okay this is an email that is

155
00:06:33,149 --> 00:06:42,180
actually signed by Eve and gbg4

156
00:06:38,189 --> 00:06:44,069
outlived idiotic PGP plug-in basically

157
00:06:42,180 --> 00:06:46,110
verifies that the silence address is the

158
00:06:44,069 --> 00:06:48,059
sender's address but actually what is

159
00:06:46,110 --> 00:06:50,070
shown by all talk is only the manager

160
00:06:48,059 --> 00:06:52,650
had worked out come address

161
00:06:50,070 --> 00:06:54,690
okay and there are lots of other header

162
00:06:52,650 --> 00:06:57,000
play tricks like you can add yet another

163
00:06:54,690 --> 00:06:59,610
from header you can add another sender

164
00:06:57,000 --> 00:07:01,620
header and very often the verification

165
00:06:59,610 --> 00:07:02,850
logic of email addresses the comparison

166
00:07:01,620 --> 00:07:04,920
logic is another one then what is

167
00:07:02,850 --> 00:07:06,630
actually displayed basically of all

168
00:07:04,920 --> 00:07:08,700
those clients who did this comparison

169
00:07:06,630 --> 00:07:10,409
only one was back free okay it's it

170
00:07:08,700 --> 00:07:14,460
seems to be super hard to implement that

171
00:07:10,410 --> 00:07:16,290
in a secure way okay so um the main

172
00:07:14,460 --> 00:07:18,419
causes obviously dead functional

173
00:07:16,290 --> 00:07:20,550
features like sin and from address they

174
00:07:18,420 --> 00:07:23,610
have become security irrelevant nowadays

175
00:07:20,550 --> 00:07:25,860
and as a countermeasure of course we can

176
00:07:23,610 --> 00:07:27,540
excuse me show the signers address

177
00:07:25,860 --> 00:07:29,910
somewhere in the UI to the user and

178
00:07:27,540 --> 00:07:33,720
delegated the decision back to the user

179
00:07:29,910 --> 00:07:35,670
which may or may not work okay

180
00:07:33,720 --> 00:07:38,310
um still the next class of attacks is

181
00:07:35,670 --> 00:07:40,440
some I'm wrapping so are we attack the

182
00:07:38,310 --> 00:07:43,920
inner content how does a signed email

183
00:07:40,440 --> 00:07:47,040
look like now this is a signed email

184
00:07:43,920 --> 00:07:50,400
sent by Phil Zimmerman in 2001 of a

185
00:07:47,040 --> 00:07:52,320
public mailing lists we are reusing that

186
00:07:50,400 --> 00:07:54,929
signed message and wrapping our own

187
00:07:52,320 --> 00:07:58,230
content around it we can do that it's

188
00:07:54,930 --> 00:08:00,570
totally valid my mail okay supported by

189
00:07:58,230 --> 00:08:02,760
almost all clients since 20 years but we

190
00:08:00,570 --> 00:08:04,560
have now two parts we have the signed

191
00:08:02,760 --> 00:08:06,960
text by Phil and we have our own parts

192
00:08:04,560 --> 00:08:09,030
and public immigrants like la pampa

193
00:08:06,960 --> 00:08:11,070
at the Apple Melhem and Santa bird they

194
00:08:09,030 --> 00:08:13,349
simply show both parts but they see that

195
00:08:11,070 --> 00:08:15,150
one part is relative signed so let's

196
00:08:13,350 --> 00:08:19,200
just draw a bar for where its signature

197
00:08:15,150 --> 00:08:20,880
okay so it's just reading snicks so all

198
00:08:19,200 --> 00:08:23,250
we need to do now as an attacker we need

199
00:08:20,880 --> 00:08:25,560
to somehow get rid of Phil's text being

200
00:08:23,250 --> 00:08:27,120
displayed okay so what about adding a

201
00:08:25,560 --> 00:08:29,730
bunch of a new lines

202
00:08:27,120 --> 00:08:32,490
okay just cutting it out of the display

203
00:08:29,730 --> 00:08:35,580
what about defining the second part as

204
00:08:32,490 --> 00:08:37,560
an attachment okay it's still post it's

205
00:08:35,580 --> 00:08:39,200
still validated by the verification

206
00:08:37,559 --> 00:08:42,750
logic but it's not displayed anymore

207
00:08:39,200 --> 00:08:46,380
we can also embed the second part we

208
00:08:42,750 --> 00:08:47,820
sent the first part as an image so the

209
00:08:46,380 --> 00:08:49,230
second part is not really an image so

210
00:08:47,820 --> 00:08:51,270
it's not displayed but it's still

211
00:08:49,230 --> 00:08:53,820
verified by the verification logic again

212
00:08:51,270 --> 00:08:55,319
the green power is displayed even so we

213
00:08:53,820 --> 00:08:57,510
get completely rid of Phil's original

214
00:08:55,320 --> 00:09:01,740
text last but not least we can also

215
00:08:57,510 --> 00:09:03,720
simply comment out the second part okay

216
00:09:01,740 --> 00:09:06,060
there's a lot of variance as you can

217
00:09:03,720 --> 00:09:09,120
the main course obviously is that a lot

218
00:09:06,060 --> 00:09:12,869
of email clients they show a valid

219
00:09:09,120 --> 00:09:15,270
signed email because they only have this

220
00:09:12,870 --> 00:09:17,280
one bar even though only a part of the

221
00:09:15,270 --> 00:09:20,310
email was actually signed I think this

222
00:09:17,280 --> 00:09:22,020
is because for valid emails should not

223
00:09:20,310 --> 00:09:24,390
be invalidated and also meaningless

224
00:09:22,020 --> 00:09:26,280
which tend to add some food they often

225
00:09:24,390 --> 00:09:28,230
invalidated message sisters or email

226
00:09:26,280 --> 00:09:30,630
clients got more and more relaxed which

227
00:09:28,230 --> 00:09:32,400
is bad what can you do as a condom

228
00:09:30,630 --> 00:09:34,260
measure you can explicitly show of

229
00:09:32,400 --> 00:09:34,620
course which part is sign and which is

230
00:09:34,260 --> 00:09:36,750
not

231
00:09:34,620 --> 00:09:39,840
I think this is super super hard to

232
00:09:36,750 --> 00:09:41,730
implement securely so also you should

233
00:09:39,840 --> 00:09:43,770
not do this in the email body okay

234
00:09:41,730 --> 00:09:47,130
otherwise your again one order to you i

235
00:09:43,770 --> 00:09:49,110
regressing okay so which recommend using

236
00:09:47,130 --> 00:09:51,540
an all-or-nothing approach so do not

237
00:09:49,110 --> 00:09:53,790
show an email as validly signed

238
00:09:51,540 --> 00:09:57,900
unless the whole email the hormone

239
00:09:53,790 --> 00:10:02,310
structure is actually signed okay

240
00:09:57,900 --> 00:10:06,120
now let's look at the actual signature

241
00:10:02,310 --> 00:10:08,880
data format used by PGP so if you have a

242
00:10:06,120 --> 00:10:11,460
PGP signed a PGP signature it usually

243
00:10:08,880 --> 00:10:13,980
consists internally of a neural data

244
00:10:11,460 --> 00:10:16,590
packet which contains some metadata like

245
00:10:13,980 --> 00:10:18,480
the de format optionally a file name a

246
00:10:16,590 --> 00:10:21,420
timestamp and a lot of other information

247
00:10:18,480 --> 00:10:23,400
and a signature packet which contains on

248
00:10:21,420 --> 00:10:28,349
the fingerprint and the actual signature

249
00:10:23,400 --> 00:10:31,290
data now a lot of email clients do rely

250
00:10:28,350 --> 00:10:33,180
on a new PG to do the actual

251
00:10:31,290 --> 00:10:36,660
verification or kqe which is the

252
00:10:33,180 --> 00:10:38,849
effector standard PGP implementation so

253
00:10:36,660 --> 00:10:41,069
you need to know that creepy G is not

254
00:10:38,850 --> 00:10:43,080
library it's actually in executable

255
00:10:41,070 --> 00:10:45,770
therefore email clients very often the

256
00:10:43,080 --> 00:10:49,620
caulk new PG on the command line

257
00:10:45,770 --> 00:10:52,860
creepy jeepers dead incoming signature

258
00:10:49,620 --> 00:10:54,900
verifies it and then outputs to standard

259
00:10:52,860 --> 00:10:58,200
output on information about the

260
00:10:54,900 --> 00:11:00,959
signature and then in the client plugins

261
00:10:58,200 --> 00:11:03,180
lag in email or CBT tools format there

262
00:11:00,960 --> 00:11:04,890
crap basically the output for certain

263
00:11:03,180 --> 00:11:07,140
strings like good sick and if that

264
00:11:04,890 --> 00:11:09,620
string is contained they display about a

265
00:11:07,140 --> 00:11:13,710
signature what could possibly go wrong

266
00:11:09,620 --> 00:11:16,920
so have a look at the metadata like the

267
00:11:13,710 --> 00:11:19,190
file name so what if we simply in check

268
00:11:16,920 --> 00:11:23,189
something in the file name what if we

269
00:11:19,190 --> 00:11:26,850
called the file name good sick okay and

270
00:11:23,190 --> 00:11:30,300
so this email doesn't even contain any

271
00:11:26,850 --> 00:11:33,260
signature it only contains a little data

272
00:11:30,300 --> 00:11:36,599
packet was a file name and yet it's

273
00:11:33,260 --> 00:11:39,600
reflected by qpg parsed by unique mail

274
00:11:36,600 --> 00:11:42,170
and attribute issuance webmail and then

275
00:11:39,600 --> 00:11:45,750
again a valid signature is displayed

276
00:11:42,170 --> 00:11:48,029
okay so and there is a bunch of other

277
00:11:45,750 --> 00:11:51,209
texts that are related to canoe PG you

278
00:11:48,029 --> 00:11:53,070
can find them in the paper okay

279
00:11:51,209 --> 00:11:56,339
obviously it seems to be super complex

280
00:11:53,070 --> 00:11:58,019
to securely call canoe PG a-- it's not

281
00:11:56,339 --> 00:12:00,060
not super easy for developers to do

282
00:11:58,019 --> 00:12:02,240
there's a lot of attacker controlled

283
00:12:00,060 --> 00:12:04,560
input fields in the PGP data format and

284
00:12:02,240 --> 00:12:06,959
when we tested not all of them were

285
00:12:04,560 --> 00:12:09,510
correctly sanitized also of course

286
00:12:06,959 --> 00:12:12,739
client parcels are bit too relaxed on

287
00:12:09,510 --> 00:12:15,810
when to show a valid signature or not

288
00:12:12,740 --> 00:12:18,690
okay so the last class of attacks is

289
00:12:15,810 --> 00:12:20,699
based on CMS the cryptographic message

290
00:12:18,690 --> 00:12:24,750
syntax it's the container format used by

291
00:12:20,699 --> 00:12:27,630
as mine so there's a lot of edge cases

292
00:12:24,750 --> 00:12:30,000
in in CMS you can find them in a paper

293
00:12:27,630 --> 00:12:33,120
I'm just giving one one example here now

294
00:12:30,000 --> 00:12:35,310
so one of those fields in CMS is the

295
00:12:33,120 --> 00:12:38,779
encapsulated content field which

296
00:12:35,310 --> 00:12:41,399
contains the actual message to be signed

297
00:12:38,779 --> 00:12:43,589
fair enough so this is one of the data

298
00:12:41,399 --> 00:12:45,480
formats of one of the signature formats

299
00:12:43,589 --> 00:12:48,149
supported by as Mamet's or park

300
00:12:45,480 --> 00:12:49,920
signatures now a lot of email clients

301
00:12:48,149 --> 00:12:51,329
that do not support s/mime they cannot

302
00:12:49,920 --> 00:12:54,000
show they cannot display the actual

303
00:12:51,329 --> 00:12:58,199
message so therefore people very often

304
00:12:54,000 --> 00:13:00,779
use to use another format supported by

305
00:12:58,199 --> 00:13:02,939
asthma which is detached signatures in

306
00:13:00,779 --> 00:13:05,310
this case the e content is an empty

307
00:13:02,940 --> 00:13:08,579
string and the actual message to be

308
00:13:05,310 --> 00:13:11,569
signed is in the first part of a multi

309
00:13:08,579 --> 00:13:13,888
prototype message okay we have those two

310
00:13:11,569 --> 00:13:16,079
signature formats in in the as mum

311
00:13:13,889 --> 00:13:18,600
standard clients need to support both of

312
00:13:16,079 --> 00:13:20,638
them now what happens if we combine

313
00:13:18,600 --> 00:13:23,069
those of them okay what happens if we

314
00:13:20,639 --> 00:13:26,880
have captured a message from consumer

315
00:13:23,069 --> 00:13:28,829
man who ever with an e content string

316
00:13:26,880 --> 00:13:30,030
and then we add a detached

317
00:13:28,829 --> 00:13:32,819
signature

318
00:13:30,030 --> 00:13:35,640
on that so the worst thing that could

319
00:13:32,820 --> 00:13:38,490
happen here is that the email client

320
00:13:35,640 --> 00:13:41,310
verification logic actually verifies

321
00:13:38,490 --> 00:13:44,550
against the content in the CMS data

322
00:13:41,310 --> 00:13:48,270
object but displays the outer the outer

323
00:13:44,550 --> 00:13:50,939
are detached a message and actually

324
00:13:48,270 --> 00:13:56,160
that's what iOS mail and Thunderbird

325
00:13:50,940 --> 00:13:57,630
actually do okay so obviously CMS is

326
00:13:56,160 --> 00:13:59,790
super flexible there are a lot of edge

327
00:13:57,630 --> 00:14:01,710
cases and they are not actually

328
00:13:59,790 --> 00:14:03,060
discussed in the security considerations

329
00:14:01,710 --> 00:14:05,820
of the S Memo RCS

330
00:14:03,060 --> 00:14:07,439
so a lot of things can go wrong here if

331
00:14:05,820 --> 00:14:10,290
you're a developer of my client if

332
00:14:07,440 --> 00:14:15,060
you're in doubt do not display any email

333
00:14:10,290 --> 00:14:17,550
as as well designed okay so now the

334
00:14:15,060 --> 00:14:19,680
Araneta dos attacks on 25 popular email

335
00:14:17,550 --> 00:14:22,380
clients basically every client where

336
00:14:19,680 --> 00:14:24,810
support for either PG PE or asthma is

337
00:14:22,380 --> 00:14:26,460
available and for a lot of times we

338
00:14:24,810 --> 00:14:29,699
already get something we call perfect

339
00:14:26,460 --> 00:14:31,050
forgery meaning that the spoofed

340
00:14:29,700 --> 00:14:34,230
messaging is visually indistinguishable

341
00:14:31,050 --> 00:14:35,699
from from a real one and as you can see

342
00:14:34,230 --> 00:14:38,790
they're there multiple forgeries for

343
00:14:35,700 --> 00:14:41,910
their major clients and therefore some

344
00:14:38,790 --> 00:14:43,860
email clients we could spoof signatures

345
00:14:41,910 --> 00:14:45,689
but we could not prove them on all

346
00:14:43,860 --> 00:14:47,310
layers of the UI so if the user clicks

347
00:14:45,690 --> 00:14:49,350
on the details email you will see that

348
00:14:47,310 --> 00:14:52,520
maybe this message is actually signed by

349
00:14:49,350 --> 00:14:55,320
Eve and not by the manager or whatever

350
00:14:52,520 --> 00:14:57,930
so this is still of course kind of

351
00:14:55,320 --> 00:14:59,880
vulnerable okay this is not good and

352
00:14:57,930 --> 00:15:02,729
then for some email clients we could not

353
00:14:59,880 --> 00:15:05,160
generate pixel identical copies in our

354
00:15:02,730 --> 00:15:07,710
forgeries or we have we could not Forge

355
00:15:05,160 --> 00:15:11,610
all UI elements okay so for example

356
00:15:07,710 --> 00:15:14,490
simply you are addressing in an email in

357
00:15:11,610 --> 00:15:17,730
Thunderbird we cannot actually Forge

358
00:15:14,490 --> 00:15:20,790
those UI elements so we do not classify

359
00:15:17,730 --> 00:15:22,680
those week four trees as vulnerable but

360
00:15:20,790 --> 00:15:27,390
it's obvious that it's not perfectly

361
00:15:22,680 --> 00:15:31,050
okay okay so uh last night so let me

362
00:15:27,390 --> 00:15:33,870
come to a conclusion so we finally were

363
00:15:31,050 --> 00:15:36,990
able to forge signatures meaning perfect

364
00:15:33,870 --> 00:15:39,960
or partial forgery on 70% of t-tests

365
00:15:36,990 --> 00:15:42,320
oedema clients among them major clients

366
00:15:39,960 --> 00:15:45,829
like Outlook Apple Mail Thunderbird

367
00:15:42,320 --> 00:15:50,149
and there is PGP and s/mime they're

368
00:15:45,829 --> 00:15:51,920
equally affected so we we targeted the

369
00:15:50,149 --> 00:15:55,250
underlying data formats the signature

370
00:15:51,920 --> 00:15:57,769
formats of PGP and Asthma but also a lot

371
00:15:55,250 --> 00:16:00,709
of standard email features like mine

372
00:15:57,769 --> 00:16:03,620
mail ok in like HTML email like be

373
00:16:00,709 --> 00:16:05,029
missing the missing binding of designers

374
00:16:03,620 --> 00:16:07,399
address to the sender's address and so

375
00:16:05,029 --> 00:16:10,009
on which kind of brings me to the final

376
00:16:07,399 --> 00:16:12,680
question is it even possible to build

377
00:16:10,009 --> 00:16:15,339
security on top of email I think this is

378
00:16:12,680 --> 00:16:18,199
really really super super challenging

379
00:16:15,339 --> 00:16:19,699
okay so we reported all this issues to

380
00:16:18,199 --> 00:16:21,469
the affected vendors I hope they have

381
00:16:19,699 --> 00:16:23,630
patched by now and if you want to test

382
00:16:21,470 --> 00:16:25,399
your own email client all the test cases

383
00:16:23,630 --> 00:16:35,000
are available on github

384
00:16:25,399 --> 00:16:36,740
thank you ok we'd love to head take some

385
00:16:35,000 --> 00:16:39,040
questions and please come up to one of

386
00:16:36,740 --> 00:16:39,040
the mics

387
00:16:45,620 --> 00:16:50,310
so do you have any specific client

388
00:16:47,940 --> 00:16:53,580
recommendations in like what should we

389
00:16:50,310 --> 00:16:56,010
be using or or is the third bullet point

390
00:16:53,580 --> 00:16:58,260
just like oh god we should don't know

391
00:16:56,010 --> 00:17:01,830
don't use anything heaven is falling so

392
00:16:58,260 --> 00:17:03,450
on email so well I mean they're specific

393
00:17:01,830 --> 00:17:05,040
on the measures of course for all those

394
00:17:03,450 --> 00:17:06,870
kinds of texts keep it simple keep it

395
00:17:05,040 --> 00:17:09,990
stupid closed meant for example they do

396
00:17:06,869 --> 00:17:13,609
a good job like do not have HTML email

397
00:17:09,990 --> 00:17:16,250
to be very conservative on unvented read

398
00:17:13,609 --> 00:17:19,199
signatures as valid and things like that

399
00:17:16,250 --> 00:17:20,819
still I think as long as things are

400
00:17:19,200 --> 00:17:22,380
based on the email it's it's really

401
00:17:20,819 --> 00:17:24,750
challenging so you need to be really

402
00:17:22,380 --> 00:17:27,420
really careful especially if you want to

403
00:17:24,750 --> 00:17:28,800
be compatible with other users whom may

404
00:17:27,420 --> 00:17:36,630
have certain features and I'm old

405
00:17:28,800 --> 00:17:38,879
thank you I really like the part of the

406
00:17:36,630 --> 00:17:41,670
paper where you said there was some GPG

407
00:17:38,880 --> 00:17:43,170
tax that went past email that's one

408
00:17:41,670 --> 00:17:46,260
morning if you can explain some of the

409
00:17:43,170 --> 00:17:48,860
attacks that affect things like yarn and

410
00:17:46,260 --> 00:17:51,120
other aspects even beyond email clients

411
00:17:48,860 --> 00:17:54,600
well but didn't really have a deep look

412
00:17:51,120 --> 00:17:56,550
actually but of course which is not only

413
00:17:54,600 --> 00:17:59,310
used in the context of email it's also

414
00:17:56,550 --> 00:18:02,250
used in the context of packet managers

415
00:17:59,310 --> 00:18:05,010
okay TBN for example all the packages

416
00:18:02,250 --> 00:18:07,590
are signed with canopy Chee and a lot of

417
00:18:05,010 --> 00:18:12,060
other package minstrels they basically

418
00:18:07,590 --> 00:18:14,040
rely on on canopy Qi and now it's just

419
00:18:12,060 --> 00:18:18,330
all so again it's really hard to do that

420
00:18:14,040 --> 00:18:19,680
in a secure way but yeah that's in the

421
00:18:18,330 --> 00:18:21,629
additional findings in the paper for

422
00:18:19,680 --> 00:18:23,790
supported details please refer to the

423
00:18:21,630 --> 00:18:26,160
paper it's also kind of future work I

424
00:18:23,790 --> 00:18:28,159
think we will still go a bit into that

425
00:18:26,160 --> 00:18:31,580
direction and have a deeper look into

426
00:18:28,160 --> 00:18:31,580
packet managers

427
00:18:35,890 --> 00:18:39,480
alright let's give our speaker another

428
00:18:37,910 --> 00:18:43,019
round of applause and thank you

429
00:18:39,480 --> 00:18:43,019
[Applause]

