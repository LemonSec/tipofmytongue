1
00:00:10,690 --> 00:00:16,030
thank you for being here despite this

2
00:00:13,210 --> 00:00:20,140
being the last but hopefully not least

3
00:00:16,030 --> 00:00:20,619
talk of the day so I'm Moritz and not

4
00:00:20,140 --> 00:00:22,779
him

5
00:00:20,619 --> 00:00:25,770
and I'll be presenting kumoi

6
00:00:22,779 --> 00:00:29,200
synthesizing structure while fasting so

7
00:00:25,770 --> 00:00:32,500
for this talk we have one overarching

8
00:00:29,200 --> 00:00:35,050
goal and that is the one of finding bugs

9
00:00:32,500 --> 00:00:38,019
in programs you can see here and

10
00:00:35,050 --> 00:00:40,720
programs that expect the input to be of

11
00:00:38,020 --> 00:00:44,440
a very specific structure right we have

12
00:00:40,720 --> 00:00:46,839
a few interpreters a compiler I mean the

13
00:00:44,440 --> 00:00:51,129
input must have a very specific

14
00:00:46,840 --> 00:00:52,870
structure so we own the passing track I

15
00:00:51,130 --> 00:00:56,890
mean what do you expect we are going to

16
00:00:52,870 --> 00:00:58,690
use passing to hit that in a first may

17
00:00:56,890 --> 00:01:01,510
be somewhat naive attempt we could be

18
00:00:58,690 --> 00:01:03,610
using flying passing so basically we

19
00:01:01,510 --> 00:01:07,060
just feed some input to the program and

20
00:01:03,610 --> 00:01:10,869
monitor the runtime behavior right now

21
00:01:07,060 --> 00:01:13,540
we can consider an abstract view of some

22
00:01:10,869 --> 00:01:17,439
arbitrary program or rather its state

23
00:01:13,540 --> 00:01:19,869
space so in the dark shaded areas in a

24
00:01:17,439 --> 00:01:22,630
dark gray you can see interesting areas

25
00:01:19,869 --> 00:01:25,479
so an interesting area is for us the

26
00:01:22,630 --> 00:01:27,280
stuff that is deep beneath the surface

27
00:01:25,479 --> 00:01:29,619
of the program but the interesting logic

28
00:01:27,280 --> 00:01:32,590
is happening by the uninteresting area

29
00:01:29,619 --> 00:01:35,829
in white might be some girly state so

30
00:01:32,590 --> 00:01:39,520
before some check and as you can be for

31
00:01:35,829 --> 00:01:43,839
blind passing on we are hitting read a

32
00:01:39,520 --> 00:01:46,469
random I mean like the like point is the

33
00:01:43,840 --> 00:01:49,600
seed at the small axis around them

34
00:01:46,469 --> 00:01:51,009
mutations so we are moving but we are

35
00:01:49,600 --> 00:01:54,969
not really moving anywhere

36
00:01:51,009 --> 00:01:56,829
apart from those inputs I mean the

37
00:01:54,969 --> 00:01:59,288
logical question is obviously can we do

38
00:01:56,829 --> 00:02:02,109
better and I guess I'm not spoiling

39
00:01:59,289 --> 00:02:04,779
anyone in here when saying yeah coverage

40
00:02:02,109 --> 00:02:07,359
caddy passing will help us so we add

41
00:02:04,779 --> 00:02:11,079
program instrumentation to the equation

42
00:02:07,359 --> 00:02:13,120
basically we instrument the program with

43
00:02:11,080 --> 00:02:15,730
the goal of having a feedback path so

44
00:02:13,120 --> 00:02:19,480
that we know which coverage is achieved

45
00:02:15,730 --> 00:02:22,000
by a single input so for each input we

46
00:02:19,480 --> 00:02:23,970
can see whether it chief new coverage it

47
00:02:22,000 --> 00:02:25,950
found something new to see interest

48
00:02:23,970 --> 00:02:27,900
that we didn't see before and if that is

49
00:02:25,950 --> 00:02:31,230
the case we want to keep that input

50
00:02:27,900 --> 00:02:33,510
however if we buy some mutation create

51
00:02:31,230 --> 00:02:35,070
another input that achieves exactly the

52
00:02:33,510 --> 00:02:37,530
same coverage we are not interested in

53
00:02:35,070 --> 00:02:39,329
that one so we'll discard this one so

54
00:02:37,530 --> 00:02:41,880
that's basically coverage at the passing

55
00:02:39,330 --> 00:02:44,280
a used mutation in here so let's take a

56
00:02:41,880 --> 00:02:45,390
quick look at the type of mutations we

57
00:02:44,280 --> 00:02:50,310
are talking about here

58
00:02:45,390 --> 00:02:51,809
so we are talking about bit flips about

59
00:02:50,310 --> 00:02:54,240
simple arithmetic where we add or

60
00:02:51,810 --> 00:02:56,940
subtract some constants but our mutation

61
00:02:54,240 --> 00:03:00,690
could be the setting of some interesting

62
00:02:56,940 --> 00:03:02,640
well you may we set a byte to zero we

63
00:03:00,690 --> 00:03:05,040
might have a havoc stage where we

64
00:03:02,640 --> 00:03:08,880
non-deterministically apply various

65
00:03:05,040 --> 00:03:12,870
random mutations or we repeat some input

66
00:03:08,880 --> 00:03:15,540
or also we can splice two inputs

67
00:03:12,870 --> 00:03:18,709
together so these are different mutation

68
00:03:15,540 --> 00:03:22,799
operations however they have all one

69
00:03:18,709 --> 00:03:26,430
property that is well at all of them so

70
00:03:22,800 --> 00:03:28,530
they are only modifying a small part of

71
00:03:26,430 --> 00:03:32,130
the input so they are read a local in

72
00:03:28,530 --> 00:03:35,220
nature and that's why we will refer them

73
00:03:32,130 --> 00:03:40,560
to as small-scale mutations for this

74
00:03:35,220 --> 00:03:42,720
talk these mutations work quite well for

75
00:03:40,560 --> 00:03:45,000
a lot of inputs so we might have a

76
00:03:42,720 --> 00:03:48,680
program expecting an input that looks

77
00:03:45,000 --> 00:03:53,250
like this one numbers byte whatever and

78
00:03:48,680 --> 00:03:55,920
if we apply our mutation here it might

79
00:03:53,250 --> 00:03:59,100
look like this and I guess it's still

80
00:03:55,920 --> 00:04:02,100
valid right it looks good for us so back

81
00:03:59,100 --> 00:04:05,340
to our abstract view these coverage

82
00:04:02,100 --> 00:04:08,640
guided mutations allow us to move and to

83
00:04:05,340 --> 00:04:10,440
discover other interesting areas in the

84
00:04:08,640 --> 00:04:13,350
state space as you can see we have these

85
00:04:10,440 --> 00:04:15,120
arrows allowing us these errors that are

86
00:04:13,350 --> 00:04:18,269
mutations karaage mutations that allow

87
00:04:15,120 --> 00:04:21,630
us to even cross small gaps between such

88
00:04:18,269 --> 00:04:24,000
interesting areas and we discover quite

89
00:04:21,630 --> 00:04:25,590
a lot here however you notice in the

90
00:04:24,000 --> 00:04:27,720
bottom right hand of the figure there's

91
00:04:25,590 --> 00:04:30,299
a small island that is interesting but

92
00:04:27,720 --> 00:04:31,890
we do miss it still I would claim we

93
00:04:30,300 --> 00:04:35,360
covered quite a lot of the interesting

94
00:04:31,890 --> 00:04:38,509
stuff here right so

95
00:04:35,360 --> 00:04:41,270
the problem here is that not all

96
00:04:38,509 --> 00:04:44,090
programs are equal we might have other

97
00:04:41,270 --> 00:04:46,698
programs that take inputs that look

98
00:04:44,090 --> 00:04:50,270
largely there was something like that

99
00:04:46,699 --> 00:04:54,050
maybe so coincidentally that looks close

100
00:04:50,270 --> 00:04:56,180
to inputs that programs take that we are

101
00:04:54,050 --> 00:05:00,050
interested in if you remember the first

102
00:04:56,180 --> 00:05:02,539
slide and if we do use our small-scale

103
00:05:00,050 --> 00:05:04,550
mutations here so flipping a few bits

104
00:05:02,539 --> 00:05:07,400
adding constant values

105
00:05:04,550 --> 00:05:09,620
it might come close to something like

106
00:05:07,400 --> 00:05:12,109
that but that doesn't look like a good

107
00:05:09,620 --> 00:05:14,090
input right that's not looking really

108
00:05:12,110 --> 00:05:19,270
well it that's not what we want in this

109
00:05:14,090 --> 00:05:23,719
case so what's the takeaway from this um

110
00:05:19,270 --> 00:05:26,539
for this program we need to know the

111
00:05:23,719 --> 00:05:31,550
input structure so that we can apply

112
00:05:26,539 --> 00:05:35,509
reason Abel mutations right so if we hop

113
00:05:31,550 --> 00:05:37,909
back to our abstract representation this

114
00:05:35,509 --> 00:05:40,009
program expecting this different input

115
00:05:37,909 --> 00:05:42,830
might look like that you immediately

116
00:05:40,009 --> 00:05:45,440
notice they are way larger gaps between

117
00:05:42,830 --> 00:05:48,109
the interesting islands right and our

118
00:05:45,440 --> 00:05:50,900
coverage guided small-scale mutations

119
00:05:48,110 --> 00:05:52,310
are not reaching anything meaningful I

120
00:05:50,900 --> 00:05:54,229
mean like there are two islands goes

121
00:05:52,310 --> 00:05:57,139
okay we see that but we miss a lot of

122
00:05:54,229 --> 00:05:59,830
stuff so the question here really is how

123
00:05:57,139 --> 00:06:02,569
do we cross these large gaps and

124
00:05:59,830 --> 00:06:05,870
fortunately for us that's kind of solve

125
00:06:02,569 --> 00:06:10,190
problem people came up with Kurama based

126
00:06:05,870 --> 00:06:13,430
fussing so you can specify a krema

127
00:06:10,190 --> 00:06:16,810
a formal specification and gifted to the

128
00:06:13,430 --> 00:06:20,029
Fassa so that the fossa is capable of

129
00:06:16,810 --> 00:06:24,710
crossing these large gaps because now it

130
00:06:20,029 --> 00:06:27,110
has access to the input structure that's

131
00:06:24,710 --> 00:06:30,620
cool looks good right we hit everything

132
00:06:27,110 --> 00:06:34,580
here so what's the problem why am I

133
00:06:30,620 --> 00:06:37,789
still talking the problem is that such a

134
00:06:34,580 --> 00:06:39,770
krema requires human effort and that's

135
00:06:37,789 --> 00:06:42,550
exactly what we want to avoid right we

136
00:06:39,770 --> 00:06:45,799
want to passing to be a highly automated

137
00:06:42,550 --> 00:06:48,210
process we want to make it accessible to

138
00:06:45,800 --> 00:06:51,240
a lot of people

139
00:06:48,210 --> 00:06:53,489
and we don't want to have a human being

140
00:06:51,240 --> 00:06:58,650
maybe some expert we don't want to

141
00:06:53,490 --> 00:07:05,090
require domain knowledge in this case so

142
00:06:58,650 --> 00:07:08,520
that's where our paper starts our

143
00:07:05,090 --> 00:07:10,799
intention is to have an approach that

144
00:07:08,520 --> 00:07:14,039
crosses these large gaps in the state

145
00:07:10,800 --> 00:07:16,380
space so that applies large-scale

146
00:07:14,039 --> 00:07:20,130
mutations that modify the input to some

147
00:07:16,380 --> 00:07:22,259
large extent without requiring a crema

148
00:07:20,130 --> 00:07:26,460
that is specified by a human being

149
00:07:22,259 --> 00:07:31,199
so basically cream or as our approach is

150
00:07:26,460 --> 00:07:35,400
called learns the structure of the

151
00:07:31,199 --> 00:07:38,449
inputs during it as fussing and with

152
00:07:35,400 --> 00:07:42,810
this learned knowledge we then can apply

153
00:07:38,449 --> 00:07:46,169
large-scale mutations to cross this more

154
00:07:42,810 --> 00:07:51,539
these large gaps and hopefully profit

155
00:07:46,169 --> 00:07:55,830
from that so the question is how do you

156
00:07:51,539 --> 00:08:00,150
learn structure while fasting to this

157
00:07:55,830 --> 00:08:03,960
end we employ a process that we adapt

158
00:08:00,150 --> 00:08:05,638
input generalization so assume an input

159
00:08:03,960 --> 00:08:09,810
that might look like this peopleand a

160
00:08:05,639 --> 00:08:12,150
AAAA and what we want to want to know

161
00:08:09,810 --> 00:08:15,449
about this input is whether it contains

162
00:08:12,150 --> 00:08:20,789
elements parts of it that we can safely

163
00:08:15,449 --> 00:08:24,120
discard to this end we split the input

164
00:08:20,789 --> 00:08:26,430
we have various rules of splitting for

165
00:08:24,120 --> 00:08:29,090
this example we split it into blocks of

166
00:08:26,430 --> 00:08:34,469
two characters might be blocks of four

167
00:08:29,090 --> 00:08:37,439
and then what we try is we try to remove

168
00:08:34,469 --> 00:08:39,779
every input from this block and then

169
00:08:37,440 --> 00:08:42,690
feed the rest to the fossa so let me

170
00:08:39,779 --> 00:08:46,410
walk you through this example we remove

171
00:08:42,690 --> 00:08:51,180
the PP so we end up with having rent a

172
00:08:46,410 --> 00:08:54,170
as the rest then we sent this to the

173
00:08:51,180 --> 00:08:57,359
fossa and look what is the new coverage

174
00:08:54,170 --> 00:08:59,760
achieved by this input and the facet

175
00:08:57,360 --> 00:09:01,800
tells us that is not the same new

176
00:08:59,760 --> 00:09:04,910
coverage that the original in

177
00:09:01,800 --> 00:09:08,040
put achieved this means the PP was

178
00:09:04,910 --> 00:09:11,670
actually relevant to the input so we

179
00:09:08,040 --> 00:09:13,618
cannot remove it intuitively that might

180
00:09:11,670 --> 00:09:16,589
be clear in this example because P print

181
00:09:13,619 --> 00:09:20,910
is a well that function and ruin doesn't

182
00:09:16,589 --> 00:09:24,360
look like right so with that knowledge

183
00:09:20,910 --> 00:09:27,179
gained we do keep the PP we go to the

184
00:09:24,360 --> 00:09:30,119
next element we try removing our I ask

185
00:09:27,179 --> 00:09:33,929
the fossa again and still we need this

186
00:09:30,119 --> 00:09:36,959
element we can continue with MT with the

187
00:09:33,929 --> 00:09:38,910
space and a pass trough it's all the

188
00:09:36,959 --> 00:09:40,859
same we do need to keep them however

189
00:09:38,910 --> 00:09:43,829
when it comes to the a it gets

190
00:09:40,860 --> 00:09:46,949
interesting right as we can see here the

191
00:09:43,829 --> 00:09:50,040
fossa suddenly says this is exactly the

192
00:09:46,949 --> 00:09:52,258
same new coverage as our original input

193
00:09:50,040 --> 00:09:54,299
this means it does not matter what we

194
00:09:52,259 --> 00:09:56,540
put whether we send our original input

195
00:09:54,299 --> 00:09:58,769
in the Faso at this one without a AAA

196
00:09:56,540 --> 00:10:01,290
which is quite cool because we just

197
00:09:58,769 --> 00:10:05,699
learned we do not need this block this

198
00:10:01,290 --> 00:10:08,069
block so we do remove it but you

199
00:10:05,699 --> 00:10:10,618
remember where we removed it and what

200
00:10:08,069 --> 00:10:12,959
looks like there's a missing unicode

201
00:10:10,619 --> 00:10:17,069
character is actually our symbol for our

202
00:10:12,959 --> 00:10:20,309
gap so here we remember that we removed

203
00:10:17,069 --> 00:10:22,670
something okay continuing with the next

204
00:10:20,309 --> 00:10:27,089
block we also can remove the second AAA

205
00:10:22,670 --> 00:10:32,309
obviously and the last apostrophe is

206
00:10:27,089 --> 00:10:34,679
needed again so after merging adjacent

207
00:10:32,309 --> 00:10:40,618
gaps we do end up with something like

208
00:10:34,679 --> 00:10:43,079
that we have P print of some gap so we

209
00:10:40,619 --> 00:10:44,910
learn from this original input that we

210
00:10:43,079 --> 00:10:46,910
can discard everything between the

211
00:10:44,910 --> 00:10:49,490
apostrophes which is marked by the gap

212
00:10:46,910 --> 00:10:53,519
which is quite cool

213
00:10:49,490 --> 00:10:55,490
let me show second example before we see

214
00:10:53,519 --> 00:10:59,129
why this is cool

215
00:10:55,490 --> 00:11:01,439
we might split this input on white

216
00:10:59,129 --> 00:11:05,009
spaces that's trust a difference will we

217
00:11:01,439 --> 00:11:09,299
apply and ask the fossa for every part

218
00:11:05,009 --> 00:11:11,549
again the fossa then helps us learn that

219
00:11:09,299 --> 00:11:15,179
we can discard the white space between

220
00:11:11,549 --> 00:11:15,660
the bracket and the den and we can

221
00:11:15,179 --> 00:11:18,930
actually

222
00:11:15,660 --> 00:11:22,740
discussed the X equals free between the

223
00:11:18,930 --> 00:11:26,219
den and the end so now we have different

224
00:11:22,740 --> 00:11:29,570
inputs generalized inputs and why is

225
00:11:26,220 --> 00:11:32,580
this cool what what can we do with this

226
00:11:29,570 --> 00:11:37,410
intuitively this is cool because now we

227
00:11:32,580 --> 00:11:41,940
can simply pick an input we can select

228
00:11:37,410 --> 00:11:44,699
some arbitrary gap in this input and we

229
00:11:41,940 --> 00:11:49,050
can just insert something and this is a

230
00:11:44,700 --> 00:11:52,920
different input right so what will it

231
00:11:49,050 --> 00:11:56,609
just it we mutated but relied on our

232
00:11:52,920 --> 00:12:00,209
knowledge of the underlying structure so

233
00:11:56,610 --> 00:12:05,370
let me show what the actual mutations we

234
00:12:00,210 --> 00:12:09,000
use are the first mutation operation we

235
00:12:05,370 --> 00:12:12,510
do use is the input extension basically

236
00:12:09,000 --> 00:12:13,790
for two generalized inputs we can

237
00:12:12,510 --> 00:12:16,560
conquer them

238
00:12:13,790 --> 00:12:19,430
there are two possibilities so we can

239
00:12:16,560 --> 00:12:25,260
press F the P print and the x equals by

240
00:12:19,430 --> 00:12:30,359
after it for the other way round so this

241
00:12:25,260 --> 00:12:33,630
notation is inspired by the inside that

242
00:12:30,360 --> 00:12:38,850
highly structured inputs often consists

243
00:12:33,630 --> 00:12:41,010
out of a chain of valid syntactically

244
00:12:38,850 --> 00:12:42,810
correct statement so think of statements

245
00:12:41,010 --> 00:12:48,300
in a C program that are separated by a

246
00:12:42,810 --> 00:12:51,479
semicolon right the next mutation we do

247
00:12:48,300 --> 00:12:55,530
use is the recursive replacement this is

248
00:12:51,480 --> 00:12:58,560
the power horse in our asana and what it

249
00:12:55,530 --> 00:13:01,860
does this we take some input or as we

250
00:12:58,560 --> 00:13:05,189
can see in this slide we might take only

251
00:13:01,860 --> 00:13:07,950
a part of a generalized input we do

252
00:13:05,190 --> 00:13:10,320
extend it because we expect that in

253
00:13:07,950 --> 00:13:13,920
front of and behind of a valid element

254
00:13:10,320 --> 00:13:16,020
we can do put other stuff and yeah then

255
00:13:13,920 --> 00:13:18,740
as you might have guessed we insert

256
00:13:16,020 --> 00:13:21,780
another generalized input or part of it

257
00:13:18,740 --> 00:13:24,720
we continue extending it so that we can

258
00:13:21,780 --> 00:13:26,790
insert even more stuff and yeah we

259
00:13:24,720 --> 00:13:29,699
actually insert more stuff and we can

260
00:13:26,790 --> 00:13:33,599
keep that going actually in our

261
00:13:29,699 --> 00:13:37,829
implementation we use up to 64 of these

262
00:13:33,600 --> 00:13:40,829
steps and well for this example it's

263
00:13:37,829 --> 00:13:43,939
only free leaving us with a new input

264
00:13:40,829 --> 00:13:50,459
that is very different from our original

265
00:13:43,940 --> 00:13:53,370
inputs so the last rotation operation we

266
00:13:50,459 --> 00:13:55,439
do use is the string replacement this

267
00:13:53,370 --> 00:13:59,459
one actually does not require our

268
00:13:55,439 --> 00:14:03,660
generalized inputs but we simply replace

269
00:13:59,459 --> 00:14:08,939
a keyword by another keyword and we

270
00:14:03,660 --> 00:14:11,879
might end up with evil baa instead of

271
00:14:08,939 --> 00:14:14,009
people in a and this will is quite

272
00:14:11,879 --> 00:14:19,399
likely to actually generate a lot of new

273
00:14:14,009 --> 00:14:22,170
coverage right so we have now seen the

274
00:14:19,399 --> 00:14:25,170
different mutation operations we do use

275
00:14:22,170 --> 00:14:29,128
and well the interesting question is

276
00:14:25,170 --> 00:14:32,699
obviously how do they work out so can we

277
00:14:29,129 --> 00:14:36,000
approximate a crema and do better with

278
00:14:32,699 --> 00:14:39,269
our large-scale mutations than the usual

279
00:14:36,000 --> 00:14:42,630
candidates a usual fascist do with their

280
00:14:39,269 --> 00:14:46,620
small-scale mutations and as it turns

281
00:14:42,630 --> 00:14:49,230
out yes we can we do outperform ffq

282
00:14:46,620 --> 00:14:51,750
'some angora on almost all targets that

283
00:14:49,230 --> 00:14:53,130
we have tested as you can see for lower

284
00:14:51,750 --> 00:14:56,130
this is not the case

285
00:14:53,130 --> 00:14:59,130
there's the interesting fact that Lua

286
00:14:56,130 --> 00:15:03,079
does not only accept source code but

287
00:14:59,130 --> 00:15:06,300
also byte code as you might be aware and

288
00:15:03,079 --> 00:15:09,870
that's probably at least we get so the

289
00:15:06,300 --> 00:15:13,439
reason that angora was it I believe

290
00:15:09,870 --> 00:15:14,009
outperforms of despair anyway our large

291
00:15:13,439 --> 00:15:17,880
scale

292
00:15:14,009 --> 00:15:23,029
mutations are effective outperforming

293
00:15:17,880 --> 00:15:27,600
the small scale mutations in most cases

294
00:15:23,029 --> 00:15:30,329
the next interesting question is how do

295
00:15:27,600 --> 00:15:33,480
we fare against a tremor based vasa

296
00:15:30,329 --> 00:15:37,380
right so we are approximating a Croma as

297
00:15:33,480 --> 00:15:39,560
only fair to see how a fossa really

298
00:15:37,380 --> 00:15:44,150
working with a chroma perform

299
00:15:39,560 --> 00:15:47,199
against us and unfortunately from our

300
00:15:44,150 --> 00:15:52,029
point of view the crema based vasa

301
00:15:47,200 --> 00:15:54,890
outperforms us and often by quite a lot

302
00:15:52,029 --> 00:15:57,080
which is not that surprising because the

303
00:15:54,890 --> 00:16:00,080
crema based pasta has access to the

304
00:15:57,080 --> 00:16:02,810
crema from the beginning on right we

305
00:16:00,080 --> 00:16:05,920
only start learning approximating the

306
00:16:02,810 --> 00:16:09,859
crema when the passing process starts

307
00:16:05,920 --> 00:16:12,469
so the crema base fossa outperforms

308
00:16:09,860 --> 00:16:14,660
kumoi often actually that's one case

309
00:16:12,470 --> 00:16:17,300
where this wasn't the case but in a

310
00:16:14,660 --> 00:16:22,219
general case we open form so the

311
00:16:17,300 --> 00:16:27,670
question is is crema of any help when we

312
00:16:22,220 --> 00:16:31,580
do have a crema right and actually it is

313
00:16:27,670 --> 00:16:36,140
what we did is we ran the chroma based

314
00:16:31,580 --> 00:16:39,529
fossa for 24 hours taking the inputs it

315
00:16:36,140 --> 00:16:41,750
found a seed continuum running the crema

316
00:16:39,529 --> 00:16:45,200
best fossa and compared it to primo

317
00:16:41,750 --> 00:16:48,530
so basically we allowed kumoi to access

318
00:16:45,200 --> 00:16:52,339
the indirectly the crema and as you can

319
00:16:48,530 --> 00:16:53,030
see kumoi founds finds more than akama

320
00:16:52,339 --> 00:16:55,700
based vasa

321
00:16:53,030 --> 00:16:59,360
which I consider quite cool to be honest

322
00:16:55,700 --> 00:17:01,910
because we might find elements that are

323
00:16:59,360 --> 00:17:03,470
not covered by the crema or the

324
00:17:01,910 --> 00:17:06,428
implementation may differ from the

325
00:17:03,470 --> 00:17:06,429
specification

326
00:17:08,888 --> 00:17:17,529
let me conclude this introduction to

327
00:17:12,888 --> 00:17:22,729
crema with following we have seen that

328
00:17:17,529 --> 00:17:26,299
passing structured inputs is possible

329
00:17:22,730 --> 00:17:28,459
but small-scale mutations such as a ploy

330
00:17:26,299 --> 00:17:30,700
are employed by common factors such as

331
00:17:28,459 --> 00:17:33,200
AFL are not the best for this task

332
00:17:30,700 --> 00:17:35,539
luckily we have large-scale mutations

333
00:17:33,200 --> 00:17:39,409
from crema based fascist

334
00:17:35,539 --> 00:17:42,590
however the crema must be human-made and

335
00:17:39,409 --> 00:17:44,929
that's what we want to avoid that for we

336
00:17:42,590 --> 00:17:49,730
have created crema where we can learn

337
00:17:44,929 --> 00:17:51,710
the structure of the input and based on

338
00:17:49,730 --> 00:17:56,029
this knowledge can create such

339
00:17:51,710 --> 00:17:58,039
large-scale mutations and yeah actually

340
00:17:56,029 --> 00:18:02,509
this has real-world impact

341
00:17:58,039 --> 00:18:03,860
- we found eleven CBE's so thank you a

342
00:18:02,509 --> 00:18:04,490
lot for your attention ladies and

343
00:18:03,860 --> 00:18:07,809
gentlemen

344
00:18:04,490 --> 00:18:07,809
I'm happy to take any questions

345
00:18:07,810 --> 00:18:16,059
[Applause]

346
00:18:11,729 --> 00:18:18,879
perfect questions hi

347
00:18:16,059 --> 00:18:20,619
so two short questions first for the

348
00:18:18,879 --> 00:18:22,478
keywords for the string replacement

349
00:18:20,619 --> 00:18:27,820
stage did you have any dictionary

350
00:18:22,479 --> 00:18:29,619
involved there yeah so we do aesthetic

351
00:18:27,820 --> 00:18:31,809
strings pass over the binary extracting

352
00:18:29,619 --> 00:18:34,418
the keywords however in our evaluation

353
00:18:31,809 --> 00:18:37,989
every pastor had access to the same

354
00:18:34,419 --> 00:18:41,529
dictionary so we gave AFL and dictionary

355
00:18:37,989 --> 00:18:41,919
to okay and the second question what was

356
00:18:41,529 --> 00:18:45,070
it

357
00:18:41,919 --> 00:18:46,929
oh the tokenization so how did you

358
00:18:45,070 --> 00:18:49,389
determine the optimal length of the

359
00:18:46,929 --> 00:18:52,119
tokens because like ultimately optimal

360
00:18:49,389 --> 00:18:55,208
length would be just one character yeah

361
00:18:52,119 --> 00:19:00,339
so actually we try we try each power of

362
00:18:55,209 --> 00:19:03,219
two starting with the size of 256 going

363
00:19:00,339 --> 00:19:06,549
down to one we try to remove as much as

364
00:19:03,219 --> 00:19:10,269
possible and if that doesn't work out we

365
00:19:06,549 --> 00:19:13,658
try smaller sizes so did you see did you

366
00:19:10,269 --> 00:19:20,349
see the performance impact based on the

367
00:19:13,659 --> 00:19:25,749
length of the token no I I can't say

368
00:19:20,349 --> 00:19:26,908
much more than that is Eric any other

369
00:19:25,749 --> 00:19:36,070
questions

370
00:19:26,909 --> 00:19:40,179
everyone is ready for question so nice I

371
00:19:36,070 --> 00:19:42,428
don't want it to end so quick so again

372
00:19:40,179 --> 00:19:44,950
during the organization do you encounter

373
00:19:42,429 --> 00:19:47,379
cases where you have to modify multiple

374
00:19:44,950 --> 00:19:49,599
parts of the inputs in order to make a

375
00:19:47,379 --> 00:19:52,869
change yeah so that's actually a problem

376
00:19:49,599 --> 00:19:54,729
so think of XML tags right you have the

377
00:19:52,869 --> 00:19:58,359
opening tag and the closing tag right

378
00:19:54,729 --> 00:20:00,549
now this is not properly detected we

379
00:19:58,359 --> 00:20:03,699
assume that can be fixed by some

380
00:20:00,549 --> 00:20:05,440
heuristics however currently we do not

381
00:20:03,700 --> 00:20:07,989
handle this that's a good question thank

382
00:20:05,440 --> 00:20:12,219
you yeah that was also the question I

383
00:20:07,989 --> 00:20:13,929
had and as my backup the like how you

384
00:20:12,219 --> 00:20:17,529
could extend this to do some actual

385
00:20:13,929 --> 00:20:19,389
grammar synthesis that can be maybe not

386
00:20:17,529 --> 00:20:21,729
correct but at least useful for fuzzing

387
00:20:19,389 --> 00:20:23,919
for different kinds of dependencies for

388
00:20:21,729 --> 00:20:25,960
example the if T Nell's clause

389
00:20:23,920 --> 00:20:28,240
you display this kind of similar because

390
00:20:25,960 --> 00:20:30,190
some tokens depend on each other yeah

391
00:20:28,240 --> 00:20:32,710
that's actually hot but we can

392
00:20:30,190 --> 00:20:36,220
heuristically try to remove elements and

393
00:20:32,710 --> 00:20:39,100
come always rely on the new coverage

394
00:20:36,220 --> 00:20:40,990
comparing to see whether we actually can

395
00:20:39,100 --> 00:20:44,169
remove two elements and they belong

396
00:20:40,990 --> 00:20:46,870
together okay cool thank you very much

397
00:20:44,170 --> 00:20:52,000
let's thank all the speakers together

398
00:20:46,870 --> 00:20:52,000
[Applause]

