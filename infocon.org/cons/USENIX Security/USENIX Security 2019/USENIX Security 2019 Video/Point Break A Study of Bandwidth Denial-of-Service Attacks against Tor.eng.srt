1
00:00:10,960 --> 00:00:13,990
so I'm gonna talk about a study of

2
00:00:12,670 --> 00:00:17,290
bandwidth denial of service attacks

3
00:00:13,990 --> 00:00:19,170
against tor I'm Rob Jansen from NRL and

4
00:00:17,290 --> 00:00:21,490
this is joint work with my colleagues

5
00:00:19,170 --> 00:00:25,510
Tavish and mica from Georgetown

6
00:00:21,490 --> 00:00:27,459
University so in this work we explore

7
00:00:25,510 --> 00:00:30,130
the cost and effects of bandwidth denial

8
00:00:27,460 --> 00:00:32,650
of service attacks on tor the most

9
00:00:30,130 --> 00:00:35,519
exciting contribution is for an attack

10
00:00:32,650 --> 00:00:39,670
that costs 3 gigabits per second and

11
00:00:35,520 --> 00:00:42,430
costs anywhere from 140 to $1600

12
00:00:39,670 --> 00:00:45,010
depending how you count we can cause tor

13
00:00:42,430 --> 00:00:48,700
downloads to become 47% slower

14
00:00:45,010 --> 00:00:52,780
across the entire network that's all I

15
00:00:48,700 --> 00:00:54,430
have questions it's good to see you guys

16
00:00:52,780 --> 00:00:58,329
are still awake in this last session of

17
00:00:54,430 --> 00:01:00,820
the conference so anonymous

18
00:00:58,329 --> 00:01:03,160
communication separates identification

19
00:01:00,820 --> 00:01:04,780
from routing this is a system that

20
00:01:03,160 --> 00:01:06,220
provides unlikeable communication

21
00:01:04,780 --> 00:01:10,149
between a client and where they're

22
00:01:06,220 --> 00:01:12,190
visiting on the internet they sits

23
00:01:10,149 --> 00:01:15,040
anonymous communication systems protect

24
00:01:12,190 --> 00:01:16,149
user privacy and safety online tor is

25
00:01:15,040 --> 00:01:19,000
the most popular anonymous communication

26
00:01:16,150 --> 00:01:22,600
system with between 2 and 8 million

27
00:01:19,000 --> 00:01:25,180
daily active users it has 6,500

28
00:01:22,600 --> 00:01:28,408
volunteer relays that transfer a total

29
00:01:25,180 --> 00:01:30,820
of 200 gigabits per second in aggregate

30
00:01:28,409 --> 00:01:32,170
because tor is popular and used by

31
00:01:30,820 --> 00:01:35,919
people all around the world it's been a

32
00:01:32,170 --> 00:01:37,810
target of anonymity attacks there's been

33
00:01:35,920 --> 00:01:39,729
attacks website fingerprinting attacks

34
00:01:37,810 --> 00:01:41,680
traffic correlation attacks and routing

35
00:01:39,729 --> 00:01:43,740
attacks that have been published over

36
00:01:41,680 --> 00:01:47,290
the years and continue to be important

37
00:01:43,740 --> 00:01:49,270
areas of research but these some of

38
00:01:47,290 --> 00:01:52,420
these attacks are complicated and math

39
00:01:49,270 --> 00:01:55,179
is hard and so what I'm interested in

40
00:01:52,420 --> 00:01:57,340
this work is looking at simple simple

41
00:01:55,180 --> 00:02:00,430
denial of service attacks that can also

42
00:01:57,340 --> 00:02:01,960
have a dramatic effect on the network so

43
00:02:00,430 --> 00:02:03,880
our focus in this work is denial of

44
00:02:01,960 --> 00:02:05,860
service we're not the first to look at

45
00:02:03,880 --> 00:02:08,160
denial of service on tour there have

46
00:02:05,860 --> 00:02:12,910
been a variety of studies over the years

47
00:02:08,160 --> 00:02:16,359
in 2007 Borissov @l presented a

48
00:02:12,910 --> 00:02:19,480
selective service refusal attack and in

49
00:02:16,360 --> 00:02:21,669
2014 Gatiss @l presented a resource

50
00:02:19,480 --> 00:02:23,970
exhaustion attack these attacks have a

51
00:02:21,669 --> 00:02:23,970
goal of

52
00:02:24,240 --> 00:02:28,800
causing clients to not be able to access

53
00:02:26,040 --> 00:02:32,310
the network they've been a couple of

54
00:02:28,800 --> 00:02:34,710
studies focusing on CPU a computational

55
00:02:32,310 --> 00:02:39,570
resource exhaustion attacks these

56
00:02:34,710 --> 00:02:41,400
attacks cause tort of conduct CPU

57
00:02:39,570 --> 00:02:44,430
operations cryptographic operations to

58
00:02:41,400 --> 00:02:47,280
keep the CPU busy there was an attack in

59
00:02:44,430 --> 00:02:49,260
2009 called the long path attack where

60
00:02:47,280 --> 00:02:51,600
you would build an infinite length tor

61
00:02:49,260 --> 00:02:56,100
circuit as a means to consume bandwidth

62
00:02:51,600 --> 00:02:58,380
and in 2014 the sniper attack was

63
00:02:56,100 --> 00:03:01,109
presented with the goal of consuming

64
00:02:58,380 --> 00:03:03,060
memory resources and causing a relay

65
00:03:01,110 --> 00:03:05,280
process to be killed by the operating

66
00:03:03,060 --> 00:03:06,710
system in this work we focus on

67
00:03:05,280 --> 00:03:09,060
bandwidth denial of service attacks

68
00:03:06,710 --> 00:03:11,340
using some techniques from previously

69
00:03:09,060 --> 00:03:13,980
published work as a way to consume

70
00:03:11,340 --> 00:03:15,270
bandwidth on the network so denial of

71
00:03:13,980 --> 00:03:17,030
service attacks are not a hypothetical

72
00:03:15,270 --> 00:03:19,410
threat this is a realistic threat

73
00:03:17,030 --> 00:03:21,510
these have denial of service attacks

74
00:03:19,410 --> 00:03:24,570
have been reported on the live network

75
00:03:21,510 --> 00:03:26,340
in January 2018 there was a report of an

76
00:03:24,570 --> 00:03:28,769
ongoing denial of service attack on tor

77
00:03:26,340 --> 00:03:30,270
this led the developers to develop a

78
00:03:28,770 --> 00:03:32,850
mitigation that I am a service

79
00:03:30,270 --> 00:03:35,120
mitigation subsystem that would help

80
00:03:32,850 --> 00:03:37,920
mitigate the effects of such an attack

81
00:03:35,120 --> 00:03:39,960
so this is a real threat these attacks

82
00:03:37,920 --> 00:03:42,720
are relatively easy to carry out as

83
00:03:39,960 --> 00:03:44,370
you'll see and we need to be better

84
00:03:42,720 --> 00:03:48,210
understand these attacks so we can help

85
00:03:44,370 --> 00:03:50,550
develop better defenses against them so

86
00:03:48,210 --> 00:03:52,410
in this work we explore three research

87
00:03:50,550 --> 00:03:55,440
questions how vulnerable is tor to

88
00:03:52,410 --> 00:03:57,210
denial of service attacks how costly are

89
00:03:55,440 --> 00:03:58,650
these attacks to carry out and what

90
00:03:57,210 --> 00:04:01,080
effect do they have on client

91
00:03:58,650 --> 00:04:03,330
performance in the paper we look at

92
00:04:01,080 --> 00:04:05,790
three different components of tor we

93
00:04:03,330 --> 00:04:07,560
look at bridges the Tor flow bandwidth

94
00:04:05,790 --> 00:04:10,019
scanning infrastructure which helps

95
00:04:07,560 --> 00:04:11,940
produce weights to balance load across

96
00:04:10,020 --> 00:04:16,290
the relays and we look at a real a

97
00:04:11,940 --> 00:04:18,298
congestion attack these attacks have

98
00:04:16,290 --> 00:04:21,989
various costs and various effects on

99
00:04:18,298 --> 00:04:24,179
performance throughout the paper we did

100
00:04:21,988 --> 00:04:25,679
these attacks in a private tour Network

101
00:04:24,180 --> 00:04:27,690
we did not do them on a lot live tor

102
00:04:25,680 --> 00:04:29,280
network for ethical reasons we use a

103
00:04:27,690 --> 00:04:31,020
high fidelity simulation using the

104
00:04:29,280 --> 00:04:32,460
shadow simulator we did some

105
00:04:31,020 --> 00:04:34,140
measurements on the Tor network but

106
00:04:32,460 --> 00:04:35,400
there were mostly client measurements

107
00:04:34,140 --> 00:04:37,780
and we didn't store any information

108
00:04:35,400 --> 00:04:39,099
about any users

109
00:04:37,780 --> 00:04:40,630
so for the rest of this talk I'm gonna

110
00:04:39,100 --> 00:04:43,300
focus on the real a congestion attack

111
00:04:40,630 --> 00:04:44,800
and explain how it works what the costs

112
00:04:43,300 --> 00:04:46,240
are what the effects are if you're

113
00:04:44,800 --> 00:04:51,040
interested in the other attacks please

114
00:04:46,240 --> 00:04:52,540
see the paper for more details okay so

115
00:04:51,040 --> 00:04:53,980
the way tour works is when a client

116
00:04:52,540 --> 00:04:55,690
wants to visit a destination through the

117
00:04:53,980 --> 00:04:58,000
Tor network it builds up what's called a

118
00:04:55,690 --> 00:05:00,640
circuit by choosing three relays in the

119
00:04:58,000 --> 00:05:02,410
network and extending a connection

120
00:05:00,640 --> 00:05:04,930
through each of these relay in a

121
00:05:02,410 --> 00:05:06,430
telescoping process through this process

122
00:05:04,930 --> 00:05:07,840
they create a shared key with each relay

123
00:05:06,430 --> 00:05:09,790
so that they can encrypt traffic

124
00:05:07,840 --> 00:05:12,219
multiple times and send it through the

125
00:05:09,790 --> 00:05:13,510
circuit the client then instructs the

126
00:05:12,220 --> 00:05:17,380
final relay to connect to the internet

127
00:05:13,510 --> 00:05:19,270
destination so in this process after

128
00:05:17,380 --> 00:05:21,100
this process no single point on the path

129
00:05:19,270 --> 00:05:23,849
can learn both the client and the

130
00:05:21,100 --> 00:05:27,040
destination so this provides unlimited

131
00:05:23,850 --> 00:05:29,440
to the client so a real a congestion

132
00:05:27,040 --> 00:05:31,710
attack can be launched by extending a

133
00:05:29,440 --> 00:05:34,170
circuit from three hops up to eight hops

134
00:05:31,710 --> 00:05:37,299
this is allowed by the tor protocol

135
00:05:34,170 --> 00:05:41,110
previous work that explored long paths

136
00:05:37,300 --> 00:05:43,390
and tour caused tor to reduce the

137
00:05:41,110 --> 00:05:45,130
maximum circuit length to eight but you

138
00:05:43,390 --> 00:05:48,159
can still build an eight hops circuit as

139
00:05:45,130 --> 00:05:50,680
of today so let's step one build mini

140
00:05:48,160 --> 00:05:51,930
hops circuit the circuit can be targeted

141
00:05:50,680 --> 00:05:53,830
or indiscriminate

142
00:05:51,930 --> 00:05:55,930
targeted means if you have a specific

143
00:05:53,830 --> 00:05:58,900
relay that you're trying to congest you

144
00:05:55,930 --> 00:06:01,660
can repeat that relay up to three times

145
00:05:58,900 --> 00:06:03,070
in the same circuit indiscriminate you

146
00:06:01,660 --> 00:06:05,050
just choose relays following tours

147
00:06:03,070 --> 00:06:08,010
regular pass selection algorithm which

148
00:06:05,050 --> 00:06:10,300
is the approach we take in this attack

149
00:06:08,010 --> 00:06:12,490
so once you have your a hops circuit

150
00:06:10,300 --> 00:06:13,960
you simply initiate a get request for

151
00:06:12,490 --> 00:06:18,070
large files from some internet web

152
00:06:13,960 --> 00:06:20,590
server and the web server will send this

153
00:06:18,070 --> 00:06:22,630
data all eight relays will download and

154
00:06:20,590 --> 00:06:25,419
upload as their forwarding traffic

155
00:06:22,630 --> 00:06:27,790
towards the client step three is the

156
00:06:25,420 --> 00:06:29,770
client can stop reading on the TCP

157
00:06:27,790 --> 00:06:31,810
connection to the first hop relay

158
00:06:29,770 --> 00:06:33,789
meaning that they no longer call the

159
00:06:31,810 --> 00:06:35,710
read function in the kernel so bytes so

160
00:06:33,790 --> 00:06:39,760
data won't be transferred from the entry

161
00:06:35,710 --> 00:06:42,190
to the client however the client can

162
00:06:39,760 --> 00:06:44,020
still write on this connection and this

163
00:06:42,190 --> 00:06:46,210
is important because the client will

164
00:06:44,020 --> 00:06:49,030
continue to send tors flow control cells

165
00:06:46,210 --> 00:06:51,190
to the exit node which will instruct the

166
00:06:49,030 --> 00:06:52,510
exit to continue sending data

167
00:06:51,190 --> 00:06:54,940
data from the server and sending it

168
00:06:52,510 --> 00:06:58,120
towards the client and this way the

169
00:06:54,940 --> 00:07:00,190
traffic will continue to be sent through

170
00:06:58,120 --> 00:07:04,090
the circuit and consumes resources at

171
00:07:00,190 --> 00:07:05,710
all of the relays step 5

172
00:07:04,090 --> 00:07:08,500
repeat you can build thousands of these

173
00:07:05,710 --> 00:07:09,880
circuits at the same time important

174
00:07:08,500 --> 00:07:11,590
things to note when you brilliant these

175
00:07:09,880 --> 00:07:13,780
circuits is spreading them out across

176
00:07:11,590 --> 00:07:15,580
different relays you can choose any

177
00:07:13,780 --> 00:07:18,640
relay in the network as a first hop into

178
00:07:15,580 --> 00:07:21,609
the network and each attack circuit uses

179
00:07:18,640 --> 00:07:23,740
a different socket TCP connection in

180
00:07:21,610 --> 00:07:26,830
order to have more control over the

181
00:07:23,740 --> 00:07:29,350
attack circuits so as a result of this

182
00:07:26,830 --> 00:07:31,270
lots of data from internet web servers

183
00:07:29,350 --> 00:07:32,680
will be sent into the network the

184
00:07:31,270 --> 00:07:35,799
network will send it between each other

185
00:07:32,680 --> 00:07:37,540
eight different times and then because

186
00:07:35,800 --> 00:07:40,500
the client is not reading most of the

187
00:07:37,540 --> 00:07:42,910
data will get stuck at the entry points

188
00:07:40,500 --> 00:07:44,650
okay so we implemented this attack and

189
00:07:42,910 --> 00:07:46,740
we evaluated it in a private tour

190
00:07:44,650 --> 00:07:49,330
Network using the shadow simulator

191
00:07:46,740 --> 00:07:50,920
shadow allows you to do this in a

192
00:07:49,330 --> 00:07:55,419
private network without harming any

193
00:07:50,920 --> 00:07:57,250
users we built a 10% shadow tor network

194
00:07:55,419 --> 00:08:00,359
which is about 10 percent the size and

195
00:07:57,250 --> 00:08:02,800
capacity of the live network we ran

196
00:08:00,360 --> 00:08:04,419
thousands of clients and servers in the

197
00:08:02,800 --> 00:08:07,990
network to create realistic background

198
00:08:04,419 --> 00:08:10,299
traffic and then we explore the effects

199
00:08:07,990 --> 00:08:12,010
of attack we looked at various attack

200
00:08:10,300 --> 00:08:15,400
strengths so various numbers of attack

201
00:08:12,010 --> 00:08:17,530
circuits and we measured network load

202
00:08:15,400 --> 00:08:22,539
attacker resource usage and client

203
00:08:17,530 --> 00:08:25,059
performance during the attack so the

204
00:08:22,540 --> 00:08:27,130
results are shown here the graph on the

205
00:08:25,060 --> 00:08:28,840
left is attacker throughput so this is

206
00:08:27,130 --> 00:08:31,300
how much bandwidth the attacker is

207
00:08:28,840 --> 00:08:33,819
consuming during the attack and the

208
00:08:31,300 --> 00:08:36,520
graph on the right is to a relay good

209
00:08:33,820 --> 00:08:38,289
put this is how much bandwidth all of

210
00:08:36,520 --> 00:08:41,199
the relays combined in the network are

211
00:08:38,289 --> 00:08:44,220
consuming we're showing two different

212
00:08:41,200 --> 00:08:46,510
attacks here the 20k circuit attack is

213
00:08:44,220 --> 00:08:48,490
the same attack as the other one except

214
00:08:46,510 --> 00:08:51,460
you the client is actually doing the

215
00:08:48,490 --> 00:08:54,610
reading thing stop reading attack is as

216
00:08:51,460 --> 00:08:58,660
I previously described where the client

217
00:08:54,610 --> 00:09:01,000
stops reading from the entry point so

218
00:08:58,660 --> 00:09:04,329
the first thing to note here is that in

219
00:09:01,000 --> 00:09:05,230
the regular attack where you do the

220
00:09:04,330 --> 00:09:06,850
reading

221
00:09:05,230 --> 00:09:09,130
the bandwidth amplification factor

222
00:09:06,850 --> 00:09:12,690
reached six point seven so the attacker

223
00:09:09,130 --> 00:09:16,180
consumed about 200 megabytes per second

224
00:09:12,690 --> 00:09:18,700
on average through the attack and caused

225
00:09:16,180 --> 00:09:21,880
an increase of about 1.2 gigabytes per

226
00:09:18,700 --> 00:09:26,080
second on the network during the attack

227
00:09:21,880 --> 00:09:27,820
and then in the stop reading case the

228
00:09:26,080 --> 00:09:29,860
attacker used significantly less

229
00:09:27,820 --> 00:09:31,270
bandwidth because it's no longer reading

230
00:09:29,860 --> 00:09:34,570
this data from the circuits from the

231
00:09:31,270 --> 00:09:35,890
network it's still sending cells during

232
00:09:34,570 --> 00:09:37,090
the circuit construction and and

233
00:09:35,890 --> 00:09:38,770
downloading cells during circuit

234
00:09:37,090 --> 00:09:41,020
construction and then sending these

235
00:09:38,770 --> 00:09:44,100
periodic flow control cells so it does

236
00:09:41,020 --> 00:09:46,480
use some amount of bandwidth

237
00:09:44,100 --> 00:09:48,070
Eggar get really good put dropped a

238
00:09:46,480 --> 00:09:50,800
little bit because some of these

239
00:09:48,070 --> 00:09:53,200
circuits are timing out and the client

240
00:09:50,800 --> 00:09:54,490
isn't realizing this so it's causing

241
00:09:53,200 --> 00:09:56,950
some loss in efficiency but we still

242
00:09:54,490 --> 00:10:01,120
achieved a bandwidth application factor

243
00:09:56,950 --> 00:10:04,600
in this case of 26 which is quite quite

244
00:10:01,120 --> 00:10:07,030
scary so in addition to the effect on

245
00:10:04,600 --> 00:10:08,940
the attacker and on the Tor network we

246
00:10:07,030 --> 00:10:13,329
looked at the effect on tor performance

247
00:10:08,940 --> 00:10:15,340
so this graph looks at the download time

248
00:10:13,330 --> 00:10:17,860
time to first byte in time to last by

249
00:10:15,340 --> 00:10:21,070
across various sized files that were

250
00:10:17,860 --> 00:10:23,080
downloaded during the experiment in both

251
00:10:21,070 --> 00:10:26,740
the no attack 20k circuit and the stop

252
00:10:23,080 --> 00:10:29,560
reading attack case the highlight here

253
00:10:26,740 --> 00:10:31,770
is for the 20 Circuit of 20,000 circuit

254
00:10:29,560 --> 00:10:34,810
attack time the first bite increased by

255
00:10:31,770 --> 00:10:37,689
138 percent and time to last by it

256
00:10:34,810 --> 00:10:41,290
increased by 120% across all the

257
00:10:37,690 --> 00:10:43,650
downloads and then again in the stop

258
00:10:41,290 --> 00:10:46,930
reading case this was a slightly less

259
00:10:43,650 --> 00:10:49,750
had a slightly smaller effect this is

260
00:10:46,930 --> 00:10:51,939
also less costly to the attacker because

261
00:10:49,750 --> 00:10:53,290
they're not reading but we achieved 48

262
00:10:51,940 --> 00:10:56,830
percent increase in time to first byte

263
00:10:53,290 --> 00:11:01,000
and 47 percent increase in time to last

264
00:10:56,830 --> 00:11:03,430
bite across all downloads ok so how much

265
00:11:01,000 --> 00:11:05,410
does its attack cost the attack that we

266
00:11:03,430 --> 00:11:07,750
did in shadow was as I mentioned on a 10

267
00:11:05,410 --> 00:11:09,689
percent tor network so we extrapolated

268
00:11:07,750 --> 00:11:12,130
this up to a full Tor network by

269
00:11:09,690 --> 00:11:15,340
multiplying most of our requirements by

270
00:11:12,130 --> 00:11:17,950
10 so for 200,000 circuits in the live

271
00:11:15,340 --> 00:11:19,150
Tor network our attacker would consume

272
00:11:17,950 --> 00:11:20,740
roughly 3 Giga

273
00:11:19,150 --> 00:11:23,740
it's per second of traffic and would

274
00:11:20,740 --> 00:11:26,680
require 20 IP addresses in order to not

275
00:11:23,740 --> 00:11:29,410
trigger tours denial service mitigation

276
00:11:26,680 --> 00:11:31,479
system that I mentioned earlier and then

277
00:11:29,410 --> 00:11:33,790
how much does the bandwidth cost for

278
00:11:31,480 --> 00:11:37,600
this question we surveyed the table on

279
00:11:33,790 --> 00:11:39,640
the on the right table to shows a survey

280
00:11:37,600 --> 00:11:42,610
of different providers and how much they

281
00:11:39,640 --> 00:11:45,580
charge for dedicated servers with a

282
00:11:42,610 --> 00:11:47,470
certain bandwidth quota and we surveyed

283
00:11:45,580 --> 00:11:49,570
some of these providers and we came with

284
00:11:47,470 --> 00:11:53,140
it came up with a mean amortized cost of

285
00:11:49,570 --> 00:11:56,200
70 cents per hour per gigabit per second

286
00:11:53,140 --> 00:11:58,840
of traffic and so we use this amortized

287
00:11:56,200 --> 00:12:01,600
cost in addition to assuming that IP

288
00:11:58,840 --> 00:12:04,810
addresses cost $5 each to estimate

289
00:12:01,600 --> 00:12:06,220
conservatively a cost of one thousand

290
00:12:04,810 --> 00:12:11,050
six hundred forty seven dollars to

291
00:12:06,220 --> 00:12:14,110
conduct this real a congestion attack on

292
00:12:11,050 --> 00:12:15,910
the live Network now if you want to get

293
00:12:14,110 --> 00:12:18,370
a little bit more optimistic you can say

294
00:12:15,910 --> 00:12:21,490
well actually VPS is are much cheaper

295
00:12:18,370 --> 00:12:23,680
you can get a VPS for $7.00 I've used to

296
00:12:21,490 --> 00:12:25,990
have one of these they claim to offer

297
00:12:23,680 --> 00:12:27,790
gigabit per second although likely they

298
00:12:25,990 --> 00:12:29,290
offer far less than that and the links

299
00:12:27,790 --> 00:12:30,939
are probably shared so you might not be

300
00:12:29,290 --> 00:12:35,589
able to achieve that but even if you

301
00:12:30,940 --> 00:12:38,410
bought 20 of these VPS is to get the 20

302
00:12:35,590 --> 00:12:40,270
IP addresses this is only $140 per month

303
00:12:38,410 --> 00:12:42,900
so optimistically the cost of the attack

304
00:12:40,270 --> 00:12:45,310
is potentially much cheaper than the

305
00:12:42,900 --> 00:12:49,930
conservative estimate that we have in

306
00:12:45,310 --> 00:12:51,280
the paper so another question is well

307
00:12:49,930 --> 00:12:53,800
what if you use this three gigas per

308
00:12:51,280 --> 00:12:55,449
second for anonymity attack on tour

309
00:12:53,800 --> 00:12:59,229
rather than a denial of service attack

310
00:12:55,450 --> 00:13:01,510
so we looked at this we compared our

311
00:12:59,230 --> 00:13:03,760
attacks or how much you could do with a

312
00:13:01,510 --> 00:13:05,980
civil attack where the attacker would

313
00:13:03,760 --> 00:13:08,350
use this bandwidth to run relays in the

314
00:13:05,980 --> 00:13:10,630
network instead and then use those

315
00:13:08,350 --> 00:13:14,470
relays in the denial of service attack

316
00:13:10,630 --> 00:13:16,390
or a diene anonymization attack so in

317
00:13:14,470 --> 00:13:19,000
the denial of service attack the goal is

318
00:13:16,390 --> 00:13:20,949
to get your civil relays to appear in as

319
00:13:19,000 --> 00:13:22,060
many circuits as possible and then

320
00:13:20,950 --> 00:13:23,500
whenever someone builds a circuit

321
00:13:22,060 --> 00:13:25,449
through those relays you can just drop

322
00:13:23,500 --> 00:13:27,610
the circuit or arbitrarily degrade

323
00:13:25,450 --> 00:13:30,640
performance on it by slowing traffic

324
00:13:27,610 --> 00:13:33,040
down etc so the question for the

325
00:13:30,640 --> 00:13:34,449
attacker is how can I

326
00:13:33,040 --> 00:13:36,819
what's the highest how could i get my

327
00:13:34,449 --> 00:13:39,130
relays to exist in the most relays

328
00:13:36,820 --> 00:13:41,620
possible and to do this

329
00:13:39,130 --> 00:13:43,870
exit bandwidth is exit relay bandwidth

330
00:13:41,620 --> 00:13:45,339
this as a scarcest in the network so the

331
00:13:43,870 --> 00:13:47,230
best option for the attacker is to run

332
00:13:45,339 --> 00:13:48,670
exit relays this will give them the

333
00:13:47,230 --> 00:13:50,470
highest probability of appearing in a

334
00:13:48,670 --> 00:13:52,750
circuit and with three gigabits per

335
00:13:50,470 --> 00:13:55,180
second of traffic you can get you can

336
00:13:52,750 --> 00:13:57,430
appear in a roughly 4.5% of circuits and

337
00:13:55,180 --> 00:14:00,910
then arbitrarily degrade performance on

338
00:13:57,430 --> 00:14:03,519
those circuits in the D anonymization

339
00:14:00,910 --> 00:14:05,529
attack the goal is to appear on both

340
00:14:03,519 --> 00:14:07,990
ends of the circuit in order to

341
00:14:05,529 --> 00:14:09,040
compromise anonymity of the client do

342
00:14:07,990 --> 00:14:10,209
you appear on one end you know the

343
00:14:09,040 --> 00:14:13,990
client you appear on the other end you

344
00:14:10,209 --> 00:14:17,619
know the server a previous work has

345
00:14:13,990 --> 00:14:19,449
looked at this issue and found for a

346
00:14:17,620 --> 00:14:22,509
given bandwidth budget the best

347
00:14:19,449 --> 00:14:25,269
allocation of resources is to a five to

348
00:14:22,509 --> 00:14:27,550
one ratio of guard exit a guard

349
00:14:25,269 --> 00:14:29,380
bandwidth to exit bandwidth and this is

350
00:14:27,550 --> 00:14:30,790
because it's more difficult to become a

351
00:14:29,380 --> 00:14:32,170
client's guard node because clients

352
00:14:30,790 --> 00:14:34,089
choose a guard and stick with it for

353
00:14:32,170 --> 00:14:36,670
several months so it's more advantageous

354
00:14:34,089 --> 00:14:39,190
to put more of your resources towards

355
00:14:36,670 --> 00:14:42,790
running guard nodes in that case so with

356
00:14:39,190 --> 00:14:45,130
this allocation attacker can appear in

357
00:14:42,790 --> 00:14:47,889
guard as a guard in circuits 2.8 percent

358
00:14:45,130 --> 00:14:53,680
of the time and as an exit in circuits

359
00:14:47,889 --> 00:14:58,000
0.8 percent of the time for a compromise

360
00:14:53,680 --> 00:15:01,120
rate of 0.02 percent of total of all the

361
00:14:58,000 --> 00:15:03,160
circuits so compared to our attacks our

362
00:15:01,120 --> 00:15:05,199
attack works across the entire network

363
00:15:03,160 --> 00:15:06,670
on all circuits that are built whereas

364
00:15:05,199 --> 00:15:11,380
these attacks are a little bit more

365
00:15:06,670 --> 00:15:12,579
nuanced and Holliday function ok so how

366
00:15:11,380 --> 00:15:15,639
do you mitigate the really congestion

367
00:15:12,579 --> 00:15:19,239
attack I really the attack relies on

368
00:15:15,639 --> 00:15:21,939
three main features one is the ability

369
00:15:19,240 --> 00:15:26,290
to stop reading from circuits so I have

370
00:15:21,939 --> 00:15:28,779
actually a co-authored tour proposal

371
00:15:26,290 --> 00:15:30,910
called authenticated send Me's which has

372
00:15:28,779 --> 00:15:33,339
been implemented in a recent version of

373
00:15:30,910 --> 00:15:37,149
tor the way authenticated send Me's work

374
00:15:33,339 --> 00:15:38,980
is every 50 cells that the exit sends

375
00:15:37,149 --> 00:15:41,079
toward the client at the end of that

376
00:15:38,980 --> 00:15:45,610
50th cell it adds a knots to the cell

377
00:15:41,079 --> 00:15:46,520
and then the client needs to read and

378
00:15:45,610 --> 00:15:48,710
return

379
00:15:46,520 --> 00:15:50,540
from that 50th cell when it's sending

380
00:15:48,710 --> 00:15:53,030
back the flow control cells to the exit

381
00:15:50,540 --> 00:15:54,770
and if the exit if the nonce doesn't

382
00:15:53,030 --> 00:15:57,230
validate the exit will drop the circuit

383
00:15:54,770 --> 00:15:59,270
so this essentially stops the stop

384
00:15:57,230 --> 00:16:01,160
reading part of the attack and will

385
00:15:59,270 --> 00:16:02,930
reduce that bandwidth amplification

386
00:16:01,160 --> 00:16:07,310
factor from twenty six down to six point

387
00:16:02,930 --> 00:16:10,270
seven another thing our attack uses is

388
00:16:07,310 --> 00:16:13,790
the ability to build eight hop circuits

389
00:16:10,270 --> 00:16:15,710
tor only needs four hops in the current

390
00:16:13,790 --> 00:16:17,480
protocol and so we could reasonably

391
00:16:15,710 --> 00:16:20,390
reduce the circuit length to four hops

392
00:16:17,480 --> 00:16:21,800
in the current network and that would

393
00:16:20,390 --> 00:16:23,600
reduce further reduce the bandwidth

394
00:16:21,800 --> 00:16:27,079
amplification factors that an adversary

395
00:16:23,600 --> 00:16:29,750
could achieve and another issue is that

396
00:16:27,080 --> 00:16:32,600
an attacker can use all the relays in

397
00:16:29,750 --> 00:16:34,310
the network as the first hop and this is

398
00:16:32,600 --> 00:16:36,590
actually a challenging problem because

399
00:16:34,310 --> 00:16:38,569
towards a privacy-preserving network and

400
00:16:36,590 --> 00:16:39,830
relays can't just store information

401
00:16:38,570 --> 00:16:43,960
about users and share that information

402
00:16:39,830 --> 00:16:46,910
with others from an anomaly perspective

403
00:16:43,960 --> 00:16:48,500
viewpoint on this it would be easy to

404
00:16:46,910 --> 00:16:49,850
detect an attacker who's connecting to

405
00:16:48,500 --> 00:16:52,910
all the relays at the same time because

406
00:16:49,850 --> 00:16:54,290
that's not a normal behavior but in

407
00:16:52,910 --> 00:16:55,969
order to share the information across

408
00:16:54,290 --> 00:16:57,949
relays in a way that doesn't harm

409
00:16:55,970 --> 00:17:00,490
regular users this is a non-trivial

410
00:16:57,950 --> 00:17:02,630
problem so this is future work

411
00:17:00,490 --> 00:17:05,270
developing a privacy-preserving defense

412
00:17:02,630 --> 00:17:07,430
against civil attacks and then using

413
00:17:05,270 --> 00:17:09,170
that to detect if attacks are happening

414
00:17:07,430 --> 00:17:11,330
in the network measuring how often they

415
00:17:09,170 --> 00:17:15,800
happen and using that to prevent such

416
00:17:11,329 --> 00:17:17,419
attacks so that's all I have again we

417
00:17:15,800 --> 00:17:19,159
did looked at three attacks the bridge

418
00:17:17,420 --> 00:17:20,870
congestion attack bandwidth authority

419
00:17:19,160 --> 00:17:23,300
attack and a real a congestion attack I

420
00:17:20,869 --> 00:17:24,800
only went over the relay congestion

421
00:17:23,300 --> 00:17:26,629
attack here but the others there's more

422
00:17:24,800 --> 00:17:29,000
details in the paper about the other

423
00:17:26,630 --> 00:17:30,800
attacks and I discussed some future work

424
00:17:29,000 --> 00:17:33,010
that's all I have thank you for your

425
00:17:30,800 --> 00:17:33,010
attention

426
00:17:36,220 --> 00:17:42,710
okay we've got a bit of time for some

427
00:17:38,420 --> 00:17:44,510
questions and a microphone right here hi

428
00:17:42,710 --> 00:17:47,450
thanks for the presentation really cool

429
00:17:44,510 --> 00:17:50,360
work Bobo from Facebook I had a question

430
00:17:47,450 --> 00:17:53,210
you in the cost estimation you scale by

431
00:17:50,360 --> 00:17:55,820
10x in order to scale your costs I was

432
00:17:53,210 --> 00:17:57,470
wondering if you knew that the

433
00:17:55,820 --> 00:17:59,600
characteristics of the network that are

434
00:17:57,470 --> 00:18:01,760
relevant for the cost to the attacker do

435
00:17:59,600 --> 00:18:03,740
scale linearly like that it's also

436
00:18:01,760 --> 00:18:05,870
wondering about the mitigation of every

437
00:18:03,740 --> 00:18:07,400
50th cell having a nonce not sure I

438
00:18:05,870 --> 00:18:09,919
followed that this may just be ignorant

439
00:18:07,400 --> 00:18:11,900
on my part but can the attacker simply

440
00:18:09,920 --> 00:18:13,520
read every 50th cell and discard the

441
00:18:11,900 --> 00:18:16,100
other 49 and get most of the

442
00:18:13,520 --> 00:18:19,639
amplification okay for the 10 X linearly

443
00:18:16,100 --> 00:18:22,250
linear adjustment shadow was designed to

444
00:18:19,640 --> 00:18:24,200
approp to match the bandwidth of the Tor

445
00:18:22,250 --> 00:18:26,390
network like to match a distribution of

446
00:18:24,200 --> 00:18:29,150
bandwidth in the network so 10% of the

447
00:18:26,390 --> 00:18:30,680
bandwidth in shadow if you multiply that

448
00:18:29,150 --> 00:18:33,200
by 10 you'll get back to the actual

449
00:18:30,680 --> 00:18:34,750
distribution of tor traffic in the live

450
00:18:33,200 --> 00:18:37,340
network so I think that's an appropriate

451
00:18:34,750 --> 00:18:39,530
multiplier for your second question on

452
00:18:37,340 --> 00:18:40,909
the authenticated send means the

453
00:18:39,530 --> 00:18:43,220
attacker can't read every 50th cell

454
00:18:40,910 --> 00:18:44,570
because it's a TCP stream and it has to

455
00:18:43,220 --> 00:18:46,370
read all the data in order to get to the

456
00:18:44,570 --> 00:18:52,730
50th cell you do selective reading so

457
00:18:46,370 --> 00:18:55,729
yep hi rude really good really cool work

458
00:18:52,730 --> 00:18:58,790
I'm Jerry from UMass Amherst so in the

459
00:18:55,730 --> 00:19:00,950
medication method on the previous slides

460
00:18:58,790 --> 00:19:03,139
you mentioned that we can reduce the

461
00:19:00,950 --> 00:19:05,690
eighth hope circuit to the max ability

462
00:19:03,140 --> 00:19:07,790
to four hopes but a one I'm wondering is

463
00:19:05,690 --> 00:19:10,580
whether the attacker can just run

464
00:19:07,790 --> 00:19:14,180
multiple work lines and do the tour over

465
00:19:10,580 --> 00:19:16,580
tor tor tor tor tor attack yeah so

466
00:19:14,180 --> 00:19:19,010
multiple tor clients just to set up the

467
00:19:16,580 --> 00:19:20,629
proxy to each other's listening port

468
00:19:19,010 --> 00:19:21,950
that's a great point that was one of the

469
00:19:20,630 --> 00:19:23,990
attack variants that we had in our paper

470
00:19:21,950 --> 00:19:25,910
I called it the tunneling strategy you

471
00:19:23,990 --> 00:19:30,070
can tunnel tor connections through other

472
00:19:25,910 --> 00:19:32,690
tor connections tor could feasibly

473
00:19:30,070 --> 00:19:34,669
eliminate this feature by allowing by

474
00:19:32,690 --> 00:19:37,700
exits not allowing exit back into

475
00:19:34,670 --> 00:19:39,320
another relay that's running the tour so

476
00:19:37,700 --> 00:19:41,300
you could prevent this this feature

477
00:19:39,320 --> 00:19:42,980
which is why we didn't I didn't focus on

478
00:19:41,300 --> 00:19:44,120
it during this talk but currently I

479
00:19:42,980 --> 00:19:47,410
believe it is possible to do the

480
00:19:44,120 --> 00:19:49,870
tunneling strategy don't you thank you

481
00:19:47,410 --> 00:19:51,780
one more and while that can the next

482
00:19:49,870 --> 00:19:54,070
speaker come up and start setting up I

483
00:19:51,780 --> 00:19:55,660
Steven cheffy from Middle Tennessee I

484
00:19:54,070 --> 00:19:58,389
was wondering

485
00:19:55,660 --> 00:20:00,910
so with reducing the number of hots

486
00:19:58,390 --> 00:20:03,309
possible possibly decrease anonymity and

487
00:20:00,910 --> 00:20:05,230
could that be counteracted by maybe

488
00:20:03,309 --> 00:20:06,549
limiting the amount of traffic you can

489
00:20:05,230 --> 00:20:08,830
send if you're using a higher number of

490
00:20:06,549 --> 00:20:11,830
hops does reducing the number of hops

491
00:20:08,830 --> 00:20:14,199
reduce anonymity so it's currently most

492
00:20:11,830 --> 00:20:15,490
users build three hop circuits so I'm

493
00:20:14,200 --> 00:20:18,100
not suggesting that we reduce it from

494
00:20:15,490 --> 00:20:20,110
that I'm just suggesting what the

495
00:20:18,100 --> 00:20:22,870
protocol allows the protocol will allow

496
00:20:20,110 --> 00:20:25,449
you to build eight hops but for any MIDI

497
00:20:22,870 --> 00:20:27,520
regions we only really need three that's

498
00:20:25,450 --> 00:20:28,840
been established in the research okay

499
00:20:27,520 --> 00:20:29,918
and I think you might have asked another

500
00:20:28,840 --> 00:20:31,149
question but I didn't quite hear you

501
00:20:29,919 --> 00:20:32,980
something you could take that offline

502
00:20:31,150 --> 00:20:35,350
cuz I think I'm out of time okay thank

503
00:20:32,980 --> 00:20:40,480
you let's think Rob again

504
00:20:35,350 --> 00:20:40,480
[Applause]

