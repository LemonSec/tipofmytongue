1
00:00:10,980 --> 00:00:16,299
hi everyone thank you for coming to

2
00:00:14,050 --> 00:00:18,820
listen to the talk my name is Omar al

3
00:00:16,299 --> 00:00:21,700
Rolly from Georgia Tech I'll be

4
00:00:18,820 --> 00:00:23,560
presenting today the betrayal at Cloud

5
00:00:21,700 --> 00:00:27,279
City an empirical analysis of

6
00:00:23,560 --> 00:00:29,020
cloud-based mobile backends this is a

7
00:00:27,279 --> 00:00:31,869
joint work between Georgia Tech and Ohio

8
00:00:29,020 --> 00:00:36,250
State I'm a first co-author with

9
00:00:31,869 --> 00:00:37,540
chaoshan Zoo so imagine yourself at a

10
00:00:36,250 --> 00:00:38,739
conference and you're listening to a

11
00:00:37,540 --> 00:00:41,769
talk and you're really bored

12
00:00:38,739 --> 00:00:43,750
hopefully not this talk and you pull out

13
00:00:41,769 --> 00:00:45,280
your mobile app to check in and get that

14
00:00:43,750 --> 00:00:49,360
killer seat you want on the flight back

15
00:00:45,280 --> 00:00:51,790
and just as you do that your Airlines

16
00:00:49,360 --> 00:00:52,960
email you and tell you oh we're sorry we

17
00:00:51,790 --> 00:00:55,900
just leaked your data all over the

18
00:00:52,960 --> 00:00:58,420
internets it could include your name

19
00:00:55,900 --> 00:01:00,610
your address maybe your passport number

20
00:00:58,420 --> 00:01:03,970
and definitely your credit card but we

21
00:01:00,610 --> 00:01:06,190
take security very seriously so you

22
00:01:03,970 --> 00:01:09,490
think to yourself oh my god why is this

23
00:01:06,190 --> 00:01:11,229
such a hard problem British Airways is a

24
00:01:09,490 --> 00:01:13,449
capable company they have billions of

25
00:01:11,229 --> 00:01:16,330
dollars of Revenue why can they allocate

26
00:01:13,450 --> 00:01:18,430
resources to solve a problem of securing

27
00:01:16,330 --> 00:01:21,429
my information and that's a good

28
00:01:18,430 --> 00:01:24,070
question to ask but there's more to it

29
00:01:21,430 --> 00:01:27,430
than what's on the surface you see the

30
00:01:24,070 --> 00:01:29,399
mobile apps we use are just the tip of

31
00:01:27,430 --> 00:01:32,830
the iceberg to support all that

32
00:01:29,400 --> 00:01:34,990
experience there's a whole suite of

33
00:01:32,830 --> 00:01:37,960
software that runs in the mobile

34
00:01:34,990 --> 00:01:41,860
backends starting at the web app layer

35
00:01:37,960 --> 00:01:46,658
where api's talk to mobile apps to serve

36
00:01:41,860 --> 00:01:49,900
content serve ads communicate telemetry

37
00:01:46,659 --> 00:01:52,420
back and for this web app to run you

38
00:01:49,900 --> 00:01:59,159
need software services like web servers

39
00:01:52,420 --> 00:02:02,500
databases and language interpreters and

40
00:01:59,159 --> 00:02:04,570
to run all that you need an operating

41
00:02:02,500 --> 00:02:07,510
system to manage the processes and the

42
00:02:04,570 --> 00:02:10,000
memory and the network stack and of

43
00:02:07,510 --> 00:02:13,599
course you need resources virtual or

44
00:02:10,000 --> 00:02:19,000
metal so you can see this back-end is

45
00:02:13,599 --> 00:02:21,399
already fairly complex ecosystem so it's

46
00:02:19,000 --> 00:02:23,230
no surprise actually that we see a lot

47
00:02:21,400 --> 00:02:27,370
of these

48
00:02:23,230 --> 00:02:30,640
breaches hitting the headlines with this

49
00:02:27,370 --> 00:02:34,750
article pointing to 21,000 elasticsearch

50
00:02:30,640 --> 00:02:36,429
instances exposed and leaking 43

51
00:02:34,750 --> 00:02:38,470
terabytes of app data I mean that's

52
00:02:36,430 --> 00:02:40,170
mind-boggling let that sink in 43

53
00:02:38,470 --> 00:02:42,940
terabytes

54
00:02:40,170 --> 00:02:45,160
another article points at third-party

55
00:02:42,940 --> 00:02:48,010
backends and how there are issues with

56
00:02:45,160 --> 00:02:49,420
developers being able to integrate with

57
00:02:48,010 --> 00:02:51,970
these third party and points to the

58
00:02:49,420 --> 00:02:55,359
problem who should be responsible to

59
00:02:51,970 --> 00:02:57,549
address these problems and this is not

60
00:02:55,360 --> 00:02:59,110
isolated to a single app or multiple

61
00:02:57,549 --> 00:03:01,299
apps or a handful of apps but these are

62
00:02:59,110 --> 00:03:03,640
thousands of apps that are using

63
00:03:01,299 --> 00:03:05,980
reputable services like Google firebase

64
00:03:03,640 --> 00:03:08,730
which takes security very seriously so

65
00:03:05,980 --> 00:03:11,230
obviously there is some type of problem

66
00:03:08,730 --> 00:03:15,608
so to understand that problem further

67
00:03:11,230 --> 00:03:20,140
let's look at some prior work a car at

68
00:03:15,609 --> 00:03:22,510
all showed in their Sok in 2016 a trend

69
00:03:20,140 --> 00:03:23,980
for web apps being weba fide and what

70
00:03:22,510 --> 00:03:26,500
that means is that the tip of the

71
00:03:23,980 --> 00:03:29,530
iceberg is shrinking and the base is

72
00:03:26,500 --> 00:03:33,700
growing with the evolution of these

73
00:03:29,530 --> 00:03:35,769
backends you see that not code not only

74
00:03:33,700 --> 00:03:38,380
code and not only data is being pushed

75
00:03:35,769 --> 00:03:43,030
down but code is also being served to

76
00:03:38,380 --> 00:03:45,639
each custom device and people have

77
00:03:43,030 --> 00:03:48,099
looked at the security of these backends

78
00:03:45,639 --> 00:03:49,930
several works have looked at the

79
00:03:48,099 --> 00:03:53,619
authentication mechanism between mobile

80
00:03:49,930 --> 00:03:55,090
apps and the backends some other works

81
00:03:53,620 --> 00:03:57,760
have looked at the integration between

82
00:03:55,090 --> 00:04:00,010
how mobile apps and cloud instances

83
00:03:57,760 --> 00:04:02,078
integrate and app authority has

84
00:04:00,010 --> 00:04:04,328
published countless reports of how

85
00:04:02,079 --> 00:04:09,250
serious this problem is getting in terms

86
00:04:04,329 --> 00:04:11,650
of leaks and exposures so everyone meet

87
00:04:09,250 --> 00:04:14,410
Mel Mel is a developer this information

88
00:04:11,650 --> 00:04:16,478
is overwhelming to know mill just wants

89
00:04:14,410 --> 00:04:18,010
to ship a killer app he doesn't want to

90
00:04:16,478 --> 00:04:20,409
think about what's underneath the

91
00:04:18,010 --> 00:04:22,240
iceberg and even he probably is not

92
00:04:20,410 --> 00:04:24,190
aware of what's running under the hood

93
00:04:22,240 --> 00:04:30,400
or knows what operating system his app

94
00:04:24,190 --> 00:04:32,560
is running on so how can mill go about

95
00:04:30,400 --> 00:04:35,320
assessing the security of his mobile

96
00:04:32,560 --> 00:04:36,110
backend there are a couple of challenges

97
00:04:35,320 --> 00:04:38,930
he must

98
00:04:36,110 --> 00:04:42,590
rs1 he needs to figure out what backends

99
00:04:38,930 --> 00:04:46,070
his mobile app uses - he needs to check

100
00:04:42,590 --> 00:04:48,979
to see what security issue is each of

101
00:04:46,070 --> 00:04:50,690
these mobile backends have and once he

102
00:04:48,980 --> 00:04:54,830
identifies those problems how can we go

103
00:04:50,690 --> 00:04:57,200
about fixing them and finally can he fix

104
00:04:54,830 --> 00:05:01,099
them you'll see later that these

105
00:04:57,200 --> 00:05:04,880
backends are actually fairly complex in

106
00:05:01,100 --> 00:05:07,700
terms of ownership so what we have done

107
00:05:04,880 --> 00:05:10,820
is we've implemented a pipeline called

108
00:05:07,700 --> 00:05:14,200
Skywalker and what Skywalker does is it

109
00:05:10,820 --> 00:05:17,630
implements embodies binary analysis and

110
00:05:14,200 --> 00:05:20,390
back-end security assessment techniques

111
00:05:17,630 --> 00:05:24,230
that allows Mel to assess his back-end

112
00:05:20,390 --> 00:05:25,640
and answer these questions so we don't

113
00:05:24,230 --> 00:05:27,740
want to interrupt

114
00:05:25,640 --> 00:05:29,780
Mel's development cycle we don't want to

115
00:05:27,740 --> 00:05:31,790
interject and be able to do the security

116
00:05:29,780 --> 00:05:34,969
in the middle of his development so what

117
00:05:31,790 --> 00:05:36,830
mill does is compile his app and give it

118
00:05:34,970 --> 00:05:40,460
to Skywalker to answer these questions

119
00:05:36,830 --> 00:05:45,560
for him so how does Mel go about finding

120
00:05:40,460 --> 00:05:46,969
what backends his web app uses well this

121
00:05:45,560 --> 00:05:49,930
might sound like a simple question but

122
00:05:46,970 --> 00:05:53,360
Mel actually integrates with a lotta SDK

123
00:05:49,930 --> 00:05:56,360
SDK backends like crash' lytx which

124
00:05:53,360 --> 00:05:58,970
provides crash and errors that happen on

125
00:05:56,360 --> 00:06:00,530
the device when the app is running you

126
00:05:58,970 --> 00:06:02,200
have the Facebook SDK which allows

127
00:06:00,530 --> 00:06:05,390
authentication or integration with

128
00:06:02,200 --> 00:06:10,400
social networks and each of those is an

129
00:06:05,390 --> 00:06:13,070
iceberg by itself icebergs that come

130
00:06:10,400 --> 00:06:15,799
with on their own problems so what

131
00:06:13,070 --> 00:06:18,170
Skywalker does is it applies static

132
00:06:15,800 --> 00:06:20,750
analysis selectively symbolic analysis

133
00:06:18,170 --> 00:06:28,480
and dynamic analysis to extract request

134
00:06:20,750 --> 00:06:28,480
messages from each of these apps so

135
00:06:32,879 --> 00:06:39,060
when he sent support extracts the

136
00:06:35,379 --> 00:06:39,060
request messages from each of these apps

137
00:06:44,430 --> 00:06:54,729
think I think we got it connection

138
00:06:49,000 --> 00:06:57,930
problem yeah just a second okay sorry

139
00:06:54,729 --> 00:07:00,188
about that so that's that sounds like a

140
00:06:57,930 --> 00:07:02,949
maybe a simple question to ask because

141
00:07:00,189 --> 00:07:06,099
Mill develops his own app so why would

142
00:07:02,949 --> 00:07:07,840
he why would he not just be able to pull

143
00:07:06,099 --> 00:07:10,930
this so what we found looking at the

144
00:07:07,840 --> 00:07:13,448
5000 top 5,000 Google Playstore is that

145
00:07:10,930 --> 00:07:17,020
on average each mobile app talks to at

146
00:07:13,449 --> 00:07:19,930
least 10 unique backends and to put that

147
00:07:17,020 --> 00:07:22,210
in perspective that means 10 different

148
00:07:19,930 --> 00:07:24,159
icebergs 10 different backends with

149
00:07:22,210 --> 00:07:27,190
their own security issues with their own

150
00:07:24,159 --> 00:07:29,438
set of bugs so you can see how this can

151
00:07:27,190 --> 00:07:33,610
get fairly complex for a developer who

152
00:07:29,439 --> 00:07:35,349
has no security background so once we

153
00:07:33,610 --> 00:07:39,210
know what backends we're talking to how

154
00:07:35,349 --> 00:07:41,529
do we go about assessing these backends

155
00:07:39,210 --> 00:07:43,659
it's a little bit tricky because each

156
00:07:41,529 --> 00:07:47,400
layer needs a special technique for

157
00:07:43,659 --> 00:07:50,050
example at the web app layer Skywalker

158
00:07:47,400 --> 00:07:52,388
takes the extracted request message

159
00:07:50,050 --> 00:07:54,330
identifies the back-end and the format

160
00:07:52,389 --> 00:07:56,919
of the message to the back-end and

161
00:07:54,330 --> 00:07:59,219
perturbs those inputs defined SQL

162
00:07:56,919 --> 00:08:01,889
injection cross-site scripting and

163
00:07:59,219 --> 00:08:06,400
external XML entity attacks

164
00:08:01,889 --> 00:08:11,080
vulnerabilities as for the rest of the

165
00:08:06,400 --> 00:08:13,779
stack what Skywalker does is perform a

166
00:08:11,080 --> 00:08:16,659
scan on all ports for each of these

167
00:08:13,779 --> 00:08:19,060
backends identifies running services and

168
00:08:16,659 --> 00:08:21,490
then fingerprints each service to

169
00:08:19,060 --> 00:08:24,039
identify what software is running on

170
00:08:21,490 --> 00:08:26,279
those backends and what version using

171
00:08:24,039 --> 00:08:28,240
that information Skywalker

172
00:08:26,279 --> 00:08:30,279
cross-reference that with the national

173
00:08:28,240 --> 00:08:35,320
vulnerability database to identify

174
00:08:30,279 --> 00:08:37,570
issues that he can give back to mil so

175
00:08:35,320 --> 00:08:40,630
once we know all these bugs how do we go

176
00:08:37,570 --> 00:08:44,320
about fixing these issues and this is

177
00:08:40,630 --> 00:08:46,890
where it gets kind of tricky so if

178
00:08:44,320 --> 00:08:50,140
owns the whole stack he runs his own

179
00:08:46,890 --> 00:08:51,880
backends from the hardware all the way

180
00:08:50,140 --> 00:08:54,370
up to the mobile app then is

181
00:08:51,880 --> 00:08:56,230
straightforward all mill has to do is

182
00:08:54,370 --> 00:08:59,560
take that list and apply it to each

183
00:08:56,230 --> 00:09:02,470
layer and fix those issues but when he's

184
00:08:59,560 --> 00:09:06,010
using a third-party SDK that gets a

185
00:09:02,470 --> 00:09:08,050
little complex because now he's he

186
00:09:06,010 --> 00:09:10,420
doesn't have access to the backend the

187
00:09:08,050 --> 00:09:13,719
only access he has is actually through

188
00:09:10,420 --> 00:09:15,279
the SDK and then it gets even more

189
00:09:13,720 --> 00:09:19,120
confusing when we're looking at a

190
00:09:15,279 --> 00:09:23,649
platform as a service because now mill

191
00:09:19,120 --> 00:09:26,380
runs his apps his mobile app and web app

192
00:09:23,649 --> 00:09:28,839
but he does not own the rest of the

193
00:09:26,380 --> 00:09:30,370
stack he rents it so when a bug is

194
00:09:28,839 --> 00:09:32,470
discovered in the lower stack he

195
00:09:30,370 --> 00:09:34,810
inherits a problem that he doesn't know

196
00:09:32,470 --> 00:09:38,500
about and he might not be able to fix if

197
00:09:34,810 --> 00:09:42,729
he knows about it so how do we fix this

198
00:09:38,500 --> 00:09:45,310
what Skywalker does is takes several

199
00:09:42,730 --> 00:09:47,680
data sources and does data aggregation

200
00:09:45,310 --> 00:09:52,109
and consolidation like who is data

201
00:09:47,680 --> 00:09:56,170
geolocation data and a created list of

202
00:09:52,110 --> 00:09:58,930
colocation CD ends and cloud providers

203
00:09:56,170 --> 00:10:01,479
and then labels each of these backends

204
00:09:58,930 --> 00:10:05,260
and provide a remediation list for each

205
00:10:01,480 --> 00:10:09,250
of those problems that Skywalker finds

206
00:10:05,260 --> 00:10:11,709
and that might sound like an overkill

207
00:10:09,250 --> 00:10:15,220
but what we found in our analysis is

208
00:10:11,709 --> 00:10:17,020
that a lot of these networks are a lot

209
00:10:15,220 --> 00:10:18,850
of these backends are running on diverse

210
00:10:17,020 --> 00:10:22,540
networks and they're geographically

211
00:10:18,850 --> 00:10:25,120
distributed so how can mil a developer

212
00:10:22,540 --> 00:10:28,930
put yourself in his shoes solve all

213
00:10:25,120 --> 00:10:32,130
these problems so how effective is

214
00:10:28,930 --> 00:10:35,260
Skywalker so to answer that question we

215
00:10:32,130 --> 00:10:39,040
unleash Skywalker on the top 5,000 apps

216
00:10:35,260 --> 00:10:41,760
from August 2018 and what we found is

217
00:10:39,040 --> 00:10:44,620
just over six hundred zero day

218
00:10:41,760 --> 00:10:46,449
vulnerability instances and over nine

219
00:10:44,620 --> 00:10:48,820
hundred and a vulnerability instances in

220
00:10:46,449 --> 00:10:51,640
the mobile backends to put things in

221
00:10:48,820 --> 00:10:54,699
context the zero days apply to the web

222
00:10:51,640 --> 00:10:58,740
app layer while the end days apply to

223
00:10:54,699 --> 00:11:00,910
the lower layers of the iceberg

224
00:10:58,740 --> 00:11:03,309
to give an overview of the type of

225
00:11:00,910 --> 00:11:07,439
vulnerabilities you can see here that we

226
00:11:03,309 --> 00:11:10,059
found just over 1,600 vulnerabilities

227
00:11:07,439 --> 00:11:13,389
655 of those vulnerabilities are zero

228
00:11:10,059 --> 00:11:15,040
days zero days that means developers

229
00:11:13,389 --> 00:11:18,370
don't know about this nobody knows about

230
00:11:15,040 --> 00:11:20,649
those Skywalker looked at over 9,000

231
00:11:18,370 --> 00:11:21,610
different backends and of those I want

232
00:11:20,649 --> 00:11:24,970
to draw your attention to the

233
00:11:21,610 --> 00:11:26,439
third-party backends those are the most

234
00:11:24,970 --> 00:11:28,420
critical ones because those are shared

235
00:11:26,439 --> 00:11:30,610
between different apps a bug there

236
00:11:28,420 --> 00:11:34,479
affects multiple application not a

237
00:11:30,610 --> 00:11:36,550
single application in terms of the top

238
00:11:34,480 --> 00:11:38,800
and in terms of the vulnerability types

239
00:11:36,550 --> 00:11:41,459
you see on the operating system layer we

240
00:11:38,800 --> 00:11:44,709
found a lot of backends running outdated

241
00:11:41,459 --> 00:11:47,529
OSS and this could be and this is might

242
00:11:44,709 --> 00:11:50,859
be expected but a problem here if a bug

243
00:11:47,529 --> 00:11:54,999
is discovered any of these unsupported

244
00:11:50,860 --> 00:11:57,339
os's then the vendor will not be

245
00:11:54,999 --> 00:12:00,790
patching this leaving the mill exposed

246
00:11:57,339 --> 00:12:02,499
to an attack for the software layer many

247
00:12:00,790 --> 00:12:04,809
of the backends use PHP they were

248
00:12:02,499 --> 00:12:08,230
running outdated or vulnerable versions

249
00:12:04,809 --> 00:12:12,730
of the PHP interpreter for the web app

250
00:12:08,230 --> 00:12:14,410
layer the largest class of 0 days we

251
00:12:12,730 --> 00:12:16,649
found where the cross-site were a

252
00:12:14,410 --> 00:12:19,300
cross-site scripting and many people

253
00:12:16,649 --> 00:12:20,769
think or have misconception that

254
00:12:19,300 --> 00:12:22,359
cross-site scripting attacks are

255
00:12:20,769 --> 00:12:25,209
actually not very impactful

256
00:12:22,360 --> 00:12:27,879
if you're attending the later 2 layer

257
00:12:25,209 --> 00:12:30,550
talk this afternoon on the one on the

258
00:12:27,879 --> 00:12:33,279
web web attack track I encourage you to

259
00:12:30,550 --> 00:12:35,949
attend the differential context

260
00:12:33,279 --> 00:12:38,740
vulnerability talk about pop ups and

261
00:12:35,949 --> 00:12:43,179
iframes on Android and you can link and

262
00:12:38,740 --> 00:12:45,490
see how and vulnerabilities like this

263
00:12:43,179 --> 00:12:49,480
can be used to redirect mobile apps and

264
00:12:45,490 --> 00:12:51,730
install malicious software in terms of

265
00:12:49,480 --> 00:12:53,499
the communication layer many of them

266
00:12:51,730 --> 00:12:56,529
were running outdated or vulnerable

267
00:12:53,499 --> 00:12:58,569
versions of the SSL version 2 and 3

268
00:12:56,529 --> 00:13:01,920
which is known to be broken so if you're

269
00:12:58,569 --> 00:13:05,649
doing any type of secure communication

270
00:13:01,920 --> 00:13:07,750
resetting password or perhaps exchanging

271
00:13:05,649 --> 00:13:11,580
sensitive information we know that could

272
00:13:07,750 --> 00:13:13,440
be intercepted in terms of the

273
00:13:11,580 --> 00:13:17,580
days we found I want to emphasize how

274
00:13:13,440 --> 00:13:18,990
effective Skywalker is in the top 116

275
00:13:17,580 --> 00:13:22,380
apps in the Google Play Store

276
00:13:18,990 --> 00:13:24,320
these have over 100 million installs and

277
00:13:22,380 --> 00:13:26,430
hundreds of thousands of reviews

278
00:13:24,320 --> 00:13:28,829
Skywalker was able to find three

279
00:13:26,430 --> 00:13:33,779
cross-site scripting bugs and one

280
00:13:28,829 --> 00:13:38,399
external XML entity bug Skywalker lives

281
00:13:33,779 --> 00:13:41,010
in our portal now mobile backend Vettes

282
00:13:38,399 --> 00:13:43,620
we offer this to developers to audit

283
00:13:41,010 --> 00:13:45,630
their apps and only their apps for

284
00:13:43,620 --> 00:13:51,029
researchers please contact us and we can

285
00:13:45,630 --> 00:13:53,420
give you access so what's next with all

286
00:13:51,029 --> 00:13:56,790
these bugs we've been really engaged

287
00:13:53,420 --> 00:13:59,089
with the affected parties trying to

288
00:13:56,790 --> 00:14:01,010
notify them of these bugs

289
00:13:59,089 --> 00:14:04,170
unfortunately the response has been

290
00:14:01,010 --> 00:14:07,230
underwhelming even with zero days and

291
00:14:04,170 --> 00:14:09,089
the urgency of identifying zero days we

292
00:14:07,230 --> 00:14:11,910
haven't been able to remediate

293
00:14:09,089 --> 00:14:13,740
everything we have prioritized third

294
00:14:11,910 --> 00:14:16,589
party because those are the most

295
00:14:13,740 --> 00:14:18,750
impactful if we address doors we will

296
00:14:16,589 --> 00:14:22,079
have a larger impact on the rest of the

297
00:14:18,750 --> 00:14:24,390
mobile apps and finally one area we are

298
00:14:22,079 --> 00:14:27,239
actively looking is trying to understand

299
00:14:24,390 --> 00:14:29,790
how these bugs affect apps on the device

300
00:14:27,240 --> 00:14:34,230
how do they affect the users and how do

301
00:14:29,790 --> 00:14:38,819
they affect the device itself Skywalker

302
00:14:34,230 --> 00:14:41,070
has been inspired by many works here's a

303
00:14:38,820 --> 00:14:43,200
short list and with that I'd like to

304
00:14:41,070 --> 00:14:44,220
thank you for coming today and I would

305
00:14:43,200 --> 00:14:45,810
like to open the floor for any

306
00:14:44,220 --> 00:14:48,970
additional questions that you might have

307
00:14:45,810 --> 00:14:55,300
thank you that speaker

308
00:14:48,970 --> 00:14:56,530
I went from this paw thanks for the

309
00:14:55,300 --> 00:14:58,209
interest you talk about the cross-site

310
00:14:56,530 --> 00:15:01,270
scripting so I'm totally for cross-site

311
00:14:58,210 --> 00:15:03,430
scripting but how can i exploit your

312
00:15:01,270 --> 00:15:05,770
mobile app so I understand that there is

313
00:15:03,430 --> 00:15:08,469
a reflected XSS on the server but how do

314
00:15:05,770 --> 00:15:10,360
I get my payload to you so this is one

315
00:15:08,470 --> 00:15:12,220
of the things I mentioned about the

316
00:15:10,360 --> 00:15:14,410
active area we're looking at is trying

317
00:15:12,220 --> 00:15:16,900
to understand how you would be able to

318
00:15:14,410 --> 00:15:20,610
use this this way and I also mentioned

319
00:15:16,900 --> 00:15:22,270
the work differential context

320
00:15:20,610 --> 00:15:25,170
vulnerability attack that will be

321
00:15:22,270 --> 00:15:27,579
presented in the web attack showing how

322
00:15:25,170 --> 00:15:31,270
these type of vulnerabilities can be

323
00:15:27,580 --> 00:15:33,250
leveraged to be able to do bridging

324
00:15:31,270 --> 00:15:36,100
between the webview and an actual Java

325
00:15:33,250 --> 00:15:37,990
side of an app so we we haven't been

326
00:15:36,100 --> 00:15:39,520
we're actively looking into this trying

327
00:15:37,990 --> 00:15:41,320
to understand how it works but we

328
00:15:39,520 --> 00:15:44,110
haven't really quantified it yet it's

329
00:15:41,320 --> 00:15:46,240
it's it's very difficult because these

330
00:15:44,110 --> 00:15:50,240
devices and app usage are different for

331
00:15:46,240 --> 00:15:53,860
each app session the afternoon

332
00:15:50,240 --> 00:15:53,860
[Laughter]

333
00:15:54,940 --> 00:15:59,710
you mentioned the question of authorship

334
00:15:56,620 --> 00:16:04,030
like paas and third-party SDKs and all

335
00:15:59,710 --> 00:16:06,750
that but just wondering is it okay to

336
00:16:04,030 --> 00:16:09,819
run SQL injection from third-party

337
00:16:06,750 --> 00:16:14,500
services without any permission anything

338
00:16:09,820 --> 00:16:16,750
how do you I know that so in the paper

339
00:16:14,500 --> 00:16:18,790
we've we have a whole consideration

340
00:16:16,750 --> 00:16:21,160
section that we highlight these issues

341
00:16:18,790 --> 00:16:22,630
and how we address them if you want to

342
00:16:21,160 --> 00:16:26,290
talk about the technical details on how

343
00:16:22,630 --> 00:16:28,390
what we did to to so much technical if I

344
00:16:26,290 --> 00:16:30,969
am the proverbial male and I want to

345
00:16:28,390 --> 00:16:32,970
scan my app and because of this can I

346
00:16:30,970 --> 00:16:37,390
end up crashing Facebook's

347
00:16:32,970 --> 00:16:39,460
infrastructure and this okay third-party

348
00:16:37,390 --> 00:16:42,010
developers what am I supposed to do in

349
00:16:39,460 --> 00:16:45,670
that case so you're talking about a

350
00:16:42,010 --> 00:16:49,540
third party yeah so so Facebook as

351
00:16:45,670 --> 00:16:53,349
Google some of them have SQL problems

352
00:16:49,540 --> 00:16:55,599
and I scan my app it runs the SQL

353
00:16:53,350 --> 00:17:00,790
injection and the whole let's say

354
00:16:55,600 --> 00:17:02,410
crashlytics goes down because of me so

355
00:17:00,790 --> 00:17:03,910
for our study we

356
00:17:02,410 --> 00:17:06,869
we've we've tailored the experience to

357
00:17:03,910 --> 00:17:09,639
empirically study it in terms of

358
00:17:06,869 --> 00:17:12,188
individual app you developer being

359
00:17:09,640 --> 00:17:15,400
having access to Skywalker they'll be

360
00:17:12,189 --> 00:17:17,230
they'll be limited to to their backends

361
00:17:15,400 --> 00:17:19,390
because we already have a list of what

362
00:17:17,230 --> 00:17:21,849
third parties are I'll give you an

363
00:17:19,390 --> 00:17:24,819
example from the paper like unity3d we

364
00:17:21,849 --> 00:17:27,010
found a external XML entity bug in their

365
00:17:24,819 --> 00:17:29,950
back-end and we reported to them through

366
00:17:27,010 --> 00:17:32,760
a hack one they acknowledged that so

367
00:17:29,950 --> 00:17:36,250
many of those either run their own

368
00:17:32,760 --> 00:17:40,780
bounty programs so we with with with

369
00:17:36,250 --> 00:17:42,909
what's on mobile backend vet those will

370
00:17:40,780 --> 00:17:47,139
be limited to the infrastructure that

371
00:17:42,909 --> 00:17:48,130
the mobile app developer owns using the

372
00:17:47,140 --> 00:17:51,070
techniques we talked about

373
00:17:48,130 --> 00:17:53,100
identification ok I see thank you you're

374
00:17:51,070 --> 00:17:53,100
welcome

375
00:17:53,159 --> 00:18:00,100
ok hi Tom Marr Oracle thank you so much

376
00:17:56,950 --> 00:18:01,780
for this I'm curious if there was any

377
00:18:00,100 --> 00:18:03,908
sort of independent auditing or

378
00:18:01,780 --> 00:18:06,399
validation that the Seavey's were

379
00:18:03,909 --> 00:18:10,780
actually applicable specifically I'm

380
00:18:06,400 --> 00:18:12,669
thinking Linux vendors are distribution

381
00:18:10,780 --> 00:18:15,220
vendors frequently will backward patches

382
00:18:12,669 --> 00:18:19,450
and not update version numbers in like

383
00:18:15,220 --> 00:18:21,250
headers a specific technical example so

384
00:18:19,450 --> 00:18:23,230
something may show up on a scan is

385
00:18:21,250 --> 00:18:24,669
vulnerable when in fact no no the zero

386
00:18:23,230 --> 00:18:26,950
day was patched by the vendor silently

387
00:18:24,669 --> 00:18:28,809
was there any kind of like treatment

388
00:18:26,950 --> 00:18:32,110
that sort unfortunately we don't have

389
00:18:28,809 --> 00:18:34,210
insight into what we don't have access

390
00:18:32,110 --> 00:18:35,979
to the backends themselves so it'd be

391
00:18:34,210 --> 00:18:39,549
hard to verify that type of information

392
00:18:35,980 --> 00:18:41,440
but based on the some of the banner

393
00:18:39,549 --> 00:18:43,929
information we'll have additional

394
00:18:41,440 --> 00:18:47,470
patches for example in heartbleed case

395
00:18:43,929 --> 00:18:50,110
or open SSL you'll see the packed

396
00:18:47,470 --> 00:18:51,850
versions so we base that information

397
00:18:50,110 --> 00:18:54,459
based based on banners because we don't

398
00:18:51,850 --> 00:18:56,830
have insights on what's happening what's

399
00:18:54,460 --> 00:18:58,450
I've been patch and not on the on these

400
00:18:56,830 --> 00:18:59,740
backends so you're not trying to do like

401
00:18:58,450 --> 00:19:01,600
the Nestle's or Metasploit approach of

402
00:18:59,740 --> 00:19:03,610
like actually exercising vulnerable code

403
00:19:01,600 --> 00:19:05,320
paths to see like a is this thing oh

404
00:19:03,610 --> 00:19:07,840
yeah we we don't want to run any

405
00:19:05,320 --> 00:19:10,928
exploits on any any back-end that we

406
00:19:07,840 --> 00:19:14,039
don't own or have our mission so it's we

407
00:19:10,929 --> 00:19:15,930
limit it to the fingerprinting and

408
00:19:14,039 --> 00:19:18,640
correlation

409
00:19:15,930 --> 00:19:20,490
thank you thank you okay that's time

410
00:19:18,640 --> 00:19:26,269
speaker again

411
00:19:20,490 --> 00:19:26,269
[Applause]

