1
00:00:10,780 --> 00:00:14,260
thank you for the introduction my name

2
00:00:13,570 --> 00:00:16,960
is rumba

3
00:00:14,260 --> 00:00:19,060
I'm PhD student at Penn State University

4
00:00:16,960 --> 00:00:21,279
and as you can see from my shirt today

5
00:00:19,060 --> 00:00:23,950
I'm here to present some magic about the

6
00:00:21,279 --> 00:00:26,800
burning this is a joint work with my

7
00:00:23,950 --> 00:00:30,669
crab readers and other wiser from Penn

8
00:00:26,800 --> 00:00:33,100
State and UC Berkeley modern software in

9
00:00:30,670 --> 00:00:35,710
wet willy contents park to fix these

10
00:00:33,100 --> 00:00:38,350
bugs an important step is to really

11
00:00:35,710 --> 00:00:40,660
learn and find the root cause these

12
00:00:38,350 --> 00:00:44,079
processes were difficult because of the

13
00:00:40,660 --> 00:00:47,500
following two reasons first feed failure

14
00:00:44,079 --> 00:00:50,290
or occurs at the post-deploy stage as a

15
00:00:47,500 --> 00:00:53,790
stage the bad input is typically not

16
00:00:50,290 --> 00:00:58,629
horrible second the information life

17
00:00:53,790 --> 00:01:01,089
that's photo EGNOS is very limited in

18
00:00:58,629 --> 00:01:03,968
fact over the past few years our

19
00:01:01,090 --> 00:01:07,390
research community has developed many

20
00:01:03,969 --> 00:01:09,789
tools to diagonals software failure the

21
00:01:07,390 --> 00:01:14,289
information the commonly used is called

22
00:01:09,789 --> 00:01:16,689
an eco dump is Saphir generated after a

23
00:01:14,289 --> 00:01:20,200
program crash it contains information

24
00:01:16,689 --> 00:01:23,490
like memory snapshot and register value

25
00:01:20,200 --> 00:01:27,280
of a dead program recently the

26
00:01:23,490 --> 00:01:31,000
development of new hardware gives us the

27
00:01:27,280 --> 00:01:34,570
capability to treat program execution

28
00:01:31,000 --> 00:01:37,060
therefore a code um also contents the

29
00:01:34,570 --> 00:01:40,658
execution trees for training to the

30
00:01:37,060 --> 00:01:44,229
crash process using the code um I

31
00:01:40,659 --> 00:01:47,229
introduced above diagonals tools your EU

32
00:01:44,229 --> 00:01:50,679
tries back warrant analysis to pinpoint

33
00:01:47,229 --> 00:01:52,750
the root cause of a software failure the

34
00:01:50,680 --> 00:01:53,409
PCA idea of backward turned is as

35
00:01:52,750 --> 00:01:55,560
follows

36
00:01:53,409 --> 00:01:58,890
it takes as input the information

37
00:01:55,560 --> 00:02:02,259
contents in the memories in the code on

38
00:01:58,890 --> 00:02:03,970
the the starting from a bad pointer it

39
00:02:02,259 --> 00:02:06,310
will reverse the search along the

40
00:02:03,970 --> 00:02:09,508
occlusion trace and pinpoint all the

41
00:02:06,310 --> 00:02:12,489
instructions for training to the crash

42
00:02:09,508 --> 00:02:16,208
to perform an accurate backward trend

43
00:02:12,489 --> 00:02:18,910
analysis alias analysis is required as

44
00:02:16,209 --> 00:02:22,180
you can see here I am accurate alias

45
00:02:18,910 --> 00:02:24,160
analysis will lead to or 20 issue this

46
00:02:22,180 --> 00:02:28,150
issue could jeopardize that

47
00:02:24,160 --> 00:02:28,720
diagnose of software failure in this

48
00:02:28,150 --> 00:02:31,720
talk

49
00:02:28,720 --> 00:02:34,030
our first introduce is the existing work

50
00:02:31,720 --> 00:02:36,540
of memory aliens identification

51
00:02:34,030 --> 00:02:39,760
technique and show you the challenges

52
00:02:36,540 --> 00:02:42,220
motivated by this I will introduce our

53
00:02:39,760 --> 00:02:44,140
approach which leverage the magic of

54
00:02:42,220 --> 00:02:46,780
deep learning to identify memory

55
00:02:44,140 --> 00:02:50,309
readings and thus facilitate the root

56
00:02:46,780 --> 00:02:53,170
cause of software will cause diagonals

57
00:02:50,310 --> 00:02:55,510
weather site analysis is the most

58
00:02:53,170 --> 00:02:58,480
popular approach from memory aiding

59
00:02:55,510 --> 00:03:00,910
analysis technically it first of

60
00:02:58,480 --> 00:03:03,970
partition the memory into three

61
00:03:00,910 --> 00:03:07,210
destroying regions the it will determine

62
00:03:03,970 --> 00:03:10,720
the regions tied to instruction by using

63
00:03:07,210 --> 00:03:13,530
the following two strategies instruction

64
00:03:10,720 --> 00:03:17,380
semantics and forwarding flow analysis

65
00:03:13,530 --> 00:03:19,510
in particular for some instruction where

66
00:03:17,380 --> 00:03:21,880
they could easily complete region

67
00:03:19,510 --> 00:03:25,450
assignment based on the instructions

68
00:03:21,880 --> 00:03:28,480
named semantics take the figure on the

69
00:03:25,450 --> 00:03:31,030
reference set as an example as you can

70
00:03:28,480 --> 00:03:33,609
see here were say kudos an instruction

71
00:03:31,030 --> 00:03:37,209
language to stack region because of this

72
00:03:33,610 --> 00:03:41,080
year ESP memory and Link instruction

73
00:03:37,209 --> 00:03:44,230
land file to global region because of

74
00:03:41,080 --> 00:03:46,930
this absolute address for some other

75
00:03:44,230 --> 00:03:49,060
instruction USA performs a simple

76
00:03:46,930 --> 00:03:52,180
forwarded for analysis to determine

77
00:03:49,060 --> 00:03:55,510
their memory with their memory access

78
00:03:52,180 --> 00:03:57,610
regions here instruction landfall

79
00:03:55,510 --> 00:04:00,700
indicates a write to memory

80
00:03:57,610 --> 00:04:03,730
yikes so a forward to the full analysis

81
00:04:00,700 --> 00:04:04,510
was able to pinpoint that value of this

82
00:04:03,730 --> 00:04:07,329
EOG's

83
00:04:04,510 --> 00:04:10,329
comes from learn instruction land to

84
00:04:07,330 --> 00:04:13,150
which is a web malloc function call

85
00:04:10,330 --> 00:04:17,459
where they could learn determine that

86
00:04:13,150 --> 00:04:20,108
this e x-- memory is a hip rock size

87
00:04:17,459 --> 00:04:23,050
within each region that were they

88
00:04:20,108 --> 00:04:25,570
identified it is estimate the franklin

89
00:04:23,050 --> 00:04:28,570
region that each instruction a time

90
00:04:25,570 --> 00:04:31,510
clock size as you can see here in this

91
00:04:28,570 --> 00:04:33,729
table each instruction is a son with a

92
00:04:31,510 --> 00:04:36,860
sweetheart hole it it shows the region

93
00:04:33,729 --> 00:04:39,258
and off sides of a memory size

94
00:04:36,860 --> 00:04:42,500
take this magnets one fall in the first

95
00:04:39,259 --> 00:04:45,919
salon as I example it indicates this

96
00:04:42,500 --> 00:04:50,930
memory cell accesses a heat step region

97
00:04:45,919 --> 00:04:54,169
with offside one fall after a sunny

98
00:04:50,930 --> 00:04:56,750
instruction to each region where say

99
00:04:54,169 --> 00:04:59,900
could could father for sated software

100
00:04:56,750 --> 00:05:03,259
failure diagnosed to be specific it

101
00:04:59,900 --> 00:05:05,929
first utilized the region estimation

102
00:05:03,259 --> 00:05:09,860
results to construct a confusion matrix

103
00:05:05,930 --> 00:05:12,789
as you can say in this matrix aliens and

104
00:05:09,860 --> 00:05:16,190
anon aliens relationship are specified

105
00:05:12,789 --> 00:05:19,009
family we can perform backward analysis

106
00:05:16,190 --> 00:05:21,800
under the guidance of the identified

107
00:05:19,009 --> 00:05:26,270
aliens pair and as us pinpoint the root

108
00:05:21,800 --> 00:05:29,210
cause in reward where she cannot

109
00:05:26,270 --> 00:05:33,620
accurately pinpoint memory aliens as we

110
00:05:29,210 --> 00:05:36,979
expect the reason is as follows as I

111
00:05:33,620 --> 00:05:39,770
mentioned earlier the log of exclusion

112
00:05:36,979 --> 00:05:42,318
trees where there are specific hardware

113
00:05:39,770 --> 00:05:44,750
however this hardware have limited

114
00:05:42,319 --> 00:05:48,259
capability to installing all the

115
00:05:44,750 --> 00:05:50,960
instruction executed this means that the

116
00:05:48,259 --> 00:05:54,860
execution trees Nikodim is surely

117
00:05:50,960 --> 00:05:57,919
incomplete incomplete trees will

118
00:05:54,860 --> 00:06:00,800
inference was a upon his ability to

119
00:05:57,919 --> 00:06:03,650
identify memory readings in the formal

120
00:06:00,800 --> 00:06:05,840
example as also shown here through

121
00:06:03,650 --> 00:06:08,359
forward in full analysis where they

122
00:06:05,840 --> 00:06:11,619
could determine that instruction learn

123
00:06:08,360 --> 00:06:14,330
four books essays hip region however

124
00:06:11,620 --> 00:06:16,159
result of a day of recording all the

125
00:06:14,330 --> 00:06:18,770
instructions where they can no longer

126
00:06:16,159 --> 00:06:21,710
trees where this valley of e^x

127
00:06:18,770 --> 00:06:24,229
comes from as a result it cannot

128
00:06:21,710 --> 00:06:28,580
determine which region does the e^x

129
00:06:24,229 --> 00:06:31,340
memory refers to in the following error

130
00:06:28,580 --> 00:06:34,520
introduced how it is our approach to

131
00:06:31,340 --> 00:06:37,068
solve this problem over the past few

132
00:06:34,520 --> 00:06:40,060
years there are many techniques that use

133
00:06:37,069 --> 00:06:42,529
deep learning to perform binary analysis

134
00:06:40,060 --> 00:06:45,259
technically they basically use similar

135
00:06:42,529 --> 00:06:47,839
architecture this architecture this

136
00:06:45,259 --> 00:06:50,080
network architecture takes us machine

137
00:06:47,839 --> 00:06:52,680
code directly as input

138
00:06:50,080 --> 00:06:55,359
I'll put the prediction accordingly

139
00:06:52,680 --> 00:06:58,240
however as I will surely as I will show

140
00:06:55,360 --> 00:07:01,360
later this network structure cannot

141
00:06:58,240 --> 00:07:04,000
haywire high accuracy because they meets

142
00:07:01,360 --> 00:07:07,509
the instruction information within the

143
00:07:04,000 --> 00:07:10,060
execution sequence inspired by this work

144
00:07:07,509 --> 00:07:12,909
we pop we propose to use a heretical

145
00:07:10,060 --> 00:07:15,699
recurrent night for predicting memory

146
00:07:12,909 --> 00:07:18,580
region title each instruction in

147
00:07:15,699 --> 00:07:22,180
execution trace the diagram here shows

148
00:07:18,580 --> 00:07:24,969
the entire process first which we know

149
00:07:22,180 --> 00:07:27,550
in your network to be to predict regions

150
00:07:24,969 --> 00:07:31,240
and then utilize the region information

151
00:07:27,550 --> 00:07:33,669
to assist traditional West a in memory

152
00:07:31,240 --> 00:07:37,900
region at the vacation and aliens and

153
00:07:33,669 --> 00:07:40,479
vacations as to our proposal Network it

154
00:07:37,900 --> 00:07:44,710
takes as input a bunch of key so

155
00:07:40,479 --> 00:07:47,680
somebody machine code it will transform

156
00:07:44,710 --> 00:07:51,068
the machine code with each instruction

157
00:07:47,680 --> 00:07:53,409
into an embedding after this step we

158
00:07:51,069 --> 00:07:55,860
will have a sequence of inviting and

159
00:07:53,409 --> 00:07:58,990
each embedding encoded information

160
00:07:55,860 --> 00:08:02,020
within each instruction you can take as

161
00:07:58,990 --> 00:08:04,120
a hidden reputation or some other type

162
00:08:02,020 --> 00:08:08,710
of it's just hidden repetition of each

163
00:08:04,120 --> 00:08:11,259
instruction within execution trees with

164
00:08:08,710 --> 00:08:13,900
an input this sequence of embedding of

165
00:08:11,259 --> 00:08:16,810
instructions into an classifier and

166
00:08:13,900 --> 00:08:20,979
obtain the predicted region for each

167
00:08:16,810 --> 00:08:24,279
instruction technically or network

168
00:08:20,979 --> 00:08:26,889
contents two parts the first part is an

169
00:08:24,279 --> 00:08:29,169
embedding network it start with the word

170
00:08:26,889 --> 00:08:31,270
inviting mechanism this world

171
00:08:29,169 --> 00:08:33,819
environment Kingdom which transform the

172
00:08:31,270 --> 00:08:36,640
discrete instruction into continuous

173
00:08:33,820 --> 00:08:39,990
weather for further use though as I

174
00:08:36,640 --> 00:08:42,640
mentioned earlier we will we will

175
00:08:39,990 --> 00:08:43,299
transform each instruction into an

176
00:08:42,640 --> 00:08:45,699
embedding

177
00:08:43,299 --> 00:08:48,609
which we call it instruction embedding

178
00:08:45,699 --> 00:08:53,170
here will utilize the beta rational or

179
00:08:48,610 --> 00:08:55,810
as TM to perform this task the second

180
00:08:53,170 --> 00:08:59,079
part of our network is a classification

181
00:08:55,810 --> 00:09:01,930
model is also a better rationalized term

182
00:08:59,079 --> 00:09:03,180
the take has input than instruction

183
00:09:01,930 --> 00:09:06,750
embeddings on

184
00:09:03,180 --> 00:09:10,979
I'll put the region out who the raging

185
00:09:06,750 --> 00:09:13,890
information for each instruction in the

186
00:09:10,980 --> 00:09:17,520
dress of this talk our introduced how I

187
00:09:13,890 --> 00:09:20,040
evaluate our approach we first to

188
00:09:17,520 --> 00:09:24,060
construct our data type for training

189
00:09:20,040 --> 00:09:27,089
sites with like 78 programs in canoe

190
00:09:24,060 --> 00:09:29,099
software package in particular we run

191
00:09:27,090 --> 00:09:31,380
this program and gather that they are

192
00:09:29,100 --> 00:09:34,290
execution trees along with the memory

193
00:09:31,380 --> 00:09:37,020
exercise to test our train the neural

194
00:09:34,290 --> 00:09:40,680
network we randomly select thought he

195
00:09:37,020 --> 00:09:43,470
reward when abilities from Expo DB 4-h

196
00:09:40,680 --> 00:09:46,410
to an ability which figure it by running

197
00:09:43,470 --> 00:09:48,780
the POS a programs and the correct

198
00:09:46,410 --> 00:09:53,329
execution trees along with some emmerich

199
00:09:48,780 --> 00:09:56,430
sense it should be noted here that this

200
00:09:53,330 --> 00:09:59,040
this one about freezes have limited size

201
00:09:56,430 --> 00:10:01,260
because I'm as I mentioned earlier the

202
00:09:59,040 --> 00:10:03,510
software have limited a buffer storage

203
00:10:01,260 --> 00:10:04,819
at the hardware have limited buffer

204
00:10:03,510 --> 00:10:07,620
storage

205
00:10:04,820 --> 00:10:09,930
we didn't render and at I stubborn your

206
00:10:07,620 --> 00:10:13,050
network by using the data side I

207
00:10:09,930 --> 00:10:15,170
introduced of all we also compare it

208
00:10:13,050 --> 00:10:17,400
with many other machine learning models

209
00:10:15,170 --> 00:10:20,819
including traditional sequential model

210
00:10:17,400 --> 00:10:23,220
such as hidden Markov model conditional

211
00:10:20,820 --> 00:10:26,160
random field and some modern deepening

212
00:10:23,220 --> 00:10:28,680
based on model it's just different kinds

213
00:10:26,160 --> 00:10:31,589
of recurrent nights for them for iOS TM

214
00:10:28,680 --> 00:10:33,150
and gate a unity recurrent in the

215
00:10:31,590 --> 00:10:35,730
following I will show you the

216
00:10:33,150 --> 00:10:38,880
performance of our approach from three

217
00:10:35,730 --> 00:10:40,860
different perspective first I will

218
00:10:38,880 --> 00:10:43,230
compare the model performance of our

219
00:10:40,860 --> 00:10:46,500
model with some with the baseline model

220
00:10:43,230 --> 00:10:49,320
I mentioned before then I will compare

221
00:10:46,500 --> 00:10:52,220
Depot as a with where say in the

222
00:10:49,320 --> 00:10:55,500
effectiveness of glucose diagonals

223
00:10:52,220 --> 00:10:58,620
last but not least I will compare deep

224
00:10:55,500 --> 00:11:01,620
USA with another existing glucose

225
00:10:58,620 --> 00:11:07,470
diagonals to pump in terms of efficiency

226
00:11:01,620 --> 00:11:09,920
for model performance as you can see

227
00:11:07,470 --> 00:11:11,960
from this table that are both

228
00:11:09,920 --> 00:11:16,490
significantly out performance

229
00:11:11,960 --> 00:11:19,399
traditional ml model that is hmm and

230
00:11:16,490 --> 00:11:21,560
see I have this is because that what our

231
00:11:19,399 --> 00:11:24,410
model are all kinds of deepening based

232
00:11:21,560 --> 00:11:26,569
model have higher model capability the

233
00:11:24,410 --> 00:11:28,969
traditional models it means they can

234
00:11:26,570 --> 00:11:32,589
basically learn like more complex atom

235
00:11:28,970 --> 00:11:35,209
or complex who's hidden like it's hidden

236
00:11:32,589 --> 00:11:38,779
within the the the training data you

237
00:11:35,209 --> 00:11:41,719
have but compared to other machine

238
00:11:38,779 --> 00:11:44,600
learning based models or approach

239
00:11:41,720 --> 00:11:48,080
demonstrate that performance improvement

240
00:11:44,600 --> 00:11:52,100
however it does not indicate or design

241
00:11:48,080 --> 00:11:54,230
is redundant in fact even only pointone

242
00:11:52,100 --> 00:11:57,080
percentage of improvement in either

243
00:11:54,230 --> 00:12:00,529
precision or recall we could reduce the

244
00:11:57,080 --> 00:12:03,260
amount of for supportive of us Nikhil by

245
00:12:00,529 --> 00:12:05,450
thousands or even tens orders this

246
00:12:03,260 --> 00:12:08,360
amount of improvement in regional

247
00:12:05,450 --> 00:12:11,510
assignment will increase the accuracy of

248
00:12:08,360 --> 00:12:15,260
aliens identification and thus help

249
00:12:11,510 --> 00:12:18,500
through cost diagonals here is a result

250
00:12:15,260 --> 00:12:20,450
of glucose diagonals first recall that

251
00:12:18,500 --> 00:12:23,570
we only have limited styles of actuation

252
00:12:20,450 --> 00:12:26,570
trees to evaluate the inference of trees

253
00:12:23,570 --> 00:12:29,120
lands poor approach where were the lands

254
00:12:26,570 --> 00:12:32,000
of instruction cleared to do cost and

255
00:12:29,120 --> 00:12:34,100
recall the 918th relationship that

256
00:12:32,000 --> 00:12:37,190
identified by our approach and the

257
00:12:34,100 --> 00:12:40,640
traditional west a as you can see from

258
00:12:37,190 --> 00:12:43,279
this figure we have first found out that

259
00:12:40,640 --> 00:12:46,069
the execution trees learns indeed

260
00:12:43,279 --> 00:12:48,860
inference the alias analysis accuracy to

261
00:12:46,070 --> 00:12:51,950
some degree but more importantly will

262
00:12:48,860 --> 00:12:54,920
cause all the settings our model

263
00:12:51,950 --> 00:12:57,950
significant beats traditional west a in

264
00:12:54,920 --> 00:13:01,910
aliens identification occurs in as a

265
00:12:57,950 --> 00:13:04,040
result deep west a is small effective in

266
00:13:01,910 --> 00:13:06,920
funding rule cost than traditional west

267
00:13:04,040 --> 00:13:10,099
a as you can see in this table

268
00:13:06,920 --> 00:13:14,390
d po sa put identify term module calls

269
00:13:10,100 --> 00:13:17,329
than traditional where seen lots of our

270
00:13:14,390 --> 00:13:21,649
knowledge i will compare deep osa with

271
00:13:17,329 --> 00:13:22,579
palm as its mentioned before palm also

272
00:13:21,649 --> 00:13:25,940
diagonals

273
00:13:22,579 --> 00:13:27,520
program crush using alias analysis and

274
00:13:25,940 --> 00:13:30,850
backward hunt

275
00:13:27,520 --> 00:13:33,850
to be specific it's utilized do a

276
00:13:30,850 --> 00:13:36,940
reverse exclusion approach to analysis

277
00:13:33,850 --> 00:13:40,959
aliens relationship this approach which

278
00:13:36,940 --> 00:13:43,029
is computationally intensive here is the

279
00:13:40,959 --> 00:13:47,739
video to demonstrate the speed

280
00:13:43,029 --> 00:13:49,810
difference between pump and West a the

281
00:13:47,740 --> 00:13:57,880
screen on the right hand side is where

282
00:13:49,810 --> 00:14:01,630
say and left hand side is pump as we can

283
00:13:57,880 --> 00:14:06,000
see here after 9 seconds tsa finished

284
00:14:01,630 --> 00:14:06,000
diagonals and pump is still running and

285
00:14:06,240 --> 00:14:14,740
after about 19 seconds pump finished

286
00:14:10,440 --> 00:14:19,570
actually on average depot si is 2 to 10

287
00:14:14,740 --> 00:14:23,320
times faster than pump to conclude this

288
00:14:19,570 --> 00:14:26,470
talk conventional West a suffer from in

289
00:14:23,320 --> 00:14:30,399
arid areas analysis when executing trees

290
00:14:26,470 --> 00:14:32,649
is incomplete West a combined with deep

291
00:14:30,399 --> 00:14:35,730
learning to the improved alias analysis

292
00:14:32,649 --> 00:14:40,630
in binary analysis and thus facilitate

293
00:14:35,730 --> 00:14:43,589
software failure diagonals DPS a could

294
00:14:40,630 --> 00:14:47,290
serve as an efficient and effective

295
00:14:43,589 --> 00:14:50,860
diagonals to to pinpoint root cause of a

296
00:14:47,290 --> 00:14:53,860
software failure or code and data as

297
00:14:50,860 --> 00:14:56,709
well as thought our model can be is

298
00:14:53,860 --> 00:14:58,360
published in this link thank you all for

299
00:14:56,709 --> 00:14:59,959
the attention now I'm ready for the

300
00:14:58,360 --> 00:15:05,619
questions

301
00:14:59,960 --> 00:15:05,619
[Applause]

302
00:15:14,550 --> 00:15:19,770
hi Brendan Dolan Gavin and why you I

303
00:15:17,660 --> 00:15:21,829
hopefully didn't just miss this in the

304
00:15:19,770 --> 00:15:25,949
talk but there are a lot of instructions

305
00:15:21,830 --> 00:15:28,230
where they access many different types

306
00:15:25,950 --> 00:15:30,810
of memory depending on their context so

307
00:15:28,230 --> 00:15:33,390
like a mem copy might be called

308
00:15:30,810 --> 00:15:35,189
different context access copies between

309
00:15:33,390 --> 00:15:36,689
the heatman stack or things like that

310
00:15:35,190 --> 00:15:40,080
so did you have to take that into

311
00:15:36,690 --> 00:15:44,279
account somehow when doing your training

312
00:15:40,080 --> 00:15:46,260
set analysis yeah we actually like

313
00:15:44,279 --> 00:15:48,240
cracked our training size by using

314
00:15:46,260 --> 00:15:51,240
different kind of program we believe

315
00:15:48,240 --> 00:15:53,520
that it will cover the pace you just

316
00:15:51,240 --> 00:15:55,589
mentioned we just make our training set

317
00:15:53,520 --> 00:15:58,079
as diverse as possible and train the

318
00:15:55,589 --> 00:15:59,700
neural network that we hope it actually

319
00:15:58,080 --> 00:16:01,350
the new network indeed the kind like

320
00:15:59,700 --> 00:16:06,230
memory or learn different kind of

321
00:16:01,350 --> 00:16:06,230
situations that you mentioned before ok

322
00:16:07,970 --> 00:16:14,970
any other questions yes I have a support

323
00:16:13,110 --> 00:16:17,660
where we're where else would you

324
00:16:14,970 --> 00:16:20,070
sprinkle like this deep learning dust

325
00:16:17,660 --> 00:16:21,719
what are their analyses would you like

326
00:16:20,070 --> 00:16:23,070
what's next like one of the analysis

327
00:16:21,720 --> 00:16:25,620
would would you want to sprinkle some of

328
00:16:23,070 --> 00:16:29,250
this mmm that's a good question I think

329
00:16:25,620 --> 00:16:30,899
currently if you like we're only the

330
00:16:29,250 --> 00:16:33,600
region right we only like what some

331
00:16:30,899 --> 00:16:36,540
memory to each region but what we as it

332
00:16:33,600 --> 00:16:39,060
is it can all only assign region but

333
00:16:36,540 --> 00:16:41,730
also the object or not that step is to

334
00:16:39,060 --> 00:16:44,849
try to use deep learning to identify not

335
00:16:41,730 --> 00:16:47,520
only regions but also the object it's

336
00:16:44,850 --> 00:16:51,910
like more fun grading tonight using tea

337
00:16:47,520 --> 00:16:56,350
party alright let's take them again

338
00:16:51,910 --> 00:16:56,350
[Applause]

