1
00:00:10,950 --> 00:00:15,030
thank you so hi everybody my name is

2
00:00:13,260 --> 00:00:16,350
Cara Cannella I'm from khartoum

3
00:00:15,030 --> 00:00:18,390
university of technology and I'm here

4
00:00:16,350 --> 00:00:19,800
the percent of paper a systematic

5
00:00:18,390 --> 00:00:21,960
evaluation of trends and execution

6
00:00:19,800 --> 00:00:23,220
attacks defenses I want to start the

7
00:00:21,960 --> 00:00:25,680
presentation with a little bit of

8
00:00:23,220 --> 00:00:28,500
motivation what we wanted to achieve in

9
00:00:25,680 --> 00:00:30,240
this paper so in the whole field of

10
00:00:28,500 --> 00:00:31,890
trance and execution texts we have this

11
00:00:30,240 --> 00:00:36,210
very confusing naming scheme with

12
00:00:31,890 --> 00:00:38,489
variant 1 variant to foreshadow and at

13
00:00:36,210 --> 00:00:41,190
one point it becomes very confusing so

14
00:00:38,489 --> 00:00:44,190
we wanted to present a new one new

15
00:00:41,190 --> 00:00:46,170
classification that makes more sense we

16
00:00:44,190 --> 00:00:47,280
also wanted to do a systematic analysis

17
00:00:46,170 --> 00:00:49,620
to show that there are still new

18
00:00:47,280 --> 00:00:51,780
variants out there and if we do take a

19
00:00:49,620 --> 00:00:54,659
look a closer look at it we can actually

20
00:00:51,780 --> 00:00:57,269
find new ones there are also a lot of

21
00:00:54,659 --> 00:00:59,100
defenses they cost performance and we

22
00:00:57,269 --> 00:01:01,500
wanted to show how much performance -

23
00:00:59,100 --> 00:01:04,409
the cost and where they actually work or

24
00:01:01,500 --> 00:01:07,530
not and we also wanted to do like

25
00:01:04,409 --> 00:01:09,390
private prevalence analysis in the Linux

26
00:01:07,530 --> 00:01:11,330
comes to how many Spectre gadgets

27
00:01:09,390 --> 00:01:14,760
actually are there in the Linux counter

28
00:01:11,330 --> 00:01:16,439
so let's start with melton what is Moton

29
00:01:14,760 --> 00:01:18,930
well melton uses data in the out of

30
00:01:16,439 --> 00:01:21,779
order execution before the permission

31
00:01:18,930 --> 00:01:24,630
check is is actually done so with that

32
00:01:21,780 --> 00:01:26,640
we can read any kernel address and the

33
00:01:24,630 --> 00:01:30,270
this is easy because the physical memory

34
00:01:26,640 --> 00:01:33,030
is usually mapped in the kernel so this

35
00:01:30,270 --> 00:01:37,259
gives us the ability to read arbitrary

36
00:01:33,030 --> 00:01:40,890
memory and memory and afterwards we were

37
00:01:37,259 --> 00:01:44,039
able to fix it with in software kpti new

38
00:01:40,890 --> 00:01:46,020
your CPUs already have the fix in the

39
00:01:44,039 --> 00:01:46,469
hardware so we don't need K BTR for that

40
00:01:46,020 --> 00:01:49,530
anymore

41
00:01:46,469 --> 00:01:52,199
and afterwards it seems like the problem

42
00:01:49,530 --> 00:01:55,499
is solved and simple because there's no

43
00:01:52,200 --> 00:01:57,149
attack surface left anymore and this is

44
00:01:55,499 --> 00:01:59,490
what everyone thought but as it turns

45
00:01:57,149 --> 00:02:01,530
out meltdown is a whole category of

46
00:01:59,490 --> 00:02:04,140
vulnerabilities it's not just the single

47
00:02:01,530 --> 00:02:06,869
instance it's not only to use accessible

48
00:02:04,140 --> 00:02:09,419
check that fails if we take a look at

49
00:02:06,869 --> 00:02:13,140
the page table entry we can see here we

50
00:02:09,419 --> 00:02:14,700
have many different bits in the page

51
00:02:13,140 --> 00:02:16,920
table entry we have to use the

52
00:02:14,700 --> 00:02:18,179
supervisor bit which was shown in the

53
00:02:16,920 --> 00:02:21,059
original marathon paper

54
00:02:18,180 --> 00:02:23,879
the present bit was shown in foreshadow

55
00:02:21,060 --> 00:02:24,760
that this is causes some problems but we

56
00:02:23,879 --> 00:02:27,220
thought ok

57
00:02:24,760 --> 00:02:29,590
what happens if would trigger we use

58
00:02:27,220 --> 00:02:32,409
some of the other bits and with the user

59
00:02:29,590 --> 00:02:34,329
supervise a bit or depressant but if you

60
00:02:32,409 --> 00:02:36,670
cause an exception with those you get a

61
00:02:34,329 --> 00:02:38,829
page fault so in the first step we

62
00:02:36,670 --> 00:02:39,280
thought okay what else causes the page

63
00:02:38,829 --> 00:02:41,530
fault

64
00:02:39,280 --> 00:02:43,780
as you mentioned melton us and here we

65
00:02:41,530 --> 00:02:46,690
can see the first instance of our new

66
00:02:43,780 --> 00:02:49,390
naming scheme instead of calling it

67
00:02:46,690 --> 00:02:52,390
something like India which and it was

68
00:02:49,390 --> 00:02:54,309
called respective variant free or side

69
00:02:52,390 --> 00:02:56,529
channel vulnerability free we just call

70
00:02:54,310 --> 00:02:59,170
it melt down and use the bit that

71
00:02:56,530 --> 00:03:00,819
actually causes us to get there as a

72
00:02:59,170 --> 00:03:03,608
naming scheme and with that we were able

73
00:03:00,819 --> 00:03:06,458
to show which melt on we can leak data

74
00:03:03,609 --> 00:03:10,359
from the l1 from the l3 from line fill

75
00:03:06,459 --> 00:03:14,970
buffer for hair is now melt on P as it

76
00:03:10,359 --> 00:03:17,260
is the present bit melt on our W was

77
00:03:14,970 --> 00:03:20,310
originally called spectrum one point two

78
00:03:17,260 --> 00:03:22,929
but is actually a melt on variant and

79
00:03:20,310 --> 00:03:25,000
here we come to the first new one that

80
00:03:22,930 --> 00:03:28,889
we found during our systematic analysis

81
00:03:25,000 --> 00:03:32,620
so melt on B K it uses interest memory

82
00:03:28,889 --> 00:03:34,810
protection keys which they exhibit the

83
00:03:32,620 --> 00:03:37,389
same problem the permission check is

84
00:03:34,810 --> 00:03:41,470
done too late we get the data and can

85
00:03:37,389 --> 00:03:42,669
recover it there are also so with all

86
00:03:41,470 --> 00:03:45,310
those we were able to show that they

87
00:03:42,669 --> 00:03:48,730
work but there are also some that we

88
00:03:45,310 --> 00:03:50,829
simply failed in showing any melt on

89
00:03:48,730 --> 00:03:54,849
type effects of the words so like melt

90
00:03:50,829 --> 00:03:59,049
on XD with non-executable or melt on sm

91
00:03:54,849 --> 00:04:02,230
with us map and we saw no trends in

92
00:03:59,049 --> 00:04:04,239
execution following those when we

93
00:04:02,230 --> 00:04:07,599
thought okay what is actually the root

94
00:04:04,239 --> 00:04:08,680
cause behind melt on and if you look at

95
00:04:07,599 --> 00:04:12,190
something like this we have an

96
00:04:08,680 --> 00:04:15,220
instruction and our instruction tries to

97
00:04:12,190 --> 00:04:18,039
read data and the subsequent instruction

98
00:04:15,220 --> 00:04:20,709
has a data dependency on the previous

99
00:04:18,039 --> 00:04:22,330
instruction normally we cause an

100
00:04:20,709 --> 00:04:25,659
exception in our current instruction and

101
00:04:22,330 --> 00:04:27,280
would expect we just throw away the

102
00:04:25,659 --> 00:04:30,159
value because we're not allowed to read

103
00:04:27,280 --> 00:04:31,809
it but as it turns out with meltdown the

104
00:04:30,159 --> 00:04:35,860
data is forwarded to a subsequent

105
00:04:31,810 --> 00:04:38,409
instruction with that instruction can do

106
00:04:35,860 --> 00:04:40,539
whatever it wants until the previous

107
00:04:38,409 --> 00:04:44,349
Construction is retired only at this

108
00:04:40,539 --> 00:04:46,209
point is the is the exception actually

109
00:04:44,349 --> 00:04:49,119
raised even though the CPU knows

110
00:04:46,209 --> 00:04:53,679
beforehand that I'm not supposed to do

111
00:04:49,119 --> 00:04:56,649
anything with that data so we looked at

112
00:04:53,679 --> 00:04:59,378
some we continued looking before okay

113
00:04:56,649 --> 00:05:01,719
the transient course is that we get a

114
00:04:59,379 --> 00:05:05,349
fault so every time we see a fault we

115
00:05:01,719 --> 00:05:08,229
accented chance and execution we have a

116
00:05:05,349 --> 00:05:10,360
Melton type attack and then we get a lot

117
00:05:08,229 --> 00:05:13,149
of different variants the ones in red

118
00:05:10,360 --> 00:05:15,159
they we were able to show those we have

119
00:05:13,149 --> 00:05:18,099
already seen the ones cause per page

120
00:05:15,159 --> 00:05:21,519
fault Melton and MS lazy FB where you

121
00:05:18,099 --> 00:05:26,409
just get data from the floating-point

122
00:05:21,519 --> 00:05:29,649
unit melt on chibi was melt on variant

123
00:05:26,409 --> 00:05:33,129
3.8 previously so will system register

124
00:05:29,649 --> 00:05:35,249
read and then with Melton PR we get the

125
00:05:33,129 --> 00:05:37,599
next instance where we discovered okay

126
00:05:35,249 --> 00:05:41,979
those were previously not known

127
00:05:37,599 --> 00:05:45,669
Melton and px simply uses the interim px

128
00:05:41,979 --> 00:05:48,039
an extension and with Melton P B and E

129
00:05:45,669 --> 00:05:54,159
it's it's bounty bound instruction on

130
00:05:48,039 --> 00:05:55,688
old 30 bit two systems and with the

131
00:05:54,159 --> 00:05:57,909
bound instruction we were actually able

132
00:05:55,689 --> 00:06:00,819
to show that even though everybody

133
00:05:57,909 --> 00:06:03,998
claimed AMD is not affected by meltdown

134
00:06:00,819 --> 00:06:06,249
effect they were actually affected on

135
00:06:03,999 --> 00:06:08,319
the uncertain CPUs with the bound

136
00:06:06,249 --> 00:06:12,999
instruction so this is the first Melton

137
00:06:08,319 --> 00:06:14,919
style variant on an AMD system and all

138
00:06:12,999 --> 00:06:18,969
the others like Melton AC is alignment

139
00:06:14,919 --> 00:06:21,818
check / 0 stack segmentation fault we

140
00:06:18,969 --> 00:06:26,319
saw no trans institution following those

141
00:06:21,819 --> 00:06:29,559
and those faults but maybe our proof

142
00:06:26,319 --> 00:06:32,229
concepts simply failed to show those so

143
00:06:29,559 --> 00:06:35,860
I would encourage everybody to look into

144
00:06:32,229 --> 00:06:38,949
those as well and with that we have

145
00:06:35,860 --> 00:06:41,439
discussed our design what we have done

146
00:06:38,949 --> 00:06:43,929
with meltdown but as it turns out Melton

147
00:06:41,439 --> 00:06:45,159
is not the only instance of chance and

148
00:06:43,929 --> 00:06:48,128
execution types because there's also

149
00:06:45,159 --> 00:06:51,639
spectrum and respect that we don't

150
00:06:48,129 --> 00:06:52,270
exploit thoughts but instead data or

151
00:06:51,639 --> 00:06:55,419
control

152
00:06:52,270 --> 00:06:57,400
predictions so we have our root cause

153
00:06:55,419 --> 00:06:59,349
here we have an instruction that tries

154
00:06:57,400 --> 00:07:02,020
to predict based on what do you see PU

155
00:06:59,349 --> 00:07:04,210
has learned in the past I have done the

156
00:07:02,020 --> 00:07:07,840
last five times I've been at this branch

157
00:07:04,210 --> 00:07:09,430
I went in that direction now I'm predict

158
00:07:07,840 --> 00:07:12,310
that I'm doing the same thing again

159
00:07:09,430 --> 00:07:13,960
so we predict the control flow or a even

160
00:07:12,310 --> 00:07:17,110
data flow and the subsequent

161
00:07:13,960 --> 00:07:20,680
instructions then start executing like

162
00:07:17,110 --> 00:07:23,380
they would normally would but the at one

163
00:07:20,680 --> 00:07:26,139
point the CPU realizes okay my

164
00:07:23,380 --> 00:07:30,250
prediction is wrong and it flushes the

165
00:07:26,139 --> 00:07:32,080
pipeline and does not delete everything

166
00:07:30,250 --> 00:07:35,919
like the micro architectural state

167
00:07:32,080 --> 00:07:40,240
changes in de cache or DLP it doesn't

168
00:07:35,919 --> 00:07:43,359
revert those so the modern CPUs have

169
00:07:40,240 --> 00:07:45,550
many of those predictors there is the

170
00:07:43,360 --> 00:07:48,720
branch taken not taken this is usually

171
00:07:45,550 --> 00:07:50,800
done by the pattern history table and

172
00:07:48,720 --> 00:07:52,500
for simple naming convention because

173
00:07:50,800 --> 00:07:56,229
this was originally expected to be one

174
00:07:52,500 --> 00:07:59,259
we call the new variant spectra PhDs are

175
00:07:56,229 --> 00:08:00,969
always Specter - and then the de Micro

176
00:07:59,259 --> 00:08:03,820
architectural elements that we miss

177
00:08:00,969 --> 00:08:05,729
train we have to call jump destination

178
00:08:03,820 --> 00:08:08,440
this is the branch target buffer

179
00:08:05,729 --> 00:08:12,280
function return destination as the

180
00:08:08,440 --> 00:08:14,889
return stack buffer and then professor

181
00:08:12,280 --> 00:08:17,258
yell we check what we try to predict

182
00:08:14,889 --> 00:08:20,830
better a load matches a previous store

183
00:08:17,259 --> 00:08:23,050
and what we also saw is that some of

184
00:08:20,830 --> 00:08:25,780
those are even shared among processes

185
00:08:23,050 --> 00:08:28,300
and we thought okay what can we do with

186
00:08:25,780 --> 00:08:32,049
that if they are shared in the in the

187
00:08:28,300 --> 00:08:34,089
original Spectre they miss change the

188
00:08:32,049 --> 00:08:36,728
actual branch in the victim that they

189
00:08:34,089 --> 00:08:38,800
laid on wanted to exploit but as it

190
00:08:36,729 --> 00:08:41,079
turns out the the pattern history table

191
00:08:38,799 --> 00:08:43,718
in inspector PhD attacked for instance

192
00:08:41,078 --> 00:08:47,170
is indexed by either a sub set of bits

193
00:08:43,719 --> 00:08:50,020
or a hash of some of some bits of the

194
00:08:47,170 --> 00:08:52,540
address and we can find a congruent

195
00:08:50,020 --> 00:08:54,819
address that that maps to the same entry

196
00:08:52,540 --> 00:08:56,770
and chemistry in in the same address

197
00:08:54,820 --> 00:09:00,310
space but it have different virtual

198
00:08:56,770 --> 00:09:02,199
address well then it turns out that

199
00:09:00,310 --> 00:09:04,819
those predictors are even shared

200
00:09:02,199 --> 00:09:07,459
sometimes across hyper threats on

201
00:09:04,820 --> 00:09:09,530
even just between processes on the same

202
00:09:07,460 --> 00:09:11,540
hype hype effort so we thought okay

203
00:09:09,530 --> 00:09:14,000
maybe we can do something with that as

204
00:09:11,540 --> 00:09:16,130
well as it turns out we can do exactly

205
00:09:14,000 --> 00:09:17,780
the same thing just in a different

206
00:09:16,130 --> 00:09:20,240
address space so in the cross address

207
00:09:17,780 --> 00:09:22,699
space scenario and the in-place fair and

208
00:09:20,240 --> 00:09:25,570
an attacker simply mirrors the the

209
00:09:22,700 --> 00:09:27,920
address space of the victim and

210
00:09:25,570 --> 00:09:30,350
mischance the location let's the victim

211
00:09:27,920 --> 00:09:33,650
run and it encodes some value in the

212
00:09:30,350 --> 00:09:36,470
cache and we can do the same thing in

213
00:09:33,650 --> 00:09:40,819
the out of place scenario similar to the

214
00:09:36,470 --> 00:09:43,430
same address space case and with that we

215
00:09:40,820 --> 00:09:44,960
get many different variants so in

216
00:09:43,430 --> 00:09:46,790
mountain we have seen that the transient

217
00:09:44,960 --> 00:09:49,730
calls for us to get indeed giants and

218
00:09:46,790 --> 00:09:52,370
execution domain is default for spectre

219
00:09:49,730 --> 00:09:55,400
it is the prediction and then in our

220
00:09:52,370 --> 00:09:56,930
second level of the of our tree we have

221
00:09:55,400 --> 00:10:00,800
all the different variants so respect

222
00:09:56,930 --> 00:10:02,359
the phd BTB RSP then we also have the

223
00:10:00,800 --> 00:10:05,479
cross address space and same address

224
00:10:02,360 --> 00:10:07,670
space scenario and this gives us a whole

225
00:10:05,480 --> 00:10:11,060
different a whole lot of different

226
00:10:07,670 --> 00:10:12,740
variants of Spector and all of those

227
00:10:11,060 --> 00:10:14,540
that are in red so pretty much all of

228
00:10:12,740 --> 00:10:15,980
all of them we were able to show in

229
00:10:14,540 --> 00:10:20,000
proof of concept implementations that

230
00:10:15,980 --> 00:10:22,640
they work now we have many different

231
00:10:20,000 --> 00:10:25,910
variants but how how do we fix those

232
00:10:22,640 --> 00:10:27,949
well turns out Spectre is not a bug like

233
00:10:25,910 --> 00:10:30,560
it was for Melton so it's a lot harder

234
00:10:27,950 --> 00:10:32,960
to to mitigate those because it is a

235
00:10:30,560 --> 00:10:35,569
useful optimization a lot of our

236
00:10:32,960 --> 00:10:39,530
performance of modern CPUs depends on

237
00:10:35,570 --> 00:10:40,870
that optimization so fixing it is not as

238
00:10:39,530 --> 00:10:43,790
simple as with meltdown

239
00:10:40,870 --> 00:10:46,910
we need workarounds for critical code

240
00:10:43,790 --> 00:10:48,860
parts so the next step we then looked at

241
00:10:46,910 --> 00:10:53,540
different mitigations that have been

242
00:10:48,860 --> 00:10:55,370
proposed over the past past year and we

243
00:10:53,540 --> 00:10:57,560
saw Patterson there's a common theme

244
00:10:55,370 --> 00:11:00,200
there's a pattern with those medications

245
00:10:57,560 --> 00:11:02,180
and we can categorize those in three

246
00:11:00,200 --> 00:11:04,220
different categories in the first one we

247
00:11:02,180 --> 00:11:06,439
simply try to mitigate or reduce the

248
00:11:04,220 --> 00:11:09,110
accuracy of our cover channel because if

249
00:11:06,440 --> 00:11:11,990
the accuracy is low it's a lot harder

250
00:11:09,110 --> 00:11:13,820
for an attacker to retrieve the data in

251
00:11:11,990 --> 00:11:15,830
the second one we can mitigate or board

252
00:11:13,820 --> 00:11:18,269
the speculation if we detected

253
00:11:15,830 --> 00:11:21,930
something's going on but

254
00:11:18,269 --> 00:11:23,399
more or less reactionary defense and in

255
00:11:21,930 --> 00:11:25,349
the third one we can simply ensure that

256
00:11:23,399 --> 00:11:27,390
the secret data cannot be reached this

257
00:11:25,350 --> 00:11:29,940
is similar form from meltdown for

258
00:11:27,390 --> 00:11:32,399
instance where we with kpti would simply

259
00:11:29,940 --> 00:11:37,079
remove the kernel memory and the user

260
00:11:32,399 --> 00:11:39,450
space cannot access it anymore and what

261
00:11:37,079 --> 00:11:42,239
we also saw in this analysis is that

262
00:11:39,450 --> 00:11:44,910
there are some some misconceptions about

263
00:11:42,240 --> 00:11:46,740
spectrum namely that so many of the

264
00:11:44,910 --> 00:11:49,740
countermeasures only consider the cache

265
00:11:46,740 --> 00:11:51,510
to get data but there are other

266
00:11:49,740 --> 00:11:53,100
possibilities and in the past year we

267
00:11:51,510 --> 00:11:55,980
have seen with port contention

268
00:11:53,100 --> 00:11:58,980
side-channel using for instance model

269
00:11:55,980 --> 00:12:01,470
specter or the AVX ID channel and in

270
00:11:58,980 --> 00:12:04,940
that spectrum so it turns out that the

271
00:12:01,470 --> 00:12:07,589
cache is simply the easiest ones and

272
00:12:04,940 --> 00:12:11,300
yeah we try to use the easiest ones

273
00:12:07,589 --> 00:12:14,730
possible and when we looked at all those

274
00:12:11,300 --> 00:12:17,250
defenses here we can see on the Left we

275
00:12:14,730 --> 00:12:18,899
have the micro architectural elements on

276
00:12:17,250 --> 00:12:21,180
the top all the different defenses that

277
00:12:18,899 --> 00:12:23,329
we looked at and also our categories so

278
00:12:21,180 --> 00:12:25,949
which category do they belong to and

279
00:12:23,329 --> 00:12:31,439
then we can see that sometime they

280
00:12:25,950 --> 00:12:33,959
consider to cache our PDB the RSP some

281
00:12:31,440 --> 00:12:36,600
theoretically work on those as well so

282
00:12:33,959 --> 00:12:38,609
in the papers already note we could use

283
00:12:36,600 --> 00:12:41,700
the same technique for instance for the

284
00:12:38,610 --> 00:12:44,370
TLB and all the other state don't

285
00:12:41,700 --> 00:12:46,440
consider so I could I might be possible

286
00:12:44,370 --> 00:12:48,180
to just switch to a different micro

287
00:12:46,440 --> 00:12:52,380
architecture element as a cover channel

288
00:12:48,180 --> 00:12:54,540
and extract data when you look at that

289
00:12:52,380 --> 00:12:56,880
one thing that you immediately think

290
00:12:54,540 --> 00:12:59,339
about is what happens if I just do that

291
00:12:56,880 --> 00:13:01,320
am I able to these defenses actually

292
00:12:59,339 --> 00:13:04,980
work and that's what we intended we

293
00:13:01,320 --> 00:13:07,709
looked at it on Intel arm and AMD we

294
00:13:04,980 --> 00:13:09,390
were then able to show that for some of

295
00:13:07,709 --> 00:13:12,719
those they actually worked in our

296
00:13:09,390 --> 00:13:17,760
experiments some partially worked but

297
00:13:12,720 --> 00:13:20,040
not fully some did not work for some we

298
00:13:17,760 --> 00:13:22,050
can theoretically argue why they should

299
00:13:20,040 --> 00:13:25,110
work but we can only feel ready to do it

300
00:13:22,050 --> 00:13:27,180
because they either require hardware

301
00:13:25,110 --> 00:13:31,139
modifications or we simply don't have

302
00:13:27,180 --> 00:13:34,469
have it available some theoretically

303
00:13:31,139 --> 00:13:36,119
in PT attack and some theoretically we

304
00:13:34,470 --> 00:13:39,420
can alternate eight do not work in that

305
00:13:36,119 --> 00:13:41,459
like that and others are simply out of

306
00:13:39,420 --> 00:13:44,819
scalp said they don't try to prevent

307
00:13:41,459 --> 00:13:49,589
this attack and with that we have now

308
00:13:44,819 --> 00:13:51,479
many different defenses we see here that

309
00:13:49,589 --> 00:13:53,579
not all of them work so we need some

310
00:13:51,480 --> 00:13:55,799
combination to protect our systems of

311
00:13:53,579 --> 00:13:58,618
them so a combination of those to

312
00:13:55,799 --> 00:14:01,529
protect our systems for that we then

313
00:13:58,619 --> 00:14:03,749
looked at performance how much

314
00:14:01,529 --> 00:14:05,339
performance do they cost because if they

315
00:14:03,749 --> 00:14:07,829
are ineffective and they cost a lot of

316
00:14:05,339 --> 00:14:10,739
performance then why should I use it at

317
00:14:07,829 --> 00:14:15,839
all in the top part of the table you can

318
00:14:10,739 --> 00:14:18,299
see those that we saw on all perform

319
00:14:15,839 --> 00:14:23,910
performance impactors that were shown on

320
00:14:18,299 --> 00:14:28,439
real-world systems yes we can in the top

321
00:14:23,910 --> 00:14:29,969
those are based on some benchmarks for

322
00:14:28,439 --> 00:14:31,829
instance if we look at serialization we

323
00:14:29,970 --> 00:14:33,720
can see a sixty point sixty two to

324
00:14:31,829 --> 00:14:36,479
seventy-five percent decrease in

325
00:14:33,720 --> 00:14:38,519
performance and serialization is one

326
00:14:36,480 --> 00:14:40,799
defense where you have to actually us

327
00:14:38,519 --> 00:14:44,100
and developer have to add deserializing

328
00:14:40,799 --> 00:14:45,720
in structure and for instance the kernel

329
00:14:44,100 --> 00:14:48,389
would have to do something like that

330
00:14:45,720 --> 00:14:50,249
so before okay let's do a prevalent

331
00:14:48,389 --> 00:14:52,439
study of the Linux kernel

332
00:14:50,249 --> 00:14:54,239
we have four different gadgets that we

333
00:14:52,439 --> 00:14:57,509
identified we looked at the Linux kernel

334
00:14:54,239 --> 00:14:59,699
5.0 in locations where the kernel

335
00:14:57,509 --> 00:15:02,249
developers actually already implemented

336
00:14:59,699 --> 00:15:04,709
defenses to see it know they needed how

337
00:15:02,249 --> 00:15:06,269
many of those are there the prefetch

338
00:15:04,709 --> 00:15:08,429
schedule is it is for instance

339
00:15:06,269 --> 00:15:11,009
interesting for Samba load the compare

340
00:15:08,429 --> 00:15:13,169
gadget is you could use like port

341
00:15:11,009 --> 00:15:14,519
contention to extract information the

342
00:15:13,169 --> 00:15:16,589
index gadget is the one that was

343
00:15:14,519 --> 00:15:18,629
originally shown in the Indus back to

344
00:15:16,589 --> 00:15:21,119
paper and here's the interesting thing

345
00:15:18,629 --> 00:15:23,339
is we saw no occurrence of such a gadget

346
00:15:21,119 --> 00:15:25,739
in the Linux kernel on the in the

347
00:15:23,339 --> 00:15:27,509
locations that we looked at and the

348
00:15:25,739 --> 00:15:29,579
execute gadget is a very interesting one

349
00:15:27,509 --> 00:15:32,639
because it they load some function

350
00:15:29,579 --> 00:15:34,559
pointer and then execute it and that

351
00:15:32,639 --> 00:15:38,730
might give me arbitrary code execution

352
00:15:34,559 --> 00:15:41,699
in the kernel now we have proof of

353
00:15:38,730 --> 00:15:44,940
concept for all of our

354
00:15:41,700 --> 00:15:46,320
for everything I just yesterday or

355
00:15:44,940 --> 00:15:48,450
something pushed all of our proof of

356
00:15:46,320 --> 00:15:51,000
concept to the github page and also the

357
00:15:48,450 --> 00:15:54,210
the two years available on the on the

358
00:15:51,000 --> 00:15:55,710
website we very much open for pull

359
00:15:54,210 --> 00:15:59,250
requests so if you have something new

360
00:15:55,710 --> 00:16:02,670
you can add it there now before I finish

361
00:15:59,250 --> 00:16:04,500
I just want to give us a short recap of

362
00:16:02,670 --> 00:16:06,120
what we did so we introduced a new

363
00:16:04,500 --> 00:16:09,420
naming scheme and we have already seen

364
00:16:06,120 --> 00:16:11,610
in recent publications that people

365
00:16:09,420 --> 00:16:14,579
started to adopt this naming scheme and

366
00:16:11,610 --> 00:16:15,990
also some people in the industry we were

367
00:16:14,580 --> 00:16:17,580
able to show that there are new attack

368
00:16:15,990 --> 00:16:20,760
variants simply by doing a systematic

369
00:16:17,580 --> 00:16:22,620
analysis we were also able to show that

370
00:16:20,760 --> 00:16:25,260
the offenses cost too much performance

371
00:16:22,620 --> 00:16:27,240
for a little effect and for me

372
00:16:25,260 --> 00:16:30,120
personally that's not the kind of

373
00:16:27,240 --> 00:16:32,460
Defense's that I like and we also were

374
00:16:30,120 --> 00:16:35,700
able to show the prevalence of gadgets

375
00:16:32,460 --> 00:16:38,070
in the Linux kernel then I would like to

376
00:16:35,700 --> 00:16:40,560
conclude with following trends and

377
00:16:38,070 --> 00:16:42,660
execution attacks they are another class

378
00:16:40,560 --> 00:16:45,599
of attacks and they are extremely

379
00:16:42,660 --> 00:16:49,380
powerful and I believe that we are only

380
00:16:45,600 --> 00:16:52,260
at the beginning of that and we also

381
00:16:49,380 --> 00:16:54,150
have to change our mindset because many

382
00:16:52,260 --> 00:16:56,700
optimizations that we introduced in our

383
00:16:54,150 --> 00:16:58,740
CPUs they introduce side channels and

384
00:16:56,700 --> 00:17:02,910
now we're at the point where they become

385
00:16:58,740 --> 00:17:05,010
exploitable and we need a lot more we

386
00:17:02,910 --> 00:17:10,030
need to think more about those in the

387
00:17:05,010 --> 00:17:16,589
design of arm of our CPUs thank you

388
00:17:10,030 --> 00:17:22,319
[Applause]

389
00:17:16,589 --> 00:17:23,698
questions too cloudy hi john kerry's

390
00:17:22,319 --> 00:17:25,290
well nice work

391
00:17:23,699 --> 00:17:27,360
one question I have is when you're

392
00:17:25,290 --> 00:17:29,159
searching for gadgets in the Linux

393
00:17:27,359 --> 00:17:30,870
kernel you're the study that you did are

394
00:17:29,160 --> 00:17:32,790
you looking for like source level

395
00:17:30,870 --> 00:17:34,649
abstract syntax tree constructions so

396
00:17:32,790 --> 00:17:36,540
exactly an if statement followed by a

397
00:17:34,650 --> 00:17:39,000
particularly great indexing operation

398
00:17:36,540 --> 00:17:40,620
are you doing an analysis where you're

399
00:17:39,000 --> 00:17:42,210
looking at more something like LV Mir

400
00:17:40,620 --> 00:17:44,100
where you're looking for like a control

401
00:17:42,210 --> 00:17:47,340
dependence and then some set of pointer

402
00:17:44,100 --> 00:17:49,080
arithmetic so that so in in this case we

403
00:17:47,340 --> 00:17:51,809
didn't look at something like the ast or

404
00:17:49,080 --> 00:17:55,080
something we actually Illinois's the the

405
00:17:51,809 --> 00:17:57,330
high-level C code because it that was

406
00:17:55,080 --> 00:17:58,770
that was the easiest there are some

407
00:17:57,330 --> 00:18:01,470
problems with that approach simply

408
00:17:58,770 --> 00:18:03,990
because we don't know how far our

409
00:18:01,470 --> 00:18:05,850
speculation window goes and everything

410
00:18:03,990 --> 00:18:08,250
but yeah in our instance we only looked

411
00:18:05,850 --> 00:18:09,480
at at the source code level yeah well so

412
00:18:08,250 --> 00:18:11,429
the thing that I'm wondering is that you

413
00:18:09,480 --> 00:18:12,679
may have especially in the in the Linux

414
00:18:11,429 --> 00:18:14,790
kernel you may have pointer arithmetic

415
00:18:12,679 --> 00:18:16,320
which has the same type of data

416
00:18:14,790 --> 00:18:17,668
dependencies but it's not going to be an

417
00:18:16,320 --> 00:18:25,049
array it's just gonna be a random

418
00:18:17,669 --> 00:18:29,820
pointer yes which means you may be under

419
00:18:25,049 --> 00:18:32,309
counting yes so those numbers thing down

420
00:18:29,820 --> 00:18:33,960
the ones that we see we've seen and it's

421
00:18:32,309 --> 00:18:38,280
also a little bit difficult to do that

422
00:18:33,960 --> 00:18:40,730
because in the Linux kernel you have if

423
00:18:38,280 --> 00:18:43,410
you have functions they are at one point

424
00:18:40,730 --> 00:18:45,450
a function point is assigned and you

425
00:18:43,410 --> 00:18:48,510
don't know where you actually return to

426
00:18:45,450 --> 00:18:51,660
and so yeah I understand what you mean

427
00:18:48,510 --> 00:18:53,370
it it's pretty difficult and in the you

428
00:18:51,660 --> 00:18:56,250
know analysis because we look also

429
00:18:53,370 --> 00:19:00,809
looked at tools like the smach tool that

430
00:18:56,250 --> 00:19:04,830
the Linux developers use and we try to

431
00:19:00,809 --> 00:19:06,570
look at those and so far there's no no

432
00:19:04,830 --> 00:19:09,540
real solution on how to find spectra

433
00:19:06,570 --> 00:19:13,520
caches and it's kind of kind of

434
00:19:09,540 --> 00:19:13,520
difficult okay thank you

435
00:19:16,190 --> 00:19:23,460
okay that and the session let's say

436
00:19:21,539 --> 00:19:27,690
thanks to the speaker's again

437
00:19:23,460 --> 00:19:27,690
[Applause]

