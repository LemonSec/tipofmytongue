1
00:00:10,290 --> 00:00:15,389
thank you for the introduction Nick I'm

2
00:00:13,139 --> 00:00:16,329
sure John from Indiana University

3
00:00:15,389 --> 00:00:18,730
it's

4
00:00:16,329 --> 00:00:21,070
honor to present our work looking from

5
00:00:18,730 --> 00:00:23,439
mirror evaluating LT divided securities

6
00:00:21,070 --> 00:00:25,180
through mobile companions so this is the

7
00:00:23,439 --> 00:00:29,230
joint work between Indiana University

8
00:00:25,180 --> 00:00:31,660
and Symantec research labs so the data

9
00:00:29,230 --> 00:00:33,370
from the LT Annette analytics shows that

10
00:00:31,660 --> 00:00:36,010
there will be more our devices

11
00:00:33,370 --> 00:00:38,530
nah my ot devices in the near future and

12
00:00:36,010 --> 00:00:40,629
we say exposing all the already market

13
00:00:38,530 --> 00:00:43,780
there's also an increasing number of

14
00:00:40,629 --> 00:00:46,750
what vulnerability devices so there are

15
00:00:43,780 --> 00:00:50,769
security incidents every day like the

16
00:00:46,750 --> 00:00:53,199
there are 55% of rice ELT male way

17
00:00:50,769 --> 00:00:56,470
attacks and also to meeting our devices

18
00:00:53,199 --> 00:00:59,830
are vulnerable to complete takeover so

19
00:00:56,470 --> 00:01:02,220
with so many vulnerable devices the

20
00:00:59,830 --> 00:01:05,408
question sir how could we identify that

21
00:01:02,220 --> 00:01:07,630
previous research focus on two

22
00:01:05,409 --> 00:01:10,180
directions one direction is static

23
00:01:07,630 --> 00:01:12,940
analysis basically the researcher may

24
00:01:10,180 --> 00:01:14,590
get the vulnerable vulnerability

25
00:01:12,940 --> 00:01:16,539
information from the firmware and

26
00:01:14,590 --> 00:01:18,640
research in other devices the firmware

27
00:01:16,540 --> 00:01:22,090
to find out whether the other device are

28
00:01:18,640 --> 00:01:24,040
vulnerable and also we can use some

29
00:01:22,090 --> 00:01:26,170
static analysis tools on the firmware

30
00:01:24,040 --> 00:01:27,910
like the symbolic execution to check

31
00:01:26,170 --> 00:01:31,000
whether the firmware is whether the

32
00:01:27,910 --> 00:01:33,550
device is vulnerable to a specific

33
00:01:31,000 --> 00:01:36,790
vulnerability and another direction is

34
00:01:33,550 --> 00:01:38,920
the dynamic analysis basically we can

35
00:01:36,790 --> 00:01:41,590
get the physical device all get an

36
00:01:38,920 --> 00:01:43,780
emulated advice and they will use

37
00:01:41,590 --> 00:01:45,550
certain tools like flooding testing to

38
00:01:43,780 --> 00:01:48,280
check whether the one whether there's a

39
00:01:45,550 --> 00:01:51,340
vulnerability in the device so actually

40
00:01:48,280 --> 00:01:53,980
post the static and the dynamic analysis

41
00:01:51,340 --> 00:01:55,659
rely on two preconditions why is the

42
00:01:53,980 --> 00:01:59,890
firmware the other is the physical

43
00:01:55,659 --> 00:02:01,690
device so forth firmware most of the

44
00:01:59,890 --> 00:02:02,710
vendors actually don't want to make

45
00:02:01,690 --> 00:02:05,320
their firmware

46
00:02:02,710 --> 00:02:07,570
public and even you have some kind of

47
00:02:05,320 --> 00:02:10,049
packing techniques to prevent the user

48
00:02:07,570 --> 00:02:13,209
from unpacking the firmware for analysis

49
00:02:10,050 --> 00:02:16,239
for the physical device we may not have

50
00:02:13,209 --> 00:02:20,799
enough budget to buy many devices and

51
00:02:16,239 --> 00:02:23,409
also like many devices made out of stock

52
00:02:20,799 --> 00:02:25,569
so we can now gather for analysis so

53
00:02:23,409 --> 00:02:28,269
these two conditions makes the previous

54
00:02:25,569 --> 00:02:29,299
approach not scaling well on on the

55
00:02:28,270 --> 00:02:33,300
problem

56
00:02:29,300 --> 00:02:35,370
so in our study we're going to explore

57
00:02:33,300 --> 00:02:37,620
the question about how to identify the

58
00:02:35,370 --> 00:02:41,010
vulnerable Alti devices in a scalable

59
00:02:37,620 --> 00:02:43,890
way so during our study we actually have

60
00:02:41,010 --> 00:02:47,880
two interesting insights one is that

61
00:02:43,890 --> 00:02:49,708
when the IOT device vendor especially

62
00:02:47,880 --> 00:02:52,440
the small or medium-sized the vendor

63
00:02:49,709 --> 00:02:54,540
build their product the URI don't want

64
00:02:52,440 --> 00:02:57,270
to don't have the time and don't want to

65
00:02:54,540 --> 00:02:59,459
pay the effort to design the product

66
00:02:57,270 --> 00:03:01,620
from scratch actually they get some

67
00:02:59,459 --> 00:03:03,540
hardware component from some other

68
00:03:01,620 --> 00:03:06,660
vendors or they get some always those

69
00:03:03,540 --> 00:03:09,060
projects from they get some software

70
00:03:06,660 --> 00:03:10,560
from open source repositories and then

71
00:03:09,060 --> 00:03:12,330
they combine the components and

72
00:03:10,560 --> 00:03:15,470
software's together to build a product

73
00:03:12,330 --> 00:03:18,810
so what's a problem with this design so

74
00:03:15,470 --> 00:03:22,200
actually if there is a vulnerability in

75
00:03:18,810 --> 00:03:24,930
the hardware component or in the open

76
00:03:22,200 --> 00:03:27,540
source projects the vulnerability may be

77
00:03:24,930 --> 00:03:31,260
propagated through several not several

78
00:03:27,540 --> 00:03:34,709
LT devices so the second inside who have

79
00:03:31,260 --> 00:03:37,350
is that almost always the LT devices are

80
00:03:34,709 --> 00:03:40,380
paired with a mobile company amp and the

81
00:03:37,350 --> 00:03:43,170
mobile company app are always offering a

82
00:03:40,380 --> 00:03:47,070
good estimation of what what's a loop or

83
00:03:43,170 --> 00:03:50,760
to the device look like so that means if

84
00:03:47,070 --> 00:03:52,290
we want to study the similarity if what

85
00:03:50,760 --> 00:03:54,480
you want to study the similarity between

86
00:03:52,290 --> 00:03:56,940
the outer devices we can get the

87
00:03:54,480 --> 00:04:00,840
information by analyzing similarly all

88
00:03:56,940 --> 00:04:02,850
the mobile apps so with this two insight

89
00:04:00,840 --> 00:04:05,340
in mind how could we design approach

90
00:04:02,850 --> 00:04:07,829
their help to identify the new to

91
00:04:05,340 --> 00:04:11,010
identify new vulnerable LT devices so

92
00:04:07,829 --> 00:04:14,850
instead of analyze each physical device

93
00:04:11,010 --> 00:04:17,250
directly we can use we can use across

94
00:04:14,850 --> 00:04:19,560
app analysis to identify whether there

95
00:04:17,250 --> 00:04:23,370
are some vulnerabilities which can

96
00:04:19,560 --> 00:04:25,680
transfer among different devices so this

97
00:04:23,370 --> 00:04:28,440
approach apparently we only analyzed

98
00:04:25,680 --> 00:04:30,060
will only analyze the mobile app which

99
00:04:28,440 --> 00:04:32,550
requires no access to the physical

100
00:04:30,060 --> 00:04:37,200
device and also they also their firmware

101
00:04:32,550 --> 00:04:40,770
so therefore it's much better than the

102
00:04:37,200 --> 00:04:42,919
previous approach so here it's a

103
00:04:40,770 --> 00:04:45,378
architecture of our platform

104
00:04:42,919 --> 00:04:47,419
firstly we have a crawler to collect a

105
00:04:45,379 --> 00:04:50,090
set of mobile companion apps from the

106
00:04:47,419 --> 00:04:51,948
Google Play and a second we do app

107
00:04:50,090 --> 00:04:55,188
analysis to extract the device

108
00:04:51,949 --> 00:04:57,469
information from the apps with the

109
00:04:55,189 --> 00:05:00,620
device information we can do across app

110
00:04:57,469 --> 00:05:03,650
analysis which helps to put two devices

111
00:05:00,620 --> 00:05:06,949
in you know device family if the share

112
00:05:03,650 --> 00:05:09,710
or sim component once we get the device

113
00:05:06,949 --> 00:05:11,749
family we can make use of the normal own

114
00:05:09,710 --> 00:05:15,830
ability reports and found out some

115
00:05:11,749 --> 00:05:19,759
potentially vulnerable devices so in our

116
00:05:15,830 --> 00:05:22,310
study we work on a app database with

117
00:05:19,759 --> 00:05:27,020
over 2000 LT company apps on Google Play

118
00:05:22,310 --> 00:05:29,449
and these apps covers over 30 hundred

119
00:05:27,020 --> 00:05:31,938
different device vendors and almost the

120
00:05:29,449 --> 00:05:35,270
faster than the device models so we use

121
00:05:31,939 --> 00:05:37,639
this effort for the validation of to

122
00:05:35,270 --> 00:05:42,169
validate our approach and also to find a

123
00:05:37,639 --> 00:05:44,360
new vulnerable devices so the goal of

124
00:05:42,169 --> 00:05:47,049
the analysis is to build a device

125
00:05:44,360 --> 00:05:49,909
profile by analyzing mobile apps

126
00:05:47,050 --> 00:05:52,189
basically we extract three Cannell

127
00:05:49,909 --> 00:05:53,990
information from the mobile app one is

128
00:05:52,189 --> 00:05:56,479
the device interface which is the

129
00:05:53,990 --> 00:05:58,759
interface used which is a network

130
00:05:56,479 --> 00:06:00,710
interface used between the mobile app

131
00:05:58,759 --> 00:06:03,259
and the IOT device the second

132
00:06:00,710 --> 00:06:05,599
information is the device imprints which

133
00:06:03,259 --> 00:06:07,219
could be the unique strings that helps

134
00:06:05,599 --> 00:06:09,169
to that how related we say out the

135
00:06:07,219 --> 00:06:13,069
device the third intifada hash of the

136
00:06:09,169 --> 00:06:14,659
app code so which kind of information

137
00:06:13,069 --> 00:06:17,919
could be care from the device interface

138
00:06:14,659 --> 00:06:21,020
actually there's a lot of information

139
00:06:17,919 --> 00:06:23,930
for example we can get a protocol that

140
00:06:21,020 --> 00:06:26,479
are used by the device and also we can

141
00:06:23,930 --> 00:06:29,029
know the operations of the call features

142
00:06:26,479 --> 00:06:31,460
of the device for example the smart

143
00:06:29,029 --> 00:06:34,490
light with supportin like light control

144
00:06:31,460 --> 00:06:36,620
features we also know the software that

145
00:06:34,490 --> 00:06:39,710
are running on the device like the web

146
00:06:36,620 --> 00:06:42,020
servers running on their cameras so we

147
00:06:39,710 --> 00:06:44,239
may also know the hardware component

148
00:06:42,020 --> 00:06:48,529
that the device vendors have involved in

149
00:06:44,240 --> 00:06:50,479
their product so the question is how

150
00:06:48,529 --> 00:06:52,370
could we care is a device interface I

151
00:06:50,479 --> 00:06:56,210
mean the pairs of request and a response

152
00:06:52,370 --> 00:07:00,440
that the LT device could receive

153
00:06:56,210 --> 00:07:03,289
generate so by only observing the app so

154
00:07:00,440 --> 00:07:05,270
basically there's three steps firstly

155
00:07:03,290 --> 00:07:07,550
could a week out how could we

156
00:07:05,270 --> 00:07:09,370
automatically generate the requests

157
00:07:07,550 --> 00:07:12,170
without accessing their physical device

158
00:07:09,370 --> 00:07:13,190
second how couldn't we know what the

159
00:07:12,170 --> 00:07:16,040
device would look or two they're

160
00:07:13,190 --> 00:07:18,560
responsible to look look like and third

161
00:07:16,040 --> 00:07:20,990
because that's data that's a lot of a

162
00:07:18,560 --> 00:07:22,940
synchronous request and a response how

163
00:07:20,990 --> 00:07:26,150
do could we do the pairing between the

164
00:07:22,940 --> 00:07:27,620
request and response so in our study we

165
00:07:26,150 --> 00:07:30,200
leveraged your theories or techniques

166
00:07:27,620 --> 00:07:32,570
for instance for the requested

167
00:07:30,200 --> 00:07:34,670
generation we try to extract the code

168
00:07:32,570 --> 00:07:36,909
that are related with a request request

169
00:07:34,670 --> 00:07:39,740
anything we do the possible execution

170
00:07:36,910 --> 00:07:42,350
customized to random environment to

171
00:07:39,740 --> 00:07:44,090
trigger the requested generation for the

172
00:07:42,350 --> 00:07:46,250
response we rely on the program

173
00:07:44,090 --> 00:07:48,469
dependence graph to extract the

174
00:07:46,250 --> 00:07:51,410
constituents that I that could be used

175
00:07:48,470 --> 00:07:53,390
to describe the response for the pairing

176
00:07:51,410 --> 00:07:55,400
we check how much data or how much

177
00:07:53,390 --> 00:08:00,169
contacts are shared between the request

178
00:07:55,400 --> 00:08:02,239
and a response the second information we

179
00:08:00,170 --> 00:08:05,240
get from the app is a device in Prince

180
00:08:02,240 --> 00:08:07,640
so this imprints are unique strings in

181
00:08:05,240 --> 00:08:10,520
the apps that are that could help to

182
00:08:07,640 --> 00:08:12,950
identify the LT device so above our

183
00:08:10,520 --> 00:08:15,789
observations shows that those strings

184
00:08:12,950 --> 00:08:17,840
are usually the speeds that impacts the

185
00:08:15,790 --> 00:08:21,260
communication between the a panda a

186
00:08:17,840 --> 00:08:23,119
panda the IOT device for instance if the

187
00:08:21,260 --> 00:08:25,370
app and the device want to talk in a

188
00:08:23,120 --> 00:08:28,610
encrypted Channel they may share some in

189
00:08:25,370 --> 00:08:30,890
a symmetric case if there's a username

190
00:08:28,610 --> 00:08:32,720
and account on the LT device the

191
00:08:30,890 --> 00:08:35,780
username and economy appear in the

192
00:08:32,720 --> 00:08:38,360
mobile app so we extract such channel

193
00:08:35,780 --> 00:08:44,480
information to help to identify the

194
00:08:38,360 --> 00:08:46,220
device and do the cross app analysis so

195
00:08:44,480 --> 00:08:50,060
the third thing we get is the father

196
00:08:46,220 --> 00:08:53,020
hash so which is the code signature we

197
00:08:50,060 --> 00:08:56,180
care for we calculated for the app code

198
00:08:53,020 --> 00:08:58,460
so for the hash is used to figure out to

199
00:08:56,180 --> 00:09:01,599
whether a theme app module is actually

200
00:08:58,460 --> 00:09:05,660
adopted about different vendors and this

201
00:09:01,600 --> 00:09:09,500
metric is also useful when other method

202
00:09:05,660 --> 00:09:10,040
fields for example if we know the if we

203
00:09:09,500 --> 00:09:11,959
want to it

204
00:09:10,040 --> 00:09:14,209
tracking device interface with passive

205
00:09:11,959 --> 00:09:17,209
execution on native library we may have

206
00:09:14,209 --> 00:09:21,349
some troubles so we we made use of the

207
00:09:17,209 --> 00:09:23,239
father hash analysis to to analyze there

208
00:09:21,350 --> 00:09:26,029
like the native libraries found out

209
00:09:23,240 --> 00:09:30,380
whether the two native libraries similar

210
00:09:26,029 --> 00:09:32,839
or not so for the cross app analysis

211
00:09:30,380 --> 00:09:35,720
because devices are your in not

212
00:09:32,839 --> 00:09:39,560
identical but they only share some small

213
00:09:35,720 --> 00:09:41,000
components so we do a kind of modular

214
00:09:39,560 --> 00:09:43,849
based or packet based a similarity

215
00:09:41,000 --> 00:09:46,399
checking and try to cluster the devices

216
00:09:43,850 --> 00:09:51,170
in the same family based on the

217
00:09:46,399 --> 00:09:53,750
functional components of the app so here

218
00:09:51,170 --> 00:09:56,410
is some examples of the device family we

219
00:09:53,750 --> 00:09:58,910
can see that each of the family actually

220
00:09:56,410 --> 00:10:01,250
the device is he each of the family

221
00:09:58,910 --> 00:10:03,199
actually share a similar como a sim

222
00:10:01,250 --> 00:10:05,420
component like the software running on

223
00:10:03,199 --> 00:10:07,969
the device the hardware the device has

224
00:10:05,420 --> 00:10:12,860
the protocol the device supports of the

225
00:10:07,970 --> 00:10:15,139
back end the device connect to so once

226
00:10:12,860 --> 00:10:17,839
we get the device families we can make

227
00:10:15,139 --> 00:10:19,670
user within Noah vulnerabilities and try

228
00:10:17,839 --> 00:10:22,699
to figure out whether there are some

229
00:10:19,670 --> 00:10:26,660
other devices that has the similar

230
00:10:22,699 --> 00:10:29,990
vulnerability a vulnerable module so for

231
00:10:26,660 --> 00:10:32,089
the validation part we tried every we

232
00:10:29,990 --> 00:10:35,000
tried our best to validate whether the

233
00:10:32,089 --> 00:10:37,339
devices are indeed vulnerable for

234
00:10:35,000 --> 00:10:39,620
instance we get the firmware database

235
00:10:37,339 --> 00:10:42,829
and also we have a set of physical

236
00:10:39,620 --> 00:10:44,810
devices and we check the online reports

237
00:10:42,829 --> 00:10:46,519
and find out whether the problem has

238
00:10:44,810 --> 00:10:49,849
been reported by the other contributors

239
00:10:46,519 --> 00:10:51,889
and also we ask the vendor to validate

240
00:10:49,850 --> 00:10:59,149
whether in the early 1-0 product are

241
00:10:51,889 --> 00:11:01,279
vulnerable or not so to to validate our

242
00:10:59,149 --> 00:11:04,060
approach we start from some known

243
00:11:01,279 --> 00:11:06,829
vulnerabilities or weaknesses so these

244
00:11:04,060 --> 00:11:09,768
vulnerabilities and weakness spend in

245
00:11:06,829 --> 00:11:11,599
different dimensions for example we

246
00:11:09,769 --> 00:11:14,269
study a vulnerable software that

247
00:11:11,600 --> 00:11:16,730
affected the p2p cameras we also study

248
00:11:14,269 --> 00:11:18,889
the hardware modules that may leak the

249
00:11:16,730 --> 00:11:21,350
wife actually dentures we study the

250
00:11:18,889 --> 00:11:23,250
protocol that may be used in some kind

251
00:11:21,350 --> 00:11:26,190
of refraction basically

252
00:11:23,250 --> 00:11:29,640
attack and also we analyzed they caught

253
00:11:26,190 --> 00:11:32,430
the a week cloud back-end that may be

254
00:11:29,640 --> 00:11:35,520
used by the attackers so after running

255
00:11:32,430 --> 00:11:39,479
after I analyze these vulnerabilities on

256
00:11:35,520 --> 00:11:41,819
our platform we found over 300 potential

257
00:11:39,480 --> 00:11:45,060
vulnerable devices and among the devices

258
00:11:41,820 --> 00:11:47,010
so we can validate we found that 91% of

259
00:11:45,060 --> 00:11:50,729
the devices are actually confirmed to

260
00:11:47,010 --> 00:11:52,530
have the vulnerability or weakness so

261
00:11:50,730 --> 00:11:56,010
here in the case about the vulnerable

262
00:11:52,530 --> 00:11:58,410
software so there's 5 CVE

263
00:11:56,010 --> 00:12:02,040
talking about the vulnerable web server

264
00:11:58,410 --> 00:12:04,230
on the PDB cameras we see that the CVS

265
00:12:02,040 --> 00:12:06,719
are actually reported like two years ago

266
00:12:04,230 --> 00:12:09,480
so we thought that most those devices

267
00:12:06,720 --> 00:12:13,380
should have been patched all therefore

268
00:12:09,480 --> 00:12:15,270
we expected a lesser result however when

269
00:12:13,380 --> 00:12:19,230
we do there when we do the analysis with

270
00:12:15,270 --> 00:12:20,970
our platform we found over 70 devices

271
00:12:19,230 --> 00:12:25,260
that are potentially vulnerable and we

272
00:12:20,970 --> 00:12:29,400
are able to validate 55 devices here so

273
00:12:25,260 --> 00:12:32,220
interestingly we also found seven we

274
00:12:29,400 --> 00:12:35,069
also found seven different devices seven

275
00:12:32,220 --> 00:12:38,820
devices there are previously unknown to

276
00:12:35,070 --> 00:12:41,280
be vulnerable to this weakness so we

277
00:12:38,820 --> 00:12:43,050
contacted the vendor and the vendors are

278
00:12:41,280 --> 00:12:44,970
like three vendors are working on the

279
00:12:43,050 --> 00:12:50,099
patch and the one wonder asking us to

280
00:12:44,970 --> 00:12:52,080
have their name on the report so another

281
00:12:50,100 --> 00:12:56,040
interesting case is the device run

282
00:12:52,080 --> 00:12:58,080
rebranding there's a CVE in 2018 talking

283
00:12:56,040 --> 00:13:01,110
about a stack buffer overflow in the

284
00:12:58,080 --> 00:13:03,330
Insteon Wi-Fi camera and in our platform

285
00:13:01,110 --> 00:13:05,940
we actually see another device from the

286
00:13:03,330 --> 00:13:10,470
for scam another device the for scam

287
00:13:05,940 --> 00:13:14,730
every camera actually may be may be

288
00:13:10,470 --> 00:13:16,620
vulnerable to the vulnerability so after

289
00:13:14,730 --> 00:13:18,270
looking deeper into this question we

290
00:13:16,620 --> 00:13:20,400
found that the full scale the Easton

291
00:13:18,270 --> 00:13:22,949
Wi-Fi camera is actually a rebranding of

292
00:13:20,400 --> 00:13:27,030
the first cam app camera that means

293
00:13:22,950 --> 00:13:29,400
first cam get the device from Easton

294
00:13:27,030 --> 00:13:31,140
care to the device from foscam and then

295
00:13:29,400 --> 00:13:34,199
they sell the product with their own

296
00:13:31,140 --> 00:13:36,830
brand so the interesting thing is that

297
00:13:34,200 --> 00:13:41,220
when we look into the full scam camera

298
00:13:36,830 --> 00:13:44,460
it's not vulnerable but we checked there

299
00:13:41,220 --> 00:13:47,970
we checked there from where's like

300
00:13:44,460 --> 00:13:51,080
before 2017 there's a seven formula of

301
00:13:47,970 --> 00:13:53,670
versions that are vulnerable after 2017

302
00:13:51,080 --> 00:13:56,940
foscam seems to know the vulnerability

303
00:13:53,670 --> 00:13:59,250
and patch to that but actually this

304
00:13:56,940 --> 00:14:03,450
vulnerability about if the on camera

305
00:13:59,250 --> 00:14:05,400
camera is reported like 2018 and we also

306
00:14:03,450 --> 00:14:08,460
checked the most recent version of the

307
00:14:05,400 --> 00:14:12,390
interim Wi-Fi camera and we found that

308
00:14:08,460 --> 00:14:16,050
the vulnerability is still there so the

309
00:14:12,390 --> 00:14:18,960
interesting part is that with rebranding

310
00:14:16,050 --> 00:14:22,109
with always the component sharing the

311
00:14:18,960 --> 00:14:26,720
vulnerability could easily get into

312
00:14:22,110 --> 00:14:26,720
different devices but the patch are not

313
00:14:27,020 --> 00:14:32,699
so we also have to some other findings

314
00:14:30,390 --> 00:14:36,300
like we found a lot of devices that are

315
00:14:32,700 --> 00:14:38,790
using some vulnerable hardware and also

316
00:14:36,300 --> 00:14:41,729
they are talking with some weak

317
00:14:38,790 --> 00:14:43,589
protocols or talking to some vulnerable

318
00:14:41,730 --> 00:14:47,970
back-end so for more information please

319
00:14:43,590 --> 00:14:50,100
read our paper so for the pick ways

320
00:14:47,970 --> 00:14:53,540
one thing we will want to mention is

321
00:14:50,100 --> 00:14:56,100
that IOT devices usually share some

322
00:14:53,540 --> 00:14:58,380
component with the sharing of the

323
00:14:56,100 --> 00:15:00,900
component there are some vulnerabilities

324
00:14:58,380 --> 00:15:04,230
transferring among different devices and

325
00:15:00,900 --> 00:15:06,270
we also find that devices similar device

326
00:15:04,230 --> 00:15:09,390
similarities are often reflected in

327
00:15:06,270 --> 00:15:13,439
their mobile companion apps that means

328
00:15:09,390 --> 00:15:15,780
using app analysis we always we can

329
00:15:13,440 --> 00:15:17,970
always use analysis as an effective

330
00:15:15,780 --> 00:15:20,699
needs to quickly identify Warrnambool

331
00:15:17,970 --> 00:15:22,350
devices and also decides if our device

332
00:15:20,700 --> 00:15:26,600
is vulnerable to a specific

333
00:15:22,350 --> 00:15:26,600
vulnerability thank you

334
00:15:29,529 --> 00:15:39,019
thank said we have time for a few

335
00:15:32,990 --> 00:15:40,399
questions let me start by asking what

336
00:15:39,019 --> 00:15:43,279
one of the things you mentioned is this

337
00:15:40,399 --> 00:15:45,440
idea that it's expensive to buy a loss

338
00:15:43,279 --> 00:15:48,740
of devices for finding vulnerabilities

339
00:15:45,440 --> 00:15:50,420
on them but presumably to figure out

340
00:15:48,740 --> 00:15:52,940
whether these devices are wrong with

341
00:15:50,420 --> 00:15:54,290
wool you still needed to buy like I

342
00:15:52,940 --> 00:15:56,300
assume these hundred and seventy-three

343
00:15:54,290 --> 00:15:57,949
or however many devices that you

344
00:15:56,300 --> 00:16:01,120
validate vulnerabilities on you had to

345
00:15:57,949 --> 00:16:04,849
get a physical copy of is that right

346
00:16:01,120 --> 00:16:06,949
yeah if you want to get the device it's

347
00:16:04,850 --> 00:16:08,899
all it's always costly but in our

348
00:16:06,949 --> 00:16:11,240
approach we use different validation

349
00:16:08,899 --> 00:16:13,300
techniques that could be checked it

350
00:16:11,240 --> 00:16:15,860
whether the firmware is available online

351
00:16:13,300 --> 00:16:18,709
it's aligned with King valid it's on the

352
00:16:15,860 --> 00:16:20,959
firmware or you can also ask the vendor

353
00:16:18,709 --> 00:16:22,849
whether they have their own ability so

354
00:16:20,959 --> 00:16:26,569
there's a different technique that we

355
00:16:22,850 --> 00:16:29,060
can use to avoid the cost here actually

356
00:16:26,570 --> 00:16:30,649
very interesting Thanks thank you I

357
00:16:29,060 --> 00:16:33,050
think we have one more question

358
00:16:30,649 --> 00:16:35,600
hi yes John Criswell University of

359
00:16:33,050 --> 00:16:38,389
Rochester so nice work but I'm kind of

360
00:16:35,600 --> 00:16:39,949
wondering what you would do with this

361
00:16:38,389 --> 00:16:42,230
information right so do you have any

362
00:16:39,949 --> 00:16:44,599
recommendation to the to the IOT

363
00:16:42,230 --> 00:16:46,699
manufacturers about how to deal with

364
00:16:44,600 --> 00:16:49,730
this is it really any better in the in

365
00:16:46,699 --> 00:16:51,560
the desktop or server world I mean your

366
00:16:49,730 --> 00:16:53,060
initial question was are these devices

367
00:16:51,560 --> 00:16:55,790
vulnerable and I don't know the answer

368
00:16:53,060 --> 00:17:00,199
that yes so what do you do with this

369
00:16:55,790 --> 00:17:02,599
information so so this quite interesting

370
00:17:00,199 --> 00:17:05,089
question so actually during our

371
00:17:02,600 --> 00:17:07,010
validation we try to reach out handed

372
00:17:05,089 --> 00:17:09,678
which helped to hand yourself device

373
00:17:07,010 --> 00:17:12,919
vendors and it data shows they're only

374
00:17:09,679 --> 00:17:16,850
one fifth so the vendors actually reply

375
00:17:12,919 --> 00:17:19,250
to our request so that's our so how to

376
00:17:16,849 --> 00:17:22,099
see if we want to ask the vendor to

377
00:17:19,250 --> 00:17:23,689
patch a problem we may have some

378
00:17:22,099 --> 00:17:27,619
problems because there's a lot of

379
00:17:23,689 --> 00:17:31,730
smaller vendors out there enough like

380
00:17:27,619 --> 00:17:35,120
bodied effort of the professional to fix

381
00:17:31,730 --> 00:17:39,770
their product okay yes right now thank

382
00:17:35,120 --> 00:17:41,750
you thank you all right let's thank

383
00:17:39,770 --> 00:17:42,040
session again

384
00:17:41,750 --> 00:17:47,470
yeah

385
00:17:42,040 --> 00:17:47,470
[Applause]

