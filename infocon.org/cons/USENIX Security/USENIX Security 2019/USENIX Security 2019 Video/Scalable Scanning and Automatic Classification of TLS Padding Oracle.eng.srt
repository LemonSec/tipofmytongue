1
00:00:11,000 --> 00:00:16,610
so my name is Robert maggot and I'm also

2
00:00:14,360 --> 00:00:18,800
from university boham and I'm presenting

3
00:00:16,610 --> 00:00:20,599
our joint work on scalable scanning and

4
00:00:18,800 --> 00:00:24,829
automatic classification of TS padding

5
00:00:20,599 --> 00:00:27,590
Oracle vulnerabilities so first off let

6
00:00:24,829 --> 00:00:29,660
me introduce you to shorty - TS so if

7
00:00:27,590 --> 00:00:33,500
you don't know TS is for cryptographic

8
00:00:29,660 --> 00:00:34,760
protocol which is also used in HTTP so

9
00:00:33,500 --> 00:00:37,730
you'll find it in a browser here and

10
00:00:34,760 --> 00:00:39,829
it's a very nice target for attack us

11
00:00:37,730 --> 00:00:41,989
because they might want to steal some

12
00:00:39,829 --> 00:00:44,030
cookies or some other sensitive

13
00:00:41,989 --> 00:00:46,578
information and this is actually what we

14
00:00:44,030 --> 00:00:49,969
are going to do in this talk so we want

15
00:00:46,579 --> 00:00:52,640
to steal some cookies so let us let me

16
00:00:49,969 --> 00:00:54,170
introduce TS first so TS is a protocol

17
00:00:52,640 --> 00:00:57,379
which contains basically of two layers

18
00:00:54,170 --> 00:00:59,510
so first base this handshake face where

19
00:00:57,379 --> 00:01:01,638
the cryptographic algorithms and keys

20
00:00:59,510 --> 00:01:03,260
are negotiated while afterwards phase

21
00:01:01,639 --> 00:01:05,570
this application interface where the

22
00:01:03,260 --> 00:01:10,250
negotiate keys are actually used to

23
00:01:05,570 --> 00:01:11,479
encrypt application data and for this is

24
00:01:10,250 --> 00:01:13,490
actually where we want to attack the

25
00:01:11,479 --> 00:01:16,490
protocol so we actually want to attack

26
00:01:13,490 --> 00:01:19,970
the application layer office protocol so

27
00:01:16,490 --> 00:01:22,399
until as this concept called cipher

28
00:01:19,970 --> 00:01:23,750
suits so cipher suit is a set of cryptic

29
00:01:22,400 --> 00:01:25,880
Africa algorithms which you can

30
00:01:23,750 --> 00:01:28,100
negotiate for a session so in this

31
00:01:25,880 --> 00:01:31,100
example we have RSA as the key exchange

32
00:01:28,100 --> 00:01:33,949
algorithm AES as the block cipher and

33
00:01:31,100 --> 00:01:37,550
the block ciphers used in the modes CBC

34
00:01:33,950 --> 00:01:40,430
and as a side a random function and in

35
00:01:37,550 --> 00:01:42,710
the H make we use sha-1 so in this talk

36
00:01:40,430 --> 00:01:45,200
we only attack cipher suits which use

37
00:01:42,710 --> 00:01:47,089
the CBC mode as a mode of operation so

38
00:01:45,200 --> 00:01:48,800
although if the cipher suit is

39
00:01:47,090 --> 00:01:50,690
negotiated which does not use for CBC

40
00:01:48,800 --> 00:01:53,240
mode you are not gonna believe is attack

41
00:01:50,690 --> 00:01:56,060
presented here so how does the CBC mode

42
00:01:53,240 --> 00:01:58,610
actually look like in tears so in TAS

43
00:01:56,060 --> 00:02:00,770
there's this concept of MEK then pet

44
00:01:58,610 --> 00:02:04,070
when encrypt this means that you if you

45
00:02:00,770 --> 00:02:07,340
want to send some encrypted data you

46
00:02:04,070 --> 00:02:10,848
first ate a computer in HTML about with

47
00:02:07,340 --> 00:02:13,819
a data and then you pet this data so you

48
00:02:10,848 --> 00:02:15,409
add additional nonsensical bytes to the

49
00:02:13,819 --> 00:02:17,359
end of the message so that your

50
00:02:15,409 --> 00:02:19,370
plaintext message is the multiple of

51
00:02:17,360 --> 00:02:21,770
block size of a block cipher block

52
00:02:19,370 --> 00:02:23,940
cipher so for example if you have one

53
00:02:21,770 --> 00:02:25,890
byte of pairing you add just the

54
00:02:23,940 --> 00:02:28,470
but if you have two bites of petting you

55
00:02:25,890 --> 00:02:31,309
had two one bites and if you have three

56
00:02:28,470 --> 00:02:34,350
bites at two two bites and so on and

57
00:02:31,310 --> 00:02:36,780
afterwards you just simply encrypt the

58
00:02:34,350 --> 00:02:38,910
whole plain text with a CBC mode and

59
00:02:36,780 --> 00:02:42,750
generate some cypher text which you can

60
00:02:38,910 --> 00:02:44,340
send to the other side so how does the

61
00:02:42,750 --> 00:02:46,800
CBC mode actually look like so in the

62
00:02:44,340 --> 00:02:48,630
CBC mode if you want to here's the

63
00:02:46,800 --> 00:02:50,970
decryption depicted so if you want to

64
00:02:48,630 --> 00:02:53,820
decrypt some data you first decrypt it

65
00:02:50,970 --> 00:02:55,880
with a block cipher and when you compute

66
00:02:53,820 --> 00:02:58,680
the exclusive-or with some

67
00:02:55,880 --> 00:03:01,680
initialization vector to generate a

68
00:02:58,680 --> 00:03:03,980
message you want to actually decrypt and

69
00:03:01,680 --> 00:03:07,320
if you want to decrypt more than one

70
00:03:03,980 --> 00:03:09,929
ciphertext block she's simply decrypt

71
00:03:07,320 --> 00:03:10,829
the next ciphertext block and compute

72
00:03:09,930 --> 00:03:12,960
the exclusive-or

73
00:03:10,830 --> 00:03:14,750
with the previous ciphertext block and

74
00:03:12,960 --> 00:03:17,550
you continue until you there are no more

75
00:03:14,750 --> 00:03:19,170
ciphertext blocks left and the last

76
00:03:17,550 --> 00:03:22,020
message will eventually contains some

77
00:03:19,170 --> 00:03:23,760
padding so the CBC mode has an

78
00:03:22,020 --> 00:03:24,540
interesting property meaning that it's

79
00:03:23,760 --> 00:03:27,030
mailable

80
00:03:24,540 --> 00:03:30,000
this means that an attacker can actually

81
00:03:27,030 --> 00:03:33,030
flip a bit in the ciphertext and he will

82
00:03:30,000 --> 00:03:35,670
know but he will also flip recording a

83
00:03:33,030 --> 00:03:38,970
bit in the plain text of the next

84
00:03:35,670 --> 00:03:41,399
message block so why is this dangerous

85
00:03:38,970 --> 00:03:44,670
or ysus a problem because what an

86
00:03:41,400 --> 00:03:47,400
attacker can also do he can cut off a

87
00:03:44,670 --> 00:03:49,470
part of a ciphertext like this and then

88
00:03:47,400 --> 00:03:52,980
suddenly the receive of such a message

89
00:03:49,470 --> 00:03:56,310
will interpret the plaintext as some

90
00:03:52,980 --> 00:03:57,780
padding and this can be exploited by an

91
00:03:56,310 --> 00:04:01,200
attacker in a so called padding Oracle

92
00:03:57,780 --> 00:04:03,120
check so if the server acts as an Oracle

93
00:04:01,200 --> 00:04:05,429
and reveals to us some information if a

94
00:04:03,120 --> 00:04:07,709
padding is Eva valid or invalid we can

95
00:04:05,430 --> 00:04:09,989
use that to deduce information about

96
00:04:07,709 --> 00:04:12,030
plaintext in this example we sent some

97
00:04:09,989 --> 00:04:13,890
malformed message to the server and who

98
00:04:12,030 --> 00:04:16,410
responds with an invalid padding but if

99
00:04:13,890 --> 00:04:16,890
we send some other mail form message to

100
00:04:16,410 --> 00:04:18,989
the server

101
00:04:16,890 --> 00:04:21,120
he made respond with a valid pairing and

102
00:04:18,988 --> 00:04:23,340
if he does this we suddenly learned

103
00:04:21,120 --> 00:04:25,730
something about the plaintext namely we

104
00:04:23,340 --> 00:04:28,109
learned that this blue part X of

105
00:04:25,730 --> 00:04:30,270
plaintext message equals sum valid

106
00:04:28,110 --> 00:04:32,190
padding and you can imagine that if we

107
00:04:30,270 --> 00:04:34,900
continue sending math for messages to

108
00:04:32,190 --> 00:04:36,940
the server we can finally decree

109
00:04:34,900 --> 00:04:39,250
the whole message and this is obviously

110
00:04:36,940 --> 00:04:41,229
bad because an attacker should not

111
00:04:39,250 --> 00:04:45,639
behave in possession of m2

112
00:04:41,229 --> 00:04:47,199
if he doesn't have a key so if you paid

113
00:04:45,639 --> 00:04:50,410
close attention you might have won that

114
00:04:47,199 --> 00:04:53,229
by visit X possibility yes because

115
00:04:50,410 --> 00:04:55,270
there's an H macwrite but the problem

116
00:04:53,229 --> 00:04:57,758
here sir TS uses this Mac van Petrin

117
00:04:55,270 --> 00:05:00,639
encrypt scheme so that receiver of a

118
00:04:57,759 --> 00:05:02,530
ciphertext cannot check the H make up

119
00:05:00,639 --> 00:05:04,539
front so what he first has to be he has

120
00:05:02,530 --> 00:05:06,369
to decrypt the message and then he has

121
00:05:04,539 --> 00:05:08,789
to check the padding to find the

122
00:05:06,370 --> 00:05:11,710
position of the extra hm x so he cannot

123
00:05:08,789 --> 00:05:14,469
check the H make before he checked the

124
00:05:11,710 --> 00:05:17,710
padding so how does this actually look

125
00:05:14,470 --> 00:05:20,500
like in TS in practice so invalid in

126
00:05:17,710 --> 00:05:23,530
insecure server with respond to some

127
00:05:20,500 --> 00:05:25,660
messages with an invalid H make alert

128
00:05:23,530 --> 00:05:27,789
and other messages that will respond

129
00:05:25,660 --> 00:05:29,380
with an invalid padding so we are two

130
00:05:27,789 --> 00:05:31,030
different behaviors which we can

131
00:05:29,380 --> 00:05:33,849
actually observe in a win over serve on

132
00:05:31,030 --> 00:05:35,650
a secure server will always respond the

133
00:05:33,849 --> 00:05:38,530
same way and it's not differentiable by

134
00:05:35,650 --> 00:05:39,270
an attacker if a padding was valid or

135
00:05:38,530 --> 00:05:43,000
invalid

136
00:05:39,270 --> 00:05:44,799
so yes the padding Oracle's are nothing

137
00:05:43,000 --> 00:05:46,599
new so there has been quite a lot of

138
00:05:44,800 --> 00:05:48,520
research on TS and especially on the CBC

139
00:05:46,599 --> 00:05:50,620
mode and the first padding Oracle

140
00:05:48,520 --> 00:05:55,359
vulnerabilities were introduced by a

141
00:05:50,620 --> 00:05:57,220
search for Nene in 2002 and we're not so

142
00:05:55,360 --> 00:06:00,310
practically yet but they short for a

143
00:05:57,220 --> 00:06:02,050
general concept of attack so after what

144
00:06:00,310 --> 00:06:04,630
some of you might recognize the poodle

145
00:06:02,050 --> 00:06:07,210
attacks they are quite famous because

146
00:06:04,630 --> 00:06:09,280
they broke SAV free and they taught us

147
00:06:07,210 --> 00:06:10,840
as a community what we need to check

148
00:06:09,280 --> 00:06:12,940
each bite of a pairing so we cannot have

149
00:06:10,840 --> 00:06:14,770
some arbitrary non determinism in

150
00:06:12,940 --> 00:06:16,870
repairing and we need to check each and

151
00:06:14,770 --> 00:06:18,698
every bite of them so there's no not

152
00:06:16,870 --> 00:06:20,320
only put attacks on SSI be free but

153
00:06:18,699 --> 00:06:22,750
there are also implementation

154
00:06:20,320 --> 00:06:25,440
vulnerabilities and you have TS versions

155
00:06:22,750 --> 00:06:28,060
which cannot also be affected by poodle

156
00:06:25,440 --> 00:06:29,880
then where's this interesting CBE from

157
00:06:28,060 --> 00:06:32,380
2016 and they taught us about

158
00:06:29,880 --> 00:06:34,150
interesting math on messages so not all

159
00:06:32,380 --> 00:06:36,490
messages need to contain all parts of

160
00:06:34,150 --> 00:06:40,120
the message which was quite new for the

161
00:06:36,490 --> 00:06:42,580
time and finally there's the lucky 13

162
00:06:40,120 --> 00:06:43,490
Tech which is a timing based side

163
00:06:42,580 --> 00:06:45,620
channel

164
00:06:43,490 --> 00:06:47,569
attack which is actually in the

165
00:06:45,620 --> 00:06:49,580
specification so if you are not very

166
00:06:47,569 --> 00:06:51,440
carefully when implementing this you

167
00:06:49,580 --> 00:06:52,699
will automatically implement the site

168
00:06:51,440 --> 00:06:54,740
context so you're vulnerable to this

169
00:06:52,699 --> 00:06:57,400
attack which made the whole padding

170
00:06:54,740 --> 00:07:00,800
Oracle discussion way more complex in

171
00:06:57,400 --> 00:07:03,229
this paper we also did not continue

172
00:07:00,800 --> 00:07:05,300
consider any lucky 14 side channels or

173
00:07:03,229 --> 00:07:08,030
any timing sessions because this is not

174
00:07:05,300 --> 00:07:10,160
measurable for the internet and finally

175
00:07:08,030 --> 00:07:12,258
there's a row at attack it was presented

176
00:07:10,160 --> 00:07:15,110
last year a few snakes here and it's not

177
00:07:12,259 --> 00:07:16,729
a classic CBC padding Oracle check but I

178
00:07:15,110 --> 00:07:18,229
still have it here on the slides because

179
00:07:16,729 --> 00:07:21,500
it's actually introduced that to some

180
00:07:18,229 --> 00:07:23,090
something quite interesting namely TCP

181
00:07:21,500 --> 00:07:24,740
sessions so they are not only different

182
00:07:23,090 --> 00:07:26,810
error messages but there are also

183
00:07:24,740 --> 00:07:31,550
different states of a socket we can

184
00:07:26,810 --> 00:07:33,919
observe as an attacker so let's speak

185
00:07:31,550 --> 00:07:36,080
about padding rockets in the wild so we

186
00:07:33,919 --> 00:07:38,479
know that padding Rockets are known

187
00:07:36,080 --> 00:07:41,719
since 2002 and what we asked ourselves

188
00:07:38,479 --> 00:07:43,669
how come an awaited way in 2018-2019

189
00:07:41,720 --> 00:07:45,349
obviously the thing are they already

190
00:07:43,669 --> 00:07:47,870
gone because everybody knows about them

191
00:07:45,349 --> 00:07:50,050
so what we thought is let's gain the

192
00:07:47,870 --> 00:07:52,070
Alexa top 1 million that's the list of

193
00:07:50,050 --> 00:07:54,139
websites which are most prominent on the

194
00:07:52,070 --> 00:07:56,360
internet and find out how many in one of

195
00:07:54,139 --> 00:07:58,340
your cells were actually on but when the

196
00:07:56,360 --> 00:08:00,440
question arose well how do we actually

197
00:07:58,340 --> 00:08:02,388
do this so they are quite a few ways to

198
00:08:00,440 --> 00:08:04,130
create what's my phone messages and to

199
00:08:02,389 --> 00:08:07,159
scan different things so what's the best

200
00:08:04,130 --> 00:08:09,440
way to find for most vulnerabilities so

201
00:08:07,159 --> 00:08:12,229
first off we ask ourselves how should

202
00:08:09,440 --> 00:08:14,360
our metaphor messages look like so is it

203
00:08:12,229 --> 00:08:16,880
doesn't matter with which part of a

204
00:08:14,360 --> 00:08:19,449
pairing we met on which bit which byte

205
00:08:16,880 --> 00:08:22,190
this is important if we modify the HTML

206
00:08:19,449 --> 00:08:24,199
and so on so we are not sure how to

207
00:08:22,190 --> 00:08:25,580
tackle this problem when we ask

208
00:08:24,199 --> 00:08:27,469
ourselves doesn't matter if we scan

209
00:08:25,580 --> 00:08:29,419
different here as versions or is it

210
00:08:27,469 --> 00:08:31,159
enough if we just scan one version and

211
00:08:29,419 --> 00:08:33,500
then conclude from that information

212
00:08:31,159 --> 00:08:35,599
about other versions or is it important

213
00:08:33,500 --> 00:08:37,760
if we scan different block ciphers so if

214
00:08:35,599 --> 00:08:39,890
it was cipher as a service going to be

215
00:08:37,760 --> 00:08:42,649
on Triple DES is he also going to be on

216
00:08:39,890 --> 00:08:44,390
a es or v ever very round so maybe we

217
00:08:42,649 --> 00:08:47,060
couldn't take some some shortcuts here

218
00:08:44,390 --> 00:08:48,410
if we want to scan be Alex August ah it

219
00:08:47,060 --> 00:08:51,349
doesn't matter which key exchange

220
00:08:48,410 --> 00:08:53,240
algorithm we use so intuitively

221
00:08:51,350 --> 00:08:55,460
should not make any difference if you

222
00:08:53,240 --> 00:08:58,040
use RSA or elliptic curves if you a man

223
00:08:55,460 --> 00:08:59,840
or defeat a man for the key exchange you

224
00:08:58,040 --> 00:09:03,310
would expect that you still receive the

225
00:08:59,840 --> 00:09:05,300
same padding or records but we had some

226
00:09:03,310 --> 00:09:08,839
indications from the Rowett paper but

227
00:09:05,300 --> 00:09:10,339
this might be also not the case so let

228
00:09:08,840 --> 00:09:12,470
me introduce you to our message design

229
00:09:10,340 --> 00:09:14,450
so what we did is we had a brainstorming

230
00:09:12,470 --> 00:09:15,980
session and we thought about all the

231
00:09:14,450 --> 00:09:18,680
previous padding Oracle inability to

232
00:09:15,980 --> 00:09:20,360
move out and came up with a list of

233
00:09:18,680 --> 00:09:22,310
different things we might want to test

234
00:09:20,360 --> 00:09:24,260
for so in this example we have some data

235
00:09:22,310 --> 00:09:26,900
we have some H Meg and we have some

236
00:09:24,260 --> 00:09:30,500
padding and we flipped the last bit of a

237
00:09:26,900 --> 00:09:31,840
padding to one so a seller which

238
00:09:30,500 --> 00:09:35,030
received this message would obviously

239
00:09:31,840 --> 00:09:36,830
rejected and on our local ously we

240
00:09:35,030 --> 00:09:38,300
created different variations of this

241
00:09:36,830 --> 00:09:40,550
message with the bit flips at different

242
00:09:38,300 --> 00:09:41,959
position so one in time we embed flipped

243
00:09:40,550 --> 00:09:44,780
in the middle one time we bit flipped in

244
00:09:41,960 --> 00:09:46,340
the end and when we did the same for the

245
00:09:44,780 --> 00:09:48,170
H mix so we flipped different bits in

246
00:09:46,340 --> 00:09:49,910
the H mix so we might trigger a service

247
00:09:48,170 --> 00:09:53,839
which did not check the HTML completely

248
00:09:49,910 --> 00:09:55,819
or so on and we also created

249
00:09:53,840 --> 00:09:57,560
combinations of both so they are bit

250
00:09:55,820 --> 00:10:00,860
flips in the H make and at the padding

251
00:09:57,560 --> 00:10:03,410
and finally we came up with a special

252
00:10:00,860 --> 00:10:05,990
vector so they are not intuitively so

253
00:10:03,410 --> 00:10:08,839
these vectors contain no H mech but they

254
00:10:05,990 --> 00:10:11,060
contain contain no data but they contain

255
00:10:08,840 --> 00:10:13,430
an H make and a lot of padding so in TS

256
00:10:11,060 --> 00:10:15,260
you can actually specify more padding

257
00:10:13,430 --> 00:10:17,569
when you actually require to hide the

258
00:10:15,260 --> 00:10:20,300
length of message and we used this

259
00:10:17,570 --> 00:10:22,370
feature to generate a very long padding

260
00:10:20,300 --> 00:10:23,810
and - maybe trick ourselves into

261
00:10:22,370 --> 00:10:25,100
revealing different behaviors if you

262
00:10:23,810 --> 00:10:27,859
find out that suddenly there's no

263
00:10:25,100 --> 00:10:29,690
application data so again we created

264
00:10:27,860 --> 00:10:31,550
different versions of his padding of his

265
00:10:29,690 --> 00:10:34,700
vectors with bit flips at different

266
00:10:31,550 --> 00:10:36,620
positions and we also came up with this

267
00:10:34,700 --> 00:10:38,720
vector so we look at very similarly but

268
00:10:36,620 --> 00:10:41,330
they are the pairing is actually 1 byte

269
00:10:38,720 --> 00:10:43,850
longer and the H makers 1 by 2 short so

270
00:10:41,330 --> 00:10:46,100
sourwood which would want to validate

271
00:10:43,850 --> 00:10:48,350
the hmx might run in turn off by one

272
00:10:46,100 --> 00:10:49,850
error so we first remove the first part

273
00:10:48,350 --> 00:10:52,160
of the H back and in the second vector

274
00:10:49,850 --> 00:10:55,280
we remove the last part of the H Meg and

275
00:10:52,160 --> 00:10:56,990
finally we came up with special messages

276
00:10:55,280 --> 00:10:58,910
I talked about beforehand so these

277
00:10:56,990 --> 00:11:01,250
messages do not contain an H make at all

278
00:10:58,910 --> 00:11:02,569
they contain only petting but you can't

279
00:11:01,250 --> 00:11:04,050
tell that if you did not equip the

280
00:11:02,570 --> 00:11:07,500
message so the

281
00:11:04,050 --> 00:11:08,729
one contains only valid pairing so the

282
00:11:07,500 --> 00:11:10,950
pairing is actually valid but there's

283
00:11:08,730 --> 00:11:12,720
been there's no H Mac and the second

284
00:11:10,950 --> 00:11:15,000
vector contains actually also only

285
00:11:12,720 --> 00:11:17,100
petting but the petting is also invalid

286
00:11:15,000 --> 00:11:19,589
so you serve I cannot check for her

287
00:11:17,100 --> 00:11:21,660
petting in the message so in total we

288
00:11:19,589 --> 00:11:23,790
came up with 25 meth on messages which

289
00:11:21,660 --> 00:11:26,930
we wanted to try to send to service to

290
00:11:23,790 --> 00:11:30,180
trigger whispering our vulnerabilities

291
00:11:26,930 --> 00:11:32,790
so what we had a problem so the problem

292
00:11:30,180 --> 00:11:34,979
was if we will send 25 messages on all

293
00:11:32,790 --> 00:11:37,469
the CBC ciphers it's a server support

294
00:11:34,980 --> 00:11:38,910
and then on multiple versions whenever

295
00:11:37,470 --> 00:11:41,610
to a lot of handshakes on this example

296
00:11:38,910 --> 00:11:44,250
500 and we assume that we want to scan a

297
00:11:41,610 --> 00:11:46,050
million servers we end up with 500

298
00:11:44,250 --> 00:11:48,360
million handshakes which will probably

299
00:11:46,050 --> 00:11:51,029
take a long time so you get a blurry

300
00:11:48,360 --> 00:11:53,250
image of the skin so what he then came

301
00:11:51,029 --> 00:11:55,970
up is this was this priest scanning

302
00:11:53,250 --> 00:11:58,110
technique so what we did is we tested

303
00:11:55,970 --> 00:11:59,910
50,000 random service on the Internet

304
00:11:58,110 --> 00:12:01,769
which responded on part 4 for free and

305
00:11:59,910 --> 00:12:06,300
tested what is actually necessary to

306
00:12:01,769 --> 00:12:08,640
skin so is it necessary to scan T as one

307
00:12:06,300 --> 00:12:09,930
at 0 and T as one at 1 1 or 2 or is it

308
00:12:08,640 --> 00:12:12,420
enough if we scan just one of them

309
00:12:09,930 --> 00:12:14,670
should we we tested with all available

310
00:12:12,420 --> 00:12:18,540
decipher suits and we tested with all

311
00:12:14,670 --> 00:12:20,490
25ml phone messages so the pre scanning

312
00:12:18,540 --> 00:12:22,500
results were is it actually necessary to

313
00:12:20,490 --> 00:12:24,899
scan with different versions yes it is

314
00:12:22,500 --> 00:12:26,940
Sam servers are only winnable on TS 1 or

315
00:12:24,899 --> 00:12:28,980
0 or only one beyond tears one or two

316
00:12:26,940 --> 00:12:31,490
while they still support the same cipher

317
00:12:28,980 --> 00:12:33,510
suit on the air on the other version

318
00:12:31,490 --> 00:12:36,120
also is it important if we scan

319
00:12:33,510 --> 00:12:37,950
different block ciphers yes it is Sam

320
00:12:36,120 --> 00:12:39,180
servers are only one a bit on a es while

321
00:12:37,950 --> 00:12:40,740
they are not going to be on Triple DES

322
00:12:39,180 --> 00:12:43,099
or yeah very very wrong but they still

323
00:12:40,740 --> 00:12:45,540
support the according our cypher suit

324
00:12:43,100 --> 00:12:47,040
and finally is it important if we scan

325
00:12:45,540 --> 00:12:50,370
different key exchange algorithms so

326
00:12:47,040 --> 00:12:52,849
does it matter if we scan only RSA or do

327
00:12:50,370 --> 00:12:55,740
we need to scan both or all of them so

328
00:12:52,850 --> 00:12:58,050
yes unfortunately yes so Sam servers are

329
00:12:55,740 --> 00:12:59,970
only available on our space - suits but

330
00:12:58,050 --> 00:13:01,229
not on elliptic curve surface suit so we

331
00:12:59,970 --> 00:13:04,170
assume that this is because there are

332
00:13:01,230 --> 00:13:05,730
some multi implementations set up where

333
00:13:04,170 --> 00:13:08,219
depending on the selected ciphers to the

334
00:13:05,730 --> 00:13:11,310
different implementation processes were

335
00:13:08,220 --> 00:13:12,899
encrypted messages and finally we also

336
00:13:11,310 --> 00:13:14,729
set which of a mer phone messages are

337
00:13:12,899 --> 00:13:16,140
actually necessary to find all the

338
00:13:14,730 --> 00:13:18,209
vulnerabilities in those 50 files and

339
00:13:16,140 --> 00:13:20,100
servers and those other formats

340
00:13:18,209 --> 00:13:22,559
just we actually require to find Oliver

341
00:13:20,100 --> 00:13:24,149
soon abilities so if you only send these

342
00:13:22,559 --> 00:13:26,519
four you would get the same results in

343
00:13:24,149 --> 00:13:28,740
the fifty fifty thousand so us so we

344
00:13:26,519 --> 00:13:31,410
used only both messages in the final

345
00:13:28,740 --> 00:13:33,779
study so that's what we did we tested by

346
00:13:31,410 --> 00:13:36,029
Alexa top 1 million with these four

347
00:13:33,779 --> 00:13:37,439
messages all the CBC cypher suits was

348
00:13:36,029 --> 00:13:40,740
server supported all the protocol

349
00:13:37,439 --> 00:13:42,629
versions were server supported and came

350
00:13:40,740 --> 00:13:44,879
up with the following result so it took

351
00:13:42,629 --> 00:13:49,079
us roughly 72 hours to scan by Alexa

352
00:13:44,879 --> 00:13:51,360
list and roughly is 78 percent of a

353
00:13:49,079 --> 00:13:54,359
service responded on part 4 for free so

354
00:13:51,360 --> 00:13:56,819
they were probably wanting to speak TS

355
00:13:54,360 --> 00:13:59,519
with us and from both service we found

356
00:13:56,819 --> 00:14:01,949
that 18 thousand 257 actually vulnerable

357
00:13:59,519 --> 00:14:04,429
to padding Oracle vulnerability so it's

358
00:14:01,949 --> 00:14:08,309
roughly one point eight three percent

359
00:14:04,429 --> 00:14:10,259
was quite a lot in my eyes but we still

360
00:14:08,309 --> 00:14:11,879
ask yourself how many different when one

361
00:14:10,259 --> 00:14:13,589
of the implementations are responsible

362
00:14:11,879 --> 00:14:15,209
for this so might be that that's just

363
00:14:13,589 --> 00:14:18,019
one vulnerable implementation which is

364
00:14:15,209 --> 00:14:20,459
quite common or are there multiple

365
00:14:18,019 --> 00:14:21,449
implementations so we also wanted to

366
00:14:20,459 --> 00:14:24,299
know us because we wanted to

367
00:14:21,449 --> 00:14:26,368
responsibility disclose our results so

368
00:14:24,299 --> 00:14:28,319
what we did is we think I printed every

369
00:14:26,369 --> 00:14:30,389
one of a server with all the metaphor

370
00:14:28,319 --> 00:14:32,549
messages and to create a some sort of

371
00:14:30,389 --> 00:14:34,649
thing I print which we you can use to

372
00:14:32,549 --> 00:14:36,959
compare the vulnerabilities so how does

373
00:14:34,649 --> 00:14:40,139
Google's fingerprints look like so in

374
00:14:36,959 --> 00:14:41,699
this example you can see the vector we

375
00:14:40,139 --> 00:14:43,139
sent to the server and on the other side

376
00:14:41,699 --> 00:14:44,699
you can see with response from the

377
00:14:43,139 --> 00:14:47,549
server in this case it was wanted with a

378
00:14:44,699 --> 00:14:50,099
bad record make a lot and a TCP fence we

379
00:14:47,549 --> 00:14:53,189
close with TCP socket where the finish

380
00:14:50,100 --> 00:14:54,779
is within and if you do this for all the

381
00:14:53,189 --> 00:14:56,998
messages you get something like this so

382
00:14:54,779 --> 00:14:59,040
you can see where all the messages and

383
00:14:56,999 --> 00:15:00,779
all the answers from the server and as

384
00:14:59,040 --> 00:15:02,579
you can see there's some difference so

385
00:15:00,779 --> 00:15:04,499
if a server responds differently to some

386
00:15:02,579 --> 00:15:06,059
of those messages he is vulnerable to a

387
00:15:04,499 --> 00:15:08,009
pairing or okay a check and in this case

388
00:15:06,059 --> 00:15:09,990
you can see that were messages which

389
00:15:08,009 --> 00:15:12,059
contain only padding eval valid or

390
00:15:09,990 --> 00:15:13,860
invalid trigger trigger a record

391
00:15:12,059 --> 00:15:16,139
overflow on the server where all the

392
00:15:13,860 --> 00:15:18,059
other messages trigger a bad record Mac

393
00:15:16,139 --> 00:15:21,240
so in total we found

394
00:15:18,059 --> 00:15:23,160
93 different behaviors from servers so

395
00:15:21,240 --> 00:15:24,749
assuming that you cannot configure your

396
00:15:23,160 --> 00:15:27,240
server to respond with different

397
00:15:24,749 --> 00:15:28,980
behaviors this means that they are

398
00:15:27,240 --> 00:15:31,540
likely 93 different vulnerable

399
00:15:28,980 --> 00:15:35,440
implementations at one

400
00:15:31,540 --> 00:15:39,240
so we tried to disclose our findings and

401
00:15:35,440 --> 00:15:42,190
we ended up with these four CVEs and

402
00:15:39,240 --> 00:15:44,200
vulnerability report by Orica so we were

403
00:15:42,190 --> 00:15:46,090
not able to think I print all the

404
00:15:44,200 --> 00:15:49,510
responsible vendors and not all the

405
00:15:46,090 --> 00:15:52,060
websites responded to our and discord up

406
00:15:49,510 --> 00:15:54,400
messages but the most prominent phone

407
00:15:52,060 --> 00:15:56,770
ability we found a CV each of the top CV

408
00:15:54,400 --> 00:15:59,380
in openness and it's actually a quite

409
00:15:56,770 --> 00:16:01,329
interesting CV because obviously we

410
00:15:59,380 --> 00:16:03,610
scanned openness beforehand in our lab

411
00:16:01,330 --> 00:16:05,650
setting but for one ability did not pop

412
00:16:03,610 --> 00:16:07,990
up so we were completely unaware that

413
00:16:05,650 --> 00:16:09,069
openness is actually vulnerable and the

414
00:16:07,990 --> 00:16:11,350
reason for this is that this

415
00:16:09,070 --> 00:16:14,520
vulnerability only shows if you use the

416
00:16:11,350 --> 00:16:16,990
openness API in an unintended way and

417
00:16:14,520 --> 00:16:19,060
the S server application which is

418
00:16:16,990 --> 00:16:21,910
shipped with openness to test or master

419
00:16:19,060 --> 00:16:24,099
is actually not using the openness API

420
00:16:21,910 --> 00:16:27,400
in an unguent way and therefore not does

421
00:16:24,100 --> 00:16:28,600
not show this vulnerability so you can

422
00:16:27,400 --> 00:16:30,459
find the current process of our

423
00:16:28,600 --> 00:16:32,230
disclosure process on github so I'm

424
00:16:30,460 --> 00:16:33,340
available nervous oh and there's also

425
00:16:32,230 --> 00:16:36,040
some additional information about

426
00:16:33,340 --> 00:16:37,780
padding Oracle burn abilities and if you

427
00:16:36,040 --> 00:16:39,760
want you can also download our to Atia

428
00:16:37,780 --> 00:16:41,110
scanner with it you can scan individual

429
00:16:39,760 --> 00:16:42,580
service for padding Oracle burn

430
00:16:41,110 --> 00:16:45,040
abilities that also tries to identify

431
00:16:42,580 --> 00:16:47,110
vulnerabilities so you can actually see

432
00:16:45,040 --> 00:16:48,790
which one one ability you have found and

433
00:16:47,110 --> 00:16:52,480
maybe you can also help us to identify

434
00:16:48,790 --> 00:16:53,949
other windows which are also affected so

435
00:16:52,480 --> 00:16:56,740
with that I come to the contributions

436
00:16:53,950 --> 00:16:58,060
and conclusions so we found 93 different

437
00:16:56,740 --> 00:16:59,800
vulnerabilities and really

438
00:16:58,060 --> 00:17:02,260
responsibility to disclose our findings

439
00:16:59,800 --> 00:17:03,969
so that actually a little over 90

440
00:17:02,260 --> 00:17:06,520
percent of our own abilities on our fix

441
00:17:03,970 --> 00:17:08,500
and implementations and we released

442
00:17:06,520 --> 00:17:10,300
autumn sorceress which Venice and the

443
00:17:08,500 --> 00:17:11,920
developers and administrators can

444
00:17:10,300 --> 00:17:13,389
actually scan their servers to go and

445
00:17:11,920 --> 00:17:17,170
find out if they are unable to visit X

446
00:17:13,390 --> 00:17:19,180
and our paper showed that these large

447
00:17:17,170 --> 00:17:20,920
Gaskins can actually help to uncover new

448
00:17:19,180 --> 00:17:22,930
vulnerabilities which we did not show up

449
00:17:20,920 --> 00:17:24,640
in the lab setting so this is the

450
00:17:22,930 --> 00:17:27,160
technique which can actually used to be

451
00:17:24,640 --> 00:17:29,680
used to find new vulnerabilities and it

452
00:17:27,160 --> 00:17:32,020
also showed that implementing CBC Animax

453
00:17:29,680 --> 00:17:34,570
and petrol encrypt scheme is pretty damn

454
00:17:32,020 --> 00:17:36,490
hard because we did not check for this

455
00:17:34,570 --> 00:17:38,649
constant time implementation we did not

456
00:17:36,490 --> 00:17:40,720
check for other side channels all our

457
00:17:38,650 --> 00:17:43,660
findings are very obvious if you look at

458
00:17:40,720 --> 00:17:44,890
the network traffic so where I expect

459
00:17:43,660 --> 00:17:48,580
that they are very more going to be

460
00:17:44,890 --> 00:17:50,440
and maybe it is time to remove CBC

461
00:17:48,580 --> 00:17:52,629
support entirely because if nobody's

462
00:17:50,440 --> 00:18:04,540
using CBC you cannot be one of it Teresa

463
00:17:52,630 --> 00:18:05,890
ticks thank you hi so you found ulnar

464
00:18:04,540 --> 00:18:07,000
abilities in like two percent of the

465
00:18:05,890 --> 00:18:08,680
electric Tom million I'm wondering like

466
00:18:07,000 --> 00:18:10,240
where were they distributed amongst the

467
00:18:08,680 --> 00:18:11,770
top million did you see like where

468
00:18:10,240 --> 00:18:14,290
something like the top hundred or like

469
00:18:11,770 --> 00:18:14,950
that yeah we also have avoidable service

470
00:18:14,290 --> 00:18:25,840
in the top ten

471
00:18:14,950 --> 00:18:28,030
yeah okay how about questions how

472
00:18:25,840 --> 00:18:30,970
confident are you that you found all of

473
00:18:28,030 --> 00:18:33,370
these in the sense that you you reduced

474
00:18:30,970 --> 00:18:35,140
your test vectors say how confident are

475
00:18:33,370 --> 00:18:36,639
you that you didn't make some mistakes

476
00:18:35,140 --> 00:18:38,140
when you reduce to that oh that's a

477
00:18:36,640 --> 00:18:41,020
great question that's also question one

478
00:18:38,140 --> 00:18:43,810
of his videos head and the thing is we

479
00:18:41,020 --> 00:18:46,720
scan 50,000 service and if you you can

480
00:18:43,810 --> 00:18:49,360
do some caviar statistics and then you

481
00:18:46,720 --> 00:18:51,040
can calculate how many is service we

482
00:18:49,360 --> 00:18:53,439
might have missed and it's actually

483
00:18:51,040 --> 00:18:55,120
quite low but you could design your

484
00:18:53,440 --> 00:18:56,560
vectors differently so you can choose a

485
00:18:55,120 --> 00:18:58,030
different size you can just choose

486
00:18:56,560 --> 00:19:01,000
different authorities and suddenly you

487
00:18:58,030 --> 00:19:02,590
will find additional Windows service so

488
00:19:01,000 --> 00:19:04,240
they are probably way more so we were

489
00:19:02,590 --> 00:19:06,310
very conservative when the with

490
00:19:04,240 --> 00:19:07,240
estimation so we exclude a lot of

491
00:19:06,310 --> 00:19:10,889
service which responded

492
00:19:07,240 --> 00:19:13,270
non-deterministically for example and

493
00:19:10,890 --> 00:19:15,460
you think that two percent that you

494
00:19:13,270 --> 00:19:17,530
found would that be higher on the longer

495
00:19:15,460 --> 00:19:21,550
tail like the non popular site so all

496
00:19:17,530 --> 00:19:23,379
the sites that are not so yeah so fifty

497
00:19:21,550 --> 00:19:25,360
thousand service was compared like five

498
00:19:23,380 --> 00:19:27,040
percent vulnerabilities because they are

499
00:19:25,360 --> 00:19:28,959
probably more IOT devices and more

500
00:19:27,040 --> 00:19:30,460
diverse implementations so in the

501
00:19:28,960 --> 00:19:32,710
lecture list you probably have same

502
00:19:30,460 --> 00:19:34,750
vendors over and over again so this is

503
00:19:32,710 --> 00:19:37,530
why probably there are even more than

504
00:19:34,750 --> 00:19:37,530
the self area

505
00:19:39,120 --> 00:19:43,179
daniel ganc in University of Michigan

506
00:19:41,260 --> 00:19:45,460
did you you just mentioned that you

507
00:19:43,180 --> 00:19:47,710
ignored servers that responded not a

508
00:19:45,460 --> 00:19:48,640
monistic Lee yeah you try looking at the

509
00:19:47,710 --> 00:19:52,420
distribution

510
00:19:48,640 --> 00:19:54,880
and saying if if the distributions are

511
00:19:52,420 --> 00:19:58,600
different based on each base if you

512
00:19:54,880 --> 00:20:00,790
suddenly invalids a message or not this

513
00:19:58,600 --> 00:20:03,820
is how do I know where we did this out

514
00:20:00,790 --> 00:20:05,860
of a paper so you can do this and then

515
00:20:03,820 --> 00:20:07,960
you can find even more abilities but we

516
00:20:05,860 --> 00:20:14,560
did think that this is not so convincing

517
00:20:07,960 --> 00:20:16,500
for research paper so another round of

518
00:20:14,560 --> 00:20:20,629
applause thank you

519
00:20:16,500 --> 00:20:20,630
[Applause]

