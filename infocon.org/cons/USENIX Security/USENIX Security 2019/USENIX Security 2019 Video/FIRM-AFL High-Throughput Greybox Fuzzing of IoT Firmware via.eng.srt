1
00:00:10,710 --> 00:00:15,629
thank you very much thank you everybody

2
00:00:12,660 --> 00:00:19,289
for coming so today I'm gonna talk about

3
00:00:15,629 --> 00:00:23,698
IOT fuzzing they'll further do let's

4
00:00:19,289 --> 00:00:25,739
start by 2020 there will be more than 20

5
00:00:23,699 --> 00:00:28,890
billion IOT devices connected to

6
00:00:25,739 --> 00:00:33,300
internet introducing an enormous attack

7
00:00:28,890 --> 00:00:36,660
surface and the security impact of this

8
00:00:33,300 --> 00:00:38,640
would be huge there would be actually it

9
00:00:36,660 --> 00:00:41,489
would be twofold so first there would be

10
00:00:38,640 --> 00:00:44,000
a privacy issue for end-users who would

11
00:00:41,489 --> 00:00:46,559
be direct targets for attackers and

12
00:00:44,000 --> 00:00:49,080
second there would be an implication for

13
00:00:46,559 --> 00:00:51,360
other users when the IOT becomes

14
00:00:49,080 --> 00:00:55,290
infected and participates in a botnet

15
00:00:51,360 --> 00:00:59,580
and we already saw such examples such as

16
00:00:55,290 --> 00:01:01,530
Mir a botnet or VPN filter or prolly so

17
00:00:59,580 --> 00:01:04,589
what can we do about it we can of course

18
00:01:01,530 --> 00:01:07,530
find IOT devices vulnerabilities using

19
00:01:04,589 --> 00:01:10,470
methods such as fuzzing and with fuzzing

20
00:01:07,530 --> 00:01:13,590
v basically i turret of lis execute a

21
00:01:10,470 --> 00:01:17,520
program with random inputs but how do we

22
00:01:13,590 --> 00:01:20,400
go about executing an IOT program the

23
00:01:17,520 --> 00:01:24,119
first option is executing on the

24
00:01:20,400 --> 00:01:28,560
hardware and with that we have a

25
00:01:24,120 --> 00:01:30,060
throughput problem basically because we

26
00:01:28,560 --> 00:01:31,740
are executing on the hardware the

27
00:01:30,060 --> 00:01:33,390
hardware is slow so we get a low

28
00:01:31,740 --> 00:01:37,619
throughput and throughput is very

29
00:01:33,390 --> 00:01:40,409
important for fuzzy the second option is

30
00:01:37,620 --> 00:01:42,390
emulating a program a user program and

31
00:01:40,409 --> 00:01:44,550
with this we solve actually the

32
00:01:42,390 --> 00:01:48,030
throughput problem but we would still

33
00:01:44,550 --> 00:01:50,130
have compatibility issue because for the

34
00:01:48,030 --> 00:01:51,870
next program for the third program and

35
00:01:50,130 --> 00:01:54,330
so on so forth we need to come up with

36
00:01:51,870 --> 00:01:58,170
our fixes for the emulation because

37
00:01:54,330 --> 00:02:02,580
inherently user emulation cannot support

38
00:01:58,170 --> 00:02:06,090
actually hardware dependencies that IOT

39
00:02:02,580 --> 00:02:08,369
programs have the third option is

40
00:02:06,090 --> 00:02:11,760
actually emulating full stack and with

41
00:02:08,369 --> 00:02:13,739
that we did high compatibility but again

42
00:02:11,760 --> 00:02:16,709
we are back to square one which is that

43
00:02:13,739 --> 00:02:20,360
we get a low throughput because full

44
00:02:16,709 --> 00:02:20,360
stack emulation is slow

45
00:02:26,290 --> 00:02:33,159
okay so the question for us is can leaf

46
00:02:30,040 --> 00:02:37,209
as IOT devices with high throughput and

47
00:02:33,159 --> 00:02:40,209
high compatibility let's take a look at

48
00:02:37,209 --> 00:02:43,030
the related world the first word is

49
00:02:40,209 --> 00:02:45,909
actually Avatar and avatar follows a

50
00:02:43,030 --> 00:02:47,950
hybrid approach it emulates the program

51
00:02:45,909 --> 00:02:50,590
until there's a hardware request and in

52
00:02:47,950 --> 00:02:52,959
such cases it forwards the request to

53
00:02:50,590 --> 00:02:56,379
real hardware and because it uses real

54
00:02:52,959 --> 00:02:59,170
Hardware it has a low throughput the

55
00:02:56,379 --> 00:03:02,048
second work is IOT fuzzers which

56
00:02:59,170 --> 00:03:04,298
basically executes son real hardware and

57
00:03:02,049 --> 00:03:07,090
because of that it again has a low

58
00:03:04,299 --> 00:03:09,849
throughput further since they're fuzzing

59
00:03:07,090 --> 00:03:12,579
is a black box approach it has a low

60
00:03:09,849 --> 00:03:16,480
code coverage the third word is

61
00:03:12,579 --> 00:03:18,609
thermodyne which uses emulation their

62
00:03:16,480 --> 00:03:20,530
throughput is medium but the main

63
00:03:18,609 --> 00:03:22,810
problem with this work is that they

64
00:03:20,530 --> 00:03:24,519
cannot find zero-day vulnerabilities

65
00:03:22,810 --> 00:03:27,220
because they only search for known

66
00:03:24,519 --> 00:03:31,000
vulnerability patterns and then there's

67
00:03:27,220 --> 00:03:34,419
the next work in env ss-18 where they

68
00:03:31,000 --> 00:03:37,139
basically try different techniques they

69
00:03:34,419 --> 00:03:40,510
try emulation and they also try hardware

70
00:03:37,139 --> 00:03:42,750
execution they conclude that a full

71
00:03:40,510 --> 00:03:46,899
system emulation gives us the best

72
00:03:42,750 --> 00:03:49,389
throughput but their fuzzing approach is

73
00:03:46,900 --> 00:03:52,629
blackbox so again we would have the low

74
00:03:49,389 --> 00:03:56,579
code coverage problem and finally we

75
00:03:52,629 --> 00:04:00,220
have a FL which is a gray box fuzzer

76
00:03:56,579 --> 00:04:02,859
it has a very high coverage it has a

77
00:04:00,220 --> 00:04:05,169
high throughput but the main problem

78
00:04:02,859 --> 00:04:08,590
with a FL is compatibility and the

79
00:04:05,169 --> 00:04:11,500
reason for that is because a FL is based

80
00:04:08,590 --> 00:04:15,819
on user mode emulation and user mode

81
00:04:11,500 --> 00:04:18,220
emulation fails for IOT programs this is

82
00:04:15,819 --> 00:04:20,978
basically because when there's a

83
00:04:18,220 --> 00:04:24,520
hardware dependency user mode emulation

84
00:04:20,978 --> 00:04:27,880
cannot resolve it so how about replacing

85
00:04:24,520 --> 00:04:31,060
a FL user mode emulation with full

86
00:04:27,880 --> 00:04:33,760
system emulation well that's a slower as

87
00:04:31,060 --> 00:04:35,860
I said it has a low throughput and there

88
00:04:33,760 --> 00:04:38,770
are three reasons for that first of all

89
00:04:35,860 --> 00:04:41,110
the memory address translation in

90
00:04:38,770 --> 00:04:43,840
full-system emulation is more

91
00:04:41,110 --> 00:04:46,390
complicated there are actually three

92
00:04:43,840 --> 00:04:49,690
layers of translation and each layer

93
00:04:46,390 --> 00:04:51,789
adds an extra overhead second we have

94
00:04:49,690 --> 00:04:53,830
the system called emulation because we

95
00:04:51,790 --> 00:04:57,670
want to resolve hardware dependencies

96
00:04:53,830 --> 00:05:00,280
and that adds overhead and third we have

97
00:04:57,670 --> 00:05:02,500
dynamic code translation that takes more

98
00:05:00,280 --> 00:05:04,809
time in the system mode emulation I

99
00:05:02,500 --> 00:05:07,360
don't get into further details because I

100
00:05:04,810 --> 00:05:09,100
don't just want to bore you yet so if

101
00:05:07,360 --> 00:05:12,940
you're interested please go to the paper

102
00:05:09,100 --> 00:05:16,930
read it and here you can see an example

103
00:05:12,940 --> 00:05:19,300
of our measurement for two programs AFL

104
00:05:16,930 --> 00:05:21,700
with chip system mode emulation and with

105
00:05:19,300 --> 00:05:23,560
user mode emulation and as you can see

106
00:05:21,700 --> 00:05:26,800
this is just an example but you can see

107
00:05:23,560 --> 00:05:29,080
that the execution time is ten times

108
00:05:26,800 --> 00:05:33,580
more in the system mode meaning that the

109
00:05:29,080 --> 00:05:36,849
throughput would be ten times less so so

110
00:05:33,580 --> 00:05:40,060
far I told you that for fuzzing IOT with

111
00:05:36,850 --> 00:05:43,300
AFL we have two option either user mode

112
00:05:40,060 --> 00:05:45,160
emulation or full mode emulation with

113
00:05:43,300 --> 00:05:47,890
user mode emulation we have high

114
00:05:45,160 --> 00:05:50,440
throughput with full mode emulation we

115
00:05:47,890 --> 00:05:53,229
have high compatibility but on the

116
00:05:50,440 --> 00:05:56,710
downside with the user mode emulation we

117
00:05:53,230 --> 00:05:58,750
would have low compatibility and it used

118
00:05:56,710 --> 00:06:02,109
with full mode emulation we would have

119
00:05:58,750 --> 00:06:04,480
low throughput how about combining them

120
00:06:02,110 --> 00:06:07,390
and that's actually the idea behind our

121
00:06:04,480 --> 00:06:09,490
Augmented process emulation combining

122
00:06:07,390 --> 00:06:12,400
user mode emulation with system mode

123
00:06:09,490 --> 00:06:15,280
emulation and our design goal basically

124
00:06:12,400 --> 00:06:17,530
is we want to achieve high transparency

125
00:06:15,280 --> 00:06:19,510
so we don't want any difference in

126
00:06:17,530 --> 00:06:22,390
execution between the user mode and

127
00:06:19,510 --> 00:06:25,000
system Oh correctness in other words and

128
00:06:22,390 --> 00:06:30,219
we want high efficiency high throughput

129
00:06:25,000 --> 00:06:32,920
and no over hood or a performance as

130
00:06:30,220 --> 00:06:35,920
closest to user mode emulation we have

131
00:06:32,920 --> 00:06:39,520
two assumptions the firmware should be

132
00:06:35,920 --> 00:06:42,210
can be correct correctly emulated in a

133
00:06:39,520 --> 00:06:46,419
system emulator more specifically in

134
00:06:42,210 --> 00:06:49,120
system mode qumu and the firmware runs a

135
00:06:46,420 --> 00:06:50,849
POSIX compatible operating system these

136
00:06:49,120 --> 00:06:53,909
are our two assumptions

137
00:06:50,849 --> 00:06:56,959
and a spoiler on average we implemented

138
00:06:53,909 --> 00:06:59,759
this and an average we actually achieved

139
00:06:56,959 --> 00:07:02,330
8.2 times higher throughput and we found

140
00:06:59,759 --> 00:07:05,429
2-0 vulnerabilities

141
00:07:02,330 --> 00:07:08,179
the main challenge in augmented process

142
00:07:05,429 --> 00:07:11,369
emulation is a state synchronization and

143
00:07:08,179 --> 00:07:14,659
by state I mean both CPU and memory

144
00:07:11,369 --> 00:07:17,610
states for CPS state synchronization

145
00:07:14,659 --> 00:07:21,360
it's not very challenging we can we can

146
00:07:17,610 --> 00:07:23,339
actually copy CPU registers and make

147
00:07:21,360 --> 00:07:26,459
sure that in the two two modes the

148
00:07:23,339 --> 00:07:29,639
values are the same but for memory state

149
00:07:26,459 --> 00:07:31,800
we have we need extra efforts before I

150
00:07:29,639 --> 00:07:33,860
get into the details let's actually see

151
00:07:31,800 --> 00:07:36,360
what I mean by memory state

152
00:07:33,860 --> 00:07:38,459
synchronization so we have two modes

153
00:07:36,360 --> 00:07:40,169
user mode and full mode and let's assume

154
00:07:38,459 --> 00:07:43,019
that this is the piece of code that we

155
00:07:40,169 --> 00:07:44,938
want to run what yet what I mean by

156
00:07:43,019 --> 00:07:47,639
memory state synchronization is that a

157
00:07:44,939 --> 00:07:50,550
variable like temp zero should point to

158
00:07:47,639 --> 00:07:53,249
the same memory location on RAM and that

159
00:07:50,550 --> 00:07:57,059
way we make sure that they have the same

160
00:07:53,249 --> 00:08:00,589
value at all times so how do we go about

161
00:07:57,059 --> 00:08:02,999
it and actually make sure that happens

162
00:08:00,589 --> 00:08:05,069
this figure high-level shows are

163
00:08:02,999 --> 00:08:07,019
augmented process emulation as I said we

164
00:08:05,069 --> 00:08:09,509
have two modes user mode emulation and

165
00:08:07,019 --> 00:08:11,999
system mode emulation in the system mode

166
00:08:09,509 --> 00:08:15,300
emulation we have multiple processes and

167
00:08:11,999 --> 00:08:18,629
one of these processes is actually our

168
00:08:15,300 --> 00:08:21,649
user mode emulation process there's a

169
00:08:18,629 --> 00:08:26,999
transition between these two modes and

170
00:08:21,649 --> 00:08:29,159
they both access the same Ram file so

171
00:08:26,999 --> 00:08:31,709
about the how do we do the memory

172
00:08:29,159 --> 00:08:33,718
synchronization initially we actually we

173
00:08:31,709 --> 00:08:37,169
are in the bootstrapping phase we

174
00:08:33,719 --> 00:08:39,899
execute in the system mode emulation we

175
00:08:37,169 --> 00:08:42,299
run until reaching a predetermined point

176
00:08:39,899 --> 00:08:44,600
which is actually where we want to start

177
00:08:42,299 --> 00:08:48,569
our fuzzing and we forked from there and

178
00:08:44,600 --> 00:08:50,540
while doing so we collect the the

179
00:08:48,569 --> 00:08:54,000
mapping from virtual to physical

180
00:08:50,540 --> 00:08:55,920
addresses after reaching the

181
00:08:54,000 --> 00:08:58,560
predetermined point we switch the user

182
00:08:55,920 --> 00:09:00,839
mode and whenever there is a page fault

183
00:08:58,560 --> 00:09:03,560
we switch mode and go back to the system

184
00:09:00,839 --> 00:09:06,620
we handle the page fault in the system

185
00:09:03,560 --> 00:09:09,979
mode and make sure that the mapping is

186
00:09:06,620 --> 00:09:12,230
as such that both modes see the same

187
00:09:09,980 --> 00:09:13,880
view of memory well I'm not gonna go

188
00:09:12,230 --> 00:09:16,150
into details but this is not very

189
00:09:13,880 --> 00:09:19,040
intuitive because if you look at the

190
00:09:16,150 --> 00:09:20,569
addresses that we have before the same

191
00:09:19,040 --> 00:09:22,099
variable you would see different

192
00:09:20,570 --> 00:09:25,070
addresses and this is because we have

193
00:09:22,100 --> 00:09:27,440
different translation mechanisms in

194
00:09:25,070 --> 00:09:29,960
these two modes if you're interested

195
00:09:27,440 --> 00:09:33,529
please refer to paper for further

196
00:09:29,960 --> 00:09:36,260
details on how we handle this there's an

197
00:09:33,529 --> 00:09:38,510
another challenge and that is how do we

198
00:09:36,260 --> 00:09:41,029
know that the page fault handling is

199
00:09:38,510 --> 00:09:43,310
actually finished and we can switch back

200
00:09:41,029 --> 00:09:46,270
to the user mode again if you're

201
00:09:43,310 --> 00:09:49,939
interested please refer to the paper

202
00:09:46,270 --> 00:09:52,910
after we are done handling page fault we

203
00:09:49,940 --> 00:09:55,520
go back to the user mode we we execute

204
00:09:52,910 --> 00:09:57,439
until there is a system call and if

205
00:09:55,520 --> 00:10:02,390
there is a system call again we switch

206
00:09:57,440 --> 00:10:05,540
back to the user mode there are further

207
00:10:02,390 --> 00:10:07,250
optimizations that I don't get into

208
00:10:05,540 --> 00:10:10,069
details if you're interested please

209
00:10:07,250 --> 00:10:13,310
refer to the paper we have a lightweight

210
00:10:10,070 --> 00:10:17,210
a snapshot mechanism the preload page

211
00:10:13,310 --> 00:10:20,209
mapping for code pages and instead of

212
00:10:17,210 --> 00:10:25,040
blindly redirecting every system call we

213
00:10:20,210 --> 00:10:26,930
actually doing it selectively so we

214
00:10:25,040 --> 00:10:30,650
implemented our augmented process

215
00:10:26,930 --> 00:10:34,010
emulation in a tool called firm AFL and

216
00:10:30,650 --> 00:10:37,069
firm AFL is basically a AFL integrated

217
00:10:34,010 --> 00:10:40,730
with augmented process emulation so in

218
00:10:37,070 --> 00:10:44,540
AFL in each iteration of fuzzing AFL

219
00:10:40,730 --> 00:10:47,209
mutates a seed input it runs the program

220
00:10:44,540 --> 00:10:49,880
with the seed input it collects the code

221
00:10:47,209 --> 00:10:53,569
coverage information and if there is a

222
00:10:49,880 --> 00:10:56,060
new code coverage it keeps the input for

223
00:10:53,570 --> 00:10:59,450
code coverage collection AFL relies on

224
00:10:56,060 --> 00:11:01,119
binary instrumentation via user mode

225
00:10:59,450 --> 00:11:04,190
offered via

226
00:11:01,120 --> 00:11:08,180
user mode queue and that's our main

227
00:11:04,190 --> 00:11:10,610
difference with a FLV replace the user

228
00:11:08,180 --> 00:11:13,069
mode Qumu with our augmented process

229
00:11:10,610 --> 00:11:14,950
emulation so initially as I mentioned we

230
00:11:13,070 --> 00:11:17,240
are we have our bootstrapping phase

231
00:11:14,950 --> 00:11:20,209
before the process

232
00:11:17,240 --> 00:11:22,399
for this iteration of fuzzing we feed

233
00:11:20,209 --> 00:11:25,189
the input we collect the coverage

234
00:11:22,399 --> 00:11:27,019
information and we decide whether the

235
00:11:25,189 --> 00:11:32,689
input is useful and we keep repeating

236
00:11:27,019 --> 00:11:35,420
this we evaluated Fermi level our tool

237
00:11:32,689 --> 00:11:37,998
our goal was actually evaluating

238
00:11:35,420 --> 00:11:41,809
transparency and efficiency of a firm

239
00:11:37,999 --> 00:11:43,939
AFO so for transparency we actually want

240
00:11:41,809 --> 00:11:47,420
to make sure that augmented process

241
00:11:43,939 --> 00:11:50,149
emulation gives us correct execution and

242
00:11:47,420 --> 00:11:53,300
for that we're an end bench and 120

243
00:11:50,149 --> 00:11:56,269
firmware images we also ran exploits

244
00:11:53,300 --> 00:11:58,399
targeting known vulnerabilities and the

245
00:11:56,269 --> 00:12:00,829
result of our evaluation was that the

246
00:11:58,399 --> 00:12:03,129
execution result of augmented process

247
00:12:00,829 --> 00:12:05,449
emulation is the same as full system

248
00:12:03,129 --> 00:12:07,459
emulation and by that I mean that the

249
00:12:05,449 --> 00:12:09,559
outputs were the same the system call

250
00:12:07,459 --> 00:12:14,118
sequence was the same and the execution

251
00:12:09,559 --> 00:12:19,929
trace also was the same so firm AFL has

252
00:12:14,119 --> 00:12:23,089
full transparency we also measured how

253
00:12:19,929 --> 00:12:26,749
efficient firm AFL is and what you see

254
00:12:23,089 --> 00:12:30,110
in these figures is basically each chart

255
00:12:26,749 --> 00:12:33,379
presents our measurement for one IOT

256
00:12:30,110 --> 00:12:38,059
device y-axis reports the number of

257
00:12:33,379 --> 00:12:41,149
unique crashes found and x-axis reports

258
00:12:38,059 --> 00:12:44,149
the time in seconds the blue area is

259
00:12:41,149 --> 00:12:46,910
actually our work the result of our work

260
00:12:44,149 --> 00:12:49,850
and the red area is the full system

261
00:12:46,910 --> 00:12:53,990
emulation and as you can see our our

262
00:12:49,850 --> 00:12:56,209
work which is in blue outperforms full

263
00:12:53,990 --> 00:12:58,699
system emulation in all cases in most

264
00:12:56,209 --> 00:13:01,579
cases it's 10 times in a few cases it's

265
00:12:58,699 --> 00:13:05,149
three times but in all cases it

266
00:13:01,579 --> 00:13:07,219
outperforms a full system emulation what

267
00:13:05,149 --> 00:13:09,290
you see here is an area instead of a

268
00:13:07,220 --> 00:13:11,269
single line it's because we do the

269
00:13:09,290 --> 00:13:15,199
measurements ten times and they report

270
00:13:11,269 --> 00:13:17,980
lower bound upper bound and median we

271
00:13:15,199 --> 00:13:22,878
also measure measure the overhead of our

272
00:13:17,980 --> 00:13:25,790
modifications V ran and bench and we

273
00:13:22,879 --> 00:13:27,460
found that there is a zero to two

274
00:13:25,790 --> 00:13:30,880
percent overhead

275
00:13:27,460 --> 00:13:32,920
and bench benchmark we also measured the

276
00:13:30,880 --> 00:13:35,560
system call overhead in our

277
00:13:32,920 --> 00:13:39,660
implementation using LM bench and there

278
00:13:35,560 --> 00:13:42,640
is between zero to ten percent overhead

279
00:13:39,660 --> 00:13:46,300
we also measure the effectiveness of

280
00:13:42,640 --> 00:13:48,850
each of our optimizations separately so

281
00:13:46,300 --> 00:13:52,870
what you see here is each line presents

282
00:13:48,850 --> 00:13:56,110
our measurement for one IOT device a and

283
00:13:52,870 --> 00:13:59,110
B are basically our baseline without and

284
00:13:56,110 --> 00:14:00,790
with slightly the snapshot mechanism we

285
00:13:59,110 --> 00:14:02,589
actually don't consider lightly a

286
00:14:00,790 --> 00:14:05,199
snapshot as one of our contributions

287
00:14:02,589 --> 00:14:07,660
although it's considerable our main

288
00:14:05,200 --> 00:14:11,380
contribution is from BTC Augmented

289
00:14:07,660 --> 00:14:14,140
process emulation and also in a system

290
00:14:11,380 --> 00:14:16,600
called redirection selective system

291
00:14:14,140 --> 00:14:18,819
called redirection we have also a

292
00:14:16,600 --> 00:14:20,320
breakdown of the execution time for each

293
00:14:18,820 --> 00:14:23,770
measurement if you're interested please

294
00:14:20,320 --> 00:14:26,649
refer to the paper in total we actually

295
00:14:23,770 --> 00:14:31,689
achieve as I said 8.2 times higher

296
00:14:26,649 --> 00:14:34,630
throughput we also found to zero-day

297
00:14:31,690 --> 00:14:38,400
vulnerabilities both vulnerabilities can

298
00:14:34,630 --> 00:14:41,110
be exploited remotely with a get request

299
00:14:38,400 --> 00:14:42,640
there are memory overflow

300
00:14:41,110 --> 00:14:44,650
vulnerabilities and it's actually

301
00:14:42,640 --> 00:14:47,380
interesting how fast we could find these

302
00:14:44,650 --> 00:14:50,230
vulnerabilities what we did was letting

303
00:14:47,380 --> 00:14:52,390
fuzzer run to find the one day

304
00:14:50,230 --> 00:14:55,870
vulnerabilities and give it in give it

305
00:14:52,390 --> 00:14:58,600
it giving it one extra hour after it

306
00:14:55,870 --> 00:15:00,459
found the one day vulnerability and it

307
00:14:58,600 --> 00:15:02,470
could find these vulnerabilities it's

308
00:15:00,459 --> 00:15:03,849
interesting because with full system

309
00:15:02,470 --> 00:15:08,440
emulation we couldn't find any

310
00:15:03,850 --> 00:15:10,600
vulnerabilities even in 24 hours our our

311
00:15:08,440 --> 00:15:12,760
tool is open source so please go ahead

312
00:15:10,600 --> 00:15:17,290
download it use it for your fuzzing

313
00:15:12,760 --> 00:15:21,400
purposes if you want use it for search

314
00:15:17,290 --> 00:15:24,370
purposes and in conclusion what I told

315
00:15:21,400 --> 00:15:26,589
you about is that AFL fails on IOT

316
00:15:24,370 --> 00:15:30,089
firmware because of the user mode

317
00:15:26,589 --> 00:15:33,370
emulation full system emulation is slow

318
00:15:30,089 --> 00:15:35,980
we introduced firm AFL which is actually

319
00:15:33,370 --> 00:15:38,620
AFL combined with augmented process

320
00:15:35,980 --> 00:15:40,660
emulation an Augmented process emulation

321
00:15:38,620 --> 00:15:43,060
is basically combining user

322
00:15:40,660 --> 00:15:45,759
system mode emulation letting the

323
00:15:43,060 --> 00:15:49,420
emulation run in user mode unless there

324
00:15:45,759 --> 00:15:51,850
is a hardware dependency I showed that

325
00:15:49,420 --> 00:15:54,040
firmly FL is fast and transparent and

326
00:15:51,850 --> 00:16:01,689
firmly FL found to zero-day

327
00:15:54,040 --> 00:16:06,569
vulnerabilities thank you very much we

328
00:16:01,689 --> 00:16:06,569
have time for a few questions for Ellie

329
00:16:07,379 --> 00:16:13,269
let me start off by just asking a good

330
00:16:10,360 --> 00:16:15,060
question so I'm trying to get a sense

331
00:16:13,269 --> 00:16:17,560
here you know some of your graphs had

332
00:16:15,060 --> 00:16:20,768
something like thousands of crashes

333
00:16:17,560 --> 00:16:25,899
right and you found two vulnerabilities

334
00:16:20,769 --> 00:16:28,569
so what's the work that effort that is

335
00:16:25,899 --> 00:16:31,060
involved in trying to go from you know

336
00:16:28,569 --> 00:16:33,099
how much work did you spend analyzing

337
00:16:31,060 --> 00:16:36,579
these crashes to get down to these CDs

338
00:16:33,100 --> 00:16:39,279
is it days weeks months interesting

339
00:16:36,579 --> 00:16:42,040
question so most of the crashes that we

340
00:16:39,279 --> 00:16:45,430
get we actually try to filter them out

341
00:16:42,040 --> 00:16:49,870
right so we see what signal was actually

342
00:16:45,430 --> 00:16:52,660
given for that crash if for instance we

343
00:16:49,870 --> 00:16:54,339
find that the crash is interesting

344
00:16:52,660 --> 00:16:56,050
there's a signal there's a segmentation

345
00:16:54,339 --> 00:16:58,449
fault then we are we are actually

346
00:16:56,050 --> 00:17:01,630
interested in looking further into it

347
00:16:58,449 --> 00:17:04,329
and in such cases we try to see whether

348
00:17:01,630 --> 00:17:06,429
the vulnerability was reported before

349
00:17:04,329 --> 00:17:07,869
and for that we need to have a POC for

350
00:17:06,429 --> 00:17:11,530
the vulnerability and check the

351
00:17:07,869 --> 00:17:15,369
execution trace if not probably we found

352
00:17:11,530 --> 00:17:18,309
a new vulnerability so I can give you

353
00:17:15,369 --> 00:17:21,010
something like one week after we have

354
00:17:18,309 --> 00:17:22,750
the result in one week we can get a

355
00:17:21,010 --> 00:17:25,329
sense of whether we found something new

356
00:17:22,750 --> 00:17:30,700
or not or what was what we actually

357
00:17:25,329 --> 00:17:33,879
found thanks defin from UC irvine very

358
00:17:30,700 --> 00:17:37,900
interesting work so I'm wondering if my

359
00:17:33,880 --> 00:17:40,210
understand cracked you wrong ear on the

360
00:17:37,900 --> 00:17:42,850
flooding on top of an emulated device so

361
00:17:40,210 --> 00:17:45,429
if there is there any case that the real

362
00:17:42,850 --> 00:17:47,799
device must be used for example the

363
00:17:45,429 --> 00:17:51,640
device has some power has some internal

364
00:17:47,799 --> 00:17:54,668
states that's actually an interesting

365
00:17:51,640 --> 00:17:56,830
question so what we do with

366
00:17:54,669 --> 00:17:59,499
emulation we try to say okay this

367
00:17:56,830 --> 00:18:01,629
hardware would run like this so we

368
00:17:59,499 --> 00:18:03,879
expect the emulation to be correct if

369
00:18:01,629 --> 00:18:05,769
the emulation is not correct then that's

370
00:18:03,879 --> 00:18:09,279
another issue of course we can say that

371
00:18:05,769 --> 00:18:11,320
the result is not trustworthy I can see

372
00:18:09,279 --> 00:18:13,960
some cases that running on hardware

373
00:18:11,320 --> 00:18:16,450
would give us better results but I'd say

374
00:18:13,960 --> 00:18:19,899
that if the emulation is correct in most

375
00:18:16,450 --> 00:18:22,769
cases we should be reliable enough yeah

376
00:18:19,899 --> 00:18:25,719
for example IO device like a camera

377
00:18:22,769 --> 00:18:28,779
right so for camera as well right so you

378
00:18:25,720 --> 00:18:30,820
can yes as I said you cannot guarantee

379
00:18:28,779 --> 00:18:33,220
that the results are the same but if you

380
00:18:30,820 --> 00:18:35,889
correctly emulate the behavior of the

381
00:18:33,220 --> 00:18:38,200
camera like the effects on memory if

382
00:18:35,889 --> 00:18:42,879
there's a vulnerability you can find it

383
00:18:38,200 --> 00:18:45,369
yeah thanks hey this is Tim from MIT

384
00:18:42,879 --> 00:18:47,109
when you say firmware and for more

385
00:18:45,369 --> 00:18:49,209
images does that include the original

386
00:18:47,109 --> 00:18:50,769
kernel that runs on the device or just

387
00:18:49,210 --> 00:18:55,179
user space binaries from the file system

388
00:18:50,769 --> 00:18:57,770
no the kernel as well thank you all

389
00:18:55,179 --> 00:19:02,510
right let's thank Ali again

390
00:18:57,770 --> 00:19:02,510
[Applause]

