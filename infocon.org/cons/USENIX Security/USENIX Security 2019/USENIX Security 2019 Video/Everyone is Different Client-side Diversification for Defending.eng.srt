1
00:00:10,030 --> 00:00:15,280
thank you for the introduction dev I'm a

2
00:00:12,970 --> 00:00:18,330
PhD student at Arizona State University

3
00:00:15,280 --> 00:00:20,430
and I'm here to present my work on

4
00:00:18,330 --> 00:00:22,930
everyone is different client-side

5
00:00:20,430 --> 00:00:26,200
diversification for defending against

6
00:00:22,930 --> 00:00:29,849
extinction fingerprinting in short its

7
00:00:26,200 --> 00:00:32,439
cloaking browser extensions this was a

8
00:00:29,849 --> 00:00:35,200
cross institutional effort between

9
00:00:32,439 --> 00:00:37,510
Arizona State University Stony Brook

10
00:00:35,200 --> 00:00:38,550
University and North Carolina State

11
00:00:37,510 --> 00:00:41,559
University

12
00:00:38,550 --> 00:00:44,760
so browser extensions they are

13
00:00:41,560 --> 00:00:47,320
third-party programs used to customize

14
00:00:44,760 --> 00:00:49,360
the web browser I'll bet most of you in

15
00:00:47,320 --> 00:00:50,590
here probably have at least one of these

16
00:00:49,360 --> 00:00:52,780
up there installed

17
00:00:50,590 --> 00:00:55,210
considering that across just these

18
00:00:52,780 --> 00:00:59,140
listed here there's over 55 million

19
00:00:55,210 --> 00:01:03,490
users that are currently using one of

20
00:00:59,140 --> 00:01:05,400
these now this customization that you

21
00:01:03,490 --> 00:01:07,750
have to web browsers comes at a cost

22
00:01:05,400 --> 00:01:09,939
extensions grant are granted more

23
00:01:07,750 --> 00:01:14,650
privileges than just a standard web page

24
00:01:09,939 --> 00:01:17,979
and with identification or detection of

25
00:01:14,650 --> 00:01:19,810
specific extensions you have this cookie

26
00:01:17,980 --> 00:01:21,130
list identification across browsing

27
00:01:19,810 --> 00:01:26,680
sessions that's possible

28
00:01:21,130 --> 00:01:30,899
now inferences based on a specific

29
00:01:26,680 --> 00:01:33,580
extension when it's detected can create

30
00:01:30,900 --> 00:01:37,270
you could have additional inferences

31
00:01:33,580 --> 00:01:39,039
made based off a specific extension like

32
00:01:37,270 --> 00:01:42,369
honey for example which is a coupon

33
00:01:39,040 --> 00:01:44,020
clipping extension customers that come

34
00:01:42,370 --> 00:01:48,299
to your website with that installed

35
00:01:44,020 --> 00:01:50,710
might be more price conscious similarly

36
00:01:48,299 --> 00:01:52,360
LinkedIn recently was found to be

37
00:01:50,710 --> 00:01:54,039
detecting over a hundred different

38
00:01:52,360 --> 00:01:56,680
extensions of the people that come

39
00:01:54,040 --> 00:02:00,909
they're mostly focusing on those that

40
00:01:56,680 --> 00:02:03,700
violate the Terms of Use No how do we

41
00:02:00,909 --> 00:02:05,080
prevent this well we could it could be

42
00:02:03,700 --> 00:02:06,970
prevented through the web browsers

43
00:02:05,080 --> 00:02:09,848
they're definitely taking steps to do

44
00:02:06,970 --> 00:02:12,250
this sort of stuff and it could also be

45
00:02:09,848 --> 00:02:14,500
the extension developers could help by

46
00:02:12,250 --> 00:02:17,769
reducing how they how much they changed

47
00:02:14,500 --> 00:02:19,950
the Dom or how much they use web

48
00:02:17,769 --> 00:02:22,630
accessible resources for detection

49
00:02:19,950 --> 00:02:23,649
however we decided we didn't want to

50
00:02:22,630 --> 00:02:25,659
wait for that we wanted

51
00:02:23,650 --> 00:02:28,360
something now and so we created cloak X

52
00:02:25,659 --> 00:02:31,030
which is an extension cloaking tool that

53
00:02:28,360 --> 00:02:34,420
uses dynamic sorry static and dynamic

54
00:02:31,030 --> 00:02:37,480
analysis to perform client-side

55
00:02:34,420 --> 00:02:38,890
modifications without having to modify

56
00:02:37,480 --> 00:02:41,439
the browser and without requiring

57
00:02:38,890 --> 00:02:45,730
extension developers to modify their

58
00:02:41,439 --> 00:02:47,739
code now for extension fingerprinting

59
00:02:45,730 --> 00:02:49,209
the fingerprinting is not actually

60
00:02:47,739 --> 00:02:51,750
something intentionally offered by

61
00:02:49,209 --> 00:02:54,370
browsers it's supported through

62
00:02:51,750 --> 00:02:57,359
side-channel attacks for example at Kota

63
00:02:54,370 --> 00:02:59,920
spy in 2017 there was a paper where they

64
00:02:57,359 --> 00:03:02,409
presented the use of web accessible

65
00:02:59,920 --> 00:03:05,048
resources to fingerprint various

66
00:03:02,409 --> 00:03:08,530
extensions and a little bit later in the

67
00:03:05,049 --> 00:03:11,319
same year EXO and was released and for

68
00:03:08,530 --> 00:03:13,090
Dom fingerprinting which is tracking the

69
00:03:11,319 --> 00:03:16,060
changes between the Dom when the

70
00:03:13,090 --> 00:03:19,030
extension is installed so for war

71
00:03:16,060 --> 00:03:22,349
fingerprinting web accessible resources

72
00:03:19,030 --> 00:03:24,549
are uniquely identifiable resources that

73
00:03:22,349 --> 00:03:26,679
extension developers deliberately

74
00:03:24,549 --> 00:03:28,690
exposed to web pages

75
00:03:26,680 --> 00:03:32,049
we're fingerprints or web accessible

76
00:03:28,690 --> 00:03:34,090
resource fingerprints in our research we

77
00:03:32,049 --> 00:03:36,099
found sixteen thousand four hundred and

78
00:03:34,090 --> 00:03:40,299
seventy nine of the fifty nine thousand

79
00:03:36,099 --> 00:03:42,010
extensions that we downloaded were

80
00:03:40,299 --> 00:03:45,190
detectable using web accessible

81
00:03:42,010 --> 00:03:47,290
resources and fifty percent of the top

82
00:03:45,190 --> 00:03:50,220
1,000 extensions were detectable using

83
00:03:47,290 --> 00:03:54,280
the same method for Dom fingerprinting

84
00:03:50,220 --> 00:03:57,010
we used X hound and it exercised the

85
00:03:54,280 --> 00:03:59,979
extensions and tracked Dom modifications

86
00:03:57,010 --> 00:04:01,959
both with and without the extension and

87
00:03:59,979 --> 00:04:03,519
was able to create a fingerprint from

88
00:04:01,959 --> 00:04:05,349
that and we were able to create

89
00:04:03,519 --> 00:04:09,340
fingerprints for five thousand three

90
00:04:05,349 --> 00:04:11,560
hundred and twenty three extensions so

91
00:04:09,340 --> 00:04:13,239
it's this for detection it's this

92
00:04:11,560 --> 00:04:15,190
fingerprint that we create a link

93
00:04:13,239 --> 00:04:18,070
between the actual fingerprint that's

94
00:04:15,190 --> 00:04:21,488
created and the specific extension that

95
00:04:18,070 --> 00:04:22,900
allows us to detect users now we wanted

96
00:04:21,488 --> 00:04:24,429
to come up with a way or we came up with

97
00:04:22,900 --> 00:04:26,169
a way in the paper to kind of talk about

98
00:04:24,430 --> 00:04:28,570
this with some terminology and one of

99
00:04:26,169 --> 00:04:30,820
those is anchor prints anchor prints are

100
00:04:28,570 --> 00:04:34,659
created because there's a unique anchor

101
00:04:30,820 --> 00:04:36,760
that the extension uses to tie it to the

102
00:04:34,659 --> 00:04:37,240
web page so that it can access any

103
00:04:36,760 --> 00:04:40,900
element

104
00:04:37,240 --> 00:04:42,970
that it's dropped onto the page Wars IDs

105
00:04:40,900 --> 00:04:44,080
class names and custom attributes are

106
00:04:42,970 --> 00:04:48,340
all examples of this

107
00:04:44,080 --> 00:04:52,599
take for example saved a pocket in that

108
00:04:48,340 --> 00:04:54,310
extension there is an image tag or a SVG

109
00:04:52,599 --> 00:04:56,199
that's dropped onto the page with a

110
00:04:54,310 --> 00:04:58,389
specific class and with one line of

111
00:04:56,199 --> 00:05:00,250
JavaScript you can search and find this

112
00:04:58,389 --> 00:05:03,539
class and know that the saved a pocket

113
00:05:00,250 --> 00:05:06,669
app is installed on the user's machine

114
00:05:03,539 --> 00:05:08,580
similarly we have structure prints which

115
00:05:06,669 --> 00:05:11,710
use the structure of changes an

116
00:05:08,580 --> 00:05:13,780
extension makes to a web page for

117
00:05:11,710 --> 00:05:16,659
example with the Google Calendar

118
00:05:13,780 --> 00:05:18,969
extension it injects an anchor tag and

119
00:05:16,659 --> 00:05:21,430
an image tag each with specific

120
00:05:18,970 --> 00:05:24,280
attributes that no other extension adds

121
00:05:21,430 --> 00:05:26,680
so just by having these on the webpage

122
00:05:24,280 --> 00:05:29,190
the web page should be relatively

123
00:05:26,680 --> 00:05:34,240
certain that that extension is installed

124
00:05:29,190 --> 00:05:36,759
so the last one that we look at our

125
00:05:34,240 --> 00:05:39,069
behavior prints and these are targeted

126
00:05:36,759 --> 00:05:41,590
kind of a subset of structure prints

127
00:05:39,069 --> 00:05:43,889
where it targets the extensions actual

128
00:05:41,590 --> 00:05:46,690
behavior take for example the grammerly

129
00:05:43,889 --> 00:05:50,110
extension it injects a green image into

130
00:05:46,690 --> 00:05:51,940
a text area like you see below and the

131
00:05:50,110 --> 00:05:54,280
web page can just detect that this is

132
00:05:51,940 --> 00:05:56,080
injected into the page and this is

133
00:05:54,280 --> 00:05:57,789
normal standard behavior that we're

134
00:05:56,080 --> 00:06:01,150
expecting what we expect grammarly to

135
00:05:57,789 --> 00:06:02,740
actually do that it's detecting so

136
00:06:01,150 --> 00:06:04,179
before we can talk about how we go

137
00:06:02,740 --> 00:06:05,710
through the cloaking process need to

138
00:06:04,180 --> 00:06:09,400
kind of take a step back and talk about

139
00:06:05,710 --> 00:06:13,599
how these work how web extensions work

140
00:06:09,400 --> 00:06:16,030
in the web environment so looking at a

141
00:06:13,599 --> 00:06:18,190
web page its given its own JavaScript

142
00:06:16,030 --> 00:06:21,698
execution environment it's got its

143
00:06:18,190 --> 00:06:25,360
scripts document object model HTML and

144
00:06:21,699 --> 00:06:27,069
then we add in extensions and there are

145
00:06:25,360 --> 00:06:29,919
these additional environments for every

146
00:06:27,069 --> 00:06:32,020
extension that's installed and starting

147
00:06:29,919 --> 00:06:34,330
with web accessible resources that I've

148
00:06:32,020 --> 00:06:39,639
mentioned before those can be accessed

149
00:06:34,330 --> 00:06:42,719
by the web page and loaded loaded

150
00:06:39,639 --> 00:06:46,000
directly in that execution environment

151
00:06:42,719 --> 00:06:48,498
another thing that extensions have our

152
00:06:46,000 --> 00:06:50,449
background pages where they have

153
00:06:48,499 --> 00:06:52,759
scripts that are loaded into this

154
00:06:50,449 --> 00:06:54,979
separate execution environment where

155
00:06:52,759 --> 00:06:57,489
they can run with additional privileges

156
00:06:54,979 --> 00:07:01,818
they can access the local machine and

157
00:06:57,489 --> 00:07:04,008
access local files and other access with

158
00:07:01,819 --> 00:07:05,839
the operating system next we have

159
00:07:04,009 --> 00:07:08,599
content scripts content scripts stand

160
00:07:05,839 --> 00:07:11,059
somewhere between the two with a little

161
00:07:08,599 --> 00:07:12,979
bit of elevator privileges but mostly

162
00:07:11,059 --> 00:07:17,089
they're there to interact directly with

163
00:07:12,979 --> 00:07:19,878
the DOM and add load change things that

164
00:07:17,089 --> 00:07:22,399
are that are actually inside the web

165
00:07:19,879 --> 00:07:25,039
page the underlying web page so our goal

166
00:07:22,399 --> 00:07:26,719
with cloak X was despite there being

167
00:07:25,039 --> 00:07:28,818
this fingerprint force a Google

168
00:07:26,719 --> 00:07:31,279
Translate was to break the link between

169
00:07:28,819 --> 00:07:34,219
the two so that the cloaked extension

170
00:07:31,279 --> 00:07:37,550
couldn't be detected by an underlying

171
00:07:34,219 --> 00:07:40,569
web page and the way that we did this is

172
00:07:37,550 --> 00:07:43,550
we went through and we renamed and

173
00:07:40,569 --> 00:07:46,189
discovered the wars the IDs and class

174
00:07:43,550 --> 00:07:48,079
names with the idea of renaming these

175
00:07:46,189 --> 00:07:51,110
anchors so that we could anonymize the

176
00:07:48,079 --> 00:07:53,779
extension and and then we would go

177
00:07:51,110 --> 00:07:56,329
through and find all of the references

178
00:07:53,779 --> 00:07:58,449
to these wars IDs and class names and

179
00:07:56,329 --> 00:08:01,219
rename those within the extension itself

180
00:07:58,449 --> 00:08:03,919
on top of that we used random insertions

181
00:08:01,219 --> 00:08:05,929
to prevaricate and to confuse an

182
00:08:03,919 --> 00:08:08,839
underlying web page so that it would be

183
00:08:05,929 --> 00:08:12,469
harder to determine which one which

184
00:08:08,839 --> 00:08:14,599
extensions were stalled so the cloaking

185
00:08:12,469 --> 00:08:15,529
process in general works we run it first

186
00:08:14,599 --> 00:08:18,050
through X ound

187
00:08:15,529 --> 00:08:20,449
we get the the Dom objects and the IDs

188
00:08:18,050 --> 00:08:23,269
and the class names and then we run it

189
00:08:20,449 --> 00:08:26,360
through war randomization which is where

190
00:08:23,269 --> 00:08:30,169
we discover the Wars the web accessible

191
00:08:26,360 --> 00:08:32,389
resources we rename them and then find

192
00:08:30,169 --> 00:08:34,698
all the references and replace them

193
00:08:32,389 --> 00:08:37,370
that's all done statically now for

194
00:08:34,698 --> 00:08:41,269
droplets and style droplets is a term

195
00:08:37,370 --> 00:08:43,519
that we came up with this is the case

196
00:08:41,269 --> 00:08:46,899
when you have something that comes from

197
00:08:43,519 --> 00:08:49,519
the content scripts and it's data that

198
00:08:46,899 --> 00:08:51,620
comes from the extension but it's then

199
00:08:49,519 --> 00:08:54,139
loaded at execution time dynamically

200
00:08:51,620 --> 00:08:57,620
injected into the web pages dom via the

201
00:08:54,139 --> 00:08:59,569
web pages dom it's a dirty little

202
00:08:57,620 --> 00:09:00,740
insecure process or very unsecure

203
00:08:59,569 --> 00:09:02,510
process

204
00:09:00,740 --> 00:09:04,160
but it's also clear why the extension

205
00:09:02,510 --> 00:09:05,390
developers want something like this they

206
00:09:04,160 --> 00:09:08,089
want to be able to have code that's

207
00:09:05,390 --> 00:09:10,790
running natively in that JavaScript

208
00:09:08,090 --> 00:09:12,200
execution environment on the page and we

209
00:09:10,790 --> 00:09:14,089
need to make sure that we rewrite all

210
00:09:12,200 --> 00:09:15,890
these instances when this is used so

211
00:09:14,090 --> 00:09:19,070
that the extension still functions

212
00:09:15,890 --> 00:09:21,170
properly to do this we used pages which

213
00:09:19,070 --> 00:09:23,330
is a type analyzer for JavaScript and we

214
00:09:21,170 --> 00:09:26,630
added a little bit of taint analysis to

215
00:09:23,330 --> 00:09:28,040
it and that was to help us identify the

216
00:09:26,630 --> 00:09:30,710
ids and class names that were

217
00:09:28,040 --> 00:09:33,469
interacting with the Dom and then we

218
00:09:30,710 --> 00:09:35,750
were to rewrite these the last piece is

219
00:09:33,470 --> 00:09:39,110
we would add the dynamic proxy that we

220
00:09:35,750 --> 00:09:40,730
called Roxy and Roxie basically sits in

221
00:09:39,110 --> 00:09:44,750
the content scripts environment and

222
00:09:40,730 --> 00:09:46,910
intercepts any request to the Dom and if

223
00:09:44,750 --> 00:09:50,300
there are ID or class names it renames

224
00:09:46,910 --> 00:09:53,000
those in addition it injects any random

225
00:09:50,300 --> 00:09:54,859
I did inject random IDs and class names

226
00:09:53,000 --> 00:09:59,000
that do not interfere with the operation

227
00:09:54,860 --> 00:10:02,600
of the web page but also help obfuscate

228
00:09:59,000 --> 00:10:05,900
its fingerprint so here's an example of

229
00:10:02,600 --> 00:10:08,780
a cloaked extension this is the SEO bar

230
00:10:05,900 --> 00:10:11,630
and you can see the before above and the

231
00:10:08,780 --> 00:10:14,180
after it's cloaked below and it's got

232
00:10:11,630 --> 00:10:17,960
the different IDs and class names are

233
00:10:14,180 --> 00:10:20,930
all randomized to new values with

234
00:10:17,960 --> 00:10:25,970
differing lengths and different values

235
00:10:20,930 --> 00:10:27,680
so how do we evaluate this it's not the

236
00:10:25,970 --> 00:10:29,210
most straightforward thing first is to

237
00:10:27,680 --> 00:10:31,819
kind of think about what did we want to

238
00:10:29,210 --> 00:10:35,960
evaluate and we wanted to capture

239
00:10:31,820 --> 00:10:37,760
functional equivalence meaning the

240
00:10:35,960 --> 00:10:40,220
extension the original extension before

241
00:10:37,760 --> 00:10:42,189
is it operating in the same way as it is

242
00:10:40,220 --> 00:10:45,170
after the problem being that we have

243
00:10:42,190 --> 00:10:47,630
18,000 different extensions so we came

244
00:10:45,170 --> 00:10:49,760
up with kind of a two two-pronged

245
00:10:47,630 --> 00:10:51,830
approach with our functionality

246
00:10:49,760 --> 00:10:55,490
experiments and the first was a low

247
00:10:51,830 --> 00:10:57,860
fidelity an automated process that would

248
00:10:55,490 --> 00:11:00,440
go through all of the extensions that we

249
00:10:57,860 --> 00:11:02,510
modified and look at them before and

250
00:11:00,440 --> 00:11:04,690
after in an automated way and then

251
00:11:02,510 --> 00:11:06,530
evaluate whether there were any

252
00:11:04,690 --> 00:11:08,450
differences in the errors that were

253
00:11:06,530 --> 00:11:10,550
thrown by them for the high fidelity

254
00:11:08,450 --> 00:11:13,070
testing we randomly sampled a hundred

255
00:11:10,550 --> 00:11:14,410
and fifty extensions and went through

256
00:11:13,070 --> 00:11:16,389
manually exercised

257
00:11:14,410 --> 00:11:19,689
using them as vigorously as possible

258
00:11:16,389 --> 00:11:21,550
while also evaluating whether the user

259
00:11:19,690 --> 00:11:24,459
experience had changed from the first

260
00:11:21,550 --> 00:11:27,339
from the original to the modified

261
00:11:24,459 --> 00:11:29,800
extension or the cloaked extension for

262
00:11:27,339 --> 00:11:32,470
the second part that we tested were

263
00:11:29,800 --> 00:11:34,779
detectability experiments were were we

264
00:11:32,470 --> 00:11:37,029
able to detect these cloaked extensions

265
00:11:34,779 --> 00:11:40,720
with anchor prints structure prints or

266
00:11:37,029 --> 00:11:43,389
behavior prints so for the low fidelity

267
00:11:40,720 --> 00:11:45,009
testing we tested eighteen thousand nine

268
00:11:43,389 --> 00:11:48,370
hundred and thirty seven finger

269
00:11:45,009 --> 00:11:50,649
printable extensions and for war finger

270
00:11:48,370 --> 00:11:52,360
printable ninety nine point zero percent

271
00:11:50,649 --> 00:11:56,399
of them passed the functionality testing

272
00:11:52,360 --> 00:11:59,019
for Dom finger printable 98.7% past and

273
00:11:56,399 --> 00:12:02,019
forewarn Dom finger printable ninety

274
00:11:59,019 --> 00:12:04,329
seven point nine percent passed for the

275
00:12:02,019 --> 00:12:06,069
high fidelity testing as I said we

276
00:12:04,329 --> 00:12:09,550
tested a hundred and fifty different

277
00:12:06,069 --> 00:12:12,399
extensions for wor finger printable

278
00:12:09,550 --> 00:12:15,370
fifty of the fifty passed for Dom finger

279
00:12:12,399 --> 00:12:17,620
printable 48 of the 50 past and four

280
00:12:15,370 --> 00:12:21,970
warned on fingerprint of all 47 of the

281
00:12:17,620 --> 00:12:23,980
50 passed now we had some issues with

282
00:12:21,970 --> 00:12:26,470
these and one of the most common issue

283
00:12:23,980 --> 00:12:28,240
with the ones that failed the

284
00:12:26,470 --> 00:12:30,490
functionality test was actually remote

285
00:12:28,240 --> 00:12:33,639
code loading so these extensions will

286
00:12:30,490 --> 00:12:36,130
actually load code remotely from say

287
00:12:33,639 --> 00:12:37,870
their web server and bring it in and

288
00:12:36,130 --> 00:12:40,870
that piece of code is still trying to

289
00:12:37,870 --> 00:12:43,660
access the original IDs or the original

290
00:12:40,870 --> 00:12:46,500
Wars the some of the extensions had

291
00:12:43,660 --> 00:12:49,149
hard-coded values for example our Roxie

292
00:12:46,500 --> 00:12:51,069
execute promotes itself to be the first

293
00:12:49,149 --> 00:12:53,019
content script that executes so that it

294
00:12:51,069 --> 00:12:57,250
can intercept everything that's sent and

295
00:12:53,019 --> 00:13:00,430
in one of the cases the extension had

296
00:12:57,250 --> 00:13:04,329
hard-coded which which spot it was in

297
00:13:00,430 --> 00:13:06,279
there in the list of content scripts and

298
00:13:04,329 --> 00:13:07,359
then just some limitations with talk to

299
00:13:06,279 --> 00:13:09,670
you where we could add additional

300
00:13:07,360 --> 00:13:13,930
functionality to support recursive

301
00:13:09,670 --> 00:13:16,089
iframe sourcing for example so for

302
00:13:13,930 --> 00:13:17,979
detecting anchor prints for going

303
00:13:16,089 --> 00:13:20,079
through and detecting everything we did

304
00:13:17,980 --> 00:13:22,899
rein this on seventeen thousand six

305
00:13:20,079 --> 00:13:24,579
hundred and seventy-eight extensions and

306
00:13:22,899 --> 00:13:28,930
found that the cloaked extensions

307
00:13:24,579 --> 00:13:30,339
weren't detectable however 96 of the

308
00:13:28,930 --> 00:13:31,930
did not maintain equivalent

309
00:13:30,339 --> 00:13:35,050
functionality and so we counted these is

310
00:13:31,930 --> 00:13:38,888
actually being detected for structure

311
00:13:35,050 --> 00:13:42,550
prints 5311 of the extensions were

312
00:13:38,889 --> 00:13:45,310
tested with fuzzy matching and the first

313
00:13:42,550 --> 00:13:47,529
set used all the entire data set which

314
00:13:45,310 --> 00:13:50,199
was tags attributes and text for the Dom

315
00:13:47,529 --> 00:13:52,360
changes and we were able to detect 4.2

316
00:13:50,199 --> 00:13:55,990
percent of the cloaked extensions in

317
00:13:52,360 --> 00:13:58,480
this case four tags and attributes it

318
00:13:55,990 --> 00:14:01,839
went down it was the fuzzy matching was

319
00:13:58,480 --> 00:14:04,000
faster and but we weren't able to detect

320
00:14:01,839 --> 00:14:06,459
as many of the cloaked extensions at one

321
00:14:04,000 --> 00:14:08,670
point eight percent and then for tags

322
00:14:06,459 --> 00:14:12,609
one point seven percent were detected

323
00:14:08,670 --> 00:14:16,089
now for the the last test of behavior

324
00:14:12,610 --> 00:14:17,889
prints this went kind of beyond our

325
00:14:16,089 --> 00:14:20,889
threat model that we described but we

326
00:14:17,889 --> 00:14:23,019
wanted to see how how well in advanced

327
00:14:20,889 --> 00:14:24,550
and highly motivated adversary that was

328
00:14:23,019 --> 00:14:26,949
spending the time to look specifically

329
00:14:24,550 --> 00:14:30,099
at extensions and devised ways of

330
00:14:26,949 --> 00:14:35,380
identifying these extensions from a

331
00:14:30,100 --> 00:14:37,019
webpage could do and we ran these we

332
00:14:35,380 --> 00:14:39,699
selected ten of the most popular

333
00:14:37,019 --> 00:14:41,880
extensions and seven of them were

334
00:14:39,699 --> 00:14:45,219
detectable even though they were cloaked

335
00:14:41,880 --> 00:14:47,110
randomly we also selected ten extensions

336
00:14:45,220 --> 00:14:49,540
just from the confirm the entire

337
00:14:47,110 --> 00:14:51,070
population and found that five of those

338
00:14:49,540 --> 00:14:52,230
were detectable even though they were

339
00:14:51,070 --> 00:14:55,720
cloaked

340
00:14:52,230 --> 00:14:57,160
so in summary extension fingerprinting

341
00:14:55,720 --> 00:14:59,140
is a real problem

342
00:14:57,160 --> 00:15:02,260
all of us have extensions we'd all like

343
00:14:59,140 --> 00:15:05,220
to maintain some of our privacy we were

344
00:15:02,260 --> 00:15:07,630
able to successfully perform late-stage

345
00:15:05,220 --> 00:15:11,680
customizations on browser extensions and

346
00:15:07,630 --> 00:15:15,790
break the extension fingerprint link and

347
00:15:11,680 --> 00:15:18,359
then for cloaked extensions 99.9% were

348
00:15:15,790 --> 00:15:21,339
undetectable using anchor prints and

349
00:15:18,360 --> 00:15:24,230
98.3% were undetectable using structure

350
00:15:21,339 --> 00:15:29,009
prints thank you

351
00:15:24,230 --> 00:15:34,839
[Applause]

352
00:15:29,009 --> 00:15:36,339
right hi then Francis ba one question

353
00:15:34,839 --> 00:15:38,199
that came to mind so we have like these

354
00:15:36,339 --> 00:15:40,569
extensions that have a like inject

355
00:15:38,199 --> 00:15:42,699
elements that have a class right so with

356
00:15:40,569 --> 00:15:45,459
the class typically comes some CSS

357
00:15:42,699 --> 00:15:47,410
properties have you kind of looked into

358
00:15:45,459 --> 00:15:49,300
whether if you can if I can identify

359
00:15:47,410 --> 00:15:51,160
that there is some random object that I

360
00:15:49,300 --> 00:15:53,589
did not inject myself as the website

361
00:15:51,160 --> 00:15:55,750
operator into the page just look at the

362
00:15:53,589 --> 00:15:57,550
class create an element with the class

363
00:15:55,750 --> 00:15:59,920
and then read the CSS properties of that

364
00:15:57,550 --> 00:16:03,790
class - then maybe we identify an

365
00:15:59,920 --> 00:16:06,160
extension we also altered so we altered

366
00:16:03,790 --> 00:16:09,129
everything through the CSS as well if

367
00:16:06,160 --> 00:16:12,540
that's what you're if I'm understanding

368
00:16:09,129 --> 00:16:15,069
your comment or question correctly so we

369
00:16:12,540 --> 00:16:16,719
we tackled all that and to actually be

370
00:16:15,069 --> 00:16:18,790
sure that we are getting everything we

371
00:16:16,720 --> 00:16:19,990
would mock up you know like a little sub

372
00:16:18,790 --> 00:16:21,459
environment so that we could make sure

373
00:16:19,990 --> 00:16:27,879
that we selected through and we're

374
00:16:21,459 --> 00:16:30,128
gathering all the elements but yeah my I

375
00:16:27,879 --> 00:16:32,079
don't know am I getting I mean you see

376
00:16:30,129 --> 00:16:34,300
like for Emily you still need to have

377
00:16:32,079 --> 00:16:36,279
that green icon thingy right and that's

378
00:16:34,300 --> 00:16:37,660
style somehow I know that there is

379
00:16:36,279 --> 00:16:39,279
something in my page which I don't know

380
00:16:37,660 --> 00:16:41,019
what it is but I know that the style is

381
00:16:39,279 --> 00:16:43,779
very much similar to what is typically

382
00:16:41,019 --> 00:16:44,949
the Gremory icon could I use that

383
00:16:43,779 --> 00:16:49,089
information to infer that you have to

384
00:16:44,949 --> 00:16:51,040
grab money extension installs I mean you

385
00:16:49,089 --> 00:16:52,720
could use the information but were it

386
00:16:51,040 --> 00:16:54,130
would all look different if you were

387
00:16:52,720 --> 00:16:55,899
looking at it so if you you would have

388
00:16:54,130 --> 00:16:57,850
to have some kind of human aspect there

389
00:16:55,899 --> 00:17:01,750
to know that it was a you know a circle

390
00:16:57,850 --> 00:17:05,589
icon or that the base64 mess that they

391
00:17:01,750 --> 00:17:08,650
send is actually was actually that icon

392
00:17:05,589 --> 00:17:10,688
and then but they've all been renamed

393
00:17:08,650 --> 00:17:13,299
through through there so you'd have to

394
00:17:10,689 --> 00:17:14,679
find you know maybe some kind of

395
00:17:13,299 --> 00:17:21,879
attribute matching or something like

396
00:17:14,679 --> 00:17:25,289
that on the CSS hi Tom or Oracle so I

397
00:17:21,880 --> 00:17:28,150
have to ask is the cloak itself cloaked

398
00:17:25,289 --> 00:17:30,340
in the paper we talked about that we did

399
00:17:28,150 --> 00:17:32,500
some tests on the cloaking itself and

400
00:17:30,340 --> 00:17:35,620
weren't able really to devise a method

401
00:17:32,500 --> 00:17:37,779
that it was but even if it was with more

402
00:17:35,620 --> 00:17:39,939
people using it then

403
00:17:37,779 --> 00:17:41,440
you it's it's more anonymized because

404
00:17:39,940 --> 00:17:43,090
it's all looking the same the tour

405
00:17:41,440 --> 00:17:48,190
argument yes thank you very much

406
00:17:43,090 --> 00:17:50,590
yep I'm doing from IIT Madras so my

407
00:17:48,190 --> 00:17:53,859
cousin is a highly related to the first

408
00:17:50,590 --> 00:17:56,228
question if I create a hierarchy of

409
00:17:53,859 --> 00:17:58,928
classes for example if you for an

410
00:17:56,229 --> 00:18:01,179
element the number of classes is still

411
00:17:58,929 --> 00:18:02,679
detectable right so if I create in

412
00:18:01,179 --> 00:18:05,289
hierarchy where the number of class

413
00:18:02,679 --> 00:18:08,440
using number of classes but element and

414
00:18:05,289 --> 00:18:12,700
their hierarchy the hierarchy elements

415
00:18:08,440 --> 00:18:17,440
can I detect the extension using such a

416
00:18:12,700 --> 00:18:21,489
fingerprinting where I let's reframe the

417
00:18:17,440 --> 00:18:23,710
question so if I have a unique hierarchy

418
00:18:21,489 --> 00:18:25,089
of elements along with the number of

419
00:18:23,710 --> 00:18:27,099
classes because the number of classes

420
00:18:25,089 --> 00:18:29,168
remain the same even if you rename the

421
00:18:27,099 --> 00:18:33,339
class right right so can I use that as a

422
00:18:29,169 --> 00:18:35,440
detection method I mean it would be

423
00:18:33,339 --> 00:18:38,769
possible if you took the count but it'd

424
00:18:35,440 --> 00:18:41,080
be very fragile right so I mean it's

425
00:18:38,769 --> 00:18:45,639
real easy to add additional classes that

426
00:18:41,080 --> 00:18:47,320
say aren't used or there might be even

427
00:18:45,639 --> 00:18:48,939
when you load you know you have

428
00:18:47,320 --> 00:18:51,129
something that gets activated in a

429
00:18:48,940 --> 00:18:58,149
different way do you add any classes to

430
00:18:51,129 --> 00:19:01,240
change the structure I'd I don't

431
00:18:58,149 --> 00:19:03,729
remember okay thank you yep

432
00:19:01,240 --> 00:19:08,599
all right let's thank the speaker good

433
00:19:03,730 --> 00:19:08,599
[Applause]

