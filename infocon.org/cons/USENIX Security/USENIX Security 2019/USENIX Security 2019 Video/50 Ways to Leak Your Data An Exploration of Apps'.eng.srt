1
00:00:10,599 --> 00:00:18,340
all right thank you so apps need

2
00:00:15,459 --> 00:00:19,540
permissions to access resources right

3
00:00:18,340 --> 00:00:22,210
we're carrying around these smartphones

4
00:00:19,540 --> 00:00:24,279
they are filled with sensors lots of

5
00:00:22,210 --> 00:00:25,720
personal information and we want to make

6
00:00:24,279 --> 00:00:27,730
sure that any app that gets installed

7
00:00:25,720 --> 00:00:29,169
doesn't get full rain of the device so

8
00:00:27,730 --> 00:00:31,179
we have this permission system on

9
00:00:29,170 --> 00:00:33,100
Android or apps have to request a

10
00:00:31,179 --> 00:00:34,989
permission and if the user grants the

11
00:00:33,100 --> 00:00:37,300
permission or installed the app and by

12
00:00:34,989 --> 00:00:39,699
doing so grants the permission apps can

13
00:00:37,300 --> 00:00:41,559
access these resources now there's a lot

14
00:00:39,699 --> 00:00:43,570
of legitimate criticism of the Android

15
00:00:41,559 --> 00:00:45,699
permission system is not perfect there's

16
00:00:43,570 --> 00:00:47,469
a lot of problems with it and apps tend

17
00:00:45,700 --> 00:00:50,230
to overreach in the permissions they may

18
00:00:47,469 --> 00:00:52,329
not necessarily need but nevertheless it

19
00:00:50,230 --> 00:00:54,610
is the case that they serve an important

20
00:00:52,329 --> 00:00:56,260
purpose and at the very least we would

21
00:00:54,610 --> 00:00:59,440
want the permission system to be sound

22
00:00:56,260 --> 00:01:02,079
in that if an app is denied a permission

23
00:00:59,440 --> 00:01:04,360
it should not be able to access any of

24
00:01:02,079 --> 00:01:06,640
the resources that that permission

25
00:01:04,360 --> 00:01:07,899
protects right we want this soundness

26
00:01:06,640 --> 00:01:09,850
because if we don't have the soundness

27
00:01:07,899 --> 00:01:12,310
then we don't have a real permission

28
00:01:09,850 --> 00:01:14,679
system even with other issues that may

29
00:01:12,310 --> 00:01:18,130
exist with it however as we know in

30
00:01:14,680 --> 00:01:20,590
security a security mechanism can often

31
00:01:18,130 --> 00:01:21,759
be circumvented or avoid it here in the

32
00:01:20,590 --> 00:01:23,860
physical world we see a security

33
00:01:21,759 --> 00:01:25,600
mechanism and evidence of some

34
00:01:23,860 --> 00:01:28,210
circumvention that is occurring around

35
00:01:25,600 --> 00:01:30,460
it and the same thing can happen in our

36
00:01:28,210 --> 00:01:32,860
digital systems and to examples of such

37
00:01:30,460 --> 00:01:36,699
are known as covert channels and side

38
00:01:32,860 --> 00:01:38,590
channels so a covert channel involves

39
00:01:36,700 --> 00:01:40,630
two apps here we have Alice app and Bob

40
00:01:38,590 --> 00:01:43,360
app and there's a bunch of sensitive

41
00:01:40,630 --> 00:01:45,670
resources sensors actions and data and

42
00:01:43,360 --> 00:01:47,770
they're being protected by some security

43
00:01:45,670 --> 00:01:50,740
mechanism and the security mechanism

44
00:01:47,770 --> 00:01:54,189
allows Alice to access these sensitive

45
00:01:50,740 --> 00:01:56,110
resources but denies Bob access and a

46
00:01:54,189 --> 00:01:57,729
covert channel is a communication

47
00:01:56,110 --> 00:02:00,250
channel between the Alice app and the

48
00:01:57,729 --> 00:02:02,110
Bob app where in effect Alice uses her

49
00:02:00,250 --> 00:02:04,390
privilege with the security mechanism as

50
00:02:02,110 --> 00:02:06,430
a front for Bob allowing Bob to get

51
00:02:04,390 --> 00:02:08,410
access communicating via the covert

52
00:02:06,430 --> 00:02:11,230
channel that is not monitored by the

53
00:02:08,410 --> 00:02:13,209
security mechanism a side channel

54
00:02:11,230 --> 00:02:15,820
involves just one app here we have Eve

55
00:02:13,209 --> 00:02:17,709
app she has also denied access through

56
00:02:15,820 --> 00:02:19,630
the security mechanism but there exists

57
00:02:17,709 --> 00:02:21,970
some side channel to access the same

58
00:02:19,630 --> 00:02:23,440
information maybe another way of

59
00:02:21,970 --> 00:02:23,950
accessing the same information or

60
00:02:23,440 --> 00:02:25,720
information

61
00:02:23,950 --> 00:02:27,429
that's similar just as good just as

62
00:02:25,720 --> 00:02:30,010
useful the point is that this side

63
00:02:27,430 --> 00:02:32,260
channel is not monitored by the security

64
00:02:30,010 --> 00:02:34,149
mechanism and therefore whatever policy

65
00:02:32,260 --> 00:02:37,929
that should be enforced is not being

66
00:02:34,150 --> 00:02:40,360
enforced by it so in this work we

67
00:02:37,930 --> 00:02:42,220
searched for evidence of side and covert

68
00:02:40,360 --> 00:02:44,560
channels actually being used in practice

69
00:02:42,220 --> 00:02:46,630
and then figured out what those channels

70
00:02:44,560 --> 00:02:48,489
are so we look for evidence that was

71
00:02:46,630 --> 00:02:51,040
consistent with the use of side and

72
00:02:48,489 --> 00:02:52,959
covert channels and then figured out

73
00:02:51,040 --> 00:02:55,298
exactly what was happening so visually

74
00:02:52,959 --> 00:02:57,940
our method is the following we start

75
00:02:55,299 --> 00:03:01,239
with a large corpus of apps and we use

76
00:02:57,940 --> 00:03:03,370
static analysis to determine all of the

77
00:03:01,239 --> 00:03:05,319
data that these apps can access because

78
00:03:03,370 --> 00:03:07,329
in Android the permission model is such

79
00:03:05,319 --> 00:03:08,920
that you have to declare the permissions

80
00:03:07,329 --> 00:03:10,739
you want ahead of time if you're going

81
00:03:08,920 --> 00:03:13,238
to use location you need to claim

82
00:03:10,739 --> 00:03:15,910
effectively at compile time that you're

83
00:03:13,239 --> 00:03:17,349
going to use location and that means

84
00:03:15,910 --> 00:03:19,900
that we can look at an app and figure

85
00:03:17,349 --> 00:03:21,700
out exactly what information that app is

86
00:03:19,900 --> 00:03:24,250
allowed to access and we get a report of

87
00:03:21,700 --> 00:03:27,130
all of that information then we use a

88
00:03:24,250 --> 00:03:29,650
dynamic analysis framework to actually

89
00:03:27,130 --> 00:03:32,709
run all these apps run lots and lots and

90
00:03:29,650 --> 00:03:34,239
lots of apps in real time on real phones

91
00:03:32,709 --> 00:03:36,970
while we're monitoring the network

92
00:03:34,239 --> 00:03:38,799
traffic doing TLS interception looking

93
00:03:36,970 --> 00:03:41,109
at all of the data that's going anywhere

94
00:03:38,799 --> 00:03:43,299
out on the Internet and the result of

95
00:03:41,109 --> 00:03:45,340
that is we get a lot of reports about

96
00:03:43,299 --> 00:03:47,200
what data was actually sent out which

97
00:03:45,340 --> 00:03:49,810
apps sent out your location which app

98
00:03:47,200 --> 00:03:51,010
sent out your IMEI and we may have

99
00:03:49,810 --> 00:03:52,780
missed some things because there could

100
00:03:51,010 --> 00:03:55,209
be obfuscation and we certainly found

101
00:03:52,780 --> 00:03:57,250
plenty of obfuscation that we then added

102
00:03:55,209 --> 00:03:59,709
to our corpus to help find more

103
00:03:57,250 --> 00:04:01,660
transmissions of it such information but

104
00:03:59,709 --> 00:04:03,549
in general we have these now these two

105
00:04:01,660 --> 00:04:04,900
pieces of data the data that was sent

106
00:04:03,549 --> 00:04:07,660
and the data that was allowed to be

107
00:04:04,900 --> 00:04:10,000
accessed we do a set - and we find a

108
00:04:07,660 --> 00:04:11,799
bunch of transmissions of data for which

109
00:04:10,000 --> 00:04:13,780
the app did not have the permission to

110
00:04:11,799 --> 00:04:15,519
actually access it in the first place we

111
00:04:13,780 --> 00:04:17,738
see an app sending the IMEI out

112
00:04:15,519 --> 00:04:19,418
somewhere on the internet but it didn't

113
00:04:17,738 --> 00:04:21,849
have the read phone state permission how

114
00:04:19,418 --> 00:04:24,250
did that happen so that's the next part

115
00:04:21,849 --> 00:04:25,960
which was a tedious reverse engineering

116
00:04:24,250 --> 00:04:28,120
of all of these apps to figure out

117
00:04:25,960 --> 00:04:30,250
exactly how these transmissions occurred

118
00:04:28,120 --> 00:04:32,560
and the result of this was a bunch of

119
00:04:30,250 --> 00:04:35,979
reports of side and covert channels that

120
00:04:32,560 --> 00:04:37,780
is the work that we present right now so

121
00:04:35,979 --> 00:04:39,370
in summary we are looking for

122
00:04:37,780 --> 00:04:41,679
evidence consistent with the use of

123
00:04:39,370 --> 00:04:43,900
citing covert channels by running all

124
00:04:41,680 --> 00:04:46,060
these apps dynamically we get actual

125
00:04:43,900 --> 00:04:48,909
evidence of these occurring in practice

126
00:04:46,060 --> 00:04:50,530
while we did our experiments this is

127
00:04:48,910 --> 00:04:52,750
what our experimental test bed look like

128
00:04:50,530 --> 00:04:54,489
we've been doing this since 2017 now

129
00:04:52,750 --> 00:04:56,830
we're a little nicer we have a little

130
00:04:54,490 --> 00:04:58,480
cooling station powered USB hubs but in

131
00:04:56,830 --> 00:05:00,760
effect we're just running these apps on

132
00:04:58,480 --> 00:05:03,280
phones looking at all of the network

133
00:05:00,760 --> 00:05:06,310
traffic and seeing what's going on the

134
00:05:03,280 --> 00:05:08,020
headline finding is that SDKs are to

135
00:05:06,310 --> 00:05:09,160
blame these software development kits

136
00:05:08,020 --> 00:05:11,349
that get included these third-party

137
00:05:09,160 --> 00:05:13,930
libraries that get included in apps to

138
00:05:11,350 --> 00:05:15,640
do things like add adds an analytics

139
00:05:13,930 --> 00:05:17,110
they could do game engine things they

140
00:05:15,640 --> 00:05:18,940
could just be useful libraries to

141
00:05:17,110 --> 00:05:21,910
interact better with some other

142
00:05:18,940 --> 00:05:23,740
interfaces these are the things that we

143
00:05:21,910 --> 00:05:25,630
found most responsible for sending out

144
00:05:23,740 --> 00:05:28,450
personal information and the interesting

145
00:05:25,630 --> 00:05:30,580
thing about SDKs is that they inherit

146
00:05:28,450 --> 00:05:33,010
their permissions from the app so the

147
00:05:30,580 --> 00:05:34,570
same code the same SDK can find itself

148
00:05:33,010 --> 00:05:36,789
in two different apps with different

149
00:05:34,570 --> 00:05:39,010
sets of permissions and it does not have

150
00:05:36,790 --> 00:05:41,260
any control over what permissions it

151
00:05:39,010 --> 00:05:43,510
ultimately gets it's up to the app to

152
00:05:41,260 --> 00:05:46,150
select the permissions the SDK simply

153
00:05:43,510 --> 00:05:47,830
inherits them so in an app when may have

154
00:05:46,150 --> 00:05:50,500
location it may behave differently as a

155
00:05:47,830 --> 00:05:52,930
result of that it also helped with our

156
00:05:50,500 --> 00:05:55,870
reverse engineering because now we only

157
00:05:52,930 --> 00:05:57,340
needed to reverse one example of an app

158
00:05:55,870 --> 00:05:58,470
that was sending some particular

159
00:05:57,340 --> 00:06:00,190
information to some particular

160
00:05:58,470 --> 00:06:02,050
destination on the Internet

161
00:06:00,190 --> 00:06:03,969
because that destination on the Internet

162
00:06:02,050 --> 00:06:05,979
correspond to an SDK that we could

163
00:06:03,970 --> 00:06:07,780
reverse engineer find out how they were

164
00:06:05,979 --> 00:06:09,580
doing it and then fingerprint the

165
00:06:07,780 --> 00:06:12,429
malicious code searching for it in other

166
00:06:09,580 --> 00:06:15,130
SDKs and be able to in a sense measure

167
00:06:12,430 --> 00:06:17,229
this prevalence at large so to show you

168
00:06:15,130 --> 00:06:19,390
this visually we have a whole bunch of

169
00:06:17,229 --> 00:06:21,520
apps we have some third party on the

170
00:06:19,390 --> 00:06:23,800
internet and we through our dynamic

171
00:06:21,520 --> 00:06:25,750
analysis find some of them sending the

172
00:06:23,800 --> 00:06:27,520
IMEI to this third party on the Internet

173
00:06:25,750 --> 00:06:29,500
and there may be a third one as well

174
00:06:27,520 --> 00:06:31,330
it's sending the IMEI as well but it has

175
00:06:29,500 --> 00:06:34,030
the read phone state so we don't flag it

176
00:06:31,330 --> 00:06:35,830
as suspicious we reverse engineer one of

177
00:06:34,030 --> 00:06:37,179
the apps we find this malicious code

178
00:06:35,830 --> 00:06:39,219
that's actually responsible for this

179
00:06:37,180 --> 00:06:41,260
transmission fingerprint this malicious

180
00:06:39,220 --> 00:06:44,020
code we can now find it in these other

181
00:06:41,260 --> 00:06:45,789
apps as well and then we can even search

182
00:06:44,020 --> 00:06:47,380
through all of the apps in our corpus

183
00:06:45,789 --> 00:06:49,390
and maybe we find the same malicious

184
00:06:47,380 --> 00:06:51,639
code it just wasn't expressed it didn't

185
00:06:49,390 --> 00:06:53,318
happen to occur maybe it never will

186
00:06:51,639 --> 00:06:55,389
issues with static analysis and that's

187
00:06:53,319 --> 00:06:57,759
why we prefer doing dynamic analysis so

188
00:06:55,389 --> 00:07:00,550
we get real evidence that these occurred

189
00:06:57,759 --> 00:07:02,919
in practice and to just show that again

190
00:07:00,550 --> 00:07:05,830
we have a dynamic bound we can with this

191
00:07:02,919 --> 00:07:07,779
say at least eight apps do this we saw

192
00:07:05,830 --> 00:07:10,090
this when we did our experiments with a

193
00:07:07,779 --> 00:07:11,919
static bound we could say well at least

194
00:07:10,090 --> 00:07:13,810
why apps have the code they could do

195
00:07:11,919 --> 00:07:15,639
this there could be more but we have no

196
00:07:13,810 --> 00:07:18,310
evidence they actually will ever run

197
00:07:15,639 --> 00:07:20,139
this code and so that's why the dynamic

198
00:07:18,310 --> 00:07:23,199
bounds will be much smaller but it

199
00:07:20,139 --> 00:07:24,699
corresponds to actual evidence so two

200
00:07:23,199 --> 00:07:26,889
highlights I want to present from this

201
00:07:24,699 --> 00:07:29,830
work the first one is that the Chinese

202
00:07:26,889 --> 00:07:32,469
company Baidu uses external storage as a

203
00:07:29,830 --> 00:07:33,669
covert channel and so if you if you

204
00:07:32,469 --> 00:07:35,680
think about the covert channel these are

205
00:07:33,669 --> 00:07:38,948
two apps communicating with each other

206
00:07:35,680 --> 00:07:41,020
and they just use the SD card which is

207
00:07:38,949 --> 00:07:43,060
probably the simplest covert channel you

208
00:07:41,020 --> 00:07:45,580
can think of there's shared storage on

209
00:07:43,060 --> 00:07:47,439
the device you can any app can read from

210
00:07:45,580 --> 00:07:49,990
it or write to it if they have the read

211
00:07:47,439 --> 00:07:53,110
and write external storage permission so

212
00:07:49,990 --> 00:07:55,180
what does Baidu do and the slash SD card

213
00:07:53,110 --> 00:07:58,930
slash backup slash dot system config

214
00:07:55,180 --> 00:08:01,599
slash cui D they store a base64 encoded

215
00:07:58,930 --> 00:08:03,069
object when you unbasic see for it it

216
00:08:01,599 --> 00:08:04,688
doesn't make any sense it's all binary

217
00:08:03,069 --> 00:08:06,669
and so that's what the reverse

218
00:08:04,689 --> 00:08:08,319
engineering comes in and we find

219
00:08:06,669 --> 00:08:10,508
somewhere in the code there is a call to

220
00:08:08,319 --> 00:08:12,729
AES and there's a fixed key and a fixed

221
00:08:10,509 --> 00:08:14,529
IV they're both the same value it

222
00:08:12,729 --> 00:08:15,849
doesn't look like it looks like an

223
00:08:14,529 --> 00:08:17,919
encryption key but when you reverse it

224
00:08:15,849 --> 00:08:19,409
it says Baidu CID so it looks like

225
00:08:17,919 --> 00:08:22,029
they've been doing this since about 2012

226
00:08:19,409 --> 00:08:24,580
they then use this to encrypt this

227
00:08:22,029 --> 00:08:26,080
object on the SD card so once they get

228
00:08:24,580 --> 00:08:27,878
the bytes of it that's the key that they

229
00:08:26,080 --> 00:08:29,529
used when we were decrypting it then we

230
00:08:27,879 --> 00:08:32,050
could actually see it's a JSON object

231
00:08:29,529 --> 00:08:34,689
storing the hash of our android ID and

232
00:08:32,049 --> 00:08:36,309
as well the IMEI of the phone and the

233
00:08:34,690 --> 00:08:38,620
way this side channel or the covert

234
00:08:36,309 --> 00:08:40,390
channel works is that if one app doesn't

235
00:08:38,620 --> 00:08:43,149
have the read phone state permission it

236
00:08:40,390 --> 00:08:44,829
can read this file get the IME RA and

237
00:08:43,149 --> 00:08:47,050
send it off to Baidu

238
00:08:44,829 --> 00:08:48,519
whereas if another app has the read

239
00:08:47,050 --> 00:08:50,649
phone state permission it can get the

240
00:08:48,519 --> 00:08:52,240
IMEI and write it for other apps to use

241
00:08:50,649 --> 00:08:55,120
and that's exactly what we saw when we

242
00:08:52,240 --> 00:08:57,670
did our experiments when we looked at

243
00:08:55,120 --> 00:08:59,019
the prevalence in our in our data set we

244
00:08:57,670 --> 00:09:01,329
found one hundred and fifty three apps

245
00:08:59,019 --> 00:09:02,529
had the encryption key so they had this

246
00:09:01,329 --> 00:09:05,500
fixed string that we could search for

247
00:09:02,529 --> 00:09:07,930
and of them 73 cent

248
00:09:05,500 --> 00:09:10,000
imei but of course many of these may

249
00:09:07,930 --> 00:09:11,439
have had legitimate access to the IMEI

250
00:09:10,000 --> 00:09:12,220
because they requested the read phone

251
00:09:11,440 --> 00:09:15,940
state permission

252
00:09:12,220 --> 00:09:18,760
so in a sense of these 153 we found only

253
00:09:15,940 --> 00:09:22,720
20 that didn't have the IMEI permission

254
00:09:18,760 --> 00:09:25,720
of those 8 actually sent the IMEI out so

255
00:09:22,720 --> 00:09:27,910
they actually use this code so our side

256
00:09:25,720 --> 00:09:30,820
channel between other apps to get the

257
00:09:27,910 --> 00:09:33,400
IMEI and send it away and one of those

258
00:09:30,820 --> 00:09:36,370
is made by Disney it's the Disney

259
00:09:33,400 --> 00:09:37,930
Hongkong Disney World app and the point

260
00:09:36,370 --> 00:09:39,640
I want to make here is that Disney is a

261
00:09:37,930 --> 00:09:42,939
big company and this kind of behavior

262
00:09:39,640 --> 00:09:44,920
does not good behavior this is a to me

263
00:09:42,940 --> 00:09:46,270
it seems a bit deceptive practice

264
00:09:44,920 --> 00:09:48,040
because they're claiming they don't have

265
00:09:46,270 --> 00:09:49,810
the read phone state permission and yet

266
00:09:48,040 --> 00:09:52,000
they're accessing and sending the IMEI

267
00:09:49,810 --> 00:09:54,489
and if Disney is making apps that do

268
00:09:52,000 --> 00:09:57,910
this this is a problem with SDK with

269
00:09:54,490 --> 00:09:59,680
trust in SDKs in general and while it's

270
00:09:57,910 --> 00:10:02,980
not that many apps they correspond to

271
00:09:59,680 --> 00:10:04,839
700 million installations so that's a

272
00:10:02,980 --> 00:10:06,160
lot of installations even if it's a

273
00:10:04,840 --> 00:10:07,780
small number of app because you have to

274
00:10:06,160 --> 00:10:10,930
look at the prevalence of the app not

275
00:10:07,780 --> 00:10:13,510
how many apps are in fact affected the

276
00:10:10,930 --> 00:10:15,729
second highlight the American company

277
00:10:13,510 --> 00:10:18,040
unity it produces a game engine ad

278
00:10:15,730 --> 00:10:20,500
engine analytics and stuff like that

279
00:10:18,040 --> 00:10:22,000
they use iocked dolls as a size channel

280
00:10:20,500 --> 00:10:24,100
if you don't know what an eye octal is

281
00:10:22,000 --> 00:10:24,640
it's just a low-level input/output

282
00:10:24,100 --> 00:10:27,520
control

283
00:10:24,640 --> 00:10:29,170
it's a allows a rich space of API

284
00:10:27,520 --> 00:10:31,600
functionality that's not typically used

285
00:10:29,170 --> 00:10:34,719
very often and as a result it wasn't

286
00:10:31,600 --> 00:10:37,090
properly protected on Android and in

287
00:10:34,720 --> 00:10:39,730
particular they use the Sarka dioctyl

288
00:10:37,090 --> 00:10:42,520
get interface hardware address which

289
00:10:39,730 --> 00:10:44,320
gets the MAC address of the device of

290
00:10:42,520 --> 00:10:46,180
the phone itself why are they interested

291
00:10:44,320 --> 00:10:48,400
in the MAC address it's a very

292
00:10:46,180 --> 00:10:50,939
persistent identifier just like the IMEI

293
00:10:48,400 --> 00:10:53,709
of the device unity sends the hash of

294
00:10:50,940 --> 00:10:56,290
the MAC address and they call it the

295
00:10:53,710 --> 00:10:58,750
UUID the universally unique identifier

296
00:10:56,290 --> 00:11:01,480
presumably in the JSON transmission that

297
00:10:58,750 --> 00:11:03,670
they send and you can't reset your MAC

298
00:11:01,480 --> 00:11:05,620
address it survives factory resets if

299
00:11:03,670 --> 00:11:07,120
survives flashing the phone the only way

300
00:11:05,620 --> 00:11:08,980
to do it is to root your phone and

301
00:11:07,120 --> 00:11:10,720
install Mac changing software and no one

302
00:11:08,980 --> 00:11:14,410
is doing that not at the consumer level

303
00:11:10,720 --> 00:11:16,570
so it allows tracking of users against

304
00:11:14,410 --> 00:11:18,469
all possible changes against opt-outs

305
00:11:16,570 --> 00:11:22,880
and all sorts of things like that

306
00:11:18,470 --> 00:11:26,420
so we saw 711 apps sending the MAC

307
00:11:22,880 --> 00:11:27,920
address to unity server and of those 42

308
00:11:26,420 --> 00:11:30,020
sent it without the corresponding

309
00:11:27,920 --> 00:11:32,990
permission which is access network state

310
00:11:30,020 --> 00:11:34,550
now this is from our paper we since

311
00:11:32,990 --> 00:11:36,710
realized that when we did all of our

312
00:11:34,550 --> 00:11:38,329
experiments on marshmallow on the

313
00:11:36,710 --> 00:11:41,120
marshmallow version of Android they do

314
00:11:38,330 --> 00:11:43,940
not allow any access to the Wi-Fi MAC

315
00:11:41,120 --> 00:11:45,860
address meaning that all 711 of these

316
00:11:43,940 --> 00:11:48,110
transmissions were done using the IEEE

317
00:11:45,860 --> 00:11:49,850
octal as a side channel that should not

318
00:11:48,110 --> 00:11:54,800
have been allowed under the Android

319
00:11:49,850 --> 00:11:56,420
permission model we found 12,000 that

320
00:11:54,800 --> 00:11:58,280
actually had this code or code

321
00:11:56,420 --> 00:11:59,479
corresponding to error strings that

322
00:11:58,280 --> 00:12:01,970
occurred if the ieee octal failed

323
00:11:59,480 --> 00:12:04,850
however most of them thankfully were not

324
00:12:01,970 --> 00:12:07,670
actually exploiting this i octal side

325
00:12:04,850 --> 00:12:10,880
channel only 711 we actually observed

326
00:12:07,670 --> 00:12:12,800
sending this in practice however this

327
00:12:10,880 --> 00:12:14,840
711 corresponds to 2 billion

328
00:12:12,800 --> 00:12:17,120
installations on the planet according to

329
00:12:14,840 --> 00:12:20,390
Google Play metadata so again quite a

330
00:12:17,120 --> 00:12:22,100
problem indeed other findings from our

331
00:12:20,390 --> 00:12:24,170
paper which I encourage you to read we

332
00:12:22,100 --> 00:12:26,570
found one app was sending all of your

333
00:12:24,170 --> 00:12:28,400
exif metadata and as a result included

334
00:12:26,570 --> 00:12:31,190
your geolocation this was the Shutterfly

335
00:12:28,400 --> 00:12:33,500
app and we just noticed these outgoing

336
00:12:31,190 --> 00:12:35,420
transmission of location and figured out

337
00:12:33,500 --> 00:12:36,650
how they were doing it another app was

338
00:12:35,420 --> 00:12:40,099
getting the router MAC address by

339
00:12:36,650 --> 00:12:41,840
connecting to 192.168.0.1 and just

340
00:12:40,100 --> 00:12:44,540
asking for plug-and-play information

341
00:12:41,840 --> 00:12:47,030
another one was reading the OSS ARP

342
00:12:44,540 --> 00:12:49,189
cache it just read the file /proc slash

343
00:12:47,030 --> 00:12:51,079
net slash ARP and in there could find

344
00:12:49,190 --> 00:12:54,830
the MAC address of the router which is a

345
00:12:51,080 --> 00:12:57,440
surrogate for location limitations of

346
00:12:54,830 --> 00:12:59,690
our study we focused on a subset of

347
00:12:57,440 --> 00:13:02,089
permissions so we didn't look at content

348
00:12:59,690 --> 00:13:03,770
providers camera microphone we've been

349
00:13:02,089 --> 00:13:05,390
running these experiments for years and

350
00:13:03,770 --> 00:13:06,949
these are things that we want to do next

351
00:13:05,390 --> 00:13:08,600
because there could be more interesting

352
00:13:06,950 --> 00:13:10,730
side and covert channels there as well

353
00:13:08,600 --> 00:13:12,890
part of our methodology required

354
00:13:10,730 --> 00:13:15,020
conspicuous network transmissions

355
00:13:12,890 --> 00:13:17,210
meaning we had to actually see it the

356
00:13:15,020 --> 00:13:19,160
evidence that we gathered that a side or

357
00:13:17,210 --> 00:13:20,900
covert channel was being exploited was

358
00:13:19,160 --> 00:13:22,339
the fact that we saw a transmission of

359
00:13:20,900 --> 00:13:25,040
data that the app should not have even

360
00:13:22,339 --> 00:13:26,839
been able to access and there could be

361
00:13:25,040 --> 00:13:28,670
ways that there obfuscating it or there

362
00:13:26,839 --> 00:13:30,830
could be accessing this information but

363
00:13:28,670 --> 00:13:32,360
not transmitting it that is a result or

364
00:13:30,830 --> 00:13:33,890
that as a consequence

365
00:13:32,360 --> 00:13:36,529
we just don't notice that these cider

366
00:13:33,890 --> 00:13:38,209
cover channels are being exploited to

367
00:13:36,529 --> 00:13:40,339
run these apps automatically we use the

368
00:13:38,209 --> 00:13:42,170
Android exerciser monkey it's not very

369
00:13:40,339 --> 00:13:43,940
sophisticated it just randomly clicks

370
00:13:42,170 --> 00:13:46,160
and swipes with the app it doesn't for

371
00:13:43,940 --> 00:13:48,019
instance login to accounts there could

372
00:13:46,160 --> 00:13:50,240
be other things other behaviors that

373
00:13:48,019 --> 00:13:52,490
occur if we were to log into accounts

374
00:13:50,240 --> 00:13:54,320
and so forth and finally we only looked

375
00:13:52,490 --> 00:13:56,120
at apps from the Google Play Store we

376
00:13:54,320 --> 00:13:58,339
only consider apps that were not

377
00:13:56,120 --> 00:14:00,170
classified as malware would list

378
00:13:58,339 --> 00:14:02,450
somewhat legitimate apps that anyone can

379
00:14:00,170 --> 00:14:03,800
download through the Play Store so there

380
00:14:02,450 --> 00:14:05,120
may be different behaviors different

381
00:14:03,800 --> 00:14:08,959
side and covert channels in different

382
00:14:05,120 --> 00:14:10,790
sets of apps as a note we've published

383
00:14:08,959 --> 00:14:12,949
all of our all the apps that we found

384
00:14:10,790 --> 00:14:15,890
affected online and you can find all

385
00:14:12,950 --> 00:14:17,990
this information on our blog blog absent

386
00:14:15,890 --> 00:14:19,630
sISTAR Moby we're also publishing some

387
00:14:17,990 --> 00:14:21,920
stories from this and we try to include

388
00:14:19,630 --> 00:14:24,140
security principles in general sort of

389
00:14:21,920 --> 00:14:25,699
targeted at an undergraduate level where

390
00:14:24,140 --> 00:14:27,709
we go through concepts such as brute

391
00:14:25,700 --> 00:14:29,000
force searching hash functions when you

392
00:14:27,709 --> 00:14:30,469
have a small domain and things like that

393
00:14:29,000 --> 00:14:34,459
so there could be some interesting

394
00:14:30,470 --> 00:14:38,240
things you can find there and so summary

395
00:14:34,459 --> 00:14:40,369
and some questions to bring up in this

396
00:14:38,240 --> 00:14:42,829
work we looked for evidence outside and

397
00:14:40,370 --> 00:14:45,140
cover channels and we found them we

398
00:14:42,829 --> 00:14:49,339
found exploited bugs and cover channels

399
00:14:45,140 --> 00:14:52,790
being used in large popular applications

400
00:14:49,339 --> 00:14:54,440
by large companies we found that you

401
00:14:52,790 --> 00:14:55,730
typically it's these SDKs that are

402
00:14:54,440 --> 00:14:57,620
responsible which brings the question

403
00:14:55,730 --> 00:14:59,329
how can we establish a sense of trust

404
00:14:57,620 --> 00:15:02,959
how can we know which ones are safe to

405
00:14:59,329 --> 00:15:05,060
use a question that I'm not the best

406
00:15:02,959 --> 00:15:06,979
person to discuss but is I want to at

407
00:15:05,060 --> 00:15:08,930
least mention and bring it up does the

408
00:15:06,980 --> 00:15:10,790
permission system represent notice and

409
00:15:08,930 --> 00:15:13,459
consent does saying I require these

410
00:15:10,790 --> 00:15:15,170
permissions represent notice the user

411
00:15:13,459 --> 00:15:17,180
installing the app represent consent and

412
00:15:15,170 --> 00:15:19,339
if so what does that mean for behaviors

413
00:15:17,180 --> 00:15:21,170
such as exploiting siding covert

414
00:15:19,339 --> 00:15:23,420
channels in one case we found an app

415
00:15:21,170 --> 00:15:25,819
that only exploited the covert channel

416
00:15:23,420 --> 00:15:27,469
or the side channel after it couldn't do

417
00:15:25,820 --> 00:15:30,769
it the legitimate way so it tried

418
00:15:27,470 --> 00:15:33,800
legitimately and then exploited the side

419
00:15:30,769 --> 00:15:36,019
channel as a note we received a bug

420
00:15:33,800 --> 00:15:37,699
bounty for our work Google has committed

421
00:15:36,019 --> 00:15:40,520
to fix the issue that was eligible in

422
00:15:37,699 --> 00:15:43,279
version q it was just protecting the ARP

423
00:15:40,520 --> 00:15:44,959
cache /proc slash net slash ARP it was a

424
00:15:43,279 --> 00:15:46,010
change that would just be a filesystem

425
00:15:44,959 --> 00:15:49,160
permission

426
00:15:46,010 --> 00:15:50,750
and in some sense it seems like privacy

427
00:15:49,160 --> 00:15:52,699
is then a luxury because you have to buy

428
00:15:50,750 --> 00:15:53,090
a brand new phone to get queue on your

429
00:15:52,700 --> 00:15:54,710
phone

430
00:15:53,090 --> 00:15:56,630
whereas this really should just be an

431
00:15:54,710 --> 00:15:59,450
over-the-air update it's not that hard

432
00:15:56,630 --> 00:16:01,340
to change a file system permission again

433
00:15:59,450 --> 00:16:03,650
our disclosure and all of the

434
00:16:01,340 --> 00:16:06,050
information as well these stories at our

435
00:16:03,650 --> 00:16:07,370
blog blog absense the star mobi thank

436
00:16:06,050 --> 00:16:15,199
you for your attention I'm happy to take

437
00:16:07,370 --> 00:16:17,300
your questions I think speakers so have

438
00:16:15,200 --> 00:16:19,250
you contacted by Drew and Disney about

439
00:16:17,300 --> 00:16:21,229
infighting I know what is their feedback

440
00:16:19,250 --> 00:16:23,570
we contacted Google about the side

441
00:16:21,230 --> 00:16:25,100
channels that exhort the yeah the side

442
00:16:23,570 --> 00:16:26,990
channels because I represented bugs in

443
00:16:25,100 --> 00:16:29,960
their code yeah we didn't contact the

444
00:16:26,990 --> 00:16:33,740
companies that were exploiting them hey

445
00:16:29,960 --> 00:16:35,660
Joel really great talk I'm curious how

446
00:16:33,740 --> 00:16:37,100
prevalent are these issues across the

447
00:16:35,660 --> 00:16:39,189
various different versions of Android

448
00:16:37,100 --> 00:16:42,320
that exist in the global marketplace

449
00:16:39,190 --> 00:16:42,770
across like version four five six seven

450
00:16:42,320 --> 00:16:47,300
eight

451
00:16:42,770 --> 00:16:48,860
or like marshmallow whatever the latest

452
00:16:47,300 --> 00:16:49,910
version of Android is I don't know I

453
00:16:48,860 --> 00:16:53,390
don't actually have an Android phone

454
00:16:49,910 --> 00:16:55,969
right so basically we did all of our

455
00:16:53,390 --> 00:16:57,230
experiments on version em and then

456
00:16:55,970 --> 00:16:58,700
that's what we were using on our

457
00:16:57,230 --> 00:17:02,330
experimentation and then we were

458
00:16:58,700 --> 00:17:03,830
retesting them on p2 when we were

459
00:17:02,330 --> 00:17:05,990
submitting them for the bug bounty and

460
00:17:03,830 --> 00:17:07,940
the I octal one had already been fixed

461
00:17:05,990 --> 00:17:10,970
by P but the our cash one had not been

462
00:17:07,940 --> 00:17:13,160
fixed and the use of the side or use of

463
00:17:10,970 --> 00:17:16,040
the storage device as a side channel or

464
00:17:13,160 --> 00:17:17,900
a covert channel rather is just part of

465
00:17:16,040 --> 00:17:20,180
the Android working as intended and in

466
00:17:17,900 --> 00:17:21,830
that sense is up to the SDK developers

467
00:17:20,180 --> 00:17:26,300
to just be honest about it right and not

468
00:17:21,829 --> 00:17:28,159
then not use that great things a lot of

469
00:17:26,300 --> 00:17:30,560
these SDKs seem to be very much working

470
00:17:28,160 --> 00:17:32,960
in a trusted client model is there any

471
00:17:30,560 --> 00:17:34,879
potential for mischief for example with

472
00:17:32,960 --> 00:17:36,680
the external storage you put your own

473
00:17:34,880 --> 00:17:39,530
encrypted blob in there and now the app

474
00:17:36,680 --> 00:17:42,320
starts reporting that right so you could

475
00:17:39,530 --> 00:17:44,540
easily have changed the file that was

476
00:17:42,320 --> 00:17:46,070
stored on the SD card and it's quite

477
00:17:44,540 --> 00:17:48,560
possible that the code would just read

478
00:17:46,070 --> 00:17:50,780
it as is decrypt it and send it off and

479
00:17:48,560 --> 00:17:52,250
whatever data was there let's hope that

480
00:17:50,780 --> 00:17:53,510
they properly escaped it or it's not

481
00:17:52,250 --> 00:17:55,540
like a tack coat or something like that

482
00:17:53,510 --> 00:17:59,309
yeah good point

483
00:17:55,540 --> 00:18:04,310
okay we have time for another question

484
00:17:59,309 --> 00:18:10,420
anyone to you okay I'd like to go again

485
00:18:04,310 --> 00:18:10,419
[Applause]

