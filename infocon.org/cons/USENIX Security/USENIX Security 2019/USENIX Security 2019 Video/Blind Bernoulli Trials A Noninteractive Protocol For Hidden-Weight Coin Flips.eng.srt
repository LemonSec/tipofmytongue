1
00:00:12,400 --> 00:00:17,360
so this all started from an observation

2
00:00:15,260 --> 00:00:21,320
that and

3
00:00:17,360 --> 00:00:24,169
systems it's common to have users taking

4
00:00:21,320 --> 00:00:27,160
random actions with the particular bias

5
00:00:24,170 --> 00:00:31,520
in order to achieve some kind of overall

6
00:00:27,160 --> 00:00:33,260
system behavior and so this is of course

7
00:00:31,520 --> 00:00:37,430
modeled as just a Bernoulli trial or

8
00:00:33,260 --> 00:00:39,680
just a biased coin flip and so we

9
00:00:37,430 --> 00:00:43,820
created the concept of a blind Bernoulli

10
00:00:39,680 --> 00:00:45,670
trial so with this our goal is to for

11
00:00:43,820 --> 00:00:49,370
one party to be able to create a

12
00:00:45,670 --> 00:00:52,010
encrypted coin that can be distributed

13
00:00:49,370 --> 00:00:55,910
to a large number of users and each user

14
00:00:52,010 --> 00:00:58,879
can use this to perform one Bernoulli

15
00:00:55,910 --> 00:01:03,110
trial obtain one result without learning

16
00:00:58,880 --> 00:01:04,790
the bias of the coin flip and during

17
00:01:03,110 --> 00:01:08,869
this presentation I'll be focusing on

18
00:01:04,790 --> 00:01:13,310
our efficient efficient realization of

19
00:01:08,869 --> 00:01:14,930
this using inner product encryption so

20
00:01:13,310 --> 00:01:17,030
we talked about a couple of examples of

21
00:01:14,930 --> 00:01:20,300
potential applications in our paper but

22
00:01:17,030 --> 00:01:22,940
the I'm gonna focus on one example here

23
00:01:20,300 --> 00:01:26,960
which is the ap3 anonymous communication

24
00:01:22,940 --> 00:01:32,030
network and this is just a network that

25
00:01:26,960 --> 00:01:34,070
uses random random walk through the

26
00:01:32,030 --> 00:01:37,580
network to hide the sender of a message

27
00:01:34,070 --> 00:01:42,080
and the random walk is driven by a

28
00:01:37,580 --> 00:01:44,990
biased coin flip at each step so that

29
00:01:42,080 --> 00:01:46,759
looks something like this we have a user

30
00:01:44,990 --> 00:01:50,390
who wishes to send a message to another

31
00:01:46,760 --> 00:01:55,010
user and the sender is say Alice and

32
00:01:50,390 --> 00:01:56,840
green here on the left and note that

33
00:01:55,010 --> 00:01:59,659
also both users here are also part of

34
00:01:56,840 --> 00:02:01,189
the network so when Alice wants to send

35
00:01:59,659 --> 00:02:04,000
a message she first selects a random

36
00:02:01,189 --> 00:02:07,070
node and sends the message to that node

37
00:02:04,000 --> 00:02:09,709
then that node does a random coin flip

38
00:02:07,070 --> 00:02:11,239
with a certain bias and depending on the

39
00:02:09,709 --> 00:02:13,040
result the node either forwards it to

40
00:02:11,239 --> 00:02:16,459
another random node or it forwards that

41
00:02:13,040 --> 00:02:18,828
message to its actual recipient so in

42
00:02:16,459 --> 00:02:21,890
this case say the first node gets a

43
00:02:18,829 --> 00:02:24,290
heads on his coin flip so it chooses to

44
00:02:21,890 --> 00:02:26,779
send that to a new random node and this

45
00:02:24,290 --> 00:02:28,850
process continues through the network

46
00:02:26,780 --> 00:02:32,150
until by chance

47
00:02:28,850 --> 00:02:34,220
one note finally gets a tails and so

48
00:02:32,150 --> 00:02:39,110
that notes it then sends the message to

49
00:02:34,220 --> 00:02:42,010
his actual recipient so notice that

50
00:02:39,110 --> 00:02:44,420
there's a trade-off here so if we have a

51
00:02:42,010 --> 00:02:45,980
higher probability of sending the

52
00:02:44,420 --> 00:02:49,790
message to a random note at each step

53
00:02:45,980 --> 00:02:55,820
then we have better anonymity but we

54
00:02:49,790 --> 00:02:59,140
also have longer path lengths so and in

55
00:02:55,820 --> 00:03:01,910
terms of anonymity we're talking about

56
00:02:59,140 --> 00:03:05,450
nodes on the path being able to deduce

57
00:03:01,910 --> 00:03:07,700
the cinder right so if this node on the

58
00:03:05,450 --> 00:03:09,140
path knows that the probability of

59
00:03:07,700 --> 00:03:11,299
mixing the message is relatively low

60
00:03:09,140 --> 00:03:15,890
then it can deduce that the cinder is

61
00:03:11,300 --> 00:03:18,650
likely very close to it in the in the

62
00:03:15,890 --> 00:03:20,179
network right on the other hand if we

63
00:03:18,650 --> 00:03:22,310
use a lower probability of mixing the

64
00:03:20,180 --> 00:03:23,810
message we get shorter path lengths but

65
00:03:22,310 --> 00:03:25,760
we also get reduced anonymity because

66
00:03:23,810 --> 00:03:28,880
nodes that are on the path that observe

67
00:03:25,760 --> 00:03:32,120
the message can see that the probability

68
00:03:28,880 --> 00:03:38,269
of mixing is lower and they can deduce

69
00:03:32,120 --> 00:03:39,770
that the the center is closed so the ap3

70
00:03:38,270 --> 00:03:44,660
is described using a fixed probability

71
00:03:39,770 --> 00:03:47,000
for all messages but instead we observed

72
00:03:44,660 --> 00:03:48,470
that you could vary probability by

73
00:03:47,000 --> 00:03:51,500
message and achieve differential service

74
00:03:48,470 --> 00:03:53,390
so in our example we say that you could

75
00:03:51,500 --> 00:03:57,320
have a slow traffic that uses a higher

76
00:03:53,390 --> 00:03:59,450
probability of mixing meaning that you

77
00:03:57,320 --> 00:04:03,019
get longer path lengths but also higher

78
00:03:59,450 --> 00:04:04,640
latency and better anonymity on the

79
00:04:03,020 --> 00:04:06,530
other hand we have priority traffic that

80
00:04:04,640 --> 00:04:07,459
is the opposite it has shorter paths it

81
00:04:06,530 --> 00:04:11,960
gets there faster

82
00:04:07,460 --> 00:04:14,300
but because the mixing probability is

83
00:04:11,960 --> 00:04:17,799
lower nodes that observe the message can

84
00:04:14,300 --> 00:04:20,570
narrow down the cinder more easily and

85
00:04:17,798 --> 00:04:22,370
we show a simulation of this in our

86
00:04:20,570 --> 00:04:26,510
paper we use the network quite similar

87
00:04:22,370 --> 00:04:28,460
to a p3 and as expected the priority

88
00:04:26,510 --> 00:04:30,590
class traffic and the blue line here on

89
00:04:28,460 --> 00:04:34,039
the CDF the cumulative distribution

90
00:04:30,590 --> 00:04:35,390
function shows that the path links for

91
00:04:34,040 --> 00:04:38,240
the priority traffic are of course much

92
00:04:35,390 --> 00:04:40,320
slower or much faster shorter paths

93
00:04:38,240 --> 00:04:42,120
faster traffic

94
00:04:40,320 --> 00:04:44,599
and the slow class has longer paths

95
00:04:42,120 --> 00:04:47,760
links on average but of course he also

96
00:04:44,600 --> 00:04:52,110
anonymity suffers quite a bit from this

97
00:04:47,760 --> 00:04:55,409
so we show the we measure anonymity as

98
00:04:52,110 --> 00:04:58,410
the percentage of nodes that the that an

99
00:04:55,410 --> 00:05:01,110
observer has confidence that the message

100
00:04:58,410 --> 00:05:02,490
could have originated from and so we

101
00:05:01,110 --> 00:05:05,310
showed that with the the priority

102
00:05:02,490 --> 00:05:07,850
traffic and our simulation the anonymity

103
00:05:05,310 --> 00:05:10,500
set is about 5% of the network size

104
00:05:07,850 --> 00:05:13,320
whereas with the slow traffic we have

105
00:05:10,500 --> 00:05:16,830
about 60% of of the network size and our

106
00:05:13,320 --> 00:05:19,650
anonymity set instead we observed that

107
00:05:16,830 --> 00:05:21,240
if we're able to obscure the probability

108
00:05:19,650 --> 00:05:23,159
from the nodes that are forwarding the

109
00:05:21,240 --> 00:05:25,530
messages then this attack doesn't work

110
00:05:23,160 --> 00:05:27,840
anymore right so basically if a node

111
00:05:25,530 --> 00:05:29,460
observes a message and it sees that the

112
00:05:27,840 --> 00:05:31,200
forwarding problem the the mixing

113
00:05:29,460 --> 00:05:33,570
probability is low then it's able to

114
00:05:31,200 --> 00:05:35,190
perform this attack but if a node

115
00:05:33,570 --> 00:05:37,200
observe as a message and it's unable to

116
00:05:35,190 --> 00:05:39,450
distinguish between the priority and the

117
00:05:37,200 --> 00:05:41,460
slow traffic then it's impossible for it

118
00:05:39,450 --> 00:05:44,130
to use that information to narrow down

119
00:05:41,460 --> 00:05:46,530
the set of senders and so we showed that

120
00:05:44,130 --> 00:05:49,620
under the assumption that an observing

121
00:05:46,530 --> 00:05:51,419
node cannot distinguish the classes of

122
00:05:49,620 --> 00:05:54,840
traffic then we get an anonymity set

123
00:05:51,420 --> 00:05:58,950
size that's much larger about 50% of the

124
00:05:54,840 --> 00:06:02,000
network okay so that that's our

125
00:05:58,950 --> 00:06:04,050
motivation now let's start with our

126
00:06:02,000 --> 00:06:06,930
definition of the problem that we're

127
00:06:04,050 --> 00:06:08,940
trying to solve here more precisely so

128
00:06:06,930 --> 00:06:11,550
we want this to be non interactive and

129
00:06:08,940 --> 00:06:13,260
that's because our motivating use cases

130
00:06:11,550 --> 00:06:15,960
are mainly in distributed systems where

131
00:06:13,260 --> 00:06:18,060
an interactive online protocol would be

132
00:06:15,960 --> 00:06:20,789
prohibitive for a large number of users

133
00:06:18,060 --> 00:06:28,380
all having to communicate with a

134
00:06:20,790 --> 00:06:32,280
centralized system so so we want this to

135
00:06:28,380 --> 00:06:34,409
be non interactive secondly we want this

136
00:06:32,280 --> 00:06:39,270
to be per user deterministic so that

137
00:06:34,410 --> 00:06:41,070
means each user who gets a trial result

138
00:06:39,270 --> 00:06:42,930
for a trial must get the same result

139
00:06:41,070 --> 00:06:44,849
every time otherwise the user can just

140
00:06:42,930 --> 00:06:45,430
repeat the trial over and over and then

141
00:06:44,850 --> 00:06:48,340
you have

142
00:06:45,430 --> 00:06:50,280
a good estimate of the probability for

143
00:06:48,340 --> 00:06:52,419
that trial right

144
00:06:50,280 --> 00:06:53,890
finally this leads us to our third

145
00:06:52,420 --> 00:06:55,780
conclusion which is that we need some

146
00:06:53,890 --> 00:06:59,800
kind of authority to manage the users

147
00:06:55,780 --> 00:07:01,179
otherwise in the exact same way if I can

148
00:06:59,800 --> 00:07:02,800
obtain multiple user identities and I

149
00:07:01,180 --> 00:07:05,350
can perform multiple trials then I can

150
00:07:02,800 --> 00:07:10,090
start to deduce the probability of each

151
00:07:05,350 --> 00:07:15,070
result so starting with these three

152
00:07:10,090 --> 00:07:16,450
ideas we distill the concept of the

153
00:07:15,070 --> 00:07:20,170
blind Bernoulli trial into three

154
00:07:16,450 --> 00:07:23,310
algorithms the first here is the key

155
00:07:20,170 --> 00:07:26,380
generation phase and so here we have a

156
00:07:23,310 --> 00:07:28,960
some kind of trusted Authority who's

157
00:07:26,380 --> 00:07:30,940
using a master secret key the master

158
00:07:28,960 --> 00:07:33,489
secret key enables the authority to

159
00:07:30,940 --> 00:07:35,700
generate individual user keys and then

160
00:07:33,490 --> 00:07:41,500
those user Keys can be distributed to

161
00:07:35,700 --> 00:07:43,990
any number of users in the network the

162
00:07:41,500 --> 00:07:47,050
second is to call Tag generations where

163
00:07:43,990 --> 00:07:50,530
a tag represents the parameters for a

164
00:07:47,050 --> 00:07:52,030
Bernoulli trial which is really just you

165
00:07:50,530 --> 00:07:55,270
know the probability of each result and

166
00:07:52,030 --> 00:07:57,760
so any person can create a new tag and

167
00:07:55,270 --> 00:08:01,390
they do that by selecting the

168
00:07:57,760 --> 00:08:03,010
probability that they want associated

169
00:08:01,390 --> 00:08:07,510
with that tag and then they can

170
00:08:03,010 --> 00:08:10,570
distribute the tag to the network the

171
00:08:07,510 --> 00:08:13,480
third algorithm is the trial and this is

172
00:08:10,570 --> 00:08:17,020
where given one user key and one tag I

173
00:08:13,480 --> 00:08:21,430
can compute any user can compute a

174
00:08:17,020 --> 00:08:24,460
single random Bernoulli trial result so

175
00:08:21,430 --> 00:08:26,200
in this way we have the overall

176
00:08:24,460 --> 00:08:28,539
distribution of results in the network

177
00:08:26,200 --> 00:08:31,300
is approximately the probability that's

178
00:08:28,540 --> 00:08:33,700
selected by the the one who generates

179
00:08:31,300 --> 00:08:35,500
the tag but each individual user sees

180
00:08:33,700 --> 00:08:37,570
only a single result and they'd gain no

181
00:08:35,500 --> 00:08:41,320
more information about the probability

182
00:08:37,570 --> 00:08:44,530
of the results than absolutely necessary

183
00:08:41,320 --> 00:08:47,020
and so that leads us to our security

184
00:08:44,530 --> 00:08:50,470
definition to formalize the security of

185
00:08:47,020 --> 00:08:53,199
this we start from the idea that simply

186
00:08:50,470 --> 00:08:55,840
an adversary with some number of keys

187
00:08:53,200 --> 00:08:58,810
should learn no more from those keys

188
00:08:55,840 --> 00:09:03,070
Tagg then they would from having access

189
00:08:58,810 --> 00:09:06,390
only to those trial results instead and

190
00:09:03,070 --> 00:09:08,980
more formally we can turn that into a

191
00:09:06,390 --> 00:09:11,290
definition based on the probabilistic

192
00:09:08,980 --> 00:09:13,060
polynomial-time adversaries and we say

193
00:09:11,290 --> 00:09:15,430
that the difference between these two

194
00:09:13,060 --> 00:09:17,589
adversaries must be negligible where the

195
00:09:15,430 --> 00:09:19,959
only difference in the inputs of the

196
00:09:17,590 --> 00:09:23,260
adversaries is that one has the actual

197
00:09:19,960 --> 00:09:24,940
tag T as input and the second has only

198
00:09:23,260 --> 00:09:27,790
the trial results associated with that

199
00:09:24,940 --> 00:09:30,460
tag as input plus a leakage function

200
00:09:27,790 --> 00:09:32,880
where the leakage function quantifies

201
00:09:30,460 --> 00:09:35,290
and gives a theoretical bound for any

202
00:09:32,880 --> 00:09:39,670
additional information that is leaked in

203
00:09:35,290 --> 00:09:42,040
a non theoretically ideal system to

204
00:09:39,670 --> 00:09:43,240
construct this well we show in the paper

205
00:09:42,040 --> 00:09:46,540
we talk about three different

206
00:09:43,240 --> 00:09:48,310
constructions including a couple of

207
00:09:46,540 --> 00:09:50,050
strong made constructions the one of

208
00:09:48,310 --> 00:09:51,369
them is that first you can do this with

209
00:09:50,050 --> 00:09:53,469
general functional encryption but of

210
00:09:51,370 --> 00:09:55,570
course that's we know that's not really

211
00:09:53,470 --> 00:09:57,400
practical right now so instead the main

212
00:09:55,570 --> 00:09:58,810
solution that we focus on is using a

213
00:09:57,400 --> 00:10:03,160
special case of functional encryption

214
00:09:58,810 --> 00:10:04,780
called inner product encryption for some

215
00:10:03,160 --> 00:10:06,490
background on IP II inner product

216
00:10:04,780 --> 00:10:09,160
encryption this is just a special case

217
00:10:06,490 --> 00:10:11,950
of functional encryption that works for

218
00:10:09,160 --> 00:10:14,380
inner products only so here each

219
00:10:11,950 --> 00:10:16,360
function key is associated with a vector

220
00:10:14,380 --> 00:10:20,710
and each ciphertext is associated with

221
00:10:16,360 --> 00:10:22,720
the vector then given a function key and

222
00:10:20,710 --> 00:10:25,150
a ciphertext you can decrypt that

223
00:10:22,720 --> 00:10:31,690
ciphertext if and only if the vectors

224
00:10:25,150 --> 00:10:35,170
are orthogonal specifically where we use

225
00:10:31,690 --> 00:10:36,850
a stricter definition of IPE called

226
00:10:35,170 --> 00:10:39,670
fully attribute hiding IPE

227
00:10:36,850 --> 00:10:41,260
and this requires additionally that the

228
00:10:39,670 --> 00:10:44,589
cipher text does not reveal its

229
00:10:41,260 --> 00:10:50,290
associated vector even when the cipher

230
00:10:44,590 --> 00:10:52,840
text is able to be decrypted so to

231
00:10:50,290 --> 00:10:56,050
construct our blind Bernoulli trials

232
00:10:52,840 --> 00:10:58,600
with this we it's a fairly

233
00:10:56,050 --> 00:11:02,829
straightforward mapping user keys are

234
00:10:58,600 --> 00:11:04,600
just IPE function keys and we generate

235
00:11:02,830 --> 00:11:07,350
this function keys using a fixed number

236
00:11:04,600 --> 00:11:10,649
of nonzero components in the back

237
00:11:07,350 --> 00:11:12,089
but we shuffle the vectors within that

238
00:11:10,649 --> 00:11:15,600
are the components within that vector

239
00:11:12,089 --> 00:11:20,310
randomly for each user key so tags

240
00:11:15,600 --> 00:11:21,870
become IPE ciphertext where we vary the

241
00:11:20,310 --> 00:11:23,939
number of nonzero components in the

242
00:11:21,870 --> 00:11:26,640
ciphertext to control the probability

243
00:11:23,940 --> 00:11:28,320
that any given user key will be able to

244
00:11:26,640 --> 00:11:30,980
decrypt that ciphertext so you can

245
00:11:28,320 --> 00:11:33,300
imagine that a tag with only a single

246
00:11:30,980 --> 00:11:36,540
nonzero component has a much higher

247
00:11:33,300 --> 00:11:40,109
chance of being orthogonal to any given

248
00:11:36,540 --> 00:11:42,620
user key compared to a tag that as a

249
00:11:40,110 --> 00:11:46,560
vector with several nonzero components

250
00:11:42,620 --> 00:11:48,839
and then because IPE scheme is fully

251
00:11:46,560 --> 00:11:50,189
attribute hiding the vector associated

252
00:11:48,839 --> 00:11:51,870
with the ciphertext is hidden from the

253
00:11:50,190 --> 00:11:54,149
users even the ones who are able to

254
00:11:51,870 --> 00:11:55,440
decrypt it so then of course the trial

255
00:11:54,149 --> 00:11:58,320
just becomes an attempt at ipe

256
00:11:55,440 --> 00:12:00,750
decryption so the user can take their

257
00:11:58,320 --> 00:12:03,750
their key and attempted to decrypt the

258
00:12:00,750 --> 00:12:07,500
tag and if the decription succeeds then

259
00:12:03,750 --> 00:12:10,019
they learn basically whether or not

260
00:12:07,500 --> 00:12:15,600
their key is orthogonal to that tag or

261
00:12:10,019 --> 00:12:19,829
not and we prove the security of this in

262
00:12:15,600 --> 00:12:22,529
the standard model by reducing it to the

263
00:12:19,829 --> 00:12:26,279
security of the IPE scheme that we use

264
00:12:22,529 --> 00:12:29,189
and we use our previously mentioned

265
00:12:26,279 --> 00:12:31,680
definition and we show that given the

266
00:12:29,190 --> 00:12:34,860
first adversary it's possible to

267
00:12:31,680 --> 00:12:37,709
construct a simulator that uses the only

268
00:12:34,860 --> 00:12:38,970
the trial results such that the outputs

269
00:12:37,709 --> 00:12:40,949
of the two are computationally

270
00:12:38,970 --> 00:12:45,899
indistinguishable using the leakage

271
00:12:40,950 --> 00:12:48,230
function of the IPE public key so given

272
00:12:45,899 --> 00:12:50,940
the IPE public key is possible for the

273
00:12:48,230 --> 00:12:53,040
simulator adversary to construct a fake

274
00:12:50,940 --> 00:12:56,370
tag that's functionally identical to the

275
00:12:53,040 --> 00:12:59,699
real one and then the the simulator can

276
00:12:56,370 --> 00:13:02,100
just feed that fake tag to the original

277
00:12:59,699 --> 00:13:04,050
algorithm and of course those outputs

278
00:13:02,100 --> 00:13:06,480
must be indistinguishable otherwise we

279
00:13:04,050 --> 00:13:10,829
would have broken the definition of the

280
00:13:06,480 --> 00:13:13,829
attribute hiding IPE okay so that's the

281
00:13:10,829 --> 00:13:15,520
sort of the theoretical understanding of

282
00:13:13,829 --> 00:13:17,529
the security but

283
00:13:15,520 --> 00:13:18,819
it's it's still worth asking what is the

284
00:13:17,529 --> 00:13:21,820
practical security of something like

285
00:13:18,820 --> 00:13:23,800
this right because we know first of all

286
00:13:21,820 --> 00:13:25,390
that even one trial result always

287
00:13:23,800 --> 00:13:29,579
reveals some information about the

288
00:13:25,390 --> 00:13:32,140
probability and we also want to learn

289
00:13:29,580 --> 00:13:33,820
how much does an adversary learn from a

290
00:13:32,140 --> 00:13:35,610
single trial or how much today would

291
00:13:33,820 --> 00:13:40,570
they learn from collusion even in the

292
00:13:35,610 --> 00:13:42,640
worst case secondly we have to look at

293
00:13:40,570 --> 00:13:44,950
the practical security specifically of

294
00:13:42,640 --> 00:13:47,680
the IPE scheme because we've shown that

295
00:13:44,950 --> 00:13:50,080
it's not a perfect security because the

296
00:13:47,680 --> 00:13:52,800
leakage function is the IPD public key

297
00:13:50,080 --> 00:13:59,170
and so what that means in practice and

298
00:13:52,800 --> 00:14:02,709
is that a user who had access to the IPE

299
00:13:59,170 --> 00:14:05,229
public key would be able to use that to

300
00:14:02,709 --> 00:14:08,199
learn the arrangement of components in

301
00:14:05,230 --> 00:14:10,330
any user keys that it has so this

302
00:14:08,200 --> 00:14:14,700
reveals the components in the user key

303
00:14:10,330 --> 00:14:17,709
but not in the tags and we know that the

304
00:14:14,700 --> 00:14:20,320
so so given this information an attacker

305
00:14:17,709 --> 00:14:22,810
could narrow down the set of possible

306
00:14:20,320 --> 00:14:24,220
tag vectors that it's looking at to only

307
00:14:22,810 --> 00:14:27,189
those that would be consistent with its

308
00:14:24,220 --> 00:14:28,990
set of user key vectors but we know that

309
00:14:27,190 --> 00:14:30,910
attacker cannot possibly do any better

310
00:14:28,990 --> 00:14:37,720
than this just by the definition of the

311
00:14:30,910 --> 00:14:39,130
IP security so okay so look at the to

312
00:14:37,720 --> 00:14:43,630
look at the practical security impact of

313
00:14:39,130 --> 00:14:46,000
this we performed in a simulation using

314
00:14:43,630 --> 00:14:48,399
two different attackers the first is a

315
00:14:46,000 --> 00:14:50,470
we call a component aware attacker and

316
00:14:48,399 --> 00:14:53,890
this one models the security of the IPE

317
00:14:50,470 --> 00:14:57,670
scheme by using the full knowledge of

318
00:14:53,890 --> 00:14:58,990
the user key components which is the the

319
00:14:57,670 --> 00:15:00,849
theoretical possible amount of

320
00:14:58,990 --> 00:15:03,790
information adversary could have given

321
00:15:00,850 --> 00:15:05,470
our proof and the second models the

322
00:15:03,790 --> 00:15:07,120
ideal security we call it the naive

323
00:15:05,470 --> 00:15:10,029
attacker and it models the ideal

324
00:15:07,120 --> 00:15:15,399
security because it uses only the trial

325
00:15:10,029 --> 00:15:16,750
results to try and infer the tag so for

326
00:15:15,399 --> 00:15:20,140
this experiment we use four

327
00:15:16,750 --> 00:15:23,560
probabilities years and based off the

328
00:15:20,140 --> 00:15:27,490
IPE construction we use we modeled an IP

329
00:15:23,560 --> 00:15:28,829
scheme with 64 dimensions and we've

330
00:15:27,490 --> 00:15:32,580
selected these

331
00:15:28,830 --> 00:15:34,380
for possible tags with for example using

332
00:15:32,580 --> 00:15:38,250
nine nonzero components in a tag would

333
00:15:34,380 --> 00:15:43,230
result in a probability of success of

334
00:15:38,250 --> 00:15:45,540
the trial of 0.7 to five and all four of

335
00:15:43,230 --> 00:15:47,040
these tags were equally likely to be

336
00:15:45,540 --> 00:15:50,250
given to the adversary so as far as

337
00:15:47,040 --> 00:15:52,769
adversary is concerned before performing

338
00:15:50,250 --> 00:15:58,320
any trials on a tag that tag is equally

339
00:15:52,769 --> 00:16:01,040
likely to be any of these four so these

340
00:15:58,320 --> 00:16:04,490
are the results for an attacker with

341
00:16:01,040 --> 00:16:06,599
increasing number of user keys who's

342
00:16:04,490 --> 00:16:08,519
running trials with each of those user

343
00:16:06,600 --> 00:16:10,350
Keys and then using that information to

344
00:16:08,519 --> 00:16:13,709
try and deduce which of the four tags

345
00:16:10,350 --> 00:16:16,589
that had and so given that we start with

346
00:16:13,709 --> 00:16:19,140
four tags and equal probability the the

347
00:16:16,589 --> 00:16:22,440
prior entropy of that distribution is

348
00:16:19,140 --> 00:16:25,170
two bits and you can see if that as

349
00:16:22,440 --> 00:16:26,670
you'd expect with the number of trials

350
00:16:25,170 --> 00:16:27,810
increases adversary gains more

351
00:16:26,670 --> 00:16:29,910
information in that entropy of that

352
00:16:27,810 --> 00:16:33,119
distribution starts to decrease from the

353
00:16:29,910 --> 00:16:36,120
adversaries perspective but we see that

354
00:16:33,120 --> 00:16:39,329
the IPE case reveals slightly more

355
00:16:36,120 --> 00:16:40,980
information and so the entry of that

356
00:16:39,329 --> 00:16:45,300
distribution decreases a little bit

357
00:16:40,980 --> 00:16:47,310
faster although using the callback libor

358
00:16:45,300 --> 00:16:48,949
divergence we show that the difference

359
00:16:47,310 --> 00:16:51,209
in information between those models

360
00:16:48,950 --> 00:16:53,820
starts to level off at about ten keys

361
00:16:51,209 --> 00:16:55,410
surprisingly so the this is just a

362
00:16:53,820 --> 00:16:59,430
measure of the difference in information

363
00:16:55,410 --> 00:17:01,170
between two models and we so we show

364
00:16:59,430 --> 00:17:02,819
that the difference between the naive

365
00:17:01,170 --> 00:17:07,168
attacker and the component aware

366
00:17:02,820 --> 00:17:13,290
attacker it starts to plateau after a

367
00:17:07,169 --> 00:17:15,059
certain point finally we did an

368
00:17:13,290 --> 00:17:17,399
implementation of this so we could get

369
00:17:15,059 --> 00:17:20,209
some benchmark numbers we used a recent

370
00:17:17,400 --> 00:17:22,110
IPE scheme that's fully attribute hiding

371
00:17:20,209 --> 00:17:26,550
secure in the standard model due to

372
00:17:22,109 --> 00:17:27,990
changing and we and in this scheme all

373
00:17:26,550 --> 00:17:30,600
the algorithms are linear in the number

374
00:17:27,990 --> 00:17:32,760
of dimensions of the IPE scheme although

375
00:17:30,600 --> 00:17:36,000
the the trial algorithm is dominated by

376
00:17:32,760 --> 00:17:38,190
just a constant number of pairings that

377
00:17:36,000 --> 00:17:39,450
are involved with seven pairings and so

378
00:17:38,190 --> 00:17:41,580
these are our numbers

379
00:17:39,450 --> 00:17:43,260
for the set up phase in the tag

380
00:17:41,580 --> 00:17:44,490
generation phase these are the slowest

381
00:17:43,260 --> 00:17:46,110
algorithms and we're in the realm of a

382
00:17:44,490 --> 00:17:49,590
few seconds here

383
00:17:46,110 --> 00:17:50,699
but the trial algorithm in particular is

384
00:17:49,590 --> 00:17:52,559
the one that we're most interested in

385
00:17:50,700 --> 00:17:54,090
because that's the one that all the the

386
00:17:52,559 --> 00:17:58,740
users on a network would be running

387
00:17:54,090 --> 00:18:00,658
repeatedly for each tag and so here we

388
00:17:58,740 --> 00:18:03,769
see that the we're in the realm of about

389
00:18:00,659 --> 00:18:06,419
30 milliseconds or so for a trial

390
00:18:03,769 --> 00:18:15,990
alright and that concludes my talk so

391
00:18:06,419 --> 00:18:17,820
now I'll take any questions I think so

392
00:18:15,990 --> 00:18:19,860
the talk so it seems that in your

393
00:18:17,820 --> 00:18:23,730
solution to get a probability of 1 over

394
00:18:19,860 --> 00:18:25,428
n you need suffer texts of length n have

395
00:18:23,730 --> 00:18:28,110
you considered is there a way to maybe

396
00:18:25,429 --> 00:18:29,549
use some shorter cycle to get shorter

397
00:18:28,110 --> 00:18:31,168
ciphertext it's depending on the

398
00:18:29,549 --> 00:18:34,760
probability so maybe logarithmic or

399
00:18:31,169 --> 00:18:37,080
something like that so yeah so the

400
00:18:34,760 --> 00:18:38,789
availability of different probability

401
00:18:37,080 --> 00:18:44,360
options is something we discuss a lot

402
00:18:38,789 --> 00:18:47,580
more in the paper and yes so if you

403
00:18:44,360 --> 00:18:52,289
using the the inner product scheme

404
00:18:47,580 --> 00:18:53,519
you're basically limited by the the

405
00:18:52,289 --> 00:18:56,700
number of components that are available

406
00:18:53,519 --> 00:18:59,159
there right and so I don't really see a

407
00:18:56,700 --> 00:19:00,659
way around that except for using

408
00:18:59,159 --> 00:19:01,559
something completely different some

409
00:19:00,659 --> 00:19:03,389
other completely different kind of

410
00:19:01,559 --> 00:19:04,830
construction and we would you talked

411
00:19:03,389 --> 00:19:06,689
about the of course the general

412
00:19:04,830 --> 00:19:09,500
functional crypto nation construction

413
00:19:06,690 --> 00:19:11,580
and in that case we're able to achieve

414
00:19:09,500 --> 00:19:14,669
you know arbitrary probabilities

415
00:19:11,580 --> 00:19:16,350
regardless of the or yeah without longer

416
00:19:14,669 --> 00:19:19,880
cipher texts but yeah in this case I

417
00:19:16,350 --> 00:19:19,879
think that if that is a limitation

418
00:19:21,809 --> 00:19:26,039
I just have one question so this this

419
00:19:23,669 --> 00:19:27,269
looks a little bit like I don't know

420
00:19:26,039 --> 00:19:29,460
let's think about a group signature or

421
00:19:27,269 --> 00:19:32,009
you have a Thor 'ti that gives out keys

422
00:19:29,460 --> 00:19:33,090
is there potentially an equivalent of

423
00:19:32,009 --> 00:19:34,679
this where you have basically do

424
00:19:33,090 --> 00:19:36,209
untrusted set up where let's say I can

425
00:19:34,679 --> 00:19:37,889
identify a group is that something that

426
00:19:36,210 --> 00:19:40,979
can be built even with very strong tools

427
00:19:37,889 --> 00:19:42,508
like I pick my users there's no trusted

428
00:19:40,979 --> 00:19:49,440
Authority we you know just every time I

429
00:19:42,509 --> 00:19:51,139
send out a tag I can do it then so it's

430
00:19:49,440 --> 00:19:55,580
okay if the answer is I don't know yeah

431
00:19:51,139 --> 00:19:58,168
that seems possible in principle yeah I

432
00:19:55,580 --> 00:19:59,759
don't you know I don't think we've

433
00:19:58,169 --> 00:20:00,960
really examined that and this work but I

434
00:19:59,759 --> 00:20:04,889
don't see why that wouldn't be possible

435
00:20:00,960 --> 00:20:06,890
in principle all right let's thank the

436
00:20:04,889 --> 00:20:12,079
speaker one more time

437
00:20:06,890 --> 00:20:12,079
[Applause]

