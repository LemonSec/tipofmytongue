1
00:00:10,620 --> 00:00:16,799
today I'm going to present a new context

2
00:00:13,620 --> 00:00:18,720
sensitive or the contraflow integrity

3
00:00:16,800 --> 00:00:21,779
that we called actually origins

4
00:00:18,720 --> 00:00:24,750
sensitive CFI this is a collaborative

5
00:00:21,779 --> 00:00:27,150
work with my other colleagues prevention

6
00:00:24,750 --> 00:00:29,660
leo abu nasr and my professor Jeeva and

7
00:00:27,150 --> 00:00:34,079
Jae young from Florida State University

8
00:00:29,660 --> 00:00:36,540
so if we look into any program we will

9
00:00:34,079 --> 00:00:38,670
find out there are two versions of quote

10
00:00:36,540 --> 00:00:41,930
pointers one is the return address the

11
00:00:38,670 --> 00:00:44,750
other one is the function pointer and

12
00:00:41,930 --> 00:00:47,670
for both of them there are different

13
00:00:44,750 --> 00:00:50,550
solutions available for the function

14
00:00:47,670 --> 00:00:55,160
pointer we have forward a protection

15
00:00:50,550 --> 00:00:59,069
mechanism like CFI so the CFI actually

16
00:00:55,160 --> 00:01:03,438
enforce some policy in the indirect call

17
00:00:59,070 --> 00:01:06,479
point and the the policy is actually

18
00:01:03,439 --> 00:01:08,759
validated through a precomputed control

19
00:01:06,479 --> 00:01:11,970
flow graph so there are actually three

20
00:01:08,759 --> 00:01:20,490
parts of a CFI system CFA policy the

21
00:01:11,970 --> 00:01:24,539
reference monitor and the CFG so the

22
00:01:20,490 --> 00:01:26,729
problem or with the CFI is that if the

23
00:01:24,539 --> 00:01:29,100
policy is not strong enough there will

24
00:01:26,729 --> 00:01:32,670
be still some attack space on the

25
00:01:29,100 --> 00:01:36,658
control flow graph so epic errs can

26
00:01:32,670 --> 00:01:40,069
actually bypass those attack surface

27
00:01:36,659 --> 00:01:44,490
instead there are a CFI policy and force

28
00:01:40,069 --> 00:01:47,219
so we use context-sensitive CFI to

29
00:01:44,490 --> 00:01:51,149
actually minimize that attack surface

30
00:01:47,219 --> 00:01:55,109
when the CFI is ever safe is exist in

31
00:01:51,149 --> 00:01:58,229
the system we you know in a previous

32
00:01:55,109 --> 00:02:01,229
project that is adaptive call Sai

33
00:01:58,229 --> 00:02:05,789
sensitive CF I published in euro SNP

34
00:02:01,229 --> 00:02:08,639
2019 we have used this formula for

35
00:02:05,789 --> 00:02:11,640
actually calculate the security

36
00:02:08,639 --> 00:02:15,269
guarantee of any CFI we have seen that

37
00:02:11,640 --> 00:02:18,869
we have reduce Everest equivalence

38
00:02:15,270 --> 00:02:21,360
classes by using Casa Sensibility but we

39
00:02:18,870 --> 00:02:24,250
have also found that the largest

40
00:02:21,360 --> 00:02:27,700
equivalent class size is still very

41
00:02:24,250 --> 00:02:29,920
very large so we actually go through

42
00:02:27,700 --> 00:02:32,470
those case studies and find out that

43
00:02:29,920 --> 00:02:34,780
okay we need something else than the

44
00:02:32,470 --> 00:02:40,420
regular context sensitivity like path

45
00:02:34,780 --> 00:02:44,280
sensitive or quasi sensitivity so let's

46
00:02:40,420 --> 00:02:48,130
go to a motivate shown example from the

47
00:02:44,280 --> 00:02:51,819
471 only type a benchmark so we can see

48
00:02:48,130 --> 00:02:55,390
here that there is a code pointer that

49
00:02:51,819 --> 00:02:57,369
is good to execute exact that is a

50
00:02:55,390 --> 00:03:01,290
private member function a function

51
00:02:57,370 --> 00:03:04,840
pointer of class execute on startup and

52
00:03:01,290 --> 00:03:06,940
these if we look into the indirect call

53
00:03:04,840 --> 00:03:09,700
point inside the execute method and it's

54
00:03:06,940 --> 00:03:12,190
constant context we can find out that it

55
00:03:09,700 --> 00:03:14,619
is actually a iteration over a list of

56
00:03:12,190 --> 00:03:17,160
object from of the executes on startup

57
00:03:14,620 --> 00:03:20,410
so there is actually no difference of

58
00:03:17,160 --> 00:03:22,420
different indirect calls on this context

59
00:03:20,410 --> 00:03:26,260
they are all same because they are just

60
00:03:22,420 --> 00:03:30,309
a list and the list can have different

61
00:03:26,260 --> 00:03:32,769
order of objects so in the regular path

62
00:03:30,310 --> 00:03:35,769
sensory or casas entry is not going to

63
00:03:32,769 --> 00:03:39,630
work on this kind of cases but if we

64
00:03:35,769 --> 00:03:42,730
look into the other part like where the

65
00:03:39,630 --> 00:03:44,980
object where the code pointer gets the

66
00:03:42,730 --> 00:03:48,548
target value then we can find out that

67
00:03:44,980 --> 00:03:50,290
okay the assignment operation is inside

68
00:03:48,549 --> 00:03:53,320
the constructor function of execute on

69
00:03:50,290 --> 00:03:55,298
startup and this assignment the target

70
00:03:53,320 --> 00:03:58,209
is actually received by the argument

71
00:03:55,299 --> 00:04:01,000
passing from this constructor call sites

72
00:03:58,209 --> 00:04:03,190
so if we can connect those two

73
00:04:01,000 --> 00:04:05,530
information the origin and its own

74
00:04:03,190 --> 00:04:10,000
context then we can actually precisely

75
00:04:05,530 --> 00:04:13,209
find out which which object should call

76
00:04:10,000 --> 00:04:16,839
which target in this indirect call point

77
00:04:13,209 --> 00:04:19,570
inside the execute method so this is

78
00:04:16,839 --> 00:04:22,119
what we have called the origin

79
00:04:19,570 --> 00:04:23,889
Sensibility so for the virtual function

80
00:04:22,120 --> 00:04:26,740
called the OD insensitive means where

81
00:04:23,889 --> 00:04:28,900
the object is created that is actually

82
00:04:26,740 --> 00:04:31,479
the constructor function call for the

83
00:04:28,900 --> 00:04:34,630
seastar indirect call we have decided

84
00:04:31,479 --> 00:04:36,900
okay it should be the address taken code

85
00:04:34,630 --> 00:04:38,639
location of the code pointer

86
00:04:36,900 --> 00:04:41,969
but the problem with the sisterhood

87
00:04:38,639 --> 00:04:44,490
indirect call is that this assignment

88
00:04:41,970 --> 00:04:47,639
operation is not a single point it

89
00:04:44,490 --> 00:04:50,070
actually has multiple indirect in

90
00:04:47,639 --> 00:04:52,560
intermediate steps like in the right

91
00:04:50,070 --> 00:04:55,009
side code we can find out that okay the

92
00:04:52,560 --> 00:04:57,930
target is actually assigned by the quali

93
00:04:55,009 --> 00:05:02,009
function call but there are more

94
00:04:57,930 --> 00:05:04,940
intermediate statements inside the

95
00:05:02,009 --> 00:05:07,080
Khalif function like the argument

96
00:05:04,940 --> 00:05:09,000
argument to the temporary variables then

97
00:05:07,080 --> 00:05:12,419
there could be a assignment operation

98
00:05:09,000 --> 00:05:16,460
inside the local variable so we need to

99
00:05:12,419 --> 00:05:19,320
act if if we want to keep the origin

100
00:05:16,460 --> 00:05:22,169
that original definition of the origin

101
00:05:19,320 --> 00:05:26,729
then it will be a lot of overhead on the

102
00:05:22,169 --> 00:05:29,849
system so we decide to modify the

103
00:05:26,729 --> 00:05:32,550
definition for of the origin for the C

104
00:05:29,849 --> 00:05:34,560
style code pointer because the virtual

105
00:05:32,550 --> 00:05:37,020
function call it is fine we don't need

106
00:05:34,560 --> 00:05:39,300
to worry about this one for the system

107
00:05:37,020 --> 00:05:40,830
code matter we decide okay the origin

108
00:05:39,300 --> 00:05:44,520
will be the most recent assignment

109
00:05:40,830 --> 00:05:47,159
operation of the code pointer and we

110
00:05:44,520 --> 00:05:49,948
will replace the intermediate statements

111
00:05:47,160 --> 00:05:53,159
or the final stay the original state

112
00:05:49,949 --> 00:05:55,440
using the call size of this origin so

113
00:05:53,159 --> 00:05:58,349
here if we look into this example now we

114
00:05:55,440 --> 00:06:01,620
only have origin and origin context and

115
00:05:58,349 --> 00:06:06,289
we can identify the target of or that

116
00:06:01,620 --> 00:06:09,270
indirect or inside the colleague so

117
00:06:06,289 --> 00:06:11,180
before jumping to the next step we

118
00:06:09,270 --> 00:06:13,770
actually like to see okay how

119
00:06:11,180 --> 00:06:17,220
effectively it works so we actually

120
00:06:13,770 --> 00:06:20,609
generate the CFG using some dynamic

121
00:06:17,220 --> 00:06:23,610
method and we have found this result so

122
00:06:20,610 --> 00:06:27,720
we can see that it's works pretty much

123
00:06:23,610 --> 00:06:30,360
well for most of the benchmark there are

124
00:06:27,720 --> 00:06:32,880
some best math like four four five ago B

125
00:06:30,360 --> 00:06:35,520
and commands Mac that we we see that the

126
00:06:32,880 --> 00:06:37,860
largest exercise is not reduced the

127
00:06:35,520 --> 00:06:39,719
reason of for this one is that the

128
00:06:37,860 --> 00:06:42,479
global my benchmark on this in there

129
00:06:39,720 --> 00:06:46,440
called using a static function pointer

130
00:06:42,479 --> 00:06:49,289
array that is iterating over from this

131
00:06:46,440 --> 00:06:50,219
indirect call using an loop so there is

132
00:06:49,289 --> 00:06:54,650
actually no con

133
00:06:50,220 --> 00:06:59,100
it's no Origin because the array static

134
00:06:54,650 --> 00:07:01,650
so as far as we have found that okay the

135
00:06:59,100 --> 00:07:05,310
result is good for most of the benchmark

136
00:07:01,650 --> 00:07:07,340
we go to the we try to design a system

137
00:07:05,310 --> 00:07:12,620
using the origin Sensibility

138
00:07:07,340 --> 00:07:15,539
so the OS CFI actually focus on four

139
00:07:12,620 --> 00:07:17,910
issues depreciation security performance

140
00:07:15,540 --> 00:07:20,640
and competitive so competitively means

141
00:07:17,910 --> 00:07:26,370
we want to support both the C and C++

142
00:07:20,640 --> 00:07:28,500
objects so let's say if I policy

143
00:07:26,370 --> 00:07:32,130
actually use two different policies in

144
00:07:28,500 --> 00:07:34,140
this in as it is CFI policies the first

145
00:07:32,130 --> 00:07:35,909
one is a call sighs Sensibility the

146
00:07:34,140 --> 00:07:40,020
second one is the origin sensor that we

147
00:07:35,910 --> 00:07:42,870
are proposing here so we use that policy

148
00:07:40,020 --> 00:07:45,000
for an individual in the recall where it

149
00:07:42,870 --> 00:07:47,490
gets the better result with that policy

150
00:07:45,000 --> 00:07:49,560
so if the entire quality is better with

151
00:07:47,490 --> 00:07:51,600
which essentially it will use the origin

152
00:07:49,560 --> 00:07:56,490
separately so security guarantee is the

153
00:07:51,600 --> 00:07:59,220
first priority here so the if we look in

154
00:07:56,490 --> 00:08:00,900
we are not going through the causes

155
00:07:59,220 --> 00:08:03,570
centrally instrumentation part because

156
00:08:00,900 --> 00:08:05,940
it's already discussed in previous art

157
00:08:03,570 --> 00:08:07,830
so we actually focus on the origin

158
00:08:05,940 --> 00:08:11,910
Sensibility instrumentation so if we

159
00:08:07,830 --> 00:08:13,680
look into this part we have two

160
00:08:11,910 --> 00:08:17,790
difference to two different kind of

161
00:08:13,680 --> 00:08:20,460
store metadata trace function one is for

162
00:08:17,790 --> 00:08:23,040
the virtual call the other one is for

163
00:08:20,460 --> 00:08:25,200
the court pointed though so for the

164
00:08:23,040 --> 00:08:27,470
virtual wall we have the store metadata

165
00:08:25,200 --> 00:08:30,690
function call inside the constructor and

166
00:08:27,470 --> 00:08:33,870
the constructor and the origin location

167
00:08:30,690 --> 00:08:36,659
is assigned using a construction or

168
00:08:33,870 --> 00:08:38,370
construct appointed as same as the

169
00:08:36,659 --> 00:08:42,780
virtual pointer is passed with the

170
00:08:38,370 --> 00:08:45,030
constructor and it is the the data is

171
00:08:42,780 --> 00:08:47,400
stored into a table that we we will

172
00:08:45,030 --> 00:08:50,850
discuss about the table later for the

173
00:08:47,400 --> 00:08:53,010
for the C style function pointer it is

174
00:08:50,850 --> 00:08:54,690
just simply when there is a assignment

175
00:08:53,010 --> 00:08:58,020
to the function pointer we just update

176
00:08:54,690 --> 00:09:01,380
the table and at the indirect well point

177
00:08:58,020 --> 00:09:02,760
we just check okay what reference or

178
00:09:01,380 --> 00:09:06,030
what kind of

179
00:09:02,760 --> 00:09:08,520
fans motor will be used on that point on

180
00:09:06,030 --> 00:09:10,770
that quote in their car location and we

181
00:09:08,520 --> 00:09:16,590
will check using the verification

182
00:09:10,770 --> 00:09:20,550
mechanism on that point so the next

183
00:09:16,590 --> 00:09:25,050
issue is the CF generation so we use a

184
00:09:20,550 --> 00:09:27,540
static point to analysis method for the

185
00:09:25,050 --> 00:09:31,609
safe generation we use the su Pierre

186
00:09:27,540 --> 00:09:34,680
this is this is a published in FSC

187
00:09:31,610 --> 00:09:37,950
conference in 2016 I think so

188
00:09:34,680 --> 00:09:39,900
I forgot I'm sorry and this is actually

189
00:09:37,950 --> 00:09:42,150
an on-demand context flow and feel

190
00:09:39,900 --> 00:09:44,819
sensitive ponds to analysis that is

191
00:09:42,150 --> 00:09:49,319
actually based on a previous work that

192
00:09:44,820 --> 00:09:52,010
is s BF G so the SOP actually are

193
00:09:49,320 --> 00:09:54,840
traversing system over the s BFG

194
00:09:52,010 --> 00:09:58,080
definition use definition use chain

195
00:09:54,840 --> 00:10:00,780
rules and it travels into the rivers

196
00:09:58,080 --> 00:10:02,730
where like if there is an indirect call

197
00:10:00,780 --> 00:10:06,209
that is a sink and it will traverse

198
00:10:02,730 --> 00:10:09,840
through the for the definition use chain

199
00:10:06,210 --> 00:10:14,010
to find out origin or the source of the

200
00:10:09,840 --> 00:10:17,040
of this indirect call so we just use a

201
00:10:14,010 --> 00:10:18,900
piggyback system to actually just okay

202
00:10:17,040 --> 00:10:20,490
there is a traversing system we are

203
00:10:18,900 --> 00:10:23,010
going through this one and we will

204
00:10:20,490 --> 00:10:26,730
collect our information on this time so

205
00:10:23,010 --> 00:10:31,550
we don't have any like big contribution

206
00:10:26,730 --> 00:10:34,920
here but we trusted what they have done

207
00:10:31,550 --> 00:10:38,490
now the work

208
00:10:34,920 --> 00:10:41,099
SOP a is actually a it's actually really

209
00:10:38,490 --> 00:10:44,550
good it works really good it's scalable

210
00:10:41,100 --> 00:10:49,080
precise almost precise and it's publicly

211
00:10:44,550 --> 00:10:51,359
available and in the FS FSA conference

212
00:10:49,080 --> 00:10:54,960
it actually affiliated that effect is

213
00:10:51,360 --> 00:10:58,440
evaluated as platinum but still when we

214
00:10:54,960 --> 00:11:01,050
run the system with the spec benchmark

215
00:10:58,440 --> 00:11:05,640
we have found that a lot there are a lot

216
00:11:01,050 --> 00:11:08,339
of cases when the budget is like we have

217
00:11:05,640 --> 00:11:12,000
found the budget we have allocated for

218
00:11:08,340 --> 00:11:14,160
the static analysis is not enough for

219
00:11:12,000 --> 00:11:16,660
the dose spec benchmarks indirect calls

220
00:11:14,160 --> 00:11:19,449
or there are also some technique

221
00:11:16,660 --> 00:11:22,509
issues like pointer to member function

222
00:11:19,449 --> 00:11:25,810
is not handle so it returns an empty set

223
00:11:22,509 --> 00:11:30,339
for that for that indirect call so who

224
00:11:25,810 --> 00:11:34,768
we try to actually refined whatever data

225
00:11:30,339 --> 00:11:38,139
this the SOP system give us as zero and

226
00:11:34,769 --> 00:11:43,029
try to refined it like s mass possible

227
00:11:38,139 --> 00:11:45,459
expose as we can but we we want to show

228
00:11:43,029 --> 00:11:48,279
the result here because we want to show

229
00:11:45,459 --> 00:11:50,170
that the static point of analysis still

230
00:11:48,279 --> 00:11:52,449
need a lot of work to do

231
00:11:50,170 --> 00:11:54,430
although this is though this work is the

232
00:11:52,449 --> 00:11:59,019
best work in the static punch to

233
00:11:54,430 --> 00:12:04,660
analysis session still has a lot of

234
00:11:59,019 --> 00:12:06,339
issues okay now it's time to the okay we

235
00:12:04,660 --> 00:12:10,060
can talk about that table metadata

236
00:12:06,339 --> 00:12:12,129
tables are so we use Intel MPX we

237
00:12:10,060 --> 00:12:15,459
actually repurpose the uses of the

238
00:12:12,129 --> 00:12:19,870
impacts table so in the impacts table we

239
00:12:15,459 --> 00:12:22,359
have to give to a point to address the

240
00:12:19,870 --> 00:12:27,160
pointer address and what the pointer

241
00:12:22,360 --> 00:12:30,880
targets to and using these to address we

242
00:12:27,160 --> 00:12:34,060
can create a pair and we can have two

243
00:12:30,880 --> 00:12:36,279
different cells in the bounce table that

244
00:12:34,060 --> 00:12:38,349
is for actually that is actually for the

245
00:12:36,279 --> 00:12:39,639
like the stowing the boundary

246
00:12:38,350 --> 00:12:41,740
information like the lower bound and

247
00:12:39,639 --> 00:12:44,319
upper bound we use the lower bound upper

248
00:12:41,740 --> 00:12:47,019
bound to actually store the origin and

249
00:12:44,319 --> 00:12:49,329
origin context so we have we created up

250
00:12:47,019 --> 00:12:52,389
a pair for the pointer address and

251
00:12:49,329 --> 00:12:58,540
pointer target and we store the origin

252
00:12:52,389 --> 00:13:01,360
and origin context on that pair so if if

253
00:12:58,540 --> 00:13:04,569
someone if someone tries to actually a

254
00:13:01,360 --> 00:13:06,939
load a pointer with a wrong pointer

255
00:13:04,569 --> 00:13:09,699
address the load will be failed so that

256
00:13:06,939 --> 00:13:13,990
actually ensures us the code pointer

257
00:13:09,699 --> 00:13:15,969
integrity part and for the CFI part we

258
00:13:13,990 --> 00:13:20,199
have the reference move that actually

259
00:13:15,970 --> 00:13:23,709
enforce the policy on that on using this

260
00:13:20,199 --> 00:13:26,199
load information so there is also an

261
00:13:23,709 --> 00:13:28,989
issue with okay how we are going to

262
00:13:26,199 --> 00:13:30,490
maintain the integrity of those three

263
00:13:28,990 --> 00:13:33,250
things that matter

264
00:13:30,490 --> 00:13:38,680
the context and the reference model so

265
00:13:33,250 --> 00:13:43,560
Intel MPX already ensures a lot of the

266
00:13:38,680 --> 00:13:48,180
security of itself using dedicated

267
00:13:43,560 --> 00:13:51,489
registers and also it support the SLR so

268
00:13:48,180 --> 00:13:56,170
we trust on the stet system it's already

269
00:13:51,490 --> 00:13:58,930
proved by the Intel and for the context

270
00:13:56,170 --> 00:14:02,890
the context is actually the cause kostik

271
00:13:58,930 --> 00:14:05,920
and we don't have yet but intercity is

272
00:14:02,890 --> 00:14:09,670
going to be available very soon so we

273
00:14:05,920 --> 00:14:12,189
can use this intercity for the curve for

274
00:14:09,670 --> 00:14:15,189
the seeker caustic but at this moment we

275
00:14:12,190 --> 00:14:17,649
have used the safetech for our

276
00:14:15,190 --> 00:14:21,490
information and the result is based on

277
00:14:17,649 --> 00:14:25,750
Cystic the reference monitor is

278
00:14:21,490 --> 00:14:28,420
protected by the Intel TSX it's just we

279
00:14:25,750 --> 00:14:31,890
have ensured that the race condition

280
00:14:28,420 --> 00:14:36,130
will not be a cause for further

281
00:14:31,890 --> 00:14:38,800
enforcing mechanism so there is another

282
00:14:36,130 --> 00:14:41,470
issues because we our CFG is based on

283
00:14:38,800 --> 00:14:44,500
LLVM ir we have to convert there with

284
00:14:41,470 --> 00:14:49,660
him ir to the assembly or the target

285
00:14:44,500 --> 00:14:53,320
program language so we use level s value

286
00:14:49,660 --> 00:14:57,640
that actually we create our level where

287
00:14:53,320 --> 00:15:00,089
we need our context and and we collect

288
00:14:57,640 --> 00:15:03,779
those levels into an array and then

289
00:15:00,089 --> 00:15:07,500
assembler automatically converts those

290
00:15:03,779 --> 00:15:10,990
level ll v entire level to the

291
00:15:07,500 --> 00:15:13,930
instruction address so in this way we

292
00:15:10,990 --> 00:15:17,440
can support the ASL er which is better

293
00:15:13,930 --> 00:15:22,709
than the previous applied exam system

294
00:15:17,440 --> 00:15:26,310
like debug information or huge sticks so

295
00:15:22,709 --> 00:15:29,050
in our evolution we focus on

296
00:15:26,310 --> 00:15:34,180
improvements and our and some

297
00:15:29,050 --> 00:15:37,810
experiments so if we just filter out the

298
00:15:34,180 --> 00:15:39,839
cases of the failing cases for from the

299
00:15:37,810 --> 00:15:43,719
straight punches we can see there are

300
00:15:39,839 --> 00:15:47,560
good improvement like 60%

301
00:15:43,720 --> 00:15:49,329
larger size reduction and if we count

302
00:15:47,560 --> 00:15:51,819
all of them the failing case then we can

303
00:15:49,329 --> 00:15:54,489
see that the improvement actually goes

304
00:15:51,819 --> 00:15:56,139
out of sight so that problem is not the

305
00:15:54,490 --> 00:16:00,459
policy the problem is actually the

306
00:15:56,139 --> 00:16:02,800
steady posture analysis system for the

307
00:16:00,459 --> 00:16:05,229
case study there there is a case study

308
00:16:02,800 --> 00:16:08,769
for the virtual called case in the left

309
00:16:05,230 --> 00:16:11,079
side because we are already time out of

310
00:16:08,769 --> 00:16:11,350
time so I'm just skipping this one right

311
00:16:11,079 --> 00:16:13,959
now

312
00:16:11,350 --> 00:16:16,540
so this is one of the problem that we

313
00:16:13,959 --> 00:16:19,180
cannot solve using either the conscious

314
00:16:16,540 --> 00:16:21,519
entry or path sensory or the audience

315
00:16:19,180 --> 00:16:25,180
sensitive because a static area does not

316
00:16:21,519 --> 00:16:28,689
have any of those connected information

317
00:16:25,180 --> 00:16:31,719
and we have this sentence interest

318
00:16:28,689 --> 00:16:34,420
exploitation example here where we

319
00:16:31,720 --> 00:16:37,600
actually shows that we actually need

320
00:16:34,420 --> 00:16:41,259
both the pointer integrity and also the

321
00:16:37,600 --> 00:16:44,949
CFI system for any program we cannot

322
00:16:41,259 --> 00:16:48,670
actually use one of them and not another

323
00:16:44,949 --> 00:16:53,620
we need to use both of them for the

324
00:16:48,670 --> 00:16:55,509
performance we have shown that using if

325
00:16:53,620 --> 00:16:58,809
we don't use the Intel TSS the

326
00:16:55,509 --> 00:17:00,309
performance overhead is 7.1% and if we

327
00:16:58,809 --> 00:17:03,279
use the inter TSS the performance

328
00:17:00,309 --> 00:17:05,230
abilities 7.6% so it's pretty much good

329
00:17:03,279 --> 00:17:08,650
and the CFG generation has like I was

330
00:17:05,230 --> 00:17:10,569
almost like 5% over it I am NOT going

331
00:17:08,650 --> 00:17:13,120
through that yet at work so just make

332
00:17:10,569 --> 00:17:15,459
the completion here so we present oil

333
00:17:13,119 --> 00:17:18,129
insensitivity as a new context and study

334
00:17:15,459 --> 00:17:21,610
for the CFS system we have repurposed

335
00:17:18,130 --> 00:17:23,829
the Intel MPX for the tracing mechanism

336
00:17:21,609 --> 00:17:25,990
and we have shown that the static

337
00:17:23,829 --> 00:17:29,770
constrain analysis system need more work

338
00:17:25,990 --> 00:17:32,130
and more focus to actually be applicable

339
00:17:29,770 --> 00:17:35,020
into the complex system or DLL system

340
00:17:32,130 --> 00:17:36,520
now so squares available here and the

341
00:17:35,020 --> 00:17:38,610
previous word will be available here

342
00:17:36,520 --> 00:17:44,668
thank you

343
00:17:38,610 --> 00:17:52,689
[Applause]

344
00:17:44,669 --> 00:17:54,400
questions John Chris Allen University of

345
00:17:52,690 --> 00:17:57,070
Rochester so I'm a little bit confused

346
00:17:54,400 --> 00:17:58,809
about your your metric for measuring

347
00:17:57,070 --> 00:18:01,210
improvement if I understand correctly

348
00:17:58,809 --> 00:18:03,520
you're measuring equivalence classes in

349
00:18:01,210 --> 00:18:05,770
which like a set of a set of targets are

350
00:18:03,520 --> 00:18:09,010
in the same equivalence yeah that quote

351
00:18:05,770 --> 00:18:10,418
the quantity security guaranteed

352
00:18:09,010 --> 00:18:12,789
calculator is based on a virus

353
00:18:10,419 --> 00:18:14,830
equivalent classes multiplied by the

354
00:18:12,789 --> 00:18:17,980
largest like the O's case of the

355
00:18:14,830 --> 00:18:19,570
equivalence classes okay so so it's kind

356
00:18:17,980 --> 00:18:21,100
of its kind of like the air metric but

357
00:18:19,570 --> 00:18:22,899
you're measuring equivalence classes as

358
00:18:21,100 --> 00:18:25,000
opposed to number of targets eliminated

359
00:18:22,900 --> 00:18:28,360
the so the equivalent class actually

360
00:18:25,000 --> 00:18:31,840
shows you that okay if for these

361
00:18:28,360 --> 00:18:34,270
indirect Coyle point what is the size of

362
00:18:31,840 --> 00:18:35,740
the target right the number the number

363
00:18:34,270 --> 00:18:38,260
of targets that you can have for a

364
00:18:35,740 --> 00:18:40,659
particular indirect call site yes so if

365
00:18:38,260 --> 00:18:42,190
we have a lower number we have a better

366
00:18:40,659 --> 00:18:44,049
security grant on that index called

367
00:18:42,190 --> 00:18:47,770
point okay so that's that's like my

368
00:18:44,049 --> 00:18:49,900
little gripe there right so yes you're

369
00:18:47,770 --> 00:18:51,908
reducing the number of targets but I

370
00:18:49,900 --> 00:18:53,440
think something else that would be

371
00:18:51,909 --> 00:18:55,090
helpful to include in a metric if

372
00:18:53,440 --> 00:18:56,799
possible and this is like an open

373
00:18:55,090 --> 00:19:00,428
problem so it's not a really criticism

374
00:18:56,799 --> 00:19:03,158
right but is how dangerous those targets

375
00:19:00,429 --> 00:19:05,200
actually are right so some targets may

376
00:19:03,159 --> 00:19:07,809
be completely useless for an attacker

377
00:19:05,200 --> 00:19:10,299
and others may be so if you if you

378
00:19:07,809 --> 00:19:13,590
consider that cases of the motivation

379
00:19:10,299 --> 00:19:15,879
cases we have shown so it actually them

380
00:19:13,590 --> 00:19:18,970
this is actually a knife only tab is a

381
00:19:15,880 --> 00:19:22,419
network based system so those indirect

382
00:19:18,970 --> 00:19:25,620
call actually indicates like actually

383
00:19:22,419 --> 00:19:28,390
decides what will happen after

384
00:19:25,620 --> 00:19:32,049
assignment like this network will

385
00:19:28,390 --> 00:19:33,909
execute those code locations so this is

386
00:19:32,049 --> 00:19:36,039
actually really our important part

387
00:19:33,909 --> 00:19:38,230
because if you consider if there is a

388
00:19:36,039 --> 00:19:40,600
small network then actually try to

389
00:19:38,230 --> 00:19:43,330
execute for a large network that is a

390
00:19:40,600 --> 00:19:45,309
really big problem because that's

391
00:19:43,330 --> 00:19:48,850
actually change everything a problem

392
00:19:45,309 --> 00:19:53,270
maybe we should share offline okay thank

393
00:19:48,850 --> 00:19:58,139
you okay let's think I'm stuck in Oregon

394
00:19:53,270 --> 00:19:58,139
[Applause]

