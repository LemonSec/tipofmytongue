1
00:00:10,450 --> 00:00:17,630
I thank for the introduction

2
00:00:14,870 --> 00:00:20,869
to my presentation about our work and

3
00:00:17,630 --> 00:00:23,410
defying chi cash-based side channels

4
00:00:20,869 --> 00:00:26,540
through secret men didn't have

5
00:00:23,410 --> 00:00:30,439
fragmentation so this is a joint work

6
00:00:26,540 --> 00:00:32,479
with Sri Wang Jian Bao shall rue Dan

7
00:00:30,439 --> 00:00:35,150
from John and ding ha woo

8
00:00:32,479 --> 00:00:38,870
the majority of the work was done when

9
00:00:35,150 --> 00:00:43,610
the others were working for Pennsylvania

10
00:00:38,870 --> 00:00:46,190
State University so I think everyone is

11
00:00:43,610 --> 00:00:49,040
room are familiar with side channels

12
00:00:46,190 --> 00:00:51,649
right so the sine channels talked about

13
00:00:49,040 --> 00:00:55,010
in this presentation is about attackers

14
00:00:51,649 --> 00:00:57,649
inferring seekers were secretly

15
00:00:55,010 --> 00:01:01,070
dependent physical information without

16
00:00:57,649 --> 00:01:03,500
direct access to the computer systems so

17
00:01:01,070 --> 00:01:06,170
by offering when you have different

18
00:01:03,500 --> 00:01:08,440
values for the secrets you may have

19
00:01:06,170 --> 00:01:12,440
different like actual execution time

20
00:01:08,440 --> 00:01:16,100
power consumption yeah emissions sound

21
00:01:12,440 --> 00:01:20,920
lighting heat and one of the most

22
00:01:16,100 --> 00:01:25,810
infamous HNO is resizing the computer

23
00:01:20,920 --> 00:01:29,660
components like the microprocessor cash

24
00:01:25,810 --> 00:01:32,619
so cash basis I channels are existing

25
00:01:29,660 --> 00:01:34,369
from it because we have a hierarchical

26
00:01:32,619 --> 00:01:37,700
memory system

27
00:01:34,369 --> 00:01:41,060
so besides in addition to the slow high

28
00:01:37,700 --> 00:01:46,429
capacity main memory which is better

29
00:01:41,060 --> 00:01:49,700
saturated we have a shared low fast on

30
00:01:46,429 --> 00:01:52,970
chip but low capacity storage called

31
00:01:49,700 --> 00:01:55,550
cache so previous research has shown

32
00:01:52,970 --> 00:01:56,479
that this shared cache are can be param

33
00:01:55,550 --> 00:01:59,750
attic

34
00:01:56,479 --> 00:02:02,390
they leak information like center vm

35
00:01:59,750 --> 00:02:04,550
really like a crypto keys and those

36
00:02:02,390 --> 00:02:06,890
attacks are extremely penetrating

37
00:02:04,550 --> 00:02:10,489
because they are across vm they can be

38
00:02:06,890 --> 00:02:13,730
cross core and they are they affect most

39
00:02:10,489 --> 00:02:17,630
mainstream architectures Intel AMD and

40
00:02:13,730 --> 00:02:20,329
arm and so the infamous CPU of our

41
00:02:17,630 --> 00:02:22,769
buildings cut specter and Melton are

42
00:02:20,330 --> 00:02:32,190
somehow related to the

43
00:02:22,770 --> 00:02:35,280
cash basis i channels okay so the basics

44
00:02:32,190 --> 00:02:39,810
of the cash minimum storage units of

45
00:02:35,280 --> 00:02:45,180
cash is cash line so typically it's 40

46
00:02:39,810 --> 00:02:50,160
as a 64-byte storage unit in hardware so

47
00:02:45,180 --> 00:02:53,370
when you have when you have a memory

48
00:02:50,160 --> 00:02:57,090
lookup operation in the in your in your

49
00:02:53,370 --> 00:02:59,310
code you get address and simply speaking

50
00:02:57,090 --> 00:03:02,010
the higher bits of this address

51
00:02:59,310 --> 00:03:11,280
determines which cache line you're going

52
00:03:02,010 --> 00:03:14,000
to access for this operation okay so in

53
00:03:11,280 --> 00:03:16,830
our work we assume such a threat model

54
00:03:14,000 --> 00:03:18,690
the victim process and the militia

55
00:03:16,830 --> 00:03:21,750
process are living on the same physical

56
00:03:18,690 --> 00:03:25,680
CPU chip and they are sharing certain

57
00:03:21,750 --> 00:03:28,490
level of cache and the attackers can

58
00:03:25,680 --> 00:03:31,050
learn victims cache line access patterns

59
00:03:28,490 --> 00:03:33,870
with some well established cache

60
00:03:31,050 --> 00:03:38,460
sniffing techniques like prime probe and

61
00:03:33,870 --> 00:03:41,100
flush row so within this threat model

62
00:03:38,460 --> 00:03:47,040
how does the attacker learn your secrets

63
00:03:41,100 --> 00:03:50,010
so consider this example you have a

64
00:03:47,040 --> 00:03:53,400
secret called K and use this secret to

65
00:03:50,010 --> 00:03:55,530
directly access some memory table then

66
00:03:53,400 --> 00:03:58,950
you have different memory access address

67
00:03:55,530 --> 00:04:02,520
and you end up with accessing different

68
00:03:58,950 --> 00:04:04,829
lines of the cache so and there our

69
00:04:02,520 --> 00:04:08,430
threat model attackers can learn this

70
00:04:04,830 --> 00:04:10,770
and he can learn at least one bit

71
00:04:08,430 --> 00:04:14,130
information leakage if you're different

72
00:04:10,770 --> 00:04:18,930
secrets can lead to different cache

73
00:04:14,130 --> 00:04:21,779
access lines so we want to detect this

74
00:04:18,930 --> 00:04:24,060
kind of possible leakage potential

75
00:04:21,779 --> 00:04:29,510
leakage in your code especially in your

76
00:04:24,060 --> 00:04:34,500
binary code so so here we proposed a

77
00:04:29,510 --> 00:04:36,209
two-step approach to detect this cache

78
00:04:34,500 --> 00:04:37,889
based side channels

79
00:04:36,209 --> 00:04:41,459
because there's this to consider this

80
00:04:37,889 --> 00:04:43,529
operation so our first step is to model

81
00:04:41,459 --> 00:04:47,819
secret a secret dependent information

82
00:04:43,529 --> 00:04:52,610
flow we describe cash access patterns

83
00:04:47,819 --> 00:04:56,069
with SMT / secret and non secret values

84
00:04:52,610 --> 00:04:58,099
and then in the second step we check the

85
00:04:56,069 --> 00:05:01,319
side channels by solving certain

86
00:04:58,099 --> 00:05:04,619
constraints and if there's a solution to

87
00:05:01,319 --> 00:05:08,809
this concern that means there is a

88
00:05:04,619 --> 00:05:12,209
potential information leakage okay so

89
00:05:08,809 --> 00:05:14,489
more details for the how we construct

90
00:05:12,209 --> 00:05:17,999
this constraint so still consider this

91
00:05:14,489 --> 00:05:21,568
example we construct a formula to

92
00:05:17,999 --> 00:05:23,159
describe the memory address the ratio

93
00:05:21,569 --> 00:05:25,860
between the access address and the

94
00:05:23,159 --> 00:05:29,188
secret so in this simple simple example

95
00:05:25,860 --> 00:05:32,969
if you assume the base address of the

96
00:05:29,189 --> 00:05:36,689
table a is 84 and the size of an almond

97
00:05:32,969 --> 00:05:40,498
is 4 then this map K function describes

98
00:05:36,689 --> 00:05:43,709
the is a mapping from your secret from

99
00:05:40,499 --> 00:05:46,800
to the address memory access address

100
00:05:43,709 --> 00:05:51,919
then it's gonna be 84 plus 4 multiplying

101
00:05:46,800 --> 00:05:56,159
K okay then we get this function we

102
00:05:51,919 --> 00:05:59,729
perform a alpha conversion we replace

103
00:05:56,159 --> 00:06:04,289
the name of K with K prime then we get 2

104
00:05:59,729 --> 00:06:08,159
similarly looking formulas so what we do

105
00:06:04,289 --> 00:06:11,808
next is we construct this constraint so

106
00:06:08,159 --> 00:06:14,489
mam K not equal mam K Prime so

107
00:06:11,809 --> 00:06:17,309
intuitively I mean this country means

108
00:06:14,489 --> 00:06:19,709
that if this you can find a solution to

109
00:06:17,309 --> 00:06:22,259
this constraint that means you have you

110
00:06:19,709 --> 00:06:24,869
can find two different secret values

111
00:06:22,259 --> 00:06:29,339
that can lead to different memory access

112
00:06:24,869 --> 00:06:31,529
locations but yes we are not only

113
00:06:29,339 --> 00:06:35,459
looking at memory access we are looking

114
00:06:31,529 --> 00:06:40,429
at cache access so recall that the lower

115
00:06:35,459 --> 00:06:44,969
L bits of the address is irrelevant to

116
00:06:40,429 --> 00:06:46,299
catch my act as parents where L is the

117
00:06:44,969 --> 00:06:49,090
logarithm of the

118
00:06:46,300 --> 00:06:53,500
cache line size so with simply discard

119
00:06:49,090 --> 00:06:56,080
the lower L bits by making a right shift

120
00:06:53,500 --> 00:07:00,520
which is friendly to the constraint

121
00:06:56,080 --> 00:07:01,740
solver so if this newly constructed

122
00:07:00,520 --> 00:07:05,130
strain is solvable

123
00:07:01,740 --> 00:07:08,110
that would mean you get a potential

124
00:07:05,130 --> 00:07:11,800
information leakage which is dependent

125
00:07:08,110 --> 00:07:14,789
on the your secret value okay and if

126
00:07:11,800 --> 00:07:17,949
it's not solvable that would mean this

127
00:07:14,789 --> 00:07:23,320
memory operation is independent from K

128
00:07:17,949 --> 00:07:25,419
which means it's going to be safe okay

129
00:07:23,320 --> 00:07:28,449
so back to the first step how do we

130
00:07:25,419 --> 00:07:30,849
exactly construct the memory access

131
00:07:28,449 --> 00:07:34,389
formula for all memory operations in

132
00:07:30,849 --> 00:07:36,669
binary our previous work president two

133
00:07:34,389 --> 00:07:39,690
years ago in the same venue we are using

134
00:07:36,669 --> 00:07:43,389
a trace based Nasus so basically we

135
00:07:39,690 --> 00:07:46,270
execute your program and get a binary

136
00:07:43,389 --> 00:07:48,370
trace and we perform simbari execution

137
00:07:46,270 --> 00:07:51,599
over this trace so we can get a very

138
00:07:48,370 --> 00:07:55,240
precise construction of the formula

139
00:07:51,599 --> 00:07:57,880
however this will have a limitation that

140
00:07:55,240 --> 00:08:04,060
you won't be able to cover your whole

141
00:07:57,880 --> 00:08:07,120
program and so we're we're trans in this

142
00:08:04,060 --> 00:08:08,979
work we are transient enemy approach to

143
00:08:07,120 --> 00:08:11,560
a static approach such that we can use

144
00:08:08,979 --> 00:08:14,229
that analysis to cover the entire

145
00:08:11,560 --> 00:08:21,250
program to cover the all possible

146
00:08:14,229 --> 00:08:23,650
program execution States so our static

147
00:08:21,250 --> 00:08:26,620
analysis relies on the abstract

148
00:08:23,650 --> 00:08:30,719
interpretation technique basically if

149
00:08:26,620 --> 00:08:33,250
you are doing analysis over concrete

150
00:08:30,719 --> 00:08:36,458
program States that's going to be very

151
00:08:33,250 --> 00:08:39,190
complicated and it's very hard to verify

152
00:08:36,458 --> 00:08:42,309
certain security security priorities

153
00:08:39,190 --> 00:08:45,490
over concrete States so what what

154
00:08:42,309 --> 00:08:49,829
abstract interpreting do is it lives

155
00:08:45,490 --> 00:08:52,600
your concrete program States into a

156
00:08:49,829 --> 00:08:55,390
simplified abstract domain and then

157
00:08:52,600 --> 00:08:58,320
perform an analysis over this simplified

158
00:08:55,390 --> 00:09:01,550
domain and finally we can

159
00:08:58,320 --> 00:09:05,640
verify the approximation of the original

160
00:09:01,550 --> 00:09:07,199
security property so this is this has

161
00:09:05,640 --> 00:09:12,330
been proved to be a scalable approach

162
00:09:07,200 --> 00:09:14,940
over production software okay so how

163
00:09:12,330 --> 00:09:18,390
exactly we do we combine after

164
00:09:14,940 --> 00:09:22,140
interpretation with bollix execution the

165
00:09:18,390 --> 00:09:25,199
naive approach would be tracking all the

166
00:09:22,140 --> 00:09:28,350
formulas all the concerns over over the

167
00:09:25,200 --> 00:09:31,020
past over the CFG and record every

168
00:09:28,350 --> 00:09:33,570
possible information that's precise as

169
00:09:31,020 --> 00:09:37,500
possible and I think you can imagine

170
00:09:33,570 --> 00:09:40,770
this would be problematic mainly due to

171
00:09:37,500 --> 00:09:42,870
the scalability issue since symbolic

172
00:09:40,770 --> 00:09:46,020
formers will just keep growing and

173
00:09:42,870 --> 00:09:49,860
values at verbose on the stack and heap

174
00:09:46,020 --> 00:09:55,079
will keep growing we have a tentative

175
00:09:49,860 --> 00:09:59,670
test for this naive method OpenSSL

176
00:09:55,080 --> 00:10:03,810
it's RSA algorithm way - it takes us

177
00:09:59,670 --> 00:10:06,030
days and over 100 gigabyte memory to do

178
00:10:03,810 --> 00:10:08,729
this and asses but it's you can't finish

179
00:10:06,030 --> 00:10:13,560
so clearly where we need to look for

180
00:10:08,730 --> 00:10:17,430
other opportunities for optimization so

181
00:10:13,560 --> 00:10:20,520
here we we have two observations during

182
00:10:17,430 --> 00:10:23,219
our exploration so first variables of

183
00:10:20,520 --> 00:10:26,189
the seeker is really only activated at a

184
00:10:23,220 --> 00:10:28,080
very small portion of the program which

185
00:10:26,190 --> 00:10:30,270
means that the majority of the program

186
00:10:28,080 --> 00:10:32,190
states are actually irrelevant to what

187
00:10:30,270 --> 00:10:34,620
we are looking at we are only caring

188
00:10:32,190 --> 00:10:38,220
about the secrets and the second

189
00:10:34,620 --> 00:10:42,480
observation at each program point so

190
00:10:38,220 --> 00:10:45,000
only a very few variables actually carry

191
00:10:42,480 --> 00:10:47,820
the secret so this case gives us

192
00:10:45,000 --> 00:10:51,140
opportunities for optimization so what

193
00:10:47,820 --> 00:10:54,410
we do is way further - further

194
00:10:51,140 --> 00:10:57,120
abstraction are those non secret value

195
00:10:54,410 --> 00:11:00,980
information so we can see here in the

196
00:10:57,120 --> 00:11:03,960
memory memory store we got several

197
00:11:00,980 --> 00:11:07,320
memory locations which are irrelevant to

198
00:11:03,960 --> 00:11:11,000
the secret key so what we do we just

199
00:11:07,320 --> 00:11:14,180
discard the details about these that

200
00:11:11,000 --> 00:11:16,550
we forgot about what they actually how

201
00:11:14,180 --> 00:11:20,719
they actually are computed and we just

202
00:11:16,550 --> 00:11:23,870
mark them represent with unified symbol

203
00:11:20,720 --> 00:11:27,790
called P but we will keep track of the

204
00:11:23,870 --> 00:11:32,779
secret values as much details as we can

205
00:11:27,790 --> 00:11:35,709
so then we end up getting a attractive

206
00:11:32,779 --> 00:11:38,839
man with four components we have a

207
00:11:35,709 --> 00:11:40,849
unified symbol P for public information

208
00:11:38,839 --> 00:11:44,360
and we have a detailed symbol

209
00:11:40,850 --> 00:11:47,089
civilization for the secret values and

210
00:11:44,360 --> 00:11:50,269
then we need to model the stack pointer

211
00:11:47,089 --> 00:11:52,220
because we are doing a interprocedural

212
00:11:50,269 --> 00:11:54,050
analysis this helps us to track

213
00:11:52,220 --> 00:11:56,899
information over the function called

214
00:11:54,050 --> 00:12:01,060
boundaries and of course where we need

215
00:11:56,899 --> 00:12:05,180
to be precise about the numeric values

216
00:12:01,060 --> 00:12:07,670
okay so the details about how we

217
00:12:05,180 --> 00:12:10,399
construct the abstract domain and how we

218
00:12:07,670 --> 00:12:13,370
do after interpretation can be found in

219
00:12:10,399 --> 00:12:16,279
the paper and together with the sound

220
00:12:13,370 --> 00:12:20,930
sound is proof but the key message here

221
00:12:16,279 --> 00:12:23,540
I want to deliver it that our improved

222
00:12:20,930 --> 00:12:25,878
method augment secret augmented abstract

223
00:12:23,540 --> 00:12:29,329
domain is able to scalably

224
00:12:25,879 --> 00:12:33,290
model production software with over 80

225
00:12:29,329 --> 00:12:36,258
Cal instructions and the results are

226
00:12:33,290 --> 00:12:38,029
very satisfying we discard certain

227
00:12:36,259 --> 00:12:43,000
information about the public and public

228
00:12:38,029 --> 00:12:45,800
values still we preserve precise enough

229
00:12:43,000 --> 00:12:51,800
secret value information to identify

230
00:12:45,800 --> 00:12:54,199
those side channels ok evaluation we

231
00:12:51,800 --> 00:12:58,219
have performed we have tried our tools

232
00:12:54,199 --> 00:13:01,819
on those why they use crypto systems a

233
00:12:58,220 --> 00:13:05,120
total of five of them and the results

234
00:13:01,819 --> 00:13:08,240
that we in this early version of Lib

235
00:13:05,120 --> 00:13:12,110
decrypt we discover some previous known

236
00:13:08,240 --> 00:13:14,990
run of babies and then for the other

237
00:13:12,110 --> 00:13:19,040
three systems we discovered previously

238
00:13:14,990 --> 00:13:21,350
unknown vulnerabilities and for the last

239
00:13:19,040 --> 00:13:25,370
one for this later

240
00:13:21,350 --> 00:13:30,080
version of Liberty crib we found is it's

241
00:13:25,370 --> 00:13:33,710
safe within our threat model okay so to

242
00:13:30,080 --> 00:13:39,010
actually verify the results of the

243
00:13:33,710 --> 00:13:42,850
static analysis we also did a simulation

244
00:13:39,010 --> 00:13:46,150
for one of our cases so we build up a

245
00:13:42,850 --> 00:13:49,720
simulation simulator based on gem 5

246
00:13:46,150 --> 00:13:53,030
configure two-level caches and then

247
00:13:49,720 --> 00:13:54,380
because our work our approach that pays

248
00:13:53,030 --> 00:13:57,650
down Sindbad execution we can actually

249
00:13:54,380 --> 00:14:01,910
find a counter example or concrete

250
00:13:57,650 --> 00:14:05,689
values to demonstrate the the leakage so

251
00:14:01,910 --> 00:14:08,719
we send the values to the simulator and

252
00:14:05,690 --> 00:14:12,380
gather results we had found that all the

253
00:14:08,720 --> 00:14:15,050
cache lon access variants are are really

254
00:14:12,380 --> 00:14:19,760
there based on the results of simulator

255
00:14:15,050 --> 00:14:22,189
and more interestingly we find this this

256
00:14:19,760 --> 00:14:25,270
in this case this leakage case you can

257
00:14:22,190 --> 00:14:28,460
actually get more of zero information

258
00:14:25,270 --> 00:14:30,140
because these two different secret

259
00:14:28,460 --> 00:14:35,540
values leave it to different cache

260
00:14:30,140 --> 00:14:37,460
States the hit miss patterns this is not

261
00:14:35,540 --> 00:14:43,370
directly read to our threat model but

262
00:14:37,460 --> 00:14:46,160
it's still very important result okay so

263
00:14:43,370 --> 00:14:49,580
the our findings are reported to the

264
00:14:46,160 --> 00:14:52,370
developers some of them are confirmed

265
00:14:49,580 --> 00:14:56,360
and patched and the others turns out to

266
00:14:52,370 --> 00:14:57,950
be not really exploitable because there

267
00:14:56,360 --> 00:15:02,150
are some other countermeasures already

268
00:14:57,950 --> 00:15:05,030
deployed like the RSA blinding to

269
00:15:02,150 --> 00:15:09,140
randomize the exponent of the of the

270
00:15:05,030 --> 00:15:12,170
secrets and then the others are turns

271
00:15:09,140 --> 00:15:16,189
out to be to be safe

272
00:15:12,170 --> 00:15:21,920
then this also is cross validated with

273
00:15:16,190 --> 00:15:25,150
our research work yeah I think that's

274
00:15:21,920 --> 00:15:25,150
all I have for today

275
00:15:26,000 --> 00:15:30,000
[Applause]

276
00:15:30,100 --> 00:15:34,220
okay thank you very much for the nice

277
00:15:32,150 --> 00:15:36,920
talk so are there any questions please

278
00:15:34,220 --> 00:15:39,740
hi hey thank you very much um I heard so

279
00:15:36,920 --> 00:15:43,510
from UConn it's so very interesting I

280
00:15:39,740 --> 00:15:47,270
just want to confirm so when you do this

281
00:15:43,510 --> 00:15:50,089
evaluation what is the secret variables

282
00:15:47,270 --> 00:15:52,520
of private information the key bits are

283
00:15:50,089 --> 00:15:54,860
obviously used also to compute stuff on

284
00:15:52,520 --> 00:15:57,050
the ciphertext plaintext right so these

285
00:15:54,860 --> 00:16:00,860
are also probably kind of tainted right

286
00:15:57,050 --> 00:16:03,620
so this all of that becomes tainted but

287
00:16:00,860 --> 00:16:08,180
it just still is not too much variables

288
00:16:03,620 --> 00:16:11,330
am i correct oh so yeah I mean seekers

289
00:16:08,180 --> 00:16:13,459
must be used for the computation but in

290
00:16:11,330 --> 00:16:16,040
certain cases ivar software is well

291
00:16:13,460 --> 00:16:18,589
designed you are using the secrets but

292
00:16:16,040 --> 00:16:21,050
they don't leave 2 different memory

293
00:16:18,589 --> 00:16:23,270
access patterns they don't leave but

294
00:16:21,050 --> 00:16:25,130
they are influencing some parts of the

295
00:16:23,270 --> 00:16:27,380
storage of the variables right the

296
00:16:25,130 --> 00:16:29,779
influences plaintext and they are using

297
00:16:27,380 --> 00:16:31,790
the computation of plenty and size of

298
00:16:29,779 --> 00:16:33,950
text right Emma cool because they could

299
00:16:31,790 --> 00:16:37,219
also be used for the key scheduling and

300
00:16:33,950 --> 00:16:39,800
stuff so if you only look at the secret

301
00:16:37,220 --> 00:16:41,510
information and noted the impact of

302
00:16:39,800 --> 00:16:44,000
computation using the secret information

303
00:16:41,510 --> 00:16:45,800
then you could still have leakage for

304
00:16:44,000 --> 00:16:48,320
example when you have key scheduling so

305
00:16:45,800 --> 00:16:50,479
I was assuming that when you talk about

306
00:16:48,320 --> 00:16:53,570
the secret information private

307
00:16:50,480 --> 00:16:55,910
information you also consider anything

308
00:16:53,570 --> 00:16:57,740
which is computing using it which would

309
00:16:55,910 --> 00:16:59,870
include you know cypher text plain text

310
00:16:57,740 --> 00:17:01,790
and so on and when you said it's not too

311
00:16:59,870 --> 00:17:04,099
much you included all of that and not

312
00:17:01,790 --> 00:17:07,159
just the real keys because probably you

313
00:17:04,099 --> 00:17:09,649
cannot differentiate could you I mean if

314
00:17:07,160 --> 00:17:11,839
you compare with those tangent values

315
00:17:09,650 --> 00:17:15,380
with the entire program stays it's not

316
00:17:11,839 --> 00:17:17,599
too much but still I mean if you just

317
00:17:15,380 --> 00:17:19,550
look at it it's gonna be very a lot of

318
00:17:17,599 --> 00:17:22,030
information yes so that's exactly what

319
00:17:19,550 --> 00:17:24,349
I'm asking so did you do when you say

320
00:17:22,030 --> 00:17:26,780
what what are you doing that's what I'm

321
00:17:24,349 --> 00:17:29,090
asking do you look only its original

322
00:17:26,780 --> 00:17:30,710
secret information found original way no

323
00:17:29,090 --> 00:17:33,709
you also look at the only facts for

324
00:17:30,710 --> 00:17:36,140
example public cipher text analytics

325
00:17:33,710 --> 00:17:38,970
okay great yes it's just this is still

326
00:17:36,140 --> 00:17:41,429
not too much right great

327
00:17:38,970 --> 00:17:44,820
okay just one small addition cut how do

328
00:17:41,429 --> 00:17:46,740
you actually identify that the private

329
00:17:44,820 --> 00:17:48,030
kids initially if a simple food problem

330
00:17:46,740 --> 00:17:50,010
is it's a manual process

331
00:17:48,030 --> 00:17:55,590
yeah that part has to be managed great

332
00:17:50,010 --> 00:17:57,840
thank you thank you that was very

333
00:17:55,590 --> 00:17:58,980
interesting I mean I noticed at the end

334
00:17:57,840 --> 00:18:00,418
that you reviewed it you look at a

335
00:17:58,980 --> 00:18:02,549
couple of standard cryptographic

336
00:18:00,419 --> 00:18:05,280
libraries there is at least one more out

337
00:18:02,549 --> 00:18:06,870
there the NaCl library which has been

338
00:18:05,280 --> 00:18:08,700
explicitly designed to avoid these types

339
00:18:06,870 --> 00:18:10,620
of vulnerabilities I wonder if you've

340
00:18:08,700 --> 00:18:14,280
looked at that one or considered looking

341
00:18:10,620 --> 00:18:18,780
at it so the best of my knowledge we

342
00:18:14,280 --> 00:18:21,539
didn't look at that but we do encounter

343
00:18:18,780 --> 00:18:23,639
some cases you measure you in some of

344
00:18:21,539 --> 00:18:25,470
those kids we have to be honest we have

345
00:18:23,640 --> 00:18:28,590
this is standing analysis we have false

346
00:18:25,470 --> 00:18:31,620
alarms and in some of our first alarms

347
00:18:28,590 --> 00:18:33,689
false positives we found that people are

348
00:18:31,620 --> 00:18:37,770
using those kind of techniques to avoid

349
00:18:33,690 --> 00:18:40,159
those leakage like scatter and gathering

350
00:18:37,770 --> 00:18:42,570
result in the techniques and

351
00:18:40,159 --> 00:18:45,600
pre-computer tables pre-loading tables

352
00:18:42,570 --> 00:18:48,990
they are all using those tricks to to

353
00:18:45,600 --> 00:18:51,408
avoid those so I don't know the details

354
00:18:48,990 --> 00:18:53,850
about the project you mentioned but

355
00:18:51,409 --> 00:18:57,740
certainly part of those project whipped

356
00:18:53,850 --> 00:19:02,549
asses are considering these problems

357
00:18:57,740 --> 00:19:04,890
thank you thank you very much this is

358
00:19:02,549 --> 00:19:06,840
all fascinating and quite new to me so

359
00:19:04,890 --> 00:19:13,140
my question may reflect a certain degree

360
00:19:06,840 --> 00:19:16,340
of naivete the constraint solver is is

361
00:19:13,140 --> 00:19:19,890
that decidable will you always get a

362
00:19:16,340 --> 00:19:23,459
canvas be solved or not I think in our

363
00:19:19,890 --> 00:19:25,880
cases we don't have a problem problems

364
00:19:23,460 --> 00:19:30,150
in getting those solve I mean if your

365
00:19:25,880 --> 00:19:33,240
compass offers ourselves our I think is

366
00:19:30,150 --> 00:19:35,010
its decidable okay yeah you feel can

367
00:19:33,240 --> 00:19:38,640
construct if you get to the con strain

368
00:19:35,010 --> 00:19:40,679
you can solve it but of course the in

369
00:19:38,640 --> 00:19:43,490
certain cases you can't even get the con

370
00:19:40,679 --> 00:19:46,409
strain that's a problem we have some

371
00:19:43,490 --> 00:19:49,580
widening techniques to to make sure we

372
00:19:46,409 --> 00:19:49,580
are getting sound rate loss

373
00:19:50,680 --> 00:19:57,170
hi Daniel continued niversity of

374
00:19:53,510 --> 00:19:59,180
Michigan how do you know what's the

375
00:19:57,170 --> 00:20:04,340
granularity of the channel so you

376
00:19:59,180 --> 00:20:07,250
mentioned that you're using cash banks

377
00:20:04,340 --> 00:20:09,919
as your minimal unit and you right shift

378
00:20:07,250 --> 00:20:11,510
everything l bits to the right before

379
00:20:09,920 --> 00:20:13,640
you even look at it how do you know that

380
00:20:11,510 --> 00:20:16,550
this is sufficiently accurate we had

381
00:20:13,640 --> 00:20:19,130
cash played already where we went below

382
00:20:16,550 --> 00:20:21,710
a cash bank resolution how do you know

383
00:20:19,130 --> 00:20:24,500
that that you're not missing bits did

384
00:20:21,710 --> 00:20:26,900
you mention cash audit sorry did you

385
00:20:24,500 --> 00:20:32,290
mention cash audit no I mentioned cash

386
00:20:26,900 --> 00:20:35,360
bleed okay so we are not doing very

387
00:20:32,290 --> 00:20:38,360
precise and that quantity and as it

388
00:20:35,360 --> 00:20:40,159
sounded like the degree of the leakage

389
00:20:38,360 --> 00:20:42,909
we only can serve whether there is

390
00:20:40,160 --> 00:20:46,250
leakage or not yeah but scatter gather

391
00:20:42,910 --> 00:20:48,620
in the setting where you don't get below

392
00:20:46,250 --> 00:20:50,120
cash banks doesn't leak right and as

393
00:20:48,620 --> 00:20:52,790
soon as you go below cash bank

394
00:20:50,120 --> 00:20:55,699
resolution it does leak so your bid

395
00:20:52,790 --> 00:20:57,800
shift L bit to the right just heat

396
00:20:55,700 --> 00:21:01,550
leakage how do you know how many bit

397
00:20:57,800 --> 00:21:06,320
shift to shift that's decided by the

398
00:21:01,550 --> 00:21:09,200
cache line size we below cash so yeah

399
00:21:06,320 --> 00:21:11,929
that's that's I think that's out of the

400
00:21:09,200 --> 00:21:17,080
scope of our consideration we only cuz

401
00:21:11,930 --> 00:21:19,460
there that yeah okay thank you okay

402
00:21:17,080 --> 00:21:21,409
thank you very much so I think we should

403
00:21:19,460 --> 00:21:22,870
move to the next talk so let's thank the

404
00:21:21,410 --> 00:21:24,930
speaker again

405
00:21:22,870 --> 00:21:24,929
you

