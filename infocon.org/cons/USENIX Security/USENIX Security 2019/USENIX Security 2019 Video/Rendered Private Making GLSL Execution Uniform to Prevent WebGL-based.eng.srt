1
00:00:11,380 --> 00:00:16,200
hello everyone my name is Thiago and

2
00:00:14,620 --> 00:00:19,350
today we are talking

3
00:00:16,200 --> 00:00:22,710
the rendered private making gia as their

4
00:00:19,350 --> 00:00:25,680
execution uniform to prevent WebGL based

5
00:00:22,710 --> 00:00:28,950
browser fingerprinting browser

6
00:00:25,680 --> 00:00:32,070
fingerprinting is a powerful method that

7
00:00:28,950 --> 00:00:34,050
websites can connect users a list of

8
00:00:32,070 --> 00:00:37,500
features and according to this

9
00:00:34,050 --> 00:00:40,500
information websites can identify unique

10
00:00:37,500 --> 00:00:44,580
users and the trackers as users are now

11
00:00:40,500 --> 00:00:48,870
behavior when users within a website for

12
00:00:44,580 --> 00:00:51,660
example cars.com and this has a subpar

13
00:00:48,870 --> 00:00:54,510
advertisement when the users search

14
00:00:51,660 --> 00:00:56,220
information on this website the third

15
00:00:54,510 --> 00:00:58,860
part of the word testament also

16
00:00:56,220 --> 00:01:02,460
connected data from the users from for

17
00:00:58,860 --> 00:01:05,700
example the time zone user agent content

18
00:01:02,460 --> 00:01:08,460
language list of plugins WebGL rendered

19
00:01:05,700 --> 00:01:10,470
and according to this information the

20
00:01:08,460 --> 00:01:14,119
third part of the word Testament we are

21
00:01:10,470 --> 00:01:17,310
create the users browser fingerprint and

22
00:01:14,119 --> 00:01:20,220
send the post brother fingerprint and

23
00:01:17,310 --> 00:01:23,640
this users search history to the word

24
00:01:20,220 --> 00:01:25,920
Testament provider next time once this

25
00:01:23,640 --> 00:01:28,679
user with it another website may be a

26
00:01:25,920 --> 00:01:31,979
travel website and this website also

27
00:01:28,679 --> 00:01:34,890
create the browser fingerprint of these

28
00:01:31,979 --> 00:01:37,860
users and search and other word has been

29
00:01:34,890 --> 00:01:40,740
provider database if the fingerprint can

30
00:01:37,860 --> 00:01:44,280
match this website we all know the users

31
00:01:40,740 --> 00:01:47,399
search history and even even this user

32
00:01:44,280 --> 00:01:50,100
with it travel website the third part of

33
00:01:47,399 --> 00:01:55,259
attachment we are also gives users the

34
00:01:50,100 --> 00:01:58,110
curse word has meant about the premiere

35
00:01:55,259 --> 00:02:03,690
work our lab published a paper on the in

36
00:01:58,110 --> 00:02:07,080
DSS 27 2017 we create a website named a

37
00:02:03,690 --> 00:02:09,508
unique machine and we connect and an

38
00:02:07,080 --> 00:02:12,150
assessed users brother fingerprint found

39
00:02:09,508 --> 00:02:15,359
this website and according to our

40
00:02:12,150 --> 00:02:18,780
approach our fingerprint accuracy is

41
00:02:15,360 --> 00:02:21,240
very high we already know that the

42
00:02:18,780 --> 00:02:24,659
browser fingerprinting is serious

43
00:02:21,240 --> 00:02:28,140
privacy problem that a lot of people try

44
00:02:24,659 --> 00:02:29,579
to fix them for now they have two

45
00:02:28,140 --> 00:02:32,959
existing and he

46
00:02:29,580 --> 00:02:35,910
fingerprinting approach tab the first

47
00:02:32,960 --> 00:02:39,050
tab is the randomization approach a

48
00:02:35,910 --> 00:02:43,410
paper published on the three W 2050

49
00:02:39,050 --> 00:02:45,990
provide system named the provector the

50
00:02:43,410 --> 00:02:48,990
limitation of this approach is evil

51
00:02:45,990 --> 00:02:51,840
attacker connect more data it will fix

52
00:02:48,990 --> 00:02:54,390
the randomization part and it get real

53
00:02:51,840 --> 00:02:57,210
data and the second way is the

54
00:02:54,390 --> 00:02:59,970
uniformity approach top rows or try to

55
00:02:57,210 --> 00:03:03,260
use this way to fix the vectors such as

56
00:02:59,970 --> 00:03:06,770
the user agent get a unique result

57
00:03:03,260 --> 00:03:10,790
however for the WebGL part tor browser

58
00:03:06,770 --> 00:03:14,070
disabled WebGL this is sacrifice

59
00:03:10,790 --> 00:03:17,459
functionality over privacy that's our

60
00:03:14,070 --> 00:03:22,739
purpose is we enable the WebGL and

61
00:03:17,459 --> 00:03:24,959
create the unique WebGL result let's

62
00:03:22,740 --> 00:03:29,010
talk about the rendering of WebGL task

63
00:03:24,959 --> 00:03:33,360
force for example if we have a WebGL

64
00:03:29,010 --> 00:03:36,899
project and doc come from a rendering

65
00:03:33,360 --> 00:03:39,840
this WebGL project and create image also

66
00:03:36,900 --> 00:03:42,450
computer to be also around the same

67
00:03:39,840 --> 00:03:45,750
project and create another image

68
00:03:42,450 --> 00:03:49,500
emanuelly we cannot see any difference

69
00:03:45,750 --> 00:03:52,290
between this image but if we manners but

70
00:03:49,500 --> 00:03:54,150
will use the image a manners image be

71
00:03:52,290 --> 00:03:57,209
where we are from this difference under

72
00:03:54,150 --> 00:03:59,040
the attacker can according to this

73
00:03:57,209 --> 00:04:03,720
difference to create the broader

74
00:03:59,040 --> 00:04:07,109
fingerprint so let's talk about overview

75
00:04:03,720 --> 00:04:10,920
and the settlement design to understand

76
00:04:07,110 --> 00:04:14,280
the difference of the WebGL project we

77
00:04:10,920 --> 00:04:17,519
took the graphics pipeline first first

78
00:04:14,280 --> 00:04:18,589
step is the words this is just the point

79
00:04:17,519 --> 00:04:21,478
information

80
00:04:18,589 --> 00:04:23,940
well vertices transferred to the vertex

81
00:04:21,478 --> 00:04:26,219
shader the vertex shader may be can have

82
00:04:23,940 --> 00:04:29,130
some options for example the large

83
00:04:26,220 --> 00:04:31,310
options rotation options and created

84
00:04:29,130 --> 00:04:35,250
transformed for the C's

85
00:04:31,310 --> 00:04:39,510
next this point are under shape assembly

86
00:04:35,250 --> 00:04:42,300
this point will create a triangle and on

87
00:04:39,510 --> 00:04:43,199
the rest and addition part the shader we

88
00:04:42,300 --> 00:04:47,099
all decided

89
00:04:43,199 --> 00:04:49,620
which pixel is in this triangle on the

90
00:04:47,099 --> 00:04:53,460
fragment shader part the shader well

91
00:04:49,620 --> 00:04:58,620
decided okay all true every pixel will

92
00:04:53,460 --> 00:05:01,080
give everything so a certain color and

93
00:04:58,620 --> 00:05:04,080
according to our research we found that

94
00:05:01,080 --> 00:05:06,539
is the floating point operations cost

95
00:05:04,080 --> 00:05:10,710
the difference and all graphics

96
00:05:06,539 --> 00:05:13,860
pipelines that has this problem and that

97
00:05:10,710 --> 00:05:16,919
we create a system named the Uni Jia to

98
00:05:13,860 --> 00:05:20,279
make the floating point operations

99
00:05:16,919 --> 00:05:22,109
uniform we will talk one by one first

100
00:05:20,279 --> 00:05:27,479
it's the vertices just the point

101
00:05:22,110 --> 00:05:29,729
information in the WebGL part is the

102
00:05:27,479 --> 00:05:32,520
floating point coordinate system is from

103
00:05:29,729 --> 00:05:35,729
the manners one to one and we try to

104
00:05:32,520 --> 00:05:40,998
draw a three point we were with you and

105
00:05:35,729 --> 00:05:44,370
history and we were still 0.0 0.0 and

106
00:05:40,999 --> 00:05:47,639
when we try to map this floating

107
00:05:44,370 --> 00:05:50,069
operation according its system to the

108
00:05:47,639 --> 00:05:52,560
canvas for example just eight times

109
00:05:50,069 --> 00:05:55,319
eight chemist's it is a integer

110
00:05:52,560 --> 00:05:58,469
coordinate system is from the zero to

111
00:05:55,319 --> 00:06:01,800
seven the computer a way out order we

112
00:05:58,469 --> 00:06:05,250
were four for which you to five ways

113
00:06:01,800 --> 00:06:08,520
three to two however the counter P maybe

114
00:06:05,250 --> 00:06:11,550
joy one three three which U and V 3 is

115
00:06:08,520 --> 00:06:14,430
same the reason of that because once

116
00:06:11,550 --> 00:06:17,699
they trust you might map from the

117
00:06:14,430 --> 00:06:19,740
floating point of floating coordinate

118
00:06:17,699 --> 00:06:21,960
system to the integer coordinate system

119
00:06:19,740 --> 00:06:24,240
they use the floating point operations

120
00:06:21,960 --> 00:06:26,489
we know that in the floating point

121
00:06:24,240 --> 00:06:30,449
coordinate system we one equal to the

122
00:06:26,490 --> 00:06:32,610
0.0 0.0 and because the integer

123
00:06:30,449 --> 00:06:35,580
coordinate system is from the zero to

124
00:06:32,610 --> 00:06:36,810
seven we when we all become to the 3.5

125
00:06:35,580 --> 00:06:39,419
3.5

126
00:06:36,810 --> 00:06:41,279
however some computer we all used to

127
00:06:39,419 --> 00:06:43,469
flow option and that the other come with

128
00:06:41,279 --> 00:06:47,789
her we are used to run option so they

129
00:06:43,469 --> 00:06:50,550
will get a different point next we will

130
00:06:47,789 --> 00:06:52,440
talk the transformed over says it's just

131
00:06:50,550 --> 00:06:54,629
a you know a text reader point we are

132
00:06:52,440 --> 00:06:55,740
after may be enlarged or rotation

133
00:06:54,629 --> 00:07:00,030
options

134
00:06:55,740 --> 00:07:01,919
and created a transform vertices and we

135
00:07:00,030 --> 00:07:04,169
know that the transformed over say is

136
00:07:01,919 --> 00:07:06,568
equal to the vertices time the matrix

137
00:07:04,169 --> 00:07:09,240
for example the world matrix will matrix

138
00:07:06,569 --> 00:07:11,699
project metrics and the we try to just

139
00:07:09,240 --> 00:07:15,630
make these vertices has a rotation

140
00:07:11,699 --> 00:07:19,020
option and it just directly map rotation

141
00:07:15,630 --> 00:07:22,009
matrix however we know that once a time

142
00:07:19,020 --> 00:07:24,810
metrics they also has the floating-point

143
00:07:22,009 --> 00:07:30,690
operations so it will cause the

144
00:07:24,810 --> 00:07:33,930
difference and one we try to energize

145
00:07:30,690 --> 00:07:36,419
the vertex shader the problem we have

146
00:07:33,930 --> 00:07:38,699
found when the JavaScript transferred

147
00:07:36,419 --> 00:07:39,960
the vertices to the vertex shader the

148
00:07:38,699 --> 00:07:42,750
word hang shader will has the

149
00:07:39,960 --> 00:07:45,359
floating-point operations and this part

150
00:07:42,750 --> 00:07:48,090
cause the difference that we transfer

151
00:07:45,360 --> 00:07:51,030
this part to the JavaScript we use the

152
00:07:48,090 --> 00:07:53,159
JavaScript to create the floating we use

153
00:07:51,030 --> 00:07:56,849
the JavaScript floating point operations

154
00:07:53,159 --> 00:07:58,830
to create transform the words this also

155
00:07:56,849 --> 00:08:01,949
according to the edge really standard

156
00:07:58,830 --> 00:08:05,430
for floating-point automatic oh that's

157
00:08:01,949 --> 00:08:10,159
the attribute a 754 we know that

158
00:08:05,430 --> 00:08:12,960
JavaScript will create the same result

159
00:08:10,159 --> 00:08:16,289
next step is the ship as Emily and the

160
00:08:12,960 --> 00:08:18,870
resin ization the ship assembly is just

161
00:08:16,289 --> 00:08:21,750
the trunk point will create a triangle

162
00:08:18,870 --> 00:08:25,370
and return addition is just a shader

163
00:08:21,750 --> 00:08:28,139
decided which pixel is in this triangle

164
00:08:25,370 --> 00:08:30,630
for example one which whole try to draw

165
00:08:28,139 --> 00:08:33,839
a triangle in the WebGL parties of

166
00:08:30,630 --> 00:08:35,700
floating-point coordinate system and on

167
00:08:33,839 --> 00:08:38,880
the shape resembling it will create a

168
00:08:35,700 --> 00:08:42,510
triangle and then it's the resolution

169
00:08:38,880 --> 00:08:43,380
part even we can make sure okay this is

170
00:08:42,510 --> 00:08:46,439
three point

171
00:08:43,380 --> 00:08:49,339
this location is totally same the create

172
00:08:46,440 --> 00:08:52,140
pixel is from the computer array and the

173
00:08:49,339 --> 00:08:54,570
yellow pics always from the computer be

174
00:08:52,140 --> 00:08:57,149
we still found okay there are some

175
00:08:54,570 --> 00:09:00,240
pixels is belong to the computer P but

176
00:08:57,149 --> 00:09:02,000
not belong to the contrary because in

177
00:09:00,240 --> 00:09:04,740
this part where shader we are used

178
00:09:02,000 --> 00:09:07,140
floating-point operations to decide

179
00:09:04,740 --> 00:09:09,570
which pics always belong to this

180
00:09:07,140 --> 00:09:11,880
triangle even we can make sure

181
00:09:09,570 --> 00:09:14,520
the input of the shader is totally same

182
00:09:11,880 --> 00:09:20,370
but the output of the vertex shader is

183
00:09:14,520 --> 00:09:22,949
not same and when we try to analyze a

184
00:09:20,370 --> 00:09:25,260
one-way analyzes this this problem in

185
00:09:22,950 --> 00:09:27,330
the the transition part we have found ok

186
00:09:25,260 --> 00:09:29,520
it's the shader it's the system

187
00:09:27,330 --> 00:09:30,030
floating-point operations will cause the

188
00:09:29,520 --> 00:09:33,840
difference

189
00:09:30,030 --> 00:09:36,329
thus we try to move this work on to the

190
00:09:33,840 --> 00:09:38,760
fragment shader in a fragment shader we

191
00:09:36,330 --> 00:09:41,750
try to use the GL as they are integer

192
00:09:38,760 --> 00:09:46,290
operation to finish this part of work

193
00:09:41,750 --> 00:09:48,450
first on the vertex shader we will draw

194
00:09:46,290 --> 00:09:51,150
two triangle to cover the whole canvas

195
00:09:48,450 --> 00:09:53,910
to make sure on a fragment shader part

196
00:09:51,150 --> 00:09:56,430
we can give every pixel they are colors

197
00:09:53,910 --> 00:09:59,880
and then because in the JavaScript part

198
00:09:56,430 --> 00:10:03,030
we already has the transform the vertex

199
00:09:59,880 --> 00:10:05,280
trivial in the JavaScript and we can't

200
00:10:03,030 --> 00:10:07,020
directly transfer this point location to

201
00:10:05,280 --> 00:10:10,339
the fragment shader point it should

202
00:10:07,020 --> 00:10:13,140
fragment shader sheet fragment shader

203
00:10:10,340 --> 00:10:15,990
also on the fragment shader we can use

204
00:10:13,140 --> 00:10:18,750
the GL as our integer operation to judge

205
00:10:15,990 --> 00:10:21,150
which port a singlet strangle if this

206
00:10:18,750 --> 00:10:23,700
point is in this triangle we will give

207
00:10:21,150 --> 00:10:26,280
this point the triangle color otherwise

208
00:10:23,700 --> 00:10:31,050
we okay if they strangle the background

209
00:10:26,280 --> 00:10:33,650
color the next step is the fragment

210
00:10:31,050 --> 00:10:38,670
shader program shader is just a give the

211
00:10:33,650 --> 00:10:42,480
pixel their color and they have the for

212
00:10:38,670 --> 00:10:44,120
example functionality the force is the

213
00:10:42,480 --> 00:10:47,010
single color

214
00:10:44,120 --> 00:10:50,160
single color will meet the same problem

215
00:10:47,010 --> 00:10:56,490
for example if we try to give a pixel

216
00:10:50,160 --> 00:10:59,850
the color is 0.5 0.0 0.0 this is RGB

217
00:10:56,490 --> 00:11:03,810
color and then the contour a maybe will

218
00:10:59,850 --> 00:11:07,500
show the 100 2700 and the control P will

219
00:11:03,810 --> 00:11:09,390
show the color may be 128 at 0 0 it may

220
00:11:07,500 --> 00:11:11,910
do the same problem just like the

221
00:11:09,390 --> 00:11:14,400
birthdays is when the shader try to

222
00:11:11,910 --> 00:11:15,420
transfer float range color to the

223
00:11:14,400 --> 00:11:17,880
integer

224
00:11:15,420 --> 00:11:19,800
branch color there's some computer will

225
00:11:17,880 --> 00:11:21,010
use the flow option and the other

226
00:11:19,800 --> 00:11:23,620
computer will

227
00:11:21,010 --> 00:11:28,360
the wrong option so the computer will

228
00:11:23,620 --> 00:11:31,570
show the different cutter and we use the

229
00:11:28,360 --> 00:11:34,000
JavaScript to transfer the yuneisia we

230
00:11:31,570 --> 00:11:35,889
use the JavaScript transfer float value

231
00:11:34,000 --> 00:11:37,839
to the integer value and the weight

232
00:11:35,889 --> 00:11:40,480
directly transferred the integer value

233
00:11:37,839 --> 00:11:42,310
to the fragment shader on the fragment

234
00:11:40,480 --> 00:11:45,040
shader will transfer integer value back

235
00:11:42,310 --> 00:11:49,119
to the float value also we add a very

236
00:11:45,040 --> 00:11:51,370
small very small value to prevent the

237
00:11:49,120 --> 00:11:53,320
precision loss because the different

238
00:11:51,370 --> 00:11:58,000
computer maybe have the different

239
00:11:53,320 --> 00:12:00,370
procedures on the light part the new

240
00:11:58,000 --> 00:12:03,250
color equal to the current color times

241
00:12:00,370 --> 00:12:07,540
the light matrix the relationship

242
00:12:03,250 --> 00:12:10,449
between the light and single color is

243
00:12:07,540 --> 00:12:14,050
candle select transform the vertices and

244
00:12:10,449 --> 00:12:15,969
with vertices still they have made the

245
00:12:14,050 --> 00:12:18,939
same problem is when they try to

246
00:12:15,970 --> 00:12:21,970
multiple the matrix they have used the

247
00:12:18,940 --> 00:12:24,550
floating-point operations and our

248
00:12:21,970 --> 00:12:26,399
solution is in the fragment shader part

249
00:12:24,550 --> 00:12:29,139
which has for the fragment shader

250
00:12:26,399 --> 00:12:32,819
floating-point operations to the

251
00:12:29,139 --> 00:12:35,889
fragment shader integer operations and

252
00:12:32,819 --> 00:12:38,889
the war ein paar under green color part

253
00:12:35,889 --> 00:12:42,250
if we try to draw a right triangle we

254
00:12:38,889 --> 00:12:44,290
give the 3 point they are color and the

255
00:12:42,250 --> 00:12:46,690
system we are according to the target

256
00:12:44,290 --> 00:12:49,180
point the distance which the history

257
00:12:46,690 --> 00:12:54,339
point to create to automatically create

258
00:12:49,180 --> 00:12:56,800
these pixels color and also this is also

259
00:12:54,339 --> 00:12:59,260
under a shape resembling part is a

260
00:12:56,800 --> 00:13:04,300
triangle and around final part there is

261
00:12:59,260 --> 00:13:06,310
the whole variety triangle also the

262
00:13:04,300 --> 00:13:08,469
problem is still even we can make sure

263
00:13:06,310 --> 00:13:10,719
this is three point they have the same

264
00:13:08,470 --> 00:13:13,810
location and the same color because the

265
00:13:10,720 --> 00:13:16,630
other pixels in this triangle use the

266
00:13:13,810 --> 00:13:20,170
shader floating point operations so the

267
00:13:16,630 --> 00:13:23,709
result is still different the same thing

268
00:13:20,170 --> 00:13:26,439
is still in the texture in texture we

269
00:13:23,709 --> 00:13:29,768
have the wave one with you and the v3

270
00:13:26,440 --> 00:13:32,019
and in the texture we also map away one

271
00:13:29,769 --> 00:13:34,690
way to a mystery will try to map the

272
00:13:32,019 --> 00:13:38,170
texture triangle to the chemistry angle

273
00:13:34,690 --> 00:13:39,970
and also there according to the target

274
00:13:38,170 --> 00:13:40,899
to the distance which the way one

275
00:13:39,970 --> 00:13:43,779
between lv3

276
00:13:40,899 --> 00:13:46,690
to thank these two standard target in

277
00:13:43,779 --> 00:13:48,699
the texture also because they have the

278
00:13:46,690 --> 00:13:51,189
floating-point operation in the shader

279
00:13:48,699 --> 00:13:53,620
the computer and the computer P maybe

280
00:13:51,189 --> 00:13:59,290
found the different pixel on chemists

281
00:13:53,620 --> 00:14:01,089
and the texture so what so we try to fix

282
00:13:59,290 --> 00:14:03,849
this is in the fragment shader we

283
00:14:01,089 --> 00:14:06,579
already use gia as a integer operation

284
00:14:03,850 --> 00:14:09,790
to judge which point is in this triangle

285
00:14:06,579 --> 00:14:11,979
also after that we also use the gia as

286
00:14:09,790 --> 00:14:14,740
their integer operation to cocoon

287
00:14:11,980 --> 00:14:19,529
calculate the wine color or the texture

288
00:14:14,740 --> 00:14:22,839
value and in our implementation part

289
00:14:19,529 --> 00:14:26,079
when implement our unity as a prototype

290
00:14:22,839 --> 00:14:28,180
on the first part vertices shader float

291
00:14:26,079 --> 00:14:30,839
way one way transform vertex shader

292
00:14:28,180 --> 00:14:35,378
float operation to the JavaScript

293
00:14:30,839 --> 00:14:38,379
floating operations we spend 8,500 lines

294
00:14:35,379 --> 00:14:39,639
of JavaScript code the second part one

295
00:14:38,379 --> 00:14:41,730
which transferred the fragment shader

296
00:14:39,639 --> 00:14:46,089
float operations to the fragment shader

297
00:14:41,730 --> 00:14:48,880
integer operations with been the 650 50

298
00:14:46,089 --> 00:14:51,970
nights of gsl code on the other part

299
00:14:48,880 --> 00:14:54,910
just the web assembly and item part

300
00:14:51,970 --> 00:14:58,209
which we used as three thousand lines of

301
00:14:54,910 --> 00:15:01,569
other code next we will talk to the

302
00:14:58,209 --> 00:15:04,089
evaluation part in the tester we used

303
00:15:01,569 --> 00:15:08,259
17 different rendering tasks according

304
00:15:04,089 --> 00:15:11,170
to the DHS paper first a way we around

305
00:15:08,259 --> 00:15:14,470
the 60 original text and then we will

306
00:15:11,170 --> 00:15:16,810
run the 60 test awaits the Uni gia for

307
00:15:14,470 --> 00:15:18,639
the average computer we were connected

308
00:15:16,810 --> 00:15:22,388
data from the Amazon and mechanical

309
00:15:18,639 --> 00:15:25,149
Turks and the way already connect 656

310
00:15:22,389 --> 00:15:28,839
fingerprint result according to the

311
00:15:25,149 --> 00:15:31,209
graph we can see the chrome Stelfox in

312
00:15:28,839 --> 00:15:34,839
the Safari will have a lot of unique

313
00:15:31,209 --> 00:15:37,930
fingerprint and it will help you found

314
00:15:34,839 --> 00:15:42,089
the unique users but our result just a

315
00:15:37,930 --> 00:15:42,089
while we just created one unique result

316
00:15:42,240 --> 00:15:47,780
this is the detail of the host 17 cast

317
00:15:46,959 --> 00:15:49,640
the

318
00:15:47,780 --> 00:15:52,630
today's the original one on the right is

319
00:15:49,640 --> 00:15:55,720
the unique Jia WA and according to the

320
00:15:52,630 --> 00:16:00,230
frame per seconds we can see both the

321
00:15:55,720 --> 00:16:03,620
original one and aura is around 60 fps

322
00:16:00,230 --> 00:16:08,270
it's just a match the screen assess

323
00:16:03,620 --> 00:16:11,480
refresh rate the fan - oh is our

324
00:16:08,270 --> 00:16:13,850
conclusion first we energize the reason

325
00:16:11,480 --> 00:16:17,840
of the rendering a rendered difference

326
00:16:13,850 --> 00:16:20,740
also we propose unity to prevent WebGL

327
00:16:17,840 --> 00:16:24,320
based browser fingerprinting fellow we

328
00:16:20,740 --> 00:16:27,260
implement open source prototype of unity

329
00:16:24,320 --> 00:16:37,190
as a browser atom and this is our demo

330
00:16:27,260 --> 00:16:39,610
website thank you thank you we have some

331
00:16:37,190 --> 00:16:39,610
time for questions

332
00:16:40,090 --> 00:16:47,930
please queue up in front of the mics Hey

333
00:16:45,740 --> 00:16:51,430
I like this work I have one quick

334
00:16:47,930 --> 00:16:56,660
question you are still running

335
00:16:51,430 --> 00:17:02,420
adversarially supplied GLSL fragment

336
00:16:56,660 --> 00:17:04,159
shaders on the on the GPU right yes what

337
00:17:02,420 --> 00:17:05,780
confidence do you have that there are no

338
00:17:04,160 --> 00:17:07,790
differences in the behavior of such

339
00:17:05,780 --> 00:17:10,609
programs besides the ones that are eyes

340
00:17:07,790 --> 00:17:15,530
from the loading point yes yes the you

341
00:17:10,609 --> 00:17:17,479
know or our we connected data and from

342
00:17:15,530 --> 00:17:20,540
the data we can make sure okay

343
00:17:17,480 --> 00:17:24,890
we create the same reason and also

344
00:17:20,540 --> 00:17:26,389
because because we also concern because

345
00:17:24,890 --> 00:17:29,630
they say so the integer operation and

346
00:17:26,390 --> 00:17:35,050
that integer operation is make sure okay

347
00:17:29,630 --> 00:17:36,950
test result is solely same but

348
00:17:35,050 --> 00:17:40,909
programming models involve more than

349
00:17:36,950 --> 00:17:43,040
just arithmetic operations on the

350
00:17:40,910 --> 00:17:45,140
numeric values right so there could be

351
00:17:43,040 --> 00:17:49,700
differences in cash behavior or other

352
00:17:45,140 --> 00:17:53,450
kinds of platform features yes I know

353
00:17:49,700 --> 00:17:55,640
that I think this is mm this is a lot of

354
00:17:53,450 --> 00:17:59,380
detail I cannot say right now maybe we

355
00:17:55,640 --> 00:17:59,380
can talk later yeah thank you

356
00:18:01,020 --> 00:18:04,510
therefore you're from UC Irvine thanks

357
00:18:03,280 --> 00:18:07,240
for the talk

358
00:18:04,510 --> 00:18:09,340
so wondering if you look at the

359
00:18:07,240 --> 00:18:14,260
difference caused by a different GPU

360
00:18:09,340 --> 00:18:18,850
however so I think these differences as

361
00:18:14,260 --> 00:18:22,930
a result of browser and WebGL OpenGL

362
00:18:18,850 --> 00:18:25,510
libraries actually the difference is not

363
00:18:22,930 --> 00:18:27,400
only come from the GPU it also comes

364
00:18:25,510 --> 00:18:30,570
from the browser even the browser

365
00:18:27,400 --> 00:18:33,910
version also the operating system and

366
00:18:30,570 --> 00:18:37,899
the draft version so we actually which

367
00:18:33,910 --> 00:18:40,390
hurt you energize the every level one by

368
00:18:37,900 --> 00:18:42,760
one but we found ok every level will

369
00:18:40,390 --> 00:18:44,920
cause the difference so we just try to

370
00:18:42,760 --> 00:18:47,410
use a unique which I'll try to found our

371
00:18:44,920 --> 00:18:49,600
unique operation to chatter transfer the

372
00:18:47,410 --> 00:18:50,230
all operation to this unique operations

373
00:18:49,600 --> 00:18:52,090
ok

374
00:18:50,230 --> 00:18:54,430
another quick question do you think just

375
00:18:52,090 --> 00:18:58,720
disable the read pixels will solve the

376
00:18:54,430 --> 00:19:00,520
problem actually they have for example

377
00:18:58,720 --> 00:19:03,670
you for you disable the greater pixel is

378
00:19:00,520 --> 00:19:06,820
the it's just sacrificed the

379
00:19:03,670 --> 00:19:08,740
functionality yeah I think maybe yes if

380
00:19:06,820 --> 00:19:10,780
you disable the really pixel yeah we can

381
00:19:08,740 --> 00:19:15,840
save those problems I don't think the if

382
00:19:10,780 --> 00:19:19,510
he is well used yes thanks thank you

383
00:19:15,840 --> 00:19:21,250
Michael UC Berkeley so in your table of

384
00:19:19,510 --> 00:19:23,170
sort of performance impact you mostly

385
00:19:21,250 --> 00:19:26,050
had relatively small scenes that were

386
00:19:23,170 --> 00:19:27,460
capped at 60fps anyway yeah I mean

387
00:19:26,050 --> 00:19:28,810
you're doing things like rasterizing in

388
00:19:27,460 --> 00:19:30,280
the fragment shader surely the

389
00:19:28,810 --> 00:19:32,889
performance impact with more complex

390
00:19:30,280 --> 00:19:35,440
scenes my only show when you start to do

391
00:19:32,890 --> 00:19:38,680
to the complex things yes there are two

392
00:19:35,440 --> 00:19:41,490
reason for say it's the our testing

393
00:19:38,680 --> 00:19:44,740
environment this creates the 60fps and

394
00:19:41,490 --> 00:19:49,270
we used a lot of a lot of a way to

395
00:19:44,740 --> 00:19:51,040
improve our improve our performance we

396
00:19:49,270 --> 00:19:52,870
just use the web resembling actually in

397
00:19:51,040 --> 00:19:54,040
the vertex shader part if you see the

398
00:19:52,870 --> 00:19:57,070
detail on the paper

399
00:19:54,040 --> 00:19:59,860
we compared every micro benchmark some

400
00:19:57,070 --> 00:20:02,679
part in our system is quickly than the

401
00:19:59,860 --> 00:20:04,629
unique are the original one so it who

402
00:20:02,680 --> 00:20:06,820
it's so using the fragment shader we

403
00:20:04,630 --> 00:20:08,950
will be wasted some time but in the

404
00:20:06,820 --> 00:20:11,840
fretboard actually actually we make it a

405
00:20:08,950 --> 00:20:13,280
little faster okay thank you thank you I

406
00:20:11,840 --> 00:20:18,970
let's thank the speaker again

407
00:20:13,280 --> 00:20:18,970
[Applause]

