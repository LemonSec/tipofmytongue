1
00:00:11,100 --> 00:00:16,710
hi everyone today we will be talking

2
00:00:14,580 --> 00:00:19,680
about my contract honey pots this is

3
00:00:16,710 --> 00:00:21,210
joint work from with my colleague from

4
00:00:19,680 --> 00:00:24,060
University of Luxembourg multi-station

5
00:00:21,210 --> 00:00:27,029
body started I will start with a short

6
00:00:24,060 --> 00:00:28,590
crash course on etherium so what is it

7
00:00:27,029 --> 00:00:30,599
Furion if you miss a block chain just

8
00:00:28,590 --> 00:00:32,040
like Bitcoin and it became very popular

9
00:00:30,599 --> 00:00:34,710
because it allows to have u-turn

10
00:00:32,040 --> 00:00:36,300
completing our contract now there are

11
00:00:34,710 --> 00:00:38,309
two different types of accounts in a if

12
00:00:36,300 --> 00:00:40,230
you young you have externally owned

13
00:00:38,309 --> 00:00:42,360
accounts which are normal user accounts

14
00:00:40,230 --> 00:00:44,580
or a public/private key pair there are

15
00:00:42,360 --> 00:00:46,650
they are identifiable by an address they

16
00:00:44,580 --> 00:00:48,150
contain a balance then you have contract

17
00:00:46,650 --> 00:00:50,370
accounts which are actually smart

18
00:00:48,150 --> 00:00:51,989
contract and they also are identifiable

19
00:00:50,370 --> 00:00:53,280
by an address and you also have a

20
00:00:51,990 --> 00:00:55,170
balance but the difference is you have

21
00:00:53,280 --> 00:00:59,280
code as well and you have storage where

22
00:00:55,170 --> 00:01:00,540
smart contract can store at state now if

23
00:00:59,280 --> 00:01:02,520
a user wants to interact with a smart

24
00:01:00,540 --> 00:01:04,110
contract he sends in a transaction this

25
00:01:02,520 --> 00:01:08,220
transaction can contain some monetary

26
00:01:04,110 --> 00:01:09,630
value but can also contain data and as

27
00:01:08,220 --> 00:01:11,670
my contract can afterwards sent for

28
00:01:09,630 --> 00:01:14,850
transactions to other user accounts or

29
00:01:11,670 --> 00:01:16,229
to other smart contracts now if I'm a

30
00:01:14,850 --> 00:01:17,908
developer and I want to start developing

31
00:01:16,229 --> 00:01:20,010
a smart contract I need to pick first

32
00:01:17,909 --> 00:01:21,720
programming language there are many out

33
00:01:20,010 --> 00:01:24,120
there the most popular one right now is

34
00:01:21,720 --> 00:01:25,740
solidity so right my smart contract

35
00:01:24,120 --> 00:01:29,190
using solidity and then I use the

36
00:01:25,740 --> 00:01:31,710
solidity compiler to translate into EDM

37
00:01:29,190 --> 00:01:32,820
bytecode this bytecode is going to

38
00:01:31,710 --> 00:01:35,130
represent the smart country on a

39
00:01:32,820 --> 00:01:37,408
blockchain to put this bytecode on a

40
00:01:35,130 --> 00:01:40,949
blockchain again this works via

41
00:01:37,409 --> 00:01:42,540
transactions so once this bytecode is on

42
00:01:40,950 --> 00:01:43,740
the blockchain it gets executed by

43
00:01:42,540 --> 00:01:44,310
something called a children virtual

44
00:01:43,740 --> 00:01:46,110
machine

45
00:01:44,310 --> 00:01:48,540
it's a turing-complete and stack based

46
00:01:46,110 --> 00:01:50,520
virtual machine and it can interpret

47
00:01:48,540 --> 00:01:52,049
more than 100 different instructions you

48
00:01:50,520 --> 00:01:54,149
have stack instructions memory

49
00:01:52,049 --> 00:01:56,299
instructions control flow instructions

50
00:01:54,150 --> 00:01:59,220
but also blockchain related instructions

51
00:01:56,299 --> 00:02:01,470
all right so let's talk now a little bit

52
00:01:59,220 --> 00:02:03,270
about exploiting smart contracts as you

53
00:02:01,470 --> 00:02:05,250
probably already heard in the past a lot

54
00:02:03,270 --> 00:02:06,689
of sparkles have been exploited have

55
00:02:05,250 --> 00:02:09,840
been attacked the most famous one was

56
00:02:06,689 --> 00:02:11,400
the dow hack in 2016-2017 was the parity

57
00:02:09,840 --> 00:02:13,769
wall attack so they've heard you all to

58
00:02:11,400 --> 00:02:17,010
actually got attacked twice in 2017 then

59
00:02:13,769 --> 00:02:19,200
2018 was all about token smart contracts

60
00:02:17,010 --> 00:02:21,899
so I cos and the many of them were

61
00:02:19,200 --> 00:02:24,060
available to integer overflows so

62
00:02:21,900 --> 00:02:26,010
academia started to develop tools

63
00:02:24,060 --> 00:02:27,900
in order to detect these wrong bilities

64
00:02:26,010 --> 00:02:30,209
and smart contact automatically and to

65
00:02:27,900 --> 00:02:33,690
help developers program more secure

66
00:02:30,210 --> 00:02:34,920
smart contracts and some tools that are

67
00:02:33,690 --> 00:02:37,890
even capable to automatically generate

68
00:02:34,920 --> 00:02:39,839
exploits there's a nice paper on this

69
00:02:37,890 --> 00:02:41,399
from last year it has been presented

70
00:02:39,840 --> 00:02:43,920
last year here to use Nick's called FIFA

71
00:02:41,400 --> 00:02:46,410
and Kieffer's is capable of

72
00:02:43,920 --> 00:02:49,769
automatically generate and exploit so

73
00:02:46,410 --> 00:02:51,270
these tools they help developers well

74
00:02:49,770 --> 00:02:52,500
they help developers detect all

75
00:02:51,270 --> 00:02:55,680
abilities and as more contracts but they

76
00:02:52,500 --> 00:03:01,500
also allow attackers to easily attack

77
00:02:55,680 --> 00:03:03,720
smart contracts now so a lot of

78
00:03:01,500 --> 00:03:04,860
attackers they started looking for more

79
00:03:03,720 --> 00:03:05,970
smart contracts now there are two

80
00:03:04,860 --> 00:03:09,600
problems right there

81
00:03:05,970 --> 00:03:12,840
first there are millions of smart

82
00:03:09,600 --> 00:03:14,340
contracts so it's a lot of work and the

83
00:03:12,840 --> 00:03:15,690
other thing is it is becoming more

84
00:03:14,340 --> 00:03:17,940
challenging and finding almost more

85
00:03:15,690 --> 00:03:19,380
contracts because users are getting more

86
00:03:17,940 --> 00:03:20,670
aware of the security issues that you

87
00:03:19,380 --> 00:03:22,400
have a smart contract so they start

88
00:03:20,670 --> 00:03:24,958
developing more safe cut smart contracts

89
00:03:22,400 --> 00:03:26,610
so some attackers they were thinking

90
00:03:24,959 --> 00:03:28,560
about it and they said like why should I

91
00:03:26,610 --> 00:03:29,820
spend my time looking for victims if I

92
00:03:28,560 --> 00:03:32,100
can't just let the victim to come to me

93
00:03:29,820 --> 00:03:34,560
and this brings us to smart contract

94
00:03:32,100 --> 00:03:36,540
honey pots so what is this my contract

95
00:03:34,560 --> 00:03:39,150
honeypot if the smart contractor looks

96
00:03:36,540 --> 00:03:40,620
vulnerable but actually isn't the idea

97
00:03:39,150 --> 00:03:42,209
is to make users believe that they can

98
00:03:40,620 --> 00:03:44,670
exploit a smart country by sending funds

99
00:03:42,209 --> 00:03:47,430
to it but the truth is the exploit will

100
00:03:44,670 --> 00:03:49,500
never work but they don't notice and the

101
00:03:47,430 --> 00:03:50,580
attacker so their smart contract Creator

102
00:03:49,500 --> 00:03:53,400
is the only one who can actually

103
00:03:50,580 --> 00:03:54,690
retrieve difference so let's have a look

104
00:03:53,400 --> 00:03:56,370
at an example

105
00:03:54,690 --> 00:03:58,260
this is called a multiplicator honeypot

106
00:03:56,370 --> 00:04:00,690
and they're interesting function here is

107
00:03:58,260 --> 00:04:02,429
the multiplicative action multiplicate

108
00:04:00,690 --> 00:04:04,049
function says that if you send me a

109
00:04:02,430 --> 00:04:06,570
value that is larger or equal to the

110
00:04:04,049 --> 00:04:09,660
balance you get your value back plus the

111
00:04:06,570 --> 00:04:11,640
value that is included in the balance so

112
00:04:09,660 --> 00:04:13,109
if the concert contains one ether and I

113
00:04:11,640 --> 00:04:15,029
sent one effort to the contract I will

114
00:04:13,110 --> 00:04:16,620
get my t4 back plus the ether that was

115
00:04:15,030 --> 00:04:20,640
contained in the smart contract sounds

116
00:04:16,620 --> 00:04:24,060
great right but it doesn't work there's

117
00:04:20,640 --> 00:04:25,890
a trap and the trap is that before

118
00:04:24,060 --> 00:04:27,090
execution actually starts the balance is

119
00:04:25,890 --> 00:04:29,250
already updated with the value that you

120
00:04:27,090 --> 00:04:31,500
sent it's a smart contract okay so the

121
00:04:29,250 --> 00:04:33,000
condition will never be true and then

122
00:04:31,500 --> 00:04:35,580
what is also interesting here is if you

123
00:04:33,000 --> 00:04:37,410
have a closer look at the bait there's

124
00:04:35,580 --> 00:04:40,409
there's a reason why the

125
00:04:37,410 --> 00:04:42,510
the developer I mean the smart contract

126
00:04:40,410 --> 00:04:45,210
honeypot creator wrote this line like

127
00:04:42,510 --> 00:04:47,700
this by writing this dot balance plus

128
00:04:45,210 --> 00:04:49,710
message value he actually confused the

129
00:04:47,700 --> 00:04:51,479
victim he made the victim believe that

130
00:04:49,710 --> 00:04:55,469
actually the balance is updated after

131
00:04:51,480 --> 00:04:57,390
the execution all right so um to the

132
00:04:55,470 --> 00:04:58,530
screenshot avi first scan if your scan

133
00:04:57,390 --> 00:05:00,300
is a website that shows you all the

134
00:04:58,530 --> 00:05:03,419
transactions who are involved with

135
00:05:00,300 --> 00:05:05,220
certain smart contract and as you can

136
00:05:03,420 --> 00:05:07,080
see there are people actually falling

137
00:05:05,220 --> 00:05:09,030
for these traps so this guy he basically

138
00:05:07,080 --> 00:05:10,620
lost one point one Eva and I don't know

139
00:05:09,030 --> 00:05:11,909
if you're aware of this but one that was

140
00:05:10,620 --> 00:05:16,800
a moment where one if it was worth

141
00:05:11,910 --> 00:05:18,660
$1,000 oh he he lost $1,000 so let's

142
00:05:16,800 --> 00:05:22,170
have a look at another example this one

143
00:05:18,660 --> 00:05:24,030
is called crypto roulette did they the

144
00:05:22,170 --> 00:05:26,010
goal here is to guess a random number

145
00:05:24,030 --> 00:05:28,380
and if you get to render number you get

146
00:05:26,010 --> 00:05:29,880
to balance of the smart contract now as

147
00:05:28,380 --> 00:05:31,050
we all know that nothing is secret on

148
00:05:29,880 --> 00:05:32,400
the blockchain so I can just easily

149
00:05:31,050 --> 00:05:33,930
write the script that goes to the

150
00:05:32,400 --> 00:05:35,520
blockchain reads a secret number I

151
00:05:33,930 --> 00:05:38,520
submit it to the play function and

152
00:05:35,520 --> 00:05:41,400
wallah I the the crypto roulette

153
00:05:38,520 --> 00:05:43,710
so that's debate and here's a trap so

154
00:05:41,400 --> 00:05:45,390
game is a struct and game is not

155
00:05:43,710 --> 00:05:47,430
initialized and this was actually a back

156
00:05:45,390 --> 00:05:49,050
of the solidity compiler what a compiler

157
00:05:47,430 --> 00:05:51,120
would do is he would point to the

158
00:05:49,050 --> 00:05:54,090
default location 0 storage location 0

159
00:05:51,120 --> 00:05:56,160
now at storage location 0 is also the

160
00:05:54,090 --> 00:05:58,409
secret number so when you are executing

161
00:05:56,160 --> 00:06:00,330
this function you're over writing of

162
00:05:58,410 --> 00:06:02,370
massive sender the secret number and

163
00:06:00,330 --> 00:06:04,620
number is going to override last plate

164
00:06:02,370 --> 00:06:06,060
so the if statement will never be

165
00:06:04,620 --> 00:06:09,000
fulfilled so you will never be able to

166
00:06:06,060 --> 00:06:12,240
win and also here there's someone who

167
00:06:09,000 --> 00:06:14,130
fell for this all right so to summarize

168
00:06:12,240 --> 00:06:16,200
honeypot always works in three different

169
00:06:14,130 --> 00:06:18,240
phases we have the attacker who creates

170
00:06:16,200 --> 00:06:19,830
a smart contract honeypot and deploys it

171
00:06:18,240 --> 00:06:21,810
to the blockchain and then we have our

172
00:06:19,830 --> 00:06:23,640
victim that scans the blockchain finds

173
00:06:21,810 --> 00:06:25,740
it finds the smart contract tries to

174
00:06:23,640 --> 00:06:27,510
exploit it by sending phone stupid fails

175
00:06:25,740 --> 00:06:28,920
and then we have a last phase the third

176
00:06:27,510 --> 00:06:32,460
phase where the attacker then withdraws

177
00:06:28,920 --> 00:06:34,470
all the funds from the honeypot so why

178
00:06:32,460 --> 00:06:36,630
do these honeypot work well mainly

179
00:06:34,470 --> 00:06:38,190
because of two reasons first a lot of

180
00:06:36,630 --> 00:06:39,630
people out there were actually looking

181
00:06:38,190 --> 00:06:41,070
for vulnerabilities in smart contracts

182
00:06:39,630 --> 00:06:42,870
and the other problem is that many of

183
00:06:41,070 --> 00:06:44,520
these people don't really have the

184
00:06:42,870 --> 00:06:46,500
experience they don't really know about

185
00:06:44,520 --> 00:06:48,210
the whole ecosystem so the whole

186
00:06:46,500 --> 00:06:49,060
ecosystem over here is very complex and

187
00:06:48,210 --> 00:06:51,599
many behave

188
00:06:49,060 --> 00:06:54,040
after behaviors unknown to many people

189
00:06:51,600 --> 00:06:58,480
all right so let's try to detect some

190
00:06:54,040 --> 00:06:59,830
honey pots we started by looking it's by

191
00:06:58,480 --> 00:07:01,720
searching on the internet for honey pots

192
00:06:59,830 --> 00:07:04,060
we found in the beginning 24 honey pots

193
00:07:01,720 --> 00:07:06,550
and we've teased 2400 pots which is

194
00:07:04,060 --> 00:07:07,930
started to create a taxonomy we're able

195
00:07:06,550 --> 00:07:09,580
to extract eight different techniques

196
00:07:07,930 --> 00:07:10,570
and then when analyzing these eight

197
00:07:09,580 --> 00:07:12,609
different techniques we realize that

198
00:07:10,570 --> 00:07:14,680
they're actually exploiting a one

199
00:07:12,610 --> 00:07:16,120
particular they're being they're

200
00:07:14,680 --> 00:07:18,130
operating on a particular level of the

201
00:07:16,120 --> 00:07:19,389
interior mechanism so somewhere

202
00:07:18,130 --> 00:07:21,490
exploiting the interior much machine

203
00:07:19,389 --> 00:07:23,200
others are exploiting the bark and the

204
00:07:21,490 --> 00:07:24,540
solidity compiler and others are

205
00:07:23,200 --> 00:07:28,240
exploiting bugs on the ether scan

206
00:07:24,540 --> 00:07:30,220
blockchain Explorer so having out this

207
00:07:28,240 --> 00:07:32,380
information we decided to create a tool

208
00:07:30,220 --> 00:07:34,300
called honey badger honey badger takes

209
00:07:32,380 --> 00:07:36,460
as inputs smart contract byte code and

210
00:07:34,300 --> 00:07:37,060
outputs a report telling you okay this

211
00:07:36,460 --> 00:07:38,260
is the honeypot

212
00:07:37,060 --> 00:07:40,510
and it also tells you what kind of

213
00:07:38,260 --> 00:07:41,950
technique is being used and honey badger

214
00:07:40,510 --> 00:07:43,780
consists of three different phases we

215
00:07:41,950 --> 00:07:45,490
have a symbolic analysis phase the cash

216
00:07:43,780 --> 00:07:47,260
flow analysis phase and a honeypot

217
00:07:45,490 --> 00:07:49,330
analysis phase let's start of the

218
00:07:47,260 --> 00:07:51,370
symbolic analysis we didn't reinvent the

219
00:07:49,330 --> 00:07:53,590
wheel here we base ourselves on Luanne

220
00:07:51,370 --> 00:07:55,750
Al's symbolic execution engine called a

221
00:07:53,590 --> 00:07:57,369
Yenta that was presented CGS in 2016

222
00:07:55,750 --> 00:07:58,990
it simply constructs a control flow

223
00:07:57,370 --> 00:08:00,850
graph and starts executing every

224
00:07:58,990 --> 00:08:02,970
instructions of Berkeley now many

225
00:08:00,850 --> 00:08:05,530
symbolic execution engines they do not

226
00:08:02,970 --> 00:08:07,960
execute in fetal paths for performance

227
00:08:05,530 --> 00:08:10,119
issues they're infusing but actually if

228
00:08:07,960 --> 00:08:11,739
you remember our first example after our

229
00:08:10,120 --> 00:08:13,060
first honeypot there was this if

230
00:08:11,740 --> 00:08:14,890
statement and this is statement is

231
00:08:13,060 --> 00:08:16,510
actually always infeasible so actually

232
00:08:14,890 --> 00:08:17,409
we modified the execution gentleman

233
00:08:16,510 --> 00:08:20,560
because we want to collect this

234
00:08:17,410 --> 00:08:21,940
information of infeasible paths so the

235
00:08:20,560 --> 00:08:22,539
goal of the small egg analysis to

236
00:08:21,940 --> 00:08:24,010
collect

237
00:08:22,539 --> 00:08:25,630
meta information and we collect

238
00:08:24,010 --> 00:08:27,520
information such as storage rights

239
00:08:25,630 --> 00:08:30,100
execution paths and feasible basic

240
00:08:27,520 --> 00:08:32,260
blocks feasible basic blocks contract

241
00:08:30,100 --> 00:08:33,520
calls and aromatic operations so having

242
00:08:32,260 --> 00:08:36,309
collected all this information we move

243
00:08:33,520 --> 00:08:37,958
on to the second analysis which is the

244
00:08:36,309 --> 00:08:39,489
cash flow analysis and here the ideas to

245
00:08:37,958 --> 00:08:41,260
discard all the contracts that are not

246
00:08:39,490 --> 00:08:42,909
capable to receive and transfer funds

247
00:08:41,260 --> 00:08:44,560
because the idea is that if a country

248
00:08:42,909 --> 00:08:47,050
cannot receive and transfer funds then

249
00:08:44,560 --> 00:08:49,029
it's definitely not an honeypot so we

250
00:08:47,050 --> 00:08:50,469
use this in the the data that we

251
00:08:49,029 --> 00:08:52,480
collected during the symbolic analysis

252
00:08:50,470 --> 00:08:54,279
and feed it we create constraints and

253
00:08:52,480 --> 00:08:56,440
feed it through set three solar and then

254
00:08:54,279 --> 00:08:57,520
if the sense free solver finds actually

255
00:08:56,440 --> 00:08:59,620
that these constraints are fulfilled

256
00:08:57,520 --> 00:09:01,879
then it means that basically if funds

257
00:08:59,620 --> 00:09:05,279
can be received or

258
00:09:01,879 --> 00:09:08,009
from the contrary so if he passes

259
00:09:05,279 --> 00:09:10,160
analysis we move on to the to the last

260
00:09:08,009 --> 00:09:12,689
phase which is a honeypot analysis and

261
00:09:10,160 --> 00:09:14,309
it consists of several sub components

262
00:09:12,689 --> 00:09:15,540
and every sub component is responsible

263
00:09:14,309 --> 00:09:17,519
for detecting a particular honeypot

264
00:09:15,540 --> 00:09:20,099
technique and here we use just simple

265
00:09:17,519 --> 00:09:21,449
heuristics to detect the technique let's

266
00:09:20,100 --> 00:09:23,309
have a look at the balance disorder

267
00:09:21,449 --> 00:09:25,889
honeypot which is the first honeypot

268
00:09:23,309 --> 00:09:28,219
that I explained any examples we simply

269
00:09:25,889 --> 00:09:30,480
look if there exists at least one call

270
00:09:28,220 --> 00:09:33,449
that is that is part of an infeasible

271
00:09:30,480 --> 00:09:35,850
block and it's call value is equals to

272
00:09:33,449 --> 00:09:39,419
the balance plus the message value and

273
00:09:35,850 --> 00:09:42,619
yeah so if this is the case we know that

274
00:09:39,419 --> 00:09:45,720
this is the honeypot and we report

275
00:09:42,619 --> 00:09:47,429
okay so we have notice nice tool I mean

276
00:09:45,720 --> 00:09:49,499
of course need to validated so what we

277
00:09:47,429 --> 00:09:51,449
did is we crawled more than two million

278
00:09:49,499 --> 00:09:52,889
smart consular examine serum blockchain

279
00:09:51,449 --> 00:09:54,569
and we started looking at the byte code

280
00:09:52,889 --> 00:09:58,109
and we realized that actually one not

281
00:09:54,569 --> 00:09:59,998
like only 152,000 are unique in terms of

282
00:09:58,109 --> 00:10:04,109
byte code so we decided to run over to

283
00:09:59,999 --> 00:10:06,989
only on these 182,000 there were the

284
00:10:04,109 --> 00:10:08,730
first interesting insight here was that

285
00:10:06,989 --> 00:10:10,619
the cash flow analysis revealed that

286
00:10:08,730 --> 00:10:12,989
it's the only 1/3 of the smart contracts

287
00:10:10,619 --> 00:10:14,669
were capable to receive and send funds

288
00:10:12,989 --> 00:10:16,499
so this allowed us are ready to discard

289
00:10:14,669 --> 00:10:18,739
to first optics after smart contracts

290
00:10:16,499 --> 00:10:22,169
before moving to the honeypot and houses

291
00:10:18,739 --> 00:10:25,379
in the end our tool detected 460 unique

292
00:10:22,169 --> 00:10:27,480
honey pots 600 900 2 million and on the

293
00:10:25,379 --> 00:10:29,819
average of analysis took around 2

294
00:10:27,480 --> 00:10:33,179
minutes per contract and on average 91%

295
00:10:29,819 --> 00:10:34,259
code coverage all right so we had our

296
00:10:33,179 --> 00:10:36,600
results of course we need to validate

297
00:10:34,259 --> 00:10:38,040
our results so we decided to do a manual

298
00:10:36,600 --> 00:10:40,319
inspection of the source code we went to

299
00:10:38,040 --> 00:10:42,389
e4 scan and we tried to get the source

300
00:10:40,319 --> 00:10:45,029
code for the 460 in the end we were able

301
00:10:42,389 --> 00:10:47,970
to get the source code for 323 contracts

302
00:10:45,029 --> 00:10:49,470
and what we did is well we had a look at

303
00:10:47,970 --> 00:10:52,589
the source code and just simply checked

304
00:10:49,470 --> 00:10:54,419
if it was really a honeypot or not we

305
00:10:52,589 --> 00:10:56,279
found out that 282 of these contracts

306
00:10:54,419 --> 00:10:58,619
were actually honey pots so we had a

307
00:10:56,279 --> 00:11:00,720
precision on average of 87% now if you

308
00:10:58,619 --> 00:11:02,759
have a closer look at the table you see

309
00:11:00,720 --> 00:11:04,439
that actually four five of the eight

310
00:11:02,759 --> 00:11:06,779
techniques which you've actually 100

311
00:11:04,439 --> 00:11:08,009
percent precision so does 87 percent

312
00:11:06,779 --> 00:11:09,839
precision comes from the three other

313
00:11:08,009 --> 00:11:14,230
techniques where we don't perform so

314
00:11:09,839 --> 00:11:16,930
well okay so now having this data

315
00:11:14,230 --> 00:11:18,459
of actually true honey pots we decided

316
00:11:16,930 --> 00:11:20,979
to have some insights okay

317
00:11:18,459 --> 00:11:23,560
I mean how successful are they how much

318
00:11:20,980 --> 00:11:24,970
profit do they make so what we did is we

319
00:11:23,560 --> 00:11:27,189
downloaded all the transactions that

320
00:11:24,970 --> 00:11:29,440
were involved with these two 282

321
00:11:27,190 --> 00:11:31,389
contracts and then we use simple

322
00:11:29,440 --> 00:11:34,449
heuristics to basically label an address

323
00:11:31,389 --> 00:11:36,820
as either an attacker or a victim once

324
00:11:34,449 --> 00:11:40,510
we did that we used these labels to then

325
00:11:36,820 --> 00:11:44,500
label a honeypot if to label honeypot as

326
00:11:40,510 --> 00:11:47,769
our successful aborted or active so now

327
00:11:44,500 --> 00:11:49,839
we could tell some some numbers on the

328
00:11:47,769 --> 00:11:52,839
success rate as you can see the success

329
00:11:49,839 --> 00:11:54,399
rate different depends on the tech team

330
00:11:52,839 --> 00:11:56,380
so some techniques are more successful

331
00:11:54,399 --> 00:11:59,889
than others and what is also interesting

332
00:11:56,380 --> 00:12:01,449
is that 71% only managed to trap one

333
00:11:59,889 --> 00:12:03,040
single victim and this might be an

334
00:12:01,449 --> 00:12:04,599
indicator that people look at the

335
00:12:03,040 --> 00:12:06,130
transaction that happened or cute or

336
00:12:04,600 --> 00:12:07,630
smart concert before they try to exploit

337
00:12:06,130 --> 00:12:09,339
it I mean if they see that someone else

338
00:12:07,630 --> 00:12:10,480
tried to exploit it that failed and

339
00:12:09,339 --> 00:12:12,850
they're like oh okay this is there

340
00:12:10,480 --> 00:12:14,079
something fishy and what we also found

341
00:12:12,850 --> 00:12:15,940
is that the majority of them are

342
00:12:14,079 --> 00:12:17,620
attacked within the first 24 hours and

343
00:12:15,940 --> 00:12:19,390
this might be an indicated that there

344
00:12:17,620 --> 00:12:20,560
are people who are automatically looking

345
00:12:19,390 --> 00:12:22,360
at the small contracts that it's been

346
00:12:20,560 --> 00:12:23,680
deployed on the blockchain and then when

347
00:12:22,360 --> 00:12:25,360
they find one one smart contract they

348
00:12:23,680 --> 00:12:26,589
probably think like oh okay I found his

349
00:12:25,360 --> 00:12:28,180
vulnerability I should be maybe quick

350
00:12:26,589 --> 00:12:30,760
about it there might be someone else who

351
00:12:28,180 --> 00:12:32,560
also finds it also solves it and made

352
00:12:30,760 --> 00:12:36,130
might be faster than me because in the

353
00:12:32,560 --> 00:12:38,290
end it's all about money all right then

354
00:12:36,130 --> 00:12:40,029
we had to look at the bytecode itself

355
00:12:38,290 --> 00:12:41,920
and we found out that actually the

356
00:12:40,029 --> 00:12:44,740
bytecode is very diverse even within the

357
00:12:41,920 --> 00:12:46,149
same technique so just like apply

358
00:12:44,740 --> 00:12:49,000
signature based detection on on the

359
00:12:46,149 --> 00:12:52,899
bytecode on its own might be not really

360
00:12:49,000 --> 00:12:54,699
effective then we had to look at the

361
00:12:52,899 --> 00:12:56,110
popularity so in our dataset the first

362
00:12:54,699 --> 00:12:58,209
honeypot has been deployed and generally

363
00:12:56,110 --> 00:13:00,640
2017 and the highest activity was

364
00:12:58,209 --> 00:13:02,680
measured in February 2018 what does this

365
00:13:00,640 --> 00:13:04,899
suggest well basically this means that

366
00:13:02,680 --> 00:13:06,729
honey pots are recent and new trend of

367
00:13:04,899 --> 00:13:09,730
fraud and that their number are

368
00:13:06,730 --> 00:13:12,279
increasing finally we had a look at the

369
00:13:09,730 --> 00:13:13,810
profitability and what we did is we

370
00:13:12,279 --> 00:13:15,370
simply accumulated all the effort that

371
00:13:13,810 --> 00:13:19,719
was involved in these 282

372
00:13:15,370 --> 00:13:21,699
contract and we found that more than 250

373
00:13:19,720 --> 00:13:22,990
effort has been stolen and then we had

374
00:13:21,699 --> 00:13:24,790
to look at how much this ether was

375
00:13:22,990 --> 00:13:27,220
actually worth at the moment where the

376
00:13:24,790 --> 00:13:27,910
victim lost lost the Eva and we came up

377
00:13:27,220 --> 00:13:32,230
with a knock and

378
00:13:27,910 --> 00:13:35,260
profit of more than $90,000 all right so

379
00:13:32,230 --> 00:13:37,090
to conclude honey pots are an emerging

380
00:13:35,260 --> 00:13:39,490
new type of fraud and it requires for an

381
00:13:37,090 --> 00:13:41,260
investigation we already started by

382
00:13:39,490 --> 00:13:43,060
proposing the first taxonomy on honey

383
00:13:41,260 --> 00:13:44,830
pots and we created a tool called honey

384
00:13:43,060 --> 00:13:47,050
badger it's capable of detecting honey

385
00:13:44,830 --> 00:13:50,830
pots at a large scale and we identified

386
00:13:47,050 --> 00:13:51,880
690 honey pots with a position of 87% so

387
00:13:50,830 --> 00:13:55,180
there's still some room for improvement

388
00:13:51,880 --> 00:13:58,060
and what we what we also did is we

389
00:13:55,180 --> 00:14:01,140
provided some first insights on on honey

390
00:13:58,060 --> 00:14:03,310
pots we already found 240 victims and a

391
00:14:01,140 --> 00:14:07,660
profit of more than ninety thousand

392
00:14:03,310 --> 00:14:09,219
dollars for the attackers now to just

393
00:14:07,660 --> 00:14:11,110
just give you a murmur mark on this so

394
00:14:09,220 --> 00:14:13,450
these are just lower bound numbers okay

395
00:14:11,110 --> 00:14:15,130
so this only represents the tip of the

396
00:14:13,450 --> 00:14:17,710
iceberg the truth is the only focus on

397
00:14:15,130 --> 00:14:19,240
these eight different techniques and the

398
00:14:17,710 --> 00:14:22,090
truth is that there are more techniques

399
00:14:19,240 --> 00:14:25,090
out there and so for an investigation

400
00:14:22,090 --> 00:14:26,680
needs to be done there all right so all

401
00:14:25,090 --> 00:14:28,630
the code and data is available on github

402
00:14:26,680 --> 00:14:31,569
everything is public feel free to check

403
00:14:28,630 --> 00:14:33,910
it out we set up a website called honey

404
00:14:31,570 --> 00:14:36,190
badger you need or Lu where you can

405
00:14:33,910 --> 00:14:37,689
simply go to the data and the nice thing

406
00:14:36,190 --> 00:14:38,890
is actually we have a honey badger

407
00:14:37,690 --> 00:14:40,480
running on the background every day

408
00:14:38,890 --> 00:14:41,890
checking for the latest smart contracts

409
00:14:40,480 --> 00:14:43,960
that are deployed on the blockchain so

410
00:14:41,890 --> 00:14:46,720
here I was talking about 690 honey pots

411
00:14:43,960 --> 00:14:48,250
and now we already are at more than 800

412
00:14:46,720 --> 00:14:49,750
honey pots so this shows again that

413
00:14:48,250 --> 00:14:52,320
actually honey pots are being deployed

414
00:14:49,750 --> 00:14:56,280
everyday and the number is increasing

415
00:14:52,320 --> 00:14:56,280
alright and it's that's it

416
00:14:57,220 --> 00:15:02,440
[Applause]

417
00:15:00,540 --> 00:15:04,839
it's time for question

418
00:15:02,440 --> 00:15:06,970
Rick Ferro this is not so much a

419
00:15:04,840 --> 00:15:08,980
question about what you did I like what

420
00:15:06,970 --> 00:15:11,350
you did I think it's pretty cool is it

421
00:15:08,980 --> 00:15:13,000
actually illegal for people to have

422
00:15:11,350 --> 00:15:15,340
these honey pots I mean it seems like

423
00:15:13,000 --> 00:15:16,090
it's this weird gray area to me it's a

424
00:15:15,340 --> 00:15:18,160
very good question

425
00:15:16,090 --> 00:15:20,350
is it illegal because you're you're

426
00:15:18,160 --> 00:15:21,810
tricking other attackers right so right

427
00:15:20,350 --> 00:15:24,550
it is I think

428
00:15:21,810 --> 00:15:26,819
yeah and it's a cryptocurrency which is

429
00:15:24,550 --> 00:15:30,370
you know not based in any nation either

430
00:15:26,820 --> 00:15:31,900
the thing is the truth is we had to look

431
00:15:30,370 --> 00:15:35,110
at some examples and we saw that

432
00:15:31,900 --> 00:15:37,630
actually some honey pots are people

433
00:15:35,110 --> 00:15:39,730
thinking there are lotteries so so some

434
00:15:37,630 --> 00:15:42,340
really like not attackers but normal

435
00:15:39,730 --> 00:15:44,020
people are playing these things right so

436
00:15:42,340 --> 00:15:45,820
yeah so there it comes so these people

437
00:15:44,020 --> 00:15:47,800
they're innocent they are not attackers

438
00:15:45,820 --> 00:15:49,330
they just think they can win this game

439
00:15:47,800 --> 00:15:51,579
right but the truth is they will never

440
00:15:49,330 --> 00:15:53,920
be able to win so that's that's this is

441
00:15:51,580 --> 00:15:55,330
the thing so sometimes it's easy to say

442
00:15:53,920 --> 00:15:57,939
and say like okay maybe it is illegal

443
00:15:55,330 --> 00:16:00,670
because you know like normal people are

444
00:15:57,940 --> 00:16:02,860
being affected right right countries

445
00:16:00,670 --> 00:16:04,510
have laws about online gambling and so

446
00:16:02,860 --> 00:16:08,770
that would be a form of online gambling

447
00:16:04,510 --> 00:16:13,450
and furiously okay exactly yeah okay so

448
00:16:08,770 --> 00:16:15,880
enjoy from Johns Hopkins I'm here so

449
00:16:13,450 --> 00:16:17,410
very nice work I like you very much so

450
00:16:15,880 --> 00:16:19,960
we have a question when I'm reading your

451
00:16:17,410 --> 00:16:22,540
paper so you mentioned this type

452
00:16:19,960 --> 00:16:25,120
detection overflows one of the types are

453
00:16:22,540 --> 00:16:25,839
detecting so we have a question to

454
00:16:25,120 --> 00:16:28,270
question actually

455
00:16:25,840 --> 00:16:30,520
so first is it that error that made by

456
00:16:28,270 --> 00:16:32,920
the compiler that try to add an end a

457
00:16:30,520 --> 00:16:34,720
mask afterward and also is that only

458
00:16:32,920 --> 00:16:37,630
happened for 8-bit ink or could that

459
00:16:34,720 --> 00:16:41,980
happen for like a 16-bit or 2056 be

460
00:16:37,630 --> 00:16:43,330
deemed well so the the okay so the error

461
00:16:41,980 --> 00:16:46,150
that you're talking about is basically

462
00:16:43,330 --> 00:16:48,460
so before you could declare a variable

463
00:16:46,150 --> 00:16:50,470
as var like in JavaScript and the

464
00:16:48,460 --> 00:16:52,870
compiler would automatically deduce the

465
00:16:50,470 --> 00:16:54,100
type right the smallest time and then so

466
00:16:52,870 --> 00:16:55,590
many people what they had is like they

467
00:16:54,100 --> 00:16:57,850
had a for loop and they initially

468
00:16:55,590 --> 00:16:59,710
initiated to counter value to var and

469
00:16:57,850 --> 00:17:02,560
then so the compiler would take 8-bit

470
00:16:59,710 --> 00:17:05,730
right as the value but no technically

471
00:17:02,560 --> 00:17:08,349
like you could also have other values

472
00:17:05,730 --> 00:17:09,079
okay so it did happen for a larger image

473
00:17:08,349 --> 00:17:12,529
as well

474
00:17:09,079 --> 00:17:14,319
yeah okay thank you hey there art at me

475
00:17:12,529 --> 00:17:17,269
from the University of British Columbia

476
00:17:14,319 --> 00:17:18,709
since I'm working on usable security on

477
00:17:17,269 --> 00:17:21,679
the user side so I was wondering do you

478
00:17:18,709 --> 00:17:24,769
have any suggestions how to protect the

479
00:17:21,679 --> 00:17:26,750
users or like how to like annotate the

480
00:17:24,769 --> 00:17:28,250
contracts or something like that well

481
00:17:26,750 --> 00:17:30,230
that's a good question so we have been

482
00:17:28,250 --> 00:17:33,169
thinking about it and what we thought is

483
00:17:30,230 --> 00:17:34,519
maybe we could modify the wallet so for

484
00:17:33,169 --> 00:17:36,649
example we have to meet at metascan

485
00:17:34,519 --> 00:17:38,480
wallets so when many people are using

486
00:17:36,649 --> 00:17:40,219
this wallet to interact with the

487
00:17:38,480 --> 00:17:41,450
blockchain with the smart contracts see

488
00:17:40,220 --> 00:17:43,730
what you could do is like you could have

489
00:17:41,450 --> 00:17:44,809
like a background process like checking

490
00:17:43,730 --> 00:17:46,429
all the time the latest deployed

491
00:17:44,809 --> 00:17:48,019
contracts and then basically creating a

492
00:17:46,429 --> 00:17:50,059
list automatically a list of blacklist

493
00:17:48,019 --> 00:17:51,799
addresses so when normally users try to

494
00:17:50,059 --> 00:17:53,779
send transactions to these contracts the

495
00:17:51,799 --> 00:17:55,519
wallet will say like hey take care this

496
00:17:53,779 --> 00:17:56,960
might be in honeypot think before you

497
00:17:55,519 --> 00:17:58,639
actually continue and do your

498
00:17:56,960 --> 00:18:02,299
transaction this could be maybe a way to

499
00:17:58,639 --> 00:18:06,439
help improve security for normally users

500
00:18:02,299 --> 00:18:09,260
all right thanks ok ok thank you the

501
00:18:06,440 --> 00:18:11,299
question so maybe I misunderstood events

502
00:18:09,260 --> 00:18:12,950
so correctly then one of the main things

503
00:18:11,299 --> 00:18:16,429
you're looking for is for unreachable

504
00:18:12,950 --> 00:18:20,750
code for the transfer it's an indicator

505
00:18:16,429 --> 00:18:25,370
or maybe I'm wrong about that so there's

506
00:18:20,750 --> 00:18:26,870
a follow-up but that's one of the

507
00:18:25,370 --> 00:18:28,309
techniques so we had eight different

508
00:18:26,870 --> 00:18:31,010
techniques one of the techniques is

509
00:18:28,309 --> 00:18:33,980
about unreachable code yes right so then

510
00:18:31,010 --> 00:18:36,440
my question is what if the code actually

511
00:18:33,980 --> 00:18:38,929
is not completely unreachable adjust the

512
00:18:36,440 --> 00:18:40,340
probabilities that you know right so if

513
00:18:38,929 --> 00:18:44,029
you are talking about the case where I'm

514
00:18:40,340 --> 00:18:46,340
telling the consumer I mean it's not

515
00:18:44,029 --> 00:18:49,490
really just people looking to exploit me

516
00:18:46,340 --> 00:18:51,439
but which is maybe the case where we may

517
00:18:49,490 --> 00:18:53,990
not even be so interested in protecting

518
00:18:51,440 --> 00:18:56,649
you know protecting one exploiter

519
00:18:53,990 --> 00:18:59,299
against another one who cares but

520
00:18:56,649 --> 00:19:02,539
consider the case that it sees indeed

521
00:18:59,299 --> 00:19:04,820
like you said presenting itself is a so

522
00:19:02,539 --> 00:19:08,419
I'll let you know in gambling and

523
00:19:04,820 --> 00:19:11,120
actually it's not like you always lose

524
00:19:08,419 --> 00:19:13,370
just the probability of your winning as

525
00:19:11,120 --> 00:19:16,659
much it is very different from what

526
00:19:13,370 --> 00:19:18,429
people think it is then

527
00:19:16,660 --> 00:19:21,550
sounds like your code would not find it

528
00:19:18,430 --> 00:19:24,900
right yeah well if you put up I have a

529
00:19:21,550 --> 00:19:28,389
closer look at a crypto roulette wallah

530
00:19:24,900 --> 00:19:29,770
smart contract I don't know if you had a

531
00:19:28,390 --> 00:19:31,330
lot but at the very first condition

532
00:19:29,770 --> 00:19:33,250
before there was a require saying that

533
00:19:31,330 --> 00:19:34,810
so you could say that okay i if i'm

534
00:19:33,250 --> 00:19:36,220
aware of this vulnerability right of the

535
00:19:34,810 --> 00:19:38,440
inertia my struct

536
00:19:36,220 --> 00:19:39,400
i could then create a craft number that

537
00:19:38,440 --> 00:19:40,900
actually would because you know that

538
00:19:39,400 --> 00:19:42,700
message sender is going to be injected

539
00:19:40,900 --> 00:19:45,460
there so you create an account address

540
00:19:42,700 --> 00:19:47,680
okay and the account address that and

541
00:19:45,460 --> 00:19:49,480
you send this account addresses the

542
00:19:47,680 --> 00:19:51,310
parameter now the problem as the guy was

543
00:19:49,480 --> 00:19:52,600
really smart what he did is he put at

544
00:19:51,310 --> 00:19:54,220
the condition before saying that the

545
00:19:52,600 --> 00:19:56,350
number that actually you tried to guess

546
00:19:54,220 --> 00:19:58,900
is always been to be shorter than 20

547
00:19:56,350 --> 00:20:00,790
have fun in generating an address in a

548
00:19:58,900 --> 00:20:02,650
film that is like stirring sort of you

549
00:20:00,790 --> 00:20:05,440
know me there's only a mic between 0 and

550
00:20:02,650 --> 00:20:06,880
20 it's almost impossible so yes you're

551
00:20:05,440 --> 00:20:08,860
right there's still a probability you're

552
00:20:06,880 --> 00:20:10,510
right and it is almost probable and

553
00:20:08,860 --> 00:20:11,679
actually it this is a really nice fall

554
00:20:10,510 --> 00:20:13,660
because this could be maybe a way to

555
00:20:11,680 --> 00:20:15,400
have a general way to detect honey pots

556
00:20:13,660 --> 00:20:18,010
you know by just saying like okay how

557
00:20:15,400 --> 00:20:20,260
how probable it is is it to actually

558
00:20:18,010 --> 00:20:22,360
execute this part of code that actually

559
00:20:20,260 --> 00:20:24,190
is going to send money to someone if the

560
00:20:22,360 --> 00:20:25,540
program is very very low it could be an

561
00:20:24,190 --> 00:20:31,900
indicator that this is actually a honey

562
00:20:25,540 --> 00:20:32,810
pot right so let's uh think christop

563
00:20:31,900 --> 00:20:33,380
again

564
00:20:32,810 --> 00:20:37,438
[Music]

565
00:20:33,380 --> 00:20:37,439
[Applause]

