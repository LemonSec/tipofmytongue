1
00:00:10,470 --> 00:00:14,070
today I'm going to talk about the riddle

2
00:00:12,480 --> 00:00:16,200
which is the framework for post

3
00:00:14,070 --> 00:00:18,900
deployments of the way the bloating that

4
00:00:16,200 --> 00:00:20,910
they join to work with home Manso simon

5
00:00:18,900 --> 00:00:24,270
tissue and the winky we're all on

6
00:00:20,910 --> 00:00:26,730
Georgia Tech as we all know software is

7
00:00:24,270 --> 00:00:30,150
getting crazily big take a Linux kernel

8
00:00:26,730 --> 00:00:32,340
as an example for version 2.6 it has

9
00:00:30,150 --> 00:00:35,910
around 5 million lines of code which

10
00:00:32,340 --> 00:00:37,980
gets to version 4.9 the course I switch

11
00:00:35,910 --> 00:00:40,709
to seventeen point five million lines of

12
00:00:37,980 --> 00:00:43,709
code we have to ask it's also called the

13
00:00:40,710 --> 00:00:45,989
necessary to answer this question a

14
00:00:43,710 --> 00:00:48,059
previous study I buried a song normally

15
00:00:45,989 --> 00:00:52,440
uses software including Firefox and

16
00:00:48,059 --> 00:00:56,699
Chrome sage debarge's code coverage and

17
00:00:52,440 --> 00:00:59,730
they show that software unit bloated for

18
00:00:56,699 --> 00:01:01,980
static code coverage so average coverage

19
00:00:59,730 --> 00:01:05,550
is same disraeli percent which means

20
00:01:01,980 --> 00:01:07,890
there is around 27% error code since

21
00:01:05,550 --> 00:01:12,179
guess was seeing dynamically coverage

22
00:01:07,890 --> 00:01:16,619
only 21% code is actually executed for

23
00:01:12,180 --> 00:01:18,599
normal usage in the in the context of

24
00:01:16,619 --> 00:01:21,660
security bloated code increased attack

25
00:01:18,599 --> 00:01:25,340
service Aztec heartbeat as the first

26
00:01:21,660 --> 00:01:29,280
example the vulnerability in the TOS

27
00:01:25,340 --> 00:01:32,970
heartbeat extension in open SSL and this

28
00:01:29,280 --> 00:01:36,569
is extension not used by most users but

29
00:01:32,970 --> 00:01:40,470
is enabled in default the second example

30
00:01:36,569 --> 00:01:42,179
is CVE 2014 zero zero three eight this

31
00:01:40,470 --> 00:01:45,239
vulnerability is the compact assist

32
00:01:42,179 --> 00:01:48,420
receive a message function which handles

33
00:01:45,239 --> 00:01:52,380
the receive message system call 4x32 api

34
00:01:48,420 --> 00:01:54,929
x 32 APR in AP a-- that takes advantage

35
00:01:52,380 --> 00:01:57,020
of the 64-bit environment while using a

36
00:01:54,929 --> 00:02:00,720
32-bit pointers for less overhead

37
00:01:57,020 --> 00:02:03,630
however no such problem exists in real

38
00:02:00,720 --> 00:02:07,970
world and x 32 api is enabled by default

39
00:02:03,630 --> 00:02:10,649
in all major distributions like Ubuntu

40
00:02:07,970 --> 00:02:11,190
after we are lighting the problem caused

41
00:02:10,649 --> 00:02:14,250
by

42
00:02:11,190 --> 00:02:16,560
bloated code researchers have proposed

43
00:02:14,250 --> 00:02:18,380
software the bloating to remove unwanted

44
00:02:16,560 --> 00:02:21,030
code for a particular functionality

45
00:02:18,380 --> 00:02:22,950
however or existing software the

46
00:02:21,030 --> 00:02:26,250
bloating systems have the limitations

47
00:02:22,950 --> 00:02:28,350
first they all require source code but

48
00:02:26,250 --> 00:02:30,750
Soft Coated not always accessible to

49
00:02:28,350 --> 00:02:32,880
users and the even is accessible it's

50
00:02:30,750 --> 00:02:35,280
always challenging and time-consuming to

51
00:02:32,880 --> 00:02:40,049
do compile the source code for example

52
00:02:35,280 --> 00:02:41,880
takes hours to Luca pyrochlore a second

53
00:02:40,050 --> 00:02:44,280
to remove the code of a particular

54
00:02:41,880 --> 00:02:46,590
functionalities test case are given and

55
00:02:44,280 --> 00:02:49,590
they are assumed that the test case are

56
00:02:46,590 --> 00:02:51,870
complete but this assumption mostly

57
00:02:49,590 --> 00:02:54,300
fails in real world because even for

58
00:02:51,870 --> 00:02:56,070
experts it's impossible to provide a

59
00:02:54,300 --> 00:03:00,540
complete test case for a particular

60
00:02:56,070 --> 00:03:03,269
functionality so to solve these three

61
00:03:00,540 --> 00:03:05,280
limitations we proposed razor which

62
00:03:03,270 --> 00:03:08,850
performs coded redemption for deployed

63
00:03:05,280 --> 00:03:11,760
binaries without source code and instead

64
00:03:08,850 --> 00:03:14,549
of assuming the test cases are complete

65
00:03:11,760 --> 00:03:16,950
residues a heuristics to you for more

66
00:03:14,550 --> 00:03:20,520
united code for the gaben test case for

67
00:03:16,950 --> 00:03:23,640
particular functionality necessary halt

68
00:03:20,520 --> 00:03:25,860
razor works first given a Pilate to

69
00:03:23,640 --> 00:03:28,589
binary and a sum test case phase for a

70
00:03:25,860 --> 00:03:31,230
particular functionality so tracer

71
00:03:28,590 --> 00:03:34,050
belongs to binary on the test cases and

72
00:03:31,230 --> 00:03:37,470
it collects the trace and he causes the

73
00:03:34,050 --> 00:03:41,490
traced to a CFG which include all the

74
00:03:37,470 --> 00:03:44,069
executed code based on this GOG the

75
00:03:41,490 --> 00:03:45,420
pacifier use the Furious heuristics to

76
00:03:44,069 --> 00:03:49,410
expand the CFG

77
00:03:45,420 --> 00:03:51,660
to infer more code that that are not

78
00:03:49,410 --> 00:03:53,370
excluded but is a highly possible to

79
00:03:51,660 --> 00:03:56,700
share the same functionality with the

80
00:03:53,370 --> 00:04:00,240
test cases in the end the generator

81
00:03:56,700 --> 00:04:03,089
based on expansivity that a bunch of

82
00:04:00,240 --> 00:04:06,120
awards to write binary to generate a

83
00:04:03,090 --> 00:04:09,480
deposit binary that only contains the

84
00:04:06,120 --> 00:04:10,640
executed code and the evil code let's

85
00:04:09,480 --> 00:04:14,940
see the details

86
00:04:10,640 --> 00:04:17,608
razor used multiple tracers including

87
00:04:14,940 --> 00:04:20,310
both software based erasers and hardware

88
00:04:17,608 --> 00:04:22,138
based the tracer for software based the

89
00:04:20,310 --> 00:04:25,020
treasures such as animal Rio and the

90
00:04:22,139 --> 00:04:27,750
ping they provide complete race but at

91
00:04:25,020 --> 00:04:30,389
the same time they also introduced

92
00:04:27,750 --> 00:04:31,890
significant overhead on the other hand

93
00:04:30,389 --> 00:04:34,920
hardware based the tracers

94
00:04:31,890 --> 00:04:37,919
in tirupati the overhead is small but

95
00:04:34,920 --> 00:04:40,830
the trace is usually incomplete because

96
00:04:37,920 --> 00:04:43,500
of data loss problem another reason is

97
00:04:40,830 --> 00:04:45,390
that programs on the different trading

98
00:04:43,500 --> 00:04:48,630
environments may show DeVoe ginger

99
00:04:45,390 --> 00:04:51,560
passes for example for tenement real it

100
00:04:48,630 --> 00:04:55,110
what automate automatically expands the

101
00:04:51,560 --> 00:04:58,620
binaries path to the absolute path so it

102
00:04:55,110 --> 00:05:02,730
may trigger different exclusions

103
00:04:58,620 --> 00:05:05,070
compared with like in therapy the

104
00:05:02,730 --> 00:05:07,350
connector trace contains three parts the

105
00:05:05,070 --> 00:05:10,830
first part is X called x2 the basic

106
00:05:07,350 --> 00:05:12,540
blocks will recall the start address and

107
00:05:10,830 --> 00:05:16,169
end address of each basic block and

108
00:05:12,540 --> 00:05:19,140
second part is for conditional branches

109
00:05:16,170 --> 00:05:21,810
will you called what branch is taken and

110
00:05:19,140 --> 00:05:24,289
the word branch is not-taken certain

111
00:05:21,810 --> 00:05:28,050
part is for indirect calls and jumps

112
00:05:24,290 --> 00:05:31,500
forging to recall we because that will

113
00:05:28,050 --> 00:05:35,070
be called each target and also how many

114
00:05:31,500 --> 00:05:41,040
times that target is evoked for running

115
00:05:35,070 --> 00:05:44,460
the test cases after we get the executed

116
00:05:41,040 --> 00:05:47,790
code for running the test cases we need

117
00:05:44,460 --> 00:05:49,739
to infer more code because certificates

118
00:05:47,790 --> 00:05:52,710
are not complete we need to find a more

119
00:05:49,740 --> 00:05:56,700
cause that I'll relate to the test cases

120
00:05:52,710 --> 00:05:59,250
so we use for heuristics in the left to

121
00:05:56,700 --> 00:06:02,880
figure the solid part is the excluded

122
00:05:59,250 --> 00:06:07,080
code and the dashed part is the not as

123
00:06:02,880 --> 00:06:09,270
the are executed code the first furious

124
00:06:07,080 --> 00:06:11,789
we called the yellow code which means

125
00:06:09,270 --> 00:06:14,669
all the info called passed we do not

126
00:06:11,790 --> 00:06:18,060
introduce extra code we only enable it

127
00:06:14,670 --> 00:06:21,900
for example for the conditional jump in

128
00:06:18,060 --> 00:06:25,410
air well only its false branch is taken

129
00:06:21,900 --> 00:06:28,380
however the target of the true branch is

130
00:06:25,410 --> 00:06:30,540
also reachable from a or two so after

131
00:06:28,380 --> 00:06:34,650
price is heuristic the age between

132
00:06:30,540 --> 00:06:37,350
airway and the area is enabled the

133
00:06:34,650 --> 00:06:40,169
second heuristic is yellow core which

134
00:06:37,350 --> 00:06:43,050
means only only in for the coda path we

135
00:06:40,170 --> 00:06:45,320
do not allow call instructions so the

136
00:06:43,050 --> 00:06:48,260
input code called coda can only be

137
00:06:45,320 --> 00:06:53,120
the same function with some executed

138
00:06:48,260 --> 00:06:55,760
code for example for the coding el4 it

139
00:06:53,120 --> 00:06:58,490
has no call instructions so after

140
00:06:55,760 --> 00:07:02,780
applying 0 call heuristic we would

141
00:06:58,490 --> 00:07:05,450
include the code in here for the certify

142
00:07:02,780 --> 00:07:08,809
ristic is 0 library Co heuristic which

143
00:07:05,450 --> 00:07:11,090
means on the import code path we allow

144
00:07:08,810 --> 00:07:14,300
call instructions but if it cost some

145
00:07:11,090 --> 00:07:17,539
non executed library functions we do not

146
00:07:14,300 --> 00:07:20,750
allow that for example for the coda or 6

147
00:07:17,540 --> 00:07:23,990
it has a construction which cost our ABS

148
00:07:20,750 --> 00:07:26,780
well but this function not a library

149
00:07:23,990 --> 00:07:30,500
function so after playing this heuristic

150
00:07:26,780 --> 00:07:33,679
we would include the code in year 6 the

151
00:07:30,500 --> 00:07:36,590
last recalled 0 functionality heuristic

152
00:07:33,680 --> 00:07:38,930
which means on an imported code path we

153
00:07:36,590 --> 00:07:41,989
allow to call instructions to call

154
00:07:38,930 --> 00:07:44,920
library functions and even now executed

155
00:07:41,990 --> 00:07:48,110
the library functions but only if the

156
00:07:44,920 --> 00:07:49,910
total shares some lecture the same

157
00:07:48,110 --> 00:07:53,270
functionality with some called

158
00:07:49,910 --> 00:07:55,340
library functions for example the call

159
00:07:53,270 --> 00:08:00,140
instruction in your age caused a

160
00:07:55,340 --> 00:08:04,489
security it's not executed at all but in

161
00:08:00,140 --> 00:08:07,640
9 a construction cost SQL here and this

162
00:08:04,490 --> 00:08:08,960
is executed so and since its purity and

163
00:08:07,640 --> 00:08:09,680
the security of share the same

164
00:08:08,960 --> 00:08:12,349
functionality

165
00:08:09,680 --> 00:08:17,570
so after price is heuristic we won't

166
00:08:12,350 --> 00:08:21,050
include the code in it after we get all

167
00:08:17,570 --> 00:08:24,349
the executed code and a win for the more

168
00:08:21,050 --> 00:08:28,130
codes that is highly possible to similar

169
00:08:24,350 --> 00:08:29,510
functionality where the test case we we

170
00:08:28,130 --> 00:08:32,030
need to generate at the browser version

171
00:08:29,510 --> 00:08:34,819
of the boundary that contains those code

172
00:08:32,030 --> 00:08:37,760
so first with the sample binary based on

173
00:08:34,820 --> 00:08:41,090
the expensive key and then we symbolize

174
00:08:37,760 --> 00:08:43,309
each basic block then we do some

175
00:08:41,090 --> 00:08:46,540
instrumentation because of the writing

176
00:08:43,309 --> 00:08:49,189
changed the address so the target of

177
00:08:46,540 --> 00:08:53,000
interior cost the address would be not

178
00:08:49,190 --> 00:08:55,400
valid at all so we compute eyes target's

179
00:08:53,000 --> 00:08:57,500
of intercourse and jumps for ginger call

180
00:08:55,400 --> 00:09:01,160
we change it to

181
00:08:57,500 --> 00:09:04,370
if asked in comparison and and a direct

182
00:09:01,160 --> 00:09:07,130
call instruction and then we also fix

183
00:09:04,370 --> 00:09:09,320
the callback function pointers and we

184
00:09:07,130 --> 00:09:11,630
also you forced allowed control flows

185
00:09:09,320 --> 00:09:13,550
say for a conditional jump

186
00:09:11,630 --> 00:09:15,500
what branch is allows you to take and

187
00:09:13,550 --> 00:09:17,780
the water branch is not allowed to take

188
00:09:15,500 --> 00:09:21,500
and the for indirect costs what targets

189
00:09:17,780 --> 00:09:24,199
are larger tape even though we infer

190
00:09:21,500 --> 00:09:26,480
more code we still we cannot guarantee

191
00:09:24,200 --> 00:09:29,450
that all the code related to this

192
00:09:26,480 --> 00:09:31,160
particular functionality is all cubed so

193
00:09:29,450 --> 00:09:34,910
what if some missing code is triggered

194
00:09:31,160 --> 00:09:36,770
for different test cases so we we use a

195
00:09:34,910 --> 00:09:38,420
default handler so when a missing

196
00:09:36,770 --> 00:09:40,880
hodella triggered it jumps to the for

197
00:09:38,420 --> 00:09:44,780
handler which just dumps the cost acts

198
00:09:40,880 --> 00:09:45,800
and exited the excretion in the end all

199
00:09:44,780 --> 00:09:47,750
right

200
00:09:45,800 --> 00:09:50,599
compare the instrumented assembler code

201
00:09:47,750 --> 00:09:53,960
to an object file and as cops code

202
00:09:50,600 --> 00:09:56,300
section into the original binary and in

203
00:09:53,960 --> 00:10:02,300
the end it fixed IP address address in

204
00:09:56,300 --> 00:10:04,880
the GCC except table section to you

205
00:10:02,300 --> 00:10:07,880
barrage laser first we compare two with

206
00:10:04,880 --> 00:10:11,840
chisel for color reduction she saw is

207
00:10:07,880 --> 00:10:13,939
also deployed in system which is machine

208
00:10:11,840 --> 00:10:17,450
learning to deploy programs with source

209
00:10:13,940 --> 00:10:19,940
code we can see in general for both

210
00:10:17,450 --> 00:10:22,310
basic block and instruction level Chesil

211
00:10:19,940 --> 00:10:24,020
removes most removes more codes and

212
00:10:22,310 --> 00:10:26,810
reserved because it just stopped

213
00:10:24,020 --> 00:10:29,480
a more aggressive approach it even

214
00:10:26,810 --> 00:10:32,569
removes codes such as triggered by the

215
00:10:29,480 --> 00:10:35,270
test cases we were selected that is

216
00:10:32,570 --> 00:10:39,950
aggressive approach will cause some

217
00:10:35,270 --> 00:10:41,900
security problems to validate the

218
00:10:39,950 --> 00:10:44,839
functionality of the deep loaded

219
00:10:41,900 --> 00:10:49,130
libraries we launder the broad library

220
00:10:44,839 --> 00:10:51,890
bloat wineries on same test case for 44

221
00:10:49,130 --> 00:10:54,170
deep loading the boundaries we can see

222
00:10:51,890 --> 00:10:56,630
for all the binaries the bloated by

223
00:10:54,170 --> 00:10:59,270
racer after planning some heuristics

224
00:10:56,630 --> 00:11:02,089
they can learn the same test cases

225
00:10:59,270 --> 00:11:05,210
successfully without any crush or any

226
00:11:02,089 --> 00:11:09,680
law operations however for the binaries

227
00:11:05,210 --> 00:11:10,730
generated by rate by G so say if some of

228
00:11:09,680 --> 00:11:15,410
the testing

229
00:11:10,730 --> 00:11:17,480
for example for PDF - we will run a

230
00:11:15,410 --> 00:11:21,079
deploy a binary for compression or

231
00:11:17,480 --> 00:11:24,529
decompression it's where it creates some

232
00:11:21,079 --> 00:11:27,670
unwanted files on a disk and the for

233
00:11:24,529 --> 00:11:30,290
gzip retrievers infinity loop a problem

234
00:11:27,670 --> 00:11:31,519
because she so removes a conditional

235
00:11:30,290 --> 00:11:34,430
check inside the loop

236
00:11:31,519 --> 00:11:39,410
so once the execution goes in through

237
00:11:34,430 --> 00:11:42,949
that loop it never jumps out to see how

238
00:11:39,410 --> 00:11:44,990
effective our heuristics we run up the

239
00:11:42,949 --> 00:11:48,248
bloated binaries on the different test

240
00:11:44,990 --> 00:11:50,629
cases that share the same functionality

241
00:11:48,249 --> 00:11:53,300
therefore we don't apply any heuristics

242
00:11:50,629 --> 00:11:56,300
we can see that the the bloated banner

243
00:11:53,300 --> 00:11:58,399
is fail most of the test cases however

244
00:11:56,300 --> 00:12:01,790
after we apply more and more aggressive

245
00:11:58,399 --> 00:12:04,040
heuristics the resulted binaries can run

246
00:12:01,790 --> 00:12:09,019
all the different test cases without any

247
00:12:04,040 --> 00:12:12,740
crashed successfully and for co2

248
00:12:09,019 --> 00:12:15,740
reduction even we apply the most

249
00:12:12,740 --> 00:12:18,019
aggressive heuristic like zero

250
00:12:15,740 --> 00:12:20,240
functionality heuristic we can see it am

251
00:12:18,019 --> 00:12:25,639
not sacrificed too much code reduction

252
00:12:20,240 --> 00:12:29,149
benefit to evaluate the security

253
00:12:25,639 --> 00:12:33,740
benefits of the dip loaded binaries we

254
00:12:29,149 --> 00:12:36,559
first like some CVS and whichever the

255
00:12:33,740 --> 00:12:39,879
original binary is vulnerable for that

256
00:12:36,559 --> 00:12:43,009
CB which whether the dip loaded binary

257
00:12:39,879 --> 00:12:45,470
removes the vulnerable code and if it's

258
00:12:43,009 --> 00:12:48,860
the original binary and not vulnerable

259
00:12:45,470 --> 00:12:51,110
for that CBE which means some security

260
00:12:48,860 --> 00:12:53,800
patches are applied for fixing the

261
00:12:51,110 --> 00:12:56,420
vulnerability we check whether the

262
00:12:53,800 --> 00:12:59,959
bloated that the bloated binary

263
00:12:56,420 --> 00:13:02,240
remove the security patches for this 2cv

264
00:12:59,959 --> 00:13:04,989
is the original panelists are vulnerable

265
00:13:02,240 --> 00:13:07,339
and the chisel can be moved so

266
00:13:04,990 --> 00:13:10,220
vulnerable code because they are not

267
00:13:07,339 --> 00:13:12,170
triggered by the test case so the

268
00:13:10,220 --> 00:13:14,629
banlist generated the patches are not

269
00:13:12,170 --> 00:13:15,339
vulnerable but rather cannot remove the

270
00:13:14,629 --> 00:13:17,770
vulnerable code

271
00:13:15,340 --> 00:13:21,250
because they executed that for the test

272
00:13:17,770 --> 00:13:23,020
cases however however for this recipes

273
00:13:21,250 --> 00:13:24,850
the origin the panelists are not

274
00:13:23,020 --> 00:13:27,100
vulnerable because some security patches

275
00:13:24,850 --> 00:13:29,260
are already applied the four big things

276
00:13:27,100 --> 00:13:32,260
that bond abilities however chisel

277
00:13:29,260 --> 00:13:34,240
remove the security checks so the banner

278
00:13:32,260 --> 00:13:35,130
is generated she saw are actually

279
00:13:34,240 --> 00:13:37,750
vulnerable

280
00:13:35,130 --> 00:13:40,180
however laser does not remove them

281
00:13:37,750 --> 00:13:47,140
because the screens the security checks

282
00:13:40,180 --> 00:13:49,660
are executed for the test cases for the

283
00:13:47,140 --> 00:13:52,840
wrong time overhead on average rather

284
00:13:49,660 --> 00:13:54,969
introduced 1.7 slowdown the overhead

285
00:13:52,840 --> 00:13:56,890
comes from the instrumentation of

286
00:13:54,970 --> 00:13:58,930
indirect cause and jumps because we

287
00:13:56,890 --> 00:14:02,319
change it to a bunch of every else and

288
00:13:58,930 --> 00:14:07,239
the direct jumps we can see for per

289
00:14:02,320 --> 00:14:10,090
benchmark it has higher overhead like 16

290
00:14:07,240 --> 00:14:12,490
percent because per bench has some

291
00:14:10,090 --> 00:14:16,000
indirect cost that has a larger number

292
00:14:12,490 --> 00:14:17,770
set of targets so there are lots of like

293
00:14:16,000 --> 00:14:20,020
if whales and the three jump

294
00:14:17,770 --> 00:14:23,380
instrumentation is so overhead is much

295
00:14:20,020 --> 00:14:26,829
higher actually in our extended version

296
00:14:23,380 --> 00:14:30,120
we used the translation table for into a

297
00:14:26,830 --> 00:14:33,430
course so that can be optimized actually

298
00:14:30,120 --> 00:14:36,490
we also use rather to deploy to your

299
00:14:33,430 --> 00:14:39,099
software where in Firefox when you in

300
00:14:36,490 --> 00:14:42,190
Firefox 2 you load top 50 Alexa websites

301
00:14:39,100 --> 00:14:44,410
will randomly pick 2500 websites for the

302
00:14:42,190 --> 00:14:46,630
bloating and they use the other 25 web

303
00:14:44,410 --> 00:14:49,390
sites for testing we also to blow the

304
00:14:46,630 --> 00:14:51,780
foxy Raider which is not open source we

305
00:14:49,390 --> 00:14:54,640
use it to open and the scroll 55

306
00:14:51,780 --> 00:14:55,120
different PDF files and I will randomly

307
00:14:54,640 --> 00:14:57,340
pick

308
00:14:55,120 --> 00:15:00,700
55 for the bloating and the use the

309
00:14:57,340 --> 00:15:02,770
other 45 s for testing we can see after

310
00:15:00,700 --> 00:15:05,950
applying the zero library coffee will

311
00:15:02,770 --> 00:15:09,460
still the deployed version of Firefox

312
00:15:05,950 --> 00:15:12,010
and the Fox reader can all the different

313
00:15:09,460 --> 00:15:12,780
test cases successfully and at the same

314
00:15:12,010 --> 00:15:18,040
time

315
00:15:12,780 --> 00:15:19,870
achieves particular color reduction for

316
00:15:18,040 --> 00:15:22,000
the mall we also use in fold validation

317
00:15:19,870 --> 00:15:24,339
approach to apply the zero library

318
00:15:22,000 --> 00:15:27,730
cohesive on Firefox to

319
00:15:24,339 --> 00:15:30,910
see how effective our hitches heuristics

320
00:15:27,730 --> 00:15:33,850
are for real world of software with

321
00:15:30,910 --> 00:15:36,009
speech Alexes top 50 websites into five

322
00:15:33,850 --> 00:15:38,110
groups each time we select three groups

323
00:15:36,009 --> 00:15:38,680
for the bloating and they use the

324
00:15:38,110 --> 00:15:43,329
al-suri

325
00:15:38,680 --> 00:15:46,120
groups for testing we can see the

326
00:15:43,329 --> 00:15:48,160
bloated version of Firefox can read it

327
00:15:46,120 --> 00:15:50,800
can read it the most of the websites

328
00:15:48,160 --> 00:15:53,709
successfully besides two chronic cases

329
00:15:50,800 --> 00:15:56,649
whereas what press.com and the other

330
00:15:53,709 --> 00:15:59,229
twitch.tv because these two websites

331
00:15:56,649 --> 00:16:01,209
they trigger some very specifically

332
00:15:59,230 --> 00:16:04,480
called paths that cannot be triggered by

333
00:16:01,209 --> 00:16:10,268
other websites or our heuristics cannot

334
00:16:04,480 --> 00:16:12,459
count them well application for the

335
00:16:10,269 --> 00:16:15,339
bloating web browsers is per site

336
00:16:12,459 --> 00:16:18,160
browser isolation we create minimal

337
00:16:15,339 --> 00:16:20,110
versions of web browsers for forbidding

338
00:16:18,160 --> 00:16:22,779
particular websites like banking

339
00:16:20,110 --> 00:16:25,930
websites on a shopping websites or

340
00:16:22,779 --> 00:16:28,029
social media websites for example we

341
00:16:25,930 --> 00:16:30,550
upload Firefox for editing straight

342
00:16:28,029 --> 00:16:33,189
banking websites Bank of America chest

343
00:16:30,550 --> 00:16:36,790
and the West Fargo we can see we can

344
00:16:33,189 --> 00:16:40,089
generate the bloated version Firefox

345
00:16:36,790 --> 00:16:44,620
with applying the local heuristic and

346
00:16:40,089 --> 00:16:47,889
and Rico the reduction is about 68

347
00:16:44,620 --> 00:16:50,889
percent and the compared of this the

348
00:16:47,889 --> 00:16:54,339
browser version with the browser version

349
00:16:50,889 --> 00:16:59,230
for visiting all the top 50 websites we

350
00:16:54,339 --> 00:17:03,220
can remove a more code along 5% so in

351
00:16:59,230 --> 00:17:06,010
summary we prop we propose razor which

352
00:17:03,220 --> 00:17:08,110
performs color reduction for deployed

353
00:17:06,010 --> 00:17:10,720
deployed binaries without any source

354
00:17:08,109 --> 00:17:12,579
code and instead of assuming the test

355
00:17:10,720 --> 00:17:15,399
cases are complete for particular

356
00:17:12,579 --> 00:17:18,908
functionality we use heuristics to you

357
00:17:15,398 --> 00:17:22,779
for the modulated code and which has

358
00:17:18,909 --> 00:17:23,589
proved to be very effectively thank you

359
00:17:22,779 --> 00:17:26,440
for your attention

360
00:17:23,589 --> 00:17:32,149
and I'm happy to take questions now

361
00:17:26,440 --> 00:17:41,280
[Applause]

362
00:17:32,150 --> 00:17:43,250
we have a microphone or two please y'all

363
00:17:41,280 --> 00:17:47,790
gonna make me do this

364
00:17:43,250 --> 00:17:49,590
in the meantime think and I actually do

365
00:17:47,790 --> 00:17:53,550
have a real question not just the chair

366
00:17:49,590 --> 00:17:56,850
question so you're you're doing the per

367
00:17:53,550 --> 00:17:58,649
website like isolation but it's well so

368
00:17:56,850 --> 00:18:02,429
one like WordPress is like 25% of the

369
00:17:58,650 --> 00:18:03,690
web but the other thing like with I

370
00:18:02,430 --> 00:18:05,070
don't face book or all these other

371
00:18:03,690 --> 00:18:07,380
websites we're bringing like third-party

372
00:18:05,070 --> 00:18:09,000
content so whatever you may be visiting

373
00:18:07,380 --> 00:18:10,860
today tomorrow I'm loading like these

374
00:18:09,000 --> 00:18:13,710
iframes that are completely unrelated so

375
00:18:10,860 --> 00:18:15,360
how do you know you that this is like

376
00:18:13,710 --> 00:18:18,810
good Oh

377
00:18:15,360 --> 00:18:21,090
we cannot like ret that because it like

378
00:18:18,810 --> 00:18:24,450
totally depends on the features used by

379
00:18:21,090 --> 00:18:27,480
each specific website so if the websites

380
00:18:24,450 --> 00:18:30,330
are similar with the websites we told

381
00:18:27,480 --> 00:18:33,750
you fall so it's highly possible that it

382
00:18:30,330 --> 00:18:36,300
can like work for that website yeah got

383
00:18:33,750 --> 00:18:40,890
it and would source help with any of

384
00:18:36,300 --> 00:18:44,310
this for particularly for particular

385
00:18:40,890 --> 00:18:46,620
units like the only visitor like just

386
00:18:44,310 --> 00:18:49,970
some particular websites to actual

387
00:18:46,620 --> 00:18:53,250
emails like just banking websites

388
00:18:49,970 --> 00:18:56,820
they're just for like part of users yeah

389
00:18:53,250 --> 00:19:01,710
for if we did it like different kinds of

390
00:18:56,820 --> 00:19:03,899
users like like most like top well top

391
00:19:01,710 --> 00:19:06,930
of likewise on that next outside I don't

392
00:19:03,900 --> 00:19:11,120
think it to like it brings benefits for

393
00:19:06,930 --> 00:19:11,120
that yeah thanks

394
00:19:11,210 --> 00:19:17,170
it sounds like if I do have code is this

395
00:19:15,860 --> 00:19:21,350
tool gonna be helpful in suggesting

396
00:19:17,170 --> 00:19:23,480
helpful helpful target rich areas of

397
00:19:21,350 --> 00:19:26,840
code that are kind of just could be

398
00:19:23,480 --> 00:19:27,920
called in like this process is nice if

399
00:19:26,840 --> 00:19:30,290
you don't have source and you don't

400
00:19:27,920 --> 00:19:32,240
deploy the binary iteratively but if I

401
00:19:30,290 --> 00:19:35,899
am the person actually deploying this

402
00:19:32,240 --> 00:19:37,250
thing might it help me detect dead code

403
00:19:35,900 --> 00:19:38,990
and get rid of it and do a manual

404
00:19:37,250 --> 00:19:40,790
security review to make sure that even

405
00:19:38,990 --> 00:19:42,500
those like super rare events if you have

406
00:19:40,790 --> 00:19:44,379
a large enough deployed code base you

407
00:19:42,500 --> 00:19:50,800
might still hit those with this help

408
00:19:44,380 --> 00:19:55,490
yeah I think yeah with with the code

409
00:19:50,800 --> 00:19:58,490
because I think it totally depends on

410
00:19:55,490 --> 00:20:03,590
like how like how complex are like other

411
00:19:58,490 --> 00:20:06,290
problems then you have a code if if it's

412
00:20:03,590 --> 00:20:08,990
not a way to find don't have a way to

413
00:20:06,290 --> 00:20:12,260
find api's and I think it doesn't help

414
00:20:08,990 --> 00:20:14,860
yeah so it's not necessarily optimized

415
00:20:12,260 --> 00:20:17,390
for explain ability of why it's like

416
00:20:14,860 --> 00:20:20,240
mappings from this is what you're trying

417
00:20:17,390 --> 00:20:24,230
to do and this is what I called for

418
00:20:20,240 --> 00:20:28,550
mapping I think it's weird to find api's

419
00:20:24,230 --> 00:20:30,820
or documents where help not like random

420
00:20:28,550 --> 00:20:30,820
code

421
00:20:34,260 --> 00:20:38,789
[Applause]

422
00:20:35,640 --> 00:20:38,789
[Music]

