1
00:00:10,240 --> 00:00:15,340
Oh everyone thank you for the very nice

2
00:00:12,190 --> 00:00:17,740
introduction I'm here to present past

3
00:00:15,340 --> 00:00:20,349
kitten which is a collaboration with my

4
00:00:17,740 --> 00:00:23,110
colleagues from tu Darmstadt and the

5
00:00:20,349 --> 00:00:26,259
goal is to bring smart contracts to

6
00:00:23,110 --> 00:00:28,960
Bitcoin so the motivation smart

7
00:00:26,259 --> 00:00:31,599
contracts is something which was

8
00:00:28,960 --> 00:00:33,460
introduced recently by a second

9
00:00:31,599 --> 00:00:35,800
generation cryptocurrency namely

10
00:00:33,460 --> 00:00:39,160
aetherium and the smart contract is a

11
00:00:35,800 --> 00:00:41,260
piece of code which can be send deployed

12
00:00:39,160 --> 00:00:43,718
to the blockchain and then is executed

13
00:00:41,260 --> 00:00:46,718
and the correctness is guaranteed by the

14
00:00:43,719 --> 00:00:50,410
cryptocurrency a smart contract can also

15
00:00:46,719 --> 00:00:52,870
own coins and transfer coins so to give

16
00:00:50,410 --> 00:00:55,178
you a high-level idea of what a smart

17
00:00:52,870 --> 00:00:58,449
contract does I have a small example

18
00:00:55,179 --> 00:01:00,969
here a fixed set of parties in this case

19
00:00:58,449 --> 00:01:02,379
Alice Bob and Charlie want to run a card

20
00:01:00,969 --> 00:01:06,040
game and they want to use the smart

21
00:01:02,379 --> 00:01:08,408
contract to secure their their deposits

22
00:01:06,040 --> 00:01:10,840
so in the first step they sent their

23
00:01:08,409 --> 00:01:12,790
coins through smart contract then they

24
00:01:10,840 --> 00:01:15,040
run the card game sending inputs to the

25
00:01:12,790 --> 00:01:16,840
smart contract which will then verify

26
00:01:15,040 --> 00:01:19,420
the inputs and compute in your output

27
00:01:16,840 --> 00:01:22,270
which is then sent back to the parties

28
00:01:19,420 --> 00:01:24,759
or the parties can read it this can go

29
00:01:22,270 --> 00:01:26,979
on as many rounds as necessary and in

30
00:01:24,759 --> 00:01:29,200
the end the winner will be determined by

31
00:01:26,979 --> 00:01:30,659
the smart contract and the funds will be

32
00:01:29,200 --> 00:01:33,219
paid out to the winner

33
00:01:30,659 --> 00:01:34,990
so while smart contracts are very

34
00:01:33,219 --> 00:01:37,929
powerful they still have quite some

35
00:01:34,990 --> 00:01:39,789
downsides one is that every time we want

36
00:01:37,930 --> 00:01:41,399
to send input to a smart contract this

37
00:01:39,789 --> 00:01:43,840
means we have to send a transaction and

38
00:01:41,399 --> 00:01:46,180
transactions in blockchains are always

39
00:01:43,840 --> 00:01:48,100
associated with quite some time delay

40
00:01:46,180 --> 00:01:49,479
until they are confirmed and they're

41
00:01:48,100 --> 00:01:52,479
expensive we have to pay transaction

42
00:01:49,479 --> 00:01:54,880
fees another downside is that smart

43
00:01:52,479 --> 00:01:57,100
contracts by definition are publicly

44
00:01:54,880 --> 00:02:02,009
verifiable and therefore cannot store

45
00:01:57,100 --> 00:02:04,689
secrets so some some tasks for example

46
00:02:02,009 --> 00:02:08,139
shuffling cards is something that as my

47
00:02:04,689 --> 00:02:10,209
contract cannot natively do a third

48
00:02:08,139 --> 00:02:12,339
problem is that while ephyra might have

49
00:02:10,210 --> 00:02:15,850
smart contracts legacy crypto currencies

50
00:02:12,340 --> 00:02:18,220
like Bitcoin don't so in our work we

51
00:02:15,850 --> 00:02:21,850
want to bring smart contracts to Bitcoin

52
00:02:18,220 --> 00:02:23,260
by applying a key idea we don't run the

53
00:02:21,850 --> 00:02:25,450
smart contract on

54
00:02:23,260 --> 00:02:27,159
blockchain but instead we run the smart

55
00:02:25,450 --> 00:02:30,250
contract inside a trusted execution

56
00:02:27,159 --> 00:02:32,590
environment and this guarantees correct

57
00:02:30,250 --> 00:02:35,680
and private computation of the smart

58
00:02:32,590 --> 00:02:37,360
contract on top of this we still use the

59
00:02:35,680 --> 00:02:40,150
blockchain to secure the funds and

60
00:02:37,360 --> 00:02:42,250
ensure security but we try to minimize

61
00:02:40,150 --> 00:02:44,319
communication with the blockchain as

62
00:02:42,250 --> 00:02:47,260
much as possible in order to keep it

63
00:02:44,319 --> 00:02:49,298
fast and cheap before I dive into how

64
00:02:47,260 --> 00:02:50,920
this protocol works I first want to go a

65
00:02:49,299 --> 00:02:53,099
little bit deeper into the two building

66
00:02:50,920 --> 00:02:55,750
blocks that we need for the protocol

67
00:02:53,099 --> 00:02:58,599
the first one is trusted execution

68
00:02:55,750 --> 00:03:01,540
environments trusted execution

69
00:02:58,599 --> 00:03:04,060
environment is a trusted execution mode

70
00:03:01,540 --> 00:03:06,429
of a processor which is designed to

71
00:03:04,060 --> 00:03:10,209
provide correct and private computation

72
00:03:06,430 --> 00:03:12,909
of some code the TE also has an

73
00:03:10,209 --> 00:03:16,239
additional property which is it provides

74
00:03:12,909 --> 00:03:19,739
attestation so a party outside of the TE

75
00:03:16,239 --> 00:03:22,659
not having physical access to the TE can

76
00:03:19,739 --> 00:03:26,920
communicate with it and be ensured that

77
00:03:22,659 --> 00:03:30,010
this is in case indeed a real te running

78
00:03:26,920 --> 00:03:32,018
a piece of code in a secure way but the

79
00:03:30,010 --> 00:03:34,870
TE doesn't exist on its own it always

80
00:03:32,019 --> 00:03:36,730
has someone that operates it some

81
00:03:34,870 --> 00:03:39,699
environment and this is what we will

82
00:03:36,730 --> 00:03:42,608
call the operator and to keep in mind we

83
00:03:39,699 --> 00:03:44,620
will use the TE in a trusted way so we

84
00:03:42,609 --> 00:03:47,859
trust the TE but we don't trust the

85
00:03:44,620 --> 00:03:51,160
operator so the operator is also in

86
00:03:47,859 --> 00:03:52,660
charge of forwarding all inputs to the

87
00:03:51,160 --> 00:03:54,790
trusted execution environment and

88
00:03:52,660 --> 00:03:56,948
forwarding our output so it could drop

89
00:03:54,790 --> 00:03:59,888
message or modify messages could also

90
00:03:56,949 --> 00:04:01,900
just stop the te but it cannot influence

91
00:03:59,889 --> 00:04:05,109
or monitor any of the computation going

92
00:04:01,900 --> 00:04:08,199
inside the second building block that we

93
00:04:05,109 --> 00:04:11,139
need is the blockchain in particular the

94
00:04:08,199 --> 00:04:13,540
Bitcoin blockchain so in Bitcoin when we

95
00:04:11,139 --> 00:04:14,919
say someone owns a coin or in this case

96
00:04:13,540 --> 00:04:16,659
Ellis owns two coins

97
00:04:14,919 --> 00:04:18,579
this means that somewhere in the

98
00:04:16,659 --> 00:04:20,589
blockchain there exists a transaction

99
00:04:18,579 --> 00:04:23,530
which promises Ellis these two coins and

100
00:04:20,589 --> 00:04:26,830
now Ellis and only Ellis can spend these

101
00:04:23,530 --> 00:04:28,510
coins by issuing a new transaction for

102
00:04:26,830 --> 00:04:31,450
example spending one coin to Bob and one

103
00:04:28,510 --> 00:04:33,190
coin to Charlie as soon as this

104
00:04:31,450 --> 00:04:35,260
transaction is part of the blockchain

105
00:04:33,190 --> 00:04:36,460
the ownership of the coins transfer to

106
00:04:35,260 --> 00:04:39,130
Bob and Charlie and the

107
00:04:36,460 --> 00:04:42,400
transaction is considered spent so Ellis

108
00:04:39,130 --> 00:04:44,050
cannot spend the coins again on top of

109
00:04:42,400 --> 00:04:46,419
this very simple transaction we also

110
00:04:44,050 --> 00:04:49,030
need to a little bit more complicated

111
00:04:46,419 --> 00:04:51,159
transaction types the first one allows

112
00:04:49,030 --> 00:04:53,440
us to store data inside a Bitcoin

113
00:04:51,160 --> 00:04:56,650
transaction which it's very useful when

114
00:04:53,440 --> 00:04:59,759
we want to prove that we knew a special

115
00:04:56,650 --> 00:05:02,590
piece of information at a certain time

116
00:04:59,759 --> 00:05:04,960
the second transaction that we use is a

117
00:05:02,590 --> 00:05:07,960
time lock transaction this kind of

118
00:05:04,960 --> 00:05:10,090
transaction has a time lock included in

119
00:05:07,960 --> 00:05:11,560
it and before this time lock this

120
00:05:10,090 --> 00:05:13,989
transaction will be not will not be

121
00:05:11,560 --> 00:05:15,550
accepted by the blockchain but after

122
00:05:13,990 --> 00:05:16,960
this time lock everyone can publish this

123
00:05:15,550 --> 00:05:19,870
transaction and it will be considered

124
00:05:16,960 --> 00:05:22,120
valid this is a very useful tool when we

125
00:05:19,870 --> 00:05:24,849
want to force someone to act in a

126
00:05:22,120 --> 00:05:26,470
certain time frame okay so now we've

127
00:05:24,849 --> 00:05:28,630
seen the building block so let's look at

128
00:05:26,470 --> 00:05:31,090
protocol again we have these three

129
00:05:28,630 --> 00:05:33,370
parties they want to play poker then we

130
00:05:31,090 --> 00:05:36,789
have the operator who owns this single

131
00:05:33,370 --> 00:05:38,800
te and inside the CEO we run or we load

132
00:05:36,789 --> 00:05:41,650
the smart contract the poker contract in

133
00:05:38,800 --> 00:05:43,300
this case whenever the contract and the

134
00:05:41,650 --> 00:05:45,250
parties want to communicate this

135
00:05:43,300 --> 00:05:47,050
communication will be encrypted to

136
00:05:45,250 --> 00:05:50,530
prevent the operator from seeing what's

137
00:05:47,050 --> 00:05:52,900
actually happening the operator is also

138
00:05:50,530 --> 00:05:54,758
in charge of forwarding any information

139
00:05:52,900 --> 00:05:58,719
from the blockchain that the TE or the

140
00:05:54,759 --> 00:06:00,460
smart contract needs in total the

141
00:05:58,719 --> 00:06:03,460
protocol will proceed in three phases

142
00:06:00,460 --> 00:06:04,870
the first phase is a setup phase where

143
00:06:03,460 --> 00:06:07,120
we make sure that the coins are

144
00:06:04,870 --> 00:06:09,159
deposited correctly the second one is

145
00:06:07,120 --> 00:06:11,800
the actual round phase where the parties

146
00:06:09,159 --> 00:06:14,110
will start playing the game or executing

147
00:06:11,800 --> 00:06:16,630
the contract and the third phase is

148
00:06:14,110 --> 00:06:19,900
where the payout of the contract is

149
00:06:16,630 --> 00:06:22,659
actually finalized so in the first phase

150
00:06:19,900 --> 00:06:25,750
the first phase is finished when the

151
00:06:22,659 --> 00:06:28,690
party's deposited their coins or their

152
00:06:25,750 --> 00:06:30,099
buy-in into the smart concept but in

153
00:06:28,690 --> 00:06:31,719
order for them to do this they first

154
00:06:30,099 --> 00:06:34,750
need to be ensured that this is actually

155
00:06:31,719 --> 00:06:36,880
secure so the operator starts by sending

156
00:06:34,750 --> 00:06:40,349
a penalty deposit to the smart contract

157
00:06:36,880 --> 00:06:43,870
and then the smart or the te will out

158
00:06:40,349 --> 00:06:45,760
output a transaction promising this

159
00:06:43,870 --> 00:06:47,620
penalty deposit to the parties but this

160
00:06:45,760 --> 00:06:49,710
is a time lock transaction so it's not

161
00:06:47,620 --> 00:06:52,320
valid yet might become valid at a point

162
00:06:49,710 --> 00:06:53,789
right now it's not and on top of this an

163
00:06:52,320 --> 00:06:56,340
attestation quote which allows the

164
00:06:53,789 --> 00:06:58,409
parties to verify that there's actually

165
00:06:56,340 --> 00:07:00,330
in te running and it has the correct

166
00:06:58,410 --> 00:07:03,630
code running the correct smart contract

167
00:07:00,330 --> 00:07:05,130
and it has access to the coins so if the

168
00:07:03,630 --> 00:07:07,650
parties are ensured that this is the

169
00:07:05,130 --> 00:07:10,580
case they can also send their money to

170
00:07:07,650 --> 00:07:12,690
the contract and we can start playing

171
00:07:10,580 --> 00:07:15,419
this brings us to the second phase the

172
00:07:12,690 --> 00:07:17,580
round face it's rather simple what

173
00:07:15,419 --> 00:07:19,590
happens here just in the previous just

174
00:07:17,580 --> 00:07:21,508
like in the previous example the people

175
00:07:19,590 --> 00:07:24,119
the party sent their inputs to the smart

176
00:07:21,509 --> 00:07:26,430
contract but in an encrypted fashion

177
00:07:24,120 --> 00:07:29,250
such that the operator cannot see the

178
00:07:26,430 --> 00:07:30,660
inputs and the smart contract outputs

179
00:07:29,250 --> 00:07:33,479
round output sends it back to the

180
00:07:30,660 --> 00:07:36,560
parties this can be repeated as many

181
00:07:33,479 --> 00:07:40,680
times as necessary for the protocol and

182
00:07:36,560 --> 00:07:42,750
in contrast to the previous example we

183
00:07:40,680 --> 00:07:44,340
don't have to send messages through the

184
00:07:42,750 --> 00:07:46,020
blockchain here there's no transactions

185
00:07:44,340 --> 00:07:51,090
this is just off chain messages between

186
00:07:46,020 --> 00:07:53,880
te and parties okay so in the end we

187
00:07:51,090 --> 00:07:56,969
will finally have an output and the

188
00:07:53,880 --> 00:07:59,159
winner in this case charlie won and the

189
00:07:56,970 --> 00:08:00,930
te will make sure that the winner gets

190
00:07:59,159 --> 00:08:03,300
his money by outputting a final

191
00:08:00,930 --> 00:08:05,760
transaction which promises three coins

192
00:08:03,300 --> 00:08:08,310
to the winner Charlie and the deposit of

193
00:08:05,760 --> 00:08:10,830
the operator vector operator this

194
00:08:08,310 --> 00:08:12,270
transaction now gives to the operator

195
00:08:10,830 --> 00:08:15,570
and the operator will publish it in

196
00:08:12,270 --> 00:08:17,370
order to get his deposit back and by

197
00:08:15,570 --> 00:08:19,320
this the protocol is finished and we've

198
00:08:17,370 --> 00:08:22,710
seen that it's actually rather fast and

199
00:08:19,320 --> 00:08:25,650
easy to execute but so far we've only

200
00:08:22,710 --> 00:08:27,448
seen the honest case everyone was no one

201
00:08:25,650 --> 00:08:29,370
was behaving maliciously and that's well

202
00:08:27,449 --> 00:08:33,529
not very good for understanding the

203
00:08:29,370 --> 00:08:36,270
security so to give you a more detailed

204
00:08:33,529 --> 00:08:37,860
to give you a more detailed intuition

205
00:08:36,270 --> 00:08:39,838
about why this is secure I'm going to

206
00:08:37,860 --> 00:08:41,610
look into the case that the operator is

207
00:08:39,839 --> 00:08:44,850
malicious and the case that the parties

208
00:08:41,610 --> 00:08:46,829
are malicious okay the first case is

209
00:08:44,850 --> 00:08:49,380
where we have a malicious operator so

210
00:08:46,829 --> 00:08:51,060
very easy attack this operator could do

211
00:08:49,380 --> 00:08:53,010
is you could just stop running the

212
00:08:51,060 --> 00:08:56,969
system he could stop taking inputs and

213
00:08:53,010 --> 00:08:58,470
stop the in case for this case we have

214
00:08:56,970 --> 00:09:01,470
this penalty transaction that was out

215
00:08:58,470 --> 00:09:03,570
put it in the first round and if he

216
00:09:01,470 --> 00:09:05,940
stops running the protocol at some point

217
00:09:03,570 --> 00:09:07,350
this timeout will expire and the parties

218
00:09:05,940 --> 00:09:10,620
can send his transaction to the

219
00:09:07,350 --> 00:09:12,360
blockchain this will take the points of

220
00:09:10,620 --> 00:09:14,339
the deposit of the operator and give it

221
00:09:12,360 --> 00:09:16,440
back to the parties so at this point

222
00:09:14,339 --> 00:09:18,900
Alice Bob and Charlie invested one coin

223
00:09:16,440 --> 00:09:21,300
got one coin back so they are good but

224
00:09:18,900 --> 00:09:22,980
the operator deposited three coins in

225
00:09:21,300 --> 00:09:27,000
the beginning and he didn't get anything

226
00:09:22,980 --> 00:09:29,250
back so he lost quite some money okay

227
00:09:27,000 --> 00:09:30,660
good so this is what protects against

228
00:09:29,250 --> 00:09:33,270
the malicious operator what about

229
00:09:30,660 --> 00:09:35,579
malicious parties let's consider here

230
00:09:33,270 --> 00:09:37,500
that Ellis now stops playing then the

231
00:09:35,579 --> 00:09:39,750
operator in order to get his money his

232
00:09:37,500 --> 00:09:43,170
deposit back needs to prove that Ellis

233
00:09:39,750 --> 00:09:45,900
stops playing to the te or to the smart

234
00:09:43,170 --> 00:09:48,329
contract and he does this by challenging

235
00:09:45,900 --> 00:09:50,640
Ellis on chenny outputs of transaction

236
00:09:48,329 --> 00:09:53,489
which sends a very small amount of coins

237
00:09:50,640 --> 00:09:55,980
to Ellis and includes the data of the

238
00:09:53,490 --> 00:09:57,240
output of the last round and now Ellis

239
00:09:55,980 --> 00:09:59,130
is supposed to respond to this

240
00:09:57,240 --> 00:10:00,900
transaction by sending this very small

241
00:09:59,130 --> 00:10:03,180
amount of coins back to the operator and

242
00:10:00,900 --> 00:10:06,630
providing the data of the input to the

243
00:10:03,180 --> 00:10:08,400
next round the sequence of blocks that

244
00:10:06,630 --> 00:10:10,110
includes these two transactions we will

245
00:10:08,400 --> 00:10:12,750
now call the option evidence and this

246
00:10:10,110 --> 00:10:15,779
can prove who of the parties misbehaved

247
00:10:12,750 --> 00:10:18,300
if there is no challenge well then the

248
00:10:15,779 --> 00:10:20,730
operator didn't ask for any challenge

249
00:10:18,300 --> 00:10:22,140
and it's obviously malicious if the

250
00:10:20,730 --> 00:10:22,740
challenge is there but there's no

251
00:10:22,140 --> 00:10:25,589
response

252
00:10:22,740 --> 00:10:27,720
then Ellis is the one at fault and has

253
00:10:25,589 --> 00:10:29,339
to be punished and in the third case

254
00:10:27,720 --> 00:10:30,900
when we have a challenge and a response

255
00:10:29,339 --> 00:10:34,529
then we have all the information to

256
00:10:30,900 --> 00:10:36,839
continue playing so in this case Ellis

257
00:10:34,529 --> 00:10:39,270
was malicious so the response is missing

258
00:10:36,839 --> 00:10:41,839
the operator proves this by sending the

259
00:10:39,270 --> 00:10:44,520
sequence of blocks to 30 e

260
00:10:41,839 --> 00:10:46,350
which will verify that indeed there is a

261
00:10:44,520 --> 00:10:49,069
challenge but there is no response and

262
00:10:46,350 --> 00:10:51,630
we'll output another final transaction

263
00:10:49,070 --> 00:10:54,000
sending the deposit back to the operator

264
00:10:51,630 --> 00:10:56,130
and Bob's and Charlie's coins back to

265
00:10:54,000 --> 00:10:58,949
them but Alice's coins are now locked

266
00:10:56,130 --> 00:11:02,630
forever and cannot cannot be accessed so

267
00:10:58,949 --> 00:11:04,770
Ellis lost her deposit with this move of

268
00:11:02,630 --> 00:11:06,700
course security is a little bit more

269
00:11:04,770 --> 00:11:08,800
complex than these two examples

270
00:11:06,700 --> 00:11:12,040
and in our work we prove three security

271
00:11:08,800 --> 00:11:15,069
properties formally secure the first one

272
00:11:12,040 --> 00:11:16,959
is correctness stating that the contract

273
00:11:15,070 --> 00:11:19,900
will be executed correctly no one can

274
00:11:16,960 --> 00:11:22,240
cheat no one can influence the outcome

275
00:11:19,900 --> 00:11:24,819
of the game the second property is

276
00:11:22,240 --> 00:11:27,730
fairness saying that either the game

277
00:11:24,820 --> 00:11:30,070
will finish and the correct payout will

278
00:11:27,730 --> 00:11:32,470
be enforced or if the game does not

279
00:11:30,070 --> 00:11:35,320
finish then every honest party gets

280
00:11:32,470 --> 00:11:37,780
their input back and the malicious party

281
00:11:35,320 --> 00:11:40,060
is punished the third property is

282
00:11:37,780 --> 00:11:43,000
important for the operator because why

283
00:11:40,060 --> 00:11:44,800
would he be part of such a game if he

284
00:11:43,000 --> 00:11:46,720
doesn't have the security that he will

285
00:11:44,800 --> 00:11:52,810
get his deposit back if he behaves

286
00:11:46,720 --> 00:11:57,520
honestly we also evaluated how practical

287
00:11:52,810 --> 00:11:59,530
this this scheme is and in blockchain

288
00:11:57,520 --> 00:12:02,829
Systems fees is quite often a good

289
00:11:59,530 --> 00:12:05,709
measurement on how good such protocols

290
00:12:02,830 --> 00:12:06,910
are so we have two kinds of of pain or

291
00:12:05,710 --> 00:12:09,460
two kinds of fee that we have to

292
00:12:06,910 --> 00:12:11,050
consider in this case the first one is

293
00:12:09,460 --> 00:12:13,210
actually the collateral costs of the

294
00:12:11,050 --> 00:12:15,219
operator so the Colet the operator this

295
00:12:13,210 --> 00:12:19,030
penalty deposit that we had in the first

296
00:12:15,220 --> 00:12:21,790
phase has to be at least as large as the

297
00:12:19,030 --> 00:12:23,230
sum of all the posits of the parties so

298
00:12:21,790 --> 00:12:25,420
that's quite some money the operator has

299
00:12:23,230 --> 00:12:29,160
to lock for the duration of this game

300
00:12:25,420 --> 00:12:32,170
and then we also have transaction fees

301
00:12:29,160 --> 00:12:34,420
which vary depending on how fast the

302
00:12:32,170 --> 00:12:37,360
transaction is supposed to be part of

303
00:12:34,420 --> 00:12:39,040
the blockchain so if the block if the

304
00:12:37,360 --> 00:12:40,540
transaction has to be part of the

305
00:12:39,040 --> 00:12:42,430
blockchain very fast let's say in the

306
00:12:40,540 --> 00:12:44,709
next block then the cost is around five

307
00:12:42,430 --> 00:12:48,790
times as high as if it has to be within

308
00:12:44,710 --> 00:12:50,320
the next six blocks in general the

309
00:12:48,790 --> 00:12:53,410
transaction fee let's look at the flow

310
00:12:50,320 --> 00:12:55,390
cases rather rather low around 10 to 17

311
00:12:53,410 --> 00:12:57,939
cents per party and only the output

312
00:12:55,390 --> 00:12:59,920
transaction is a little bit more because

313
00:12:57,940 --> 00:13:02,350
the output transaction also includes the

314
00:12:59,920 --> 00:13:04,949
data of the final state of the game so

315
00:13:02,350 --> 00:13:07,210
who won what will his cards for example

316
00:13:04,950 --> 00:13:10,140
but this is a cost that is shared

317
00:13:07,210 --> 00:13:11,970
between our users and

318
00:13:10,140 --> 00:13:15,060
then the parties also have to pay the

319
00:13:11,970 --> 00:13:18,510
operator for his service and this fee

320
00:13:15,060 --> 00:13:20,339
will be at least the collateral cost so

321
00:13:18,510 --> 00:13:22,649
how much the operator will actually lose

322
00:13:20,339 --> 00:13:25,140
from loss not using his collateral for

323
00:13:22,649 --> 00:13:27,720
something else and the fees he has to

324
00:13:25,140 --> 00:13:31,260
pay for for this execution and maybe a

325
00:13:27,720 --> 00:13:35,519
little bit on top I also want to give

326
00:13:31,260 --> 00:13:37,079
you a comparison how fast get in or what

327
00:13:35,519 --> 00:13:41,220
fast Keaton does differently to some

328
00:13:37,079 --> 00:13:43,290
existing solutions so compared to

329
00:13:41,220 --> 00:13:45,209
Bitcoin of course fast gating is much

330
00:13:43,290 --> 00:13:47,790
much expressive because instead of just

331
00:13:45,209 --> 00:13:49,768
Bitcoin scripts it can do full smart

332
00:13:47,790 --> 00:13:51,930
contracts but there's a line of work

333
00:13:49,769 --> 00:13:55,740
combining Bitcoin with multi-party

334
00:13:51,930 --> 00:13:58,410
computation which allows people to run

335
00:13:55,740 --> 00:14:02,700
generic and PC protocols like lotteries

336
00:13:58,410 --> 00:14:05,279
poker but also voting and these

337
00:14:02,700 --> 00:14:08,040
protocols often suffer from high quite a

338
00:14:05,279 --> 00:14:09,660
high communication complexity and they

339
00:14:08,040 --> 00:14:11,310
need to store a lot of collateral so

340
00:14:09,660 --> 00:14:13,500
sometimes the party might want to play

341
00:14:11,310 --> 00:14:17,219
for one coin but then has to store ten

342
00:14:13,500 --> 00:14:19,500
coins as deposit of course we could also

343
00:14:17,220 --> 00:14:21,300
run smart contracts on a cerium which

344
00:14:19,500 --> 00:14:23,699
have already two incomplete smart

345
00:14:21,300 --> 00:14:26,099
contracts but in contrast to fast Khitan

346
00:14:23,699 --> 00:14:27,540
they don't have off chain execution so

347
00:14:26,100 --> 00:14:31,880
we have to talk to the option for every

348
00:14:27,540 --> 00:14:35,099
input and they don't have private state

349
00:14:31,880 --> 00:14:38,459
third line of work is outsourcing

350
00:14:35,100 --> 00:14:40,470
function evaluation to a set of parties

351
00:14:38,459 --> 00:14:45,268
these parties could be semi trusted

352
00:14:40,470 --> 00:14:48,329
users or tes but the idea is to to get

353
00:14:45,269 --> 00:14:50,459
the complicated contract evaluation of

354
00:14:48,329 --> 00:14:55,680
the chain to some other place the

355
00:14:50,459 --> 00:14:57,540
problem or the the overall similar so

356
00:14:55,680 --> 00:14:59,579
what all of these solutions have in

357
00:14:57,540 --> 00:15:01,680
common is that all these different

358
00:14:59,579 --> 00:15:03,989
parties need to reach consensus over the

359
00:15:01,680 --> 00:15:06,300
state of the of the app of the contract

360
00:15:03,990 --> 00:15:09,300
after every move so there needs to be

361
00:15:06,300 --> 00:15:10,800
one transaction after every round in

362
00:15:09,300 --> 00:15:12,930
fast Katyn we don't have any

363
00:15:10,800 --> 00:15:16,829
transactions per round so much less

364
00:15:12,930 --> 00:15:18,449
transactions so let me conclude by

365
00:15:16,829 --> 00:15:19,890
recalling what we actually need to build

366
00:15:18,449 --> 00:15:22,800
the fast getting protocol and what we

367
00:15:19,890 --> 00:15:24,480
get so in order to build this we need

368
00:15:22,800 --> 00:15:26,748
blockchain which has a very limited

369
00:15:24,480 --> 00:15:28,800
function set so it only needs to have

370
00:15:26,749 --> 00:15:32,009
transactions where we can store data and

371
00:15:28,800 --> 00:15:34,469
we can have time locks and we need a

372
00:15:32,009 --> 00:15:36,720
trusted execution environment and an

373
00:15:34,470 --> 00:15:38,100
operator that runs it this operator

374
00:15:36,720 --> 00:15:41,389
actually could also be one of the

375
00:15:38,100 --> 00:15:45,389
parties that run the smart contract and

376
00:15:41,389 --> 00:15:47,579
what we get from this is we can we can

377
00:15:45,389 --> 00:15:49,739
have smart contracts on Bitcoin that are

378
00:15:47,579 --> 00:15:51,689
fast because we have off giant execution

379
00:15:49,739 --> 00:15:55,499
and we have this additional privacy

380
00:15:51,689 --> 00:15:57,569
input our privacy feature and we also

381
00:15:55,499 --> 00:16:00,660
prove that this is secure regarding to

382
00:15:57,569 --> 00:16:09,599
the three security properties so thank

383
00:16:00,660 --> 00:16:11,279
you very much for attention thank you

384
00:16:09,600 --> 00:16:15,049
very much very nice walk and

385
00:16:11,279 --> 00:16:18,179
presentation - just a small question so

386
00:16:15,049 --> 00:16:20,369
in the case of colluding parties you say

387
00:16:18,179 --> 00:16:23,369
the protocol is robust for multiple

388
00:16:20,369 --> 00:16:25,889
coding parties right but if you do

389
00:16:23,369 --> 00:16:29,639
example correctly and then if two

390
00:16:25,889 --> 00:16:31,670
parties are colluding Ellison Bob then

391
00:16:29,639 --> 00:16:35,009
they can reduce the damage to the

392
00:16:31,670 --> 00:16:37,709
smaller of the deposit of Alice or Bob

393
00:16:35,009 --> 00:16:39,779
so that yes there will be a penalty but

394
00:16:37,709 --> 00:16:43,439
it will not be the complete deposit

395
00:16:39,779 --> 00:16:46,829
which is easy to fix so by you know by

396
00:16:43,439 --> 00:16:49,559
having a larger deposit and the parties

397
00:16:46,829 --> 00:16:52,319
get the part of the deposit which

398
00:16:49,559 --> 00:16:55,939
herself just to for me so if every party

399
00:16:52,319 --> 00:16:58,979
deposits the maximal amount of every

400
00:16:55,939 --> 00:17:01,679
possible collusion and then they just

401
00:16:58,980 --> 00:17:06,510
get the rest not including the project

402
00:17:01,679 --> 00:17:09,148
the investors themselves so it's correct

403
00:17:06,510 --> 00:17:11,309
that we don't have guaranteed execution

404
00:17:09,148 --> 00:17:14,039
and if multiple parties collude they

405
00:17:11,309 --> 00:17:16,020
could prevent the end of a game in order

406
00:17:14,039 --> 00:17:17,429
to get something from this what we can

407
00:17:16,020 --> 00:17:20,250
ensure is that one of these parties will

408
00:17:17,429 --> 00:17:22,740
be punished but the idea is or we try to

409
00:17:20,250 --> 00:17:24,388
have the same model as a smart contract

410
00:17:22,740 --> 00:17:26,220
any theorem if I have a smart contract

411
00:17:24,388 --> 00:17:29,850
which allows collusion like another

412
00:17:26,220 --> 00:17:32,100
poker contract then this is except this

413
00:17:29,850 --> 00:17:33,959
is open for collusion on a serum and it

414
00:17:32,100 --> 00:17:36,360
will be open to collusion

415
00:17:33,960 --> 00:17:37,950
a text in here well I don't know if you

416
00:17:36,360 --> 00:17:40,789
understood my proposal it's a very

417
00:17:37,950 --> 00:17:43,140
simple way in which you could actually

418
00:17:40,789 --> 00:17:45,059
solve this I mean and get to the

419
00:17:43,140 --> 00:17:48,600
situation where if there is collusion

420
00:17:45,059 --> 00:17:51,450
the colluding part is definitely to our

421
00:17:48,600 --> 00:17:57,500
disadvantage to pay it so it's it's a

422
00:17:51,450 --> 00:17:59,940
very small change so you can you just

423
00:17:57,500 --> 00:18:03,510
exactly you just if the deposit will be

424
00:17:59,940 --> 00:18:06,210
the sum the total amount of the any

425
00:18:03,510 --> 00:18:08,490
potential collusion like for example any

426
00:18:06,210 --> 00:18:10,409
two parties if two the amounts of the

427
00:18:08,490 --> 00:18:12,960
same and then you just get back your

428
00:18:10,409 --> 00:18:19,830
part if you didn't if you progressed

429
00:18:12,960 --> 00:18:22,549
it's easy all right okay thank you hi

430
00:18:19,830 --> 00:18:26,580
I'm sad for University of South Florida

431
00:18:22,549 --> 00:18:28,679
so I have just one question so when you

432
00:18:26,580 --> 00:18:30,539
have an execution fragment running you

433
00:18:28,679 --> 00:18:32,549
can always introduce dependencies to

434
00:18:30,539 --> 00:18:34,799
ensure fairness correctness or balance

435
00:18:32,549 --> 00:18:37,230
security but you also mentioned that in

436
00:18:34,799 --> 00:18:40,679
before the start of the execution all

437
00:18:37,230 --> 00:18:42,809
the parties need to ensure that smart

438
00:18:40,679 --> 00:18:45,899
contract is running and is has the

439
00:18:42,809 --> 00:18:48,210
correct logic not to have to ensure that

440
00:18:45,899 --> 00:18:50,729
you need to have consensus that the

441
00:18:48,210 --> 00:18:53,640
smart contract is correct or the logic

442
00:18:50,730 --> 00:18:55,470
is there and you're doing often on the

443
00:18:53,640 --> 00:18:57,299
chain on the block and you have a

444
00:18:55,470 --> 00:19:00,600
consensus algorithm running that can

445
00:18:57,299 --> 00:19:02,190
ensure that but but often you need to

446
00:19:00,600 --> 00:19:05,340
have another consensus to make sure that

447
00:19:02,190 --> 00:19:07,380
before an execution starts there is all

448
00:19:05,340 --> 00:19:09,629
the participants have the correct view

449
00:19:07,380 --> 00:19:12,960
that whatever the smart contract has is

450
00:19:09,630 --> 00:19:15,419
it it's correct right so the parties end

451
00:19:12,960 --> 00:19:18,480
operator as well actually have to agree

452
00:19:15,419 --> 00:19:20,850
that a specific piece of code has once

453
00:19:18,480 --> 00:19:22,470
should be executed inside the te so the

454
00:19:20,850 --> 00:19:25,020
the code of the smart contract needs to

455
00:19:22,470 --> 00:19:27,270
be everyone has to have the same d1 that

456
00:19:25,020 --> 00:19:28,950
and if they can agree on this code then

457
00:19:27,270 --> 00:19:30,330
they can start this protocol so how do

458
00:19:28,950 --> 00:19:32,399
you ensure this agreement you need to

459
00:19:30,330 --> 00:19:33,658
have consensus algorithms there to make

460
00:19:32,399 --> 00:19:35,850
sure that there is they have an

461
00:19:33,659 --> 00:19:39,360
agreement on that well I would say that

462
00:19:35,850 --> 00:19:40,949
this is the same as in running a normal

463
00:19:39,360 --> 00:19:42,240
smart contract on a theorem for example

464
00:19:40,950 --> 00:19:44,220
you need to agree on what kind of

465
00:19:42,240 --> 00:19:47,580
contract you want to run and then you

466
00:19:44,220 --> 00:19:47,970
can start running it or you operator

467
00:19:47,580 --> 00:19:49,500
could

468
00:19:47,970 --> 00:19:51,630
example offer he has a poker game you

469
00:19:49,500 --> 00:19:54,120
can run we can take it offline and

470
00:19:51,630 --> 00:19:56,630
interested faster let's let's thank Lisa

471
00:19:54,120 --> 00:19:56,629
again

