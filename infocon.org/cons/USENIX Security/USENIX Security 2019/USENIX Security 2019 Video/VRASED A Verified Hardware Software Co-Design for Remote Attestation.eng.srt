1
00:00:11,099 --> 00:00:15,629
all right so today I'm going to be

2
00:00:13,170 --> 00:00:17,610
presenting about raised even though

3
00:00:15,629 --> 00:00:20,070
Ginsu dick is in this paper this is not

4
00:00:17,610 --> 00:00:23,550
a new fancy biometric as pointed out in

5
00:00:20,070 --> 00:00:25,710
the previous talks and this is gonna in

6
00:00:23,550 --> 00:00:28,529
this paper I'm gonna talk about how to

7
00:00:25,710 --> 00:00:29,970
design implement and formally verify an

8
00:00:28,529 --> 00:00:33,000
architecture for remote attestation

9
00:00:29,970 --> 00:00:35,339
targeting low-end IOT devices such as

10
00:00:33,000 --> 00:00:37,440
sensors and actuators so to get started

11
00:00:35,339 --> 00:00:39,629
with some motivation it's not hard to

12
00:00:37,440 --> 00:00:42,150
find in the news and also new papers

13
00:00:39,629 --> 00:00:45,059
being published about attacks and mower

14
00:00:42,150 --> 00:00:46,860
infestation on IOT devices and to a

15
00:00:45,059 --> 00:00:48,899
large extent this is because the the

16
00:00:46,860 --> 00:00:51,210
common techniques and security services

17
00:00:48,899 --> 00:00:53,910
that are designed for standard computers

18
00:00:51,210 --> 00:00:57,000
and service service are not applicable

19
00:00:53,910 --> 00:00:59,160
to to this landscape of devices and

20
00:00:57,000 --> 00:01:01,829
within the landscape of IOT devices

21
00:00:59,160 --> 00:01:04,319
perhaps the most challenged devices to

22
00:01:01,829 --> 00:01:06,360
deal with are the low end devices these

23
00:01:04,319 --> 00:01:09,898
are are intentionally designed for low

24
00:01:06,360 --> 00:01:12,090
cost low energy and small size they have

25
00:01:09,899 --> 00:01:14,820
a few kilobytes for program and data

26
00:01:12,090 --> 00:01:16,950
memory they run on single core CPUs with

27
00:01:14,820 --> 00:01:18,779
a few megahertz of clock frequency

28
00:01:16,950 --> 00:01:20,670
simple communication interfaces they

29
00:01:18,780 --> 00:01:23,549
typically run bare metal so they can't

30
00:01:20,670 --> 00:01:26,549
count on any security that's the thing

31
00:01:23,549 --> 00:01:28,229
from the operating system an examples of

32
00:01:26,549 --> 00:01:32,430
these devices are the ultra low energy

33
00:01:28,229 --> 00:01:34,320
texas instrument msp430 and the AVR 18

34
00:01:32,430 --> 00:01:37,049
mega 32 AVR 80 mega is the one that you

35
00:01:34,320 --> 00:01:41,579
can find on the popular arduino

36
00:01:37,049 --> 00:01:43,680
platforms so in this class of devices

37
00:01:41,579 --> 00:01:46,048
preventing malware infection is hard and

38
00:01:43,680 --> 00:01:47,549
expensive to run a single signature

39
00:01:46,049 --> 00:01:50,310
computation typically takes a couple of

40
00:01:47,549 --> 00:01:53,189
seconds and probably the entire RAM of

41
00:01:50,310 --> 00:01:55,549
the device to execute so you imagine

42
00:01:53,189 --> 00:01:58,110
running some fancy mower prevention

43
00:01:55,549 --> 00:02:00,630
technique that you've seen in regular

44
00:01:58,110 --> 00:02:02,340
computers so if we cannot prevent a

45
00:02:00,630 --> 00:02:05,009
modder infection the next best thing we

46
00:02:02,340 --> 00:02:06,780
can do is to detect when Mauer has

47
00:02:05,009 --> 00:02:09,660
infected the device and then you can

48
00:02:06,780 --> 00:02:12,110
take out of band major measures to bring

49
00:02:09,660 --> 00:02:15,120
the device back to a secure state and

50
00:02:12,110 --> 00:02:16,829
our detection typically involves a more

51
00:02:15,120 --> 00:02:18,780
detection on remote devices typically

52
00:02:16,829 --> 00:02:20,579
involves some form of remote attestation

53
00:02:18,780 --> 00:02:22,310
remote the decisions are to party

54
00:02:20,579 --> 00:02:24,170
protocol executed between

55
00:02:22,310 --> 00:02:27,230
trusted more

56
00:02:24,170 --> 00:02:28,940
for verifier and approver that is

57
00:02:27,230 --> 00:02:30,950
potentially compromised so in our cases

58
00:02:28,940 --> 00:02:34,340
approver is this low-end IOT

59
00:02:30,950 --> 00:02:36,049
cyber-physical system device and the

60
00:02:34,340 --> 00:02:38,630
goal is to measure the memory of the

61
00:02:36,050 --> 00:02:40,069
device to figure out what's in what's

62
00:02:38,630 --> 00:02:43,489
the current software state of this

63
00:02:40,069 --> 00:02:46,220
device so and remote the decisions

64
00:02:43,489 --> 00:02:48,170
implemented is a simple challenge

65
00:02:46,220 --> 00:02:49,459
response protocol the verifier will

66
00:02:48,170 --> 00:02:52,220
issue a challenge and the prover is

67
00:02:49,459 --> 00:02:53,840
responsible for computing and integrity

68
00:02:52,220 --> 00:02:56,569
ensuring function over its memory for

69
00:02:53,840 --> 00:02:58,819
example an H Mac right and and then the

70
00:02:56,569 --> 00:03:00,980
the the prover will compute an H Mac on

71
00:02:58,819 --> 00:03:02,179
the challenge and the memory and return

72
00:03:00,980 --> 00:03:03,980
the response to the verifier the

73
00:03:02,180 --> 00:03:05,810
verifier can check if this result

74
00:03:03,980 --> 00:03:07,488
corresponds to the expected memory value

75
00:03:05,810 --> 00:03:08,000
on the device and all of this is too

76
00:03:07,489 --> 00:03:11,120
easy

77
00:03:08,000 --> 00:03:13,220
if you don't consider that the adversary

78
00:03:11,120 --> 00:03:15,799
might have full control of the soft

79
00:03:13,220 --> 00:03:19,130
approvers software state so this means

80
00:03:15,799 --> 00:03:23,350
that whatever memory did whatever memory

81
00:03:19,130 --> 00:03:26,390
that is not explicitly perc protected by

82
00:03:23,350 --> 00:03:30,940
secure Hardware trusted Hardware can be

83
00:03:26,390 --> 00:03:32,869
compromised and the the typical

84
00:03:30,940 --> 00:03:34,609
typically in the literature you find

85
00:03:32,870 --> 00:03:36,640
three types of remote attestation

86
00:03:34,609 --> 00:03:39,590
hardware based typically involves a

87
00:03:36,640 --> 00:03:41,149
secure code process or TPM and this

88
00:03:39,590 --> 00:03:43,070
techniques they work but they are too

89
00:03:41,150 --> 00:03:45,019
expensive for the kind of devices there

90
00:03:43,070 --> 00:03:46,940
that we are targeting here for example

91
00:03:45,019 --> 00:03:49,070
we looked up and the cheapest TPM that

92
00:03:46,940 --> 00:03:50,690
we could find this itself ten times more

93
00:03:49,070 --> 00:03:53,209
expensive than the microcontroller that

94
00:03:50,690 --> 00:03:54,709
we're trying to secure so it doesn't

95
00:03:53,209 --> 00:03:55,700
really apply on the other hand you have

96
00:03:54,709 --> 00:03:58,880
software based at the station that

97
00:03:55,700 --> 00:04:01,670
doesn't require any software any any

98
00:03:58,880 --> 00:04:03,500
specific hardware but software based at

99
00:04:01,670 --> 00:04:05,869
the station is only secure if you have

100
00:04:03,500 --> 00:04:08,329
very strict assumptions on the on one

101
00:04:05,870 --> 00:04:10,010
hop and constant delay communication

102
00:04:08,329 --> 00:04:12,769
which is not realistic in the IOT

103
00:04:10,010 --> 00:04:15,560
scenario where devices speak through the

104
00:04:12,769 --> 00:04:17,930
internet and in between the two we have

105
00:04:15,560 --> 00:04:19,728
a hybrid remote attestation which is

106
00:04:17,930 --> 00:04:22,700
based on software and hardware code

107
00:04:19,728 --> 00:04:24,830
designs and the idea is to push as much

108
00:04:22,700 --> 00:04:25,969
as you can to the software side in terms

109
00:04:24,830 --> 00:04:28,070
of implementation of cryptographic

110
00:04:25,970 --> 00:04:30,970
functions and you have minimal hardware

111
00:04:28,070 --> 00:04:34,010
ensuring exactly what you need for those

112
00:04:30,970 --> 00:04:36,770
functions to run securely and we claim

113
00:04:34,010 --> 00:04:39,070
that this is the best fit for for this

114
00:04:36,770 --> 00:04:42,169
resource constrained low end

115
00:04:39,070 --> 00:04:44,690
so before I go into what we actually did

116
00:04:42,169 --> 00:04:46,010
here and our effort to verify remote the

117
00:04:44,690 --> 00:04:47,960
decision architecture

118
00:04:46,010 --> 00:04:49,400
why bother formally verify and remote at

119
00:04:47,960 --> 00:04:50,780
the station so first of all for any

120
00:04:49,400 --> 00:04:54,138
security service a form of verification

121
00:04:50,780 --> 00:04:57,229
promises more concrete guarantees about

122
00:04:54,139 --> 00:04:59,900
the not only the security of the

123
00:04:57,230 --> 00:05:02,180
protocol but you it for modification

124
00:04:59,900 --> 00:05:03,979
tries to push provable security to the

125
00:05:02,180 --> 00:05:05,690
implementation of a protocol as well and

126
00:05:03,980 --> 00:05:08,240
all current remote the decision

127
00:05:05,690 --> 00:05:11,090
architectures they don't have a form of

128
00:05:08,240 --> 00:05:12,350
verification and because they are not

129
00:05:11,090 --> 00:05:14,869
systematically designed from scratch

130
00:05:12,350 --> 00:05:17,060
from mathematical models dela that allow

131
00:05:14,870 --> 00:05:19,370
you to reason about their correctness

132
00:05:17,060 --> 00:05:21,470
and security it means that we need to

133
00:05:19,370 --> 00:05:23,810
more or less redesign everything from

134
00:05:21,470 --> 00:05:30,290
scratch starting with these abstractions

135
00:05:23,810 --> 00:05:32,630
and finally a very fine hybrid harvest

136
00:05:30,290 --> 00:05:34,150
optical designs is hardware as it was

137
00:05:32,630 --> 00:05:37,010
pointed out in the previous talk and

138
00:05:34,150 --> 00:05:38,960
it's also very important because we

139
00:05:37,010 --> 00:05:40,460
still have some hardware so if when you

140
00:05:38,960 --> 00:05:42,590
only have software you can also update

141
00:05:40,460 --> 00:05:44,989
or patch the device but if we still have

142
00:05:42,590 --> 00:05:47,539
some hardware and if we get it wrong you

143
00:05:44,990 --> 00:05:51,470
end up with trash and you can just throw

144
00:05:47,539 --> 00:05:53,840
your device away so now I'm going to

145
00:05:51,470 --> 00:05:55,970
talk about the steps that we took to

146
00:05:53,840 --> 00:05:58,340
verify our remote attestation

147
00:05:55,970 --> 00:06:01,100
architecture and as a disclaimer I have

148
00:05:58,340 --> 00:06:03,080
no hope of going into the details of the

149
00:06:01,100 --> 00:06:05,060
verification and prove you guys can

150
00:06:03,080 --> 00:06:07,190
check the paper for that my goal here is

151
00:06:05,060 --> 00:06:08,690
to to describe the methodology in

152
00:06:07,190 --> 00:06:11,180
general and perhaps if I have time give

153
00:06:08,690 --> 00:06:14,600
you one example of how we verify one of

154
00:06:11,180 --> 00:06:16,610
the sub modules on on this design so we

155
00:06:14,600 --> 00:06:19,220
start by defining what we want in our

156
00:06:16,610 --> 00:06:20,630
end-to-end go and we call it Sounders

157
00:06:19,220 --> 00:06:22,550
and security of remote attestation can

158
00:06:20,630 --> 00:06:24,350
tell you what this means in a couple of

159
00:06:22,550 --> 00:06:28,639
slides but this is like what we want to

160
00:06:24,350 --> 00:06:31,580
achieve and to start we need to define

161
00:06:28,639 --> 00:06:33,260
how the formally define how the

162
00:06:31,580 --> 00:06:34,909
microcontroller works because we're

163
00:06:33,260 --> 00:06:37,099
going to be implementing some from

164
00:06:34,910 --> 00:06:38,360
something on top of that and then we

165
00:06:37,100 --> 00:06:39,950
need to reason about how this

166
00:06:38,360 --> 00:06:42,970
implementation will in turn interact

167
00:06:39,950 --> 00:06:46,580
what with what is already in there and

168
00:06:42,970 --> 00:06:48,169
then we as I said we have both software

169
00:06:46,580 --> 00:06:50,120
and hardware parts and we're going to

170
00:06:48,169 --> 00:06:51,799
specify exactly what we expect from the

171
00:06:50,120 --> 00:06:53,330
software exactly what we expect

172
00:06:51,800 --> 00:06:55,849
from the hardware and we're going to use

173
00:06:53,330 --> 00:06:57,889
form of verification to individually

174
00:06:55,849 --> 00:06:59,780
verify that the software is doing what

175
00:06:57,889 --> 00:07:01,759
it's supposed to do and that the

176
00:06:59,780 --> 00:07:05,799
hardware is doing what it it is supposed

177
00:07:01,759 --> 00:07:09,050
to do and finally we're going to use the

178
00:07:05,800 --> 00:07:10,430
theorem prover to show that this

179
00:07:09,050 --> 00:07:11,389
guarantees that we prove that are

180
00:07:10,430 --> 00:07:13,129
enforced by the harbor and the

181
00:07:11,389 --> 00:07:14,810
guarantees that are enforced by the

182
00:07:13,129 --> 00:07:17,750
software when applied to our device

183
00:07:14,810 --> 00:07:20,120
machine model imply the our end goal of

184
00:07:17,750 --> 00:07:25,340
sound as a security for remote at the

185
00:07:20,120 --> 00:07:27,800
station so here's how we implement this

186
00:07:25,340 --> 00:07:30,679
right so there's already a couple of

187
00:07:27,800 --> 00:07:31,879
verify the Mac implementations and we

188
00:07:30,680 --> 00:07:34,669
rely on a verify that you make

189
00:07:31,879 --> 00:07:35,990
implementation to as a software part of

190
00:07:34,669 --> 00:07:38,599
our of our implementation

191
00:07:35,990 --> 00:07:40,639
so basically all we do in software is we

192
00:07:38,599 --> 00:07:42,830
have an implementation of an H Mac that

193
00:07:40,639 --> 00:07:46,099
has been verified to actually correspond

194
00:07:42,830 --> 00:07:48,139
to the cryptographic specification and

195
00:07:46,099 --> 00:07:49,878
then we specify everything that we

196
00:07:48,139 --> 00:07:51,979
expect from the hardware in some formal

197
00:07:49,879 --> 00:07:53,150
system called linear temporal logic

198
00:07:51,979 --> 00:07:56,180
which isn't going to describe in a

199
00:07:53,150 --> 00:07:58,219
couple of slides and we designed this

200
00:07:56,180 --> 00:08:00,620
hardware as a set of finite state

201
00:07:58,219 --> 00:08:02,270
machines and because we designed them as

202
00:08:00,620 --> 00:08:04,520
finite state machines we can use a model

203
00:08:02,270 --> 00:08:05,960
checker to verify that this each of this

204
00:08:04,520 --> 00:08:09,440
unites the finite state machines

205
00:08:05,960 --> 00:08:12,830
correspond to a given set of this linear

206
00:08:09,440 --> 00:08:14,990
temporal logic specifications and then

207
00:08:12,830 --> 00:08:17,750
we verify the hardware like that and

208
00:08:14,990 --> 00:08:20,659
then finally we use a linear temporal

209
00:08:17,750 --> 00:08:22,400
logic theorem prover to combine with a

210
00:08:20,659 --> 00:08:24,139
cryptographic reduction to show that the

211
00:08:22,400 --> 00:08:27,349
composition of everything implies what

212
00:08:24,139 --> 00:08:31,120
we want so I have one slide about the

213
00:08:27,349 --> 00:08:33,110
the software part of this we use a I

214
00:08:31,120 --> 00:08:34,279
think Haeckel was mentioned in the

215
00:08:33,110 --> 00:08:36,529
previous talk is a verified

216
00:08:34,279 --> 00:08:38,630
cryptographic library and they have a

217
00:08:36,529 --> 00:08:40,370
verified H Mac implementation using F

218
00:08:38,630 --> 00:08:41,929
star and they verify it for functional

219
00:08:40,370 --> 00:08:44,300
correcting correctness meaning that

220
00:08:41,929 --> 00:08:46,459
what's the code that is they're actually

221
00:08:44,300 --> 00:08:48,620
semantically corresponds to an H Mac and

222
00:08:46,459 --> 00:08:51,800
also they verify memory safety and

223
00:08:48,620 --> 00:08:54,410
security in dependency and they write

224
00:08:51,800 --> 00:08:55,699
this is a subset of F star called lo

225
00:08:54,410 --> 00:08:58,130
star and low star cannot be

226
00:08:55,699 --> 00:09:00,760
automatically translated to C so if you

227
00:08:58,130 --> 00:09:04,459
can translate it to C we can run it in

228
00:09:00,760 --> 00:09:05,810
microcontroller and for the hardware

229
00:09:04,459 --> 00:09:08,089
part we design from scratch

230
00:09:05,810 --> 00:09:09,800
Harbor ourselves and we basically what

231
00:09:08,090 --> 00:09:13,930
we basically do is that we pull out some

232
00:09:09,800 --> 00:09:17,060
wires some some signals from the CPU and

233
00:09:13,930 --> 00:09:19,819
we state all the bad things that can

234
00:09:17,060 --> 00:09:21,500
happen based on this seven signals that

235
00:09:19,820 --> 00:09:23,120
we pull out for an CPU and examples of

236
00:09:21,500 --> 00:09:25,760
the signals are for example the program

237
00:09:23,120 --> 00:09:27,140
counter so we can see which the address

238
00:09:25,760 --> 00:09:29,510
of the instruction that is being

239
00:09:27,140 --> 00:09:31,279
executed a given time and the data

240
00:09:29,510 --> 00:09:33,290
address that tells you which memory

241
00:09:31,279 --> 00:09:34,580
address is being read or written and

242
00:09:33,290 --> 00:09:36,650
these are examples of things that we

243
00:09:34,580 --> 00:09:38,779
monitor and if something goes wrong what

244
00:09:36,650 --> 00:09:40,880
we do is that we issue a reset command

245
00:09:38,779 --> 00:09:42,710
immediately so for example if an

246
00:09:40,880 --> 00:09:45,680
adversary's trying to do something that

247
00:09:42,710 --> 00:09:47,510
will violate the privacy of the security

248
00:09:45,680 --> 00:09:49,430
of the scheme by for example reading the

249
00:09:47,510 --> 00:09:50,960
key during the execution or something

250
00:09:49,430 --> 00:09:53,089
like that this will trigger a reset

251
00:09:50,960 --> 00:09:57,950
immediately and the versa we will not

252
00:09:53,089 --> 00:10:00,890
succeed so linear temporal logic there's

253
00:09:57,950 --> 00:10:03,410
a lot of notation here don't worry it's

254
00:10:00,890 --> 00:10:05,210
not very complicated it's just an

255
00:10:03,410 --> 00:10:06,949
extension on purpose uncommon

256
00:10:05,210 --> 00:10:09,589
propositional logic where you have this

257
00:10:06,950 --> 00:10:11,270
Junction conjunction implications and in

258
00:10:09,589 --> 00:10:13,580
addition to that you have also temporal

259
00:10:11,270 --> 00:10:16,970
quantifiers so it allows you to say

260
00:10:13,580 --> 00:10:19,190
things like if event a is happen at this

261
00:10:16,970 --> 00:10:22,940
system state then in the next system

262
00:10:19,190 --> 00:10:26,450
state event B must happen or event a

263
00:10:22,940 --> 00:10:28,190
will never happen until event B happens

264
00:10:26,450 --> 00:10:30,980
and this kind of temporal statements are

265
00:10:28,190 --> 00:10:36,550
all we need to specify everything that

266
00:10:30,980 --> 00:10:38,780
we expect from our hardware so there

267
00:10:36,550 --> 00:10:40,660
there's also a lot a notation here this

268
00:10:38,780 --> 00:10:43,130
is just a map you back to the paper but

269
00:10:40,660 --> 00:10:45,740
this is I just to say that we model the

270
00:10:43,130 --> 00:10:49,100
soundness of remote attestation in LTL

271
00:10:45,740 --> 00:10:50,660
we specify it in LTL and essentially

272
00:10:49,100 --> 00:10:52,760
what it means is that if you call this

273
00:10:50,660 --> 00:10:54,680
remote the decision software what you

274
00:10:52,760 --> 00:10:58,250
get at the end of this execution is

275
00:10:54,680 --> 00:11:00,109
indeed an H Mac of the memory and that

276
00:10:58,250 --> 00:11:02,029
the memory cannot change during the

277
00:11:00,110 --> 00:11:03,770
computation of this H Mac because if

278
00:11:02,029 --> 00:11:05,600
memory can change them but you can have

279
00:11:03,770 --> 00:11:07,040
like sort of clever malware that copies

280
00:11:05,600 --> 00:11:08,959
itself around memory to avoid detection

281
00:11:07,040 --> 00:11:11,000
and all sorts of attacks that have been

282
00:11:08,959 --> 00:11:14,060
demonstrated in the remote attestation

283
00:11:11,000 --> 00:11:15,560
literature and the definition of

284
00:11:14,060 --> 00:11:17,989
security follows the traditional

285
00:11:15,560 --> 00:11:19,670
cryptographic sense which is through a

286
00:11:17,990 --> 00:11:21,680
security game

287
00:11:19,670 --> 00:11:25,490
and basically what we do here is that we

288
00:11:21,680 --> 00:11:28,219
want to have we want to prove that our

289
00:11:25,490 --> 00:11:30,290
design for race is secure as long as the

290
00:11:28,220 --> 00:11:32,930
H Mac is a secure Mac and then we make

291
00:11:30,290 --> 00:11:34,730
several assumptions that are necessary

292
00:11:32,930 --> 00:11:37,280
for us to prove to first to have this

293
00:11:34,730 --> 00:11:39,230
cryptographic reduction and then so this

294
00:11:37,280 --> 00:11:40,760
is part one and then we have a bunch of

295
00:11:39,230 --> 00:11:43,700
assumptions we state these assumptions

296
00:11:40,760 --> 00:11:46,720
formally in LTL and we prove that our

297
00:11:43,700 --> 00:11:50,000
design has every assumption that we made

298
00:11:46,720 --> 00:11:53,510
and of course we have to model also in

299
00:11:50,000 --> 00:11:55,490
LTL linear temporal logic the behavior

300
00:11:53,510 --> 00:11:57,770
of the CPU and for example memories

301
00:11:55,490 --> 00:12:00,410
modified memories read when an interrupt

302
00:11:57,770 --> 00:12:02,840
happens to compose all these things and

303
00:12:00,410 --> 00:12:08,420
prove what we want for soundness and

304
00:12:02,840 --> 00:12:10,820
security and what we do in this design

305
00:12:08,420 --> 00:12:12,709
is that we break it down as a set of

306
00:12:10,820 --> 00:12:16,790
properties that the remote attestation

307
00:12:12,710 --> 00:12:18,500
community has known for a while and

308
00:12:16,790 --> 00:12:21,110
they're basically of two types there's

309
00:12:18,500 --> 00:12:23,030
key protection that means that the the

310
00:12:21,110 --> 00:12:25,160
remote attestation key so you computed

311
00:12:23,030 --> 00:12:27,730
an HTM X so you have a symmetric key the

312
00:12:25,160 --> 00:12:31,610
remote attestation he should not be

313
00:12:27,730 --> 00:12:34,340
should never be visible or or accessible

314
00:12:31,610 --> 00:12:35,870
by untrusted and privileged software

315
00:12:34,340 --> 00:12:37,400
running on the microcontroller and the

316
00:12:35,870 --> 00:12:39,800
second set of properties is for safe

317
00:12:37,400 --> 00:12:42,620
execution meaning that you cannot for

318
00:12:39,800 --> 00:12:44,300
example learn anything or tamper with

319
00:12:42,620 --> 00:12:48,050
the execution of the test ation routine

320
00:12:44,300 --> 00:12:49,280
itself so I'm going to go over the sub

321
00:12:48,050 --> 00:12:51,140
but then the question is are these

322
00:12:49,280 --> 00:12:54,140
properties enough so this is what we

323
00:12:51,140 --> 00:12:56,180
prove by using the the LTL theorem

324
00:12:54,140 --> 00:12:58,610
prover we prove that this properties are

325
00:12:56,180 --> 00:12:59,989
enough at least to imply the sounders

326
00:12:58,610 --> 00:13:04,220
and security definitions that we have

327
00:12:59,990 --> 00:13:06,500
for remote attestation so now a brief

328
00:13:04,220 --> 00:13:08,360
overview of how this architecture

329
00:13:06,500 --> 00:13:09,920
achieves each of these properties so the

330
00:13:08,360 --> 00:13:12,700
whole architecture looks like this and

331
00:13:09,920 --> 00:13:15,469
we have the formally verified

332
00:13:12,700 --> 00:13:19,850
implementation of a nitch Mac sitting in

333
00:13:15,470 --> 00:13:21,620
rent in read-only memory so this gives

334
00:13:19,850 --> 00:13:23,060
us functional correctness of the

335
00:13:21,620 --> 00:13:24,920
attestation functionality and

336
00:13:23,060 --> 00:13:26,390
immutability because so imitability is

337
00:13:24,920 --> 00:13:28,160
necessary because it doesn't matter if

338
00:13:26,390 --> 00:13:29,810
you have something correct if you can

339
00:13:28,160 --> 00:13:31,370
just change the instructions if malware

340
00:13:29,810 --> 00:13:33,180
resided on the device can just change

341
00:13:31,370 --> 00:13:34,560
the instructions that are there

342
00:13:33,180 --> 00:13:37,199
so this gives us these two properties

343
00:13:34,560 --> 00:13:40,829
and now the rest is done by the hardware

344
00:13:37,200 --> 00:13:43,470
so the second question is this this saw

345
00:13:40,830 --> 00:13:46,140
is does this software execute properly

346
00:13:43,470 --> 00:13:48,600
and the that's enforcement the hardware

347
00:13:46,140 --> 00:13:50,699
basically by making sure that this

348
00:13:48,600 --> 00:13:52,710
software will always start executing

349
00:13:50,700 --> 00:13:55,020
from the first instruction and always

350
00:13:52,710 --> 00:13:57,630
finish at the last instruction and that

351
00:13:55,020 --> 00:13:58,319
it cannot be interrupted by any other

352
00:13:57,630 --> 00:14:01,740
unprivileged

353
00:13:58,320 --> 00:14:04,620
software so this gives us atomicity

354
00:14:01,740 --> 00:14:06,390
meaning it has to execute in one pass

355
00:14:04,620 --> 00:14:09,060
and control the invocation meaning that

356
00:14:06,390 --> 00:14:12,420
you cannot have like execute chunks of

357
00:14:09,060 --> 00:14:15,750
this you can you has to always execute

358
00:14:12,420 --> 00:14:17,729
the entire attestation functionality and

359
00:14:15,750 --> 00:14:19,200
finally can can malware reside in a

360
00:14:17,730 --> 00:14:21,750
device to learn anything you shouldn't

361
00:14:19,200 --> 00:14:23,580
about the key and it makes sure this is

362
00:14:21,750 --> 00:14:25,290
not possible by enforcing access control

363
00:14:23,580 --> 00:14:26,910
to the memory storing the key and by

364
00:14:25,290 --> 00:14:29,069
making sure that this the station

365
00:14:26,910 --> 00:14:30,689
software always run on a separate part

366
00:14:29,070 --> 00:14:34,980
of the stack that's never readable to

367
00:14:30,690 --> 00:14:37,580
any other software on the device so this

368
00:14:34,980 --> 00:14:40,560
gives us all the properties we need and

369
00:14:37,580 --> 00:14:45,720
this is one example of how you specify

370
00:14:40,560 --> 00:14:47,310
and design a verified module for in this

371
00:14:45,720 --> 00:14:49,410
case for controlled invocation so

372
00:14:47,310 --> 00:14:50,969
meaning that you always have to start

373
00:14:49,410 --> 00:14:53,069
from the first instruction and execute

374
00:14:50,970 --> 00:14:55,590
until the last instruction and this is

375
00:14:53,070 --> 00:14:58,350
exactly what's stated on the the 2lt

376
00:14:55,590 --> 00:15:01,440
else over there basically saying that if

377
00:14:58,350 --> 00:15:04,350
you are executing an instruction at an

378
00:15:01,440 --> 00:15:06,300
address that is within the H Mac and

379
00:15:04,350 --> 00:15:08,220
then in the next clock cycle you're not

380
00:15:06,300 --> 00:15:09,630
any more than this better be the last

381
00:15:08,220 --> 00:15:12,450
instruction the address of the last

382
00:15:09,630 --> 00:15:14,460
instruction or you will reset and the

383
00:15:12,450 --> 00:15:16,560
converse and this is what the the finite

384
00:15:14,460 --> 00:15:19,230
state machine looks like so we do this

385
00:15:16,560 --> 00:15:21,270
for all properties and at the end we end

386
00:15:19,230 --> 00:15:23,250
up with a bunch of very logs of module

387
00:15:21,270 --> 00:15:27,240
designs we compose them together and

388
00:15:23,250 --> 00:15:29,130
this is our hardware module and we from

389
00:15:27,240 --> 00:15:30,990
the hardware module designed in very log

390
00:15:29,130 --> 00:15:32,670
we can use an automated conversion to to

391
00:15:30,990 --> 00:15:36,900
convert very log to a verification

392
00:15:32,670 --> 00:15:39,750
language called smv and from the smv we

393
00:15:36,900 --> 00:15:44,459
can use a model checker which is called

394
00:15:39,750 --> 00:15:46,680
new smb2 to prove that the composition

395
00:15:44,460 --> 00:15:49,920
of this state machines

396
00:15:46,680 --> 00:15:51,359
imply conform with all of the linear

397
00:15:49,920 --> 00:15:54,449
temporal logic specifications that we

398
00:15:51,360 --> 00:15:57,450
need and this is it for the for the

399
00:15:54,450 --> 00:15:59,520
hardware design I have one slide on

400
00:15:57,450 --> 00:16:02,820
implementation and results due to the

401
00:15:59,520 --> 00:16:05,910
time and what I want to say is that we

402
00:16:02,820 --> 00:16:09,089
we implemented this we so we use the

403
00:16:05,910 --> 00:16:11,550
open course open msp430 ver log design

404
00:16:09,089 --> 00:16:16,320
for the msp430 this is one type of low

405
00:16:11,550 --> 00:16:17,760
end and by the device and we also

406
00:16:16,320 --> 00:16:19,589
evaluate there's a lot of results in the

407
00:16:17,760 --> 00:16:21,029
paper that I I'm not able to cover here

408
00:16:19,589 --> 00:16:22,890
so please check our paper for more

409
00:16:21,029 --> 00:16:24,870
details and we found out that the

410
00:16:22,890 --> 00:16:27,360
hardware overhead on top of the open MSP

411
00:16:24,870 --> 00:16:29,100
is of six percent and we can compute at

412
00:16:27,360 --> 00:16:32,310
the station of the entire program memory

413
00:16:29,100 --> 00:16:35,010
in half a second and we also synthesized

414
00:16:32,310 --> 00:16:37,290
this on basis 3 FPGA it is the commodity

415
00:16:35,010 --> 00:16:39,209
FPGA and all of our proofs all over

416
00:16:37,290 --> 00:16:42,329
hardware design all of our software is

417
00:16:39,209 --> 00:16:44,579
available on github and so it should be

418
00:16:42,330 --> 00:16:46,290
easy to reproduce in also on a point

419
00:16:44,580 --> 00:16:48,029
point out that he if you want to

420
00:16:46,290 --> 00:16:50,490
reproduce this you can get the fpga the

421
00:16:48,029 --> 00:16:52,580
hardware for free because Xilinx has a

422
00:16:50,490 --> 00:16:56,190
donation program so every research

423
00:16:52,580 --> 00:16:58,320
institution can get up to five of these

424
00:16:56,190 --> 00:17:04,410
FPGAs for free so it should be

425
00:16:58,320 --> 00:17:06,959
reproducible and to conclude again I

426
00:17:04,410 --> 00:17:09,870
want to live here the the pointer to a

427
00:17:06,959 --> 00:17:11,579
repo this was a lot of work a lot more

428
00:17:09,869 --> 00:17:13,260
than I'm able to talk here and we will

429
00:17:11,579 --> 00:17:15,480
be have very happy if people were to

430
00:17:13,260 --> 00:17:17,280
actually use this on their research or

431
00:17:15,480 --> 00:17:19,860
if you want to work on attestation and

432
00:17:17,280 --> 00:17:21,990
other services that can be built on top

433
00:17:19,859 --> 00:17:23,819
of attestation we have a couple of

434
00:17:21,990 --> 00:17:25,980
examples of other services that can be

435
00:17:23,819 --> 00:17:28,079
built on top of attestation such as

436
00:17:25,980 --> 00:17:31,710
proofs of software update proofs of

437
00:17:28,079 --> 00:17:33,780
erasure resets proof of software

438
00:17:31,710 --> 00:17:37,230
execution meaning that if you have a

439
00:17:33,780 --> 00:17:40,950
sensor on the field and that sensor is

440
00:17:37,230 --> 00:17:43,200
as there's some software that should

441
00:17:40,950 --> 00:17:44,730
execute to produce the output of a

442
00:17:43,200 --> 00:17:47,670
sensed value you can create a graphical

443
00:17:44,730 --> 00:17:50,760
etai the output of the sensor to the

444
00:17:47,670 --> 00:17:52,410
code that executing that executed using

445
00:17:50,760 --> 00:17:53,760
at the station and that means that you

446
00:17:52,410 --> 00:17:56,610
essentially can view the sensor that

447
00:17:53,760 --> 00:17:58,950
cannot lie even under full software

448
00:17:56,610 --> 00:18:00,029
compromise so with that I'll conclude

449
00:17:58,950 --> 00:18:01,529
then I'll be happy to

450
00:18:00,029 --> 00:18:06,450
take any questions thank you very much

451
00:18:01,529 --> 00:18:08,909
thank you so are you gonna replace my

452
00:18:06,450 --> 00:18:11,299
crappy ESP 32 with something that costs

453
00:18:08,909 --> 00:18:13,889
a buck more and has some security in it

454
00:18:11,299 --> 00:18:15,359
yeah okay

455
00:18:13,889 --> 00:18:17,968
I wouldn't say we're buying but I

456
00:18:15,359 --> 00:18:20,249
wouldn't say it's the msp430 scrappy I

457
00:18:17,969 --> 00:18:22,139
mean they emphasize the energy a lot

458
00:18:20,249 --> 00:18:24,719
right it is really the best eight dollar

459
00:18:22,139 --> 00:18:28,709
CPU I've ever gotten

460
00:18:24,719 --> 00:18:30,419
yes go ahead so really nice work I'm

461
00:18:28,710 --> 00:18:31,529
wondering um do you have a plan to

462
00:18:30,419 --> 00:18:34,830
support the MA

463
00:18:31,529 --> 00:18:37,349
yes so that's something that I wasn't

464
00:18:34,830 --> 00:18:41,460
able to to discuss here because it's a

465
00:18:37,349 --> 00:18:43,109
short time but some of this device is

466
00:18:41,460 --> 00:18:45,690
discussed because they don't have the MA

467
00:18:43,109 --> 00:18:49,049
at all some of them do this the openness

468
00:18:45,690 --> 00:18:53,149
speed third 4:30 does and we support and

469
00:18:49,049 --> 00:18:56,149
there's like a couple of you see the in

470
00:18:53,149 --> 00:18:59,428
the little square there there's like DMA

471
00:18:56,149 --> 00:19:02,218
enable and DMA address that tells you if

472
00:18:59,429 --> 00:19:05,219
DMA is accessing memory and we check for

473
00:19:02,219 --> 00:19:08,249
violations done by DMA as well thank you

474
00:19:05,219 --> 00:19:09,989
no problem thanks again and thank you

475
00:19:08,249 --> 00:19:11,040
all for the early morning session I

476
00:19:09,989 --> 00:19:15,069
think this went really well

477
00:19:11,040 --> 00:19:15,069
[Applause]

