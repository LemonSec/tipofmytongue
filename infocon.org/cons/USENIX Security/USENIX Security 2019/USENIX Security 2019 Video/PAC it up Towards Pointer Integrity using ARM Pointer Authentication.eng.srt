1
00:00:10,219 --> 00:00:14,030
so I'm going to talk about using our

2
00:00:12,530 --> 00:00:17,810
pointer authentication to achieve

3
00:00:14,030 --> 00:00:19,610
pointer integrity and with pointer

4
00:00:17,810 --> 00:00:21,799
integrity I mean essentially memory

5
00:00:19,610 --> 00:00:24,230
safety for pointers so I want to prevent

6
00:00:21,800 --> 00:00:25,550
an attacker from modifying pointers when

7
00:00:24,230 --> 00:00:29,200
they are stored in memory in an effort

8
00:00:25,550 --> 00:00:31,759
to modify the program's benign behavior

9
00:00:29,200 --> 00:00:33,559
as an example of this we could consider

10
00:00:31,759 --> 00:00:35,660
return our oriented programming for

11
00:00:33,559 --> 00:00:37,218
instance in this case the return address

12
00:00:35,660 --> 00:00:38,480
of a function will be written in the

13
00:00:37,219 --> 00:00:41,539
memory where the attacker could

14
00:00:38,480 --> 00:00:43,159
potentially corrupt it and then cause

15
00:00:41,539 --> 00:00:45,949
the program to return to an incorrect

16
00:00:43,159 --> 00:00:47,449
location but now if we could verify the

17
00:00:45,949 --> 00:00:48,829
integrity of the return address before

18
00:00:47,449 --> 00:00:52,608
this happens we would prevent these

19
00:00:48,829 --> 00:00:54,050
types of attacks and in if we consider a

20
00:00:52,609 --> 00:00:55,999
control flow integrity more generally

21
00:00:54,050 --> 00:00:57,890
the same would apply to to code pointers

22
00:00:55,999 --> 00:00:59,600
if we can which would be used to

23
00:00:57,890 --> 00:01:01,940
implement for instance indirect function

24
00:00:59,600 --> 00:01:03,499
calls so if you can guarantee their

25
00:01:01,940 --> 00:01:06,890
integrity then these types of attacks

26
00:01:03,499 --> 00:01:10,460
could be prevented and the same applies

27
00:01:06,890 --> 00:01:12,020
for data pointers so by by guaranteeing

28
00:01:10,460 --> 00:01:14,149
data pointer integrity we can greatly

29
00:01:12,020 --> 00:01:16,100
reduce the attack surface of these type

30
00:01:14,150 --> 00:01:17,480
of attacks and currently for instance

31
00:01:16,100 --> 00:01:18,949
all known data oriented programming

32
00:01:17,480 --> 00:01:20,240
attacks would be be prevented if you

33
00:01:18,950 --> 00:01:23,570
could guarantee the integrity of all

34
00:01:20,240 --> 00:01:24,919
data pointers within the program the

35
00:01:23,570 --> 00:01:26,179
kind of problem here is that the how do

36
00:01:24,920 --> 00:01:28,880
we know achieve this this kind of

37
00:01:26,180 --> 00:01:30,680
property in in an efficient way so it's

38
00:01:28,880 --> 00:01:34,759
actually deploy a bellotti in in the

39
00:01:30,680 --> 00:01:37,190
real world and this is where where this

40
00:01:34,760 --> 00:01:39,050
our pointer authentication comes in so

41
00:01:37,190 --> 00:01:42,590
so our pointer identification appear in

42
00:01:39,050 --> 00:01:42,860
short is an upcoming feature in in the

43
00:01:42,590 --> 00:01:46,160
arm

44
00:01:42,860 --> 00:01:47,420
8.3 a GPO specification so this is going

45
00:01:46,160 --> 00:01:50,509
to be available in essentially all

46
00:01:47,420 --> 00:01:52,130
upcoming arm phones and what we add us

47
00:01:50,510 --> 00:01:55,010
is that it approximates pointer

48
00:01:52,130 --> 00:01:57,320
integrity and this is done by using a

49
00:01:55,010 --> 00:01:59,690
pointer authentication code or PAC which

50
00:01:57,320 --> 00:02:00,919
is embedded into the pointer and this is

51
00:01:59,690 --> 00:02:02,750
possible because the pointer it is

52
00:02:00,920 --> 00:02:04,220
assigned is actually 64 bits but only a

53
00:02:02,750 --> 00:02:06,740
smaller part of that actually is used

54
00:02:04,220 --> 00:02:08,538
for the address itself so the default

55
00:02:06,740 --> 00:02:10,810
Linux configuration it would have 16

56
00:02:08,538 --> 00:02:14,238
bits where you can put this back code in

57
00:02:10,810 --> 00:02:19,250
the package self is a kid tweakable Mac

58
00:02:14,239 --> 00:02:23,200
based on the address bits of the pointer

59
00:02:19,250 --> 00:02:23,200
and then a 64 bit modifier

60
00:02:23,810 --> 00:02:28,010
the beer keys are protected by the

61
00:02:26,030 --> 00:02:30,800
hardware and the modifiers are set by

62
00:02:28,010 --> 00:02:32,450
the said through parameter registers for

63
00:02:30,800 --> 00:02:34,610
in by the instrumentation so you would

64
00:02:32,450 --> 00:02:35,839
have some instructions that that create

65
00:02:34,610 --> 00:02:40,820
these packs and then later some other

66
00:02:35,840 --> 00:02:42,230
instructions that vary for days so as an

67
00:02:40,820 --> 00:02:44,630
example we can take a look at these

68
00:02:42,230 --> 00:02:47,140
GCC's and ceilings implementation of

69
00:02:44,630 --> 00:02:49,579
sine return address that no addresses

70
00:02:47,140 --> 00:02:52,609
return-oriented programming scenario I

71
00:02:49,580 --> 00:02:54,200
showed earlier so how this works of

72
00:02:52,610 --> 00:02:56,090
books on arm that when the function is

73
00:02:54,200 --> 00:02:58,310
entered the returners is going to be in

74
00:02:56,090 --> 00:02:59,870
a dedicated link register and as long as

75
00:02:58,310 --> 00:03:01,880
this is a register we can assume that

76
00:02:59,870 --> 00:03:03,620
the attacker can't modify it but no not

77
00:03:01,880 --> 00:03:06,320
allow subsequent function calls the

78
00:03:03,620 --> 00:03:08,780
register must be written again and onto

79
00:03:06,320 --> 00:03:09,980
the stack and I want to return to read

80
00:03:08,780 --> 00:03:11,480
this on the stack the attacker can go

81
00:03:09,980 --> 00:03:13,190
and money manipulated causing the

82
00:03:11,480 --> 00:03:17,690
function again to return to an incorrect

83
00:03:13,190 --> 00:03:20,180
correct location so the protection here

84
00:03:17,690 --> 00:03:21,950
works by adding these these back

85
00:03:20,180 --> 00:03:24,340
instructions before we store the return

86
00:03:21,950 --> 00:03:26,869
artists that now generate this this back

87
00:03:24,340 --> 00:03:29,150
and embedded into the return address

88
00:03:26,870 --> 00:03:30,320
itself and in this case the

89
00:03:29,150 --> 00:03:33,440
instrumentation use the stack pointer

90
00:03:30,320 --> 00:03:36,109
value as a modifier and then again

91
00:03:33,440 --> 00:03:37,940
before return after this loaded from the

92
00:03:36,110 --> 00:03:39,500
stack then verify that each pack is in

93
00:03:37,940 --> 00:03:42,980
the intact and based on that we can

94
00:03:39,500 --> 00:03:45,200
operate these attacks the attacker could

95
00:03:42,980 --> 00:03:46,940
of course still still modify the

96
00:03:45,200 --> 00:03:48,440
returners was in the stack but now this

97
00:03:46,940 --> 00:03:52,690
verification will really detect that

98
00:03:48,440 --> 00:03:52,690
causing the subsequent return to default

99
00:03:54,190 --> 00:03:59,000
so some things to note here the does the

100
00:03:57,500 --> 00:04:01,370
modifier do not need to be a bit

101
00:03:59,000 --> 00:04:03,170
confidential so in this specific case

102
00:04:01,370 --> 00:04:04,940
for instance it's that pointer value

103
00:04:03,170 --> 00:04:06,950
which we can assume that the attacker

104
00:04:04,940 --> 00:04:09,320
could could figure out why by looking at

105
00:04:06,950 --> 00:04:11,329
other values or and analyzing the binder

106
00:04:09,320 --> 00:04:12,950
itself and in our work we assume that

107
00:04:11,330 --> 00:04:16,010
the modifiers are always known by the

108
00:04:12,950 --> 00:04:17,630
attacker this is not not a problem

109
00:04:16,010 --> 00:04:19,238
because the keys are protected by the

110
00:04:17,630 --> 00:04:21,529
hardware and for instance on linux the

111
00:04:19,238 --> 00:04:22,880
kernel would set the process specific

112
00:04:21,529 --> 00:04:24,169
keys when the process starts and the

113
00:04:22,880 --> 00:04:25,909
attacker doesn't know the keys and

114
00:04:24,169 --> 00:04:30,409
therefore cannot generate packs for

115
00:04:25,910 --> 00:04:31,640
arbitrary pointers but now a potential

116
00:04:30,410 --> 00:04:34,130
problem is that even though the attacker

117
00:04:31,640 --> 00:04:35,390
can't can generate these these these

118
00:04:34,130 --> 00:04:37,780
arbitrary packs may be the attacker

119
00:04:35,390 --> 00:04:40,370
could do something like a replay attack

120
00:04:37,780 --> 00:04:43,219
and indeed it turned turns out that this

121
00:04:40,370 --> 00:04:46,280
is the case we call this this pointer we

122
00:04:43,220 --> 00:04:47,750
use attacks here are some kind of simple

123
00:04:46,280 --> 00:04:49,640
code that the illustrates all this would

124
00:04:47,750 --> 00:04:51,200
work so on the left you can see two

125
00:04:49,640 --> 00:04:52,700
subsequent function calls on the right

126
00:04:51,200 --> 00:04:56,630
we have some kind of illustration of how

127
00:04:52,700 --> 00:04:58,840
how the stack stack would look so when

128
00:04:56,630 --> 00:05:00,860
the first function call happens the the

129
00:04:58,840 --> 00:05:02,239
instrumentation will generate the pack

130
00:05:00,860 --> 00:05:05,300
for the returned artist and then store

131
00:05:02,240 --> 00:05:06,620
it on the stack frame this is all fine

132
00:05:05,300 --> 00:05:09,680
but now the problem is that the stack

133
00:05:06,620 --> 00:05:10,970
pointer might actually be unique so the

134
00:05:09,680 --> 00:05:14,120
stack will naturally grow and shrink

135
00:05:10,970 --> 00:05:16,160
during execution so this will will will

136
00:05:14,120 --> 00:05:19,910
have the same value and that several

137
00:05:16,160 --> 00:05:21,890
times knowing this the attacker could

138
00:05:19,910 --> 00:05:24,110
then potentially read out this this

139
00:05:21,890 --> 00:05:26,330
signed return address from from a stack

140
00:05:24,110 --> 00:05:29,630
frame for later use and then allow the

141
00:05:26,330 --> 00:05:31,310
function to continue execution and now

142
00:05:29,630 --> 00:05:33,380
finally when we get into function two we

143
00:05:31,310 --> 00:05:34,700
again generate a new sound returners for

144
00:05:33,380 --> 00:05:37,430
this function call and put it on the

145
00:05:34,700 --> 00:05:39,229
stack frame but now because the stack

146
00:05:37,430 --> 00:05:41,810
pointer values are there at the same the

147
00:05:39,230 --> 00:05:43,370
attacker can take the previous restored

148
00:05:41,810 --> 00:05:45,380
value and put it back on the stack and

149
00:05:43,370 --> 00:05:46,910
now again because the modifiers in this

150
00:05:45,380 --> 00:05:49,190
case happened to be exactly the same

151
00:05:46,910 --> 00:05:51,530
this will authenticate normally and

152
00:05:49,190 --> 00:05:58,790
allow the return to go to any indirect

153
00:05:51,530 --> 00:06:00,710
location so our goals in this work arc

154
00:05:58,790 --> 00:06:02,240
are kind of twofold first we want to

155
00:06:00,710 --> 00:06:03,979
expand that the protection by by

156
00:06:02,240 --> 00:06:05,570
previous work on PA so we don't just

157
00:06:03,980 --> 00:06:07,340
want to protect the return address s but

158
00:06:05,570 --> 00:06:09,590
we also want to protect data pointers

159
00:06:07,340 --> 00:06:11,000
and encode pointers and second we want

160
00:06:09,590 --> 00:06:17,239
to mitigate these reuse attacks as

161
00:06:11,000 --> 00:06:18,440
efficiently as possible so for our

162
00:06:17,240 --> 00:06:20,150
design the kind of the main

163
00:06:18,440 --> 00:06:21,890
consideration is that what can we use as

164
00:06:20,150 --> 00:06:24,979
a as a modifier for this this PA

165
00:06:21,890 --> 00:06:26,960
instructions and the first thing to note

166
00:06:24,980 --> 00:06:28,490
is that if we don't use a modifier at

167
00:06:26,960 --> 00:06:30,080
all then you can essentially reuse

168
00:06:28,490 --> 00:06:31,640
attacks against any any pointer so any

169
00:06:30,080 --> 00:06:33,440
point that generated at runtime can

170
00:06:31,640 --> 00:06:36,740
later be used in place or in any other

171
00:06:33,440 --> 00:06:38,540
pointer and then the opposite of this

172
00:06:36,740 --> 00:06:40,490
would would be that we have some unique

173
00:06:38,540 --> 00:06:41,540
modifier for each pointer value and

174
00:06:40,490 --> 00:06:43,070
obviously this name would prevent

175
00:06:41,540 --> 00:06:45,979
already use attacks because now the

176
00:06:43,070 --> 00:06:47,659
modifiers are unique but there are some

177
00:06:45,979 --> 00:06:49,370
other considerations we need to know

178
00:06:47,660 --> 00:06:51,800
think about your the

179
00:06:49,370 --> 00:06:53,180
when we generate a pack we need to put

180
00:06:51,800 --> 00:06:54,650
some modifier and later we need to

181
00:06:53,180 --> 00:06:56,690
somehow hub when with this pointer is

182
00:06:54,650 --> 00:06:58,940
used at any location the code we need to

183
00:06:56,690 --> 00:07:00,919
be able to retrieve the same modifier

184
00:06:58,940 --> 00:07:03,710
and again use it here to go to verify

185
00:07:00,919 --> 00:07:05,448
this and at the same time we must make

186
00:07:03,710 --> 00:07:07,489
sure that wherever however we keep track

187
00:07:05,449 --> 00:07:09,440
of these modifiers they are not

188
00:07:07,490 --> 00:07:11,030
controllable by by the attacker because

189
00:07:09,440 --> 00:07:15,770
if the hacker can swap off the modifier

190
00:07:11,030 --> 00:07:17,869
stack and value goes away some Stroman

191
00:07:15,770 --> 00:07:19,969
design choice you could consider to

192
00:07:17,870 --> 00:07:21,889
converge here this is first maybe we

193
00:07:19,970 --> 00:07:23,930
could statically just during compile

194
00:07:21,889 --> 00:07:27,560
time look at look at the code base and

195
00:07:23,930 --> 00:07:29,479
Soma try to assign unique modifiers but

196
00:07:27,560 --> 00:07:30,860
this is not really possible and except

197
00:07:29,479 --> 00:07:33,580
for maybe some completely trivial

198
00:07:30,860 --> 00:07:35,479
programs if you for instance consider

199
00:07:33,580 --> 00:07:36,770
conditionally assign pointers or

200
00:07:35,479 --> 00:07:38,359
pointers that are reassigned at runtime

201
00:07:36,770 --> 00:07:41,030
so then you can't really statically do

202
00:07:38,360 --> 00:07:42,919
anything about this the the other

203
00:07:41,030 --> 00:07:44,419
approach would be that you maybe use

204
00:07:42,919 --> 00:07:46,430
unknowns so every time you create a new

205
00:07:44,419 --> 00:07:48,889
point or you put a nonce in there and

206
00:07:46,430 --> 00:07:50,780
then just when you're authentic it you

207
00:07:48,889 --> 00:07:51,860
use the same knowns but now the problem

208
00:07:50,780 --> 00:07:53,179
is that how do you actually track these

209
00:07:51,860 --> 00:07:54,500
norms as long do you have some kind of

210
00:07:53,180 --> 00:07:55,910
mechanism in place that keeps track of

211
00:07:54,500 --> 00:08:01,460
which notes you need to use at that

212
00:07:55,910 --> 00:08:03,350
watch watch which we use use place and

213
00:08:01,460 --> 00:08:06,680
essentially if you can't do this

214
00:08:03,350 --> 00:08:09,349
then you could just as well have store

215
00:08:06,680 --> 00:08:12,050
that secured and the pointers in the

216
00:08:09,349 --> 00:08:14,080
first place of y1 you use a non C in

217
00:08:12,050 --> 00:08:16,130
this case at all

218
00:08:14,080 --> 00:08:17,479
and of course it this also has the

219
00:08:16,130 --> 00:08:24,080
problem then our unit is almost secure

220
00:08:17,479 --> 00:08:26,419
these norms and nonsense so we have this

221
00:08:24,080 --> 00:08:29,210
disjoint we call parts PA assisted

222
00:08:26,419 --> 00:08:32,240
runtime safety and what we do is first

223
00:08:29,210 --> 00:08:34,968
we expand that the protection so we know

224
00:08:32,240 --> 00:08:37,880
sign return addresses and code code

225
00:08:34,969 --> 00:08:39,830
pointers and data pointers and secondly

226
00:08:37,880 --> 00:08:42,080
we mitigate these three years attacks by

227
00:08:39,830 --> 00:08:43,849
first by binding the return addresses to

228
00:08:42,080 --> 00:08:45,290
the specific function that were created

229
00:08:43,849 --> 00:08:47,570
in so then going back to the previous

230
00:08:45,290 --> 00:08:48,709
example for instance now you could no

231
00:08:47,570 --> 00:08:50,300
longer take the return address from

232
00:08:48,709 --> 00:08:53,390
function one I put it in the function

233
00:08:50,300 --> 00:08:55,699
two and then four code and data pointers

234
00:08:53,390 --> 00:08:59,650
we use the type of the pointer to create

235
00:08:55,700 --> 00:08:59,650
a modifier we use for this signing

236
00:09:01,170 --> 00:09:05,399
so for eternal is protection we first

237
00:09:03,269 --> 00:09:06,929
note the stack pointer that Jesus he

238
00:09:05,399 --> 00:09:09,089
also use that's that's very convenient

239
00:09:06,929 --> 00:09:10,889
because to some extent it does change at

240
00:09:09,089 --> 00:09:13,470
runtime so it gives some granularity to

241
00:09:10,889 --> 00:09:16,470
this protection but at the same time it

242
00:09:13,470 --> 00:09:18,029
it is it is nice because we also always

243
00:09:16,470 --> 00:09:19,199
know the stack pointers has the same

244
00:09:18,029 --> 00:09:20,939
value in the beginning of the function

245
00:09:19,199 --> 00:09:23,128
and in the end of the function so we

246
00:09:20,939 --> 00:09:24,358
don't need to have any extra kind of

247
00:09:23,129 --> 00:09:26,910
bookkeeping of Kami track of these

248
00:09:24,359 --> 00:09:29,699
modifiers that we use but of course this

249
00:09:26,910 --> 00:09:32,339
we use are not as possible if you only

250
00:09:29,699 --> 00:09:34,819
use the stack pointer so to prevent

251
00:09:32,339 --> 00:09:37,649
those or mitigate those we also assign a

252
00:09:34,819 --> 00:09:39,209
specific function idea to or combine

253
00:09:37,649 --> 00:09:41,609
this D stack pointer with a function ID

254
00:09:39,209 --> 00:09:43,290
and this is just a unique value to a

255
00:09:41,609 --> 00:09:50,759
specific function which then prevents

256
00:09:43,290 --> 00:09:52,649
this cross function we use attacks for

257
00:09:50,759 --> 00:09:55,439
for cold water signing we use this you

258
00:09:52,649 --> 00:09:56,939
use this this type of the pointer so

259
00:09:55,439 --> 00:09:59,579
essentially for for code points that

260
00:09:56,939 --> 00:10:01,498
would be the signature of the function

261
00:09:59,579 --> 00:10:05,008
pointer to our we use that to generate

262
00:10:01,499 --> 00:10:06,149
this this modifier and in this case we

263
00:10:05,009 --> 00:10:09,029
will use what we call own use

264
00:10:06,149 --> 00:10:11,220
authentication so with this we mean that

265
00:10:09,029 --> 00:10:14,489
that we want to be structural level

266
00:10:11,220 --> 00:10:15,989
inside the compiler we only instrument

267
00:10:14,489 --> 00:10:16,379
the creation of the pointer and then

268
00:10:15,989 --> 00:10:18,179
later

269
00:10:16,379 --> 00:10:20,160
only when the pointers at some point

270
00:10:18,179 --> 00:10:21,779
used to be instrument that use location

271
00:10:20,160 --> 00:10:22,919
and this has the nice property that we

272
00:10:21,779 --> 00:10:24,569
don't really need to care about what

273
00:10:22,919 --> 00:10:26,279
happens with the pointers in between we

274
00:10:24,569 --> 00:10:28,199
can just instrument these two location

275
00:10:26,279 --> 00:10:29,519
and it doesn't matter whether the

276
00:10:28,199 --> 00:10:35,008
pointer happens to go out in memory or

277
00:10:29,519 --> 00:10:37,189
not in between for data point disputes a

278
00:10:35,009 --> 00:10:38,879
similar scheme for this modifier for

279
00:10:37,189 --> 00:10:40,529
modifier assignment

280
00:10:38,879 --> 00:10:43,139
although in this case it would be the

281
00:10:40,529 --> 00:10:46,919
pointer to data data type that defines

282
00:10:43,139 --> 00:10:49,199
the modifier but for performance reasons

283
00:10:46,919 --> 00:10:52,559
it's not really feasible here to do this

284
00:10:49,199 --> 00:10:54,929
on user authentication because if we for

285
00:10:52,559 --> 00:10:57,629
instance consider an iteration of an

286
00:10:54,929 --> 00:10:59,220
array now if you open each each each use

287
00:10:57,629 --> 00:11:00,929
want to authenticate it we would at each

288
00:10:59,220 --> 00:11:03,029
each cube need to authenticate again and

289
00:11:00,929 --> 00:11:05,639
again and again so instead we want to

290
00:11:03,029 --> 00:11:07,529
use is unload so in this case we would

291
00:11:05,639 --> 00:11:08,939
first load the array from from memory

292
00:11:07,529 --> 00:11:10,559
before the loop and then it would be

293
00:11:08,939 --> 00:11:12,980
unsecured in a register and then the

294
00:11:10,559 --> 00:11:17,689
loop can just go on without any

295
00:11:12,980 --> 00:11:19,400
authentication but this now has some

296
00:11:17,690 --> 00:11:20,510
other implications we again do the the

297
00:11:19,400 --> 00:11:24,829
instrumentation are very high

298
00:11:20,510 --> 00:11:26,840
abstraction level but but this causes no

299
00:11:24,830 --> 00:11:28,670
problems when the compiler actually at

300
00:11:26,840 --> 00:11:31,160
the later stage lowers this

301
00:11:28,670 --> 00:11:33,319
instrumentation to do to do Hardware

302
00:11:31,160 --> 00:11:35,120
specific registers and instructions it

303
00:11:33,320 --> 00:11:36,770
also needs to consider that it has a

304
00:11:35,120 --> 00:11:39,920
limited amount of registers and this

305
00:11:36,770 --> 00:11:41,510
might not cause a register spilling so

306
00:11:39,920 --> 00:11:43,250
essentially the compiler just decides

307
00:11:41,510 --> 00:11:46,160
that empty one resistor register

308
00:11:43,250 --> 00:11:48,110
temporarily into memory due to free

309
00:11:46,160 --> 00:11:49,579
upper register further use and now this

310
00:11:48,110 --> 00:11:51,710
registers might actually have contained

311
00:11:49,580 --> 00:11:58,640
a data pointer that we now need to be

312
00:11:51,710 --> 00:12:01,100
able to protect so we implemented all of

313
00:11:58,640 --> 00:12:03,860
this on LLVM 6.0 that we let a point

314
00:12:01,100 --> 00:12:06,050
eight to eight point zero and most of

315
00:12:03,860 --> 00:12:08,270
our kind of optimization we do the C on

316
00:12:06,050 --> 00:12:12,109
this is higher level essentially the

317
00:12:08,270 --> 00:12:13,730
compiler optimizer but then then because

318
00:12:12,110 --> 00:12:15,260
this is a hardware specific feature we

319
00:12:13,730 --> 00:12:16,550
need to lower this instrumentation to

320
00:12:15,260 --> 00:12:18,410
Hardware specific instructions that

321
00:12:16,550 --> 00:12:20,060
actually do what we need needed to do

322
00:12:18,410 --> 00:12:23,780
and then we need to take care of this

323
00:12:20,060 --> 00:12:32,329
this register spilling and similar kind

324
00:12:23,780 --> 00:12:36,260
of low-level issues arise so we

325
00:12:32,330 --> 00:12:39,350
evaluated our scheme on end bench the

326
00:12:36,260 --> 00:12:42,560
benchmarking programs at the time we did

327
00:12:39,350 --> 00:12:44,950
this we didn't have any any PA capable

328
00:12:42,560 --> 00:12:47,359
hardware available so we did all of our

329
00:12:44,950 --> 00:12:50,660
so we did our functional evaluation on

330
00:12:47,360 --> 00:12:52,280
the arm FTP simulators so these are

331
00:12:50,660 --> 00:12:54,680
these are functionally equivalent to the

332
00:12:52,280 --> 00:12:55,970
hardware but they are not cycle accurate

333
00:12:54,680 --> 00:13:00,260
so we could not do the performance

334
00:12:55,970 --> 00:13:02,720
evaluation using using the simulators so

335
00:13:00,260 --> 00:13:05,510
instead we did this estimate of how much

336
00:13:02,720 --> 00:13:07,390
we think that the PA is called spi

337
00:13:05,510 --> 00:13:10,670
instructions are going to cause overhead

338
00:13:07,390 --> 00:13:12,620
and this estimate was based on their own

339
00:13:10,670 --> 00:13:14,180
two facts first we know from the arm

340
00:13:12,620 --> 00:13:16,070
specification they suggest that you

341
00:13:14,180 --> 00:13:19,130
could use the car Margareta to implement

342
00:13:16,070 --> 00:13:21,620
this ba ba hardware and from prior

343
00:13:19,130 --> 00:13:22,760
analysis of the the car Margaret we know

344
00:13:21,620 --> 00:13:24,560
that it's going to have about a four

345
00:13:22,760 --> 00:13:26,490
cycle overhead on the kind of CPUs we

346
00:13:24,560 --> 00:13:28,810
used

347
00:13:26,490 --> 00:13:31,000
so the results here that they are

348
00:13:28,810 --> 00:13:32,500
reported and normalized to the baseline

349
00:13:31,000 --> 00:13:36,070
so a value of one who would be mean

350
00:13:32,500 --> 00:13:37,330
essentially no no overhead we first

351
00:13:36,070 --> 00:13:40,090
tested only this return of this

352
00:13:37,330 --> 00:13:42,970
protection and that has less than half a

353
00:13:40,090 --> 00:13:44,860
percent of overhead and a similar

354
00:13:42,970 --> 00:13:48,580
situation for called pointer signing so

355
00:13:44,860 --> 00:13:50,020
so again less than less than 1% for data

356
00:13:48,580 --> 00:13:52,930
pointers the situation changes quite

357
00:13:50,020 --> 00:13:54,250
quite a lot this is also expected

358
00:13:52,930 --> 00:13:56,709
because data pointers not obviously you

359
00:13:54,250 --> 00:13:59,260
is much much more than code pointers or

360
00:13:56,710 --> 00:14:02,680
function calls and it also depends very

361
00:13:59,260 --> 00:14:04,090
much on on the kind of day data usage

362
00:14:02,680 --> 00:14:05,500
patterns to the programs like you can

363
00:14:04,090 --> 00:14:07,900
see had in some of these cases we had

364
00:14:05,500 --> 00:14:13,750
almost no no data pointers at all in

365
00:14:07,900 --> 00:14:15,250
which case we'll also saw no overhead we

366
00:14:13,750 --> 00:14:16,810
also also did measurements were

367
00:14:15,250 --> 00:14:18,300
combining all of these but now because

368
00:14:16,810 --> 00:14:20,500
the data updated point our

369
00:14:18,300 --> 00:14:22,479
instrumentation kind of dominates here

370
00:14:20,500 --> 00:14:30,520
they're essentially the same as the

371
00:14:22,480 --> 00:14:32,560
previous results so this I hope I

372
00:14:30,520 --> 00:14:34,360
convinced you that at one point an

373
00:14:32,560 --> 00:14:36,489
authentication is a useful feature for

374
00:14:34,360 --> 00:14:37,780
achieving the important integrity and

375
00:14:36,490 --> 00:14:39,550
what what's particularly interesting

376
00:14:37,780 --> 00:14:41,709
about this is that it's going to be

377
00:14:39,550 --> 00:14:43,390
available in all upcoming arm um

378
00:14:41,710 --> 00:14:46,420
hardware so it is going to be widely

379
00:14:43,390 --> 00:14:49,300
deployed there are some some questions

380
00:14:46,420 --> 00:14:51,250
that still remain so can we do something

381
00:14:49,300 --> 00:14:57,310
better that we do now to minimize this

382
00:14:51,250 --> 00:14:58,450
this cop of attacks and in our follow-up

383
00:14:57,310 --> 00:15:00,640
work for instance we have already shown

384
00:14:58,450 --> 00:15:02,589
that that that we can do this for return

385
00:15:00,640 --> 00:15:04,000
addresses but what could we do this for

386
00:15:02,589 --> 00:15:07,000
they the pointers and code pointers that

387
00:15:04,000 --> 00:15:08,830
remains to be seen and there's also

388
00:15:07,000 --> 00:15:10,540
other upcoming Hardware primitives

389
00:15:08,830 --> 00:15:13,030
there's going to be our memory tagging

390
00:15:10,540 --> 00:15:15,099
and armed branch target indicator so can

391
00:15:13,030 --> 00:15:16,750
we somehow combine all of these in some

392
00:15:15,100 --> 00:15:18,040
kind of new novel ways to get to get

393
00:15:16,750 --> 00:15:22,260
something more from what we could get

394
00:15:18,040 --> 00:15:25,150
from this in the individually so this

395
00:15:22,260 --> 00:15:27,040
done so thank you and be happy to answer

396
00:15:25,150 --> 00:15:33,490
as a questions

397
00:15:27,040 --> 00:15:36,579
[Applause]

398
00:15:33,490 --> 00:15:38,930
hi John Frizzle University of Rochester

399
00:15:36,579 --> 00:15:40,910
so one question I have about your

400
00:15:38,930 --> 00:15:42,709
implementation is how are you

401
00:15:40,910 --> 00:15:45,500
determining the data types for data

402
00:15:42,709 --> 00:15:47,300
pointers are using the LVM type

403
00:15:45,500 --> 00:15:49,160
information yes we used to

404
00:15:47,300 --> 00:15:51,589
intermediately kind of lrvm element

405
00:15:49,160 --> 00:15:55,459
types are aware that that type system is

406
00:15:51,589 --> 00:15:57,890
unsound yes so it doesn't match seesee

407
00:15:55,459 --> 00:15:59,869
exactly well not only not only that but

408
00:15:57,890 --> 00:16:01,399
it can be typecasted you know if you

409
00:15:59,870 --> 00:16:02,810
have unions in your data structures and

410
00:16:01,399 --> 00:16:05,600
whatnot so have you considered how your

411
00:16:02,810 --> 00:16:08,089
system would handle that yes so for for

412
00:16:05,600 --> 00:16:09,019
unions yeah and we have some special

413
00:16:08,089 --> 00:16:10,940
code that handles even years for

414
00:16:09,019 --> 00:16:12,050
instance an especially type punning for

415
00:16:10,940 --> 00:16:13,940
instance we do handle those cases

416
00:16:12,050 --> 00:16:16,399
although it did require some country

417
00:16:13,940 --> 00:16:27,290
characters to work around that okay

418
00:16:16,399 --> 00:16:29,870
thank you alright so another question so

419
00:16:27,290 --> 00:16:33,349
I like the fact that I think what you're

420
00:16:29,870 --> 00:16:35,690
essentially doing is using the message

421
00:16:33,350 --> 00:16:39,620
authentication code as as a tight tag

422
00:16:35,690 --> 00:16:41,360
right so have you considered other type

423
00:16:39,620 --> 00:16:43,579
systems that you might actually want to

424
00:16:41,360 --> 00:16:45,279
apply this to so just kind of his

425
00:16:43,579 --> 00:16:48,349
background we had a fun and interesting

426
00:16:45,279 --> 00:16:49,430
ideas paper back at PL di 2009 where we

427
00:16:48,350 --> 00:16:51,560
essentially said if you encrypted

428
00:16:49,430 --> 00:16:52,609
pointers with different keys different

429
00:16:51,560 --> 00:16:54,319
you could use the different keys to

430
00:16:52,610 --> 00:16:56,540
essentially express a probabilistic type

431
00:16:54,320 --> 00:16:57,800
system thing right so I'm just curious

432
00:16:56,540 --> 00:16:59,410
whether you thought about other type

433
00:16:57,800 --> 00:17:05,448
systems that you might want to enforce

434
00:16:59,410 --> 00:17:07,369
using your mechanism so you mean other

435
00:17:05,449 --> 00:17:09,260
types of modifiers like any inputs for

436
00:17:07,369 --> 00:17:11,530
this this back well so for example you

437
00:17:09,260 --> 00:17:14,089
could you could implement type systems

438
00:17:11,530 --> 00:17:16,849
for example that or say like object

439
00:17:14,089 --> 00:17:20,000
sensitive or context sensitive things

440
00:17:16,849 --> 00:17:21,649
like that yeah yeah I think that's

441
00:17:20,000 --> 00:17:22,910
probably a good idea to think about

442
00:17:21,650 --> 00:17:25,720
there and we did try to think about

443
00:17:22,910 --> 00:17:28,130
other ways we could use this and this

444
00:17:25,720 --> 00:17:29,600
this seemed like a kind of the most

445
00:17:28,130 --> 00:17:31,760
compatible way we could think of that

446
00:17:29,600 --> 00:17:35,240
wouldn't cost too much kind of kind of

447
00:17:31,760 --> 00:17:39,420
weird corner cases ok thank you thank

448
00:17:35,240 --> 00:17:42,150
you are there

449
00:17:39,420 --> 00:17:43,510
questions that case let's thanks the

450
00:17:42,150 --> 00:17:48,230
speaker again

451
00:17:43,510 --> 00:17:48,230
[Applause]

