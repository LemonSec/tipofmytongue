1
00:00:10,460 --> 00:00:13,379
okay thank you very much for

2
00:00:12,179 --> 00:00:15,480
introduction and thank you very much for

3
00:00:13,379 --> 00:00:18,029
coming here this talk will be about

4
00:00:15,480 --> 00:00:19,619
memory forensics and in particular how

5
00:00:18,029 --> 00:00:21,570
would propose a more principled approach

6
00:00:19,619 --> 00:00:23,970
for the assessment and design of memory

7
00:00:21,570 --> 00:00:26,130
forensic techniques despite being only

8
00:00:23,970 --> 00:00:28,738
15 years old memory forensic is nowadays

9
00:00:26,130 --> 00:00:30,808
used in many different scenarios in many

10
00:00:28,739 --> 00:00:33,480
different context is used for model

11
00:00:30,809 --> 00:00:37,520
analysis in instant response activities

12
00:00:33,480 --> 00:00:40,620
but also for the analysis of sees device

13
00:00:37,520 --> 00:00:43,410
in all these three cases the workflow of

14
00:00:40,620 --> 00:00:47,190
memory forensics is pretty similar first

15
00:00:43,410 --> 00:00:48,900
of all the analyst has to acquire a

16
00:00:47,190 --> 00:00:51,360
memory dump from the machine under

17
00:00:48,900 --> 00:00:54,540
analysis so basically to read the

18
00:00:51,360 --> 00:00:56,879
content of the volatile memory after it

19
00:00:54,540 --> 00:00:58,710
does so we can run a bunch of different

20
00:00:56,880 --> 00:01:01,290
analysis on these never dump which we'll

21
00:00:58,710 --> 00:01:03,840
talk about later and from is analogous

22
00:01:01,290 --> 00:01:05,610
again evidence so we understand

23
00:01:03,840 --> 00:01:07,439
basically what went wrong what was

24
00:01:05,610 --> 00:01:07,920
allowed their behavior and so forth and

25
00:01:07,439 --> 00:01:10,169
so on

26
00:01:07,920 --> 00:01:11,820
the purpose of today's talk is gonna be

27
00:01:10,170 --> 00:01:15,270
on there is this part of memory

28
00:01:11,820 --> 00:01:17,548
forensics why analysis are important

29
00:01:15,270 --> 00:01:20,130
because our IDs are the core of this

30
00:01:17,549 --> 00:01:22,320
discipline we analysis we can extract

31
00:01:20,130 --> 00:01:24,869
many different information from a memory

32
00:01:22,320 --> 00:01:27,210
dump we can extract for example the list

33
00:01:24,870 --> 00:01:29,820
of processes the list of current modules

34
00:01:27,210 --> 00:01:32,610
and then given a process we can tell

35
00:01:29,820 --> 00:01:36,270
which files this process had open when

36
00:01:32,610 --> 00:01:39,030
the dump was taken we can see which were

37
00:01:36,270 --> 00:01:41,039
the process memory mappings if you had

38
00:01:39,030 --> 00:01:42,420
some sockets or some open connections

39
00:01:41,040 --> 00:01:44,760
and so forth and so on

40
00:01:42,420 --> 00:01:46,740
and moreover we can also extract a bunch

41
00:01:44,760 --> 00:01:49,229
of other interesting system information

42
00:01:46,740 --> 00:01:50,908
for example the routing table the kernel

43
00:01:49,229 --> 00:01:52,500
logs the clipboard content there is

44
00:01:50,909 --> 00:01:54,090
really many many many interesting stuff

45
00:01:52,500 --> 00:01:56,930
that you can extract from a memory dump

46
00:01:54,090 --> 00:01:59,580
just to give you a bit more context have

47
00:01:56,930 --> 00:02:02,280
volatility which is one of the most used

48
00:01:59,580 --> 00:02:05,039
framework for memory forensics out there

49
00:02:02,280 --> 00:02:07,650
nowadays counts more than 100 plugin

50
00:02:05,040 --> 00:02:08,939
only for windows plus there is also a

51
00:02:07,650 --> 00:02:10,679
bunch of other plugins which are

52
00:02:08,939 --> 00:02:13,560
developed by the community which is very

53
00:02:10,679 --> 00:02:15,930
active but let's take a closer look how

54
00:02:13,560 --> 00:02:18,000
this plug-in works for example let's

55
00:02:15,930 --> 00:02:20,280
take decades when we ask for a tea to

56
00:02:18,000 --> 00:02:22,349
list the processes in a linux memory

57
00:02:20,280 --> 00:02:23,350
dump the first thing that the framework

58
00:02:22,349 --> 00:02:26,010
does is to look

59
00:02:23,350 --> 00:02:28,030
the colonel global variable in tasks

60
00:02:26,010 --> 00:02:30,010
which is of type destruct

61
00:02:28,030 --> 00:02:31,810
which you might know the struct is a

62
00:02:30,010 --> 00:02:34,090
very important concept in the kernel

63
00:02:31,810 --> 00:02:36,430
because you know from there you can

64
00:02:34,090 --> 00:02:41,260
reach many other information bill that

65
00:02:36,430 --> 00:02:42,910
belongs to a process anyway once II once

66
00:02:41,260 --> 00:02:45,250
the framework you locate this variable

67
00:02:42,910 --> 00:02:47,710
is simply the reference the task field

68
00:02:45,250 --> 00:02:49,960
and tooth is reaching the second task

69
00:02:47,710 --> 00:02:51,970
and then this process is simply repeated

70
00:02:49,960 --> 00:02:54,610
over and over again up until the whole

71
00:02:51,970 --> 00:02:55,720
list of processes are constructed but

72
00:02:54,610 --> 00:02:57,910
this is not the only way that the

73
00:02:55,720 --> 00:02:58,480
framework has to reconstruct the list of

74
00:02:57,910 --> 00:03:00,310
processes

75
00:02:58,480 --> 00:03:03,250
there is another plugin which is called

76
00:03:00,310 --> 00:03:06,580
linux P - table which as the name

77
00:03:03,250 --> 00:03:08,770
suggests uses the P - table of the

78
00:03:06,580 --> 00:03:11,080
kernel which actually the correct self

79
00:03:08,770 --> 00:03:14,500
uses to locate a task and given a PID

80
00:03:11,080 --> 00:03:15,970
and also in this case the model

81
00:03:14,500 --> 00:03:17,860
sovereignty of the framework is very

82
00:03:15,970 --> 00:03:20,470
similar so first of all there is a

83
00:03:17,860 --> 00:03:23,850
global variable which is located by - in

84
00:03:20,470 --> 00:03:26,530
this case and then you know a bunch of

85
00:03:23,850 --> 00:03:29,200
pointers are referenced a bunch of

86
00:03:26,530 --> 00:03:33,010
structures are traversed and then the

87
00:03:29,200 --> 00:03:34,510
full list of process is reconstructed so

88
00:03:33,010 --> 00:03:36,190
let's get to the point what's the

89
00:03:34,510 --> 00:03:38,079
problem with this approach to memory

90
00:03:36,190 --> 00:03:41,200
forensics the problem is that these

91
00:03:38,080 --> 00:03:43,450
analogies are manually created extracted

92
00:03:41,200 --> 00:03:45,339
and implemented by humans nowadays and

93
00:03:43,450 --> 00:03:49,060
this leaves many interesting question

94
00:03:45,340 --> 00:03:50,530
open which we are not able to answer the

95
00:03:49,060 --> 00:03:52,930
first question which is I think very

96
00:03:50,530 --> 00:03:55,060
interesting is if there are other

97
00:03:52,930 --> 00:03:58,420
techniques to this processes under under

98
00:03:55,060 --> 00:04:00,700
Linux this is very important because you

99
00:03:58,420 --> 00:04:03,429
might know that multirotors can remove

100
00:04:00,700 --> 00:04:05,799
processes from the process list and are

101
00:04:03,430 --> 00:04:08,740
able to hide it from memory fresh

102
00:04:05,800 --> 00:04:11,850
techniques and actually I would expect

103
00:04:08,740 --> 00:04:14,950
that because the Linux kernel

104
00:04:11,850 --> 00:04:16,510
4.19 nowadays containment 6/6 are

105
00:04:14,950 --> 00:04:18,459
structures which counts more than

106
00:04:16,510 --> 00:04:22,510
40-thousand field so it's really a huge

107
00:04:18,459 --> 00:04:25,180
graph of interconnected structures but

108
00:04:22,510 --> 00:04:27,400
what's more interesting is if we have

109
00:04:25,180 --> 00:04:30,580
the way if we can find a way to compare

110
00:04:27,400 --> 00:04:31,810
different techniques it's unclear if

111
00:04:30,580 --> 00:04:36,020
there is a technique which is better

112
00:04:31,810 --> 00:04:39,380
than another and for now and for now

113
00:04:36,020 --> 00:04:40,609
and after to this question to answer

114
00:04:39,380 --> 00:04:43,909
this question so we made this following

115
00:04:40,610 --> 00:04:46,910
contribution first of all we build a

116
00:04:43,910 --> 00:04:49,840
graph of current structures which

117
00:04:46,910 --> 00:04:52,130
basically means in which sorry nodes

118
00:04:49,840 --> 00:04:53,929
represent a current structure an

119
00:04:52,130 --> 00:04:56,150
instance of a kind of structure and

120
00:04:53,930 --> 00:04:58,850
energy represent a pointer from one

121
00:04:56,150 --> 00:05:01,370
structure to another then we define a

122
00:04:58,850 --> 00:05:04,210
set of metrics which we report on our

123
00:05:01,370 --> 00:05:08,000
graph and which we use to evaluate

124
00:05:04,210 --> 00:05:10,489
forensic analysis and finally we combine

125
00:05:08,000 --> 00:05:13,730
these two contribution together and we

126
00:05:10,490 --> 00:05:18,040
study analysis by representing them by

127
00:05:13,730 --> 00:05:21,080
expressing them as a path on our graph

128
00:05:18,040 --> 00:05:23,120
but a state also look how now we create

129
00:05:21,080 --> 00:05:25,760
a discover graph actually the algorithm

130
00:05:23,120 --> 00:05:29,300
is pretty simple is based on a work list

131
00:05:25,760 --> 00:05:31,580
which gets initialized with the address

132
00:05:29,300 --> 00:05:33,470
of the camera global variables and then

133
00:05:31,580 --> 00:05:37,099
basically we just iterate over this work

134
00:05:33,470 --> 00:05:38,660
list so we take one structure and we

135
00:05:37,100 --> 00:05:41,330
explore the structure which means that

136
00:05:38,660 --> 00:05:43,580
we basically you know look at these

137
00:05:41,330 --> 00:05:45,260
fields and if these fields are pointer

138
00:05:43,580 --> 00:05:48,109
to a structured reference them there are

139
00:05:45,260 --> 00:05:50,900
arrays we just work the race and this

140
00:05:48,110 --> 00:05:52,940
exploration will bring us to new

141
00:05:50,900 --> 00:05:55,010
structures which are in turn appended to

142
00:05:52,940 --> 00:05:57,500
the work list and then simply we repeat

143
00:05:55,010 --> 00:06:02,200
this process over over again up until

144
00:05:57,500 --> 00:06:02,200
the the work list is not empty

145
00:06:02,440 --> 00:06:07,790
there is many challenges that that came

146
00:06:06,050 --> 00:06:12,860
up when we try to implement this

147
00:06:07,790 --> 00:06:14,510
algorithm they are all studied and and

148
00:06:12,860 --> 00:06:17,450
you can find them in the paper but most

149
00:06:14,510 --> 00:06:18,890
most I'm pretty sure the the most

150
00:06:17,450 --> 00:06:21,650
interesting one is the one related on

151
00:06:18,890 --> 00:06:23,890
the way that the kernel implements link

152
00:06:21,650 --> 00:06:26,960
at least a red-black trees another

153
00:06:23,890 --> 00:06:29,570
structure what is actually problem we

154
00:06:26,960 --> 00:06:31,099
can understand from an example so this

155
00:06:29,570 --> 00:06:33,200
is the way the kernel uses to implement

156
00:06:31,100 --> 00:06:36,140
a double link at least and they are the

157
00:06:33,200 --> 00:06:38,510
important thing to notice is that the

158
00:06:36,140 --> 00:06:41,090
task field doesn't point to the

159
00:06:38,510 --> 00:06:44,210
beginning of the next task but instead

160
00:06:41,090 --> 00:06:47,270
appoints in the middle of it and the

161
00:06:44,210 --> 00:06:48,630
problem is that not all the fields point

162
00:06:47,270 --> 00:06:49,979
to their same own

163
00:06:48,630 --> 00:06:52,110
for example the children feel doesn't

164
00:06:49,980 --> 00:06:54,870
point to children but instead it points

165
00:06:52,110 --> 00:06:57,180
to siblings and this is an information

166
00:06:54,870 --> 00:06:59,010
that we need to have before we start

167
00:06:57,180 --> 00:07:01,500
this pression because if you assume that

168
00:06:59,010 --> 00:07:03,180
every field points bees on then you know

169
00:07:01,500 --> 00:07:05,460
we will just make a broadcast and so it

170
00:07:03,180 --> 00:07:08,580
will just reach basically everyone

171
00:07:05,460 --> 00:07:09,960
structure at the bronc offset to solve

172
00:07:08,580 --> 00:07:14,190
this problem we created a sealing

173
00:07:09,960 --> 00:07:16,500
plug-in that analyzes the Kara lab 16th

174
00:07:14,190 --> 00:07:19,110
extreme and what this plug-in does is

175
00:07:16,500 --> 00:07:21,270
basically it intercepts all the function

176
00:07:19,110 --> 00:07:26,940
related to list management in this case

177
00:07:21,270 --> 00:07:28,740
listed and then basically it eternalized

178
00:07:26,940 --> 00:07:30,690
a argument to these functions

179
00:07:28,740 --> 00:07:34,470
so from these arises is able to derive

180
00:07:30,690 --> 00:07:36,930
these set of rules we were finally able

181
00:07:34,470 --> 00:07:38,910
to create our graph which you can see in

182
00:07:36,930 --> 00:07:42,030
this slide and which interact in our

183
00:07:38,910 --> 00:07:43,770
experiment contained around 100,000

184
00:07:42,030 --> 00:07:47,010
structures which are represented as node

185
00:07:43,770 --> 00:07:48,539
in the graph and more than 800,000

186
00:07:47,010 --> 00:07:52,140
pointers which are instead represented

187
00:07:48,540 --> 00:07:54,980
as edges in the graph so at this point

188
00:07:52,140 --> 00:08:00,390
we start to look around for some matrix

189
00:07:54,980 --> 00:08:02,580
that sorry unsub blue currents for

190
00:08:00,390 --> 00:08:04,229
symmetric that we want to express on our

191
00:08:02,580 --> 00:08:05,550
graph and the rationale behind this

192
00:08:04,230 --> 00:08:09,240
matrix is that the should capture

193
00:08:05,550 --> 00:08:10,830
different aspect of memory forensics the

194
00:08:09,240 --> 00:08:13,590
first internal aspect that we want to

195
00:08:10,830 --> 00:08:16,800
capture is the fact that nowadays memory

196
00:08:13,590 --> 00:08:18,840
is not acquired in an atomic way what

197
00:08:16,800 --> 00:08:20,820
does this mean this means that while the

198
00:08:18,840 --> 00:08:24,810
memory accretion process is running the

199
00:08:20,820 --> 00:08:27,060
operating system is not frozen because

200
00:08:24,810 --> 00:08:29,160
for example the memory creation process

201
00:08:27,060 --> 00:08:31,020
is nowadays implemented by a kernel

202
00:08:29,160 --> 00:08:33,419
driver and this can actually introducing

203
00:08:31,020 --> 00:08:35,640
introducing consistencies because the

204
00:08:33,419 --> 00:08:37,348
resulting memory dump doesn't reflect

205
00:08:35,640 --> 00:08:39,390
the state of the memory at the given

206
00:08:37,349 --> 00:08:42,810
point in time but instead is more like a

207
00:08:39,390 --> 00:08:43,760
mix of different time points the second

208
00:08:42,809 --> 00:08:46,709
problem

209
00:08:43,760 --> 00:08:48,540
aspect of memory forensic is the fact

210
00:08:46,710 --> 00:08:51,270
that the layout of camera structure

211
00:08:48,540 --> 00:08:53,579
changes across different kernel version

212
00:08:51,270 --> 00:08:55,199
because fields are continuously other

213
00:08:53,580 --> 00:08:57,630
they are moved from the definition of

214
00:08:55,200 --> 00:08:59,250
the structures but also the very same

215
00:08:57,630 --> 00:09:01,300
kernel version compiled with a different

216
00:08:59,250 --> 00:09:04,720
configuration

217
00:09:01,300 --> 00:09:06,130
in a different layout and moreover

218
00:09:04,720 --> 00:09:07,840
another thing that you want to try to

219
00:09:06,130 --> 00:09:11,320
express on our graph is the fact that

220
00:09:07,840 --> 00:09:14,680
attackers can modify kernel structures

221
00:09:11,320 --> 00:09:16,630
so it would be for sure pretty cool to

222
00:09:14,680 --> 00:09:19,270
be able to find some way to reach for

223
00:09:16,630 --> 00:09:21,250
example the tasks that pass by hedges

224
00:09:19,270 --> 00:09:24,730
which are not tamper herbal by an

225
00:09:21,250 --> 00:09:27,970
attacker so in this paper we propose

226
00:09:24,730 --> 00:09:29,620
five different matrix and this is a

227
00:09:27,970 --> 00:09:30,820
presentation I will just talk about the

228
00:09:29,620 --> 00:09:33,610
first three but you can find out details

229
00:09:30,820 --> 00:09:36,010
in the paper the first metric that we

230
00:09:33,610 --> 00:09:38,950
express on our graph is atomicity which

231
00:09:36,010 --> 00:09:41,230
measures the distance in memory between

232
00:09:38,950 --> 00:09:43,840
two connected structures to equate this

233
00:09:41,230 --> 00:09:45,910
metric what we did is that we mark the

234
00:09:43,840 --> 00:09:48,940
nodes with the physical address or they

235
00:09:45,910 --> 00:09:51,459
were the structure was residing in the

236
00:09:48,940 --> 00:09:54,790
physical memory and on the edges instead

237
00:09:51,460 --> 00:09:58,630
we put the absolute distance between two

238
00:09:54,790 --> 00:10:01,120
connected structures the second matrix

239
00:09:58,630 --> 00:10:05,530
that we expressed on our graph is

240
00:10:01,120 --> 00:10:08,410
stability that basically measures how

241
00:10:05,530 --> 00:10:10,689
long an edge remain stable in a running

242
00:10:08,410 --> 00:10:12,520
machine and to do so we took 25

243
00:10:10,690 --> 00:10:14,950
different snapshot of the same virtual

244
00:10:12,520 --> 00:10:18,790
machine so we created 25 different

245
00:10:14,950 --> 00:10:20,650
graphs and then by looking at the edges

246
00:10:18,790 --> 00:10:22,990
in this graph we were able to understand

247
00:10:20,650 --> 00:10:25,329
which edges remain stable and which

248
00:10:22,990 --> 00:10:28,660
instead the you know changed and when

249
00:10:25,330 --> 00:10:32,230
they and when they change and finally in

250
00:10:28,660 --> 00:10:35,350
this paper we also show that matrix can

251
00:10:32,230 --> 00:10:37,630
be combined for example consistency is a

252
00:10:35,350 --> 00:10:41,020
combination of atomicity and stability

253
00:10:37,630 --> 00:10:43,150
and this metric express the fact that an

254
00:10:41,020 --> 00:10:49,300
edge might be inconsistent because the

255
00:10:43,150 --> 00:10:51,280
member is not acquired atomically we

256
00:10:49,300 --> 00:10:54,670
reuse our framework in different

257
00:10:51,280 --> 00:10:57,160
scenarios the first one that I will

258
00:10:54,670 --> 00:10:59,140
present today is the evaluation and the

259
00:10:57,160 --> 00:11:01,780
study of current memory forensic

260
00:10:59,140 --> 00:11:03,220
analysis to study these analysis what we

261
00:11:01,780 --> 00:11:05,920
did is that we took 17 different

262
00:11:03,220 --> 00:11:07,870
volatility plugins from the plug-in that

263
00:11:05,920 --> 00:11:11,459
we see process to the one at least there

264
00:11:07,870 --> 00:11:11,460
are cash to the one that lists the

265
00:11:11,560 --> 00:11:17,050
list them and we reported them to inside

266
00:11:14,860 --> 00:11:20,139
the inside our graph so we express them

267
00:11:17,050 --> 00:11:22,449
as a path on our graph and the first

268
00:11:20,139 --> 00:11:24,850
interesting result came up when we start

269
00:11:22,449 --> 00:11:29,979
to look at the nodes which are used by

270
00:11:24,850 --> 00:11:33,069
these by these plugins because we found

271
00:11:29,980 --> 00:11:35,560
out that the 96% of these nodes belong

272
00:11:33,069 --> 00:11:37,389
to a giant strongly connected component

273
00:11:35,560 --> 00:11:41,079
inside our graph which contains on

274
00:11:37,389 --> 00:11:43,149
average a 53% of the downloads and is

275
00:11:41,079 --> 00:11:46,120
the already interesting result because

276
00:11:43,149 --> 00:11:50,199
this means that even if you are missing

277
00:11:46,120 --> 00:11:51,670
the entry points inside this connected

278
00:11:50,199 --> 00:11:53,560
component so even if you're missing the

279
00:11:51,670 --> 00:11:56,829
position of the chemical or variable

280
00:11:53,560 --> 00:11:58,899
just by finding one node which belongs

281
00:11:56,829 --> 00:12:02,019
to this component then you're able to

282
00:11:58,899 --> 00:12:05,529
reach all the nodes used by these but is

283
00:12:02,019 --> 00:12:07,629
analysis on the other end when we start

284
00:12:05,529 --> 00:12:10,600
to look at stability we found out that

285
00:12:07,629 --> 00:12:14,470
three paths so three analysis never

286
00:12:10,600 --> 00:12:16,839
change in over three hours so all across

287
00:12:14,470 --> 00:12:19,569
our experiment on the other end we found

288
00:12:16,839 --> 00:12:22,029
out that 11 paths change in less than

289
00:12:19,569 --> 00:12:24,099
one minute which actually ins the fact

290
00:12:22,029 --> 00:12:26,730
that the graph of kernel structure is

291
00:12:24,100 --> 00:12:29,740
not really stable but is that instead

292
00:12:26,730 --> 00:12:32,110
changes quite a lot but the most

293
00:12:29,740 --> 00:12:33,699
interesting isn't for sure came when we

294
00:12:32,110 --> 00:12:36,279
start to look at the consistency of

295
00:12:33,699 --> 00:12:38,050
these plugins and in this case we found

296
00:12:36,279 --> 00:12:42,040
out that depending on the speed of

297
00:12:38,050 --> 00:12:44,740
acquisition five to seven plugins are

298
00:12:42,040 --> 00:12:46,599
inconsistent and here of course the

299
00:12:44,740 --> 00:12:50,860
result of the inconsistency it really

300
00:12:46,600 --> 00:12:53,829
depends to which head is inconsistent if

301
00:12:50,860 --> 00:12:56,439
the edge is very very beginning of the

302
00:12:53,829 --> 00:12:59,109
of this analysis then the plug-in might

303
00:12:56,439 --> 00:13:01,449
not return any output but it can also

304
00:12:59,110 --> 00:13:04,990
happen that the plug-in report some

305
00:13:01,449 --> 00:13:07,508
wrong how it would and finally we also

306
00:13:04,990 --> 00:13:10,420
use our framework to try to find new

307
00:13:07,509 --> 00:13:11,589
ways to list processes actually do the

308
00:13:10,420 --> 00:13:16,540
problem which was much harder than

309
00:13:11,589 --> 00:13:18,819
expected because first of all the only

310
00:13:16,540 --> 00:13:20,679
one we started considering the shortest

311
00:13:18,819 --> 00:13:23,479
path from every root node to add a

312
00:13:20,679 --> 00:13:26,630
struct we already find hundreds of

313
00:13:23,480 --> 00:13:28,459
but so we run pretty soon in a pot

314
00:13:26,630 --> 00:13:31,250
explosion problem and the second problem

315
00:13:28,459 --> 00:13:35,510
is that not really every path inside our

316
00:13:31,250 --> 00:13:37,399
graph representing eristic because the

317
00:13:35,510 --> 00:13:40,730
ristic smashed be generated by an

318
00:13:37,399 --> 00:13:43,040
algorithm so first of all we focus on

319
00:13:40,730 --> 00:13:44,899
the we focus on the problem of the path

320
00:13:43,040 --> 00:13:46,490
explosion the path external program

321
00:13:44,899 --> 00:13:49,760
sorry and to limit it

322
00:13:46,490 --> 00:13:52,850
we removed every root node that is not

323
00:13:49,760 --> 00:13:54,769
connected to every destruct then we just

324
00:13:52,850 --> 00:13:56,889
removed all the edges which are used by

325
00:13:54,769 --> 00:14:00,860
non techniques for example it does fill

326
00:13:56,889 --> 00:14:04,310
we also remove all the similar edges

327
00:14:00,860 --> 00:14:06,440
which are parallel edges which basically

328
00:14:04,310 --> 00:14:09,768
have the same weight and finally to

329
00:14:06,440 --> 00:14:11,810
express the fact that annalistic must be

330
00:14:09,769 --> 00:14:14,720
generated by an algorithm we merge

331
00:14:11,810 --> 00:14:16,250
similar parts inside the templates these

332
00:14:14,720 --> 00:14:18,769
templates are basically generated by

333
00:14:16,250 --> 00:14:22,430
keeping all the structure type of the

334
00:14:18,769 --> 00:14:24,620
node involved in a path and then by

335
00:14:22,430 --> 00:14:27,260
squeezing together adjacent same type

336
00:14:24,620 --> 00:14:31,630
nodes and with this approach we were

337
00:14:27,260 --> 00:14:33,769
able to find 44,000 path templates out

338
00:14:31,630 --> 00:14:36,290
of which we were able to find new

339
00:14:33,769 --> 00:14:38,959
interesting ways to list the processes

340
00:14:36,290 --> 00:14:41,540
for sure the first one is the most

341
00:14:38,959 --> 00:14:44,660
interesting one which is in the C group

342
00:14:41,540 --> 00:14:47,240
category and with these new eristic by

343
00:14:44,660 --> 00:14:49,760
passing through some c group structures

344
00:14:47,240 --> 00:14:51,440
we are able to reach all the processes

345
00:14:49,760 --> 00:14:54,110
and all the threads which were running

346
00:14:51,440 --> 00:14:55,970
in the system on the other end we also

347
00:14:54,110 --> 00:14:59,139
find two new techniques in the memory

348
00:14:55,970 --> 00:15:01,550
and filesystem category which by passing

349
00:14:59,139 --> 00:15:05,329
through memory of our system structures

350
00:15:01,550 --> 00:15:07,699
are able to reach hold all the processes

351
00:15:05,329 --> 00:15:11,180
which have at least one memory mapped

352
00:15:07,699 --> 00:15:13,040
file and finally we also find a new way

353
00:15:11,180 --> 00:15:17,120
to list the kernel workers which are

354
00:15:13,040 --> 00:15:19,610
still part of the of the process list we

355
00:15:17,120 --> 00:15:22,760
implemented all of these all of these

356
00:15:19,610 --> 00:15:25,850
new techniques as volatility plugins so

357
00:15:22,760 --> 00:15:28,069
just to wrap it up I hope I was able to

358
00:15:25,850 --> 00:15:30,529
convince you that forensic analysis can

359
00:15:28,069 --> 00:15:33,170
be and should be extracted and evaluated

360
00:15:30,529 --> 00:15:34,699
in a more principled way to do so what

361
00:15:33,170 --> 00:15:36,949
we did is that we created the kernel

362
00:15:34,699 --> 00:15:39,319
graph that model

363
00:15:36,950 --> 00:15:43,130
structure so that model how this

364
00:15:39,320 --> 00:15:45,530
structure are connected we also define

365
00:15:43,130 --> 00:15:47,810
and propose a set of metric that

366
00:15:45,530 --> 00:15:51,050
captures different aspects of memory

367
00:15:47,810 --> 00:15:53,810
forensics and finally we show that our

368
00:15:51,050 --> 00:15:55,790
framework can be used to to study

369
00:15:53,810 --> 00:15:58,609
current and future memory forensic

370
00:15:55,790 --> 00:16:02,750
techniques so I really I really think

371
00:15:58,610 --> 00:16:04,850
that there is more research that can be

372
00:16:02,750 --> 00:16:06,650
done with this framework so we are

373
00:16:04,850 --> 00:16:08,480
releasing all the tool holder source

374
00:16:06,650 --> 00:16:11,150
code and all the artifacts that were

375
00:16:08,480 --> 00:16:14,150
produced produced during this work these

376
00:16:11,150 --> 00:16:15,770
are these others okay sorry if I went a

377
00:16:14,150 --> 00:16:17,390
little bit too fast thank you very much

378
00:16:15,770 --> 00:16:25,280
for attention if you have any questions

379
00:16:17,390 --> 00:16:32,360
we'll be happy to take them we survived

380
00:16:25,280 --> 00:16:37,160
a type of regressions come on I know

381
00:16:32,360 --> 00:16:40,310
nothing about memory forensics but I do

382
00:16:37,160 --> 00:16:41,510
have a question yeah okay so you you

383
00:16:40,310 --> 00:16:44,780
have that whole list yeah this is a

384
00:16:41,510 --> 00:16:45,890
great list oh and to me like manually

385
00:16:44,780 --> 00:16:47,780
this kind of makes sense I like if I

386
00:16:45,890 --> 00:16:50,360
want to list files like also have great

387
00:16:47,780 --> 00:16:53,120
right scripters how does your gigantic

388
00:16:50,360 --> 00:16:57,200
graph lead to like something that I can

389
00:16:53,120 --> 00:16:59,780
understand right so like you you want to

390
00:16:57,200 --> 00:17:01,850
like okay we can figure out like the way

391
00:16:59,780 --> 00:17:03,680
to get like list of of PIDs uh-huh I

392
00:17:01,850 --> 00:17:06,319
like presumably there's other things

393
00:17:03,680 --> 00:17:07,550
that I'd care about like how do i how do

394
00:17:06,319 --> 00:17:10,099
i use this tool

395
00:17:07,550 --> 00:17:12,589
well this tool can be i mean we have

396
00:17:10,099 --> 00:17:14,869
many other scenarios in which this tool

397
00:17:12,589 --> 00:17:16,669
can be used for sure other than the two

398
00:17:14,869 --> 00:17:18,919
that I represent in this presentation I

399
00:17:16,670 --> 00:17:21,260
think yeah there is still a lot of work

400
00:17:18,920 --> 00:17:23,180
done that needs to be done in the

401
00:17:21,260 --> 00:17:24,800
exploration of this graph so wrists in

402
00:17:23,180 --> 00:17:26,540
many properties which are interesting

403
00:17:24,800 --> 00:17:30,770
for forensic that can be extracted I

404
00:17:26,540 --> 00:17:32,889
think all right thanks thank you very

405
00:17:30,770 --> 00:17:32,889
much

406
00:17:33,360 --> 00:17:38,289
you

407
00:17:33,440 --> 00:17:38,289
[Applause]

