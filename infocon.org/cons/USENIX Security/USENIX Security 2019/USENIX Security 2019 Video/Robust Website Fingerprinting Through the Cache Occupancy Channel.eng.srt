1
00:00:10,530 --> 00:00:16,180
okay I'm Anatole I'll present you the

2
00:00:13,930 --> 00:00:18,340
book robust website fingerprinting to

3
00:00:16,180 --> 00:00:20,439
the cache a coupe and C channel this is

4
00:00:18,340 --> 00:00:21,130
a joint work with Lachlan you're then

5
00:00:20,439 --> 00:00:26,380
yourself

6
00:00:21,130 --> 00:00:29,289
pratik Yossi and eval first of all let's

7
00:00:26,380 --> 00:00:31,330
talk about privacy in the web actually

8
00:00:29,289 --> 00:00:32,710
any network eavesdropper can easily

9
00:00:31,330 --> 00:00:35,500
monitor the source and the destination

10
00:00:32,710 --> 00:00:38,710
of the network traffic and then see

11
00:00:35,500 --> 00:00:40,900
which website the victim source then he

12
00:00:38,710 --> 00:00:44,229
might reveal secrets about the victim

13
00:00:40,900 --> 00:00:46,800
such as affiliation political views or

14
00:00:44,229 --> 00:00:46,800
sexual orientation

15
00:00:46,920 --> 00:00:52,659
so therefore several privacy enhancing

16
00:00:49,960 --> 00:00:56,940
tools were invented such as the tor

17
00:00:52,659 --> 00:01:00,790
browser and tor network internet work

18
00:00:56,940 --> 00:01:06,880
the sauce and the destination is not in

19
00:01:00,790 --> 00:01:09,658
the traffic so the on path adversary can

20
00:01:06,880 --> 00:01:15,699
identify which website the victim serve

21
00:01:09,659 --> 00:01:21,329
so are we done yet with this contour

22
00:01:15,700 --> 00:01:24,030
measure think no and several researchers

23
00:01:21,329 --> 00:01:28,839
were trying to find unique website

24
00:01:24,030 --> 00:01:31,810
fingerprinting trying to identify which

25
00:01:28,840 --> 00:01:37,090
website which website the victim serve

26
00:01:31,810 --> 00:01:42,280
and the different of different of

27
00:01:37,090 --> 00:01:44,799
websites are objects like pictures

28
00:01:42,280 --> 00:01:48,909
videos and scripts that are running on

29
00:01:44,799 --> 00:01:53,109
different order and this was translated

30
00:01:48,909 --> 00:01:55,929
to features like packet length and the

31
00:01:53,109 --> 00:02:00,818
timing direction and the unpassed

32
00:01:55,929 --> 00:02:04,539
adversary a used used machine learning

33
00:02:00,819 --> 00:02:12,400
and statistics to identify which website

34
00:02:04,539 --> 00:02:14,830
the user visited so what if we don't

35
00:02:12,400 --> 00:02:19,540
have this on path that were sorry

36
00:02:14,830 --> 00:02:22,560
between the between the user and secure

37
00:02:19,540 --> 00:02:25,590
Network and what if our

38
00:02:22,560 --> 00:02:32,040
what if our attacker is somewhere in the

39
00:02:25,590 --> 00:02:34,650
world and wants to attack remotely our

40
00:02:32,040 --> 00:02:38,480
attack model assumes that the attacker

41
00:02:34,650 --> 00:02:43,670
can inject some adverse some

42
00:02:38,480 --> 00:02:48,750
advertisement in the in the users

43
00:02:43,670 --> 00:02:53,359
browser maybe it's a background window

44
00:02:48,750 --> 00:02:58,950
or the same page and it runs on the same

45
00:02:53,360 --> 00:03:01,250
architecture like the target computer so

46
00:02:58,950 --> 00:03:05,070
how does it work

47
00:03:01,250 --> 00:03:09,569
the attacker sends the advertisement to

48
00:03:05,070 --> 00:03:12,590
the target computer then the victim surf

49
00:03:09,569 --> 00:03:17,760
to his favorite private web site

50
00:03:12,590 --> 00:03:22,769
well he surf it leaves footprints on the

51
00:03:17,760 --> 00:03:26,390
cache last level cache and that the

52
00:03:22,769 --> 00:03:30,630
advertisement using a prominent robotic

53
00:03:26,390 --> 00:03:34,738
reading the cache and sending it to the

54
00:03:30,630 --> 00:03:37,380
adversary so what did we have we

55
00:03:34,739 --> 00:03:42,750
collected more than 20 data set of 100

56
00:03:37,380 --> 00:03:45,870
traces for for each website of 100

57
00:03:42,750 --> 00:03:49,170
websites and several unlabeled websites

58
00:03:45,870 --> 00:03:54,239
lots of them we try and deep learning

59
00:03:49,170 --> 00:03:57,390
model and find these good results on

60
00:03:54,239 --> 00:04:02,579
Firefox and tour of accuracy allowed out

61
00:03:57,390 --> 00:04:05,250
of a hundred websites so the most

62
00:04:02,579 --> 00:04:08,180
important thing is that reducing time

63
00:04:05,250 --> 00:04:14,459
resolution doesn't eliminate the threat

64
00:04:08,180 --> 00:04:17,298
so it doesn't help to do that I'll talk

65
00:04:14,459 --> 00:04:21,510
first of all about the priming probe

66
00:04:17,298 --> 00:04:26,820
it's a thing that the previous talk

67
00:04:21,510 --> 00:04:31,200
about that so we have a we have a memory

68
00:04:26,820 --> 00:04:32,300
buffer that the adversary allocate in

69
00:04:31,200 --> 00:04:36,050
the main memory

70
00:04:32,300 --> 00:04:39,440
and when the and it accesses every cache

71
00:04:36,050 --> 00:04:42,259
line in the loop then the victims uses

72
00:04:39,440 --> 00:04:45,349
his process and adversary using timing

73
00:04:42,259 --> 00:04:51,289
attack can identify some features about

74
00:04:45,349 --> 00:04:55,009
the process of the victim so let's see

75
00:04:51,289 --> 00:04:57,860
these traces of the cache of the cache

76
00:04:55,009 --> 00:05:01,550
while surfing different web sites so we

77
00:04:57,860 --> 00:05:06,530
measured the access in over the whole

78
00:05:01,550 --> 00:05:10,250
last level cache and the darker points

79
00:05:06,530 --> 00:05:14,840
are the the largest can cache contention

80
00:05:10,250 --> 00:05:17,210
is this time slot so every trace of that

81
00:05:14,840 --> 00:05:19,669
is different visit of a website the

82
00:05:17,210 --> 00:05:23,000
first three are Wikipedia the next we

83
00:05:19,669 --> 00:05:25,419
heat up and then Oracle and we can see

84
00:05:23,000 --> 00:05:29,090
with the our eyes the patterns that

85
00:05:25,419 --> 00:05:34,128
there are in the cache and we can see

86
00:05:29,090 --> 00:05:37,638
that there is very visible differences

87
00:05:34,129 --> 00:05:39,800
between different web sites so if we can

88
00:05:37,639 --> 00:05:44,500
see it with our eyes why not machine

89
00:05:39,800 --> 00:05:44,500
learning Mandela do this instead of us

90
00:05:45,490 --> 00:05:52,550
what was our problem is that JavaScript

91
00:05:49,340 --> 00:05:56,388
timer resolution from the years went

92
00:05:52,550 --> 00:05:59,270
lower and lower in 2014 the time

93
00:05:56,389 --> 00:06:01,639
resolution was one nanosecond and in

94
00:05:59,270 --> 00:06:04,698
Spain the sandbox they did lots of

95
00:06:01,639 --> 00:06:07,969
privacy attacks using this very accurate

96
00:06:04,699 --> 00:06:10,759
time resolution but now through the

97
00:06:07,969 --> 00:06:14,000
specter and meltdown attacks they try to

98
00:06:10,759 --> 00:06:17,419
produce such countermeasure of reducing

99
00:06:14,000 --> 00:06:19,789
the time resolution so now in chrome

100
00:06:17,419 --> 00:06:22,008
it's a point 1 millisecond Safari it's

101
00:06:19,789 --> 00:06:25,639
one millisecond Firefox 2 millisecond

102
00:06:22,009 --> 00:06:28,660
and tor browser is a hundred millisecond

103
00:06:25,639 --> 00:06:32,770
and in this

104
00:06:28,660 --> 00:06:37,110
little time resolution it makes cash

105
00:06:32,770 --> 00:06:41,469
attack priming probe really useless

106
00:06:37,110 --> 00:06:45,760
thank so what did we do instead of

107
00:06:41,470 --> 00:06:50,680
measuring the cash contention on each

108
00:06:45,760 --> 00:06:52,750
cash set as previous set works did we we

109
00:06:50,680 --> 00:06:56,770
measured the contention over the whole

110
00:06:52,750 --> 00:06:58,990
last level cache over time so we got a

111
00:06:56,770 --> 00:07:08,349
bit lower resolution of priming probe

112
00:06:58,990 --> 00:07:10,600
but this this made us make some insights

113
00:07:08,350 --> 00:07:15,480
about the these traces and use them for

114
00:07:10,600 --> 00:07:19,090
the model what did we do with the

115
00:07:15,480 --> 00:07:21,040
extreme low for a solution with a

116
00:07:19,090 --> 00:07:24,070
hundred millisecond instead of measuring

117
00:07:21,040 --> 00:07:26,890
priming probe of the whole last level

118
00:07:24,070 --> 00:07:29,500
cache we counted the number of hole a

119
00:07:26,890 --> 00:07:36,460
cache probes in a hand medicine in a

120
00:07:29,500 --> 00:07:39,610
hundred millisecond so we had more

121
00:07:36,460 --> 00:07:45,700
accurate time resolution just by

122
00:07:39,610 --> 00:07:49,630
counting the number of priming probes so

123
00:07:45,700 --> 00:07:52,719
our valuation model was collecting lots

124
00:07:49,630 --> 00:07:56,260
of data it was a six month of data

125
00:07:52,720 --> 00:07:58,540
collection lots of different websites in

126
00:07:56,260 --> 00:08:04,260
different settings on different

127
00:07:58,540 --> 00:08:06,970
countries in Israel and in Australia and

128
00:08:04,260 --> 00:08:12,310
then we trained the deep learning models

129
00:08:06,970 --> 00:08:17,850
on this on these traces and we evaluate

130
00:08:12,310 --> 00:08:21,250
this in accuracy on different test set

131
00:08:17,850 --> 00:08:25,330
so how did our collection setup work we

132
00:08:21,250 --> 00:08:28,840
had a browsing agent that visit several

133
00:08:25,330 --> 00:08:30,880
websites and in every visit of website

134
00:08:28,840 --> 00:08:35,199
we collected the cash attack trace and

135
00:08:30,880 --> 00:08:38,230
then to compare it to previous works we

136
00:08:35,200 --> 00:08:41,590
we did a man-in-the-middle and network

137
00:08:38,230 --> 00:08:44,250
tracer so the cache traces and the

138
00:08:41,590 --> 00:08:50,760
network traces will be a relative

139
00:08:44,250 --> 00:08:54,720
relatively one each one and then we

140
00:08:50,760 --> 00:08:59,350
applied lots of machine learning models

141
00:08:54,720 --> 00:09:01,750
so which data set types we had we had a

142
00:08:59,350 --> 00:09:05,140
native application and JavaScript attack

143
00:09:01,750 --> 00:09:08,050
network versus cache attack different

144
00:09:05,140 --> 00:09:10,300
browsers Firefox Chrome Safari tor and

145
00:09:08,050 --> 00:09:14,229
different operating systems Linux

146
00:09:10,300 --> 00:09:17,349
Windows and Mac OS we had different data

147
00:09:14,230 --> 00:09:20,970
types like previously defined the closed

148
00:09:17,350 --> 00:09:23,380
world data set that had a set of

149
00:09:20,970 --> 00:09:26,020
sensitive website that that the attacker

150
00:09:23,380 --> 00:09:28,510
want to identify and they are the only

151
00:09:26,020 --> 00:09:32,020
in the world and from the other hand we

152
00:09:28,510 --> 00:09:36,460
have the open world webs data set that

153
00:09:32,020 --> 00:09:40,150
has this websites and it has more

154
00:09:36,460 --> 00:09:42,400
websites in the world it like the real

155
00:09:40,150 --> 00:09:45,790
world and that occurred just want to

156
00:09:42,400 --> 00:09:48,520
identify if it's one of the sensitive

157
00:09:45,790 --> 00:09:53,560
websites or one of the others non

158
00:09:48,520 --> 00:09:56,860
sensitive websites so we had another

159
00:09:53,560 --> 00:09:59,260
data set with the compression with

160
00:09:56,860 --> 00:10:03,970
network fingerprinting countermeasures

161
00:09:59,260 --> 00:10:09,040
we wanted to see the effect of them the

162
00:10:03,970 --> 00:10:11,800
control measures of network are are just

163
00:10:09,040 --> 00:10:14,949
trying to minimize the leak from the

164
00:10:11,800 --> 00:10:19,329
features of packet size and direction

165
00:10:14,950 --> 00:10:22,720
and they did packet padding and traffic

166
00:10:19,330 --> 00:10:29,320
molding to drop the classifier accuracy

167
00:10:22,720 --> 00:10:32,440
to base rate so the results this is the

168
00:10:29,320 --> 00:10:36,310
results are in close world we have from

169
00:10:32,440 --> 00:10:41,610
72 to 90% on closed world in regular

170
00:10:36,310 --> 00:10:46,479
browsers and open world of 72 till 87 in

171
00:10:41,610 --> 00:10:52,029
open world and inter browser we had 46%

172
00:10:46,480 --> 00:10:55,199
in close world and 62% in open world we

173
00:10:52,029 --> 00:11:00,449
have lots of results in our paper and

174
00:10:55,199 --> 00:11:00,449
just read it they are not the only ones

175
00:11:00,540 --> 00:11:07,209
let's see about the contour measure we

176
00:11:03,850 --> 00:11:09,850
proposed so we did a cash activity

177
00:11:07,209 --> 00:11:12,489
masking we just allocate a cash sized

178
00:11:09,850 --> 00:11:14,800
buffer and access to every cache line in

179
00:11:12,490 --> 00:11:19,149
the loop it's like the attack but in a

180
00:11:14,800 --> 00:11:23,250
counter measure it has an impact of

181
00:11:19,149 --> 00:11:26,949
about 5% on the computer performance but

182
00:11:23,250 --> 00:11:31,779
comparing to regular tour performance is

183
00:11:26,949 --> 00:11:35,079
very admissible so using this counter

184
00:11:31,779 --> 00:11:38,110
measure a tour classifier drops the

185
00:11:35,079 --> 00:11:42,189
accuracy to base rate but regular

186
00:11:38,110 --> 00:11:46,480
browsers drop only about 10% in this

187
00:11:42,190 --> 00:11:51,880
make the question about the contour

188
00:11:46,480 --> 00:11:53,829
measure on regular browser still open so

189
00:11:51,880 --> 00:11:56,589
in summary we had unprivileged code

190
00:11:53,829 --> 00:11:59,199
running on victim's machine beating the

191
00:11:56,589 --> 00:12:02,949
low timer resolution and we present and

192
00:11:59,199 --> 00:12:06,699
an effective countermeasure we have

193
00:12:02,949 --> 00:12:10,060
several data set open and released in a

194
00:12:06,699 --> 00:12:13,449
triple-a data set that said you can see

195
00:12:10,060 --> 00:12:16,180
it in the link and the thousand of cache

196
00:12:13,449 --> 00:12:19,359
contention traces a hundred and forty

197
00:12:16,180 --> 00:12:22,180
gigabyte of them they associated with

198
00:12:19,360 --> 00:12:24,910
the network traces so you compare and

199
00:12:22,180 --> 00:12:29,888
the deep learning classifiers and Python

200
00:12:24,910 --> 00:12:33,990
scripts and the internet so you can use

201
00:12:29,889 --> 00:12:33,990
it and play with it thank you very much

202
00:12:36,940 --> 00:12:41,180
okay thank you very much for this nice

203
00:12:38,960 --> 00:12:42,980
to talk so I see there are some

204
00:12:41,180 --> 00:12:44,329
questions so if you ask a question

205
00:12:42,980 --> 00:12:49,580
please introduce yourself and your

206
00:12:44,330 --> 00:12:52,070
Institute hi John Criswell University

207
00:12:49,580 --> 00:12:54,170
University of Rochester nice work

208
00:12:52,070 --> 00:12:57,770
one question I have is that now that you

209
00:12:54,170 --> 00:13:00,469
can fingerprint websites based on the

210
00:12:57,770 --> 00:13:02,390
browser's cache in behavior can websites

211
00:13:00,470 --> 00:13:04,880
start designing their pages so that they

212
00:13:02,390 --> 00:13:07,550
appear to have the cache behavior of

213
00:13:04,880 --> 00:13:09,800
another website so essentially tricking

214
00:13:07,550 --> 00:13:12,620
your system by by essentially doing a

215
00:13:09,800 --> 00:13:14,229
mimicry cache behavior attack of some

216
00:13:12,620 --> 00:13:18,160
sort do you think that might be possible

217
00:13:14,230 --> 00:13:21,590
there is a similar work in on a network

218
00:13:18,160 --> 00:13:26,150
fingerprinting that does this stuff it

219
00:13:21,590 --> 00:13:30,250
tries to mimic the other website but in

220
00:13:26,150 --> 00:13:34,880
cache attack and nobody think try that

221
00:13:30,250 --> 00:13:38,180
for my knowledge so so so why do you

222
00:13:34,880 --> 00:13:43,280
think that I think that it's interesting

223
00:13:38,180 --> 00:13:47,420
but it has to be mimicking it's very

224
00:13:43,280 --> 00:13:53,630
good because in time the the cache

225
00:13:47,420 --> 00:13:56,030
traces are changing and you should try

226
00:13:53,630 --> 00:14:00,830
to keep following the different website

227
00:13:56,030 --> 00:14:05,660
and changing this cache this cache

228
00:14:00,830 --> 00:14:05,930
attack this control measure okay thank

229
00:14:05,660 --> 00:14:09,740
you

230
00:14:05,930 --> 00:14:13,729
Thanks okay any other questions okay so

231
00:14:09,740 --> 00:14:17,330
maybe I have one yeah so as I understood

232
00:14:13,730 --> 00:14:19,250
it now what you do you train your model

233
00:14:17,330 --> 00:14:23,900
for a website for a specific browser and

234
00:14:19,250 --> 00:14:26,270
then you try to detect this website I'm

235
00:14:23,900 --> 00:14:28,010
coming from the area of web security and

236
00:14:26,270 --> 00:14:30,949
I know that browsers have different

237
00:14:28,010 --> 00:14:32,930
behaviors when parsing the website is it

238
00:14:30,950 --> 00:14:36,110
also possible if you for example train

239
00:14:32,930 --> 00:14:38,709
the browser for a trainer model for for

240
00:14:36,110 --> 00:14:43,280
example Firefox and you would detect

241
00:14:38,710 --> 00:14:46,850
using here now using your attacks also

242
00:14:43,280 --> 00:14:47,290
attacks also a victim using Chrome for

243
00:14:46,850 --> 00:14:51,310
exam

244
00:14:47,290 --> 00:14:54,430
okay this is a question of more of deep

245
00:14:51,310 --> 00:14:59,199
learning there are works that can do

246
00:14:54,430 --> 00:15:01,810
this but it's some technique more it's a

247
00:14:59,200 --> 00:15:08,560
specific technique you can do in machine

248
00:15:01,810 --> 00:15:10,630
learning but usually it can detect that

249
00:15:08,560 --> 00:15:12,910
by default because the different

250
00:15:10,630 --> 00:15:17,280
behaviors because of the different time

251
00:15:12,910 --> 00:15:21,579
resolutions and it's more complicated

252
00:15:17,280 --> 00:15:24,880
okay so it's more complicated but okay

253
00:15:21,580 --> 00:15:27,340
okay but we don't the profile of this

254
00:15:24,880 --> 00:15:29,110
last level cache for this website's not

255
00:15:27,340 --> 00:15:33,580
completely changed if you use different

256
00:15:29,110 --> 00:15:36,760
browser yeah it changed but but you

257
00:15:33,580 --> 00:15:41,520
still can maybe find I we didn't do this

258
00:15:36,760 --> 00:15:44,860
search because the order of the object

259
00:15:41,520 --> 00:15:49,600
loading and all of the staff in the

260
00:15:44,860 --> 00:15:51,370
websites are have the same order in the

261
00:15:49,600 --> 00:15:54,280
same website maybe there is some

262
00:15:51,370 --> 00:15:56,710
correlation between them and we can find

263
00:15:54,280 --> 00:16:00,220
a way to do this using deep learning but

264
00:15:56,710 --> 00:16:07,720
we didn't try that okay okay okay

265
00:16:00,220 --> 00:16:11,230
there's an hour question yeah please hi

266
00:16:07,720 --> 00:16:14,010
great work wooden partitioning the last

267
00:16:11,230 --> 00:16:16,600
level cache across your like between

268
00:16:14,010 --> 00:16:18,850
your process and another mistress Turing

269
00:16:16,600 --> 00:16:20,920
process mitigate that kind of attack so

270
00:16:18,850 --> 00:16:23,290
that you don't have the occupancy or the

271
00:16:20,920 --> 00:16:25,030
contention there

272
00:16:23,290 --> 00:16:27,040
if you partition your last level cache

273
00:16:25,030 --> 00:16:30,699
yeah basically so you don't have

274
00:16:27,040 --> 00:16:32,230
contention observable contention yeah so

275
00:16:30,700 --> 00:16:34,630
there is you can't really measure the

276
00:16:32,230 --> 00:16:37,840
cache occupancy with this mitigate your

277
00:16:34,630 --> 00:16:40,780
attack if I can't measure the cache

278
00:16:37,840 --> 00:16:43,750
contention that guess I don't have the

279
00:16:40,780 --> 00:16:45,730
attack but yeah so if you partition your

280
00:16:43,750 --> 00:16:47,940
last level cache you wouldn't have that

281
00:16:45,730 --> 00:16:47,940
right

282
00:16:50,610 --> 00:16:57,730
okay so I assume there are normal

283
00:16:55,270 --> 00:16:58,670
Christians so let's thank a Tele once

284
00:16:57,730 --> 00:17:03,610
again for his top

285
00:16:58,670 --> 00:17:03,610
[Applause]

