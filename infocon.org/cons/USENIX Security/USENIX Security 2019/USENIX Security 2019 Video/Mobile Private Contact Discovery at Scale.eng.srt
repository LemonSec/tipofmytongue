1
00:00:11,450 --> 00:00:15,530
good morning everyone today it's my

2
00:00:13,430 --> 00:00:18,080
pleasure to present to you joint work we

3
00:00:15,530 --> 00:00:20,600
did with cots University of Technology

4
00:00:18,080 --> 00:00:23,060
on so called mobile private contact

5
00:00:20,600 --> 00:00:24,890
Discovery first to get you up to speed

6
00:00:23,060 --> 00:00:26,869
what is actually mobile contact

7
00:00:24,890 --> 00:00:28,779
discovery well when you install a

8
00:00:26,869 --> 00:00:32,060
messaging application on your smartphone

9
00:00:28,779 --> 00:00:34,100
say whatsapp one of the first things

10
00:00:32,060 --> 00:00:35,600
that happens is that the app checks

11
00:00:34,100 --> 00:00:37,340
which of the contacts in your address

12
00:00:35,600 --> 00:00:40,040
book are connected to the service as

13
00:00:37,340 --> 00:00:41,960
well for this it could of course simply

14
00:00:40,040 --> 00:00:44,089
tell the service provider which contacts

15
00:00:41,960 --> 00:00:45,379
are in your address book and the service

16
00:00:44,090 --> 00:00:47,949
provider then lets you know which of

17
00:00:45,379 --> 00:00:50,539
these contacts are using the service

18
00:00:47,949 --> 00:00:53,149
this brings me actually to the first

19
00:00:50,539 --> 00:00:55,269
point of my agenda for this talk we will

20
00:00:53,149 --> 00:00:57,469
look at how mobile contact cover

21
00:00:55,269 --> 00:00:59,300
discovery is currently handled in

22
00:00:57,469 --> 00:01:02,239
practice and why there are some severe

23
00:00:59,300 --> 00:01:05,300
privacy issues as a privacy preserving

24
00:01:02,239 --> 00:01:06,920
alternative we then suggest to deploy so

25
00:01:05,300 --> 00:01:09,590
called unbalanced private set

26
00:01:06,920 --> 00:01:11,450
intersection protocols and since quite

27
00:01:09,590 --> 00:01:13,910
some demanding performance requirements

28
00:01:11,450 --> 00:01:15,650
I will tell you how we tweaked all the

29
00:01:13,910 --> 00:01:17,890
necessary building blocks to get great

30
00:01:15,650 --> 00:01:21,560
performance we met a large scale and

31
00:01:17,890 --> 00:01:24,380
finally I want to show you the benefits

32
00:01:21,560 --> 00:01:26,509
we can get from writing native code for

33
00:01:24,380 --> 00:01:28,729
secure computation protocols not only

34
00:01:26,509 --> 00:01:32,630
for the server side but also for modern

35
00:01:28,729 --> 00:01:35,030
mobile platforms now regarding privacy

36
00:01:32,630 --> 00:01:38,929
concerns in mobile contact discovery you

37
00:01:35,030 --> 00:01:41,210
have to be aware that trivial procedure

38
00:01:38,930 --> 00:01:43,850
I outlined in the beginning basically

39
00:01:41,210 --> 00:01:46,280
leaves your entire social graph now you

40
00:01:43,850 --> 00:01:49,429
might say who cares I'm just a boring

41
00:01:46,280 --> 00:01:51,409
PhD student but imagine for example

42
00:01:49,430 --> 00:01:53,750
you're a journalist and are interacting

43
00:01:51,409 --> 00:01:55,939
with confidential sources and impactful

44
00:01:53,750 --> 00:01:58,070
whistleblowers the service provider or

45
00:01:55,939 --> 00:02:00,798
any kind of agency monitoring that

46
00:01:58,070 --> 00:02:03,548
service might find such information very

47
00:02:00,799 --> 00:02:06,469
interesting to say the least

48
00:02:03,549 --> 00:02:08,149
so our contribution when it comes to

49
00:02:06,469 --> 00:02:10,460
examining and improving the current

50
00:02:08,149 --> 00:02:13,460
situations are as follows

51
00:02:10,460 --> 00:02:16,010
first we performed a survey on secure

52
00:02:13,460 --> 00:02:17,570
mobile messaging applications showing

53
00:02:16,010 --> 00:02:19,429
that none of them provides proper

54
00:02:17,570 --> 00:02:22,970
privacy protection during contact

55
00:02:19,430 --> 00:02:24,530
discovery therefore we optimized OPR F

56
00:02:22,970 --> 00:02:26,990
based unbalanced private

57
00:02:24,530 --> 00:02:29,170
intersection protocols with cuckoo fill

58
00:02:26,990 --> 00:02:31,520
channel compression novel orgy

59
00:02:29,170 --> 00:02:34,280
pre-computation techniques and a more

60
00:02:31,520 --> 00:02:36,740
efficient PRF while even providing

61
00:02:34,280 --> 00:02:39,080
security against malicious clients which

62
00:02:36,740 --> 00:02:41,390
is very important in mobile contact as

63
00:02:39,080 --> 00:02:43,250
curry since in principle every client

64
00:02:41,390 --> 00:02:46,609
could run a modified version of the

65
00:02:43,250 --> 00:02:48,830
messaging application and we also

66
00:02:46,610 --> 00:02:52,040
implemented these protocols in native C

67
00:02:48,830 --> 00:02:53,840
C++ utilizing new MBH instruction sets

68
00:02:52,040 --> 00:02:56,570
for hardware accelerated crypto and

69
00:02:53,840 --> 00:02:58,160
vector operations that give us a 1,000

70
00:02:56,570 --> 00:03:01,640
times faster garbled circuit evaluation

71
00:02:58,160 --> 00:03:03,859
and when putting these implementations

72
00:03:01,640 --> 00:03:06,049
into the signal android client and

73
00:03:03,860 --> 00:03:07,880
performing last scale benchmarks we get

74
00:03:06,050 --> 00:03:10,970
that even for a database with more than

75
00:03:07,880 --> 00:03:12,890
250 million users the online phase of

76
00:03:10,970 --> 00:03:17,209
our protocols on a real LTE connection

77
00:03:12,890 --> 00:03:19,010
takes only about five seconds regarding

78
00:03:17,209 --> 00:03:20,930
this survey we looked at mobile

79
00:03:19,010 --> 00:03:22,190
messaging applications that are secure

80
00:03:20,930 --> 00:03:25,040
in the sense that they provide

81
00:03:22,190 --> 00:03:26,660
end-to-end encryption and checked using

82
00:03:25,040 --> 00:03:30,320
different analysis techniques how they

83
00:03:26,660 --> 00:03:32,870
perform contact discovery here are the

84
00:03:30,320 --> 00:03:34,880
results as you can see many of them

85
00:03:32,870 --> 00:03:37,010
actually use the trivial solution I

86
00:03:34,880 --> 00:03:38,959
outlined in the beginning here for

87
00:03:37,010 --> 00:03:42,048
example what whatsapp says in its legal

88
00:03:38,959 --> 00:03:44,180
info you provide us all in accordance

89
00:03:42,049 --> 00:03:46,040
with applicable laws the phone numbers

90
00:03:44,180 --> 00:03:48,680
of whatsapp users and your other

91
00:03:46,040 --> 00:03:52,760
contacts in your mobile address book on

92
00:03:48,680 --> 00:03:55,010
a regular basis the best thing some of

93
00:03:52,760 --> 00:03:57,048
the ads do is to use a naive hashing

94
00:03:55,010 --> 00:03:59,570
based protocol where the client only

95
00:03:57,049 --> 00:04:02,150
sends hashes of the phone numbers to the

96
00:03:59,570 --> 00:04:03,859
service provider unfortunately this can

97
00:04:02,150 --> 00:04:06,230
be assumed to be almost as insecure

98
00:04:03,860 --> 00:04:08,060
because such hashes are vulnerable to

99
00:04:06,230 --> 00:04:11,540
prove false and dictionary attacks due

100
00:04:08,060 --> 00:04:13,370
to the low entropy and phone numbers as

101
00:04:11,540 --> 00:04:15,828
an alternative to do to these unsecure

102
00:04:13,370 --> 00:04:17,000
methods we propose to deploy private set

103
00:04:15,829 --> 00:04:21,410
intersection protocols

104
00:04:17,000 --> 00:04:23,090
psi in short in general psi protocols

105
00:04:21,410 --> 00:04:25,669
are cryptographic protocols with

106
00:04:23,090 --> 00:04:27,469
provable security that allow two parties

107
00:04:25,669 --> 00:04:29,900
to compute the intersection of the input

108
00:04:27,470 --> 00:04:32,360
sets such that nothing but the actual

109
00:04:29,900 --> 00:04:34,580
intersection is revealed the problem

110
00:04:32,360 --> 00:04:36,590
with most psi protocols in the context

111
00:04:34,580 --> 00:04:38,770
of mobile contact discovery is however

112
00:04:36,590 --> 00:04:41,229
that their communication come

113
00:04:38,770 --> 00:04:42,849
the online phase of the protocol which

114
00:04:41,229 --> 00:04:45,669
is the phase where you actually compute

115
00:04:42,849 --> 00:04:48,789
the intersection depends linearly on the

116
00:04:45,669 --> 00:04:51,639
size of both input sets which is kind of

117
00:04:48,789 --> 00:04:53,530
a showstopper considering that in mobile

118
00:04:51,639 --> 00:04:55,509
contact discovery the server database

119
00:04:53,530 --> 00:04:58,719
can be expected to have millions or even

120
00:04:55,509 --> 00:05:00,750
billions of entries whereas the client

121
00:04:58,720 --> 00:05:04,870
can be assumed to have let's say around

122
00:05:00,750 --> 00:05:07,720
1,000 contacts only luckily there are

123
00:05:04,870 --> 00:05:09,940
also so-called unbalanced psi protocols

124
00:05:07,720 --> 00:05:12,220
that are designed specifically for the

125
00:05:09,940 --> 00:05:14,560
use case where one input set is much

126
00:05:12,220 --> 00:05:15,789
larger than the other one and these

127
00:05:14,560 --> 00:05:20,169
protocols then have an online

128
00:05:15,789 --> 00:05:21,880
communication complexity that is only

129
00:05:20,169 --> 00:05:23,650
linear in the size of the client input

130
00:05:21,880 --> 00:05:25,810
set and they shift the major

131
00:05:23,650 --> 00:05:27,340
communication complexity to a setup

132
00:05:25,810 --> 00:05:29,830
phase that can be run at an arbitrary

133
00:05:27,340 --> 00:05:32,979
point in time before the actual

134
00:05:29,830 --> 00:05:35,948
computation and usually is a one-time

135
00:05:32,979 --> 00:05:38,680
cost when it comes related to work in

136
00:05:35,949 --> 00:05:41,560
that area we can see three protocol

137
00:05:38,680 --> 00:05:43,810
families first their protocols based on

138
00:05:41,560 --> 00:05:46,599
fully homomorphic encryption that have

139
00:05:43,810 --> 00:05:48,460
the lowest communication however when

140
00:05:46,599 --> 00:05:50,500
running them at the scale we consider in

141
00:05:48,460 --> 00:05:52,810
this paper the service provider would

142
00:05:50,500 --> 00:05:55,659
have to pay for around 30 million core

143
00:05:52,810 --> 00:05:58,840
hours every single day which is kind of

144
00:05:55,659 --> 00:06:01,240
expensive then there's a protocol that

145
00:05:58,840 --> 00:06:04,210
combines psi with private information

146
00:06:01,240 --> 00:06:06,669
retrieval protocols however they need to

147
00:06:04,210 --> 00:06:08,560
assume multiple non-coding server where

148
00:06:06,669 --> 00:06:10,419
the two server version and external

149
00:06:08,560 --> 00:06:12,940
server requires a full copy of the user

150
00:06:10,419 --> 00:06:16,359
database which we would like to avoid

151
00:06:12,940 --> 00:06:18,940
and finally there's a work by kiss allow

152
00:06:16,360 --> 00:06:21,009
that brings multiple existing secure to

153
00:06:18,940 --> 00:06:25,000
party psi protocols in a so-called

154
00:06:21,009 --> 00:06:27,909
pre-computation form and that allows

155
00:06:25,000 --> 00:06:30,550
these protocols to act as unbalanced PCI

156
00:06:27,909 --> 00:06:32,590
protocols some of these protocols are

157
00:06:30,550 --> 00:06:35,469
based purely on public key crypto and

158
00:06:32,590 --> 00:06:38,229
some are based on oblivious

159
00:06:35,469 --> 00:06:40,330
pseudo-random function evaluations from

160
00:06:38,229 --> 00:06:42,460
all these protocols we close our looked

161
00:06:40,330 --> 00:06:45,099
at two that can easily be made secure

162
00:06:42,460 --> 00:06:46,620
against malicious clients simply by

163
00:06:45,099 --> 00:06:50,729
using malicious

164
00:06:46,620 --> 00:06:52,949
your obvious transfer one of these

165
00:06:50,729 --> 00:06:56,099
protocols obliviously evaluates the now

166
00:06:52,949 --> 00:06:58,770
wrangle PRF and the other one evaluates

167
00:06:56,100 --> 00:07:00,630
garbled AES circuits and the reason why

168
00:06:58,770 --> 00:07:02,789
these protocols can easily be secured

169
00:07:00,630 --> 00:07:05,010
against malicious clients is because the

170
00:07:02,790 --> 00:07:06,630
only messages to client sent and these

171
00:07:05,010 --> 00:07:10,080
protocols are those for oblivious

172
00:07:06,630 --> 00:07:12,240
transfer to give you an idea how both

173
00:07:10,080 --> 00:07:15,000
selected protocols work let's quickly go

174
00:07:12,240 --> 00:07:16,770
through the different phases first we

175
00:07:15,000 --> 00:07:19,440
have a base phases completely

176
00:07:16,770 --> 00:07:21,719
independent of any input and consists

177
00:07:19,440 --> 00:07:23,490
mostly of of oblivious transfer

178
00:07:21,720 --> 00:07:26,130
pre-computation and the server also

179
00:07:23,490 --> 00:07:28,590
generates a secret key in the version

180
00:07:26,130 --> 00:07:30,510
where we wanted to evaluate Gabbert

181
00:07:28,590 --> 00:07:32,340
circuits and also and the server also

182
00:07:30,510 --> 00:07:37,289
builds and transfers these garbled

183
00:07:32,340 --> 00:07:39,388
circuits then in the setup phase the

184
00:07:37,289 --> 00:07:40,740
server encrypts all contacts in its

185
00:07:39,389 --> 00:07:42,270
database and puts them in a

186
00:07:40,740 --> 00:07:45,449
probabilistic data structure for

187
00:07:42,270 --> 00:07:47,159
efficient membership testing which we

188
00:07:45,449 --> 00:07:49,830
instantiate in this work with a so

189
00:07:47,160 --> 00:07:51,990
called kuku filter this Coco filter is

190
00:07:49,830 --> 00:07:54,479
then transferred through and stored by

191
00:07:51,990 --> 00:07:57,930
the client and finally in the online

192
00:07:54,479 --> 00:08:00,450
face client and server engage in OPR F

193
00:07:57,930 --> 00:08:02,820
evaluations where the client obliviously

194
00:08:00,450 --> 00:08:04,889
obtains encryptions of its address book

195
00:08:02,820 --> 00:08:07,139
entries under the server secret key

196
00:08:04,889 --> 00:08:11,039
which is then can check against the kuku

197
00:08:07,139 --> 00:08:14,430
filter so we took the mentioned o PRF

198
00:08:11,039 --> 00:08:16,860
peers based psi protocols and looked at

199
00:08:14,430 --> 00:08:19,349
every single building block to optimize

200
00:08:16,860 --> 00:08:21,479
performance we now want to quickly

201
00:08:19,349 --> 00:08:23,610
highlight two optimizations we did on

202
00:08:21,479 --> 00:08:26,000
the protocol level that might also be

203
00:08:23,610 --> 00:08:28,500
interesting for other application areas

204
00:08:26,000 --> 00:08:30,720
the first optimization is a simple yet

205
00:08:28,500 --> 00:08:32,820
effective compression technique for kuku

206
00:08:30,720 --> 00:08:35,070
filters to represent a server database

207
00:08:32,820 --> 00:08:36,990
even more efficiently if you don't know

208
00:08:35,070 --> 00:08:38,849
kuku filters they are basically a very

209
00:08:36,990 --> 00:08:41,610
nice drop-in replacement for the well

210
00:08:38,849 --> 00:08:44,159
known bloom filters since they are more

211
00:08:41,610 --> 00:08:46,740
efficient and you can for example easily

212
00:08:44,159 --> 00:08:49,110
remove elements from the filter the main

213
00:08:46,740 --> 00:08:50,490
main difference to bloom filters from a

214
00:08:49,110 --> 00:08:53,279
data structure point of view is that

215
00:08:50,490 --> 00:08:55,500
each bucket may store multiple entries

216
00:08:53,279 --> 00:08:57,810
and instead of single bits we store

217
00:08:55,500 --> 00:08:59,630
small hash values so called fingerprints

218
00:08:57,810 --> 00:09:01,939
or tax

219
00:08:59,630 --> 00:09:03,950
and for some reason all previous works

220
00:09:01,940 --> 00:09:05,900
always transferred all bits for all

221
00:09:03,950 --> 00:09:08,960
buckets whether they are actually filled

222
00:09:05,900 --> 00:09:10,610
or not instead we suggest in the

223
00:09:08,960 --> 00:09:12,920
simplest version to split the cocoa

224
00:09:10,610 --> 00:09:15,020
filter into a bitmap indicating which

225
00:09:12,920 --> 00:09:16,910
bucket positions are filled and the tag

226
00:09:15,020 --> 00:09:19,220
list containing the actual content and

227
00:09:16,910 --> 00:09:21,050
this gives you a compression ratio that

228
00:09:19,220 --> 00:09:23,240
roughly equals the load factor of the

229
00:09:21,050 --> 00:09:24,890
cuckoo fader and since in practice you

230
00:09:23,240 --> 00:09:27,200
would never distribute a fully loaded

231
00:09:24,890 --> 00:09:29,689
filter because you would expect a lot of

232
00:09:27,200 --> 00:09:31,910
new users to register later on this

233
00:09:29,690 --> 00:09:33,980
gives quite some nice improvements in

234
00:09:31,910 --> 00:09:35,990
the paper we also described how to set

235
00:09:33,980 --> 00:09:37,430
the cocoa filter parameters in terms of

236
00:09:35,990 --> 00:09:39,830
bucket size and fingerprint lengths

237
00:09:37,430 --> 00:09:42,140
properly so the failure probability of

238
00:09:39,830 --> 00:09:44,300
the whole protocol becomes negligible

239
00:09:42,140 --> 00:09:46,520
and we also described how to send

240
00:09:44,300 --> 00:09:48,439
updates for cocoa filters with 4.3 times

241
00:09:46,520 --> 00:09:51,470
less communication than in previous work

242
00:09:48,440 --> 00:09:54,110
a quickly read literature recommendation

243
00:09:51,470 --> 00:09:55,910
here after we had these results we saw

244
00:09:54,110 --> 00:09:58,730
that last year some other guys proposed

245
00:09:55,910 --> 00:10:01,610
a new thing which they called Martin

246
00:09:58,730 --> 00:10:03,020
filters and they basically combine such

247
00:10:01,610 --> 00:10:05,690
compression techniques with further

248
00:10:03,020 --> 00:10:07,280
optimizations and are probably the thing

249
00:10:05,690 --> 00:10:11,690
you would use when designing new

250
00:10:07,280 --> 00:10:13,970
protocols in the protocol where the OPF

251
00:10:11,690 --> 00:10:16,760
is implemented with garbled circuits we

252
00:10:13,970 --> 00:10:18,800
also replaced the actual PRF AAS with

253
00:10:16,760 --> 00:10:20,330
something more efficient and the

254
00:10:18,800 --> 00:10:24,290
background here is that with the free

255
00:10:20,330 --> 00:10:27,250
xor optimization for our GC protocol the

256
00:10:24,290 --> 00:10:30,380
cost metrics in circuit design shifted

257
00:10:27,250 --> 00:10:32,510
we now want to have as few and gates as

258
00:10:30,380 --> 00:10:35,030
possible why we don't care so much about

259
00:10:32,510 --> 00:10:38,060
the number of XOR gates and this is

260
00:10:35,030 --> 00:10:40,699
where low MC comes into play low MC is a

261
00:10:38,060 --> 00:10:42,680
highly power parameterize able block

262
00:10:40,700 --> 00:10:45,620
cipher that was specifically designed

263
00:10:42,680 --> 00:10:47,660
for use cases in MPC and fhe

264
00:10:45,620 --> 00:10:49,190
applications and give us suppose the

265
00:10:47,660 --> 00:10:51,410
possibility to tweak all these

266
00:10:49,190 --> 00:10:53,540
parameters according to these new

267
00:10:51,410 --> 00:10:56,630
metrics which has the different

268
00:10:53,540 --> 00:10:59,209
parameter sets suitable for the contact

269
00:10:56,630 --> 00:11:01,220
discovery use case all with 128-bit

270
00:10:59,210 --> 00:11:03,170
security and shows a common

271
00:11:01,220 --> 00:11:05,090
configuration where we require eight

272
00:11:03,170 --> 00:11:09,170
point two times less communication than

273
00:11:05,090 --> 00:11:11,390
AES as a next step we implemented all

274
00:11:09,170 --> 00:11:12,930
protocols and since we wanted to

275
00:11:11,390 --> 00:11:14,610
optimize psi not only

276
00:11:12,930 --> 00:11:16,829
the protocol but also on the

277
00:11:14,610 --> 00:11:20,970
implementation level we wrote them in

278
00:11:16,830 --> 00:11:23,700
native C C++ the code is open source now

279
00:11:20,970 --> 00:11:27,570
so you can feel free to play around with

280
00:11:23,700 --> 00:11:29,790
it for our native implementations we

281
00:11:27,570 --> 00:11:33,149
made use of newer Miege instruction sets

282
00:11:29,790 --> 00:11:35,670
and two aspects for malicious security

283
00:11:33,149 --> 00:11:37,110
extension protocols we rely on lip OTE

284
00:11:35,670 --> 00:11:38,969
by Peter Randall

285
00:11:37,110 --> 00:11:42,240
however this library is heavily

286
00:11:38,970 --> 00:11:43,800
optimized for the x86 architecture so we

287
00:11:42,240 --> 00:11:45,810
replaced our specific hardware

288
00:11:43,800 --> 00:11:47,939
instructions with the arm equivalents

289
00:11:45,810 --> 00:11:49,709
while still maintaining compatibility to

290
00:11:47,940 --> 00:11:54,029
the counterpart running on the server

291
00:11:49,709 --> 00:11:56,849
side and second when implementing as GC

292
00:11:54,029 --> 00:11:58,500
protocol we know that the fixed key I as

293
00:11:56,850 --> 00:12:01,170
garden scheme usually gives a great

294
00:11:58,500 --> 00:12:03,480
performance boost due to the native a/s

295
00:12:01,170 --> 00:12:07,439
instructions available in all half a

296
00:12:03,480 --> 00:12:09,770
recent Intel CPUs however since the Army

297
00:12:07,440 --> 00:12:12,630
aid architecture now contains so-called

298
00:12:09,770 --> 00:12:14,699
cryptography extensions we can utilize

299
00:12:12,630 --> 00:12:17,040
such instructions also mobile devices

300
00:12:14,700 --> 00:12:19,680
which gives in this case a speed of of

301
00:12:17,040 --> 00:12:22,290
around 35 times compared to standard

302
00:12:19,680 --> 00:12:24,900
software implementations we can also

303
00:12:22,290 --> 00:12:27,900
utilize the neon instruction set for

304
00:12:24,900 --> 00:12:29,910
efficient operations on 128-bit

305
00:12:27,900 --> 00:12:32,520
registers which makes it very convenient

306
00:12:29,910 --> 00:12:35,640
to work with 128-bit wire labels in

307
00:12:32,520 --> 00:12:37,770
y'all's GC protocol overall we can

308
00:12:35,640 --> 00:12:40,020
report 1,000 times faster garbage

309
00:12:37,770 --> 00:12:43,250
circuit evaluation compared to the Java

310
00:12:40,020 --> 00:12:46,319
implementation used in previous work

311
00:12:43,250 --> 00:12:47,880
okay and to demonstrate the practicality

312
00:12:46,320 --> 00:12:50,390
of our protocols we performed some

313
00:12:47,880 --> 00:12:53,490
large-scale experiments and the setup

314
00:12:50,390 --> 00:12:55,709
looks as follows the client is a Google

315
00:12:53,490 --> 00:12:58,920
picture - smartphone and a commodity

316
00:12:55,709 --> 00:13:01,170
laptop acts as the psi server for the

317
00:12:58,920 --> 00:13:05,279
network we use a real Wi-Fi connection

318
00:13:01,170 --> 00:13:07,949
with the shown specs and we also used a

319
00:13:05,279 --> 00:13:09,240
real LTE connection in Germany you would

320
00:13:07,950 --> 00:13:11,459
probably have to declare bankruptcy

321
00:13:09,240 --> 00:13:13,829
after the amount of experiments we

322
00:13:11,459 --> 00:13:16,619
performed but in Austria you can do this

323
00:13:13,829 --> 00:13:17,870
without any problems

324
00:13:16,620 --> 00:13:20,150
[Music]

325
00:13:17,870 --> 00:13:22,640
I don't know when looking at the

326
00:13:20,150 --> 00:13:24,980
combined base and online face for

327
00:13:22,640 --> 00:13:27,050
checking 1,000 contacts in the clients

328
00:13:24,980 --> 00:13:29,420
address book we can see some great

329
00:13:27,050 --> 00:13:31,870
performance and improvements both in

330
00:13:29,420 --> 00:13:34,670
terms of runtimes and communication

331
00:13:31,870 --> 00:13:38,510
please notice that these axes here are

332
00:13:34,670 --> 00:13:40,370
in box scale and on this slide we

333
00:13:38,510 --> 00:13:42,890
compare our protocols to the respective

334
00:13:40,370 --> 00:13:45,380
protocols and implementations by kiss

335
00:13:42,890 --> 00:13:48,830
that are executed in our benchmarking

336
00:13:45,380 --> 00:13:50,660
environment and we choose their work for

337
00:13:48,830 --> 00:13:52,339
a direct comparison because it is

338
00:13:50,660 --> 00:13:54,170
actually the only one with an

339
00:13:52,339 --> 00:13:58,370
implementation of unbalanced PCI

340
00:13:54,170 --> 00:14:01,130
protocols on smartphones when looking at

341
00:13:58,370 --> 00:14:03,830
the setup phase for Server database with

342
00:14:01,130 --> 00:14:05,660
more than 250 million users we can see

343
00:14:03,830 --> 00:14:08,510
the positive effect of the cuckoo filter

344
00:14:05,660 --> 00:14:10,360
compression assuming a large factor of

345
00:14:08,510 --> 00:14:13,010
around 70 percent here

346
00:14:10,360 --> 00:14:15,080
however transferring about 1 gigabyte of

347
00:14:13,010 --> 00:14:17,600
data at some point in time even over a

348
00:14:15,080 --> 00:14:19,190
Wi-Fi connection can be seen as quite

349
00:14:17,600 --> 00:14:22,490
prohibitive for the real world

350
00:14:19,190 --> 00:14:24,200
deployment so in the paper we therefore

351
00:14:22,490 --> 00:14:27,020
suggest multiple extensions to further

352
00:14:24,200 --> 00:14:29,000
reduce communication the one I want to

353
00:14:27,020 --> 00:14:31,010
quickly present here is a combination

354
00:14:29,000 --> 00:14:32,990
with multi server private and from an

355
00:14:31,010 --> 00:14:35,720
information retrieval and works as

356
00:14:32,990 --> 00:14:37,190
follows first the main server transfers

357
00:14:35,720 --> 00:14:39,410
the cuckoo filter to the second non

358
00:14:37,190 --> 00:14:41,330
colluding store and here I want to

359
00:14:39,410 --> 00:14:43,069
stress that the trust assumptions are

360
00:14:41,330 --> 00:14:45,470
not as strong as in other protocols

361
00:14:43,070 --> 00:14:48,290
because the cuckoo filter contains only

362
00:14:45,470 --> 00:14:50,510
encrypted elements and in the case

363
00:14:48,290 --> 00:14:52,219
collusion happens the security level is

364
00:14:50,510 --> 00:14:54,920
still better than in the best currently

365
00:14:52,220 --> 00:14:57,380
deployed methods and in the second step

366
00:14:54,920 --> 00:15:00,469
the client and runs o PRF evaluations

367
00:14:57,380 --> 00:15:03,680
with the main server and then uses a

368
00:15:00,470 --> 00:15:05,270
multi server Pia lock up to check the

369
00:15:03,680 --> 00:15:08,689
existence of the contact in the server

370
00:15:05,270 --> 00:15:11,510
database and most importantly this way

371
00:15:08,690 --> 00:15:13,459
the total client-server communication is

372
00:15:11,510 --> 00:15:15,319
reduced to be logarithmic in the size of

373
00:15:13,459 --> 00:15:17,630
the server database and becomes

374
00:15:15,320 --> 00:15:21,820
practical even for services with more

375
00:15:17,630 --> 00:15:24,620
than a billion users so let's compute

376
00:15:21,820 --> 00:15:26,870
today we've seen the currently most

377
00:15:24,620 --> 00:15:30,260
practical protocols and implementations

378
00:15:26,870 --> 00:15:32,480
for mobile private contact discovery

379
00:15:30,260 --> 00:15:35,720
the presented protocols are not only

380
00:15:32,480 --> 00:15:37,970
suitable for contact discovery but a

381
00:15:35,720 --> 00:15:40,430
general-purpose unbalanced PCI protocols

382
00:15:37,970 --> 00:15:42,380
so therefore they could as well be used

383
00:15:40,430 --> 00:15:44,540
from over an average detection and the

384
00:15:42,380 --> 00:15:47,240
discovery of passwords just to give some

385
00:15:44,540 --> 00:15:50,060
examples we also think that our native

386
00:15:47,240 --> 00:15:52,040
implementations of the LCC protocol on

387
00:15:50,060 --> 00:15:53,540
the Army attack attacker can be useful

388
00:15:52,040 --> 00:15:55,520
for quite a lot of future secure

389
00:15:53,540 --> 00:15:58,910
computation applications on mobile

390
00:15:55,520 --> 00:16:01,730
devices there is one thing however that

391
00:15:58,910 --> 00:16:03,530
I don't want to hide we contacted one of

392
00:16:01,730 --> 00:16:05,750
the services on the survey list and

393
00:16:03,530 --> 00:16:08,199
asked how they see the chances for a

394
00:16:05,750 --> 00:16:10,400
real-world deployment of our protocols

395
00:16:08,200 --> 00:16:12,530
unfortunately they gave us a quite

396
00:16:10,400 --> 00:16:14,630
demanding requirement list where the

397
00:16:12,530 --> 00:16:16,970
maximum amount of communication they

398
00:16:14,630 --> 00:16:19,550
want to spend is probably the biggest

399
00:16:16,970 --> 00:16:21,530
issue right now so and since we cannot

400
00:16:19,550 --> 00:16:25,120
meet these requirements yet I can only

401
00:16:21,530 --> 00:16:27,680
encourage everyone in this room to look

402
00:16:25,120 --> 00:16:31,280
into this interesting and important

403
00:16:27,680 --> 00:16:32,719
research area but this I'd like to enter

404
00:16:31,280 --> 00:16:35,199
and I'm happy to take questions

405
00:16:32,720 --> 00:16:35,200
thank you

406
00:16:37,680 --> 00:16:45,279
any questions on this okay I have a

407
00:16:44,020 --> 00:16:47,770
question so you mentioned that you have

408
00:16:45,279 --> 00:16:50,290
two prfs and I you may have had the

409
00:16:47,770 --> 00:16:51,550
result in there I just missed it what

410
00:16:50,290 --> 00:16:53,110
was the comparison between the nor

411
00:16:51,550 --> 00:16:56,380
Rheingold and the garbled circuit

412
00:16:53,110 --> 00:16:59,550
approach so in our experiments it turned

413
00:16:56,380 --> 00:17:04,059
out that they roughly have like equal

414
00:16:59,550 --> 00:17:06,159
equal performance and ISO of course has

415
00:17:04,059 --> 00:17:07,569
some overhead in the base phase because

416
00:17:06,160 --> 00:17:11,170
we need to transfer these garbled

417
00:17:07,569 --> 00:17:15,579
circuits so you might ask which one is

418
00:17:11,170 --> 00:17:19,000
the one to choose I would say it's not

419
00:17:15,579 --> 00:17:21,309
clear it depends on the use case the the

420
00:17:19,000 --> 00:17:24,369
benefit of this is version is of course

421
00:17:21,309 --> 00:17:26,260
that it's not only limited to like a

422
00:17:24,369 --> 00:17:28,600
specific private set intersection but

423
00:17:26,260 --> 00:17:31,809
you can also do this generic psi

424
00:17:28,600 --> 00:17:33,669
computation where you could compute in

425
00:17:31,809 --> 00:17:36,879
our arbitrary symmetric function on top

426
00:17:33,670 --> 00:17:40,270
of the intersection result so in that

427
00:17:36,880 --> 00:17:44,410
case I would suggest to use the the is

428
00:17:40,270 --> 00:17:47,170
or lo MC version and otherwise they

429
00:17:44,410 --> 00:17:48,580
turned out to be roughly equal I'm sorry

430
00:17:47,170 --> 00:17:49,870
to ask two questions here but very

431
00:17:48,580 --> 00:17:52,330
quickly because I know we have a limited

432
00:17:49,870 --> 00:17:56,949
time are we gonna get to those

433
00:17:52,330 --> 00:18:03,510
requirements in the next five years two

434
00:17:56,950 --> 00:18:08,950
years and putting it down possible I

435
00:18:03,510 --> 00:18:12,220
think if you don't if you don't weaken

436
00:18:08,950 --> 00:18:14,200
some assumptions like this they also

437
00:18:12,220 --> 00:18:17,740
said they don't want to have any non

438
00:18:14,200 --> 00:18:20,800
colluding servers if you if you don't

439
00:18:17,740 --> 00:18:23,590
weaken these assumptions I don't see it

440
00:18:20,800 --> 00:18:25,570
coming that fast I mean there are other

441
00:18:23,590 --> 00:18:28,780
approaches that are being explored like

442
00:18:25,570 --> 00:18:31,510
using interest rates which is like a

443
00:18:28,780 --> 00:18:36,280
technology preview of signal but has of

444
00:18:31,510 --> 00:18:38,620
course other shortcomings so having the

445
00:18:36,280 --> 00:18:42,309
same extremely strict requirements set

446
00:18:38,620 --> 00:18:45,129
and having all these strong assumptions

447
00:18:42,309 --> 00:18:47,160
I don't see it coming that fast

448
00:18:45,130 --> 00:18:48,690
well still it's it's big progress

449
00:18:47,160 --> 00:18:50,280
yeah all right one more round of

450
00:18:48,690 --> 00:18:54,859
applause thank you

451
00:18:50,280 --> 00:18:54,859
[Applause]

