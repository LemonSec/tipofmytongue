1
00:00:10,800 --> 00:00:19,349
hello everyone my name is Tanya gone and

2
00:00:15,129 --> 00:00:21,640
I'm currently working at electronics and

3
00:00:19,349 --> 00:00:24,730
telecommunications distance to the in

4
00:00:21,640 --> 00:00:27,010
South Korea this paper was submitted

5
00:00:24,730 --> 00:00:30,609
when I was PhD candidate in Seoul

6
00:00:27,010 --> 00:00:32,680
National University as described in the

7
00:00:30,609 --> 00:00:35,290
tighter today I will talk about the

8
00:00:32,680 --> 00:00:40,480
technique to implement his katana memory

9
00:00:35,290 --> 00:00:43,239
on cortex-m processors first what is

10
00:00:40,480 --> 00:00:45,730
disgusting it's katana memory the scott

11
00:00:43,239 --> 00:00:48,459
only memory is the memory that can be

12
00:00:45,730 --> 00:00:52,870
scooted but they cannot be read and

13
00:00:48,460 --> 00:00:55,449
modified so this John head provides on

14
00:00:52,870 --> 00:00:58,300
access control property so John has been

15
00:00:55,449 --> 00:01:01,360
used to protect the sensitive code such

16
00:00:58,300 --> 00:01:04,000
as intellectual properties most recently

17
00:01:01,360 --> 00:01:06,550
John has also been used as a key

18
00:01:04,000 --> 00:01:08,890
primitive two for protection against the

19
00:01:06,550 --> 00:01:11,429
dynamic code the disclosure base the

20
00:01:08,890 --> 00:01:15,190
shell code which attack

21
00:01:11,430 --> 00:01:18,420
so in these walks per day by by putting

22
00:01:15,190 --> 00:01:22,420
the colon dodgem taken efficiently

23
00:01:18,420 --> 00:01:27,160
prevent attacker from obtaining the

24
00:01:22,420 --> 00:01:30,009
gadget so today in many key

25
00:01:27,160 --> 00:01:32,050
architectures already provided John by

26
00:01:30,009 --> 00:01:36,009
using their memory management unit

27
00:01:32,050 --> 00:01:38,649
called mmm new however

28
00:01:36,009 --> 00:01:40,929
mv7 an architecture which used in

29
00:01:38,649 --> 00:01:42,729
cortex-m processors does not provide the

30
00:01:40,929 --> 00:01:45,399
zone to be specific

31
00:01:42,729 --> 00:01:48,479
instead of MMU this architecture support

32
00:01:45,399 --> 00:01:51,340
family protection unit called MPU

33
00:01:48,479 --> 00:01:54,759
although amp you also provide access

34
00:01:51,340 --> 00:01:56,289
control of the American legions but it

35
00:01:54,759 --> 00:02:00,039
doesn't have support John as a

36
00:01:56,289 --> 00:02:02,530
configurable memory permission so what

37
00:02:00,039 --> 00:02:05,440
motivated by this situation in this

38
00:02:02,530 --> 00:02:06,879
paper we propose a micro zone or new

39
00:02:05,440 --> 00:02:09,609
software techniques to implement

40
00:02:06,879 --> 00:02:13,330
software excute only memory on these

41
00:02:09,610 --> 00:02:16,390
cortex-m processors before I talk about

42
00:02:13,330 --> 00:02:18,970
design of a micro zone I properly

43
00:02:16,390 --> 00:02:20,440
sprained the same model and our body

44
00:02:18,970 --> 00:02:23,950
assumed when I

45
00:02:20,440 --> 00:02:25,750
when I designed our micro zone for the

46
00:02:23,950 --> 00:02:29,260
ceremony we considered the software or

47
00:02:25,750 --> 00:02:31,210
text and non time so but we did not

48
00:02:29,260 --> 00:02:34,239
consider the any of Rhino text and

49
00:02:31,210 --> 00:02:36,040
harder attacks however is still we

50
00:02:34,240 --> 00:02:39,940
believe that our attackers are still

51
00:02:36,040 --> 00:02:43,269
powerful to say is the security of the

52
00:02:39,940 --> 00:02:44,710
target system because by exploiting the

53
00:02:43,270 --> 00:02:46,990
software Balan artists

54
00:02:44,710 --> 00:02:50,230
the attacker can have arbitrary memory

55
00:02:46,990 --> 00:02:52,690
read and write capabilities moreover by

56
00:02:50,230 --> 00:02:56,769
using this capabilities the attacker can

57
00:02:52,690 --> 00:02:58,780
subvert contraflow and we do not trust

58
00:02:56,770 --> 00:03:01,660
any software components including the

59
00:02:58,780 --> 00:03:04,720
section handlers because many embedded

60
00:03:01,660 --> 00:03:07,450
systems have a event drive in nature so

61
00:03:04,720 --> 00:03:09,730
the OS code including the exception

62
00:03:07,450 --> 00:03:12,369
handlers take or logic portion of the

63
00:03:09,730 --> 00:03:16,230
code base so for the better security

64
00:03:12,370 --> 00:03:19,870
guarantee we do not trusted this code

65
00:03:16,230 --> 00:03:22,000
and finally we assume that the software

66
00:03:19,870 --> 00:03:26,580
components also of their components in

67
00:03:22,000 --> 00:03:29,290
the system is sqt in privileged mode

68
00:03:26,580 --> 00:03:32,709
this is no surprise for the embedded

69
00:03:29,290 --> 00:03:35,290
systems because these systems typically

70
00:03:32,709 --> 00:03:37,180
have a real time constraint and the

71
00:03:35,290 --> 00:03:42,880
privilege mode switching is often

72
00:03:37,180 --> 00:03:45,480
considered our expensive operation now

73
00:03:42,880 --> 00:03:49,840
let me explain the basic approach of

74
00:03:45,480 --> 00:03:52,269
micro zone at first as mentioned we

75
00:03:49,840 --> 00:03:54,130
probably utilize the fact that the most

76
00:03:52,270 --> 00:03:58,450
of embedded systems are running in

77
00:03:54,130 --> 00:04:00,519
privileged mode then we use the MPO to

78
00:03:58,450 --> 00:04:03,609
configure the access permissions of the

79
00:04:00,520 --> 00:04:06,220
code memory as lead over and is cut over

80
00:04:03,610 --> 00:04:09,910
for privileged mode and known as a

81
00:04:06,220 --> 00:04:11,800
server for on privileged mode finally we

82
00:04:09,910 --> 00:04:15,040
convert our memory row the instructions

83
00:04:11,800 --> 00:04:19,410
to the unprivileged ones which is

84
00:04:15,040 --> 00:04:19,409
probably number seven in architecture

85
00:04:20,399 --> 00:04:23,679
sure

86
00:04:21,720 --> 00:04:26,260
compared to the ordinary memory

87
00:04:23,680 --> 00:04:28,840
instructions the unprivileged memory

88
00:04:26,260 --> 00:04:32,140
instruction has a special property which

89
00:04:28,840 --> 00:04:33,700
is it access the memory with our own

90
00:04:32,140 --> 00:04:36,820
previous model regard

91
00:04:33,700 --> 00:04:38,770
of the actual processor world so as a

92
00:04:36,820 --> 00:04:41,200
consequence the coder memory still is

93
00:04:38,770 --> 00:04:42,969
suitable because the reader brain is

94
00:04:41,200 --> 00:04:46,930
suitable permission for privileged mode

95
00:04:42,970 --> 00:04:48,610
however the load load instruction the

96
00:04:46,930 --> 00:04:51,460
unprovided or the instruction cannot

97
00:04:48,610 --> 00:04:56,200
load lead the code because the necessary

98
00:04:51,460 --> 00:04:58,930
permissions for on privileged mode in

99
00:04:56,200 --> 00:05:00,700
addition we also convert ORS

100
00:04:58,930 --> 00:05:03,760
they will stow instruction to the on

101
00:05:00,700 --> 00:05:07,240
privileged ones this is because in pre

102
00:05:03,760 --> 00:05:09,370
seven an architecture managed system

103
00:05:07,240 --> 00:05:11,500
configures including the amp you are

104
00:05:09,370 --> 00:05:14,500
configured controlled by the memory map

105
00:05:11,500 --> 00:05:18,250
to register in private peripheral region

106
00:05:14,500 --> 00:05:20,290
called the ppb so microchip micro zone

107
00:05:18,250 --> 00:05:22,930
could be invalidated if an attacker

108
00:05:20,290 --> 00:05:25,960
tempers these registers with the

109
00:05:22,930 --> 00:05:28,300
software vulnerabilities fortunately in

110
00:05:25,960 --> 00:05:31,299
amber 7m architecture PPP can be

111
00:05:28,300 --> 00:05:33,340
accessed only in privileged mode so just

112
00:05:31,300 --> 00:05:35,710
changing the memory store instructions

113
00:05:33,340 --> 00:05:41,280
to the unprivileged one then we can

114
00:05:35,710 --> 00:05:44,080
profile private such a threat however as

115
00:05:41,280 --> 00:05:46,419
expected this simple design is not up

116
00:05:44,080 --> 00:05:48,400
recover to the real work so let me

117
00:05:46,420 --> 00:05:52,390
explain the challenges of micro zoom and

118
00:05:48,400 --> 00:05:54,729
how we address those challenges first

119
00:05:52,390 --> 00:05:57,159
problem is that not all memory

120
00:05:54,730 --> 00:06:00,910
instructions are compatible to on

121
00:05:57,160 --> 00:06:03,460
privileged ones for its crucible memory

122
00:06:00,910 --> 00:06:06,160
instructions its exclusiveness cannot be

123
00:06:03,460 --> 00:06:09,789
emulated by own privileged instructions

124
00:06:06,160 --> 00:06:13,240
and the system will be broken if the if

125
00:06:09,790 --> 00:06:17,710
the memory load instruction originally

126
00:06:13,240 --> 00:06:21,730
intended to exist the PPP be converted

127
00:06:17,710 --> 00:06:24,729
to am privileged instructions thus this

128
00:06:21,730 --> 00:06:28,710
instruction must must not be converted

129
00:06:24,730 --> 00:06:32,320
to on privileged memory instructions

130
00:06:28,710 --> 00:06:35,620
Chinese - and 73 are the problems went

131
00:06:32,320 --> 00:06:37,510
down on attacker used the on converted

132
00:06:35,620 --> 00:06:40,240
memory instructions caused by challenge

133
00:06:37,510 --> 00:06:43,690
one by protein indirect branches and

134
00:06:40,240 --> 00:06:46,570
exception written one interesting point

135
00:06:43,690 --> 00:06:47,530
of Chinese 3 is that in cortex-m

136
00:06:46,570 --> 00:06:49,719
processors

137
00:06:47,530 --> 00:06:52,390
on exceptional internal course went on

138
00:06:49,720 --> 00:06:56,020
único value is assigned to the PC

139
00:06:52,390 --> 00:06:58,659
register and in social state including

140
00:06:56,020 --> 00:07:01,570
the actual retard exception address is

141
00:06:58,660 --> 00:07:03,420
stored in the stack is automatically

142
00:07:01,570 --> 00:07:06,460
stored by the hardware

143
00:07:03,420 --> 00:07:09,700
thus it implies the following attacks so

144
00:07:06,460 --> 00:07:11,830
if an attacker manipulate each session

145
00:07:09,700 --> 00:07:14,530
return address stored in the stack

146
00:07:11,830 --> 00:07:17,890
the attacker can directly could on

147
00:07:14,530 --> 00:07:24,340
converting the instruction by using the

148
00:07:17,890 --> 00:07:26,890
exception return channel for denotes the

149
00:07:24,340 --> 00:07:28,599
case when an attacker exploit the

150
00:07:26,890 --> 00:07:31,659
unconverted memory instructions or

151
00:07:28,600 --> 00:07:34,360
widowed or various payload wired

152
00:07:31,660 --> 00:07:40,480
following the legend in a legitimate

153
00:07:34,360 --> 00:07:43,000
contraflow challenge' v is unlike other

154
00:07:40,480 --> 00:07:47,169
challenges is a challenge that related

155
00:07:43,000 --> 00:07:50,919
to the unint to the unintended

156
00:07:47,169 --> 00:07:52,479
instructions which caused by online

157
00:07:50,919 --> 00:07:56,109
discussion of the sorry to bits in

158
00:07:52,479 --> 00:08:03,130
instruction or scooting embedded data in

159
00:07:56,110 --> 00:08:05,680
the code memory so now our explain how a

160
00:08:03,130 --> 00:08:08,860
microtome address the those of

161
00:08:05,680 --> 00:08:11,890
challenges the first test we did is to

162
00:08:08,860 --> 00:08:12,720
find out or uncomfortable memory

163
00:08:11,890 --> 00:08:15,219
instructions

164
00:08:12,720 --> 00:08:17,560
fortunately Crucible memory instructions

165
00:08:15,220 --> 00:08:20,950
were easily distinguished by the opcode

166
00:08:17,560 --> 00:08:23,500
in the instruction however in case of a

167
00:08:20,950 --> 00:08:25,419
PPP accesses instructions more

168
00:08:23,500 --> 00:08:29,590
sophisticated aesthetic energies are

169
00:08:25,419 --> 00:08:32,588
required we conduct the so we conducted

170
00:08:29,590 --> 00:08:36,640
a paralyzing technique to track how the

171
00:08:32,589 --> 00:08:40,409
access to memory may access the memory

172
00:08:36,640 --> 00:08:43,390
or memory address is calculated in

173
00:08:40,409 --> 00:08:46,420
calculated then if the address points

174
00:08:43,390 --> 00:08:49,470
DPP religion we identify it as on access

175
00:08:46,420 --> 00:08:49,469
to the PPP region

176
00:08:51,750 --> 00:08:56,710
after the identification of the

177
00:08:53,980 --> 00:08:59,170
unconverted memory instruction we apply

178
00:08:56,710 --> 00:09:01,390
our atomic ratification technique to

179
00:08:59,170 --> 00:09:03,959
these instructions the automatic

180
00:09:01,390 --> 00:09:08,050
verification technique is constantly

181
00:09:03,960 --> 00:09:10,960
synchros include sub error code

182
00:09:08,050 --> 00:09:12,579
instrumentations I will explain this one

183
00:09:10,960 --> 00:09:15,700
by one with a simple example

184
00:09:12,580 --> 00:09:17,860
first we locate the verification routine

185
00:09:15,700 --> 00:09:21,190
before the unconverted memory

186
00:09:17,860 --> 00:09:27,270
instruction by doing this we can prevent

187
00:09:21,190 --> 00:09:29,410
exploit intended in stay on converted

188
00:09:27,270 --> 00:09:31,470
memory instruction video malicious

189
00:09:29,410 --> 00:09:36,430
payload as mentioned in challenging for

190
00:09:31,470 --> 00:09:38,680
so of course the verification routine is

191
00:09:36,430 --> 00:09:41,349
different according to the type of on

192
00:09:38,680 --> 00:09:43,209
converted memory instruction for more

193
00:09:41,350 --> 00:09:46,630
information about this routine please

194
00:09:43,210 --> 00:09:48,850
refer to our paper then we deserve

195
00:09:46,630 --> 00:09:51,220
disable the exceptions wire these

196
00:09:48,850 --> 00:09:53,920
cutting these instructions because the

197
00:09:51,220 --> 00:09:56,940
attacker can bypass the verification

198
00:09:53,920 --> 00:10:01,890
routine routine by raising on inception

199
00:09:56,940 --> 00:10:01,890
lightly for the unconverted instructions

200
00:10:03,420 --> 00:10:10,360
however we add the verification lutein

201
00:10:06,340 --> 00:10:12,610
still attacker can bypass as can still

202
00:10:10,360 --> 00:10:15,430
exploit on commodity memory structures

203
00:10:12,610 --> 00:10:18,820
as mentioned in challenge 2 & 3

204
00:10:15,430 --> 00:10:20,680
to prevent this in microphone we

205
00:10:18,820 --> 00:10:22,660
guarantee that on converting the memory

206
00:10:20,680 --> 00:10:29,920
instruction cannot point to sensitive

207
00:10:22,660 --> 00:10:33,850
address so if our address if the author

208
00:10:29,920 --> 00:10:36,010
instructions cause is not constantly to

209
00:10:33,850 --> 00:10:36,790
enforce this the basics thirties are as

210
00:10:36,010 --> 00:10:40,569
follows

211
00:10:36,790 --> 00:10:43,540
first we locate the dedicated registers

212
00:10:40,570 --> 00:10:46,720
memory address register for unconverted

213
00:10:43,540 --> 00:10:49,360
memory instructions then we inverse that

214
00:10:46,720 --> 00:10:52,330
wire the automating instruction consists

215
00:10:49,360 --> 00:10:55,690
is cuted to dedicate register holds all

216
00:10:52,330 --> 00:10:59,710
sensitive address such as memory map to

217
00:10:55,690 --> 00:11:02,140
registers in ppb and then after the

218
00:10:59,710 --> 00:11:03,580
execution is over the reset dedicated

219
00:11:02,140 --> 00:11:10,090
register to hoard

220
00:11:03,580 --> 00:11:12,880
don't hamper value however yes the

221
00:11:10,090 --> 00:11:15,810
general-purpose registers can have a

222
00:11:12,880 --> 00:11:18,820
value any value at whirring the runtime

223
00:11:15,810 --> 00:11:21,969
enforcing the imbalance property - for

224
00:11:18,820 --> 00:11:24,700
general purpose register requires a

225
00:11:21,970 --> 00:11:29,460
tremendous instrumentation overhead so

226
00:11:24,700 --> 00:11:32,770
to avoid a such a problem we can we

227
00:11:29,460 --> 00:11:35,460
reserve the dedicated register only for

228
00:11:32,770 --> 00:11:38,980
the atomic instruction sequences

229
00:11:35,460 --> 00:11:41,470
however this implementation also have a

230
00:11:38,980 --> 00:11:43,630
problem performance problem because it

231
00:11:41,470 --> 00:11:47,470
can additional registers Pierce and

232
00:11:43,630 --> 00:11:49,510
eventually cause a performance drop in

233
00:11:47,470 --> 00:11:55,600
the program problem with our high

234
00:11:49,510 --> 00:11:58,030
register pressure those in micro zone we

235
00:11:55,600 --> 00:12:00,340
employ employed the other strategies

236
00:11:58,030 --> 00:12:03,550
that use a stack pointer as a memory

237
00:12:00,340 --> 00:12:06,280
address of the these unconverted memory

238
00:12:03,550 --> 00:12:08,170
instructions obviously still we needed

239
00:12:06,280 --> 00:12:11,260
to call the instrumentation to in first

240
00:12:08,170 --> 00:12:16,000
imperative property - on stack pointer

241
00:12:11,260 --> 00:12:18,250
register however after the stroke static

242
00:12:16,000 --> 00:12:21,790
static analysis we find out that

243
00:12:18,250 --> 00:12:25,840
enforcing the in Burnet - on stack

244
00:12:21,790 --> 00:12:35,410
pointer register can be implemented in

245
00:12:25,840 --> 00:12:37,440
efficient way that is according to our

246
00:12:35,410 --> 00:12:41,290
illnesses the stack pointer register

247
00:12:37,440 --> 00:12:44,770
mostly updated by adding or subsetting

248
00:12:41,290 --> 00:12:48,880
or constant because of the prologue and

249
00:12:44,770 --> 00:12:50,829
epilogue of functions so the attacker

250
00:12:48,880 --> 00:12:53,650
who can manipulate the counter flow can

251
00:12:50,830 --> 00:12:55,360
use these instructions to make the stack

252
00:12:53,650 --> 00:12:58,680
pointer register for the sensitive

253
00:12:55,360 --> 00:13:01,390
memory address however in many cases

254
00:12:58,680 --> 00:13:03,640
there is a stack pointer base the memory

255
00:13:01,390 --> 00:13:07,300
instructions before the inductor branch

256
00:13:03,640 --> 00:13:11,140
so during the code leaves attack it

257
00:13:07,300 --> 00:13:13,599
eventually generator access port because

258
00:13:11,140 --> 00:13:16,460
it would access the unused memory

259
00:13:13,600 --> 00:13:20,750
address region between the code and data

260
00:13:16,460 --> 00:13:22,910
or call the NPPB region as a consequence

261
00:13:20,750 --> 00:13:26,180
we can deduce the larger amount of the

262
00:13:22,910 --> 00:13:28,520
instrumentation for enforcing imbalance

263
00:13:26,180 --> 00:13:31,939
in Bennett property on stack pointer

264
00:13:28,520 --> 00:13:34,220
register and in particular thanks to

265
00:13:31,940 --> 00:13:36,110
this inefficiently instrumentation

266
00:13:34,220 --> 00:13:39,080
technique we don't need to reserve this

267
00:13:36,110 --> 00:13:43,220
stack pointer register only for atomic

268
00:13:39,080 --> 00:13:45,740
instruction sequence here is the

269
00:13:43,220 --> 00:13:48,020
instrumentals instrumental code when

270
00:13:45,740 --> 00:13:50,480
atomic production technique is applied

271
00:13:48,020 --> 00:13:52,279
as you can see stack point to register

272
00:13:50,480 --> 00:13:59,510
only horde or sensitive address from

273
00:13:52,279 --> 00:14:01,370
line 5 July 9 next let me talk about how

274
00:13:59,510 --> 00:14:07,490
to solve the unintended instruction

275
00:14:01,370 --> 00:14:09,920
problem in brief the address in brief to

276
00:14:07,490 --> 00:14:13,820
address DC on into the instruction issue

277
00:14:09,920 --> 00:14:16,510
we refresh each exploit our instruction

278
00:14:13,820 --> 00:14:19,160
into the alternative instruction spawns

279
00:14:16,510 --> 00:14:21,880
deserve the same functionality as the

280
00:14:19,160 --> 00:14:24,589
original instruction and is not a

281
00:14:21,880 --> 00:14:32,330
exploitable for unintended instruction

282
00:14:24,589 --> 00:14:35,450
issue now I will explain our evaluation

283
00:14:32,330 --> 00:14:37,640
research write our code instrumentation

284
00:14:35,450 --> 00:14:40,700
of micro zoom is implemented by using

285
00:14:37,640 --> 00:14:43,069
era by M and the pioneering dynamic

286
00:14:40,700 --> 00:14:47,570
final analysis of micro zoom is

287
00:14:43,070 --> 00:14:49,760
implemented using Radio 2 or expand

288
00:14:47,570 --> 00:14:52,070
experiments are conducted on arduino to

289
00:14:49,760 --> 00:14:55,520
board which has a cortex m3 processor

290
00:14:52,070 --> 00:14:58,160
and we used orion oils as our embedded

291
00:14:55,520 --> 00:15:01,699
system OS and keeps benchmark to measure

292
00:14:58,160 --> 00:15:05,589
the performance of our overhead this

293
00:15:01,700 --> 00:15:09,110
slide the result of performance and

294
00:15:05,589 --> 00:15:13,880
province in terms of code size extreme

295
00:15:09,110 --> 00:15:16,790
time and energy as you can see the micro

296
00:15:13,880 --> 00:15:21,170
dome has a sporty result compared and

297
00:15:16,790 --> 00:15:25,279
the Shi Zhang though except I John is

298
00:15:21,170 --> 00:15:29,029
the software fault isolation based atom

299
00:15:25,279 --> 00:15:30,259
so in this version we had mass

300
00:15:29,029 --> 00:15:32,299
construction to the

301
00:15:30,259 --> 00:15:35,059
with all the instructions and like it

302
00:15:32,299 --> 00:15:37,819
with every interactive branches not to

303
00:15:35,059 --> 00:15:46,969
jump the beat the memory road the

304
00:15:37,819 --> 00:15:51,618
instruction dialect early I don't have

305
00:15:46,970 --> 00:15:56,569
enough time so this is the I want

306
00:15:51,619 --> 00:15:59,079
computer this talk microtome is a

307
00:15:56,569 --> 00:16:02,478
substantive technique to implement the

308
00:15:59,079 --> 00:16:04,339
Kootenay memory on use go to memory

309
00:16:02,479 --> 00:16:06,919
using amp you and on previous memory

310
00:16:04,339 --> 00:16:08,809
instructions and most of our micros ohm

311
00:16:06,919 --> 00:16:11,269
is designed under the Strong's Ramada

312
00:16:08,809 --> 00:16:14,478
and even all software components are

313
00:16:11,269 --> 00:16:16,519
untrusted also the Eurasian region to

314
00:16:14,479 --> 00:16:19,339
show that micro-sim is more efficient

315
00:16:16,519 --> 00:16:21,619
than incurred the more efficient and

316
00:16:19,339 --> 00:16:23,449
secure than safe highways to John and

317
00:16:21,619 --> 00:16:26,479
Mike resume is comparable with the

318
00:16:23,449 --> 00:16:29,628
existing shown based salute security

319
00:16:26,479 --> 00:16:33,199
solutions such as key protection and CLA

320
00:16:29,629 --> 00:16:35,780
depends okay thank you for listening

321
00:16:33,199 --> 00:16:41,849
please enter

322
00:16:35,780 --> 00:16:41,850
[Applause]

323
00:16:45,399 --> 00:16:50,929
John John Chrystal University of

324
00:16:48,589 --> 00:16:52,970
Rochester so one question I have about

325
00:16:50,929 --> 00:16:55,039
your work is that you're using execute

326
00:16:52,970 --> 00:16:57,769
only memory to hide the code layout in

327
00:16:55,039 --> 00:17:00,529
defense of code or use attacks however

328
00:16:57,769 --> 00:17:02,299
have you verified that you have enough

329
00:17:00,529 --> 00:17:03,789
address physical address space in your

330
00:17:02,299 --> 00:17:06,799
system so that randomization

331
00:17:03,789 --> 00:17:09,740
diversification is actually useful

332
00:17:06,799 --> 00:17:11,449
right so for example if you have too few

333
00:17:09,740 --> 00:17:13,970
bits of entropy say like sixteen bits of

334
00:17:11,449 --> 00:17:15,799
entropy then at least on systems of

335
00:17:13,970 --> 00:17:17,720
about ten to fifteen years ago that was

336
00:17:15,799 --> 00:17:19,279
insufficient to protect against code

337
00:17:17,720 --> 00:17:21,319
reuse attacks like return to Lib C

338
00:17:19,279 --> 00:17:22,760
attacks so have you actually looked at

339
00:17:21,319 --> 00:17:28,369
how much interview you're getting on

340
00:17:22,760 --> 00:17:30,590
your on your evaluation systems do you

341
00:17:28,369 --> 00:17:32,899
mean that what kind of diversification

342
00:17:30,590 --> 00:17:34,820
is used in our benchmark

343
00:17:32,899 --> 00:17:37,129
well how much diversification can you

344
00:17:34,820 --> 00:17:39,559
get right so on when you're on a 64-bit

345
00:17:37,129 --> 00:17:41,840
server system you have two to the 64

346
00:17:39,559 --> 00:17:43,290
bits of entropy right you have

347
00:17:41,840 --> 00:17:46,320
ridiculous amounts of it

348
00:17:43,290 --> 00:17:49,260
right but you're on embedded systems

349
00:17:46,320 --> 00:17:52,800
right so some of these systems only have

350
00:17:49,260 --> 00:17:57,900
like one megabyte of RAM and no virtual

351
00:17:52,800 --> 00:18:03,060
memory I think you can't we can increase

352
00:17:57,900 --> 00:18:07,290
the entropy with with a separate item

353
00:18:03,060 --> 00:18:08,870
diversification techniques together all

354
00:18:07,290 --> 00:18:11,870
right perhaps we should chat offline

355
00:18:08,870 --> 00:18:11,870
Thanks

356
00:18:16,920 --> 00:18:22,170
you mentioned referred to some of the

357
00:18:19,200 --> 00:18:26,850
already supported solutions on x86 in

358
00:18:22,170 --> 00:18:29,340
EPT or MPX was there any reference or

359
00:18:26,850 --> 00:18:35,389
knowledge that you could leverage for

360
00:18:29,340 --> 00:18:40,110
this design on solution sorry I I don't

361
00:18:35,390 --> 00:18:44,190
know in your presentation yeah if you

362
00:18:40,110 --> 00:18:47,669
refer to x86 architecture which supports

363
00:18:44,190 --> 00:18:53,700
executable only memory yes feature in

364
00:18:47,670 --> 00:18:56,730
EPT and MPX and my question is did you

365
00:18:53,700 --> 00:19:00,050
reuse or any knowledge from that

366
00:18:56,730 --> 00:19:04,230
architecture designed to support the

367
00:19:00,050 --> 00:19:08,010
architecture actually this architecture

368
00:19:04,230 --> 00:19:14,520
support shown as a memory permissions in

369
00:19:08,010 --> 00:19:18,000
MMU but in microsomes we implement shown

370
00:19:14,520 --> 00:19:19,950
as a software way by using the special

371
00:19:18,000 --> 00:19:24,570
instruction code on premiere

372
00:19:19,950 --> 00:19:28,400
memory instructions okay so it is really

373
00:19:24,570 --> 00:19:28,399
different with their architectures

374
00:19:30,730 --> 00:19:36,260
therefore from UC Irvine really nice

375
00:19:33,170 --> 00:19:38,000
work so I'm curious there must be some

376
00:19:36,260 --> 00:19:40,820
instruction it cannot be converted to

377
00:19:38,000 --> 00:19:43,809
the unprivileged ones so do you have a

378
00:19:40,820 --> 00:19:50,330
number how many of this

379
00:19:43,809 --> 00:19:54,428
I'm not remember the exact it's not that

380
00:19:50,330 --> 00:19:58,419
too much Thanks

381
00:19:54,429 --> 00:20:03,289
let's think you again

382
00:19:58,420 --> 00:20:03,289
[Applause]

