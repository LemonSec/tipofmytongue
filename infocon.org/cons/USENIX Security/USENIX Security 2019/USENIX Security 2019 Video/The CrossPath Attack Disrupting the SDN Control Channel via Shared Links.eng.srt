1
00:00:10,320 --> 00:00:15,840
okay good morning everyone it's my plier

2
00:00:13,200 --> 00:00:18,570
to make a presentation here

3
00:00:15,840 --> 00:00:21,660
my name is jehoshua I come from Chima

4
00:00:18,570 --> 00:00:23,730
University and currently I'm also a

5
00:00:21,660 --> 00:00:24,540
visiting student at George Mason

6
00:00:23,730 --> 00:00:27,770
University

7
00:00:24,540 --> 00:00:32,610
this work was done with chili and Jesse

8
00:00:27,770 --> 00:00:35,309
Quinton kofuku new issue and Ivania way

9
00:00:32,610 --> 00:00:37,890
introduced a new attack honesty in which

10
00:00:35,309 --> 00:00:42,570
disrupts control china to wear shredder

11
00:00:37,890 --> 00:00:44,010
links okay this is a line first we

12
00:00:42,570 --> 00:00:46,860
introduce some necessary background

13
00:00:44,010 --> 00:00:50,099
honesty and then we introduce our tyke

14
00:00:46,860 --> 00:00:53,250
to relay the challenge and it's a master

15
00:00:50,100 --> 00:00:56,520
named adversarial pass reconnaissance to

16
00:00:53,250 --> 00:00:59,040
solve the challenge next we showed the

17
00:00:56,520 --> 00:01:01,710
evaluation of the hiking a real as in

18
00:00:59,040 --> 00:01:06,329
test bite finally we discuss possible

19
00:01:01,710 --> 00:01:08,340
defense and conclude our work okay let

20
00:01:06,329 --> 00:01:11,158
me first introduce software-defined

21
00:01:08,340 --> 00:01:13,079
networking software our different

22
00:01:11,159 --> 00:01:16,080
Defined Networking it's a new network

23
00:01:13,079 --> 00:01:21,600
paradigm it's a brisk intro and Ditch

24
00:01:16,080 --> 00:01:24,690
Plains with a centralized controller so

25
00:01:21,600 --> 00:01:27,390
as I think richly promotes Network

26
00:01:24,690 --> 00:01:31,320
programmability the rata figure shows

27
00:01:27,390 --> 00:01:33,270
the 3 layer as the actor the top is the

28
00:01:31,320 --> 00:01:35,580
application layer where has been

29
00:01:33,270 --> 00:01:37,649
applications in both various Network

30
00:01:35,580 --> 00:01:39,380
functionalities the middle is the

31
00:01:37,650 --> 00:01:42,409
controller where a centralized

32
00:01:39,380 --> 00:01:45,899
controller manage applications and

33
00:01:42,409 --> 00:01:48,030
interact with switches and the bottom is

34
00:01:45,900 --> 00:01:51,150
a bit different layer whereas the in

35
00:01:48,030 --> 00:01:55,770
symmetries enforce network policies

36
00:01:51,150 --> 00:01:58,640
according to control channels well in

37
00:01:55,770 --> 00:02:02,340
Sdn control channels is the key part

38
00:01:58,640 --> 00:02:05,970
Italy were all control traffic from the

39
00:02:02,340 --> 00:02:08,759
controller to the bit plane so so few

40
00:02:05,970 --> 00:02:11,180
years of control channels can resulting

41
00:02:08,758 --> 00:02:15,439
in various departures and may affect

42
00:02:11,180 --> 00:02:18,779
entire Sdn so security and reliability

43
00:02:15,439 --> 00:02:23,129
of the control channels are a great

44
00:02:18,779 --> 00:02:24,180
importance so in this paper we uncover a

45
00:02:23,129 --> 00:02:27,420
new attack near

46
00:02:24,180 --> 00:02:28,040
and cross paths to disrupt a stinking

47
00:02:27,420 --> 00:02:32,369
Torinos

48
00:02:28,040 --> 00:02:35,969
this attack is caused by share links

49
00:02:32,370 --> 00:02:38,640
between paths Oh control traffic and the

50
00:02:35,969 --> 00:02:40,950
district well just attack a lot of date

51
00:02:38,640 --> 00:02:45,779
a lot of traffic to disrupt in church

52
00:02:40,950 --> 00:02:48,719
our traffic and as a tyke this disrupts

53
00:02:45,780 --> 00:02:50,730
interesting control channels so it can

54
00:02:48,719 --> 00:02:54,358
affect a wide range of a steam

55
00:02:50,730 --> 00:02:57,899
functionalities to launch the hike we

56
00:02:54,359 --> 00:03:01,549
assumed that the tiger has compromised

57
00:02:57,900 --> 00:03:05,129
hosts inside the target at the end and

58
00:03:01,549 --> 00:03:07,560
the target Aston applies in banking true

59
00:03:05,129 --> 00:03:10,230
here in bad control means edge as the

60
00:03:07,560 --> 00:03:12,569
instigator ease forward date and control

61
00:03:10,230 --> 00:03:16,369
traffic at the same time which is a

62
00:03:12,569 --> 00:03:20,700
convenient way to build as the networks

63
00:03:16,370 --> 00:03:23,489
ok let's first see a toy example the

64
00:03:20,700 --> 00:03:26,429
main idea of the tyke is that a

65
00:03:23,489 --> 00:03:32,040
malicious host since this traffic to

66
00:03:26,430 --> 00:03:36,180
congest share links that delivers a post

67
00:03:32,040 --> 00:03:38,280
date and control traffic now let's see

68
00:03:36,180 --> 00:03:41,659
this figure there are files to a trace

69
00:03:38,280 --> 00:03:45,209
to host and the one asking controller

70
00:03:41,659 --> 00:03:48,439
the dotted blue blue line is the control

71
00:03:45,209 --> 00:03:52,319
past switches and the controller's

72
00:03:48,439 --> 00:03:56,370
communicate with each other in the in in

73
00:03:52,319 --> 00:03:59,000
this control pass and that the Purple

74
00:03:56,370 --> 00:04:02,849
Line is the date pass between two hosts

75
00:03:59,000 --> 00:04:06,900
hosts each one can send traffic to host

76
00:04:02,849 --> 00:04:11,578
a true over the date pass so as you can

77
00:04:06,900 --> 00:04:18,060
see the link between s2 and s3 is the

78
00:04:11,579 --> 00:04:21,720
share link so if hiker floods of last

79
00:04:18,060 --> 00:04:25,500
date resistant then control traffic

80
00:04:21,720 --> 00:04:29,909
passing the share link will also be

81
00:04:25,500 --> 00:04:33,599
congested consequently two three trees

82
00:04:29,909 --> 00:04:37,229
as 1 and s 2 will be affected by the

83
00:04:33,599 --> 00:04:38,010
attack things since control traffic from

84
00:04:37,229 --> 00:04:41,460
the

85
00:04:38,010 --> 00:04:46,020
switch to the controller will will be

86
00:04:41,460 --> 00:04:51,659
significantly delayed or drop due to due

87
00:04:46,020 --> 00:04:55,260
to congestion so the challenge to launch

88
00:04:51,660 --> 00:05:02,690
that high is to how to find a date pass

89
00:04:55,260 --> 00:05:05,159
that contains shared links so one is

90
00:05:02,690 --> 00:05:08,580
cami Randall me through the date passed

91
00:05:05,160 --> 00:05:11,310
to attack well this will result in low

92
00:05:08,580 --> 00:05:14,940
success ratio due to there are only a

93
00:05:11,310 --> 00:05:16,950
few shillings in as Conservatory's for

94
00:05:14,940 --> 00:05:20,520
example for example assume they are only

95
00:05:16,950 --> 00:05:24,120
am switches in total the total number of

96
00:05:20,520 --> 00:05:27,030
links in the networks will be om square

97
00:05:24,120 --> 00:05:29,940
however there there may be only om share

98
00:05:27,030 --> 00:05:35,969
links Naga ting the switches with the

99
00:05:29,940 --> 00:05:41,100
controller so can apply existing scan

100
00:05:35,970 --> 00:05:44,250
tools to find such a date pass well this

101
00:05:41,100 --> 00:05:45,840
is this is not ineffective due to unique

102
00:05:44,250 --> 00:05:50,130
as the end date playing forwarding

103
00:05:45,840 --> 00:05:53,700
behavior in st ann's there are no IP

104
00:05:50,130 --> 00:05:56,700
addresses in switch post and and that

105
00:05:53,700 --> 00:06:00,110
there may be no TTL decrease for packets

106
00:05:56,700 --> 00:06:03,000
passing as the instabilities so so

107
00:06:00,110 --> 00:06:06,840
scanning tools like twitter ood that

108
00:06:03,000 --> 00:06:11,820
depend on IP addresses in switch ports

109
00:06:06,840 --> 00:06:18,179
and the TTL decrees will not working at

110
00:06:11,820 --> 00:06:20,700
the end so how how to solve the

111
00:06:18,180 --> 00:06:23,130
challenge where we present anniversary

112
00:06:20,700 --> 00:06:26,250
or pass reconnaissance the key

113
00:06:23,130 --> 00:06:29,730
observation is that control path delays

114
00:06:26,250 --> 00:06:34,500
can be an indicator and wiser date path

115
00:06:29,730 --> 00:06:39,810
contains share links still the the

116
00:06:34,500 --> 00:06:42,540
disfigure when the hiker can jests the

117
00:06:39,810 --> 00:06:46,260
date pass today path contains or share

118
00:06:42,540 --> 00:06:50,860
links so so the control path delay

119
00:06:46,260 --> 00:06:53,759
between the switch s2 and the controller

120
00:06:50,860 --> 00:06:59,409
we'll be a significant large due to

121
00:06:53,759 --> 00:07:01,990
control traffic congestion so so so if a

122
00:06:59,409 --> 00:07:04,719
date pass contains share links our

123
00:07:01,990 --> 00:07:09,280
Teicher can't congested then the

124
00:07:04,720 --> 00:07:13,889
attacker can can get the large control

125
00:07:09,280 --> 00:07:19,299
past delays so so let's see another case

126
00:07:13,889 --> 00:07:22,750
if if the date pass contain contains no

127
00:07:19,300 --> 00:07:25,690
share link what if the control pass

128
00:07:22,750 --> 00:07:28,780
delays well the control past delay will

129
00:07:25,690 --> 00:07:30,819
be small things since then since control

130
00:07:28,780 --> 00:07:34,568
traffic will not ought to be affected

131
00:07:30,819 --> 00:07:37,719
about the data traffic this figure shows

132
00:07:34,569 --> 00:07:40,599
the control bus delay in such two cases

133
00:07:37,719 --> 00:07:43,240
we can see this show we can see that's

134
00:07:40,599 --> 00:07:45,940
the control past delays in the two cases

135
00:07:43,240 --> 00:07:48,099
are significant different different so

136
00:07:45,940 --> 00:07:55,029
so we can leverage the control past

137
00:07:48,099 --> 00:08:00,430
delay to to to to find whether a date

138
00:07:55,029 --> 00:08:03,460
pass contains share links and and how to

139
00:08:00,430 --> 00:08:07,180
measure control path delays with an end

140
00:08:03,460 --> 00:08:10,599
host where we find that a week early

141
00:08:07,180 --> 00:08:14,860
reach solidify so dynamic floral

142
00:08:10,599 --> 00:08:20,590
installation in Sdn to Meriden let's see

143
00:08:14,860 --> 00:08:23,860
this figure suppose h1 sent a new flow

144
00:08:20,590 --> 00:08:28,020
to h2 the first when the first package

145
00:08:23,860 --> 00:08:30,969
of the flow or routes of a switch s1

146
00:08:28,020 --> 00:08:32,588
since the switch has no flow rules the

147
00:08:30,969 --> 00:08:36,130
first package will be sent to the

148
00:08:32,589 --> 00:08:38,440
controller after raw installations the

149
00:08:36,130 --> 00:08:43,419
packet will be sent back to switches and

150
00:08:38,440 --> 00:08:45,550
be forwarded so h1 so the first pipe the

151
00:08:43,419 --> 00:08:49,060
round-trip time of the first packet

152
00:08:45,550 --> 00:08:52,839
contains the date plain forwarding delay

153
00:08:49,060 --> 00:08:56,529
and the control path delay however the

154
00:08:52,839 --> 00:08:58,000
second package will run through the time

155
00:08:56,529 --> 00:09:02,380
of the second impact that will only

156
00:08:58,000 --> 00:09:04,170
contain bit path delay because existing

157
00:09:02,380 --> 00:09:08,670
rules has

158
00:09:04,170 --> 00:09:12,810
installed in the two switches so so our

159
00:09:08,670 --> 00:09:16,680
hiker can measure the control past

160
00:09:12,810 --> 00:09:21,449
delays based on the first two packs so

161
00:09:16,680 --> 00:09:23,670
new flow so that summer summarize the

162
00:09:21,450 --> 00:09:27,210
algorithm we can of our reconnaissance

163
00:09:23,670 --> 00:09:31,650
first attacker choose our data path then

164
00:09:27,210 --> 00:09:34,800
say flood threat they traffic to the to

165
00:09:31,650 --> 00:09:37,290
the bit path and at the same time he

166
00:09:34,800 --> 00:09:40,560
measured the contrabass delays if the

167
00:09:37,290 --> 00:09:43,500
delays is large then the hiker find a

168
00:09:40,560 --> 00:09:46,229
target date path that contain the share

169
00:09:43,500 --> 00:09:48,350
link if it is more than the tiger should

170
00:09:46,230 --> 00:09:52,050
try another date pass

171
00:09:48,350 --> 00:09:56,040
so in our paper we also provided some

172
00:09:52,050 --> 00:09:58,740
techniques to improve the accuracy and

173
00:09:56,040 --> 00:10:01,079
efficiency of our reconnaissance for

174
00:09:58,740 --> 00:10:04,320
example to reduce the impacts of network

175
00:10:01,080 --> 00:10:08,370
jitters and to enable concurrent or

176
00:10:04,320 --> 00:10:12,570
recurrence due to time limit we please

177
00:10:08,370 --> 00:10:16,710
see our paper for details so to evaluate

178
00:10:12,570 --> 00:10:18,839
the effectiveness order type we conduct

179
00:10:16,710 --> 00:10:22,589
experiments you know Rio as in heist

180
00:10:18,839 --> 00:10:24,839
bite the test bed contained commercial

181
00:10:22,589 --> 00:10:26,970
Holloway arresting symmetries and an

182
00:10:24,839 --> 00:10:30,150
open source control flight and the

183
00:10:26,970 --> 00:10:33,750
physique host knocked into spaces and we

184
00:10:30,150 --> 00:10:37,370
replay fell tabs of a real real traffic

185
00:10:33,750 --> 00:10:41,490
trees - as the background traffic and we

186
00:10:37,370 --> 00:10:44,540
evaluate the accuracy of our adversary

187
00:10:41,490 --> 00:10:52,170
or pass reconnaissance and the

188
00:10:44,540 --> 00:10:57,089
degradation ratio or control traffic as

189
00:10:52,170 --> 00:10:59,219
you can see in this figure also

190
00:10:57,089 --> 00:11:03,300
different types of background traffic

191
00:10:59,220 --> 00:11:05,790
affect the accuracy and the control

192
00:11:03,300 --> 00:11:09,390
traffic degradation however we can see

193
00:11:05,790 --> 00:11:13,199
that the accuracy always achieved more

194
00:11:09,390 --> 00:11:16,939
than 80% and the degredation ratio

195
00:11:13,200 --> 00:11:16,940
always actually was more than 85%

196
00:11:17,820 --> 00:11:24,130
moreover as almost all as in

197
00:11:21,010 --> 00:11:26,650
applications depend control message

198
00:11:24,130 --> 00:11:30,640
delivered in keynote rhinos to enable

199
00:11:26,650 --> 00:11:33,130
Network functionalities so so the type

200
00:11:30,640 --> 00:11:37,000
can affect a wider interesting

201
00:11:33,130 --> 00:11:40,680
functionalities when we measure the

202
00:11:37,000 --> 00:11:44,520
impacts on three popular destinations

203
00:11:40,680 --> 00:11:49,150
including ARP proxy reactive loading and

204
00:11:44,520 --> 00:11:53,050
load balancer now we first see how the

205
00:11:49,150 --> 00:11:55,990
hike affects ARP proxy or AARP proxy is

206
00:11:53,050 --> 00:11:59,589
a basic service in Sdn our Tyco has

207
00:11:55,990 --> 00:12:01,990
significantly decreased ARP proxy at the

208
00:11:59,590 --> 00:12:05,550
performance of the ARP proxy the last

209
00:12:01,990 --> 00:12:10,390
figure shows that the ARP route

210
00:12:05,550 --> 00:12:15,390
significant decrease window when the ARP

211
00:12:10,390 --> 00:12:19,720
request reaches 300 package per second

212
00:12:15,390 --> 00:12:23,560
it drops from three three thousand tooth

213
00:12:19,720 --> 00:12:27,310
to 20 and the red figure shows shows

214
00:12:23,560 --> 00:12:33,459
that most ARP query delays remarkably

215
00:12:27,310 --> 00:12:37,420
increases with always Tyco now let's see

216
00:12:33,460 --> 00:12:39,760
the attack impact reactive rotting the

217
00:12:37,420 --> 00:12:45,010
left figure shows that the success ratio

218
00:12:39,760 --> 00:12:47,650
or ROI installation we can see that with

219
00:12:45,010 --> 00:12:52,439
altered hike the success success ratio

220
00:12:47,650 --> 00:12:55,959
always maintains more than 90%

221
00:12:52,440 --> 00:12:58,720
regardless is a rebel reach of the new

222
00:12:55,960 --> 00:13:01,960
flows however with our Tyco when the

223
00:12:58,720 --> 00:13:05,500
when the arrival rate of new flows is

224
00:13:01,960 --> 00:13:09,480
hides in the success ratio significantly

225
00:13:05,500 --> 00:13:13,780
decrease and the red figure shows the

226
00:13:09,480 --> 00:13:16,810
host migration time or without overt Ike

227
00:13:13,780 --> 00:13:19,720
the host memory issue in hand can finish

228
00:13:16,810 --> 00:13:22,180
within five seconds however always our

229
00:13:19,720 --> 00:13:27,540
Tyco is the host migration can will

230
00:13:22,180 --> 00:13:27,540
finish within 15 seconds

231
00:13:27,960 --> 00:13:34,410
and this figure shows another anomaly of

232
00:13:31,529 --> 00:13:37,290
reactive rotting and due to our attack

233
00:13:34,410 --> 00:13:40,380
we can see that our Tiger first did the

234
00:13:37,290 --> 00:13:43,740
a commit links in the topology is

235
00:13:40,380 --> 00:13:49,350
recompute litigious so a rotten pass is

236
00:13:43,740 --> 00:13:52,649
also erected finally this is the attack

237
00:13:49,350 --> 00:13:55,200
impacts on load balancer as shown in the

238
00:13:52,649 --> 00:13:57,360
left figure load balancer well balance

239
00:13:55,200 --> 00:14:01,380
the traffic among two servers without

240
00:13:57,360 --> 00:14:05,490
the dike however wizard hike the post

241
00:14:01,380 --> 00:14:07,529
utilization of Thor 2 is overloaded we

242
00:14:05,490 --> 00:14:10,110
find that load balancer incorrectly

243
00:14:07,529 --> 00:14:13,279
balance traffic among servers and

244
00:14:10,110 --> 00:14:13,279
there's a hike

245
00:14:13,790 --> 00:14:24,029
so to defeat the hike we we we provide

246
00:14:19,670 --> 00:14:25,829
two possible defense the first is to

247
00:14:24,029 --> 00:14:29,689
deliver a keynote traffic with a high

248
00:14:25,830 --> 00:14:33,120
priority this can be implemented with

249
00:14:29,690 --> 00:14:36,570
priority queue or weekly run run rubbing

250
00:14:33,120 --> 00:14:40,110
queue and the second may be to pro

251
00:14:36,570 --> 00:14:42,959
accurate or pediments for traffic this

252
00:14:40,110 --> 00:14:49,410
can be implemented ways as in meteor

253
00:14:42,959 --> 00:14:52,650
tables so so let me conclude our work

254
00:14:49,410 --> 00:14:55,199
first we show that date traffic passing

255
00:14:52,650 --> 00:14:59,040
share links can congest control traffic

256
00:14:55,200 --> 00:15:01,380
to disrupt a stink into China's second a

257
00:14:59,040 --> 00:15:03,900
date path containing share links can be

258
00:15:01,380 --> 00:15:06,959
found by marrying control past delays

259
00:15:03,900 --> 00:15:11,459
and livering side effects or dynamic

260
00:15:06,959 --> 00:15:15,260
rule installation and search we hope our

261
00:15:11,459 --> 00:15:17,939
can draw more attention for network

262
00:15:15,260 --> 00:15:21,180
administrators they should enable

263
00:15:17,940 --> 00:15:23,839
priority to our proactively reserve

264
00:15:21,180 --> 00:15:25,020
elements for asking into traffic to

265
00:15:23,839 --> 00:15:31,100
protect

266
00:15:25,020 --> 00:15:31,100
control channels that's all thank you

267
00:15:35,710 --> 00:15:40,970
all right this is Chow from Rice

268
00:15:38,690 --> 00:15:43,850
University so the first question is how

269
00:15:40,970 --> 00:15:48,140
do you overwhelm one dink is it like

270
00:15:43,850 --> 00:15:51,680
link flooding attacks how do i congest

271
00:15:48,140 --> 00:15:55,100
one link yes well there are two methods

272
00:15:51,680 --> 00:15:58,520
the first is you can simply flood this

273
00:15:55,100 --> 00:16:02,900
link Sinnott is traffic and and since

274
00:15:58,520 --> 00:16:06,050
since since the control traffic use TCP

275
00:16:02,900 --> 00:16:09,290
protocol you can use some attacking

276
00:16:06,050 --> 00:16:13,010
technique such such as lowering TCP dose

277
00:16:09,290 --> 00:16:15,770
to two congest the congested this

278
00:16:13,010 --> 00:16:20,030
traffic and this will lower in TCP dose

279
00:16:15,770 --> 00:16:21,260
will reduce the attack traffic but the

280
00:16:20,030 --> 00:16:24,290
volume of the high traffic

281
00:16:21,260 --> 00:16:27,620
yeah I think using a low volume TCP art

282
00:16:24,290 --> 00:16:29,360
like this or pausing attack makes sense

283
00:16:27,620 --> 00:16:33,410
because we only have one host

284
00:16:29,360 --> 00:16:35,300
compromised right how many hosts do you

285
00:16:33,410 --> 00:16:41,180
have compromised to launch this at have

286
00:16:35,300 --> 00:16:45,579
in this hike we assume one host is is is

287
00:16:41,180 --> 00:16:48,680
compromised if one host is compromised

288
00:16:45,580 --> 00:16:51,440
the most efficient way to congest link

289
00:16:48,680 --> 00:16:54,920
is used you do low rate TCP because if

290
00:16:51,440 --> 00:16:57,920
you directly flooding the link may not

291
00:16:54,920 --> 00:17:00,680
be congested in some case if your your

292
00:16:57,920 --> 00:17:03,140
link is how enough bandwidth yeah yeah

293
00:17:00,680 --> 00:17:05,629
yeah so is the sender compromised over

294
00:17:03,140 --> 00:17:07,790
the receiver compromise or okay there's

295
00:17:05,630 --> 00:17:10,640
no difference but only one host of the

296
00:17:07,790 --> 00:17:13,520
TCP connection is compromised right yeah

297
00:17:10,640 --> 00:17:16,160
so you send opposing attacks from the

298
00:17:13,520 --> 00:17:20,150
compromised host but you have to have

299
00:17:16,160 --> 00:17:23,449
another normal client to cooperate with

300
00:17:20,150 --> 00:17:25,610
the cinder so in the in the in the in

301
00:17:23,449 --> 00:17:27,829
the other sign which is a normal host

302
00:17:25,609 --> 00:17:30,560
which is not compromised we can easily

303
00:17:27,829 --> 00:17:33,560
detect the distribution of the volume

304
00:17:30,560 --> 00:17:36,139
right so I believe that we can easily

305
00:17:33,560 --> 00:17:41,020
detect this attack by running a simple

306
00:17:36,140 --> 00:17:44,210
script in the other side of the TCP host

307
00:17:41,020 --> 00:17:44,480
also you have to pretend you have to

308
00:17:44,210 --> 00:17:46,820
send

309
00:17:44,480 --> 00:17:50,090
probing message more than one times to

310
00:17:46,820 --> 00:17:52,040
probe the targeting right so if we can

311
00:17:50,090 --> 00:17:55,010
detect this attack more your first time

312
00:17:52,040 --> 00:17:57,230
probe the links why this is how queue

313
00:17:55,010 --> 00:18:03,770
large persistent attacks in the network

314
00:17:57,230 --> 00:18:07,660
well because first if you first if you

315
00:18:03,770 --> 00:18:11,540
want to probe probe the links and the

316
00:18:07,660 --> 00:18:16,669
the the duration with the probably small

317
00:18:11,540 --> 00:18:21,280
so so so it may not be easily detectable

318
00:18:16,669 --> 00:18:27,070
because it and because at your at your

319
00:18:21,280 --> 00:18:32,360
probing you can first probe a link at a

320
00:18:27,070 --> 00:18:35,480
at a small duration and after and after

321
00:18:32,360 --> 00:18:37,459
that you can wait enough time for

322
00:18:35,480 --> 00:18:39,740
example you can wait several seconds

323
00:18:37,460 --> 00:18:43,160
after you conduct the next probably

324
00:18:39,740 --> 00:18:45,230
engine so the average problem traffic

325
00:18:43,160 --> 00:18:46,760
will be small okay so basically that

326
00:18:45,230 --> 00:18:49,309
you're reaching small so another

327
00:18:46,760 --> 00:18:51,080
question is so in the interests of time

328
00:18:49,309 --> 00:18:52,520
and fairness we have another question

329
00:18:51,080 --> 00:18:53,928
that's been waiting for a while this

330
00:18:52,520 --> 00:18:56,080
sounds like a great conversation to

331
00:18:53,929 --> 00:18:58,910
continue offline Thanks

332
00:18:56,080 --> 00:19:02,240
yes thank you for the presentation so so

333
00:18:58,910 --> 00:19:04,370
actually you have sorry could you speak

334
00:19:02,240 --> 00:19:07,160
louder okay see

335
00:19:04,370 --> 00:19:08,689
so the you assume that the or kind of

336
00:19:07,160 --> 00:19:10,460
the control for a pig endangered

337
00:19:08,690 --> 00:19:16,460
tropical it could be handled in the case

338
00:19:10,460 --> 00:19:18,919
of Justin in band right sorry again yes

339
00:19:16,460 --> 00:19:22,040
I mean that the so you are assuming that

340
00:19:18,919 --> 00:19:24,350
the all kind of the control traffic and

341
00:19:22,040 --> 00:19:27,850
the data traffic he called the handled

342
00:19:24,350 --> 00:19:31,850
in the case of the SD onion band right

343
00:19:27,850 --> 00:19:34,070
you mean assumption or embed can use

344
00:19:31,850 --> 00:19:37,610
your assumption okay okay that's a good

345
00:19:34,070 --> 00:19:41,120
question actually when we when we submit

346
00:19:37,610 --> 00:19:44,629
our papers the reviewers also ask

347
00:19:41,120 --> 00:19:47,500
question about this so so wiser wiser

348
00:19:44,630 --> 00:19:53,750
the aim band control assumption is

349
00:19:47,500 --> 00:19:56,380
realistic well we first absolutely my

350
00:19:53,750 --> 00:19:58,720
question is that usually to you finally

351
00:19:56,380 --> 00:20:01,000
that the possible defense is using the

352
00:19:58,720 --> 00:20:04,000
priority queue for handling the control

353
00:20:01,000 --> 00:20:06,850
traffic right but that is the common way

354
00:20:04,000 --> 00:20:08,890
to handle the control package in the

355
00:20:06,850 --> 00:20:12,659
case of us the onion band so I mean that

356
00:20:08,890 --> 00:20:14,770
the why did you assume like the I mean

357
00:20:12,660 --> 00:20:19,060
I'm wondering it that you are or

358
00:20:14,770 --> 00:20:22,750
something is right or not actually do

359
00:20:19,060 --> 00:20:23,620
you make I think he's asking I'm not

360
00:20:22,750 --> 00:20:26,830
sure I fully understand the question

361
00:20:23,620 --> 00:20:28,090
myself I think he's asking about maybe

362
00:20:26,830 --> 00:20:30,820
something to do with the queueing that's

363
00:20:28,090 --> 00:20:32,169
in the network in since since there's

364
00:20:30,820 --> 00:20:34,810
clearly some communication issues this

365
00:20:32,170 --> 00:20:37,870
might be another question to maybe

366
00:20:34,810 --> 00:20:39,429
discuss after this yeah thanks very

367
00:20:37,870 --> 00:20:41,229
quickly well our next speaker goes ahead

368
00:20:39,430 --> 00:20:43,590
and sets up we have time for one more

369
00:20:41,230 --> 00:20:43,590
question

370
00:20:43,950 --> 00:20:49,630
Claire University so my question is why

371
00:20:47,470 --> 00:20:51,910
don't you slice the network the

372
00:20:49,630 --> 00:20:55,360
bandwidth for control traffic and

373
00:20:51,910 --> 00:20:57,550
regular traffic and just simply use open

374
00:20:55,360 --> 00:21:00,159
flow counters you know by the controller

375
00:20:57,550 --> 00:21:02,050
too because if you slice it for example

376
00:21:00,160 --> 00:21:03,790
let's say 5 percent 10 percent of the

377
00:21:02,050 --> 00:21:06,100
bandwidth is allocated you know for

378
00:21:03,790 --> 00:21:08,590
control traffic they can always collect

379
00:21:06,100 --> 00:21:10,270
these open flow counters for example and

380
00:21:08,590 --> 00:21:14,020
then just look at those counters and

381
00:21:10,270 --> 00:21:16,389
analyze the traffic - - to see if there

382
00:21:14,020 --> 00:21:17,410
is any malicious traffic or the network

383
00:21:16,390 --> 00:21:20,100
is being flooded

384
00:21:17,410 --> 00:21:23,800
wouldn't that be a simpler solution

385
00:21:20,100 --> 00:21:25,719
instead of introducing a an active flow

386
00:21:23,800 --> 00:21:27,370
in the network to float the network

387
00:21:25,720 --> 00:21:30,820
because that would also contribute to

388
00:21:27,370 --> 00:21:35,679
the network congestion yeah use the

389
00:21:30,820 --> 00:21:40,260
counters - this has traffic maybe a

390
00:21:35,680 --> 00:21:43,420
possible solution to defend the hike

391
00:21:40,260 --> 00:21:45,200
okay thank you wonderful all right let's

392
00:21:43,420 --> 00:21:48,549
say thank our speaker

393
00:21:45,200 --> 00:21:48,549
[Applause]

