1
00:00:10,690 --> 00:00:16,930
so I'm gonna start off with a little

2
00:00:13,180 --> 00:00:19,990
story so in 2006 a group of investors

3
00:00:16,930 --> 00:00:23,980
set out to build a luxury tower in South

4
00:00:19,990 --> 00:00:25,509
Padre Island on the Texas coast and each

5
00:00:23,980 --> 00:00:28,270
of the units and the tower was to be

6
00:00:25,510 --> 00:00:29,919
sold for two million dollars and the

7
00:00:28,270 --> 00:00:32,259
tower was built with extra reinforced

8
00:00:29,919 --> 00:00:35,920
core structure to withstand the extreme

9
00:00:32,259 --> 00:00:37,899
winds and region so unfortunately

10
00:00:35,920 --> 00:00:39,880
already two years later the construction

11
00:00:37,899 --> 00:00:44,140
had to be stopped and the tower was torn

12
00:00:39,880 --> 00:00:46,090
down so what happened so it turns out

13
00:00:44,140 --> 00:00:48,940
the problem was the use of expandable

14
00:00:46,090 --> 00:00:50,710
clay in the foundations and this sort of

15
00:00:48,940 --> 00:00:52,269
clay compressed sand the weight which

16
00:00:50,710 --> 00:00:54,100
costs the tower to sink and which caused

17
00:00:52,270 --> 00:00:58,720
structural damage that's why it it had

18
00:00:54,100 --> 00:01:00,280
to be torn down okay so at USENIX we

19
00:00:58,720 --> 00:01:02,110
don't care about towers we care about

20
00:01:00,280 --> 00:01:06,610
crypto algorithm for any definition of

21
00:01:02,110 --> 00:01:10,119
crypto and instead about the wind we

22
00:01:06,610 --> 00:01:12,939
worry about timing side channels so with

23
00:01:10,119 --> 00:01:14,920
a timing side channel you can make

24
00:01:12,939 --> 00:01:17,139
inference about the secrets use of a

25
00:01:14,920 --> 00:01:19,600
computation simply by execute by

26
00:01:17,140 --> 00:01:21,039
observing the execution time so if you

27
00:01:19,600 --> 00:01:23,169
buy something on the internet and your

28
00:01:21,039 --> 00:01:24,999
credit card gets encrypted and somebody

29
00:01:23,170 --> 00:01:26,530
can see how long it took to encrypt and

30
00:01:24,999 --> 00:01:28,990
maybe like they can make some inference

31
00:01:26,530 --> 00:01:32,350
about your your credit card number okay

32
00:01:28,990 --> 00:01:35,020
so like these engineers of the tower

33
00:01:32,350 --> 00:01:37,419
that went to reiax the work of

34
00:01:35,020 --> 00:01:40,298
reinforcing the core structure we also

35
00:01:37,420 --> 00:01:42,520
goes from through some pretty great we

36
00:01:40,299 --> 00:01:45,520
make some pretty great efforts to make

37
00:01:42,520 --> 00:01:47,979
our code free of timing side shells for

38
00:01:45,520 --> 00:01:51,389
instance we wrote our we write our code

39
00:01:47,979 --> 00:01:54,399
and a constant time discipline so

40
00:01:51,389 --> 00:01:56,469
instead of writing the code above which

41
00:01:54,399 --> 00:01:58,350
branches on a secret and will take

42
00:01:56,469 --> 00:02:01,389
different number of time to execute

43
00:01:58,350 --> 00:02:03,899
depending on the secret value we write

44
00:02:01,389 --> 00:02:07,179
the code below that's equivalent

45
00:02:03,899 --> 00:02:09,000
it's horrible to read but it will always

46
00:02:07,179 --> 00:02:11,770
take the same amount of time to execute

47
00:02:09,000 --> 00:02:15,190
all right and we don't even stop there

48
00:02:11,770 --> 00:02:16,990
so actually there's a bunch of verified

49
00:02:15,190 --> 00:02:18,579
libraries that use this constant time

50
00:02:16,990 --> 00:02:20,650
discipline for instance that they've

51
00:02:18,580 --> 00:02:23,319
made it into Firefox Chrome or they've

52
00:02:20,650 --> 00:02:26,170
influenced the TLS spec

53
00:02:23,319 --> 00:02:29,230
with all of that effort in place is our

54
00:02:26,170 --> 00:02:30,939
code actually safe well the lesson from

55
00:02:29,230 --> 00:02:32,980
the story with the tower is it really

56
00:02:30,939 --> 00:02:35,650
depends what we were building on in our

57
00:02:32,980 --> 00:02:39,629
case we're building on the hardware so

58
00:02:35,650 --> 00:02:42,909
all of these protections suppose that

59
00:02:39,629 --> 00:02:44,679
the basic blocks that we're using our

60
00:02:42,909 --> 00:02:47,858
constant times are for light it's like

61
00:02:44,680 --> 00:02:49,659
in sub and so on but if they're not then

62
00:02:47,859 --> 00:02:51,370
all the protections all the proofs for

63
00:02:49,659 --> 00:02:55,209
the software case we don't go through

64
00:02:51,370 --> 00:02:57,069
and we're left with no proof okay so

65
00:02:55,209 --> 00:02:58,930
what I'm proposing is that in order to

66
00:02:57,069 --> 00:03:00,700
have verified guarantees about constant

67
00:02:58,930 --> 00:03:06,669
type software we really need to verify

68
00:03:00,700 --> 00:03:09,209
the hardware okay but how can we verify

69
00:03:06,669 --> 00:03:11,560
the hardware so there's a number of

70
00:03:09,209 --> 00:03:14,500
verification tools for software but

71
00:03:11,560 --> 00:03:16,299
there isn't really one for hardware so

72
00:03:14,500 --> 00:03:18,700
one reason one one question you can ask

73
00:03:16,299 --> 00:03:21,730
yourself is can we simply reuse the

74
00:03:18,700 --> 00:03:23,679
verification tools for software but

75
00:03:21,730 --> 00:03:25,000
unfortunately they don't really apply

76
00:03:23,680 --> 00:03:27,099
and that's because hardware and software

77
00:03:25,000 --> 00:03:29,470
have a very different execution model so

78
00:03:27,099 --> 00:03:31,298
this the constant time constant time

79
00:03:29,470 --> 00:03:33,010
crypto software care about it's all

80
00:03:31,299 --> 00:03:34,900
straight line sequential codes and

81
00:03:33,010 --> 00:03:37,149
hardware is inherently parallel and

82
00:03:34,900 --> 00:03:39,729
pipelines so even the definition of

83
00:03:37,150 --> 00:03:42,989
constant time for for software doesn't

84
00:03:39,729 --> 00:03:46,209
really carry over to the Hardware case

85
00:03:42,989 --> 00:03:47,979
so for the rest of the talk I'm going to

86
00:03:46,209 --> 00:03:50,049
present you a definition for constant

87
00:03:47,979 --> 00:03:51,579
time that works for hardware and then

88
00:03:50,049 --> 00:03:53,349
I'm going to show you how to affect you

89
00:03:51,579 --> 00:03:56,560
to verify that definition and then I'm

90
00:03:53,349 --> 00:03:58,569
going to talk about evaluation okay so

91
00:03:56,560 --> 00:04:00,220
for the definition I'm gonna give you a

92
00:03:58,569 --> 00:04:03,040
simple running example of an FPU

93
00:04:00,220 --> 00:04:04,930
multiplier and it takes two inputs x and

94
00:04:03,040 --> 00:04:07,599
y and it's going to produce the product

95
00:04:04,930 --> 00:04:09,430
and put it into out and you can think of

96
00:04:07,599 --> 00:04:13,358
x and y as been

97
00:04:09,430 --> 00:04:15,549
the secrets we're computing on so our

98
00:04:13,359 --> 00:04:20,620
attacker model is an attacker that can

99
00:04:15,549 --> 00:04:23,259
observe the timing of out so here's some

100
00:04:20,620 --> 00:04:25,570
very lock code for the multiplier the

101
00:04:23,259 --> 00:04:27,070
multiplier has a Fastpass for 0 so if

102
00:04:25,570 --> 00:04:29,740
one of the operands is 0 it's gonna

103
00:04:27,070 --> 00:04:33,219
prove results right away and otherwise

104
00:04:29,740 --> 00:04:34,990
it's gonna go through some so path let's

105
00:04:33,219 --> 00:04:37,199
go through a code so if one of the

106
00:04:34,990 --> 00:04:39,449
operands is 0 that is 0 flaca set

107
00:04:37,199 --> 00:04:41,729
then in the next cycle using this a

108
00:04:39,449 --> 00:04:45,210
synchronous assignment we're going to

109
00:04:41,729 --> 00:04:47,430
assign zero to the output and if is

110
00:04:45,210 --> 00:04:49,650
there is not set then we will compute

111
00:04:47,430 --> 00:04:51,689
the results through some slow path put

112
00:04:49,650 --> 00:04:54,628
it into this temporary register FLP rest

113
00:04:51,689 --> 00:04:56,099
and then assign this temporary register

114
00:04:54,629 --> 00:04:57,719
to out and I'm leaving out stuff like

115
00:04:56,099 --> 00:05:01,378
input ready output ready bits because

116
00:04:57,719 --> 00:05:03,960
they are not relevant so how do we show

117
00:05:01,379 --> 00:05:06,120
that this mode so clearly the multiplier

118
00:05:03,960 --> 00:05:07,650
is not constant time but how do we show

119
00:05:06,120 --> 00:05:09,150
it so we need the definition that that a

120
00:05:07,650 --> 00:05:13,169
tool can use to actually prove or

121
00:05:09,150 --> 00:05:15,359
disprove the constant time this so it

122
00:05:13,169 --> 00:05:18,779
turns out for Hardware even the notion

123
00:05:15,360 --> 00:05:21,150
of time is kind of it's kind of hard to

124
00:05:18,779 --> 00:05:22,770
come up with so so let's look at add a

125
00:05:21,150 --> 00:05:24,779
simple pipeline computation so we have

126
00:05:22,770 --> 00:05:26,698
three stage pipeline we have this blue

127
00:05:24,779 --> 00:05:28,770
instruction the pink one and the yellow

128
00:05:26,699 --> 00:05:30,930
one and so the blue instruction starts

129
00:05:28,770 --> 00:05:32,878
in stage one goes to stage two and then

130
00:05:30,930 --> 00:05:34,770
to say three so you would think maybe

131
00:05:32,879 --> 00:05:37,620
the timing of the the blue instructor is

132
00:05:34,770 --> 00:05:40,020
just three so that's easy but actually

133
00:05:37,620 --> 00:05:42,389
what really happens in hardware is that

134
00:05:40,020 --> 00:05:45,210
all of these instructions in there

135
00:05:42,389 --> 00:05:46,529
influence each other so in stage two you

136
00:05:45,210 --> 00:05:48,628
might have something that somehow

137
00:05:46,529 --> 00:05:51,599
belongs to the pink one and to the

138
00:05:48,629 --> 00:05:53,099
yellow one and in stage three and two

139
00:05:51,599 --> 00:05:55,490
and three it may have something that's

140
00:05:53,099 --> 00:05:58,169
both influenced by the blue and the pink

141
00:05:55,490 --> 00:05:59,699
so how long does it take for this

142
00:05:58,169 --> 00:06:00,740
instruction to go through that it's not

143
00:05:59,699 --> 00:06:04,580
that easy

144
00:06:00,740 --> 00:06:07,620
so to track timing in that setting we

145
00:06:04,580 --> 00:06:09,479
explicitly track the info the influence

146
00:06:07,620 --> 00:06:11,939
that inputs have on registers and

147
00:06:09,479 --> 00:06:14,248
particular on outputs so for instance

148
00:06:11,939 --> 00:06:18,509
we'll check that out is influenced by in

149
00:06:14,249 --> 00:06:21,089
one in two and in and since there's an

150
00:06:18,509 --> 00:06:22,979
input at each cycle need to track which

151
00:06:21,089 --> 00:06:26,580
input at which cycle influence the

152
00:06:22,979 --> 00:06:31,349
output so in one at one in at one in one

153
00:06:26,580 --> 00:06:33,180
at four and in two and six so the set of

154
00:06:31,349 --> 00:06:35,219
all cycles that influence the given

155
00:06:33,180 --> 00:06:39,389
register is what we call the influence

156
00:06:35,219 --> 00:06:41,270
set so for for these the four out the

157
00:06:39,389 --> 00:06:43,529
influence sets is one four and six and

158
00:06:41,270 --> 00:06:46,490
the influence that is going to be our

159
00:06:43,529 --> 00:06:46,490
notion of timing okay

160
00:06:47,120 --> 00:06:52,160
hmm so let's get some intuition so if we

161
00:06:50,300 --> 00:06:54,050
have two computations that produce

162
00:06:52,160 --> 00:06:56,360
outputs with different influence sets

163
00:06:54,050 --> 00:06:58,100
then that's pretty not good that's not

164
00:06:56,360 --> 00:07:00,530
constant time because influences our

165
00:06:58,100 --> 00:07:03,410
notion of timing so if one of them

166
00:07:00,530 --> 00:07:05,359
produces 146 and the other one 147 then

167
00:07:03,410 --> 00:07:07,100
by observing that time and difference we

168
00:07:05,360 --> 00:07:10,460
can make some inference about the

169
00:07:07,100 --> 00:07:14,020
secrets user in computation and clearly

170
00:07:10,460 --> 00:07:16,549
the code is not constant time okay so

171
00:07:14,020 --> 00:07:18,710
how can we use that to define constant

172
00:07:16,550 --> 00:07:21,860
time so what we need is that for any two

173
00:07:18,710 --> 00:07:24,650
executions regardless of which secrets

174
00:07:21,860 --> 00:07:26,389
were used in a computation all output

175
00:07:24,650 --> 00:07:27,830
must have the same timing and that just

176
00:07:26,389 --> 00:07:34,910
means they all produce the same

177
00:07:27,830 --> 00:07:36,080
influence set all right so now I'm going

178
00:07:34,910 --> 00:07:38,870
to show you how to use that definition

179
00:07:36,080 --> 00:07:41,150
to show that the multiplier is not

180
00:07:38,870 --> 00:07:42,979
constant time and for that we just need

181
00:07:41,150 --> 00:07:44,510
to find two executions such that the

182
00:07:42,979 --> 00:07:47,539
outputs have different influence sets

183
00:07:44,510 --> 00:07:49,580
and the obvious candidates are the fast

184
00:07:47,539 --> 00:07:51,320
path and the slow path so let's start

185
00:07:49,580 --> 00:07:54,620
with the fast path we're going to set X

186
00:07:51,320 --> 00:07:57,440
to 0 and so on the left I'm showing you

187
00:07:54,620 --> 00:08:00,710
the code and on the right I'm showing

188
00:07:57,440 --> 00:08:04,010
you the the values of the of the

189
00:08:00,710 --> 00:08:10,060
registers for each cycle so initially X

190
00:08:04,010 --> 00:08:13,580
is 0 then 0 set and we assign 0 to out

191
00:08:10,060 --> 00:08:17,449
then we compute the result along the

192
00:08:13,580 --> 00:08:19,580
slow path and 0 the the temporary

193
00:08:17,449 --> 00:08:24,020
register gets also gets the same result

194
00:08:19,580 --> 00:08:25,669
0 but then we don't assign it ok so here

195
00:08:24,020 --> 00:08:28,250
are the influence sets for that

196
00:08:25,669 --> 00:08:29,479
computation so initially x and y are

197
00:08:28,250 --> 00:08:33,260
only influenced by the current

198
00:08:29,479 --> 00:08:38,179
computation 0 then because we assign the

199
00:08:33,260 --> 00:08:39,950
output out it's influenced by 0 then we

200
00:08:38,179 --> 00:08:43,789
compute the result along the slow path

201
00:08:39,950 --> 00:08:47,120
so the temporary registers influenced by

202
00:08:43,789 --> 00:08:48,680
0 and finally we don't assign so and the

203
00:08:47,120 --> 00:08:53,180
output is not influenced by 0 and just

204
00:08:48,680 --> 00:08:55,219
by the by the previous input ok so let's

205
00:08:53,180 --> 00:08:58,579
look at the slow path for the self as we

206
00:08:55,220 --> 00:09:00,230
said we said both operands to 1

207
00:08:58,579 --> 00:09:02,779
so I'm just going to show you the

208
00:09:00,230 --> 00:09:05,749
influence set for that so x and y are

209
00:09:02,779 --> 00:09:08,089
influenced by 0 then out is also

210
00:09:05,749 --> 00:09:10,910
influenced by 0 and that's due to a

211
00:09:08,089 --> 00:09:14,540
control dependency so based on the vary

212
00:09:10,910 --> 00:09:20,029
from from time from time 0 we decided to

213
00:09:14,540 --> 00:09:21,559
go into the lower branch then we compute

214
00:09:20,029 --> 00:09:24,379
the result along the slow path and is

215
00:09:21,559 --> 00:09:26,360
put into fop res solo FLP res is

216
00:09:24,379 --> 00:09:30,379
influenced by the computation started at

217
00:09:26,360 --> 00:09:34,209
0 and then finally output is influenced

218
00:09:30,379 --> 00:09:39,049
by by 0 because we assign the value ok

219
00:09:34,209 --> 00:09:41,569
so let's look at the the two the two

220
00:09:39,049 --> 00:09:42,860
tables together so what we want for the

221
00:09:41,569 --> 00:09:44,689
computation of the constant time is

222
00:09:42,860 --> 00:09:47,299
thought our outputs always produce the

223
00:09:44,689 --> 00:09:49,129
same infrared sets so the first one's

224
00:09:47,299 --> 00:09:51,980
all look good but in the last one we

225
00:09:49,129 --> 00:09:53,959
have a problem so in the one the

226
00:09:51,980 --> 00:09:56,089
computation is influenced by the inputs

227
00:09:53,959 --> 00:09:58,790
from cycle zero and the other one it's

228
00:09:56,089 --> 00:10:00,889
not so clearly we have a different

229
00:09:58,790 --> 00:10:03,498
timing and since they were using

230
00:10:00,889 --> 00:10:11,049
different secrets and that's clearly bad

231
00:10:03,499 --> 00:10:13,879
so they so it's not constant time ok so

232
00:10:11,049 --> 00:10:15,499
now I'm going to show you how to use to

233
00:10:13,879 --> 00:10:19,519
effectively verify that the finishing of

234
00:10:15,499 --> 00:10:21,589
constant time and even though the

235
00:10:19,519 --> 00:10:24,889
definition featuring in M in terms of

236
00:10:21,589 --> 00:10:27,199
influence set is good in order to define

237
00:10:24,889 --> 00:10:28,989
the notion of constant time it's not

238
00:10:27,199 --> 00:10:31,099
very good for verification because

239
00:10:28,989 --> 00:10:34,160
replication tools can we deal with this

240
00:10:31,100 --> 00:10:37,220
sort of set so I'm gonna define an

241
00:10:34,160 --> 00:10:41,118
equivalent lotion that's easy to verify

242
00:10:37,220 --> 00:10:44,779
and it's called lightness equivalence so

243
00:10:41,119 --> 00:10:48,970
a register is tea life if it's

244
00:10:44,779 --> 00:10:52,220
influenced by an input from cycle T and

245
00:10:48,970 --> 00:10:58,489
that just means that T is and the

246
00:10:52,220 --> 00:11:00,290
influence set of X so then two

247
00:10:58,489 --> 00:11:04,040
executions are liveness equivalent if

248
00:11:00,290 --> 00:11:07,118
for all outputs that occur there T life

249
00:11:04,040 --> 00:11:07,118
equivalent for all T

250
00:11:08,570 --> 00:11:13,190
okay so these notions are equivalent and

251
00:11:11,270 --> 00:11:14,960
so we can also use liveness equivalents

252
00:11:13,190 --> 00:11:19,340
to show that the multiplier is not

253
00:11:14,960 --> 00:11:20,990
constant time so let's do the Fastpass

254
00:11:19,340 --> 00:11:24,290
first and I'm gonna show you the

255
00:11:20,990 --> 00:11:26,660
liveness next to the code so initially x

256
00:11:24,290 --> 00:11:30,020
and y are life then the output is life

257
00:11:26,660 --> 00:11:32,360
because we assign 0 then the temporary

258
00:11:30,020 --> 00:11:34,130
richest is life because we compute along

259
00:11:32,360 --> 00:11:36,910
the slow path and then the output is not

260
00:11:34,130 --> 00:11:40,100
live because we don't assign the results

261
00:11:36,910 --> 00:11:44,810
so in the slow path both inputs are life

262
00:11:40,100 --> 00:11:46,280
in the first cycle then we assign the

263
00:11:44,810 --> 00:11:50,209
output is life because of the control

264
00:11:46,280 --> 00:11:52,280
dependency then the temporary registers

265
00:11:50,210 --> 00:11:54,080
life because we compute along the slow

266
00:11:52,280 --> 00:11:57,020
path and then the output is life because

267
00:11:54,080 --> 00:12:00,650
we are signing okay so I took again that

268
00:11:57,020 --> 00:12:03,170
other two together so for for it to be

269
00:12:00,650 --> 00:12:04,579
liveness equivalent all of the aliveness

270
00:12:03,170 --> 00:12:06,500
bits for the output needs to be the same

271
00:12:04,580 --> 00:12:09,260
that are the same for the first ones but

272
00:12:06,500 --> 00:12:10,490
then we run to the problem because I 1

273
00:12:09,260 --> 00:12:15,200
the output is life and the other one

274
00:12:10,490 --> 00:12:18,560
it's not ok so now we want to use

275
00:12:15,200 --> 00:12:20,090
liveness to actually verify the FPU but

276
00:12:18,560 --> 00:12:23,060
for that you need first need to fix it

277
00:12:20,090 --> 00:12:24,550
because it's not constant time so we're

278
00:12:23,060 --> 00:12:28,130
going to introduce a constant time mode

279
00:12:24,550 --> 00:12:30,740
similar to what arm did in its data

280
00:12:28,130 --> 00:12:32,030
independent timing instruction so it's a

281
00:12:30,740 --> 00:12:33,800
process mode that's going to make sure

282
00:12:32,030 --> 00:12:41,180
that it always takes the same amount of

283
00:12:33,800 --> 00:12:43,880
time so so here we introduce this extra

284
00:12:41,180 --> 00:12:47,060
case so if the CT bit is set we're

285
00:12:43,880 --> 00:12:49,340
always going to take the slow path so

286
00:12:47,060 --> 00:12:52,479
now we want to verify that the

287
00:12:49,340 --> 00:12:55,820
multiplier is constant time if CT is set

288
00:12:52,480 --> 00:12:59,030
hmm so so now I'm going to show you how

289
00:12:55,820 --> 00:13:01,130
you actually verify in the tool so the

290
00:12:59,030 --> 00:13:02,839
trick that we're using is we're tracking

291
00:13:01,130 --> 00:13:04,490
liveness to an extra bit that we

292
00:13:02,840 --> 00:13:06,410
instrumented to the program so here

293
00:13:04,490 --> 00:13:09,590
we're going to instrument an extra

294
00:13:06,410 --> 00:13:13,850
liveness bit for its register so for

295
00:13:09,590 --> 00:13:17,660
instance is 0 liveness so is 0 it's life

296
00:13:13,850 --> 00:13:18,770
if either access life or wise life ok

297
00:13:17,660 --> 00:13:22,430
and we're going to do the rest for the

298
00:13:18,770 --> 00:13:24,860
rest of the program and then remember

299
00:13:22,430 --> 00:13:26,719
Aquarians means that for any two runs of

300
00:13:24,860 --> 00:13:29,029
the programs the output needs to have

301
00:13:26,720 --> 00:13:30,080
the same liveness bit so we need two

302
00:13:29,029 --> 00:13:31,880
runs of the programs

303
00:13:30,080 --> 00:13:33,560
that means we need to make two two

304
00:13:31,880 --> 00:13:37,460
programs or two copies of the program

305
00:13:33,560 --> 00:13:38,869
and now since the outputs you need to

306
00:13:37,460 --> 00:13:41,660
have to save liveness bits we just have

307
00:13:38,870 --> 00:13:44,360
to show that out life in the left

308
00:13:41,660 --> 00:13:46,339
program is the same it's always the same

309
00:13:44,360 --> 00:13:48,500
as outline life in the right program and

310
00:13:46,339 --> 00:13:51,980
that's very easy that's just a that's

311
00:13:48,500 --> 00:13:54,980
just a simple assertion and we can use

312
00:13:51,980 --> 00:13:58,390
existing tools and verify as fast

313
00:13:54,980 --> 00:14:01,399
verifies to just check that okay

314
00:13:58,390 --> 00:14:03,620
so funny I'm going to tell you about our

315
00:14:01,399 --> 00:14:06,500
evaluation so you have implemented our

316
00:14:03,620 --> 00:14:09,290
tool our method and implemented in a

317
00:14:06,500 --> 00:14:12,020
tool called iodine it takes very long

318
00:14:09,290 --> 00:14:14,000
and a set of assumptions and then it

319
00:14:12,020 --> 00:14:17,360
proves an intermediate language

320
00:14:14,000 --> 00:14:20,420
representation so the idea is to to

321
00:14:17,360 --> 00:14:23,930
allow us to be modular and compile other

322
00:14:20,420 --> 00:14:25,579
things then very large and then we

323
00:14:23,930 --> 00:14:28,279
generate verification conditions that

324
00:14:25,580 --> 00:14:30,980
and then show that it's either constant

325
00:14:28,279 --> 00:14:33,050
time or we find a violation so

326
00:14:30,980 --> 00:14:34,580
importantly you don't have to supply the

327
00:14:33,050 --> 00:14:37,510
proofs by hand but actually our tool is

328
00:14:34,580 --> 00:14:42,709
going to find the proofs automatically

329
00:14:37,510 --> 00:14:44,660
okay so I want to answer three questions

330
00:14:42,709 --> 00:14:46,579
so what can we verify with iodine

331
00:14:44,660 --> 00:14:49,520
what's the annotation burden and how

332
00:14:46,580 --> 00:14:51,470
efficient is it so to see what we can

333
00:14:49,520 --> 00:14:54,350
verify we download some course from

334
00:14:51,470 --> 00:14:58,880
github and open course so we did two

335
00:14:54,350 --> 00:15:00,290
simple fps CPUs and we're able to show

336
00:14:58,880 --> 00:15:03,350
that under reasonable assumptions there

337
00:15:00,290 --> 00:15:05,300
constant time so you don't have to just

338
00:15:03,350 --> 00:15:07,700
verify the the whole CPU but you can

339
00:15:05,300 --> 00:15:11,859
also zoom in to just a part like Lu or

340
00:15:07,700 --> 00:15:16,610
fu and we also have two fps and an IOU

341
00:15:11,860 --> 00:15:17,810
so that the first Fu and the Lu we're

342
00:15:16,610 --> 00:15:21,560
able to show them constant time and the

343
00:15:17,810 --> 00:15:23,719
reasonable assumptions and the FPU has

344
00:15:21,560 --> 00:15:26,959
various fast pass and so it's it can

345
00:15:23,720 --> 00:15:28,700
never be constant time but what I want

346
00:15:26,959 --> 00:15:31,130
to say is that that's not necessarily a

347
00:15:28,700 --> 00:15:32,600
bad but maybe there's this so we just

348
00:15:31,130 --> 00:15:34,550
put random project off the internet so

349
00:15:32,600 --> 00:15:35,270
maybe these these people run writing

350
00:15:34,550 --> 00:15:39,859
this fu

351
00:15:35,270 --> 00:15:41,210
with constant time in mind okay so

352
00:15:39,860 --> 00:15:42,920
finally sometimes may you want to

353
00:15:41,210 --> 00:15:46,370
offload your computations to a cryptic

354
00:15:42,920 --> 00:15:50,240
or hmm so you'll be also a verified to

355
00:15:46,370 --> 00:15:53,030
cryptic or one share a shot 200 656 and

356
00:15:50,240 --> 00:15:56,210
one hours a core and so that RSA core

357
00:15:53,030 --> 00:16:00,980
has a time aside channel so it uses

358
00:15:56,210 --> 00:16:03,220
Montgomery multiplication okay so what's

359
00:16:00,980 --> 00:16:05,990
the annotation burden when using iodine

360
00:16:03,220 --> 00:16:08,600
so we don't prove constant time

361
00:16:05,990 --> 00:16:10,250
unconditionally but we prove it on the

362
00:16:08,600 --> 00:16:12,050
assumptions on the circuit and the two

363
00:16:10,250 --> 00:16:13,850
assumptions we make is that certain

364
00:16:12,050 --> 00:16:15,620
things are public so they're not

365
00:16:13,850 --> 00:16:17,450
influenced by secrets and that certain

366
00:16:15,620 --> 00:16:22,010
registers are being flushed on each

367
00:16:17,450 --> 00:16:25,010
context switch so for instance what is

368
00:16:22,010 --> 00:16:28,850
CPUs we assume that instructions are

369
00:16:25,010 --> 00:16:30,500
public so that means we don't branch on

370
00:16:28,850 --> 00:16:33,680
secrets that memory access patterns are

371
00:16:30,500 --> 00:16:34,970
public and reset speeds are public so

372
00:16:33,680 --> 00:16:37,699
these are the kinds of assumptions you

373
00:16:34,970 --> 00:16:39,230
get when you verify your your software

374
00:16:37,700 --> 00:16:40,910
with a constant time verification

375
00:16:39,230 --> 00:16:44,030
software - and then you can thread them

376
00:16:40,910 --> 00:16:46,510
through and use them to use our tool to

377
00:16:44,030 --> 00:16:48,860
get end-to-end guarantees so annotations

378
00:16:46,510 --> 00:16:52,069
most of them are flash annotations there

379
00:16:48,860 --> 00:16:54,680
are some public annotations there's a

380
00:16:52,070 --> 00:16:56,750
bunch of them and it's quite painful but

381
00:16:54,680 --> 00:16:58,339
actually since we redid this work we

382
00:16:56,750 --> 00:17:00,050
also were able to infer these

383
00:16:58,340 --> 00:17:01,210
annotations automatically so now you

384
00:17:00,050 --> 00:17:05,659
don't have to write them anymore

385
00:17:01,210 --> 00:17:08,600
so finally how efficient is iodine it's

386
00:17:05,660 --> 00:17:11,390
pretty fast so checking time is under 12

387
00:17:08,599 --> 00:17:13,819
seconds for all of them and so we hope

388
00:17:11,390 --> 00:17:16,100
we can skate it up so that's it so I

389
00:17:13,819 --> 00:17:18,139
presented a definition of constant time

390
00:17:16,099 --> 00:17:20,208
that works for hardware and a

391
00:17:18,140 --> 00:17:21,470
verification tool iodine and an

392
00:17:20,209 --> 00:17:25,970
evaluation of it

393
00:17:21,470 --> 00:17:31,330
and it's available under thanks

394
00:17:25,970 --> 00:17:35,929
[Applause]

395
00:17:31,330 --> 00:17:37,520
questions I have one did I understand

396
00:17:35,929 --> 00:17:40,640
that they're actually instructions now

397
00:17:37,520 --> 00:17:42,530
in modern CPUs that will do a rithmetic

398
00:17:40,640 --> 00:17:43,850
in constant time oh yeah

399
00:17:42,530 --> 00:17:45,470
I mean it makes sense they're trillion

400
00:17:43,850 --> 00:17:47,299
transistors and they might as well throw

401
00:17:45,470 --> 00:17:48,890
in a few more instructions well I didn't

402
00:17:47,299 --> 00:17:52,150
know that I mean it's been over 20 years

403
00:17:48,890 --> 00:17:54,500
since a Koecher attack it's about time

404
00:17:52,150 --> 00:17:56,750
if you haven't come on up to a

405
00:17:54,500 --> 00:18:00,260
microphone name an affiliation ask your

406
00:17:56,750 --> 00:18:02,870
question I gathered uzuki from Theodore

407
00:18:00,260 --> 00:18:05,660
instead I was wondering if you've looked

408
00:18:02,870 --> 00:18:07,428
at the information flow tracking there's

409
00:18:05,660 --> 00:18:10,669
work done and information flow tracking

410
00:18:07,429 --> 00:18:13,549
approach has a gate level or at register

411
00:18:10,669 --> 00:18:15,559
transfer level that also attempt to

412
00:18:13,549 --> 00:18:17,330
capture timing channels and so on but

413
00:18:15,559 --> 00:18:19,668
I'm not sure how does your work compare

414
00:18:17,330 --> 00:18:21,500
to them or have you compared your the

415
00:18:19,669 --> 00:18:24,950
time it takes to to do the actual

416
00:18:21,500 --> 00:18:27,980
verification okay so the question is how

417
00:18:24,950 --> 00:18:29,840
we compare to like if I understand

418
00:18:27,980 --> 00:18:31,220
correctly information for tracking at

419
00:18:29,840 --> 00:18:33,889
the gate level so for instance there's

420
00:18:31,220 --> 00:18:37,190
like a secretary lock which will wear

421
00:18:33,890 --> 00:18:40,010
you very well right you're they have a

422
00:18:37,190 --> 00:18:41,660
tied system that has security labels and

423
00:18:40,010 --> 00:18:44,960
so I guess the difference is that they

424
00:18:41,660 --> 00:18:47,690
more and their method is more of a it's

425
00:18:44,960 --> 00:18:48,919
more useful when you when when you built

426
00:18:47,690 --> 00:18:50,840
your software from use so you write

427
00:18:48,919 --> 00:18:53,169
everything in their formalism so our

428
00:18:50,840 --> 00:18:57,230
thing our focus is more taking existing

429
00:18:53,169 --> 00:18:58,910
project and then verifying the existing

430
00:18:57,230 --> 00:19:01,460
project finding assumptions a little bit

431
00:18:58,910 --> 00:19:02,690
it's correct and there's also other

432
00:19:01,460 --> 00:19:05,419
differences so for instance we don't

433
00:19:02,690 --> 00:19:07,850
enforce IFC and so we only care about

434
00:19:05,419 --> 00:19:09,919
timing at the clock level and they they

435
00:19:07,850 --> 00:19:14,000
do they enforce IFC and so I've see they

436
00:19:09,919 --> 00:19:16,180
get timing freedom okay thank you very

437
00:19:14,000 --> 00:19:19,400
much

438
00:19:16,180 --> 00:19:19,400
[Applause]

