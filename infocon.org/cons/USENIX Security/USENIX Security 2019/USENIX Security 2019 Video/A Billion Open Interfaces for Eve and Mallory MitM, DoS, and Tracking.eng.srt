1
00:00:10,610 --> 00:00:14,660
all right hello and welcome everyone to

2
00:00:12,980 --> 00:00:16,850
my talk on a billion open interfaces for

3
00:00:14,660 --> 00:00:19,160
Eva Mallory and today I'm going to

4
00:00:16,850 --> 00:00:20,900
present to you how the security and

5
00:00:19,160 --> 00:00:21,710
privacy of Apple device users can be

6
00:00:20,900 --> 00:00:23,750
compromised

7
00:00:21,710 --> 00:00:26,840
through several different wireless

8
00:00:23,750 --> 00:00:29,060
attacks we started this project to open

9
00:00:26,840 --> 00:00:31,698
up Apple's wireless ecosystem which

10
00:00:29,060 --> 00:00:34,420
consists of more than 1.4 billion

11
00:00:31,699 --> 00:00:36,830
devices including iPhone and Mac and

12
00:00:34,420 --> 00:00:38,989
most of these wireless services such as

13
00:00:36,830 --> 00:00:42,530
air drop out unlock and handle for

14
00:00:38,989 --> 00:00:44,269
example use the proprietary Wi-Fi based

15
00:00:42,530 --> 00:00:46,699
link layer called Apple Wireless diode

16
00:00:44,269 --> 00:00:50,540
link in combination with Bluetooth le

17
00:00:46,699 --> 00:00:52,309
and in the first step we reverse

18
00:00:50,540 --> 00:00:56,589
engineered two of the involved protocols

19
00:00:52,309 --> 00:00:59,209
in particular a wdl and airdrop and

20
00:00:56,589 --> 00:01:02,720
reimplemented them and make the code

21
00:00:59,210 --> 00:01:04,220
available on github based on these

22
00:01:02,720 --> 00:01:05,449
results we finally conducted a

23
00:01:04,220 --> 00:01:07,689
comprehensive security and privacy

24
00:01:05,449 --> 00:01:09,320
analysis where we found several

25
00:01:07,689 --> 00:01:12,199
vulnerabilities that allowed us to

26
00:01:09,320 --> 00:01:14,360
successfully perform user tracking a

27
00:01:12,200 --> 00:01:17,510
denial of service attacks and finally a

28
00:01:14,360 --> 00:01:19,490
man-in-the-middle attack on airdrop we

29
00:01:17,510 --> 00:01:21,410
proposed mitigations for all

30
00:01:19,490 --> 00:01:28,070
vulnerabilities and Apple has been

31
00:01:21,410 --> 00:01:29,690
fixing those in the last updates alright

32
00:01:28,070 --> 00:01:31,160
now I want to give an overview of the

33
00:01:29,690 --> 00:01:35,270
vulnerabilities and attacks that we

34
00:01:31,160 --> 00:01:38,750
discovered first we were able to mount a

35
00:01:35,270 --> 00:01:41,179
user tracking attack as a wjl leaks

36
00:01:38,750 --> 00:01:44,320
for example the Wi-Fi chips real MAC

37
00:01:41,180 --> 00:01:48,890
address and also the its hostname which

38
00:01:44,320 --> 00:01:52,149
in the default case also contains sure

39
00:01:48,890 --> 00:01:55,760
if you can see it okay

40
00:01:52,150 --> 00:01:57,860
the user's name who made the attack

41
00:01:55,760 --> 00:02:00,830
practical using a remote activation

42
00:01:57,860 --> 00:02:05,810
attack which exploits the discovery

43
00:02:00,830 --> 00:02:09,500
mechanism of to tooth le and enables us

44
00:02:05,810 --> 00:02:13,819
to turn on awl interfaces on nearby

45
00:02:09,500 --> 00:02:15,409
devices using the same activation attack

46
00:02:13,819 --> 00:02:17,988
we were able to export to implementation

47
00:02:15,409 --> 00:02:19,850
box in the Wi-Fi driver which allowed us

48
00:02:17,989 --> 00:02:24,220
to wirelessly crash devices without any

49
00:02:19,850 --> 00:02:26,859
user interaction in addition

50
00:02:24,220 --> 00:02:30,940
we discovered a protocol level denial of

51
00:02:26,860 --> 00:02:34,050
service attack on a wdl which breaks

52
00:02:30,940 --> 00:02:36,670
communication by adi synchronization and

53
00:02:34,050 --> 00:02:39,190
then finally with such a denial service

54
00:02:36,670 --> 00:02:41,559
attack in place we were able to mountain

55
00:02:39,190 --> 00:02:43,090
a man in the middle attack on a drop due

56
00:02:41,560 --> 00:02:46,560
to time constraints today I'm only going

57
00:02:43,090 --> 00:02:49,210
to focus on well essentially two of them

58
00:02:46,560 --> 00:02:50,920
but before I can go into detail about

59
00:02:49,210 --> 00:02:52,560
any of those attacks I need to explain

60
00:02:50,920 --> 00:02:55,089
the full stack operation of the airdrop

61
00:02:52,560 --> 00:02:57,370
starting from the bluetooth discovery

62
00:02:55,090 --> 00:03:00,880
mechanism to the HTTP based data

63
00:02:57,370 --> 00:03:02,710
transmission so airdrop requires two

64
00:03:00,880 --> 00:03:04,960
devices that are within communication

65
00:03:02,710 --> 00:03:07,150
range of each other and the initiator

66
00:03:04,960 --> 00:03:09,880
which I will call Jane throughout this

67
00:03:07,150 --> 00:03:12,130
talk starts the a drop discovery

68
00:03:09,880 --> 00:03:14,650
mechanism to detect nearby a drop

69
00:03:12,130 --> 00:03:18,220
receivers simply by opening the sharing

70
00:03:14,650 --> 00:03:19,930
pane on her phone she computes in the

71
00:03:18,220 --> 00:03:22,300
first step she computes hashes of her

72
00:03:19,930 --> 00:03:24,190
own contact identifiers in particular

73
00:03:22,300 --> 00:03:27,090
the Apple ID and associated phone

74
00:03:24,190 --> 00:03:29,859
numbers and also other email addresses

75
00:03:27,090 --> 00:03:31,810
she then starts sending out ble

76
00:03:29,860 --> 00:03:35,350
advertisements which include the first

77
00:03:31,810 --> 00:03:36,940
two bytes of those hashes and on the

78
00:03:35,350 --> 00:03:39,790
other end the add row been able to

79
00:03:36,940 --> 00:03:42,430
receive a device of which it will call

80
00:03:39,790 --> 00:03:44,260
John throughout this talk regularly

81
00:03:42,430 --> 00:03:47,500
perform scans for those advertisements

82
00:03:44,260 --> 00:03:48,940
and if John receives in the

83
00:03:47,500 --> 00:03:51,100
advertisement and is set to be

84
00:03:48,940 --> 00:03:54,900
discoverable by everyone it will

85
00:03:51,100 --> 00:04:00,549
immediately turn on it's a wdl interface

86
00:03:54,900 --> 00:04:02,470
if John on the other hand makes itself

87
00:04:00,550 --> 00:04:06,760
discoverable by contacts only it will

88
00:04:02,470 --> 00:04:11,040
first check whether any of the hashes

89
00:04:06,760 --> 00:04:13,540
matches an entry in its own address book

90
00:04:11,040 --> 00:04:14,709
well now both devices have turned on the

91
00:04:13,540 --> 00:04:18,548
Wi-Fi interface and conduct

92
00:04:14,709 --> 00:04:20,649
synchronization procedure of a wdl which

93
00:04:18,548 --> 00:04:24,669
in effect creates a wireless direct link

94
00:04:20,649 --> 00:04:26,770
between the two devices I'm skipping the

95
00:04:24,669 --> 00:04:27,969
complex details of this protocol in this

96
00:04:26,770 --> 00:04:28,750
talk but if you want to know more about

97
00:04:27,970 --> 00:04:31,090
it

98
00:04:28,750 --> 00:04:34,050
we've refer to our previous mobile comm

99
00:04:31,090 --> 00:04:37,299
paper that were presented last year and

100
00:04:34,050 --> 00:04:38,110
now all subsequent communication of a

101
00:04:37,300 --> 00:04:42,400
drop will take

102
00:04:38,110 --> 00:04:44,680
over this interface so next the

103
00:04:42,400 --> 00:04:48,270
initiator starts discovery wire Bonjour

104
00:04:44,680 --> 00:04:50,770
and asking for the a drop service and

105
00:04:48,270 --> 00:04:54,810
will receive responses from all devices

106
00:04:50,770 --> 00:04:57,909
in proximity that have a drop enabled

107
00:04:54,810 --> 00:04:59,740
now for every received response that the

108
00:04:57,909 --> 00:05:02,319
initiator will then attempt an

109
00:04:59,740 --> 00:05:04,240
authentication handshake and in this

110
00:05:02,319 --> 00:05:06,039
step Jane and John want to find out

111
00:05:04,240 --> 00:05:09,159
whether or not the other party is

112
00:05:06,039 --> 00:05:12,580
authentic that means whether or not they

113
00:05:09,159 --> 00:05:12,849
are mutual contacts and to achieve this

114
00:05:12,580 --> 00:05:14,710
goal

115
00:05:12,849 --> 00:05:17,500
Jane establish the TLS connection with

116
00:05:14,710 --> 00:05:19,930
John using client service certificates

117
00:05:17,500 --> 00:05:22,719
and the common name of such a

118
00:05:19,930 --> 00:05:24,629
certificate contains a random UUID this

119
00:05:22,719 --> 00:05:27,580
will become important later

120
00:05:24,629 --> 00:05:31,810
then why the TLS connection Jane sends a

121
00:05:27,580 --> 00:05:35,109
discover request via HTTP and this

122
00:05:31,810 --> 00:05:38,560
request contains the sender's record

123
00:05:35,110 --> 00:05:42,550
data what is the record data so the

124
00:05:38,560 --> 00:05:44,680
record set data itself consists of the

125
00:05:42,550 --> 00:05:48,099
UUID that is also included in the

126
00:05:44,680 --> 00:05:49,659
certificate and also contains a list of

127
00:05:48,099 --> 00:05:52,740
the hash to contact identifiers that

128
00:05:49,659 --> 00:05:55,690
we've seen before but this time in full

129
00:05:52,740 --> 00:05:58,479
all right now John will perform a number

130
00:05:55,690 --> 00:06:02,440
of checks to verify that the discovery

131
00:05:58,479 --> 00:06:05,430
request is valid so first he will verify

132
00:06:02,440 --> 00:06:09,759
that the signature of the record data

133
00:06:05,430 --> 00:06:14,560
which is appended to the UID and the

134
00:06:09,759 --> 00:06:16,810
hashes well is valid second he checks

135
00:06:14,560 --> 00:06:19,120
that the UUID from the TLS certificate

136
00:06:16,810 --> 00:06:21,639
is actually the same as the one included

137
00:06:19,120 --> 00:06:24,969
in the record data which prevents replay

138
00:06:21,639 --> 00:06:27,190
attacks and finally he will test if any

139
00:06:24,969 --> 00:06:29,800
of jane's hash contact identifiers in

140
00:06:27,190 --> 00:06:32,919
the record data matches the contact

141
00:06:29,800 --> 00:06:35,979
entry in his own address book and in

142
00:06:32,919 --> 00:06:37,770
case all of those checks succeed john

143
00:06:35,979 --> 00:06:42,360
will send an appropriate response

144
00:06:37,770 --> 00:06:42,359
including his own record data to jane

145
00:06:43,020 --> 00:06:48,818
jane then contacts the same checks again

146
00:06:45,520 --> 00:06:50,709
as john before and if they all pass then

147
00:06:48,819 --> 00:06:52,590
John Stehr receive icon appears in the

148
00:06:50,709 --> 00:06:54,970
user interface

149
00:06:52,590 --> 00:06:57,900
now the actual data transfer can take

150
00:06:54,970 --> 00:07:01,630
place after selecting the receiver icon

151
00:06:57,900 --> 00:07:03,400
Jayne sends an ask request to John which

152
00:07:01,630 --> 00:07:05,530
includes a file preview which is the

153
00:07:03,400 --> 00:07:06,820
play to display to John to make the

154
00:07:05,530 --> 00:07:09,849
decision whether or not he wants to

155
00:07:06,820 --> 00:07:13,390
accept the file and if he does again he

156
00:07:09,850 --> 00:07:16,000
will send a proper response upon which

157
00:07:13,390 --> 00:07:18,310
Jayne then starts transmitting the

158
00:07:16,000 --> 00:07:21,250
actual file in an upload request after

159
00:07:18,310 --> 00:07:23,860
the complete file is transferred John

160
00:07:21,250 --> 00:07:26,350
sends again another 200 ok message and

161
00:07:23,860 --> 00:07:30,790
the transaction is complete so far so

162
00:07:26,350 --> 00:07:32,590
good now I want to go into details of

163
00:07:30,790 --> 00:07:34,030
some of the attacks and I'm going to

164
00:07:32,590 --> 00:07:37,630
present to you first

165
00:07:34,030 --> 00:07:40,000
the user tracking attack so the key

166
00:07:37,630 --> 00:07:42,610
problem that we found was that Awl

167
00:07:40,000 --> 00:07:44,290
broadcasts unencrypted control frames

168
00:07:42,610 --> 00:07:46,810
that contain identifiable information

169
00:07:44,290 --> 00:07:49,690
such as the MAC address of the currently

170
00:07:46,810 --> 00:07:51,790
connected access point and also the real

171
00:07:49,690 --> 00:07:54,010
MAC address of the Wi-Fi card which

172
00:07:51,790 --> 00:07:57,760
effectively defeats Mac randomization

173
00:07:54,010 --> 00:08:01,320
which they actually deployed for the

174
00:07:57,760 --> 00:08:03,880
source address field and the nisshin

175
00:08:01,320 --> 00:08:06,070
there is a protocol field that contains

176
00:08:03,880 --> 00:08:08,050
the host name of the device and this

177
00:08:06,070 --> 00:08:13,330
typically contains actually the user's

178
00:08:08,050 --> 00:08:15,100
name ok so this is a problem but to make

179
00:08:13,330 --> 00:08:16,080
this practical and to allow for tracking

180
00:08:15,100 --> 00:08:18,760
via a dfdl

181
00:08:16,080 --> 00:08:22,419
an attacker needs to activate the

182
00:08:18,760 --> 00:08:24,250
interfaces of nearby devices as the

183
00:08:22,420 --> 00:08:25,990
interface is usually broadcasting

184
00:08:24,250 --> 00:08:28,480
there's only broadcasting action frames

185
00:08:25,990 --> 00:08:30,340
when an application is explicitly

186
00:08:28,480 --> 00:08:34,360
requested it such as a prop for example

187
00:08:30,340 --> 00:08:35,829
and to do this we exploit a drops ble

188
00:08:34,360 --> 00:08:38,740
discovery mechanism by using a

189
00:08:35,830 --> 00:08:41,470
brute-force attack and as recall each

190
00:08:38,740 --> 00:08:43,810
frame of those ble advertisements can

191
00:08:41,470 --> 00:08:46,540
contain up to four contact hashes with

192
00:08:43,809 --> 00:08:48,160
the lengths of just two bytes and now if

193
00:08:46,540 --> 00:08:49,510
we iterate through the search space and

194
00:08:48,160 --> 00:08:52,270
send out different via league

195
00:08:49,510 --> 00:08:55,710
advertisements quickly we achieve a

196
00:08:52,270 --> 00:08:58,329
wraparound time of about 30 seconds and

197
00:08:55,710 --> 00:09:02,170
well but for this we need to have

198
00:08:58,330 --> 00:09:05,050
low-level access to the ble stack so we

199
00:09:02,170 --> 00:09:07,300
implemented it on a gbb see micro bit

200
00:09:05,050 --> 00:09:17,680
which features the Nordic Blues of the

201
00:09:07,300 --> 00:09:19,689
chip alright but well since we don't we

202
00:09:17,680 --> 00:09:21,459
typically an address book has more than

203
00:09:19,690 --> 00:09:33,130
one contact in it right

204
00:09:21,460 --> 00:09:37,210
so in in practice the response times are

205
00:09:33,130 --> 00:09:39,220
much much shorter and so well in

206
00:09:37,210 --> 00:09:43,330
practice we get about like one to ten

207
00:09:39,220 --> 00:09:44,680
seconds of response times which means

208
00:09:43,330 --> 00:09:48,250
that an attacker does this in forks

209
00:09:44,680 --> 00:09:50,410
enmity of device need own needs only a

210
00:09:48,250 --> 00:09:55,530
couple of seconds to start tracking in a

211
00:09:50,410 --> 00:09:58,120
by device okay we ran and experimentally

212
00:09:55,530 --> 00:09:59,680
vulnerability analysis using this attack

213
00:09:58,120 --> 00:10:01,300
in different environments and found that

214
00:09:59,680 --> 00:10:06,910
we can detect about twice as many Apple

215
00:10:01,300 --> 00:10:09,160
devices as before and in addition we

216
00:10:06,910 --> 00:10:11,680
also evaluated in how many cases the

217
00:10:09,160 --> 00:10:14,620
device host name that was transmitted in

218
00:10:11,680 --> 00:10:16,930
these frames actually contained a

219
00:10:14,620 --> 00:10:20,230
person's name and for this we compared

220
00:10:16,930 --> 00:10:22,390
string segments from the host name with

221
00:10:20,230 --> 00:10:25,420
two US databases forgiven and family

222
00:10:22,390 --> 00:10:28,300
names and found that in more than 75% of

223
00:10:25,420 --> 00:10:31,209
the cases the name was included and this

224
00:10:28,300 --> 00:10:33,069
matches the results of the of a user

225
00:10:31,210 --> 00:10:37,090
study that we also conducted in parallel

226
00:10:33,070 --> 00:10:40,180
to this and there 68% of the

227
00:10:37,090 --> 00:10:42,040
participants indicated that there did

228
00:10:40,180 --> 00:10:46,750
not device name actually included the

229
00:10:42,040 --> 00:10:49,569
real name now what can we do to protect

230
00:10:46,750 --> 00:10:51,970
against this in the paper we proposed to

231
00:10:49,570 --> 00:10:53,590
simply remove the privacy compromising

232
00:10:51,970 --> 00:10:55,510
fields from the broadcast frames and

233
00:10:53,590 --> 00:10:57,670
this is exactly what Apple has been

234
00:10:55,510 --> 00:10:58,480
doing in particular they removed the

235
00:10:57,670 --> 00:11:00,610
bssid

236
00:10:58,480 --> 00:11:02,110
as well after what as well as the Wi-Fi

237
00:11:00,610 --> 00:11:06,280
cards real MAC address from these frames

238
00:11:02,110 --> 00:11:08,860
and in addition we have found that Apple

239
00:11:06,280 --> 00:11:10,839
seems to have implemented the hostname

240
00:11:08,860 --> 00:11:14,590
randomization mechanism that we also

241
00:11:10,840 --> 00:11:18,280
proposed in the paper and we saw that in

242
00:11:14,590 --> 00:11:18,819
the current iOS 13 better so now instead

243
00:11:18,280 --> 00:11:21,419
of an A

244
00:11:18,819 --> 00:11:25,660
the hosting consists of a random UUID

245
00:11:21,419 --> 00:11:27,369
that's pretty cool okay so alright that

246
00:11:25,660 --> 00:11:29,799
was user tracking let's talk about the

247
00:11:27,369 --> 00:11:32,399
man in the middle attack you remember

248
00:11:29,799 --> 00:11:35,199
the a drop authentication mechanism

249
00:11:32,399 --> 00:11:37,929
recall that the receiver icon of John is

250
00:11:35,199 --> 00:11:40,748
displayed upon receiving a valid

251
00:11:37,929 --> 00:11:42,459
response from John and now I want to

252
00:11:40,749 --> 00:11:45,249
move your attention to receive a symbol

253
00:11:42,459 --> 00:11:47,618
in the sharing pane so in the best case

254
00:11:45,249 --> 00:11:50,229
Jane and John are contexts of each other

255
00:11:47,619 --> 00:11:52,539
and Jane has a contact picture of John

256
00:11:50,229 --> 00:11:55,929
in her address book so and if the

257
00:11:52,539 --> 00:11:58,589
authentication procedure succeeds that

258
00:11:55,929 --> 00:12:01,149
picture will actually be displayed and

259
00:11:58,589 --> 00:12:04,359
this gives Jane a hint that the

260
00:12:01,149 --> 00:12:07,809
connection is in fact authentic however

261
00:12:04,359 --> 00:12:10,539
we found by a user study that only 27%

262
00:12:07,809 --> 00:12:13,238
of apple device users regularly tag

263
00:12:10,539 --> 00:12:17,679
their address book context with pictures

264
00:12:13,239 --> 00:12:20,109
so now the question is what if Jane does

265
00:12:17,679 --> 00:12:22,019
not have a contact photo of John or what

266
00:12:20,109 --> 00:12:26,049
if John is not not a contact of Jane and

267
00:12:22,019 --> 00:12:31,989
in both cases a gray shade replacement

268
00:12:26,049 --> 00:12:34,659
symbol is displayed and here the problem

269
00:12:31,989 --> 00:12:36,519
is that an untrained user will not be

270
00:12:34,659 --> 00:12:38,619
able to really differentiate between the

271
00:12:36,519 --> 00:12:40,839
two because we also didn't find any

272
00:12:38,619 --> 00:12:43,809
Apple documentation explicitly stating

273
00:12:40,839 --> 00:12:46,389
the difference between displaying the

274
00:12:43,809 --> 00:12:49,449
initials which constitute an authentic

275
00:12:46,389 --> 00:12:51,850
contact and just the silhouette symbol

276
00:12:49,449 --> 00:12:55,149
which will be like an unauthentic peer

277
00:12:51,850 --> 00:12:57,009
and for the upcoming man and middle

278
00:12:55,149 --> 00:13:00,399
attack we'll explore exactly that UI

279
00:12:57,009 --> 00:13:02,709
witness now let's get back to the

280
00:13:00,399 --> 00:13:04,509
authentication as before

281
00:13:02,709 --> 00:13:07,209
Jane sends the discover request to John

282
00:13:04,509 --> 00:13:09,459
but this time an attack is also within

283
00:13:07,209 --> 00:13:11,319
communication range and the goal of the

284
00:13:09,459 --> 00:13:13,959
attacker is to prevent that the

285
00:13:11,319 --> 00:13:16,899
handshake ever completes successfully

286
00:13:13,959 --> 00:13:18,878
and therefore we mount a denial of

287
00:13:16,899 --> 00:13:21,179
service attack to prevent direct

288
00:13:18,879 --> 00:13:24,039
communication between the two targets in

289
00:13:21,179 --> 00:13:26,228
this particular case we can use a TCP

290
00:13:24,039 --> 00:13:29,559
rosette attack to terminate the

291
00:13:26,229 --> 00:13:31,359
underlying TCP connection and the Monte

292
00:13:29,559 --> 00:13:32,589
attack we use our own implementation of

293
00:13:31,359 --> 00:13:35,500
a wdl to be able

294
00:13:32,590 --> 00:13:37,150
two over here TCP connections between

295
00:13:35,500 --> 00:13:42,340
Jane and John and to inject around

296
00:13:37,150 --> 00:13:45,160
messages and because the TCP Rosetta

297
00:13:42,340 --> 00:13:47,410
Tech prevents John from ever responding

298
00:13:45,160 --> 00:13:49,780
to Jane directly Jones I can never

299
00:13:47,410 --> 00:13:51,640
appears in a sharing pane so now the

300
00:13:49,780 --> 00:13:53,800
attacker is actually in a man in middle

301
00:13:51,640 --> 00:13:58,569
position because they are not able to

302
00:13:53,800 --> 00:14:00,280
discover each other and now what the

303
00:13:58,570 --> 00:14:03,220
attacker will try to do is find out

304
00:14:00,280 --> 00:14:03,790
whether John would accept files from

305
00:14:03,220 --> 00:14:06,820
himself

306
00:14:03,790 --> 00:14:09,520
and so that means whether John is

307
00:14:06,820 --> 00:14:11,710
discoverable by everyone because

308
00:14:09,520 --> 00:14:14,949
otherwise he will just reject any file

309
00:14:11,710 --> 00:14:17,640
transmissions and we can do this by

310
00:14:14,950 --> 00:14:20,500
periodically probing John probing John

311
00:14:17,640 --> 00:14:22,930
using our own discovery requests and

312
00:14:20,500 --> 00:14:26,110
John will indicate that he is

313
00:14:22,930 --> 00:14:27,670
discoverable by everyone or not by not

314
00:14:26,110 --> 00:14:32,290
including or by including his device

315
00:14:27,670 --> 00:14:34,329
name in the response and while the

316
00:14:32,290 --> 00:14:37,930
ongoing denial service attack might

317
00:14:34,330 --> 00:14:41,440
actually force John at some point to try

318
00:14:37,930 --> 00:14:43,989
a different setting and well in that

319
00:14:41,440 --> 00:14:47,500
case John will give a positive response

320
00:14:43,990 --> 00:14:49,540
and the attacker will then spoof John's

321
00:14:47,500 --> 00:14:51,670
identity and immediately start

322
00:14:49,540 --> 00:14:54,849
advertising in a drip service via

323
00:14:51,670 --> 00:14:57,579
Bonjour and since Jane still has the

324
00:14:54,850 --> 00:15:00,940
sharing in open she continuously scans

325
00:14:57,580 --> 00:15:02,410
for those at robot retirements and so

326
00:15:00,940 --> 00:15:05,560
she will eventually attempt to

327
00:15:02,410 --> 00:15:07,300
authenticate to our attacker so she

328
00:15:05,560 --> 00:15:09,280
sends his discovery request to which the

329
00:15:07,300 --> 00:15:12,310
attacker helpfully replies with John as

330
00:15:09,280 --> 00:15:14,530
the computer name and finally the

331
00:15:12,310 --> 00:15:19,239
attackers spoofed receiver icon appears

332
00:15:14,530 --> 00:15:20,140
in the sharing pane all right so the

333
00:15:19,240 --> 00:15:22,450
rest of the attack is rather

334
00:15:20,140 --> 00:15:24,610
straightforward first the attacker

335
00:15:22,450 --> 00:15:27,670
forwards the ask requests and the

336
00:15:24,610 --> 00:15:29,350
responses as is and to keep the original

337
00:15:27,670 --> 00:15:33,250
thumbnail in place and make the

338
00:15:29,350 --> 00:15:34,510
transmission request seem legit and the

339
00:15:33,250 --> 00:15:36,940
second step however the attacker

340
00:15:34,510 --> 00:15:40,270
replaces the original upload file with

341
00:15:36,940 --> 00:15:42,690
its own and this way an attacker is able

342
00:15:40,270 --> 00:15:46,949
to send a Polish possibly malicious file

343
00:15:42,690 --> 00:15:46,950
or link the receiver

344
00:15:47,690 --> 00:15:56,300
okay so let's talk about mitigation also

345
00:15:52,610 --> 00:15:59,170
here in the new iOS 13 better we've seen

346
00:15:56,300 --> 00:16:01,699
that Apple reworked the sharing pane and

347
00:15:59,170 --> 00:16:04,130
now with the new design it seems to be

348
00:16:01,700 --> 00:16:06,050
what's much easier to distinguish

349
00:16:04,130 --> 00:16:08,900
between authentic contacts your own

350
00:16:06,050 --> 00:16:13,969
devices and other unauthentic other

351
00:16:08,900 --> 00:16:17,390
devices all right let me summarize our

352
00:16:13,970 --> 00:16:19,850
work so first we reverse engineered both

353
00:16:17,390 --> 00:16:22,340
a drop and a WL implement entered our

354
00:16:19,850 --> 00:16:25,670
own versions of them and may have made

355
00:16:22,340 --> 00:16:27,620
them available on github and there's

356
00:16:25,670 --> 00:16:29,240
also a small how-to forgetting for

357
00:16:27,620 --> 00:16:32,180
example a drop running on the Raspberry

358
00:16:29,240 --> 00:16:34,130
Pi if you're interested and it seems

359
00:16:32,180 --> 00:16:36,500
that the code has already found its way

360
00:16:34,130 --> 00:16:38,750
into the security community as it has

361
00:16:36,500 --> 00:16:42,500
been reported to be the newest during

362
00:16:38,750 --> 00:16:45,140
blackhat last week which you find pretty

363
00:16:42,500 --> 00:16:46,790
cool so our vulnerability disclosures

364
00:16:45,140 --> 00:16:49,580
also resulted in several fixes from

365
00:16:46,790 --> 00:16:52,610
Apple and we received several CV numbers

366
00:16:49,580 --> 00:16:56,750
for it with possibly more to come in the

367
00:16:52,610 --> 00:16:58,220
next major OS releases and finally we

368
00:16:56,750 --> 00:17:00,230
will direct our efforts towards other

369
00:16:58,220 --> 00:17:02,840
services in Apple's Wireless ecosystem

370
00:17:00,230 --> 00:17:06,260
such as handoff out on work and so on

371
00:17:02,840 --> 00:17:09,079
and we're excited to review a wdl

372
00:17:06,260 --> 00:17:10,910
standardized successor which is called

373
00:17:09,079 --> 00:17:15,379
neighbor awareness networking which is

374
00:17:10,910 --> 00:17:18,200
already available on Android and we

375
00:17:15,380 --> 00:17:20,240
think that this will also likely come to

376
00:17:18,200 --> 00:17:22,910
Apple's operating system in the near

377
00:17:20,240 --> 00:17:24,890
future and with this I thank you and

378
00:17:22,910 --> 00:17:27,510
will happily try to F answer any

379
00:17:24,890 --> 00:17:33,529
questions that you might have

380
00:17:27,510 --> 00:17:43,649
[Applause]

381
00:17:33,529 --> 00:17:45,299
questions for our speaker hi really cool

382
00:17:43,649 --> 00:17:47,879
stuff here your demonstrate I'm

383
00:17:45,299 --> 00:17:49,649
wondering how do you know that the how

384
00:17:47,880 --> 00:17:52,769
do you verify that your implementation

385
00:17:49,649 --> 00:17:56,219
of these closed proprietary protocols

386
00:17:52,769 --> 00:17:57,899
actually matches their protocols well we

387
00:17:56,220 --> 00:18:01,590
have implemented it and it works with

388
00:17:57,899 --> 00:18:01,949
actual devices if that's what you're

389
00:18:01,590 --> 00:18:12,689
asking

390
00:18:01,950 --> 00:18:14,820
yeah other questions for our speaker so

391
00:18:12,690 --> 00:18:17,250
I do you have a question while our next

392
00:18:14,820 --> 00:18:21,178
speaker comes forward to set up I was

393
00:18:17,250 --> 00:18:22,860
wondering so you've got four CVEs and

394
00:18:21,179 --> 00:18:24,750
possibly many more to come

395
00:18:22,860 --> 00:18:27,449
it looks like many well maybe not but

396
00:18:24,750 --> 00:18:28,700
yeah maybe more I don't know I something

397
00:18:27,450 --> 00:18:30,720
I'm curious with most of my

398
00:18:28,700 --> 00:18:33,389
vulnerability disclosures come in the

399
00:18:30,720 --> 00:18:34,889
context of more traditionally deployed

400
00:18:33,389 --> 00:18:36,809
software not something like a wireless

401
00:18:34,889 --> 00:18:38,969
stack I was wondering if you had any

402
00:18:36,809 --> 00:18:41,269
insights as to how the process might be

403
00:18:38,970 --> 00:18:46,440
different in that case as opposed to

404
00:18:41,269 --> 00:18:49,379
maybe other domains so can you just

405
00:18:46,440 --> 00:18:51,720
repeat the question I'm not sure so how

406
00:18:49,379 --> 00:18:53,789
is how is the how is the vulnerability

407
00:18:51,720 --> 00:18:55,799
disclosure process the vulnerability

408
00:18:53,789 --> 00:18:57,840
disclosure process well I guess it's

409
00:18:55,799 --> 00:18:59,908
probably the same it was my first

410
00:18:57,840 --> 00:19:03,870
vulnerability to storage so I don't have

411
00:18:59,909 --> 00:19:05,850
much experience but well Apple has a

412
00:19:03,870 --> 00:19:08,908
product security team that you can count

413
00:19:05,850 --> 00:19:11,250
contact by email and well you sent them

414
00:19:08,909 --> 00:19:15,919
essentially the paper and what you found

415
00:19:11,250 --> 00:19:19,399
and then you get feedback on it so great

416
00:19:15,919 --> 00:19:21,460
let's think our speaker one more time

417
00:19:19,399 --> 00:19:21,459
you

