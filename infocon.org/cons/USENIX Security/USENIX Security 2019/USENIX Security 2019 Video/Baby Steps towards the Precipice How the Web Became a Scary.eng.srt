1
00:00:11,760 --> 00:00:18,870
thank you very much welcome to the talk

2
00:00:14,730 --> 00:00:21,360
if you found this session by reading the

3
00:00:18,870 --> 00:00:23,520
online program welcome if you found it

4
00:00:21,360 --> 00:00:25,230
by looking at the printed program a

5
00:00:23,520 --> 00:00:26,970
double welcome because the printed

6
00:00:25,230 --> 00:00:30,029
program only has about a quarter of the

7
00:00:26,970 --> 00:00:33,300
abstract apparently new lines can foil

8
00:00:30,029 --> 00:00:35,220
us even in 2019 so it was cut off but

9
00:00:33,300 --> 00:00:36,930
making decisions with incomplete

10
00:00:35,220 --> 00:00:41,010
information is a very valid and useful

11
00:00:36,930 --> 00:00:45,660
skill these days so congratulations all

12
00:00:41,010 --> 00:00:47,968
right so I recently turned 35 and at my

13
00:00:45,660 --> 00:00:49,890
age when you have a birthday you don't

14
00:00:47,969 --> 00:00:51,780
really celebrate it as much as reflected

15
00:00:49,890 --> 00:00:54,660
or reflects on some things that happened

16
00:00:51,780 --> 00:00:56,850
earlier in your life and what I realized

17
00:00:54,660 --> 00:00:59,218
during that process was that I have been

18
00:00:56,850 --> 00:01:03,030
using the web for about two-thirds of my

19
00:00:59,219 --> 00:01:05,280
life I and I know that notice exactly

20
00:01:03,030 --> 00:01:09,270
because as a present for my 12th

21
00:01:05,280 --> 00:01:12,570
birthday my parents bought 28.8 cable

22
00:01:09,270 --> 00:01:15,149
modem this was back in Poland and we

23
00:01:12,570 --> 00:01:18,089
connected to to the Internet to the web

24
00:01:15,150 --> 00:01:21,930
from home from our PC for the very first

25
00:01:18,090 --> 00:01:23,070
time and that was you know the we had to

26
00:01:21,930 --> 00:01:24,600
call Warsaw

27
00:01:23,070 --> 00:01:26,729
there was only one dial-up line in

28
00:01:24,600 --> 00:01:28,919
Poland at the time it lasted about an

29
00:01:26,729 --> 00:01:31,200
hour and we paid I think about

30
00:01:28,920 --> 00:01:33,869
twenty-five dollars for that one hour

31
00:01:31,200 --> 00:01:36,600
called that was about ten percent of the

32
00:01:33,869 --> 00:01:38,640
average monthly wage in Poland so we

33
00:01:36,600 --> 00:01:42,329
didn't do it as much after we found out

34
00:01:38,640 --> 00:01:43,710
how much it cost but my father was and

35
00:01:42,329 --> 00:01:47,309
still is a university professor in

36
00:01:43,710 --> 00:01:51,059
Poland so I could use his his office and

37
00:01:47,310 --> 00:01:52,979
and use the web more after that and it's

38
00:01:51,060 --> 00:01:54,750
strange how our memory works I still

39
00:01:52,979 --> 00:01:57,329
remember I haven't used that dial-up

40
00:01:54,750 --> 00:01:59,969
number in 20 years but I still remember

41
00:01:57,329 --> 00:02:02,070
that that phone number and what I also

42
00:01:59,969 --> 00:02:04,589
remember was the first website that I

43
00:02:02,070 --> 00:02:06,719
visited that I recall visiting at least

44
00:02:04,590 --> 00:02:08,070
I would have gone to like house or

45
00:02:06,719 --> 00:02:11,100
excite I don't remember the search

46
00:02:08,070 --> 00:02:12,660
engine actually but I remember the the

47
00:02:11,100 --> 00:02:14,549
band that I was interested in at the

48
00:02:12,660 --> 00:02:16,020
time and this is a Swedish pop band and

49
00:02:14,550 --> 00:02:18,540
it's super embarrassing it's terrible

50
00:02:16,020 --> 00:02:21,180
music it hasn't aged very well neither

51
00:02:18,540 --> 00:02:23,819
the name nor the the kind of music has

52
00:02:21,180 --> 00:02:24,670
aged very well but you know for 12 year

53
00:02:23,819 --> 00:02:26,890
old our

54
00:02:24,670 --> 00:02:29,530
twelve-year-old Archer in Poland this

55
00:02:26,890 --> 00:02:32,260
was an amazing thing the website was a

56
00:02:29,530 --> 00:02:34,240
fan page had pictures and information

57
00:02:32,260 --> 00:02:38,350
about the band and it was absolutely

58
00:02:34,240 --> 00:02:40,230
glorious and after that you know I was

59
00:02:38,350 --> 00:02:43,090
able to access a lot of information

60
00:02:40,230 --> 00:02:45,700
learn about technology learn languages

61
00:02:43,090 --> 00:02:48,280
form relationships collaborate with

62
00:02:45,700 --> 00:02:50,679
people and this was all thanks to the

63
00:02:48,280 --> 00:02:54,310
web and of course that was in the mid

64
00:02:50,680 --> 00:02:57,070
90s at that point we still had other

65
00:02:54,310 --> 00:03:01,480
protocols that were very frequently used

66
00:02:57,070 --> 00:03:05,260
we had IRC we had Usenet we had you know

67
00:03:01,480 --> 00:03:07,840
we used desktop software for email but

68
00:03:05,260 --> 00:03:10,420
over time the web has kind of subsumed

69
00:03:07,840 --> 00:03:12,190
these ecosystems and now a lot of what

70
00:03:10,420 --> 00:03:16,208
we do even if we use these other

71
00:03:12,190 --> 00:03:18,040
protocols its via web you eyes and I

72
00:03:16,209 --> 00:03:20,350
want what I want too and that's that's

73
00:03:18,040 --> 00:03:22,630
my first reason for being really

74
00:03:20,350 --> 00:03:25,510
interested in the web and wanting to

75
00:03:22,630 --> 00:03:26,980
work on web security because you know I

76
00:03:25,510 --> 00:03:28,630
just have a personal attachment a

77
00:03:26,980 --> 00:03:31,119
personal connection to the web the

78
00:03:28,630 --> 00:03:33,340
second reason for for giving this talk

79
00:03:31,120 --> 00:03:35,650
and for doing this work is much more

80
00:03:33,340 --> 00:03:37,360
pragmatic I've been at Google for close

81
00:03:35,650 --> 00:03:40,320
to 10 years and for about half of that I

82
00:03:37,360 --> 00:03:43,600
have been a TL and sort of cat herder

83
00:03:40,320 --> 00:03:47,049
for a small team who which got a fairly

84
00:03:43,600 --> 00:03:49,480
broad Ramage from our management to

85
00:03:47,049 --> 00:03:52,660
pursue proactive engineering work that

86
00:03:49,480 --> 00:03:56,048
can address broader classes of security

87
00:03:52,660 --> 00:03:59,260
problems across Google and Google is

88
00:03:56,049 --> 00:04:01,840
arguably the largest web application

89
00:03:59,260 --> 00:04:04,840
ecosystem in the world we have thousands

90
00:04:01,840 --> 00:04:07,329
of applications both user-facing for

91
00:04:04,840 --> 00:04:09,400
publicly user facing and internal for

92
00:04:07,329 --> 00:04:10,870
Googlers Google acquires a lot of

93
00:04:09,400 --> 00:04:14,079
companies with their own infrastructure

94
00:04:10,870 --> 00:04:16,418
and unlike in some other companies these

95
00:04:14,079 --> 00:04:19,478
infrastructures and these frameworks

96
00:04:16,418 --> 00:04:21,339
that we use to to create our web

97
00:04:19,478 --> 00:04:25,000
applications are very diverse there is

98
00:04:21,339 --> 00:04:27,669
no one single stack that we can create

99
00:04:25,000 --> 00:04:30,340
that will abstract the web away so we

100
00:04:27,669 --> 00:04:34,090
are very closely tied to to the web

101
00:04:30,340 --> 00:04:35,950
ecosystem and web security problems web

102
00:04:34,090 --> 00:04:38,669
platform security problems quickly

103
00:04:35,950 --> 00:04:44,430
become actual security problems

104
00:04:38,669 --> 00:04:47,729
in many google applications so with that

105
00:04:44,430 --> 00:04:49,909
I'd like to turn to trying to maybe

106
00:04:47,729 --> 00:04:52,860
evaluate or understand a little more

107
00:04:49,909 --> 00:04:55,498
where these problems are coming from and

108
00:04:52,860 --> 00:04:58,159
something that I would like to make an

109
00:04:55,499 --> 00:05:00,749
argument for is that the current

110
00:04:58,159 --> 00:05:02,400
security problems that we've had and my

111
00:05:00,749 --> 00:05:05,759
current I mean over the past decade or

112
00:05:02,400 --> 00:05:08,219
past two decades even many of the

113
00:05:05,759 --> 00:05:10,740
problems that we have with the web as an

114
00:05:08,219 --> 00:05:12,569
application platform stem from the fact

115
00:05:10,740 --> 00:05:14,310
that the web wasn't designed as an

116
00:05:12,569 --> 00:05:15,659
application platform right initially it

117
00:05:14,310 --> 00:05:17,639
was supposed to be a mesh of

118
00:05:15,659 --> 00:05:19,560
interconnected documents that could

119
00:05:17,639 --> 00:05:21,779
cross link with each other there would

120
00:05:19,560 --> 00:05:24,479
be hyperlinks and they would help you

121
00:05:21,779 --> 00:05:26,639
find information and go from one place

122
00:05:24,479 --> 00:05:30,300
with interesting information to another

123
00:05:26,639 --> 00:05:33,150
and what it has morphed into organically

124
00:05:30,300 --> 00:05:35,449
over close to 30 years is an application

125
00:05:33,150 --> 00:05:39,659
ecosystem where you know you use your

126
00:05:35,449 --> 00:05:42,629
bank website and your webmail client and

127
00:05:39,659 --> 00:05:45,330
your social network and so on in a way

128
00:05:42,629 --> 00:05:47,699
that the original creators of the web I

129
00:05:45,330 --> 00:05:49,258
don't think ever imagined so now we have

130
00:05:47,699 --> 00:05:51,629
millions of applications there are

131
00:05:49,259 --> 00:05:54,210
trillions of dollars of market cap that

132
00:05:51,629 --> 00:05:58,379
are kind of dependent on the web and the

133
00:05:54,210 --> 00:06:02,008
amount of data is hard to grasp and what

134
00:05:58,379 --> 00:06:05,250
is interesting is that in the change

135
00:06:02,009 --> 00:06:08,009
from the from the original vision of the

136
00:06:05,250 --> 00:06:11,370
web to what it has currently become

137
00:06:08,009 --> 00:06:14,699
we've had certain epochs certain errors

138
00:06:11,370 --> 00:06:16,409
that I don't want to you know create

139
00:06:14,699 --> 00:06:19,259
this I didn't want to create a timeline

140
00:06:16,409 --> 00:06:21,539
I like history a lot I know I couldn't

141
00:06:19,259 --> 00:06:23,669
do it justice but I think we can all

142
00:06:21,539 --> 00:06:25,469
agree that there were multiple periods

143
00:06:23,669 --> 00:06:28,589
in the development of the web with

144
00:06:25,469 --> 00:06:31,289
slightly different areas of focus with

145
00:06:28,589 --> 00:06:33,169
slightly new api's that were created to

146
00:06:31,289 --> 00:06:35,849
address the needs that developers had

147
00:06:33,169 --> 00:06:39,120
and of course the dancing hamster is my

148
00:06:35,849 --> 00:06:41,639
favorite but there were many others and

149
00:06:39,120 --> 00:06:44,310
the the other interesting thing about

150
00:06:41,639 --> 00:06:47,069
the web is that these api's generally

151
00:06:44,310 --> 00:06:49,319
don't go away right so for example

152
00:06:47,069 --> 00:06:52,080
cookies and the same origin policy that

153
00:06:49,319 --> 00:06:54,030
were introduced in in the mid 90s

154
00:06:52,080 --> 00:06:56,520
let's say during the e-commerce boom

155
00:06:54,030 --> 00:06:58,380
like we still use them and depend on

156
00:06:56,520 --> 00:07:00,330
them to this day right it's not as if we

157
00:06:58,380 --> 00:07:02,430
deprecated those mechanisms and replace

158
00:07:00,330 --> 00:07:04,530
them with something better we are kind

159
00:07:02,430 --> 00:07:07,940
of stuck with the decisions that we have

160
00:07:04,530 --> 00:07:10,140
made almost a quarter century ago and

161
00:07:07,940 --> 00:07:12,090
the requirements the security

162
00:07:10,140 --> 00:07:14,969
requirements that we have right now of

163
00:07:12,090 --> 00:07:17,940
our applications and the world around us

164
00:07:14,970 --> 00:07:21,540
is very different from what it was back

165
00:07:17,940 --> 00:07:24,660
then and when I talk about security

166
00:07:21,540 --> 00:07:26,370
problems I want to make clear that it's

167
00:07:24,660 --> 00:07:29,190
not security problems with the concept

168
00:07:26,370 --> 00:07:32,400
of a mesh of hyperlinked documents it's

169
00:07:29,190 --> 00:07:34,410
problems with the the web being an

170
00:07:32,400 --> 00:07:36,870
application platform right the framework

171
00:07:34,410 --> 00:07:40,170
of services that as a developer you can

172
00:07:36,870 --> 00:07:42,150
use to build your application so and I

173
00:07:40,170 --> 00:07:43,830
want to disambiguate if a couple of

174
00:07:42,150 --> 00:07:45,900
terms of the web platform is essentially

175
00:07:43,830 --> 00:07:48,359
the implementation of an application

176
00:07:45,900 --> 00:07:50,820
platform with web technologies with

177
00:07:48,360 --> 00:07:54,090
markup stylesheet scripting and the

178
00:07:50,820 --> 00:07:56,460
api's that are available from from these

179
00:07:54,090 --> 00:07:59,010
mechanisms and one other thing is I will

180
00:07:56,460 --> 00:08:01,859
talk a little bit about web bugs in this

181
00:07:59,010 --> 00:08:05,039
presentation and in some academic

182
00:08:01,860 --> 00:08:07,230
resources web bugs means trackers here I

183
00:08:05,040 --> 00:08:09,120
will use it as a literal in the literal

184
00:08:07,230 --> 00:08:12,450
sense of vulnerabilities that are

185
00:08:09,120 --> 00:08:15,450
exploitable against users who are logged

186
00:08:12,450 --> 00:08:18,780
into a given application by an external

187
00:08:15,450 --> 00:08:21,930
attacker somewhere on the Internet so

188
00:08:18,780 --> 00:08:25,469
what I wanted to focus in and this is

189
00:08:21,930 --> 00:08:27,810
kind of the agenda for the next 30

190
00:08:25,470 --> 00:08:32,190
minutes or so is I want to talk about

191
00:08:27,810 --> 00:08:34,590
three major problems or things that we

192
00:08:32,190 --> 00:08:36,919
should be thinking about to improve web

193
00:08:34,590 --> 00:08:40,110
security and also improve web privacy

194
00:08:36,919 --> 00:08:42,718
the first one that that is probably the

195
00:08:40,110 --> 00:08:44,940
majority of this talk is that the kinds

196
00:08:42,719 --> 00:08:47,880
of vulnerabilities that that arise in

197
00:08:44,940 --> 00:08:50,280
web applications that are caused by some

198
00:08:47,880 --> 00:08:52,080
of the decisions that we made a long

199
00:08:50,280 --> 00:08:54,990
time ago which were perfectly reasonable

200
00:08:52,080 --> 00:08:57,810
then but in time they turned out to

201
00:08:54,990 --> 00:08:59,280
maybe not be great then we'll talk a

202
00:08:57,810 --> 00:09:00,869
little bit about problems with some of

203
00:08:59,280 --> 00:09:04,439
the legacy behaviors we have on the web

204
00:09:00,870 --> 00:09:05,280
and also devote some attention to how we

205
00:09:04,440 --> 00:09:07,610
can prevent

206
00:09:05,280 --> 00:09:10,800
repeating similar mistakes in the future

207
00:09:07,610 --> 00:09:13,830
and something that is very important is

208
00:09:10,800 --> 00:09:18,329
that there are a bunch of ideas in this

209
00:09:13,830 --> 00:09:21,840
talk that were proposed by web security

210
00:09:18,330 --> 00:09:23,550
researchers by browser vendors by people

211
00:09:21,840 --> 00:09:26,250
who work in this space and make security

212
00:09:23,550 --> 00:09:30,000
and actively make web security and web

213
00:09:26,250 --> 00:09:31,710
privacy better of course the fact if

214
00:09:30,000 --> 00:09:33,450
your name is on the slide it does it

215
00:09:31,710 --> 00:09:34,980
doesn't imply endorsement of what I'll

216
00:09:33,450 --> 00:09:36,450
be talking about I just wanted to

217
00:09:34,980 --> 00:09:39,600
recognize that there are a lot of people

218
00:09:36,450 --> 00:09:41,850
who who are improving the the ecosystem

219
00:09:39,600 --> 00:09:43,710
and primarily a colleague of mine

220
00:09:41,850 --> 00:09:45,660
working on the chrome web platform

221
00:09:43,710 --> 00:09:47,760
security Mike West who is one of the

222
00:09:45,660 --> 00:09:51,329
chairs of the w3c web apps leg working

223
00:09:47,760 --> 00:09:54,300
group is the person who has proposed and

224
00:09:51,330 --> 00:09:57,960
implemented and evangelized many of the

225
00:09:54,300 --> 00:09:59,880
upcoming security features that I that

226
00:09:57,960 --> 00:10:04,620
are so critical for improving web

227
00:09:59,880 --> 00:10:06,360
security all right so why talk about the

228
00:10:04,620 --> 00:10:09,000
insecurity of individual web

229
00:10:06,360 --> 00:10:11,970
applications the main reason for this is

230
00:10:09,000 --> 00:10:14,910
that if an application platform makes

231
00:10:11,970 --> 00:10:17,220
bad security decisions then this often

232
00:10:14,910 --> 00:10:19,829
manifests as individual vulnerabilities

233
00:10:17,220 --> 00:10:22,680
in the software that is using this this

234
00:10:19,830 --> 00:10:26,610
application platform and the good thing

235
00:10:22,680 --> 00:10:28,620
about this well good the good thing is

236
00:10:26,610 --> 00:10:31,200
that we do have a lot of data about

237
00:10:28,620 --> 00:10:33,930
individual vulnerabilities from

238
00:10:31,200 --> 00:10:35,640
vulnerability reward programs and from

239
00:10:33,930 --> 00:10:37,530
bug bounty programs that have become

240
00:10:35,640 --> 00:10:39,960
popular over the last eight and a half

241
00:10:37,530 --> 00:10:43,680
years so the ticket I'll present in a

242
00:10:39,960 --> 00:10:47,040
moment comes from the Google web VRP we

243
00:10:43,680 --> 00:10:50,489
pay roughly about a million dollars per

244
00:10:47,040 --> 00:10:52,170
year for vulnerabilities in across our

245
00:10:50,490 --> 00:10:53,850
applications Google also has some other

246
00:10:52,170 --> 00:10:56,699
reward programs for example for Chrome

247
00:10:53,850 --> 00:10:58,650
and the Android OS but the bulk of what

248
00:10:56,700 --> 00:11:02,220
we pay out for our vulnerabilities in

249
00:10:58,650 --> 00:11:04,500
individual applications and the Google

250
00:11:02,220 --> 00:11:07,890
VRP includes both web applications but

251
00:11:04,500 --> 00:11:10,010
also Android apps hardware Google

252
00:11:07,890 --> 00:11:12,449
developed Chrome extensions and

253
00:11:10,010 --> 00:11:15,810
essentially anything that that you as a

254
00:11:12,450 --> 00:11:18,810
as a user as a consumer might interact

255
00:11:15,810 --> 00:11:20,310
with so what are the kinds of

256
00:11:18,810 --> 00:11:23,089
vulnerabilities that we see across

257
00:11:20,310 --> 00:11:26,189
Google so this is a summary of the data

258
00:11:23,089 --> 00:11:29,670
of the reward amounts that we have paid

259
00:11:26,190 --> 00:11:31,410
out last year for all the

260
00:11:29,670 --> 00:11:34,770
vulnerabilities that were reported to us

261
00:11:31,410 --> 00:11:37,020
under the Google via Google VRP and if

262
00:11:34,770 --> 00:11:38,490
you look to the left side of the chart

263
00:11:37,020 --> 00:11:40,860
you can see that many of these

264
00:11:38,490 --> 00:11:42,750
vulnerabilities were not web related

265
00:11:40,860 --> 00:11:46,800
right they are misconfigurations

266
00:11:42,750 --> 00:11:49,440
they are Android and iOS application

267
00:11:46,800 --> 00:11:51,689
vulnerabilities and and and so on some

268
00:11:49,440 --> 00:11:55,589
business logic issues where server-side

269
00:11:51,690 --> 00:11:59,400
code might might for example improperly

270
00:11:55,589 --> 00:12:00,990
verify authorization and so on but at

271
00:11:59,400 --> 00:12:03,270
the other side of the of the pie chart

272
00:12:00,990 --> 00:12:06,900
you'll see that the majority of the

273
00:12:03,270 --> 00:12:08,550
rewards that we pay out are for endemic

274
00:12:06,900 --> 00:12:10,620
web vulnerabilities such as cross-site

275
00:12:08,550 --> 00:12:13,709
scripting and some other ones and this

276
00:12:10,620 --> 00:12:16,260
is a trend that has been that we have

277
00:12:13,709 --> 00:12:18,599
seen over the past decade very

278
00:12:16,260 --> 00:12:20,939
consistently in the past we've had an

279
00:12:18,600 --> 00:12:24,690
even larger share of web vulnerabilities

280
00:12:20,940 --> 00:12:26,160
I think it was about 70 or 80 percent a

281
00:12:24,690 --> 00:12:29,510
few years ago now we're down to just

282
00:12:26,160 --> 00:12:32,100
over 50 percent but that also means that

283
00:12:29,510 --> 00:12:34,560
addressing these vulnerabilities will

284
00:12:32,100 --> 00:12:37,290
hugely improve the security of the

285
00:12:34,560 --> 00:12:39,630
overall Google application ecosystem and

286
00:12:37,290 --> 00:12:41,969
and of course the despite chart is

287
00:12:39,630 --> 00:12:45,540
conflating a few things because the

288
00:12:41,970 --> 00:12:47,520
reward amounts are not it's not the same

289
00:12:45,540 --> 00:12:49,230
as counting by the number of individual

290
00:12:47,520 --> 00:12:50,910
vulnerabilities but if I plotted the

291
00:12:49,230 --> 00:12:52,980
number of individual vulnerabilities it

292
00:12:50,910 --> 00:12:56,219
would be very similar so no matter how

293
00:12:52,980 --> 00:12:59,040
you slice and dice it web bugs are kind

294
00:12:56,220 --> 00:13:00,780
of the bulk or the majority of of what

295
00:12:59,040 --> 00:13:02,099
we see at Google and this is not just

296
00:13:00,780 --> 00:13:04,740
Google because if you look at data that

297
00:13:02,100 --> 00:13:06,630
was reported by our friends at Mozilla a

298
00:13:04,740 --> 00:13:08,490
couple years ago for them also

299
00:13:06,630 --> 00:13:12,089
cross-site scripting and these endemic

300
00:13:08,490 --> 00:13:17,070
web bugs are are a fairly frequent

301
00:13:12,089 --> 00:13:19,350
occurrence and we also now have bug

302
00:13:17,070 --> 00:13:22,500
bounty vendors companies that help other

303
00:13:19,350 --> 00:13:24,180
companies set up bug bounty programs and

304
00:13:22,500 --> 00:13:26,610
they report some information about the

305
00:13:24,180 --> 00:13:28,739
classes of issues they see across entire

306
00:13:26,610 --> 00:13:30,010
industries and I'll just zoom in a

307
00:13:28,740 --> 00:13:32,580
little bit on the

308
00:13:30,010 --> 00:13:36,100
common ones and you also see that these

309
00:13:32,580 --> 00:13:38,470
web bugs such as XSS CSRF and and other

310
00:13:36,100 --> 00:13:40,600
ones that you are familiar with are some

311
00:13:38,470 --> 00:13:44,590
of the most popular and most frequently

312
00:13:40,600 --> 00:13:49,930
happening issues across across pretty

313
00:13:44,590 --> 00:13:51,490
much most of their companies and we

314
00:13:49,930 --> 00:13:53,939
could talk about these individual

315
00:13:51,490 --> 00:13:56,650
vulnerabilities how they arise what the

316
00:13:53,940 --> 00:13:59,080
patterns are that that led to the

317
00:13:56,650 --> 00:14:01,600
creation of a vulnerability but instead

318
00:13:59,080 --> 00:14:03,550
of doing that let's focus maybe on some

319
00:14:01,600 --> 00:14:07,150
of the underlying themes some of the

320
00:14:03,550 --> 00:14:09,490
sins so to speak of of the web as an

321
00:14:07,150 --> 00:14:11,980
application development platform and the

322
00:14:09,490 --> 00:14:14,140
first one that is you know probably

323
00:14:11,980 --> 00:14:16,750
obvious in hindsight is the fact that

324
00:14:14,140 --> 00:14:20,770
the web relies on mixing code and data

325
00:14:16,750 --> 00:14:25,420
right you can have data in markup you

326
00:14:20,770 --> 00:14:26,710
know any label or string and the next

327
00:14:25,420 --> 00:14:28,030
thing that you can have in your markup

328
00:14:26,710 --> 00:14:30,160
after that is a script and the script

329
00:14:28,030 --> 00:14:33,160
will execute so if you're a developer

330
00:14:30,160 --> 00:14:36,430
and you're building a web application

331
00:14:33,160 --> 00:14:39,819
you know you might do some very simple

332
00:14:36,430 --> 00:14:42,520
things such as you know maybe you on the

333
00:14:39,820 --> 00:14:45,520
server side you generate a response and

334
00:14:42,520 --> 00:14:48,370
you and you include the user's name or

335
00:14:45,520 --> 00:14:51,760
you do that same thing using inner HTML

336
00:14:48,370 --> 00:14:54,190
which is a native JavaScript API or

337
00:14:51,760 --> 00:14:57,220
maybe use a higher-level libraries such

338
00:14:54,190 --> 00:15:00,190
as jQuery and you populate part of the

339
00:14:57,220 --> 00:15:01,750
page with with the user's name so those

340
00:15:00,190 --> 00:15:04,150
are very simple things that we do very

341
00:15:01,750 --> 00:15:06,340
frequently as web developers or you know

342
00:15:04,150 --> 00:15:11,439
maybe you want to link to the home page

343
00:15:06,340 --> 00:15:14,320
of a user in in markup or the JavaScript

344
00:15:11,440 --> 00:15:16,630
API or just export some data as a file

345
00:15:14,320 --> 00:15:18,850
that might control that might contain

346
00:15:16,630 --> 00:15:20,470
user controlled contents and you know

347
00:15:18,850 --> 00:15:23,530
those are all really simple things and

348
00:15:20,470 --> 00:15:24,750
of course you know if you've I'm pretty

349
00:15:23,530 --> 00:15:27,640
sure that everyone in this room

350
00:15:24,750 --> 00:15:30,310
recognized that these are in fact not

351
00:15:27,640 --> 00:15:32,740
safe patterns right these very simple

352
00:15:30,310 --> 00:15:35,170
things that as a beginning web developer

353
00:15:32,740 --> 00:15:36,970
you you are very likely to do result in

354
00:15:35,170 --> 00:15:41,829
a cross-site scripting vulnerability

355
00:15:36,970 --> 00:15:44,020
because if any of the data that is used

356
00:15:41,830 --> 00:15:46,660
in in these calls

357
00:15:44,020 --> 00:15:49,600
is user controlled then the attacker can

358
00:15:46,660 --> 00:15:52,360
inject a script via one of many

359
00:15:49,600 --> 00:15:53,770
different ways and execute scripts in

360
00:15:52,360 --> 00:15:57,580
the context of the vulnerable

361
00:15:53,770 --> 00:15:59,620
application and there are two huge

362
00:15:57,580 --> 00:16:02,410
problems with this the first one is that

363
00:15:59,620 --> 00:16:05,020
as I mentioned these these patterns are

364
00:16:02,410 --> 00:16:07,839
extremely common as a naive developer

365
00:16:05,020 --> 00:16:10,240
you will make dozens of these mistakes

366
00:16:07,839 --> 00:16:13,540
while building a fairly simple web

367
00:16:10,240 --> 00:16:15,880
application the second problem is the

368
00:16:13,540 --> 00:16:17,949
impact of cross-site scripting so and

369
00:16:15,880 --> 00:16:20,310
the impact is that once you have any of

370
00:16:17,950 --> 00:16:22,959
these patterns any of these bugs

371
00:16:20,310 --> 00:16:25,739
anywhere in your or in your web origin

372
00:16:22,959 --> 00:16:28,540
in your application an attacker can

373
00:16:25,740 --> 00:16:30,310
execute arbitrary JavaScript as the

374
00:16:28,540 --> 00:16:33,550
logged in user in your application and

375
00:16:30,310 --> 00:16:35,319
steal and modify all of the data

376
00:16:33,550 --> 00:16:37,510
potentially back toward the data that

377
00:16:35,320 --> 00:16:41,980
you have in the application so it's as

378
00:16:37,510 --> 00:16:45,189
if you know every time you got a cold

379
00:16:41,980 --> 00:16:48,610
you died right because this is both this

380
00:16:45,190 --> 00:16:50,890
is both very frequent and and also very

381
00:16:48,610 --> 00:16:54,520
very damaging all right so let's talk

382
00:16:50,890 --> 00:16:58,209
about another pattern and this is this

383
00:16:54,520 --> 00:17:00,339
is something that is also that it's

384
00:16:58,209 --> 00:17:03,189
likely maybe less common than cross-site

385
00:17:00,339 --> 00:17:08,199
scripting but also happens a lot in web

386
00:17:03,190 --> 00:17:13,030
application the problem here is that web

387
00:17:08,199 --> 00:17:15,189
applications don't really restrict the

388
00:17:13,030 --> 00:17:16,359
attack surface so we'll see what I mean

389
00:17:15,189 --> 00:17:18,579
in just a moment

390
00:17:16,359 --> 00:17:20,198
but let's look at some patterns first so

391
00:17:18,579 --> 00:17:23,619
let's say that your application just has

392
00:17:20,199 --> 00:17:25,689
a simple form that you can use to

393
00:17:23,619 --> 00:17:28,030
transfer money to another person so in

394
00:17:25,689 --> 00:17:31,450
here I would send $10 to dev in the top

395
00:17:28,030 --> 00:17:33,550
example or at the second example there's

396
00:17:31,450 --> 00:17:36,010
just a button that does something

397
00:17:33,550 --> 00:17:39,450
sensitive like deleting an account or we

398
00:17:36,010 --> 00:17:42,429
generate a little bit of JavaScript with

399
00:17:39,450 --> 00:17:45,640
with user with authenticated user data

400
00:17:42,429 --> 00:17:48,340
that's interpolated or we make an extra

401
00:17:45,640 --> 00:17:50,650
call to the database before returning a

402
00:17:48,340 --> 00:17:53,260
response to the user those are all very

403
00:17:50,650 --> 00:17:57,240
frequent patterns again but all of them

404
00:17:53,260 --> 00:17:59,670
result in vulnerabilities in exploitable

405
00:17:57,240 --> 00:18:01,380
a web application of vulnerabilities so

406
00:17:59,670 --> 00:18:04,230
the first example is cross-site request

407
00:18:01,380 --> 00:18:06,960
forgery the second one where an attacker

408
00:18:04,230 --> 00:18:09,570
can invoke the same form from an

409
00:18:06,960 --> 00:18:12,000
attacking page and arbitrarily change

410
00:18:09,570 --> 00:18:14,909
the amounts in the form and the server

411
00:18:12,000 --> 00:18:17,070
will have no way of telling apart same

412
00:18:14,910 --> 00:18:20,100
origin a form that was submitted from

413
00:18:17,070 --> 00:18:22,260
the same origin from an attacker

414
00:18:20,100 --> 00:18:23,580
submitted form the second one is

415
00:18:22,260 --> 00:18:25,590
clickjacking where an attacker can just

416
00:18:23,580 --> 00:18:28,580
iframe our page and when the victim

417
00:18:25,590 --> 00:18:31,530
clicks anywhere on the attacker site

418
00:18:28,580 --> 00:18:34,020
they will delete the account on our

419
00:18:31,530 --> 00:18:36,300
victim site the third example is

420
00:18:34,020 --> 00:18:38,940
cross-site script inclusion where any

421
00:18:36,300 --> 00:18:41,430
data that is possible as JavaScript can

422
00:18:38,940 --> 00:18:44,700
be included by the attackers website in

423
00:18:41,430 --> 00:18:46,890
no course mode and and the attacker gets

424
00:18:44,700 --> 00:18:49,320
access to that data and finally the last

425
00:18:46,890 --> 00:18:51,870
one is timing attacks the attacker can

426
00:18:49,320 --> 00:18:53,939
send requests to cross-origin endpoints

427
00:18:51,870 --> 00:18:55,679
and based on the amount of time it took

428
00:18:53,940 --> 00:18:59,250
the server to respond

429
00:18:55,680 --> 00:19:01,140
the attacker can infer whether there was

430
00:18:59,250 --> 00:19:03,690
a search result that was found for a

431
00:19:01,140 --> 00:19:05,490
given query or not and those are very

432
00:19:03,690 --> 00:19:07,230
different kinds of vulnerabilities and

433
00:19:05,490 --> 00:19:09,870
usually we think about them individually

434
00:19:07,230 --> 00:19:12,000
right cross-site request forgery is very

435
00:19:09,870 --> 00:19:14,699
different than timing attacks but what

436
00:19:12,000 --> 00:19:18,330
they have in common is they is that they

437
00:19:14,700 --> 00:19:20,850
are caused by by the same underlying

438
00:19:18,330 --> 00:19:22,770
pattern on the web and that pattern is

439
00:19:20,850 --> 00:19:25,740
twofold the first one is that every

440
00:19:22,770 --> 00:19:27,930
endpoint can be identified by a URL

441
00:19:25,740 --> 00:19:30,000
right so every action that we take in a

442
00:19:27,930 --> 00:19:32,880
web application usually sends a request

443
00:19:30,000 --> 00:19:35,790
to some server-side endpoint some

444
00:19:32,880 --> 00:19:38,880
servlet and the server responds with

445
00:19:35,790 --> 00:19:41,100
some data the second part of the problem

446
00:19:38,880 --> 00:19:43,200
is that these requests even if they are

447
00:19:41,100 --> 00:19:45,750
made by a third party cross-origin

448
00:19:43,200 --> 00:19:48,540
attacking site will reach your server

449
00:19:45,750 --> 00:19:50,160
with all the authentication cookies that

450
00:19:48,540 --> 00:19:53,370
you have for the vulnerable web

451
00:19:50,160 --> 00:19:55,050
application and this you know we have

452
00:19:53,370 --> 00:19:58,550
the same origin policy which prevents

453
00:19:55,050 --> 00:20:01,950
direct interactions with cross-origin

454
00:19:58,550 --> 00:20:04,139
applications but this is still something

455
00:20:01,950 --> 00:20:06,090
that undermines some of the isolation

456
00:20:04,140 --> 00:20:07,510
properties that we would ideally like to

457
00:20:06,090 --> 00:20:10,840
have

458
00:20:07,510 --> 00:20:12,430
Application Platform all right so let's

459
00:20:10,840 --> 00:20:15,659
move to the last one and this is

460
00:20:12,430 --> 00:20:18,760
probably the the most the happiest story

461
00:20:15,660 --> 00:20:20,590
so the the problem originally that we

462
00:20:18,760 --> 00:20:22,720
had on the web was that everything was

463
00:20:20,590 --> 00:20:25,030
sent over HTTP so if you look at the

464
00:20:22,720 --> 00:20:28,630
default apache documentation it will

465
00:20:25,030 --> 00:20:31,480
tell you to serve your your site on port

466
00:20:28,630 --> 00:20:36,220
80 or if you create a cookie that cookie

467
00:20:31,480 --> 00:20:40,480
will be available to both secure origins

468
00:20:36,220 --> 00:20:42,940
to HTTP and HTTP right so if you do this

469
00:20:40,480 --> 00:20:45,790
if you just create a new site odds are

470
00:20:42,940 --> 00:20:50,140
it will be a site served over an

471
00:20:45,790 --> 00:20:51,670
insecure channel and this has been the

472
00:20:50,140 --> 00:20:53,350
case for a long time luckily this is a

473
00:20:51,670 --> 00:20:55,020
pattern that's very easy to spot so if

474
00:20:53,350 --> 00:20:58,149
you are building a new web application

475
00:20:55,020 --> 00:21:00,129
you will you will recognize that oh this

476
00:20:58,150 --> 00:21:02,710
is HTTP it's a sensitive application I

477
00:21:00,130 --> 00:21:05,560
should probably move to to HTTPS so

478
00:21:02,710 --> 00:21:09,670
because this is easy to identify and

479
00:21:05,560 --> 00:21:11,230
also automatically detect we've it's a

480
00:21:09,670 --> 00:21:14,980
happier story than some of the than the

481
00:21:11,230 --> 00:21:16,810
other patterns and of course you know

482
00:21:14,980 --> 00:21:19,540
these are some of the underlying

483
00:21:16,810 --> 00:21:21,580
problems of the web but there are other

484
00:21:19,540 --> 00:21:23,470
issues right many of the api's that

485
00:21:21,580 --> 00:21:25,659
developers use to build their

486
00:21:23,470 --> 00:21:27,960
applications have unsafe default so as

487
00:21:25,660 --> 00:21:30,550
an example if you use post message to

488
00:21:27,960 --> 00:21:33,100
receive messages from from your

489
00:21:30,550 --> 00:21:36,970
application by default unless you check

490
00:21:33,100 --> 00:21:40,480
make an explicit explicit check for the

491
00:21:36,970 --> 00:21:43,180
source of the message you will you'll

492
00:21:40,480 --> 00:21:45,370
have a vulnerability and any attacker

493
00:21:43,180 --> 00:21:47,920
controlled origin will be able to spoof

494
00:21:45,370 --> 00:21:50,169
a message to your application there's no

495
00:21:47,920 --> 00:21:53,350
defense in depth and there are many API

496
00:21:50,170 --> 00:21:56,290
is that that are difficult to use and

497
00:21:53,350 --> 00:21:58,870
it's very difficult to create security

498
00:21:56,290 --> 00:22:00,370
configuration and force security

499
00:21:58,870 --> 00:22:02,500
configuration for your entire app

500
00:22:00,370 --> 00:22:04,449
usually there's some response header

501
00:22:02,500 --> 00:22:06,150
that you have to set on every response

502
00:22:04,450 --> 00:22:10,600
from your application and that gets

503
00:22:06,150 --> 00:22:12,460
difficult to enforce in practice so the

504
00:22:10,600 --> 00:22:15,100
question is you know it's it's kind of

505
00:22:12,460 --> 00:22:18,550
terrible right and how is it possible

506
00:22:15,100 --> 00:22:19,689
that in 2019 with all the underlying

507
00:22:18,550 --> 00:22:21,340
unsafety

508
00:22:19,690 --> 00:22:23,110
the web is such a

509
00:22:21,340 --> 00:22:27,220
popular and you're potentially even

510
00:22:23,110 --> 00:22:30,429
dominant application ecosystem and the

511
00:22:27,220 --> 00:22:33,490
answer to this is that we have very we

512
00:22:30,430 --> 00:22:36,820
have been doing very well on pushing the

513
00:22:33,490 --> 00:22:40,180
responsibility for this unsafety onto

514
00:22:36,820 --> 00:22:42,189
individual application developers so if

515
00:22:40,180 --> 00:22:43,900
you have a cross side scripting bug or a

516
00:22:42,190 --> 00:22:45,610
cross-site request forgery bug or any of

517
00:22:43,900 --> 00:22:47,590
the other ones well it's kind of your

518
00:22:45,610 --> 00:22:49,540
fault because you should have read up on

519
00:22:47,590 --> 00:22:52,149
web security and you should have escaped

520
00:22:49,540 --> 00:22:55,090
all the data and so on and so on so you

521
00:22:52,150 --> 00:22:56,860
know we blame the developer and we also

522
00:22:55,090 --> 00:22:58,840
have some things that alleviate the

523
00:22:56,860 --> 00:23:01,270
problem so we can find vulnerabilities

524
00:22:58,840 --> 00:23:03,790
by using bug bounties and code reviews

525
00:23:01,270 --> 00:23:06,639
we have automated scanners that that

526
00:23:03,790 --> 00:23:10,270
alert us to some issues and so on

527
00:23:06,640 --> 00:23:12,550
finally the probably most frequent way

528
00:23:10,270 --> 00:23:14,470
to avoid these problems especially for

529
00:23:12,550 --> 00:23:16,480
big companies that have resources for

530
00:23:14,470 --> 00:23:20,110
this is to build layers of abstraction

531
00:23:16,480 --> 00:23:23,260
over the web that prevent developers

532
00:23:20,110 --> 00:23:25,449
from from using native unsafe API sand

533
00:23:23,260 --> 00:23:28,440
instead they are forced to use let's say

534
00:23:25,450 --> 00:23:31,360
a wrapper over innerhtml that will

535
00:23:28,440 --> 00:23:33,490
automatically HTML escape all the data

536
00:23:31,360 --> 00:23:35,379
but for that you need to create a lot of

537
00:23:33,490 --> 00:23:39,520
infrastructure to prevent developers

538
00:23:35,380 --> 00:23:41,410
from using the unsafe native API and

539
00:23:39,520 --> 00:23:43,450
because there is no central security

540
00:23:41,410 --> 00:23:45,520
Authority for the web it's easy for

541
00:23:43,450 --> 00:23:47,740
everyone to point in in another

542
00:23:45,520 --> 00:23:49,780
direction saying well you know it's the

543
00:23:47,740 --> 00:23:52,810
developer it's the browser vendor it's

544
00:23:49,780 --> 00:23:55,300
the lack of guidance from the w3c and so

545
00:23:52,810 --> 00:23:58,990
on so and and this makes it easy to do

546
00:23:55,300 --> 00:24:01,690
not solve the problem but the good thing

547
00:23:58,990 --> 00:24:04,060
is that we are getting very close to

548
00:24:01,690 --> 00:24:05,890
having a set of API set of security

549
00:24:04,060 --> 00:24:07,419
mechanisms that address some of these

550
00:24:05,890 --> 00:24:09,400
problems and it's the first time in the

551
00:24:07,420 --> 00:24:12,100
history of the web that we have this and

552
00:24:09,400 --> 00:24:15,840
to think about how we can do this more

553
00:24:12,100 --> 00:24:18,939
broadly let's look at the example of how

554
00:24:15,840 --> 00:24:20,740
the switch to HTTPS happen and I will

555
00:24:18,940 --> 00:24:24,040
not repeat everything that Emily said a

556
00:24:20,740 --> 00:24:27,430
couple of years ago but in order to get

557
00:24:24,040 --> 00:24:28,720
the web to move from HTTP to HTTPS there

558
00:24:27,430 --> 00:24:31,630
are two things that needed to happen

559
00:24:28,720 --> 00:24:33,550
first browser vendors needed to adopt

560
00:24:31,630 --> 00:24:34,630
security mechanisms that let developers

561
00:24:33,550 --> 00:24:37,780
easily move

562
00:24:34,630 --> 00:24:40,480
to HTTPS and that includes HSTs some

563
00:24:37,780 --> 00:24:42,820
features in CSP options for cookies and

564
00:24:40,480 --> 00:24:45,010
so on and the second element of this was

565
00:24:42,820 --> 00:24:48,220
it had to be easy for developers to

566
00:24:45,010 --> 00:24:50,470
create certificates it had to do we kind

567
00:24:48,220 --> 00:24:52,510
of had to shame some websites and

568
00:24:50,470 --> 00:24:55,270
directly work with them and tell them

569
00:24:52,510 --> 00:24:57,820
hey you know your site your new site for

570
00:24:55,270 --> 00:24:59,590
example doesn't have HTTPS and it really

571
00:24:57,820 --> 00:25:03,040
should and there are many other efforts

572
00:24:59,590 --> 00:25:05,860
so and this resulted over a few years in

573
00:25:03,040 --> 00:25:08,889
a very large increase in the amount of

574
00:25:05,860 --> 00:25:11,560
HTTP traffic on the web so the question

575
00:25:08,890 --> 00:25:15,370
is whether we can use a similar strategy

576
00:25:11,560 --> 00:25:18,460
for some of the underlying web platform

577
00:25:15,370 --> 00:25:20,830
security problems and this is I will not

578
00:25:18,460 --> 00:25:23,830
have time to go into the details of

579
00:25:20,830 --> 00:25:27,280
these api's but based on our experience

580
00:25:23,830 --> 00:25:28,899
at Google and at in adding these

581
00:25:27,280 --> 00:25:30,490
security mechanisms to hundreds of

582
00:25:28,900 --> 00:25:32,140
applications there are a couple of

583
00:25:30,490 --> 00:25:34,960
things that I think will be the future

584
00:25:32,140 --> 00:25:37,090
of web security that will that allow

585
00:25:34,960 --> 00:25:39,670
developers to address injections the

586
00:25:37,090 --> 00:25:42,490
first part of this is to make

587
00:25:39,670 --> 00:25:46,030
server-side responses safe by requiring

588
00:25:42,490 --> 00:25:48,400
a nonce based CSP policy that will

589
00:25:46,030 --> 00:25:50,830
enforce that every script that is

590
00:25:48,400 --> 00:25:53,650
present in markup has the right crypto

591
00:25:50,830 --> 00:25:55,570
token that matches what is in an HTTP

592
00:25:53,650 --> 00:25:57,790
response header and the browser because

593
00:25:55,570 --> 00:26:01,149
this is a feature that is enforced by

594
00:25:57,790 --> 00:26:03,399
the browser the browser will immediately

595
00:26:01,150 --> 00:26:05,890
stop the execution of any script that

596
00:26:03,400 --> 00:26:09,070
does not have the correct nonce

597
00:26:05,890 --> 00:26:13,120
attribute the second part of the

598
00:26:09,070 --> 00:26:14,889
equation is as a new API called trusted

599
00:26:13,120 --> 00:26:16,810
types and this is something that makes

600
00:26:14,890 --> 00:26:19,030
Dom programming so JavaScript

601
00:26:16,810 --> 00:26:22,149
programming safe by default and this is

602
00:26:19,030 --> 00:26:25,990
modeled on a Google internal layer of

603
00:26:22,150 --> 00:26:28,450
abstraction over over web api's and the

604
00:26:25,990 --> 00:26:30,760
way it works is you when you enable

605
00:26:28,450 --> 00:26:33,310
trusted types in your application then

606
00:26:30,760 --> 00:26:36,190
all string assignments to dangerous API

607
00:26:33,310 --> 00:26:38,889
is just error out so you can no longer

608
00:26:36,190 --> 00:26:42,010
assign the string to inner HTML in order

609
00:26:38,890 --> 00:26:44,710
to use one of the unsafe web api's you

610
00:26:42,010 --> 00:26:47,620
need to create a trusted type object for

611
00:26:44,710 --> 00:26:48,160
example a trusted HTML or trusted script

612
00:26:47,620 --> 00:26:49,899
URL

613
00:26:48,160 --> 00:26:52,480
and your attack surface for your

614
00:26:49,900 --> 00:26:54,850
JavaScript code shifts from your entire

615
00:26:52,480 --> 00:26:57,580
application all of your JavaScript to

616
00:26:54,850 --> 00:26:59,590
just the policy that creates these these

617
00:26:57,580 --> 00:27:00,820
types there are some links I'll share

618
00:26:59,590 --> 00:27:05,399
the slides if you're interested in the

619
00:27:00,820 --> 00:27:08,350
details we can do something similar for

620
00:27:05,400 --> 00:27:11,230
for isolation to restrict the attack

621
00:27:08,350 --> 00:27:13,449
surface of individual applications so

622
00:27:11,230 --> 00:27:16,390
and the way we can do this is there are

623
00:27:13,450 --> 00:27:19,090
several mechanisms that kind of overlap

624
00:27:16,390 --> 00:27:20,800
and mesh together to to give more

625
00:27:19,090 --> 00:27:24,399
isolation guarantees that we've had

626
00:27:20,800 --> 00:27:26,470
before so a mechanism that I like a lot

627
00:27:24,400 --> 00:27:28,420
is called fetch metadata request headers

628
00:27:26,470 --> 00:27:31,240
and that is something that annotates

629
00:27:28,420 --> 00:27:32,980
every HTTP request with some information

630
00:27:31,240 --> 00:27:36,820
about where that request is coming from

631
00:27:32,980 --> 00:27:40,050
so based on these values you can the

632
00:27:36,820 --> 00:27:42,520
server can accept or reject a request

633
00:27:40,050 --> 00:27:45,040
based on some security criteria and

634
00:27:42,520 --> 00:27:46,300
there are other complimentary security

635
00:27:45,040 --> 00:27:48,190
mechanisms such as the cross-origin

636
00:27:46,300 --> 00:27:50,230
resource policy same site cookies

637
00:27:48,190 --> 00:27:52,930
cross-origin the open air policy it's a

638
00:27:50,230 --> 00:27:55,270
super exciting area that we sadly don't

639
00:27:52,930 --> 00:27:56,770
have time to go into I'll just share one

640
00:27:55,270 --> 00:27:59,460
example of how you could use fetch

641
00:27:56,770 --> 00:28:01,480
metadata request headers to protect from

642
00:27:59,460 --> 00:28:03,330
for example cross-site request forgery

643
00:28:01,480 --> 00:28:06,610
timing attacks and other issues

644
00:28:03,330 --> 00:28:09,730
essentially you can have middleware in

645
00:28:06,610 --> 00:28:12,699
your site that will only allow requests

646
00:28:09,730 --> 00:28:15,910
with with trusted sacrifice ID and sec

647
00:28:12,700 --> 00:28:18,430
fetch mode values all right so long

648
00:28:15,910 --> 00:28:20,020
story short what we need to do to help

649
00:28:18,430 --> 00:28:22,600
developers write secure web applications

650
00:28:20,020 --> 00:28:24,850
is first we have to create the security

651
00:28:22,600 --> 00:28:26,949
mechanisms that they can use to protect

652
00:28:24,850 --> 00:28:28,659
their web applications and we have to

653
00:28:26,950 --> 00:28:30,700
help developers adopt them we have to

654
00:28:28,660 --> 00:28:32,890
write documentation integrate with

655
00:28:30,700 --> 00:28:36,190
browser tools the Mozilla Observatory

656
00:28:32,890 --> 00:28:38,230
and other header scanners and then

657
00:28:36,190 --> 00:28:41,650
something that is that will be very

658
00:28:38,230 --> 00:28:44,380
important in the long term is to figure

659
00:28:41,650 --> 00:28:49,210
out how we can enable this by default

660
00:28:44,380 --> 00:28:51,190
for the whole web and ideally you know

661
00:28:49,210 --> 00:28:52,720
we'll be able to get there if we cannot

662
00:28:51,190 --> 00:28:55,090
get there and some of these requires

663
00:28:52,720 --> 00:28:56,770
let's say invasive changes to web

664
00:28:55,090 --> 00:28:58,720
applications at all that are not

665
00:28:56,770 --> 00:29:01,040
backwards compatible right they will

666
00:28:58,720 --> 00:29:02,660
they make developers to work

667
00:29:01,040 --> 00:29:04,460
we cannot deploy them across the whole

668
00:29:02,660 --> 00:29:07,130
web then we should at least think about

669
00:29:04,460 --> 00:29:08,990
how we can enforce them for the

670
00:29:07,130 --> 00:29:11,150
sensitive applications that users are

671
00:29:08,990 --> 00:29:13,370
using so you know maybe it's an

672
00:29:11,150 --> 00:29:16,280
unrealistic goal to have content

673
00:29:13,370 --> 00:29:18,229
security policy adopted across 100% of

674
00:29:16,280 --> 00:29:20,840
websites including my blog to which no

675
00:29:18,230 --> 00:29:22,850
one logs into but if you have let's say

676
00:29:20,840 --> 00:29:25,639
a webmail client or a sites where the

677
00:29:22,850 --> 00:29:27,679
user logs in or has sensitive data maybe

678
00:29:25,640 --> 00:29:29,510
those are the ones where browsers need

679
00:29:27,680 --> 00:29:32,270
to enforce the presence of these

680
00:29:29,510 --> 00:29:34,940
features and this is a very open

681
00:29:32,270 --> 00:29:36,260
question very open recent research area

682
00:29:34,940 --> 00:29:39,110
and we definitely need more people

683
00:29:36,260 --> 00:29:40,550
thinking about this all right so let's

684
00:29:39,110 --> 00:29:44,050
say we do this there will be a lot of

685
00:29:40,550 --> 00:29:47,990
work for browser vendors will we be done

686
00:29:44,050 --> 00:29:50,540
and the answer is not yet right there

687
00:29:47,990 --> 00:29:52,340
are still legacy web features that even

688
00:29:50,540 --> 00:29:55,610
if your application doesn't have obvious

689
00:29:52,340 --> 00:29:59,350
volubilis ease allow attackers to infer

690
00:29:55,610 --> 00:30:01,219
some information about the user and

691
00:29:59,350 --> 00:30:04,340
compromise some security or privacy

692
00:30:01,220 --> 00:30:07,220
guarantees and there are a couple of

693
00:30:04,340 --> 00:30:09,290
reasons for this one is that their

694
00:30:07,220 --> 00:30:11,030
browsers have a lot of global State and

695
00:30:09,290 --> 00:30:12,860
there are the boundaries between

696
00:30:11,030 --> 00:30:15,139
different applications are kind of

697
00:30:12,860 --> 00:30:17,479
imperfect and I'll share a few examples

698
00:30:15,140 --> 00:30:19,130
here and my my favorite one which is

699
00:30:17,480 --> 00:30:21,140
probably not you know definitely not the

700
00:30:19,130 --> 00:30:22,820
worst problem for the web but something

701
00:30:21,140 --> 00:30:25,100
that that I enjoy thinking about is

702
00:30:22,820 --> 00:30:26,780
history detection so if you're not

703
00:30:25,100 --> 00:30:29,030
familiar with the feature in CSS you can

704
00:30:26,780 --> 00:30:32,000
style visited links differently from

705
00:30:29,030 --> 00:30:34,220
unvisited ones so you can give them

706
00:30:32,000 --> 00:30:37,460
different colors but then javascript

707
00:30:34,220 --> 00:30:39,320
lets you read the color of a given link

708
00:30:37,460 --> 00:30:41,540
and based on this a malicious site code

709
00:30:39,320 --> 00:30:44,149
quickly creates I think we checked it

710
00:30:41,540 --> 00:30:47,570
was about 20 to 30,000 links per second

711
00:30:44,150 --> 00:30:50,000
and determine whether user visited these

712
00:30:47,570 --> 00:30:52,790
URLs there was a very creative and very

713
00:30:50,000 --> 00:30:55,610
smart fix proposed and implemented in

714
00:30:52,790 --> 00:30:58,610
all browsers by David Barron at Mozilla

715
00:30:55,610 --> 00:31:01,409
and solution to this was for the browser

716
00:30:58,610 --> 00:31:03,840
to lie to the

717
00:31:01,410 --> 00:31:07,020
to JavaScript's to the developer about

718
00:31:03,840 --> 00:31:09,240
the color of of the link so that even if

719
00:31:07,020 --> 00:31:12,179
you check so that you know even if a

720
00:31:09,240 --> 00:31:14,580
link is blue the browser would say red

721
00:31:12,179 --> 00:31:16,860
or or the other way around and there are

722
00:31:14,580 --> 00:31:20,120
also some other changes that had to be

723
00:31:16,860 --> 00:31:22,949
made to make the the color of the link

724
00:31:20,120 --> 00:31:25,379
undetectable from a script alright so it

725
00:31:22,950 --> 00:31:26,580
seems like this would help but since

726
00:31:25,380 --> 00:31:29,460
then and that happened that I think in

727
00:31:26,580 --> 00:31:32,970
2011 there has been a body of very

728
00:31:29,460 --> 00:31:35,970
interesting attacks that undermine this

729
00:31:32,970 --> 00:31:37,860
some benefits of this solution so there

730
00:31:35,970 --> 00:31:39,630
are definitely timing attacks so if you

731
00:31:37,860 --> 00:31:41,969
if you have a link and you change the

732
00:31:39,630 --> 00:31:45,000
URL and that ends up changing the color

733
00:31:41,970 --> 00:31:46,080
of the link in many ways you can you

734
00:31:45,000 --> 00:31:48,720
know even though you cannot directly

735
00:31:46,080 --> 00:31:50,699
read the color of the link that the

736
00:31:48,720 --> 00:31:52,650
amount of time that this will take will

737
00:31:50,700 --> 00:31:54,929
be longer or shorter depending on

738
00:31:52,650 --> 00:31:56,640
various factors you can have no 10,000

739
00:31:54,929 --> 00:31:58,260
links pointing to the same URL in the

740
00:31:56,640 --> 00:32:01,440
same page it's it's a very difficult

741
00:31:58,260 --> 00:32:05,100
boundary to for a browser vendor to to

742
00:32:01,440 --> 00:32:06,539
uphold and another very cute set of

743
00:32:05,100 --> 00:32:08,969
attacks is attacks based on user

744
00:32:06,539 --> 00:32:10,710
interaction so the developer the

745
00:32:08,970 --> 00:32:13,049
attacker cannot know the color of the

746
00:32:10,710 --> 00:32:14,700
link but the user will still see the

747
00:32:13,049 --> 00:32:17,340
link styled with a different color so

748
00:32:14,700 --> 00:32:19,409
though the top example is there's you

749
00:32:17,340 --> 00:32:21,389
can make a 7-segment display that will

750
00:32:19,409 --> 00:32:23,610
show a different character based on

751
00:32:21,390 --> 00:32:25,610
whether user visited a certain web site

752
00:32:23,610 --> 00:32:28,408
or set of web sites and if the user

753
00:32:25,610 --> 00:32:30,270
tells you as the you know for example if

754
00:32:28,409 --> 00:32:32,580
you pretend it's a CAPTCHA and you have

755
00:32:30,270 --> 00:32:33,900
several of these characters you as the

756
00:32:32,580 --> 00:32:36,389
attacker can learn what the user

757
00:32:33,900 --> 00:32:38,520
actually saw which will tell you it will

758
00:32:36,390 --> 00:32:40,289
tell the attacker what the visited links

759
00:32:38,520 --> 00:32:42,600
were Michael Zaleski create a very

760
00:32:40,289 --> 00:32:44,879
interesting asteroids game where the

761
00:32:42,600 --> 00:32:47,309
links that you've visited are in the

762
00:32:44,880 --> 00:32:49,710
form of asteroids that might hit your

763
00:32:47,309 --> 00:32:53,460
ship and then you will you have to click

764
00:32:49,710 --> 00:32:55,500
on them to to remove them and based on

765
00:32:53,460 --> 00:32:57,929
where the user clicked the attacker

766
00:32:55,500 --> 00:33:00,270
knows which websites you visited and it

767
00:32:57,929 --> 00:33:02,159
has lots of other smart ideas to to

768
00:33:00,270 --> 00:33:05,129
increase kind of the bandwidth of deftly

769
00:33:02,159 --> 00:33:08,730
another side channel that I also think

770
00:33:05,130 --> 00:33:10,950
was fairly acute was some browsers

771
00:33:08,730 --> 00:33:12,510
enabled the ambient light sensor and

772
00:33:10,950 --> 00:33:14,400
this is just something that tells you

773
00:33:12,510 --> 00:33:15,000
how much light enters the sensor that

774
00:33:14,400 --> 00:33:18,030
you have in

775
00:33:15,000 --> 00:33:20,790
the front of your smartphone usually and

776
00:33:18,030 --> 00:33:23,190
the thing is if your screen is white you

777
00:33:20,790 --> 00:33:25,080
will get a different reading from the

778
00:33:23,190 --> 00:33:27,390
ambient light sensor if there's any

779
00:33:25,080 --> 00:33:30,510
reflective surface let's say about one

780
00:33:27,390 --> 00:33:32,340
or two feet above your phone so you can

781
00:33:30,510 --> 00:33:34,170
distinguish whether the screen is black

782
00:33:32,340 --> 00:33:36,120
or whether it's white you can make a

783
00:33:34,170 --> 00:33:37,980
link that will take the whole screen and

784
00:33:36,120 --> 00:33:39,479
based on the reading from the ambient

785
00:33:37,980 --> 00:33:41,010
light sensor you will be able to know

786
00:33:39,480 --> 00:33:42,180
whether link is visited and you can do

787
00:33:41,010 --> 00:33:43,980
this fairly quickly

788
00:33:42,180 --> 00:33:45,780
I think it's more of a curiosity than an

789
00:33:43,980 --> 00:33:47,790
actual attack but this is the class of

790
00:33:45,780 --> 00:33:51,149
things that we have to deal with if we

791
00:33:47,790 --> 00:33:53,730
support visited link styling alright and

792
00:33:51,150 --> 00:33:55,940
another class of attacks that we've had

793
00:33:53,730 --> 00:33:59,850
for a long time in most browsers is

794
00:33:55,940 --> 00:34:02,280
cache detection at Felton and Michael

795
00:33:59,850 --> 00:34:03,780
Schneider wrote a seminal paper about 20

796
00:34:02,280 --> 00:34:06,500
years ago and by the way the history

797
00:34:03,780 --> 00:34:11,489
attack also is almost twenty years old

798
00:34:06,500 --> 00:34:13,290
the the paper on Web timings is you can

799
00:34:11,489 --> 00:34:16,138
check whether a resource is in the

800
00:34:13,290 --> 00:34:17,969
browser cache and based on that know

801
00:34:16,139 --> 00:34:18,570
whether user visited a certain website

802
00:34:17,969 --> 00:34:20,790
this works

803
00:34:18,570 --> 00:34:22,710
I think Safari is the only browser that

804
00:34:20,790 --> 00:34:25,199
has implemented protections against this

805
00:34:22,710 --> 00:34:27,750
other browsers have not yet but there's

806
00:34:25,199 --> 00:34:29,879
some movement in chrome and the problem

807
00:34:27,750 --> 00:34:32,310
was with this class of attacks is since

808
00:34:29,879 --> 00:34:34,620
the the original attack was proposed the

809
00:34:32,310 --> 00:34:37,620
techniques to learn whether something

810
00:34:34,620 --> 00:34:39,779
was in the cache have gotten better you

811
00:34:37,620 --> 00:34:41,730
can do it without polluting the cache

812
00:34:39,780 --> 00:34:44,760
because you can clear a given URL with

813
00:34:41,730 --> 00:34:49,050
very creative tricks that that our team

814
00:34:44,760 --> 00:34:50,550
loves to investigate so you get a much

815
00:34:49,050 --> 00:34:52,770
more reliable detector of whether

816
00:34:50,550 --> 00:34:54,450
something is in the cache and also there

817
00:34:52,770 --> 00:34:56,070
are new attacks that have come up over

818
00:34:54,449 --> 00:34:58,439
the past few years such as cross-site

819
00:34:56,070 --> 00:35:01,410
search where if a search results page

820
00:34:58,440 --> 00:35:03,990
has a cashable resource then a malicious

821
00:35:01,410 --> 00:35:06,480
attacker can point the user to a page

822
00:35:03,990 --> 00:35:09,330
with a given search term and if after

823
00:35:06,480 --> 00:35:11,880
the visit to that page the cached

824
00:35:09,330 --> 00:35:14,520
resource has been cached then you know

825
00:35:11,880 --> 00:35:16,170
that there were some results that the

826
00:35:14,520 --> 00:35:18,900
search query returned returned some

827
00:35:16,170 --> 00:35:21,750
results for the user and if not then you

828
00:35:18,900 --> 00:35:23,280
know that there was no no result and

829
00:35:21,750 --> 00:35:25,330
that lets you leak for example the

830
00:35:23,280 --> 00:35:27,800
contents of emails

831
00:35:25,330 --> 00:35:30,710
another more recent attack proposed by

832
00:35:27,800 --> 00:35:34,280
my colleague stefan radhika was the

833
00:35:30,710 --> 00:35:37,010
browser has pretty much each browser has

834
00:35:34,280 --> 00:35:39,800
a global a connection pool that is

835
00:35:37,010 --> 00:35:41,690
shared across all the tabs all the sites

836
00:35:39,800 --> 00:35:44,420
that that are open in the web browser

837
00:35:41,690 --> 00:35:47,720
and if you exhaust all of them and just

838
00:35:44,420 --> 00:35:50,840
release one and then see as the attacker

839
00:35:47,720 --> 00:35:53,000
whether you can what the timing is of a

840
00:35:50,840 --> 00:35:55,460
connection to your own server you can

841
00:35:53,000 --> 00:35:58,940
perform timing of individual resource

842
00:35:55,460 --> 00:36:00,590
loads on any website so you know you use

843
00:35:58,940 --> 00:36:02,960
up all the connections then you open a

844
00:36:00,590 --> 00:36:05,090
new site and then you get vary for each

845
00:36:02,960 --> 00:36:07,250
resource that is a that's on a separate

846
00:36:05,090 --> 00:36:10,520
connection you get information about how

847
00:36:07,250 --> 00:36:13,340
long it took and that allows very

848
00:36:10,520 --> 00:36:15,950
interesting timing attacks another set

849
00:36:13,340 --> 00:36:19,010
of attacks that we have seen over the

850
00:36:15,950 --> 00:36:21,580
past decade including possibly you have

851
00:36:19,010 --> 00:36:25,280
heard of the zoom remote code execution

852
00:36:21,580 --> 00:36:27,440
and remote camera attack from a couple

853
00:36:25,280 --> 00:36:29,120
of weeks ago you know it's it's based on

854
00:36:27,440 --> 00:36:34,820
the fact that the browser can send

855
00:36:29,120 --> 00:36:36,620
requests to internal RFC 1918 addresses

856
00:36:34,820 --> 00:36:39,650
which means that if you have a server

857
00:36:36,620 --> 00:36:43,940
listening on localhost or your local or

858
00:36:39,650 --> 00:36:47,270
your router or your printer a user that

859
00:36:43,940 --> 00:36:50,000
visits an attackers site will make will

860
00:36:47,270 --> 00:36:52,190
send requests to their local network

861
00:36:50,000 --> 00:36:55,850
devices from their browser which can

862
00:36:52,190 --> 00:36:58,610
lead to terrible things and in addition

863
00:36:55,850 --> 00:37:00,650
to that so those are kind of the big

864
00:36:58,610 --> 00:37:03,710
problems that we've had I think pretty

865
00:37:00,650 --> 00:37:06,620
much every person working on the web has

866
00:37:03,710 --> 00:37:08,960
their own laundry list of problems that

867
00:37:06,620 --> 00:37:11,049
they would like to fix we have AP eyes

868
00:37:08,960 --> 00:37:15,500
that are bad that we should really kill

869
00:37:11,050 --> 00:37:17,210
there are issues that make that leak

870
00:37:15,500 --> 00:37:19,490
information that we really wouldn't want

871
00:37:17,210 --> 00:37:22,310
to leak there's there's lots of things

872
00:37:19,490 --> 00:37:24,560
to discuss here we have to start fixing

873
00:37:22,310 --> 00:37:26,150
all of them slowly and we can use what

874
00:37:24,560 --> 00:37:29,390
chrome has done and other browser

875
00:37:26,150 --> 00:37:31,550
vendors to has done with with some

876
00:37:29,390 --> 00:37:34,310
efforts to deprecated unsafe patterns on

877
00:37:31,550 --> 00:37:36,860
the web like removing flash slowly and

878
00:37:34,310 --> 00:37:38,299
thoughtfully but but kind of you know

879
00:37:36,860 --> 00:37:41,660
forcefully

880
00:37:38,300 --> 00:37:45,020
and also removing access to powerful API

881
00:37:41,660 --> 00:37:46,839
is such as geolocation on HTTP pages so

882
00:37:45,020 --> 00:37:48,860
it makes developers unhappy sometimes

883
00:37:46,840 --> 00:37:51,500
but you know this is something we have

884
00:37:48,860 --> 00:37:54,200
to do to improve the health of the

885
00:37:51,500 --> 00:37:55,700
ecosystem so you know to solve this

886
00:37:54,200 --> 00:37:58,069
class of problems we need to solve the

887
00:37:55,700 --> 00:38:00,830
large problems individually but then

888
00:37:58,070 --> 00:38:04,970
also figure out what to do is with these

889
00:38:00,830 --> 00:38:06,710
quirky api's and this is another one of

890
00:38:04,970 --> 00:38:09,459
those research areas where we have to

891
00:38:06,710 --> 00:38:11,990
understand the trade-offs and the

892
00:38:09,460 --> 00:38:14,390
compatibility risks of removing each

893
00:38:11,990 --> 00:38:16,868
individual API and we don't have great

894
00:38:14,390 --> 00:38:19,368
data to understand how much will break

895
00:38:16,869 --> 00:38:22,490
what the impact will be for developers

896
00:38:19,369 --> 00:38:26,270
and users so more attention to to these

897
00:38:22,490 --> 00:38:30,549
areas is very important all right so I

898
00:38:26,270 --> 00:38:33,619
have about five minutes to talk about

899
00:38:30,550 --> 00:38:36,790
some attacks that that would otherwise

900
00:38:33,619 --> 00:38:41,090
take about an hour to properly describe

901
00:38:36,790 --> 00:38:43,850
so so I'll be very quick the the thing

902
00:38:41,090 --> 00:38:45,770
that I that I was summarized in before

903
00:38:43,850 --> 00:38:48,259
getting into the details something that

904
00:38:45,770 --> 00:38:50,900
is not very appreciated is that anytime

905
00:38:48,260 --> 00:38:55,250
that there's a new API that launches on

906
00:38:50,900 --> 00:38:57,740
the web that immediately changes the

907
00:38:55,250 --> 00:39:00,800
security posture of every existing web

908
00:38:57,740 --> 00:39:03,229
application some of these new api is

909
00:39:00,800 --> 00:39:05,690
even if they are not used by by a given

910
00:39:03,230 --> 00:39:08,000
site by your bank by your webmail these

911
00:39:05,690 --> 00:39:10,400
api's can be used by the attacker to

912
00:39:08,000 --> 00:39:12,440
potentially leak some data from from

913
00:39:10,400 --> 00:39:15,380
your site right so we have to be very

914
00:39:12,440 --> 00:39:17,630
careful when adding new api's to the web

915
00:39:15,380 --> 00:39:20,240
platform and ensure that they do not

916
00:39:17,630 --> 00:39:22,250
allow information leaks so you might

917
00:39:20,240 --> 00:39:24,500
think oh those are these these scary api

918
00:39:22,250 --> 00:39:27,770
is like camera access or payment

919
00:39:24,500 --> 00:39:30,230
requests and so on but actually these

920
00:39:27,770 --> 00:39:32,119
are usually not what i would be worried

921
00:39:30,230 --> 00:39:33,560
about because they require user consents

922
00:39:32,119 --> 00:39:35,480
there's a permission prompt the user

923
00:39:33,560 --> 00:39:39,080
will decide oh I do want to allow

924
00:39:35,480 --> 00:39:41,150
evil.com to use my microphone or not and

925
00:39:39,080 --> 00:39:42,619
we can we can kind of hope that users

926
00:39:41,150 --> 00:39:44,660
will make of course we know that users

927
00:39:42,619 --> 00:39:46,910
don't make great security decisions but

928
00:39:44,660 --> 00:39:49,100
at least there is there's an explicit

929
00:39:46,910 --> 00:39:51,980
user action that has to that has to

930
00:39:49,100 --> 00:39:56,210
happen what I am worried more about

931
00:39:51,980 --> 00:39:58,130
our api's that don't require any any

932
00:39:56,210 --> 00:40:00,380
interaction from the user to enable them

933
00:39:58,130 --> 00:40:03,050
so and I'll give a few examples so a

934
00:40:00,380 --> 00:40:05,360
couple of years ago at blackhat some

935
00:40:03,050 --> 00:40:09,020
researchers published a very interesting

936
00:40:05,360 --> 00:40:12,440
and damaging attack called heist which

937
00:40:09,020 --> 00:40:15,290
was which relied in the kind of if you

938
00:40:12,440 --> 00:40:17,360
boil it down to one tiny feature that

939
00:40:15,290 --> 00:40:20,680
enabled this attack it was the fact that

940
00:40:17,360 --> 00:40:23,060
the fetch API returns a promise that

941
00:40:20,680 --> 00:40:26,029
resolves the moment the first byte of

942
00:40:23,060 --> 00:40:28,070
the response is downloaded what was the

943
00:40:26,030 --> 00:40:30,110
case before is that you could measure

944
00:40:28,070 --> 00:40:31,280
the timing of the entire resource load

945
00:40:30,110 --> 00:40:34,520
so when the resource was fully

946
00:40:31,280 --> 00:40:37,430
downloaded but not when it started to be

947
00:40:34,520 --> 00:40:39,530
when you got the first byte so this

948
00:40:37,430 --> 00:40:42,109
seems like a really tiny security Delta

949
00:40:39,530 --> 00:40:44,090
right like what's the like what's the

950
00:40:42,110 --> 00:40:46,550
problem since we already expose the load

951
00:40:44,090 --> 00:40:49,580
time of the of the whole resource what's

952
00:40:46,550 --> 00:40:52,130
the problem was a report with disclosing

953
00:40:49,580 --> 00:40:54,080
the time when the first byte arrives and

954
00:40:52,130 --> 00:40:57,050
the problem here is that the attacker

955
00:40:54,080 --> 00:40:59,180
can infer whether the entire resource

956
00:40:57,050 --> 00:41:01,730
fits in one TCP window size which

957
00:40:59,180 --> 00:41:04,100
usually is about 14 and a half kilobytes

958
00:41:01,730 --> 00:41:05,720
and you know this also doesn't seem

959
00:41:04,100 --> 00:41:07,400
terrible right like what so what's the

960
00:41:05,720 --> 00:41:09,649
big deal if the attacker knows if a

961
00:41:07,400 --> 00:41:11,870
given cross origin response was less

962
00:41:09,650 --> 00:41:14,600
than or bigger than fourteen and a half

963
00:41:11,870 --> 00:41:17,480
kilobytes but there are very interesting

964
00:41:14,600 --> 00:41:19,759
ways in which that can be abused too as

965
00:41:17,480 --> 00:41:22,580
the researchers demonstrated I'll steal

966
00:41:19,760 --> 00:41:26,540
credit card numbers from your email for

967
00:41:22,580 --> 00:41:28,819
example another attack that I'm even

968
00:41:26,540 --> 00:41:31,340
that I'm worried to get into in the next

969
00:41:28,820 --> 00:41:33,740
couple of minute is factor and we will

970
00:41:31,340 --> 00:41:36,790
not discuss Specter at all but the

971
00:41:33,740 --> 00:41:40,640
feature that enabled accurate attacks

972
00:41:36,790 --> 00:41:42,740
kind of tractable real real-world proof

973
00:41:40,640 --> 00:41:44,629
of proofs of concept was the fact that

974
00:41:42,740 --> 00:41:48,109
the shared array buffer which which is a

975
00:41:44,630 --> 00:41:51,920
very useful and you know an API did

976
00:41:48,110 --> 00:41:55,040
seemed benign at first but the fact that

977
00:41:51,920 --> 00:41:58,610
rotary buffer iraq allowed nanosecond

978
00:41:55,040 --> 00:42:00,830
level timers and the increase in

979
00:41:58,610 --> 00:42:02,700
resolution of a shared array buffer

980
00:42:00,830 --> 00:42:04,859
based timer over x

981
00:42:02,700 --> 00:42:08,899
timing API is like window.performance

982
00:42:04,859 --> 00:42:12,569
now was enough to to make attacks

983
00:42:08,900 --> 00:42:14,790
feasible where they were difficult to to

984
00:42:12,570 --> 00:42:17,490
execute before and of course both of

985
00:42:14,790 --> 00:42:20,220
these issues a heist inspector were not

986
00:42:17,490 --> 00:42:22,890
caused by the fact that there is a that

987
00:42:20,220 --> 00:42:26,069
the promise resolves immediately or that

988
00:42:22,890 --> 00:42:28,589
there's a more accurate timing API but

989
00:42:26,070 --> 00:42:30,270
these were kind of the straw that broke

990
00:42:28,589 --> 00:42:33,060
the camel's back right those were

991
00:42:30,270 --> 00:42:34,710
incremental small changes that didn't

992
00:42:33,060 --> 00:42:37,140
seem like they would cause security

993
00:42:34,710 --> 00:42:39,720
problems but in aggregate because of

994
00:42:37,140 --> 00:42:43,529
other side channels they ended up

995
00:42:39,720 --> 00:42:44,879
allowing reliable exploits another and

996
00:42:43,530 --> 00:42:47,160
this is the last feature that that I

997
00:42:44,880 --> 00:42:49,650
will talk about and that is kind of

998
00:42:47,160 --> 00:42:52,049
interesting that is a different class of

999
00:42:49,650 --> 00:42:53,940
API that also leads to security problems

1000
00:42:52,050 --> 00:42:55,800
was a feature that was proposed by

1001
00:42:53,940 --> 00:42:57,540
Chrome developers that actually ended up

1002
00:42:55,800 --> 00:42:59,970
not ripping because of the security

1003
00:42:57,540 --> 00:43:01,740
concerns so if you're familiar with URL

1004
00:42:59,970 --> 00:43:04,140
fragments they are something that allows

1005
00:43:01,740 --> 00:43:06,419
you to scroll to a given part of your

1006
00:43:04,140 --> 00:43:08,640
webpage for example you know if you have

1007
00:43:06,420 --> 00:43:12,119
an element with a given ID or name the

1008
00:43:08,640 --> 00:43:15,029
URL fragment will let you scroll on the

1009
00:43:12,119 --> 00:43:17,430
navigation exactly to that element so

1010
00:43:15,030 --> 00:43:19,680
the proposal was to extend this to make

1011
00:43:17,430 --> 00:43:22,259
this more powerful and ended and in

1012
00:43:19,680 --> 00:43:25,410
addition to scrolling to a give an ID or

1013
00:43:22,260 --> 00:43:27,900
name attribute to allow scrolling to an

1014
00:43:25,410 --> 00:43:29,399
arbitrary CSS selector and this is this

1015
00:43:27,900 --> 00:43:31,380
is a great feature from a developer's

1016
00:43:29,400 --> 00:43:34,230
point of view we really want to be able

1017
00:43:31,380 --> 00:43:37,109
to scroll to elements that don't have a

1018
00:43:34,230 --> 00:43:39,930
name or ID and it's it's kind of

1019
00:43:37,109 --> 00:43:41,730
powerful but the problem is that if

1020
00:43:39,930 --> 00:43:43,740
there is an attacker controlled iframe

1021
00:43:41,730 --> 00:43:46,710
on the page an attacker can create a

1022
00:43:43,740 --> 00:43:49,709
complex CSS selector and query the

1023
00:43:46,710 --> 00:43:51,900
contents of an HTML attribute anywhere

1024
00:43:49,710 --> 00:43:54,690
on the page and using intersection

1025
00:43:51,900 --> 00:43:57,619
observer see if the iframe that the

1026
00:43:54,690 --> 00:44:00,859
attacker controls on the vulnerable page

1027
00:43:57,619 --> 00:44:03,180
was scrolled to and based on that leak

1028
00:44:00,859 --> 00:44:06,089
information and an attacker could repeat

1029
00:44:03,180 --> 00:44:10,379
it many times and steal arbitrary

1030
00:44:06,089 --> 00:44:12,270
secrets from from your page and thanks

1031
00:44:10,380 --> 00:44:14,579
to some of the consulting that happened

1032
00:44:12,270 --> 00:44:16,460
after the feature was proposed you know

1033
00:44:14,579 --> 00:44:19,910
it's changed shape to something

1034
00:44:16,460 --> 00:44:22,190
much safer in the end so you know we

1035
00:44:19,910 --> 00:44:24,759
will make we have the potential to make

1036
00:44:22,190 --> 00:44:28,190
mistakes as we evolved a web platform

1037
00:44:24,760 --> 00:44:30,980
and there are two things that we can do

1038
00:44:28,190 --> 00:44:34,040
to minimize the security impact of these

1039
00:44:30,980 --> 00:44:35,960
mistakes the first one is we should

1040
00:44:34,040 --> 00:44:38,570
review we should pay more attention to

1041
00:44:35,960 --> 00:44:42,320
new web api's that are that are being

1042
00:44:38,570 --> 00:44:45,170
proposed and we can create more secure

1043
00:44:42,320 --> 00:44:47,210
restrictive modes so that even if there

1044
00:44:45,170 --> 00:44:50,240
is a that would restrict pages that need

1045
00:44:47,210 --> 00:44:52,880
a need or want access to these powerful

1046
00:44:50,240 --> 00:44:54,709
api's and if we do this for example if

1047
00:44:52,880 --> 00:44:58,250
we make sure that if a page has access

1048
00:44:54,710 --> 00:45:01,310
to a powerful scary API every resource

1049
00:44:58,250 --> 00:45:03,950
loaded by this page is is a resource

1050
00:45:01,310 --> 00:45:05,779
that opted into being loaded then even

1051
00:45:03,950 --> 00:45:07,759
if some of these API end up leaking

1052
00:45:05,780 --> 00:45:09,830
information they could only leak

1053
00:45:07,760 --> 00:45:11,810
information from cooperating resources

1054
00:45:09,830 --> 00:45:13,759
the problem with this is that this slows

1055
00:45:11,810 --> 00:45:16,609
down feature development and that can

1056
00:45:13,760 --> 00:45:19,820
make browser developers and application

1057
00:45:16,609 --> 00:45:23,000
developers unhappy all right so this is

1058
00:45:19,820 --> 00:45:24,740
my last slide and I think there's a lot

1059
00:45:23,000 --> 00:45:28,310
to unpack the web has been around for

1060
00:45:24,740 --> 00:45:32,569
several decades and I think we are close

1061
00:45:28,310 --> 00:45:35,180
to to changing it into a platform that

1062
00:45:32,570 --> 00:45:37,310
is actually much safer than it was ever

1063
00:45:35,180 --> 00:45:39,290
before but to get there we need to do

1064
00:45:37,310 --> 00:45:41,570
three things first we need to implement

1065
00:45:39,290 --> 00:45:43,940
these security mechanisms we need to

1066
00:45:41,570 --> 00:45:46,040
implement them across all browsers and

1067
00:45:43,940 --> 00:45:48,530
we need to evangelize these security

1068
00:45:46,040 --> 00:45:51,650
mechanisms to web developers we need to

1069
00:45:48,530 --> 00:45:54,349
really think about which legacy web

1070
00:45:51,650 --> 00:45:57,349
features we want to keep in the platform

1071
00:45:54,349 --> 00:45:58,760
and which we can remove and finally we

1072
00:45:57,349 --> 00:46:00,380
should really pay attention to new web

1073
00:45:58,760 --> 00:46:03,890
platform features and help browser

1074
00:46:00,380 --> 00:46:05,119
vendors ship them safely and if we

1075
00:46:03,890 --> 00:46:08,598
cannot we should help them figure out

1076
00:46:05,119 --> 00:46:09,890
into alternatives all right thank you

1077
00:46:08,599 --> 00:46:12,609
very much I think we have a few minutes

1078
00:46:09,890 --> 00:46:12,609
for questions

1079
00:46:16,010 --> 00:46:20,010
please state your name and affiliation

1080
00:46:17,880 --> 00:46:24,260
before you ask your question thank you

1081
00:46:20,010 --> 00:46:27,930
okay re Trachtenberg Boston University

1082
00:46:24,260 --> 00:46:30,270
great talk I like to talk but I'm a

1083
00:46:27,930 --> 00:46:32,129
little confused that seems like what

1084
00:46:30,270 --> 00:46:34,770
you're saying is the way we need to fix

1085
00:46:32,130 --> 00:46:37,470
the web is by adding more complexity and

1086
00:46:34,770 --> 00:46:39,210
more attacker surface area and then you

1087
00:46:37,470 --> 00:46:42,029
proceeded to explain why that's a bad

1088
00:46:39,210 --> 00:46:43,800
idea is this really gonna solve the

1089
00:46:42,030 --> 00:46:46,140
problem or are we just gonna add more

1090
00:46:43,800 --> 00:46:48,000
problems that we don't understand so

1091
00:46:46,140 --> 00:46:51,348
this is this is a very legitimate good

1092
00:46:48,000 --> 00:46:53,760
question um I would separate features

1093
00:46:51,349 --> 00:46:55,470
security features from other web

1094
00:46:53,760 --> 00:46:57,390
platform features right the features

1095
00:46:55,470 --> 00:46:59,939
that we need are three or four

1096
00:46:57,390 --> 00:47:02,250
mechanisms that allow you to add

1097
00:46:59,940 --> 00:47:04,650
restrictions to your website to protect

1098
00:47:02,250 --> 00:47:08,339
it from certain classes of attacks that

1099
00:47:04,650 --> 00:47:11,760
is in contrast to dozens or hundreds of

1100
00:47:08,339 --> 00:47:14,040
new api's that add new functionality to

1101
00:47:11,760 --> 00:47:17,220
the platform so I would say that the

1102
00:47:14,040 --> 00:47:19,500
cost of adding this security complexity

1103
00:47:17,220 --> 00:47:21,450
to the web platform is justified right

1104
00:47:19,500 --> 00:47:23,809
because it's a tiny amount of work

1105
00:47:21,450 --> 00:47:26,009
compared to all the other adoption of

1106
00:47:23,809 --> 00:47:27,960
features that happens in the platform

1107
00:47:26,010 --> 00:47:30,270
that has a very measurable security

1108
00:47:27,960 --> 00:47:32,670
impact but of course there could be you

1109
00:47:30,270 --> 00:47:34,859
know security features that that seem

1110
00:47:32,670 --> 00:47:36,839
useful but end up not protecting against

1111
00:47:34,859 --> 00:47:38,400
the the vulnerabilities that they

1112
00:47:36,839 --> 00:47:41,099
thought they would protect and I would

1113
00:47:38,400 --> 00:47:42,869
say CSP in its original form is one of

1114
00:47:41,099 --> 00:47:44,910
those which is super complex and

1115
00:47:42,869 --> 00:47:46,710
everyone gets it wrong so and the only

1116
00:47:44,910 --> 00:47:49,319
thing I can say to this is that we

1117
00:47:46,710 --> 00:47:51,420
should think more and create better

1118
00:47:49,319 --> 00:47:52,920
security features but this is you know I

1119
00:47:51,420 --> 00:47:56,480
know it's kind of hand wavy we should

1120
00:47:52,920 --> 00:47:56,480
just be smarter than we were in the past

1121
00:47:56,930 --> 00:48:01,589
either Arthur my name is John will

1122
00:47:59,700 --> 00:48:04,290
endure I'm from the Apple web team and

1123
00:48:01,589 --> 00:48:05,930
this subject of course is super

1124
00:48:04,290 --> 00:48:10,430
important thank you for a great talk

1125
00:48:05,930 --> 00:48:14,160
so getting the web to this better place

1126
00:48:10,430 --> 00:48:16,799
could be done through carrots sticks or

1127
00:48:14,160 --> 00:48:18,808
both and I know we've tried some carrots

1128
00:48:16,799 --> 00:48:21,119
where we'd said you can only get access

1129
00:48:18,809 --> 00:48:23,609
to these new api's that you want if

1130
00:48:21,119 --> 00:48:25,290
you're a secure context for instance and

1131
00:48:23,609 --> 00:48:26,460
we could push further we could even say

1132
00:48:25,290 --> 00:48:29,220
that you need to run

1133
00:48:26,460 --> 00:48:31,740
same TSP otherwise you don't get get

1134
00:48:29,220 --> 00:48:33,959
access to these api's but comparing it

1135
00:48:31,740 --> 00:48:36,868
to native platforms such as for instance

1136
00:48:33,960 --> 00:48:40,109
iOS or Android there we have a different

1137
00:48:36,869 --> 00:48:42,330
way of doing it because we ship SDK so

1138
00:48:40,109 --> 00:48:46,049
we ship the platform with the API s and

1139
00:48:42,330 --> 00:48:48,900
we can do special stuff saying that when

1140
00:48:46,050 --> 00:48:52,140
you compile the next time you can no

1141
00:48:48,900 --> 00:48:55,109
longer use these api's and we don't have

1142
00:48:52,140 --> 00:48:57,480
that it's referred to by us as linked on

1143
00:48:55,109 --> 00:48:59,369
or after checks so we can say the next

1144
00:48:57,480 --> 00:49:01,320
version of iOS you can no longer do this

1145
00:48:59,369 --> 00:49:03,089
thing we removed or deprecated or

1146
00:49:01,320 --> 00:49:04,530
obsolete to this thing and we don't

1147
00:49:03,089 --> 00:49:07,980
really have that on the web

1148
00:49:04,530 --> 00:49:10,200
say we could come up with it meaning is

1149
00:49:07,980 --> 00:49:12,750
it worthwhile hunting down such a thing

1150
00:49:10,200 --> 00:49:15,299
do you believe we could do such a thing

1151
00:49:12,750 --> 00:49:18,170
to not only caret saying hey you get

1152
00:49:15,300 --> 00:49:20,369
access to API so you're secure but also

1153
00:49:18,170 --> 00:49:23,520
the next time you change your website

1154
00:49:20,369 --> 00:49:25,800
you can no longer use this API I think

1155
00:49:23,520 --> 00:49:27,780
yes this is a great idea and we should

1156
00:49:25,800 --> 00:49:30,240
do this we haven't done this a lot but

1157
00:49:27,780 --> 00:49:32,130
the success that chrome has had with for

1158
00:49:30,240 --> 00:49:33,689
example pushing not secure as the

1159
00:49:32,130 --> 00:49:35,940
indicator that you see in the address

1160
00:49:33,690 --> 00:49:38,130
bar shows that we can do this and we can

1161
00:49:35,940 --> 00:49:40,080
do this kind of subtly just by saying oh

1162
00:49:38,130 --> 00:49:42,510
this website is not secure and we can

1163
00:49:40,080 --> 00:49:44,160
start breaking access to some api's in

1164
00:49:42,510 --> 00:49:46,680
ways that you know we don't want to

1165
00:49:44,160 --> 00:49:48,390
cause a web white breakage but I think

1166
00:49:46,680 --> 00:49:50,549
we should cause more breakage than we

1167
00:49:48,390 --> 00:49:53,460
have before because it's a good

1168
00:49:50,550 --> 00:49:54,660
trade-off we should talk more about this

1169
00:49:53,460 --> 00:49:56,640
in the future too I'm not sure if we

1170
00:49:54,660 --> 00:49:58,259
have time for one more question yeah we

1171
00:49:56,640 --> 00:49:59,910
can take one more question and then the

1172
00:49:58,260 --> 00:50:02,250
rest will have to take offline sorry

1173
00:49:59,910 --> 00:50:05,609
guys been shot from saspa excellent talk

1174
00:50:02,250 --> 00:50:08,369
thank you one thing that I was thinking

1175
00:50:05,609 --> 00:50:09,990
about so trusted types in particular it

1176
00:50:08,369 --> 00:50:12,089
sounds like a nice idea but let's say

1177
00:50:09,990 --> 00:50:13,950
that I'm a developer at company X and my

1178
00:50:12,089 --> 00:50:16,500
main goals for this year is to implement

1179
00:50:13,950 --> 00:50:18,480
trusted types what I will do is I will

1180
00:50:16,500 --> 00:50:21,240
create a default policy which takes a

1181
00:50:18,480 --> 00:50:23,670
string and creates a safe HTML type out

1182
00:50:21,240 --> 00:50:25,859
of this do you think there's some way in

1183
00:50:23,670 --> 00:50:27,990
which you could somehow punish this or

1184
00:50:25,859 --> 00:50:29,069
make this infeasible because right now

1185
00:50:27,990 --> 00:50:31,319
it seems like if there's a security

1186
00:50:29,070 --> 00:50:32,790
mechanism the developer will find a

1187
00:50:31,320 --> 00:50:34,260
functional way around the security

1188
00:50:32,790 --> 00:50:36,180
mechanism and break the security

1189
00:50:34,260 --> 00:50:38,420
mechanism it's definitely possible to

1190
00:50:36,180 --> 00:50:40,430
have trusted types and

1191
00:50:38,420 --> 00:50:43,580
still have security vulnerabilities

1192
00:50:40,430 --> 00:50:46,339
right this is a it's a programmatic API

1193
00:50:43,580 --> 00:50:48,290
not a declarative one we cannot protect

1194
00:50:46,340 --> 00:50:51,290
developers from shooting themselves in

1195
00:50:48,290 --> 00:50:52,670
the foot I would argue that just the

1196
00:50:51,290 --> 00:50:55,430
fact that you're reducing the attack

1197
00:50:52,670 --> 00:50:58,040
surface from all of your JavaScript to

1198
00:50:55,430 --> 00:51:00,259
this potentially one function is a

1199
00:50:58,040 --> 00:51:02,330
qualitative improvement in security and

1200
00:51:00,260 --> 00:51:05,330
you can still obviously mess up that one

1201
00:51:02,330 --> 00:51:07,610
function and but maybe then it will be

1202
00:51:05,330 --> 00:51:10,100
more tractable to build you know static

1203
00:51:07,610 --> 00:51:13,040
analysis do dynamic analysis on these

1204
00:51:10,100 --> 00:51:15,950
functions or build services that will

1205
00:51:13,040 --> 00:51:17,720
tell you oh this one function is is safe

1206
00:51:15,950 --> 00:51:20,750
that therefore you don't have Dom XSS

1207
00:51:17,720 --> 00:51:22,939
but I completely agree there will still

1208
00:51:20,750 --> 00:51:24,650
be Dom XSS even if you have trusted

1209
00:51:22,940 --> 00:51:26,660
types of you if you mess up there but we

1210
00:51:24,650 --> 00:51:29,060
should think about how we can reduce the

1211
00:51:26,660 --> 00:51:31,359
likelihood that it will happen thank you

1212
00:51:29,060 --> 00:51:37,058
okay thank you

1213
00:51:31,360 --> 00:51:37,059
[Applause]

