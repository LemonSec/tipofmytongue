1
00:00:11,009 --> 00:00:16,340
so our paper of the ultra long title

2
00:00:13,759 --> 00:00:19,180
discusses the security of data on blue

3
00:00:16,340 --> 00:00:25,070
with low energy devices I'm sorry Oh

4
00:00:19,180 --> 00:00:26,990
should I speak louder okay discusses the

5
00:00:25,070 --> 00:00:29,090
security of data on Bluetooth low-energy

6
00:00:26,990 --> 00:00:32,989
devices when accessed by Android

7
00:00:29,090 --> 00:00:35,750
applications so begin by giving a brief

8
00:00:32,989 --> 00:00:39,440
overview on their taxes mechanisms with

9
00:00:35,750 --> 00:00:41,390
Bluetooth Low Energy with Bluetooth Low

10
00:00:39,440 --> 00:00:44,030
Energy unlike with classic Bluetooth

11
00:00:41,390 --> 00:00:46,129
data is handled primarily as small

12
00:00:44,030 --> 00:00:48,260
discrete values and these are referred

13
00:00:46,129 --> 00:00:50,329
to as attributes there are different

14
00:00:48,260 --> 00:00:51,829
types of attributes and the type that we

15
00:00:50,329 --> 00:00:53,840
are most interested in are called

16
00:00:51,829 --> 00:00:55,969
characteristic value attributes and

17
00:00:53,840 --> 00:00:58,340
these are the actual data values of

18
00:00:55,969 --> 00:01:00,260
interest so for example a characteristic

19
00:00:58,340 --> 00:01:02,210
value could hold a user's heart rate

20
00:01:00,260 --> 00:01:04,819
measurement or cycling speed it could

21
00:01:02,210 --> 00:01:08,570
also hold the speed of a ble enabled

22
00:01:04,819 --> 00:01:10,729
hoverboard accessing a characteristic

23
00:01:08,570 --> 00:01:12,740
value is fairly straightforward you send

24
00:01:10,729 --> 00:01:14,270
a request and you get a response there

25
00:01:12,740 --> 00:01:17,539
are other access mechanisms but I'll

26
00:01:14,270 --> 00:01:18,649
only be focusing on request responses so

27
00:01:17,539 --> 00:01:20,390
while it could be a fairly

28
00:01:18,649 --> 00:01:22,039
straightforward process there are

29
00:01:20,390 --> 00:01:23,959
occasions where we might not want it to

30
00:01:22,039 --> 00:01:25,910
be quite this straightforward because

31
00:01:23,959 --> 00:01:29,000
the characteristic value holds data that

32
00:01:25,910 --> 00:01:30,649
is either sensitive or critical so if as

33
00:01:29,000 --> 00:01:32,209
I mentioned a characteristic value holds

34
00:01:30,649 --> 00:01:34,009
a user's heart rate or glucose

35
00:01:32,209 --> 00:01:36,050
measurement then that data has

36
00:01:34,009 --> 00:01:37,759
associated privacy concerns and we

37
00:01:36,050 --> 00:01:40,539
wouldn't want random people reading that

38
00:01:37,759 --> 00:01:42,830
information if on the other hand the

39
00:01:40,539 --> 00:01:44,720
characteristic value controls the speed

40
00:01:42,830 --> 00:01:45,380
or the movement of a ble enabled

41
00:01:44,720 --> 00:01:47,720
hoverboard

42
00:01:45,380 --> 00:01:49,250
then that data has safety implications

43
00:01:47,720 --> 00:01:51,349
and we wouldn't want random entities

44
00:01:49,250 --> 00:01:52,759
being able to write to it and so there

45
00:01:51,349 --> 00:01:57,259
are occasions where we would want to

46
00:01:52,759 --> 00:01:59,360
control access to the characteristics if

47
00:01:57,259 --> 00:02:00,830
we have to do this natively then we

48
00:01:59,360 --> 00:02:02,690
would assign permissions to the

49
00:02:00,830 --> 00:02:05,000
characteristics auto attributes in

50
00:02:02,690 --> 00:02:06,950
general so there are three different

51
00:02:05,000 --> 00:02:08,690
types of permissions and only the first

52
00:02:06,950 --> 00:02:11,660
two are actually fully defined within

53
00:02:08,690 --> 00:02:13,459
the Bluetooth specification access

54
00:02:11,660 --> 00:02:15,739
permissions essentially say whether or

55
00:02:13,459 --> 00:02:18,410
not an attribute can be read and or

56
00:02:15,739 --> 00:02:20,300
written authentication permissions

57
00:02:18,410 --> 00:02:22,400
restrict access to an attribute by

58
00:02:20,300 --> 00:02:24,260
requiring that the access request come

59
00:02:22,400 --> 00:02:26,780
over and authenticate an encrypted link

60
00:02:24,260 --> 00:02:28,060
and the way we get such an authenticated

61
00:02:26,780 --> 00:02:30,270
and encrypted link is

62
00:02:28,060 --> 00:02:32,440
pairing and we have termed

63
00:02:30,270 --> 00:02:33,970
characteristics which have associated

64
00:02:32,440 --> 00:02:36,849
authentication permissions as being

65
00:02:33,970 --> 00:02:38,410
pairing protected authorization

66
00:02:36,849 --> 00:02:42,760
permissions are implementation-specific

67
00:02:38,410 --> 00:02:44,769
and are left left up to developers so if

68
00:02:42,760 --> 00:02:47,170
we take the most common use case

69
00:02:44,769 --> 00:02:50,200
especially in the consumer scenario of a

70
00:02:47,170 --> 00:02:54,488
ble device that interfaces with a mobile

71
00:02:50,200 --> 00:02:56,980
application we ask ourselves where the

72
00:02:54,489 --> 00:02:58,989
device has an official application that

73
00:02:56,980 --> 00:03:00,880
it's supposed to interface with would

74
00:02:58,989 --> 00:03:03,069
another unauthorized application

75
00:03:00,880 --> 00:03:04,900
residing on the same mobile device be

76
00:03:03,069 --> 00:03:09,130
able to access pairing protected data

77
00:03:04,900 --> 00:03:11,560
from the ble device and to test this we

78
00:03:09,130 --> 00:03:14,140
prototype the ble device using the

79
00:03:11,560 --> 00:03:17,110
nordic development kit and our device

80
00:03:14,140 --> 00:03:19,119
has a protected characteristic on it we

81
00:03:17,110 --> 00:03:21,730
also develop two Android applications

82
00:03:19,120 --> 00:03:23,230
one which is a good app and which is

83
00:03:21,730 --> 00:03:25,390
supposed to be able to access the

84
00:03:23,230 --> 00:03:27,340
protected characteristic and another

85
00:03:25,390 --> 00:03:29,980
which is the malicious app which is not

86
00:03:27,340 --> 00:03:31,720
supposed to be and I should say that the

87
00:03:29,980 --> 00:03:33,760
two applications have essentially the

88
00:03:31,720 --> 00:03:35,859
same functionality the difference is

89
00:03:33,760 --> 00:03:40,630
mainly in terms of user expectation and

90
00:03:35,859 --> 00:03:43,540
awareness so in the first unauthorized

91
00:03:40,630 --> 00:03:45,970
data access scenario we launched our

92
00:03:43,540 --> 00:03:47,950
good application and it scans for and

93
00:03:45,970 --> 00:03:49,750
connects to our ble device and issues a

94
00:03:47,950 --> 00:03:52,119
request for accessing the protected

95
00:03:49,750 --> 00:03:54,130
characteristic because the two devices

96
00:03:52,120 --> 00:03:56,200
don't have a trust relationship at this

97
00:03:54,130 --> 00:03:58,540
point this will result in an

98
00:03:56,200 --> 00:03:59,888
insufficient authentication error and as

99
00:03:58,540 --> 00:04:02,078
soon as the Android operating system

100
00:03:59,889 --> 00:04:05,530
sees this error it will initiate the

101
00:04:02,079 --> 00:04:07,030
pairing process and at this point it may

102
00:04:05,530 --> 00:04:09,160
be the first time that the user becomes

103
00:04:07,030 --> 00:04:11,680
aware that this application is trying to

104
00:04:09,160 --> 00:04:13,090
access data from their ble device and I

105
00:04:11,680 --> 00:04:15,400
should mention here that I only consider

106
00:04:13,090 --> 00:04:18,728
strong pairing mechanisms where I user

107
00:04:15,400 --> 00:04:20,108
interaction is actually required so if

108
00:04:18,728 --> 00:04:22,570
the user decides to go ahead with

109
00:04:20,108 --> 00:04:25,000
pairing then the two devices will

110
00:04:22,570 --> 00:04:26,950
generate keys encrypt the transport

111
00:04:25,000 --> 00:04:28,630
between them and then typically go

112
00:04:26,950 --> 00:04:31,659
through a process called bonding where

113
00:04:28,630 --> 00:04:33,010
long term keys are generated if the good

114
00:04:31,660 --> 00:04:35,020
app tries to read or write

115
00:04:33,010 --> 00:04:37,330
the pairing protected characteristic

116
00:04:35,020 --> 00:04:39,130
from that point onwards it will be met

117
00:04:37,330 --> 00:04:41,950
with valid responses because the request

118
00:04:39,130 --> 00:04:44,060
will be coming over the encrypted link

119
00:04:41,950 --> 00:04:45,680
so now let's say our good luck

120
00:04:44,060 --> 00:04:47,420
disconnects and our malicious

121
00:04:45,680 --> 00:04:50,630
application scans for and connects to

122
00:04:47,420 --> 00:04:52,400
the device what we saw from Android ble

123
00:04:50,630 --> 00:04:54,670
logs is that as soon as the connection

124
00:04:52,400 --> 00:04:56,570
takes place the Android operating system

125
00:04:54,670 --> 00:04:58,490
automatically encrypts the link

126
00:04:56,570 --> 00:04:59,780
presumably using the credentials that

127
00:04:58,490 --> 00:05:02,030
were generated during the previous

128
00:04:59,780 --> 00:05:04,390
pairing process this means that the

129
00:05:02,030 --> 00:05:06,770
malicious application has this automatic

130
00:05:04,390 --> 00:05:08,780
encrypted link over which it can issue

131
00:05:06,770 --> 00:05:10,729
read/write requests for the pairing a

132
00:05:08,780 --> 00:05:13,369
protected characteristic and get valid

133
00:05:10,730 --> 00:05:15,410
responses and the thing here is that the

134
00:05:13,370 --> 00:05:18,040
user won't be aware because link wray

135
00:05:15,410 --> 00:05:20,360
encryption usually takes place silently

136
00:05:18,040 --> 00:05:22,400
now this happens because pairing

137
00:05:20,360 --> 00:05:24,740
essentially happens between devices

138
00:05:22,400 --> 00:05:26,960
rather than between the application

139
00:05:24,740 --> 00:05:29,240
layers and if in fact it happens between

140
00:05:26,960 --> 00:05:31,039
the lower layers of the ble stack so

141
00:05:29,240 --> 00:05:32,840
that means that the pairing is going to

142
00:05:31,040 --> 00:05:37,010
be common to all the applications of the

143
00:05:32,840 --> 00:05:39,349
requesting device a similar result was

144
00:05:37,010 --> 00:05:41,930
identified for classic Bluetooth a few

145
00:05:39,350 --> 00:05:43,850
years ago by Naveed at all but with

146
00:05:41,930 --> 00:05:45,560
Bluetooth Low Energy a malicious

147
00:05:43,850 --> 00:05:47,210
application is able to access data in

148
00:05:45,560 --> 00:05:50,510
ways that would not be possible with

149
00:05:47,210 --> 00:05:52,250
classic Bluetooth so that brings us to

150
00:05:50,510 --> 00:05:54,560
our second unauthorized data access

151
00:05:52,250 --> 00:05:56,240
scenario and we start afresh we remove

152
00:05:54,560 --> 00:05:58,250
the existing pairing credentials from

153
00:05:56,240 --> 00:06:00,980
both devices and we launch our good app

154
00:05:58,250 --> 00:06:02,630
again it scans for and connects triggers

155
00:06:00,980 --> 00:06:05,150
the pairing exchange and results in an

156
00:06:02,630 --> 00:06:06,380
encrypted link as before this time

157
00:06:05,150 --> 00:06:08,719
though let's say that the good duck

158
00:06:06,380 --> 00:06:10,760
doesn't disconnect so while it's still

159
00:06:08,720 --> 00:06:12,830
communicating with the ble device a

160
00:06:10,760 --> 00:06:14,780
malicious application that's running at

161
00:06:12,830 --> 00:06:16,640
the same time can issue a get connected

162
00:06:14,780 --> 00:06:18,500
devices command and this will return a

163
00:06:16,640 --> 00:06:19,880
list of the Bluetooth devices that are

164
00:06:18,500 --> 00:06:22,220
currently in a connection with the

165
00:06:19,880 --> 00:06:23,960
Android device the malicious app can

166
00:06:22,220 --> 00:06:26,210
then select our cast device from that

167
00:06:23,960 --> 00:06:27,530
list and connect or make use of the

168
00:06:26,210 --> 00:06:29,900
existing connections it can piggyback

169
00:06:27,530 --> 00:06:32,809
onto the connection and issue readwrite

170
00:06:29,900 --> 00:06:34,640
requests for the characteristic so this

171
00:06:32,810 --> 00:06:36,200
is a form of opportunistic data access

172
00:06:34,640 --> 00:06:39,560
which is not possible with classic

173
00:06:36,200 --> 00:06:42,620
Bluetooth in classic Bluetooth as Naveed

174
00:06:39,560 --> 00:06:44,150
at all found an application creates a

175
00:06:42,620 --> 00:06:46,310
socket connection to a Bluetooth device

176
00:06:44,150 --> 00:06:46,880
and while one application is in a

177
00:06:46,310 --> 00:06:49,240
connection

178
00:06:46,880 --> 00:06:51,950
another cannot connect but with ble

179
00:06:49,240 --> 00:06:53,599
multiple applications on the same device

180
00:06:51,950 --> 00:06:58,068
can share the same connect

181
00:06:53,599 --> 00:06:59,748
to a ble device another interesting

182
00:06:58,069 --> 00:07:01,219
thing to note here is that the malicious

183
00:06:59,749 --> 00:07:04,610
application didn't need to perform

184
00:07:01,219 --> 00:07:06,889
scanning so if we go back the good app

185
00:07:04,610 --> 00:07:08,539
scan for and connected to the ble device

186
00:07:06,889 --> 00:07:10,429
but because the malicious application

187
00:07:08,539 --> 00:07:12,860
uses an existing connection it didn't

188
00:07:10,429 --> 00:07:14,659
need to perform scanning and this has an

189
00:07:12,860 --> 00:07:16,069
interesting impact on the permissions

190
00:07:14,659 --> 00:07:19,669
that need to be requested by the two

191
00:07:16,069 --> 00:07:21,619
applications so because our good app

192
00:07:19,669 --> 00:07:24,169
performs scanning and we consider

193
00:07:21,619 --> 00:07:25,909
scanning without a scan filter it needs

194
00:07:24,169 --> 00:07:28,339
to request the Bluetooth and Bluetooth

195
00:07:25,909 --> 00:07:29,959
admin permissions and from Android 6.0

196
00:07:28,339 --> 00:07:32,180
onwards it also needs to request

197
00:07:29,959 --> 00:07:33,740
location permissions and because

198
00:07:32,180 --> 00:07:35,899
location permissions are considered to

199
00:07:33,740 --> 00:07:37,309
be dangerous permissions the first time

200
00:07:35,899 --> 00:07:39,050
that the good app is launched a

201
00:07:37,309 --> 00:07:40,849
confirmation dialog is going to be

202
00:07:39,050 --> 00:07:42,199
displayed to the user asking them

203
00:07:40,849 --> 00:07:43,819
whether they're okay with the fact that

204
00:07:42,199 --> 00:07:46,399
this application is accessing their

205
00:07:43,819 --> 00:07:48,619
location because on the other hand the

206
00:07:46,399 --> 00:07:50,659
malicious application doesn't perform

207
00:07:48,619 --> 00:07:52,580
scanning it only needs to request the

208
00:07:50,659 --> 00:07:54,080
Bluetooth permission and because this is

209
00:07:52,580 --> 00:07:55,789
not a dangerous permission

210
00:07:54,080 --> 00:07:57,740
there will be no confirmation dialog and

211
00:07:55,789 --> 00:07:59,209
from the users point of view the

212
00:07:57,740 --> 00:08:01,189
malicious application is going to seem

213
00:07:59,209 --> 00:08:02,779
more benign than even the good app and

214
00:08:01,189 --> 00:08:04,459
this could influence the number of

215
00:08:02,779 --> 00:08:08,419
downloads that the malicious application

216
00:08:04,459 --> 00:08:12,019
can generate so we've seen that it is

217
00:08:08,419 --> 00:08:14,568
possible for unauthorized applications

218
00:08:12,019 --> 00:08:17,180
to access data pairing protected data

219
00:08:14,569 --> 00:08:18,949
from ble devices so a question would

220
00:08:17,180 --> 00:08:22,699
then probably be what would we do to

221
00:08:18,949 --> 00:08:24,439
protect the ble data and ideally what we

222
00:08:22,699 --> 00:08:26,629
want is a solution where protection

223
00:08:24,439 --> 00:08:29,180
extends from the ble device all the way

224
00:08:26,629 --> 00:08:32,149
up to the application on the requesting

225
00:08:29,180 --> 00:08:34,130
device they show is that there are

226
00:08:32,149 --> 00:08:35,870
multiple stakeholders within the ble

227
00:08:34,130 --> 00:08:37,729
ecosystem and it's difficult to

228
00:08:35,870 --> 00:08:39,679
determine which stakeholders should be

229
00:08:37,729 --> 00:08:43,159
responsible for making the changes that

230
00:08:39,679 --> 00:08:45,199
would safeguard data so just based on

231
00:08:43,159 --> 00:08:47,149
the data access scenarios I've shown it

232
00:08:45,199 --> 00:08:49,370
might seem that Android needs to be the

233
00:08:47,149 --> 00:08:51,620
one to make the changes to for example

234
00:08:49,370 --> 00:08:53,540
not allow multiple applications to share

235
00:08:51,620 --> 00:08:55,160
a connection and also maybe to do

236
00:08:53,540 --> 00:08:57,110
something like associate pairing

237
00:08:55,160 --> 00:08:59,779
credentials with the application that

238
00:08:57,110 --> 00:09:02,449
originally triggered the pairing the

239
00:08:59,779 --> 00:09:04,850
thing is that pairing and the fact that

240
00:09:02,449 --> 00:09:06,109
it happens between say the lower layers

241
00:09:04,850 --> 00:09:07,820
of the ble stack

242
00:09:06,110 --> 00:09:10,279
is something that's defined within the

243
00:09:07,820 --> 00:09:11,990
Bluetooth specification itself and so

244
00:09:10,279 --> 00:09:14,000
maybe the specification needs to be

245
00:09:11,990 --> 00:09:15,589
modified or perhaps added to to

246
00:09:14,000 --> 00:09:17,269
incorporate additional protection

247
00:09:15,589 --> 00:09:20,839
mechanisms that extend all the way up to

248
00:09:17,269 --> 00:09:22,399
the application layer in addition the

249
00:09:20,839 --> 00:09:24,380
Bluetooth special interest group who

250
00:09:22,399 --> 00:09:26,779
define and maintain the specification

251
00:09:24,380 --> 00:09:29,060
also define things called profiles which

252
00:09:26,779 --> 00:09:30,920
can be implemented by ble devices and

253
00:09:29,060 --> 00:09:32,268
there are profiles for different things

254
00:09:30,920 --> 00:09:33,529
so for example there's a heartrate

255
00:09:32,269 --> 00:09:35,839
profile and a glucose measurement

256
00:09:33,529 --> 00:09:37,760
profile and within these profiles

257
00:09:35,839 --> 00:09:40,040
pairing is specified as the only

258
00:09:37,760 --> 00:09:42,319
security mechanism so it would seem from

259
00:09:40,040 --> 00:09:45,199
them that pairing is sufficient for

260
00:09:42,320 --> 00:09:47,870
handling of a protecting sensitive data

261
00:09:45,200 --> 00:09:49,519
and we've seen that it's not so in

262
00:09:47,870 --> 00:09:51,440
addition to modifying the specification

263
00:09:49,519 --> 00:09:53,089
perhaps the special interest group

264
00:09:51,440 --> 00:09:57,170
should also modify these profiles as

265
00:09:53,089 --> 00:09:59,060
well the thing is that ble has this sort

266
00:09:57,170 --> 00:10:01,279
of promise of flexibility that a user

267
00:09:59,060 --> 00:10:04,459
should not be tied to one application

268
00:10:01,279 --> 00:10:05,959
that they should be able to download and

269
00:10:04,459 --> 00:10:08,630
use multiple applications with their

270
00:10:05,959 --> 00:10:11,060
devices if they want to and so any

271
00:10:08,630 --> 00:10:13,579
protection mechanism they create there

272
00:10:11,060 --> 00:10:15,410
has to be some way for them to allow

273
00:10:13,579 --> 00:10:17,660
multiple applications that the user

274
00:10:15,410 --> 00:10:19,399
specifically authorizes to connect to

275
00:10:17,660 --> 00:10:24,170
their ble device while disallowing

276
00:10:19,399 --> 00:10:25,730
everything else the problem is that both

277
00:10:24,170 --> 00:10:28,670
of these like if either one of these

278
00:10:25,730 --> 00:10:30,260
entities are to create any changes then

279
00:10:28,670 --> 00:10:32,029
there will be some design and

280
00:10:30,260 --> 00:10:33,770
development effort involved and it's not

281
00:10:32,029 --> 00:10:36,980
going to happen in the immediate term

282
00:10:33,770 --> 00:10:39,050
and so right now like it or not it's

283
00:10:36,980 --> 00:10:41,029
probably up to the ble developers to

284
00:10:39,050 --> 00:10:44,779
implement into and security if we want

285
00:10:41,029 --> 00:10:46,160
our ble data to be safeguarded and that

286
00:10:44,779 --> 00:10:48,949
brought us on to our next question which

287
00:10:46,160 --> 00:10:51,410
was what proportion of ble devices out

288
00:10:48,949 --> 00:10:54,920
there right now actually have such into

289
00:10:51,410 --> 00:10:56,719
n protection for their data so we're

290
00:10:54,920 --> 00:10:59,689
saying data traverses between a ble

291
00:10:56,720 --> 00:11:01,190
device and an application and we want to

292
00:10:59,690 --> 00:11:03,589
know how much of the data is protected

293
00:11:01,190 --> 00:11:06,829
end to end and by protection I do mean

294
00:11:03,589 --> 00:11:08,630
cryptographic ultratech sure and to test

295
00:11:06,829 --> 00:11:10,640
this we could either test the ble

296
00:11:08,630 --> 00:11:13,790
firmware or we could test the mobile

297
00:11:10,640 --> 00:11:15,470
applications and android apk is in

298
00:11:13,790 --> 00:11:17,670
particular are much easier to come by

299
00:11:15,470 --> 00:11:20,460
and easier to decompile and analyze

300
00:11:17,670 --> 00:11:23,939
than ble firmware and so we went the apk

301
00:11:20,460 --> 00:11:25,950
away we developed a Python tool called

302
00:11:23,940 --> 00:11:28,950
ble crip tracer which would analyze

303
00:11:25,950 --> 00:11:31,320
Android apks and try and identify the

304
00:11:28,950 --> 00:11:33,840
presence of a link between ble data and

305
00:11:31,320 --> 00:11:36,540
crypto functions so the tool does this

306
00:11:33,840 --> 00:11:38,130
by using and regard to decompile apks

307
00:11:36,540 --> 00:11:40,949
and obtain the intermediate small e

308
00:11:38,130 --> 00:11:44,250
representation it then identifies any

309
00:11:40,950 --> 00:11:48,000
beta ble data access calls within the

310
00:11:44,250 --> 00:11:49,680
code and from that point it will try and

311
00:11:48,000 --> 00:11:51,870
trace through the code to see whether

312
00:11:49,680 --> 00:11:53,550
the ble data hits a cryptographic

313
00:11:51,870 --> 00:11:55,080
function on the way which would indicate

314
00:11:53,550 --> 00:11:58,740
that the data has been cryptographically

315
00:11:55,080 --> 00:12:00,870
processed at all does this in three

316
00:11:58,740 --> 00:12:02,550
different stages and in the first stage

317
00:12:00,870 --> 00:12:05,850
it tries to identify the most direct

318
00:12:02,550 --> 00:12:07,500
link possible between ble data and

319
00:12:05,850 --> 00:12:09,870
crypto functions and it does this by

320
00:12:07,500 --> 00:12:11,790
considering only direct register or

321
00:12:09,870 --> 00:12:13,590
field value transfers as well as the

322
00:12:11,790 --> 00:12:15,870
results of immediate method invocations

323
00:12:13,590 --> 00:12:18,630
and if a link is identified in this

324
00:12:15,870 --> 00:12:20,490
manner then the result is given a

325
00:12:18,630 --> 00:12:21,810
confidence level of high because we're

326
00:12:20,490 --> 00:12:25,020
fairly certain that cryptographically

327
00:12:21,810 --> 00:12:27,390
processed data will actually exist if a

328
00:12:25,020 --> 00:12:28,290
direct link cannot be identified then

329
00:12:27,390 --> 00:12:30,090
the tool will

330
00:12:28,290 --> 00:12:32,310
in addition consider abstract and

331
00:12:30,090 --> 00:12:34,050
interface methods as well as registers

332
00:12:32,310 --> 00:12:36,930
that were used as arguments to

333
00:12:34,050 --> 00:12:38,819
previously encountered methods and if a

334
00:12:36,930 --> 00:12:41,099
link is identified using this method

335
00:12:38,820 --> 00:12:43,500
then because there's some level of

336
00:12:41,100 --> 00:12:46,710
uncertainty involved the result will be

337
00:12:43,500 --> 00:12:49,380
given a confidence level of medium if

338
00:12:46,710 --> 00:12:52,680
neither method actually produces a

339
00:12:49,380 --> 00:12:54,990
result then the tool will look through

340
00:12:52,680 --> 00:12:56,459
every instruction of every method that

341
00:12:54,990 --> 00:12:58,680
was previously encountered which

342
00:12:56,460 --> 00:13:02,010
originated from the ble data access call

343
00:12:58,680 --> 00:13:04,709
and if any of those instructions contain

344
00:13:02,010 --> 00:13:06,300
a reference to crypto then the result

345
00:13:04,710 --> 00:13:07,230
will be given a confidence level of low

346
00:13:06,300 --> 00:13:11,219
because there's quite a lot of

347
00:13:07,230 --> 00:13:12,960
uncertainty involved we tested our tool

348
00:13:11,220 --> 00:13:15,090
against the Droid bench benchmarking

349
00:13:12,960 --> 00:13:18,210
suite which was modified for the ble

350
00:13:15,090 --> 00:13:19,770
case and we found that in general the

351
00:13:18,210 --> 00:13:22,200
results from our tool at confidence

352
00:13:19,770 --> 00:13:25,140
level high were on par with other cain't

353
00:13:22,200 --> 00:13:27,030
analysis tools but ble crypt racer was

354
00:13:25,140 --> 00:13:28,980
better suited for that specific use case

355
00:13:27,030 --> 00:13:31,459
of identifying end-to-end protection for

356
00:13:28,980 --> 00:13:31,460
ble date

357
00:13:31,550 --> 00:13:37,319
we also executed our tool against almost

358
00:13:34,440 --> 00:13:39,630
19,000 real-world apks that have ble

359
00:13:37,320 --> 00:13:42,450
data access calls and these are the

360
00:13:39,630 --> 00:13:44,640
results at a high level because of the

361
00:13:42,450 --> 00:13:46,530
uncertainty I mentioned with results at

362
00:13:44,640 --> 00:13:50,220
medium and low I'm only going to focus

363
00:13:46,530 --> 00:13:52,439
on those results that either from where

364
00:13:50,220 --> 00:13:54,660
an apk was identified as having crypto

365
00:13:52,440 --> 00:13:56,700
with high confidence or where no crypto

366
00:13:54,660 --> 00:13:58,969
was identified at all and we can see

367
00:13:56,700 --> 00:14:01,680
that almost half of all a peak is

368
00:13:58,970 --> 00:14:05,520
actually don't seem to have into and

369
00:14:01,680 --> 00:14:07,290
protection for their ble data we

370
00:14:05,520 --> 00:14:09,480
analyzed our results further and we

371
00:14:07,290 --> 00:14:11,849
found that more than half of the apks we

372
00:14:09,480 --> 00:14:13,410
tested actually made use of third-party

373
00:14:11,850 --> 00:14:15,300
libraries to incorporate ble

374
00:14:13,410 --> 00:14:16,829
functionality so these could be wrapper

375
00:14:15,300 --> 00:14:20,660
functions or they could be something

376
00:14:16,830 --> 00:14:23,640
like beacon libraries and interestingly

377
00:14:20,660 --> 00:14:25,110
those applications that use third-party

378
00:14:23,640 --> 00:14:27,210
libraries were more likely to have

379
00:14:25,110 --> 00:14:29,070
end-to-end protection with a ble data

380
00:14:27,210 --> 00:14:30,810
than applications where the ble

381
00:14:29,070 --> 00:14:35,520
functionality was incorporated by the

382
00:14:30,810 --> 00:14:38,099
developer themselves in fact one

383
00:14:35,520 --> 00:14:41,040
particular beacon library actually

384
00:14:38,100 --> 00:14:43,230
accounted for over 85 percent of all the

385
00:14:41,040 --> 00:14:47,670
cases where we identified crypto with

386
00:14:43,230 --> 00:14:49,560
high confidence we then I am analyzed

387
00:14:47,670 --> 00:14:51,599
our results in terms of the Google Play

388
00:14:49,560 --> 00:14:54,630
categories that the AP case fell under

389
00:14:51,600 --> 00:14:56,670
and we saw that interestingly AP case

390
00:14:54,630 --> 00:14:58,680
that were on the medical was some of the

391
00:14:56,670 --> 00:15:00,660
least likely to have into n protection

392
00:14:58,680 --> 00:15:02,040
for the RB le data and this seems

393
00:15:00,660 --> 00:15:03,360
strange because you would assume that

394
00:15:02,040 --> 00:15:06,660
there'd be the most likely to have

395
00:15:03,360 --> 00:15:08,850
protection but then we analyzed a subset

396
00:15:06,660 --> 00:15:11,459
of these apks and we found that some of

397
00:15:08,850 --> 00:15:13,680
them at least made use of the official

398
00:15:11,460 --> 00:15:15,540
ble profiles in which powering is

399
00:15:13,680 --> 00:15:17,489
Pradesh fide as the only protection

400
00:15:15,540 --> 00:15:22,800
mechanism so that could account for at

401
00:15:17,490 --> 00:15:26,330
least part of these results further we

402
00:15:22,800 --> 00:15:28,589
looked at those ap case where ble

403
00:15:26,330 --> 00:15:30,420
cryptographically process ble data was

404
00:15:28,590 --> 00:15:32,310
identified with high confidence level

405
00:15:30,420 --> 00:15:37,140
and we ran these apks through a tool

406
00:15:32,310 --> 00:15:38,670
called cognitive and cognitive

407
00:15:37,140 --> 00:15:41,680
essentially checks for cryptographically

408
00:15:38,670 --> 00:15:43,959
correctness within android apks

409
00:15:41,680 --> 00:15:46,180
and we found that in some cases bad

410
00:15:43,959 --> 00:15:47,888
crypto practices were being used such as

411
00:15:46,180 --> 00:15:50,138
the use of unsafe crypto mods or

412
00:15:47,889 --> 00:15:52,329
hard-coded keys and this would imply

413
00:15:50,139 --> 00:15:55,180
that even when ble data I supposedly

414
00:15:52,329 --> 00:15:56,589
protected by cryptography sometimes a

415
00:15:55,180 --> 00:15:58,359
crypto might not be implemented

416
00:15:56,589 --> 00:16:02,949
correctly and the ble data might still

417
00:15:58,360 --> 00:16:05,139
be vulnerable so in summary we've seen

418
00:16:02,949 --> 00:16:08,219
that pairing protected data may be

419
00:16:05,139 --> 00:16:10,540
vulnerable to unauthorized access by

420
00:16:08,220 --> 00:16:11,889
different applications and this is

421
00:16:10,540 --> 00:16:14,259
regardless of the strength of the

422
00:16:11,889 --> 00:16:16,179
pairing mechanism so in our test we used

423
00:16:14,259 --> 00:16:18,839
le secure connections with numeric

424
00:16:16,179 --> 00:16:21,009
comparison which is one of the strongest

425
00:16:18,839 --> 00:16:22,600
we've also seen that because of the

426
00:16:21,009 --> 00:16:24,670
different stakeholders involved in the

427
00:16:22,600 --> 00:16:26,679
ble ecosystem it's difficult to

428
00:16:24,670 --> 00:16:30,069
determine which stakeholder should make

429
00:16:26,679 --> 00:16:32,319
any changes to protect ble data right

430
00:16:30,069 --> 00:16:34,089
now though Security's probably in the

431
00:16:32,319 --> 00:16:35,800
hands of ble developers but it's

432
00:16:34,089 --> 00:16:37,809
possible that the developers themselves

433
00:16:35,800 --> 00:16:39,969
are not aware of this because almost

434
00:16:37,809 --> 00:16:42,309
half of all the apks we tested showed no

435
00:16:39,970 --> 00:16:46,120
evidence of into and protection for ble

436
00:16:42,309 --> 00:16:48,040
data our tool is available on github and

437
00:16:46,120 --> 00:16:50,529
we would welcome any feedback or

438
00:16:48,040 --> 00:16:54,149
suggestions thank you very much for your

439
00:16:50,529 --> 00:16:54,149
time and I'm happy to take any questions

440
00:16:57,250 --> 00:17:00,890
so if you have a question for our

441
00:16:59,390 --> 00:17:06,349
speaker feel free to come to one of the

442
00:17:00,890 --> 00:17:09,650
microphones in the aisles did I for

443
00:17:06,349 --> 00:17:10,280
everybody to sleep very interesting talk

444
00:17:09,650 --> 00:17:12,770
thank you

445
00:17:10,280 --> 00:17:14,690
one thing I've also seen an abscess that

446
00:17:12,770 --> 00:17:17,540
they do enter an encryption between the

447
00:17:14,690 --> 00:17:19,160
app not now between the device and the

448
00:17:17,540 --> 00:17:20,959
server so the app would not do any

449
00:17:19,160 --> 00:17:23,089
encryption or decryption how did you

450
00:17:20,959 --> 00:17:26,300
deal with that in your statistics we

451
00:17:23,089 --> 00:17:28,790
didn't actually because we can't and

452
00:17:26,300 --> 00:17:31,250
then we did know that it's possible data

453
00:17:28,790 --> 00:17:33,170
would just be shuttled through an apk so

454
00:17:31,250 --> 00:17:35,690
that the the end-to-end would be between

455
00:17:33,170 --> 00:17:38,390
a server and the ble device but there's

456
00:17:35,690 --> 00:17:40,160
really no way of checking or accounting

457
00:17:38,390 --> 00:17:42,050
for that because just because data is

458
00:17:40,160 --> 00:17:43,280
transmitted to a server doesn't

459
00:17:42,050 --> 00:17:45,110
necessarily mean it's being

460
00:17:43,280 --> 00:17:47,660
cryptographically protected so we can't

461
00:17:45,110 --> 00:17:55,250
say yes or no so we unfortunately had to

462
00:17:47,660 --> 00:17:58,760
sort of disregard them thank you so I

463
00:17:55,250 --> 00:18:00,080
actually have a question so it's clear

464
00:17:58,760 --> 00:18:02,330
that there are a lot of weaknesses in

465
00:18:00,080 --> 00:18:04,580
these applications but I was curious if

466
00:18:02,330 --> 00:18:07,189
you were aware of any situation where

467
00:18:04,580 --> 00:18:10,550
some party might be exploiting some of

468
00:18:07,190 --> 00:18:13,370
this in the wild no we actually focus

469
00:18:10,550 --> 00:18:14,930
mainly on benign applications and the

470
00:18:13,370 --> 00:18:17,659
presence of crypto so we weren't

471
00:18:14,930 --> 00:18:20,090
considering malicious entities at when

472
00:18:17,660 --> 00:18:21,530
we were doing the previous analysis we

473
00:18:20,090 --> 00:18:25,149
are doing some right now which may

474
00:18:21,530 --> 00:18:25,149
produce some interesting results

475
00:18:39,420 --> 00:18:43,049
we have we have one more question for

476
00:18:41,309 --> 00:18:45,420
you yeah sorry that took a while for me

477
00:18:43,049 --> 00:18:48,000
to go hey thank you for the talk very

478
00:18:45,420 --> 00:18:49,200
interesting I was wondering um you

479
00:18:48,000 --> 00:18:50,910
mentioned some of the malicious apps

480
00:18:49,200 --> 00:18:53,970
that could sort of piggyback onto the

481
00:18:50,910 --> 00:18:57,000
BOE connection I was wondering if there

482
00:18:53,970 --> 00:18:58,530
are like not literary malicious but just

483
00:18:57,000 --> 00:18:59,850
regular apps that could possibly do this

484
00:18:58,530 --> 00:19:01,470
like accidentally and if you've

485
00:18:59,850 --> 00:19:03,949
encountered them and sort of what they

486
00:19:01,470 --> 00:19:06,660
might look like I mean I have seen

487
00:19:03,950 --> 00:19:08,730
question I mean on Stack Overflow and

488
00:19:06,660 --> 00:19:10,890
things where people do seem to want to

489
00:19:08,730 --> 00:19:14,760
identify connected devices for some

490
00:19:10,890 --> 00:19:16,410
legitimate purposes but they don't

491
00:19:14,760 --> 00:19:18,059
actually mention the purpose and I can't

492
00:19:16,410 --> 00:19:20,280
think of any reason why you would want

493
00:19:18,059 --> 00:19:23,160
to use an existing connection especially

494
00:19:20,280 --> 00:19:24,480
between two different apps so I would

495
00:19:23,160 --> 00:19:27,090
say honestly just get rid of that

496
00:19:24,480 --> 00:19:33,600
functionality if I have the choice cool

497
00:19:27,090 --> 00:19:35,800
thank you alright so let's think our

498
00:19:33,600 --> 00:19:39,599
speaker one more time

499
00:19:35,800 --> 00:19:39,599
[Applause]

