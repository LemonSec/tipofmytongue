1
00:00:10,950 --> 00:00:16,470
and given much so yes thank you for the
introduction today would like to talk

2
00:00:16,470 --> 00:00:20,840
dynamic JavaScript then the security
properties of dynamic script generation

3
00:00:20,840 --> 00:00:25,759
business joined work with been stopped
and Martin Johnson just sitting here in

4
00:00:25,759 --> 00:00:29,480
the second row and with our student
worker Martin Hanzal who is unfortunate

5
00:00:29,480 --> 00:00:35,949
not here today so before you dive into
the topic I would first like to present

6
00:00:35,949 --> 00:00:40,730
my agenda so in the beginning I will
give a short technical background where

7
00:00:40,730 --> 00:00:44,750
I will explain a few things that are
needed for the presentation mainly like

8
00:00:44,750 --> 00:00:49,460
inheritance works in javascript and like
this are the same origin policy works

9
00:00:49,460 --> 00:00:55,589
afterwards I will present an attack that
was found in 2006 by Jeremiah Grossman

10
00:00:55,589 --> 00:01:00,699
which is called Jason or JavaScript
hijacking also known under the term

11
00:01:00,699 --> 00:01:06,810
cross-eyed script inclusion and what we
found is that those attacks that a

12
00:01:06,810 --> 00:01:11,250
pre-owned were based on prozac works but
we found new ways to do that with

13
00:01:11,250 --> 00:01:15,600
standards JavaScript behavior so we're
generalizing the attack a bit and

14
00:01:15,600 --> 00:01:21,169
demonstrating that is a senior problem
in the web and to do that we do an

15
00:01:21,170 --> 00:01:27,890
empirical study we investigated 150
total exit pages for this issue as a

16
00:01:27,890 --> 00:01:32,250
let's start at the beginning at the
technical background so one important

17
00:01:32,250 --> 00:01:35,570
thing that we need to know and to
understand this whole lotta typical

18
00:01:35,570 --> 00:01:37,850
inheritance works in javascript

19
00:01:37,850 --> 00:01:43,300
so as opposed to Java or C where class
pays inheritance is used

20
00:01:43,300 --> 00:01:46,990
JavaScript uses and profitable
inheritance approach and it works like

21
00:01:46,990 --> 00:01:53,690
this so instead of inheriting classes
from other classes JavaScript inherited

22
00:01:53,690 --> 00:01:58,759
objects directly from other objects and
it you'll create an object in javascript

23
00:01:58,760 --> 00:02:03,890
here's an example we just use an object
literal with a property a credit you

24
00:02:03,890 --> 00:02:04,820
object

25
00:02:04,820 --> 00:02:08,899
the engine will create this object and
its object will have appointed to its

26
00:02:08,899 --> 00:02:13,290
prototype and by default if you don't
provide prototype is object would point

27
00:02:13,290 --> 00:02:19,129
to object of prototype which again has a
prototype point with points to know so

28
00:02:19,129 --> 00:02:24,530
this object it's very similar to Java
where all the classes inherit from from

29
00:02:24,530 --> 00:02:28,569
object so now you can use the subject
let's say we have object one

30
00:02:28,569 --> 00:02:32,119
and we know would like to read a new
object than it did in Harrods from

31
00:02:32,120 --> 00:02:36,909
abject 10 we can just do so by using the
object not create function and say okay

32
00:02:36,909 --> 00:02:41,790
we want something that inherited from
object one and we need object to object

33
00:02:41,790 --> 00:02:46,920
to has also a prototype property and
this prototype property points to a big

34
00:02:46,920 --> 00:02:52,268
line which points to update the
prototype which wants to know so when we

35
00:02:52,269 --> 00:02:58,799
know doin up property you look up on
object to the JavaScript engine will

36
00:02:58,799 --> 00:03:03,260
walk up the prototype chain so will
first look at object to and see where is

37
00:03:03,260 --> 00:03:06,909
there a property named like the thing
that I would look up here this is the

38
00:03:06,909 --> 00:03:11,649
property a sword will find object to
doesn't have to property eight so it

39
00:03:11,650 --> 00:03:16,500
will look at the objects prototype which
is in that case of one and it will find

40
00:03:16,500 --> 00:03:22,150
the proper TH and then it will return
the one so basically the property a is

41
00:03:22,150 --> 00:03:27,629
inherited from object is a very
important thing and we need to get laid

42
00:03:27,629 --> 00:03:32,099
on for one of the attacks another
important concept that I need to

43
00:03:32,099 --> 00:03:36,599
introduce the same origin policy so the
same origin policy is basically the most

44
00:03:36,599 --> 00:03:41,159
principal security policy that we have
implemented in browsers and it basically

45
00:03:41,159 --> 00:03:46,328
isolates different web applications from
each other and it's the reason why

46
00:03:46,329 --> 00:03:50,489
attacker pages not able to read your
emails in another window does open in

47
00:03:50,489 --> 00:03:54,620
the same browser and it works like this
so I have an example and it's light and

48
00:03:54,620 --> 00:03:59,299
we have 22 service at a catalog which is
a tech a controlled and email account

49
00:03:59,299 --> 00:04:04,299
and email con is a legitimate web side
that has a webmail interface and you

50
00:04:04,299 --> 00:04:08,720
might be authenticated to it and what
the attacker is able to do he is able to

51
00:04:08,720 --> 00:04:13,680
do to lower a big team onto its website
so I worked in with his brother sews to

52
00:04:13,680 --> 00:04:18,599
attack adored and interior attack a dork
would be able to load piece of

53
00:04:18,599 --> 00:04:23,130
JavaScript and has JavaScript is capable
of sending HTTP requests so it could in

54
00:04:23,130 --> 00:04:28,070
theory and an HTTP request with the
cookies of the Browse attached to the

55
00:04:28,070 --> 00:04:33,110
email which authenticates the the user
to email it calm and then it would be

56
00:04:33,110 --> 00:04:37,279
able to read the response basically
access the content at a store in to

57
00:04:37,279 --> 00:04:38,520
webmail interface

58
00:04:38,520 --> 00:04:43,190
that's very undesirable property because
we don't want to take the dog to read

59
00:04:43,190 --> 00:04:48,629
our windows and that's what the same
origin policy prevents and the same

60
00:04:48,629 --> 00:04:52,819
origin policy basically prevent
communication of active content in the

61
00:04:52,819 --> 00:04:58,220
browser has JavaScript to objects that
share the same origin and the origin is

62
00:04:58,220 --> 00:05:02,569
defined by the protocol the Board report
and the domain that was used to retrieve

63
00:05:02,569 --> 00:05:06,819
the object so here we see the java
script is executed in the in the context

64
00:05:06,819 --> 00:05:12,539
of attack and request goes to email for
the browser would prevent the response

65
00:05:12,539 --> 00:05:21,669
from being read by JavaScript so it has
no means to read your emails and when we

66
00:05:21,669 --> 00:05:25,880
talk about web security all of the
attacks target the same origin policy

67
00:05:25,880 --> 00:05:30,590
somehow so usually all the attacks try
to sit on when or do anything to the

68
00:05:30,590 --> 00:05:34,609
same origin policy to lead a tard to do
something that is forbidden by the same

69
00:05:34,610 --> 00:05:40,840
art and one such attack is Jason or jobs
for checking and is an attack that was

70
00:05:40,840 --> 00:05:47,090
discovered in 2006 by Jeremiah Grossman
and it was discovered in Gmail so what

71
00:05:47,090 --> 00:05:52,940
email did back then is that it hosted a
Jason child and is Jason 5 was

72
00:05:52,940 --> 00:05:59,490
dynamically generated based on the user
and it contained the address book of the

73
00:05:59,490 --> 00:06:04,300
currently authenticated user and you can
see it's it's it's an era literal and it

74
00:06:04,300 --> 00:06:08,610
contains different records and basically
the the entries in the address book and

75
00:06:08,610 --> 00:06:11,889
was Jeremiah Grossman didn't the
following so he set up a website

76
00:06:11,889 --> 00:06:18,270
detected and she was able to lure him
onto the page and so what we just

77
00:06:18,270 --> 00:06:25,469
learned is that the same origin policy
protects us from accessing this file at

78
00:06:25,469 --> 00:06:30,569
August not able to read the source code
but what attacker the attacker is able

79
00:06:30,569 --> 00:06:36,229
to do is able to include this file in a
script tack because script acts are

80
00:06:36,229 --> 00:06:40,940
somehow exempt from the same origin
policy czar script acts are able to

81
00:06:40,940 --> 00:06:45,930
reference or party resources and this
will generate an HTTP requests were the

82
00:06:45,930 --> 00:06:49,220
cookies will be attached by the browser
and

83
00:06:49,220 --> 00:06:54,390
the Gmail will then generate Jason file
and it back to the browser and the

84
00:06:54,390 --> 00:06:58,900
browser will just executed as JavaScript
code is not being passed to the attacker

85
00:06:58,900 --> 00:07:02,479
but just executed and what we can see
here

86
00:07:02,480 --> 00:07:06,900
adjacent file is also valid JavaScript
so it would execute would see though

87
00:07:06,900 --> 00:07:08,409
it's an area literal

88
00:07:08,410 --> 00:07:13,430
trade an instance of an airy and what it
will never pass the reference of the

89
00:07:13,430 --> 00:07:19,270
area somewhere so the attackers were not
able to access this but what I found out

90
00:07:19,270 --> 00:07:23,919
instead whenever there is an every
literal JavaScript engine will invoke

91
00:07:23,920 --> 00:07:28,820
the Eric instructor and the era
constructed something that is locally

92
00:07:28,820 --> 00:07:33,560
accessible in a decade or so what
Jeremih present it as he just overrode

93
00:07:33,560 --> 00:07:40,090
the Eric instructor and included that
gmail Jason file and this would the the

94
00:07:40,090 --> 00:07:43,109
JavaScript engine would see there's an
era literal it would involve Derek

95
00:07:43,110 --> 00:07:48,060
instructor and pass over the data to the
Eric instructor and that's where where

96
00:07:48,060 --> 00:07:52,190
he got hands on the daytime got a
restaurant so he was able to lead data

97
00:07:52,190 --> 00:07:58,100
across the mean by this attack happened
in 2006 and in the meanwhile it was

98
00:07:58,100 --> 00:08:03,400
fixed so what is the current state of
this attack that we referred to as

99
00:08:03,400 --> 00:08:06,719
cross-site scripting inclusion for the
rest of this presentation so the current

100
00:08:06,720 --> 00:08:11,910
status dead meant mainly the attack was
based on a broader quark data browsing

101
00:08:11,910 --> 00:08:17,080
invoked the Eric Instructables
accessible by by the user and he was

102
00:08:17,080 --> 00:08:21,010
fixed by not passing that dated to the
globally accessible Eric instructor

103
00:08:21,010 --> 00:08:26,070
anymore as intended have been another
few a few other factors that mainly

104
00:08:26,070 --> 00:08:31,690
targeted Jason and comma-separated value
files but all of the attacks were based

105
00:08:31,690 --> 00:08:36,140
on rosa parks and whenever a browser
appeared there was one in IE and Firefox

106
00:08:36,140 --> 00:08:44,010
was fixed so but when we look at this we
wondered as sole the attacker uses a

107
00:08:44,010 --> 00:08:49,990
script AK two referenda file that looks
similar to JavaScript so Jason filed

108
00:08:49,990 --> 00:08:54,800
pauses as JavaScript and also some comma
separated value file as porous as

109
00:08:54,800 --> 00:08:58,849
JavaScript but when we went to search
for it online

110
00:08:58,850 --> 00:09:01,769
we were not able to find any publicly
available research dead

111
00:09:01,769 --> 00:09:07,660
actual javascript files so we using a
script act like we have never looked at

112
00:09:07,660 --> 00:09:11,529
script files and so there may be a few
reasons so one reason might be that

113
00:09:11,529 --> 00:09:15,670
script files are always static and
there's no like private de todas of

114
00:09:15,670 --> 00:09:19,979
interest for Integra to steal or maybe
they're such files that contain the

115
00:09:19,980 --> 00:09:25,139
stator but the data cannot be lead
because we have no way of getting the

116
00:09:25,139 --> 00:09:30,100
data out as an attacker so we thought
all that's well that's interesting to

117
00:09:30,100 --> 00:09:33,920
investigate so we did the first
investigation we conducted an empirical

118
00:09:33,920 --> 00:09:37,920
study and we wanted to answer the
question whether they are files that

119
00:09:37,920 --> 00:09:43,059
javascript files that contain sensitive
user data or in other words whether they

120
00:09:43,059 --> 00:09:46,549
are javascript files to Tahoe
domestically or dynamically generated at

121
00:09:46,549 --> 00:09:53,709
runtime based on the cookie of the user
of the authenticated session and what we

122
00:09:53,709 --> 00:09:57,229
did to do that is we first created a
browser extension and a browser

123
00:09:57,230 --> 00:10:02,459
extension is capable of detecting these
scripts and it does so by investigating

124
00:10:02,459 --> 00:10:06,219
and morning touring all the strips that
we find a browsing session and then it

125
00:10:06,220 --> 00:10:10,660
would request the scripts two times once
with session cookies attached to it and

126
00:10:10,660 --> 00:10:14,809
ones without session is attached to it
and then we simply different the files

127
00:10:14,809 --> 00:10:18,429
if there's a difference in the files
between authenticated an unauthenticated

128
00:10:18,429 --> 00:10:23,269
contacts there must be some kind of
dynamic generation of this javascript so

129
00:10:23,269 --> 00:10:25,720
his extension is basically

130
00:10:25,720 --> 00:10:30,129
hinting are still two potential
candidates of strips that might be

131
00:10:30,129 --> 00:10:34,619
dynamically generated and might have
some data in there what we did and we

132
00:10:34,619 --> 00:10:41,509
went to the Alexa top 500 web pages and
we picked out the first 150 pages that

133
00:10:41,509 --> 00:10:46,399
allowed us a registration free of charge
where we were able to register an

134
00:10:46,399 --> 00:10:51,449
account without social security numbers
of strange countries that we were not

135
00:10:51,449 --> 00:10:58,479
able to do have a phone numbers and it's
important that we were able to

136
00:10:58,480 --> 00:11:03,480
understand I don't translate or
biologically speaking the language

137
00:11:03,480 --> 00:11:08,230
so what we did with that 150 sites we
registered accounts for them and see if

138
00:11:08,230 --> 00:11:12,149
these accounts was personal data so for
example in a shopping side we put

139
00:11:12,149 --> 00:11:13,630
starting to shopping cart

140
00:11:13,630 --> 00:11:19,760
we created wish lists in an email client
we send emails and calendar app we we

141
00:11:19,760 --> 00:11:24,209
created calendar entries and so on so we
carefully sifted through things and then

142
00:11:24,209 --> 00:11:29,149
basically we used our extension to while
interacting with the side so we don't

143
00:11:29,149 --> 00:11:32,959
interacted and used all the
functionalities of the site and our

144
00:11:32,959 --> 00:11:37,260
extension recorded all the scripts to
see whether we can find some of these

145
00:11:37,260 --> 00:11:41,760
scripts and the results were kind of
surprising to us so in total we

146
00:11:41,760 --> 00:11:49,149
investigated 150 pages and one third of
them use dynamic script generation so 49

147
00:11:49,149 --> 00:11:54,180
domains had some kind of strict that was
generated based on the cookie and we

148
00:11:54,180 --> 00:12:00,180
then manually investigated those two
strips and we found that 34 website of

149
00:12:00,180 --> 00:12:04,810
this 150 websites have unique identity
as in that strips so there might be an

150
00:12:04,810 --> 00:12:09,899
email address in the script for sporting
a variable that might be your account

151
00:12:09,899 --> 00:12:14,250
idea that of that given web application
or it might be your name or anything

152
00:12:14,250 --> 00:12:17,899
that uniquely identifies you as a user
so this could be used for the

153
00:12:17,899 --> 00:12:20,970
administration if you can get hold of
that they told me that they don't

154
00:12:20,970 --> 00:12:25,920
somehow we further investigated and we
found fifty domains that had

155
00:12:25,920 --> 00:12:31,120
personalized data India we found scripts
that contain snippets of emails we found

156
00:12:31,120 --> 00:12:37,930
strips that contained calendar entries
we found birds they see location and so

157
00:12:37,930 --> 00:12:42,170
on so all the data that we see that in
the beginning and we even Phone 7 pages

158
00:12:42,170 --> 00:12:47,060
that had cross-site request forgery and
authentication tokens inside the scripts

159
00:12:47,060 --> 00:12:52,380
so to answer the questions are there
javascript files that contains use a

160
00:12:52,380 --> 00:12:57,480
sensitive data you can clearly say yes
one-third of the web pages have these

161
00:12:57,480 --> 00:13:01,639
scripts and there's some interesting day
10 script files so you had a question

162
00:13:01,639 --> 00:13:06,779
that we had as well if they're
state-owned javascript files can we need

163
00:13:06,779 --> 00:13:07,939
them somehow kinda

164
00:13:07,940 --> 00:13:12,660
attacker just you by visiting the web
detective control website can delete the

165
00:13:12,660 --> 00:13:14,980
data in the script files

166
00:13:14,980 --> 00:13:21,000
so I would now like to quickly revised
ordered the attack a model that is

167
00:13:21,000 --> 00:13:25,550
pretty clear how it works so we now have
set of wonderful web pages and I call it

168
00:13:25,550 --> 00:13:31,639
will not calm and a web page has some
form of dynamic script and we are the

169
00:13:31,639 --> 00:13:36,930
attackers right we can set up host and
we are able to lure of victim on the

170
00:13:36,930 --> 00:13:42,310
page so another victim is there and what
we can do its job we found so we can

171
00:13:42,310 --> 00:13:46,579
simply include that dynamic JavaScript
into our page this will make the browser

172
00:13:46,579 --> 00:13:51,989
sent a cookie too will not come will not
come will then have service side script

173
00:13:51,990 --> 00:13:56,230
that dynamically generates the script
source that it was delivered to the

174
00:13:56,230 --> 00:13:59,389
browser is will be delivered to the
browser

175
00:13:59,389 --> 00:14:04,160
attack it cannot reach the source code
but it will be executed by the

176
00:14:04,160 --> 00:14:09,610
JavaScript engine and what detector is
capable of doing he can like you can opt

177
00:14:09,610 --> 00:14:14,100
source the side effects that this
execution has so the attacker is all my

178
00:14:14,100 --> 00:14:20,010
team is on page so we can set up
arbitrary malicious javascript before

179
00:14:20,010 --> 00:14:24,010
executing the script and after executing
the script to monitor what is going on

180
00:14:24,010 --> 00:14:29,600
and well we thought different ways of
leaking Daytona would just presents

181
00:14:29,600 --> 00:14:35,079
three of them so the first is very
obvious so we found a lot of scripts

182
00:14:35,079 --> 00:14:39,689
that contained just global variables so
there was a global variable in the file

183
00:14:39,690 --> 00:14:44,399
which was closed foot first name it
contains your name and it's pretty easy

184
00:14:44,399 --> 00:14:47,800
to leak global variable rate of global
variable is accessible from any other

185
00:14:47,800 --> 00:14:52,500
script in a file so you can simply
access to sing and then you have to name

186
00:14:52,500 --> 00:14:58,209
of the visitor basically another thing
that is very straightforward as when

187
00:14:58,209 --> 00:15:02,399
such nato's past two global function so
we figured out that a lot of websites

188
00:15:02,399 --> 00:15:06,350
split their functionalities are they
have like a base class or library that

189
00:15:06,350 --> 00:15:09,800
contains all the functionality that is
commonly used and then they have

190
00:15:09,800 --> 00:15:12,839
application specific cold and the
application specific code contains

191
00:15:12,839 --> 00:15:16,639
mostly the the private data and will
then called the library that has the

192
00:15:16,639 --> 00:15:22,660
common functionality and we can see here
we have a local variable that is not

193
00:15:22,660 --> 00:15:26,810
accessible to the to the attack directly
as it's called email and contains an

194
00:15:26,810 --> 00:15:27,739
email

195
00:15:27,740 --> 00:15:32,800
and handed over to library call and it's
pretty easy and straightforward for the

196
00:15:32,800 --> 00:15:37,829
text delete the data so that data before
executing that script you can just set

197
00:15:37,830 --> 00:15:42,290
up that that library object and just
design function that is called like the

198
00:15:42,290 --> 00:15:47,360
function that the legitimate script
calls and then he could just wait

199
00:15:47,360 --> 00:15:55,110
execute the strip the dynamics and he
has access to the data so this is pretty

200
00:15:55,110 --> 00:15:59,690
straightforward and pretty easy to
understand we also found a few more

201
00:15:59,690 --> 00:16:04,850
common and complex ways to lead data and
data that is not accessible you really

202
00:16:04,850 --> 00:16:08,910
are is not passed a global functions and
I will only present one of them because

203
00:16:08,910 --> 00:16:14,380
those almost enough to leave all the
data that we found in the scripts so one

204
00:16:14,380 --> 00:16:19,340
interesting cases we found as this one
so in this example we see an array and

205
00:16:19,340 --> 00:16:23,410
their race for secret values and it
might contain some records awesome maybe

206
00:16:23,410 --> 00:16:30,560
your wish list or anything that is
sensitive and what happened is that on

207
00:16:30,560 --> 00:16:36,680
that secret values array we saw a
function call for each and it seems that

208
00:16:36,680 --> 00:16:41,290
is this just a local function instance
we call a local method of the instance

209
00:16:41,290 --> 00:16:45,310
and then we iterate 432 secrets and
seekers I never returned to the global

210
00:16:45,310 --> 00:16:52,319
scope but that's not true because of the
profitable inheritance of JavaScript so

211
00:16:52,320 --> 00:16:57,430
as we learned before when you do a
property look up the interpreter will

212
00:16:57,430 --> 00:17:02,540
check whether the object that has
certain property and this is the case

213
00:17:02,540 --> 00:17:07,550
here for two for each function so we
called for each function on this and so

214
00:17:07,550 --> 00:17:11,980
we will check has disarray object for
each function and is not the case and

215
00:17:11,980 --> 00:17:15,680
every instance doesn't have a four-inch
the for each as defined in the prototype

216
00:17:15,680 --> 00:17:16,720
of the array

217
00:17:16,720 --> 00:17:22,940
peridot prototype for each and every
deposit iPod for each is a global

218
00:17:22,940 --> 00:17:28,710
function that can be overwritten by
anybody so you can see our tax code so

219
00:17:28,710 --> 00:17:33,080
we are simply overriding that every
prototype for each and interesting thing

220
00:17:33,080 --> 00:17:37,580
here is when you call a function on an
object that this reference on the disc

221
00:17:37,580 --> 00:17:41,220
you would with point to that object so
we are calling for each

222
00:17:41,220 --> 00:17:46,179
on secret values so that this reference
of the for each function points to the

223
00:17:46,179 --> 00:17:51,600
secretary- so basically the attacker can
just access to secret area by by

224
00:17:51,600 --> 00:17:57,129
accessing this or sending it anywhere so
is enabled us to legal local variable

225
00:17:57,130 --> 00:18:03,710
that should not be publicly accessible
by another script and we also find some

226
00:18:03,710 --> 00:18:08,010
more complex scenarios are you can lead
data but I don't have the time to

227
00:18:08,010 --> 00:18:14,250
explain this in this presentation so
maybe check the paper or come to us

228
00:18:14,250 --> 00:18:18,980
after the presentation so let's
re-evaluate so we had forty nine domains

229
00:18:18,980 --> 00:18:24,900
that made use of dynamic scripts and in
total be able to exploit forty of them

230
00:18:24,900 --> 00:18:31,049
so almost 80% of the streets will not
bow to the pre-tax presented and the

231
00:18:31,049 --> 00:18:36,370
reason for that nine scripts to be not
exploitable is that you were not able to

232
00:18:36,370 --> 00:18:41,158
guess the URL so there was some kind of
dynamic URL and for the attack to work

233
00:18:41,159 --> 00:18:47,350
detector needs to know how to include
the script into his page and I one of

234
00:18:47,350 --> 00:18:50,379
the reasons said there were a few
applications that past session

235
00:18:50,380 --> 00:18:55,120
identifier inside the URL instead of the
group so we were not able to guess that

236
00:18:55,120 --> 00:18:59,820
session identifiers and does we were not
able to generate the URL to include this

237
00:18:59,820 --> 00:19:04,480
in but we were mainly able to exploit
most of the things and I think

238
00:19:04,480 --> 00:19:13,100
developers are not aware at all that
this issue even exists so what i would

239
00:19:13,100 --> 00:19:18,189
like to do now is to just give some
anecdotal examples of how exploitation

240
00:19:18,190 --> 00:19:22,059
look like and what were we able to do
with the data that was contained in a

241
00:19:22,059 --> 00:19:28,678
script and we're just tell you about
three interesting cases so the first

242
00:19:28,679 --> 00:19:33,169
interesting case is about reading emails
subjects and centers so we found an

243
00:19:33,169 --> 00:19:36,600
email provider and his email provide
ahead of bitches on this work on his

244
00:19:36,600 --> 00:19:41,490
website and on when you go to main side
it would preview the first time in your

245
00:19:41,490 --> 00:19:46,080
inbox actually these first five minutes
we're contained inside the script which

246
00:19:46,080 --> 00:19:50,760
generated that widget by just including
that script you able to lead the first

247
00:19:50,760 --> 00:19:53,400
five messages including the sender and
the subject

248
00:19:53,400 --> 00:19:57,880
and the date and the message I D so
basically we're able to read our

249
00:19:57,880 --> 00:20:03,190
visitors in box or at least the first
five innings the second case that was

250
00:20:03,190 --> 00:20:08,860
very interesting so we found a news
website was just not betray news website

251
00:20:08,860 --> 00:20:13,780
you can register to Adam and look into
it and it has a script that contained

252
00:20:13,780 --> 00:20:19,420
cross-site request forgery talkin so by
visiting at a caloric intake a dog was

253
00:20:19,420 --> 00:20:23,370
able to include that script leaked the
CSIs talkin and then we were able to do

254
00:20:23,370 --> 00:20:27,919
this thesis attack and then well it was
a new side so there's not much

255
00:20:27,920 --> 00:20:33,210
functionality maybe you can set up there
said opposed to 22 news article but

256
00:20:33,210 --> 00:20:37,910
there was an interesting fact that there
was a profile page and the profile page

257
00:20:37,910 --> 00:20:44,260
contained a Nexus S and the excess was
interviewing not exploitable because

258
00:20:44,260 --> 00:20:45,210
only to use it

259
00:20:45,210 --> 00:20:49,380
itself was able to set the field and
only do you see yourself was able to see

260
00:20:49,380 --> 00:20:53,350
that field so but we were able to what
we were able to do with the sea so if we

261
00:20:53,350 --> 00:20:59,520
were able to send a change request and
put that its payload into the profile

262
00:20:59,520 --> 00:21:04,760
page so we exploited and abused it was
not exploitable before and interestingly

263
00:21:04,760 --> 00:21:10,310
this page had a Facebook integration so
all the users to login why Facebook

264
00:21:10,310 --> 00:21:15,230
automatic gate right student application
and the rides were pretty like the

265
00:21:15,230 --> 00:21:20,770
permissions were pretty broad and one
fun thing that we did we just created a

266
00:21:20,770 --> 00:21:25,150
Facebook post in the name of the user so
we used your token that was stored

267
00:21:25,150 --> 00:21:29,970
inside the Application Studio XSS
attacks and just posted on Facebook so

268
00:21:29,970 --> 00:21:33,930
just both visit with aiding the page and
you can use this to create a warm or

269
00:21:33,930 --> 00:21:37,420
something where you click on this link
among other people click on this link

270
00:21:37,420 --> 00:21:43,580
you to do same and so on its force and
then we had a certain case which was the

271
00:21:43,580 --> 00:21:48,629
most see we are seeing that we found so
we found a a script in a file coaster

272
00:21:48,630 --> 00:21:54,090
and the files had a very Ajax driven
your eyes are there were a lot of hrs

273
00:21:54,090 --> 00:21:59,510
going on and a lot of requesting andy
sixx hrs need to be authenticated and

274
00:21:59,510 --> 00:22:03,700
for this to happen day they had an
authentication token and two delivered

275
00:22:03,700 --> 00:22:06,429
to the front and they just put the
authentication

276
00:22:06,429 --> 00:22:11,740
script so we were able to access this
authentication token and basically were

277
00:22:11,740 --> 00:22:15,309
able to hijack the full full account of
the week them because they want the

278
00:22:15,309 --> 00:22:19,080
indication talking was well it for a
very very long time I think we we had

279
00:22:19,080 --> 00:22:24,408
exercised a few weeks or it might even
work today we will never try but it was

280
00:22:24,409 --> 00:22:28,119
at least a few weeks and this was well
it and we were able to do anything we

281
00:22:28,119 --> 00:22:31,809
were able to upload files to the account
we were able to delete files we were

282
00:22:31,809 --> 00:22:37,749
able to access all the fires and a very
interesting thing is that we were even

283
00:22:37,749 --> 00:22:42,610
able to compromise other services with
that because the file hosts had a single

284
00:22:42,610 --> 00:22:46,928
sign-on solution with other services
that that it offered and when you

285
00:22:46,929 --> 00:22:50,490
possible indication talking to the
single sign-on solution of another so

286
00:22:50,490 --> 00:22:54,210
does it would automatically authenticate
due to the weather service so we also

287
00:22:54,210 --> 00:22:59,950
got access to calendar and photo app and
some other applications they were

288
00:22:59,950 --> 00:23:06,009
running on the same same domain or about
the same server so that's the reason

289
00:23:06,009 --> 00:23:10,080
we're text but it's just some showcases
so we found a lot of other interesting

290
00:23:10,080 --> 00:23:17,299
things to do so we are almost at the end
but we should also talk about preventing

291
00:23:17,299 --> 00:23:21,869
access as I wouldn't believe he is so so
how do we deal with that attacks so

292
00:23:21,869 --> 00:23:27,678
nobody seemed to be aware so we need to
have some protections and the first

293
00:23:27,679 --> 00:23:29,820
thing is that I want to mention it at
all

294
00:23:29,820 --> 00:23:33,960
attacks are not based on brother clips
are just pure JavaScript functionality

295
00:23:33,960 --> 00:23:38,940
you cannot like the the attacks of
Jeremiah Grossman you cannot easily fix

296
00:23:38,940 --> 00:23:40,600
it on a broader level

297
00:23:40,600 --> 00:23:45,860
the other thing that you might try to
attempt to create a javascript that does

298
00:23:45,860 --> 00:23:49,678
not lead the data and we think this is
very difficult and should never did you

299
00:23:49,679 --> 00:23:54,379
should read it basically they're two
different solutions to the problem you

300
00:23:54,379 --> 00:23:58,379
could either prevent the script from
being included by a third party and a

301
00:23:58,379 --> 00:24:03,668
different solution to that somebody
could stick 26 preferred checking and

302
00:24:03,669 --> 00:24:06,220
whenever you see something that is not
your own page

303
00:24:06,220 --> 00:24:10,779
you don't deliver the script to the to
the user and this is very error prone

304
00:24:10,779 --> 00:24:15,830
and does not work in all the cases are
you put some random token into the euro

305
00:24:15,830 --> 00:24:20,918
something that a similar tour cross-site
request forgery talkin so that the

306
00:24:20,919 --> 00:24:27,250
attacker cannot guess the ural so that
it cannot cannot cannot but we think

307
00:24:27,250 --> 00:24:32,059
that the right solution to approach this
problem is to actually not put Center

308
00:24:32,059 --> 00:24:37,269
defeating to jobs and not dynamically
generate JavaScript you should have

309
00:24:37,269 --> 00:24:43,179
standing JavaScript code and separate
sensitive data from it by putting the

310
00:24:43,179 --> 00:24:46,880
sensitive data into a detailed
provisions that is properly protected by

311
00:24:46,880 --> 00:24:51,539
the same origin policy and just have
steadied JavaScript code in your not so

312
00:24:51,539 --> 00:24:57,830
much protected JavaScript file ok that's
it I'm almost at the end but I would

313
00:24:57,830 --> 00:25:02,668
like to mention one thing and I don't
have a lot of time exercise signed a

314
00:25:02,669 --> 00:25:05,980
clinton security policy so the content
security policies a new mechanism to

315
00:25:05,980 --> 00:25:11,929
prevent XSS and basically it requires
you to all inline script out to external

316
00:25:11,929 --> 00:25:17,880
files and scripts are not prone to
attack because he cannot include inline

317
00:25:17,880 --> 00:25:23,139
script across the main boundaries now if
you employ security policy and you just

318
00:25:23,139 --> 00:25:27,219
blindly move out all the landscape to
external files because it's required you

319
00:25:27,220 --> 00:25:31,779
might end up in situations where you
create excess i winner bilities so

320
00:25:31,779 --> 00:25:36,950
whenever you introduce CSP don't blindly
move strips out to protect the inline

321
00:25:36,950 --> 00:25:41,860
script if they contain sensitive data ok
with that I would like to conclude so

322
00:25:41,860 --> 00:25:45,090
what did we do we investigated the
security of dynamic JavaScript

323
00:25:45,090 --> 00:25:49,570
generation we demonstrated that a lot of
dynamic JavaScript that contain

324
00:25:49,570 --> 00:25:55,149
sensitive user data we also found ways
to let the sensitive userdata and we

325
00:25:55,149 --> 00:26:00,059
conducted a study on 150 popular
websites were able to see that one cert

326
00:26:00,059 --> 00:26:04,950
of these pages use dynamic JavaScript
and that 80% of the sides that use

327
00:26:04,950 --> 00:26:09,590
dynamic JavaScript enabled to the tax to
be presented today and the consequences

328
00:26:09,590 --> 00:26:14,120
of an attack range from simple privacy
violation something like the

329
00:26:14,120 --> 00:26:19,949
organization to full account compromised
but our study was very small and the

330
00:26:19,950 --> 00:26:23,510
main reason for this was that we had to
manually see all the comments menu

331
00:26:23,510 --> 00:26:27,549
manually click on everything and that
made it very difficult to scale up this

332
00:26:27,549 --> 00:26:32,908
this research and introduce north as the
SP might likely made the problem worse

333
00:26:32,909 --> 00:26:45,779
with this I would like to thank you for
your attention and ready for questions

334
00:26:45,779 --> 00:27:02,279
my question is suppose people are not
allowed to generate dynamic JavaScript

335
00:27:02,279 --> 00:27:12,169
does that means that they always need to
run trips to do the work that's the main

336
00:27:12,169 --> 00:27:16,229
disadvantage so whenever performance is
critical and whenever this round tube

337
00:27:16,229 --> 00:27:23,320
would would form said he would write it
i think to Eurostat content organs but

338
00:27:23,320 --> 00:27:29,759
developers forget to put into savings or
got to do to validate token correctly so

339
00:27:29,759 --> 00:27:33,859
there's a brittle solution that would
not recommend I think the problem will

340
00:27:33,859 --> 00:27:38,619
go away with with you to where you can
have multiple requests and so on

341
00:27:38,619 --> 00:27:50,468
is much quicker and much more than the
actual ways ok great thank you can you

342
00:27:50,469 --> 00:27:55,320
explain a little bit the separation of
stabbing JavaScript in this dynamic data

343
00:27:55,320 --> 00:28:00,939
stored you mentioned I had too little
time in the end so basically what we see

344
00:28:00,940 --> 00:28:07,369
is that JavaScript regenerated people
start putting variables with emails and

345
00:28:07,369 --> 00:28:10,279
so on into it and we think that you
shouldn't do that you shouldn't

346
00:28:10,279 --> 00:28:15,190
generated dynamically input the data but
you should keep your your five steady

347
00:28:15,190 --> 00:28:20,489
and have a second data provisioning
service so you have a steady job and you

348
00:28:20,489 --> 00:28:27,119
load the day tied runtime and you loaded
from an API that is protected against

349
00:28:27,119 --> 00:28:33,408
such a provision that return something
that is not possible JavaScript that

350
00:28:33,409 --> 00:28:36,999
cannot be included by ok so you cannot
boys on the product label is static

351
00:28:36,999 --> 00:28:42,589
scripts data from the data store yet
because when you include the script it

352
00:28:42,589 --> 00:28:48,029
it's executed India in the origin of the
decade or great so you cannot access if

353
00:28:48,029 --> 00:28:50,799
the data provisioning service is
protected by the same origin policy you

354
00:28:50,799 --> 00:28:52,070
cannot

355
00:28:52,070 --> 00:29:01,270
get the data you can poison that the
prototype you will have a good thanks

356
00:29:01,270 --> 00:29:07,350
about the performance aspect of
splitting this flip side of this is that

357
00:29:07,350 --> 00:29:10,949
then your JavaScript please to begin a
large is gonna be completely static

358
00:29:10,950 --> 00:29:14,130
which means it's possible right you
probably actually might be better off in

359
00:29:14,130 --> 00:29:21,500
the big scheme of things yes

360
00:29:21,500 --> 00:29:23,720
questions thank you

