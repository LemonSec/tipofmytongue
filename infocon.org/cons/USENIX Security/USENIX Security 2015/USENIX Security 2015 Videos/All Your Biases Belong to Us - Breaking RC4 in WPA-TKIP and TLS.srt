1
00:00:11,070 --> 00:00:16,580
ok how everyone so you may have already
heard about our work

2
00:00:16,580 --> 00:00:22,270
corn or more which is the name we gave
to 100 X I will go to present and we did

3
00:00:22,270 --> 00:00:26,400
that to publicize the work a bit on to
really try to tell people that you

4
00:00:26,400 --> 00:00:30,650
should no longer be using our C four so
first I'm going to give a quick

5
00:00:30,650 --> 00:00:36,110
background on IRC for it is a stream
cipher onto its description is actually

6
00:00:36,110 --> 00:00:41,470
very simple and short which makes it
quite an intriguing algorithm for many

7
00:00:41,470 --> 00:00:46,430
people it is used in their various
situations for example it is used to

8
00:00:46,430 --> 00:00:53,159
protect our wireless networks such as a
weapon to WPA TKIP protocol is also used

9
00:00:53,159 --> 00:00:59,159
in several cipher suites and SSL and TLS
is also used to protect certain

10
00:00:59,159 --> 00:01:06,440
end-to-end encryption protocols and
several other situations as well so

11
00:01:06,440 --> 00:01:10,259
there's a stream cipher which basically
means you give it a key at the output

12
00:01:10,260 --> 00:01:14,760
aqui stream on encryption is as you
would expect you simply sort with the

13
00:01:14,760 --> 00:01:20,380
plaintext aren't you get the ciphertext
now the last few years are 24 has

14
00:01:20,380 --> 00:01:24,250
received quite a lot of attention there
have been many attacks that have been

15
00:01:24,250 --> 00:01:30,010
published again star c4 on basically the
recommendation these days is to stop

16
00:01:30,010 --> 00:01:35,720
using or c4 because it is a bad cipher
so you may be wondering do people still

17
00:01:35,720 --> 00:01:41,340
use a sparsely 41 to answer that
question we look at the date of the ICSI

18
00:01:41,340 --> 00:01:46,520
notary on today are able to monitor a
large number of TLS connections on to

19
00:01:46,520 --> 00:01:50,590
concede at around the first time an
attack against our seat for India less

20
00:01:50,590 --> 00:01:56,780
was published almost half of all the TLS
connections you star c4 if we fast

21
00:01:56,780 --> 00:02:01,760
forward two years we see that this
number still around 30% which is still

22
00:02:01,760 --> 00:02:07,200
very high there is also a bit of good
news if we look at the last few months

23
00:02:07,200 --> 00:02:12,480
has actually decreased by quite a lot so
that's good news on the other hand this

24
00:02:12,480 --> 00:02:15,920
thirteen percent is in my opinion still
quite high

25
00:02:15,920 --> 00:02:21,309
additionally these statistics are
actually not perfect because they do not

26
00:02:21,310 --> 00:02:27,310
take into account our C for fall back
now what do I mean with r/c for fall

27
00:02:27,310 --> 00:02:27,760
back

28
00:02:27,760 --> 00:02:32,519
basically your browser if you have a
modern browser and the tries to connect

29
00:02:32,519 --> 00:02:38,349
to HBS web server it will initially say
I don't support our C four so don't use

30
00:02:38,349 --> 00:02:42,420
it and if you're connecting to a modern
server this is no problem

31
00:02:42,420 --> 00:02:46,738
the server real selected these in
belgrade and everything is fine however

32
00:02:46,739 --> 00:02:51,709
in case to serve as badly configured or
it's an alt want it will say no I really

33
00:02:51,709 --> 00:02:57,069
want to use our C four saudis handshake
will fail on what your browser does then

34
00:02:57,069 --> 00:03:01,690
depending on its settings but common
these days is that it will simply fall

35
00:03:01,690 --> 00:03:09,560
back to using our c4 again this does not
actually provide any security because

36
00:03:09,560 --> 00:03:14,340
this handshake failed message can be
forged by an attacker however does this

37
00:03:14,340 --> 00:03:20,090
pose a problem to us because this
thirteen estimate is actually only a

38
00:03:20,090 --> 00:03:25,659
lower bound if you take this into
account because while 13% of connections

39
00:03:25,659 --> 00:03:31,129
use our C for a number of these other
connections can be attacked using this

40
00:03:31,129 --> 00:03:35,578
method so they are also vulnerable to
attacks we will present however we have

41
00:03:35,579 --> 00:03:38,269
no idea how many connections are
vulnerable

42
00:03:38,269 --> 00:03:43,370
that's the reason why just 13 percent is
considered to be a lower bounds on the

43
00:03:43,370 --> 00:03:49,599
number of connections that are
vulnerable so goal of the paper is

44
00:03:49,599 --> 00:03:55,179
basically to really try to kill off our
c4 ensure that you shoot no longer do

45
00:03:55,180 --> 00:03:59,919
that until we will try to convince you
of that by exploring several several

46
00:03:59,919 --> 00:04:06,269
areas first we will present on search
for new biases in the IRC for K street

47
00:04:06,269 --> 00:04:11,060
then we will improve plaintext recovery
methods and we will apply these methods

48
00:04:11,060 --> 00:04:17,599
to break boat WPA TKIP want also to
attack HTTPS where we will try to

49
00:04:17,599 --> 00:04:23,110
decrypt a secure cookie so let's get
started with the first part searching

50
00:04:23,110 --> 00:04:29,060
for new biases and first going to
introduce a few existing biases which

51
00:04:29,060 --> 00:04:33,729
are quite well known I think the most
famous one is the biostat key stream

52
00:04:33,729 --> 00:04:34,909
position to

53
00:04:34,910 --> 00:04:40,200
where mountain and shamir have found
that the value 0 is actually twice as

54
00:04:40,200 --> 00:04:44,870
likely to occur and you can even see
that these other values in the key

55
00:04:44,870 --> 00:04:49,050
stream there are also clearly not
uniform because if it were uniform you

56
00:04:49,050 --> 00:04:54,190
would see a horizontal line which is
really not the case and we can do the

57
00:04:54,190 --> 00:05:00,300
same thing for Turkey swimbait one on
the receive very strange sign like graph

58
00:05:00,300 --> 00:05:07,520
and again we can see that this is
clearly not uniform and we can actually

59
00:05:07,520 --> 00:05:12,830
do this for all by sneaky stream which
was done in previous work until

60
00:05:12,830 --> 00:05:23,169
basically found that all the initial 256
bytes or non-uniform these kinds of

61
00:05:23,170 --> 00:05:29,020
biases where one key stream bite is not
uniform generally only occur in the

62
00:05:29,020 --> 00:05:35,479
initial on to be called these short-term
bias in contrast we also have so-called

63
00:05:35,480 --> 00:05:40,740
long-term basis that keep occurring
throughout all the key stream one

64
00:05:40,740 --> 00:05:46,050
example was found by fewer mcbroom in
2001 they found that if you look at

65
00:05:46,050 --> 00:05:51,590
consecutive key stream bites that
certain value pairs occur more often in

66
00:05:51,590 --> 00:05:58,020
uniform for example the pair 0001 they
occur more often and uniform on that is

67
00:05:58,020 --> 00:06:04,320
not what you want another well-known
biased as the one found by month and

68
00:06:04,320 --> 00:06:09,780
it's called it a be as baby mice and it
is also buys that we will use during our

69
00:06:09,780 --> 00:06:14,679
attack on basically this by states that
if you have to pee stream values that

70
00:06:14,680 --> 00:06:19,250
appear in the key stream these are
likely to reappear at some future point

71
00:06:19,250 --> 00:06:24,610
in the key stream so you have two values
you have a cap which can be 0 on then

72
00:06:24,610 --> 00:06:27,129
they occur again more often than

73
00:06:27,129 --> 00:06:33,689
uniform on this nice bias actually
decreases in strength if this gap grows

74
00:06:33,689 --> 00:06:40,159
larger so what do we want to do now we
want to search for new bassist Nikki

75
00:06:40,159 --> 00:06:44,409
stream and the hope that we can use them
to improve our plane tax recovery

76
00:06:44,409 --> 00:06:50,629
techniques on to a traditional empirical
method at least to do this is to simply

77
00:06:50,629 --> 00:06:57,269
generate huge amounts of key stream on
then to inspect he's in some way in

78
00:06:57,269 --> 00:07:02,080
general you can for example draw graph
about him and then manually see is there

79
00:07:02,080 --> 00:07:03,659
a bias present or not

80
00:07:03,659 --> 00:07:08,188
unfortunately this is not ideal if you
want to do a large-scale analysis

81
00:07:08,189 --> 00:07:13,999
because sometimes you're really looking
for a needle in the haystack for example

82
00:07:13,999 --> 00:07:17,789
you should take their forum grew by such
as an example which were actually

83
00:07:17,789 --> 00:07:21,869
originally discovered analytically if
you were to do that

84
00:07:21,869 --> 00:07:27,449
empirically on to manually you'd have to
find that only eight value pairs one

85
00:07:27,449 --> 00:07:34,499
example during 2001 2011 based out of a
total possible sixty-five thousand pairs

86
00:07:34,499 --> 00:07:38,469
or you're really looking for a needle in
a haystack so you want to automate this

87
00:07:38,469 --> 00:07:46,569
how do we do that while our solution
hypothesis tests so basically are no

88
00:07:46,569 --> 00:07:51,369
hypothesis will be that there is no
biased present for example that the key

89
00:07:51,369 --> 00:07:59,309
stream brightest uniformly distributed
in freedom rejects the null hypothesis

90
00:07:59,309 --> 00:08:04,769
we know that a biased has been found on
to actually use this to search for two

91
00:08:04,769 --> 00:08:10,069
types of a bias you want first search
whether one single key stream bite is

92
00:08:10,069 --> 00:08:17,649
not uniformly distributed to do this we
use their car square test will also look

93
00:08:17,649 --> 00:08:21,759
for a second type of biased and that is
to see of two key stream bites are

94
00:08:21,759 --> 00:08:29,039
correlated to test for that we will use
the dentist by Fox on Canada now this is

95
00:08:29,039 --> 00:08:34,139
a relatively unknown test but the reason
we use this is because it is very good

96
00:08:34,139 --> 00:08:38,099
to detect outliers in other words this
is very good to detective

97
00:08:38,099 --> 00:08:43,089
needles in the haystack that I just
mentioned using this approach we were

98
00:08:43,089 --> 00:08:47,889
able to do a large scale large-scale
search for new biases in the key stream

99
00:08:47,889 --> 00:08:54,740
onto actually found a quite a lot of new
ones for example one of the things we

100
00:08:54,740 --> 00:09:01,319
found is that even after position to
honor 10:56 and their key stream stream

101
00:09:01,319 --> 00:09:07,769
bites are still clearly not uniformly
distributed you can see a few other

102
00:09:07,769 --> 00:09:14,259
examples here but I do have to remark
that while this graph is not uniform we

103
00:09:14,259 --> 00:09:19,199
have resumed in quite a bit because if
you go at this late position in the key

104
00:09:19,199 --> 00:09:23,790
stream is bias is actually not that
strong so it's not that useful in a tax

105
00:09:23,790 --> 00:09:29,730
another base we have found is not a
short-term one like this one but a

106
00:09:29,730 --> 00:09:35,430
long-term one that keeps occurring
throughout the whole r/c for history on

107
00:09:35,430 --> 00:09:40,459
to explain these bites bias you have to
imagine that the IRC for key stream is

108
00:09:40,459 --> 00:09:47,029
basically split up into blocks of 256
bytes and she's done look at one

109
00:09:47,029 --> 00:09:53,439
individual block on you take first on 33
bite you will notice that these are more

110
00:09:53,439 --> 00:10:00,630
likely to contain the value 6:01 128 so
we've actually found a lot more by

111
00:10:00,630 --> 00:10:06,019
sustained you see an interesting example
is that the first Dookie stream bites

112
00:10:06,019 --> 00:10:09,759
lip quite a lot of information and
fortunately I don't have the time to

113
00:10:09,759 --> 00:10:15,380
discuss them also if you want to see all
the basis I will have to refer you to

114
00:10:15,380 --> 00:10:22,790
the paper ok so now that we have that
covered we will explain how we can use

115
00:10:22,790 --> 00:10:28,889
these biases to decrypt plain text and
we will actually use the existing

116
00:10:28,889 --> 00:10:35,630
plaintext attack of all four done at all
in 2013 and proved that attack so I'm

117
00:10:35,630 --> 00:10:41,689
first going to explain detected they
used on essentially what they did is

118
00:10:41,689 --> 00:10:46,709
they assumed that the same plaintext
which is illustrated here is encrypted

119
00:10:46,709 --> 00:10:49,479
multiple messages

120
00:10:49,480 --> 00:10:55,779
on what you can do then you can collect
these ciphertext distributions at all

121
00:10:55,779 --> 00:11:01,730
these encrypted plaintext essentially
now the question is how do we turn the

122
00:11:01,730 --> 00:11:07,730
ciphertext distribution into a guest for
the plaintext well we sort of worked the

123
00:11:07,730 --> 00:11:08,889
other way around

124
00:11:08,889 --> 00:11:13,070
actually first going to guess the value
of the plain text on this induces

125
00:11:13,070 --> 00:11:18,760
certain key stream distribution required
to observe these statistics that

126
00:11:18,760 --> 00:11:24,990
essentially we captured and then we try
to verify discuss how do we verify

127
00:11:24,990 --> 00:11:30,329
discussed we compared induced extreme
distribution with their real r/c for

128
00:11:30,329 --> 00:11:36,380
distribution that we know if they are
closely matching we know that this is

129
00:11:36,380 --> 00:11:41,610
very likely to correct plain text to
illustrate let's say you have captured

130
00:11:41,610 --> 00:11:47,079
following a ciphertext distribution at
key stream by 21 my question is now

131
00:11:47,079 --> 00:11:52,449
which plaintiffs bite is encrypted here
so let's find out for reference this is

132
00:11:52,449 --> 00:11:57,510
Darcy for key stream distribution at
this position so let's try to guess

133
00:11:57,510 --> 00:12:03,500
plain text that the plaintiffs by 2018
hacks you can see here and black is

134
00:12:03,500 --> 00:12:04,519
induced

135
00:12:04,519 --> 00:12:09,750
distribution if this would have been the
paintings by and we can clearly see that

136
00:12:09,750 --> 00:12:12,949
these two distributions don't really
matter

137
00:12:12,949 --> 00:12:17,709
match so this value has a very high
likelihood and other hand if we try a

138
00:12:17,709 --> 00:12:21,420
different value we can see that the
match is much better however a few

139
00:12:21,420 --> 00:12:26,389
points are still off and finally if it
tried the actual plane tax bite we can

140
00:12:26,389 --> 00:12:31,579
see that these two distributions are
very close on that we actually have the

141
00:12:31,579 --> 00:12:36,959
correct plant expired so what is
previous attack did was basically depict

142
00:12:36,959 --> 00:12:41,260
a plain text value with the highest like
newt however this is not always ideal

143
00:12:41,260 --> 00:12:45,410
and practice it is actually better to
have a list of candidates and increasing

144
00:12:45,410 --> 00:12:50,630
likelihood because this plane takes bite
with the highest like actually be the

145
00:12:50,630 --> 00:12:55,060
wrong one on this list of candidate is
very useful in practice for example

146
00:12:55,060 --> 00:12:59,359
sometimes you're trying to decrypt some
plain text with hatch which has a non

147
00:12:59,360 --> 00:13:01,990
structure and you can actually prove in
bed can

148
00:13:01,990 --> 00:13:06,279
for example if the plain text you are
trying to decrypt has a CRC and you can

149
00:13:06,279 --> 00:13:12,100
also reverse dismissed 242 brute force
cookies or passwords do not question is

150
00:13:12,100 --> 00:13:15,740
how do we generate this list of
candidates morning going to present a

151
00:13:15,740 --> 00:13:20,270
high-level description of the algorithm
really only the essence of it and that

152
00:13:20,270 --> 00:13:24,180
is that we will you stand incremental
approach and more specifically will

153
00:13:24,180 --> 00:13:29,750
first generate all the candidates also
thanked 12 on so on until we are all the

154
00:13:29,750 --> 00:13:35,730
candidates with the desired length so
does really are harassed idea to improve

155
00:13:35,730 --> 00:13:41,490
these plain text recovery methods or
second idea is to use the ABS be biased

156
00:13:41,490 --> 00:13:47,470
which is illustrated here again as a
reference on we will use this bias by

157
00:13:47,470 --> 00:13:52,520
assuming there is actually known
plaintext at one of these sites so at

158
00:13:52,520 --> 00:13:56,520
one side we know the plaintext was
encrypted and your sides we don't know

159
00:13:56,520 --> 00:13:57,310
the plaintext

160
00:13:57,310 --> 00:14:02,649
we want to try to get a likelihood
estimate of this plain text so what we

161
00:14:02,649 --> 00:14:06,220
will do this we will actually abuse the
plain text here to the right of the key

162
00:14:06,220 --> 00:14:12,520
stream values a unbeaten on then we rely
on the mountains Absa be biased to

163
00:14:12,520 --> 00:14:14,649
probabilistically protect

164
00:14:14,649 --> 00:14:21,420
predict the key stream by two values a
prime prime so essentially what we are

165
00:14:21,420 --> 00:14:26,170
actually using the surrounding known
plaintext to simply reduced as biased to

166
00:14:26,170 --> 00:14:32,000
a bias or over only two bites and if we
do this again without going into too

167
00:14:32,000 --> 00:14:36,720
much detail we can basically do the same
likelihood calculations as explained

168
00:14:36,720 --> 00:14:41,070
previously on we can come up with a
likelihood estimates of the plane

169
00:14:41,070 --> 00:14:47,480
despite at a prime and be prime so you
saw in my overview of slides that is

170
00:14:47,480 --> 00:14:51,370
actually the one that we use here where
are the details on the meaning of these

171
00:14:51,370 --> 00:14:55,500
variables is not important what is
important is that if you want to use

172
00:14:55,500 --> 00:15:02,440
this buys we have to rely on surrounding
known plaintext so that we are the two

173
00:15:02,440 --> 00:15:06,450
methods to improve plain text error
recovery we are now going to apply them

174
00:15:06,450 --> 00:15:07,490
to break

175
00:15:07,490 --> 00:15:15,459
WPA TKIP so first a quick introduction
on WPA TKIP let's say that you are a

176
00:15:15,459 --> 00:15:19,779
client and want to transmit data to an
access point the first thing that this

177
00:15:19,779 --> 00:15:24,810
protocol the US is a plant a message
integrity check on that and it also

178
00:15:24,810 --> 00:15:30,849
depends CRC CRC is actually useless
doesn't really serve a purpose however

179
00:15:30,850 --> 00:15:36,140
it had to be included to be able to run
the WPA TKIP protocol

180
00:15:36,140 --> 00:15:42,630
altamont compatible hardware on finally
initialization vector is also prepended

181
00:15:42,630 --> 00:15:47,540
to the package this is basically to
prevent replay attacks on increased for

182
00:15:47,540 --> 00:15:53,279
buy one for every frame and finally the
packet is encrypted using RCA 42 per

183
00:15:53,279 --> 00:15:58,589
packet keep on this per packet key as
always you mean that actually brings me

184
00:15:58,589 --> 00:16:04,070
to the first vulnerability and WPA TKIP
and that is the construction of this per

185
00:16:04,070 --> 00:16:09,640
packet keep so how is this per packet
key constructed well we take their

186
00:16:09,640 --> 00:16:14,209
shared key between the client on the
access point we also take the senate MAC

187
00:16:14,209 --> 00:16:16,589
address on the initialization vector

188
00:16:16,589 --> 00:16:21,779
makes these values on then we get per
packet key however what the designers of

189
00:16:21,779 --> 00:16:31,050
WPA TKIP did is they sixties they
override these first three values of the

190
00:16:31,050 --> 00:16:36,099
key under reason they do this is an
attempt to avoid the so-called wikis

191
00:16:36,100 --> 00:16:42,120
which broke weapon however this actually
has the opposite effect it doesn't

192
00:16:42,120 --> 00:16:47,279
increase the strength and actually
weakens it and why is that it is because

193
00:16:47,279 --> 00:16:51,430
of this association factor is publicly
known so an attacker knows these values

194
00:16:51,430 --> 00:16:55,880
which in turn means that the attacker
also known as the first two key stream

195
00:16:55,880 --> 00:17:02,610
adult first to the first three bites of
the per packet keep on today's been

196
00:17:02,610 --> 00:17:07,140
shown in previous works that knowing
these first two three bites of the

197
00:17:07,140 --> 00:17:12,490
packet ki can actually be used to
improve the attacks because they induce

198
00:17:12,490 --> 00:17:15,390
I V depended biases into the key stream

199
00:17:15,390 --> 00:17:22,459
so it is the first floor we will abuse
the second floor and WPA TKIP is that

200
00:17:22,459 --> 00:17:27,240
this message integrity code is rather
weak on the what I mean with that is if

201
00:17:27,240 --> 00:17:32,190
you're able to obtain the decrypted data
and make sure you can actually very

202
00:17:32,190 --> 00:17:37,490
efficiently reverse the algorithm on to
reveal the Mickey and this is exactly

203
00:17:37,490 --> 00:17:43,550
what we will try to do and our attack
will try to do it if you have this

204
00:17:43,550 --> 00:17:48,020
Mickey we are shown in previous work
that this Mickey alone is sufficient to

205
00:17:48,020 --> 00:17:55,490
inject on decrypt a few packets so as I
was saying our goal is now to decrypt

206
00:17:55,490 --> 00:18:01,780
voted data on to make sure you was in
this r/c for bias now as explained

207
00:18:01,780 --> 00:18:06,220
previously in order to execute these
attacks we need to repeatedly encrypt

208
00:18:06,220 --> 00:18:11,880
the exact same plaintext which here
means you will need to generate

209
00:18:11,880 --> 00:18:16,810
identical packets because this if even
just one bit in this package change

210
00:18:16,810 --> 00:18:22,250
changes done also the message integrity
code will also completely change your

211
00:18:22,250 --> 00:18:27,890
secret will also change change that is
not what we want so how can we inject

212
00:18:27,890 --> 00:18:30,570
identical packets into a wireless
network

213
00:18:30,570 --> 00:18:34,830
well we basically assumed that the
victim somehow connects to a misuse

214
00:18:34,830 --> 00:18:39,250
server under control of the attacker
this can be done using social

215
00:18:39,250 --> 00:18:43,530
engineering or vulnerabilities in some
kind of web application there are quite

216
00:18:43,530 --> 00:18:50,040
a lot of possibilities and end users
wants a TCP connection is open to his

217
00:18:50,040 --> 00:18:55,240
server is basically constantly
retransmit the same TCP packet on

218
00:18:55,240 --> 00:18:59,980
because TCP retransmissions are a
volatile political behavior this would

219
00:18:59,980 --> 00:19:06,940
also not be blocked by a firewall which
could be near the victim so once we have

220
00:19:06,940 --> 00:19:11,470
captured all these injected packets we
can use

221
00:19:11,470 --> 00:19:17,280
dependent bias to construct a list of
plaintext candidates so essentially we

222
00:19:17,280 --> 00:19:24,270
are generating candidates for today to
make sure also for the CRC fields we can

223
00:19:24,270 --> 00:19:29,710
actually proven bad candidates by
recalculating the CRC ourself and

224
00:19:29,710 --> 00:19:35,070
checking is it correct or not this quite
drastically improves the probability of

225
00:19:35,070 --> 00:19:42,139
correctly correctly decrypting coldest
part so we have done simulations to see

226
00:19:42,140 --> 00:19:47,150
how well this works and if we generate
around around 22 the power to candidates

227
00:19:47,150 --> 00:19:53,039
you will see that we only need to
encrypt roughly 22 power 24 to be able

228
00:19:53,039 --> 00:19:58,830
to correctly decrypt the spec it's on 10
the rifle the Mickey so if we don't try

229
00:19:58,830 --> 00:20:05,939
to do the executors and practice we can
see that our setup we can generate 2,500

230
00:20:05,940 --> 00:20:10,350
packets per second meaning we can
actually execute this attack within only

231
00:20:10,350 --> 00:20:15,379
one hour and actually try to execute an
overlap and everything worked out we

232
00:20:15,380 --> 00:20:16,900
successfully recovered

233
00:20:16,900 --> 00:20:27,640
mickey so sort of broken WPA TKIP and
now let's move on to breaking HTTPS so

234
00:20:27,640 --> 00:20:33,700
first of all a very quick introduction
to TLS basically you first half century

235
00:20:33,700 --> 00:20:39,289
protocol which negotiates the key to be
used and then we have to record protocol

236
00:20:39,289 --> 00:20:44,250
which will actually encrypt data we will
focus on the record protocol assuming

237
00:20:44,250 --> 00:20:50,179
that are Sephora has been selected as a
cipher so what previous attacks

238
00:20:50,179 --> 00:20:54,620
basically did as they used to play in
tax recovery techniques that I explained

239
00:20:54,620 --> 00:20:59,360
previously on today only use the form a
group biases and ordered to perform

240
00:20:59,360 --> 00:21:07,949
these attacks we extend these attacks by
using also the Absa be bias and also

241
00:21:07,950 --> 00:21:15,409
again generating a list of candidates
requirements to use this Absa be bias as

242
00:21:15,409 --> 00:21:19,960
a grievous previously mentioned is that
plain text we are targeting must be

243
00:21:19,960 --> 00:21:22,840
surrounded by known plaintext which we
can

244
00:21:22,840 --> 00:21:29,159
how do we do that well we want to
decrypt is cooking so other unknown

245
00:21:29,160 --> 00:21:32,840
cookie surroundings cookie that we
wanted to create have to be removed on

246
00:21:32,840 --> 00:21:38,300
10 we inject Rochus around it so this
authentication cookie recipe completely

247
00:21:38,300 --> 00:21:42,340
surrounded by known plaintext to
illustrate this let's say you have the

248
00:21:42,340 --> 00:21:47,250
following HTTP request here you have the
cookies we want to target as you can see

249
00:21:47,250 --> 00:21:52,210
the surrounding states were unknown has
been removed there are no question marks

250
00:21:52,210 --> 00:21:56,660
injecting and cookie to ensure that it
is surrounded by known plaintext at both

251
00:21:56,660 --> 00:22:01,760
sides and even these headers in front of
the HTTP request use are quite

252
00:22:01,760 --> 00:22:07,100
predictable so now the question is how
do we actually manipulate these security

253
00:22:07,100 --> 00:22:13,980
you remove them well we can remove them
if the claims uses HTTPS connection

254
00:22:13,980 --> 00:22:18,740
because that's still quite secure and we
can mess with it however if we can

255
00:22:18,740 --> 00:22:24,820
induce the victim into connecting to a
subdomain which does not use https we

256
00:22:24,820 --> 00:22:29,879
can actually manipulate you secure
cookies over this insecurity connection

257
00:22:29,880 --> 00:22:38,330
in particular we can removed on injected
secure cookies so with this preparation

258
00:22:38,330 --> 00:22:43,919
done so it should be request of the
victim is now in this layout

259
00:22:43,920 --> 00:22:49,640
we can actually executed the attack so
the first thing we will do is when the

260
00:22:49,640 --> 00:22:54,610
victim visits any unencrypted website we
will use our man in the middle position

261
00:22:54,610 --> 00:23:01,050
to inject JavaScript code into this
website on the JavaScript code to do it

262
00:23:01,050 --> 00:23:05,970
will generate a very high number of
requests and order so we can actually

263
00:23:05,970 --> 00:23:12,850
capture enough ciphertext essentially
onto when we simply monitored at

264
00:23:12,850 --> 00:23:17,590
ciphertext request it is actually very
important that these connections that

265
00:23:17,590 --> 00:23:22,750
the clients rely on a keepalive
connection on this is because otherwise

266
00:23:22,750 --> 00:23:27,399
and Utes collection would be created for
every single request that is made

267
00:23:27,399 --> 00:23:32,869
onto the overhead of the handshake into
less would be really slow down the

268
00:23:32,869 --> 00:23:37,859
attack so it's important that one
connection is used to basically transmit

269
00:23:37,859 --> 00:23:44,418
multiple HTTPS requests so we can
generate enough traffic fast enough and

270
00:23:44,419 --> 00:23:48,679
finally we will use our plane tax
recovery technique to generate a list of

271
00:23:48,679 --> 00:23:54,919
candidates for this a cookie we
basically brute force the cookie based

272
00:23:54,919 --> 00:24:01,859
on this list so if we simulate this
attack on to you try to brute force the

273
00:24:01,859 --> 00:24:07,718
cookie using at most two to power a 23
candidates you will see that we have

274
00:24:07,719 --> 00:24:16,580
quite a high success rates once we are
at position once we have roughly its due

275
00:24:16,580 --> 00:24:25,489
to the power 31 K streams you can see
then we have more than 90% success rate

276
00:24:25,489 --> 00:24:30,239
on the other hand if you're the only one
candidate so far you wouldn't be forcing

277
00:24:30,239 --> 00:24:35,749
the cookie at this point we would only
be around a success rate of 20% so

278
00:24:35,749 --> 00:24:41,919
really generating this list of
candidates really pays off so I'm going

279
00:24:41,919 --> 00:25:00,820
to show it quickly how this works

280
00:25:00,820 --> 00:25:06,990
so first the attackers going to use its
man in the middle position to monitor

281
00:25:06,990 --> 00:25:15,200
traffic

282
00:25:15,200 --> 00:25:19,809
you have to imagine that this is the
website that the user visits which

283
00:25:19,809 --> 00:25:30,120
contains the malicious JavaScript code
and if we execute that we can see that

284
00:25:30,120 --> 00:25:36,239
our madeleine middle position is indeed
working in this case I am executing the

285
00:25:36,240 --> 00:25:40,460
attack against every am so the network
is very fast and we get a very high

286
00:25:40,460 --> 00:25:47,580
amount of requests per second so now
we're going to pretend that we executed

287
00:25:47,580 --> 00:25:52,600
this attack for around 70 hours then we
can actually tried to brute force the

288
00:25:52,600 --> 00:26:21,080
cookie

289
00:26:21,080 --> 00:26:37,449
so hopefully this will work its actually
now probably loading these data or

290
00:26:37,450 --> 00:26:42,070
something is going wrong but this file
is actually two hundred and fifteen

291
00:26:42,070 --> 00:26:46,250
megabytes so it might take awhile for
normally it shouldn't take this long I

292
00:26:46,250 --> 00:26:53,530
know I'm still generating plaintext
which really slows down everything so

293
00:26:53,530 --> 00:26:59,300
normally it should go faster now if that
doesn't work you can also always visit

294
00:26:59,300 --> 00:27:04,680
the website or Sephora no more we're
actually recorded a demo of this in case

295
00:27:04,680 --> 00:27:10,610
of a backup you can see it is working is
just taking awhile yes you can see it's

296
00:27:10,610 --> 00:27:14,850
generating all the candidates are now
it's traversing this candidate lists on

297
00:27:14,850 --> 00:27:19,980
its trying each individual cookie when
it finds

298
00:27:19,980 --> 00:27:33,870
finds a user and indeed we have the
correct cooking so the attack succeeded

299
00:27:33,870 --> 00:27:46,250
going to try to replicate executed in
its your self made a bias be ever in

300
00:27:46,250 --> 00:28:03,220
your favor if you have any questions
feel free to ask

301
00:28:03,220 --> 00:28:06,650
nobody else is going to ask questions I
will take the lead two minutes that we

302
00:28:06,650 --> 00:28:13,490
have questions to ask line so snowden
himself and several people who have seen

303
00:28:13,490 --> 00:28:17,270
the leak Tennessee documents have said
very clearly that they think that

304
00:28:17,270 --> 00:28:23,110
government agencies are decrypting are
c4 in real time and the attacks third

305
00:28:23,110 --> 00:28:28,240
you've presented in another peepers
require a large number of plaintext do

306
00:28:28,240 --> 00:28:34,510
you have any ideas for what other people
might be doing well I think if you're

307
00:28:34,510 --> 00:28:40,700
going to continue this approach you
probably can improve a little bit but to

308
00:28:40,700 --> 00:28:47,230
do it real time at least in the manner
read it's not going to be possible so I

309
00:28:47,230 --> 00:28:51,450
don't know I guess might be that they're
trying to recover the internal states on

310
00:28:51,450 --> 00:28:56,740
the other hand internal state of our C
four is huge so I don't have any idea

311
00:28:56,740 --> 00:29:01,919
how they're doing it I'm actually a
little bit skeptical about his remarks I

312
00:29:01,919 --> 00:29:05,840
think I'm better attacks but it would
still be quite impressive history really

313
00:29:05,840 --> 00:29:13,919
can do it real time thank you very
impressive

314
00:29:13,920 --> 00:29:17,030
so nobody else having more questions
let's think the speaker again

