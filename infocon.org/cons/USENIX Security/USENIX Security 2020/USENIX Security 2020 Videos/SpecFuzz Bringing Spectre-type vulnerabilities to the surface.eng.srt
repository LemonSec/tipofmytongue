1
00:00:09,360 --> 00:00:11,678
hello

2
00:00:09,840 --> 00:00:12,879
i'm alexis alexandra and i'm presenting

3
00:00:11,679 --> 00:00:14,480
a joint project between

4
00:00:12,880 --> 00:00:16,720
the technical university of dresden and

5
00:00:14,480 --> 00:00:18,400
the technion university the topic of my

6
00:00:16,720 --> 00:00:20,080
talk today is spectra

7
00:00:18,400 --> 00:00:21,439
it's a vulnerability that appeared a few

8
00:00:20,080 --> 00:00:22,959
years ago and

9
00:00:21,439 --> 00:00:25,198
which bypassed many of the classical

10
00:00:22,960 --> 00:00:26,800
security mechanisms but which still

11
00:00:25,199 --> 00:00:29,439
stays largely unpunished

12
00:00:26,800 --> 00:00:30,000
in real software specifically i will

13
00:00:29,439 --> 00:00:31,439
concentrate

14
00:00:30,000 --> 00:00:33,040
on the bounce stream bypass the first

15
00:00:31,439 --> 00:00:33,840
version inspector but the areas that i

16
00:00:33,040 --> 00:00:35,600
present

17
00:00:33,840 --> 00:00:37,120
uh they will be also applicable to other

18
00:00:35,600 --> 00:00:38,640
versions of spectrum

19
00:00:37,120 --> 00:00:40,800
so just to remind you what bounce check

20
00:00:38,640 --> 00:00:43,200
bypass is here on the slide we see

21
00:00:40,800 --> 00:00:45,120
an example of this vulnerability here we

22
00:00:43,200 --> 00:00:45,920
have a buffer overflow which is punched

23
00:00:45,120 --> 00:00:48,239
by adding

24
00:00:45,920 --> 00:00:49,120
a bounce check so a conditional branch

25
00:00:48,239 --> 00:00:51,839
that guards

26
00:00:49,120 --> 00:00:54,160
this memory access this view can make a

27
00:00:51,840 --> 00:00:56,000
prediction on the outcome of this branch

28
00:00:54,160 --> 00:00:58,078
and if this prediction is wrong then

29
00:00:56,000 --> 00:00:58,800
this memory access will be executed even

30
00:00:58,079 --> 00:01:01,120
though it

31
00:00:58,800 --> 00:01:02,399
wasn't supposed to happen this is called

32
00:01:01,120 --> 00:01:04,399
speculative execution

33
00:01:02,399 --> 00:01:05,760
it's not visible into the software so it

34
00:01:04,400 --> 00:01:06,560
doesn't change the behavior of the

35
00:01:05,760 --> 00:01:08,960
program

36
00:01:06,560 --> 00:01:09,760
or or it doesn't influence the results

37
00:01:08,960 --> 00:01:12,000
of the program

38
00:01:09,760 --> 00:01:14,240
however it can leave certain traces on

39
00:01:12,000 --> 00:01:17,360
the hardware level these traces can be

40
00:01:14,240 --> 00:01:20,158
later retrieved by the attacker and

41
00:01:17,360 --> 00:01:21,600
some secrets can be leaked this way so

42
00:01:20,159 --> 00:01:23,840
what has been done to batch

43
00:01:21,600 --> 00:01:24,798
this vulnerability the sphere vendors

44
00:01:23,840 --> 00:01:27,840
they declared that

45
00:01:24,799 --> 00:01:28,720
it's the price prediction is a feature

46
00:01:27,840 --> 00:01:31,200
it's not a bug

47
00:01:28,720 --> 00:01:32,720
and they are not going to release any

48
00:01:31,200 --> 00:01:34,159
hardware mitigations against

49
00:01:32,720 --> 00:01:36,240
this attack at least in the nearest

50
00:01:34,159 --> 00:01:37,680
future on the software side

51
00:01:36,240 --> 00:01:40,000
we see different pictures from software

52
00:01:37,680 --> 00:01:42,240
to software for example browsers took it

53
00:01:40,000 --> 00:01:43,119
more seriously such as chrome uh they

54
00:01:42,240 --> 00:01:45,199
implemented the

55
00:01:43,119 --> 00:01:47,280
site isolation they have sandboxing and

56
00:01:45,200 --> 00:01:49,840
several other techniques

57
00:01:47,280 --> 00:01:51,680
but if we look at the rest then the

58
00:01:49,840 --> 00:01:53,280
picture is less reassuring

59
00:01:51,680 --> 00:01:55,200
for example in the linux kernel only

60
00:01:53,280 --> 00:01:57,280
about 170

61
00:01:55,200 --> 00:01:58,479
array accesses are patched against

62
00:01:57,280 --> 00:02:00,719
spectrum

63
00:01:58,479 --> 00:02:03,039
uh if you look in that cell in the all

64
00:02:00,719 --> 00:02:05,280
of the source code base of linux

65
00:02:03,040 --> 00:02:07,520
then if you look at openssl they

66
00:02:05,280 --> 00:02:09,759
declared that local attackers just

67
00:02:07,520 --> 00:02:11,599
not a part of their threat model and

68
00:02:09,758 --> 00:02:12,160
even in the software where the local

69
00:02:11,599 --> 00:02:14,319
attacker

70
00:02:12,160 --> 00:02:15,599
is a part of the threat model such as

71
00:02:14,319 --> 00:02:17,440
intelligence framework

72
00:02:15,599 --> 00:02:19,679
graphene we see no matches against

73
00:02:17,440 --> 00:02:22,319
spectrum

74
00:02:19,680 --> 00:02:24,160
so why is it the case by this is a

75
00:02:22,319 --> 00:02:26,079
little adoption of defenses

76
00:02:24,160 --> 00:02:28,000
because on one hand they are quite

77
00:02:26,080 --> 00:02:28,879
expensive holistic mitigation against

78
00:02:28,000 --> 00:02:30,959
spectre would

79
00:02:28,879 --> 00:02:33,040
slow down an application by about 50

80
00:02:30,959 --> 00:02:35,440
percent in some cases much

81
00:02:33,040 --> 00:02:37,040
more and on the other hand people are

82
00:02:35,440 --> 00:02:38,720
considering this attacks as more

83
00:02:37,040 --> 00:02:41,359
theoretical which is arguable

84
00:02:38,720 --> 00:02:43,040
uh but they are not willing to invest

85
00:02:41,360 --> 00:02:46,239
that much into mitigations

86
00:02:43,040 --> 00:02:49,440
against them therefore the goal

87
00:02:46,239 --> 00:02:50,000
of our work was to change the situation

88
00:02:49,440 --> 00:02:52,400
or at least

89
00:02:50,000 --> 00:02:54,239
help somehow in changing this situation

90
00:02:52,400 --> 00:02:55,920
we wanted to improve the performance of

91
00:02:54,239 --> 00:02:57,360
the defenses against factor and

92
00:02:55,920 --> 00:02:59,440
this way hopefully increase their

93
00:02:57,360 --> 00:03:02,159
adoption

94
00:02:59,440 --> 00:03:03,680
and our solution to this our approach is

95
00:03:02,159 --> 00:03:05,840
to apply fusing

96
00:03:03,680 --> 00:03:07,920
fuzzing is a testing technique where you

97
00:03:05,840 --> 00:03:10,879
feed random inputs to a program

98
00:03:07,920 --> 00:03:13,359
until you detect an error in it however

99
00:03:10,879 --> 00:03:15,760
it is not as simple as taking one of the

100
00:03:13,360 --> 00:03:17,440
many existing fusing tools and applying

101
00:03:15,760 --> 00:03:20,000
it to a problem the problem is

102
00:03:17,440 --> 00:03:20,560
that even if a spectre vulnerability is

103
00:03:20,000 --> 00:03:22,400
triggered

104
00:03:20,560 --> 00:03:24,720
during fuzzing uh the fuzzer will not

105
00:03:22,400 --> 00:03:26,480
detect this vulnerability

106
00:03:24,720 --> 00:03:28,480
because this because speculative

107
00:03:26,480 --> 00:03:29,200
execution is an internal hardware

108
00:03:28,480 --> 00:03:31,040
feature

109
00:03:29,200 --> 00:03:32,480
and it doesn't show up on the software

110
00:03:31,040 --> 00:03:34,400
level

111
00:03:32,480 --> 00:03:36,000
and our answer to this is what we call

112
00:03:34,400 --> 00:03:37,920
speculation exposure

113
00:03:36,000 --> 00:03:39,760
the idea is to transform this

114
00:03:37,920 --> 00:03:41,839
speculative execution into normal

115
00:03:39,760 --> 00:03:44,840
execution that is by transforming

116
00:03:41,840 --> 00:03:46,080
an internal hardware behavior into the

117
00:03:44,840 --> 00:03:48,080
software

118
00:03:46,080 --> 00:03:49,760
we can do it through simulation we can

119
00:03:48,080 --> 00:03:53,200
simulate a branch predictor and

120
00:03:49,760 --> 00:03:56,000
in order to be on the safe side to

121
00:03:53,200 --> 00:03:57,760
have an always correct simulation we

122
00:03:56,000 --> 00:03:59,519
will simulate a branch predictor that

123
00:03:57,760 --> 00:04:02,079
always makes a wrong decision that is

124
00:03:59,519 --> 00:04:03,840
it goes into a wrong branch however

125
00:04:02,080 --> 00:04:05,360
running a full simulation would be way

126
00:04:03,840 --> 00:04:08,480
too slow

127
00:04:05,360 --> 00:04:10,640
therefore instead what we do we do a

128
00:04:08,480 --> 00:04:12,560
simulation inside the program

129
00:04:10,640 --> 00:04:14,079
they are changing the problem such that

130
00:04:12,560 --> 00:04:17,120
the speculative execution

131
00:04:14,080 --> 00:04:20,239
becomes a part of the program itself

132
00:04:17,120 --> 00:04:23,199
here's how they do it here's an

133
00:04:20,238 --> 00:04:25,120
example of a program we have an entry

134
00:04:23,199 --> 00:04:26,320
node with a conditional branch that goes

135
00:04:25,120 --> 00:04:29,199
either into node b

136
00:04:26,320 --> 00:04:30,639
or c and we transform this program in

137
00:04:29,199 --> 00:04:33,360
such a way that we

138
00:04:30,639 --> 00:04:34,639
we duplicate this internal this entry

139
00:04:33,360 --> 00:04:37,360
node

140
00:04:34,639 --> 00:04:38,160
and we replace the exit condition of

141
00:04:37,360 --> 00:04:40,720
this

142
00:04:38,160 --> 00:04:42,160
duplicated entry node with an inverse

143
00:04:40,720 --> 00:04:44,000
one let us be replaced

144
00:04:42,160 --> 00:04:46,080
the conditional branch that existed

145
00:04:44,000 --> 00:04:46,560
before with a conditional branch that

146
00:04:46,080 --> 00:04:49,120
has an

147
00:04:46,560 --> 00:04:50,560
inverse condition this way we are

148
00:04:49,120 --> 00:04:53,120
simulating ms prediction

149
00:04:50,560 --> 00:04:54,560
however just this would be insufficient

150
00:04:53,120 --> 00:04:56,320
if we just bring the problem

151
00:04:54,560 --> 00:04:58,320
we have to somehow preserve the state of

152
00:04:56,320 --> 00:04:59,759
the program now therefore before

153
00:04:58,320 --> 00:05:02,400
starting the simulation we

154
00:04:59,759 --> 00:05:03,840
take a checkpoint on the program state

155
00:05:02,400 --> 00:05:06,400
then we run the simulation and

156
00:05:03,840 --> 00:05:07,919
after it we roll back uh the program to

157
00:05:06,400 --> 00:05:10,159
the previous state and we execute the

158
00:05:07,919 --> 00:05:12,560
original node with the correct

159
00:05:10,160 --> 00:05:13,360
conditional branch so here's how it

160
00:05:12,560 --> 00:05:15,600
looks

161
00:05:13,360 --> 00:05:18,000
at runtime we would execute the

162
00:05:15,600 --> 00:05:20,720
mispredicted branch first

163
00:05:18,000 --> 00:05:22,840
we would roll back to the original node

164
00:05:20,720 --> 00:05:26,080
and we will execute the correct branch

165
00:05:22,840 --> 00:05:27,919
next so to summarize

166
00:05:26,080 --> 00:05:29,599
speculation exposure means that we are

167
00:05:27,919 --> 00:05:31,758
transforming

168
00:05:29,600 --> 00:05:32,720
speculative attacks something invisible

169
00:05:31,759 --> 00:05:35,039
to the software

170
00:05:32,720 --> 00:05:36,960
into normal classical memory violation

171
00:05:35,039 --> 00:05:37,599
something that is visible to software

172
00:05:36,960 --> 00:05:40,799
and that

173
00:05:37,600 --> 00:05:42,479
can be detected by phosphors

174
00:05:40,800 --> 00:05:44,400
and we implemented this idea of

175
00:05:42,479 --> 00:05:44,639
speculation exposure as a combination of

176
00:05:44,400 --> 00:05:47,840
an

177
00:05:44,639 --> 00:05:51,440
llpm pass and a runtime library and

178
00:05:47,840 --> 00:05:51,919
to detect this exposed vulnerabilities

179
00:05:51,440 --> 00:05:54,560
we

180
00:05:51,919 --> 00:05:56,080
just used address sanitizer even though

181
00:05:54,560 --> 00:05:59,120
the idea of speculation and

182
00:05:56,080 --> 00:06:01,198
exposure might sound quite simple the

183
00:05:59,120 --> 00:06:02,240
implementation of it was actually quite

184
00:06:01,199 --> 00:06:04,160
tricky because

185
00:06:02,240 --> 00:06:05,520
what we did here we basically forced the

186
00:06:04,160 --> 00:06:07,919
program to execute

187
00:06:05,520 --> 00:06:09,680
wrong parts of the code we forced it to

188
00:06:07,919 --> 00:06:12,400
go into their own paths

189
00:06:09,680 --> 00:06:14,080
and it often led to crashes and similar

190
00:06:12,400 --> 00:06:17,120
things so we have to deal with that

191
00:06:14,080 --> 00:06:19,280
and in addition to that um

192
00:06:17,120 --> 00:06:20,880
we might have several mispredictions

193
00:06:19,280 --> 00:06:22,159
several speculations

194
00:06:20,880 --> 00:06:23,120
in a row we might have several

195
00:06:22,160 --> 00:06:24,000
conditional branches that are

196
00:06:23,120 --> 00:06:26,160
mispredicted

197
00:06:24,000 --> 00:06:27,440
and simulating all of them creates a

198
00:06:26,160 --> 00:06:30,560
large tree of

199
00:06:27,440 --> 00:06:33,759
simulations and it might lead to

200
00:06:30,560 --> 00:06:35,680
a state explosion however i won't be

201
00:06:33,759 --> 00:06:37,120
going so much deeper into the details if

202
00:06:35,680 --> 00:06:39,840
you are interested in them

203
00:06:37,120 --> 00:06:40,560
uh you can read the paper instead let's

204
00:06:39,840 --> 00:06:43,119
see

205
00:06:40,560 --> 00:06:43,680
what we can get with spectrus this table

206
00:06:43,120 --> 00:06:46,000
presents

207
00:06:43,680 --> 00:06:46,880
the results of our evaluation and here

208
00:06:46,000 --> 00:06:48,560
we tested

209
00:06:46,880 --> 00:06:49,919
several libraries several parsing

210
00:06:48,560 --> 00:06:51,360
libraries because they deal directly

211
00:06:49,919 --> 00:06:53,440
with the user input and

212
00:06:51,360 --> 00:06:55,680
also open ssl and the table presents the

213
00:06:53,440 --> 00:06:57,840
total number of vulnerabilities

214
00:06:55,680 --> 00:06:59,440
that we detected in those libraries

215
00:06:57,840 --> 00:07:01,039
since the number was

216
00:06:59,440 --> 00:07:02,639
actually pretty large we decided to

217
00:07:01,039 --> 00:07:06,479
bring them somehow we used

218
00:07:02,639 --> 00:07:08,400
certain heuristics to see how danger

219
00:07:06,479 --> 00:07:09,919
whether some vulnerabilities are more

220
00:07:08,400 --> 00:07:11,758
dangerous than others

221
00:07:09,919 --> 00:07:12,960
and here each role in the table

222
00:07:11,759 --> 00:07:14,479
represents a different type of

223
00:07:12,960 --> 00:07:18,400
vulnerability

224
00:07:14,479 --> 00:07:20,240
the first role of vulnerabilities where

225
00:07:18,400 --> 00:07:22,239
the control flow of the program could be

226
00:07:20,240 --> 00:07:22,800
changed somehow for example if a code

227
00:07:22,240 --> 00:07:25,199
pointer

228
00:07:22,800 --> 00:07:27,599
can get overwritten or a return address

229
00:07:25,199 --> 00:07:30,720
can get speculatively overwritten

230
00:07:27,599 --> 00:07:31,759
uh and the rest the other three rows are

231
00:07:30,720 --> 00:07:34,000
the cases where

232
00:07:31,759 --> 00:07:35,360
we would have either a speculative right

233
00:07:34,000 --> 00:07:38,240
or a reach to an

234
00:07:35,360 --> 00:07:39,759
invalid object the second rule

235
00:07:38,240 --> 00:07:41,120
controlled vulnerabilities are the cases

236
00:07:39,759 --> 00:07:43,039
where the attacker can

237
00:07:41,120 --> 00:07:44,720
control the excess address therefore we

238
00:07:43,039 --> 00:07:47,440
consider them more dangerous

239
00:07:44,720 --> 00:07:48,400
and the third row uncontrolled uh these

240
00:07:47,440 --> 00:07:50,160
are the cases where

241
00:07:48,400 --> 00:07:51,919
the address is always the same the

242
00:07:50,160 --> 00:07:53,440
excessive drums

243
00:07:51,919 --> 00:07:55,280
the last row are the cases where we

244
00:07:53,440 --> 00:07:58,400
didn't have enough information to

245
00:07:55,280 --> 00:08:00,239
decide at that

246
00:07:58,400 --> 00:08:01,679
yet page and all these vulnerabilities

247
00:08:00,240 --> 00:08:02,160
mainly would be way too tedious and

248
00:08:01,680 --> 00:08:05,120
going

249
00:08:02,160 --> 00:08:05,759
manually through all of them therefore

250
00:08:05,120 --> 00:08:08,080
instead

251
00:08:05,759 --> 00:08:09,199
we implemented a mechanism to page them

252
00:08:08,080 --> 00:08:11,758
automatically

253
00:08:09,199 --> 00:08:12,319
so what we did we took two existing

254
00:08:11,759 --> 00:08:15,360
patching

255
00:08:12,319 --> 00:08:17,440
uh techniques one of them is an lvm pass

256
00:08:15,360 --> 00:08:18,960
that adds a fences after conditional

257
00:08:17,440 --> 00:08:21,280
branches and the second technique

258
00:08:18,960 --> 00:08:23,120
is what is called speculative blood

259
00:08:21,280 --> 00:08:24,159
hardening it's a technique that has data

260
00:08:23,120 --> 00:08:27,680
dependencies

261
00:08:24,160 --> 00:08:30,319
and we modified these two uh tools

262
00:08:27,680 --> 00:08:30,720
uh to accept a list of vulnerabilities

263
00:08:30,319 --> 00:08:32,959
uh

264
00:08:30,720 --> 00:08:34,399
that we received from fuzz and also

265
00:08:32,958 --> 00:08:37,199
coverage from fuzzy

266
00:08:34,399 --> 00:08:37,919
and what we did here we removed the

267
00:08:37,200 --> 00:08:39,839
heart rate

268
00:08:37,919 --> 00:08:41,039
from all the cases where we had enough

269
00:08:39,839 --> 00:08:42,399
coverage and

270
00:08:41,039 --> 00:08:44,319
where we did not detect the

271
00:08:42,399 --> 00:08:45,120
vulnerabilities so what we have here in

272
00:08:44,320 --> 00:08:48,080
effect is

273
00:08:45,120 --> 00:08:49,120
we are cleaning up the hardening from

274
00:08:48,080 --> 00:08:52,080
the program

275
00:08:49,120 --> 00:08:53,040
with the fuzzing and here's what we can

276
00:08:52,080 --> 00:08:55,519
get out of it

277
00:08:53,040 --> 00:08:56,319
so this plot represents the speed up

278
00:08:55,519 --> 00:08:59,120
that is how much

279
00:08:56,320 --> 00:08:59,920
faster the program becomes uh when we

280
00:08:59,120 --> 00:09:02,399
apply this

281
00:08:59,920 --> 00:09:03,279
partial hardening in comparison to full

282
00:09:02,399 --> 00:09:07,040
hardening where

283
00:09:03,279 --> 00:09:10,480
every conditional branch is finished

284
00:09:07,040 --> 00:09:12,399
uh again we tested several libraries

285
00:09:10,480 --> 00:09:15,680
and here are the results here the green

286
00:09:12,399 --> 00:09:18,080
bar is as offenses and the blue bar is

287
00:09:15,680 --> 00:09:19,760
uh modified speculative word hardware as

288
00:09:18,080 --> 00:09:21,600
you see the results are quite different

289
00:09:19,760 --> 00:09:22,959
in some libraries the bit up was very

290
00:09:21,600 --> 00:09:26,160
very considerable

291
00:09:22,959 --> 00:09:28,959
and we had quite beneficial results

292
00:09:26,160 --> 00:09:30,000
but with open ssl for example the

293
00:09:28,959 --> 00:09:34,640
results are not

294
00:09:30,000 --> 00:09:37,760
as big and not as impressive

295
00:09:34,640 --> 00:09:39,439
this happened so the lower effectiveness

296
00:09:37,760 --> 00:09:41,680
fuzzing uh happened here because

297
00:09:39,440 --> 00:09:43,519
we had quite low coverage with openness

298
00:09:41,680 --> 00:09:44,800
cell only about 90 to 25 percent

299
00:09:43,519 --> 00:09:46,560
and it also detected several

300
00:09:44,800 --> 00:09:49,519
vulnerabilities on the hot part

301
00:09:46,560 --> 00:09:50,560
before so in summary here's how you use

302
00:09:49,519 --> 00:09:52,160
spectrus

303
00:09:50,560 --> 00:09:54,719
initially you have the source code of a

304
00:09:52,160 --> 00:09:57,120
program written in cs4c plus plus

305
00:09:54,720 --> 00:09:58,560
uh you compile it with the our modified

306
00:09:57,120 --> 00:10:00,720
version of llvm that

307
00:09:58,560 --> 00:10:02,479
applies speculation exposure that adds

308
00:10:00,720 --> 00:10:04,640
speculation exposure

309
00:10:02,480 --> 00:10:06,399
then you fast the resulting binary you

310
00:10:04,640 --> 00:10:08,640
get a list of vulnerabilities

311
00:10:06,399 --> 00:10:10,160
you analyze them aggregate and you feed

312
00:10:08,640 --> 00:10:12,959
them to our automated

313
00:10:10,160 --> 00:10:14,800
patching tool and in the end as a result

314
00:10:12,959 --> 00:10:16,479
you get a hardened binary against

315
00:10:14,800 --> 00:10:18,560
spectrum

316
00:10:16,480 --> 00:10:19,680
and with that i want to conclude and i

317
00:10:18,560 --> 00:10:21,839
hope that our work

318
00:10:19,680 --> 00:10:23,279
will make indeed the defenses against

319
00:10:21,839 --> 00:10:24,800
spectrum more appealing and

320
00:10:23,279 --> 00:10:26,560
increase their reduction in security

321
00:10:24,800 --> 00:10:28,640
critical applications

322
00:10:26,560 --> 00:10:29,920
uh if you want to try the source code is

323
00:10:28,640 --> 00:10:32,480
published on github and

324
00:10:29,920 --> 00:10:44,479
if you have any questions just write us

325
00:10:32,480 --> 00:10:44,480
thank you

