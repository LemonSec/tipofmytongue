1
00:00:08,000 --> 00:00:10,719
good morning everyone

2
00:00:09,120 --> 00:00:12,639
i'm anurag and today i'm going to be

3
00:00:10,719 --> 00:00:13,200
talking about pancake a system that

4
00:00:12,639 --> 00:00:15,440
employs

5
00:00:13,200 --> 00:00:16,320
frequency smoothing to protect encrypted

6
00:00:15,440 --> 00:00:19,039
data stores

7
00:00:16,320 --> 00:00:20,800
against access pattern attacks this is

8
00:00:19,039 --> 00:00:21,760
joint work with my collaborators at

9
00:00:20,800 --> 00:00:24,960
cornell tech

10
00:00:21,760 --> 00:00:26,640
cornell and berkeley

11
00:00:24,960 --> 00:00:28,880
with a large number of applications

12
00:00:26,640 --> 00:00:31,359
moving to the cloud for its ease of use

13
00:00:28,880 --> 00:00:33,120
scalability and cost efficiency

14
00:00:31,359 --> 00:00:34,880
cloud-hosted data stores have become the

15
00:00:33,120 --> 00:00:36,559
fundamental building block for most

16
00:00:34,880 --> 00:00:38,800
cloud applications

17
00:00:36,559 --> 00:00:41,040
a popular choice amongst these data

18
00:00:38,800 --> 00:00:42,718
stores are key value stores

19
00:00:41,040 --> 00:00:44,879
where the data is represented as key

20
00:00:42,719 --> 00:00:46,800
value pairs stored in the cloud

21
00:00:44,879 --> 00:00:48,160
and these key value pairs are accessed

22
00:00:46,800 --> 00:00:50,959
by external clients

23
00:00:48,160 --> 00:00:53,360
outside the cloud infrastructure now the

24
00:00:50,960 --> 00:00:54,960
need for privacy and confidentiality and

25
00:00:53,360 --> 00:00:57,039
sensitive applications

26
00:00:54,960 --> 00:00:58,960
have led to a growing adoption of

27
00:00:57,039 --> 00:01:00,559
encrypted data stores

28
00:00:58,960 --> 00:01:02,320
such data stores typically have a

29
00:01:00,559 --> 00:01:03,519
trusted component which comprises the

30
00:01:02,320 --> 00:01:05,119
clients

31
00:01:03,520 --> 00:01:06,880
while the cloud storage forms the

32
00:01:05,119 --> 00:01:08,560
untrusted component

33
00:01:06,880 --> 00:01:10,320
the clients typically keep the data

34
00:01:08,560 --> 00:01:12,799
encrypted in the data store

35
00:01:10,320 --> 00:01:16,080
for security using searchable encryption

36
00:01:12,799 --> 00:01:18,640
mechanisms to access the data

37
00:01:16,080 --> 00:01:20,798
unfortunately simply encrypting the data

38
00:01:18,640 --> 00:01:21,680
is insufficient to ensure that the data

39
00:01:20,799 --> 00:01:24,640
is secure

40
00:01:21,680 --> 00:01:25,200
due to access pattern attacks as an

41
00:01:24,640 --> 00:01:27,040
example

42
00:01:25,200 --> 00:01:28,240
consider a medical appointment system

43
00:01:27,040 --> 00:01:30,720
that indexes

44
00:01:28,240 --> 00:01:32,960
patient records in a key value store

45
00:01:30,720 --> 00:01:34,798
based on the patient conditions

46
00:01:32,960 --> 00:01:37,119
that is the keys correspond to patient

47
00:01:34,799 --> 00:01:39,200
condition and the values correspond to

48
00:01:37,119 --> 00:01:41,280
patient records

49
00:01:39,200 --> 00:01:42,240
in such attacks the adversary which in

50
00:01:41,280 --> 00:01:45,119
this case is an

51
00:01:42,240 --> 00:01:46,479
untrusted cloud provider can observe how

52
00:01:45,119 --> 00:01:49,600
frequently specific

53
00:01:46,479 --> 00:01:50,320
patient conditions are accessed the

54
00:01:49,600 --> 00:01:52,880
adversary

55
00:01:50,320 --> 00:01:54,559
also has prior distribution information

56
00:01:52,880 --> 00:01:57,119
about the underlying data

57
00:01:54,560 --> 00:01:58,880
in this example the adversary is aware

58
00:01:57,119 --> 00:01:59,759
of the relative frequencies of patient

59
00:01:58,880 --> 00:02:02,000
conditions

60
00:01:59,759 --> 00:02:04,560
such as diabetes being three times as

61
00:02:02,000 --> 00:02:06,399
common as cancer

62
00:02:04,560 --> 00:02:08,239
equipped with this information the

63
00:02:06,399 --> 00:02:08,800
adversary can correlate the patient

64
00:02:08,239 --> 00:02:11,120
condition

65
00:02:08,800 --> 00:02:12,239
frequencies from prior knowledge with

66
00:02:11,120 --> 00:02:14,319
the actual access

67
00:02:12,239 --> 00:02:16,800
frequencies across patient records in

68
00:02:14,319 --> 00:02:18,799
the key value store

69
00:02:16,800 --> 00:02:20,160
the adversary can even guess if the

70
00:02:18,800 --> 00:02:24,319
subsequent access

71
00:02:20,160 --> 00:02:26,400
was made to a cancer patient record

72
00:02:24,319 --> 00:02:28,079
several recent papers have shown that an

73
00:02:26,400 --> 00:02:30,400
adversary can exploit such

74
00:02:28,080 --> 00:02:32,959
access pattern attacks in real world

75
00:02:30,400 --> 00:02:32,959
deployments

76
00:02:34,640 --> 00:02:38,559
most of prior work on preventing such

77
00:02:36,640 --> 00:02:40,319
attacks has focused on strong

78
00:02:38,560 --> 00:02:42,319
active adversary model where the

79
00:02:40,319 --> 00:02:42,879
adversary can not only observe access

80
00:02:42,319 --> 00:02:46,879
patterns

81
00:02:42,879 --> 00:02:49,040
but also inject accesses of its own

82
00:02:46,879 --> 00:02:50,640
the most predominant of these approaches

83
00:02:49,040 --> 00:02:53,200
are oblivious ram and private

84
00:02:50,640 --> 00:02:55,040
information retrieval

85
00:02:53,200 --> 00:02:57,040
while such approaches provide strong

86
00:02:55,040 --> 00:02:58,239
security they have prohibitively high

87
00:02:57,040 --> 00:03:00,480
performance overheads

88
00:02:58,239 --> 00:03:02,720
making them impractical for most cloud

89
00:03:00,480 --> 00:03:05,440
deployments

90
00:03:02,720 --> 00:03:07,599
in fact many recent works have shown a

91
00:03:05,440 --> 00:03:08,480
log n lower bound on oram bandwidth

92
00:03:07,599 --> 00:03:10,399
overheads

93
00:03:08,480 --> 00:03:13,920
the extremely high bandwidth and storage

94
00:03:10,400 --> 00:03:15,760
overheads for real-world workloads

95
00:03:13,920 --> 00:03:17,760
searchable encryption approaches on the

96
00:03:15,760 --> 00:03:18,560
other hand assume a snapshot adversary

97
00:03:17,760 --> 00:03:20,959
model

98
00:03:18,560 --> 00:03:22,800
where an adversary can observe a

99
00:03:20,959 --> 00:03:24,959
snapshot of the data store

100
00:03:22,800 --> 00:03:27,599
eliminating the possibility of access

101
00:03:24,959 --> 00:03:29,519
pattern attacks altogether

102
00:03:27,599 --> 00:03:31,119
while this enables high performance the

103
00:03:29,519 --> 00:03:33,120
security is weak

104
00:03:31,120 --> 00:03:34,159
and has been shown to be an unrealistic

105
00:03:33,120 --> 00:03:37,760
threat model for

106
00:03:34,159 --> 00:03:40,640
real or deployments in this work we

107
00:03:37,760 --> 00:03:42,399
consider a persistent passive adversary

108
00:03:40,640 --> 00:03:44,399
for access pattern attacks where the

109
00:03:42,400 --> 00:03:45,280
adversary can observe accesses to the

110
00:03:44,400 --> 00:03:48,879
data store

111
00:03:45,280 --> 00:03:50,400
but cannot inject or tamper with them

112
00:03:48,879 --> 00:03:52,239
try works have shown this to be a

113
00:03:50,400 --> 00:03:53,360
realistic threat model for many cloud

114
00:03:52,239 --> 00:03:56,400
deployments

115
00:03:53,360 --> 00:03:58,480
however until now it was unknown if

116
00:03:56,400 --> 00:04:00,080
bandwidth and storage efficient defenses

117
00:03:58,480 --> 00:04:02,000
for access pattern attacks

118
00:04:00,080 --> 00:04:05,360
are possible under the persistent

119
00:04:02,000 --> 00:04:05,360
passive adversarial model

120
00:04:05,760 --> 00:04:08,959
to enable a performance defense in this

121
00:04:07,760 --> 00:04:11,120
adversarial model

122
00:04:08,959 --> 00:04:13,280
we observe that the adversary relied on

123
00:04:11,120 --> 00:04:14,000
the access frequency distribution across

124
00:04:13,280 --> 00:04:16,959
eight items

125
00:04:14,000 --> 00:04:18,160
for these attacks in this work we

126
00:04:16,959 --> 00:04:20,000
consider the question

127
00:04:18,160 --> 00:04:21,840
what if the trusted system components

128
00:04:20,000 --> 00:04:23,520
were also equipped with the same

129
00:04:21,839 --> 00:04:26,638
distributional information

130
00:04:23,520 --> 00:04:27,198
can we reduce these overheads now in

131
00:04:26,639 --> 00:04:29,199
fact

132
00:04:27,199 --> 00:04:31,280
many key value stores already maintain

133
00:04:29,199 --> 00:04:33,360
statistics about access distributions

134
00:04:31,280 --> 00:04:36,719
for enabling optimizations like

135
00:04:33,360 --> 00:04:38,560
efficient data caching policies

136
00:04:36,720 --> 00:04:40,800
we build on this observation to show

137
00:04:38,560 --> 00:04:42,080
that it is in fact possible to employ

138
00:04:40,800 --> 00:04:44,080
frequency smoothing

139
00:04:42,080 --> 00:04:45,520
on encrypted key value pairs which

140
00:04:44,080 --> 00:04:47,520
essentially flattens

141
00:04:45,520 --> 00:04:50,240
the known access frequencies across key

142
00:04:47,520 --> 00:04:52,080
value pairs so that an adversary always

143
00:04:50,240 --> 00:04:53,840
observes a uniform access distribution

144
00:04:52,080 --> 00:04:55,359
across them

145
00:04:53,840 --> 00:04:57,119
we incorporate this technique into a

146
00:04:55,360 --> 00:04:58,240
system called pancake and show that it

147
00:04:57,120 --> 00:05:00,560
can achieve secure

148
00:04:58,240 --> 00:05:01,919
security against access pattern attacks

149
00:05:00,560 --> 00:05:04,320
with constant storage

150
00:05:01,919 --> 00:05:06,320
and bandwidth overheads we provide a

151
00:05:04,320 --> 00:05:08,800
formal security analysis for pancakes

152
00:05:06,320 --> 00:05:10,960
showing passive persistent security

153
00:05:08,800 --> 00:05:12,400
and perform comprehensive evaluation to

154
00:05:10,960 --> 00:05:14,320
show that pancake can achieve

155
00:05:12,400 --> 00:05:15,440
two orders of magnitude higher

156
00:05:14,320 --> 00:05:18,719
throughput

157
00:05:15,440 --> 00:05:20,719
than overamp approaches

158
00:05:18,720 --> 00:05:21,759
all right with that let's take a deeper

159
00:05:20,720 --> 00:05:23,600
look at how we can

160
00:05:21,759 --> 00:05:26,000
actually employ frequency smoothing to

161
00:05:23,600 --> 00:05:28,400
prevent access pattern attacks

162
00:05:26,000 --> 00:05:29,199
at a high level we model all queries as

163
00:05:28,400 --> 00:05:32,400
being drawn

164
00:05:29,199 --> 00:05:34,560
from a known distribution pi and then

165
00:05:32,400 --> 00:05:36,320
try to smooth the access distribution

166
00:05:34,560 --> 00:05:37,759
across either the original set of

167
00:05:36,320 --> 00:05:40,719
encrypted key value pairs

168
00:05:37,759 --> 00:05:42,320
or a larger superset let's take a look

169
00:05:40,720 --> 00:05:43,440
at a very simple technique that can

170
00:05:42,320 --> 00:05:45,360
achieve this

171
00:05:43,440 --> 00:05:47,120
assume you have four key value pairs

172
00:05:45,360 --> 00:05:48,800
with the axis distribution as shown in

173
00:05:47,120 --> 00:05:50,720
this figure

174
00:05:48,800 --> 00:05:53,280
one way to smooth this distribution is

175
00:05:50,720 --> 00:05:55,440
to replicate popular key value pairs

176
00:05:53,280 --> 00:05:56,400
and distribute the accesses across the

177
00:05:55,440 --> 00:05:58,160
replicas

178
00:05:56,400 --> 00:06:00,318
in a manner that ensures that the key

179
00:05:58,160 --> 00:06:02,319
for each key value pair is accessed

180
00:06:00,319 --> 00:06:04,720
equally

181
00:06:02,319 --> 00:06:06,560
to any external observer the access

182
00:06:04,720 --> 00:06:07,600
distribution across the key value pairs

183
00:06:06,560 --> 00:06:10,720
would now appear

184
00:06:07,600 --> 00:06:12,960
uniform however as you can see

185
00:06:10,720 --> 00:06:13,919
this approach can require creating a lot

186
00:06:12,960 --> 00:06:18,080
of replicas

187
00:06:13,919 --> 00:06:19,758
which can lead to high storage overheads

188
00:06:18,080 --> 00:06:23,520
the other approach is to add fake

189
00:06:19,759 --> 00:06:25,199
accesses to unpopular key value pairs

190
00:06:23,520 --> 00:06:26,719
again this would make the access

191
00:06:25,199 --> 00:06:30,479
distribution appear

192
00:06:26,720 --> 00:06:33,120
uniform to any external observer

193
00:06:30,479 --> 00:06:34,960
unfortunately as you can see adding fake

194
00:06:33,120 --> 00:06:38,720
accessories can add a lot of bandwidth

195
00:06:34,960 --> 00:06:40,960
overheads as shown by the red bars

196
00:06:38,720 --> 00:06:42,319
the key idea in pancake is to actually

197
00:06:40,960 --> 00:06:44,239
combine replication

198
00:06:42,319 --> 00:06:47,039
and fake accesses to bound both

199
00:06:44,240 --> 00:06:48,800
bandwidth and storage overheads

200
00:06:47,039 --> 00:06:50,719
the first step in pancake is to use

201
00:06:48,800 --> 00:06:52,880
replication where we create

202
00:06:50,720 --> 00:06:55,039
just enough replicas for each key value

203
00:06:52,880 --> 00:06:55,840
pair to partially smooth out the access

204
00:06:55,039 --> 00:06:58,880
distribution

205
00:06:55,840 --> 00:07:01,359
with bounded storage overheads

206
00:06:58,880 --> 00:07:02,080
in fact our application scheme ensures

207
00:07:01,360 --> 00:07:06,240
that storage

208
00:07:02,080 --> 00:07:08,080
increases by at most a factor of 2.

209
00:07:06,240 --> 00:07:09,360
since the resulting distribution is not

210
00:07:08,080 --> 00:07:11,840
completely uniform

211
00:07:09,360 --> 00:07:12,479
we then add fake access distribution by

212
00:07:11,840 --> 00:07:14,638
f

213
00:07:12,479 --> 00:07:17,199
across the new set of key value pairs to

214
00:07:14,639 --> 00:07:19,680
smooth it out completely

215
00:07:17,199 --> 00:07:20,560
our combination of replication in fake

216
00:07:19,680 --> 00:07:23,520
accesses

217
00:07:20,560 --> 00:07:24,560
ensures that at most one fake accesses

218
00:07:23,520 --> 00:07:27,120
access from pi

219
00:07:24,560 --> 00:07:28,319
f needs to be drawn for every real

220
00:07:27,120 --> 00:07:30,800
access from pi

221
00:07:28,319 --> 00:07:33,120
to ensure a completely uniform final

222
00:07:30,800 --> 00:07:35,120
access distribution

223
00:07:33,120 --> 00:07:36,240
in pancake we place the logic for

224
00:07:35,120 --> 00:07:38,639
frequency smoothing

225
00:07:36,240 --> 00:07:39,360
in a trusted proxy that forwards all

226
00:07:38,639 --> 00:07:42,800
requests

227
00:07:39,360 --> 00:07:44,560
on behalf of the clients as queries

228
00:07:42,800 --> 00:07:46,479
arrive at the proxy

229
00:07:44,560 --> 00:07:48,879
one challenge that needs to be addressed

230
00:07:46,479 --> 00:07:50,719
is issuing queries with our frequency

231
00:07:48,879 --> 00:07:53,120
smoothing approach

232
00:07:50,720 --> 00:07:55,440
in a manner that ensures an observer can

233
00:07:53,120 --> 00:07:57,440
never distinguish between real and fake

234
00:07:55,440 --> 00:07:59,680
queries

235
00:07:57,440 --> 00:08:02,000
the approach we take is to always issue

236
00:07:59,680 --> 00:08:02,400
queries in big size batches comprising a

237
00:08:02,000 --> 00:08:05,199
mix

238
00:08:02,400 --> 00:08:06,799
of real and fake accesses with equal

239
00:08:05,199 --> 00:08:09,759
probability

240
00:08:06,800 --> 00:08:10,080
in particular whenever a new query comes

241
00:08:09,759 --> 00:08:12,160
in

242
00:08:10,080 --> 00:08:14,560
from a client we enqueue it at the

243
00:08:12,160 --> 00:08:17,440
pancake proxy

244
00:08:14,560 --> 00:08:18,400
we then flip b coins where b is the size

245
00:08:17,440 --> 00:08:20,400
of the batch

246
00:08:18,400 --> 00:08:22,719
so in this example we flip three coins

247
00:08:20,400 --> 00:08:25,520
because b equals to three

248
00:08:22,720 --> 00:08:27,599
if the coin flip is a head then we

249
00:08:25,520 --> 00:08:29,280
dequeue a query from the queue and

250
00:08:27,599 --> 00:08:31,039
or draw an access from the original

251
00:08:29,280 --> 00:08:33,919
access distribution pi if the

252
00:08:31,039 --> 00:08:35,120
queue is empty if the coin flip is

253
00:08:33,919 --> 00:08:36,958
scales instead

254
00:08:35,120 --> 00:08:40,640
we draw a fake axis from the fake

255
00:08:36,958 --> 00:08:43,039
distribution by f when the batch

256
00:08:40,640 --> 00:08:45,199
is complete the proxy sends it out to

257
00:08:43,039 --> 00:08:47,040
the cloud storage

258
00:08:45,200 --> 00:08:49,279
in our implementation we use a batch

259
00:08:47,040 --> 00:08:51,519
size of three as shown in this example

260
00:08:49,279 --> 00:08:53,200
as such our bandwidth overhead is

261
00:08:51,519 --> 00:08:55,440
exactly a factor of three

262
00:08:53,200 --> 00:08:58,080
while our storage overhead is less than

263
00:08:55,440 --> 00:09:00,000
or equal to a factor of 2.

264
00:08:58,080 --> 00:09:01,279
we show that this approach allows

265
00:09:00,000 --> 00:09:03,120
pancake to provide

266
00:09:01,279 --> 00:09:05,120
formal security guarantees under a

267
00:09:03,120 --> 00:09:07,200
certain set of assumptions

268
00:09:05,120 --> 00:09:08,480
first we assume that the adversary is

269
00:09:07,200 --> 00:09:10,000
persistent passive

270
00:09:08,480 --> 00:09:12,399
which means that while it can observe

271
00:09:10,000 --> 00:09:13,920
all accesses it cannot inject or tamper

272
00:09:12,399 --> 00:09:16,160
with them

273
00:09:13,920 --> 00:09:17,760
second we assume that pancake has a

274
00:09:16,160 --> 00:09:19,760
reasonable estimate of the access

275
00:09:17,760 --> 00:09:21,920
distribution pi

276
00:09:19,760 --> 00:09:22,839
finally we assume that real and fake

277
00:09:21,920 --> 00:09:24,880
axis are

278
00:09:22,839 --> 00:09:26,399
indistinguishable at the cloud storage

279
00:09:24,880 --> 00:09:28,240
servers

280
00:09:26,399 --> 00:09:29,839
under these assumptions a formal

281
00:09:28,240 --> 00:09:32,720
guarantee is referred to as

282
00:09:29,839 --> 00:09:34,720
real versus random indistinguishability

283
00:09:32,720 --> 00:09:38,240
under chosen distribution attack

284
00:09:34,720 --> 00:09:39,760
or ror cda for sure without going into

285
00:09:38,240 --> 00:09:42,160
too much detail

286
00:09:39,760 --> 00:09:44,160
in the real world the adversary is given

287
00:09:42,160 --> 00:09:46,399
the pancakes replicated and encrypted

288
00:09:44,160 --> 00:09:48,800
version of the key value store

289
00:09:46,399 --> 00:09:49,760
and a transcript of t queries generated

290
00:09:48,800 --> 00:09:53,439
by pancake

291
00:09:49,760 --> 00:09:55,519
comprising both real and fake accesses

292
00:09:53,440 --> 00:09:58,320
in the ideal world the adversary is

293
00:09:55,519 --> 00:10:00,640
given a key value store comprising

294
00:09:58,320 --> 00:10:01,600
random bit strings along with a

295
00:10:00,640 --> 00:10:05,760
transcript of

296
00:10:01,600 --> 00:10:08,399
the uniform access requests

297
00:10:05,760 --> 00:10:10,399
we then show that to an adversary both

298
00:10:08,399 --> 00:10:12,959
the real world and ideal world are

299
00:10:10,399 --> 00:10:15,120
indistinguishable from each other

300
00:10:12,959 --> 00:10:17,439
we also resolve a number of additional

301
00:10:15,120 --> 00:10:20,160
challenges to ensure pancake is secure

302
00:10:17,440 --> 00:10:20,640
and practical for instance in order to

303
00:10:20,160 --> 00:10:22,640
support

304
00:10:20,640 --> 00:10:23,680
updates to key value pairs with multiple

305
00:10:22,640 --> 00:10:25,839
replicas

306
00:10:23,680 --> 00:10:27,760
we buffer updates to these replicas

307
00:10:25,839 --> 00:10:31,120
until the next time they are accessed

308
00:10:27,760 --> 00:10:32,000
to ensure security in order to preserve

309
00:10:31,120 --> 00:10:34,240
security on

310
00:10:32,000 --> 00:10:36,160
changing access distributions we

311
00:10:34,240 --> 00:10:37,200
dynamically adjust the fake access

312
00:10:36,160 --> 00:10:39,279
distribution

313
00:10:37,200 --> 00:10:40,240
and reassign replicas across key value

314
00:10:39,279 --> 00:10:42,399
pairs

315
00:10:40,240 --> 00:10:44,320
finally in order to estimate access

316
00:10:42,399 --> 00:10:45,040
distributions and detect distribution

317
00:10:44,320 --> 00:10:47,040
changes

318
00:10:45,040 --> 00:10:48,160
we employ standard statistical tools

319
00:10:47,040 --> 00:10:50,319
such as

320
00:10:48,160 --> 00:10:51,199
sliding window histograms and two sample

321
00:10:50,320 --> 00:10:53,440
case tests

322
00:10:51,200 --> 00:10:54,880
respectively if you're interested in the

323
00:10:53,440 --> 00:10:56,560
details of how these techniques are

324
00:10:54,880 --> 00:10:58,880
incorporated into pancake

325
00:10:56,560 --> 00:11:00,800
please take a look at our paper before

326
00:10:58,880 --> 00:11:02,399
concluding i want to briefly talk about

327
00:11:00,800 --> 00:11:05,519
how pancake performs

328
00:11:02,399 --> 00:11:07,600
for real-world workloads i will show the

329
00:11:05,519 --> 00:11:10,320
results for pancake using a standard

330
00:11:07,600 --> 00:11:13,040
cloud storage back-end redness deployed

331
00:11:10,320 --> 00:11:15,279
in the cloud on amazon ec2 instances

332
00:11:13,040 --> 00:11:17,439
allowed along with pancake clanks and

333
00:11:15,279 --> 00:11:19,200
proxy

334
00:11:17,440 --> 00:11:21,279
the data set we use comprised of one

335
00:11:19,200 --> 00:11:23,839
million key value pairs of size 1 kb

336
00:11:21,279 --> 00:11:25,439
each and we use the popular yahoo cloud

337
00:11:23,839 --> 00:11:28,079
serving benchmark workload

338
00:11:25,440 --> 00:11:28,480
comprising 50 reads and fifty percent

339
00:11:28,079 --> 00:11:31,680
rights

340
00:11:28,480 --> 00:11:33,760
across key value pairs our results show

341
00:11:31,680 --> 00:11:35,920
that pancake requires four times lower

342
00:11:33,760 --> 00:11:37,760
cloud storage than our path oram the

343
00:11:35,920 --> 00:11:39,920
state-of-the-art oram approach

344
00:11:37,760 --> 00:11:41,439
and has a low proxy storage overhead

345
00:11:39,920 --> 00:11:42,640
which is about one percent of the cloud

346
00:11:41,440 --> 00:11:44,640
storage requirement

347
00:11:42,640 --> 00:11:47,439
we also see that pancake throughput is

348
00:11:44,640 --> 00:11:50,560
220 times higher than path oram

349
00:11:47,440 --> 00:11:52,560
with 12 times lower latency i will know

350
00:11:50,560 --> 00:11:54,479
that we provide many more results in our

351
00:11:52,560 --> 00:11:56,880
paper

352
00:11:54,480 --> 00:11:59,200
with that i'd like to conclude this talk

353
00:11:56,880 --> 00:12:00,880
i presented pancake a system that uses

354
00:11:59,200 --> 00:12:01,680
frequency smoothing to protect data

355
00:12:00,880 --> 00:12:03,680
stores against

356
00:12:01,680 --> 00:12:04,719
access pattern attacks at a constant

357
00:12:03,680 --> 00:12:07,199
factor storage

358
00:12:04,720 --> 00:12:08,639
and bandwidth overhead with that i'd

359
00:12:07,200 --> 00:12:21,680
like to thank you for your time

360
00:12:08,639 --> 00:12:21,680
and i'd be happy to take any questions

