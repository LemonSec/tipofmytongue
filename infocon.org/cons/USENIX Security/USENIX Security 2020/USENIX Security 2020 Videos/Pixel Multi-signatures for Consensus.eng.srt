1
00:00:09,120 --> 00:00:11,599
hi

2
00:00:09,760 --> 00:00:14,080
my name is gregory nevin this is your

3
00:00:11,599 --> 00:00:15,599
work with manu drivers sergey korbinov

4
00:00:14,080 --> 00:00:17,760
and hotek

5
00:00:15,599 --> 00:00:20,000
i'll talk to you about pixel pixel is a

6
00:00:17,760 --> 00:00:22,720
forward secure multi-signature scheme

7
00:00:20,000 --> 00:00:24,400
with applications to consensus protocols

8
00:00:22,720 --> 00:00:24,960
so the main application you guessed it

9
00:00:24,400 --> 00:00:27,279
right

10
00:00:24,960 --> 00:00:28,800
blockchain in case you've been living on

11
00:00:27,279 --> 00:00:30,000
a rock for the past 10 years and don't

12
00:00:28,800 --> 00:00:32,480
know what blockchain is

13
00:00:30,000 --> 00:00:34,399
it's essentially a sequence of blocks

14
00:00:32,479 --> 00:00:37,199
usually containing transactions

15
00:00:34,399 --> 00:00:37,920
that gets agreed upon by a network of

16
00:00:37,200 --> 00:00:40,960
nodes

17
00:00:37,920 --> 00:00:42,960
these nodes engage in a consensus

18
00:00:40,960 --> 00:00:43,760
protocol to agree on that sequence of

19
00:00:42,960 --> 00:00:45,520
blocks

20
00:00:43,760 --> 00:00:47,280
there's different variants of consensus

21
00:00:45,520 --> 00:00:47,920
protocols some of the most famous ones

22
00:00:47,280 --> 00:00:50,719
involving

23
00:00:47,920 --> 00:00:52,640
proof of work where nodes have to solve

24
00:00:50,719 --> 00:00:54,800
hash puzzles in order to

25
00:00:52,640 --> 00:00:57,440
cast votes on blocks some of the more

26
00:00:54,800 --> 00:00:59,839
environmentally friendly solutions use

27
00:00:57,440 --> 00:01:01,039
proof of stake where notes vote on block

28
00:00:59,840 --> 00:01:04,720
proposals

29
00:01:01,039 --> 00:01:07,040
by um by depositing stake by depositing

30
00:01:04,720 --> 00:01:09,600
tokens and for this vote and blocking

31
00:01:07,040 --> 00:01:11,600
them al goran cordano ether and casper

32
00:01:09,600 --> 00:01:13,039
are some examples in this class or

33
00:01:11,600 --> 00:01:17,360
permission blockchains

34
00:01:13,040 --> 00:01:20,720
where the membership of the network is

35
00:01:17,360 --> 00:01:22,640
is closed and decided upon by the

36
00:01:20,720 --> 00:01:25,679
current members of the network and they

37
00:01:22,640 --> 00:01:26,720
also usually vote on block proposals by

38
00:01:25,680 --> 00:01:28,240
an access structure

39
00:01:26,720 --> 00:01:29,920
imposed by the structure of the

40
00:01:28,240 --> 00:01:31,199
permission network ripple and

41
00:01:29,920 --> 00:01:35,759
hyperledger fabric

42
00:01:31,200 --> 00:01:35,759
are some examples in this class

43
00:01:35,840 --> 00:01:38,880
now when i say that nodes in these

44
00:01:38,240 --> 00:01:41,360
systems

45
00:01:38,880 --> 00:01:42,000
vote on a block proposal they usually do

46
00:01:41,360 --> 00:01:44,399
so by

47
00:01:42,000 --> 00:01:46,479
signing and so these could be thousands

48
00:01:44,399 --> 00:01:48,560
of nodes that in each round

49
00:01:46,479 --> 00:01:50,000
are adding their own signature to this

50
00:01:48,560 --> 00:01:51,600
to this blockchain

51
00:01:50,000 --> 00:01:53,200
plenty of those signatures have to be

52
00:01:51,600 --> 00:01:54,960
kept as part of the blockchain so it can

53
00:01:53,200 --> 00:01:57,759
be externally verifiable

54
00:01:54,960 --> 00:01:58,880
so that's a whole lot of signatures

55
00:01:57,759 --> 00:02:00,560
flying around

56
00:01:58,880 --> 00:02:03,679
and this is where multi-signatures come

57
00:02:00,560 --> 00:02:06,719
in multi-signatures are a primitive that

58
00:02:03,680 --> 00:02:09,200
allow you to instead of having this list

59
00:02:06,719 --> 00:02:11,359
of multiple signatures by multiple

60
00:02:09,199 --> 00:02:12,160
signers on the same message in this case

61
00:02:11,360 --> 00:02:14,879
the block

62
00:02:12,160 --> 00:02:16,480
replacing it with a single signature a

63
00:02:14,879 --> 00:02:18,560
single multi-signature

64
00:02:16,480 --> 00:02:19,599
that is short about the same size as a

65
00:02:18,560 --> 00:02:22,319
single signature

66
00:02:19,599 --> 00:02:24,160
and efficiently verifiable in about the

67
00:02:22,319 --> 00:02:26,238
same time as a single signature

68
00:02:24,160 --> 00:02:27,840
so this is a huge gain that you can get

69
00:02:26,239 --> 00:02:28,480
and therefore multisensors are quite

70
00:02:27,840 --> 00:02:30,959
popular

71
00:02:28,480 --> 00:02:31,920
for the use in blockchain there's a long

72
00:02:30,959 --> 00:02:34,879
list of literature

73
00:02:31,920 --> 00:02:36,559
on multi-signatures not going to go over

74
00:02:34,879 --> 00:02:38,799
that here but i guess we are adding our

75
00:02:36,560 --> 00:02:41,360
paper to that list

76
00:02:38,800 --> 00:02:42,879
but for the forward secure aspect i have

77
00:02:41,360 --> 00:02:43,920
to talk to you about another problem of

78
00:02:42,879 --> 00:02:46,079
blockchains

79
00:02:43,920 --> 00:02:47,920
um posterior corruption sometimes also

80
00:02:46,080 --> 00:02:49,120
known as long-range attacks or costal

81
00:02:47,920 --> 00:02:51,040
simulation

82
00:02:49,120 --> 00:02:53,840
the problem essentially comes down to

83
00:02:51,040 --> 00:02:55,760
the assumption of a chain integrity why

84
00:02:53,840 --> 00:02:57,519
do we think do we believe that there can

85
00:02:55,760 --> 00:02:59,679
be no forks in the chain

86
00:02:57,519 --> 00:03:02,000
usually we assume that if less than a

87
00:02:59,680 --> 00:03:04,080
fraction of nodes or a fraction of the

88
00:03:02,000 --> 00:03:06,480
stake is corrupt and we can prove that

89
00:03:04,080 --> 00:03:07,680
no two versions of the blockchain can

90
00:03:06,480 --> 00:03:09,920
exist

91
00:03:07,680 --> 00:03:11,519
now suppose that we're working with the

92
00:03:09,920 --> 00:03:13,040
threshold of one third of the nodes we

93
00:03:11,519 --> 00:03:13,440
have a network of ten nodes here two

94
00:03:13,040 --> 00:03:15,920
nodes

95
00:03:13,440 --> 00:03:17,920
should be fine no forks can agree it can

96
00:03:15,920 --> 00:03:19,359
occur but in case it would be four nodes

97
00:03:17,920 --> 00:03:21,679
out of ten that are corrupt

98
00:03:19,360 --> 00:03:24,000
forks can actually start occurring and

99
00:03:21,680 --> 00:03:27,360
this is what we want to avoid

100
00:03:24,000 --> 00:03:28,720
now um of course when you corrupt the

101
00:03:27,360 --> 00:03:30,319
node signing keys you essentially

102
00:03:28,720 --> 00:03:32,000
corrupted the notice this is really

103
00:03:30,319 --> 00:03:35,518
discussion about the signing keys

104
00:03:32,000 --> 00:03:37,680
of the node now

105
00:03:35,519 --> 00:03:39,040
the problem is that the network is not

106
00:03:37,680 --> 00:03:42,080
static usually

107
00:03:39,040 --> 00:03:42,560
and so even if the current status of the

108
00:03:42,080 --> 00:03:45,120
network

109
00:03:42,560 --> 00:03:47,440
should be able to support to cope with

110
00:03:45,120 --> 00:03:49,200
two corrupted nodes

111
00:03:47,440 --> 00:03:51,599
those two corrupted nodes may have been

112
00:03:49,200 --> 00:03:53,839
around in the network for a lot longer

113
00:03:51,599 --> 00:03:55,760
and their signature keys as well and so

114
00:03:53,840 --> 00:03:57,200
when when you corrupt those nodes and

115
00:03:55,760 --> 00:03:59,280
get their signature keys you can

116
00:03:57,200 --> 00:04:02,079
actually go back in time

117
00:03:59,280 --> 00:04:04,000
in the blockchain and create a fork at

118
00:04:02,080 --> 00:04:05,760
the point where those two nodes were

119
00:04:04,000 --> 00:04:07,760
actually a forking majority

120
00:04:05,760 --> 00:04:09,518
on the network and create a fork from

121
00:04:07,760 --> 00:04:11,040
there so now you have two versions of

122
00:04:09,519 --> 00:04:12,799
history that are impossible to

123
00:04:11,040 --> 00:04:16,159
distinguish for an external verifier

124
00:04:12,799 --> 00:04:18,880
this is exactly what we wanted to avoid

125
00:04:16,160 --> 00:04:20,160
not also that this problem only gets

126
00:04:18,880 --> 00:04:23,199
bigger over time

127
00:04:20,160 --> 00:04:25,600
as the network evolves there are only

128
00:04:23,199 --> 00:04:26,720
more and more sets of keys that become

129
00:04:25,600 --> 00:04:29,759
an achilles heel

130
00:04:26,720 --> 00:04:31,040
to the to the blockchain so the real

131
00:04:29,759 --> 00:04:33,520
assumption is that

132
00:04:31,040 --> 00:04:34,240
if there's any corrupted nodes that none

133
00:04:33,520 --> 00:04:37,680
of them

134
00:04:34,240 --> 00:04:41,199
formed a forking majority so to speak at

135
00:04:37,680 --> 00:04:43,440
any point in the past this actually

136
00:04:41,199 --> 00:04:45,440
is a problem because also it may occur

137
00:04:43,440 --> 00:04:47,280
long after the nodes left and so

138
00:04:45,440 --> 00:04:48,960
their stake have no more interest in the

139
00:04:47,280 --> 00:04:51,039
network at all they may even have sold

140
00:04:48,960 --> 00:04:53,520
their keys to the highest bidder

141
00:04:51,040 --> 00:04:55,440
and it's even on top of that aggravated

142
00:04:53,520 --> 00:04:57,120
by consensus protocols that use

143
00:04:55,440 --> 00:04:58,240
committee signing for efficiency where a

144
00:04:57,120 --> 00:05:00,400
smaller committee

145
00:04:58,240 --> 00:05:01,919
signs in name of the bigger group with

146
00:05:00,400 --> 00:05:02,400
adaptive attacks you could actually

147
00:05:01,919 --> 00:05:04,880
focus

148
00:05:02,400 --> 00:05:06,560
after the committees become known um to

149
00:05:04,880 --> 00:05:07,840
focus only on those nodes who are part

150
00:05:06,560 --> 00:05:10,800
of the committee get their keys

151
00:05:07,840 --> 00:05:11,119
and create a fork at that point so this

152
00:05:10,800 --> 00:05:14,400
is

153
00:05:11,120 --> 00:05:16,880
a big problem for um for blockchains

154
00:05:14,400 --> 00:05:18,239
what is the solution obviously rotating

155
00:05:16,880 --> 00:05:20,159
in keys if you do that in a

156
00:05:18,240 --> 00:05:21,440
straightforward way the public keys will

157
00:05:20,160 --> 00:05:23,759
change all the time of notes

158
00:05:21,440 --> 00:05:25,520
which is a bit impractical so forward

159
00:05:23,759 --> 00:05:28,080
secure signatures are the way to go

160
00:05:25,520 --> 00:05:29,120
here the public key stays constant but

161
00:05:28,080 --> 00:05:31,199
the secret key

162
00:05:29,120 --> 00:05:32,720
gets updated all the time and you sign

163
00:05:31,199 --> 00:05:34,960
and verify with respect to a

164
00:05:32,720 --> 00:05:36,880
certain time frame and the security

165
00:05:34,960 --> 00:05:39,680
property forward secure signatures is

166
00:05:36,880 --> 00:05:41,600
that if your key gets corrupted now the

167
00:05:39,680 --> 00:05:43,280
time frames of the past will be fine you

168
00:05:41,600 --> 00:05:46,880
cannot forge signatures

169
00:05:43,280 --> 00:05:49,520
for the past and that's why

170
00:05:46,880 --> 00:05:50,400
pixel the scheme that we present is a

171
00:05:49,520 --> 00:05:52,400
forward secure

172
00:05:50,400 --> 00:05:54,400
multi-signature scheme it is based on

173
00:05:52,400 --> 00:05:56,239
bi-linear maps

174
00:05:54,400 --> 00:05:58,318
there's the public key which is as

175
00:05:56,240 --> 00:05:59,360
typical generator raised to secret

176
00:05:58,319 --> 00:06:01,840
exponent

177
00:05:59,360 --> 00:06:03,840
the secret keys follow the structure of

178
00:06:01,840 --> 00:06:04,638
a hierarchical identity based encryption

179
00:06:03,840 --> 00:06:06,318
scheme

180
00:06:04,639 --> 00:06:08,479
the technique was first done by

181
00:06:06,319 --> 00:06:11,919
televised

182
00:06:08,479 --> 00:06:12,960
kanelli halevi cuts 2003 and our scheme

183
00:06:11,919 --> 00:06:14,960
can actually be seen

184
00:06:12,960 --> 00:06:16,159
as being underlain by the key structure

185
00:06:14,960 --> 00:06:19,520
of the bone

186
00:06:16,160 --> 00:06:21,280
boyan go scheme of 2005.

187
00:06:19,520 --> 00:06:22,639
going to go into the details of the key

188
00:06:21,280 --> 00:06:25,758
structure here

189
00:06:22,639 --> 00:06:26,560
but the scheme also has some public

190
00:06:25,759 --> 00:06:28,639
parameters

191
00:06:26,560 --> 00:06:29,680
random group elements from g1 which can

192
00:06:28,639 --> 00:06:33,039
be determined by

193
00:06:29,680 --> 00:06:35,120
a hash function and

194
00:06:33,039 --> 00:06:36,800
there there's something you could see as

195
00:06:35,120 --> 00:06:38,800
a hash function a hash function that

196
00:06:36,800 --> 00:06:41,759
takes the time frame and a message

197
00:06:38,800 --> 00:06:42,319
and converts it into a combination of

198
00:06:41,759 --> 00:06:45,280
products

199
00:06:42,319 --> 00:06:45,840
of those h values uh depending on on the

200
00:06:45,280 --> 00:06:49,280
message

201
00:06:45,840 --> 00:06:50,479
and the binary representation of the

202
00:06:49,280 --> 00:06:52,799
time frame

203
00:06:50,479 --> 00:06:53,520
now anyway the way that its signature in

204
00:06:52,800 --> 00:06:57,280
time t

205
00:06:53,520 --> 00:07:00,000
looks like is this public parameter h

206
00:06:57,280 --> 00:07:02,080
raised to the master key x times this

207
00:07:00,000 --> 00:07:03,919
hash of the time frame a message raised

208
00:07:02,080 --> 00:07:07,359
to a random exponent r

209
00:07:03,919 --> 00:07:10,400
and a second component has this

210
00:07:07,360 --> 00:07:12,479
exponent r in g2 to the r in there

211
00:07:10,400 --> 00:07:13,919
you can verify such a single

212
00:07:12,479 --> 00:07:16,080
verification by

213
00:07:13,919 --> 00:07:17,440
evaluating these three pairings of

214
00:07:16,080 --> 00:07:18,639
course the crucial part is can we

215
00:07:17,440 --> 00:07:20,880
compress those

216
00:07:18,639 --> 00:07:22,240
and yeah we can yeah we can compress

217
00:07:20,880 --> 00:07:23,919
those suppose you have a whole bunch of

218
00:07:22,240 --> 00:07:25,759
those signatures

219
00:07:23,919 --> 00:07:27,520
aggregating them into a single compact

220
00:07:25,759 --> 00:07:31,039
signature is as simple as just

221
00:07:27,520 --> 00:07:33,440
taking the product of component-wise of

222
00:07:31,039 --> 00:07:35,280
the signatures and you can check the

223
00:07:33,440 --> 00:07:35,599
algebra works out that you can verify

224
00:07:35,280 --> 00:07:37,280
this

225
00:07:35,599 --> 00:07:38,800
with respect to the aggregated public

226
00:07:37,280 --> 00:07:39,679
key which is the product of all the

227
00:07:38,800 --> 00:07:43,280
individual

228
00:07:39,680 --> 00:07:44,960
public keys now we prove that

229
00:07:43,280 --> 00:07:47,119
this scheme is secure in a random oracle

230
00:07:44,960 --> 00:07:48,719
model assuming secure erasures obviously

231
00:07:47,120 --> 00:07:50,639
because you have to update keys

232
00:07:48,720 --> 00:07:52,240
and the hardness of a linear

233
00:07:50,639 --> 00:07:54,800
diffie-hellman assumption

234
00:07:52,240 --> 00:07:56,319
performance is pretty good um on a bls

235
00:07:54,800 --> 00:08:00,560
12 301 curve

236
00:07:56,319 --> 00:08:03,599
with 1500 signers and about 4 billion

237
00:08:00,560 --> 00:08:06,000
time periods signatures and keys remain

238
00:08:03,599 --> 00:08:08,319
small public key 48 bytes the signature

239
00:08:06,000 --> 00:08:09,680
144 bytes independent of the number of

240
00:08:08,319 --> 00:08:12,080
signers in it

241
00:08:09,680 --> 00:08:13,199
and are fast signing is fast just three

242
00:08:12,080 --> 00:08:15,359
milliseconds

243
00:08:13,199 --> 00:08:17,280
computing the aggregate for 1500 times

244
00:08:15,360 --> 00:08:19,039
as fast just seven milliseconds

245
00:08:17,280 --> 00:08:20,638
verifying that aggregate is also very

246
00:08:19,039 --> 00:08:22,878
fast less than seven milliseconds

247
00:08:20,639 --> 00:08:25,120
so all these operations are really just

248
00:08:22,879 --> 00:08:27,680
think of them as a single signature

249
00:08:25,120 --> 00:08:30,160
um there's also a trade-off you can do

250
00:08:27,680 --> 00:08:32,399
between the key and the signature sizes

251
00:08:30,160 --> 00:08:33,919
uh versus the computation by switching

252
00:08:32,399 --> 00:08:35,599
the groups around one of the groups is

253
00:08:33,919 --> 00:08:36,880
slightly slower and slightly bigger than

254
00:08:35,599 --> 00:08:39,120
the other one but you can actually

255
00:08:36,880 --> 00:08:41,039
switch elements around and the skin will

256
00:08:39,120 --> 00:08:43,200
still work

257
00:08:41,039 --> 00:08:45,360
no trusted setup is needed for the pixel

258
00:08:43,200 --> 00:08:47,040
scheme which is a big advantage because

259
00:08:45,360 --> 00:08:48,240
trust is hard to come by in blockchain

260
00:08:47,040 --> 00:08:51,279
scenarios

261
00:08:48,240 --> 00:08:53,200
and we also provide row key protection

262
00:08:51,279 --> 00:08:54,399
by proofs of possession there's also

263
00:08:53,200 --> 00:08:57,839
other mechanisms

264
00:08:54,399 --> 00:08:59,600
that are possible anyway to show that

265
00:08:57,839 --> 00:09:02,560
this scheme actually works we

266
00:08:59,600 --> 00:09:03,839
integrated in it into the algorand

267
00:09:02,560 --> 00:09:08,319
blockchain

268
00:09:03,839 --> 00:09:11,760
algorand uses ed25519 signatures

269
00:09:08,320 --> 00:09:14,480
by design and needs forward security

270
00:09:11,760 --> 00:09:15,360
for their committee signing approach to

271
00:09:14,480 --> 00:09:19,920
work out

272
00:09:15,360 --> 00:09:21,839
and they use the valari miner

273
00:09:19,920 --> 00:09:23,839
generic approach with the three-based

274
00:09:21,839 --> 00:09:25,680
structure of forward secure signatures

275
00:09:23,839 --> 00:09:27,120
those things take a lot of space and a

276
00:09:25,680 --> 00:09:29,359
lot of time to verify

277
00:09:27,120 --> 00:09:31,200
we replaced that with our pixel scheme

278
00:09:29,360 --> 00:09:34,800
and obtained about

279
00:09:31,200 --> 00:09:37,200
33 savings as well as in size

280
00:09:34,800 --> 00:09:38,959
and in block verification time the

281
00:09:37,200 --> 00:09:41,279
detailed numbers are below you see on

282
00:09:38,959 --> 00:09:44,479
the left the block verification time

283
00:09:41,279 --> 00:09:45,279
and you see here for 1500 transactions

284
00:09:44,480 --> 00:09:49,360
per block

285
00:09:45,279 --> 00:09:52,880
with the valarie miner ed2549

286
00:09:49,360 --> 00:09:54,959
approach these this block verification

287
00:09:52,880 --> 00:09:55,839
time here is all spent on verifying

288
00:09:54,959 --> 00:09:57,680
those signatures

289
00:09:55,839 --> 00:09:58,880
and you see that that whole block

290
00:09:57,680 --> 00:10:01,680
essentially

291
00:09:58,880 --> 00:10:03,040
vanishes because it gets replaced by a

292
00:10:01,680 --> 00:10:05,920
single signature

293
00:10:03,040 --> 00:10:07,279
verification so that's what for the

294
00:10:05,920 --> 00:10:09,680
verification time

295
00:10:07,279 --> 00:10:10,480
uh blockchain size also gets improved

296
00:10:09,680 --> 00:10:12,479
quite a lot

297
00:10:10,480 --> 00:10:14,440
in the blue here you have the the

298
00:10:12,480 --> 00:10:17,519
original approach with valarie miner

299
00:10:14,440 --> 00:10:20,320
ed25519 forward secure signatures

300
00:10:17,519 --> 00:10:21,040
on the right here in brown you get with

301
00:10:20,320 --> 00:10:23,360
pixel

302
00:10:21,040 --> 00:10:24,560
so we get even forty percent savings and

303
00:10:23,360 --> 00:10:27,279
signature sizes

304
00:10:24,560 --> 00:10:28,959
um it all depends on how many nodes are

305
00:10:27,279 --> 00:10:32,079
signing and how many

306
00:10:28,959 --> 00:10:32,880
um how many transactions are part of the

307
00:10:32,079 --> 00:10:36,319
block

308
00:10:32,880 --> 00:10:38,800
but so yeah it it works and gets the

309
00:10:36,320 --> 00:10:41,680
savings that we wanted to get from it

310
00:10:38,800 --> 00:10:43,359
i'll keep it at that for now i'm very

311
00:10:41,680 --> 00:10:47,839
much looking forward to your questions

312
00:10:43,360 --> 00:10:47,839
thank you

313
00:10:53,040 --> 00:10:55,120
you

