1
00:00:08,880 --> 00:00:12,320
hello everyone i'm

2
00:00:10,000 --> 00:00:14,160
jeju from the university of rochester

3
00:00:12,320 --> 00:00:14,880
today i'm going to present our work

4
00:00:14,160 --> 00:00:16,560
silhouette

5
00:00:14,880 --> 00:00:18,720
efficient to protect the shadow stacks

6
00:00:16,560 --> 00:00:20,799
for embedded systems

7
00:00:18,720 --> 00:00:21,919
nowadays microcontroller vista systems

8
00:00:20,800 --> 00:00:23,920
are almost everywhere

9
00:00:21,920 --> 00:00:25,840
the engine control unit of a car the

10
00:00:23,920 --> 00:00:28,320
bluetooth module of a smartphone

11
00:00:25,840 --> 00:00:30,320
a wi-fi module of a smart light bulb

12
00:00:28,320 --> 00:00:31,760
security is an important issue for these

13
00:00:30,320 --> 00:00:33,520
small devices because

14
00:00:31,760 --> 00:00:35,760
they are often integrated into a large

15
00:00:33,520 --> 00:00:37,200
complex system and if these small

16
00:00:35,760 --> 00:00:39,120
components are compromised

17
00:00:37,200 --> 00:00:40,960
the whole system could be compromised

18
00:00:39,120 --> 00:00:42,879
such as being hijacked

19
00:00:40,960 --> 00:00:44,399
those embedded devices really have a

20
00:00:42,879 --> 00:00:47,039
very limited cpu speed

21
00:00:44,399 --> 00:00:48,719
limited memory real-time constraints and

22
00:00:47,039 --> 00:00:51,280
the software running on them have

23
00:00:48,719 --> 00:00:53,760
frequent direct operations on hardware

24
00:00:51,280 --> 00:00:54,800
with all these conditions c is the

25
00:00:53,760 --> 00:00:58,079
primary choice

26
00:00:54,800 --> 00:01:00,160
to write a program for these devices we

27
00:00:58,079 --> 00:01:02,079
all know c is not a memory safe

28
00:01:00,160 --> 00:01:03,839
among all the memory safety problems

29
00:01:02,079 --> 00:01:05,199
control flow hijacking is one of the

30
00:01:03,840 --> 00:01:07,680
most serious ones

31
00:01:05,199 --> 00:01:09,840
by grabbing control data an attacker can

32
00:01:07,680 --> 00:01:11,600
divert the control flow of a program to

33
00:01:09,840 --> 00:01:13,439
select the destinations

34
00:01:11,600 --> 00:01:15,439
to mitigate the control flow hijacking

35
00:01:13,439 --> 00:01:18,000
attacks control flow integrity

36
00:01:15,439 --> 00:01:19,919
is a promising direction it can restrict

37
00:01:18,000 --> 00:01:21,600
where the control flow of a program can

38
00:01:19,920 --> 00:01:23,680
go

39
00:01:21,600 --> 00:01:25,360
however fine grinder control flow

40
00:01:23,680 --> 00:01:27,439
integrity policies

41
00:01:25,360 --> 00:01:29,840
are really very expensive while

42
00:01:27,439 --> 00:01:33,119
practical cfi policies are usually

43
00:01:29,840 --> 00:01:35,439
cost grant many recent workers show that

44
00:01:33,119 --> 00:01:36,479
cost-current cfi policies are not very

45
00:01:35,439 --> 00:01:39,039
effective

46
00:01:36,479 --> 00:01:41,200
one common weakness is that a routine

47
00:01:39,040 --> 00:01:42,560
instruction is often allowed to return

48
00:01:41,200 --> 00:01:44,799
to multiple places

49
00:01:42,560 --> 00:01:46,479
for example a return is allowed to

50
00:01:44,799 --> 00:01:48,960
return to any instruction that

51
00:01:46,479 --> 00:01:49,600
follows a call instruction although at a

52
00:01:48,960 --> 00:01:52,079
wrong time

53
00:01:49,600 --> 00:01:52,960
there is only one legal destination most

54
00:01:52,079 --> 00:01:55,520
of the attacks

55
00:01:52,960 --> 00:01:56,000
demonstrated in those breaking cfi

56
00:01:55,520 --> 00:01:59,360
papers

57
00:01:56,000 --> 00:02:00,880
exploited this weakness so in this work

58
00:01:59,360 --> 00:02:03,680
we present silhouette

59
00:02:00,880 --> 00:02:05,759
a compiler-based defense that guarantees

60
00:02:03,680 --> 00:02:08,160
the integrity of returning addresses

61
00:02:05,759 --> 00:02:09,520
and also provides and forward-edge

62
00:02:08,160 --> 00:02:11,520
control integrity

63
00:02:09,520 --> 00:02:12,720
it only incurs very low performance and

64
00:02:11,520 --> 00:02:14,879
code size overhead

65
00:02:12,720 --> 00:02:16,959
we developed for the imovie 7m

66
00:02:14,879 --> 00:02:19,200
architecture due to its popularity

67
00:02:16,959 --> 00:02:22,000
but our technique can also apply to many

68
00:02:19,200 --> 00:02:23,679
other arm embedded processors

69
00:02:22,000 --> 00:02:25,680
next i will talk about the design of

70
00:02:23,680 --> 00:02:29,440
silhouette and evaluation

71
00:02:25,680 --> 00:02:31,040
and our summarize first i need to talk a

72
00:02:29,440 --> 00:02:33,200
little bit about the shadow stack

73
00:02:31,040 --> 00:02:34,640
shadow stack is a common technique to

74
00:02:33,200 --> 00:02:35,518
protect your return addresses

75
00:02:34,640 --> 00:02:37,839
efficiently

76
00:02:35,519 --> 00:02:39,920
essentially by storing the retained

77
00:02:37,840 --> 00:02:41,680
addresses to a separate dedicated memory

78
00:02:39,920 --> 00:02:43,679
region called the shadow stack

79
00:02:41,680 --> 00:02:44,879
even if the route addresses on a regular

80
00:02:43,680 --> 00:02:46,560
stack are corrupted

81
00:02:44,879 --> 00:02:48,560
a function can still return to its

82
00:02:46,560 --> 00:02:50,800
correct color by directly using the

83
00:02:48,560 --> 00:02:53,120
retained address from the shadow stack

84
00:02:50,800 --> 00:02:54,000
but an obvious problem is the shadow

85
00:02:53,120 --> 00:02:57,040
stack itself

86
00:02:54,000 --> 00:02:57,360
also needs a protection for a shadow

87
00:02:57,040 --> 00:03:00,079
stack

88
00:02:57,360 --> 00:03:01,200
protected program all stone instructions

89
00:03:00,080 --> 00:03:03,519
can be categorized

90
00:03:01,200 --> 00:03:05,280
into two types one types of stores are

91
00:03:03,519 --> 00:03:06,080
those that are supposed to update the

92
00:03:05,280 --> 00:03:08,080
shadow stack

93
00:03:06,080 --> 00:03:09,120
and the other type are all other store

94
00:03:08,080 --> 00:03:11,280
instructions

95
00:03:09,120 --> 00:03:13,680
from a shutter second point of view the

96
00:03:11,280 --> 00:03:16,480
left can of stone instructions are legal

97
00:03:13,680 --> 00:03:18,480
and the radicands are illegal so to

98
00:03:16,480 --> 00:03:19,359
protect a shadow stack a natural

99
00:03:18,480 --> 00:03:21,440
question to ask

100
00:03:19,360 --> 00:03:24,000
is can we make the shadow stacker

101
00:03:21,440 --> 00:03:26,000
writable only by its legal stores

102
00:03:24,000 --> 00:03:28,159
to answer this question i need to first

103
00:03:26,000 --> 00:03:31,120
give some background information on

104
00:03:28,159 --> 00:03:33,040
a7m there are two execution modes

105
00:03:31,120 --> 00:03:34,799
privileged and unprovided

106
00:03:33,040 --> 00:03:36,640
this is similar to the kernel mode and

107
00:03:34,799 --> 00:03:38,000
the user mode of a general purpose

108
00:03:36,640 --> 00:03:40,559
computing system

109
00:03:38,000 --> 00:03:41,200
but unlike a general purpose system

110
00:03:40,560 --> 00:03:43,200
embedded

111
00:03:41,200 --> 00:03:44,798
systems you already run everything in

112
00:03:43,200 --> 00:03:47,599
privileged mode by default

113
00:03:44,799 --> 00:03:49,519
to avoid the expensive overhead of the

114
00:03:47,599 --> 00:03:50,238
switching between the two execution

115
00:03:49,519 --> 00:03:52,799
modes

116
00:03:50,239 --> 00:03:54,080
second memory access permissions are

117
00:03:52,799 --> 00:03:56,080
already configurable

118
00:03:54,080 --> 00:03:57,920
for example we can configure the shadow

119
00:03:56,080 --> 00:03:58,480
stack region to be readable only by

120
00:03:57,920 --> 00:04:01,599
private

121
00:03:58,480 --> 00:04:02,640
stores so if a program runs in

122
00:04:01,599 --> 00:04:04,480
unprivileged mode

123
00:04:02,640 --> 00:04:06,000
a normal store instruction will not have

124
00:04:04,480 --> 00:04:08,720
a red access to this

125
00:04:06,000 --> 00:04:10,319
region now with this background

126
00:04:08,720 --> 00:04:13,359
information we can ask

127
00:04:10,319 --> 00:04:15,280
a second question is it possible to make

128
00:04:13,360 --> 00:04:17,519
owning the shadow stack legal stores or

129
00:04:15,280 --> 00:04:21,040
privileges and all other stores

130
00:04:17,519 --> 00:04:22,960
unpredicted because if so then all the

131
00:04:21,040 --> 00:04:24,639
illegal store instructions would not

132
00:04:22,960 --> 00:04:25,440
have a right access to the shadow sector

133
00:04:24,639 --> 00:04:28,960
region

134
00:04:25,440 --> 00:04:32,080
and that is guaranteed by hardware

135
00:04:28,960 --> 00:04:34,159
the answer to this question is yes there

136
00:04:32,080 --> 00:04:35,280
is one special stone instruction called

137
00:04:34,160 --> 00:04:37,759
on private install

138
00:04:35,280 --> 00:04:40,000
unprobably the store instruction acts as

139
00:04:37,759 --> 00:04:41,840
if it is running in unpredictable mode

140
00:04:40,000 --> 00:04:43,759
one it is actually running in privatize

141
00:04:41,840 --> 00:04:45,039
the mode for example this is an

142
00:04:43,759 --> 00:04:47,199
unpredictable store

143
00:04:45,040 --> 00:04:49,360
running in private mode if we have

144
00:04:47,199 --> 00:04:51,040
configured the memory address as 0 plus

145
00:04:49,360 --> 00:04:53,120
12 to be routable by

146
00:04:51,040 --> 00:04:55,120
privileged data stores only then this

147
00:04:53,120 --> 00:04:57,520
instruction would fail

148
00:04:55,120 --> 00:04:59,360
here is how silhouette uses unprivileged

149
00:04:57,520 --> 00:05:02,080
store and memory configuration

150
00:04:59,360 --> 00:05:03,840
to protect the shadow stacks it

151
00:05:02,080 --> 00:05:04,880
configures the memory region for shadow

152
00:05:03,840 --> 00:05:07,359
stacker to be

153
00:05:04,880 --> 00:05:08,320
writable only by privileged stores and

154
00:05:07,360 --> 00:05:10,960
it transforms

155
00:05:08,320 --> 00:05:12,159
all stores to unpredictable ones except

156
00:05:10,960 --> 00:05:14,560
those shadowstep

157
00:05:12,160 --> 00:05:16,320
legal stores and those that are required

158
00:05:14,560 --> 00:05:18,800
to run as privileged

159
00:05:16,320 --> 00:05:20,800
the overall effect is that even if

160
00:05:18,800 --> 00:05:21,919
memory is crafted and the control flow

161
00:05:20,800 --> 00:05:24,240
is hijacked

162
00:05:21,919 --> 00:05:24,960
illegal stored instructions would not

163
00:05:24,240 --> 00:05:28,000
have right

164
00:05:24,960 --> 00:05:31,120
access to craft the shadow stack and

165
00:05:28,000 --> 00:05:33,440
we call this technique store hardening

166
00:05:31,120 --> 00:05:34,320
stock hardening comes at a price there

167
00:05:33,440 --> 00:05:36,000
are many different

168
00:05:34,320 --> 00:05:38,320
normal stock instructions but there are

169
00:05:36,000 --> 00:05:39,120
only three different kinds of unprovided

170
00:05:38,320 --> 00:05:41,680
stores

171
00:05:39,120 --> 00:05:42,800
so in order to transform most of normal

172
00:05:41,680 --> 00:05:45,759
store instructions

173
00:05:42,800 --> 00:05:47,759
into the three unprovided ones sometimes

174
00:05:45,759 --> 00:05:50,320
we need to add extra instructions

175
00:05:47,759 --> 00:05:51,759
let's take a look at two examples in the

176
00:05:50,320 --> 00:05:53,759
first example

177
00:05:51,759 --> 00:05:55,600
a normal stored instruction can be

178
00:05:53,759 --> 00:05:56,240
transformed to an unpredictable one

179
00:05:55,600 --> 00:05:58,800
directly

180
00:05:56,240 --> 00:06:00,560
however in the second example we need to

181
00:05:58,800 --> 00:06:02,800
add a pair of arithmetic

182
00:06:00,560 --> 00:06:04,000
operations to do the transformation

183
00:06:02,800 --> 00:06:05,759
because unprovided

184
00:06:04,000 --> 00:06:07,440
stores don't support the negative

185
00:06:05,759 --> 00:06:10,000
immediate operands

186
00:06:07,440 --> 00:06:11,919
so the first case doesn't incur any

187
00:06:10,000 --> 00:06:14,960
performance or criticize overhead

188
00:06:11,919 --> 00:06:16,159
while the second kiss does remember i

189
00:06:14,960 --> 00:06:17,680
mentioned earlier that

190
00:06:16,160 --> 00:06:19,600
besides those shadow stack illegal

191
00:06:17,680 --> 00:06:22,240
stores there are also some other

192
00:06:19,600 --> 00:06:23,680
instructions that must run as privileges

193
00:06:22,240 --> 00:06:26,240
so we must ensure that

194
00:06:23,680 --> 00:06:28,800
those stored instructions cannot be

195
00:06:26,240 --> 00:06:30,720
exploited to crop to the shadow stack

196
00:06:28,800 --> 00:06:32,240
so silhouette also handles forward

197
00:06:30,720 --> 00:06:34,400
energy control flows

198
00:06:32,240 --> 00:06:35,600
it adopts a label based on forward edge

199
00:06:34,400 --> 00:06:38,400
cfi for

200
00:06:35,600 --> 00:06:39,919
indirect function calls and it also

201
00:06:38,400 --> 00:06:42,799
handles indirect jumps

202
00:06:39,919 --> 00:06:45,359
such as large switch segments and

203
00:06:42,800 --> 00:06:48,000
computed the go tools

204
00:06:45,360 --> 00:06:50,800
to summarize the design silhouette after

205
00:06:48,000 --> 00:06:53,039
the lvm motion ir code generation

206
00:06:50,800 --> 00:06:54,400
select further transformed a program to

207
00:06:53,039 --> 00:06:56,960
use a shadow stacker for

208
00:06:54,400 --> 00:06:58,479
return addresses it then applies the

209
00:06:56,960 --> 00:07:00,479
star hardening path

210
00:06:58,479 --> 00:07:01,680
to transform all the shadow stack

211
00:07:00,479 --> 00:07:04,479
illegal stores of two

212
00:07:01,680 --> 00:07:05,520
unpredicted ones and finally it runs a

213
00:07:04,479 --> 00:07:08,240
cfi path

214
00:07:05,520 --> 00:07:09,919
for forward energy control flows the

215
00:07:08,240 --> 00:07:11,919
security guarantee is that

216
00:07:09,919 --> 00:07:14,719
any written instruction will always

217
00:07:11,919 --> 00:07:16,639
return to its dynamic legal destination

218
00:07:14,720 --> 00:07:18,240
and the forward edge control flaws are

219
00:07:16,639 --> 00:07:20,400
also restricted

220
00:07:18,240 --> 00:07:22,240
if you are wondering if there are any

221
00:07:20,400 --> 00:07:23,919
corner cases that could break the

222
00:07:22,240 --> 00:07:25,840
security guarantee of select

223
00:07:23,919 --> 00:07:29,520
please have a look at the security

224
00:07:25,840 --> 00:07:31,599
analysis section of our paper

225
00:07:29,520 --> 00:07:32,560
now we have a single design select let's

226
00:07:31,599 --> 00:07:34,880
see how it

227
00:07:32,560 --> 00:07:36,639
performs we evaluated both the

228
00:07:34,880 --> 00:07:37,520
performance and the code size overhead

229
00:07:36,639 --> 00:07:40,560
of silhouette

230
00:07:37,520 --> 00:07:43,280
on the cortex m4 processor with

231
00:07:40,560 --> 00:07:44,080
the comma pro and the beeps benchmarks

232
00:07:43,280 --> 00:07:46,080
comarch pro

233
00:07:44,080 --> 00:07:48,318
is an industrial standard benchmark

234
00:07:46,080 --> 00:07:52,639
suite for embedded processors

235
00:07:48,319 --> 00:07:54,879
and bibs covers a wide range of programs

236
00:07:52,639 --> 00:07:57,199
we measured the impact brought by all

237
00:07:54,879 --> 00:08:00,319
the three major components of silhouette

238
00:07:57,199 --> 00:08:02,560
as well as celebrate as a whole on

239
00:08:00,319 --> 00:08:03,759
call mark pro only one program's

240
00:08:02,560 --> 00:08:06,240
performance overhead

241
00:08:03,759 --> 00:08:07,280
is over two percent and the average

242
00:08:06,240 --> 00:08:10,560
performance overhead

243
00:08:07,280 --> 00:08:13,119
is only 1.3 percent the red bar

244
00:08:10,560 --> 00:08:15,280
and the green bars on this graph shows

245
00:08:13,120 --> 00:08:17,520
that for most programs

246
00:08:15,280 --> 00:08:19,758
most of the performance overhead comes

247
00:08:17,520 --> 00:08:22,799
from the star hardening pass

248
00:08:19,759 --> 00:08:23,280
for code size silhouette incurs 8.9

249
00:08:22,800 --> 00:08:26,400
percent

250
00:08:23,280 --> 00:08:26,719
overhead and for most program most of

251
00:08:26,400 --> 00:08:28,719
the

252
00:08:26,720 --> 00:08:30,080
current size overhead also comes from

253
00:08:28,720 --> 00:08:32,560
the store hardening pass

254
00:08:30,080 --> 00:08:33,439
this is simply because slow hardening

255
00:08:32,559 --> 00:08:36,000
pass adds

256
00:08:33,440 --> 00:08:39,519
a lot of extra instructions while the

257
00:08:36,000 --> 00:08:42,640
shadow stack and cfi paths don't

258
00:08:39,519 --> 00:08:44,480
on beeps we run 29 programs in total but

259
00:08:42,640 --> 00:08:46,720
here due to space limitation

260
00:08:44,480 --> 00:08:49,279
we only show programs whose performance

261
00:08:46,720 --> 00:08:51,440
overhead are over five percent

262
00:08:49,279 --> 00:08:52,480
overall most of programs slow down less

263
00:08:51,440 --> 00:08:54,560
than five percent

264
00:08:52,480 --> 00:08:56,560
and the average performance overhead is

265
00:08:54,560 --> 00:08:58,719
a 3.4 percent

266
00:08:56,560 --> 00:08:59,920
bubble salt has the highest performance

267
00:08:58,720 --> 00:09:02,480
overhead because

268
00:08:59,920 --> 00:09:03,519
its major computation is in a small loop

269
00:09:02,480 --> 00:09:05,360
and

270
00:09:03,519 --> 00:09:08,160
the store-hardening path adds extra

271
00:09:05,360 --> 00:09:10,560
instructions for stores in that loop

272
00:09:08,160 --> 00:09:12,079
and for code size silhouette only incurs

273
00:09:10,560 --> 00:09:15,359
2.3 percent

274
00:09:12,080 --> 00:09:17,120
overhead on average the fact that

275
00:09:15,360 --> 00:09:18,959
for most of programs most of the

276
00:09:17,120 --> 00:09:20,880
performance and the code size overhead

277
00:09:18,959 --> 00:09:23,518
comes from the store hunting pass

278
00:09:20,880 --> 00:09:25,360
made us wonder is it possible to

279
00:09:23,519 --> 00:09:25,760
configure the shadow stacker region to

280
00:09:25,360 --> 00:09:27,839
be

281
00:09:25,760 --> 00:09:29,839
writable only by unprovided to the stars

282
00:09:27,839 --> 00:09:32,080
but not by privileged to the source

283
00:09:29,839 --> 00:09:32,959
because if so we can simply configure

284
00:09:32,080 --> 00:09:35,279
the shadow stack

285
00:09:32,959 --> 00:09:36,079
to be unpredicted right only and

286
00:09:35,279 --> 00:09:38,240
transform

287
00:09:36,080 --> 00:09:39,120
only shadow stack legal stores to be

288
00:09:38,240 --> 00:09:41,760
unprovided

289
00:09:39,120 --> 00:09:42,880
while leave all other stores unchanged

290
00:09:41,760 --> 00:09:45,519
we call this design

291
00:09:42,880 --> 00:09:46,480
silhouette invert unfortunately

292
00:09:45,519 --> 00:09:50,320
currently this

293
00:09:46,480 --> 00:09:52,560
configuration is not supported by mv7m

294
00:09:50,320 --> 00:09:54,480
so we proposed the two solutions with

295
00:09:52,560 --> 00:09:56,880
minor hardware changes

296
00:09:54,480 --> 00:09:58,640
due to lack of time please see the paper

297
00:09:56,880 --> 00:10:01,200
for details

298
00:09:58,640 --> 00:10:01,680
the simulated results show that on comic

299
00:10:01,200 --> 00:10:04,079
pro

300
00:10:01,680 --> 00:10:05,760
silhouette invert only increases 0.3

301
00:10:04,079 --> 00:10:06,719
percent of performance overhead on

302
00:10:05,760 --> 00:10:08,480
average

303
00:10:06,720 --> 00:10:10,640
and for each benchmark program

304
00:10:08,480 --> 00:10:13,920
silhouette inverter performs better than

305
00:10:10,640 --> 00:10:14,399
silhouette on bibs silhouette inverter

306
00:10:13,920 --> 00:10:17,599
incurs

307
00:10:14,399 --> 00:10:20,640
1.9 performance overhead on average

308
00:10:17,600 --> 00:10:23,040
and there is only one program for which

309
00:10:20,640 --> 00:10:25,439
silhouette inverts performance overhead

310
00:10:23,040 --> 00:10:27,439
is a little higher than silhouettes

311
00:10:25,440 --> 00:10:28,800
and this is simply because silhouette

312
00:10:27,440 --> 00:10:30,880
inverter transforms

313
00:10:28,800 --> 00:10:32,560
those shadows that are updating stores

314
00:10:30,880 --> 00:10:35,600
and this program has

315
00:10:32,560 --> 00:10:36,239
many function calls if you're curious

316
00:10:35,600 --> 00:10:37,920
why this

317
00:10:36,240 --> 00:10:40,480
living steam program's performance

318
00:10:37,920 --> 00:10:43,120
overhead is still nearly 20 percent

319
00:10:40,480 --> 00:10:43,839
um considered invert please check out

320
00:10:43,120 --> 00:10:46,720
our paper

321
00:10:43,839 --> 00:10:47,600
or talk to us after they talk to

322
00:10:46,720 --> 00:10:49,680
summarize

323
00:10:47,600 --> 00:10:51,760
in this work we developed a silhouette

324
00:10:49,680 --> 00:10:52,719
an efficient defense to protect the

325
00:10:51,760 --> 00:10:55,279
return addresses

326
00:10:52,720 --> 00:10:57,040
for armed embedded systems it incurs a

327
00:10:55,279 --> 00:10:58,000
very low performance and a code size

328
00:10:57,040 --> 00:11:00,640
overhead

329
00:10:58,000 --> 00:11:02,640
and we also proposed a variant of

330
00:11:00,640 --> 00:11:04,720
silhouette called silhouette invert

331
00:11:02,640 --> 00:11:06,480
it further decreases the performance of

332
00:11:04,720 --> 00:11:07,600
the code size penalties with minor

333
00:11:06,480 --> 00:11:10,560
hardware changes

334
00:11:07,600 --> 00:11:12,000
and we open source our code thanks very

335
00:11:10,560 --> 00:11:15,839
much for watching the video

336
00:11:12,000 --> 00:11:15,839
now i'm happy to take your questions

