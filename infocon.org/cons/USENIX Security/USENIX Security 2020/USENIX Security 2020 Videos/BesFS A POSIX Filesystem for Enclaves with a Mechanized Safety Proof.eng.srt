1
00:00:08,320 --> 00:00:12,639
hello everyone

2
00:00:09,599 --> 00:00:13,200
i am and today i will be presenting our

3
00:00:12,639 --> 00:00:17,359
work

4
00:00:13,200 --> 00:00:20,240
massiveness teas are a hardware feature

5
00:00:17,359 --> 00:00:21,279
that allow us to launch secure

6
00:00:20,240 --> 00:00:22,880
applications

7
00:00:21,279 --> 00:00:25,198
in an environment called a secure

8
00:00:22,880 --> 00:00:26,960
enclave they provide a guarantee

9
00:00:25,199 --> 00:00:28,800
that all the data and computation

10
00:00:26,960 --> 00:00:31,119
happening inside an enclave

11
00:00:28,800 --> 00:00:32,000
will be protected from a potentially

12
00:00:31,119 --> 00:00:34,719
malicious

13
00:00:32,000 --> 00:00:37,040
operating system or a hypervisor there

14
00:00:34,719 --> 00:00:41,680
have been many hardwares which support

15
00:00:37,040 --> 00:00:44,559
such te features including intel's sgx

16
00:00:41,680 --> 00:00:46,320
as as much as tes are useful for

17
00:00:44,559 --> 00:00:48,879
protecting applications

18
00:00:46,320 --> 00:00:49,600
they leave a caveat wherein if the

19
00:00:48,879 --> 00:00:52,559
application

20
00:00:49,600 --> 00:00:54,000
ever uses an untrusted interface with

21
00:00:52,559 --> 00:00:57,519
the operating system

22
00:00:54,000 --> 00:00:58,480
such as a system call it is exposed to a

23
00:00:57,520 --> 00:01:02,160
severe set of

24
00:00:58,480 --> 00:01:04,559
attacks typically called as iaco attacks

25
00:01:02,160 --> 00:01:05,679
what happens here is an application can

26
00:01:04,559 --> 00:01:08,720
get compromised

27
00:01:05,680 --> 00:01:11,040
by using untrusted outputs provided by

28
00:01:08,720 --> 00:01:13,200
the operating system

29
00:01:11,040 --> 00:01:15,680
in fact when we looked at existing

30
00:01:13,200 --> 00:01:18,799
frameworks for tees we found evidence

31
00:01:15,680 --> 00:01:19,920
that popular frameworks such as google's

32
00:01:18,799 --> 00:01:23,040
azlo

33
00:01:19,920 --> 00:01:25,680
and intel's sgx sdk

34
00:01:23,040 --> 00:01:28,400
do not filter out the attacks from the

35
00:01:25,680 --> 00:01:30,640
operating system

36
00:01:28,400 --> 00:01:33,680
concurrently several other researchers

37
00:01:30,640 --> 00:01:35,280
identified similar threats

38
00:01:33,680 --> 00:01:37,840
on the other hand there are very few

39
00:01:35,280 --> 00:01:41,040
solutions to this problem

40
00:01:37,840 --> 00:01:44,159
some of them include limiting the

41
00:01:41,040 --> 00:01:46,799
surface of attack by exposing as small

42
00:01:44,159 --> 00:01:48,479
as interface as possible employing

43
00:01:46,799 --> 00:01:50,079
rigorous sanitization

44
00:01:48,479 --> 00:01:51,920
to check whether the outputs are

45
00:01:50,079 --> 00:01:53,119
malicious before consuming by the

46
00:01:51,920 --> 00:01:55,520
application

47
00:01:53,119 --> 00:01:57,040
and then automating these checks using

48
00:01:55,520 --> 00:01:59,840
compilers

49
00:01:57,040 --> 00:02:01,040
as much as these solutions are useful

50
00:01:59,840 --> 00:02:03,520
they are not complete

51
00:02:01,040 --> 00:02:04,399
they do not give any guarantee that the

52
00:02:03,520 --> 00:02:06,880
application

53
00:02:04,399 --> 00:02:08,239
will always be able to detect attacks

54
00:02:06,880 --> 00:02:11,440
from the operating system

55
00:02:08,239 --> 00:02:13,920
via this vulnerable interface

56
00:02:11,440 --> 00:02:16,319
in this work we ask the question is

57
00:02:13,920 --> 00:02:18,958
there a way to formally verify

58
00:02:16,319 --> 00:02:19,760
that the interface is safe against all

59
00:02:18,959 --> 00:02:23,840
attacks

60
00:02:19,760 --> 00:02:26,160
launched by the os via this interface

61
00:02:23,840 --> 00:02:26,879
there are two main steps in such an

62
00:02:26,160 --> 00:02:28,799
approach

63
00:02:26,879 --> 00:02:30,239
the first one is what is the c

64
00:02:28,800 --> 00:02:32,160
specification

65
00:02:30,239 --> 00:02:33,519
what is the interface legitimately

66
00:02:32,160 --> 00:02:35,920
allowed to do

67
00:02:33,519 --> 00:02:38,400
let's say in this open system call what

68
00:02:35,920 --> 00:02:41,760
are the inputs and outputs

69
00:02:38,400 --> 00:02:45,120
to the os which are correct and do not

70
00:02:41,760 --> 00:02:45,679
want an attack and then how to check

71
00:02:45,120 --> 00:02:47,680
whether

72
00:02:45,680 --> 00:02:48,879
an implementation of this interface

73
00:02:47,680 --> 00:02:52,319
indeed abides

74
00:02:48,879 --> 00:02:54,640
to the specification there are several

75
00:02:52,319 --> 00:02:55,440
works in file systems and system call

76
00:02:54,640 --> 00:02:57,679
apis

77
00:02:55,440 --> 00:02:59,680
which take this approach however none of

78
00:02:57,680 --> 00:03:01,760
the previous works have included the

79
00:02:59,680 --> 00:03:04,159
scenario where the operating system

80
00:03:01,760 --> 00:03:06,159
itself is malicious

81
00:03:04,159 --> 00:03:07,679
this opens up a very complicated

82
00:03:06,159 --> 00:03:10,480
verification problem

83
00:03:07,680 --> 00:03:11,760
because there are simply too many states

84
00:03:10,480 --> 00:03:14,560
in which the os

85
00:03:11,760 --> 00:03:15,440
is malicious and the task here is to

86
00:03:14,560 --> 00:03:18,000
identify

87
00:03:15,440 --> 00:03:19,760
the smallest possible state which is

88
00:03:18,000 --> 00:03:22,080
safe

89
00:03:19,760 --> 00:03:23,760
when we began looking at this problem uh

90
00:03:22,080 --> 00:03:25,760
we looked at two

91
00:03:23,760 --> 00:03:27,599
possible solutions possible ways of

92
00:03:25,760 --> 00:03:31,040
framing this problem

93
00:03:27,599 --> 00:03:31,599
one similar theme was that how do we

94
00:03:31,040 --> 00:03:34,640
scale

95
00:03:31,599 --> 00:03:35,359
our specification to a very large

96
00:03:34,640 --> 00:03:38,720
interface

97
00:03:35,360 --> 00:03:42,319
typically the system call interface

98
00:03:38,720 --> 00:03:45,680
includes 300 apis simply writing down

99
00:03:42,319 --> 00:03:46,079
a specification for these apis is a

100
00:03:45,680 --> 00:03:49,519
large

101
00:03:46,080 --> 00:03:49,840
task the second approach that we looked

102
00:03:49,519 --> 00:03:52,879
at

103
00:03:49,840 --> 00:03:55,920
was verifying an existing implementation

104
00:03:52,879 --> 00:03:56,720
be it of a lipsy library or a file

105
00:03:55,920 --> 00:04:00,640
system

106
00:03:56,720 --> 00:04:03,200
ah implemented correctly such as ext4

107
00:04:00,640 --> 00:04:04,079
however verifying an existing

108
00:04:03,200 --> 00:04:07,439
implementation

109
00:04:04,080 --> 00:04:10,799
is also a large task because the code

110
00:04:07,439 --> 00:04:14,159
base is very large what

111
00:04:10,799 --> 00:04:16,000
instead what we settled on was

112
00:04:14,159 --> 00:04:17,519
writing a very small subset of

113
00:04:16,000 --> 00:04:20,079
specification

114
00:04:17,519 --> 00:04:21,759
which we deem as save what does the

115
00:04:20,079 --> 00:04:24,639
space save specification

116
00:04:21,759 --> 00:04:25,040
entail in this work we call it as the

117
00:04:24,639 --> 00:04:27,520
best

118
00:04:25,040 --> 00:04:28,479
fs interface we have specified an

119
00:04:27,520 --> 00:04:30,719
interface

120
00:04:28,479 --> 00:04:31,599
for a file system the way we have

121
00:04:30,720 --> 00:04:35,360
designed this

122
00:04:31,600 --> 00:04:38,560
uh is keeping scalability in mind

123
00:04:35,360 --> 00:04:40,960
so what the specification includes is a

124
00:04:38,560 --> 00:04:42,240
core subset of 15 apis which are

125
00:04:40,960 --> 00:04:44,799
frequently used

126
00:04:42,240 --> 00:04:45,280
to interact with files via system calls

127
00:04:44,800 --> 00:04:48,720
such as

128
00:04:45,280 --> 00:04:51,599
open read write and close

129
00:04:48,720 --> 00:04:52,880
along with these 15 core apis and the

130
00:04:51,600 --> 00:04:55,120
specification

131
00:04:52,880 --> 00:04:56,080
we also carefully design it in such a

132
00:04:55,120 --> 00:04:59,040
way that

133
00:04:56,080 --> 00:05:01,280
our specification allows us to execute a

134
00:04:59,040 --> 00:05:03,840
sequence of these apis

135
00:05:01,280 --> 00:05:06,799
and the specification guarantees that

136
00:05:03,840 --> 00:05:10,159
any arbitrary sequence of these apis

137
00:05:06,800 --> 00:05:12,560
abides by the safety property

138
00:05:10,160 --> 00:05:14,000
with this addition to the specification

139
00:05:12,560 --> 00:05:17,600
we are able to

140
00:05:14,000 --> 00:05:19,600
chain multiple calls and reason about a

141
00:05:17,600 --> 00:05:21,280
composition of these interfaces for

142
00:05:19,600 --> 00:05:24,080
instance

143
00:05:21,280 --> 00:05:25,758
our core interface includes write and f

144
00:05:24,080 --> 00:05:28,240
stack call

145
00:05:25,759 --> 00:05:29,759
composing these two together we can

146
00:05:28,240 --> 00:05:33,280
prove the safety

147
00:05:29,759 --> 00:05:36,080
of another call called efra

148
00:05:33,280 --> 00:05:37,359
in fact with this composition built into

149
00:05:36,080 --> 00:05:39,680
our specification

150
00:05:37,360 --> 00:05:40,479
we were able to scale our safety

151
00:05:39,680 --> 00:05:45,919
properties

152
00:05:40,479 --> 00:05:47,919
from 15 core apis to 22 additional apis

153
00:05:45,919 --> 00:05:49,919
with this in mind let us take a look at

154
00:05:47,919 --> 00:05:51,840
what exactly are the details of the

155
00:05:49,919 --> 00:05:54,080
pacifist

156
00:05:51,840 --> 00:05:54,960
there are two major parts to the sfs

157
00:05:54,080 --> 00:05:57,280
interface

158
00:05:54,960 --> 00:05:58,638
the first one is our state safety

159
00:05:57,280 --> 00:06:01,679
properties

160
00:05:58,639 --> 00:06:03,120
this is a list of five properties that

161
00:06:01,680 --> 00:06:06,400
our file system

162
00:06:03,120 --> 00:06:08,960
should always abide by one such example

163
00:06:06,400 --> 00:06:10,000
is that all the parts for files and

164
00:06:08,960 --> 00:06:12,799
directories

165
00:06:10,000 --> 00:06:14,160
should always be unique there are four

166
00:06:12,800 --> 00:06:15,520
other properties

167
00:06:14,160 --> 00:06:17,360
that if you are interested in you can

168
00:06:15,520 --> 00:06:20,240
take a look at the paper

169
00:06:17,360 --> 00:06:20,800
right the main part of a state safety

170
00:06:20,240 --> 00:06:23,120
property

171
00:06:20,800 --> 00:06:23,919
is that they should hold true for all

172
00:06:23,120 --> 00:06:26,479
states

173
00:06:23,919 --> 00:06:28,560
of an enclave when it's trying to use

174
00:06:26,479 --> 00:06:31,919
this interface

175
00:06:28,560 --> 00:06:34,240
however this is not sufficient there are

176
00:06:31,919 --> 00:06:34,960
interface specific properties for

177
00:06:34,240 --> 00:06:37,600
example

178
00:06:34,960 --> 00:06:38,080
if the application is trying to invoke a

179
00:06:37,600 --> 00:06:40,960
closed

180
00:06:38,080 --> 00:06:42,318
system call we also specify what

181
00:06:40,960 --> 00:06:45,198
preconditions

182
00:06:42,319 --> 00:06:46,400
the enclaves should satisfy before using

183
00:06:45,199 --> 00:06:49,120
this interface

184
00:06:46,400 --> 00:06:50,638
and if the os returns a value what are

185
00:06:49,120 --> 00:06:51,680
the post conditions that should be

186
00:06:50,639 --> 00:06:53,599
satisfied

187
00:06:51,680 --> 00:06:55,520
before the application can use the

188
00:06:53,599 --> 00:06:58,560
outputs of

189
00:06:55,520 --> 00:06:59,680
of the score does the state transition

190
00:06:58,560 --> 00:07:03,199
properties

191
00:06:59,680 --> 00:07:04,880
uh allow us to identify whether we are

192
00:07:03,199 --> 00:07:08,400
in a good state or not

193
00:07:04,880 --> 00:07:11,360
and the transition property tells us

194
00:07:08,400 --> 00:07:11,919
are we allowed to do a call and are we

195
00:07:11,360 --> 00:07:15,599
allowed

196
00:07:11,919 --> 00:07:19,198
to consume the results of this call

197
00:07:15,599 --> 00:07:21,919
put together what we have are two main

198
00:07:19,199 --> 00:07:23,520
theorems that we proved uh in a clear

199
00:07:21,919 --> 00:07:26,639
improvement

200
00:07:23,520 --> 00:07:29,280
the first theorem says that if we start

201
00:07:26,639 --> 00:07:31,039
in a good state which satisfies all the

202
00:07:29,280 --> 00:07:33,359
state properties

203
00:07:31,039 --> 00:07:34,240
and it also satisfies a precondition for

204
00:07:33,360 --> 00:07:36,800
a call

205
00:07:34,240 --> 00:07:38,000
if our system allows the call to happen

206
00:07:36,800 --> 00:07:40,720
correctly

207
00:07:38,000 --> 00:07:41,919
then the post conditions are always

208
00:07:40,720 --> 00:07:43,680
satisfied

209
00:07:41,919 --> 00:07:45,280
and the new state that is reached is

210
00:07:43,680 --> 00:07:47,280
also a good state

211
00:07:45,280 --> 00:07:49,520
so you could think of this as the base

212
00:07:47,280 --> 00:07:52,239
case of an induction proof

213
00:07:49,520 --> 00:07:54,639
which allows us to take one step in the

214
00:07:52,240 --> 00:07:56,960
state machine

215
00:07:54,639 --> 00:07:58,080
and the second theorem says that you can

216
00:07:56,960 --> 00:08:00,400
sequentially compose

217
00:07:58,080 --> 00:08:01,359
these calls such that if you start in a

218
00:08:00,400 --> 00:08:03,520
good state

219
00:08:01,360 --> 00:08:04,400
uh the specification ensures that you

220
00:08:03,520 --> 00:08:07,520
always reach

221
00:08:04,400 --> 00:08:09,359
a good state after n calls so this could

222
00:08:07,520 --> 00:08:12,240
you could look at this as the induction

223
00:08:09,360 --> 00:08:15,520
step of the clutch

224
00:08:12,240 --> 00:08:17,440
with these two proofs over our

225
00:08:15,520 --> 00:08:20,159
specification

226
00:08:17,440 --> 00:08:22,240
we are sure that a specification allows

227
00:08:20,160 --> 00:08:24,240
us to compose multiple calls

228
00:08:22,240 --> 00:08:26,400
however the next question was that does

229
00:08:24,240 --> 00:08:28,560
there exist a real implementation

230
00:08:26,400 --> 00:08:29,919
which can satisfy all the specification

231
00:08:28,560 --> 00:08:32,159
properties

232
00:08:29,919 --> 00:08:33,439
to do this we went ahead and we

233
00:08:32,159 --> 00:08:36,080
implemented

234
00:08:33,440 --> 00:08:36,719
a file system check in a higher level

235
00:08:36,080 --> 00:08:40,000
language

236
00:08:36,719 --> 00:08:41,919
called valina our theorem proverb called

237
00:08:40,000 --> 00:08:43,279
 was able to understand this

238
00:08:41,919 --> 00:08:46,000
implementation

239
00:08:43,279 --> 00:08:47,920
and we ended up using a lot of data

240
00:08:46,000 --> 00:08:49,120
structures such as files and directory

241
00:08:47,920 --> 00:08:50,880
layouts

242
00:08:49,120 --> 00:08:52,160
and so on to keep track of the file

243
00:08:50,880 --> 00:08:55,519
system state

244
00:08:52,160 --> 00:08:58,399
and eventually we proved a theorem

245
00:08:55,519 --> 00:08:59,200
that our implementation in galena indeed

246
00:08:58,399 --> 00:09:02,320
satisfies

247
00:08:59,200 --> 00:09:05,920
all the specification properties that uh

248
00:09:02,320 --> 00:09:08,560
we wanted in our because interface

249
00:09:05,920 --> 00:09:09,519
so at the end of this what we had was we

250
00:09:08,560 --> 00:09:11,040
were able to prove

251
00:09:09,519 --> 00:09:13,440
that indeed there exists an

252
00:09:11,040 --> 00:09:17,120
implementation which can satisfy all the

253
00:09:13,440 --> 00:09:19,040
bfs interface properties

254
00:09:17,120 --> 00:09:20,320
with this implementation at hand we were

255
00:09:19,040 --> 00:09:23,839
curious to know

256
00:09:20,320 --> 00:09:24,800
whether besafest uh can deliver on four

257
00:09:23,839 --> 00:09:27,920
main criteria

258
00:09:24,800 --> 00:09:29,359
to quickly summarize the amount of code

259
00:09:27,920 --> 00:09:30,959
that we had to add

260
00:09:29,360 --> 00:09:32,720
including the specification the

261
00:09:30,959 --> 00:09:36,160
implementation and the proof

262
00:09:32,720 --> 00:09:38,560
uh was around 5000 lines of code in

263
00:09:36,160 --> 00:09:40,160
a theorem proven called clock when we

264
00:09:38,560 --> 00:09:42,239
did a hand translation of our

265
00:09:40,160 --> 00:09:45,519
implementation to see

266
00:09:42,240 --> 00:09:47,920
it turned out to be around 1500 lines of

267
00:09:45,519 --> 00:09:50,480
sql

268
00:09:47,920 --> 00:09:51,040
in terms of expressiveness as as i said

269
00:09:50,480 --> 00:09:54,560
earlier

270
00:09:51,040 --> 00:09:56,480
we started with 15 core apis and we were

271
00:09:54,560 --> 00:09:59,680
able to synthesize

272
00:09:56,480 --> 00:10:01,040
or compose 22 additional apis which we

273
00:09:59,680 --> 00:10:04,800
were able to

274
00:10:01,040 --> 00:10:07,920
prove was safe in terms of compatibility

275
00:10:04,800 --> 00:10:09,760
we tested around 31 applications and we

276
00:10:07,920 --> 00:10:12,000
found out there were

277
00:10:09,760 --> 00:10:13,200
around 2 million instances of api

278
00:10:12,000 --> 00:10:16,480
invocations

279
00:10:13,200 --> 00:10:17,680
and out of that only 8 we were not able

280
00:10:16,480 --> 00:10:19,440
to support

281
00:10:17,680 --> 00:10:21,599
in terms of performance nothing

282
00:10:19,440 --> 00:10:23,200
surprising cpu intensive

283
00:10:21,600 --> 00:10:25,120
benchmarks did not see a lot of

284
00:10:23,200 --> 00:10:26,399
overheads whereas all i o intensive

285
00:10:25,120 --> 00:10:29,600
benchmarks which

286
00:10:26,399 --> 00:10:30,560
did very frequent usage of read write

287
00:10:29,600 --> 00:10:35,440
apis

288
00:10:30,560 --> 00:10:37,279
saw around four to five x of slona

289
00:10:35,440 --> 00:10:39,600
the most interesting part of the

290
00:10:37,279 --> 00:10:41,519
verification work were we able to find

291
00:10:39,600 --> 00:10:42,880
and eliminate any bugs in real world

292
00:10:41,519 --> 00:10:46,320
implementations

293
00:10:42,880 --> 00:10:47,120
so when we tested our proven

294
00:10:46,320 --> 00:10:49,839
implementation

295
00:10:47,120 --> 00:10:52,000
against existing implementations uh such

296
00:10:49,839 --> 00:10:54,320
as in the intel sgx sdk

297
00:10:52,000 --> 00:10:55,200
in panoply which is another system uh

298
00:10:54,320 --> 00:10:56,959
which allows

299
00:10:55,200 --> 00:10:59,279
applications to do system calls for

300
00:10:56,959 --> 00:11:02,560
files we found out several instances

301
00:10:59,279 --> 00:11:03,839
of either low level bugs such as stack

302
00:11:02,560 --> 00:11:07,119
corruption due to large

303
00:11:03,839 --> 00:11:10,320
sizes which which were not checked when

304
00:11:07,120 --> 00:11:12,640
making copies inside an enclave

305
00:11:10,320 --> 00:11:14,399
wrong checks over error codes and in

306
00:11:12,640 --> 00:11:16,160
fact because we had specification we

307
00:11:14,399 --> 00:11:18,800
were also able to identify

308
00:11:16,160 --> 00:11:20,000
bugs in the implementation of our own

309
00:11:18,800 --> 00:11:22,399
code if you're interested

310
00:11:20,000 --> 00:11:23,839
in the code uh please go ahead and take

311
00:11:22,399 --> 00:11:29,839
a look at our webpage

312
00:11:23,839 --> 00:11:29,839
thank you for your time

313
00:11:33,760 --> 00:11:35,839
you

