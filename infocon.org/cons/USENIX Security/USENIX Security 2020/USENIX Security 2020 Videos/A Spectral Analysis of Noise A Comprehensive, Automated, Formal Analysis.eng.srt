1
00:00:08,960 --> 00:00:12,880
hello i'm game gerald and i'm going to

2
00:00:10,960 --> 00:00:14,880
present you a comprehensive

3
00:00:12,880 --> 00:00:17,840
automated and formal analysis of a

4
00:00:14,880 --> 00:00:19,600
family of protocol called noise

5
00:00:17,840 --> 00:00:21,119
this is a good joint work with luka

6
00:00:19,600 --> 00:00:23,199
hershey ralph sasser

7
00:00:21,119 --> 00:00:25,119
denise jackson kaz kramer and david

8
00:00:23,199 --> 00:00:26,880
basin

9
00:00:25,119 --> 00:00:28,480
let me first present the noise family of

10
00:00:26,880 --> 00:00:30,080
protocols

11
00:00:28,480 --> 00:00:31,920
all noise protocol have in command that

12
00:00:30,080 --> 00:00:32,800
they establish a secure channel between

13
00:00:31,920 --> 00:00:35,440
two agents

14
00:00:32,800 --> 00:00:37,760
alice and bob keys for encryption are

15
00:00:35,440 --> 00:00:38,399
derived from alice's on bob's asymmetric

16
00:00:37,760 --> 00:00:40,960
keys

17
00:00:38,399 --> 00:00:42,640
through a derivative of defeatment key

18
00:00:40,960 --> 00:00:44,559
exchange

19
00:00:42,640 --> 00:00:46,640
the important thing i'd like to mention

20
00:00:44,559 --> 00:00:48,000
about noise is the large number of noise

21
00:00:46,640 --> 00:00:50,239
particles

22
00:00:48,000 --> 00:00:53,199
the goal is that whatever your use case

23
00:00:50,239 --> 00:00:55,120
you can find a nose protocol that fits

24
00:00:53,199 --> 00:00:57,519
as an illustration let me say that three

25
00:00:55,120 --> 00:01:00,000
popular systems that use noise

26
00:00:57,520 --> 00:01:01,920
where guards a vpn lightning a layer of

27
00:01:00,000 --> 00:01:04,959
a bitcoin on whatsapp

28
00:01:01,920 --> 00:01:06,479
use three different noise protocols more

29
00:01:04,959 --> 00:01:08,158
precisely

30
00:01:06,479 --> 00:01:10,000
there are noise protocols where alice

31
00:01:08,159 --> 00:01:13,280
has a long term key on

32
00:01:10,000 --> 00:01:16,000
other where is not required

33
00:01:13,280 --> 00:01:18,159
same applies for bob there are noise

34
00:01:16,000 --> 00:01:19,840
protocols which also take advantage of

35
00:01:18,159 --> 00:01:20,799
the fact that alice knows bob's

36
00:01:19,840 --> 00:01:24,640
long-term key

37
00:01:20,799 --> 00:01:26,720
on other which do not require that

38
00:01:24,640 --> 00:01:28,479
i said that alice and bob have

39
00:01:26,720 --> 00:01:30,400
asymmetric keys but it's even possible

40
00:01:28,479 --> 00:01:32,640
to additionally use a symmetric key if

41
00:01:30,400 --> 00:01:36,079
you have one

42
00:01:32,640 --> 00:01:38,240
so assume that you want to use noise

43
00:01:36,079 --> 00:01:40,320
you read the specification on discover

44
00:01:38,240 --> 00:01:42,880
more than 50 example protocols with

45
00:01:40,320 --> 00:01:45,039
widely different security guarantees

46
00:01:42,880 --> 00:01:46,880
if you are not satisfied with them you

47
00:01:45,040 --> 00:01:48,159
are even explained how to design your

48
00:01:46,880 --> 00:01:50,399
own

49
00:01:48,159 --> 00:01:51,280
given your own specific requirements on

50
00:01:50,399 --> 00:01:53,520
threat model

51
00:01:51,280 --> 00:01:56,399
which one should you choose this is the

52
00:01:53,520 --> 00:01:56,399
question we address

53
00:01:56,640 --> 00:02:01,040
the thing is verifying the security of

54
00:01:59,520 --> 00:02:02,158
one protocol is hard enough that you

55
00:02:01,040 --> 00:02:05,840
don't want to have

56
00:02:02,159 --> 00:02:09,039
to do so for like 50 protocols just to

57
00:02:05,840 --> 00:02:12,319
be able to compare them

58
00:02:09,038 --> 00:02:14,079
for this reason we will use an automated

59
00:02:12,319 --> 00:02:16,480
tool based on formal methods

60
00:02:14,080 --> 00:02:18,959
called the tamarind prover it's a

61
00:02:16,480 --> 00:02:21,679
security verification tool

62
00:02:18,959 --> 00:02:24,000
at the symbolic level this means that it

63
00:02:21,680 --> 00:02:25,680
assumes that the cryptographic primitive

64
00:02:24,000 --> 00:02:27,920
work

65
00:02:25,680 --> 00:02:29,760
the main reason for using tamarind here

66
00:02:27,920 --> 00:02:32,559
is that it accurately models

67
00:02:29,760 --> 00:02:33,840
the filmman operations notably the fact

68
00:02:32,560 --> 00:02:37,840
that multiplication is

69
00:02:33,840 --> 00:02:37,840
associative on community

70
00:02:38,800 --> 00:02:43,680
to compare noise protocol we first have

71
00:02:40,640 --> 00:02:45,760
to determine their security guarantees

72
00:02:43,680 --> 00:02:46,800
what this means is that for every noise

73
00:02:45,760 --> 00:02:49,599
protocol

74
00:02:46,800 --> 00:02:52,319
security property and threat model we

75
00:02:49,599 --> 00:02:55,599
want to know whether hit holds or not

76
00:02:52,319 --> 00:02:57,119
of course we need to delimit the scope

77
00:02:55,599 --> 00:02:59,280
we chose the security properties

78
00:02:57,120 --> 00:03:03,040
mentioned in the noise specification

79
00:02:59,280 --> 00:03:04,959
that is first secrecy the the fact that

80
00:03:03,040 --> 00:03:06,720
the adversary cannot learn what payload

81
00:03:04,959 --> 00:03:08,959
we sent or received

82
00:03:06,720 --> 00:03:10,720
agreement the fact that when alice

83
00:03:08,959 --> 00:03:12,720
thinks she's talking to bob she's not

84
00:03:10,720 --> 00:03:13,200
actually talking to charlie or even no

85
00:03:12,720 --> 00:03:16,159
one at

86
00:03:13,200 --> 00:03:17,920
all on anonymity the fact that the

87
00:03:16,159 --> 00:03:19,760
adversary cannot distinguish between

88
00:03:17,920 --> 00:03:21,839
alice talking to bob and alice talking

89
00:03:19,760 --> 00:03:24,079
to charlie

90
00:03:21,840 --> 00:03:25,920
for threat models we tried to be as

91
00:03:24,080 --> 00:03:27,599
generic as possible

92
00:03:25,920 --> 00:03:29,200
we established a list of adversary

93
00:03:27,599 --> 00:03:32,319
capabilities specifying what the

94
00:03:29,200 --> 00:03:32,879
adversary can or cannot do can he be

95
00:03:32,319 --> 00:03:36,480
active

96
00:03:32,879 --> 00:03:38,480
or only passive can he impersonate alice

97
00:03:36,480 --> 00:03:40,798
impersonate bob or even the public key

98
00:03:38,480 --> 00:03:43,359
infrastructure as a whole

99
00:03:40,799 --> 00:03:44,879
can he compromise keys there is one

100
00:03:43,360 --> 00:03:48,159
capability for each key

101
00:03:44,879 --> 00:03:51,440
long term ephemeral pre-shared keys

102
00:03:48,159 --> 00:03:53,280
of a list keys of bobs we even

103
00:03:51,440 --> 00:03:56,799
distinguish between compromises before

104
00:03:53,280 --> 00:03:59,680
the session on other compromises

105
00:03:56,799 --> 00:04:02,080
this list was established to allow us to

106
00:03:59,680 --> 00:04:04,319
model more advanced properties like

107
00:04:02,080 --> 00:04:05,120
key compromise impersonation resistance

108
00:04:04,319 --> 00:04:08,720
and perfect for

109
00:04:05,120 --> 00:04:09,360
secrecy the key element is that you can

110
00:04:08,720 --> 00:04:11,920
combine

111
00:04:09,360 --> 00:04:12,840
these capabilities freely with the end

112
00:04:11,920 --> 00:04:15,760
on all

113
00:04:12,840 --> 00:04:18,399
operators this is what makes the

114
00:04:15,760 --> 00:04:21,440
framework expressive but it also makes

115
00:04:18,399 --> 00:04:24,440
the number of threat models explode

116
00:04:21,440 --> 00:04:25,840
for anonymity proof which are

117
00:04:24,440 --> 00:04:28,160
considerably more

118
00:04:25,840 --> 00:04:29,520
computationally expensive we had to

119
00:04:28,160 --> 00:04:32,000
reduce this list to

120
00:04:29,520 --> 00:04:33,680
limit the combinatorial explosion but

121
00:04:32,000 --> 00:04:36,800
for other properties

122
00:04:33,680 --> 00:04:38,960
that is secrecy on agreement

123
00:04:36,800 --> 00:04:42,000
this amounts to more than 10 to the 12th

124
00:04:38,960 --> 00:04:46,159
fret models

125
00:04:42,000 --> 00:04:49,520
a result we cannot just enumerate

126
00:04:46,160 --> 00:04:52,400
all properties on threat models generate

127
00:04:49,520 --> 00:04:54,400
proof goals and submit them to tamarind

128
00:04:52,400 --> 00:04:57,039
we need to be slightly smarter

129
00:04:54,400 --> 00:04:59,599
which leads to our first contribution a

130
00:04:57,040 --> 00:05:01,520
tool called vaca

131
00:04:59,600 --> 00:05:04,639
there are two key ingredients in vacuum

132
00:05:01,520 --> 00:05:06,639
to tackle the huge number of proof goals

133
00:05:04,639 --> 00:05:08,080
first some proof goals subsume each

134
00:05:06,639 --> 00:05:09,840
other

135
00:05:08,080 --> 00:05:11,919
this means that without reducing the

136
00:05:09,840 --> 00:05:14,239
scope of the analysis

137
00:05:11,919 --> 00:05:16,400
we can only prove some of them unsoundly

138
00:05:14,240 --> 00:05:18,080
derive whether the other ones are true

139
00:05:16,400 --> 00:05:20,638
from the results

140
00:05:18,080 --> 00:05:23,120
then we can do some pre-processing we

141
00:05:20,639 --> 00:05:25,520
designed a small

142
00:05:23,120 --> 00:05:26,720
beyond very incomplete prover inside

143
00:05:25,520 --> 00:05:29,280
vacant

144
00:05:26,720 --> 00:05:30,240
it can do the easy proofs and lets us

145
00:05:29,280 --> 00:05:33,599
use tamarind

146
00:05:30,240 --> 00:05:35,280
only for the other proofs

147
00:05:33,600 --> 00:05:38,080
put together here is a high level

148
00:05:35,280 --> 00:05:41,039
summary award of what vacant does

149
00:05:38,080 --> 00:05:42,080
the input is any noise protocol you have

150
00:05:41,039 --> 00:05:44,320
to specify it

151
00:05:42,080 --> 00:05:46,800
in the way prescribed by the noise

152
00:05:44,320 --> 00:05:49,120
specification

153
00:05:46,800 --> 00:05:50,000
vacuum passes the noise protocol and

154
00:05:49,120 --> 00:05:52,720
outputs

155
00:05:50,000 --> 00:05:53,440
a symbolic model for your protocol on

156
00:05:52,720 --> 00:05:55,600
the set of

157
00:05:53,440 --> 00:05:57,840
carefully selected proof goals what i

158
00:05:55,600 --> 00:05:59,919
mean by carefully selected is that

159
00:05:57,840 --> 00:06:02,159
we cover more than 10 to the thread

160
00:05:59,919 --> 00:06:05,280
models but we only animate

161
00:06:02,160 --> 00:06:08,400
enumerate about 8 000

162
00:06:05,280 --> 00:06:09,198
proof goals on average vacuum then runs

163
00:06:08,400 --> 00:06:11,120
tamarind

164
00:06:09,199 --> 00:06:12,479
on the on these proof goals with a

165
00:06:11,120 --> 00:06:14,880
dedicated heuristic

166
00:06:12,479 --> 00:06:17,280
and collects the results in a nice human

167
00:06:14,880 --> 00:06:20,560
readable table

168
00:06:17,280 --> 00:06:22,638
in about 150 lines it tells you what

169
00:06:20,560 --> 00:06:26,000
property holds in any of all the threat

170
00:06:22,639 --> 00:06:29,440
models i described before

171
00:06:26,000 --> 00:06:32,800
our second contribution is the insight

172
00:06:29,440 --> 00:06:34,479
obtained by running vacal on a number of

173
00:06:32,800 --> 00:06:36,160
noise protocols

174
00:06:34,479 --> 00:06:38,400
since there are infinitely many noise

175
00:06:36,160 --> 00:06:41,759
particles we had to choose

176
00:06:38,400 --> 00:06:43,280
we analyzed the 53 examples found in the

177
00:06:41,759 --> 00:06:46,319
noise specifications

178
00:06:43,280 --> 00:06:46,960
some anonymity proofs timed out but we

179
00:06:46,319 --> 00:06:50,639
still

180
00:06:46,960 --> 00:06:50,638
have interesting finding to share

181
00:06:51,280 --> 00:06:55,679
first the noise specification has a

182
00:06:53,680 --> 00:06:57,280
classification in levels of the security

183
00:06:55,680 --> 00:06:58,880
guarantees of a subset of noise

184
00:06:57,280 --> 00:07:02,880
protocols

185
00:06:58,880 --> 00:07:05,759
for example secrecy goes from level 0

186
00:07:02,880 --> 00:07:06,400
no secrecy to level 5 some sort of

187
00:07:05,759 --> 00:07:09,199
perfect for

188
00:07:06,400 --> 00:07:11,198
secrecy those claims are informal and

189
00:07:09,199 --> 00:07:14,400
not proved

190
00:07:11,199 --> 00:07:17,599
prior work a tool called noise explorer

191
00:07:14,400 --> 00:07:20,479
prove that they are true but we add

192
00:07:17,599 --> 00:07:22,240
that actually the description of these

193
00:07:20,479 --> 00:07:26,800
levels implicitly assume

194
00:07:22,240 --> 00:07:29,199
that ethernet keys cannot be compromised

195
00:07:26,800 --> 00:07:30,880
also the name of secrecy level levels

196
00:07:29,199 --> 00:07:32,720
going from 0 to 5

197
00:07:30,880 --> 00:07:34,719
suggests that they are monotonic but

198
00:07:32,720 --> 00:07:37,919
that's actually not the case

199
00:07:34,720 --> 00:07:39,840
in some threat models i can use

200
00:07:37,919 --> 00:07:41,039
a level 3 protocol and be perfectly

201
00:07:39,840 --> 00:07:44,080
satisfied because i

202
00:07:41,039 --> 00:07:47,840
have secrecy but if i upgrade to level

203
00:07:44,080 --> 00:07:49,599
5 protocol i lose secrecy

204
00:07:47,840 --> 00:07:51,520
it's also interesting to know that in

205
00:07:49,599 --> 00:07:53,520
prior work

206
00:07:51,520 --> 00:07:56,080
the informal description of security

207
00:07:53,520 --> 00:07:59,120
levels given in the specification

208
00:07:56,080 --> 00:08:00,639
has been translated by a human to a

209
00:07:59,120 --> 00:08:03,919
formal property before

210
00:08:00,639 --> 00:08:06,400
being verified we don't need this step

211
00:08:03,919 --> 00:08:07,599
vacuum can automatically assign a formal

212
00:08:06,400 --> 00:08:09,840
meaning to levels

213
00:08:07,599 --> 00:08:11,360
because the levels actually correspond

214
00:08:09,840 --> 00:08:14,638
to equivalence classes

215
00:08:11,360 --> 00:08:14,639
of security guarantees

216
00:08:15,440 --> 00:08:20,479
we also found interesting corner cases

217
00:08:17,680 --> 00:08:22,240
in the noise specification proper

218
00:08:20,479 --> 00:08:24,159
this is a bit more technical but for

219
00:08:22,240 --> 00:08:26,639
those of you who are more familiar with

220
00:08:24,160 --> 00:08:29,440
noise here it is

221
00:08:26,639 --> 00:08:31,759
first about session identifiers the

222
00:08:29,440 --> 00:08:33,838
specification does not mandate

223
00:08:31,759 --> 00:08:35,760
that the session identifiers are kept

224
00:08:33,839 --> 00:08:38,080
secret but we show that

225
00:08:35,760 --> 00:08:38,958
if you leak a session at the identifier

226
00:08:38,080 --> 00:08:42,560
then you lose

227
00:08:38,958 --> 00:08:44,800
anonymity we also found that

228
00:08:42,559 --> 00:08:46,239
if you take a noise protocol which does

229
00:08:44,800 --> 00:08:49,040
not use

230
00:08:46,240 --> 00:08:49,920
a pre-shared key and add a dummy

231
00:08:49,040 --> 00:08:52,000
pre-shared key

232
00:08:49,920 --> 00:08:55,839
then you can actually worsen security

233
00:08:52,000 --> 00:08:55,839
guarantees in a very non-intuitive way

234
00:08:57,120 --> 00:09:00,640
but let's come back to our original

235
00:08:59,279 --> 00:09:03,600
question

236
00:09:00,640 --> 00:09:04,880
i have two noise protocols protocol a

237
00:09:03,600 --> 00:09:08,320
and protocol b

238
00:09:04,880 --> 00:09:11,200
and i wonder which one i should choose

239
00:09:08,320 --> 00:09:12,880
with our table of what property holds in

240
00:09:11,200 --> 00:09:14,399
what thread model it should be rather

241
00:09:12,880 --> 00:09:16,640
easy

242
00:09:14,399 --> 00:09:18,399
if for all properties on thread models

243
00:09:16,640 --> 00:09:21,439
when it holds in protocol b

244
00:09:18,399 --> 00:09:23,839
it also holds in protocol a then a is

245
00:09:21,440 --> 00:09:26,720
better than b

246
00:09:23,839 --> 00:09:28,480
note that to be able to do that we have

247
00:09:26,720 --> 00:09:30,720
to be very careful to formalize

248
00:09:28,480 --> 00:09:32,080
agreement in a way which doesn't depend

249
00:09:30,720 --> 00:09:34,880
on the protocol

250
00:09:32,080 --> 00:09:36,320
it's not straightforward but when you

251
00:09:34,880 --> 00:09:38,720
pay attention to this

252
00:09:36,320 --> 00:09:40,720
you induce a partial order on noise

253
00:09:38,720 --> 00:09:42,720
protocols

254
00:09:40,720 --> 00:09:44,399
you can see this order on the right of

255
00:09:42,720 --> 00:09:47,600
the screen arrows

256
00:09:44,399 --> 00:09:49,760
point to better protocols

257
00:09:47,600 --> 00:09:51,040
let's make it more concrete with an

258
00:09:49,760 --> 00:09:54,319
example

259
00:09:51,040 --> 00:09:54,319
let me zoom in the graph

260
00:09:54,399 --> 00:09:57,920
to make sure we don't compare apples to

261
00:09:57,200 --> 00:10:00,560
oranges

262
00:09:57,920 --> 00:10:02,479
assume that you want a noise protocol

263
00:10:00,560 --> 00:10:04,800
where both alice and bob

264
00:10:02,480 --> 00:10:07,279
have a long term key and bob already

265
00:10:04,800 --> 00:10:09,920
knows alice's long term key

266
00:10:07,279 --> 00:10:10,880
the noise specification req has four

267
00:10:09,920 --> 00:10:14,160
examples of

268
00:10:10,880 --> 00:10:17,760
protocols matching these requirements

269
00:10:14,160 --> 00:10:21,040
they are in green on the right

270
00:10:17,760 --> 00:10:22,959
as you can see kx the top one

271
00:10:21,040 --> 00:10:26,399
offers strictly better security

272
00:10:22,959 --> 00:10:28,640
guarantees as the three other ones

273
00:10:26,399 --> 00:10:30,720
so in terms of security you have no

274
00:10:28,640 --> 00:10:32,000
reason at all to use the three other

275
00:10:30,720 --> 00:10:36,240
ones and we call them

276
00:10:32,000 --> 00:10:40,800
redundant as a whole we identify

277
00:10:36,240 --> 00:10:40,800
we identified 20 redundant protocols

278
00:10:42,240 --> 00:10:46,399
that's it so i presented you vacuum an

279
00:10:44,480 --> 00:10:48,320
automated tool to determine the

280
00:10:46,399 --> 00:10:50,320
security guarantees of noise protocols

281
00:10:48,320 --> 00:10:52,320
that can compare them to choose the best

282
00:10:50,320 --> 00:10:55,360
ones

283
00:10:52,320 --> 00:10:58,160
know that the code of the tool is

284
00:10:55,360 --> 00:11:01,839
available as artifacts to the paper and

285
00:10:58,160 --> 00:11:01,839
thanks for your attention

