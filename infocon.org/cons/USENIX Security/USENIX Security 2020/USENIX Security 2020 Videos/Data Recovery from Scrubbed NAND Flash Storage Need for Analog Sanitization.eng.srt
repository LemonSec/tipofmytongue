1
00:00:08,480 --> 00:00:12,080
hello everyone

2
00:00:09,599 --> 00:00:13,440
my name is vishwaji today i'm an

3
00:00:12,080 --> 00:00:15,120
assistant professor

4
00:00:13,440 --> 00:00:17,439
in the university of alabama in

5
00:00:15,120 --> 00:00:18,560
huntsville so in this talk i will

6
00:00:17,440 --> 00:00:21,119
discuss about

7
00:00:18,560 --> 00:00:21,759
the data sanitization issues in the nand

8
00:00:21,119 --> 00:00:25,039
flash

9
00:00:21,760 --> 00:00:26,880
storage so primarily this work is done

10
00:00:25,039 --> 00:00:28,240
by my student medhi hassan who has

11
00:00:26,880 --> 00:00:32,000
recently graduated

12
00:00:28,240 --> 00:00:32,000
so i am presenting on behalf of him

13
00:00:32,558 --> 00:00:36,079
so this is the outline of my talk i'll

14
00:00:34,399 --> 00:00:38,879
first discuss the motivation

15
00:00:36,079 --> 00:00:41,360
and the background necessary to follow

16
00:00:38,879 --> 00:00:43,280
this talk in the first part of this talk

17
00:00:41,360 --> 00:00:45,440
in the second part i'll show the

18
00:00:43,280 --> 00:00:48,000
experimental evaluation results

19
00:00:45,440 --> 00:00:50,239
and finally i'll show the new ideas for

20
00:00:48,000 --> 00:00:53,120
achieving page level instanced

21
00:00:50,239 --> 00:00:55,519
data standardization and will conclude

22
00:00:53,120 --> 00:00:58,959
this talk with future work

23
00:00:55,520 --> 00:01:00,800
so let's get started so nand flash is

24
00:00:58,960 --> 00:01:01,920
ubiquitous in the consumer electronic

25
00:01:00,800 --> 00:01:05,119
space

26
00:01:01,920 --> 00:01:08,240
take your laptop smartphone

27
00:01:05,119 --> 00:01:11,200
or digital camera storage

28
00:01:08,240 --> 00:01:13,439
the solid-state storage devices nand is

29
00:01:11,200 --> 00:01:16,640
ubiquitously used

30
00:01:13,439 --> 00:01:17,758
now unfortunately the data deletion from

31
00:01:16,640 --> 00:01:20,799
the nand flash

32
00:01:17,759 --> 00:01:23,360
is not straightforward and hence this

33
00:01:20,799 --> 00:01:24,320
the user data still remains in the media

34
00:01:23,360 --> 00:01:26,560
long after

35
00:01:24,320 --> 00:01:27,758
the user deletion so this provides a

36
00:01:26,560 --> 00:01:30,000
huge privacy

37
00:01:27,759 --> 00:01:31,200
threat you can see from the data

38
00:01:30,000 --> 00:01:34,720
protection act

39
00:01:31,200 --> 00:01:36,400
of 2018 the data must be data deletion

40
00:01:34,720 --> 00:01:37,119
must be real that means it cannot be

41
00:01:36,400 --> 00:01:40,079
recovered

42
00:01:37,119 --> 00:01:41,040
in any way unfortunately the none of the

43
00:01:40,079 --> 00:01:43,679
flash system

44
00:01:41,040 --> 00:01:46,720
offers the end user the capability to

45
00:01:43,680 --> 00:01:48,399
instantly sanitize the media

46
00:01:46,720 --> 00:01:50,240
and this is a real threat you can see

47
00:01:48,399 --> 00:01:54,000
the in various news

48
00:01:50,240 --> 00:01:56,079
that the sold ssds contains user

49
00:01:54,000 --> 00:01:57,759
data and some of those ssd has

50
00:01:56,079 --> 00:01:58,240
standardization method in place but

51
00:01:57,759 --> 00:02:00,399
still

52
00:01:58,240 --> 00:02:01,520
the data is recoverable so that shows

53
00:02:00,399 --> 00:02:04,799
that it is a real

54
00:02:01,520 --> 00:02:06,798
privacy threat so now a little bit

55
00:02:04,799 --> 00:02:08,399
background on the nand flash system how

56
00:02:06,799 --> 00:02:11,599
it stores information and all

57
00:02:08,399 --> 00:02:13,520
so a nand storage as it's shown here

58
00:02:11,599 --> 00:02:15,760
with the internal of a ssd

59
00:02:13,520 --> 00:02:17,760
has two important component one is

60
00:02:15,760 --> 00:02:20,079
called the flash controller

61
00:02:17,760 --> 00:02:21,359
which is a brain of the system and other

62
00:02:20,080 --> 00:02:25,200
is the flash

63
00:02:21,360 --> 00:02:28,000
media chips where the data is stored

64
00:02:25,200 --> 00:02:29,040
now the flash controller has various

65
00:02:28,000 --> 00:02:32,800
firmware

66
00:02:29,040 --> 00:02:35,440
modules which manages the flash

67
00:02:32,800 --> 00:02:36,160
storage media and flash controller

68
00:02:35,440 --> 00:02:38,319
actually

69
00:02:36,160 --> 00:02:39,680
determines when the data is really

70
00:02:38,319 --> 00:02:41,920
deleted from the media

71
00:02:39,680 --> 00:02:42,959
user has no control over it and hence

72
00:02:41,920 --> 00:02:44,799
there is a time lag

73
00:02:42,959 --> 00:02:47,920
between user deletion and the actual

74
00:02:44,800 --> 00:02:50,080
deletion of the data from the media

75
00:02:47,920 --> 00:02:51,200
so now a little bit on uh how flash

76
00:02:50,080 --> 00:02:53,440
stores information

77
00:02:51,200 --> 00:02:55,440
so flash is a floating gate transistor

78
00:02:53,440 --> 00:02:56,879
it stores information in the form of a

79
00:02:55,440 --> 00:02:57,359
charge on the floating gate if there is

80
00:02:56,879 --> 00:02:59,280
charge

81
00:02:57,360 --> 00:03:00,959
this cell is called program cell it will

82
00:02:59,280 --> 00:03:03,519
have higher threshold voltage

83
00:03:00,959 --> 00:03:05,440
represented with logic zero and if there

84
00:03:03,519 --> 00:03:07,360
is no charge on the floating gate it is

85
00:03:05,440 --> 00:03:08,879
it will have lower threshold voltage and

86
00:03:07,360 --> 00:03:11,280
it represents logic one

87
00:03:08,879 --> 00:03:12,879
so here i show the threshold voltage

88
00:03:11,280 --> 00:03:14,400
distribution of the cells

89
00:03:12,879 --> 00:03:16,239
uh which are programmed and which are

90
00:03:14,400 --> 00:03:18,159
erased and that looks like a gaussian

91
00:03:16,239 --> 00:03:20,400
distribution this is a scar tool

92
00:03:18,159 --> 00:03:22,079
but this is how the actual threshold

93
00:03:20,400 --> 00:03:24,799
representation looks like

94
00:03:22,080 --> 00:03:25,120
so this is essentially analog memory but

95
00:03:24,799 --> 00:03:27,440
we

96
00:03:25,120 --> 00:03:29,519
get the digital information by applying

97
00:03:27,440 --> 00:03:30,319
a read reference voltage which lies in

98
00:03:29,519 --> 00:03:33,840
between

99
00:03:30,319 --> 00:03:34,640
the true distribution so the bottom line

100
00:03:33,840 --> 00:03:37,360
here is that

101
00:03:34,640 --> 00:03:37,920
nand flash is a charge based analog

102
00:03:37,360 --> 00:03:39,519
memory

103
00:03:37,920 --> 00:03:43,518
and we will show that it has a huge

104
00:03:39,519 --> 00:03:45,920
implication on the data recovery process

105
00:03:43,519 --> 00:03:47,280
so why instant sanitization is a problem

106
00:03:45,920 --> 00:03:50,798
we need to see the

107
00:03:47,280 --> 00:03:52,560
block level uh circuit diagram of a nand

108
00:03:50,799 --> 00:03:54,319
uh storage so this is this is the

109
00:03:52,560 --> 00:03:56,959
diagram and you can see

110
00:03:54,319 --> 00:03:58,640
the cells connected in a horizontal row

111
00:03:56,959 --> 00:04:01,599
they forms one page

112
00:03:58,640 --> 00:04:02,480
of of this block so now you can program

113
00:04:01,599 --> 00:04:04,959
or read

114
00:04:02,480 --> 00:04:06,000
data in page by page level but you

115
00:04:04,959 --> 00:04:08,959
cannot delete

116
00:04:06,000 --> 00:04:10,480
data by page by page in nand system you

117
00:04:08,959 --> 00:04:12,879
can delete only by

118
00:04:10,480 --> 00:04:13,599
entire block or block level delete is

119
00:04:12,879 --> 00:04:16,000
allowed

120
00:04:13,599 --> 00:04:17,199
now this creates a huge problem for the

121
00:04:16,000 --> 00:04:20,320
nand controller

122
00:04:17,199 --> 00:04:21,120
because in a nand controller suppose a

123
00:04:20,320 --> 00:04:23,440
block has

124
00:04:21,120 --> 00:04:24,639
certain valid pages and certain pages

125
00:04:23,440 --> 00:04:27,199
you would like to delete

126
00:04:24,639 --> 00:04:28,160
so now in this case the nand controller

127
00:04:27,199 --> 00:04:30,960
has to rewrite

128
00:04:28,160 --> 00:04:32,560
all those valid pages to a new block

129
00:04:30,960 --> 00:04:35,280
before it can delete the

130
00:04:32,560 --> 00:04:36,639
old block so that's provides or that

131
00:04:35,280 --> 00:04:40,159
offer that

132
00:04:36,639 --> 00:04:41,360
creates a hefty overhead for in terms of

133
00:04:40,160 --> 00:04:42,240
endurance in terms of write

134
00:04:41,360 --> 00:04:44,800
amplification

135
00:04:42,240 --> 00:04:45,280
and hence this block erase command is

136
00:04:44,800 --> 00:04:47,440
very

137
00:04:45,280 --> 00:04:49,119
sparingly used by the controller and

138
00:04:47,440 --> 00:04:51,199
that's why there is a lag

139
00:04:49,120 --> 00:04:53,360
between user deletion and the actual

140
00:04:51,199 --> 00:04:55,840
deletion of the data

141
00:04:53,360 --> 00:04:58,400
so the key point here is that there is

142
00:04:55,840 --> 00:05:00,159
no page level data deletion command

143
00:04:58,400 --> 00:05:02,000
offered by the nand flash chips

144
00:05:00,160 --> 00:05:04,639
manufacturer which is creating

145
00:05:02,000 --> 00:05:04,639
this problem

146
00:05:05,520 --> 00:05:10,000
okay so now sanitization methods in the

147
00:05:08,639 --> 00:05:12,080
nand system is an active

148
00:05:10,000 --> 00:05:14,880
area of research there has been several

149
00:05:12,080 --> 00:05:17,520
methods proposed in the last few years

150
00:05:14,880 --> 00:05:18,960
so the most commonly used method is this

151
00:05:17,520 --> 00:05:22,240
logical sanitization

152
00:05:18,960 --> 00:05:24,000
where the physical addresses

153
00:05:22,240 --> 00:05:26,479
of those pages that are going to be

154
00:05:24,000 --> 00:05:28,400
deleted are made invalid

155
00:05:26,479 --> 00:05:30,159
and that's how the data is deleted but

156
00:05:28,400 --> 00:05:31,198
you can see data still remains in the

157
00:05:30,160 --> 00:05:33,360
media only

158
00:05:31,199 --> 00:05:34,400
they are not accessible by the digital

159
00:05:33,360 --> 00:05:38,000
interface because

160
00:05:34,400 --> 00:05:39,440
the physical addresses are invalid so

161
00:05:38,000 --> 00:05:40,400
this is not secure even though it is

162
00:05:39,440 --> 00:05:42,880
very convenient

163
00:05:40,400 --> 00:05:44,560
and very quick the other class of method

164
00:05:42,880 --> 00:05:46,719
is based on encryption

165
00:05:44,560 --> 00:05:48,639
where data is encrypted before it is

166
00:05:46,720 --> 00:05:51,600
written on the nand array

167
00:05:48,639 --> 00:05:52,320
now there is a key storage block which

168
00:05:51,600 --> 00:05:55,120
will store

169
00:05:52,320 --> 00:05:57,120
the keys corresponding to the files and

170
00:05:55,120 --> 00:05:59,039
you have to generate those keys securely

171
00:05:57,120 --> 00:06:00,479
manage those keys security so this

172
00:05:59,039 --> 00:06:02,880
encryption mesh methods

173
00:06:00,479 --> 00:06:04,240
are suitable for high-end nand storage

174
00:06:02,880 --> 00:06:08,400
which has enough resource

175
00:06:04,240 --> 00:06:10,720
but for low end non-storage having um

176
00:06:08,400 --> 00:06:14,080
resource constraint platform this

177
00:06:10,720 --> 00:06:17,759
encryption-based methods are rarely used

178
00:06:14,080 --> 00:06:20,880
the third class is based on um override

179
00:06:17,759 --> 00:06:24,080
based sanitization where you can

180
00:06:20,880 --> 00:06:26,479
so since we cannot delete data page wise

181
00:06:24,080 --> 00:06:27,919
but nand controller can program the data

182
00:06:26,479 --> 00:06:30,318
to all zero state

183
00:06:27,919 --> 00:06:30,960
so this is a very clever and interesting

184
00:06:30,319 --> 00:06:33,759
idea

185
00:06:30,960 --> 00:06:34,799
because this provides an alternative for

186
00:06:33,759 --> 00:06:38,880
page level

187
00:06:34,800 --> 00:06:40,720
data standardization our research starts

188
00:06:38,880 --> 00:06:41,280
or basically questions this override

189
00:06:40,720 --> 00:06:45,039
based

190
00:06:41,280 --> 00:06:49,119
all zero erase method

191
00:06:45,039 --> 00:06:49,440
so so this is how we start our research

192
00:06:49,120 --> 00:06:51,199
we

193
00:06:49,440 --> 00:06:52,479
we ask this question that is it really

194
00:06:51,199 --> 00:06:54,800
secure uh

195
00:06:52,479 --> 00:06:56,639
this all zero override method so this is

196
00:06:54,800 --> 00:06:58,319
uh the digital representation of your

197
00:06:56,639 --> 00:06:59,280
data and the analog representation of

198
00:06:58,319 --> 00:07:01,520
the data

199
00:06:59,280 --> 00:07:04,000
so since flash is analog memory after

200
00:07:01,520 --> 00:07:05,520
few days the analog states will decay

201
00:07:04,000 --> 00:07:07,520
and the threshold voltage will change

202
00:07:05,520 --> 00:07:08,719
but in terms of digital data there is

203
00:07:07,520 --> 00:07:10,639
not much change

204
00:07:08,720 --> 00:07:12,240
so after a few days when you delete the

205
00:07:10,639 --> 00:07:14,479
data you create new zeros

206
00:07:12,240 --> 00:07:15,759
so now there is a distinction between

207
00:07:14,479 --> 00:07:17,840
new zero and the old

208
00:07:15,759 --> 00:07:19,440
original zeros because in terms of

209
00:07:17,840 --> 00:07:20,799
threshold voltage the new zeros will

210
00:07:19,440 --> 00:07:23,199
have higher threshold voltage

211
00:07:20,800 --> 00:07:24,960
and old zeros will have less threshold

212
00:07:23,199 --> 00:07:28,240
voltage now the adversary

213
00:07:24,960 --> 00:07:31,840
can exploit this property

214
00:07:28,240 --> 00:07:31,840
to recover the data

215
00:07:32,240 --> 00:07:36,240
so this is the third model we assume

216
00:07:34,000 --> 00:07:38,400
that adversary has physical access

217
00:07:36,240 --> 00:07:40,319
of the nand chips and they can perform

218
00:07:38,400 --> 00:07:41,280
low level memory operation to recover

219
00:07:40,319 --> 00:07:43,280
the data

220
00:07:41,280 --> 00:07:44,479
so in order to emulate this attack we

221
00:07:43,280 --> 00:07:46,559
used the

222
00:07:44,479 --> 00:07:47,599
nand flash commercially available nand

223
00:07:46,560 --> 00:07:49,599
flash chips

224
00:07:47,599 --> 00:07:51,360
and we use this tsoft socket to

225
00:07:49,599 --> 00:07:53,680
interface these flash chips

226
00:07:51,360 --> 00:07:55,360
with the computer through a usb

227
00:07:53,680 --> 00:07:59,840
interface so this is our experimental

228
00:07:55,360 --> 00:07:59,840
setup to demonstrate this attack

229
00:07:59,919 --> 00:08:03,198
so this brings to the second part of

230
00:08:01,599 --> 00:08:05,039
this talk that the experimental

231
00:08:03,199 --> 00:08:06,960
evolution

232
00:08:05,039 --> 00:08:08,878
so now in order to recover the data we

233
00:08:06,960 --> 00:08:10,638
need to

234
00:08:08,879 --> 00:08:12,160
analyze the analog properties of the

235
00:08:10,639 --> 00:08:15,680
bits through system command

236
00:08:12,160 --> 00:08:18,479
so there is a method called read retry

237
00:08:15,680 --> 00:08:19,840
which allows this end user to shift the

238
00:08:18,479 --> 00:08:21,359
read reference voltage

239
00:08:19,840 --> 00:08:22,878
so by shifting the read reference

240
00:08:21,360 --> 00:08:26,160
voltage and bringing it

241
00:08:22,879 --> 00:08:28,960
between the weak and strong zeros we can

242
00:08:26,160 --> 00:08:29,840
recover or we can uh distinguish these

243
00:08:28,960 --> 00:08:33,279
strong and

244
00:08:29,840 --> 00:08:35,279
weak zeros but unfortunately slc chips

245
00:08:33,279 --> 00:08:36,399
most of the slc chips do not have this

246
00:08:35,279 --> 00:08:38,958
feature

247
00:08:36,399 --> 00:08:40,559
and even if this radiator feature is

248
00:08:38,958 --> 00:08:42,718
there in some of the chips

249
00:08:40,559 --> 00:08:43,838
mlc and other chips the read reference

250
00:08:42,719 --> 00:08:46,080
voltage shift is

251
00:08:43,839 --> 00:08:47,760
very minimal we cannot use this

252
00:08:46,080 --> 00:08:50,000
technique for this kind of

253
00:08:47,760 --> 00:08:51,200
large voltage shift and distinguishing

254
00:08:50,000 --> 00:08:53,040
weak and strong zeros

255
00:08:51,200 --> 00:08:55,040
that's why we adopt this partially

256
00:08:53,040 --> 00:08:57,360
raised technique to recover the data

257
00:08:55,040 --> 00:08:59,199
so in this technique what you can do we

258
00:08:57,360 --> 00:09:01,440
can issue the erase command and we can

259
00:08:59,200 --> 00:09:03,920
terminate the race command prematurely

260
00:09:01,440 --> 00:09:04,880
by issuing a reset command so in this

261
00:09:03,920 --> 00:09:07,439
way the

262
00:09:04,880 --> 00:09:08,000
distribution of the program state can be

263
00:09:07,440 --> 00:09:09,680
stopped

264
00:09:08,000 --> 00:09:12,000
in between before it goes to the array

265
00:09:09,680 --> 00:09:14,319
state and that can offer the

266
00:09:12,000 --> 00:09:15,600
opportunity to distinguish strong versus

267
00:09:14,320 --> 00:09:17,120
weak zeros

268
00:09:15,600 --> 00:09:19,839
and that's what we'll show in the coming

269
00:09:17,120 --> 00:09:21,760
slides so we start our data recovery

270
00:09:19,839 --> 00:09:23,040
process by writing an einstein image as

271
00:09:21,760 --> 00:09:24,800
a representative data

272
00:09:23,040 --> 00:09:26,480
so this is the digital representation

273
00:09:24,800 --> 00:09:27,760
and the underlying analog representation

274
00:09:26,480 --> 00:09:29,440
is shown by threshold voltage

275
00:09:27,760 --> 00:09:32,560
distribution here

276
00:09:29,440 --> 00:09:33,360
so after um so we bake this image to

277
00:09:32,560 --> 00:09:35,599
accelerate

278
00:09:33,360 --> 00:09:36,640
the data retention time so we bake it

279
00:09:35,600 --> 00:09:37,839
for three hours

280
00:09:36,640 --> 00:09:39,600
so after baking the digital

281
00:09:37,839 --> 00:09:40,720
representation of the image does not

282
00:09:39,600 --> 00:09:43,760
change when you read

283
00:09:40,720 --> 00:09:46,000
after bake the digital data remains same

284
00:09:43,760 --> 00:09:48,640
but we know that after baking analog

285
00:09:46,000 --> 00:09:50,720
threshold voltage has been drifted down

286
00:09:48,640 --> 00:09:52,399
so after that we do all zero scrubbing

287
00:09:50,720 --> 00:09:54,560
to delete the

288
00:09:52,399 --> 00:09:55,839
image and that's what we see that image

289
00:09:54,560 --> 00:09:56,719
is completely black that means

290
00:09:55,839 --> 00:10:00,080
everything is all

291
00:09:56,720 --> 00:10:01,360
zero and then we do a partial erase on

292
00:10:00,080 --> 00:10:03,519
this black image

293
00:10:01,360 --> 00:10:05,040
and we can still see or you can recover

294
00:10:03,519 --> 00:10:08,480
the instant image back

295
00:10:05,040 --> 00:10:10,240
so that's the the real

296
00:10:08,480 --> 00:10:12,000
the actual demonstration or external

297
00:10:10,240 --> 00:10:14,399
demonstration on real

298
00:10:12,000 --> 00:10:15,920
um flash chips so that data is

299
00:10:14,399 --> 00:10:19,680
recoverable even after

300
00:10:15,920 --> 00:10:21,439
all zero based sanitization

301
00:10:19,680 --> 00:10:22,719
so now this is the more results on on

302
00:10:21,440 --> 00:10:25,360
the recovery process

303
00:10:22,720 --> 00:10:26,320
so for in the recovery the key key

304
00:10:25,360 --> 00:10:29,440
parameter is the

305
00:10:26,320 --> 00:10:31,120
partial erase time so if we push

306
00:10:29,440 --> 00:10:32,720
if we do erase or partially raise for a

307
00:10:31,120 --> 00:10:34,079
very limited amount of time nothing is

308
00:10:32,720 --> 00:10:35,760
it is so most of the data is not

309
00:10:34,079 --> 00:10:37,519
recoverable and if you erase

310
00:10:35,760 --> 00:10:39,360
for long enough time everything get away

311
00:10:37,519 --> 00:10:41,040
so there is a optimal partially raised

312
00:10:39,360 --> 00:10:44,480
time that will give

313
00:10:41,040 --> 00:10:46,240
the the best recovery efficiency

314
00:10:44,480 --> 00:10:48,160
and this second important part is the

315
00:10:46,240 --> 00:10:50,079
bake time so if you bake for longer

316
00:10:48,160 --> 00:10:51,760
duration then separation between strong

317
00:10:50,079 --> 00:10:55,359
and weak zeros will be larger

318
00:10:51,760 --> 00:10:57,200
and that will offer higher bit accuracy

319
00:10:55,360 --> 00:10:58,800
but i would like to point out here is

320
00:10:57,200 --> 00:11:00,480
that that not all the bits are

321
00:10:58,800 --> 00:11:02,399
recoverable with this technique because

322
00:11:00,480 --> 00:11:03,760
there is overlap between strong zero and

323
00:11:02,399 --> 00:11:05,839
the weak zero distribution

324
00:11:03,760 --> 00:11:08,720
and that's why with this technique not

325
00:11:05,839 --> 00:11:10,560
everything can be recovered

326
00:11:08,720 --> 00:11:12,240
so that brings to the side the last part

327
00:11:10,560 --> 00:11:14,959
of this talk the new ideas

328
00:11:12,240 --> 00:11:16,480
uh to create uh to do analog

329
00:11:14,959 --> 00:11:18,959
sanitization

330
00:11:16,480 --> 00:11:21,040
so the first idea is based on of

331
00:11:18,959 --> 00:11:22,479
reprogramming all the bits to a higher

332
00:11:21,040 --> 00:11:26,079
threshold voltage

333
00:11:22,480 --> 00:11:27,600
so so in that way the distinction

334
00:11:26,079 --> 00:11:28,319
between weak and strong zeros will be

335
00:11:27,600 --> 00:11:30,959
gone

336
00:11:28,320 --> 00:11:32,160
but unfortunately current chips will not

337
00:11:30,959 --> 00:11:34,560
support this feature

338
00:11:32,160 --> 00:11:36,480
because uh reprogramming to higher

339
00:11:34,560 --> 00:11:39,040
threshold voltage are not allowed

340
00:11:36,480 --> 00:11:40,160
in the current flash chips the second

341
00:11:39,040 --> 00:11:42,640
idea is

342
00:11:40,160 --> 00:11:44,480
to to create weak zeros instead of

343
00:11:42,640 --> 00:11:45,199
creating strong zeros we can create weak

344
00:11:44,480 --> 00:11:48,480
zeros

345
00:11:45,200 --> 00:11:50,000
by partial program technique so instead

346
00:11:48,480 --> 00:11:50,560
of full program we can use partial

347
00:11:50,000 --> 00:11:52,480
program

348
00:11:50,560 --> 00:11:53,599
so that we can create weak zeros in

349
00:11:52,480 --> 00:11:56,800
order to match

350
00:11:53,600 --> 00:11:58,399
the original or old zeroes so page

351
00:11:56,800 --> 00:12:00,639
creation history will be important

352
00:11:58,399 --> 00:12:03,040
because we need to know how much this

353
00:12:00,639 --> 00:12:05,360
the cells has been drifted down

354
00:12:03,040 --> 00:12:07,120
in terms of threshold voltage based on

355
00:12:05,360 --> 00:12:08,560
the page creation time

356
00:12:07,120 --> 00:12:10,800
and using this information we can

357
00:12:08,560 --> 00:12:12,880
control the partial program time

358
00:12:10,800 --> 00:12:14,639
so that we can create weak zeros which

359
00:12:12,880 --> 00:12:17,200
superimpose with the original

360
00:12:14,639 --> 00:12:19,279
zeros in that way recovery in that way

361
00:12:17,200 --> 00:12:22,240
the adversary cannot recover

362
00:12:19,279 --> 00:12:22,720
the data so i'd have to conclude this

363
00:12:22,240 --> 00:12:24,320
talk

364
00:12:22,720 --> 00:12:25,920
that we have shown that all zero

365
00:12:24,320 --> 00:12:27,279
override based technique has

366
00:12:25,920 --> 00:12:29,680
vulnerability

367
00:12:27,279 --> 00:12:30,320
the adversary can exploit the analog

368
00:12:29,680 --> 00:12:32,959
properties

369
00:12:30,320 --> 00:12:33,440
to get back the original data we have

370
00:12:32,959 --> 00:12:35,839
shown

371
00:12:33,440 --> 00:12:37,519
two different techniques to uh to

372
00:12:35,839 --> 00:12:40,800
achieve page level instant

373
00:12:37,519 --> 00:12:43,040
data sanitization and one is based on

374
00:12:40,800 --> 00:12:44,160
over programming and another is based on

375
00:12:43,040 --> 00:12:46,639
history dependent

376
00:12:44,160 --> 00:12:48,240
week zero creation so these are the

377
00:12:46,639 --> 00:12:50,720
future what we'd like to do

378
00:12:48,240 --> 00:12:52,639
so we have done demonstration mostly on

379
00:12:50,720 --> 00:12:55,279
um slc

380
00:12:52,639 --> 00:12:57,040
nand chips but there are mlc tlc these

381
00:12:55,279 --> 00:12:58,480
are important class of nand chips we'd

382
00:12:57,040 --> 00:12:58,800
like to perform demonstration on them

383
00:12:58,480 --> 00:13:00,800
we'd

384
00:12:58,800 --> 00:13:02,800
also like to perform demonstration on

385
00:13:00,800 --> 00:13:04,079
the 3d net which is the future of nand

386
00:13:02,800 --> 00:13:06,479
technology

387
00:13:04,079 --> 00:13:07,359
and we'd also like to experimentally

388
00:13:06,480 --> 00:13:10,320
evaluate

389
00:13:07,360 --> 00:13:11,760
and the robustness of the proposed ideas

390
00:13:10,320 --> 00:13:13,440
so these are the future work

391
00:13:11,760 --> 00:13:14,800
so with this i would like to conclude

392
00:13:13,440 --> 00:13:16,399
this talk

393
00:13:14,800 --> 00:13:18,839
and i would like to thank you and i'll

394
00:13:16,399 --> 00:13:21,839
be happy to take any questions if you

395
00:13:18,839 --> 00:13:21,839
have

