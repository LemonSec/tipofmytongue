1
00:00:08,559 --> 00:00:12,000
hi

2
00:00:09,440 --> 00:00:13,120
my name is leila and i'm a fifth year

3
00:00:12,000 --> 00:00:15,599
phd student

4
00:00:13,120 --> 00:00:17,759
at boston university today i'm going to

5
00:00:15,599 --> 00:00:19,920
talk about our paper titled phmon

6
00:00:17,760 --> 00:00:21,600
a programmable hardware monitor and its

7
00:00:19,920 --> 00:00:23,519
security statement

8
00:00:21,600 --> 00:00:25,039
this work is in collaboration with my

9
00:00:23,519 --> 00:00:27,278
colleagues saddullah oyo

10
00:00:25,039 --> 00:00:29,039
and skyler as well as my advisors

11
00:00:27,279 --> 00:00:31,439
professor ajay joshi and professor

12
00:00:29,039 --> 00:00:33,600
manolakida

13
00:00:31,439 --> 00:00:35,040
in recent years there has been a growing

14
00:00:33,600 --> 00:00:37,600
trend in the industry

15
00:00:35,040 --> 00:00:39,600
to enforce new security extension in

16
00:00:37,600 --> 00:00:42,480
hardware such as interlink

17
00:00:39,600 --> 00:00:44,719
and intel city these extensions are

18
00:00:42,480 --> 00:00:45,599
typically faster than software-based

19
00:00:44,719 --> 00:00:49,200
approaches

20
00:00:45,600 --> 00:00:52,320
but their implementation requires a long

21
00:00:49,200 --> 00:00:52,879
and expensive process and then we end up

22
00:00:52,320 --> 00:00:56,239
with

23
00:00:52,879 --> 00:00:58,320
fixed security policies built in silicon

24
00:00:56,239 --> 00:01:00,239
that cannot get updated as security

25
00:00:58,320 --> 00:01:02,559
threats evolve and if there is any

26
00:01:00,239 --> 00:01:04,399
problem in the hardware implementation

27
00:01:02,559 --> 00:01:06,479
then we have to wait for the next

28
00:01:04,400 --> 00:01:08,320
generation of the processors until the

29
00:01:06,479 --> 00:01:10,720
problem gets fixed

30
00:01:08,320 --> 00:01:12,000
to clarify the challenges involved in

31
00:01:10,720 --> 00:01:14,240
adding a new security

32
00:01:12,000 --> 00:01:15,439
extension in hardware let's take a look

33
00:01:14,240 --> 00:01:17,360
at an example

34
00:01:15,439 --> 00:01:19,439
we all know that the c programming

35
00:01:17,360 --> 00:01:20,159
language suffers from memory safety

36
00:01:19,439 --> 00:01:21,839
issues

37
00:01:20,159 --> 00:01:24,000
and researchers have been trying to

38
00:01:21,840 --> 00:01:24,640
address these problems since a long time

39
00:01:24,000 --> 00:01:26,960
ago

40
00:01:24,640 --> 00:01:27,840
using software-based approaches like

41
00:01:26,960 --> 00:01:31,520
safety

42
00:01:27,840 --> 00:01:32,720
in 1994 or hardware-based approaches

43
00:01:31,520 --> 00:01:37,119
like heartbulb

44
00:01:32,720 --> 00:01:38,798
in 2008 finally in 2013

45
00:01:37,119 --> 00:01:41,280
intel announced that they're going to

46
00:01:38,799 --> 00:01:44,479
include a new hardware extension

47
00:01:41,280 --> 00:01:45,040
called mpx for memory bomb checking to

48
00:01:44,479 --> 00:01:47,920
assist

49
00:01:45,040 --> 00:01:48,479
with addressing this problem and it

50
00:01:47,920 --> 00:01:51,280
still took

51
00:01:48,479 --> 00:01:54,000
two more years until mpx was

52
00:01:51,280 --> 00:01:56,240
commercially available on the processors

53
00:01:54,000 --> 00:01:57,520
but things didn't go as expected after

54
00:01:56,240 --> 00:01:59,520
that

55
00:01:57,520 --> 00:02:00,560
there has been reports about

56
00:01:59,520 --> 00:02:03,679
compatibility

57
00:02:00,560 --> 00:02:06,719
issues of mpx with legacy program

58
00:02:03,680 --> 00:02:08,959
as well as performance issues where

59
00:02:06,719 --> 00:02:10,478
mpx could incur a considerable

60
00:02:08,959 --> 00:02:13,360
performance overhead

61
00:02:10,479 --> 00:02:15,440
even up to four times in some cases

62
00:02:13,360 --> 00:02:15,840
because of all these issues after a

63
00:02:15,440 --> 00:02:19,040
while

64
00:02:15,840 --> 00:02:20,400
llvm gcc and linux kernel all announced

65
00:02:19,040 --> 00:02:24,319
that they are going to stop

66
00:02:20,400 --> 00:02:27,680
supporting mpx and by 2019

67
00:02:24,319 --> 00:02:28,160
ntx was disabled this example clearly

68
00:02:27,680 --> 00:02:30,480
shows

69
00:02:28,160 --> 00:02:33,359
how challenging it is to add a new

70
00:02:30,480 --> 00:02:36,959
security extension in hardware

71
00:02:33,360 --> 00:02:40,000
but what if rather than having a fixed

72
00:02:36,959 --> 00:02:41,760
security policy built in silicon they

73
00:02:40,000 --> 00:02:43,840
could have a flexible hardware

74
00:02:41,760 --> 00:02:46,720
implementation that could enhance and

75
00:02:43,840 --> 00:02:47,840
import a variety of security policies as

76
00:02:46,720 --> 00:02:50,800
security threats

77
00:02:47,840 --> 00:02:52,160
involved in this way we could gain both

78
00:02:50,800 --> 00:02:55,040
flexibility and

79
00:02:52,160 --> 00:02:56,239
efficiency this is exactly what we are

80
00:02:55,040 --> 00:02:58,560
trying to do

81
00:02:56,239 --> 00:03:00,959
in our proposal of a programmable

82
00:02:58,560 --> 00:03:03,519
hardware monitor called ph month

83
00:03:00,959 --> 00:03:04,080
h1 is a hardware monitor and the full

84
00:03:03,519 --> 00:03:07,680
software

85
00:03:04,080 --> 00:03:08,480
stack around it in our design we'll

86
00:03:07,680 --> 00:03:11,360
leverage

87
00:03:08,480 --> 00:03:12,560
the free and open risk 5 instructions at

88
00:03:11,360 --> 00:03:15,360
architecture

89
00:03:12,560 --> 00:03:15,920
and we interface our hardware monitor

90
00:03:15,360 --> 00:03:18,640
with an

91
00:03:15,920 --> 00:03:20,799
open source risk by rocket processor

92
00:03:18,640 --> 00:03:22,559
then we provide the operating system

93
00:03:20,800 --> 00:03:24,319
support to our hardware and

94
00:03:22,560 --> 00:03:25,840
in addition to that we provide a

95
00:03:24,319 --> 00:03:28,399
software api

96
00:03:25,840 --> 00:03:30,799
to communicate with our hardware when we

97
00:03:28,400 --> 00:03:32,000
have all these layers we leverage our

98
00:03:30,799 --> 00:03:34,879
hardware monitor for

99
00:03:32,000 --> 00:03:37,200
a variety of security use cases this

100
00:03:34,879 --> 00:03:38,239
figure shows the general overview of how

101
00:03:37,200 --> 00:03:41,119
phmon works

102
00:03:38,239 --> 00:03:43,360
as a first step a user or admin

103
00:03:41,120 --> 00:03:43,680
configures a hardware monitor to look

104
00:03:43,360 --> 00:03:46,640
for

105
00:03:43,680 --> 00:03:48,640
specific events for example detecting

106
00:03:46,640 --> 00:03:50,319
all the branch instructions during the

107
00:03:48,640 --> 00:03:54,079
program execution

108
00:03:50,319 --> 00:03:56,560
at runtime phmon monitors the execution

109
00:03:54,080 --> 00:03:58,400
and looks for those specified events

110
00:03:56,560 --> 00:04:01,120
whenever it finds a match then it

111
00:03:58,400 --> 00:04:04,560
performs a follow-up action

112
00:04:01,120 --> 00:04:07,680
for example ali operation the

113
00:04:04,560 --> 00:04:08,560
monitoring events and taking actions is

114
00:04:07,680 --> 00:04:11,760
a continuous

115
00:04:08,560 --> 00:04:14,159
process until pitchman is disabled or

116
00:04:11,760 --> 00:04:17,120
the process is terminated

117
00:04:14,159 --> 00:04:19,120
but what are the events that ph1 can

118
00:04:17,120 --> 00:04:20,000
monitor and the actions that it can

119
00:04:19,120 --> 00:04:22,000
perform

120
00:04:20,000 --> 00:04:24,320
to answer this question let's take a

121
00:04:22,000 --> 00:04:24,960
look at the hardware overview of ph

122
00:04:24,320 --> 00:04:28,000
month

123
00:04:24,960 --> 00:04:31,120
at the hardware level ph1 is responsible

124
00:04:28,000 --> 00:04:31,919
for collecting the instruction traits to

125
00:04:31,120 --> 00:04:34,400
do this

126
00:04:31,919 --> 00:04:36,719
we minimally modify the right back stage

127
00:04:34,400 --> 00:04:38,000
of the pipeline in the risk 5 rocket

128
00:04:36,720 --> 00:04:40,479
course

129
00:04:38,000 --> 00:04:42,000
pipeline so you collect the execution

130
00:04:40,479 --> 00:04:43,680
trade in the form of a comic

131
00:04:42,000 --> 00:04:45,360
blog we send the comments log

132
00:04:43,680 --> 00:04:47,759
information to ph month

133
00:04:45,360 --> 00:04:49,040
the comment log shows what instruction

134
00:04:47,759 --> 00:04:51,040
gets executed

135
00:04:49,040 --> 00:04:52,720
what's the corresponding program counter

136
00:04:51,040 --> 00:04:53,360
what's the next value of the program

137
00:04:52,720 --> 00:04:55,360
counter

138
00:04:53,360 --> 00:04:57,520
and what are the address and dates are

139
00:04:55,360 --> 00:04:59,360
corresponding to this instruction if

140
00:04:57,520 --> 00:05:02,000
for example we have a load store

141
00:04:59,360 --> 00:05:04,080
instruction page one consists of two

142
00:05:02,000 --> 00:05:06,320
main units a number of match units or

143
00:05:04,080 --> 00:05:08,719
mu's and an action in it

144
00:05:06,320 --> 00:05:10,159
each match unit is responsible for

145
00:05:08,720 --> 00:05:13,600
monitoring its specific

146
00:05:10,160 --> 00:05:16,080
event and an event is identified by

147
00:05:13,600 --> 00:05:17,840
specific patterns on each of the commit

148
00:05:16,080 --> 00:05:20,639
log entries

149
00:05:17,840 --> 00:05:22,400
for example a user might be interested

150
00:05:20,639 --> 00:05:25,520
in monitoring

151
00:05:22,400 --> 00:05:27,120
all the call instructions uh in a range

152
00:05:25,520 --> 00:05:29,440
of memory addresses

153
00:05:27,120 --> 00:05:31,120
this can be our events whenever a ph

154
00:05:29,440 --> 00:05:34,560
month finds a match with that

155
00:05:31,120 --> 00:05:36,320
with that events then it performs a

156
00:05:34,560 --> 00:05:39,440
series of follow-up actions

157
00:05:36,320 --> 00:05:41,280
specified by the users these actions

158
00:05:39,440 --> 00:05:43,440
could be in the form of

159
00:05:41,280 --> 00:05:45,758
arithmetic and logical operations

160
00:05:43,440 --> 00:05:47,840
sending a memory request to the l1 data

161
00:05:45,759 --> 00:05:50,080
cache through the rock interface

162
00:05:47,840 --> 00:05:53,280
or triggering an interrupt that will be

163
00:05:50,080 --> 00:05:55,599
handled by the operating system

164
00:05:53,280 --> 00:05:58,318
to be able to use phmon we need to

165
00:05:55,600 --> 00:06:00,479
provide a software api for it

166
00:05:58,319 --> 00:06:02,639
and we do this by leveraging the

167
00:06:00,479 --> 00:06:04,880
rescribe custom instructions

168
00:06:02,639 --> 00:06:07,360
we provide a list of functions that the

169
00:06:04,880 --> 00:06:08,639
user can use to configure page 1 and

170
00:06:07,360 --> 00:06:11,039
communicate with it

171
00:06:08,639 --> 00:06:13,120
for example here you can see a function

172
00:06:11,039 --> 00:06:15,919
that we can use to reset page 1

173
00:06:13,120 --> 00:06:16,479
and then configure a monitoring pattern

174
00:06:15,919 --> 00:06:18,719
on it

175
00:06:16,479 --> 00:06:19,758
here you can see an example of how we

176
00:06:18,720 --> 00:06:22,960
can

177
00:06:19,759 --> 00:06:24,960
configure phm to perform an action more

178
00:06:22,960 --> 00:06:28,638
specifically the action here

179
00:06:24,960 --> 00:06:30,000
is comparing the value of pc destination

180
00:06:28,639 --> 00:06:33,120
and pc source

181
00:06:30,000 --> 00:06:35,199
stored in local registers and then if

182
00:06:33,120 --> 00:06:39,039
these values don't match

183
00:06:35,199 --> 00:06:41,680
we will trigger an interrupt

184
00:06:39,039 --> 00:06:42,880
to enable uh per process monitoring

185
00:06:41,680 --> 00:06:45,600
capability

186
00:06:42,880 --> 00:06:46,080
we have to provide the os support for ph

187
00:06:45,600 --> 00:06:48,479
month

188
00:06:46,080 --> 00:06:50,880
and we do this by modifying the task

189
00:06:48,479 --> 00:06:52,639
struct in the linux kernel to maintain

190
00:06:50,880 --> 00:06:55,039
page 1's information

191
00:06:52,639 --> 00:06:57,680
during context switches in addition to

192
00:06:55,039 --> 00:06:59,680
that whenever ph-1 triggers an interrupt

193
00:06:57,680 --> 00:07:00,960
we delegate the machine level interrupt

194
00:06:59,680 --> 00:07:02,960
to the operating system

195
00:07:00,960 --> 00:07:05,198
and we provide the interrupt handling of

196
00:07:02,960 --> 00:07:07,680
its support by terminating the violating

197
00:07:05,199 --> 00:07:10,560
process

198
00:07:07,680 --> 00:07:12,639
to be able to use ph month for our

199
00:07:10,560 --> 00:07:14,479
security use cases we need to have a

200
00:07:12,639 --> 00:07:16,800
prototype of it

201
00:07:14,479 --> 00:07:17,758
we implement ph-1 at the rocket custom

202
00:07:16,800 --> 00:07:19,840
co-processor

203
00:07:17,759 --> 00:07:22,319
written in chisel hardware description

204
00:07:19,840 --> 00:07:24,560
language and the interface are designed

205
00:07:22,319 --> 00:07:26,680
with the reits 5 rocket core

206
00:07:24,560 --> 00:07:28,800
we modified the linux kernel version

207
00:07:26,680 --> 00:07:32,400
4.15 to provide

208
00:07:28,800 --> 00:07:35,280
that support for phm then we prototype

209
00:07:32,400 --> 00:07:37,758
our full design on the zed board fpga

210
00:07:35,280 --> 00:07:40,080
we leverage the risk fiber tool chain to

211
00:07:37,759 --> 00:07:41,520
cross compile our benchmarks and run

212
00:07:40,080 --> 00:07:44,159
them on our fpga

213
00:07:41,520 --> 00:07:45,919
we have already open source our design

214
00:07:44,160 --> 00:07:47,039
and source code in this github

215
00:07:45,919 --> 00:07:48,878
repository

216
00:07:47,039 --> 00:07:50,800
so please take a look at our github

217
00:07:48,879 --> 00:07:53,039
repository if you're interested in our

218
00:07:50,800 --> 00:07:53,039
work

219
00:07:53,680 --> 00:07:59,759
phmon is versatile and easy to adopt

220
00:07:56,960 --> 00:08:00,799
for various use cases and in our paper

221
00:07:59,759 --> 00:08:03,919
we show this

222
00:08:00,800 --> 00:08:06,240
using four different use cases

223
00:08:03,919 --> 00:08:07,039
a shadow stack a hardware accelerated

224
00:08:06,240 --> 00:08:09,520
buzzing engine

225
00:08:07,039 --> 00:08:11,680
preventing information liquid and watch

226
00:08:09,520 --> 00:08:14,080
points and accelerator debuggers

227
00:08:11,680 --> 00:08:15,680
but because of the limited tile today

228
00:08:14,080 --> 00:08:17,280
i'm only going to talk about the shadow

229
00:08:15,680 --> 00:08:19,360
stack use case and the hardware

230
00:08:17,280 --> 00:08:21,359
accelerated fuzzing engine

231
00:08:19,360 --> 00:08:23,919
please refer to our paper for more

232
00:08:21,360 --> 00:08:27,120
information about all of our use cases

233
00:08:23,919 --> 00:08:29,280
and our full evaluation result let's

234
00:08:27,120 --> 00:08:31,840
start with the shadow stack uk

235
00:08:29,280 --> 00:08:33,838
as you know shadow sky can be used to

236
00:08:31,840 --> 00:08:35,838
prevent return oriented programming

237
00:08:33,839 --> 00:08:37,839
attack and we can simply

238
00:08:35,839 --> 00:08:39,760
program ph month to act as a shadow

239
00:08:37,839 --> 00:08:41,760
stack using two match matches

240
00:08:39,760 --> 00:08:43,919
one matching you can monitor the call

241
00:08:41,760 --> 00:08:45,920
instructions and another machine it can

242
00:08:43,919 --> 00:08:48,240
monitor return instructions

243
00:08:45,920 --> 00:08:50,079
then both of these matchings can read

244
00:08:48,240 --> 00:08:52,399
and write into a shared memory space

245
00:08:50,080 --> 00:08:55,040
allocated by the operating system

246
00:08:52,399 --> 00:08:56,399
but why is it interesting to have a ph-1

247
00:08:55,040 --> 00:08:59,519
based shadow stack

248
00:08:56,399 --> 00:09:02,880
so first of all our design is flexible

249
00:08:59,519 --> 00:09:05,360
and it's not fixed in silicon and second

250
00:09:02,880 --> 00:09:06,399
we can provide a secure shadow stack

251
00:09:05,360 --> 00:09:09,040
meaning that

252
00:09:06,399 --> 00:09:10,720
we can guarantee the integrity of the

253
00:09:09,040 --> 00:09:13,760
shadow stack memory

254
00:09:10,720 --> 00:09:14,800
to do so uh we can leverage another

255
00:09:13,760 --> 00:09:17,680
match unit

256
00:09:14,800 --> 00:09:18,719
to monitor the shadow stack memory

257
00:09:17,680 --> 00:09:21,680
region

258
00:09:18,720 --> 00:09:22,959
and to make sure that phmon is the only

259
00:09:21,680 --> 00:09:25,519
one who can read

260
00:09:22,959 --> 00:09:26,399
and write into this memory region and

261
00:09:25,519 --> 00:09:28,959
this way

262
00:09:26,399 --> 00:09:31,920
prevents the shadow stack memory from

263
00:09:28,959 --> 00:09:31,920
getting corrupted

264
00:09:32,240 --> 00:09:36,160
and on top of all of these our

265
00:09:34,240 --> 00:09:37,120
implementation is efficient we have

266
00:09:36,160 --> 00:09:39,360
evaluated

267
00:09:37,120 --> 00:09:41,040
our ph 1 based shadow site on a range of

268
00:09:39,360 --> 00:09:42,880
spec 2000 2006

269
00:09:41,040 --> 00:09:44,640
and mi bench benchmark and an average

270
00:09:42,880 --> 00:09:46,000
page man has less than one percent

271
00:09:44,640 --> 00:09:48,000
performance overhead

272
00:09:46,000 --> 00:09:50,240
as shown in this plot the performance

273
00:09:48,000 --> 00:09:52,000
overhead of ph man over a range of spec

274
00:09:50,240 --> 00:09:55,040
2006 benchmark

275
00:09:52,000 --> 00:09:57,680
is only 1.2 percent on average

276
00:09:55,040 --> 00:09:59,839
another use case for ph 1 is a hardware

277
00:09:57,680 --> 00:10:02,239
accelerated plotting engine

278
00:09:59,839 --> 00:10:04,880
we looked into american for the loop or

279
00:10:02,240 --> 00:10:07,839
afl which is a state-of-the-art

280
00:10:04,880 --> 00:10:10,000
further consisting of two main units a

281
00:10:07,839 --> 00:10:11,920
fuzzing logic and an instrumentation

282
00:10:10,000 --> 00:10:12,800
suit whenever the source code is not

283
00:10:11,920 --> 00:10:16,399
available

284
00:10:12,800 --> 00:10:19,519
afl relies on chemo for instrumentation

285
00:10:16,399 --> 00:10:21,839
or more specifically chemo

286
00:10:19,519 --> 00:10:23,279
collects the branch coverage information

287
00:10:21,839 --> 00:10:26,160
during the child process

288
00:10:23,279 --> 00:10:26,640
execution and updates a shared memory

289
00:10:26,160 --> 00:10:28,959
region

290
00:10:26,640 --> 00:10:29,760
accordingly then afl reads this

291
00:10:28,959 --> 00:10:32,479
information

292
00:10:29,760 --> 00:10:33,279
and decides about the next fuzzing step

293
00:10:32,480 --> 00:10:36,880
but because

294
00:10:33,279 --> 00:10:39,439
uh chemo is a software based

295
00:10:36,880 --> 00:10:40,880
emulator it incurs considerable

296
00:10:39,440 --> 00:10:43,200
performance overhead

297
00:10:40,880 --> 00:10:44,399
that is exactly where ph monk comes into

298
00:10:43,200 --> 00:10:47,920
the picture

299
00:10:44,399 --> 00:10:49,920
we can replace chemo with ph-1 and ph-1

300
00:10:47,920 --> 00:10:50,800
can monitor the execution of the child

301
00:10:49,920 --> 00:10:53,599
process

302
00:10:50,800 --> 00:10:56,000
and collect the same branch coverage

303
00:10:53,600 --> 00:10:57,440
information and write the result into a

304
00:10:56,000 --> 00:11:00,000
shared memory region

305
00:10:57,440 --> 00:11:01,519
but because ph month is a hardware based

306
00:11:00,000 --> 00:11:04,560
implementation

307
00:11:01,519 --> 00:11:07,360
it can improve the performance of afl as

308
00:11:04,560 --> 00:11:09,599
a result shows here

309
00:11:07,360 --> 00:11:10,720
over a range of benchmarks listed on the

310
00:11:09,600 --> 00:11:14,399
afl website

311
00:11:10,720 --> 00:11:17,600
phmon improves the performance

312
00:11:14,399 --> 00:11:21,200
over the baseline chemo-based afl

313
00:11:17,600 --> 00:11:22,079
by 16 times while our hardware only has

314
00:11:21,200 --> 00:11:24,480
5

315
00:11:22,079 --> 00:11:25,760
power overhead and around 13 percent

316
00:11:24,480 --> 00:11:28,480
area overhead

317
00:11:25,760 --> 00:11:31,279
with this example i'd like to finish my

318
00:11:28,480 --> 00:11:34,160
presentation to conclude in our paper

319
00:11:31,279 --> 00:11:35,600
we propose a hardware monitor with the

320
00:11:34,160 --> 00:11:38,640
full software stack

321
00:11:35,600 --> 00:11:41,120
ph month is versatile and easy to adopt

322
00:11:38,640 --> 00:11:42,160
we have a full fpga prototype of our

323
00:11:41,120 --> 00:11:44,560
design

324
00:11:42,160 --> 00:11:46,079
our paper is artifact evaluated we have

325
00:11:44,560 --> 00:11:49,359
open source our

326
00:11:46,079 --> 00:11:51,359
code on a github repository and thanks a

327
00:11:49,360 --> 00:11:52,720
lot for your attention if you have any

328
00:11:51,360 --> 00:11:57,839
further questions

329
00:11:52,720 --> 00:11:57,839
please send me an email thank you

