1
00:00:08,960 --> 00:00:13,440
hello everyone welcome to this talk

2
00:00:11,360 --> 00:00:14,879
today we will talk about email spoofing

3
00:00:13,440 --> 00:00:16,880
attacks

4
00:00:14,880 --> 00:00:19,119
email is widely used in our daily life

5
00:00:16,880 --> 00:00:21,038
and is a frequently used attack vector

6
00:00:19,119 --> 00:00:23,119
for various attacks

7
00:00:21,039 --> 00:00:25,119
in the past years we have seen numerous

8
00:00:23,119 --> 00:00:26,880
attacks using emails moving and

9
00:00:25,119 --> 00:00:28,400
phishing attacks to compromise

10
00:00:26,880 --> 00:00:31,038
enterprise networks

11
00:00:28,400 --> 00:00:32,159
or government official accounts to

12
00:00:31,039 --> 00:00:34,160
address this problem

13
00:00:32,159 --> 00:00:36,160
modern email services and websites

14
00:00:34,160 --> 00:00:36,959
deploy similar authentication particles

15
00:00:36,160 --> 00:00:39,839
like

16
00:00:36,960 --> 00:00:41,440
spf dkm and dmac to prevent email

17
00:00:39,840 --> 00:00:42,960
forgery

18
00:00:41,440 --> 00:00:45,360
in this work we study those

19
00:00:42,960 --> 00:00:48,879
authentication particles to understand

20
00:00:45,360 --> 00:00:51,760
whether they can really work as expected

21
00:00:48,879 --> 00:00:53,760
i'm jin jintran a postdoc at legacy this

22
00:00:51,760 --> 00:00:54,320
is a joint work with my supervisor vin

23
00:00:53,760 --> 00:00:59,039
paxton

24
00:00:54,320 --> 00:01:01,520
and the jin jiang at f5

25
00:00:59,039 --> 00:01:03,440
first a quick question when you receive

26
00:01:01,520 --> 00:01:04,720
an email how do you tell whether it's

27
00:01:03,440 --> 00:01:06,240
sufficient email

28
00:01:04,720 --> 00:01:08,560
normally you would check the from

29
00:01:06,240 --> 00:01:11,119
address displayed in the email client

30
00:01:08,560 --> 00:01:13,360
if the form address is legitimate we

31
00:01:11,119 --> 00:01:15,759
believe is not a patient email

32
00:01:13,360 --> 00:01:16,960
if we use email services like gmail we

33
00:01:15,759 --> 00:01:18,880
can also check

34
00:01:16,960 --> 00:01:20,720
additional security indicators like

35
00:01:18,880 --> 00:01:22,880
mailed by or signed by to verify the

36
00:01:20,720 --> 00:01:25,039
email system

37
00:01:22,880 --> 00:01:26,960
in this talk we will present a number of

38
00:01:25,040 --> 00:01:28,159
new techniques to spoof those security

39
00:01:26,960 --> 00:01:30,240
fields

40
00:01:28,159 --> 00:01:32,400
here is a smoothing test i did several

41
00:01:30,240 --> 00:01:32,720
months ago gmail shows that the gmail

42
00:01:32,400 --> 00:01:36,159
was

43
00:01:32,720 --> 00:01:38,240
sent by security at facebook.com

44
00:01:36,159 --> 00:01:39,680
and verify the email was signed by

45
00:01:38,240 --> 00:01:42,640
facebook.com

46
00:01:39,680 --> 00:01:43,200
but in fact it was moved by me how could

47
00:01:42,640 --> 00:01:46,000
it happen

48
00:01:43,200 --> 00:01:49,280
why gmail didn't reject this message we

49
00:01:46,000 --> 00:01:51,600
will answer those questions in this talk

50
00:01:49,280 --> 00:01:53,600
to understand that this attack we need

51
00:01:51,600 --> 00:01:54,640
to load two important concepts in the

52
00:01:53,600 --> 00:01:56,960
email protocol

53
00:01:54,640 --> 00:01:59,040
sender and authentication let's look at

54
00:01:56,960 --> 00:02:00,960
the first one

55
00:01:59,040 --> 00:02:03,600
here is the email example we often see

56
00:02:00,960 --> 00:02:05,839
in our day life who is the email sender

57
00:02:03,600 --> 00:02:07,919
actually the from address we often see

58
00:02:05,840 --> 00:02:09,520
only represents the user who who

59
00:02:07,920 --> 00:02:11,440
composed the message

60
00:02:09,520 --> 00:02:13,200
there is another invariable part called

61
00:02:11,440 --> 00:02:15,200
smtp envelope

62
00:02:13,200 --> 00:02:16,640
the hello and the mail from address in

63
00:02:15,200 --> 00:02:18,480
the smt envelope

64
00:02:16,640 --> 00:02:19,839
represents the user who transmits the

65
00:02:18,480 --> 00:02:21,920
message

66
00:02:19,840 --> 00:02:23,440
this design is similar to the mail in

67
00:02:21,920 --> 00:02:24,000
our real life the address in the

68
00:02:23,440 --> 00:02:25,680
envelope

69
00:02:24,000 --> 00:02:27,599
and addressing the message data can be

70
00:02:25,680 --> 00:02:30,000
different

71
00:02:27,599 --> 00:02:32,480
when smtp is original design it has a

72
00:02:30,000 --> 00:02:34,720
low building authentication mechanisms

73
00:02:32,480 --> 00:02:38,160
anyone on the internet can claim others

74
00:02:34,720 --> 00:02:40,359
address in hello mail from or from field

75
00:02:38,160 --> 00:02:42,879
for example an attacker can claim his

76
00:02:40,360 --> 00:02:45,200
alice.com and send a spoofing email to

77
00:02:42,879 --> 00:02:46,799
bob's receiving service directly

78
00:02:45,200 --> 00:02:51,518
the receiving service cannot hear

79
00:02:46,800 --> 00:02:53,680
whether the gmail sender is ready alice

80
00:02:51,519 --> 00:02:55,360
to address this problem three sender

81
00:02:53,680 --> 00:02:59,440
authentication particles

82
00:02:55,360 --> 00:03:01,440
spf dkm and dmarc are developed

83
00:02:59,440 --> 00:03:03,280
let's quickly look at how those three

84
00:03:01,440 --> 00:03:06,079
particles work

85
00:03:03,280 --> 00:03:08,480
spf use ip address to authenticate the

86
00:03:06,080 --> 00:03:10,400
sender it works in three steps

87
00:03:08,480 --> 00:03:11,679
first the sending service publish

88
00:03:10,400 --> 00:03:14,640
authorize the ip list

89
00:03:11,680 --> 00:03:15,760
in dns record then the receiving service

90
00:03:14,640 --> 00:03:18,799
will require the domain

91
00:03:15,760 --> 00:03:21,760
hello and mail from to obtain that list

92
00:03:18,800 --> 00:03:23,120
then it will check if the sender's ip

93
00:03:21,760 --> 00:03:26,319
matched with the iplist

94
00:03:23,120 --> 00:03:28,720
if yes spl passed so spf insurance that

95
00:03:26,319 --> 00:03:30,640
only authorized ip can send an email for

96
00:03:28,720 --> 00:03:32,720
this domain

97
00:03:30,640 --> 00:03:34,559
dqm use public key cryptography to

98
00:03:32,720 --> 00:03:35,680
authenticate the sender it works in four

99
00:03:34,560 --> 00:03:37,920
steps

100
00:03:35,680 --> 00:03:39,760
first the sending service publish public

101
00:03:37,920 --> 00:03:42,399
key in dns record

102
00:03:39,760 --> 00:03:43,920
then when sending an email it will sign

103
00:03:42,400 --> 00:03:45,920
the message with the corresponding

104
00:03:43,920 --> 00:03:48,559
private key to generate a dcam signature

105
00:03:45,920 --> 00:03:51,359
header and attach it to the message

106
00:03:48,560 --> 00:03:52,720
when receiving the email this receiving

107
00:03:51,360 --> 00:03:54,319
service will query as

108
00:03:52,720 --> 00:03:56,000
the domain creator d to obtain the

109
00:03:54,319 --> 00:03:58,238
public key

110
00:03:56,000 --> 00:03:59,120
s and id are extracted from the dqm

111
00:03:58,239 --> 00:04:02,159
signature header

112
00:03:59,120 --> 00:04:03,920
domain key is a constant the

113
00:04:02,159 --> 00:04:05,679
inter the receiving service will

114
00:04:03,920 --> 00:04:07,839
validate the dqm signature with

115
00:04:05,680 --> 00:04:08,720
obtain the public key if the signature

116
00:04:07,840 --> 00:04:12,159
is valid

117
00:04:08,720 --> 00:04:14,720
the email pass becomes authentication

118
00:04:12,159 --> 00:04:16,399
so dqm ensures that only the person who

119
00:04:14,720 --> 00:04:19,040
loads the private key can send an email

120
00:04:16,399 --> 00:04:22,000
for this domain

121
00:04:19,040 --> 00:04:23,759
the problem of spf and dkm is that

122
00:04:22,000 --> 00:04:25,520
neither of them validates the from

123
00:04:23,759 --> 00:04:26,080
address that is displayed to the end

124
00:04:25,520 --> 00:04:28,960
user

125
00:04:26,080 --> 00:04:29,758
which means even if an email passed both

126
00:04:28,960 --> 00:04:32,719
spf and

127
00:04:29,759 --> 00:04:34,479
dkm authentication the from address can

128
00:04:32,720 --> 00:04:37,440
still be spoofed

129
00:04:34,479 --> 00:04:39,360
demag is designed to fix this problem

130
00:04:37,440 --> 00:04:40,160
when the sending service deploy demand

131
00:04:39,360 --> 00:04:41,840
policy

132
00:04:40,160 --> 00:04:43,840
the receiving service must perform

133
00:04:41,840 --> 00:04:46,239
identifier alignment test

134
00:04:43,840 --> 00:04:48,799
to check if the from the domain match

135
00:04:46,240 --> 00:04:51,759
spf or tcam verified on me

136
00:04:48,800 --> 00:04:54,240
match means exactly match or has the

137
00:04:51,759 --> 00:04:56,479
same registered domain

138
00:04:54,240 --> 00:04:57,360
another important point is that dmacc

139
00:04:56,479 --> 00:05:00,320
only requires

140
00:04:57,360 --> 00:05:01,680
either spf or dcam to show a positive

141
00:05:00,320 --> 00:05:05,120
result

142
00:05:01,680 --> 00:05:07,360
if both spf and dcam fails

143
00:05:05,120 --> 00:05:09,840
demand fails then the receiving service

144
00:05:07,360 --> 00:05:11,600
will enforce the policies specified by

145
00:05:09,840 --> 00:05:13,119
the sending service such as rejecting

146
00:05:11,600 --> 00:05:14,800
the email

147
00:05:13,120 --> 00:05:16,880
here is the overview of the email

148
00:05:14,800 --> 00:05:18,240
authentication flow when the receiving

149
00:05:16,880 --> 00:05:20,639
service receives an email

150
00:05:18,240 --> 00:05:23,360
spf component to verify hello and well

151
00:05:20,639 --> 00:05:25,360
from identifier dkm component to verify

152
00:05:23,360 --> 00:05:26,639
the cam signature header demand

153
00:05:25,360 --> 00:05:30,479
component

154
00:05:26,639 --> 00:05:31,440
verify whether the spf or dcm verify

155
00:05:30,479 --> 00:05:34,880
domain

156
00:05:31,440 --> 00:05:35,759
align with the from header if the email

157
00:05:34,880 --> 00:05:38,719
pass

158
00:05:35,759 --> 00:05:41,440
either spf or dcam authentication and

159
00:05:38,720 --> 00:05:43,199
the from header pass the alignment test

160
00:05:41,440 --> 00:05:45,280
then the email pass the demag

161
00:05:43,199 --> 00:05:48,720
authentication and is then delivered to

162
00:05:45,280 --> 00:05:52,799
publish mua so the flow sounds good

163
00:05:48,720 --> 00:05:55,039
what could possibly go wrong

164
00:05:52,800 --> 00:05:57,440
we found 18 attacks to bypass the

165
00:05:55,039 --> 00:06:00,000
authentication

166
00:05:57,440 --> 00:06:02,160
the key idea of our task our attacks

167
00:06:00,000 --> 00:06:03,680
exploits inconsistencies between

168
00:06:02,160 --> 00:06:06,479
different components

169
00:06:03,680 --> 00:06:08,800
as shown in the picture a um sent by

170
00:06:06,479 --> 00:06:10,880
alice need to be processed by at least

171
00:06:08,800 --> 00:06:11,919
six different components before reaching

172
00:06:10,880 --> 00:06:13,919
bob

173
00:06:11,919 --> 00:06:15,758
those components are often built by

174
00:06:13,919 --> 00:06:16,479
different developers or even different

175
00:06:15,759 --> 00:06:19,759
companies

176
00:06:16,479 --> 00:06:22,960
and have a wide range of inconsistencies

177
00:06:19,759 --> 00:06:24,080
which can be exploited by attackers an

178
00:06:22,960 --> 00:06:25,680
attacker can craft

179
00:06:24,080 --> 00:06:27,758
ambiguous message with multiple

180
00:06:25,680 --> 00:06:29,680
identifiers component a

181
00:06:27,759 --> 00:06:31,440
may interpret one identifier but the

182
00:06:29,680 --> 00:06:32,639
component b will interpret another

183
00:06:31,440 --> 00:06:35,680
identifier

184
00:06:32,639 --> 00:06:37,759
this can cause an exploitable

185
00:06:35,680 --> 00:06:40,800
semantic ambiguity and due to

186
00:06:37,759 --> 00:06:43,280
authentication bypass

187
00:06:40,800 --> 00:06:45,440
in the following talk we will talk about

188
00:06:43,280 --> 00:06:49,039
several examples to illustrate

189
00:06:45,440 --> 00:06:51,840
the problem in detail the first example

190
00:06:49,039 --> 00:06:53,120
exploits inconsistencies between dkm and

191
00:06:51,840 --> 00:06:55,039
dns

192
00:06:53,120 --> 00:06:56,240
this is the bug we demonstrated at the

193
00:06:55,039 --> 00:06:58,639
beginning of this talk

194
00:06:56,240 --> 00:06:59,599
here is how the attack works first

195
00:06:58,639 --> 00:07:01,520
attackers

196
00:06:59,599 --> 00:07:03,520
construct a smooth message and assign

197
00:07:01,520 --> 00:07:05,599
the message with his private key to

198
00:07:03,520 --> 00:07:07,840
generate the ticam signature header

199
00:07:05,599 --> 00:07:10,000
in the dcm signature he specifies the

200
00:07:07,840 --> 00:07:13,520
dtag to be bank.com

201
00:07:10,000 --> 00:07:14,080
and has tagged to b to include a newer

202
00:07:13,520 --> 00:07:17,919
character

203
00:07:14,080 --> 00:07:19,520
when receiving the gmail the receiving

204
00:07:17,919 --> 00:07:20,960
the dcam component in the receiving

205
00:07:19,520 --> 00:07:22,960
service will query

206
00:07:20,960 --> 00:07:24,960
as the domain category to obtain the

207
00:07:22,960 --> 00:07:27,359
public key

208
00:07:24,960 --> 00:07:29,680
but when the dns component resolves the

209
00:07:27,360 --> 00:07:31,039
domain it takes the neural character as

210
00:07:29,680 --> 00:07:33,199
a screen terminator

211
00:07:31,039 --> 00:07:35,520
so the public key is actually obtained

212
00:07:33,199 --> 00:07:39,120
from attack.com

213
00:07:35,520 --> 00:07:41,599
so in this case dkm will pass because

214
00:07:39,120 --> 00:07:45,199
the dkm component use attacker's public

215
00:07:41,599 --> 00:07:47,440
key to verify attacker signed message

216
00:07:45,199 --> 00:07:49,199
demac will pass because the detached

217
00:07:47,440 --> 00:07:51,599
domain is equal to the from header

218
00:07:49,199 --> 00:07:51,599
domain

219
00:07:51,759 --> 00:07:55,039
the second example exploits

220
00:07:53,520 --> 00:07:58,240
inconsistencies between

221
00:07:55,039 --> 00:08:00,000
receiving service and email clients

222
00:07:58,240 --> 00:08:02,240
to make to make receiving service

223
00:08:00,000 --> 00:08:05,039
authenticate one identifier but

224
00:08:02,240 --> 00:08:06,479
email client display another identifier

225
00:08:05,039 --> 00:08:08,960
to the end user

226
00:08:06,479 --> 00:08:09,840
for example an attacker can craft a

227
00:08:08,960 --> 00:08:12,719
message with

228
00:08:09,840 --> 00:08:15,198
two from headers the receiving server

229
00:08:12,720 --> 00:08:18,240
recognize the first from header

230
00:08:15,199 --> 00:08:20,400
and pass the demark authentication but

231
00:08:18,240 --> 00:08:23,680
mua display the second frame header

232
00:08:20,400 --> 00:08:23,679
which is unverified

233
00:08:23,919 --> 00:08:27,359
we can also insert a white space around

234
00:08:26,080 --> 00:08:29,599
the front header to create

235
00:08:27,360 --> 00:08:30,479
different variants different

236
00:08:29,599 --> 00:08:32,718
implementations

237
00:08:30,479 --> 00:08:34,718
may or may not recognize the white space

238
00:08:32,719 --> 00:08:37,519
for example in this case

239
00:08:34,719 --> 00:08:39,039
both receiving service and mua prefer to

240
00:08:37,519 --> 00:08:41,039
the first header

241
00:08:39,039 --> 00:08:42,640
the receiving service can recognize the

242
00:08:41,039 --> 00:08:45,439
49 from header

243
00:08:42,640 --> 00:08:47,040
and verify attack.com but the email

244
00:08:45,440 --> 00:08:50,240
client cannot recognize it

245
00:08:47,040 --> 00:08:50,640
and take administ at bank.com as the

246
00:08:50,240 --> 00:08:54,560
first

247
00:08:50,640 --> 00:08:57,519
valid from header another example is

248
00:08:54,560 --> 00:08:59,279
from alternative headers normally only

249
00:08:57,519 --> 00:09:00,880
from header is used for email

250
00:08:59,279 --> 00:09:03,920
authentication and display

251
00:09:00,880 --> 00:09:04,399
but if an attacker create a message with

252
00:09:03,920 --> 00:09:06,880
no

253
00:09:04,399 --> 00:09:08,240
from header or an unrecognized from

254
00:09:06,880 --> 00:09:10,959
header

255
00:09:08,240 --> 00:09:11,760
some email client will display sender or

256
00:09:10,959 --> 00:09:14,319
recent

257
00:09:11,760 --> 00:09:16,480
from the header value as the message

258
00:09:14,320 --> 00:09:19,600
sender

259
00:09:16,480 --> 00:09:20,240
even if there is only one header in the

260
00:09:19,600 --> 00:09:22,399
message

261
00:09:20,240 --> 00:09:23,760
extracting a consistent email address

262
00:09:22,399 --> 00:09:26,800
from that header is an

263
00:09:23,760 --> 00:09:30,560
another challenge because of the

264
00:09:26,800 --> 00:09:34,560
complex syntax of from headers

265
00:09:30,560 --> 00:09:37,760
here is a example of a valid form header

266
00:09:34,560 --> 00:09:41,518
which one is the real address actually

267
00:09:37,760 --> 00:09:43,920
owning a at a.com is the real address

268
00:09:41,519 --> 00:09:45,279
secure bank is the display name the

269
00:09:43,920 --> 00:09:48,479
content in the parenthesis

270
00:09:45,279 --> 00:09:51,040
indicates a comment at

271
00:09:48,480 --> 00:09:51,839
c.com com at c at the d dot com

272
00:09:51,040 --> 00:09:55,439
indicates

273
00:09:51,839 --> 00:09:56,880
a result portion apart from that a from

274
00:09:55,440 --> 00:10:00,320
header can support

275
00:09:56,880 --> 00:10:04,079
multiple address list base 16 encoding

276
00:10:00,320 --> 00:10:06,880
coded pair unicorn and other features

277
00:10:04,079 --> 00:10:07,359
the complexity of from header enable us

278
00:10:06,880 --> 00:10:09,920
to find

279
00:10:07,360 --> 00:10:11,200
a lot of inconsistencies for example for

280
00:10:09,920 --> 00:10:13,040
multiple address lists

281
00:10:11,200 --> 00:10:15,200
some implementations may take the first

282
00:10:13,040 --> 00:10:16,719
address some implementations may take

283
00:10:15,200 --> 00:10:18,800
the second one

284
00:10:16,720 --> 00:10:20,480
for address without portion some

285
00:10:18,800 --> 00:10:22,800
implementations can

286
00:10:20,480 --> 00:10:25,200
correctly identify the real address but

287
00:10:22,800 --> 00:10:27,680
some implementations don't

288
00:10:25,200 --> 00:10:29,839
don't support this feature and recognize

289
00:10:27,680 --> 00:10:32,079
a different address

290
00:10:29,839 --> 00:10:34,320
for encoded address some email client

291
00:10:32,079 --> 00:10:36,399
will display the decoded address but

292
00:10:34,320 --> 00:10:39,839
somewhere servers don't support encoding

293
00:10:36,399 --> 00:10:39,839
and recognize another address

294
00:10:40,079 --> 00:10:43,680
different implementations may also have

295
00:10:42,240 --> 00:10:47,519
different passing behaviors

296
00:10:43,680 --> 00:10:50,000
causing a lot of inconsistencies

297
00:10:47,519 --> 00:10:50,640
those are just several examples we

298
00:10:50,000 --> 00:10:53,279
tested

299
00:10:50,640 --> 00:10:54,560
10 email services and the 19 email

300
00:10:53,279 --> 00:10:57,360
clients

301
00:10:54,560 --> 00:10:59,518
and found 43 different compilations that

302
00:10:57,360 --> 00:11:01,600
could be exploited

303
00:10:59,519 --> 00:11:03,279
because of the limitation of blackboard

304
00:11:01,600 --> 00:11:07,440
stating what we found

305
00:11:03,279 --> 00:11:07,439
is only a subset of the problem

306
00:11:08,000 --> 00:11:12,000
we can further support dkm signatures to

307
00:11:10,640 --> 00:11:14,720
make the smoothing email

308
00:11:12,000 --> 00:11:16,000
more deceptive those attacks exploits

309
00:11:14,720 --> 00:11:18,560
inconsistencies

310
00:11:16,000 --> 00:11:20,160
between other combat compilations in the

311
00:11:18,560 --> 00:11:22,880
email processing chain

312
00:11:20,160 --> 00:11:24,719
you can read details about these attacks

313
00:11:22,880 --> 00:11:28,160
in the paper

314
00:11:24,720 --> 00:11:30,320
okay the root cause of the problem

315
00:11:28,160 --> 00:11:31,360
is inconsistencies between different

316
00:11:30,320 --> 00:11:34,640
components

317
00:11:31,360 --> 00:11:37,040
so to mitigate those attacks we suggest

318
00:11:34,640 --> 00:11:38,720
email implementations should be strict

319
00:11:37,040 --> 00:11:41,599
in what you accept

320
00:11:38,720 --> 00:11:42,399
rejecting any ambiguous cases that can

321
00:11:41,600 --> 00:11:46,000
cause

322
00:11:42,399 --> 00:11:49,839
inconsistencies at a specification level

323
00:11:46,000 --> 00:11:52,399
we should define simple message syntax

324
00:11:49,839 --> 00:11:54,320
and avoid multi-party processing for

325
00:11:52,399 --> 00:11:57,440
email clients we should

326
00:11:54,320 --> 00:11:59,360
improve user interface display currently

327
00:11:57,440 --> 00:12:01,920
most of the email clients we tested

328
00:11:59,360 --> 00:12:04,720
don't display authentication results dis

329
00:12:01,920 --> 00:12:06,000
explicitly which is difficult for the

330
00:12:04,720 --> 00:12:09,440
end users

331
00:12:06,000 --> 00:12:12,320
to check the authentication status

332
00:12:09,440 --> 00:12:14,560
for the end users we suggest don't

333
00:12:12,320 --> 00:12:15,839
blindly trust the email sender displayed

334
00:12:14,560 --> 00:12:18,239
in the email client

335
00:12:15,839 --> 00:12:19,760
and use end-to-end authentication like

336
00:12:18,240 --> 00:12:23,440
pgp

337
00:12:19,760 --> 00:12:26,800
for verification also ppp

338
00:12:23,440 --> 00:12:29,680
may have may also have passive

339
00:12:26,800 --> 00:12:30,479
passing ambiguities hopefully it will be

340
00:12:29,680 --> 00:12:33,680
better than

341
00:12:30,480 --> 00:12:36,320
this one we collected

342
00:12:33,680 --> 00:12:37,839
all the test cases and put them in a

343
00:12:36,320 --> 00:12:40,399
tool we

344
00:12:37,839 --> 00:12:41,440
on github for those interested to play

345
00:12:40,399 --> 00:12:44,639
around

346
00:12:41,440 --> 00:12:44,639
please check this link

347
00:12:44,720 --> 00:12:53,839
okay that's all about my presentation

348
00:12:55,920 --> 00:12:58,000
you

