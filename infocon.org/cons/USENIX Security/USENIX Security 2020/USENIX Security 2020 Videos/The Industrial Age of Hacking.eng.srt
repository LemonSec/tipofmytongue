1
00:00:08,480 --> 00:00:11,679
hello and welcome

2
00:00:09,679 --> 00:00:13,040
i'm very excited to share with you some

3
00:00:11,679 --> 00:00:15,519
research we have named

4
00:00:13,040 --> 00:00:16,400
the industrial age of hacking i'm tim

5
00:00:15,519 --> 00:00:18,640
nasco

6
00:00:16,400 --> 00:00:19,919
on behalf of my team i hope you enjoy

7
00:00:18,640 --> 00:00:22,560
the show

8
00:00:19,920 --> 00:00:24,640
why are we here today imagine a team of

9
00:00:22,560 --> 00:00:25,359
hackers responsible for finding bugs in

10
00:00:24,640 --> 00:00:27,359
software

11
00:00:25,359 --> 00:00:29,679
and possibly writing exploits to

12
00:00:27,359 --> 00:00:31,840
demonstrate the gravity of those bugs

13
00:00:29,679 --> 00:00:33,680
what skills do these hackers require to

14
00:00:31,840 --> 00:00:35,760
be successful

15
00:00:33,680 --> 00:00:37,360
on this slide i've laid out some skills

16
00:00:35,760 --> 00:00:38,160
i've personally found helpful in my

17
00:00:37,360 --> 00:00:40,000
career

18
00:00:38,160 --> 00:00:42,480
on the top left there is a picture of a

19
00:00:40,000 --> 00:00:43,520
bug as experience in bug finding is

20
00:00:42,480 --> 00:00:46,000
quite helpful

21
00:00:43,520 --> 00:00:47,520
underneath the intel logo because

22
00:00:46,000 --> 00:00:50,399
knowledge of assembly languages

23
00:00:47,520 --> 00:00:52,079
like x86 will certainly help a reverse

24
00:00:50,399 --> 00:00:53,680
engineer

25
00:00:52,079 --> 00:00:55,440
knowledge of the elf header structure

26
00:00:53,680 --> 00:00:57,760
might also be relevant

27
00:00:55,440 --> 00:00:59,599
on the right side experience with the c

28
00:00:57,760 --> 00:01:00,239
programming language helps when code

29
00:00:59,600 --> 00:01:02,800
auditing

30
00:01:00,239 --> 00:01:05,039
and the cmake logo appears because

31
00:01:02,800 --> 00:01:09,360
understanding a program's build process

32
00:01:05,040 --> 00:01:12,080
can often be a prerequisite to analysis

33
00:01:09,360 --> 00:01:14,000
so does everyone on the team need to be

34
00:01:12,080 --> 00:01:15,759
an expert on all of these things

35
00:01:14,000 --> 00:01:17,040
does everyone need these skills to

36
00:01:15,759 --> 00:01:20,320
contribute

37
00:01:17,040 --> 00:01:22,320
on to a bit of history in 2016 darpa

38
00:01:20,320 --> 00:01:24,000
hosted a competition named the cyber

39
00:01:22,320 --> 00:01:26,000
grand challenge

40
00:01:24,000 --> 00:01:28,240
during this event autonomous systems

41
00:01:26,000 --> 00:01:30,400
competed in capture the flag

42
00:01:28,240 --> 00:01:32,240
computers attacked competitors services

43
00:01:30,400 --> 00:01:35,200
while defending their own

44
00:01:32,240 --> 00:01:36,960
the winner mayhem by for all secure

45
00:01:35,200 --> 00:01:39,680
demonstrated how far

46
00:01:36,960 --> 00:01:41,919
automated cyber reasoning advanced this

47
00:01:39,680 --> 00:01:43,840
competition however was a bit contrived

48
00:01:41,920 --> 00:01:45,840
as services ran on the decree

49
00:01:43,840 --> 00:01:48,479
architecture which was specifically

50
00:01:45,840 --> 00:01:50,560
designed to be simple

51
00:01:48,479 --> 00:01:52,640
more work was required to apply some of

52
00:01:50,560 --> 00:01:55,759
these tools and methods to modern

53
00:01:52,640 --> 00:01:56,479
complex software we hypothesize this

54
00:01:55,759 --> 00:01:58,880
automation

55
00:01:56,479 --> 00:02:00,240
could advance hacking teams composed of

56
00:01:58,880 --> 00:02:02,880
varying skill

57
00:02:00,240 --> 00:02:03,520
now let's focus on why my team and i

58
00:02:02,880 --> 00:02:06,000
were so

59
00:02:03,520 --> 00:02:08,079
interested in this research in the

60
00:02:06,000 --> 00:02:08,560
military we frequently have service

61
00:02:08,080 --> 00:02:11,360
members

62
00:02:08,560 --> 00:02:12,959
rotating on three-year assignments due

63
00:02:11,360 --> 00:02:14,720
to the significant overhead

64
00:02:12,959 --> 00:02:17,280
in training someone on all of the

65
00:02:14,720 --> 00:02:19,520
important skills enumerated earlier

66
00:02:17,280 --> 00:02:21,120
there is little time left for meaningful

67
00:02:19,520 --> 00:02:24,160
on-the-job impact

68
00:02:21,120 --> 00:02:26,480
so we searched for a better way forward

69
00:02:24,160 --> 00:02:28,879
our work builds off the great research

70
00:02:26,480 --> 00:02:31,359
by votipka stevens red miles who

71
00:02:28,879 --> 00:02:33,120
in missouri and hackers verse testers

72
00:02:31,360 --> 00:02:34,000
the top of this slide shows their

73
00:02:33,120 --> 00:02:36,160
process

74
00:02:34,000 --> 00:02:37,120
we added an additional step named

75
00:02:36,160 --> 00:02:38,799
targeting

76
00:02:37,120 --> 00:02:40,720
let's quickly talk about the steps in

77
00:02:38,800 --> 00:02:43,599
this process before addressing

78
00:02:40,720 --> 00:02:45,680
our improvement the first step when

79
00:02:43,599 --> 00:02:46,560
hacking is to identify software to

80
00:02:45,680 --> 00:02:48,640
investigate

81
00:02:46,560 --> 00:02:50,400
as an example we have a critical host

82
00:02:48,640 --> 00:02:52,958
who exports three services

83
00:02:50,400 --> 00:02:53,680
the h2o web server digital voice

84
00:02:52,959 --> 00:02:56,160
services

85
00:02:53,680 --> 00:02:58,000
and a mail server maybe we decide the

86
00:02:56,160 --> 00:03:01,040
web service is most important

87
00:02:58,000 --> 00:03:02,720
so we target it for our campaign next we

88
00:03:01,040 --> 00:03:04,560
attempt to see what information is

89
00:03:02,720 --> 00:03:06,239
available about the service

90
00:03:04,560 --> 00:03:08,239
maybe we can find the service's source

91
00:03:06,239 --> 00:03:10,159
code or build on progress made by

92
00:03:08,239 --> 00:03:12,640
someone else

93
00:03:10,159 --> 00:03:14,560
next we identify how to run the program

94
00:03:12,640 --> 00:03:16,480
and how to interact with it

95
00:03:14,560 --> 00:03:18,080
we might find a critical component of

96
00:03:16,480 --> 00:03:20,720
the web server that we interact

97
00:03:18,080 --> 00:03:21,599
with directly through a test harness a

98
00:03:20,720 --> 00:03:23,680
test harness

99
00:03:21,599 --> 00:03:24,798
is some code usually written in the c

100
00:03:23,680 --> 00:03:27,200
programming language

101
00:03:24,799 --> 00:03:29,920
that wraps the target program in a way

102
00:03:27,200 --> 00:03:32,399
that makes it easier to pass data

103
00:03:29,920 --> 00:03:34,319
with our harness in hand we run millions

104
00:03:32,400 --> 00:03:36,239
of test inputs through the program

105
00:03:34,319 --> 00:03:37,760
attempting to find those that cause the

106
00:03:36,239 --> 00:03:40,319
program to crash

107
00:03:37,760 --> 00:03:42,079
this process is called fuzzing many

108
00:03:40,319 --> 00:03:44,319
flaws might cause a program to crash

109
00:03:42,080 --> 00:03:45,200
such as attempts to read an invalid

110
00:03:44,319 --> 00:03:47,839
memory pointer

111
00:03:45,200 --> 00:03:48,640
or writing data over the stack canary

112
00:03:47,840 --> 00:03:51,280
featured here

113
00:03:48,640 --> 00:03:53,200
is the fuzzer hong fuzz if it appears

114
00:03:51,280 --> 00:03:55,200
our fuzzer is not making progress

115
00:03:53,200 --> 00:03:57,200
indicated by the amount of code it has

116
00:03:55,200 --> 00:03:58,798
covered we return to the program

117
00:03:57,200 --> 00:04:00,798
understanding step

118
00:03:58,799 --> 00:04:02,720
after running the fuzzer for some time

119
00:04:00,799 --> 00:04:04,560
we search the corpus for bugs

120
00:04:02,720 --> 00:04:06,159
we attempt to make sense of them in the

121
00:04:04,560 --> 00:04:08,560
program's context

122
00:04:06,159 --> 00:04:10,560
finally we write a report to communicate

123
00:04:08,560 --> 00:04:11,439
our findings and the impact they might

124
00:04:10,560 --> 00:04:13,360
have

125
00:04:11,439 --> 00:04:15,599
during a team meeting jared asked a

126
00:04:13,360 --> 00:04:17,440
potent question his question prompted us

127
00:04:15,599 --> 00:04:19,839
to mix the work of votipka

128
00:04:17,440 --> 00:04:21,040
with our experience using automation and

129
00:04:19,839 --> 00:04:23,359
leading teams

130
00:04:21,040 --> 00:04:24,960
the question was how can we use

131
00:04:23,360 --> 00:04:27,440
automated tools to help

132
00:04:24,960 --> 00:04:29,198
our less skilled hackers contribute

133
00:04:27,440 --> 00:04:31,360
before we describe what we learned let

134
00:04:29,199 --> 00:04:34,240
me first describe the prevailing method

135
00:04:31,360 --> 00:04:36,160
a depth first search in this method

136
00:04:34,240 --> 00:04:37,199
hackers apply botipa's process

137
00:04:36,160 --> 00:04:39,440
sequentially

138
00:04:37,199 --> 00:04:40,960
out of many potential targets the team

139
00:04:39,440 --> 00:04:43,199
selects a single one

140
00:04:40,960 --> 00:04:44,638
and uses a lot of time and energy to

141
00:04:43,199 --> 00:04:46,960
find bugs

142
00:04:44,639 --> 00:04:48,960
without any prior indication of success

143
00:04:46,960 --> 00:04:50,960
this is a lot like diamond mining

144
00:04:48,960 --> 00:04:52,320
the payoff is high so the team is

145
00:04:50,960 --> 00:04:55,440
willing to invest a lot

146
00:04:52,320 --> 00:04:58,159
in searching and digging the problem

147
00:04:55,440 --> 00:05:01,199
here can be summarized with one word

148
00:04:58,160 --> 00:05:01,600
risk the payoff is high if we can find a

149
00:05:01,199 --> 00:05:03,280
bug

150
00:05:01,600 --> 00:05:04,720
in a very critical service but the

151
00:05:03,280 --> 00:05:06,719
payoff is zero

152
00:05:04,720 --> 00:05:08,000
if there is no bug to be found or if we

153
00:05:06,720 --> 00:05:10,080
cannot find it

154
00:05:08,000 --> 00:05:11,199
worse the prevailing method

155
00:05:10,080 --> 00:05:14,639
underutilizes

156
00:05:11,199 --> 00:05:16,560
automation and leaves apprentices behind

157
00:05:14,639 --> 00:05:18,639
in order to maximize our return on

158
00:05:16,560 --> 00:05:20,160
investment we should instead focus on

159
00:05:18,639 --> 00:05:21,280
how to predict the presence of a

160
00:05:20,160 --> 00:05:23,759
vulnerability

161
00:05:21,280 --> 00:05:24,400
and weigh that against the cost of both

162
00:05:23,759 --> 00:05:26,960
skill

163
00:05:24,400 --> 00:05:28,000
and time we derive from this model our

164
00:05:26,960 --> 00:05:30,719
favored method

165
00:05:28,000 --> 00:05:32,000
breadth first in this method we apply

166
00:05:30,720 --> 00:05:34,160
votipka's process

167
00:05:32,000 --> 00:05:36,479
in a breadth-first search we accomplish

168
00:05:34,160 --> 00:05:38,400
this by labeling hackers based on their

169
00:05:36,479 --> 00:05:39,599
skill and applying them to targets

170
00:05:38,400 --> 00:05:41,758
sequentially

171
00:05:39,600 --> 00:05:42,639
instead of having an entire team review

172
00:05:41,759 --> 00:05:45,360
one target

173
00:05:42,639 --> 00:05:47,199
we have apprentices review many targets

174
00:05:45,360 --> 00:05:47,919
they can help predict both the presence

175
00:05:47,199 --> 00:05:49,840
of bugs

176
00:05:47,919 --> 00:05:52,000
and the costs associated with future

177
00:05:49,840 --> 00:05:55,520
work this leaves more advanced

178
00:05:52,000 --> 00:05:57,440
hackers to review more promising targets

179
00:05:55,520 --> 00:05:59,840
this figure gives more detail on our

180
00:05:57,440 --> 00:06:00,800
process and the specific job roles it

181
00:05:59,840 --> 00:06:03,679
employs

182
00:06:00,800 --> 00:06:04,639
our insights are first treat this as a

183
00:06:03,680 --> 00:06:07,919
pipeline to be

184
00:06:04,639 --> 00:06:10,319
executed in parallel second

185
00:06:07,919 --> 00:06:13,039
optimally use the skill of each team

186
00:06:10,319 --> 00:06:15,759
member by maximizing the time they spend

187
00:06:13,039 --> 00:06:18,159
in the step they are best suited for

188
00:06:15,759 --> 00:06:20,240
hence the title of our paper hacking in

189
00:06:18,160 --> 00:06:22,240
the industrial age

190
00:06:20,240 --> 00:06:23,840
because we're filming yusnik's lightning

191
00:06:22,240 --> 00:06:26,240
speed video you'll have to read our

192
00:06:23,840 --> 00:06:28,400
paper for more details

193
00:06:26,240 --> 00:06:29,759
i found that when explaining research to

194
00:06:28,400 --> 00:06:32,960
high-ranking officers

195
00:06:29,759 --> 00:06:35,759
using metaphors is best so this is my

196
00:06:32,960 --> 00:06:37,359
executive metaphor when hacking we

197
00:06:35,759 --> 00:06:39,759
search for bugs

198
00:06:37,360 --> 00:06:42,800
instead let's pretend we're fishing here

199
00:06:39,759 --> 00:06:45,440
you can see a school of fish

200
00:06:42,800 --> 00:06:47,840
let's also say we're fishing with a net

201
00:06:45,440 --> 00:06:49,599
if we use a net with very tiny holes

202
00:06:47,840 --> 00:06:51,758
like the person in this picture

203
00:06:49,599 --> 00:06:53,759
we're definitely going to catch all the

204
00:06:51,759 --> 00:06:55,759
fish who are trapped in the net

205
00:06:53,759 --> 00:06:57,039
the problem is that the net has a lot of

206
00:06:55,759 --> 00:06:58,960
drag in the water

207
00:06:57,039 --> 00:07:00,560
and requires a lot of skill to use

208
00:06:58,960 --> 00:07:03,039
correctly

209
00:07:00,560 --> 00:07:04,400
if instead we use a lower skill net we

210
00:07:03,039 --> 00:07:06,479
might lose some fish

211
00:07:04,400 --> 00:07:08,080
on the other hand we can drag it through

212
00:07:06,479 --> 00:07:10,080
more water and thus

213
00:07:08,080 --> 00:07:11,280
increase our chances of interacting with

214
00:07:10,080 --> 00:07:13,919
the school

215
00:07:11,280 --> 00:07:15,280
great we're a significant way through

216
00:07:13,919 --> 00:07:17,680
the presentation

217
00:07:15,280 --> 00:07:19,520
so far i've just asked you to believe

218
00:07:17,680 --> 00:07:21,360
that i know what i'm talking about

219
00:07:19,520 --> 00:07:23,198
but fortunately we're rigorous

220
00:07:21,360 --> 00:07:23,840
scientists and we've come up with an

221
00:07:23,199 --> 00:07:26,000
experiment

222
00:07:23,840 --> 00:07:27,198
to test the two methods breadth and

223
00:07:26,000 --> 00:07:30,160
depth

224
00:07:27,199 --> 00:07:31,759
we recruited 12 hackers a varying skill

225
00:07:30,160 --> 00:07:32,400
and put them through a quick training

226
00:07:31,759 --> 00:07:34,319
session

227
00:07:32,400 --> 00:07:35,520
and then group them into two teams of

228
00:07:34,319 --> 00:07:38,160
six

229
00:07:35,520 --> 00:07:39,039
each team spent a work week performing

230
00:07:38,160 --> 00:07:42,240
each method

231
00:07:39,039 --> 00:07:44,719
in a counterbalanced design this gave us

232
00:07:42,240 --> 00:07:48,240
the opportunity to perform both between

233
00:07:44,720 --> 00:07:50,080
subject and within subject tests

234
00:07:48,240 --> 00:07:52,080
what did our hackers look at we

235
00:07:50,080 --> 00:07:54,400
considered many existing benchmarks

236
00:07:52,080 --> 00:07:55,520
such as darpa's cyber grand challenge

237
00:07:54,400 --> 00:07:58,159
binary set

238
00:07:55,520 --> 00:08:01,758
google's fuzzing benchmark suite and mit

239
00:07:58,160 --> 00:08:04,080
lincoln labs rodeo day problem set

240
00:08:01,759 --> 00:08:05,120
ultimately we decided on something else

241
00:08:04,080 --> 00:08:08,560
altogether

242
00:08:05,120 --> 00:08:10,639
openwork openword is an open source

243
00:08:08,560 --> 00:08:12,000
linux router firmware with a package

244
00:08:10,639 --> 00:08:14,720
manager that exports

245
00:08:12,000 --> 00:08:16,080
thousands of open source packages

246
00:08:14,720 --> 00:08:18,560
selecting this resource

247
00:08:16,080 --> 00:08:19,520
ensured our targets were complex and

248
00:08:18,560 --> 00:08:22,960
representative

249
00:08:19,520 --> 00:08:25,280
of real deployed software we selected an

250
00:08:22,960 --> 00:08:26,878
old version of openword that was sure to

251
00:08:25,280 --> 00:08:29,198
contain bugs

252
00:08:26,879 --> 00:08:30,960
participants were heavily monitored we

253
00:08:29,199 --> 00:08:33,039
made very precise schedules

254
00:08:30,960 --> 00:08:35,279
we told them when to take surveys when

255
00:08:33,039 --> 00:08:38,159
to eat when to take their coffee

256
00:08:35,279 --> 00:08:40,159
when to sleep just kidding we also

257
00:08:38,159 --> 00:08:40,640
assigned two team leads to ensure their

258
00:08:40,159 --> 00:08:42,399
team

259
00:08:40,640 --> 00:08:44,240
applied the correct method at the

260
00:08:42,399 --> 00:08:46,160
correct time

261
00:08:44,240 --> 00:08:48,320
we set up some services for the teams

262
00:08:46,160 --> 00:08:50,160
such as a rocket chat and gitlab

263
00:08:48,320 --> 00:08:52,320
we also came up with a nice workflow

264
00:08:50,160 --> 00:08:54,240
that uses gitlab's kanban board

265
00:08:52,320 --> 00:08:56,640
to track issues as they move through the

266
00:08:54,240 --> 00:08:58,959
hacking process defined earlier

267
00:08:56,640 --> 00:09:01,120
now if this process is interesting to

268
00:08:58,959 --> 00:09:01,680
you i hate to sound like a broken record

269
00:09:01,120 --> 00:09:04,480
but

270
00:09:01,680 --> 00:09:05,680
you should seriously read our paper on

271
00:09:04,480 --> 00:09:08,000
to the results

272
00:09:05,680 --> 00:09:09,839
first i'll talk about the survey results

273
00:09:08,000 --> 00:09:11,760
i've only chosen a few significant

274
00:09:09,839 --> 00:09:14,399
responses for this presentation

275
00:09:11,760 --> 00:09:15,439
but the paper contains many more for the

276
00:09:14,399 --> 00:09:17,279
responses here

277
00:09:15,440 --> 00:09:19,360
i've used the bernoulli trial to answer

278
00:09:17,279 --> 00:09:21,839
the question what is the probability

279
00:09:19,360 --> 00:09:23,120
this response is not applicable to the

280
00:09:21,839 --> 00:09:26,000
sampled population

281
00:09:23,120 --> 00:09:26,560
for clarity the lower the p-value listed

282
00:09:26,000 --> 00:09:28,160
the more

283
00:09:26,560 --> 00:09:30,959
likely the response of the greater

284
00:09:28,160 --> 00:09:32,880
community matches the response given

285
00:09:30,959 --> 00:09:34,479
so for the first question which

286
00:09:32,880 --> 00:09:36,000
vulnerability research method do you

287
00:09:34,480 --> 00:09:38,800
feel was more effective

288
00:09:36,000 --> 00:09:40,080
our participants responded breath first

289
00:09:38,800 --> 00:09:41,680
on a side note

290
00:09:40,080 --> 00:09:44,080
i've included some nice background

291
00:09:41,680 --> 00:09:44,959
pictures that have nothing to do with

292
00:09:44,080 --> 00:09:46,720
the experiment

293
00:09:44,959 --> 00:09:48,000
but make the questions more fun to look

294
00:09:46,720 --> 00:09:49,760
at

295
00:09:48,000 --> 00:09:51,760
which vulnerability research method do

296
00:09:49,760 --> 00:09:53,120
you think made the best use of your

297
00:09:51,760 --> 00:09:55,760
team's skill

298
00:09:53,120 --> 00:09:56,720
breadth first which vulnerability

299
00:09:55,760 --> 00:09:58,959
research method

300
00:09:56,720 --> 00:10:00,320
do you think is easier for a novice to

301
00:09:58,959 --> 00:10:04,000
contribute to

302
00:10:00,320 --> 00:10:05,519
unanimously breadth first did you learn

303
00:10:04,000 --> 00:10:07,839
any valuable skills during the

304
00:10:05,519 --> 00:10:11,040
experiment unanimously

305
00:10:07,839 --> 00:10:12,240
yes how many bugs did you find during

306
00:10:11,040 --> 00:10:14,319
the experiment

307
00:10:12,240 --> 00:10:16,560
every participant reported finding at

308
00:10:14,320 --> 00:10:18,160
least one bug

309
00:10:16,560 --> 00:10:20,719
let's talk about a more objective

310
00:10:18,160 --> 00:10:23,920
measure of each method's effectiveness

311
00:10:20,720 --> 00:10:25,920
bugs found this table shows bugs found

312
00:10:23,920 --> 00:10:27,760
by running each team's harnesses in

313
00:10:25,920 --> 00:10:31,360
three independent fuzzing runs

314
00:10:27,760 --> 00:10:34,959
trials zero one and two here labeled t0

315
00:10:31,360 --> 00:10:37,200
t1 and t2 each horizontal record

316
00:10:34,959 --> 00:10:39,680
captures a team's output when applying

317
00:10:37,200 --> 00:10:41,200
one of the two methods depth first or

318
00:10:39,680 --> 00:10:43,760
breadth first

319
00:10:41,200 --> 00:10:46,480
we ran each of our 12 jobs on mayhem for

320
00:10:43,760 --> 00:10:48,720
24 hours

321
00:10:46,480 --> 00:10:50,240
the center records highlight that breath

322
00:10:48,720 --> 00:10:53,040
first found more bugs

323
00:10:50,240 --> 00:10:54,240
in fact it found in order of magnitude

324
00:10:53,040 --> 00:10:56,079
more bugs

325
00:10:54,240 --> 00:10:57,600
there is a statistically significant

326
00:10:56,079 --> 00:10:59,519
difference in the means of the breath

327
00:10:57,600 --> 00:11:01,360
first and depth first methods

328
00:10:59,519 --> 00:11:03,440
if you'd like a more detailed analysis

329
00:11:01,360 --> 00:11:04,880
of these numbers including how we

330
00:11:03,440 --> 00:11:06,560
determine number of bugs

331
00:11:04,880 --> 00:11:08,000
take a look at the results section of

332
00:11:06,560 --> 00:11:09,839
our paper

333
00:11:08,000 --> 00:11:11,839
when reviewing the mountains of recorded

334
00:11:09,839 --> 00:11:12,959
data drew barbarello noticed a

335
00:11:11,839 --> 00:11:14,000
difference in the amount of

336
00:11:12,959 --> 00:11:16,959
documentation for

337
00:11:14,000 --> 00:11:19,519
each method he plotted the cumulative

338
00:11:16,959 --> 00:11:21,518
amount of documentations over time

339
00:11:19,519 --> 00:11:24,240
this includes gitlab projects and

340
00:11:21,519 --> 00:11:26,640
commits gitlab issue actions like

341
00:11:24,240 --> 00:11:28,160
creation comments and tags and rocket

342
00:11:26,640 --> 00:11:30,079
chat messages

343
00:11:28,160 --> 00:11:32,240
for both weeks the rate of change for

344
00:11:30,079 --> 00:11:34,880
breath first is higher

345
00:11:32,240 --> 00:11:36,399
and finally we're at the end i hope i've

346
00:11:34,880 --> 00:11:37,920
kept things interesting and i hope

347
00:11:36,399 --> 00:11:40,720
you'll go read our paper

348
00:11:37,920 --> 00:11:43,199
in it you'll find an excruciatingly

349
00:11:40,720 --> 00:11:45,279
detailed description of our experiment

350
00:11:43,200 --> 00:11:47,839
if you plan to repeat it we'll gladly

351
00:11:45,279 --> 00:11:49,920
answer questions about our design

352
00:11:47,839 --> 00:11:52,880
in the paper you'll also find a more

353
00:11:49,920 --> 00:11:55,519
detailed description of our workflow

354
00:11:52,880 --> 00:11:57,120
i hope by now i've convinced you not to

355
00:11:55,519 --> 00:12:00,000
strip mine for diamonds

356
00:11:57,120 --> 00:12:00,320
instead build your own bug assembly line

357
00:12:00,000 --> 00:12:03,200
and

358
00:12:00,320 --> 00:12:04,240
enter the industrial age of hacking i'm

359
00:12:03,200 --> 00:12:11,839
tim nasco

360
00:12:04,240 --> 00:12:11,839
on behalf of my team thank you

361
00:12:16,560 --> 00:12:18,638
you

