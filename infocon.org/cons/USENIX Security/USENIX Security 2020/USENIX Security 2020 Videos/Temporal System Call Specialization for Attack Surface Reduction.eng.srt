1
00:00:09,120 --> 00:00:11,599
hello

2
00:00:09,679 --> 00:00:13,200
my name is ahmed and i'll be presenting

3
00:00:11,599 --> 00:00:14,240
our work named temporal system call

4
00:00:13,200 --> 00:00:16,480
specialization

5
00:00:14,240 --> 00:00:18,160
for tax surface reduction this is a

6
00:00:16,480 --> 00:00:20,640
joint work with my colleagues

7
00:00:18,160 --> 00:00:22,800
capti chechi and our advisor michalis

8
00:00:20,640 --> 00:00:24,240
polikarnakis

9
00:00:22,800 --> 00:00:26,800
why do we need software devoting and

10
00:00:24,240 --> 00:00:27,279
specialization applications typically

11
00:00:26,800 --> 00:00:29,439
include

12
00:00:27,279 --> 00:00:31,679
code that they don't use and have access

13
00:00:29,439 --> 00:00:34,079
to features which they don't need

14
00:00:31,679 --> 00:00:36,480
for example some modules or plugins are

15
00:00:34,079 --> 00:00:38,719
not needed by a given configuration

16
00:00:36,480 --> 00:00:40,718
some library functions are not imported

17
00:00:38,719 --> 00:00:41,680
at all and some system calls are never

18
00:00:40,719 --> 00:00:44,559
used

19
00:00:41,680 --> 00:00:46,800
if we look at the simple code snippet it

20
00:00:44,559 --> 00:00:50,480
only invokes two lipsy functions

21
00:00:46,800 --> 00:00:52,000
sdr copy and open while when we look at

22
00:00:50,480 --> 00:00:54,239
the process address space

23
00:00:52,000 --> 00:00:56,640
it has access to all of the library

24
00:00:54,239 --> 00:00:59,038
functions and all of the system calls

25
00:00:56,640 --> 00:01:01,039
with software deploying our goal is to

26
00:00:59,039 --> 00:01:02,000
identify the parts of the code which are

27
00:01:01,039 --> 00:01:05,039
required

28
00:01:02,000 --> 00:01:05,039
and remove the rest

29
00:01:05,280 --> 00:01:08,640
so what's the security implication of

30
00:01:07,200 --> 00:01:11,040
this code bloat

31
00:01:08,640 --> 00:01:13,040
first of all the unneeded code provides

32
00:01:11,040 --> 00:01:14,400
more rob gadgets for writing code reuse

33
00:01:13,040 --> 00:01:17,200
exploits

34
00:01:14,400 --> 00:01:18,400
the unused system calls can be invoked

35
00:01:17,200 --> 00:01:21,119
in the exploit code

36
00:01:18,400 --> 00:01:22,560
to perform harmful operations such as

37
00:01:21,119 --> 00:01:25,360
exec v

38
00:01:22,560 --> 00:01:26,080
also the unused system calls can be used

39
00:01:25,360 --> 00:01:27,679
as entry

40
00:01:26,080 --> 00:01:29,759
points for exploiting the kernel

41
00:01:27,680 --> 00:01:33,119
vulnerabilities that can lead

42
00:01:29,759 --> 00:01:33,759
to privilege escalation the focus of our

43
00:01:33,119 --> 00:01:35,600
work

44
00:01:33,759 --> 00:01:37,759
is to reduce the attack surface by

45
00:01:35,600 --> 00:01:40,240
disabling system calls

46
00:01:37,759 --> 00:01:42,399
both breaking the exploit payloads and

47
00:01:40,240 --> 00:01:46,158
neutralizing kernel vulnerabilities

48
00:01:42,399 --> 00:01:48,320
associated with those system calls

49
00:01:46,159 --> 00:01:49,200
the existing work regarding library

50
00:01:48,320 --> 00:01:51,199
debloating

51
00:01:49,200 --> 00:01:53,119
lies on the fact that applications

52
00:01:51,200 --> 00:01:54,880
typically use only a fraction of the

53
00:01:53,119 --> 00:01:57,119
library functions

54
00:01:54,880 --> 00:01:59,199
with library bloating they remove the

55
00:01:57,119 --> 00:02:01,360
non-imported functions from memory

56
00:01:59,200 --> 00:02:02,399
by generating a call graph of imported

57
00:02:01,360 --> 00:02:04,240
share libraries

58
00:02:02,399 --> 00:02:05,680
and identifying the library function

59
00:02:04,240 --> 00:02:08,399
dependencies

60
00:02:05,680 --> 00:02:10,640
the caveat here is that the entire

61
00:02:08,399 --> 00:02:12,720
lifetime of the program is considered

62
00:02:10,639 --> 00:02:14,720
so if a function or system called is

63
00:02:12,720 --> 00:02:17,280
used even only once

64
00:02:14,720 --> 00:02:18,800
it can't be disabled the question that

65
00:02:17,280 --> 00:02:21,640
we would like to answer is

66
00:02:18,800 --> 00:02:23,840
can we disable more system calls by

67
00:02:21,640 --> 00:02:24,958
differentiating between a processes

68
00:02:23,840 --> 00:02:28,239
different

69
00:02:24,959 --> 00:02:28,239
phases of execution

70
00:02:28,720 --> 00:02:33,599
server applications typically perform

71
00:02:31,680 --> 00:02:35,760
initialization operations

72
00:02:33,599 --> 00:02:37,040
at the beginning of their execution

73
00:02:35,760 --> 00:02:39,120
operations such as

74
00:02:37,040 --> 00:02:40,400
reading the configuration file forking

75
00:02:39,120 --> 00:02:42,959
worker processes

76
00:02:40,400 --> 00:02:45,200
executing other programs or creating

77
00:02:42,959 --> 00:02:47,200
files and setting their permissions

78
00:02:45,200 --> 00:02:49,040
while when it transitions to what we

79
00:02:47,200 --> 00:02:51,359
call the serving phase

80
00:02:49,040 --> 00:02:53,359
it starts performing the tasks which we

81
00:02:51,360 --> 00:02:55,519
actually expect from the program

82
00:02:53,360 --> 00:02:58,480
such as handling client requests or

83
00:02:55,519 --> 00:03:00,800
establishing connections

84
00:02:58,480 --> 00:03:02,560
if we look at the apache web server as

85
00:03:00,800 --> 00:03:04,560
an example

86
00:03:02,560 --> 00:03:06,480
when the program launches the process

87
00:03:04,560 --> 00:03:08,400
address space has access to all of the

88
00:03:06,480 --> 00:03:09,440
system calls and all of the library

89
00:03:08,400 --> 00:03:12,159
functions

90
00:03:09,440 --> 00:03:14,159
with library deploying we identify these

91
00:03:12,159 --> 00:03:17,760
set of functions and system calls

92
00:03:14,159 --> 00:03:19,200
as unnecessary and unused and we removed

93
00:03:17,760 --> 00:03:21,280
them

94
00:03:19,200 --> 00:03:22,879
but there are still a set of security

95
00:03:21,280 --> 00:03:25,760
critical system calls

96
00:03:22,879 --> 00:03:27,760
such as exec v and bind which cannot be

97
00:03:25,760 --> 00:03:29,518
filtered

98
00:03:27,760 --> 00:03:31,679
if we look more in depth into the call

99
00:03:29,519 --> 00:03:35,440
graph we can see these

100
00:03:31,680 --> 00:03:38,319
two separate phases of execution

101
00:03:35,440 --> 00:03:38,640
and if we split the boundary we can see

102
00:03:38,319 --> 00:03:41,518
that

103
00:03:38,640 --> 00:03:43,200
after the program finishes executing its

104
00:03:41,519 --> 00:03:46,159
initialization phase

105
00:03:43,200 --> 00:03:48,720
and it enters the serving phase it

106
00:03:46,159 --> 00:03:49,679
doesn't require the security critical

107
00:03:48,720 --> 00:03:52,319
system calls

108
00:03:49,680 --> 00:03:54,400
anymore and we can apply more

109
00:03:52,319 --> 00:03:56,640
restrictive filters and remove those

110
00:03:54,400 --> 00:03:59,360
system calls

111
00:03:56,640 --> 00:04:00,000
with temporal system call specialization

112
00:03:59,360 --> 00:04:02,640
we aim to

113
00:04:00,000 --> 00:04:04,879
disable additional system calls that are

114
00:04:02,640 --> 00:04:05,679
needed only during the initialization

115
00:04:04,879 --> 00:04:07,760
phase

116
00:04:05,680 --> 00:04:09,599
after the program enters the serving

117
00:04:07,760 --> 00:04:13,040
phase

118
00:04:09,599 --> 00:04:15,920
we're able to disable 51 more security

119
00:04:13,040 --> 00:04:17,519
critical system calls breaking 218 more

120
00:04:15,920 --> 00:04:21,120
shell codes and raw payloads

121
00:04:17,519 --> 00:04:24,320
and mitigating 13 more linux kernel cvs

122
00:04:21,120 --> 00:04:27,360
as an example apache httpd and nginx

123
00:04:24,320 --> 00:04:29,840
invoke execv only during initialization

124
00:04:27,360 --> 00:04:32,320
while id bind and redis invoke ch mode

125
00:04:29,840 --> 00:04:34,320
only during initialization

126
00:04:32,320 --> 00:04:36,080
now that we have a brief introduction

127
00:04:34,320 --> 00:04:38,159
let's move on to how our approach and

128
00:04:36,080 --> 00:04:41,840
tool actually works

129
00:04:38,160 --> 00:04:43,199
to give a top-level overview

130
00:04:41,840 --> 00:04:45,119
we need the source code of the

131
00:04:43,199 --> 00:04:46,560
application and libraries and we compile

132
00:04:45,120 --> 00:04:50,400
them using llvm

133
00:04:46,560 --> 00:04:53,120
with lto optimization enabled

134
00:04:50,400 --> 00:04:54,000
we require the programmer to specify the

135
00:04:53,120 --> 00:04:56,560
functions

136
00:04:54,000 --> 00:04:58,240
of the beginning of the serving phase we

137
00:04:56,560 --> 00:05:00,400
feed the llvm ir

138
00:04:58,240 --> 00:05:02,560
into svf anderson's analysis and

139
00:05:00,400 --> 00:05:05,679
generate our initial call graph

140
00:05:02,560 --> 00:05:06,400
due to imprecision we apply two pruning

141
00:05:05,680 --> 00:05:08,800
techniques

142
00:05:06,400 --> 00:05:10,719
on top of that call graph one type based

143
00:05:08,800 --> 00:05:14,000
and the other address taken based

144
00:05:10,720 --> 00:05:15,840
pruning when we acquire the set of

145
00:05:14,000 --> 00:05:18,560
required system calls

146
00:05:15,840 --> 00:05:21,840
we generate setcomp filters to apply

147
00:05:18,560 --> 00:05:23,840
more restrictive filters

148
00:05:21,840 --> 00:05:26,159
so our first step is to generate the

149
00:05:23,840 --> 00:05:26,960
call graph we need a complete and sound

150
00:05:26,160 --> 00:05:30,080
call graph

151
00:05:26,960 --> 00:05:32,479
to identify the unnecessary system calls

152
00:05:30,080 --> 00:05:34,560
due to the extensive use of function

153
00:05:32,479 --> 00:05:36,240
pointers especially in the programs that

154
00:05:34,560 --> 00:05:39,440
we have considered

155
00:05:36,240 --> 00:05:42,240
we need to perform points to analysis

156
00:05:39,440 --> 00:05:44,479
while sound points to analysis comes

157
00:05:42,240 --> 00:05:47,199
with severe over-approximation

158
00:05:44,479 --> 00:05:48,400
the over-approximation is to an extent

159
00:05:47,199 --> 00:05:50,400
which prevents us

160
00:05:48,400 --> 00:05:52,880
from differentiating between the

161
00:05:50,400 --> 00:05:55,039
different phases of execution and their

162
00:05:52,880 --> 00:05:57,919
system call requirements

163
00:05:55,039 --> 00:05:59,199
leaving us with no security benefit so

164
00:05:57,919 --> 00:06:01,919
our goal here

165
00:05:59,199 --> 00:06:04,880
is to improve the precision without

166
00:06:01,919 --> 00:06:04,880
losing soundness

167
00:06:04,960 --> 00:06:12,239
our first pruning base technique is

168
00:06:08,880 --> 00:06:13,840
based on argument types

169
00:06:12,240 --> 00:06:16,160
we match the arguments passed to the

170
00:06:13,840 --> 00:06:17,280
call site with the argument types of the

171
00:06:16,160 --> 00:06:19,280
function

172
00:06:17,280 --> 00:06:21,039
we only consider stark types no

173
00:06:19,280 --> 00:06:22,960
primitives and no void star

174
00:06:21,039 --> 00:06:24,240
and we only consider non-variety

175
00:06:22,960 --> 00:06:26,960
functions

176
00:06:24,240 --> 00:06:28,479
if we look at an example from apache we

177
00:06:26,960 --> 00:06:29,120
have a call site which takes three

178
00:06:28,479 --> 00:06:33,440
arguments

179
00:06:29,120 --> 00:06:35,840
and our void star d apr rate ts

180
00:06:33,440 --> 00:06:36,560
svf gives two target functions for this

181
00:06:35,840 --> 00:06:38,960
call site

182
00:06:36,560 --> 00:06:40,720
pipe log maintenance and event run our

183
00:06:38,960 --> 00:06:42,479
technique works like this

184
00:06:40,720 --> 00:06:44,319
we start from the arguments of the call

185
00:06:42,479 --> 00:06:46,159
say the first argument is intar it's a

186
00:06:44,319 --> 00:06:48,240
primitive we consider it as a mesh

187
00:06:46,160 --> 00:06:50,639
the next one is void star we consider it

188
00:06:48,240 --> 00:06:53,440
as a match the third one is a strike

189
00:06:50,639 --> 00:06:54,880
apr rate t so we start matching it with

190
00:06:53,440 --> 00:06:57,120
the target functions

191
00:06:54,880 --> 00:06:58,240
for pipe-like maintenance the third

192
00:06:57,120 --> 00:07:01,599
argument is also

193
00:06:58,240 --> 00:07:03,039
apr weight t so it's a match in the case

194
00:07:01,599 --> 00:07:04,800
of event run

195
00:07:03,039 --> 00:07:06,960
the third argument is serve rec and we

196
00:07:04,800 --> 00:07:08,319
can remove it from the target of this

197
00:07:06,960 --> 00:07:10,960
call site

198
00:07:08,319 --> 00:07:12,000
our next pruning technique is based on

199
00:07:10,960 --> 00:07:15,520
address

200
00:07:12,000 --> 00:07:17,199
addresses taken we identify where a

201
00:07:15,520 --> 00:07:18,639
function address is being taken both

202
00:07:17,199 --> 00:07:20,400
global and local

203
00:07:18,639 --> 00:07:22,080
we check if those locations are

204
00:07:20,400 --> 00:07:24,880
accessible from main

205
00:07:22,080 --> 00:07:26,639
and then we prune edges to functions

206
00:07:24,880 --> 00:07:28,240
that are not accessed directly

207
00:07:26,639 --> 00:07:30,560
and the location where the address is

208
00:07:28,240 --> 00:07:32,160
being taken is not accessible

209
00:07:30,560 --> 00:07:34,240
looking back at the example that we

210
00:07:32,160 --> 00:07:35,120
mentioned the address of pipeline

211
00:07:34,240 --> 00:07:37,599
maintenance is

212
00:07:35,120 --> 00:07:39,599
only taken in start module and start

213
00:07:37,599 --> 00:07:41,440
module is not accessible from main

214
00:07:39,599 --> 00:07:45,759
so we can remove pipe log maintenance

215
00:07:41,440 --> 00:07:47,840
from the targets of this call site

216
00:07:45,759 --> 00:07:49,360
now now that we have the call graph how

217
00:07:47,840 --> 00:07:51,840
do we identify the required set of

218
00:07:49,360 --> 00:07:53,759
system calls for each phase

219
00:07:51,840 --> 00:07:54,960
applications typically invoke system

220
00:07:53,759 --> 00:07:57,520
calls to the standard c

221
00:07:54,960 --> 00:08:00,000
library so we first generate a call

222
00:07:57,520 --> 00:08:01,840
graph for the glibc library mapping all

223
00:08:00,000 --> 00:08:04,319
exported functions to their respective

224
00:08:01,840 --> 00:08:06,638
system calls

225
00:08:04,319 --> 00:08:08,400
we do the same for all of the other

226
00:08:06,639 --> 00:08:09,120
libraries which the application depends

227
00:08:08,400 --> 00:08:10,960
upon

228
00:08:09,120 --> 00:08:12,319
for these libraries the leaves of the

229
00:08:10,960 --> 00:08:17,120
graph will either be

230
00:08:12,319 --> 00:08:18,639
other library functions or system calls

231
00:08:17,120 --> 00:08:20,800
then we generate the call graph for the

232
00:08:18,639 --> 00:08:22,479
application itself and now that we have

233
00:08:20,800 --> 00:08:24,879
the complete call graph

234
00:08:22,479 --> 00:08:26,878
we can specify any starting point in the

235
00:08:24,879 --> 00:08:28,080
program and see which system calls it

236
00:08:26,879 --> 00:08:30,000
requires

237
00:08:28,080 --> 00:08:32,079
for example if we consider main in this

238
00:08:30,000 --> 00:08:34,399
graph we will see the set of required

239
00:08:32,080 --> 00:08:36,719
system calls

240
00:08:34,399 --> 00:08:39,200
how do we filter these system calls

241
00:08:36,719 --> 00:08:41,519
after they have been identified

242
00:08:39,200 --> 00:08:43,519
for this part we use second ppf a

243
00:08:41,519 --> 00:08:44,880
mechanism implemented in the linux

244
00:08:43,519 --> 00:08:47,839
kernel

245
00:08:44,880 --> 00:08:50,399
which can be installed by invoking the

246
00:08:47,839 --> 00:08:52,640
setcomp or prctl system call

247
00:08:50,399 --> 00:08:54,720
we install the more restrictive filters

248
00:08:52,640 --> 00:08:57,680
after entering the serving phase

249
00:08:54,720 --> 00:08:59,680
going back to the apache example the

250
00:08:57,680 --> 00:09:00,560
moment the program enters the child main

251
00:08:59,680 --> 00:09:03,199
function

252
00:09:00,560 --> 00:09:05,199
we install the more restrictive filters

253
00:09:03,200 --> 00:09:06,399
and filter the security critical system

254
00:09:05,200 --> 00:09:09,360
calls

255
00:09:06,399 --> 00:09:11,279
for our evaluation we've considered six

256
00:09:09,360 --> 00:09:13,600
server applications

257
00:09:11,279 --> 00:09:15,920
in this table you can see the number of

258
00:09:13,600 --> 00:09:18,160
retained system calls

259
00:09:15,920 --> 00:09:19,680
and compare it between library bloating

260
00:09:18,160 --> 00:09:22,800
and temporal specialization

261
00:09:19,680 --> 00:09:26,239
to give an example let's focus on apache

262
00:09:22,800 --> 00:09:27,760
with library bloating 105 system calls

263
00:09:26,240 --> 00:09:29,920
are required

264
00:09:27,760 --> 00:09:32,160
while when we move to the serving phase

265
00:09:29,920 --> 00:09:35,760
of the temporal specialization

266
00:09:32,160 --> 00:09:39,279
only 79 are required so

267
00:09:35,760 --> 00:09:42,720
the 26 which are removed let's look at

268
00:09:39,279 --> 00:09:45,360
how critical these system calls are

269
00:09:42,720 --> 00:09:47,920
we'll do that in the next table looking

270
00:09:45,360 --> 00:09:50,160
at the security critical system calls

271
00:09:47,920 --> 00:09:51,680
let's see which one can be removed with

272
00:09:50,160 --> 00:09:53,279
library loading

273
00:09:51,680 --> 00:09:55,040
and which one can be removed after

274
00:09:53,279 --> 00:09:58,160
applying temporal specialization for

275
00:09:55,040 --> 00:10:01,839
each of the applications

276
00:09:58,160 --> 00:10:03,920
considering execv for nginx and apache

277
00:10:01,839 --> 00:10:05,279
it can't be removed with labor with

278
00:10:03,920 --> 00:10:07,120
library bloating

279
00:10:05,279 --> 00:10:09,200
but can be removed after applying

280
00:10:07,120 --> 00:10:11,920
temporal specialization

281
00:10:09,200 --> 00:10:12,880
if we consider ch mode set gid or set

282
00:10:11,920 --> 00:10:15,279
uid

283
00:10:12,880 --> 00:10:16,720
the same applies for lightee memcache

284
00:10:15,279 --> 00:10:19,120
and redis

285
00:10:16,720 --> 00:10:22,959
library bloating cannot remove them

286
00:10:19,120 --> 00:10:24,560
while temporal specialization can

287
00:10:22,959 --> 00:10:27,839
in terms of the shell codes and raw

288
00:10:24,560 --> 00:10:30,800
payloads we collected 567 shell codes

289
00:10:27,839 --> 00:10:33,839
and 17 raw payloads we increased the set

290
00:10:30,800 --> 00:10:35,359
of shell codes to 1726 by generating

291
00:10:33,839 --> 00:10:37,920
shell code variations

292
00:10:35,360 --> 00:10:38,640
based on equivalent system calls as an

293
00:10:37,920 --> 00:10:40,640
example

294
00:10:38,640 --> 00:10:42,800
if you have one shell code which has the

295
00:10:40,640 --> 00:10:44,240
except system call inside of it we

296
00:10:42,800 --> 00:10:46,800
generate a variation

297
00:10:44,240 --> 00:10:49,279
and use except for because the attacker

298
00:10:46,800 --> 00:10:52,479
could use except for interchangeably

299
00:10:49,279 --> 00:10:53,200
instead of accept in terms of shell

300
00:10:52,480 --> 00:10:55,519
codes

301
00:10:53,200 --> 00:10:57,760
we were able to break 20 percent more

302
00:10:55,519 --> 00:11:00,240
shell codes compared to library bloating

303
00:10:57,760 --> 00:11:03,120
and we were able to break 25 percent

304
00:11:00,240 --> 00:11:05,920
more raw payloads

305
00:11:03,120 --> 00:11:07,360
in terms of linux kernel cvs we were

306
00:11:05,920 --> 00:11:10,640
able to mitigate

307
00:11:07,360 --> 00:11:12,800
13 more linux kernel cvs

308
00:11:10,640 --> 00:11:15,360
which in some cases could lead to

309
00:11:12,800 --> 00:11:17,439
privilege escalation

310
00:11:15,360 --> 00:11:18,640
to conclude my talk temporal

311
00:11:17,440 --> 00:11:21,040
specialization

312
00:11:18,640 --> 00:11:23,439
removes security critical system calls

313
00:11:21,040 --> 00:11:25,199
by differentiating between the execution

314
00:11:23,440 --> 00:11:27,200
phases of a process

315
00:11:25,200 --> 00:11:29,760
we propose two novel call graph pruning

316
00:11:27,200 --> 00:11:30,560
techniques and were able to filter 51

317
00:11:29,760 --> 00:11:32,720
percent

318
00:11:30,560 --> 00:11:34,959
more security critical system calls than

319
00:11:32,720 --> 00:11:37,839
previous library to bloating techniques

320
00:11:34,959 --> 00:11:39,040
while mitigating 13 more linux kernels

321
00:11:37,839 --> 00:11:41,279
cves compared

322
00:11:39,040 --> 00:11:42,240
to those techniques thank you for your

323
00:11:41,279 --> 00:11:43,839
attention

324
00:11:42,240 --> 00:11:56,959
and i would be happy to take any

325
00:11:43,839 --> 00:11:56,959
questions you might have

