1
00:00:09,440 --> 00:00:13,440
hello everyone my name is amir in this

2
00:00:11,519 --> 00:00:15,280
presentation i introduce shadow move

3
00:00:13,440 --> 00:00:18,000
which is a silly lateral movement a

4
00:00:15,280 --> 00:00:20,240
strategy that can be abused by apts

5
00:00:18,000 --> 00:00:21,279
apt attackers use various lateral

6
00:00:20,240 --> 00:00:23,840
movement techniques to

7
00:00:21,279 --> 00:00:25,279
gradually expand their access within

8
00:00:23,840 --> 00:00:27,279
enterprise networks

9
00:00:25,279 --> 00:00:28,800
in this way they can access critical

10
00:00:27,279 --> 00:00:30,800
assets buried deep inside

11
00:00:28,800 --> 00:00:32,000
compromised networks a real example of

12
00:00:30,800 --> 00:00:35,120
such an attack

13
00:00:32,000 --> 00:00:35,600
is the equifax breach in 2017 attributed

14
00:00:35,120 --> 00:00:38,320
to

15
00:00:35,600 --> 00:00:39,040
apt-10 in such attacks the attackers

16
00:00:38,320 --> 00:00:41,520
first

17
00:00:39,040 --> 00:00:44,000
tried to find a foothold between the

18
00:00:41,520 --> 00:00:46,160
target network typically by exploiting a

19
00:00:44,000 --> 00:00:48,000
public server or sending a sphere

20
00:00:46,160 --> 00:00:50,319
phishing emails to employees

21
00:00:48,000 --> 00:00:51,840
then they use this system to compromise

22
00:00:50,320 --> 00:00:54,879
neighboring systems and they

23
00:00:51,840 --> 00:00:58,160
repeat this process till they reach

24
00:00:54,879 --> 00:01:00,239
critical assets now let's take a look at

25
00:00:58,160 --> 00:01:02,078
the most commonly used lateral movement

26
00:01:00,239 --> 00:01:04,080
techniques by cyber attackers

27
00:01:02,079 --> 00:01:05,760
the first technique is to find and

28
00:01:04,080 --> 00:01:08,960
exploit a vulnerability in a

29
00:01:05,760 --> 00:01:09,840
remote network service such as such as

30
00:01:08,960 --> 00:01:12,559
smbi or

31
00:01:09,840 --> 00:01:13,920
rdp fortunately the user advances in

32
00:01:12,560 --> 00:01:15,360
defense mechanisms

33
00:01:13,920 --> 00:01:17,280
finding and exploiting such

34
00:01:15,360 --> 00:01:17,840
vulnerabilities becomes harder and

35
00:01:17,280 --> 00:01:19,920
harder

36
00:01:17,840 --> 00:01:21,759
another technique is to harvest user

37
00:01:19,920 --> 00:01:24,080
credentials or access tokens

38
00:01:21,759 --> 00:01:26,799
from compromised systems and reuse them

39
00:01:24,080 --> 00:01:27,679
to access remote systems commonly a new

40
00:01:26,799 --> 00:01:30,079
connection is

41
00:01:27,680 --> 00:01:31,360
created and a user authentication

42
00:01:30,079 --> 00:01:34,079
process is performed

43
00:01:31,360 --> 00:01:36,240
which can be detected by anomaly based

44
00:01:34,079 --> 00:01:36,720
detection systems the third approach is

45
00:01:36,240 --> 00:01:39,199
to

46
00:01:36,720 --> 00:01:39,759
inject application and protocol specific

47
00:01:39,200 --> 00:01:42,159
code

48
00:01:39,759 --> 00:01:43,840
into a legitimate client application to

49
00:01:42,159 --> 00:01:46,479
reuse its sockets

50
00:01:43,840 --> 00:01:48,880
the injected code uses these sockets to

51
00:01:46,479 --> 00:01:51,520
send malicious queries to the remote

52
00:01:48,880 --> 00:01:52,320
endpoints the problem with this approach

53
00:01:51,520 --> 00:01:54,560
is that

54
00:01:52,320 --> 00:01:56,320
many existing edr systems such as

55
00:01:54,560 --> 00:01:58,960
windows defender atp

56
00:01:56,320 --> 00:02:00,320
can detect and prevent existing process

57
00:01:58,960 --> 00:02:02,399
injection

58
00:02:00,320 --> 00:02:03,600
techniques unlike the previous

59
00:02:02,399 --> 00:02:06,240
techniques in shadow move

60
00:02:03,600 --> 00:02:07,280
no new connection is created and also no

61
00:02:06,240 --> 00:02:09,359
extra

62
00:02:07,280 --> 00:02:12,160
authentication is performed as the core

63
00:02:09,360 --> 00:02:13,680
idea in shadow move is to reuse existing

64
00:02:12,160 --> 00:02:15,840
authenticated connections

65
00:02:13,680 --> 00:02:17,040
on the compromise system to perform

66
00:02:15,840 --> 00:02:20,560
lateral movement

67
00:02:17,040 --> 00:02:22,720
to reuse the existing connections

68
00:02:20,560 --> 00:02:24,239
shadow move process does not require to

69
00:02:22,720 --> 00:02:26,879
elevate its privilege

70
00:02:24,239 --> 00:02:29,280
moreover on windows it does not inject

71
00:02:26,879 --> 00:02:31,599
any code into legitimate processes

72
00:02:29,280 --> 00:02:33,200
last but not least shadow move is

73
00:02:31,599 --> 00:02:35,679
application agnostic

74
00:02:33,200 --> 00:02:36,879
in the sense that it does not need any

75
00:02:35,680 --> 00:02:39,680
prior knowledge

76
00:02:36,879 --> 00:02:41,040
about the implementation details such as

77
00:02:39,680 --> 00:02:45,280
memory layout of its

78
00:02:41,040 --> 00:02:48,079
target processes before getting into

79
00:02:45,280 --> 00:02:49,360
details let's uh take a brief overview

80
00:02:48,080 --> 00:02:51,519
on

81
00:02:49,360 --> 00:02:52,720
how shadow move replicates itself to a

82
00:02:51,519 --> 00:02:55,120
remote system

83
00:02:52,720 --> 00:02:57,359
suppose on a compromised system a client

84
00:02:55,120 --> 00:02:59,200
is connected to a remote server and

85
00:02:57,360 --> 00:03:03,040
shadow move process is running

86
00:02:59,200 --> 00:03:06,000
the client process uses its

87
00:03:03,040 --> 00:03:08,079
socket to send an a request to the

88
00:03:06,000 --> 00:03:09,519
remote server and also to receive the

89
00:03:08,080 --> 00:03:12,640
corresponding response

90
00:03:09,519 --> 00:03:15,519
from the server shadow move

91
00:03:12,640 --> 00:03:16,839
first duplicates the socket owned by the

92
00:03:15,519 --> 00:03:19,519
client

93
00:03:16,840 --> 00:03:22,720
process shadow move can peak from

94
00:03:19,519 --> 00:03:24,400
this uh duplicated sockets to a sniff

95
00:03:22,720 --> 00:03:27,519
the server responses without

96
00:03:24,400 --> 00:03:27,519
interrupting the client

97
00:03:29,680 --> 00:03:33,680
however to send a request to the remote

98
00:03:32,319 --> 00:03:36,159
server shadow move should

99
00:03:33,680 --> 00:03:38,080
suspend the client process to prevent

100
00:03:36,159 --> 00:03:40,879
the possibility of colliding with the

101
00:03:38,080 --> 00:03:42,400
client's traffic as they both share the

102
00:03:40,879 --> 00:03:47,040
same underlying input

103
00:03:42,400 --> 00:03:49,599
output buffers

104
00:03:47,040 --> 00:03:50,159
once the client is suspended shadowmove

105
00:03:49,599 --> 00:03:53,439
can

106
00:03:50,159 --> 00:03:55,760
send its request to the remote server

107
00:03:53,439 --> 00:03:56,720
to perform various operations such as

108
00:03:55,760 --> 00:03:59,439
upload or

109
00:03:56,720 --> 00:04:01,519
download a file and also executing a

110
00:03:59,439 --> 00:04:04,159
common

111
00:04:01,519 --> 00:04:06,239
to move laterally to the remote system

112
00:04:04,159 --> 00:04:10,560
it needs to first upload its

113
00:04:06,239 --> 00:04:10,560
program and then to execute itself

114
00:04:12,080 --> 00:04:16,239
now let's go deeper and see how shadow

115
00:04:14,720 --> 00:04:18,720
move works internally

116
00:04:16,238 --> 00:04:19,839
it is composed of six different modules

117
00:04:18,720 --> 00:04:21,919
peer handler

118
00:04:19,839 --> 00:04:24,159
is responsible to exchange network view

119
00:04:21,918 --> 00:04:27,120
with other shadow move instances

120
00:04:24,160 --> 00:04:29,040
connection detector module detects a new

121
00:04:27,120 --> 00:04:32,080
established connections they both

122
00:04:29,040 --> 00:04:33,199
rely on circuit duplicator to duplicate

123
00:04:32,080 --> 00:04:35,840
circuits

124
00:04:33,199 --> 00:04:36,400
network view manager updates the network

125
00:04:35,840 --> 00:04:39,280
view and

126
00:04:36,400 --> 00:04:40,638
socket pool based on the information

127
00:04:39,280 --> 00:04:43,599
received from peer

128
00:04:40,639 --> 00:04:44,720
handler and connection detector

129
00:04:43,600 --> 00:04:46,800
periodically

130
00:04:44,720 --> 00:04:48,960
lateral movement planner is launched

131
00:04:46,800 --> 00:04:52,160
based on the existing socket pool

132
00:04:48,960 --> 00:04:54,960
and current network status it comes

133
00:04:52,160 --> 00:04:55,520
up with the most appropriate action plan

134
00:04:54,960 --> 00:04:58,799
it then

135
00:04:55,520 --> 00:05:00,719
invoke lateral movement plan actuator to

136
00:04:58,800 --> 00:05:03,520
implement the plan

137
00:05:00,720 --> 00:05:05,360
modern operating systems offer a socket

138
00:05:03,520 --> 00:05:06,880
application however it requires the

139
00:05:05,360 --> 00:05:10,080
cooperation of the

140
00:05:06,880 --> 00:05:12,000
socket owner process let's suppose a

141
00:05:10,080 --> 00:05:13,120
client process on windows wants to

142
00:05:12,000 --> 00:05:15,280
connect to a

143
00:05:13,120 --> 00:05:18,160
remote server and then share the

144
00:05:15,280 --> 00:05:21,359
resulted socket with a partner process

145
00:05:18,160 --> 00:05:21,840
first it calls wsa circuit and wsa

146
00:05:21,360 --> 00:05:25,120
connect

147
00:05:21,840 --> 00:05:27,520
apis to connect to the remote server

148
00:05:25,120 --> 00:05:28,240
then it gets the process id of its

149
00:05:27,520 --> 00:05:31,280
partner

150
00:05:28,240 --> 00:05:32,960
next it calls a wsa duplicate socket to

151
00:05:31,280 --> 00:05:33,919
obtain necessary information to

152
00:05:32,960 --> 00:05:36,400
reconstruct the

153
00:05:33,919 --> 00:05:37,599
socket this information is passed to the

154
00:05:36,400 --> 00:05:40,960
partner process

155
00:05:37,600 --> 00:05:42,960
via an ipc channel their partner process

156
00:05:40,960 --> 00:05:44,799
uses the received information to

157
00:05:42,960 --> 00:05:47,359
reconstruct the circuit by calling

158
00:05:44,800 --> 00:05:47,919
wss socket the resulted socket can be

159
00:05:47,360 --> 00:05:50,160
used

160
00:05:47,919 --> 00:05:51,758
to communicate with the remote server

161
00:05:50,160 --> 00:05:55,199
usually the uh

162
00:05:51,759 --> 00:05:58,479
client process closes its socket after

163
00:05:55,199 --> 00:06:01,199
sharing it with its partner

164
00:05:58,479 --> 00:06:02,000
shadow move socket duplicator duplicates

165
00:06:01,199 --> 00:06:04,000
a circuit

166
00:06:02,000 --> 00:06:05,280
from an owner process without its

167
00:06:04,000 --> 00:06:07,919
cooperation

168
00:06:05,280 --> 00:06:09,758
on windows it takes the following 10

169
00:06:07,919 --> 00:06:10,400
steps to duplicate a socket from a

170
00:06:09,759 --> 00:06:12,000
process

171
00:06:10,400 --> 00:06:15,919
which is running under the same

172
00:06:12,000 --> 00:06:18,840
privilege as shadow move process

173
00:06:15,919 --> 00:06:19,680
to detect a new connections connection

174
00:06:18,840 --> 00:06:22,159
detector period

175
00:06:19,680 --> 00:06:24,240
periodically gets a list of established

176
00:06:22,160 --> 00:06:27,120
tcp connections and compare

177
00:06:24,240 --> 00:06:29,520
it with the most recent list it then

178
00:06:27,120 --> 00:06:30,479
filters out the new connections owned by

179
00:06:29,520 --> 00:06:32,479
processes

180
00:06:30,479 --> 00:06:34,560
that cannot be accessed by shadow move

181
00:06:32,479 --> 00:06:37,280
due to lack of privilege

182
00:06:34,560 --> 00:06:38,560
next it calls socket duplicators to

183
00:06:37,280 --> 00:06:42,638
duplicate the sockets

184
00:06:38,560 --> 00:06:42,639
corresponding to the new connections

185
00:06:43,199 --> 00:06:46,560
peer handler module is responsible for

186
00:06:45,520 --> 00:06:49,198
synchronizing

187
00:06:46,560 --> 00:06:50,400
shadow move network view and history of

188
00:06:49,199 --> 00:06:52,400
committed

189
00:06:50,400 --> 00:06:54,560
actions with the neighboring shadow move

190
00:06:52,400 --> 00:06:57,840
instances by neighboring i mean

191
00:06:54,560 --> 00:07:00,560
it's predecessor and successor nodes

192
00:06:57,840 --> 00:07:02,159
it listens for a synchronization signal

193
00:07:00,560 --> 00:07:04,800
on duplicated sockets

194
00:07:02,160 --> 00:07:05,840
up and receiving such a signal it

195
00:07:04,800 --> 00:07:08,960
suspend the

196
00:07:05,840 --> 00:07:10,400
on-air process and exchange the network

197
00:07:08,960 --> 00:07:13,758
view using a custom

198
00:07:10,400 --> 00:07:14,239
protocol it also pre periodically sends

199
00:07:13,759 --> 00:07:16,400
out

200
00:07:14,240 --> 00:07:18,319
its current network due to neighboring

201
00:07:16,400 --> 00:07:21,758
instances by first

202
00:07:18,319 --> 00:07:25,199
sending synchronization signals

203
00:07:21,759 --> 00:07:25,759
on the duplicated circuits considering

204
00:07:25,199 --> 00:07:28,720
the current

205
00:07:25,759 --> 00:07:30,080
network view current circuit pool and

206
00:07:28,720 --> 00:07:32,800
previous action plans

207
00:07:30,080 --> 00:07:34,400
performed by all shadow move instances

208
00:07:32,800 --> 00:07:36,880
lateral movement planner

209
00:07:34,400 --> 00:07:39,280
formulates the next uh lateral movement

210
00:07:36,880 --> 00:07:42,800
action plan based on a product

211
00:07:39,280 --> 00:07:45,599
uh program in this slide on the left

212
00:07:42,800 --> 00:07:46,879
you see the predicates that describe the

213
00:07:45,599 --> 00:07:49,360
current network view

214
00:07:46,879 --> 00:07:50,879
history of committed actions and prior

215
00:07:49,360 --> 00:07:53,440
knowledge shared among

216
00:07:50,879 --> 00:07:54,240
shadow move instances suppose the third

217
00:07:53,440 --> 00:07:57,360
system

218
00:07:54,240 --> 00:07:59,199
wants to see whether it can execute

219
00:07:57,360 --> 00:08:01,440
shadow move on the target

220
00:07:59,199 --> 00:08:02,639
in order to do so this system must

221
00:08:01,440 --> 00:08:05,680
evaluate commit

222
00:08:02,639 --> 00:08:08,479
execute operation predicate

223
00:08:05,680 --> 00:08:09,759
this predicate first checks whether the

224
00:08:08,479 --> 00:08:12,080
two systems are

225
00:08:09,759 --> 00:08:12,960
connected with an application protocol

226
00:08:12,080 --> 00:08:15,758
that allows

227
00:08:12,960 --> 00:08:17,680
execution of a file then checks whether

228
00:08:15,759 --> 00:08:18,400
there exists a chain of compromise

229
00:08:17,680 --> 00:08:21,599
systems

230
00:08:18,400 --> 00:08:22,400
originated from the foothold system that

231
00:08:21,599 --> 00:08:24,960
allow

232
00:08:22,400 --> 00:08:26,159
allows uploading files on the target

233
00:08:24,960 --> 00:08:28,560
system

234
00:08:26,160 --> 00:08:30,319
next it uh checks whether the shadow

235
00:08:28,560 --> 00:08:33,279
move program has already been

236
00:08:30,319 --> 00:08:34,080
uploaded on the target in this example

237
00:08:33,279 --> 00:08:36,958
all of these

238
00:08:34,080 --> 00:08:39,279
conditions are met as a result the third

239
00:08:36,958 --> 00:08:42,239
system can execute

240
00:08:39,279 --> 00:08:42,880
shadow move file uploaded by the second

241
00:08:42,240 --> 00:08:46,800
system

242
00:08:42,880 --> 00:08:48,800
this example shows how operation

243
00:08:46,800 --> 00:08:50,319
cooperation between shadow move

244
00:08:48,800 --> 00:08:52,880
instances can help them

245
00:08:50,320 --> 00:08:53,600
to compromise systems that they cannot

246
00:08:52,880 --> 00:08:56,320
compromise

247
00:08:53,600 --> 00:08:56,320
individually

248
00:08:56,959 --> 00:09:00,160
lateral movement plan actuator crafts a

249
00:08:59,440 --> 00:09:02,880
set of

250
00:09:00,160 --> 00:09:03,439
requests to perform the assigned action

251
00:09:02,880 --> 00:09:06,720
plan

252
00:09:03,440 --> 00:09:07,519
such as uploading a file to a remote ftp

253
00:09:06,720 --> 00:09:10,640
server

254
00:09:07,519 --> 00:09:12,800
in it has a set of protocol handlers

255
00:09:10,640 --> 00:09:14,959
each of which is responsible for a

256
00:09:12,800 --> 00:09:17,839
specific application protocol

257
00:09:14,959 --> 00:09:18,800
this example shows how ftp protocol

258
00:09:17,839 --> 00:09:21,440
handler

259
00:09:18,800 --> 00:09:22,319
uploads a file to a remote server using

260
00:09:21,440 --> 00:09:26,000
a socket

261
00:09:22,320 --> 00:09:29,040
duplicated from a ftp client

262
00:09:26,000 --> 00:09:31,760
we implemented prototypes of shadow move

263
00:09:29,040 --> 00:09:32,800
for windows and linux tested them on

264
00:09:31,760 --> 00:09:36,560
windows 10 and

265
00:09:32,800 --> 00:09:40,640
ubuntu 18. four

266
00:09:36,560 --> 00:09:43,439
the planner logic is implemented in swi

267
00:09:40,640 --> 00:09:45,040
product a demo of shadow move and

268
00:09:43,440 --> 00:09:47,519
leveraging ftp is

269
00:09:45,040 --> 00:09:49,279
available online and you can access it

270
00:09:47,519 --> 00:09:52,480
via the following link

271
00:09:49,279 --> 00:09:53,760
you can also reach us if you like to get

272
00:09:52,480 --> 00:09:57,279
the source code of shadow move

273
00:09:53,760 --> 00:09:59,839
prototypes now let's talk briefly on

274
00:09:57,279 --> 00:10:01,120
why shadow move is possible the first

275
00:09:59,839 --> 00:10:03,839
problem is

276
00:10:01,120 --> 00:10:05,680
conflicting between process isolation

277
00:10:03,839 --> 00:10:07,760
and resource sharing requirements on

278
00:10:05,680 --> 00:10:10,319
commodity operating system

279
00:10:07,760 --> 00:10:11,839
on one hand they require us to provide a

280
00:10:10,320 --> 00:10:14,399
resource

281
00:10:11,839 --> 00:10:16,560
sharing and on the other hand they have

282
00:10:14,399 --> 00:10:19,040
to protect these resources from

283
00:10:16,560 --> 00:10:21,040
user processes the second problem is

284
00:10:19,040 --> 00:10:23,439
lack of proper

285
00:10:21,040 --> 00:10:24,480
message integrity validation in many

286
00:10:23,440 --> 00:10:27,360
standard

287
00:10:24,480 --> 00:10:28,640
protocols allowing attackers to inject

288
00:10:27,360 --> 00:10:30,720
arbitrary

289
00:10:28,640 --> 00:10:33,519
requests into an established connection

290
00:10:30,720 --> 00:10:35,600
without being noticed

291
00:10:33,519 --> 00:10:36,959
we tested shadow move against top five

292
00:10:35,600 --> 00:10:40,240
antiviruses

293
00:10:36,959 --> 00:10:41,119
and three ideas and two edr systems and

294
00:10:40,240 --> 00:10:43,440
none of them

295
00:10:41,120 --> 00:10:44,880
were able to detect shadow move

296
00:10:43,440 --> 00:10:47,600
operation

297
00:10:44,880 --> 00:10:48,640
like any solution shadow move also has

298
00:10:47,600 --> 00:10:50,800
some limitations

299
00:10:48,640 --> 00:10:52,720
first it cannot hijack connections that

300
00:10:50,800 --> 00:10:55,760
implement user level encryption

301
00:10:52,720 --> 00:10:58,560
like ssh clients second

302
00:10:55,760 --> 00:11:00,240
in winram case the shadow move should

303
00:10:58,560 --> 00:11:03,279
duplicate the circuit

304
00:11:00,240 --> 00:11:06,240
before the start of negotiation phase

305
00:11:03,279 --> 00:11:06,720
so that it can learn the shell id third

306
00:11:06,240 --> 00:11:09,600
our

307
00:11:06,720 --> 00:11:10,720
current prototype on linux relies on

308
00:11:09,600 --> 00:11:14,000
code injection

309
00:11:10,720 --> 00:11:14,640
to duplicate a circuit thank you very

310
00:11:14,000 --> 00:11:17,760
much for

311
00:11:14,640 --> 00:11:19,199
listening to our presentation please

312
00:11:17,760 --> 00:11:29,839
contact us if you

313
00:11:19,200 --> 00:11:29,839
need further information

314
00:11:30,480 --> 00:11:32,560
you

