1
00:00:08,559 --> 00:00:11,360
hey everyone

2
00:00:09,519 --> 00:00:13,519
my name is shawnesh and i'm going to be

3
00:00:11,360 --> 00:00:14,799
presenting a security evaluation of

4
00:00:13,519 --> 00:00:17,600
browser-based

5
00:00:14,799 --> 00:00:19,359
password managers passwords are still

6
00:00:17,600 --> 00:00:21,279
the dominant form of authentication on

7
00:00:19,359 --> 00:00:22,480
the web but they have several serious

8
00:00:21,279 --> 00:00:25,039
shortcomings

9
00:00:22,480 --> 00:00:25,680
strong passwords have to be long and

10
00:00:25,039 --> 00:00:28,480
random

11
00:00:25,680 --> 00:00:29,359
which makes them hard both to create and

12
00:00:28,480 --> 00:00:32,079
to remember

13
00:00:29,359 --> 00:00:34,000
as a normal user password managers can

14
00:00:32,079 --> 00:00:35,040
help users generate strong unique

15
00:00:34,000 --> 00:00:37,520
passwords

16
00:00:35,040 --> 00:00:38,559
but how secure are the password managers

17
00:00:37,520 --> 00:00:40,160
themselves

18
00:00:38,559 --> 00:00:42,320
that's the question we're going to be

19
00:00:40,160 --> 00:00:44,000
addressing today

20
00:00:42,320 --> 00:00:45,760
we're going to look at three stages of

21
00:00:44,000 --> 00:00:49,039
the password manager lifecycle

22
00:00:45,760 --> 00:00:49,360
password generation storage and autofill

23
00:00:49,039 --> 00:00:51,120
so

24
00:00:49,360 --> 00:00:53,360
password managers should generate strong

25
00:00:51,120 --> 00:00:54,718
unique passwords they should store those

26
00:00:53,360 --> 00:00:56,079
passwords securely

27
00:00:54,719 --> 00:00:58,719
and then they should autofill those

28
00:00:56,079 --> 00:01:00,160
passwords securely into login forms in

29
00:00:58,719 --> 00:01:01,680
the browser

30
00:01:00,160 --> 00:01:04,080
we looked at three different types of

31
00:01:01,680 --> 00:01:06,080
password managers standalone apps like

32
00:01:04,080 --> 00:01:08,000
keepassxc

33
00:01:06,080 --> 00:01:09,119
extension-based password managers like

34
00:01:08,000 --> 00:01:11,680
lastpass and one

35
00:01:09,119 --> 00:01:13,520
password and browser-based password

36
00:01:11,680 --> 00:01:17,200
managers like firefox

37
00:01:13,520 --> 00:01:18,640
and chrome a few things to keep in mind

38
00:01:17,200 --> 00:01:21,119
app based password managers like

39
00:01:18,640 --> 00:01:24,159
keepassxc don't automatically

40
00:01:21,119 --> 00:01:26,720
sync your passwords across devices

41
00:01:24,159 --> 00:01:27,680
you have to put your password file on

42
00:01:26,720 --> 00:01:31,119
google drive

43
00:01:27,680 --> 00:01:32,000
or on a usb key in order to transfer it

44
00:01:31,119 --> 00:01:34,079
and contrast

45
00:01:32,000 --> 00:01:35,040
extension-based and browser-based

46
00:01:34,079 --> 00:01:37,360
password managers

47
00:01:35,040 --> 00:01:38,960
automatically sync your passwords across

48
00:01:37,360 --> 00:01:41,439
devices

49
00:01:38,960 --> 00:01:43,439
also keep in mind the browser-based

50
00:01:41,439 --> 00:01:45,439
password managers generally lack support

51
00:01:43,439 --> 00:01:46,398
for password generation and when they do

52
00:01:45,439 --> 00:01:50,240
support it

53
00:01:46,399 --> 00:01:52,320
they lack strong configuration options

54
00:01:50,240 --> 00:01:54,158
browser-based password managers also

55
00:01:52,320 --> 00:01:56,559
lack a lockable vault which means they

56
00:01:54,159 --> 00:01:59,040
don't use a true master password

57
00:01:56,560 --> 00:02:00,880
normally the master password is used via

58
00:01:59,040 --> 00:02:02,960
a key derivation function

59
00:02:00,880 --> 00:02:04,158
to create an encryption key that then

60
00:02:02,960 --> 00:02:06,240
protects your vault

61
00:02:04,159 --> 00:02:07,200
however most browser-based password

62
00:02:06,240 --> 00:02:09,758
managers

63
00:02:07,200 --> 00:02:12,720
don't use a true master password to

64
00:02:09,758 --> 00:02:15,440
protect your passwords

65
00:02:12,720 --> 00:02:17,040
also extension-based password managers

66
00:02:15,440 --> 00:02:19,120
are the only ones that have assessment

67
00:02:17,040 --> 00:02:20,879
tools and what an assessment tool does

68
00:02:19,120 --> 00:02:22,640
is it tells you which of the passwords

69
00:02:20,879 --> 00:02:25,440
in your vault are weak

70
00:02:22,640 --> 00:02:27,279
and which of your accounts may have been

71
00:02:25,440 --> 00:02:29,120
compromised

72
00:02:27,280 --> 00:02:30,959
so what we're going to do for each of

73
00:02:29,120 --> 00:02:31,519
the three stages of the password manager

74
00:02:30,959 --> 00:02:33,840
life's

75
00:02:31,519 --> 00:02:35,200
password life cycle is to look at

76
00:02:33,840 --> 00:02:37,680
recommended behaviors

77
00:02:35,200 --> 00:02:39,119
so what should the password manager do

78
00:02:37,680 --> 00:02:41,680
and then some of the

79
00:02:39,120 --> 00:02:42,560
security concerns that we found in each

80
00:02:41,680 --> 00:02:46,000
stage

81
00:02:42,560 --> 00:02:47,920
of the life cycle starting with autofill

82
00:02:46,000 --> 00:02:50,080
we recommend that password managers

83
00:02:47,920 --> 00:02:52,319
require user interaction before

84
00:02:50,080 --> 00:02:54,000
auto filling credentials this prevents

85
00:02:52,319 --> 00:02:55,920
automatic credential scraping

86
00:02:54,000 --> 00:02:57,680
as well as increasing the probability

87
00:02:55,920 --> 00:02:59,040
that a user can detect if something

88
00:02:57,680 --> 00:03:01,120
fishy is going on

89
00:02:59,040 --> 00:03:03,040
with a login form we also believe

90
00:03:01,120 --> 00:03:06,239
password manager should refuse to fill

91
00:03:03,040 --> 00:03:07,200
forms inside of iframes because this

92
00:03:06,239 --> 00:03:09,760
reduces

93
00:03:07,200 --> 00:03:11,599
the attack surface passer managers

94
00:03:09,760 --> 00:03:14,319
should also refuse to submit passwords

95
00:03:11,599 --> 00:03:17,440
over insecure connections like http

96
00:03:14,319 --> 00:03:18,159
or broken https and they should also

97
00:03:17,440 --> 00:03:19,840
avoid

98
00:03:18,159 --> 00:03:21,920
filling suspicious forms now what we

99
00:03:19,840 --> 00:03:22,640
mean by that is if when you save your

100
00:03:21,920 --> 00:03:25,760
password

101
00:03:22,640 --> 00:03:27,679
a form is being submitted to one

102
00:03:25,760 --> 00:03:29,359
address if when you go to fill your

103
00:03:27,680 --> 00:03:31,360
password if that's changed or if

104
00:03:29,360 --> 00:03:34,720
something else about the form is changed

105
00:03:31,360 --> 00:03:37,920
the password manager should not fill

106
00:03:34,720 --> 00:03:40,720
that form so a few things to note

107
00:03:37,920 --> 00:03:41,760
firefox both did not require user

108
00:03:40,720 --> 00:03:44,560
interaction

109
00:03:41,760 --> 00:03:45,920
and it would fill in cross origin

110
00:03:44,560 --> 00:03:48,080
iframes and we're going to show you an

111
00:03:45,920 --> 00:03:51,040
example of why that's really bad

112
00:03:48,080 --> 00:03:53,200
here in a second we also have found that

113
00:03:51,040 --> 00:03:55,359
only one password in safari always

114
00:03:53,200 --> 00:03:56,399
required user interaction so hats off to

115
00:03:55,360 --> 00:03:58,400
them

116
00:03:56,400 --> 00:04:00,480
and all of the extension based password

117
00:03:58,400 --> 00:04:04,159
managers on desktop

118
00:04:00,480 --> 00:04:06,879
refused to fill cross-origin iframes

119
00:04:04,159 --> 00:04:08,480
so here's a demo in firefox of why it's

120
00:04:06,879 --> 00:04:10,560
such a bad idea

121
00:04:08,480 --> 00:04:12,720
not to require user interaction and in

122
00:04:10,560 --> 00:04:14,879
particular to combine that

123
00:04:12,720 --> 00:04:16,880
with auto filling cross origin iframe so

124
00:04:14,879 --> 00:04:18,639
what i'm doing right now is showing you

125
00:04:16,880 --> 00:04:21,279
the credentials that i've stored here

126
00:04:18,639 --> 00:04:23,120
inside firefox

127
00:04:21,279 --> 00:04:25,359
here's the code for the website so you

128
00:04:23,120 --> 00:04:28,160
see there's a visible iframe

129
00:04:25,360 --> 00:04:29,360
and there's also a hidden iframe and

130
00:04:28,160 --> 00:04:30,880
what you're going to see is that when

131
00:04:29,360 --> 00:04:32,720
this website is opened up

132
00:04:30,880 --> 00:04:34,560
the credentials from both websites are

133
00:04:32,720 --> 00:04:37,040
going to be automatically stolen

134
00:04:34,560 --> 00:04:38,560
with no user interaction so as you saw

135
00:04:37,040 --> 00:04:39,360
there both of their credentials were

136
00:04:38,560 --> 00:04:41,520
stolen

137
00:04:39,360 --> 00:04:43,199
there is a visible iframe right here and

138
00:04:41,520 --> 00:04:44,560
an invisible one here

139
00:04:43,199 --> 00:04:46,560
the credentials were automatically

140
00:04:44,560 --> 00:04:48,240
stolen and the reason that's so bad is

141
00:04:46,560 --> 00:04:49,680
imagine that you had a hundred invisible

142
00:04:48,240 --> 00:04:50,560
iframes with a hundred different

143
00:04:49,680 --> 00:04:52,160
websites

144
00:04:50,560 --> 00:04:53,919
you could theoretically clean out

145
00:04:52,160 --> 00:04:57,840
someone's password manager

146
00:04:53,919 --> 00:04:57,840
in the matter of milliseconds

147
00:05:00,000 --> 00:05:04,240
next we're going to talk about

148
00:05:01,039 --> 00:05:06,080
generation and so for generation

149
00:05:04,240 --> 00:05:07,600
password generators should create

150
00:05:06,080 --> 00:05:10,080
passwords that are resilient against

151
00:05:07,600 --> 00:05:11,919
both online and offline attack

152
00:05:10,080 --> 00:05:14,159
for online resistance that's 10 to the

153
00:05:11,919 --> 00:05:15,198
six guesses and for offline it's 10 to

154
00:05:14,160 --> 00:05:17,039
the 14th

155
00:05:15,199 --> 00:05:18,639
we also believe password managers should

156
00:05:17,039 --> 00:05:20,400
preserve safe settings

157
00:05:18,639 --> 00:05:22,080
and what we mean by that is that let's

158
00:05:20,400 --> 00:05:23,440
say your password manager has a default

159
00:05:22,080 --> 00:05:25,039
length of 20

160
00:05:23,440 --> 00:05:27,680
with letters symbols and digits well

161
00:05:25,039 --> 00:05:29,919
that's secure but then let's say

162
00:05:27,680 --> 00:05:31,280
to meet a weak password policy you

163
00:05:29,919 --> 00:05:34,320
change your settings

164
00:05:31,280 --> 00:05:35,919
to length 8 with only letters and digits

165
00:05:34,320 --> 00:05:38,400
we believe the password manager should

166
00:05:35,919 --> 00:05:40,719
restore those default secure settings

167
00:05:38,400 --> 00:05:42,320
to prevent you from creating a bunch of

168
00:05:40,720 --> 00:05:45,360
weak passwords over

169
00:05:42,320 --> 00:05:47,919
and over again and what we found is that

170
00:05:45,360 --> 00:05:50,639
most password managers do not preserve

171
00:05:47,919 --> 00:05:52,000
those safe settings we also found that

172
00:05:50,639 --> 00:05:55,120
password managers use very

173
00:05:52,000 --> 00:05:57,919
different symbol sets now what symbol

174
00:05:55,120 --> 00:06:00,880
set you use could impact both security

175
00:05:57,919 --> 00:06:01,840
and usability so this is an area for

176
00:06:00,880 --> 00:06:04,800
future research

177
00:06:01,840 --> 00:06:06,719
what symbol set should be used and that

178
00:06:04,800 --> 00:06:08,479
changes even depending on what device

179
00:06:06,720 --> 00:06:12,160
you're planning to use the password

180
00:06:08,479 --> 00:06:14,318
for we also found these random but weak

181
00:06:12,160 --> 00:06:16,639
passwords so most randomly generated

182
00:06:14,319 --> 00:06:17,919
passwords were resilient to both online

183
00:06:16,639 --> 00:06:20,240
and offline attack

184
00:06:17,919 --> 00:06:22,159
so generally uh passwords were strong

185
00:06:20,240 --> 00:06:25,199
however a small portion

186
00:06:22,160 --> 00:06:26,560
were trivially guessed by brute force

187
00:06:25,199 --> 00:06:28,720
attacks

188
00:06:26,560 --> 00:06:30,560
now with lastpass they have 17 million

189
00:06:28,720 --> 00:06:32,479
users and based on the data that we

190
00:06:30,560 --> 00:06:34,400
found if each of those users generated

191
00:06:32,479 --> 00:06:37,120
one password uh

192
00:06:34,400 --> 00:06:38,880
730 weak passwords would be out in the

193
00:06:37,120 --> 00:06:39,919
wild and this is just unacceptable and

194
00:06:38,880 --> 00:06:41,280
i'll show you why

195
00:06:39,919 --> 00:06:43,758
so take a look at some of these weak

196
00:06:41,280 --> 00:06:46,638
passwords this is length 8 from dashlane

197
00:06:43,759 --> 00:06:48,479
i mean that looks like that's even worse

198
00:06:46,639 --> 00:06:50,319
than what someone would come up with

199
00:06:48,479 --> 00:06:52,159
themselves right

200
00:06:50,319 --> 00:06:53,840
then we have something like this sawyer

201
00:06:52,160 --> 00:06:55,520
it just looks like someone's name again

202
00:06:53,840 --> 00:06:57,359
this is randomly generated

203
00:06:55,520 --> 00:06:59,120
but it looks like it's a weak password

204
00:06:57,360 --> 00:07:01,759
created by a human

205
00:06:59,120 --> 00:07:02,319
we have this from one password x lots of

206
00:07:01,759 --> 00:07:05,840
m's

207
00:07:02,319 --> 00:07:07,360
in there and then we have mr davis here

208
00:07:05,840 --> 00:07:08,960
so again these are all randomly

209
00:07:07,360 --> 00:07:10,720
generated but they look like they were

210
00:07:08,960 --> 00:07:13,599
created by users which makes them

211
00:07:10,720 --> 00:07:14,560
very easy for password cracking tools to

212
00:07:13,599 --> 00:07:16,960
guess

213
00:07:14,560 --> 00:07:17,599
so one way to get rid of this issue is

214
00:07:16,960 --> 00:07:19,440
to

215
00:07:17,599 --> 00:07:21,919
increase the minimum length for

216
00:07:19,440 --> 00:07:22,639
passwords so a 10 character password

217
00:07:21,919 --> 00:07:24,479
would be

218
00:07:22,639 --> 00:07:26,639
resilient to online attacks it would

219
00:07:24,479 --> 00:07:29,599
have none of these weak passwords

220
00:07:26,639 --> 00:07:30,880
for online resistance and length 18

221
00:07:29,599 --> 00:07:31,680
would get rid of any of these weak

222
00:07:30,880 --> 00:07:33,680
passwords

223
00:07:31,680 --> 00:07:36,080
for offline resistance another way to

224
00:07:33,680 --> 00:07:39,440
fix this issue would be to filter out

225
00:07:36,080 --> 00:07:40,000
these weak passwords the next area we're

226
00:07:39,440 --> 00:07:42,240
going to

227
00:07:40,000 --> 00:07:44,400
look at is storage and for storage we

228
00:07:42,240 --> 00:07:46,080
recommend a strong master password

229
00:07:44,400 --> 00:07:47,039
because the master password represents a

230
00:07:46,080 --> 00:07:49,039
single point

231
00:07:47,039 --> 00:07:51,599
of failure a strong key derivation

232
00:07:49,039 --> 00:07:54,878
function and that all metadata should be

233
00:07:51,599 --> 00:07:56,800
encrypted a few things that we found uh

234
00:07:54,879 --> 00:07:59,120
most password managers don't really

235
00:07:56,800 --> 00:08:02,560
require a strong master password

236
00:07:59,120 --> 00:08:04,319
the extension based ones do have rules

237
00:08:02,560 --> 00:08:06,000
for their map policies for their master

238
00:08:04,319 --> 00:08:07,120
passwords but we did not consider them

239
00:08:06,000 --> 00:08:10,160
particularly

240
00:08:07,120 --> 00:08:12,080
strong we also found that most of the

241
00:08:10,160 --> 00:08:14,800
browser-based password managers did not

242
00:08:12,080 --> 00:08:17,359
encrypt a lot of metadata such as url

243
00:08:14,800 --> 00:08:19,280
username and creation time and that

244
00:08:17,360 --> 00:08:23,280
firefox used triple des and

245
00:08:19,280 --> 00:08:24,799
sha-1 very weak algorithms there for

246
00:08:23,280 --> 00:08:26,799
their key derivation

247
00:08:24,800 --> 00:08:28,319
function to wrap up we're going to look

248
00:08:26,800 --> 00:08:29,840
at some recommendations for password

249
00:08:28,319 --> 00:08:32,640
managers and discuss

250
00:08:29,840 --> 00:08:34,478
future work so the three recommendations

251
00:08:32,640 --> 00:08:35,279
we have the major recommendations from

252
00:08:34,479 --> 00:08:36,719
each area

253
00:08:35,279 --> 00:08:38,320
that we looked at or that password

254
00:08:36,719 --> 00:08:40,399
managers should require

255
00:08:38,320 --> 00:08:41,440
user interaction for autofill they

256
00:08:40,399 --> 00:08:43,279
should filter

257
00:08:41,440 --> 00:08:45,040
weak passwords these random but weak

258
00:08:43,279 --> 00:08:46,320
passwords during generation

259
00:08:45,040 --> 00:08:48,800
and they should have better master

260
00:08:46,320 --> 00:08:51,040
password policies for storage

261
00:08:48,800 --> 00:08:52,560
for future work one major area that we

262
00:08:51,040 --> 00:08:54,640
think is going to be very fruitful

263
00:08:52,560 --> 00:08:56,560
is a browser browser-supported password

264
00:08:54,640 --> 00:08:59,199
managers so in many cases

265
00:08:56,560 --> 00:09:01,199
autofill could be more secure if

266
00:08:59,200 --> 00:09:03,200
browsers did a few things to support

267
00:09:01,200 --> 00:09:04,320
password managers and one example of

268
00:09:03,200 --> 00:09:06,959
what they could do

269
00:09:04,320 --> 00:09:07,360
is say for autofill and what this does

270
00:09:06,959 --> 00:09:09,518
is

271
00:09:07,360 --> 00:09:11,360
the password manager autofills a dummy

272
00:09:09,519 --> 00:09:13,040
variable into the

273
00:09:11,360 --> 00:09:14,880
login form instead of the actual

274
00:09:13,040 --> 00:09:16,160
password and that dummy variable is

275
00:09:14,880 --> 00:09:18,640
replaced on the wire

276
00:09:16,160 --> 00:09:20,640
this prevents the kind of xss attacks

277
00:09:18,640 --> 00:09:22,560
that we showed you with firefox

278
00:09:20,640 --> 00:09:24,319
we also think research derived character

279
00:09:22,560 --> 00:09:25,839
sets would be fruitful

280
00:09:24,320 --> 00:09:28,160
because if you think about it you enter

281
00:09:25,839 --> 00:09:31,920
passwords on a lot of different devices

282
00:09:28,160 --> 00:09:33,360
tvs iphones ipads and where you're going

283
00:09:31,920 --> 00:09:35,199
to enter that password may

284
00:09:33,360 --> 00:09:37,040
change what the password should look

285
00:09:35,200 --> 00:09:37,760
like and there are also some questions

286
00:09:37,040 --> 00:09:40,640
about which

287
00:09:37,760 --> 00:09:42,640
character sets are ideal uh for both

288
00:09:40,640 --> 00:09:43,360
usability and security so how can we

289
00:09:42,640 --> 00:09:45,439
balance

290
00:09:43,360 --> 00:09:46,800
usability and security with character

291
00:09:45,440 --> 00:09:47,760
sets and the way that passwords are

292
00:09:46,800 --> 00:09:50,079
generated

293
00:09:47,760 --> 00:09:52,000
we also think html supported password

294
00:09:50,080 --> 00:09:53,920
generation where the browser

295
00:09:52,000 --> 00:09:55,040
has some markup language to tell the

296
00:09:53,920 --> 00:09:57,360
password manager

297
00:09:55,040 --> 00:09:58,800
what the password policy is and some

298
00:09:57,360 --> 00:09:59,440
other things of that nature would be

299
00:09:58,800 --> 00:10:01,920
useful

300
00:09:59,440 --> 00:10:04,000
and finally that a lot of these things

301
00:10:01,920 --> 00:10:06,800
should be examined on mobile password

302
00:10:04,000 --> 00:10:09,120
managers so how secure are password

303
00:10:06,800 --> 00:10:11,839
managers on devices like android

304
00:10:09,120 --> 00:10:13,680
and ios we thank you guys so much for

305
00:10:11,839 --> 00:10:16,320
joining us and if you want to reach out

306
00:10:13,680 --> 00:10:19,839
i can be contacted at the email address

307
00:10:16,320 --> 00:10:19,839
below thanks again

