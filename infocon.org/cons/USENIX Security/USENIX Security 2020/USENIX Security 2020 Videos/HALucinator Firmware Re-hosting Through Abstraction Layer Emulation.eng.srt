1
00:00:08,960 --> 00:00:12,000
i'm abe clements and i'll be

2
00:00:10,400 --> 00:00:13,280
i ain't eric gustafson will be

3
00:00:12,000 --> 00:00:14,799
presenting hallucinated former

4
00:00:13,280 --> 00:00:15,440
re-hosting through abstraction layer

5
00:00:14,799 --> 00:00:17,759
emulation

6
00:00:15,440 --> 00:00:18,960
both eric and i worked on this work

7
00:00:17,760 --> 00:00:20,080
equally

8
00:00:18,960 --> 00:00:21,920
if you think about the internet of

9
00:00:20,080 --> 00:00:23,759
things we have millions of devices that

10
00:00:21,920 --> 00:00:25,680
we use throughout our lives that are

11
00:00:23,760 --> 00:00:28,000
interconnected and vulnerable

12
00:00:25,680 --> 00:00:30,240
vulnerabilities in these systems

13
00:00:28,000 --> 00:00:32,320
can compromise cause compromise

14
00:00:30,240 --> 00:00:34,320
compromise private information

15
00:00:32,320 --> 00:00:35,920
uh destroy equipment and disrupt our

16
00:00:34,320 --> 00:00:37,520
daily lives

17
00:00:35,920 --> 00:00:38,879
if you look inside of these internet of

18
00:00:37,520 --> 00:00:39,920
things devices you'll find a bunch of

19
00:00:38,879 --> 00:00:42,800
microcontrollers

20
00:00:39,920 --> 00:00:44,800
running firmware a subset of this

21
00:00:42,800 --> 00:00:46,480
firmware is bare metal firmware

22
00:00:44,800 --> 00:00:48,399
where everything is compiled into a

23
00:00:46,480 --> 00:00:49,839
single monolithic binary that runs

24
00:00:48,399 --> 00:00:52,480
directly on the hardware

25
00:00:49,840 --> 00:00:54,160
and accesses all the hardware through

26
00:00:52,480 --> 00:00:55,440
direct memory reads and writes so it has

27
00:00:54,160 --> 00:00:56,879
raw hardware access

28
00:00:55,440 --> 00:00:57,839
if you compare that to like a linux

29
00:00:56,879 --> 00:00:59,680
system where you have a bunch of

30
00:00:57,840 --> 00:01:01,440
different sections within your binary

31
00:00:59,680 --> 00:01:03,199
and kernel abstractions that are used

32
00:01:01,440 --> 00:01:06,000
for hardware interaction

33
00:01:03,199 --> 00:01:07,679
we know very little so if we want to

34
00:01:06,000 --> 00:01:09,360
assess bare metal firmware

35
00:01:07,680 --> 00:01:10,880
the options we have currently have are

36
00:01:09,360 --> 00:01:12,720
to look at hardware

37
00:01:10,880 --> 00:01:15,119
so we can tear apart the hardware to get

38
00:01:12,720 --> 00:01:16,000
debug access do dynamic analysis using

39
00:01:15,119 --> 00:01:17,680
that debugger

40
00:01:16,000 --> 00:01:19,680
however for security reasons this should

41
00:01:17,680 --> 00:01:20,880
be disabled and if it is present it's

42
00:01:19,680 --> 00:01:22,479
very limited maybe a handful of

43
00:01:20,880 --> 00:01:24,720
breakpoints

44
00:01:22,479 --> 00:01:26,400
the dependency on hardware also limits

45
00:01:24,720 --> 00:01:27,439
parallelism we can only run as many

46
00:01:26,400 --> 00:01:29,280
instances as

47
00:01:27,439 --> 00:01:30,720
physical devices that we have other

48
00:01:29,280 --> 00:01:32,240
limitations to this approach are

49
00:01:30,720 --> 00:01:34,400
the cost can be hundreds to tens of

50
00:01:32,240 --> 00:01:36,079
thousands of dollars per device

51
00:01:34,400 --> 00:01:38,079
and they're brittle it can easily break

52
00:01:36,079 --> 00:01:40,320
so what about re-hosting so re-hosting

53
00:01:38,079 --> 00:01:42,158
is the process of taking firmware

54
00:01:40,320 --> 00:01:44,398
from an embedded system and running it

55
00:01:42,159 --> 00:01:46,399
on an emulator on your desktop

56
00:01:44,399 --> 00:01:47,600
well this can this this can provide

57
00:01:46,399 --> 00:01:49,439
scaling

58
00:01:47,600 --> 00:01:51,039
however rehosting firmware is a

59
00:01:49,439 --> 00:01:52,559
challenging problem and hallucinator's

60
00:01:51,040 --> 00:01:53,520
goal is to enable scalable firmware

61
00:01:52,560 --> 00:01:57,200
rehosting

62
00:01:53,520 --> 00:01:59,520
without requiring specialized hardware

63
00:01:57,200 --> 00:02:00,479
prohibits are the biggest problem to

64
00:01:59,520 --> 00:02:02,640
enabling

65
00:02:00,479 --> 00:02:03,840
scalable rehosting of firmware we

66
00:02:02,640 --> 00:02:06,719
currently have qmu

67
00:02:03,840 --> 00:02:07,520
which is a cpu emulator that enables us

68
00:02:06,719 --> 00:02:10,239
to

69
00:02:07,520 --> 00:02:11,840
execute the instruction sets of cpus and

70
00:02:10,239 --> 00:02:12,959
hence a handful of prohibits

71
00:02:11,840 --> 00:02:14,959
however if you look at a modern

72
00:02:12,959 --> 00:02:17,920
microcontroller like the one on the left

73
00:02:14,959 --> 00:02:19,520
it has 20 to 30 different peripherals

74
00:02:17,920 --> 00:02:22,480
that it can access and interact with

75
00:02:19,520 --> 00:02:24,640
and the firmware by being bare metal

76
00:02:22,480 --> 00:02:27,119
directly accesses all these peripherals

77
00:02:24,640 --> 00:02:28,399
and will not operate without them that's

78
00:02:27,120 --> 00:02:29,760
just a single device

79
00:02:28,400 --> 00:02:32,080
if we look at mouse or common

80
00:02:29,760 --> 00:02:33,040
electronics distributor it lists for

81
00:02:32,080 --> 00:02:34,720
over 44

82
00:02:33,040 --> 00:02:36,879
000 different microcontrollers that they

83
00:02:34,720 --> 00:02:38,720
have available for sale today

84
00:02:36,879 --> 00:02:40,399
across 35 different data sheets which

85
00:02:38,720 --> 00:02:42,000
kind of represents the number of product

86
00:02:40,400 --> 00:02:44,239
families so there's still a great

87
00:02:42,000 --> 00:02:47,280
amount of diversity between its devices

88
00:02:44,239 --> 00:02:49,280
and across 26 different manufacturers

89
00:02:47,280 --> 00:02:50,480
so when we look at trying to scalably

90
00:02:49,280 --> 00:02:52,720
re-host firmware

91
00:02:50,480 --> 00:02:53,840
the primarily challenge is that without

92
00:02:52,720 --> 00:02:55,840
peripherals

93
00:02:53,840 --> 00:02:57,120
bare metal form will run in fact in our

94
00:02:55,840 --> 00:02:58,800
evaluation we found that

95
00:02:57,120 --> 00:03:00,720
most of our firmware would only execute

96
00:02:58,800 --> 00:03:03,120
eight basic blocks if we didn't provide

97
00:03:00,720 --> 00:03:04,000
support for peripherals and then there

98
00:03:03,120 --> 00:03:05,920
are tens of thousands

99
00:03:04,000 --> 00:03:07,599
of peripherals and combinations thereof

100
00:03:05,920 --> 00:03:10,958
that any given that firmware

101
00:03:07,599 --> 00:03:13,200
needs to use to operate so how can we

102
00:03:10,959 --> 00:03:15,280
scalably re-host firmware

103
00:03:13,200 --> 00:03:16,480
if we look at the way developers develop

104
00:03:15,280 --> 00:03:20,159
their software we get

105
00:03:16,480 --> 00:03:21,359
a clue so developers and manufacturers

106
00:03:20,159 --> 00:03:23,200
of microcontrollers

107
00:03:21,360 --> 00:03:24,480
put out software define uh software

108
00:03:23,200 --> 00:03:26,480
development kits and hardware

109
00:03:24,480 --> 00:03:31,200
abstraction libraries within them

110
00:03:26,480 --> 00:03:32,879
to ease and simplify ease implementation

111
00:03:31,200 --> 00:03:34,879
this includes like device drivers that

112
00:03:32,879 --> 00:03:35,518
abstract away the level details of buses

113
00:03:34,879 --> 00:03:38,159
and hard

114
00:03:35,519 --> 00:03:38,959
different peripherals and these

115
00:03:38,159 --> 00:03:40,720
hardwares are

116
00:03:38,959 --> 00:03:42,159
these hardware abstraction libraries are

117
00:03:40,720 --> 00:03:46,560
everywhere

118
00:03:42,159 --> 00:03:48,959
so nxp stm atmel all provided

119
00:03:46,560 --> 00:03:50,319
sdks and hardware abstraction libraries

120
00:03:48,959 --> 00:03:52,080
and those are also embedded inside

121
00:03:50,319 --> 00:03:54,480
common operating systems like riot and

122
00:03:52,080 --> 00:03:56,159
reno and friartos

123
00:03:54,480 --> 00:03:58,319
hallucinator leverages these hardware

124
00:03:56,159 --> 00:04:00,879
abstraction layers

125
00:03:58,319 --> 00:04:02,159
and enables replacing them during

126
00:04:00,879 --> 00:04:03,040
re-hosting with high-level

127
00:04:02,159 --> 00:04:04,400
implementations

128
00:04:03,040 --> 00:04:06,720
and this enables us to transform the

129
00:04:04,400 --> 00:04:07,920
problem of re-hosting firmware from

130
00:04:06,720 --> 00:04:09,359
supporting thousands of different

131
00:04:07,920 --> 00:04:12,480
devices or peripherals

132
00:04:09,360 --> 00:04:13,680
to dozens of house if we look a little

133
00:04:12,480 --> 00:04:16,000
more closely at the

134
00:04:13,680 --> 00:04:17,120
firmware we again have this binary

135
00:04:16,000 --> 00:04:19,680
monolithic

136
00:04:17,120 --> 00:04:20,959
bare metal firmware but to the developer

137
00:04:19,680 --> 00:04:22,079
it looks more like this where they have

138
00:04:20,959 --> 00:04:24,400
their application code

139
00:04:22,079 --> 00:04:26,080
middleware middleware libraries uh

140
00:04:24,400 --> 00:04:27,359
hardware hardware abstraction libraries

141
00:04:26,080 --> 00:04:29,840
and then the hardware

142
00:04:27,360 --> 00:04:31,840
rehosting what we do is we replace those

143
00:04:29,840 --> 00:04:34,159
hardware abstraction libraries with

144
00:04:31,840 --> 00:04:35,919
higher level implementations replace the

145
00:04:34,160 --> 00:04:39,199
hardware with qmu

146
00:04:35,919 --> 00:04:39,919
system emulator and this enables us to

147
00:04:39,199 --> 00:04:41,680
decouple

148
00:04:39,919 --> 00:04:44,000
the upper layers of the firmware from

149
00:04:41,680 --> 00:04:45,280
the hardware we can also replace the

150
00:04:44,000 --> 00:04:46,400
middleware with higher level

151
00:04:45,280 --> 00:04:49,198
replacements and run just the

152
00:04:46,400 --> 00:04:49,198
application code

153
00:04:49,280 --> 00:04:52,400
and this is what hallucinator does

154
00:04:50,720 --> 00:04:53,040
through our implementation we take the

155
00:04:52,400 --> 00:04:54,479
firmware

156
00:04:53,040 --> 00:04:56,080
run it through a tool that we created

157
00:04:54,479 --> 00:04:58,000
called lib match which takes the

158
00:04:56,080 --> 00:04:59,359
hardware abstraction library source code

159
00:04:58,000 --> 00:05:01,039
and produces a list of the function

160
00:04:59,360 --> 00:05:03,360
addresses within that firmware

161
00:05:01,039 --> 00:05:04,560
or the functions within that abstraction

162
00:05:03,360 --> 00:05:06,479
library

163
00:05:04,560 --> 00:05:08,560
we then implement a series of handlers

164
00:05:06,479 --> 00:05:11,280
which provide interact

165
00:05:08,560 --> 00:05:13,520
provide low level replacements for

166
00:05:11,280 --> 00:05:15,520
interacting with those functions

167
00:05:13,520 --> 00:05:17,280
to prohibit models which model the

168
00:05:15,520 --> 00:05:18,080
behavior of the different types of

169
00:05:17,280 --> 00:05:19,679
devices

170
00:05:18,080 --> 00:05:22,719
which are then all connected through an

171
00:05:19,680 --> 00:05:24,639
i o server which centralizes the control

172
00:05:22,720 --> 00:05:26,240
of all the external peripherals and this

173
00:05:24,639 --> 00:05:29,199
enables us to execute

174
00:05:26,240 --> 00:05:30,639
firmware on a generic cpu emulator

175
00:05:29,199 --> 00:05:34,000
without having to implement the tens of

176
00:05:30,639 --> 00:05:35,600
thousands of different peripherals

177
00:05:34,000 --> 00:05:37,120
i'll quickly go through a handler and

178
00:05:35,600 --> 00:05:39,680
then refer you to

179
00:05:37,120 --> 00:05:41,919
the paper for more details on our

180
00:05:39,680 --> 00:05:43,440
peripheral models and io server

181
00:05:41,919 --> 00:05:45,758
this is an example of a handler it's

182
00:05:43,440 --> 00:05:47,039
written in python and you can see that

183
00:05:45,759 --> 00:05:49,199
we're replacing the i2c

184
00:05:47,039 --> 00:05:51,199
rebuffer function so when that function

185
00:05:49,199 --> 00:05:53,440
gets called within the firmware it will

186
00:05:51,199 --> 00:05:56,080
execute this python code which first

187
00:05:53,440 --> 00:05:57,919
reads out the location of the buffer

188
00:05:56,080 --> 00:06:01,280
and its length and then we just check to

189
00:05:57,919 --> 00:06:03,280
make sure that it's

190
00:06:01,280 --> 00:06:05,039
valid and then we retrieve from the

191
00:06:03,280 --> 00:06:06,479
model the data to be written back into

192
00:06:05,039 --> 00:06:07,360
the firmware which is then written back

193
00:06:06,479 --> 00:06:10,719
in

194
00:06:07,360 --> 00:06:12,560
on the last line of the example i'll now

195
00:06:10,720 --> 00:06:14,720
hand it off to eric to describe libmatch

196
00:06:12,560 --> 00:06:17,120
in our evaluation

197
00:06:14,720 --> 00:06:18,240
so in order to actually locate the

198
00:06:17,120 --> 00:06:20,080
hardware abstraction layers and

199
00:06:18,240 --> 00:06:21,919
libraries in the binary

200
00:06:20,080 --> 00:06:23,840
we developed a tool called libmatch

201
00:06:21,919 --> 00:06:26,880
which uses binary analysis

202
00:06:23,840 --> 00:06:30,479
to find function names first

203
00:06:26,880 --> 00:06:33,759
we obtain the sdk files from the vendor

204
00:06:30,479 --> 00:06:35,840
and we use these with the content

205
00:06:33,759 --> 00:06:38,479
matching described by previous work

206
00:06:35,840 --> 00:06:39,599
to obtain some direct matches for the

207
00:06:38,479 --> 00:06:41,440
content

208
00:06:39,600 --> 00:06:42,639
however along with this we get some

209
00:06:41,440 --> 00:06:44,160
number of collisions

210
00:06:42,639 --> 00:06:46,160
where the function's content was

211
00:06:44,160 --> 00:06:48,880
indistinguishable from one another yet

212
00:06:46,160 --> 00:06:51,599
they perform different functionality

213
00:06:48,880 --> 00:06:52,400
in order to solve this uh lib match

214
00:06:51,599 --> 00:06:55,360
utilizes

215
00:06:52,400 --> 00:06:58,159
context provided by the sdks themselves

216
00:06:55,360 --> 00:07:00,960
in order to look at the callers

217
00:06:58,160 --> 00:07:01,840
and then the callees of these collided

218
00:07:00,960 --> 00:07:03,440
functions

219
00:07:01,840 --> 00:07:05,039
to disambiguate them and turn them into

220
00:07:03,440 --> 00:07:07,440
correct matches

221
00:07:05,039 --> 00:07:09,199
by the same token we can examine cases

222
00:07:07,440 --> 00:07:10,479
where we can infer what the names of

223
00:07:09,199 --> 00:07:12,240
other functions should be

224
00:07:10,479 --> 00:07:14,240
even when we can't match their content

225
00:07:12,240 --> 00:07:14,639
such as if they've been customized by

226
00:07:14,240 --> 00:07:17,520
the

227
00:07:14,639 --> 00:07:18,479
application vendor through all of these

228
00:07:17,520 --> 00:07:20,318
techniques we can

229
00:07:18,479 --> 00:07:24,240
obtain a much larger set of correctly

230
00:07:20,319 --> 00:07:24,240
matched functions using libmatch

231
00:07:24,479 --> 00:07:28,560
of course once we have a completed

232
00:07:25,840 --> 00:07:30,719
system we can take it out fuzzing

233
00:07:28,560 --> 00:07:31,759
we built a fuzzing oriented variant of

234
00:07:30,720 --> 00:07:34,080
hallucinator called

235
00:07:31,759 --> 00:07:35,120
alphas based on the afl unicorn

236
00:07:34,080 --> 00:07:37,120
framework

237
00:07:35,120 --> 00:07:38,560
along with doing this we had to solve a

238
00:07:37,120 --> 00:07:40,639
lot of interesting problems

239
00:07:38,560 --> 00:07:42,240
that come with fuzzing firmware such as

240
00:07:40,639 --> 00:07:44,160
when does the program terminate

241
00:07:42,240 --> 00:07:45,440
what to do about non-determinism from

242
00:07:44,160 --> 00:07:47,360
timers and interrupts

243
00:07:45,440 --> 00:07:48,560
and of course crash detection and you

244
00:07:47,360 --> 00:07:53,039
can read all about this

245
00:07:48,560 --> 00:07:53,599
in the paper to evaluate hallucinator we

246
00:07:53,039 --> 00:07:56,960
obtained

247
00:07:53,599 --> 00:07:59,280
16 for more samples from three vendors

248
00:07:56,960 --> 00:08:01,440
whose functionality involved a variety

249
00:07:59,280 --> 00:08:03,359
of different hardware

250
00:08:01,440 --> 00:08:05,280
among these were these bolded ones here

251
00:08:03,360 --> 00:08:06,960
which use network related functionality

252
00:08:05,280 --> 00:08:09,198
and are therefore interesting for an

253
00:08:06,960 --> 00:08:11,039
attacker

254
00:08:09,199 --> 00:08:13,360
first let's examine the performance of

255
00:08:11,039 --> 00:08:14,400
libmatch as you can see from this table

256
00:08:13,360 --> 00:08:16,560
here

257
00:08:14,400 --> 00:08:18,318
the context features used by livmatch

258
00:08:16,560 --> 00:08:20,800
not only allow us to obtain

259
00:08:18,319 --> 00:08:22,639
a higher rate of the correct matches and

260
00:08:20,800 --> 00:08:25,440
a lower rate of collisions

261
00:08:22,639 --> 00:08:27,039
but they also allow for up to 10 percent

262
00:08:25,440 --> 00:08:29,360
more

263
00:08:27,039 --> 00:08:30,560
names than we would otherwise have using

264
00:08:29,360 --> 00:08:33,759
this context

265
00:08:30,560 --> 00:08:33,759
related features

266
00:08:34,559 --> 00:08:38,559
in order to evaluate the ease of use of

267
00:08:36,479 --> 00:08:41,599
hallucinator we examined

268
00:08:38,559 --> 00:08:43,679
the effort required to implement the

269
00:08:41,599 --> 00:08:44,800
handlers needed to re-host those 16

270
00:08:43,679 --> 00:08:46,800
firmware samples

271
00:08:44,800 --> 00:08:48,240
and we we did this by dividing them into

272
00:08:46,800 --> 00:08:50,800
three categories

273
00:08:48,240 --> 00:08:53,120
trivial meaning it the handler does

274
00:08:50,800 --> 00:08:56,079
nothing or returns a constant

275
00:08:53,120 --> 00:08:56,959
translating which is also very simple

276
00:08:56,080 --> 00:08:59,120
where the

277
00:08:56,959 --> 00:09:00,719
handler collects the arguments passed to

278
00:08:59,120 --> 00:09:03,760
that function by the firmware

279
00:09:00,720 --> 00:09:06,640
operates on one of our predefined models

280
00:09:03,760 --> 00:09:08,240
and then returns some results and

281
00:09:06,640 --> 00:09:10,160
finally internal logic

282
00:09:08,240 --> 00:09:12,000
where in order to implement the handler

283
00:09:10,160 --> 00:09:13,760
you needed some piece of knowledge that

284
00:09:12,000 --> 00:09:16,560
was not contained in the sdk's

285
00:09:13,760 --> 00:09:16,560
documentation

286
00:09:16,640 --> 00:09:20,319
in doing this we noticed that over 85

287
00:09:18,720 --> 00:09:21,120
percent of the handlers we needed to

288
00:09:20,320 --> 00:09:24,160
implement

289
00:09:21,120 --> 00:09:25,360
required little effort meaning they were

290
00:09:24,160 --> 00:09:30,240
in the first two

291
00:09:25,360 --> 00:09:33,040
easiest categories the remaining

292
00:09:30,240 --> 00:09:33,760
handlers that were required internal

293
00:09:33,040 --> 00:09:34,959
logic

294
00:09:33,760 --> 00:09:36,480
were those where the hardware

295
00:09:34,959 --> 00:09:38,079
abstraction layer wasn't a very good

296
00:09:36,480 --> 00:09:40,080
abstraction layer such as

297
00:09:38,080 --> 00:09:41,839
hardware specific details were involved

298
00:09:40,080 --> 00:09:42,480
or it used an internal feature of the

299
00:09:41,839 --> 00:09:44,560
sdk

300
00:09:42,480 --> 00:09:48,320
such as its own memory allocator that

301
00:09:44,560 --> 00:09:48,319
was required for correct functionality

302
00:09:48,959 --> 00:09:52,079
so of course once we have a completed

303
00:09:50,399 --> 00:09:54,160
system we can take it out fuzzing

304
00:09:52,080 --> 00:09:55,360
so we took those network related

305
00:09:54,160 --> 00:09:57,199
firmware samples

306
00:09:55,360 --> 00:09:58,640
and we fuzzed them with real parallel

307
00:09:57,200 --> 00:10:00,240
afl and because we have

308
00:09:58,640 --> 00:10:02,240
fully decoupled the hardware from the

309
00:10:00,240 --> 00:10:03,279
firmware we can scale this as much as we

310
00:10:02,240 --> 00:10:05,279
want meaning we

311
00:10:03,279 --> 00:10:08,480
you were able to utilize hundreds of

312
00:10:05,279 --> 00:10:10,720
millions of parallel executions

313
00:10:08,480 --> 00:10:12,160
and we did find some crashes we crashed

314
00:10:10,720 --> 00:10:15,920
the stm

315
00:10:12,160 --> 00:10:17,439
st plc plc kit and we crashed atmel's

316
00:10:15,920 --> 00:10:21,120
http server and

317
00:10:17,440 --> 00:10:23,839
mesh network related firmware samples

318
00:10:21,120 --> 00:10:24,800
interestingly we fuzzed the http server

319
00:10:23,839 --> 00:10:27,519
firmware

320
00:10:24,800 --> 00:10:29,199
twice once where we re-hosted based on

321
00:10:27,519 --> 00:10:31,279
the lowest level

322
00:10:29,200 --> 00:10:32,399
hardware abstraction layer and found one

323
00:10:31,279 --> 00:10:35,439
set of bugs

324
00:10:32,399 --> 00:10:38,560
or a single bug and in the

325
00:10:35,440 --> 00:10:40,560
other where we we re-hosted using

326
00:10:38,560 --> 00:10:43,518
everything but the application code

327
00:10:40,560 --> 00:10:44,160
and we found a different bug this shows

328
00:10:43,519 --> 00:10:46,399
that

329
00:10:44,160 --> 00:10:47,519
this multi-level approach allows you to

330
00:10:46,399 --> 00:10:49,839
focus on the

331
00:10:47,519 --> 00:10:52,640
the areas of the firmware that you want

332
00:10:49,839 --> 00:10:52,640
to find bugs in

333
00:10:52,880 --> 00:10:57,360
uh the two the two bugs we found in the

334
00:10:55,440 --> 00:10:58,000
contiki real-time operating system were

335
00:10:57,360 --> 00:11:01,040
in fact

336
00:10:58,000 --> 00:11:02,959
uh previously unknown and therefore we

337
00:11:01,040 --> 00:11:04,640
obtained cve numbers for them

338
00:11:02,959 --> 00:11:07,599
we disclosed these to the vendor and

339
00:11:04,640 --> 00:11:07,600
they have since been fixed

340
00:11:07,920 --> 00:11:11,439
last year we had the opportunity to take

341
00:11:09,760 --> 00:11:14,079
hallucinator to a

342
00:11:11,440 --> 00:11:16,560
hacking competition at last year's

343
00:11:14,079 --> 00:11:18,000
see-saw embedded systems challenge

344
00:11:16,560 --> 00:11:20,319
where we were tasked with solving

345
00:11:18,000 --> 00:11:23,519
challenges on this hardware board here

346
00:11:20,320 --> 00:11:25,760
in order to obtain points uh of course

347
00:11:23,519 --> 00:11:26,880
naturally we re-hosted the firmware

348
00:11:25,760 --> 00:11:29,760
running on this board

349
00:11:26,880 --> 00:11:31,439
which gave us uh unusually powerful

350
00:11:29,760 --> 00:11:33,760
debugging capabilities

351
00:11:31,440 --> 00:11:35,279
allowing us to solve all of the firmware

352
00:11:33,760 --> 00:11:38,800
related challenges

353
00:11:35,279 --> 00:11:38,800
and take home first place

354
00:11:39,680 --> 00:11:42,880
and finally this concludes our talk

355
00:11:41,920 --> 00:11:45,199
hallucinator

356
00:11:42,880 --> 00:11:46,560
eliminates the implementation of tens of

357
00:11:45,200 --> 00:11:49,200
thousands of peripherals

358
00:11:46,560 --> 00:11:50,800
by instead focusing on the dozens of

359
00:11:49,200 --> 00:11:52,720
hals

360
00:11:50,800 --> 00:11:54,800
you can find the source code for

361
00:11:52,720 --> 00:11:57,360
hallucinator half fuzz and live match

362
00:11:54,800 --> 00:12:00,319
at the github links here and of course

363
00:11:57,360 --> 00:12:11,600
these artifacts past artifact evaluation

364
00:12:00,320 --> 00:12:13,680
thank you very much for your time

365
00:12:11,600 --> 00:12:13,680
you

