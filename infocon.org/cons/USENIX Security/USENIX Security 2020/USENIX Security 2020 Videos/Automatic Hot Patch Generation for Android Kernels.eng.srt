1
00:00:08,480 --> 00:00:13,040
hello everyone this is jones

2
00:00:10,559 --> 00:00:15,280
now i'm going to talk about my paper

3
00:00:13,040 --> 00:00:16,640
automatic hard package narration for

4
00:00:15,280 --> 00:00:19,119
android kernels

5
00:00:16,640 --> 00:00:20,880
first of all our motivation of choosing

6
00:00:19,119 --> 00:00:22,880
android as a target

7
00:00:20,880 --> 00:00:24,320
is that there are thousands of android

8
00:00:22,880 --> 00:00:27,840
systems in the world

9
00:00:24,320 --> 00:00:30,560
but most of them are not up to date

10
00:00:27,840 --> 00:00:31,599
it contains many known vulnerabilities

11
00:00:30,560 --> 00:00:34,000
the table below

12
00:00:31,599 --> 00:00:36,239
shows the android version distribution

13
00:00:34,000 --> 00:00:38,680
at the year 2018.

14
00:00:36,239 --> 00:00:40,559
from the table we can notice that only

15
00:00:38,680 --> 00:00:42,559
0.04

16
00:00:40,559 --> 00:00:45,039
of android devices use the latest

17
00:00:42,559 --> 00:00:47,120
android system the figure on the right

18
00:00:45,039 --> 00:00:50,239
shows the android updates level

19
00:00:47,120 --> 00:00:51,038
for 500 million devices by the time of

20
00:00:50,239 --> 00:00:53,279
october

21
00:00:51,039 --> 00:00:55,039
about half of the device only receive

22
00:00:53,280 --> 00:00:57,280
latest updates on may

23
00:00:55,039 --> 00:00:58,480
it leaves a 5 month gap before they are

24
00:00:57,280 --> 00:01:00,320
updated

25
00:00:58,480 --> 00:01:01,519
therefore there are there are huge

26
00:01:00,320 --> 00:01:03,760
number of devices

27
00:01:01,520 --> 00:01:04,720
which are endangered because of lacking

28
00:01:03,760 --> 00:01:07,039
patches

29
00:01:04,720 --> 00:01:07,840
in addition if we manually write the

30
00:01:07,040 --> 00:01:10,640
patch

31
00:01:07,840 --> 00:01:11,760
it will be very time consuming therefore

32
00:01:10,640 --> 00:01:14,479
there is a need

33
00:01:11,760 --> 00:01:15,680
to develop automatic method to generate

34
00:01:14,479 --> 00:01:17,920
adaptive patches

35
00:01:15,680 --> 00:01:19,119
which can be applied to different

36
00:01:17,920 --> 00:01:22,080
android systems

37
00:01:19,119 --> 00:01:23,280
to fix the legacy vulnerabilities

38
00:01:22,080 --> 00:01:26,000
considering this

39
00:01:23,280 --> 00:01:26,720
device performance and user experience

40
00:01:26,000 --> 00:01:29,280
hot patch

41
00:01:26,720 --> 00:01:30,880
is an ideal solution since it does not

42
00:01:29,280 --> 00:01:34,320
require system rebooting

43
00:01:30,880 --> 00:01:37,119
and incurs little overhead

44
00:01:34,320 --> 00:01:37,758
specifically the goal of our tool is

45
00:01:37,119 --> 00:01:39,840
that

46
00:01:37,759 --> 00:01:40,960
given a vulnerable functions and its

47
00:01:39,840 --> 00:01:43,680
official patch

48
00:01:40,960 --> 00:01:44,479
we want to automatically generate hot

49
00:01:43,680 --> 00:01:47,200
patches

50
00:01:44,479 --> 00:01:48,159
which has same semantics as the official

51
00:01:47,200 --> 00:01:50,720
patch

52
00:01:48,159 --> 00:01:52,000
here we choose the function beginning to

53
00:01:50,720 --> 00:01:54,960
insert the hot patch

54
00:01:52,000 --> 00:01:55,439
and we convert the official patch into a

55
00:01:54,960 --> 00:01:58,240
function

56
00:01:55,439 --> 00:01:58,559
input filter which can block the value

57
00:01:58,240 --> 00:02:01,280
that

58
00:01:58,560 --> 00:02:03,119
can trigger vulnerabilities why are we

59
00:02:01,280 --> 00:02:04,000
choosing a filter rather than direct

60
00:02:03,119 --> 00:02:06,880
patching

61
00:02:04,000 --> 00:02:07,520
it is because that in binary it is

62
00:02:06,880 --> 00:02:10,160
easier

63
00:02:07,520 --> 00:02:11,200
to locate the function beginning and in

64
00:02:10,160 --> 00:02:14,079
different

65
00:02:11,200 --> 00:02:15,519
lesson systems the function beginning

66
00:02:14,080 --> 00:02:17,440
will not be changed

67
00:02:15,520 --> 00:02:19,040
but the content of the function may be

68
00:02:17,440 --> 00:02:21,440
changed

69
00:02:19,040 --> 00:02:22,879
if we want to insert the patch in the

70
00:02:21,440 --> 00:02:25,040
middle of the function

71
00:02:22,879 --> 00:02:26,799
it may not be applicable across

72
00:02:25,040 --> 00:02:29,359
different systems

73
00:02:26,800 --> 00:02:31,120
i want to emphasize that to ensure the

74
00:02:29,360 --> 00:02:32,160
filter will not affect the normal

75
00:02:31,120 --> 00:02:35,120
functionality

76
00:02:32,160 --> 00:02:36,879
of the system we limit the filter to

77
00:02:35,120 --> 00:02:38,640
only perform rate operation

78
00:02:36,879 --> 00:02:40,160
rather than write operations on the

79
00:02:38,640 --> 00:02:42,640
memories

80
00:02:40,160 --> 00:02:45,200
so with this limitation what kind of

81
00:02:42,640 --> 00:02:48,079
patches can be converted into filter

82
00:02:45,200 --> 00:02:48,799
to understand that we first conducted a

83
00:02:48,080 --> 00:02:52,640
survey

84
00:02:48,800 --> 00:02:53,760
of 375 vulnerabilities from the table we

85
00:02:52,640 --> 00:02:56,000
can see that

86
00:02:53,760 --> 00:02:57,040
sanity check patches account for the

87
00:02:56,000 --> 00:03:00,400
largest portion

88
00:02:57,040 --> 00:03:03,040
with over 40 of the total patches

89
00:03:00,400 --> 00:03:05,440
it is a type that does not require

90
00:03:03,040 --> 00:03:08,000
memory writing operations

91
00:03:05,440 --> 00:03:08,720
therefore we choose to convert sanity

92
00:03:08,000 --> 00:03:12,000
checks

93
00:03:08,720 --> 00:03:14,720
patches into filters

94
00:03:12,000 --> 00:03:16,000
there is an insight from the survey the

95
00:03:14,720 --> 00:03:18,319
vulnerability tabs

96
00:03:16,000 --> 00:03:20,560
and the patch types are different there

97
00:03:18,319 --> 00:03:22,640
is no strong relationships

98
00:03:20,560 --> 00:03:25,040
between the two when you are doing

99
00:03:22,640 --> 00:03:27,200
researches about the vulnerabilities

100
00:03:25,040 --> 00:03:29,519
you should focus on the vulnerability

101
00:03:27,200 --> 00:03:31,518
types such as buffer overflows

102
00:03:29,519 --> 00:03:34,400
whereas when you are doing patch

103
00:03:31,519 --> 00:03:38,159
analysis it is better to consider patch

104
00:03:34,400 --> 00:03:40,159
types instead okay after we figure out

105
00:03:38,159 --> 00:03:41,359
the goal and the type of the patch we

106
00:03:40,159 --> 00:03:44,319
want to convert

107
00:03:41,360 --> 00:03:45,120
let's go into the detailed algorithms

108
00:03:44,319 --> 00:03:47,119
first

109
00:03:45,120 --> 00:03:49,280
i would like to introduce vicky's

110
00:03:47,120 --> 00:03:52,239
appreciation reasoning techniques

111
00:03:49,280 --> 00:03:53,280
this technique tries to find what's what

112
00:03:52,239 --> 00:03:56,080
must be true

113
00:03:53,280 --> 00:03:57,040
in order for a post assertion to be true

114
00:03:56,080 --> 00:03:59,519
let's look at

115
00:03:57,040 --> 00:04:00,319
one example below on the left hand side

116
00:03:59,519 --> 00:04:03,760
block

117
00:04:00,319 --> 00:04:04,079
there are some statements x is equal to

118
00:04:03,760 --> 00:04:06,959
y

119
00:04:04,080 --> 00:04:09,120
and b is equal to a we have put an

120
00:04:06,959 --> 00:04:12,560
assertion in the end which is b is

121
00:04:09,120 --> 00:04:14,879
less than zero fixed precision reasoning

122
00:04:12,560 --> 00:04:17,600
we'll try to find the preconditions

123
00:04:14,879 --> 00:04:18,238
and can make b is less than zero to be

124
00:04:17,600 --> 00:04:21,359
true

125
00:04:18,238 --> 00:04:22,799
in this case since a is equal to b the

126
00:04:21,358 --> 00:04:25,359
precondition is that

127
00:04:22,800 --> 00:04:26,960
a is less than zero so that b is less

128
00:04:25,360 --> 00:04:29,199
than zero can be true

129
00:04:26,960 --> 00:04:30,880
similarly on the right hand side block

130
00:04:29,199 --> 00:04:33,680
there is a function full with

131
00:04:30,880 --> 00:04:35,759
sanitary patch at the end if we try to

132
00:04:33,680 --> 00:04:36,400
calculate the precondition of the sanity

133
00:04:35,759 --> 00:04:38,639
check

134
00:04:36,400 --> 00:04:40,080
we can get the condition at the

135
00:04:38,639 --> 00:04:42,479
beginning of the function

136
00:04:40,080 --> 00:04:44,719
you may notice that the condition itself

137
00:04:42,479 --> 00:04:46,800
is the same as the filter

138
00:04:44,720 --> 00:04:49,360
in this way the filter generation

139
00:04:46,800 --> 00:04:50,960
problem can be changed into a vacation

140
00:04:49,360 --> 00:04:53,040
preconditional reasoning problem

141
00:04:50,960 --> 00:04:54,719
which can be solved using mathematical

142
00:04:53,040 --> 00:04:56,960
transformations

143
00:04:54,720 --> 00:04:58,400
there's a formal way to do the wiki's

144
00:04:56,960 --> 00:05:00,560
appreciation reasoning

145
00:04:58,400 --> 00:05:02,000
if you are interested in it you can

146
00:05:00,560 --> 00:05:05,199
search for the pre

147
00:05:02,000 --> 00:05:06,800
predicate transformers for more details

148
00:05:05,199 --> 00:05:09,360
so now let's move on to the next

149
00:05:06,800 --> 00:05:11,440
component function call handling

150
00:05:09,360 --> 00:05:12,639
through the weakest privilege reasoning

151
00:05:11,440 --> 00:05:15,039
the algorithm

152
00:05:12,639 --> 00:05:16,320
may encounter function calls in the in

153
00:05:15,039 --> 00:05:18,880
the past

154
00:05:16,320 --> 00:05:20,240
it needs to deal with them to get

155
00:05:18,880 --> 00:05:22,719
accurate results

156
00:05:20,240 --> 00:05:24,400
first there are functions that will be

157
00:05:22,720 --> 00:05:27,600
inlined by the compiler

158
00:05:24,400 --> 00:05:28,400
to address this we will import all the

159
00:05:27,600 --> 00:05:30,560
functions

160
00:05:28,400 --> 00:05:32,799
into the original caller functions

161
00:05:30,560 --> 00:05:35,440
before we start to do the reasoning

162
00:05:32,800 --> 00:05:36,560
second there are some functions and will

163
00:05:35,440 --> 00:05:38,800
modify the content

164
00:05:36,560 --> 00:05:39,759
of the variables that we want to check

165
00:05:38,800 --> 00:05:42,080
in this case

166
00:05:39,759 --> 00:05:43,759
we will direct the reasoning to go

167
00:05:42,080 --> 00:05:46,000
inside the callee function

168
00:05:43,759 --> 00:05:47,759
and summarize the changes of the

169
00:05:46,000 --> 00:05:50,720
particular variables

170
00:05:47,759 --> 00:05:51,680
third we do encounter some cases whose

171
00:05:50,720 --> 00:05:54,800
function calls

172
00:05:51,680 --> 00:05:56,960
are nested up to more than 10 levels

173
00:05:54,800 --> 00:05:57,840
our method cannot handle this kind of

174
00:05:56,960 --> 00:06:00,318
situation

175
00:05:57,840 --> 00:06:01,039
so we skip the function calls and mark

176
00:06:00,319 --> 00:06:05,280
this case

177
00:06:01,039 --> 00:06:06,560
to be inaccurate last we have a special

178
00:06:05,280 --> 00:06:09,119
type of functions

179
00:06:06,560 --> 00:06:10,240
and can be processed through hooking i

180
00:06:09,120 --> 00:06:13,520
will explain it

181
00:06:10,240 --> 00:06:14,639
in the next two slides but besides the

182
00:06:13,520 --> 00:06:16,560
function course

183
00:06:14,639 --> 00:06:18,319
another thing that needs to be handled

184
00:06:16,560 --> 00:06:20,720
is loop because

185
00:06:18,319 --> 00:06:22,880
in static analysis we do not know how

186
00:06:20,720 --> 00:06:25,520
many times the loop will be run

187
00:06:22,880 --> 00:06:27,360
to process the loop we also classify

188
00:06:25,520 --> 00:06:30,560
them into different types

189
00:06:27,360 --> 00:06:31,680
first if the loop the if the patch is

190
00:06:30,560 --> 00:06:34,240
inside the loop

191
00:06:31,680 --> 00:06:34,960
we need to rebuild the same logic as the

192
00:06:34,240 --> 00:06:38,000
loop

193
00:06:34,960 --> 00:06:41,758
in the filter itself so that the filter

194
00:06:38,000 --> 00:06:43,039
can also can also be drawn for multiple

195
00:06:41,759 --> 00:06:45,199
times

196
00:06:43,039 --> 00:06:46,800
second if the loop modifies the variable

197
00:06:45,199 --> 00:06:49,039
values we need to use

198
00:06:46,800 --> 00:06:50,639
loop summarization techniques to get the

199
00:06:49,039 --> 00:06:52,960
semantics of the loops

200
00:06:50,639 --> 00:06:54,160
for simple loops the summarization can

201
00:06:52,960 --> 00:06:56,400
be very accurate

202
00:06:54,160 --> 00:06:57,599
so that we can solve out the condition

203
00:06:56,400 --> 00:07:00,000
we want

204
00:06:57,599 --> 00:07:00,639
the third case is that the loops are not

205
00:07:00,000 --> 00:07:03,440
modify

206
00:07:00,639 --> 00:07:04,560
any variable values that the filter want

207
00:07:03,440 --> 00:07:07,520
to check

208
00:07:04,560 --> 00:07:08,080
in this case we can just safely skip the

209
00:07:07,520 --> 00:07:11,440
loops

210
00:07:08,080 --> 00:07:13,520
to continue do the reasoning last if the

211
00:07:11,440 --> 00:07:16,960
loops tend to be too complex

212
00:07:13,520 --> 00:07:20,880
we need to skip it and make mark it

213
00:07:16,960 --> 00:07:21,440
as inaccurate here i want to mention

214
00:07:20,880 --> 00:07:24,560
that

215
00:07:21,440 --> 00:07:27,120
in static program analysis loop

216
00:07:24,560 --> 00:07:29,120
and function calls are the two problems

217
00:07:27,120 --> 00:07:31,840
that need to be handled carefully

218
00:07:29,120 --> 00:07:32,400
since their consequences are unknown

219
00:07:31,840 --> 00:07:36,080
without

220
00:07:32,400 --> 00:07:38,400
running them and here comes the last

221
00:07:36,080 --> 00:07:40,800
part of our work component

222
00:07:38,400 --> 00:07:42,080
it is the patch insertion point

223
00:07:40,800 --> 00:07:44,400
optimization

224
00:07:42,080 --> 00:07:46,719
so what is the injection point in our

225
00:07:44,400 --> 00:07:49,198
paper it is a fraction beginning

226
00:07:46,720 --> 00:07:49,759
however when the function calls another

227
00:07:49,199 --> 00:07:52,400
function

228
00:07:49,759 --> 00:07:54,000
since it will become interesting let's

229
00:07:52,400 --> 00:07:56,000
look at the example below

230
00:07:54,000 --> 00:07:58,400
suppose we have a function a with the

231
00:07:56,000 --> 00:08:00,400
vulnerability we can always put a filter

232
00:07:58,400 --> 00:08:03,280
at the beginning of the function a

233
00:08:00,400 --> 00:08:05,039
moreover function a has core function b

234
00:08:03,280 --> 00:08:06,799
we can also put the filter at the

235
00:08:05,039 --> 00:08:10,000
beginning of the function b

236
00:08:06,800 --> 00:08:11,520
by putting at a function b we have the

237
00:08:10,000 --> 00:08:13,759
we will have the equivalent

238
00:08:11,520 --> 00:08:15,680
semantics as we are putting the filter

239
00:08:13,759 --> 00:08:19,039
at the function a is at the

240
00:08:15,680 --> 00:08:20,080
middle of a function a therefore to fix

241
00:08:19,039 --> 00:08:22,960
the vulnerability of

242
00:08:20,080 --> 00:08:23,599
a we can either pull the filter at the

243
00:08:22,960 --> 00:08:25,919
beginning

244
00:08:23,599 --> 00:08:27,120
or in the middle we will let our

245
00:08:25,919 --> 00:08:29,840
algorithm

246
00:08:27,120 --> 00:08:32,320
select one point which have shorter

247
00:08:29,840 --> 00:08:35,039
paths to reason

248
00:08:32,320 --> 00:08:37,839
the take the example on the right if you

249
00:08:35,039 --> 00:08:40,640
are trying to do the vacation reasoning

250
00:08:37,839 --> 00:08:41,360
from the patch which is at the bottom of

251
00:08:40,640 --> 00:08:44,080
the

252
00:08:41,360 --> 00:08:45,120
function to the beginning it will pass

253
00:08:44,080 --> 00:08:47,519
two function calls

254
00:08:45,120 --> 00:08:48,560
and a loop as i mentioned before

255
00:08:47,519 --> 00:08:51,360
handling calls

256
00:08:48,560 --> 00:08:53,040
and loops may cause inaccuracy it may

257
00:08:51,360 --> 00:08:55,440
not be a good choice

258
00:08:53,040 --> 00:08:56,640
the country if we insert the filter to

259
00:08:55,440 --> 00:08:58,720
function b

260
00:08:56,640 --> 00:08:59,839
the corresponding equivalent filter will

261
00:08:58,720 --> 00:09:02,480
be at

262
00:08:59,839 --> 00:09:03,279
the call function beginning function a

263
00:09:02,480 --> 00:09:06,399
in this way

264
00:09:03,279 --> 00:09:08,720
it helps us to skip the analysis

265
00:09:06,399 --> 00:09:09,760
of the function calls and loops the

266
00:09:08,720 --> 00:09:12,800
reason will be

267
00:09:09,760 --> 00:09:15,200
the result will become more accurate

268
00:09:12,800 --> 00:09:16,560
this is also the last type function that

269
00:09:15,200 --> 00:09:19,760
we want to handle

270
00:09:16,560 --> 00:09:22,000
but instead of handling it we use them

271
00:09:19,760 --> 00:09:25,279
to achieve a better result

272
00:09:22,000 --> 00:09:27,760
let's move on to the experiment we have

273
00:09:25,279 --> 00:09:28,720
evaluated the patch line region in four

274
00:09:27,760 --> 00:09:31,279
aspect

275
00:09:28,720 --> 00:09:32,000
first we have selected 59 official

276
00:09:31,279 --> 00:09:34,959
patches

277
00:09:32,000 --> 00:09:35,200
and let the two to generate the filter

278
00:09:34,959 --> 00:09:38,800
and

279
00:09:35,200 --> 00:09:41,279
we have manually verified that 55

280
00:09:38,800 --> 00:09:43,359
filters are correctly generated the

281
00:09:41,279 --> 00:09:43,680
remaining focus are wrong because we

282
00:09:43,360 --> 00:09:46,240
have

283
00:09:43,680 --> 00:09:47,599
extracted the wrong semantics from the

284
00:09:46,240 --> 00:09:50,880
official patches

285
00:09:47,600 --> 00:09:52,399
and second we apply the patch

286
00:09:50,880 --> 00:09:54,160
to the kernels and measure the

287
00:09:52,399 --> 00:09:55,760
performance loss through android

288
00:09:54,160 --> 00:09:57,519
benchmarking apps

289
00:09:55,760 --> 00:09:59,279
we found that most of the time the

290
00:09:57,519 --> 00:10:01,440
filter will not increase performance

291
00:09:59,279 --> 00:10:04,480
decrease at all

292
00:10:01,440 --> 00:10:07,040
third we want to test the robustness

293
00:10:04,480 --> 00:10:08,880
of the patch functions we run the system

294
00:10:07,040 --> 00:10:11,360
for a long time with different apps

295
00:10:08,880 --> 00:10:12,640
and monitor it to find that none of the

296
00:10:11,360 --> 00:10:16,079
path functions

297
00:10:12,640 --> 00:10:17,199
have resulted in crashes and the last we

298
00:10:16,079 --> 00:10:19,439
also tested

299
00:10:17,200 --> 00:10:21,440
the weather the general rated filters

300
00:10:19,440 --> 00:10:25,519
are similar to human written filters

301
00:10:21,440 --> 00:10:28,320
of filters we employed security expert

302
00:10:25,519 --> 00:10:29,279
to learn the official patches and write

303
00:10:28,320 --> 00:10:31,680
the filters

304
00:10:29,279 --> 00:10:32,880
and compare them to the generated

305
00:10:31,680 --> 00:10:35,839
advance

306
00:10:32,880 --> 00:10:37,120
the results show that 54 out of 55

307
00:10:35,839 --> 00:10:39,920
patches are similar

308
00:10:37,120 --> 00:10:41,279
the only one dissimilar case is because

309
00:10:39,920 --> 00:10:42,240
there are two ways to fix the

310
00:10:41,279 --> 00:10:44,720
vulnerability

311
00:10:42,240 --> 00:10:46,160
the two choose one way well the human

312
00:10:44,720 --> 00:10:49,600
choose another way

313
00:10:46,160 --> 00:10:52,560
so and the last slide

314
00:10:49,600 --> 00:10:54,160
shows the future works and improvements

315
00:10:52,560 --> 00:10:56,399
as we did this work

316
00:10:54,160 --> 00:10:57,199
we found that there are many other

317
00:10:56,399 --> 00:11:00,079
places and

318
00:10:57,200 --> 00:11:01,360
it was to be researched on first we

319
00:11:00,079 --> 00:11:03,680
would like to generate

320
00:11:01,360 --> 00:11:04,480
adaptive patches directly at the source

321
00:11:03,680 --> 00:11:07,439
code level

322
00:11:04,480 --> 00:11:08,399
but doing this we can support more types

323
00:11:07,440 --> 00:11:11,440
of patches

324
00:11:08,399 --> 00:11:14,000
and fix more vulnerabilities and second

325
00:11:11,440 --> 00:11:15,920
if we still work on binary level we want

326
00:11:14,000 --> 00:11:17,120
to enable the right operations in the

327
00:11:15,920 --> 00:11:20,160
hot patch

328
00:11:17,120 --> 00:11:22,399
it can be dangerous but it is also very

329
00:11:20,160 --> 00:11:24,319
helpful to fix more vulnerabilities

330
00:11:22,399 --> 00:11:26,240
we need the program analysis to figure

331
00:11:24,320 --> 00:11:29,440
out which content of memory

332
00:11:26,240 --> 00:11:31,440
are safe to be written and conduct our

333
00:11:29,440 --> 00:11:33,600
operations on the safe ones

334
00:11:31,440 --> 00:11:34,560
third we want to summarize the semantics

335
00:11:33,600 --> 00:11:38,240
of the patches

336
00:11:34,560 --> 00:11:40,800
we want we found their last research on

337
00:11:38,240 --> 00:11:41,600
this area by getting the semantics we

338
00:11:40,800 --> 00:11:44,240
can achieve

339
00:11:41,600 --> 00:11:46,560
more accurate type classification method

340
00:11:44,240 --> 00:11:49,040
we can distinguish the security patches

341
00:11:46,560 --> 00:11:50,880
from other function updates even it

342
00:11:49,040 --> 00:11:54,560
helps to examine root cause

343
00:11:50,880 --> 00:11:56,720
of normal abilities last point our r2

344
00:11:54,560 --> 00:11:58,880
cannot handle the large and complex

345
00:11:56,720 --> 00:12:00,800
patches we want to find a way to deal

346
00:11:58,880 --> 00:12:03,439
with them

347
00:12:00,800 --> 00:12:11,839
okay that's all thank you for listening

348
00:12:03,440 --> 00:12:11,839
you are welcome to ask questions

349
00:12:14,880 --> 00:12:16,959
you

