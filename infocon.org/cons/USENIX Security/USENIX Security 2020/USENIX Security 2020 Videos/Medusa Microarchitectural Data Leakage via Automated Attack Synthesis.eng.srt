1
00:00:08,639 --> 00:00:10,639
hi

2
00:00:08,960 --> 00:00:12,719
thanks for listening to my talk my name

3
00:00:10,639 --> 00:00:14,399
is daniel morimi and i'm a phd student

4
00:00:12,719 --> 00:00:15,920
at wooster polytechnic institute

5
00:00:14,400 --> 00:00:18,560
today i'm going to talk about my work on

6
00:00:15,920 --> 00:00:20,640
microarchitectural attacks

7
00:00:18,560 --> 00:00:21,840
medusa microarchitectural data leakage

8
00:00:20,640 --> 00:00:23,519
via automated

9
00:00:21,840 --> 00:00:25,680
attack synthesis is a joint perk with

10
00:00:23,519 --> 00:00:26,959
maurice sleep berg sooner and michelle

11
00:00:25,680 --> 00:00:28,960
schwartz

12
00:00:26,960 --> 00:00:30,480
in a meltdown attack the attacker tries

13
00:00:28,960 --> 00:00:31,439
to access the kerala memory address from

14
00:00:30,480 --> 00:00:33,280
the user space

15
00:00:31,439 --> 00:00:35,040
you always knew that doing this through

16
00:00:33,280 --> 00:00:35,840
a segfault exception so we cannot do

17
00:00:35,040 --> 00:00:38,399
that in

18
00:00:35,840 --> 00:00:40,239
any real application but people later on

19
00:00:38,399 --> 00:00:41,920
figured out that this memory access have

20
00:00:40,239 --> 00:00:42,879
some macro architectural footprints in

21
00:00:41,920 --> 00:00:45,120
the cpu

22
00:00:42,879 --> 00:00:46,960
therefore in a modern attack we allocate

23
00:00:45,120 --> 00:00:47,760
some memory that is backed by the cpu

24
00:00:46,960 --> 00:00:49,520
cache lines

25
00:00:47,760 --> 00:00:51,039
and in the first step of this attack we

26
00:00:49,520 --> 00:00:53,120
access this kernel address that we are

27
00:00:51,039 --> 00:00:55,039
not supposed to access to

28
00:00:53,120 --> 00:00:56,718
when we perform this memory access the

29
00:00:55,039 --> 00:00:59,199
secret data from the kernel will be

30
00:00:56,719 --> 00:01:01,359
stored in some internal cpu registers

31
00:00:59,199 --> 00:01:03,039
and then in the second step we execute

32
00:01:01,359 --> 00:01:05,040
another memory operation

33
00:01:03,039 --> 00:01:06,960
which which act as an encoding gadget

34
00:01:05,040 --> 00:01:09,280
and encode the secret kernel data

35
00:01:06,960 --> 00:01:10,960
to some cpu cache line then we get an

36
00:01:09,280 --> 00:01:13,280
exception but the cache line is already

37
00:01:10,960 --> 00:01:13,919
modified so in the third step of this

38
00:01:13,280 --> 00:01:15,520
attack

39
00:01:13,920 --> 00:01:17,439
we can use a technique called flash and

40
00:01:15,520 --> 00:01:17,920
reload to look into the cache lines and

41
00:01:17,439 --> 00:01:19,919
see

42
00:01:17,920 --> 00:01:21,360
which one has been accessed what

43
00:01:19,920 --> 00:01:23,280
happened after the meltdown

44
00:01:21,360 --> 00:01:24,720
small town was fixed on some macro

45
00:01:23,280 --> 00:01:25,759
architectures like coffee lake and

46
00:01:24,720 --> 00:01:28,158
castle lake

47
00:01:25,759 --> 00:01:29,119
but people found that you can still leak

48
00:01:28,159 --> 00:01:31,119
some data

49
00:01:29,119 --> 00:01:32,880
and this time it doesn't even matter

50
00:01:31,119 --> 00:01:34,320
what is the exact address of this memory

51
00:01:32,880 --> 00:01:36,720
operation that you access

52
00:01:34,320 --> 00:01:38,000
and as far as this memory operation

53
00:01:36,720 --> 00:01:40,560
faces an assist

54
00:01:38,000 --> 00:01:41,680
or an exception you see that some data

55
00:01:40,560 --> 00:01:43,200
is leaked from the cpu

56
00:01:41,680 --> 00:01:44,880
there are so many different variants of

57
00:01:43,200 --> 00:01:46,799
these these new attacks called

58
00:01:44,880 --> 00:01:48,240
microarchitectural data sampling that

59
00:01:46,799 --> 00:01:50,320
leak data from different

60
00:01:48,240 --> 00:01:52,000
buffers and by linking data from

61
00:01:50,320 --> 00:01:52,960
different buffers you can compromise the

62
00:01:52,000 --> 00:01:55,840
security of

63
00:01:52,960 --> 00:01:58,240
other processes and applications if you

64
00:01:55,840 --> 00:01:59,520
look at the memory operations on an x86

65
00:01:58,240 --> 00:02:01,360
machine we realize that

66
00:01:59,520 --> 00:02:03,600
the number of conditions and things that

67
00:02:01,360 --> 00:02:05,280
you need to check is kind of exhaustive

68
00:02:03,600 --> 00:02:06,880
for example the city if you need to

69
00:02:05,280 --> 00:02:07,759
check if a memory address is actually

70
00:02:06,880 --> 00:02:09,598
correct

71
00:02:07,759 --> 00:02:11,440
and then the cpu has to translate this

72
00:02:09,598 --> 00:02:14,160
address with the help of the translation

73
00:02:11,440 --> 00:02:14,800
look a side buffer and if this address

74
00:02:14,160 --> 00:02:17,840
has a

75
00:02:14,800 --> 00:02:19,120
correct tlb entry then the permissions

76
00:02:17,840 --> 00:02:20,879
need to be checked and there are some

77
00:02:19,120 --> 00:02:21,599
metadata and mappings that need to be

78
00:02:20,879 --> 00:02:23,200
checked

79
00:02:21,599 --> 00:02:25,679
and there are so many things that need

80
00:02:23,200 --> 00:02:26,560
to be checked until the memory operation

81
00:02:25,680 --> 00:02:29,360
actually

82
00:02:26,560 --> 00:02:31,120
uh performed correctly so there are too

83
00:02:29,360 --> 00:02:33,360
many things to test if you want to

84
00:02:31,120 --> 00:02:34,160
test if a cpu is vulnerable to an mds

85
00:02:33,360 --> 00:02:36,879
attack

86
00:02:34,160 --> 00:02:39,040
and based on also in the experience we

87
00:02:36,879 --> 00:02:39,518
had it's uh trying these attacks we know

88
00:02:39,040 --> 00:02:41,040
that

89
00:02:39,519 --> 00:02:43,280
uh reproducing these attacks is

90
00:02:41,040 --> 00:02:45,200
generally not very reliable sometimes

91
00:02:43,280 --> 00:02:47,440
by modifying the proof of concept a

92
00:02:45,200 --> 00:02:50,399
little bit and messaging the pipeline

93
00:02:47,440 --> 00:02:52,319
uh the the proof of concept changes it

94
00:02:50,400 --> 00:02:53,840
leaks from different buffers

95
00:02:52,319 --> 00:02:56,000
and there are so many different cpu

96
00:02:53,840 --> 00:02:59,200
configurations nowadays sometimes

97
00:02:56,000 --> 00:03:01,360
uh something may work may not work and

98
00:02:59,200 --> 00:03:02,399
there is there is no public tool to test

99
00:03:01,360 --> 00:03:05,280
all these uh

100
00:03:02,400 --> 00:03:06,239
even if you want to test a new hardware

101
00:03:05,280 --> 00:03:09,280
we don't know

102
00:03:06,239 --> 00:03:10,159
uh how many things to test in addition

103
00:03:09,280 --> 00:03:12,480
to that

104
00:03:10,159 --> 00:03:14,720
it's hard to quantify the impact of

105
00:03:12,480 --> 00:03:15,760
these attacks because some pocs may leak

106
00:03:14,720 --> 00:03:18,560
on one system

107
00:03:15,760 --> 00:03:19,840
not the other and the leakage rate of

108
00:03:18,560 --> 00:03:21,680
this poc is also

109
00:03:19,840 --> 00:03:23,040
generally not very clear and the

110
00:03:21,680 --> 00:03:25,840
transitor tool

111
00:03:23,040 --> 00:03:26,798
is supposed to actually solve some of

112
00:03:25,840 --> 00:03:29,200
these problems

113
00:03:26,799 --> 00:03:30,080
so we mentioned that meltdown has three

114
00:03:29,200 --> 00:03:33,119
steps

115
00:03:30,080 --> 00:03:35,120
uh so instead of

116
00:03:33,120 --> 00:03:37,360
step one we're gonna replace this step

117
00:03:35,120 --> 00:03:39,280
by a randomly generated memory operation

118
00:03:37,360 --> 00:03:41,280
to achieve this we take those conditions

119
00:03:39,280 --> 00:03:42,319
that we discussed earlier and try to mix

120
00:03:41,280 --> 00:03:44,720
and match them

121
00:03:42,319 --> 00:03:46,159
randomly to generate a new memory access

122
00:03:44,720 --> 00:03:49,040
that is either

123
00:03:46,159 --> 00:03:51,519
faulty or it faces a microcode assist or

124
00:03:49,040 --> 00:03:52,879
an exotic condition

125
00:03:51,519 --> 00:03:54,560
we also generate other memory

126
00:03:52,879 --> 00:03:57,120
instructions before this

127
00:03:54,560 --> 00:03:58,959
first step that puts data into different

128
00:03:57,120 --> 00:04:00,000
macro architectural buffers and into the

129
00:03:58,959 --> 00:04:01,840
pipeline and to do

130
00:04:00,000 --> 00:04:03,519
this they can generate different memory

131
00:04:01,840 --> 00:04:05,680
operations randomly

132
00:04:03,519 --> 00:04:07,680
and this memory operation of course they

133
00:04:05,680 --> 00:04:09,840
put noun data to the

134
00:04:07,680 --> 00:04:11,599
to the pipeline so later on we can find

135
00:04:09,840 --> 00:04:14,879
out if any of those data

136
00:04:11,599 --> 00:04:16,399
has been leaked we also add some random

137
00:04:14,879 --> 00:04:17,199
instruction because as we mentioned

138
00:04:16,399 --> 00:04:19,279
sometimes

139
00:04:17,199 --> 00:04:20,720
uh adding some random instruction or

140
00:04:19,279 --> 00:04:22,320
removing some instructions

141
00:04:20,720 --> 00:04:24,000
in the proof of concept may actually

142
00:04:22,320 --> 00:04:27,040
change the leakage behavior

143
00:04:24,000 --> 00:04:28,320
this is how transitor generate random

144
00:04:27,040 --> 00:04:30,320
code snippets with the hope of

145
00:04:28,320 --> 00:04:30,719
reproducing a variant of these attacks

146
00:04:30,320 --> 00:04:33,759
or

147
00:04:30,720 --> 00:04:35,680
even finding new variants after

148
00:04:33,759 --> 00:04:36,800
generating each of these code snippets

149
00:04:35,680 --> 00:04:38,240
we execute

150
00:04:36,800 --> 00:04:40,080
the snippet and look if there is a

151
00:04:38,240 --> 00:04:42,400
leakage and if there is a leakage

152
00:04:40,080 --> 00:04:44,240
of one of the known values that we have

153
00:04:42,400 --> 00:04:45,919
filled in the pipeline then

154
00:04:44,240 --> 00:04:48,240
if you are interested to look more

155
00:04:45,919 --> 00:04:51,758
closely in the code of snippet

156
00:04:48,240 --> 00:04:53,520
then uh we say okay this is the mds poc

157
00:04:51,759 --> 00:04:55,680
probably and then we try to

158
00:04:53,520 --> 00:04:57,680
classify the leakage with the help of

159
00:04:55,680 --> 00:04:59,919
performance counters or just

160
00:04:57,680 --> 00:05:00,960
manual analysis and and playing with the

161
00:04:59,919 --> 00:05:03,120
proof of concept

162
00:05:00,960 --> 00:05:04,880
uh we tested this tool on multiple cpus

163
00:05:03,120 --> 00:05:06,240
and generated tons of pocs and some of

164
00:05:04,880 --> 00:05:07,680
these poses can be found in the source

165
00:05:06,240 --> 00:05:11,280
code repository that we

166
00:05:07,680 --> 00:05:13,600
just released and we looked at also in

167
00:05:11,280 --> 00:05:14,960
more closely to some of these pocs and

168
00:05:13,600 --> 00:05:16,479
there is a

169
00:05:14,960 --> 00:05:18,000
there is a more detailed discussion of

170
00:05:16,479 --> 00:05:20,639
them in the paper uh

171
00:05:18,000 --> 00:05:22,080
but uh this helped us to give a better

172
00:05:20,639 --> 00:05:23,520
insight into these attacks we have

173
00:05:22,080 --> 00:05:25,039
noticed that some of the assumptions

174
00:05:23,520 --> 00:05:25,599
about these attacks in previous papers

175
00:05:25,039 --> 00:05:28,639
are not

176
00:05:25,600 --> 00:05:30,479
necessarily varied uh for example

177
00:05:28,639 --> 00:05:32,320
you previously assumed that leakage from

178
00:05:30,479 --> 00:05:33,919
the store buffer required 4k aliasing

179
00:05:32,320 --> 00:05:35,759
but transitor generated

180
00:05:33,919 --> 00:05:38,400
some pocs that leaked data from the

181
00:05:35,759 --> 00:05:41,039
stall buffer v that for helios

182
00:05:38,400 --> 00:05:42,479
so with these analysis we also found a

183
00:05:41,039 --> 00:05:45,039
new sub variant of

184
00:05:42,479 --> 00:05:46,000
the subvariant of these attacks we

185
00:05:45,039 --> 00:05:49,280
called it

186
00:05:46,000 --> 00:05:51,440
medusa medusa only index data from right

187
00:05:49,280 --> 00:05:52,960
combining operation and there are some

188
00:05:51,440 --> 00:05:54,800
operations on intel cpus that are

189
00:05:52,960 --> 00:05:55,840
inherently performed in the right

190
00:05:54,800 --> 00:05:58,319
combining fashions

191
00:05:55,840 --> 00:05:59,758
the advantage of medusa compared to a

192
00:05:58,319 --> 00:06:01,440
previous attack is that since it only

193
00:05:59,759 --> 00:06:02,960
leaks a specific operation it has less

194
00:06:01,440 --> 00:06:04,479
noise for example if you run a whole

195
00:06:02,960 --> 00:06:06,400
application on a hyperthread

196
00:06:04,479 --> 00:06:08,080
you won't leak all the memory operations

197
00:06:06,400 --> 00:06:10,799
you don't care about your only

198
00:06:08,080 --> 00:06:12,560
memory copy operation so you may be able

199
00:06:10,800 --> 00:06:13,520
to do a more targeted like with the help

200
00:06:12,560 --> 00:06:15,199
of medusa

201
00:06:13,520 --> 00:06:17,840
uh we came up with three variants of

202
00:06:15,199 --> 00:06:18,960
medicine that each of them triggered the

203
00:06:17,840 --> 00:06:20,638
leakage differently

204
00:06:18,960 --> 00:06:22,000
in the first variant we leaked the right

205
00:06:20,639 --> 00:06:23,919
combining operation by

206
00:06:22,000 --> 00:06:25,360
by indexing into different offsets of a

207
00:06:23,919 --> 00:06:27,680
cache line uh

208
00:06:25,360 --> 00:06:29,120
for instance and by doing some

209
00:06:27,680 --> 00:06:30,800
experiments we realized that some

210
00:06:29,120 --> 00:06:31,600
offsets of a cache now leak data from

211
00:06:30,800 --> 00:06:33,120
the

212
00:06:31,600 --> 00:06:34,960
rep move that is running on the other

213
00:06:33,120 --> 00:06:37,759
hyper tray

214
00:06:34,960 --> 00:06:40,318
and uh we also realized that we don't

215
00:06:37,759 --> 00:06:41,840
need anything that is after this 32 byte

216
00:06:40,319 --> 00:06:44,000
and our hypothesis is that

217
00:06:41,840 --> 00:06:45,440
this has to do with something with the

218
00:06:44,000 --> 00:06:47,600
size of the

219
00:06:45,440 --> 00:06:49,120
common data bias that is 32 byte and

220
00:06:47,600 --> 00:06:50,800
intel cpus

221
00:06:49,120 --> 00:06:53,120
uh in the second variant we leaked the

222
00:06:50,800 --> 00:06:55,680
repo from the other hyper thread by

223
00:06:53,120 --> 00:06:56,639
doing an unlined memory store to load

224
00:06:55,680 --> 00:06:58,319
forwarding

225
00:06:56,639 --> 00:07:00,479
for example if we do a faulty memory

226
00:06:58,319 --> 00:07:03,199
load that is 32 byte here

227
00:07:00,479 --> 00:07:04,880
and before that faulty load we do a

228
00:07:03,199 --> 00:07:06,560
memorial server operation that is not

229
00:07:04,880 --> 00:07:08,159
faulty but it's a smaller

230
00:07:06,560 --> 00:07:10,080
it's a different index and we realize

231
00:07:08,160 --> 00:07:13,440
that the data from the rep move

232
00:07:10,080 --> 00:07:14,560
is is leaked here and but more

233
00:07:13,440 --> 00:07:16,560
interestingly

234
00:07:14,560 --> 00:07:18,400
you realize that also if you change the

235
00:07:16,560 --> 00:07:21,599
offset of this store operation that is

236
00:07:18,400 --> 00:07:22,799
very unrelated you can um you you manage

237
00:07:21,599 --> 00:07:24,400
to leak different offset

238
00:07:22,800 --> 00:07:26,639
offsets of the rep move that is running

239
00:07:24,400 --> 00:07:28,239
on the other uh hyper thread

240
00:07:26,639 --> 00:07:30,800
and the third variant of this attack

241
00:07:28,240 --> 00:07:34,319
just use the red move operation again

242
00:07:30,800 --> 00:07:35,840
but uh this faulty rep move basically

243
00:07:34,319 --> 00:07:38,080
links the data from the other

244
00:07:35,840 --> 00:07:39,520
rep which we call this a shadow rep move

245
00:07:38,080 --> 00:07:41,120
very end because it seems like the

246
00:07:39,520 --> 00:07:42,719
buffer is shared between these two rep

247
00:07:41,120 --> 00:07:43,360
move operations running on separate

248
00:07:42,720 --> 00:07:45,520
threads

249
00:07:43,360 --> 00:07:47,360
and the one that gets the file pick up

250
00:07:45,520 --> 00:07:50,719
steel delta that is put there

251
00:07:47,360 --> 00:07:52,400
by the other one sometime and uh

252
00:07:50,720 --> 00:07:54,400
we also wanted to show the impact of

253
00:07:52,400 --> 00:07:56,159
this new variant and a real

254
00:07:54,400 --> 00:07:57,840
attack scenario so we demonstrate an

255
00:07:56,160 --> 00:08:01,199
attack that leaks an rsa key

256
00:07:57,840 --> 00:08:02,638
from openssl openssl uses a base64

257
00:08:01,199 --> 00:08:05,120
decoder to load

258
00:08:02,639 --> 00:08:07,280
cryptography keys that are stored in pem

259
00:08:05,120 --> 00:08:09,759
format and basically for decoder

260
00:08:07,280 --> 00:08:11,679
use rep move instruction so when we

261
00:08:09,759 --> 00:08:13,919
executed one of the variants of

262
00:08:11,680 --> 00:08:16,000
our attack you realize that some part of

263
00:08:13,919 --> 00:08:18,159
this encoded key is leaked more often

264
00:08:16,000 --> 00:08:19,039
and it always leaked the same parts

265
00:08:18,160 --> 00:08:22,000
medusa

266
00:08:19,039 --> 00:08:22,639
the 60 byte chunks of continuous data

267
00:08:22,000 --> 00:08:25,199
which

268
00:08:22,639 --> 00:08:26,639
when we looked at the decoded rsa key

269
00:08:25,199 --> 00:08:29,759
each of the 60 byte

270
00:08:26,639 --> 00:08:32,000
16 byte chunks uh translate to a 12 byte

271
00:08:29,759 --> 00:08:32,880
of actual key parameters rsa keys are

272
00:08:32,000 --> 00:08:36,399
stored

273
00:08:32,880 --> 00:08:39,760
with these parameters in in the

274
00:08:36,399 --> 00:08:41,039
in the pem format but here we are

275
00:08:39,760 --> 00:08:43,439
interested in p

276
00:08:41,039 --> 00:08:46,640
and q which are the prime numbers uh

277
00:08:43,440 --> 00:08:49,760
that are generated for the private key

278
00:08:46,640 --> 00:08:50,800
so we unfortunately don't get the entire

279
00:08:49,760 --> 00:08:53,279
prq if we

280
00:08:50,800 --> 00:08:55,439
recover the entire p or q the rsa key is

281
00:08:53,279 --> 00:08:57,920
broken but we only leak chunks of p

282
00:08:55,440 --> 00:08:58,560
and chunks of q but thanks to a

283
00:08:57,920 --> 00:09:02,079
technique

284
00:08:58,560 --> 00:09:03,839
uh invented by copper smith we know that

285
00:09:02,080 --> 00:09:07,519
if we only

286
00:09:03,839 --> 00:09:08,320
know one third of the one third of the

287
00:09:07,519 --> 00:09:10,320
bits of p

288
00:09:08,320 --> 00:09:12,000
plus q we can recover the rest of the

289
00:09:10,320 --> 00:09:14,399
key from this so

290
00:09:12,000 --> 00:09:16,000
how does this work we attach these key

291
00:09:14,399 --> 00:09:19,360
segments together and

292
00:09:16,000 --> 00:09:20,399
when we have one third of this p or q we

293
00:09:19,360 --> 00:09:22,320
can actually

294
00:09:20,399 --> 00:09:24,000
create a n dimensional hidden number

295
00:09:22,320 --> 00:09:24,640
problem where n is relative to the

296
00:09:24,000 --> 00:09:27,440
number of

297
00:09:24,640 --> 00:09:30,080
recovered chunks and by feeding this to

298
00:09:27,440 --> 00:09:33,440
a lattice-based algorithm we can

299
00:09:30,080 --> 00:09:36,000
find the short vector and recover

300
00:09:33,440 --> 00:09:37,760
an entire p we want we demonstrated this

301
00:09:36,000 --> 00:09:40,480
attack on a 1024 by

302
00:09:37,760 --> 00:09:42,319
4-bit rsa key but we also discussed how

303
00:09:40,480 --> 00:09:44,880
the same attack is possible on

304
00:09:42,320 --> 00:09:46,880
a bigger key sizes with a more complex

305
00:09:44,880 --> 00:09:50,399
uh formulation

306
00:09:46,880 --> 00:09:53,360
we reported this initial finding to

307
00:09:50,399 --> 00:09:54,959
intel in june 2019 after a while when

308
00:09:53,360 --> 00:09:56,480
they tried the issue they mentioned that

309
00:09:54,959 --> 00:09:57,199
right combining operation uses field

310
00:09:56,480 --> 00:09:59,680
buffer

311
00:09:57,200 --> 00:10:01,200
and this also matches one of the uh one

312
00:09:59,680 --> 00:10:03,040
of their embodiment in

313
00:10:01,200 --> 00:10:04,720
in in the patent regarding right

314
00:10:03,040 --> 00:10:07,439
combining operation so

315
00:10:04,720 --> 00:10:08,160
in conclusion uh automated testing for

316
00:10:07,440 --> 00:10:09,760
cpu attacks

317
00:10:08,160 --> 00:10:12,240
is important it helps us to understand

318
00:10:09,760 --> 00:10:14,319
the root cause of these issues better

319
00:10:12,240 --> 00:10:16,720
we can also use it to verify hardware

320
00:10:14,320 --> 00:10:18,560
mitigation and also it can help us to

321
00:10:16,720 --> 00:10:20,079
improve the leakage and understand the

322
00:10:18,560 --> 00:10:22,399
impact of these attacks better

323
00:10:20,079 --> 00:10:23,839
but is it really true that we can find

324
00:10:22,399 --> 00:10:26,240
if a new hardware

325
00:10:23,839 --> 00:10:27,040
has proper mitigation intel at some

326
00:10:26,240 --> 00:10:30,240
point they

327
00:10:27,040 --> 00:10:32,560
sent us a new isolate cpu after

328
00:10:30,240 --> 00:10:33,279
the november release of mds and iceland

329
00:10:32,560 --> 00:10:34,959
cpu

330
00:10:33,279 --> 00:10:37,200
was claimed at the time that it has

331
00:10:34,959 --> 00:10:39,518
mitigation against mds in the harder so

332
00:10:37,200 --> 00:10:40,399
it's fundamentally secure against these

333
00:10:39,519 --> 00:10:42,320
attacks

334
00:10:40,399 --> 00:10:44,560
but a couple of months ago while i was

335
00:10:42,320 --> 00:10:47,279
stuck at all due to pandemic i ran

336
00:10:44,560 --> 00:10:48,800
transcender on iceland and after some

337
00:10:47,279 --> 00:10:51,200
tests i realized that

338
00:10:48,800 --> 00:10:52,000
none of the attacks work anymore except

339
00:10:51,200 --> 00:10:53,760
that

340
00:10:52,000 --> 00:10:56,160
transitor managed to generate a variant

341
00:10:53,760 --> 00:10:57,839
of a store buffer data assembly

342
00:10:56,160 --> 00:10:59,279
i looked at closer at the poc and it

343
00:10:57,839 --> 00:11:01,200
turns out that the poc

344
00:10:59,279 --> 00:11:02,640
is a store buffer leakage due to 4k

345
00:11:01,200 --> 00:11:04,720
aliasing but

346
00:11:02,640 --> 00:11:06,480
also because of the cash modification

347
00:11:04,720 --> 00:11:09,760
and putting the store address to a

348
00:11:06,480 --> 00:11:12,880
modified state the leakage also

349
00:11:09,760 --> 00:11:14,640
happens faster i reported this issue

350
00:11:12,880 --> 00:11:16,160
into the intel they completed the triage

351
00:11:14,640 --> 00:11:17,199
in may and they asked us for embargo

352
00:11:16,160 --> 00:11:18,880
until july

353
00:11:17,200 --> 00:11:20,320
uh in the discussion i had been an

354
00:11:18,880 --> 00:11:22,320
engineer they mentioned that the

355
00:11:20,320 --> 00:11:23,680
mitigation for isil xp was partially

356
00:11:22,320 --> 00:11:26,240
disabled due to some

357
00:11:23,680 --> 00:11:27,920
uh chicken beads and apparently oems

358
00:11:26,240 --> 00:11:29,839
also have shipped the ice like with

359
00:11:27,920 --> 00:11:31,519
the wrong micro code so intel needed

360
00:11:29,839 --> 00:11:34,000
some time until july to make sure

361
00:11:31,519 --> 00:11:36,240
oems and customers have enough time to

362
00:11:34,000 --> 00:11:39,360
mitigate this issue by updating the

363
00:11:36,240 --> 00:11:40,880
their microcode version so this shows

364
00:11:39,360 --> 00:11:42,880
that our tool transfer actually works

365
00:11:40,880 --> 00:11:43,839
and it's useful for testing if a new cpu

366
00:11:42,880 --> 00:11:46,000
is vulnerable to

367
00:11:43,839 --> 00:11:47,120
mds attack also did some investigative

368
00:11:46,000 --> 00:11:49,760
work and wrote a

369
00:11:47,120 --> 00:11:51,760
report about this issue and we can see

370
00:11:49,760 --> 00:11:55,200
what microcodes are vulnerable and what

371
00:11:51,760 --> 00:11:58,079
are are secure intel also updated mds

372
00:11:55,200 --> 00:11:59,440
advisory to include iceland cpu this is

373
00:11:58,079 --> 00:12:01,599
the end of my talk

374
00:11:59,440 --> 00:12:03,680
there are some github links here to the

375
00:12:01,600 --> 00:12:11,839
tool and the iceland finding

376
00:12:03,680 --> 00:12:11,839
and i would be happy to take questions

377
00:12:15,920 --> 00:12:18,000
you

