1
00:00:09,280 --> 00:00:12,000
hello

2
00:00:09,920 --> 00:00:13,920
my name is antonio flores montoya and

3
00:00:12,000 --> 00:00:15,679
today i'm going to be presenting my

4
00:00:13,920 --> 00:00:19,119
joint work

5
00:00:15,679 --> 00:00:21,600
with every shooter datalog disassembly

6
00:00:19,119 --> 00:00:22,720
the first thing uh let me give you a

7
00:00:21,600 --> 00:00:24,960
little bit of motivation

8
00:00:22,720 --> 00:00:26,640
why we want to do this assembly uh in

9
00:00:24,960 --> 00:00:29,439
many cases you

10
00:00:26,640 --> 00:00:30,720
you have a binary and you find a bug or

11
00:00:29,439 --> 00:00:32,238
a vulnerability

12
00:00:30,720 --> 00:00:33,760
and you want to fix it but you don't

13
00:00:32,238 --> 00:00:34,559
have the source code the source code is

14
00:00:33,760 --> 00:00:36,079
not available

15
00:00:34,559 --> 00:00:37,760
and this could be because the company

16
00:00:36,079 --> 00:00:38,640
that created this binary doesn't exist

17
00:00:37,760 --> 00:00:42,079
anymore

18
00:00:38,640 --> 00:00:43,440
or they lost the source code um or any

19
00:00:42,079 --> 00:00:45,200
other reason like that

20
00:00:43,440 --> 00:00:48,160
one of the few options that you have is

21
00:00:45,200 --> 00:00:51,520
you can try to disassemble the binary

22
00:00:48,160 --> 00:00:53,919
device a patch to fix that vulnerability

23
00:00:51,520 --> 00:00:56,399
in the assembly code and reassemble and

24
00:00:53,920 --> 00:00:59,520
generate a new binary

25
00:00:56,399 --> 00:01:01,359
so this disassembly is the first step in

26
00:00:59,520 --> 00:01:02,559
several technologies such as binary

27
00:01:01,359 --> 00:01:05,840
analysis

28
00:01:02,559 --> 00:01:08,479
binary writing and binary hardening

29
00:01:05,840 --> 00:01:10,080
but we don't only want to just get the

30
00:01:08,479 --> 00:01:12,240
listing of instructions that compose the

31
00:01:10,080 --> 00:01:13,119
binary we want to obtain reassemblable

32
00:01:12,240 --> 00:01:15,920
assembly

33
00:01:13,119 --> 00:01:17,520
that is we want assembly code with cross

34
00:01:15,920 --> 00:01:20,320
references

35
00:01:17,520 --> 00:01:22,158
that we can modify and reassemble

36
00:01:20,320 --> 00:01:24,399
without breaking it

37
00:01:22,159 --> 00:01:26,720
so this involves two tasks we we have

38
00:01:24,400 --> 00:01:29,920
instruction boundary identification

39
00:01:26,720 --> 00:01:30,960
and symbolization if you look at a

40
00:01:29,920 --> 00:01:33,520
binary

41
00:01:30,960 --> 00:01:34,240
there is the binary doesn't come with

42
00:01:33,520 --> 00:01:36,880
boundaries

43
00:01:34,240 --> 00:01:38,000
on where instructions start and end so

44
00:01:36,880 --> 00:01:40,320
the first thing that we want

45
00:01:38,000 --> 00:01:42,320
we have to do is we have to figure out

46
00:01:40,320 --> 00:01:43,600
where these boundaries are where

47
00:01:42,320 --> 00:01:44,320
instructions start and where

48
00:01:43,600 --> 00:01:47,439
instructions

49
00:01:44,320 --> 00:01:50,158
end and this can be challenging

50
00:01:47,439 --> 00:01:53,119
uh in an architecture such as x64

51
00:01:50,159 --> 00:01:55,040
because instructions have variable sizes

52
00:01:53,119 --> 00:01:57,920
and you can have data that interleaves

53
00:01:55,040 --> 00:01:57,920
with instructions

54
00:01:58,159 --> 00:02:01,200
the second problem that we tackle is

55
00:01:59,759 --> 00:02:03,360
symbolization um

56
00:02:01,200 --> 00:02:05,759
for each number in the binary some of

57
00:02:03,360 --> 00:02:08,318
these numbers are going to be

58
00:02:05,759 --> 00:02:09,199
referring to addresses of other parts of

59
00:02:08,318 --> 00:02:10,639
the binary

60
00:02:09,199 --> 00:02:13,359
whereas others are going to be just

61
00:02:10,639 --> 00:02:16,319
literals that have to remain unchanged

62
00:02:13,360 --> 00:02:17,760
for references um we want to create

63
00:02:16,319 --> 00:02:20,958
labels

64
00:02:17,760 --> 00:02:23,280
um that point to the correct

65
00:02:20,959 --> 00:02:24,560
the corresponding part of the binary so

66
00:02:23,280 --> 00:02:27,680
if we move

67
00:02:24,560 --> 00:02:30,160
uh and we change things in the binary

68
00:02:27,680 --> 00:02:31,920
we can keep those symbolic references

69
00:02:30,160 --> 00:02:35,040
without breaking it

70
00:02:31,920 --> 00:02:36,879
okay and the one thing to mention here

71
00:02:35,040 --> 00:02:38,000
is that relocation information is not

72
00:02:36,879 --> 00:02:40,239
enough

73
00:02:38,000 --> 00:02:43,519
for doing symbolization not even for

74
00:02:40,239 --> 00:02:46,000
position independent code

75
00:02:43,519 --> 00:02:47,920
so our approach is to use data load um

76
00:02:46,000 --> 00:02:51,680
data log is a declarative

77
00:02:47,920 --> 00:02:54,238
programming language and

78
00:02:51,680 --> 00:02:56,160
it is going to be very useful to do both

79
00:02:54,239 --> 00:02:57,440
instruction boundary identification and

80
00:02:56,160 --> 00:02:59,200
symbolization

81
00:02:57,440 --> 00:03:00,959
for these two things we want to be able

82
00:02:59,200 --> 00:03:03,119
to combine heuristics easily

83
00:03:00,959 --> 00:03:05,440
and the declarative nature of data loss

84
00:03:03,120 --> 00:03:07,920
is going to facilitate this

85
00:03:05,440 --> 00:03:11,040
combination and we want to use simple

86
00:03:07,920 --> 00:03:14,720
static analysis to inform our decisions

87
00:03:11,040 --> 00:03:17,120
and data log is very

88
00:03:14,720 --> 00:03:18,000
is very good at expressing simple static

89
00:03:17,120 --> 00:03:20,400
analysis

90
00:03:18,000 --> 00:03:21,280
in particular data flow analysis and we

91
00:03:20,400 --> 00:03:24,319
want to run

92
00:03:21,280 --> 00:03:27,599
this analysis very quickly so we can

93
00:03:24,319 --> 00:03:29,518
handle very big binaries and data loss

94
00:03:27,599 --> 00:03:32,238
is also good for this because we have

95
00:03:29,519 --> 00:03:34,159
now tools that can generate efficient

96
00:03:32,239 --> 00:03:37,680
parallel c plus plus code from

97
00:03:34,159 --> 00:03:40,319
data log programs so how do we do this

98
00:03:37,680 --> 00:03:41,920
well to do binary assembly with data

99
00:03:40,319 --> 00:03:43,200
though we have to take the binary and we

100
00:03:41,920 --> 00:03:44,879
have to encode the information in the

101
00:03:43,200 --> 00:03:46,560
binary into fact

102
00:03:44,879 --> 00:03:48,159
that is the initial knowledge of the

103
00:03:46,560 --> 00:03:50,480
binary so

104
00:03:48,159 --> 00:03:52,640
we are going to decode every possible

105
00:03:50,480 --> 00:03:54,159
offset in the code sections

106
00:03:52,640 --> 00:03:56,238
and see what instruction might be

107
00:03:54,159 --> 00:03:57,439
located there so if you have an

108
00:03:56,239 --> 00:03:59,280
instruction that is a

109
00:03:57,439 --> 00:04:01,680
move instruction from an immediate to a

110
00:03:59,280 --> 00:04:03,599
register we will generate the following

111
00:04:01,680 --> 00:04:05,280
facts and a fact that says

112
00:04:03,599 --> 00:04:07,760
we have an instruction of this address

113
00:04:05,280 --> 00:04:09,200
with a size it's a moving structure and

114
00:04:07,760 --> 00:04:11,040
it has these two operands

115
00:04:09,200 --> 00:04:14,000
the first operand is a register the

116
00:04:11,040 --> 00:04:15,200
second operand is immediate right and

117
00:04:14,000 --> 00:04:17,680
we're going to do that for

118
00:04:15,200 --> 00:04:18,719
every possible offset so we obtain a

119
00:04:17,680 --> 00:04:22,320
superset

120
00:04:18,720 --> 00:04:26,000
of all possible instructions in the code

121
00:04:22,320 --> 00:04:28,400
if as a certain address we fail to

122
00:04:26,000 --> 00:04:29,199
decode any instruction then we're going

123
00:04:28,400 --> 00:04:31,280
to say

124
00:04:29,199 --> 00:04:32,880
that address contains an invalid

125
00:04:31,280 --> 00:04:33,359
instruction we generate a predicate

126
00:04:32,880 --> 00:04:34,639
saying

127
00:04:33,360 --> 00:04:37,040
that others contain an invalid

128
00:04:34,639 --> 00:04:39,280
instruction

129
00:04:37,040 --> 00:04:41,360
once we have these facts then the

130
00:04:39,280 --> 00:04:42,719
analysis and heuristics are expressed as

131
00:04:41,360 --> 00:04:44,960
data log rules

132
00:04:42,720 --> 00:04:46,960
and this is an example of a data log

133
00:04:44,960 --> 00:04:48,960
rule that

134
00:04:46,960 --> 00:04:51,120
performs a backward traversal that

135
00:04:48,960 --> 00:04:53,039
propagates embodied instructions

136
00:04:51,120 --> 00:04:54,240
and the way you read this rule would be

137
00:04:53,040 --> 00:04:56,320
the following

138
00:04:54,240 --> 00:04:58,080
if there is an instruction or an address

139
00:04:56,320 --> 00:05:01,120
from that must fall through

140
00:04:58,080 --> 00:05:03,039
or jump or calls an address to

141
00:05:01,120 --> 00:05:04,720
that contains an invalid instruction or

142
00:05:03,039 --> 00:05:07,120
no instruction at all

143
00:05:04,720 --> 00:05:08,400
then that instruction and address from

144
00:05:07,120 --> 00:05:10,560
is also invalid

145
00:05:08,400 --> 00:05:11,758
and as you can see this is a recursive

146
00:05:10,560 --> 00:05:13,039
rule and

147
00:05:11,759 --> 00:05:14,800
this rule is going to be applied

148
00:05:13,039 --> 00:05:17,360
repeatedly and that's going to grow the

149
00:05:14,800 --> 00:05:20,880
number of invalid instructions

150
00:05:17,360 --> 00:05:23,440
until we reach a fixed point

151
00:05:20,880 --> 00:05:24,159
so how does our instruction but the

152
00:05:23,440 --> 00:05:25,759
identification

153
00:05:24,160 --> 00:05:27,360
work well the first thing that we do is

154
00:05:25,759 --> 00:05:30,000
this backward traversal that i mentioned

155
00:05:27,360 --> 00:05:31,680
that propagates invalid instructions

156
00:05:30,000 --> 00:05:33,440
uh after that we're going to do a

157
00:05:31,680 --> 00:05:35,840
forward traversal that is going to

158
00:05:33,440 --> 00:05:36,800
build a superset of all possible basic

159
00:05:35,840 --> 00:05:39,679
blocks

160
00:05:36,800 --> 00:05:41,280
this is a hybrid traversal it's

161
00:05:39,680 --> 00:05:43,039
something between linear strip and

162
00:05:41,280 --> 00:05:45,359
recursive traversal

163
00:05:43,039 --> 00:05:46,080
and it's going to try to use all the

164
00:05:45,360 --> 00:05:48,479
possible

165
00:05:46,080 --> 00:05:49,680
potential references in in the data

166
00:05:48,479 --> 00:05:52,080
sections and starting

167
00:05:49,680 --> 00:05:52,880
as starting points for the traversal and

168
00:05:52,080 --> 00:05:56,560
that way

169
00:05:52,880 --> 00:05:57,199
we can be assured that we are going to

170
00:05:56,560 --> 00:05:59,600
find

171
00:05:57,199 --> 00:06:01,919
all possible basic blocks and we have a

172
00:05:59,600 --> 00:06:03,840
superset of all possible basic blocks

173
00:06:01,919 --> 00:06:06,080
once we have this super set of possible

174
00:06:03,840 --> 00:06:07,280
basic blocks these candidate blocks then

175
00:06:06,080 --> 00:06:09,359
we're going to assign

176
00:06:07,280 --> 00:06:11,119
points to this candidate blocks using

177
00:06:09,360 --> 00:06:12,400
heuristics so for example if a block is

178
00:06:11,120 --> 00:06:13,520
an entry point we're going to give it

179
00:06:12,400 --> 00:06:16,799
many points

180
00:06:13,520 --> 00:06:17,520
if the block address appears in a data

181
00:06:16,800 --> 00:06:19,280
section

182
00:06:17,520 --> 00:06:21,198
then we're going to give you some points

183
00:06:19,280 --> 00:06:22,559
if the jump the block is jumped from

184
00:06:21,199 --> 00:06:23,280
another block we're going to give it

185
00:06:22,560 --> 00:06:25,039
points

186
00:06:23,280 --> 00:06:26,719
and finally we're going to aggregate

187
00:06:25,039 --> 00:06:28,159
those points for all these candidates

188
00:06:26,720 --> 00:06:30,240
and we're going to

189
00:06:28,160 --> 00:06:31,840
resolve overlaps this aggregation is an

190
00:06:30,240 --> 00:06:32,880
extension of data log it's not pure data

191
00:06:31,840 --> 00:06:35,758
log

192
00:06:32,880 --> 00:06:37,280
but it's included in the in the data log

193
00:06:35,759 --> 00:06:38,880
engine that we use

194
00:06:37,280 --> 00:06:40,880
so if we have two blocks that are

195
00:06:38,880 --> 00:06:44,159
overlapping we will decide which one is

196
00:06:40,880 --> 00:06:46,800
the real block and which one is spurious

197
00:06:44,160 --> 00:06:47,440
for symbolization there's a naive

198
00:06:46,800 --> 00:06:50,800
approach

199
00:06:47,440 --> 00:06:53,440
that uh one can use which is uh

200
00:06:50,800 --> 00:06:54,080
any number that is in the binary address

201
00:06:53,440 --> 00:06:56,400
range

202
00:06:54,080 --> 00:06:57,919
is considered a symbol every number

203
00:06:56,400 --> 00:07:00,239
outside the range is considered

204
00:06:57,919 --> 00:07:02,159
literal and but this has problems

205
00:07:00,240 --> 00:07:04,319
because it is going to produce both

206
00:07:02,160 --> 00:07:06,000
false positives when a literal coincides

207
00:07:04,319 --> 00:07:07,759
with the binary address range

208
00:07:06,000 --> 00:07:09,120
and false negatives i'm not going to

209
00:07:07,759 --> 00:07:10,960
discuss false negatives

210
00:07:09,120 --> 00:07:13,280
today but you can take a look at the

211
00:07:10,960 --> 00:07:15,280
paper see how we handle those

212
00:07:13,280 --> 00:07:18,080
for false positives we want to reduce

213
00:07:15,280 --> 00:07:20,159
the number of false positives

214
00:07:18,080 --> 00:07:21,758
and the way we do that is we want to

215
00:07:20,160 --> 00:07:24,240
collate additional evidence

216
00:07:21,759 --> 00:07:25,840
how numbers are used using supporting

217
00:07:24,240 --> 00:07:28,720
analysis and heuristics

218
00:07:25,840 --> 00:07:30,239
and then using this additional evidence

219
00:07:28,720 --> 00:07:31,120
we're going to assign points to the

220
00:07:30,240 --> 00:07:32,800
candidates

221
00:07:31,120 --> 00:07:35,360
whether it's a symbol a symbol minus

222
00:07:32,800 --> 00:07:38,319
symbol a string or other data

223
00:07:35,360 --> 00:07:39,440
elements with a different size and again

224
00:07:38,319 --> 00:07:41,199
as in instruction boundary

225
00:07:39,440 --> 00:07:45,199
identification we're going to

226
00:07:41,199 --> 00:07:47,039
aggregate the points to make a decision

227
00:07:45,199 --> 00:07:49,360
so what are the the analysis that we

228
00:07:47,039 --> 00:07:50,878
have we have a defuse analysis

229
00:07:49,360 --> 00:07:52,479
that is going to generate predicates

230
00:07:50,879 --> 00:07:54,560
that tell us that a register

231
00:07:52,479 --> 00:07:55,840
is defined as an address and then is

232
00:07:54,560 --> 00:07:58,960
used as some other address

233
00:07:55,840 --> 00:08:01,198
in this case the register rdx

234
00:07:58,960 --> 00:08:03,120
is defined at the first instruction and

235
00:08:01,199 --> 00:08:06,000
then is used in this

236
00:08:03,120 --> 00:08:07,680
later compare instruction we have a

237
00:08:06,000 --> 00:08:10,560
register value analysis

238
00:08:07,680 --> 00:08:11,599
that relates the value of a register at

239
00:08:10,560 --> 00:08:13,759
some address

240
00:08:11,599 --> 00:08:15,199
with the value of another register at a

241
00:08:13,759 --> 00:08:17,759
different address

242
00:08:15,199 --> 00:08:20,160
multiplied by some multiplier plus some

243
00:08:17,759 --> 00:08:23,360
displacement and this can capture

244
00:08:20,160 --> 00:08:24,400
simple relationships such as rdx has a

245
00:08:23,360 --> 00:08:27,280
constant

246
00:08:24,400 --> 00:08:28,638
address a cons a constant value but it

247
00:08:27,280 --> 00:08:30,878
can also capture more complex

248
00:08:28,639 --> 00:08:33,919
relationships such as rdx

249
00:08:30,879 --> 00:08:36,159
can be some value multiplied by 32

250
00:08:33,919 --> 00:08:38,240
plus some constant and this this is

251
00:08:36,159 --> 00:08:40,479
going to be useful for our last

252
00:08:38,240 --> 00:08:41,360
supporting analysis which is the data

253
00:08:40,479 --> 00:08:44,240
access

254
00:08:41,360 --> 00:08:45,920
pattern analysis the data access pattern

255
00:08:44,240 --> 00:08:46,959
analysis is going to generate predicates

256
00:08:45,920 --> 00:08:50,240
that tell us that

257
00:08:46,959 --> 00:08:52,640
an address is being accessed with a size

258
00:08:50,240 --> 00:08:54,720
and a multiplier from some other address

259
00:08:52,640 --> 00:08:55,519
so in this case we will conclude that

260
00:08:54,720 --> 00:08:58,080
this

261
00:08:55,519 --> 00:08:59,519
address at the bottom is accessed with

262
00:08:58,080 --> 00:09:02,080
keyword size

263
00:08:59,519 --> 00:09:03,600
and with a 32 multiplier and this is

264
00:09:02,080 --> 00:09:05,200
going to be useful because that tells us

265
00:09:03,600 --> 00:09:08,800
that that address probably

266
00:09:05,200 --> 00:09:10,880
holds a data element of size keyword

267
00:09:08,800 --> 00:09:13,040
and that give us clues of whether that

268
00:09:10,880 --> 00:09:16,240
can be a pointer or not in this case

269
00:09:13,040 --> 00:09:16,800
q1 is more likely to be a pointer given

270
00:09:16,240 --> 00:09:20,839
that

271
00:09:16,800 --> 00:09:22,000
x64 has eight bit eight eight byte

272
00:09:20,839 --> 00:09:25,120
pointers

273
00:09:22,000 --> 00:09:28,640
so with the support and analysis we

274
00:09:25,120 --> 00:09:30,720
we have we we use them to enhance uh

275
00:09:28,640 --> 00:09:32,640
enhance our confidence or whether a

276
00:09:30,720 --> 00:09:34,959
candidate in a data section is a pointer

277
00:09:32,640 --> 00:09:38,399
or not or some other element or not

278
00:09:34,959 --> 00:09:39,680
so if a candidate pointer is pointing to

279
00:09:38,399 --> 00:09:41,040
an instruction beginning that is

280
00:09:39,680 --> 00:09:43,120
positive evidence

281
00:09:41,040 --> 00:09:44,399
if it matches a data access that is also

282
00:09:43,120 --> 00:09:46,640
positive evidence

283
00:09:44,399 --> 00:09:48,399
but if it conflicts if it overlaps with

284
00:09:46,640 --> 00:09:49,279
some data access that is negative

285
00:09:48,399 --> 00:09:51,040
evidence

286
00:09:49,279 --> 00:09:53,279
and again we are going to assign those

287
00:09:51,040 --> 00:09:55,120
points as

288
00:09:53,279 --> 00:09:57,839
we're going to aggregate them and reach

289
00:09:55,120 --> 00:10:00,320
a final decision

290
00:09:57,839 --> 00:10:01,760
we did an experimental evaluation uh our

291
00:10:00,320 --> 00:10:04,800
tool did this satsang support

292
00:10:01,760 --> 00:10:08,000
x64 linux of binaries

293
00:10:04,800 --> 00:10:10,160
so we test our

294
00:10:08,000 --> 00:10:12,320
disassembler did this awesome with three

295
00:10:10,160 --> 00:10:14,160
benchmark sets seven compiler versions

296
00:10:12,320 --> 00:10:16,880
including versions of gcc

297
00:10:14,160 --> 00:10:18,240
clan and icc and six compiler

298
00:10:16,880 --> 00:10:22,480
optimization flags

299
00:10:18,240 --> 00:10:25,360
which makes a total of 7 658 binaries

300
00:10:22,480 --> 00:10:26,880
and we compare this assassin to rambler

301
00:10:25,360 --> 00:10:29,440
which is a state-of-the-art tool in

302
00:10:26,880 --> 00:10:31,120
reassemble disassembly

303
00:10:29,440 --> 00:10:32,640
the results are the following we did two

304
00:10:31,120 --> 00:10:34,560
experiments in one

305
00:10:32,640 --> 00:10:36,160
we check if we get the correct

306
00:10:34,560 --> 00:10:39,359
symbolization information

307
00:10:36,160 --> 00:10:42,240
for a binary in the second one we

308
00:10:39,360 --> 00:10:45,519
disassemble the binary reassemble it and

309
00:10:42,240 --> 00:10:48,959
run the test on the reassemble binary

310
00:10:45,519 --> 00:10:50,800
and uncheck that the functionality uh

311
00:10:48,959 --> 00:10:52,560
is there if it passes all the tests we

312
00:10:50,800 --> 00:10:53,359
say the function functionality is

313
00:10:52,560 --> 00:10:57,599
correct

314
00:10:53,360 --> 00:11:00,000
in both cases we we get a perfect result

315
00:10:57,600 --> 00:11:02,560
for over 99.7 percent

316
00:11:00,000 --> 00:11:05,600
of the binaries and this is well above

317
00:11:02,560 --> 00:11:09,040
the results of from there

318
00:11:05,600 --> 00:11:11,680
just to mention uh very briefly

319
00:11:09,040 --> 00:11:13,279
we also measure the disassembly time of

320
00:11:11,680 --> 00:11:15,760
both tools

321
00:11:13,279 --> 00:11:17,600
this is awesome is in most cases faster

322
00:11:15,760 --> 00:11:18,800
than rambla in many cases many times

323
00:11:17,600 --> 00:11:22,079
faster than rambler

324
00:11:18,800 --> 00:11:24,160
everything below the diagonal line

325
00:11:22,079 --> 00:11:27,680
means that this is awesome was faster

326
00:11:24,160 --> 00:11:30,959
than than rambler in disassembly

327
00:11:27,680 --> 00:11:33,760
so as a conclusion um we assemble with

328
00:11:30,959 --> 00:11:35,518
reassemblable disassembly is undecidable

329
00:11:33,760 --> 00:11:37,600
and practical solutions therefore are

330
00:11:35,519 --> 00:11:38,959
going to benefit from both analysis and

331
00:11:37,600 --> 00:11:41,279
heuristics

332
00:11:38,959 --> 00:11:43,518
and data log works for both we can

333
00:11:41,279 --> 00:11:45,920
express analysis concisely

334
00:11:43,519 --> 00:11:47,680
which is less error prone and allows for

335
00:11:45,920 --> 00:11:50,160
faster development

336
00:11:47,680 --> 00:11:51,120
and we can easily experiment with

337
00:11:50,160 --> 00:11:54,240
heuristics

338
00:11:51,120 --> 00:11:55,920
expressed as data log rules

339
00:11:54,240 --> 00:11:58,160
in conclusion this is awesome it's

340
00:11:55,920 --> 00:11:58,560
faster and it achieves better precision

341
00:11:58,160 --> 00:12:01,760
than

342
00:11:58,560 --> 00:12:01,760
the state-of-the-art tools

343
00:12:02,000 --> 00:12:07,200
thank you very much now we can go for

344
00:12:05,040 --> 00:12:07,199
the

345
00:12:08,839 --> 00:12:11,839
questions

346
00:12:16,480 --> 00:12:18,560
you

