1
00:00:08,080 --> 00:00:11,040
hello

2
00:00:08,720 --> 00:00:12,400
i'm strongly from kaist i'm going to

3
00:00:11,040 --> 00:00:14,479
present my paper

4
00:00:12,400 --> 00:00:16,880
montage neural network language model

5
00:00:14,480 --> 00:00:19,199
guided javascript engine filter

6
00:00:16,880 --> 00:00:20,240
this is a joint work with hyungshokkan

7
00:00:19,199 --> 00:00:23,359
senkocha

8
00:00:20,240 --> 00:00:25,198
and my advisor svelson

9
00:00:23,359 --> 00:00:27,760
web browsers are becoming more and more

10
00:00:25,199 --> 00:00:30,160
popular in 2018

11
00:00:27,760 --> 00:00:32,640
almost 4 billion people in the world use

12
00:00:30,160 --> 00:00:34,880
web browsers every day

13
00:00:32,640 --> 00:00:36,960
in a web browser such as chrome there is

14
00:00:34,880 --> 00:00:39,280
a component called rjs engine

15
00:00:36,960 --> 00:00:40,480
which executes javascript code of a web

16
00:00:39,280 --> 00:00:42,399
page

17
00:00:40,480 --> 00:00:43,519
let's assume there is a vulnerability in

18
00:00:42,399 --> 00:00:45,760
this engine

19
00:00:43,520 --> 00:00:46,879
once the p9 user accesses a malicious

20
00:00:45,760 --> 00:00:48,960
web page

21
00:00:46,879 --> 00:00:50,160
the adversary will be able to execute

22
00:00:48,960 --> 00:00:52,480
arbitrary code

23
00:00:50,160 --> 00:00:53,760
on behalf of the user by exploiting the

24
00:00:52,480 --> 00:00:56,718
vulnerability

25
00:00:53,760 --> 00:00:58,480
therefore gs engine vulnerabilities pose

26
00:00:56,719 --> 00:01:00,640
a critical security threat

27
00:00:58,480 --> 00:01:02,239
moreover according to zero doom when a

28
00:01:00,640 --> 00:01:04,080
genius engine vulnerability

29
00:01:02,239 --> 00:01:05,360
is chained with the local privilege

30
00:01:04,080 --> 00:01:07,360
escalation bug

31
00:01:05,360 --> 00:01:08,720
it even costs up to five hundred

32
00:01:07,360 --> 00:01:11,439
thousand us dollars

33
00:01:08,720 --> 00:01:12,479
to find such js engine bugs previous

34
00:01:11,439 --> 00:01:15,439
researchers have

35
00:01:12,479 --> 00:01:17,439
employed an approach called fuzzing json

36
00:01:15,439 --> 00:01:19,119
and fuzzers repeatedly generate

37
00:01:17,439 --> 00:01:21,279
arbitrary js code

38
00:01:19,119 --> 00:01:23,119
and test whether the generated code

39
00:01:21,280 --> 00:01:26,080
triggers any bug

40
00:01:23,119 --> 00:01:27,119
so how can these phosphors generate js

41
00:01:26,080 --> 00:01:28,640
code

42
00:01:27,119 --> 00:01:31,439
there are two different types of a

43
00:01:28,640 --> 00:01:33,600
fuzzer in terms of generating js code

44
00:01:31,439 --> 00:01:34,720
mutation based and generation based

45
00:01:33,600 --> 00:01:37,520
fuzzers

46
00:01:34,720 --> 00:01:40,240
mutation-based fuzzers such as lengthus

47
00:01:37,520 --> 00:01:42,158
randomly combine aesc subtrees extracted

48
00:01:40,240 --> 00:01:44,079
from csjs

49
00:01:42,159 --> 00:01:46,320
on the other hand generation based

50
00:01:44,079 --> 00:01:48,798
fuzzers such as jsfunfest

51
00:01:46,320 --> 00:01:50,880
simply apply j's grammar rules from

52
00:01:48,799 --> 00:01:53,360
scratch

53
00:01:50,880 --> 00:01:54,640
however both of them are basically not

54
00:01:53,360 --> 00:01:57,439
that different

55
00:01:54,640 --> 00:01:58,560
they randomly combine asd subtrees or

56
00:01:57,439 --> 00:02:02,479
randomly apply

57
00:01:58,560 --> 00:02:05,600
js grammar rules for example

58
00:02:02,479 --> 00:02:07,200
let's assume this is the current asd a

59
00:02:05,600 --> 00:02:09,519
fuzzer now wants to append a new

60
00:02:07,200 --> 00:02:11,520
building block to this node

61
00:02:09,520 --> 00:02:14,319
and it has three building blocks which

62
00:02:11,520 --> 00:02:17,040
are appendable to this node

63
00:02:14,319 --> 00:02:18,079
then gs folders like lengthwise or js

64
00:02:17,040 --> 00:02:20,560
fundfus

65
00:02:18,080 --> 00:02:22,640
simply select one from these candidates

66
00:02:20,560 --> 00:02:24,800
and append it to the load

67
00:02:22,640 --> 00:02:25,920
in other words they randomly select

68
00:02:24,800 --> 00:02:29,200
their building blocks

69
00:02:25,920 --> 00:02:31,119
as long as js grammar lows so

70
00:02:29,200 --> 00:02:32,640
we thought we can do much better than

71
00:02:31,120 --> 00:02:35,040
this

72
00:02:32,640 --> 00:02:36,000
our intuition is that if we have a set

73
00:02:35,040 --> 00:02:38,799
of bug triggering

74
00:02:36,000 --> 00:02:40,080
js code we can extract similar patterns

75
00:02:38,800 --> 00:02:42,480
from the set

76
00:02:40,080 --> 00:02:45,360
then we can leverage these patterns to

77
00:02:42,480 --> 00:02:47,920
create another bug triggering js code

78
00:02:45,360 --> 00:02:49,760
for instance from the previous scenario

79
00:02:47,920 --> 00:02:50,480
we can now refer to the extracted

80
00:02:49,760 --> 00:02:52,640
patterns

81
00:02:50,480 --> 00:02:55,440
to know which building block is more

82
00:02:52,640 --> 00:02:57,359
likely to trigger js engine blocks

83
00:02:55,440 --> 00:03:01,120
therefore we can select the next

84
00:02:57,360 --> 00:03:03,040
building block based on these patterns

85
00:03:01,120 --> 00:03:05,360
to investigate whether such patterns

86
00:03:03,040 --> 00:03:07,359
exist in bug triggering js code

87
00:03:05,360 --> 00:03:09,120
we first analyzed functional and

88
00:03:07,360 --> 00:03:12,560
syntactical commonalities

89
00:03:09,120 --> 00:03:15,040
in js engine vulnerabilities

90
00:03:12,560 --> 00:03:15,680
to find the functional commonalities we

91
00:03:15,040 --> 00:03:18,480
collected

92
00:03:15,680 --> 00:03:19,760
and analyzed patches of 50 chakra core

93
00:03:18,480 --> 00:03:22,640
cves

94
00:03:19,760 --> 00:03:23,359
among 50 patches 18 percent revised

95
00:03:22,640 --> 00:03:27,679
global

96
00:03:23,360 --> 00:03:28,640
cpp and 14 revised javascript array.cpp

97
00:03:27,680 --> 00:03:32,080
file

98
00:03:28,640 --> 00:03:35,279
in other words 18 of cves are related

99
00:03:32,080 --> 00:03:36,080
to global optimization and 14 are

100
00:03:35,280 --> 00:03:39,920
related to

101
00:03:36,080 --> 00:03:41,120
javascript rates for syntactical

102
00:03:39,920 --> 00:03:44,000
commonalities

103
00:03:41,120 --> 00:03:45,200
we compared asd subtrees extracted from

104
00:03:44,000 --> 00:03:48,400
two sets

105
00:03:45,200 --> 00:03:51,399
we collected 2038 js tests

106
00:03:48,400 --> 00:03:52,720
from chakra core repository as of august

107
00:03:51,400 --> 00:03:55,920
2016

108
00:03:52,720 --> 00:03:58,159
and extracted subtrees from the set we

109
00:03:55,920 --> 00:04:01,119
also collected 67 pocs

110
00:03:58,159 --> 00:04:02,879
regarding chakra core cvs reported after

111
00:04:01,120 --> 00:04:05,120
august 2016.

112
00:04:02,879 --> 00:04:06,239
then we checked whether subtrees from

113
00:04:05,120 --> 00:04:09,439
the second set

114
00:04:06,239 --> 00:04:12,159
exist in the first set surprisingly

115
00:04:09,439 --> 00:04:13,359
95 percent of subtrees extracted from

116
00:04:12,159 --> 00:04:16,719
the second set

117
00:04:13,360 --> 00:04:19,040
already existed in the first set

118
00:04:16,720 --> 00:04:21,519
for instance this is a snippet of js

119
00:04:19,040 --> 00:04:24,160
code in the first set

120
00:04:21,519 --> 00:04:25,759
and this is a poc triggering a cv

121
00:04:24,160 --> 00:04:27,759
reported after that

122
00:04:25,759 --> 00:04:31,199
as you can see these two code are

123
00:04:27,759 --> 00:04:33,280
syntactically very similar

124
00:04:31,199 --> 00:04:34,720
based on the two observations from the

125
00:04:33,280 --> 00:04:37,758
preliminary studies

126
00:04:34,720 --> 00:04:40,639
we designed a new fuzzer montage

127
00:04:37,759 --> 00:04:43,280
two address functional commonalities

128
00:04:40,639 --> 00:04:44,960
montage leverages the functionality of

129
00:04:43,280 --> 00:04:47,599
existing js tests

130
00:04:44,960 --> 00:04:49,520
that previously triggered js engine bugs

131
00:04:47,600 --> 00:04:52,080
by mutating them

132
00:04:49,520 --> 00:04:54,560
and to address syntactical commonalities

133
00:04:52,080 --> 00:04:57,599
montage models the relationships between

134
00:04:54,560 --> 00:04:57,600
aesc subtrees

135
00:04:57,680 --> 00:05:01,199
montage works as follows given a set of

136
00:05:00,479 --> 00:05:04,159
js code

137
00:05:01,199 --> 00:05:05,840
it pre-processes js code into a sequence

138
00:05:04,160 --> 00:05:08,320
of fragments

139
00:05:05,840 --> 00:05:10,159
then it trains a neural network language

140
00:05:08,320 --> 00:05:13,919
model with the pre-processed

141
00:05:10,160 --> 00:05:14,960
sequences finally under the guidance of

142
00:05:13,919 --> 00:05:18,080
the trained model

143
00:05:14,960 --> 00:05:21,840
it mutates a cdjs test to generate bug

144
00:05:18,080 --> 00:05:24,320
triggering js code so let's first take a

145
00:05:21,840 --> 00:05:25,520
look at the pre-processing step we have

146
00:05:24,320 --> 00:05:29,520
js code here

147
00:05:25,520 --> 00:05:32,320
and the corresponding ast from this ast

148
00:05:29,520 --> 00:05:33,039
montage extracts a fragment which is a

149
00:05:32,320 --> 00:05:36,639
subtree

150
00:05:33,039 --> 00:05:37,440
of depth 1. particularly it extracts

151
00:05:36,639 --> 00:05:40,560
fragments

152
00:05:37,440 --> 00:05:42,880
in the pre-order manner so the next

153
00:05:40,560 --> 00:05:46,160
fragment is this one

154
00:05:42,880 --> 00:05:50,000
then this one this one

155
00:05:46,160 --> 00:05:52,960
and this one as a result

156
00:05:50,000 --> 00:05:54,960
the ast on the left side is represented

157
00:05:52,960 --> 00:05:56,400
with the sequence of fragments on the

158
00:05:54,960 --> 00:05:59,520
right side

159
00:05:56,400 --> 00:06:01,359
so why this modeling is novel

160
00:05:59,520 --> 00:06:03,039
let's assume that we want to predict the

161
00:06:01,360 --> 00:06:05,280
next fragment

162
00:06:03,039 --> 00:06:07,360
then starting from the root node this

163
00:06:05,280 --> 00:06:09,198
representation enables modeling the

164
00:06:07,360 --> 00:06:10,720
global compositional relationship

165
00:06:09,199 --> 00:06:12,880
between fragments

166
00:06:10,720 --> 00:06:13,919
in other words montage can predict the

167
00:06:12,880 --> 00:06:18,080
next fragment

168
00:06:13,919 --> 00:06:20,318
based on all the preceding fragments

169
00:06:18,080 --> 00:06:22,080
unlike this representation several

170
00:06:20,319 --> 00:06:24,560
previous studies modeled the code

171
00:06:22,080 --> 00:06:25,919
as a sequence of tokens as shown on the

172
00:06:24,560 --> 00:06:28,960
right side

173
00:06:25,919 --> 00:06:31,359
however according to our evaluation most

174
00:06:28,960 --> 00:06:31,840
of the js code created by a token level

175
00:06:31,360 --> 00:06:35,680
model

176
00:06:31,840 --> 00:06:36,719
were invalid among the hundred thousand

177
00:06:35,680 --> 00:06:39,440
js code

178
00:06:36,720 --> 00:06:41,360
only point five eight percent of js code

179
00:06:39,440 --> 00:06:43,759
created from the token level model were

180
00:06:41,360 --> 00:06:43,759
valid

181
00:06:43,840 --> 00:06:47,599
this difference stems from the

182
00:06:45,360 --> 00:06:48,800
capability of selecting valid next

183
00:06:47,600 --> 00:06:51,039
fragments

184
00:06:48,800 --> 00:06:53,919
let's assume that given this fragment

185
00:06:51,039 --> 00:06:55,919
montage wants to predict the next one

186
00:06:53,919 --> 00:06:57,120
since we represent js code with

187
00:06:55,919 --> 00:06:59,198
fragments we know

188
00:06:57,120 --> 00:07:01,039
that the next fragment should start with

189
00:06:59,199 --> 00:07:03,759
variable declaration mode

190
00:07:01,039 --> 00:07:04,800
like this one therefore with this

191
00:07:03,759 --> 00:07:06,720
representation

192
00:07:04,800 --> 00:07:09,199
montage can always append valid

193
00:07:06,720 --> 00:07:09,199
fragments

194
00:07:09,280 --> 00:07:13,359
at the same time since this is a

195
00:07:11,120 --> 00:07:15,919
sequential form of representation

196
00:07:13,360 --> 00:07:17,759
it can be directly applied to train any

197
00:07:15,919 --> 00:07:20,318
prevalent language models

198
00:07:17,759 --> 00:07:22,160
including an lstm model and a markov

199
00:07:20,319 --> 00:07:24,400
model

200
00:07:22,160 --> 00:07:26,080
among many language models montaj

201
00:07:24,400 --> 00:07:28,318
employs an lstm model

202
00:07:26,080 --> 00:07:30,080
which captures long-term dependencies

203
00:07:28,319 --> 00:07:32,000
between fragments

204
00:07:30,080 --> 00:07:34,240
basically given a sequence of preceding

205
00:07:32,000 --> 00:07:36,400
fragments the model is trained to

206
00:07:34,240 --> 00:07:38,400
predict the probability distribution of

207
00:07:36,400 --> 00:07:41,758
the next fragment

208
00:07:38,400 --> 00:07:44,318
after training montage mutates a city ac

209
00:07:41,759 --> 00:07:46,400
by leveraging the trained elastic model

210
00:07:44,319 --> 00:07:46,960
you can see a c2js test on the right

211
00:07:46,400 --> 00:07:49,039
side

212
00:07:46,960 --> 00:07:51,198
and the corresponding asd on the left

213
00:07:49,039 --> 00:07:53,520
side for simplicity

214
00:07:51,199 --> 00:07:54,240
we only show a snippet which corresponds

215
00:07:53,520 --> 00:07:58,318
to the shaded

216
00:07:54,240 --> 00:08:00,560
js statement from the city ast

217
00:07:58,319 --> 00:08:01,680
montage removes a randomly selected

218
00:08:00,560 --> 00:08:03,759
subtree

219
00:08:01,680 --> 00:08:06,960
and prepares a sequence of fragments

220
00:08:03,759 --> 00:08:09,360
that represents the current ast

221
00:08:06,960 --> 00:08:11,440
then it queries the trained model with

222
00:08:09,360 --> 00:08:13,440
the sequence

223
00:08:11,440 --> 00:08:16,639
the model will output the probability

224
00:08:13,440 --> 00:08:19,599
distribution of the next fragment

225
00:08:16,639 --> 00:08:21,599
then from the top k fragments montage

226
00:08:19,599 --> 00:08:24,800
randomly selects one fragment

227
00:08:21,599 --> 00:08:26,080
and appends it to the ast as in the

228
00:08:24,800 --> 00:08:28,240
preprocessing step

229
00:08:26,080 --> 00:08:30,878
montage repeats this process in the

230
00:08:28,240 --> 00:08:33,760
pre-order manner

231
00:08:30,879 --> 00:08:35,599
so it appends the next fragment here and

232
00:08:33,760 --> 00:08:39,760
the next one here

233
00:08:35,599 --> 00:08:42,000
here and here as shown in this asd

234
00:08:39,760 --> 00:08:43,919
montage repeats appending fragments

235
00:08:42,000 --> 00:08:46,720
until there are no more non-terminal

236
00:08:43,919 --> 00:08:49,680
symbols in the lymph nodes

237
00:08:46,720 --> 00:08:50,800
after mutation montage outputs the js

238
00:08:49,680 --> 00:08:53,760
code as shown

239
00:08:50,800 --> 00:08:54,560
on the right side to evaluate our father

240
00:08:53,760 --> 00:08:58,319
montage

241
00:08:54,560 --> 00:09:00,399
we collected 33.5 k unique js files

242
00:08:58,320 --> 00:09:04,160
from the repositories of four major

243
00:09:00,399 --> 00:09:06,839
engines as of january 2017.

244
00:09:04,160 --> 00:09:08,319
then we ran faster against chakra core

245
00:09:06,839 --> 00:09:11,920
1.4.1

246
00:09:08,320 --> 00:09:14,880
which is released in february 2017.

247
00:09:11,920 --> 00:09:16,640
that is js code triggering unpatched box

248
00:09:14,880 --> 00:09:19,760
in this version of chakra core

249
00:09:16,640 --> 00:09:22,240
does not exist in our training set we

250
00:09:19,760 --> 00:09:23,439
compared montage with three different js

251
00:09:22,240 --> 00:09:27,120
engine fighters

252
00:09:23,440 --> 00:09:28,880
quota alchemist jsfantas and ifazar

253
00:09:27,120 --> 00:09:31,120
we ran five trials of our frozen

254
00:09:28,880 --> 00:09:34,240
campaign each of which lasts for

255
00:09:31,120 --> 00:09:35,600
72 hours the table reports the median

256
00:09:34,240 --> 00:09:38,959
number of unique crashes

257
00:09:35,600 --> 00:09:41,440
and non-cvs found by each fuzzer

258
00:09:38,959 --> 00:09:43,680
as you can see montage outperformed or

259
00:09:41,440 --> 00:09:46,399
the other state-of-the-art fuzzers

260
00:09:43,680 --> 00:09:49,199
and their differences were statistically

261
00:09:46,399 --> 00:09:50,480
significant

262
00:09:49,200 --> 00:09:52,480
we compared two different

263
00:09:50,480 --> 00:09:54,480
representations of js code

264
00:09:52,480 --> 00:09:57,040
modeling js code as a sequence of

265
00:09:54,480 --> 00:10:00,160
fragments and a sequence of tokens

266
00:09:57,040 --> 00:10:01,839
token rnn means mutating js code by

267
00:10:00,160 --> 00:10:05,360
leveraging an lstm model

268
00:10:01,839 --> 00:10:07,760
trained on js code tokens as you can see

269
00:10:05,360 --> 00:10:09,440
montage found much more bugs compared to

270
00:10:07,760 --> 00:10:13,120
talking around

271
00:10:09,440 --> 00:10:15,680
actually only 0.58 of the js tests

272
00:10:13,120 --> 00:10:17,200
generated by token rnn were executed

273
00:10:15,680 --> 00:10:19,120
without errors

274
00:10:17,200 --> 00:10:21,680
to evaluate the effectiveness of the

275
00:10:19,120 --> 00:10:23,440
lstm model we compared montage with

276
00:10:21,680 --> 00:10:26,880
random fragment assembly

277
00:10:23,440 --> 00:10:27,519
without guidance of any model the result

278
00:10:26,880 --> 00:10:29,600
shows that

279
00:10:27,519 --> 00:10:32,000
the fuzzer finds more bugs when it is

280
00:10:29,600 --> 00:10:34,399
guided by the lstm model

281
00:10:32,000 --> 00:10:35,680
we further analyze js code created by

282
00:10:34,399 --> 00:10:38,079
montage

283
00:10:35,680 --> 00:10:40,560
this graph shows how many fragments are

284
00:10:38,079 --> 00:10:43,519
appended to compose a new subtree

285
00:10:40,560 --> 00:10:45,599
as the red line shows to trigger 90 of

286
00:10:43,519 --> 00:10:49,279
security bugs found by montage

287
00:10:45,600 --> 00:10:52,000
it appends up to 52 fragments

288
00:10:49,279 --> 00:10:52,959
in other words given a sequence the lst

289
00:10:52,000 --> 00:10:55,519
model captures

290
00:10:52,959 --> 00:10:57,279
long-term dependencies between fragments

291
00:10:55,519 --> 00:10:58,480
and effectively predicts the next

292
00:10:57,279 --> 00:11:00,800
fragment

293
00:10:58,480 --> 00:11:02,320
finally we ran montage against the

294
00:11:00,800 --> 00:11:05,519
latest js engines

295
00:11:02,320 --> 00:11:07,360
and found the 37 previously unknown bugs

296
00:11:05,519 --> 00:11:09,600
among the found bugs two and one

297
00:11:07,360 --> 00:11:12,560
security box were respectably found from

298
00:11:09,600 --> 00:11:14,880
chakra core and javascript core

299
00:11:12,560 --> 00:11:15,760
26 of them were patched at the time of

300
00:11:14,880 --> 00:11:18,560
writing

301
00:11:15,760 --> 00:11:19,600
and especially microsoft rewarded with 5

302
00:11:18,560 --> 00:11:22,640
000 installers

303
00:11:19,600 --> 00:11:23,440
for the bug found in chakra core in

304
00:11:22,640 --> 00:11:25,600
conclusion

305
00:11:23,440 --> 00:11:26,720
we proposed the first neural network

306
00:11:25,600 --> 00:11:29,440
language model guided

307
00:11:26,720 --> 00:11:30,880
js engine fighter and demonstrated its

308
00:11:29,440 --> 00:11:32,959
efficacy

309
00:11:30,880 --> 00:11:34,560
he proposed the novel approach of model

310
00:11:32,959 --> 00:11:35,439
injurious code as a sequence of

311
00:11:34,560 --> 00:11:37,599
fragments

312
00:11:35,440 --> 00:11:40,240
on which any prevalent language models

313
00:11:37,600 --> 00:11:42,079
can be trained without modification

314
00:11:40,240 --> 00:11:44,399
montage outperformed state of the art

315
00:11:42,079 --> 00:11:45,599
departures in the old version of chakra

316
00:11:44,399 --> 00:11:48,640
core

317
00:11:45,600 --> 00:11:49,120
montage found 37 previously unreported

318
00:11:48,640 --> 00:11:52,639
bugs

319
00:11:49,120 --> 00:11:53,839
from the latest js engines to support

320
00:11:52,639 --> 00:11:57,600
future research

321
00:11:53,839 --> 00:12:00,160
we make our code public at this address

322
00:11:57,600 --> 00:12:02,240
for more details of montage please refer

323
00:12:00,160 --> 00:12:11,839
to our paper

324
00:12:02,240 --> 00:12:11,839
thank you for your attention

325
00:12:12,880 --> 00:12:14,959
you

