1
00:00:08,880 --> 00:00:10,880
hi

2
00:00:09,200 --> 00:00:12,959
thanks for listening to my talk my name

3
00:00:10,880 --> 00:00:14,880
is daniel morimi and i'm a phd student

4
00:00:12,960 --> 00:00:16,480
at booster by techy institute today i'm

5
00:00:14,880 --> 00:00:18,160
going to talk about my work on

6
00:00:16,480 --> 00:00:19,760
trusted execution environments and

7
00:00:18,160 --> 00:00:21,680
attacks on intelligence

8
00:00:19,760 --> 00:00:23,439
copycat controlled instruction level

9
00:00:21,680 --> 00:00:25,599
attacks on enclaves the joint worked

10
00:00:23,439 --> 00:00:28,560
with joe van bolt nadia henninger

11
00:00:25,599 --> 00:00:30,560
frank peace and berg sooner the

12
00:00:28,560 --> 00:00:31,198
traditional security model in the cloud

13
00:00:30,560 --> 00:00:33,440
or other

14
00:00:31,199 --> 00:00:36,079
multi-tenant environments we assume that

15
00:00:33,440 --> 00:00:38,079
the hardware and system software

16
00:00:36,079 --> 00:00:40,079
are trusted now with the trusted

17
00:00:38,079 --> 00:00:40,800
execution environments this model has

18
00:00:40,079 --> 00:00:44,000
changed

19
00:00:40,800 --> 00:00:45,599
uh in intel s6 the system software

20
00:00:44,000 --> 00:00:47,760
almost anything that is outside of the

21
00:00:45,600 --> 00:00:50,800
cpu die is considered malicious

22
00:00:47,760 --> 00:00:52,718
and the cpu provide protection for

23
00:00:50,800 --> 00:00:54,239
security specific modules called

24
00:00:52,719 --> 00:00:56,399
enclaves

25
00:00:54,239 --> 00:00:58,879
these enclaves are mapped by the os and

26
00:00:56,399 --> 00:01:01,359
loaded by the user space application

27
00:00:58,879 --> 00:01:01,919
but even os adversaries are not supposed

28
00:01:01,359 --> 00:01:04,799
to

29
00:01:01,920 --> 00:01:06,240
read or or modify the data inside the

30
00:01:04,799 --> 00:01:08,400
enclave

31
00:01:06,240 --> 00:01:10,399
since intellistics was released a new

32
00:01:08,400 --> 00:01:12,400
line of research has emerged regarding

33
00:01:10,400 --> 00:01:13,200
attacks and intelligence and enclave

34
00:01:12,400 --> 00:01:14,880
software

35
00:01:13,200 --> 00:01:17,040
some of the proposed attacks break the

36
00:01:14,880 --> 00:01:19,439
entire hardware promises

37
00:01:17,040 --> 00:01:21,280
and intel have issued microcode patches

38
00:01:19,439 --> 00:01:24,639
and they also had to recover the

39
00:01:21,280 --> 00:01:27,360
trusted computing base by revoking old

40
00:01:24,640 --> 00:01:29,040
attestation keys on the other hand there

41
00:01:27,360 --> 00:01:30,479
is a whole set of other attacks that

42
00:01:29,040 --> 00:01:32,560
intel does not claim to

43
00:01:30,479 --> 00:01:34,479
protect against uh these attacks

44
00:01:32,560 --> 00:01:35,680
generally leak the memory access pattern

45
00:01:34,479 --> 00:01:38,400
and control flow

46
00:01:35,680 --> 00:01:39,520
of enclave at runtime and for these

47
00:01:38,400 --> 00:01:41,360
intel says that

48
00:01:39,520 --> 00:01:42,720
it's responsibility of the software

49
00:01:41,360 --> 00:01:44,320
developer to apply

50
00:01:42,720 --> 00:01:46,079
constant time programming technique to

51
00:01:44,320 --> 00:01:47,439
protect their software

52
00:01:46,079 --> 00:01:49,439
there are two categories of these

53
00:01:47,439 --> 00:01:51,039
attacks the first category are such

54
00:01:49,439 --> 00:01:52,639
channels based on contention of macro

55
00:01:51,040 --> 00:01:55,360
architectural resources

56
00:01:52,640 --> 00:01:56,479
uh for example by creating contention in

57
00:01:55,360 --> 00:01:58,479
the cache or

58
00:01:56,479 --> 00:02:00,159
branch predictors the limitation of

59
00:01:58,479 --> 00:02:02,159
these macro architectural attacks

60
00:02:00,159 --> 00:02:03,920
is that they are not very reliable they

61
00:02:02,159 --> 00:02:06,560
require a lot of engineering effort

62
00:02:03,920 --> 00:02:07,680
and also as we have seen by another

63
00:02:06,560 --> 00:02:10,000
paper and decision

64
00:02:07,680 --> 00:02:12,400
the community has proposed uh some

65
00:02:10,000 --> 00:02:14,879
mitigation for these attacks by blocking

66
00:02:12,400 --> 00:02:16,239
the contention of uh macro architectural

67
00:02:14,879 --> 00:02:17,760
resources

68
00:02:16,239 --> 00:02:19,599
now there is a second category of these

69
00:02:17,760 --> 00:02:20,480
attacks that we cannot easily mitigate

70
00:02:19,599 --> 00:02:22,799
and they are called

71
00:02:20,480 --> 00:02:24,238
control channel attack the reason these

72
00:02:22,800 --> 00:02:25,200
are called control chain attacks that

73
00:02:24,239 --> 00:02:28,480
they are

74
00:02:25,200 --> 00:02:30,319
for the most part are deterministic and

75
00:02:28,480 --> 00:02:32,799
they exploit architectural features like

76
00:02:30,319 --> 00:02:35,518
the vape tables are handled

77
00:02:32,800 --> 00:02:36,879
uh to probe access patterns of enclave

78
00:02:35,519 --> 00:02:39,040
programs

79
00:02:36,879 --> 00:02:40,239
in this talk we introduced a new control

80
00:02:39,040 --> 00:02:42,480
channel attack called

81
00:02:40,239 --> 00:02:43,280
copycat that is deterministic but it

82
00:02:42,480 --> 00:02:45,920
also has a

83
00:02:43,280 --> 00:02:48,080
very high spatial resolution in intel's

84
00:02:45,920 --> 00:02:50,640
cheeks thread model we can control

85
00:02:48,080 --> 00:02:52,160
interrupt handlers with high precisions

86
00:02:50,640 --> 00:02:53,440
this means that if you have an enclave

87
00:02:52,160 --> 00:02:55,440
thread that executes

88
00:02:53,440 --> 00:02:57,680
uh this instruction over a period of

89
00:02:55,440 --> 00:02:59,280
time uh we can issue a very high

90
00:02:57,680 --> 00:03:01,040
precision timer interrupt

91
00:02:59,280 --> 00:03:03,840
to force a context to each on this

92
00:03:01,040 --> 00:03:05,679
thread and the state after r tool called

93
00:03:03,840 --> 00:03:07,760
sgsgs a step

94
00:03:05,680 --> 00:03:09,360
can now interrupt an enclave at almost

95
00:03:07,760 --> 00:03:11,359
every desired instruction

96
00:03:09,360 --> 00:03:12,879
with some degree of noise for example

97
00:03:11,360 --> 00:03:14,800
here the t1 and t2

98
00:03:12,879 --> 00:03:15,920
shows the boundary of when a scheduling

99
00:03:14,800 --> 00:03:17,519
trial will happen

100
00:03:15,920 --> 00:03:19,200
if the green bar shows the end of the

101
00:03:17,519 --> 00:03:21,680
execution for this first

102
00:03:19,200 --> 00:03:22,799
knob instruction uh we know that this

103
00:03:21,680 --> 00:03:24,640
interrupt will happen

104
00:03:22,800 --> 00:03:26,799
somewhere in this window which means

105
00:03:24,640 --> 00:03:29,518
we'll execute a single instruction

106
00:03:26,799 --> 00:03:30,959
or no instruction now let's assume that

107
00:03:29,519 --> 00:03:32,720
the interrupt happened right after the

108
00:03:30,959 --> 00:03:34,640
snob instruction

109
00:03:32,720 --> 00:03:37,519
in this case we have a forward progress

110
00:03:34,640 --> 00:03:39,119
in the thread with a single step

111
00:03:37,519 --> 00:03:41,200
now by repeating this during the

112
00:03:39,120 --> 00:03:43,440
execution of an enclave thread we get

113
00:03:41,200 --> 00:03:45,518
some zero steps and some single steps

114
00:03:43,440 --> 00:03:46,000
but either way we are going to reach the

115
00:03:45,519 --> 00:03:48,720
end of the

116
00:03:46,000 --> 00:03:50,640
sequence of operations in an enclave

117
00:03:48,720 --> 00:03:53,439
trade

118
00:03:50,640 --> 00:03:54,879
now let's say we have issued 15 irq's to

119
00:03:53,439 --> 00:03:57,359
reach to the end of these

120
00:03:54,879 --> 00:03:58,560
instructions how many steps did we take

121
00:03:57,360 --> 00:04:00,560
during this time frame

122
00:03:58,560 --> 00:04:02,480
to answer that we need to know which of

123
00:04:00,560 --> 00:04:03,360
these irqs caused the zero step and

124
00:04:02,480 --> 00:04:05,920
which one of them

125
00:04:03,360 --> 00:04:06,640
caused a single step we have something

126
00:04:05,920 --> 00:04:08,720
called a

127
00:04:06,640 --> 00:04:11,359
page table entry that holds metadata and

128
00:04:08,720 --> 00:04:13,439
mutual to physical address translations

129
00:04:11,360 --> 00:04:15,200
although a malicious os cannot access

130
00:04:13,439 --> 00:04:17,599
the content of enclave pages

131
00:04:15,200 --> 00:04:20,079
but it can modify or read the metadata

132
00:04:17,600 --> 00:04:22,560
of pt entries for these pages

133
00:04:20,079 --> 00:04:23,440
and there is a access speed or a bit in

134
00:04:22,560 --> 00:04:25,360
the pte

135
00:04:23,440 --> 00:04:26,800
that helps the os to have some sort of

136
00:04:25,360 --> 00:04:29,440
contract with the cpu

137
00:04:26,800 --> 00:04:31,040
to check and determine what memory pages

138
00:04:29,440 --> 00:04:33,360
have been accessed before

139
00:04:31,040 --> 00:04:35,919
if you clear the a bit for record page

140
00:04:33,360 --> 00:04:37,919
the a bit for that page is only set when

141
00:04:35,919 --> 00:04:39,599
at least one instruction from the page

142
00:04:37,919 --> 00:04:41,919
is retired

143
00:04:39,600 --> 00:04:42,800
as a result by checking if the abt is

144
00:04:41,919 --> 00:04:46,240
set we know

145
00:04:42,800 --> 00:04:48,320
if our consecutive interrupts caused a

146
00:04:46,240 --> 00:04:50,960
single step or a zero step

147
00:04:48,320 --> 00:04:53,120
so we propose these single stepping

148
00:04:50,960 --> 00:04:55,599
counts as a side channel itself by

149
00:04:53,120 --> 00:04:57,520
but unfortunately discount for an entire

150
00:04:55,600 --> 00:04:59,199
execution thread is not a very valuable

151
00:04:57,520 --> 00:05:01,680
such an information

152
00:04:59,199 --> 00:05:02,960
so we can now combine this information

153
00:05:01,680 --> 00:05:05,520
with the secondary channel

154
00:05:02,960 --> 00:05:08,000
to count the number of instructions

155
00:05:05,520 --> 00:05:08,960
executed between two consecutive events

156
00:05:08,000 --> 00:05:11,600
such as

157
00:05:08,960 --> 00:05:12,320
page accesses or cache access in this

158
00:05:11,600 --> 00:05:14,639
paper

159
00:05:12,320 --> 00:05:15,440
we used page table attacks as a

160
00:05:14,639 --> 00:05:18,400
secondary

161
00:05:15,440 --> 00:05:20,160
deterministic channel to perform a fully

162
00:05:18,400 --> 00:05:21,520
deterministic attack with instruction

163
00:05:20,160 --> 00:05:24,240
level granularity

164
00:05:21,520 --> 00:05:25,520
let's assume this call instruction hits

165
00:05:24,240 --> 00:05:28,080
the second record page

166
00:05:25,520 --> 00:05:30,479
we can trap that event and then the next

167
00:05:28,080 --> 00:05:31,280
time we see another pages hits for which

168
00:05:30,479 --> 00:05:33,520
in this case

169
00:05:31,280 --> 00:05:35,039
the push instruction access the stack

170
00:05:33,520 --> 00:05:36,639
page we know that

171
00:05:35,039 --> 00:05:38,080
these two different pages have been

172
00:05:36,639 --> 00:05:40,320
accessed and now

173
00:05:38,080 --> 00:05:42,240
if we count the steps just between them

174
00:05:40,320 --> 00:05:44,080
you know that for instruction

175
00:05:42,240 --> 00:05:47,440
has been executed between these two

176
00:05:44,080 --> 00:05:49,599
events and we continue this for the next

177
00:05:47,440 --> 00:05:50,479
pages as well and similarly count

178
00:05:49,600 --> 00:05:51,759
different

179
00:05:50,479 --> 00:05:54,159
different number of instructions

180
00:05:51,759 --> 00:05:55,919
executed between page transitions

181
00:05:54,160 --> 00:05:57,840
previous control chain attacks only

182
00:05:55,919 --> 00:05:58,799
learned a sequence of pages that have

183
00:05:57,840 --> 00:06:00,560
been accessed now

184
00:05:58,800 --> 00:06:02,000
with copycat we have an additional

185
00:06:00,560 --> 00:06:03,759
deterministic channel

186
00:06:02,000 --> 00:06:07,120
which tells us how many instructions are

187
00:06:03,759 --> 00:06:09,199
executed between page transitions

188
00:06:07,120 --> 00:06:11,520
why is this information useful well in

189
00:06:09,199 --> 00:06:13,520
some algorithms or mitigations for

190
00:06:11,520 --> 00:06:15,280
software-based side channels sometimes

191
00:06:13,520 --> 00:06:16,240
we have some branches that are balanced

192
00:06:15,280 --> 00:06:19,198
from a

193
00:06:16,240 --> 00:06:20,000
code page or catch page perspective and

194
00:06:19,199 --> 00:06:22,080
they don't expose

195
00:06:20,000 --> 00:06:23,120
themselves to these attackers and for

196
00:06:22,080 --> 00:06:24,800
example here

197
00:06:23,120 --> 00:06:27,120
the c code shows that the same exact

198
00:06:24,800 --> 00:06:29,759
operation are executed on both sides

199
00:06:27,120 --> 00:06:31,120
uh however when you compile this if a

200
00:06:29,759 --> 00:06:33,280
statement the compiler

201
00:06:31,120 --> 00:06:34,960
doesn't necessarily generate the same

202
00:06:33,280 --> 00:06:37,679
number of instructions

203
00:06:34,960 --> 00:06:39,599
for each codepath and there's a small

204
00:06:37,680 --> 00:06:41,120
figure here we see three different code

205
00:06:39,600 --> 00:06:42,080
pages that are involved with this if

206
00:06:41,120 --> 00:06:44,000
statement

207
00:06:42,080 --> 00:06:45,680
a code page that holds the if statement

208
00:06:44,000 --> 00:06:46,720
itself another code page that holds the

209
00:06:45,680 --> 00:06:49,520
add function

210
00:06:46,720 --> 00:06:51,599
and a stack page as well and if you

211
00:06:49,520 --> 00:06:52,719
follow the execution one step at a time

212
00:06:51,599 --> 00:06:54,719
here we see that

213
00:06:52,720 --> 00:06:55,919
for the true value of this value of

214
00:06:54,720 --> 00:06:57,759
variable c

215
00:06:55,919 --> 00:06:59,359
one more instruction is executed before

216
00:06:57,759 --> 00:07:00,960
hitting the stack page

217
00:06:59,360 --> 00:07:03,039
this means that by counting how many

218
00:07:00,960 --> 00:07:05,198
instructions executed we could infer

219
00:07:03,039 --> 00:07:07,360
what was the decision of that branch

220
00:07:05,199 --> 00:07:08,800
even if they were only different for a

221
00:07:07,360 --> 00:07:12,160
single instruction

222
00:07:08,800 --> 00:07:14,479
now in some cases studies let's use this

223
00:07:12,160 --> 00:07:16,160
copycat attack to efficiently steal some

224
00:07:14,479 --> 00:07:19,599
crypto keys in the context of

225
00:07:16,160 --> 00:07:21,440
s6 in a cryptographic scheme there is a

226
00:07:19,599 --> 00:07:23,919
very popular algorithm called

227
00:07:21,440 --> 00:07:24,880
binary extended euclidean algorithm this

228
00:07:23,919 --> 00:07:28,159
is used for

229
00:07:24,880 --> 00:07:30,080
modular inversion and computing the gcd

230
00:07:28,160 --> 00:07:32,319
so it's useful for many different public

231
00:07:30,080 --> 00:07:34,000
crypto schemes uh previous attacks on

232
00:07:32,319 --> 00:07:36,080
this algorithm generally focus

233
00:07:34,000 --> 00:07:38,479
on they keep some leaking some of the

234
00:07:36,080 --> 00:07:40,240
branches using cash or page tables and

235
00:07:38,479 --> 00:07:40,880
they also have some measurement noise

236
00:07:40,240 --> 00:07:44,160
because

237
00:07:40,880 --> 00:07:47,039
uh cash attacks are not deterministics

238
00:07:44,160 --> 00:07:48,639
with copycat we can centuriously recover

239
00:07:47,039 --> 00:07:49,840
the outcome of all of these branches in

240
00:07:48,639 --> 00:07:52,319
this modular inverse

241
00:07:49,840 --> 00:07:54,239
function we analyzed the trace we could

242
00:07:52,319 --> 00:07:56,400
recover from wolfe ssl

243
00:07:54,240 --> 00:07:57,680
that used this algorithm and we noticed

244
00:07:56,400 --> 00:08:00,159
that this

245
00:07:57,680 --> 00:08:01,759
mathematical subroutine for this

246
00:08:00,160 --> 00:08:02,400
algorithm are located in a secondary

247
00:08:01,759 --> 00:08:04,560
code page

248
00:08:02,400 --> 00:08:06,638
so by tracking the page that holds this

249
00:08:04,560 --> 00:08:08,319
algorithm itself and another

250
00:08:06,639 --> 00:08:10,639
page that holds those mathematical

251
00:08:08,319 --> 00:08:12,160
subroutines we can apply the copycat

252
00:08:10,639 --> 00:08:15,680
instruction counting technique

253
00:08:12,160 --> 00:08:16,160
to recover all the branches at runtime

254
00:08:15,680 --> 00:08:17,759
here

255
00:08:16,160 --> 00:08:20,400
this function is used in many different

256
00:08:17,759 --> 00:08:21,520
places the dsa signature generation

257
00:08:20,400 --> 00:08:23,599
algorithm uses

258
00:08:21,520 --> 00:08:25,039
it to compute the modular inverse during

259
00:08:23,599 --> 00:08:27,360
signature generation

260
00:08:25,039 --> 00:08:29,440
we demonstrated a single trace attack on

261
00:08:27,360 --> 00:08:31,440
dsa by just iterating through

262
00:08:29,440 --> 00:08:33,120
the deterministic trace and computing

263
00:08:31,440 --> 00:08:35,279
the value of k inverse

264
00:08:33,120 --> 00:08:36,799
and then simply computing the private

265
00:08:35,279 --> 00:08:40,958
key from the nonce

266
00:08:36,799 --> 00:08:43,039
k in other cases wolf ssl use this

267
00:08:40,958 --> 00:08:45,599
function to generate rsa keys

268
00:08:43,039 --> 00:08:47,439
uh for example for a value of p and q as

269
00:08:45,600 --> 00:08:49,920
two prime numbers for the rsa

270
00:08:47,440 --> 00:08:50,959
private key uh another parameter is

271
00:08:49,920 --> 00:08:54,079
generated

272
00:08:50,959 --> 00:08:55,839
by computing q inverse mod p

273
00:08:54,080 --> 00:08:57,440
this time we cannot simply trade through

274
00:08:55,839 --> 00:09:00,080
the trace because we

275
00:08:57,440 --> 00:09:01,120
have two unknown input of this modular

276
00:09:00,080 --> 00:09:02,800
inverse function

277
00:09:01,120 --> 00:09:05,760
but we have an additional information

278
00:09:02,800 --> 00:09:07,599
here based on how rsa works

279
00:09:05,760 --> 00:09:09,279
which the public parameter n is the

280
00:09:07,600 --> 00:09:12,399
product of the prime p

281
00:09:09,279 --> 00:09:13,839
and q we propose a new branch and prune

282
00:09:12,399 --> 00:09:15,680
algorithm here based on

283
00:09:13,839 --> 00:09:16,880
this relationship with the public value

284
00:09:15,680 --> 00:09:18,959
and and the collected

285
00:09:16,880 --> 00:09:21,360
deterministic trades this attack works

286
00:09:18,959 --> 00:09:23,279
by making some guesses about the

287
00:09:21,360 --> 00:09:25,360
bits of p and q and removing guesses

288
00:09:23,279 --> 00:09:27,519
that do not match this relationship

289
00:09:25,360 --> 00:09:29,440
for example here we first came up with

290
00:09:27,519 --> 00:09:31,440
these four combination of guesses

291
00:09:29,440 --> 00:09:32,480
but two of them don't make sense because

292
00:09:31,440 --> 00:09:35,120
of the value of

293
00:09:32,480 --> 00:09:37,120
n and then we just ignore those and

294
00:09:35,120 --> 00:09:40,240
expand on the leaves that

295
00:09:37,120 --> 00:09:41,279
that that matches the value of n and we

296
00:09:40,240 --> 00:09:43,440
creatively

297
00:09:41,279 --> 00:09:45,519
go through the next bits of n this tree

298
00:09:43,440 --> 00:09:47,760
grows exponentially so

299
00:09:45,519 --> 00:09:48,640
exhaustively going through all these

300
00:09:47,760 --> 00:09:51,120
leaves

301
00:09:48,640 --> 00:09:52,880
for tree is computationally expensive

302
00:09:51,120 --> 00:09:55,600
and that's also why the rsa

303
00:09:52,880 --> 00:09:56,640
cryptosystem is not fundamentally broken

304
00:09:55,600 --> 00:09:58,800
but here at each

305
00:09:56,640 --> 00:10:00,319
stage we can provide the guest p and key

306
00:09:58,800 --> 00:10:02,880
value to a test function

307
00:10:00,320 --> 00:10:04,640
that checks if these guesses create the

308
00:10:02,880 --> 00:10:06,320
same trace as the recover trace

309
00:10:04,640 --> 00:10:08,480
and if it doesn't then we just discard

310
00:10:06,320 --> 00:10:09,680
that yes and eventually recover the full

311
00:10:08,480 --> 00:10:12,640
value of p and q

312
00:10:09,680 --> 00:10:14,079
from a single execution trace we also

313
00:10:12,640 --> 00:10:15,760
did a similar attack

314
00:10:14,079 --> 00:10:17,279
uh using branch and prune technique on

315
00:10:15,760 --> 00:10:18,240
another operation during rsh key

316
00:10:17,279 --> 00:10:20,320
generation

317
00:10:18,240 --> 00:10:21,519
at this time during the generation of

318
00:10:20,320 --> 00:10:23,839
the private

319
00:10:21,519 --> 00:10:25,839
key parameter d we evaluated these

320
00:10:23,839 --> 00:10:28,320
attacks we executed each attack 100

321
00:10:25,839 --> 00:10:31,680
times for example you see that for dsa

322
00:10:28,320 --> 00:10:33,680
on average we need we needed to generate

323
00:10:31,680 --> 00:10:36,079
22 000 irq's

324
00:10:33,680 --> 00:10:38,160
and each trade over 6 000 steps but

325
00:10:36,079 --> 00:10:41,199
these parameters are much bigger for

326
00:10:38,160 --> 00:10:42,959
rsa and we we see that

327
00:10:41,200 --> 00:10:44,320
we have really huge single step races

328
00:10:42,959 --> 00:10:46,479
that we covered that are

329
00:10:44,320 --> 00:10:47,920
attacked with like millions of steps

330
00:10:46,480 --> 00:10:50,320
that we tested this

331
00:10:47,920 --> 00:10:51,360
and in all cases all 100 experiments for

332
00:10:50,320 --> 00:10:53,040
each of these attacks

333
00:10:51,360 --> 00:10:54,800
match the mathematical model and we

334
00:10:53,040 --> 00:10:55,680
could recover the key with a single

335
00:10:54,800 --> 00:10:58,399
trace

336
00:10:55,680 --> 00:10:59,839
without any error we also looked at some

337
00:10:58,399 --> 00:11:00,640
other crypto libraries to see if they

338
00:10:59,839 --> 00:11:02,720
are

339
00:11:00,640 --> 00:11:04,640
similarly vulnerable as a summary lib

340
00:11:02,720 --> 00:11:06,079
decrypt was also using a variant of the

341
00:11:04,640 --> 00:11:08,240
bi algorithm

342
00:11:06,079 --> 00:11:10,640
and almost all the public key algorithm

343
00:11:08,240 --> 00:11:12,480
in this library was affected by this

344
00:11:10,640 --> 00:11:14,079
we also found that openssl has a

345
00:11:12,480 --> 00:11:16,160
vulnerability that use a

346
00:11:14,079 --> 00:11:18,479
similar algorithm to compute the gcd so

347
00:11:16,160 --> 00:11:21,120
you could recover the private rsa key

348
00:11:18,480 --> 00:11:22,800
during the key generation in one of

349
00:11:21,120 --> 00:11:24,480
their code patterns

350
00:11:22,800 --> 00:11:26,240
we reported these vulnerabilities to all

351
00:11:24,480 --> 00:11:28,880
of these vendors the developers

352
00:11:26,240 --> 00:11:31,279
responded and mitigated these issues

353
00:11:28,880 --> 00:11:33,120
as a conclusion copycats pushes the

354
00:11:31,279 --> 00:11:34,720
limits of these deterministic control

355
00:11:33,120 --> 00:11:36,480
channel attacks to instruction level

356
00:11:34,720 --> 00:11:39,200
granularity

357
00:11:36,480 --> 00:11:40,320
it's reliable and it's easy to scale and

358
00:11:39,200 --> 00:11:42,720
replicate this attack

359
00:11:40,320 --> 00:11:44,320
uh time programming or in this case

360
00:11:42,720 --> 00:11:46,320
branchless program is now

361
00:11:44,320 --> 00:11:48,720
even harder and more important for us

362
00:11:46,320 --> 00:11:49,839
jigs with this new attack the question

363
00:11:48,720 --> 00:11:52,399
that remains for

364
00:11:49,839 --> 00:11:53,279
the community to answer is how can

365
00:11:52,399 --> 00:11:55,040
people protect

366
00:11:53,279 --> 00:11:57,519
non-crypto programs that are data

367
00:11:55,040 --> 00:12:00,959
intensive when they are executed

368
00:11:57,519 --> 00:12:02,639
inside this sgx this is at the end of my

369
00:12:00,959 --> 00:12:11,839
talk i'm looking forward to the q

370
00:12:02,639 --> 00:12:11,839
a and to answer your questions

371
00:12:14,320 --> 00:12:16,399
you

