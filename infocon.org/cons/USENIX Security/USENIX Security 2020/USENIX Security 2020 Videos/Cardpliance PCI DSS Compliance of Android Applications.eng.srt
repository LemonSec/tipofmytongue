1
00:00:08,320 --> 00:00:12,000
hello everyone thank you for

2
00:00:09,920 --> 00:00:14,719
virtually attending my talk today i'm

3
00:00:12,000 --> 00:00:16,079
samin currently doing my phd at nc state

4
00:00:14,719 --> 00:00:18,480
and today we are going to be looking at

5
00:00:16,079 --> 00:00:21,759
our work where we looked into pcids's

6
00:00:18,480 --> 00:00:23,439
compliance of android applications

7
00:00:21,760 --> 00:00:25,439
so one day i was about to grab lunch

8
00:00:23,439 --> 00:00:27,119
from burger king and my friend told me

9
00:00:25,439 --> 00:00:28,240
that there is this burger king app which

10
00:00:27,119 --> 00:00:29,920
has many offers

11
00:00:28,240 --> 00:00:32,320
which you won't get if you order at the

12
00:00:29,920 --> 00:00:33,760
local restaurant so i downloaded the app

13
00:00:32,320 --> 00:00:36,160
i was able to order my food

14
00:00:33,760 --> 00:00:37,680
and when i was able to pay i noticed

15
00:00:36,160 --> 00:00:38,559
that there is this option to pay using

16
00:00:37,680 --> 00:00:40,640
google pay

17
00:00:38,559 --> 00:00:42,559
which is convenient and secure because

18
00:00:40,640 --> 00:00:43,760
they use tokenization so that these

19
00:00:42,559 --> 00:00:45,519
consumer apps

20
00:00:43,760 --> 00:00:47,280
won't be getting your credit card number

21
00:00:45,520 --> 00:00:49,039
directly

22
00:00:47,280 --> 00:00:50,719
but there was also this method to pay

23
00:00:49,039 --> 00:00:52,559
providing your credit card number

24
00:00:50,719 --> 00:00:54,239
which poses the additional risk of

25
00:00:52,559 --> 00:00:56,399
exposing them

26
00:00:54,239 --> 00:00:58,000
in our prior study we found that more

27
00:00:56,399 --> 00:01:00,000
than 4 000 out of 50

28
00:00:58,000 --> 00:01:01,920
000 apps from google play collects

29
00:01:00,000 --> 00:01:03,760
credit card numbers from users

30
00:01:01,920 --> 00:01:06,320
and since they're collecting credit card

31
00:01:03,760 --> 00:01:08,399
numbers this makes them responsible for

32
00:01:06,320 --> 00:01:10,240
protecting this information and the

33
00:01:08,400 --> 00:01:11,040
regulation that dictates how that should

34
00:01:10,240 --> 00:01:14,880
happen is called

35
00:01:11,040 --> 00:01:16,960
pcidss we say this stands for payment

36
00:01:14,880 --> 00:01:18,720
card industries data security standard

37
00:01:16,960 --> 00:01:19,600
which is a guideline for how credit card

38
00:01:18,720 --> 00:01:22,080
numbers should be

39
00:01:19,600 --> 00:01:23,439
handled by any system acquiring them it

40
00:01:22,080 --> 00:01:26,720
is regulated by

41
00:01:23,439 --> 00:01:28,320
pci security standard council these

42
00:01:26,720 --> 00:01:30,479
rules are mandatory meaning failure to

43
00:01:28,320 --> 00:01:31,600
comply to them comes with some monetary

44
00:01:30,479 --> 00:01:33,600
penalty

45
00:01:31,600 --> 00:01:35,199
even though pci dss requirements are

46
00:01:33,600 --> 00:01:36,000
broad there are a lot of these

47
00:01:35,200 --> 00:01:37,360
requirements

48
00:01:36,000 --> 00:01:39,200
that don't matter for a mobile

49
00:01:37,360 --> 00:01:41,680
application for example

50
00:01:39,200 --> 00:01:44,720
setting up a firewall is not applicable

51
00:01:41,680 --> 00:01:47,439
in a mobile context

52
00:01:44,720 --> 00:01:49,039
we marked 6p services requirements that

53
00:01:47,439 --> 00:01:50,880
do apply to your mobile contacts by

54
00:01:49,040 --> 00:01:53,360
accessing the document

55
00:01:50,880 --> 00:01:54,158
these requirements ensure the secure

56
00:01:53,360 --> 00:01:56,000
storage and

57
00:01:54,159 --> 00:01:57,280
sharing of card holder data and

58
00:01:56,000 --> 00:02:00,240
authentication data

59
00:01:57,280 --> 00:02:01,840
in a mobile application the information

60
00:02:00,240 --> 00:02:02,719
in a credit card that represents the

61
00:02:01,840 --> 00:02:04,320
card holder

62
00:02:02,719 --> 00:02:06,240
is called cardholder data for example

63
00:02:04,320 --> 00:02:08,000
the credit card number

64
00:02:06,240 --> 00:02:09,359
and the information that is used to

65
00:02:08,000 --> 00:02:12,080
authenticate the card holder

66
00:02:09,360 --> 00:02:13,680
is called sensitive authentication data

67
00:02:12,080 --> 00:02:15,440
for example the three digit card

68
00:02:13,680 --> 00:02:18,080
verification code on the back side of a

69
00:02:15,440 --> 00:02:18,079
credit card

70
00:02:18,319 --> 00:02:22,160
the goal of this work was to build a

71
00:02:20,080 --> 00:02:24,480
static analysis tool called card plans

72
00:02:22,160 --> 00:02:25,920
to determine if android applications are

73
00:02:24,480 --> 00:02:29,119
handling credit card data

74
00:02:25,920 --> 00:02:31,040
properly by complying to pcis

75
00:02:29,120 --> 00:02:32,400
but achieving this was not so trivial

76
00:02:31,040 --> 00:02:33,599
and came with several technical

77
00:02:32,400 --> 00:02:35,519
challenges

78
00:02:33,599 --> 00:02:36,720
first we had to determine which of these

79
00:02:35,519 --> 00:02:39,120
requirements are

80
00:02:36,720 --> 00:02:40,720
applicable to a mobile application and

81
00:02:39,120 --> 00:02:41,599
how do you build the program analysis

82
00:02:40,720 --> 00:02:43,519
tool to detect

83
00:02:41,599 --> 00:02:45,599
these requirements which are stated at a

84
00:02:43,519 --> 00:02:47,519
high level

85
00:02:45,599 --> 00:02:49,119
again in android there is no well

86
00:02:47,519 --> 00:02:49,680
defined api for taking credit card

87
00:02:49,120 --> 00:02:52,800
numbers

88
00:02:49,680 --> 00:02:54,720
as their api for taking imei or phone

89
00:02:52,800 --> 00:02:56,640
number

90
00:02:54,720 --> 00:02:58,800
and finally we needed to do some manual

91
00:02:56,640 --> 00:03:02,480
validation on the results because

92
00:02:58,800 --> 00:03:02,480
we were relying on a static analysis

93
00:03:02,840 --> 00:03:05,840
approach

94
00:03:04,080 --> 00:03:07,519
usually credit card numbers are provided

95
00:03:05,840 --> 00:03:08,560
to the application through its user

96
00:03:07,519 --> 00:03:11,040
interface

97
00:03:08,560 --> 00:03:12,720
the programmatic approach is to grab a

98
00:03:11,040 --> 00:03:15,040
reference of the ui widget

99
00:03:12,720 --> 00:03:17,359
by calling the find view by id method

100
00:03:15,040 --> 00:03:20,640
and then call the get text method

101
00:03:17,360 --> 00:03:22,480
we use our prior tool ui ref which uses

102
00:03:20,640 --> 00:03:25,279
natural language processing on

103
00:03:22,480 --> 00:03:25,760
any label or hint associated to the ui

104
00:03:25,280 --> 00:03:27,360
widget

105
00:03:25,760 --> 00:03:28,959
to determine what kind of data it is

106
00:03:27,360 --> 00:03:31,120
collecting

107
00:03:28,959 --> 00:03:32,000
and we extract the resource identifier

108
00:03:31,120 --> 00:03:34,000
of that widget which

109
00:03:32,000 --> 00:03:35,760
is collecting credit card number and

110
00:03:34,000 --> 00:03:38,400
provide that to the next phase of our

111
00:03:35,760 --> 00:03:38,399
analysis

112
00:03:39,120 --> 00:03:42,959
in this phase we use an existing static

113
00:03:41,200 --> 00:03:45,200
analysis tool called amendroid

114
00:03:42,959 --> 00:03:47,200
to generate a data dependency graph from

115
00:03:45,200 --> 00:03:49,920
the apk

116
00:03:47,200 --> 00:03:51,359
we then parameterize the data dependency

117
00:03:49,920 --> 00:03:53,359
graph with the right context

118
00:03:51,360 --> 00:03:54,799
so we can tame track the flow of the

119
00:03:53,360 --> 00:03:56,400
credit card number throughout the

120
00:03:54,799 --> 00:03:58,480
application

121
00:03:56,400 --> 00:04:00,879
we design our graph traversal algorithms

122
00:03:58,480 --> 00:04:03,439
to check if the credit card information

123
00:04:00,879 --> 00:04:05,920
goes to any data persistence sync like

124
00:04:03,439 --> 00:04:08,159
writing to a file or network sync

125
00:04:05,920 --> 00:04:09,760
for some pcss requirement this was

126
00:04:08,159 --> 00:04:11,599
sufficient

127
00:04:09,760 --> 00:04:14,319
for example where we needed to verify if

128
00:04:11,599 --> 00:04:16,798
the application is storing cbc

129
00:04:14,319 --> 00:04:18,320
which is a violation of psidss this

130
00:04:16,798 --> 00:04:20,638
approach was sufficient

131
00:04:18,320 --> 00:04:22,159
but for some requirements we need to

132
00:04:20,639 --> 00:04:23,120
ensure that credit card information is

133
00:04:22,160 --> 00:04:25,360
going through

134
00:04:23,120 --> 00:04:27,440
some intermediate methods to meet the

135
00:04:25,360 --> 00:04:30,320
psydss requirement

136
00:04:27,440 --> 00:04:31,199
for example in the epsilon requirement

137
00:04:30,320 --> 00:04:33,360
which says

138
00:04:31,199 --> 00:04:35,120
encrypt card uh card holder data or

139
00:04:33,360 --> 00:04:37,440
credit card number before storing

140
00:04:35,120 --> 00:04:39,280
we look for common cryptographic methods

141
00:04:37,440 --> 00:04:40,560
in the intermediate path so the data is

142
00:04:39,280 --> 00:04:43,599
obfuscated before

143
00:04:40,560 --> 00:04:43,600
it reaches the sink

144
00:04:44,800 --> 00:04:48,400
in this table we enlist the six pci

145
00:04:46,720 --> 00:04:50,880
checks we performed along with the

146
00:04:48,400 --> 00:04:52,159
associated pci dss requirement at a high

147
00:04:50,880 --> 00:04:54,080
level

148
00:04:52,160 --> 00:04:55,680
for example the first test was to check

149
00:04:54,080 --> 00:04:56,320
if the cardholder data is stored in the

150
00:04:55,680 --> 00:04:58,960
app

151
00:04:56,320 --> 00:04:59,680
for this we marked the find view by id

152
00:04:58,960 --> 00:05:01,758
methods

153
00:04:59,680 --> 00:05:03,360
which are parameterized with credit card

154
00:05:01,759 --> 00:05:05,520
number taking input widgets

155
00:05:03,360 --> 00:05:06,800
as the source and some data persistent

156
00:05:05,520 --> 00:05:08,560
methods as things

157
00:05:06,800 --> 00:05:10,320
here we do not check for any

158
00:05:08,560 --> 00:05:13,680
intermediate methods that's why the

159
00:05:10,320 --> 00:05:16,719
required column is empty

160
00:05:13,680 --> 00:05:18,080
but for test d6 we check if some

161
00:05:16,720 --> 00:05:20,479
if the same data is going to any

162
00:05:18,080 --> 00:05:22,159
external application unobfuscated

163
00:05:20,479 --> 00:05:23,680
therefore we check for obfuscation

164
00:05:22,160 --> 00:05:26,560
methods which are required

165
00:05:23,680 --> 00:05:26,880
and and thus they are listed in columnar

166
00:05:26,560 --> 00:05:28,800
we

167
00:05:26,880 --> 00:05:31,840
implement our tool in such a way that

168
00:05:28,800 --> 00:05:34,800
these source sync and required sets

169
00:05:31,840 --> 00:05:36,479
uh can be further extended uh there was

170
00:05:34,800 --> 00:05:37,600
an additional lightweight heuristic to

171
00:05:36,479 --> 00:05:40,000
check if the

172
00:05:37,600 --> 00:05:41,440
app is using bad socket factory or trust

173
00:05:40,000 --> 00:05:44,320
manager classes or

174
00:05:41,440 --> 00:05:44,800
bypassing hostname verification and that

175
00:05:44,320 --> 00:05:46,479
was

176
00:05:44,800 --> 00:05:48,880
just by looking at the application code

177
00:05:46,479 --> 00:05:50,000
not uh to any data flow analysis and

178
00:05:48,880 --> 00:05:53,840
therefore we did not

179
00:05:50,000 --> 00:05:53,840
include that in this table

180
00:05:54,479 --> 00:05:57,840
for building our data set we first

181
00:05:56,880 --> 00:06:00,639
scraped

182
00:05:57,840 --> 00:06:01,679
top 500 apps from every category in

183
00:06:00,639 --> 00:06:04,080
google play

184
00:06:01,680 --> 00:06:04,960
and reason for choosing most popular

185
00:06:04,080 --> 00:06:08,719
applications was

186
00:06:04,960 --> 00:06:10,880
popular apps are going to be impactful

187
00:06:08,720 --> 00:06:12,639
however as we have seen from our prior

188
00:06:10,880 --> 00:06:14,080
study that most of the applications

189
00:06:12,639 --> 00:06:16,240
would not be collecting credit card

190
00:06:14,080 --> 00:06:18,880
information thus that would increase our

191
00:06:16,240 --> 00:06:20,479
analysis time significantly

192
00:06:18,880 --> 00:06:22,159
therefore we filtered this set by

193
00:06:20,479 --> 00:06:24,719
looking into the resource files

194
00:06:22,160 --> 00:06:26,240
of the apks if they have any credit card

195
00:06:24,720 --> 00:06:28,479
related string

196
00:06:26,240 --> 00:06:30,400
uh this narrowed down our scope to a set

197
00:06:28,479 --> 00:06:33,120
of 1868 apps

198
00:06:30,400 --> 00:06:36,960
saving a lot of computation time uh at

199
00:06:33,120 --> 00:06:36,960
the price of including false negatives

200
00:06:38,080 --> 00:06:41,520
we ran our input widget resolution

201
00:06:40,080 --> 00:06:43,440
framework qrf

202
00:06:41,520 --> 00:06:45,599
and data dependency graph generator

203
00:06:43,440 --> 00:06:48,639
android on these applications

204
00:06:45,600 --> 00:06:50,400
and finally got 358 data events graphs

205
00:06:48,639 --> 00:06:52,479
the remaining ones could not be analyzed

206
00:06:50,400 --> 00:06:55,280
by these tools or did not collect credit

207
00:06:52,479 --> 00:06:55,280
card information

208
00:06:56,880 --> 00:07:01,280
so our test was on 358 popular apps from

209
00:07:00,000 --> 00:07:03,599
google play

210
00:07:01,280 --> 00:07:04,880
we ran our tool on this set and r2

211
00:07:03,599 --> 00:07:07,280
reported 20 of them had

212
00:07:04,880 --> 00:07:10,080
at least one flow that could potentially

213
00:07:07,280 --> 00:07:12,479
be violating these idss

214
00:07:10,080 --> 00:07:16,159
we found another 20 apps that had bad

215
00:07:12,479 --> 00:07:17,840
socket factory or cross manager classes

216
00:07:16,160 --> 00:07:19,919
we reverse engineered the source code

217
00:07:17,840 --> 00:07:20,638
using a commercial tool called gft

218
00:07:19,919 --> 00:07:22,719
compiler

219
00:07:20,639 --> 00:07:25,199
and looked into the code to validate our

220
00:07:22,720 --> 00:07:25,199
findings

221
00:07:26,000 --> 00:07:29,039
we confirmed 6 apps where pcids is

222
00:07:28,240 --> 00:07:31,599
non-compliant

223
00:07:29,039 --> 00:07:33,680
out of the 20 apps raising red flag for

224
00:07:31,599 --> 00:07:35,759
having a potential non-compliant flow

225
00:07:33,680 --> 00:07:36,720
the other 20 apps having bad socket

226
00:07:35,759 --> 00:07:39,039
factory classes

227
00:07:36,720 --> 00:07:40,639
were false positives because they were

228
00:07:39,039 --> 00:07:43,840
either dead code or

229
00:07:40,639 --> 00:07:45,360
built for debug versions or they were

230
00:07:43,840 --> 00:07:47,520
using bad socket factory to send

231
00:07:45,360 --> 00:07:50,000
irrelevant data like like analytics

232
00:07:47,520 --> 00:07:51,120
but not create your data all the

233
00:07:50,000 --> 00:07:53,120
non-compliant apps

234
00:07:51,120 --> 00:07:55,759
and the tests they failed are listed on

235
00:07:53,120 --> 00:07:55,759
table below

236
00:07:57,360 --> 00:08:00,800
here are some of our highlighted

237
00:07:58,800 --> 00:08:02,240
findings we found most of the

238
00:08:00,800 --> 00:08:04,479
applications are doing it right

239
00:08:02,240 --> 00:08:06,080
which indicates popular applications

240
00:08:04,479 --> 00:08:08,318
mandate good coding practice with

241
00:08:06,080 --> 00:08:10,080
industry regulations

242
00:08:08,319 --> 00:08:11,680
we found all the apps were performing

243
00:08:10,080 --> 00:08:13,520
hostname verification and certificate

244
00:08:11,680 --> 00:08:15,599
validation correctly

245
00:08:13,520 --> 00:08:16,719
they were not using http url to send

246
00:08:15,599 --> 00:08:18,479
credit card data

247
00:08:16,720 --> 00:08:22,160
and they were not insecurely sharing

248
00:08:18,479 --> 00:08:24,000
them with other applications

249
00:08:22,160 --> 00:08:25,759
however we did find six applications

250
00:08:24,000 --> 00:08:27,680
where violating pcidss

251
00:08:25,759 --> 00:08:30,319
with collectively more than 1.5 million

252
00:08:27,680 --> 00:08:32,719
downloads also we see a common trade of

253
00:08:30,319 --> 00:08:34,080
common trend of writing sensitive data

254
00:08:32,719 --> 00:08:35,919
like credit card numbers

255
00:08:34,080 --> 00:08:38,560
in device logs without realizing its

256
00:08:35,919 --> 00:08:38,559
implications

257
00:08:39,039 --> 00:08:43,519
we notified the six developers to the

258
00:08:41,279 --> 00:08:45,439
email address enlisted in google play

259
00:08:43,519 --> 00:08:47,600
just one of the developers responded to

260
00:08:45,440 --> 00:08:48,000
our email admining the flaws in their

261
00:08:47,600 --> 00:08:50,000
app

262
00:08:48,000 --> 00:08:52,000
and assured to fix them they also

263
00:08:50,000 --> 00:08:55,279
appreciated our work

264
00:08:52,000 --> 00:08:56,000
um a 16.6 percent response rate is not

265
00:08:55,279 --> 00:08:58,399
ideal but

266
00:08:56,000 --> 00:09:00,240
it is not unexpected either considering

267
00:08:58,399 --> 00:09:03,600
responding to such email could

268
00:09:00,240 --> 00:09:03,600
raise liability concerns

269
00:09:03,839 --> 00:09:08,800
here are some of the deeper dive we did

270
00:09:05,680 --> 00:09:10,399
on some of the non-compliant apps

271
00:09:08,800 --> 00:09:12,240
first we have this credit card reader

272
00:09:10,399 --> 00:09:13,920
app which insecurely

273
00:09:12,240 --> 00:09:16,000
prints credit card numbers in device

274
00:09:13,920 --> 00:09:17,599
logs device logs are basically used for

275
00:09:16,000 --> 00:09:18,560
debugging purposes and they can be

276
00:09:17,600 --> 00:09:20,240
easily retrieved

277
00:09:18,560 --> 00:09:22,719
if someone has physical access to the

278
00:09:20,240 --> 00:09:24,399
device and the interesting factor is

279
00:09:22,720 --> 00:09:26,399
this is a merchant app meaning a

280
00:09:24,399 --> 00:09:28,000
merchant uses this app

281
00:09:26,399 --> 00:09:30,399
in his device to accept payment from

282
00:09:28,000 --> 00:09:31,279
customers and it has more than 500k

283
00:09:30,399 --> 00:09:33,440
downloads

284
00:09:31,279 --> 00:09:35,680
so if any merchant is using this app to

285
00:09:33,440 --> 00:09:37,839
serve say 100 customers per day

286
00:09:35,680 --> 00:09:39,199
this app is secretly logging all of

287
00:09:37,839 --> 00:09:41,279
their credit card numbers

288
00:09:39,200 --> 00:09:43,040
which the merchant can get access of

289
00:09:41,279 --> 00:09:46,000
thus this app would be exposing 50

290
00:09:43,040 --> 00:09:48,160
million credit number daily

291
00:09:46,000 --> 00:09:49,200
then we have this pretzel selling app

292
00:09:48,160 --> 00:09:52,560
which writes both

293
00:09:49,200 --> 00:09:54,640
credit card number and cvc in device log

294
00:09:52,560 --> 00:09:56,160
it was clearly mentioned in pci dss

295
00:09:54,640 --> 00:10:00,240
requirement 3.2

296
00:09:56,160 --> 00:10:00,240
not to store cbc in device logs

297
00:10:00,399 --> 00:10:03,839
also what this app is doing here is it

298
00:10:02,399 --> 00:10:04,480
is storing some value in the shared

299
00:10:03,839 --> 00:10:06,399
preference

300
00:10:04,480 --> 00:10:08,640
but it is using the plain text credit

301
00:10:06,399 --> 00:10:09,519
card number as the key of whatever they

302
00:10:08,640 --> 00:10:11,920
are storing

303
00:10:09,519 --> 00:10:13,360
which gets stored in an xml file in the

304
00:10:11,920 --> 00:10:14,079
shared press directory of the

305
00:10:13,360 --> 00:10:16,000
application

306
00:10:14,079 --> 00:10:17,120
firstly this is making the app pcr jss

307
00:10:16,000 --> 00:10:19,360
non-compliant

308
00:10:17,120 --> 00:10:21,120
but this can also be dangerous if any

309
00:10:19,360 --> 00:10:24,560
app with escalated privilege

310
00:10:21,120 --> 00:10:26,720
can access that information

311
00:10:24,560 --> 00:10:28,560
and lastly we see this application is

312
00:10:26,720 --> 00:10:29,600
trying to generate a key using a secret

313
00:10:28,560 --> 00:10:31,839
random object

314
00:10:29,600 --> 00:10:33,760
initializing this secure um object with

315
00:10:31,839 --> 00:10:35,040
a constant or predictable value we can

316
00:10:33,760 --> 00:10:36,720
see it significantly

317
00:10:35,040 --> 00:10:38,399
and that is what we see here they are

318
00:10:36,720 --> 00:10:40,320
seeding the secure random object

319
00:10:38,399 --> 00:10:43,920
with the most predictable thing for the

320
00:10:40,320 --> 00:10:45,360
application the credit card number

321
00:10:43,920 --> 00:10:47,120
there were several limitation of our

322
00:10:45,360 --> 00:10:48,880
tool which we already discussed

323
00:10:47,120 --> 00:10:50,320
there were some limitations due to the

324
00:10:48,880 --> 00:10:52,399
underlying tools we used

325
00:10:50,320 --> 00:10:55,040
for example the popular metroid app

326
00:10:52,399 --> 00:10:55,760
marta what uidf identified as a credit

327
00:10:55,040 --> 00:10:58,240
card number

328
00:10:55,760 --> 00:11:00,160
was found to be a risk card number some

329
00:10:58,240 --> 00:11:01,760
of the things we did not look into was

330
00:11:00,160 --> 00:11:03,279
weak cipher suits or to detect

331
00:11:01,760 --> 00:11:04,000
hard-coded cryptographic keys in the

332
00:11:03,279 --> 00:11:06,000
application

333
00:11:04,000 --> 00:11:07,839
which would be left for future work the

334
00:11:06,000 --> 00:11:09,200
other limitations are well discussed in

335
00:11:07,839 --> 00:11:11,279
the paper

336
00:11:09,200 --> 00:11:13,040
so to summarize we built card clients to

337
00:11:11,279 --> 00:11:14,079
perform pcidss compliance checks on

338
00:11:13,040 --> 00:11:15,920
android applications

339
00:11:14,079 --> 00:11:18,160
and according to our study the landscape

340
00:11:15,920 --> 00:11:19,279
of popular android application in terms

341
00:11:18,160 --> 00:11:21,199
of pci dss

342
00:11:19,279 --> 00:11:22,480
is fairly positive still we were

343
00:11:21,200 --> 00:11:25,519
successful to detect

344
00:11:22,480 --> 00:11:27,519
real pci dss violation on several apps

345
00:11:25,519 --> 00:11:29,839
good news is we have open sourced our

346
00:11:27,519 --> 00:11:31,040
code which you can find at whisper and

347
00:11:29,839 --> 00:11:32,720
system gate repo

348
00:11:31,040 --> 00:11:34,079
so please check it out and give us your

349
00:11:32,720 --> 00:11:36,480
feedback

350
00:11:34,079 --> 00:11:38,399
so i want to wrap up by thanking my team

351
00:11:36,480 --> 00:11:40,839
members from ncsu and ibm

352
00:11:38,399 --> 00:11:43,839
and at this point i'm happy to take any

353
00:11:40,839 --> 00:11:43,839
question

