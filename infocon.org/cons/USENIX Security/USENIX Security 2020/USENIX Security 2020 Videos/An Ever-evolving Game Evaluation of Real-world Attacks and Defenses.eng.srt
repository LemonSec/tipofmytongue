1
00:00:08,800 --> 00:00:12,000
hello everyone i'm jonathan from food

2
00:00:10,719 --> 00:00:14,239
and university

3
00:00:12,000 --> 00:00:16,160
today i'd like to introduce our paper

4
00:00:14,240 --> 00:00:16,960
and ever evolving game evaluation of

5
00:00:16,160 --> 00:00:19,199
real-world

6
00:00:16,960 --> 00:00:20,560
attacks and defenses in easter room

7
00:00:19,199 --> 00:00:22,960
ecosystem

8
00:00:20,560 --> 00:00:24,640
this is a work with jeremy young jieshan

9
00:00:22,960 --> 00:00:25,680
includes health from johns hopkins

10
00:00:24,640 --> 00:00:28,800
university

11
00:00:25,680 --> 00:00:28,800
min yang and yan zhang

12
00:00:29,439 --> 00:00:34,000
front's day of birth the security of

13
00:00:31,279 --> 00:00:36,000
smart contract has drawn many attentions

14
00:00:34,000 --> 00:00:38,320
and several incidents such as the dow

15
00:00:36,000 --> 00:00:42,480
attack and the parity wall attack

16
00:00:38,320 --> 00:00:42,480
has caused millions of dollars losses

17
00:00:42,640 --> 00:00:46,399
since then many works has been proposed

18
00:00:44,559 --> 00:00:47,760
to locate vulnerabilities in small

19
00:00:46,399 --> 00:00:51,280
contract code

20
00:00:47,760 --> 00:00:53,280
for example oend securify zeus country

21
00:00:51,280 --> 00:00:55,360
further has reported thousands of

22
00:00:53,280 --> 00:00:57,840
vulnerable contracts

23
00:00:55,360 --> 00:00:58,719
however a recent report from paris and

24
00:00:57,840 --> 00:01:00,960
leave sheets

25
00:00:58,719 --> 00:01:01,920
shows that only about two percent of

26
00:01:00,960 --> 00:01:04,960
this contract

27
00:01:01,920 --> 00:01:06,560
at most are really attacked so clearly

28
00:01:04,959 --> 00:01:08,479
there's a gap exist

29
00:01:06,560 --> 00:01:12,000
between vulnerable contracts and real

30
00:01:08,479 --> 00:01:14,000
world attacks

31
00:01:12,000 --> 00:01:16,000
this paper we try to fill this gap by

32
00:01:14,000 --> 00:01:18,560
answering two questions

33
00:01:16,000 --> 00:01:22,080
what contrast has been attacked and what

34
00:01:18,560 --> 00:01:22,080
attack has been prevented

35
00:01:23,280 --> 00:01:26,320
to find the real world attack we focus

36
00:01:25,360 --> 00:01:29,040
on the transaction

37
00:01:26,320 --> 00:01:29,679
instead of the contract code we try to

38
00:01:29,040 --> 00:01:32,000
recognize

39
00:01:29,680 --> 00:01:34,159
attack transactions from normal ones

40
00:01:32,000 --> 00:01:35,439
based on their behavior and consequences

41
00:01:34,159 --> 00:01:37,840
they cost

42
00:01:35,439 --> 00:01:40,000
so the test of this paper is to examine

43
00:01:37,840 --> 00:01:42,799
all the transactions in each room

44
00:01:40,000 --> 00:01:44,320
and this lead to our main challenge how

45
00:01:42,799 --> 00:01:47,439
to effectively

46
00:01:44,320 --> 00:01:47,919
examine all the 420 million transactions

47
00:01:47,439 --> 00:01:53,039
in each

48
00:01:47,920 --> 00:01:55,280
room from august 2015 to march 2019

49
00:01:53,040 --> 00:01:58,479
and we propose a transaction log based

50
00:01:55,280 --> 00:01:58,479
analysis to do that

51
00:01:59,280 --> 00:02:03,600
our measurement workflow is shown like

52
00:02:01,200 --> 00:02:05,439
this we first collected all the traces

53
00:02:03,600 --> 00:02:08,799
of each transaction

54
00:02:05,439 --> 00:02:09,519
each traces depicts the inter contract

55
00:02:08,800 --> 00:02:12,080
behavior of

56
00:02:09,520 --> 00:02:13,840
a transaction we use these traces to

57
00:02:12,080 --> 00:02:16,720
build two special structure

58
00:02:13,840 --> 00:02:18,959
action tree and result graph action tree

59
00:02:16,720 --> 00:02:21,280
is an ordered tree-like structure which

60
00:02:18,959 --> 00:02:22,959
shows the behavior of a transaction

61
00:02:21,280 --> 00:02:25,200
and the result graph shows the

62
00:02:22,959 --> 00:02:27,520
consequences it costs such as the

63
00:02:25,200 --> 00:02:30,238
ether transfer token transfer or

64
00:02:27,520 --> 00:02:32,080
counter-ownership changes

65
00:02:30,239 --> 00:02:33,840
we manually generate signature from

66
00:02:32,080 --> 00:02:35,840
collective real-world attacks

67
00:02:33,840 --> 00:02:37,920
and use them to match the action tree

68
00:02:35,840 --> 00:02:40,319
and result graph and locate adversarial

69
00:02:37,920 --> 00:02:43,040
transaction

70
00:02:40,319 --> 00:02:44,319
actually not every attack succeeds so we

71
00:02:43,040 --> 00:02:46,720
further act

72
00:02:44,319 --> 00:02:47,518
what defenses cause the feeling of these

73
00:02:46,720 --> 00:02:50,000
attacks

74
00:02:47,519 --> 00:02:51,040
and our defense analysis tries to answer

75
00:02:50,000 --> 00:02:53,599
the question

76
00:02:51,040 --> 00:02:55,679
we do this by locate the code snaps we

77
00:02:53,599 --> 00:02:57,200
stopped attacks

78
00:02:55,680 --> 00:02:59,200
finally we determine whether the

79
00:02:57,200 --> 00:03:02,079
defenses we found has been invaded by

80
00:02:59,200 --> 00:03:02,079
real-world attacks

81
00:03:02,879 --> 00:03:06,799
we use an airdrop hunting example to

82
00:03:04,959 --> 00:03:08,599
demonstrate our method

83
00:03:06,800 --> 00:03:11,120
ultrapounting attack is an

84
00:03:08,599 --> 00:03:13,640
under-investigated kind of attack

85
00:03:11,120 --> 00:03:15,840
the airdrop mechanism is used by many

86
00:03:13,640 --> 00:03:19,279
erc20 token contracts

87
00:03:15,840 --> 00:03:20,720
to attract users they award the newcomer

88
00:03:19,280 --> 00:03:24,080
with some tokens

89
00:03:20,720 --> 00:03:25,359
called the airdrop the vulnerability

90
00:03:24,080 --> 00:03:27,360
here is that

91
00:03:25,360 --> 00:03:30,080
the contract determine the identity of

92
00:03:27,360 --> 00:03:32,720
user with a message sender

93
00:03:30,080 --> 00:03:34,239
while an attacker can easily deploy a

94
00:03:32,720 --> 00:03:36,080
contract and ultimately

95
00:03:34,239 --> 00:03:39,920
automatically generates many boss

96
00:03:36,080 --> 00:03:39,920
contracts to collect many airdrops

97
00:03:42,239 --> 00:03:45,840
we show the traces of a single

98
00:03:44,319 --> 00:03:49,200
transaction

99
00:03:45,840 --> 00:03:51,120
attack transaction here the attacker

100
00:03:49,200 --> 00:03:53,200
first used a controller contract to

101
00:03:51,120 --> 00:03:54,879
generate 50 baht contracts

102
00:03:53,200 --> 00:03:56,480
and each of them then called the

103
00:03:54,879 --> 00:03:58,560
transfer function

104
00:03:56,480 --> 00:04:00,720
of the victim contract to collect

105
00:03:58,560 --> 00:04:03,280
airdrop and transfer airdrop back to the

106
00:04:00,720 --> 00:04:03,280
controller

107
00:04:04,239 --> 00:04:08,720
we first construct the action tree based

108
00:04:06,319 --> 00:04:10,879
on the addresses of each trace

109
00:04:08,720 --> 00:04:15,040
the address shows the invocation order

110
00:04:10,879 --> 00:04:17,199
of trace

111
00:04:15,040 --> 00:04:18,880
then we annotate action tree with

112
00:04:17,199 --> 00:04:20,079
detailed information such as the

113
00:04:18,880 --> 00:04:22,639
function they call

114
00:04:20,079 --> 00:04:23,520
the parameters they use and the type of

115
00:04:22,639 --> 00:04:26,800
them

116
00:04:23,520 --> 00:04:30,000
uh there is three kinds of uh

117
00:04:26,800 --> 00:04:30,560
there are three type of traces the code

118
00:04:30,000 --> 00:04:32,240
type

119
00:04:30,560 --> 00:04:34,000
which caused the function and the create

120
00:04:32,240 --> 00:04:37,280
type which creates a

121
00:04:34,000 --> 00:04:39,680
contract and the suicide which

122
00:04:37,280 --> 00:04:40,799
this deconstruct the contract and the

123
00:04:39,680 --> 00:04:43,800
transfer all the

124
00:04:40,800 --> 00:04:46,800
remain ethos inits to the death to the

125
00:04:43,800 --> 00:04:46,800
destination

126
00:04:49,360 --> 00:04:52,960
in results graph we focus on three kind

127
00:04:51,600 --> 00:04:56,320
of consequences

128
00:04:52,960 --> 00:04:58,080
first we we focus the ether transfer

129
00:04:56,320 --> 00:04:59,360
which can be known from the value of

130
00:04:58,080 --> 00:05:01,520
each trace

131
00:04:59,360 --> 00:05:03,199
then we concern about the token transfer

132
00:05:01,520 --> 00:05:04,080
which can be recognized from the code

133
00:05:03,199 --> 00:05:07,280
function

134
00:05:04,080 --> 00:05:09,280
because many uh all the erc20 contracts

135
00:05:07,280 --> 00:05:10,239
use predefined functions to transfer

136
00:05:09,280 --> 00:05:12,159
tokens

137
00:05:10,240 --> 00:05:14,639
in this case we concern about the

138
00:05:12,160 --> 00:05:16,000
transfer function

139
00:05:14,639 --> 00:05:17,919
and third we'll concern about the

140
00:05:16,000 --> 00:05:19,759
ownership changes which is achieved

141
00:05:17,919 --> 00:05:25,840
achieved by calling functions such as

142
00:05:19,759 --> 00:05:25,840
the set owner

143
00:05:26,320 --> 00:05:30,479
and we show the the signature to

144
00:05:28,320 --> 00:05:32,639
recognize the airdrop punting attack

145
00:05:30,479 --> 00:05:34,560
the signature is consisted of action

146
00:05:32,639 --> 00:05:36,960
clause and the result clause

147
00:05:34,560 --> 00:05:38,160
the action clause of an airdrop punting

148
00:05:36,960 --> 00:05:40,320
attack is that

149
00:05:38,160 --> 00:05:41,199
a contract first creates more than one

150
00:05:40,320 --> 00:05:43,039
contract

151
00:05:41,199 --> 00:05:44,720
each of which further costs a token

152
00:05:43,039 --> 00:05:47,039
transfer function

153
00:05:44,720 --> 00:05:48,000
and the result clause is that all the

154
00:05:47,039 --> 00:05:50,240
created

155
00:05:48,000 --> 00:05:52,000
contracts transfer collective tokens

156
00:05:50,240 --> 00:05:53,600
back to the controller

157
00:05:52,000 --> 00:05:55,520
there are more signatures for other

158
00:05:53,600 --> 00:05:58,560
types of attack in our paper please

159
00:05:55,520 --> 00:05:58,560
refer to our paper

160
00:05:59,600 --> 00:06:04,080
if a transaction match the action clause

161
00:06:02,639 --> 00:06:06,560
we say that it behaves

162
00:06:04,080 --> 00:06:10,000
like an attack and it's an attempted

163
00:06:06,560 --> 00:06:12,560
adversarial transaction

164
00:06:10,000 --> 00:06:14,479
then if it further matches the results

165
00:06:12,560 --> 00:06:15,360
clause we know that it really caused

166
00:06:14,479 --> 00:06:18,840
some losses

167
00:06:15,360 --> 00:06:21,840
and we call it a confirmed adversary of

168
00:06:18,840 --> 00:06:21,840
transaction

169
00:06:22,000 --> 00:06:26,720
also many attempted transaction failed

170
00:06:24,479 --> 00:06:28,960
to cause any losses because of some of

171
00:06:26,720 --> 00:06:30,720
its traces are reverted

172
00:06:28,960 --> 00:06:32,840
for example air drop pointing attacks

173
00:06:30,720 --> 00:06:35,840
may fail to collect air drop due to some

174
00:06:32,840 --> 00:06:35,840
defenses

175
00:06:36,479 --> 00:06:41,680
we show such two differences against air

176
00:06:39,759 --> 00:06:44,160
drop pointing

177
00:06:41,680 --> 00:06:44,800
the first check the code length of of a

178
00:06:44,160 --> 00:06:47,120
user

179
00:06:44,800 --> 00:06:48,319
if a human sends a transaction his code

180
00:06:47,120 --> 00:06:51,440
length is zero

181
00:06:48,319 --> 00:06:53,280
while if a bot contract sends this

182
00:06:51,440 --> 00:06:54,160
transaction its code length is larger

183
00:06:53,280 --> 00:06:57,599
than zero so

184
00:06:54,160 --> 00:07:00,240
so the this human defense can be used to

185
00:06:57,599 --> 00:07:03,280
check that whether the the user is a

186
00:07:00,240 --> 00:07:05,919
human or a bot contract

187
00:07:03,280 --> 00:07:07,679
unfortunately this defense can be evaded

188
00:07:05,919 --> 00:07:09,120
so another defense is to check the

189
00:07:07,680 --> 00:07:11,440
transaction or region

190
00:07:09,120 --> 00:07:13,520
instead of the message sender in our

191
00:07:11,440 --> 00:07:17,120
attack example the transaction or region

192
00:07:13,520 --> 00:07:19,840
is always the controller contract

193
00:07:17,120 --> 00:07:20,960
our observation here is that defenses

194
00:07:19,840 --> 00:07:24,000
are implemented

195
00:07:20,960 --> 00:07:26,880
with special functions like require

196
00:07:24,000 --> 00:07:28,960
under search on certain variables and we

197
00:07:26,880 --> 00:07:30,479
recognize the defense deployed in

198
00:07:28,960 --> 00:07:32,400
contrast by locating such

199
00:07:30,479 --> 00:07:35,120
security checks that cause the feeling

200
00:07:32,400 --> 00:07:35,120
of attacks

201
00:07:38,800 --> 00:07:43,280
then we evaluate the false pulse and

202
00:07:41,280 --> 00:07:46,080
false negative of our method

203
00:07:43,280 --> 00:07:47,119
we manually evaluate positive rates of

204
00:07:46,080 --> 00:07:49,680
our measures

205
00:07:47,120 --> 00:07:51,680
we managed to do that because many

206
00:07:49,680 --> 00:07:53,520
contracts and transactions are exactly

207
00:07:51,680 --> 00:07:56,560
the same

208
00:07:53,520 --> 00:07:57,120
our first possible rate is very low only

209
00:07:56,560 --> 00:07:59,919
about

210
00:07:57,120 --> 00:08:01,440
0.3 percent of transactions we recognize

211
00:07:59,919 --> 00:08:04,560
are false parties

212
00:08:01,440 --> 00:08:05,360
and we finally locate over 100 thousands

213
00:08:04,560 --> 00:08:07,520
attacks

214
00:08:05,360 --> 00:08:12,080
we filter the first part results in the

215
00:08:07,520 --> 00:08:13,680
following measurement

216
00:08:12,080 --> 00:08:16,240
since there is no benchmarking

217
00:08:13,680 --> 00:08:18,160
real-world attack we evaluate the first

218
00:08:16,240 --> 00:08:18,800
negative by sampling the vulnerable

219
00:08:18,160 --> 00:08:21,840
contract

220
00:08:18,800 --> 00:08:24,160
reported by six previous work and check

221
00:08:21,840 --> 00:08:26,318
whether they are attacked the first

222
00:08:24,160 --> 00:08:26,639
positive or the false negative all comes

223
00:08:26,319 --> 00:08:30,240
from

224
00:08:26,639 --> 00:08:30,240
our honeypot recognition

225
00:08:33,039 --> 00:08:36,640
finally we'll locate six kind of

226
00:08:35,679 --> 00:08:38,799
defenses

227
00:08:36,640 --> 00:08:40,718
we explain the reason of successful

228
00:08:38,799 --> 00:08:43,199
invasion in our paper

229
00:08:40,719 --> 00:08:45,200
and our conclusion here is that most of

230
00:08:43,200 --> 00:08:48,000
these this defense are effective

231
00:08:45,200 --> 00:08:54,080
when correctly deployed and we recommend

232
00:08:48,000 --> 00:08:56,240
the contract verify to use them

233
00:08:54,080 --> 00:08:59,200
i present some important results here

234
00:08:56,240 --> 00:09:02,720
and please refer to our paper for more

235
00:08:59,200 --> 00:09:03,040
from our results only about 0.25 percent

236
00:09:02,720 --> 00:09:05,120
of

237
00:09:03,040 --> 00:09:09,599
vulnerable contracts in six previous

238
00:09:05,120 --> 00:09:11,600
work are really attacked

239
00:09:09,600 --> 00:09:12,959
on the other hand we found that attack

240
00:09:11,600 --> 00:09:17,200
against

241
00:09:12,959 --> 00:09:18,719
344 contracts which have been never been

242
00:09:17,200 --> 00:09:21,120
which has never been reported by

243
00:09:18,720 --> 00:09:23,200
previous work and open source to us

244
00:09:21,120 --> 00:09:25,279
they are missing due to low code

245
00:09:23,200 --> 00:09:28,399
coverage and lacking of inter contract

246
00:09:25,279 --> 00:09:28,399
data flow analysis

247
00:09:30,800 --> 00:09:36,079
also we conduct a conservative

248
00:09:33,760 --> 00:09:37,600
conservative estimation of losses of all

249
00:09:36,080 --> 00:09:39,760
the attack we fund

250
00:09:37,600 --> 00:09:40,959
apart from the well-known incidents the

251
00:09:39,760 --> 00:09:43,760
rest losses

252
00:09:40,959 --> 00:09:44,160
are far less than expected and among

253
00:09:43,760 --> 00:09:46,240
them

254
00:09:44,160 --> 00:09:51,839
the airdrop hunting attack we reported

255
00:09:46,240 --> 00:09:51,839
in this paper caused the most losses

256
00:09:52,160 --> 00:09:58,560
here is our advice we have observed an

257
00:09:55,920 --> 00:10:00,399
attack strategy shift over time and we

258
00:09:58,560 --> 00:10:02,399
suggest that the company should keep

259
00:10:00,399 --> 00:10:05,120
looking for new attack strategies

260
00:10:02,399 --> 00:10:09,279
adopted by adverse rails and keeping

261
00:10:05,120 --> 00:10:09,279
pace with corresponding detection and

262
00:10:16,839 --> 00:10:19,839
defenses

