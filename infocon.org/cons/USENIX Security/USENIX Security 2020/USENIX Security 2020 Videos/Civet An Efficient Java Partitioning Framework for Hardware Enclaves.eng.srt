1
00:00:08,480 --> 00:00:11,519
hello

2
00:00:09,280 --> 00:00:13,678
today i want to introduce a word called

3
00:00:11,519 --> 00:00:15,360
civic an efficient java partitioning

4
00:00:13,679 --> 00:00:17,199
firmware for how enclave

5
00:00:15,360 --> 00:00:18,960
my name is judges hai i'm currently an

6
00:00:17,199 --> 00:00:21,039
assistant professor at texas a m

7
00:00:18,960 --> 00:00:23,439
university this is also joined work with

8
00:00:21,039 --> 00:00:25,680
john sock and rurika in uc berkeley

9
00:00:23,439 --> 00:00:28,720
busan and don in usc chapel hill and

10
00:00:25,680 --> 00:00:31,679
john from hendricks college

11
00:00:28,720 --> 00:00:33,200
howard enclave is an abstraction for

12
00:00:31,679 --> 00:00:35,839
boost trapping the trusted user

13
00:00:33,200 --> 00:00:37,600
on untrusted platform think about users

14
00:00:35,840 --> 00:00:38,719
who want to submit security sensitive

15
00:00:37,600 --> 00:00:42,239
program and data

16
00:00:38,719 --> 00:00:45,360
to an untrusted claim the cloud can then

17
00:00:42,239 --> 00:00:46,000
run the program on a cpu with hardware

18
00:00:45,360 --> 00:00:48,079
and

19
00:00:46,000 --> 00:00:49,440
enclave capability which will mainly

20
00:00:48,079 --> 00:00:52,640
give you three things

21
00:00:49,440 --> 00:00:54,800
first approve a trustworthy cpu second

22
00:00:52,640 --> 00:00:56,800
an environment called enclave that is

23
00:00:54,800 --> 00:00:57,440
completely isolated from the entrance os

24
00:00:56,800 --> 00:01:00,718
layers

25
00:00:57,440 --> 00:01:02,640
and i o devices and finally

26
00:01:00,719 --> 00:01:04,559
all the memory of the enclave will be

27
00:01:02,640 --> 00:01:06,799
encrypted inside dram

28
00:01:04,559 --> 00:01:08,479
these three features combined together

29
00:01:06,799 --> 00:01:11,200
become a great foundation

30
00:01:08,479 --> 00:01:12,640
for trust execution inside the cloud

31
00:01:11,200 --> 00:01:14,240
therefore many

32
00:01:12,640 --> 00:01:15,759
existing solutions has been dealing with

33
00:01:14,240 --> 00:01:19,439
so far including

34
00:01:15,759 --> 00:01:23,119
intel sgx mdsev untrust zone

35
00:01:19,439 --> 00:01:23,119
and risk 5 centum and keystone

36
00:01:25,040 --> 00:01:28,880
however combining cloud platform and

37
00:01:27,200 --> 00:01:31,119
enclay actually has a problem

38
00:01:28,880 --> 00:01:33,920
where the application typically has a

39
00:01:31,119 --> 00:01:36,000
large trusted computing base

40
00:01:33,920 --> 00:01:37,119
most applications nowadays are actually

41
00:01:36,000 --> 00:01:39,360
really complex

42
00:01:37,119 --> 00:01:42,079
multi-principle and also written in a

43
00:01:39,360 --> 00:01:44,079
managed languages such as java

44
00:01:42,079 --> 00:01:45,759
take hadoo one of the most well-known

45
00:01:44,079 --> 00:01:48,720
cloud applications for example

46
00:01:45,759 --> 00:01:51,360
in hadoop users submit the mapper

47
00:01:48,720 --> 00:01:53,520
reducer to the hadoop frameworks

48
00:01:51,360 --> 00:01:55,360
which contains a number of components

49
00:01:53,520 --> 00:01:57,600
including the scheduler

50
00:01:55,360 --> 00:01:59,520
the hadoop distributed file system a

51
00:01:57,600 --> 00:02:02,640
number of workers and also

52
00:01:59,520 --> 00:02:05,039
mapper reducers submitted by other users

53
00:02:02,640 --> 00:02:06,000
in addition the hadoop frameworks need

54
00:02:05,040 --> 00:02:09,280
to run

55
00:02:06,000 --> 00:02:11,440
with open jdk runtime

56
00:02:09,280 --> 00:02:12,480
together these are huge code bases for

57
00:02:11,440 --> 00:02:14,720
the users to trust

58
00:02:12,480 --> 00:02:18,720
even for simply just protecting a small

59
00:02:14,720 --> 00:02:18,720
logic as the mapper and reducer

60
00:02:20,160 --> 00:02:24,560
actually existing approaches explore

61
00:02:22,480 --> 00:02:26,000
some ways of running applications inside

62
00:02:24,560 --> 00:02:28,160
enclave

63
00:02:26,000 --> 00:02:29,360
the first approaches typically run the

64
00:02:28,160 --> 00:02:31,920
entire applications

65
00:02:29,360 --> 00:02:32,959
without any partitioning using like a

66
00:02:31,920 --> 00:02:36,238
library os

67
00:02:32,959 --> 00:02:38,560
or a shield layers this application

68
00:02:36,239 --> 00:02:42,480
requires no code modifications

69
00:02:38,560 --> 00:02:44,080
but has a large tcp inside the enclave

70
00:02:42,480 --> 00:02:46,319
the second approach then requires

71
00:02:44,080 --> 00:02:48,879
developing an api engine

72
00:02:46,319 --> 00:02:51,119
inside enclave to serve any requests

73
00:02:48,879 --> 00:02:53,280
that come from outside of enclave

74
00:02:51,120 --> 00:02:54,400
this approach has of course a t small

75
00:02:53,280 --> 00:02:57,760
tcb

76
00:02:54,400 --> 00:03:01,040
but is less flexible as it only supports

77
00:02:57,760 --> 00:03:02,239
a fixed set of api the last approaches

78
00:03:01,040 --> 00:03:06,159
will be to partition

79
00:03:02,239 --> 00:03:09,599
or to partially developer of functions

80
00:03:06,159 --> 00:03:11,760
or the components of a program to move

81
00:03:09,599 --> 00:03:14,640
into the enclave

82
00:03:11,760 --> 00:03:15,200
this approaches also had a small tcp

83
00:03:14,640 --> 00:03:17,679
however

84
00:03:15,200 --> 00:03:18,640
so far none of the solution has solved

85
00:03:17,680 --> 00:03:20,879
for support

86
00:03:18,640 --> 00:03:21,760
for object oriented interfaces for

87
00:03:20,879 --> 00:03:24,720
partitioning

88
00:03:21,760 --> 00:03:27,359
usually it's focused on c or c like

89
00:03:24,720 --> 00:03:27,359
interfaces

90
00:03:28,560 --> 00:03:34,319
in civit we explore the idea of fully

91
00:03:32,000 --> 00:03:36,879
supporting partitioning of a java

92
00:03:34,319 --> 00:03:39,599
application into enclave

93
00:03:36,879 --> 00:03:40,959
we provide the user a guided

94
00:03:39,599 --> 00:03:43,040
partitioning framework

95
00:03:40,959 --> 00:03:44,959
to experiment different partitioning

96
00:03:43,040 --> 00:03:46,319
boundaries to find out the most ideal

97
00:03:44,959 --> 00:03:48,879
one

98
00:03:46,319 --> 00:03:49,760
security eyes we generate and also

99
00:03:48,879 --> 00:03:52,319
enforce

100
00:03:49,760 --> 00:03:53,200
wine listing policy for class loading

101
00:03:52,319 --> 00:03:55,599
also for

102
00:03:53,200 --> 00:03:57,280
controlling the polymorphic behaviors of

103
00:03:55,599 --> 00:03:59,599
java

104
00:03:57,280 --> 00:04:01,120
finally for performance we also tailor a

105
00:03:59,599 --> 00:04:01,599
gentleman time for the unclaimed to

106
00:04:01,120 --> 00:04:03,519
improve

107
00:04:01,599 --> 00:04:06,159
expensive performance pattern such as

108
00:04:03,519 --> 00:04:08,159
garbage collections

109
00:04:06,159 --> 00:04:10,000
so here is our 3d model our thermal

110
00:04:08,159 --> 00:04:11,920
model only requires the user to trust

111
00:04:10,000 --> 00:04:13,599
the code and the frameworks that are

112
00:04:11,920 --> 00:04:16,159
running inside the enclave

113
00:04:13,599 --> 00:04:18,320
as well as the cpu itself everything

114
00:04:16,160 --> 00:04:20,320
else including the code also only such

115
00:04:18,320 --> 00:04:22,800
as the whole hotdog frameworks

116
00:04:20,320 --> 00:04:23,599
the operating system the io devices and

117
00:04:22,800 --> 00:04:26,720
dram

118
00:04:23,600 --> 00:04:27,440
should be all untrusted our defense

119
00:04:26,720 --> 00:04:30,960
mechanism

120
00:04:27,440 --> 00:04:33,199
mainly target two threats first any type

121
00:04:30,960 --> 00:04:35,359
tarp attack or exploitation that can

122
00:04:33,199 --> 00:04:37,440
manipulate the enclave to low unexpected

123
00:04:35,360 --> 00:04:40,240
classes or methods

124
00:04:37,440 --> 00:04:41,360
second attackers may abuse the

125
00:04:40,240 --> 00:04:44,479
interfaces were

126
00:04:41,360 --> 00:04:47,840
exposed from the enclave um

127
00:04:44,479 --> 00:04:50,560
this include this includes interfaces

128
00:04:47,840 --> 00:04:53,119
of the partitioning workloads and also

129
00:04:50,560 --> 00:04:55,840
any low-level system apis

130
00:04:53,120 --> 00:04:57,840
we will require sanitizing and shielding

131
00:04:55,840 --> 00:05:02,719
these interfaces to prevent

132
00:04:57,840 --> 00:05:02,719
any what we call so-called iago attack

133
00:05:04,320 --> 00:05:07,759
our framework contains two parts the

134
00:05:06,479 --> 00:05:11,039
partitioning tool

135
00:05:07,759 --> 00:05:14,000
and also a java runtime in design phases

136
00:05:11,039 --> 00:05:15,039
our partitioning tool takes the classes

137
00:05:14,000 --> 00:05:17,440
that user need

138
00:05:15,039 --> 00:05:19,680
to protect and also an information

139
00:05:17,440 --> 00:05:21,759
confirm configuration file

140
00:05:19,680 --> 00:05:23,360
as the entry point that you want to use

141
00:05:21,759 --> 00:05:25,120
for partitioning

142
00:05:23,360 --> 00:05:27,280
these two information will be given to

143
00:05:25,120 --> 00:05:29,520
our civic partitioning tool

144
00:05:27,280 --> 00:05:31,359
through static analysis and augmentation

145
00:05:29,520 --> 00:05:33,680
you will generate two packages

146
00:05:31,360 --> 00:05:36,639
one being the trusted java packages and

147
00:05:33,680 --> 00:05:38,479
untrusted java packages

148
00:05:36,639 --> 00:05:40,000
during the execution phases both

149
00:05:38,479 --> 00:05:41,599
packages will be shipped to the

150
00:05:40,000 --> 00:05:42,960
platforms with hard on claim

151
00:05:41,600 --> 00:05:45,759
capabilities

152
00:05:42,960 --> 00:05:46,799
the untrusted java packages below will

153
00:05:45,759 --> 00:05:49,919
be used for

154
00:05:46,800 --> 00:05:50,800
the original applications as a proxy to

155
00:05:49,919 --> 00:05:53,039
interact with

156
00:05:50,800 --> 00:05:54,880
application uh the code running inside

157
00:05:53,039 --> 00:05:56,800
enclave

158
00:05:54,880 --> 00:05:59,039
the actual classes partitioning is

159
00:05:56,800 --> 00:06:01,039
enclave will be loaded from this

160
00:05:59,039 --> 00:06:02,560
trusted packages and will be verified by

161
00:06:01,039 --> 00:06:04,479
the cpu

162
00:06:02,560 --> 00:06:05,840
in addition in order to support this

163
00:06:04,479 --> 00:06:08,880
java workload we

164
00:06:05,840 --> 00:06:11,280
actually will have a trim that shielded

165
00:06:08,880 --> 00:06:12,960
open jdk runtime just running inside the

166
00:06:11,280 --> 00:06:14,479
enclave

167
00:06:12,960 --> 00:06:16,318
doing the partitioning is actually

168
00:06:14,479 --> 00:06:17,440
important to determine the actual

169
00:06:16,319 --> 00:06:19,600
affected tcp

170
00:06:17,440 --> 00:06:21,520
size based on which entry point you use

171
00:06:19,600 --> 00:06:23,680
to partition your applications

172
00:06:21,520 --> 00:06:24,799
we suggest trying different entry points

173
00:06:23,680 --> 00:06:27,120
to experiment

174
00:06:24,800 --> 00:06:28,720
the best memory and our tool is actually

175
00:06:27,120 --> 00:06:32,240
really great to help you do that

176
00:06:28,720 --> 00:06:32,880
efficiently for any unnecessary classes

177
00:06:32,240 --> 00:06:34,880
a method

178
00:06:32,880 --> 00:06:36,319
inside your partition our framework will

179
00:06:34,880 --> 00:06:37,440
prevent them from being loaded at the

180
00:06:36,319 --> 00:06:39,840
first place at all

181
00:06:37,440 --> 00:06:41,520
to avoid any vulnerability that cause

182
00:06:39,840 --> 00:06:43,919
them to be loaded

183
00:06:41,520 --> 00:06:44,719
for this we introduce aesthetic analysis

184
00:06:43,919 --> 00:06:48,479
techniques

185
00:06:44,720 --> 00:06:50,800
or we call co-reachability analysis

186
00:06:48,479 --> 00:06:52,800
this analysis will help us identify the

187
00:06:50,800 --> 00:06:54,560
actual classes and methods that are

188
00:06:52,800 --> 00:06:56,160
reachable from the entry point

189
00:06:54,560 --> 00:06:57,919
using these analysis we can actually

190
00:06:56,160 --> 00:06:58,160
shred all the classes and methods that

191
00:06:57,919 --> 00:07:02,799
are

192
00:06:58,160 --> 00:07:04,479
unnecessary from the enclave

193
00:07:02,800 --> 00:07:06,560
also for the security of ongoing

194
00:07:04,479 --> 00:07:08,080
interfaces we envision a new

195
00:07:06,560 --> 00:07:10,000
security threat in regard to the

196
00:07:08,080 --> 00:07:11,280
polymorphism because

197
00:07:10,000 --> 00:07:13,520
java classes could actually be

198
00:07:11,280 --> 00:07:14,559
polymorphic and interfaces that used for

199
00:07:13,520 --> 00:07:16,799
partitioning

200
00:07:14,560 --> 00:07:17,840
may accept different subtype other

201
00:07:16,800 --> 00:07:19,120
inputs

202
00:07:17,840 --> 00:07:20,560
based on the subtype given by the

203
00:07:19,120 --> 00:07:21,280
attacker for example it could be a

204
00:07:20,560 --> 00:07:23,520
benign

205
00:07:21,280 --> 00:07:26,080
subtype or malicious subtype the

206
00:07:23,520 --> 00:07:29,359
attacker actually could get to control

207
00:07:26,080 --> 00:07:30,880
the behavior of your enclave this is

208
00:07:29,360 --> 00:07:32,639
actually kind of a semantic attack

209
00:07:30,880 --> 00:07:35,759
that's really difficult to detect

210
00:07:32,639 --> 00:07:38,160
and as a solution we introduce a deep

211
00:07:35,759 --> 00:07:39,919
input type checks to the interfaces to

212
00:07:38,160 --> 00:07:41,919
prevent attackers from assigning

213
00:07:39,919 --> 00:07:45,758
different arbitrary subtypes to any

214
00:07:41,919 --> 00:07:49,120
level of inputs

215
00:07:45,759 --> 00:07:50,639
finally we discover that garbage

216
00:07:49,120 --> 00:07:52,080
collection in enclave are actually

217
00:07:50,639 --> 00:07:54,560
significantly slower

218
00:07:52,080 --> 00:07:55,520
mainly because the expensive cash method

219
00:07:54,560 --> 00:07:58,720
and page fall

220
00:07:55,520 --> 00:08:00,719
in the encrypted memory now

221
00:07:58,720 --> 00:08:01,759
here we need to start talking about uh

222
00:08:00,720 --> 00:08:03,599
the

223
00:08:01,759 --> 00:08:05,599
the design of java runtime a java

224
00:08:03,599 --> 00:08:07,440
runtime typically follows what we call a

225
00:08:05,599 --> 00:08:10,639
mark and swift design

226
00:08:07,440 --> 00:08:13,759
it locks the reference graph to discover

227
00:08:10,639 --> 00:08:14,879
that object to reclaim another thing

228
00:08:13,759 --> 00:08:17,360
that java runtime does

229
00:08:14,879 --> 00:08:19,840
is to spread the heap into two part

230
00:08:17,360 --> 00:08:21,360
which one is the younger generation

231
00:08:19,840 --> 00:08:23,359
that is more frequently garbage

232
00:08:21,360 --> 00:08:24,160
collected and there's the old direction

233
00:08:23,360 --> 00:08:28,000
that is

234
00:08:24,160 --> 00:08:30,240
more rarely are garbage collected

235
00:08:28,000 --> 00:08:32,080
in these cases because market sweep

236
00:08:30,240 --> 00:08:33,760
actually causes a random access pattern

237
00:08:32,080 --> 00:08:35,919
in the encrypted memory

238
00:08:33,760 --> 00:08:38,000
inside enclave both generations suffer

239
00:08:35,919 --> 00:08:40,399
significant overhead

240
00:08:38,000 --> 00:08:43,839
up to 12 times in all generations

241
00:08:40,399 --> 00:08:43,839
because of the paging overheads

242
00:08:44,560 --> 00:08:47,680
our solution for this problem is to

243
00:08:46,560 --> 00:08:49,920
reduce

244
00:08:47,680 --> 00:08:51,199
the cash misses in the young generation

245
00:08:49,920 --> 00:08:52,640
and also to prevent

246
00:08:51,200 --> 00:08:55,519
going to the old duration for the

247
00:08:52,640 --> 00:08:57,439
garbage collection as much as possible

248
00:08:55,519 --> 00:08:58,640
we added one more generation called the

249
00:08:57,440 --> 00:09:01,279
mid generations

250
00:08:58,640 --> 00:09:04,399
in between to fit into the encrypted

251
00:09:01,279 --> 00:09:06,399
dram sizes which is around 92 megabytes

252
00:09:04,399 --> 00:09:09,200
on our platform this is to minimize the

253
00:09:06,399 --> 00:09:11,040
page faults during garbage collections

254
00:09:09,200 --> 00:09:12,560
for the young generation we try to fit

255
00:09:11,040 --> 00:09:15,680
it into the cache side

256
00:09:12,560 --> 00:09:17,760
this is to minimize the cache misses as

257
00:09:15,680 --> 00:09:20,079
a result we're able to reduce the memory

258
00:09:17,760 --> 00:09:23,200
overhead in majority of the cases

259
00:09:20,080 --> 00:09:23,839
and shows a significant reduction of the

260
00:09:23,200 --> 00:09:25,519
average

261
00:09:23,839 --> 00:09:28,240
garbage collection time in a long

262
00:09:25,519 --> 00:09:28,240
running program

263
00:09:28,720 --> 00:09:33,519
finally let's look at the results of

264
00:09:31,360 --> 00:09:35,519
partitioning and the performance

265
00:09:33,519 --> 00:09:36,880
we use the hadoop regular expression

266
00:09:35,519 --> 00:09:39,200
matching as example

267
00:09:36,880 --> 00:09:41,519
for partitioning and we only partition

268
00:09:39,200 --> 00:09:43,120
the mapper into the enclave

269
00:09:41,519 --> 00:09:44,800
after partitioning and shredding the

270
00:09:43,120 --> 00:09:45,839
necessary classes of method we were able

271
00:09:44,800 --> 00:09:50,160
to reduce

272
00:09:45,839 --> 00:09:53,440
96 of the classes classes method codes

273
00:09:50,160 --> 00:09:56,880
from the enclave for the performance

274
00:09:53,440 --> 00:09:58,640
we run using this partitioning mapper to

275
00:09:56,880 --> 00:09:59,760
process around one gigabyte of encrypted

276
00:09:58,640 --> 00:10:02,160
data

277
00:09:59,760 --> 00:10:02,880
and which shows that the service only

278
00:10:02,160 --> 00:10:05,839
protection

279
00:10:02,880 --> 00:10:08,000
plus the tie tracking only add around 16

280
00:10:05,839 --> 00:10:11,680
to 22 percent overhead

281
00:10:08,000 --> 00:10:13,920
to the latency in conclusion

282
00:10:11,680 --> 00:10:15,040
we found that java club actually don't

283
00:10:13,920 --> 00:10:17,040
typically fit into

284
00:10:15,040 --> 00:10:19,360
the enclave programming paradigm mainly

285
00:10:17,040 --> 00:10:20,079
because java has dynamic and polymorphic

286
00:10:19,360 --> 00:10:22,399
behavior

287
00:10:20,079 --> 00:10:24,160
as well as most java workloads needs a

288
00:10:22,399 --> 00:10:25,920
monolithic runtime

289
00:10:24,160 --> 00:10:27,439
and also has expensive resource

290
00:10:25,920 --> 00:10:28,959
management schemes such as garbage

291
00:10:27,440 --> 00:10:30,320
collections

292
00:10:28,959 --> 00:10:32,079
instead it will give you a tool for

293
00:10:30,320 --> 00:10:34,079
partitioning these java application

294
00:10:32,079 --> 00:10:35,120
and also to refine and harden the

295
00:10:34,079 --> 00:10:36,800
partition results

296
00:10:35,120 --> 00:10:38,320
with techniques such as reachability

297
00:10:36,800 --> 00:10:40,079
analysis detail checking

298
00:10:38,320 --> 00:10:41,920
and also have unplanned visual analytic

299
00:10:40,079 --> 00:10:43,760
design to optimize behaviors such as

300
00:10:41,920 --> 00:10:45,120
garbage collections

301
00:10:43,760 --> 00:10:58,160
if you have any questions or feedback

302
00:10:45,120 --> 00:10:58,160
please feel free to contact me thank you

