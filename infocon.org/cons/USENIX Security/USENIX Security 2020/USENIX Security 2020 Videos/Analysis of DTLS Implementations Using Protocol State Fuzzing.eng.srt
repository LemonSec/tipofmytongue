1
00:00:08,960 --> 00:00:11,200
hello

2
00:00:09,519 --> 00:00:12,639
my name is paul fitaro and in the

3
00:00:11,200 --> 00:00:13,280
following minutes i'll present you our

4
00:00:12,639 --> 00:00:15,678
work on

5
00:00:13,280 --> 00:00:17,840
analyzing dtls implementations using

6
00:00:15,679 --> 00:00:20,560
protocol state fusing

7
00:00:17,840 --> 00:00:22,960
dtls is an adaptation of tls used to

8
00:00:20,560 --> 00:00:25,359
secure communication over udp

9
00:00:22,960 --> 00:00:27,760
dtls is often employed in applications

10
00:00:25,359 --> 00:00:30,480
where udp is preferred to tcp

11
00:00:27,760 --> 00:00:33,520
these applications include iot as well

12
00:00:30,480 --> 00:00:36,320
as real-time applications such as webrtc

13
00:00:33,520 --> 00:00:38,480
as the usage of dtls increases so does

14
00:00:36,320 --> 00:00:39,920
the need that implementations of dtls

15
00:00:38,480 --> 00:00:42,559
are well tested

16
00:00:39,920 --> 00:00:45,120
unfortunately testing is not easy since

17
00:00:42,559 --> 00:00:48,078
dtls is a complicated protocol

18
00:00:45,120 --> 00:00:49,199
as we'll soon find out dtls secures

19
00:00:48,079 --> 00:00:51,920
communication between

20
00:00:49,200 --> 00:00:53,360
applications using session keys in order

21
00:00:51,920 --> 00:00:55,280
to establish this keys

22
00:00:53,360 --> 00:00:57,519
a client and a server perform what's

23
00:00:55,280 --> 00:00:59,199
known as a dtls handshake

24
00:00:57,520 --> 00:01:01,199
the site starts this handshake by

25
00:00:59,199 --> 00:01:03,599
negotiating various parameters

26
00:01:01,199 --> 00:01:05,280
most notably the cipher suite which

27
00:01:03,600 --> 00:01:06,880
determines among other things

28
00:01:05,280 --> 00:01:09,360
the key exchange that will be used in

29
00:01:06,880 --> 00:01:10,560
the handshake this step may include a

30
00:01:09,360 --> 00:01:12,880
cookie exchange step

31
00:01:10,560 --> 00:01:14,799
initiated by the server meant to prevent

32
00:01:12,880 --> 00:01:16,720
denial of service attacks

33
00:01:14,799 --> 00:01:18,320
after negotiating parameters the two

34
00:01:16,720 --> 00:01:20,400
sides perform key exchange

35
00:01:18,320 --> 00:01:22,559
in order to establish a shared secret

36
00:01:20,400 --> 00:01:24,880
from which to derive session keys

37
00:01:22,560 --> 00:01:26,880
in our example the sites also mutually

38
00:01:24,880 --> 00:01:28,320
authenticate by supplying a certificate

39
00:01:26,880 --> 00:01:30,399
message to each other

40
00:01:28,320 --> 00:01:32,079
a client has to additionally supply a

41
00:01:30,400 --> 00:01:33,840
certificate verify message

42
00:01:32,079 --> 00:01:36,000
by which it proves to the server

43
00:01:33,840 --> 00:01:37,280
ownership of the certificate it has sent

44
00:01:36,000 --> 00:01:39,280
earlier

45
00:01:37,280 --> 00:01:41,439
the handshake ends with both sides

46
00:01:39,280 --> 00:01:42,560
sending chain ciphers back and finish to

47
00:01:41,439 --> 00:01:44,320
each other

48
00:01:42,560 --> 00:01:46,560
with the handshake complete the two

49
00:01:44,320 --> 00:01:47,758
sides can begin exchanging application

50
00:01:46,560 --> 00:01:50,799
data securely

51
00:01:47,759 --> 00:01:53,119
using the newly negotiated keys now

52
00:01:50,799 --> 00:01:54,240
dtls supports several key exchange and

53
00:01:53,119 --> 00:01:57,040
client authentication

54
00:01:54,240 --> 00:01:58,640
settings our example uses rsa key

55
00:01:57,040 --> 00:02:00,079
exchange and captures client

56
00:01:58,640 --> 00:02:02,640
authentication

57
00:02:00,079 --> 00:02:04,479
each setting impacts the logical flow of

58
00:02:02,640 --> 00:02:06,399
the handshake in its own way

59
00:02:04,479 --> 00:02:08,959
for example if authentication was

60
00:02:06,399 --> 00:02:10,560
disabled the messages used in

61
00:02:08,959 --> 00:02:12,560
cloud authentication would disappear

62
00:02:10,560 --> 00:02:14,959
from the expected handshake

63
00:02:12,560 --> 00:02:16,160
similarly if pre-shared keys was used

64
00:02:14,959 --> 00:02:17,760
instead of rsa

65
00:02:16,160 --> 00:02:20,560
all certificate messages would be

66
00:02:17,760 --> 00:02:23,200
omitted from the expected handshake

67
00:02:20,560 --> 00:02:24,319
now complicating matters further for

68
00:02:23,200 --> 00:02:26,799
each configuration

69
00:02:24,319 --> 00:02:28,238
implementations must ensure there are no

70
00:02:26,800 --> 00:02:31,200
missing messages and must

71
00:02:28,239 --> 00:02:33,280
also process messages in the right order

72
00:02:31,200 --> 00:02:33,839
fading that can lead to control flow

73
00:02:33,280 --> 00:02:36,879
bugs

74
00:02:33,840 --> 00:02:39,280
with potentially dire consequences one

75
00:02:36,879 --> 00:02:41,760
such bug is shown here where a server

76
00:02:39,280 --> 00:02:43,840
allows a client to bypass authentication

77
00:02:41,760 --> 00:02:45,599
despite being configured to require this

78
00:02:43,840 --> 00:02:48,480
authentication step

79
00:02:45,599 --> 00:02:49,599
now this is one of many examples so the

80
00:02:48,480 --> 00:02:51,840
question is

81
00:02:49,599 --> 00:02:53,760
how can we test for these bugs in order

82
00:02:51,840 --> 00:02:56,000
to prevent them

83
00:02:53,760 --> 00:02:57,120
and testing for these bugs is

84
00:02:56,000 --> 00:02:59,040
challenging since

85
00:02:57,120 --> 00:03:00,720
there are infinitely many possible

86
00:02:59,040 --> 00:03:03,280
sequences to check for

87
00:03:00,720 --> 00:03:05,200
fortunately for us the server's behavior

88
00:03:03,280 --> 00:03:06,720
for the sequences can be captured in a

89
00:03:05,200 --> 00:03:09,200
finite state machine

90
00:03:06,720 --> 00:03:10,560
we can then analyze the state machine

91
00:03:09,200 --> 00:03:13,359
for bugs

92
00:03:10,560 --> 00:03:14,000
but how can we get this data machine

93
00:03:13,360 --> 00:03:15,920
even more

94
00:03:14,000 --> 00:03:17,519
fortunately for us state fuzzing is a

95
00:03:15,920 --> 00:03:19,599
technique which will generate the

96
00:03:17,519 --> 00:03:20,720
state machine for us and will do so

97
00:03:19,599 --> 00:03:23,359
automatically

98
00:03:20,720 --> 00:03:26,640
which is why we employed state fuzzing

99
00:03:23,360 --> 00:03:29,040
in our own work on testing dtls servers

100
00:03:26,640 --> 00:03:31,040
now state fuzzing may be automatic but

101
00:03:29,040 --> 00:03:33,760
it still requires that you build a setup

102
00:03:31,040 --> 00:03:36,000
for it and unfortunately building the

103
00:03:33,760 --> 00:03:36,560
setup presents a significant technical

104
00:03:36,000 --> 00:03:38,480
challenge

105
00:03:36,560 --> 00:03:39,599
owing to the protocol's overall

106
00:03:38,480 --> 00:03:41,840
complexity

107
00:03:39,599 --> 00:03:44,079
moreover to apply state fuzzing

108
00:03:41,840 --> 00:03:45,680
thoroughly which is what we want to do

109
00:03:44,080 --> 00:03:47,280
we'd have to apply to various

110
00:03:45,680 --> 00:03:48,000
implementations for different key

111
00:03:47,280 --> 00:03:50,480
exchange

112
00:03:48,000 --> 00:03:51,840
and authentication settings since as

113
00:03:50,480 --> 00:03:54,480
we've seen before

114
00:03:51,840 --> 00:03:55,120
the settings alter the control flow

115
00:03:54,480 --> 00:03:57,280
finally

116
00:03:55,120 --> 00:03:59,120
once the mods are out we'll still have

117
00:03:57,280 --> 00:04:01,040
to inspect them for bugs

118
00:03:59,120 --> 00:04:02,480
with this being the main challenges

119
00:04:01,040 --> 00:04:04,879
let's see how we met

120
00:04:02,480 --> 00:04:07,040
these challenges we have developed a

121
00:04:04,879 --> 00:04:08,079
state fuzzing framework for testing dtls

122
00:04:07,040 --> 00:04:10,560
servers

123
00:04:08,080 --> 00:04:12,319
we use this framework to analyze 11 dtls

124
00:04:10,560 --> 00:04:13,680
server implementations for various

125
00:04:12,319 --> 00:04:16,478
configurations

126
00:04:13,680 --> 00:04:18,478
our analysis has revealed over 10 bucks

127
00:04:16,478 --> 00:04:20,238
some of which security critical

128
00:04:18,478 --> 00:04:22,560
we reported these bugs to the pool

129
00:04:20,238 --> 00:04:24,638
developers prompting fixes in five

130
00:04:22,560 --> 00:04:27,440
implementations so far

131
00:04:24,639 --> 00:04:28,160
now since our work revolves around state

132
00:04:27,440 --> 00:04:30,560
fuzzing

133
00:04:28,160 --> 00:04:31,600
let's discuss how state fusing actually

134
00:04:30,560 --> 00:04:34,320
works

135
00:04:31,600 --> 00:04:35,600
state fuzzing involves two components a

136
00:04:34,320 --> 00:04:37,680
learner component

137
00:04:35,600 --> 00:04:38,880
implementing some learning algorithm and

138
00:04:37,680 --> 00:04:40,800
a black box system

139
00:04:38,880 --> 00:04:43,360
the system we want to test in our case

140
00:04:40,800 --> 00:04:45,280
this is a dtls server implementation

141
00:04:43,360 --> 00:04:47,360
the learner interacts with the system

142
00:04:45,280 --> 00:04:49,359
sending inputs and observing the outputs

143
00:04:47,360 --> 00:04:51,280
the system generates in response

144
00:04:49,360 --> 00:04:53,199
eventually the learner constructs a

145
00:04:51,280 --> 00:04:54,880
model typically a mini machine

146
00:04:53,199 --> 00:04:56,880
which is consistent with the input

147
00:04:54,880 --> 00:05:00,400
output behavior of the system

148
00:04:56,880 --> 00:05:02,320
we can then check the small for bugs now

149
00:05:00,400 --> 00:05:03,919
before we can apply state fuzzing in

150
00:05:02,320 --> 00:05:05,680
practice we need one additional

151
00:05:03,919 --> 00:05:07,840
component and this component

152
00:05:05,680 --> 00:05:10,240
is called the mapper the mapper

153
00:05:07,840 --> 00:05:12,159
translates between learner input outputs

154
00:05:10,240 --> 00:05:15,280
and input outputs recognized by the

155
00:05:12,160 --> 00:05:17,520
system since we are testing dtls servers

156
00:05:15,280 --> 00:05:20,960
the system input outputs are essentially

157
00:05:17,520 --> 00:05:23,120
dtls packets which are sent over udp

158
00:05:20,960 --> 00:05:25,599
so with all the components being

159
00:05:23,120 --> 00:05:28,720
introduced we can touch on how the

160
00:05:25,600 --> 00:05:30,160
components were actually implemented we

161
00:05:28,720 --> 00:05:30,800
implemented the learner based on

162
00:05:30,160 --> 00:05:32,240
learnlib

163
00:05:30,800 --> 00:05:34,080
a java library containing

164
00:05:32,240 --> 00:05:35,120
implementations of several learning

165
00:05:34,080 --> 00:05:37,599
algorithms

166
00:05:35,120 --> 00:05:38,320
the mapper was constructed on top of tls

167
00:05:37,600 --> 00:05:40,560
stacker

168
00:05:38,320 --> 00:05:41,759
an extensible framework for testing tls

169
00:05:40,560 --> 00:05:43,919
implementations

170
00:05:41,759 --> 00:05:45,600
when we started this work tls stacker

171
00:05:43,919 --> 00:05:47,758
only supported tls

172
00:05:45,600 --> 00:05:48,639
hence we extended it with support for

173
00:05:47,759 --> 00:05:50,960
dtls

174
00:05:48,639 --> 00:05:52,880
we then used the extend dls stacker to

175
00:05:50,960 --> 00:05:54,638
construct our mapper

176
00:05:52,880 --> 00:05:56,800
the next step in state fusing is

177
00:05:54,639 --> 00:05:58,160
designing inputs and outputs that will

178
00:05:56,800 --> 00:06:00,880
be used in learning

179
00:05:58,160 --> 00:06:02,240
which make up the so called input output

180
00:06:00,880 --> 00:06:04,319
alphabets

181
00:06:02,240 --> 00:06:06,720
as we are testing the tls servers the

182
00:06:04,319 --> 00:06:08,560
input alphabet contains inputs for each

183
00:06:06,720 --> 00:06:09,199
message type the client can send to the

184
00:06:08,560 --> 00:06:11,280
server

185
00:06:09,199 --> 00:06:12,639
we include here client hello and client

186
00:06:11,280 --> 00:06:15,359
key exchange inputs

187
00:06:12,639 --> 00:06:16,400
for several key exchange algorithms we

188
00:06:15,360 --> 00:06:19,520
also include here

189
00:06:16,400 --> 00:06:21,840
inputs for two common alert messages

190
00:06:19,520 --> 00:06:22,560
alerts are messages that are used to

191
00:06:21,840 --> 00:06:25,359
signal

192
00:06:22,560 --> 00:06:27,199
exceptional events such as receivable of

193
00:06:25,360 --> 00:06:29,600
an unexpected message

194
00:06:27,199 --> 00:06:30,880
with respect to the output alphabet this

195
00:06:29,600 --> 00:06:32,960
includes outputs

196
00:06:30,880 --> 00:06:34,080
for all the message types a server may

197
00:06:32,960 --> 00:06:36,479
generate

198
00:06:34,080 --> 00:06:37,758
notable here is the no response output

199
00:06:36,479 --> 00:06:39,599
marked with dash

200
00:06:37,759 --> 00:06:42,560
which signals that the server has

201
00:06:39,600 --> 00:06:44,479
generated no messages in response

202
00:06:42,560 --> 00:06:46,560
using the presented input output

203
00:06:44,479 --> 00:06:48,159
alphabets we applied our state fuzzing

204
00:06:46,560 --> 00:06:49,440
framework to various dtls

205
00:06:48,160 --> 00:06:51,199
implementations

206
00:06:49,440 --> 00:06:53,360
ranging from general purpose

207
00:06:51,199 --> 00:06:55,680
implementation such as opensl

208
00:06:53,360 --> 00:06:56,560
to iot specific implementation such as

209
00:06:55,680 --> 00:06:58,160
candia

210
00:06:56,560 --> 00:06:59,840
we generate the models for each

211
00:06:58,160 --> 00:07:01,199
implementation using different key

212
00:06:59,840 --> 00:07:02,000
exchange and class certificate

213
00:07:01,199 --> 00:07:05,039
authentication

214
00:07:02,000 --> 00:07:06,560
settings we then analyze the mods

215
00:07:05,039 --> 00:07:08,880
manually for bugs

216
00:07:06,560 --> 00:07:11,120
our analysis has uncovered violations to

217
00:07:08,880 --> 00:07:12,880
the specification in essentially all the

218
00:07:11,120 --> 00:07:14,880
models that were generated

219
00:07:12,880 --> 00:07:17,039
we reported many of these violations to

220
00:07:14,880 --> 00:07:17,599
the tool developers prompting fixes in

221
00:07:17,039 --> 00:07:20,000
five

222
00:07:17,599 --> 00:07:21,280
implementations the more severe of these

223
00:07:20,000 --> 00:07:23,599
violations are

224
00:07:21,280 --> 00:07:25,198
handshake bugs these bugs entail

225
00:07:23,599 --> 00:07:27,919
completing a handshake by

226
00:07:25,199 --> 00:07:29,120
an invalid sequence of messages we'll

227
00:07:27,919 --> 00:07:32,159
proceed to discuss

228
00:07:29,120 --> 00:07:34,560
two of the more notable handshake bugs

229
00:07:32,160 --> 00:07:36,639
here we show a small small portion of

230
00:07:34,560 --> 00:07:39,840
the modeler for java 11.

231
00:07:36,639 --> 00:07:42,000
it looks very messy indeed and this

232
00:07:39,840 --> 00:07:42,880
slide shows a have redacted version of

233
00:07:42,000 --> 00:07:44,960
that mall

234
00:07:42,880 --> 00:07:46,719
as you might guess redacting is an

235
00:07:44,960 --> 00:07:48,400
essential part of the work

236
00:07:46,720 --> 00:07:50,080
the server here was configured to

237
00:07:48,400 --> 00:07:51,198
require the client to authenticate with

238
00:07:50,080 --> 00:07:54,318
the certificate

239
00:07:51,199 --> 00:07:56,319
state 0 is the initial state state 10

240
00:07:54,319 --> 00:07:58,000
color till is the state the server

241
00:07:56,319 --> 00:07:58,960
transitions to after completing the

242
00:07:58,000 --> 00:08:01,680
handshake

243
00:07:58,960 --> 00:08:04,000
we notice that from state 0 to state 10

244
00:08:01,680 --> 00:08:06,080
there are several handshake paths

245
00:08:04,000 --> 00:08:07,759
the blue handshake path corresponds to

246
00:08:06,080 --> 00:08:09,680
the expected handshake

247
00:08:07,759 --> 00:08:11,680
this handshake performs the necessary

248
00:08:09,680 --> 00:08:13,680
client certificate authentication

249
00:08:11,680 --> 00:08:15,120
using the certificate and certificate

250
00:08:13,680 --> 00:08:17,599
verify messages

251
00:08:15,120 --> 00:08:18,879
essentially after sending two client

252
00:08:17,599 --> 00:08:20,719
hello messages

253
00:08:18,879 --> 00:08:22,000
prompting the server to transition to

254
00:08:20,720 --> 00:08:24,560
state four

255
00:08:22,000 --> 00:08:25,280
a client can perform key exchange and in

256
00:08:24,560 --> 00:08:27,440
the process

257
00:08:25,280 --> 00:08:29,679
also authenticate itself leading the

258
00:08:27,440 --> 00:08:31,199
server to state free

259
00:08:29,680 --> 00:08:33,200
the client can then complete the

260
00:08:31,199 --> 00:08:35,039
handshake by sending change surface back

261
00:08:33,200 --> 00:08:37,839
and finish causing the server to

262
00:08:35,039 --> 00:08:39,360
transition to state 10. note that in

263
00:08:37,839 --> 00:08:40,320
this handshake both the client

264
00:08:39,360 --> 00:08:42,560
certificate

265
00:08:40,320 --> 00:08:44,320
and certificate verify messages are

266
00:08:42,559 --> 00:08:46,640
required for authentication

267
00:08:44,320 --> 00:08:48,720
yet it is these very messages that are

268
00:08:46,640 --> 00:08:51,519
omitted from several red paths

269
00:08:48,720 --> 00:08:54,080
which also lead to state 10. we'll more

270
00:08:51,519 --> 00:08:57,040
closely inspect two of these paths

271
00:08:54,080 --> 00:08:58,720
the lost path indicates a handshake that

272
00:08:57,040 --> 00:09:00,719
is missing both certificate and

273
00:08:58,720 --> 00:09:03,200
certificate verify messages

274
00:09:00,720 --> 00:09:05,120
has this path totally bypasses the

275
00:09:03,200 --> 00:09:07,120
certificate authentication step

276
00:09:05,120 --> 00:09:08,240
a step without which a handshake should

277
00:09:07,120 --> 00:09:11,279
never have been

278
00:09:08,240 --> 00:09:13,040
completed the red path above it is

279
00:09:11,279 --> 00:09:14,880
actually even more interesting

280
00:09:13,040 --> 00:09:16,800
this path captures a handshake

281
00:09:14,880 --> 00:09:18,320
containing a client certificate but

282
00:09:16,800 --> 00:09:20,800
crucially crucially

283
00:09:18,320 --> 00:09:22,000
omitting the certificate verify message

284
00:09:20,800 --> 00:09:24,399
recall that certificate

285
00:09:22,000 --> 00:09:25,839
verify is used to prove ownership of the

286
00:09:24,399 --> 00:09:28,480
class certificate

287
00:09:25,839 --> 00:09:30,240
hence this bug allows an attacker to

288
00:09:28,480 --> 00:09:31,360
complete a hashtag with the stolen

289
00:09:30,240 --> 00:09:33,920
certificate

290
00:09:31,360 --> 00:09:35,600
worse yet after performing this invalid

291
00:09:33,920 --> 00:09:36,000
hashing the server will think that the

292
00:09:35,600 --> 00:09:38,160
client

293
00:09:36,000 --> 00:09:39,680
identified by the certificate has

294
00:09:38,160 --> 00:09:42,560
actually authenticated

295
00:09:39,680 --> 00:09:44,479
the server may thus give an attacker an

296
00:09:42,560 --> 00:09:46,160
authorized access to sensitive data

297
00:09:44,480 --> 00:09:48,640
belonging to the client

298
00:09:46,160 --> 00:09:49,360
these bugs highlight the importance of

299
00:09:48,640 --> 00:09:51,439
ensuring that

300
00:09:49,360 --> 00:09:52,720
implementations enforce the correct

301
00:09:51,440 --> 00:09:55,279
protocol flow

302
00:09:52,720 --> 00:09:57,200
unfortunately our work shows that this

303
00:09:55,279 --> 00:09:59,279
is still an area of struggle since

304
00:09:57,200 --> 00:10:00,480
similar bugs were found both in palm

305
00:09:59,279 --> 00:10:03,839
dtls

306
00:10:00,480 --> 00:10:05,519
and in scandia to conclude we have

307
00:10:03,839 --> 00:10:07,279
implemented the state fuzzing framework

308
00:10:05,519 --> 00:10:10,000
for testing dtls servers

309
00:10:07,279 --> 00:10:12,079
to that end we extend tls stacker a

310
00:10:10,000 --> 00:10:13,200
well-known tls test library with support

311
00:10:12,079 --> 00:10:14,959
for dtls

312
00:10:13,200 --> 00:10:17,600
we use the state fuzzing framework to

313
00:10:14,959 --> 00:10:18,079
analyze 11 implementations exercising

314
00:10:17,600 --> 00:10:20,959
various

315
00:10:18,079 --> 00:10:23,359
configurations our analysis has revealed

316
00:10:20,959 --> 00:10:24,959
various bugs prompting fixes in five

317
00:10:23,360 --> 00:10:26,880
implementations

318
00:10:24,959 --> 00:10:28,239
we believe the software that was built

319
00:10:26,880 --> 00:10:30,720
as part of this work

320
00:10:28,240 --> 00:10:31,279
can serve as a platform for future work

321
00:10:30,720 --> 00:10:33,760
as to

322
00:10:31,279 --> 00:10:35,920
what this future work might actually be

323
00:10:33,760 --> 00:10:37,439
several directions are possible i'll

324
00:10:35,920 --> 00:10:39,680
just mention a few

325
00:10:37,440 --> 00:10:42,320
one direction is making bug detection

326
00:10:39,680 --> 00:10:44,640
automatic as all the bugs reported here

327
00:10:42,320 --> 00:10:46,160
were found manually which was both a

328
00:10:44,640 --> 00:10:48,000
time consuming process

329
00:10:46,160 --> 00:10:50,240
and the process which required knowledge

330
00:10:48,000 --> 00:10:52,720
of the protocol another direction

331
00:10:50,240 --> 00:10:55,120
is that of state fusing dtls clients

332
00:10:52,720 --> 00:10:57,120
since we only tested dtls servers

333
00:10:55,120 --> 00:10:58,320
a final direction would be to analyze

334
00:10:57,120 --> 00:10:59,839
functionalities not

335
00:10:58,320 --> 00:11:02,320
explore by our approach such as

336
00:10:59,839 --> 00:11:03,920
fragmentation such analysis could

337
00:11:02,320 --> 00:11:05,760
potentially leverage the models

338
00:11:03,920 --> 00:11:07,920
generated in this work

339
00:11:05,760 --> 00:11:09,519
with that said i would like to draw the

340
00:11:07,920 --> 00:11:15,839
presentation to a close

341
00:11:09,519 --> 00:11:15,839
and thank you for your attention thanks

