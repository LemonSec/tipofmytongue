1
00:00:09,040 --> 00:00:11,919
hello everyone thanks so much for coming

2
00:00:10,719 --> 00:00:14,399
to my talk

3
00:00:11,920 --> 00:00:16,400
today i'm happy to present big mac a new

4
00:00:14,400 --> 00:00:19,039
security policy analysis framework for

5
00:00:16,400 --> 00:00:21,439
android firmware

6
00:00:19,039 --> 00:00:22,560
the android os today has a lot of attack

7
00:00:21,439 --> 00:00:24,800
surface

8
00:00:22,560 --> 00:00:26,240
whether it's via local applications

9
00:00:24,800 --> 00:00:28,240
websites

10
00:00:26,240 --> 00:00:29,279
over-the-air threats such as via wi-fi

11
00:00:28,240 --> 00:00:31,840
or bluetooth

12
00:00:29,279 --> 00:00:33,600
or even physical attacks via usb there

13
00:00:31,840 --> 00:00:37,040
are a lot of avenues attackers can use

14
00:00:33,600 --> 00:00:37,040
to compromise the system

15
00:00:37,120 --> 00:00:40,800
there have been plenty of high impact

16
00:00:38,480 --> 00:00:42,078
bugs in the past one of which was lib

17
00:00:40,800 --> 00:00:42,800
stage fright which is a remotely

18
00:00:42,079 --> 00:00:47,360
triggerable

19
00:00:42,800 --> 00:00:48,959
mms message a usb privilege escalation

20
00:00:47,360 --> 00:00:50,559
and even a binder use after free

21
00:00:48,960 --> 00:00:52,879
vulnerability which was triggerable from

22
00:00:50,559 --> 00:00:54,879
local application

23
00:00:52,879 --> 00:00:56,320
so android does its best to defend

24
00:00:54,879 --> 00:00:58,239
against these kinds of attacks

25
00:00:56,320 --> 00:00:59,680
using a large combination of security

26
00:00:58,239 --> 00:01:02,078
mechanisms

27
00:00:59,680 --> 00:01:03,120
three of which are linux dac linux

28
00:01:02,079 --> 00:01:06,080
capabilities

29
00:01:03,120 --> 00:01:07,840
and selinux also known as sc android

30
00:01:06,080 --> 00:01:08,720
this is a mandatory access control

31
00:01:07,840 --> 00:01:10,799
policy

32
00:01:08,720 --> 00:01:13,840
and these these three together formulate

33
00:01:10,799 --> 00:01:15,119
much of what android security policy is

34
00:01:13,840 --> 00:01:17,280
there are two others which we won't be

35
00:01:15,119 --> 00:01:18,799
covering in this talk well in fact we'll

36
00:01:17,280 --> 00:01:19,119
be focusing on these first three and how

37
00:01:18,799 --> 00:01:22,000
they

38
00:01:19,119 --> 00:01:22,000
interact together

39
00:01:22,560 --> 00:01:26,080
the security policies for android are

40
00:01:24,799 --> 00:01:29,360
spread out all over the entire

41
00:01:26,080 --> 00:01:31,360
system on labels on files within files

42
00:01:29,360 --> 00:01:33,040
and within processes

43
00:01:31,360 --> 00:01:35,360
the edit process is responsible for

44
00:01:33,040 --> 00:01:38,640
loading the mac policy into the kernel

45
00:01:35,360 --> 00:01:40,720
booting up the system and maintaining

46
00:01:38,640 --> 00:01:42,399
security for properties and other files

47
00:01:40,720 --> 00:01:44,798
on the system

48
00:01:42,399 --> 00:01:47,040
its subprocesses one of which is u event

49
00:01:44,799 --> 00:01:50,240
d assigns dac policies to

50
00:01:47,040 --> 00:01:51,119
slash dev files spawns also spawns

51
00:01:50,240 --> 00:01:52,720
zygotes

52
00:01:51,119 --> 00:01:55,119
which is managing all the applications

53
00:01:52,720 --> 00:01:55,679
on the system which further spawn system

54
00:01:55,119 --> 00:01:58,000
server

55
00:01:55,680 --> 00:01:59,600
which has its own policy files and then

56
00:01:58,000 --> 00:02:00,799
also service manager which manages

57
00:01:59,600 --> 00:02:02,880
native daemons

58
00:02:00,799 --> 00:02:04,320
so all these together are a big part of

59
00:02:02,880 --> 00:02:06,158
android security policy

60
00:02:04,320 --> 00:02:08,318
but as an analyst it's hard to reason

61
00:02:06,159 --> 00:02:09,039
about what the actualized security

62
00:02:08,318 --> 00:02:11,280
policy is

63
00:02:09,038 --> 00:02:13,040
because it's so spread out and across

64
00:02:11,280 --> 00:02:16,080
many different systems

65
00:02:13,040 --> 00:02:17,120
so this is where big mac comes in what

66
00:02:16,080 --> 00:02:19,200
big mac does

67
00:02:17,120 --> 00:02:20,400
is it operates off of android firmware

68
00:02:19,200 --> 00:02:22,560
directly

69
00:02:20,400 --> 00:02:25,120
and it extracts the core file systems

70
00:02:22,560 --> 00:02:26,720
and then the files within them

71
00:02:25,120 --> 00:02:28,720
from here it extracts the labels on

72
00:02:26,720 --> 00:02:31,599
these files these include the dac

73
00:02:28,720 --> 00:02:33,120
cap and mac labels which allows you to

74
00:02:31,599 --> 00:02:34,640
build rebuild the graph

75
00:02:33,120 --> 00:02:38,160
and the interactions between different

76
00:02:34,640 --> 00:02:40,319
processes and objects on the system

77
00:02:38,160 --> 00:02:41,920
this is helped out by the sc linux

78
00:02:40,319 --> 00:02:44,319
policy which is a type

79
00:02:41,920 --> 00:02:46,160
graph which allows us to understand the

80
00:02:44,319 --> 00:02:46,879
allowed relationships between different

81
00:02:46,160 --> 00:02:49,519
parts

82
00:02:46,879 --> 00:02:50,720
and different components on the system

83
00:02:49,519 --> 00:02:52,720
but this is too

84
00:02:50,720 --> 00:02:54,239
uh this is too coarse for us we need to

85
00:02:52,720 --> 00:02:56,239
get more fine grade

86
00:02:54,239 --> 00:02:58,480
so we start to instantiate the graph

87
00:02:56,239 --> 00:03:02,480
into more recognizable objects

88
00:02:58,480 --> 00:03:04,238
like processes files and ipc's

89
00:03:02,480 --> 00:03:05,599
from here we fully instantiate this

90
00:03:04,239 --> 00:03:07,680
policy graph and

91
00:03:05,599 --> 00:03:09,280
inject it into our big mac query engine

92
00:03:07,680 --> 00:03:09,920
which allows us to generate attack

93
00:03:09,280 --> 00:03:11,599
graphs

94
00:03:09,920 --> 00:03:12,799
which allows us to understand the

95
00:03:11,599 --> 00:03:13,760
relationships between different

96
00:03:12,800 --> 00:03:16,400
components

97
00:03:13,760 --> 00:03:17,599
and understand how an attacker would

98
00:03:16,400 --> 00:03:18,959
privilege escalation

99
00:03:17,599 --> 00:03:21,518
privilege escalate between different

100
00:03:18,959 --> 00:03:21,519
components

101
00:03:22,000 --> 00:03:25,760
so building an attack graph is composed

102
00:03:23,840 --> 00:03:27,599
of many different steps

103
00:03:25,760 --> 00:03:30,079
starting with the sc linux policy and

104
00:03:27,599 --> 00:03:32,560
the backing files which we extract it

105
00:03:30,080 --> 00:03:34,640
this allows us to create a subject graph

106
00:03:32,560 --> 00:03:36,799
which is a very coarse-grained graph

107
00:03:34,640 --> 00:03:38,319
linking all the possible subjects in the

108
00:03:36,799 --> 00:03:40,720
system

109
00:03:38,319 --> 00:03:42,640
this gives us a list of subjects but we

110
00:03:40,720 --> 00:03:43,120
quickly translate this into a data flow

111
00:03:42,640 --> 00:03:44,879
graph

112
00:03:43,120 --> 00:03:46,400
which instead of having a very

113
00:03:44,879 --> 00:03:47,599
fine-grained understanding of the edges

114
00:03:46,400 --> 00:03:49,599
between subjects

115
00:03:47,599 --> 00:03:51,599
boils it down to a simple read-write

116
00:03:49,599 --> 00:03:54,720
relationship which matches our privilege

117
00:03:51,599 --> 00:03:56,480
escalation model pretty well

118
00:03:54,720 --> 00:03:58,480
this also then gives us a more

119
00:03:56,480 --> 00:04:00,480
fine-grained list of objects which are

120
00:03:58,480 --> 00:04:01,439
not just subjects we can then start to

121
00:04:00,480 --> 00:04:04,959
differentiate these

122
00:04:01,439 --> 00:04:05,920
these types in parallel we recover a

123
00:04:04,959 --> 00:04:08,000
process tree

124
00:04:05,920 --> 00:04:09,439
which has a hierarchy of all possible

125
00:04:08,000 --> 00:04:11,200
processes in the system

126
00:04:09,439 --> 00:04:12,879
and this gives us a list of all possible

127
00:04:11,200 --> 00:04:14,319
processes

128
00:04:12,879 --> 00:04:16,000
in parallel with this we then flatten

129
00:04:14,319 --> 00:04:18,000
the data flow graph even further

130
00:04:16,000 --> 00:04:20,160
and finally overlaid the process tree

131
00:04:18,000 --> 00:04:24,320
and flat data flow graph together

132
00:04:20,160 --> 00:04:26,160
into a fully instantiated attack graph

133
00:04:24,320 --> 00:04:27,680
but there's an issue because we're

134
00:04:26,160 --> 00:04:28,880
starting from static firmware which

135
00:04:27,680 --> 00:04:30,720
enables us to

136
00:04:28,880 --> 00:04:32,400
have a highly scalable approach not

137
00:04:30,720 --> 00:04:35,120
requiring physical devices

138
00:04:32,400 --> 00:04:36,239
or even the ability to root a phone

139
00:04:35,120 --> 00:04:37,840
there's a main problem

140
00:04:36,240 --> 00:04:39,840
we don't know what processes would be

141
00:04:37,840 --> 00:04:41,198
running on the firmware

142
00:04:39,840 --> 00:04:43,039
and we need to know this to be able to

143
00:04:41,199 --> 00:04:43,919
understand how the system policy would

144
00:04:43,040 --> 00:04:45,840
apply to them

145
00:04:43,919 --> 00:04:47,280
this really means we need to know the

146
00:04:45,840 --> 00:04:48,638
processes that would be running

147
00:04:47,280 --> 00:04:51,039
and then their permissions so their

148
00:04:48,639 --> 00:04:53,040
credentials at runtime

149
00:04:51,040 --> 00:04:54,720
so can we recover these processes just

150
00:04:53,040 --> 00:04:57,120
from firmware alone

151
00:04:54,720 --> 00:04:58,560
well we can and we do that through a

152
00:04:57,120 --> 00:05:01,520
partial emulation

153
00:04:58,560 --> 00:05:03,600
simulation of android's boot luckily

154
00:05:01,520 --> 00:05:05,599
android's boot process is well specified

155
00:05:03,600 --> 00:05:08,800
by the platform and starts from these

156
00:05:05,600 --> 00:05:11,039
nrc files which we talked about earlier

157
00:05:08,800 --> 00:05:12,560
these allow for credentials to be

158
00:05:11,039 --> 00:05:13,919
explicitly assigned to services during

159
00:05:12,560 --> 00:05:15,520
the boot process

160
00:05:13,919 --> 00:05:17,359
and even boot time changes to the file

161
00:05:15,520 --> 00:05:20,080
system such as new files which wouldn't

162
00:05:17,360 --> 00:05:22,160
exist in the static firmware alone

163
00:05:20,080 --> 00:05:23,680
and without incorporating or simulating

164
00:05:22,160 --> 00:05:24,000
this android boot process we wouldn't

165
00:05:23,680 --> 00:05:26,960
know

166
00:05:24,000 --> 00:05:27,840
what processes would possibly be started

167
00:05:26,960 --> 00:05:30,080
during a

168
00:05:27,840 --> 00:05:31,758
if as if they were to be on a real phone

169
00:05:30,080 --> 00:05:34,639
and our cross vendor analysis wouldn't

170
00:05:31,759 --> 00:05:37,600
really scale anymore

171
00:05:34,639 --> 00:05:38,160
so how do we evaluate big mac well it's

172
00:05:37,600 --> 00:05:40,240
composed

173
00:05:38,160 --> 00:05:41,199
of two parts the ground truth evaluation

174
00:05:40,240 --> 00:05:43,199
to make sure that we're

175
00:05:41,199 --> 00:05:44,960
doing an accurate job of doing this

176
00:05:43,199 --> 00:05:46,960
recovery and the second is actually

177
00:05:44,960 --> 00:05:49,599
using big mac to do some case studies

178
00:05:46,960 --> 00:05:50,080
on the graph itself so for the ground

179
00:05:49,600 --> 00:05:51,680
truth

180
00:05:50,080 --> 00:05:53,520
we first look at all the files that we

181
00:05:51,680 --> 00:05:55,039
recovered from both physical devices

182
00:05:53,520 --> 00:05:56,719
which we did have root on

183
00:05:55,039 --> 00:05:58,080
and then the corresponding firmware

184
00:05:56,720 --> 00:06:00,880
images which we got

185
00:05:58,080 --> 00:06:02,400
off online sources we then compared all

186
00:06:00,880 --> 00:06:04,159
the files that we got

187
00:06:02,400 --> 00:06:06,239
and then determined which ones we got

188
00:06:04,160 --> 00:06:07,360
right and in this case we were able to

189
00:06:06,240 --> 00:06:08,800
get over 98

190
00:06:07,360 --> 00:06:11,039
of the files right just from static

191
00:06:08,800 --> 00:06:12,080
firmware alone and this is really good

192
00:06:11,039 --> 00:06:13,759
because it means that

193
00:06:12,080 --> 00:06:15,840
not only is big mac able to use just

194
00:06:13,759 --> 00:06:16,960
firmware alone to have a a good accurate

195
00:06:15,840 --> 00:06:18,840
representation

196
00:06:16,960 --> 00:06:20,000
it means we can scale beyond physical

197
00:06:18,840 --> 00:06:22,000
devices

198
00:06:20,000 --> 00:06:23,520
and even beyond devices which you may

199
00:06:22,000 --> 00:06:27,039
not be able to get root on to do this

200
00:06:23,520 --> 00:06:28,719
ground truth evaluation at all

201
00:06:27,039 --> 00:06:30,000
the second part of the ground truth is

202
00:06:28,720 --> 00:06:31,280
actually looking at the processes that

203
00:06:30,000 --> 00:06:32,880
we recovered

204
00:06:31,280 --> 00:06:35,039
on the left is processes recovered by

205
00:06:32,880 --> 00:06:36,479
big mac and the split

206
00:06:35,039 --> 00:06:38,400
and on the right is the actual device

207
00:06:36,479 --> 00:06:40,639
processes big mac

208
00:06:38,400 --> 00:06:41,520
is prime primarily focused on native

209
00:06:40,639 --> 00:06:43,280
daemons

210
00:06:41,520 --> 00:06:45,198
so there's a lot of missing application

211
00:06:43,280 --> 00:06:46,080
processes but our primary focus is on

212
00:06:45,199 --> 00:06:48,319
native daemons

213
00:06:46,080 --> 00:06:51,198
and the three mac dac and cap policies

214
00:06:48,319 --> 00:06:52,800
which mostly apply to them

215
00:06:51,199 --> 00:06:54,720
but in this case we're able to achieve

216
00:06:52,800 --> 00:06:58,720
over 75 percent accuracy

217
00:06:54,720 --> 00:06:58,720
just from this boot time simulation

218
00:06:59,039 --> 00:07:02,960
so actually using big mac to actually do

219
00:07:01,280 --> 00:07:04,719
so we developed a query interface in

220
00:07:02,960 --> 00:07:05,198
prolog which allows us to traverse the

221
00:07:04,720 --> 00:07:07,840
graph

222
00:07:05,199 --> 00:07:09,599
with a custom graph traversal algorithm

223
00:07:07,840 --> 00:07:12,479
mainly taking into account

224
00:07:09,599 --> 00:07:13,120
our four or three security policies and

225
00:07:12,479 --> 00:07:15,840
a fourth

226
00:07:13,120 --> 00:07:17,919
called the external attack surface so

227
00:07:15,840 --> 00:07:20,159
these four policies on the left here

228
00:07:17,919 --> 00:07:21,758
are different um starting with the mac

229
00:07:20,160 --> 00:07:24,479
policy which is then

230
00:07:21,759 --> 00:07:25,039
applied uh the dac policy is applied to

231
00:07:24,479 --> 00:07:26,639
that

232
00:07:25,039 --> 00:07:28,560
and then followed by the cap policy

233
00:07:26,639 --> 00:07:30,880
which is applied to those two

234
00:07:28,560 --> 00:07:32,639
so each uh application of a different

235
00:07:30,880 --> 00:07:33,759
security policy further refines the

236
00:07:32,639 --> 00:07:35,039
paths returned

237
00:07:33,759 --> 00:07:37,039
and allows you to get a more

238
00:07:35,039 --> 00:07:38,719
fine-grained understanding of the

239
00:07:37,039 --> 00:07:40,560
relationships between starting nodes and

240
00:07:38,720 --> 00:07:41,039
target nodes and then the paths between

241
00:07:40,560 --> 00:07:43,039
them

242
00:07:41,039 --> 00:07:44,878
which helps you get an idea of what

243
00:07:43,039 --> 00:07:45,599
things can talk to each other on a real

244
00:07:44,879 --> 00:07:47,919
system

245
00:07:45,599 --> 00:07:49,599
possibly indicating a possible

246
00:07:47,919 --> 00:07:53,440
privileged escalation

247
00:07:49,599 --> 00:07:55,759
avenue as a case study

248
00:07:53,440 --> 00:07:57,680
we used our query interface on a 1.3

249
00:07:55,759 --> 00:08:00,720
million and around 2 million

250
00:07:57,680 --> 00:08:04,639
edge graph for samsung s8 plus image and

251
00:08:00,720 --> 00:08:04,639
lg g7 image respectively

252
00:08:04,960 --> 00:08:08,799
one thing i'd like to highlight is that

253
00:08:06,879 --> 00:08:10,080
this layered path reduction that we get

254
00:08:08,800 --> 00:08:12,720
from big mac

255
00:08:10,080 --> 00:08:14,719
is very important to our approach by

256
00:08:12,720 --> 00:08:16,400
just using the mac policy alone

257
00:08:14,720 --> 00:08:18,319
if we're determining the path between

258
00:08:16,400 --> 00:08:21,758
untrusted app and media server

259
00:08:18,319 --> 00:08:24,720
we are returned over 102 000 paths

260
00:08:21,759 --> 00:08:26,560
with length 4. but once we apply the dac

261
00:08:24,720 --> 00:08:30,080
policy this quickly filters

262
00:08:26,560 --> 00:08:31,520
down the number of pass return by 20x so

263
00:08:30,080 --> 00:08:33,679
what this is really demonstrating is

264
00:08:31,520 --> 00:08:35,519
that work that is only relying on the

265
00:08:33,679 --> 00:08:36,239
mac policy to determine if something is

266
00:08:35,519 --> 00:08:39,279
secure

267
00:08:36,240 --> 00:08:42,240
or well formulated policy wise is

268
00:08:39,279 --> 00:08:43,760
not going to be very uh accurate it's

269
00:08:42,240 --> 00:08:45,440
going to be over approximate

270
00:08:43,760 --> 00:08:47,040
and in fact we we really demonstrate

271
00:08:45,440 --> 00:08:49,040
here that you need the mac dac

272
00:08:47,040 --> 00:08:52,480
and even further security policies to

273
00:08:49,040 --> 00:08:52,480
really be able to do this kind of work

274
00:08:52,640 --> 00:08:56,480
one cool thing we can do with big mac is

275
00:08:54,240 --> 00:08:59,279
understand the process strength

276
00:08:56,480 --> 00:09:00,240
so for the two images we analyze on the

277
00:08:59,279 --> 00:09:02,000
right are the top

278
00:09:00,240 --> 00:09:04,080
three processes and their strength which

279
00:09:02,000 --> 00:09:06,399
means how many things they can write to

280
00:09:04,080 --> 00:09:08,240
this includes files and ipc's pretty

281
00:09:06,399 --> 00:09:10,080
much means how much right strength they

282
00:09:08,240 --> 00:09:12,000
have on the system

283
00:09:10,080 --> 00:09:14,000
and what this really highlights is that

284
00:09:12,000 --> 00:09:16,880
a system server which is

285
00:09:14,000 --> 00:09:17,200
uh largely interacting with applications

286
00:09:16,880 --> 00:09:19,760
is

287
00:09:17,200 --> 00:09:21,600
very powerful in itself so if there were

288
00:09:19,760 --> 00:09:22,720
to be any bug in system server which is

289
00:09:21,600 --> 00:09:24,560
a monolith

290
00:09:22,720 --> 00:09:26,320
it could be compromised and be able to

291
00:09:24,560 --> 00:09:29,920
use the compromised further parts of the

292
00:09:26,320 --> 00:09:31,760
system which may implicitly trust it

293
00:09:29,920 --> 00:09:33,599
so our recommendation based off this is

294
00:09:31,760 --> 00:09:35,839
that system servers should be refactored

295
00:09:33,600 --> 00:09:37,600
out of a model of form and take an

296
00:09:35,839 --> 00:09:39,279
approach that was uh done

297
00:09:37,600 --> 00:09:41,440
to media server which actually broke

298
00:09:39,279 --> 00:09:44,959
that up into separate processes as well

299
00:09:41,440 --> 00:09:44,959
because it's almost too powerful

300
00:09:45,519 --> 00:09:48,240
another thing we did with big mac is we

301
00:09:46,959 --> 00:09:49,680
were able to analyze a privilege

302
00:09:48,240 --> 00:09:52,880
escalation

303
00:09:49,680 --> 00:09:55,599
so this privilege escalation was

304
00:09:52,880 --> 00:09:56,640
allowed an attacker to compromise the

305
00:09:55,600 --> 00:09:58,800
volde process

306
00:09:56,640 --> 00:10:00,560
allowing to mount arbitrary files of the

307
00:09:58,800 --> 00:10:02,079
system effectively compromising it

308
00:10:00,560 --> 00:10:04,880
completely because volde

309
00:10:02,079 --> 00:10:05,279
is within the tcb of the android system

310
00:10:04,880 --> 00:10:07,200
and

311
00:10:05,279 --> 00:10:08,880
the attacker was able to use zygote as a

312
00:10:07,200 --> 00:10:11,600
starting node and then

313
00:10:08,880 --> 00:10:13,040
use this uh valde p trace edge to

314
00:10:11,600 --> 00:10:15,120
actually compromise valde

315
00:10:13,040 --> 00:10:16,319
by crashing itself and and transitioning

316
00:10:15,120 --> 00:10:19,839
to the crash stump

317
00:10:16,320 --> 00:10:22,480
um label process

318
00:10:19,839 --> 00:10:23,120
so this was well known we used big mac

319
00:10:22,480 --> 00:10:24,720
to find this

320
00:10:23,120 --> 00:10:26,959
and additionally we used big mac with

321
00:10:24,720 --> 00:10:29,360
the second query to actually determine

322
00:10:26,959 --> 00:10:31,119
that not only was zygote a good starting

323
00:10:29,360 --> 00:10:32,240
node but there were 22 other good

324
00:10:31,120 --> 00:10:34,240
starting nodes that

325
00:10:32,240 --> 00:10:36,640
could have been compromised instead to

326
00:10:34,240 --> 00:10:38,399
allow for the same privileged escalation

327
00:10:36,640 --> 00:10:41,120
so big mac is not only able to find

328
00:10:38,399 --> 00:10:42,959
these unintended edges between processes

329
00:10:41,120 --> 00:10:44,320
it's able to triage existing

330
00:10:42,959 --> 00:10:46,719
vulnerabilities and help

331
00:10:44,320 --> 00:10:50,320
understand help the policy writers

332
00:10:46,720 --> 00:10:50,320
understand the true impact of them

333
00:10:50,560 --> 00:10:54,560
so in conclusion we created big mac one

334
00:10:52,800 --> 00:10:56,399
of the most fine grain policy analysis

335
00:10:54,560 --> 00:10:58,079
frameworks for android devices today

336
00:10:56,399 --> 00:11:00,320
and we're covering a system security

337
00:10:58,079 --> 00:11:02,479
state from static firmware alone

338
00:11:00,320 --> 00:11:04,079
big mac surpasses previous mac only

339
00:11:02,480 --> 00:11:05,920
policy analysis approaches

340
00:11:04,079 --> 00:11:07,279
through its layered path reduction which

341
00:11:05,920 --> 00:11:09,120
improves analysis results

342
00:11:07,279 --> 00:11:10,880
and allows us to discard impossible

343
00:11:09,120 --> 00:11:13,680
runtime paths

344
00:11:10,880 --> 00:11:15,760
and we highlight big mass ability to

345
00:11:13,680 --> 00:11:17,199
investigate privileged escalation pass

346
00:11:15,760 --> 00:11:19,040
and also examine the strength of

347
00:11:17,200 --> 00:11:20,800
processes along with other things which

348
00:11:19,040 --> 00:11:23,199
you can read in our paper

349
00:11:20,800 --> 00:11:29,839
we have the source code below and uh

350
00:11:23,200 --> 00:11:29,839
thanks so much for attending the talk

351
00:11:34,720 --> 00:11:36,800
you

