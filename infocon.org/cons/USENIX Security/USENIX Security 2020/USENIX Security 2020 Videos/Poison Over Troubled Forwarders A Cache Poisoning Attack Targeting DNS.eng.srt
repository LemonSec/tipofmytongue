1
00:00:09,360 --> 00:00:13,120
hello everyone and

2
00:00:10,639 --> 00:00:13,678
thanks for joining us in this paper we

3
00:00:13,120 --> 00:00:16,239
present

4
00:00:13,679 --> 00:00:17,920
a cash poisoning attack targeting dns

5
00:00:16,239 --> 00:00:19,520
forwarding devices

6
00:00:17,920 --> 00:00:21,359
we find that several folder

7
00:00:19,520 --> 00:00:24,080
implementations are vulnerable

8
00:00:21,359 --> 00:00:24,800
and call for mitigation our findings

9
00:00:24,080 --> 00:00:27,198
also raise

10
00:00:24,800 --> 00:00:29,359
more attention to dns forwarders which

11
00:00:27,199 --> 00:00:31,840
could be a soft spot in the dns

12
00:00:29,359 --> 00:00:31,840
infrastructure

13
00:00:33,200 --> 00:00:36,880
today's dns infrastructure has been far

14
00:00:35,600 --> 00:00:40,000
more complex than

15
00:00:36,880 --> 00:00:40,800
its original design dns forwarders are

16
00:00:40,000 --> 00:00:43,280
devices

17
00:00:40,800 --> 00:00:44,640
standing in between stub and recursive

18
00:00:43,280 --> 00:00:47,360
resolvers

19
00:00:44,640 --> 00:00:48,559
a typical dns folder takes queries from

20
00:00:47,360 --> 00:00:50,879
dns clients

21
00:00:48,559 --> 00:00:51,919
and instead of performing lookups it

22
00:00:50,879 --> 00:00:54,239
relies on an

23
00:00:51,920 --> 00:00:56,079
upstream recursive resolver to handle

24
00:00:54,239 --> 00:00:58,718
the resolution

25
00:00:56,079 --> 00:01:00,960
dns folders can serve as convenient

26
00:00:58,719 --> 00:01:01,840
default dns servers with caching

27
00:01:00,960 --> 00:01:04,239
abilities

28
00:01:01,840 --> 00:01:05,360
and are widely deployed on residential

29
00:01:04,239 --> 00:01:08,479
network devices

30
00:01:05,360 --> 00:01:09,200
such as home routers despite of their

31
00:01:08,479 --> 00:01:12,320
prevalence

32
00:01:09,200 --> 00:01:14,000
there is still a lack of dns forward or

33
00:01:12,320 --> 00:01:16,559
implementation guidelines

34
00:01:14,000 --> 00:01:19,439
and their unique position is exploited

35
00:01:16,560 --> 00:01:19,439
in our attack

36
00:01:20,880 --> 00:01:25,600
traditional dns cache poisoning attacks

37
00:01:23,280 --> 00:01:28,159
target recursive resolvers

38
00:01:25,600 --> 00:01:29,439
an attacker forges dns packets with

39
00:01:28,159 --> 00:01:31,759
matching metadata

40
00:01:29,439 --> 00:01:33,279
including ephemeral ports and dns

41
00:01:31,759 --> 00:01:35,840
transaction ids

42
00:01:33,280 --> 00:01:37,360
and tricks resolvers into accepting the

43
00:01:35,840 --> 00:01:39,840
rogue responses

44
00:01:37,360 --> 00:01:41,600
however after the adoption of

45
00:01:39,840 --> 00:01:43,520
randomization defenses

46
00:01:41,600 --> 00:01:46,640
it has been more difficult for the

47
00:01:43,520 --> 00:01:46,640
attacks to succeed

48
00:01:47,840 --> 00:01:52,479
we present a cash poisoning attack which

49
00:01:50,240 --> 00:01:54,720
targets dns forwarders

50
00:01:52,479 --> 00:01:56,000
the attack is based on dns response

51
00:01:54,720 --> 00:01:58,479
fragmentation

52
00:01:56,000 --> 00:01:59,280
and attackers can use their controlled

53
00:01:58,479 --> 00:02:03,119
domain names

54
00:01:59,280 --> 00:02:03,119
to poison any victim domain

55
00:02:03,280 --> 00:02:06,719
in our threat model the attacker and dns

56
00:02:06,079 --> 00:02:09,840
forwarder

57
00:02:06,719 --> 00:02:11,280
locate in the same local network the

58
00:02:09,840 --> 00:02:13,440
setting can occur in an

59
00:02:11,280 --> 00:02:15,440
open wifi network such as those of

60
00:02:13,440 --> 00:02:18,640
coffee shops and airports

61
00:02:15,440 --> 00:02:20,480
or an enterprise network with guests

62
00:02:18,640 --> 00:02:23,040
on the other side the attacker

63
00:02:20,480 --> 00:02:25,440
establishes a controlled authoritative

64
00:02:23,040 --> 00:02:25,440
server

65
00:02:25,760 --> 00:02:28,959
and the key insight which makes the

66
00:02:27,599 --> 00:02:31,760
attack possible

67
00:02:28,959 --> 00:02:32,800
is that dns forwarders typically rely on

68
00:02:31,760 --> 00:02:34,840
the integrity

69
00:02:32,800 --> 00:02:37,280
and security checks of upstream

70
00:02:34,840 --> 00:02:39,519
resolvers and hence do not perform

71
00:02:37,280 --> 00:02:41,040
additional checks on the responses they

72
00:02:39,519 --> 00:02:42,800
receive

73
00:02:41,040 --> 00:02:45,359
while the upstream resolver can be

74
00:02:42,800 --> 00:02:47,040
immune the attacker has a chance to

75
00:02:45,360 --> 00:02:51,840
tamper with responses

76
00:02:47,040 --> 00:02:51,840
that are sent back to the dns forwarder

77
00:02:52,160 --> 00:02:56,079
at the controlled authoritative server

78
00:02:54,319 --> 00:02:59,839
the attacker configures an

79
00:02:56,080 --> 00:03:01,840
oversized dns response the response uses

80
00:02:59,840 --> 00:03:04,800
a chain of cname records

81
00:03:01,840 --> 00:03:06,360
followed by a final a record and is

82
00:03:04,800 --> 00:03:09,440
larger than

83
00:03:06,360 --> 00:03:13,040
1500 bytes this ethernet

84
00:03:09,440 --> 00:03:14,480
mtu and as a result the response will

85
00:03:13,040 --> 00:03:18,239
always be fragmented

86
00:03:14,480 --> 00:03:21,040
during transfer

87
00:03:18,239 --> 00:03:22,879
to poison the cache of dns forwarders

88
00:03:21,040 --> 00:03:25,280
the attacker will attempt to

89
00:03:22,879 --> 00:03:26,399
tamper with the second fragment of the

90
00:03:25,280 --> 00:03:28,640
response

91
00:03:26,400 --> 00:03:29,680
the spoofed second fragment does not

92
00:03:28,640 --> 00:03:32,480
have udp

93
00:03:29,680 --> 00:03:33,760
or dns headers so there is no need for

94
00:03:32,480 --> 00:03:35,920
the attacker to guess

95
00:03:33,760 --> 00:03:39,040
ephemeral port numbers or dns

96
00:03:35,920 --> 00:03:39,040
transaction ids

97
00:03:39,599 --> 00:03:43,679
and using cname it is possible to point

98
00:03:42,400 --> 00:03:46,959
the attacker's domain

99
00:03:43,680 --> 00:03:49,519
to any victim domain the attacker's goal

100
00:03:46,959 --> 00:03:50,239
is for the dns forwarder to cash the

101
00:03:49,519 --> 00:03:52,480
last a

102
00:03:50,239 --> 00:03:53,680
record separately which points the

103
00:03:52,480 --> 00:03:56,959
victim domain to

104
00:03:53,680 --> 00:03:59,439
a rogue address the forged response will

105
00:03:56,959 --> 00:04:01,439
be rejected by a recursive resolver

106
00:03:59,439 --> 00:04:03,519
because the tampered cname chain will

107
00:04:01,439 --> 00:04:06,560
not pass verification

108
00:04:03,519 --> 00:04:08,799
however as dns forwarders lack such

109
00:04:06,560 --> 00:04:11,120
checks they are vulnerable to this

110
00:04:08,799 --> 00:04:11,120
attack

111
00:04:13,439 --> 00:04:17,120
and here is the entire flow of the cash

112
00:04:16,160 --> 00:04:20,239
poisoning attack

113
00:04:17,120 --> 00:04:21,440
targeting dns forwarders the attacker

114
00:04:20,238 --> 00:04:24,080
first crafts a

115
00:04:21,440 --> 00:04:25,120
spoofed second fragment which contains

116
00:04:24,080 --> 00:04:27,919
rogue records

117
00:04:25,120 --> 00:04:30,400
of the victim domain in this fragment

118
00:04:27,919 --> 00:04:33,599
the only field that needs prediction

119
00:04:30,400 --> 00:04:35,120
is the 16-bit ipid of the upspring

120
00:04:33,600 --> 00:04:37,520
resolver

121
00:04:35,120 --> 00:04:40,720
by measurements we find that a number of

122
00:04:37,520 --> 00:04:43,520
open dns servers and public dns services

123
00:04:40,720 --> 00:04:44,240
use global or hash based ipid

124
00:04:43,520 --> 00:04:47,359
assignments

125
00:04:44,240 --> 00:04:48,080
which are predictable the fragment is

126
00:04:47,360 --> 00:04:50,800
then sent

127
00:04:48,080 --> 00:04:54,080
to the dns folder and will be cached to

128
00:04:50,800 --> 00:04:54,080
wait for reassembly

129
00:04:55,199 --> 00:04:59,759
the attacker then issues a dns query of

130
00:04:57,759 --> 00:05:02,240
the controlled domain name

131
00:04:59,759 --> 00:05:03,759
the dns forwarder passes the dns query

132
00:05:02,240 --> 00:05:05,840
to its upstream

133
00:05:03,759 --> 00:05:06,880
and the recursive resolver will follow

134
00:05:05,840 --> 00:05:09,359
the aliases

135
00:05:06,880 --> 00:05:12,719
and fetch the entire c name chain from

136
00:05:09,360 --> 00:05:12,720
the authoritative server

137
00:05:14,080 --> 00:05:17,199
the oversized dns response is then

138
00:05:16,400 --> 00:05:19,919
aggregated

139
00:05:17,199 --> 00:05:20,320
by the upstream recursive resolver and

140
00:05:19,919 --> 00:05:22,960
sent

141
00:05:20,320 --> 00:05:25,840
back to the dns forwarder because the

142
00:05:22,960 --> 00:05:28,000
response is larger than the ethernet mtu

143
00:05:25,840 --> 00:05:30,479
it should always be fragmented on its

144
00:05:28,000 --> 00:05:30,479
way back

145
00:05:31,680 --> 00:05:35,680
and finally when the response arrives at

146
00:05:34,240 --> 00:05:37,840
the dns folder

147
00:05:35,680 --> 00:05:39,759
the legitimate first fragment will be

148
00:05:37,840 --> 00:05:41,840
reassembled with the spoofed

149
00:05:39,759 --> 00:05:45,600
second fragment that has been cached

150
00:05:41,840 --> 00:05:45,599
because their ip ids match

151
00:05:46,400 --> 00:05:49,520
and as we discussed earlier because dns

152
00:05:48,800 --> 00:05:51,919
folders

153
00:05:49,520 --> 00:05:53,758
lack security checks they will not

154
00:05:51,919 --> 00:05:54,880
notice that the response has been

155
00:05:53,759 --> 00:05:58,160
tampered with

156
00:05:54,880 --> 00:06:00,560
and will accept the rogue dns answers

157
00:05:58,160 --> 00:06:02,479
if the victim dns record is cached

158
00:06:00,560 --> 00:06:04,400
individually by the voter

159
00:06:02,479 --> 00:06:06,080
next time when the victim domain is

160
00:06:04,400 --> 00:06:08,960
queried the rogue address

161
00:06:06,080 --> 00:06:08,960
will be returned

162
00:06:11,600 --> 00:06:16,080
from a threat model we conclude several

163
00:06:13,840 --> 00:06:16,799
conditions that a dns folder should

164
00:06:16,080 --> 00:06:19,758
satisfy

165
00:06:16,800 --> 00:06:21,919
in a successful attack first the

166
00:06:19,759 --> 00:06:22,479
attacker only tampers with the last

167
00:06:21,919 --> 00:06:25,840
record

168
00:06:22,479 --> 00:06:27,440
of the oversized response for subsequent

169
00:06:25,840 --> 00:06:29,919
queries to hit the cache

170
00:06:27,440 --> 00:06:30,800
the victim dns record should be cached

171
00:06:29,919 --> 00:06:33,039
separately

172
00:06:30,800 --> 00:06:35,039
instead of the entire response being

173
00:06:33,039 --> 00:06:38,318
cashed as a whole

174
00:06:35,039 --> 00:06:40,960
in fact the dns standards do not specify

175
00:06:38,319 --> 00:06:42,000
which caching behavior should be adopted

176
00:06:40,960 --> 00:06:44,318
but through tests

177
00:06:42,000 --> 00:06:45,120
we find that most implementations cache

178
00:06:44,319 --> 00:06:48,720
the response

179
00:06:45,120 --> 00:06:51,440
now by record for better performance

180
00:06:48,720 --> 00:06:52,440
and second transferring dns messages

181
00:06:51,440 --> 00:06:55,680
larger than

182
00:06:52,440 --> 00:06:59,680
512 bytes requires support of

183
00:06:55,680 --> 00:07:02,160
extension mechanisms for dns or edns

184
00:06:59,680 --> 00:07:02,880
and that the folder does not actively

185
00:07:02,160 --> 00:07:06,319
truncate

186
00:07:02,880 --> 00:07:06,880
oversized packets as an important dns

187
00:07:06,319 --> 00:07:09,919
feature

188
00:07:06,880 --> 00:07:10,719
we expect that edns will be increasingly

189
00:07:09,919 --> 00:07:14,400
supported

190
00:07:10,720 --> 00:07:17,280
by software vendors and dns operators

191
00:07:14,400 --> 00:07:18,638
and finally the dns folder does not

192
00:07:17,280 --> 00:07:21,679
verify the response

193
00:07:18,639 --> 00:07:23,840
such as by requering the victim domain

194
00:07:21,680 --> 00:07:24,880
and this is also the case for a number

195
00:07:23,840 --> 00:07:27,758
of our tested

196
00:07:24,880 --> 00:07:27,759
implementations

197
00:07:29,680 --> 00:07:34,560
we examine the attack against several

198
00:07:31,919 --> 00:07:37,280
dns folder implementations

199
00:07:34,560 --> 00:07:38,560
we start from 16 home router models from

200
00:07:37,280 --> 00:07:40,638
16 vendors

201
00:07:38,560 --> 00:07:41,919
and all of them have dns forwarding

202
00:07:40,639 --> 00:07:43,599
features

203
00:07:41,919 --> 00:07:46,080
by real attacks in a controlled

204
00:07:43,599 --> 00:07:48,719
environment eight models are found

205
00:07:46,080 --> 00:07:52,159
vulnerable and we successfully inject

206
00:07:48,720 --> 00:07:55,039
rogue records into the forwarder's cache

207
00:07:52,160 --> 00:07:57,680
we also test seven kinds of popular dns

208
00:07:55,039 --> 00:07:58,479
software which can be configured as dns

209
00:07:57,680 --> 00:08:02,560
folders

210
00:07:58,479 --> 00:08:02,560
and two of them are found vulnerable

211
00:08:03,759 --> 00:08:08,800
we have been contacting the affected

212
00:08:05,680 --> 00:08:10,800
vendors and have received some feedbacks

213
00:08:08,800 --> 00:08:12,080
two home router vendors have released

214
00:08:10,800 --> 00:08:15,759
firmware patches

215
00:08:12,080 --> 00:08:15,758
in order to mitigate the attack

216
00:08:16,639 --> 00:08:20,720
and also we perform a nationwide

217
00:08:18,879 --> 00:08:23,199
measurement study to estimate the

218
00:08:20,720 --> 00:08:26,080
population of clients that are using

219
00:08:23,199 --> 00:08:27,680
the vulnerable dns forwarders by

220
00:08:26,080 --> 00:08:28,400
collaborating with our industrial

221
00:08:27,680 --> 00:08:30,800
partner

222
00:08:28,400 --> 00:08:31,758
we perform checks on 20 000 mobile

223
00:08:30,800 --> 00:08:34,719
clients which

224
00:08:31,759 --> 00:08:36,479
are mostly located in china due to

225
00:08:34,719 --> 00:08:39,039
ethical reasons we do not

226
00:08:36,479 --> 00:08:40,159
launch real attacks against the devices

227
00:08:39,039 --> 00:08:42,080
but only check

228
00:08:40,159 --> 00:08:44,640
whether the attack conditions are

229
00:08:42,080 --> 00:08:47,200
satisfied by the dns forwarders

230
00:08:44,640 --> 00:08:47,839
as a result we find that around six

231
00:08:47,200 --> 00:08:50,240
percent

232
00:08:47,839 --> 00:08:55,839
of our collected clients are under risk

233
00:08:50,240 --> 00:08:55,839
of this cash poisoning attack

234
00:08:56,240 --> 00:09:00,080
and finally some discussions to mitigate

235
00:08:59,440 --> 00:09:02,959
the attack

236
00:09:00,080 --> 00:09:04,720
dns forwarders can add additional checks

237
00:09:02,959 --> 00:09:07,599
on responses they receive

238
00:09:04,720 --> 00:09:08,480
such as enabling dns sec or perform

239
00:09:07,600 --> 00:09:10,880
re-query

240
00:09:08,480 --> 00:09:11,839
of the cname chain and the victim domain

241
00:09:10,880 --> 00:09:14,720
name

242
00:09:11,839 --> 00:09:15,600
however this solution brings performance

243
00:09:14,720 --> 00:09:17,440
overhead

244
00:09:15,600 --> 00:09:19,279
and defeats the purpose of dns

245
00:09:17,440 --> 00:09:22,320
forwarders as they are now

246
00:09:19,279 --> 00:09:22,959
acting in the recursive mode another

247
00:09:22,320 --> 00:09:26,240
solution

248
00:09:22,959 --> 00:09:29,359
is to cache the dns responses as a whole

249
00:09:26,240 --> 00:09:31,519
rather than individual dns records

250
00:09:29,360 --> 00:09:32,880
it breaks one of the attack conditions

251
00:09:31,519 --> 00:09:36,000
and we recommend it

252
00:09:32,880 --> 00:09:38,320
as the short-term solution our study

253
00:09:36,000 --> 00:09:39,600
also shows that the definition and role

254
00:09:38,320 --> 00:09:42,240
of dns forwarders

255
00:09:39,600 --> 00:09:43,279
have not been clear yet resulting in

256
00:09:42,240 --> 00:09:46,000
diversified

257
00:09:43,279 --> 00:09:46,560
implementations and as a result we

258
00:09:46,000 --> 00:09:48,640
believe

259
00:09:46,560 --> 00:09:50,160
more specific guidelines for dns

260
00:09:48,640 --> 00:09:54,080
forwarders are needed

261
00:09:50,160 --> 00:10:04,160
in the future and that is my talk today

262
00:09:54,080 --> 00:10:06,240
thank you very much

263
00:10:04,160 --> 00:10:06,240
you

