1
00:00:09,040 --> 00:00:12,559
good morning everyone i'm andres amato

2
00:00:10,880 --> 00:00:13,920
and i'm a phd student at the aircom

3
00:00:12,559 --> 00:00:15,599
institute today i'm going to present you

4
00:00:13,920 --> 00:00:17,039
the work i did with my advisor in front

5
00:00:15,599 --> 00:00:18,000
antonio networ security policy on

6
00:00:17,039 --> 00:00:20,400
android

7
00:00:18,000 --> 00:00:21,680
what is network security policy metro

8
00:00:20,400 --> 00:00:23,279
security policy is a new defense

9
00:00:21,680 --> 00:00:24,080
mechanism that allows a developer to

10
00:00:23,279 --> 00:00:25,840
configure

11
00:00:24,080 --> 00:00:27,278
through an xml configuration file all

12
00:00:25,840 --> 00:00:28,880
the network security settings of an

13
00:00:27,279 --> 00:00:31,359
application without actually introducing

14
00:00:28,880 --> 00:00:32,879
and modifying any application code

15
00:00:31,359 --> 00:00:34,640
thanks to the network security policy it

16
00:00:32,880 --> 00:00:36,559
is now possible to completely forbid the

17
00:00:34,640 --> 00:00:38,640
clear tax traffic from the application

18
00:00:36,559 --> 00:00:40,399
implement certificate pinning strategies

19
00:00:38,640 --> 00:00:43,680
and also handle additional

20
00:00:40,399 --> 00:00:45,280
custom certificate authorities without

21
00:00:43,680 --> 00:00:48,000
actually introducing

22
00:00:45,280 --> 00:00:49,760
any uh trust manager it was first

23
00:00:48,000 --> 00:00:52,000
introduced in android six i then only

24
00:00:49,760 --> 00:00:53,680
declare text feature was available

25
00:00:52,000 --> 00:00:55,680
and it was significantly standard in

26
00:00:53,680 --> 00:00:57,039
android 7 to support

27
00:00:55,680 --> 00:00:59,120
all the remaining features like clear

28
00:00:57,039 --> 00:01:00,399
text and the custom transform

29
00:00:59,120 --> 00:01:02,320
the best way to present the natural

30
00:01:00,399 --> 00:01:03,359
security policy is through some series

31
00:01:02,320 --> 00:01:05,840
of exam

32
00:01:03,359 --> 00:01:07,760
the first one probably very obvious is a

33
00:01:05,840 --> 00:01:09,520
policy where we completely forbid

34
00:01:07,760 --> 00:01:11,600
any clear tax connection from the

35
00:01:09,520 --> 00:01:15,039
application this means that uh

36
00:01:11,600 --> 00:01:17,759
from our app no domain can be reached

37
00:01:15,040 --> 00:01:18,479
through http a slightly more complex

38
00:01:17,759 --> 00:01:20,479
example

39
00:01:18,479 --> 00:01:22,400
this time we permit the clear tax

40
00:01:20,479 --> 00:01:24,479
traffic from the entire application so

41
00:01:22,400 --> 00:01:27,600
we can reassure the domain to http

42
00:01:24,479 --> 00:01:29,600
however when we try to contact the

43
00:01:27,600 --> 00:01:31,360
android.com domain we must do it

44
00:01:29,600 --> 00:01:33,280
securely for https

45
00:01:31,360 --> 00:01:34,960
on top of that when we reach this domain

46
00:01:33,280 --> 00:01:36,720
we also have to implement and verify

47
00:01:34,960 --> 00:01:39,439
certificate pin

48
00:01:36,720 --> 00:01:40,479
the last example let's think that we are

49
00:01:39,439 --> 00:01:42,479
troubleshooting

50
00:01:40,479 --> 00:01:44,240
some networking issue of our application

51
00:01:42,479 --> 00:01:46,799
and we need to trust the additional

52
00:01:44,240 --> 00:01:48,560
certificate from our http proxy just by

53
00:01:46,799 --> 00:01:49,840
using a combination of the bug overrides

54
00:01:48,560 --> 00:01:51,840
and trustank or node

55
00:01:49,840 --> 00:01:53,759
we can easily set up the application in

56
00:01:51,840 --> 00:01:56,479
order to trust the custom certificate of

57
00:01:53,759 --> 00:01:58,320
the http proxy

58
00:01:56,479 --> 00:02:00,079
if the application is not defining any

59
00:01:58,320 --> 00:02:01,839
network security policy at installation

60
00:02:00,079 --> 00:02:03,759
time the system applies a default one

61
00:02:01,840 --> 00:02:06,159
which changes according to the api level

62
00:02:03,759 --> 00:02:07,680
the application is targeted

63
00:02:06,159 --> 00:02:10,319
the last default introduced android

64
00:02:07,680 --> 00:02:12,319
design and value for android 10 and 11

65
00:02:10,318 --> 00:02:13,679
does completely forbid the clear text

66
00:02:12,319 --> 00:02:15,359
protocol from the application

67
00:02:13,680 --> 00:02:17,120
this means that google is basically

68
00:02:15,360 --> 00:02:19,120
trying to push all the developers to

69
00:02:17,120 --> 00:02:20,959
adopt https everywhere on the

70
00:02:19,120 --> 00:02:22,800
application this is also very

71
00:02:20,959 --> 00:02:23,840
interesting since starting from november

72
00:02:22,800 --> 00:02:25,599
2019

73
00:02:23,840 --> 00:02:27,040
and all the new applications and updates

74
00:02:25,599 --> 00:02:30,480
published on the google play store must

75
00:02:27,040 --> 00:02:32,079
target at least api level 28.

76
00:02:30,480 --> 00:02:33,679
as first contribution of this paper we

77
00:02:32,080 --> 00:02:35,760
identify several weaknesses that might

78
00:02:33,680 --> 00:02:38,400
affect our wrongly configured points

79
00:02:35,760 --> 00:02:40,319
the first one probably the most obvious

80
00:02:38,400 --> 00:02:42,239
is where we allow globally clear text

81
00:02:40,319 --> 00:02:43,839
connection for our application

82
00:02:42,239 --> 00:02:45,440
this means that the attacker on the same

83
00:02:43,840 --> 00:02:47,680
wi-fi network or the

84
00:02:45,440 --> 00:02:50,000
victim can eavesdrop and modify all the

85
00:02:47,680 --> 00:02:52,640
unexpected connections

86
00:02:50,000 --> 00:02:54,560
as latinos after weakness is when we try

87
00:02:52,640 --> 00:02:56,399
to configure a strict policy where we

88
00:02:54,560 --> 00:02:58,080
implement certificate spinning for one

89
00:02:56,400 --> 00:02:59,760
or several domain

90
00:02:58,080 --> 00:03:02,159
this part of the configuration says that

91
00:02:59,760 --> 00:03:04,480
when we try to contact android.com

92
00:03:02,159 --> 00:03:06,640
we only need to trust connection only if

93
00:03:04,480 --> 00:03:08,238
they are signed by this certificate

94
00:03:06,640 --> 00:03:10,079
however at the same time we can also

95
00:03:08,239 --> 00:03:10,959
configure the remaining part of the

96
00:03:10,080 --> 00:03:13,040
policy

97
00:03:10,959 --> 00:03:14,239
with the override pinstrues that says

98
00:03:13,040 --> 00:03:15,920
that for standard certificate

99
00:03:14,239 --> 00:03:17,920
authorities we must

100
00:03:15,920 --> 00:03:19,200
in your certificate pin specification

101
00:03:17,920 --> 00:03:20,799
the combination of these two

102
00:03:19,200 --> 00:03:22,319
configurations makes basically the

103
00:03:20,800 --> 00:03:23,040
implementation with certificate opinion

104
00:03:22,319 --> 00:03:24,798
useless

105
00:03:23,040 --> 00:03:26,720
and no warnings are raised when we try

106
00:03:24,799 --> 00:03:29,360
to configure this type of

107
00:03:26,720 --> 00:03:30,799
network security policy the last

108
00:03:29,360 --> 00:03:32,400
weakness that we identify

109
00:03:30,799 --> 00:03:34,560
you can also target some very strict

110
00:03:32,400 --> 00:03:36,319
policy here clear text traffic is not

111
00:03:34,560 --> 00:03:36,879
permitted so no http connection are

112
00:03:36,319 --> 00:03:38,319
allowed

113
00:03:36,879 --> 00:03:40,319
we don't implement any certificate

114
00:03:38,319 --> 00:03:42,319
pinning but for ssl internalized

115
00:03:40,319 --> 00:03:43,760
connection we trust the combination of

116
00:03:42,319 --> 00:03:46,000
both user and system

117
00:03:43,760 --> 00:03:47,518
certificate authorities in our keystone

118
00:03:46,000 --> 00:03:48,480
however this means that an attacker with

119
00:03:47,519 --> 00:03:50,319
physical assets

120
00:03:48,480 --> 00:03:51,920
on our phone can install silently a

121
00:03:50,319 --> 00:03:54,480
custom certificate authority in the user

122
00:03:51,920 --> 00:03:55,920
keystone which is actually pretty easy

123
00:03:54,480 --> 00:03:57,518
this is actually pretty relevant for

124
00:03:55,920 --> 00:03:58,159
some thread models like a reverse

125
00:03:57,519 --> 00:04:00,159
engineer

126
00:03:58,159 --> 00:04:01,519
of the application or some stalk when

127
00:04:00,159 --> 00:04:02,480
supposed to wear malware where the

128
00:04:01,519 --> 00:04:04,000
attacker is

129
00:04:02,480 --> 00:04:06,480
is actually a closer relative to the

130
00:04:04,000 --> 00:04:08,560
victim and it might have

131
00:04:06,480 --> 00:04:10,720
physical access to the phones of the

132
00:04:08,560 --> 00:04:12,480
vehicle

133
00:04:10,720 --> 00:04:15,200
as a second contribution of this paper

134
00:04:12,480 --> 00:04:17,599
we wanted to understand and analyze how

135
00:04:15,200 --> 00:04:18,880
network security policy are used across

136
00:04:17,600 --> 00:04:20,479
android applications

137
00:04:18,880 --> 00:04:22,320
as we decide to perform a landscape

138
00:04:20,478 --> 00:04:23,680
analysis on 125

139
00:04:22,320 --> 00:04:25,440
000 application downloaded from the

140
00:04:23,680 --> 00:04:27,919
google play store we perform the first

141
00:04:25,440 --> 00:04:28,560
scroll from june to july 2019 and then

142
00:04:27,919 --> 00:04:31,599
we repeated

143
00:04:28,560 --> 00:04:34,000
the role the second time one year after

144
00:04:31,600 --> 00:04:35,040
uh from april to june 2020 just after

145
00:04:34,000 --> 00:04:36,479
the google forces

146
00:04:35,040 --> 00:04:38,880
all the application to target at least

147
00:04:36,479 --> 00:04:40,960
api level 28.

148
00:04:38,880 --> 00:04:42,159
this data set is then used as base to

149
00:04:40,960 --> 00:04:44,159
analyze the adoption of the network

150
00:04:42,160 --> 00:04:45,840
security policy amongst android app

151
00:04:44,160 --> 00:04:47,520
and also we use this data set to

152
00:04:45,840 --> 00:04:49,679
identify if the

153
00:04:47,520 --> 00:04:50,799
policy weaknesses that we studied are

154
00:04:49,680 --> 00:04:53,360
actually used by

155
00:04:50,800 --> 00:04:55,120
a real world application this we were

156
00:04:53,360 --> 00:04:56,639
also interested to analyze to understand

157
00:04:55,120 --> 00:04:58,400
how developers configure the network of

158
00:04:56,639 --> 00:05:00,960
security policy we also perform some

159
00:04:58,400 --> 00:05:02,560
clustering on a different policies

160
00:05:00,960 --> 00:05:04,239
these are helped us to highlight some

161
00:05:02,560 --> 00:05:06,160
common patterns for us

162
00:05:04,240 --> 00:05:07,680
two policies belong to the same cluster

163
00:05:06,160 --> 00:05:09,120
if they contain the same node the same

164
00:05:07,680 --> 00:05:09,520
attributes and the same value and in

165
00:05:09,120 --> 00:05:11,759
order

166
00:05:09,520 --> 00:05:13,359
since during the parsing the order of

167
00:05:11,759 --> 00:05:15,600
the node and attributes is not taken

168
00:05:13,360 --> 00:05:17,199
into account

169
00:05:15,600 --> 00:05:18,720
we also considered the first data set we

170
00:05:17,199 --> 00:05:20,400
identified that only 13

171
00:05:18,720 --> 00:05:21,919
of the application at the time adopted

172
00:05:20,400 --> 00:05:23,919
the network security policy this

173
00:05:21,919 --> 00:05:25,359
percentage is equally distributed by the

174
00:05:23,919 --> 00:05:26,320
application using the first version of

175
00:05:25,360 --> 00:05:27,840
the policy

176
00:05:26,320 --> 00:05:29,680
which the one that allows only clear

177
00:05:27,840 --> 00:05:32,000
text and the ones using the second

178
00:05:29,680 --> 00:05:33,280
version of the policy

179
00:05:32,000 --> 00:05:34,960
for what consider the second data set

180
00:05:33,280 --> 00:05:36,080
however we were not able to replicate

181
00:05:34,960 --> 00:05:37,758
all the experiment

182
00:05:36,080 --> 00:05:39,120
in the entire data set since we noticed

183
00:05:37,759 --> 00:05:40,639
that 70 000

184
00:05:39,120 --> 00:05:42,160
applications were not available anymore

185
00:05:40,639 --> 00:05:44,639
in the google play store

186
00:05:42,160 --> 00:05:46,720
on this slightly smaller data set we

187
00:05:44,639 --> 00:05:48,880
identify however the 32 percent

188
00:05:46,720 --> 00:05:50,400
of the application this time to adopt a

189
00:05:48,880 --> 00:05:52,000
network security policy and the number

190
00:05:50,400 --> 00:05:54,638
of applications with a

191
00:05:52,000 --> 00:05:56,000
valid policy actually more than doubled

192
00:05:54,639 --> 00:05:58,560
however we still

193
00:05:56,000 --> 00:06:00,160
see a huge amount of applications still

194
00:05:58,560 --> 00:06:01,840
adopting the less expressive

195
00:06:00,160 --> 00:06:04,000
version of the policy the one from

196
00:06:01,840 --> 00:06:06,159
android 6 where only clear text

197
00:06:04,000 --> 00:06:08,240
feature is available and still the

198
00:06:06,160 --> 00:06:10,880
second version of the policy on android

199
00:06:08,240 --> 00:06:12,080
uh having is not the most used also

200
00:06:10,880 --> 00:06:15,600
after that google

201
00:06:12,080 --> 00:06:17,520
pushes uh the new default

202
00:06:15,600 --> 00:06:19,280
for what concept policy we can see we

203
00:06:17,520 --> 00:06:21,359
were actually quite

204
00:06:19,280 --> 00:06:22,960
surprised to identify some results for

205
00:06:21,360 --> 00:06:24,240
example for work concerning clear text

206
00:06:22,960 --> 00:06:25,919
they would identify that even though

207
00:06:24,240 --> 00:06:26,560
google is trying to force the developer

208
00:06:25,919 --> 00:06:29,198
to adopt

209
00:06:26,560 --> 00:06:30,400
https everywhere on their application

210
00:06:29,199 --> 00:06:32,000
developers still act

211
00:06:30,400 --> 00:06:33,679
on the opposite way still sticking to

212
00:06:32,000 --> 00:06:34,800
http 67

213
00:06:33,680 --> 00:06:36,880
of the application with the network

214
00:06:34,800 --> 00:06:37,520
security policy we found that they still

215
00:06:36,880 --> 00:06:41,039
permit

216
00:06:37,520 --> 00:06:42,560
a network clear tax connection

217
00:06:41,039 --> 00:06:44,479
for road conserve certificate opinion

218
00:06:42,560 --> 00:06:46,319
we're quite surprised that since

219
00:06:44,479 --> 00:06:48,080
with network security policies very easy

220
00:06:46,319 --> 00:06:50,240
to implement a valid certificate opinion

221
00:06:48,080 --> 00:06:51,758
strategies but only 102 applications

222
00:06:50,240 --> 00:06:54,080
actually use this feature

223
00:06:51,759 --> 00:06:55,759
out of this 102 application and nine of

224
00:06:54,080 --> 00:06:57,280
them configure a correct

225
00:06:55,759 --> 00:06:58,960
in an implementation but at the same

226
00:06:57,280 --> 00:07:00,638
time they shut down it with the overall

227
00:06:58,960 --> 00:07:03,680
pin output making the implementation of

228
00:07:00,639 --> 00:07:05,680
certificate opening useless

229
00:07:03,680 --> 00:07:06,960
almost all the application that uses a

230
00:07:05,680 --> 00:07:09,520
trust anchor

231
00:07:06,960 --> 00:07:11,198
configure it wrongly and this means that

232
00:07:09,520 --> 00:07:13,120
for this application potentially allow

233
00:07:11,199 --> 00:07:14,720
their ssl and tls connection to be

234
00:07:13,120 --> 00:07:16,720
intercepted since they trust

235
00:07:14,720 --> 00:07:19,759
both the combination system user

236
00:07:16,720 --> 00:07:19,759
certificate index

237
00:07:19,840 --> 00:07:23,119
policy clustering allows us to explore

238
00:07:21,840 --> 00:07:26,318
the data set to find

239
00:07:23,120 --> 00:07:29,120
some interesting common patterns

240
00:07:26,319 --> 00:07:29,680
for example we identify a very weird

241
00:07:29,120 --> 00:07:32,240
policy

242
00:07:29,680 --> 00:07:33,360
here the developer tries to implement a

243
00:07:32,240 --> 00:07:35,039
wrong certificate

244
00:07:33,360 --> 00:07:37,280
pinning strategy for the example.com

245
00:07:35,039 --> 00:07:38,960
domain this policy was shared amongst

246
00:07:37,280 --> 00:07:40,960
the 41 application

247
00:07:38,960 --> 00:07:42,960
we did the deeper and we identified that

248
00:07:40,960 --> 00:07:44,239
this policy was actually copy and pasted

249
00:07:42,960 --> 00:07:46,159
from stack overflow

250
00:07:44,240 --> 00:07:47,680
still the problem of taking an entire

251
00:07:46,160 --> 00:07:49,520
snippet of code from

252
00:07:47,680 --> 00:07:50,960
stack over from github is still an open

253
00:07:49,520 --> 00:07:52,639
problem also for what conservator

254
00:07:50,960 --> 00:07:55,599
security policy

255
00:07:52,639 --> 00:07:57,120
a slightly more interesting example here

256
00:07:55,599 --> 00:07:59,360
this is actually very particular the

257
00:07:57,120 --> 00:08:02,479
configuration is valid and they use a

258
00:07:59,360 --> 00:08:03,919
very specific domain like localhost this

259
00:08:02,479 --> 00:08:06,878
policy shared among

260
00:08:03,919 --> 00:08:08,159
almost more than 1000 applications we

261
00:08:06,879 --> 00:08:09,840
did the same investigation and we

262
00:08:08,160 --> 00:08:11,199
identified that the exact same snippet

263
00:08:09,840 --> 00:08:14,239
of code is taken from the facebook

264
00:08:11,199 --> 00:08:16,720
advertisement library sdk for android

265
00:08:14,240 --> 00:08:18,160
this last result hinted us that there

266
00:08:16,720 --> 00:08:19,840
might be some other situation where a

267
00:08:18,160 --> 00:08:21,440
third-party library is on advertisement

268
00:08:19,840 --> 00:08:22,638
framework who might actually force and

269
00:08:21,440 --> 00:08:24,479
push the developer

270
00:08:22,639 --> 00:08:27,360
to modify raw doctor network security

271
00:08:24,479 --> 00:08:29,039
points that says next contribution of

272
00:08:27,360 --> 00:08:31,919
this paper we decided to study the

273
00:08:29,039 --> 00:08:33,679
advertisement ecosystem to understand if

274
00:08:31,919 --> 00:08:36,240
this common scenario is actually

275
00:08:33,679 --> 00:08:39,359
widespread amongst the other

276
00:08:36,240 --> 00:08:41,039
advertisement libraries on android

277
00:08:39,360 --> 00:08:43,360
so we decided to create a data set of

278
00:08:41,039 --> 00:08:44,159
the 29 most used advertisement library

279
00:08:43,360 --> 00:08:46,080
on android

280
00:08:44,159 --> 00:08:47,920
and we read all the developer

281
00:08:46,080 --> 00:08:49,760
documentation identified and

282
00:08:47,920 --> 00:08:51,599
12 of this library actually asked the

283
00:08:49,760 --> 00:08:53,200
developer to enforce or modify the

284
00:08:51,600 --> 00:08:55,360
network security policy

285
00:08:53,200 --> 00:08:57,040
out of these 12 libraries 11 of them

286
00:08:55,360 --> 00:08:58,480
asked the developer to allow clear tax

287
00:08:57,040 --> 00:08:59,439
on the application and this is pretty

288
00:08:58,480 --> 00:09:02,320
weird because this

289
00:08:59,440 --> 00:09:04,160
one is the first weaknesses that we show

290
00:09:02,320 --> 00:09:07,200
previously

291
00:09:04,160 --> 00:09:08,800
so now we are actually interested in

292
00:09:07,200 --> 00:09:10,320
counting and measuring the impact of

293
00:09:08,800 --> 00:09:12,479
advertisement library on

294
00:09:10,320 --> 00:09:13,519
our own application with clear text

295
00:09:12,480 --> 00:09:16,720
configuration

296
00:09:13,519 --> 00:09:19,279
on the network security policy

297
00:09:16,720 --> 00:09:20,959
so we take back our data set we only

298
00:09:19,279 --> 00:09:23,760
extract the application that allows

299
00:09:20,959 --> 00:09:25,760
their text application configuration and

300
00:09:23,760 --> 00:09:27,600
then thanks to libscout we try to detect

301
00:09:25,760 --> 00:09:30,240
all the third party libraries in the

302
00:09:27,600 --> 00:09:32,080
in design we had to extend it to support

303
00:09:30,240 --> 00:09:35,279
the new profile of these

304
00:09:32,080 --> 00:09:36,880
11 11 libraries and in order to

305
00:09:35,279 --> 00:09:39,200
perform this detection we use both the

306
00:09:36,880 --> 00:09:41,279
package name and the code similarity

307
00:09:39,200 --> 00:09:44,240
results are quite interesting we found

308
00:09:41,279 --> 00:09:45,760
that almost 3200 applications with an

309
00:09:44,240 --> 00:09:47,360
actual security policy

310
00:09:45,760 --> 00:09:48,880
actually have an advertisement library

311
00:09:47,360 --> 00:09:50,320
that requires the developer to adopt a

312
00:09:48,880 --> 00:09:52,080
network security policy

313
00:09:50,320 --> 00:09:53,360
here has more disclaimer most of the

314
00:09:52,080 --> 00:09:55,440
libraries matches that we have with

315
00:09:53,360 --> 00:09:56,640
libscout to wear with the package name

316
00:09:55,440 --> 00:09:58,560
this means that probably the number of

317
00:09:56,640 --> 00:10:01,199
application with advertisement library

318
00:09:58,560 --> 00:10:03,920
might actually be bigger

319
00:10:01,200 --> 00:10:04,399
out of these apps 89 of them allow clear

320
00:10:03,920 --> 00:10:05,839
text

321
00:10:04,399 --> 00:10:07,680
which is pretty interesting because here

322
00:10:05,839 --> 00:10:09,279
we have a direct match with the

323
00:10:07,680 --> 00:10:11,120
advertisement libraries asking the

324
00:10:09,279 --> 00:10:12,880
developer to modify the network security

325
00:10:11,120 --> 00:10:14,800
policy to allow clear text

326
00:10:12,880 --> 00:10:16,160
and the real application the real policy

327
00:10:14,800 --> 00:10:17,359
of the application that actually allows

328
00:10:16,160 --> 00:10:20,000
clear text

329
00:10:17,360 --> 00:10:21,440
the remaining 11 however they simply do

330
00:10:20,000 --> 00:10:22,560
not allow any clear text connection in

331
00:10:21,440 --> 00:10:24,480
their application

332
00:10:22,560 --> 00:10:26,079
this means that when we try to reach a

333
00:10:24,480 --> 00:10:28,079
domain through http

334
00:10:26,079 --> 00:10:30,399
this might not work leading the

335
00:10:28,079 --> 00:10:33,439
application to behave

336
00:10:30,399 --> 00:10:35,760
wrongly with some undefined vf

337
00:10:33,440 --> 00:10:37,519
this is actually highlights some

338
00:10:35,760 --> 00:10:39,360
limitation of the actual configuration

339
00:10:37,519 --> 00:10:40,800
of the network security policy

340
00:10:39,360 --> 00:10:42,320
is that there might be some scenarios

341
00:10:40,800 --> 00:10:43,920
like the advertisement library that we

342
00:10:42,320 --> 00:10:45,360
showed before where the developer

343
00:10:43,920 --> 00:10:47,599
doesn't know in advance which domains

344
00:10:45,360 --> 00:10:49,120
will be contacted the developer doesn't

345
00:10:47,600 --> 00:10:50,480
know neither the domain name nor the

346
00:10:49,120 --> 00:10:53,839
protocol that will be used by

347
00:10:50,480 --> 00:10:56,399
the library this means that the

348
00:10:53,839 --> 00:10:57,680
only available option for the developer

349
00:10:56,399 --> 00:10:58,959
is to configure a very open and

350
00:10:57,680 --> 00:11:00,959
potentially weak

351
00:10:58,959 --> 00:11:03,839
policy where it is not possible to

352
00:11:00,959 --> 00:11:05,518
forbid http by default

353
00:11:03,839 --> 00:11:07,440
to overcome this issue as the last

354
00:11:05,519 --> 00:11:08,959
contribution of this paper we presented

355
00:11:07,440 --> 00:11:10,560
an extension of the network security

356
00:11:08,959 --> 00:11:12,319
policy

357
00:11:10,560 --> 00:11:13,760
for us the granularity of domain name is

358
00:11:12,320 --> 00:11:15,440
not the best abstraction layer for

359
00:11:13,760 --> 00:11:18,959
several use cases and we saw that

360
00:11:15,440 --> 00:11:20,880
advertisement libraries is one of them

361
00:11:18,959 --> 00:11:22,640
our new proposal is an extension of the

362
00:11:20,880 --> 00:11:24,800
native security policy which allows the

363
00:11:22,640 --> 00:11:26,880
developer to bind a specific policy to a

364
00:11:24,800 --> 00:11:28,800
specific package name

365
00:11:26,880 --> 00:11:30,560
and it is fully backward compatible and

366
00:11:28,800 --> 00:11:31,839
can act as a drop-in replacement for the

367
00:11:30,560 --> 00:11:33,119
old version of the network security

368
00:11:31,839 --> 00:11:35,760
device

369
00:11:33,120 --> 00:11:37,440
how it works the developer can still

370
00:11:35,760 --> 00:11:38,399
configure a very strict policy let's say

371
00:11:37,440 --> 00:11:41,200
in this example

372
00:11:38,399 --> 00:11:42,720
we completely forbid http connection for

373
00:11:41,200 --> 00:11:44,800
the entire application

374
00:11:42,720 --> 00:11:46,720
however when the developer has to embed

375
00:11:44,800 --> 00:11:49,839
a third party library

376
00:11:46,720 --> 00:11:50,800
it can be done just by using the package

377
00:11:49,839 --> 00:11:52,959
config

378
00:11:50,800 --> 00:11:54,240
attribute that we extended introducing

379
00:11:52,959 --> 00:11:55,518
this new extension of the network

380
00:11:54,240 --> 00:11:57,040
security policy

381
00:11:55,519 --> 00:11:58,639
within this node it is possible to

382
00:11:57,040 --> 00:12:01,279
configure all the package name

383
00:11:58,639 --> 00:12:02,959
and if they allow or not clear text this

384
00:12:01,279 --> 00:12:04,560
means that clear text connection are

385
00:12:02,959 --> 00:12:06,319
only allowed if they are started from a

386
00:12:04,560 --> 00:12:06,880
specific package name in this case this

387
00:12:06,320 --> 00:12:08,959
unsafe

388
00:12:06,880 --> 00:12:10,800
package name we prefer the match to

389
00:12:08,959 --> 00:12:13,518
understand who started the connection

390
00:12:10,800 --> 00:12:14,319
thanks to stark introspection to

391
00:12:13,519 --> 00:12:15,760
conclude

392
00:12:14,320 --> 00:12:17,200
we performed the first comprehensive

393
00:12:15,760 --> 00:12:18,399
study on the newly introduced android

394
00:12:17,200 --> 00:12:19,920
network security policy

395
00:12:18,399 --> 00:12:21,440
we identified some stranded common

396
00:12:19,920 --> 00:12:22,800
pitfalls that may occur

397
00:12:21,440 --> 00:12:24,639
in during the configuration of the

398
00:12:22,800 --> 00:12:26,319
united security policy

399
00:12:24,639 --> 00:12:28,079
we investigate the root cause that might

400
00:12:26,320 --> 00:12:29,440
lead to weak policy and we found that

401
00:12:28,079 --> 00:12:30,000
third-party libraries might actually

402
00:12:29,440 --> 00:12:32,800
encourage

403
00:12:30,000 --> 00:12:34,560
some unsafe practice as a last

404
00:12:32,800 --> 00:12:36,160
contribution we decided implemented a

405
00:12:34,560 --> 00:12:37,839
dropping replacement on the actual nato

406
00:12:36,160 --> 00:12:39,199
security policy that limits the impact

407
00:12:37,839 --> 00:12:40,399
of third-party libraries over the

408
00:12:39,200 --> 00:12:42,320
security of the policy of the

409
00:12:40,399 --> 00:12:43,760
application

410
00:12:42,320 --> 00:12:45,519
all the code and data set will be

411
00:12:43,760 --> 00:12:46,480
available on github just after the

412
00:12:45,519 --> 00:12:47,839
presentation

413
00:12:46,480 --> 00:12:49,279
thank you very much for your attention

414
00:12:47,839 --> 00:12:50,839
if you have any question please feel

415
00:12:49,279 --> 00:12:53,839
free to ask

416
00:12:50,839 --> 00:12:53,839
thanks

