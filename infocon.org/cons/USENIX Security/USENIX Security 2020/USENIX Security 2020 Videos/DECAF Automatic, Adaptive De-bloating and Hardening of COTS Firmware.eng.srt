1
00:00:08,960 --> 00:00:11,519
hi

2
00:00:09,440 --> 00:00:13,040
i'm jay christensen and this is decaf

3
00:00:11,519 --> 00:00:14,799
automatic adaptive devoting and

4
00:00:13,040 --> 00:00:16,000
hardening of cots firmware

5
00:00:14,799 --> 00:00:17,279
this research was supported by the

6
00:00:16,000 --> 00:00:18,400
office of naval research and was

7
00:00:17,279 --> 00:00:19,840
conducted by myself

8
00:00:18,400 --> 00:00:22,240
from tagline and writing design of

9
00:00:19,840 --> 00:00:24,560
private machines and mooger angel and

10
00:00:22,240 --> 00:00:27,198
eichiro of university polytechnic

11
00:00:24,560 --> 00:00:27,198
bucharest

12
00:00:27,760 --> 00:00:31,519
so firmware lies almost at the bottom of

13
00:00:29,439 --> 00:00:33,040
the stack of a homely cpu microcode

14
00:00:31,519 --> 00:00:34,640
and despite its extremely equivalent

15
00:00:33,040 --> 00:00:35,920
position it's almost entirely closed

16
00:00:34,640 --> 00:00:37,760
source

17
00:00:35,920 --> 00:00:39,360
uh delivered blobs off at the end of a

18
00:00:37,760 --> 00:00:42,079
long supply chain starting with

19
00:00:39,360 --> 00:00:43,519
the edk2 open social influence reference

20
00:00:42,079 --> 00:00:45,600
implementation of uefi

21
00:00:43,520 --> 00:00:47,680
which is then taken by a company like

22
00:00:45,600 --> 00:00:49,039
americanmegatrends who adds the modules

23
00:00:47,680 --> 00:00:50,719
necessary for

24
00:00:49,039 --> 00:00:53,199
the specific chipset the motherboard

25
00:00:50,719 --> 00:00:54,879
contains which is then delivered to a

26
00:00:53,199 --> 00:00:55,760
motherboard manufacturing company like

27
00:00:54,879 --> 00:00:58,800
dell or hp

28
00:00:55,760 --> 00:01:00,399
who create one image for a line of

29
00:00:58,800 --> 00:01:02,559
products and then finally an image for

30
00:01:00,399 --> 00:01:04,239
a single product and during this entire

31
00:01:02,559 --> 00:01:05,438
process modules are added but almost

32
00:01:04,239 --> 00:01:07,439
never removed

33
00:01:05,438 --> 00:01:09,520
so you get a lot of bloat on the final

34
00:01:07,439 --> 00:01:11,839
blob

35
00:01:09,520 --> 00:01:13,200
the codes of questionable quality so

36
00:01:11,840 --> 00:01:15,920
against fluid source we don't know

37
00:01:13,200 --> 00:01:17,759
what's going into it but some of the

38
00:01:15,920 --> 00:01:19,920
code that gets analyzed or

39
00:01:17,759 --> 00:01:21,920
leaked or eventually open source is not

40
00:01:19,920 --> 00:01:25,040
always so pretty

41
00:01:21,920 --> 00:01:26,640
lots of code we use across manufacturers

42
00:01:25,040 --> 00:01:28,560
across models leads to a lot of easily

43
00:01:26,640 --> 00:01:31,200
replicatable attacks

44
00:01:28,560 --> 00:01:31,920
so kova and kallenberg in 2015 found

45
00:01:31,200 --> 00:01:34,000
that

46
00:01:31,920 --> 00:01:35,920
millions of motherboards were out in the

47
00:01:34,000 --> 00:01:37,600
wild were vulnerable to

48
00:01:35,920 --> 00:01:39,200
the same style of attack owing to a

49
00:01:37,600 --> 00:01:41,600
single module or

50
00:01:39,200 --> 00:01:42,560
modules being reused across

51
00:01:41,600 --> 00:01:45,600
manufacturers

52
00:01:42,560 --> 00:01:47,840
models etc and many

53
00:01:45,600 --> 00:01:49,360
are up to almost 70 percent of these

54
00:01:47,840 --> 00:01:50,079
modules in our experience are

55
00:01:49,360 --> 00:01:53,280
unnecessary

56
00:01:50,079 --> 00:01:55,119
we removed outright this is a code

57
00:01:53,280 --> 00:01:56,799
sample from the intel galileo firmware

58
00:01:55,119 --> 00:01:57,439
courtesy of nikolaj schledge who's the

59
00:01:56,799 --> 00:01:59,119
author of

60
00:01:57,439 --> 00:02:02,479
uefi tool which is one of the open

61
00:01:59,119 --> 00:02:05,119
source tools we use in this project

62
00:02:02,479 --> 00:02:06,079
and as we can see here the author of

63
00:02:05,119 --> 00:02:07,920
this code

64
00:02:06,079 --> 00:02:09,679
is fetching some value and comparing it

65
00:02:07,920 --> 00:02:11,200
to a constant and later

66
00:02:09,679 --> 00:02:13,280
fetching a different value but when we

67
00:02:11,200 --> 00:02:15,040
make the comparison they're comparing

68
00:02:13,280 --> 00:02:17,760
the first value and this happens twice

69
00:02:15,040 --> 00:02:18,799
and this is the result of copy pasting

70
00:02:17,760 --> 00:02:20,239
which is the kind of thing you would

71
00:02:18,800 --> 00:02:22,959
hope would be called in code reviews or

72
00:02:20,239 --> 00:02:24,959
maybe by even by a code linter

73
00:02:22,959 --> 00:02:26,480
but you know when your code is closed

74
00:02:24,959 --> 00:02:28,640
source you have no control over

75
00:02:26,480 --> 00:02:30,429
you know how many silly mistakes like

76
00:02:28,640 --> 00:02:31,679
this or going into your final firmware

77
00:02:30,430 --> 00:02:34,000
[Music]

78
00:02:31,680 --> 00:02:34,720
so the way we see tourists is decaf

79
00:02:34,000 --> 00:02:37,120
which is a

80
00:02:34,720 --> 00:02:39,680
fully customizable platform for

81
00:02:37,120 --> 00:02:41,760
de-loading off-the-shelf uefi firmware

82
00:02:39,680 --> 00:02:44,480
it can automatically remove up to 70 of

83
00:02:41,760 --> 00:02:46,160
an image by bite surface area

84
00:02:44,480 --> 00:02:49,760
um no source code is necessary so it

85
00:02:46,160 --> 00:02:51,440
operates on the blob and uses

86
00:02:49,760 --> 00:02:54,399
the real motherboards for testing and

87
00:02:51,440 --> 00:02:55,920
validation uh so no chemo or emulation

88
00:02:54,400 --> 00:02:57,599
or anything like that

89
00:02:55,920 --> 00:02:59,599
uh the functionality can be easily

90
00:02:57,599 --> 00:03:01,760
customized so

91
00:02:59,599 --> 00:03:02,959
if you want to remove all code while

92
00:03:01,760 --> 00:03:04,959
still retaining

93
00:03:02,959 --> 00:03:06,560
the ability to boot your os and run some

94
00:03:04,959 --> 00:03:08,560
application you can do that or if you

95
00:03:06,560 --> 00:03:11,120
want to target specific features like

96
00:03:08,560 --> 00:03:12,239
removing vga or usb you can do that as

97
00:03:11,120 --> 00:03:15,440
well

98
00:03:12,239 --> 00:03:16,159
and dcaf firmware has been running in a

99
00:03:15,440 --> 00:03:18,480
cloud

100
00:03:16,159 --> 00:03:20,640
hypervisor compute as a service

101
00:03:18,480 --> 00:03:22,799
environment for about three years now

102
00:03:20,640 --> 00:03:24,720
and we found images to be about as

103
00:03:22,800 --> 00:03:26,799
reliable or even more reliable

104
00:03:24,720 --> 00:03:28,400
than the vanilla images in terms of

105
00:03:26,799 --> 00:03:29,599
number of failures per instance

106
00:03:28,400 --> 00:03:32,640
allocation

107
00:03:29,599 --> 00:03:34,319
reboot etc so

108
00:03:32,640 --> 00:03:36,238
just go with the benefits of pruning in

109
00:03:34,319 --> 00:03:39,119
any blob level deep loading

110
00:03:36,239 --> 00:03:40,560
scenario not just some decaf what you're

111
00:03:39,120 --> 00:03:42,480
doing is you're removing

112
00:03:40,560 --> 00:03:44,080
uh potential vulnerabilities that we

113
00:03:42,480 --> 00:03:46,238
don't know about yet

114
00:03:44,080 --> 00:03:48,159
so the great thing is you don't need to

115
00:03:46,239 --> 00:03:49,599
analyze some code and say you know we

116
00:03:48,159 --> 00:03:51,679
found the vulnerability or

117
00:03:49,599 --> 00:03:53,518
anything like that you just say we don't

118
00:03:51,680 --> 00:03:54,720
need it and we remove it and then later

119
00:03:53,519 --> 00:03:57,040
on if we find out there is some

120
00:03:54,720 --> 00:03:58,720
vulnerability that's great

121
00:03:57,040 --> 00:04:00,239
and it's important that the remove code

122
00:03:58,720 --> 00:04:02,400
is not unused or unreachable

123
00:04:00,239 --> 00:04:03,439
so oftentimes what this code is doing is

124
00:04:02,400 --> 00:04:04,959
it's initializing

125
00:04:03,439 --> 00:04:07,200
some hardware that's not actually being

126
00:04:04,959 --> 00:04:08,560
used during the firmware boot process

127
00:04:07,200 --> 00:04:10,958
and that the operating system contains

128
00:04:08,560 --> 00:04:13,280
its own drivers for

129
00:04:10,959 --> 00:04:14,480
so this removal actually reduces your

130
00:04:13,280 --> 00:04:16,320
boot time which is

131
00:04:14,480 --> 00:04:17,680
clear evidence that this code is

132
00:04:16,320 --> 00:04:19,680
actually active and reachable and that

133
00:04:17,680 --> 00:04:21,759
if it contains an exploit then

134
00:04:19,680 --> 00:04:23,680
it could have been exploited prior to

135
00:04:21,759 --> 00:04:25,440
its removal

136
00:04:23,680 --> 00:04:27,840
and as we said before features can be

137
00:04:25,440 --> 00:04:30,320
removed on demand without

138
00:04:27,840 --> 00:04:32,479
whatever functionality you desire and

139
00:04:30,320 --> 00:04:35,520
this is a quote from a talk that neglige

140
00:04:32,479 --> 00:04:37,280
gave in 2015 zero nights where he was

141
00:04:35,520 --> 00:04:40,159
describing how to do a lot of what

142
00:04:37,280 --> 00:04:41,599
ecaf does automatically by hand and as a

143
00:04:40,160 --> 00:04:43,520
motivator to the users he said

144
00:04:41,600 --> 00:04:45,360
remove all other stuff you don't want or

145
00:04:43,520 --> 00:04:46,880
need if the firmware can still boot your

146
00:04:45,360 --> 00:04:47,440
os it's fine to have that component

147
00:04:46,880 --> 00:04:48,719
removed

148
00:04:47,440 --> 00:04:51,440
[Music]

149
00:04:48,720 --> 00:04:52,479
just a quick background on uefi firmware

150
00:04:51,440 --> 00:04:54,400
uefi

151
00:04:52,479 --> 00:04:55,520
splits the platform installation four

152
00:04:54,400 --> 00:04:58,719
stages

153
00:04:55,520 --> 00:05:00,799
there's security sec pre-efi

154
00:04:58,720 --> 00:05:03,600
initialization or pei

155
00:05:00,800 --> 00:05:06,960
driver execution environment or dxe boot

156
00:05:03,600 --> 00:05:09,840
device selection service or vds

157
00:05:06,960 --> 00:05:10,880
and the basic building block is a module

158
00:05:09,840 --> 00:05:12,799
so

159
00:05:10,880 --> 00:05:15,440
from our volumes then modules in each

160
00:05:12,800 --> 00:05:17,520
module usually contains a p32

161
00:05:15,440 --> 00:05:20,080
executable or at least we're primarily

162
00:05:17,520 --> 00:05:22,479
concerned with the executable code

163
00:05:20,080 --> 00:05:23,199
and the modules communicate the efi

164
00:05:22,479 --> 00:05:26,240
protocols

165
00:05:23,199 --> 00:05:29,759
so during dxe which is the longest and

166
00:05:26,240 --> 00:05:32,479
for our most important stage

167
00:05:29,759 --> 00:05:33,280
drivers are initialized and then modules

168
00:05:32,479 --> 00:05:36,560
install

169
00:05:33,280 --> 00:05:37,039
uh lookup pointers to these drivers via

170
00:05:36,560 --> 00:05:39,520
some

171
00:05:37,039 --> 00:05:41,599
uid and then other modules can look up

172
00:05:39,520 --> 00:05:42,320
those protocols and call in to them to

173
00:05:41,600 --> 00:05:45,360
access them

174
00:05:42,320 --> 00:05:47,199
hardware or to access some protocol like

175
00:05:45,360 --> 00:05:49,039
tcp or http

176
00:05:47,199 --> 00:05:51,360
and this is the primary means of

177
00:05:49,039 --> 00:05:54,320
inter-module communication

178
00:05:51,360 --> 00:05:55,440
and uh dependency which will become

179
00:05:54,320 --> 00:05:57,599
important later when we talk about

180
00:05:55,440 --> 00:06:00,160
pruning

181
00:05:57,600 --> 00:06:00,960
uh so just uh overview of the decaf

182
00:06:00,160 --> 00:06:03,600
platform

183
00:06:00,960 --> 00:06:04,840
so we use the luigi scheduler to

184
00:06:03,600 --> 00:06:07,360
schedule tasks and

185
00:06:04,840 --> 00:06:08,239
dependencies then the firmware pruning

186
00:06:07,360 --> 00:06:10,960
engine which is

187
00:06:08,240 --> 00:06:12,560
based off of the uefi tool adds modules

188
00:06:10,960 --> 00:06:13,198
removes modules whenever necessary for

189
00:06:12,560 --> 00:06:16,000
that

190
00:06:13,199 --> 00:06:17,919
specific task and then the image is

191
00:06:16,000 --> 00:06:18,800
flashed by the ipi controller on the

192
00:06:17,919 --> 00:06:20,960
motherboard

193
00:06:18,800 --> 00:06:22,960
the image is booted and if it's a

194
00:06:20,960 --> 00:06:25,440
dependency discovery image which we

195
00:06:22,960 --> 00:06:27,599
will talk more about later then it

196
00:06:25,440 --> 00:06:29,199
collects some data and sends that

197
00:06:27,600 --> 00:06:31,360
information over the network to an

198
00:06:29,199 --> 00:06:34,800
external server

199
00:06:31,360 --> 00:06:37,199
and then if it's a regular uh run

200
00:06:34,800 --> 00:06:38,400
what will happen is the validation image

201
00:06:37,199 --> 00:06:40,479
will be loaded onto the

202
00:06:38,400 --> 00:06:41,840
booted image and then some validation

203
00:06:40,479 --> 00:06:44,639
output will be collected

204
00:06:41,840 --> 00:06:46,000
and if it's the baseline which means the

205
00:06:44,639 --> 00:06:47,919
vanilla image

206
00:06:46,000 --> 00:06:49,199
which is the first one to run that data

207
00:06:47,919 --> 00:06:52,240
will be stored as

208
00:06:49,199 --> 00:06:54,240
the baseline to compare to later and if

209
00:06:52,240 --> 00:06:55,440
it's a candidate image with some modules

210
00:06:54,240 --> 00:06:57,120
removed

211
00:06:55,440 --> 00:06:58,719
that output will be compared to the

212
00:06:57,120 --> 00:07:00,160
baseline depending on what your

213
00:06:58,720 --> 00:07:02,000
validation calls for

214
00:07:00,160 --> 00:07:05,039
and determine to whether or not to

215
00:07:02,000 --> 00:07:06,720
accept or reject that image

216
00:07:05,039 --> 00:07:08,639
and the printing task or the printing

217
00:07:06,720 --> 00:07:12,000
pipeline happens in two phases

218
00:07:08,639 --> 00:07:14,240
so first we take every module

219
00:07:12,000 --> 00:07:16,560
individually and try removing that

220
00:07:14,240 --> 00:07:17,360
and then we merge the groups of modules

221
00:07:16,560 --> 00:07:20,800
pairwise

222
00:07:17,360 --> 00:07:23,759
so if both pairs paths then we try

223
00:07:20,800 --> 00:07:25,360
removing uh their sum if that doesn't

224
00:07:23,759 --> 00:07:26,479
work we just take the larger of those

225
00:07:25,360 --> 00:07:28,240
two pairs

226
00:07:26,479 --> 00:07:30,000
and we do this until we have one

227
00:07:28,240 --> 00:07:33,120
candidate solution set

228
00:07:30,000 --> 00:07:35,440
and then we weightedly randomly select

229
00:07:33,120 --> 00:07:36,240
uh one module at a time to add to the

230
00:07:35,440 --> 00:07:38,560
solution set

231
00:07:36,240 --> 00:07:40,080
try removing that whole solution set and

232
00:07:38,560 --> 00:07:41,680
we do that until we can't remove any

233
00:07:40,080 --> 00:07:43,520
more modules

234
00:07:41,680 --> 00:07:45,440
hello my name is mooger i will be taking

235
00:07:43,520 --> 00:07:47,039
over from my colleague jake

236
00:07:45,440 --> 00:07:48,639
we are not discussing about dependence

237
00:07:47,039 --> 00:07:50,560
discovery

238
00:07:48,639 --> 00:07:52,160
in the efi environment the modules will

239
00:07:50,560 --> 00:07:54,080
communicate with each other much like

240
00:07:52,160 --> 00:07:55,120
processes in a normal operating system

241
00:07:54,080 --> 00:07:56,719
and this in turn will create

242
00:07:55,120 --> 00:07:58,800
dependencies

243
00:07:56,720 --> 00:07:59,840
the dependencies can vary at runtime due

244
00:07:58,800 --> 00:08:02,879
to various

245
00:07:59,840 --> 00:08:03,359
factors such as events in operating in

246
00:08:02,879 --> 00:08:05,919
the

247
00:08:03,360 --> 00:08:07,039
firmware environment such as what

248
00:08:05,919 --> 00:08:08,878
modules are available

249
00:08:07,039 --> 00:08:11,360
and what other resources are there are

250
00:08:08,879 --> 00:08:12,160
present the module removal order becomes

251
00:08:11,360 --> 00:08:14,479
important

252
00:08:12,160 --> 00:08:15,759
to the pruning process and this is due

253
00:08:14,479 --> 00:08:19,120
to the fact that

254
00:08:15,759 --> 00:08:21,919
a module with a lot of dependencies will

255
00:08:19,120 --> 00:08:22,960
most likely fail removal while a module

256
00:08:21,919 --> 00:08:25,680
with no dependencies

257
00:08:22,960 --> 00:08:26,000
is very likely to succeed removal in

258
00:08:25,680 --> 00:08:29,199
order

259
00:08:26,000 --> 00:08:31,120
to optimize the process we hijack the

260
00:08:29,199 --> 00:08:32,560
efi protocol api we override the

261
00:08:31,120 --> 00:08:36,560
function pointers

262
00:08:32,559 --> 00:08:38,799
and this internal allows us to log

263
00:08:36,559 --> 00:08:40,478
all the module interaction this

264
00:08:38,799 --> 00:08:42,319
information is fed into the

265
00:08:40,479 --> 00:08:44,560
pruning algorithm which assigns weights

266
00:08:42,320 --> 00:08:46,959
based upon it

267
00:08:44,560 --> 00:08:48,160
the validation is done through docker

268
00:08:46,959 --> 00:08:50,719
containers

269
00:08:48,160 --> 00:08:52,480
in each container there is placed a test

270
00:08:50,720 --> 00:08:54,959
suit that can be easily configured by

271
00:08:52,480 --> 00:08:56,399
the end user in our case we have used

272
00:08:54,959 --> 00:08:57,920
dmid code

273
00:08:56,399 --> 00:09:01,680
to check the hardware capabilities of

274
00:08:57,920 --> 00:09:04,560
the platform the lspca for the pc

275
00:09:01,680 --> 00:09:05,680
or the pci buses slash product slash

276
00:09:04,560 --> 00:09:08,880
acpi

277
00:09:05,680 --> 00:09:11,519
is used for the power management

278
00:09:08,880 --> 00:09:12,480
and we also employ chipset chipset

279
00:09:11,519 --> 00:09:14,320
stands for non

280
00:09:12,480 --> 00:09:16,240
firmware vulnerabilities and platform

281
00:09:14,320 --> 00:09:18,320
misconfigurations

282
00:09:16,240 --> 00:09:19,600
we must note that we do not improve any

283
00:09:18,320 --> 00:09:22,320
chipset results

284
00:09:19,600 --> 00:09:24,000
this is because chipset scans for high

285
00:09:22,320 --> 00:09:26,800
level vulnerabilities

286
00:09:24,000 --> 00:09:28,959
such as spectre or magdalen and this is

287
00:09:26,800 --> 00:09:33,359
not reasonable to

288
00:09:28,959 --> 00:09:36,319
hope fixing to just removing code

289
00:09:33,360 --> 00:09:37,839
instead we make sure we don't remove any

290
00:09:36,320 --> 00:09:39,200
security related features such as

291
00:09:37,839 --> 00:09:40,959
security patch that

292
00:09:39,200 --> 00:09:44,160
might expose all the vulnerabilities

293
00:09:40,959 --> 00:09:44,160
that were fixed previously

294
00:09:45,120 --> 00:09:49,360
the results are quite promising we see a

295
00:09:47,040 --> 00:09:52,079
boot timer reduction up to 24

296
00:09:49,360 --> 00:09:53,440
on both super micro and tie on boards we

297
00:09:52,080 --> 00:09:56,800
also have implemented

298
00:09:53,440 --> 00:09:59,680
a feature that removes capabilities

299
00:09:56,800 --> 00:10:00,240
hardware capabilities from the devices

300
00:09:59,680 --> 00:10:02,800
such as

301
00:10:00,240 --> 00:10:05,200
usb networks network stack support

302
00:10:02,800 --> 00:10:08,640
various peripherals

303
00:10:05,200 --> 00:10:11,519
there are many attacks that can uh go

304
00:10:08,640 --> 00:10:13,600
through these devices such as bad usb

305
00:10:11,519 --> 00:10:17,839
from blackhead in 2014

306
00:10:13,600 --> 00:10:20,560
in this type of attack

307
00:10:17,839 --> 00:10:20,959
inserting a malicious usb in your device

308
00:10:20,560 --> 00:10:23,518
could

309
00:10:20,959 --> 00:10:24,160
take over your operating system and you

310
00:10:23,519 --> 00:10:27,200
even

311
00:10:24,160 --> 00:10:29,760
slash the firmware we have tried to

312
00:10:27,200 --> 00:10:32,000
mitigate this by simply removing the usb

313
00:10:29,760 --> 00:10:34,000
support from a super microboard

314
00:10:32,000 --> 00:10:36,240
and this resulted in removing six

315
00:10:34,000 --> 00:10:38,959
modules from the original

316
00:10:36,240 --> 00:10:41,200
in uh in turn the operating system

317
00:10:38,959 --> 00:10:46,640
became oblivious to the existence of

318
00:10:41,200 --> 00:10:48,560
physical usb ports second part of the

319
00:10:46,640 --> 00:10:51,920
results

320
00:10:48,560 --> 00:10:55,839
shows us the net module reduction

321
00:10:51,920 --> 00:10:56,800
which can vary from 9 to up to almost 70

322
00:10:55,839 --> 00:10:59,519
percent

323
00:10:56,800 --> 00:11:00,240
and we also measure the return rate and

324
00:10:59,519 --> 00:11:04,720
programming

325
00:11:00,240 --> 00:11:06,959
gadgets removed from 11 up to 62 percent

326
00:11:04,720 --> 00:11:08,480
please note we are using two flavors of

327
00:11:06,959 --> 00:11:10,239
decaf

328
00:11:08,480 --> 00:11:13,440
aggressive pruning and data center

329
00:11:10,240 --> 00:11:16,160
pruning the difference is that

330
00:11:13,440 --> 00:11:17,279
data center pruning which is in green is

331
00:11:16,160 --> 00:11:20,079
uh

332
00:11:17,279 --> 00:11:20,560
more gentle with the removal process and

333
00:11:20,079 --> 00:11:22,880
it will

334
00:11:20,560 --> 00:11:24,000
retain more features such as booting

335
00:11:22,880 --> 00:11:25,920
over the network

336
00:11:24,000 --> 00:11:28,079
meanwhile with red aggressive pruning

337
00:11:25,920 --> 00:11:28,560
will try to remove everything that can

338
00:11:28,079 --> 00:11:31,760
remove

339
00:11:28,560 --> 00:11:31,760
while still passing the test

340
00:11:32,560 --> 00:11:36,000
just a note to return writing

341
00:11:34,560 --> 00:11:39,279
programming this is a

342
00:11:36,000 --> 00:11:43,200
type of attack that employs coder usage

343
00:11:39,279 --> 00:11:46,720
it changes several gadgets that are

344
00:11:43,200 --> 00:11:49,519
assembly sequences

345
00:11:46,720 --> 00:11:50,959
to execute arbitrary code not all

346
00:11:49,519 --> 00:11:56,079
gadgets are valuable

347
00:11:50,959 --> 00:11:59,119
we only count high quality gadgets that

348
00:11:56,079 --> 00:12:00,959
we defined through what preconditions

349
00:11:59,120 --> 00:12:02,560
they require to be chained or what side

350
00:12:00,959 --> 00:12:05,279
effects they may have on stack

351
00:12:02,560 --> 00:12:06,560
or what what operations they might also

352
00:12:05,279 --> 00:12:11,040
run

353
00:12:06,560 --> 00:12:13,359
and we only measure those

354
00:12:11,040 --> 00:12:14,959
okay i thank you for your attention if

355
00:12:13,360 --> 00:12:16,079
you have any further questions please do

356
00:12:14,959 --> 00:12:18,560
not hesitate to

357
00:12:16,079 --> 00:12:20,638
either contact me or jake we have our

358
00:12:18,560 --> 00:12:25,839
emails attached

359
00:12:20,639 --> 00:12:25,839
thank you and have a nice day

360
00:12:31,920 --> 00:12:34,000
you

