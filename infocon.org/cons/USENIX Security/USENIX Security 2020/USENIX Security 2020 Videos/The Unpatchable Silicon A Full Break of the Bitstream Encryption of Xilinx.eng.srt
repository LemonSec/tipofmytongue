1
00:00:08,480 --> 00:00:11,280
hi

2
00:00:09,280 --> 00:00:13,919
in this video we are talking about the

3
00:00:11,280 --> 00:00:15,280
story how spider-man defeats spider-man

4
00:00:13,920 --> 00:00:16,800
or how we break the bits bitsim

5
00:00:15,280 --> 00:00:18,320
encryption engine using the bitstream

6
00:00:16,800 --> 00:00:20,560
encryption engine

7
00:00:18,320 --> 00:00:23,279
so we found a vulnerability against the

8
00:00:20,560 --> 00:00:25,439
zeiling 7 series fpgas

9
00:00:23,279 --> 00:00:27,920
which enables us to decrypt and

10
00:00:25,439 --> 00:00:30,320
manipulate its bitstreams

11
00:00:27,920 --> 00:00:31,519
so this video is all about how the

12
00:00:30,320 --> 00:00:33,520
attack works

13
00:00:31,519 --> 00:00:35,120
and at the end we also look on possible

14
00:00:33,520 --> 00:00:38,079
counter measures against this

15
00:00:35,120 --> 00:00:39,839
unpatchable attack my name is mike ender

16
00:00:38,079 --> 00:00:41,520
and i'm one of the co-authors of the

17
00:00:39,840 --> 00:00:43,520
corresponding paper

18
00:00:41,520 --> 00:00:45,200
here we have the basis three board and

19
00:00:43,520 --> 00:00:48,960
here in the middle there is this

20
00:00:45,200 --> 00:00:50,559
tiny ic this is an fpga fpgas are fairly

21
00:00:48,960 --> 00:00:52,960
specialized these

22
00:00:50,559 --> 00:00:54,320
so they can become any digital circuit

23
00:00:52,960 --> 00:00:56,320
you want it to become

24
00:00:54,320 --> 00:00:58,480
so thinking on all these gates these

25
00:00:56,320 --> 00:01:01,440
nands north and so on

26
00:00:58,480 --> 00:01:02,559
and you can really program each boolean

27
00:01:01,440 --> 00:01:05,518
gate here on

28
00:01:02,559 --> 00:01:06,960
so they are fairly cool and to program

29
00:01:05,519 --> 00:01:09,200
this fpga here

30
00:01:06,960 --> 00:01:11,039
you use the so called bitstream and this

31
00:01:09,200 --> 00:01:12,400
bit stream contains all the vital

32
00:01:11,040 --> 00:01:15,600
information to

33
00:01:12,400 --> 00:01:19,280
program this digital circuit

34
00:01:15,600 --> 00:01:20,880
onto this fpga so it basically is the

35
00:01:19,280 --> 00:01:22,320
firmware of the fpga

36
00:01:20,880 --> 00:01:24,640
stream and the bitstream you can load it

37
00:01:22,320 --> 00:01:27,279
by usb jtag

38
00:01:24,640 --> 00:01:29,280
and here on the back there is an

39
00:01:27,280 --> 00:01:31,360
external memory and you can flash this

40
00:01:29,280 --> 00:01:32,479
external memory then when an attacker

41
00:01:31,360 --> 00:01:34,400
gains access

42
00:01:32,479 --> 00:01:36,240
to this bit streamer for example here on

43
00:01:34,400 --> 00:01:37,200
the external memory they can easily read

44
00:01:36,240 --> 00:01:39,439
it out

45
00:01:37,200 --> 00:01:40,960
they can gain access to all the viral

46
00:01:39,439 --> 00:01:43,360
information inside

47
00:01:40,960 --> 00:01:44,240
the bitstream so all the intellectual

48
00:01:43,360 --> 00:01:46,720
property

49
00:01:44,240 --> 00:01:48,798
the algorithms and so on fpgas are

50
00:01:46,720 --> 00:01:50,000
reprogrammable and the flash is also

51
00:01:48,799 --> 00:01:52,320
reprogrammable

52
00:01:50,000 --> 00:01:54,399
you can manipulate the bitstream right

53
00:01:52,320 --> 00:01:55,520
so you can implant half extrusions

54
00:01:54,399 --> 00:01:57,520
inside your design

55
00:01:55,520 --> 00:01:58,798
so all the vendors came up with the

56
00:01:57,520 --> 00:02:02,000
bitstream encryption

57
00:01:58,799 --> 00:02:05,119
so they store on the external memory

58
00:02:02,000 --> 00:02:08,160
the bitstream encrypted

59
00:02:05,119 --> 00:02:11,520
and when you program the fpga

60
00:02:08,160 --> 00:02:12,799
the fpga itself decrypts this encrypted

61
00:02:11,520 --> 00:02:15,360
bitstream

62
00:02:12,800 --> 00:02:16,319
and also ensures the authenticity of the

63
00:02:15,360 --> 00:02:18,160
bitstream

64
00:02:16,319 --> 00:02:20,799
what we are going to do is we attack

65
00:02:18,160 --> 00:02:23,440
this we read out the anchor to bitstream

66
00:02:20,800 --> 00:02:26,640
for example from this external memory

67
00:02:23,440 --> 00:02:29,200
and then manipulate this to ask the fpga

68
00:02:26,640 --> 00:02:29,599
to decrypt the encrypted bitstream for

69
00:02:29,200 --> 00:02:32,879
us

70
00:02:29,599 --> 00:02:34,799
so we use this spiderman inside here to

71
00:02:32,879 --> 00:02:37,599
defeat the spiderman inside here

72
00:02:34,800 --> 00:02:38,400
so we use it as an oracle basically and

73
00:02:37,599 --> 00:02:41,440
in a

74
00:02:38,400 --> 00:02:43,200
second attack we also can manipulate

75
00:02:41,440 --> 00:02:44,800
this encrypted bitstream so we can

76
00:02:43,200 --> 00:02:46,879
implement hardware trojans

77
00:02:44,800 --> 00:02:49,120
so let's take a look inside the attack

78
00:02:46,879 --> 00:02:50,640
and how it works

79
00:02:49,120 --> 00:02:52,720
before we go more into detail let's

80
00:02:50,640 --> 00:02:56,079
first program this fpga

81
00:02:52,720 --> 00:02:58,159
to see how this bitstream actually works

82
00:02:56,080 --> 00:03:00,560
so here we have the fpga and the

83
00:02:58,159 --> 00:03:03,519
bitstream containing the design

84
00:03:00,560 --> 00:03:05,440
which we load to the fpga via a

85
00:03:03,519 --> 00:03:06,959
programming port so here for example the

86
00:03:05,440 --> 00:03:09,440
jtag

87
00:03:06,959 --> 00:03:12,239
and this programs the so-called fabric

88
00:03:09,440 --> 00:03:15,120
where all the fpga magic happens

89
00:03:12,239 --> 00:03:16,879
so here the reconfigurable routing and

90
00:03:15,120 --> 00:03:20,400
the lookup tables and so

91
00:03:16,879 --> 00:03:22,079
everything is placed here and there is a

92
00:03:20,400 --> 00:03:25,120
small tiny part

93
00:03:22,080 --> 00:03:26,640
beside this fabric which oversees this

94
00:03:25,120 --> 00:03:28,239
configuration process

95
00:03:26,640 --> 00:03:29,679
and we call this the configuration

96
00:03:28,239 --> 00:03:31,840
engine

97
00:03:29,680 --> 00:03:34,640
and this configuration engine comprises

98
00:03:31,840 --> 00:03:37,040
about 20 documented registers

99
00:03:34,640 --> 00:03:38,319
which the bitstream is reading and

100
00:03:37,040 --> 00:03:41,280
writing to

101
00:03:38,319 --> 00:03:45,040
so the bitstream contains commands to

102
00:03:41,280 --> 00:03:47,680
read and write to these registers

103
00:03:45,040 --> 00:03:49,359
and as we are here in the crypto domain

104
00:03:47,680 --> 00:03:51,440
we need a decryption coil

105
00:03:49,360 --> 00:03:53,840
for the encrypted bit stream and we

106
00:03:51,440 --> 00:03:54,959
place this in front of the configuration

107
00:03:53,840 --> 00:03:57,680
engine

108
00:03:54,959 --> 00:03:59,200
so that the bitstream can be decrypted

109
00:03:57,680 --> 00:04:02,159
on the fly

110
00:03:59,200 --> 00:04:02,958
so that the configuration engine only

111
00:04:02,159 --> 00:04:06,239
sees

112
00:04:02,959 --> 00:04:08,080
decrypted content now let us program

113
00:04:06,239 --> 00:04:09,840
this example bitstream here

114
00:04:08,080 --> 00:04:11,280
to see how this programming actually

115
00:04:09,840 --> 00:04:13,599
works and first

116
00:04:11,280 --> 00:04:15,360
there is a header sent to this engine

117
00:04:13,599 --> 00:04:18,798
which basically sets up some

118
00:04:15,360 --> 00:04:21,040
registers already and then the start

119
00:04:18,798 --> 00:04:23,919
decryption command you start this

120
00:04:21,040 --> 00:04:24,800
decryption coil so now click we switch

121
00:04:23,919 --> 00:04:27,919
on

122
00:04:24,800 --> 00:04:29,759
this decryption coil so now every part

123
00:04:27,919 --> 00:04:30,639
of the bit stream is routed through this

124
00:04:29,759 --> 00:04:32,400
coil

125
00:04:30,639 --> 00:04:34,160
and decrypted on the fly so the

126
00:04:32,400 --> 00:04:37,280
configuration engine only sees

127
00:04:34,160 --> 00:04:38,960
decrypted content now and we also take a

128
00:04:37,280 --> 00:04:40,159
sneaky look inside this encrypted

129
00:04:38,960 --> 00:04:42,479
bitstream here

130
00:04:40,160 --> 00:04:43,199
and the first command here is an hmac

131
00:04:42,479 --> 00:04:46,159
header

132
00:04:43,199 --> 00:04:47,040
and this hmac ensures the authenticity

133
00:04:46,160 --> 00:04:49,600
of this

134
00:04:47,040 --> 00:04:51,840
bit stream so we can't manipulate this

135
00:04:49,600 --> 00:04:51,840
with

136
00:04:52,000 --> 00:04:56,400
then a write to the control zero

137
00:04:55,280 --> 00:04:58,799
register

138
00:04:56,400 --> 00:05:00,719
writes the next word to this register

139
00:04:58,800 --> 00:05:02,800
and this is how the commands actually

140
00:05:00,720 --> 00:05:03,759
work so we have a command to write to a

141
00:05:02,800 --> 00:05:06,800
register

142
00:05:03,759 --> 00:05:08,800
and then a number of words is written to

143
00:05:06,800 --> 00:05:12,560
this register

144
00:05:08,800 --> 00:05:15,759
and then the write to the fdri command

145
00:05:12,560 --> 00:05:16,800
actually writes all the fabric data now

146
00:05:15,759 --> 00:05:20,080
to the fabric

147
00:05:16,800 --> 00:05:22,400
so all the next words are these valuable

148
00:05:20,080 --> 00:05:24,000
lookup tables reconfigurable routing all

149
00:05:22,400 --> 00:05:26,719
the design information

150
00:05:24,000 --> 00:05:29,840
are now written to the fabric and this

151
00:05:26,720 --> 00:05:31,840
is where all the valuable ip are

152
00:05:29,840 --> 00:05:33,359
and this is what we want to attack so

153
00:05:31,840 --> 00:05:34,960
now we come to our

154
00:05:33,360 --> 00:05:36,560
first attack to breaking the

155
00:05:34,960 --> 00:05:38,479
confidentiality

156
00:05:36,560 --> 00:05:40,320
okay so here we are in the state right

157
00:05:38,479 --> 00:05:44,080
before we're issuing this

158
00:05:40,320 --> 00:05:46,639
writing to the fdi register command

159
00:05:44,080 --> 00:05:47,680
and we manipulate this command to not

160
00:05:46,639 --> 00:05:50,880
write to the

161
00:05:47,680 --> 00:05:53,280
fdri register but writing to the wb star

162
00:05:50,880 --> 00:05:55,680
register instead

163
00:05:53,280 --> 00:05:58,559
and we can just do so by exploiting the

164
00:05:55,680 --> 00:06:01,600
cbc mobility

165
00:05:58,560 --> 00:06:02,400
okay so now let us issuing this command

166
00:06:01,600 --> 00:06:05,520
here

167
00:06:02,400 --> 00:06:06,000
so that now the following words are not

168
00:06:05,520 --> 00:06:08,880
written to

169
00:06:06,000 --> 00:06:10,639
the fabric but written to this wb star

170
00:06:08,880 --> 00:06:13,919
register

171
00:06:10,639 --> 00:06:17,199
so now the wb star register holds the

172
00:06:13,919 --> 00:06:19,599
decrypted fabric data

173
00:06:17,199 --> 00:06:21,280
in a decrypted way so they are the

174
00:06:19,600 --> 00:06:25,199
valuable plaintext data

175
00:06:21,280 --> 00:06:27,039
in this register and then we just

176
00:06:25,199 --> 00:06:28,240
cut the bitstream to not write any more

177
00:06:27,039 --> 00:06:32,400
data to this

178
00:06:28,240 --> 00:06:34,470
register but we still have to send this

179
00:06:32,400 --> 00:06:35,599
hmac tag

180
00:06:34,470 --> 00:06:38,080
[Music]

181
00:06:35,600 --> 00:06:39,520
and the fpga checks then the

182
00:06:38,080 --> 00:06:41,520
authenticity

183
00:06:39,520 --> 00:06:43,440
but obviously it fails as we have

184
00:06:41,520 --> 00:06:46,159
manipulated the bitstream

185
00:06:43,440 --> 00:06:48,400
and so the fpga resets itself as a

186
00:06:46,160 --> 00:06:50,720
security mechanism

187
00:06:48,400 --> 00:06:51,679
and now here comes the trick of our

188
00:06:50,720 --> 00:06:53,280
attack

189
00:06:51,680 --> 00:06:54,720
and therefore let us look inside the

190
00:06:53,280 --> 00:06:57,758
documentation

191
00:06:54,720 --> 00:07:00,960
and i will read out the relevant part

192
00:06:57,759 --> 00:07:02,400
so when a fallback happens an internally

193
00:07:00,960 --> 00:07:05,440
generated pulse

194
00:07:02,400 --> 00:07:08,400
resets the entire configuration logic

195
00:07:05,440 --> 00:07:09,039
except for the dedicated multiboot logic

196
00:07:08,400 --> 00:07:11,919
so this

197
00:07:09,039 --> 00:07:16,318
warmbootstart address register this wb

198
00:07:11,919 --> 00:07:18,159
star register is not reset

199
00:07:16,319 --> 00:07:19,919
okay so here we are in the state right

200
00:07:18,160 --> 00:07:23,440
before the reset happens

201
00:07:19,919 --> 00:07:26,479
and bam everything is resetted except

202
00:07:23,440 --> 00:07:30,319
this wb star register

203
00:07:26,479 --> 00:07:32,719
and this is the point now the wb star

204
00:07:30,319 --> 00:07:33,759
register holds the decrypted fabric

205
00:07:32,720 --> 00:07:35,840
content

206
00:07:33,759 --> 00:07:37,440
and it's decrypted so it's plain text

207
00:07:35,840 --> 00:07:40,239
data now

208
00:07:37,440 --> 00:07:42,319
and also the crypto core is resetted so

209
00:07:40,240 --> 00:07:45,759
we can now use a readout bitstream

210
00:07:42,319 --> 00:07:49,120
or just to issuing a readout command

211
00:07:45,759 --> 00:07:50,160
to read this wb star register and so the

212
00:07:49,120 --> 00:07:53,680
fpga

213
00:07:50,160 --> 00:07:56,560
leaks out the decrypted fabric data

214
00:07:53,680 --> 00:07:57,120
so we use this bitstream encryption

215
00:07:56,560 --> 00:08:00,879
engine

216
00:07:57,120 --> 00:08:03,360
to break the bitstream encryption engine

217
00:08:00,879 --> 00:08:05,120
okay so let's wrap up the attack first

218
00:08:03,360 --> 00:08:06,720
we have to manipulate the bitstream to

219
00:08:05,120 --> 00:08:10,560
divert the bitstream content

220
00:08:06,720 --> 00:08:11,599
to this wb star register then we have to

221
00:08:10,560 --> 00:08:15,360
configure the

222
00:08:11,599 --> 00:08:17,840
fpga with this manipulated bit stream

223
00:08:15,360 --> 00:08:18,400
which is then noticed by the fpga so

224
00:08:17,840 --> 00:08:22,000
it's

225
00:08:18,400 --> 00:08:24,080
reset it resets itself

226
00:08:22,000 --> 00:08:25,199
but we can then use the readout

227
00:08:24,080 --> 00:08:28,800
bitstream to

228
00:08:25,199 --> 00:08:31,360
read out the wb star register

229
00:08:28,800 --> 00:08:31,919
and so leaking out one bit stream world

230
00:08:31,360 --> 00:08:36,640
which is

231
00:08:31,919 --> 00:08:38,399
32 bits and then by resetting the fpga

232
00:08:36,640 --> 00:08:40,718
again manually

233
00:08:38,399 --> 00:08:42,240
and repeating all those five steps we

234
00:08:40,719 --> 00:08:45,360
can leak out the

235
00:08:42,240 --> 00:08:47,920
entire bitstream so this was our first

236
00:08:45,360 --> 00:08:49,920
attack to break the confidentiality

237
00:08:47,920 --> 00:08:52,719
and now with our second attack we will

238
00:08:49,920 --> 00:08:55,519
break the authenticity of the bitstream

239
00:08:52,720 --> 00:08:56,240
which was really straightforward as the

240
00:08:55,519 --> 00:08:58,800
hmic

241
00:08:56,240 --> 00:08:59,680
key is stored inside the bitstream

242
00:08:58,800 --> 00:09:03,359
header

243
00:08:59,680 --> 00:09:04,719
so this hmac header can be decrypted by

244
00:09:03,360 --> 00:09:07,680
our first attack

245
00:09:04,720 --> 00:09:08,320
so we can gain access to this hmac key

246
00:09:07,680 --> 00:09:11,760
and thus

247
00:09:08,320 --> 00:09:15,279
forge valid hmac text ourselves and so

248
00:09:11,760 --> 00:09:15,279
breaking the authenticity

249
00:09:15,760 --> 00:09:19,040
so what went wrong here and what are the

250
00:09:17,839 --> 00:09:22,240
root causes of

251
00:09:19,040 --> 00:09:24,959
our two attacks and first

252
00:09:22,240 --> 00:09:26,640
we have the bitstream commands

253
00:09:24,959 --> 00:09:29,279
interpreted before

254
00:09:26,640 --> 00:09:32,560
they are validated by the hmac so this

255
00:09:29,279 --> 00:09:35,360
is a standard usb4 validation attack

256
00:09:32,560 --> 00:09:35,680
and secondly the hm key is stored inside

257
00:09:35,360 --> 00:09:39,040
the

258
00:09:35,680 --> 00:09:43,040
encrypted part thus the key is

259
00:09:39,040 --> 00:09:45,839
dependent of this confidentiality

260
00:09:43,040 --> 00:09:46,880
so when we broke this confidentiality we

261
00:09:45,839 --> 00:09:50,080
also can break

262
00:09:46,880 --> 00:09:52,560
the authenticity

263
00:09:50,080 --> 00:09:53,760
but what can we do against these attacks

264
00:09:52,560 --> 00:09:55,518
in particular

265
00:09:53,760 --> 00:09:57,360
and what are more general defense

266
00:09:55,519 --> 00:10:00,720
techniques

267
00:09:57,360 --> 00:10:02,399
so first of course there doesn't exist

268
00:10:00,720 --> 00:10:04,240
any countermeasures for the current

269
00:10:02,399 --> 00:10:06,880
seven series as

270
00:10:04,240 --> 00:10:08,560
the attack is already in the silicon so

271
00:10:06,880 --> 00:10:10,640
it can't be patched

272
00:10:08,560 --> 00:10:13,119
but they exist raise the bar counter

273
00:10:10,640 --> 00:10:14,079
measures so for example obfuscating the

274
00:10:13,120 --> 00:10:18,480
design

275
00:10:14,079 --> 00:10:21,359
or a pcb modification but

276
00:10:18,480 --> 00:10:22,000
for the new series they have a complete

277
00:10:21,360 --> 00:10:25,040
new

278
00:10:22,000 --> 00:10:26,959
withstream uh encryption engine

279
00:10:25,040 --> 00:10:29,439
so they are actually validating the

280
00:10:26,959 --> 00:10:33,119
bitstream before they are using it

281
00:10:29,440 --> 00:10:35,600
so countering this root cause here

282
00:10:33,120 --> 00:10:37,600
but in a more general way we remember

283
00:10:35,600 --> 00:10:40,000
that the flaw was already visible

284
00:10:37,600 --> 00:10:42,240
in the documentation and this is how we

285
00:10:40,000 --> 00:10:42,560
all also found this vulnerability just

286
00:10:42,240 --> 00:10:46,399
by

287
00:10:42,560 --> 00:10:50,880
carefully reading the documentation

288
00:10:46,399 --> 00:10:53,839
so one should prove this entire system

289
00:10:50,880 --> 00:10:54,560
by these model checking techniques now

290
00:10:53,839 --> 00:10:57,040
since the

291
00:10:54,560 --> 00:10:59,359
underlying algorithms like a s and h

292
00:10:57,040 --> 00:11:02,719
make hold their security once again

293
00:10:59,360 --> 00:11:05,279
they are proven and thus one would avoid

294
00:11:02,720 --> 00:11:08,560
these ad hoc security designs just by

295
00:11:05,279 --> 00:11:10,880
proving the whole system design

296
00:11:08,560 --> 00:11:12,800
of course another way to improve the

297
00:11:10,880 --> 00:11:15,760
overall system security is by letting

298
00:11:12,800 --> 00:11:18,000
the community reviewing the design

299
00:11:15,760 --> 00:11:18,959
since years this is done in the crypto

300
00:11:18,000 --> 00:11:21,279
community

301
00:11:18,959 --> 00:11:23,518
as we follow kirkhof's principle so when

302
00:11:21,279 --> 00:11:26,399
a new algorithm comes out

303
00:11:23,519 --> 00:11:27,120
the whole community tries to prove and

304
00:11:26,399 --> 00:11:29,839
to attack

305
00:11:27,120 --> 00:11:29,839
this algorithm

306
00:11:30,320 --> 00:11:34,399
yeah what we have shown here is the full

307
00:11:32,240 --> 00:11:35,519
break of the xilinx 7 series bitstream

308
00:11:34,399 --> 00:11:36,959
encryption

309
00:11:35,519 --> 00:11:38,959
thank you very much for your attention

310
00:11:36,959 --> 00:11:41,279
so far and i hope you have a lot of

311
00:11:38,959 --> 00:11:54,719
questions which we can discuss on all

312
00:11:41,279 --> 00:11:54,720
the various channels

