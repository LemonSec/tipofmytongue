1
00:00:08,880 --> 00:00:12,559
hello my name is raul quinones and today

2
00:00:10,880 --> 00:00:16,160
i'm presenting securing autonomous

3
00:00:12,559 --> 00:00:18,240
vehicles with robust physical invariants

4
00:00:16,160 --> 00:00:19,279
autonomous vehicles include aerial sea

5
00:00:18,240 --> 00:00:21,279
and ground vehicles

6
00:00:19,279 --> 00:00:22,320
most people usually tend to associate

7
00:00:21,279 --> 00:00:25,279
them with

8
00:00:22,320 --> 00:00:26,400
ground vehicles but it also has a wide

9
00:00:25,279 --> 00:00:28,240
range of vehicles

10
00:00:26,400 --> 00:00:30,479
the automation range from zero to five

11
00:00:28,240 --> 00:00:30,799
with zero being absolutely no automation

12
00:00:30,480 --> 00:00:33,920
and

13
00:00:30,800 --> 00:00:35,280
5. it doesn't need any human interaction

14
00:00:33,920 --> 00:00:38,480
autonomous vehicles assess their

15
00:00:35,280 --> 00:00:40,239
environment with a variety of sensors

16
00:00:38,480 --> 00:00:41,919
the current problem that we're facing

17
00:00:40,239 --> 00:00:43,919
now is that

18
00:00:41,920 --> 00:00:46,960
these autonomous vehicles relied on

19
00:00:43,920 --> 00:00:48,879
their sensors and these sensors are not

20
00:00:46,960 --> 00:00:50,480
foolproof they can be spoofed they can

21
00:00:48,879 --> 00:00:53,599
be manipulated

22
00:00:50,480 --> 00:00:56,160
as we can see in these news articles

23
00:00:53,600 --> 00:00:57,120
so abs are vulnerable to sensor targeted

24
00:00:56,160 --> 00:00:59,680
attacks

25
00:00:57,120 --> 00:01:01,199
mainly because of the reliance on

26
00:00:59,680 --> 00:01:03,760
sensory information

27
00:01:01,199 --> 00:01:05,438
but also sensors are susceptible to gps

28
00:01:03,760 --> 00:01:08,320
spoofing and transaction attack that

29
00:01:05,438 --> 00:01:09,839
manipulates physical signals

30
00:01:08,320 --> 00:01:11,919
there has been plenty of research that

31
00:01:09,840 --> 00:01:12,479
has explored these vulnerabilities in

32
00:01:11,920 --> 00:01:17,200
cameras

33
00:01:12,479 --> 00:01:17,200
lighters raiders imus and gps

34
00:01:17,360 --> 00:01:20,720
when it comes to transaction attack

35
00:01:19,040 --> 00:01:24,560
these sensors measure

36
00:01:20,720 --> 00:01:27,039
uh the actual analog signals on the

37
00:01:24,560 --> 00:01:28,320
real world it could be magnetic optical

38
00:01:27,040 --> 00:01:30,320
or acoustic

39
00:01:28,320 --> 00:01:32,158
in order to make sense of the work but

40
00:01:30,320 --> 00:01:34,240
these signals can actually be

41
00:01:32,159 --> 00:01:36,240
manipulated by an attacker by injecting

42
00:01:34,240 --> 00:01:38,960
out of balance signals

43
00:01:36,240 --> 00:01:41,839
when it comes to gpa spoofing if a

44
00:01:38,960 --> 00:01:43,520
vehicle or a device is getting gps

45
00:01:41,840 --> 00:01:44,240
signals from different satellites that

46
00:01:43,520 --> 00:01:46,079
it's weak

47
00:01:44,240 --> 00:01:47,520
but it's also getting a spoof signal

48
00:01:46,079 --> 00:01:48,798
that is actually stronger

49
00:01:47,520 --> 00:01:51,439
it's going to believe that it's at a

50
00:01:48,799 --> 00:01:52,880
different location despite

51
00:01:51,439 --> 00:01:55,199
getting information from these

52
00:01:52,880 --> 00:01:57,039
satellites

53
00:01:55,200 --> 00:01:58,399
so the main insights of our work is that

54
00:01:57,040 --> 00:02:00,079
we're introducing xavier

55
00:01:58,399 --> 00:02:02,320
which stands for securing autonomous

56
00:02:00,079 --> 00:02:03,759
vehicles with robust physical invariants

57
00:02:02,320 --> 00:02:05,279
and it's a framework that we are

58
00:02:03,759 --> 00:02:06,159
contributing to the following four

59
00:02:05,280 --> 00:02:09,840
points

60
00:02:06,159 --> 00:02:12,000
number one we use well-known non-linear

61
00:02:09,840 --> 00:02:13,680
models to actually describe the behavior

62
00:02:12,000 --> 00:02:16,239
of ground and area vehicles

63
00:02:13,680 --> 00:02:17,200
we introduce a strong attacker that is

64
00:02:16,239 --> 00:02:19,840
able to

65
00:02:17,200 --> 00:02:21,119
attack the vehicles with a stealthy

66
00:02:19,840 --> 00:02:23,920
attacks

67
00:02:21,120 --> 00:02:24,560
we implement accumulated sum algorithm

68
00:02:23,920 --> 00:02:26,480
that

69
00:02:24,560 --> 00:02:27,840
basically improves detection of

70
00:02:26,480 --> 00:02:30,720
performance over

71
00:02:27,840 --> 00:02:31,519
previous approaches and then finally we

72
00:02:30,720 --> 00:02:34,400
implement this

73
00:02:31,519 --> 00:02:37,280
into two actual hardware devices a real

74
00:02:34,400 --> 00:02:39,280
drone and a real vehicle

75
00:02:37,280 --> 00:02:41,440
when it comes to sensors and movement

76
00:02:39,280 --> 00:02:43,440
variables the drone mainly interacts

77
00:02:41,440 --> 00:02:45,680
with three axes that would be

78
00:02:43,440 --> 00:02:47,680
x y and z and the measurements that you

79
00:02:45,680 --> 00:02:49,200
would get would be roll pitch and jaw

80
00:02:47,680 --> 00:02:51,040
the main sensors that we care about

81
00:02:49,200 --> 00:02:53,440
would be the accelerometer gyroscope

82
00:02:51,040 --> 00:02:55,440
magnetometer and gps

83
00:02:53,440 --> 00:02:57,359
when it comes to the ground vehicle the

84
00:02:55,440 --> 00:02:58,480
two main axes that it interacts with is

85
00:02:57,360 --> 00:03:00,800
the peach and the yaw

86
00:02:58,480 --> 00:03:03,200
that is the vertical movement and also

87
00:03:00,800 --> 00:03:04,000
the horizontal movement along its own

88
00:03:03,200 --> 00:03:05,839
axis

89
00:03:04,000 --> 00:03:07,120
the main sensors that we care about

90
00:03:05,840 --> 00:03:08,720
would be the line data

91
00:03:07,120 --> 00:03:10,400
the angle the position and also the

92
00:03:08,720 --> 00:03:12,560
speed here this graphic

93
00:03:10,400 --> 00:03:14,800
illustrates how it interacts with the

94
00:03:12,560 --> 00:03:17,599
main axis this would be the drone this

95
00:03:14,800 --> 00:03:20,000
would be the ground vehicle

96
00:03:17,599 --> 00:03:22,399
when it comes to describing the behavior

97
00:03:20,000 --> 00:03:24,959
of these vehicles we actually are using

98
00:03:22,400 --> 00:03:26,799
non-linear models to describe them

99
00:03:24,959 --> 00:03:29,680
and as we can see over here this would

100
00:03:26,799 --> 00:03:31,599
be the 12 differential equations for the

101
00:03:29,680 --> 00:03:33,200
dynamics of a quadcopter and this would

102
00:03:31,599 --> 00:03:34,159
be the equations to describe the

103
00:03:33,200 --> 00:03:35,839
behavior

104
00:03:34,159 --> 00:03:38,079
of the ground vehicle the reason why

105
00:03:35,840 --> 00:03:39,200
we're using nonlinear models

106
00:03:38,080 --> 00:03:41,280
is because we already have the

107
00:03:39,200 --> 00:03:43,040
mathematical models that actually

108
00:03:41,280 --> 00:03:45,120
describe the system

109
00:03:43,040 --> 00:03:47,040
just in the same way that we have the

110
00:03:45,120 --> 00:03:48,239
mathematical models that describe how an

111
00:03:47,040 --> 00:03:50,480
apple falls

112
00:03:48,239 --> 00:03:52,080
towards the ground there's no need to

113
00:03:50,480 --> 00:03:54,000
actually implement machine learning

114
00:03:52,080 --> 00:03:54,560
since we already have a good foundation

115
00:03:54,000 --> 00:03:57,680
of how

116
00:03:54,560 --> 00:03:59,439
these systems behave

117
00:03:57,680 --> 00:04:01,519
when it comes to the design of our

118
00:03:59,439 --> 00:04:04,079
savior algorithm that we're in

119
00:04:01,519 --> 00:04:05,760
introducing here it basically consists

120
00:04:04,080 --> 00:04:08,319
of mainly four parts

121
00:04:05,760 --> 00:04:09,840
number one we have an online sensor

122
00:04:08,319 --> 00:04:10,958
preprocessing because the information

123
00:04:09,840 --> 00:04:11,920
that we're getting from the sensors

124
00:04:10,959 --> 00:04:14,080
needs to be

125
00:04:11,920 --> 00:04:16,000
changed into a more readable form we

126
00:04:14,080 --> 00:04:17,519
have an offline pre-processing stage

127
00:04:16,000 --> 00:04:18,560
where we use the models previously

128
00:04:17,519 --> 00:04:21,120
discussed to

129
00:04:18,560 --> 00:04:22,079
gain and learn the physical invariance

130
00:04:21,120 --> 00:04:24,240
of the system

131
00:04:22,079 --> 00:04:26,720
we have an online stage where we predict

132
00:04:24,240 --> 00:04:28,240
measurements and compare observed values

133
00:04:26,720 --> 00:04:29,759
to make sure that we are not being

134
00:04:28,240 --> 00:04:32,000
attacked and then we

135
00:04:29,759 --> 00:04:33,600
actually have an anomaly detection

136
00:04:32,000 --> 00:04:36,560
system that will raise an alarm

137
00:04:33,600 --> 00:04:37,360
if um an anomaly is persistent in the

138
00:04:36,560 --> 00:04:39,280
system

139
00:04:37,360 --> 00:04:41,360
when it comes to the online stage we

140
00:04:39,280 --> 00:04:42,159
actually are using an extended common

141
00:04:41,360 --> 00:04:44,479
filter

142
00:04:42,160 --> 00:04:45,199
that is used to predict the physical

143
00:04:44,479 --> 00:04:47,359
behavior

144
00:04:45,199 --> 00:04:48,639
and estimate the unknown parameters from

145
00:04:47,360 --> 00:04:51,040
the noisy inputs

146
00:04:48,639 --> 00:04:53,040
of the different sensors so this

147
00:04:51,040 --> 00:04:53,919
algorithm is mainly divided into two

148
00:04:53,040 --> 00:04:56,720
routines

149
00:04:53,919 --> 00:04:58,159
number one is the prediction in which we

150
00:04:56,720 --> 00:04:58,800
actually get the measurements from the

151
00:04:58,160 --> 00:05:01,840
previous

152
00:04:58,800 --> 00:05:04,160
uh uh time and then what we do

153
00:05:01,840 --> 00:05:04,960
is that we use that to calculate and

154
00:05:04,160 --> 00:05:07,680
estimate

155
00:05:04,960 --> 00:05:09,198
what would be the next uh the next state

156
00:05:07,680 --> 00:05:11,600
of the device

157
00:05:09,199 --> 00:05:12,560
because measurements are not always 100

158
00:05:11,600 --> 00:05:14,240
accurate this

159
00:05:12,560 --> 00:05:15,680
also has a second stage that is a

160
00:05:14,240 --> 00:05:18,160
correction stage in which

161
00:05:15,680 --> 00:05:19,360
we calculate the common gain that is

162
00:05:18,160 --> 00:05:20,720
used to decide

163
00:05:19,360 --> 00:05:22,639
how much of the measurement or the

164
00:05:20,720 --> 00:05:25,280
prediction we actually

165
00:05:22,639 --> 00:05:26,000
are confident that it's correct so this

166
00:05:25,280 --> 00:05:27,440
prediction

167
00:05:26,000 --> 00:05:28,880
it's going to be compared against the

168
00:05:27,440 --> 00:05:31,759
actual values that we're getting from

169
00:05:28,880 --> 00:05:34,000
the device in real time

170
00:05:31,759 --> 00:05:34,960
as for the anomaly detection as i

171
00:05:34,000 --> 00:05:37,199
mentioned earlier

172
00:05:34,960 --> 00:05:38,000
we're using a kusum algorithm and what

173
00:05:37,199 --> 00:05:39,919
we are doing

174
00:05:38,000 --> 00:05:41,039
here is basically we're calculating the

175
00:05:39,919 --> 00:05:43,039
residuals

176
00:05:41,039 --> 00:05:44,560
between the two measurements the

177
00:05:43,039 --> 00:05:45,280
measurement that we're getting from the

178
00:05:44,560 --> 00:05:47,280
system

179
00:05:45,280 --> 00:05:49,919
and also the measurement that we are

180
00:05:47,280 --> 00:05:51,840
getting from our estimated state

181
00:05:49,919 --> 00:05:53,680
so what we do is we compare those two

182
00:05:51,840 --> 00:05:55,440
measurements and then we keep track of

183
00:05:53,680 --> 00:05:58,800
the anomalies over time

184
00:05:55,440 --> 00:06:02,000
that is if the difference is greater

185
00:05:58,800 --> 00:06:04,240
than or observed normal

186
00:06:02,000 --> 00:06:05,039
normal observed uh behavior of the

187
00:06:04,240 --> 00:06:07,600
device

188
00:06:05,039 --> 00:06:09,520
then we keep accumulating them so that

189
00:06:07,600 --> 00:06:12,400
if this change is consistent

190
00:06:09,520 --> 00:06:12,880
and it goes over a threshold that we

191
00:06:12,400 --> 00:06:14,880
gain

192
00:06:12,880 --> 00:06:16,000
from observing normal behavior we can

193
00:06:14,880 --> 00:06:20,400
say that

194
00:06:16,000 --> 00:06:22,720
the system is under attack

195
00:06:20,400 --> 00:06:25,039
when it comes to the implementation this

196
00:06:22,720 --> 00:06:25,600
is the specifics of the aerial vehicle

197
00:06:25,039 --> 00:06:27,120
but it's

198
00:06:25,600 --> 00:06:29,600
basically the same thing for the ground

199
00:06:27,120 --> 00:06:31,440
vehicle so both controllers follow and

200
00:06:29,600 --> 00:06:33,280
publish a subscribe architecture in

201
00:06:31,440 --> 00:06:34,960
which the modules communicate with each

202
00:06:33,280 --> 00:06:36,479
other by publishing topics and

203
00:06:34,960 --> 00:06:38,239
subscribing to those topics

204
00:06:36,479 --> 00:06:40,318
the main topics of interest for this

205
00:06:38,240 --> 00:06:42,880
example would be the sensor combined

206
00:06:40,319 --> 00:06:44,800
gp a vehicle gps position and vehicle

207
00:06:42,880 --> 00:06:46,880
magnetometer

208
00:06:44,800 --> 00:06:48,080
so the anomaly detector is situated

209
00:06:46,880 --> 00:06:49,680
right here at this location

210
00:06:48,080 --> 00:06:51,359
where it gets the information it

211
00:06:49,680 --> 00:06:52,639
pre-processes it it gives it to the

212
00:06:51,360 --> 00:06:55,759
extent account filter

213
00:06:52,639 --> 00:06:57,520
it break it estimates a prediction it

214
00:06:55,759 --> 00:06:58,639
compares it with real values and then it

215
00:06:57,520 --> 00:07:02,240
takes a look at

216
00:06:58,639 --> 00:07:04,560
how those values are compare against the

217
00:07:02,240 --> 00:07:06,720
actual measurements

218
00:07:04,560 --> 00:07:07,759
when it comes to the evaluation we

219
00:07:06,720 --> 00:07:10,800
implemented this

220
00:07:07,759 --> 00:07:13,599
into the intel ir rate of flight drone

221
00:07:10,800 --> 00:07:14,240
and a custom build card that we had at

222
00:07:13,599 --> 00:07:18,159
the lab

223
00:07:14,240 --> 00:07:20,560
it's running a ross kinetic king

224
00:07:18,160 --> 00:07:22,400
so on the specific example i'm gonna go

225
00:07:20,560 --> 00:07:23,360
ahead and play this video that shows how

226
00:07:22,400 --> 00:07:27,440
the attack

227
00:07:23,360 --> 00:07:27,440
it's performed on the car

228
00:07:29,599 --> 00:07:33,520
as we can see over here on the top right

229
00:07:31,759 --> 00:07:35,840
hand we can see the kusum algorithm the

230
00:07:33,520 --> 00:07:37,359
car is just following the line

231
00:07:35,840 --> 00:07:39,280
and basically we're gonna go ahead and

232
00:07:37,360 --> 00:07:41,360
inject uh image

233
00:07:39,280 --> 00:07:42,479
inside of the car to actually go ahead

234
00:07:41,360 --> 00:07:44,639
and divert the car

235
00:07:42,479 --> 00:07:47,758
the kusum algorithm is able to detect

236
00:07:44,639 --> 00:07:50,400
those uh growth not men

237
00:07:47,759 --> 00:07:51,840
and it was able to detect it we reset it

238
00:07:50,400 --> 00:07:54,080
and then it's able to detect it again

239
00:07:51,840 --> 00:07:55,919
because the attack is consistent

240
00:07:54,080 --> 00:07:57,359
when it comes to the drone this is an

241
00:07:55,919 --> 00:08:00,080
example of one of the attacks that we

242
00:07:57,360 --> 00:08:02,879
were able to perform on the gps

243
00:08:00,080 --> 00:08:04,560
so basically this is the flight starting

244
00:08:02,879 --> 00:08:06,080
this is where we start the attack and

245
00:08:04,560 --> 00:08:06,800
this is the final destination of the

246
00:08:06,080 --> 00:08:09,039
drone

247
00:08:06,800 --> 00:08:11,440
what we ended up doing we faked a gps

248
00:08:09,039 --> 00:08:14,318
signal that basically there's a period

249
00:08:11,440 --> 00:08:16,160
of a gps timeout once a gps timeout

250
00:08:14,319 --> 00:08:17,680
happens it starts deleting the wrong

251
00:08:16,160 --> 00:08:20,080
information of the gps

252
00:08:17,680 --> 00:08:20,879
and it starts correcting but the issue

253
00:08:20,080 --> 00:08:23,440
is that

254
00:08:20,879 --> 00:08:24,400
what it start correcting is that uh

255
00:08:23,440 --> 00:08:27,919
basically

256
00:08:24,400 --> 00:08:30,159
it never moved the signal was proved

257
00:08:27,919 --> 00:08:31,440
and the device ends up at a different

258
00:08:30,160 --> 00:08:34,159
location

259
00:08:31,440 --> 00:08:34,880
right over here and we can see here how

260
00:08:34,159 --> 00:08:37,760
basically

261
00:08:34,880 --> 00:08:38,719
the attack is being detected here at 10

262
00:08:37,760 --> 00:08:40,640
50 seconds

263
00:08:38,719 --> 00:08:42,800
so the attack is launched here as you

264
00:08:40,640 --> 00:08:45,120
can see the abrupt moment on the x axis

265
00:08:42,799 --> 00:08:47,439
and the abrupt moment on the y axis

266
00:08:45,120 --> 00:08:48,480
and then basically this is the kusum

267
00:08:47,440 --> 00:08:50,320
algorithm

268
00:08:48,480 --> 00:08:51,839
actually saying that there has been an

269
00:08:50,320 --> 00:08:53,360
attack

270
00:08:51,839 --> 00:08:55,279
because we have to have a baseline to

271
00:08:53,360 --> 00:08:56,720
compare our method in order to make sure

272
00:08:55,279 --> 00:08:57,120
that we're improving the state of the

273
00:08:56,720 --> 00:09:00,240
art

274
00:08:57,120 --> 00:09:03,519
we decided to compare this with a

275
00:09:00,240 --> 00:09:05,200
choice uh algorithm as a baseline

276
00:09:03,519 --> 00:09:06,959
because they that was the state of the

277
00:09:05,200 --> 00:09:10,320
art at the time of this

278
00:09:06,959 --> 00:09:14,160
work because our model uses nonlinear

279
00:09:10,320 --> 00:09:16,480
models we are calling ourselves nlc

280
00:09:14,160 --> 00:09:17,920
right here and because choi uses linear

281
00:09:16,480 --> 00:09:21,360
models on time windows

282
00:09:17,920 --> 00:09:23,519
we're calling their approach ltw

283
00:09:21,360 --> 00:09:25,519
so as we can see over here this would be

284
00:09:23,519 --> 00:09:27,839
how the sensor measurements are able

285
00:09:25,519 --> 00:09:29,440
to compare against both of them the

286
00:09:27,839 --> 00:09:31,200
black would be the non-linear and the

287
00:09:29,440 --> 00:09:33,120
yellow would be the linear

288
00:09:31,200 --> 00:09:34,320
so as you can see the black is able to

289
00:09:33,120 --> 00:09:37,360
follow the process

290
00:09:34,320 --> 00:09:39,279
along a little bit better when it comes

291
00:09:37,360 --> 00:09:41,200
to roc and detection time

292
00:09:39,279 --> 00:09:43,040
we can also see that our methods are

293
00:09:41,200 --> 00:09:46,399
able to detect attacks faster

294
00:09:43,040 --> 00:09:46,800
and have less amount of false positive

295
00:09:46,399 --> 00:09:48,720
rate

296
00:09:46,800 --> 00:09:50,000
and be able to attack detect most of the

297
00:09:48,720 --> 00:09:52,880
attacks the same thing

298
00:09:50,000 --> 00:09:53,440
happens on the ground vehicle where we

299
00:09:52,880 --> 00:09:55,200
can see

300
00:09:53,440 --> 00:09:56,880
that the orange line would be the

301
00:09:55,200 --> 00:09:58,640
baseline and our implementation would be

302
00:09:56,880 --> 00:10:00,240
the blue line

303
00:09:58,640 --> 00:10:02,000
when it comes to selfie attacks what we

304
00:10:00,240 --> 00:10:04,160
wanted to do we wanted to create a

305
00:10:02,000 --> 00:10:05,360
powerful attacker that is able to attack

306
00:10:04,160 --> 00:10:07,680
the system

307
00:10:05,360 --> 00:10:08,959
in a way that he doesn't he remains

308
00:10:07,680 --> 00:10:10,800
undetected

309
00:10:08,959 --> 00:10:12,719
and basically trying to affect the

310
00:10:10,800 --> 00:10:15,519
system as much as possible

311
00:10:12,720 --> 00:10:17,680
when it comes to stealthy attacks we

312
00:10:15,519 --> 00:10:18,160
basically found out that our approach is

313
00:10:17,680 --> 00:10:20,959
able

314
00:10:18,160 --> 00:10:22,480
to discourage these types of attacks in

315
00:10:20,959 --> 00:10:23,599
a way that the system doesn't get

316
00:10:22,480 --> 00:10:26,640
affected as much

317
00:10:23,600 --> 00:10:28,800
because of the custom algorithm that

318
00:10:26,640 --> 00:10:30,880
keeps track of all those discrepancies

319
00:10:28,800 --> 00:10:32,240
against a time window algorithm that

320
00:10:30,880 --> 00:10:33,439
with smaller attacks it would take

321
00:10:32,240 --> 00:10:35,440
longer to detect

322
00:10:33,440 --> 00:10:37,279
and as we can see over here at the

323
00:10:35,440 --> 00:10:40,480
bottom

324
00:10:37,279 --> 00:10:41,920
this is about sensors so we are able to

325
00:10:40,480 --> 00:10:44,000
once the attack is launched we're able

326
00:10:41,920 --> 00:10:45,760
to stay within the boundaries longer

327
00:10:44,000 --> 00:10:47,519
and then this attack is based on

328
00:10:45,760 --> 00:10:50,079
position so

329
00:10:47,519 --> 00:10:50,880
the attack it is able to manipulate the

330
00:10:50,079 --> 00:10:53,839
position

331
00:10:50,880 --> 00:10:55,760
less before meta than reducing just

332
00:10:53,839 --> 00:10:57,200
linear models

333
00:10:55,760 --> 00:10:59,040
when it comes to the overhead of our

334
00:10:57,200 --> 00:11:01,760
system the drone

335
00:10:59,040 --> 00:11:03,599
has an average overhead of 5.4 and on

336
00:11:01,760 --> 00:11:04,720
the ground vehicle an average overhead

337
00:11:03,600 --> 00:11:07,760
of 2.5

338
00:11:04,720 --> 00:11:08,959
and this is cpu utilization so to

339
00:11:07,760 --> 00:11:11,200
conclude the main

340
00:11:08,959 --> 00:11:13,279
uh takeaways from our approach is that

341
00:11:11,200 --> 00:11:14,160
we're using uh well-known physical and

342
00:11:13,279 --> 00:11:16,640
variants

343
00:11:14,160 --> 00:11:18,240
we're using non-linear models and we use

344
00:11:16,640 --> 00:11:21,519
a system identification

345
00:11:18,240 --> 00:11:24,079
offline finally we use a kusum algorithm

346
00:11:21,519 --> 00:11:25,839
to keep track of these discrepancies

347
00:11:24,079 --> 00:11:27,279
and we evaluate the effectiveness of

348
00:11:25,839 --> 00:11:29,760
stealthy attacks

349
00:11:27,279 --> 00:11:31,760
so our code is available right here and

350
00:11:29,760 --> 00:11:34,560
also we have some more videos

351
00:11:31,760 --> 00:11:35,200
this is the contact information of our

352
00:11:34,560 --> 00:11:37,359
team

353
00:11:35,200 --> 00:11:39,279
and um thank you very much for coming to

354
00:11:37,360 --> 00:11:40,880
this talk and if you have any questions

355
00:11:39,279 --> 00:11:43,839
i'll be glad to answer them

356
00:11:40,880 --> 00:11:43,839
at the appropriate time

