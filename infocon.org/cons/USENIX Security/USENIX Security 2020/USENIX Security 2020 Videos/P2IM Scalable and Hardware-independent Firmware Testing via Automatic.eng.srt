1
00:00:09,200 --> 00:00:13,120
hello everyone

2
00:00:10,400 --> 00:00:15,120
today i'm presenting our paper pin

3
00:00:13,120 --> 00:00:16,400
scalable and hardware independent

4
00:00:15,120 --> 00:00:18,720
firmware testing

5
00:00:16,400 --> 00:00:19,759
while automatically peripheral interface

6
00:00:18,720 --> 00:00:22,000
modeling

7
00:00:19,760 --> 00:00:23,840
this work is collaborated with my

8
00:00:22,000 --> 00:00:27,198
colleague alejandro mira

9
00:00:23,840 --> 00:00:30,240
and my advisor long lu

10
00:00:27,199 --> 00:00:31,760
microcontroller or mcu for short is

11
00:00:30,240 --> 00:00:34,160
ubiquitous

12
00:00:31,760 --> 00:00:35,360
it's a single chip computer that is

13
00:00:34,160 --> 00:00:38,640
widely used

14
00:00:35,360 --> 00:00:42,320
in embedded devices such as iot medical

15
00:00:38,640 --> 00:00:44,160
or industry control devices msu becomes

16
00:00:42,320 --> 00:00:45,039
popular because of its rich

17
00:00:44,160 --> 00:00:48,519
functionality

18
00:00:45,039 --> 00:00:51,520
and low cost in 2018

19
00:00:48,520 --> 00:00:55,920
28.1 billion mcus are sold

20
00:00:51,520 --> 00:00:56,879
worldwide recent years have seen a

21
00:00:55,920 --> 00:01:00,960
growing number of

22
00:00:56,879 --> 00:01:02,718
mcu vulnerabilities for example in 2018

23
00:01:00,960 --> 00:01:04,320
a buffer overflow vulnerability was

24
00:01:02,719 --> 00:01:06,320
found on three rtox

25
00:01:04,319 --> 00:01:08,320
which is a popular operating system for

26
00:01:06,320 --> 00:01:10,158
mcu devices

27
00:01:08,320 --> 00:01:11,520
the vulnerability allows remote

28
00:01:10,159 --> 00:01:15,759
attackers to

29
00:01:11,520 --> 00:01:18,560
execute arbitrary code on the mcu

30
00:01:15,759 --> 00:01:20,000
actually mc1 abilities can cause not

31
00:01:18,560 --> 00:01:22,640
only digital damage

32
00:01:20,000 --> 00:01:23,680
such as privacy leakage but also

33
00:01:22,640 --> 00:01:27,040
physical damage

34
00:01:23,680 --> 00:01:29,040
such as human injury it's worthwhile to

35
00:01:27,040 --> 00:01:31,920
mention that most vulnerabilities are

36
00:01:29,040 --> 00:01:31,920
from firmware

37
00:01:32,640 --> 00:01:38,079
so what is mcu firmware mcu firmware

38
00:01:35,920 --> 00:01:39,200
contains the whole software stack of the

39
00:01:38,079 --> 00:01:41,279
mcu

40
00:01:39,200 --> 00:01:42,399
it includes components such as

41
00:01:41,280 --> 00:01:46,159
application

42
00:01:42,399 --> 00:01:50,799
library operating system and driver

43
00:01:46,159 --> 00:01:50,799
box can appear in any of its components

44
00:01:51,439 --> 00:01:56,719
fuzzing azure dynamic analysis approach

45
00:01:54,479 --> 00:01:58,880
is proven to be effective at finding

46
00:01:56,719 --> 00:02:01,439
bugs on desktop programs

47
00:01:58,880 --> 00:02:02,798
as firmware has similar bugs to desktop

48
00:02:01,439 --> 00:02:05,839
programs

49
00:02:02,799 --> 00:02:07,759
we test firmware with fuzzers

50
00:02:05,840 --> 00:02:08,878
firmware can be tested either on a

51
00:02:07,759 --> 00:02:12,239
device or

52
00:02:08,878 --> 00:02:14,239
emulator however because of limited

53
00:02:12,239 --> 00:02:18,560
resources on mcu

54
00:02:14,239 --> 00:02:18,560
on device fuzzing is not feasible

55
00:02:18,959 --> 00:02:22,879
the other solution is testing firmware

56
00:02:21,280 --> 00:02:25,040
in an emulator

57
00:02:22,879 --> 00:02:25,920
the emulator should emulate mcu

58
00:02:25,040 --> 00:02:28,640
components

59
00:02:25,920 --> 00:02:30,799
including processor peripheral and the

60
00:02:28,640 --> 00:02:32,640
interface between the two

61
00:02:30,800 --> 00:02:34,480
there are two types of interface

62
00:02:32,640 --> 00:02:36,720
register and interrupt

63
00:02:34,480 --> 00:02:39,679
it's worth noting that registers are

64
00:02:36,720 --> 00:02:43,200
defined by peripherals for all purposes

65
00:02:39,680 --> 00:02:46,239
they are not cpu registers

66
00:02:43,200 --> 00:02:47,440
however emulators do not emulate the

67
00:02:46,239 --> 00:02:50,080
peripherals

68
00:02:47,440 --> 00:02:51,440
because peripherals are diverse and hard

69
00:02:50,080 --> 00:02:54,080
to emulate

70
00:02:51,440 --> 00:02:56,640
as a result firmware cannot boot in the

71
00:02:54,080 --> 00:02:56,640
emulator

72
00:02:56,959 --> 00:03:01,680
to solve the problem multiple types of

73
00:02:59,519 --> 00:03:03,760
solutions have been proposed

74
00:03:01,680 --> 00:03:04,879
the first type of solution is peripheral

75
00:03:03,760 --> 00:03:06,959
emulation

76
00:03:04,879 --> 00:03:09,440
which emulates peripheral hardware by

77
00:03:06,959 --> 00:03:12,400
software components in the emulator

78
00:03:09,440 --> 00:03:14,239
however they can only provide incomplete

79
00:03:12,400 --> 00:03:16,720
support for peripherals

80
00:03:14,239 --> 00:03:19,760
besides they require significant many

81
00:03:16,720 --> 00:03:22,000
efforts for each peripheral

82
00:03:19,760 --> 00:03:23,679
the second law of work is hardware in

83
00:03:22,000 --> 00:03:25,440
the loop emulation

84
00:03:23,680 --> 00:03:28,159
they use real peripheral hardware to

85
00:03:25,440 --> 00:03:30,879
handle peripheral access in the emulator

86
00:03:28,159 --> 00:03:31,599
the limitation is because of using real

87
00:03:30,879 --> 00:03:35,760
hardware

88
00:03:31,599 --> 00:03:37,760
the testing is slow and unscalable

89
00:03:35,760 --> 00:03:38,798
the third law of work is partial

90
00:03:37,760 --> 00:03:40,319
emulation

91
00:03:38,799 --> 00:03:42,000
in which they replace peripheral

92
00:03:40,319 --> 00:03:44,319
dependent former code

93
00:03:42,000 --> 00:03:46,959
with software stops that implements the

94
00:03:44,319 --> 00:03:49,040
same functionalities in this way

95
00:03:46,959 --> 00:03:50,640
they don't have to emulate the

96
00:03:49,040 --> 00:03:52,798
peripherals

97
00:03:50,640 --> 00:03:54,559
the limitation is they cannot test

98
00:03:52,799 --> 00:03:58,840
peripheral dependent code

99
00:03:54,560 --> 00:04:01,840
besides significant manual effort is

100
00:03:58,840 --> 00:04:03,439
needed to overcome the limitations of

101
00:04:01,840 --> 00:04:06,080
previous work

102
00:04:03,439 --> 00:04:08,640
we set four design goals the first goal

103
00:04:06,080 --> 00:04:10,879
is to make it automatic

104
00:04:08,640 --> 00:04:12,238
compared to the desktop program there

105
00:04:10,879 --> 00:04:15,120
are a larger number of

106
00:04:12,239 --> 00:04:17,120
cu devices need to be tested however

107
00:04:15,120 --> 00:04:19,840
former developers have less time

108
00:04:17,120 --> 00:04:21,280
and money budget for testing with an

109
00:04:19,839 --> 00:04:23,440
automated solution

110
00:04:21,279 --> 00:04:25,280
human efforts needed for testing can be

111
00:04:23,440 --> 00:04:27,840
minimized

112
00:04:25,280 --> 00:04:28,559
the next goal is hardware independent

113
00:04:27,840 --> 00:04:31,280
meaning that

114
00:04:28,560 --> 00:04:31,600
firmware is tested in the emulator and

115
00:04:31,280 --> 00:04:34,239
no

116
00:04:31,600 --> 00:04:36,160
real hardware is needed this makes

117
00:04:34,240 --> 00:04:39,759
firmware testing faster

118
00:04:36,160 --> 00:04:42,880
and easier to automate the third goal

119
00:04:39,759 --> 00:04:43,919
is peripheral agnostic as privileges are

120
00:04:42,880 --> 00:04:46,320
their worst

121
00:04:43,919 --> 00:04:48,320
an effective approach is to handle them

122
00:04:46,320 --> 00:04:51,360
in a uniform way

123
00:04:48,320 --> 00:04:53,680
additionally no extra effort is required

124
00:04:51,360 --> 00:04:56,560
for new peripherals

125
00:04:53,680 --> 00:04:58,160
last a scalable solution can help to

126
00:04:56,560 --> 00:04:59,759
improve code calories by running

127
00:04:58,160 --> 00:05:03,280
multiple further instances

128
00:04:59,759 --> 00:05:06,560
in parallel to achieve

129
00:05:03,280 --> 00:05:10,559
our goals we first observe the behavior

130
00:05:06,560 --> 00:05:12,880
of peripherals and interface we found

131
00:05:10,560 --> 00:05:14,800
peripherals out there words in terms of

132
00:05:12,880 --> 00:05:18,479
type and functionality

133
00:05:14,800 --> 00:05:18,479
but interface is not

134
00:05:18,560 --> 00:05:23,759
based on our observation we present a

135
00:05:21,199 --> 00:05:25,680
solution focusing on the interface

136
00:05:23,759 --> 00:05:27,360
instead of peripherals that existing

137
00:05:25,680 --> 00:05:29,600
solution do

138
00:05:27,360 --> 00:05:32,080
therefore we don't need to emulate any

139
00:05:29,600 --> 00:05:34,880
peripherals

140
00:05:32,080 --> 00:05:36,159
the key idea is we treat peripherals as

141
00:05:34,880 --> 00:05:38,880
black box

142
00:05:36,160 --> 00:05:40,639
and we abstract a model to uniformly

143
00:05:38,880 --> 00:05:42,880
handle register access

144
00:05:40,639 --> 00:05:45,520
and interrupt firing for a wide range of

145
00:05:42,880 --> 00:05:45,520
peripherals

146
00:05:46,080 --> 00:05:49,199
our solution can achieve all the design

147
00:05:48,320 --> 00:05:51,919
goals

148
00:05:49,199 --> 00:05:52,960
while the state of the art works can

149
00:05:51,919 --> 00:05:56,479
only

150
00:05:52,960 --> 00:05:56,479
achieve them partially

151
00:05:57,520 --> 00:06:01,120
in our workflow the first step is to

152
00:05:59,759 --> 00:06:03,360
model the interface

153
00:06:01,120 --> 00:06:04,240
so that the firmware can execute in the

154
00:06:03,360 --> 00:06:08,080
emulator

155
00:06:04,240 --> 00:06:08,080
and perform peripheral operations

156
00:06:08,880 --> 00:06:12,560
modeling the interface is not easy we

157
00:06:11,840 --> 00:06:14,880
realize

158
00:06:12,560 --> 00:06:16,160
it's the peripheral that determines

159
00:06:14,880 --> 00:06:18,719
register value and

160
00:06:16,160 --> 00:06:21,840
interrupt farming timing however we

161
00:06:18,720 --> 00:06:25,120
consider peripherals as black box

162
00:06:21,840 --> 00:06:26,239
so how to model the interface in our

163
00:06:25,120 --> 00:06:28,240
solution

164
00:06:26,240 --> 00:06:31,120
registers are categorized by their

165
00:06:28,240 --> 00:06:33,440
functionalities and handled accordingly

166
00:06:31,120 --> 00:06:34,639
as for interrupts they can be fired at

167
00:06:33,440 --> 00:06:36,560
any time

168
00:06:34,639 --> 00:06:38,400
we fire the interrupts at a fixed

169
00:06:36,560 --> 00:06:41,919
frequency

170
00:06:38,400 --> 00:06:44,560
to abstract model we make many efforts

171
00:06:41,919 --> 00:06:48,000
but it only needs to be done once for

172
00:06:44,560 --> 00:06:50,160
each mcu architecture

173
00:06:48,000 --> 00:06:52,000
this slide shows the four register

174
00:06:50,160 --> 00:06:53,840
categories we defined

175
00:06:52,000 --> 00:06:55,919
after thoroughly analyzing mcu

176
00:06:53,840 --> 00:06:57,758
convention and documentation

177
00:06:55,919 --> 00:07:00,400
we believe these four categories are

178
00:06:57,759 --> 00:07:03,199
representative and comprehensive

179
00:07:00,400 --> 00:07:05,840
this hypothesis is confirmed with our

180
00:07:03,199 --> 00:07:08,880
evaluation

181
00:07:05,840 --> 00:07:10,638
the next problem is given a firmware how

182
00:07:08,880 --> 00:07:14,960
to identify the interface

183
00:07:10,639 --> 00:07:17,199
that needs to be modeled in our work

184
00:07:14,960 --> 00:07:19,840
registers used by the firmware are

185
00:07:17,199 --> 00:07:21,759
identified and categorized by monitoring

186
00:07:19,840 --> 00:07:22,880
access to the memory maps peripheral

187
00:07:21,759 --> 00:07:25,280
region

188
00:07:22,880 --> 00:07:28,240
for interrupts they are detected by

189
00:07:25,280 --> 00:07:32,880
monitoring the interrupt controller

190
00:07:28,240 --> 00:07:32,880
this is an automated process performer

191
00:07:33,599 --> 00:07:37,759
after modeling the interface the

192
00:07:35,599 --> 00:07:40,960
firmware can run in the emulator

193
00:07:37,759 --> 00:07:41,840
the next step is to do fuzzing in our

194
00:07:40,960 --> 00:07:44,318
framework

195
00:07:41,840 --> 00:07:46,400
we integrate existing fathers without

196
00:07:44,319 --> 00:07:48,960
any modification

197
00:07:46,400 --> 00:07:50,560
the inputs generated by fuzzers are fed

198
00:07:48,960 --> 00:07:51,680
into the firmware through the data

199
00:07:50,560 --> 00:07:53,840
register

200
00:07:51,680 --> 00:07:57,520
then crashing test cases are stored for

201
00:07:53,840 --> 00:07:57,520
further analysis to find bugs

202
00:07:57,759 --> 00:08:02,400
the first experiment is to evaluate the

203
00:08:00,160 --> 00:08:03,680
effectiveness of our interface modeling

204
00:08:02,400 --> 00:08:06,799
mechanism

205
00:08:03,680 --> 00:08:08,720
we collected 70 sample firmware to cover

206
00:08:06,800 --> 00:08:09,759
a wide range of essential peripheral

207
00:08:08,720 --> 00:08:12,080
operations

208
00:08:09,759 --> 00:08:13,440
such as data transmissions through user

209
00:08:12,080 --> 00:08:15,680
peripheral

210
00:08:13,440 --> 00:08:16,639
in total our test cases cover eight

211
00:08:15,680 --> 00:08:21,280
peripherals

212
00:08:16,639 --> 00:08:21,280
three mcu and three operating systems

213
00:08:21,919 --> 00:08:25,919
according to the results 79 test cases

214
00:08:25,039 --> 00:08:28,000
pause

215
00:08:25,919 --> 00:08:29,758
meaning that the majority of firmware

216
00:08:28,000 --> 00:08:32,559
can boot and performs

217
00:08:29,759 --> 00:08:33,760
essential peripheral operations normally

218
00:08:32,559 --> 00:08:36,000
in our work

219
00:08:33,760 --> 00:08:37,838
registers are categorized and handled

220
00:08:36,000 --> 00:08:39,919
based on their categories

221
00:08:37,839 --> 00:08:42,640
so it's very important to evaluate the

222
00:08:39,919 --> 00:08:45,279
accuracy of register categorization

223
00:08:42,640 --> 00:08:46,399
in our results the accuracy is between

224
00:08:45,279 --> 00:08:50,720
76

225
00:08:46,399 --> 00:08:53,200
and 92 which is great

226
00:08:50,720 --> 00:08:54,720
we also found accuracy is comparable on

227
00:08:53,200 --> 00:08:57,040
different peripherals

228
00:08:54,720 --> 00:08:58,880
indicating our mechanism is peripheral

229
00:08:57,040 --> 00:09:01,599
agnostic

230
00:08:58,880 --> 00:09:03,600
in a word our solution works well for a

231
00:09:01,600 --> 00:09:05,680
large set of sample firmware

232
00:09:03,600 --> 00:09:08,160
those frameworks execute without any

233
00:09:05,680 --> 00:09:11,439
problem on an emulator that does not

234
00:09:08,160 --> 00:09:11,439
support mcu peripherals

235
00:09:12,000 --> 00:09:16,320
we also fast test the 10 real world

236
00:09:13,920 --> 00:09:17,360
firmware the firmware are from devices

237
00:09:16,320 --> 00:09:20,720
such as drone

238
00:09:17,360 --> 00:09:20,720
robots and etc

239
00:09:21,360 --> 00:09:25,279
first the accuracy of register

240
00:09:23,279 --> 00:09:27,200
categorization on real-world formula can

241
00:09:25,279 --> 00:09:30,320
reach to a hundred percent

242
00:09:27,200 --> 00:09:33,519
second the base sig block coverage we

243
00:09:30,320 --> 00:09:35,680
achieved is up to 70 percent

244
00:09:33,519 --> 00:09:37,920
comparing to the vanilla emulator which

245
00:09:35,680 --> 00:09:41,040
does not emulate any peripherals

246
00:09:37,920 --> 00:09:43,760
the cold coverage is improved as much as

247
00:09:41,040 --> 00:09:43,760
30 times

248
00:09:44,720 --> 00:09:48,880
in our fuzzing campaign we detected

249
00:09:47,040 --> 00:09:51,360
seven unique bugs

250
00:09:48,880 --> 00:09:53,519
autobots are previously unknown and

251
00:09:51,360 --> 00:09:55,519
remotely exploitable

252
00:09:53,519 --> 00:09:57,680
we also reproduce outer box and rear

253
00:09:55,519 --> 00:09:59,440
device to make sure they are not false

254
00:09:57,680 --> 00:10:02,959
positives introduced by our

255
00:09:59,440 --> 00:10:02,959
interface modeling mechanism

256
00:10:03,279 --> 00:10:06,640
in summary we propose pim the first

257
00:10:05,920 --> 00:10:08,719
scalable

258
00:10:06,640 --> 00:10:09,760
and hardware independent former testing

259
00:10:08,720 --> 00:10:12,240
framework

260
00:10:09,760 --> 00:10:14,800
in our framework we design and implement

261
00:10:12,240 --> 00:10:16,480
a new interface modeling mechanism

262
00:10:14,800 --> 00:10:17,839
we first test the attenuate word

263
00:10:16,480 --> 00:10:19,760
firmware and found

264
00:10:17,839 --> 00:10:21,200
several previous previously unknown

265
00:10:19,760 --> 00:10:23,600
vulnerabilities

266
00:10:21,200 --> 00:10:25,920
if you are interested please check out

267
00:10:23,600 --> 00:10:30,079
our code and test the firmware at

268
00:10:25,920 --> 00:10:33,839
github thanks for your attention

269
00:10:30,079 --> 00:10:33,839
i'm happy to take any questions

