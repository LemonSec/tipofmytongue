1
00:00:08,559 --> 00:00:10,239
hi

2
00:00:08,880 --> 00:00:12,240
i'm sebastian estellard and i'm here to

3
00:00:10,240 --> 00:00:13,920
tell you about parmesan sanitizer guide

4
00:00:12,240 --> 00:00:16,000
to graybox fuzzing

5
00:00:13,920 --> 00:00:18,480
so embossing the general notion is that

6
00:00:16,000 --> 00:00:20,800
more coverage implies more bugs

7
00:00:18,480 --> 00:00:22,640
but can we do better than that well

8
00:00:20,800 --> 00:00:24,960
turns out by actively targeting

9
00:00:22,640 --> 00:00:26,320
actual bugs we're able to trigger bugs

10
00:00:24,960 --> 00:00:30,240
40 faster

11
00:00:26,320 --> 00:00:30,960
well how do we actually target bugs well

12
00:00:30,240 --> 00:00:33,839
let's take a

13
00:00:30,960 --> 00:00:35,200
step back first so when you have a

14
00:00:33,840 --> 00:00:36,719
program and you

15
00:00:35,200 --> 00:00:39,280
have some weird behavior in it you have

16
00:00:36,719 --> 00:00:41,840
some bug how do you typically

17
00:00:39,280 --> 00:00:44,160
try to find out the root cause of this

18
00:00:41,840 --> 00:00:46,640
bug how do you try to try edge the bug

19
00:00:44,160 --> 00:00:48,718
well what i typically do is i pull out

20
00:00:46,640 --> 00:00:50,800
some sanitizers i take my program

21
00:00:48,719 --> 00:00:53,039
compile it again with some sanitizer

22
00:00:50,800 --> 00:00:54,399
enabled and see whether these sanitizer

23
00:00:53,039 --> 00:00:58,800
can give me some more information

24
00:00:54,399 --> 00:01:02,079
about uh where the bug originates

25
00:00:58,800 --> 00:01:03,919
so what are these sanitizer these are

26
00:01:02,079 --> 00:01:06,799
uh development tools that are shipped by

27
00:01:03,920 --> 00:01:10,159
most modern compilers

28
00:01:06,799 --> 00:01:11,680
and these sanitizers insert some runtime

29
00:01:10,159 --> 00:01:14,000
checks for possible bugs

30
00:01:11,680 --> 00:01:16,159
so what they typically do is insert

31
00:01:14,000 --> 00:01:19,040
stuff like bounce checks or

32
00:01:16,159 --> 00:01:20,799
checks for integer overflows so if you

33
00:01:19,040 --> 00:01:23,360
look to the right here you see

34
00:01:20,799 --> 00:01:24,560
an example of a program that's first

35
00:01:23,360 --> 00:01:26,880
non-sanitized and then

36
00:01:24,560 --> 00:01:29,200
sanitized with ub sanitizer to check for

37
00:01:26,880 --> 00:01:31,280
a pointer overflow

38
00:01:29,200 --> 00:01:32,560
well there's a bunch of these uh

39
00:01:31,280 --> 00:01:34,159
sanitizers that are shipped with

40
00:01:32,560 --> 00:01:37,200
compilers and all have their own

41
00:01:34,159 --> 00:01:39,439
speciality and which bugs they're able

42
00:01:37,200 --> 00:01:42,079
to detect

43
00:01:39,439 --> 00:01:42,639
so of course these uh sanitizers are are

44
00:01:42,079 --> 00:01:44,960
already

45
00:01:42,640 --> 00:01:46,240
used in fussing uh pretty commonly so

46
00:01:44,960 --> 00:01:47,839
over the years faster

47
00:01:46,240 --> 00:01:49,360
have fusses have gotten better and

48
00:01:47,840 --> 00:01:52,000
better and better

49
00:01:49,360 --> 00:01:53,119
and at some point uh most libraries have

50
00:01:52,000 --> 00:01:55,920
been well fast

51
00:01:53,119 --> 00:01:57,439
so finding new crashes so that's the way

52
00:01:55,920 --> 00:01:58,719
typically how this feedback mechanism

53
00:01:57,439 --> 00:02:01,119
works in fasting by the way

54
00:01:58,719 --> 00:02:01,919
that you crash indicates a bug finding

55
00:02:01,119 --> 00:02:04,880
new crashes

56
00:02:01,920 --> 00:02:06,560
becomes pretty hard so at some point

57
00:02:04,880 --> 00:02:08,399
people switched over to

58
00:02:06,560 --> 00:02:09,679
actually instrumenting the targets with

59
00:02:08,399 --> 00:02:12,239
sanitizers and then

60
00:02:09,679 --> 00:02:14,959
fussing for finding uh sanitizer

61
00:02:12,239 --> 00:02:14,959
violations

62
00:02:15,040 --> 00:02:17,760
we had looked at a few different

63
00:02:16,480 --> 00:02:19,760
sanitizers and found out that they're

64
00:02:17,760 --> 00:02:22,560
actually pretty good at detecting

65
00:02:19,760 --> 00:02:24,239
most common vulnerabilities so we had a

66
00:02:22,560 --> 00:02:25,920
look at some existing vulnerabilities

67
00:02:24,239 --> 00:02:27,520
and these sanitizers are all

68
00:02:25,920 --> 00:02:29,839
they're able to find all of these

69
00:02:27,520 --> 00:02:32,080
vulnerabilities some sanitizers

70
00:02:29,840 --> 00:02:32,959
are also more targeted than others so

71
00:02:32,080 --> 00:02:36,000
they instrument

72
00:02:32,959 --> 00:02:38,400
fewer parts like less code paths fewer

73
00:02:36,000 --> 00:02:40,160
parts fewer basic blocks of the program

74
00:02:38,400 --> 00:02:41,920
so they're actually really targeted

75
00:02:40,160 --> 00:02:43,440
and insert instrumentation only at

76
00:02:41,920 --> 00:02:45,599
points where there's a high probability

77
00:02:43,440 --> 00:02:47,680
of there being a bug

78
00:02:45,599 --> 00:02:49,760
so what we're going to do is actively

79
00:02:47,680 --> 00:02:50,879
target these sanitizer checks through

80
00:02:49,760 --> 00:02:52,640
fuzzing

81
00:02:50,879 --> 00:02:55,280
that's where parmesan enters the game so

82
00:02:52,640 --> 00:02:56,319
parmesan consists of two main phases an

83
00:02:55,280 --> 00:02:58,640
offline phase

84
00:02:56,319 --> 00:03:01,119
and an online phase with uh three main

85
00:02:58,640 --> 00:03:02,640
components so the offline phase

86
00:03:01,120 --> 00:03:04,640
in the flying phase we do target

87
00:03:02,640 --> 00:03:06,000
acquisition where we try to acquire the

88
00:03:04,640 --> 00:03:07,839
targets that we actually want to reach

89
00:03:06,000 --> 00:03:09,360
in the online phase

90
00:03:07,840 --> 00:03:11,760
so in online phase we have the faster

91
00:03:09,360 --> 00:03:14,480
which works in cooperation with the

92
00:03:11,760 --> 00:03:16,480
dynamic control flow graph to actually

93
00:03:14,480 --> 00:03:19,040
steer the fussing process towards these

94
00:03:16,480 --> 00:03:21,359
targets that we acquired

95
00:03:19,040 --> 00:03:22,799
so let's have a look at target

96
00:03:21,360 --> 00:03:24,400
acquisition how do we actually

97
00:03:22,800 --> 00:03:26,080
find these targets that we want to reach

98
00:03:24,400 --> 00:03:28,480
with fussing well

99
00:03:26,080 --> 00:03:29,440
as i already might have mentioned what

100
00:03:28,480 --> 00:03:31,200
we want to do is

101
00:03:29,440 --> 00:03:33,840
target sanitizer check so we target

102
00:03:31,200 --> 00:03:36,238
branches where sanitizers insert some

103
00:03:33,840 --> 00:03:38,319
instrumentation

104
00:03:36,239 --> 00:03:40,560
so how do we find these things well

105
00:03:38,319 --> 00:03:43,200
luckily that's fairly simple

106
00:03:40,560 --> 00:03:44,319
you take an existing program you get the

107
00:03:43,200 --> 00:03:46,319
llvmir

108
00:03:44,319 --> 00:03:48,480
then you take the same program uh

109
00:03:46,319 --> 00:03:49,518
compile it with the sanitizer and take

110
00:03:48,480 --> 00:03:52,079
diff of the

111
00:03:49,519 --> 00:03:53,439
lvm ir and luckily there's this llvm div

112
00:03:52,080 --> 00:03:56,560
tool so you can extract

113
00:03:53,439 --> 00:04:00,079
the exact points where sanitizers insert

114
00:03:56,560 --> 00:04:01,519
some instrumentations

115
00:04:00,080 --> 00:04:03,760
the nice thing about this is of course

116
00:04:01,519 --> 00:04:04,159
it works for any kind of sanitizer so

117
00:04:03,760 --> 00:04:05,599
you

118
00:04:04,159 --> 00:04:07,599
you can instrument your program with

119
00:04:05,599 --> 00:04:08,959
whatever sanitizer extract the targets

120
00:04:07,599 --> 00:04:10,000
and then try to reach these things so

121
00:04:08,959 --> 00:04:12,480
it's very generic

122
00:04:10,000 --> 00:04:13,439
this approach so let's have a look at

123
00:04:12,480 --> 00:04:15,840
how

124
00:04:13,439 --> 00:04:17,040
we typically would fuss a program walk

125
00:04:15,840 --> 00:04:19,759
through a program through and

126
00:04:17,040 --> 00:04:20,479
reach these sanitizer checks so if we're

127
00:04:19,759 --> 00:04:22,960
in a

128
00:04:20,478 --> 00:04:24,560
pure coverage guided normal fuzzer what

129
00:04:22,960 --> 00:04:26,239
it would do is do a kind of

130
00:04:24,560 --> 00:04:28,479
breadth first search through the program

131
00:04:26,240 --> 00:04:29,360
trying to flip branches one at a time as

132
00:04:28,479 --> 00:04:31,280
it goes along

133
00:04:29,360 --> 00:04:32,800
so it would like walk something like

134
00:04:31,280 --> 00:04:34,638
this through the program

135
00:04:32,800 --> 00:04:36,560
and at some point it reaches some of the

136
00:04:34,639 --> 00:04:37,600
targets then it fusses a large part of

137
00:04:36,560 --> 00:04:39,360
the program

138
00:04:37,600 --> 00:04:41,520
continues on until it has reached all

139
00:04:39,360 --> 00:04:43,680
its targets

140
00:04:41,520 --> 00:04:44,639
atari like a more directed approach

141
00:04:43,680 --> 00:04:46,400
target approach

142
00:04:44,639 --> 00:04:48,000
uh in on the other hand has some more

143
00:04:46,400 --> 00:04:49,599
inside knowledge of where the actual

144
00:04:48,000 --> 00:04:51,360
targets are that we want to reach

145
00:04:49,600 --> 00:04:53,199
uh so we usually have we have a notion

146
00:04:51,360 --> 00:04:55,120
of distance to the targets

147
00:04:53,199 --> 00:04:57,199
and what we do is simply try to flip

148
00:04:55,120 --> 00:04:58,479
branches that have a low distance to the

149
00:04:57,199 --> 00:04:59,759
targets that we want to reach so a

150
00:04:58,479 --> 00:05:00,719
direct approach would do something like

151
00:04:59,759 --> 00:05:03,039
this so it would

152
00:05:00,720 --> 00:05:04,960
actually try to take an agreed approach

153
00:05:03,039 --> 00:05:06,719
the first one that it wants to reach

154
00:05:04,960 --> 00:05:08,560
uh now it has reached one of the targets

155
00:05:06,720 --> 00:05:10,560
so then it tries to find another target

156
00:05:08,560 --> 00:05:13,440
that it wants to reach and so on

157
00:05:10,560 --> 00:05:15,280
and after a while it will have yeah

158
00:05:13,440 --> 00:05:17,440
might have reached all the targets

159
00:05:15,280 --> 00:05:18,960
so what you can see here is there's no

160
00:05:17,440 --> 00:05:21,280
need to explore this whole

161
00:05:18,960 --> 00:05:22,638
big part of the program uh that the

162
00:05:21,280 --> 00:05:24,000
normal coverage guy defies it would

163
00:05:22,639 --> 00:05:26,080
typically explore this because that's

164
00:05:24,000 --> 00:05:29,280
not more coverage but here we have the

165
00:05:26,080 --> 00:05:30,639
inside knowledge that well it might not

166
00:05:29,280 --> 00:05:31,919
be useful because there are no targets

167
00:05:30,639 --> 00:05:32,639
there so no targets that we want to

168
00:05:31,919 --> 00:05:34,479
reach

169
00:05:32,639 --> 00:05:36,720
so you can save a lot of time while

170
00:05:34,479 --> 00:05:38,560
fussing

171
00:05:36,720 --> 00:05:39,919
so then you might ask okay that's all

172
00:05:38,560 --> 00:05:41,759
fun but uh so you have

173
00:05:39,919 --> 00:05:43,680
you have your targets you can reach them

174
00:05:41,759 --> 00:05:44,080
okay but what about these sanitizers

175
00:05:43,680 --> 00:05:46,560
that

176
00:05:44,080 --> 00:05:47,520
insert instrumentation points all over

177
00:05:46,560 --> 00:05:51,120
the program

178
00:05:47,520 --> 00:05:52,719
uh so such as azan so typically

179
00:05:51,120 --> 00:05:54,240
is an instrumented program would look

180
00:05:52,720 --> 00:05:56,720
something like this so it

181
00:05:54,240 --> 00:05:57,440
instruments a bunch of branches all over

182
00:05:56,720 --> 00:06:00,080
the place

183
00:05:57,440 --> 00:06:00,719
and as you can see if you target these

184
00:06:00,080 --> 00:06:02,639
things

185
00:06:00,720 --> 00:06:04,880
we can do that but it's basically

186
00:06:02,639 --> 00:06:06,800
running uh coverage guided fussing so we

187
00:06:04,880 --> 00:06:09,440
have to figure out something

188
00:06:06,800 --> 00:06:10,080
to solve this issue well that's target

189
00:06:09,440 --> 00:06:12,960
pruning

190
00:06:10,080 --> 00:06:13,680
we remove some checks so that it's not

191
00:06:12,960 --> 00:06:16,638
that we don't

192
00:06:13,680 --> 00:06:17,919
really go switch over to coverage guided

193
00:06:16,639 --> 00:06:19,840
fussing in the end

194
00:06:17,919 --> 00:06:21,359
so we came up with two simple heuristics

195
00:06:19,840 --> 00:06:23,599
that we used uh for

196
00:06:21,360 --> 00:06:24,960
removing uh such targets so the first

197
00:06:23,600 --> 00:06:27,280
one is a profiling

198
00:06:24,960 --> 00:06:28,239
based one and here the intuition is that

199
00:06:27,280 --> 00:06:31,359
we want to reach

200
00:06:28,240 --> 00:06:33,680
uh targets in cold code

201
00:06:31,360 --> 00:06:35,520
uh so codepaths that are not executed

202
00:06:33,680 --> 00:06:37,120
that often so we profile our program

203
00:06:35,520 --> 00:06:38,960
with some input and then

204
00:06:37,120 --> 00:06:41,440
remove the targets that we are able to

205
00:06:38,960 --> 00:06:42,799
reach with this input

206
00:06:41,440 --> 00:06:44,080
so if you have a look at this picture

207
00:06:42,800 --> 00:06:44,800
over here to the right it's basically

208
00:06:44,080 --> 00:06:46,960
you have a

209
00:06:44,800 --> 00:06:48,319
program with a hotpath where you reach

210
00:06:46,960 --> 00:06:50,400
all these uh

211
00:06:48,319 --> 00:06:51,840
checks anyways with most of the input

212
00:06:50,400 --> 00:06:52,560
and then you have the cold pad with

213
00:06:51,840 --> 00:06:54,719
these

214
00:06:52,560 --> 00:06:55,759
targets that are outside that and we

215
00:06:54,720 --> 00:06:59,599
actually want to

216
00:06:55,759 --> 00:07:01,520
actively try to reach these rare paths

217
00:06:59,599 --> 00:07:04,560
the second uh pruning technique that we

218
00:07:01,520 --> 00:07:06,880
came up with is a complexity-based one

219
00:07:04,560 --> 00:07:09,280
and the intuition here is that if a

220
00:07:06,880 --> 00:07:11,599
certain function or basic block

221
00:07:09,280 --> 00:07:13,440
gets more instrumentation added by

222
00:07:11,599 --> 00:07:15,199
sanitizer it's probably more interesting

223
00:07:13,440 --> 00:07:16,960
since it's more complex

224
00:07:15,199 --> 00:07:18,560
and which generally would imply that

225
00:07:16,960 --> 00:07:19,440
there's a higher chance of being bugs in

226
00:07:18,560 --> 00:07:21,599
there

227
00:07:19,440 --> 00:07:22,719
so these two uh pruning techniques

228
00:07:21,599 --> 00:07:24,719
together uh

229
00:07:22,720 --> 00:07:27,120
turned out to work pretty well for what

230
00:07:24,720 --> 00:07:27,120
we want

231
00:07:27,280 --> 00:07:30,559
and as you can see we can remove a lot

232
00:07:29,199 --> 00:07:33,440
of these targets

233
00:07:30,560 --> 00:07:34,960
by using this these pruning techniques

234
00:07:33,440 --> 00:07:36,000
so going from thousands of targets to

235
00:07:34,960 --> 00:07:39,359
hundreds of targets which

236
00:07:36,000 --> 00:07:39,360
which is a bit more manageable

237
00:07:39,759 --> 00:07:43,199
so now you might say okay fine you have

238
00:07:42,479 --> 00:07:45,280
our targets

239
00:07:43,199 --> 00:07:46,479
how do we actually reach these in a

240
00:07:45,280 --> 00:07:50,000
smart way well

241
00:07:46,479 --> 00:07:53,599
what we're going to do is well we use

242
00:07:50,000 --> 00:07:55,039
uh solving well try to solve branches

243
00:07:53,599 --> 00:07:56,319
flip branches so that we can reach our

244
00:07:55,039 --> 00:07:58,400
targets

245
00:07:56,319 --> 00:07:59,919
you make use of dynamic data flow

246
00:07:58,400 --> 00:08:00,960
analysis so that we actually know which

247
00:07:59,919 --> 00:08:03,520
input bytes

248
00:08:00,960 --> 00:08:04,719
correspond to flipping a certain branch

249
00:08:03,520 --> 00:08:06,560
and then we add

250
00:08:04,720 --> 00:08:08,479
uh our distance calculation we can

251
00:08:06,560 --> 00:08:10,879
prioritize branches based on the

252
00:08:08,479 --> 00:08:14,000
distance to our targets

253
00:08:10,879 --> 00:08:16,639
so the parmesan faster let's have a

254
00:08:14,000 --> 00:08:18,720
quick look at the implementation uh we

255
00:08:16,639 --> 00:08:20,960
based our implementation on angora

256
00:08:18,720 --> 00:08:23,360
which is a coverage by based graybox

257
00:08:20,960 --> 00:08:23,359
fusser

258
00:08:24,080 --> 00:08:28,000
angora has a global cue for uh what it

259
00:08:27,199 --> 00:08:30,639
wants to fuss

260
00:08:28,000 --> 00:08:32,320
consisting of conditionals and the c

261
00:08:30,639 --> 00:08:33,360
that was used to reach that condition so

262
00:08:32,320 --> 00:08:36,320
conditional in this

263
00:08:33,360 --> 00:08:37,360
context is same thing as a branch right

264
00:08:36,320 --> 00:08:41,200
and then it sorts

265
00:08:37,360 --> 00:08:43,519
uh this whole queue of branches by

266
00:08:41,200 --> 00:08:45,519
uh how many times is that it has runners

267
00:08:43,519 --> 00:08:47,519
or try to flip a certain condition

268
00:08:45,519 --> 00:08:48,720
so in parmesan what we do instead is we

269
00:08:47,519 --> 00:08:52,080
take the same approach

270
00:08:48,720 --> 00:08:53,920
but also add the distance uh metric

271
00:08:52,080 --> 00:08:55,279
in there so we sort by number of runs

272
00:08:53,920 --> 00:08:56,560
and also by distance so that we

273
00:08:55,279 --> 00:08:59,279
prioritize

274
00:08:56,560 --> 00:09:01,839
uh branches that have a short distance

275
00:08:59,279 --> 00:09:04,240
to the targets

276
00:09:01,839 --> 00:09:04,880
and well how do we calculate this

277
00:09:04,240 --> 00:09:07,839
distance well

278
00:09:04,880 --> 00:09:09,040
using our dynamic control flow graph

279
00:09:07,839 --> 00:09:11,519
component

280
00:09:09,040 --> 00:09:12,480
which we'll i'll discuss here so first

281
00:09:11,519 --> 00:09:15,200
of all uh

282
00:09:12,480 --> 00:09:16,720
existing direct gray box faster also

283
00:09:15,200 --> 00:09:20,480
have a notion of distance right so

284
00:09:16,720 --> 00:09:21,680
efl go statically instruments the binary

285
00:09:20,480 --> 00:09:23,920
with some instrumentation that

286
00:09:21,680 --> 00:09:25,839
calculates the distance for a certain

287
00:09:23,920 --> 00:09:28,640
run of a program so

288
00:09:25,839 --> 00:09:30,160
it adds some static instrumentation to

289
00:09:28,640 --> 00:09:33,600
basic blocks to

290
00:09:30,160 --> 00:09:35,279
get out one distance metric

291
00:09:33,600 --> 00:09:37,279
but as you can see like the static

292
00:09:35,279 --> 00:09:38,880
approach is all not always

293
00:09:37,279 --> 00:09:40,800
the best part like you can have this

294
00:09:38,880 --> 00:09:41,920
pre-created approach but as all italians

295
00:09:40,800 --> 00:09:44,000
know here in the audience

296
00:09:41,920 --> 00:09:46,479
you should always like to great to your

297
00:09:44,000 --> 00:09:48,080
cheese as close to using it as possible

298
00:09:46,480 --> 00:09:50,000
so you want to go for more dynamic

299
00:09:48,080 --> 00:09:51,920
approach where you can incrementally

300
00:09:50,000 --> 00:09:53,519
improve our control flow graph as we go

301
00:09:51,920 --> 00:09:55,599
along

302
00:09:53,519 --> 00:09:56,640
but and another thing that we can do

303
00:09:55,600 --> 00:09:58,640
with this uh

304
00:09:56,640 --> 00:10:00,399
dynamic console flow graph is to fix

305
00:09:58,640 --> 00:10:03,120
indirect calls so this is often an issue

306
00:10:00,399 --> 00:10:06,480
with static distance calculation the you

307
00:10:03,120 --> 00:10:08,320
having indirect calls is a huge hurdle

308
00:10:06,480 --> 00:10:10,079
so with this approach we can actually

309
00:10:08,320 --> 00:10:13,040
know which input bytes

310
00:10:10,079 --> 00:10:13,519
determine uh a certain indirect call by

311
00:10:13,040 --> 00:10:15,199
seeing

312
00:10:13,519 --> 00:10:16,880
the branch that determines a store to a

313
00:10:15,200 --> 00:10:19,360
function pointer and

314
00:10:16,880 --> 00:10:21,519
if you fix these bytes you already know

315
00:10:19,360 --> 00:10:24,160
what the indirect call target is

316
00:10:21,519 --> 00:10:26,320
so our distance calculation will be more

317
00:10:24,160 --> 00:10:28,240
accurate

318
00:10:26,320 --> 00:10:29,600
for the evaluation uh first of all we

319
00:10:28,240 --> 00:10:31,519
evaluate against

320
00:10:29,600 --> 00:10:32,720
existing directed gray box faster such

321
00:10:31,519 --> 00:10:35,519
as afl go

322
00:10:32,720 --> 00:10:36,720
and we see that adding a dynamic data

323
00:10:35,519 --> 00:10:38,240
flow analysis

324
00:10:36,720 --> 00:10:40,079
and a dynamic control flow graph

325
00:10:38,240 --> 00:10:42,720
significantly improves uh

326
00:10:40,079 --> 00:10:44,880
how fast we can reach certain targets by

327
00:10:42,720 --> 00:10:47,040
up to 290 percent

328
00:10:44,880 --> 00:10:48,399
we also using our whole pipeline with

329
00:10:47,040 --> 00:10:50,399
target acquisition

330
00:10:48,399 --> 00:10:51,839
and the directed approach for reaching

331
00:10:50,399 --> 00:10:53,519
these targets we can

332
00:10:51,839 --> 00:10:56,000
outperform the latest defining bugs

333
00:10:53,519 --> 00:10:58,240
compared to coverage guided fasters with

334
00:10:56,000 --> 00:11:00,480
about 40

335
00:10:58,240 --> 00:11:02,240
another cool side effect is that

336
00:11:00,480 --> 00:11:03,760
depending on the sanitizer we use for

337
00:11:02,240 --> 00:11:06,640
target acquisition

338
00:11:03,760 --> 00:11:07,040
uh we can find different types of bugs

339
00:11:06,640 --> 00:11:09,040
we can

340
00:11:07,040 --> 00:11:10,719
kind of steer finding the bugs to a

341
00:11:09,040 --> 00:11:12,880
certain class of

342
00:11:10,720 --> 00:11:14,560
bugs depending on which sanitizer we

343
00:11:12,880 --> 00:11:16,160
used which is a

344
00:11:14,560 --> 00:11:18,800
pretty cool feature if you really want

345
00:11:16,160 --> 00:11:20,719
to focus on a certain class of bugs

346
00:11:18,800 --> 00:11:22,240
so in conclusion we have seen that

347
00:11:20,720 --> 00:11:23,600
off-the-shelf sanitizer is already

348
00:11:22,240 --> 00:11:25,200
commonly used when fussing

349
00:11:23,600 --> 00:11:27,120
so it makes sense to actively try to

350
00:11:25,200 --> 00:11:30,800
target these things

351
00:11:27,120 --> 00:11:32,800
add some dynamic data flow analysis and

352
00:11:30,800 --> 00:11:34,560
a dynamic cfg component to actually get

353
00:11:32,800 --> 00:11:35,120
a better distance calculation on top of

354
00:11:34,560 --> 00:11:38,000
it

355
00:11:35,120 --> 00:11:40,800
and you're able to find bugs at a

356
00:11:38,000 --> 00:11:42,880
significantly faster rate

357
00:11:40,800 --> 00:11:44,479
thank you for listening to this talk uh

358
00:11:42,880 --> 00:11:45,120
the code for parmesan is available on

359
00:11:44,480 --> 00:11:47,200
github

360
00:11:45,120 --> 00:11:48,240
uh feel free to check it out and if you

361
00:11:47,200 --> 00:11:50,160
have any more questions

362
00:11:48,240 --> 00:11:52,000
feel free to reach out to me and i'll be

363
00:11:50,160 --> 00:11:53,120
taking uh questions and answer your

364
00:11:52,000 --> 00:11:57,839
questions

365
00:11:53,120 --> 00:11:57,839
after this talk thank you

