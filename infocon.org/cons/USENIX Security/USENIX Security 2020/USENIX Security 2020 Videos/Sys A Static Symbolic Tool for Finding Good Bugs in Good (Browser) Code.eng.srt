1
00:00:09,360 --> 00:00:12,320
hi

2
00:00:10,320 --> 00:00:14,240
i'm fraser and i'll be talking about a

3
00:00:12,320 --> 00:00:15,440
combined static checking symbolic

4
00:00:14,240 --> 00:00:17,520
execution tool

5
00:00:15,440 --> 00:00:19,520
for finding bugs in browsers and other

6
00:00:17,520 --> 00:00:21,759
large code bases

7
00:00:19,520 --> 00:00:22,880
so obviously from the title our goal was

8
00:00:21,760 --> 00:00:25,599
to find interesting

9
00:00:22,880 --> 00:00:27,038
security bugs in browsers and the first

10
00:00:25,599 --> 00:00:28,720
problem we ran into

11
00:00:27,039 --> 00:00:31,119
is that browsers are some of the most

12
00:00:28,720 --> 00:00:32,558
heavily automatically tested code bases

13
00:00:31,119 --> 00:00:34,880
in existence

14
00:00:32,558 --> 00:00:36,000
the statistic i find most insane is that

15
00:00:34,880 --> 00:00:38,399
google fuzzes

16
00:00:36,000 --> 00:00:40,480
or automatically suited randomly tests

17
00:00:38,399 --> 00:00:43,680
it's chrome browser and other things

18
00:00:40,480 --> 00:00:46,959
24 7 on over 25 000

19
00:00:43,680 --> 00:00:50,160
machines as a result fuzzers have found

20
00:00:46,960 --> 00:00:51,840
thousands of security bugs in chrome

21
00:00:50,160 --> 00:00:53,199
these fuzzers run with dynamic

22
00:00:51,840 --> 00:00:55,600
sanitizers attached

23
00:00:53,199 --> 00:00:56,640
runtime tools that detect errors like

24
00:00:55,600 --> 00:00:58,480
memory corruption

25
00:00:56,640 --> 00:01:00,879
uninitialized memory and undefined

26
00:00:58,480 --> 00:01:02,559
behavior in addition to the fuzzers and

27
00:01:00,879 --> 00:01:05,119
the dynamic sanitizers

28
00:01:02,559 --> 00:01:06,158
browsers also use static tools

29
00:01:05,119 --> 00:01:08,320
conceptually

30
00:01:06,159 --> 00:01:09,360
tools that look for buggy patterns in

31
00:01:08,320 --> 00:01:12,240
source code

32
00:01:09,360 --> 00:01:14,320
firefox uses coverity and clang and has

33
00:01:12,240 --> 00:01:15,520
actually started a static analysis

34
00:01:14,320 --> 00:01:17,839
bounty program

35
00:01:15,520 --> 00:01:20,240
for submitted clang checkers that find

36
00:01:17,840 --> 00:01:22,159
new security bugs

37
00:01:20,240 --> 00:01:23,439
which naturally ties into our final

38
00:01:22,159 --> 00:01:26,400
bug-finding topic

39
00:01:23,439 --> 00:01:27,919
bug bounty programs both browsers run

40
00:01:26,400 --> 00:01:30,479
bounty programs where they pay

41
00:01:27,920 --> 00:01:32,640
anyone who reports exploitable bugs and

42
00:01:30,479 --> 00:01:35,840
both browsers participate in the annual

43
00:01:32,640 --> 00:01:37,520
pwn to own hacking competition as a

44
00:01:35,840 --> 00:01:40,159
result of this thorough regime

45
00:01:37,520 --> 00:01:42,158
we had very little luck finding browser

46
00:01:40,159 --> 00:01:43,360
security bugs with our existing checking

47
00:01:42,159 --> 00:01:45,759
tools

48
00:01:43,360 --> 00:01:48,000
specifically our existing static system

49
00:01:45,759 --> 00:01:49,600
only found a couple security bugs

50
00:01:48,000 --> 00:01:52,159
which is actually in line with other

51
00:01:49,600 --> 00:01:52,720
results for example the coverity static

52
00:01:52,159 --> 00:01:54,960
checker

53
00:01:52,720 --> 00:01:56,640
has found over 100 critical bugs in

54
00:01:54,960 --> 00:01:59,439
firefox which is great

55
00:01:56,640 --> 00:02:01,280
but hasn't found a new one since 2014

56
00:01:59,439 --> 00:02:03,360
which is less great

57
00:02:01,280 --> 00:02:04,799
this made us think more sophisticated

58
00:02:03,360 --> 00:02:07,520
reasoning would help

59
00:02:04,799 --> 00:02:08,800
we considered using symbolic execution

60
00:02:07,520 --> 00:02:11,280
conceptually quote

61
00:02:08,800 --> 00:02:11,920
running a program over all possible

62
00:02:11,280 --> 00:02:14,480
paths

63
00:02:11,920 --> 00:02:15,679
and all possible inputs this technique

64
00:02:14,480 --> 00:02:18,399
is very powerful

65
00:02:15,680 --> 00:02:20,560
but also slow and complex trying to do

66
00:02:18,400 --> 00:02:22,080
full symbolic execution on the browser

67
00:02:20,560 --> 00:02:23,760
would take until the heat depth of the

68
00:02:22,080 --> 00:02:26,080
universe

69
00:02:23,760 --> 00:02:28,160
so we developed a new approach combining

70
00:02:26,080 --> 00:02:30,720
existing techniques of static checking

71
00:02:28,160 --> 00:02:31,599
and under constrained symbolic execution

72
00:02:30,720 --> 00:02:33,519
to recap

73
00:02:31,599 --> 00:02:35,200
conceptually static checking looks for

74
00:02:33,519 --> 00:02:37,920
buggy patterns in source code

75
00:02:35,200 --> 00:02:38,560
while symbolic execution runs a program

76
00:02:37,920 --> 00:02:41,599
or path

77
00:02:38,560 --> 00:02:43,840
over all possible input values finally

78
00:02:41,599 --> 00:02:45,839
the under constrained here means

79
00:02:43,840 --> 00:02:48,879
starting the symbolic execution

80
00:02:45,840 --> 00:02:50,959
from somewhere other than main our

81
00:02:48,879 --> 00:02:51,359
approach combines these strategies by

82
00:02:50,959 --> 00:02:54,160
using

83
00:02:51,360 --> 00:02:55,680
static analysis to cheaply identify many

84
00:02:54,160 --> 00:02:57,680
possible error sites

85
00:02:55,680 --> 00:02:59,360
and then using symbolic execution to

86
00:02:57,680 --> 00:03:01,760
jump directly to those

87
00:02:59,360 --> 00:03:02,879
parasites to determine if they're real

88
00:03:01,760 --> 00:03:05,120
or not

89
00:03:02,879 --> 00:03:07,280
the system requires programmers to write

90
00:03:05,120 --> 00:03:09,519
small static extensions

91
00:03:07,280 --> 00:03:10,879
in symbolic checkers to identify

92
00:03:09,519 --> 00:03:13,040
possible bugs

93
00:03:10,879 --> 00:03:15,200
the static extensions are different from

94
00:03:13,040 --> 00:03:17,519
some traditional static checkers

95
00:03:15,200 --> 00:03:19,440
in that they're much less conservative

96
00:03:17,519 --> 00:03:21,360
their whole job is just to guide

97
00:03:19,440 --> 00:03:24,079
powerful symbolic execution

98
00:03:21,360 --> 00:03:25,280
to useful parts of the code base then

99
00:03:24,080 --> 00:03:28,239
symbolic execution

100
00:03:25,280 --> 00:03:30,000
does the heavyweight reasoning if you

101
00:03:28,239 --> 00:03:33,760
want to use the tool in practice

102
00:03:30,000 --> 00:03:36,319
this is the workflow first you provide

103
00:03:33,760 --> 00:03:37,760
it with an llvmir file with the code you

104
00:03:36,319 --> 00:03:40,560
want to check

105
00:03:37,760 --> 00:03:42,720
then you either write or use an existing

106
00:03:40,560 --> 00:03:44,840
static extension that looks for some

107
00:03:42,720 --> 00:03:46,799
suspicious or interesting pattern in the

108
00:03:44,840 --> 00:03:48,879
ir this extension

109
00:03:46,799 --> 00:03:50,480
outputs a number of suspicious paths

110
00:03:48,879 --> 00:03:52,879
within the codebase

111
00:03:50,480 --> 00:03:53,840
then the user-written or user-provided

112
00:03:52,879 --> 00:03:56,000
symbolic checker

113
00:03:53,840 --> 00:03:57,760
tries to figure out if each suspicious

114
00:03:56,000 --> 00:04:00,000
path contains a bug

115
00:03:57,760 --> 00:04:02,560
if the symbolic checker finds bugs it

116
00:04:00,000 --> 00:04:04,799
reports them to the user

117
00:04:02,560 --> 00:04:06,799
and to really understand how this works

118
00:04:04,799 --> 00:04:08,080
let's walk in detail through a bug that

119
00:04:06,799 --> 00:04:09,599
the tool found

120
00:04:08,080 --> 00:04:11,200
this bug is a high severity

121
00:04:09,599 --> 00:04:12,879
vulnerability in sqlite

122
00:04:11,200 --> 00:04:16,878
that was exploitable in the chrome

123
00:04:12,879 --> 00:04:16,879
browser and has since been patched

124
00:04:17,279 --> 00:04:21,918
this is the bug the first key line is

125
00:04:19,759 --> 00:04:24,720
this sqlite mallet call here

126
00:04:21,918 --> 00:04:26,960
which allocates some space for a the

127
00:04:24,720 --> 00:04:30,000
second key line is this mem set

128
00:04:26,960 --> 00:04:32,000
right here which initializes a and the

129
00:04:30,000 --> 00:04:33,520
problem is that the sqlite malloc takes

130
00:04:32,000 --> 00:04:35,120
a 32-bit argument

131
00:04:33,520 --> 00:04:36,880
which means that the multiplication in

132
00:04:35,120 --> 00:04:38,240
the allocation is the 32-bit

133
00:04:36,880 --> 00:04:40,159
multiplication

134
00:04:38,240 --> 00:04:42,400
in contrast the multiplication in a

135
00:04:40,160 --> 00:04:43,600
standard memset is a 64-bit

136
00:04:42,400 --> 00:04:45,679
multiplication

137
00:04:43,600 --> 00:04:47,199
this means that it's possible to craft

138
00:04:45,680 --> 00:04:48,880
very large inputs

139
00:04:47,199 --> 00:04:51,040
that will cause the 32-bit

140
00:04:48,880 --> 00:04:51,680
multiplication to wrap around to a small

141
00:04:51,040 --> 00:04:53,919
value

142
00:04:51,680 --> 00:04:55,440
without causing the 64-bit

143
00:04:53,919 --> 00:04:57,758
multiplication to wrap

144
00:04:55,440 --> 00:04:58,479
this issue leads to a very small

145
00:04:57,759 --> 00:05:00,960
allocation

146
00:04:58,479 --> 00:05:01,840
size for a and a very large out of

147
00:05:00,960 --> 00:05:04,400
bounds write

148
00:05:01,840 --> 00:05:04,400
off of a

149
00:05:04,880 --> 00:05:08,880
now let's talk about finding this bug

150
00:05:07,440 --> 00:05:10,560
the static extension

151
00:05:08,880 --> 00:05:12,400
identifies cases where there's a

152
00:05:10,560 --> 00:05:13,120
dependency between an object's

153
00:05:12,400 --> 00:05:15,758
allocation

154
00:05:13,120 --> 00:05:16,960
size and its index size just take this

155
00:05:15,759 --> 00:05:19,360
heuristic as a given

156
00:05:16,960 --> 00:05:21,520
there's more detail in the paper in the

157
00:05:19,360 --> 00:05:23,360
case of the sqlite bug the allocation

158
00:05:21,520 --> 00:05:25,198
size is a function of nstat

159
00:05:23,360 --> 00:05:27,199
and the index size is also a function of

160
00:05:25,199 --> 00:05:28,880
n-stat since there's a dependency

161
00:05:27,199 --> 00:05:30,880
obviously n-stat between these two

162
00:05:28,880 --> 00:05:32,320
values the static extension is going to

163
00:05:30,880 --> 00:05:35,120
mark this path as

164
00:05:32,320 --> 00:05:36,880
interesting the checker finds this

165
00:05:35,120 --> 00:05:38,560
pattern by walking through the program

166
00:05:36,880 --> 00:05:40,560
representation and keeping track of

167
00:05:38,560 --> 00:05:42,160
dependency information

168
00:05:40,560 --> 00:05:44,240
we give users utilities for

169
00:05:42,160 --> 00:05:45,840
automatically applying their checkers to

170
00:05:44,240 --> 00:05:47,440
that representation

171
00:05:45,840 --> 00:05:49,119
on the first line the checker is going

172
00:05:47,440 --> 00:05:52,639
to match on the mallet call

173
00:05:49,120 --> 00:05:54,960
and note the allocation size

174
00:05:52,639 --> 00:05:57,039
here's the checker code it pattern

175
00:05:54,960 --> 00:06:00,080
matches on any allocation function

176
00:05:57,039 --> 00:06:00,560
like sqlite 3 malloc then it gets the

177
00:06:00,080 --> 00:06:02,800
size

178
00:06:00,560 --> 00:06:04,720
argument to that function and saves it

179
00:06:02,800 --> 00:06:08,240
in an internal data structure

180
00:06:04,720 --> 00:06:10,560
down here next

181
00:06:08,240 --> 00:06:11,520
we get to this memset line and the

182
00:06:10,560 --> 00:06:14,960
checker is again

183
00:06:11,520 --> 00:06:18,000
going to match on the memslot this time

184
00:06:14,960 --> 00:06:21,198
it grabs the index size argument

185
00:06:18,000 --> 00:06:22,720
here and again saves it to an internal

186
00:06:21,199 --> 00:06:24,639
data structure

187
00:06:22,720 --> 00:06:26,560
mechanically as it's been walking

188
00:06:24,639 --> 00:06:28,800
through the path the checker has also

189
00:06:26,560 --> 00:06:32,000
been keeping track of dependencies

190
00:06:28,800 --> 00:06:33,199
so it only saves the index size if

191
00:06:32,000 --> 00:06:34,800
there's a dependency

192
00:06:33,199 --> 00:06:36,400
between the index size and the

193
00:06:34,800 --> 00:06:38,560
allocation size

194
00:06:36,400 --> 00:06:40,479
obviously there are plenty of non-buggy

195
00:06:38,560 --> 00:06:42,319
cases where dependency exists

196
00:06:40,479 --> 00:06:45,120
which is where the symbolic execution

197
00:06:42,319 --> 00:06:45,120
phase comes in

198
00:06:45,199 --> 00:06:48,240
the symbolic execution has a more

199
00:06:47,120 --> 00:06:50,160
difficult job

200
00:06:48,240 --> 00:06:52,560
it has to determine whether it's ever

201
00:06:50,160 --> 00:06:54,560
possible for the object's index size to

202
00:06:52,560 --> 00:06:56,560
be greater than its allocation size

203
00:06:54,560 --> 00:06:58,240
in other words if it's possible to craft

204
00:06:56,560 --> 00:06:59,199
values that lead to an out-of-bounds

205
00:06:58,240 --> 00:07:01,280
rate

206
00:06:59,199 --> 00:07:03,680
so in this case if it determines that

207
00:07:01,280 --> 00:07:04,719
nstat times 4 can be greater than nstat

208
00:07:03,680 --> 00:07:06,880
times 14

209
00:07:04,720 --> 00:07:08,639
it should report a bug to the user but

210
00:07:06,880 --> 00:07:10,319
how does it possibly do this kind of

211
00:07:08,639 --> 00:07:12,720
value reasoning

212
00:07:10,319 --> 00:07:13,919
well first it translates each line of

213
00:07:12,720 --> 00:07:16,240
code in the program

214
00:07:13,919 --> 00:07:17,680
into a logical formula like the one on

215
00:07:16,240 --> 00:07:19,599
this slide

216
00:07:17,680 --> 00:07:21,680
then it feeds these constraints to

217
00:07:19,599 --> 00:07:23,680
something called an smt solver

218
00:07:21,680 --> 00:07:24,720
which gives back a satisfying assignment

219
00:07:23,680 --> 00:07:26,560
to the formula

220
00:07:24,720 --> 00:07:28,479
an assignment that makes the whole thing

221
00:07:26,560 --> 00:07:31,120
evaluate to true

222
00:07:28,479 --> 00:07:31,520
let's say we change the formula though

223
00:07:31,120 --> 00:07:34,080
now

224
00:07:31,520 --> 00:07:36,318
it includes both a and not a so there's

225
00:07:34,080 --> 00:07:38,800
no possible satisfying assignment

226
00:07:36,319 --> 00:07:40,720
and the smt solver returns unsat for

227
00:07:38,800 --> 00:07:42,960
unsatisfiable

228
00:07:40,720 --> 00:07:45,840
it's time to use this principle to find

229
00:07:42,960 --> 00:07:47,599
bugs we'll take the suspicious path that

230
00:07:45,840 --> 00:07:49,039
the static extension flagged

231
00:07:47,599 --> 00:07:50,639
and then translate it to a set of

232
00:07:49,039 --> 00:07:52,719
constraints then

233
00:07:50,639 --> 00:07:54,800
the symbolic checker will generate

234
00:07:52,720 --> 00:07:55,280
constraints to try and determine if the

235
00:07:54,800 --> 00:07:57,280
bug

236
00:07:55,280 --> 00:07:58,479
in this case the out-of-bounds right is

237
00:07:57,280 --> 00:08:01,198
possible

238
00:07:58,479 --> 00:08:02,240
finally we'll query the smt solver if

239
00:08:01,199 --> 00:08:04,160
the bug is possible

240
00:08:02,240 --> 00:08:06,400
the solver should give us an assignment

241
00:08:04,160 --> 00:08:09,280
for inputs that trigger the bug

242
00:08:06,400 --> 00:08:10,479
if not it will just return unsat so

243
00:08:09,280 --> 00:08:12,960
let's do it

244
00:08:10,479 --> 00:08:15,039
first the symbolic execution engine

245
00:08:12,960 --> 00:08:16,638
automatically translates the first line

246
00:08:15,039 --> 00:08:18,080
of code into some constraints in the

247
00:08:16,639 --> 00:08:22,160
second line on the path

248
00:08:18,080 --> 00:08:24,080
etc here's the symbolic engine code that

249
00:08:22,160 --> 00:08:26,879
does the automatic translation from

250
00:08:24,080 --> 00:08:29,440
lvmir instructions to constraints

251
00:08:26,879 --> 00:08:31,440
it matches on each lvm ir instruction

252
00:08:29,440 --> 00:08:34,159
for example binary operators or

253
00:08:31,440 --> 00:08:35,599
insert element or extract element and

254
00:08:34,159 --> 00:08:38,640
let's use as an example

255
00:08:35,599 --> 00:08:39,200
sqlite3 malloc which is a call so it's

256
00:08:38,640 --> 00:08:41,760
going to match

257
00:08:39,200 --> 00:08:42,479
right here in this call case and then

258
00:08:41,760 --> 00:08:45,839
we're going to go

259
00:08:42,479 --> 00:08:48,560
look at translate call translate call

260
00:08:45,839 --> 00:08:49,519
takes one argument in this case that

261
00:08:48,560 --> 00:08:52,560
argument is a

262
00:08:49,519 --> 00:08:54,720
the thing we're mallocking the name of a

263
00:08:52,560 --> 00:08:57,359
and this whole function is written in an

264
00:08:54,720 --> 00:08:59,680
edsl that we also expose to users for

265
00:08:57,360 --> 00:09:01,279
writing their own checkers

266
00:08:59,680 --> 00:09:02,719
so the first thing we're going to do is

267
00:09:01,279 --> 00:09:05,600
use this get defined name

268
00:09:02,720 --> 00:09:06,959
edsl function to get the logical formula

269
00:09:05,600 --> 00:09:08,880
for a

270
00:09:06,959 --> 00:09:10,479
then we're going to get the type of a

271
00:09:08,880 --> 00:09:14,080
and figure out if it's a pointer

272
00:09:10,480 --> 00:09:16,560
again using dsl functions finally

273
00:09:14,080 --> 00:09:18,480
since a is a pointer we're going to

274
00:09:16,560 --> 00:09:23,279
allocate some space for a

275
00:09:18,480 --> 00:09:25,120
using yet another dsl function

276
00:09:23,279 --> 00:09:27,120
now that the tool has automatically

277
00:09:25,120 --> 00:09:28,640
generated constraints for every line of

278
00:09:27,120 --> 00:09:30,480
the suspicious path

279
00:09:28,640 --> 00:09:32,480
here's where the symbolic checker kicks

280
00:09:30,480 --> 00:09:34,480
in the symbolic checker is going to

281
00:09:32,480 --> 00:09:37,040
generate constraints asserting that 4

282
00:09:34,480 --> 00:09:37,680
times nstat is larger than 14 times n

283
00:09:37,040 --> 00:09:41,360
stat

284
00:09:37,680 --> 00:09:44,000
encoding and out of bounds write

285
00:09:41,360 --> 00:09:46,399
here's the code for the checker e alec

286
00:09:44,000 --> 00:09:49,440
size is the allocation size variable

287
00:09:46,399 --> 00:09:52,320
and e index size is the index size

288
00:09:49,440 --> 00:09:54,640
first the checker uses dsl functions to

289
00:09:52,320 --> 00:09:58,320
get a formula for the allocation size

290
00:09:54,640 --> 00:10:00,560
and then turns that size into bytes

291
00:09:58,320 --> 00:10:03,360
same deal except a bit more math with

292
00:10:00,560 --> 00:10:06,000
the index size here

293
00:10:03,360 --> 00:10:07,600
finally the checker uses the dsl to

294
00:10:06,000 --> 00:10:10,240
assert that the index size

295
00:10:07,600 --> 00:10:11,279
is greater than the allocation size if

296
00:10:10,240 --> 00:10:14,480
this is true

297
00:10:11,279 --> 00:10:16,320
we've found a bug now

298
00:10:14,480 --> 00:10:18,480
the tool gives all these constraints to

299
00:10:16,320 --> 00:10:19,839
the solver to show how this works i'm

300
00:10:18,480 --> 00:10:21,440
going to run the entire checking

301
00:10:19,839 --> 00:10:23,440
pipeline on the function we've been

302
00:10:21,440 --> 00:10:25,839
looking at

303
00:10:23,440 --> 00:10:27,519
it comes back with a number of errors

304
00:10:25,839 --> 00:10:30,079
here's the bug we've been looking at

305
00:10:27,519 --> 00:10:32,240
which turns out to be on this series of

306
00:10:30,079 --> 00:10:34,239
llvm ir blocks

307
00:10:32,240 --> 00:10:35,600
and here are some example values for the

308
00:10:34,240 --> 00:10:37,760
variables on that path

309
00:10:35,600 --> 00:10:40,560
that could cause the bug to happen the

310
00:10:37,760 --> 00:10:43,120
allocation size is this variable 17

311
00:10:40,560 --> 00:10:44,719
right here which is a reasonably big

312
00:10:43,120 --> 00:10:47,920
number

313
00:10:44,720 --> 00:10:50,560
the index size is this variable 37

314
00:10:47,920 --> 00:10:51,519
which turns out to be this way bigger

315
00:10:50,560 --> 00:10:53,680
number

316
00:10:51,519 --> 00:10:55,920
so the solver says that it is indeed

317
00:10:53,680 --> 00:10:57,439
possible for the index size to be larger

318
00:10:55,920 --> 00:10:59,199
than the allocation size

319
00:10:57,440 --> 00:11:01,839
and it's provided us with a case where

320
00:10:59,200 --> 00:11:01,839
that's true

321
00:11:02,320 --> 00:11:05,920
we don't have much time left so i'm just

322
00:11:04,320 --> 00:11:07,839
going to recap results

323
00:11:05,920 --> 00:11:09,439
we wrote four different checkers one of

324
00:11:07,839 --> 00:11:11,519
which was actually written by someone

325
00:11:09,440 --> 00:11:14,399
with no checker writing experience

326
00:11:11,519 --> 00:11:15,519
the checkers found 51 bugs 43 of which

327
00:11:14,399 --> 00:11:18,240
have been confirmed

328
00:11:15,519 --> 00:11:20,079
and fit 18 false positives we ended up

329
00:11:18,240 --> 00:11:21,839
with three groups of browser bounties

330
00:11:20,079 --> 00:11:24,239
which is 17 total bugs

331
00:11:21,839 --> 00:11:25,360
and four groups of cves which is 18

332
00:11:24,240 --> 00:11:27,200
total bugs

333
00:11:25,360 --> 00:11:28,399
our checks led to two security audits

334
00:11:27,200 --> 00:11:29,600
where members of a team

335
00:11:28,399 --> 00:11:31,920
looked through all their code for

336
00:11:29,600 --> 00:11:33,839
further problems and finally one of our

337
00:11:31,920 --> 00:11:35,279
bugs also caused a team to change how

338
00:11:33,839 --> 00:11:37,360
the coverity tracking tool was

339
00:11:35,279 --> 00:11:39,200
configured for their browser component

340
00:11:37,360 --> 00:11:41,440
there's more detail on all of this in

341
00:11:39,200 --> 00:11:42,640
the paper as well as more evaluation and

342
00:11:41,440 --> 00:11:44,480
a link to the code

343
00:11:42,640 --> 00:11:56,560
you can email me at this address on the

344
00:11:44,480 --> 00:11:58,639
slide and thanks so much for your time

345
00:11:56,560 --> 00:11:58,638
you

