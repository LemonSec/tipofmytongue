1
00:00:08,080 --> 00:00:11,840
my name is sebastian

2
00:00:09,360 --> 00:00:12,879
and i'm a second year phd student at

3
00:00:11,840 --> 00:00:15,360
cispa

4
00:00:12,880 --> 00:00:17,760
and going to tell you a tale of two

5
00:00:15,360 --> 00:00:19,680
headers which is a formal analysis

6
00:00:17,760 --> 00:00:21,600
of inconsistent click checking

7
00:00:19,680 --> 00:00:23,680
protection on the web

8
00:00:21,600 --> 00:00:26,000
this is joint work with stefano and

9
00:00:23,680 --> 00:00:29,198
elvis from university of venice

10
00:00:26,000 --> 00:00:29,599
and my supervisor michael and my advisor

11
00:00:29,199 --> 00:00:32,559
ben

12
00:00:29,599 --> 00:00:34,399
from tisba first let's start with a

13
00:00:32,558 --> 00:00:36,640
short refresh about click checking

14
00:00:34,399 --> 00:00:38,719
attacks

15
00:00:36,640 --> 00:00:40,640
here you can see a nice cat picture as

16
00:00:38,719 --> 00:00:42,719
it is common throughout the web

17
00:00:40,640 --> 00:00:44,399
everyone loves them right so everyone

18
00:00:42,719 --> 00:00:46,000
wants to see more of them and click on

19
00:00:44,399 --> 00:00:47,280
the yes button that you see on the right

20
00:00:46,000 --> 00:00:49,360
side

21
00:00:47,280 --> 00:00:51,440
however clicking on buttons might be

22
00:00:49,360 --> 00:00:53,120
dangerous due to click checking attacks

23
00:00:51,440 --> 00:00:55,440
where an attack alerts the victim

24
00:00:53,120 --> 00:00:56,160
into clicking on for example an instant

25
00:00:55,440 --> 00:00:58,160
buy button

26
00:00:56,160 --> 00:01:01,199
which is in an opaque iframe that

27
00:00:58,160 --> 00:01:03,279
overlays the yes button

28
00:01:01,199 --> 00:01:05,119
to defend users against that problem

29
00:01:03,280 --> 00:01:06,960
microsoft started the xframe options

30
00:01:05,119 --> 00:01:09,280
header in 2008

31
00:01:06,960 --> 00:01:11,119
however in the meanwhile the header is

32
00:01:09,280 --> 00:01:12,799
deprecated because it has several

33
00:01:11,119 --> 00:01:14,640
problems

34
00:01:12,799 --> 00:01:16,000
it is only partially supported in

35
00:01:14,640 --> 00:01:17,680
browsers

36
00:01:16,000 --> 00:01:20,000
those that support it have

37
00:01:17,680 --> 00:01:22,320
inconsistently implemented the header

38
00:01:20,000 --> 00:01:24,640
which leads to security problems like

39
00:01:22,320 --> 00:01:27,279
double framing attacks

40
00:01:24,640 --> 00:01:28,240
also because you can only whitelist a

41
00:01:27,280 --> 00:01:31,680
single origin

42
00:01:28,240 --> 00:01:33,679
in x-frame options it is not

43
00:01:31,680 --> 00:01:35,520
usable for sites that wants to be

44
00:01:33,680 --> 00:01:37,840
frameable by multiple of their partner

45
00:01:35,520 --> 00:01:40,240
domains

46
00:01:37,840 --> 00:01:41,840
in order to fix these issues csp

47
00:01:40,240 --> 00:01:42,720
introduced the frame and sister's

48
00:01:41,840 --> 00:01:46,079
directive

49
00:01:42,720 --> 00:01:47,920
in level 2. with this new directive

50
00:01:46,079 --> 00:01:51,520
frame control can be done in a

51
00:01:47,920 --> 00:01:54,159
well-defined secure and usable way

52
00:01:51,520 --> 00:01:56,000
however the problem now is that web

53
00:01:54,159 --> 00:01:58,240
developers may choose to use

54
00:01:56,000 --> 00:02:00,079
any of these two mechanisms or a

55
00:01:58,240 --> 00:02:01,679
combination of them to protect the web

56
00:02:00,079 --> 00:02:04,079
application

57
00:02:01,680 --> 00:02:06,320
given this complexity and the diverse

58
00:02:04,079 --> 00:02:08,160
levels of support for frame control

59
00:02:06,320 --> 00:02:11,119
this potentially gives rise for

60
00:02:08,160 --> 00:02:11,119
inconsistencies

61
00:02:12,480 --> 00:02:15,599
those inconsistencies were the main

62
00:02:14,800 --> 00:02:18,959
motivation

63
00:02:15,599 --> 00:02:19,280
for this work we try to figure out if we

64
00:02:18,959 --> 00:02:21,360
can

65
00:02:19,280 --> 00:02:22,879
formally describe the inconsistency

66
00:02:21,360 --> 00:02:26,640
between xram options

67
00:02:22,879 --> 00:02:28,799
and csp frame insisters also we want to

68
00:02:26,640 --> 00:02:30,559
know how inconsistent frame control is

69
00:02:28,800 --> 00:02:32,640
implemented in different browsers

70
00:02:30,560 --> 00:02:34,560
and how it is deployed on real world

71
00:02:32,640 --> 00:02:36,640
websites

72
00:02:34,560 --> 00:02:38,720
furthermore we ask us if we can

73
00:02:36,640 --> 00:02:41,040
automatically fix inconsistencies

74
00:02:38,720 --> 00:02:43,120
between xframe options and csp frame and

75
00:02:41,040 --> 00:02:45,440
systems

76
00:02:43,120 --> 00:02:46,319
now you might think why the hell is this

77
00:02:45,440 --> 00:02:48,400
a problem

78
00:02:46,319 --> 00:02:51,359
either a browser supports xframe options

79
00:02:48,400 --> 00:02:54,000
or frame sisters

80
00:02:51,360 --> 00:02:56,000
however not only this support itself

81
00:02:54,000 --> 00:02:58,080
might be inconsistent

82
00:02:56,000 --> 00:03:00,080
also the behavior if multiple xframe

83
00:02:58,080 --> 00:03:03,280
options or csp headers are present in

84
00:03:00,080 --> 00:03:05,599
their response differs

85
00:03:03,280 --> 00:03:06,560
also different is the way how headers

86
00:03:05,599 --> 00:03:10,319
are passed

87
00:03:06,560 --> 00:03:12,640
and also against which frame

88
00:03:10,319 --> 00:03:13,679
the value in the frame control header is

89
00:03:12,640 --> 00:03:15,279
checked

90
00:03:13,680 --> 00:03:17,680
as a first step we started to

91
00:03:15,280 --> 00:03:20,239
distinguish between modern browsers

92
00:03:17,680 --> 00:03:21,519
in blue so those that support frame

93
00:03:20,239 --> 00:03:24,000
ancestors

94
00:03:21,519 --> 00:03:27,519
and legacy browsers in red which do not

95
00:03:24,000 --> 00:03:27,519
support the csp directive

96
00:03:27,599 --> 00:03:31,440
now with this semantics of browser

97
00:03:29,440 --> 00:03:33,120
behavior we started to create a formal

98
00:03:31,440 --> 00:03:34,959
framework

99
00:03:33,120 --> 00:03:36,640
but first of all we need to have a

100
00:03:34,959 --> 00:03:39,360
relation that allows us

101
00:03:36,640 --> 00:03:41,200
to order the directive values of our

102
00:03:39,360 --> 00:03:44,159
headers

103
00:03:41,200 --> 00:03:46,560
luckily casa vareda presented course csp

104
00:03:44,159 --> 00:03:49,200
in usenix 2017.

105
00:03:46,560 --> 00:03:50,000
they have defined a relation that states

106
00:03:49,200 --> 00:03:53,040
that

107
00:03:50,000 --> 00:03:56,000
v1 is contained in the set of origins

108
00:03:53,040 --> 00:03:59,439
represented by v2

109
00:03:56,000 --> 00:04:02,560
now that we can now we can use this

110
00:03:59,439 --> 00:04:05,680
relation to define the consistency of

111
00:04:02,560 --> 00:04:05,680
framing policies

112
00:04:06,159 --> 00:04:12,959
a policy of a web page w is consistent

113
00:04:09,120 --> 00:04:14,959
if all browsers are equally protected

114
00:04:12,959 --> 00:04:16,959
the double square brackets that you see

115
00:04:14,959 --> 00:04:17,358
in the formal definition here denotes

116
00:04:16,959 --> 00:04:20,399
the

117
00:04:17,358 --> 00:04:26,400
semantics of the browser b for the

118
00:04:20,399 --> 00:04:26,400
framing control deployed by website w

119
00:04:26,560 --> 00:04:31,120
to give a more concrete example here a

120
00:04:28,960 --> 00:04:34,400
website that only deploys

121
00:04:31,120 --> 00:04:37,360
xram options allow from example.com

122
00:04:34,400 --> 00:04:38,560
to control the framing has inconsistent

123
00:04:37,360 --> 00:04:40,400
frame control

124
00:04:38,560 --> 00:04:42,080
because it restricts framing in

125
00:04:40,400 --> 00:04:43,919
microsoft edge

126
00:04:42,080 --> 00:04:45,680
but it leaves chrome users completely

127
00:04:43,919 --> 00:04:48,159
unprotected

128
00:04:45,680 --> 00:04:49,840
to improve the protection the website

129
00:04:48,160 --> 00:04:53,120
might additionally deploy

130
00:04:49,840 --> 00:04:55,758
csp frame insisters example.com

131
00:04:53,120 --> 00:04:57,440
thus the revised frame control policy is

132
00:04:55,759 --> 00:05:01,919
consistent for edge and chrome

133
00:04:57,440 --> 00:05:04,479
because csp takes precedence over xfo

134
00:05:01,919 --> 00:05:07,680
hence the users of these two browsers

135
00:05:04,479 --> 00:05:07,680
are equally protected

136
00:05:08,080 --> 00:05:12,560
another important definition is about

137
00:05:10,720 --> 00:05:15,120
whether policy is security or

138
00:05:12,560 --> 00:05:17,600
compatibility oriented

139
00:05:15,120 --> 00:05:20,320
a framing policy is compatibility

140
00:05:17,600 --> 00:05:23,600
oriented if it restricts modern browsers

141
00:05:20,320 --> 00:05:24,560
less or equal to legacy browsers however

142
00:05:23,600 --> 00:05:27,280
a policy

143
00:05:24,560 --> 00:05:29,520
is security oriented if it restricts

144
00:05:27,280 --> 00:05:31,119
legacy browsers less or equal to modern

145
00:05:29,520 --> 00:05:33,280
process

146
00:05:31,120 --> 00:05:34,639
but let's have a look at some examples

147
00:05:33,280 --> 00:05:36,880
here

148
00:05:34,639 --> 00:05:38,240
if a web application hosted at

149
00:05:36,880 --> 00:05:41,080
example.com

150
00:05:38,240 --> 00:05:42,479
deploys xfirm options allow from

151
00:05:41,080 --> 00:05:45,359
advertisement.com

152
00:05:42,479 --> 00:05:47,520
the framing policy of example.com is not

153
00:05:45,360 --> 00:05:50,400
compatibility oriented

154
00:05:47,520 --> 00:05:52,000
since two modern browsers like chrome

155
00:05:50,400 --> 00:05:53,919
and edge

156
00:05:52,000 --> 00:05:55,520
give different interpretation to the

157
00:05:53,919 --> 00:05:57,758
policy edge

158
00:05:55,520 --> 00:06:01,198
supports the allow from mode while

159
00:05:57,759 --> 00:06:01,199
chrome lacks support for it

160
00:06:03,199 --> 00:06:08,240
in case of example.com deploying frame

161
00:06:07,080 --> 00:06:11,758
ancestorstar.example.com

162
00:06:08,240 --> 00:06:12,560
as well as xfo same origin the revised

163
00:06:11,759 --> 00:06:14,960
policy

164
00:06:12,560 --> 00:06:16,319
is inconsistent because legacy browsers

165
00:06:14,960 --> 00:06:19,440
that do not port

166
00:06:16,319 --> 00:06:23,360
csp's frame and sisters cannot be

167
00:06:19,440 --> 00:06:26,400
framed by for example mail.example.com

168
00:06:23,360 --> 00:06:28,400
however because users of legacy browsers

169
00:06:26,400 --> 00:06:32,080
are inconsistent but still more

170
00:06:28,400 --> 00:06:34,638
protected against framing based attacks

171
00:06:32,080 --> 00:06:38,000
than the modern clients are the policy

172
00:06:34,639 --> 00:06:38,000
is security oriented

173
00:06:38,240 --> 00:06:42,479
as already mentioned in the beginning we

174
00:06:40,720 --> 00:06:44,639
also want to have a look on

175
00:06:42,479 --> 00:06:46,880
how inconsistent framing control is

176
00:06:44,639 --> 00:06:48,800
deployed in the wild

177
00:06:46,880 --> 00:06:50,880
in order to get numbers about the

178
00:06:48,800 --> 00:06:52,720
inconsistencies of framing control in

179
00:06:50,880 --> 00:06:53,520
real world web applications we started

180
00:06:52,720 --> 00:06:56,960
an experiment

181
00:06:53,520 --> 00:06:59,520
involving the tranquil top 10k websites

182
00:06:56,960 --> 00:07:01,919
for these websites we collected up to

183
00:06:59,520 --> 00:07:03,919
500 urls per side

184
00:07:01,919 --> 00:07:06,639
and gathered the framing control headers

185
00:07:03,919 --> 00:07:10,080
from those urls

186
00:07:06,639 --> 00:07:13,680
we then used our definitions from before

187
00:07:10,080 --> 00:07:16,560
in our fram check framework to classify

188
00:07:13,680 --> 00:07:17,360
those headers into inconsistent security

189
00:07:16,560 --> 00:07:20,160
oriented

190
00:07:17,360 --> 00:07:21,840
and compatibility oriented policies the

191
00:07:20,160 --> 00:07:23,280
source code of this analysis is

192
00:07:21,840 --> 00:07:26,560
available at the tsisba

193
00:07:23,280 --> 00:07:30,638
github account but for now let's have

194
00:07:26,560 --> 00:07:32,000
have a look at those numbers our crawler

195
00:07:30,639 --> 00:07:35,039
visited a total of

196
00:07:32,000 --> 00:07:35,440
approximately 1 million urls out of

197
00:07:35,039 --> 00:07:38,318
which

198
00:07:35,440 --> 00:07:41,039
a little over a third had some form of

199
00:07:38,319 --> 00:07:42,720
framing control

200
00:07:41,039 --> 00:07:44,800
we then aggregated the different

201
00:07:42,720 --> 00:07:47,759
policies on origin bases

202
00:07:44,800 --> 00:07:48,720
for example if all pages under a given

203
00:07:47,759 --> 00:07:50,879
origin

204
00:07:48,720 --> 00:07:52,160
have the same xram options header we

205
00:07:50,879 --> 00:07:56,840
only count that

206
00:07:52,160 --> 00:07:59,360
once this leads to 70 000 policies in

207
00:07:56,840 --> 00:08:03,119
total

208
00:07:59,360 --> 00:08:04,560
the vast majority of sites makes use of

209
00:08:03,120 --> 00:08:07,599
x-form options to protect the

210
00:08:04,560 --> 00:08:10,400
application and only a one-two

211
00:08:07,599 --> 00:08:12,400
percent do so inconsistently which can

212
00:08:10,400 --> 00:08:14,719
be addressed to the fact that most

213
00:08:12,400 --> 00:08:16,638
browsers support x-frame options and

214
00:08:14,720 --> 00:08:20,879
that most of those policies

215
00:08:16,639 --> 00:08:20,879
are sam origin or deny

216
00:08:21,840 --> 00:08:25,359
considering sites that only use csp or

217
00:08:24,960 --> 00:08:28,080
by

218
00:08:25,360 --> 00:08:30,639
its obvious lacking support for some

219
00:08:28,080 --> 00:08:33,760
browsers which means there are

220
00:08:30,639 --> 00:08:37,519
all inconsistent not all

221
00:08:33,760 --> 00:08:40,319
are some csps just allow framing

222
00:08:37,519 --> 00:08:43,519
from any origin which is consistent with

223
00:08:40,320 --> 00:08:46,640
not understanding csp at all

224
00:08:43,519 --> 00:08:49,600
finally there were also pages with both

225
00:08:46,640 --> 00:08:52,319
xfo and csp here more than half of them

226
00:08:49,600 --> 00:08:56,240
delivered inconsistent protection

227
00:08:52,320 --> 00:08:59,440
overall the 805 inconsistencies

228
00:08:56,240 --> 00:09:01,040
amount to 45 of all observed

229
00:08:59,440 --> 00:09:03,200
inconsistencies

230
00:09:01,040 --> 00:09:05,120
which confirms the intuition that having

231
00:09:03,200 --> 00:09:05,680
two different mechanisms for the same

232
00:09:05,120 --> 00:09:09,839
purpose

233
00:09:05,680 --> 00:09:09,839
is potentially dangerous

234
00:09:10,000 --> 00:09:13,600
based on the numbers that we have just

235
00:09:11,680 --> 00:09:16,000
seen and based on the policies

236
00:09:13,600 --> 00:09:17,279
that we analyzed we then created

237
00:09:16,000 --> 00:09:19,279
recommendations

238
00:09:17,279 --> 00:09:22,480
countermeasures and a piece of software

239
00:09:19,279 --> 00:09:24,480
in order to fix the issue

240
00:09:22,480 --> 00:09:27,200
first of all the best way for a

241
00:09:24,480 --> 00:09:29,600
developer to defend a web application

242
00:09:27,200 --> 00:09:30,240
against framing based attacks is to use

243
00:09:29,600 --> 00:09:33,360
both

244
00:09:30,240 --> 00:09:36,880
extreme options and csp to secure modern

245
00:09:33,360 --> 00:09:38,959
and legacy browsers also

246
00:09:36,880 --> 00:09:41,519
because of the inconsistent behavior in

247
00:09:38,959 --> 00:09:44,959
how multiple headers are evaluated

248
00:09:41,519 --> 00:09:49,279
we recommend to only deploy one single

249
00:09:44,959 --> 00:09:49,279
xram options headers for each request

250
00:09:49,760 --> 00:09:53,279
in addition to that we encourage

251
00:09:51,519 --> 00:09:56,320
operators to

252
00:09:53,279 --> 00:09:57,439
not use comma separated headers because

253
00:09:56,320 --> 00:10:00,000
the parsing

254
00:09:57,440 --> 00:10:02,320
behavior of browsers differs in this

255
00:10:00,000 --> 00:10:02,320
case

256
00:10:03,200 --> 00:10:07,360
we have also defined recommendations for

257
00:10:05,200 --> 00:10:09,279
browser vendors but for time reason and

258
00:10:07,360 --> 00:10:10,480
because the probability that they would

259
00:10:09,279 --> 00:10:12,800
adhere to those

260
00:10:10,480 --> 00:10:13,760
are relatively small i would refer you

261
00:10:12,800 --> 00:10:16,560
to the paper

262
00:10:13,760 --> 00:10:18,319
for those another thing that we have

263
00:10:16,560 --> 00:10:19,760
done to ease the deployment of a saint

264
00:10:18,320 --> 00:10:22,079
framing control

265
00:10:19,760 --> 00:10:24,880
for website operator is we created a

266
00:10:22,079 --> 00:10:27,519
server-side proxy

267
00:10:24,880 --> 00:10:30,079
this proxy acts as men in the middle

268
00:10:27,519 --> 00:10:32,800
between the client and the server

269
00:10:30,079 --> 00:10:33,279
it first inspects the incoming request

270
00:10:32,800 --> 00:10:36,399
to map

271
00:10:33,279 --> 00:10:38,720
it to map the request to the response

272
00:10:36,399 --> 00:10:40,959
and to collect information such as the

273
00:10:38,720 --> 00:10:43,600
referral header

274
00:10:40,959 --> 00:10:45,760
afterwards the traffic is just as usual

275
00:10:43,600 --> 00:10:47,519
processed by the web application

276
00:10:45,760 --> 00:10:49,920
and as soon as the web application

277
00:10:47,519 --> 00:10:50,800
returns a response the proxy intercepts

278
00:10:49,920 --> 00:10:52,959
that

279
00:10:50,800 --> 00:10:55,680
response in order to make the framing

280
00:10:52,959 --> 00:10:57,920
control consistent

281
00:10:55,680 --> 00:11:00,079
for example it converts csp's frame and

282
00:10:57,920 --> 00:11:02,319
sisters into the corresponding x-frame

283
00:11:00,079 --> 00:11:04,880
options header and vice versa such that

284
00:11:02,320 --> 00:11:06,720
all clients are protected

285
00:11:04,880 --> 00:11:08,800
if you want to know implementation

286
00:11:06,720 --> 00:11:10,560
details i would again refer you to

287
00:11:08,800 --> 00:11:12,399
either read the corresponding section in

288
00:11:10,560 --> 00:11:16,880
the paper or take a look at the source

289
00:11:12,399 --> 00:11:16,880
code in the this bar github repository

290
00:11:16,959 --> 00:11:20,399
okay now what have we seen in the last

291
00:11:19,360 --> 00:11:22,880
few minutes

292
00:11:20,399 --> 00:11:24,480
well the way of how browsers handle

293
00:11:22,880 --> 00:11:26,399
framing control headers differs

294
00:11:24,480 --> 00:11:29,600
significantly

295
00:11:26,399 --> 00:11:31,440
we use our formal definitions from our

296
00:11:29,600 --> 00:11:34,000
frame check framework to find

297
00:11:31,440 --> 00:11:36,079
out how inconsistent framing control is

298
00:11:34,000 --> 00:11:39,120
used in the wild

299
00:11:36,079 --> 00:11:40,160
and finally represented recommendations

300
00:11:39,120 --> 00:11:42,959
and countermeasures

301
00:11:40,160 --> 00:11:45,199
as well as our frame control proxy in

302
00:11:42,959 --> 00:11:47,760
order to fix the issue

303
00:11:45,200 --> 00:11:57,839
so thanks for your attention and feel

304
00:11:47,760 --> 00:11:57,839
free to ask questions

305
00:11:58,959 --> 00:12:01,040
you

