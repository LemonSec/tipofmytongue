1
00:00:08,639 --> 00:00:11,040
hi

2
00:00:09,280 --> 00:00:12,559
my name is chelsea conlow and i'm here

3
00:00:11,040 --> 00:00:14,639
to present joint work with nick

4
00:00:12,559 --> 00:00:16,799
mathewson and ian goldberg

5
00:00:14,639 --> 00:00:17,680
and today i'll be presenting our work

6
00:00:16,800 --> 00:00:19,119
walking onions

7
00:00:17,680 --> 00:00:21,198
scaling anonymity networks while

8
00:00:19,119 --> 00:00:23,359
protecting users

9
00:00:21,199 --> 00:00:25,359
so our work uses towards a case study

10
00:00:23,359 --> 00:00:27,359
and if you're not familiar with tor

11
00:00:25,359 --> 00:00:28,560
tour is a privacy enhancing tool that

12
00:00:27,359 --> 00:00:30,000
allows users

13
00:00:28,560 --> 00:00:31,519
millions of users around the world to

14
00:00:30,000 --> 00:00:33,920
use the internet privately and to

15
00:00:31,519 --> 00:00:37,120
circumvent censorship

16
00:00:33,920 --> 00:00:39,280
and how are users able to do that well

17
00:00:37,120 --> 00:00:40,559
in order to access information say from

18
00:00:39,280 --> 00:00:42,559
this server

19
00:00:40,559 --> 00:00:44,559
a user will create a path to the network

20
00:00:42,559 --> 00:00:47,519
in order to route their traffic

21
00:00:44,559 --> 00:00:49,519
and in order to do so all users download

22
00:00:47,520 --> 00:00:51,520
what we call the consensus

23
00:00:49,520 --> 00:00:52,640
and this consensus is essentially the

24
00:00:51,520 --> 00:00:54,800
state of the network

25
00:00:52,640 --> 00:00:56,079
and it has entries for every single

26
00:00:54,800 --> 00:00:58,078
relay in the network

27
00:00:56,079 --> 00:01:00,239
along with some network parameters and

28
00:00:58,079 --> 00:01:02,160
this consensus is authenticated

29
00:01:00,239 --> 00:01:04,239
by tor's directory authorities which

30
00:01:02,160 --> 00:01:05,920
users trust by default

31
00:01:04,239 --> 00:01:07,439
and so to create this path through the

32
00:01:05,920 --> 00:01:10,080
network the user first

33
00:01:07,439 --> 00:01:11,360
selects one relay from the consensus and

34
00:01:10,080 --> 00:01:13,760
they do this by

35
00:01:11,360 --> 00:01:15,360
sampling this relay at random but where

36
00:01:13,760 --> 00:01:16,799
all relays are weighted by the amount of

37
00:01:15,360 --> 00:01:17,920
bandwidth that they contribute to the

38
00:01:16,799 --> 00:01:20,320
network

39
00:01:17,920 --> 00:01:22,080
and then the user creates a circuit by

40
00:01:20,320 --> 00:01:23,199
performing a key exchange with that

41
00:01:22,080 --> 00:01:25,200
relay

42
00:01:23,200 --> 00:01:27,680
and then the user selects the next relay

43
00:01:25,200 --> 00:01:31,439
in the hop and ask the first relay to

44
00:01:27,680 --> 00:01:34,320
forward their request in response

45
00:01:31,439 --> 00:01:35,039
to this relay and then finally they

46
00:01:34,320 --> 00:01:37,199
randomly

47
00:01:35,040 --> 00:01:38,079
sample a third relay in order to

48
00:01:37,200 --> 00:01:40,560
complete

49
00:01:38,079 --> 00:01:41,439
their path and create what is this

50
00:01:40,560 --> 00:01:43,840
circuit

51
00:01:41,439 --> 00:01:47,919
which allows them to forward traffic to

52
00:01:43,840 --> 00:01:50,479
the destination server on the other side

53
00:01:47,920 --> 00:01:51,600
so in this model um tor favors security

54
00:01:50,479 --> 00:01:53,840
over scalability

55
00:01:51,600 --> 00:01:56,000
and what do we mean by that well there's

56
00:01:53,840 --> 00:01:57,920
two attacks that we have in mind

57
00:01:56,000 --> 00:01:59,920
that are relevant to our work and the

58
00:01:57,920 --> 00:02:01,439
first is that of epistemic attacks

59
00:01:59,920 --> 00:02:02,799
and that means that users with different

60
00:02:01,439 --> 00:02:04,719
views in the network can be

61
00:02:02,799 --> 00:02:06,799
distinguished by their relay selection

62
00:02:04,719 --> 00:02:08,399
so if some were if some users were more

63
00:02:06,799 --> 00:02:10,800
likely to select

64
00:02:08,399 --> 00:02:12,239
certain relays over others adversaries

65
00:02:10,800 --> 00:02:14,160
looking at the network would be able to

66
00:02:12,239 --> 00:02:16,400
distinguish these users

67
00:02:14,160 --> 00:02:18,239
but torah protects against that because

68
00:02:16,400 --> 00:02:20,959
all clients maintain the same

69
00:02:18,239 --> 00:02:22,400
up to date consensus so all clients are

70
00:02:20,959 --> 00:02:26,319
equally likely to

71
00:02:22,400 --> 00:02:28,319
select uh these relays

72
00:02:26,319 --> 00:02:29,440
and the second attack that we have in

73
00:02:28,319 --> 00:02:31,679
mind when we say this

74
00:02:29,440 --> 00:02:33,920
is route capture attacks and that is

75
00:02:31,680 --> 00:02:35,599
when an adversary can influence users

76
00:02:33,920 --> 00:02:38,559
relay selection

77
00:02:35,599 --> 00:02:40,640
but torque protects against that because

78
00:02:38,560 --> 00:02:41,760
clients maintain this consensus which is

79
00:02:40,640 --> 00:02:43,679
authenticated

80
00:02:41,760 --> 00:02:45,280
by the directory authorities and this

81
00:02:43,680 --> 00:02:48,480
consensus contains

82
00:02:45,280 --> 00:02:50,160
relays signing keys and so clients are

83
00:02:48,480 --> 00:02:52,720
able to verify the responses

84
00:02:50,160 --> 00:02:54,000
from these relays using these keys and

85
00:02:52,720 --> 00:02:57,200
all of this chains up

86
00:02:54,000 --> 00:02:58,800
to this route of trust

87
00:02:57,200 --> 00:03:01,119
so what contributions do we make with

88
00:02:58,800 --> 00:03:03,760
walking onions first

89
00:03:01,120 --> 00:03:05,920
in current tour because all relays or

90
00:03:03,760 --> 00:03:08,239
all clients maintain this consensus

91
00:03:05,920 --> 00:03:10,159
as new relays join the network that

92
00:03:08,239 --> 00:03:12,400
means that this consensus grows

93
00:03:10,159 --> 00:03:14,239
and therefore client bandwidth

94
00:03:12,400 --> 00:03:16,720
requirements also grow

95
00:03:14,239 --> 00:03:18,000
but in walking onions we reduce client

96
00:03:16,720 --> 00:03:20,720
bandwidth overhead to

97
00:03:18,000 --> 00:03:22,720
constant size even as new relays join

98
00:03:20,720 --> 00:03:25,840
the network

99
00:03:22,720 --> 00:03:28,159
secondly even though we do

100
00:03:25,840 --> 00:03:30,080
reduce client overhead we still maintain

101
00:03:28,159 --> 00:03:32,480
towards existing security model

102
00:03:30,080 --> 00:03:33,840
so we present two variants one has no

103
00:03:32,480 --> 00:03:35,440
change in towards model

104
00:03:33,840 --> 00:03:37,200
the other has a slight weakening and

105
00:03:35,440 --> 00:03:38,879
forward secrecy but only for the

106
00:03:37,200 --> 00:03:42,000
selection of relays in the path

107
00:03:38,879 --> 00:03:43,920
not actually for content that is sent

108
00:03:42,000 --> 00:03:45,840
um we demonstrate that there's immediate

109
00:03:43,920 --> 00:03:47,599
performance improvements at networks the

110
00:03:45,840 --> 00:03:49,840
size of tour today

111
00:03:47,599 --> 00:03:51,679
and some of the design choices of

112
00:03:49,840 --> 00:03:54,319
walking onions apply to network designs

113
00:03:51,680 --> 00:03:54,319
beyond tor

114
00:03:54,799 --> 00:03:58,480
so we'll do a deep dive now looking at

115
00:03:57,519 --> 00:04:01,760
walking onions

116
00:03:58,480 --> 00:04:03,840
and we'll answer three questions one is

117
00:04:01,760 --> 00:04:05,760
how to represent really information to

118
00:04:03,840 --> 00:04:09,040
enable what we call oblivious

119
00:04:05,760 --> 00:04:11,120
selection of relays and then we'll look

120
00:04:09,040 --> 00:04:12,159
at how to use this oblivious relay

121
00:04:11,120 --> 00:04:14,480
selection

122
00:04:12,159 --> 00:04:16,719
and verification to build paths through

123
00:04:14,480 --> 00:04:18,320
the network for clients

124
00:04:16,720 --> 00:04:20,000
and then finally we'll look at how can

125
00:04:18,320 --> 00:04:22,320
we perform even more efficient circuit

126
00:04:20,000 --> 00:04:24,160
construction

127
00:04:22,320 --> 00:04:26,320
so first let's look at how to represent

128
00:04:24,160 --> 00:04:28,320
relay information

129
00:04:26,320 --> 00:04:30,320
so as we said the current consensus and

130
00:04:28,320 --> 00:04:32,400
torted a consists of a set of

131
00:04:30,320 --> 00:04:33,360
really entries representing all relays

132
00:04:32,400 --> 00:04:35,198
in the network

133
00:04:33,360 --> 00:04:36,960
and a constant size amount of network

134
00:04:35,199 --> 00:04:38,160
parameters and this consensus is

135
00:04:36,960 --> 00:04:40,799
authenticated by

136
00:04:38,160 --> 00:04:42,000
directory authorities in walking onions

137
00:04:40,800 --> 00:04:44,400
we take these same

138
00:04:42,000 --> 00:04:45,040
relay entries but we add two additional

139
00:04:44,400 --> 00:04:47,599
values

140
00:04:45,040 --> 00:04:49,280
one is an authentication tag computed by

141
00:04:47,600 --> 00:04:51,199
tor's directory authorities

142
00:04:49,280 --> 00:04:53,119
and the second is an index range and

143
00:04:51,199 --> 00:04:55,680
this index range represents

144
00:04:53,120 --> 00:04:57,680
this particular relay over distribution

145
00:04:55,680 --> 00:04:59,840
for all relays in the network

146
00:04:57,680 --> 00:05:00,800
and this distribution can be weighted by

147
00:04:59,840 --> 00:05:03,039
certain factors

148
00:05:00,800 --> 00:05:04,880
so for example in the case of tor you

149
00:05:03,039 --> 00:05:06,400
might want to again weight relays

150
00:05:04,880 --> 00:05:07,919
relative to the amount of bandwidth that

151
00:05:06,400 --> 00:05:10,000
they contribute to the network

152
00:05:07,919 --> 00:05:11,599
but we can imagine other properties um

153
00:05:10,000 --> 00:05:13,280
being weighted for this index range as

154
00:05:11,600 --> 00:05:16,880
well

155
00:05:13,280 --> 00:05:19,599
and so um all relay entries become snips

156
00:05:16,880 --> 00:05:21,280
and all snips along with another

157
00:05:19,600 --> 00:05:24,160
authentication tag

158
00:05:21,280 --> 00:05:24,960
comprise an endive and importantly only

159
00:05:24,160 --> 00:05:27,520
relays

160
00:05:24,960 --> 00:05:29,120
in walking onions download this endive

161
00:05:27,520 --> 00:05:30,960
clients do not

162
00:05:29,120 --> 00:05:32,800
in fact clients only need to download

163
00:05:30,960 --> 00:05:34,560
this network parameters document

164
00:05:32,800 --> 00:05:35,840
and therefore their growth even as new

165
00:05:34,560 --> 00:05:39,199
relays join the network

166
00:05:35,840 --> 00:05:41,119
remains constant

167
00:05:39,199 --> 00:05:43,440
so now let's look at how can we build

168
00:05:41,120 --> 00:05:44,479
paths using what we call oblivious relay

169
00:05:43,440 --> 00:05:46,719
selection

170
00:05:44,479 --> 00:05:47,840
meaning that the client doesn't know the

171
00:05:46,720 --> 00:05:49,440
state of the network because they don't

172
00:05:47,840 --> 00:05:52,320
know the consensus but they still need

173
00:05:49,440 --> 00:05:54,080
to select relays for their path

174
00:05:52,320 --> 00:05:55,759
so in our first variant which we call

175
00:05:54,080 --> 00:05:58,159
telescoping walking onions

176
00:05:55,759 --> 00:05:59,919
clients begin by bootstrapping to a

177
00:05:58,160 --> 00:06:01,840
relay and we described further in the

178
00:05:59,919 --> 00:06:03,919
paper how this bootstrapping process

179
00:06:01,840 --> 00:06:05,919
happens but it uses some out-of-band

180
00:06:03,919 --> 00:06:06,799
mechanism so the client knows about this

181
00:06:05,919 --> 00:06:09,599
first relay

182
00:06:06,800 --> 00:06:10,560
and is able to perform the first step in

183
00:06:09,600 --> 00:06:13,759
circuit construction

184
00:06:10,560 --> 00:06:16,400
very similarly to infor today however

185
00:06:13,759 --> 00:06:17,039
when selecting the second relay in their

186
00:06:16,400 --> 00:06:19,599
path

187
00:06:17,039 --> 00:06:21,120
the user just samples some index

188
00:06:19,600 --> 00:06:23,360
completely at random

189
00:06:21,120 --> 00:06:24,800
uh within the distribution that we

190
00:06:23,360 --> 00:06:27,199
described earlier

191
00:06:24,800 --> 00:06:30,240
and to determine the next relay in the

192
00:06:27,199 --> 00:06:32,960
hop once the first relay gets that index

193
00:06:30,240 --> 00:06:35,520
it finds a snip that contains uh the

194
00:06:32,960 --> 00:06:38,479
client's choice within its index range

195
00:06:35,520 --> 00:06:38,880
and it extends the path to that relay

196
00:06:38,479 --> 00:06:40,719
and then

197
00:06:38,880 --> 00:06:43,199
in returning the relay's response to the

198
00:06:40,720 --> 00:06:46,400
client the first relay also can

199
00:06:43,199 --> 00:06:50,080
returns the snip corresponding to

200
00:06:46,400 --> 00:06:52,080
the client's choice and what that means

201
00:06:50,080 --> 00:06:52,639
is that the client can verify that the

202
00:06:52,080 --> 00:06:54,880
random

203
00:06:52,639 --> 00:06:56,720
index that they sampled is within the

204
00:06:54,880 --> 00:06:58,159
index range for that relay

205
00:06:56,720 --> 00:07:00,160
and they know that this information is

206
00:06:58,160 --> 00:07:02,080
authentic because it contains a

207
00:07:00,160 --> 00:07:03,520
authentication tag computed by the

208
00:07:02,080 --> 00:07:05,039
directory authorities

209
00:07:03,520 --> 00:07:07,120
so the client is essentially able to

210
00:07:05,039 --> 00:07:10,318
perform post hoc

211
00:07:07,120 --> 00:07:12,560
uh validation of their choice

212
00:07:10,319 --> 00:07:14,160
for the relay in the path and the third

213
00:07:12,560 --> 00:07:17,360
hop in the path is computed

214
00:07:14,160 --> 00:07:19,360
exactly the same

215
00:07:17,360 --> 00:07:20,880
so importantly the client doesn't need

216
00:07:19,360 --> 00:07:21,520
to know the full consensus but it can

217
00:07:20,880 --> 00:07:24,080
still

218
00:07:21,520 --> 00:07:24,799
determine the relays for its path

219
00:07:24,080 --> 00:07:28,639
without

220
00:07:24,800 --> 00:07:31,039
influence by any intermediaries

221
00:07:28,639 --> 00:07:32,479
so now let's look and see how even more

222
00:07:31,039 --> 00:07:35,199
efficient circuit construction

223
00:07:32,479 --> 00:07:37,360
can be performed so we're not going to

224
00:07:35,199 --> 00:07:39,199
go into too much detail for this variant

225
00:07:37,360 --> 00:07:41,360
which we call single pass

226
00:07:39,199 --> 00:07:43,360
but the intuition behind this variant is

227
00:07:41,360 --> 00:07:45,680
that actually the client doesn't even

228
00:07:43,360 --> 00:07:46,879
need to compute this random index

229
00:07:45,680 --> 00:07:49,599
themselves

230
00:07:46,879 --> 00:07:51,120
they just need to know that the relays

231
00:07:49,599 --> 00:07:53,199
sampled for their path

232
00:07:51,120 --> 00:07:54,240
are chosen at random over this

233
00:07:53,199 --> 00:07:56,080
distribution

234
00:07:54,240 --> 00:07:57,280
and we're not influenced by any kind of

235
00:07:56,080 --> 00:07:59,280
intermediary

236
00:07:57,280 --> 00:08:00,719
and in order to perform that we actually

237
00:07:59,280 --> 00:08:03,359
use vrfs

238
00:08:00,720 --> 00:08:03,840
so vrfs determine the second and third

239
00:08:03,360 --> 00:08:06,560
hop

240
00:08:03,840 --> 00:08:07,198
in single pass walking onions and then

241
00:08:06,560 --> 00:08:10,080
the client

242
00:08:07,199 --> 00:08:10,879
verifies the proof produced by the vrf

243
00:08:10,080 --> 00:08:13,919
to ensure

244
00:08:10,879 --> 00:08:16,479
that their choice is actually at random

245
00:08:13,919 --> 00:08:18,799
over the distribution that they expect

246
00:08:16,479 --> 00:08:19,840
and that the snip is valid again

247
00:08:18,800 --> 00:08:22,879
similarly to

248
00:08:19,840 --> 00:08:22,878
within telescoping

249
00:08:23,199 --> 00:08:27,039
so with that um we know that walking

250
00:08:26,160 --> 00:08:29,120
onions

251
00:08:27,039 --> 00:08:30,479
protects against epidemic and route

252
00:08:29,120 --> 00:08:33,039
capture attacks

253
00:08:30,479 --> 00:08:34,640
because the clients can verify the

254
00:08:33,039 --> 00:08:36,958
content within the snips

255
00:08:34,640 --> 00:08:38,080
and they know that they're equally as

256
00:08:36,958 --> 00:08:41,199
likely to

257
00:08:38,080 --> 00:08:42,080
select certain relays as every other

258
00:08:41,200 --> 00:08:43,760
client

259
00:08:42,080 --> 00:08:45,200
but how do we know that walking onions

260
00:08:43,760 --> 00:08:47,680
actually improves

261
00:08:45,200 --> 00:08:49,680
the performance of anonymity networks

262
00:08:47,680 --> 00:08:51,760
like tor

263
00:08:49,680 --> 00:08:53,040
well happily our simulations show that

264
00:08:51,760 --> 00:08:55,200
it does so

265
00:08:53,040 --> 00:08:56,240
looking at the graph to the right this

266
00:08:55,200 --> 00:08:58,959
vertical

267
00:08:56,240 --> 00:09:00,080
black line shows a network the size of

268
00:08:58,959 --> 00:09:03,599
tour today

269
00:09:00,080 --> 00:09:06,720
of about 65 000 relays and so

270
00:09:03,600 --> 00:09:09,040
for relays we show that walking onions

271
00:09:06,720 --> 00:09:10,640
saves four to six times the bandwidth

272
00:09:09,040 --> 00:09:12,399
over vanilla onion routing

273
00:09:10,640 --> 00:09:14,959
and when we say vanilla onion rotting we

274
00:09:12,399 --> 00:09:16,959
mean the onion riding protocol that is

275
00:09:14,959 --> 00:09:19,279
used in tour today

276
00:09:16,959 --> 00:09:20,959
and even more exciting is that as the

277
00:09:19,279 --> 00:09:24,000
network size grows

278
00:09:20,959 --> 00:09:24,800
this savings to relays just further

279
00:09:24,000 --> 00:09:26,800
increases

280
00:09:24,800 --> 00:09:28,959
so we see an improvement of 20 to 40

281
00:09:26,800 --> 00:09:31,040
times less bandwidth

282
00:09:28,959 --> 00:09:32,000
for an overhead for relays at a network

283
00:09:31,040 --> 00:09:35,599
10 times

284
00:09:32,000 --> 00:09:36,080
the size of tor and for clients this

285
00:09:35,600 --> 00:09:38,240
picture

286
00:09:36,080 --> 00:09:40,000
is even better so again looking at the

287
00:09:38,240 --> 00:09:41,120
graph to the right where that vertical

288
00:09:40,000 --> 00:09:43,279
black line is

289
00:09:41,120 --> 00:09:45,040
that is the size of a network the size

290
00:09:43,279 --> 00:09:46,399
of tour today

291
00:09:45,040 --> 00:09:49,199
and we see that clients and walking

292
00:09:46,399 --> 00:09:50,880
onions save 10 to 15 times the bandwidth

293
00:09:49,200 --> 00:09:54,399
of the vanilla onion routing

294
00:09:50,880 --> 00:09:57,600
for a network the size of tor and

295
00:09:54,399 --> 00:09:59,680
um even more

296
00:09:57,600 --> 00:10:01,120
exciting is that in a network 10 times

297
00:09:59,680 --> 00:10:03,760
the size of tor

298
00:10:01,120 --> 00:10:05,360
clients save 90 to 150 times the

299
00:10:03,760 --> 00:10:07,439
bandwidth over vanilla

300
00:10:05,360 --> 00:10:08,880
so again the improvements for walking

301
00:10:07,440 --> 00:10:12,399
onions just compound

302
00:10:08,880 --> 00:10:12,399
as the network size grows

303
00:10:12,720 --> 00:10:17,040
so what are the takeaways for this talk

304
00:10:15,279 --> 00:10:19,519
first of all we know that the design of

305
00:10:17,040 --> 00:10:21,040
tor today imposes overheads to clients

306
00:10:19,519 --> 00:10:22,880
as the network skills

307
00:10:21,040 --> 00:10:25,360
and this is because until today all

308
00:10:22,880 --> 00:10:28,079
clients maintain this consensus

309
00:10:25,360 --> 00:10:29,839
and as new relays join the network the

310
00:10:28,079 --> 00:10:33,599
size of the consensus grows

311
00:10:29,839 --> 00:10:35,440
and therefore as the network scales

312
00:10:33,600 --> 00:10:36,880
the bandwidth overhead declines becomes

313
00:10:35,440 --> 00:10:39,519
worse

314
00:10:36,880 --> 00:10:41,279
however walking onions removes this per

315
00:10:39,519 --> 00:10:42,880
relay bandwidth and storage

316
00:10:41,279 --> 00:10:44,640
and the reason why it does that is

317
00:10:42,880 --> 00:10:45,279
because clients no longer need to

318
00:10:44,640 --> 00:10:47,680
maintain

319
00:10:45,279 --> 00:10:48,480
the consensus locally they just need to

320
00:10:47,680 --> 00:10:51,279
maintain

321
00:10:48,480 --> 00:10:52,160
this constant size network parameters

322
00:10:51,279 --> 00:10:54,160
document

323
00:10:52,160 --> 00:10:55,199
and they're able to verify the integrity

324
00:10:54,160 --> 00:10:58,480
of their path

325
00:10:55,200 --> 00:11:00,240
in a post-hoc manner

326
00:10:58,480 --> 00:11:01,600
but walking onions does offer the same

327
00:11:00,240 --> 00:11:03,519
security protections

328
00:11:01,600 --> 00:11:05,440
against epistemic and route capture

329
00:11:03,519 --> 00:11:07,680
attacks and we saw that

330
00:11:05,440 --> 00:11:08,720
in that clients can verify the integrity

331
00:11:07,680 --> 00:11:10,399
of the snips

332
00:11:08,720 --> 00:11:12,000
that are returned and they can also be

333
00:11:10,399 --> 00:11:15,440
sure that

334
00:11:12,000 --> 00:11:18,240
their selection of relays is not biased

335
00:11:15,440 --> 00:11:20,000
or different from any other client in

336
00:11:18,240 --> 00:11:21,440
the network

337
00:11:20,000 --> 00:11:22,959
and something that we're really proud of

338
00:11:21,440 --> 00:11:24,880
is that tor's already begun the

339
00:11:22,959 --> 00:11:27,359
specification work to integrate walking

340
00:11:24,880 --> 00:11:29,040
engines into the tour protocol

341
00:11:27,360 --> 00:11:31,760
and you can find even more information

342
00:11:29,040 --> 00:11:43,839
about this in our paper and artifact

343
00:11:31,760 --> 00:11:43,839
at this url here thank you very much

344
00:11:44,000 --> 00:11:46,079
you

