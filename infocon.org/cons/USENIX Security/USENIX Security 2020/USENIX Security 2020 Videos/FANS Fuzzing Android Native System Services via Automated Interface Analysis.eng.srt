1
00:00:09,440 --> 00:00:13,280
thank you for coming my talk

2
00:00:11,200 --> 00:00:14,479
my name is fauton liu i'm from chinhae

3
00:00:13,280 --> 00:00:17,359
university this

4
00:00:14,480 --> 00:00:19,199
you want to work with off level of 360.

5
00:00:17,359 --> 00:00:20,960
today i'm going to talk about android

6
00:00:19,199 --> 00:00:22,720
native student service volume

7
00:00:20,960 --> 00:00:24,880
for the second time i will keep scenes a

8
00:00:22,720 --> 00:00:26,799
bit high level but the four details are

9
00:00:24,880 --> 00:00:30,320
available in our paper

10
00:00:26,800 --> 00:00:32,480
let's start android services provide

11
00:00:30,320 --> 00:00:34,800
many fundamental functionalities

12
00:00:32,479 --> 00:00:35,519
meanwhile the attractive attackers

13
00:00:34,800 --> 00:00:37,839
however

14
00:00:35,520 --> 00:00:41,680
to the best of knowledge existing

15
00:00:37,840 --> 00:00:41,680
researchers pay little attention to them

16
00:00:42,079 --> 00:00:45,440
good many funds system services from

17
00:00:44,160 --> 00:00:47,440
bases rarely

18
00:00:45,440 --> 00:00:48,800
final cracker captures the import models

19
00:00:47,440 --> 00:00:50,800
throughout traffic

20
00:00:48,800 --> 00:00:53,599
and fast season services by mutating the

21
00:00:50,800 --> 00:00:58,000
traffic his purpose focuses on the

22
00:00:53,600 --> 00:01:00,079
under implemented our services

23
00:00:58,000 --> 00:01:01,680
in order to test android native season

24
00:01:00,079 --> 00:01:03,680
services system magically

25
00:01:01,680 --> 00:01:05,280
we dig into the details of android

26
00:01:03,680 --> 00:01:07,200
native season services

27
00:01:05,280 --> 00:01:09,040
here is the communication model between

28
00:01:07,200 --> 00:01:11,360
application and service

29
00:01:09,040 --> 00:01:12,880
but a service will first reject itself

30
00:01:11,360 --> 00:01:14,880
into the service manager

31
00:01:12,880 --> 00:01:16,640
and then listen to and handle requests

32
00:01:14,880 --> 00:01:18,798
from applications

33
00:01:16,640 --> 00:01:21,040
on the other hand an application will

34
00:01:18,799 --> 00:01:23,759
query the service manager to obtain the

35
00:01:21,040 --> 00:01:25,759
interface or target service which is

36
00:01:23,759 --> 00:01:28,080
denoted as a top level

37
00:01:25,759 --> 00:01:29,759
interface then the application can

38
00:01:28,080 --> 00:01:30,479
utilize the top-level interface to

39
00:01:29,759 --> 00:01:33,200
retrieve

40
00:01:30,479 --> 00:01:34,880
a multi-level interface or to call other

41
00:01:33,200 --> 00:01:37,360
transactions to perform

42
00:01:34,880 --> 00:01:39,039
certain actions further the application

43
00:01:37,360 --> 00:01:41,840
could retrieve people multiple

44
00:01:39,040 --> 00:01:45,119
multi-level interfaces and invoke

45
00:01:41,840 --> 00:01:45,119
corresponding transactions

46
00:01:45,840 --> 00:01:50,079
after nice we summarize the volumes we

47
00:01:48,000 --> 00:01:51,280
can use when fuzzing android native

48
00:01:50,079 --> 00:01:53,039
season services

49
00:01:51,280 --> 00:01:54,880
challenge one in addition to the

50
00:01:53,040 --> 00:01:57,520
top-level interfaces rejected

51
00:01:54,880 --> 00:01:59,280
in the service manager they are nested

52
00:01:57,520 --> 00:02:00,880
multi-level interfaces

53
00:01:59,280 --> 00:02:02,640
so we should collect all of the

54
00:02:00,880 --> 00:02:05,759
interfaces and recognize

55
00:02:02,640 --> 00:02:08,080
multi-level interfaces challenge 2 to

56
00:02:05,759 --> 00:02:10,160
improve the funding effectiveness the

57
00:02:08,080 --> 00:02:12,000
input data should

58
00:02:10,160 --> 00:02:14,000
follow grammatical requirements or

59
00:02:12,000 --> 00:02:16,239
target interfaces

60
00:02:14,000 --> 00:02:17,920
so we should extract the interface model

61
00:02:16,239 --> 00:02:20,560
that is we need to collect

62
00:02:17,920 --> 00:02:23,040
all of the possible transactions and

63
00:02:20,560 --> 00:02:25,840
extract the impulse and output variables

64
00:02:23,040 --> 00:02:28,000
in the transactions changes to be we

65
00:02:25,840 --> 00:02:28,959
finally enjoyed native student services

66
00:02:28,000 --> 00:02:31,440
which should

67
00:02:28,959 --> 00:02:33,680
generate a semantic qualified input

68
00:02:31,440 --> 00:02:36,239
there are many types of semantic

69
00:02:33,680 --> 00:02:37,120
requirements including cloud name

70
00:02:36,239 --> 00:02:38,879
variable type

71
00:02:37,120 --> 00:02:41,440
arrival dependency and interface

72
00:02:38,879 --> 00:02:41,440
dependency

73
00:02:42,160 --> 00:02:46,560
to solve the above challenges we propose

74
00:02:44,160 --> 00:02:48,400
a generation-based filing solution funds

75
00:02:46,560 --> 00:02:50,319
funds can be divided into four modules

76
00:02:48,400 --> 00:02:53,599
interface collector

77
00:02:50,319 --> 00:02:56,480
interface mode extractor dependency info

78
00:02:53,599 --> 00:02:56,480
and further engine

79
00:02:56,720 --> 00:03:01,040
firstly let's talk about interface

80
00:02:58,560 --> 00:03:01,040
character

81
00:03:01,599 --> 00:03:05,119
when analyzing interface we observe that

82
00:03:04,159 --> 00:03:06,959
substance use

83
00:03:05,120 --> 00:03:10,080
on transect method to dispatch

84
00:03:06,959 --> 00:03:12,000
transactions according to this feature

85
00:03:10,080 --> 00:03:14,879
we designed the following collection

86
00:03:12,000 --> 00:03:16,800
approach firstly we compare aosp and

87
00:03:14,879 --> 00:03:19,359
record compilation commands

88
00:03:16,800 --> 00:03:21,040
during completion interface related

89
00:03:19,360 --> 00:03:24,400
fields will be used

90
00:03:21,040 --> 00:03:26,560
then we can we scan everything parallel

91
00:03:24,400 --> 00:03:29,360
source field in compilation command

92
00:03:26,560 --> 00:03:32,560
and seek for those fields which contains

93
00:03:29,360 --> 00:03:34,720
the untranslated

94
00:03:32,560 --> 00:03:37,360
so we could collect all of the

95
00:03:34,720 --> 00:03:37,359
interfaces

96
00:03:37,840 --> 00:03:42,000
further the interface motor actuator

97
00:03:40,080 --> 00:03:43,440
extracts the interface model based on

98
00:03:42,000 --> 00:03:45,840
the abstract syntactory

99
00:03:43,440 --> 00:03:46,879
of the interface when extracting

100
00:03:45,840 --> 00:03:49,120
interface

101
00:03:46,879 --> 00:03:50,159
model we should identify all those

102
00:03:49,120 --> 00:03:52,159
transactions

103
00:03:50,159 --> 00:03:53,200
input and out of arrivals in the

104
00:03:52,159 --> 00:03:55,599
transactions

105
00:03:53,200 --> 00:03:56,640
besides we should also express some

106
00:03:55,599 --> 00:04:01,839
other information

107
00:03:56,640 --> 00:04:01,839
for example the enumeration definition

108
00:04:03,120 --> 00:04:08,879
for the transaction code identification

109
00:04:06,239 --> 00:04:10,640
we observe that services use on-transect

110
00:04:08,879 --> 00:04:13,760
method to dispatch

111
00:04:10,640 --> 00:04:16,880
transactions and this process is usually

112
00:04:13,760 --> 00:04:19,358
implemented as a search statement

113
00:04:16,880 --> 00:04:20,478
so we can identify all transactions over

114
00:04:19,358 --> 00:04:22,960
target interface

115
00:04:20,478 --> 00:04:25,599
by analyzing case notes in the abstract

116
00:04:22,960 --> 00:04:25,599
syntax tree

117
00:04:26,800 --> 00:04:30,880
as for the input and output variable

118
00:04:29,040 --> 00:04:33,280
extraction we found that the decision

119
00:04:30,880 --> 00:04:33,919
services utilize special methods to deal

120
00:04:33,280 --> 00:04:36,719
with

121
00:04:33,919 --> 00:04:38,880
input and output variables so we can

122
00:04:36,720 --> 00:04:41,199
extract input and output variables

123
00:04:38,880 --> 00:04:43,440
through recognizing such methods

124
00:04:41,199 --> 00:04:44,720
with extracting variables we will

125
00:04:43,440 --> 00:04:47,759
consider glyphosate

126
00:04:44,720 --> 00:04:51,840
verbally and verb type the path

127
00:04:47,759 --> 00:04:54,080
of arrival is related with its location

128
00:04:51,840 --> 00:04:54,880
variables might look in sequential

129
00:04:54,080 --> 00:04:58,800
conditional

130
00:04:54,880 --> 00:05:00,400
loop elements correspondingly the

131
00:04:58,800 --> 00:05:04,240
pattern could be sequential pattern

132
00:05:00,400 --> 00:05:06,080
conditional pattern and low pattern

133
00:05:04,240 --> 00:05:08,479
for more details please refer to the

134
00:05:06,080 --> 00:05:08,479
paper

135
00:05:08,720 --> 00:05:14,080
besides we will extract some out some

136
00:05:11,840 --> 00:05:15,440
auxiliary information such as

137
00:05:14,080 --> 00:05:19,120
transaction paths

138
00:05:15,440 --> 00:05:23,360
which are separated by the written

139
00:05:19,120 --> 00:05:25,360
statement type definition

140
00:05:23,360 --> 00:05:26,560
for instance structure and urine

141
00:05:25,360 --> 00:05:30,720
definition

142
00:05:26,560 --> 00:05:30,720
enumeration designation type areas

143
00:05:31,759 --> 00:05:37,919
after exchanging the interface model

144
00:05:34,880 --> 00:05:38,719
the dependency infra will infer variable

145
00:05:37,919 --> 00:05:42,240
dependency

146
00:05:38,720 --> 00:05:42,240
and interface dependency

147
00:05:42,960 --> 00:05:46,880
the interface dependency can be divided

148
00:05:44,960 --> 00:05:48,000
into generation dependency and youth

149
00:05:46,880 --> 00:05:50,000
dependency

150
00:05:48,000 --> 00:05:52,080
we will import such dependencies through

151
00:05:50,000 --> 00:05:56,160
the works from bandsaw method and

152
00:05:52,080 --> 00:05:56,159
read from binder method correspondingly

153
00:05:57,600 --> 00:06:00,800
as for the variable dependency it can be

154
00:05:59,840 --> 00:06:02,880
divided into

155
00:06:00,800 --> 00:06:04,560
intro transaction dependency and inter

156
00:06:02,880 --> 00:06:07,280
transaction dependency

157
00:06:04,560 --> 00:06:09,919
intro transaction dependency contains

158
00:06:07,280 --> 00:06:13,280
conditional dependency and so on

159
00:06:09,919 --> 00:06:15,198
it can be inferred when it trading the

160
00:06:13,280 --> 00:06:17,758
interface model

161
00:06:15,199 --> 00:06:19,280
besides we inform inter-transaction

162
00:06:17,759 --> 00:06:20,479
dependencies through the following

163
00:06:19,280 --> 00:06:23,599
principles

164
00:06:20,479 --> 00:06:27,039
one variable is input

165
00:06:23,600 --> 00:06:29,360
and the other is output

166
00:06:27,039 --> 00:06:30,639
these two variables are located in

167
00:06:29,360 --> 00:06:33,440
different

168
00:06:30,639 --> 00:06:34,000
transactions input variables type is

169
00:06:33,440 --> 00:06:36,639
equal to

170
00:06:34,000 --> 00:06:38,560
the output variables type either the

171
00:06:36,639 --> 00:06:41,600
input variable type is complex

172
00:06:38,560 --> 00:06:46,080
or the imposed value name

173
00:06:41,600 --> 00:06:46,080
and the output variable name are similar

174
00:06:46,880 --> 00:06:53,599
lastly we could start firing

175
00:06:50,400 --> 00:06:55,840
the file will firstly randomly generate

176
00:06:53,599 --> 00:06:57,599
a transaction and then generate the

177
00:06:55,840 --> 00:07:00,880
corresponding interface

178
00:06:57,599 --> 00:07:03,599
finally the file will invoke

179
00:07:00,880 --> 00:07:04,639
the target transaction further manager

180
00:07:03,599 --> 00:07:08,000
will run further

181
00:07:04,639 --> 00:07:09,919
bond further status and reserve further

182
00:07:08,000 --> 00:07:11,759
when funding is existing

183
00:07:09,919 --> 00:07:13,520
besides find the manager will

184
00:07:11,759 --> 00:07:17,840
synchronize logs for mobile

185
00:07:13,520 --> 00:07:17,840
to host

186
00:07:18,160 --> 00:07:21,520
as for implementation we mainly use zip

187
00:07:20,639 --> 00:07:24,639
cloud bus

188
00:07:21,520 --> 00:07:27,840
and the person language

189
00:07:24,639 --> 00:07:31,840
and we use more than 2000 lines to

190
00:07:27,840 --> 00:07:31,840
implement the prototype offense

191
00:07:33,840 --> 00:07:38,960
during evaluation we mainly answer the

192
00:07:37,360 --> 00:07:42,319
following questions

193
00:07:38,960 --> 00:07:43,359
question one how many interfaces have

194
00:07:42,319 --> 00:07:45,599
been found

195
00:07:43,360 --> 00:07:46,960
what is the relationship between them

196
00:07:45,599 --> 00:07:49,360
question 2

197
00:07:46,960 --> 00:07:50,560
what does the extracting interface model

198
00:07:49,360 --> 00:07:52,960
look like

199
00:07:50,560 --> 00:07:54,080
is the model complete and precise

200
00:07:52,960 --> 00:07:56,560
question 3

201
00:07:54,080 --> 00:07:57,520
how effective is fans in discovering

202
00:07:56,560 --> 00:08:01,919
vulnerabilities

203
00:07:57,520 --> 00:08:01,919
of android native system services

204
00:08:02,960 --> 00:08:06,479
when evaluating fans we use android

205
00:08:05,520 --> 00:08:10,080
version

206
00:08:06,479 --> 00:08:13,680
android 9.0.0

207
00:08:10,080 --> 00:08:15,280
r46 the source code can be different for

208
00:08:13,680 --> 00:08:17,520
different fixed models

209
00:08:15,280 --> 00:08:19,359
so we answer the question 1 and question

210
00:08:17,520 --> 00:08:24,400
2. so the experiment

211
00:08:19,360 --> 00:08:24,400
results carried out pixel to

212
00:08:24,840 --> 00:08:27,840
xl

213
00:08:28,240 --> 00:08:32,479
for the collected interfaces funds

214
00:08:30,639 --> 00:08:35,519
discovered

215
00:08:32,479 --> 00:08:38,719
43 top-level interfaces

216
00:08:35,519 --> 00:08:41,839
and 25 multi-level interfaces

217
00:08:38,719 --> 00:08:44,320
among them most interfaces are rising

218
00:08:41,839 --> 00:08:44,320
manually

219
00:08:46,240 --> 00:08:49,519
as the four interface dependency graph

220
00:08:48,480 --> 00:08:51,760
is too large

221
00:08:49,519 --> 00:08:53,360
we demonstrate the complexity of

222
00:08:51,760 --> 00:08:57,200
interval dependency

223
00:08:53,360 --> 00:08:59,600
with one of its weaponry parts

224
00:08:57,200 --> 00:09:01,440
we found that an interface can be

225
00:08:59,600 --> 00:09:04,240
generated by multiple

226
00:09:01,440 --> 00:09:04,880
interfaces for example and memory can be

227
00:09:04,240 --> 00:09:09,839
generated

228
00:09:04,880 --> 00:09:09,839
by amid source eye effect and so on

229
00:09:10,720 --> 00:09:13,839
in the figure the deep paste interface

230
00:09:13,279 --> 00:09:17,120
is

231
00:09:13,839 --> 00:09:19,440
a memory heap which can be seen as a

232
00:09:17,120 --> 00:09:21,200
five level interface there exists

233
00:09:19,440 --> 00:09:24,959
customized interface which can be

234
00:09:21,200 --> 00:09:27,839
implemented by developers for example

235
00:09:24,959 --> 00:09:29,680
if client to the best of our knowledge

236
00:09:27,839 --> 00:09:31,760
we are the first to systematically

237
00:09:29,680 --> 00:09:36,640
investigate the interface dependency

238
00:09:31,760 --> 00:09:38,720
in android native student services

239
00:09:36,640 --> 00:09:40,439
as for the extracted interface model

240
00:09:38,720 --> 00:09:45,399
once it creates

241
00:09:40,440 --> 00:09:47,920
530 transactions in top level interfaces

242
00:09:45,399 --> 00:09:49,200
281 transactions in multi-level

243
00:09:47,920 --> 00:09:51,360
interfaces

244
00:09:49,200 --> 00:09:53,040
for the variable here we only talk about

245
00:09:51,360 --> 00:09:53,760
the driver pattern due to the time and

246
00:09:53,040 --> 00:09:56,079
image

247
00:09:53,760 --> 00:09:59,439
one figure we could find that most

248
00:09:56,080 --> 00:10:01,440
variables are under constraints

249
00:09:59,440 --> 00:10:03,279
as there we know quantus about interface

250
00:10:01,440 --> 00:10:05,360
model we randomly

251
00:10:03,279 --> 00:10:06,480
selected interfaces manually checked

252
00:10:05,360 --> 00:10:08,560
interface models

253
00:10:06,480 --> 00:10:10,000
we found that all of the transaction

254
00:10:08,560 --> 00:10:12,880
codes are recovered

255
00:10:10,000 --> 00:10:14,880
fulfilling complete limits and almost

256
00:10:12,880 --> 00:10:17,600
all the write patterns from needs and

257
00:10:14,880 --> 00:10:19,519
web types are recovered otherwise we

258
00:10:17,600 --> 00:10:21,760
found that the imprecision

259
00:10:19,519 --> 00:10:24,320
is mainly due to the complexity of the

260
00:10:21,760 --> 00:10:24,319
source code

261
00:10:24,560 --> 00:10:30,719
we intermittently run fast on our six

262
00:10:26,959 --> 00:10:30,719
smartphones for around 30 days

263
00:10:31,839 --> 00:10:35,839
triggered thousands of crises after the

264
00:10:33,839 --> 00:10:38,640
duplicating fund discovered

265
00:10:35,839 --> 00:10:40,320
31 billions in native programs google

266
00:10:38,640 --> 00:10:44,839
has reproduced

267
00:10:40,320 --> 00:10:49,120
21 weighted alone and we also discovered

268
00:10:44,839 --> 00:10:53,600
138 java exceptions benefits from the 80

269
00:10:49,120 --> 00:10:57,279
members on android 5.1

270
00:10:53,600 --> 00:11:00,399
and android 6.0

271
00:10:57,279 --> 00:11:05,120
funds covered 160

272
00:11:00,399 --> 00:11:07,120
basis of android 9.0.0.46

273
00:11:05,120 --> 00:11:08,399
we think that finds a superior over

274
00:11:07,120 --> 00:11:10,560
blind cracker and

275
00:11:08,399 --> 00:11:12,399
android cutie has been improving over

276
00:11:10,560 --> 00:11:14,239
the years

277
00:11:12,399 --> 00:11:16,480
here are some things we could be done in

278
00:11:14,240 --> 00:11:17,519
the future improve the accuracy of the

279
00:11:16,480 --> 00:11:20,160
interface model

280
00:11:17,519 --> 00:11:21,279
integrate coverage into funds improve

281
00:11:20,160 --> 00:11:23,920
the efficiency

282
00:11:21,279 --> 00:11:24,480
of funds extend current work to other

283
00:11:23,920 --> 00:11:27,040
employee

284
00:11:24,480 --> 00:11:28,720
interface-based programs in android such

285
00:11:27,040 --> 00:11:30,560
as in any system services

286
00:11:28,720 --> 00:11:32,800
implemented by windows java season

287
00:11:30,560 --> 00:11:34,800
services

288
00:11:32,800 --> 00:11:37,120
to conclude with the system medical

289
00:11:34,800 --> 00:11:37,920
investigation or integrate dependency we

290
00:11:37,120 --> 00:11:41,760
proposed an

291
00:11:37,920 --> 00:11:45,040
approach to mexico they extract info

292
00:11:41,760 --> 00:11:46,000
interface model we proposed an approach

293
00:11:45,040 --> 00:11:48,160
to info

294
00:11:46,000 --> 00:11:50,160
intel transaction variable dependency we

295
00:11:48,160 --> 00:11:51,680
implemented a prototype of file to

296
00:11:50,160 --> 00:11:54,000
systematically for us

297
00:11:51,680 --> 00:11:55,680
and donating student services and have

298
00:11:54,000 --> 00:11:59,200
from the study

299
00:11:55,680 --> 00:12:01,040
native families and 138

300
00:11:59,200 --> 00:12:03,440
general exceptions besides we owe

301
00:12:01,040 --> 00:12:04,959
improved fans have fun with it

302
00:12:03,440 --> 00:12:11,839
that's it for my talk thanks for

303
00:12:04,959 --> 00:12:11,839
listening questions are welcome

304
00:12:15,920 --> 00:12:18,000
you

