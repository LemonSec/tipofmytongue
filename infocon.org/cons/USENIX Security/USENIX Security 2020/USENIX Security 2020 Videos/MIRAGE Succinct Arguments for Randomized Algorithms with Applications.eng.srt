1
00:00:08,960 --> 00:00:12,000
hello everyone

2
00:00:10,480 --> 00:00:14,000
i'm ahmed khazbah and i'm going to

3
00:00:12,000 --> 00:00:15,440
present you our work on mirage

4
00:00:14,000 --> 00:00:16,960
success arguments for randomized

5
00:00:15,440 --> 00:00:18,640
algorithms with applications to

6
00:00:16,960 --> 00:00:20,160
universal zika snarks

7
00:00:18,640 --> 00:00:21,840
this is joint work with demetrius

8
00:00:20,160 --> 00:00:25,279
babadopoulos published by

9
00:00:21,840 --> 00:00:26,960
mantho and don song in our work we

10
00:00:25,279 --> 00:00:27,599
consider the setting of the large proofs

11
00:00:26,960 --> 00:00:29,039
in which

12
00:00:27,599 --> 00:00:31,439
approver would like to convince a

13
00:00:29,039 --> 00:00:34,399
verifier that the result of applying

14
00:00:31,439 --> 00:00:35,040
a function f on some input x and private

15
00:00:34,399 --> 00:00:36,719
input w

16
00:00:35,040 --> 00:00:38,800
that is only known to the approver is

17
00:00:36,719 --> 00:00:40,399
equal to y without leaking any

18
00:00:38,800 --> 00:00:43,440
information about

19
00:00:40,399 --> 00:00:45,039
the private input w

20
00:00:43,440 --> 00:00:47,120
uh recently there have been a lot of

21
00:00:45,039 --> 00:00:48,879
work on um

22
00:00:47,120 --> 00:00:50,879
on a primitive called zika snarks which

23
00:00:48,879 --> 00:00:52,718
stand for zero knowledge sex and

24
00:00:50,879 --> 00:00:55,440
non-interactive arguments of knowledge

25
00:00:52,719 --> 00:00:56,719
which provide very very short proofs and

26
00:00:55,440 --> 00:00:59,039
fast verification

27
00:00:56,719 --> 00:01:00,559
and this talk we mainly consider the qeb

28
00:00:59,039 --> 00:01:02,719
based zika snarks

29
00:01:00,559 --> 00:01:03,680
which were introduced in 2013 and later

30
00:01:02,719 --> 00:01:06,240
improved in

31
00:01:03,680 --> 00:01:08,080
2016 and the generic group model which

32
00:01:06,240 --> 00:01:11,360
provide

33
00:01:08,080 --> 00:01:12,798
constant size proofs as low as 128 bytes

34
00:01:11,360 --> 00:01:14,240
in the generic group model

35
00:01:12,799 --> 00:01:16,240
and the verification is linear in the

36
00:01:14,240 --> 00:01:17,600
size of the statement uh this was

37
00:01:16,240 --> 00:01:20,479
actually attractive for many

38
00:01:17,600 --> 00:01:21,679
uh applications across um

39
00:01:20,479 --> 00:01:24,159
cryptocurrencies like

40
00:01:21,680 --> 00:01:25,520
c cash and a privacy preserving

41
00:01:24,159 --> 00:01:28,159
cryptocurrency

42
00:01:25,520 --> 00:01:29,520
preserving smart contracts there are

43
00:01:28,159 --> 00:01:30,799
also other applications like food

44
00:01:29,520 --> 00:01:33,679
authentication and certificate

45
00:01:30,799 --> 00:01:36,720
validation and others

46
00:01:33,680 --> 00:01:37,439
however zika stocks have challenges in

47
00:01:36,720 --> 00:01:39,039
practice

48
00:01:37,439 --> 00:01:41,360
the first one is the high proof

49
00:01:39,040 --> 00:01:42,720
competition cost this led to several

50
00:01:41,360 --> 00:01:44,560
works on

51
00:01:42,720 --> 00:01:46,158
efficient circuit representations a

52
00:01:44,560 --> 00:01:47,920
starter friendly cryptography

53
00:01:46,159 --> 00:01:50,000
different optimizations in the back end

54
00:01:47,920 --> 00:01:52,560
and distributed zika smart proof

55
00:01:50,000 --> 00:01:52,560
computations

56
00:01:52,720 --> 00:01:57,200
the second uh drawback or challenge is

57
00:01:55,439 --> 00:01:59,600
the trusted setup bear

58
00:01:57,200 --> 00:02:01,280
computation uh the prover and verifier

59
00:01:59,600 --> 00:02:03,119
need access to a common reference string

60
00:02:01,280 --> 00:02:04,880
that is generated in a trusted manner

61
00:02:03,119 --> 00:02:06,640
and if this is done insecurely the

62
00:02:04,880 --> 00:02:10,639
approver uh

63
00:02:06,640 --> 00:02:12,160
will be able to cheat and if we try now

64
00:02:10,639 --> 00:02:15,599
to look at the zika proof systems

65
00:02:12,160 --> 00:02:17,599
in uh in the space so the first class is

66
00:02:15,599 --> 00:02:20,399
what i just mentioned the zika snarks

67
00:02:17,599 --> 00:02:22,879
that require just a certain computation

68
00:02:20,400 --> 00:02:24,560
uh which which give gives us this very

69
00:02:22,879 --> 00:02:26,799
nice performance

70
00:02:24,560 --> 00:02:28,560
properties the second class does not

71
00:02:26,800 --> 00:02:29,920
require trusted setup

72
00:02:28,560 --> 00:02:31,760
however the proof size and the

73
00:02:29,920 --> 00:02:34,399
verification effort or the verification

74
00:02:31,760 --> 00:02:36,000
effort are increased

75
00:02:34,400 --> 00:02:38,319
researchers have been also working on a

76
00:02:36,000 --> 00:02:39,920
middle ground um

77
00:02:38,319 --> 00:02:42,000
uh so recessions have been working on

78
00:02:39,920 --> 00:02:43,760
zika proof systems that require only

79
00:02:42,000 --> 00:02:45,200
a universal trust to set up a single

80
00:02:43,760 --> 00:02:48,160
trusted phase that

81
00:02:45,200 --> 00:02:50,000
uh that is only needed in the beginning

82
00:02:48,160 --> 00:02:54,000
uh there are two approaches in this area

83
00:02:50,000 --> 00:02:56,080
one is uh based on universal circuits

84
00:02:54,000 --> 00:02:57,200
the most notable uh work in this area is

85
00:02:56,080 --> 00:02:58,560
the interneuram

86
00:02:57,200 --> 00:03:00,720
which maintains success proofs and

87
00:02:58,560 --> 00:03:02,400
efficient verification but uh it has

88
00:03:00,720 --> 00:03:04,159
very high proof competition cost

89
00:03:02,400 --> 00:03:06,480
and the universal circuit has a

90
00:03:04,159 --> 00:03:10,079
quasi-linear size

91
00:03:06,480 --> 00:03:10,079
with respect to the number of operations

92
00:03:10,400 --> 00:03:14,560
the second approach is based on

93
00:03:13,440 --> 00:03:17,200
universal updatable

94
00:03:14,560 --> 00:03:18,159
crs an example system for example is

95
00:03:17,200 --> 00:03:20,640
sonic

96
00:03:18,159 --> 00:03:21,280
which provides a proof of 1.1 kilobytes

97
00:03:20,640 --> 00:03:23,760
in

98
00:03:21,280 --> 00:03:25,760
its unhelped mode uh there are also

99
00:03:23,760 --> 00:03:27,840
concurrent works like blanca marlin

100
00:03:25,760 --> 00:03:29,120
which also provides short proofs ranging

101
00:03:27,840 --> 00:03:33,120
from

102
00:03:29,120 --> 00:03:34,879
400 bytes to 1 kilobyte

103
00:03:33,120 --> 00:03:36,959
the contributions of our work are as

104
00:03:34,879 --> 00:03:38,720
follows we aim to address the previous

105
00:03:36,959 --> 00:03:40,560
two challenges of zika snarks

106
00:03:38,720 --> 00:03:41,840
by enabling randomized verification in

107
00:03:40,560 --> 00:03:43,840
the stock circuits

108
00:03:41,840 --> 00:03:45,599
and making universal circuits more

109
00:03:43,840 --> 00:03:47,920
efficient

110
00:03:45,599 --> 00:03:49,200
in comparison with other universal zika

111
00:03:47,920 --> 00:03:52,559
proof systems

112
00:03:49,200 --> 00:03:53,920
our universal circuit is linear and in

113
00:03:52,560 --> 00:03:55,360
with respect to the number of vibrations

114
00:03:53,920 --> 00:03:56,879
instead of the internal amps

115
00:03:55,360 --> 00:03:58,560
quasi-linear circuit

116
00:03:56,879 --> 00:04:00,319
we maintain succinct proofs and

117
00:03:58,560 --> 00:04:03,519
efficient verification so the proof size

118
00:04:00,319 --> 00:04:07,119
in our case is 160

119
00:04:03,519 --> 00:04:10,959
bytes with only 32 bytes more than

120
00:04:07,120 --> 00:04:11,840
growth 16 zig snark our proof size is 7x

121
00:04:10,959 --> 00:04:14,879
less than sonic

122
00:04:11,840 --> 00:04:17,280
and they're on help mode and 2.8 xl then

123
00:04:14,879 --> 00:04:18,959
concurrent work in terms of limitation

124
00:04:17,279 --> 00:04:20,880
our crs is not updatable

125
00:04:18,959 --> 00:04:22,880
and the proof competition overhead is

126
00:04:20,880 --> 00:04:24,159
high in comparison with the per circuit

127
00:04:22,880 --> 00:04:28,400
pre-processing

128
00:04:24,160 --> 00:04:30,800
uh zika snarks so although we improved

129
00:04:28,400 --> 00:04:31,758
upon the entire rams approach and

130
00:04:30,800 --> 00:04:33,919
reduced

131
00:04:31,759 --> 00:04:36,560
the gap there's still cost that needs to

132
00:04:33,919 --> 00:04:38,240
be made for being universal

133
00:04:36,560 --> 00:04:40,080
next i'm going to describe the details

134
00:04:38,240 --> 00:04:42,479
of our work

135
00:04:40,080 --> 00:04:43,680
let's first review zika stock circuits

136
00:04:42,479 --> 00:04:45,280
uh briefly

137
00:04:43,680 --> 00:04:47,199
so typically we start from a high-level

138
00:04:45,280 --> 00:04:48,320
description of the computation that we

139
00:04:47,199 --> 00:04:49,840
would like to verify

140
00:04:48,320 --> 00:04:51,520
for example here we have a computation

141
00:04:49,840 --> 00:04:52,880
that takes input from the verifier and

142
00:04:51,520 --> 00:04:55,440
which is from the approver

143
00:04:52,880 --> 00:04:57,120
this gets translated into an arithmetic

144
00:04:55,440 --> 00:04:58,000
circuit of additional multiplication

145
00:04:57,120 --> 00:05:00,320
over

146
00:04:58,000 --> 00:05:02,720
a finite field which also gets

147
00:05:00,320 --> 00:05:04,639
transformed into a set of r1cs

148
00:05:02,720 --> 00:05:06,160
constraints the performance of the

149
00:05:04,639 --> 00:05:07,280
prover typically depends on the number

150
00:05:06,160 --> 00:05:08,800
of

151
00:05:07,280 --> 00:05:10,799
constraints in the circuit or the number

152
00:05:08,800 --> 00:05:12,400
of multiplication gates

153
00:05:10,800 --> 00:05:14,320
and the question we would like to ask

154
00:05:12,400 --> 00:05:16,159
you is how to support randomized

155
00:05:14,320 --> 00:05:18,240
algorithms

156
00:05:16,160 --> 00:05:20,160
so why do we need to support randomized

157
00:05:18,240 --> 00:05:21,199
algorithms because many problems can be

158
00:05:20,160 --> 00:05:23,520
solved many

159
00:05:21,199 --> 00:05:24,400
more efficiently using randomized

160
00:05:23,520 --> 00:05:26,159
algorithms

161
00:05:24,400 --> 00:05:28,560
examples include polynomial identity

162
00:05:26,160 --> 00:05:30,400
testing and primality testing

163
00:05:28,560 --> 00:05:32,240
and in the case of universal seeds the

164
00:05:30,400 --> 00:05:34,479
snarks zig snark circuits

165
00:05:32,240 --> 00:05:36,560
specifically randomization can help with

166
00:05:34,479 --> 00:05:40,000
verifying permutations

167
00:05:36,560 --> 00:05:40,800
more efficiently so why is implementing

168
00:05:40,000 --> 00:05:44,720
randomized

169
00:05:40,800 --> 00:05:46,800
verification and the circuit challenging

170
00:05:44,720 --> 00:05:49,039
because if we if we try to implement

171
00:05:46,800 --> 00:05:50,720
this uh assemble as this like having a

172
00:05:49,039 --> 00:05:52,479
randomized verification circuit

173
00:05:50,720 --> 00:05:55,039
that takes the problem and the solution

174
00:05:52,479 --> 00:05:56,479
and some random values

175
00:05:55,039 --> 00:05:58,800
if we allow the prover to choose the

176
00:05:56,479 --> 00:06:00,800
randomness or if the approver managed

177
00:05:58,800 --> 00:06:02,639
to know the randomness before completing

178
00:06:00,800 --> 00:06:04,720
the solution the brewer will be able to

179
00:06:02,639 --> 00:06:08,800
cheat

180
00:06:04,720 --> 00:06:10,560
so to avoid this we can uh

181
00:06:08,800 --> 00:06:12,720
let the proofer only know the randomness

182
00:06:10,560 --> 00:06:15,919
after he comes up with the solution

183
00:06:12,720 --> 00:06:18,319
for example we can have some sort of

184
00:06:15,919 --> 00:06:19,520
hash function in the circuit that takes

185
00:06:18,319 --> 00:06:20,400
the problem and the solution and

186
00:06:19,520 --> 00:06:22,080
produces

187
00:06:20,400 --> 00:06:24,159
the random values needed for the

188
00:06:22,080 --> 00:06:25,680
randomized verification circuit

189
00:06:24,160 --> 00:06:27,360
but the problem here that this solution

190
00:06:25,680 --> 00:06:28,880
will have a very high cost

191
00:06:27,360 --> 00:06:31,520
due to calling the hash function in the

192
00:06:28,880 --> 00:06:33,120
circuit so can we do this can we support

193
00:06:31,520 --> 00:06:36,400
this randomized verification

194
00:06:33,120 --> 00:06:38,319
without having to pay this cost

195
00:06:36,400 --> 00:06:40,479
what we show in the paper is that we can

196
00:06:38,319 --> 00:06:42,080
do this by modifying the zika smart

197
00:06:40,479 --> 00:06:44,639
protocol itself

198
00:06:42,080 --> 00:06:47,280
and the way we do this is that we avoid

199
00:06:44,639 --> 00:06:49,039
the hash function calls on the circuit

200
00:06:47,280 --> 00:06:51,119
but the prover will add only one group

201
00:06:49,039 --> 00:06:53,599
element to the zika snark proof

202
00:06:51,120 --> 00:06:55,360
our total proof size is 160 bytes and

203
00:06:53,599 --> 00:06:57,199
the prover will do one extra bearing and

204
00:06:55,360 --> 00:06:59,919
apply hash function holes

205
00:06:57,199 --> 00:07:01,039
on one on part of the zika snark proofs

206
00:06:59,919 --> 00:07:03,840
typically uh

207
00:07:01,039 --> 00:07:04,560
in the in the context of you know our

208
00:07:03,840 --> 00:07:07,280
universal

209
00:07:04,560 --> 00:07:10,560
zika snark circuit uh the verifier will

210
00:07:07,280 --> 00:07:12,559
only need two hash function calls

211
00:07:10,560 --> 00:07:14,319
um and i'm going to give a very

212
00:07:12,560 --> 00:07:16,960
simplified intuition here

213
00:07:14,319 --> 00:07:17,759
um and the zika stock protocol typically

214
00:07:16,960 --> 00:07:19,280
the approver

215
00:07:17,759 --> 00:07:21,120
computes the group elements as functions

216
00:07:19,280 --> 00:07:22,559
of all wires in the circuit

217
00:07:21,120 --> 00:07:25,120
these group elements can act as

218
00:07:22,560 --> 00:07:26,639
commitments so we force the prover to do

219
00:07:25,120 --> 00:07:27,280
the computation of the proof over two

220
00:07:26,639 --> 00:07:30,080
stages

221
00:07:27,280 --> 00:07:31,758
so in the first stage the commitment is

222
00:07:30,080 --> 00:07:35,280
completed over the wires

223
00:07:31,759 --> 00:07:37,280
that are that don't need the randomness

224
00:07:35,280 --> 00:07:39,359
and then this first part of the zig

225
00:07:37,280 --> 00:07:40,318
snark proof is used to produce the

226
00:07:39,360 --> 00:07:41,919
randomness needed

227
00:07:40,319 --> 00:07:43,599
for the rest of the circuit of course

228
00:07:41,919 --> 00:07:46,799
this has to be done

229
00:07:43,599 --> 00:07:48,080
carefully and you can find the formal

230
00:07:46,800 --> 00:07:51,919
details in

231
00:07:48,080 --> 00:07:53,280
the paper now the next question is how

232
00:07:51,919 --> 00:07:54,639
to make universal circuits more

233
00:07:53,280 --> 00:07:56,719
efficient

234
00:07:54,639 --> 00:07:58,160
so first what is the universal circuit

235
00:07:56,720 --> 00:07:58,800
it's a circuit that accepts a program

236
00:07:58,160 --> 00:08:02,319
description

237
00:07:58,800 --> 00:08:03,840
and an assignment and the assignment is

238
00:08:02,319 --> 00:08:07,039
the values of all variables

239
00:08:03,840 --> 00:08:08,400
and it makes sure that the values

240
00:08:07,039 --> 00:08:11,759
of the assignment are consistent with

241
00:08:08,400 --> 00:08:13,039
the program description for example

242
00:08:11,759 --> 00:08:14,800
if we have a symbol universal circuit

243
00:08:13,039 --> 00:08:16,878
here that supports two multiplication

244
00:08:14,800 --> 00:08:18,160
operations and two addition operations

245
00:08:16,879 --> 00:08:19,919
uh it will look that way

246
00:08:18,160 --> 00:08:21,680
for every operation it needs to take the

247
00:08:19,919 --> 00:08:23,359
ids of

248
00:08:21,680 --> 00:08:25,360
the variables that need to be multiplied

249
00:08:23,360 --> 00:08:30,639
or added and also the values

250
00:08:25,360 --> 00:08:33,919
that will that will need to be checked

251
00:08:30,639 --> 00:08:37,760
the circuit will have to check

252
00:08:33,919 --> 00:08:37,760
the correctness so for every operation

253
00:08:38,080 --> 00:08:42,080
it has to check that it has been done

254
00:08:39,440 --> 00:08:44,000
correctly for example for the first one

255
00:08:42,080 --> 00:08:45,200
it needs to check that v1 times v2 is

256
00:08:44,000 --> 00:08:47,360
equal to v3

257
00:08:45,200 --> 00:08:48,720
and the second check is that it needs to

258
00:08:47,360 --> 00:08:50,399
verify consistency

259
00:08:48,720 --> 00:08:52,320
which is that the variables that have

260
00:08:50,399 --> 00:08:55,600
the same ids are going to have the same

261
00:08:52,320 --> 00:08:57,519
values across all the circuit

262
00:08:55,600 --> 00:08:59,279
to implement step number two efficiently

263
00:08:57,519 --> 00:09:00,800
or the second question

264
00:08:59,279 --> 00:09:03,120
efficiently this requires the checking

265
00:09:00,800 --> 00:09:04,800
permutations of the circuit

266
00:09:03,120 --> 00:09:06,720
the way this was done in previous

267
00:09:04,800 --> 00:09:09,839
approaches like

268
00:09:06,720 --> 00:09:11,040
the internal interneuram um a

269
00:09:09,839 --> 00:09:14,000
permutation network

270
00:09:11,040 --> 00:09:16,160
was used this has order n log n over

271
00:09:14,000 --> 00:09:17,920
headwear and is the number of vibrations

272
00:09:16,160 --> 00:09:19,760
using our modified z snark and

273
00:09:17,920 --> 00:09:23,680
randomized verification

274
00:09:19,760 --> 00:09:25,760
we can reduce this cost to order of n

275
00:09:23,680 --> 00:09:28,239
we also explore other assets related to

276
00:09:25,760 --> 00:09:32,399
universal circuit design

277
00:09:28,240 --> 00:09:34,240
and the vapor in terms of evaluation

278
00:09:32,399 --> 00:09:35,839
and in this first slide we show how we

279
00:09:34,240 --> 00:09:37,360
can reduce the gap between the universal

280
00:09:35,839 --> 00:09:38,560
circuit approaches and the custom

281
00:09:37,360 --> 00:09:40,000
circuits

282
00:09:38,560 --> 00:09:41,839
for example for an application like

283
00:09:40,000 --> 00:09:43,360
matrix multiplication if we have a

284
00:09:41,839 --> 00:09:46,320
custom circuit

285
00:09:43,360 --> 00:09:49,440
that supports metrics multiplication of

286
00:09:46,320 --> 00:09:52,640
dimension 188

287
00:09:49,440 --> 00:09:54,720
um using the same cost we can support

288
00:09:52,640 --> 00:09:56,399
the internet circuit that supports

289
00:09:54,720 --> 00:09:59,600
multiplication of

290
00:09:56,399 --> 00:10:01,519
um of matrices of

291
00:09:59,600 --> 00:10:03,279
dimension seven according to the buffet

292
00:10:01,519 --> 00:10:06,079
paper in our case

293
00:10:03,279 --> 00:10:06,959
the supported dimension will be uh 40

294
00:10:06,079 --> 00:10:09,599
about 40 for

295
00:10:06,959 --> 00:10:10,000
the same cost also for merge sort we can

296
00:10:09,600 --> 00:10:13,279
see

297
00:10:10,000 --> 00:10:16,240
that we reduce the gap between

298
00:10:13,279 --> 00:10:18,160
the custom optimized circuit for merge

299
00:10:16,240 --> 00:10:21,120
sort and the universal circuit

300
00:10:18,160 --> 00:10:21,120
of the antagonia

301
00:10:21,839 --> 00:10:25,440
in the second setting here we show how

302
00:10:24,079 --> 00:10:27,439
our approach can

303
00:10:25,440 --> 00:10:30,160
be used in one of the applications so

304
00:10:27,440 --> 00:10:31,920
for example in

305
00:10:30,160 --> 00:10:34,560
in hawk privacy preserving smart

306
00:10:31,920 --> 00:10:36,399
contracts a trusted setup was needed

307
00:10:34,560 --> 00:10:38,560
with each smart contract this was one of

308
00:10:36,399 --> 00:10:41,440
its challenges

309
00:10:38,560 --> 00:10:42,880
uh instead mirage the universal circuit

310
00:10:41,440 --> 00:10:46,000
can be used

311
00:10:42,880 --> 00:10:47,920
so in using mirage graphic keys would be

312
00:10:46,000 --> 00:10:50,399
generated once in a trusted manner

313
00:10:47,920 --> 00:10:52,079
and for any new computation a publicly

314
00:10:50,399 --> 00:10:54,399
verifiable custom verification key

315
00:10:52,079 --> 00:10:55,120
about 32 bytes would be pushed to the

316
00:10:54,399 --> 00:10:57,200
blockchain

317
00:10:55,120 --> 00:10:59,279
this does not require a trusted setup

318
00:10:57,200 --> 00:11:01,600
this can be verified by

319
00:10:59,279 --> 00:11:03,439
by anyone and as we show in the table

320
00:11:01,600 --> 00:11:06,560
here for an application of an auction

321
00:11:03,440 --> 00:11:08,000
with six parties five participants and

322
00:11:06,560 --> 00:11:10,800
one manager

323
00:11:08,000 --> 00:11:12,160
of course hawk is going to have a better

324
00:11:10,800 --> 00:11:15,199
proof time

325
00:11:12,160 --> 00:11:18,319
than the mirage but it requires uh

326
00:11:15,200 --> 00:11:21,519
a trusted setup for every application

327
00:11:18,320 --> 00:11:23,200
uh in in when we use mirage we maintain

328
00:11:21,519 --> 00:11:24,720
this example a minimum verification

329
00:11:23,200 --> 00:11:28,959
overhead we just have

330
00:11:24,720 --> 00:11:30,320
um added 32 bytes to the proof and

331
00:11:28,959 --> 00:11:32,239
about 0.6 milliseconds to the

332
00:11:30,320 --> 00:11:33,440
verification time but as i mentioned in

333
00:11:32,240 --> 00:11:34,560
the beginning that there is a cost of

334
00:11:33,440 --> 00:11:36,560
universality

335
00:11:34,560 --> 00:11:38,079
that needs to be paid uh the

336
00:11:36,560 --> 00:11:39,359
contribution of this work is that we

337
00:11:38,079 --> 00:11:41,519
managed to reduce this

338
00:11:39,360 --> 00:11:42,399
this cost from the anti-nurim but

339
00:11:41,519 --> 00:11:44,240
there's

340
00:11:42,399 --> 00:11:46,399
still something that needs to be paid

341
00:11:44,240 --> 00:11:49,040
for being universal

342
00:11:46,399 --> 00:11:50,639
so uh in conclusion we presented mirage

343
00:11:49,040 --> 00:11:52,480
which enables a verification of

344
00:11:50,639 --> 00:11:53,200
randomized algorithms and six star

345
00:11:52,480 --> 00:11:56,160
circuits

346
00:11:53,200 --> 00:11:57,600
and provides linear size universal

347
00:11:56,160 --> 00:11:59,360
circuits

348
00:11:57,600 --> 00:12:02,000
there are several feature directions

349
00:11:59,360 --> 00:12:03,600
like exploring more optimizations for

350
00:12:02,000 --> 00:12:05,519
the universal circuit design

351
00:12:03,600 --> 00:12:06,639
exploring scalability options how can we

352
00:12:05,519 --> 00:12:09,839
support

353
00:12:06,639 --> 00:12:11,360
applications for more participants in

354
00:12:09,839 --> 00:12:13,680
the case of hawk for example

355
00:12:11,360 --> 00:12:15,600
and also integrate this randomization in

356
00:12:13,680 --> 00:12:17,439
zika star compilers because

357
00:12:15,600 --> 00:12:19,680
the randomized algorithms does not only

358
00:12:17,440 --> 00:12:22,880
benefit universal circuits it can also

359
00:12:19,680 --> 00:12:36,399
benefit other non-universal

360
00:12:22,880 --> 00:12:36,399
circuits thank you

