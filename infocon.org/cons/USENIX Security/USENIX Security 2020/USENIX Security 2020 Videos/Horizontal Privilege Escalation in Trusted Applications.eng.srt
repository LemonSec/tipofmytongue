1
00:00:08,800 --> 00:00:12,559
hello everyone

2
00:00:10,080 --> 00:00:15,120
my name is daru suju and i present a set

3
00:00:12,559 --> 00:00:16,720
of new horizontal pre-education attacks

4
00:00:15,120 --> 00:00:18,720
that were found in tradition-based

5
00:00:16,720 --> 00:00:20,240
systems

6
00:00:18,720 --> 00:00:23,359
first let me begin with a little

7
00:00:20,240 --> 00:00:25,759
background we all know that over time

8
00:00:23,359 --> 00:00:28,000
the cost of applications and operations

9
00:00:25,760 --> 00:00:30,080
have increased dramatically

10
00:00:28,000 --> 00:00:31,840
as the contents of code increase the

11
00:00:30,080 --> 00:00:32,640
number of unability spreads applications

12
00:00:31,840 --> 00:00:36,160
and oss

13
00:00:32,640 --> 00:00:37,680
also have increased trazon represents

14
00:00:36,160 --> 00:00:39,839
one of the solutions to mitigate the

15
00:00:37,680 --> 00:00:42,239
impact of a compromised device

16
00:00:39,840 --> 00:00:43,120
under trial zone most software runs in

17
00:00:42,239 --> 00:00:46,640
the normal world

18
00:00:43,120 --> 00:00:48,480
under regional play system like android

19
00:00:46,640 --> 00:00:50,239
in addition to a normal world the

20
00:00:48,480 --> 00:00:51,680
processor can also execute security

21
00:00:50,239 --> 00:00:54,320
critical applications

22
00:00:51,680 --> 00:00:55,199
also known as as trusted applications or

23
00:00:54,320 --> 00:00:58,399
tas

24
00:00:55,199 --> 00:01:00,160
inside the secure world these tas run

25
00:00:58,399 --> 00:01:02,640
isotopes from normal world alongside a

26
00:01:00,160 --> 00:01:05,438
secure os

27
00:01:02,640 --> 00:01:06,960
in razon the normal applications can not

28
00:01:05,438 --> 00:01:07,679
only directly communicate with the reach

29
00:01:06,960 --> 00:01:10,720
of us

30
00:01:07,680 --> 00:01:12,479
but also with tas to share memory

31
00:01:10,720 --> 00:01:15,119
with the help of the two vessels

32
00:01:12,479 --> 00:01:17,119
alongside a monitor

33
00:01:15,119 --> 00:01:18,880
the key of the tertiary texture

34
00:01:17,119 --> 00:01:19,840
represents the fact that secure software

35
00:01:18,880 --> 00:01:21,600
and our devices

36
00:01:19,840 --> 00:01:24,880
are protected from direct access of a

37
00:01:21,600 --> 00:01:24,880
compromised normal world

38
00:01:25,759 --> 00:01:28,960
moving applications inside the secure

39
00:01:27,280 --> 00:01:29,759
world however does not completely

40
00:01:28,960 --> 00:01:32,640
protect them

41
00:01:29,759 --> 00:01:34,400
against attacks from the normal world

42
00:01:32,640 --> 00:01:36,799
privilege escalation vulnerabilities

43
00:01:34,400 --> 00:01:38,560
exist exist in not both the normal world

44
00:01:36,799 --> 00:01:42,079
and secure world

45
00:01:38,560 --> 00:01:44,320
for example if the rich os is vulnerable

46
00:01:42,079 --> 00:01:45,119
a compromised normal app can escalate

47
00:01:44,320 --> 00:01:48,720
its privileges

48
00:01:45,119 --> 00:01:50,399
into the os kernel once is at the kernel

49
00:01:48,720 --> 00:01:52,320
the attacker can target vulnerabilities

50
00:01:50,399 --> 00:01:55,040
inside the ace

51
00:01:52,320 --> 00:01:57,199
tas in turn can be used to target secure

52
00:01:55,040 --> 00:01:58,799
world vulnerabilities

53
00:01:57,200 --> 00:02:00,640
once a secure os or monitor is

54
00:01:58,799 --> 00:02:03,840
compromised attacker have complete

55
00:02:00,640 --> 00:02:03,840
control over the device

56
00:02:04,479 --> 00:02:08,478
it is also important to note that razon

57
00:02:06,880 --> 00:02:10,560
can also introduce new attack vectors

58
00:02:08,479 --> 00:02:12,879
into normal software

59
00:02:10,560 --> 00:02:13,920
for example vulnerabilities inside a

60
00:02:12,879 --> 00:02:15,920
secure world

61
00:02:13,920 --> 00:02:17,599
can enable applications to exploit the

62
00:02:15,920 --> 00:02:20,958
communication with tas

63
00:02:17,599 --> 00:02:23,119
to launch boomerang attacks briefly

64
00:02:20,959 --> 00:02:24,160
in a boomerang attack an application

65
00:02:23,120 --> 00:02:26,560
tricks the ta

66
00:02:24,160 --> 00:02:30,160
into modifying normal data or code

67
00:02:26,560 --> 00:02:30,160
including the rich operating system

68
00:02:30,400 --> 00:02:34,080
in all the attacks described the

69
00:02:32,720 --> 00:02:35,840
attacker aims for vertical

70
00:02:34,080 --> 00:02:38,080
prediscollation

71
00:02:35,840 --> 00:02:38,879
in other words he aims to obtain more

72
00:02:38,080 --> 00:02:42,000
control

73
00:02:38,879 --> 00:02:44,959
by compromising higher privilege code

74
00:02:42,000 --> 00:02:46,720
in contrast in horizontal prerequisition

75
00:02:44,959 --> 00:02:48,400
or hp in short

76
00:02:46,720 --> 00:02:50,000
the attacker aims to obtain access to

77
00:02:48,400 --> 00:02:53,120
data or code in software

78
00:02:50,000 --> 00:02:54,000
running at the same privilege level for

79
00:02:53,120 --> 00:02:55,920
example

80
00:02:54,000 --> 00:02:57,599
using a regular app to compromise data

81
00:02:55,920 --> 00:03:00,879
belonging to another regular app

82
00:02:57,599 --> 00:03:03,040
represents horizontal page escalation

83
00:03:00,879 --> 00:03:04,399
the main focus of this presentation

84
00:03:03,040 --> 00:03:06,400
represents attack

85
00:03:04,400 --> 00:03:08,959
attacks that enable horizontal bridge

86
00:03:06,400 --> 00:03:08,959
escalation

87
00:03:09,440 --> 00:03:12,720
now our focus on showing how malicious

88
00:03:11,760 --> 00:03:14,879
normal apps

89
00:03:12,720 --> 00:03:16,640
can compromise or leak data belonging to

90
00:03:14,879 --> 00:03:19,760
other normal apps

91
00:03:16,640 --> 00:03:21,518
by leveraging tas

92
00:03:19,760 --> 00:03:23,440
these attacks require no vulnerabilities

93
00:03:21,519 --> 00:03:25,519
inside higher private software

94
00:03:23,440 --> 00:03:28,799
instead they target the multi-tenancy

95
00:03:25,519 --> 00:03:28,799
and statefulness of tas

96
00:03:29,200 --> 00:03:34,720
first let me explain how tas manage data

97
00:03:32,080 --> 00:03:37,440
received from normal world apps

98
00:03:34,720 --> 00:03:38,239
each ta typically represents a securable

99
00:03:37,440 --> 00:03:40,640
service

100
00:03:38,239 --> 00:03:42,879
that receives requests from one or more

101
00:03:40,640 --> 00:03:45,040
normal old apps

102
00:03:42,879 --> 00:03:46,239
similar to web services they can

103
00:03:45,040 --> 00:03:49,120
maintain application data

104
00:03:46,239 --> 00:03:51,920
across multiple invocations they can

105
00:03:49,120 --> 00:03:55,760
keep it in their global memory

106
00:03:51,920 --> 00:03:58,159
or save it on persistent secure storage

107
00:03:55,760 --> 00:04:00,000
however there is a semantic gap between

108
00:03:58,159 --> 00:04:01,599
the normal world and secure world

109
00:04:00,000 --> 00:04:05,040
that prevents the aids from knowing the

110
00:04:01,599 --> 00:04:08,238
identity of their client apps

111
00:04:05,040 --> 00:04:08,798
problems arise when tas manage data of

112
00:04:08,239 --> 00:04:12,640
apps

113
00:04:08,799 --> 00:04:12,640
without knowing their exact identity

114
00:04:13,200 --> 00:04:17,519
for example a ta can expose the victim's

115
00:04:16,399 --> 00:04:20,959
app's data

116
00:04:17,519 --> 00:04:22,720
to malicious applications

117
00:04:20,959 --> 00:04:24,240
once a victim writes data into the

118
00:04:22,720 --> 00:04:26,840
global memory

119
00:04:24,240 --> 00:04:28,160
the malicious app might be able to read

120
00:04:26,840 --> 00:04:31,840
it

121
00:04:28,160 --> 00:04:32,880
or once it is written it can try to

122
00:04:31,840 --> 00:04:36,479
modify it

123
00:04:32,880 --> 00:04:36,479
before the victim reads it back

124
00:04:37,120 --> 00:04:40,960
if the data written is a decryption key

125
00:04:39,919 --> 00:04:44,240
a malicious app

126
00:04:40,960 --> 00:04:48,239
could also try to trick the ta

127
00:04:44,240 --> 00:04:48,240
into using it to decrypt content for it

128
00:04:49,440 --> 00:04:54,400
similar attacks can be performed when ta

129
00:04:51,840 --> 00:04:57,359
store data in secure storage

130
00:04:54,400 --> 00:04:59,039
the key difference is that any ta with

131
00:04:57,360 --> 00:05:01,280
access to respective storage

132
00:04:59,040 --> 00:05:02,960
could be leveraged by the malicious app

133
00:05:01,280 --> 00:05:05,039
in order to leak or compromise data

134
00:05:02,960 --> 00:05:07,840
within

135
00:05:05,039 --> 00:05:11,199
more details regarding these attacks are

136
00:05:07,840 --> 00:05:14,320
presented in a paper

137
00:05:11,199 --> 00:05:15,919
we've analyzed a total of 95 ta binaries

138
00:05:14,320 --> 00:05:18,400
for vulnerabilities that could enable

139
00:05:15,919 --> 00:05:20,000
horizontal prediscollation

140
00:05:18,400 --> 00:05:21,679
these binaries have been extracted from

141
00:05:20,000 --> 00:05:25,360
three different transom-based

142
00:05:21,680 --> 00:05:27,039
trusted execution environments kinebi

143
00:05:25,360 --> 00:05:28,479
qualcomm secure executive environment or

144
00:05:27,039 --> 00:05:32,320
qce

145
00:05:28,479 --> 00:05:33,360
and tigris these tas are written by

146
00:05:32,320 --> 00:05:34,880
multiple parties

147
00:05:33,360 --> 00:05:37,120
and not by trust execution environment

148
00:05:34,880 --> 00:05:39,680
vendors themselves

149
00:05:37,120 --> 00:05:40,960
inside the ta binaries we've identified

150
00:05:39,680 --> 00:05:43,919
three types of horizontal privilege

151
00:05:40,960 --> 00:05:43,919
escalation variabilities

152
00:05:44,880 --> 00:05:47,919
for each trading environment we have

153
00:05:46,800 --> 00:05:51,199
grouped the tas

154
00:05:47,919 --> 00:05:53,599
by the main functionality for example

155
00:05:51,199 --> 00:05:54,960
tas managing the aram data are denoted

156
00:05:53,600 --> 00:05:56,960
as drm

157
00:05:54,960 --> 00:05:59,599
those performed at a station are under

158
00:05:56,960 --> 00:06:01,120
attestation and so on

159
00:05:59,600 --> 00:06:05,199
each column shows the number of

160
00:06:01,120 --> 00:06:05,199
vulnerable tas identified in each group

161
00:06:05,280 --> 00:06:09,758
let's take tas running under

162
00:06:06,800 --> 00:06:12,000
telegraphies as an example

163
00:06:09,759 --> 00:06:13,199
one of the two dr mtas contain

164
00:06:12,000 --> 00:06:16,400
vulnerabilities that allowed

165
00:06:13,199 --> 00:06:18,400
leaking or compromising sensitive data

166
00:06:16,400 --> 00:06:20,000
25 key management tas exposed

167
00:06:18,400 --> 00:06:23,280
cryptographic keys

168
00:06:20,000 --> 00:06:24,960
and all three attestation tas containing

169
00:06:23,280 --> 00:06:27,198
at least one horizontal prediction

170
00:06:24,960 --> 00:06:29,440
vulnerability

171
00:06:27,199 --> 00:06:30,240
the tas in the other groups were mostly

172
00:06:29,440 --> 00:06:32,080
stateless

173
00:06:30,240 --> 00:06:35,039
or did not manage significant normal

174
00:06:32,080 --> 00:06:37,039
data across invocations

175
00:06:35,039 --> 00:06:38,639
it took two engineers four weeks to

176
00:06:37,039 --> 00:06:42,639
analyze the 95 tas

177
00:06:38,639 --> 00:06:42,639
running under the three oss

178
00:06:43,600 --> 00:06:47,600
for reformability we have determined its

179
00:06:45,680 --> 00:06:49,199
impact and how it can be used by machine

180
00:06:47,600 --> 00:06:51,840
application

181
00:06:49,199 --> 00:06:53,599
as a result we have identified a total

182
00:06:51,840 --> 00:06:55,599
of five horizontal project exploration

183
00:06:53,599 --> 00:06:57,919
attack vectors

184
00:06:55,599 --> 00:06:58,639
ts can be used to link data compromise

185
00:06:57,919 --> 00:07:00,479
data

186
00:06:58,639 --> 00:07:02,240
or act as decryption encryption or

187
00:07:00,479 --> 00:07:05,360
signing oracles

188
00:07:02,240 --> 00:07:06,080
for example a ta leaking an encryption

189
00:07:05,360 --> 00:07:07,599
key

190
00:07:06,080 --> 00:07:10,080
has a data leakage horizontal

191
00:07:07,599 --> 00:07:14,000
pre-escalation attack vector

192
00:07:10,080 --> 00:07:14,000
more details are providing the paper

193
00:07:14,080 --> 00:07:17,919
here's a glimpse of the attack vectors

194
00:07:15,919 --> 00:07:19,680
discovered in the eas running under each

195
00:07:17,919 --> 00:07:22,080
trouser environment

196
00:07:19,680 --> 00:07:24,000
i will not go into details right now but

197
00:07:22,080 --> 00:07:26,400
if we take ta running on interiors as an

198
00:07:24,000 --> 00:07:26,400
example

199
00:07:26,479 --> 00:07:30,719
six vulnerabilities lead to key leakage

200
00:07:28,880 --> 00:07:32,400
five to data compromise

201
00:07:30,720 --> 00:07:34,240
four are decryption oracles two

202
00:07:32,400 --> 00:07:35,758
encryption oracles and seven signing

203
00:07:34,240 --> 00:07:39,039
oracles

204
00:07:35,759 --> 00:07:44,000
out of this nine voluntarization tas

205
00:07:39,039 --> 00:07:45,680
16k management and nine in their mtas

206
00:07:44,000 --> 00:07:48,160
order to speed up the analysis process

207
00:07:45,680 --> 00:07:49,759
for horizontal pre-escalation detection

208
00:07:48,160 --> 00:07:52,479
we have designed and implemented

209
00:07:49,759 --> 00:07:54,319
automatic hp detection tool

210
00:07:52,479 --> 00:07:55,599
we have named the horizontal prediction

211
00:07:54,319 --> 00:07:59,759
detection tool

212
00:07:55,599 --> 00:08:02,479
cooper cooper consists of three phases

213
00:07:59,759 --> 00:08:03,520
first cooper takes a ta binary and uses

214
00:08:02,479 --> 00:08:06,479
symbolic execution

215
00:08:03,520 --> 00:08:08,719
to analyze its execution paths the

216
00:08:06,479 --> 00:08:11,680
results are the resulting past semantics

217
00:08:08,720 --> 00:08:13,680
are then collected and used in phase two

218
00:08:11,680 --> 00:08:15,440
here the execution paths that restore

219
00:08:13,680 --> 00:08:18,960
data are paired with those have

220
00:08:15,440 --> 00:08:20,960
they have written it in phase three

221
00:08:18,960 --> 00:08:22,239
the paired execution paths are examined

222
00:08:20,960 --> 00:08:23,520
in order to determine if normal

223
00:08:22,240 --> 00:08:25,840
application data written

224
00:08:23,520 --> 00:08:26,639
in one execution path can be leaked or

225
00:08:25,840 --> 00:08:29,440
compromised

226
00:08:26,639 --> 00:08:30,400
using another execution path all such

227
00:08:29,440 --> 00:08:32,640
execution paths

228
00:08:30,400 --> 00:08:34,240
are reported by hooper as containing

229
00:08:32,640 --> 00:08:38,319
potential horizontal prediction

230
00:08:34,240 --> 00:08:40,159
capabilities to give you an intuition on

231
00:08:38,320 --> 00:08:42,399
how application data is tracked across

232
00:08:40,159 --> 00:08:44,480
multiple execution paths let's consider

233
00:08:42,399 --> 00:08:47,519
the following example

234
00:08:44,480 --> 00:08:49,440
a ta contains a bunch of execution pads

235
00:08:47,519 --> 00:08:50,959
one is writing input data to global

236
00:08:49,440 --> 00:08:53,920
variable x

237
00:08:50,959 --> 00:08:54,959
another writes x to an output and

238
00:08:53,920 --> 00:08:57,120
another pair

239
00:08:54,959 --> 00:08:59,199
of execution pads share data using a

240
00:08:57,120 --> 00:09:02,720
storage ui

241
00:08:59,200 --> 00:09:04,880
if a victim date if a victim t ta

242
00:09:02,720 --> 00:09:06,000
uses one existing path to write data

243
00:09:04,880 --> 00:09:09,120
into x

244
00:09:06,000 --> 00:09:10,160
for y attacker would read it by using

245
00:09:09,120 --> 00:09:13,360
the left

246
00:09:10,160 --> 00:09:15,199
and the right periodicity pads

247
00:09:13,360 --> 00:09:16,880
cooper finds the reports the crossing

248
00:09:15,200 --> 00:09:19,200
equation data flows

249
00:09:16,880 --> 00:09:20,160
across between these paired execution

250
00:09:19,200 --> 00:09:23,760
paths

251
00:09:20,160 --> 00:09:26,240
by using the thread

252
00:09:23,760 --> 00:09:26,240
framework

253
00:09:27,120 --> 00:09:31,440
we'll run hooper on the tas running

254
00:09:29,200 --> 00:09:34,800
under tigris

255
00:09:31,440 --> 00:09:36,560
briefly 15 out of 20 attack vectors

256
00:09:34,800 --> 00:09:38,000
have been identified automatically by

257
00:09:36,560 --> 00:09:39,760
hooper

258
00:09:38,000 --> 00:09:42,080
the other five were missed due to

259
00:09:39,760 --> 00:09:43,760
symbolic state explosions

260
00:09:42,080 --> 00:09:46,080
or incomplete emulation of tiers

261
00:09:43,760 --> 00:09:47,839
provided functionality

262
00:09:46,080 --> 00:09:49,839
it is important to note however that

263
00:09:47,839 --> 00:09:51,440
hooper identified these vulnerabilities

264
00:09:49,839 --> 00:09:53,360
within 24 hours

265
00:09:51,440 --> 00:09:56,080
and contrasts the four weeks spent on

266
00:09:53,360 --> 00:09:56,080
manual analysis

267
00:09:56,959 --> 00:10:01,040
automatic analysis is helpful it's

268
00:09:59,360 --> 00:10:03,440
helpful in identifying vulnerabilities

269
00:10:01,040 --> 00:10:05,760
already present inside tas

270
00:10:03,440 --> 00:10:06,560
however it is preferable to prevent its

271
00:10:05,760 --> 00:10:09,200
vulnerabilities

272
00:10:06,560 --> 00:10:10,160
from being introduced at all in the

273
00:10:09,200 --> 00:10:11,440
paper

274
00:10:10,160 --> 00:10:13,040
we describe a set of potential

275
00:10:11,440 --> 00:10:14,880
mitigations against the discovered

276
00:10:13,040 --> 00:10:18,959
attack vectors

277
00:10:14,880 --> 00:10:21,360
briefly standardizing session management

278
00:10:18,959 --> 00:10:22,959
resolving multitude and interference and

279
00:10:21,360 --> 00:10:25,360
minimizing access to tas

280
00:10:22,959 --> 00:10:27,040
and secure resources could help prevent

281
00:10:25,360 --> 00:10:30,320
the appearance of horizontal

282
00:10:27,040 --> 00:10:30,319
escalation vulnerabilities

283
00:10:31,120 --> 00:10:37,200
in conclusion some ta store data in

284
00:10:35,279 --> 00:10:41,360
from multiple applications either in

285
00:10:37,200 --> 00:10:43,440
global memory or secure physical storage

286
00:10:41,360 --> 00:10:45,440
these vulnerabilities appear due to

287
00:10:43,440 --> 00:10:49,040
insufficient access control

288
00:10:45,440 --> 00:10:51,120
that exposes the data stored by tas to

289
00:10:49,040 --> 00:10:52,880
attackers

290
00:10:51,120 --> 00:10:54,720
we've identified three type of

291
00:10:52,880 --> 00:10:58,240
horizontal predestination variabilities

292
00:10:54,720 --> 00:11:02,320
in 23 out of 90 of out of the 95

293
00:10:58,240 --> 00:11:04,000
analyze task automatic binary analysis

294
00:11:02,320 --> 00:11:05,600
can help find its vulnerabilities

295
00:11:04,000 --> 00:11:09,040
significantly faster

296
00:11:05,600 --> 00:11:11,600
and end with a fraction of the effort

297
00:11:09,040 --> 00:11:13,279
finally platform-wide fine-grained

298
00:11:11,600 --> 00:11:15,680
access control

299
00:11:13,279 --> 00:11:17,439
could help avoid introducing this

300
00:11:15,680 --> 00:11:19,680
horizontal predictabilities in the first

301
00:11:17,440 --> 00:11:19,680
place

302
00:11:19,920 --> 00:11:29,839
thank you feel free to contact us and

303
00:11:22,320 --> 00:11:29,839
ask questions

304
00:11:32,800 --> 00:11:34,880
you

