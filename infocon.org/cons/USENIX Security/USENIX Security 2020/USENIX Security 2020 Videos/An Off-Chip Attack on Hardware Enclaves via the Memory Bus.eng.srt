1
00:00:09,519 --> 00:00:12,559
hi

2
00:00:09,920 --> 00:00:13,120
i'm darlee from uc berkeley i'll talk

3
00:00:12,559 --> 00:00:15,360
about an

4
00:00:13,120 --> 00:00:16,239
off-chip attack on hardware enclaves

5
00:00:15,360 --> 00:00:18,880
using the

6
00:00:16,239 --> 00:00:20,640
memory bus this is a joint work with

7
00:00:18,880 --> 00:00:23,680
dongha from sk hynix

8
00:00:20,640 --> 00:00:27,199
ian chiachen raluka from uc berkeley

9
00:00:23,680 --> 00:00:30,960
chiacce is now a professor at texas a

10
00:00:27,199 --> 00:00:32,559
m university trusted execution

11
00:00:30,960 --> 00:00:34,559
environment protects a sensitive

12
00:00:32,558 --> 00:00:35,760
application from other applications on a

13
00:00:34,559 --> 00:00:37,839
system

14
00:00:35,760 --> 00:00:41,040
or even from a privileged software such

15
00:00:37,840 --> 00:00:43,440
as the operating system or hypervisor

16
00:00:41,040 --> 00:00:44,480
the protection is enforced by trusted

17
00:00:43,440 --> 00:00:46,000
hardware

18
00:00:44,480 --> 00:00:49,279
which creates the protected memory

19
00:00:46,000 --> 00:00:51,199
region often called an enclave

20
00:00:49,280 --> 00:00:53,520
the code and the data of the application

21
00:00:51,199 --> 00:00:55,519
will reside inside the enclave

22
00:00:53,520 --> 00:00:57,199
and hardware guarantees the integrity

23
00:00:55,520 --> 00:00:59,520
and confidentiality of the program

24
00:00:57,199 --> 00:01:01,599
execution

25
00:00:59,520 --> 00:01:03,920
also the hardware can cryptographically

26
00:01:01,600 --> 00:01:04,879
attest that the enclave is correctly

27
00:01:03,920 --> 00:01:08,720
initialized

28
00:01:04,879 --> 00:01:12,400
and is running on a legitimate hardware

29
00:01:08,720 --> 00:01:14,400
in te only the cpu package is trusted so

30
00:01:12,400 --> 00:01:15,520
any external hardware components such as

31
00:01:14,400 --> 00:01:18,799
dram are all

32
00:01:15,520 --> 00:01:20,080
untrusted whereas this uh one of the

33
00:01:18,799 --> 00:01:22,080
most major te

34
00:01:20,080 --> 00:01:24,000
intel s6 has a strong thread model

35
00:01:22,080 --> 00:01:26,000
against the external gram

36
00:01:24,000 --> 00:01:28,240
since it assumes that adversary can

37
00:01:26,000 --> 00:01:30,000
arbitrarily read or write the memory

38
00:01:28,240 --> 00:01:31,679
the processor includes a hardware

39
00:01:30,000 --> 00:01:33,759
extension called memory encryption

40
00:01:31,680 --> 00:01:36,000
engine in their memory controller

41
00:01:33,759 --> 00:01:37,200
in sjx all of the unclip data leaving

42
00:01:36,000 --> 00:01:39,439
the processor package

43
00:01:37,200 --> 00:01:42,640
is transparently encrypted by this

44
00:01:39,439 --> 00:01:42,639
memory encryption engine

45
00:01:43,119 --> 00:01:47,119
although ts provides strong memory

46
00:01:45,119 --> 00:01:49,360
isolation and protection

47
00:01:47,119 --> 00:01:51,360
some programs are often vulnerable to

48
00:01:49,360 --> 00:01:53,119
side channel attacks

49
00:01:51,360 --> 00:01:54,880
if the program has some data dependent

50
00:01:53,119 --> 00:01:56,159
memory access pattern the attacker can

51
00:01:54,880 --> 00:01:58,079
infer the data

52
00:01:56,159 --> 00:02:00,479
here is an example text scenario

53
00:01:58,079 --> 00:02:02,000
introduced by xu at all on han spell

54
00:02:00,479 --> 00:02:04,640
which is a popular open source

55
00:02:02,000 --> 00:02:07,360
spellchecker library

56
00:02:04,640 --> 00:02:09,119
for a given input text unspell traverses

57
00:02:07,360 --> 00:02:11,280
each word in the input text and perform

58
00:02:09,119 --> 00:02:12,879
spell checking

59
00:02:11,280 --> 00:02:16,160
during the spell checking hanspel

60
00:02:12,879 --> 00:02:17,840
searches for each word in a dictionary

61
00:02:16,160 --> 00:02:19,920
and the dictionary is implemented with a

62
00:02:17,840 --> 00:02:23,360
hash table where each word is stored in

63
00:02:19,920 --> 00:02:25,200
a hash bucket unspell usually uses

64
00:02:23,360 --> 00:02:27,280
well-known dictionary files so the

65
00:02:25,200 --> 00:02:30,560
address of each bucket entry can be

66
00:02:27,280 --> 00:02:33,200
easily obtained by the attacker

67
00:02:30,560 --> 00:02:34,400
let's say the text contains the word

68
00:02:33,200 --> 00:02:37,119
book

69
00:02:34,400 --> 00:02:37,680
while hand spell is iterating the bucket

70
00:02:37,120 --> 00:02:39,920
to search

71
00:02:37,680 --> 00:02:42,160
word it will sequentially access

72
00:02:39,920 --> 00:02:44,238
specific addresses

73
00:02:42,160 --> 00:02:46,079
so if the attacker can observe the

74
00:02:44,239 --> 00:02:48,239
memory access pattern of a victim

75
00:02:46,080 --> 00:02:51,360
she can infer the data without actually

76
00:02:48,239 --> 00:02:53,040
looking at the data

77
00:02:51,360 --> 00:02:54,800
a lot of side channel texts have been

78
00:02:53,040 --> 00:02:56,959
performed on sjx enclaves

79
00:02:54,800 --> 00:02:57,840
these attacks exploit adversarial or

80
00:02:56,959 --> 00:03:00,239
shared on-chip

81
00:02:57,840 --> 00:03:00,959
components to leak access pattern of a

82
00:03:00,239 --> 00:03:03,440
victim

83
00:03:00,959 --> 00:03:05,519
for example cache site channel tech uses

84
00:03:03,440 --> 00:03:07,760
share lost level cache

85
00:03:05,519 --> 00:03:09,599
and page table based attacks such as

86
00:03:07,760 --> 00:03:11,040
control channel attack or flush based

87
00:03:09,599 --> 00:03:13,200
cache size channel text

88
00:03:11,040 --> 00:03:15,840
use adversarial mmu managed by the

89
00:03:13,200 --> 00:03:18,399
untrusted ossi channel

90
00:03:15,840 --> 00:03:20,319
unfortunately both of them are even more

91
00:03:18,400 --> 00:03:23,760
powerful than typical side channel techs

92
00:03:20,319 --> 00:03:23,760
because of the strong's ram model

93
00:03:23,920 --> 00:03:27,518
also a lot of mitigation techniques have

94
00:03:25,760 --> 00:03:29,679
been proposed to defend the side channel

95
00:03:27,519 --> 00:03:31,920
leakage from the hardware enclaves

96
00:03:29,680 --> 00:03:33,440
these mitigations use existing hardware

97
00:03:31,920 --> 00:03:35,839
or additional software

98
00:03:33,440 --> 00:03:37,920
to fully partition the shared resources

99
00:03:35,840 --> 00:03:39,599
or conceal any data dependent state

100
00:03:37,920 --> 00:03:41,440
changes from the attacker so that the

101
00:03:39,599 --> 00:03:43,280
attacker cannot observe the memory

102
00:03:41,440 --> 00:03:45,680
access pattern

103
00:03:43,280 --> 00:03:47,760
there are also tes from academia which

104
00:03:45,680 --> 00:03:50,239
redesigned the entire system

105
00:03:47,760 --> 00:03:51,599
to fully isolate the resources such as

106
00:03:50,239 --> 00:03:53,519
page table cache

107
00:03:51,599 --> 00:03:55,599
to fundamentally defeat the side

108
00:03:53,519 --> 00:03:57,760
channels

109
00:03:55,599 --> 00:04:00,079
note that all of these have been

110
00:03:57,760 --> 00:04:03,679
focusing on attacks and mitigations

111
00:04:00,080 --> 00:04:03,680
inside a processor package

112
00:04:04,159 --> 00:04:10,319
however the attacker may also present

113
00:04:07,439 --> 00:04:12,239
outside of the chip an adversary who can

114
00:04:10,319 --> 00:04:14,079
physically access the machine will also

115
00:04:12,239 --> 00:04:14,959
be able to perform an off-chip side

116
00:04:14,080 --> 00:04:16,880
channel tech

117
00:04:14,959 --> 00:04:18,798
by looking at the memory transactions

118
00:04:16,880 --> 00:04:20,238
between the cpu package and the external

119
00:04:18,798 --> 00:04:21,918
memory

120
00:04:20,238 --> 00:04:24,320
although the external memory is

121
00:04:21,918 --> 00:04:27,359
untrusted in intel hdx ram model

122
00:04:24,320 --> 00:04:29,440
they only encrypt data thus the attacker

123
00:04:27,360 --> 00:04:33,040
might still be able to see

124
00:04:29,440 --> 00:04:35,600
the addresses in the address box

125
00:04:33,040 --> 00:04:36,560
in this work we demonstrate membuster

126
00:04:35,600 --> 00:04:38,639
attack

127
00:04:36,560 --> 00:04:39,919
which uses a memory interposer and

128
00:04:38,639 --> 00:04:43,600
signal analyzer

129
00:04:39,919 --> 00:04:44,880
to capture the addresses from the bus

130
00:04:43,600 --> 00:04:46,960
we show that the attacker can

131
00:04:44,880 --> 00:04:50,080
successfully reconstruct the data from

132
00:04:46,960 --> 00:04:51,840
the observed access pattern

133
00:04:50,080 --> 00:04:53,280
we found that one can easily obtain a

134
00:04:51,840 --> 00:04:55,039
device needed for the attack

135
00:04:53,280 --> 00:04:58,719
as they are widely used by many

136
00:04:55,040 --> 00:04:58,720
companies for debugging purposes

137
00:04:58,800 --> 00:05:01,919
we highlight that none of existing side

138
00:05:00,880 --> 00:05:05,680
channel defenses

139
00:05:01,919 --> 00:05:07,120
nor tes can prevent this attack

140
00:05:05,680 --> 00:05:08,880
this is because manbuster is

141
00:05:07,120 --> 00:05:10,000
fundamentally different from previous

142
00:05:08,880 --> 00:05:12,880
side channel attacks performed

143
00:05:10,000 --> 00:05:14,479
inside a chip first the thicker's

144
00:05:12,880 --> 00:05:16,240
observation doesn't require any

145
00:05:14,479 --> 00:05:18,320
detectable interference such as

146
00:05:16,240 --> 00:05:20,560
interrupts or page faults

147
00:05:18,320 --> 00:05:23,039
so it is difficult to detect even the

148
00:05:20,560 --> 00:05:25,600
presence of the attacker

149
00:05:23,039 --> 00:05:27,199
also partitioning the on-chip resources

150
00:05:25,600 --> 00:05:27,840
does not prevent the attack because the

151
00:05:27,199 --> 00:05:29,280
attacker

152
00:05:27,840 --> 00:05:32,320
directly observes the memory

153
00:05:29,280 --> 00:05:34,719
transactions outside of the chip

154
00:05:32,320 --> 00:05:36,719
in order to prevent the attack we need

155
00:05:34,720 --> 00:05:38,960
to make memory access entirely

156
00:05:36,720 --> 00:05:40,880
oblivious which is very expensive in

157
00:05:38,960 --> 00:05:43,198
terms of performance

158
00:05:40,880 --> 00:05:45,840
or to encrypt the address bus which is

159
00:05:43,199 --> 00:05:47,360
actually infeasible in commodity grams

160
00:05:45,840 --> 00:05:50,799
and requires expensive additional

161
00:05:47,360 --> 00:05:50,800
hardware such as smart memory

162
00:05:51,199 --> 00:05:56,560
we found several challenges for a member

163
00:05:54,720 --> 00:05:58,319
first there are multiple layers of

164
00:05:56,560 --> 00:06:00,720
address translation between the victim

165
00:05:58,319 --> 00:06:02,560
and the drm commands we observe

166
00:06:00,720 --> 00:06:04,720
we need to somehow synchronize these

167
00:06:02,560 --> 00:06:06,560
multiple traces and reverse translate

168
00:06:04,720 --> 00:06:09,759
the observed commands to obtain the

169
00:06:06,560 --> 00:06:09,759
victim's virtual address

170
00:06:10,240 --> 00:06:14,160
second the attacker may not see most of

171
00:06:12,560 --> 00:06:16,880
the memory access pattern

172
00:06:14,160 --> 00:06:17,600
because of the cache hierarchy in

173
00:06:16,880 --> 00:06:19,680
general

174
00:06:17,600 --> 00:06:21,280
a large amount of memory access will hit

175
00:06:19,680 --> 00:06:23,039
the cache

176
00:06:21,280 --> 00:06:25,679
and the attacker may observe only a

177
00:06:23,039 --> 00:06:27,680
small amount of cache misses

178
00:06:25,680 --> 00:06:28,880
this is especially challenging because

179
00:06:27,680 --> 00:06:31,039
modern processors

180
00:06:28,880 --> 00:06:35,120
usually have a large loss of a cache up

181
00:06:31,039 --> 00:06:37,120
to few megabytes lastly

182
00:06:35,120 --> 00:06:38,960
there are unuser behaviors of astrix

183
00:06:37,120 --> 00:06:41,360
that needs to be handled by the attacker

184
00:06:38,960 --> 00:06:43,599
for example the linux kernel can usually

185
00:06:41,360 --> 00:06:46,240
configure the cache ability of each page

186
00:06:43,600 --> 00:06:50,639
using page attribute table however such

187
00:06:46,240 --> 00:06:52,800
feature does not work with sjx enclaves

188
00:06:50,639 --> 00:06:54,960
in this talk i will talk about how we

189
00:06:52,800 --> 00:06:57,360
address the second problem

190
00:06:54,960 --> 00:06:59,359
for other details please refer to our

191
00:06:57,360 --> 00:07:01,599
paper

192
00:06:59,360 --> 00:07:02,800
so how can we maximize the size channel

193
00:07:01,599 --> 00:07:05,360
information

194
00:07:02,800 --> 00:07:06,960
the goal is to increase the cache misses

195
00:07:05,360 --> 00:07:07,919
while avoiding any detectable

196
00:07:06,960 --> 00:07:09,840
interference

197
00:07:07,919 --> 00:07:12,560
so that we can keep all of the

198
00:07:09,840 --> 00:07:15,599
advantages of the option side channel

199
00:07:12,560 --> 00:07:17,599
a simple solution is to prime the cache

200
00:07:15,599 --> 00:07:20,159
priming is a technique using prime

201
00:07:17,599 --> 00:07:23,759
provotec which sequentially accesses

202
00:07:20,160 --> 00:07:26,160
a buffer to evict the cache lines

203
00:07:23,759 --> 00:07:26,800
so however we found that we cannot get

204
00:07:26,160 --> 00:07:30,000
enough

205
00:07:26,800 --> 00:07:32,560
bandwidth we need it for the attack

206
00:07:30,000 --> 00:07:34,240
this is because the priming is effective

207
00:07:32,560 --> 00:07:36,160
only when it could evict most of the

208
00:07:34,240 --> 00:07:37,680
cache lines before the victim access the

209
00:07:36,160 --> 00:07:39,199
cache

210
00:07:37,680 --> 00:07:41,759
since the cache is usually a few

211
00:07:39,199 --> 00:07:43,120
megabytes this could take hundreds of

212
00:07:41,759 --> 00:07:45,520
milliseconds

213
00:07:43,120 --> 00:07:47,360
in general it was too far too long

214
00:07:45,520 --> 00:07:48,159
compared to the memory access interval

215
00:07:47,360 --> 00:07:52,080
programs

216
00:07:48,160 --> 00:07:54,800
which is an order of microseconds

217
00:07:52,080 --> 00:07:56,840
so how do we solve this problem we

218
00:07:54,800 --> 00:07:58,639
address this problem based on two

219
00:07:56,840 --> 00:08:01,198
observations

220
00:07:58,639 --> 00:08:02,720
first we observe that the attacker can

221
00:08:01,199 --> 00:08:04,639
control the address mapping because

222
00:08:02,720 --> 00:08:05,919
aztrix only verifies the virtual

223
00:08:04,639 --> 00:08:08,639
addresses

224
00:08:05,919 --> 00:08:10,840
so the attacker can use the os privilege

225
00:08:08,639 --> 00:08:13,440
to make an arbitrary virtual to physical

226
00:08:10,840 --> 00:08:15,520
mapping

227
00:08:13,440 --> 00:08:16,560
another observation is that there is a

228
00:08:15,520 --> 00:08:18,479
certain critical

229
00:08:16,560 --> 00:08:21,360
address range that is useful for the

230
00:08:18,479 --> 00:08:23,680
attack in hanspel for example

231
00:08:21,360 --> 00:08:25,919
the only address range needed for the

232
00:08:23,680 --> 00:08:27,280
attack is the one containing the hash

233
00:08:25,919 --> 00:08:29,758
table

234
00:08:27,280 --> 00:08:30,638
so our idea is to squeeze the cache

235
00:08:29,759 --> 00:08:33,680
based on these

236
00:08:30,639 --> 00:08:34,880
observations by carefully manipulating

237
00:08:33,679 --> 00:08:38,000
the address mapping

238
00:08:34,880 --> 00:08:41,279
we can map a certain addresses to be

239
00:08:38,000 --> 00:08:44,080
to a small portion of cash

240
00:08:41,279 --> 00:08:44,560
also we can perform priming on these

241
00:08:44,080 --> 00:08:47,120
quiz

242
00:08:44,560 --> 00:08:49,680
cash so you can evict all the cash lines

243
00:08:47,120 --> 00:08:51,200
before the victim access the cash

244
00:08:49,680 --> 00:08:52,959
and eventually this will increase the

245
00:08:51,200 --> 00:08:55,680
number of useful cash misses for the

246
00:08:52,959 --> 00:08:57,920
attack

247
00:08:55,680 --> 00:08:59,760
to squeeze the cache first the attacker

248
00:08:57,920 --> 00:09:01,760
identifies the critical pages in the

249
00:08:59,760 --> 00:09:03,600
virtual address space of the victim

250
00:09:01,760 --> 00:09:06,800
next the attacker maps the critical

251
00:09:03,600 --> 00:09:09,040
pages to a certain physical epc pages

252
00:09:06,800 --> 00:09:10,160
which share the same group of last level

253
00:09:09,040 --> 00:09:12,000
cache sets

254
00:09:10,160 --> 00:09:14,319
by using this technique we can incur

255
00:09:12,000 --> 00:09:17,120
both conflict and capacity misses

256
00:09:14,320 --> 00:09:17,760
only for the critical addresses in

257
00:09:17,120 --> 00:09:19,839
addition

258
00:09:17,760 --> 00:09:22,240
we can perform priming on the same group

259
00:09:19,839 --> 00:09:24,000
cache sets

260
00:09:22,240 --> 00:09:26,560
this still does not interfere the

261
00:09:24,000 --> 00:09:28,480
enclave program in a detectable way

262
00:09:26,560 --> 00:09:30,640
and it does not incur orders of

263
00:09:28,480 --> 00:09:32,240
magnitude slowdown because we are only

264
00:09:30,640 --> 00:09:34,000
increasing the cache misses for the

265
00:09:32,240 --> 00:09:35,640
critical pages

266
00:09:34,000 --> 00:09:39,839
the slowdown was usually

267
00:09:35,640 --> 00:09:39,839
indistinguishable from benign slowdown

268
00:09:41,440 --> 00:09:45,920
we evaluated our attack on intel i5

269
00:09:43,360 --> 00:09:48,959
processor with 9 megabyte llc

270
00:09:45,920 --> 00:09:50,719
we used commodity ddr4 drm

271
00:09:48,959 --> 00:09:53,359
and to get the results we collaborated

272
00:09:50,720 --> 00:09:55,279
with sk hynix but based on our survey

273
00:09:53,360 --> 00:09:58,640
one can obtain the same devices with

274
00:09:55,279 --> 00:10:00,399
thousands of dollars per month

275
00:09:58,640 --> 00:10:01,839
on the software side we have performed

276
00:10:00,399 --> 00:10:02,880
the attack on two unmodified

277
00:10:01,839 --> 00:10:05,680
applications

278
00:10:02,880 --> 00:10:06,720
which are han spell and memcached in

279
00:10:05,680 --> 00:10:09,439
order to run

280
00:10:06,720 --> 00:10:10,480
those unmodified applications inside sjx

281
00:10:09,440 --> 00:10:13,519
we used graphene

282
00:10:10,480 --> 00:10:15,680
library os and for squeezing our cache

283
00:10:13,519 --> 00:10:18,480
squeezing we modify the sdx driver to

284
00:10:15,680 --> 00:10:21,760
manage the memory mapping

285
00:10:18,480 --> 00:10:24,160
i'll only show the result on han spell

286
00:10:21,760 --> 00:10:25,120
we ran spell checking on two different

287
00:10:24,160 --> 00:10:27,920
documents

288
00:10:25,120 --> 00:10:28,720
first one is randomly generate words and

289
00:10:27,920 --> 00:10:30,479
secondly

290
00:10:28,720 --> 00:10:32,320
the natural language document which is

291
00:10:30,480 --> 00:10:34,560
wizard of oz

292
00:10:32,320 --> 00:10:36,240
so wizard of oz was much harder to

293
00:10:34,560 --> 00:10:38,000
attack since it contains a lot of

294
00:10:36,240 --> 00:10:39,920
repetitive common words

295
00:10:38,000 --> 00:10:41,760
incurring fewer cash misses on these

296
00:10:39,920 --> 00:10:43,760
words

297
00:10:41,760 --> 00:10:46,000
the results shows that the combination

298
00:10:43,760 --> 00:10:48,319
of cash squeezing and priming

299
00:10:46,000 --> 00:10:49,200
can recover most of the victim's data

300
00:10:48,320 --> 00:10:52,160
for example

301
00:10:49,200 --> 00:10:53,040
it could recover up to 99 of the random

302
00:10:52,160 --> 00:10:56,880
document

303
00:10:53,040 --> 00:10:59,360
and 85 of the natural language document

304
00:10:56,880 --> 00:11:01,600
moreover squeezing plus priming slows

305
00:10:59,360 --> 00:11:02,480
down the application only up to 36

306
00:11:01,600 --> 00:11:04,240
percent

307
00:11:02,480 --> 00:11:07,200
which is difficult to distinguish from

308
00:11:04,240 --> 00:11:07,200
benign slowdown

309
00:11:07,360 --> 00:11:10,880
since both techniques still still do not

310
00:11:10,480 --> 00:11:13,519
incur

311
00:11:10,880 --> 00:11:15,439
any interrupts or page faults is it is

312
00:11:13,519 --> 00:11:18,800
very difficult to detect the attack with

313
00:11:15,440 --> 00:11:21,760
the existing hardware or software

314
00:11:18,800 --> 00:11:23,760
to conclude we demonstrated manbuster on

315
00:11:21,760 --> 00:11:27,439
off chipset channel tech using an

316
00:11:23,760 --> 00:11:29,439
unencrypted memory address bus

317
00:11:27,440 --> 00:11:31,760
we perform the attack on commodity cpu

318
00:11:29,440 --> 00:11:32,880
and dram and show the possibility of the

319
00:11:31,760 --> 00:11:34,560
attack

320
00:11:32,880 --> 00:11:36,480
since the attack does not cause any

321
00:11:34,560 --> 00:11:38,880
visible interference to the victim

322
00:11:36,480 --> 00:11:41,040
there is no easy way to detect the

323
00:11:38,880 --> 00:11:42,800
attack

324
00:11:41,040 --> 00:11:44,399
also previous engine mitigation

325
00:11:42,800 --> 00:11:46,560
techniques or other tes

326
00:11:44,399 --> 00:11:48,399
based on resource partitioning cannot

327
00:11:46,560 --> 00:11:50,800
defeat the attack

328
00:11:48,399 --> 00:11:52,399
the mitigation techniques we perceive

329
00:11:50,800 --> 00:11:54,959
are oblivious memory

330
00:11:52,399 --> 00:11:55,600
or an entirely new architecture which

331
00:11:54,959 --> 00:11:57,599
are both

332
00:11:55,600 --> 00:12:00,399
expensive in terms of performance or

333
00:11:57,600 --> 00:12:00,399
hardware costs

334
00:12:01,680 --> 00:12:11,839
thank you for watching

335
00:12:12,480 --> 00:12:14,560
you

