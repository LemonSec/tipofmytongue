1
00:00:08,320 --> 00:00:10,719
hello

2
00:00:09,280 --> 00:00:12,559
in this video i'm going to present to

3
00:00:10,719 --> 00:00:14,959
you me and my colleagues work

4
00:00:12,559 --> 00:00:17,039
if bmc bounded model checker for smart

5
00:00:14,960 --> 00:00:20,560
contracts

6
00:00:17,039 --> 00:00:22,080
in the year 2008 the global financial

7
00:00:20,560 --> 00:00:25,198
crisis happened

8
00:00:22,080 --> 00:00:25,919
and undermined trust into the financial

9
00:00:25,199 --> 00:00:28,640
sector

10
00:00:25,920 --> 00:00:30,800
so for example the unfamous niemann

11
00:00:28,640 --> 00:00:34,079
brother collapse was

12
00:00:30,800 --> 00:00:37,360
september 2008 and in october

13
00:00:34,079 --> 00:00:42,000
2008 just one month just

14
00:00:37,360 --> 00:00:42,000
one month later bitcoin was proposed

15
00:00:42,399 --> 00:00:45,760
in the beginning bitcoin was treated as

16
00:00:45,200 --> 00:00:48,719
or

17
00:00:45,760 --> 00:00:49,920
basically the main idea is a payment

18
00:00:48,719 --> 00:00:52,160
network

19
00:00:49,920 --> 00:00:54,079
where participants can send each other

20
00:00:52,160 --> 00:00:55,519
money without the need for a trusted

21
00:00:54,079 --> 00:00:59,600
third party

22
00:00:55,520 --> 00:01:03,120
i.e a bank so given the circumstances

23
00:00:59,600 --> 00:01:05,680
the idea took off had

24
00:01:03,120 --> 00:01:07,759
very much popularity back in the day and

25
00:01:05,680 --> 00:01:09,760
was also

26
00:01:07,760 --> 00:01:11,520
very much recognized in the academic and

27
00:01:09,760 --> 00:01:14,080
industry space

28
00:01:11,520 --> 00:01:15,759
mostly for its backing technology the

29
00:01:14,080 --> 00:01:19,439
blockchain which then

30
00:01:15,759 --> 00:01:21,520
which solved multiple technical

31
00:01:19,439 --> 00:01:24,479
challenges that has that had been

32
00:01:21,520 --> 00:01:26,399
unsolved this far

33
00:01:24,479 --> 00:01:29,840
to explain to you what smart contracts

34
00:01:26,400 --> 00:01:31,920
are let's take a step back first and

35
00:01:29,840 --> 00:01:32,960
look at what the typical cryptocurrency

36
00:01:31,920 --> 00:01:35,680
does so this

37
00:01:32,960 --> 00:01:36,640
is basically a network of participants

38
00:01:35,680 --> 00:01:38,400
identified

39
00:01:36,640 --> 00:01:40,320
by an address in this case an

40
00:01:38,400 --> 00:01:44,320
hexadecimal string most

41
00:01:40,320 --> 00:01:47,520
often a private key sorry a public key

42
00:01:44,320 --> 00:01:49,679
and identified by this users can send

43
00:01:47,520 --> 00:01:53,439
each other money in the network

44
00:01:49,680 --> 00:01:55,200
and the great advancement of smart

45
00:01:53,439 --> 00:01:58,158
contact was on the inside

46
00:01:55,200 --> 00:01:59,280
was it well if we already have a digital

47
00:01:58,159 --> 00:02:02,159
network

48
00:01:59,280 --> 00:02:02,719
why not have more logic in the network

49
00:02:02,159 --> 00:02:05,840
itself

50
00:02:02,719 --> 00:02:10,720
and basically this was proposed by

51
00:02:05,840 --> 00:02:13,599
theorem and if you replace this

52
00:02:10,720 --> 00:02:15,280
up to this point all user controlled

53
00:02:13,599 --> 00:02:17,519
accounts with

54
00:02:15,280 --> 00:02:19,040
so-called smart contracts so a smart

55
00:02:17,520 --> 00:02:22,160
contract is a program

56
00:02:19,040 --> 00:02:24,720
essentially which lives inside

57
00:02:22,160 --> 00:02:26,640
of the payment network and then all

58
00:02:24,720 --> 00:02:28,400
participants of the networks can use the

59
00:02:26,640 --> 00:02:31,839
smart contracts

60
00:02:28,400 --> 00:02:33,680
uh so you can use the smart contract and

61
00:02:31,840 --> 00:02:36,560
the logic inside of it

62
00:02:33,680 --> 00:02:37,599
and then you can insert this logic and

63
00:02:36,560 --> 00:02:40,239
code various

64
00:02:37,599 --> 00:02:42,160
events for example if event x happens we

65
00:02:40,239 --> 00:02:44,720
send money to others

66
00:02:42,160 --> 00:02:45,760
and if the event not happens we send

67
00:02:44,720 --> 00:02:48,319
money to bob

68
00:02:45,760 --> 00:02:50,879
and this way you can you can build um

69
00:02:48,319 --> 00:02:53,679
very complex systems directly

70
00:02:50,879 --> 00:02:53,679
on the blockchain

71
00:02:54,959 --> 00:02:59,440
as all programs do however smart

72
00:02:57,040 --> 00:03:03,200
contracts contain bugs

73
00:02:59,440 --> 00:03:06,319
um very early on in the development of

74
00:03:03,200 --> 00:03:08,879
ethereum there was the infamous tao hack

75
00:03:06,319 --> 00:03:10,560
where back in the day 50 million whether

76
00:03:08,879 --> 00:03:14,159
currency was stolen um

77
00:03:10,560 --> 00:03:17,440
by now this is probably more worth

78
00:03:14,159 --> 00:03:19,840
in the realm of over a billion and then

79
00:03:17,440 --> 00:03:21,440
various other hacks happens for example

80
00:03:19,840 --> 00:03:24,159
parity one and two

81
00:03:21,440 --> 00:03:26,400
about 32 not being actually a hack but

82
00:03:24,159 --> 00:03:28,239
more of um

83
00:03:26,400 --> 00:03:31,519
a programming error which throws a lot

84
00:03:28,239 --> 00:03:34,319
of funds on the blockchain

85
00:03:31,519 --> 00:03:35,920
but well our community has analyzed

86
00:03:34,319 --> 00:03:38,958
programs for the

87
00:03:35,920 --> 00:03:41,200
last 60 or so years and

88
00:03:38,959 --> 00:03:42,959
we so we can also use these techniques

89
00:03:41,200 --> 00:03:46,480
we have developed for

90
00:03:42,959 --> 00:03:48,480
regular programs on the blockchain or on

91
00:03:46,480 --> 00:03:51,119
smart contacts browser

92
00:03:48,480 --> 00:03:53,200
and the technique we choose was symbolic

93
00:03:51,120 --> 00:03:56,159
execution so i'm

94
00:03:53,200 --> 00:03:57,119
gonna give a little small introduction

95
00:03:56,159 --> 00:04:00,079
on the right you see

96
00:03:57,120 --> 00:04:01,920
a very simple program um the function

97
00:04:00,080 --> 00:04:03,840
takes a number as input

98
00:04:01,920 --> 00:04:05,359
if the number is one the problem says

99
00:04:03,840 --> 00:04:08,400
low if the number is

100
00:04:05,360 --> 00:04:09,920
151 that says goodbye until if the

101
00:04:08,400 --> 00:04:11,360
number is 42

102
00:04:09,920 --> 00:04:14,000
well there's a little bug hidden that

103
00:04:11,360 --> 00:04:17,040
the problem would crash

104
00:04:14,000 --> 00:04:19,279
what symbolic execution does it

105
00:04:17,040 --> 00:04:20,880
it goes through the program just like a

106
00:04:19,279 --> 00:04:24,239
normal execution would

107
00:04:20,880 --> 00:04:27,280
so just like i don't know your

108
00:04:24,240 --> 00:04:28,160
java interpreter or whatever i would but

109
00:04:27,280 --> 00:04:30,000
instead of

110
00:04:28,160 --> 00:04:31,759
using a concrete input so a concrete

111
00:04:30,000 --> 00:04:34,479
number like 1

112
00:04:31,759 --> 00:04:35,120
3 or whatever it treats the input as

113
00:04:34,479 --> 00:04:38,240
symbolic

114
00:04:35,120 --> 00:04:39,199
so what it does so what we do is we go

115
00:04:38,240 --> 00:04:41,680
from the program

116
00:04:39,199 --> 00:04:42,880
we arrive at the first if statement and

117
00:04:41,680 --> 00:04:47,040
we say okay

118
00:04:42,880 --> 00:04:50,960
now we branch so if the number is 1 we

119
00:04:47,040 --> 00:04:54,080
go into the if statement and say hello

120
00:04:50,960 --> 00:04:56,159
otherwise we continue and this way we

121
00:04:54,080 --> 00:04:57,840
try to explore the entire state space of

122
00:04:56,160 --> 00:05:00,800
the program because at every

123
00:04:57,840 --> 00:05:02,400
junction we basically fork execution and

124
00:05:00,800 --> 00:05:04,560
explore both paths

125
00:05:02,400 --> 00:05:05,520
right and we would do this again here so

126
00:05:04,560 --> 00:05:08,080
we have

127
00:05:05,520 --> 00:05:09,840
if the numbers 42 would go into the

128
00:05:08,080 --> 00:05:10,880
buggy code otherwise we would again

129
00:05:09,840 --> 00:05:13,359
continue

130
00:05:10,880 --> 00:05:16,080
and thus explored all the state possible

131
00:05:13,360 --> 00:05:19,280
state spaces in this program

132
00:05:16,080 --> 00:05:22,479
and what we do then is we have this

133
00:05:19,280 --> 00:05:23,599
tree of state space and we encode this

134
00:05:22,479 --> 00:05:25,520
into

135
00:05:23,600 --> 00:05:27,440
a logical constraint system and then

136
00:05:25,520 --> 00:05:29,280
this logical constraint system we can

137
00:05:27,440 --> 00:05:31,919
reason about our program

138
00:05:29,280 --> 00:05:32,960
so for example you could ask the

139
00:05:31,919 --> 00:05:36,320
question

140
00:05:32,960 --> 00:05:39,758
is there a file for which we reach a bug

141
00:05:36,320 --> 00:05:42,159
and well we then use a solver for our um

142
00:05:39,759 --> 00:05:46,479
constraint system and obtain the answer

143
00:05:42,160 --> 00:05:47,919
yes actually for 42 we reach that back

144
00:05:46,479 --> 00:05:51,120
and we are not the first to do this

145
00:05:47,919 --> 00:05:53,520
there has been multiple proposals

146
00:05:51,120 --> 00:05:54,880
from the security community and from

147
00:05:53,520 --> 00:05:57,280
industry

148
00:05:54,880 --> 00:05:58,800
and we analyzed all of them and we found

149
00:05:57,280 --> 00:06:02,400
them to be lacking at least

150
00:05:58,800 --> 00:06:06,800
in one of four categories

151
00:06:02,400 --> 00:06:08,318
um i will go into very sparing details

152
00:06:06,800 --> 00:06:09,520
see because you can check out the paper

153
00:06:08,319 --> 00:06:13,440
for details

154
00:06:09,520 --> 00:06:15,919
but basically all tools we analyzed

155
00:06:13,440 --> 00:06:18,080
lacked in the category of intercontract

156
00:06:15,919 --> 00:06:21,280
reasoning

157
00:06:18,080 --> 00:06:25,039
the or the ethereum system rather

158
00:06:21,280 --> 00:06:27,359
allows during a contact and execution to

159
00:06:25,039 --> 00:06:28,240
this contract also execute another

160
00:06:27,360 --> 00:06:30,960
contract so

161
00:06:28,240 --> 00:06:31,680
what you can do is basically um plug

162
00:06:30,960 --> 00:06:33,758
together

163
00:06:31,680 --> 00:06:35,280
various contracts and thus get very

164
00:06:33,759 --> 00:06:38,400
complex systems

165
00:06:35,280 --> 00:06:41,039
and um all prior work

166
00:06:38,400 --> 00:06:41,520
lacked proper analysis capabilities for

167
00:06:41,039 --> 00:06:46,080
this

168
00:06:41,520 --> 00:06:48,639
thus we actually became the first to to

169
00:06:46,080 --> 00:06:52,080
analyze and find the infamous parity bug

170
00:06:48,639 --> 00:06:52,080
which i told you about earlier

171
00:06:52,160 --> 00:06:58,000
then the program code actually

172
00:06:55,680 --> 00:06:59,599
gets executed on the virtual machine the

173
00:06:58,000 --> 00:07:03,199
ethereum virtual machine

174
00:06:59,599 --> 00:07:06,000
which offers an op code for

175
00:07:03,199 --> 00:07:06,560
um or like a mem copy like opcode like

176
00:07:06,000 --> 00:07:10,800
you

177
00:07:06,560 --> 00:07:12,880
might not from c and this one was

178
00:07:10,800 --> 00:07:13,919
not correctly modeled in all previous

179
00:07:12,880 --> 00:07:17,759
work and

180
00:07:13,919 --> 00:07:21,120
we leveraged the proposal by

181
00:07:17,759 --> 00:07:23,599
fargetar which proposed

182
00:07:21,120 --> 00:07:26,160
for the cmam copy function we adopted it

183
00:07:23,599 --> 00:07:26,159
for a fear

184
00:07:26,240 --> 00:07:30,080
then the catch-act function is

185
00:07:28,240 --> 00:07:31,280
notoriously hard to model because it's a

186
00:07:30,080 --> 00:07:34,560
hash function and

187
00:07:31,280 --> 00:07:36,159
symbolically modeling every

188
00:07:34,560 --> 00:07:37,919
possible outcome of the function is

189
00:07:36,160 --> 00:07:39,840
impossible since well

190
00:07:37,919 --> 00:07:41,198
otherwise it would be a rather bad hash

191
00:07:39,840 --> 00:07:45,520
function

192
00:07:41,199 --> 00:07:47,039
and we propose a new um

193
00:07:45,520 --> 00:07:49,359
encoding scheme for the catch-up

194
00:07:47,039 --> 00:07:53,120
function which allows you to

195
00:07:49,360 --> 00:07:56,560
at least reason more precisely about

196
00:07:53,120 --> 00:07:59,280
the possible outcomes of the function

197
00:07:56,560 --> 00:08:01,599
and then finally um we found that a lot

198
00:07:59,280 --> 00:08:03,280
of tools actually lack validation so

199
00:08:01,599 --> 00:08:04,878
what happens during program analysis

200
00:08:03,280 --> 00:08:06,878
analysis is that you have to

201
00:08:04,879 --> 00:08:08,080
use some kind of over approximation

202
00:08:06,879 --> 00:08:10,240
right we

203
00:08:08,080 --> 00:08:12,000
do a more precise analysis of check but

204
00:08:10,240 --> 00:08:13,280
we still to some degree have to over

205
00:08:12,000 --> 00:08:16,240
approximate because

206
00:08:13,280 --> 00:08:18,080
if we could reason about the outcomes of

207
00:08:16,240 --> 00:08:22,479
catch-up we could also break catch up

208
00:08:18,080 --> 00:08:25,039
right um but what you can do is once

209
00:08:22,479 --> 00:08:26,240
you have your logical encoding you can

210
00:08:25,039 --> 00:08:29,199
you actually get

211
00:08:26,240 --> 00:08:30,319
a valid concrete output for which you

212
00:08:29,199 --> 00:08:33,200
reach a certain

213
00:08:30,319 --> 00:08:34,880
um certain statement in the code of

214
00:08:33,200 --> 00:08:36,399
which you

215
00:08:34,880 --> 00:08:38,880
violate a certain property you want to

216
00:08:36,399 --> 00:08:40,719
test so what you can do is you can do an

217
00:08:38,880 --> 00:08:44,560
offline simulation and we found that

218
00:08:40,719 --> 00:08:47,279
a lot of the tools actually donate um

219
00:08:44,560 --> 00:08:48,399
do not correct for our approximations

220
00:08:47,279 --> 00:08:50,240
and then to

221
00:08:48,399 --> 00:08:52,000
basically demonstrate that our two also

222
00:08:50,240 --> 00:08:55,760
works works at scale we do

223
00:08:52,000 --> 00:08:59,600
do the scan of the entire blood chain

224
00:08:55,760 --> 00:09:02,880
so as of december 2018 we analyzed

225
00:08:59,600 --> 00:09:06,720
uh over two million contracts and found

226
00:09:02,880 --> 00:09:10,480
4 300 to be vulnerable which was

227
00:09:06,720 --> 00:09:10,480
more than all previous work

228
00:09:11,200 --> 00:09:16,000
during this analysis we analyze around

229
00:09:13,440 --> 00:09:18,880
90 of our contracts successfully

230
00:09:16,000 --> 00:09:19,600
but we only spend 30 minutes per

231
00:09:18,880 --> 00:09:23,040
contract right

232
00:09:19,600 --> 00:09:25,760
we could technically uh usually

233
00:09:23,040 --> 00:09:26,319
solve us or analyze our equation system

234
00:09:25,760 --> 00:09:28,000
longer

235
00:09:26,320 --> 00:09:29,600
but we had to impose some kind of

236
00:09:28,000 --> 00:09:32,000
timeout

237
00:09:29,600 --> 00:09:33,920
um the remaining 10 percent are also in

238
00:09:32,000 --> 00:09:36,399
the most complex

239
00:09:33,920 --> 00:09:37,199
contract in the blockchain which also

240
00:09:36,399 --> 00:09:40,320
contain

241
00:09:37,200 --> 00:09:43,120
the most value right and probably still

242
00:09:40,320 --> 00:09:46,240
like the most interesting out there

243
00:09:43,120 --> 00:09:47,920
and actually you can analyze

244
00:09:46,240 --> 00:09:49,279
most of the con so most of the contracts

245
00:09:47,920 --> 00:09:52,319
on the theorem are

246
00:09:49,279 --> 00:09:55,360
rather simple um here i plotted for

247
00:09:52,320 --> 00:09:58,000
10 10 000 samples from our data set how

248
00:09:55,360 --> 00:10:01,040
long it took to analyze these contracts

249
00:09:58,000 --> 00:10:03,760
and as you can see

250
00:10:01,040 --> 00:10:05,680
the time scale is not linearly but in

251
00:10:03,760 --> 00:10:06,079
the first five seconds we can already

252
00:10:05,680 --> 00:10:09,359
solve

253
00:10:06,079 --> 00:10:10,160
half a data set and after two to three

254
00:10:09,360 --> 00:10:13,440
minutes we have

255
00:10:10,160 --> 00:10:17,600
analyzed roughly

256
00:10:13,440 --> 00:10:18,000
uh about i think it's like 85 percent of

257
00:10:17,600 --> 00:10:20,320
the data

258
00:10:18,000 --> 00:10:21,920
set after that we steadily increase

259
00:10:20,320 --> 00:10:25,200
until we reach the 90 in

260
00:10:21,920 --> 00:10:25,199
the remaining alternatives

261
00:10:26,079 --> 00:10:32,000
uh to prove that uh um or that the that

262
00:10:29,920 --> 00:10:33,680
we found more contracts

263
00:10:32,000 --> 00:10:35,519
not because of better engineering but

264
00:10:33,680 --> 00:10:38,000
rather because of our techniques

265
00:10:35,519 --> 00:10:40,240
we took a subset of the contracts and

266
00:10:38,000 --> 00:10:43,519
the baseline basically refers to

267
00:10:40,240 --> 00:10:46,399
our tool analyzing that subset without

268
00:10:43,519 --> 00:10:46,720
the without our improvements turned on

269
00:10:46,399 --> 00:10:49,120
so

270
00:10:46,720 --> 00:10:50,079
memory cad check and the intercontract

271
00:10:49,120 --> 00:10:53,600
reasoning

272
00:10:50,079 --> 00:10:54,880
calls here and what we did then is we

273
00:10:53,600 --> 00:10:58,560
turned memory on

274
00:10:54,880 --> 00:11:01,439
re-analyze the bit data set and

275
00:10:58,560 --> 00:11:02,079
um recorded how much bucks we then found

276
00:11:01,440 --> 00:11:07,040
and

277
00:11:02,079 --> 00:11:09,199
for each of the improvements we found um

278
00:11:07,040 --> 00:11:10,560
we found more bugs so actually all of

279
00:11:09,200 --> 00:11:13,839
them contribute

280
00:11:10,560 --> 00:11:15,920
to the overall number and note that

281
00:11:13,839 --> 00:11:19,440
memory seems rather small here but

282
00:11:15,920 --> 00:11:22,479
um we basically have such a

283
00:11:19,440 --> 00:11:25,040
precise memory model to him to enable um

284
00:11:22,480 --> 00:11:26,839
correct reasoning about catch and

285
00:11:25,040 --> 00:11:30,240
intercontract

286
00:11:26,839 --> 00:11:32,880
reasoning so

287
00:11:30,240 --> 00:11:34,480
more precise another smart contract is

288
00:11:32,880 --> 00:11:37,040
possible

289
00:11:34,480 --> 00:11:38,399
um it does give the majority of

290
00:11:37,040 --> 00:11:42,079
contracts

291
00:11:38,399 --> 00:11:42,800
but again most complex contracts still

292
00:11:42,079 --> 00:11:47,120
need work

293
00:11:42,800 --> 00:11:50,479
um again we could only analyze 90

294
00:11:47,120 --> 00:11:52,560
but hopefully this will get improved on

295
00:11:50,480 --> 00:11:54,959
in the future

296
00:11:52,560 --> 00:11:57,040
uh you can find our code online and if

297
00:11:54,959 --> 00:11:59,839
you have follow-up questions you can

298
00:11:57,040 --> 00:12:00,639
reach me via email on twitter and i hope

299
00:11:59,839 --> 00:12:02,000
i've

300
00:12:00,639 --> 00:12:11,519
piqued your interest and you check out

301
00:12:02,000 --> 00:12:13,600
our paper

302
00:12:11,519 --> 00:12:13,600
you

