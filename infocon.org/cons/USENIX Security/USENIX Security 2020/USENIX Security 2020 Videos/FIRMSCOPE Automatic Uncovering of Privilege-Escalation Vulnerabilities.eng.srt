1
00:00:09,120 --> 00:00:12,559
hello everyone and thank you for joining

2
00:00:10,800 --> 00:00:13,519
in today this is muhammad al-sabah from

3
00:00:12,559 --> 00:00:15,838
cryptowire

4
00:00:13,519 --> 00:00:17,680
and today i'll be presenting to you our

5
00:00:15,839 --> 00:00:19,680
work on firm scope a system that we

6
00:00:17,680 --> 00:00:21,439
developed to automatically detect

7
00:00:19,680 --> 00:00:23,119
variables escalation vulnerabilities and

8
00:00:21,439 --> 00:00:24,640
pre-installed apps in android

9
00:00:23,119 --> 00:00:26,240
this work was done in collaboration with

10
00:00:24,640 --> 00:00:27,199
ryan johnson and angel stabridge from

11
00:00:26,240 --> 00:00:30,000
kept to wire

12
00:00:27,199 --> 00:00:33,519
and chav shenzhou king shrunk jab ling

13
00:00:30,000 --> 00:00:33,519
from the ohio state university

14
00:00:35,280 --> 00:00:38,719
so this is a simplified view of the

15
00:00:36,880 --> 00:00:41,120
architecture of android

16
00:00:38,719 --> 00:00:42,000
you have the android kernel and c linux

17
00:00:41,120 --> 00:00:43,919
at the bottom

18
00:00:42,000 --> 00:00:45,360
and then you have the android runtime

19
00:00:43,920 --> 00:00:46,960
and framework on top of that and then

20
00:00:45,360 --> 00:00:48,079
you have applications running on top of

21
00:00:46,960 --> 00:00:50,800
the framework

22
00:00:48,079 --> 00:00:52,879
and android apps by default are saying

23
00:00:50,800 --> 00:00:54,160
boxed this is kernel enforced they get

24
00:00:52,879 --> 00:00:55,919
isolated processes

25
00:00:54,160 --> 00:00:58,800
private isolates storage in the file

26
00:00:55,920 --> 00:01:01,600
system and they can exchange messages

27
00:00:58,800 --> 00:01:02,078
using a secure rpc mechanism also access

28
00:01:01,600 --> 00:01:05,439
to the

29
00:01:02,079 --> 00:01:09,840
operating system and peripherals is

30
00:01:05,438 --> 00:01:11,600
protected by a permission model

31
00:01:09,840 --> 00:01:13,520
android apps in general can be

32
00:01:11,600 --> 00:01:15,520
categorized into

33
00:01:13,520 --> 00:01:16,798
two groups there are user apps and there

34
00:01:15,520 --> 00:01:20,080
are system apps

35
00:01:16,799 --> 00:01:21,360
so user apps are typically apps that you

36
00:01:20,080 --> 00:01:23,439
install from the market

37
00:01:21,360 --> 00:01:24,400
they are low privileged they can't do

38
00:01:23,439 --> 00:01:26,080
much

39
00:01:24,400 --> 00:01:27,680
they can be granted some sensitive

40
00:01:26,080 --> 00:01:28,720
permissions but the user would have to

41
00:01:27,680 --> 00:01:30,799
explicitly

42
00:01:28,720 --> 00:01:32,720
grant them these permissions on the

43
00:01:30,799 --> 00:01:34,479
other hand you have system apps which

44
00:01:32,720 --> 00:01:36,720
come pre-installed on the device they

45
00:01:34,479 --> 00:01:37,920
are persistent so they cannot

46
00:01:36,720 --> 00:01:42,560
that will typically cannot be

47
00:01:37,920 --> 00:01:44,159
uninstalled some of them can be disabled

48
00:01:42,560 --> 00:01:47,200
even though that's not that's not the

49
00:01:44,159 --> 00:01:49,119
general case they are highly privileged

50
00:01:47,200 --> 00:01:50,799
and this is by design because of these

51
00:01:49,119 --> 00:01:53,360
you know services that they offer for

52
00:01:50,799 --> 00:01:56,719
example telephony and package management

53
00:01:53,360 --> 00:02:00,000
they get access to more permissions

54
00:01:56,719 --> 00:02:01,679
than user apps and a lot of times these

55
00:02:00,000 --> 00:02:04,799
permissions are also automatically

56
00:02:01,680 --> 00:02:04,799
granted by the system

57
00:02:05,200 --> 00:02:09,360
and there are many sources these

58
00:02:06,719 --> 00:02:11,599
pre-installed apps come from

59
00:02:09,360 --> 00:02:13,040
in a typical android device you have the

60
00:02:11,599 --> 00:02:15,200
android open source project

61
00:02:13,040 --> 00:02:16,959
and perhaps google apps and you also

62
00:02:15,200 --> 00:02:19,440
have pre-installed apps that come

63
00:02:16,959 --> 00:02:20,640
from vendors who are also the firmware

64
00:02:19,440 --> 00:02:23,359
signers

65
00:02:20,640 --> 00:02:24,879
and chipset manufacturers affiliates and

66
00:02:23,360 --> 00:02:27,120
also carriers all these

67
00:02:24,879 --> 00:02:29,440
apps are pre-installed and pushed to a

68
00:02:27,120 --> 00:02:33,200
device

69
00:02:29,440 --> 00:02:34,640
prior to reaching the end user

70
00:02:33,200 --> 00:02:36,958
and if you look at the typical android

71
00:02:34,640 --> 00:02:40,000
device perhaps on late 2019 you'll see

72
00:02:36,959 --> 00:02:43,599
that there are 164 pre-installed apps in

73
00:02:40,000 --> 00:02:45,440
average versus only 30 user apps so the

74
00:02:43,599 --> 00:02:49,200
so the attack surface from previous

75
00:02:45,440 --> 00:02:50,959
pre-installed apps is quite large

76
00:02:49,200 --> 00:02:52,480
to give you a concrete example this is

77
00:02:50,959 --> 00:02:53,920
the package installer which

78
00:02:52,480 --> 00:02:56,238
pretty much every single android device

79
00:02:53,920 --> 00:02:56,799
has one of these and as you can see it

80
00:02:56,239 --> 00:02:59,519
cannot

81
00:02:56,800 --> 00:03:01,280
be uninstalled and it cannot be disabled

82
00:02:59,519 --> 00:03:03,440
and the system tells you that hey

83
00:03:01,280 --> 00:03:05,040
this package installer does not you know

84
00:03:03,440 --> 00:03:06,959
request any permissions

85
00:03:05,040 --> 00:03:08,239
however if you actually dump the package

86
00:03:06,959 --> 00:03:09,200
information you will see that it

87
00:03:08,239 --> 00:03:11,519
requests

88
00:03:09,200 --> 00:03:13,518
22 permissions a lot of them are

89
00:03:11,519 --> 00:03:15,280
sensitive not available to third-party

90
00:03:13,519 --> 00:03:16,959
apps for user installed apps

91
00:03:15,280 --> 00:03:20,319
and all of them have been automatically

92
00:03:16,959 --> 00:03:20,319
granted by the system already

93
00:03:20,800 --> 00:03:24,560
so whenever we speak of privileged

94
00:03:22,959 --> 00:03:27,040
functionality access control

95
00:03:24,560 --> 00:03:29,120
comes to mind right so if you have you

96
00:03:27,040 --> 00:03:30,159
know a system or an app or a component

97
00:03:29,120 --> 00:03:33,440
that's

98
00:03:30,159 --> 00:03:35,280
offering something privileged then um

99
00:03:33,440 --> 00:03:37,040
you need to employ some sort of access

100
00:03:35,280 --> 00:03:38,080
control to prevent abuse of that

101
00:03:37,040 --> 00:03:40,079
functionality

102
00:03:38,080 --> 00:03:41,840
and a typical access control protocol

103
00:03:40,080 --> 00:03:43,200
guarantees authentication authorization

104
00:03:41,840 --> 00:03:44,879
and accounting so you know who is

105
00:03:43,200 --> 00:03:46,560
allowed access what they are allowed to

106
00:03:44,879 --> 00:03:49,679
do and you also keep a log

107
00:03:46,560 --> 00:03:51,760
of who did what in the case of the

108
00:03:49,680 --> 00:03:53,840
package installer you would expect that

109
00:03:51,760 --> 00:03:55,599
okay google play which is a market app

110
00:03:53,840 --> 00:03:56,879
yes perhaps that's allowed to install

111
00:03:55,599 --> 00:03:59,200
apps so you would expect the package

112
00:03:56,879 --> 00:04:01,599
installer to grant that to google play

113
00:03:59,200 --> 00:04:03,518
whereas if you know another random user

114
00:04:01,599 --> 00:04:05,518
installed app tries to

115
00:04:03,519 --> 00:04:07,840
silently install zaps in the backgrounds

116
00:04:05,519 --> 00:04:12,400
you'd expect the packaging installer to

117
00:04:07,840 --> 00:04:14,239
reject that request unfortunately that's

118
00:04:12,400 --> 00:04:16,160
not necessarily the case and we found

119
00:04:14,239 --> 00:04:17,918
thousands of instances of privileged

120
00:04:16,160 --> 00:04:20,880
escalation vulnerabilities and

121
00:04:17,918 --> 00:04:23,599
android versions four to nine all

122
00:04:20,880 --> 00:04:26,880
primarily due to improper access control

123
00:04:23,600 --> 00:04:29,440
uh in pre-installed apps

124
00:04:26,880 --> 00:04:30,000
and this is a real example of one of the

125
00:04:29,440 --> 00:04:31,919
uh

126
00:04:30,000 --> 00:04:34,160
of the cases that we identified it's an

127
00:04:31,919 --> 00:04:35,599
app called lovely fonts it actually goes

128
00:04:34,160 --> 00:04:37,759
by many other names

129
00:04:35,600 --> 00:04:38,960
and it consists it consists of two

130
00:04:37,759 --> 00:04:41,120
separate apps one

131
00:04:38,960 --> 00:04:42,080
is user facing and another app that runs

132
00:04:41,120 --> 00:04:43,600
in the background

133
00:04:42,080 --> 00:04:45,359
so the user both of them cannot be

134
00:04:43,600 --> 00:04:47,600
uninstalled as you can see one of them

135
00:04:45,360 --> 00:04:49,600
can be disabled these are facing parts

136
00:04:47,600 --> 00:04:51,360
uh and both of them are of course

137
00:04:49,600 --> 00:04:52,960
pre-installed apps

138
00:04:51,360 --> 00:04:54,639
and all the sensitive functionality is

139
00:04:52,960 --> 00:04:57,520
actually implemented in in the back

140
00:04:54,639 --> 00:04:58,560
in the background part what we found is

141
00:04:57,520 --> 00:05:00,320
that

142
00:04:58,560 --> 00:05:01,840
this lovely font service the background

143
00:05:00,320 --> 00:05:05,039
component of this app

144
00:05:01,840 --> 00:05:06,560
has multiple local and remote command

145
00:05:05,039 --> 00:05:07,039
and code injection vulnerabilities that

146
00:05:06,560 --> 00:05:09,440
pretty much

147
00:05:07,039 --> 00:05:10,479
allows any actor on the device or on the

148
00:05:09,440 --> 00:05:12,560
network

149
00:05:10,479 --> 00:05:13,758
to execute arbitrary commands and

150
00:05:12,560 --> 00:05:16,800
arbitrary code

151
00:05:13,759 --> 00:05:18,880
in the context of of of the lovely font

152
00:05:16,800 --> 00:05:21,919
service process which is a privileged

153
00:05:18,880 --> 00:05:22,880
process without user consent so pretty

154
00:05:21,919 --> 00:05:25,039
much like um

155
00:05:22,880 --> 00:05:26,800
you know a command and control channel

156
00:05:25,039 --> 00:05:27,599
and we found this in more than 40

157
00:05:26,800 --> 00:05:29,520
devices

158
00:05:27,600 --> 00:05:32,000
from more than 10 vendors and of course

159
00:05:29,520 --> 00:05:34,639
impacting millions of users

160
00:05:32,000 --> 00:05:35,280
so how we did how did we do that uh so

161
00:05:34,639 --> 00:05:39,199
that's

162
00:05:35,280 --> 00:05:41,039
uh our uh you know workflow firm scope

163
00:05:39,199 --> 00:05:42,560
it has two stages of pre-processing and

164
00:05:41,039 --> 00:05:43,440
a static claimed analysis stage in the

165
00:05:42,560 --> 00:05:45,680
pre-processing

166
00:05:43,440 --> 00:05:46,560
stage we unpack firmware images we

167
00:05:45,680 --> 00:05:48,240
extract

168
00:05:46,560 --> 00:05:50,240
and canonicalize apps then we

169
00:05:48,240 --> 00:05:52,560
disassemble them translate them

170
00:05:50,240 --> 00:05:54,720
into an intermediate language and then

171
00:05:52,560 --> 00:05:56,000
for a second analysis part we build into

172
00:05:54,720 --> 00:05:57,600
procedural

173
00:05:56,000 --> 00:05:59,759
control flow and data flow graphs and

174
00:05:57,600 --> 00:06:00,479
then we perform custom paint analysis

175
00:05:59,759 --> 00:06:03,120
with the help

176
00:06:00,479 --> 00:06:05,440
of of analysis rules that steer the

177
00:06:03,120 --> 00:06:08,639
analysis to detect specific

178
00:06:05,440 --> 00:06:10,560
classes of vulnerability of course this

179
00:06:08,639 --> 00:06:12,479
is not without challenges

180
00:06:10,560 --> 00:06:13,759
so in the pre-processing stage the main

181
00:06:12,479 --> 00:06:16,880
challenges that we met

182
00:06:13,759 --> 00:06:19,919
were that android images

183
00:06:16,880 --> 00:06:20,639
or roms lack you know standard formats

184
00:06:19,919 --> 00:06:22,400
so you get

185
00:06:20,639 --> 00:06:23,840
you get roms in many many different

186
00:06:22,400 --> 00:06:26,159
formats uh

187
00:06:23,840 --> 00:06:28,080
and different you know build uh and

188
00:06:26,160 --> 00:06:29,759
optimization settings and different file

189
00:06:28,080 --> 00:06:32,400
structures and so on

190
00:06:29,759 --> 00:06:34,240
uh and also you have the uh the

191
00:06:32,400 --> 00:06:35,840
disassembling stage you have the dalvik

192
00:06:34,240 --> 00:06:38,639
byte code itself

193
00:06:35,840 --> 00:06:39,280
uh which you know in many instructions

194
00:06:38,639 --> 00:06:41,440
is

195
00:06:39,280 --> 00:06:43,520
close to 200 and maybe 50 instructions

196
00:06:41,440 --> 00:06:45,919
or so it would share a lot and involve

197
00:06:43,520 --> 00:06:49,280
and they are complex instructions

198
00:06:45,919 --> 00:06:51,758
um so our solution to that was to uh

199
00:06:49,280 --> 00:06:53,758
implement the different heuristics uh to

200
00:06:51,759 --> 00:06:55,120
try and pack as much as possible from a

201
00:06:53,759 --> 00:06:57,520
firmware image

202
00:06:55,120 --> 00:06:59,280
and instead of directly operating on the

203
00:06:57,520 --> 00:07:01,120
data byte code itself

204
00:06:59,280 --> 00:07:03,359
we translate it to an intermediate

205
00:07:01,120 --> 00:07:05,120
language that we developed

206
00:07:03,360 --> 00:07:06,800
that facilitates the analysis and makes

207
00:07:05,120 --> 00:07:09,199
it a lot easier and abstracts out a lot

208
00:07:06,800 --> 00:07:11,840
of the internals of the bytecode that

209
00:07:09,199 --> 00:07:14,479
are perhaps not necessarily relevant to

210
00:07:11,840 --> 00:07:16,560
the analysis

211
00:07:14,479 --> 00:07:18,240
for static analysis stage the main

212
00:07:16,560 --> 00:07:20,400
challenges that we faced were

213
00:07:18,240 --> 00:07:22,400
data that flows through fields and

214
00:07:20,400 --> 00:07:25,679
callbacks and lifecycles and so on which

215
00:07:22,400 --> 00:07:28,960
are common on android and

216
00:07:25,680 --> 00:07:32,080
also how to balance the

217
00:07:28,960 --> 00:07:32,880
analysis sensitivities that the analysis

218
00:07:32,080 --> 00:07:35,199
guarantees

219
00:07:32,880 --> 00:07:37,120
and runtime considerations and this is

220
00:07:35,199 --> 00:07:38,560
important because we wanted firmscope to

221
00:07:37,120 --> 00:07:41,520
be meaningful so we

222
00:07:38,560 --> 00:07:43,360
were aiming um at testing you know

223
00:07:41,520 --> 00:07:46,000
hundreds of thousands of apps

224
00:07:43,360 --> 00:07:46,800
so so that requires thermoscope to be

225
00:07:46,000 --> 00:07:50,960
both

226
00:07:46,800 --> 00:07:53,520
accurate and at the same time efficient

227
00:07:50,960 --> 00:07:56,400
and our solutions to that to these

228
00:07:53,520 --> 00:07:59,280
challenges were to

229
00:07:56,400 --> 00:08:00,000
modify diffuse analysis to actually

230
00:07:59,280 --> 00:08:01,599
cover

231
00:08:00,000 --> 00:08:03,440
fields as well so we track reads and

232
00:08:01,599 --> 00:08:06,000
writes through fields

233
00:08:03,440 --> 00:08:08,080
and we also developed multiple graph

234
00:08:06,000 --> 00:08:09,840
gadgets that we use in our construction

235
00:08:08,080 --> 00:08:11,280
of the control flow and data flow graphs

236
00:08:09,840 --> 00:08:13,119
where

237
00:08:11,280 --> 00:08:15,679
we encode as much information as

238
00:08:13,120 --> 00:08:18,319
possible into the graphs

239
00:08:15,680 --> 00:08:18,960
such that paint analysis reduces to just

240
00:08:18,319 --> 00:08:21,039
a simple

241
00:08:18,960 --> 00:08:22,799
path finding problem which you know we

242
00:08:21,039 --> 00:08:24,240
know very well how to parallelize and

243
00:08:22,800 --> 00:08:27,599
how to do efficiently

244
00:08:24,240 --> 00:08:30,000
and then for the sensitivities that that

245
00:08:27,599 --> 00:08:31,280
could not be guaranteed uh during

246
00:08:30,000 --> 00:08:33,919
construction time

247
00:08:31,280 --> 00:08:35,199
we uh validate those in a

248
00:08:33,919 --> 00:08:37,120
post-processing

249
00:08:35,200 --> 00:08:38,479
or a positive validation stage on the

250
00:08:37,120 --> 00:08:40,560
paths uh

251
00:08:38,479 --> 00:08:41,919
that were discovered through the graphs

252
00:08:40,559 --> 00:08:45,040
that way we could

253
00:08:41,919 --> 00:08:46,560
we achieved both accuracy and efficiency

254
00:08:45,040 --> 00:08:48,000
at the same time

255
00:08:46,560 --> 00:08:50,160
and you can read more about this in the

256
00:08:48,000 --> 00:08:51,680
paper

257
00:08:50,160 --> 00:08:53,360
finally for the rules we implemented

258
00:08:51,680 --> 00:08:54,959
different rules that detect different

259
00:08:53,360 --> 00:08:56,560
classes of privilege escalation

260
00:08:54,959 --> 00:08:58,399
including command and code injection i

261
00:08:56,560 --> 00:08:59,040
have installation device recording and

262
00:08:58,399 --> 00:09:01,920
so on

263
00:08:59,040 --> 00:09:03,360
and most of these rules are source like

264
00:09:01,920 --> 00:09:05,599
standard source sync

265
00:09:03,360 --> 00:09:07,839
analysis rules but also a number of them

266
00:09:05,600 --> 00:09:09,760
is our custom plugins

267
00:09:07,839 --> 00:09:10,959
using apis that we export from the

268
00:09:09,760 --> 00:09:12,399
analysis and

269
00:09:10,959 --> 00:09:14,959
again you can read more about this in

270
00:09:12,399 --> 00:09:18,399
the paper as well

271
00:09:14,959 --> 00:09:21,439
right so uh we've had we we scanned

272
00:09:18,399 --> 00:09:24,800
2000 2017 android images is

273
00:09:21,440 --> 00:09:28,320
spanning android four to nine i believe

274
00:09:24,800 --> 00:09:31,839
more than 50 or 100 vendors

275
00:09:28,320 --> 00:09:32,399
uh totaling 331 thousand pre-installed

276
00:09:31,839 --> 00:09:35,920
apps

277
00:09:32,399 --> 00:09:37,200
and we found that 77 of these images

278
00:09:35,920 --> 00:09:40,800
contain at least one

279
00:09:37,200 --> 00:09:42,399
vulnerability in total we found

280
00:09:40,800 --> 00:09:45,279
more than three thousand vulnerabilities

281
00:09:42,399 --> 00:09:49,440
850 unique vulnerabilities

282
00:09:45,279 --> 00:09:51,120
and we found that 41 of the roms

283
00:09:49,440 --> 00:09:53,040
contained at least one command injection

284
00:09:51,120 --> 00:09:54,000
vulnerability and if you look at this

285
00:09:53,040 --> 00:09:55,839
you see

286
00:09:54,000 --> 00:09:57,920
these results you see that about

287
00:09:55,839 --> 00:10:00,720
one-third

288
00:09:57,920 --> 00:10:04,240
of the vulnerabilities can actually lead

289
00:10:00,720 --> 00:10:07,279
to some some form of code execution

290
00:10:04,240 --> 00:10:10,800
which is a quite large percentage

291
00:10:07,279 --> 00:10:12,560
so we only focused on um

292
00:10:10,800 --> 00:10:14,640
findings that we had for android seven

293
00:10:12,560 --> 00:10:17,040
eight or nine and we disclosed 300 and

294
00:10:14,640 --> 00:10:20,240
more than 370 of those

295
00:10:17,040 --> 00:10:23,279
and so far we have received more than

296
00:10:20,240 --> 00:10:24,480
200 confirmations from vendors and you

297
00:10:23,279 --> 00:10:26,240
know fixes and

298
00:10:24,480 --> 00:10:29,839
some of them have been fixed then some

299
00:10:26,240 --> 00:10:33,760
fixes are in preparation

300
00:10:29,839 --> 00:10:36,560
so who's to blame for this we found that

301
00:10:33,760 --> 00:10:38,880
92 percent of the weaknesses were

302
00:10:36,560 --> 00:10:41,359
introduced by vendors and

303
00:10:38,880 --> 00:10:42,720
we found we actually found that a lot of

304
00:10:41,360 --> 00:10:45,600
the code that vendors

305
00:10:42,720 --> 00:10:46,640
add is really lacks has a lag security

306
00:10:45,600 --> 00:10:49,040
posture

307
00:10:46,640 --> 00:10:50,079
for instance the ad sensitive components

308
00:10:49,040 --> 00:10:52,719
for example that

309
00:10:50,079 --> 00:10:54,000
manage updates or you know manage the

310
00:10:52,720 --> 00:10:56,240
device itself

311
00:10:54,000 --> 00:10:57,040
or helpers for the custom drivers and so

312
00:10:56,240 --> 00:10:59,040
on

313
00:10:57,040 --> 00:11:00,560
sometimes without any sort of access

314
00:10:59,040 --> 00:11:04,000
control

315
00:11:00,560 --> 00:11:07,040
we also found that the devices that

316
00:11:04,000 --> 00:11:10,800
tend to be closer to asb

317
00:11:07,040 --> 00:11:15,839
meaning they have less customizations

318
00:11:10,800 --> 00:11:15,839
also tended to contain fewer weaknesses

319
00:11:16,240 --> 00:11:20,320
in regard to one time we incurred about

320
00:11:19,839 --> 00:11:24,000
seven

321
00:11:20,320 --> 00:11:26,800
minutes per app on average 53 only 53

322
00:11:24,000 --> 00:11:29,760
seconds median

323
00:11:26,800 --> 00:11:30,880
and for the uh the full image analysis

324
00:11:29,760 --> 00:11:33,519
we uh

325
00:11:30,880 --> 00:11:35,200
take about 81 minutes per an android

326
00:11:33,519 --> 00:11:37,680
damage again 51

327
00:11:35,200 --> 00:11:42,640
minutes median so so there so there is a

328
00:11:37,680 --> 00:11:45,279
tail to uh to these distributions um

329
00:11:42,640 --> 00:11:47,120
for accuracy we actually uh performed

330
00:11:45,279 --> 00:11:47,839
significantly better than prior

331
00:11:47,120 --> 00:11:50,160
solutions

332
00:11:47,839 --> 00:11:52,000
uh we incurred less false positives and

333
00:11:50,160 --> 00:11:54,399
failed some false negatives

334
00:11:52,000 --> 00:11:56,560
and significantly less runtime overhead

335
00:11:54,399 --> 00:11:58,800
as well in regard to both cpu and memory

336
00:11:56,560 --> 00:12:01,359
consumption and you can read the details

337
00:11:58,800 --> 00:12:01,359
in the paper

338
00:12:02,240 --> 00:12:05,279
so to summarize uh we developed firm

339
00:12:04,720 --> 00:12:07,519
scope

340
00:12:05,279 --> 00:12:08,320
it's an accurate an efficient and

341
00:12:07,519 --> 00:12:10,320
meaningful

342
00:12:08,320 --> 00:12:12,279
static paint and answer system we

343
00:12:10,320 --> 00:12:15,320
applied it on

344
00:12:12,279 --> 00:12:18,560
2017 android images uh

345
00:12:15,320 --> 00:12:21,600
331 000 pre-installed apps

346
00:12:18,560 --> 00:12:23,359
we detected 850 unique uh privilege

347
00:12:21,600 --> 00:12:24,959
escalation vulnerabilities more than 3

348
00:12:23,360 --> 00:12:27,519
000 total

349
00:12:24,959 --> 00:12:30,319
and we responsibly disclosed them for

350
00:12:27,519 --> 00:12:32,320
android 7809

351
00:12:30,320 --> 00:12:33,360
and if you are a vendor and you are

352
00:12:32,320 --> 00:12:36,880
interested

353
00:12:33,360 --> 00:12:51,839
in trying thermoscope please contact us

354
00:12:36,880 --> 00:12:51,839
we do offer pilots and thank you

