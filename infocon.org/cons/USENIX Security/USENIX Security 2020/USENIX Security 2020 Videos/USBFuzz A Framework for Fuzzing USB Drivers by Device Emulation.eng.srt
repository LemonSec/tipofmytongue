1
00:00:08,960 --> 00:00:12,639
hello everyone

2
00:00:10,160 --> 00:00:14,000
thanks very much for your attendance my

3
00:00:12,639 --> 00:00:16,799
name is hui peng

4
00:00:14,000 --> 00:00:18,640
a phd student from purdue university it

5
00:00:16,800 --> 00:00:20,320
is a great honor for me to be here

6
00:00:18,640 --> 00:00:23,279
presenting our work

7
00:00:20,320 --> 00:00:23,920
usb first a framework for furthering usb

8
00:00:23,279 --> 00:00:27,359
drivers

9
00:00:23,920 --> 00:00:29,519
by device emanation this is a joint work

10
00:00:27,359 --> 00:00:33,199
with professor matthias powell pro

11
00:00:29,519 --> 00:00:33,199
affinity with the epfl

12
00:00:33,680 --> 00:00:39,519
testing drivers is chinese because

13
00:00:36,719 --> 00:00:41,520
fibrous uranium depends depends on the

14
00:00:39,520 --> 00:00:44,640
underlying hardware device

15
00:00:41,520 --> 00:00:47,440
and it is very hard for real hardware

16
00:00:44,640 --> 00:00:48,399
to generate unexpected imports during

17
00:00:47,440 --> 00:00:50,879
testing

18
00:00:48,399 --> 00:00:52,239
in recent years actually there are many

19
00:00:50,879 --> 00:00:54,879
reported attacks

20
00:00:52,239 --> 00:00:59,038
on the cves triggered by malicious

21
00:00:54,879 --> 00:01:01,519
inputs from the device site

22
00:00:59,039 --> 00:01:03,840
however on the other hand existing

23
00:01:01,520 --> 00:01:04,559
defense mechanisms against malicious

24
00:01:03,840 --> 00:01:07,439
devices

25
00:01:04,559 --> 00:01:09,119
are limited for example rule-based

26
00:01:07,439 --> 00:01:12,639
authorization policies

27
00:01:09,119 --> 00:01:15,680
like usb card and usb file was an

28
00:01:12,640 --> 00:01:18,240
lbm usb filter

29
00:01:15,680 --> 00:01:19,520
can only detect snow bugs and may

30
00:01:18,240 --> 00:01:23,280
potentially miss

31
00:01:19,520 --> 00:01:24,080
unknown ones other isolation based

32
00:01:23,280 --> 00:01:27,439
approaches

33
00:01:24,080 --> 00:01:28,158
like sinch rely heavily on hardware

34
00:01:27,439 --> 00:01:31,360
features

35
00:01:28,159 --> 00:01:32,560
and are very expensive thus they are not

36
00:01:31,360 --> 00:01:35,759
used in practice

37
00:01:32,560 --> 00:01:36,799
at all an alternative to defense

38
00:01:35,759 --> 00:01:40,400
mechanisms

39
00:01:36,799 --> 00:01:43,200
is finding bugs and fin and fixing them

40
00:01:40,400 --> 00:01:44,799
funding is a widely used approach to

41
00:01:43,200 --> 00:01:47,600
automatically find bugs

42
00:01:44,799 --> 00:01:50,079
in software on the highs being

43
00:01:47,600 --> 00:01:54,640
demonstrated to be very effective

44
00:01:50,079 --> 00:01:58,000
in recent years in this work we propose

45
00:01:54,640 --> 00:01:59,040
a framework to apply fuzzy on usb device

46
00:01:58,000 --> 00:02:01,280
drivers

47
00:01:59,040 --> 00:02:02,399
which is the most widely used type of

48
00:02:01,280 --> 00:02:05,360
devices

49
00:02:02,399 --> 00:02:07,439
because fixing bugs is better than

50
00:02:05,360 --> 00:02:10,160
passively defending against their

51
00:02:07,439 --> 00:02:10,160
exploits

52
00:02:10,878 --> 00:02:16,959
before i proceed i would like to define

53
00:02:13,920 --> 00:02:20,480
our threat model we assume that

54
00:02:16,959 --> 00:02:22,959
a usb device site is under the control

55
00:02:20,480 --> 00:02:26,000
of an attacker either through

56
00:02:22,959 --> 00:02:28,959
of prepared device connected to

57
00:02:26,000 --> 00:02:31,680
a physical device or hijacking a

58
00:02:28,959 --> 00:02:34,480
connection to a networked interface

59
00:02:31,680 --> 00:02:35,440
run by for example a usb redirection

60
00:02:34,480 --> 00:02:39,440
server

61
00:02:35,440 --> 00:02:42,800
here we only focus on unexpected data

62
00:02:39,440 --> 00:02:42,800
read from the device side

63
00:02:43,680 --> 00:02:47,120
under this threat model a key challenge

64
00:02:46,400 --> 00:02:50,480
for usb

65
00:02:47,120 --> 00:02:52,160
fuzzing is feeding ramadan device

66
00:02:50,480 --> 00:02:55,040
importer drivers

67
00:02:52,160 --> 00:02:57,599
there have already been some existing

68
00:02:55,040 --> 00:03:01,040
approaches to address this challenge

69
00:02:57,599 --> 00:03:04,399
for example new map uses face damper

70
00:03:01,040 --> 00:03:07,679
a dedicated usb device

71
00:03:04,400 --> 00:03:10,560
to achieve this goal this approach

72
00:03:07,680 --> 00:03:11,440
includes hardware cost and either one

73
00:03:10,560 --> 00:03:15,040
such board

74
00:03:11,440 --> 00:03:18,079
can only be used to first one instance

75
00:03:15,040 --> 00:03:22,239
this is not scalable other work

76
00:03:18,080 --> 00:03:25,440
nexus caller usb first and periscope

77
00:03:22,239 --> 00:03:26,560
are inject random device input at a

78
00:03:25,440 --> 00:03:30,079
certain layer

79
00:03:26,560 --> 00:03:32,319
of the io stack their implementation

80
00:03:30,080 --> 00:03:34,080
are usually tightly coupled with a

81
00:03:32,319 --> 00:03:36,560
certain os version

82
00:03:34,080 --> 00:03:38,080
and cannot be easily ported to other

83
00:03:36,560 --> 00:03:41,599
operating systems

84
00:03:38,080 --> 00:03:43,920
and as it is not an end-to-end approach

85
00:03:41,599 --> 00:03:45,679
there are some code parts that are not

86
00:03:43,920 --> 00:03:49,280
covered

87
00:03:45,680 --> 00:03:51,280
there is some other work trying to

88
00:03:49,280 --> 00:03:54,400
inject device data through

89
00:03:51,280 --> 00:03:58,239
the networked usb interface

90
00:03:54,400 --> 00:03:59,200
for example vuspf but it only supports

91
00:03:58,239 --> 00:04:02,159
some version

92
00:03:59,200 --> 00:04:03,679
and not able to leverage state of art

93
00:04:02,159 --> 00:04:06,319
coverage guided fuzzing

94
00:04:03,680 --> 00:04:08,879
which has been proven to be a lot more

95
00:04:06,319 --> 00:04:08,879
effective

96
00:04:08,959 --> 00:04:15,120
in usb first we use an emunated usb

97
00:04:12,560 --> 00:04:18,000
device in a virtualized kernel to

98
00:04:15,120 --> 00:04:19,519
fit ramped up device inputs to drivers

99
00:04:18,000 --> 00:04:22,479
under test

100
00:04:19,519 --> 00:04:24,880
and to support coverage guided fuzzing a

101
00:04:22,479 --> 00:04:26,080
host memory area is exported to the

102
00:04:24,880 --> 00:04:29,520
guest system

103
00:04:26,080 --> 00:04:32,960
so that covered information can be saved

104
00:04:29,520 --> 00:04:36,159
compared with existing approaches as

105
00:04:32,960 --> 00:04:39,520
a software-based approach it is cheap

106
00:04:36,160 --> 00:04:40,960
and scalable as it works in a device

107
00:04:39,520 --> 00:04:43,599
snare

108
00:04:40,960 --> 00:04:45,198
protein to other operating systems is

109
00:04:43,600 --> 00:04:47,520
straightforward

110
00:04:45,199 --> 00:04:50,400
additionally it also supports coverage

111
00:04:47,520 --> 00:04:50,400
guided fuzzing

112
00:04:51,040 --> 00:04:57,520
here the overall design of usb

113
00:04:54,320 --> 00:04:59,759
first is shown a guest vm runs the

114
00:04:57,520 --> 00:05:01,280
target system containing the driver that

115
00:04:59,759 --> 00:05:04,320
we want to test

116
00:05:01,280 --> 00:05:06,719
a further device in the guest system is

117
00:05:04,320 --> 00:05:08,000
responsible for forwarding the further

118
00:05:06,720 --> 00:05:11,120
generated inputs

119
00:05:08,000 --> 00:05:12,880
to the drivers main io operations are

120
00:05:11,120 --> 00:05:15,919
performed on it

121
00:05:12,880 --> 00:05:18,080
the communicating device supports a

122
00:05:15,919 --> 00:05:20,479
memory area you know further to the

123
00:05:18,080 --> 00:05:23,520
guest system so that the guest system

124
00:05:20,479 --> 00:05:26,000
can record coverage information and

125
00:05:23,520 --> 00:05:26,880
the user mode a user mode agent

126
00:05:26,000 --> 00:05:29,520
component

127
00:05:26,880 --> 00:05:30,479
running in the user space of the guest

128
00:05:29,520 --> 00:05:33,198
system

129
00:05:30,479 --> 00:05:34,479
communicates with us with the further

130
00:05:33,199 --> 00:05:37,280
the further using

131
00:05:34,479 --> 00:05:39,758
in the host operating system and

132
00:05:37,280 --> 00:05:42,239
controls the execution of tests

133
00:05:39,759 --> 00:05:44,160
if coverage connection is supported by a

134
00:05:42,240 --> 00:05:46,720
guest it also connects coverage

135
00:05:44,160 --> 00:05:46,720
information

136
00:05:47,600 --> 00:05:53,919
in usb first a test

137
00:05:50,639 --> 00:05:56,800
is started further virtually attaching

138
00:05:53,919 --> 00:05:59,120
the fuzzing device to the guest system

139
00:05:56,800 --> 00:06:00,960
then the drivers are tested when

140
00:05:59,120 --> 00:06:05,120
performing our operation

141
00:06:00,960 --> 00:06:07,840
on the frozen device the user mode agent

142
00:06:05,120 --> 00:06:08,800
detects end of test and notifies the

143
00:06:07,840 --> 00:06:11,840
further office

144
00:06:08,800 --> 00:06:14,080
then the further finishes a test by

145
00:06:11,840 --> 00:06:15,520
virtually detach the fuzzing device from

146
00:06:14,080 --> 00:06:21,039
the guest system

147
00:06:15,520 --> 00:06:24,240
and continues to the next iteration

148
00:06:21,039 --> 00:06:25,120
in evaluation we first applied coverage

149
00:06:24,240 --> 00:06:28,240
guided further

150
00:06:25,120 --> 00:06:30,400
on linux by adapting k-curve

151
00:06:28,240 --> 00:06:32,560
the static coverage connecting tool

152
00:06:30,400 --> 00:06:34,799
supported by linux kernel

153
00:06:32,560 --> 00:06:36,400
while fuzzing other operating systems

154
00:06:34,800 --> 00:06:39,280
like freebsd

155
00:06:36,400 --> 00:06:40,159
windows and the mac os as coverage

156
00:06:39,280 --> 00:06:42,960
connection

157
00:06:40,160 --> 00:06:45,039
is not supported we apply dumb buzzing

158
00:06:42,960 --> 00:06:47,359
on these operating systems

159
00:06:45,039 --> 00:06:49,199
considering that they share the same

160
00:06:47,360 --> 00:06:52,319
input format

161
00:06:49,199 --> 00:06:53,440
we use the inputs generated when further

162
00:06:52,319 --> 00:06:56,800
next kernel i

163
00:06:53,440 --> 00:07:00,080
see it so far

164
00:06:56,800 --> 00:07:03,039
we have formed 26 new bugs in linux

165
00:07:00,080 --> 00:07:03,758
and 16 of them are memory bugs of high

166
00:07:03,039 --> 00:07:07,360
security

167
00:07:03,759 --> 00:07:08,000
impact on free pst we found one bug in

168
00:07:07,360 --> 00:07:11,360
the usb

169
00:07:08,000 --> 00:07:15,039
bluetooth dongle driver on windows

170
00:07:11,360 --> 00:07:17,680
we found four bugs resulting blue screen

171
00:07:15,039 --> 00:07:18,479
of death on both windows 8 and windows

172
00:07:17,680 --> 00:07:22,479
10.

173
00:07:18,479 --> 00:07:25,440
on macos we have found 3 with 2 of them

174
00:07:22,479 --> 00:07:26,479
resulting a planned system restart and 1

175
00:07:25,440 --> 00:07:29,280
resulting

176
00:07:26,479 --> 00:07:30,719
system freeze we have found we have

177
00:07:29,280 --> 00:07:35,359
failed 10 cves

178
00:07:30,720 --> 00:07:35,360
and the cv numbers are listed here

179
00:07:35,680 --> 00:07:41,440
we also measured the test speed of usb

180
00:07:39,280 --> 00:07:43,198
first and found that the throughput is

181
00:07:41,440 --> 00:07:47,840
relatively low

182
00:07:43,199 --> 00:07:48,800
ranging from 0.1 to 3.0 executions per

183
00:07:47,840 --> 00:07:51,520
second

184
00:07:48,800 --> 00:07:52,800
we have analyzed a breakdown of test

185
00:07:51,520 --> 00:07:55,359
execution time

186
00:07:52,800 --> 00:07:58,319
and found that most of the time is spent

187
00:07:55,360 --> 00:08:01,520
on os device interaction

188
00:07:58,319 --> 00:08:02,879
similar throughput is also observed in

189
00:08:01,520 --> 00:08:06,400
this caller usb

190
00:08:02,879 --> 00:08:08,960
first here we should

191
00:08:06,400 --> 00:08:09,520
we showcase a bug that we found in the

192
00:08:08,960 --> 00:08:12,080
usb

193
00:08:09,520 --> 00:08:13,680
core framework in linux kernel in the

194
00:08:12,080 --> 00:08:16,318
usb standard

195
00:08:13,680 --> 00:08:18,800
devices are described using some data

196
00:08:16,319 --> 00:08:20,960
structure called device descriptor

197
00:08:18,800 --> 00:08:22,240
there are many types of descriptor of

198
00:08:20,960 --> 00:08:25,599
variant length

199
00:08:22,240 --> 00:08:27,919
so the standard defines the first two

200
00:08:25,599 --> 00:08:28,960
to represent the next and the type of a

201
00:08:27,919 --> 00:08:31,198
descriptor

202
00:08:28,960 --> 00:08:32,319
or legitimate descriptors should have

203
00:08:31,199 --> 00:08:35,519
the correctness

204
00:08:32,320 --> 00:08:37,680
on type fields and the device

205
00:08:35,519 --> 00:08:39,200
descriptors are read from the device

206
00:08:37,679 --> 00:08:42,399
when a usb device

207
00:08:39,200 --> 00:08:44,640
is attached to a computer

208
00:08:42,399 --> 00:08:45,760
we found a bug in one of the functions

209
00:08:44,640 --> 00:08:49,199
for passing

210
00:08:45,760 --> 00:08:51,200
such descriptors as shown here

211
00:08:49,200 --> 00:08:54,399
the vulnerable function determines the

212
00:08:51,200 --> 00:08:57,200
type of descriptor using untrusted data

213
00:08:54,399 --> 00:08:59,519
read from the device site if the device

214
00:08:57,200 --> 00:09:02,720
is under the control of an attacker

215
00:08:59,519 --> 00:09:06,160
he or she can muster it non-descriptors

216
00:09:02,720 --> 00:09:07,120
using short months leveraging this

217
00:09:06,160 --> 00:09:09,199
vulnerability

218
00:09:07,120 --> 00:09:10,480
the attacker can trigger out-of-bound

219
00:09:09,200 --> 00:09:13,440
memory access

220
00:09:10,480 --> 00:09:14,399
for example if the attacker provides

221
00:09:13,440 --> 00:09:17,120
these two bytes

222
00:09:14,399 --> 00:09:18,399
from the device site it will be accepted

223
00:09:17,120 --> 00:09:21,440
by the vulnerable function

224
00:09:18,399 --> 00:09:24,640
at the three-part usb otg descriptor

225
00:09:21,440 --> 00:09:28,560
so when the missing field is accessed

226
00:09:24,640 --> 00:09:28,560
out of memory access is triggered

227
00:09:31,440 --> 00:09:36,000
here we demonstrate a bug that we found

228
00:09:33,600 --> 00:09:40,480
on windows triggering blue screen

229
00:09:36,000 --> 00:09:43,360
of death on the right hand side

230
00:09:40,480 --> 00:09:44,399
a running window system is in the knock

231
00:09:43,360 --> 00:09:47,360
off state

232
00:09:44,399 --> 00:09:48,959
and we attach the firing device with a

233
00:09:47,360 --> 00:09:51,760
prepared input

234
00:09:48,959 --> 00:09:54,479
okay then the window system crashes with

235
00:09:51,760 --> 00:09:54,480
a blue screen

236
00:09:56,000 --> 00:09:58,320
here

237
00:09:59,279 --> 00:10:04,000
here we showcase a lot of crash that we

238
00:10:02,880 --> 00:10:08,079
found on

239
00:10:04,000 --> 00:10:11,360
mac os resulting unplanned restart

240
00:10:08,079 --> 00:10:13,839
similarly the system the running

241
00:10:11,360 --> 00:10:14,560
backward system is in a knockoff state

242
00:10:13,839 --> 00:10:16,800
and we

243
00:10:14,560 --> 00:10:17,599
attach the foreign device with a

244
00:10:16,800 --> 00:10:20,880
prepared

245
00:10:17,600 --> 00:10:24,640
input and then mac os

246
00:10:20,880 --> 00:10:24,640
is restarted automatically

247
00:10:28,399 --> 00:10:35,920
to conclude testing drivers

248
00:10:31,839 --> 00:10:38,160
is challenging in usb first we provide a

249
00:10:35,920 --> 00:10:41,279
device illumination based approach

250
00:10:38,160 --> 00:10:44,399
to first test the usb drivers

251
00:10:41,279 --> 00:10:48,240
usb first is a cheap portable and

252
00:10:44,399 --> 00:10:51,279
flexible framework so far we found your

253
00:10:48,240 --> 00:10:54,480
so far usb first has formed 26 bucks

254
00:10:51,279 --> 00:10:55,680
in linux oneplus in freebsd four bucks

255
00:10:54,480 --> 00:10:58,399
on windows

256
00:10:55,680 --> 00:10:58,880
and three bucks on mac os the source

257
00:10:58,399 --> 00:11:01,600
code

258
00:10:58,880 --> 00:11:02,800
of usb first will be released in this

259
00:11:01,600 --> 00:11:05,760
repository

260
00:11:02,800 --> 00:11:07,040
and with this i'm going to conclude this

261
00:11:05,760 --> 00:11:10,399
presentation

262
00:11:07,040 --> 00:11:15,839
and thanks very much now i'm open to

263
00:11:10,399 --> 00:11:15,839
questions and comments

