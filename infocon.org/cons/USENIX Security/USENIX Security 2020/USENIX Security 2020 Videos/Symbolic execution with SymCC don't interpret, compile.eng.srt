1
00:00:09,200 --> 00:00:11,678
hi

2
00:00:09,760 --> 00:00:14,639
thanks for watching my name is sebastian

3
00:00:11,679 --> 00:00:17,039
piplow and i'm going to present simcc

4
00:00:14,639 --> 00:00:19,198
the core idea of simcc is to compile

5
00:00:17,039 --> 00:00:21,840
symbolic execution capabilities

6
00:00:19,199 --> 00:00:24,880
into executables but let's first recap

7
00:00:21,840 --> 00:00:27,039
what symbolic execution is all about

8
00:00:24,880 --> 00:00:29,439
the goal of symbolic execution is to

9
00:00:27,039 --> 00:00:30,800
explore all possible paths through a

10
00:00:29,439 --> 00:00:32,558
target program

11
00:00:30,800 --> 00:00:34,239
in the example program on the left you

12
00:00:32,558 --> 00:00:36,879
see two if statements

13
00:00:34,239 --> 00:00:38,160
symbolic execution would be able to find

14
00:00:36,880 --> 00:00:40,719
all the possible paths

15
00:00:38,160 --> 00:00:41,519
through them and it would also generate

16
00:00:40,719 --> 00:00:44,399
inputs

17
00:00:41,520 --> 00:00:45,360
that drive execution down any of those

18
00:00:44,399 --> 00:00:47,840
paths

19
00:00:45,360 --> 00:00:49,440
so for example in order to take the else

20
00:00:47,840 --> 00:00:52,640
branch of the first if

21
00:00:49,440 --> 00:00:54,640
we can use x equals zero y equals zero

22
00:00:52,640 --> 00:00:59,120
and similarly for the second if it would

23
00:00:54,640 --> 00:01:01,840
generate inputs to go down either branch

24
00:00:59,120 --> 00:01:04,640
now let's look at current approaches to

25
00:01:01,840 --> 00:01:07,119
symbolic execution

26
00:01:04,640 --> 00:01:08,720
most current designs follow what we call

27
00:01:07,119 --> 00:01:10,880
an interpreter approach

28
00:01:08,720 --> 00:01:13,200
so when executing the target program on

29
00:01:10,880 --> 00:01:14,399
the left which is represented in llvm

30
00:01:13,200 --> 00:01:16,560
bit code

31
00:01:14,400 --> 00:01:18,960
they would follow a structure something

32
00:01:16,560 --> 00:01:21,040
like what is depicted on the right

33
00:01:18,960 --> 00:01:23,520
usually there is a big loop that

34
00:01:21,040 --> 00:01:26,240
repeatedly gets the next instruction to

35
00:01:23,520 --> 00:01:27,840
execute from the target program and then

36
00:01:26,240 --> 00:01:28,720
switches based on the type of

37
00:01:27,840 --> 00:01:30,560
instruction

38
00:01:28,720 --> 00:01:31,759
in this case the first instruction is a

39
00:01:30,560 --> 00:01:34,720
left shift

40
00:01:31,759 --> 00:01:35,920
so it would perform two operations it

41
00:01:34,720 --> 00:01:38,079
would

42
00:01:35,920 --> 00:01:39,200
compute the concrete result of the

43
00:01:38,079 --> 00:01:41,360
operation

44
00:01:39,200 --> 00:01:44,240
and also it would build a symbolic

45
00:01:41,360 --> 00:01:47,759
expression representing this computation

46
00:01:44,240 --> 00:01:49,919
for use in reasoning

47
00:01:47,759 --> 00:01:51,439
now we know from experience with

48
00:01:49,920 --> 00:01:53,840
programming languages that

49
00:01:51,439 --> 00:01:54,960
interpretation is typically slower than

50
00:01:53,840 --> 00:01:57,360
compilation

51
00:01:54,960 --> 00:01:59,439
so the idea of simcc is to compile

52
00:01:57,360 --> 00:02:02,000
symbolic execution capabilities

53
00:01:59,439 --> 00:02:04,398
into binaries instead of interpreting

54
00:02:02,000 --> 00:02:06,840
the target programs

55
00:02:04,399 --> 00:02:08,479
let's look at the same example with sim

56
00:02:06,840 --> 00:02:10,878
cc

57
00:02:08,479 --> 00:02:12,800
simcc would instrument the target

58
00:02:10,878 --> 00:02:14,799
program at compile time

59
00:02:12,800 --> 00:02:15,920
inserting a number of additional

60
00:02:14,800 --> 00:02:17,360
instructions

61
00:02:15,920 --> 00:02:18,799
the marked blocks are the new

62
00:02:17,360 --> 00:02:19,680
instructions and you can see that

63
00:02:18,800 --> 00:02:22,800
between them

64
00:02:19,680 --> 00:02:23,599
we still have the original code what we

65
00:02:22,800 --> 00:02:26,239
insert

66
00:02:23,599 --> 00:02:26,799
is calls to a runtime support library

67
00:02:26,239 --> 00:02:29,120
that

68
00:02:26,800 --> 00:02:32,959
builds up symbolic expressions and

69
00:02:29,120 --> 00:02:32,959
interacts with the smt solver

70
00:02:33,280 --> 00:02:38,879
so how did we implement this simcc

71
00:02:36,800 --> 00:02:41,120
consists of two core parts

72
00:02:38,879 --> 00:02:43,120
one is a compiler pass to insert the

73
00:02:41,120 --> 00:02:44,959
instrumentation at compile time

74
00:02:43,120 --> 00:02:47,040
and the other one is a runtime support

75
00:02:44,959 --> 00:02:49,040
library that interacts with the smt

76
00:02:47,040 --> 00:02:51,920
solver

77
00:02:49,040 --> 00:02:54,959
the pass is built on top of llvm which

78
00:02:51,920 --> 00:02:58,399
enables us to easily integrate with any

79
00:02:54,959 --> 00:03:00,640
compiler that is based on llvm

80
00:02:58,400 --> 00:03:03,120
and also it makes us independent of the

81
00:03:00,640 --> 00:03:05,679
target cpu architecture because llvm

82
00:03:03,120 --> 00:03:07,599
supports most common architectures

83
00:03:05,680 --> 00:03:09,680
and the source language as long as there

84
00:03:07,599 --> 00:03:11,839
is an lvm based compiler

85
00:03:09,680 --> 00:03:13,360
the current prototype integrates with

86
00:03:11,840 --> 00:03:16,400
clang so we support

87
00:03:13,360 --> 00:03:19,680
c and c plus code

88
00:03:16,400 --> 00:03:22,560
the runtime library is responsible for

89
00:03:19,680 --> 00:03:25,360
creating symbolic expressions and using

90
00:03:22,560 --> 00:03:27,920
them to interact with the smt solver

91
00:03:25,360 --> 00:03:29,920
in simc we have two options we have what

92
00:03:27,920 --> 00:03:30,640
we call the simple backend which is just

93
00:03:29,920 --> 00:03:33,359
a wrapper

94
00:03:30,640 --> 00:03:34,238
around z3 the smt solver from microsoft

95
00:03:33,360 --> 00:03:37,280
research

96
00:03:34,239 --> 00:03:40,400
and we have the qsyn backend which just

97
00:03:37,280 --> 00:03:43,280
reuses code from qsym another

98
00:03:40,400 --> 00:03:44,319
implementation of symbolic execution

99
00:03:43,280 --> 00:03:46,480
because

100
00:03:44,319 --> 00:03:47,920
the code for building expressions and

101
00:03:46,480 --> 00:03:50,640
talking to the solver

102
00:03:47,920 --> 00:03:52,480
is not the focus so we just reuse what

103
00:03:50,640 --> 00:03:55,920
already works

104
00:03:52,480 --> 00:03:56,879
qsim is interesting to look at in its

105
00:03:55,920 --> 00:03:59,760
own right

106
00:03:56,879 --> 00:04:01,760
it is not an interpreter-based approach

107
00:03:59,760 --> 00:04:03,120
it was presented at this very conference

108
00:04:01,760 --> 00:04:06,319
two years ago

109
00:04:03,120 --> 00:04:08,319
and its novel approach uses dynamic

110
00:04:06,319 --> 00:04:09,679
binary instrumentation for symbolic

111
00:04:08,319 --> 00:04:12,560
execution

112
00:04:09,680 --> 00:04:14,959
the way this works is that qsim rewrites

113
00:04:12,560 --> 00:04:17,199
the target program at runtime

114
00:04:14,959 --> 00:04:18,959
inserting calls to the runtime support

115
00:04:17,199 --> 00:04:20,959
library

116
00:04:18,959 --> 00:04:23,919
this has the advantage that it is much

117
00:04:20,959 --> 00:04:26,240
faster than interpreter-based approaches

118
00:04:23,919 --> 00:04:28,000
and also it is suitable for the analysis

119
00:04:26,240 --> 00:04:32,479
of binaries where source code is not

120
00:04:28,000 --> 00:04:34,880
available however rewriting is still

121
00:04:32,479 --> 00:04:36,960
less efficient than compiling symbolic

122
00:04:34,880 --> 00:04:38,560
execution into the program as we will

123
00:04:36,960 --> 00:04:41,680
see shortly

124
00:04:38,560 --> 00:04:43,600
and qsim works at the binary level

125
00:04:41,680 --> 00:04:44,720
which means that it has to implement

126
00:04:43,600 --> 00:04:47,840
symbolic handling

127
00:04:44,720 --> 00:04:49,919
for each x86 instruction

128
00:04:47,840 --> 00:04:53,280
so parting it to another cpu

129
00:04:49,919 --> 00:04:55,919
architecture is a non-trivial task

130
00:04:53,280 --> 00:04:58,320
to recap simc compiles symbolic

131
00:04:55,919 --> 00:04:59,039
execution capabilities into the target

132
00:04:58,320 --> 00:05:01,520
program

133
00:04:59,040 --> 00:05:02,880
while most other approaches interpret

134
00:05:01,520 --> 00:05:04,880
the target program

135
00:05:02,880 --> 00:05:06,960
and qsym uses dynamic binary

136
00:05:04,880 --> 00:05:09,919
instrumentation

137
00:05:06,960 --> 00:05:11,919
now let's evaluate simcc we performed

138
00:05:09,919 --> 00:05:14,320
two sets of experiments one on a

139
00:05:11,919 --> 00:05:15,840
benchmark data set and one on real world

140
00:05:14,320 --> 00:05:17,840
programs

141
00:05:15,840 --> 00:05:18,960
let's start with the benchmark the goal

142
00:05:17,840 --> 00:05:20,960
here is to

143
00:05:18,960 --> 00:05:22,479
perform experiments in a highly

144
00:05:20,960 --> 00:05:24,880
controlled environment

145
00:05:22,479 --> 00:05:25,680
and for that we used the darpa cgc

146
00:05:24,880 --> 00:05:28,080
programs

147
00:05:25,680 --> 00:05:29,280
and we performed concolic execution with

148
00:05:28,080 --> 00:05:31,840
fixed inputs

149
00:05:29,280 --> 00:05:34,400
this has two important consequences by

150
00:05:31,840 --> 00:05:36,880
fixing the inputs we also fix the path

151
00:05:34,400 --> 00:05:38,000
that we take through the target code and

152
00:05:36,880 --> 00:05:40,159
concolic execution

153
00:05:38,000 --> 00:05:42,479
means that we just perform one single

154
00:05:40,160 --> 00:05:44,720
execution per target program

155
00:05:42,479 --> 00:05:45,758
and at each branch that we do not take

156
00:05:44,720 --> 00:05:50,000
we just generate

157
00:05:45,759 --> 00:05:51,919
a new input we run the experiments on

158
00:05:50,000 --> 00:05:53,120
recent hardware you can find the details

159
00:05:51,919 --> 00:05:55,599
in the paper

160
00:05:53,120 --> 00:05:56,319
and we allowed 30 minutes for each

161
00:05:55,600 --> 00:06:00,960
individual

162
00:05:56,319 --> 00:06:04,000
execution we compared simcicc with cli

163
00:06:00,960 --> 00:06:05,758
and with qsyn we excluded s2e because it

164
00:06:04,000 --> 00:06:06,000
is very similar to cli in the aspects

165
00:06:05,759 --> 00:06:09,039
that

166
00:06:06,000 --> 00:06:11,039
matter for us and we excluded anger

167
00:06:09,039 --> 00:06:13,280
because while it is very flexible and

168
00:06:11,039 --> 00:06:16,240
scriptable it is not optimized for

169
00:06:13,280 --> 00:06:18,318
execution speed

170
00:06:16,240 --> 00:06:20,080
in the first experiment we performed

171
00:06:18,319 --> 00:06:22,319
fully concrete execution

172
00:06:20,080 --> 00:06:23,359
meaning that while we ran the target

173
00:06:22,319 --> 00:06:25,840
programs in

174
00:06:23,360 --> 00:06:29,600
the symbolic execution engine we did not

175
00:06:25,840 --> 00:06:31,919
mark any input data as symbolic

176
00:06:29,600 --> 00:06:33,680
in the figure you can see execution time

177
00:06:31,919 --> 00:06:37,039
on a logarithmic axis

178
00:06:33,680 --> 00:06:39,759
and we see that simcc executes programs

179
00:06:37,039 --> 00:06:40,719
almost as fast as uninstrumented

180
00:06:39,759 --> 00:06:43,919
programs

181
00:06:40,720 --> 00:06:47,360
so the slowdown factor at the median

182
00:06:43,919 --> 00:06:48,000
is 1.5 cusim and klee in contrast have

183
00:06:47,360 --> 00:06:51,120
much higher

184
00:06:48,000 --> 00:06:53,840
slowdown factors in the next

185
00:06:51,120 --> 00:06:54,160
experiment we actually marked input data

186
00:06:53,840 --> 00:06:56,080
as

187
00:06:54,160 --> 00:06:58,400
symbolic so this time we let the

188
00:06:56,080 --> 00:06:59,758
symbolic execution engines do all their

189
00:06:58,400 --> 00:07:02,960
reasoning and generate

190
00:06:59,759 --> 00:07:05,599
new program inputs

191
00:07:02,960 --> 00:07:06,799
now execution time is dominated by smt

192
00:07:05,599 --> 00:07:09,280
solving and

193
00:07:06,800 --> 00:07:10,319
this reasoning but we can see that the

194
00:07:09,280 --> 00:07:12,960
speed advantage

195
00:07:10,319 --> 00:07:14,080
that simc gains from its compilation

196
00:07:12,960 --> 00:07:17,840
based approach

197
00:07:14,080 --> 00:07:17,840
still carries over

198
00:07:18,080 --> 00:07:24,400
next we evaluated code coverage

199
00:07:21,199 --> 00:07:26,720
after concolic execution we used all the

200
00:07:24,400 --> 00:07:27,280
newly generated test inputs and measured

201
00:07:26,720 --> 00:07:30,000
their

202
00:07:27,280 --> 00:07:32,400
cumulative code coverage with afl's

203
00:07:30,000 --> 00:07:35,599
coverage metric

204
00:07:32,400 --> 00:07:38,719
in the figure you can see one square per

205
00:07:35,599 --> 00:07:39,599
target program and blue color means that

206
00:07:38,720 --> 00:07:42,319
sim cc

207
00:07:39,599 --> 00:07:43,520
found more unique paths on this program

208
00:07:42,319 --> 00:07:46,400
while red color

209
00:07:43,520 --> 00:07:46,799
means that cli found more we can see

210
00:07:46,400 --> 00:07:50,159
that

211
00:07:46,800 --> 00:07:51,120
sim cc's coverage here is significantly

212
00:07:50,160 --> 00:07:53,599
higher

213
00:07:51,120 --> 00:07:55,280
and in comparison with q sim we find

214
00:07:53,599 --> 00:07:57,599
that they are roughly equal

215
00:07:55,280 --> 00:07:58,638
this is to be expected because the

216
00:07:57,599 --> 00:08:01,680
reasoning

217
00:07:58,639 --> 00:08:05,039
code that we use is the same simscc

218
00:08:01,680 --> 00:08:08,639
reuses the solver code

219
00:08:05,039 --> 00:08:11,440
from qsim note however that simcc

220
00:08:08,639 --> 00:08:13,199
achieves this same level of coverage in

221
00:08:11,440 --> 00:08:16,160
significantly less time because it

222
00:08:13,199 --> 00:08:16,160
executes faster

223
00:08:16,400 --> 00:08:22,560
let's move to the real world experiments

224
00:08:19,520 --> 00:08:24,400
here we wanted to show that simc scales

225
00:08:22,560 --> 00:08:27,199
to real world software

226
00:08:24,400 --> 00:08:29,840
and for that we picked three open source

227
00:08:27,199 --> 00:08:31,280
projects open jpeg glib archive and tcp

228
00:08:29,840 --> 00:08:33,760
dump

229
00:08:31,280 --> 00:08:34,880
we performed hybrid fuzzing on them

230
00:08:33,760 --> 00:08:38,159
meaning that we ran

231
00:08:34,880 --> 00:08:41,360
afl in concert with

232
00:08:38,159 --> 00:08:44,080
symbolic execution comparing simcc

233
00:08:41,360 --> 00:08:46,640
and qsim this is the same approach as

234
00:08:44,080 --> 00:08:49,120
was used with driller and with qsyn

235
00:08:46,640 --> 00:08:50,880
and for comparability we also used the

236
00:08:49,120 --> 00:08:54,240
same experimental setup

237
00:08:50,880 --> 00:08:57,920
meaning that we ran two afl processes

238
00:08:54,240 --> 00:09:02,000
one primary one secondary and one sim cc

239
00:08:57,920 --> 00:09:04,000
or qsim process again we ran on recent

240
00:09:02,000 --> 00:09:04,399
hardware and we used two gigabytes of

241
00:09:04,000 --> 00:09:07,440
ram

242
00:09:04,399 --> 00:09:10,880
per cpu core

243
00:09:07,440 --> 00:09:11,760
we let the analysis run for 24 hours on

244
00:09:10,880 --> 00:09:14,880
each program

245
00:09:11,760 --> 00:09:17,439
and we performed 30 iterations of each

246
00:09:14,880 --> 00:09:20,000
experiment

247
00:09:17,440 --> 00:09:21,200
this time we had to exclude cleave from

248
00:09:20,000 --> 00:09:22,959
the benchmark

249
00:09:21,200 --> 00:09:25,360
because each of the target programs

250
00:09:22,959 --> 00:09:27,760
contained instructions that it did not

251
00:09:25,360 --> 00:09:27,760
support

252
00:09:27,920 --> 00:09:32,399
in the results you see coverage plotted

253
00:09:31,200 --> 00:09:35,760
over time

254
00:09:32,399 --> 00:09:38,160
and we observe that simcc

255
00:09:35,760 --> 00:09:39,680
achieves higher coverage than qsim in

256
00:09:38,160 --> 00:09:42,079
all three cases

257
00:09:39,680 --> 00:09:44,319
and it is statistically significant in

258
00:09:42,080 --> 00:09:47,600
all cases

259
00:09:44,320 --> 00:09:50,320
also during our experiments simcc

260
00:09:47,600 --> 00:09:51,600
found two new vulnerabilities on open

261
00:09:50,320 --> 00:09:54,640
jpeg

262
00:09:51,600 --> 00:09:57,760
now what is interesting is to observe

263
00:09:54,640 --> 00:09:58,880
that the advantage in code coverage that

264
00:09:57,760 --> 00:10:02,240
we achieve

265
00:09:58,880 --> 00:10:07,519
is correlated with the speed

266
00:10:02,240 --> 00:10:09,839
gain so if we plot execution speeds

267
00:10:07,519 --> 00:10:10,560
for each of the target programs we see

268
00:10:09,839 --> 00:10:14,240
that

269
00:10:10,560 --> 00:10:15,359
the speed advantage that simcc has over

270
00:10:14,240 --> 00:10:17,120
cuesim

271
00:10:15,360 --> 00:10:19,279
is correlated with the coverage

272
00:10:17,120 --> 00:10:19,680
difference supporting our hypothesis

273
00:10:19,279 --> 00:10:23,120
that

274
00:10:19,680 --> 00:10:26,160
accelerating symbolic execution also

275
00:10:23,120 --> 00:10:30,000
improves code coverage and finally its

276
00:10:26,160 --> 00:10:30,000
ability to discover bugs

277
00:10:30,160 --> 00:10:34,399
in conclusion we have shown that

278
00:10:32,320 --> 00:10:35,600
compilation makes symbolic execution

279
00:10:34,399 --> 00:10:38,320
more efficient

280
00:10:35,600 --> 00:10:40,079
and to recap simc compiles symbolic

281
00:10:38,320 --> 00:10:42,320
execution into binaries

282
00:10:40,079 --> 00:10:43,680
it is orders of magnitude faster than

283
00:10:42,320 --> 00:10:46,240
the state of the art

284
00:10:43,680 --> 00:10:48,640
and it reaches significantly more code

285
00:10:46,240 --> 00:10:50,560
coverage per time

286
00:10:48,640 --> 00:10:52,160
if you have questions or feedback please

287
00:10:50,560 --> 00:10:54,319
feel free to send us email

288
00:10:52,160 --> 00:10:56,480
and please do check out the simcc source

289
00:10:54,320 --> 00:10:57,279
code and documentation that are freely

290
00:10:56,480 --> 00:11:01,839
available

291
00:10:57,279 --> 00:11:01,839
thank you

292
00:11:07,519 --> 00:11:09,600
you

