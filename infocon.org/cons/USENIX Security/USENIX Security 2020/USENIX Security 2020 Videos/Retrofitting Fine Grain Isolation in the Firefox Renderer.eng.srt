1
00:00:08,720 --> 00:00:11,280
hello everyone

2
00:00:09,679 --> 00:00:12,799
my name is shravan and today i'm going

3
00:00:11,280 --> 00:00:14,480
to tell you about rl box

4
00:00:12,799 --> 00:00:18,080
a framework we built to sandbox

5
00:00:14,480 --> 00:00:20,320
third-party libraries in firefox

6
00:00:18,080 --> 00:00:22,000
so browsers are extremely important we

7
00:00:20,320 --> 00:00:24,240
use browsers for everything

8
00:00:22,000 --> 00:00:26,240
from messaging working on presentations

9
00:00:24,240 --> 00:00:27,598
or perhaps even attending this very

10
00:00:26,240 --> 00:00:30,000
video conference

11
00:00:27,599 --> 00:00:33,040
browsers thus need to support a very

12
00:00:30,000 --> 00:00:34,719
rich set of features and media

13
00:00:33,040 --> 00:00:36,160
but browser vendors cannot simply

14
00:00:34,719 --> 00:00:37,120
implement all these features from

15
00:00:36,160 --> 00:00:38,639
scratch

16
00:00:37,120 --> 00:00:40,480
instead they rely on third party

17
00:00:38,640 --> 00:00:43,200
libraries to support the wide variety of

18
00:00:40,480 --> 00:00:45,038
audio video and image formats

19
00:00:43,200 --> 00:00:46,879
in practice this means that browsers use

20
00:00:45,039 --> 00:00:48,320
and trust dozens of third-party media

21
00:00:46,879 --> 00:00:52,239
libraries from lib jpeg

22
00:00:48,320 --> 00:00:52,239
libtioura lip opus etc

23
00:00:52,399 --> 00:00:55,760
unfortunately a bug in any one of these

24
00:00:54,399 --> 00:00:57,680
media libraries could potentially

25
00:00:55,760 --> 00:00:58,800
compromise the security of the entire

26
00:00:57,680 --> 00:01:00,640
browser

27
00:00:58,800 --> 00:01:02,239
we've seen this at several pawn to homes

28
00:01:00,640 --> 00:01:04,559
at this point but what's more

29
00:01:02,239 --> 00:01:06,158
what's worse is that attackers use such

30
00:01:04,559 --> 00:01:09,119
browser bugs to target people

31
00:01:06,159 --> 00:01:09,119
and steal information

32
00:01:09,360 --> 00:01:13,600
in response to this browser vendors are

33
00:01:11,439 --> 00:01:16,639
mitigating the damage from such bugs

34
00:01:13,600 --> 00:01:18,479
with core screen renderer isolation

35
00:01:16,640 --> 00:01:20,960
by placing the renderer the code that

36
00:01:18,479 --> 00:01:23,679
handles untrusted content like images

37
00:01:20,960 --> 00:01:25,439
in a separate low privilege process they

38
00:01:23,680 --> 00:01:27,360
ensure that bugs and media libraries

39
00:01:25,439 --> 00:01:30,479
can't compromise the rest of the browser

40
00:01:27,360 --> 00:01:31,600
or system but remember everything

41
00:01:30,479 --> 00:01:34,560
important is on the web

42
00:01:31,600 --> 00:01:36,240
and so browsers also start have started

43
00:01:34,560 --> 00:01:36,799
isolating different sites from each

44
00:01:36,240 --> 00:01:39,360
other

45
00:01:36,799 --> 00:01:41,280
for example google.com is isolated from

46
00:01:39,360 --> 00:01:43,119
zoom.us

47
00:01:41,280 --> 00:01:44,960
renderer and site isolation are super

48
00:01:43,119 --> 00:01:46,960
important but they don't completely

49
00:01:44,960 --> 00:01:48,798
eliminate the problem

50
00:01:46,960 --> 00:01:50,240
there are a couple of reasons for this

51
00:01:48,799 --> 00:01:53,040
first websites import

52
00:01:50,240 --> 00:01:54,798
lots of resources from different origins

53
00:01:53,040 --> 00:01:57,600
in fact 93

54
00:01:54,799 --> 00:01:58,880
of the alexa top 500 sites load media

55
00:01:57,600 --> 00:02:01,360
largely gfx

56
00:01:58,880 --> 00:02:03,199
cross-origin as we see in this graph

57
00:02:01,360 --> 00:02:04,960
this means that a bug in lib jpeg could

58
00:02:03,200 --> 00:02:07,439
be exploited by a cross-origin or

59
00:02:04,960 --> 00:02:08,959
cross-site attacker

60
00:02:07,439 --> 00:02:10,639
even on sites that don't load

61
00:02:08,959 --> 00:02:12,879
cross-origin resources

62
00:02:10,639 --> 00:02:15,279
an attacker could find a way to host a

63
00:02:12,879 --> 00:02:17,519
malicious media file on the same origin

64
00:02:15,280 --> 00:02:19,360
for example by sharing a malicious media

65
00:02:17,520 --> 00:02:20,800
file on google drive

66
00:02:19,360 --> 00:02:23,200
an attacker could compromise the

67
00:02:20,800 --> 00:02:24,160
renderer process which in turn permits

68
00:02:23,200 --> 00:02:27,519
access to the

69
00:02:24,160 --> 00:02:27,520
victims google drive files

70
00:02:28,160 --> 00:02:32,000
what we're seeing today is that

71
00:02:29,840 --> 00:02:33,840
untrusted media content can be used

72
00:02:32,000 --> 00:02:35,040
to compromise the renderer by exploiting

73
00:02:33,840 --> 00:02:38,640
bugs in libraries like

74
00:02:35,040 --> 00:02:40,879
jpeg to address to address this problem

75
00:02:38,640 --> 00:02:42,720
we need fine grain isolation we need to

76
00:02:40,879 --> 00:02:45,120
isolate lip jpeg

77
00:02:42,720 --> 00:02:48,640
to ensure that a bug in lip jpeg cannot

78
00:02:45,120 --> 00:02:48,640
be used to compromise the render

79
00:02:49,280 --> 00:02:52,400
but we already know how to do this step

80
00:02:52,000 --> 00:02:53,920
one

81
00:02:52,400 --> 00:02:55,760
pick an isolation or sandboxing

82
00:02:53,920 --> 00:02:56,879
mechanism for example you can use a

83
00:02:55,760 --> 00:02:58,799
separate process

84
00:02:56,879 --> 00:03:00,319
or an in-process software-based fault

85
00:02:58,800 --> 00:03:01,760
isolation such as native client or

86
00:03:00,319 --> 00:03:04,319
webassembly

87
00:03:01,760 --> 00:03:06,399
step two place lib jpeg in the sandbox

88
00:03:04,319 --> 00:03:07,359
which ensures it can only access sandbox

89
00:03:06,400 --> 00:03:09,360
memory

90
00:03:07,360 --> 00:03:11,040
in other words let's refactor the

91
00:03:09,360 --> 00:03:12,319
browser to the architecture shown on the

92
00:03:11,040 --> 00:03:14,319
right

93
00:03:12,319 --> 00:03:15,599
in this model each library has its own

94
00:03:14,319 --> 00:03:18,879
isolated memory

95
00:03:15,599 --> 00:03:23,280
separate from the rest of the browser so

96
00:03:18,879 --> 00:03:25,040
are we done unfortunately no

97
00:03:23,280 --> 00:03:27,120
and i and this is because isolation is

98
00:03:25,040 --> 00:03:30,640
not the only concern

99
00:03:27,120 --> 00:03:31,680
first firefox was written to trust lib

100
00:03:30,640 --> 00:03:33,359
jpeg

101
00:03:31,680 --> 00:03:35,760
this means firefox code does not

102
00:03:33,360 --> 00:03:38,000
sanitize any data from libget

103
00:03:35,760 --> 00:03:39,679
as we will see on the next slide this

104
00:03:38,000 --> 00:03:40,480
can easily be used to compromise the

105
00:03:39,680 --> 00:03:44,480
renderer

106
00:03:40,480 --> 00:03:46,640
despite the isolation of jpeg second

107
00:03:44,480 --> 00:03:48,640
isolation mechanisms like webassembly

108
00:03:46,640 --> 00:03:49,839
introduce abi differences

109
00:03:48,640 --> 00:03:51,760
if you don't account for these

110
00:03:49,840 --> 00:03:53,519
differences the end result is

111
00:03:51,760 --> 00:03:55,840
at best the crash and more likely a

112
00:03:53,519 --> 00:03:57,840
compromise

113
00:03:55,840 --> 00:04:00,080
finally the data structures and control

114
00:03:57,840 --> 00:04:02,720
flow in firefox and lip jpeg are

115
00:04:00,080 --> 00:04:04,879
tightly coupled decoupling this is error

116
00:04:02,720 --> 00:04:07,120
prone and tedious

117
00:04:04,879 --> 00:04:08,959
to give you a flavor of why adjust

118
00:04:07,120 --> 00:04:11,120
isolation is not enough let's look at

119
00:04:08,959 --> 00:04:13,120
some code

120
00:04:11,120 --> 00:04:14,879
this code uses lib jpeg to parse and

121
00:04:13,120 --> 00:04:16,720
display a jpeg image

122
00:04:14,879 --> 00:04:19,358
now this is not real firefox code

123
00:04:16,720 --> 00:04:20,560
firefox's use of lib jpeg is way more

124
00:04:19,358 --> 00:04:22,638
complicated

125
00:04:20,560 --> 00:04:25,120
this is simpler but even so don't worry

126
00:04:22,639 --> 00:04:26,960
about understanding it in full just yet

127
00:04:25,120 --> 00:04:28,720
instead what we want to see is how an

128
00:04:26,960 --> 00:04:32,159
attacker can exploit this code

129
00:04:28,720 --> 00:04:34,800
even with a perfectly isolated lip jpeg

130
00:04:32,160 --> 00:04:37,120
first observe that jpeg image is a data

131
00:04:34,800 --> 00:04:41,280
structure that is modified by lib jpeg

132
00:04:37,120 --> 00:04:43,360
when we call jpeg read header second

133
00:04:41,280 --> 00:04:45,198
fields from this data structure are used

134
00:04:43,360 --> 00:04:46,400
to compute the size of the mem copy

135
00:04:45,199 --> 00:04:48,479
shown here

136
00:04:46,400 --> 00:04:50,000
an attacker can essentially use this as

137
00:04:48,479 --> 00:04:52,320
a right gadget to compromise the

138
00:04:50,000 --> 00:04:54,800
renderer

139
00:04:52,320 --> 00:04:56,479
this small example is easy to fix but in

140
00:04:54,800 --> 00:04:58,880
general we found that doing this

141
00:04:56,479 --> 00:05:01,919
manually for the huge firefox code base

142
00:04:58,880 --> 00:05:02,560
is painful and easy to mess up imagine

143
00:05:01,919 --> 00:05:05,758
doing this for

144
00:05:02,560 --> 00:05:06,720
dozens of libraries to precisely address

145
00:05:05,759 --> 00:05:10,000
this problem

146
00:05:06,720 --> 00:05:12,800
we built rl box

147
00:05:10,000 --> 00:05:14,080
rl box the autobox framework is a

148
00:05:12,800 --> 00:05:16,800
c-press plus library

149
00:05:14,080 --> 00:05:18,960
that does two things one it abstracts

150
00:05:16,800 --> 00:05:22,160
the underlying isolation mechanism

151
00:05:18,960 --> 00:05:23,440
whether it is a process isolation or sfi

152
00:05:22,160 --> 00:05:26,240
based isolation

153
00:05:23,440 --> 00:05:27,680
and two it mediates all application

154
00:05:26,240 --> 00:05:30,880
sandbox communication

155
00:05:27,680 --> 00:05:31,360
as shown in this figure it does this by

156
00:05:30,880 --> 00:05:35,360
marking

157
00:05:31,360 --> 00:05:37,280
all data out of the sandbox as data

158
00:05:35,360 --> 00:05:39,680
by marking data from the sandboxes

159
00:05:37,280 --> 00:05:42,080
tainted rlbox can ensure

160
00:05:39,680 --> 00:05:42,880
that unsafe data from the sandbox can

161
00:05:42,080 --> 00:05:45,758
only be used

162
00:05:42,880 --> 00:05:47,919
after validation this is also key to

163
00:05:45,759 --> 00:05:49,600
automatically bridging abi differences

164
00:05:47,919 --> 00:05:52,560
and automatically performing certain

165
00:05:49,600 --> 00:05:54,240
security validations

166
00:05:52,560 --> 00:05:55,919
we use theater types for many more

167
00:05:54,240 --> 00:05:57,520
things but today i'm going to focus just

168
00:05:55,919 --> 00:06:00,400
on these two

169
00:05:57,520 --> 00:06:03,359
so let's see this in action this is the

170
00:06:00,400 --> 00:06:05,198
same jpeg parser code we saw before

171
00:06:03,360 --> 00:06:07,759
this time let's actually see what this

172
00:06:05,199 --> 00:06:09,759
code does

173
00:06:07,759 --> 00:06:11,680
the first three lines simply set up jpeg

174
00:06:09,759 --> 00:06:15,280
data structures and initializes them

175
00:06:11,680 --> 00:06:16,960
with a call to create decompress

176
00:06:15,280 --> 00:06:18,719
the next two lines set up the input

177
00:06:16,960 --> 00:06:19,440
source which for a browser would be

178
00:06:18,720 --> 00:06:23,039
bytes from an

179
00:06:19,440 --> 00:06:23,039
uh from a http network request

180
00:06:23,120 --> 00:06:27,759
after this we use read header to parse

181
00:06:25,280 --> 00:06:30,318
the dimensions of the image

182
00:06:27,759 --> 00:06:30,960
finally we allocate an output buffer

183
00:06:30,319 --> 00:06:32,479
perform

184
00:06:30,960 --> 00:06:34,159
the call to parse the jpeg which is

185
00:06:32,479 --> 00:06:35,758
alighted here

186
00:06:34,160 --> 00:06:38,160
and then copy the data to the screen

187
00:06:35,759 --> 00:06:39,919
output buffer

188
00:06:38,160 --> 00:06:42,160
now that we know what this code does

189
00:06:39,919 --> 00:06:45,840
let's use our box to safely decouple and

190
00:06:42,160 --> 00:06:48,400
isolate lib.jpg from firefox

191
00:06:45,840 --> 00:06:50,880
for this first let's create an rbox

192
00:06:48,400 --> 00:06:50,880
sandbox

193
00:06:51,280 --> 00:06:57,758
next we want to invoke lib.jpg functions

194
00:06:54,639 --> 00:06:59,840
through this sandbox and this is also

195
00:06:57,759 --> 00:07:01,840
straightforward

196
00:06:59,840 --> 00:07:03,679
at this point let's try to compile this

197
00:07:01,840 --> 00:07:06,638
code

198
00:07:03,680 --> 00:07:08,160
when we do we get an error saying that

199
00:07:06,639 --> 00:07:10,319
jpeg image

200
00:07:08,160 --> 00:07:12,080
the jpeg image data structure pass then

201
00:07:10,319 --> 00:07:14,400
must be tainted

202
00:07:12,080 --> 00:07:15,919
and this makes sense lib jpeg cannot

203
00:07:14,400 --> 00:07:17,599
access data structures that are in

204
00:07:15,919 --> 00:07:19,680
application memory

205
00:07:17,599 --> 00:07:21,680
we must instead allocate the jpeg image

206
00:07:19,680 --> 00:07:23,840
data structure in sandbox memory so that

207
00:07:21,680 --> 00:07:26,880
lib jpeg can actually access this

208
00:07:23,840 --> 00:07:28,799
so let's make this change while changing

209
00:07:26,880 --> 00:07:30,880
the allocation of jpeg image

210
00:07:28,800 --> 00:07:33,440
we also rename it to p underscore jpeg

211
00:07:30,880 --> 00:07:35,680
image for convenience

212
00:07:33,440 --> 00:07:37,199
we now use this new variable we created

213
00:07:35,680 --> 00:07:40,880
to fix the compiler error

214
00:07:37,199 --> 00:07:42,319
and try compiling again we now get an

215
00:07:40,880 --> 00:07:43,680
error on a different line that we need

216
00:07:42,319 --> 00:07:46,160
to fix

217
00:07:43,680 --> 00:07:47,199
in this manner oil box forces us to go

218
00:07:46,160 --> 00:07:49,759
through compilation and

219
00:07:47,199 --> 00:07:50,960
error fixing cycles to save some time

220
00:07:49,759 --> 00:07:53,280
let's jump ahead

221
00:07:50,960 --> 00:07:55,840
after fixing several errors our code

222
00:07:53,280 --> 00:07:57,280
looks like this

223
00:07:55,840 --> 00:07:58,878
there are three interesting things in

224
00:07:57,280 --> 00:08:01,599
this code

225
00:07:58,879 --> 00:08:02,560
first we underscore jpeg image is a data

226
00:08:01,599 --> 00:08:04,400
structure owned

227
00:08:02,560 --> 00:08:06,400
by the lib jpeg sandbox and thus

228
00:08:04,400 --> 00:08:08,400
potentially has a different api

229
00:08:06,400 --> 00:08:10,719
from the rest of firefox but

230
00:08:08,400 --> 00:08:13,198
conveniently robots automatically adjust

231
00:08:10,720 --> 00:08:15,680
for these avi differences

232
00:08:13,199 --> 00:08:17,520
second when dereferencing a pointer

233
00:08:15,680 --> 00:08:20,160
controlled by the sandbox

234
00:08:17,520 --> 00:08:20,878
our box artist automatically adds bounce

235
00:08:20,160 --> 00:08:23,840
checks

236
00:08:20,879 --> 00:08:24,720
so we don't have to worry about this

237
00:08:23,840 --> 00:08:27,280
third

238
00:08:24,720 --> 00:08:28,560
outer box forces the size variable to be

239
00:08:27,280 --> 00:08:32,559
marked as tainted

240
00:08:28,560 --> 00:08:32,559
since it is influenced by lip jpeg data

241
00:08:32,719 --> 00:08:36,240
now if we try compiling this we get a

242
00:08:35,519 --> 00:08:38,000
new error

243
00:08:36,240 --> 00:08:40,320
indicating that we are using a tainted

244
00:08:38,000 --> 00:08:42,080
value for memcapi

245
00:08:40,320 --> 00:08:44,240
this prevents the security vulnerability

246
00:08:42,080 --> 00:08:47,519
we talked about earlier

247
00:08:44,240 --> 00:08:50,320
and to fix this we have to validate size

248
00:08:47,519 --> 00:08:51,200
and remove the date before we use this

249
00:08:50,320 --> 00:08:55,440
we do this

250
00:08:51,200 --> 00:08:57,680
with copy and verify while our box tells

251
00:08:55,440 --> 00:08:59,360
us that we need to use copy and verify

252
00:08:57,680 --> 00:09:01,839
we still need to write the actual

253
00:08:59,360 --> 00:09:03,920
sanitization check ourselves

254
00:09:01,839 --> 00:09:06,160
so what is the standardization check we

255
00:09:03,920 --> 00:09:08,560
need to write here

256
00:09:06,160 --> 00:09:10,240
well we just need to ensure that size is

257
00:09:08,560 --> 00:09:13,359
less than the output buffer length

258
00:09:10,240 --> 00:09:13,360
so let's add this check

259
00:09:13,440 --> 00:09:16,880
if we try to compile this we now see

260
00:09:15,760 --> 00:09:20,000
that everything passes

261
00:09:16,880 --> 00:09:22,399
telling us that we're done but

262
00:09:20,000 --> 00:09:25,040
how well does all of this work on real

263
00:09:22,399 --> 00:09:25,040
code bases

264
00:09:25,120 --> 00:09:29,519
well to answer this we ported six

265
00:09:26,959 --> 00:09:31,839
libraries in the firefox code base

266
00:09:29,519 --> 00:09:32,800
in this talk i will only briefly

267
00:09:31,839 --> 00:09:35,519
summarize

268
00:09:32,800 --> 00:09:36,000
a couple parts of this evaluation the

269
00:09:35,519 --> 00:09:37,760
developer

270
00:09:36,000 --> 00:09:39,120
effort in using our box and the

271
00:09:37,760 --> 00:09:40,880
performance overhead

272
00:09:39,120 --> 00:09:43,360
the full details are of course available

273
00:09:40,880 --> 00:09:43,360
in the paper

274
00:09:44,080 --> 00:09:47,839
looking at the developer effort we found

275
00:09:46,080 --> 00:09:50,160
that with our box it only takes a few

276
00:09:47,839 --> 00:09:50,880
days to sandbox the library this is

277
00:09:50,160 --> 00:09:52,640
because

278
00:09:50,880 --> 00:09:54,880
this is because robots automatically

279
00:09:52,640 --> 00:09:57,360
performed dozens of bounce checks and

280
00:09:54,880 --> 00:09:59,120
nested api conversions for us

281
00:09:57,360 --> 00:10:00,720
and while we did have to write between 2

282
00:09:59,120 --> 00:10:02,959
and 51 data validators

283
00:10:00,720 --> 00:10:04,640
for sandbox library these validators

284
00:10:02,959 --> 00:10:07,199
were simple between two and four lines

285
00:10:04,640 --> 00:10:07,199
of code each

286
00:10:08,160 --> 00:10:12,399
measuring performance we found that our

287
00:10:10,320 --> 00:10:15,360
box minimally impacted page load times

288
00:10:12,399 --> 00:10:17,360
and peak memory usage

289
00:10:15,360 --> 00:10:20,079
i'll note that process isolation does

290
00:10:17,360 --> 00:10:22,480
not scale as well as sfi based isolation

291
00:10:20,079 --> 00:10:25,199
on some sites like espn

292
00:10:22,480 --> 00:10:27,760
and conversely sfi impacts memory the

293
00:10:25,200 --> 00:10:29,360
peak memory usage a little worse

294
00:10:27,760 --> 00:10:31,279
but this is primarily because we didn't

295
00:10:29,360 --> 00:10:35,120
optimize code page sharing

296
00:10:31,279 --> 00:10:35,120
across native client sandbox instances

297
00:10:35,279 --> 00:10:39,360
i'd like to conclude this talk with the

298
00:10:37,200 --> 00:10:41,040
most with the most exciting part of this

299
00:10:39,360 --> 00:10:43,680
work

300
00:10:41,040 --> 00:10:44,880
we've integrated our box into production

301
00:10:43,680 --> 00:10:46,719
firefox

302
00:10:44,880 --> 00:10:49,360
to sandbox several libraries using

303
00:10:46,720 --> 00:10:51,760
webassembly so if you're watching this

304
00:10:49,360 --> 00:10:52,640
on firefox on a linux or a mac computer

305
00:10:51,760 --> 00:10:55,680
your browser

306
00:10:52,640 --> 00:10:56,720
is using our box right now support for

307
00:10:55,680 --> 00:10:58,479
the windows platform

308
00:10:56,720 --> 00:11:01,120
and sandboxing of even more libraries in

309
00:10:58,480 --> 00:11:13,600
the browser is in the works

310
00:11:01,120 --> 00:11:13,600
thank you for listening

