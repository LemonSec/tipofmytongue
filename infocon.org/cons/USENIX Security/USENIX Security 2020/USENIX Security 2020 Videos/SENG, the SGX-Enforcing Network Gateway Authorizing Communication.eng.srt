1
00:00:08,639 --> 00:00:11,840
hello

2
00:00:09,519 --> 00:00:14,400
my name is fabien schwartz and i'm a phd

3
00:00:11,840 --> 00:00:16,320
candidate at the cisperhamort center

4
00:00:14,400 --> 00:00:18,400
i'm going to present joint work with my

5
00:00:16,320 --> 00:00:21,198
supervisor christian rosso to you

6
00:00:18,400 --> 00:00:22,400
which is about zheng the sjx enforcing

7
00:00:21,199 --> 00:00:24,400
network gateway

8
00:00:22,400 --> 00:00:26,080
authorizing communication from shielded

9
00:00:24,400 --> 00:00:27,680
clients

10
00:00:26,080 --> 00:00:29,919
the question we are tackling in this

11
00:00:27,680 --> 00:00:31,679
project is what are the origins of

12
00:00:29,920 --> 00:00:33,920
corporate network communication

13
00:00:31,679 --> 00:00:34,879
and how can gateway firewalls use this

14
00:00:33,920 --> 00:00:37,760
information for

15
00:00:34,880 --> 00:00:39,520
fine grade traffic control we are

16
00:00:37,760 --> 00:00:40,239
looking at a typical corporate network

17
00:00:39,520 --> 00:00:42,239
environment

18
00:00:40,239 --> 00:00:44,000
where client workstations and servers

19
00:00:42,239 --> 00:00:45,919
are segmented into disjoint

20
00:00:44,000 --> 00:00:48,000
internal sub networks that are

21
00:00:45,920 --> 00:00:50,320
interconnected via a central network

22
00:00:48,000 --> 00:00:52,640
gateway

23
00:00:50,320 --> 00:00:54,079
the gateway firewall centrally governs

24
00:00:52,640 --> 00:00:56,399
all network accesses

25
00:00:54,079 --> 00:00:58,239
and enforces network policies based on

26
00:00:56,399 --> 00:01:01,039
the connection ip addresses

27
00:00:58,239 --> 00:01:02,718
and port information for instance it

28
00:01:01,039 --> 00:01:03,359
might allow connections to the mail

29
00:01:02,719 --> 00:01:05,600
server

30
00:01:03,359 --> 00:01:07,600
or a subset of the internet or internet

31
00:01:05,600 --> 00:01:10,000
respectively

32
00:01:07,600 --> 00:01:12,240
however when internal clients become

33
00:01:10,000 --> 00:01:14,240
compromised by an attacker

34
00:01:12,240 --> 00:01:16,240
these traditional network policies are

35
00:01:14,240 --> 00:01:18,240
too coarse craned to prevent data

36
00:01:16,240 --> 00:01:19,600
exfiltration and command and control

37
00:01:18,240 --> 00:01:22,080
channels

38
00:01:19,600 --> 00:01:23,600
to resolve this problem the firewall

39
00:01:22,080 --> 00:01:24,479
must be able to distinguish between

40
00:01:23,600 --> 00:01:26,798
malicious

41
00:01:24,479 --> 00:01:29,119
and benign send applications for tight

42
00:01:26,799 --> 00:01:31,600
traffic control

43
00:01:29,119 --> 00:01:32,880
therefore our goal is to shift from

44
00:01:31,600 --> 00:01:35,119
traditional ip

45
00:01:32,880 --> 00:01:36,798
and port-based firewall policies to

46
00:01:35,119 --> 00:01:39,920
per-application policies

47
00:01:36,799 --> 00:01:40,720
to prevent unauthorized communication

48
00:01:39,920 --> 00:01:42,880
however

49
00:01:40,720 --> 00:01:44,798
the problem is secure traffic to

50
00:01:42,880 --> 00:01:45,520
application attribution is a challenging

51
00:01:44,799 --> 00:01:47,200
task

52
00:01:45,520 --> 00:01:49,600
because the user and system while they

53
00:01:47,200 --> 00:01:50,320
have several opportunities to evade and

54
00:01:49,600 --> 00:01:53,439
subvert

55
00:01:50,320 --> 00:01:55,439
traffic attribution attempts first

56
00:01:53,439 --> 00:01:56,479
meiber can defeat port and touristic

57
00:01:55,439 --> 00:01:58,559
based approaches

58
00:01:56,479 --> 00:02:01,520
by using traffic morphing techniques to

59
00:01:58,560 --> 00:02:04,479
hype in benign network communication

60
00:02:01,520 --> 00:02:06,479
second myver can eject and set into

61
00:02:04,479 --> 00:02:09,360
allow listed processes to abuse their

62
00:02:06,479 --> 00:02:11,440
trusted identities for firewall bypass

63
00:02:09,360 --> 00:02:12,640
for instance if marvel injects into a

64
00:02:11,440 --> 00:02:14,560
trusted browser

65
00:02:12,640 --> 00:02:16,399
all malicious network communication will

66
00:02:14,560 --> 00:02:16,879
be wrongly attributed to the browser

67
00:02:16,400 --> 00:02:20,560
process

68
00:02:16,879 --> 00:02:23,040
and thereby evade the firewall third

69
00:02:20,560 --> 00:02:25,280
myvac can perform a system level exploit

70
00:02:23,040 --> 00:02:28,720
to completely subvert host sensors and

71
00:02:25,280 --> 00:02:30,560
spoof application identifiers

72
00:02:28,720 --> 00:02:32,480
the bottom line is that current

73
00:02:30,560 --> 00:02:34,640
approaches fall short of providing

74
00:02:32,480 --> 00:02:36,640
secure publication policies

75
00:02:34,640 --> 00:02:38,238
because they fail to protect trusted

76
00:02:36,640 --> 00:02:39,920
applications and their traffic against

77
00:02:38,239 --> 00:02:41,920
system level attackers

78
00:02:39,920 --> 00:02:44,480
and they do not base a traffic

79
00:02:41,920 --> 00:02:46,799
attribution on precise unforgeable

80
00:02:44,480 --> 00:02:48,959
application identifiers

81
00:02:46,800 --> 00:02:50,480
in a nutshell we face the following

82
00:02:48,959 --> 00:02:52,400
threat model

83
00:02:50,480 --> 00:02:53,518
we assume the existence of on-path

84
00:02:52,400 --> 00:02:55,680
network attackers

85
00:02:53,519 --> 00:02:57,840
and allow the corporate client systems

86
00:02:55,680 --> 00:02:59,120
to be fully compromised by system level

87
00:02:57,840 --> 00:03:01,280
attackers

88
00:02:59,120 --> 00:03:03,360
on the client side we only trust the

89
00:03:01,280 --> 00:03:05,120
user and the client hardware

90
00:03:03,360 --> 00:03:07,440
and follow the classical intellect jax

91
00:03:05,120 --> 00:03:08,400
threat model and that we exclude denial

92
00:03:07,440 --> 00:03:11,440
of service

93
00:03:08,400 --> 00:03:13,599
side channel and physical attacks the

94
00:03:11,440 --> 00:03:15,519
central gateway is assumed to be fully

95
00:03:13,599 --> 00:03:18,399
trusted and we are thus staying in line

96
00:03:15,519 --> 00:03:20,720
with the common bastion host assumption

97
00:03:18,400 --> 00:03:24,000
for brevity we also treat all corporate

98
00:03:20,720 --> 00:03:26,080
server sub networks as trusted

99
00:03:24,000 --> 00:03:27,760
to enable secure traffic attribution in

100
00:03:26,080 --> 00:03:31,120
this challenging setting

101
00:03:27,760 --> 00:03:31,679
we propose zeng an sjx enforcing gateway

102
00:03:31,120 --> 00:03:34,879
servers

103
00:03:31,680 --> 00:03:36,959
coupled with a client-side runtime

104
00:03:34,879 --> 00:03:38,720
zhang's client-side runtime shields

105
00:03:36,959 --> 00:03:39,519
applications in intellect jack's

106
00:03:38,720 --> 00:03:41,359
enclaves

107
00:03:39,519 --> 00:03:44,400
and securely tunnels their network

108
00:03:41,360 --> 00:03:46,400
traffic to the perimeter firewall

109
00:03:44,400 --> 00:03:48,319
the gateway located zeng server

110
00:03:46,400 --> 00:03:50,720
cooperates with the client runtime

111
00:03:48,319 --> 00:03:52,879
to expose secure hardware rooted

112
00:03:50,720 --> 00:03:54,239
application identifiers to the parameter

113
00:03:52,879 --> 00:03:56,560
firewall

114
00:03:54,239 --> 00:03:57,280
and ultimately enables the central

115
00:03:56,560 --> 00:04:01,120
enforcement

116
00:03:57,280 --> 00:04:03,519
of secure purplication policies

117
00:04:01,120 --> 00:04:05,760
to allow for easy deployment zhang does

118
00:04:03,519 --> 00:04:06,720
not require any modifications to client

119
00:04:05,760 --> 00:04:08,959
applications

120
00:04:06,720 --> 00:04:11,519
and is compatible with existing firewall

121
00:04:08,959 --> 00:04:13,920
and gateway services

122
00:04:11,519 --> 00:04:14,879
so given application on the compromised

123
00:04:13,920 --> 00:04:17,279
client system

124
00:04:14,879 --> 00:04:18,798
the first question we have to answer is

125
00:04:17,279 --> 00:04:20,238
how does zhang shield client

126
00:04:18,798 --> 00:04:21,519
applications and their network

127
00:04:20,238 --> 00:04:24,638
connections against

128
00:04:21,519 --> 00:04:27,040
system level attackers

129
00:04:24,639 --> 00:04:28,479
what then does is it takes an unmodified

130
00:04:27,040 --> 00:04:31,040
client application

131
00:04:28,479 --> 00:04:34,320
and executes it inside an sjx enclave

132
00:04:31,040 --> 00:04:36,800
using an sjx library operating system

133
00:04:34,320 --> 00:04:37,759
in our implementation we use graphene

134
00:04:36,800 --> 00:04:39,600
sjx

135
00:04:37,759 --> 00:04:42,000
which supports dynamic loading of

136
00:04:39,600 --> 00:04:44,160
unmodified linux applications and

137
00:04:42,000 --> 00:04:46,160
provides common posix abstractions and

138
00:04:44,160 --> 00:04:48,720
the file system shield

139
00:04:46,160 --> 00:04:50,720
however graphene sjx relies on the

140
00:04:48,720 --> 00:04:52,960
untrusted host network stack

141
00:04:50,720 --> 00:04:54,639
and is therefore insufficient to shield

142
00:04:52,960 --> 00:04:58,239
the application connections

143
00:04:54,639 --> 00:05:00,479
and dns traffic to fill this gap

144
00:04:58,240 --> 00:05:04,320
zhang integrates the zeng runtime for

145
00:05:00,479 --> 00:05:06,560
shielding the client network traffic

146
00:05:04,320 --> 00:05:08,320
the zeng runtime exposes a trusted

147
00:05:06,560 --> 00:05:11,600
socket and dns api

148
00:05:08,320 --> 00:05:14,639
and includes the lightweight lwip tcpip

149
00:05:11,600 --> 00:05:16,240
network stack the network stack manages

150
00:05:14,639 --> 00:05:17,199
all network communication of the

151
00:05:16,240 --> 00:05:21,680
application

152
00:05:17,199 --> 00:05:23,520
securely inside the sjx enclave

153
00:05:21,680 --> 00:05:25,759
for protecting the application traffic

154
00:05:23,520 --> 00:05:26,639
in transit against system and network

155
00:05:25,759 --> 00:05:28,800
attackers

156
00:05:26,639 --> 00:05:30,720
the zen runtime includes a secure tunnel

157
00:05:28,800 --> 00:05:32,800
module

158
00:05:30,720 --> 00:05:34,800
the tunnel module protects all trusted

159
00:05:32,800 --> 00:05:37,120
ip packets via dtls

160
00:05:34,800 --> 00:05:37,840
and therefore enables secure ip

161
00:05:37,120 --> 00:05:40,880
tunneling

162
00:05:37,840 --> 00:05:43,039
of application traffic

163
00:05:40,880 --> 00:05:44,719
to summarize we have seen how zhang

164
00:05:43,039 --> 00:05:47,120
shields client applications and their

165
00:05:44,720 --> 00:05:50,800
network traffic using graphene sjx

166
00:05:47,120 --> 00:05:53,039
and design runtime next we concentrate

167
00:05:50,800 --> 00:05:54,720
on the question how zeng performs the

168
00:05:53,039 --> 00:05:56,560
central traffic to application

169
00:05:54,720 --> 00:05:58,160
attribution

170
00:05:56,560 --> 00:06:00,240
looking at our corporate network

171
00:05:58,160 --> 00:06:01,840
environment the zync server runs at the

172
00:06:00,240 --> 00:06:03,600
central network gateway

173
00:06:01,840 --> 00:06:06,479
and listens for tunnel connections by

174
00:06:03,600 --> 00:06:08,800
shielded client applications each thing

175
00:06:06,479 --> 00:06:11,440
runtime automatically establishes an

176
00:06:08,800 --> 00:06:14,720
attested dtls tunnel to the zync server

177
00:06:11,440 --> 00:06:17,120
using a fresh rsa key pair

178
00:06:14,720 --> 00:06:19,520
for the attestation the runtime binds an

179
00:06:17,120 --> 00:06:20,000
sgx at the station report to the rsa

180
00:06:19,520 --> 00:06:21,758
public

181
00:06:20,000 --> 00:06:23,440
key and ships it via the client

182
00:06:21,759 --> 00:06:25,520
certificate

183
00:06:23,440 --> 00:06:27,600
the zinc server then verifies that it

184
00:06:25,520 --> 00:06:29,520
communicates with a valid enclave

185
00:06:27,600 --> 00:06:32,000
and looks up the shielded application

186
00:06:29,520 --> 00:06:35,680
identity in the trusted allow list

187
00:06:32,000 --> 00:06:38,240
using the enclave measurement

188
00:06:35,680 --> 00:06:39,600
note that given the trusted tcp ip stack

189
00:06:38,240 --> 00:06:41,680
of the zheng run time

190
00:06:39,600 --> 00:06:43,680
each tunnel packet carries a trusted

191
00:06:41,680 --> 00:06:45,919
inner ip packet

192
00:06:43,680 --> 00:06:47,520
therefore the zeng server can assign a

193
00:06:45,919 --> 00:06:50,080
unique enclave ip

194
00:06:47,520 --> 00:06:52,080
to each shielded application to expose

195
00:06:50,080 --> 00:06:54,080
the application identity to the gateway

196
00:06:52,080 --> 00:06:56,479
firewall

197
00:06:54,080 --> 00:06:58,639
after authentication the zinc server can

198
00:06:56,479 --> 00:07:01,120
attribute all network communication

199
00:06:58,639 --> 00:07:03,039
from and to the tested tunnel directly

200
00:07:01,120 --> 00:07:05,199
to the shielded application

201
00:07:03,039 --> 00:07:07,120
and given that shielded traffic arrives

202
00:07:05,199 --> 00:07:09,199
only through a tested tunnels

203
00:07:07,120 --> 00:07:12,160
the firewall can easily block any

204
00:07:09,199 --> 00:07:14,479
unauthorized communication

205
00:07:12,160 --> 00:07:15,680
note that zheng also supports external

206
00:07:14,479 --> 00:07:17,520
shielded applications

207
00:07:15,680 --> 00:07:20,400
but we have to skip the details due to

208
00:07:17,520 --> 00:07:22,000
the given time constraints

209
00:07:20,400 --> 00:07:24,318
given that we have seen how zhang

210
00:07:22,000 --> 00:07:26,400
shields client applications and exposes

211
00:07:24,319 --> 00:07:27,120
their secure application identifiers to

212
00:07:26,400 --> 00:07:29,840
the gateway

213
00:07:27,120 --> 00:07:32,240
we can now turn to the question how zeng

214
00:07:29,840 --> 00:07:33,119
ultimately defines and enforces per

215
00:07:32,240 --> 00:07:37,039
application

216
00:07:33,120 --> 00:07:37,840
firewall policies what the zeng server

217
00:07:37,039 --> 00:07:40,400
does is

218
00:07:37,840 --> 00:07:42,400
it uses the trusted enclave ip addresses

219
00:07:40,400 --> 00:07:44,239
to override the source addresses in

220
00:07:42,400 --> 00:07:46,000
firewall rules

221
00:07:44,240 --> 00:07:48,400
network administrators can define

222
00:07:46,000 --> 00:07:50,000
application specific ip sub networks

223
00:07:48,400 --> 00:07:52,318
for example a trusted browser sub

224
00:07:50,000 --> 00:07:54,400
network and the zeng server will then

225
00:07:52,319 --> 00:07:56,639
assign ips from this pool

226
00:07:54,400 --> 00:07:58,080
only to the specific shielded browser

227
00:07:56,639 --> 00:08:00,000
applications defined by the

228
00:07:58,080 --> 00:08:01,840
administrator

229
00:08:00,000 --> 00:08:03,840
the gateway firewalls then just have to

230
00:08:01,840 --> 00:08:05,520
be adapted to work on the fine-grained

231
00:08:03,840 --> 00:08:07,039
application sub-networks

232
00:08:05,520 --> 00:08:08,960
instead of the coarse-grained host

233
00:08:07,039 --> 00:08:12,639
sub-networks which makes the approach

234
00:08:08,960 --> 00:08:15,280
fully compatible with existing firewalls

235
00:08:12,639 --> 00:08:17,280
so for example given a rule for web

236
00:08:15,280 --> 00:08:18,960
communication to external servers

237
00:08:17,280 --> 00:08:21,679
which allows data exfiltration

238
00:08:18,960 --> 00:08:23,919
potentially then can enforce that only

239
00:08:21,680 --> 00:08:26,160
trusted firefox applications can reach

240
00:08:23,919 --> 00:08:28,400
out to the internet

241
00:08:26,160 --> 00:08:30,080
in the same way then can also be used to

242
00:08:28,400 --> 00:08:32,000
restrict access only to hardened

243
00:08:30,080 --> 00:08:34,319
applications for instance a postgres

244
00:08:32,000 --> 00:08:36,880
client with tls mode enabled

245
00:08:34,320 --> 00:08:39,039
or considering incoming connections then

246
00:08:36,880 --> 00:08:41,039
can restrict access from external client

247
00:08:39,039 --> 00:08:44,000
to an internal ftp server only to a

248
00:08:41,039 --> 00:08:45,839
specific filezilla version

249
00:08:44,000 --> 00:08:48,240
so putting the policy enforcement in a

250
00:08:45,839 --> 00:08:50,480
nutshell the gateway firewall enforces

251
00:08:48,240 --> 00:08:52,959
zhang's per application policies

252
00:08:50,480 --> 00:08:56,240
on traffic from and to the application

253
00:08:52,959 --> 00:08:58,479
specific ipsub networks

254
00:08:56,240 --> 00:09:01,040
to summarize we have shown how zhang

255
00:08:58,480 --> 00:09:03,200
enables secure purplication policies

256
00:09:01,040 --> 00:09:05,120
while staying compatible with existing

257
00:09:03,200 --> 00:09:06,720
client applications and gateway

258
00:09:05,120 --> 00:09:08,959
firewalls

259
00:09:06,720 --> 00:09:10,560
before concluding the talk we can now

260
00:09:08,959 --> 00:09:13,199
have a brief look at the performance

261
00:09:10,560 --> 00:09:15,119
impact of zen

262
00:09:13,200 --> 00:09:16,640
for our performance measurements we have

263
00:09:15,120 --> 00:09:18,880
implemented a prototype of

264
00:09:16,640 --> 00:09:20,839
zeng and evaluated it on a set of

265
00:09:18,880 --> 00:09:22,320
network benchmarks and real world

266
00:09:20,839 --> 00:09:24,160
applications

267
00:09:22,320 --> 00:09:25,519
we have used a local setup with one

268
00:09:24,160 --> 00:09:27,439
gigabit network cards

269
00:09:25,519 --> 00:09:28,959
and compared the performance of zen

270
00:09:27,440 --> 00:09:31,440
against native linux

271
00:09:28,959 --> 00:09:33,680
and vanilla graphene sjx with exit-less

272
00:09:31,440 --> 00:09:35,440
eno calls

273
00:09:33,680 --> 00:09:37,920
regarding the downlink throughput of a

274
00:09:35,440 --> 00:09:40,320
single tcp connection using ipa 3

275
00:09:37,920 --> 00:09:44,399
native linux and graphene sjx reach an

276
00:09:40,320 --> 00:09:46,080
average of about 930 megabits per second

277
00:09:44,399 --> 00:09:48,560
zhang showed an overhead of about three

278
00:09:46,080 --> 00:09:50,480
to seven percent reaching about 870

279
00:09:48,560 --> 00:09:52,000
megabits per second which we regard as

280
00:09:50,480 --> 00:09:54,080
practically feasible for client

281
00:09:52,000 --> 00:09:56,080
workstations

282
00:09:54,080 --> 00:09:57,440
we also had a look at the http download

283
00:09:56,080 --> 00:09:59,040
performance using curl

284
00:09:57,440 --> 00:10:00,800
which showed a slightly higher overhead

285
00:09:59,040 --> 00:10:01,279
of about nine to fourteen percent for

286
00:10:00,800 --> 00:10:03,120
zheng

287
00:10:01,279 --> 00:10:05,200
but we're still regarded as feasible in

288
00:10:03,120 --> 00:10:07,440
practice

289
00:10:05,200 --> 00:10:08,800
we also evaluated zeng's performance for

290
00:10:07,440 --> 00:10:10,720
server applications

291
00:10:08,800 --> 00:10:12,959
by measuring the response latency and

292
00:10:10,720 --> 00:10:14,880
throughput of nginx

293
00:10:12,959 --> 00:10:17,199
in this case native execution

294
00:10:14,880 --> 00:10:20,320
drastically outperformed trafine sgx and

295
00:10:17,200 --> 00:10:22,920
zheng which both only reach about 15k

296
00:10:20,320 --> 00:10:26,480
requests per second that means about

297
00:10:22,920 --> 00:10:28,640
37.5 percent of native performance

298
00:10:26,480 --> 00:10:30,640
this was not surprising however and was

299
00:10:28,640 --> 00:10:32,720
on par with observations by the office

300
00:10:30,640 --> 00:10:34,000
of graphene sjx and is caused by the

301
00:10:32,720 --> 00:10:36,800
missing support of azure

302
00:10:34,000 --> 00:10:38,399
chronos and batch system calls to

303
00:10:36,800 --> 00:10:40,240
overcome this bottleneck

304
00:10:38,399 --> 00:10:42,560
we implemented an alternative zen

305
00:10:40,240 --> 00:10:46,240
runtime which he called zheng sdk

306
00:10:42,560 --> 00:10:48,800
and which is based on the intel sjx sdk

307
00:10:46,240 --> 00:10:51,360
zhang sdk does not use a library os and

308
00:10:48,800 --> 00:10:52,560
significantly outperform graphene sjx

309
00:10:51,360 --> 00:10:54,640
and the zheng runtime

310
00:10:52,560 --> 00:10:56,000
by reaching about 90 of native

311
00:10:54,640 --> 00:10:57,519
performance

312
00:10:56,000 --> 00:10:59,360
the results have shown that zen can

313
00:10:57,519 --> 00:11:00,000
benefit from performance improvements of

314
00:10:59,360 --> 00:11:02,800
the underlying

315
00:11:00,000 --> 00:11:04,240
primitives further evaluation results

316
00:11:02,800 --> 00:11:06,319
about the zinc runtime

317
00:11:04,240 --> 00:11:07,839
and zeng server can be found in our

318
00:11:06,320 --> 00:11:09,839
paper

319
00:11:07,839 --> 00:11:11,680
to summarize we have discussed the

320
00:11:09,839 --> 00:11:12,399
challenges that had to be overcome to

321
00:11:11,680 --> 00:11:14,399
enable

322
00:11:12,399 --> 00:11:16,320
reliable and secure traffic to

323
00:11:14,399 --> 00:11:18,880
application attribution

324
00:11:16,320 --> 00:11:19,519
we have proposed zeng as a possible

325
00:11:18,880 --> 00:11:21,680
solution

326
00:11:19,519 --> 00:11:23,920
which roots the application protection

327
00:11:21,680 --> 00:11:26,640
and identifies and trusted hardware

328
00:11:23,920 --> 00:11:27,680
and ultimately allows to enforce central

329
00:11:26,640 --> 00:11:30,880
purplication

330
00:11:27,680 --> 00:11:32,640
firewall policies last but not least we

331
00:11:30,880 --> 00:11:34,399
had a look at the performances are async

332
00:11:32,640 --> 00:11:35,360
prototypes for client and server

333
00:11:34,399 --> 00:11:36,959
applications

334
00:11:35,360 --> 00:11:39,279
which showed promising results for

335
00:11:36,959 --> 00:11:41,199
practical usage

336
00:11:39,279 --> 00:11:43,040
note that all prototypes of zenga are

337
00:11:41,200 --> 00:11:44,959
available as open source projects on

338
00:11:43,040 --> 00:11:46,640
github

339
00:11:44,959 --> 00:11:48,399
finally i want to thank you for your

340
00:11:46,640 --> 00:11:57,839
attention and would be happy to answer

341
00:11:48,399 --> 00:11:57,839
any additional questions

342
00:11:58,959 --> 00:12:01,040
you

