1
00:00:08,559 --> 00:00:11,678
hello and thanks a lot for joining to

2
00:00:10,400 --> 00:00:13,759
this talk on our paper

3
00:00:11,679 --> 00:00:15,360
everything old is new again binary

4
00:00:13,759 --> 00:00:16,720
security of webassembly

5
00:00:15,360 --> 00:00:18,560
my name is daniel lehmann and i'm going

6
00:00:16,720 --> 00:00:20,080
to present this joint work with johannes

7
00:00:18,560 --> 00:00:20,720
kinder from buddhist way university

8
00:00:20,080 --> 00:00:22,000
munich

9
00:00:20,720 --> 00:00:24,400
and michael prattle and me from

10
00:00:22,000 --> 00:00:26,640
university of stuttgart

11
00:00:24,400 --> 00:00:28,240
before we go into web assembly security

12
00:00:26,640 --> 00:00:29,760
i just want to briefly introduce what

13
00:00:28,240 --> 00:00:32,079
web assembly is about

14
00:00:29,760 --> 00:00:33,920
so webassembly is a relatively new byte

15
00:00:32,079 --> 00:00:34,559
code so a binary format as you can see

16
00:00:33,920 --> 00:00:37,760
here

17
00:00:34,559 --> 00:00:39,519
that is fast low level and portable

18
00:00:37,760 --> 00:00:41,280
and is originally intended to be

19
00:00:39,520 --> 00:00:42,320
executed on the client side in web

20
00:00:41,280 --> 00:00:43,840
browsers

21
00:00:42,320 --> 00:00:45,920
as a complement to javascript for

22
00:00:43,840 --> 00:00:46,399
example for compute heavy applications

23
00:00:45,920 --> 00:00:48,640
like

24
00:00:46,399 --> 00:00:50,239
video codecs or compression or game

25
00:00:48,640 --> 00:00:52,079
engines

26
00:00:50,239 --> 00:00:54,320
by now webassembly has gained a lot of

27
00:00:52,079 --> 00:00:56,640
momentum so it's supported by over 90

28
00:00:54,320 --> 00:00:58,000
of all global browser installations and

29
00:00:56,640 --> 00:01:00,480
more recently also on

30
00:00:58,000 --> 00:01:03,199
node.js for server-side applications and

31
00:01:00,480 --> 00:01:04,720
even in standalone virtual machines

32
00:01:03,199 --> 00:01:06,399
as a bytecode you typically wouldn't

33
00:01:04,720 --> 00:01:06,960
want to write a web sampling program by

34
00:01:06,400 --> 00:01:09,280
hand

35
00:01:06,960 --> 00:01:10,798
but instead you compile it from often

36
00:01:09,280 --> 00:01:14,240
systems level languages like c

37
00:01:10,799 --> 00:01:16,560
c plus rust go and also many others

38
00:01:14,240 --> 00:01:19,119
now given that a lot of legacy code is

39
00:01:16,560 --> 00:01:21,040
written in those memory unsafe languages

40
00:01:19,119 --> 00:01:22,159
the question of security comes up so

41
00:01:21,040 --> 00:01:24,080
what happens if

42
00:01:22,159 --> 00:01:26,080
a memory vulnerability in a source

43
00:01:24,080 --> 00:01:26,640
program is compiled to europe assembly

44
00:01:26,080 --> 00:01:28,798
binary

45
00:01:26,640 --> 00:01:30,560
and then at runtime an attacker supplies

46
00:01:28,799 --> 00:01:31,759
malicious inputs to that vulnerable

47
00:01:30,560 --> 00:01:34,079
binary

48
00:01:31,759 --> 00:01:35,600
for native architectures a decade long

49
00:01:34,079 --> 00:01:37,520
cat and mouse game have resulted in a

50
00:01:35,600 --> 00:01:39,039
plethora of very good mitigations

51
00:01:37,520 --> 00:01:41,039
against such runtime attacks

52
00:01:39,040 --> 00:01:43,119
so that starts very early from virtual

53
00:01:41,040 --> 00:01:45,439
memory provided by operating systems

54
00:01:43,119 --> 00:01:46,159
to compiler inserted defenses like stack

55
00:01:45,439 --> 00:01:48,479
canaries

56
00:01:46,159 --> 00:01:51,119
or more recently elaborate defenses like

57
00:01:48,479 --> 00:01:52,720
control flow integrity for example

58
00:01:51,119 --> 00:01:54,159
now the question is how many of those

59
00:01:52,720 --> 00:01:56,320
mitigations are available

60
00:01:54,159 --> 00:01:58,079
and employed for assembly binaries and

61
00:01:56,320 --> 00:02:00,240
if they are how effective are they

62
00:01:58,079 --> 00:02:02,240
in preventing runtime attacks so does it

63
00:02:00,240 --> 00:02:04,399
make a web assembly binary always more

64
00:02:02,240 --> 00:02:07,439
secure than a native binary for example

65
00:02:04,399 --> 00:02:09,280
or is it in some cases even less so

66
00:02:07,439 --> 00:02:11,519
proponents of web assembly have made

67
00:02:09,280 --> 00:02:13,360
strong claims about its binary security

68
00:02:11,520 --> 00:02:15,120
so a web assembly design document states

69
00:02:13,360 --> 00:02:15,760
for example that data execution

70
00:02:15,120 --> 00:02:17,440
prevention

71
00:02:15,760 --> 00:02:19,359
and stack smashing protection so stack

72
00:02:17,440 --> 00:02:20,400
canaries are not necessary for web

73
00:02:19,360 --> 00:02:22,800
assembly programs

74
00:02:20,400 --> 00:02:25,040
and we wonder is that actually true and

75
00:02:22,800 --> 00:02:25,599
another document the original pldi paper

76
00:02:25,040 --> 00:02:27,599
says

77
00:02:25,599 --> 00:02:29,040
at worst a websimply program could make

78
00:02:27,599 --> 00:02:30,799
a mess of its own data

79
00:02:29,040 --> 00:02:32,319
and we wonder what are the consequences

80
00:02:30,800 --> 00:02:34,000
of that

81
00:02:32,319 --> 00:02:35,599
we aim to answer these questions and for

82
00:02:34,000 --> 00:02:37,920
that our paper contributes

83
00:02:35,599 --> 00:02:39,920
first an in-depth security analysis of

84
00:02:37,920 --> 00:02:42,160
web assembly including one of its major

85
00:02:39,920 --> 00:02:44,559
components called linear memory

86
00:02:42,160 --> 00:02:45,359
second we provide a library of attack

87
00:02:44,560 --> 00:02:46,959
primitives

88
00:02:45,360 --> 00:02:49,360
and those primitives can be freely

89
00:02:46,959 --> 00:02:51,440
combined to perform an exploit

90
00:02:49,360 --> 00:02:53,200
third we give three different proof of

91
00:02:51,440 --> 00:02:54,800
concept exploits on three different web

92
00:02:53,200 --> 00:02:56,480
assembly platforms to show that they are

93
00:02:54,800 --> 00:02:58,800
feasible in practice

94
00:02:56,480 --> 00:03:00,079
and finally to quantitatively assess the

95
00:02:58,800 --> 00:03:02,319
risk we do some measurements on

96
00:03:00,080 --> 00:03:03,920
real-world binaries

97
00:03:02,319 --> 00:03:05,920
for time reasons in this talk we can

98
00:03:03,920 --> 00:03:07,920
cover only so much detail so we'll do

99
00:03:05,920 --> 00:03:08,720
some security analysis of webassembly as

100
00:03:07,920 --> 00:03:10,799
we go

101
00:03:08,720 --> 00:03:11,920
then we'll look into three example

102
00:03:10,800 --> 00:03:13,760
attack primitives

103
00:03:11,920 --> 00:03:15,440
and finally i'll show you a demo for an

104
00:03:13,760 --> 00:03:17,120
exploit on a single web assembly

105
00:03:15,440 --> 00:03:19,120
platform

106
00:03:17,120 --> 00:03:21,120
let's start by having an overview of our

107
00:03:19,120 --> 00:03:22,879
attack so the first primitive that we

108
00:03:21,120 --> 00:03:25,280
employ is always aiming to obtain a

109
00:03:22,879 --> 00:03:27,359
right primitive like a buffer overflow

110
00:03:25,280 --> 00:03:28,799
then we direct that to override some

111
00:03:27,360 --> 00:03:30,879
sensitive data

112
00:03:28,799 --> 00:03:32,640
and finally this causes a malicious

113
00:03:30,879 --> 00:03:34,079
action in the environment of the web

114
00:03:32,640 --> 00:03:35,200
assembly binary so for example

115
00:03:34,080 --> 00:03:38,000
cross-site scripting

116
00:03:35,200 --> 00:03:39,599
if it's executed in a browser in native

117
00:03:38,000 --> 00:03:41,519
execution a couple of mitigations

118
00:03:39,599 --> 00:03:42,959
prevent the exploitation to work

119
00:03:41,519 --> 00:03:44,799
and we'll see in a second why they don't

120
00:03:42,959 --> 00:03:46,799
apply to webassembly

121
00:03:44,799 --> 00:03:48,480
now to understand the first part of our

122
00:03:46,799 --> 00:03:50,560
attack we'll have to cover a bit of

123
00:03:48,480 --> 00:03:52,238
background on managed versus unmanaged

124
00:03:50,560 --> 00:03:54,879
data in representably

125
00:03:52,239 --> 00:03:56,799
some data is managed by the vm so for

126
00:03:54,879 --> 00:03:59,439
example scalar variables like this

127
00:03:56,799 --> 00:04:00,159
local of integer type or return

128
00:03:59,439 --> 00:04:01,599
addresses

129
00:04:00,159 --> 00:04:03,359
and this is good because they cannot be

130
00:04:01,599 --> 00:04:05,439
overwritten by an attacker with a memory

131
00:04:03,360 --> 00:04:07,439
vulnerability

132
00:04:05,439 --> 00:04:09,519
a lot of data however is not managed by

133
00:04:07,439 --> 00:04:10,480
the vm and that is instead stored in

134
00:04:09,519 --> 00:04:12,480
linear memory

135
00:04:10,480 --> 00:04:14,798
so that includes heap allocations

136
00:04:12,480 --> 00:04:16,320
aggregate data like arrays instructs

137
00:04:14,799 --> 00:04:18,478
all data of which an address is ever

138
00:04:16,320 --> 00:04:20,798
taken like function out parameters

139
00:04:18,478 --> 00:04:22,320
and also non-scalar global data like

140
00:04:20,798 --> 00:04:24,080
string literals for example

141
00:04:22,320 --> 00:04:26,320
and this data could be overwritten by a

142
00:04:24,080 --> 00:04:28,479
memory vulnerability

143
00:04:26,320 --> 00:04:30,240
data with function lifetime is stored in

144
00:04:28,479 --> 00:04:31,840
a dedicated portion of linear memory

145
00:04:30,240 --> 00:04:33,600
called the unmanaged stack

146
00:04:31,840 --> 00:04:35,758
and we find that this is used by about a

147
00:04:33,600 --> 00:04:37,759
third of all functions

148
00:04:35,759 --> 00:04:39,759
now how could a buffer overflow on the

149
00:04:37,759 --> 00:04:42,080
unmanaged stack be exploited

150
00:04:39,759 --> 00:04:43,440
and for that we consider this vulnerable

151
00:04:42,080 --> 00:04:45,280
program here on the left

152
00:04:43,440 --> 00:04:47,199
which takes some user input and copies

153
00:04:45,280 --> 00:04:50,239
that into a fixed size buffer

154
00:04:47,199 --> 00:04:52,160
which is of course unsafe and then in

155
00:04:50,240 --> 00:04:53,520
native execution we see that an attack

156
00:04:52,160 --> 00:04:55,280
is prevented because

157
00:04:53,520 --> 00:04:56,880
a stack canary detects the buffer

158
00:04:55,280 --> 00:04:58,638
overflow and thus

159
00:04:56,880 --> 00:05:01,120
terminates the program and protects

160
00:04:58,639 --> 00:05:03,199
return addresses for example

161
00:05:01,120 --> 00:05:04,400
in webassembly the return address is

162
00:05:03,199 --> 00:05:05,520
managed by the vm

163
00:05:04,400 --> 00:05:07,440
which makes it safe from being

164
00:05:05,520 --> 00:05:09,840
overwritten but unfortunately web

165
00:05:07,440 --> 00:05:10,800
assembly binaries also do away with the

166
00:05:09,840 --> 00:05:12,799
stack henrys

167
00:05:10,800 --> 00:05:14,400
so that means on the unmanaged stack any

168
00:05:12,800 --> 00:05:16,240
data that is following the buffer

169
00:05:14,400 --> 00:05:18,320
can be freely overwritten and that

170
00:05:16,240 --> 00:05:19,919
includes even data from parent call

171
00:05:18,320 --> 00:05:21,919
frames like this other buffer here for

172
00:05:19,919 --> 00:05:24,000
example

173
00:05:21,919 --> 00:05:26,000
going back to our attack overview the

174
00:05:24,000 --> 00:05:26,800
next step is overwriting some sensitive

175
00:05:26,000 --> 00:05:28,479
data

176
00:05:26,800 --> 00:05:30,400
and in order to understand why we can

177
00:05:28,479 --> 00:05:31,758
use a stack-based buffer overflow to

178
00:05:30,400 --> 00:05:33,599
override heap data

179
00:05:31,759 --> 00:05:35,360
we have to look into web assembly's

180
00:05:33,600 --> 00:05:37,360
linear memory

181
00:05:35,360 --> 00:05:39,280
linear memory is essentially a single

182
00:05:37,360 --> 00:05:40,720
32-bit address space available to the

183
00:05:39,280 --> 00:05:43,198
web assembly program

184
00:05:40,720 --> 00:05:44,080
and that contains all the static stack

185
00:05:43,199 --> 00:05:46,720
and heap data

186
00:05:44,080 --> 00:05:48,560
that i presented before and because it's

187
00:05:46,720 --> 00:05:49,120
a linear memory it means that every

188
00:05:48,560 --> 00:05:51,199
pointer

189
00:05:49,120 --> 00:05:54,479
including the null pointer is valid

190
00:05:51,199 --> 00:05:56,400
there are no holes in this address space

191
00:05:54,479 --> 00:05:58,080
linear memory also doesn't feature any

192
00:05:56,400 --> 00:05:59,599
page protection flags so

193
00:05:58,080 --> 00:06:01,199
that means there cannot be unmapped

194
00:05:59,600 --> 00:06:03,440
pages between the stack and the heap for

195
00:06:01,199 --> 00:06:05,840
example like a native execution

196
00:06:03,440 --> 00:06:07,680
and it also means that all parts of the

197
00:06:05,840 --> 00:06:09,599
memory are always writable there simply

198
00:06:07,680 --> 00:06:12,080
is no way to mark an address as

199
00:06:09,600 --> 00:06:13,919
constant or non-writable and this means

200
00:06:12,080 --> 00:06:14,639
that an overflow on the stack for

201
00:06:13,919 --> 00:06:17,198
example

202
00:06:14,639 --> 00:06:19,520
can override into any higher address in

203
00:06:17,199 --> 00:06:20,720
linear memory including heap values for

204
00:06:19,520 --> 00:06:22,639
example

205
00:06:20,720 --> 00:06:24,319
linear memory also doesn't feature any

206
00:06:22,639 --> 00:06:25,919
probabilistic defense so there's for

207
00:06:24,319 --> 00:06:27,759
example no aslr

208
00:06:25,919 --> 00:06:30,000
and the memory layout of stack heap and

209
00:06:27,759 --> 00:06:33,120
static data is always fully determined

210
00:06:30,000 --> 00:06:34,639
from the compiler in the program

211
00:06:33,120 --> 00:06:36,319
finally let's think about how

212
00:06:34,639 --> 00:06:38,319
overwriting heap data can cause a

213
00:06:36,319 --> 00:06:40,240
malicious action in the browser

214
00:06:38,319 --> 00:06:42,160
and for that let's consider this c plus

215
00:06:40,240 --> 00:06:44,319
web application here on the left

216
00:06:42,160 --> 00:06:45,600
and what it does is it first allocates

217
00:06:44,319 --> 00:06:48,160
some html data

218
00:06:45,600 --> 00:06:49,360
on the heap then it uses a function from

219
00:06:48,160 --> 00:06:51,599
lib.png

220
00:06:49,360 --> 00:06:52,800
to convert a user-provided image into a

221
00:06:51,599 --> 00:06:54,880
png file

222
00:06:52,800 --> 00:06:56,800
and then it displays that png file by

223
00:06:54,880 --> 00:07:00,000
adding html to the dom

224
00:06:56,800 --> 00:07:01,840
at runtime on the right side you see the

225
00:07:00,000 --> 00:07:02,880
layout of linear memory when you compile

226
00:07:01,840 --> 00:07:06,400
this application

227
00:07:02,880 --> 00:07:07,520
to webassembly now in our proof of

228
00:07:06,400 --> 00:07:10,560
concept attack

229
00:07:07,520 --> 00:07:12,000
we exploit a memory vulnerability in png

230
00:07:10,560 --> 00:07:14,720
from 2018

231
00:07:12,000 --> 00:07:16,240
and that first causes a stack overflow

232
00:07:14,720 --> 00:07:19,039
and then overwrites data

233
00:07:16,240 --> 00:07:20,560
in the heap region as we've shown before

234
00:07:19,039 --> 00:07:22,080
since our webassembly binary is

235
00:07:20,560 --> 00:07:23,520
executing in the browser

236
00:07:22,080 --> 00:07:25,120
as an attacker it makes sense to

237
00:07:23,520 --> 00:07:27,120
overwrite the string on the heap

238
00:07:25,120 --> 00:07:28,840
with some malicious javascript and that

239
00:07:27,120 --> 00:07:30,319
causes cross-site scripting in the

240
00:07:28,840 --> 00:07:32,080
browser

241
00:07:30,319 --> 00:07:34,240
in the demo we see that the webassembly

242
00:07:32,080 --> 00:07:35,840
application is working as expected

243
00:07:34,240 --> 00:07:37,599
when you supply it with a valid image

244
00:07:35,840 --> 00:07:40,318
file so in this case

245
00:07:37,599 --> 00:07:42,800
it converts an pnm image into a png file

246
00:07:40,319 --> 00:07:44,639
and displays it in the browser

247
00:07:42,800 --> 00:07:46,240
when we choose an attacker supplied

248
00:07:44,639 --> 00:07:48,240
malicious input however

249
00:07:46,240 --> 00:07:50,400
we see that that causes a stack to heap

250
00:07:48,240 --> 00:07:52,160
overflow and that ultimately leads to

251
00:07:50,400 --> 00:07:55,198
arbitrary javascript execution

252
00:07:52,160 --> 00:07:56,720
so in this case an alert is displayed

253
00:07:55,199 --> 00:07:58,319
please note that because we don't assume

254
00:07:56,720 --> 00:07:59,039
anything besides a standards compliant

255
00:07:58,319 --> 00:08:01,360
browser

256
00:07:59,039 --> 00:08:04,000
this works exactly the same in safari

257
00:08:01,360 --> 00:08:05,599
firefox or edge

258
00:08:04,000 --> 00:08:07,120
now the attack primitives that we've

259
00:08:05,599 --> 00:08:08,719
just covered in this demo

260
00:08:07,120 --> 00:08:10,080
are of course only a subset of all the

261
00:08:08,720 --> 00:08:10,879
attack primitives that we show on the

262
00:08:10,080 --> 00:08:12,639
paper

263
00:08:10,879 --> 00:08:14,479
so in particular we have a couple of

264
00:08:12,639 --> 00:08:15,039
primitives along each dimension of our

265
00:08:14,479 --> 00:08:17,039
attack

266
00:08:15,039 --> 00:08:18,960
namely obtaining a right primitive

267
00:08:17,039 --> 00:08:20,560
overwriting some sensitive data

268
00:08:18,960 --> 00:08:22,159
and finally performing a malicious

269
00:08:20,560 --> 00:08:23,759
action

270
00:08:22,160 --> 00:08:25,599
for the right primitives we show that

271
00:08:23,759 --> 00:08:26,400
not only stack-based buffer overflows

272
00:08:25,599 --> 00:08:28,240
are dangerous

273
00:08:26,400 --> 00:08:30,000
but also stack overflows can be

274
00:08:28,240 --> 00:08:32,399
exploited and

275
00:08:30,000 --> 00:08:33,839
that a heap overflow can yield a heat

276
00:08:32,399 --> 00:08:36,000
metadata corruption

277
00:08:33,839 --> 00:08:39,200
which given a vulnerable allocator can

278
00:08:36,000 --> 00:08:41,839
give you an arbitrary write primitive

279
00:08:39,200 --> 00:08:43,760
and for overwritten data we not only

280
00:08:41,839 --> 00:08:44,320
target heap data but also other stack

281
00:08:43,760 --> 00:08:46,720
frames

282
00:08:44,320 --> 00:08:48,320
and even supposedly constant data we'll

283
00:08:46,720 --> 00:08:50,800
see that in a second

284
00:08:48,320 --> 00:08:52,480
and finally for the malicious behavior

285
00:08:50,800 --> 00:08:54,399
we not only look into cross-site

286
00:08:52,480 --> 00:08:57,600
scripting on the browser platform

287
00:08:54,399 --> 00:09:00,240
but also on remote code execution in

288
00:08:57,600 --> 00:09:00,880
node.js and an arbitrary file right

289
00:09:00,240 --> 00:09:03,040
primitive

290
00:09:00,880 --> 00:09:04,959
on the webassembly systems interface

291
00:09:03,040 --> 00:09:07,680
which is a syscall interface for

292
00:09:04,959 --> 00:09:09,839
standalone web assembly vms

293
00:09:07,680 --> 00:09:10,959
as for mitigations we not only look into

294
00:09:09,839 --> 00:09:13,200
stack canaries

295
00:09:10,959 --> 00:09:15,439
and unmapped pages as in this talk but

296
00:09:13,200 --> 00:09:17,760
we also look into safe unlinking

297
00:09:15,440 --> 00:09:19,600
which is often not employed by small web

298
00:09:17,760 --> 00:09:20,640
assembly allocators for code size

299
00:09:19,600 --> 00:09:22,560
reasons

300
00:09:20,640 --> 00:09:24,319
and finally we also compare web

301
00:09:22,560 --> 00:09:25,040
assemblies type checking of indirect

302
00:09:24,320 --> 00:09:26,959
calls

303
00:09:25,040 --> 00:09:29,439
with native control flow integrity

304
00:09:26,959 --> 00:09:29,439
techniques

305
00:09:29,519 --> 00:09:32,640
the attack parameters that i've shown

306
00:09:30,880 --> 00:09:33,439
you here can be relatively freely

307
00:09:32,640 --> 00:09:35,839
combined

308
00:09:33,440 --> 00:09:37,839
so what we've seen in the exploit demo

309
00:09:35,839 --> 00:09:39,600
was a stack-based buffer overflow that

310
00:09:37,839 --> 00:09:40,880
is not stopped by stack henries or

311
00:09:39,600 --> 00:09:42,399
unmapped pages because they are not

312
00:09:40,880 --> 00:09:44,399
present in web assembly

313
00:09:42,399 --> 00:09:47,279
that then overrides heap data and then

314
00:09:44,399 --> 00:09:49,760
causes a cross-site scripting attack

315
00:09:47,279 --> 00:09:51,439
but we've also provided two other proof

316
00:09:49,760 --> 00:09:53,760
of concept exploits

317
00:09:51,440 --> 00:09:55,120
the second one starts with a heap

318
00:09:53,760 --> 00:09:57,040
metadata corruption

319
00:09:55,120 --> 00:09:59,519
which is not stopped by safe unlinking

320
00:09:57,040 --> 00:10:00,640
because the em malloc allocator doesn't

321
00:09:59,519 --> 00:10:03,120
feature it

322
00:10:00,640 --> 00:10:04,240
and then this overrides data in apparent

323
00:10:03,120 --> 00:10:05,920
stack frame

324
00:10:04,240 --> 00:10:07,920
and then we see that because

325
00:10:05,920 --> 00:10:09,680
webassembly's type checking of indirect

326
00:10:07,920 --> 00:10:11,360
calls is not as strict as for example

327
00:10:09,680 --> 00:10:13,519
native cfi defenses

328
00:10:11,360 --> 00:10:14,480
this can lead to a redirect call and

329
00:10:13,519 --> 00:10:17,040
ultimately to

330
00:10:14,480 --> 00:10:18,560
the remote code execution and then the

331
00:10:17,040 --> 00:10:19,199
third exploit that we feature in our

332
00:10:18,560 --> 00:10:20,880
paper

333
00:10:19,200 --> 00:10:22,959
again starts with a stack-based buffer

334
00:10:20,880 --> 00:10:23,920
overflow but this time it targets

335
00:10:22,959 --> 00:10:26,239
constant data

336
00:10:23,920 --> 00:10:28,479
instead of heap data so in particular we

337
00:10:26,240 --> 00:10:29,519
overwrite a string literal that is used

338
00:10:28,480 --> 00:10:32,640
as a file name

339
00:10:29,519 --> 00:10:34,880
later in a c api call and this gives us

340
00:10:32,640 --> 00:10:35,600
an arbitrary file right primitive on a

341
00:10:34,880 --> 00:10:38,399
wazi

342
00:10:35,600 --> 00:10:38,800
webassembly binary for more details

343
00:10:38,399 --> 00:10:40,399
about

344
00:10:38,800 --> 00:10:42,160
our attack primitives and the

345
00:10:40,399 --> 00:10:44,560
mitigations that we analyzed

346
00:10:42,160 --> 00:10:46,240
please have a look at our full paper and

347
00:10:44,560 --> 00:10:48,000
with that i would like to conclude this

348
00:10:46,240 --> 00:10:48,880
talk and give a short summary of our

349
00:10:48,000 --> 00:10:51,200
paper

350
00:10:48,880 --> 00:10:53,839
we look into webassembly binary security

351
00:10:51,200 --> 00:10:55,440
and compared to native executables

352
00:10:53,839 --> 00:10:57,040
and we find that because many common

353
00:10:55,440 --> 00:10:57,519
mitigations available for native

354
00:10:57,040 --> 00:10:58,880
programs

355
00:10:57,519 --> 00:11:00,959
are not employed by web assembly

356
00:10:58,880 --> 00:11:02,480
binaries that in some cases web assembly

357
00:11:00,959 --> 00:11:04,160
binaries are less secure than their

358
00:11:02,480 --> 00:11:06,079
native counterparts

359
00:11:04,160 --> 00:11:07,680
we realize that a lot of data in a web

360
00:11:06,079 --> 00:11:10,000
assembly program is not managed by the

361
00:11:07,680 --> 00:11:12,560
vm but instead stored in the unmanaged

362
00:11:10,000 --> 00:11:14,320
and completely exposed linear memory

363
00:11:12,560 --> 00:11:16,079
linear memory itself is much simpler

364
00:11:14,320 --> 00:11:18,000
than memory of native programs

365
00:11:16,079 --> 00:11:19,680
so for example it doesn't have page

366
00:11:18,000 --> 00:11:22,560
protections it doesn't have guard pages

367
00:11:19,680 --> 00:11:24,560
and all memory is always writable

368
00:11:22,560 --> 00:11:26,079
we give a library of attack primitives

369
00:11:24,560 --> 00:11:29,119
across three dimensions

370
00:11:26,079 --> 00:11:31,199
namely right primitives overwritten data

371
00:11:29,120 --> 00:11:32,640
and performing a malicious action and

372
00:11:31,200 --> 00:11:35,200
those attack primitives can be

373
00:11:32,640 --> 00:11:36,880
relatively freely combined

374
00:11:35,200 --> 00:11:38,399
and we show that our attack primitives

375
00:11:36,880 --> 00:11:40,000
are practical by

376
00:11:38,399 --> 00:11:42,240
giving three example vulnerable

377
00:11:40,000 --> 00:11:44,079
applications and end-to-end exploits

378
00:11:42,240 --> 00:11:45,360
on three different webassembly platforms

379
00:11:44,079 --> 00:11:48,959
namely the browser

380
00:11:45,360 --> 00:11:51,040
node.js and a standalone web assembly vm

381
00:11:48,959 --> 00:11:52,638
and with that thanks a lot for watching

382
00:11:51,040 --> 00:11:54,240
and if you have any questions please let

383
00:11:52,639 --> 00:11:55,839
us know either via email

384
00:11:54,240 --> 00:11:58,480
or we're happy to answer at the usnik

385
00:11:55,839 --> 00:12:10,560
security 2020 live session

386
00:11:58,480 --> 00:12:12,639
thanks again and goodbye

387
00:12:10,560 --> 00:12:12,638
you

