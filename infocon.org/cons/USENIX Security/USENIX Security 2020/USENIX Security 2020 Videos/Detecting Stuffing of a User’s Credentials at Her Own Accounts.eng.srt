1
00:00:09,040 --> 00:00:12,479
good morning

2
00:00:09,840 --> 00:00:14,320
my name is colby wah i'm a pc student

3
00:00:12,480 --> 00:00:16,880
from the department of computer science

4
00:00:14,320 --> 00:00:19,039
at unc chapel hill i'm presenting our

5
00:00:16,880 --> 00:00:21,359
work about detecting creating stuffing

6
00:00:19,039 --> 00:00:23,680
across websites this is a joint work

7
00:00:21,359 --> 00:00:25,359
with my advisor mike rider

8
00:00:23,680 --> 00:00:27,439
during a creating stuffing attack an

9
00:00:25,359 --> 00:00:29,359
attacker tried to access user accounts

10
00:00:27,439 --> 00:00:31,840
at multiple websites with a leaked

11
00:00:29,359 --> 00:00:32,719
user id password pairs obtained from

12
00:00:31,840 --> 00:00:35,840
data breaches

13
00:00:32,719 --> 00:00:37,280
vision malware social engineering etc

14
00:00:35,840 --> 00:00:39,280
if one of the users reused their

15
00:00:37,280 --> 00:00:41,760
password on this website her account at

16
00:00:39,280 --> 00:00:44,079
this website could be easily compromised

17
00:00:41,760 --> 00:00:46,160
credential stuffing is causing harm to

18
00:00:44,079 --> 00:00:47,039
web service providers and users as we

19
00:00:46,160 --> 00:00:49,038
speak

20
00:00:47,039 --> 00:00:50,800
with leaked passwords available

21
00:00:49,039 --> 00:00:52,399
attackers can launch very effective

22
00:00:50,800 --> 00:00:54,160
grading staffing attacks since most

23
00:00:52,399 --> 00:00:55,440
people reuse their passwords across

24
00:00:54,160 --> 00:00:57,279
their accounts

25
00:00:55,440 --> 00:00:58,800
existing approaches to mitigating

26
00:00:57,280 --> 00:01:01,120
harmful credit staffing

27
00:00:58,800 --> 00:01:02,399
includes detecting and discouraging use

28
00:01:01,120 --> 00:01:04,798
of leaked passwords

29
00:01:02,399 --> 00:01:06,560
detecting and discouraging password use

30
00:01:04,799 --> 00:01:08,240
and detecting and clean up account

31
00:01:06,560 --> 00:01:10,400
takeovers

32
00:01:08,240 --> 00:01:12,320
in addition by imposing more

33
00:01:10,400 --> 00:01:13,680
authentication burden on users

34
00:01:12,320 --> 00:01:15,600
two-factor and multi-factor

35
00:01:13,680 --> 00:01:18,080
authentication can improve users account

36
00:01:15,600 --> 00:01:20,080
security against creative stuffing

37
00:01:18,080 --> 00:01:22,080
however none of the existing approaches

38
00:01:20,080 --> 00:01:24,000
have tried to directly detect active

39
00:01:22,080 --> 00:01:26,080
credit stuffing across sites

40
00:01:24,000 --> 00:01:27,920
to the best of our knowledge our work is

41
00:01:26,080 --> 00:01:29,439
the first to detect active creative

42
00:01:27,920 --> 00:01:31,439
stuffing attacks across multiple

43
00:01:29,439 --> 00:01:33,279
websites

44
00:01:31,439 --> 00:01:34,559
before i introduce our creative stuffing

45
00:01:33,280 --> 00:01:36,560
detection framework

46
00:01:34,560 --> 00:01:38,159
let's first look at anomaly detection

47
00:01:36,560 --> 00:01:40,400
systems or ads

48
00:01:38,159 --> 00:01:42,240
which is an important ingredient in our

49
00:01:40,400 --> 00:01:44,479
framework design

50
00:01:42,240 --> 00:01:45,839
an ads is a system that marks the login

51
00:01:44,479 --> 00:01:47,920
attempt as abnormal

52
00:01:45,840 --> 00:01:49,840
or normal based on features extracted

53
00:01:47,920 --> 00:01:52,240
from users login histories

54
00:01:49,840 --> 00:01:54,640
like locking ip addresses browser user

55
00:01:52,240 --> 00:01:57,039
agent strings device fingerprints

56
00:01:54,640 --> 00:01:57,840
for example some ads simply marks the

57
00:01:57,040 --> 00:01:59,680
locking attempts at

58
00:01:57,840 --> 00:02:02,079
normal based on whether the logging ip

59
00:01:59,680 --> 00:02:04,719
address or device is new

60
00:02:02,079 --> 00:02:07,439
a more sophisticated ads like the one

61
00:02:04,719 --> 00:02:09,519
proposed by freeman at all in 2016

62
00:02:07,439 --> 00:02:12,160
leverages multiple logging features and

63
00:02:09,520 --> 00:02:14,239
evaluated the detection accuracy against

64
00:02:12,160 --> 00:02:16,799
attackers with different capability

65
00:02:14,239 --> 00:02:19,360
levels in our paper we mainly care about

66
00:02:16,800 --> 00:02:21,520
two most powerful attack models

67
00:02:19,360 --> 00:02:23,440
a research attacker can submit a correct

68
00:02:21,520 --> 00:02:24,640
password from the same country of the

69
00:02:23,440 --> 00:02:26,160
legitimate user

70
00:02:24,640 --> 00:02:28,480
the phishing attacker is even more

71
00:02:26,160 --> 00:02:29,680
powerful that has all capabilities of

72
00:02:28,480 --> 00:02:31,840
the research attacker

73
00:02:29,680 --> 00:02:34,160
and has additional capability which is

74
00:02:31,840 --> 00:02:37,120
obtain the browser usage and streams

75
00:02:34,160 --> 00:02:39,680
of the legitimacy user in our paper the

76
00:02:37,120 --> 00:02:40,640
ads serves as a sensitive tool to help

77
00:02:39,680 --> 00:02:42,480
identify

78
00:02:40,640 --> 00:02:43,920
abnormal locking attempts but it's not

79
00:02:42,480 --> 00:02:45,760
an authentication factor

80
00:02:43,920 --> 00:02:48,238
that directly decides the authentication

81
00:02:45,760 --> 00:02:49,840
result for a logging attempt

82
00:02:48,239 --> 00:02:51,440
to capture the pattern of korean

83
00:02:49,840 --> 00:02:53,200
stuffing let's have a look at the

84
00:02:51,440 --> 00:02:54,959
evidence trail left by a potential

85
00:02:53,200 --> 00:02:57,040
korean stuffing attack

86
00:02:54,959 --> 00:02:58,239
here let's see denote a leaked username

87
00:02:57,040 --> 00:03:00,799
password pair

88
00:02:58,239 --> 00:03:03,440
with alice at triple y.com as the

89
00:03:00,800 --> 00:03:05,920
username and lspwd as the user's

90
00:03:03,440 --> 00:03:07,440
password a korean staffer could try to

91
00:03:05,920 --> 00:03:09,359
access alice accounts

92
00:03:07,440 --> 00:03:10,720
at a multiple website by stuffing this

93
00:03:09,360 --> 00:03:12,959
leaked coordinated pair

94
00:03:10,720 --> 00:03:14,480
for example at the first site alice

95
00:03:12,959 --> 00:03:16,319
doesn't reuse their password

96
00:03:14,480 --> 00:03:17,599
so the credential is unable to access

97
00:03:16,319 --> 00:03:19,679
her account there

98
00:03:17,599 --> 00:03:21,119
meanwhile if the ads at the first site

99
00:03:19,680 --> 00:03:22,959
has a decent accuracy

100
00:03:21,120 --> 00:03:24,959
then the ads will probably mark this

101
00:03:22,959 --> 00:03:27,120
locking abnormal

102
00:03:24,959 --> 00:03:28,159
and the second side alice reuses her

103
00:03:27,120 --> 00:03:29,760
password

104
00:03:28,159 --> 00:03:31,519
but this duffer is unable to pass the

105
00:03:29,760 --> 00:03:33,920
two-factor authentication so

106
00:03:31,519 --> 00:03:35,680
the logging attempt fails similarly the

107
00:03:33,920 --> 00:03:36,159
ads will probably mark this logging

108
00:03:35,680 --> 00:03:39,360
attempt

109
00:03:36,159 --> 00:03:41,519
abnormal but at the third site even if

110
00:03:39,360 --> 00:03:43,920
the ads marks the login attempt abnormal

111
00:03:41,519 --> 00:03:45,519
the creating staffer can successfully

112
00:03:43,920 --> 00:03:47,518
access alice account

113
00:03:45,519 --> 00:03:49,200
there because she reused the leaked

114
00:03:47,519 --> 00:03:50,319
password and the two-factor

115
00:03:49,200 --> 00:03:53,280
authentication is not

116
00:03:50,319 --> 00:03:54,000
enabled or not supported now it's not

117
00:03:53,280 --> 00:03:56,080
hard to see

118
00:03:54,000 --> 00:03:58,159
that the trio left by creating stuffing

119
00:03:56,080 --> 00:04:01,439
attacks are those passwords submitted in

120
00:03:58,159 --> 00:04:03,200
abnormal logging attempts that fail okay

121
00:04:01,439 --> 00:04:04,640
now let's have a look at how to detect

122
00:04:03,200 --> 00:04:06,958
creative stuffing

123
00:04:04,640 --> 00:04:08,720
first let's keep an eye on the trail

124
00:04:06,959 --> 00:04:09,920
that is each participating website

125
00:04:08,720 --> 00:04:12,159
collects the passwords

126
00:04:09,920 --> 00:04:14,640
tried at abnormal and failed logging

127
00:04:12,159 --> 00:04:16,560
attempt for its user for example

128
00:04:14,640 --> 00:04:18,000
the attacker tries to log in alice

129
00:04:16,560 --> 00:04:19,600
account at the first site

130
00:04:18,000 --> 00:04:21,040
since it's an abnormal and failed

131
00:04:19,600 --> 00:04:23,840
walking attempt

132
00:04:21,040 --> 00:04:25,919
the first site collects alice pwd into a

133
00:04:23,840 --> 00:04:28,239
suspicious password set for alice

134
00:04:25,919 --> 00:04:30,880
similarly the second site also class

135
00:04:28,240 --> 00:04:31,840
alice pwd because ads deems the login

136
00:04:30,880 --> 00:04:33,280
attempt abnormal

137
00:04:31,840 --> 00:04:35,119
and the attacker fails to pass the

138
00:04:33,280 --> 00:04:37,119
two-factor authentication even if the

139
00:04:35,120 --> 00:04:39,040
submitted password is correct

140
00:04:37,120 --> 00:04:40,560
in our framework we call this process a

141
00:04:39,040 --> 00:04:43,280
collecting phase because

142
00:04:40,560 --> 00:04:44,720
this process about websites collecting

143
00:04:43,280 --> 00:04:46,479
passwords

144
00:04:44,720 --> 00:04:48,000
submitted for abnormal and failed

145
00:04:46,479 --> 00:04:50,159
logging attempts

146
00:04:48,000 --> 00:04:52,400
okay recall that previously without our

147
00:04:50,160 --> 00:04:54,720
framework the korean stuffer was able to

148
00:04:52,400 --> 00:04:56,638
access ali's account at the third site

149
00:04:54,720 --> 00:04:58,160
because the leaked password is reused

150
00:04:56,639 --> 00:04:59,120
and no two-factor authentication is

151
00:04:58,160 --> 00:05:00,880
enabled

152
00:04:59,120 --> 00:05:02,639
but things got a little different after

153
00:05:00,880 --> 00:05:04,719
our framework is enabled

154
00:05:02,639 --> 00:05:06,720
before allowing korean software to get

155
00:05:04,720 --> 00:05:08,800
in when the password matches

156
00:05:06,720 --> 00:05:09,759
our framework allows the site to do one

157
00:05:08,800 --> 00:05:12,000
more thing

158
00:05:09,759 --> 00:05:13,919
which is if the ads deems the login temp

159
00:05:12,000 --> 00:05:14,560
abnormal while the submitted password is

160
00:05:13,919 --> 00:05:17,520
correct

161
00:05:14,560 --> 00:05:18,080
the third site would ask other peer site

162
00:05:17,520 --> 00:05:19,599
if

163
00:05:18,080 --> 00:05:21,680
they have collected the submitted

164
00:05:19,600 --> 00:05:22,960
password in their suspicious set for

165
00:05:21,680 --> 00:05:25,120
alice

166
00:05:22,960 --> 00:05:27,120
in our example the first and the second

167
00:05:25,120 --> 00:05:28,800
site will respond with the yeses

168
00:05:27,120 --> 00:05:30,880
if the number of yeses received by the

169
00:05:28,800 --> 00:05:33,199
third site is no less than a preset

170
00:05:30,880 --> 00:05:34,000
threshold which is termed attack within

171
00:05:33,199 --> 00:05:36,320
our paper

172
00:05:34,000 --> 00:05:38,560
then the third site would see this as a

173
00:05:36,320 --> 00:05:40,880
positive critical stuffing detection

174
00:05:38,560 --> 00:05:42,000
in our paper this process is termed the

175
00:05:40,880 --> 00:05:43,840
counting phase

176
00:05:42,000 --> 00:05:45,440
which includes asking responding

177
00:05:43,840 --> 00:05:46,960
counting the number of positives and

178
00:05:45,440 --> 00:05:49,759
deciding if the logging

179
00:05:46,960 --> 00:05:50,799
is part of creative stuffing attack here

180
00:05:49,759 --> 00:05:52,320
let's look at two

181
00:05:50,800 --> 00:05:54,160
important questions about detection

182
00:05:52,320 --> 00:05:56,240
accuracy of our framework

183
00:05:54,160 --> 00:05:57,840
what info forgetful user behaves like

184
00:05:56,240 --> 00:05:59,360
creating staffer by submitting a

185
00:05:57,840 --> 00:06:01,039
password to different sites

186
00:05:59,360 --> 00:06:02,560
and what if an attacker tries to

187
00:06:01,039 --> 00:06:04,639
circumvent detection

188
00:06:02,560 --> 00:06:06,880
by adjusting attack strategy based on

189
00:06:04,639 --> 00:06:10,479
some levels of prior knowledge

190
00:06:06,880 --> 00:06:12,319
about the user in our paper we model a

191
00:06:10,479 --> 00:06:14,240
forgetful user as a markov decision

192
00:06:12,319 --> 00:06:15,440
process whose goal is to maximize the

193
00:06:14,240 --> 00:06:17,280
faucet section rig

194
00:06:15,440 --> 00:06:18,960
we also model a creative software as

195
00:06:17,280 --> 00:06:20,719
another markup decision process whose

196
00:06:18,960 --> 00:06:21,680
goal is to minimize the tree detection

197
00:06:20,720 --> 00:06:23,280
rate

198
00:06:21,680 --> 00:06:24,960
based on these two models we

199
00:06:23,280 --> 00:06:26,719
conservatively estimate the false

200
00:06:24,960 --> 00:06:28,400
detection rate and the tree detection

201
00:06:26,720 --> 00:06:30,319
rate of our framework

202
00:06:28,400 --> 00:06:31,758
for example we assume that a gradient

203
00:06:30,319 --> 00:06:34,240
stopper has capability

204
00:06:31,759 --> 00:06:35,520
equivalent to phishing attackers the

205
00:06:34,240 --> 00:06:38,000
most powerful attacker

206
00:06:35,520 --> 00:06:39,840
model in the original eds paper the

207
00:06:38,000 --> 00:06:41,600
first sub-graph shows the baseline

208
00:06:39,840 --> 00:06:42,560
setting which involves some level of

209
00:06:41,600 --> 00:06:45,360
password use

210
00:06:42,560 --> 00:06:45,840
and a set of four distinct passwords for

211
00:06:45,360 --> 00:06:47,919
across

212
00:06:45,840 --> 00:06:50,318
10 different accounts without any

213
00:06:47,919 --> 00:06:52,000
two-factor authentication enabled

214
00:06:50,319 --> 00:06:54,479
each blue curve represents a different

215
00:06:52,000 --> 00:06:57,039
ads threshold in the collecting phase

216
00:06:54,479 --> 00:06:58,318
the black dashed curve in each subfigure

217
00:06:57,039 --> 00:07:01,440
is corresponding ads

218
00:06:58,319 --> 00:07:03,440
accuracy in detecting abnormal logins in

219
00:07:01,440 --> 00:07:05,840
the original ads paper

220
00:07:03,440 --> 00:07:07,840
the black dotted lines represents random

221
00:07:05,840 --> 00:07:09,520
guessing that is tossing a coin and

222
00:07:07,840 --> 00:07:11,039
determining if a locking intent is

223
00:07:09,520 --> 00:07:12,400
abnormal or not

224
00:07:11,039 --> 00:07:14,318
starting from the first baseline

225
00:07:12,400 --> 00:07:16,479
subgraph each subgraph on the right

226
00:07:14,319 --> 00:07:18,400
corresponds to one different parameter

227
00:07:16,479 --> 00:07:20,560
that strengthens the overall security

228
00:07:18,400 --> 00:07:23,039
compared to the baseline setting

229
00:07:20,560 --> 00:07:24,240
the y-axis of these graphs represents

230
00:07:23,039 --> 00:07:26,400
true detection rates

231
00:07:24,240 --> 00:07:27,599
while the x-axis represents the false

232
00:07:26,400 --> 00:07:29,758
detection rate

233
00:07:27,599 --> 00:07:32,000
so the upper left corners of these

234
00:07:29,759 --> 00:07:34,080
graphs represent the ideal accuracy

235
00:07:32,000 --> 00:07:35,840
that is perfect true detection rate and

236
00:07:34,080 --> 00:07:37,599
zero false detection rate

237
00:07:35,840 --> 00:07:39,599
as you can see here our framework's

238
00:07:37,599 --> 00:07:42,159
accuracy in detecting creating stuffing

239
00:07:39,599 --> 00:07:43,520
shown by the blue curves is closer to

240
00:07:42,160 --> 00:07:46,240
the ideal accuracy point

241
00:07:43,520 --> 00:07:48,479
than the underlying ads accuracy in

242
00:07:46,240 --> 00:07:50,879
detecting abnormal logins

243
00:07:48,479 --> 00:07:52,240
when facing the weaker attacker model

244
00:07:50,879 --> 00:07:54,160
researching attackers

245
00:07:52,240 --> 00:07:55,919
the detection accuracy of our framework

246
00:07:54,160 --> 00:07:57,599
is even better

247
00:07:55,919 --> 00:07:59,440
after we look at the functionality and

248
00:07:57,599 --> 00:08:01,520
effectiveness of our framework

249
00:07:59,440 --> 00:08:02,719
now let's look at some other features of

250
00:08:01,520 --> 00:08:04,719
our framework

251
00:08:02,720 --> 00:08:06,240
first we expect our framework to ensure

252
00:08:04,720 --> 00:08:08,160
user's account security

253
00:08:06,240 --> 00:08:10,319
by detecting creating stuffing while not

254
00:08:08,160 --> 00:08:12,639
linking users passwords across sites

255
00:08:10,319 --> 00:08:14,479
for example by asking the plan tax

256
00:08:12,639 --> 00:08:16,319
question the first and second site would

257
00:08:14,479 --> 00:08:17,599
know that alice pwt is the valid

258
00:08:16,319 --> 00:08:20,240
password for alice

259
00:08:17,599 --> 00:08:22,159
at the third site so in our framework we

260
00:08:20,240 --> 00:08:24,160
adopted a two-party secure computation

261
00:08:22,160 --> 00:08:25,680
protocol called private membership test

262
00:08:24,160 --> 00:08:27,759
or pmt protocol

263
00:08:25,680 --> 00:08:30,960
to complete the asking and responding

264
00:08:27,759 --> 00:08:33,039
process in a privacy preserving way

265
00:08:30,960 --> 00:08:34,559
in our paper we propose a new pmt

266
00:08:33,039 --> 00:08:35,199
protocol construction based on cook

267
00:08:34,559 --> 00:08:37,598
filters and

268
00:08:35,200 --> 00:08:40,320
partially homomorphic encryption that it

269
00:08:37,599 --> 00:08:42,080
requires only one round of interaction

270
00:08:40,320 --> 00:08:44,080
please refer to our paper for more

271
00:08:42,080 --> 00:08:45,839
detail another important

272
00:08:44,080 --> 00:08:47,839
component of our framework is a third

273
00:08:45,839 --> 00:08:49,839
party called the directory

274
00:08:47,839 --> 00:08:51,760
the directory is a lookup table that

275
00:08:49,839 --> 00:08:54,240
maintains where a user has account

276
00:08:51,760 --> 00:08:55,360
in our example the directory can help

277
00:08:54,240 --> 00:08:57,519
the third site

278
00:08:55,360 --> 00:08:59,200
to locate and contact other websites

279
00:08:57,519 --> 00:09:01,519
where alice has accounts

280
00:08:59,200 --> 00:09:02,720
for example when a pmd quarter comes in

281
00:09:01,519 --> 00:09:04,800
the directory figures

282
00:09:02,720 --> 00:09:06,720
out all sites where alice has accounts

283
00:09:04,800 --> 00:09:08,160
and then forwards the pmt query message

284
00:09:06,720 --> 00:09:10,480
to those websites

285
00:09:08,160 --> 00:09:11,839
then the directory helps forward

286
00:09:10,480 --> 00:09:14,000
responses back

287
00:09:11,839 --> 00:09:16,240
in terms of user privacy we expect our

288
00:09:14,000 --> 00:09:18,320
free more to achieve login privacy

289
00:09:16,240 --> 00:09:21,680
that is to hide from other participating

290
00:09:18,320 --> 00:09:23,600
websites where the user is trying to log

291
00:09:21,680 --> 00:09:25,599
if the directory is trusted for login

292
00:09:23,600 --> 00:09:26,320
privacy then things become simple

293
00:09:25,600 --> 00:09:28,240
because

294
00:09:26,320 --> 00:09:30,240
the directory could hide the identity of

295
00:09:28,240 --> 00:09:34,000
the site where the user is trying to log

296
00:09:30,240 --> 00:09:36,720
in call the requester from other website

297
00:09:34,000 --> 00:09:38,880
called responders in a paper however

298
00:09:36,720 --> 00:09:41,279
it's likely that directory is untrusted

299
00:09:38,880 --> 00:09:42,959
for logging privacy by the requester

300
00:09:41,279 --> 00:09:44,959
in this case the requester could choose

301
00:09:42,959 --> 00:09:45,760
to connect the directory by anonymous

302
00:09:44,959 --> 00:09:48,800
communication

303
00:09:45,760 --> 00:09:50,480
for example tor connections to hide its

304
00:09:48,800 --> 00:09:52,479
identity from the directory and the

305
00:09:50,480 --> 00:09:54,320
responders

306
00:09:52,480 --> 00:09:56,720
we evaluated the scalability of a

307
00:09:54,320 --> 00:09:57,839
framework on our prototype system in two

308
00:09:56,720 --> 00:09:59,279
scenarios

309
00:09:57,839 --> 00:10:01,200
when the directory is trusted for

310
00:09:59,279 --> 00:10:02,640
logging privacy and no anonymous

311
00:10:01,200 --> 00:10:04,640
communication is used

312
00:10:02,640 --> 00:10:07,040
and when the director is untrusted for

313
00:10:04,640 --> 00:10:09,519
logging privacy and tori is used between

314
00:10:07,040 --> 00:10:11,519
the requester and the directory

315
00:10:09,519 --> 00:10:13,519
if we define the responses returned to

316
00:10:11,519 --> 00:10:14,000
the requester within five and eight

317
00:10:13,519 --> 00:10:16,079
seconds

318
00:10:14,000 --> 00:10:17,279
as a qualifying response is respectively

319
00:10:16,079 --> 00:10:20,160
for the trusted

320
00:10:17,279 --> 00:10:21,040
and uncharted directory cases then the

321
00:10:20,160 --> 00:10:22,959
y-axis

322
00:10:21,040 --> 00:10:25,040
represents the maximum number of queries

323
00:10:22,959 --> 00:10:26,160
our prototype system can process within

324
00:10:25,040 --> 00:10:28,319
one second

325
00:10:26,160 --> 00:10:30,959
the x-axis represents the number of

326
00:10:28,320 --> 00:10:33,200
responders that participate in each run

327
00:10:30,959 --> 00:10:34,719
of the protocol and each curve

328
00:10:33,200 --> 00:10:38,079
represents a suspicious

329
00:10:34,720 --> 00:10:40,399
set size at each responder to better

330
00:10:38,079 --> 00:10:42,959
interpret the scalability numbers

331
00:10:40,399 --> 00:10:44,560
we estimated the scalability needs of

332
00:10:42,959 --> 00:10:48,000
dealing with creating stuffing

333
00:10:44,560 --> 00:10:49,839
based on existing report our estimate

334
00:10:48,000 --> 00:10:50,560
shows that to accommodate the locking

335
00:10:49,839 --> 00:10:53,120
load of these

336
00:10:50,560 --> 00:10:55,760
four large sectors of the u.s economy

337
00:10:53,120 --> 00:10:57,519
the required throughput is 660 quarters

338
00:10:55,760 --> 00:10:58,560
per second when facing fission level

339
00:10:57,519 --> 00:11:01,839
korean stuffers

340
00:10:58,560 --> 00:11:03,359
or 227 queries per second

341
00:11:01,839 --> 00:11:05,440
when facing researcher level creating

342
00:11:03,360 --> 00:11:07,600
stuffers now let's put these

343
00:11:05,440 --> 00:11:09,519
two numbers back into our scalability

344
00:11:07,600 --> 00:11:11,120
graphs when facing creating stuffers

345
00:11:09,519 --> 00:11:13,120
with efficient capabilities

346
00:11:11,120 --> 00:11:14,720
our prototype system could support up to

347
00:11:13,120 --> 00:11:16,320
65 responders

348
00:11:14,720 --> 00:11:18,480
when the director is trusted for logging

349
00:11:16,320 --> 00:11:19,760
privacy when facing grading suffers with

350
00:11:18,480 --> 00:11:21,760
the research and capability

351
00:11:19,760 --> 00:11:23,200
our prototype system could support up to

352
00:11:21,760 --> 00:11:25,040
32 responders

353
00:11:23,200 --> 00:11:26,560
even if the director is untrusted for

354
00:11:25,040 --> 00:11:29,120
logging privacy

355
00:11:26,560 --> 00:11:31,040
to sum up we proposed a framework to

356
00:11:29,120 --> 00:11:33,120
detect active korean stuffing

357
00:11:31,040 --> 00:11:35,279
by leveraging 80 as an evidence trail

358
00:11:33,120 --> 00:11:38,560
left by creating stuffing

359
00:11:35,279 --> 00:11:41,120
we also proposed new pmt protocol

360
00:11:38,560 --> 00:11:42,800
to ensure users account security the

361
00:11:41,120 --> 00:11:43,680
logging privacy is enforced by the

362
00:11:42,800 --> 00:11:46,959
directory

363
00:11:43,680 --> 00:11:47,599
or by tor in our paper to the best our

364
00:11:46,959 --> 00:11:49,439
knowledge

365
00:11:47,600 --> 00:11:50,959
our work is the first to detect active

366
00:11:49,440 --> 00:11:52,720
gradient staffing attacks across

367
00:11:50,959 --> 00:11:54,959
multiple websites

368
00:11:52,720 --> 00:11:56,079
even a minimal infrastructure deployment

369
00:11:54,959 --> 00:11:58,000
of our framework

370
00:11:56,079 --> 00:12:00,399
to support the combined logging load

371
00:11:58,000 --> 00:12:01,839
experienced by four major sectors of the

372
00:12:00,399 --> 00:12:11,839
u.s economy

373
00:12:01,839 --> 00:12:11,839
thank you very much for your attention

374
00:12:12,800 --> 00:12:14,880
you

