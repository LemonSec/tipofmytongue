1
00:00:08,720 --> 00:00:11,280
hello

2
00:00:09,360 --> 00:00:12,719
my name is maintenmussa and in this

3
00:00:11,280 --> 00:00:13,599
presentation i want to tell you about

4
00:00:12,719 --> 00:00:15,838
the design

5
00:00:13,599 --> 00:00:18,080
and a few applications of blockcy a

6
00:00:15,839 --> 00:00:20,400
blockchain analysis platform that we've

7
00:00:18,080 --> 00:00:20,400
built

8
00:00:20,560 --> 00:00:24,560
let's start with the question why did we

9
00:00:22,800 --> 00:00:25,840
build a blockchain analysis tool in the

10
00:00:24,560 --> 00:00:28,320
first place

11
00:00:25,840 --> 00:00:30,000
blockchains contain an unprecedented

12
00:00:28,320 --> 00:00:32,880
research corpus of financial

13
00:00:30,000 --> 00:00:36,000
transactions bitcoin's blockchain alone

14
00:00:32,880 --> 00:00:38,000
contains more than 280 gigabytes of data

15
00:00:36,000 --> 00:00:40,559
this status interesting and insightful

16
00:00:38,000 --> 00:00:42,879
for both scientific analysis

17
00:00:40,559 --> 00:00:44,239
and commercial applications for example

18
00:00:42,879 --> 00:00:47,360
to study user behavior

19
00:00:44,239 --> 00:00:49,360
or answer economic questions

20
00:00:47,360 --> 00:00:50,960
available commercial blockchain analysis

21
00:00:49,360 --> 00:00:52,480
tools are often tailored towards

22
00:00:50,960 --> 00:00:54,879
specific use cases

23
00:00:52,480 --> 00:00:57,440
such as law enforcement investigations

24
00:00:54,879 --> 00:01:00,399
or insights for cryptocurrency traders

25
00:00:57,440 --> 00:01:00,960
however there was a lack of fast general

26
00:01:00,399 --> 00:01:05,840
purpose

27
00:01:00,960 --> 00:01:08,479
tools suited for scientific analysis

28
00:01:05,840 --> 00:01:10,720
now 280 gigabytes for the bitcoin

29
00:01:08,479 --> 00:01:12,400
blockchain sounds like a lot of data

30
00:01:10,720 --> 00:01:14,000
raising the question whether we need to

31
00:01:12,400 --> 00:01:17,840
build a distributed system

32
00:01:14,000 --> 00:01:20,080
to handle it but as it turns out

33
00:01:17,840 --> 00:01:21,680
if we exclude data unnecessary for most

34
00:01:20,080 --> 00:01:24,320
scientific analyses

35
00:01:21,680 --> 00:01:26,479
such as transaction signatures and apply

36
00:01:24,320 --> 00:01:28,399
some optimizations and transformations

37
00:01:26,479 --> 00:01:30,320
we can easily fit the core transaction

38
00:01:28,400 --> 00:01:32,000
graph into the memory of a single

39
00:01:30,320 --> 00:01:33,600
commodity ec2 instance

40
00:01:32,000 --> 00:01:36,400
that you can get for under a thousand

41
00:01:33,600 --> 00:01:38,559
dollars per month

42
00:01:36,400 --> 00:01:40,880
and with cloud providers offering

43
00:01:38,560 --> 00:01:42,640
instances with up to terabytes of memory

44
00:01:40,880 --> 00:01:44,399
we expect that we can scale vertically

45
00:01:42,640 --> 00:01:46,720
for the foreseeable future

46
00:01:44,399 --> 00:01:47,920
allowing us to build a tool that runs on

47
00:01:46,720 --> 00:01:49,360
a single machine

48
00:01:47,920 --> 00:01:52,399
rather than having to design a

49
00:01:49,360 --> 00:01:52,399
distributed system

50
00:01:53,280 --> 00:01:56,640
in building blockcy we emphasized three

51
00:01:55,439 --> 00:01:59,199
main goals

52
00:01:56,640 --> 00:02:00,079
high performance useful capabilities for

53
00:01:59,200 --> 00:02:03,200
the analyst

54
00:02:00,079 --> 00:02:05,039
and a user-friendly interface

55
00:02:03,200 --> 00:02:07,439
to achieve high performance we built

56
00:02:05,040 --> 00:02:09,280
blockcy as an in-memory database

57
00:02:07,439 --> 00:02:11,280
by exploiting many domain-specific

58
00:02:09,280 --> 00:02:13,520
characteristics of blockchains

59
00:02:11,280 --> 00:02:14,720
such as their append-only nature we

60
00:02:13,520 --> 00:02:16,800
built a system that can

61
00:02:14,720 --> 00:02:17,920
analyze the full bitcoin blockchain in a

62
00:02:16,800 --> 00:02:22,480
matter of seconds

63
00:02:17,920 --> 00:02:24,958
for typical longitudinal analysis

64
00:02:22,480 --> 00:02:26,720
as for block size capabilities just

65
00:02:24,959 --> 00:02:28,400
supporting the bitcoin blockchain would

66
00:02:26,720 --> 00:02:30,480
limit its usefulness

67
00:02:28,400 --> 00:02:32,000
thus our goal was to support a few

68
00:02:30,480 --> 00:02:34,000
different blockchains

69
00:02:32,000 --> 00:02:37,680
we also include tools for analysis tests

70
00:02:34,000 --> 00:02:40,080
that are common in blockchain research

71
00:02:37,680 --> 00:02:42,080
on the usability front we offer both a c

72
00:02:40,080 --> 00:02:43,360
plus interface for performance critical

73
00:02:42,080 --> 00:02:45,040
analysis

74
00:02:43,360 --> 00:02:47,120
and a user-friendly python interface

75
00:02:45,040 --> 00:02:48,840
that allows really anyone who has a bit

76
00:02:47,120 --> 00:02:50,319
of python experience to analyze

77
00:02:48,840 --> 00:02:51,680
blockchains

78
00:02:50,319 --> 00:02:53,599
to bring the performance of this

79
00:02:51,680 --> 00:02:56,080
interface closer to that of the sieves

80
00:02:53,599 --> 00:02:56,879
plus interface we've developed a fluent

81
00:02:56,080 --> 00:02:59,200
interface

82
00:02:56,879 --> 00:03:00,399
that allows the user to specify advanced

83
00:02:59,200 --> 00:03:04,959
queries in python

84
00:03:00,400 --> 00:03:06,800
that are then executed in c plus

85
00:03:04,959 --> 00:03:08,720
the first big question that we had to

86
00:03:06,800 --> 00:03:10,959
answer was which blockchains

87
00:03:08,720 --> 00:03:12,640
should block sci support there are

88
00:03:10,959 --> 00:03:14,239
hundreds of blockchains

89
00:03:12,640 --> 00:03:17,200
some of which differ from bitcoin in

90
00:03:14,239 --> 00:03:18,879
minor ways some which differ drastically

91
00:03:17,200 --> 00:03:21,359
supporting too few would limit block

92
00:03:18,879 --> 00:03:24,879
size usefulness but supporting too many

93
00:03:21,360 --> 00:03:27,040
would make optimizations much harder

94
00:03:24,879 --> 00:03:28,640
we decided to support cryptocurrencies

95
00:03:27,040 --> 00:03:30,720
whose transaction graph layout is

96
00:03:28,640 --> 00:03:32,319
similar to that of bitcoin

97
00:03:30,720 --> 00:03:34,640
cryptocurrencies that make smaller

98
00:03:32,319 --> 00:03:37,518
changes to its functionality or design

99
00:03:34,640 --> 00:03:39,599
are partially supported cryptocurrencies

100
00:03:37,519 --> 00:03:43,840
with drastically different designs

101
00:03:39,599 --> 00:03:43,839
such as ethereum are not supported

102
00:03:45,200 --> 00:03:48,798
site consists of two main components a

103
00:03:47,840 --> 00:03:51,280
parser

104
00:03:48,799 --> 00:03:53,040
and an analysis library the first

105
00:03:51,280 --> 00:03:54,400
challenge was to design an efficient

106
00:03:53,040 --> 00:03:56,239
transformation process

107
00:03:54,400 --> 00:03:58,159
that can take the blockchain data from a

108
00:03:56,239 --> 00:04:00,000
full node and convert it into an

109
00:03:58,159 --> 00:04:02,319
optimized format

110
00:04:00,000 --> 00:04:04,480
our parser can read data either from the

111
00:04:02,319 --> 00:04:05,760
raw block files on disk for bitcoin and

112
00:04:04,480 --> 00:04:08,238
bitcoin cache

113
00:04:05,760 --> 00:04:10,000
or from the json rpc interface of

114
00:04:08,239 --> 00:04:11,280
smaller cryptocurrencies that provide

115
00:04:10,000 --> 00:04:14,000
the same api

116
00:04:11,280 --> 00:04:16,238
as the bitcoin core client it allows to

117
00:04:14,000 --> 00:04:18,238
incrementally update the blockchain

118
00:04:16,238 --> 00:04:20,238
works with arbitrary orderings of

119
00:04:18,238 --> 00:04:21,039
transactions within blocks which was

120
00:04:20,238 --> 00:04:23,599
important

121
00:04:21,040 --> 00:04:25,280
to support bitcoin cash and comes with

122
00:04:23,600 --> 00:04:27,199
many other optimizations to make it

123
00:04:25,280 --> 00:04:28,400
highly efficient

124
00:04:27,199 --> 00:04:30,400
martian platinum has also been

125
00:04:28,400 --> 00:04:32,239
developing a multi-chain mode that is

126
00:04:30,400 --> 00:04:33,840
optimized for parsing and analyzing

127
00:04:32,240 --> 00:04:36,639
forked blockchains that share a lot of

128
00:04:33,840 --> 00:04:36,638
common history

129
00:04:37,280 --> 00:04:41,280
the parser produces the blockchain data

130
00:04:39,360 --> 00:04:42,960
with the data layout that is optimized

131
00:04:41,280 --> 00:04:44,400
for sequential analysis of the

132
00:04:42,960 --> 00:04:46,719
transaction graph

133
00:04:44,400 --> 00:04:48,880
a key challenge here was to find a good

134
00:04:46,720 --> 00:04:51,199
trade-off between memory efficiency

135
00:04:48,880 --> 00:04:53,120
and performance based on our own

136
00:04:51,199 --> 00:04:54,800
experience with blockchain analysis

137
00:04:53,120 --> 00:04:57,120
we've chosen a layout where the most

138
00:04:54,800 --> 00:04:59,040
important data is loaded by default

139
00:04:57,120 --> 00:05:00,960
and data that may only be required in

140
00:04:59,040 --> 00:05:04,080
specific analysis

141
00:05:00,960 --> 00:05:06,000
is loaded into memory on demand

142
00:05:04,080 --> 00:05:07,120
we de-duplicate data of addresses that

143
00:05:06,000 --> 00:05:09,360
are being reused

144
00:05:07,120 --> 00:05:10,479
even across different address types and

145
00:05:09,360 --> 00:05:12,960
on top of this all

146
00:05:10,479 --> 00:05:15,199
have a few indexes for common lookups

147
00:05:12,960 --> 00:05:15,758
such as outputs that are associated with

148
00:05:15,199 --> 00:05:19,280
specific

149
00:05:15,759 --> 00:05:21,280
addresses these optimizations make

150
00:05:19,280 --> 00:05:22,960
blockcy really really fast

151
00:05:21,280 --> 00:05:24,799
we can analyze the bitcoin blockchain in

152
00:05:22,960 --> 00:05:26,638
a matter of seconds

153
00:05:24,800 --> 00:05:28,960
using the c plus plus interface we can

154
00:05:26,639 --> 00:05:30,360
iterate over more than 600 000 blocks

155
00:05:28,960 --> 00:05:34,000
including more than

156
00:05:30,360 --> 00:05:35,199
480 million transactions in 11.3 seconds

157
00:05:34,000 --> 00:05:38,000
single threaded

158
00:05:35,199 --> 00:05:41,759
and much faster using multi depending on

159
00:05:38,000 --> 00:05:41,759
how many cores you have available

160
00:05:42,479 --> 00:05:46,159
the block size analysis library allows

161
00:05:44,479 --> 00:05:47,199
for easy interaction with the block side

162
00:05:46,160 --> 00:05:48,720
data

163
00:05:47,199 --> 00:05:50,560
as we've designed blockcipher's

164
00:05:48,720 --> 00:05:52,320
scientific data analysis

165
00:05:50,560 --> 00:05:54,400
it provides the analyst with a static

166
00:05:52,320 --> 00:05:55,680
view upon data that can still be updated

167
00:05:54,400 --> 00:05:58,080
on disk

168
00:05:55,680 --> 00:06:00,080
it comes with a mapreduce abstraction a

169
00:05:58,080 --> 00:06:02,400
variety of forensic capabilities

170
00:06:00,080 --> 00:06:04,080
such as clustering coinjoin detection

171
00:06:02,400 --> 00:06:05,520
and change address heuristics

172
00:06:04,080 --> 00:06:08,960
and it can collect transaction

173
00:06:05,520 --> 00:06:08,960
timestamps from a full node

174
00:06:09,280 --> 00:06:12,880
to make working with blockchain as

175
00:06:10,880 --> 00:06:14,479
accessible as possible we provide a

176
00:06:12,880 --> 00:06:15,759
python interface to analyze the

177
00:06:14,479 --> 00:06:17,359
blockchain data

178
00:06:15,759 --> 00:06:18,960
this is especially convenient if you

179
00:06:17,360 --> 00:06:20,240
just want to look at a few transactions

180
00:06:18,960 --> 00:06:21,919
or addresses

181
00:06:20,240 --> 00:06:24,240
why you can iterate over the blockchain

182
00:06:21,919 --> 00:06:25,520
using pure python as shown in the first

183
00:06:24,240 --> 00:06:28,240
example here

184
00:06:25,520 --> 00:06:29,198
this is much slower than in c plus to

185
00:06:28,240 --> 00:06:31,039
bridge this gap

186
00:06:29,199 --> 00:06:32,560
we've also developed a fluent interface

187
00:06:31,039 --> 00:06:35,440
that brings python interaction

188
00:06:32,560 --> 00:06:37,440
closer to the performance of c the

189
00:06:35,440 --> 00:06:39,520
fluent interface allows the analyst to

190
00:06:37,440 --> 00:06:40,880
specify complex selection criteria in

191
00:06:39,520 --> 00:06:43,758
the python interface

192
00:06:40,880 --> 00:06:44,560
which are then evaluated in c plus plus

193
00:06:43,759 --> 00:06:46,080
for example

194
00:06:44,560 --> 00:06:48,400
if we wanted to find transactions that

195
00:06:46,080 --> 00:06:49,120
pay more than 0.1 bitcoin in transaction

196
00:06:48,400 --> 00:06:50,960
fees

197
00:06:49,120 --> 00:06:53,039
we do not need to instantiate python

198
00:06:50,960 --> 00:06:55,198
objects for every transaction

199
00:06:53,039 --> 00:06:57,039
on the chain like in the first example

200
00:06:55,199 --> 00:06:59,680
but can instead specify

201
00:06:57,039 --> 00:07:00,880
the query you see at the bottom this

202
00:06:59,680 --> 00:07:03,039
gets computed in c

203
00:07:00,880 --> 00:07:06,400
plus and we can retrieve the results

204
00:07:03,039 --> 00:07:06,400
which is much faster

205
00:07:07,599 --> 00:07:11,440
in our paper we showcase a number of

206
00:07:09,599 --> 00:07:12,960
applications for blockchain that touch

207
00:07:11,440 --> 00:07:14,880
upon the security

208
00:07:12,960 --> 00:07:16,400
privacy and economics of

209
00:07:14,880 --> 00:07:18,639
cryptocurrencies

210
00:07:16,400 --> 00:07:20,000
as an example i briefly go through one

211
00:07:18,639 --> 00:07:21,759
of those applications

212
00:07:20,000 --> 00:07:23,360
which are some unfortunate effects of

213
00:07:21,759 --> 00:07:26,080
using bitcoin's multi-signature

214
00:07:23,360 --> 00:07:26,080
functionality

215
00:07:26,720 --> 00:07:29,759
bitcoin's current multisig

216
00:07:28,080 --> 00:07:31,520
implementation requires the user to

217
00:07:29,759 --> 00:07:34,240
specify a list of keys

218
00:07:31,520 --> 00:07:36,318
as well as a threshold of how many of

219
00:07:34,240 --> 00:07:38,960
those keys must provide a signature

220
00:07:36,319 --> 00:07:40,960
for a transaction to become valid this

221
00:07:38,960 --> 00:07:41,758
provides better security than just a

222
00:07:40,960 --> 00:07:43,840
single key

223
00:07:41,759 --> 00:07:45,680
but also exposes potentially sensitive

224
00:07:43,840 --> 00:07:48,000
information about changes in these

225
00:07:45,680 --> 00:07:50,160
access control structures

226
00:07:48,000 --> 00:07:51,759
those may for example correspond to a

227
00:07:50,160 --> 00:07:53,840
company's internal events

228
00:07:51,759 --> 00:07:55,599
such as the loss of a device that stored

229
00:07:53,840 --> 00:07:58,878
a key or the departure of an

230
00:07:55,599 --> 00:08:00,560
important employee who kept it we found

231
00:07:58,879 --> 00:08:02,240
that there are thousands of transactions

232
00:08:00,560 --> 00:08:02,560
every month that potentially exhibit

233
00:08:02,240 --> 00:08:04,879
such

234
00:08:02,560 --> 00:08:07,120
information leakage for example through

235
00:08:04,879 --> 00:08:10,840
the transfer between multisig addresses

236
00:08:07,120 --> 00:08:12,720
with overlapping but not identical key

237
00:08:10,840 --> 00:08:14,560
sets

238
00:08:12,720 --> 00:08:16,400
because multiset commonly uses a

239
00:08:14,560 --> 00:08:17,199
different script type than normal thing

240
00:08:16,400 --> 00:08:19,198
i can use

241
00:08:17,199 --> 00:08:20,879
we can distinguish between the addresses

242
00:08:19,199 --> 00:08:23,759
of different users

243
00:08:20,879 --> 00:08:24,720
if for example a normal user who uses a

244
00:08:23,759 --> 00:08:27,039
single key

245
00:08:24,720 --> 00:08:29,280
makes a payment to a company that uses

246
00:08:27,039 --> 00:08:30,400
multi-signature wrapped in a script hash

247
00:08:29,280 --> 00:08:32,718
address

248
00:08:30,400 --> 00:08:33,760
her wallet will generate two outputs the

249
00:08:32,719 --> 00:08:36,240
actual spend

250
00:08:33,760 --> 00:08:36,880
and a change address because the change

251
00:08:36,240 --> 00:08:39,519
goes back

252
00:08:36,880 --> 00:08:40,958
to a normal single address output it

253
00:08:39,519 --> 00:08:43,599
allows us to tell apart

254
00:08:40,958 --> 00:08:45,279
the span from the change output we found

255
00:08:43,599 --> 00:08:46,399
that this may allow to determine the

256
00:08:45,279 --> 00:08:51,040
change output

257
00:08:46,399 --> 00:08:51,040
in up to 122 million transactions

258
00:08:51,519 --> 00:08:55,200
finally we observed a pattern where

259
00:08:53,519 --> 00:08:56,959
funds are funneled from one multisig

260
00:08:55,200 --> 00:08:57,680
address to another through a regular

261
00:08:56,959 --> 00:08:59,680
address

262
00:08:57,680 --> 00:09:01,359
raising concerns about a temporary

263
00:08:59,680 --> 00:09:02,560
reduction in security

264
00:09:01,360 --> 00:09:04,560
there are up to a few thousand

265
00:09:02,560 --> 00:09:05,279
transactions each month that exhibit

266
00:09:04,560 --> 00:09:07,040
this pattern

267
00:09:05,279 --> 00:09:09,839
transferring bitcoins worth millions of

268
00:09:07,040 --> 00:09:09,839
u.s dollars

269
00:09:11,200 --> 00:09:14,959
besides our own use blockchain has also

270
00:09:13,120 --> 00:09:16,320
been used by others in the community to

271
00:09:14,959 --> 00:09:18,319
research blockchains

272
00:09:16,320 --> 00:09:20,240
we are currently aware of at least nine

273
00:09:18,320 --> 00:09:22,160
peer-reviewed articles and six preprints

274
00:09:20,240 --> 00:09:23,680
that have used it

275
00:09:22,160 --> 00:09:25,839
it has also been really useful in

276
00:09:23,680 --> 00:09:27,519
educational setups such as workshops or

277
00:09:25,839 --> 00:09:29,200
lectures and cryptocurrencies

278
00:09:27,519 --> 00:09:31,040
and has been used as a foundation for

279
00:09:29,200 --> 00:09:33,839
more specialized blockchain analysis

280
00:09:31,040 --> 00:09:33,839
tools as well

281
00:09:34,240 --> 00:09:38,000
with this i've come to the end of this

282
00:09:36,000 --> 00:09:40,000
brief overview of blockcy

283
00:09:38,000 --> 00:09:42,080
if i spark your interest i recommend to

284
00:09:40,000 --> 00:09:43,680
go read the paper it has all the details

285
00:09:42,080 --> 00:09:45,519
in how we built and optimized it

286
00:09:43,680 --> 00:09:47,120
performance measurements and comparisons

287
00:09:45,519 --> 00:09:48,800
against other databases

288
00:09:47,120 --> 00:09:50,720
multi-chain mode that marching platner

289
00:09:48,800 --> 00:09:54,240
has been developing as well as three

290
00:09:50,720 --> 00:09:54,240
more interesting applications

291
00:09:54,880 --> 00:09:58,800
so thank you very much for your interest

292
00:09:56,720 --> 00:10:00,399
in blockcy here are a few final links

293
00:09:58,800 --> 00:10:05,839
and contact options if you'd like to

294
00:10:00,399 --> 00:10:05,839
learn more

295
00:10:10,480 --> 00:10:12,560
you

