1
00:00:12,720 --> 00:00:16,750
<font color="#E5E5E5">okay thank you for the introduction</font><font color="#CCCCCC"> this</font>

2
00:00:15,970 --> 00:00:18,910
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> is about</font>

3
00:00:16,750 --> 00:00:21,610
I mix hardware and forced in process

4
00:00:18,910 --> 00:00:23,340
memory isolation this is joint work with

5
00:00:21,610 --> 00:00:26,259
<font color="#E5E5E5">my colleagues at National University</font>

6
00:00:23,340 --> 00:00:28,119
<font color="#CCCCCC">Darmstadt and is a</font><font color="#E5E5E5"> result of a</font>

7
00:00:26,260 --> 00:00:29,860
<font color="#E5E5E5">collaboration with the insta research</font>

8
00:00:28,119 --> 00:00:32,409
into<font color="#CCCCCC"> Research Institute</font><font color="#E5E5E5"> for</font>

9
00:00:29,860 --> 00:00:37,600
collaborative automatons and resilient

10
00:00:32,409 --> 00:00:41,589
systems so what's the current<font color="#E5E5E5"> state</font><font color="#CCCCCC"> of</font>

11
00:00:37,600 --> 00:00:43,570
art countly an application is<font color="#E5E5E5"> may be</font>

12
00:00:41,590 --> 00:00:47,219
<font color="#E5E5E5">hardened against software attacks and</font>

13
00:00:43,570 --> 00:00:51,160
has a<font color="#CCCCCC"> so-called Medicaid mitigation that</font>

14
00:00:47,219 --> 00:00:53,890
changes the code to protect<font color="#CCCCCC"> it and this</font>

15
00:00:51,160 --> 00:00:56,319
<font color="#E5E5E5">also includes</font><font color="#CCCCCC"> a safe region of the</font>

16
00:00:53,890 --> 00:00:58,539
mitigation<font color="#E5E5E5"> where all</font><font color="#CCCCCC"> your mitigation</font>

17
00:00:56,320 --> 00:01:03,120
secrets are stored<font color="#E5E5E5"> to protect the app</font>

18
00:00:58,539 --> 00:01:06,460
code<font color="#E5E5E5"> however if an attacker manages to</font>

19
00:01:03,120 --> 00:01:08,230
corrupt the app code<font color="#E5E5E5"> for most of the</font>

20
00:01:06,460 --> 00:01:10,149
<font color="#E5E5E5">isolation techniques the attacker is</font>

21
00:01:08,230 --> 00:01:14,020
able to<font color="#E5E5E5"> attack the mitigation safe</font>

22
00:01:10,150 --> 00:01:17,860
region<font color="#E5E5E5"> itself</font><font color="#CCCCCC"> what we want to propose</font>

23
00:01:14,020 --> 00:01:20,979
with<font color="#CCCCCC"> a mix is deterministic</font><font color="#E5E5E5"> isolation</font>

24
00:01:17,860 --> 00:01:23,470
primitive that can be used to<font color="#CCCCCC"> lay the</font>

25
00:01:20,980 --> 00:01:29,890
foundation of really<font color="#E5E5E5"> secure mitigations</font>

26
00:01:23,470 --> 00:01:31,840
for code so first<font color="#CCCCCC"> question is why is in</font>

27
00:01:29,890 --> 00:01:36,490
process memory isolation actually a good

28
00:01:31,840 --> 00:01:38,890
idea<font color="#E5E5E5"> why do we want to have it yeah as</font>

29
00:01:36,490 --> 00:01:40,780
all of<font color="#CCCCCC"> you</font><font color="#E5E5E5"> might know we already have</font>

30
00:01:38,890 --> 00:01:44,680
inter<font color="#E5E5E5"> process isolation enforced by the</font>

31
00:01:40,780 --> 00:01:46,870
operating<font color="#CCCCCC"> system which means</font><font color="#E5E5E5"> that every</font>

32
00:01:44,680 --> 00:01:49,240
process<font color="#E5E5E5"> that is running on your</font><font color="#CCCCCC"> PC</font><font color="#E5E5E5"> is</font>

33
00:01:46,870 --> 00:01:54,610
actually shielded from<font color="#E5E5E5"> the average</font>

34
00:01:49,240 --> 00:01:57,399
processes<font color="#E5E5E5"> using a virtual</font><font color="#CCCCCC"> memory but as</font>

35
00:01:54,610 --> 00:01:59,800
I explained there<font color="#E5E5E5"> is no actual in</font>

36
00:01:57,400 --> 00:02:02,560
process isolation<font color="#CCCCCC"> an attacker</font><font color="#E5E5E5"> that</font>

37
00:01:59,800 --> 00:02:05,380
corrupted<font color="#E5E5E5"> the code can further corrupt</font>

38
00:02:02,560 --> 00:02:07,480
the memory and then gain complete

39
00:02:05,380 --> 00:02:10,179
control<font color="#CCCCCC"> over the</font><font color="#E5E5E5"> application</font><font color="#CCCCCC"> reverse a</font>

40
00:02:07,480 --> 00:02:14,830
<font color="#E5E5E5">single vulnerability with a readwrite</font>

41
00:02:10,179 --> 00:02:20,110
primitive or memory so what we need to

42
00:02:14,830 --> 00:02:23,040
<font color="#CCCCCC">fix</font><font color="#E5E5E5"> this is some kind of isolation just</font>

43
00:02:20,110 --> 00:02:24,160
<font color="#E5E5E5">a small example very very popular</font>

44
00:02:23,040 --> 00:02:27,220
<font color="#E5E5E5">mitigation</font>

45
00:02:24,160 --> 00:02:29,430
technique called<font color="#CCCCCC"> shadow</font><font color="#E5E5E5"> stacks and what</font>

46
00:02:27,220 --> 00:02:31,870
a shadow stick basically<font color="#E5E5E5"> does is it</font>

47
00:02:29,430 --> 00:02:35,790
<font color="#CCCCCC">backups</font><font color="#E5E5E5"> all the return addresses from</font>

48
00:02:31,870 --> 00:02:40,210
<font color="#CCCCCC">the stack</font><font color="#E5E5E5"> to its save region and</font>

49
00:02:35,790 --> 00:02:45,250
restores these return addresses<font color="#CCCCCC"> once you</font>

50
00:02:40,210 --> 00:02:47,860
have a return from a function<font color="#CCCCCC"> this</font><font color="#E5E5E5"> works</font>

51
00:02:45,250 --> 00:02:52,300
like this so we could fix the attackers

52
00:02:47,860 --> 00:02:55,090
malicious input<font color="#CCCCCC"> but as you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> see the</font>

53
00:02:52,300 --> 00:02:57,490
shadow stack space address is randomized

54
00:02:55,090 --> 00:03:00,430
<font color="#CCCCCC">this is usually stored</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> registers</font><font color="#E5E5E5"> so</font>

55
00:02:57,490 --> 00:03:04,660
it's safe from attackers<font color="#E5E5E5"> however a</font>

56
00:03:00,430 --> 00:03:06,940
single information leak<font color="#CCCCCC"> may imply that</font>

57
00:03:04,660 --> 00:03:10,630
the attacker can now modify<font color="#E5E5E5"> this shadow</font>

58
00:03:06,940 --> 00:03:12,579
stack and<font color="#E5E5E5"> just</font><font color="#CCCCCC"> overwrite</font><font color="#E5E5E5"> the backup</font>

59
00:03:10,630 --> 00:03:14,950
instead of the<font color="#CCCCCC"> original return address</font>

60
00:03:12,580 --> 00:03:19,450
<font color="#E5E5E5">and still gain full</font><font color="#CCCCCC"> control over</font><font color="#E5E5E5"> the</font>

61
00:03:14,950 --> 00:03:24,040
application so our<font color="#E5E5E5"> contribution to this</font>

62
00:03:19,450 --> 00:03:27,369
is we<font color="#CCCCCC"> introduce a new</font><font color="#E5E5E5"> memory isolation</font>

63
00:03:24,040 --> 00:03:31,560
primitive<font color="#E5E5E5"> that we designed to be in</font>

64
00:03:27,370 --> 00:03:36,970
order<font color="#CCCCCC"> to protect the whole pipeline from</font>

65
00:03:31,560 --> 00:03:38,940
compiling down<font color="#E5E5E5"> TV hardware and evaluated</font>

66
00:03:36,970 --> 00:03:42,760
this but based on our<font color="#E5E5E5"> proof of concept</font>

67
00:03:38,940 --> 00:03:45,460
<font color="#CCCCCC">implementation with compiler</font><font color="#E5E5E5"> support as</font>

68
00:03:42,760 --> 00:03:49,840
well as a use case for<font color="#E5E5E5"> a mitigation to</font>

69
00:03:45,460 --> 00:03:51,610
use and evaluated<font color="#E5E5E5"> this especially under</font>

70
00:03:49,840 --> 00:03:55,180
the assumption that this mitigation

71
00:03:51,610 --> 00:03:57,070
<font color="#E5E5E5">makes heavy frequent switching</font><font color="#CCCCCC"> between</font>

72
00:03:55,180 --> 00:04:05,850
the different<font color="#CCCCCC"> compartments that we</font>

73
00:03:57,070 --> 00:04:09,640
isolate so what do we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> currently as</font>

74
00:04:05,850 --> 00:04:13,269
existing work that can probably also do

75
00:04:09,640 --> 00:04:15,250
this<font color="#E5E5E5"> recently if there was a lot</font><font color="#CCCCCC"> of</font>

76
00:04:13,270 --> 00:04:17,320
media<font color="#CCCCCC"> coverage</font><font color="#E5E5E5"> about memory protection</font>

77
00:04:15,250 --> 00:04:21,149
keys because<font color="#CCCCCC"> Intel finally brought it to</font>

78
00:04:17,320 --> 00:04:23,409
x86 processors<font color="#E5E5E5"> to their x86 processors</font>

79
00:04:21,149 --> 00:04:26,770
memory<font color="#E5E5E5"> of protection key is allowed to</font>

80
00:04:23,410 --> 00:04:29,350
<font color="#CCCCCC">define up to</font><font color="#E5E5E5"> 16 memory compartments</font>

81
00:04:26,770 --> 00:04:34,289
where you can<font color="#E5E5E5"> define the permissions for</font>

82
00:04:29,350 --> 00:04:36,930
<font color="#CCCCCC">each</font><font color="#E5E5E5"> of them however</font>

83
00:04:34,290 --> 00:04:39,150
setting these permissions<font color="#E5E5E5"> requires that</font>

84
00:04:36,930 --> 00:04:41,670
you for every switch of the<font color="#E5E5E5"> domain</font><font color="#CCCCCC"> that</font>

85
00:04:39,150 --> 00:04:45,659
you want to do<font color="#E5E5E5"> reset these permissions</font>

86
00:04:41,670 --> 00:04:49,410
and<font color="#CCCCCC"> this limits its use</font><font color="#E5E5E5"> case in high</font>

87
00:04:45,660 --> 00:04:49,950
frequency<font color="#CCCCCC"> switching so what else do we</font>

88
00:04:49,410 --> 00:04:51,870
have

89
00:04:49,950 --> 00:04:54,090
we have<font color="#CCCCCC"> Hardware bounce checking</font><font color="#E5E5E5"> right</font>

90
00:04:51,870 --> 00:04:56,730
now<font color="#E5E5E5"> so you can</font><font color="#CCCCCC"> for example for a buffer</font>

91
00:04:54,090 --> 00:05:00,450
overflow<font color="#E5E5E5"> prevent this by using Hardware</font>

92
00:04:56,730 --> 00:05:02,820
bounds checking instead of software<font color="#E5E5E5"> we</font>

93
00:05:00,450 --> 00:05:07,640
<font color="#E5E5E5">can use this for a two-sided check and</font>

94
00:05:02,820 --> 00:05:10,950
see how far an isolation region goes<font color="#E5E5E5"> and</font>

95
00:05:07,640 --> 00:05:14,940
we have good old randomization but<font color="#E5E5E5"> as I</font>

96
00:05:10,950 --> 00:05:17,219
told<font color="#CCCCCC"> you might be problems for Hardware</font>

97
00:05:14,940 --> 00:05:19,800
bounds checking vision<font color="#E5E5E5"> covers even more</font>

98
00:05:17,220 --> 00:05:22,830
overhead<font color="#E5E5E5"> because you have to do excesses</font>

99
00:05:19,800 --> 00:05:25,080
<font color="#E5E5E5">instrumentation to perform to give to</font>

100
00:05:22,830 --> 00:05:28,530
get this which leads<font color="#CCCCCC"> to a high</font>

101
00:05:25,080 --> 00:05:29,609
performance overhead<font color="#CCCCCC"> whereas as I told</font>

102
00:05:28,530 --> 00:05:32,099
you

103
00:05:29,610 --> 00:05:34,670
randomization has entropy based problems

104
00:05:32,100 --> 00:05:38,670
<font color="#CCCCCC">so if you guess a single information</font>

105
00:05:34,670 --> 00:05:40,890
then it's<font color="#E5E5E5"> basically broke so real</font>

106
00:05:38,670 --> 00:05:42,810
question would be what characteristics

107
00:05:40,890 --> 00:05:45,570
<font color="#CCCCCC">should a memory</font><font color="#E5E5E5"> isolation</font><font color="#CCCCCC"> primitives</font>

108
00:05:42,810 --> 00:05:50,880
<font color="#CCCCCC">have today so we can use</font><font color="#E5E5E5"> it to fix our</font>

109
00:05:45,570 --> 00:05:54,659
software most important we want some

110
00:05:50,880 --> 00:05:58,020
<font color="#CCCCCC">kind</font><font color="#E5E5E5"> of policy based isolation so a</font>

111
00:05:54,660 --> 00:06:01,440
developer<font color="#CCCCCC"> or a mitigation developer can</font>

112
00:05:58,020 --> 00:06:03,000
have his<font color="#E5E5E5"> own policy</font><font color="#CCCCCC"> which memory should</font>

113
00:06:01,440 --> 00:06:06,780
be divided<font color="#CCCCCC"> and to whom it</font><font color="#E5E5E5"> may be</font>

114
00:06:03,000 --> 00:06:08,430
accessible<font color="#CCCCCC"> and this is especially true</font>

115
00:06:06,780 --> 00:06:10,799
for<font color="#CCCCCC"> example if you have an application</font>

116
00:06:08,430 --> 00:06:12,780
we have several threats<font color="#E5E5E5"> and you want</font>

117
00:06:10,800 --> 00:06:17,580
<font color="#E5E5E5">them to be shielded against other</font>

118
00:06:12,780 --> 00:06:20,130
threats<font color="#CCCCCC"> most</font><font color="#E5E5E5"> certainly you want to have</font>

119
00:06:17,580 --> 00:06:22,919
a hardware and<font color="#E5E5E5"> forced primitive because</font>

120
00:06:20,130 --> 00:06:26,490
<font color="#E5E5E5">this reduces your attack software</font><font color="#CCCCCC"> attack</font>

121
00:06:22,920 --> 00:06:29,070
software surface from an attack<font color="#E5E5E5"> on the</font>

122
00:06:26,490 --> 00:06:31,290
whole isolation mechanism<font color="#E5E5E5"> down to only</font>

123
00:06:29,070 --> 00:06:36,120
<font color="#E5E5E5">configuration attacks that you can</font>

124
00:06:31,290 --> 00:06:38,160
perform<font color="#CCCCCC"> on this</font><font color="#E5E5E5"> isolation and as I told</font>

125
00:06:36,120 --> 00:06:40,800
<font color="#CCCCCC">you you want fast</font><font color="#E5E5E5"> interleaved access to</font>

126
00:06:38,160 --> 00:06:43,920
switch between those isolated<font color="#E5E5E5"> regions</font>

127
00:06:40,800 --> 00:06:46,200
and most important because<font color="#E5E5E5"> we still</font>

128
00:06:43,920 --> 00:06:47,420
carry our legacy you want<font color="#CCCCCC"> this to be</font>

129
00:06:46,200 --> 00:06:49,940
<font color="#E5E5E5">failsafe</font>

130
00:06:47,420 --> 00:06:51,710
if you have an linked library in<font color="#CCCCCC"> your</font>

131
00:06:49,940 --> 00:06:55,010
applications you don't<font color="#E5E5E5"> want to have this</font>

132
00:06:51,710 --> 00:07:01,239
<font color="#E5E5E5">library access your sensitive data so</font>

133
00:06:55,010 --> 00:07:01,240
this<font color="#E5E5E5"> foot should default to do an error</font>

134
00:07:02,290 --> 00:07:08,900
so what's the current state<font color="#E5E5E5"> of art in</font>

135
00:07:05,000 --> 00:07:12,700
memory isolation we got<font color="#E5E5E5"> software fault</font>

136
00:07:08,900 --> 00:07:16,150
isolation<font color="#E5E5E5"> previous speaker</font><font color="#CCCCCC"> mansion phase</font>

137
00:07:12,700 --> 00:07:20,270
which is pure<font color="#E5E5E5"> software most of</font><font color="#CCCCCC"> the time</font>

138
00:07:16,150 --> 00:07:22,219
<font color="#E5E5E5">we got or we were used to have</font>

139
00:07:20,270 --> 00:07:26,780
segmentation which we don't<font color="#E5E5E5"> have anymore</font>

140
00:07:22,220 --> 00:07:30,140
<font color="#CCCCCC">and sorry for this but I think it</font><font color="#E5E5E5"> won't</font>

141
00:07:26,780 --> 00:07:34,580
come back<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> mainly done</font><font color="#E5E5E5"> for</font>

142
00:07:30,140 --> 00:07:36,740
space reasons in the chip<font color="#E5E5E5"> itself</font><font color="#CCCCCC"> as I</font>

143
00:07:34,580 --> 00:07:40,130
told you we have randomization form of

144
00:07:36,740 --> 00:07:42,230
memory hiding we can use extended page

145
00:07:40,130 --> 00:07:47,390
tables to have more control over

146
00:07:42,230 --> 00:07:49,910
permissions we have<font color="#CCCCCC"> mpk</font><font color="#E5E5E5"> we can use</font><font color="#CCCCCC"> SGX</font>

147
00:07:47,390 --> 00:07:52,700
to hide our data<font color="#E5E5E5"> but</font><font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> there are</font>

148
00:07:49,910 --> 00:07:56,570
also tax on<font color="#E5E5E5"> this and of course</font><font color="#CCCCCC"> SGX is</font>

149
00:07:52,700 --> 00:08:00,830
rather slow to switch in<font color="#E5E5E5"> and out and MPX</font>

150
00:07:56,570 --> 00:08:03,050
<font color="#CCCCCC">and most recently we have intel</font><font color="#E5E5E5"> CET so</font>

151
00:08:00,830 --> 00:08:05,960
control flow enforcement<font color="#E5E5E5"> technology</font>

152
00:08:03,050 --> 00:08:09,410
which<font color="#CCCCCC"> basically does exactly what</font><font color="#E5E5E5"> I</font>

153
00:08:05,960 --> 00:08:11,630
suggested in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> first part it</font><font color="#E5E5E5"> next</font><font color="#CCCCCC"> to</font>

154
00:08:09,410 --> 00:08:13,810
<font color="#E5E5E5">is see if I label support it has</font><font color="#CCCCCC"> a</font>

155
00:08:11,630 --> 00:08:16,610
built-in support for of a shadow stack

156
00:08:13,810 --> 00:08:19,040
<font color="#E5E5E5">so there is a safe region in Hardware</font>

157
00:08:16,610 --> 00:08:20,930
where every shadow<font color="#E5E5E5"> stacks located and</font>

158
00:08:19,040 --> 00:08:23,450
you<font color="#E5E5E5"> have dedicated primitives that</font><font color="#CCCCCC"> you</font>

159
00:08:20,930 --> 00:08:25,700
can use to access<font color="#CCCCCC"> this</font><font color="#E5E5E5"> shadow stack</font><font color="#CCCCCC"> so</font>

160
00:08:23,450 --> 00:08:31,340
you<font color="#E5E5E5"> have some kind of secure push and</font>

161
00:08:25,700 --> 00:08:34,490
pop so looking at all those existing

162
00:08:31,340 --> 00:08:36,228
primitives<font color="#E5E5E5"> our goal was actually build a</font>

163
00:08:34,490 --> 00:08:40,490
<font color="#CCCCCC">primitive and incorporates all of</font><font color="#E5E5E5"> the</font>

164
00:08:36,229 --> 00:08:44,240
interesting aspects so we came<font color="#E5E5E5"> up</font><font color="#CCCCCC"> with I</font>

165
00:08:40,490 --> 00:08:47,030
mix I mix is a hardware<font color="#CCCCCC"> enforced</font><font color="#E5E5E5"> in</font>

166
00:08:44,240 --> 00:08:50,140
<font color="#E5E5E5">process memory isolation which we</font>

167
00:08:47,030 --> 00:08:53,949
designed to be at page granularity and

168
00:08:50,140 --> 00:08:56,689
it supports two separate isolation<font color="#E5E5E5"> rings</font>

169
00:08:53,950 --> 00:08:58,970
<font color="#CCCCCC">because we found that enough to support</font>

170
00:08:56,690 --> 00:09:01,470
most of<font color="#E5E5E5"> the mitigations because they</font>

171
00:08:58,970 --> 00:09:05,490
only need one save region

172
00:09:01,470 --> 00:09:09,960
and you can still<font color="#E5E5E5"> have we have a regular</font>

173
00:09:05,490 --> 00:09:11,820
memory domain and most important this

174
00:09:09,960 --> 00:09:13,230
has the benefit that we<font color="#E5E5E5"> don't need to</font>

175
00:09:11,820 --> 00:09:16,080
check permissions for<font color="#E5E5E5"> each of the</font>

176
00:09:13,230 --> 00:09:18,270
domains<font color="#E5E5E5"> we only have two and we</font><font color="#CCCCCC"> can</font>

177
00:09:16,080 --> 00:09:21,810
encode that information in a special

178
00:09:18,270 --> 00:09:25,500
<font color="#E5E5E5">instruction we may</font><font color="#CCCCCC"> base the small</font>

179
00:09:21,810 --> 00:09:28,349
instruction<font color="#E5E5E5"> which can be used for a</font>

180
00:09:25,500 --> 00:09:31,380
<font color="#E5E5E5">secure move to this respective shielded</font>

181
00:09:28,350 --> 00:09:34,200
memory area and we<font color="#E5E5E5"> got the regular move</font>

182
00:09:31,380 --> 00:09:39,420
instructions which can<font color="#E5E5E5"> access regular</font>

183
00:09:34,200 --> 00:09:42,570
memory<font color="#E5E5E5"> this allows us</font><font color="#CCCCCC"> to next</font><font color="#E5E5E5"> for</font>

184
00:09:39,420 --> 00:09:45,540
<font color="#E5E5E5">example for write or execute memory that</font>

185
00:09:42,570 --> 00:09:48,390
we<font color="#E5E5E5"> have for code</font><font color="#CCCCCC"> provide an similar</font>

186
00:09:45,540 --> 00:09:52,770
<font color="#E5E5E5">guarantee for memory at least</font><font color="#CCCCCC"> for the</font>

187
00:09:48,390 --> 00:09:56,670
sensitive<font color="#E5E5E5"> data</font><font color="#CCCCCC"> compared to very active</font>

188
00:09:52,770 --> 00:09:59,720
<font color="#E5E5E5">work we we bring policy-based isolation</font>

189
00:09:56,670 --> 00:10:04,079
because<font color="#E5E5E5"> we can prevent other threats</font>

190
00:09:59,720 --> 00:10:07,200
from entering or<font color="#CCCCCC"> accesing</font><font color="#E5E5E5"> the main</font>

191
00:10:04,080 --> 00:10:09,990
threats<font color="#E5E5E5"> sensitive data</font><font color="#CCCCCC"> we have this</font>

192
00:10:07,200 --> 00:10:12,590
<font color="#E5E5E5">Hardware enforced support</font><font color="#CCCCCC"> fosston to</font>

193
00:10:09,990 --> 00:10:15,030
leave<font color="#E5E5E5"> access and we can also prevent</font>

194
00:10:12,590 --> 00:10:17,190
legacy libraries<font color="#E5E5E5"> from accessing this</font>

195
00:10:15,030 --> 00:10:18,660
sensitive data<font color="#E5E5E5"> because because they</font>

196
00:10:17,190 --> 00:10:23,310
don't<font color="#CCCCCC"> have access to the small</font>

197
00:10:18,660 --> 00:10:26,910
instruction so how does<font color="#CCCCCC"> it</font><font color="#E5E5E5"> look like for</font>

198
00:10:23,310 --> 00:10:28,560
<font color="#CCCCCC">our</font><font color="#E5E5E5"> use case with shadows tag we still</font>

199
00:10:26,910 --> 00:10:30,240
have the<font color="#CCCCCC"> information the akley attacker</font>

200
00:10:28,560 --> 00:10:34,920
<font color="#E5E5E5">now is now where every shadow</font><font color="#CCCCCC"> snake is</font>

201
00:10:30,240 --> 00:10:36,810
located<font color="#E5E5E5"> but if the attacker tries to</font>

202
00:10:34,920 --> 00:10:39,689
override<font color="#CCCCCC"> that return address in the</font>

203
00:10:36,810 --> 00:10:43,170
backup he only has access<font color="#CCCCCC"> to move at</font>

204
00:10:39,690 --> 00:10:45,360
move instruction for<font color="#CCCCCC"> example this could</font>

205
00:10:43,170 --> 00:10:48,540
<font color="#E5E5E5">be</font><font color="#CCCCCC"> a simple</font><font color="#E5E5E5"> buffer overflow which is</font>

206
00:10:45,360 --> 00:10:50,940
usually a loop and<font color="#CCCCCC"> you just move all the</font>

207
00:10:48,540 --> 00:10:55,469
data so<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can assume</font><font color="#E5E5E5"> that varies a</font>

208
00:10:50,940 --> 00:10:58,260
move instruction<font color="#E5E5E5"> is accessible and so</font>

209
00:10:55,470 --> 00:11:01,470
the save region of a shadow stack<font color="#CCCCCC"> can't</font>

210
00:10:58,260 --> 00:11:04,770
<font color="#E5E5E5">be overwritten nevertheless we have this</font>

211
00:11:01,470 --> 00:11:07,200
smooth instruction that can<font color="#E5E5E5"> backup or</font>

212
00:11:04,770 --> 00:11:11,900
restore<font color="#E5E5E5"> return addresses from a shadow</font>

213
00:11:07,200 --> 00:11:15,040
stack like<font color="#E5E5E5"> Intel CET but more general</font>

214
00:11:11,900 --> 00:11:19,490
how did we implement this

215
00:11:15,040 --> 00:11:24,170
<font color="#CCCCCC">first we have a small</font><font color="#E5E5E5"> face</font><font color="#CCCCCC"> load/store</font>

216
00:11:19,490 --> 00:11:26,809
representation for<font color="#CCCCCC"> LLVM we did is for</font>

217
00:11:24,170 --> 00:11:29,929
<font color="#E5E5E5">the intermediate representation so that</font>

218
00:11:26,809 --> 00:11:33,759
this can be<font color="#CCCCCC"> used by LLVM passes</font><font color="#E5E5E5"> as well</font>

219
00:11:29,929 --> 00:11:38,589
as developers using attributes and

220
00:11:33,759 --> 00:11:38,589
integrated<font color="#CCCCCC"> weights</font><font color="#E5E5E5"> this in our pipeline</font>

221
00:11:39,220 --> 00:11:44,179
<font color="#E5E5E5">next to compiler support</font><font color="#CCCCCC"> where we can</font>

222
00:11:41,779 --> 00:11:47,959
actually<font color="#E5E5E5"> use that instruction in the</font>

223
00:11:44,179 --> 00:11:53,149
<font color="#E5E5E5">binary</font><font color="#CCCCCC"> we have OS kernel as well as</font>

224
00:11:47,959 --> 00:11:55,819
memory support<font color="#E5E5E5"> so we have to give this</font>

225
00:11:53,149 --> 00:12:00,199
instruction<font color="#CCCCCC"> a fine granularity a page</font>

226
00:11:55,819 --> 00:12:04,009
table level we<font color="#E5E5E5"> use the page table bit to</font>

227
00:12:00,199 --> 00:12:07,550
set a flag<font color="#CCCCCC"> weather and memory memory</font>

228
00:12:04,009 --> 00:12:10,759
domain is sensitive or not this is

229
00:12:07,550 --> 00:12:13,579
unused<font color="#CCCCCC"> privilege previously and we of</font>

230
00:12:10,759 --> 00:12:15,589
<font color="#CCCCCC">course made changes to be OS kernel to</font>

231
00:12:13,579 --> 00:12:22,279
support these page<font color="#CCCCCC"> permissions for</font>

232
00:12:15,589 --> 00:12:24,619
example for a map or<font color="#CCCCCC"> and protect of</font>

233
00:12:22,279 --> 00:12:26,740
course you cannot make a<font color="#E5E5E5"> hardware</font>

234
00:12:24,619 --> 00:12:30,649
extension if you cannot modify<font color="#CCCCCC"> hardware</font>

235
00:12:26,740 --> 00:12:34,519
so we<font color="#CCCCCC"> implemented the smurf instruction</font>

236
00:12:30,649 --> 00:12:39,110
for the<font color="#E5E5E5"> CPU core</font><font color="#CCCCCC"> as well as introducing</font>

237
00:12:34,519 --> 00:12:42,499
this small<font color="#E5E5E5"> check to the MMU this is an a</font>

238
00:12:39,110 --> 00:12:45,589
<font color="#E5E5E5">glass to read or write execute check</font>

239
00:12:42,499 --> 00:12:49,069
because<font color="#E5E5E5"> I mean if you're writing memory</font>

240
00:12:45,589 --> 00:12:51,279
and you see the NX<font color="#E5E5E5"> bit you won't have a</font>

241
00:12:49,069 --> 00:12:56,209
pass and<font color="#E5E5E5"> this is quite similar to this</font>

242
00:12:51,279 --> 00:12:59,720
<font color="#E5E5E5">for</font><font color="#CCCCCC"> our evaluation on this we emulated</font>

243
00:12:56,209 --> 00:13:03,709
<font color="#CCCCCC">the CPU part using the</font><font color="#E5E5E5"> Intel simulation</font>

244
00:12:59,720 --> 00:13:09,170
and analysis engine which is<font color="#E5E5E5"> some</font><font color="#CCCCCC"> kind</font>

245
00:13:03,709 --> 00:13:11,809
of get featured emulator<font color="#E5E5E5"> and check this</font>

246
00:13:09,170 --> 00:13:13,519
<font color="#E5E5E5">for feasibility so it's very any</font>

247
00:13:11,809 --> 00:13:18,379
difference to regular move in

248
00:13:13,519 --> 00:13:20,089
performance in feasibility and this is

249
00:13:18,379 --> 00:13:23,299
our complete pipeline so you have a

250
00:13:20,089 --> 00:13:25,339
binary but binary may contain move and

251
00:13:23,299 --> 00:13:27,480
smooth instructions<font color="#E5E5E5"> to different regions</font>

252
00:13:25,339 --> 00:13:31,949
and we even consider<font color="#CCCCCC"> Malaysia</font>

253
00:13:27,480 --> 00:13:34,740
case so as I previously said<font color="#CCCCCC"> a regular</font>

254
00:13:31,949 --> 00:13:36,930
move can write to normal memory or read

255
00:13:34,740 --> 00:13:39,660
<font color="#CCCCCC">from normal memory</font><font color="#E5E5E5"> whereas this move</font>

256
00:13:36,930 --> 00:13:42,959
region or smooth instruction cannot<font color="#E5E5E5"> read</font>

257
00:13:39,660 --> 00:13:46,110
<font color="#E5E5E5">read or write the</font><font color="#CCCCCC"> normal memory this</font><font color="#E5E5E5"> is</font>

258
00:13:42,959 --> 00:13:51,630
<font color="#E5E5E5">especially important to give</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> two sided</font>

259
00:13:46,110 --> 00:13:54,389
isolation on this and of course movement

260
00:13:51,630 --> 00:13:56,639
<font color="#E5E5E5">the smooth instruction can write or read</font>

261
00:13:54,389 --> 00:14:01,050
<font color="#E5E5E5">to protect memory whereas the move</font>

262
00:13:56,639 --> 00:14:03,449
instruction<font color="#CCCCCC"> cannot and for our use case</font>

263
00:14:01,050 --> 00:14:05,609
we were<font color="#CCCCCC"> looking for a mitigation</font><font color="#E5E5E5"> that</font>

264
00:14:03,449 --> 00:14:07,670
actually requires high frequent<font color="#E5E5E5"> high</font>

265
00:14:05,610 --> 00:14:10,589
frequency of switches for domains and

266
00:14:07,670 --> 00:14:13,709
this was easy<font color="#E5E5E5"> to find we found</font><font color="#CCCCCC"> a code</font>

267
00:14:10,589 --> 00:14:17,699
point integrity<font color="#CCCCCC"> bike is</font><font color="#E5E5E5"> not safe at all</font>

268
00:14:13,709 --> 00:14:20,369
<font color="#CCCCCC">and CPI effectively prevents code reuse</font>

269
00:14:17,699 --> 00:14:22,979
attacks<font color="#E5E5E5"> by having a safe region that</font>

270
00:14:20,370 --> 00:14:26,399
stores metadata about code pointers or

271
00:14:22,980 --> 00:14:29,250
indirect code pointers and originally

272
00:14:26,399 --> 00:14:30,860
this is<font color="#E5E5E5"> hidden in the memory</font><font color="#CCCCCC"> and the</font>

273
00:14:29,250 --> 00:14:34,380
base address<font color="#E5E5E5"> is stored in a segment</font>

274
00:14:30,860 --> 00:14:37,199
<font color="#E5E5E5">register that is otherwise unused so you</font>

275
00:14:34,380 --> 00:14:41,699
can guess<font color="#CCCCCC"> that this randomization secret</font>

276
00:14:37,199 --> 00:14:44,910
is probably secret<font color="#E5E5E5"> nevertheless happens</font>

277
00:14:41,699 --> 00:14:48,240
at all<font color="#E5E5E5"> showed that this might be broken</font>

278
00:14:44,910 --> 00:14:52,670
based on low entropy<font color="#E5E5E5"> so we wanted to</font>

279
00:14:48,240 --> 00:14:52,670
<font color="#E5E5E5">have a deterministic isolation for this</font>

280
00:14:54,740 --> 00:15:03,569
this<font color="#CCCCCC"> is how CPI works so for a CPI you</font>

281
00:15:01,440 --> 00:15:06,209
take<font color="#E5E5E5"> a regular</font><font color="#CCCCCC"> code point or move that</font>

282
00:15:03,569 --> 00:15:09,810
with some<font color="#E5E5E5"> metadata to</font><font color="#CCCCCC"> the safe region</font>

283
00:15:06,209 --> 00:15:13,229
and restore it if necessary based on an

284
00:15:09,810 --> 00:15:18,420
indirect dereference using the GS

285
00:15:13,230 --> 00:15:21,089
<font color="#CCCCCC">register</font><font color="#E5E5E5"> embassy</font><font color="#CCCCCC"> at CPI paper itself the</font>

286
00:15:18,420 --> 00:15:25,139
offers evaluated different approaches

287
00:15:21,089 --> 00:15:28,980
<font color="#CCCCCC">for safe region</font><font color="#E5E5E5"> protection originally</font>

288
00:15:25,139 --> 00:15:32,540
for frigid 32-bit architectures they<font color="#E5E5E5"> use</font>

289
00:15:28,980 --> 00:15:35,939
segmentation<font color="#E5E5E5"> and for 64-bit only</font>

290
00:15:32,540 --> 00:15:38,550
randomization<font color="#CCCCCC"> for us</font><font color="#E5E5E5"> during development</font>

291
00:15:35,939 --> 00:15:40,349
process<font color="#CCCCCC"> this brought an important factor</font>

292
00:15:38,550 --> 00:15:42,120
<font color="#E5E5E5">in</font>

293
00:15:40,350 --> 00:15:44,370
the<font color="#E5E5E5"> implementation</font><font color="#CCCCCC"> itself is highly</font>

294
00:15:42,120 --> 00:15:48,900
<font color="#E5E5E5">modular and how to protect the</font><font color="#CCCCCC"> save</font>

295
00:15:44,370 --> 00:15:52,110
region<font color="#CCCCCC"> so we were or it was a</font><font color="#E5E5E5"> very quick</font>

296
00:15:48,900 --> 00:15:56,760
process to add<font color="#CCCCCC"> support for</font><font color="#E5E5E5"> this using</font><font color="#CCCCCC"> a</font>

297
00:15:52,110 --> 00:15:59,130
mix and what we've actually done is we

298
00:15:56,760 --> 00:16:03,210
changed all those<font color="#CCCCCC"> register based offset</font>

299
00:15:59,130 --> 00:16:05,850
moves to direct memory access is<font color="#E5E5E5"> because</font>

300
00:16:03,210 --> 00:16:10,530
you can resolve all these<font color="#CCCCCC"> addresses at</font>

301
00:16:05,850 --> 00:16:14,910
compile time<font color="#CCCCCC"> and we got quite promising</font>

302
00:16:10,530 --> 00:16:18,209
results I<font color="#E5E5E5"> would say so</font>

303
00:16:14,910 --> 00:16:21,510
CPI and segmentation means<font color="#E5E5E5"> this is the</font>

304
00:16:18,210 --> 00:16:24,480
blue bar by<font color="#E5E5E5"> the way</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> a regular</font>

305
00:16:21,510 --> 00:16:28,160
CPI using the segment<font color="#E5E5E5"> register as an as</font>

306
00:16:24,480 --> 00:16:32,700
a base register<font color="#E5E5E5"> where we have in in</font>

307
00:16:28,160 --> 00:16:37,709
<font color="#E5E5E5">orange our</font><font color="#CCCCCC"> I mix based</font><font color="#E5E5E5"> CPI which is in</font>

308
00:16:32,700 --> 00:16:40,380
most<font color="#E5E5E5"> of the cases quite similar</font><font color="#CCCCCC"> now note</font>

309
00:16:37,710 --> 00:16:42,470
varies<font color="#CCCCCC"> CPI and memory protection keys we</font>

310
00:16:40,380 --> 00:16:44,840
based this<font color="#E5E5E5"> implementation on the</font>

311
00:16:42,470 --> 00:16:49,200
<font color="#E5E5E5">approximation of the mem</font><font color="#CCCCCC"> sentry paper</font>

312
00:16:44,840 --> 00:16:52,740
because during during implementing this

313
00:16:49,200 --> 00:16:56,340
<font color="#CCCCCC">m PK was not available in consumer</font>

314
00:16:52,740 --> 00:17:00,270
variants of processors<font color="#E5E5E5"> and additionally</font>

315
00:16:56,340 --> 00:17:03,900
we<font color="#E5E5E5"> evaluated MPX for a CPI saver region</font>

316
00:17:00,270 --> 00:17:06,480
protection for the<font color="#CCCCCC"> two-sided case so we</font>

317
00:17:03,900 --> 00:17:09,660
checked both bounds of<font color="#E5E5E5"> the isolated</font>

318
00:17:06,480 --> 00:17:13,530
<font color="#E5E5E5">region as you can see for the geometric</font>

319
00:17:09,660 --> 00:17:16,740
<font color="#CCCCCC">mean</font><font color="#E5E5E5"> segmentation and</font><font color="#CCCCCC"> eye makes are</font>

320
00:17:13,530 --> 00:17:19,920
nearly identical I would say<font color="#E5E5E5"> whereas the</font>

321
00:17:16,740 --> 00:17:25,530
<font color="#CCCCCC">applet solutions are or induce a bit</font>

322
00:17:19,920 --> 00:17:27,959
more of<font color="#E5E5E5"> a performance overhead so as a</font>

323
00:17:25,530 --> 00:17:30,750
first conclusion<font color="#CCCCCC"> I makes</font><font color="#E5E5E5"> this the first</font>

324
00:17:27,959 --> 00:17:33,450
practical solution that<font color="#E5E5E5"> doesn't</font><font color="#CCCCCC"> need too</font>

325
00:17:30,750 --> 00:17:36,600
much<font color="#E5E5E5"> hardware on the processor for in</font>

326
00:17:33,450 --> 00:17:39,450
process memory isolation we enforce this

327
00:17:36,600 --> 00:17:43,320
in process memory isolation at page

328
00:17:39,450 --> 00:17:47,030
granularity<font color="#E5E5E5"> to further leverage the</font>

329
00:17:43,320 --> 00:17:50,040
existing functionality<font color="#E5E5E5"> in the kernel and</font>

330
00:17:47,030 --> 00:17:52,290
all the existing related work cannot

331
00:17:50,040 --> 00:17:53,530
<font color="#E5E5E5">really be used for higher frequency</font>

332
00:17:52,290 --> 00:17:57,850
switching<font color="#E5E5E5"> in</font>

333
00:17:53,530 --> 00:18:03,870
current mitigations<font color="#E5E5E5"> and we tackled</font><font color="#CCCCCC"> this</font>

334
00:17:57,850 --> 00:18:06,969
problem<font color="#E5E5E5"> especially now talking</font><font color="#CCCCCC"> about</font>

335
00:18:03,870 --> 00:18:11,290
<font color="#CCCCCC">conclusion</font><font color="#E5E5E5"> what is the way we could go</font>

336
00:18:06,970 --> 00:18:14,700
with this<font color="#CCCCCC"> we thought about applying</font><font color="#E5E5E5"> I</font>

337
00:18:11,290 --> 00:18:18,060
mix to the<font color="#E5E5E5"> complete memory pipeline so</font>

338
00:18:14,700 --> 00:18:21,210
<font color="#E5E5E5">find a way to bring this to the caches</font>

339
00:18:18,060 --> 00:18:25,090
<font color="#E5E5E5">see how we can incorporate this to the</font>

340
00:18:21,210 --> 00:18:30,790
TLB or a similar technique<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the TLB</font>

341
00:18:25,090 --> 00:18:34,030
and as<font color="#E5E5E5"> we've seen with other Hardware</font>

342
00:18:30,790 --> 00:18:36,460
primitives<font color="#CCCCCC"> for example the extended page</font>

343
00:18:34,030 --> 00:18:38,770
tables<font color="#E5E5E5"> sometimes these Hardware</font>

344
00:18:36,460 --> 00:18:42,070
primitives<font color="#E5E5E5"> allow a completely new way to</font>

345
00:18:38,770 --> 00:18:45,040
design<font color="#E5E5E5"> mitigations so we can use</font>

346
00:18:42,070 --> 00:18:47,350
extended page tables for execute<font color="#E5E5E5"> only</font>

347
00:18:45,040 --> 00:18:50,470
memory we<font color="#E5E5E5"> can use memory protection keys</font>

348
00:18:47,350 --> 00:18:52,540
for<font color="#CCCCCC"> executors</font><font color="#E5E5E5"> only memory may</font><font color="#CCCCCC"> be this</font>

349
00:18:50,470 --> 00:18:56,260
opens a whole<font color="#CCCCCC"> new direction in</font>

350
00:18:52,540 --> 00:18:57,159
mitigation research for us<font color="#CCCCCC"> and yeah</font>

351
00:18:56,260 --> 00:19:01,120
let's see

352
00:18:57,160 --> 00:19:03,240
and to<font color="#CCCCCC"> this I end my talk and thank you</font>

353
00:19:01,120 --> 00:19:10,899
for<font color="#E5E5E5"> your attention</font>

354
00:19:03,240 --> 00:19:14,240
[Applause]

355
00:19:10,900 --> 00:19:17,540
<font color="#CCCCCC">Hey nice</font><font color="#E5E5E5"> work</font><font color="#CCCCCC"> to the home from</font><font color="#E5E5E5"> Georgia</font>

356
00:19:14,240 --> 00:19:21,530
Tech can I have a comparison<font color="#E5E5E5"> of a mix</font>

357
00:19:17,540 --> 00:19:32,480
<font color="#E5E5E5">and HD</font><font color="#CCCCCC"> Fi the hot</font><font color="#E5E5E5"> we are</font><font color="#CCCCCC"> 68 in the flu</font>

358
00:19:21,530 --> 00:19:34,670
insulation<font color="#E5E5E5"> we in comparison to the HDMI</font>

359
00:19:32,480 --> 00:19:38,390
HDMI is for risk<font color="#CCCCCC"> 5 if I remember</font>

360
00:19:34,670 --> 00:19:43,910
correctly and<font color="#CCCCCC"> HTF I use a lot of</font>

361
00:19:38,390 --> 00:19:47,020
hardware<font color="#E5E5E5"> to to prevent all this</font>

362
00:19:43,910 --> 00:19:49,250
performance overhead incurred by there

363
00:19:47,020 --> 00:19:53,660
tagging table that they use<font color="#E5E5E5"> for the</font>

364
00:19:49,250 --> 00:19:57,500
memory and this is already<font color="#CCCCCC"> incorporated</font>

365
00:19:53,660 --> 00:20:02,000
cooperated in the<font color="#E5E5E5"> x86 hardware that will</font>

366
00:19:57,500 --> 00:20:06,860
leverage for a mix so actually<font color="#E5E5E5"> I mix is</font>

367
00:20:02,000 --> 00:20:08,900
for isolation<font color="#CCCCCC"> a kind of</font><font color="#E5E5E5"> subset but it</font>

368
00:20:06,860 --> 00:20:14,270
doesn't<font color="#E5E5E5"> require all the heavy hardware</font>

369
00:20:08,900 --> 00:20:18,020
changes<font color="#CCCCCC"> via HDMI requires I see</font><font color="#E5E5E5"> ok thank</font>

370
00:20:14,270 --> 00:20:20,270
you<font color="#CCCCCC"> for your question so the</font><font color="#E5E5E5"> s move sits</font>

371
00:20:18,020 --> 00:20:22,850
in the code space of the target

372
00:20:20,270 --> 00:20:27,180
<font color="#CCCCCC">application you're trying to protect yes</font>

373
00:20:22,850 --> 00:20:29,409
so what's stopping<font color="#E5E5E5"> you from</font><font color="#CCCCCC"> using</font>

374
00:20:27,180 --> 00:20:31,370
[Music]

375
00:20:29,410 --> 00:20:34,340
important to note is<font color="#CCCCCC"> read this is a</font>

376
00:20:31,370 --> 00:20:38,409
hardware primitive for mitigations<font color="#E5E5E5"> so</font>

377
00:20:34,340 --> 00:20:38,409
best case would<font color="#E5E5E5"> be the mitigation stops</font>

378
00:20:46,030 --> 00:20:55,850
no like this<font color="#E5E5E5"> you got CPI in place which</font>

379
00:20:51,380 --> 00:20:57,950
prevents code reuse<font color="#E5E5E5"> and CPI protects</font><font color="#CCCCCC"> its</font>

380
00:20:55,850 --> 00:21:00,350
save region using the<font color="#E5E5E5"> a small</font>

381
00:20:57,950 --> 00:21:04,130
<font color="#CCCCCC">instruction</font><font color="#E5E5E5"> so you as an attacker have</font>

382
00:21:00,350 --> 00:21:07,010
only<font color="#E5E5E5"> read write memory primitive</font><font color="#CCCCCC"> but you</font>

383
00:21:04,130 --> 00:21:18,910
cannot attack this save region of us you

384
00:21:07,010 --> 00:21:18,910
cannot perform code reuse yes thank you

385
00:21:19,909 --> 00:21:24,899
really really nice work I see<font color="#E5E5E5"> you're</font>

386
00:21:22,470 --> 00:21:32,190
very comprehensive<font color="#E5E5E5"> when you were looking</font>

387
00:21:24,899 --> 00:21:35,309
at the<font color="#CCCCCC"> 32-bit stacks can</font><font color="#E5E5E5"> you please</font>

388
00:21:32,190 --> 00:21:37,559
repeat<font color="#CCCCCC"> the you looked at the pretty</font>

389
00:21:35,309 --> 00:21:40,200
<font color="#E5E5E5">two-bit segments on the</font><font color="#CCCCCC"> x86 processor</font>

390
00:21:37,559 --> 00:21:43,230
yeah<font color="#E5E5E5"> along with</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you look at the</font>

391
00:21:40,200 --> 00:21:48,059
<font color="#CCCCCC">green structure as well</font><font color="#E5E5E5"> in consideration</font>

392
00:21:43,230 --> 00:21:50,779
<font color="#CCCCCC">for this</font><font color="#E5E5E5"> structure yes we have four</font>

393
00:21:48,059 --> 00:21:52,918
rings<font color="#E5E5E5"> to the x86 processor when you</font>

394
00:21:50,779 --> 00:21:57,049
finish<font color="#E5E5E5"> watching this whole</font><font color="#CCCCCC"> thing I say</font>

395
00:21:52,919 --> 00:21:57,049
gosh<font color="#E5E5E5"> you just testified use of rings</font>

396
00:21:57,889 --> 00:22:04,918
overview the<font color="#CCCCCC"> segments</font><font color="#E5E5E5"> are actually key</font>

397
00:22:01,860 --> 00:22:09,840
to read so you can<font color="#CCCCCC"> have multiple</font>

398
00:22:04,919 --> 00:22:12,029
segments<font color="#CCCCCC"> and</font><font color="#E5E5E5"> in in say the various</font>

399
00:22:09,840 --> 00:22:14,070
<font color="#CCCCCC">Sega's begin various rings and for the</font>

400
00:22:12,029 --> 00:22:16,380
application depend on how you set up<font color="#CCCCCC"> the</font>

401
00:22:14,070 --> 00:22:18,269
processor<font color="#CCCCCC"> you can have up to like three</font>

402
00:22:16,380 --> 00:22:19,649
rings for<font color="#CCCCCC"> the application so it provides</font>

403
00:22:18,269 --> 00:22:21,899
a nice<font color="#E5E5E5"> handy way of</font><font color="#CCCCCC"> segmenting the</font>

404
00:22:19,649 --> 00:22:22,768
application<font color="#E5E5E5"> they're still there in</font>

405
00:22:21,899 --> 00:22:28,559
64-bit mode

406
00:22:22,769 --> 00:22:36,470
unfortunately it's like the<font color="#CCCCCC"> cygnets are</font>

407
00:22:28,559 --> 00:22:39,779
sort of<font color="#CCCCCC"> they're trying to</font><font color="#E5E5E5"> reduce</font>

408
00:22:36,470 --> 00:22:41,220
<font color="#E5E5E5">segmentation functionality maybe but</font>

409
00:22:39,779 --> 00:22:46,139
what's<font color="#E5E5E5"> happening is they're vice and hey</font>

410
00:22:41,220 --> 00:22:47,700
we they come down with a<font color="#E5E5E5"> lot more</font>

411
00:22:46,139 --> 00:22:57,539
<font color="#E5E5E5">justification of segments in the past</font>

412
00:22:47,700 --> 00:22:58,889
couple years<font color="#E5E5E5"> okay yeah this would</font><font color="#CCCCCC"> be</font>

413
00:22:57,539 --> 00:23:00,919
interesting<font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> we can have a chat</font>

414
00:22:58,889 --> 00:23:00,918
later

415
00:23:04,460 --> 00:23:07,999
[Applause]

