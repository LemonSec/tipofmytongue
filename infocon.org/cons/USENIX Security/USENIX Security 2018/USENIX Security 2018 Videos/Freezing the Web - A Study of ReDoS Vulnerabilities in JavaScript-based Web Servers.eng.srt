1
00:00:10,010 --> 00:00:15,200
I'm here to talk today about<font color="#CCCCCC"> readers</font>

2
00:00:13,250 --> 00:00:17,240
<font color="#CCCCCC">detection nodejs</font><font color="#E5E5E5"> so we are a bit</font>

3
00:00:15,200 --> 00:00:21,020
<font color="#E5E5E5">expanding on the team presented before</font>

4
00:00:17,240 --> 00:00:23,990
<font color="#E5E5E5">by by Jamie</font><font color="#CCCCCC"> I want to convince</font><font color="#E5E5E5"> you that</font>

5
00:00:21,020 --> 00:00:27,890
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a serious problem</font><font color="#E5E5E5"> in in</font><font color="#CCCCCC"> nodejs</font>

6
00:00:23,990 --> 00:00:29,869
<font color="#E5E5E5">and it needs to be to</font><font color="#CCCCCC"> be addressed this</font>

7
00:00:27,890 --> 00:00:31,480
is joint work with<font color="#E5E5E5"> my supervisor Michael</font>

8
00:00:29,869 --> 00:00:34,460
product<font color="#E5E5E5"> from</font><font color="#CCCCCC"> tu Darmstadt</font>

9
00:00:31,480 --> 00:00:37,610
so first let's let's see how we<font color="#CCCCCC"> reduce</font>

10
00:00:34,460 --> 00:00:40,640
attack works in in practice<font color="#E5E5E5"> in</font><font color="#CCCCCC"> general</font>

11
00:00:37,610 --> 00:00:43,280
you<font color="#CCCCCC"> have a benign user that interacts</font>

12
00:00:40,640 --> 00:00:47,000
<font color="#CCCCCC">with an application and it submits such</font>

13
00:00:43,280 --> 00:00:49,909
an a benign input and on the server side

14
00:00:47,000 --> 00:00:51,559
<font color="#E5E5E5">a developer usually matches this against</font>

15
00:00:49,909 --> 00:00:54,140
a regular<font color="#CCCCCC"> expression is there either</font>

16
00:00:51,559 --> 00:00:56,110
personalization<font color="#E5E5E5"> or for extracting</font>

17
00:00:54,140 --> 00:00:59,390
<font color="#E5E5E5">certain information from the input and</font>

18
00:00:56,110 --> 00:01:02,720
after a constant<font color="#E5E5E5"> amount of</font><font color="#CCCCCC"> time it sends</font>

19
00:00:59,390 --> 00:01:05,900
back a<font color="#E5E5E5"> response to the to the user but</font>

20
00:01:02,720 --> 00:01:09,229
in a<font color="#CCCCCC"> reduced</font><font color="#E5E5E5"> attack the attacker instead</font>

21
00:01:05,900 --> 00:01:12,860
submits a very long tail<font color="#E5E5E5"> or a very a</font>

22
00:01:09,229 --> 00:01:15,170
well-crafted payload that<font color="#E5E5E5"> tries</font><font color="#CCCCCC"> to</font>

23
00:01:12,860 --> 00:01:17,500
exploit some<font color="#E5E5E5"> particularities of the</font>

24
00:01:15,170 --> 00:01:20,660
<font color="#E5E5E5">regular expression matching engine and</font>

25
00:01:17,500 --> 00:01:23,030
instead<font color="#E5E5E5"> of responding in a constant</font>

26
00:01:20,660 --> 00:01:25,460
<font color="#CCCCCC">amount of</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> the server now responds</font>

27
00:01:23,030 --> 00:01:28,010
in a super linear<font color="#E5E5E5"> amount of time</font>

28
00:01:25,460 --> 00:01:29,780
dependent on the<font color="#CCCCCC"> input size and in this</font>

29
00:01:28,010 --> 00:01:31,940
<font color="#E5E5E5">way the attacker can send a lot of</font>

30
00:01:29,780 --> 00:01:34,240
requests and<font color="#E5E5E5"> introduce a lot of useless</font>

31
00:01:31,940 --> 00:01:37,820
computation on the on the server side

32
00:01:34,240 --> 00:01:41,060
this<font color="#E5E5E5"> is a kind of known attack that the</font>

33
00:01:37,820 --> 00:01:43,789
community is aware<font color="#E5E5E5"> of but yeah we call</font>

34
00:01:41,060 --> 00:01:47,480
it freezing the the<font color="#CCCCCC"> website</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> the web</font>

35
00:01:43,790 --> 00:01:49,550
server and but our contribution here is

36
00:01:47,480 --> 00:01:52,370
to<font color="#CCCCCC"> show that this</font><font color="#E5E5E5"> reduce attack is</font>

37
00:01:49,550 --> 00:01:55,190
common in libraries we present<font color="#CCCCCC"> 25</font>

38
00:01:52,370 --> 00:01:58,180
vulnerabilities previously unknown we

39
00:01:55,190 --> 00:02:01,190
also show that<font color="#E5E5E5"> from this library level</font>

40
00:01:58,180 --> 00:02:03,650
<font color="#E5E5E5">vulnerabilities they expand</font><font color="#CCCCCC"> tool</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> web</font>

41
00:02:01,190 --> 00:02:05,840
<font color="#CCCCCC">sites vulnerability so an attacker can</font>

42
00:02:03,650 --> 00:02:08,709
leverage this library<font color="#E5E5E5"> level</font>

43
00:02:05,840 --> 00:02:12,110
vulnerabilities and our methodology

44
00:02:08,709 --> 00:02:14,239
<font color="#E5E5E5">enables us to to link</font><font color="#CCCCCC"> this to concept</font>

45
00:02:12,110 --> 00:02:17,209
library vulnerabilities with web<font color="#E5E5E5"> sites</font>

46
00:02:14,239 --> 00:02:19,129
vulnerabilities<font color="#E5E5E5"> so now let's understand</font>

47
00:02:17,209 --> 00:02:21,200
a bit<font color="#CCCCCC"> about the regular expression</font>

48
00:02:19,129 --> 00:02:22,660
matching how how<font color="#E5E5E5"> does the</font><font color="#CCCCCC"> redose payload</font>

49
00:02:21,200 --> 00:02:24,489
is created

50
00:02:22,660 --> 00:02:27,579
<font color="#E5E5E5">this simple expression over</font><font color="#CCCCCC"> here with</font>

51
00:02:24,490 --> 00:02:30,510
<font color="#E5E5E5">two unbounded repetitions of a and then</font>

52
00:02:27,580 --> 00:02:33,580
a<font color="#CCCCCC"> B</font><font color="#E5E5E5"> this is a well-known</font><font color="#CCCCCC"> readers</font>

53
00:02:30,510 --> 00:02:36,399
vulnerable regular expression<font color="#CCCCCC"> while the</font>

54
00:02:33,580 --> 00:02:38,170
<font color="#E5E5E5">engine does is</font><font color="#CCCCCC"> to to construct an</font>

55
00:02:36,400 --> 00:02:40,600
equivalent state machine with a start

56
00:02:38,170 --> 00:02:43,570
state and<font color="#E5E5E5"> an accept state and matching</font>

57
00:02:40,600 --> 00:02:46,239
consists of finding<font color="#CCCCCC"> a apart from starts</font>

58
00:02:43,570 --> 00:02:48,820
to accept state<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example if we have</font>

59
00:02:46,240 --> 00:02:51,310
an input a<font color="#E5E5E5"> B the engine would find this</font>

60
00:02:48,820 --> 00:02:54,010
path over<font color="#CCCCCC"> here too and conclude that</font>

61
00:02:51,310 --> 00:02:56,110
this indeed matches<font color="#E5E5E5"> the</font><font color="#CCCCCC"> input matches</font>

62
00:02:54,010 --> 00:02:59,530
the regular expression<font color="#E5E5E5"> if on the other</font>

63
00:02:56,110 --> 00:03:01,360
hand<font color="#E5E5E5"> we'd have a a B now we have to</font>

64
00:02:59,530 --> 00:03:03,370
repeat this transition over here between

65
00:03:01,360 --> 00:03:05,800
<font color="#E5E5E5">state</font><font color="#CCCCCC"> four</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> five and consume the</font>

66
00:03:03,370 --> 00:03:08,470
character<font color="#CCCCCC"> eight twice but an alternative</font>

67
00:03:05,800 --> 00:03:10,570
<font color="#CCCCCC">solution that an engine may find is</font><font color="#E5E5E5"> to</font>

68
00:03:08,470 --> 00:03:12,609
to<font color="#E5E5E5"> take this transition over here</font>

69
00:03:10,570 --> 00:03:15,579
eight<font color="#E5E5E5"> nine which also consumes a and</font>

70
00:03:12,610 --> 00:03:18,220
this uncertainty basically is what the

71
00:03:15,580 --> 00:03:20,440
attacker builds on and if the attacker

72
00:03:18,220 --> 00:03:24,040
now sends this long string of a

73
00:03:20,440 --> 00:03:27,970
<font color="#E5E5E5">characters the rate engine would reach</font>

74
00:03:24,040 --> 00:03:30,549
state<font color="#E5E5E5"> ten and without having</font><font color="#CCCCCC"> this</font>

75
00:03:27,970 --> 00:03:32,620
benefit of the<font color="#CCCCCC"> high-level overview that</font>

76
00:03:30,550 --> 00:03:34,420
<font color="#CCCCCC">we have and conclude that</font><font color="#E5E5E5"> there's no B</font>

77
00:03:32,620 --> 00:03:36,040
in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> input so give up and say this</font>

78
00:03:34,420 --> 00:03:37,958
doesn't<font color="#CCCCCC"> match the</font><font color="#E5E5E5"> regular expression</font>

79
00:03:36,040 --> 00:03:41,679
most of the implementation would

80
00:03:37,959 --> 00:03:44,260
backtrack and<font color="#CCCCCC"> try all the possible parts</font>

81
00:03:41,680 --> 00:03:46,510
from the state start state to the<font color="#E5E5E5"> accept</font>

82
00:03:44,260 --> 00:03:49,810
<font color="#CCCCCC">state</font><font color="#E5E5E5"> so basically going all the way</font>

83
00:03:46,510 --> 00:03:52,989
<font color="#E5E5E5">here repeating</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of times here then</font>

84
00:03:49,810 --> 00:03:55,690
continue<font color="#CCCCCC"> between eight and nine</font><font color="#E5E5E5"> and this</font>

85
00:03:52,989 --> 00:03:59,560
input<font color="#E5E5E5"> would take super linear time to</font>

86
00:03:55,690 --> 00:04:02,140
match dependent on the input<font color="#E5E5E5"> size so in</font>

87
00:03:59,560 --> 00:04:05,310
our methodology we start with<font color="#E5E5E5"> NPM</font>

88
00:04:02,140 --> 00:04:08,950
modules these are libraries for<font color="#CCCCCC"> nodejs</font>

89
00:04:05,310 --> 00:04:11,080
<font color="#E5E5E5">open source libraries we find module</font>

90
00:04:08,950 --> 00:04:13,390
level vulnerabilities in the first stage

91
00:04:11,080 --> 00:04:15,820
once we have these<font color="#CCCCCC"> vulnerabilities we</font>

92
00:04:13,390 --> 00:04:17,798
install<font color="#E5E5E5"> a local version</font><font color="#CCCCCC"> of nodejs and</font>

93
00:04:15,820 --> 00:04:20,320
imagine how the developers would use

94
00:04:17,798 --> 00:04:22,260
these vulnerable libraries<font color="#E5E5E5"> once we have</font>

95
00:04:20,320 --> 00:04:25,540
the scenarios<font color="#CCCCCC"> in which we say how the</font>

96
00:04:22,260 --> 00:04:29,530
developer used the vulnerable library<font color="#E5E5E5"> we</font>

97
00:04:25,540 --> 00:04:34,360
create an HTTP level payload in which we

98
00:04:29,530 --> 00:04:37,150
deliver<font color="#E5E5E5"> this payload over HTTP and</font>

99
00:04:34,360 --> 00:04:40,509
in the last stage<font color="#E5E5E5"> we take a set</font><font color="#CCCCCC"> of</font>

100
00:04:37,150 --> 00:04:43,719
websites<font color="#CCCCCC"> and by delivering</font><font color="#E5E5E5"> the small and</font>

101
00:04:40,509 --> 00:04:45,129
carefully the design payloads we show

102
00:04:43,720 --> 00:04:47,770
that<font color="#E5E5E5"> these websites</font><font color="#CCCCCC"> are indeed</font>

103
00:04:45,129 --> 00:04:51,400
vulnerable to<font color="#CCCCCC"> to read those attacks</font><font color="#E5E5E5"> of</font>

104
00:04:47,770 --> 00:04:53,680
course the tricky part here<font color="#E5E5E5"> is how to</font>

105
00:04:51,400 --> 00:04:55,620
<font color="#E5E5E5">perform this third phase on live</font>

106
00:04:53,680 --> 00:04:59,069
<font color="#CCCCCC">websites not on local machine without</font>

107
00:04:55,620 --> 00:05:02,080
harming these<font color="#CCCCCC"> websites in our</font><font color="#E5E5E5"> setup we</font>

108
00:04:59,069 --> 00:05:04,419
<font color="#E5E5E5">we use no</font><font color="#CCCCCC"> GS in single instance for the</font>

109
00:05:02,080 --> 00:05:07,840
first<font color="#CCCCCC"> two phases for creating the HTTP</font>

110
00:05:04,419 --> 00:05:10,448
level payloads<font color="#E5E5E5"> and we we look at popular</font>

111
00:05:07,840 --> 00:05:13,210
<font color="#CCCCCC">npm modules</font><font color="#E5E5E5"> and popular websites on</font>

112
00:05:10,449 --> 00:05:14,860
<font color="#CCCCCC">alexa</font><font color="#E5E5E5"> top 1 million we look at two</font>

113
00:05:13,210 --> 00:05:16,930
thousand websites two thousand eight

114
00:05:14,860 --> 00:05:20,259
hundred<font color="#E5E5E5"> that set the particular header</font>

115
00:05:16,930 --> 00:05:24,099
which is a signature of<font color="#E5E5E5"> the expressed</font>

116
00:05:20,259 --> 00:05:26,259
framework<font color="#E5E5E5"> the most most famous framework</font>

117
00:05:24,099 --> 00:05:31,628
<font color="#CCCCCC">on nodejs</font><font color="#E5E5E5"> and the fifth most dependent</font>

118
00:05:26,259 --> 00:05:33,550
<font color="#E5E5E5">npm volume so if you miss the top before</font>

119
00:05:31,629 --> 00:05:37,830
by<font color="#CCCCCC"> Jami you may you may ask yourself</font><font color="#E5E5E5"> why</font>

120
00:05:33,550 --> 00:05:42,400
<font color="#CCCCCC">nodejs or why would you create so one</font>

121
00:05:37,830 --> 00:05:44,859
important<font color="#E5E5E5"> issue here is that</font><font color="#CCCCCC"> nodejs is</font>

122
00:05:42,400 --> 00:05:46,859
<font color="#E5E5E5">single threaded</font><font color="#CCCCCC"> so since it uses it</font>

123
00:05:44,860 --> 00:05:50,199
builds on the<font color="#CCCCCC"> JavaScript engines the</font>

124
00:05:46,860 --> 00:05:52,270
event loop<font color="#E5E5E5"> architecture basically says</font>

125
00:05:50,199 --> 00:05:56,020
that all all the<font color="#CCCCCC"> javascript</font><font color="#E5E5E5"> code with</font>

126
00:05:52,270 --> 00:05:57,818
with would run in a single<font color="#CCCCCC"> thread this</font>

127
00:05:56,020 --> 00:06:01,060
includes the regular expression matching

128
00:05:57,819 --> 00:06:03,370
so if we can build a payload<font color="#E5E5E5"> a regular</font>

129
00:06:01,060 --> 00:06:05,860
expression<font color="#CCCCCC"> payload this would block not</font>

130
00:06:03,370 --> 00:06:07,870
only the current thread that that serves

131
00:06:05,860 --> 00:06:12,159
the current client but rather the whole

132
00:06:07,870 --> 00:06:14,139
instance of nodejs moreover the<font color="#CCCCCC"> the</font>

133
00:06:12,159 --> 00:06:18,069
third-party<font color="#E5E5E5"> libraries that are so common</font>

134
00:06:14,139 --> 00:06:20,469
in in nodejs are<font color="#E5E5E5"> also a problem because</font>

135
00:06:18,069 --> 00:06:23,800
<font color="#CCCCCC">even though these libraries</font><font color="#E5E5E5"> are in</font>

136
00:06:20,469 --> 00:06:26,949
<font color="#CCCCCC">general</font><font color="#E5E5E5"> available to to be analyzed it's</font>

137
00:06:23,800 --> 00:06:29,199
not clear whether if researchers<font color="#E5E5E5"> find</font>

138
00:06:26,949 --> 00:06:31,120
find a vulnerability<font color="#E5E5E5"> here in one</font><font color="#CCCCCC"> module</font>

139
00:06:29,199 --> 00:06:33,099
<font color="#E5E5E5">whether this vulnerability would affect</font>

140
00:06:31,120 --> 00:06:37,000
<font color="#E5E5E5">a website that uses this module maybe</font>

141
00:06:33,099 --> 00:06:39,819
the the web site sanitizes and<font color="#E5E5E5"> make sure</font>

142
00:06:37,000 --> 00:06:43,539
that the module is used<font color="#E5E5E5"> in a in a secure</font>

143
00:06:39,819 --> 00:06:45,849
way so I think our methodology basically

144
00:06:43,539 --> 00:06:46,919
tries to bridge this gap between a

145
00:06:45,849 --> 00:06:50,640
vulnerable module

146
00:06:46,920 --> 00:06:54,330
and a venerable<font color="#E5E5E5"> nodejs application so a</font>

147
00:06:50,640 --> 00:06:58,140
bit<font color="#E5E5E5"> about the ethics of analyzing</font><font color="#CCCCCC"> live</font>

148
00:06:54,330 --> 00:07:00,719
<font color="#CCCCCC">websites so in our experiments</font><font color="#E5E5E5"> we use</font>

149
00:06:58,140 --> 00:07:02,940
very few payloads we only have 80

150
00:07:00,720 --> 00:07:05,160
requests in total<font color="#CCCCCC"> we send them</font>

151
00:07:02,940 --> 00:07:08,130
sequentially<font color="#CCCCCC"> in what we call iterative</font>

152
00:07:05,160 --> 00:07:11,070
probing<font color="#E5E5E5"> so we start with the smaller</font>

153
00:07:08,130 --> 00:07:14,850
payloads<font color="#E5E5E5"> and we increase the size paying</font>

154
00:07:11,070 --> 00:07:16,590
<font color="#E5E5E5">attention of both how long this requests</font>

155
00:07:14,850 --> 00:07:19,260
take and whether the the web server

156
00:07:16,590 --> 00:07:22,460
replies with an error<font color="#CCCCCC"> if that's the</font><font color="#E5E5E5"> case</font>

157
00:07:19,260 --> 00:07:25,320
we immediately stop our analysis<font color="#E5E5E5"> and</font>

158
00:07:22,460 --> 00:07:28,229
lastly<font color="#E5E5E5"> we we report all our from the</font>

159
00:07:25,320 --> 00:07:30,630
<font color="#E5E5E5">abilities</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> library creator and the</font>

160
00:07:28,230 --> 00:07:33,570
majority of them<font color="#CCCCCC"> have currently been</font>

161
00:07:30,630 --> 00:07:36,719
fixed so an attacker cannot<font color="#E5E5E5"> use the</font>

162
00:07:33,570 --> 00:07:38,820
payloads we use here<font color="#E5E5E5"> we describe so now</font>

163
00:07:36,720 --> 00:07:42,210
I'll<font color="#CCCCCC"> go step-by-step</font><font color="#E5E5E5"> through through the</font>

164
00:07:38,820 --> 00:07:44,940
<font color="#E5E5E5">methodology</font><font color="#CCCCCC"> first in the in the MPM</font>

165
00:07:42,210 --> 00:07:48,120
analysis<font color="#E5E5E5"> phase we look at open source</font>

166
00:07:44,940 --> 00:07:50,910
code<font color="#E5E5E5"> and we consider we consider a</font>

167
00:07:48,120 --> 00:07:53,640
module<font color="#CCCCCC"> to be vulnerable if we can create</font>

168
00:07:50,910 --> 00:07:57,450
a payload that is<font color="#E5E5E5"> 80,000 characters long</font>

169
00:07:53,640 --> 00:08:01,320
and it<font color="#E5E5E5"> takes more than</font><font color="#CCCCCC"> 5 seconds to</font>

170
00:07:57,450 --> 00:08:03,659
match why why<font color="#CCCCCC"> these</font><font color="#E5E5E5"> values the 80,000</font>

171
00:08:01,320 --> 00:08:06,599
characters<font color="#E5E5E5"> is the the header size in no</font>

172
00:08:03,660 --> 00:08:09,780
<font color="#E5E5E5">js' and since we want</font><font color="#CCCCCC"> to look at scale</font>

173
00:08:06,600 --> 00:08:12,960
at web applications<font color="#E5E5E5"> we took this this</font>

174
00:08:09,780 --> 00:08:15,270
limit into account in this first<font color="#E5E5E5"> phase</font>

175
00:08:12,960 --> 00:08:17,430
but of course if if an attacker decides

176
00:08:15,270 --> 00:08:20,580
to send this payload<font color="#E5E5E5"> through let's say</font>

177
00:08:17,430 --> 00:08:24,150
post request<font color="#E5E5E5"> then you can relax this</font>

178
00:08:20,580 --> 00:08:26,340
this<font color="#E5E5E5"> value here and the 5 seconds is an</font>

179
00:08:24,150 --> 00:08:28,650
overestimate of what currently the

180
00:08:26,340 --> 00:08:31,739
community<font color="#E5E5E5"> considers a vulnerability</font><font color="#CCCCCC"> a</font>

181
00:08:28,650 --> 00:08:34,199
reduce vulnerability we manually looked

182
00:08:31,740 --> 00:08:36,150
for for this regular expression patterns

183
00:08:34,200 --> 00:08:38,790
that are known to<font color="#CCCCCC"> be vulnerable</font><font color="#E5E5E5"> to read</font>

184
00:08:36,150 --> 00:08:42,090
<font color="#E5E5E5">us and for the</font><font color="#CCCCCC"> information flow that</font>

185
00:08:38,789 --> 00:08:45,480
confirms that<font color="#E5E5E5"> the there is</font><font color="#CCCCCC"> a path from</font>

186
00:08:42,090 --> 00:08:48,900
<font color="#E5E5E5">the API of the module to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> sink to</font><font color="#CCCCCC"> the</font>

187
00:08:45,480 --> 00:08:51,240
<font color="#E5E5E5">readers sink and we manually</font><font color="#CCCCCC"> crafted</font>

188
00:08:48,900 --> 00:08:52,800
exploits and measured the execution<font color="#E5E5E5"> time</font>

189
00:08:51,240 --> 00:08:58,560
so the the matching<font color="#CCCCCC"> of the regular</font>

190
00:08:52,800 --> 00:09:00,560
<font color="#CCCCCC">expression in total</font><font color="#E5E5E5"> we have 25</font>

191
00:08:58,560 --> 00:09:03,920
<font color="#E5E5E5">gulnur abilities as I said in the</font>

192
00:09:00,560 --> 00:09:06,050
<font color="#E5E5E5">production which resulted in 13</font>

193
00:09:03,920 --> 00:09:08,209
<font color="#E5E5E5">advisories these are basically public</font>

194
00:09:06,050 --> 00:09:10,579
<font color="#E5E5E5">statements</font><font color="#CCCCCC"> by the community that says</font>

195
00:09:08,210 --> 00:09:13,790
<font color="#E5E5E5">this specific version of a module is</font>

196
00:09:10,580 --> 00:09:15,680
vulnerable<font color="#E5E5E5"> and</font><font color="#CCCCCC"> unexpectedly we also got</font>

197
00:09:13,790 --> 00:09:18,500
<font color="#CCCCCC">the bug bounty in the process one of</font><font color="#E5E5E5"> the</font>

198
00:09:15,680 --> 00:09:21,349
company decided<font color="#E5E5E5"> to reward us for for the</font>

199
00:09:18,500 --> 00:09:23,720
effort<font color="#E5E5E5"> I'll show you a</font><font color="#CCCCCC"> couple of</font>

200
00:09:21,350 --> 00:09:27,140
examples<font color="#CCCCCC"> so</font><font color="#E5E5E5"> here is one of the</font>

201
00:09:23,720 --> 00:09:29,930
vulnerabilities we found and of<font color="#E5E5E5"> course</font>

202
00:09:27,140 --> 00:09:31,640
<font color="#E5E5E5">maybe it's hard to see at first sight if</font>

203
00:09:29,930 --> 00:09:34,969
you if you never<font color="#E5E5E5"> saw this</font><font color="#CCCCCC"> problem before</font>

204
00:09:31,640 --> 00:09:37,819
but the trick is the vulnerability<font color="#CCCCCC"> is</font>

205
00:09:34,970 --> 00:09:40,460
here this<font color="#CCCCCC"> - unbounded repetition next to</font>

206
00:09:37,820 --> 00:09:42,710
each<font color="#E5E5E5"> other</font><font color="#CCCCCC"> so basically here we repeat</font>

207
00:09:40,460 --> 00:09:44,810
the space characters and here<font color="#E5E5E5"> the not</font>

208
00:09:42,710 --> 00:09:47,660
<font color="#E5E5E5">equal character and this gets confusing</font>

209
00:09:44,810 --> 00:09:50,000
<font color="#E5E5E5">for the direct engine which would try to</font>

210
00:09:47,660 --> 00:09:53,870
match a space in different<font color="#E5E5E5"> in</font><font color="#CCCCCC"> different</font>

211
00:09:50,000 --> 00:09:55,850
<font color="#CCCCCC">ways</font><font color="#E5E5E5"> and more serious vulnerability we</font>

212
00:09:53,870 --> 00:09:57,830
identified within<font color="#E5E5E5"> the you way parser</font>

213
00:09:55,850 --> 00:10:01,520
<font color="#CCCCCC">jeaious package this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the package for</font>

214
00:09:57,830 --> 00:10:03,320
parsing user agents and this is a an

215
00:10:01,520 --> 00:10:06,079
exponential vulnerability because we

216
00:10:03,320 --> 00:10:08,690
have two nested repetitions here<font color="#E5E5E5"> an</font>

217
00:10:06,080 --> 00:10:11,210
alphanumeric nested and then again

218
00:10:08,690 --> 00:10:15,140
nested and<font color="#E5E5E5"> this would allow an attacker</font>

219
00:10:11,210 --> 00:10:18,770
to deploy a really serious<font color="#CCCCCC"> payload once</font>

220
00:10:15,140 --> 00:10:20,150
we identify<font color="#E5E5E5"> this 25 vulnerabilities we</font>

221
00:10:18,770 --> 00:10:23,900
proceed to phase<font color="#E5E5E5"> two</font>

222
00:10:20,150 --> 00:10:26,329
<font color="#E5E5E5">in phase two we we look at local nodejs</font>

223
00:10:23,900 --> 00:10:29,420
installations and created the usage

224
00:10:26,330 --> 00:10:31,760
scenario for each vulnerability<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I'll</font>

225
00:10:29,420 --> 00:10:34,459
show<font color="#E5E5E5"> you now how a usage scenario looks</font>

226
00:10:31,760 --> 00:10:38,480
<font color="#E5E5E5">like so for this</font><font color="#CCCCCC"> package over</font><font color="#E5E5E5"> here</font>

227
00:10:34,460 --> 00:10:41,180
mobile detect we basically hypothesized

228
00:10:38,480 --> 00:10:43,700
<font color="#CCCCCC">that</font><font color="#E5E5E5"> on the server side</font><font color="#CCCCCC"> the developer</font>

229
00:10:41,180 --> 00:10:46,250
<font color="#CCCCCC">just</font><font color="#E5E5E5"> takes the user agent</font><font color="#CCCCCC"> parses it</font>

230
00:10:43,700 --> 00:10:48,980
passes it to<font color="#E5E5E5"> the constructor</font><font color="#CCCCCC"> and then</font>

231
00:10:46,250 --> 00:10:51,709
calls this method phone<font color="#E5E5E5"> here if the</font>

232
00:10:48,980 --> 00:10:55,070
method is not<font color="#E5E5E5"> called then basically our</font>

233
00:10:51,709 --> 00:10:57,910
payload is not delivered and our HTTP

234
00:10:55,070 --> 00:11:02,029
<font color="#CCCCCC">levels that we produce are for this</font>

235
00:10:57,910 --> 00:11:04,250
<font color="#E5E5E5">particular scenario</font><font color="#CCCCCC"> and we were able</font><font color="#E5E5E5"> to</font>

236
00:11:02,029 --> 00:11:05,959
create<font color="#E5E5E5"> eight payloads and this</font>

237
00:11:04,250 --> 00:11:08,990
difference this mismatch<font color="#E5E5E5"> between the</font>

238
00:11:05,959 --> 00:11:12,199
<font color="#E5E5E5">eight payloads at HTTP level</font><font color="#CCCCCC"> and the</font><font color="#E5E5E5"> 25</font>

239
00:11:08,990 --> 00:11:14,209
at module<font color="#CCCCCC"> level</font><font color="#E5E5E5"> comes from</font><font color="#CCCCCC"> basically</font><font color="#E5E5E5"> our</font>

240
00:11:12,200 --> 00:11:17,480
target<font color="#E5E5E5"> to study where</font>

241
00:11:14,209 --> 00:11:19,849
<font color="#E5E5E5">sites at scale and from the fact</font><font color="#CCCCCC"> that we</font>

242
00:11:17,480 --> 00:11:25,160
we<font color="#CCCCCC"> basically</font><font color="#E5E5E5"> restricted ourselves to</font>

243
00:11:19,850 --> 00:11:26,959
HTTP headers payloads<font color="#E5E5E5"> and now that we</font>

244
00:11:25,160 --> 00:11:29,118
<font color="#E5E5E5">have this eight payloads I want to show</font>

245
00:11:26,959 --> 00:11:31,099
you how the input dependency looks like

246
00:11:29,119 --> 00:11:32,839
so the relation<font color="#E5E5E5"> between the input size</font>

247
00:11:31,100 --> 00:11:36,079
here the number of<font color="#E5E5E5"> characters</font><font color="#CCCCCC"> of the</font>

248
00:11:32,839 --> 00:11:37,730
payload and the matching time<font color="#E5E5E5"> so for</font>

249
00:11:36,079 --> 00:11:40,670
<font color="#E5E5E5">example the vulnerability we discussed</font>

250
00:11:37,730 --> 00:11:43,610
<font color="#CCCCCC">earlier</font><font color="#E5E5E5"> the you a parser</font><font color="#CCCCCC"> jeaious</font><font color="#E5E5E5"> you see</font>

251
00:11:40,670 --> 00:11:45,740
<font color="#E5E5E5">it's it's</font><font color="#CCCCCC"> basically exponential so we</font>

252
00:11:43,610 --> 00:11:48,529
need 40 characters<font color="#E5E5E5"> to trigger a</font><font color="#CCCCCC"> two</font>

253
00:11:45,740 --> 00:11:52,220
<font color="#E5E5E5">seconds payload two seconds matching</font>

254
00:11:48,529 --> 00:11:55,189
<font color="#E5E5E5">time sorry and the less</font><font color="#CCCCCC"> serious one user</font>

255
00:11:52,220 --> 00:11:58,839
agent still requires less than<font color="#CCCCCC"> 1,000</font>

256
00:11:55,189 --> 00:12:01,309
<font color="#E5E5E5">characters to deploy a one-second delay</font>

257
00:11:58,839 --> 00:12:04,399
<font color="#E5E5E5">but most of the vulnerabilities we</font>

258
00:12:01,309 --> 00:12:06,709
identified<font color="#E5E5E5"> we're super linear so this</font>

259
00:12:04,399 --> 00:12:08,649
basically<font color="#E5E5E5"> means that you need more</font><font color="#CCCCCC"> than</font>

260
00:12:06,709 --> 00:12:11,599
twenty thirty thousand characters to

261
00:12:08,649 --> 00:12:15,019
introduce a one<font color="#E5E5E5"> one or two seconds delay</font>

262
00:12:11,600 --> 00:12:17,929
in the application in the<font color="#E5E5E5"> server-side so</font>

263
00:12:15,019 --> 00:12:19,730
once we we have this relation<font color="#CCCCCC"> between</font>

264
00:12:17,929 --> 00:12:21,920
the input size and the matching time

265
00:12:19,730 --> 00:12:24,769
<font color="#E5E5E5">what we did was to dimension the</font>

266
00:12:21,920 --> 00:12:28,069
payloads<font color="#E5E5E5"> starting at 100 millisecond</font>

267
00:12:24,769 --> 00:12:30,799
target and here we we basically<font color="#E5E5E5"> measured</font>

268
00:12:28,069 --> 00:12:34,719
on our local<font color="#CCCCCC"> machine</font><font color="#E5E5E5"> how how many</font>

269
00:12:30,799 --> 00:12:37,220
characters we should send<font color="#E5E5E5"> for</font><font color="#CCCCCC"> a 100 mega</font>

270
00:12:34,720 --> 00:12:40,730
<font color="#CCCCCC">millisecond sorry for 100 milliseconds</font>

271
00:12:37,220 --> 00:12:43,970
matching time<font color="#E5E5E5"> and we sent three requests</font>

272
00:12:40,730 --> 00:12:48,049
for<font color="#CCCCCC"> warmup</font><font color="#E5E5E5"> and five for measuring we</font>

273
00:12:43,970 --> 00:12:50,089
also sent five random characters of the

274
00:12:48,049 --> 00:12:52,549
same size<font color="#CCCCCC"> so basically we can</font><font color="#E5E5E5"> compare</font>

275
00:12:50,089 --> 00:12:55,279
the response to our<font color="#E5E5E5"> craft at the input</font>

276
00:12:52,549 --> 00:12:58,459
<font color="#CCCCCC">and to the random input</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> have then a</font>

277
00:12:55,279 --> 00:13:00,619
payload at 200<font color="#E5E5E5"> milliseconds level 500</font>

278
00:12:58,459 --> 00:13:03,979
<font color="#E5E5E5">one second and two seconds so these are</font>

279
00:13:00,619 --> 00:13:06,649
<font color="#CCCCCC">two to five matching times we consider</font>

280
00:13:03,980 --> 00:13:10,279
and we consider a website to be

281
00:13:06,649 --> 00:13:13,339
vulnerable<font color="#E5E5E5"> if by sending these payloads</font>

282
00:13:10,279 --> 00:13:16,040
here in increasing order<font color="#E5E5E5"> we observe a</font>

283
00:13:13,339 --> 00:13:17,629
significant statistically significant

284
00:13:16,040 --> 00:13:19,730
difference between the crafted and the

285
00:13:17,629 --> 00:13:22,279
random input and this difference

286
00:13:19,730 --> 00:13:24,199
<font color="#CCCCCC">increases over time with</font><font color="#E5E5E5"> over the</font>

287
00:13:22,279 --> 00:13:25,819
payload size<font color="#E5E5E5"> sorry so as we increase the</font>

288
00:13:24,199 --> 00:13:28,179
<font color="#CCCCCC">payload size</font><font color="#E5E5E5"> the difference should</font>

289
00:13:25,819 --> 00:13:28,179
increase

290
00:13:29,490 --> 00:13:35,680
so now I'll<font color="#CCCCCC"> show you</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> a non</font>

291
00:13:32,650 --> 00:13:40,060
vulnerable<font color="#E5E5E5"> website responds to to our</font>

292
00:13:35,680 --> 00:13:41,829
<font color="#CCCCCC">requests so here we have the payloads</font>

293
00:13:40,060 --> 00:13:45,400
<font color="#E5E5E5">the five payloads I described earlier</font>

294
00:13:41,830 --> 00:13:47,230
<font color="#E5E5E5">and the response time with black we have</font>

295
00:13:45,400 --> 00:13:50,170
the<font color="#CCCCCC"> random inputs</font><font color="#E5E5E5"> with the confidence</font>

296
00:13:47,230 --> 00:13:52,540
intervals<font color="#E5E5E5"> and with the red we depicted</font>

297
00:13:50,170 --> 00:13:54,160
the crafted input as you<font color="#E5E5E5"> see there's a</font>

298
00:13:52,540 --> 00:13:57,040
<font color="#E5E5E5">lot of overlap so</font><font color="#CCCCCC"> we cannot really</font>

299
00:13:54,160 --> 00:13:58,870
<font color="#E5E5E5">conclude anything about the website</font>

300
00:13:57,040 --> 00:14:00,579
whether it's vulnerable or<font color="#CCCCCC"> no we can</font>

301
00:13:58,870 --> 00:14:03,820
<font color="#CCCCCC">conclude that</font><font color="#E5E5E5"> it's not actually</font><font color="#CCCCCC"> because</font>

302
00:14:00,580 --> 00:14:05,770
since<font color="#E5E5E5"> it's it's not easy to discriminate</font>

303
00:14:03,820 --> 00:14:09,250
between the two of them here<font color="#E5E5E5"> for example</font>

304
00:14:05,770 --> 00:14:12,640
<font color="#E5E5E5">at payload number five the random one is</font>

305
00:14:09,250 --> 00:14:14,590
even slower<font color="#E5E5E5"> than the</font><font color="#CCCCCC"> Crofton one but a</font>

306
00:14:12,640 --> 00:14:17,410
vulnerable website on the other hand

307
00:14:14,590 --> 00:14:20,500
replies<font color="#CCCCCC"> like this in in our experiment</font>

308
00:14:17,410 --> 00:14:22,630
so basically the the five payloads<font color="#CCCCCC"> two</font>

309
00:14:20,500 --> 00:14:24,760
random characters payloads<font color="#E5E5E5"> with black</font>

310
00:14:22,630 --> 00:14:27,990
here they are all served in<font color="#E5E5E5"> less than</font>

311
00:14:24,760 --> 00:14:33,189
500<font color="#E5E5E5"> milliseconds but the crafted ones</font>

312
00:14:27,990 --> 00:14:35,920
they take super linear time to respond

313
00:14:33,190 --> 00:14:38,880
<font color="#CCCCCC">so basically for payload number</font><font color="#E5E5E5"> four we</font>

314
00:14:35,920 --> 00:14:41,890
get<font color="#E5E5E5"> more than one second response time</font>

315
00:14:38,880 --> 00:14:44,410
why I hope I can<font color="#E5E5E5"> say I convinced you</font>

316
00:14:41,890 --> 00:14:47,290
<font color="#E5E5E5">that this is a good way to show</font><font color="#CCCCCC"> that a</font>

317
00:14:44,410 --> 00:14:49,630
specific<font color="#CCCCCC"> website</font><font color="#E5E5E5"> is vulnerable and an</font>

318
00:14:47,290 --> 00:14:52,540
interesting side effect of<font color="#E5E5E5"> of our</font>

319
00:14:49,630 --> 00:14:55,330
methodology<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that we can basically say</font>

320
00:14:52,540 --> 00:14:57,099
for each payload how many<font color="#E5E5E5"> websites are</font>

321
00:14:55,330 --> 00:14:59,920
vulnerable<font color="#CCCCCC"> to</font><font color="#E5E5E5"> that payload</font><font color="#CCCCCC"> so for</font>

322
00:14:57,100 --> 00:15:02,680
<font color="#E5E5E5">example for the vulnerability I showed</font>

323
00:14:59,920 --> 00:15:04,810
during<font color="#CCCCCC"> the talk that you</font><font color="#E5E5E5"> a parser</font>

324
00:15:02,680 --> 00:15:07,359
<font color="#CCCCCC">jeaious this</font><font color="#E5E5E5"> is the very serious</font>

325
00:15:04,810 --> 00:15:09,849
exponential<font color="#CCCCCC"> reduce vulnerability we can</font>

326
00:15:07,360 --> 00:15:12,970
say that<font color="#CCCCCC"> 41 websites are vulnerable to</font>

327
00:15:09,850 --> 00:15:15,220
<font color="#CCCCCC">to</font><font color="#E5E5E5"> that payload to that vulnerability</font>

328
00:15:12,970 --> 00:15:17,800
<font color="#CCCCCC">and you can do a so the other way around</font>

329
00:15:15,220 --> 00:15:19,810
<font color="#CCCCCC">and say</font><font color="#E5E5E5"> that specific website is</font>

330
00:15:17,800 --> 00:15:22,300
vulnerable to<font color="#E5E5E5"> these two payloads and</font>

331
00:15:19,810 --> 00:15:24,219
thus uses those two<font color="#E5E5E5"> packages on the</font>

332
00:15:22,300 --> 00:15:27,760
<font color="#E5E5E5">server side and</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> an effective way</font>

333
00:15:24,220 --> 00:15:32,290
to fingerprint<font color="#E5E5E5"> web servers</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> total we</font>

334
00:15:27,760 --> 00:15:35,050
found that 339<font color="#E5E5E5"> websites 11% of the the</font>

335
00:15:32,290 --> 00:15:40,050
ones we consider are vulnerable to<font color="#CCCCCC"> a</font>

336
00:15:35,050 --> 00:15:43,059
<font color="#CCCCCC">redose attack</font><font color="#E5E5E5"> but of course some</font><font color="#CCCCCC"> of them</font>

337
00:15:40,050 --> 00:15:45,519
deploy some kind of control<font color="#CCCCCC"> some defense</font>

338
00:15:43,059 --> 00:15:48,550
against such attacks<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> redose</font>

339
00:15:45,519 --> 00:15:50,889
attack is not just the packages we sent

340
00:15:48,550 --> 00:15:53,979
here<font color="#CCCCCC"> an attacker would need to</font><font color="#E5E5E5"> send tens</font>

341
00:15:50,889 --> 00:15:56,019
or hundreds maybe tens of thousands<font color="#E5E5E5"> of</font>

342
00:15:53,980 --> 00:15:58,720
such requests<font color="#E5E5E5"> to deploy a read</font><font color="#CCCCCC"> of the</font>

343
00:15:56,019 --> 00:16:01,809
<font color="#E5E5E5">tech and what we saw deployed in the</font>

344
00:15:58,720 --> 00:16:03,519
<font color="#E5E5E5">wild was basically some kind</font><font color="#CCCCCC"> of limit on</font>

345
00:16:01,809 --> 00:16:05,800
the header size here<font color="#E5E5E5"> we have the</font>

346
00:16:03,519 --> 00:16:08,939
accepted header size and<font color="#E5E5E5"> a number</font><font color="#CCCCCC"> of</font>

347
00:16:05,800 --> 00:16:11,199
<font color="#CCCCCC">websites</font><font color="#E5E5E5"> so if we send for the first</font>

348
00:16:08,939 --> 00:16:13,719
payload for this<font color="#E5E5E5"> charge</font><font color="#CCCCCC"> set</font>

349
00:16:11,199 --> 00:16:17,559
<font color="#E5E5E5">vulnerability</font><font color="#CCCCCC"> the first payload we send</font>

350
00:16:13,720 --> 00:16:19,949
is around<font color="#CCCCCC"> 9,000 characters and most of</font>

351
00:16:17,559 --> 00:16:24,670
the<font color="#CCCCCC"> website's</font><font color="#E5E5E5"> accept this payload the</font>

352
00:16:19,949 --> 00:16:26,559
nine thousand characters payload but<font color="#E5E5E5"> as</font>

353
00:16:24,670 --> 00:16:30,368
we increase<font color="#CCCCCC"> this and we cross the</font><font color="#E5E5E5"> ten</font>

354
00:16:26,559 --> 00:16:33,519
<font color="#E5E5E5">thousand characters input size header</font>

355
00:16:30,369 --> 00:16:35,679
size they they start with<font color="#E5E5E5"> stop</font>

356
00:16:33,519 --> 00:16:39,009
responding<font color="#E5E5E5"> sorry so in the end for the</font>

357
00:16:35,679 --> 00:16:40,300
fifth payload<font color="#E5E5E5"> we got</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> four hundred</font>

358
00:16:39,009 --> 00:16:43,740
<font color="#CCCCCC">websites or something like that</font>

359
00:16:40,300 --> 00:16:46,540
responding<font color="#E5E5E5"> and if we look across all the</font>

360
00:16:43,740 --> 00:16:49,959
<font color="#E5E5E5">vulnerabilities</font><font color="#CCCCCC"> we identified and across</font>

361
00:16:46,540 --> 00:16:53,319
all the payloads we see this<font color="#E5E5E5"> descending</font>

362
00:16:49,959 --> 00:16:56,138
trend that basically as we send more

363
00:16:53,319 --> 00:16:59,019
payloads<font color="#E5E5E5"> the websites start responding</font>

364
00:16:56,139 --> 00:17:01,600
<font color="#E5E5E5">and this is even for the small ones</font><font color="#CCCCCC"> that</font>

365
00:16:59,019 --> 00:17:03,790
have less<font color="#CCCCCC"> than 100 characters</font><font color="#E5E5E5"> basically</font>

366
00:17:01,600 --> 00:17:06,610
<font color="#E5E5E5">even here the website stops responding</font>

367
00:17:03,790 --> 00:17:08,740
and we<font color="#CCCCCC"> believe that there's some kind</font><font color="#E5E5E5"> of</font>

368
00:17:06,609 --> 00:17:11,319
check on the number<font color="#E5E5E5"> of requests a</font>

369
00:17:08,740 --> 00:17:14,199
website gets from the same<font color="#E5E5E5"> ip address</font>

370
00:17:11,319 --> 00:17:16,510
<font color="#E5E5E5">and this is a great first level</font>

371
00:17:14,199 --> 00:17:19,329
protection<font color="#CCCCCC"> but of</font><font color="#E5E5E5"> course</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> website</font>

372
00:17:16,510 --> 00:17:21,908
should consider more principled way of

373
00:17:19,329 --> 00:17:23,648
tackling this problem<font color="#E5E5E5"> for example having</font>

374
00:17:21,909 --> 00:17:25,299
<font color="#E5E5E5">better implementation</font><font color="#CCCCCC"> for regular</font>

375
00:17:23,648 --> 00:17:27,309
<font color="#CCCCCC">expression matching instead of the</font>

376
00:17:25,299 --> 00:17:30,340
backtracking solution<font color="#E5E5E5"> I presented here</font>

377
00:17:27,309 --> 00:17:32,049
there are several other<font color="#E5E5E5"> ways to match</font>

378
00:17:30,340 --> 00:17:35,080
regular expression more efficient

379
00:17:32,049 --> 00:17:37,240
<font color="#E5E5E5">especially</font><font color="#CCCCCC"> when certain constructions</font>

380
00:17:35,080 --> 00:17:39,879
<font color="#E5E5E5">are certain syntax is not used such as</font>

381
00:17:37,240 --> 00:17:42,549
backed reference or for reference<font color="#E5E5E5"> and</font>

382
00:17:39,880 --> 00:17:44,260
this is successfully deployed in in rust

383
00:17:42,549 --> 00:17:48,220
but of course this<font color="#E5E5E5"> is very</font><font color="#CCCCCC"> expensive to</font>

384
00:17:44,260 --> 00:17:50,379
<font color="#E5E5E5">implement and deploy another</font><font color="#CCCCCC"> solution</font>

385
00:17:48,220 --> 00:17:52,929
was presented earlier<font color="#CCCCCC"> in this session by</font>

386
00:17:50,380 --> 00:17:55,750
by<font color="#CCCCCC"> Jamie</font><font color="#E5E5E5"> but of course as he</font>

387
00:17:52,929 --> 00:17:57,820
described also<font color="#E5E5E5"> there there's a sweet</font>

388
00:17:55,750 --> 00:17:59,850
<font color="#E5E5E5">spot</font><font color="#CCCCCC"> there how</font><font color="#E5E5E5"> to choose the correct</font>

389
00:17:57,820 --> 00:18:02,379
<font color="#CCCCCC">timeout</font><font color="#E5E5E5"> value and it probably is</font>

390
00:17:59,850 --> 00:18:05,168
<font color="#E5E5E5">application dependent but we believe</font>

391
00:18:02,380 --> 00:18:07,840
this<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> great solution</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> finally</font>

392
00:18:05,169 --> 00:18:10,150
<font color="#E5E5E5">better tools</font><font color="#CCCCCC"> for identifying these</font>

393
00:18:07,840 --> 00:18:12,970
vulnerabilities<font color="#E5E5E5"> and creating exploits</font>

394
00:18:10,150 --> 00:18:14,409
<font color="#E5E5E5">are needed in the</font><font color="#CCCCCC"> community needs them</font>

395
00:18:12,970 --> 00:18:18,750
because there are<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font>

396
00:18:14,409 --> 00:18:21,039
vulnerabilities out there so to<font color="#CCCCCC"> conclude</font>

397
00:18:18,750 --> 00:18:22,990
today I showed<font color="#CCCCCC"> that I showed you that</font>

398
00:18:21,039 --> 00:18:26,710
<font color="#CCCCCC">three-dose vulnerabilities are</font>

399
00:18:22,990 --> 00:18:28,690
widespread in in<font color="#CCCCCC"> no</font><font color="#E5E5E5"> GS</font><font color="#CCCCCC"> in particular in</font>

400
00:18:26,710 --> 00:18:31,330
<font color="#CCCCCC">NPM modules which are the</font><font color="#E5E5E5"> third-party</font>

401
00:18:28,690 --> 00:18:33,399
libraries of nodejs that<font color="#E5E5E5"> these</font>

402
00:18:31,330 --> 00:18:38,129
<font color="#E5E5E5">vulnerabilities can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> exploited in live</font>

403
00:18:33,399 --> 00:18:41,199
<font color="#CCCCCC">websites</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> 11% of</font><font color="#E5E5E5"> the web sites are</font>

404
00:18:38,130 --> 00:18:44,110
vulnerable to<font color="#E5E5E5"> one of the attack vectors</font>

405
00:18:41,200 --> 00:18:45,520
we constructed<font color="#E5E5E5"> and that</font><font color="#CCCCCC"> redose</font>

406
00:18:44,110 --> 00:18:48,158
vulnerabilities can be used to

407
00:18:45,520 --> 00:18:51,750
fingerprint web servers finally we

408
00:18:48,159 --> 00:18:54,700
discussed a set of mitigations<font color="#E5E5E5"> and</font>

409
00:18:51,750 --> 00:18:56,860
pluses and minuses<font color="#CCCCCC"> for for each of them</font>

410
00:18:54,700 --> 00:18:59,070
<font color="#E5E5E5">thank you</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> much and I'd be happy</font><font color="#CCCCCC"> to</font>

411
00:18:56,860 --> 00:19:00,000
take any<font color="#E5E5E5"> questions</font>

412
00:18:59,070 --> 00:19:03,450
[Applause]

413
00:19:00,000 --> 00:19:03,450
[Music]

414
00:19:07,610 --> 00:19:11,269
got some time<font color="#CCCCCC"> for some</font><font color="#E5E5E5"> questions</font>

415
00:19:17,170 --> 00:19:21,850
so I'm still a<font color="#E5E5E5"> little curious about the</font>

416
00:19:19,480 --> 00:19:23,770
ethics of sending malicious payloads to

417
00:19:21,850 --> 00:19:26,830
<font color="#E5E5E5">websites that might make them timeout</font>

418
00:19:23,770 --> 00:19:30,970
<font color="#E5E5E5">yeah I think that that's a great</font>

419
00:19:26,830 --> 00:19:33,280
<font color="#E5E5E5">question</font><font color="#CCCCCC"> so I I hoped I I</font><font color="#E5E5E5"> tackled that</font>

420
00:19:30,970 --> 00:19:36,610
problem<font color="#E5E5E5"> in in the slide basically we</font>

421
00:19:33,280 --> 00:19:39,940
sent we started with 100 milliseconds

422
00:19:36,610 --> 00:19:43,090
which is<font color="#E5E5E5"> I have</font><font color="#CCCCCC"> a list here is 30</font>

423
00:19:39,940 --> 00:19:45,700
<font color="#E5E5E5">characters or 500</font><font color="#CCCCCC"> characters and we</font>

424
00:19:43,090 --> 00:19:48,520
increase this<font color="#E5E5E5"> size sequentially we</font>

425
00:19:45,700 --> 00:19:51,400
<font color="#E5E5E5">always interacted only with one instance</font>

426
00:19:48,520 --> 00:19:53,020
of<font color="#CCCCCC"> nodejs</font><font color="#E5E5E5"> at a time right</font><font color="#CCCCCC"> with those</font>

427
00:19:51,400 --> 00:19:54,940
measurements<font color="#CCCCCC"> taken on like the most</font>

428
00:19:53,020 --> 00:19:56,650
<font color="#E5E5E5">pathetic virtual machine you could find</font>

429
00:19:54,940 --> 00:19:58,960
so that<font color="#CCCCCC"> you were very confident that</font>

430
00:19:56,650 --> 00:20:01,870
<font color="#E5E5E5">they wouldn't be an</font><font color="#CCCCCC"> underestimate of the</font>

431
00:19:58,960 --> 00:20:03,820
impact on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> server sorry can you a bit</font>

432
00:20:01,870 --> 00:20:05,860
<font color="#E5E5E5">so were you measuring this on a server</font>

433
00:20:03,820 --> 00:20:09,159
class machine or a desktop class machine

434
00:20:05,860 --> 00:20:10,719
or AWS micro instance<font color="#CCCCCC"> prompt</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> the</font>

435
00:20:09,160 --> 00:20:12,460
<font color="#E5E5E5">client</font><font color="#CCCCCC"> perspective you</font><font color="#E5E5E5"> mean yeah you</font>

436
00:20:10,720 --> 00:20:14,260
were<font color="#E5E5E5"> measuring</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> you're crafting a</font>

437
00:20:12,460 --> 00:20:17,560
payload<font color="#CCCCCC"> that'll cause a certain time out</font>

438
00:20:14,260 --> 00:20:20,980
<font color="#E5E5E5">yeah I</font><font color="#CCCCCC"> think no</font><font color="#E5E5E5"> no we we measured this</font>

439
00:20:17,560 --> 00:20:23,889
on on this<font color="#E5E5E5"> laptop actually yeah so on a</font>

440
00:20:20,980 --> 00:20:26,470
production laptop<font color="#E5E5E5"> okay do you know how</font>

441
00:20:23,890 --> 00:20:28,420
<font color="#CCCCCC">it compares on a micro instance are</font>

442
00:20:26,470 --> 00:20:31,380
similar<font color="#CCCCCC"> no anything</font>

443
00:20:28,420 --> 00:20:31,380
<font color="#E5E5E5">okay thanks</font>

444
00:20:38,889 --> 00:20:44,059
<font color="#CCCCCC">alright one</font><font color="#E5E5E5"> thing I didn't quite</font><font color="#CCCCCC"> catch</font>

445
00:20:41,480 --> 00:20:45,919
was how did you identify<font color="#CCCCCC"> the Rideau</font>

446
00:20:44,059 --> 00:20:48,668
spawner abilities in the first place was

447
00:20:45,919 --> 00:20:51,139
that manual or were you<font color="#E5E5E5"> using any tools</font>

448
00:20:48,669 --> 00:20:53,059
<font color="#E5E5E5">yeah so that was mostly manual we</font>

449
00:20:51,139 --> 00:20:55,580
<font color="#E5E5E5">extracted a lot of regular expressions</font>

450
00:20:53,059 --> 00:20:57,559
<font color="#CCCCCC">in database and we we</font><font color="#E5E5E5"> manually search</font>

451
00:20:55,580 --> 00:20:59,840
for known patterns<font color="#E5E5E5"> and with lots of</font>

452
00:20:57,559 --> 00:21:02,619
trial and error we rewrote this exploit

453
00:20:59,840 --> 00:21:02,619
<font color="#CCCCCC">thanks</font>

454
00:21:09,559 --> 00:21:14,090
any more questions

455
00:21:11,220 --> 00:21:14,930
<font color="#CCCCCC">shot looks like a</font><font color="#E5E5E5"> speaker</font>

456
00:21:14,090 --> 00:21:15,500
[Applause]

457
00:21:14,930 --> 00:21:18,609
[Music]

458
00:21:15,500 --> 00:21:18,609
[Applause]

