1
00:00:11,460 --> 00:00:16,320
good afternoon my name<font color="#E5E5E5"> is Jamie Davis</font>

2
00:00:13,590 --> 00:00:17,850
<font color="#E5E5E5">I'm from Virginia Tech</font><font color="#CCCCCC"> and today I'll be</font>

3
00:00:16,320 --> 00:00:20,190
presenting work I did with Eric

4
00:00:17,850 --> 00:00:23,160
Williamson and my<font color="#CCCCCC"> advisor dong-hyun</font><font color="#E5E5E5"> Lee</font>

5
00:00:20,190 --> 00:00:26,369
titled<font color="#E5E5E5"> a sense of time for JavaScript</font>

6
00:00:23,160 --> 00:00:29,940
<font color="#E5E5E5">and no DJ s first class time outs as a</font>

7
00:00:26,369 --> 00:00:32,189
cure for<font color="#CCCCCC"> eventhandler</font><font color="#E5E5E5"> poisoning in this</font>

8
00:00:29,940 --> 00:00:34,890
work we made three<font color="#CCCCCC"> contributions first</font>

9
00:00:32,189 --> 00:00:36,480
we<font color="#CCCCCC"> define and analyze a denial of</font>

10
00:00:34,890 --> 00:00:38,910
<font color="#E5E5E5">service</font><font color="#CCCCCC"> attack against</font><font color="#E5E5E5"> event-driven</font>

11
00:00:36,480 --> 00:00:43,078
servers<font color="#E5E5E5"> which we call event handler</font>

12
00:00:38,910 --> 00:00:45,089
poisoning second we propose<font color="#CCCCCC"> means by</font>

13
00:00:43,079 --> 00:00:47,070
which<font color="#CCCCCC"> to detect and recover from these</font>

14
00:00:45,090 --> 00:00:49,500
<font color="#CCCCCC">attacks we have</font><font color="#E5E5E5"> both a concept and a</font>

15
00:00:47,070 --> 00:00:52,980
working<font color="#E5E5E5"> prototype we call the concept</font>

16
00:00:49,500 --> 00:00:55,170
<font color="#CCCCCC">first-class</font><font color="#E5E5E5"> timeouts</font><font color="#CCCCCC"> third</font><font color="#E5E5E5"> we got</font>

17
00:00:52,980 --> 00:00:56,730
involved with the<font color="#E5E5E5"> node.js community we</font>

18
00:00:55,170 --> 00:00:58,800
wrote a guide which you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> find on</font>

19
00:00:56,730 --> 00:01:01,379
node.js org<font color="#E5E5E5"> and we made some</font>

20
00:00:58,800 --> 00:01:04,229
documentation<font color="#CCCCCC"> changes and implementation</font>

21
00:01:01,380 --> 00:01:07,259
changes<font color="#E5E5E5"> to</font><font color="#CCCCCC"> cor</font><font color="#E5E5E5"> api's in nodejs to make</font>

22
00:01:04,229 --> 00:01:09,679
it a bit safer in case you don't<font color="#E5E5E5"> know</font>

23
00:01:07,259 --> 00:01:12,869
<font color="#CCCCCC">although since this is the web defenses</font>

24
00:01:09,680 --> 00:01:15,299
portion I hope you do know but no js' is

25
00:01:12,869 --> 00:01:18,000
a JavaScript framework<font color="#E5E5E5"> for web services</font>

26
00:01:15,299 --> 00:01:20,820
<font color="#CCCCCC">it's increasingly popular so it's got</font>

27
00:01:18,000 --> 00:01:23,369
<font color="#CCCCCC">about 7 million developers</font><font color="#E5E5E5"> it's module</font>

28
00:01:20,820 --> 00:01:25,919
ecosystem which<font color="#E5E5E5"> is called NPM has over</font>

29
00:01:23,369 --> 00:01:27,330
seven hundred<font color="#CCCCCC"> and sixty thousand modules</font>

30
00:01:25,920 --> 00:01:31,020
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> a few hundred thousand more than</font>

31
00:01:27,330 --> 00:01:33,210
<font color="#E5E5E5">the next runner up</font><font color="#CCCCCC"> and in July those</font>

32
00:01:31,020 --> 00:01:35,399
modules were downloaded for<font color="#CCCCCC"> a combined</font>

33
00:01:33,210 --> 00:01:38,030
<font color="#CCCCCC">twenty four billion</font><font color="#E5E5E5"> times each of</font><font color="#CCCCCC"> those</font>

34
00:01:35,400 --> 00:01:41,189
numbers<font color="#CCCCCC"> is growing hugely</font><font color="#E5E5E5"> year-to-year</font>

35
00:01:38,030 --> 00:01:44,100
<font color="#E5E5E5">no js' is</font><font color="#CCCCCC"> widely used</font><font color="#E5E5E5"> in industry</font><font color="#CCCCCC"> at</font>

36
00:01:41,189 --> 00:01:47,548
places including<font color="#E5E5E5"> IBM Netflix Microsoft</font>

37
00:01:44,100 --> 00:01:50,820
<font color="#E5E5E5">PayPal Walmart and it has</font><font color="#CCCCCC"> core support</font>

38
00:01:47,549 --> 00:01:52,350
with AWS is<font color="#CCCCCC"> lambda offering so nodejs</font><font color="#E5E5E5"> is</font>

39
00:01:50,820 --> 00:01:55,529
increasingly popular<font color="#CCCCCC"> and it's the</font><font color="#E5E5E5"> thing</font>

40
00:01:52,350 --> 00:01:57,240
that<font color="#CCCCCC"> we should</font><font color="#E5E5E5"> care about let me</font>

41
00:01:55,530 --> 00:01:59,700
introduce a<font color="#E5E5E5"> little background on web</font>

42
00:01:57,240 --> 00:02:01,380
server architectures<font color="#E5E5E5"> you're probably</font>

43
00:01:59,700 --> 00:02:04,920
familiar<font color="#E5E5E5"> with the one thread per client</font>

44
00:02:01,380 --> 00:02:07,350
<font color="#E5E5E5">architecture</font><font color="#CCCCCC"> or ot PCA here we have a</font>

45
00:02:04,920 --> 00:02:09,209
dispatcher and a giant thread pool maybe

46
00:02:07,350 --> 00:02:11,070
a couple<font color="#CCCCCC"> hundred or a couple thousand</font>

47
00:02:09,209 --> 00:02:13,049
threads in it<font color="#E5E5E5"> and when a request comes</font>

48
00:02:11,070 --> 00:02:14,900
in from a client the dispatcher<font color="#E5E5E5"> the</font>

49
00:02:13,049 --> 00:02:18,840
<font color="#CCCCCC">signs that request to</font><font color="#E5E5E5"> one of the threads</font>

50
00:02:14,900 --> 00:02:20,400
<font color="#CCCCCC">new client new thread because this is</font>

51
00:02:18,840 --> 00:02:22,680
<font color="#CCCCCC">multi-threaded the computation of</font>

52
00:02:20,400 --> 00:02:22,900
results will proceed concurrently<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it</font>

53
00:02:22,680 --> 00:02:25,810
<font color="#CCCCCC">will</font>

54
00:02:22,900 --> 00:02:27,790
returned<font color="#E5E5E5"> so on the OTP</font><font color="#CCCCCC"> CA every client</font>

55
00:02:25,810 --> 00:02:30,400
gets its own worker thread<font color="#CCCCCC"> you get</font>

56
00:02:27,790 --> 00:02:32,140
scalability via multi-threading<font color="#CCCCCC"> and the</font>

57
00:02:30,400 --> 00:02:35,890
classic<font color="#E5E5E5"> example of</font><font color="#CCCCCC"> this architecture is</font>

58
00:02:32,140 --> 00:02:37,328
of course<font color="#CCCCCC"> apache HTTP server</font><font color="#E5E5E5"> let's</font>

59
00:02:35,890 --> 00:02:40,839
contrast<font color="#E5E5E5"> this with the event-driven</font>

60
00:02:37,329 --> 00:02:42,760
architecture or EDA as used<font color="#E5E5E5"> on the</font>

61
00:02:40,840 --> 00:02:44,290
<font color="#E5E5E5">server side</font><font color="#CCCCCC"> in the event</font><font color="#E5E5E5"> of an</font>

62
00:02:42,760 --> 00:02:46,298
architecture you<font color="#CCCCCC"> have a single threaded</font>

63
00:02:44,290 --> 00:02:48,730
event loop and you have a worker pool

64
00:02:46,299 --> 00:02:50,920
<font color="#E5E5E5">but unlike the OTP</font><font color="#CCCCCC"> see a worker pool</font>

65
00:02:48,730 --> 00:02:53,409
which had thousands of<font color="#CCCCCC"> threads</font><font color="#E5E5E5"> the EDA</font>

66
00:02:50,920 --> 00:02:56,349
worker pool typically has<font color="#CCCCCC"> K</font><font color="#E5E5E5"> for a small</font>

67
00:02:53,409 --> 00:02:59,379
value<font color="#CCCCCC"> of</font><font color="#E5E5E5"> K the default</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> nodejs is</font><font color="#CCCCCC"> for</font>

68
00:02:56,349 --> 00:03:01,690
no<font color="#E5E5E5"> GS has a hard-coded limit of 128 so</font>

69
00:02:59,379 --> 00:03:04,388
this is a pretty<font color="#E5E5E5"> small worker pool and</font>

70
00:03:01,690 --> 00:03:05,950
each<font color="#E5E5E5"> of these event</font><font color="#CCCCCC"> handlers</font><font color="#E5E5E5"> the event</font>

71
00:03:04,389 --> 00:03:09,040
loop and the workers we call event

72
00:03:05,950 --> 00:03:11,828
handlers<font color="#CCCCCC"> accept new stuff to do from</font>

73
00:03:09,040 --> 00:03:14,349
queues<font color="#CCCCCC"> so if a</font><font color="#E5E5E5"> request comes in it ends</font>

74
00:03:11,829 --> 00:03:16,599
<font color="#E5E5E5">up on a queue it goes to the event loop</font>

75
00:03:14,349 --> 00:03:18,129
to be<font color="#E5E5E5"> handled and</font><font color="#CCCCCC"> the application</font>

76
00:03:16,599 --> 00:03:21,670
developer defines what are called

77
00:03:18,129 --> 00:03:23,739
callbacks<font color="#CCCCCC"> to</font><font color="#E5E5E5"> execute code to</font><font color="#CCCCCC"> execute in</font>

78
00:03:21,670 --> 00:03:25,409
response to these events<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this</font>

79
00:03:23,739 --> 00:03:27,489
callback it looks like the developer

80
00:03:25,409 --> 00:03:30,129
offloaded something to the worker pool

81
00:03:27,489 --> 00:03:31,959
<font color="#CCCCCC">so perhaps</font><font color="#E5E5E5"> this is reading a file and</font>

82
00:03:30,129 --> 00:03:34,540
<font color="#E5E5E5">that goes off to one of the threads in</font>

83
00:03:31,959 --> 00:03:36,370
the worker pull the workers in the

84
00:03:34,540 --> 00:03:38,078
meantime<font color="#CCCCCC"> a new request</font><font color="#E5E5E5"> comes in goes on</font>

85
00:03:36,370 --> 00:03:39,699
the event queue the event loop<font color="#CCCCCC"> isn't</font>

86
00:03:38,079 --> 00:03:42,040
doing anything<font color="#E5E5E5"> right now</font><font color="#CCCCCC"> so another</font>

87
00:03:39,699 --> 00:03:43,799
<font color="#E5E5E5">callback</font><font color="#CCCCCC"> gets executed maybe this one's</font>

88
00:03:42,040 --> 00:03:47,108
cheap so we<font color="#E5E5E5"> get a response right away</font>

89
00:03:43,799 --> 00:03:49,419
<font color="#CCCCCC">eventually the worker</font><font color="#E5E5E5"> pool finishes so</font>

90
00:03:47,109 --> 00:03:51,549
it puts a done event in the done queue

91
00:03:49,419 --> 00:03:54,310
the event loop<font color="#E5E5E5"> picks that up and execute</font>

92
00:03:51,549 --> 00:03:57,489
the final<font color="#E5E5E5"> callback for this request so</font>

93
00:03:54,310 --> 00:03:58,810
<font color="#E5E5E5">we finally get a response</font><font color="#CCCCCC"> so in the</font>

94
00:03:57,489 --> 00:04:01,209
<font color="#E5E5E5">event of an architecture we are</font>

95
00:03:58,810 --> 00:04:03,220
multiplexing many clients<font color="#CCCCCC"> onto a small</font>

96
00:04:01,209 --> 00:04:05,139
number of<font color="#E5E5E5"> threads typically for</font>

97
00:04:03,220 --> 00:04:08,560
performance reasons<font color="#CCCCCC"> once you do this you</font>

98
00:04:05,139 --> 00:04:11,769
pay less per client<font color="#E5E5E5"> overhead in terms of</font>

99
00:04:08,560 --> 00:04:13,449
scheduling costs and memory costs in the

100
00:04:11,769 --> 00:04:16,000
EDA you have to implement cooperative

101
00:04:13,449 --> 00:04:17,859
multitasking<font color="#E5E5E5"> because you have a single</font>

102
00:04:16,000 --> 00:04:19,930
threaded event loop no client should be

103
00:04:17,858 --> 00:04:21,608
<font color="#E5E5E5">taking too long at any given time so the</font>

104
00:04:19,930 --> 00:04:23,680
developers have to partition the

105
00:04:21,608 --> 00:04:26,109
generation of responses and they have to

106
00:04:23,680 --> 00:04:28,630
offload work to the worker pool<font color="#E5E5E5"> as I</font>

107
00:04:26,110 --> 00:04:30,490
mentioned<font color="#E5E5E5"> before nodejs is the most</font>

108
00:04:28,630 --> 00:04:33,700
prevalent<font color="#E5E5E5"> example of this</font><font color="#CCCCCC"> architecture</font>

109
00:04:30,490 --> 00:04:35,500
today<font color="#E5E5E5"> the server architecture dictates</font>

110
00:04:33,700 --> 00:04:36,159
the programming style that developers

111
00:04:35,500 --> 00:04:38,739
<font color="#CCCCCC">have to</font><font color="#E5E5E5"> follow</font>

112
00:04:36,159 --> 00:04:40,300
and the OTP<font color="#CCCCCC"> CA</font><font color="#E5E5E5"> you rely on the</font>

113
00:04:38,739 --> 00:04:41,739
pre-emptive<font color="#E5E5E5"> multitasking by the</font>

114
00:04:40,300 --> 00:04:43,089
operating<font color="#E5E5E5"> system and you write</font>

115
00:04:41,739 --> 00:04:46,869
synchronous code that looks<font color="#E5E5E5"> pretty</font>

116
00:04:43,089 --> 00:04:48,819
normal in the<font color="#CCCCCC"> eda you have to implement</font>

117
00:04:46,869 --> 00:04:51,909
cooperative multitasking yourself

118
00:04:48,819 --> 00:04:54,009
because you have<font color="#CCCCCC"> a small number</font><font color="#E5E5E5"> of</font>

119
00:04:51,909 --> 00:04:56,319
threads<font color="#E5E5E5"> and the EDA is basically putting</font>

120
00:04:54,009 --> 00:04:57,729
the burden<font color="#E5E5E5"> on you the developer to make</font>

121
00:04:56,319 --> 00:04:59,769
sure that all the clients get a fair

122
00:04:57,729 --> 00:05:02,438
turn<font color="#E5E5E5"> so in the EDA you have to write</font>

123
00:04:59,769 --> 00:05:04,749
<font color="#CCCCCC">asynchronous</font><font color="#E5E5E5"> code instead so if I'm</font>

124
00:05:02,439 --> 00:05:06,339
writing<font color="#E5E5E5"> a file server in the one thread</font>

125
00:05:04,749 --> 00:05:08,949
per<font color="#CCCCCC"> client</font><font color="#E5E5E5"> architecture it looks pretty</font>

126
00:05:06,339 --> 00:05:10,779
<font color="#CCCCCC">normal I read the file I compress its</font>

127
00:05:08,949 --> 00:05:13,509
contents<font color="#E5E5E5"> I maybe encrypt the result in</font>

128
00:05:10,779 --> 00:05:15,729
return it<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the EDA</font><font color="#CCCCCC"> I have to write</font>

129
00:05:13,509 --> 00:05:17,800
the<font color="#E5E5E5"> asynchronous version of this</font><font color="#CCCCCC"> that's</font>

130
00:05:15,729 --> 00:05:20,308
gotten a<font color="#CCCCCC"> lot easier in recent years so</font>

131
00:05:17,800 --> 00:05:22,389
async and<font color="#E5E5E5"> await are now</font><font color="#CCCCCC"> core</font>

132
00:05:20,309 --> 00:05:24,610
asynchronous primitives so you can say

133
00:05:22,389 --> 00:05:26,830
<font color="#E5E5E5">oh wait read file and</font><font color="#CCCCCC"> this will return a</font>

134
00:05:24,610 --> 00:05:29,949
promise<font color="#E5E5E5"> and yield control of the event</font>

135
00:05:26,830 --> 00:05:31,568
loop to some other client<font color="#E5E5E5"> once the read</font>

136
00:05:29,949 --> 00:05:34,029
file completes off of the worker pool

137
00:05:31,569 --> 00:05:35,679
you<font color="#CCCCCC"> can then zip you'll</font><font color="#E5E5E5"> wait that you</font>

138
00:05:34,029 --> 00:05:37,749
await an encryption<font color="#E5E5E5"> and finally you can</font>

139
00:05:35,679 --> 00:05:41,049
return everything<font color="#E5E5E5"> and at each</font><font color="#CCCCCC"> of these</font>

140
00:05:37,749 --> 00:05:44,619
await points<font color="#E5E5E5"> the developer is saying</font>

141
00:05:41,050 --> 00:05:46,119
yield to some other pending client so

142
00:05:44,619 --> 00:05:48,519
this<font color="#E5E5E5"> brings us to event handler</font>

143
00:05:46,119 --> 00:05:50,559
poisoning attacks<font color="#E5E5E5"> which occurred because</font>

144
00:05:48,519 --> 00:05:52,479
the event-driven architecture<font color="#E5E5E5"> gets</font>

145
00:05:50,559 --> 00:05:54,129
efficiency at<font color="#E5E5E5"> the cost of isolating</font>

146
00:05:52,479 --> 00:05:58,449
clients<font color="#E5E5E5"> on two different execution</font>

147
00:05:54,129 --> 00:06:00,519
contexts in the OTP CA we dedicate

148
00:05:58,449 --> 00:06:02,139
threads to every client<font color="#CCCCCC"> we have</font>

149
00:06:00,519 --> 00:06:03,729
thousands of<font color="#CCCCCC"> threads</font><font color="#E5E5E5"> in the OS as</font>

150
00:06:02,139 --> 00:06:05,829
<font color="#CCCCCC">pre-emptive multitasking takes care of</font>

151
00:06:03,729 --> 00:06:08,349
<font color="#CCCCCC">us in the</font><font color="#E5E5E5"> EDA all the clients are</font>

152
00:06:05,829 --> 00:06:10,059
sharing tens of threads not thousands

153
00:06:08,349 --> 00:06:13,058
and<font color="#CCCCCC"> you have to implement cooperative</font>

154
00:06:10,059 --> 00:06:15,279
multitasking<font color="#CCCCCC"> the event handlers the</font>

155
00:06:13,059 --> 00:06:17,679
event loop<font color="#E5E5E5"> and the workers</font><font color="#CCCCCC"> in the worker</font>

156
00:06:15,279 --> 00:06:20,589
pool are thus a pretty<font color="#E5E5E5"> limited resource</font>

157
00:06:17,679 --> 00:06:22,268
in EDA based web servers and if you can

158
00:06:20,589 --> 00:06:25,479
exhaust<font color="#E5E5E5"> that resource you'll get</font><font color="#CCCCCC"> a</font>

159
00:06:22,269 --> 00:06:27,189
denial<font color="#E5E5E5"> of</font><font color="#CCCCCC"> service attack</font><font color="#E5E5E5"> so let me show</font>

160
00:06:25,479 --> 00:06:28,899
<font color="#E5E5E5">you what an event handler poisoning</font>

161
00:06:27,189 --> 00:06:32,019
attack on the event<font color="#E5E5E5"> loop would look like</font>

162
00:06:28,899 --> 00:06:33,999
<font color="#E5E5E5">say I am a malicious client and I have</font>

163
00:06:32,019 --> 00:06:35,439
composed a request<font color="#E5E5E5"> that</font><font color="#CCCCCC"> will cause one</font>

164
00:06:33,999 --> 00:06:38,919
of<font color="#E5E5E5"> your callbacks did it take a long</font>

165
00:06:35,439 --> 00:06:41,289
<font color="#CCCCCC">time</font><font color="#E5E5E5"> so here comes the request it hits</font>

166
00:06:38,919 --> 00:06:43,179
the event loop<font color="#E5E5E5"> and we hit the vulnerable</font>

167
00:06:41,289 --> 00:06:45,009
callback which takes<font color="#CCCCCC"> longer and longer</font>

168
00:06:43,179 --> 00:06:48,760
and<font color="#E5E5E5"> longer and it just takes a</font><font color="#CCCCCC"> really</font>

169
00:06:45,009 --> 00:06:51,220
long<font color="#E5E5E5"> time</font><font color="#CCCCCC"> if another client comes in</font>

170
00:06:48,760 --> 00:06:52,719
<font color="#CCCCCC">it will cause an event to occur</font><font color="#E5E5E5"> but the</font>

171
00:06:51,220 --> 00:06:54,490
event loop will never pick<font color="#E5E5E5"> up on that</font>

172
00:06:52,720 --> 00:06:57,310
<font color="#CCCCCC">event</font><font color="#E5E5E5"> because it's busy handling this</font>

173
00:06:54,490 --> 00:06:59,200
maliciously long<font color="#CCCCCC"> request</font><font color="#E5E5E5"> as a result the</font>

174
00:06:57,310 --> 00:07:00,580
event loop is poisoned<font color="#E5E5E5"> and the</font>

175
00:06:59,200 --> 00:07:04,360
throughput<font color="#E5E5E5"> of the server will drop to</font>

176
00:07:00,580 --> 00:07:06,070
zero<font color="#CCCCCC"> denial of service you can conduct</font><font color="#E5E5E5"> a</font>

177
00:07:04,360 --> 00:07:07,840
similar<font color="#E5E5E5"> attack against the worker pool</font>

178
00:07:06,070 --> 00:07:10,750
it really depends on<font color="#E5E5E5"> where you can find</font>

179
00:07:07,840 --> 00:07:12,700
<font color="#CCCCCC">the expensive operation being performed</font>

180
00:07:10,750 --> 00:07:15,010
<font color="#CCCCCC">if you're doing it</font><font color="#E5E5E5"> on the worker pool</font>

181
00:07:12,700 --> 00:07:18,010
then you need to<font color="#CCCCCC"> submit some proportion</font>

182
00:07:15,010 --> 00:07:21,280
of<font color="#E5E5E5"> K however many is</font><font color="#CCCCCC"> enough to cause</font><font color="#E5E5E5"> the</font>

183
00:07:18,010 --> 00:07:24,880
amount<font color="#CCCCCC"> of disruption you want so here is</font>

184
00:07:21,280 --> 00:07:27,039
a vulnerable<font color="#CCCCCC"> event-driven server it</font>

185
00:07:24,880 --> 00:07:29,050
serves files<font color="#E5E5E5"> so first we do input</font>

186
00:07:27,040 --> 00:07:30,760
sanitization and we say<font color="#E5E5E5"> does the this</font>

187
00:07:29,050 --> 00:07:32,770
the name they're requesting looks sort

188
00:07:30,760 --> 00:07:34,510
of like a<font color="#CCCCCC"> UNIX path it's got a leading</font>

189
00:07:32,770 --> 00:07:36,729
slash and some other stuff and<font color="#E5E5E5"> then we</font>

190
00:07:34,510 --> 00:07:40,480
put a<font color="#E5E5E5"> whole</font><font color="#CCCCCC"> +</font><font color="#E5E5E5"> around that to say you</font>

191
00:07:36,730 --> 00:07:42,280
know slash a slash<font color="#E5E5E5"> B slash see if the</font>

192
00:07:40,480 --> 00:07:43,930
sanitization succeeds then we will read

193
00:07:42,280 --> 00:07:46,119
<font color="#E5E5E5">the file and return the</font><font color="#CCCCCC"> result to the</font>

194
00:07:43,930 --> 00:07:48,610
user<font color="#E5E5E5"> so I said there were 2</font><font color="#CCCCCC"> e HP</font>

195
00:07:46,120 --> 00:07:50,530
vulnerabilities here the first is that

196
00:07:48,610 --> 00:07:54,250
this regular expression<font color="#CCCCCC"> is super linear</font>

197
00:07:50,530 --> 00:07:56,289
<font color="#E5E5E5">in fact it's exponential on malicious</font>

198
00:07:54,250 --> 00:07:58,390
input so this will lead to<font color="#CCCCCC"> a</font>

199
00:07:56,290 --> 00:08:01,630
vulnerability called regular expression

200
00:07:58,390 --> 00:08:03,700
denial of service or re<font color="#E5E5E5"> do s if you're</font>

201
00:08:01,630 --> 00:08:05,620
<font color="#E5E5E5">curious about that after my talk is</font>

202
00:08:03,700 --> 00:08:08,469
another talk by<font color="#CCCCCC"> Kris</font><font color="#E5E5E5"> who will tell you</font>

203
00:08:05,620 --> 00:08:10,950
all<font color="#E5E5E5"> about how these happen in the wild</font>

204
00:08:08,470 --> 00:08:13,690
the<font color="#CCCCCC"> second</font><font color="#E5E5E5"> PHP vulnerability here is</font>

205
00:08:10,950 --> 00:08:16,120
that the input sanitization is on the

206
00:08:13,690 --> 00:08:17,830
structure of<font color="#CCCCCC"> the file being requested</font>

207
00:08:16,120 --> 00:08:21,010
<font color="#E5E5E5">but it's not taking into consideration</font>

208
00:08:17,830 --> 00:08:22,599
<font color="#E5E5E5">which file is being requested</font><font color="#CCCCCC"> so if an</font>

209
00:08:21,010 --> 00:08:26,080
attacker can<font color="#E5E5E5"> identify a particularly</font>

210
00:08:22,600 --> 00:08:28,060
<font color="#E5E5E5">slow file or a particularly large file</font>

211
00:08:26,080 --> 00:08:29,710
<font color="#E5E5E5">then he can cause the worker that</font><font color="#CCCCCC"> gets</font>

212
00:08:28,060 --> 00:08:32,200
assigned<font color="#E5E5E5"> to</font><font color="#CCCCCC"> this I</font><font color="#E5E5E5"> / quest to take a</font>

213
00:08:29,710 --> 00:08:36,429
very<font color="#E5E5E5"> long</font><font color="#CCCCCC"> time an easy example is if you</font>

214
00:08:32,200 --> 00:08:38,680
read from dev<font color="#E5E5E5"> random this uses good a</font>

215
00:08:36,429 --> 00:08:40,989
good random<font color="#E5E5E5"> number generator ie it's</font>

216
00:08:38,679 --> 00:08:42,459
pulling<font color="#CCCCCC"> from your</font><font color="#E5E5E5"> hardware and so if you</font>

217
00:08:40,990 --> 00:08:46,510
cat that file right<font color="#E5E5E5"> now it'll take</font><font color="#CCCCCC"> a</font>

218
00:08:42,460 --> 00:08:48,880
<font color="#CCCCCC">really long time</font><font color="#E5E5E5"> so we implemented</font><font color="#CCCCCC"> the</font>

219
00:08:46,510 --> 00:08:50,620
server and nodejs it looks pretty much

220
00:08:48,880 --> 00:08:53,170
<font color="#CCCCCC">like that code but with some JavaScript</font>

221
00:08:50,620 --> 00:08:55,480
in it<font color="#E5E5E5"> and we conducted an</font><font color="#CCCCCC"> re</font><font color="#E5E5E5"> do s</font><font color="#CCCCCC"> base</font>

222
00:08:53,170 --> 00:08:57,490
<font color="#CCCCCC">th P attack</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> behavior is pretty much</font>

223
00:08:55,480 --> 00:08:59,440
<font color="#E5E5E5">like you'd expect after some initial</font>

224
00:08:57,490 --> 00:09:00,570
startup time the server reaches a<font color="#E5E5E5"> steady</font>

225
00:08:59,440 --> 00:09:02,760
state<font color="#E5E5E5"> around</font>

226
00:09:00,570 --> 00:09:05,550
<font color="#CCCCCC">- two seconds</font><font color="#E5E5E5"> at which</font><font color="#CCCCCC"> point we inject</font>

227
00:09:02,760 --> 00:09:08,730
malicious<font color="#E5E5E5"> input in the orange line which</font>

228
00:09:05,550 --> 00:09:10,469
is baseline vanilla<font color="#E5E5E5"> nodejs the server's</font>

229
00:09:08,730 --> 00:09:13,560
throughput then plummets to zero<font color="#E5E5E5"> because</font>

230
00:09:10,470 --> 00:09:16,680
the event loop is poisoned happily<font color="#E5E5E5"> in</font>

231
00:09:13,560 --> 00:09:18,630
our prototype node cure<font color="#E5E5E5"> we deliver a</font>

232
00:09:16,680 --> 00:09:20,430
<font color="#E5E5E5">timeout exception shortly after</font>

233
00:09:18,630 --> 00:09:22,200
receiving<font color="#E5E5E5"> the malicious input and the</font>

234
00:09:20,430 --> 00:09:24,390
server can<font color="#E5E5E5"> successfully detect and</font>

235
00:09:22,200 --> 00:09:27,360
recover<font color="#E5E5E5"> from this attack and it returns</font>

236
00:09:24,390 --> 00:09:28,830
to<font color="#E5E5E5"> the steady state</font><font color="#CCCCCC"> through point event</font>

237
00:09:27,360 --> 00:09:30,660
handler poisoning attacks<font color="#CCCCCC"> actually</font>

238
00:09:28,830 --> 00:09:34,950
happened with surprising regularity in

239
00:09:30,660 --> 00:09:36,449
the node.js<font color="#E5E5E5"> ecosystem which I know</font>

240
00:09:34,950 --> 00:09:38,700
<font color="#E5E5E5">because we talked to a company called</font>

241
00:09:36,450 --> 00:09:41,520
<font color="#CCCCCC">snick IO</font><font color="#E5E5E5"> which maintains a large</font>

242
00:09:38,700 --> 00:09:43,770
<font color="#E5E5E5">database</font><font color="#CCCCCC"> of security vulnerabilities in</font>

243
00:09:41,520 --> 00:09:46,710
open source module ecosystems including

244
00:09:43,770 --> 00:09:48,329
NPM<font color="#E5E5E5"> so they shared all eleven hundred</font>

245
00:09:46,710 --> 00:09:50,400
<font color="#E5E5E5">and thirty</font><font color="#CCCCCC"> two of their vulnerabilities</font>

246
00:09:48,330 --> 00:09:52,620
as of a<font color="#CCCCCC"> few months</font><font color="#E5E5E5"> ago with us and we</font>

247
00:09:50,400 --> 00:09:54,900
automatically categorize them by whether

248
00:09:52,620 --> 00:09:58,500
they could<font color="#E5E5E5"> be used to launch</font><font color="#CCCCCC"> an HP</font>

249
00:09:54,900 --> 00:10:01,290
attack<font color="#CCCCCC"> so about</font><font color="#E5E5E5"> 35%</font><font color="#CCCCCC"> of them could be</font>

250
00:09:58,500 --> 00:10:02,370
including<font color="#E5E5E5"> 266 that let you read</font>

251
00:10:01,290 --> 00:10:04,260
arbitrary files

252
00:10:02,370 --> 00:10:07,140
<font color="#CCCCCC">that's the</font><font color="#E5E5E5"> IO</font><font color="#CCCCCC"> dose vector we talked</font>

253
00:10:04,260 --> 00:10:10,200
about<font color="#CCCCCC"> 115 of these denial-of-service</font>

254
00:10:07,140 --> 00:10:13,830
<font color="#CCCCCC">attacks are re-do</font><font color="#E5E5E5"> s so those are pretty</font>

255
00:10:10,200 --> 00:10:16,170
prevalent in this<font color="#E5E5E5"> ecosystem as well so</font>

256
00:10:13,830 --> 00:10:17,070
if<font color="#CCCCCC"> EA HP is happening a lot what should</font>

257
00:10:16,170 --> 00:10:18,750
we do<font color="#E5E5E5"> about it</font>

258
00:10:17,070 --> 00:10:20,190
I'll give you two<font color="#E5E5E5"> things we shouldn't do</font>

259
00:10:18,750 --> 00:10:22,410
about it and then something that<font color="#E5E5E5"> we</font>

260
00:10:20,190 --> 00:10:24,540
think<font color="#E5E5E5"> we</font><font color="#CCCCCC"> actually should</font><font color="#E5E5E5"> do so here's</font>

261
00:10:22,410 --> 00:10:26,790
our first idea<font color="#E5E5E5"> why don't we restart the</font>

262
00:10:24,540 --> 00:10:29,040
<font color="#E5E5E5">server we'll put a heartbeat on all of</font>

263
00:10:26,790 --> 00:10:31,530
our<font color="#E5E5E5"> event handlers and if any of them</font>

264
00:10:29,040 --> 00:10:33,569
stops<font color="#E5E5E5"> having a heartbeat will decide the</font>

265
00:10:31,530 --> 00:10:35,550
<font color="#E5E5E5">server's dead and restart it</font><font color="#CCCCCC"> there's</font>

266
00:10:33,570 --> 00:10:37,380
really<font color="#E5E5E5"> two problems here</font><font color="#CCCCCC"> the first is</font>

267
00:10:35,550 --> 00:10:39,089
that when you restart<font color="#CCCCCC"> the server</font><font color="#E5E5E5"> every</font>

268
00:10:37,380 --> 00:10:40,920
connected client has its<font color="#E5E5E5"> connection</font>

269
00:10:39,090 --> 00:10:42,500
severed<font color="#E5E5E5"> thus achieving the denial of</font>

270
00:10:40,920 --> 00:10:44,520
service the attacker wanted all along

271
00:10:42,500 --> 00:10:46,080
<font color="#E5E5E5">the second problem is that there's</font>

272
00:10:44,520 --> 00:10:48,150
nothing<font color="#CCCCCC"> preventing the attacker</font><font color="#E5E5E5"> from</font>

273
00:10:46,080 --> 00:10:49,980
setting up<font color="#E5E5E5"> a cron job to submit his</font>

274
00:10:48,150 --> 00:10:51,270
malicious input every<font color="#E5E5E5"> 10</font><font color="#CCCCCC"> minutes so your</font>

275
00:10:49,980 --> 00:10:52,860
server is<font color="#CCCCCC"> just going</font><font color="#E5E5E5"> to keep crashing</font>

276
00:10:51,270 --> 00:10:55,770
and keep coming<font color="#CCCCCC"> back</font><font color="#E5E5E5"> this is not a</font>

277
00:10:52,860 --> 00:10:58,200
healthy server<font color="#CCCCCC"> okay here's a different</font>

278
00:10:55,770 --> 00:11:00,420
<font color="#E5E5E5">approach we can prevent event handler</font>

279
00:10:58,200 --> 00:11:02,310
poisoning attacks<font color="#CCCCCC"> if we can partition</font>

280
00:11:00,420 --> 00:11:04,500
<font color="#E5E5E5">all of our callbacks and all of our</font>

281
00:11:02,310 --> 00:11:06,270
<font color="#E5E5E5">tasks so that they're guaranteed</font><font color="#CCCCCC"> to take</font>

282
00:11:04,500 --> 00:11:08,640
no more<font color="#E5E5E5"> than</font><font color="#CCCCCC"> some acceptable</font><font color="#E5E5E5"> amount of</font>

283
00:11:06,270 --> 00:11:10,800
time maybe we can put a constant<font color="#E5E5E5"> upper</font>

284
00:11:08,640 --> 00:11:13,110
bound on them<font color="#E5E5E5"> so instead</font><font color="#CCCCCC"> of having this</font>

285
00:11:10,800 --> 00:11:13,630
<font color="#E5E5E5">some routine which goes</font><font color="#CCCCCC"> through the</font>

286
00:11:13,110 --> 00:11:16,600
whole way

287
00:11:13,630 --> 00:11:19,180
than<font color="#E5E5E5"> as oh of n on short lists it'll be</font>

288
00:11:16,600 --> 00:11:21,160
fast and<font color="#E5E5E5"> on perhaps maliciously long</font>

289
00:11:19,180 --> 00:11:22,959
lists it'll take a long time to compete

290
00:11:21,160 --> 00:11:25,449
this<font color="#E5E5E5"> some we could write this</font>

291
00:11:22,959 --> 00:11:26,920
<font color="#E5E5E5">asynchronous routine</font><font color="#CCCCCC"> which will add 10</font>

292
00:11:25,449 --> 00:11:29,680
numbers at a time<font color="#CCCCCC"> and</font><font color="#E5E5E5"> yields</font>

293
00:11:26,920 --> 00:11:32,349
cooperatively sharing<font color="#E5E5E5"> the processor time</font>

294
00:11:29,680 --> 00:11:34,329
<font color="#E5E5E5">and once it finally finishes it'll</font>

295
00:11:32,350 --> 00:11:35,829
<font color="#E5E5E5">return the result to the clan on a</font>

296
00:11:34,329 --> 00:11:38,469
<font color="#CCCCCC">shortlist this will behave about the</font>

297
00:11:35,829 --> 00:11:40,269
same but on a long list<font color="#CCCCCC"> we'll do a</font>

298
00:11:38,470 --> 00:11:41,889
<font color="#E5E5E5">little bit of work and</font><font color="#CCCCCC"> then yield and</font>

299
00:11:40,269 --> 00:11:44,319
then<font color="#E5E5E5"> we'll do a little</font><font color="#CCCCCC"> bit more work and</font>

300
00:11:41,889 --> 00:11:46,000
then<font color="#E5E5E5"> yield and if we add up all</font><font color="#CCCCCC"> of the</font>

301
00:11:44,319 --> 00:11:47,620
little<font color="#E5E5E5"> pieces</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> work we did</font><font color="#CCCCCC"> we'll end</font>

302
00:11:46,000 --> 00:11:50,019
up<font color="#CCCCCC"> taking about</font><font color="#E5E5E5"> the same amount of time</font>

303
00:11:47,620 --> 00:11:52,060
as we did in the original<font color="#CCCCCC"> solution but</font>

304
00:11:50,019 --> 00:11:52,750
this<font color="#E5E5E5"> way we were cooperative so this is</font>

305
00:11:52,060 --> 00:11:55,089
great

306
00:11:52,750 --> 00:11:58,389
unfortunately partitioning is both

307
00:11:55,089 --> 00:11:59,860
partial and ad-hoc<font color="#E5E5E5"> so by partial I mean</font>

308
00:11:58,389 --> 00:12:01,779
that it can<font color="#E5E5E5"> only protect code that's</font>

309
00:11:59,860 --> 00:12:03,459
under the application developers control

310
00:12:01,779 --> 00:12:05,740
<font color="#E5E5E5">in other words that the application</font>

311
00:12:03,459 --> 00:12:06,849
developer is<font color="#CCCCCC"> willing to rewrite</font><font color="#E5E5E5"> that</font>

312
00:12:05,740 --> 00:12:10,180
doesn't include<font color="#E5E5E5"> all these third-party</font>

313
00:12:06,850 --> 00:12:12,490
<font color="#E5E5E5">modules and p.m. which as I</font><font color="#CCCCCC"> said has</font>

314
00:12:10,180 --> 00:12:14,589
over 700,000 modules and is one<font color="#E5E5E5"> of the</font>

315
00:12:12,490 --> 00:12:16,930
main selling points of using node so

316
00:12:14,589 --> 00:12:18,670
that's not great<font color="#E5E5E5"> it also won't protect</font>

317
00:12:16,930 --> 00:12:21,910
you against vulnerable<font color="#E5E5E5"> api's in the</font>

318
00:12:18,670 --> 00:12:24,399
node.js framework<font color="#CCCCCC"> that's too bad because</font>

319
00:12:21,910 --> 00:12:26,589
all<font color="#E5E5E5"> of those iodo s attacks are due to</font>

320
00:12:24,399 --> 00:12:28,540
vulnerable implementations of<font color="#CCCCCC"> IO and</font>

321
00:12:26,589 --> 00:12:29,949
<font color="#E5E5E5">node and it won't</font><font color="#CCCCCC"> help you from problems</font>

322
00:12:28,540 --> 00:12:32,230
in the JavaScript language you're using

323
00:12:29,949 --> 00:12:34,420
<font color="#E5E5E5">which is too bad because all of those re</font>

324
00:12:32,230 --> 00:12:36,430
do si la our abilities are due to design

325
00:12:34,420 --> 00:12:39,790
decisions by the JavaScript engine

326
00:12:36,430 --> 00:12:41,949
implementer<font color="#CCCCCC"> the second aspect</font><font color="#E5E5E5"> of</font>

327
00:12:39,790 --> 00:12:44,079
partiality is that partitioning is good

328
00:12:41,949 --> 00:12:46,630
for algorithms<font color="#CCCCCC"> but</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> really not clear</font>

329
00:12:44,079 --> 00:12:48,250
<font color="#CCCCCC">how to meaningfully partition IO sure</font>

330
00:12:46,630 --> 00:12:49,930
you can reduce the block size but

331
00:12:48,250 --> 00:12:52,089
eventually<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> ask the operating</font>

332
00:12:49,930 --> 00:12:54,008
<font color="#CCCCCC">system to do an IO task and the OS will</font>

333
00:12:52,089 --> 00:12:57,009
take however<font color="#E5E5E5"> long it wants to that's not</font>

334
00:12:54,009 --> 00:13:00,040
really under your control and<font color="#CCCCCC"> in terms</font>

335
00:12:57,009 --> 00:13:01,899
of<font color="#E5E5E5"> being ad hoc partitioning incurs a</font>

336
00:13:00,040 --> 00:13:03,490
significant<font color="#CCCCCC"> ongoing maintenance</font><font color="#E5E5E5"> burden</font>

337
00:13:01,899 --> 00:13:04,870
because every<font color="#E5E5E5"> time you change</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> code</font>

338
00:13:03,490 --> 00:13:06,069
you have<font color="#E5E5E5"> to go back and make sure that</font>

339
00:13:04,870 --> 00:13:10,750
it's meeting<font color="#E5E5E5"> whatever time and</font>

340
00:13:06,069 --> 00:13:14,079
guarantees you use<font color="#CCCCCC"> too so we</font><font color="#E5E5E5"> propose</font>

341
00:13:10,750 --> 00:13:16,540
instead<font color="#E5E5E5"> first-class timeouts</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> analogy</font>

342
00:13:14,079 --> 00:13:18,638
first we have buffer overflow attacks

343
00:13:16,540 --> 00:13:21,459
and for that<font color="#E5E5E5"> modern languages implement</font>

344
00:13:18,639 --> 00:13:24,399
<font color="#CCCCCC">out of bounds exceptions</font><font color="#E5E5E5"> cool and the</font>

345
00:13:21,459 --> 00:13:27,040
<font color="#CCCCCC">server side EDA I would argue</font><font color="#E5E5E5"> that what</font>

346
00:13:24,399 --> 00:13:28,690
we<font color="#E5E5E5"> have here are time overflow attacks</font>

347
00:13:27,040 --> 00:13:31,569
so we can deal with them with a<font color="#E5E5E5"> timeout</font>

348
00:13:28,690 --> 00:13:33,670
exception<font color="#E5E5E5"> our idea is to keep</font><font color="#CCCCCC"> the</font>

349
00:13:31,570 --> 00:13:35,800
cooperative multitasking guarantees of

350
00:13:33,670 --> 00:13:38,199
nodejs which is sort<font color="#CCCCCC"> of necessary</font><font color="#E5E5E5"> for</font>

351
00:13:35,800 --> 00:13:40,810
backwards compatibility<font color="#CCCCCC"> but to add in a</font>

352
00:13:38,200 --> 00:13:42,910
time<font color="#E5E5E5"> aware component to it</font><font color="#CCCCCC"> if we can</font>

353
00:13:40,810 --> 00:13:45,069
bound the synchronous time of every

354
00:13:42,910 --> 00:13:46,719
<font color="#CCCCCC">callback and every task</font><font color="#E5E5E5"> and deliver a</font>

355
00:13:45,070 --> 00:13:49,870
<font color="#E5E5E5">timeout exception if those bounds are</font>

356
00:13:46,720 --> 00:13:52,360
exceeded then we can soundly defeat<font color="#CCCCCC"> ehp</font>

357
00:13:49,870 --> 00:13:54,100
attacks<font color="#CCCCCC"> the refactoring is</font><font color="#E5E5E5"> not going to</font>

358
00:13:52,360 --> 00:13:55,720
be too bad it's an exception so<font color="#CCCCCC"> put a</font>

359
00:13:54,100 --> 00:13:57,460
try at the beginning of<font color="#E5E5E5"> your function</font>

360
00:13:55,720 --> 00:13:58,390
put<font color="#CCCCCC"> it except at the bottom and you're</font>

361
00:13:57,460 --> 00:14:00,610
good to<font color="#CCCCCC"> go</font>

362
00:13:58,390 --> 00:14:02,140
<font color="#E5E5E5">and it will be non-destructive by first</font>

363
00:14:00,610 --> 00:14:04,120
class<font color="#E5E5E5"> we mean that the timeouts are</font>

364
00:14:02,140 --> 00:14:06,220
being delivered to the<font color="#CCCCCC"> application to</font>

365
00:14:04,120 --> 00:14:08,440
<font color="#CCCCCC">make a</font><font color="#E5E5E5"> decision about it</font><font color="#CCCCCC"> and as a</font><font color="#E5E5E5"> result</font>

366
00:14:06,220 --> 00:14:10,150
the application can blacklist or discard

367
00:14:08,440 --> 00:14:13,920
the<font color="#E5E5E5"> request or whatever it wants</font><font color="#CCCCCC"> to do</font>

368
00:14:10,150 --> 00:14:17,140
<font color="#E5E5E5">and existing clients</font><font color="#CCCCCC"> will be</font><font color="#E5E5E5"> unharmed</font><font color="#CCCCCC"> so</font>

369
00:14:13,920 --> 00:14:19,930
<font color="#CCCCCC">we've implemented a prototype this</font><font color="#E5E5E5"> is</font>

370
00:14:17,140 --> 00:14:21,790
our desired behavior<font color="#CCCCCC"> I used to be</font><font color="#E5E5E5"> that</font>

371
00:14:19,930 --> 00:14:24,489
the event<font color="#E5E5E5"> loop would just run forever on</font>

372
00:14:21,790 --> 00:14:26,949
malicious input now we wanted<font color="#CCCCCC"> to throw</font>

373
00:14:24,490 --> 00:14:28,810
<font color="#CCCCCC">timeout exceptions similarly the worker</font>

374
00:14:26,950 --> 00:14:30,850
pool the workers would run forever<font color="#CCCCCC"> we</font>

375
00:14:28,810 --> 00:14:33,640
want them to return<font color="#CCCCCC"> time-out exceptions</font>

376
00:14:30,850 --> 00:14:36,490
to the event loop for handling<font color="#E5E5E5"> so how do</font>

377
00:14:33,640 --> 00:14:39,340
we<font color="#E5E5E5"> do this</font><font color="#CCCCCC"> a node ejs is a JavaScript</font>

378
00:14:36,490 --> 00:14:43,420
<font color="#CCCCCC">application it's strapped on to a v8</font>

379
00:14:39,340 --> 00:14:45,850
JavaScript engine<font color="#CCCCCC"> there are no</font><font color="#E5E5E5"> js'</font>

380
00:14:43,420 --> 00:14:48,430
libraries written<font color="#E5E5E5"> in</font><font color="#CCCCCC"> JavaScript and C++</font>

381
00:14:45,850 --> 00:14:50,470
and the C++ libraries go talk<font color="#CCCCCC"> to a</font>

382
00:14:48,430 --> 00:14:52,390
separate<font color="#CCCCCC"> library called libuv which</font>

383
00:14:50,470 --> 00:14:55,690
offers us the<font color="#E5E5E5"> event loop and the worker</font>

384
00:14:52,390 --> 00:14:58,150
pool<font color="#E5E5E5"> so we made first the JavaScript</font>

385
00:14:55,690 --> 00:14:59,950
engine<font color="#CCCCCC"> time aware</font><font color="#E5E5E5"> so we</font><font color="#CCCCCC"> modified v8 so</font>

386
00:14:58,150 --> 00:15:02,290
that it knows<font color="#CCCCCC"> about timeout exceptions</font>

387
00:14:59,950 --> 00:15:04,120
and<font color="#CCCCCC"> its exception hierarchy</font><font color="#E5E5E5"> and so that</font>

388
00:15:02,290 --> 00:15:07,150
it has an interrupt<font color="#CCCCCC"> handler to cause</font>

389
00:15:04,120 --> 00:15:09,220
these exceptions to be delivered<font color="#CCCCCC"> we also</font>

390
00:15:07,150 --> 00:15:11,590
made the<font color="#CCCCCC"> event</font><font color="#E5E5E5"> loop time aware so every</font>

391
00:15:09,220 --> 00:15:13,150
<font color="#E5E5E5">time you enter a user callback sort of</font>

392
00:15:11,590 --> 00:15:15,250
like leaving<font color="#E5E5E5"> the kernel and going into</font>

393
00:15:13,150 --> 00:15:17,290
user land<font color="#CCCCCC"> we tell the timeout watchdog</font>

394
00:15:15,250 --> 00:15:19,480
hey we're going off into<font color="#E5E5E5"> user land let</font>

395
00:15:17,290 --> 00:15:21,880
me know if I take too long<font color="#CCCCCC"> and if the</font>

396
00:15:19,480 --> 00:15:24,100
watchdog sees<font color="#CCCCCC"> that it takes</font><font color="#E5E5E5"> too long it</font>

397
00:15:21,880 --> 00:15:26,890
goes and<font color="#E5E5E5"> tells the JavaScript engine to</font>

398
00:15:24,100 --> 00:15:29,410
<font color="#CCCCCC">deliver a timeout exception that will be</font>

399
00:15:26,890 --> 00:15:31,510
<font color="#E5E5E5">delivered to the event loop we also have</font>

400
00:15:29,410 --> 00:15:33,550
to protect<font color="#CCCCCC"> the worker pool</font><font color="#E5E5E5"> so we made</font>

401
00:15:31,510 --> 00:15:35,890
<font color="#CCCCCC">that time aware</font><font color="#E5E5E5"> as well we added manager</font>

402
00:15:33,550 --> 00:15:37,569
threads that<font color="#CCCCCC"> we'll watch for the workers</font>

403
00:15:35,890 --> 00:15:39,670
taking<font color="#E5E5E5"> too long and if they see</font><font color="#CCCCCC"> that</font>

404
00:15:37,570 --> 00:15:40,730
they will dispose of the worker create a

405
00:15:39,670 --> 00:15:43,550
new worker thread and

406
00:15:40,730 --> 00:15:45,920
and go back to what they were<font color="#CCCCCC"> doing</font><font color="#E5E5E5"> so a</font>

407
00:15:43,550 --> 00:15:47,839
prototype is built<font color="#CCCCCC"> on node</font><font color="#E5E5E5"> version</font><font color="#CCCCCC"> 8 it</font>

408
00:15:45,920 --> 00:15:50,449
<font color="#E5E5E5">took us about</font><font color="#CCCCCC"> 4,000 lines</font><font color="#E5E5E5"> of code we had</font>

409
00:15:47,840 --> 00:15:52,940
to touch 50 files all over the place<font color="#CCCCCC"> it</font>

410
00:15:50,450 --> 00:15:55,220
is compatible<font color="#E5E5E5"> with an asterisk it's</font>

411
00:15:52,940 --> 00:15:57,380
pretty darn compatible<font color="#E5E5E5"> it passes the</font>

412
00:15:55,220 --> 00:15:58,880
<font color="#E5E5E5">node.js core test suite and we've</font>

413
00:15:57,380 --> 00:16:02,750
<font color="#CCCCCC">open-sourced it so you can find it</font><font color="#E5E5E5"> on</font>

414
00:15:58,880 --> 00:16:04,910
github<font color="#E5E5E5"> there</font><font color="#CCCCCC"> our prototype has some</font>

415
00:16:02,750 --> 00:16:07,010
security<font color="#E5E5E5"> guarantees so every vulnerable</font>

416
00:16:04,910 --> 00:16:09,459
language and framework<font color="#CCCCCC"> API is now safe</font>

417
00:16:07,010 --> 00:16:11,780
and because timeouts are composable

418
00:16:09,460 --> 00:16:14,030
<font color="#E5E5E5">applications built with these api's will</font>

419
00:16:11,780 --> 00:16:17,060
also be safe<font color="#CCCCCC"> cool</font>

420
00:16:14,030 --> 00:16:19,370
our prototype<font color="#E5E5E5"> also passes our</font><font color="#CCCCCC"> ehp test</font>

421
00:16:17,060 --> 00:16:21,650
suite so we<font color="#E5E5E5"> invoke all of the vulnerable</font>

422
00:16:19,370 --> 00:16:24,290
no J's API is with malicious input and

423
00:16:21,650 --> 00:16:26,569
indeed they now throw or return<font color="#CCCCCC"> timeout</font>

424
00:16:24,290 --> 00:16:28,819
exceptions as appropriate<font color="#CCCCCC"> that</font><font color="#E5E5E5"> test</font>

425
00:16:26,570 --> 00:16:30,940
suite covers all classes of

426
00:16:28,820 --> 00:16:34,370
<font color="#CCCCCC">vulnerabilities found in the npm</font>

427
00:16:30,940 --> 00:16:37,700
database we mentioned earlier however

428
00:16:34,370 --> 00:16:39,530
every rose has its thorns to use

429
00:16:37,700 --> 00:16:41,390
<font color="#CCCCCC">first-class</font><font color="#E5E5E5"> timeouts appropriately</font>

430
00:16:39,530 --> 00:16:42,740
it's a detect and response technique so

431
00:16:41,390 --> 00:16:44,840
<font color="#E5E5E5">you have to decide what your timeout</font>

432
00:16:42,740 --> 00:16:46,670
threshold is gonna be that's<font color="#E5E5E5"> a bit of a</font>

433
00:16:44,840 --> 00:16:47,930
Goldilocks problem it can't be too short

434
00:16:46,670 --> 00:16:48,410
and it<font color="#E5E5E5"> probably shouldn't be too long</font>

435
00:16:47,930 --> 00:16:50,750
<font color="#E5E5E5">either</font>

436
00:16:48,410 --> 00:16:53,300
<font color="#CCCCCC">and you also</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> need to decide on a</font>

437
00:16:50,750 --> 00:16:54,950
response policy<font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> you could come up</font>

438
00:16:53,300 --> 00:16:57,680
<font color="#CCCCCC">with a very tight threshold in which</font>

439
00:16:54,950 --> 00:16:59,360
<font color="#CCCCCC">case</font><font color="#E5E5E5"> attackers are taking about the same</font>

440
00:16:57,680 --> 00:17:00,949
<font color="#E5E5E5">amount of time as normal clients you</font>

441
00:16:59,360 --> 00:17:03,050
don't have to respond much in that in

442
00:17:00,950 --> 00:17:05,060
that<font color="#CCCCCC"> case</font><font color="#E5E5E5"> but if you have a relatively</font>

443
00:17:03,050 --> 00:17:08,959
generous bound<font color="#E5E5E5"> you probably want to also</font>

444
00:17:05,060 --> 00:17:10,639
<font color="#E5E5E5">implement some</font><font color="#CCCCCC"> kind of black listing we</font>

445
00:17:08,959 --> 00:17:12,530
<font color="#E5E5E5">measured the performance costs of our</font>

446
00:17:10,640 --> 00:17:16,100
<font color="#E5E5E5">prototype</font><font color="#CCCCCC"> and we estimate them to be</font>

447
00:17:12,530 --> 00:17:18,199
somewhere between<font color="#E5E5E5"> 0% and 2.4</font><font color="#CCCCCC"> X in micro</font>

448
00:17:16,099 --> 00:17:20,020
benchmarks and then we downloaded<font color="#E5E5E5"> a</font>

449
00:17:18,199 --> 00:17:22,130
bunch<font color="#E5E5E5"> of</font><font color="#CCCCCC"> applications</font><font color="#E5E5E5"> from github</font><font color="#CCCCCC"> and</font>

450
00:17:20,020 --> 00:17:25,790
found that the overheads range between

451
00:17:22,130 --> 00:17:28,010
<font color="#E5E5E5">0% and 24% depending on the class of</font>

452
00:17:25,790 --> 00:17:30,950
application so not too bad<font color="#CCCCCC"> as overhead</font>

453
00:17:28,010 --> 00:17:32,930
<font color="#E5E5E5">goes I promised we also got involved</font>

454
00:17:30,950 --> 00:17:34,670
<font color="#E5E5E5">with the community</font><font color="#CCCCCC"> a bit so</font><font color="#E5E5E5"> we wrote</font>

455
00:17:32,930 --> 00:17:37,160
this guide<font color="#CCCCCC"> which</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> find</font><font color="#E5E5E5"> on node.js</font>

456
00:17:34,670 --> 00:17:40,070
org<font color="#E5E5E5"> it's called don't block the event</font>

457
00:17:37,160 --> 00:17:42,290
loop or<font color="#CCCCCC"> the worker pool in</font><font color="#E5E5E5"> which we</font>

458
00:17:40,070 --> 00:17:44,300
review the node.js architecture<font color="#CCCCCC"> go</font>

459
00:17:42,290 --> 00:17:46,610
through event handler poisoning attacks

460
00:17:44,300 --> 00:17:49,129
<font color="#E5E5E5">and examples and</font><font color="#CCCCCC"> give some advice about</font>

461
00:17:46,610 --> 00:17:50,570
using<font color="#E5E5E5"> NPM modules safely so here's a</font>

462
00:17:49,130 --> 00:17:51,390
<font color="#E5E5E5">screenshot of the beginning of the guide</font>

463
00:17:50,570 --> 00:17:54,980
it goes on<font color="#E5E5E5"> for</font>

464
00:17:51,390 --> 00:17:57,480
<font color="#CCCCCC">10,000</font><font color="#E5E5E5"> words or so I was pretty generous</font>

465
00:17:54,980 --> 00:18:00,870
<font color="#CCCCCC">we also made some</font><font color="#E5E5E5"> changes</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> no DJ</font>

466
00:17:57,480 --> 00:18:03,150
escort<font color="#CCCCCC"> we</font><font color="#E5E5E5"> modified documentation for</font>

467
00:18:00,870 --> 00:18:05,399
particularly<font color="#E5E5E5"> vulnerable</font><font color="#CCCCCC"> api's including</font>

468
00:18:03,150 --> 00:18:08,550
read file<font color="#E5E5E5"> random bytes random fill and</font>

469
00:18:05,400 --> 00:18:12,150
spawn and we put<font color="#E5E5E5"> up sort</font><font color="#CCCCCC"> of a test</font>

470
00:18:08,550 --> 00:18:13,620
<font color="#E5E5E5">balloon for FF read file we modified the</font>

471
00:18:12,150 --> 00:18:15,720
implementation so that<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of</font>

472
00:18:13,620 --> 00:18:18,360
reading<font color="#E5E5E5"> the entire file</font><font color="#CCCCCC"> and a single</font>

473
00:18:15,720 --> 00:18:20,820
read system call it now reads it in

474
00:18:18,360 --> 00:18:23,340
chunks<font color="#E5E5E5"> which removes the vulnerability</font>

475
00:18:20,820 --> 00:18:23,820
<font color="#CCCCCC">to large files</font><font color="#E5E5E5"> if the attacker can find</font>

476
00:18:23,340 --> 00:18:25,409
one

477
00:18:23,820 --> 00:18:28,350
it still doesn't protect the attacker

478
00:18:25,410 --> 00:18:31,950
from<font color="#E5E5E5"> a particularly slow file but such</font>

479
00:18:28,350 --> 00:18:33,659
as life<font color="#CCCCCC"> in</font><font color="#E5E5E5"> closing</font><font color="#CCCCCC"> let me</font><font color="#E5E5E5"> summarize the</font>

480
00:18:31,950 --> 00:18:35,970
<font color="#CCCCCC">event-driven</font><font color="#E5E5E5"> architecture has an</font><font color="#CCCCCC"> e HP</font>

481
00:18:33,660 --> 00:18:38,460
<font color="#E5E5E5">problem and we believe first-class</font>

482
00:18:35,970 --> 00:18:41,280
<font color="#E5E5E5">timeouts can cure it</font><font color="#CCCCCC"> in our work we</font>

483
00:18:38,460 --> 00:18:43,440
defined an attack demonstrated the the

484
00:18:41,280 --> 00:18:46,110
presence of this attack in the wild<font color="#E5E5E5"> we</font>

485
00:18:43,440 --> 00:18:47,940
designed and prototyped<font color="#E5E5E5"> a defense and we</font>

486
00:18:46,110 --> 00:18:50,729
disseminated a lot of results<font color="#CCCCCC"> to the</font>

487
00:18:47,940 --> 00:18:51,630
practitioner<font color="#E5E5E5"> community</font><font color="#CCCCCC"> with that</font><font color="#E5E5E5"> thank</font>

488
00:18:50,730 --> 00:18:54,770
<font color="#CCCCCC">you for your attention</font>

489
00:18:51,630 --> 00:18:54,770
I'd be happy to answer<font color="#E5E5E5"> any questions</font>

490
00:19:02,960 --> 00:19:07,770
hey I'm wondering if you've observed any

491
00:19:05,910 --> 00:19:09,660
issues with asynchronous<font color="#CCCCCC"> timeouts</font>

492
00:19:07,770 --> 00:19:11,940
resulting in various types<font color="#E5E5E5"> of global</font>

493
00:19:09,660 --> 00:19:14,040
state like shared caches and<font color="#E5E5E5"> that sort</font>

494
00:19:11,940 --> 00:19:16,800
of thing<font color="#E5E5E5"> getting corrupted that's a</font>

495
00:19:14,040 --> 00:19:18,510
great question<font color="#CCCCCC"> to which</font><font color="#E5E5E5"> my answer is we</font>

496
00:19:16,800 --> 00:19:20,280
<font color="#E5E5E5">haven't gone and looked a ton at</font>

497
00:19:18,510 --> 00:19:22,200
<font color="#E5E5E5">implementation details of a lot of</font>

498
00:19:20,280 --> 00:19:25,170
applications the applications<font color="#E5E5E5"> I've</font>

499
00:19:22,200 --> 00:19:27,900
looked at sort<font color="#E5E5E5"> of manually</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of that</font>

500
00:19:25,170 --> 00:19:30,510
<font color="#E5E5E5">global</font><font color="#CCCCCC"> State is stored in external</font>

501
00:19:27,900 --> 00:19:32,460
places like databases<font color="#CCCCCC"> so the corruptions</font>

502
00:19:30,510 --> 00:19:35,400
already taken care<font color="#E5E5E5"> of in</font><font color="#CCCCCC"> that regard if</font>

503
00:19:32,460 --> 00:19:36,780
you are doing<font color="#CCCCCC"> a</font><font color="#E5E5E5"> bunch of in heap state</font>

504
00:19:35,400 --> 00:19:41,540
management<font color="#E5E5E5"> you would have to handle that</font>

505
00:19:36,780 --> 00:19:41,540
in your exceptions thank you

506
00:19:42,300 --> 00:19:47,790
what I'm wondering is is it possible<font color="#CCCCCC"> now</font>

507
00:19:45,600 --> 00:19:50,219
some requests are just taking more time

508
00:19:47,790 --> 00:19:53,639
<font color="#E5E5E5">than</font><font color="#CCCCCC"> Auto request</font><font color="#E5E5E5"> and how to</font>

509
00:19:50,220 --> 00:19:58,700
differentiate as attack or a legit

510
00:19:53,640 --> 00:20:01,350
request<font color="#CCCCCC"> so if your application permits</font>

511
00:19:58,700 --> 00:20:03,600
<font color="#E5E5E5">some requests to take on the order of</font>

512
00:20:01,350 --> 00:20:05,070
minutes<font color="#CCCCCC"> you've</font><font color="#E5E5E5"> simply written your</font>

513
00:20:03,600 --> 00:20:06,919
application wrong and there's a<font color="#E5E5E5"> terrible</font>

514
00:20:05,070 --> 00:20:10,470
<font color="#CCCCCC">performance problem you should fix that</font>

515
00:20:06,920 --> 00:20:12,360
<font color="#CCCCCC">if your application permits it sort</font><font color="#E5E5E5"> of</font>

516
00:20:10,470 --> 00:20:14,430
by<font color="#CCCCCC"> accident</font>

517
00:20:12,360 --> 00:20:17,070
it would be difficult to<font color="#E5E5E5"> differentiate</font>

518
00:20:14,430 --> 00:20:19,500
between a malicious request<font color="#E5E5E5"> and one of</font>

519
00:20:17,070 --> 00:20:22,350
these<font color="#E5E5E5"> sort of valid but bizarre requests</font>

520
00:20:19,500 --> 00:20:24,000
and in this case<font color="#E5E5E5"> even these valid</font>

521
00:20:22,350 --> 00:20:27,750
requests would be causing denial of

522
00:20:24,000 --> 00:20:29,730
service attacks<font color="#E5E5E5"> so I think ideally if</font>

523
00:20:27,750 --> 00:20:31,440
you're writing<font color="#E5E5E5"> an</font><font color="#CCCCCC"> application in the</font>

524
00:20:29,730 --> 00:20:32,760
<font color="#E5E5E5">context of first-class timeouts you</font>

525
00:20:31,440 --> 00:20:34,770
<font color="#E5E5E5">would want to reduce the amount</font><font color="#CCCCCC"> of</font>

526
00:20:32,760 --> 00:20:37,110
<font color="#E5E5E5">variants</font><font color="#CCCCCC"> that the different requests can</font>

527
00:20:34,770 --> 00:20:39,830
have at least<font color="#E5E5E5"> within a given callback or</font>

528
00:20:37,110 --> 00:20:39,830
a given<font color="#E5E5E5"> task</font>

529
00:20:44,610 --> 00:20:48,760
so one more<font color="#CCCCCC"> question so what was your</font>

530
00:20:47,170 --> 00:20:50,290
experience working<font color="#E5E5E5"> with the practitioner</font>

531
00:20:48,760 --> 00:20:52,390
community were they receptive to this

532
00:20:50,290 --> 00:20:54,760
did<font color="#E5E5E5"> you get any particular pushback in</font>

533
00:20:52,390 --> 00:20:58,030
any well I'm now a<font color="#E5E5E5"> member of</font><font color="#CCCCCC"> the core</font>

534
00:20:54,760 --> 00:20:59,530
<font color="#CCCCCC">know Dias development team</font><font color="#E5E5E5"> and they</font>

535
00:20:58,030 --> 00:21:03,160
bought me a plane<font color="#E5E5E5"> ticket to Vancouver in</font>

536
00:20:59,530 --> 00:21:04,720
October so<font color="#CCCCCC"> they're pretty</font><font color="#E5E5E5"> good that's</font>

537
00:21:03,160 --> 00:21:06,430
collaboration we like<font color="#E5E5E5"> this event</font>

538
00:21:04,720 --> 00:21:08,530
perfect<font color="#CCCCCC"> alright let's thank our speaker</font>

539
00:21:06,430 --> 00:21:13,549
again

540
00:21:08,530 --> 00:21:13,549
[Applause]

