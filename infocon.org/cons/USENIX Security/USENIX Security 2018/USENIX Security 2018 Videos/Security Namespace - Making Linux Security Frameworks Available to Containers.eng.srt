1
00:00:10,680 --> 00:00:15,489
good afternoon my name<font color="#CCCCCC"> is Joe</font><font color="#E5E5E5"> Johnson I</font>

2
00:00:13,570 --> 00:00:17,500
<font color="#E5E5E5">am a researcher at a</font><font color="#CCCCCC"> somatic</font><font color="#E5E5E5"> research</font>

3
00:00:15,490 --> 00:00:20,140
labs<font color="#E5E5E5"> so today I'm going to talk</font><font color="#CCCCCC"> about</font>

4
00:00:17,500 --> 00:00:21,990
how do<font color="#E5E5E5"> we make</font><font color="#CCCCCC"> secrete frameworks in</font>

5
00:00:20,140 --> 00:00:24,610
Linux kernel available to containers

6
00:00:21,990 --> 00:00:27,189
this is the joint work with<font color="#CCCCCC"> Debbie</font>

7
00:00:24,610 --> 00:00:27,939
<font color="#CCCCCC">severed from</font><font color="#E5E5E5"> GE</font><font color="#CCCCCC"> global research</font><font color="#E5E5E5"> Mimi</font>

8
00:00:27,189 --> 00:00:30,580
Zohar

9
00:00:27,939 --> 00:00:33,640
<font color="#CCCCCC">dimitra's and</font><font color="#E5E5E5"> Iraqis</font><font color="#CCCCCC"> from subbu from IBM</font>

10
00:00:30,580 --> 00:00:35,410
<font color="#CCCCCC">research</font><font color="#E5E5E5"> and my PhD advisor</font><font color="#CCCCCC"> dr. Anna</font>

11
00:00:33,640 --> 00:00:40,239
Jagger<font color="#E5E5E5"> who is ready to</font><font color="#CCCCCC"> answer</font><font color="#E5E5E5"> all</font>

12
00:00:35,410 --> 00:00:42,390
difficult questions so first of all what

13
00:00:40,239 --> 00:00:45,070
is<font color="#CCCCCC"> a container so container is</font>

14
00:00:42,390 --> 00:00:48,309
lightweight virtualization<font color="#CCCCCC"> that allows</font>

15
00:00:45,070 --> 00:00:51,460
you to<font color="#CCCCCC"> run multiple isolated</font><font color="#E5E5E5"> Linux</font>

16
00:00:48,309 --> 00:00:53,229
systems<font color="#E5E5E5"> on single Linux host so the</font>

17
00:00:51,460 --> 00:00:55,239
biggest difference<font color="#CCCCCC"> between container and</font>

18
00:00:53,229 --> 00:00:58,150
a virtual machine<font color="#CCCCCC"> is that containers</font>

19
00:00:55,239 --> 00:01:00,790
share the same kernel<font color="#E5E5E5"> so because of this</font>

20
00:00:58,150 --> 00:01:03,369
continuous<font color="#CCCCCC"> often</font><font color="#E5E5E5"> stall to offer a better</font>

21
00:01:00,790 --> 00:01:05,199
resource<font color="#E5E5E5"> utilization</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> example they</font>

22
00:01:03,369 --> 00:01:08,020
allow fasters to be<font color="#CCCCCC"> nap time</font>

23
00:01:05,199 --> 00:01:10,030
<font color="#CCCCCC">they allow Morton's deployment so these</font>

24
00:01:08,020 --> 00:01:12,520
features<font color="#E5E5E5"> are nice for this new server</font>

25
00:01:10,030 --> 00:01:16,810
list computing paradigm<font color="#CCCCCC"> such as Amazon</font>

26
00:01:12,520 --> 00:01:20,080
lambda but<font color="#CCCCCC"> its kernel sharing all good</font>

27
00:01:16,810 --> 00:01:22,870
well the answer<font color="#E5E5E5"> is obviously no so the</font>

28
00:01:20,080 --> 00:01:25,150
kernel<font color="#E5E5E5"> so the container owners because</font>

29
00:01:22,870 --> 00:01:27,120
the kernel is sheer now the<font color="#E5E5E5"> continued</font>

30
00:01:25,150 --> 00:01:29,830
owners cannot<font color="#E5E5E5"> really leverage all these</font>

31
00:01:27,120 --> 00:01:31,570
kernel secret frameworks<font color="#E5E5E5"> that the secure</font>

32
00:01:29,830 --> 00:01:34,780
community has been building<font color="#CCCCCC"> for decades</font>

33
00:01:31,570 --> 00:01:37,059
<font color="#CCCCCC">to protect their containers so for</font>

34
00:01:34,780 --> 00:01:38,980
example they<font color="#E5E5E5"> cannot really apply local</font>

35
00:01:37,060 --> 00:01:41,590
security policies to common things like

36
00:01:38,980 --> 00:01:46,210
<font color="#E5E5E5">integrity measurements code execution</font>

37
00:01:41,590 --> 00:01:48,010
<font color="#CCCCCC">monitor</font><font color="#E5E5E5"> access control and except for so</font>

38
00:01:46,210 --> 00:01:49,570
I will give you<font color="#CCCCCC"> a concrete</font><font color="#E5E5E5"> example using</font>

39
00:01:48,010 --> 00:01:51,850
this integrity attestation for

40
00:01:49,570 --> 00:01:55,119
containers and this is a real request

41
00:01:51,850 --> 00:01:57,190
from commercial<font color="#E5E5E5"> colander so the customer</font>

42
00:01:55,120 --> 00:01:59,500
of<font color="#CCCCCC"> that container cloud have this</font>

43
00:01:57,190 --> 00:02:01,630
request<font color="#CCCCCC"> so they want</font><font color="#E5E5E5"> to be able to</font>

44
00:01:59,500 --> 00:02:03,820
<font color="#E5E5E5">attach the integrity</font><font color="#CCCCCC"> of their containers</font>

45
00:02:01,630 --> 00:02:06,298
to their customers so<font color="#CCCCCC"> basically they</font>

46
00:02:03,820 --> 00:02:09,190
want to prove<font color="#CCCCCC"> to</font><font color="#E5E5E5"> their customers that</font>

47
00:02:06,299 --> 00:02:13,450
<font color="#CCCCCC">they only run faster the code they are</font>

48
00:02:09,190 --> 00:02:15,640
not<font color="#E5E5E5"> infected by malware and etc</font><font color="#CCCCCC"> so this</font>

49
00:02:13,450 --> 00:02:18,130
is exactly what the Linux integrity

50
00:02:15,640 --> 00:02:21,640
<font color="#E5E5E5">service system aka</font><font color="#CCCCCC"> Emma is designed for</font>

51
00:02:18,130 --> 00:02:23,440
so this<font color="#E5E5E5"> is how a my works</font><font color="#CCCCCC"> Sagada process</font>

52
00:02:21,640 --> 00:02:28,269
<font color="#E5E5E5">is</font><font color="#CCCCCC"> did shield system</font><font color="#E5E5E5"> cause</font>

53
00:02:23,440 --> 00:02:30,190
map or<font color="#CCCCCC"> read or exact and the colonel</font>

54
00:02:28,270 --> 00:02:32,380
<font color="#E5E5E5">according</font><font color="#CCCCCC"> to some management</font><font color="#E5E5E5"> of policy</font>

55
00:02:30,190 --> 00:02:35,470
will measure the file to be<font color="#CCCCCC"> loaded into</font>

56
00:02:32,380 --> 00:02:37,390
<font color="#CCCCCC">the memory</font><font color="#E5E5E5"> and will record that some the</font>

57
00:02:35,470 --> 00:02:39,820
measurements into<font color="#E5E5E5"> a</font><font color="#CCCCCC"> colonel data</font>

58
00:02:37,390 --> 00:02:42,519
structure called a<font color="#CCCCCC"> mandala the list at</font>

59
00:02:39,820 --> 00:02:46,180
the<font color="#E5E5E5"> same time the colonel will extend</font>

60
00:02:42,520 --> 00:02:49,240
that<font color="#CCCCCC"> management</font><font color="#E5E5E5"> to TPM</font><font color="#CCCCCC"> at a later point</font>

61
00:02:46,180 --> 00:02:50,920
when there is integrated<font color="#CCCCCC"> hesitation so</font>

62
00:02:49,240 --> 00:02:52,420
the<font color="#CCCCCC"> removal fire will collect the</font>

63
00:02:50,920 --> 00:02:55,059
measurements from<font color="#E5E5E5"> post the measurement</font>

64
00:02:52,420 --> 00:02:58,480
list and the TPM and<font color="#CCCCCC"> either will verify</font>

65
00:02:55,060 --> 00:03:00,790
the integrated status of the<font color="#E5E5E5"> system so</font>

66
00:02:58,480 --> 00:03:04,239
all<font color="#CCCCCC"> this works perfectly for virtual</font>

67
00:03:00,790 --> 00:03:05,709
machines<font color="#CCCCCC"> or a native Linux host because</font>

68
00:03:04,240 --> 00:03:09,370
they all have<font color="#E5E5E5"> their own they all have</font>

69
00:03:05,710 --> 00:03:10,960
their own<font color="#E5E5E5"> kernel however things are</font>

70
00:03:09,370 --> 00:03:14,020
<font color="#CCCCCC">broken when</font><font color="#E5E5E5"> it comes to a container</font>

71
00:03:10,960 --> 00:03:15,430
world<font color="#E5E5E5"> why so</font><font color="#CCCCCC"> because when there are</font>

72
00:03:14,020 --> 00:03:17,160
multiple<font color="#E5E5E5"> containers running on the</font>

73
00:03:15,430 --> 00:03:20,200
<font color="#E5E5E5">system and they share the same kernel</font>

74
00:03:17,160 --> 00:03:21,940
consequently the measurements<font color="#E5E5E5"> from</font>

75
00:03:20,200 --> 00:03:24,040
different containers as well as the

76
00:03:21,940 --> 00:03:25,930
management<font color="#CCCCCC"> from the</font><font color="#E5E5E5"> host</font><font color="#CCCCCC"> system are all</font>

77
00:03:24,040 --> 00:03:27,760
mixed<font color="#E5E5E5"> together in a single</font><font color="#CCCCCC"> data</font>

78
00:03:25,930 --> 00:03:29,370
structure instead<font color="#E5E5E5"> of</font><font color="#CCCCCC"> a kernel so you</font>

79
00:03:27,760 --> 00:03:32,109
only have<font color="#E5E5E5"> one measurement list and</font>

80
00:03:29,370 --> 00:03:35,790
consequently those containers cannot

81
00:03:32,110 --> 00:03:35,790
independently<font color="#E5E5E5"> attach their integrity</font>

82
00:03:35,850 --> 00:03:40,930
<font color="#CCCCCC">second so even if you can separate this</font>

83
00:03:39,489 --> 00:03:42,310
measurement list<font color="#E5E5E5"> say for different</font>

84
00:03:40,930 --> 00:03:45,310
containers<font color="#E5E5E5"> you still run into</font><font color="#CCCCCC"> the</font>

85
00:03:42,310 --> 00:03:47,830
problem of different policies so since

86
00:03:45,310 --> 00:03:49,810
our independent container<font color="#E5E5E5"> owners on the</font>

87
00:03:47,830 --> 00:03:51,640
<font color="#E5E5E5">same house they may have totally</font>

88
00:03:49,810 --> 00:03:53,140
different policies regarding<font color="#E5E5E5"> what to</font>

89
00:03:51,640 --> 00:03:55,899
<font color="#E5E5E5">measure and what</font><font color="#CCCCCC"> are the good</font>

90
00:03:53,140 --> 00:03:58,600
measurements so for<font color="#E5E5E5"> example let's say</font>

91
00:03:55,900 --> 00:04:01,420
we're researcher like me I'm seeing<font color="#E5E5E5"> you</font>

92
00:03:58,600 --> 00:04:04,359
know<font color="#E5E5E5"> I want a Lima to allow all the</font>

93
00:04:01,420 --> 00:04:06,429
Warner Bros versions of<font color="#CCCCCC"> software and I</font>

94
00:04:04,360 --> 00:04:08,170
would assume<font color="#CCCCCC"> that</font><font color="#E5E5E5"> a banks a bad</font>

95
00:04:06,430 --> 00:04:08,620
container<font color="#E5E5E5"> has shared the same</font><font color="#CCCCCC"> hosts with</font>

96
00:04:08,170 --> 00:04:12,100
me

97
00:04:08,620 --> 00:04:15,700
<font color="#E5E5E5">do not be</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> that policy so well</font>

98
00:04:12,100 --> 00:04:18,339
in<font color="#CCCCCC"> reality in reality Bank</font><font color="#E5E5E5"> would not be</font>

99
00:04:15,700 --> 00:04:18,969
happy<font color="#CCCCCC"> to work with</font><font color="#E5E5E5"> me I guess but you</font>

100
00:04:18,339 --> 00:04:21,548
get the<font color="#E5E5E5"> gist</font>

101
00:04:18,970 --> 00:04:23,620
so basically different<font color="#CCCCCC"> container</font><font color="#E5E5E5"> owners</font>

102
00:04:21,548 --> 00:04:25,840
<font color="#E5E5E5">have their different policies so they</font>

103
00:04:23,620 --> 00:04:30,250
want<font color="#E5E5E5"> to be able to independently specify</font>

104
00:04:25,840 --> 00:04:32,859
and enforce those policies so as another

105
00:04:30,250 --> 00:04:35,950
example<font color="#CCCCCC"> let's discuss a little bit about</font>

106
00:04:32,860 --> 00:04:37,060
<font color="#CCCCCC">mental</font><font color="#E5E5E5"> access control for containers so</font>

107
00:04:35,950 --> 00:04:39,639
this is the

108
00:04:37,060 --> 00:04:41,620
<font color="#CCCCCC">excerpts I took from the went to</font><font color="#E5E5E5"> our</font>

109
00:04:39,639 --> 00:04:45,100
<font color="#E5E5E5">exit documentation and by the way our</font>

110
00:04:41,620 --> 00:04:47,950
<font color="#E5E5E5">exes band whose product container</font><font color="#CCCCCC"> went</font>

111
00:04:45,100 --> 00:04:53,620
to<font color="#CCCCCC"> continued product so it's similar</font><font color="#E5E5E5"> to</font>

112
00:04:47,950 --> 00:04:55,990
docker so this is expert<font color="#CCCCCC"> exactly so what</font>

113
00:04:53,620 --> 00:04:58,570
<font color="#E5E5E5">is this is basically programs in your</font>

114
00:04:55,990 --> 00:05:00,880
container<font color="#E5E5E5"> cannot be faster can find for</font>

115
00:04:58,570 --> 00:05:03,130
<font color="#CCCCCC">instance</font><font color="#E5E5E5"> my circle runs under the</font>

116
00:05:00,880 --> 00:05:05,830
<font color="#E5E5E5">container profile which protects the</font>

117
00:05:03,130 --> 00:05:09,100
<font color="#E5E5E5">host will not be able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> enter my circle</font>

118
00:05:05,830 --> 00:05:11,260
profile<font color="#E5E5E5"> which protects the container so</font>

119
00:05:09,100 --> 00:05:15,280
I am NOT a native<font color="#E5E5E5"> speaker but the way</font>

120
00:05:11,260 --> 00:05:17,620
<font color="#E5E5E5">that</font><font color="#CCCCCC"> I'm translating</font><font color="#E5E5E5"> this is that you</font>

121
00:05:15,280 --> 00:05:19,359
know we can<font color="#CCCCCC"> only use app armor to</font>

122
00:05:17,620 --> 00:05:21,760
<font color="#CCCCCC">protect the container host</font><font color="#E5E5E5"> and all the</font>

123
00:05:19,360 --> 00:05:23,830
best<font color="#E5E5E5"> for the container and also I</font>

124
00:05:21,760 --> 00:05:27,340
believe<font color="#CCCCCC"> there</font><font color="#E5E5E5"> is some grammar issue with</font>

125
00:05:23,830 --> 00:05:29,650
this<font color="#CCCCCC"> statement so the goal of</font><font color="#E5E5E5"> this work</font>

126
00:05:27,340 --> 00:05:31,388
<font color="#E5E5E5">is to design screen</font><font color="#CCCCCC"> namespace</font><font color="#E5E5E5"> so</font>

127
00:05:29,650 --> 00:05:33,729
basically we<font color="#E5E5E5"> want to figure out can</font><font color="#CCCCCC"> be</font>

128
00:05:31,389 --> 00:05:35,530
virtualized<font color="#E5E5E5"> or isolate security</font>

129
00:05:33,729 --> 00:05:37,960
frameworks in<font color="#CCCCCC"> linux kernel to make them</font>

130
00:05:35,530 --> 00:05:40,150
available containers<font color="#E5E5E5"> just like how other</font>

131
00:05:37,960 --> 00:05:42,390
type of<font color="#E5E5E5"> kernel resources are being</font>

132
00:05:40,150 --> 00:05:44,859
virtualized<font color="#E5E5E5"> or isolated for containers</font>

133
00:05:42,390 --> 00:05:47,740
so ideally<font color="#CCCCCC"> we want to achieve</font><font color="#E5E5E5"> the</font>

134
00:05:44,860 --> 00:05:49,570
following functional goals<font color="#CCCCCC"> so first we</font>

135
00:05:47,740 --> 00:05:51,130
want to each container<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

136
00:05:49,570 --> 00:05:55,539
govern the security<font color="#E5E5E5"> of insuk</font>

137
00:05:51,130 --> 00:05:57,280
internalized processes and<font color="#E5E5E5"> second we</font>

138
00:05:55,539 --> 00:05:59,740
want to each container<font color="#E5E5E5"> to be able to</font>

139
00:05:57,280 --> 00:06:02,200
independently<font color="#E5E5E5"> define its</font><font color="#CCCCCC"> severe policies</font>

140
00:05:59,740 --> 00:06:04,450
and access its security<font color="#CCCCCC"> states for</font>

141
00:06:02,200 --> 00:06:07,630
example<font color="#CCCCCC"> like audit logs</font><font color="#E5E5E5"> measurement list</font>

142
00:06:04,450 --> 00:06:10,419
and cetera and to<font color="#E5E5E5"> satisfy</font><font color="#CCCCCC"> these</font>

143
00:06:07,630 --> 00:06:13,120
functional goals<font color="#E5E5E5"> we want to enforce one</font>

144
00:06:10,419 --> 00:06:14,799
security environment which is a

145
00:06:13,120 --> 00:06:16,840
container<font color="#E5E5E5"> should not be able to</font>

146
00:06:14,800 --> 00:06:19,020
<font color="#E5E5E5">invalidate a security code of other</font>

147
00:06:16,840 --> 00:06:21,190
containers all the container<font color="#CCCCCC"> hosts as</font>

148
00:06:19,020 --> 00:06:23,080
expressed where their respective

149
00:06:21,190 --> 00:06:26,229
security policies well this is a<font color="#E5E5E5"> little</font>

150
00:06:23,080 --> 00:06:28,710
bit twisted<font color="#E5E5E5"> but I will summarize it so</font>

151
00:06:26,229 --> 00:06:31,780
basically what it says is essentially<font color="#E5E5E5"> a</font>

152
00:06:28,710 --> 00:06:34,090
container<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we want to allow containers</font>

153
00:06:31,780 --> 00:06:37,150
to independently define<font color="#CCCCCC"> Ana specify</font>

154
00:06:34,090 --> 00:06:39,340
their security policy however<font color="#CCCCCC"> we don't</font>

155
00:06:37,150 --> 00:06:40,989
<font color="#CCCCCC">want this</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> come at</font><font color="#E5E5E5"> the cost of the</font>

156
00:06:39,340 --> 00:06:46,090
security<font color="#CCCCCC"> of other containers all the</font>

157
00:06:40,990 --> 00:06:47,620
host<font color="#E5E5E5"> system so before I can give you a</font>

158
00:06:46,090 --> 00:06:49,599
<font color="#E5E5E5">detailed is done I want to discuss a</font>

159
00:06:47,620 --> 00:06:50,930
little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> about how other types of</font>

160
00:06:49,599 --> 00:06:53,570
kernel resources are

161
00:06:50,930 --> 00:06:56,150
and isolated<font color="#E5E5E5"> in the Linux kernel so this</font>

162
00:06:53,570 --> 00:06:58,250
is through a thing called names based

163
00:06:56,150 --> 00:07:00,049
abstraction so a name<font color="#CCCCCC"> C based</font>

164
00:06:58,250 --> 00:07:02,210
abstraction essentially wraps<font color="#E5E5E5"> a global</font>

165
00:07:00,050 --> 00:07:04,280
system<font color="#CCCCCC"> resource in abstract an</font>

166
00:07:02,210 --> 00:07:06,680
abstraction<font color="#E5E5E5"> that makes it appear</font><font color="#CCCCCC"> to the</font>

167
00:07:04,280 --> 00:07:08,719
processes within<font color="#CCCCCC"> the</font><font color="#E5E5E5"> namespace that</font><font color="#CCCCCC"> they</font>

168
00:07:06,680 --> 00:07:12,050
have their own isolated<font color="#E5E5E5"> instance of that</font>

169
00:07:08,720 --> 00:07:13,460
<font color="#CCCCCC">global resource so at the people at the</font>

170
00:07:12,050 --> 00:07:15,380
time of the paper being written<font color="#CCCCCC"> there</font>

171
00:07:13,460 --> 00:07:19,159
<font color="#CCCCCC">was six names basis and now there were</font>

172
00:07:15,380 --> 00:07:21,949
seven so the all<font color="#CCCCCC"> of them isolates a</font>

173
00:07:19,160 --> 00:07:23,870
specific type<font color="#CCCCCC"> of kernel resource</font><font color="#E5E5E5"> so for</font>

174
00:07:21,949 --> 00:07:26,690
<font color="#E5E5E5">example the mountain name space it</font>

175
00:07:23,870 --> 00:07:29,060
<font color="#E5E5E5">isolates among points it socially it</font>

176
00:07:26,690 --> 00:07:33,710
allows every container<font color="#E5E5E5"> to have its own</font>

177
00:07:29,060 --> 00:07:35,449
file<font color="#CCCCCC"> system hierarchy and this is how</font>

178
00:07:33,710 --> 00:07:38,049
the containers<font color="#E5E5E5"> leverage those names</font>

179
00:07:35,449 --> 00:07:41,599
based is to build<font color="#E5E5E5"> an isolated container</font>

180
00:07:38,050 --> 00:07:43,789
<font color="#E5E5E5">so we would have a container daemon</font>

181
00:07:41,599 --> 00:07:47,000
directly running on<font color="#E5E5E5"> a native system like</font>

182
00:07:43,789 --> 00:07:49,909
<font color="#E5E5E5">a</font><font color="#CCCCCC"> daugherty so upon receiving a request</font>

183
00:07:47,000 --> 00:07:51,889
<font color="#E5E5E5">of creating a</font><font color="#CCCCCC"> new container</font><font color="#E5E5E5"> this the</font>

184
00:07:49,910 --> 00:07:55,370
container daemon will issue a clone

185
00:07:51,889 --> 00:07:58,940
system call with<font color="#E5E5E5"> all these names</font><font color="#CCCCCC"> based</font>

186
00:07:55,370 --> 00:08:02,000
<font color="#CCCCCC">Flags</font><font color="#E5E5E5"> specified and then the newly</font>

187
00:07:58,940 --> 00:08:04,430
<font color="#E5E5E5"> process will start running in</font>

188
00:08:02,000 --> 00:08:06,260
this new names basis<font color="#E5E5E5"> the it will set up</font>

189
00:08:04,430 --> 00:08:09,289
the names basis for example<font color="#CCCCCC"> mounting</font>

190
00:08:06,260 --> 00:08:10,010
it's the own<font color="#CCCCCC"> route point and then it'll</font>

191
00:08:09,289 --> 00:08:12,349
<font color="#CCCCCC">be exact</font>

192
00:08:10,010 --> 00:08:15,050
interviewee kizuite it will exact the

193
00:08:12,349 --> 00:08:16,849
target program and then a target program

194
00:08:15,050 --> 00:08:20,720
starts running in<font color="#CCCCCC"> the container you know</font>

195
00:08:16,849 --> 00:08:22,490
isolated away so what we want<font color="#E5E5E5"> is</font>

196
00:08:20,720 --> 00:08:25,580
actually<font color="#E5E5E5"> very simple and</font><font color="#CCCCCC"> very similar to</font>

197
00:08:22,490 --> 00:08:27,650
<font color="#CCCCCC">this what we want is how it is done a</font>

198
00:08:25,580 --> 00:08:31,250
kernel abstraction similar to the other

199
00:08:27,650 --> 00:08:33,650
resource abstractions such<font color="#E5E5E5"> that we issue</font>

200
00:08:31,250 --> 00:08:36,409
a<font color="#E5E5E5"> chrome system call we can just give</font>

201
00:08:33,650 --> 00:08:38,510
this new<font color="#E5E5E5"> flags and then the new leaf oak</font>

202
00:08:36,409 --> 00:08:41,270
<font color="#E5E5E5">the process will start</font><font color="#CCCCCC"> running in</font><font color="#E5E5E5"> this</font>

203
00:08:38,510 --> 00:08:43,669
new security namespace and it will have

204
00:08:41,270 --> 00:08:46,520
the<font color="#E5E5E5"> freedom to specify and enforce the</font>

205
00:08:43,669 --> 00:08:48,860
policy and be protected<font color="#CCCCCC"> by imma</font>

206
00:08:46,520 --> 00:08:51,560
<font color="#E5E5E5">up-armored or as the Linux just just</font>

207
00:08:48,860 --> 00:08:57,820
<font color="#E5E5E5">like if you have the own isolated</font><font color="#CCCCCC"> mr</font>

208
00:08:51,560 --> 00:09:02,119
<font color="#E5E5E5">Palmer or</font><font color="#CCCCCC"> selinux so we have this idea</font>

209
00:08:57,820 --> 00:09:04,490
<font color="#E5E5E5">so then we have this based on this idea</font>

210
00:09:02,120 --> 00:09:07,130
we come up with<font color="#E5E5E5"> with this initial</font><font color="#CCCCCC"> design</font>

211
00:09:04,490 --> 00:09:08,630
so basically we were thinking can<font color="#E5E5E5"> it</font>

212
00:09:07,130 --> 00:09:11,180
directly<font color="#CCCCCC"> virtualized this secret</font>

213
00:09:08,630 --> 00:09:13,700
<font color="#E5E5E5">frameworks</font><font color="#CCCCCC"> into instances and simply</font>

214
00:09:11,180 --> 00:09:15,829
divide<font color="#CCCCCC"> the control</font><font color="#E5E5E5"> so this is how this</font>

215
00:09:13,700 --> 00:09:18,830
<font color="#CCCCCC">strawman design looks like so basically</font>

216
00:09:15,830 --> 00:09:20,450
we<font color="#E5E5E5"> would have so basically this</font>

217
00:09:18,830 --> 00:09:22,070
<font color="#E5E5E5">super-secret frameworks will be</font>

218
00:09:20,450 --> 00:09:25,190
virtualized in two<font color="#E5E5E5"> different instances</font>

219
00:09:22,070 --> 00:09:27,830
<font color="#E5E5E5">and each instance will have its own</font>

220
00:09:25,190 --> 00:09:30,350
<font color="#CCCCCC">State and policy and interviewee enforce</font>

221
00:09:27,830 --> 00:09:32,959
that policy<font color="#E5E5E5"> independently so in this</font>

222
00:09:30,350 --> 00:09:35,060
case we would<font color="#CCCCCC"> have a native</font><font color="#E5E5E5"> secure</font>

223
00:09:32,959 --> 00:09:37,880
namespace<font color="#CCCCCC"> for a</font><font color="#E5E5E5"> native system we would</font>

224
00:09:35,060 --> 00:09:40,339
have secure names<font color="#E5E5E5"> base</font><font color="#CCCCCC"> one and secure</font>

225
00:09:37,880 --> 00:09:43,300
<font color="#CCCCCC">names base two and</font><font color="#E5E5E5"> we would have the</font>

226
00:09:40,339 --> 00:09:45,800
sequence<font color="#E5E5E5"> based native</font><font color="#CCCCCC"> Galvan process p 0</font>

227
00:09:43,300 --> 00:09:48,859
<font color="#E5E5E5">security names based one thousands</font>

228
00:09:45,800 --> 00:09:54,199
process p1 and p2<font color="#E5E5E5"> and security names</font>

229
00:09:48,860 --> 00:09:55,820
with two gallons p3 and this 3 different

230
00:09:54,200 --> 00:09:57,770
secret<font color="#E5E5E5"> names based</font><font color="#CCCCCC"> very independently</font>

231
00:09:55,820 --> 00:10:01,100
<font color="#E5E5E5">apply their security policies</font><font color="#CCCCCC"> and do the</font>

232
00:09:57,770 --> 00:10:03,290
enforcement<font color="#E5E5E5"> so clearly this achieves the</font>

233
00:10:01,100 --> 00:10:05,870
functional goal<font color="#E5E5E5"> because now each</font>

234
00:10:03,290 --> 00:10:07,579
individual security namespace basically

235
00:10:05,870 --> 00:10:10,430
defines its<font color="#E5E5E5"> own security they are all</font>

236
00:10:07,580 --> 00:10:12,320
isolated<font color="#CCCCCC"> from each other</font><font color="#E5E5E5"> but do you</font>

237
00:10:10,430 --> 00:10:15,050
<font color="#E5E5E5">think it also enforces the security</font>

238
00:10:12,320 --> 00:10:17,390
environment that we mentioned<font color="#CCCCCC"> before do</font>

239
00:10:15,050 --> 00:10:19,490
you think that<font color="#CCCCCC"> when security names</font><font color="#E5E5E5"> base</font>

240
00:10:17,390 --> 00:10:24,230
<font color="#E5E5E5">may be able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> invalidate the security</font>

241
00:10:19,490 --> 00:10:26,839
goal of another secret namespace well

242
00:10:24,230 --> 00:10:28,459
the answer is<font color="#E5E5E5"> also yes so we found two</font>

243
00:10:26,839 --> 00:10:31,130
<font color="#E5E5E5">types of attacks against</font><font color="#CCCCCC"> the strawman</font>

244
00:10:28,459 --> 00:10:33,649
<font color="#CCCCCC">design so the first step okay</font><font color="#E5E5E5"> so let's</font>

245
00:10:31,130 --> 00:10:37,100
<font color="#E5E5E5">assume that</font><font color="#CCCCCC"> we follow this romantism and</font>

246
00:10:33,649 --> 00:10:38,839
build this<font color="#E5E5E5"> I'm a security namespace so</font>

247
00:10:37,100 --> 00:10:41,810
<font color="#E5E5E5">originally without a</font><font color="#CCCCCC"> map secure</font>

248
00:10:38,839 --> 00:10:44,060
namespace<font color="#CCCCCC"> when the</font><font color="#E5E5E5"> program executes some</font>

249
00:10:41,810 --> 00:10:46,699
malicious code<font color="#CCCCCC"> that malicious</font><font color="#E5E5E5"> code gets</font>

250
00:10:44,060 --> 00:10:48,949
measured and the<font color="#CCCCCC"> amendment was recorded</font>

251
00:10:46,700 --> 00:10:50,540
into a measurement list<font color="#E5E5E5"> and later during</font>

252
00:10:48,950 --> 00:10:53,480
integrity attestation

253
00:10:50,540 --> 00:10:55,099
a remote verifier can basically know

254
00:10:53,480 --> 00:10:57,290
that the<font color="#E5E5E5"> system has run some malicious</font>

255
00:10:55,100 --> 00:11:00,709
code and is not of sufficient<font color="#E5E5E5"> integrity</font>

256
00:10:57,290 --> 00:11:02,810
use however by introducing this<font color="#CCCCCC"> I'm a</font>

257
00:11:00,709 --> 00:11:04,369
namespace<font color="#E5E5E5"> following the strong and is</font>

258
00:11:02,810 --> 00:11:08,359
done we not<font color="#E5E5E5"> run into a trouble</font>

259
00:11:04,370 --> 00:11:10,850
so the process can<font color="#CCCCCC"> focus</font><font color="#E5E5E5"> self into a new</font>

260
00:11:08,360 --> 00:11:13,040
<font color="#E5E5E5">am a security namespace and this nearly</font>

261
00:11:10,850 --> 00:11:15,920
folks process that's just called p1<font color="#E5E5E5"> and</font>

262
00:11:13,040 --> 00:11:17,810
now the p1 could execute this malicious

263
00:11:15,920 --> 00:11:20,810
code the malicious codes

264
00:11:17,810 --> 00:11:22,489
you<font color="#E5E5E5"> guys measure but it will be recorded</font>

265
00:11:20,810 --> 00:11:26,300
into<font color="#CCCCCC"> the management</font><font color="#E5E5E5"> list of the</font>

266
00:11:22,490 --> 00:11:29,090
namespace<font color="#E5E5E5"> of</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> so later after the</font>

267
00:11:26,300 --> 00:11:31,849
names boost one exits it<font color="#E5E5E5"> basically</font>

268
00:11:29,090 --> 00:11:33,760
leaves no footprints on system and<font color="#E5E5E5"> there</font>

269
00:11:31,850 --> 00:11:36,200
will interpret<font color="#E5E5E5"> it has station later</font><font color="#CCCCCC"> a</font>

270
00:11:33,760 --> 00:11:38,420
remote verifier will be tricked into

271
00:11:36,200 --> 00:11:40,880
<font color="#E5E5E5">believing that the system is of</font>

272
00:11:38,420 --> 00:11:42,920
sufficient ability use despite the fact

273
00:11:40,880 --> 00:11:46,370
that this malicious code was once

274
00:11:42,920 --> 00:11:49,550
executed on<font color="#CCCCCC"> the system so the root</font>

275
00:11:46,370 --> 00:11:52,310
reason for this attack is<font color="#E5E5E5"> because by</font>

276
00:11:49,550 --> 00:11:54,290
doing this form and<font color="#CCCCCC"> design we make the</font>

277
00:11:52,310 --> 00:11:57,130
<font color="#CCCCCC">colonel's decree verb 3 marks no longer</font>

278
00:11:54,290 --> 00:12:00,140
<font color="#CCCCCC">global so basically originally the</font>

279
00:11:57,130 --> 00:12:03,050
<font color="#E5E5E5">Colonel's decree</font><font color="#CCCCCC"> 3 marks governs all the</font>

280
00:12:00,140 --> 00:12:06,410
processes on system but now each

281
00:12:03,050 --> 00:12:08,599
instance only<font color="#CCCCCC"> scans a subset of those</font>

282
00:12:06,410 --> 00:12:12,680
processes<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> introduced this</font>

283
00:12:08,600 --> 00:12:15,080
attack so<font color="#E5E5E5"> as another example let's</font><font color="#CCCCCC"> say</font>

284
00:12:12,680 --> 00:12:17,779
we<font color="#E5E5E5"> have this one</font><font color="#CCCCCC"> container</font><font color="#E5E5E5"> called</font>

285
00:12:15,080 --> 00:12:19,330
<font color="#E5E5E5">container</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> it has this precious file</font>

286
00:12:17,779 --> 00:12:22,100
that<font color="#E5E5E5"> either wants to make it</font><font color="#CCCCCC"> read only</font>

287
00:12:19,330 --> 00:12:24,589
<font color="#E5E5E5">so he</font><font color="#CCCCCC"> realized on mentor access control</font>

288
00:12:22,100 --> 00:12:26,770
<font color="#CCCCCC">framework to do this so</font><font color="#E5E5E5"> basically his</font>

289
00:12:24,589 --> 00:12:30,320
method<font color="#E5E5E5"> is for</font><font color="#CCCCCC"> Policy</font><font color="#E5E5E5"> is saying that I</font>

290
00:12:26,770 --> 00:12:33,410
want all my processes to be only to read

291
00:12:30,320 --> 00:12:35,510
<font color="#E5E5E5">this profile sorry to be only to read</font>

292
00:12:33,410 --> 00:12:39,199
this file but<font color="#E5E5E5"> not be able to write this</font>

293
00:12:35,510 --> 00:12:42,740
file<font color="#E5E5E5"> well he thinks sir he thinks things</font>

294
00:12:39,200 --> 00:12:44,900
are<font color="#E5E5E5"> ok but in reality what he doesn't</font>

295
00:12:42,740 --> 00:12:46,790
know is that<font color="#E5E5E5"> this file may be shared</font>

296
00:12:44,900 --> 00:12:49,100
with another<font color="#E5E5E5"> container you know way</font>

297
00:12:46,790 --> 00:12:51,860
through either<font color="#CCCCCC"> fair sharing or it could</font>

298
00:12:49,100 --> 00:12:54,320
be through<font color="#CCCCCC"> amount binding so another</font>

299
00:12:51,860 --> 00:12:56,960
<font color="#E5E5E5">container its owner doesn't really know</font>

300
00:12:54,320 --> 00:12:59,720
or care what<font color="#CCCCCC"> till the first container</font>

301
00:12:56,960 --> 00:13:01,970
<font color="#E5E5E5">thought about the file so</font><font color="#CCCCCC"> he</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> he</font>

302
00:12:59,720 --> 00:13:05,089
can<font color="#E5E5E5"> simply</font><font color="#CCCCCC"> specify policy saying that I</font>

303
00:13:01,970 --> 00:13:09,740
<font color="#CCCCCC">won't allow all my processes to read and</font>

304
00:13:05,089 --> 00:13:11,720
write<font color="#CCCCCC"> to this file so in this case this</font>

305
00:13:09,740 --> 00:13:13,910
<font color="#CCCCCC">secret names based</font><font color="#E5E5E5"> actually gives a</font>

306
00:13:11,720 --> 00:13:16,430
false sense of<font color="#E5E5E5"> security to</font><font color="#CCCCCC"> the first</font>

307
00:13:13,910 --> 00:13:18,260
owner of this container because he<font color="#E5E5E5"> not</font>

308
00:13:16,430 --> 00:13:20,180
believes the file is read<font color="#E5E5E5"> only but</font>

309
00:13:18,260 --> 00:13:23,750
actually it can be<font color="#E5E5E5"> arbitrarily written</font>

310
00:13:20,180 --> 00:13:26,390
by the second container so the root

311
00:13:23,750 --> 00:13:28,730
cause of this attack is<font color="#E5E5E5"> because by</font><font color="#CCCCCC"> doing</font>

312
00:13:26,390 --> 00:13:31,880
this naive design we start<font color="#E5E5E5"> off make the</font>

313
00:13:28,730 --> 00:13:34,160
kernel secret remarks no longer<font color="#CCCCCC"> mentary</font>

314
00:13:31,880 --> 00:13:36,290
so instead of having<font color="#E5E5E5"> a single system at</font>

315
00:13:34,160 --> 00:13:38,360
the mean to specify<font color="#E5E5E5"> the security policy</font>

316
00:13:36,290 --> 00:13:40,430
for<font color="#CCCCCC"> a whole</font><font color="#E5E5E5"> system we not have two</font>

317
00:13:38,360 --> 00:13:42,650
<font color="#CCCCCC">different parties that can both make</font>

318
00:13:40,430 --> 00:13:44,300
security decisions<font color="#E5E5E5"> sometimes the</font>

319
00:13:42,650 --> 00:13:49,699
security decisions<font color="#E5E5E5"> conflict with each</font>

320
00:13:44,300 --> 00:13:51,589
other so this<font color="#E5E5E5"> actually highlights the</font>

321
00:13:49,700 --> 00:13:53,360
challenge that<font color="#CCCCCC"> we need</font><font color="#E5E5E5"> to solve</font><font color="#CCCCCC"> we also</font>

322
00:13:51,590 --> 00:13:55,640
<font color="#E5E5E5">design</font><font color="#CCCCCC"> security secrets to create</font>

323
00:13:53,360 --> 00:13:57,680
namespace<font color="#E5E5E5"> so the first challenge is that</font>

324
00:13:55,640 --> 00:13:59,180
that is done the kernel security

325
00:13:57,680 --> 00:14:00,920
frameworks are global

326
00:13:59,180 --> 00:14:02,900
that means<font color="#E5E5E5"> they control all the</font>

327
00:14:00,920 --> 00:14:05,089
<font color="#E5E5E5">processes running on</font><font color="#CCCCCC"> a system and</font><font color="#E5E5E5"> this</font>

328
00:14:02,900 --> 00:14:06,579
<font color="#CCCCCC">is actually the requirement to be a</font>

329
00:14:05,090 --> 00:14:09,350
reference<font color="#E5E5E5"> monitor</font>

330
00:14:06,580 --> 00:14:11,570
however in a<font color="#E5E5E5"> continual case we actually</font>

331
00:14:09,350 --> 00:14:14,600
<font color="#E5E5E5">want to contain the owners to be able to</font>

332
00:14:11,570 --> 00:14:16,700
<font color="#E5E5E5">access control over only a</font><font color="#CCCCCC"> limited set</font>

333
00:14:14,600 --> 00:14:20,720
of processes for<font color="#CCCCCC"> example only the</font>

334
00:14:16,700 --> 00:14:23,210
<font color="#CCCCCC">process is over its own container</font><font color="#E5E5E5"> and</font>

335
00:14:20,720 --> 00:14:26,090
second<font color="#E5E5E5"> so by design the kernel security</font>

336
00:14:23,210 --> 00:14:28,670
frameworks is mandatory<font color="#CCCCCC"> that means only</font>

337
00:14:26,090 --> 00:14:31,400
<font color="#E5E5E5">a single system mean may define security</font>

338
00:14:28,670 --> 00:14:33,439
policy but now if we<font color="#E5E5E5"> want to support</font>

339
00:14:31,400 --> 00:14:35,090
containers so basically<font color="#E5E5E5"> we're saying</font>

340
00:14:33,440 --> 00:14:37,220
<font color="#CCCCCC">that we</font><font color="#E5E5E5"> want allow different container</font>

341
00:14:35,090 --> 00:14:41,660
<font color="#E5E5E5">owners to make their own security</font>

342
00:14:37,220 --> 00:14:44,570
decisions independently so how to relax

343
00:14:41,660 --> 00:14:46,490
<font color="#CCCCCC">these two</font><font color="#E5E5E5"> requirements of the kernel</font>

344
00:14:44,570 --> 00:14:48,620
security framework<font color="#E5E5E5"> becomes the challenge</font>

345
00:14:46,490 --> 00:14:53,930
<font color="#CCCCCC">of designing</font><font color="#E5E5E5"> this secure security</font>

346
00:14:48,620 --> 00:14:56,210
namespace so to solve<font color="#E5E5E5"> this</font><font color="#CCCCCC"> problem and</font>

347
00:14:53,930 --> 00:14:58,670
address<font color="#E5E5E5"> the issue that we incurred in</font>

348
00:14:56,210 --> 00:15:01,760
the strawman design we ran<font color="#E5E5E5"> two simple</font>

349
00:14:58,670 --> 00:15:03,829
insights the first simple insight is<font color="#E5E5E5"> to</font>

350
00:15:01,760 --> 00:15:07,040
relax the<font color="#E5E5E5"> global requirements</font><font color="#CCCCCC"> of the</font>

351
00:15:03,830 --> 00:15:09,380
Colonel's secret framework we can wrote

352
00:15:07,040 --> 00:15:11,870
an operation to all the<font color="#CCCCCC"> security needs</font>

353
00:15:09,380 --> 00:15:14,930
<font color="#E5E5E5">basis whose security might be affected</font>

354
00:15:11,870 --> 00:15:16,880
by the operation in other words even

355
00:15:14,930 --> 00:15:19,069
<font color="#CCCCCC">though a security namespace doesn't</font>

356
00:15:16,880 --> 00:15:21,560
control all the processes on system<font color="#CCCCCC"> it</font>

357
00:15:19,070 --> 00:15:25,540
is sufficient to<font color="#E5E5E5"> only control the</font>

358
00:15:21,560 --> 00:15:29,449
processes that may affect its security

359
00:15:25,540 --> 00:15:30,920
<font color="#E5E5E5">the second</font><font color="#CCCCCC"> set is to</font><font color="#E5E5E5"> relax the monetary</font>

360
00:15:29,450 --> 00:15:34,340
requirements of the kernel security

361
00:15:30,920 --> 00:15:35,810
framework we only allow operation<font color="#E5E5E5"> if all</font>

362
00:15:34,340 --> 00:15:37,400
the secret names business<font color="#E5E5E5"> that are</font>

363
00:15:35,810 --> 00:15:41,030
affected by the operation<font color="#E5E5E5"> a lot</font>

364
00:15:37,400 --> 00:15:44,030
<font color="#E5E5E5">operation in other words even</font><font color="#CCCCCC"> though</font>

365
00:15:41,030 --> 00:15:44,689
<font color="#E5E5E5">every even though every container or</font>

366
00:15:44,030 --> 00:15:46,610
every<font color="#E5E5E5"> secure</font>

367
00:15:44,690 --> 00:15:49,670
<font color="#CCCCCC">names</font><font color="#E5E5E5"> base can make independent</font><font color="#CCCCCC"> secret</font>

368
00:15:46,610 --> 00:15:54,020
decisions operation is only allowed if

369
00:15:49,670 --> 00:15:56,360
all of them<font color="#E5E5E5"> allow</font><font color="#CCCCCC"> that operation</font><font color="#E5E5E5"> so</font>

370
00:15:54,020 --> 00:15:58,490
based on these two<font color="#E5E5E5"> simple insights are</font>

371
00:15:56,360 --> 00:16:00,470
we build<font color="#E5E5E5"> this table secure names this</font>

372
00:15:58,490 --> 00:16:01,310
design<font color="#CCCCCC"> so this is the high-level</font>

373
00:16:00,470 --> 00:16:05,300
<font color="#CCCCCC">overview</font>

374
00:16:01,310 --> 00:16:07,369
so basically next<font color="#CCCCCC"> romantism</font><font color="#E5E5E5"> refers to</font>

375
00:16:05,300 --> 00:16:10,010
virtualize the<font color="#E5E5E5"> secret frame works in two</font>

376
00:16:07,370 --> 00:16:11,960
different<font color="#E5E5E5"> instances</font><font color="#CCCCCC"> and each</font><font color="#E5E5E5"> security</font>

377
00:16:10,010 --> 00:16:14,630
framework instance will have its own

378
00:16:11,960 --> 00:16:16,490
policy and<font color="#CCCCCC"> States</font><font color="#E5E5E5"> so although this year</font>

379
00:16:14,630 --> 00:16:17,900
<font color="#E5E5E5">the same kernel code base but</font>

380
00:16:16,490 --> 00:16:19,730
conceptually they are completely

381
00:16:17,900 --> 00:16:24,140
<font color="#E5E5E5">isolated</font><font color="#CCCCCC"> and they will be able</font><font color="#E5E5E5"> to</font>

382
00:16:19,730 --> 00:16:25,910
enforce the policy independently so we

383
00:16:24,140 --> 00:16:29,030
added<font color="#E5E5E5"> a component called operation</font>

384
00:16:25,910 --> 00:16:31,910
router<font color="#CCCCCC"> in front of this mediation</font><font color="#E5E5E5"> so the</font>

385
00:16:29,030 --> 00:16:34,730
operation router base will wrote an

386
00:16:31,910 --> 00:16:36,530
operation<font color="#E5E5E5"> based on which names based is</font>

387
00:16:34,730 --> 00:16:38,930
going to be affected by<font color="#E5E5E5"> the operation</font>

388
00:16:36,530 --> 00:16:41,089
<font color="#E5E5E5">and</font><font color="#CCCCCC"> enrolled</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> security and</font><font color="#CCCCCC"> wrote</font>

389
00:16:38,930 --> 00:16:43,250
this operation<font color="#E5E5E5"> to all security names</font>

390
00:16:41,090 --> 00:16:46,790
bases that<font color="#CCCCCC"> are affected by the operation</font>

391
00:16:43,250 --> 00:16:48,920
<font color="#CCCCCC">and after each secret namespace makes</font>

392
00:16:46,790 --> 00:16:51,170
the independent<font color="#CCCCCC"> security decision the</font>

393
00:16:48,920 --> 00:16:53,839
security<font color="#E5E5E5"> decisions are intersected only</font>

394
00:16:51,170 --> 00:16:56,300
if all security decisions<font color="#E5E5E5"> allow the</font>

395
00:16:53,840 --> 00:16:59,600
operation build<font color="#E5E5E5"> operation be eventually</font>

396
00:16:56,300 --> 00:17:02,719
allowed by the system<font color="#E5E5E5"> so as you can see</font>

397
00:16:59,600 --> 00:17:03,680
<font color="#CCCCCC">because different</font><font color="#E5E5E5"> security names</font><font color="#CCCCCC"> bases</font>

398
00:17:02,720 --> 00:17:06,350
to make<font color="#CCCCCC"> the</font><font color="#E5E5E5"> independent security</font>

399
00:17:03,680 --> 00:17:09,079
decisions<font color="#E5E5E5"> it's possible that a conflict</font>

400
00:17:06,349 --> 00:17:10,639
may happen<font color="#E5E5E5"> so to resolve those conflicts</font>

401
00:17:09,079 --> 00:17:13,310
we design another<font color="#CCCCCC"> component called</font>

402
00:17:10,640 --> 00:17:15,470
<font color="#E5E5E5">policy engine that basically analyzes</font>

403
00:17:13,310 --> 00:17:19,188
the policy and the<font color="#CCCCCC"> funds</font><font color="#E5E5E5"> the conflicts</font>

404
00:17:15,470 --> 00:17:20,720
at<font color="#E5E5E5"> the part of the load time now let me</font>

405
00:17:19,189 --> 00:17:24,470
go<font color="#E5E5E5"> into the</font><font color="#CCCCCC"> detailed design of each</font>

406
00:17:20,720 --> 00:17:26,900
component<font color="#CCCCCC"> first operation water so the</font>

407
00:17:24,470 --> 00:17:28,670
key<font color="#CCCCCC"> task</font><font color="#E5E5E5"> of the operation water is from</font>

408
00:17:26,900 --> 00:17:31,760
rotten operation to all the security

409
00:17:28,670 --> 00:17:34,220
bases<font color="#E5E5E5"> whose security may be affected</font><font color="#CCCCCC"> by</font>

410
00:17:31,760 --> 00:17:36,260
the operation but how do we<font color="#E5E5E5"> decide</font>

411
00:17:34,220 --> 00:17:39,260
<font color="#E5E5E5">whether or not if a security namespace</font>

412
00:17:36,260 --> 00:17:41,480
is affected by<font color="#CCCCCC"> an operation</font><font color="#E5E5E5"> so again we</font>

413
00:17:39,260 --> 00:17:43,879
have a<font color="#CCCCCC"> two simple instance here first</font>

414
00:17:41,480 --> 00:17:46,430
<font color="#E5E5E5">the operation can often be written as</font>

415
00:17:43,880 --> 00:17:48,830
the authorization<font color="#CCCCCC"> topple</font><font color="#E5E5E5"> where you have</font>

416
00:17:46,430 --> 00:17:51,170
the subject<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have the object</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> you</font>

417
00:17:48,830 --> 00:17:53,120
have the<font color="#E5E5E5"> operation itself and the</font>

418
00:17:51,170 --> 00:17:55,310
security<font color="#E5E5E5"> names this</font><font color="#CCCCCC"> also has this</font>

419
00:17:53,120 --> 00:17:57,199
implicit assumptions over the subject

420
00:17:55,310 --> 00:17:59,059
<font color="#CCCCCC">and object</font>

421
00:17:57,200 --> 00:18:01,549
and based on whether or<font color="#CCCCCC"> not those the</font>

422
00:17:59,059 --> 00:18:03,200
implicit assumptions are violated<font color="#CCCCCC"> we</font>

423
00:18:01,549 --> 00:18:05,899
will be able<font color="#E5E5E5"> to figure out whether or</font>

424
00:18:03,200 --> 00:18:09,889
<font color="#E5E5E5">not a security namespace is affected by</font>

425
00:18:05,899 --> 00:18:12,439
<font color="#CCCCCC">our operation so let's first take a look</font>

426
00:18:09,889 --> 00:18:17,539
<font color="#CCCCCC">at</font><font color="#E5E5E5"> the perspective</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> the of the</font>

427
00:18:12,440 --> 00:18:19,730
subject so this is actually the implicit

428
00:18:17,539 --> 00:18:22,250
<font color="#E5E5E5">assumption to</font><font color="#CCCCCC"> war subject is</font><font color="#E5E5E5"> actually</font>

429
00:18:19,730 --> 00:18:23,840
directly derived<font color="#CCCCCC"> from the global</font>

430
00:18:22,250 --> 00:18:26,059
assumption global requirement of

431
00:18:23,840 --> 00:18:28,490
security framework<font color="#E5E5E5"> so basically a</font>

432
00:18:26,059 --> 00:18:30,769
security framework<font color="#E5E5E5"> assumes that you</font>

433
00:18:28,490 --> 00:18:33,200
implicitly assumes that you can<font color="#E5E5E5"> choose</font>

434
00:18:30,769 --> 00:18:36,230
all the subjects<font color="#CCCCCC"> spamming from the first</font>

435
00:18:33,200 --> 00:18:39,830
subject that it says for example<font color="#E5E5E5"> for the</font>

436
00:18:36,230 --> 00:18:42,649
native<font color="#CCCCCC"> system this</font><font color="#E5E5E5"> means all the</font>

437
00:18:39,830 --> 00:18:45,260
<font color="#CCCCCC">processes folks from in it and for a</font>

438
00:18:42,649 --> 00:18:48,260
container<font color="#E5E5E5"> this means all subjects folks</font>

439
00:18:45,260 --> 00:18:50,090
from the<font color="#E5E5E5"> first container process so</font>

440
00:18:48,260 --> 00:18:52,940
based on this assumption based on<font color="#E5E5E5"> this</font>

441
00:18:50,090 --> 00:18:54,590
implicit assumption we<font color="#E5E5E5"> can</font><font color="#CCCCCC"> now know how</font>

442
00:18:52,940 --> 00:18:57,409
to<font color="#CCCCCC"> involve operation from</font><font color="#E5E5E5"> the</font>

443
00:18:54,590 --> 00:18:59,899
<font color="#E5E5E5">perspective of subject</font><font color="#CCCCCC"> so basically we</font>

444
00:18:57,409 --> 00:19:02,870
know<font color="#CCCCCC"> that a secrete namespace might be</font>

445
00:18:59,899 --> 00:19:04,760
affected by operation if that subject is

446
00:19:02,870 --> 00:19:07,309
associated with a<font color="#CCCCCC"> secured namespace</font><font color="#E5E5E5"> or</font>

447
00:19:04,760 --> 00:19:11,870
that subject is associate<font color="#E5E5E5"> with the</font>

448
00:19:07,309 --> 00:19:13,250
descendant of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> security namespace so</font>

449
00:19:11,870 --> 00:19:16,100
let's take a look<font color="#CCCCCC"> here to the previous</font>

450
00:19:13,250 --> 00:19:19,880
attack example I showed before<font color="#CCCCCC"> so now</font>

451
00:19:16,100 --> 00:19:22,340
let's say that although this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> p1</font><font color="#CCCCCC"> it</font>

452
00:19:19,880 --> 00:19:25,100
was<font color="#CCCCCC"> vocally</font><font color="#E5E5E5"> in a new mr namespace it</font>

453
00:19:22,340 --> 00:19:27,110
executes this malicious code<font color="#E5E5E5"> so because</font>

454
00:19:25,100 --> 00:19:29,570
if we because now we consider the

455
00:19:27,110 --> 00:19:31,070
subjects perspective of whether or<font color="#CCCCCC"> not a</font>

456
00:19:29,570 --> 00:19:33,860
namespace might be affected by<font color="#E5E5E5"> the</font>

457
00:19:31,070 --> 00:19:37,240
operation we know that the p1<font color="#E5E5E5"> is</font>

458
00:19:33,860 --> 00:19:40,610
actually a children of P so we know that

459
00:19:37,240 --> 00:19:43,159
<font color="#E5E5E5">this operation</font><font color="#CCCCCC"> that the p1 runs the</font>

460
00:19:40,610 --> 00:19:45,740
malicious code should also affect the

461
00:19:43,159 --> 00:19:47,960
security<font color="#E5E5E5"> of the native namespace</font><font color="#CCCCCC"> so in</font>

462
00:19:45,740 --> 00:19:50,600
this case the measurement<font color="#E5E5E5"> of the</font>

463
00:19:47,960 --> 00:19:52,690
malicious code should<font color="#E5E5E5"> not only just be</font>

464
00:19:50,600 --> 00:19:55,279
recorded in a<font color="#CCCCCC"> measurement a list of the</font>

465
00:19:52,690 --> 00:19:57,919
<font color="#E5E5E5">secret names this one but also the</font>

466
00:19:55,279 --> 00:20:02,149
<font color="#E5E5E5">security namespace native in this way</font>

467
00:19:57,919 --> 00:20:04,429
even<font color="#E5E5E5"> after</font><font color="#CCCCCC"> the s1 exits later Darren has</font>

468
00:20:02,149 --> 00:20:06,229
the integrity<font color="#CCCCCC"> at hesitation</font><font color="#E5E5E5"> a remote</font>

469
00:20:04,429 --> 00:20:10,090
verifier<font color="#E5E5E5"> can still know the true</font>

470
00:20:06,230 --> 00:20:10,090
integrity status<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> system</font>

471
00:20:10,360 --> 00:20:16,269
so next let's take<font color="#E5E5E5"> a look</font><font color="#CCCCCC"> from objects</font>

472
00:20:13,029 --> 00:20:18,730
perspective so the implicit<font color="#E5E5E5"> assumption</font>

473
00:20:16,269 --> 00:20:20,980
of object is<font color="#E5E5E5"> actually directly derived</font>

474
00:20:18,730 --> 00:20:23,169
from<font color="#E5E5E5"> the monetary assumption of the</font>

475
00:20:20,980 --> 00:20:25,559
security frameworks<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> security</font>

476
00:20:23,169 --> 00:20:28,510
<font color="#CCCCCC">framework</font><font color="#E5E5E5"> implicitly assumes</font><font color="#CCCCCC"> that only</font>

477
00:20:25,559 --> 00:20:31,418
operations<font color="#E5E5E5"> explicitly allowed by the</font>

478
00:20:28,510 --> 00:20:33,760
policy can be<font color="#E5E5E5"> performed on a system in</font>

479
00:20:31,419 --> 00:20:36,010
other words<font color="#E5E5E5"> all the other operations</font>

480
00:20:33,760 --> 00:20:38,919
that<font color="#E5E5E5"> were not defined towards the</font>

481
00:20:36,010 --> 00:20:43,139
objects should never be performed<font color="#E5E5E5"> on the</font>

482
00:20:38,919 --> 00:20:46,000
system<font color="#E5E5E5"> so based on this based on this</font>

483
00:20:43,139 --> 00:20:48,370
implicit assumption we know that an

484
00:20:46,000 --> 00:20:50,860
object may affect<font color="#E5E5E5"> a securing space as</font>

485
00:20:48,370 --> 00:20:52,600
<font color="#E5E5E5">long as that object is visible to that</font>

486
00:20:50,860 --> 00:20:55,059
<font color="#E5E5E5">secure namespace</font><font color="#CCCCCC"> it doesn't really</font>

487
00:20:52,600 --> 00:20:57,309
matter if<font color="#CCCCCC"> the</font><font color="#E5E5E5"> subjects is the invisible</font>

488
00:20:55,059 --> 00:20:59,230
as long as the<font color="#CCCCCC"> object is visible it</font>

489
00:20:57,309 --> 00:21:03,610
still may affect the security<font color="#E5E5E5"> of that</font>

490
00:20:59,230 --> 00:21:05,260
secure namespace so let's take a look<font color="#E5E5E5"> at</font>

491
00:21:03,610 --> 00:21:08,830
<font color="#CCCCCC">the previous attack example I showed</font>

492
00:21:05,260 --> 00:21:11,710
before<font color="#E5E5E5"> so let's assume that we</font><font color="#CCCCCC"> follow</font>

493
00:21:08,830 --> 00:21:13,928
this design and now even<font color="#E5E5E5"> though this</font>

494
00:21:11,710 --> 00:21:16,029
process<font color="#E5E5E5"> from a second the container is</font>

495
00:21:13,929 --> 00:21:18,730
the<font color="#E5E5E5"> invisible to the processes</font><font color="#CCCCCC"> of the</font>

496
00:21:16,029 --> 00:21:21,010
first container<font color="#E5E5E5"> however because they</font>

497
00:21:18,730 --> 00:21:22,539
share<font color="#E5E5E5"> the same file and the first</font>

498
00:21:21,010 --> 00:21:26,019
container<font color="#E5E5E5"> really cares about this file</font>

499
00:21:22,539 --> 00:21:28,330
so all<font color="#CCCCCC"> these operations</font><font color="#E5E5E5"> fall from the</font>

500
00:21:26,019 --> 00:21:30,309
second container to this file needs to

501
00:21:28,330 --> 00:21:32,080
be routed<font color="#CCCCCC"> to the first container for</font>

502
00:21:30,309 --> 00:21:33,820
mediation<font color="#E5E5E5"> in order for the first</font>

503
00:21:32,080 --> 00:21:37,990
container to ensure the<font color="#E5E5E5"> read only</font><font color="#CCCCCC"> needs</font>

504
00:21:33,820 --> 00:21:40,360
of this file so by combining these

505
00:21:37,990 --> 00:21:42,450
subjects of perspective and objects

506
00:21:40,360 --> 00:21:45,340
perspective we<font color="#E5E5E5"> can actually identify</font>

507
00:21:42,450 --> 00:21:47,620
<font color="#E5E5E5">which</font><font color="#CCCCCC"> decree namespace might be affected</font>

508
00:21:45,340 --> 00:21:50,049
by operation and then the security<font color="#E5E5E5"> the</font>

509
00:21:47,620 --> 00:21:51,939
operation router will also operation<font color="#CCCCCC"> to</font>

510
00:21:50,049 --> 00:21:55,840
load secret names<font color="#E5E5E5"> basis that are</font>

511
00:21:51,940 --> 00:21:59,350
affected by the operation so after the

512
00:21:55,840 --> 00:22:01,449
operation<font color="#CCCCCC"> roller rods</font><font color="#E5E5E5"> the operation</font><font color="#CCCCCC"> to</font>

513
00:21:59,350 --> 00:22:02,860
all these<font color="#E5E5E5"> acronyms</font><font color="#CCCCCC"> bases the secret</font>

514
00:22:01,450 --> 00:22:06,809
names<font color="#CCCCCC"> bases make independent decisions</font>

515
00:22:02,860 --> 00:22:10,029
<font color="#E5E5E5">and then these independent decisions are</font>

516
00:22:06,809 --> 00:22:12,490
intersected and only if<font color="#E5E5E5"> all these secret</font>

517
00:22:10,029 --> 00:22:14,200
names<font color="#CCCCCC"> bases allow this operation</font><font color="#E5E5E5"> though</font>

518
00:22:12,490 --> 00:22:16,389
this operation be eventually<font color="#E5E5E5"> allow the</font>

519
00:22:14,200 --> 00:22:19,419
best system this<font color="#E5E5E5"> actually allows us</font><font color="#CCCCCC"> to</font>

520
00:22:16,389 --> 00:22:23,559
<font color="#CCCCCC">relax the mentor assumption of the</font>

521
00:22:19,419 --> 00:22:24,310
framework however<font color="#CCCCCC"> this also cause a</font>

522
00:22:23,559 --> 00:22:28,000
<font color="#E5E5E5">problem</font>

523
00:22:24,310 --> 00:22:30,129
which is<font color="#E5E5E5"> healthy conflicts so because we</font>

524
00:22:28,000 --> 00:22:33,250
because we will intersect the<font color="#E5E5E5"> part of</font>

525
00:22:30,130 --> 00:22:36,010
the decisions this this problem<font color="#CCCCCC"> may</font>

526
00:22:33,250 --> 00:22:37,660
occur<font color="#E5E5E5"> so basically the operation that is</font>

527
00:22:36,010 --> 00:22:40,210
specifically allowed by a container

528
00:22:37,660 --> 00:22:42,130
<font color="#CCCCCC">might be eventually</font><font color="#E5E5E5"> denied because some</font>

529
00:22:40,210 --> 00:22:44,590
<font color="#E5E5E5">other containers are the whole system my</font>

530
00:22:42,130 --> 00:22:47,260
<font color="#E5E5E5">teen idol operation this is really hard</font>

531
00:22:44,590 --> 00:22:49,060
<font color="#CCCCCC">or this is impossibility path between</font>

532
00:22:47,260 --> 00:22:51,700
<font color="#E5E5E5">because the security names based are</font>

533
00:22:49,060 --> 00:22:53,350
actually completely isolated<font color="#CCCCCC"> so</font>

534
00:22:51,700 --> 00:22:55,090
therefore we design this component

535
00:22:53,350 --> 00:22:56,980
called pause the engine which could

536
00:22:55,090 --> 00:22:59,080
basically<font color="#E5E5E5"> detect any form those</font>

537
00:22:56,980 --> 00:23:01,540
potential conflicts<font color="#E5E5E5"> at the policy</font><font color="#CCCCCC"> load</font>

538
00:22:59,080 --> 00:23:04,480
time unfortunately I<font color="#E5E5E5"> won't have time</font><font color="#CCCCCC"> to</font>

539
00:23:01,540 --> 00:23:06,399
go into details of this<font color="#E5E5E5"> policy engine</font>

540
00:23:04,480 --> 00:23:10,270
<font color="#E5E5E5">but please refer to the paper for</font>

541
00:23:06,400 --> 00:23:12,940
details so for<font color="#CCCCCC"> implementation</font><font color="#E5E5E5"> we</font>

542
00:23:10,270 --> 00:23:15,100
implemented<font color="#CCCCCC"> the secret names direction</font>

543
00:23:12,940 --> 00:23:17,050
for to<font color="#CCCCCC"> kernel secret frameworks namely</font>

544
00:23:15,100 --> 00:23:20,080
integrity management architecture<font color="#CCCCCC"> and</font>

545
00:23:17,050 --> 00:23:21,790
<font color="#E5E5E5">app hammer so for Emma</font><font color="#CCCCCC"> it is the one one</font>

546
00:23:20,080 --> 00:23:24,610
<font color="#E5E5E5">point one thousand lines of</font><font color="#CCCCCC"> code in C</font>

547
00:23:21,790 --> 00:23:26,860
and it<font color="#CCCCCC"> is actually open source for</font>

548
00:23:24,610 --> 00:23:29,860
please check the kernel<font color="#CCCCCC"> Dahl</font><font color="#E5E5E5"> arc for</font>

549
00:23:26,860 --> 00:23:31,719
this code for a farmer<font color="#CCCCCC"> namespace it is</font>

550
00:23:29,860 --> 00:23:34,240
about one point five lines of code of in

551
00:23:31,720 --> 00:23:36,970
C and we're<font color="#CCCCCC"> working</font><font color="#E5E5E5"> in progress for open</font>

552
00:23:34,240 --> 00:23:38,650
sourcing it so when interesting aspects

553
00:23:36,970 --> 00:23:41,110
of the<font color="#E5E5E5"> implementation that I want to</font>

554
00:23:38,650 --> 00:23:43,810
highlight<font color="#E5E5E5"> is that in order</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use those</font>

555
00:23:41,110 --> 00:23:46,300
secure<font color="#E5E5E5"> namespaces it's very</font><font color="#CCCCCC"> straight</font>

556
00:23:43,810 --> 00:23:48,310
<font color="#CCCCCC">forward</font><font color="#E5E5E5"> so we only need to change less</font>

557
00:23:46,300 --> 00:23:50,500
<font color="#E5E5E5">than</font><font color="#CCCCCC"> twenty lines</font><font color="#E5E5E5"> of code to</font><font color="#CCCCCC"> the</font>

558
00:23:48,310 --> 00:23:53,290
container<font color="#E5E5E5"> essentially we're only</font>

559
00:23:50,500 --> 00:23:55,090
<font color="#E5E5E5">basically having this two new flag</font><font color="#CCCCCC"> too</font>

560
00:23:53,290 --> 00:23:56,680
<font color="#E5E5E5">long to a clone system call the other</font>

561
00:23:55,090 --> 00:24:01,240
four containers uses to secure

562
00:23:56,680 --> 00:24:04,260
namespaces so to evaluate<font color="#E5E5E5"> this namespace</font>

563
00:24:01,240 --> 00:24:07,240
design<font color="#E5E5E5"> we evaluate from two or</font><font color="#CCCCCC"> spects</font>

564
00:24:04,260 --> 00:24:09,280
aspects the first is effectiveness and

565
00:24:07,240 --> 00:24:10,840
the second is performance for

566
00:24:09,280 --> 00:24:12,879
effectiveness<font color="#E5E5E5"> we measure both</font>

567
00:24:10,840 --> 00:24:15,100
effectiveness of Emma<font color="#CCCCCC"> and apparmor</font>

568
00:24:12,880 --> 00:24:18,340
namespace but I'm only showing a hammer

569
00:24:15,100 --> 00:24:21,820
names based effectiveness here so if you

570
00:24:18,340 --> 00:24:23,800
still remember<font color="#E5E5E5"> this</font><font color="#CCCCCC"> expert I took from</font>

571
00:24:21,820 --> 00:24:25,990
we went<font color="#E5E5E5"> to our exit documentation before</font>

572
00:24:23,800 --> 00:24:28,510
what<font color="#E5E5E5"> this test is basically</font><font color="#CCCCCC"> it's the</font>

573
00:24:25,990 --> 00:24:30,880
<font color="#E5E5E5">impossible</font><font color="#CCCCCC"> 24 suppose the host</font><font color="#E5E5E5"> profile</font>

574
00:24:28,510 --> 00:24:33,010
that protects the host and the<font color="#CCCCCC"> container</font>

575
00:24:30,880 --> 00:24:35,740
<font color="#E5E5E5">profile that protects the container at</font>

576
00:24:33,010 --> 00:24:37,260
the same time what we<font color="#CCCCCC"> want to show is</font>

577
00:24:35,740 --> 00:24:41,280
<font color="#CCCCCC">that by using the F</font>

578
00:24:37,260 --> 00:24:44,220
<font color="#CCCCCC">this is</font><font color="#E5E5E5"> totally possible so we took the</font>

579
00:24:41,280 --> 00:24:46,320
<font color="#CCCCCC">host profiles from we took the both the</font>

580
00:24:44,220 --> 00:24:48,930
host profile<font color="#E5E5E5"> and application profile</font>

581
00:24:46,320 --> 00:24:51,570
from the Ubuntu distribution and we

582
00:24:48,930 --> 00:24:53,220
enforce it at the same<font color="#E5E5E5"> time so what we</font>

583
00:24:51,570 --> 00:24:54,570
found is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> for majority of the</font>

584
00:24:53,220 --> 00:24:56,190
applications that<font color="#E5E5E5"> are deployed in</font>

585
00:24:54,570 --> 00:24:57,960
containers we can<font color="#CCCCCC"> actually</font>

586
00:24:56,190 --> 00:24:59,510
simultaneously enforce both profiles

587
00:24:57,960 --> 00:25:02,880
<font color="#CCCCCC">with no trouble</font>

588
00:24:59,510 --> 00:25:06,660
there are several or<font color="#CCCCCC"> layers there</font><font color="#E5E5E5"> are</font>

589
00:25:02,880 --> 00:25:08,540
few applications<font color="#E5E5E5"> that's how we actually</font>

590
00:25:06,660 --> 00:25:11,430
<font color="#E5E5E5">cannot enforce both profiles</font>

591
00:25:08,540 --> 00:25:13,830
simultaneously and though we our post

592
00:25:11,430 --> 00:25:17,040
engine<font color="#CCCCCC"> actually used conflicts for those</font>

593
00:25:13,830 --> 00:25:18,990
profiles for this cases is<font color="#E5E5E5"> actually the</font>

594
00:25:17,040 --> 00:25:21,930
container wants to allow<font color="#CCCCCC"> something that</font>

595
00:25:18,990 --> 00:25:26,310
a container<font color="#E5E5E5"> host denies so this is the</font>

596
00:25:21,930 --> 00:25:28,170
interesting<font color="#CCCCCC"> so we dig deeper what we</font>

597
00:25:26,310 --> 00:25:30,450
found is that the reason for<font color="#E5E5E5"> this</font>

598
00:25:28,170 --> 00:25:32,970
<font color="#CCCCCC">conflicts is</font><font color="#E5E5E5"> often because the proc the</font>

599
00:25:30,450 --> 00:25:35,730
<font color="#CCCCCC">cyst and dev file systems which</font><font color="#E5E5E5"> are</font>

600
00:25:32,970 --> 00:25:38,190
shared between the container and<font color="#E5E5E5"> the</font>

601
00:25:35,730 --> 00:25:40,140
host operating<font color="#CCCCCC"> system so this file</font>

602
00:25:38,190 --> 00:25:42,570
<font color="#CCCCCC">systems are historically being used as</font>

603
00:25:40,140 --> 00:25:45,900
interfaces between kernel<font color="#E5E5E5"> and user space</font>

604
00:25:42,570 --> 00:25:48,480
<font color="#E5E5E5">so on one hand so many objects under</font><font color="#CCCCCC"> ISM</font>

605
00:25:45,900 --> 00:25:50,880
actually<font color="#CCCCCC"> bricks</font><font color="#E5E5E5"> containerization on</font>

606
00:25:48,480 --> 00:25:53,370
<font color="#CCCCCC">other</font><font color="#E5E5E5"> hand many application need to</font>

607
00:25:50,880 --> 00:25:55,350
<font color="#CCCCCC">access the objects under them</font><font color="#E5E5E5"> so you can</font>

608
00:25:53,370 --> 00:25:56,729
see the conflict<font color="#E5E5E5"> is here so the</font>

609
00:25:55,350 --> 00:25:58,709
container host is really don't want

610
00:25:56,730 --> 00:26:00,660
containers to access some objects under

611
00:25:58,710 --> 00:26:03,330
them but the container the container

612
00:26:00,660 --> 00:26:05,400
<font color="#E5E5E5">eyes application sometimes needs to</font>

613
00:26:03,330 --> 00:26:08,100
understand objects<font color="#E5E5E5"> under this file</font>

614
00:26:05,400 --> 00:26:12,000
systems you know to function so that's

615
00:26:08,100 --> 00:26:13,830
where the conflicts<font color="#E5E5E5"> come from so however</font>

616
00:26:12,000 --> 00:26:17,820
<font color="#E5E5E5">we notice that these conflicts are</font>

617
00:26:13,830 --> 00:26:20,520
totally avoidable<font color="#E5E5E5"> because a lot of lots</font>

618
00:26:17,820 --> 00:26:22,770
of times<font color="#E5E5E5"> this the host policy and the</font>

619
00:26:20,520 --> 00:26:26,040
container policy<font color="#E5E5E5"> are really coarse</font><font color="#CCCCCC"> grin</font>

620
00:26:22,770 --> 00:26:27,540
<font color="#E5E5E5">so if we can fine-tune these policies we</font>

621
00:26:26,040 --> 00:26:30,570
<font color="#CCCCCC">can avoid a large amount of this</font><font color="#E5E5E5"> a</font>

622
00:26:27,540 --> 00:26:33,090
policy conflicts<font color="#E5E5E5"> for example I don't</font>

623
00:26:30,570 --> 00:26:35,159
really<font color="#E5E5E5"> say a case</font><font color="#CCCCCC"> where Firefox need the</font>

624
00:26:33,090 --> 00:26:38,790
arbitrary read<font color="#E5E5E5"> access</font><font color="#CCCCCC"> to anything under</font>

625
00:26:35,160 --> 00:26:40,830
proc<font color="#E5E5E5"> and also we can treat we can treat</font>

626
00:26:38,790 --> 00:26:43,470
<font color="#E5E5E5">this problem from its root by a while</font>

627
00:26:40,830 --> 00:26:44,939
assuring at all so for<font color="#E5E5E5"> example there</font><font color="#CCCCCC"> is</font>

628
00:26:43,470 --> 00:26:47,190
a recent<font color="#CCCCCC"> proposal called device</font>

629
00:26:44,940 --> 00:26:51,149
namespace<font color="#CCCCCC"> which</font><font color="#E5E5E5"> basically isolates the</font>

630
00:26:47,190 --> 00:26:52,889
slash staff and also<font color="#E5E5E5"> we're looking at</font>

631
00:26:51,149 --> 00:26:55,830
directions of can we provide this<font color="#CCCCCC"> the</font>

632
00:26:52,889 --> 00:27:00,418
multi-layer<font color="#CCCCCC"> file system to conceal the</font>

633
00:26:55,830 --> 00:27:03,769
sharing<font color="#CCCCCC"> of the proc so we measure the</font>

634
00:27:00,419 --> 00:27:06,450
performance of the<font color="#CCCCCC"> namespaces by</font>

635
00:27:03,769 --> 00:27:08,399
measuring<font color="#CCCCCC"> how much system correlations</font>

636
00:27:06,450 --> 00:27:11,519
they were<font color="#E5E5E5"> adding to a system call</font>

637
00:27:08,399 --> 00:27:12,959
<font color="#E5E5E5">mediation process so the thing I want to</font>

638
00:27:11,519 --> 00:27:15,599
highlight<font color="#E5E5E5"> here is that for a</font><font color="#CCCCCC"> typical</font>

639
00:27:12,960 --> 00:27:18,330
<font color="#E5E5E5">connect deploy sorry for a typical</font>

640
00:27:15,599 --> 00:27:19,979
container deployment scenario where<font color="#CCCCCC"> you</font>

641
00:27:18,330 --> 00:27:22,889
have a<font color="#E5E5E5"> continual cloud and the container</font>

642
00:27:19,979 --> 00:27:26,519
runs on<font color="#CCCCCC"> that cloud so</font><font color="#E5E5E5"> we only</font><font color="#CCCCCC"> introduce</font>

643
00:27:22,889 --> 00:27:30,119
about<font color="#CCCCCC"> there 0.7% latency overhead</font><font color="#E5E5E5"> to the</font>

644
00:27:26,519 --> 00:27:32,369
<font color="#E5E5E5">system</font><font color="#CCCCCC"> call mediation and for a</font><font color="#E5E5E5"> typical</font>

645
00:27:30,119 --> 00:27:33,928
scenario<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> more names basically</font>

646
00:27:32,369 --> 00:27:36,178
that you<font color="#E5E5E5"> have the</font><font color="#CCCCCC"> rot</font><font color="#E5E5E5"> of operation</font><font color="#CCCCCC"> to</font>

647
00:27:33,929 --> 00:27:39,059
this over<font color="#E5E5E5"> how the basically increases</font>

648
00:27:36,179 --> 00:27:41,999
linearly<font color="#CCCCCC"> but</font><font color="#E5E5E5"> we can we can we</font><font color="#CCCCCC"> can avoid</font>

649
00:27:39,059 --> 00:27:46,139
this<font color="#CCCCCC"> by</font><font color="#E5E5E5"> using some parallelism</font><font color="#CCCCCC"> the</font>

650
00:27:41,999 --> 00:27:47,879
details is<font color="#E5E5E5"> in paper so we also measure</font>

651
00:27:46,139 --> 00:27:49,949
the<font color="#E5E5E5"> application performance when they</font>

652
00:27:47,879 --> 00:27:53,009
are<font color="#CCCCCC"> deployed in</font><font color="#E5E5E5"> the container</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> we want</font>

653
00:27:49,950 --> 00:27:55,169
to measure<font color="#E5E5E5"> the applications prefer when</font>

654
00:27:53,009 --> 00:27:56,969
we are deploying<font color="#E5E5E5"> application we want</font><font color="#CCCCCC"> to</font>

655
00:27:55,169 --> 00:27:59,159
measure<font color="#E5E5E5"> when we have both the</font>

656
00:27:56,969 --> 00:28:01,889
application<font color="#E5E5E5"> profile and the host profile</font>

657
00:27:59,159 --> 00:28:04,379
in place how much do we<font color="#CCCCCC"> affect</font><font color="#E5E5E5"> the</font>

658
00:28:01,889 --> 00:28:07,019
applications performance<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> measured</font>

659
00:28:04,379 --> 00:28:09,689
this web<font color="#E5E5E5"> server throughput the</font><font color="#CCCCCC"> result</font><font color="#E5E5E5"> we</font>

660
00:28:07,019 --> 00:28:12,719
see is that we all will almost<font color="#CCCCCC"> have the</font>

661
00:28:09,690 --> 00:28:15,629
<font color="#E5E5E5">same identical throughput for</font><font color="#CCCCCC"> the web</font>

662
00:28:12,719 --> 00:28:16,889
server<font color="#E5E5E5"> with and without this application</font>

663
00:28:15,629 --> 00:28:19,769
profile<font color="#E5E5E5"> being in first</font>

664
00:28:16,889 --> 00:28:22,468
<font color="#E5E5E5">the reason is twofold first web hammer</font>

665
00:28:19,769 --> 00:28:24,779
isn't<font color="#E5E5E5"> really mediating so many system</font>

666
00:28:22,469 --> 00:28:26,429
calls from the web<font color="#E5E5E5"> server and a second</font>

667
00:28:24,779 --> 00:28:30,869
<font color="#E5E5E5">you know the mediation we</font><font color="#CCCCCC"> introduce</font>

668
00:28:26,429 --> 00:28:33,839
about<font color="#CCCCCC"> there</font><font color="#E5E5E5"> 0.7% overhead and to</font>

669
00:28:30,869 --> 00:28:35,639
<font color="#E5E5E5">summarize so existing containers</font><font color="#CCCCCC"> can all</font>

670
00:28:33,839 --> 00:28:37,580
really leverage kernel secret frameworks

671
00:28:35,639 --> 00:28:40,168
to<font color="#E5E5E5"> apply</font><font color="#CCCCCC"> local security control and</font>

672
00:28:37,580 --> 00:28:41,849
naive way of virtualization<font color="#CCCCCC"> may brick</font>

673
00:28:40,169 --> 00:28:44,460
security<font color="#E5E5E5"> offer the better security</font>

674
00:28:41,849 --> 00:28:46,320
frameworks<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> designed this rotting</font>

675
00:28:44,460 --> 00:28:48,210
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> namespace that preserves</font>

676
00:28:46,320 --> 00:28:50,700
security while making<font color="#CCCCCC"> kernel secret</font>

677
00:28:48,210 --> 00:28:52,409
frameworks available<font color="#CCCCCC"> to containers with</font>

678
00:28:50,700 --> 00:28:55,669
that I<font color="#E5E5E5"> would like to thank you and</font>

679
00:28:52,409 --> 00:28:55,669
welcome any questions

680
00:29:02,190 --> 00:29:07,750
hi<font color="#CCCCCC"> Jenna Chris well University of</font>

681
00:29:04,960 --> 00:29:09,030
Rochester<font color="#E5E5E5"> interesting work one question</font>

682
00:29:07,750 --> 00:29:12,610
I have is<font color="#CCCCCC"> that regarding your</font>

683
00:29:09,030 --> 00:29:14,110
experiments did you try a server where

684
00:29:12,610 --> 00:29:16,510
instead of<font color="#E5E5E5"> having multiple clients you</font>

685
00:29:14,110 --> 00:29:18,310
just have one<font color="#CCCCCC"> client because in our</font>

686
00:29:16,510 --> 00:29:20,590
experiments on<font color="#E5E5E5"> operating system kernel</font>

687
00:29:18,310 --> 00:29:21,669
performance<font color="#CCCCCC"> oftentimes we're running say</font>

688
00:29:20,590 --> 00:29:23,260
a web server<font color="#E5E5E5"> handling multiple</font>

689
00:29:21,670 --> 00:29:24,910
<font color="#E5E5E5">connections the overhead actually isn't</font>

690
00:29:23,260 --> 00:29:27,129
<font color="#E5E5E5">all</font><font color="#CCCCCC"> that much</font><font color="#E5E5E5"> but when</font><font color="#CCCCCC"> we start running</font>

691
00:29:24,910 --> 00:29:29,170
say you know a<font color="#E5E5E5"> single server with a</font>

692
00:29:27,130 --> 00:29:30,400
single client<font color="#E5E5E5"> going as fast as possible</font>

693
00:29:29,170 --> 00:29:32,350
<font color="#E5E5E5">that's typically where we tend</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> see</font>

694
00:29:30,400 --> 00:29:33,820
<font color="#E5E5E5">the overhead so have you have you run</font>

695
00:29:32,350 --> 00:29:35,199
say a server with just a<font color="#CCCCCC"> single</font>

696
00:29:33,820 --> 00:29:37,330
connection<font color="#E5E5E5"> like a</font><font color="#CCCCCC"> cessation</font><font color="#E5E5E5"> that's a</font>

697
00:29:35,200 --> 00:29:39,640
<font color="#CCCCCC">good</font><font color="#E5E5E5"> great point so we actually didn't</font>

698
00:29:37,330 --> 00:29:41,800
include this results in<font color="#E5E5E5"> a paper but yes</font>

699
00:29:39,640 --> 00:29:44,800
<font color="#E5E5E5">so we didn't notice any difference</font>

700
00:29:41,800 --> 00:29:47,830
between<font color="#CCCCCC"> like the latency of</font><font color="#E5E5E5"> HTTP</font><font color="#CCCCCC"> request</font>

701
00:29:44,800 --> 00:29:50,230
<font color="#CCCCCC">I think it's because of</font><font color="#E5E5E5"> the mediation</font>

702
00:29:47,830 --> 00:29:52,270
cost is<font color="#E5E5E5"> there 0.7 percent</font><font color="#CCCCCC"> when the</font>

703
00:29:50,230 --> 00:29:54,760
reflects<font color="#E5E5E5"> in the application level this</font>

704
00:29:52,270 --> 00:29:56,500
<font color="#E5E5E5">is really hard to notice okay I also</font>

705
00:29:54,760 --> 00:29:58,990
noticed that you<font color="#E5E5E5"> show the</font><font color="#CCCCCC"> results for</font><font color="#E5E5E5"> M</font>

706
00:29:56,500 --> 00:30:00,400
map<font color="#E5E5E5"> are you</font><font color="#CCCCCC"> getting</font><font color="#E5E5E5"> the same overheads</font>

707
00:29:58,990 --> 00:30:02,350
<font color="#CCCCCC">for the other system calls like</font><font color="#E5E5E5"> read</font>

708
00:30:00,400 --> 00:30:05,500
<font color="#E5E5E5">write</font><font color="#CCCCCC"> and mile system and whatnot</font><font color="#E5E5E5"> right</font>

709
00:30:02,350 --> 00:30:08,320
<font color="#CCCCCC">actually so for the I'm map and the rate</font>

710
00:30:05,500 --> 00:30:10,360
<font color="#CCCCCC">is a very similar for a</font><font color="#E5E5E5"> rental exact is</font>

711
00:30:08,320 --> 00:30:12,730
actually the performance overhead is

712
00:30:10,360 --> 00:30:14,439
actually even even smaller because the

713
00:30:12,730 --> 00:30:16,720
<font color="#E5E5E5">system volume itself takes a longer time</font>

714
00:30:14,440 --> 00:30:19,450
<font color="#CCCCCC">to complete so the ADI</font><font color="#E5E5E5"> the latency</font>

715
00:30:16,720 --> 00:30:21,630
becomes the even<font color="#E5E5E5"> smaller portion okay</font>

716
00:30:19,450 --> 00:30:24,670
<font color="#E5E5E5">thank you sure</font>

717
00:30:21,630 --> 00:30:27,250
hi cliff sure it is from Leeds Beckett

718
00:30:24,670 --> 00:30:31,420
University in the<font color="#E5E5E5"> UK</font><font color="#CCCCCC"> it's yeah great</font>

719
00:30:27,250 --> 00:30:34,510
work and so the<font color="#E5E5E5"> the examples</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font>

720
00:30:31,420 --> 00:30:37,990
gave<font color="#E5E5E5"> by</font><font color="#CCCCCC"> ima and</font><font color="#E5E5E5"> apartment don't conflict</font>

721
00:30:34,510 --> 00:30:39,790
with<font color="#E5E5E5"> each other</font><font color="#CCCCCC"> okay if you want to</font>

722
00:30:37,990 --> 00:30:42,550
<font color="#E5E5E5">include something like</font><font color="#CCCCCC"> SC Linux like you</font>

723
00:30:39,790 --> 00:30:45,520
<font color="#E5E5E5">included in</font><font color="#CCCCCC"> your slide early slides</font><font color="#E5E5E5"> it's</font>

724
00:30:42,550 --> 00:30:47,379
gonna be much<font color="#CCCCCC"> more complicated and do</font>

725
00:30:45,520 --> 00:30:48,430
you<font color="#E5E5E5"> think that's even possible</font><font color="#CCCCCC"> yeah well</font>

726
00:30:47,380 --> 00:30:51,220
I was<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> waiting for that</font>

727
00:30:48,430 --> 00:30:54,100
<font color="#E5E5E5">questions I have a I have a backup slide</font>

728
00:30:51,220 --> 00:30:55,780
so<font color="#E5E5E5"> we are we did a study in the paper so</font>

729
00:30:54,100 --> 00:30:58,360
trying to find<font color="#E5E5E5"> if this approach is</font>

730
00:30:55,780 --> 00:31:00,399
generalized both with<font color="#CCCCCC"> IC</font><font color="#E5E5E5"> Linux we feel</font>

731
00:30:58,360 --> 00:31:01,629
like this operation in large can be

732
00:31:00,400 --> 00:31:04,480
applied but there are two specific

733
00:31:01,630 --> 00:31:07,120
<font color="#E5E5E5">challenges the first</font><font color="#CCCCCC"> is that as a</font><font color="#E5E5E5"> linux</font>

734
00:31:04,480 --> 00:31:08,890
involves<font color="#CCCCCC"> file system labeling so and the</font>

735
00:31:07,120 --> 00:31:09,309
sub that means the subjects<font color="#E5E5E5"> and objects</font>

736
00:31:08,890 --> 00:31:11,860
will have

737
00:31:09,309 --> 00:31:14,168
multiple labels<font color="#E5E5E5"> in this case and</font><font color="#CCCCCC"> that</font>

738
00:31:11,860 --> 00:31:15,939
<font color="#E5E5E5">means multiple security bills and rent a</font>

739
00:31:14,169 --> 00:31:19,179
manipulation of security bills<font color="#CCCCCC"> without</font><font color="#E5E5E5"> a</font>

740
00:31:15,940 --> 00:31:20,970
<font color="#E5E5E5">reboot so based on</font><font color="#CCCCCC"> our discussion with</font>

741
00:31:19,179 --> 00:31:25,240
<font color="#E5E5E5">the kernel community they don't like it</font>

742
00:31:20,970 --> 00:31:27,279
<font color="#E5E5E5">no I'd imagine not</font><font color="#CCCCCC"> rights okay guess</font>

743
00:31:25,240 --> 00:31:29,350
that they<font color="#E5E5E5"> also if you've got multiple</font>

744
00:31:27,279 --> 00:31:31,059
instances basically in the next<font color="#CCCCCC"> hour</font>

745
00:31:29,350 --> 00:31:34,719
<font color="#CCCCCC">selinux and</font><font color="#E5E5E5"> a palmer they've got like</font>

746
00:31:31,059 --> 00:31:37,658
different<font color="#E5E5E5"> the data structures that</font><font color="#CCCCCC"> they</font>

747
00:31:34,720 --> 00:31:39,940
share and<font color="#E5E5E5"> and even within the learning</font>

748
00:31:37,659 --> 00:31:42,129
security like<font color="#E5E5E5"> kernel community those</font>

749
00:31:39,940 --> 00:31:44,019
arguments<font color="#E5E5E5"> of even whether or not you</font>

750
00:31:42,129 --> 00:31:47,139
<font color="#E5E5E5">could</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> a Palmer and</font><font color="#CCCCCC"> selinux on the</font>

751
00:31:44,019 --> 00:31:49,450
same machine<font color="#CCCCCC"> in multiple</font><font color="#E5E5E5"> instances for</font>

752
00:31:47,139 --> 00:31:51,309
each container<font color="#E5E5E5"> right well I</font><font color="#CCCCCC"> think it's a</font>

753
00:31:49,450 --> 00:31:53,950
really<font color="#E5E5E5"> great idea it's like this it's</font>

754
00:31:51,309 --> 00:31:55,690
<font color="#CCCCCC">very</font><font color="#E5E5E5"> quickly becomes intractable so it's</font>

755
00:31:53,950 --> 00:31:57,970
I guess that's the<font color="#E5E5E5"> reason</font><font color="#CCCCCC"> it's just</font><font color="#E5E5E5"> too</font>

756
00:31:55,690 --> 00:31:59,470
complex so<font color="#CCCCCC"> that</font><font color="#E5E5E5"> current community feels</font>

757
00:31:57,970 --> 00:32:02,049
like a simpler the better

758
00:31:59,470 --> 00:32:03,789
<font color="#E5E5E5">so I mean one option would just be</font>

759
00:32:02,049 --> 00:32:06,730
<font color="#E5E5E5">sticking</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> a farmer</font><font color="#CCCCCC"> four containers</font>

760
00:32:03,789 --> 00:32:09,600
<font color="#E5E5E5">yes at least it's a simpler</font><font color="#CCCCCC"> problem yeah</font>

761
00:32:06,730 --> 00:32:09,600
<font color="#E5E5E5">yeah thank you</font>

