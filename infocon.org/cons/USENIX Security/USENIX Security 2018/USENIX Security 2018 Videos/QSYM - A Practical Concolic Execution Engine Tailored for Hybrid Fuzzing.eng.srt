1
00:00:10,960 --> 00:00:16,240
hello everyone today<font color="#CCCCCC"> I gonna talk</font><font color="#E5E5E5"> about</font>

2
00:00:13,870 --> 00:00:18,400
<font color="#E5E5E5">the kissing a practical can colleague</font>

3
00:00:16,239 --> 00:00:20,788
execution engine<font color="#CCCCCC"> tailor for</font><font color="#E5E5E5"> high birth</font>

4
00:00:18,400 --> 00:00:24,668
<font color="#E5E5E5">as a this is</font><font color="#CCCCCC"> joint work with my</font>

5
00:00:20,789 --> 00:00:26,880
<font color="#CCCCCC">colleague Sangolli monsoon and</font><font color="#E5E5E5"> professor</font>

6
00:00:24,669 --> 00:00:30,189
<font color="#CCCCCC">test came from Georgia Tech</font><font color="#E5E5E5"> and</font>

7
00:00:26,880 --> 00:00:32,879
<font color="#E5E5E5">professor Jung Jin</font><font color="#CCCCCC"> Jong from Oregon</font>

8
00:00:30,189 --> 00:00:35,860
State<font color="#E5E5E5"> University</font>

9
00:00:32,879 --> 00:00:38,410
as you might know there are two popular

10
00:00:35,860 --> 00:00:43,019
<font color="#E5E5E5">ways</font><font color="#CCCCCC"> to find security</font><font color="#E5E5E5"> bugs</font><font color="#CCCCCC"> fuzzing</font><font color="#E5E5E5"> and</font>

11
00:00:38,410 --> 00:00:45,809
calculating execution those two

12
00:00:43,019 --> 00:00:48,460
techniques have their own pros and<font color="#E5E5E5"> cons</font>

13
00:00:45,809 --> 00:00:50,919
first fuzzing which randomly generates

14
00:00:48,460 --> 00:00:53,769
<font color="#E5E5E5">the input it is good for</font><font color="#CCCCCC"> finding some</font>

15
00:00:50,920 --> 00:00:56,170
general inputs but it is bad<font color="#E5E5E5"> at finding</font>

16
00:00:53,769 --> 00:01:00,010
some specific<font color="#CCCCCC"> inputs which are</font><font color="#E5E5E5"> highly</font>

17
00:00:56,170 --> 00:01:02,260
constrained in<font color="#CCCCCC"> concolor execution is</font>

18
00:01:00,010 --> 00:01:04,298
good for finding<font color="#E5E5E5"> such kinds of input</font>

19
00:01:02,260 --> 00:01:10,090
<font color="#E5E5E5">that it has fundamental problem called</font>

20
00:01:04,299 --> 00:01:12,100
state<font color="#CCCCCC"> explodin highbury fuzzing can</font>

21
00:01:10,090 --> 00:01:14,590
address this issue by combining these

22
00:01:12,100 --> 00:01:17,740
two techniques it<font color="#E5E5E5"> can find that those</font>

23
00:01:14,590 --> 00:01:21,370
kinds of<font color="#E5E5E5"> like specific inputs using</font>

24
00:01:17,740 --> 00:01:24,850
<font color="#E5E5E5">calculated execution and it can limit</font>

25
00:01:21,370 --> 00:01:27,790
<font color="#E5E5E5">state explosion by by limiting forking</font>

26
00:01:24,850 --> 00:01:33,908
at only the branches which are hard for

27
00:01:27,790 --> 00:01:36,370
fuzzing hybrid fuzzing has achieved

28
00:01:33,909 --> 00:01:39,610
great<font color="#CCCCCC"> success in the small-scale study</font>

29
00:01:36,370 --> 00:01:43,840
for example<font color="#E5E5E5"> the driller which is one of</font>

30
00:01:39,610 --> 00:01:46,750
the state of heart<font color="#E5E5E5"> hybrid fuzzy it won</font>

31
00:01:43,840 --> 00:01:48,490
the third place<font color="#CCCCCC"> in CGC competition which</font>

32
00:01:46,750 --> 00:01:50,500
is<font color="#E5E5E5"> the competition</font><font color="#CCCCCC"> that made the</font>

33
00:01:48,490 --> 00:01:53,169
automatic<font color="#CCCCCC"> system for finding bugs and</font>

34
00:01:50,500 --> 00:01:56,409
<font color="#E5E5E5">exploitation it found the six new</font>

35
00:01:53,170 --> 00:01:59,290
crashes from<font color="#E5E5E5"> the cgc competition which</font>

36
00:01:56,409 --> 00:02:04,810
cannot be<font color="#CCCCCC"> found by neither fuzzing</font><font color="#E5E5E5"> or</font>

37
00:01:59,290 --> 00:02:07,390
the<font color="#CCCCCC"> Conkling execution however if we</font>

38
00:02:04,810 --> 00:02:09,580
apply this<font color="#CCCCCC"> current hybrid fuzzing</font><font color="#E5E5E5"> it</font>

39
00:02:07,390 --> 00:02:12,549
suffers from<font color="#CCCCCC"> many problems to scale to</font>

40
00:02:09,580 --> 00:02:15,190
<font color="#E5E5E5">real-world software first it is very</font>

41
00:02:12,549 --> 00:02:17,650
<font color="#E5E5E5">slow to generate</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> constraint a second</font>

42
00:02:15,190 --> 00:02:20,379
<font color="#E5E5E5">it cannot support complete system code</font>

43
00:02:17,650 --> 00:02:23,049
which is essential for supporting the

44
00:02:20,379 --> 00:02:24,609
real<font color="#CCCCCC"> world software a third it is</font><font color="#E5E5E5"> not</font>

45
00:02:23,049 --> 00:02:29,890
effective in<font color="#E5E5E5"> January</font>

46
00:02:24,610 --> 00:02:31,300
in test cases<font color="#CCCCCC"> so our system Kusum can</font>

47
00:02:29,890 --> 00:02:34,149
address this issue by introducing

48
00:02:31,300 --> 00:02:36,220
<font color="#E5E5E5">several</font><font color="#CCCCCC"> key ideas first we discard</font>

49
00:02:34,150 --> 00:02:39,580
intermediate layer which is<font color="#E5E5E5"> the one of</font>

50
00:02:36,220 --> 00:02:41,710
<font color="#CCCCCC">the performance</font><font color="#E5E5E5"> bottle ID in current con</font>

51
00:02:39,580 --> 00:02:44,320
<font color="#CCCCCC">college execution for symbol for</font>

52
00:02:41,710 --> 00:02:47,020
hybridizing<font color="#E5E5E5"> a second we use concrete</font>

53
00:02:44,320 --> 00:02:49,450
environment to support<font color="#E5E5E5"> system calls and</font>

54
00:02:47,020 --> 00:02:51,730
third we<font color="#CCCCCC"> introduce several heuristics</font><font color="#E5E5E5"> to</font>

55
00:02:49,450 --> 00:02:59,200
<font color="#CCCCCC">efficient</font><font color="#E5E5E5"> to generate test cases for</font>

56
00:02:51,730 --> 00:03:01,660
highbury fuzzing<font color="#CCCCCC"> the q scene is really</font>

57
00:02:59,200 --> 00:03:03,459
<font color="#E5E5E5">scaled to the</font><font color="#CCCCCC"> real were soft where we</font>

58
00:03:01,660 --> 00:03:08,020
found the third<font color="#E5E5E5"> team previously</font><font color="#CCCCCC"> known</font>

59
00:03:03,459 --> 00:03:10,780
bugs in open source<font color="#CCCCCC"> software</font><font color="#E5E5E5"> and all we</font>

60
00:03:08,020 --> 00:03:15,250
want<font color="#E5E5E5"> to note</font><font color="#CCCCCC"> that all applications</font><font color="#E5E5E5"> are</font>

61
00:03:10,780 --> 00:03:17,290
already<font color="#E5E5E5"> first by</font><font color="#CCCCCC"> AFL or OSS first the</font>

62
00:03:15,250 --> 00:03:21,130
<font color="#CCCCCC">bucket that we found including</font><font color="#E5E5E5"> the bug</font>

63
00:03:17,290 --> 00:03:24,030
in a ffmpeg<font color="#E5E5E5"> is which is being</font><font color="#CCCCCC"> fast by</font>

64
00:03:21,130 --> 00:03:26,680
<font color="#E5E5E5">the OSS fuzz for more than two years and</font>

65
00:03:24,030 --> 00:03:29,019
these<font color="#E5E5E5"> bugs are hard to find</font>

66
00:03:26,680 --> 00:03:35,799
by fuzzing because it required some

67
00:03:29,019 --> 00:03:38,440
complex constraint<font color="#E5E5E5"> to find this box so</font>

68
00:03:35,799 --> 00:03:41,230
before we before<font color="#E5E5E5"> we jump to there like</font>

69
00:03:38,440 --> 00:03:44,910
<font color="#CCCCCC">Kasim I want to introduce hybrid footing</font>

70
00:03:41,230 --> 00:03:47,649
in general<font color="#E5E5E5"> so in the program it</font>

71
00:03:44,910 --> 00:03:50,019
<font color="#E5E5E5">programmed it extracted base block and</font>

72
00:03:47,650 --> 00:03:52,120
it converts its base belonging to the

73
00:03:50,019 --> 00:03:53,549
intermediate representations<font color="#E5E5E5"> for</font>

74
00:03:52,120 --> 00:03:55,780
simplicity

75
00:03:53,549 --> 00:03:59,530
after it generated intermediate

76
00:03:55,780 --> 00:04:01,540
<font color="#E5E5E5">intermediate representations it generate</font>

77
00:03:59,530 --> 00:04:03,910
while executing intermediate

78
00:04:01,540 --> 00:04:07,660
representation it generated constraints

79
00:04:03,910 --> 00:04:10,269
and it also<font color="#CCCCCC"> fork in some states unlike</font>

80
00:04:07,660 --> 00:04:13,630
classical<font color="#CCCCCC"> control</font><font color="#E5E5E5"> execution</font><font color="#CCCCCC"> when it fork</font>

81
00:04:10,269 --> 00:04:16,149
<font color="#E5E5E5">it gets the information</font><font color="#CCCCCC"> from the buzzing</font>

82
00:04:13,630 --> 00:04:20,829
for<font color="#E5E5E5"> the code coverage and decide whether</font>

83
00:04:16,149 --> 00:04:22,870
it wants<font color="#CCCCCC"> to working or not</font><font color="#E5E5E5"> and after it</font>

84
00:04:20,829 --> 00:04:25,000
gets the constraint is solved this

85
00:04:22,870 --> 00:04:27,520
constraint using<font color="#CCCCCC"> constraints</font><font color="#E5E5E5"> over in the</font>

86
00:04:25,000 --> 00:04:33,760
<font color="#CCCCCC">January test cases</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> defeat these</font><font color="#E5E5E5"> test</font>

87
00:04:27,520 --> 00:04:35,560
<font color="#E5E5E5">cases back</font><font color="#CCCCCC"> to the present</font><font color="#E5E5E5"> there are</font>

88
00:04:33,760 --> 00:04:36,969
several problems in<font color="#E5E5E5"> this design first</font>

89
00:04:35,560 --> 00:04:38,440
one is that<font color="#CCCCCC"> the intermediate</font>

90
00:04:36,970 --> 00:04:40,630
representation

91
00:04:38,440 --> 00:04:42,700
<font color="#E5E5E5">intermediate representation currently</font>

92
00:04:40,630 --> 00:04:44,440
introduced significant<font color="#CCCCCC"> performance</font>

93
00:04:42,700 --> 00:04:49,900
overhead<font color="#CCCCCC"> they're slowed down the this</font>

94
00:04:44,440 --> 00:04:52,420
hybrid<font color="#E5E5E5"> fighting a lot to mitigate this</font>

95
00:04:49,900 --> 00:04:54,640
<font color="#CCCCCC">cue</font><font color="#E5E5E5"> seem directly generate constraint</font>

96
00:04:52,420 --> 00:04:59,880
<font color="#E5E5E5">instead of using the intermediate</font>

97
00:04:54,640 --> 00:05:03,520
representation<font color="#E5E5E5"> and remove this layer and</font>

98
00:04:59,880 --> 00:05:05,770
the second is state<font color="#E5E5E5"> working state</font><font color="#CCCCCC"> to 14</font>

99
00:05:03,520 --> 00:05:10,960
introduces<font color="#CCCCCC"> several problems</font><font color="#E5E5E5"> in the</font>

100
00:05:05,770 --> 00:05:12,969
environment modeling so<font color="#E5E5E5"> therefore</font>

101
00:05:10,960 --> 00:05:15,090
instead<font color="#E5E5E5"> of working we use the concrete</font>

102
00:05:12,970 --> 00:05:22,000
environment modeling to support

103
00:05:15,090 --> 00:05:23,770
<font color="#CCCCCC">completed system</font><font color="#E5E5E5"> calls and third when we</font>

104
00:05:22,000 --> 00:05:26,500
<font color="#CCCCCC">generate the test cases from the</font>

105
00:05:23,770 --> 00:05:32,979
constraints there is<font color="#CCCCCC"> inefficiency</font><font color="#E5E5E5"> come</font>

106
00:05:26,500 --> 00:05:35,080
from the unsatisfiable<font color="#CCCCCC"> pathways so q</font>

107
00:05:32,980 --> 00:05:37,540
<font color="#E5E5E5">seem currently optimistically solve some</font>

108
00:05:35,080 --> 00:05:45,190
solve<font color="#E5E5E5"> this constraint to generate useful</font>

109
00:05:37,540 --> 00:05:47,260
<font color="#E5E5E5">test cases for fuzzing</font><font color="#CCCCCC"> and finally</font><font color="#E5E5E5"> this</font>

110
00:05:45,190 --> 00:05:49,300
constraint to generation can be<font color="#E5E5E5"> blocked</font>

111
00:05:47,260 --> 00:05:52,360
by the some complex logics like a

112
00:05:49,300 --> 00:05:58,900
<font color="#E5E5E5">compression or decompression or the</font>

113
00:05:52,360 --> 00:06:01,060
encryption<font color="#CCCCCC"> or decryption QC amuses</font>

114
00:05:58,900 --> 00:06:04,450
baseball<font color="#CCCCCC"> a pruning</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> handle this issue</font>

115
00:06:01,060 --> 00:06:06,700
<font color="#E5E5E5">but due to the</font><font color="#CCCCCC"> time limit in this</font>

116
00:06:04,450 --> 00:06:13,360
presentation<font color="#E5E5E5"> I will now cover this so</font>

117
00:06:06,700 --> 00:06:16,330
please<font color="#E5E5E5"> refer</font><font color="#CCCCCC"> our paper for detail the</font>

118
00:06:13,360 --> 00:06:18,520
first I would<font color="#CCCCCC"> like to talk about the</font>

119
00:06:16,330 --> 00:06:23,200
performance overhead<font color="#E5E5E5"> introduced by these</font>

120
00:06:18,520 --> 00:06:25,510
intermediate representations so people

121
00:06:23,200 --> 00:06:28,650
use intermediate representation because

122
00:06:25,510 --> 00:06:32,020
<font color="#E5E5E5">is because</font><font color="#CCCCCC"> they are good</font><font color="#E5E5E5"> to make</font>

123
00:06:28,650 --> 00:06:34,750
implementation<font color="#E5E5E5"> easier so it</font><font color="#CCCCCC"> provides a</font>

124
00:06:32,020 --> 00:06:36,909
architecture<font color="#CCCCCC"> independent</font><font color="#E5E5E5"> abstraction and</font>

125
00:06:34,750 --> 00:06:40,090
<font color="#CCCCCC">we can reuse code for the or</font>

126
00:06:36,910 --> 00:06:43,180
architectures for<font color="#CCCCCC"> example anger it works</font>

127
00:06:40,090 --> 00:06:49,090
on<font color="#E5E5E5"> many architectures including x86 arm</font>

128
00:06:43,180 --> 00:06:52,300
and MIPS<font color="#E5E5E5"> but</font><font color="#CCCCCC"> ir incurs a significant</font>

129
00:06:49,090 --> 00:06:54,878
performance overhead first the reason<font color="#CCCCCC"> is</font>

130
00:06:52,300 --> 00:06:57,819
<font color="#E5E5E5">it increased the number of sign of</font>

131
00:06:54,879 --> 00:07:00,280
instructions in our evaluation<font color="#CCCCCC"> the backs</font>

132
00:06:57,819 --> 00:07:03,009
which<font color="#E5E5E5"> is the eye are used by anger it</font>

133
00:07:00,280 --> 00:07:06,099
increased the number of<font color="#E5E5E5"> instruction by</font>

134
00:07:03,009 --> 00:07:09,639
four<font color="#E5E5E5"> times seven</font><font color="#CCCCCC"> up four times seven</font>

135
00:07:06,099 --> 00:07:11,500
<font color="#CCCCCC">times four point seven times and we need</font>

136
00:07:09,639 --> 00:07:13,960
to execute<font color="#E5E5E5"> a whole base block</font>

137
00:07:11,500 --> 00:07:15,729
symbolically<font color="#E5E5E5"> the reason is that</font><font color="#CCCCCC"> there</font>

138
00:07:13,960 --> 00:07:17,650
like because of<font color="#E5E5E5"> the caching and</font>

139
00:07:15,729 --> 00:07:20,258
<font color="#E5E5E5">optimization when generating that this</font>

140
00:07:17,650 --> 00:07:21,789
intermediate representation<font color="#E5E5E5"> but the</font>

141
00:07:20,259 --> 00:07:24,639
problem is<font color="#E5E5E5"> that the only</font><font color="#CCCCCC"> thirty</font><font color="#E5E5E5"> percent</font>

142
00:07:21,789 --> 00:07:27,250
of these instructions<font color="#CCCCCC"> need to be</font>

143
00:07:24,639 --> 00:07:29,889
<font color="#E5E5E5">executed symbolically</font><font color="#CCCCCC"> so we need to</font>

144
00:07:27,250 --> 00:07:32,199
<font color="#CCCCCC">execute</font><font color="#E5E5E5"> like a</font><font color="#CCCCCC"> 70 more 70 percent more</font>

145
00:07:29,889 --> 00:07:37,569
<font color="#E5E5E5">instruction which do</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> have to be</font>

146
00:07:32,199 --> 00:07:40,659
<font color="#E5E5E5">executed symbolically</font><font color="#CCCCCC"> so solution for</font>

147
00:07:37,569 --> 00:07:43,180
that<font color="#CCCCCC"> QC is execute the instructions</font>

148
00:07:40,659 --> 00:07:46,620
directly<font color="#E5E5E5"> without</font><font color="#CCCCCC"> using this intermediate</font>

149
00:07:43,180 --> 00:07:49,960
layer<font color="#E5E5E5"> yes we have to pay this</font>

150
00:07:46,620 --> 00:07:52,449
<font color="#E5E5E5">implementation complexity but we are we</font>

151
00:07:49,960 --> 00:07:56,258
<font color="#CCCCCC">are willing</font><font color="#E5E5E5"> to pay this implementation</font>

152
00:07:52,449 --> 00:07:56,889
complexity for<font color="#E5E5E5"> our performance as a</font>

153
00:07:56,259 --> 00:07:59,380
result

154
00:07:56,889 --> 00:07:59,979
<font color="#E5E5E5">Kusum reduces the number of</font><font color="#CCCCCC"> instructions</font>

155
00:07:59,380 --> 00:08:02,770
a lot

156
00:07:59,979 --> 00:08:08,529
we tested QC<font color="#E5E5E5"> and driller which is one of</font>

157
00:08:02,770 --> 00:08:11,680
<font color="#CCCCCC">the state of art library</font><font color="#E5E5E5"> father in 126</font>

158
00:08:08,529 --> 00:08:15,690
<font color="#CCCCCC">ECC</font><font color="#E5E5E5"> binaries Kusum needs to execute four</font>

159
00:08:11,680 --> 00:08:15,690
times less instructions than driller

160
00:08:16,830 --> 00:08:23,050
second one<font color="#E5E5E5"> is that the incomplete</font>

161
00:08:20,949 --> 00:08:27,550
environment modeling due to the state of

162
00:08:23,050 --> 00:08:31,150
working state of working is good because

163
00:08:27,550 --> 00:08:33,669
it can reduce<font color="#E5E5E5"> the re-execute overhead</font>

164
00:08:31,150 --> 00:08:36,578
for constraint<font color="#E5E5E5"> to generation so</font><font color="#CCCCCC"> if you</font>

165
00:08:33,669 --> 00:08:38,708
want<font color="#E5E5E5"> to reach some state you don't have</font>

166
00:08:36,578 --> 00:08:43,059
to react<font color="#CCCCCC"> ute you can just recover from</font>

167
00:08:38,708 --> 00:08:45,760
the snapshot<font color="#E5E5E5"> but the problem is that</font>

168
00:08:43,059 --> 00:08:47,529
this state<font color="#CCCCCC"> of routine is non-trivial</font><font color="#E5E5E5"> so</font>

169
00:08:45,760 --> 00:08:50,170
state<font color="#CCCCCC"> income college institution can be</font>

170
00:08:47,529 --> 00:08:52,630
<font color="#CCCCCC">divided into two programs data and</font>

171
00:08:50,170 --> 00:08:54,279
<font color="#CCCCCC">kernel state fourteen program</font><font color="#E5E5E5"> state is</font>

172
00:08:52,630 --> 00:08:57,519
trivial you can save with memory

173
00:08:54,279 --> 00:08:59,980
register and<font color="#E5E5E5"> constraints but</font><font color="#CCCCCC"> 14 kernel</font>

174
00:08:57,519 --> 00:09:02,050
<font color="#CCCCCC">state is non-trivial</font><font color="#E5E5E5"> because you need to</font>

175
00:08:59,980 --> 00:09:04,410
maintain<font color="#E5E5E5"> all the candidate test</font>

176
00:09:02,050 --> 00:09:06,540
structures such as<font color="#E5E5E5"> file system net</font>

177
00:09:04,410 --> 00:09:11,879
<font color="#E5E5E5">State and the memory system and those</font>

178
00:09:06,540 --> 00:09:16,019
kinds of<font color="#E5E5E5"> things</font><font color="#CCCCCC"> so to handle</font><font color="#E5E5E5"> those there</font>

179
00:09:11,879 --> 00:09:18,050
are two main ways<font color="#CCCCCC"> to handle</font><font color="#E5E5E5"> this state</font>

180
00:09:16,019 --> 00:09:21,170
<font color="#E5E5E5">of working in kernel but they have</font>

181
00:09:18,050 --> 00:09:24,209
problems<font color="#E5E5E5"> in either completeness or</font>

182
00:09:21,170 --> 00:09:26,519
performance for<font color="#E5E5E5"> example kind of modeling</font>

183
00:09:24,209 --> 00:09:31,128
which is used by anger<font color="#CCCCCC"> it</font><font color="#E5E5E5"> model the</font>

184
00:09:26,519 --> 00:09:33,720
corner functions it provides<font color="#E5E5E5"> the small</font>

185
00:09:31,129 --> 00:09:35,629
performance<font color="#CCCCCC"> overhead but the problem is</font>

186
00:09:33,720 --> 00:09:37,800
<font color="#E5E5E5">that the it</font><font color="#CCCCCC"> cost incompleteness</font>

187
00:09:35,629 --> 00:09:40,910
<font color="#E5E5E5">currently</font><font color="#CCCCCC"> anger can support only a</font>

188
00:09:37,800 --> 00:09:44,339
limited number<font color="#CCCCCC"> of system calls</font><font color="#E5E5E5"> in Linux</font>

189
00:09:40,910 --> 00:09:47,910
second one is<font color="#CCCCCC"> Africana emulation</font><font color="#E5E5E5"> like I</font>

190
00:09:44,339 --> 00:09:50,639
<font color="#E5E5E5">used in s3</font><font color="#CCCCCC"> it treats like Conner as a</font>

191
00:09:47,910 --> 00:09:53,879
program so it provides<font color="#CCCCCC"> the completeness</font>

192
00:09:50,639 --> 00:09:57,180
<font color="#E5E5E5">but since we need to execute currently</font>

193
00:09:53,879 --> 00:10:03,120
symbolically so<font color="#CCCCCC"> lower it introduced</font><font color="#E5E5E5"> a</font>

194
00:09:57,180 --> 00:10:05,758
large performance overhead so to resolve

195
00:10:03,120 --> 00:10:07,259
this issue<font color="#CCCCCC"> we use the re execution</font>

196
00:10:05,759 --> 00:10:10,350
instead of state<font color="#CCCCCC"> forking</font>

197
00:10:07,259 --> 00:10:12,569
we know it will introduce the high<font color="#CCCCCC"> reax</font>

198
00:10:10,350 --> 00:10:14,459
occasion overhead<font color="#E5E5E5"> but we can reduce this</font>

199
00:10:12,569 --> 00:10:16,709
<font color="#CCCCCC">pairi execution over</font><font color="#E5E5E5"> it by using</font>

200
00:10:14,459 --> 00:10:19,888
instruction level execution and the base

201
00:10:16,709 --> 00:10:21,599
block printing and the we also can limit

202
00:10:19,889 --> 00:10:23,699
the constraints of solving<font color="#CCCCCC"> because we</font>

203
00:10:21,600 --> 00:10:25,410
are in the<font color="#CCCCCC"> hybridizing so we can limit</font>

204
00:10:23,699 --> 00:10:32,279
the<font color="#E5E5E5"> constraint solving based on the</font>

205
00:10:25,410 --> 00:10:35,189
coverage<font color="#CCCCCC"> information from fuzzing so QC</font>

206
00:10:32,279 --> 00:10:40,949
only models minimal system<font color="#E5E5E5"> calls related</font>

207
00:10:35,189 --> 00:10:43,709
<font color="#CCCCCC">to</font><font color="#E5E5E5"> the user interactions for example the</font>

208
00:10:40,949 --> 00:10:47,069
<font color="#E5E5E5">standard input or file read or network</font>

209
00:10:43,709 --> 00:10:49,529
interface<font color="#E5E5E5"> in the if there are other</font>

210
00:10:47,069 --> 00:10:52,949
system calls then we call system call

211
00:10:49,529 --> 00:10:54,660
using<font color="#CCCCCC"> the concrete values so for example</font>

212
00:10:52,949 --> 00:10:57,959
if we have and protect with<font color="#E5E5E5"> the symbolic</font>

213
00:10:54,660 --> 00:11:02,360
size that we use the we converted the

214
00:10:57,959 --> 00:11:02,359
concrete size and<font color="#CCCCCC"> called this function</font>

215
00:11:04,459 --> 00:11:10,430
the problem of this<font color="#E5E5E5"> concrete environment</font>

216
00:11:07,350 --> 00:11:13,649
is that<font color="#E5E5E5"> there like it can result in some</font>

217
00:11:10,430 --> 00:11:15,630
<font color="#E5E5E5">incomplete constraints for example</font><font color="#CCCCCC"> if we</font>

218
00:11:13,649 --> 00:11:18,060
convert this<font color="#CCCCCC"> and protect</font><font color="#E5E5E5"> with the</font>

219
00:11:15,630 --> 00:11:21,480
symbolic size to the concrete size<font color="#CCCCCC"> then</font>

220
00:11:18,060 --> 00:11:23,719
it will add some<font color="#CCCCCC"> implicit constraint so</font>

221
00:11:21,480 --> 00:11:26,520
without<font color="#CCCCCC"> knowing the semantics of</font><font color="#E5E5E5"> this</font>

222
00:11:23,720 --> 00:11:29,010
<font color="#CCCCCC">consistent</font><font color="#E5E5E5"> cost then we</font><font color="#CCCCCC"> have only two</font>

223
00:11:26,520 --> 00:11:31,500
choice for concretize this<font color="#E5E5E5"> value which</font>

224
00:11:29,010 --> 00:11:34,290
result in the<font color="#E5E5E5"> over constraint or we just</font>

225
00:11:31,500 --> 00:11:36,630
ignore this value and<font color="#E5E5E5"> that we will like</font>

226
00:11:34,290 --> 00:11:41,610
a suffer from the under constraint

227
00:11:36,630 --> 00:11:44,250
problem to<font color="#E5E5E5"> resolve this issue</font><font color="#CCCCCC"> to amuse</font>

228
00:11:41,610 --> 00:11:47,040
unrelated constraint elimination which

229
00:11:44,250 --> 00:11:48,840
is the<font color="#E5E5E5"> classical optimization for a</font>

230
00:11:47,040 --> 00:11:52,469
constraint to eliminate a constraint

231
00:11:48,840 --> 00:11:54,900
constraint to solving this constraint is

232
00:11:52,470 --> 00:11:56,510
all<font color="#CCCCCC"> relate to</font><font color="#E5E5E5"> concentrate to elimination</font>

233
00:11:54,900 --> 00:11:59,699
on<font color="#E5E5E5"> these of the</font>

234
00:11:56,510 --> 00:12:02,400
constraint<font color="#E5E5E5"> related to the branch so for</font>

235
00:11:59,700 --> 00:12:05,550
<font color="#E5E5E5">example like there is a sample program</font>

236
00:12:02,400 --> 00:12:08,310
which get x and<font color="#E5E5E5"> y as an input and</font><font color="#CCCCCC"> equal</font>

237
00:12:05,550 --> 00:12:12,959
and protect with<font color="#CCCCCC"> ax which result in the</font>

238
00:12:08,310 --> 00:12:16,530
<font color="#E5E5E5">incomplete constraint for X if we if</font><font color="#CCCCCC"> we</font>

239
00:12:12,960 --> 00:12:18,750
hit the last branch<font color="#E5E5E5"> then the the path</font>

240
00:12:16,530 --> 00:12:21,030
constraint will<font color="#CCCCCC"> be the constraints for X</font>

241
00:12:18,750 --> 00:12:24,660
and the constraint<font color="#E5E5E5"> 2 for</font><font color="#CCCCCC"> y in</font><font color="#E5E5E5"> that case</font>

242
00:12:21,030 --> 00:12:27,390
constraint for<font color="#CCCCCC"> ax is incomplete but if</font>

243
00:12:24,660 --> 00:12:29,640
we extract only the<font color="#E5E5E5"> branch dependent</font>

244
00:12:27,390 --> 00:12:33,180
constraint<font color="#E5E5E5"> then the constraint will</font><font color="#CCCCCC"> be</font>

245
00:12:29,640 --> 00:12:35,069
the constraint<font color="#E5E5E5"> only related</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> Y and we</font>

246
00:12:33,180 --> 00:12:37,530
solve this constraint using<font color="#E5E5E5"> the</font>

247
00:12:35,070 --> 00:12:40,260
constraints over<font color="#E5E5E5"> and we use the ax as a</font>

248
00:12:37,530 --> 00:12:49,050
concrete value by<font color="#CCCCCC"> doing so</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> can</font>

249
00:12:40,260 --> 00:12:51,630
tolerate<font color="#E5E5E5"> incomplete constraints third I</font>

250
00:12:49,050 --> 00:12:54,900
want to talk about<font color="#CCCCCC"> ineffective test case</font>

251
00:12:51,630 --> 00:12:57,320
generation due to<font color="#E5E5E5"> the unsatisfiable</font>

252
00:12:54,900 --> 00:12:57,319
<font color="#CCCCCC">Patties</font>

253
00:13:00,810 --> 00:13:06,959
like another problem is that<font color="#E5E5E5"> it may be</font>

254
00:13:04,020 --> 00:13:10,500
<font color="#E5E5E5">over</font><font color="#CCCCCC"> constraint</font><font color="#E5E5E5"> the path is because and</font>

255
00:13:06,960 --> 00:13:13,020
it resulted in no test cases for<font color="#CCCCCC"> example</font>

256
00:13:10,500 --> 00:13:15,450
<font color="#E5E5E5">there is another</font><font color="#CCCCCC"> sample that it gets</font>

257
00:13:13,020 --> 00:13:18,329
<font color="#CCCCCC">typed</font><font color="#E5E5E5"> and each</font><font color="#CCCCCC"> hack weather type is type</font>

258
00:13:15,450 --> 00:13:23,190
<font color="#CCCCCC">1</font><font color="#E5E5E5"> and after long execution it will check</font>

259
00:13:18,330 --> 00:13:25,440
<font color="#CCCCCC">tie because</font><font color="#E5E5E5"> the type 2 if we if we first</font>

260
00:13:23,190 --> 00:13:28,410
<font color="#E5E5E5">go to the</font><font color="#CCCCCC"> type equal type</font><font color="#E5E5E5"> 1 and after</font>

261
00:13:25,440 --> 00:13:30,750
<font color="#CCCCCC">the long execution then if even though</font>

262
00:13:28,410 --> 00:13:33,449
we meet the time equal type<font color="#E5E5E5"> 2 it will</font>

263
00:13:30,750 --> 00:13:36,029
<font color="#E5E5E5">not</font><font color="#CCCCCC"> generate any test cases definitely</font>

264
00:13:33,450 --> 00:13:39,600
<font color="#E5E5E5">because it is unsatisfiable path because</font>

265
00:13:36,029 --> 00:13:41,700
the<font color="#E5E5E5"> type cannot be tight cannot be type</font>

266
00:13:39,600 --> 00:13:46,500
1 and type 2 at the<font color="#CCCCCC"> side at the same</font>

267
00:13:41,700 --> 00:13:49,170
<font color="#E5E5E5">time but if these branches are</font>

268
00:13:46,500 --> 00:13:51,930
independent then the dairy is there must

269
00:13:49,170 --> 00:13:54,120
be the path that the type is not equal

270
00:13:51,930 --> 00:13:56,310
<font color="#CCCCCC">to type 1 and the type equal to</font><font color="#E5E5E5"> type 2</font>

271
00:13:54,120 --> 00:14:00,450
<font color="#E5E5E5">and in that case we will generate a type</font>

272
00:13:56,310 --> 00:14:06,270
<font color="#E5E5E5">2 but it requires another long execution</font>

273
00:14:00,450 --> 00:14:08,700
go back to first branch to resolve this

274
00:14:06,270 --> 00:14:10,170
issue<font color="#E5E5E5"> what we are trying</font><font color="#CCCCCC"> to do is that</font>

275
00:14:08,700 --> 00:14:13,890
we<font color="#E5E5E5"> want to solve constraint</font>

276
00:14:10,170 --> 00:14:17,010
optimistically<font color="#CCCCCC"> more specifically we want</font>

277
00:14:13,890 --> 00:14:19,400
to solve some part of the constraints

278
00:14:17,010 --> 00:14:25,050
instead of giving up at the

279
00:14:19,400 --> 00:14:26,790
unsatisfiable<font color="#CCCCCC"> patches so our decision</font><font color="#E5E5E5"> is</font>

280
00:14:25,050 --> 00:14:29,819
that<font color="#E5E5E5"> the we solve only the last</font>

281
00:14:26,790 --> 00:14:31,800
<font color="#E5E5E5">constraint in the path it is simple</font>

282
00:14:29,820 --> 00:14:35,730
because it is only one<font color="#E5E5E5"> constraint at the</font>

283
00:14:31,800 --> 00:14:37,829
last branch<font color="#E5E5E5"> and it is highly likely to</font>

284
00:14:35,730 --> 00:14:41,700
pass the branch because<font color="#CCCCCC"> it meets the</font>

285
00:14:37,830 --> 00:14:45,540
condition<font color="#E5E5E5"> for the last branch if we are</font>

286
00:14:41,700 --> 00:14:49,200
wrong<font color="#E5E5E5"> we will waste only</font><font color="#CCCCCC"> a small solving</font>

287
00:14:45,540 --> 00:14:52,079
time<font color="#E5E5E5"> and also in hybrid fuzzy generating</font>

288
00:14:49,200 --> 00:14:54,180
incorrect<font color="#E5E5E5"> inputs are fine because</font><font color="#CCCCCC"> even</font>

289
00:14:52,080 --> 00:14:56,400
though we generate the<font color="#E5E5E5"> in cracked inputs</font>

290
00:14:54,180 --> 00:14:58,500
<font color="#E5E5E5">it will feed</font><font color="#CCCCCC"> back to the</font><font color="#E5E5E5"> fuzzy and the</font>

291
00:14:56,400 --> 00:15:01,860
<font color="#CCCCCC">fudging will filter out is incorrect</font>

292
00:14:58,500 --> 00:15:07,890
<font color="#E5E5E5">inputs so we can generate</font><font color="#CCCCCC"> the incorrect</font>

293
00:15:01,860 --> 00:15:10,589
<font color="#CCCCCC">inputs this optimistic solving really</font>

294
00:15:07,890 --> 00:15:14,220
<font color="#E5E5E5">helps</font><font color="#CCCCCC"> to find the</font><font color="#E5E5E5"> more bugs this</font><font color="#CCCCCC"> is</font>

295
00:15:10,589 --> 00:15:17,090
<font color="#E5E5E5">result from the lava</font><font color="#CCCCCC"> M</font><font color="#E5E5E5"> data set which is</font>

296
00:15:14,220 --> 00:15:21,270
which in that some hard to find bugs in

297
00:15:17,090 --> 00:15:24,030
<font color="#CCCCCC">real world software</font><font color="#E5E5E5"> x-axis is time left</font>

298
00:15:21,270 --> 00:15:27,660
for testing we run the<font color="#CCCCCC"> queue scene for</font>

299
00:15:24,030 --> 00:15:31,050
<font color="#E5E5E5">five hours and the</font><font color="#CCCCCC"> y-axis is related to</font>

300
00:15:27,660 --> 00:15:33,449
the number<font color="#E5E5E5"> of bugs found by the QC so</font>

301
00:15:31,050 --> 00:15:36,990
you can see the blue line<font color="#E5E5E5"> which is the Q</font>

302
00:15:33,450 --> 00:15:41,160
seam with optimistic solving is<font color="#E5E5E5"> dominate</font>

303
00:15:36,990 --> 00:15:43,890
it dominate the lead<font color="#E5E5E5"> run which the</font>

304
00:15:41,160 --> 00:15:46,350
accuse him without optimistic solving so

305
00:15:43,890 --> 00:15:52,530
optimistic so being<font color="#CCCCCC"> really helps to</font><font color="#E5E5E5"> find</font>

306
00:15:46,350 --> 00:15:55,320
<font color="#E5E5E5">more bugs implementation we implemented</font>

307
00:15:52,530 --> 00:15:57,750
the<font color="#CCCCCC"> Q</font><font color="#E5E5E5"> seam with the 16 K lines of code</font>

308
00:15:55,320 --> 00:16:00,390
<font color="#E5E5E5">we use the Intel pin as our emulation</font>

309
00:15:57,750 --> 00:16:03,450
<font color="#E5E5E5">and we use</font><font color="#CCCCCC"> d3</font><font color="#E5E5E5"> for constraint</font><font color="#CCCCCC"> dissolving</font>

310
00:16:00,390 --> 00:16:05,520
so you<font color="#CCCCCC"> can like a</font><font color="#E5E5E5"> Google open</font><font color="#CCCCCC"> source our</font>

311
00:16:03,450 --> 00:16:07,980
prototype so<font color="#CCCCCC"> we</font><font color="#E5E5E5"> will it will</font><font color="#CCCCCC"> be</font>

312
00:16:05,520 --> 00:16:13,280
<font color="#CCCCCC">available at this link</font><font color="#E5E5E5"> so please check</font>

313
00:16:07,980 --> 00:16:17,010
this link<font color="#CCCCCC"> so for the evaluation</font>

314
00:16:13,280 --> 00:16:20,130
<font color="#E5E5E5">questions we want to answer the our goal</font>

315
00:16:17,010 --> 00:16:22,080
is to scale to<font color="#E5E5E5"> real word software to</font>

316
00:16:20,130 --> 00:16:25,140
some really<font color="#E5E5E5"> scale to real word software</font>

317
00:16:22,080 --> 00:16:27,630
<font color="#CCCCCC">a second one is that we want to compare</font>

318
00:16:25,140 --> 00:16:30,060
our<font color="#CCCCCC"> Q seem to other system like a</font>

319
00:16:27,630 --> 00:16:31,920
driller<font color="#CCCCCC"> one of the state of</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> ty</font>

320
00:16:30,060 --> 00:16:33,030
briefing and<font color="#E5E5E5"> viewer and the other</font>

321
00:16:31,920 --> 00:16:39,870
fuzzing and symbolic execution

322
00:16:33,030 --> 00:16:42,000
techniques<font color="#CCCCCC"> cucm scales to</font><font color="#E5E5E5"> real-world</font>

323
00:16:39,870 --> 00:16:44,870
<font color="#E5E5E5">software we found that their team bugs</font>

324
00:16:42,000 --> 00:16:48,690
<font color="#E5E5E5">in</font><font color="#CCCCCC"> real world</font><font color="#E5E5E5"> software including</font><font color="#CCCCCC"> lepton</font>

325
00:16:44,870 --> 00:16:52,530
open<font color="#CCCCCC"> JPEG</font><font color="#E5E5E5"> TCP dump file and the ffmpeg</font>

326
00:16:48,690 --> 00:16:55,710
and object<font color="#CCCCCC"> them as you can see they are</font>

327
00:16:52,530 --> 00:16:59,579
<font color="#E5E5E5">already fast a lot and like there are</font>

328
00:16:55,710 --> 00:17:02,339
some some programs that<font color="#E5E5E5"> are being fast</font>

329
00:16:59,580 --> 00:17:06,360
by<font color="#E5E5E5"> the OSS</font><font color="#CCCCCC"> fast which</font><font color="#E5E5E5"> is the cloud of us</font>

330
00:17:02,339 --> 00:17:08,819
from<font color="#E5E5E5"> Google even they are already first</font>

331
00:17:06,359 --> 00:17:14,520
kiss him help to help them to<font color="#E5E5E5"> find the</font>

332
00:17:08,819 --> 00:17:18,930
bugs in this program one<font color="#E5E5E5"> example that we</font>

333
00:17:14,520 --> 00:17:23,819
found bug in the ffmpeg<font color="#E5E5E5"> it requires to</font>

334
00:17:18,930 --> 00:17:27,000
pass this very complicated<font color="#CCCCCC"> branches in</font>

335
00:17:23,819 --> 00:17:28,020
our<font color="#CCCCCC"> evaluation</font><font color="#E5E5E5"> we run the fuzzy fuzzing</font>

336
00:17:27,000 --> 00:17:30,900
for 24

337
00:17:28,020 --> 00:17:34,020
hours but it cannot reach this branch<font color="#E5E5E5"> at</font>

338
00:17:30,900 --> 00:17:38,070
all<font color="#E5E5E5"> and the we believe is really hard</font>

339
00:17:34,020 --> 00:17:40,139
for fuzzing because OSS<font color="#E5E5E5"> fuzz fuzz this</font>

340
00:17:38,070 --> 00:17:43,530
program for two years but it cannot

341
00:17:40,140 --> 00:17:46,980
reach this bug the<font color="#CCCCCC"> Kusum can generate</font>

342
00:17:43,530 --> 00:17:53,210
the test cases that bypass this branch

343
00:17:46,980 --> 00:17:57,270
and we found<font color="#E5E5E5"> this bug using kissing and</font>

344
00:17:53,210 --> 00:18:01,650
we<font color="#CCCCCC"> compared</font><font color="#E5E5E5"> Kusum with driller we use</font>

345
00:17:57,270 --> 00:18:05,430
the<font color="#E5E5E5"> data set of from the</font><font color="#CCCCCC"> cgc 126</font>

346
00:18:01,650 --> 00:18:07,820
binaries<font color="#E5E5E5"> and we run only one instance of</font>

347
00:18:05,430 --> 00:18:10,410
<font color="#CCCCCC">con college education</font><font color="#E5E5E5"> for five minutes</font>

348
00:18:07,820 --> 00:18:13,500
<font color="#E5E5E5">because</font><font color="#CCCCCC"> we do not want to run the</font>

349
00:18:10,410 --> 00:18:16,590
buzzing - because it will introduce the

350
00:18:13,500 --> 00:18:19,230
randomness<font color="#CCCCCC"> in our experiment after</font>

351
00:18:16,590 --> 00:18:22,020
<font color="#CCCCCC">running the con college education for</font>

352
00:18:19,230 --> 00:18:24,930
<font color="#E5E5E5">five hours</font><font color="#CCCCCC"> or five minutes</font><font color="#E5E5E5"> and then we</font>

353
00:18:22,020 --> 00:18:30,270
<font color="#E5E5E5">compare</font><font color="#CCCCCC"> code coverage</font><font color="#E5E5E5"> of the generated</font>

354
00:18:24,930 --> 00:18:33,240
test cases<font color="#CCCCCC"> and QC m'c Eve the more code</font>

355
00:18:30,270 --> 00:18:38,850
coverage than the<font color="#E5E5E5"> driller</font><font color="#CCCCCC"> in most of</font>

356
00:18:33,240 --> 00:18:42,090
cases in CGC among 126 challenges<font color="#CCCCCC"> kills</font>

357
00:18:38,850 --> 00:18:45,000
him achieved more in 104 challenges and

358
00:18:42,090 --> 00:18:50,310
the<font color="#E5E5E5"> driller achieved more in 18</font>

359
00:18:45,000 --> 00:18:52,200
challenges<font color="#CCCCCC"> twosome achieved more</font><font color="#E5E5E5"> code</font>

360
00:18:50,310 --> 00:18:55,379
coverage due to<font color="#E5E5E5"> its better performance</font>

361
00:18:52,200 --> 00:18:59,340
for<font color="#CCCCCC"> example there</font><font color="#E5E5E5"> is a challenge called</font>

362
00:18:55,380 --> 00:19:01,860
<font color="#CCCCCC">a challenge named</font><font color="#E5E5E5"> chrome you want to</font>

363
00:18:59,340 --> 00:19:04,830
achieve<font color="#E5E5E5"> new code coverage it will</font>

364
00:19:01,860 --> 00:19:07,439
<font color="#E5E5E5">require</font><font color="#CCCCCC"> seven stage</font><font color="#E5E5E5"> it needs to add user</font>

365
00:19:04,830 --> 00:19:10,740
and it needs<font color="#E5E5E5"> to add another user</font><font color="#CCCCCC"> and the</font>

366
00:19:07,440 --> 00:19:14,070
<font color="#E5E5E5">login</font><font color="#CCCCCC"> and send message and require seven</font>

367
00:19:10,740 --> 00:19:15,990
stages for that<font color="#E5E5E5"> kissing can reach this</font>

368
00:19:14,070 --> 00:19:20,750
state and they<font color="#CCCCCC"> can find the new code</font>

369
00:19:15,990 --> 00:19:20,750
coverage but<font color="#CCCCCC"> driller cannot do in time</font>

370
00:19:22,520 --> 00:19:27,750
driller<font color="#E5E5E5"> compared but driller can achieve</font>

371
00:19:25,620 --> 00:19:32,100
more<font color="#E5E5E5"> code coverage if there is a nested</font>

372
00:19:27,750 --> 00:19:35,340
branch driller can find inputs<font color="#E5E5E5"> that pass</font>

373
00:19:32,100 --> 00:19:37,740
the nested branch by a single execution

374
00:19:35,340 --> 00:19:41,250
due<font color="#E5E5E5"> to forking so if there are the</font>

375
00:19:37,740 --> 00:19:41,600
nested branch kill<font color="#CCCCCC"> seem</font><font color="#E5E5E5"> only flip one</font>

376
00:19:41,250 --> 00:19:44,450
brain

377
00:19:41,600 --> 00:19:46,909
but<font color="#E5E5E5"> driller can follow the branch and</font>

378
00:19:44,450 --> 00:19:51,110
can generate test cases<font color="#E5E5E5"> to pass this</font>

379
00:19:46,910 --> 00:19:53,750
<font color="#CCCCCC">Ness</font><font color="#E5E5E5"> to the branch to do that</font><font color="#CCCCCC"> kisum</font>

380
00:19:51,110 --> 00:19:56,510
requires<font color="#E5E5E5"> reaction but</font><font color="#CCCCCC"> we want to note</font>

381
00:19:53,750 --> 00:19:59,150
that<font color="#E5E5E5"> our experiment allows only</font><font color="#CCCCCC"> one</font>

382
00:19:56,510 --> 00:20:01,190
instance<font color="#E5E5E5"> of con colleague execution so</font>

383
00:19:59,150 --> 00:20:06,820
we believe<font color="#E5E5E5"> that the</font><font color="#CCCCCC"> cucm can reach this</font>

384
00:20:01,190 --> 00:20:10,760
state by doing the<font color="#CCCCCC"> reacts kitchen and</font>

385
00:20:06,820 --> 00:20:13,100
the QC outperformed<font color="#E5E5E5"> other techniques in</font>

386
00:20:10,760 --> 00:20:15,920
lava<font color="#CCCCCC"> em dataset</font><font color="#E5E5E5"> as I mentioned before</font>

387
00:20:13,100 --> 00:20:18,770
lava<font color="#E5E5E5"> em</font><font color="#CCCCCC"> dataset inject hard to find bugs</font>

388
00:20:15,920 --> 00:20:21,920
in<font color="#CCCCCC"> real-world</font><font color="#E5E5E5"> software we run five hours</font>

389
00:20:18,770 --> 00:20:25,090
and the<font color="#CCCCCC"> QC</font><font color="#E5E5E5"> found all the bugs in the</font>

390
00:20:21,920 --> 00:20:30,110
unique<font color="#E5E5E5"> basis 64 and the</font><font color="#CCCCCC"> md5sum</font>

391
00:20:25,090 --> 00:20:33,050
and it found<font color="#E5E5E5"> 50</font><font color="#CCCCCC"> 58%</font><font color="#E5E5E5"> of bugs in</font><font color="#CCCCCC"> whoo</font>

392
00:20:30,110 --> 00:20:34,969
which is significantly more<font color="#CCCCCC"> than other</font>

393
00:20:33,050 --> 00:20:39,200
techniques<font color="#E5E5E5"> fuzzing and symbolic</font>

394
00:20:34,970 --> 00:20:42,800
execution<font color="#E5E5E5"> and vision</font><font color="#CCCCCC"> in this</font><font color="#E5E5E5"> slide I</font>

395
00:20:39,200 --> 00:20:47,420
want to<font color="#E5E5E5"> discuss the other use of</font><font color="#CCCCCC"> our</font>

396
00:20:42,800 --> 00:20:49,820
technique and the limitation so the QC

397
00:20:47,420 --> 00:20:53,510
is based on the last accurate result

398
00:20:49,820 --> 00:20:56,889
<font color="#E5E5E5">so it requires efficient validator in</font>

399
00:20:53,510 --> 00:20:59,600
our case fudging is efficient validator

400
00:20:56,890 --> 00:21:01,940
<font color="#E5E5E5">maybe we could apply the same technique</font>

401
00:20:59,600 --> 00:21:05,120
<font color="#E5E5E5">on the exploit generation because we</font>

402
00:21:01,940 --> 00:21:08,270
have the we can<font color="#E5E5E5"> make its efficient</font>

403
00:21:05,120 --> 00:21:11,840
validator<font color="#E5E5E5"> to test whether the generator</font>

404
00:21:08,270 --> 00:21:16,040
exploit works or not currently we only

405
00:21:11,840 --> 00:21:22,639
<font color="#E5E5E5">support x86 and x86 64 and we cannot</font>

406
00:21:16,040 --> 00:21:24,409
support a<font color="#E5E5E5"> floating point</font><font color="#CCCCCC"> yet conclusion</font>

407
00:21:22,640 --> 00:21:27,110
<font color="#E5E5E5">I want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> conclude</font><font color="#CCCCCC"> this talk</font>

408
00:21:24,410 --> 00:21:29,780
<font color="#E5E5E5">Kusum is a hybrid funding scale over to</font>

409
00:21:27,110 --> 00:21:32,990
real world software we found the 13<font color="#CCCCCC"> box</font>

410
00:21:29,780 --> 00:21:35,480
<font color="#E5E5E5">in</font><font color="#CCCCCC"> real-world software and we outperform</font>

411
00:21:32,990 --> 00:21:38,270
<font color="#CCCCCC">a</font><font color="#E5E5E5"> state of art</font><font color="#CCCCCC"> hybrid fuzzing and</font><font color="#E5E5E5"> the</font>

412
00:21:35,480 --> 00:21:41,210
other about finding technique<font color="#E5E5E5"> so please</font>

413
00:21:38,270 --> 00:21:44,540
we will open source our prototype so

414
00:21:41,210 --> 00:21:45,330
please check this link<font color="#E5E5E5"> thank you</font>

415
00:21:44,540 --> 00:21:49,589
[Applause]

416
00:21:45,330 --> 00:21:49,589
[Music]

417
00:21:50,170 --> 00:21:54,540
we have time for a couple<font color="#CCCCCC"> of quick</font>

418
00:21:52,360 --> 00:21:54,540
questions

419
00:21:55,920 --> 00:21:58,920
run

420
00:22:02,770 --> 00:22:09,190
hi<font color="#CCCCCC"> sumon Jana</font><font color="#E5E5E5"> Columbia University</font><font color="#CCCCCC"> cool</font>

421
00:22:06,380 --> 00:22:12,020
works I<font color="#CCCCCC"> just have one question</font><font color="#E5E5E5"> for the</font>

422
00:22:09,190 --> 00:22:13,640
<font color="#CCCCCC">real-world programs that you tested did</font>

423
00:22:12,020 --> 00:22:15,470
you test for coverage as well because

424
00:22:13,640 --> 00:22:17,750
you talked about bugs<font color="#E5E5E5"> right you found 13</font>

425
00:22:15,470 --> 00:22:20,330
new bugs<font color="#E5E5E5"> did you compare coverage with</font>

426
00:22:17,750 --> 00:22:24,290
other hybrid fuzzers on<font color="#CCCCCC"> real-world</font>

427
00:22:20,330 --> 00:22:26,570
program<font color="#E5E5E5"> so honest fitting like the Lego</font>

428
00:22:24,290 --> 00:22:29,210
<font color="#CCCCCC">the</font><font color="#E5E5E5"> only hybrid</font><font color="#CCCCCC"> fuzzer we know the</font>

429
00:22:26,570 --> 00:22:32,090
trailer and the trailer has some like a

430
00:22:29,210 --> 00:22:35,870
very high dependency on the<font color="#CCCCCC"> CDC</font><font color="#E5E5E5"> program</font>

431
00:22:32,090 --> 00:22:39,500
so we<font color="#E5E5E5"> are we we try to test a trailer</font>

432
00:22:35,870 --> 00:22:42,370
with other<font color="#CCCCCC"> Iroquois like normal Linux</font>

433
00:22:39,500 --> 00:22:44,720
binaries<font color="#CCCCCC"> but we fail so we own it</font>

434
00:22:42,370 --> 00:22:48,949
<font color="#E5E5E5">actually it generates some test cases</font>

435
00:22:44,720 --> 00:22:51,770
but they<font color="#CCCCCC"> are too small to generate so we</font>

436
00:22:48,950 --> 00:22:53,630
think<font color="#E5E5E5"> is it's not that meaningful to</font>

437
00:22:51,770 --> 00:22:57,629
compare those so that's why we<font color="#E5E5E5"> compare</font>

438
00:22:53,630 --> 00:22:59,290
<font color="#CCCCCC">the driller with CCC binary okay buzzer</font>

439
00:22:57,630 --> 00:23:03,110
[Music]

440
00:22:59,290 --> 00:23:05,210
buzzer<font color="#CCCCCC"> buzzer</font><font color="#E5E5E5"> we use</font><font color="#CCCCCC"> this year oh yeah</font>

441
00:23:03,110 --> 00:23:09,169
so we just<font color="#CCCCCC"> compare that</font><font color="#E5E5E5"> like their</font>

442
00:23:05,210 --> 00:23:12,080
evaluation in the<font color="#CCCCCC"> LA bohème data</font><font color="#E5E5E5"> set so</font>

443
00:23:09,170 --> 00:23:14,030
we use programs not<font color="#E5E5E5"> real-world programs</font>

444
00:23:12,080 --> 00:23:16,340
<font color="#CCCCCC">but it also runs on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> real-world</font>

445
00:23:14,030 --> 00:23:19,040
<font color="#CCCCCC">programs right</font><font color="#E5E5E5"> sorry it does run on</font>

446
00:23:16,340 --> 00:23:22,129
<font color="#E5E5E5">real-world programs yeah yeah I</font><font color="#CCCCCC"> think</font>

447
00:23:19,040 --> 00:23:25,460
<font color="#E5E5E5">like it we we haven't tested</font><font color="#CCCCCC"> the user</font>

448
00:23:22,130 --> 00:23:28,610
<font color="#CCCCCC">with</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> real-world</font><font color="#E5E5E5"> program but I</font>

449
00:23:25,460 --> 00:23:30,710
definitely<font color="#E5E5E5"> show you will work with thank</font>

450
00:23:28,610 --> 00:23:33,399
you thank you let's thank our speaker

451
00:23:30,710 --> 00:23:33,400
again

452
00:23:33,420 --> 00:23:37,380
[Music]

453
00:23:35,320 --> 00:23:37,379
you

