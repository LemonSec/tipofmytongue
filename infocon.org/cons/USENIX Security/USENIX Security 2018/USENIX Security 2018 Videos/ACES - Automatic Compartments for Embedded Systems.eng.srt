1
00:00:12,360 --> 00:00:17,020
thank you as as he said I'm Abraham

2
00:00:14,770 --> 00:00:18,730
<font color="#E5E5E5">Clements</font><font color="#CCCCCC"> I've did this work in</font>

3
00:00:17,020 --> 00:00:22,509
conjunction<font color="#E5E5E5"> with</font><font color="#CCCCCC"> knave straw bocce</font>

4
00:00:18,730 --> 00:00:23,980
<font color="#CCCCCC">mattias payer</font><font color="#E5E5E5"> we are all from Purdue</font>

5
00:00:22,510 --> 00:00:27,490
University<font color="#CCCCCC"> I'm also with Sandia National</font>

6
00:00:23,980 --> 00:00:28,930
Laboratories<font color="#E5E5E5"> and</font><font color="#CCCCCC"> our work is aces</font>

7
00:00:27,490 --> 00:00:31,930
automatic compartments<font color="#E5E5E5"> for embedded</font>

8
00:00:28,930 --> 00:00:34,450
<font color="#CCCCCC">systems so start</font><font color="#E5E5E5"> with the problem</font>

9
00:00:31,930 --> 00:00:36,220
<font color="#E5E5E5">statement first we're targeting bare</font>

10
00:00:34,450 --> 00:00:38,430
metal embedded systems<font color="#E5E5E5"> bare metal</font>

11
00:00:36,220 --> 00:00:41,110
insists bare metal embedded systems

12
00:00:38,430 --> 00:00:43,210
operate without an<font color="#E5E5E5"> operating</font><font color="#CCCCCC"> system</font><font color="#E5E5E5"> and</font>

13
00:00:41,110 --> 00:00:44,589
with a single<font color="#E5E5E5"> monolithic by n area</font>

14
00:00:43,210 --> 00:00:48,280
that's<font color="#E5E5E5"> compile everything is compiled</font>

15
00:00:44,590 --> 00:00:51,250
into<font color="#CCCCCC"> one</font><font color="#E5E5E5"> one binary</font><font color="#CCCCCC"> so here on the right</font>

16
00:00:48,280 --> 00:00:52,750
I've depicted what an application looks

17
00:00:51,250 --> 00:00:55,809
like you have some application logic<font color="#E5E5E5"> on</font>

18
00:00:52,750 --> 00:00:57,519
top of different<font color="#E5E5E5"> libraries which perform</font>

19
00:00:55,809 --> 00:00:59,379
different functionality for example<font color="#E5E5E5"> here</font>

20
00:00:57,519 --> 00:01:00,910
you've got a camera<font color="#CCCCCC"> they'd have an image</font>

21
00:00:59,379 --> 00:01:02,498
<font color="#CCCCCC">processing</font><font color="#E5E5E5"> library</font><font color="#CCCCCC"> a hardware</font>

22
00:01:00,910 --> 00:01:04,509
abstraction layer<font color="#CCCCCC"> for the camera to</font>

23
00:01:02,499 --> 00:01:07,420
abstract<font color="#E5E5E5"> away the hardware and similarly</font>

24
00:01:04,510 --> 00:01:11,560
for<font color="#E5E5E5"> TCP and</font><font color="#CCCCCC"> Y Wi-Fi you'd have a TCP</font>

25
00:01:07,420 --> 00:01:13,150
stack Wi-Fi stack<font color="#CCCCCC"> these systems because</font>

26
00:01:11,560 --> 00:01:16,480
<font color="#E5E5E5">the way they operate are vulnerable they</font>

27
00:01:13,150 --> 00:01:18,610
have lots of interconnectivity<font color="#E5E5E5"> there's</font>

28
00:01:16,480 --> 00:01:21,880
no isolation<font color="#E5E5E5"> or</font><font color="#CCCCCC"> privileged isolation in</font>

29
00:01:18,610 --> 00:01:23,800
these<font color="#CCCCCC"> systems and Google project</font><font color="#E5E5E5"> zero</font>

30
00:01:21,880 --> 00:01:27,759
<font color="#E5E5E5">demonstrated their vulnerability and</font><font color="#CCCCCC"> the</font>

31
00:01:23,800 --> 00:01:29,890
impact they can have with their CV 2017

32
00:01:27,760 --> 00:01:31,930
six nine<font color="#E5E5E5"> five seven in this</font><font color="#CCCCCC"> CVE</font>

33
00:01:29,890 --> 00:01:34,180
<font color="#E5E5E5">what they found is in a Wi-Fi system on</font>

34
00:01:31,930 --> 00:01:35,440
a chip<font color="#CCCCCC"> they found some memory corruption</font>

35
00:01:34,180 --> 00:01:38,440
vulnerabilities that allowed them to

36
00:01:35,440 --> 00:01:39,880
compromise<font color="#E5E5E5"> that chip and then just by</font>

37
00:01:38,440 --> 00:01:40,960
having the<font color="#E5E5E5"> Wi-Fi on</font><font color="#CCCCCC"> he didn't</font><font color="#E5E5E5"> have to</font>

38
00:01:39,880 --> 00:01:43,229
actually<font color="#E5E5E5"> connected to the access</font><font color="#CCCCCC"> point</font>

39
00:01:40,960 --> 00:01:46,619
<font color="#E5E5E5">then they were able to take over the</font>

40
00:01:43,230 --> 00:01:49,570
application processor in cell phones and

41
00:01:46,620 --> 00:01:51,100
so<font color="#CCCCCC"> asus here applies to legacy code</font>

42
00:01:49,570 --> 00:01:53,679
we're looking at these<font color="#E5E5E5"> systems are used</font>

43
00:01:51,100 --> 00:01:55,149
in IOT<font color="#E5E5E5"> devices vehicles lots of embedded</font>

44
00:01:53,680 --> 00:01:57,900
<font color="#E5E5E5">systems will use these small micro</font>

45
00:01:55,150 --> 00:02:00,370
controllers that<font color="#E5E5E5"> are now connected and</font>

46
00:01:57,900 --> 00:02:02,590
they're vulnerable they don't<font color="#E5E5E5"> they often</font>

47
00:02:00,370 --> 00:02:03,880
don't apply any defenses<font color="#E5E5E5"> even data</font>

48
00:02:02,590 --> 00:02:05,890
execution prevention which has been

49
00:02:03,880 --> 00:02:08,440
<font color="#E5E5E5">quite standard for probably two decades</font>

50
00:02:05,890 --> 00:02:10,780
<font color="#CCCCCC">now is not applied and there's no</font>

51
00:02:08,440 --> 00:02:13,450
separation of privileges<font color="#E5E5E5"> the result is a</font>

52
00:02:10,780 --> 00:02:16,260
single vulnerability can compromise the

53
00:02:13,450 --> 00:02:16,260
entire system

54
00:02:17,950 --> 00:02:22,518
so aces goals to<font color="#CCCCCC"> create many</font>

55
00:02:20,870 --> 00:02:24,379
<font color="#CCCCCC">compartments within</font><font color="#E5E5E5"> these applications</font>

56
00:02:22,519 --> 00:02:26,810
<font color="#CCCCCC">this applies the principle of</font><font color="#E5E5E5"> least</font>

57
00:02:24,379 --> 00:02:29,000
privilege<font color="#CCCCCC"> --is and it creates we create</font>

58
00:02:26,810 --> 00:02:31,069
sub thread level compartments and<font color="#E5E5E5"> we</font>

59
00:02:29,000 --> 00:02:32,750
protect the integrity of sensitive data

60
00:02:31,069 --> 00:02:35,869
<font color="#CCCCCC">in peripheral</font><font color="#E5E5E5"> so we're integrity only we</font>

61
00:02:32,750 --> 00:02:38,870
<font color="#E5E5E5">don't protect confidentiality</font><font color="#CCCCCC"> to do this</font>

62
00:02:35,870 --> 00:02:40,129
we use static analysis of the<font color="#E5E5E5"> program to</font>

63
00:02:38,870 --> 00:02:41,780
infer<font color="#CCCCCC"> the compartments</font><font color="#E5E5E5"> and then allow a</font>

64
00:02:40,129 --> 00:02:43,670
policy to determine how<font color="#E5E5E5"> those</font>

65
00:02:41,780 --> 00:02:45,349
compartments<font color="#CCCCCC"> should be formed</font><font color="#E5E5E5"> this</font>

66
00:02:43,670 --> 00:02:47,659
<font color="#E5E5E5">separates compartmentalization from the</font>

67
00:02:45,349 --> 00:02:48,920
application development<font color="#E5E5E5"> so that the</font>

68
00:02:47,659 --> 00:02:50,959
developer can experiment with different

69
00:02:48,920 --> 00:02:53,929
<font color="#E5E5E5">policies based on their application</font>

70
00:02:50,959 --> 00:02:55,400
needs<font color="#E5E5E5"> and so on the right I've kind of</font>

71
00:02:53,930 --> 00:02:56,599
depicted<font color="#E5E5E5"> what the application look like</font>

72
00:02:55,400 --> 00:02:59,120
after compartments are applied<font color="#CCCCCC"> you have</font>

73
00:02:56,599 --> 00:03:01,790
application logic<font color="#E5E5E5"> separated from each</font><font color="#CCCCCC"> of</font>

74
00:02:59,120 --> 00:03:05,870
the libraries<font color="#CCCCCC"> and each of the libraries</font>

75
00:03:01,790 --> 00:03:07,849
would then have privileged at associated

76
00:03:05,870 --> 00:03:10,340
with them<font color="#E5E5E5"> and hardware peripherals these</font>

77
00:03:07,849 --> 00:03:13,700
systems use<font color="#E5E5E5"> memory map for hip rolls so</font>

78
00:03:10,340 --> 00:03:19,250
by we can isolate the<font color="#E5E5E5"> which peripherals</font>

79
00:03:13,700 --> 00:03:20,839
code can access so some related<font color="#E5E5E5"> work on</font>

80
00:03:19,250 --> 00:03:22,430
embedded system<font color="#E5E5E5"> and bare metal embedded</font>

81
00:03:20,840 --> 00:03:24,530
system<font color="#CCCCCC"> and</font><font color="#E5E5E5"> particular security</font><font color="#CCCCCC"> as</font>

82
00:03:22,430 --> 00:03:27,470
<font color="#E5E5E5">there's</font><font color="#CCCCCC"> re work a pox use which in</font>

83
00:03:24,530 --> 00:03:29,269
<font color="#CCCCCC">Oakland 2017</font><font color="#E5E5E5"> where we applied data</font>

84
00:03:27,470 --> 00:03:31,190
execution prevention diversity and stack

85
00:03:29,269 --> 00:03:33,669
protections<font color="#E5E5E5"> to</font><font color="#CCCCCC"> bare metal systems</font>

86
00:03:31,190 --> 00:03:38,329
however<font color="#E5E5E5"> did not address</font><font color="#CCCCCC"> lease privileges</font>

87
00:03:33,669 --> 00:03:40,849
<font color="#CCCCCC">embed micro visor is a software suite is</font>

88
00:03:38,329 --> 00:03:43,069
a runtime<font color="#CCCCCC"> and API by</font><font color="#E5E5E5"> arm for their</font>

89
00:03:40,849 --> 00:03:44,510
<font color="#E5E5E5">cortex-m microcontrollers</font><font color="#CCCCCC"> that enables</font>

90
00:03:43,069 --> 00:03:47,268
you to manually<font color="#E5E5E5"> create compartments</font>

91
00:03:44,510 --> 00:03:49,819
within<font color="#E5E5E5"> their applications however their</font>

92
00:03:47,269 --> 00:03:52,159
compartments intermix this application

93
00:03:49,819 --> 00:03:54,708
logic<font color="#E5E5E5"> with the compartments and requires</font>

94
00:03:52,159 --> 00:03:56,540
the use of their operating system minion

95
00:03:54,709 --> 00:03:58,879
also creates compartments<font color="#E5E5E5"> within the</font>

96
00:03:56,540 --> 00:04:01,400
environmental systems they do it at a

97
00:03:58,879 --> 00:04:02,929
thread level<font color="#E5E5E5"> and they use a fixed</font>

98
00:04:01,400 --> 00:04:06,500
algorithm to determine how compartments

99
00:04:02,930 --> 00:04:07,729
are formed<font color="#CCCCCC"> so first let's talk about a</font>

100
00:04:06,500 --> 00:04:10,040
<font color="#CCCCCC">little</font><font color="#E5E5E5"> more formally what a compartment</font>

101
00:04:07,729 --> 00:04:12,440
<font color="#E5E5E5">is</font><font color="#CCCCCC"> so compartments a set of concurrently</font>

102
00:04:10,040 --> 00:04:14,298
accessible memory regions and<font color="#E5E5E5"> authorized</font>

103
00:04:12,440 --> 00:04:15,709
control flows<font color="#CCCCCC"> before between</font><font color="#E5E5E5"> them so</font>

104
00:04:14,299 --> 00:04:17,930
we're in our compartments will restrict

105
00:04:15,709 --> 00:04:20,720
<font color="#E5E5E5">access to memory</font><font color="#CCCCCC"> and control flows</font>

106
00:04:17,930 --> 00:04:23,750
between compartments so here I've

107
00:04:20,720 --> 00:04:26,719
<font color="#CCCCCC">depicted</font><font color="#E5E5E5"> a small part of a program with</font>

108
00:04:23,750 --> 00:04:30,660
some each for functions on button<font color="#E5E5E5"> take</font>

109
00:04:26,719 --> 00:04:32,909
image<font color="#E5E5E5"> TX image and</font><font color="#CCCCCC"> tcp TX</font>

110
00:04:30,660 --> 00:04:36,120
with control<font color="#E5E5E5"> flow or calls</font><font color="#CCCCCC"> between those</font>

111
00:04:32,910 --> 00:04:37,350
functions so if we put them<font color="#CCCCCC"> in two</font>

112
00:04:36,120 --> 00:04:39,450
compartments<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have compartment a in</font>

113
00:04:37,350 --> 00:04:40,860
compartment B<font color="#E5E5E5"> well then restrict the</font>

114
00:04:39,450 --> 00:04:42,420
control flow so the only control flow

115
00:04:40,860 --> 00:04:45,200
between the compartments<font color="#CCCCCC"> that's allowed</font>

116
00:04:42,420 --> 00:04:47,550
is that<font color="#E5E5E5"> yellow or</font><font color="#CCCCCC"> the orange edge now</font>

117
00:04:45,200 --> 00:04:49,469
then<font color="#E5E5E5"> we'll also replace restrictions on</font>

118
00:04:47,550 --> 00:04:51,860
the memory that those compartments<font color="#CCCCCC"> can</font>

119
00:04:49,470 --> 00:04:54,450
access so here in the<font color="#E5E5E5"> middle</font><font color="#CCCCCC"> of this</font>

120
00:04:51,860 --> 00:04:56,220
image in yellow

121
00:04:54,450 --> 00:04:58,380
there's peripherals that<font color="#E5E5E5"> your memory</font>

122
00:04:56,220 --> 00:05:00,810
<font color="#E5E5E5">Maps there's Wi-Fi camera GPIO and a</font>

123
00:04:58,380 --> 00:05:03,990
UART and then down in the<font color="#E5E5E5"> RAM there's</font>

124
00:05:00,810 --> 00:05:05,840
global<font color="#E5E5E5"> data region</font><font color="#CCCCCC"> 1 and region</font><font color="#E5E5E5"> 2 and</font>

125
00:05:03,990 --> 00:05:08,670
<font color="#E5E5E5">then the compartments that hold the code</font>

126
00:05:05,840 --> 00:05:10,909
<font color="#E5E5E5">down in the green off to the right</font>

127
00:05:08,670 --> 00:05:13,350
they've got compartment a and B with the

128
00:05:10,910 --> 00:05:15,360
<font color="#CCCCCC">gray box indicating the permissions</font><font color="#E5E5E5"> that</font>

129
00:05:13,350 --> 00:05:19,980
have which compartments<font color="#E5E5E5"> have access to</font>

130
00:05:15,360 --> 00:05:22,680
which region of<font color="#E5E5E5"> memory so we</font><font color="#CCCCCC"> created the</font>

131
00:05:19,980 --> 00:05:24,480
compartments using static analysis first

132
00:05:22,680 --> 00:05:27,390
our<font color="#E5E5E5"> first step is we</font><font color="#CCCCCC"> analyze the program</font>

133
00:05:24,480 --> 00:05:31,460
to identify<font color="#E5E5E5"> code data and peripheral</font>

134
00:05:27,390 --> 00:05:33,750
dependencies so<font color="#E5E5E5"> aces ensures that every</font>

135
00:05:31,460 --> 00:05:34,919
that code can<font color="#CCCCCC"> access all it's required</font>

136
00:05:33,750 --> 00:05:37,410
<font color="#E5E5E5">to date and peripherals</font><font color="#CCCCCC"> that are</font>

137
00:05:34,920 --> 00:05:39,120
identified during<font color="#E5E5E5"> this analysis and then</font>

138
00:05:37,410 --> 00:05:41,310
we<font color="#E5E5E5"> use it</font><font color="#CCCCCC"> because of the aliasing</font>

139
00:05:39,120 --> 00:05:44,180
analysis problem we also use a micro

140
00:05:41,310 --> 00:05:47,460
emulator to dynamically identify missed

141
00:05:44,180 --> 00:05:49,290
dependencies due to aliasing<font color="#E5E5E5"> our</font>

142
00:05:47,460 --> 00:05:50,760
compartments are<font color="#E5E5E5"> Cochin centric which</font>

143
00:05:49,290 --> 00:05:55,080
means that code belongs to one

144
00:05:50,760 --> 00:05:56,789
<font color="#E5E5E5">compartment</font><font color="#CCCCCC"> and our policies are used to</font>

145
00:05:55,080 --> 00:05:58,140
determine how functions global variables

146
00:05:56,790 --> 00:05:59,820
and peripherals<font color="#E5E5E5"> should be grouped</font>

147
00:05:58,140 --> 00:06:03,719
together<font color="#E5E5E5"> to create a compartment they</font>

148
00:05:59,820 --> 00:06:05,700
can be flexible and the idea is<font color="#CCCCCC"> they'd</font>

149
00:06:03,720 --> 00:06:07,440
be much<font color="#E5E5E5"> like a compiler option that you</font>

150
00:06:05,700 --> 00:06:11,190
select while<font color="#E5E5E5"> compiling</font><font color="#CCCCCC"> the application</font>

151
00:06:07,440 --> 00:06:12,690
<font color="#E5E5E5">to apply</font><font color="#CCCCCC"> different policies we've</font>

152
00:06:11,190 --> 00:06:15,719
implemented three policies that I'll

153
00:06:12,690 --> 00:06:17,820
<font color="#E5E5E5">explain a little bit later but they're</font>

154
00:06:15,720 --> 00:06:19,919
naive<font color="#CCCCCC"> file name optimized file name</font><font color="#E5E5E5"> for</font>

155
00:06:17,820 --> 00:06:21,780
<font color="#E5E5E5">hit</font><font color="#CCCCCC"> for based policies</font><font color="#E5E5E5"> and then we use a</font>

156
00:06:19,919 --> 00:06:25,020
memory protection unit<font color="#E5E5E5"> which is similar</font>

157
00:06:21,780 --> 00:06:26,700
<font color="#CCCCCC">to an MP n mu accepted only enforces</font>

158
00:06:25,020 --> 00:06:29,210
<font color="#E5E5E5">read write and execute permissions on</font>

159
00:06:26,700 --> 00:06:32,010
physical memory they<font color="#E5E5E5"> generally have</font>

160
00:06:29,210 --> 00:06:33,299
<font color="#CCCCCC">eight to</font><font color="#E5E5E5"> six</font><font color="#CCCCCC"> eight to sixteen regions</font>

161
00:06:32,010 --> 00:06:36,120
that<font color="#E5E5E5"> they can enforce memory on and</font>

162
00:06:33,300 --> 00:06:38,910
imply<font color="#CCCCCC"> different permissions because we</font>

163
00:06:36,120 --> 00:06:40,560
use them<font color="#CCCCCC"> PU we have to satisfy</font><font color="#E5E5E5"> all of</font>

164
00:06:38,910 --> 00:06:43,820
<font color="#E5E5E5">its constraints and there's alignment</font>

165
00:06:40,560 --> 00:06:46,650
<font color="#E5E5E5">and size constraints</font><font color="#CCCCCC"> on regions</font>

166
00:06:43,820 --> 00:06:49,409
so the first step the<font color="#CCCCCC"> ASIS takes us to</font>

167
00:06:46,650 --> 00:06:50,638
generate<font color="#E5E5E5"> a program dependency graph so</font>

168
00:06:49,410 --> 00:06:54,720
on the left here I've<font color="#CCCCCC"> depicted an</font>

169
00:06:50,639 --> 00:06:56,250
example of a smart<font color="#CCCCCC"> doorbell when</font><font color="#E5E5E5"> you</font>

170
00:06:54,720 --> 00:06:57,990
press the<font color="#CCCCCC"> button</font><font color="#E5E5E5"> it take a picture it's</font>

171
00:06:56,250 --> 00:07:00,540
kind<font color="#CCCCCC"> of representative code the details</font>

172
00:06:57,990 --> 00:07:02,220
of it aren't<font color="#E5E5E5"> terribly important but on</font>

173
00:07:00,540 --> 00:07:03,540
the right is a program dependency graph

174
00:07:02,220 --> 00:07:05,610
<font color="#E5E5E5">which would come</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> this program and</font>

175
00:07:03,540 --> 00:07:10,080
<font color="#CCCCCC">so we show again</font><font color="#E5E5E5"> those same functions</font>

176
00:07:05,610 --> 00:07:11,610
<font color="#E5E5E5">with their control flow and then there</font>

177
00:07:10,080 --> 00:07:13,080
<font color="#CCCCCC">are dependencies on the peripherals</font><font color="#E5E5E5"> and</font>

178
00:07:11,610 --> 00:07:14,419
global variables<font color="#CCCCCC"> you'll</font><font color="#E5E5E5"> notice that</font>

179
00:07:13,080 --> 00:07:17,750
there's<font color="#E5E5E5"> some inter dependency between</font>

180
00:07:14,419 --> 00:07:20,609
<font color="#E5E5E5">the functions and their global data and</font>

181
00:07:17,750 --> 00:07:23,010
camera the<font color="#CCCCCC"> peripheral so the peripherals</font>

182
00:07:20,610 --> 00:07:26,550
again are depicted in yellow<font color="#E5E5E5"> and the</font>

183
00:07:23,010 --> 00:07:27,840
global data<font color="#E5E5E5"> in blue so the first step is</font>

184
00:07:26,550 --> 00:07:29,850
we convert this to a region graph so

185
00:07:27,840 --> 00:07:31,080
we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> first identify the memory</font>

186
00:07:29,850 --> 00:07:32,610
dependencies and<font color="#E5E5E5"> solve the memory</font>

187
00:07:31,080 --> 00:07:35,099
dependencies<font color="#E5E5E5"> and then we'll apply the</font>

188
00:07:32,610 --> 00:07:37,139
control flow restrictions so the program

189
00:07:35,100 --> 00:07:39,060
dependency graph is matched to<font color="#CCCCCC"> a region</font>

190
00:07:37,139 --> 00:07:40,229
graph<font color="#E5E5E5"> the first thing to do is to take</font>

191
00:07:39,060 --> 00:07:41,910
the functions and convert them<font color="#CCCCCC"> to</font>

192
00:07:40,229 --> 00:07:44,580
regions<font color="#CCCCCC"> the every function goes into its</font>

193
00:07:41,910 --> 00:07:47,539
own region initially and control flow

194
00:07:44,580 --> 00:07:50,669
edges are<font color="#E5E5E5"> not transferred at this state</font>

195
00:07:47,539 --> 00:07:53,010
<font color="#CCCCCC">that global</font><font color="#E5E5E5"> data is also mapped one</font>

196
00:07:50,669 --> 00:07:55,440
global variable to one<font color="#CCCCCC"> region and then</font>

197
00:07:53,010 --> 00:07:57,810
peripherals are mapped<font color="#E5E5E5"> one-to-many</font>

198
00:07:55,440 --> 00:08:00,360
there's one region created for<font color="#E5E5E5"> every</font>

199
00:07:57,810 --> 00:08:03,000
dependency in the program dependency

200
00:08:00,360 --> 00:08:05,039
graph this is because the peripherals

201
00:08:03,000 --> 00:08:07,380
are dependent on their hardware<font color="#E5E5E5"> their</font>

202
00:08:05,039 --> 00:08:09,750
addresses are fixed in<font color="#E5E5E5"> hardware and so</font>

203
00:08:07,380 --> 00:08:11,610
each code region can determine how it

204
00:08:09,750 --> 00:08:13,560
accesses those peripherals independently

205
00:08:11,610 --> 00:08:16,139
of all the other code regions or as

206
00:08:13,560 --> 00:08:18,450
global<font color="#CCCCCC"> datas they all code regions have</font>

207
00:08:16,139 --> 00:08:22,200
to agree on how they'll access global

208
00:08:18,450 --> 00:08:24,330
<font color="#E5E5E5">data so after forming the region graph</font>

209
00:08:22,200 --> 00:08:29,099
will generate it will<font color="#E5E5E5"> apply a</font>

210
00:08:24,330 --> 00:08:31,289
<font color="#E5E5E5">compartmentalization policy</font><font color="#CCCCCC"> so this</font>

211
00:08:29,099 --> 00:08:32,669
<font color="#CCCCCC">defines which which compart which code</font>

212
00:08:31,289 --> 00:08:34,708
<font color="#E5E5E5">function and peripherals should be</font>

213
00:08:32,669 --> 00:08:36,689
grouped together<font color="#CCCCCC"> state policy creates</font>

214
00:08:34,708 --> 00:08:38,579
those initial groupings<font color="#CCCCCC"> so we</font>

215
00:08:36,690 --> 00:08:40,620
<font color="#E5E5E5">implemented a naive</font><font color="#CCCCCC"> filename</font><font color="#E5E5E5"> policy</font>

216
00:08:38,580 --> 00:08:41,729
which groups them together based off the

217
00:08:40,620 --> 00:08:43,469
<font color="#E5E5E5">file name they're defined in an</font>

218
00:08:41,729 --> 00:08:46,440
optimized file name which starts with

219
00:08:43,469 --> 00:08:49,230
<font color="#CCCCCC">deny I</font><font color="#E5E5E5"> Eve file name policy and moves</font>

220
00:08:46,440 --> 00:08:50,700
all functions and global data to the

221
00:08:49,230 --> 00:08:52,950
compartment<font color="#CCCCCC"> or to the region</font><font color="#E5E5E5"> that they</font>

222
00:08:50,700 --> 00:08:55,350
have the most connectivity to and then

223
00:08:52,950 --> 00:08:56,830
the peripheral based policy identifies

224
00:08:55,350 --> 00:08:59,100
functions which<font color="#E5E5E5"> used for here</font>

225
00:08:56,830 --> 00:09:01,060
and walks up<font color="#E5E5E5"> the control flow graph</font>

226
00:08:59,100 --> 00:09:04,839
<font color="#E5E5E5">adding functions until there's a</font>

227
00:09:01,060 --> 00:09:07,300
conflict<font color="#E5E5E5"> in permissions and then any any</font>

228
00:09:04,839 --> 00:09:09,220
functions which have dependency<font color="#E5E5E5"> and more</font>

229
00:09:07,300 --> 00:09:14,199
than one set of peripherals<font color="#E5E5E5"> are added to</font>

230
00:09:09,220 --> 00:09:15,459
a single<font color="#E5E5E5"> compartment so after I in this</font>

231
00:09:14,200 --> 00:09:18,190
example on the<font color="#E5E5E5"> right I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> just</font>

232
00:09:15,459 --> 00:09:19,750
show<font color="#E5E5E5"> it kind of a contrived policy that</font>

233
00:09:18,190 --> 00:09:22,930
shows some of<font color="#E5E5E5"> the edge cases that occur</font>

234
00:09:19,750 --> 00:09:24,310
while applying compartments so first

235
00:09:22,930 --> 00:09:27,189
we're going<font color="#E5E5E5"> to merge the TX image and</font>

236
00:09:24,310 --> 00:09:30,160
TCP<font color="#E5E5E5"> T X and then we'll merge the global</font>

237
00:09:27,190 --> 00:09:31,540
button and global image so these will

238
00:09:30,160 --> 00:09:35,829
now<font color="#E5E5E5"> be laid</font><font color="#CCCCCC"> out in memory</font><font color="#E5E5E5"> in the same</font>

239
00:09:31,540 --> 00:09:38,050
locations or together<font color="#E5E5E5"> after applying the</font>

240
00:09:35,830 --> 00:09:39,370
policy will optimize we can apply

241
00:09:38,050 --> 00:09:41,589
optimizations<font color="#CCCCCC"> that should</font><font color="#E5E5E5"> improve</font>

242
00:09:39,370 --> 00:09:43,149
security<font color="#E5E5E5"> or improve performance really</font>

243
00:09:41,589 --> 00:09:44,740
<font color="#CCCCCC">an optimization</font><font color="#E5E5E5"> is just transforms the</font>

244
00:09:43,149 --> 00:09:46,420
region graph from one region graph to

245
00:09:44,740 --> 00:09:48,550
another region graph while preserving

246
00:09:46,420 --> 00:09:50,349
dependencies<font color="#CCCCCC"> so here in this</font><font color="#E5E5E5"> example</font>

247
00:09:48,550 --> 00:09:52,000
you'll<font color="#E5E5E5"> notice that take image and on</font>

248
00:09:50,350 --> 00:09:54,490
button have the same set<font color="#E5E5E5"> of</font><font color="#CCCCCC"> dependencies</font>

249
00:09:52,000 --> 00:09:59,200
so<font color="#CCCCCC"> we merge</font><font color="#E5E5E5"> them into the same code</font>

250
00:09:54,490 --> 00:10:01,600
region after<font color="#CCCCCC"> that we lower it</font><font color="#E5E5E5"> or we meet</font>

251
00:09:59,200 --> 00:10:02,800
the hardware constraints<font color="#CCCCCC"> so</font><font color="#E5E5E5"> this reduces</font>

252
00:10:01,600 --> 00:10:05,770
<font color="#E5E5E5">the graph to meet those harbour</font>

253
00:10:02,800 --> 00:10:11,709
constraints in this example we<font color="#E5E5E5"> can only</font>

254
00:10:05,770 --> 00:10:13,180
have<font color="#E5E5E5"> for compart for</font><font color="#CCCCCC"> mpu regions so</font><font color="#E5E5E5"> we</font>

255
00:10:11,709 --> 00:10:15,339
have to lower the number<font color="#CCCCCC"> of dependencies</font>

256
00:10:13,180 --> 00:10:17,709
for each code region to be less than the

257
00:10:15,339 --> 00:10:19,810
<font color="#CCCCCC">number of available mpu regions so we</font>

258
00:10:17,709 --> 00:10:21,699
iteratively<font color="#CCCCCC"> will</font><font color="#E5E5E5"> merge until we meet</font>

259
00:10:19,810 --> 00:10:23,469
<font color="#E5E5E5">that requirements with using a cost</font>

260
00:10:21,700 --> 00:10:26,920
function<font color="#CCCCCC"> to determine what the lowest</font>

261
00:10:23,470 --> 00:10:28,630
<font color="#E5E5E5">cost merges at each state</font><font color="#CCCCCC"> lowering does</font>

262
00:10:26,920 --> 00:10:30,939
increase the<font color="#E5E5E5"> permissions</font><font color="#CCCCCC"> as you merge</font>

263
00:10:28,630 --> 00:10:34,120
things<font color="#E5E5E5"> together then additional code</font>

264
00:10:30,940 --> 00:10:35,709
regions will obtain permissions<font color="#E5E5E5"> to</font>

265
00:10:34,120 --> 00:10:37,779
additional<font color="#CCCCCC"> global variables and</font>

266
00:10:35,709 --> 00:10:40,270
peripherals<font color="#E5E5E5"> and merging functions</font><font color="#CCCCCC"> or</font>

267
00:10:37,779 --> 00:10:43,390
merging<font color="#E5E5E5"> peripherals may add actually</font>

268
00:10:40,270 --> 00:10:46,329
additional peripherals<font color="#CCCCCC"> so in the example</font>

269
00:10:43,390 --> 00:10:47,980
we've<font color="#E5E5E5"> got we merged the global TX and</font>

270
00:10:46,329 --> 00:10:53,020
<font color="#E5E5E5">Google state that doesn't increase any</font>

271
00:10:47,980 --> 00:10:54,459
permissions and then<font color="#E5E5E5"> to lower we need to</font>

272
00:10:53,020 --> 00:10:56,829
now merge another region so we'll merge

273
00:10:54,459 --> 00:10:58,599
<font color="#E5E5E5">the Wi-Fi and GPIO but because they're</font>

274
00:10:56,829 --> 00:11:00,849
physically located in memory we have to

275
00:10:58,600 --> 00:11:03,990
have one region that covers<font color="#E5E5E5"> them that</font>

276
00:11:00,850 --> 00:11:06,790
that also picks up<font color="#E5E5E5"> the UART and camera</font>

277
00:11:03,990 --> 00:11:09,160
so after lowering<font color="#E5E5E5"> the graph we'll map</font>

278
00:11:06,790 --> 00:11:10,199
that to memory<font color="#CCCCCC"> so the code regions on</font>

279
00:11:09,160 --> 00:11:11,939
<font color="#E5E5E5">the Left become the pound</font>

280
00:11:10,200 --> 00:11:14,550
<font color="#CCCCCC">four compartments</font><font color="#E5E5E5"> a and compartment B</font>

281
00:11:11,940 --> 00:11:18,600
and then everything is mapped memory<font color="#E5E5E5"> as</font>

282
00:11:14,550 --> 00:11:21,510
shown on the right and<font color="#CCCCCC"> then again that's</font>

283
00:11:18,600 --> 00:11:23,880
this<font color="#CCCCCC"> height this</font><font color="#E5E5E5"> if you'll notice there</font>

284
00:11:21,510 --> 00:11:26,310
B because we<font color="#E5E5E5"> needed to merge the Wi-Fi</font>

285
00:11:23,880 --> 00:11:30,630
and the GPIO<font color="#E5E5E5"> we have to have a power of</font>

286
00:11:26,310 --> 00:11:37,859
<font color="#E5E5E5">two in the</font><font color="#CCCCCC"> MPU configuration so we also</font>

287
00:11:30,630 --> 00:11:39,560
picked up the UART and camera<font color="#CCCCCC"> we then</font>

288
00:11:37,860 --> 00:11:41,730
after applying the memory regions

289
00:11:39,560 --> 00:11:43,589
<font color="#E5E5E5">determining the memory regions we</font>

290
00:11:41,730 --> 00:11:45,090
instrument calls and returns<font color="#E5E5E5"> crossing</font>

291
00:11:43,590 --> 00:11:48,300
compartment boundaries so I've depicted

292
00:11:45,090 --> 00:11:50,340
<font color="#E5E5E5">the control flow of the program again on</font>

293
00:11:48,300 --> 00:11:53,069
the right<font color="#CCCCCC"> we'll instrument every call</font>

294
00:11:50,340 --> 00:11:55,470
<font color="#E5E5E5">that crosses compartment boundaries to</font>

295
00:11:53,070 --> 00:11:57,810
invoke a compartment switcher<font color="#E5E5E5"> and the</font>

296
00:11:55,470 --> 00:11:59,730
returns of<font color="#E5E5E5"> any destination of a call</font>

297
00:11:57,810 --> 00:12:02,160
across compartment of address<font color="#CCCCCC"> to also</font>

298
00:11:59,730 --> 00:12:03,750
invoke the compartment switcher the

299
00:12:02,160 --> 00:12:05,910
compartment switcher uses metadata that

300
00:12:03,750 --> 00:12:07,860
<font color="#E5E5E5">we embed in the program to authenticate</font>

301
00:12:05,910 --> 00:12:09,780
<font color="#E5E5E5">the calls and transitions</font><font color="#CCCCCC"> to make sure</font>

302
00:12:07,860 --> 00:12:15,000
that<font color="#E5E5E5"> they're authorized in both</font>

303
00:12:09,780 --> 00:12:16,860
directions then we use a micro emulator

304
00:12:15,000 --> 00:12:19,860
which emulates<font color="#E5E5E5"> in software all the</font>

305
00:12:16,860 --> 00:12:22,050
<font color="#E5E5E5">effects of the store instructions this</font>

306
00:12:19,860 --> 00:12:23,670
overcomes two limitations limitations of

307
00:12:22,050 --> 00:12:26,520
static analysis it allows us<font color="#E5E5E5"> to provide</font>

308
00:12:23,670 --> 00:12:27,990
<font color="#E5E5E5">do</font><font color="#CCCCCC"> dynamic profiling of the application</font>

309
00:12:26,520 --> 00:12:30,420
to determine accesses<font color="#CCCCCC"> that weren't</font>

310
00:12:27,990 --> 00:12:34,110
identified<font color="#E5E5E5"> during our static analysis</font>

311
00:12:30,420 --> 00:12:36,810
<font color="#E5E5E5">and it also allows access to sub</font><font color="#CCCCCC"> MPU</font>

312
00:12:34,110 --> 00:12:39,180
regions or memory regions smaller than

313
00:12:36,810 --> 00:12:41,459
that are allowed by the<font color="#CCCCCC"> NP you to do</font>

314
00:12:39,180 --> 00:12:44,280
this we dynamically profile<font color="#CCCCCC"> a benign</font>

315
00:12:41,460 --> 00:12:46,320
execution of the program<font color="#CCCCCC"> we generate a</font>

316
00:12:44,280 --> 00:12:49,500
whitelist<font color="#CCCCCC"> and then encode that</font><font color="#E5E5E5"> whitelist</font>

317
00:12:46,320 --> 00:12:53,640
into read-only<font color="#E5E5E5"> data and then during</font>

318
00:12:49,500 --> 00:12:55,950
execution when a fault occurs<font color="#E5E5E5"> the micro</font>

319
00:12:53,640 --> 00:12:57,540
emulator<font color="#E5E5E5"> checks to see if the fault</font>

320
00:12:55,950 --> 00:13:00,150
occurred on an address<font color="#CCCCCC"> that's authorized</font>

321
00:12:57,540 --> 00:13:01,349
<font color="#E5E5E5">and if it is the native will perform the</font>

322
00:13:00,150 --> 00:13:03,630
effects<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> write and return to</font>

323
00:13:01,350 --> 00:13:05,340
execution we also use the micro emulator

324
00:13:03,630 --> 00:13:08,390
to provide protections of the<font color="#E5E5E5"> stack</font>

325
00:13:05,340 --> 00:13:11,100
<font color="#E5E5E5">which I've depicted here on the right</font>

326
00:13:08,390 --> 00:13:12,750
the every<font color="#E5E5E5"> time there</font><font color="#CCCCCC"> is a compartment</font>

327
00:13:11,100 --> 00:13:14,880
transition the previous portion<font color="#CCCCCC"> of the</font>

328
00:13:12,750 --> 00:13:18,300
stack is made read-only<font color="#CCCCCC"> using a</font><font color="#E5E5E5"> memory</font>

329
00:13:14,880 --> 00:13:19,680
protection units and then new<font color="#CCCCCC"> law this</font>

330
00:13:18,300 --> 00:13:21,510
allows the new the compartment to add

331
00:13:19,680 --> 00:13:24,060
new locals to the

332
00:13:21,510 --> 00:13:25,980
stack with read/write permissions but if

333
00:13:24,060 --> 00:13:27,780
it needs to access<font color="#E5E5E5"> any prior part of the</font>

334
00:13:25,980 --> 00:13:29,490
stack or<font color="#E5E5E5"> needs to write any prior part</font>

335
00:13:27,780 --> 00:13:31,079
of the stack<font color="#E5E5E5"> the micro granulator would</font>

336
00:13:29,490 --> 00:13:36,180
be used<font color="#E5E5E5"> to enable those rights and a</font>

337
00:13:31,080 --> 00:13:39,900
whitelist<font color="#E5E5E5"> also used</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> then evaluated</font>

338
00:13:36,180 --> 00:13:41,489
our application on you<font color="#E5E5E5"> our valuated aces</font>

339
00:13:39,900 --> 00:13:44,340
using the three policies which<font color="#E5E5E5"> I</font>

340
00:13:41,490 --> 00:13:47,670
described previously<font color="#E5E5E5"> five applications</font>

341
00:13:44,340 --> 00:13:49,590
on<font color="#E5E5E5"> a</font><font color="#CCCCCC"> cortex m4</font><font color="#E5E5E5"> development board the</font>

342
00:13:47,670 --> 00:13:52,020
first<font color="#E5E5E5"> application we used was pin lock</font>

343
00:13:49,590 --> 00:13:53,610
pin lock is an example of a<font color="#E5E5E5"> smart lock</font>

344
00:13:52,020 --> 00:13:55,949
which we wrote it takes a pin<font color="#E5E5E5"> over a</font>

345
00:13:53,610 --> 00:13:57,990
serial<font color="#E5E5E5"> port and if that pin is correct</font>

346
00:13:55,950 --> 00:14:02,520
<font color="#CCCCCC">has the pin and they have to hit the</font>

347
00:13:57,990 --> 00:14:04,290
hash matches a saved<font color="#E5E5E5"> pin then we turn on</font>

348
00:14:02,520 --> 00:14:07,050
<font color="#E5E5E5">on</font><font color="#CCCCCC"> led signifying that a lock would be</font>

349
00:14:04,290 --> 00:14:11,040
unlocked the other applications<font color="#CCCCCC"> fat FS</font>

350
00:14:07,050 --> 00:14:13,800
<font color="#CCCCCC">micro sd</font><font color="#E5E5E5"> TCP echo LCD micro</font><font color="#CCCCCC"> sd and</font>

351
00:14:11,040 --> 00:14:15,480
animation<font color="#E5E5E5"> are all example applications</font>

352
00:14:13,800 --> 00:14:19,530
that were provided<font color="#E5E5E5"> with the development</font>

353
00:14:15,480 --> 00:14:22,440
board<font color="#E5E5E5"> we used for evaluation to</font>

354
00:14:19,530 --> 00:14:24,990
understand better how aces<font color="#CCCCCC"> affects the</font>

355
00:14:22,440 --> 00:14:27,240
security<font color="#CCCCCC"> of applications we examined a</font>

356
00:14:24,990 --> 00:14:30,210
case<font color="#E5E5E5"> study or on pin lock where an</font>

357
00:14:27,240 --> 00:14:33,390
attacker<font color="#E5E5E5"> wants to unlock the lock using</font>

358
00:14:30,210 --> 00:14:36,510
a<font color="#E5E5E5"> right whatwhere memory vulnerability</font>

359
00:14:33,390 --> 00:14:38,730
and we this<font color="#E5E5E5"> a function we say is in</font><font color="#CCCCCC"> the</font>

360
00:14:36,510 --> 00:14:39,720
<font color="#CCCCCC">howl you aren't receive</font><font color="#E5E5E5"> IT function</font>

361
00:14:38,730 --> 00:14:41,370
which is the<font color="#CCCCCC"> function which</font><font color="#E5E5E5"> is</font>

362
00:14:39,720 --> 00:14:43,920
responsible<font color="#E5E5E5"> for</font><font color="#CCCCCC"> receiving data from the</font>

363
00:14:41,370 --> 00:14:45,270
UART there's four ways<font color="#CCCCCC"> that the attacker</font>

364
00:14:43,920 --> 00:14:47,280
could unlock the<font color="#E5E5E5"> lock on this</font>

365
00:14:45,270 --> 00:14:49,620
application<font color="#CCCCCC"> the first two</font><font color="#E5E5E5"> are over</font>

366
00:14:47,280 --> 00:14:52,530
<font color="#CCCCCC">rights</font><font color="#E5E5E5"> so you can overwrite the stored</font>

367
00:14:49,620 --> 00:14:55,740
pin and global the global variable<font color="#E5E5E5"> get</font>

368
00:14:52,530 --> 00:14:57,750
it<font color="#E5E5E5"> over directly right the GPIO pin to</font>

369
00:14:55,740 --> 00:15:00,210
unlock the lock<font color="#E5E5E5"> it could also perform</font>

370
00:14:57,750 --> 00:15:01,830
<font color="#CCCCCC">control flow hijacks</font><font color="#E5E5E5"> first as a direct</font>

371
00:15:00,210 --> 00:15:03,810
control flow hijack where they call the

372
00:15:01,830 --> 00:15:05,700
unlock directly call the unlock<font color="#CCCCCC"> function</font>

373
00:15:03,810 --> 00:15:08,219
the others where they<font color="#CCCCCC"> deputized another</font>

374
00:15:05,700 --> 00:15:13,140
function which<font color="#CCCCCC"> calls</font><font color="#E5E5E5"> the control flow or</font>

375
00:15:08,220 --> 00:15:15,090
<font color="#E5E5E5">cause calls the unlock function to call</font>

376
00:15:13,140 --> 00:15:17,670
<font color="#E5E5E5">the unlock</font><font color="#CCCCCC"> function by providing</font><font color="#E5E5E5"> it the</font>

377
00:15:15,090 --> 00:15:21,390
appropriate inputs to<font color="#CCCCCC"> make it call the</font>

378
00:15:17,670 --> 00:15:22,890
unlock<font color="#CCCCCC"> function notice</font><font color="#E5E5E5"> that the naive</font>

379
00:15:21,390 --> 00:15:24,660
<font color="#CCCCCC">file name and optimized file name policy</font>

380
00:15:22,890 --> 00:15:26,910
protect against all<font color="#E5E5E5"> four with</font><font color="#CCCCCC"> the</font>

381
00:15:24,660 --> 00:15:29,760
peripheral policy<font color="#E5E5E5"> only protects against</font>

382
00:15:26,910 --> 00:15:31,920
GPIO attack this<font color="#E5E5E5"> is because the GPA of</font>

383
00:15:29,760 --> 00:15:33,810
the global variable<font color="#E5E5E5"> containing the pin</font>

384
00:15:31,920 --> 00:15:35,130
the unlock<font color="#E5E5E5"> function and functions which</font>

385
00:15:33,810 --> 00:15:36,750
call the unlock<font color="#CCCCCC"> function are all</font>

386
00:15:35,130 --> 00:15:40,980
the same compartment<font color="#E5E5E5"> as the hell you</font>

387
00:15:36,750 --> 00:15:43,470
aren't<font color="#E5E5E5"> received function we then</font>

388
00:15:40,980 --> 00:15:45,090
<font color="#CCCCCC">evaluate the</font><font color="#E5E5E5"> runtime of aces and find</font>

389
00:15:43,470 --> 00:15:46,650
that it<font color="#E5E5E5"> can have moderate impact it can</font>

390
00:15:45,090 --> 00:15:50,160
also have very<font color="#CCCCCC"> high impact depending on</font>

391
00:15:46,650 --> 00:15:53,880
the<font color="#CCCCCC"> policy so in their graph the the</font>

392
00:15:50,160 --> 00:15:57,180
<font color="#E5E5E5">axis is the number of times overhead so</font>

393
00:15:53,880 --> 00:16:01,560
we can have<font color="#CCCCCC"> 13 to</font><font color="#E5E5E5"> 25 percent overhead</font>

394
00:15:57,180 --> 00:16:04,349
from peripheral policy<font color="#E5E5E5"> and then up to</font><font color="#CCCCCC"> 5</font>

395
00:16:01,560 --> 00:16:05,819
and<font color="#CCCCCC"> 5.7 overhead the emulating of</font>

396
00:16:04,350 --> 00:16:07,890
instructions it causes the largest

397
00:16:05,820 --> 00:16:09,780
amount of the increase the graph depicts

398
00:16:07,890 --> 00:16:12,120
<font color="#E5E5E5">in the brown the amount</font><font color="#CCCCCC"> of time spent</font>

399
00:16:09,780 --> 00:16:14,220
<font color="#E5E5E5">emulating instructions the</font><font color="#CCCCCC"> blues</font><font color="#E5E5E5"> time</font>

400
00:16:12,120 --> 00:16:18,960
entering compartments and<font color="#E5E5E5"> red is or</font>

401
00:16:14,220 --> 00:16:21,090
exiting compartments and the<font color="#E5E5E5"> blue red is</font>

402
00:16:18,960 --> 00:16:24,600
entering compartments<font color="#E5E5E5"> blue is exiting</font>

403
00:16:21,090 --> 00:16:26,220
compartments the emulation<font color="#E5E5E5"> replaces a</font>

404
00:16:24,600 --> 00:16:29,040
single is the<font color="#CCCCCC"> largest</font><font color="#E5E5E5"> source of our</font>

405
00:16:26,220 --> 00:16:30,810
overhead and this is because it<font color="#E5E5E5"> replaces</font>

406
00:16:29,040 --> 00:16:36,750
a single<font color="#E5E5E5"> instruction with hundreds of</font>

407
00:16:30,810 --> 00:16:39,150
instructions and a interrupts call we

408
00:16:36,750 --> 00:16:40,980
then<font color="#E5E5E5"> evaluate</font><font color="#CCCCCC"> the memory overhead</font><font color="#E5E5E5"> and</font>

409
00:16:39,150 --> 00:16:43,590
memory overheads broken into two parts

410
00:16:40,980 --> 00:16:45,570
<font color="#CCCCCC">the changes to the flash which is</font>

411
00:16:43,590 --> 00:16:51,750
read-only data<font color="#E5E5E5"> and changes to the RAM</font>

412
00:16:45,570 --> 00:16:53,280
and<font color="#CCCCCC"> the RAM or in flash</font><font color="#E5E5E5"> we add the we</font>

413
00:16:51,750 --> 00:16:55,680
have fragmentation<font color="#E5E5E5"> which is caused by</font>

414
00:16:53,280 --> 00:16:58,920
meeting<font color="#E5E5E5"> the requirements this is the red</font>

415
00:16:55,680 --> 00:17:00,209
color<font color="#E5E5E5"> fragmentation is met but it's</font>

416
00:16:58,920 --> 00:17:01,650
caused by<font color="#E5E5E5"> meeting the requirements of</font>

417
00:17:00,210 --> 00:17:04,439
the<font color="#CCCCCC"> MTU</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> required that all regions</font>

418
00:17:01,650 --> 00:17:05,670
be a power<font color="#E5E5E5"> of</font><font color="#CCCCCC"> 2 in size</font><font color="#E5E5E5"> and the</font>

419
00:17:04,439 --> 00:17:08,520
counselor<font color="#E5E5E5"> the largest part of our</font>

420
00:17:05,670 --> 00:17:09,959
overhead we also make changes<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

421
00:17:08,520 --> 00:17:12,750
code when we instrument the code which

422
00:17:09,959 --> 00:17:14,189
<font color="#E5E5E5">is shown in blue the</font><font color="#CCCCCC"> run time we add our</font>

423
00:17:12,750 --> 00:17:17,699
<font color="#E5E5E5">run</font><font color="#CCCCCC"> time which</font><font color="#E5E5E5"> is the compartment</font>

424
00:17:14,189 --> 00:17:19,890
switcher and emulator<font color="#E5E5E5"> which is the tan</font>

425
00:17:17,699 --> 00:17:21,720
<font color="#CCCCCC">color and then we add</font><font color="#E5E5E5"> metadata for</font>

426
00:17:19,890 --> 00:17:24,270
encoding transitions and white lists

427
00:17:21,720 --> 00:17:27,689
<font color="#E5E5E5">which is to the</font><font color="#CCCCCC"> gray in the</font><font color="#E5E5E5"> RAM again</font>

428
00:17:24,270 --> 00:17:30,240
the largest impact is caused by

429
00:17:27,689 --> 00:17:33,950
fragmentation<font color="#E5E5E5"> and we add a small runtime</font>

430
00:17:30,240 --> 00:17:36,090
amount of runtime<font color="#E5E5E5"> memory to save the</font>

431
00:17:33,950 --> 00:17:39,630
compartment stack and micro emulators

432
00:17:36,090 --> 00:17:42,419
stack the<font color="#E5E5E5"> next generation of MP use</font><font color="#CCCCCC"> a</font>

433
00:17:39,630 --> 00:17:44,130
char<font color="#E5E5E5"> with the time of developing this</font>

434
00:17:42,420 --> 00:17:45,420
had not<font color="#E5E5E5"> been there were no parts that</font>

435
00:17:44,130 --> 00:17:47,370
had it but<font color="#E5E5E5"> the architecture has been</font>

436
00:17:45,420 --> 00:17:48,990
<font color="#E5E5E5">released do not have power of two</font>

437
00:17:47,370 --> 00:17:53,040
alignment requirements which<font color="#CCCCCC"> will</font>

438
00:17:48,990 --> 00:17:56,100
remove the fragmentation<font color="#E5E5E5"> overhead in</font>

439
00:17:53,040 --> 00:17:59,970
<font color="#E5E5E5">conclusion aces applies lease privileges</font>

440
00:17:56,100 --> 00:18:02,219
<font color="#CCCCCC">ty ot devices does not require a</font><font color="#E5E5E5"> changes</font>

441
00:17:59,970 --> 00:18:04,500
the application logic<font color="#E5E5E5"> and</font><font color="#CCCCCC"> uses existing</font>

442
00:18:02,220 --> 00:18:06,120
<font color="#E5E5E5">hardware faces automatically creates</font>

443
00:18:04,500 --> 00:18:08,280
enforces sub thread level level

444
00:18:06,120 --> 00:18:10,320
compartments this decouples the security

445
00:18:08,280 --> 00:18:12,120
policy from application development<font color="#CCCCCC"> it</font>

446
00:18:10,320 --> 00:18:15,270
<font color="#E5E5E5">frees the developer from having to</font>

447
00:18:12,120 --> 00:18:17,850
manage the hardware<font color="#E5E5E5"> constraints of the</font>

448
00:18:15,270 --> 00:18:19,080
security hardware and then enables

449
00:18:17,850 --> 00:18:21,240
research and creating compartment

450
00:18:19,080 --> 00:18:23,280
creating compartmentalization policies

451
00:18:21,240 --> 00:18:25,290
our goal is to<font color="#E5E5E5"> provide the mechanisms to</font>

452
00:18:23,280 --> 00:18:26,879
enable compartments to be formed<font color="#E5E5E5"> and we</font>

453
00:18:25,290 --> 00:18:29,370
evaluated<font color="#E5E5E5"> a few policies though there</font>

454
00:18:26,880 --> 00:18:30,660
are many many<font color="#E5E5E5"> more possible our code</font>

455
00:18:29,370 --> 00:18:33,000
<font color="#E5E5E5">will</font><font color="#CCCCCC"> be in that our</font><font color="#E5E5E5"> code will</font><font color="#CCCCCC"> be</font>

456
00:18:30,660 --> 00:18:35,910
<font color="#E5E5E5">available at github</font><font color="#CCCCCC"> as soon as it's</font>

457
00:18:33,000 --> 00:18:38,340
through review at<font color="#CCCCCC"> sandia</font><font color="#E5E5E5"> I'll now</font><font color="#CCCCCC"> take</font>

458
00:18:35,910 --> 00:18:46,630
any questions

459
00:18:38,340 --> 00:18:46,629
[Applause]

460
00:18:49,650 --> 00:19:05,800
we have plenty<font color="#E5E5E5"> of time for questions</font>

461
00:18:52,260 --> 00:19:07,360
<font color="#CCCCCC">please come yeah yeah it runs so during</font>

462
00:19:05,800 --> 00:19:13,870
the development<font color="#CCCCCC"> process that's running a</font>

463
00:19:07,360 --> 00:19:15,669
whitelist<font color="#CCCCCC"> in a in a record mode so it</font>

464
00:19:13,870 --> 00:19:18,189
records accesses<font color="#E5E5E5"> and then during the</font>

465
00:19:15,670 --> 00:19:19,780
<font color="#E5E5E5">actual</font><font color="#CCCCCC"> OP execution it runs in an</font>

466
00:19:18,190 --> 00:19:20,380
enforced mode where it checks the

467
00:19:19,780 --> 00:19:24,129
whitelist

468
00:19:20,380 --> 00:19:26,610
<font color="#E5E5E5">so it runs during that deployment</font><font color="#CCCCCC"> okay</font>

469
00:19:24,130 --> 00:19:26,610
<font color="#E5E5E5">thank you</font>

470
00:19:32,679 --> 00:19:36,789
<font color="#E5E5E5">all right so I have a question or more</font>

471
00:19:35,230 --> 00:19:39,070
of a<font color="#E5E5E5"> clarification for you</font>

472
00:19:36,789 --> 00:19:41,559
I saw that one of<font color="#E5E5E5"> the assumptions</font><font color="#CCCCCC"> that</font>

473
00:19:39,070 --> 00:19:44,439
you made is<font color="#CCCCCC"> that code</font><font color="#E5E5E5"> can only belong to</font>

474
00:19:41,559 --> 00:19:46,779
<font color="#E5E5E5">one compartment right so then how do you</font>

475
00:19:44,440 --> 00:19:54,369
deal with<font color="#E5E5E5"> say shared functions or</font>

476
00:19:46,779 --> 00:19:56,200
library functions so there is one the

477
00:19:54,369 --> 00:19:58,449
program like standard libraries<font color="#CCCCCC"> from</font>

478
00:19:56,200 --> 00:20:00,639
<font color="#E5E5E5">precompiled libraries are put into a</font>

479
00:19:58,450 --> 00:20:02,649
default region and that default<font color="#E5E5E5"> those</font>

480
00:20:00,639 --> 00:20:04,959
then execute with the permissions of<font color="#CCCCCC"> the</font>

481
00:20:02,649 --> 00:20:06,549
compartment<font color="#CCCCCC"> that calls them so for</font>

482
00:20:04,960 --> 00:20:08,860
example mem copy if it's used in

483
00:20:06,549 --> 00:20:10,570
<font color="#CCCCCC">multiple functions</font><font color="#E5E5E5"> or multiple from</font>

484
00:20:08,860 --> 00:20:11,799
<font color="#E5E5E5">multiple compartments every time it runs</font>

485
00:20:10,570 --> 00:20:17,049
it would run with<font color="#E5E5E5"> the permissions of the</font>

486
00:20:11,799 --> 00:20:18,460
compartment<font color="#CCCCCC"> from which it was</font><font color="#E5E5E5"> called all</font>

487
00:20:17,049 --> 00:20:20,789
right let's<font color="#CCCCCC"> thank the speaker</font><font color="#E5E5E5"> one more</font>

488
00:20:18,460 --> 00:20:20,789
<font color="#CCCCCC">time</font>

