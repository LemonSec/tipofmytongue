1
00:00:10,520 --> 00:00:15,379
so my name is Shankara pile or and today

2
00:00:13,280 --> 00:00:17,060
I'll be presenting moonshine<font color="#E5E5E5"> optimizing</font>

3
00:00:15,380 --> 00:00:19,070
OS<font color="#CCCCCC"> puzzlers seed selection with trace</font>

4
00:00:17,060 --> 00:00:21,020
distillation<font color="#E5E5E5"> so this is joint work with</font>

5
00:00:19,070 --> 00:00:23,119
Andrew a day<font color="#CCCCCC"> and professor saman Jonna</font>

6
00:00:21,020 --> 00:00:26,509
<font color="#E5E5E5">from Columbia University</font><font color="#CCCCCC"> so let's get</font>

7
00:00:23,119 --> 00:00:27,890
started<font color="#CCCCCC"> as you all</font><font color="#E5E5E5"> know security</font>

8
00:00:26,509 --> 00:00:30,079
<font color="#CCCCCC">vulnerabilities in the OS are</font>

9
00:00:27,890 --> 00:00:31,550
<font color="#E5E5E5">particularly dangerous as they can be</font>

10
00:00:30,079 --> 00:00:32,418
<font color="#E5E5E5">used by attackers to completely</font>

11
00:00:31,550 --> 00:00:35,120
<font color="#CCCCCC">compromised</font>

12
00:00:32,418 --> 00:00:36,769
an affected system<font color="#E5E5E5"> OS fuzzing is a</font>

13
00:00:35,120 --> 00:00:38,989
popular<font color="#CCCCCC"> technique for automatically</font>

14
00:00:36,770 --> 00:00:40,309
<font color="#E5E5E5">finding these vulnerabilities as most</font>

15
00:00:38,989 --> 00:00:43,099
often<font color="#CCCCCC"> applied to</font><font color="#E5E5E5"> the system call</font>

16
00:00:40,309 --> 00:00:45,649
interface<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is for two main reasons</font>

17
00:00:43,100 --> 00:00:48,589
first system calls can be<font color="#E5E5E5"> invoked by</font>

18
00:00:45,649 --> 00:00:50,300
unprivileged user programs<font color="#E5E5E5"> so any bug in</font>

19
00:00:48,589 --> 00:00:52,010
the system<font color="#CCCCCC"> call implementation could</font>

20
00:00:50,300 --> 00:00:53,718
<font color="#E5E5E5">lead to a serious</font><font color="#CCCCCC"> security vulnerability</font>

21
00:00:52,010 --> 00:00:56,449
like a<font color="#E5E5E5"> privilege escalation or</font>

22
00:00:53,719 --> 00:00:58,670
information<font color="#E5E5E5"> leaked to the system call</font>

23
00:00:56,449 --> 00:01:00,920
interface as a whole exercises a large

24
00:00:58,670 --> 00:01:03,679
and diverse portion of the kernel logic

25
00:01:00,920 --> 00:01:05,840
so any bug in the kernel can<font color="#E5E5E5"> probably</font>

26
00:01:03,679 --> 00:01:09,350
probably<font color="#E5E5E5"> be triggered through the system</font>

27
00:01:05,840 --> 00:01:11,900
call interface<font color="#E5E5E5"> now</font><font color="#CCCCCC"> I'll provide a brief</font>

28
00:01:09,350 --> 00:01:13,250
overview<font color="#E5E5E5"> of OS fuzzing so OS buzzer is</font>

29
00:01:11,900 --> 00:01:15,590
<font color="#CCCCCC">you usually start with</font><font color="#E5E5E5"> a collection of</font>

30
00:01:13,250 --> 00:01:18,200
synthetic seed programs which are just

31
00:01:15,590 --> 00:01:20,390
sequences of system<font color="#E5E5E5"> calls these programs</font>

32
00:01:18,200 --> 00:01:22,850
are then run on the target OS to find

33
00:01:20,390 --> 00:01:24,860
bugs the<font color="#E5E5E5"> buzzer will then iteratively</font>

34
00:01:22,850 --> 00:01:27,229
mutate<font color="#E5E5E5"> and generate new programs in</font>

35
00:01:24,860 --> 00:01:28,939
either a black<font color="#E5E5E5"> box manner or by using</font>

36
00:01:27,229 --> 00:01:31,490
some sort<font color="#E5E5E5"> of feedback like code coverage</font>

37
00:01:28,939 --> 00:01:33,589
<font color="#E5E5E5">however</font><font color="#CCCCCC"> the most important point</font><font color="#E5E5E5"> here is</font>

38
00:01:31,490 --> 00:01:36,350
that in order<font color="#CCCCCC"> for these system calls</font><font color="#E5E5E5"> to</font>

39
00:01:33,590 --> 00:01:38,060
actually test the core kernel logic<font color="#E5E5E5"> they</font>

40
00:01:36,350 --> 00:01:41,479
often<font color="#E5E5E5"> often times require some</font>

41
00:01:38,060 --> 00:01:43,159
<font color="#CCCCCC">pre-existing kernel</font><font color="#E5E5E5"> state and the only</font>

42
00:01:41,479 --> 00:01:46,520
way this kernel<font color="#E5E5E5"> state can be set</font><font color="#CCCCCC"> up is</font>

43
00:01:43,159 --> 00:01:47,750
by other system calls and in particular

44
00:01:46,520 --> 00:01:49,429
in<font color="#CCCCCC"> order for that state to be set up</font>

45
00:01:47,750 --> 00:01:51,950
properly<font color="#CCCCCC"> these system calls</font><font color="#E5E5E5"> must be</font>

46
00:01:49,430 --> 00:01:55,009
executed in a particular order<font color="#CCCCCC"> we refer</font>

47
00:01:51,950 --> 00:01:57,320
<font color="#CCCCCC">to these as dependencies an existing</font><font color="#E5E5E5"> OS</font>

48
00:01:55,009 --> 00:01:59,000
fuzzers<font color="#E5E5E5"> rely on thousands of hard-coded</font>

49
00:01:57,320 --> 00:02:01,100
rules to<font color="#E5E5E5"> properly set up these</font>

50
00:01:59,000 --> 00:02:04,430
dependencies which requires significant

51
00:02:01,100 --> 00:02:06,710
manual<font color="#CCCCCC"> effort and it's hard to scale our</font>

52
00:02:04,430 --> 00:02:09,200
work focuses<font color="#CCCCCC"> on</font><font color="#E5E5E5"> this aspect of OS</font>

53
00:02:06,710 --> 00:02:11,720
fuzzing<font color="#E5E5E5"> in the next few slides</font><font color="#CCCCCC"> I'll talk</font>

54
00:02:09,199 --> 00:02:13,670
in more<font color="#E5E5E5"> detail</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> to why</font><font color="#CCCCCC"> OS fuzzers use</font>

55
00:02:11,720 --> 00:02:15,830
these manual rules and why it's hard to

56
00:02:13,670 --> 00:02:17,570
scale<font color="#E5E5E5"> and afterwards I'll show how</font><font color="#CCCCCC"> our</font>

57
00:02:15,830 --> 00:02:19,700
work moonshine can improve the

58
00:02:17,570 --> 00:02:21,620
performance<font color="#CCCCCC"> of OS fuzzers by generating</font>

59
00:02:19,700 --> 00:02:22,910
seeds from system<font color="#CCCCCC"> called traces of</font><font color="#E5E5E5"> real</font>

60
00:02:21,620 --> 00:02:25,560
programs

61
00:02:22,910 --> 00:02:27,840
so as you know the goal of those<font color="#E5E5E5"> fuzzer</font>

62
00:02:25,560 --> 00:02:29,700
is to find as<font color="#E5E5E5"> many bugs as possible but</font>

63
00:02:27,840 --> 00:02:32,190
<font color="#E5E5E5">the more code the fuzzer can test the</font>

64
00:02:29,700 --> 00:02:34,739
more bugs<font color="#CCCCCC"> it'll find but before</font><font color="#E5E5E5"> I can</font>

65
00:02:32,190 --> 00:02:36,450
test the deeper kernel logic it must be

66
00:02:34,740 --> 00:02:38,310
able to<font color="#E5E5E5"> generate system calls that</font><font color="#CCCCCC"> can</font>

67
00:02:36,450 --> 00:02:40,950
bypass the shallow<font color="#E5E5E5"> error handling</font>

68
00:02:38,310 --> 00:02:42,510
regions but the<font color="#CCCCCC"> fuzzier cannot do this</font>

69
00:02:40,950 --> 00:02:44,970
if it just randomly generates these

70
00:02:42,510 --> 00:02:46,679
system<font color="#CCCCCC"> calls and their arguments and to</font>

71
00:02:44,970 --> 00:02:49,230
see why<font color="#E5E5E5"> let's go over a simple example</font>

72
00:02:46,680 --> 00:02:51,600
<font color="#E5E5E5">of what is required</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> generate</font><font color="#CCCCCC"> even a</font>

73
00:02:49,230 --> 00:02:53,579
<font color="#E5E5E5">write system call so here's the system</font>

74
00:02:51,600 --> 00:02:56,370
<font color="#E5E5E5">call definition and let's start with the</font>

75
00:02:53,580 --> 00:02:58,680
first<font color="#E5E5E5"> argument so even though it's an</font><font color="#CCCCCC"> N</font>

76
00:02:56,370 --> 00:03:00,690
<font color="#E5E5E5">type we all know that this value must</font>

77
00:02:58,680 --> 00:03:02,640
correspond to a file descriptor<font color="#CCCCCC"> that's</font>

78
00:03:00,690 --> 00:03:05,400
in an open state with right permissions

79
00:03:02,640 --> 00:03:08,220
<font color="#E5E5E5">and that this value must be produced by</font>

80
00:03:05,400 --> 00:03:10,440
another<font color="#E5E5E5"> system call like open so as you</font>

81
00:03:08,220 --> 00:03:12,330
can<font color="#E5E5E5"> imagine if the fuzzer just randomly</font>

82
00:03:10,440 --> 00:03:13,800
generates<font color="#E5E5E5"> these values it's very</font>

83
00:03:12,330 --> 00:03:16,580
unlikely that it<font color="#E5E5E5"> will</font><font color="#CCCCCC"> generate a valid</font>

84
00:03:13,800 --> 00:03:18,690
system call<font color="#E5E5E5"> let alone the required open</font>

85
00:03:16,580 --> 00:03:20,790
<font color="#E5E5E5">the same is true</font><font color="#CCCCCC"> for the second</font><font color="#E5E5E5"> argument</font>

86
00:03:18,690 --> 00:03:23,220
<font color="#E5E5E5">buff which has to be</font><font color="#CCCCCC"> a valid user</font>

87
00:03:20,790 --> 00:03:25,590
pointer but what's<font color="#E5E5E5"> interesting here is</font>

88
00:03:23,220 --> 00:03:27,630
<font color="#E5E5E5">that both buff and the third argument</font>

89
00:03:25,590 --> 00:03:29,670
<font color="#E5E5E5">count are actually dependent</font><font color="#CCCCCC"> on each</font>

90
00:03:27,630 --> 00:03:31,920
other<font color="#E5E5E5"> since the entire memory region</font>

91
00:03:29,670 --> 00:03:34,320
between buff and buff let's count has to

92
00:03:31,920 --> 00:03:36,238
be valid user memory<font color="#E5E5E5"> so these arguments</font>

93
00:03:34,320 --> 00:03:37,950
are generated<font color="#CCCCCC"> independently then that</font>

94
00:03:36,239 --> 00:03:39,920
will<font color="#E5E5E5"> greatly increase the chances</font><font color="#CCCCCC"> that</font>

95
00:03:37,950 --> 00:03:42,420
the call will fail

96
00:03:39,920 --> 00:03:44,850
therefore in<font color="#E5E5E5"> order</font><font color="#CCCCCC"> to generate</font><font color="#E5E5E5"> these</font>

97
00:03:42,420 --> 00:03:47,070
valid system calls<font color="#CCCCCC"> OS fuzzers need to be</font>

98
00:03:44,850 --> 00:03:49,920
able<font color="#CCCCCC"> to track</font><font color="#E5E5E5"> and maintain system</font><font color="#CCCCCC"> call</font>

99
00:03:47,070 --> 00:03:52,320
dependencies<font color="#E5E5E5"> so how do they actually do</font>

100
00:03:49,920 --> 00:03:54,358
this they do<font color="#E5E5E5"> this by</font><font color="#CCCCCC"> using templates</font>

101
00:03:52,320 --> 00:03:56,370
<font color="#E5E5E5">with thousands of hard-coded rules and</font>

102
00:03:54,359 --> 00:03:58,470
like I<font color="#CCCCCC"> said</font><font color="#E5E5E5"> before these aren't just</font>

103
00:03:56,370 --> 00:04:01,200
simple rules<font color="#CCCCCC"> to encode</font><font color="#E5E5E5"> but often require</font>

104
00:03:58,470 --> 00:04:03,239
some significant manual<font color="#CCCCCC"> effort and to</font>

105
00:04:01,200 --> 00:04:04,950
get a sense<font color="#CCCCCC"> of the level</font><font color="#E5E5E5"> of detail let's</font>

106
00:04:03,239 --> 00:04:07,049
take a look at an example<font color="#E5E5E5"> template from</font>

107
00:04:04,950 --> 00:04:09,358
sis<font color="#CCCCCC"> caller</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> state of the art</font><font color="#E5E5E5"> OS buzzer</font>

108
00:04:07,049 --> 00:04:11,010
for<font color="#E5E5E5"> the Linux kernel so here's the same</font>

109
00:04:09,359 --> 00:04:13,859
system<font color="#CCCCCC"> called definition for right</font><font color="#E5E5E5"> but</font>

110
00:04:11,010 --> 00:04:14,970
<font color="#CCCCCC">just in the sis caller templates</font><font color="#E5E5E5"> and the</font>

111
00:04:13,859 --> 00:04:17,220
first difference we should note is that

112
00:04:14,970 --> 00:04:19,140
the file descriptor<font color="#E5E5E5"> is its own type</font>

113
00:04:17,220 --> 00:04:21,900
which<font color="#CCCCCC"> has been marked as a resource</font><font color="#E5E5E5"> and</font>

114
00:04:19,140 --> 00:04:24,120
I'll<font color="#E5E5E5"> call this a semantics type open</font>

115
00:04:21,899 --> 00:04:25,530
returns<font color="#E5E5E5"> a file descriptor and right</font>

116
00:04:24,120 --> 00:04:28,410
takes the file descriptor as its<font color="#E5E5E5"> first</font>

117
00:04:25,530 --> 00:04:30,419
argument<font color="#E5E5E5"> so with this information the</font>

118
00:04:28,410 --> 00:04:32,220
fuzzer knows that the first<font color="#E5E5E5"> argument of</font>

119
00:04:30,419 --> 00:04:35,250
<font color="#CCCCCC">write must</font><font color="#E5E5E5"> be produced by</font><font color="#CCCCCC"> another system</font>

120
00:04:32,220 --> 00:04:36,420
<font color="#E5E5E5">call like open the same is true for the</font>

121
00:04:35,250 --> 00:04:38,160
second<font color="#CCCCCC"> argument buff</font>

122
00:04:36,420 --> 00:04:40,170
which has<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> a valid user pointer oh</font>

123
00:04:38,160 --> 00:04:41,850
sorry second<font color="#CCCCCC"> Oh same is true for</font><font color="#E5E5E5"> the</font>

124
00:04:40,170 --> 00:04:44,040
second<font color="#E5E5E5"> argument buff which is of a type</font>

125
00:04:41,850 --> 00:04:46,650
buffer so it'll always be a valid user

126
00:04:44,040 --> 00:04:48,780
pointer<font color="#E5E5E5"> but this dependency</font><font color="#CCCCCC"> between town</font>

127
00:04:46,650 --> 00:04:50,669
and<font color="#E5E5E5"> buff is now explicitly encoded in</font>

128
00:04:48,780 --> 00:04:53,789
the templates since count is now always

129
00:04:50,670 --> 00:04:55,290
said to be the length of the buffer so

130
00:04:53,790 --> 00:04:57,930
with this information<font color="#CCCCCC"> is easy to see</font>

131
00:04:55,290 --> 00:05:01,200
<font color="#E5E5E5">that a fuzzer will be able to much more</font>

132
00:04:57,930 --> 00:05:04,500
easily generate valid system calls<font color="#E5E5E5"> but</font>

133
00:05:01,200 --> 00:05:06,659
<font color="#E5E5E5">unfortunately it's</font><font color="#CCCCCC"> hard to apply this</font>

134
00:05:04,500 --> 00:05:08,370
level of detail<font color="#CCCCCC"> to the entire system</font>

135
00:05:06,660 --> 00:05:09,870
call interface<font color="#E5E5E5"> which consists of</font>

136
00:05:08,370 --> 00:05:12,270
hundreds<font color="#E5E5E5"> and hundreds of system calls</font>

137
00:05:09,870 --> 00:05:15,180
<font color="#E5E5E5">some of which have thousands of variants</font>

138
00:05:12,270 --> 00:05:17,400
like<font color="#CCCCCC"> I octal and moreover whenever</font>

139
00:05:15,180 --> 00:05:19,770
system calls get added or calls get

140
00:05:17,400 --> 00:05:21,690
<font color="#CCCCCC">enhanced these templates must be updated</font>

141
00:05:19,770 --> 00:05:24,270
<font color="#CCCCCC">so</font><font color="#E5E5E5"> that the fuzzer can trigger those</font>

142
00:05:21,690 --> 00:05:27,330
paths so it's not just<font color="#E5E5E5"> a one-time cost</font>

143
00:05:24,270 --> 00:05:29,690
<font color="#E5E5E5">but it's an ongoing manual effort so</font>

144
00:05:27,330 --> 00:05:32,550
with this in<font color="#CCCCCC"> mind how</font><font color="#E5E5E5"> can we do better</font>

145
00:05:29,690 --> 00:05:34,830
<font color="#E5E5E5">we can do better by generating seeds</font>

146
00:05:32,550 --> 00:05:36,960
from system call traces of<font color="#E5E5E5"> real programs</font>

147
00:05:34,830 --> 00:05:38,609
and real programs are interesting

148
00:05:36,960 --> 00:05:40,620
because they<font color="#E5E5E5"> are required to maintain</font>

149
00:05:38,610 --> 00:05:43,170
<font color="#E5E5E5">these dependencies in order to just</font>

150
00:05:40,620 --> 00:05:45,570
<font color="#E5E5E5">function correctly and if we can gather</font>

151
00:05:43,170 --> 00:05:47,970
a large collection of traces from<font color="#E5E5E5"> a</font>

152
00:05:45,570 --> 00:05:49,620
diverse set<font color="#CCCCCC"> of existing</font><font color="#E5E5E5"> programs we will</font>

153
00:05:47,970 --> 00:05:52,080
find some<font color="#E5E5E5"> interesting sequences of calls</font>

154
00:05:49,620 --> 00:05:54,200
<font color="#CCCCCC">that are hard</font><font color="#E5E5E5"> for these fuzzers to</font>

155
00:05:52,080 --> 00:05:57,599
generate with<font color="#E5E5E5"> just their manual rules</font>

156
00:05:54,200 --> 00:05:59,130
but<font color="#E5E5E5"> we need to be careful</font><font color="#CCCCCC"> because real</font>

157
00:05:57,600 --> 00:06:01,680
program traces can<font color="#CCCCCC"> be arbitrarily large</font>

158
00:05:59,130 --> 00:06:03,930
<font color="#CCCCCC">and if we use</font><font color="#E5E5E5"> them directly as seeds</font>

159
00:06:01,680 --> 00:06:06,060
<font color="#E5E5E5">will significantly slow</font><font color="#CCCCCC"> down the fuzzers</font>

160
00:06:03,930 --> 00:06:08,280
performance<font color="#E5E5E5"> but that's where moonshine</font>

161
00:06:06,060 --> 00:06:09,840
comes in<font color="#E5E5E5"> moonshine takes these traces as</font>

162
00:06:08,280 --> 00:06:12,270
input and puts them through<font color="#E5E5E5"> a</font>

163
00:06:09,840 --> 00:06:14,630
distillation process which produces<font color="#CCCCCC"> a</font>

164
00:06:12,270 --> 00:06:18,030
small set of compact and diverse seeds

165
00:06:14,630 --> 00:06:20,010
that achieve<font color="#CCCCCC"> the same</font><font color="#E5E5E5"> functionality as</font>

166
00:06:18,030 --> 00:06:22,320
<font color="#CCCCCC">the original set</font><font color="#E5E5E5"> at a fraction of the</font>

167
00:06:20,010 --> 00:06:25,920
size<font color="#CCCCCC"> and we refer</font><font color="#E5E5E5"> to this process</font><font color="#CCCCCC"> as</font>

168
00:06:22,320 --> 00:06:28,140
trace distillation but before<font color="#E5E5E5"> I describe</font>

169
00:06:25,920 --> 00:06:30,390
how moonshine works<font color="#CCCCCC"> I'd like to briefly</font>

170
00:06:28,140 --> 00:06:32,159
go over why we can't<font color="#E5E5E5"> use existing seed</font>

171
00:06:30,390 --> 00:06:34,320
selection<font color="#E5E5E5"> algorithms to perform this</font>

172
00:06:32,160 --> 00:06:36,540
trace distillation<font color="#E5E5E5"> so most of these</font>

173
00:06:34,320 --> 00:06:39,240
strategies<font color="#E5E5E5"> are some variations of this</font>

174
00:06:36,540 --> 00:06:41,700
<font color="#CCCCCC">men set algorithm Mincy takes a large</font>

175
00:06:39,240 --> 00:06:44,280
collection of inputs<font color="#E5E5E5"> and then uses a</font>

176
00:06:41,700 --> 00:06:46,280
greedy heuristic<font color="#E5E5E5"> to find the smallest</font>

177
00:06:44,280 --> 00:06:48,380
subset<font color="#CCCCCC"> that</font><font color="#E5E5E5"> achieves the same code</font>

178
00:06:46,280 --> 00:06:50,359
Ridge on the<font color="#CCCCCC"> target application as</font><font color="#E5E5E5"> the</font>

179
00:06:48,380 --> 00:06:53,780
original set this subset is then

180
00:06:50,360 --> 00:06:55,400
directly<font color="#E5E5E5"> used as seeds for the</font><font color="#CCCCCC"> fuzzer so</font>

181
00:06:53,780 --> 00:06:57,559
how could we<font color="#CCCCCC"> use min set</font><font color="#E5E5E5"> to do trace</font>

182
00:06:55,400 --> 00:06:59,870
distillation<font color="#E5E5E5"> there are two obvious</font>

183
00:06:57,560 --> 00:07:02,720
possibilities<font color="#E5E5E5"> so we could use it to get</font>

184
00:06:59,870 --> 00:07:05,510
a small subset of the<font color="#E5E5E5"> traces but that's</font>

185
00:07:02,720 --> 00:07:07,040
not good<font color="#CCCCCC"> enough because</font><font color="#E5E5E5"> even a because</font>

186
00:07:05,510 --> 00:07:08,840
even if<font color="#E5E5E5"> we take a small subset of the</font>

187
00:07:07,040 --> 00:07:11,660
traces<font color="#E5E5E5"> the traces could still be</font>

188
00:07:08,840 --> 00:07:13,460
arbitrarily large<font color="#CCCCCC"> and a</font><font color="#E5E5E5"> small set</font><font color="#CCCCCC"> of</font>

189
00:07:11,660 --> 00:07:16,040
very large<font color="#E5E5E5"> traces will slow down the</font>

190
00:07:13,460 --> 00:07:17,510
fuzzy performance we could<font color="#E5E5E5"> also</font><font color="#CCCCCC"> use it</font>

191
00:07:16,040 --> 00:07:20,290
<font color="#CCCCCC">to get</font><font color="#E5E5E5"> a small subset of the overall</font>

192
00:07:17,510 --> 00:07:22,400
calls and this<font color="#E5E5E5"> will be much more compact</font>

193
00:07:20,290 --> 00:07:24,230
<font color="#CCCCCC">but if we do</font><font color="#E5E5E5"> not include their</font>

194
00:07:22,400 --> 00:07:26,239
dependencies then<font color="#E5E5E5"> these calls will fail</font>

195
00:07:24,230 --> 00:07:29,690
and<font color="#E5E5E5"> on and they're unlikely to provide</font>

196
00:07:26,240 --> 00:07:32,419
any benefit<font color="#CCCCCC"> to the OS</font><font color="#E5E5E5"> buzzer but there</font>

197
00:07:29,690 --> 00:07:34,460
are tools<font color="#CCCCCC"> like a FLT min which are</font>

198
00:07:32,419 --> 00:07:38,539
designed to minimize individual inputs

199
00:07:34,460 --> 00:07:41,090
to the<font color="#CCCCCC"> fuzzer and they work</font><font color="#E5E5E5"> by first</font>

200
00:07:38,540 --> 00:07:43,010
arbitrarily removing some amount<font color="#E5E5E5"> of data</font>

201
00:07:41,090 --> 00:07:45,138
<font color="#E5E5E5">from the input so in this case some</font>

202
00:07:43,010 --> 00:07:46,940
amount of system calls<font color="#E5E5E5"> and then did you</font>

203
00:07:45,139 --> 00:07:49,300
<font color="#E5E5E5">check</font><font color="#CCCCCC"> to make sure that this removal</font>

204
00:07:46,940 --> 00:07:51,710
didn't result<font color="#E5E5E5"> in any loss</font><font color="#CCCCCC"> and coverage</font>

205
00:07:49,300 --> 00:07:54,229
but<font color="#E5E5E5"> this</font><font color="#CCCCCC"> doesn't</font><font color="#E5E5E5"> really work with system</font>

206
00:07:51,710 --> 00:07:56,090
call traces because<font color="#E5E5E5"> this tool doesn't</font>

207
00:07:54,229 --> 00:07:58,250
<font color="#E5E5E5">have any understanding of the complex</font>

208
00:07:56,090 --> 00:08:00,409
<font color="#E5E5E5">dependencies between system calls so</font>

209
00:07:58,250 --> 00:08:02,120
when it just removes<font color="#CCCCCC"> a on an arbitrary</font>

210
00:08:00,410 --> 00:08:03,740
<font color="#CCCCCC">amount of calls it could easily be</font>

211
00:08:02,120 --> 00:08:06,350
removing one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the interesting ones or</font>

212
00:08:03,740 --> 00:08:07,729
their dependencies so<font color="#CCCCCC"> in practice</font>

213
00:08:06,350 --> 00:08:09,860
<font color="#E5E5E5">something</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> team men will have to</font>

214
00:08:07,729 --> 00:08:11,599
exhaustively go through sequences of

215
00:08:09,860 --> 00:08:13,910
<font color="#E5E5E5">calls before it finds</font><font color="#CCCCCC"> some minimal one</font>

216
00:08:11,600 --> 00:08:18,560
which can make it prohibitively slow on

217
00:08:13,910 --> 00:08:20,300
even moderately sized traces so with

218
00:08:18,560 --> 00:08:21,979
this in mind<font color="#E5E5E5"> there</font><font color="#CCCCCC"> are two</font><font color="#E5E5E5"> challenges we</font>

219
00:08:20,300 --> 00:08:23,900
<font color="#CCCCCC">need</font><font color="#E5E5E5"> to address in order to perform an</font>

220
00:08:21,979 --> 00:08:25,760
efficient trace distillation we need to

221
00:08:23,900 --> 00:08:27,919
be able<font color="#CCCCCC"> to reliably</font><font color="#E5E5E5"> minimize the</font><font color="#CCCCCC"> trace</font>

222
00:08:25,760 --> 00:08:29,960
size while<font color="#E5E5E5"> also tracking</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> system call</font>

223
00:08:27,919 --> 00:08:33,500
dependencies<font color="#E5E5E5"> so that their</font><font color="#CCCCCC"> behavior is</font>

224
00:08:29,960 --> 00:08:35,390
preserved but before proceeding<font color="#CCCCCC"> I'd like</font>

225
00:08:33,500 --> 00:08:37,880
to describe in more detail<font color="#E5E5E5"> why we choose</font>

226
00:08:35,390 --> 00:08:39,949
to<font color="#CCCCCC"> minimize the traces</font><font color="#E5E5E5"> and in our</font>

227
00:08:37,880 --> 00:08:42,140
experiments with<font color="#E5E5E5"> sis caller which is our</font>

228
00:08:39,950 --> 00:08:44,300
target<font color="#E5E5E5"> OS fuzzer we found that when we</font>

229
00:08:42,140 --> 00:08:46,370
<font color="#E5E5E5">use seed programs that had more and more</font>

230
00:08:44,300 --> 00:08:48,859
calls the<font color="#CCCCCC"> fuzzers performance got worse</font>

231
00:08:46,370 --> 00:08:51,560
<font color="#E5E5E5">oh sorry</font><font color="#CCCCCC"> the fuzz first performance got</font>

232
00:08:48,860 --> 00:08:54,740
worse by performance<font color="#CCCCCC"> I mean the number</font>

233
00:08:51,560 --> 00:08:57,109
of<font color="#CCCCCC"> mutations</font><font color="#E5E5E5"> program executions as well</font>

234
00:08:54,740 --> 00:08:58,850
as programs generated and we ultimately

235
00:08:57,110 --> 00:08:59,690
found<font color="#E5E5E5"> that when we use these traces</font>

236
00:08:58,850 --> 00:09:02,030
<font color="#E5E5E5">directly as</font>

237
00:08:59,690 --> 00:09:04,820
seeds<font color="#CCCCCC"> sis caller was unable to find any</font>

238
00:09:02,030 --> 00:09:08,270
new bugs<font color="#E5E5E5"> and so the graph on the right</font>

239
00:09:04,820 --> 00:09:10,340
is<font color="#CCCCCC"> just</font><font color="#E5E5E5"> one example of this impact so</font>

240
00:09:08,270 --> 00:09:11,810
the x-axis<font color="#E5E5E5"> shows the time spent fussing</font>

241
00:09:10,340 --> 00:09:14,050
and the<font color="#CCCCCC"> y-axis is</font><font color="#E5E5E5"> the total</font><font color="#CCCCCC"> number of</font>

242
00:09:11,810 --> 00:09:16,699
mutations<font color="#CCCCCC"> that's his color performed and</font>

243
00:09:14,050 --> 00:09:19,280
this graph<font color="#CCCCCC"> shows the</font><font color="#E5E5E5"> performance of sis</font>

244
00:09:16,700 --> 00:09:21,950
<font color="#CCCCCC">color when using different C's seeds of</font>

245
00:09:19,280 --> 00:09:23,630
varying sizes<font color="#E5E5E5"> and as you can</font><font color="#CCCCCC"> see when</font>

246
00:09:21,950 --> 00:09:25,490
<font color="#CCCCCC">using the larger and larger seeds the</font>

247
00:09:23,630 --> 00:09:27,680
ones<font color="#E5E5E5"> that had more calls per program</font>

248
00:09:25,490 --> 00:09:31,190
<font color="#CCCCCC">siskel are performed noticeably fewer</font>

249
00:09:27,680 --> 00:09:32,510
mutations but<font color="#E5E5E5"> the programs we're talking</font>

250
00:09:31,190 --> 00:09:34,760
about<font color="#E5E5E5"> are really between a hundred to a</font>

251
00:09:32,510 --> 00:09:36,140
thousand<font color="#E5E5E5"> calls per program but if you</font>

252
00:09:34,760 --> 00:09:38,900
look at some<font color="#E5E5E5"> of these larger real</font>

253
00:09:36,140 --> 00:09:40,610
programs like chromium<font color="#E5E5E5"> even a</font><font color="#CCCCCC"> 10-second</font>

254
00:09:38,900 --> 00:09:42,740
<font color="#E5E5E5">even in a</font><font color="#CCCCCC"> 10-second trace they can</font>

255
00:09:40,610 --> 00:09:46,430
produce half a<font color="#E5E5E5"> million calls which</font><font color="#CCCCCC"> is</font>

256
00:09:42,740 --> 00:09:48,380
far too large for direct<font color="#CCCCCC"> use but</font>

257
00:09:46,430 --> 00:09:50,180
fortunately the number of calls within<font color="#E5E5E5"> a</font>

258
00:09:48,380 --> 00:09:52,160
trace<font color="#E5E5E5"> that contribute new coverage</font><font color="#CCCCCC"> is</font>

259
00:09:50,180 --> 00:09:54,050
<font color="#E5E5E5">just</font><font color="#CCCCCC"> a small fraction of the</font><font color="#E5E5E5"> total</font>

260
00:09:52,160 --> 00:09:55,790
number<font color="#CCCCCC"> of calls</font><font color="#E5E5E5"> and we found that even</font>

261
00:09:54,050 --> 00:09:58,790
for<font color="#E5E5E5"> these relatively compact small</font>

262
00:09:55,790 --> 00:10:00,500
programs like<font color="#E5E5E5"> LS only about a tenth of</font>

263
00:09:58,790 --> 00:10:03,380
the calls actually<font color="#E5E5E5"> contributed new</font>

264
00:10:00,500 --> 00:10:05,420
coverage so our initial strategy will be

265
00:10:03,380 --> 00:10:07,160
<font color="#E5E5E5">to keep the calls</font><font color="#CCCCCC"> that contribute the</font>

266
00:10:05,420 --> 00:10:11,209
<font color="#E5E5E5">most coverage using</font><font color="#CCCCCC"> a greedy heuristic</font>

267
00:10:07,160 --> 00:10:13,390
<font color="#E5E5E5">and then also include their dependencies</font>

268
00:10:11,210 --> 00:10:17,690
so<font color="#CCCCCC"> that their behavior</font><font color="#E5E5E5"> remains unchanged</font>

269
00:10:13,390 --> 00:10:20,330
so moonshine<font color="#E5E5E5"> tracks these two different</font>

270
00:10:17,690 --> 00:10:21,980
classes of dependencies explicit and

271
00:10:20,330 --> 00:10:24,290
implicit dependencies<font color="#E5E5E5"> and these are the</font>

272
00:10:21,980 --> 00:10:27,560
dominant forms dominant ones in our

273
00:10:24,290 --> 00:10:29,540
<font color="#CCCCCC">traces so broadly speaking you</font><font color="#E5E5E5"> can think</font>

274
00:10:27,560 --> 00:10:31,760
of<font color="#E5E5E5"> an explicit dependency as a case</font>

275
00:10:29,540 --> 00:10:34,310
where this shared state is passed

276
00:10:31,760 --> 00:10:36,200
<font color="#CCCCCC">through the system call</font><font color="#E5E5E5"> arguments and an</font>

277
00:10:34,310 --> 00:10:37,910
implicit dependency is a case where a

278
00:10:36,200 --> 00:10:40,160
<font color="#E5E5E5">system call affects the</font><font color="#CCCCCC"> behavior of</font>

279
00:10:37,910 --> 00:10:43,130
another<font color="#E5E5E5"> call by modifying some shared</font>

280
00:10:40,160 --> 00:10:45,260
kernel<font color="#E5E5E5"> state so now</font><font color="#CCCCCC"> I'll provide more</font>

281
00:10:43,130 --> 00:10:48,260
precise definitions of each<font color="#E5E5E5"> starting</font>

282
00:10:45,260 --> 00:10:50,600
with the explicit dependencies<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we say</font>

283
00:10:48,260 --> 00:10:54,620
a call<font color="#CCCCCC"> a is explicitly dependent on call</font>

284
00:10:50,600 --> 00:10:56,480
B if B produces a result<font color="#E5E5E5"> used by a so in</font>

285
00:10:54,620 --> 00:10:58,580
the example below<font color="#E5E5E5"> we would say</font><font color="#CCCCCC"> that</font>

286
00:10:56,480 --> 00:11:00,530
<font color="#CCCCCC">write is explicitly depend on</font><font color="#E5E5E5"> an open</font>

287
00:10:58,580 --> 00:11:03,110
because<font color="#E5E5E5"> open produces a file descriptor</font>

288
00:11:00,530 --> 00:11:07,520
of value<font color="#CCCCCC"> 3</font><font color="#E5E5E5"> used in the first argument of</font>

289
00:11:03,110 --> 00:11:09,740
right now we say a call<font color="#E5E5E5"> a is implicitly</font>

290
00:11:07,520 --> 00:11:12,020
dependent on call B if B X that affects

291
00:11:09,740 --> 00:11:12,830
the execution of a by modifying<font color="#E5E5E5"> some</font>

292
00:11:12,020 --> 00:11:14,810
shared kernel<font color="#E5E5E5"> date</font>

293
00:11:12,830 --> 00:11:16,160
structure so this<font color="#CCCCCC"> is a bit</font><font color="#E5E5E5"> more</font>

294
00:11:14,810 --> 00:11:18,650
complicated but I<font color="#CCCCCC"> think a good example</font>

295
00:11:16,160 --> 00:11:21,199
<font color="#E5E5E5">is between the</font><font color="#CCCCCC"> M</font><font color="#E5E5E5"> sink and M lock all</font>

296
00:11:18,650 --> 00:11:23,540
system calls<font color="#E5E5E5"> so in this case we would</font>

297
00:11:21,200 --> 00:11:25,850
<font color="#CCCCCC">say that M sink is implicitly dependent</font>

298
00:11:23,540 --> 00:11:29,240
on<font color="#E5E5E5"> M block all because M lock all</font>

299
00:11:25,850 --> 00:11:31,400
<font color="#E5E5E5">affects the execution of M sink B by</font>

300
00:11:29,240 --> 00:11:33,290
modifying all the vm flags fields of

301
00:11:31,400 --> 00:11:36,620
every vm a struct in the calling process

302
00:11:33,290 --> 00:11:38,599
<font color="#CCCCCC">and then in</font><font color="#E5E5E5"> M sinks execution</font><font color="#CCCCCC"> it checks</font>

303
00:11:36,620 --> 00:11:41,060
to<font color="#CCCCCC"> see if this field has</font><font color="#E5E5E5"> been marked as</font>

304
00:11:38,600 --> 00:11:45,050
locked and if it has it will set<font color="#CCCCCC"> air to</font>

305
00:11:41,060 --> 00:11:46,189
<font color="#E5E5E5">e busy so now though on to describe</font><font color="#CCCCCC"> how</font>

306
00:11:45,050 --> 00:11:48,140
moonshine actually<font color="#CCCCCC"> tracks these</font>

307
00:11:46,190 --> 00:11:50,240
dependencies<font color="#E5E5E5"> starting with the explicit</font>

308
00:11:48,140 --> 00:11:53,150
dependencies<font color="#CCCCCC"> so it does this by</font>

309
00:11:50,240 --> 00:11:55,340
statically analyzing the trace<font color="#E5E5E5"> so as it</font>

310
00:11:53,150 --> 00:11:57,500
parches parses each call it identifies

311
00:11:55,340 --> 00:11:59,630
all<font color="#CCCCCC"> the values that were returned along</font>

312
00:11:57,500 --> 00:12:01,070
<font color="#E5E5E5">with their</font><font color="#CCCCCC"> corresponding types and so</font>

313
00:11:59,630 --> 00:12:03,920
this type could either be a data type

314
00:12:01,070 --> 00:12:06,590
like an int<font color="#CCCCCC"> pointer string or</font><font color="#E5E5E5"> semantics</font>

315
00:12:03,920 --> 00:12:08,209
type<font color="#E5E5E5"> like a file descriptor</font><font color="#CCCCCC"> these type</font>

316
00:12:06,590 --> 00:12:10,700
value pairs are then inserted<font color="#CCCCCC"> into</font><font color="#E5E5E5"> a</font>

317
00:12:08,210 --> 00:12:13,700
hash map which<font color="#CCCCCC"> Maps the</font><font color="#E5E5E5"> pair to all the</font>

318
00:12:10,700 --> 00:12:16,580
calls which<font color="#CCCCCC"> produce that same pair we</font>

319
00:12:13,700 --> 00:12:17,900
call this map<font color="#CCCCCC"> a return cache then for</font>

320
00:12:16,580 --> 00:12:20,270
every<font color="#CCCCCC"> argument that is not modified</font>

321
00:12:17,900 --> 00:12:22,069
<font color="#E5E5E5">during the execution we construct its</font>

322
00:12:20,270 --> 00:12:25,069
type value pair and check to see<font color="#CCCCCC"> if it's</font>

323
00:12:22,070 --> 00:12:26,480
in the return cache<font color="#CCCCCC"> if it is we add all</font>

324
00:12:25,070 --> 00:12:30,020
the calls which produce<font color="#E5E5E5"> the pair has</font>

325
00:12:26,480 --> 00:12:32,060
explicit dependencies moonshine tracks

326
00:12:30,020 --> 00:12:33,770
the implicit dependencies by using<font color="#E5E5E5"> a</font>

327
00:12:32,060 --> 00:12:36,619
lightweight static analysis on the

328
00:12:33,770 --> 00:12:39,620
target<font color="#E5E5E5"> OS so it performs this analysis</font>

329
00:12:36,620 --> 00:12:42,530
at the system called definition and then

330
00:12:39,620 --> 00:12:45,080
it proceeds<font color="#E5E5E5"> to walk the kernel</font><font color="#CCCCCC"> ast well</font>

331
00:12:42,530 --> 00:12:47,449
track<font color="#E5E5E5"> it checking for two conditions</font><font color="#CCCCCC"> so</font>

332
00:12:45,080 --> 00:12:49,700
the first condition<font color="#E5E5E5"> is if a call C uses</font>

333
00:12:47,450 --> 00:12:51,560
some shared variable<font color="#E5E5E5"> V inside of a</font>

334
00:12:49,700 --> 00:12:55,010
conditional expression<font color="#E5E5E5"> then it will mark</font>

335
00:12:51,560 --> 00:12:57,770
<font color="#E5E5E5">C as read dependent on V and if a call C</font>

336
00:12:55,010 --> 00:12:59,780
writes to a shared variable<font color="#CCCCCC"> V</font><font color="#E5E5E5"> L</font><font color="#CCCCCC"> marks C</font>

337
00:12:57,770 --> 00:13:01,430
as a write dependent on V and this

338
00:12:59,780 --> 00:13:05,689
shared variable can be<font color="#CCCCCC"> a</font><font color="#E5E5E5"> global or a</font>

339
00:13:01,430 --> 00:13:07,579
process<font color="#E5E5E5"> wide structure so with this</font>

340
00:13:05,690 --> 00:13:10,370
information<font color="#E5E5E5"> we</font><font color="#CCCCCC"> were trying to</font><font color="#E5E5E5"> say if a</font>

341
00:13:07,580 --> 00:13:11,900
call a is implicitly depend<font color="#E5E5E5"> on call B by</font>

342
00:13:10,370 --> 00:13:14,030
taking the<font color="#CCCCCC"> intersection of a Zrii</font>

343
00:13:11,900 --> 00:13:16,069
dependencies and B's<font color="#CCCCCC"> write dependencies</font>

344
00:13:14,030 --> 00:13:18,620
and if this intersection<font color="#E5E5E5"> is</font><font color="#CCCCCC"> non-empty</font>

345
00:13:16,070 --> 00:13:21,980
<font color="#E5E5E5">it'll say that a is implicitly dependent</font>

346
00:13:18,620 --> 00:13:24,830
on B the<font color="#CCCCCC"> intuition here is</font><font color="#E5E5E5"> that if I</font>

347
00:13:21,980 --> 00:13:26,810
call a uses a<font color="#E5E5E5"> shared variable</font><font color="#CCCCCC"> V inside</font>

348
00:13:24,830 --> 00:13:28,820
of a conditional then<font color="#CCCCCC"> it's control flow</font>

349
00:13:26,810 --> 00:13:31,310
could depend<font color="#E5E5E5"> on the value inside of that</font>

350
00:13:28,820 --> 00:13:33,950
variable so any other system<font color="#E5E5E5"> call that</font>

351
00:13:31,310 --> 00:13:37,400
<font color="#E5E5E5">modifies that variable could affect</font><font color="#CCCCCC"> age</font>

352
00:13:33,950 --> 00:13:38,810
<font color="#E5E5E5">control flow so we note that both</font><font color="#CCCCCC"> of</font>

353
00:13:37,400 --> 00:13:40,699
these methods<font color="#E5E5E5"> for tracking the</font>

354
00:13:38,810 --> 00:13:43,550
dependencies<font color="#E5E5E5"> will have false positives</font>

355
00:13:40,700 --> 00:13:46,010
<font color="#CCCCCC">and</font><font color="#E5E5E5"> false negatives but as I'll show</font>

356
00:13:43,550 --> 00:13:48,170
later<font color="#CCCCCC"> moonshine</font><font color="#E5E5E5"> is still able</font><font color="#CCCCCC"> to</font>

357
00:13:46,010 --> 00:13:51,830
effectively distill these<font color="#CCCCCC"> traces while</font>

358
00:13:48,170 --> 00:13:53,360
preserving most of the dependencies<font color="#CCCCCC"> so</font>

359
00:13:51,830 --> 00:13:55,310
let's put this all<font color="#E5E5E5"> together and see how</font>

360
00:13:53,360 --> 00:13:57,920
moonshine will distill the trace on<font color="#E5E5E5"> the</font>

361
00:13:55,310 --> 00:13:59,300
<font color="#E5E5E5">left so recall that it starts by</font>

362
00:13:57,920 --> 00:14:01,610
identifying<font color="#E5E5E5"> the calls that contribute</font>

363
00:13:59,300 --> 00:14:04,880
the<font color="#CCCCCC"> most new coverage</font><font color="#E5E5E5"> so let's assume</font>

364
00:14:01,610 --> 00:14:09,740
<font color="#CCCCCC">that is these three so it'll add them to</font>

365
00:14:04,880 --> 00:14:11,089
the<font color="#E5E5E5"> distilled trace it will then add all</font>

366
00:14:09,740 --> 00:14:13,820
their dependencies starting<font color="#E5E5E5"> with the</font>

367
00:14:11,089 --> 00:14:15,890
explicit dependencies<font color="#E5E5E5"> so the it first</font>

368
00:14:13,820 --> 00:14:17,870
observes that a map is explicitly

369
00:14:15,890 --> 00:14:20,390
dependent on open because<font color="#CCCCCC"> of this shared</font>

370
00:14:17,870 --> 00:14:23,750
file descriptor so it adds open to the

371
00:14:20,390 --> 00:14:26,089
<font color="#E5E5E5">distill trace it then sees</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> M</font><font color="#CCCCCC"> sync</font>

372
00:14:23,750 --> 00:14:28,339
is explicitly dependent on M map<font color="#E5E5E5"> because</font>

373
00:14:26,089 --> 00:14:30,470
<font color="#E5E5E5">of this shared virtual address but they</font>

374
00:14:28,339 --> 00:14:33,050
are<font color="#E5E5E5"> already in our distill trace so it</font>

375
00:14:30,470 --> 00:14:34,610
doesn't do anything<font color="#E5E5E5"> since there are</font><font color="#CCCCCC"> no</font>

376
00:14:33,050 --> 00:14:37,310
more explicit dependencies it moves on

377
00:14:34,610 --> 00:14:39,410
to the implicit ones and the only one

378
00:14:37,310 --> 00:14:42,290
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> find is between M sync and M</font>

379
00:14:39,410 --> 00:14:43,760
lock all like I described before so

380
00:14:42,290 --> 00:14:45,530
it'll add M<font color="#E5E5E5"> lock all to the</font><font color="#CCCCCC"> distilled</font>

381
00:14:43,760 --> 00:14:47,420
trace but since there are no more

382
00:14:45,530 --> 00:14:50,990
dependencies<font color="#CCCCCC"> to add</font><font color="#E5E5E5"> it'll mark the trace</font>

383
00:14:47,420 --> 00:14:52,579
as distilled so our current

384
00:14:50,990 --> 00:14:55,160
<font color="#CCCCCC">implementation of</font><font color="#E5E5E5"> moonshine only</font>

385
00:14:52,580 --> 00:14:57,290
generates seeds for sis caller<font color="#CCCCCC"> which is</font>

386
00:14:55,160 --> 00:14:59,719
a Linux kernel fuzzer but we chose this

387
00:14:57,290 --> 00:15:01,459
color<font color="#E5E5E5"> because it has a very rich</font><font color="#CCCCCC"> set of</font>

388
00:14:59,720 --> 00:15:03,620
<font color="#E5E5E5">templates with a number of</font><font color="#CCCCCC"> sophisticated</font>

389
00:15:01,460 --> 00:15:05,839
manual rules<font color="#E5E5E5"> and it's also a</font>

390
00:15:03,620 --> 00:15:09,110
evolutionary<font color="#E5E5E5"> fuzzer so we know it'll</font>

391
00:15:05,839 --> 00:15:11,930
<font color="#E5E5E5">benefit from well chosen seeds we gather</font>

392
00:15:09,110 --> 00:15:14,000
traces using s trace<font color="#E5E5E5"> but we've also</font>

393
00:15:11,930 --> 00:15:17,449
extended<font color="#E5E5E5"> it to capture per system called</font>

394
00:15:14,000 --> 00:15:19,400
code coverage using<font color="#E5E5E5"> K cough we tracked</font>

395
00:15:17,450 --> 00:15:21,800
implicit dependencies using<font color="#E5E5E5"> smach a</font>

396
00:15:19,400 --> 00:15:24,860
static analysis<font color="#E5E5E5"> framework for the Linux</font>

397
00:15:21,800 --> 00:15:26,750
<font color="#E5E5E5">kernel we identify read dependencies</font>

398
00:15:24,860 --> 00:15:28,820
using a condition hook and write

399
00:15:26,750 --> 00:15:30,920
dependencies using a unary op and

400
00:15:28,820 --> 00:15:32,779
assignment hooks most of our

401
00:15:30,920 --> 00:15:35,479
implementation<font color="#E5E5E5"> is in go with a little</font>

402
00:15:32,779 --> 00:15:36,920
<font color="#E5E5E5">bit in C so now I'd like to share some</font>

403
00:15:35,480 --> 00:15:38,010
results<font color="#E5E5E5"> from our evaluation</font><font color="#CCCCCC"> of the</font>

404
00:15:36,920 --> 00:15:41,339
moonshine

405
00:15:38,010 --> 00:15:45,120
so our setup was we first<font color="#E5E5E5"> gathered about</font>

406
00:15:41,340 --> 00:15:46,590
<font color="#CCCCCC">3200 traces from four seed sources</font><font color="#E5E5E5"> the G</font>

407
00:15:45,120 --> 00:15:49,740
<font color="#CCCCCC">Lipsy test suite with an external</font>

408
00:15:46,590 --> 00:15:54,180
<font color="#E5E5E5">self-test the Linux testing project</font><font color="#CCCCCC"> LTP</font>

409
00:15:49,740 --> 00:15:55,800
and the open POSIX test suite all our

410
00:15:54,180 --> 00:15:59,609
results<font color="#CCCCCC"> are using seeds generated from</font>

411
00:15:55,800 --> 00:16:01,439
these traces so our first result is that

412
00:15:59,610 --> 00:16:02,730
moonshine<font color="#E5E5E5"> was able</font><font color="#CCCCCC"> to find 17 new</font>

413
00:16:01,440 --> 00:16:04,830
vulnerabilities than the Linux kernel

414
00:16:02,730 --> 00:16:07,410
that<font color="#CCCCCC"> sis caller could</font><font color="#E5E5E5"> not with its</font>

415
00:16:04,830 --> 00:16:09,960
manual rules alone<font color="#CCCCCC"> and a number of these</font>

416
00:16:07,410 --> 00:16:11,370
bugs had significant impact<font color="#E5E5E5"> and could be</font>

417
00:16:09,960 --> 00:16:14,580
<font color="#E5E5E5">used for a denial of service</font><font color="#CCCCCC"> or</font>

418
00:16:11,370 --> 00:16:15,660
privilege privilege escalation most of

419
00:16:14,580 --> 00:16:17,520
<font color="#E5E5E5">these bugs are also in the core</font>

420
00:16:15,660 --> 00:16:19,770
subsystems of<font color="#E5E5E5"> the kernel like the core</font>

421
00:16:17,520 --> 00:16:21,860
networking<font color="#E5E5E5"> and VFS which are among the</font>

422
00:16:19,770 --> 00:16:24,960
most widely<font color="#CCCCCC"> used</font><font color="#E5E5E5"> and well tested parts</font>

423
00:16:21,860 --> 00:16:26,670
but most importantly all<font color="#CCCCCC"> the seeds could</font>

424
00:16:24,960 --> 00:16:28,770
only be<font color="#E5E5E5"> found when using all of these</font>

425
00:16:26,670 --> 00:16:31,979
bugs could only be found<font color="#E5E5E5"> when using</font>

426
00:16:28,770 --> 00:16:34,199
distilled seeds and in particular<font color="#E5E5E5"> 10 out</font>

427
00:16:31,980 --> 00:16:36,480
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the 17 could only be found when using</font>

428
00:16:34,200 --> 00:16:41,190
<font color="#E5E5E5">seeds that maintained implicit and</font>

429
00:16:36,480 --> 00:16:43,380
explicit dependencies code coverage is

430
00:16:41,190 --> 00:16:45,330
<font color="#E5E5E5">another important feature to evaluate</font>

431
00:16:43,380 --> 00:16:47,400
the performance of fuzzers so we

432
00:16:45,330 --> 00:16:49,260
measured the<font color="#CCCCCC"> impact of moonshine on sis</font>

433
00:16:47,400 --> 00:16:51,900
<font color="#CCCCCC">college code coverage in a 24-hour</font>

434
00:16:49,260 --> 00:16:55,170
fuzzing period so the graph on<font color="#CCCCCC"> the right</font>

435
00:16:51,900 --> 00:16:56,850
shows<font color="#CCCCCC"> her results the x-axis is the time</font>

436
00:16:55,170 --> 00:17:00,390
spent<font color="#E5E5E5"> fuzzing and the y axis indicates</font>

437
00:16:56,850 --> 00:17:02,250
the total coverage<font color="#CCCCCC"> and we measured three</font>

438
00:17:00,390 --> 00:17:04,470
cases we measured sis color using

439
00:17:02,250 --> 00:17:06,420
justice manual rules<font color="#E5E5E5"> we measure the case</font>

440
00:17:04,470 --> 00:17:08,430
when<font color="#E5E5E5"> it used seeds</font><font color="#CCCCCC"> that tracked implicit</font>

441
00:17:06,420 --> 00:17:11,130
and explicit dependencies which we say

442
00:17:08,430 --> 00:17:12,840
is moonshine<font color="#CCCCCC"> i</font><font color="#E5E5E5"> plus</font><font color="#CCCCCC"> e and lastly the</font>

443
00:17:11,130 --> 00:17:15,870
case when it<font color="#CCCCCC"> just used seeds</font><font color="#E5E5E5"> that try to</font>

444
00:17:12,839 --> 00:17:17,429
explicit dependencies<font color="#E5E5E5"> moonshine</font><font color="#CCCCCC"> e so we</font>

445
00:17:15,869 --> 00:17:20,489
found that<font color="#E5E5E5"> just</font><font color="#CCCCCC"> tracking</font><font color="#E5E5E5"> the explicit</font>

446
00:17:17,430 --> 00:17:23,160
dependencies<font color="#E5E5E5"> resulted in a</font><font color="#CCCCCC"> 9.7%</font><font color="#E5E5E5"> code</font>

447
00:17:20,490 --> 00:17:25,290
coverage increase education<font color="#E5E5E5"> piece</font><font color="#CCCCCC"> and by</font>

448
00:17:23,160 --> 00:17:29,210
<font color="#E5E5E5">tracking both explicit and implicit</font><font color="#CCCCCC"> we</font>

449
00:17:25,290 --> 00:17:31,980
were<font color="#CCCCCC"> able to increase</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> to 13.1 and</font>

450
00:17:29,210 --> 00:17:34,110
finally we<font color="#E5E5E5"> find that moonshine is able</font>

451
00:17:31,980 --> 00:17:37,440
to effectively<font color="#E5E5E5"> address its challenges in</font>

452
00:17:34,110 --> 00:17:39,899
particular<font color="#CCCCCC"> arcs collection of traces</font><font color="#E5E5E5"> had</font>

453
00:17:37,440 --> 00:17:41,580
2.9 million total<font color="#E5E5E5"> calls but after</font>

454
00:17:39,900 --> 00:17:44,250
<font color="#E5E5E5">distillation this number went down to</font>

455
00:17:41,580 --> 00:17:46,800
just<font color="#CCCCCC"> 16,000 400 which is a hundred</font><font color="#E5E5E5"> and</font>

456
00:17:44,250 --> 00:17:48,780
<font color="#CCCCCC">seventy-six times smaller</font><font color="#E5E5E5"> but most</font>

457
00:17:46,800 --> 00:17:50,210
importantly these distill seeds<font color="#E5E5E5"> were</font>

458
00:17:48,780 --> 00:17:51,980
still able to<font color="#CCCCCC"> achieve</font>

459
00:17:50,210 --> 00:17:56,570
86% of the code coverage<font color="#E5E5E5"> from our</font>

460
00:17:51,980 --> 00:17:58,909
<font color="#CCCCCC">original set of traces now like to share</font>

461
00:17:56,570 --> 00:18:01,158
<font color="#E5E5E5">a one of the vulnerabilities that</font>

462
00:17:58,909 --> 00:18:03,830
moonshine discovered so this was<font color="#E5E5E5"> pretty</font>

463
00:18:01,159 --> 00:18:06,470
<font color="#E5E5E5">serious bug in the inotify subsystem and</font>

464
00:18:03,830 --> 00:18:08,840
it is due to a race<font color="#CCCCCC"> condition between</font>

465
00:18:06,470 --> 00:18:11,419
<font color="#E5E5E5">the kernel function</font><font color="#CCCCCC"> inotify</font><font color="#E5E5E5"> handle event</font>

466
00:18:08,840 --> 00:18:13,360
and the system called me<font color="#E5E5E5"> name so the</font>

467
00:18:11,419 --> 00:18:15,620
condition<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the bug is as follows</font><font color="#CCCCCC"> I</font>

468
00:18:13,360 --> 00:18:18,830
<font color="#E5E5E5">notify handle</font><font color="#CCCCCC"> events</font><font color="#E5E5E5"> starts running on</font>

469
00:18:15,620 --> 00:18:21,500
CPU<font color="#CCCCCC"> 1 and it</font><font color="#E5E5E5"> begins by allocating kernel</font>

470
00:18:18,830 --> 00:18:22,850
memory<font color="#E5E5E5"> for this event struck the</font>

471
00:18:21,500 --> 00:18:25,730
amounted allocates is based on the

472
00:18:22,850 --> 00:18:27,559
current<font color="#CCCCCC"> length of the file name</font><font color="#E5E5E5"> and then</font>

473
00:18:25,730 --> 00:18:29,480
after<font color="#E5E5E5"> this but in parallel another</font>

474
00:18:27,559 --> 00:18:30,678
thread will call rename that changes

475
00:18:29,480 --> 00:18:33,679
<font color="#E5E5E5">this file name to something which is</font>

476
00:18:30,679 --> 00:18:36,770
<font color="#E5E5E5">much longer but I notify handle event</font>

477
00:18:33,679 --> 00:18:38,899
<font color="#E5E5E5">doesn't expect this rename so it will</font>

478
00:18:36,770 --> 00:18:41,149
eventually<font color="#E5E5E5"> just</font><font color="#CCCCCC"> call ster copy to copy</font>

479
00:18:38,899 --> 00:18:44,330
<font color="#E5E5E5">the file name into the event but if this</font>

480
00:18:41,149 --> 00:18:46,699
<font color="#E5E5E5">executes after</font><font color="#CCCCCC"> the rename then it will</font>

481
00:18:44,330 --> 00:18:48,260
<font color="#E5E5E5">result in</font><font color="#CCCCCC"> a buffer overflow</font><font color="#E5E5E5"> and this can</font>

482
00:18:46,700 --> 00:18:51,140
be<font color="#E5E5E5"> used for a privilege escalation</font>

483
00:18:48,260 --> 00:18:52,850
attack we know that this bug was in the

484
00:18:51,140 --> 00:18:54,770
kernel for almost two years<font color="#E5E5E5"> and went</font>

485
00:18:52,850 --> 00:18:58,158
unnoticed until moonshine discovered it

486
00:18:54,770 --> 00:19:00,168
<font color="#E5E5E5">it was also in the core VFS subsystem so</font>

487
00:18:58,159 --> 00:19:03,380
it was in every<font color="#E5E5E5"> Linux distribution and</font>

488
00:19:00,169 --> 00:19:05,330
Android<font color="#E5E5E5"> so how did</font><font color="#CCCCCC"> we try and actually</font>

489
00:19:03,380 --> 00:19:07,220
help find this bug so this is the

490
00:19:05,330 --> 00:19:09,590
<font color="#CCCCCC">program</font><font color="#E5E5E5"> which caused the bug and it is a</font>

491
00:19:07,220 --> 00:19:12,830
distill seed that moonshine generated

492
00:19:09,590 --> 00:19:15,080
from<font color="#E5E5E5"> one of our LTP traces the program</font>

493
00:19:12,830 --> 00:19:18,399
the call is responsible for<font color="#E5E5E5"> the bug are</font>

494
00:19:15,080 --> 00:19:20,750
the<font color="#CCCCCC"> inotify add</font><font color="#E5E5E5"> watch close and rename</font>

495
00:19:18,399 --> 00:19:23,779
the actual race condition was between

496
00:19:20,750 --> 00:19:25,970
<font color="#CCCCCC">close</font><font color="#E5E5E5"> and rename and sis</font><font color="#CCCCCC"> collar</font><font color="#E5E5E5"> induced</font>

497
00:19:23,779 --> 00:19:28,039
this<font color="#E5E5E5"> bug by executing these calls in</font>

498
00:19:25,970 --> 00:19:33,260
separate threads which<font color="#CCCCCC"> we will often</font><font color="#E5E5E5"> do</font>

499
00:19:28,039 --> 00:19:35,179
<font color="#E5E5E5">to find racy bugs however the program on</font>

500
00:19:33,260 --> 00:19:38,059
its own<font color="#E5E5E5"> didn't trigger the bug but it</font>

501
00:19:35,179 --> 00:19:39,980
<font color="#E5E5E5">required sis</font><font color="#CCCCCC"> collar to mutate</font><font color="#E5E5E5"> this short</font>

502
00:19:38,059 --> 00:19:40,549
<font color="#E5E5E5">to string into something which was much</font>

503
00:19:39,980 --> 00:19:43,610
<font color="#E5E5E5">longer</font>

504
00:19:40,549 --> 00:19:45,799
and we<font color="#E5E5E5"> never observed this bug when we</font>

505
00:19:43,610 --> 00:19:47,240
use the undo still trace because<font color="#E5E5E5"> it was</font>

506
00:19:45,799 --> 00:19:51,320
unlikely<font color="#CCCCCC"> that this collar could ever</font>

507
00:19:47,240 --> 00:19:53,270
actually<font color="#CCCCCC"> make</font><font color="#E5E5E5"> this mutation so in</font>

508
00:19:51,320 --> 00:19:56,059
conclusion<font color="#E5E5E5"> the existing state-of-the-art</font>

509
00:19:53,270 --> 00:19:58,190
<font color="#E5E5E5">OS fuzzers rely heavily on thousands of</font>

510
00:19:56,059 --> 00:19:59,899
<font color="#E5E5E5">hard-coded rules to track system call</font>

511
00:19:58,190 --> 00:20:01,789
dependencies<font color="#E5E5E5"> and this requires</font>

512
00:19:59,899 --> 00:20:03,889
significant manual<font color="#E5E5E5"> effort and is hard to</font>

513
00:20:01,789 --> 00:20:05,780
<font color="#E5E5E5">scale but we have design</font>

514
00:20:03,890 --> 00:20:08,060
implemented and evaluated moonshine<font color="#CCCCCC"> a</font>

515
00:20:05,780 --> 00:20:10,220
framework that<font color="#E5E5E5"> automatically</font><font color="#CCCCCC"> generates</font>

516
00:20:08,060 --> 00:20:12,889
compact and diverse seeds from traces of

517
00:20:10,220 --> 00:20:14,690
real programs and it can automatically

518
00:20:12,890 --> 00:20:16,550
track and maintain system called

519
00:20:14,690 --> 00:20:19,190
dependencies using lightweight static

520
00:20:16,550 --> 00:20:20,960
analysis and<font color="#CCCCCC"> thus each generated by</font>

521
00:20:19,190 --> 00:20:23,150
moonshine<font color="#CCCCCC"> resulted in the discovery of</font>

522
00:20:20,960 --> 00:20:25,970
17 new vulnerabilities in the Linux

523
00:20:23,150 --> 00:20:28,010
<font color="#CCCCCC">kernel and with that we've also</font><font color="#E5E5E5"> released</font>

524
00:20:25,970 --> 00:20:29,870
<font color="#E5E5E5">moonshine as an</font><font color="#CCCCCC"> open-source tool here</font>

525
00:20:28,010 --> 00:20:31,940
<font color="#E5E5E5">and it's getting integrated into sis</font>

526
00:20:29,870 --> 00:20:35,379
<font color="#CCCCCC">collar</font><font color="#E5E5E5"> and so with that I'd be</font><font color="#CCCCCC"> happy to</font>

527
00:20:31,940 --> 00:20:36,310
take your questions now<font color="#CCCCCC"> or offline</font>

528
00:20:35,380 --> 00:20:40,740
[Applause]

529
00:20:36,310 --> 00:20:43,990
[Music]

530
00:20:40,740 --> 00:20:43,990
[Applause]

531
00:20:47,530 --> 00:20:54,410
<font color="#CCCCCC">I'm youngjun</font><font color="#E5E5E5"> buying from the first</font><font color="#CCCCCC"> one</font>

532
00:20:51,650 --> 00:20:57,970
<font color="#CCCCCC">he's</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> Tom</font><font color="#E5E5E5"> it uses the moonshine to</font>

533
00:20:54,410 --> 00:21:00,860
test the performance<font color="#CCCCCC"> box</font><font color="#E5E5E5"> in the kernel</font><font color="#CCCCCC"> I</font>

534
00:20:57,970 --> 00:21:04,490
have not considered<font color="#E5E5E5"> that</font><font color="#CCCCCC"> so off the top</font>

535
00:21:00,860 --> 00:21:06,020
<font color="#CCCCCC">of my head I do not know so</font><font color="#E5E5E5"> well I guess</font>

536
00:21:04,490 --> 00:21:07,640
in<font color="#CCCCCC"> general I know that there's been some</font>

537
00:21:06,020 --> 00:21:12,500
<font color="#E5E5E5">work in terms</font><font color="#CCCCCC"> of fuzzing to find</font>

538
00:21:07,640 --> 00:21:14,150
performance bugs so perhaps<font color="#E5E5E5"> it depends I</font>

539
00:21:12,500 --> 00:21:16,310
<font color="#CCCCCC">think your seed selection strategy would</font>

540
00:21:14,150 --> 00:21:18,440
have to be such that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know that the</font>

541
00:21:16,310 --> 00:21:20,659
fuzzer will mutate it in a way<font color="#CCCCCC"> that will</font>

542
00:21:18,440 --> 00:21:23,510
<font color="#CCCCCC">result</font><font color="#E5E5E5"> in longer executions but at the</font>

543
00:21:20,660 --> 00:21:25,520
top of my head I<font color="#CCCCCC"> don't know sorry the</font>

544
00:21:23,510 --> 00:21:27,680
second question<font color="#CCCCCC"> is like do plan to</font>

545
00:21:25,520 --> 00:21:32,570
<font color="#E5E5E5">support a</font><font color="#CCCCCC"> perv trace instead of</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> s</font>

546
00:21:27,680 --> 00:21:34,550
<font color="#E5E5E5">raise the status tastic</font><font color="#CCCCCC"> stick o sample</font>

547
00:21:32,570 --> 00:21:37,280
<font color="#CCCCCC">in trace so the perps rates Linux proof</font>

548
00:21:34,550 --> 00:21:40,899
tools<font color="#CCCCCC"> oh no we don't support that</font><font color="#E5E5E5"> now</font>

549
00:21:37,280 --> 00:21:40,899
<font color="#E5E5E5">but that's something</font><font color="#CCCCCC"> we can add</font>

550
00:21:43,179 --> 00:21:48,350
hi<font color="#CCCCCC"> our</font><font color="#E5E5E5"> dawn mu sunny</font><font color="#CCCCCC"> UC Irvine very nice</font>

551
00:21:46,400 --> 00:21:50,630
work<font color="#CCCCCC"> I had a question</font><font color="#E5E5E5"> about your slide</font>

552
00:21:48,350 --> 00:21:53,209
27<font color="#E5E5E5"> where you were showing the code</font>

553
00:21:50,630 --> 00:22:01,669
coverage<font color="#CCCCCC"> and I see that</font><font color="#E5E5E5"> that's 20 our</font>

554
00:21:53,210 --> 00:22:05,360
experiment oh<font color="#E5E5E5"> it said 24 hours I think</font>

555
00:22:01,669 --> 00:22:07,070
so yeah so so yes both<font color="#E5E5E5"> of these both of</font>

556
00:22:05,360 --> 00:22:09,979
the code<font color="#E5E5E5"> coverage both of these metrics</font>

557
00:22:07,070 --> 00:22:12,289
<font color="#E5E5E5">do saturate at that 24 hour limit</font>

558
00:22:09,980 --> 00:22:14,330
actually<font color="#CCCCCC"> be saturate a lot earlier</font><font color="#E5E5E5"> but</font>

559
00:22:12,289 --> 00:22:17,000
they<font color="#E5E5E5"> seem to both grow at the same rate</font>

560
00:22:14,330 --> 00:22:19,520
<font color="#E5E5E5">after 24 hours so it seems</font><font color="#CCCCCC"> like what our</font>

561
00:22:17,000 --> 00:22:21,590
<font color="#E5E5E5">seeds are doing are providing sis caller</font>

562
00:22:19,520 --> 00:22:22,730
access to new parts of the kernel<font color="#E5E5E5"> but</font>

563
00:22:21,590 --> 00:22:25,129
they're still getting stuck at that

564
00:22:22,730 --> 00:22:27,500
<font color="#CCCCCC">particularly</font><font color="#E5E5E5"> so you're saying at 24 hour</font>

565
00:22:25,130 --> 00:22:29,120
saturates after that is it's<font color="#E5E5E5"> not</font>

566
00:22:27,500 --> 00:22:30,460
increasing or<font color="#CCCCCC"> it's doing it's still</font>

567
00:22:29,120 --> 00:22:32,870
increasing<font color="#CCCCCC"> but slower</font>

568
00:22:30,460 --> 00:22:35,120
<font color="#CCCCCC">I mean it could eventually find some</font>

569
00:22:32,870 --> 00:22:38,379
branch and evaluated<font color="#E5E5E5"> to and then go much</font>

570
00:22:35,120 --> 00:22:42,229
deeper<font color="#E5E5E5"> okay</font>

571
00:22:38,380 --> 00:22:44,030
<font color="#E5E5E5">I'm Jerry Davis from Virginia Tech</font><font color="#CCCCCC"> it</font>

572
00:22:42,230 --> 00:22:45,620
seems if I understand<font color="#E5E5E5"> correctly like you</font>

573
00:22:44,030 --> 00:22:49,158
need access to<font color="#E5E5E5"> the operating</font><font color="#CCCCCC"> system</font>

574
00:22:45,620 --> 00:22:52,100
<font color="#CCCCCC">source code in</font><font color="#E5E5E5"> order to do</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> analysis</font>

575
00:22:49,159 --> 00:22:56,090
is<font color="#CCCCCC"> that correct</font><font color="#E5E5E5"> and if so what if you</font>

576
00:22:52,100 --> 00:22:58,039
didn't<font color="#E5E5E5"> have access to</font><font color="#CCCCCC"> the os code yeah</font>

577
00:22:56,090 --> 00:23:00,070
that's a good question<font color="#CCCCCC"> so currently it</font>

578
00:22:58,039 --> 00:23:03,500
does depend<font color="#E5E5E5"> on the source code based</font>

579
00:23:00,070 --> 00:23:06,408
technique but I think there<font color="#E5E5E5"> are two two</font>

580
00:23:03,500 --> 00:23:08,510
possible options<font color="#CCCCCC"> one you could do a</font>

581
00:23:06,409 --> 00:23:11,659
dynamic<font color="#E5E5E5"> method may be at the hypervisor</font>

582
00:23:08,510 --> 00:23:14,990
level to track these dependencies but we

583
00:23:11,659 --> 00:23:16,909
have<font color="#E5E5E5"> not gone in that direction yet you</font>

584
00:23:14,990 --> 00:23:19,220
could also maybe do a<font color="#CCCCCC"> maybe a binary</font>

585
00:23:16,909 --> 00:23:20,870
analysis but I have not tried<font color="#CCCCCC"> that</font>

586
00:23:19,220 --> 00:23:23,540
either so thank you

587
00:23:20,870 --> 00:23:26,119
let's thank<font color="#E5E5E5"> our speaker again</font>

588
00:23:23,540 --> 00:23:28,178
[Applause]

589
00:23:26,119 --> 00:23:28,178
<font color="#E5E5E5">you</font>

