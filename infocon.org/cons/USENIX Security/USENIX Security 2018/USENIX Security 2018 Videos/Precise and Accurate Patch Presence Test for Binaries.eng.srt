1
00:00:10,340 --> 00:00:15,260
thank you for coming to my foundation

2
00:00:12,259 --> 00:00:17,750
<font color="#CCCCCC">everyone</font><font color="#E5E5E5"> and today I'm very</font><font color="#CCCCCC"> happy to</font>

3
00:00:15,260 --> 00:00:20,689
bring<font color="#E5E5E5"> our paper</font><font color="#CCCCCC"> scissors and</font><font color="#E5E5E5"> accurate</font>

4
00:00:17,750 --> 00:00:23,210
<font color="#CCCCCC">cash present as foreigners</font><font color="#E5E5E5"> my name is</font>

5
00:00:20,689 --> 00:00:26,300
<font color="#E5E5E5">Hamza</font><font color="#CCCCCC"> I'm a PhD student</font><font color="#E5E5E5"> from UC</font>

6
00:00:23,210 --> 00:00:30,259
Riverside and<font color="#CCCCCC"> microsurgery is</font><font color="#E5E5E5"> also my</font>

7
00:00:26,300 --> 00:00:32,239
advisor<font color="#E5E5E5"> ok let's first take a look at</font>

8
00:00:30,259 --> 00:00:36,070
<font color="#E5E5E5">the problem we</font><font color="#CCCCCC"> want to solve in</font><font color="#E5E5E5"> a paper</font>

9
00:00:32,238 --> 00:00:39,500
<font color="#E5E5E5">I can give you a short answer currently</font>

10
00:00:36,070 --> 00:00:42,100
give me an angel<font color="#E5E5E5"> image how can we decide</font>

11
00:00:39,500 --> 00:00:44,359
<font color="#CCCCCC">this</font><font color="#E5E5E5"> to be cific</font><font color="#CCCCCC"> cv</font><font color="#E5E5E5"> has been patched</font>

12
00:00:42,100 --> 00:00:47,059
<font color="#E5E5E5">obviously this is an important problem</font>

13
00:00:44,359 --> 00:00:49,760
right because<font color="#E5E5E5"> for</font><font color="#CCCCCC"> attackers</font><font color="#E5E5E5"> they can try</font>

14
00:00:47,059 --> 00:00:52,280
to exploit untouched<font color="#CCCCCC"> avoid abilities and</font>

15
00:00:49,760 --> 00:00:54,649
for defenders we must ensure<font color="#CCCCCC"> that other</font>

16
00:00:52,280 --> 00:01:01,120
security<font color="#E5E5E5"> patches has been propagated in</font>

17
00:00:54,649 --> 00:01:05,900
time so<font color="#E5E5E5"> I will use a real-world example</font>

18
00:01:01,120 --> 00:01:07,399
to explain<font color="#E5E5E5"> our problem more clearly</font><font color="#CCCCCC"> we</font>

19
00:01:05,900 --> 00:01:10,460
<font color="#CCCCCC">know that is the</font><font color="#E5E5E5"> lynnium</font><font color="#CCCCCC"> screen over the</font>

20
00:01:07,400 --> 00:01:13,130
surf is<font color="#E5E5E5"> open sourced right and the</font>

21
00:01:10,460 --> 00:01:15,350
<font color="#E5E5E5">Google's Android kernel which is also</font>

22
00:01:13,130 --> 00:01:20,509
based<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> Linux kernel</font><font color="#E5E5E5"> is also open</font>

23
00:01:15,350 --> 00:01:22,250
sourced<font color="#CCCCCC"> its LSP project okay so how</font>

24
00:01:20,509 --> 00:01:24,799
about is the<font color="#E5E5E5"> third-party vendors under</font>

25
00:01:22,250 --> 00:01:27,829
the kernel they are also<font color="#E5E5E5"> folks from the</font>

26
00:01:24,799 --> 00:01:30,969
<font color="#CCCCCC">origin recipe recipe project but we have</font>

27
00:01:27,829 --> 00:01:33,288
some modifications<font color="#CCCCCC"> and for this Chronos</font>

28
00:01:30,969 --> 00:01:36,020
purely the<font color="#E5E5E5"> vendors to your undies</font>

29
00:01:33,289 --> 00:01:38,210
<font color="#E5E5E5">released some snapshots of their kernel</font>

30
00:01:36,020 --> 00:01:40,750
source code<font color="#E5E5E5"> occasionally and this</font>

31
00:01:38,210 --> 00:01:44,899
releases<font color="#CCCCCC"> the URL with significant delay</font>

32
00:01:40,750 --> 00:01:48,049
<font color="#E5E5E5">so for most of time we can</font><font color="#CCCCCC"> currently get</font>

33
00:01:44,899 --> 00:01:50,420
Android kernel image in<font color="#CCCCCC"> banner form for</font>

34
00:01:48,049 --> 00:01:52,570
this<font color="#CCCCCC"> Windows kernel so in this situation</font>

35
00:01:50,420 --> 00:01:54,979
<font color="#E5E5E5">if</font><font color="#CCCCCC"> we found a security vulnerability</font>

36
00:01:52,570 --> 00:01:58,100
<font color="#CCCCCC">unrelated Apaches in the mainstream</font>

37
00:01:54,979 --> 00:02:00,408
religions kernel<font color="#E5E5E5"> ro SP project how can</font>

38
00:01:58,100 --> 00:02:04,939
we ensure that<font color="#E5E5E5"> easier propagated to the</font>

39
00:02:00,409 --> 00:02:07,690
<font color="#E5E5E5">Windows kernel and actually this is not</font>

40
00:02:04,939 --> 00:02:10,609
<font color="#E5E5E5">only for the</font><font color="#CCCCCC"> Linux kernel or OSP project</font>

41
00:02:07,690 --> 00:02:12,350
<font color="#E5E5E5">basically any scenario where the open</font>

42
00:02:10,610 --> 00:02:14,360
source<font color="#E5E5E5"> components</font><font color="#CCCCCC"> are reused in the</font>

43
00:02:12,350 --> 00:02:17,780
<font color="#E5E5E5">closest source of the where the same</font>

44
00:02:14,360 --> 00:02:19,879
problem exists we<font color="#CCCCCC"> ask whether the open</font>

45
00:02:17,780 --> 00:02:21,830
<font color="#E5E5E5">source security patch has been applied</font>

46
00:02:19,879 --> 00:02:24,590
in<font color="#CCCCCC"> the battery and as this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font>

47
00:02:21,830 --> 00:02:27,320
problem<font color="#CCCCCC"> we</font><font color="#E5E5E5"> want to solve yeah</font>

48
00:02:24,590 --> 00:02:30,570
however this<font color="#E5E5E5"> problem is challenging</font>

49
00:02:27,320 --> 00:02:33,720
without<font color="#CCCCCC"> who challenges fight</font><font color="#E5E5E5"> the first</font>

50
00:02:30,570 --> 00:02:35,910
one<font color="#E5E5E5"> this</font><font color="#CCCCCC"> task is alike the</font><font color="#E5E5E5"> you need to</font>

51
00:02:33,720 --> 00:02:39,060
<font color="#E5E5E5">locate a needle in your changing face</font>

52
00:02:35,910 --> 00:02:41,370
type on one<font color="#E5E5E5"> hand a security patch is</font>

53
00:02:39,060 --> 00:02:44,880
alike the<font color="#E5E5E5"> small needle</font><font color="#CCCCCC"> is more and a sub</font>

54
00:02:41,370 --> 00:02:49,260
<font color="#E5E5E5">hole for example this</font><font color="#CCCCCC"> tequila fresh if</font>

55
00:02:44,880 --> 00:02:52,320
<font color="#E5E5E5">only changes an operator and</font><font color="#CCCCCC"> is a splash</font>

56
00:02:49,260 --> 00:02:54,239
it only as a small and a single line<font color="#CCCCCC"> is</font>

57
00:02:52,320 --> 00:02:56,780
<font color="#CCCCCC">Orangina function</font><font color="#E5E5E5"> so they are both the</font>

58
00:02:54,240 --> 00:03:00,020
<font color="#CCCCCC">morning</font><font color="#E5E5E5"> start</font>

59
00:02:56,780 --> 00:03:04,800
furthermore the haystack is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> changing</font>

60
00:03:00,020 --> 00:03:06,330
for<font color="#CCCCCC"> example this</font><font color="#E5E5E5"> OSP security patch has</font>

61
00:03:04,800 --> 00:03:09,870
introduced<font color="#CCCCCC"> the new lines Orangina</font>

62
00:03:06,330 --> 00:03:11,550
function<font color="#E5E5E5"> right on the later this</font>

63
00:03:09,870 --> 00:03:13,410
security<font color="#E5E5E5"> patch can be back for</font><font color="#CCCCCC"> here it</font>

64
00:03:11,550 --> 00:03:16,800
with<font color="#E5E5E5"> Windows kernel with different</font>

65
00:03:13,410 --> 00:03:19,440
<font color="#E5E5E5">context under then there can be other</font>

66
00:03:16,800 --> 00:03:21,350
patches<font color="#E5E5E5"> applying on the same function</font>

67
00:03:19,440 --> 00:03:24,810
<font color="#CCCCCC">and changing the contexts</font>

68
00:03:21,350 --> 00:03:28,049
so all forwards<font color="#E5E5E5"> approach the version but</font>

69
00:03:24,810 --> 00:03:29,760
as they all have different contexts<font color="#E5E5E5"> so</font>

70
00:03:28,050 --> 00:03:34,950
this makes our problem much<font color="#CCCCCC"> more</font>

71
00:03:29,760 --> 00:03:38,040
difficult<font color="#CCCCCC"> a</font><font color="#E5E5E5"> second challenge the</font>

72
00:03:34,950 --> 00:03:40,619
haystack<font color="#E5E5E5"> we need to search a needle is a</font>

73
00:03:38,040 --> 00:03:45,989
<font color="#E5E5E5">banner</font><font color="#CCCCCC"> II instead of the source</font><font color="#E5E5E5"> code</font>

74
00:03:40,620 --> 00:03:47,940
tree this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> also a</font><font color="#CCCCCC"> difficult problem so</font>

75
00:03:45,989 --> 00:03:50,610
there is this some relative of<font color="#E5E5E5"> work to</font>

76
00:03:47,940 --> 00:03:53,250
<font color="#CCCCCC">this topic</font><font color="#E5E5E5"> but basically they cannot</font>

77
00:03:50,610 --> 00:03:55,200
solve<font color="#E5E5E5"> our problem the first category of</font>

78
00:03:53,250 --> 00:03:57,060
religious work is source code<font color="#CCCCCC"> alive</font>

79
00:03:55,200 --> 00:03:59,339
imagine<font color="#E5E5E5"> basically this work will try to</font>

80
00:03:57,060 --> 00:04:01,430
search your source<font color="#E5E5E5"> code to defeat in</font>

81
00:03:59,340 --> 00:04:03,420
your<font color="#E5E5E5"> target the source code tree</font>

82
00:04:01,430 --> 00:04:05,840
<font color="#E5E5E5">obviously</font><font color="#CCCCCC"> that we need to deal</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> the</font>

83
00:04:03,420 --> 00:04:09,869
<font color="#CCCCCC">banner e so this have woken under work</font>

84
00:04:05,840 --> 00:04:12,180
<font color="#E5E5E5">and a second category is a binary</font><font color="#CCCCCC"> to</font>

85
00:04:09,870 --> 00:04:14,610
banner<font color="#E5E5E5"> image and as they will try</font><font color="#CCCCCC"> to</font>

86
00:04:12,180 --> 00:04:15,620
search a banner instruction sequence<font color="#E5E5E5"> in</font>

87
00:04:14,610 --> 00:04:18,900
target a binary

88
00:04:15,620 --> 00:04:22,200
however the see inside this world<font color="#E5E5E5"> likes</font>

89
00:04:18,899 --> 00:04:23,760
<font color="#E5E5E5">knowledge about a needle itself remember</font>

90
00:04:22,200 --> 00:04:26,190
<font color="#E5E5E5">that we</font><font color="#CCCCCC"> need to search a needle in the</font>

91
00:04:23,760 --> 00:04:28,620
haystack<font color="#CCCCCC"> but</font><font color="#E5E5E5"> surely this type of work</font>

92
00:04:26,190 --> 00:04:30,990
will compare two binary haystacks<font color="#E5E5E5"> and</font>

93
00:04:28,620 --> 00:04:33,510
give us<font color="#CCCCCC"> the cost going</font><font color="#E5E5E5"> similarity score</font>

94
00:04:30,990 --> 00:04:35,669
between<font color="#CCCCCC"> the</font><font color="#E5E5E5"> two banner haystacks but we</font>

95
00:04:33,510 --> 00:04:36,900
need<font color="#E5E5E5"> to search for the needle so only</font>

96
00:04:35,669 --> 00:04:39,060
with the source<font color="#E5E5E5"> code</font>

97
00:04:36,900 --> 00:04:40,560
<font color="#E5E5E5">purchase other information we can get</font>

98
00:04:39,060 --> 00:04:43,920
<font color="#E5E5E5">the best knowledge of the needle</font>

99
00:04:40,560 --> 00:04:46,650
yourself<font color="#CCCCCC"> okay</font>

100
00:04:43,920 --> 00:04:49,740
here comes our solution<font color="#E5E5E5"> our</font><font color="#CCCCCC"> system is</font>

101
00:04:46,650 --> 00:04:52,020
named a fiber<font color="#E5E5E5"> and basically is motivated</font>

102
00:04:49,740 --> 00:04:56,820
by human experts<font color="#E5E5E5"> behaviors when faced</font>

103
00:04:52,020 --> 00:04:58,500
with the same problem as a<font color="#CCCCCC"> high-level</font><font color="#E5E5E5"> we</font>

104
00:04:56,820 --> 00:05:01,020
<font color="#E5E5E5">will first an Ally's</font><font color="#CCCCCC"> Allatoona sights</font>

105
00:04:58,500 --> 00:05:03,630
<font color="#CCCCCC">introduced a biosecurity of hash and we</font>

106
00:05:01,020 --> 00:05:05,820
<font color="#E5E5E5">will pick out those most suitable to new</font>

107
00:05:03,630 --> 00:05:08,070
<font color="#E5E5E5">sites and try to translate them into a</font>

108
00:05:05,820 --> 00:05:10,290
binary level signatures which can then

109
00:05:08,070 --> 00:05:12,599
be<font color="#CCCCCC"> used to match in the target binary</font>

110
00:05:10,290 --> 00:05:14,640
<font color="#CCCCCC">and this way we</font><font color="#E5E5E5"> can correlate to the</font>

111
00:05:12,600 --> 00:05:16,530
source code<font color="#CCCCCC"> allowing information under</font>

112
00:05:14,640 --> 00:05:18,750
the<font color="#CCCCCC"> pen</font><font color="#E5E5E5"> reliable information and to</font>

113
00:05:16,530 --> 00:05:22,049
develop<font color="#E5E5E5"> accurate and precise fetch</font>

114
00:05:18,750 --> 00:05:24,660
present<font color="#CCCCCC"> tests</font><font color="#E5E5E5"> okay so next I will deter</font>

115
00:05:22,050 --> 00:05:29,190
outflow from the<font color="#CCCCCC"> progeny site</font><font color="#E5E5E5"> analysis</font>

116
00:05:24,660 --> 00:05:30,660
part<font color="#E5E5E5"> let's first consider what the human</font>

117
00:05:29,190 --> 00:05:33,330
will do in this situation

118
00:05:30,660 --> 00:05:35,280
imagine<font color="#E5E5E5"> that currently you</font><font color="#CCCCCC"> are given an</font>

119
00:05:33,330 --> 00:05:37,820
open<font color="#E5E5E5"> source Africa touch and you are</font>

120
00:05:35,280 --> 00:05:41,010
<font color="#E5E5E5">asked to locate it in the</font><font color="#CCCCCC"> target binary</font>

121
00:05:37,820 --> 00:05:43,230
<font color="#E5E5E5">so what's your first assault</font><font color="#CCCCCC"> where a</font>

122
00:05:41,010 --> 00:05:45,000
security<font color="#CCCCCC"> patch</font><font color="#E5E5E5"> introduced</font><font color="#CCCCCC"> multiple</font>

123
00:05:43,230 --> 00:05:47,430
channels in different<font color="#E5E5E5"> functions and</font>

124
00:05:45,000 --> 00:05:49,770
across multiple affairs<font color="#E5E5E5"> so very</font>

125
00:05:47,430 --> 00:05:52,470
naturally the first<font color="#CCCCCC"> thing we need to is</font>

126
00:05:49,770 --> 00:05:55,080
<font color="#E5E5E5">to pick out those channel</font><font color="#CCCCCC"> sites which</font>

127
00:05:52,470 --> 00:05:57,390
are obvious<font color="#E5E5E5"> unique and a written</font>

128
00:05:55,080 --> 00:05:59,310
representative<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> we can try to</font>

129
00:05:57,390 --> 00:06:03,840
locate additional<font color="#CCCCCC"> sites in a targeted</font>

130
00:05:59,310 --> 00:06:06,360
<font color="#E5E5E5">binary in our system we consider several</font>

131
00:06:03,840 --> 00:06:08,520
<font color="#E5E5E5">factors when picking up</font><font color="#CCCCCC"> the Genesis</font><font color="#E5E5E5"> the</font>

132
00:06:06,360 --> 00:06:10,680
first factor consider is uniqueness<font color="#E5E5E5"> for</font>

133
00:06:08,520 --> 00:06:12,539
<font color="#CCCCCC">example this security patch</font><font color="#E5E5E5"> has</font>

134
00:06:10,680 --> 00:06:15,210
introduced a<font color="#CCCCCC"> new line in</font><font color="#E5E5E5"> the function</font>

135
00:06:12,540 --> 00:06:17,130
<font color="#E5E5E5">and we must ensure</font><font color="#CCCCCC"> that this new line</font>

136
00:06:15,210 --> 00:06:19,320
<font color="#E5E5E5">only appears in the patch</font><font color="#CCCCCC"> the world and</font>

137
00:06:17,130 --> 00:06:21,120
if the this one<font color="#E5E5E5"> also appears in</font>

138
00:06:19,320 --> 00:06:23,280
unpatched version<font color="#CCCCCC"> maybe in a different</font>

139
00:06:21,120 --> 00:06:25,140
position<font color="#E5E5E5"> then we will be unable to</font>

140
00:06:23,280 --> 00:06:27,390
differentiate the patch<font color="#CCCCCC"> the unpatch the</font>

141
00:06:25,140 --> 00:06:30,599
word<font color="#CCCCCC"> solid based</font><font color="#E5E5E5"> on this single line and</font>

142
00:06:27,390 --> 00:06:32,400
<font color="#E5E5E5">in</font><font color="#CCCCCC"> this context</font><font color="#E5E5E5"> we must either some</font>

143
00:06:30,600 --> 00:06:36,660
<font color="#E5E5E5">contacts lines around the</font><font color="#CCCCCC"> edge in the</font>

144
00:06:32,400 --> 00:06:39,359
<font color="#CCCCCC">site to make it a unique and a certain</font>

145
00:06:36,660 --> 00:06:42,300
factor<font color="#CCCCCC"> consider if</font><font color="#E5E5E5"> stability as we</font>

146
00:06:39,360 --> 00:06:44,940
mentioned previously<font color="#E5E5E5"> the context of the</font>

147
00:06:42,300 --> 00:06:47,430
of<font color="#CCCCCC"> the original function can be</font>

148
00:06:44,940 --> 00:06:49,919
effective so if we include too many

149
00:06:47,430 --> 00:06:52,289
source code<font color="#CCCCCC"> lands in our channel</font><font color="#E5E5E5"> site</font>

150
00:06:49,919 --> 00:06:54,030
then our change that is unstable<font color="#E5E5E5"> because</font>

151
00:06:52,289 --> 00:06:56,370
<font color="#E5E5E5">it can be easily affected by other</font>

152
00:06:54,030 --> 00:06:59,068
security patches or by other changing

153
00:06:56,370 --> 00:07:02,610
contacts<font color="#E5E5E5"> so we must usual our</font>

154
00:06:59,069 --> 00:07:04,469
<font color="#CCCCCC">chinainside is stable only to do this</font><font color="#E5E5E5"> we</font>

155
00:07:02,610 --> 00:07:07,259
want<font color="#E5E5E5"> to keep our</font><font color="#CCCCCC"> chin aside</font><font color="#E5E5E5"> ice more as</font>

156
00:07:04,469 --> 00:07:09,330
a passport and early will always start

157
00:07:07,259 --> 00:07:14,490
<font color="#CCCCCC">from a single line under we only are the</font>

158
00:07:09,330 --> 00:07:16,438
<font color="#CCCCCC">contact silence</font><font color="#E5E5E5"> when necessary and so</font>

159
00:07:14,490 --> 00:07:19,499
the factory will consider is easy to

160
00:07:16,439 --> 00:07:21,810
recognize<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> a security patch</font>

161
00:07:19,499 --> 00:07:23,879
has introduced is the<font color="#E5E5E5"> new function</font><font color="#CCCCCC"> code</font>

162
00:07:21,810 --> 00:07:26,610
<font color="#E5E5E5">right under this</font><font color="#CCCCCC"> function call is not in</font>

163
00:07:23,879 --> 00:07:29,039
<font color="#CCCCCC">Lund</font><font color="#E5E5E5"> so this is almost a</font><font color="#CCCCCC"> perfect tuna</font>

164
00:07:26,610 --> 00:07:31,199
size why because we can easily<font color="#E5E5E5"> locate it</font>

165
00:07:29,039 --> 00:07:33,750
in<font color="#E5E5E5"> target binary by similarly looking at</font>

166
00:07:31,199 --> 00:07:37,669
his according instruction and the final

167
00:07:33,750 --> 00:07:37,669
<font color="#E5E5E5">column name it's very straightforward</font>

168
00:07:38,509 --> 00:07:43,680
undersecured<font color="#CCCCCC"> patch may also introduce</font>

169
00:07:41,069 --> 00:07:47,279
<font color="#E5E5E5">some conditional statements like this if</font>

170
00:07:43,680 --> 00:07:49,529
sediment this is also<font color="#CCCCCC"> cool</font><font color="#E5E5E5"> genocide</font><font color="#CCCCCC"> why</font>

171
00:07:47,279 --> 00:07:52,050
because it's if sediment<font color="#CCCCCC"> will</font><font color="#E5E5E5"> chin to</font>

172
00:07:49,529 --> 00:07:54,900
post the syntax structure<font color="#CCCCCC"> under</font>

173
00:07:52,050 --> 00:08:00,509
semantics as a binary level<font color="#E5E5E5"> it's also</font>

174
00:07:54,900 --> 00:08:05,068
obvious however if the security<font color="#CCCCCC"> fashion</font>

175
00:08:00,509 --> 00:08:07,229
<font color="#E5E5E5">introduces assignment statement this</font><font color="#CCCCCC"> is</font>

176
00:08:05,069 --> 00:08:09,000
<font color="#CCCCCC">not as good as previous</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> cases</font>

177
00:08:07,229 --> 00:08:11,279
<font color="#E5E5E5">because</font><font color="#CCCCCC"> it will only change</font><font color="#E5E5E5"> the</font>

178
00:08:09,000 --> 00:08:14,399
semantics<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the syntax</font><font color="#E5E5E5"> structure will</font>

179
00:08:11,279 --> 00:08:16,949
remain<font color="#CCCCCC"> the same</font><font color="#E5E5E5"> so basically our system</font>

180
00:08:14,399 --> 00:08:20,460
we will try to<font color="#E5E5E5"> rank all the</font><font color="#CCCCCC"> Regina sites</font>

181
00:08:16,949 --> 00:08:22,800
according<font color="#CCCCCC"> to our terminology</font><font color="#E5E5E5"> the code is</font>

182
00:08:20,460 --> 00:08:25,068
<font color="#E5E5E5">to pick</font><font color="#CCCCCC"> others most easy to</font><font color="#E5E5E5"> recognize</font><font color="#CCCCCC"> in</font>

183
00:08:22,800 --> 00:08:28,620
the<font color="#E5E5E5"> sites</font>

184
00:08:25,069 --> 00:08:30,689
<font color="#CCCCCC">okay so now we have a site or preferred</font>

185
00:08:28,620 --> 00:08:32,519
channel size and the next we need to

186
00:08:30,689 --> 00:08:35,099
<font color="#E5E5E5">translate them into a binary level</font>

187
00:08:32,519 --> 00:08:37,440
signatures which can be used to<font color="#CCCCCC"> match in</font>

188
00:08:35,099 --> 00:08:42,110
the<font color="#CCCCCC"> targeted battery</font><font color="#E5E5E5"> so how can we do</font>

189
00:08:37,440 --> 00:08:44,880
this if we<font color="#CCCCCC"> wanted to</font><font color="#E5E5E5"> do this manually</font>

190
00:08:42,110 --> 00:08:47,550
what we will<font color="#E5E5E5"> do let's still consider</font><font color="#CCCCCC"> it</font>

191
00:08:44,880 --> 00:08:49,589
<font color="#CCCCCC">small example and this is</font><font color="#E5E5E5"> our source</font>

192
00:08:47,550 --> 00:08:53,069
code allow each<font color="#CCCCCC"> insight is if statement</font>

193
00:08:49,589 --> 00:08:56,220
and with two branches<font color="#E5E5E5"> so the first team</font>

194
00:08:53,070 --> 00:08:58,600
very nature is a<font color="#CCCCCC"> syntactic</font><font color="#E5E5E5"> structure</font>

195
00:08:56,220 --> 00:09:01,090
because<font color="#CCCCCC"> syntax structure is very obvious</font>

196
00:08:58,600 --> 00:09:03,040
at the parent level we can expect<font color="#CCCCCC"> a</font>

197
00:09:01,090 --> 00:09:06,070
<font color="#CCCCCC">condition of jump</font><font color="#E5E5E5"> related to if</font>

198
00:09:03,040 --> 00:09:09,250
statement<font color="#E5E5E5"> and we can expect to following</font>

199
00:09:06,070 --> 00:09:11,550
<font color="#E5E5E5">basic blocks representing the two</font>

200
00:09:09,250 --> 00:09:14,980
<font color="#CCCCCC">branches true branch and false branch</font>

201
00:09:11,550 --> 00:09:17,709
and besides syntax<font color="#CCCCCC"> we also need to</font>

202
00:09:14,980 --> 00:09:20,110
<font color="#CCCCCC">consider</font><font color="#E5E5E5"> the semantics which means for</font>

203
00:09:17,710 --> 00:09:22,390
the condition using the conditional jump

204
00:09:20,110 --> 00:09:24,610
note the<font color="#CCCCCC"> condition should be exactly</font>

205
00:09:22,390 --> 00:09:26,920
seeing as<font color="#CCCCCC"> a</font><font color="#E5E5E5"> source code</font><font color="#CCCCCC"> allows</font><font color="#E5E5E5"> genocide</font>

206
00:09:24,610 --> 00:09:28,180
<font color="#CCCCCC">it should be a bigger than one and</font><font color="#E5E5E5"> the</font>

207
00:09:26,920 --> 00:09:32,349
same<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> for the true and false</font>

208
00:09:28,180 --> 00:09:34,329
<font color="#E5E5E5">branches so our system basically follow</font>

209
00:09:32,350 --> 00:09:37,180
<font color="#E5E5E5">the same procedure we will try to</font>

210
00:09:34,330 --> 00:09:41,340
correlate<font color="#E5E5E5"> the</font><font color="#CCCCCC"> posted syntax</font><font color="#E5E5E5"> or semantics</font>

211
00:09:37,180 --> 00:09:46,270
<font color="#E5E5E5">from the source code to the binary code</font>

212
00:09:41,340 --> 00:09:48,670
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so to do this our first step is to</font>

213
00:09:46,270 --> 00:09:50,949
<font color="#CCCCCC">identify all the banner instructions</font>

214
00:09:48,670 --> 00:09:54,339
that<font color="#E5E5E5"> are related to</font><font color="#CCCCCC"> the origin</font><font color="#E5E5E5"> or source</font>

215
00:09:50,950 --> 00:09:57,460
<font color="#E5E5E5">quality massage fortunately because we</font>

216
00:09:54,340 --> 00:10:00,010
have the patch source code our life<font color="#E5E5E5"> are</font>

217
00:09:57,460 --> 00:10:02,080
made<font color="#E5E5E5"> much easier because we can</font><font color="#CCCCCC"> compare</font>

218
00:10:00,010 --> 00:10:05,110
this source code into<font color="#E5E5E5"> binary and the</font>

219
00:10:02,080 --> 00:10:07,120
compiler will generate the debug

220
00:10:05,110 --> 00:10:09,190
information<font color="#E5E5E5"> which flow is a mapping</font><font color="#CCCCCC"> from</font>

221
00:10:07,120 --> 00:10:11,740
<font color="#CCCCCC">the source code aligns</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the primary</font>

222
00:10:09,190 --> 00:10:13,990
instructions<font color="#E5E5E5"> I mean in this example we</font>

223
00:10:11,740 --> 00:10:16,090
identify for banner instructions that

224
00:10:13,990 --> 00:10:18,550
<font color="#E5E5E5">our ability</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> assess quality</font><font color="#CCCCCC"> massage</font>

225
00:10:16,090 --> 00:10:20,980
and<font color="#E5E5E5"> is for instructions they form a</font>

226
00:10:18,550 --> 00:10:22,660
<font color="#CCCCCC">local control flow graph the first</font><font color="#E5E5E5"> node</font>

227
00:10:20,980 --> 00:10:27,400
is a conditional jump<font color="#E5E5E5"> second is a</font>

228
00:10:22,660 --> 00:10:29,020
functioning imitation so next we need<font color="#E5E5E5"> to</font>

229
00:10:27,400 --> 00:10:32,319
consider<font color="#CCCCCC"> the semantics of this local</font>

230
00:10:29,020 --> 00:10:34,090
<font color="#E5E5E5">control</font><font color="#CCCCCC"> flow graph</font><font color="#E5E5E5"> for this purpose we</font>

231
00:10:32,320 --> 00:10:36,700
need<font color="#E5E5E5"> to first identify</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> the root</font>

232
00:10:34,090 --> 00:10:38,710
instructions within<font color="#E5E5E5"> each basic block so</font>

233
00:10:36,700 --> 00:10:41,320
what are those instructions<font color="#CCCCCC"> let's</font>

234
00:10:38,710 --> 00:10:43,330
<font color="#CCCCCC">consider the first</font><font color="#E5E5E5"> base block and</font><font color="#CCCCCC"> either</font>

235
00:10:41,320 --> 00:10:46,180
instruction will calculate<font color="#E5E5E5"> to the sum of</font>

236
00:10:43,330 --> 00:10:49,180
the X 3 and X 4<font color="#E5E5E5"> and a store result in</font>

237
00:10:46,180 --> 00:10:51,670
<font color="#CCCCCC">access our origin the X 0 will be</font>

238
00:10:49,180 --> 00:10:54,880
compared to<font color="#E5E5E5"> X 2 in the same instruction</font>

239
00:10:51,670 --> 00:10:58,089
so in this example the add instruction

240
00:10:54,880 --> 00:10:59,800
<font color="#E5E5E5">only produces some intermediate results</font>

241
00:10:58,090 --> 00:11:02,410
which<font color="#E5E5E5"> will be consumed by a</font><font color="#CCCCCC"> CMP</font>

242
00:10:59,800 --> 00:11:04,479
instruction and the same instruction has

243
00:11:02,410 --> 00:11:06,819
already captured all the semantics of

244
00:11:04,480 --> 00:11:09,990
the<font color="#E5E5E5"> basic block so it's</font><font color="#CCCCCC"> essential</font>

245
00:11:06,820 --> 00:11:11,850
instruction is a<font color="#E5E5E5"> root instruction</font>

246
00:11:09,990 --> 00:11:14,070
formula speaking with the

247
00:11:11,850 --> 00:11:16,320
the instruction are those<font color="#CCCCCC"> instructions</font>

248
00:11:14,070 --> 00:11:20,160
whose outputs will no longer be consumed

249
00:11:16,320 --> 00:11:22,140
by<font color="#E5E5E5"> other instructions and in practice we</font>

250
00:11:20,160 --> 00:11:24,000
identify all the route instructions<font color="#E5E5E5"> by</font>

251
00:11:22,140 --> 00:11:28,110
<font color="#E5E5E5">performing a basic block level data flow</font>

252
00:11:24,000 --> 00:11:30,240
analysis after we get<font color="#E5E5E5"> a route</font>

253
00:11:28,110 --> 00:11:31,950
instruction we need to<font color="#E5E5E5"> associate the</font>

254
00:11:30,240 --> 00:11:34,200
<font color="#CCCCCC">semantic formulas to issue the</font>

255
00:11:31,950 --> 00:11:36,390
instruction<font color="#CCCCCC"> lie</font><font color="#E5E5E5"> still consider the CMP</font>

256
00:11:34,200 --> 00:11:38,510
instructions<font color="#E5E5E5"> we identify the previously</font>

257
00:11:36,390 --> 00:11:42,540
if we only look<font color="#E5E5E5"> as a single instruction</font>

258
00:11:38,510 --> 00:11:45,390
<font color="#CCCCCC">it's formula is like X 0 because an X 2</font>

259
00:11:42,540 --> 00:11:48,150
but if<font color="#E5E5E5"> we also look at the preceding add</font>

260
00:11:45,390 --> 00:11:51,780
instruction we know<font color="#E5E5E5"> that the r0 is</font>

261
00:11:48,150 --> 00:11:55,560
actually some<font color="#CCCCCC"> Oh</font><font color="#E5E5E5"> X 3 and X</font><font color="#CCCCCC"> 4 and if</font><font color="#E5E5E5"> we</font>

262
00:11:51,780 --> 00:12:01,380
look even further<font color="#E5E5E5"> we know that x-ray</font>

263
00:11:55,560 --> 00:12:05,400
comes from X<font color="#E5E5E5"> 0 and X 4 comes from X 1 so</font>

264
00:12:01,380 --> 00:12:08,130
<font color="#E5E5E5">our formula becomes X 0 plus X 1 big oh</font>

265
00:12:05,400 --> 00:12:09,720
thanks<font color="#CCCCCC"> - so up to this point</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> can</font>

266
00:12:08,130 --> 00:12:11,340
<font color="#CCCCCC">under transform</font><font color="#E5E5E5"> our formula anymore</font>

267
00:12:09,720 --> 00:12:13,440
because we<font color="#E5E5E5"> have already reached the</font>

268
00:12:11,340 --> 00:12:15,390
function entry point<font color="#CCCCCC"> so what are the</font>

269
00:12:13,440 --> 00:12:17,340
formula mean<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the source code the</font>

270
00:12:15,390 --> 00:12:20,370
level<font color="#E5E5E5"> where</font><font color="#CCCCCC"> paths</font><font color="#E5E5E5"> are missing</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> call</font>

271
00:12:17,340 --> 00:12:23,850
information<font color="#CCCCCC"> X</font><font color="#E5E5E5"> 0 in the first function</font>

272
00:12:20,370 --> 00:12:25,800
parameter X<font color="#E5E5E5"> 1 second X to the third so</font>

273
00:12:23,850 --> 00:12:28,740
at the source<font color="#CCCCCC"> code level this means</font><font color="#E5E5E5"> a</font>

274
00:12:25,800 --> 00:12:30,660
plus B bigger than C this way we can

275
00:12:28,740 --> 00:12:33,810
<font color="#E5E5E5">correlate the semantics between the</font>

276
00:12:30,660 --> 00:12:36,089
source code<font color="#E5E5E5"> and the binary our system</font>

277
00:12:33,810 --> 00:12:37,949
you will extract<font color="#CCCCCC"> all semantics formulas</font>

278
00:12:36,090 --> 00:12:39,990
by performing a function level

279
00:12:37,950 --> 00:12:44,700
<font color="#CCCCCC">intra procedure</font><font color="#E5E5E5"> and under</font><font color="#CCCCCC"> constraint</font>

280
00:12:39,990 --> 00:12:46,890
<font color="#E5E5E5">symbol execution</font><font color="#CCCCCC"> ok so now we</font><font color="#E5E5E5"> have</font>

281
00:12:44,700 --> 00:12:48,840
binary signature which which<font color="#CCCCCC"> is</font>

282
00:12:46,890 --> 00:12:51,090
basically a local control flow graph and

283
00:12:48,840 --> 00:12:53,280
every<font color="#CCCCCC"> know the</font><font color="#E5E5E5"> contents the set of</font><font color="#CCCCCC"> rules</font>

284
00:12:51,090 --> 00:12:56,640
instruction and every<font color="#CCCCCC"> root instruction</font>

285
00:12:53,280 --> 00:12:59,610
content is related to a<font color="#CCCCCC"> semantic formula</font>

286
00:12:56,640 --> 00:13:02,010
so next we need<font color="#E5E5E5"> to match this</font><font color="#CCCCCC"> venery</font>

287
00:12:59,610 --> 00:13:04,830
signature in the<font color="#E5E5E5"> target language how can</font>

288
00:13:02,010 --> 00:13:06,540
we do this<font color="#E5E5E5"> well at first we can consider</font>

289
00:13:04,830 --> 00:13:09,690
some quick and easy to<font color="#E5E5E5"> crack the</font>

290
00:13:06,540 --> 00:13:11,640
features for example<font color="#E5E5E5"> the topology of the</font>

291
00:13:09,690 --> 00:13:13,680
boundaries of nature<font color="#E5E5E5"> and in this</font><font color="#CCCCCC"> example</font>

292
00:13:11,640 --> 00:13:16,230
the topology with just two connected

293
00:13:13,680 --> 00:13:19,859
nodes<font color="#CCCCCC"> and we can also</font><font color="#E5E5E5"> consider the root</font>

294
00:13:16,230 --> 00:13:22,140
instruction types hmm included in every

295
00:13:19,860 --> 00:13:24,000
node<font color="#CCCCCC"> so in this example the</font><font color="#E5E5E5"> first node</font>

296
00:13:22,140 --> 00:13:24,710
should<font color="#E5E5E5"> I be a conditional jump a second</font>

297
00:13:24,000 --> 00:13:26,510
node should be

298
00:13:24,710 --> 00:13:29,540
function invocation and the<font color="#CCCCCC"> quarry name</font>

299
00:13:26,510 --> 00:13:31,700
is<font color="#CCCCCC"> bar and</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> these quick features</font><font color="#E5E5E5"> we</font>

300
00:13:29,540 --> 00:13:33,829
<font color="#E5E5E5">can already rapidly narrow down our</font>

301
00:13:31,700 --> 00:13:36,260
search space in the target<font color="#CCCCCC"> primary</font>

302
00:13:33,830 --> 00:13:42,110
function just by the quick features

303
00:13:36,260 --> 00:13:43,939
<font color="#E5E5E5">we'll have two candidate areas under</font>

304
00:13:42,110 --> 00:13:45,710
then we need to<font color="#E5E5E5"> further to the</font>

305
00:13:43,940 --> 00:13:48,050
comparison based on the<font color="#CCCCCC"> semantic</font>

306
00:13:45,710 --> 00:13:50,150
<font color="#E5E5E5">formulas we need to abstract semantic</font>

307
00:13:48,050 --> 00:13:52,880
formulas for the candidate areas and a

308
00:13:50,150 --> 00:13:55,340
comparison<font color="#E5E5E5"> to the formula so the origin</font>

309
00:13:52,880 --> 00:13:57,230
<font color="#E5E5E5">or signature and by the comparison we</font>

310
00:13:55,340 --> 00:13:57,800
can<font color="#E5E5E5"> exclude the one of this candidate</font>

311
00:13:57,230 --> 00:14:02,000
areas

312
00:13:57,800 --> 00:14:03,949
so only one<font color="#CCCCCC"> matches in this case the</font>

313
00:14:02,000 --> 00:14:06,260
binary signature has been successfully

314
00:14:03,950 --> 00:14:11,600
matched in<font color="#E5E5E5"> the target binary and we can</font>

315
00:14:06,260 --> 00:14:13,430
see that<font color="#CCCCCC"> the perseverance</font><font color="#E5E5E5"> okay so to</font>

316
00:14:11,600 --> 00:14:15,290
compare<font color="#E5E5E5"> two formulas basically we will</font>

317
00:14:13,430 --> 00:14:17,390
first simplify the formulas by the

318
00:14:15,290 --> 00:14:23,360
<font color="#CCCCCC">history solver I know we understand we</font>

319
00:14:17,390 --> 00:14:26,990
perform a strict formula match okay so

320
00:14:23,360 --> 00:14:29,450
so<font color="#CCCCCC"> far I have covered the general flow</font>

321
00:14:26,990 --> 00:14:33,650
<font color="#CCCCCC">or our system</font><font color="#E5E5E5"> but there are some special</font>

322
00:14:29,450 --> 00:14:35,810
an interest in cases the first case

323
00:14:33,650 --> 00:14:37,100
<font color="#CCCCCC">images</font><font color="#E5E5E5"> that the patch has introduced a</font>

324
00:14:35,810 --> 00:14:38,750
function call<font color="#E5E5E5"> and is this function</font>

325
00:14:37,100 --> 00:14:41,390
<font color="#CCCCCC">called the unique</font><font color="#E5E5E5"> which means it only</font>

326
00:14:38,750 --> 00:14:43,340
appears in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> patched version and the</font>

327
00:14:41,390 --> 00:14:46,580
dysfunction<font color="#E5E5E5"> causes not inland which</font>

328
00:14:43,340 --> 00:14:48,020
means we can search<font color="#E5E5E5"> it by looking</font><font color="#CCCCCC"> at his</font>

329
00:14:46,580 --> 00:14:51,080
according instruction and the<font color="#CCCCCC"> quarry</font>

330
00:14:48,020 --> 00:14:53,600
name<font color="#E5E5E5"> and in this fusion we don't need</font>

331
00:14:51,080 --> 00:14:55,760
<font color="#CCCCCC">any semantic formulas so we don't need a</font>

332
00:14:53,600 --> 00:14:58,250
<font color="#E5E5E5">symbol execution is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> solution just</font>

333
00:14:55,760 --> 00:15:02,630
<font color="#CCCCCC">the very</font><font color="#E5E5E5"> simple</font><font color="#CCCCCC"> cody existence test</font><font color="#E5E5E5"> in</font>

334
00:14:58,250 --> 00:15:05,480
<font color="#CCCCCC">his habit the second</font><font color="#E5E5E5"> example let's</font><font color="#CCCCCC"> look</font>

335
00:15:02,630 --> 00:15:07,370
<font color="#CCCCCC">how this</font><font color="#E5E5E5"> security</font><font color="#CCCCCC"> fetch</font><font color="#E5E5E5"> it only changes</font>

336
00:15:05,480 --> 00:15:09,680
<font color="#E5E5E5">the one single parameter within a</font>

337
00:15:07,370 --> 00:15:11,990
function<font color="#CCCCCC"> call so we recall that</font>

338
00:15:09,680 --> 00:15:15,260
previously we said to keep our changes

339
00:15:11,990 --> 00:15:17,750
as table we<font color="#CCCCCC"> are we will only start from</font>

340
00:15:15,260 --> 00:15:19,430
a single<font color="#CCCCCC"> level but in this case it's</font><font color="#E5E5E5"> not</font>

341
00:15:17,750 --> 00:15:22,100
even a<font color="#CCCCCC"> single</font><font color="#E5E5E5"> line it's a single</font>

342
00:15:19,430 --> 00:15:23,540
parameter<font color="#E5E5E5"> so in the</font><font color="#CCCCCC"> boundaries in</font>

343
00:15:22,100 --> 00:15:26,900
<font color="#CCCCCC">measure generation the matching process</font>

344
00:15:23,540 --> 00:15:28,510
<font color="#E5E5E5">will only include these instructions</font>

345
00:15:26,900 --> 00:15:31,280
that's related to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> single parameter</font>

346
00:15:28,510 --> 00:15:34,730
which makes our matching more accurate

347
00:15:31,280 --> 00:15:36,390
and stable<font color="#CCCCCC"> so we'll have other corner</font>

348
00:15:34,730 --> 00:15:38,250
cases para<font color="#E5E5E5"> due to a time limit</font>

349
00:15:36,390 --> 00:15:40,110
we've never covered another coverage

350
00:15:38,250 --> 00:15:41,850
<font color="#E5E5E5">currently I mean if you are interested</font>

351
00:15:40,110 --> 00:15:46,110
<font color="#CCCCCC">you can refer to our</font><font color="#E5E5E5"> paper from Modi</font>

352
00:15:41,850 --> 00:15:48,230
<font color="#E5E5E5">cares okay so comes the evaluation part</font>

353
00:15:46,110 --> 00:15:51,029
<font color="#E5E5E5">and in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> evaluation we have</font><font color="#CCCCCC"> crawled</font>

354
00:15:48,230 --> 00:15:52,980
107 security patches from the Android

355
00:15:51,029 --> 00:15:56,579
<font color="#CCCCCC">security bulletins</font><font color="#E5E5E5"> the time frame is</font>

356
00:15:52,980 --> 00:15:59,459
<font color="#CCCCCC">from the June 2016</font><font color="#E5E5E5"> and May 2017</font><font color="#CCCCCC"> we also</font>

357
00:15:56,579 --> 00:16:01,920
collected 800 kernel<font color="#CCCCCC"> images from</font><font color="#E5E5E5"> three</font>

358
00:15:59,459 --> 00:16:05,369
mainstream lenders<font color="#E5E5E5"> and basically we try</font>

359
00:16:01,920 --> 00:16:09,029
to test the presence of these patches<font color="#CCCCCC"> in</font>

360
00:16:05,370 --> 00:16:11,940
this under the kernel images let's first

361
00:16:09,029 --> 00:16:15,300
focus on the<font color="#E5E5E5"> accuracy</font><font color="#CCCCCC"> and overall we can</font>

362
00:16:11,940 --> 00:16:19,110
say that our system have<font color="#E5E5E5"> excellent</font>

363
00:16:15,300 --> 00:16:20,579
accuracy and<font color="#CCCCCC"> virtue we</font><font color="#E5E5E5"> have the 94%</font>

364
00:16:19,110 --> 00:16:23,010
accuracy and<font color="#E5E5E5"> we don't have the first</font>

365
00:16:20,579 --> 00:16:25,680
pass use<font color="#E5E5E5"> so the first pass you mean</font>

366
00:16:23,010 --> 00:16:28,260
<font color="#E5E5E5">sighs</font><font color="#CCCCCC"> we've only</font><font color="#E5E5E5"> believe the patch is</font>

367
00:16:25,680 --> 00:16:30,449
present<font color="#E5E5E5"> but in fact the pressure is not</font>

368
00:16:28,260 --> 00:16:33,149
there in the parent this is<font color="#CCCCCC"> dangerous</font>

369
00:16:30,450 --> 00:16:36,000
because<font color="#CCCCCC"> it's Qamishli the developer to</font>

370
00:16:33,149 --> 00:16:38,130
ignore a certain security<font color="#CCCCCC"> patch will</font>

371
00:16:36,000 --> 00:16:38,730
have some<font color="#CCCCCC"> false negatives and the four</font>

372
00:16:38,130 --> 00:16:40,680
snactives

373
00:16:38,730 --> 00:16:43,050
<font color="#CCCCCC">mean sites will only believe</font><font color="#E5E5E5"> with the</font>

374
00:16:40,680 --> 00:16:43,469
patch is not zero<font color="#E5E5E5"> but</font><font color="#CCCCCC"> Apache is actually</font>

375
00:16:43,050 --> 00:16:46,199
there

376
00:16:43,470 --> 00:16:50,630
this requires extra time for<font color="#E5E5E5"> the human</font>

377
00:16:46,199 --> 00:16:54,240
experts to confirm but anyway is secure

378
00:16:50,630 --> 00:16:56,610
so<font color="#CCCCCC"> we have we give detailed analysis</font><font color="#E5E5E5"> of</font>

379
00:16:54,240 --> 00:16:58,410
<font color="#E5E5E5">the root cause of the first negative in</font>

380
00:16:56,610 --> 00:17:00,720
<font color="#E5E5E5">our paper and you can drive it far</font>

381
00:16:58,410 --> 00:17:03,959
prefer<font color="#E5E5E5"> for</font><font color="#CCCCCC"> multi</font><font color="#E5E5E5"> hairs and we only want</font>

382
00:17:00,720 --> 00:17:06,750
<font color="#CCCCCC">to introduce</font><font color="#E5E5E5"> two root causes</font><font color="#CCCCCC"> the first</font>

383
00:17:03,959 --> 00:17:08,819
one a function in<font color="#CCCCCC"> life so recall that</font>

384
00:17:06,750 --> 00:17:11,220
<font color="#E5E5E5">the auto binary signal generated form is</font>

385
00:17:08,819 --> 00:17:12,809
<font color="#E5E5E5">reference binary and source code so if a</font>

386
00:17:11,220 --> 00:17:15,449
<font color="#CCCCCC">quarry function is inland in the</font>

387
00:17:12,809 --> 00:17:18,349
reference but not in the target our

388
00:17:15,449 --> 00:17:20,579
parameter signature will fail to<font color="#E5E5E5"> match</font>

389
00:17:18,349 --> 00:17:23,458
the second reason the<font color="#E5E5E5"> patch of</font>

390
00:17:20,579 --> 00:17:26,099
<font color="#E5E5E5">temptation if Apache is bug reported</font><font color="#CCCCCC"> to</font>

391
00:17:23,459 --> 00:17:28,650
<font color="#E5E5E5">another function</font><font color="#CCCCCC"> may be</font><font color="#E5E5E5"> the chin the</font>

392
00:17:26,099 --> 00:17:31,168
site of the patch can<font color="#CCCCCC"> be modified to</font>

393
00:17:28,650 --> 00:17:33,510
<font color="#E5E5E5">seal to the target function</font><font color="#CCCCCC"> so in this</font>

394
00:17:31,169 --> 00:17:36,150
case our<font color="#CCCCCC"> memory signature will also fail</font>

395
00:17:33,510 --> 00:17:38,520
to<font color="#E5E5E5"> match but anyway</font><font color="#CCCCCC"> it's banner</font>

396
00:17:36,150 --> 00:17:40,890
signatures are<font color="#E5E5E5"> secure</font><font color="#CCCCCC"> and in the future</font>

397
00:17:38,520 --> 00:17:44,610
<font color="#E5E5E5">we try to resolve this</font><font color="#CCCCCC"> force negative</font>

398
00:17:40,890 --> 00:17:46,950
cases<font color="#E5E5E5"> as our future</font><font color="#CCCCCC"> world</font><font color="#E5E5E5"> okay then</font>

399
00:17:44,610 --> 00:17:49,870
let's take<font color="#E5E5E5"> a look at the performance</font><font color="#CCCCCC"> to</font>

400
00:17:46,950 --> 00:17:52,480
<font color="#E5E5E5">be honest our</font><font color="#CCCCCC"> system is not</font><font color="#E5E5E5"> as fast as</font>

401
00:17:49,870 --> 00:17:54,219
<font color="#CCCCCC">Spanish abandon machine work because we</font>

402
00:17:52,480 --> 00:17:57,190
consider more expensive<font color="#CCCCCC"> with semantic</font>

403
00:17:54,220 --> 00:17:59,230
features but in exchange<font color="#E5E5E5"> we'll have</font>

404
00:17:57,190 --> 00:18:01,510
better accuracy and<font color="#E5E5E5"> we believe our</font>

405
00:17:59,230 --> 00:18:03,730
performance is still<font color="#E5E5E5"> accept acceptable</font>

406
00:18:01,510 --> 00:18:06,400
because<font color="#E5E5E5"> it's still much faster than a</font>

407
00:18:03,730 --> 00:18:10,660
manual work<font color="#CCCCCC"> and besides our system can</font>

408
00:18:06,400 --> 00:18:13,360
be easily paralyzed and in your

409
00:18:10,660 --> 00:18:15,760
evolution<font color="#CCCCCC"> we also identify many</font>

410
00:18:13,360 --> 00:18:19,149
vulnerabilities which are not<font color="#E5E5E5"> patched in</font>

411
00:18:15,760 --> 00:18:21,430
the Android kernel images if we're now

412
00:18:19,150 --> 00:18:23,650
is the time like all<font color="#E5E5E5"> these security</font>

413
00:18:21,430 --> 00:18:26,620
patches<font color="#E5E5E5"> there are two security patches</font>

414
00:18:23,650 --> 00:18:29,350
are not propagated to<font color="#CCCCCC"> the Android kernel</font>

415
00:18:26,620 --> 00:18:32,379
image<font color="#E5E5E5"> after one month and five after two</font>

416
00:18:29,350 --> 00:18:34,870
months<font color="#CCCCCC"> to after you</font><font color="#E5E5E5"> in half a</font><font color="#CCCCCC"> year which</font>

417
00:18:32,380 --> 00:18:36,700
is<font color="#CCCCCC"> very</font><font color="#E5E5E5"> amazing right but we believe</font>

418
00:18:34,870 --> 00:18:41,290
that<font color="#CCCCCC"> it's our system you have to avoid</font>

419
00:18:36,700 --> 00:18:44,800
the<font color="#E5E5E5"> such cases in the future oh by the</font>

420
00:18:41,290 --> 00:18:46,750
way some of<font color="#E5E5E5"> this half a year security</font>

421
00:18:44,800 --> 00:18:53,440
patch<font color="#E5E5E5"> cases have been confirmed by the</font>

422
00:18:46,750 --> 00:18:56,800
vendors<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so here's a case study of our</font>

423
00:18:53,440 --> 00:18:59,500
system this<font color="#CCCCCC"> CV is one of those half a</font>

424
00:18:56,800 --> 00:19:01,389
year patch so we can say<font color="#E5E5E5"> that the patch</font>

425
00:18:59,500 --> 00:19:03,490
<font color="#CCCCCC">yourself I've</font><font color="#E5E5E5"> introduced as a single</font>

426
00:19:01,390 --> 00:19:05,890
<font color="#E5E5E5">line a single anniversa</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> it's just</font><font color="#CCCCCC"> a</font>

427
00:19:03,490 --> 00:19:08,559
salmon statement and our signature is

428
00:19:05,890 --> 00:19:12,670
basically a<font color="#E5E5E5"> basic block and our semantic</font>

429
00:19:08,559 --> 00:19:15,040
formula is to stop this<font color="#E5E5E5"> zero value to a</font>

430
00:19:12,670 --> 00:19:19,690
memory location<font color="#E5E5E5"> and the memory address</font>

431
00:19:15,040 --> 00:19:21,850
is<font color="#E5E5E5"> x0 plus offset under</font><font color="#CCCCCC"> this x0</font><font color="#E5E5E5"> by the</font>

432
00:19:19,690 --> 00:19:24,370
calling<font color="#CCCCCC"> convention is the first function</font>

433
00:19:21,850 --> 00:19:27,070
parameter in our case is<font color="#CCCCCC"> the SEC</font><font color="#E5E5E5"> F</font>

434
00:19:24,370 --> 00:19:29,469
function<font color="#E5E5E5"> parameter and x0 plus an</font><font color="#CCCCCC"> off</font>

435
00:19:27,070 --> 00:19:32,740
<font color="#CCCCCC">site basically means the dereference</font><font color="#E5E5E5"> of</font>

436
00:19:29,470 --> 00:19:34,630
a field within a set of structure<font color="#E5E5E5"> so we</font>

437
00:19:32,740 --> 00:19:36,070
match the binary level<font color="#E5E5E5"> semantics with</font>

438
00:19:34,630 --> 00:19:39,670
the source code<font color="#CCCCCC"> allows matic</font>

439
00:19:36,070 --> 00:19:42,970
in this case<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> about our implementation</font>

440
00:19:39,670 --> 00:19:45,970
<font color="#CCCCCC">we use anger as our symbolic</font><font color="#E5E5E5"> engine and</font>

441
00:19:42,970 --> 00:19:48,070
we modify<font color="#E5E5E5"> these internals</font><font color="#CCCCCC"> and our system</font>

442
00:19:45,970 --> 00:19:50,080
has a run the ferris on the lines or

443
00:19:48,070 --> 00:19:52,540
person code and it's still under

444
00:19:50,080 --> 00:19:55,510
improvement but we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> obvious acidity</font>

445
00:19:52,540 --> 00:19:57,040
and github if we are<font color="#E5E5E5"> interested please</font>

446
00:19:55,510 --> 00:19:58,640
<font color="#E5E5E5">feel</font><font color="#CCCCCC"> free to check out our</font>

447
00:19:57,040 --> 00:20:01,490
implementation and the levels

448
00:19:58,640 --> 00:20:11,480
feedbacks<font color="#E5E5E5"> okay that's basically well</font>

449
00:20:01,490 --> 00:20:14,030
<font color="#E5E5E5">thank you time for questions</font><font color="#CCCCCC"> to start</font>

450
00:20:11,480 --> 00:20:16,760
<font color="#CCCCCC">this off I'll ask a question so if a</font>

451
00:20:14,030 --> 00:20:19,310
patches applied in<font color="#E5E5E5"> principle so not</font>

452
00:20:16,760 --> 00:20:21,740
exactly either<font color="#E5E5E5"> that's created but if</font>

453
00:20:19,310 --> 00:20:25,060
it's applied in principle to do the same

454
00:20:21,740 --> 00:20:30,260
thing<font color="#E5E5E5"> does</font><font color="#CCCCCC"> this system also detect that</font>

455
00:20:25,060 --> 00:20:32,360
so say we don't<font color="#CCCCCC"> really use the same the</font>

456
00:20:30,260 --> 00:20:34,520
same<font color="#E5E5E5"> we don't create a new variable but</font>

457
00:20:32,360 --> 00:20:37,330
<font color="#CCCCCC">we just do something similar with the</font>

458
00:20:34,520 --> 00:20:38,889
old<font color="#E5E5E5"> variable so your system detect that</font>

459
00:20:37,330 --> 00:20:41,600
<font color="#CCCCCC">sorry</font>

460
00:20:38,890 --> 00:20:43,340
sure so if a patch is semantically

461
00:20:41,600 --> 00:20:45,919
applied so it's applied<font color="#CCCCCC"> in principle but</font>

462
00:20:43,340 --> 00:20:47,959
it's not really applied<font color="#CCCCCC"> exactly as it is</font>

463
00:20:45,920 --> 00:20:50,990
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> would your system do take</font><font color="#E5E5E5"> something</font>

464
00:20:47,960 --> 00:20:52,460
like that<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so and so I think it's</font>

465
00:20:50,990 --> 00:20:54,740
<font color="#E5E5E5">basically very similar to the</font><font color="#CCCCCC"> Thatcher</font>

466
00:20:52,460 --> 00:20:56,870
<font color="#CCCCCC">temptation cases right approach it may</font>

467
00:20:54,740 --> 00:20:59,240
<font color="#E5E5E5">be semantically similar but understand</font>

468
00:20:56,870 --> 00:21:01,850
syntax<font color="#CCCCCC"> allowable it may not be exactly</font>

469
00:20:59,240 --> 00:21:04,100
<font color="#CCCCCC">same</font><font color="#E5E5E5"> I mean this case with doing</font>

470
00:21:01,850 --> 00:21:06,290
contrary some difficulties<font color="#E5E5E5"> yeah you know</font>

471
00:21:04,100 --> 00:21:08,629
imagine<font color="#E5E5E5"> but basically because we look at</font>

472
00:21:06,290 --> 00:21:10,520
a semantic formulas<font color="#E5E5E5"> we think</font><font color="#CCCCCC"> of</font>

473
00:21:08,630 --> 00:21:12,830
<font color="#CCCCCC">constitutive is the part of these</font><font color="#E5E5E5"> cases</font>

474
00:21:10,520 --> 00:21:15,520
because<font color="#E5E5E5"> we</font><font color="#CCCCCC"> look at the semantic features</font>

475
00:21:12,830 --> 00:21:20,780
instead<font color="#E5E5E5"> of</font><font color="#CCCCCC"> chilliest syntax imagine</font>

476
00:21:15,520 --> 00:21:23,510
exactly have another question<font color="#CCCCCC"> I'm</font>

477
00:21:20,780 --> 00:21:25,760
curious<font color="#CCCCCC"> have you looked at so like the</font>

478
00:21:23,510 --> 00:21:27,800
<font color="#E5E5E5">Android patch level</font><font color="#CCCCCC"> we'll say</font><font color="#E5E5E5"> okay this</font>

479
00:21:25,760 --> 00:21:29,480
was patched up<font color="#E5E5E5"> to March 2017 have you</font>

480
00:21:27,800 --> 00:21:31,669
looked at<font color="#E5E5E5"> a comparison</font><font color="#CCCCCC"> like seeing if</font>

481
00:21:29,480 --> 00:21:33,230
you know the patches<font color="#CCCCCC"> that you detect in</font>

482
00:21:31,670 --> 00:21:35,690
<font color="#E5E5E5">the actual kernel image actually match</font>

483
00:21:33,230 --> 00:21:36,650
with those dates<font color="#E5E5E5"> because there's you</font>

484
00:21:35,690 --> 00:21:38,270
know it could<font color="#CCCCCC"> be</font><font color="#E5E5E5"> that they're just</font>

485
00:21:36,650 --> 00:21:40,540
<font color="#CCCCCC">because that</font><font color="#E5E5E5"> date is you know just set</font>

486
00:21:38,270 --> 00:21:42,100
by the by the vendor<font color="#E5E5E5"> you know so</font>

487
00:21:40,540 --> 00:21:45,180
have you sort of tried to compare that

488
00:21:42,100 --> 00:21:45,179
to see if<font color="#CCCCCC"> there discrepancies</font>

489
00:21:45,220 --> 00:21:49,630
<font color="#E5E5E5">sorry kind of yeah</font><font color="#CCCCCC"> yeah sure so like if</font>

490
00:21:48,220 --> 00:21:51,660
a you know if you go<font color="#E5E5E5"> into your system</font>

491
00:21:49,630 --> 00:21:55,960
<font color="#CCCCCC">information you see that the Android</font>

492
00:21:51,660 --> 00:21:57,250
<font color="#CCCCCC">well its patched up to</font><font color="#E5E5E5"> March 2017 so it</font>

493
00:21:55,960 --> 00:22:00,250
should have all<font color="#E5E5E5"> of your security patches</font>

494
00:21:57,250 --> 00:22:02,230
up to that date right<font color="#CCCCCC"> so the question is</font>

495
00:22:00,250 --> 00:22:05,830
have you thought<font color="#CCCCCC"> about taking your</font>

496
00:22:02,230 --> 00:22:09,580
methods<font color="#CCCCCC"> and actually verifying that an</font>

497
00:22:05,830 --> 00:22:12,669
actual binary<font color="#E5E5E5"> kernel is patched as far</font>

498
00:22:09,580 --> 00:22:13,720
as it says it is no we haven't<font color="#E5E5E5"> done</font><font color="#CCCCCC"> that</font>

499
00:22:12,670 --> 00:22:17,830
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> I'm sorry</font>

500
00:22:13,720 --> 00:22:19,990
yeah yeah<font color="#E5E5E5"> the we do have</font><font color="#CCCCCC"> some anecdotal</font>

501
00:22:17,830 --> 00:22:23,980
<font color="#CCCCCC">evidence ok some someone else actually</font>

502
00:22:19,990 --> 00:22:26,290
<font color="#E5E5E5">published some reports saying that</font>

503
00:22:23,980 --> 00:22:28,150
<font color="#E5E5E5">vendors sometimes do cheat the customers</font>

504
00:22:26,290 --> 00:22:30,850
they claim that<font color="#E5E5E5"> the patch is being</font>

505
00:22:28,150 --> 00:22:32,710
applied but it's actually not<font color="#E5E5E5"> we haven't</font>

506
00:22:30,850 --> 00:22:36,449
<font color="#E5E5E5">done</font><font color="#CCCCCC"> that but it's a it's something</font><font color="#E5E5E5"> we</font>

507
00:22:32,710 --> 00:22:36,450
can do<font color="#E5E5E5"> yeah that would</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> really cool</font>

