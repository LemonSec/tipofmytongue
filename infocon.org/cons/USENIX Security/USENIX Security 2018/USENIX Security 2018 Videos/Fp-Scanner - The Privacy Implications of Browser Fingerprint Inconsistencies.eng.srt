1
00:00:10,630 --> 00:00:13,630
so<font color="#E5E5E5"> I'm on to investor from University of</font>

2
00:00:13,210 --> 00:00:15,400
Lille and

3
00:00:13,630 --> 00:00:18,010
<font color="#CCCCCC">INRIA and today I'm going to</font><font color="#E5E5E5"> present</font>

4
00:00:15,400 --> 00:00:20,590
during joint work realized with<font color="#CCCCCC"> PRA PRA</font>

5
00:00:18,010 --> 00:00:22,840
<font color="#CCCCCC">while Terry the Mad King and Managua</font>

6
00:00:20,590 --> 00:00:24,490
about browser fingerprinting and<font color="#E5E5E5"> in</font>

7
00:00:22,840 --> 00:00:27,150
particular our fingerprinting

8
00:00:24,490 --> 00:00:31,360
intelligence may impact<font color="#E5E5E5"> negatively your</font>

9
00:00:27,150 --> 00:00:33,550
privacy so first what's browser

10
00:00:31,360 --> 00:00:35,200
fingerprinting<font color="#CCCCCC"> so it's a</font><font color="#E5E5E5"> state</font><font color="#CCCCCC"> test</font>

11
00:00:33,550 --> 00:00:37,209
tracking techniques<font color="#E5E5E5"> which means that</font>

12
00:00:35,200 --> 00:00:39,309
contrary to cookies for example that

13
00:00:37,210 --> 00:00:41,770
rely on storing<font color="#E5E5E5"> an identifier on your</font>

14
00:00:39,309 --> 00:00:44,099
device browser fingerprinting does not

15
00:00:41,770 --> 00:00:47,080
<font color="#E5E5E5">need to store anything on your device</font>

16
00:00:44,100 --> 00:00:49,059
what we call a browser fingerprint is

17
00:00:47,080 --> 00:00:52,180
simply a combination<font color="#E5E5E5"> of</font><font color="#CCCCCC"> attributes</font>

18
00:00:49,059 --> 00:00:54,099
<font color="#E5E5E5">either sent by your browser in the HTTP</font>

19
00:00:52,180 --> 00:00:55,870
<font color="#CCCCCC">errors</font><font color="#E5E5E5"> like the user agent for example</font>

20
00:00:54,100 --> 00:00:59,170
<font color="#CCCCCC">that contain information about your</font>

21
00:00:55,870 --> 00:01:02,919
<font color="#E5E5E5">operating system or your browser</font><font color="#CCCCCC"> and the</font>

22
00:00:59,170 --> 00:01:04,720
version<font color="#E5E5E5"> other attributes like the screen</font>

23
00:01:02,920 --> 00:01:09,100
resolution<font color="#CCCCCC"> that can be accessed using</font>

24
00:01:04,720 --> 00:01:11,170
<font color="#E5E5E5">javascript api or more complex and</font>

25
00:01:09,100 --> 00:01:13,179
crafted attributes like the canvas<font color="#CCCCCC"> so</font>

26
00:01:11,170 --> 00:01:17,020
the canvas fingerprint is an attribute

27
00:01:13,180 --> 00:01:18,969
<font color="#CCCCCC">that rely</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> javascript</font><font color="#E5E5E5"> canvas api to</font>

28
00:01:17,020 --> 00:01:23,350
generate an image<font color="#E5E5E5"> whose rendering is</font>

29
00:01:18,969 --> 00:01:25,270
different depending<font color="#CCCCCC"> on the device so in</font>

30
00:01:23,350 --> 00:01:26,770
order<font color="#E5E5E5"> to</font><font color="#CCCCCC"> protect against fingerprinting</font>

31
00:01:25,270 --> 00:01:29,200
different kind of strategies have<font color="#CCCCCC"> been</font>

32
00:01:26,770 --> 00:01:31,570
developed<font color="#CCCCCC"> some are simple and are not</font>

33
00:01:29,200 --> 00:01:33,219
used specifically for fingerprinting<font color="#CCCCCC"> for</font>

34
00:01:31,570 --> 00:01:36,119
example script blocking the goal is to

35
00:01:33,219 --> 00:01:38,469
<font color="#CCCCCC">block the</font><font color="#E5E5E5"> collection of the fingerprint</font>

36
00:01:36,119 --> 00:01:40,390
<font color="#E5E5E5">attribute blocking so you may want to</font>

37
00:01:38,469 --> 00:01:42,460
<font color="#E5E5E5">block access</font><font color="#CCCCCC"> to a</font><font color="#E5E5E5"> certain function</font><font color="#CCCCCC"> that</font>

38
00:01:40,390 --> 00:01:45,899
an able to get the value<font color="#E5E5E5"> of a canvas</font><font color="#CCCCCC"> for</font>

39
00:01:42,460 --> 00:01:49,479
example in order<font color="#E5E5E5"> to decrease</font><font color="#CCCCCC"> Yantra p</font>

40
00:01:45,899 --> 00:01:52,090
<font color="#E5E5E5">you may also want</font><font color="#CCCCCC"> to switch the value of</font>

41
00:01:49,479 --> 00:01:54,158
some attributes<font color="#E5E5E5"> either by changing their</font>

42
00:01:52,090 --> 00:01:56,049
value with<font color="#E5E5E5"> other value or by adding</font>

43
00:01:54,159 --> 00:01:57,960
<font color="#E5E5E5">noise in order to break</font><font color="#CCCCCC"> the stability</font>

44
00:01:56,049 --> 00:02:00,549
<font color="#E5E5E5">required to track using fingerprinting</font>

45
00:01:57,960 --> 00:02:02,530
most of the time these tools are either

46
00:02:00,549 --> 00:02:07,359
browser extensions because<font color="#E5E5E5"> it's</font>

47
00:02:02,530 --> 00:02:10,479
convenient<font color="#E5E5E5"> or browser fog browsers the</font>

48
00:02:07,359 --> 00:02:12,760
problem with with contamination<font color="#E5E5E5"> is that</font>

49
00:02:10,479 --> 00:02:16,810
finger printers<font color="#E5E5E5"> may try</font><font color="#CCCCCC"> to detect them</font>

50
00:02:12,760 --> 00:02:19,359
so one of<font color="#CCCCCC"> these</font><font color="#E5E5E5"> finger painter is called</font>

51
00:02:16,810 --> 00:02:22,240
<font color="#E5E5E5">auger for example and on the right you</font>

52
00:02:19,360 --> 00:02:23,830
<font color="#CCCCCC">can see a part of the object</font>

53
00:02:22,240 --> 00:02:26,140
collected in the script and one<font color="#E5E5E5"> of the</font>

54
00:02:23,830 --> 00:02:28,750
attribute is called spoofed<font color="#E5E5E5"> and this</font>

55
00:02:26,140 --> 00:02:30,459
attribute reflect whether or not the

56
00:02:28,750 --> 00:02:34,210
browser is using<font color="#CCCCCC"> a countermeasure</font>

57
00:02:30,460 --> 00:02:36,580
the popular fingerprint<font color="#CCCCCC"> jes - library is</font>

58
00:02:34,210 --> 00:02:39,340
<font color="#E5E5E5">also using</font><font color="#CCCCCC"> test to detect if someone is</font>

59
00:02:36,580 --> 00:02:43,420
using<font color="#CCCCCC"> contender</font><font color="#E5E5E5"> and also differencing</font><font color="#CCCCCC"> a</font>

60
00:02:39,340 --> 00:02:46,330
security fingerprinting script so why it

61
00:02:43,420 --> 00:02:48,790
can<font color="#CCCCCC"> be a problem</font><font color="#E5E5E5"> is because this could</font>

62
00:02:46,330 --> 00:02:55,000
<font color="#E5E5E5">be used potentially to track people with</font>

63
00:02:48,790 --> 00:02:56,290
<font color="#E5E5E5">contamination so in 2013</font><font color="#CCCCCC"> the key for a</font>

64
00:02:55,000 --> 00:02:58,330
<font color="#CCCCCC">key</font><font color="#E5E5E5"> show that you could use my</font>

65
00:02:56,290 --> 00:03:02,140
<font color="#E5E5E5">consistency</font><font color="#CCCCCC"> is to detect the presence of</font>

66
00:02:58,330 --> 00:03:03,880
user agents<font color="#CCCCCC"> provers so i will show</font><font color="#E5E5E5"> show</font>

67
00:03:02,140 --> 00:03:07,420
<font color="#E5E5E5">you how to do it using a simple example</font>

68
00:03:03,880 --> 00:03:10,740
<font color="#E5E5E5">with a native user agent</font><font color="#CCCCCC"> spoofer so we</font>

69
00:03:07,420 --> 00:03:15,190
can<font color="#CCCCCC"> imagine a user on linux with firefox</font>

70
00:03:10,740 --> 00:03:17,470
using a user<font color="#E5E5E5"> agent poofer so since he</font>

71
00:03:15,190 --> 00:03:19,180
modified is user agent<font color="#CCCCCC"> know it says</font>

72
00:03:17,470 --> 00:03:22,510
<font color="#E5E5E5">something like Windows 10 and</font><font color="#CCCCCC"> chrome</font>

73
00:03:19,180 --> 00:03:24,100
instead of<font color="#CCCCCC"> Linux and</font><font color="#E5E5E5"> Firefox but if you</font>

74
00:03:22,510 --> 00:03:28,899
look at another attribute<font color="#E5E5E5"> like</font><font color="#CCCCCC"> a</font>

75
00:03:24,100 --> 00:03:30,970
platform<font color="#CCCCCC"> you see that it's</font><font color="#E5E5E5"> Linux so on</font>

76
00:03:28,900 --> 00:03:32,950
the one hand<font color="#CCCCCC"> you have the user agents in</font>

77
00:03:30,970 --> 00:03:34,750
<font color="#E5E5E5">Windows while the platform say Linux so</font>

78
00:03:32,950 --> 00:03:37,480
that's what we call<font color="#CCCCCC"> a browser</font>

79
00:03:34,750 --> 00:03:38,950
fingerprint<font color="#E5E5E5"> inconsistency and it can be</font>

80
00:03:37,480 --> 00:03:44,260
used<font color="#E5E5E5"> to reveal the</font><font color="#CCCCCC"> presence of</font>

81
00:03:38,950 --> 00:03:46,570
<font color="#CCCCCC">confirmations so now I will present our</font>

82
00:03:44,260 --> 00:03:48,459
approach called<font color="#E5E5E5"> FP scanner so the goal</font>

83
00:03:46,570 --> 00:03:50,109
is to verify<font color="#E5E5E5"> if attributes of a</font>

84
00:03:48,460 --> 00:03:53,920
fingerprint<font color="#E5E5E5"> have been modified by your</font>

85
00:03:50,110 --> 00:03:56,560
container<font color="#E5E5E5"> we extend the world of</font>

86
00:03:53,920 --> 00:04:00,760
<font color="#CCCCCC">nikiforov keys to all kind of containers</font>

87
00:03:56,560 --> 00:04:03,180
so for example<font color="#E5E5E5"> a</font><font color="#CCCCCC"> fog browser also</font><font color="#E5E5E5"> canvas</font>

88
00:04:00,760 --> 00:04:05,320
<font color="#CCCCCC">comm temperature</font><font color="#E5E5E5"> to do so we use</font>

89
00:04:03,180 --> 00:04:07,810
<font color="#E5E5E5">inconsistencies introduced by</font><font color="#CCCCCC"> circle</font>

90
00:04:05,320 --> 00:04:10,269
temperatures the scanner is split into

91
00:04:07,810 --> 00:04:12,280
four components<font color="#CCCCCC"> we try to verify in the</font>

92
00:04:10,270 --> 00:04:14,110
<font color="#E5E5E5">operating system if the browser is</font><font color="#CCCCCC"> the</font>

93
00:04:12,280 --> 00:04:17,048
<font color="#CCCCCC">nature of the device or if the canvas</font>

94
00:04:14,110 --> 00:04:18,850
have been modified<font color="#CCCCCC"> in the next slide I</font>

95
00:04:17,048 --> 00:04:21,399
present for each<font color="#E5E5E5"> component few tests</font>

96
00:04:18,850 --> 00:04:22,900
that we<font color="#CCCCCC"> use to detect the presence</font><font color="#E5E5E5"> of a</font>

97
00:04:21,399 --> 00:04:27,760
<font color="#CCCCCC">contour measure but you can find more</font><font color="#E5E5E5"> of</font>

98
00:04:22,900 --> 00:04:30,280
<font color="#E5E5E5">this test in the in the paper so first</font>

99
00:04:27,760 --> 00:04:31,510
we try<font color="#E5E5E5"> to detect if the operating system</font>

100
00:04:30,280 --> 00:04:33,130
<font color="#CCCCCC">a system</font>

101
00:04:31,510 --> 00:04:35,260
<font color="#E5E5E5">displayed in the user agent has been</font>

102
00:04:33,130 --> 00:04:35,740
<font color="#E5E5E5">modified</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do so we verify this</font>

103
00:04:35,260 --> 00:04:37,240
<font color="#E5E5E5">operation</font>

104
00:04:35,740 --> 00:04:38,919
system with attributes<font color="#E5E5E5"> like the</font>

105
00:04:37,240 --> 00:04:42,370
<font color="#CCCCCC">Navigator platform</font><font color="#E5E5E5"> as we did in the</font>

106
00:04:38,919 --> 00:04:44,859
<font color="#E5E5E5">previous example</font><font color="#CCCCCC"> we can also</font><font color="#E5E5E5"> query the</font>

107
00:04:42,370 --> 00:04:46,960
<font color="#E5E5E5">WebGL API so it's an API used to</font>

108
00:04:44,860 --> 00:04:50,410
<font color="#CCCCCC">generate 3d</font><font color="#E5E5E5"> shapes in the browser and</font>

109
00:04:46,960 --> 00:04:52,989
you can ask<font color="#E5E5E5"> for the GPU vendor and it</font>

110
00:04:50,410 --> 00:04:55,810
happens that the GPU vendor is dependent

111
00:04:52,990 --> 00:04:58,900
on the on<font color="#E5E5E5"> the operating system</font><font color="#CCCCCC"> so for</font>

112
00:04:55,810 --> 00:05:01,990
<font color="#E5E5E5">example on Mac OS you may find a</font><font color="#CCCCCC"> Intel</font>

113
00:04:58,900 --> 00:05:05,109
<font color="#CCCCCC">or a TI y on</font><font color="#E5E5E5"> although you may find</font><font color="#CCCCCC"> fine</font>

114
00:05:01,990 --> 00:05:07,150
<font color="#CCCCCC">wonders</font><font color="#E5E5E5"> like Qualcomm</font><font color="#CCCCCC"> or arm so you</font><font color="#E5E5E5"> can</font>

115
00:05:05,110 --> 00:05:09,789
use this<font color="#E5E5E5"> value</font><font color="#CCCCCC"> to correlate or to verify</font>

116
00:05:07,150 --> 00:05:12,370
<font color="#CCCCCC">if the user agent</font><font color="#E5E5E5"> if the operating</font>

117
00:05:09,789 --> 00:05:15,818
system system<font color="#E5E5E5"> displayed in the user</font>

118
00:05:12,370 --> 00:05:18,819
agent<font color="#CCCCCC"> is consistent concerning the</font>

119
00:05:15,819 --> 00:05:20,680
browser<font color="#E5E5E5"> it's easier so you can just</font>

120
00:05:18,819 --> 00:05:22,870
<font color="#E5E5E5">throw an error for</font><font color="#CCCCCC"> example if we throw a</font>

121
00:05:20,680 --> 00:05:24,759
stack overflow error<font color="#CCCCCC"> on the left you</font>

122
00:05:22,870 --> 00:05:26,860
have as a result obtained with Firefox

123
00:05:24,759 --> 00:05:28,990
<font color="#E5E5E5">so you obtain</font><font color="#CCCCCC"> an error message</font><font color="#E5E5E5"> saying</font>

124
00:05:26,860 --> 00:05:30,970
<font color="#CCCCCC">too much</font><font color="#E5E5E5"> recursion and on the right is</font>

125
00:05:28,990 --> 00:05:34,389
the error message for<font color="#CCCCCC"> prompt say maximum</font>

126
00:05:30,970 --> 00:05:36,909
<font color="#E5E5E5">cost</font><font color="#CCCCCC"> is exceeded</font><font color="#E5E5E5"> the type of 0 is also</font>

127
00:05:34,389 --> 00:05:38,770
different<font color="#E5E5E5"> for Firefox you obtain an</font>

128
00:05:36,909 --> 00:05:43,030
internal<font color="#CCCCCC"> error</font><font color="#E5E5E5"> while for</font><font color="#CCCCCC"> chrome you</font>

129
00:05:38,770 --> 00:05:45,969
obtain around<font color="#CCCCCC"> 0 you can also use browser</font>

130
00:05:43,030 --> 00:05:48,369
features<font color="#E5E5E5"> because features depend both on</font>

131
00:05:45,969 --> 00:05:50,380
the browser but also on the version<font color="#CCCCCC"> so</font>

132
00:05:48,370 --> 00:05:52,389
you<font color="#E5E5E5"> can use it</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> test also if the</font>

133
00:05:50,380 --> 00:05:55,090
version<font color="#CCCCCC"> claim in the user agent has been</font>

134
00:05:52,389 --> 00:05:57,219
modified<font color="#CCCCCC"> or not</font><font color="#E5E5E5"> and you can</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> really</font>

135
00:05:55,090 --> 00:05:59,560
simple<font color="#CCCCCC"> training like running eval de to</font>

136
00:05:57,219 --> 00:06:03,940
string and depending<font color="#E5E5E5"> on the browser</font><font color="#CCCCCC"> it</font>

137
00:05:59,560 --> 00:06:06,610
has a different value the third

138
00:06:03,940 --> 00:06:08,860
component is a device<font color="#CCCCCC"> inconsistency so</font>

139
00:06:06,610 --> 00:06:11,139
<font color="#E5E5E5">basically we want</font><font color="#CCCCCC"> to verify</font><font color="#E5E5E5"> for example</font>

140
00:06:08,860 --> 00:06:12,969
if a device claimed to be<font color="#E5E5E5"> a</font><font color="#CCCCCC"> smartphone</font>

141
00:06:11,139 --> 00:06:15,250
<font color="#CCCCCC">is it</font><font color="#E5E5E5"> when your smartphone or is it a</font>

142
00:06:12,969 --> 00:06:17,860
computer<font color="#E5E5E5"> to do so with as the presence</font>

143
00:06:15,250 --> 00:06:21,310
of<font color="#CCCCCC"> difference event or sensors</font><font color="#E5E5E5"> so for</font>

144
00:06:17,860 --> 00:06:24,009
example we want<font color="#E5E5E5"> to test</font><font color="#CCCCCC"> the first</font><font color="#E5E5E5"> user</font>

145
00:06:21,310 --> 00:06:26,770
agent claiming to be a<font color="#CCCCCC"> fund has a mouse</font>

146
00:06:24,009 --> 00:06:32,680
<font color="#E5E5E5">or if your smartphone has no</font>

147
00:06:26,770 --> 00:06:35,380
accelerometer finally<font color="#E5E5E5"> the last component</font>

148
00:06:32,680 --> 00:06:37,180
<font color="#CCCCCC">is the canvas so we focus on canvas</font>

149
00:06:35,380 --> 00:06:39,909
because<font color="#E5E5E5"> it's an</font><font color="#CCCCCC"> attribute that has a</font>

150
00:06:37,180 --> 00:06:41,590
high entropy<font color="#E5E5E5"> it depends on the device on</font>

151
00:06:39,909 --> 00:06:44,260
<font color="#E5E5E5">the browser on the operating system</font><font color="#CCCCCC"> and</font>

152
00:06:41,590 --> 00:06:46,210
it also<font color="#E5E5E5"> has a high stability which means</font>

153
00:06:44,260 --> 00:06:49,330
that it's an important attribute for

154
00:06:46,210 --> 00:06:50,948
<font color="#E5E5E5">tracking so here you can see a normal</font>

155
00:06:49,330 --> 00:06:53,080
<font color="#E5E5E5">verse that has not been modified</font><font color="#CCCCCC"> and</font>

156
00:06:50,949 --> 00:06:55,180
below you see a canvas<font color="#E5E5E5"> that's been</font>

157
00:06:53,080 --> 00:06:56,680
<font color="#CCCCCC">modified by your control module</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> you</font>

158
00:06:55,180 --> 00:07:01,719
can easily<font color="#E5E5E5"> spot</font><font color="#CCCCCC"> the difference between</font>

159
00:06:56,680 --> 00:07:03,370
<font color="#E5E5E5">the two</font><font color="#CCCCCC"> so we will</font><font color="#E5E5E5"> use this to detect</font>

160
00:07:01,719 --> 00:07:06,520
different amateur as<font color="#E5E5E5"> modifying the</font>

161
00:07:03,370 --> 00:07:08,530
canvas<font color="#E5E5E5"> the idea is when</font><font color="#CCCCCC"> you generate</font><font color="#E5E5E5"> a</font>

162
00:07:06,520 --> 00:07:10,750
canvas<font color="#E5E5E5"> the finger printer provide</font>

163
00:07:08,530 --> 00:07:14,020
instructions<font color="#E5E5E5"> like write this text</font><font color="#CCCCCC"> at</font>

164
00:07:10,750 --> 00:07:17,409
this position<font color="#E5E5E5"> draw orange rectangle for</font>

165
00:07:14,020 --> 00:07:21,280
example with a<font color="#E5E5E5"> given color and so we</font>

166
00:07:17,409 --> 00:07:23,319
<font color="#E5E5E5">expect each instruction</font><font color="#CCCCCC"> to have</font><font color="#E5E5E5"> effect</font>

167
00:07:21,280 --> 00:07:26,109
<font color="#E5E5E5">in the generated image that we can</font>

168
00:07:23,319 --> 00:07:28,210
verify<font color="#E5E5E5"> so in our case for example we</font>

169
00:07:26,110 --> 00:07:30,969
<font color="#CCCCCC">want to</font><font color="#E5E5E5"> verify if the</font><font color="#CCCCCC"> background is</font>

170
00:07:28,210 --> 00:07:34,030
transparent<font color="#CCCCCC"> if there is no</font><font color="#E5E5E5"> isolated</font>

171
00:07:30,969 --> 00:07:36,129
<font color="#E5E5E5">pixels so any pixels with whose value</font><font color="#CCCCCC"> is</font>

172
00:07:34,030 --> 00:07:38,830
different with not<font color="#E5E5E5"> transparent</font><font color="#CCCCCC"> that</font>

173
00:07:36,129 --> 00:07:40,690
surrounded by transparent<font color="#E5E5E5"> pixel and we</font>

174
00:07:38,830 --> 00:07:44,529
want to verify<font color="#E5E5E5"> the color of the orange</font>

175
00:07:40,690 --> 00:07:46,599
rectangle we can<font color="#CCCCCC"> also</font><font color="#E5E5E5"> verify if the</font><font color="#CCCCCC"> data</font>

176
00:07:44,529 --> 00:07:48,340
URL and get image data function have

177
00:07:46,599 --> 00:07:50,979
been overridden<font color="#E5E5E5"> because most of the time</font>

178
00:07:48,340 --> 00:07:52,599
<font color="#E5E5E5">canvas</font><font color="#CCCCCC"> control measure modifies the</font>

179
00:07:50,979 --> 00:07:55,180
native behavior of the function<font color="#CCCCCC"> by</font>

180
00:07:52,599 --> 00:07:56,710
<font color="#E5E5E5">overriding them and you can observe</font><font color="#CCCCCC"> that</font>

181
00:07:55,180 --> 00:08:01,840
it's been overridden by looking at the

182
00:07:56,710 --> 00:08:03,729
two<font color="#CCCCCC"> string for the evaluation</font><font color="#E5E5E5"> we</font>

183
00:08:01,840 --> 00:08:07,119
evaluated against seven<font color="#E5E5E5"> counter measures</font>

184
00:08:03,729 --> 00:08:09,008
ranging<font color="#E5E5E5"> from simple canvas come to</font>

185
00:08:07,120 --> 00:08:12,190
<font color="#E5E5E5">measure extension like canvas defender</font>

186
00:08:09,009 --> 00:08:15,310
or canvas<font color="#E5E5E5"> FB block also FP random which</font>

187
00:08:12,190 --> 00:08:18,310
is a browser that<font color="#CCCCCC"> modifies the canvas in</font>

188
00:08:15,310 --> 00:08:20,169
a more consistent way<font color="#E5E5E5"> we also evaluate</font>

189
00:08:18,310 --> 00:08:22,449
against<font color="#CCCCCC"> vendor merchants prefer which is</font>

190
00:08:20,169 --> 00:08:25,659
a browser extension for Firefox that<font color="#E5E5E5"> try</font>

191
00:08:22,449 --> 00:08:27,430
to<font color="#E5E5E5"> like consistently about your</font><font color="#CCCCCC"> identity</font>

192
00:08:25,659 --> 00:08:30,219
so pretending that you are on Mac for

193
00:08:27,430 --> 00:08:32,469
<font color="#CCCCCC">example</font><font color="#E5E5E5"> even though</font><font color="#CCCCCC"> you are on Enix we</font>

194
00:08:30,219 --> 00:08:36,070
also test a simple user agents<font color="#CCCCCC"> buffers</font>

195
00:08:32,469 --> 00:08:39,880
and we test the Firefox fingerprinting

196
00:08:36,070 --> 00:08:42,159
protection and<font color="#CCCCCC"> bribe which is</font><font color="#E5E5E5"> a browser</font>

197
00:08:39,880 --> 00:08:46,300
<font color="#E5E5E5">with</font><font color="#CCCCCC"> the native fingerprinting</font>

198
00:08:42,159 --> 00:08:48,970
<font color="#E5E5E5">protection we also we compare with</font>

199
00:08:46,300 --> 00:08:50,859
fingerprint<font color="#CCCCCC"> J's to an</font><font color="#E5E5E5"> ogre so</font><font color="#CCCCCC"> uber is a</font>

200
00:08:48,970 --> 00:08:52,199
<font color="#E5E5E5">tracking company that provides</font>

201
00:08:50,860 --> 00:08:55,000
tracking using fingerprinting and

202
00:08:52,199 --> 00:08:57,339
<font color="#CCCCCC">fingerprint gs2 is a open</font><font color="#E5E5E5"> source library</font>

203
00:08:55,000 --> 00:08:58,779
so in the script<font color="#E5E5E5"> the verifies the</font>

204
00:08:57,339 --> 00:09:02,589
operating<font color="#E5E5E5"> system the screen resolution</font>

205
00:08:58,779 --> 00:09:03,279
<font color="#CCCCCC">and the device</font><font color="#E5E5E5"> on the browser we</font>

206
00:09:02,589 --> 00:09:05,170
collected

207
00:09:03,279 --> 00:09:07,329
fingerprints with and without the

208
00:09:05,170 --> 00:09:10,748
contamination from multiple<font color="#E5E5E5"> devices and</font>

209
00:09:07,329 --> 00:09:13,660
here are the results<font color="#E5E5E5"> so each line</font>

210
00:09:10,749 --> 00:09:15,639
represents<font color="#CCCCCC"> contributors</font><font color="#E5E5E5"> in red we have</font>

211
00:09:13,660 --> 00:09:17,620
the<font color="#E5E5E5"> accuracy with our scanner and in</font>

212
00:09:15,639 --> 00:09:20,559
<font color="#CCCCCC">gray</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> auger</font><font color="#E5E5E5"> and a fingerprint</font>

213
00:09:17,620 --> 00:09:22,629
<font color="#CCCCCC">gesture so we were always able to</font><font color="#E5E5E5"> detect</font>

214
00:09:20,559 --> 00:09:25,749
the<font color="#E5E5E5"> presence of contamination or if</font>

215
00:09:22,629 --> 00:09:28,240
browser didn't use any<font color="#E5E5E5"> contamination in</font>

216
00:09:25,749 --> 00:09:30,490
particular we were able<font color="#E5E5E5"> to detect canvas</font>

217
00:09:28,240 --> 00:09:32,740
<font color="#CCCCCC">contumacy</font><font color="#E5E5E5"> like canvas defender or canvas</font>

218
00:09:30,490 --> 00:09:35,790
<font color="#CCCCCC">if they block FP</font><font color="#E5E5E5"> block even though</font>

219
00:09:32,740 --> 00:09:39,100
<font color="#CCCCCC">earlier was not</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to detect it</font>

220
00:09:35,790 --> 00:09:40,949
we also<font color="#CCCCCC"> outperform</font><font color="#E5E5E5"> of your own</font>

221
00:09:39,100 --> 00:09:42,790
randomization spoofer because

222
00:09:40,949 --> 00:09:44,740
<font color="#CCCCCC">randomization is</font><font color="#E5E5E5"> conferred tries to</font>

223
00:09:42,790 --> 00:09:47,379
<font color="#E5E5E5">learn to lie in a more consistent way</font>

224
00:09:44,740 --> 00:09:49,689
but we were still able to<font color="#E5E5E5"> detect it</font>

225
00:09:47,379 --> 00:09:54,180
using for<font color="#CCCCCC"> example the accelerometer</font>

226
00:09:49,689 --> 00:09:57,129
<font color="#CCCCCC">because sometimes some contaminants some</font>

227
00:09:54,180 --> 00:09:59,290
some some<font color="#E5E5E5"> fingerprints were pretending</font>

228
00:09:57,129 --> 00:10:01,779
<font color="#E5E5E5">to be</font><font color="#CCCCCC"> a smartphone</font><font color="#E5E5E5"> but didn't have any</font>

229
00:09:59,290 --> 00:10:06,248
accelerometer<font color="#CCCCCC"> it could also detect that</font>

230
00:10:01,779 --> 00:10:08,709
<font color="#E5E5E5">the attribute vendor was overridden in</font>

231
00:10:06,249 --> 00:10:10,120
the case of<font color="#E5E5E5"> canvas extension and if P</font>

232
00:10:08,709 --> 00:10:13,209
random we could detect them because

233
00:10:10,120 --> 00:10:16,779
pixel were not consistent and<font color="#CCCCCC"> to data</font>

234
00:10:13,209 --> 00:10:18,579
URL function<font color="#E5E5E5"> was overridden in the case</font>

235
00:10:16,779 --> 00:10:20,620
of brave it<font color="#E5E5E5"> was simple because the</font>

236
00:10:18,579 --> 00:10:23,019
enumerate devices function<font color="#E5E5E5"> was a very</font>

237
00:10:20,620 --> 00:10:26,139
<font color="#CCCCCC">even to return a</font><font color="#E5E5E5"> proxy object</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you can</font>

238
00:10:23,019 --> 00:10:27,759
easily<font color="#E5E5E5"> detect it and for the Firefox</font>

239
00:10:26,139 --> 00:10:30,879
fingerprinting protection<font color="#CCCCCC"> you could</font>

240
00:10:27,759 --> 00:10:32,410
query the WebGL<font color="#E5E5E5"> vendor and it was not</font>

241
00:10:30,879 --> 00:10:36,100
always<font color="#E5E5E5"> consistent with your operating</font>

242
00:10:32,410 --> 00:10:37,509
system<font color="#CCCCCC"> claim also</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> major</font><font color="#E5E5E5"> queries</font>

243
00:10:36,100 --> 00:10:43,000
were not consistent with the browser

244
00:10:37,509 --> 00:10:45,040
version okay so we have<font color="#E5E5E5"> showed that</font><font color="#CCCCCC"> it</font>

245
00:10:43,000 --> 00:10:47,319
<font color="#CCCCCC">was</font><font color="#E5E5E5"> possible</font><font color="#CCCCCC"> to detect</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> countermeasures</font>

246
00:10:45,040 --> 00:10:50,800
we also wanted to try<font color="#CCCCCC"> to recover</font>

247
00:10:47,319 --> 00:10:53,559
original values<font color="#E5E5E5"> so we want to infer the</font>

248
00:10:50,800 --> 00:10:56,429
<font color="#E5E5E5">real nature of the device so the real</font>

249
00:10:53,559 --> 00:10:58,240
operating<font color="#E5E5E5"> system browser and the</font><font color="#CCCCCC"> version</font>

250
00:10:56,429 --> 00:11:01,350
so to detect

251
00:10:58,240 --> 00:11:04,660
to to inverse a real operating system<font color="#E5E5E5"> we</font>

252
00:11:01,350 --> 00:11:07,480
combine different<font color="#E5E5E5"> tests that we used to</font>

253
00:11:04,660 --> 00:11:09,610
detect if the browser<font color="#E5E5E5"> is lying on its</font>

254
00:11:07,480 --> 00:11:11,620
operating system<font color="#CCCCCC"> like the testing the</font>

255
00:11:09,610 --> 00:11:14,769
<font color="#CCCCCC">different</font><font color="#E5E5E5"> plug-in extensions WebGL or</font>

256
00:11:11,620 --> 00:11:17,499
the list of<font color="#CCCCCC"> funds</font>

257
00:11:14,769 --> 00:11:19,689
to recover<font color="#CCCCCC"> the</font><font color="#E5E5E5"> real</font><font color="#CCCCCC"> browser</font><font color="#E5E5E5"> family we</font>

258
00:11:17,499 --> 00:11:22,540
use simple<font color="#E5E5E5"> tricks like eval to string</font>

259
00:11:19,689 --> 00:11:25,439
that<font color="#CCCCCC"> lines</font><font color="#E5E5E5"> and the value of the project</font>

260
00:11:22,540 --> 00:11:28,118
sub attribute<font color="#CCCCCC"> and to recover</font><font color="#E5E5E5"> the real</font>

261
00:11:25,439 --> 00:11:30,009
browser version we use<font color="#E5E5E5"> a</font><font color="#CCCCCC"> moderniser</font>

262
00:11:28,119 --> 00:11:33,850
which is a library<font color="#CCCCCC"> that enabled to test</font>

263
00:11:30,009 --> 00:11:35,769
<font color="#CCCCCC">different features concerning the</font>

264
00:11:33,850 --> 00:11:37,569
results we were able<font color="#E5E5E5"> to detect the real</font>

265
00:11:35,769 --> 00:11:40,480
<font color="#E5E5E5">operating system family</font><font color="#CCCCCC"> and browser</font>

266
00:11:37,569 --> 00:11:42,639
family which means that in both<font color="#E5E5E5"> cases we</font>

267
00:11:40,480 --> 00:11:44,889
were not able to detect if it was

268
00:11:42,639 --> 00:11:47,259
<font color="#E5E5E5">Windows 7 or Windows Windows 8 for</font>

269
00:11:44,889 --> 00:11:49,149
example<font color="#CCCCCC"> only</font><font color="#E5E5E5"> the family and concerning</font>

270
00:11:47,259 --> 00:11:51,790
<font color="#E5E5E5">the browser version we were only able to</font>

271
00:11:49,149 --> 00:11:57,129
<font color="#E5E5E5">detect a</font><font color="#CCCCCC"> bunch of</font><font color="#E5E5E5"> versions but not the</font>

272
00:11:51,790 --> 00:12:00,279
exact version so what has implications

273
00:11:57,129 --> 00:12:02,860
in<font color="#E5E5E5"> terms of privacy so the first one is</font>

274
00:12:00,279 --> 00:12:04,660
discrimination<font color="#E5E5E5"> so you could</font><font color="#CCCCCC"> imagine</font>

275
00:12:02,860 --> 00:12:07,329
something<font color="#E5E5E5"> similar to</font><font color="#CCCCCC"> what happens we</font>

276
00:12:04,660 --> 00:12:08,920
with anti blockers<font color="#E5E5E5"> for example you visit</font>

277
00:12:07,329 --> 00:12:12,579
a<font color="#E5E5E5"> website and they may ask you to</font>

278
00:12:08,920 --> 00:12:15,248
deactivate<font color="#E5E5E5"> your contain measure</font><font color="#CCCCCC"> there</font>

279
00:12:12,579 --> 00:12:17,410
may also be<font color="#CCCCCC"> some price</font><font color="#E5E5E5"> discrimination</font>

280
00:12:15,249 --> 00:12:21,309
<font color="#E5E5E5">you may have higher prices if you use a</font>

281
00:12:17,410 --> 00:12:23,829
controller the second one and<font color="#E5E5E5"> the most</font>

282
00:12:21,309 --> 00:12:27,100
important we<font color="#CCCCCC"> think is</font><font color="#E5E5E5"> track ability so</font>

283
00:12:23,829 --> 00:12:30,118
having<font color="#CCCCCC"> fingerprints in kilometer could</font>

284
00:12:27,100 --> 00:12:33,999
make you more easily<font color="#E5E5E5"> trackable which is</font>

285
00:12:30,119 --> 00:12:35,379
not the purpose<font color="#CCCCCC"> of the tool</font><font color="#E5E5E5"> so but we</font>

286
00:12:33,999 --> 00:12:37,089
argue<font color="#E5E5E5"> that it depends on</font><font color="#CCCCCC"> different</font>

287
00:12:35,379 --> 00:12:39,279
<font color="#CCCCCC">factors because simply</font><font color="#E5E5E5"> being detected</font>

288
00:12:37,089 --> 00:12:42,879
with the contamination is not enough for

289
00:12:39,279 --> 00:12:45,279
<font color="#E5E5E5">making tracking easier the first factor</font>

290
00:12:42,879 --> 00:12:47,559
<font color="#E5E5E5">is the ability</font><font color="#CCCCCC"> to identify</font><font color="#E5E5E5"> precisely the</font>

291
00:12:45,279 --> 00:12:49,569
<font color="#CCCCCC">contr meter</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> our evaluation</font><font color="#CCCCCC"> we</font>

292
00:12:47,559 --> 00:12:51,339
simply test<font color="#E5E5E5"> if we can detect the</font>

293
00:12:49,569 --> 00:12:56,259
presence<font color="#E5E5E5"> of any contaminants but not</font>

294
00:12:51,339 --> 00:12:58,089
identify one in particular<font color="#CCCCCC"> then the</font>

295
00:12:56,259 --> 00:13:00,429
number<font color="#E5E5E5"> of users because if you if you</font>

296
00:12:58,089 --> 00:13:03,189
can<font color="#CCCCCC"> identify your</font><font color="#E5E5E5"> container and</font><font color="#CCCCCC"> it's not</font>

297
00:13:00,429 --> 00:13:04,689
used<font color="#E5E5E5"> by many users then simply being</font>

298
00:13:03,189 --> 00:13:10,089
detected with these<font color="#CCCCCC"> contaminants</font><font color="#E5E5E5"> is</font>

299
00:13:04,689 --> 00:13:12,339
highly discriminating also the<font color="#CCCCCC"> ability</font>

300
00:13:10,089 --> 00:13:14,079
to recover original values<font color="#E5E5E5"> I will show</font>

301
00:13:12,339 --> 00:13:16,089
you an example<font color="#E5E5E5"> after but for</font><font color="#CCCCCC"> example if</font>

302
00:13:14,079 --> 00:13:18,069
you<font color="#E5E5E5"> use a canvas</font><font color="#CCCCCC"> canta measures but</font><font color="#E5E5E5"> you</font>

303
00:13:16,089 --> 00:13:21,850
can recover<font color="#E5E5E5"> the original values then</font>

304
00:13:18,069 --> 00:13:23,649
it's easier to track<font color="#CCCCCC"> you and finally the</font>

305
00:13:21,850 --> 00:13:28,450
quantity of<font color="#CCCCCC"> information leaked by the</font>

306
00:13:23,649 --> 00:13:30,790
<font color="#CCCCCC">consumption globally the question is to</font>

307
00:13:28,450 --> 00:13:32,500
the anonymity<font color="#E5E5E5"> game provided by</font><font color="#CCCCCC"> the</font>

308
00:13:30,790 --> 00:13:36,699
<font color="#E5E5E5">controversial outweighs the anonymity</font>

309
00:13:32,500 --> 00:13:38,470
<font color="#CCCCCC">loss caused by</font><font color="#E5E5E5"> its detection so I will</font>

310
00:13:36,700 --> 00:13:40,870
show<font color="#E5E5E5"> you an</font><font color="#CCCCCC"> example with canvas</font><font color="#E5E5E5"> defender</font>

311
00:13:38,470 --> 00:13:43,149
<font color="#E5E5E5">which is a</font><font color="#CCCCCC"> Chrome and Firefox</font><font color="#E5E5E5"> extension</font>

312
00:13:40,870 --> 00:13:45,160
and<font color="#E5E5E5"> I will show you that in this</font><font color="#CCCCCC"> case</font>

313
00:13:43,149 --> 00:13:47,620
<font color="#CCCCCC">for example</font><font color="#E5E5E5"> it's not here whether or not</font>

314
00:13:45,160 --> 00:13:50,649
using<font color="#E5E5E5"> canvas defender really improve</font>

315
00:13:47,620 --> 00:13:54,130
your privacy<font color="#E5E5E5"> so it's an extension that</font>

316
00:13:50,649 --> 00:13:56,110
has<font color="#E5E5E5"> around 25,000 users</font><font color="#CCCCCC"> which which</font>

317
00:13:54,130 --> 00:13:58,660
randomize the canvas by adding a noise

318
00:13:56,110 --> 00:14:00,699
<font color="#CCCCCC">and to do so it modifies the native</font>

319
00:13:58,660 --> 00:14:04,510
behavior of<font color="#E5E5E5"> two</font><font color="#CCCCCC"> data URL and get image</font>

320
00:14:00,699 --> 00:14:06,399
data functions<font color="#E5E5E5"> so you can see to canvas</font>

321
00:14:04,510 --> 00:14:08,019
the<font color="#E5E5E5"> first one is a</font><font color="#CCCCCC"> canvas</font><font color="#E5E5E5"> without any</font>

322
00:14:06,399 --> 00:14:12,279
contamination<font color="#E5E5E5"> and the second one is a</font>

323
00:14:08,019 --> 00:14:15,790
canvas modified by canvas defender so

324
00:14:12,279 --> 00:14:17,620
first we want<font color="#CCCCCC"> to try to identify canvas</font>

325
00:14:15,790 --> 00:14:19,839
defender<font color="#E5E5E5"> so it's really simple you just</font>

326
00:14:17,620 --> 00:14:22,180
need<font color="#E5E5E5"> to look at the two string of two</font>

327
00:14:19,839 --> 00:14:24,220
data URL function<font color="#E5E5E5"> and it returns the</font>

328
00:14:22,180 --> 00:14:27,219
card<font color="#E5E5E5"> used by the extension to override</font>

329
00:14:24,220 --> 00:14:32,709
<font color="#E5E5E5">two data URL so it can be used as as a</font>

330
00:14:27,220 --> 00:14:34,899
signature of<font color="#E5E5E5"> the extension then we</font><font color="#CCCCCC"> will</font>

331
00:14:32,709 --> 00:14:37,359
also<font color="#E5E5E5"> like to recover the</font><font color="#CCCCCC"> original value</font>

332
00:14:34,899 --> 00:14:39,610
<font color="#E5E5E5">so we would like to obtain the</font><font color="#CCCCCC"> original</font>

333
00:14:37,360 --> 00:14:42,070
value<font color="#E5E5E5"> of the canvas so it's really</font>

334
00:14:39,610 --> 00:14:44,410
<font color="#E5E5E5">simple once again because canvas</font>

335
00:14:42,070 --> 00:14:47,440
defender is a browser extension so it

336
00:14:44,410 --> 00:14:49,390
means that it's<font color="#CCCCCC"> code</font><font color="#E5E5E5"> is a in a Content</font>

337
00:14:47,440 --> 00:14:51,519
script<font color="#E5E5E5"> in the extension and in order to</font>

338
00:14:49,390 --> 00:14:54,100
<font color="#E5E5E5">override the two data URL function</font><font color="#CCCCCC"> you</font>

339
00:14:51,519 --> 00:14:57,250
need to inject a script element into the

340
00:14:54,100 --> 00:14:59,350
Dom of<font color="#CCCCCC"> the page which means that if you</font>

341
00:14:57,250 --> 00:15:02,740
<font color="#CCCCCC">can execute some code before</font><font color="#E5E5E5"> the dam is</font>

342
00:14:59,350 --> 00:15:05,140
loaded<font color="#E5E5E5"> then you can clone the original</font>

343
00:15:02,740 --> 00:15:07,170
to the<font color="#CCCCCC"> Tar Valon</font><font color="#E5E5E5"> function</font><font color="#CCCCCC"> and so that's</font>

344
00:15:05,140 --> 00:15:09,699
what we do we<font color="#E5E5E5"> call original function and</font>

345
00:15:07,170 --> 00:15:12,459
we wait<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the Dom content to be loaded</font>

346
00:15:09,699 --> 00:15:14,290
so that emojis<font color="#CCCCCC"> r1 directly in the canvas</font>

347
00:15:12,459 --> 00:15:17,079
<font color="#E5E5E5">and then we can obtain the original</font>

348
00:15:14,290 --> 00:15:21,099
canvas value even<font color="#E5E5E5"> though the user as the</font>

349
00:15:17,079 --> 00:15:24,069
canvas<font color="#CCCCCC"> contaminated</font><font color="#E5E5E5"> and finally you try</font>

350
00:15:21,100 --> 00:15:28,060
to extract some information<font color="#E5E5E5"> leaked by</font>

351
00:15:24,069 --> 00:15:30,040
the browser so canvas defender generate

352
00:15:28,060 --> 00:15:34,268
a random noise<font color="#E5E5E5"> vector of phone number</font>

353
00:15:30,040 --> 00:15:36,730
<font color="#E5E5E5">air GBA for the</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> Ring red and blue</font>

354
00:15:34,269 --> 00:15:39,250
<font color="#CCCCCC">and alpha components of a color and it</font>

355
00:15:36,730 --> 00:15:41,470
<font color="#CCCCCC">add this noise to each pixel in the</font>

356
00:15:39,250 --> 00:15:44,260
<font color="#E5E5E5">canvas</font>

357
00:15:41,470 --> 00:15:46,810
but<font color="#CCCCCC"> cannabis defender well it injects</font>

358
00:15:44,260 --> 00:15:48,640
the script<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> done of</font><font color="#E5E5E5"> the page</font><font color="#CCCCCC"> it's</font>

359
00:15:46,810 --> 00:15:50,979
also inject<font color="#E5E5E5"> these parameters which means</font>

360
00:15:48,640 --> 00:15:52,960
that you can<font color="#E5E5E5"> using using a mutation</font>

361
00:15:50,980 --> 00:15:55,930
observer<font color="#E5E5E5"> you can detect when</font><font color="#CCCCCC"> the script</font>

362
00:15:52,960 --> 00:15:57,370
is added and<font color="#CCCCCC"> you can also extract this</font>

363
00:15:55,930 --> 00:16:02,859
parameter using<font color="#CCCCCC"> a simple regular</font>

364
00:15:57,370 --> 00:16:05,080
<font color="#E5E5E5">expression so as a conclusion concerning</font>

365
00:16:02,860 --> 00:16:07,330
this<font color="#E5E5E5"> contributor canvas defender can be</font>

366
00:16:05,080 --> 00:16:10,180
easily identified simply by using<font color="#CCCCCC"> two</font>

367
00:16:07,330 --> 00:16:14,200
stream function which is<font color="#E5E5E5"> not complex it</font>

368
00:16:10,180 --> 00:16:15,849
has relatively<font color="#E5E5E5"> few number of users which</font>

369
00:16:14,200 --> 00:16:17,620
means that simply<font color="#E5E5E5"> being detecting with</font>

370
00:16:15,850 --> 00:16:20,500
<font color="#E5E5E5">canvas defender is</font><font color="#CCCCCC"> discriminative in</font>

371
00:16:17,620 --> 00:16:22,240
itself<font color="#CCCCCC"> you can easily recover the</font>

372
00:16:20,500 --> 00:16:25,300
original<font color="#E5E5E5"> value by calling your cut</font>

373
00:16:22,240 --> 00:16:27,190
before<font color="#CCCCCC"> the code of</font><font color="#E5E5E5"> the extension and it</font>

374
00:16:25,300 --> 00:16:30,760
leaks a potentially stable identifier

375
00:16:27,190 --> 00:16:34,210
because unless you modify the default

376
00:16:30,760 --> 00:16:37,240
<font color="#E5E5E5">settings the noise vector is constant so</font>

377
00:16:34,210 --> 00:16:40,720
basically this extension<font color="#E5E5E5"> is injecting an</font>

378
00:16:37,240 --> 00:16:43,330
identifier<font color="#E5E5E5"> into in the Dom but that's</font>

379
00:16:40,720 --> 00:16:47,890
not the behavior user expect from this

380
00:16:43,330 --> 00:16:50,800
extension okay so other conclusions

381
00:16:47,890 --> 00:16:52,810
<font color="#E5E5E5">finger printers can detect containers</font>

382
00:16:50,800 --> 00:16:55,030
using inconsistencies<font color="#E5E5E5"> and some of them</font>

383
00:16:52,810 --> 00:16:56,949
are<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> doing it we</font><font color="#E5E5E5"> don't exactly</font>

384
00:16:55,030 --> 00:16:59,800
know<font color="#CCCCCC"> the purpose but it may</font><font color="#E5E5E5"> be used for</font>

385
00:16:56,950 --> 00:17:02,740
tracking in<font color="#E5E5E5"> terms of privacy</font>

386
00:16:59,800 --> 00:17:03,729
implications it may be used for

387
00:17:02,740 --> 00:17:06,370
<font color="#E5E5E5">discrimination</font>

388
00:17:03,730 --> 00:17:08,500
<font color="#E5E5E5">in particular</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> for price discrimination</font>

389
00:17:06,369 --> 00:17:11,919
for example it may also be<font color="#E5E5E5"> used for</font>

390
00:17:08,500 --> 00:17:13,569
<font color="#E5E5E5">tracking but simply being detected with</font>

391
00:17:11,920 --> 00:17:15,610
<font color="#CCCCCC">know with a countermeasure is</font><font color="#E5E5E5"> not enough</font>

392
00:17:13,569 --> 00:17:17,770
it<font color="#E5E5E5"> also depends on</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> number</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> users</font>

393
00:17:15,609 --> 00:17:20,079
whether or not you<font color="#E5E5E5"> can recover the</font>

394
00:17:17,770 --> 00:17:24,579
<font color="#E5E5E5">original value and if the controversial</font>

395
00:17:20,079 --> 00:17:26,710
<font color="#CCCCCC">rich information in this presentation I</font>

396
00:17:24,579 --> 00:17:29,710
<font color="#E5E5E5">talked</font><font color="#CCCCCC"> about fingerprinting</font><font color="#E5E5E5"> control</font>

397
00:17:26,710 --> 00:17:32,170
<font color="#E5E5E5">measures but the</font><font color="#CCCCCC"> same techniques could</font>

398
00:17:29,710 --> 00:17:33,610
also be used to<font color="#E5E5E5"> detect extensions so</font>

399
00:17:32,170 --> 00:17:35,470
there are already<font color="#E5E5E5"> exist different</font>

400
00:17:33,610 --> 00:17:37,870
<font color="#E5E5E5">techniques to detect extensions but you</font>

401
00:17:35,470 --> 00:17:39,880
could also<font color="#E5E5E5"> use it</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> detect</font><font color="#CCCCCC"> two users</font>

402
00:17:37,870 --> 00:17:42,040
that have<font color="#E5E5E5"> the same extensions but with</font>

403
00:17:39,880 --> 00:17:43,660
<font color="#E5E5E5">different settings</font><font color="#CCCCCC"> and you could try to</font>

404
00:17:42,040 --> 00:17:47,409
detect the settings using the

405
00:17:43,660 --> 00:17:51,390
<font color="#E5E5E5">side-effects thanks for your attention</font><font color="#CCCCCC"> I</font>

406
00:17:47,410 --> 00:17:51,390
be happy to answer any question

407
00:18:01,510 --> 00:18:05,180
hi<font color="#E5E5E5"> Francisco</font>

408
00:18:03,590 --> 00:18:06,500
thanks for the interesting talk I was

409
00:18:05,180 --> 00:18:09,830
wondering about<font color="#E5E5E5"> two things one is a</font>

410
00:18:06,500 --> 00:18:11,720
technic question this canvas defender<font color="#E5E5E5"> so</font>

411
00:18:09,830 --> 00:18:13,280
it injects after the Dom has been kind

412
00:18:11,720 --> 00:18:15,160
of loaded but<font color="#E5E5E5"> I think exemptions DC</font>

413
00:18:13,280 --> 00:18:18,110
<font color="#E5E5E5">chrome can also be the first thing to</font><font color="#CCCCCC"> be</font>

414
00:18:15,160 --> 00:18:20,900
injected right before any<font color="#CCCCCC"> no</font><font color="#E5E5E5"> it's run at</font>

415
00:18:18,110 --> 00:18:22,490
document start but it ran a document

416
00:18:20,900 --> 00:18:25,280
start in the content<font color="#CCCCCC"> script where the</font>

417
00:18:22,490 --> 00:18:28,070
content<font color="#E5E5E5"> script is another JavaScript</font>

418
00:18:25,280 --> 00:18:30,139
execution context but to override<font color="#E5E5E5"> the</font>

419
00:18:28,070 --> 00:18:32,210
<font color="#CCCCCC">data</font><font color="#E5E5E5"> URL</font><font color="#CCCCCC"> function you need to override</font>

420
00:18:30,140 --> 00:18:35,900
<font color="#E5E5E5">it</font><font color="#CCCCCC"> in the execution context of the page</font>

421
00:18:32,210 --> 00:18:37,880
<font color="#E5E5E5">and so the only way</font><font color="#CCCCCC"> is in</font><font color="#E5E5E5"> chrome notify</font>

422
00:18:35,900 --> 00:18:39,230
effort but in chrome is to inject<font color="#E5E5E5"> script</font>

423
00:18:37,880 --> 00:18:40,430
in the Dom of the picture<font color="#E5E5E5"> okay but</font>

424
00:18:39,230 --> 00:18:41,750
because<font color="#E5E5E5"> just when do you have to inject</font>

425
00:18:40,430 --> 00:18:43,250
the script can you not inject the script

426
00:18:41,750 --> 00:18:44,000
before<font color="#CCCCCC"> any of</font><font color="#E5E5E5"> the other scripts are</font>

427
00:18:43,250 --> 00:18:47,000
<font color="#CCCCCC">being executed</font>

428
00:18:44,000 --> 00:18:48,440
you mean<font color="#CCCCCC"> our script</font><font color="#E5E5E5"> also the</font><font color="#CCCCCC"> engines way</font>

429
00:18:47,000 --> 00:18:49,700
extensions<font color="#E5E5E5"> so make</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that the</font>

430
00:18:48,440 --> 00:18:51,560
extension script is always running

431
00:18:49,700 --> 00:18:54,200
<font color="#E5E5E5">before any</font><font color="#CCCCCC"> no JavaScript on the page</font>

432
00:18:51,560 --> 00:18:56,419
incurred in chrome it's difficult you

433
00:18:54,200 --> 00:18:59,510
<font color="#CCCCCC">can</font><font color="#E5E5E5"> and then more</font><font color="#CCCCCC"> of a more general</font>

434
00:18:56,420 --> 00:19:02,900
<font color="#CCCCCC">question</font><font color="#E5E5E5"> I mean if you from that it's</font>

435
00:18:59,510 --> 00:19:06,560
very hard to<font color="#E5E5E5"> kind of hide these these</font>

436
00:19:02,900 --> 00:19:08,540
defenses<font color="#E5E5E5"> right what we say</font><font color="#CCCCCC"> I mean in a</font>

437
00:19:06,560 --> 00:19:11,629
more positive<font color="#E5E5E5"> note</font><font color="#CCCCCC"> how can we go forward</font>

438
00:19:08,540 --> 00:19:13,490
<font color="#E5E5E5">and still defend ourselves against like</font>

439
00:19:11,630 --> 00:19:16,310
these fingerprinting techniques yeah so

440
00:19:13,490 --> 00:19:18,770
I think<font color="#E5E5E5"> the best solution</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> talked more</font>

441
00:19:16,310 --> 00:19:20,179
about<font color="#E5E5E5"> it in the paper is</font><font color="#CCCCCC"> about like for</font>

442
00:19:18,770 --> 00:19:22,070
example<font color="#CCCCCC"> instead of trying to</font><font color="#E5E5E5"> modify</font>

443
00:19:20,180 --> 00:19:24,290
every<font color="#CCCCCC"> attributes possible simply</font>

444
00:19:22,070 --> 00:19:26,360
blocking attributes<font color="#CCCCCC"> who have a lot of</font>

445
00:19:24,290 --> 00:19:28,670
entropy<font color="#E5E5E5"> maybe enough like what's done in</font>

446
00:19:26,360 --> 00:19:30,469
<font color="#E5E5E5">Firefox</font><font color="#CCCCCC"> fingerprinting protection the</font>

447
00:19:28,670 --> 00:19:33,200
blocking access to<font color="#E5E5E5"> the canvas attribute</font>

448
00:19:30,470 --> 00:19:34,880
or there are unifying the value of the

449
00:19:33,200 --> 00:19:36,620
user agent so<font color="#CCCCCC"> that everybody looks</font><font color="#E5E5E5"> like</font>

450
00:19:34,880 --> 00:19:38,750
it's on the<font color="#E5E5E5"> windows with a certain</font>

451
00:19:36,620 --> 00:19:42,620
version<font color="#E5E5E5"> of Firefox or what's done in</font>

452
00:19:38,750 --> 00:19:44,330
<font color="#CCCCCC">Braves the same block in</font><font color="#E5E5E5"> canvas</font><font color="#CCCCCC"> but it's</font>

453
00:19:42,620 --> 00:19:46,159
not necessarily better to try to modify

454
00:19:44,330 --> 00:19:47,960
<font color="#E5E5E5">everything and you should also have a</font>

455
00:19:46,160 --> 00:19:50,840
minimal number<font color="#E5E5E5"> of users because</font>

456
00:19:47,960 --> 00:19:52,370
otherwise it simply<font color="#E5E5E5"> being identified</font>

457
00:19:50,840 --> 00:19:55,490
<font color="#E5E5E5">with the</font><font color="#CCCCCC"> contributors will be enough to</font>

458
00:19:52,370 --> 00:19:57,919
<font color="#E5E5E5">track and also take care not adding any</font>

459
00:19:55,490 --> 00:20:00,590
<font color="#E5E5E5">identifiers into the Dom of the page in</font>

460
00:19:57,920 --> 00:20:01,880
<font color="#E5E5E5">this</font><font color="#CCCCCC"> case it was like for example simple</font>

461
00:20:00,590 --> 00:20:03,980
canvas control<font color="#CCCCCC"> issues but if you</font>

462
00:20:01,880 --> 00:20:05,059
<font color="#CCCCCC">consider</font><font color="#E5E5E5"> the metal mask extension</font><font color="#CCCCCC"> its</font>

463
00:20:03,980 --> 00:20:07,580
injecting the

464
00:20:05,059 --> 00:20:11,960
<font color="#CCCCCC">a terrorem wallet identifier incident of</font>

465
00:20:07,580 --> 00:20:13,399
the page and<font color="#E5E5E5"> defending it and</font><font color="#CCCCCC"> you talked</font>

466
00:20:11,960 --> 00:20:14,960
about brave as well and<font color="#CCCCCC"> there so they</font>

467
00:20:13,399 --> 00:20:18,049
are kind<font color="#CCCCCC"> of mission is</font><font color="#E5E5E5"> to be privacy</font>

468
00:20:14,960 --> 00:20:19,700
friendly<font color="#E5E5E5"> did you disclose the the issues</font>

469
00:20:18,049 --> 00:20:21,590
to them and what did they say<font color="#CCCCCC"> about this</font>

470
00:20:19,700 --> 00:20:23,299
technology<font color="#E5E5E5"> to address because it seems</font>

471
00:20:21,590 --> 00:20:26,269
<font color="#E5E5E5">like there was an API specifically</font><font color="#CCCCCC"> X</font>

472
00:20:23,299 --> 00:20:29,509
exposed trust in brave right yeah so

473
00:20:26,269 --> 00:20:30,980
<font color="#E5E5E5">they're aware</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> it and so to</font><font color="#CCCCCC"> be fully</font>

474
00:20:29,509 --> 00:20:34,669
transparent<font color="#CCCCCC"> I'm doing an internship at</font>

475
00:20:30,980 --> 00:20:36,529
<font color="#CCCCCC">brave and they are aware of it but the</font>

476
00:20:34,669 --> 00:20:37,909
question<font color="#CCCCCC"> more generally is like can you</font>

477
00:20:36,529 --> 00:20:39,769
hide<font color="#E5E5E5"> the fact that you're using a</font>

478
00:20:37,909 --> 00:20:41,960
contemporary<font color="#E5E5E5"> and probably the answer is</font>

479
00:20:39,769 --> 00:20:44,779
no but then you<font color="#CCCCCC"> can try</font><font color="#E5E5E5"> to minimize</font>

480
00:20:41,960 --> 00:20:46,639
other information leaked<font color="#CCCCCC"> and so in their</font>

481
00:20:44,779 --> 00:20:49,129
<font color="#CCCCCC">case they answer that it's they don't</font>

482
00:20:46,639 --> 00:20:50,959
<font color="#E5E5E5">try they don't find not to be detected</font>

483
00:20:49,129 --> 00:20:53,480
as brave<font color="#CCCCCC"> even though they are lying</font><font color="#E5E5E5"> in</font>

484
00:20:50,960 --> 00:20:55,629
the<font color="#E5E5E5"> user agent so they don't want to fix</font>

485
00:20:53,480 --> 00:20:55,629
it

486
00:21:00,400 --> 00:21:03,539
[Music]

487
00:21:06,380 --> 00:21:09,489
[Music]

