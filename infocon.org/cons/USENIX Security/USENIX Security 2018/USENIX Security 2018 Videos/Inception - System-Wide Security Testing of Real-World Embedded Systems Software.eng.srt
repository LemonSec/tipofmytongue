1
00:00:11,060 --> 00:00:16,890
<font color="#E5E5E5">okay good afternoon everyone</font>

2
00:00:14,670 --> 00:00:19,920
so I'm<font color="#CCCCCC"> Nessen got a journey from Maxim</font>

3
00:00:16,890 --> 00:00:22,050
integrated chip manufacturer<font color="#E5E5E5"> I'm also a</font>

4
00:00:19,920 --> 00:00:24,630
PhD candidate at Zurich<font color="#E5E5E5"> on which is a</font>

5
00:00:22,050 --> 00:00:26,640
French graduate school so<font color="#E5E5E5"> today I'm</font>

6
00:00:24,630 --> 00:00:29,189
gonna be<font color="#E5E5E5"> talking to you about</font><font color="#CCCCCC"> inception</font>

7
00:00:26,640 --> 00:00:32,430
<font color="#E5E5E5">a system-wide security testing for real</font>

8
00:00:29,190 --> 00:00:34,800
<font color="#E5E5E5">well from our programs so</font><font color="#CCCCCC"> this work has</font>

9
00:00:32,430 --> 00:00:41,489
<font color="#E5E5E5">been</font><font color="#CCCCCC"> done in collaboration with Giovanni</font>

10
00:00:34,800 --> 00:00:42,199
kimochi<font color="#E5E5E5"> and</font><font color="#CCCCCC"> Ivania awesome bike okay</font>

11
00:00:41,489 --> 00:00:46,739
sorry

12
00:00:42,199 --> 00:00:50,099
so on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> system are present</font><font color="#CCCCCC"> 11s from</font>

13
00:00:46,739 --> 00:00:53,190
imagination<font color="#E5E5E5"> to Adama chief among these</font>

14
00:00:50,100 --> 00:00:54,510
system an important part contains<font color="#CCCCCC"> a loop</font>

15
00:00:53,190 --> 00:00:57,599
<font color="#CCCCCC">well</font><font color="#E5E5E5"> microcontrollers</font>

16
00:00:54,510 --> 00:01:00,030
for example the<font color="#E5E5E5"> ARM Cortex</font><font color="#CCCCCC"> entry so</font>

17
00:00:57,600 --> 00:01:02,190
these micro controls combines<font color="#E5E5E5"> hardware</font>

18
00:01:00,030 --> 00:01:25,909
and software<font color="#E5E5E5"> to</font><font color="#CCCCCC"> their</font><font color="#E5E5E5"> from few tasks</font><font color="#CCCCCC"> off</font>

19
00:01:02,190 --> 00:01:30,259
specific does<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> can you hear me</font><font color="#CCCCCC"> ok try</font>

20
00:01:25,909 --> 00:01:33,329
so why the<font color="#E5E5E5"> security of such</font><font color="#CCCCCC"> 10 meters</font>

21
00:01:30,259 --> 00:01:35,609
<font color="#E5E5E5">there is different reason</font><font color="#CCCCCC"> for that</font><font color="#E5E5E5"> first</font>

22
00:01:33,329 --> 00:01:39,000
<font color="#E5E5E5">and this</font><font color="#CCCCCC"> system are increasingly</font>

23
00:01:35,609 --> 00:01:41,579
<font color="#E5E5E5">corrected so it may get to large-scale</font>

24
00:01:39,000 --> 00:01:44,880
attacks also<font color="#CCCCCC"> it's difficult</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> patch</font>

25
00:01:41,579 --> 00:01:47,719
some<font color="#E5E5E5"> part of the code</font><font color="#CCCCCC"> for example there</font>

26
00:01:44,880 --> 00:01:51,960
<font color="#CCCCCC">is a bootloader</font><font color="#E5E5E5"> which is often stall on</font>

27
00:01:47,719 --> 00:01:55,559
<font color="#E5E5E5">master on so the mass chrome is a so the</font>

28
00:01:51,960 --> 00:01:57,380
code sorry<font color="#CCCCCC"> is a odd</font><font color="#E5E5E5"> code in on the chip</font>

29
00:01:55,560 --> 00:02:02,579
<font color="#CCCCCC">itself</font><font color="#E5E5E5"> during the manufacturing process</font>

30
00:01:57,380 --> 00:02:06,829
which may update<font color="#E5E5E5"> impossible also the</font>

31
00:02:02,579 --> 00:02:06,829
<font color="#E5E5E5">device may be designed to run offline</font>

32
00:02:06,920 --> 00:02:12,750
<font color="#CCCCCC">they may also contain some sensitive</font>

33
00:02:10,380 --> 00:02:15,410
data<font color="#E5E5E5"> such as prevent</font><font color="#CCCCCC"> information of</font>

34
00:02:12,750 --> 00:02:19,380
payment formation they may also drive

35
00:02:15,410 --> 00:02:21,340
sensitive hardware such as<font color="#CCCCCC"> scenery</font>

36
00:02:19,380 --> 00:02:26,349
systems or<font color="#E5E5E5"> virtual</font>

37
00:02:21,340 --> 00:02:28,690
a restaurant examples of security issue

38
00:02:26,349 --> 00:02:31,540
it nitendo switch<font color="#E5E5E5"> where the</font><font color="#CCCCCC"> father of</font>

39
00:02:28,690 --> 00:02:35,349
<font color="#E5E5E5">flow is present on the USB stack</font><font color="#CCCCCC"> I am</font>

40
00:02:31,540 --> 00:02:37,299
dead in<font color="#E5E5E5"> the master on so the</font><font color="#CCCCCC"> wrong code</font>

41
00:02:35,349 --> 00:02:40,268
cannot be<font color="#CCCCCC"> updated because it's in the</font>

42
00:02:37,300 --> 00:02:43,560
master<font color="#CCCCCC"> on</font><font color="#E5E5E5"> without replacing the device</font>

43
00:02:40,269 --> 00:02:46,260
itself<font color="#E5E5E5"> there is</font><font color="#CCCCCC"> also some other issue</font>

44
00:02:43,560 --> 00:02:52,180
<font color="#E5E5E5">similar issue and a home code with the</font>

45
00:02:46,260 --> 00:02:55,090
iPhone for example an interesting and

46
00:02:52,180 --> 00:02:57,010
promising tested this<font color="#CCCCCC"> Technic sorry to</font>

47
00:02:55,090 --> 00:02:59,319
test<font color="#CCCCCC"> reamer program is a symbolic</font>

48
00:02:57,010 --> 00:03:02,769
execution<font color="#E5E5E5"> so it gives a high</font><font color="#CCCCCC"> path</font>

49
00:02:59,319 --> 00:03:07,750
<font color="#E5E5E5">coverage in and it's written test case</font>

50
00:03:02,769 --> 00:03:10,900
<font color="#E5E5E5">when the bug is fine so for people who</font>

51
00:03:07,750 --> 00:03:14,790
<font color="#E5E5E5">don't</font><font color="#CCCCCC"> know about single</font><font color="#E5E5E5"> execution</font><font color="#CCCCCC"> just a</font>

52
00:03:10,900 --> 00:03:17,530
small remainder so<font color="#CCCCCC"> symbolic execution</font>

53
00:03:14,790 --> 00:03:20,620
<font color="#E5E5E5">represent inputs as a set of contents</font>

54
00:03:17,530 --> 00:03:23,049
and then an interpreter will interpret

55
00:03:20,620 --> 00:03:24,970
<font color="#E5E5E5">the</font><font color="#CCCCCC"> current line by line</font><font color="#E5E5E5"> and each time</font>

56
00:03:23,049 --> 00:03:27,250
we will find<font color="#CCCCCC"> a decision our condition</font>

57
00:03:24,970 --> 00:03:29,709
that depends<font color="#E5E5E5"> on C input the symbolic</font>

58
00:03:27,250 --> 00:03:34,239
inputs will prop up the entire program

59
00:03:29,709 --> 00:03:38,019
<font color="#E5E5E5">state</font><font color="#CCCCCC"> into path</font><font color="#E5E5E5"> so in this case for the</font>

60
00:03:34,239 --> 00:03:41,470
left part of<font color="#E5E5E5"> the if</font><font color="#CCCCCC"> statement will have</font>

61
00:03:38,019 --> 00:03:44,799
two paths<font color="#CCCCCC"> one in which we</font><font color="#E5E5E5"> will detect a</font>

62
00:03:41,470 --> 00:03:47,410
note of<font color="#E5E5E5"> bones and on the other while the</font>

63
00:03:44,799 --> 00:03:51,760
other one the interpreter will continue

64
00:03:47,410 --> 00:03:55,630
the<font color="#CCCCCC"> geriatrician so at the</font><font color="#E5E5E5"> end for each</font>

65
00:03:51,760 --> 00:03:58,510
path we<font color="#CCCCCC"> have a set of</font><font color="#E5E5E5"> constraints and by</font>

66
00:03:55,630 --> 00:04:02,230
result<font color="#E5E5E5"> in this contract we can find at</font><font color="#CCCCCC"> a</font>

67
00:03:58,510 --> 00:04:07,030
state which is<font color="#CCCCCC"> useful to replate the</font>

68
00:04:02,230 --> 00:04:09,880
beggar on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> real device so we started</font>

69
00:04:07,030 --> 00:04:12,819
with key please well deployed and

70
00:04:09,880 --> 00:04:15,970
efficient<font color="#CCCCCC"> 11 based symbolic</font><font color="#E5E5E5"> deformation</font>

71
00:04:12,819 --> 00:04:19,209
<font color="#CCCCCC">so you can find memories of separation</font>

72
00:04:15,970 --> 00:04:22,510
and also you give a<font color="#CCCCCC"> half I</font><font color="#E5E5E5"> pass coverage</font>

73
00:04:19,209 --> 00:04:25,510
<font color="#E5E5E5">sorry for this top application so</font>

74
00:04:22,510 --> 00:04:28,060
basically with key when you have a<font color="#E5E5E5"> CC</font>

75
00:04:25,510 --> 00:04:28,870
crystal source code you can use<font color="#CCCCCC"> salam to</font>

76
00:04:28,060 --> 00:04:31,390
omit

77
00:04:28,870 --> 00:04:34,649
bipod<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is a semantic model for your</font>

78
00:04:31,390 --> 00:04:37,649
source code and<font color="#E5E5E5"> then</font>

79
00:04:34,649 --> 00:04:39,899
you<font color="#E5E5E5"> feed key with this model and it will</font>

80
00:04:37,649 --> 00:04:41,909
<font color="#E5E5E5">reach an analysis report that contain</font>

81
00:04:39,899 --> 00:04:45,329
<font color="#CCCCCC">bugs</font><font color="#E5E5E5"> and also some</font><font color="#CCCCCC"> priests use debug</font>

82
00:04:41,909 --> 00:04:49,949
information<font color="#E5E5E5"> such as files and the line</font>

83
00:04:45,329 --> 00:04:53,909
where<font color="#CCCCCC"> the bugs are present so keeper</font>

84
00:04:49,949 --> 00:04:55,859
from<font color="#CCCCCC"> source base analysis</font><font color="#E5E5E5"> it's also</font>

85
00:04:53,909 --> 00:04:58,199
possible to perform binary based

86
00:04:55,859 --> 00:05:01,349
analysis<font color="#E5E5E5"> but as I will</font><font color="#CCCCCC"> show you it's</font>

87
00:04:58,199 --> 00:05:04,199
different<font color="#CCCCCC"> detection</font><font color="#E5E5E5"> race is a better</font>

88
00:05:01,349 --> 00:05:07,489
<font color="#E5E5E5">with suspend analysis so if we take</font>

89
00:05:04,199 --> 00:05:10,319
these two<font color="#E5E5E5"> examples they perform similar</font>

90
00:05:07,489 --> 00:05:14,758
tasks<font color="#CCCCCC"> so they are written</font><font color="#E5E5E5"> the expected</font>

91
00:05:10,319 --> 00:05:19,529
element of the<font color="#CCCCCC"> bell 31 but there is a</font>

92
00:05:14,759 --> 00:05:23,429
difference<font color="#CCCCCC"> difference on the C test we</font>

93
00:05:19,529 --> 00:05:25,739
have<font color="#E5E5E5"> we access to a buffer which is</font>

94
00:05:23,429 --> 00:05:27,748
tight lead and<font color="#E5E5E5"> also oversized it so we</font>

95
00:05:25,739 --> 00:05:32,039
have some semantic information about

96
00:05:27,749 --> 00:05:34,619
<font color="#E5E5E5">this before but on the binary code we</font>

97
00:05:32,039 --> 00:05:37,619
access to an<font color="#E5E5E5"> address so we don't really</font>

98
00:05:34,619 --> 00:05:43,349
<font color="#E5E5E5">know</font><font color="#CCCCCC"> to which object</font><font color="#E5E5E5"> which of the access</font>

99
00:05:37,619 --> 00:05:45,539
<font color="#E5E5E5">and if we use a lifter for the binary</font>

100
00:05:43,349 --> 00:05:49,498
code like the lifter<font color="#CCCCCC"> of s2e</font>

101
00:05:45,539 --> 00:05:51,360
or anger<font color="#E5E5E5"> you can we</font><font color="#CCCCCC"> can see that the</font>

102
00:05:49,499 --> 00:05:53,969
semantic information of the same that

103
00:05:51,360 --> 00:05:57,539
<font color="#E5E5E5">the</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> of the binary code so we don't</font>

104
00:05:53,969 --> 00:05:59,639
know to which object<font color="#CCCCCC"> we access but on</font>

105
00:05:57,539 --> 00:06:01,829
the source code<font color="#CCCCCC"> if we use</font><font color="#E5E5E5"> Salam to image</font>

106
00:05:59,639 --> 00:06:05,309
the<font color="#E5E5E5"> the byte code can see that the</font>

107
00:06:01,829 --> 00:06:07,619
semantic information are<font color="#E5E5E5"> kept so we have</font>

108
00:06:05,309 --> 00:06:09,899
we know that we<font color="#E5E5E5"> access to be one I</font>

109
00:06:07,619 --> 00:06:14,339
prefer<font color="#E5E5E5"> we know the size of</font><font color="#CCCCCC"> the one and</font>

110
00:06:09,899 --> 00:06:16,019
also<font color="#E5E5E5"> the type the type of</font><font color="#CCCCCC"> be one this</font>

111
00:06:14,339 --> 00:06:18,379
information are all really important

112
00:06:16,019 --> 00:06:21,959
<font color="#CCCCCC">when you want to</font><font color="#E5E5E5"> detect memory options</font>

113
00:06:18,379 --> 00:06:24,599
<font color="#CCCCCC">because you need</font><font color="#E5E5E5"> to know which order to</font>

114
00:06:21,959 --> 00:06:28,799
access<font color="#E5E5E5"> and if you go out of the bones of</font>

115
00:06:24,599 --> 00:06:31,498
<font color="#E5E5E5">this object so when you have the source</font>

116
00:06:28,799 --> 00:06:33,479
code<font color="#CCCCCC"> it's better</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> perform the analysis</font>

117
00:06:31,499 --> 00:06:35,399
on<font color="#E5E5E5"> the source code you can still do that</font>

118
00:06:33,479 --> 00:06:37,558
on the binary<font color="#E5E5E5"> card but it's</font><font color="#CCCCCC"> far</font><font color="#E5E5E5"> I've</font>

119
00:06:35,399 --> 00:06:39,509
<font color="#E5E5E5">ensured</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> source</font><font color="#CCCCCC"> code because you</font><font color="#E5E5E5"> have</font>

120
00:06:37,559 --> 00:06:44,459
types which<font color="#E5E5E5"> are lost during the</font>

121
00:06:39,509 --> 00:06:46,649
compilation process and if<font color="#E5E5E5"> you perform</font>

122
00:06:44,459 --> 00:06:48,630
the analysis on<font color="#E5E5E5"> the binary code for</font>

123
00:06:46,649 --> 00:06:51,090
<font color="#E5E5E5">indeed system especially</font>

124
00:06:48,630 --> 00:06:54,030
you can have some<font color="#CCCCCC"> salient</font><font color="#E5E5E5"> predictions so</font>

125
00:06:51,090 --> 00:06:57,179
it's<font color="#CCCCCC"> option that you don't detect on</font>

126
00:06:54,030 --> 00:06:59,280
time so it will be propagated<font color="#CCCCCC"> during the</font>

127
00:06:57,180 --> 00:07:02,550
execution<font color="#CCCCCC"> it's mainly</font><font color="#E5E5E5"> due to the</font><font color="#CCCCCC"> fact</font>

128
00:06:59,280 --> 00:07:05,130
that indeed<font color="#CCCCCC"> system of low wall sources</font>

129
00:07:02,550 --> 00:07:08,670
so there is a less<font color="#E5E5E5"> memorable protection</font>

130
00:07:05,130 --> 00:07:10,920
than<font color="#E5E5E5"> desktop application and for more</font>

131
00:07:08,670 --> 00:07:11,400
detail you<font color="#CCCCCC"> can see the paper</font><font color="#E5E5E5"> what you</font>

132
00:07:10,920 --> 00:07:13,020
<font color="#E5E5E5">want</font>

133
00:07:11,400 --> 00:07:17,190
what<font color="#CCCCCC"> you correct is not</font><font color="#E5E5E5"> what you crushed</font>

134
00:07:13,020 --> 00:07:20,039
<font color="#CCCCCC">attendee ss-18 so the goal of Inception</font>

135
00:07:17,190 --> 00:07:26,150
is to test to<font color="#CCCCCC"> allow a way to test your</font>

136
00:07:20,040 --> 00:07:26,150
programs<font color="#E5E5E5"> without any code modification</font>

137
00:07:26,510 --> 00:07:31,110
but the problem with few more programs

138
00:07:29,250 --> 00:07:34,200
and<font color="#E5E5E5"> especially no longer a few more</font>

139
00:07:31,110 --> 00:07:38,070
programs is<font color="#E5E5E5"> that you often have a zombie</font>

140
00:07:34,200 --> 00:07:42,810
code which are<font color="#CCCCCC"> low-level code and this</font>

141
00:07:38,070 --> 00:07:45,750
code is<font color="#CCCCCC"> used to this code is used for</font>

142
00:07:42,810 --> 00:07:48,810
<font color="#E5E5E5">midstream super auto optimization it's</font>

143
00:07:45,750 --> 00:07:50,220
also used to<font color="#E5E5E5"> enable other features so</font>

144
00:07:48,810 --> 00:07:56,910
for example there<font color="#CCCCCC"> is some specific</font>

145
00:07:50,220 --> 00:07:59,400
instruction like SVC code so the first

146
00:07:56,910 --> 00:08:02,010
challenge<font color="#E5E5E5"> when you want to test</font><font color="#CCCCCC"> memoir</font>

147
00:07:59,400 --> 00:08:04,859
program is to be able<font color="#E5E5E5"> to support EMS us</font>

148
00:08:02,010 --> 00:08:09,539
code and<font color="#E5E5E5"> EMS</font><font color="#CCCCCC"> us code contains CC please</font>

149
00:08:04,860 --> 00:08:12,120
<font color="#CCCCCC">please a</font><font color="#E5E5E5"> zambian binary</font><font color="#CCCCCC"> way another</font><font color="#E5E5E5"> up</font>

150
00:08:09,540 --> 00:08:18,479
challenge is a outward direction between

151
00:08:12,120 --> 00:08:20,640
p.m.<font color="#CCCCCC"> where and and hardware this</font>

152
00:08:18,479 --> 00:08:23,580
interaction<font color="#E5E5E5"> are done through the memory</font>

153
00:08:20,640 --> 00:08:26,460
map it<font color="#E5E5E5"> so for example in</font><font color="#CCCCCC"> your in</font><font color="#E5E5E5"> the</font>

154
00:08:23,580 --> 00:08:29,550
store in<font color="#E5E5E5"> the source code you</font><font color="#CCCCCC"> make sense</font>

155
00:08:26,460 --> 00:08:32,159
to some memory<font color="#E5E5E5"> and this memory are</font>

156
00:08:29,550 --> 00:08:34,710
seamlessly redirected to for example

157
00:08:32,159 --> 00:08:36,569
<font color="#E5E5E5">peripherals or</font><font color="#CCCCCC"> its general intern on the</font>

158
00:08:34,710 --> 00:08:38,849
<font color="#E5E5E5">roads but this</font><font color="#CCCCCC"> information</font><font color="#E5E5E5"> is not</font>

159
00:08:36,570 --> 00:08:43,589
present in the source<font color="#CCCCCC"> code so it's</font>

160
00:08:38,849 --> 00:08:46,170
<font color="#E5E5E5">defining the chip specification and also</font>

161
00:08:43,589 --> 00:08:50,339
peripherals may arise in table signals

162
00:08:46,170 --> 00:08:52,500
<font color="#E5E5E5">when specific</font><font color="#CCCCCC"> tasks bestow and when the</font>

163
00:08:50,339 --> 00:08:54,780
intercom<font color="#CCCCCC"> - I will save</font><font color="#E5E5E5"> these signals it</font>

164
00:08:52,500 --> 00:08:58,410
will stop the execution<font color="#E5E5E5"> and then set the</font>

165
00:08:54,780 --> 00:09:01,810
current state of the program<font color="#E5E5E5"> and then</font>

166
00:08:58,410 --> 00:09:04,519
<font color="#E5E5E5">start executing the expected on low</font>

167
00:09:01,810 --> 00:09:06,649
so the second issue<font color="#CCCCCC"> the second</font>

168
00:09:04,519 --> 00:09:09,260
<font color="#E5E5E5">difficulty sorry is to support this</font>

169
00:09:06,649 --> 00:09:11,389
<font color="#E5E5E5">interaction</font><font color="#CCCCCC"> between the firmware</font><font color="#E5E5E5"> and</font>

170
00:09:09,260 --> 00:09:13,250
hardware which is<font color="#E5E5E5"> not defined in</font><font color="#CCCCCC"> the</font>

171
00:09:11,389 --> 00:09:18,500
source code which is specific to each

172
00:09:13,250 --> 00:09:22,730
<font color="#E5E5E5">sip so we started building a symbolic</font>

173
00:09:18,500 --> 00:09:24,470
executor for<font color="#E5E5E5"> film or</font><font color="#CCCCCC"> program when you</font>

174
00:09:22,730 --> 00:09:26,570
are<font color="#CCCCCC"> due or</font><font color="#E5E5E5"> somewhere with CC please</font>

175
00:09:24,470 --> 00:09:28,070
<font color="#E5E5E5">please a</font><font color="#CCCCCC"> Zambian binary and you use</font>

176
00:09:26,570 --> 00:09:32,449
sealant we meet you a little<font color="#CCCCCC"> vain</font>

177
00:09:28,070 --> 00:09:34,880
<font color="#CCCCCC">bytecode</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then you can use the</font><font color="#E5E5E5"> own</font>

178
00:09:32,449 --> 00:09:38,079
<font color="#CCCCCC">back-end of 11 to meet your elf binary</font>

179
00:09:34,880 --> 00:09:41,959
so in your<font color="#E5E5E5"> LLVM byte code we have a</font>

180
00:09:38,079 --> 00:09:44,870
representation<font color="#E5E5E5"> of your CC priestess but</font>

181
00:09:41,959 --> 00:09:48,800
you<font color="#CCCCCC"> don't have</font><font color="#E5E5E5"> a model or presentation</font>

182
00:09:44,870 --> 00:09:52,699
for<font color="#E5E5E5"> your binary</font><font color="#CCCCCC"> on a zombie part so idea</font>

183
00:09:48,800 --> 00:09:54,620
was to replace<font color="#CCCCCC"> all functions or</font><font color="#E5E5E5"> see your</font>

184
00:09:52,699 --> 00:09:57,680
<font color="#CCCCCC">syllabus function</font><font color="#E5E5E5"> that contains assembly</font>

185
00:09:54,620 --> 00:10:02,470
lines with lifted by cut issues from the

186
00:09:57,680 --> 00:10:05,899
binary<font color="#E5E5E5"> code and then we introduced a</font>

187
00:10:02,470 --> 00:10:08,269
<font color="#E5E5E5">glue wire in between</font><font color="#CCCCCC"> these two pieces of</font>

188
00:10:05,899 --> 00:10:11,810
byte code to enable the interactions

189
00:10:08,269 --> 00:10:13,310
because the the<font color="#CCCCCC"> I</font><font color="#E5E5E5"> I obtained from the</font>

190
00:10:11,810 --> 00:10:16,430
<font color="#CCCCCC">CSU priests priests have a different</font>

191
00:10:13,310 --> 00:10:19,040
semantics than<font color="#E5E5E5"> semantic levels and low</font>

192
00:10:16,430 --> 00:10:21,370
iron<font color="#CCCCCC"> issued from the late binary</font><font color="#E5E5E5"> so the</font>

193
00:10:19,040 --> 00:10:23,750
GUI unable

194
00:10:21,370 --> 00:10:26,600
<font color="#CCCCCC">enabled to promote or demote the</font>

195
00:10:23,750 --> 00:10:28,339
semantic level when you when there is a

196
00:10:26,600 --> 00:10:33,170
direct<font color="#CCCCCC"> interaction between</font><font color="#E5E5E5"> the higher</font>

197
00:10:28,339 --> 00:10:36,199
<font color="#E5E5E5">and the Gloria and then we</font><font color="#CCCCCC"> modified key</font>

198
00:10:33,170 --> 00:10:38,719
to support this execution<font color="#E5E5E5"> the inception</font>

199
00:10:36,199 --> 00:10:44,240
to say to support the ARM Cortex s 3 and

200
00:10:38,720 --> 00:10:47,899
3<font color="#CCCCCC"> so we know explained out the inception</font>

201
00:10:44,240 --> 00:10:51,319
translator work so if we take this first

202
00:10:47,899 --> 00:10:54,319
card we have a soil<font color="#CCCCCC"> secret</font><font color="#E5E5E5"> that calls</font>

203
00:10:51,319 --> 00:10:58,219
our own<font color="#E5E5E5"> functions which is an assembly</font>

204
00:10:54,319 --> 00:11:01,250
<font color="#CCCCCC">code so we started with omitting</font><font color="#E5E5E5"> the</font>

205
00:10:58,220 --> 00:11:04,579
<font color="#E5E5E5">LLVM byte code thanks to</font><font color="#CCCCCC"> Salam and we</font>

206
00:11:01,250 --> 00:11:08,329
obtained the IEF then we use the

207
00:11:04,579 --> 00:11:13,819
inception translator lifter to<font color="#E5E5E5"> emit an</font>

208
00:11:08,329 --> 00:11:16,599
11 by<font color="#E5E5E5"> code for the zombie card and</font>

209
00:11:13,820 --> 00:11:22,130
between we have<font color="#CCCCCC"> the</font><font color="#E5E5E5"> blue ayah which</font>

210
00:11:16,600 --> 00:11:24,640
followed the<font color="#CCCCCC"> ABI standout that defines</font>

211
00:11:22,130 --> 00:11:29,060
how parameter has passed through<font color="#E5E5E5"> the</font>

212
00:11:24,640 --> 00:11:32,090
through functions so in this case we

213
00:11:29,060 --> 00:11:36,410
look<font color="#CCCCCC"> at the semantic level by putting</font>

214
00:11:32,090 --> 00:11:41,300
<font color="#E5E5E5">the variable a to the register</font><font color="#CCCCCC"> r0 as</font>

215
00:11:36,410 --> 00:11:44,680
defined in the IV I so the merging

216
00:11:41,300 --> 00:11:47,990
function is melting feature enabled to

217
00:11:44,680 --> 00:11:51,560
allow us to promote<font color="#E5E5E5"> or demote semantic</font>

218
00:11:47,990 --> 00:11:56,750
level when you<font color="#E5E5E5"> have higher that needs to</font>

219
00:11:51,560 --> 00:11:58,640
<font color="#CCCCCC">interact with a lower function but then</font>

220
00:11:56,750 --> 00:12:02,060
we need to allocate some other a

221
00:11:58,640 --> 00:12:03,500
<font color="#E5E5E5">specific memory Fotolia for example we</font>

222
00:12:02,060 --> 00:12:06,439
<font color="#CCCCCC">locate the</font><font color="#E5E5E5"> stack</font>

223
00:12:03,500 --> 00:12:08,870
<font color="#CCCCCC">go to our superiors</font><font color="#E5E5E5"> stuff and the hip we</font>

224
00:12:06,440 --> 00:12:12,730
also need to allocate objects that are

225
00:12:08,870 --> 00:12:15,140
only used<font color="#CCCCCC"> by</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> blue area and</font>

226
00:12:12,730 --> 00:12:17,900
<font color="#CCCCCC">unimportant things also</font><font color="#E5E5E5"> we need to</font>

227
00:12:15,140 --> 00:12:20,420
allocate at the same location object

228
00:12:17,900 --> 00:12:27,410
<font color="#E5E5E5">defined in the ayah and the low</font><font color="#CCCCCC"> ayah to</font>

229
00:12:20,420 --> 00:12:30,800
in a base in direct interaction we also

230
00:12:27,410 --> 00:12:33,949
<font color="#CCCCCC">had to serve some challenge for example</font>

231
00:12:30,800 --> 00:12:35,660
<font color="#E5E5E5">in direct code so we use the</font><font color="#CCCCCC"> indirect</font>

232
00:12:33,950 --> 00:12:38,390
called promotions<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> an a</font>

233
00:12:35,660 --> 00:12:40,430
<font color="#CCCCCC">direction table it only supports</font>

234
00:12:38,390 --> 00:12:43,790
<font color="#E5E5E5">indirect</font><font color="#CCCCCC"> role to the entry point of</font>

235
00:12:40,430 --> 00:12:46,280
functions for<font color="#CCCCCC"> no we also had to emulate</font>

236
00:12:43,790 --> 00:12:50,300
some<font color="#CCCCCC"> odd way of mechanisms such as a</font>

237
00:12:46,280 --> 00:12:53,540
context<font color="#E5E5E5"> switch to support supervisor</font>

238
00:12:50,300 --> 00:12:59,990
<font color="#CCCCCC">call and</font><font color="#E5E5E5"> also to date specific</font><font color="#CCCCCC"> or</font>

239
00:12:53,540 --> 00:13:03,589
<font color="#CCCCCC">justified it's so far out way</font>

240
00:12:59,990 --> 00:13:06,950
interaction<font color="#CCCCCC"> so we have a modified</font>

241
00:13:03,590 --> 00:13:09,680
<font color="#CCCCCC">version of</font><font color="#E5E5E5"> t-that taken as input method</font>

242
00:13:06,950 --> 00:13:12,340
by cut that<font color="#CCCCCC"> are</font><font color="#E5E5E5"> present before and I</font>

243
00:13:09,680 --> 00:13:15,890
convened<font color="#E5E5E5"> ojiisan that contains a memory</font>

244
00:13:12,340 --> 00:13:19,550
the memory configuration<font color="#E5E5E5"> and also the</font>

245
00:13:15,890 --> 00:13:22,760
test strategy of Inception<font color="#E5E5E5"> another</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> LF</font>

246
00:13:19,550 --> 00:13:24,650
<font color="#CCCCCC">binary that contains a simple</font><font color="#E5E5E5"> step table</font>

247
00:13:22,760 --> 00:13:27,140
that we<font color="#CCCCCC"> used to allocate</font>

248
00:13:24,650 --> 00:13:29,800
object

249
00:13:27,140 --> 00:13:32,240
so for each memory addresses you<font color="#E5E5E5"> can</font>

250
00:13:29,800 --> 00:13:35,959
define if you want to use a local<font color="#E5E5E5"> memory</font>

251
00:13:32,240 --> 00:13:37,730
<font color="#E5E5E5">so it's a memory locality</font><font color="#CCCCCC"> if you want to</font>

252
00:13:35,959 --> 00:13:39,500
redirect this memory to the hell out

253
00:13:37,730 --> 00:13:44,720
where so it's<font color="#CCCCCC"> useful when</font><font color="#E5E5E5"> you want</font><font color="#CCCCCC"> to</font>

254
00:13:39,500 --> 00:13:46,430
use a<font color="#CCCCCC"> Realty result you can also use</font>

255
00:13:44,720 --> 00:13:48,589
symbolic memory<font color="#CCCCCC"> so in this case</font>

256
00:13:46,430 --> 00:13:51,319
<font color="#E5E5E5">inception we consider any possible value</font>

257
00:13:48,589 --> 00:13:55,279
returned<font color="#CCCCCC"> by these barriers</font><font color="#E5E5E5"> so you</font>

258
00:13:51,320 --> 00:13:58,279
<font color="#E5E5E5">it's another approximation it's useful</font>

259
00:13:55,279 --> 00:14:00,140
also<font color="#E5E5E5"> when you</font><font color="#CCCCCC"> want to test interested</font>

260
00:13:58,279 --> 00:14:01,670
<font color="#E5E5E5">very</font><font color="#CCCCCC"> few</font><font color="#E5E5E5"> so for example peripherals</font>

261
00:14:00,140 --> 00:14:03,949
which are connected to<font color="#CCCCCC"> the external</font>

262
00:14:01,670 --> 00:14:10,399
<font color="#CCCCCC">world and that can be controlled by an</font>

263
00:14:03,950 --> 00:14:14,510
attacker<font color="#CCCCCC"> we develop in the system system</font>

264
00:14:10,399 --> 00:14:17,029
<font color="#E5E5E5">debugger based on the USB 3 range as is</font>

265
00:14:14,510 --> 00:14:19,970
<font color="#E5E5E5">Deborah interact with</font><font color="#CCCCCC"> L device to the</font>

266
00:14:17,029 --> 00:14:25,550
cheetah connection it's inspired by

267
00:14:19,970 --> 00:14:32,060
<font color="#CCCCCC">Avatar and also the and also circuits</font>

268
00:14:25,550 --> 00:14:34,670
which<font color="#E5E5E5"> is a PCI</font><font color="#CCCCCC"> Express based debugger we</font>

269
00:14:32,060 --> 00:14:37,790
couldn't reuse<font color="#CCCCCC"> surrogates because the</font>

270
00:14:34,670 --> 00:14:39,229
<font color="#CCCCCC">outward is not available anymore</font><font color="#E5E5E5"> but we</font>

271
00:14:37,790 --> 00:14:42,589
<font color="#CCCCCC">send the author for Shannon's occurred</font>

272
00:14:39,230 --> 00:14:44,899
with us<font color="#E5E5E5"> it was a</font><font color="#CCCCCC"> precious head</font><font color="#E5E5E5"> we</font>

273
00:14:42,589 --> 00:14:48,410
developed<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> inception debugger</font>

274
00:14:44,899 --> 00:14:52,790
<font color="#CCCCCC">we've observed shelf components</font><font color="#E5E5E5"> so it's</font>

275
00:14:48,410 --> 00:14:56,540
quite affordable<font color="#E5E5E5"> and also we added a</font>

276
00:14:52,790 --> 00:15:01,069
feature to to forward the<font color="#CCCCCC"> in terms</font><font color="#E5E5E5"> from</font>

277
00:14:56,540 --> 00:15:03,079
<font color="#E5E5E5">the real device to P so this feature is</font>

278
00:15:01,070 --> 00:15:06,290
also<font color="#CCCCCC"> a synchronous mechanism to keep the</font>

279
00:15:03,079 --> 00:15:12,589
<font color="#CCCCCC">state of T consistent with the state of</font>

280
00:15:06,290 --> 00:15:14,029
<font color="#CCCCCC">the</font><font color="#E5E5E5"> device we made some evaluation of</font>

281
00:15:12,589 --> 00:15:18,100
the governments of<font color="#E5E5E5"> the inception</font>

282
00:15:14,029 --> 00:15:23,350
debugger in this<font color="#E5E5E5"> evaluation</font>

283
00:15:18,100 --> 00:15:28,430
inception was as fast as the shore gates

284
00:15:23,350 --> 00:15:30,230
<font color="#E5E5E5">except for some for read operation it's</font>

285
00:15:28,430 --> 00:15:34,329
mainly<font color="#E5E5E5"> due</font><font color="#CCCCCC"> to the fact that</font><font color="#E5E5E5"> inception</font>

286
00:15:30,230 --> 00:15:38,149
user delete USB which is a<font color="#E5E5E5"> KML</font><font color="#CCCCCC"> launder</font>

287
00:15:34,329 --> 00:15:39,870
sorry<font color="#E5E5E5"> user along the driver so it</font>

288
00:15:38,149 --> 00:15:44,730
dolphins<font color="#E5E5E5"> DMA and all</font>

289
00:15:39,870 --> 00:15:46,430
<font color="#CCCCCC">Oh GMA</font><font color="#E5E5E5"> on so sis card for each USB</font>

290
00:15:44,730 --> 00:15:49,380
request which is<font color="#CCCCCC"> quite slow and</font>

291
00:15:46,430 --> 00:15:52,229
surrogates<font color="#E5E5E5"> of outcomes is with system</font>

292
00:15:49,380 --> 00:15:54,990
<font color="#E5E5E5">driver</font><font color="#CCCCCC"> so there is a some possibility to</font>

293
00:15:52,230 --> 00:15:56,550
<font color="#CCCCCC">improve our</font><font color="#E5E5E5"> inception performance we</font>

294
00:15:54,990 --> 00:15:59,640
<font color="#CCCCCC">well the main</font><font color="#E5E5E5"> button network if</font>

295
00:15:56,550 --> 00:16:01,589
<font color="#E5E5E5">inception is not really the default in</font>

296
00:15:59,640 --> 00:16:03,630
feature but more the execution of

297
00:16:01,589 --> 00:16:08,250
<font color="#CCCCCC">bytecode which is a</font><font color="#E5E5E5"> story out</font><font color="#CCCCCC"> and</font>

298
00:16:03,630 --> 00:16:11,760
provided input output so<font color="#CCCCCC"> we also</font>

299
00:16:08,250 --> 00:16:14,130
compared the native execution<font color="#CCCCCC"> with the</font>

300
00:16:11,760 --> 00:16:16,710
execution of some code in<font color="#E5E5E5"> Inception</font><font color="#CCCCCC"> and</font>

301
00:16:14,130 --> 00:16:19,439
for the UART as you can see there is a

302
00:16:16,710 --> 00:16:22,550
small differences between the execution

303
00:16:19,440 --> 00:16:24,930
in achieve<font color="#CCCCCC"> under native</font><font color="#E5E5E5"> device and</font>

304
00:16:22,550 --> 00:16:30,000
<font color="#E5E5E5">inception it's mainly due</font><font color="#CCCCCC"> to the fact</font>

305
00:16:24,930 --> 00:16:32,430
that the UART application as<font color="#CCCCCC"> Heuer 11</font>

306
00:16:30,000 --> 00:16:35,279
instruction<font color="#CCCCCC"> but many restrictions</font><font color="#E5E5E5"> so the</font>

307
00:16:32,430 --> 00:16:38,130
regeneration<font color="#E5E5E5"> is pretty fast but for</font>

308
00:16:35,279 --> 00:16:41,040
duplicate and<font color="#CCCCCC"> thing there is much more</font>

309
00:16:38,130 --> 00:16:43,740
assembly<font color="#CCCCCC"> line a very insertion</font><font color="#E5E5E5"> 11</font>

310
00:16:41,040 --> 00:16:51,180
instruction so the execution<font color="#E5E5E5"> is much</font>

311
00:16:43,740 --> 00:16:54,330
slower<font color="#CCCCCC"> we</font><font color="#E5E5E5"> compare also the inception</font>

312
00:16:51,180 --> 00:16:57,000
<font color="#E5E5E5">with with</font><font color="#CCCCCC"> a cesarean section with a</font>

313
00:16:54,330 --> 00:16:58,980
<font color="#E5E5E5">benchmark from what you see is what you</font>

314
00:16:57,000 --> 00:17:02,279
provide<font color="#CCCCCC"> what you press is what you</font>

315
00:16:58,980 --> 00:17:06,420
correct<font color="#E5E5E5"> in these benchmarks the author</font>

316
00:17:02,279 --> 00:17:08,459
<font color="#E5E5E5">takes the XML parser</font><font color="#CCCCCC"> could expect and</font>

317
00:17:06,420 --> 00:17:11,880
they injected<font color="#CCCCCC"> the thought winner bitches</font>

318
00:17:08,459 --> 00:17:15,809
<font color="#CCCCCC">each webinar</font><font color="#E5E5E5"> which is in the separated</font>

319
00:17:11,880 --> 00:17:20,850
functions and this winner which is out

320
00:17:15,809 --> 00:17:23,300
as a unique trigger condition so we

321
00:17:20,849 --> 00:17:27,990
played with<font color="#CCCCCC"> inscription by replacing the</font>

322
00:17:23,300 --> 00:17:32,090
dysfunction with<font color="#E5E5E5"> low ayah so we</font>

323
00:17:27,990 --> 00:17:38,100
basically translate these functions in

324
00:17:32,090 --> 00:17:40,439
in<font color="#E5E5E5"> 11 Maya and you</font><font color="#CCCCCC"> can observe that</font><font color="#E5E5E5"> the</font>

325
00:17:38,100 --> 00:17:43,949
detection<font color="#E5E5E5"> rate decrease with when the</font>

326
00:17:40,440 --> 00:17:45,660
number<font color="#CCCCCC"> of a our function</font><font color="#E5E5E5"> increased so it</font>

327
00:17:43,950 --> 00:17:48,240
means that<font color="#E5E5E5"> the detection rate is not</font>

328
00:17:45,660 --> 00:17:49,320
efficient when you perform the analysis

329
00:17:48,240 --> 00:17:52,990
on binary<font color="#E5E5E5"> based</font>

330
00:17:49,320 --> 00:17:57,178
cut<font color="#E5E5E5"> we also</font>

331
00:17:52,990 --> 00:18:00,010
the<font color="#E5E5E5"> Juliet district from the</font><font color="#CCCCCC"> NIST</font>

332
00:17:57,179 --> 00:18:03,960
inception<font color="#E5E5E5"> was able</font><font color="#CCCCCC"> to detect</font><font color="#E5E5E5"> algebra no</font>

333
00:18:00,010 --> 00:18:06,790
<font color="#CCCCCC">BT except for the befell integral flow</font>

334
00:18:03,960 --> 00:18:12,480
it's due to<font color="#E5E5E5"> the fact that we use an</font><font color="#CCCCCC"> odd</font>

335
00:18:06,790 --> 00:18:15,790
version of<font color="#CCCCCC"> CLE so we need to date okay</font>

336
00:18:12,480 --> 00:18:18,670
<font color="#E5E5E5">we perform also some verification</font><font color="#CCCCCC"> to be</font>

337
00:18:15,790 --> 00:18:23,970
sure that<font color="#CCCCCC"> or if they'll behave exactly</font>

338
00:18:18,670 --> 00:18:27,330
at the native<font color="#E5E5E5"> or CPU da so we tested</font><font color="#CCCCCC"> the</font>

339
00:18:23,970 --> 00:18:29,950
<font color="#E5E5E5">43,000 test case issued from the</font>

340
00:18:27,330 --> 00:18:32,500
generated from the<font color="#CCCCCC"> own specification</font><font color="#E5E5E5"> and</font>

341
00:18:29,950 --> 00:18:36,250
we<font color="#E5E5E5"> compared the state of Inception with</font>

342
00:18:32,500 --> 00:18:38,559
the state of<font color="#E5E5E5"> native hardware by</font>

343
00:18:36,250 --> 00:18:41,950
comparing registers value and stock

344
00:18:38,559 --> 00:18:44,710
value we tested<font color="#E5E5E5"> also saw the the net</font>

345
00:18:41,950 --> 00:18:48,640
<font color="#CCCCCC">least test fit and</font><font color="#E5E5E5"> also the club drop</font>

346
00:18:44,710 --> 00:18:54,340
test fit and several demo application

347
00:18:48,640 --> 00:18:58,290
for the stm32 and also the LPC<font color="#CCCCCC"> bob with</font>

348
00:18:54,340 --> 00:19:01,059
our seed also mbembe Ellis and several

349
00:18:58,290 --> 00:19:08,190
indeed operating systems such as<font color="#E5E5E5"> here</font>

350
00:19:01,059 --> 00:19:10,450
<font color="#CCCCCC">TOS</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Minneapolis so to conclude we</font>

351
00:19:08,190 --> 00:19:13,150
<font color="#E5E5E5">inception extend the analysis of my</font>

352
00:19:10,450 --> 00:19:15,660
<font color="#E5E5E5">program to assembly superfluous and</font>

353
00:19:13,150 --> 00:19:18,429
<font color="#E5E5E5">binary code so if there</font><font color="#CCCCCC"> is no need to</font>

354
00:19:15,660 --> 00:19:22,240
modify<font color="#CCCCCC"> the code</font><font color="#E5E5E5"> to perform</font><font color="#CCCCCC"> an analysis</font>

355
00:19:18,429 --> 00:19:24,340
<font color="#E5E5E5">on a system-wide</font><font color="#CCCCCC"> drummer program it fit</font>

356
00:19:22,240 --> 00:19:26,830
well also<font color="#E5E5E5"> in the life cycle</font><font color="#CCCCCC"> because with</font>

357
00:19:24,340 --> 00:19:30,399
inception you can test without the out

358
00:19:26,830 --> 00:19:34,809
where thanks to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> other approximation</font>

359
00:19:30,400 --> 00:19:38,890
and also you can test your firmware<font color="#E5E5E5"> with</font>

360
00:19:34,809 --> 00:19:43,620
FPGA based design it's also possible<font color="#CCCCCC"> so</font>

361
00:19:38,890 --> 00:19:43,620
<font color="#E5E5E5">to user well chip the solution version</font>

362
00:19:43,980 --> 00:19:50,080
it's already<font color="#E5E5E5"> used at Maxim integrating</font>

363
00:19:46,870 --> 00:19:53,649
to test a home code where I<font color="#CCCCCC"> fund several</font>

364
00:19:50,080 --> 00:19:58,419
bugs and inception is open<font color="#E5E5E5"> sourced and</font>

365
00:19:53,650 --> 00:20:03,480
this<font color="#E5E5E5"> available on github and there is</font>

366
00:19:58,420 --> 00:20:03,480
also docker questions

367
00:20:09,410 --> 00:20:12,619
[Applause]

368
00:20:15,960 --> 00:20:21,490
hi John Criswell University of Rochester

369
00:20:18,880 --> 00:20:23,620
um so one<font color="#CCCCCC"> question I have is that you're</font>

370
00:20:21,490 --> 00:20:25,180
<font color="#E5E5E5">taking source code which contains inline</font>

371
00:20:23,620 --> 00:20:28,510
assembly code<font color="#CCCCCC"> right and you're</font>

372
00:20:25,180 --> 00:20:30,490
translating it to<font color="#E5E5E5"> LV Mir are you doing</font>

373
00:20:28,510 --> 00:20:31,990
anything special<font color="#E5E5E5"> to</font><font color="#CCCCCC"> mal</font><font color="#E5E5E5"> that inline</font>

374
00:20:30,490 --> 00:20:33,610
assembly code during<font color="#E5E5E5"> your symbolic</font>

375
00:20:31,990 --> 00:20:36,460
execution or you<font color="#CCCCCC"> just treating it</font><font color="#E5E5E5"> as</font>

376
00:20:33,610 --> 00:20:39,610
<font color="#E5E5E5">kind of a blob within the other sort of</font>

377
00:20:36,460 --> 00:20:43,410
point<font color="#E5E5E5"> regular LV Mir instructions so</font>

378
00:20:39,610 --> 00:20:45,399
there is when we live to cut from the

379
00:20:43,410 --> 00:20:47,110
assembly or binary code

380
00:20:45,400 --> 00:20:50,260
we didn't instrument to<font color="#CCCCCC"> code so it</font>

381
00:20:47,110 --> 00:20:53,709
didn't increase the detection rate for a

382
00:20:50,260 --> 00:20:55,240
little bit good<font color="#CCCCCC"> that's not quite my</font>

383
00:20:53,710 --> 00:20:56,920
question right<font color="#CCCCCC"> so my question is</font><font color="#E5E5E5"> that</font>

384
00:20:55,240 --> 00:20:59,020
<font color="#CCCCCC">you've got your analyte you're lifting</font>

385
00:20:56,920 --> 00:21:00,430
binary code we have pure binary<font color="#CCCCCC"> code</font>

386
00:20:59,020 --> 00:21:01,780
<font color="#E5E5E5">right you have known as first</font><font color="#CCCCCC"> book</font>

387
00:21:00,430 --> 00:21:03,820
you're lifting it<font color="#E5E5E5"> to</font><font color="#CCCCCC"> all of</font><font color="#E5E5E5"> you my arm</font>

388
00:21:01,780 --> 00:21:05,680
right<font color="#E5E5E5"> when you're compiling from source</font>

389
00:21:03,820 --> 00:21:08,889
<font color="#CCCCCC">code there can be inline assembly code</font>

390
00:21:05,680 --> 00:21:10,570
snippets<font color="#E5E5E5"> right that are embedded with</font>

391
00:21:08,890 --> 00:21:13,300
the<font color="#E5E5E5"> LV Mir</font><font color="#CCCCCC"> that comes from source code</font>

392
00:21:10,570 --> 00:21:15,010
<font color="#CCCCCC">so the question is is do you actually do</font>

393
00:21:13,300 --> 00:21:16,930
<font color="#E5E5E5">anything special for</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> like lifting</font>

394
00:21:15,010 --> 00:21:19,890
<font color="#E5E5E5">that to LV my are like you do for the</font>

395
00:21:16,930 --> 00:21:21,940
pure binary<font color="#CCCCCC"> yep so when there is a</font>

396
00:21:19,890 --> 00:21:24,220
<font color="#CCCCCC">serious function for example that</font>

397
00:21:21,940 --> 00:21:26,800
contains<font color="#E5E5E5"> assembly code we remove these</font>

398
00:21:24,220 --> 00:21:29,950
functions and replace it with lifted

399
00:21:26,800 --> 00:21:32,530
code<font color="#E5E5E5"> from the binary so we place the</font>

400
00:21:29,950 --> 00:21:35,830
<font color="#E5E5E5">entire</font><font color="#CCCCCC"> function with</font><font color="#E5E5E5"> the equivalent</font>

401
00:21:32,530 --> 00:21:42,460
<font color="#CCCCCC">obtained from the</font><font color="#E5E5E5"> binary code okay thank</font>

402
00:21:35,830 --> 00:21:45,639
you<font color="#CCCCCC"> bye - so my question is</font><font color="#E5E5E5"> how do you</font>

403
00:21:42,460 --> 00:21:49,120
compare your approach to<font color="#E5E5E5"> as</font><font color="#CCCCCC"> tui</font><font color="#E5E5E5"> which</font>

404
00:21:45,640 --> 00:21:53,440
sent Heather<font color="#E5E5E5"> suppose so as we also lived</font>

405
00:21:49,120 --> 00:21:56,110
our<font color="#CCCCCC"> Mir from back code</font><font color="#E5E5E5"> but we want to</font>

406
00:21:53,440 --> 00:21:58,600
add to make<font color="#CCCCCC"> it</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> that there are</font>

407
00:21:56,110 --> 00:22:02,260
memory boundaries so we can use compile

408
00:21:58,600 --> 00:22:04,959
time<font color="#E5E5E5"> inserting</font><font color="#CCCCCC"> likes and</font><font color="#E5E5E5"> headers to</font>

409
00:22:02,260 --> 00:22:09,070
<font color="#CCCCCC">achieve that</font><font color="#E5E5E5"> and how do you compare</font><font color="#CCCCCC"> your</font>

410
00:22:04,960 --> 00:22:12,430
approach to<font color="#CCCCCC"> DES so you mean now</font><font color="#E5E5E5"> they</font>

411
00:22:09,070 --> 00:22:17,290
compare inception<font color="#E5E5E5"> to next week detection</font>

412
00:22:12,430 --> 00:22:19,810
yeah<font color="#CCCCCC"> so it's quite different from a</font>

413
00:22:17,290 --> 00:22:23,020
story because inception is based on the

414
00:22:19,810 --> 00:22:24,470
source code<font color="#E5E5E5"> but you can also test binary</font>

415
00:22:23,020 --> 00:22:27,530
<font color="#CCCCCC">code that is less less</font>

416
00:22:24,470 --> 00:22:31,669
efficient<font color="#CCCCCC"> I mean with h3 you can still</font>

417
00:22:27,530 --> 00:22:36,168
test<font color="#E5E5E5"> optimized code on the Sun and it</font>

418
00:22:31,669 --> 00:22:38,510
supports 12 support in the record<font color="#CCCCCC"> but</font>

419
00:22:36,169 --> 00:22:40,460
<font color="#CCCCCC">within ships and it's more limited the</font>

420
00:22:38,510 --> 00:22:43,490
<font color="#E5E5E5">binary support is more limited</font><font color="#CCCCCC"> you need</font>

421
00:22:40,460 --> 00:22:47,480
also some during endorse or some debug

422
00:22:43,490 --> 00:23:16,250
information to<font color="#E5E5E5"> where the mount the C</font>

423
00:22:47,480 --> 00:23:20,240
<font color="#E5E5E5">code and the binary code okay</font><font color="#CCCCCC"> we test</font><font color="#E5E5E5"> we</font>

424
00:23:16,250 --> 00:23:23,600
<font color="#E5E5E5">tested also shows some Illustrated</font>

425
00:23:20,240 --> 00:23:25,760
application<font color="#E5E5E5"> sorry we tested also of here</font>

426
00:23:23,600 --> 00:23:29,658
to us with some multi-threaded

427
00:23:25,760 --> 00:23:34,850
applications and<font color="#E5E5E5"> also</font><font color="#CCCCCC"> all the demo for</font>

428
00:23:29,659 --> 00:23:37,940
<font color="#E5E5E5">the stm32 and linux be bound but on G</font>

429
00:23:34,850 --> 00:23:41,059
demo we didn't find any new cleaner<font color="#CCCCCC"> BT</font>

430
00:23:37,940 --> 00:23:44,870
we were able<font color="#CCCCCC"> to find some</font><font color="#E5E5E5"> already some</font>

431
00:23:41,059 --> 00:23:47,408
provision<font color="#CCCCCC"> on vulnerability but no new</font>

432
00:23:44,870 --> 00:23:47,408
innovative

