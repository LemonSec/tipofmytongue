1
00:00:10,030 --> 00:00:14,770
thanks for the introduction<font color="#CCCCCC"> I'm going to</font>

2
00:00:12,680 --> 00:00:17,779
talk about<font color="#CCCCCC"> our</font><font color="#E5E5E5"> simple password hardened</font>

3
00:00:14,770 --> 00:00:20,540
encryption services<font color="#CCCCCC"> this is a joint work</font>

4
00:00:17,779 --> 00:00:24,080
<font color="#E5E5E5">with</font><font color="#CCCCCC"> crystal beggar</font><font color="#E5E5E5"> man will run it</font>

5
00:00:20,540 --> 00:00:25,279
German<font color="#E5E5E5"> Charl arteriography Murphy and</font>

6
00:00:24,080 --> 00:00:28,369
Dominic sure

7
00:00:25,279 --> 00:00:32,750
so what's password<font color="#CCCCCC"> hardened encryption</font>

8
00:00:28,369 --> 00:00:35,420
you<font color="#CCCCCC"> ask</font><font color="#E5E5E5"> so basically what it does is so</font>

9
00:00:32,750 --> 00:00:38,900
it is a<font color="#E5E5E5"> one package solution for data</font>

10
00:00:35,420 --> 00:00:41,989
security<font color="#CCCCCC"> and what it does is to protect</font>

11
00:00:38,900 --> 00:00:46,430
sensitive client data which is stored<font color="#CCCCCC"> in</font>

12
00:00:41,989 --> 00:00:50,089
<font color="#CCCCCC">a server with password or biometric</font><font color="#E5E5E5"> to</font>

13
00:00:46,430 --> 00:00:52,070
<font color="#CCCCCC">affect etc of an occasion</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> if the</font>

14
00:00:50,090 --> 00:00:54,739
<font color="#E5E5E5">past the server is completely</font>

15
00:00:52,070 --> 00:00:56,989
compromised<font color="#E5E5E5"> so of course without any</font>

16
00:00:54,739 --> 00:00:59,690
external help<font color="#E5E5E5"> if this is impossible</font>

17
00:00:56,989 --> 00:01:03,828
therefore we need some minimal help from

18
00:00:59,690 --> 00:01:06,560
an external party called<font color="#E5E5E5"> rate limiter so</font>

19
00:01:03,829 --> 00:01:09,920
in more details<font color="#CCCCCC"> password had an</font>

20
00:01:06,560 --> 00:01:13,640
encryption<font color="#E5E5E5"> or pH e provides this list of</font>

21
00:01:09,920 --> 00:01:16,640
security<font color="#E5E5E5"> features against against a</font>

22
00:01:13,640 --> 00:01:19,030
compromised<font color="#E5E5E5"> server we completely</font>

23
00:01:16,640 --> 00:01:21,259
eliminate<font color="#E5E5E5"> offline attacks such as</font>

24
00:01:19,030 --> 00:01:24,649
<font color="#E5E5E5">dictionary of</font><font color="#CCCCCC"> light dictionary attacks</font>

25
00:01:21,259 --> 00:01:26,860
and it also<font color="#E5E5E5"> rate limits online attacks</font>

26
00:01:24,649 --> 00:01:30,229
such<font color="#CCCCCC"> as password guessing attacks</font><font color="#E5E5E5"> and</font>

27
00:01:26,860 --> 00:01:33,289
against this external rate limiter<font color="#E5E5E5"> we</font>

28
00:01:30,229 --> 00:01:35,390
achieve obliviousness<font color="#E5E5E5"> which means the</font>

29
00:01:33,289 --> 00:01:38,240
rate limiter<font color="#E5E5E5"> learns nothing about</font>

30
00:01:35,390 --> 00:01:40,550
<font color="#E5E5E5">password and data and we also achieve</font>

31
00:01:38,240 --> 00:01:43,399
soundness which means a limiter cannot

32
00:01:40,550 --> 00:01:45,500
cheat by<font color="#E5E5E5"> for example convincing the</font>

33
00:01:43,399 --> 00:01:48,410
server that<font color="#E5E5E5"> the password is correct but</font>

34
00:01:45,500 --> 00:01:50,690
indeed is not<font color="#E5E5E5"> and on top of</font><font color="#CCCCCC"> all these</font><font color="#E5E5E5"> we</font>

35
00:01:48,410 --> 00:01:53,060
achieve key rotation or we support key

36
00:01:50,690 --> 00:01:55,009
rotation which is<font color="#E5E5E5"> actually required in</font>

37
00:01:53,060 --> 00:01:57,349
payment card industry data<font color="#E5E5E5"> security</font>

38
00:01:55,009 --> 00:02:01,009
standard if<font color="#CCCCCC"> you want to store credit</font>

39
00:01:57,349 --> 00:02:03,950
cards on your website<font color="#CCCCCC"> for</font><font color="#E5E5E5"> example and in</font>

40
00:02:01,009 --> 00:02:07,489
terms<font color="#E5E5E5"> of practicality</font><font color="#CCCCCC"> our system is</font>

41
00:02:03,950 --> 00:02:11,290
simple and easy<font color="#CCCCCC"> to implement and is very</font>

42
00:02:07,489 --> 00:02:14,870
<font color="#CCCCCC">easy to convert from existing password</font>

43
00:02:11,290 --> 00:02:18,140
hashed password<font color="#E5E5E5"> system into this new</font>

44
00:02:14,870 --> 00:02:20,659
system<font color="#E5E5E5"> and we support currently 250</font>

45
00:02:18,140 --> 00:02:22,869
logins per<font color="#CCCCCC"> call per second</font><font color="#E5E5E5"> I will talk</font>

46
00:02:20,659 --> 00:02:26,859
more<font color="#CCCCCC"> about this later</font>

47
00:02:22,870 --> 00:02:29,560
so I hope this<font color="#E5E5E5"> is enough to get</font><font color="#CCCCCC"> you</font>

48
00:02:26,860 --> 00:02:34,540
excited<font color="#E5E5E5"> so let me get into the technical</font>

49
00:02:29,560 --> 00:02:37,300
details<font color="#E5E5E5"> so this line of work</font><font color="#CCCCCC"> is</font>

50
00:02:34,540 --> 00:02:39,310
motivated<font color="#CCCCCC"> by this typical scenario where</font>

51
00:02:37,300 --> 00:02:41,950
you have a client<font color="#CCCCCC"> Ellis with an</font>

52
00:02:39,310 --> 00:02:45,220
incredibly weak password and a server

53
00:02:41,950 --> 00:02:47,530
which stores<font color="#E5E5E5"> profile for Ellis which</font>

54
00:02:45,220 --> 00:02:50,709
consists of a hash<font color="#E5E5E5"> a</font><font color="#CCCCCC"> salted hash the</font>

55
00:02:47,530 --> 00:02:53,440
salt and maybe some<font color="#CCCCCC"> top-secret data okay</font>

56
00:02:50,709 --> 00:02:56,980
so to retrieve such a data<font color="#E5E5E5"> Ellis will</font>

57
00:02:53,440 --> 00:03:00,190
say hi I'm<font color="#CCCCCC"> Alison this</font><font color="#E5E5E5"> is my password so</font>

58
00:02:56,980 --> 00:03:02,349
the server will check whether provided

59
00:03:00,190 --> 00:03:05,890
password matches with the<font color="#CCCCCC"> sorta</font><font color="#E5E5E5"> half and</font>

60
00:03:02,349 --> 00:03:07,450
if so it returns the<font color="#CCCCCC"> top-secret</font><font color="#E5E5E5"> data so</font>

61
00:03:05,890 --> 00:03:10,208
obviously this is<font color="#E5E5E5"> not very good because</font>

62
00:03:07,450 --> 00:03:12,790
the data is<font color="#CCCCCC"> slow in plaintext so okay</font>

63
00:03:10,209 --> 00:03:15,790
obvious countermeasure would be<font color="#E5E5E5"> in store</font>

64
00:03:12,790 --> 00:03:18,519
<font color="#E5E5E5">the data in encrypted form so the server</font>

65
00:03:15,790 --> 00:03:20,890
will check where<font color="#CCCCCC"> the hash is correct and</font>

66
00:03:18,519 --> 00:03:23,019
if so it<font color="#E5E5E5"> decrypts the</font><font color="#CCCCCC"> des cipher text</font>

67
00:03:20,890 --> 00:03:25,450
and returns the data<font color="#E5E5E5"> but still this is</font>

68
00:03:23,019 --> 00:03:28,750
<font color="#CCCCCC">arguably</font><font color="#E5E5E5"> not a very good solution</font>

69
00:03:25,450 --> 00:03:31,959
<font color="#CCCCCC">because</font><font color="#E5E5E5"> first of all if an</font><font color="#CCCCCC"> attackers use</font>

70
00:03:28,750 --> 00:03:34,840
the sort<font color="#E5E5E5"> of hash database it can</font><font color="#CCCCCC"> perform</font>

71
00:03:31,959 --> 00:03:37,630
offline dictionary attacks and recover

72
00:03:34,840 --> 00:03:41,019
the passwords and use it to log in<font color="#E5E5E5"> on</font>

73
00:03:37,630 --> 00:03:43,810
<font color="#E5E5E5">behalf of the client</font><font color="#CCCCCC"> or even worse</font><font color="#E5E5E5"> if we</font>

74
00:03:41,019 --> 00:03:46,959
are talking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> insider threats so</font>

75
00:03:43,810 --> 00:03:48,540
maybe that hacker gets hold of<font color="#CCCCCC"> the</font>

76
00:03:46,959 --> 00:03:52,420
<font color="#CCCCCC">soever secretly</font><font color="#E5E5E5"> then you can just</font>

77
00:03:48,540 --> 00:03:55,000
decrypt the data directly right<font color="#E5E5E5"> so here</font>

78
00:03:52,420 --> 00:03:58,920
<font color="#E5E5E5">I summarized the two ways of obtaining</font>

79
00:03:55,000 --> 00:04:02,889
the client data<font color="#E5E5E5"> and previous work</font>

80
00:03:58,920 --> 00:04:04,750
<font color="#E5E5E5">focused on protecting the Psalter hash</font>

81
00:04:02,889 --> 00:04:07,230
part using<font color="#E5E5E5"> a notion called password</font>

82
00:04:04,750 --> 00:04:10,599
hardening which was<font color="#E5E5E5"> actually in</font>

83
00:04:07,230 --> 00:04:15,518
introduced by<font color="#E5E5E5"> Facebook and later in use</font>

84
00:04:10,599 --> 00:04:18,130
<font color="#E5E5E5">next 15 people formalized the idea and</font>

85
00:04:15,519 --> 00:04:21,880
gave a quite efficient scheme called P

86
00:04:18,130 --> 00:04:24,330
here and some improvement in<font color="#E5E5E5"> 616 and</font>

87
00:04:21,880 --> 00:04:27,370
last year we<font color="#E5E5E5"> proposed a scheme called</font>

88
00:04:24,330 --> 00:04:30,400
<font color="#CCCCCC">Phoenix which is very efficient let's do</font>

89
00:04:27,370 --> 00:04:34,330
<font color="#E5E5E5">it just focusing on the password or</font>

90
00:04:30,400 --> 00:04:36,609
<font color="#E5E5E5">sorted hash</font><font color="#CCCCCC"> pad</font><font color="#E5E5E5"> so this year we take</font>

91
00:04:34,330 --> 00:04:39,159
care<font color="#E5E5E5"> of the other part as well so</font><font color="#CCCCCC"> if</font>

92
00:04:36,610 --> 00:04:43,810
even if the server secret key is<font color="#CCCCCC"> learned</font>

93
00:04:39,160 --> 00:04:47,200
<font color="#E5E5E5">the attacker cannot decrypt the</font><font color="#CCCCCC"> data</font><font color="#E5E5E5"> so</font>

94
00:04:43,810 --> 00:04:49,780
here is how we do<font color="#CCCCCC"> it we take</font><font color="#E5E5E5"> the scheme</font>

95
00:04:47,200 --> 00:04:53,110
<font color="#E5E5E5">from last year Phoenix we simplify it so</font>

96
00:04:49,780 --> 00:04:54,460
<font color="#E5E5E5">that is even</font><font color="#CCCCCC"> more efficient and and</font><font color="#E5E5E5"> we</font>

97
00:04:53,110 --> 00:04:57,430
upgrade it<font color="#CCCCCC"> with</font><font color="#E5E5E5"> the encryption</font>

98
00:04:54,460 --> 00:05:02,590
functionality and<font color="#E5E5E5"> also provide a strong</font>

99
00:04:57,430 --> 00:05:05,170
soundness guarantee so let<font color="#E5E5E5"> me start by</font>

100
00:05:02,590 --> 00:05:08,320
explaining the simplified Phoenix team

101
00:05:05,170 --> 00:05:10,540
and to do so I need<font color="#E5E5E5"> a important an</font>

102
00:05:08,320 --> 00:05:12,490
important ingredient called key

103
00:05:10,540 --> 00:05:15,580
homomorphic pseudo-random function<font color="#CCCCCC"> or</font>

104
00:05:12,490 --> 00:05:18,790
PRF<font color="#E5E5E5"> so let G be a group of</font><font color="#CCCCCC"> Pi model</font>

105
00:05:15,580 --> 00:05:21,520
<font color="#E5E5E5">where decisional diffie-hellman is hot</font>

106
00:05:18,790 --> 00:05:24,340
and next be a<font color="#E5E5E5"> random Oracle is well</font>

107
00:05:21,520 --> 00:05:27,280
known that hash of message to the key<font color="#E5E5E5"> is</font>

108
00:05:24,340 --> 00:05:29,560
a pseudo-random function and the<font color="#CCCCCC"> DTH</font>

109
00:05:27,280 --> 00:05:31,299
assumption and most nice about this

110
00:05:29,560 --> 00:05:34,900
function<font color="#E5E5E5"> is that is</font><font color="#CCCCCC"> Chioma Morphy</font>

111
00:05:31,300 --> 00:05:37,930
therefore we can support<font color="#E5E5E5"> key rotation</font>

112
00:05:34,900 --> 00:05:42,489
<font color="#E5E5E5">from it so with this in mind</font><font color="#CCCCCC"> we describe</font>

113
00:05:37,930 --> 00:05:45,850
a simplified Phoenix team to register<font color="#E5E5E5"> LS</font>

114
00:05:42,490 --> 00:05:47,950
to provides<font color="#CCCCCC"> username LS and</font><font color="#E5E5E5"> the password</font>

115
00:05:45,850 --> 00:05:50,110
so nothing's changed<font color="#CCCCCC"> here but in the</font>

116
00:05:47,950 --> 00:05:54,700
back end the<font color="#E5E5E5"> server does something more</font>

117
00:05:50,110 --> 00:05:57,550
<font color="#E5E5E5">so like before it samples a</font><font color="#CCCCCC"> sort but now</font>

118
00:05:54,700 --> 00:05:59,979
it also informs<font color="#E5E5E5"> this third party very</font>

119
00:05:57,550 --> 00:06:04,060
limited that someone wants<font color="#CCCCCC"> to register</font>

120
00:05:59,980 --> 00:06:07,990
<font color="#E5E5E5">and</font><font color="#CCCCCC"> Israeli emitter then</font><font color="#E5E5E5"> confuse a PRF</font>

121
00:06:04,060 --> 00:06:10,240
on<font color="#E5E5E5"> a random sort and returns this PR</font>

122
00:06:07,990 --> 00:06:13,720
value<font color="#E5E5E5"> to the server then</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> server will</font>

123
00:06:10,240 --> 00:06:15,940
compute another PRF on its own sort and

124
00:06:13,720 --> 00:06:19,660
the password and multiply it with the

125
00:06:15,940 --> 00:06:23,560
<font color="#E5E5E5">PRF value of the</font><font color="#CCCCCC"> Ray limiter and and</font>

126
00:06:19,660 --> 00:06:27,310
store this product as<font color="#E5E5E5"> hash so to</font><font color="#CCCCCC"> login</font>

127
00:06:23,560 --> 00:06:29,680
<font color="#E5E5E5">as before the client still provides only</font>

128
00:06:27,310 --> 00:06:32,830
<font color="#E5E5E5">the username and password but the server</font>

129
00:06:29,680 --> 00:06:36,100
does something more<font color="#E5E5E5"> obviously and so it</font>

130
00:06:32,830 --> 00:06:38,859
first removed<font color="#CCCCCC"> its own PRF value from the</font>

131
00:06:36,100 --> 00:06:41,500
product and sent there are other half of

132
00:06:38,860 --> 00:06:44,230
the<font color="#E5E5E5"> product to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> rate limiter so note</font>

133
00:06:41,500 --> 00:06:46,510
<font color="#CCCCCC">that if the password</font><font color="#E5E5E5"> is correct</font><font color="#CCCCCC"> then</font>

134
00:06:44,230 --> 00:06:49,930
this<font color="#E5E5E5"> other half would be</font><font color="#CCCCCC"> a valid PRF</font>

135
00:06:46,510 --> 00:06:50,380
value of the<font color="#CCCCCC"> reading right so the Ray</font>

136
00:06:49,930 --> 00:06:53,470
limit

137
00:06:50,380 --> 00:06:56,560
we'll check<font color="#CCCCCC"> exactly this</font><font color="#E5E5E5"> and if it's</font>

138
00:06:53,470 --> 00:06:58,450
indeed correct<font color="#E5E5E5"> and it will say okay is</font>

139
00:06:56,560 --> 00:07:00,910
correct and here is a<font color="#E5E5E5"> pool that</font><font color="#CCCCCC"> is</font>

140
00:06:58,450 --> 00:07:05,140
correct<font color="#CCCCCC"> and if it's incorrect and it</font>

141
00:07:00,910 --> 00:07:07,210
said otherwise right<font color="#CCCCCC"> and if the server</font>

142
00:07:05,140 --> 00:07:12,070
is convinced that the proof is valid and

143
00:07:07,210 --> 00:07:14,770
it will allow the client to<font color="#CCCCCC"> log in</font><font color="#E5E5E5"> so</font>

144
00:07:12,070 --> 00:07:18,490
key rotation is supported almost

145
00:07:14,770 --> 00:07:21,190
<font color="#E5E5E5">natively in the</font><font color="#CCCCCC"> sense that the server</font>

146
00:07:18,490 --> 00:07:24,940
and rainy meter with secret key<font color="#CCCCCC"> s K s</font>

147
00:07:21,190 --> 00:07:28,510
and<font color="#CCCCCC"> s AR</font><font color="#E5E5E5"> can rotate a key into</font><font color="#CCCCCC"> alpha</font><font color="#E5E5E5"> x</font>

148
00:07:24,940 --> 00:07:31,120
sk s and alpha x sk r plus beta where

149
00:07:28,510 --> 00:07:34,840
alpha and<font color="#E5E5E5"> beta random values and after</font>

150
00:07:31,120 --> 00:07:36,840
doing<font color="#CCCCCC"> so the server can rotate all the</font>

151
00:07:34,840 --> 00:07:40,679
sort hash values in this database

152
00:07:36,840 --> 00:07:44,650
<font color="#E5E5E5">without ordering</font><font color="#CCCCCC"> ray limiter</font><font color="#E5E5E5"> anymore</font>

153
00:07:40,680 --> 00:07:46,360
so in order to<font color="#E5E5E5"> upgrade this to password</font>

154
00:07:44,650 --> 00:07:49,359
<font color="#E5E5E5">had an encryption scheme let's take a</font>

155
00:07:46,360 --> 00:07:52,300
closer look<font color="#E5E5E5"> of what is really returned</font>

156
00:07:49,360 --> 00:07:54,490
<font color="#CCCCCC">to us so it</font><font color="#E5E5E5"> actually performs two very</font>

157
00:07:52,300 --> 00:07:57,370
simple<font color="#E5E5E5"> fashion</font><font color="#CCCCCC"> Aarti</font><font color="#E5E5E5"> first is the</font>

158
00:07:54,490 --> 00:07:59,050
<font color="#E5E5E5">Equality check functionality namely</font><font color="#CCCCCC"> that</font>

159
00:07:57,370 --> 00:08:03,340
it<font color="#E5E5E5"> checks whether the pseudo-random</font>

160
00:07:59,050 --> 00:08:06,520
<font color="#E5E5E5">function values are equal and it also</font>

161
00:08:03,340 --> 00:08:07,179
checks<font color="#E5E5E5"> if this sort requested by</font><font color="#CCCCCC"> the</font>

162
00:08:06,520 --> 00:08:09,820
server

163
00:08:07,180 --> 00:08:12,430
it appears<font color="#E5E5E5"> too frequently</font><font color="#CCCCCC"> too frequently</font>

164
00:08:09,820 --> 00:08:15,760
and if so it rate limits the login

165
00:08:12,430 --> 00:08:19,090
request<font color="#E5E5E5"> so in order to upgrade this to</font><font color="#CCCCCC"> a</font>

166
00:08:15,760 --> 00:08:19,930
<font color="#CCCCCC">PhD we change</font><font color="#E5E5E5"> this equality check</font>

167
00:08:19,090 --> 00:08:22,330
relationality

168
00:08:19,930 --> 00:08:25,420
into a slightly<font color="#E5E5E5"> more complicated one</font>

169
00:08:22,330 --> 00:08:27,909
<font color="#E5E5E5">namely which this ray limiter will check</font>

170
00:08:25,420 --> 00:08:30,310
where the PF where<font color="#E5E5E5"> they are consistent</font>

171
00:08:27,910 --> 00:08:35,050
<font color="#E5E5E5">and if so it performs some kind of</font>

172
00:08:30,310 --> 00:08:36,490
partial decryption so this is concretely

173
00:08:35,049 --> 00:08:38,919
<font color="#E5E5E5">how we do it</font>

174
00:08:36,490 --> 00:08:40,990
so now to register<font color="#E5E5E5"> the client</font>

175
00:08:38,919 --> 00:08:43,929
<font color="#E5E5E5">additionally provide some top-secret</font>

176
00:08:40,990 --> 00:08:46,870
data to be stored in<font color="#E5E5E5"> the server and now</font>

177
00:08:43,929 --> 00:08:49,390
in apart from<font color="#E5E5E5"> sampling the salt the</font>

178
00:08:46,870 --> 00:08:54,240
server will also sample<font color="#CCCCCC"> a symmetric key</font>

179
00:08:49,390 --> 00:08:56,980
let's say an<font color="#CCCCCC"> aes key and it also</font><font color="#E5E5E5"> asks</font>

180
00:08:54,240 --> 00:08:59,110
<font color="#E5E5E5">inform the</font><font color="#CCCCCC"> ray</font><font color="#E5E5E5"> limit that someone wants</font>

181
00:08:56,980 --> 00:09:00,580
<font color="#CCCCCC">to register</font><font color="#E5E5E5"> but now the</font><font color="#CCCCCC"> Ray limiter</font>

182
00:08:59,110 --> 00:09:04,100
<font color="#E5E5E5">performs this</font>

183
00:09:00,580 --> 00:09:07,940
PRF evaluation twice<font color="#E5E5E5"> so with its</font>

184
00:09:04,100 --> 00:09:11,120
inspect y0 and y1 to the server<font color="#CCCCCC"> and</font>

185
00:09:07,940 --> 00:09:13,819
<font color="#E5E5E5">again the server does this its own</font><font color="#CCCCCC"> PR</font>

186
00:09:11,120 --> 00:09:18,190
<font color="#E5E5E5">from the computation twice to obtain two</font>

187
00:09:13,819 --> 00:09:23,089
products<font color="#CCCCCC"> x0</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> x1</font><font color="#E5E5E5"> but here we use x1 to</font>

188
00:09:18,190 --> 00:09:25,870
further<font color="#CCCCCC"> one</font><font color="#E5E5E5"> time had this AES key and</font>

189
00:09:23,089 --> 00:09:29,720
finally it uses the<font color="#CCCCCC"> AES key</font><font color="#E5E5E5"> to encrypt</font>

190
00:09:25,870 --> 00:09:32,990
<font color="#E5E5E5">top-secret data so to retrieve such a</font>

191
00:09:29,720 --> 00:09:37,490
data we do it in reverse<font color="#CCCCCC"> the server will</font>

192
00:09:32,990 --> 00:09:40,670
remove<font color="#E5E5E5"> its part of the PRF values and</font>

193
00:09:37,490 --> 00:09:47,060
send the other<font color="#E5E5E5"> half so the other half of</font>

194
00:09:40,670 --> 00:09:50,180
X 0 y 0 to<font color="#E5E5E5"> R a limiter and the radiator</font>

195
00:09:47,060 --> 00:09:52,489
<font color="#CCCCCC">will check whether this</font><font color="#E5E5E5"> is a very</font><font color="#CCCCCC"> pH</font>

196
00:09:50,180 --> 00:09:55,729
<font color="#CCCCCC">value and if so it returns the other</font>

197
00:09:52,490 --> 00:09:59,209
half<font color="#CCCCCC"> y1 to the server of</font><font color="#E5E5E5"> course with a</font>

198
00:09:55,730 --> 00:10:02,290
proof<font color="#E5E5E5"> and now the server can recover the</font>

199
00:09:59,209 --> 00:10:05,349
secret<font color="#E5E5E5"> key K and decrypt the</font><font color="#CCCCCC"> ciphertext</font>

200
00:10:02,290 --> 00:10:08,480
so to recap<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the security features</font>

201
00:10:05,350 --> 00:10:12,019
<font color="#E5E5E5">against the compromised server we</font>

202
00:10:08,480 --> 00:10:15,139
eliminate all of my<font color="#E5E5E5"> attacks because the</font>

203
00:10:12,019 --> 00:10:17,509
password hashes<font color="#E5E5E5"> are masked by</font><font color="#CCCCCC"> Ray</font>

204
00:10:15,139 --> 00:10:19,509
<font color="#CCCCCC">limiter</font><font color="#E5E5E5"> SPF values and therefore</font><font color="#CCCCCC"> a</font>

205
00:10:17,509 --> 00:10:21,829
<font color="#E5E5E5">compromised server must communicate</font>

206
00:10:19,509 --> 00:10:24,920
<font color="#E5E5E5">still must communicate with the Ray</font>

207
00:10:21,829 --> 00:10:29,029
<font color="#CCCCCC">limiter to test if the password is</font>

208
00:10:24,920 --> 00:10:31,550
<font color="#CCCCCC">correct and</font><font color="#E5E5E5"> also we can rate limit on my</font>

209
00:10:29,029 --> 00:10:33,800
attacks because the Ray limiter will

210
00:10:31,550 --> 00:10:38,479
check<font color="#CCCCCC"> whether</font><font color="#E5E5E5"> assault appears too many</font>

211
00:10:33,800 --> 00:10:41,209
times on the<font color="#E5E5E5"> other hand against the Ray</font>

212
00:10:38,480 --> 00:10:44,509
limiter<font color="#CCCCCC"> we achieve obliviousness</font><font color="#E5E5E5"> which</font>

213
00:10:41,209 --> 00:10:47,420
means that the radiator learns<font color="#E5E5E5"> nothing</font>

214
00:10:44,509 --> 00:10:50,509
about password<font color="#E5E5E5"> and beta this is</font><font color="#CCCCCC"> trivial</font>

215
00:10:47,420 --> 00:10:52,610
because this message<font color="#E5E5E5"> is sent from the</font>

216
00:10:50,509 --> 00:10:54,769
<font color="#E5E5E5">server to the very limit</font><font color="#CCCCCC"> basically are</font>

217
00:10:52,610 --> 00:10:57,800
independent of the<font color="#E5E5E5"> passwords and data</font>

218
00:10:54,769 --> 00:11:00,470
and we<font color="#E5E5E5"> also achieve soundness because</font>

219
00:10:57,800 --> 00:11:04,729
the brain<font color="#E5E5E5"> limiter must prove all the</font>

220
00:11:00,470 --> 00:11:07,819
responses<font color="#E5E5E5"> that</font><font color="#CCCCCC"> if returns are correct we</font>

221
00:11:04,730 --> 00:11:10,720
<font color="#E5E5E5">also achieve proactive security by key</font>

222
00:11:07,819 --> 00:11:13,939
rotation key rotation can<font color="#CCCCCC"> be done either</font>

223
00:11:10,720 --> 00:11:16,519
periodically<font color="#CCCCCC"> or when you suspect</font><font color="#E5E5E5"> that</font>

224
00:11:13,939 --> 00:11:17,569
<font color="#E5E5E5">the party</font><font color="#CCCCCC"> is compromised</font><font color="#E5E5E5"> and this is</font>

225
00:11:16,519 --> 00:11:20,089
also not

226
00:11:17,570 --> 00:11:22,959
very<font color="#E5E5E5"> difficult by using a key</font>

227
00:11:20,089 --> 00:11:27,920
homomorphic PRF which I just introduced

228
00:11:22,959 --> 00:11:31,430
so we implemented<font color="#E5E5E5"> this protocol</font><font color="#CCCCCC"> in these</font>

229
00:11:27,920 --> 00:11:33,740
<font color="#E5E5E5">settings and we found that is quite</font>

230
00:11:31,430 --> 00:11:37,310
efficient<font color="#E5E5E5"> is four times as efficient as</font>

231
00:11:33,740 --> 00:11:39,230
<font color="#CCCCCC">PDA</font><font color="#E5E5E5"> and 1.5 times as efficient as</font>

232
00:11:37,310 --> 00:11:41,388
<font color="#E5E5E5">Phoenix</font><font color="#CCCCCC"> and note that these</font><font color="#E5E5E5"> two schemes</font>

233
00:11:39,230 --> 00:11:43,610
are just partial hardening scheme

234
00:11:41,389 --> 00:11:45,350
without<font color="#CCCCCC"> encryption so even with</font>

235
00:11:43,610 --> 00:11:48,980
<font color="#E5E5E5">encryption we are faster than these</font>

236
00:11:45,350 --> 00:11:51,199
themes<font color="#CCCCCC"> and</font><font color="#E5E5E5"> in terms of scalability as</font>

237
00:11:48,980 --> 00:11:53,120
you can see the throughput<font color="#E5E5E5"> of the server</font>

238
00:11:51,199 --> 00:11:57,258
and<font color="#CCCCCC"> the</font><font color="#E5E5E5"> rate limiter scales almost</font>

239
00:11:53,120 --> 00:12:00,560
linearly<font color="#E5E5E5"> so we expect</font><font color="#CCCCCC"> that it works well</font>

240
00:11:57,259 --> 00:12:04,009
in<font color="#CCCCCC"> large-scale</font><font color="#E5E5E5"> system as well so to</font>

241
00:12:00,560 --> 00:12:06,589
conclude I<font color="#CCCCCC"> introduce</font><font color="#E5E5E5"> you password</font>

242
00:12:04,009 --> 00:12:09,949
<font color="#CCCCCC">hardened encryptions</font><font color="#E5E5E5"> services actually</font>

243
00:12:06,589 --> 00:12:12,529
<font color="#CCCCCC">we</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> working on removing all public</font>

244
00:12:09,949 --> 00:12:14,660
key crypto<font color="#E5E5E5"> from the system and just</font><font color="#CCCCCC"> use</font>

245
00:12:12,529 --> 00:12:17,410
symmetric<font color="#E5E5E5"> key crypto and if that works</font>

246
00:12:14,660 --> 00:12:21,350
that will be conservatively speaking

247
00:12:17,410 --> 00:12:24,980
<font color="#CCCCCC">1000 times faster and it might even be</font>

248
00:12:21,350 --> 00:12:28,730
<font color="#CCCCCC">able to support large companies like</font>

249
00:12:24,980 --> 00:12:30,380
<font color="#E5E5E5">Google also so thank you for attention</font>

250
00:12:28,730 --> 00:12:41,120
<font color="#E5E5E5">and I</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> take any questions</font>

251
00:12:30,380 --> 00:12:43,220
thank you so I guess it's not<font color="#E5E5E5"> clear</font><font color="#CCCCCC"> to</font>

252
00:12:41,120 --> 00:12:47,899
me what happens if I say the user needs

253
00:12:43,220 --> 00:12:50,449
<font color="#E5E5E5">to change his password but basically you</font>

254
00:12:47,899 --> 00:12:52,639
just treat<font color="#CCCCCC"> it as if</font><font color="#E5E5E5"> it's a new</font>

255
00:12:50,449 --> 00:12:55,510
registration<font color="#E5E5E5"> so you delete the over town</font>

256
00:12:52,639 --> 00:12:59,060
and<font color="#CCCCCC"> when all the data is didn't want to</font>

257
00:12:55,510 --> 00:13:00,649
<font color="#E5E5E5">preserve right</font><font color="#CCCCCC"> yes so when you want to</font>

258
00:12:59,060 --> 00:13:04,069
<font color="#E5E5E5">change your password the client will</font>

259
00:13:00,649 --> 00:13:05,930
provide old password and a new password

260
00:13:04,069 --> 00:13:07,790
right so you use the<font color="#CCCCCC"> old password to</font>

261
00:13:05,930 --> 00:13:10,849
decrypt and then<font color="#E5E5E5"> click with the new</font>

262
00:13:07,790 --> 00:13:14,149
password<font color="#CCCCCC"> okay hi Stefan</font><font color="#E5E5E5"> sorry for</font>

263
00:13:10,850 --> 00:13:15,709
<font color="#E5E5E5">Microsoft Research</font><font color="#CCCCCC"> I just have some</font>

264
00:13:14,149 --> 00:13:17,660
clarifying questions with respect sort

265
00:13:15,709 --> 00:13:19,819
of with<font color="#E5E5E5"> the practical systems aspects of</font>

266
00:13:17,660 --> 00:13:21,589
this so to scale it up presumably we're

267
00:13:19,819 --> 00:13:25,670
gonna have more than<font color="#E5E5E5"> one server right</font>

268
00:13:21,589 --> 00:13:28,490
and are we how many<font color="#CCCCCC"> red limiters are we</font>

269
00:13:25,670 --> 00:13:30,920
gonna have with a cluster<font color="#CCCCCC"> of servers</font><font color="#E5E5E5"> or</font>

270
00:13:28,490 --> 00:13:34,940
many so<font color="#CCCCCC"> yes so currently</font>

271
00:13:30,920 --> 00:13:36,649
we consider one server<font color="#E5E5E5"> working with one</font>

272
00:13:34,940 --> 00:13:40,310
rate limiter of course you can replicate

273
00:13:36,649 --> 00:13:43,490
<font color="#CCCCCC">this system many</font><font color="#E5E5E5"> times but in the future</font>

274
00:13:40,310 --> 00:13:45,680
we are<font color="#CCCCCC"> you will</font><font color="#E5E5E5"> also consider one server</font>

275
00:13:43,490 --> 00:13:49,269
working with multiple rate limiters or

276
00:13:45,680 --> 00:13:49,269
some kind of<font color="#CCCCCC"> threshold setting</font>

277
00:13:49,300 --> 00:13:54,620
<font color="#E5E5E5">okay so but when I have multiple sir</font>

278
00:13:52,880 --> 00:13:58,339
when I have multiple rate limiters<font color="#E5E5E5"> the</font>

279
00:13:54,620 --> 00:14:00,740
<font color="#E5E5E5">real limiting policies then right there</font>

280
00:13:58,339 --> 00:14:02,500
is pressed like it they become sort<font color="#E5E5E5"> of</font>

281
00:14:00,740 --> 00:14:05,120
more complicated<font color="#CCCCCC"> from</font><font color="#E5E5E5"> here so there's a</font>

282
00:14:02,500 --> 00:14:11,230
<font color="#E5E5E5">complicated question that we</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> going</font>

283
00:14:05,120 --> 00:14:11,230
<font color="#E5E5E5">to answer thank you</font>

