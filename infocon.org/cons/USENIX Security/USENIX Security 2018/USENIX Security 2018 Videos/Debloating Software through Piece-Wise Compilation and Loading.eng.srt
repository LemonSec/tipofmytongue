1
00:00:10,019 --> 00:00:15,029
<font color="#E5E5E5">no my</font><font color="#CCCCCC"> name's Anne I'm gonna present</font><font color="#E5E5E5"> our</font>

2
00:00:13,169 --> 00:00:17,789
work<font color="#E5E5E5"> on the bloating software through</font>

3
00:00:15,029 --> 00:00:19,860
piecewise compilation<font color="#E5E5E5"> and loading this</font>

4
00:00:17,789 --> 00:00:22,680
<font color="#E5E5E5">is collaborating work between me my</font>

5
00:00:19,860 --> 00:00:25,410
advisor<font color="#E5E5E5"> dr. Prakash and dr.</font><font color="#CCCCCC"> Lockean</font><font color="#E5E5E5"> from</font>

6
00:00:22,680 --> 00:00:27,899
<font color="#E5E5E5">an Air Force Research Lab so let me</font>

7
00:00:25,410 --> 00:00:30,719
<font color="#E5E5E5">start by introducing the problem that</font>

8
00:00:27,899 --> 00:00:33,360
we're trying<font color="#E5E5E5"> to solve programs uploaded</font>

9
00:00:30,719 --> 00:00:36,360
<font color="#E5E5E5">what I mean</font><font color="#CCCCCC"> what do I mean by bloated so</font>

10
00:00:33,360 --> 00:00:38,940
let's take a look at a<font color="#E5E5E5"> simple example so</font>

11
00:00:36,360 --> 00:00:43,230
if you look at the deployment on on the

12
00:00:38,940 --> 00:00:45,660
left is a very minimal program<font color="#CCCCCC"> only one</font>

13
00:00:43,230 --> 00:00:45,930
function that<font color="#E5E5E5"> returns and does nothing</font>

14
00:00:45,660 --> 00:00:49,019
<font color="#E5E5E5">else</font>

15
00:00:45,930 --> 00:00:51,180
so<font color="#E5E5E5"> in binary this program contains two</font>

16
00:00:49,020 --> 00:00:53,550
instructions<font color="#E5E5E5"> so when you load this this</font>

17
00:00:51,180 --> 00:00:56,610
<font color="#E5E5E5">program into</font><font color="#CCCCCC"> the process</font><font color="#E5E5E5"> memory when you</font>

18
00:00:53,550 --> 00:01:00,030
<font color="#CCCCCC">execute this program</font><font color="#E5E5E5"> the pro the program</font>

19
00:00:56,610 --> 00:01:02,910
<font color="#CCCCCC">only requires a small fraction of Lipsy</font>

20
00:01:00,030 --> 00:01:05,610
<font color="#E5E5E5">to execute the program</font><font color="#CCCCCC"> to handle the</font>

21
00:01:02,910 --> 00:01:07,979
entry point<font color="#E5E5E5"> and handle the process</font>

22
00:01:05,610 --> 00:01:10,170
<font color="#E5E5E5">termination and yet when you execute</font>

23
00:01:07,979 --> 00:01:13,049
this<font color="#CCCCCC"> program you have</font><font color="#E5E5E5"> to load the entire</font>

24
00:01:10,170 --> 00:01:15,090
<font color="#CCCCCC">Lipsy on to the process memory</font><font color="#E5E5E5"> and so</font>

25
00:01:13,049 --> 00:01:17,579
therefore you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> see there's a huge</font>

26
00:01:15,090 --> 00:01:19,170
chunk<font color="#E5E5E5"> of</font><font color="#CCCCCC"> Lipsy</font><font color="#E5E5E5"> is not being used by the</font>

27
00:01:17,579 --> 00:01:22,559
<font color="#E5E5E5">program just sitting there</font>

28
00:01:19,170 --> 00:01:25,139
that is the code loading problem and to

29
00:01:22,560 --> 00:01:27,329
provide a big picture<font color="#CCCCCC"> of how</font><font color="#E5E5E5"> serious and</font>

30
00:01:25,139 --> 00:01:31,079
pervades that this code loading problem

31
00:01:27,329 --> 00:01:34,139
is we conducted an extensive study<font color="#E5E5E5"> of</font>

32
00:01:31,079 --> 00:01:39,389
how shared libraries particularly are

33
00:01:34,139 --> 00:01:41,548
being used by over<font color="#CCCCCC"> 2000 programs that</font><font color="#E5E5E5"> we</font>

34
00:01:39,389 --> 00:01:44,999
found on<font color="#CCCCCC"> eighth full installation of</font>

35
00:01:41,549 --> 00:01:47,999
Ubuntu a<font color="#E5E5E5"> 16 desktop version so let's</font>

36
00:01:44,999 --> 00:01:51,598
take a look<font color="#E5E5E5"> at the most popular shared</font>

37
00:01:47,999 --> 00:01:54,119
library let's<font color="#CCCCCC"> see so we found that</font><font color="#E5E5E5"> the</font>

38
00:01:51,599 --> 00:01:58,859
<font color="#CCCCCC">program that used most the imports most</font>

39
00:01:54,119 --> 00:02:02,310
of<font color="#CCCCCC"> Lipsy functions</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> VLC and it only</font>

40
00:01:58,859 --> 00:02:06,598
uses<font color="#CCCCCC"> 21 percent of the gene Lipsy</font>

41
00:02:02,310 --> 00:02:09,300
functions<font color="#E5E5E5"> so across those</font><font color="#CCCCCC"> 2,000</font><font color="#E5E5E5"> programs</font>

42
00:02:06,599 --> 00:02:12,120
<font color="#E5E5E5">we found that only 5% of</font><font color="#CCCCCC"> Gypsys</font>

43
00:02:09,300 --> 00:02:16,890
functions are important by the program

44
00:02:12,120 --> 00:02:18,810
what<font color="#E5E5E5"> about other shared libraries if we</font>

45
00:02:16,890 --> 00:02:20,609
take<font color="#E5E5E5"> a look at this</font><font color="#CCCCCC"> table we listed the</font>

46
00:02:18,810 --> 00:02:22,019
<font color="#E5E5E5">shared wipe the most popular shared</font>

47
00:02:20,610 --> 00:02:24,329
libraries being

48
00:02:22,019 --> 00:02:27,299
we rank them by the number of<font color="#CCCCCC"> programs</font>

49
00:02:24,329 --> 00:02:28,829
that<font color="#CCCCCC"> you use</font><font color="#E5E5E5"> the shared library and we</font>

50
00:02:27,299 --> 00:02:32,939
found that the most<font color="#CCCCCC"> problem for the most</font>

51
00:02:28,829 --> 00:02:36,810
popular<font color="#CCCCCC"> shared library gilepsy</font><font color="#E5E5E5"> the</font>

52
00:02:32,939 --> 00:02:40,890
programmer<font color="#E5E5E5"> leaves approximately</font><font color="#CCCCCC"> 25% of</font>

53
00:02:36,810 --> 00:02:43,200
<font color="#E5E5E5">the functions in</font><font color="#CCCCCC"> GFC and</font><font color="#E5E5E5"> if we take a</font>

54
00:02:40,890 --> 00:02:46,738
look<font color="#E5E5E5"> at the top 15 most popular shared</font>

55
00:02:43,200 --> 00:02:49,260
libraries on average only 10% of the

56
00:02:46,739 --> 00:02:54,450
functions in those shared libraries are

57
00:02:49,260 --> 00:02:56,280
used<font color="#CCCCCC"> what</font><font color="#E5E5E5"> about the so there is existing</font>

58
00:02:54,450 --> 00:02:58,319
dead column elimination

59
00:02:56,280 --> 00:03:02,340
optimization performance different

60
00:02:58,319 --> 00:03:04,319
stages statically for example at the

61
00:03:02,340 --> 00:03:06,359
compilation stage you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> the compiler</font>

62
00:03:04,319 --> 00:03:08,939
perform dead code elimination at the

63
00:03:06,359 --> 00:03:11,250
function level<font color="#E5E5E5"> for the function body and</font>

64
00:03:08,939 --> 00:03:15,299
then at the linking stage you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> an</font>

65
00:03:11,250 --> 00:03:16,799
<font color="#E5E5E5">option to perform cross module dead code</font>

66
00:03:15,299 --> 00:03:19,260
elimination

67
00:03:16,799 --> 00:03:21,689
however<font color="#E5E5E5"> there we observe</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> there's</font>

68
00:03:19,260 --> 00:03:24,060
<font color="#CCCCCC">information only available to the loader</font>

69
00:03:21,689 --> 00:03:25,709
<font color="#E5E5E5">at the later stage at the linking stage</font>

70
00:03:24,060 --> 00:03:27,209
about the dependencies<font color="#CCCCCC"> between the</font>

71
00:03:25,709 --> 00:03:29,519
program<font color="#E5E5E5"> and the shared libraries and</font>

72
00:03:27,209 --> 00:03:31,049
between<font color="#E5E5E5"> the shared life between the</font>

73
00:03:29,519 --> 00:03:33,659
shared libraries that<font color="#E5E5E5"> the program uses</font>

74
00:03:31,049 --> 00:03:37,019
so take a taking advantage of that

75
00:03:33,659 --> 00:03:39,840
information<font color="#CCCCCC"> we aim to bring</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> :</font>

76
00:03:37,019 --> 00:03:44,010
elimination to the<font color="#E5E5E5"> status later stage to</font>

77
00:03:39,840 --> 00:03:47,120
perform<font color="#E5E5E5"> aggressive</font><font color="#CCCCCC"> dead deep loading for</font>

78
00:03:44,010 --> 00:03:49,440
the program so<font color="#E5E5E5"> that is our approach so</font>

79
00:03:47,120 --> 00:03:52,859
for this approach we<font color="#CCCCCC"> introduced a</font>

80
00:03:49,440 --> 00:03:57,290
framework<font color="#CCCCCC"> called piecewise that perform</font>

81
00:03:52,859 --> 00:04:00,750
a whole<font color="#E5E5E5"> program it's systematically and</font>

82
00:03:57,290 --> 00:04:02,220
automatically<font color="#E5E5E5"> detect which part of the</font>

83
00:04:00,750 --> 00:04:04,889
<font color="#E5E5E5">code module you're trying to the bloat</font>

84
00:04:02,220 --> 00:04:06,510
is gonna be needed at runtime<font color="#E5E5E5"> and they</font>

85
00:04:04,889 --> 00:04:09,540
<font color="#CCCCCC">remove the part that we're not going to</font>

86
00:04:06,510 --> 00:04:11,548
<font color="#E5E5E5">need at runtime</font><font color="#CCCCCC"> so this framework</font>

87
00:04:09,540 --> 00:04:14,280
contains two components the<font color="#CCCCCC"> first thing</font>

88
00:04:11,549 --> 00:04:16,978
of component is the compiler which will

89
00:04:14,280 --> 00:04:21,560
analyze the<font color="#CCCCCC"> source code of</font><font color="#E5E5E5"> the code</font>

90
00:04:16,978 --> 00:04:22,780
module and then it generates<font color="#E5E5E5"> a metadata</font>

91
00:04:21,560 --> 00:04:25,030
the

92
00:04:22,780 --> 00:04:28,030
dependency graph and it writes<font color="#E5E5E5"> the</font>

93
00:04:25,030 --> 00:04:31,299
metadata on<font color="#E5E5E5"> to the the binary of the</font>

94
00:04:28,030 --> 00:04:33,849
code module and the second component<font color="#E5E5E5"> the</font>

95
00:04:31,300 --> 00:04:35,830
piecewise loader<font color="#E5E5E5"> it will break the</font>

96
00:04:33,850 --> 00:04:39,430
metadata<font color="#CCCCCC"> produced</font><font color="#E5E5E5"> by the compiler</font><font color="#CCCCCC"> and</font>

97
00:04:35,830 --> 00:04:42,430
then use the the runtime information

98
00:04:39,430 --> 00:04:44,950
<font color="#E5E5E5">that the loader knows and then determine</font>

99
00:04:42,430 --> 00:04:46,600
<font color="#E5E5E5">which part of the code module we're not</font>

100
00:04:44,950 --> 00:04:49,090
going to<font color="#E5E5E5"> be needed at runtime and</font><font color="#CCCCCC"> then</font>

101
00:04:46,600 --> 00:04:53,700
remove that<font color="#E5E5E5"> from the shed light from the</font>

102
00:04:49,090 --> 00:04:59,590
code module and the result code modules

103
00:04:53,700 --> 00:05:01,510
contained less code<font color="#E5E5E5"> so to</font><font color="#CCCCCC"> sum up we</font>

104
00:04:59,590 --> 00:05:03,700
bridge the information gap between the

105
00:05:01,510 --> 00:05:07,240
early stage<font color="#CCCCCC"> the comparison</font><font color="#E5E5E5"> compilation</font>

106
00:05:03,700 --> 00:05:09,880
stage and the later stage<font color="#CCCCCC"> the loading</font>

107
00:05:07,240 --> 00:05:13,930
stage of course<font color="#E5E5E5"> this approach has</font>

108
00:05:09,880 --> 00:05:16,810
challenges for<font color="#CCCCCC"> example at the load</font><font color="#E5E5E5"> time</font>

109
00:05:13,930 --> 00:05:18,419
you have to<font color="#CCCCCC"> determine the the</font>

110
00:05:16,810 --> 00:05:20,650
dependencies<font color="#CCCCCC"> between different modules</font>

111
00:05:18,419 --> 00:05:23,560
between program<font color="#CCCCCC"> and the shared libraries</font>

112
00:05:20,650 --> 00:05:25,330
and we share<font color="#CCCCCC"> like</font><font color="#E5E5E5"> those shell libraries</font>

113
00:05:23,560 --> 00:05:28,060
can meet<font color="#E5E5E5"> and other shared libraries and</font>

114
00:05:25,330 --> 00:05:32,140
then you have<font color="#E5E5E5"> statically unknown</font>

115
00:05:28,060 --> 00:05:36,010
information<font color="#E5E5E5"> such as the symbol by</font><font color="#CCCCCC"> simple</font>

116
00:05:32,140 --> 00:05:39,460
binding<font color="#E5E5E5"> information should such as for a</font>

117
00:05:36,010 --> 00:05:43,659
simple name which<font color="#E5E5E5"> definition in the code</font>

118
00:05:39,460 --> 00:05:46,510
module<font color="#CCCCCC"> will bind</font><font color="#E5E5E5"> to and then statically</font>

119
00:05:43,660 --> 00:05:50,110
unknown dependencies between the code

120
00:05:46,510 --> 00:05:53,950
module from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> use of code pointers and</font>

121
00:05:50,110 --> 00:05:57,460
indirect branches and<font color="#E5E5E5"> hanwen assembly</font>

122
00:05:53,950 --> 00:05:59,890
<font color="#CCCCCC">Henrick</font><font color="#E5E5E5"> handwritten assembly in the</font>

123
00:05:57,460 --> 00:06:02,229
program requires<font color="#CCCCCC"> additional handling</font>

124
00:05:59,890 --> 00:06:05,650
because the compiler chooses not to

125
00:06:02,229 --> 00:06:09,940
optimize the hand written assembly and

126
00:06:05,650 --> 00:06:13,659
send it directly<font color="#CCCCCC"> to the assembler to</font>

127
00:06:09,940 --> 00:06:17,169
<font color="#E5E5E5">lower</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> down</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> binary and another</font>

128
00:06:13,660 --> 00:06:22,030
type of<font color="#E5E5E5"> a known of challenge</font><font color="#CCCCCC"> that</font>

129
00:06:17,169 --> 00:06:24,520
introduces dependencies unknown at<font color="#E5E5E5"> at</font>

130
00:06:22,030 --> 00:06:27,340
the static stage is the use<font color="#CCCCCC"> of</font>

131
00:06:24,520 --> 00:06:29,500
dynamically<font color="#E5E5E5"> loaded shared libraries so</font>

132
00:06:27,340 --> 00:06:32,419
<font color="#E5E5E5">these shared libraries are loaded by</font><font color="#CCCCCC"> the</font>

133
00:06:29,500 --> 00:06:35,780
program<font color="#E5E5E5"> at runtime so</font><font color="#CCCCCC"> they may</font>

134
00:06:32,420 --> 00:06:38,330
use the part of the kill module that we

135
00:06:35,780 --> 00:06:41,690
have<font color="#CCCCCC"> already</font><font color="#E5E5E5"> removed by the loader</font><font color="#CCCCCC"> so</font>

136
00:06:38,330 --> 00:06:44,750
that also requires special handling<font color="#CCCCCC"> so</font>

137
00:06:41,690 --> 00:06:47,870
at the higher level<font color="#CCCCCC"> our system works</font>

138
00:06:44,750 --> 00:06:50,030
<font color="#CCCCCC">that follow we the first component the</font>

139
00:06:47,870 --> 00:06:55,040
piecewise compiler<font color="#E5E5E5"> take the source code</font>

140
00:06:50,030 --> 00:06:59,900
<font color="#E5E5E5">of the code module analyzes it and then</font>

141
00:06:55,040 --> 00:07:03,260
it produces<font color="#E5E5E5"> a dependency graph then it</font>

142
00:06:59,900 --> 00:07:07,159
writes this dependency graph<font color="#CCCCCC"> onto the</font>

143
00:07:03,260 --> 00:07:09,640
<font color="#E5E5E5">binary for that code module and then</font>

144
00:07:07,160 --> 00:07:13,280
when you<font color="#E5E5E5"> execute a program that requires</font>

145
00:07:09,640 --> 00:07:18,340
<font color="#E5E5E5">this code module the piecewise loader</font>

146
00:07:13,280 --> 00:07:21,679
<font color="#E5E5E5">will read this dependency graph it it's</font>

147
00:07:18,340 --> 00:07:25,280
it's written<font color="#E5E5E5"> on to an optional section</font>

148
00:07:21,680 --> 00:07:27,170
<font color="#E5E5E5">in your</font><font color="#CCCCCC"> er life file</font><font color="#E5E5E5"> so the piecewise</font>

149
00:07:25,280 --> 00:07:30,289
loader will read<font color="#E5E5E5"> this dependency graph</font>

150
00:07:27,170 --> 00:07:32,150
and use the<font color="#E5E5E5"> symbol binding information</font>

151
00:07:30,290 --> 00:07:34,640
to determine<font color="#CCCCCC"> which function in the code</font>

152
00:07:32,150 --> 00:07:40,070
module is required<font color="#CCCCCC"> by</font><font color="#E5E5E5"> the program</font><font color="#CCCCCC"> and</font>

153
00:07:34,640 --> 00:07:42,229
then what<font color="#E5E5E5"> other functions that</font><font color="#CCCCCC"> will</font>

154
00:07:40,070 --> 00:07:43,640
required by the program<font color="#E5E5E5"> by importing</font>

155
00:07:42,230 --> 00:07:46,550
certain function of the code module and

156
00:07:43,640 --> 00:07:49,159
then it removes the rest of the code

157
00:07:46,550 --> 00:07:51,560
<font color="#E5E5E5">that</font><font color="#CCCCCC"> will not then forget that the</font>

158
00:07:49,160 --> 00:07:54,050
program does<font color="#CCCCCC"> not need at runtime so the</font>

159
00:07:51,560 --> 00:07:59,630
result is the de bloated code module

160
00:07:54,050 --> 00:08:04,370
<font color="#E5E5E5">with less code in in the code module we</font>

161
00:07:59,630 --> 00:08:07,190
so this the framework does<font color="#CCCCCC"> provide</font>

162
00:08:04,370 --> 00:08:09,680
backwards compatibility<font color="#CCCCCC"> in two ways so</font>

163
00:08:07,190 --> 00:08:12,560
<font color="#E5E5E5">if you have an unmodified loader trying</font>

164
00:08:09,680 --> 00:08:14,960
to load a code module compiled by the

165
00:08:12,560 --> 00:08:16,340
<font color="#E5E5E5">piecewise loader it would just</font><font color="#CCCCCC"> ignore</font>

166
00:08:14,960 --> 00:08:19,549
the dependency graph<font color="#E5E5E5"> because it's</font>

167
00:08:16,340 --> 00:08:22,669
written<font color="#CCCCCC"> onto the an optional</font><font color="#E5E5E5"> your life</font>

168
00:08:19,550 --> 00:08:25,610
session so it doesn't<font color="#E5E5E5"> require to load</font>

169
00:08:22,670 --> 00:08:27,710
that session<font color="#E5E5E5"> on to the memory it will</font>

170
00:08:25,610 --> 00:08:30,740
ignore<font color="#E5E5E5"> it depends a graph and just load</font>

171
00:08:27,710 --> 00:08:34,789
the comas as usual<font color="#CCCCCC"> what happens if you</font>

172
00:08:30,740 --> 00:08:38,840
<font color="#E5E5E5">have the piecewise loader trying to load</font>

173
00:08:34,789 --> 00:08:40,480
an<font color="#E5E5E5"> OCO module that is not compiled by</font>

174
00:08:38,840 --> 00:08:42,730
the piecewise compiler then

175
00:08:40,480 --> 00:08:44,860
it was just detect that there's no

176
00:08:42,730 --> 00:08:46,770
existing<font color="#E5E5E5"> defensive graph in this</font>

177
00:08:44,860 --> 00:08:49,570
<font color="#E5E5E5">commercial and then just go ahead and</font>

178
00:08:46,770 --> 00:08:55,210
perform<font color="#E5E5E5"> the normal functionality</font><font color="#CCCCCC"> affirm</font>

179
00:08:49,570 --> 00:08:58,330
of the modify code<font color="#E5E5E5"> loader so let's take</font>

180
00:08:55,210 --> 00:09:01,000
a<font color="#E5E5E5"> look in into the first component of</font>

181
00:08:58,330 --> 00:09:04,540
our<font color="#E5E5E5"> framework so for the piecewise</font>

182
00:09:01,000 --> 00:09:08,050
compiler we take the source code of<font color="#CCCCCC"> the</font>

183
00:09:04,540 --> 00:09:12,040
code module generate the<font color="#E5E5E5"> initial version</font>

184
00:09:08,050 --> 00:09:14,229
<font color="#E5E5E5">of the code graph and there's missing</font>

185
00:09:12,040 --> 00:09:17,349
there's missing dependencies in this

186
00:09:14,230 --> 00:09:22,060
code graph we<font color="#CCCCCC"> will perform</font><font color="#E5E5E5"> code</font><font color="#CCCCCC"> point</font>

187
00:09:17,350 --> 00:09:25,450
analysis<font color="#CCCCCC"> we</font><font color="#E5E5E5"> implemented several</font>

188
00:09:22,060 --> 00:09:28,170
techniques for the for this stage we

189
00:09:25,450 --> 00:09:30,670
have<font color="#E5E5E5"> globalized coupon your scan</font>

190
00:09:28,170 --> 00:09:34,329
<font color="#E5E5E5">localize cope on your scan and point</font>

191
00:09:30,670 --> 00:09:39,280
<font color="#E5E5E5">analysis for C program for C++ program</font>

192
00:09:34,330 --> 00:09:43,570
we use an additional technique object

193
00:09:39,280 --> 00:09:46,290
sensitive analysis and then for Henry in

194
00:09:43,570 --> 00:09:49,290
line and<font color="#CCCCCC"> Henry in an assembly code that</font>

195
00:09:46,290 --> 00:09:53,110
we<font color="#E5E5E5"> discussed earlier</font><font color="#CCCCCC"> that need</font>

196
00:09:49,290 --> 00:09:55,510
additional handling we will<font color="#CCCCCC"> modify the</font>

197
00:09:53,110 --> 00:09:59,850
loader<font color="#E5E5E5"> modified the compiler to go</font>

198
00:09:55,510 --> 00:10:02,350
through them and determine detect the

199
00:09:59,850 --> 00:10:04,720
control flow relationship between the

200
00:10:02,350 --> 00:10:08,590
Henry<font color="#CCCCCC"> an assembly and the rest of the</font>

201
00:10:04,720 --> 00:10:10,240
<font color="#E5E5E5">code module to add the missing</font>

202
00:10:08,590 --> 00:10:11,980
dependency on to the program and<font color="#E5E5E5"> then</font>

203
00:10:10,240 --> 00:10:14,830
from the<font color="#E5E5E5"> cool graph we</font><font color="#CCCCCC"> would generate</font>

204
00:10:11,980 --> 00:10:17,170
<font color="#CCCCCC">the dependency graph and this dispenser</font>

205
00:10:14,830 --> 00:10:21,300
graph will be<font color="#E5E5E5"> written on to the binary</font>

206
00:10:17,170 --> 00:10:27,040
<font color="#E5E5E5">file so to give an example of</font><font color="#CCCCCC"> how this</font>

207
00:10:21,300 --> 00:10:29,589
how the piecewise compiler works<font color="#CCCCCC"> this is</font>

208
00:10:27,040 --> 00:10:32,949
<font color="#E5E5E5">the piece of code</font><font color="#CCCCCC"> that we got from we</font>

209
00:10:29,590 --> 00:10:35,620
<font color="#CCCCCC">abstracted from</font><font color="#E5E5E5"> muscle</font><font color="#CCCCCC"> Lipsy that</font>

210
00:10:32,950 --> 00:10:38,260
handles file input<font color="#CCCCCC"> and output so you</font>

211
00:10:35,620 --> 00:10:42,150
<font color="#E5E5E5">have two functions</font><font color="#CCCCCC"> on top FD open and</font>

212
00:10:38,260 --> 00:10:46,840
open mem stream each function will

213
00:10:42,150 --> 00:10:49,089
generate an object<font color="#E5E5E5"> of file of type file</font>

214
00:10:46,840 --> 00:10:52,209
<font color="#E5E5E5">and then this file</font>

215
00:10:49,089 --> 00:10:55,300
this type file<font color="#CCCCCC"> file struct type you have</font>

216
00:10:52,209 --> 00:10:58,089
<font color="#CCCCCC">a function pointer</font><font color="#E5E5E5"> called</font><font color="#CCCCCC"> right and</font>

217
00:10:55,300 --> 00:11:00,040
according<font color="#E5E5E5"> to the type of the</font><font color="#CCCCCC"> object the</font>

218
00:10:58,089 --> 00:11:04,540
right function<font color="#E5E5E5"> pointer will</font><font color="#CCCCCC"> be assigned</font>

219
00:11:00,040 --> 00:11:07,209
to an<font color="#CCCCCC"> appropriate function</font><font color="#E5E5E5"> pointer to</font>

220
00:11:04,540 --> 00:11:09,819
handle the writing according<font color="#E5E5E5"> to the file</font>

221
00:11:07,209 --> 00:11:12,399
type<font color="#E5E5E5"> so if you have a be open or assign</font>

222
00:11:09,819 --> 00:11:14,740
stdio right<font color="#E5E5E5"> which did a function the</font>

223
00:11:12,399 --> 00:11:16,269
<font color="#CCCCCC">handle</font><font color="#E5E5E5"> still writing to regular file and</font>

224
00:11:14,740 --> 00:11:18,220
if you have mem stream then it was

225
00:11:16,269 --> 00:11:21,430
<font color="#E5E5E5">assign MS right which will</font><font color="#CCCCCC"> handle right</font>

226
00:11:18,220 --> 00:11:22,389
<font color="#CCCCCC">into the mem stream file file type</font><font color="#E5E5E5"> so</font>

227
00:11:21,430 --> 00:11:25,479
when you close the file

228
00:11:22,389 --> 00:11:28,029
<font color="#CCCCCC">the the</font><font color="#E5E5E5"> function pointed to by the right</font>

229
00:11:25,480 --> 00:11:30,399
pointer will be<font color="#E5E5E5"> invoked so this we will</font>

230
00:11:28,029 --> 00:11:32,709
<font color="#CCCCCC">have an indirect branch in the third</font>

231
00:11:30,399 --> 00:11:34,480
function<font color="#CCCCCC"> the</font><font color="#E5E5E5"> close file function so the</font>

232
00:11:32,709 --> 00:11:36,579
initial version of the call<font color="#E5E5E5"> graph you</font>

233
00:11:34,480 --> 00:11:40,089
can see<font color="#E5E5E5"> on the right hand</font><font color="#CCCCCC"> side it's</font>

234
00:11:36,579 --> 00:11:41,949
missing<font color="#E5E5E5"> the targets for</font><font color="#CCCCCC"> the the</font>

235
00:11:40,089 --> 00:11:46,029
interpret depends a for the indirect

236
00:11:41,949 --> 00:11:48,370
branch in<font color="#E5E5E5"> close file which we know that</font>

237
00:11:46,029 --> 00:11:51,910
<font color="#CCCCCC">the two possible targets are sdai all</font>

238
00:11:48,370 --> 00:11:58,029
right and<font color="#E5E5E5"> MS right so the first approach</font>

239
00:11:51,910 --> 00:12:01,569
<font color="#CCCCCC">global</font><font color="#E5E5E5"> scan we retain all the</font><font color="#CCCCCC"> address</font>

240
00:11:58,029 --> 00:12:04,749
<font color="#E5E5E5">taken functions as global as part of the</font>

241
00:12:01,569 --> 00:12:09,128
global dependency so because<font color="#E5E5E5"> of the</font>

242
00:12:04,749 --> 00:12:11,679
address<font color="#E5E5E5"> taken functions are valid target</font>

243
00:12:09,129 --> 00:12:14,050
<font color="#E5E5E5">of the an indirect branch</font><font color="#CCCCCC"> so you can see</font>

244
00:12:11,679 --> 00:12:16,269
we add the two functions onto<font color="#E5E5E5"> the</font><font color="#CCCCCC"> onto</font>

245
00:12:14,050 --> 00:12:18,969
<font color="#CCCCCC">the graph and assign Amezcua by</font>

246
00:12:16,269 --> 00:12:22,389
dependency and they will be<font color="#E5E5E5"> retained at</font>

247
00:12:18,970 --> 00:12:26,410
all time<font color="#E5E5E5"> the next technique for analysis</font>

248
00:12:22,389 --> 00:12:28,360
we<font color="#CCCCCC"> for point on us as we are able to</font>

249
00:12:26,410 --> 00:12:30,189
detect the two possible<font color="#E5E5E5"> targets for the</font>

250
00:12:28,360 --> 00:12:33,699
<font color="#E5E5E5">end bread and direct branch in</font><font color="#CCCCCC"> close</font>

251
00:12:30,189 --> 00:12:36,610
<font color="#E5E5E5">file or stdio right and</font><font color="#CCCCCC"> MS right and go</font>

252
00:12:33,699 --> 00:12:41,160
ahead and put that in the in the graph

253
00:12:36,610 --> 00:12:46,540
and for<font color="#E5E5E5"> the next for the final technique</font>

254
00:12:41,160 --> 00:12:49,929
local ice can we so the observation is

255
00:12:46,540 --> 00:12:54,329
that<font color="#E5E5E5"> we only retain an address taken</font>

256
00:12:49,929 --> 00:12:56,709
function if the at least<font color="#E5E5E5"> one function</font>

257
00:12:54,329 --> 00:12:59,260
<font color="#CCCCCC">there's at least one function</font><font color="#E5E5E5"> that</font>

258
00:12:56,710 --> 00:13:01,360
the address<font color="#E5E5E5"> of that function so for</font>

259
00:12:59,260 --> 00:13:05,980
<font color="#CCCCCC">example if you look at</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> FDA open</font>

260
00:13:01,360 --> 00:13:09,610
function<font color="#CCCCCC"> you can see at the the stdio</font>

261
00:13:05,980 --> 00:13:11,680
<font color="#CCCCCC">right function</font><font color="#E5E5E5"> has its address assigned</font>

262
00:13:09,610 --> 00:13:13,480
to<font color="#E5E5E5"> the right function pointer so the</font>

263
00:13:11,680 --> 00:13:15,550
<font color="#E5E5E5">address taken function of</font><font color="#CCCCCC"> SDR</font><font color="#E5E5E5"> right</font>

264
00:13:13,480 --> 00:13:17,920
happens<font color="#E5E5E5"> inside the open function so if</font>

265
00:13:15,550 --> 00:13:20,229
you include if you retain at the open

266
00:13:17,920 --> 00:13:23,050
<font color="#CCCCCC">function in the memory then you will</font>

267
00:13:20,230 --> 00:13:26,470
also<font color="#E5E5E5"> retain</font><font color="#CCCCCC"> SDL right</font><font color="#E5E5E5"> function in the</font>

268
00:13:23,050 --> 00:13:28,540
memory<font color="#E5E5E5"> so we add that</font><font color="#CCCCCC"> information to to</font>

269
00:13:26,470 --> 00:13:30,370
the graph<font color="#E5E5E5"> that we're gonna write to the</font>

270
00:13:28,540 --> 00:13:32,790
binary<font color="#E5E5E5"> as you can see here we add that</font>

271
00:13:30,370 --> 00:13:35,140
information<font color="#CCCCCC"> and we do the similar thing</font>

272
00:13:32,790 --> 00:13:38,230
<font color="#CCCCCC">to the other</font><font color="#E5E5E5"> function the open</font><font color="#CCCCCC"> mem</font>

273
00:13:35,140 --> 00:13:39,850
stream function we add<font color="#E5E5E5"> MS right to open</font>

274
00:13:38,230 --> 00:13:41,850
<font color="#CCCCCC">mention functions so that if you load</font>

275
00:13:39,850 --> 00:13:45,910
open mem stream then<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to load</font>

276
00:13:41,850 --> 00:13:48,270
<font color="#CCCCCC">msy function</font><font color="#E5E5E5"> so at a</font><font color="#CCCCCC"> later stage</font><font color="#E5E5E5"> the</font>

277
00:13:45,910 --> 00:13:53,920
<font color="#CCCCCC">piecewise loader will read</font><font color="#E5E5E5"> this</font>

278
00:13:48,270 --> 00:13:55,569
dependency graph<font color="#E5E5E5"> perform it does two</font>

279
00:13:53,920 --> 00:13:58,780
things<font color="#E5E5E5"> it performs the regular</font>

280
00:13:55,570 --> 00:14:03,640
functionality of the of the loader and

281
00:13:58,780 --> 00:14:05,829
it also be<font color="#CCCCCC"> bloat the by the program so</font>

282
00:14:03,640 --> 00:14:09,420
it reads the<font color="#E5E5E5"> Pennsy graph from the</font>

283
00:14:05,830 --> 00:14:13,030
<font color="#E5E5E5">binary preloads</font><font color="#CCCCCC"> all the shared libraries</font>

284
00:14:09,420 --> 00:14:15,849
<font color="#CCCCCC">both gathered the symbol binding</font>

285
00:14:13,030 --> 00:14:18,730
<font color="#CCCCCC">information at</font><font color="#E5E5E5"> low time to determine</font>

286
00:14:15,850 --> 00:14:21,730
which functions to keep and which

287
00:14:18,730 --> 00:14:23,710
functions<font color="#E5E5E5"> stew discard</font><font color="#CCCCCC"> so after that</font>

288
00:14:21,730 --> 00:14:26,740
stage it will go ahead<font color="#E5E5E5"> and remove the</font>

289
00:14:23,710 --> 00:14:29,620
code from<font color="#CCCCCC"> the binary</font><font color="#E5E5E5"> and the result is</font>

290
00:14:26,740 --> 00:14:31,030
the<font color="#E5E5E5"> dip loaded program so if in a in</font>

291
00:14:29,620 --> 00:14:33,760
this<font color="#E5E5E5"> example from the right you can see</font>

292
00:14:31,030 --> 00:14:36,880
<font color="#E5E5E5">that the program uses the function C and</font>

293
00:14:33,760 --> 00:14:38,740
C if you're allowed<font color="#E5E5E5"> to see is if you see</font>

294
00:14:36,880 --> 00:14:41,439
<font color="#CCCCCC">the</font><font color="#E5E5E5"> dependency</font><font color="#CCCCCC"> graph down here if</font><font color="#E5E5E5"> you</font>

295
00:14:38,740 --> 00:14:43,840
don't see you have to love<font color="#CCCCCC"> D</font><font color="#E5E5E5"> and so in a</font>

296
00:14:41,440 --> 00:14:48,250
memory only<font color="#E5E5E5"> C and D retain the rest of</font>

297
00:14:43,840 --> 00:14:49,780
the code will<font color="#CCCCCC"> be removed if you so what</font>

298
00:14:48,250 --> 00:14:53,850
is the relationship<font color="#E5E5E5"> between</font><font color="#CCCCCC"> c fi and</font>

299
00:14:49,780 --> 00:14:58,390
piecewise<font color="#E5E5E5"> so</font><font color="#CCCCCC"> piece piecewise is</font>

300
00:14:53,850 --> 00:15:00,730
<font color="#E5E5E5">complementary to</font><font color="#CCCCCC"> ca</font><font color="#E5E5E5"> by in a sense that</font>

301
00:14:58,390 --> 00:15:02,410
it reduces the attack<font color="#E5E5E5"> service by</font>

302
00:15:00,730 --> 00:15:07,680
removing the<font color="#CCCCCC"> induced code from the</font>

303
00:15:02,410 --> 00:15:12,480
memory<font color="#E5E5E5"> and it moreover</font>

304
00:15:07,680 --> 00:15:15,020
it prevents<font color="#E5E5E5"> the attacker from using the</font>

305
00:15:12,480 --> 00:15:22,020
removed code<font color="#E5E5E5"> even after the compromise</font>

306
00:15:15,020 --> 00:15:24,660
<font color="#E5E5E5">happens</font><font color="#CCCCCC"> so while most CFI solutions</font><font color="#E5E5E5"> does</font>

307
00:15:22,020 --> 00:15:26,910
<font color="#E5E5E5">not consider</font><font color="#CCCCCC"> that post</font><font color="#E5E5E5"> compromised</font>

308
00:15:24,660 --> 00:15:33,029
protection<font color="#E5E5E5"> so if we use to the solutions</font>

309
00:15:26,910 --> 00:15:34,860
<font color="#E5E5E5">together it will</font><font color="#CCCCCC"> improve provide it will</font>

310
00:15:33,029 --> 00:15:38,339
improve<font color="#CCCCCC"> the security impact of</font><font color="#E5E5E5"> your</font>

311
00:15:34,860 --> 00:15:42,480
system<font color="#E5E5E5"> for evaluation we evaluate our</font>

312
00:15:38,339 --> 00:15:45,270
framework for<font color="#E5E5E5"> compile time overhead how</font>

313
00:15:42,480 --> 00:15:50,100
much of the coke can<font color="#E5E5E5"> piecewise remove</font>

314
00:15:45,270 --> 00:15:53,010
and why<font color="#CCCCCC"> that is</font><font color="#E5E5E5"> curium</font><font color="#CCCCCC"> packs so for</font>

315
00:15:50,100 --> 00:15:55,170
compilation we compiled a comfo<font color="#CCCCCC"> compile</font>

316
00:15:53,010 --> 00:15:58,050
<font color="#CCCCCC">time overhead we compiled a number of</font>

317
00:15:55,170 --> 00:15:59,849
several shared libraries and measure the

318
00:15:58,050 --> 00:16:02,670
time the time<font color="#E5E5E5"> difference that it takes</font>

319
00:15:59,850 --> 00:16:04,740
to compile<font color="#CCCCCC"> these shared libraries</font><font color="#E5E5E5"> as we</font>

320
00:16:02,670 --> 00:16:06,029
can see<font color="#E5E5E5"> point analysis takes the most</font>

321
00:16:04,740 --> 00:16:08,010
time to compile<font color="#CCCCCC"> two shared libraries</font>

322
00:16:06,029 --> 00:16:11,970
while<font color="#E5E5E5"> khlo-balls can</font><font color="#CCCCCC"> take the</font><font color="#E5E5E5"> least time</font>

323
00:16:08,010 --> 00:16:17,100
<font color="#E5E5E5">and</font><font color="#CCCCCC"> localize point of scan is in the</font>

324
00:16:11,970 --> 00:16:20,510
middle<font color="#CCCCCC"> so to compare to show how</font><font color="#E5E5E5"> much of</font>

325
00:16:17,100 --> 00:16:23,279
code that<font color="#CCCCCC"> piecewise is able to to remove</font>

326
00:16:20,510 --> 00:16:28,020
we can we're comparing the<font color="#CCCCCC"> amount of</font>

327
00:16:23,279 --> 00:16:30,720
code that piecewise can remove<font color="#E5E5E5"> from the</font>

328
00:16:28,020 --> 00:16:32,699
code module versus the<font color="#E5E5E5"> amount of code</font>

329
00:16:30,720 --> 00:16:34,830
that static linking can remove them from

330
00:16:32,700 --> 00:16:37,980
the code module<font color="#E5E5E5"> why static linking</font>

331
00:16:34,830 --> 00:16:40,290
because static linking the program

332
00:16:37,980 --> 00:16:42,270
produced by static linking only contains

333
00:16:40,290 --> 00:16:45,329
the<font color="#CCCCCC"> code that the program actually</font>

334
00:16:42,270 --> 00:16:48,120
requires and it provides the upper bound

335
00:16:45,330 --> 00:16:51,510
for for how much<font color="#E5E5E5"> of the code</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font>

336
00:16:48,120 --> 00:16:53,940
remove so as you can<font color="#E5E5E5"> see we apply both</font>

337
00:16:51,510 --> 00:16:57,480
of the piecewise and static linking<font color="#CCCCCC"> on</font>

338
00:16:53,940 --> 00:16:59,310
<font color="#CCCCCC">to several programs we have the minimal</font>

339
00:16:57,480 --> 00:17:02,130
program we have the<font color="#CCCCCC"> coil utils program</font>

340
00:16:59,310 --> 00:17:06,869
and then you have the benchmarks from

341
00:17:02,130 --> 00:17:09,449
<font color="#E5E5E5">specs Evo 2006 and on average we perform</font>

342
00:17:06,869 --> 00:17:11,369
<font color="#E5E5E5">compare ibly comparable to the</font>

343
00:17:09,449 --> 00:17:13,350
performance of<font color="#E5E5E5"> piecewise is comparable</font>

344
00:17:11,369 --> 00:17:16,948
to static linking with<font color="#CCCCCC"> the difference of</font>

345
00:17:13,349 --> 00:17:18,079
only at most<font color="#E5E5E5"> 5% like we remove at most</font>

346
00:17:16,949 --> 00:17:21,049
<font color="#CCCCCC">PI percent less</font>

347
00:17:18,079 --> 00:17:24,980
static linking applying piecewise to<font color="#E5E5E5"> a</font>

348
00:17:21,049 --> 00:17:29,450
<font color="#E5E5E5">real-world program specifically curl on</font>

349
00:17:24,980 --> 00:17:32,330
average we were<font color="#CCCCCC"> able to remove around</font>

350
00:17:29,450 --> 00:17:37,610
<font color="#E5E5E5">40% of</font><font color="#CCCCCC"> the shared libraries code all the</font>

351
00:17:32,330 --> 00:17:41,360
<font color="#CCCCCC">shared libraries that curl uses</font><font color="#E5E5E5"> what</font>

352
00:17:37,610 --> 00:17:44,059
about scary impacts of deep loading<font color="#E5E5E5"> one</font>

353
00:17:41,360 --> 00:17:47,269
observable<font color="#CCCCCC"> security impact of</font><font color="#E5E5E5"> deploying</font>

354
00:17:44,059 --> 00:17:50,240
<font color="#E5E5E5">is gadget reduction for for the shared</font>

355
00:17:47,269 --> 00:17:54,019
library<font color="#E5E5E5"> it's a for</font><font color="#CCCCCC"> example if we apply</font>

356
00:17:50,240 --> 00:17:59,049
piecewise for<font color="#CCCCCC"> Lipsy for</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> variety of</font>

357
00:17:54,019 --> 00:18:03,440
programs<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> we observed that</font><font color="#CCCCCC"> after</font>

358
00:17:59,049 --> 00:18:07,279
the bloating the the binaries<font color="#CCCCCC"> we found</font>

359
00:18:03,440 --> 00:18:10,340
fewer gadgets<font color="#E5E5E5"> in the in the third module</font>

360
00:18:07,279 --> 00:18:15,529
<font color="#E5E5E5">so on average as you can see we were</font>

361
00:18:10,340 --> 00:18:18,470
able<font color="#E5E5E5"> to remove 70</font><font color="#CCCCCC"> 72 % gadgets from from</font>

362
00:18:15,529 --> 00:18:23,720
<font color="#CCCCCC">julep from dillio T</font><font color="#E5E5E5"> for quality programs</font>

363
00:18:18,470 --> 00:18:26,659
<font color="#E5E5E5">and 73% of gadgets from a specific spy</font>

364
00:18:23,720 --> 00:18:30,200
CPU benchmarks<font color="#E5E5E5"> and when you remove those</font>

365
00:18:26,659 --> 00:18:33,350
code you<font color="#E5E5E5"> also remove the bugs down in</font>

366
00:18:30,200 --> 00:18:35,539
the code<font color="#CCCCCC"> so for if we take</font><font color="#E5E5E5"> a look at the</font>

367
00:18:33,350 --> 00:18:37,969
two shared libraries<font color="#E5E5E5"> that we were</font>

368
00:18:35,539 --> 00:18:40,309
considering<font color="#CCCCCC"> here</font><font color="#E5E5E5"> Z</font><font color="#CCCCCC"> live C and liquor</font>

369
00:18:37,970 --> 00:18:44,960
among the the<font color="#E5E5E5"> code that we actually</font>

370
00:18:40,309 --> 00:18:49,149
remove we found that there are we also

371
00:18:44,960 --> 00:18:52,730
removed these posted vulnerabilities

372
00:18:49,149 --> 00:18:57,199
along with the program<font color="#CCCCCC"> that uses that</font>

373
00:18:52,730 --> 00:18:59,899
and the vulnerability<font color="#E5E5E5"> types once you</font>

374
00:18:57,200 --> 00:19:01,880
remove this vulnerability<font color="#E5E5E5"> even if the</font>

375
00:18:59,899 --> 00:19:06,529
program<font color="#E5E5E5"> is compromised the attacker</font>

376
00:19:01,880 --> 00:19:11,600
cannot use the vulnerability to to their

377
00:19:06,529 --> 00:19:13,700
<font color="#CCCCCC">advantage and we release the artifact of</font>

378
00:19:11,600 --> 00:19:16,189
the<font color="#E5E5E5"> piecewise to chain it</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> a dark</font><font color="#CCCCCC"> game</font>

379
00:19:13,700 --> 00:19:17,750
matching you can find it on<font color="#E5E5E5"> our github</font>

380
00:19:16,190 --> 00:19:19,880
account<font color="#CCCCCC"> and if</font><font color="#E5E5E5"> you have any questions</font>

381
00:19:17,750 --> 00:19:24,039
you<font color="#E5E5E5"> can contact me and I'm also taking</font>

382
00:19:19,880 --> 00:19:24,039
I'm also happy<font color="#E5E5E5"> to take questions there</font>

383
00:19:24,060 --> 00:19:36,220
<font color="#CCCCCC">hey questions</font><font color="#E5E5E5"> hi John Criswell</font>

384
00:19:33,250 --> 00:19:38,410
University of Rochester<font color="#CCCCCC"> nice work but</font>

385
00:19:36,220 --> 00:19:40,210
one<font color="#E5E5E5"> question I have</font><font color="#CCCCCC"> is when you're</font>

386
00:19:38,410 --> 00:19:41,440
discussing<font color="#E5E5E5"> the security of an offense</font>

387
00:19:40,210 --> 00:19:43,060
<font color="#E5E5E5">you mentioned that it removes</font>

388
00:19:41,440 --> 00:19:44,620
vulnerabilities correct

389
00:19:43,060 --> 00:19:46,690
and that doesn't<font color="#CCCCCC"> make</font><font color="#E5E5E5"> sense</font><font color="#CCCCCC"> to me</font>

390
00:19:44,620 --> 00:19:49,209
because<font color="#E5E5E5"> you're removing code that isn't</font>

391
00:19:46,690 --> 00:19:51,250
<font color="#E5E5E5">used so if the code is</font><font color="#CCCCCC"> not reachable in</font>

392
00:19:49,210 --> 00:19:54,940
the call graph then how can<font color="#CCCCCC"> it be</font><font color="#E5E5E5"> used</font>

393
00:19:51,250 --> 00:19:56,770
to exploit the program interesting

394
00:19:54,940 --> 00:20:01,210
<font color="#CCCCCC">questions thank</font><font color="#E5E5E5"> you</font>

395
00:19:56,770 --> 00:20:03,430
so the<font color="#E5E5E5"> code we removed is not used but</font>

396
00:20:01,210 --> 00:20:06,520
if the program is compromised<font color="#CCCCCC"> the</font>

397
00:20:03,430 --> 00:20:08,080
attacker will be able to use<font color="#E5E5E5"> that code</font>

398
00:20:06,520 --> 00:20:11,370
<font color="#E5E5E5">because they can transfer the control</font>

399
00:20:08,080 --> 00:20:14,260
<font color="#E5E5E5">flow tool to the end to remove code so</font>

400
00:20:11,370 --> 00:20:16,899
they can be<font color="#E5E5E5"> used to get just found</font><font color="#CCCCCC"> into</font>

401
00:20:14,260 --> 00:20:19,600
the<font color="#E5E5E5"> Indian useful as well so correct but</font>

402
00:20:16,900 --> 00:20:21,370
you<font color="#CCCCCC"> were also that part</font><font color="#E5E5E5"> I at least to</font>

403
00:20:19,600 --> 00:20:22,929
some degree<font color="#E5E5E5"> agree with right</font><font color="#CCCCCC"> I think</font>

404
00:20:21,370 --> 00:20:24,550
<font color="#CCCCCC">that's I think that</font><font color="#E5E5E5"> requires more</font>

405
00:20:22,930 --> 00:20:26,650
evaluation but that's another kettle of

406
00:20:24,550 --> 00:20:28,780
fish<font color="#CCCCCC"> what I'm</font><font color="#E5E5E5"> asking about is when</font>

407
00:20:26,650 --> 00:20:31,720
<font color="#E5E5E5">you're removing vulnerabilities you're</font>

408
00:20:28,780 --> 00:20:33,430
removing vulnerable code code with

409
00:20:31,720 --> 00:20:35,320
buffer overflows or<font color="#E5E5E5"> things right so</font><font color="#CCCCCC"> the</font>

410
00:20:33,430 --> 00:20:38,110
slide that<font color="#CCCCCC"> you had with</font><font color="#E5E5E5"> the CVE numbers</font>

411
00:20:35,320 --> 00:20:40,750
<font color="#E5E5E5">right you're removing code that's not</font>

412
00:20:38,110 --> 00:20:42,580
<font color="#E5E5E5">reachable therefore that cannot use to</font>

413
00:20:40,750 --> 00:20:45,370
exploit the program you're removing code

414
00:20:42,580 --> 00:20:48,550
that<font color="#CCCCCC"> could</font><font color="#E5E5E5"> be used post exploit right</font>

415
00:20:45,370 --> 00:20:50,790
but you're<font color="#E5E5E5"> not removing code with</font>

416
00:20:48,550 --> 00:20:52,870
exploits<font color="#E5E5E5"> because they're not reachable</font>

417
00:20:50,790 --> 00:20:54,790
<font color="#E5E5E5">so it's not clear to</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> that</font>

418
00:20:52,870 --> 00:21:04,209
<font color="#CCCCCC">actually improves</font><font color="#E5E5E5"> the security</font><font color="#CCCCCC"> of the</font>

419
00:20:54,790 --> 00:21:08,470
program okay<font color="#CCCCCC"> if I understand</font><font color="#E5E5E5"> your</font>

420
00:21:04,210 --> 00:21:12,460
<font color="#CCCCCC">question right so the vulnerability can</font>

421
00:21:08,470 --> 00:21:14,830
be used here<font color="#CCCCCC"> it can</font><font color="#E5E5E5"> be used to first</font>

422
00:21:12,460 --> 00:21:18,520
take control of<font color="#E5E5E5"> the program or it can be</font>

423
00:21:14,830 --> 00:21:21,159
and it<font color="#E5E5E5"> can be used to perform further</font>

424
00:21:18,520 --> 00:21:23,620
attack after<font color="#CCCCCC"> you compromise</font><font color="#E5E5E5"> if you ask</font>

425
00:21:21,160 --> 00:21:26,200
you to<font color="#CCCCCC"> taken control</font><font color="#E5E5E5"> of the program so</font>

426
00:21:23,620 --> 00:21:28,969
<font color="#E5E5E5">we prevent the using of these four</font>

427
00:21:26,200 --> 00:21:31,940
abilities even if the

428
00:21:28,970 --> 00:21:34,299
<font color="#E5E5E5">has already</font><font color="#CCCCCC"> happened so some of the</font>

429
00:21:31,940 --> 00:21:39,440
voter base can<font color="#E5E5E5"> be used to perform a</font>

430
00:21:34,299 --> 00:21:41,179
<font color="#E5E5E5">denial of</font><font color="#CCCCCC"> service attack so are you</font>

431
00:21:39,440 --> 00:21:43,460
saying then the<font color="#CCCCCC"> CV ease</font><font color="#E5E5E5"> that you remove</font>

432
00:21:41,179 --> 00:21:48,770
that<font color="#E5E5E5"> you you remove the code that the</font>

433
00:21:43,460 --> 00:21:50,570
attack uses in the CVE<font color="#E5E5E5"> okay perhaps</font><font color="#CCCCCC"> we</font>

434
00:21:48,770 --> 00:21:52,870
<font color="#CCCCCC">should take this offline</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font>

435
00:21:50,570 --> 00:21:52,870
thank you

436
00:21:56,419 --> 00:22:10,909
I have two questions first so as I

437
00:22:08,210 --> 00:22:13,190
understand how<font color="#E5E5E5"> it works it's like when</font>

438
00:22:10,909 --> 00:22:15,950
<font color="#E5E5E5">one application needs for example</font><font color="#CCCCCC"> Ipsy</font>

439
00:22:13,190 --> 00:22:18,470
<font color="#CCCCCC">and it's dynamically linked against</font>

440
00:22:15,950 --> 00:22:20,809
<font color="#E5E5E5">hypsi and another application</font><font color="#CCCCCC"> is also</font>

441
00:22:18,470 --> 00:22:24,080
run on the<font color="#CCCCCC"> system that also</font><font color="#E5E5E5"> uses</font><font color="#CCCCCC"> Lipsey</font>

442
00:22:20,809 --> 00:22:28,280
yes<font color="#E5E5E5"> then lips ears</font><font color="#CCCCCC"> only loaded</font><font color="#E5E5E5"> one once</font>

443
00:22:24,080 --> 00:22:30,740
in the memory right<font color="#E5E5E5"> so basically with</font>

444
00:22:28,280 --> 00:22:35,870
your<font color="#E5E5E5"> technique</font><font color="#CCCCCC"> Lipsy needs to be</font><font color="#E5E5E5"> loaded</font>

445
00:22:30,740 --> 00:22:38,179
twice<font color="#E5E5E5"> because the code that is</font><font color="#CCCCCC"> not used</font>

446
00:22:35,870 --> 00:22:41,928
and one application<font color="#CCCCCC"> as we moved from the</font>

447
00:22:38,179 --> 00:22:43,760
loaded<font color="#E5E5E5"> lips em1</font><font color="#CCCCCC"> address space and other</font>

448
00:22:41,929 --> 00:22:45,770
code that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> not used and the other</font>

449
00:22:43,760 --> 00:22:48,320
application<font color="#CCCCCC"> is he moved from lip see and</font>

450
00:22:45,770 --> 00:22:50,480
the other garden space so<font color="#E5E5E5"> Linux cannot</font>

451
00:22:48,320 --> 00:22:53,240
share<font color="#CCCCCC"> the memory between</font><font color="#E5E5E5"> the two other</font>

452
00:22:50,480 --> 00:22:58,870
spaces anymore<font color="#E5E5E5"> so your memory usage will</font>

453
00:22:53,240 --> 00:22:58,870
go up per application<font color="#CCCCCC"> that you use right</font>

454
00:22:59,110 --> 00:23:08,510
so your question is<font color="#E5E5E5"> a memory the memory</font>

455
00:23:05,000 --> 00:23:11,780
usage<font color="#CCCCCC"> because Lipsy will be needed will</font>

456
00:23:08,510 --> 00:23:14,240
be loaded twice<font color="#CCCCCC"> in parallel when two</font>

457
00:23:11,780 --> 00:23:16,639
applications are run<font color="#CCCCCC"> in parallel on a</font>

458
00:23:14,240 --> 00:23:18,740
system<font color="#E5E5E5"> the</font><font color="#CCCCCC"> nutiva below that twice</font>

459
00:23:16,640 --> 00:23:22,960
<font color="#CCCCCC">because other code will be</font><font color="#E5E5E5"> removed from</font>

460
00:23:18,740 --> 00:23:22,960
one instance<font color="#E5E5E5"> and nipsey versus the other</font>

461
00:23:23,230 --> 00:23:27,890
okay

462
00:23:24,799 --> 00:23:32,139
that is there is memory overhead because

463
00:23:27,890 --> 00:23:34,330
<font color="#E5E5E5">when you write</font>

464
00:23:32,140 --> 00:23:37,809
<font color="#CCCCCC">Lipsy which is shared between</font><font color="#E5E5E5"> across</font>

465
00:23:34,330 --> 00:23:40,299
processes<font color="#E5E5E5"> right you create a you write</font>

466
00:23:37,809 --> 00:23:42,760
to some certain pages of<font color="#E5E5E5"> Lipsy</font>

467
00:23:40,299 --> 00:23:46,540
for for this process you so you have to

468
00:23:42,760 --> 00:23:48,520
<font color="#E5E5E5">create a separate copy of that page for</font>

469
00:23:46,540 --> 00:23:49,840
<font color="#E5E5E5">the program in your business this is</font>

470
00:23:48,520 --> 00:23:52,270
only<font color="#E5E5E5"> bit copy-on-write</font>

471
00:23:49,840 --> 00:23:55,090
<font color="#CCCCCC">if</font><font color="#E5E5E5"> you write data but</font><font color="#CCCCCC"> you say that</font>

472
00:23:52,270 --> 00:23:58,770
<font color="#CCCCCC">remove coat and coat is</font><font color="#E5E5E5"> read-only and go</font>

473
00:23:55,090 --> 00:23:58,770
to shared between the<font color="#CCCCCC"> two processes</font>

474
00:24:13,340 --> 00:24:18,499
okay<font color="#E5E5E5"> okay that wasn't entirely clear and</font>

475
00:24:16,519 --> 00:24:21,950
I<font color="#E5E5E5"> think it would be</font><font color="#CCCCCC"> also that's my</font>

476
00:24:18,499 --> 00:24:23,870
second question<font color="#E5E5E5"> it's more</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> a mark I</font>

477
00:24:21,950 --> 00:24:26,799
<font color="#E5E5E5">think it would be interesting to also</font>

478
00:24:23,870 --> 00:24:29,570
map the load time overhead<font color="#E5E5E5"> because I</font>

479
00:24:26,799 --> 00:24:30,769
assume that<font color="#E5E5E5"> your technique on one side</font>

480
00:24:29,570 --> 00:24:32,899
has a compiler

481
00:24:30,769 --> 00:24:35,059
<font color="#CCCCCC">compile-time</font><font color="#E5E5E5"> overhead but on the other</font>

482
00:24:32,899 --> 00:24:37,219
<font color="#E5E5E5">side the dynamic loader will also need</font>

483
00:24:35,059 --> 00:24:40,519
<font color="#E5E5E5">some more time to</font><font color="#CCCCCC"> note the application</font>

484
00:24:37,220 --> 00:24:42,919
in memory<font color="#E5E5E5"> because it needs to</font><font color="#CCCCCC"> process</font>

485
00:24:40,519 --> 00:24:44,929
the dependency graph<font color="#E5E5E5"> and stuff and this</font>

486
00:24:42,919 --> 00:24:47,289
will certainly<font color="#E5E5E5"> have an impact when many</font>

487
00:24:44,929 --> 00:24:51,139
applications are<font color="#E5E5E5"> started on one system</font>

488
00:24:47,289 --> 00:24:54,590
<font color="#CCCCCC">assume so it would be nice to</font><font color="#E5E5E5"> see a</font>

489
00:24:51,139 --> 00:24:57,619
graph of the<font color="#E5E5E5"> time</font><font color="#CCCCCC"> overheads yes there is</font>

490
00:24:54,590 --> 00:25:00,549
<font color="#CCCCCC">low time overhead</font><font color="#E5E5E5"> we also discussed that</font>

491
00:24:57,619 --> 00:25:03,860
in details<font color="#E5E5E5"> in the paper but I can</font>

492
00:25:00,549 --> 00:25:06,408
contribute some numbers for low time

493
00:25:03,860 --> 00:25:08,928
over head<font color="#E5E5E5"> we measure</font><font color="#CCCCCC"> four quarters</font>

494
00:25:06,409 --> 00:25:12,590
<font color="#E5E5E5">program</font><font color="#CCCCCC"> for spec CPU CPU</font><font color="#E5E5E5"> program and for</font>

495
00:25:08,929 --> 00:25:14,389
<font color="#E5E5E5">the curl program so long time we</font>

496
00:25:12,590 --> 00:25:17,299
<font color="#CCCCCC">introduced</font><font color="#E5E5E5"> four</font><font color="#CCCCCC"> coils we introduced an</font>

497
00:25:14,389 --> 00:25:18,559
additional<font color="#CCCCCC"> 20</font><font color="#E5E5E5"> milliseconds for</font><font color="#CCCCCC"> spice</font><font color="#E5E5E5"> CPU</font>

498
00:25:17,299 --> 00:25:21,230
benchmarks we introduced an additional

499
00:25:18,559 --> 00:25:30,139
<font color="#CCCCCC">30 milliseconds simple curl its tendons</font>

500
00:25:21,230 --> 00:25:32,539
<font color="#E5E5E5">what's the normal load time is is less</font>

501
00:25:30,139 --> 00:25:36,080
than one millisecond<font color="#E5E5E5"> so it's more than</font>

502
00:25:32,539 --> 00:25:38,299
20<font color="#E5E5E5"> times almost 40 times as much</font><font color="#CCCCCC"> a</font>

503
00:25:36,080 --> 00:25:39,559
<font color="#CCCCCC">surgeon drop but in the interest of time</font>

504
00:25:38,299 --> 00:25:43,700
we have to<font color="#CCCCCC"> move on so we should probably</font>

505
00:25:39,559 --> 00:25:46,570
take this offline all right so let's

506
00:25:43,700 --> 00:25:46,570
<font color="#E5E5E5">thank the speaker</font><font color="#CCCCCC"> again</font>

507
00:25:47,640 --> 00:25:49,700
<font color="#E5E5E5">you</font>

