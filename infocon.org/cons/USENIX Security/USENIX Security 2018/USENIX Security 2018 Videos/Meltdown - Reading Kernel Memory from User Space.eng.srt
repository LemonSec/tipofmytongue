1
00:00:10,730 --> 00:00:14,959
and today we talk<font color="#CCCCCC"> about Melton and</font>

2
00:00:12,799 --> 00:00:17,539
<font color="#E5E5E5">probably you all know the paper</font><font color="#CCCCCC"> so we'll</font>

3
00:00:14,959 --> 00:00:18,950
<font color="#E5E5E5">discuss the basics and also the new</font>

4
00:00:17,539 --> 00:00:20,960
things<font color="#E5E5E5"> that we added to the final</font>

5
00:00:18,950 --> 00:00:23,119
<font color="#CCCCCC">version so I encourage</font><font color="#E5E5E5"> you to read also</font>

6
00:00:20,960 --> 00:00:25,610
<font color="#E5E5E5">the final version did you find here at</font>

7
00:00:23,119 --> 00:00:28,189
<font color="#CCCCCC">Hugh's Nicks</font><font color="#E5E5E5"> so let's start right</font><font color="#CCCCCC"> off we</font>

8
00:00:25,610 --> 00:00:31,130
all know virtual memory and<font color="#E5E5E5"> until</font><font color="#CCCCCC"> very</font>

9
00:00:28,189 --> 00:00:33,440
recently<font color="#E5E5E5"> the kernel addresses the eronel</font>

10
00:00:31,130 --> 00:00:36,379
was also mapped in the virtual address

11
00:00:33,440 --> 00:00:38,900
<font color="#E5E5E5">space of the</font><font color="#CCCCCC"> user</font><font color="#E5E5E5"> so if you want to</font><font color="#CCCCCC"> read</font>

12
00:00:36,379 --> 00:00:42,769
some kernel memory<font color="#E5E5E5"> you can just go pick</font>

13
00:00:38,900 --> 00:00:45,170
an address for<font color="#CCCCCC"> instance</font><font color="#E5E5E5"> something human</font>

14
00:00:42,770 --> 00:00:48,710
<font color="#CCCCCC">readable</font><font color="#E5E5E5"> like the Linux version string</font>

15
00:00:45,170 --> 00:00:50,870
<font color="#E5E5E5">get the address to some point</font><font color="#CCCCCC"> a magic in</font>

16
00:00:48,710 --> 00:00:54,980
<font color="#CCCCCC">C dereference the address and</font><font color="#E5E5E5"> read the</font>

17
00:00:50,870 --> 00:00:56,300
value so of course this does<font color="#CCCCCC"> not</font><font color="#E5E5E5"> work so</font>

18
00:00:54,980 --> 00:00:58,190
an exception will be thrown

19
00:00:56,300 --> 00:01:01,218
you cannot just read the value a

20
00:00:58,190 --> 00:01:04,518
segmentation<font color="#CCCCCC"> fault occurs</font><font color="#E5E5E5"> it's not that</font>

21
00:01:01,219 --> 00:01:07,460
easy because we<font color="#CCCCCC"> have memory isolation on</font>

22
00:01:04,519 --> 00:01:09,740
our computers<font color="#E5E5E5"> so</font><font color="#CCCCCC"> the kernel is isolated</font>

23
00:01:07,460 --> 00:01:11,570
from<font color="#E5E5E5"> the user space and this isolation</font>

24
00:01:09,740 --> 00:01:14,750
<font color="#E5E5E5">is a combination of hardware and</font>

25
00:01:11,570 --> 00:01:16,458
<font color="#CCCCCC">software</font><font color="#E5E5E5"> and user applications cannot</font>

26
00:01:14,750 --> 00:01:18,560
just access anything<font color="#E5E5E5"> from the car</font>

27
00:01:16,459 --> 00:01:21,770
<font color="#CCCCCC">otherwise everything will be really</font>

28
00:01:18,560 --> 00:01:24,830
broken<font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to support multiple</font>

29
00:01:21,770 --> 00:01:27,470
processes we use paging so we have a

30
00:01:24,830 --> 00:01:28,880
<font color="#E5E5E5">virtual address space</font><font color="#CCCCCC"> to isolate those</font>

31
00:01:27,470 --> 00:01:31,220
processes from<font color="#CCCCCC"> each other</font>

32
00:01:28,880 --> 00:01:35,060
<font color="#E5E5E5">and the physical</font><font color="#CCCCCC"> memory is then</font>

33
00:01:31,220 --> 00:01:39,050
organized in so<font color="#E5E5E5"> called page frames we</font>

34
00:01:35,060 --> 00:01:41,390
use page tables<font color="#E5E5E5"> to map those virtual</font>

35
00:01:39,050 --> 00:01:44,300
<font color="#CCCCCC">addresses to the</font><font color="#E5E5E5"> actual physical memory</font>

36
00:01:41,390 --> 00:01:46,280
that<font color="#CCCCCC"> we have and on x86</font><font color="#E5E5E5"> this looks like</font>

37
00:01:44,300 --> 00:01:49,340
the<font color="#CCCCCC"> following so we have multiple</font><font color="#E5E5E5"> levels</font>

38
00:01:46,280 --> 00:01:52,009
<font color="#E5E5E5">of page tables and certain bits of the</font>

39
00:01:49,340 --> 00:01:54,080
virtual<font color="#CCCCCC"> address</font><font color="#E5E5E5"> are used as indices for</font>

40
00:01:52,009 --> 00:01:56,209
those tables<font color="#E5E5E5"> to translate to the final</font>

41
00:01:54,080 --> 00:01:58,940
<font color="#CCCCCC">physical page and if we take</font><font color="#E5E5E5"> a closer</font>

42
00:01:56,209 --> 00:02:01,580
<font color="#CCCCCC">look at the page table entry in the end</font>

43
00:01:58,940 --> 00:02:04,250
we can see that we find there<font color="#CCCCCC"> the actual</font>

44
00:02:01,580 --> 00:02:06,440
<font color="#E5E5E5">physical</font><font color="#CCCCCC"> address and</font><font color="#E5E5E5"> in addition some</font>

45
00:02:04,250 --> 00:02:08,989
interesting bits<font color="#E5E5E5"> for instance</font><font color="#CCCCCC"> the page</font>

46
00:02:06,440 --> 00:02:11,780
present<font color="#E5E5E5"> bit or also the user mode</font>

47
00:02:08,989 --> 00:02:13,760
accessible bit<font color="#E5E5E5"> where you can define if</font>

48
00:02:11,780 --> 00:02:18,859
this page is accessible<font color="#E5E5E5"> on which</font>

49
00:02:13,760 --> 00:02:20,929
<font color="#CCCCCC">privilege level in</font><font color="#E5E5E5"> addition typically</font>

50
00:02:18,859 --> 00:02:23,209
the<font color="#CCCCCC"> column is mapped into every address</font>

51
00:02:20,930 --> 00:02:24,560
<font color="#E5E5E5">space as we've seen in</font><font color="#CCCCCC"> the beginning</font><font color="#E5E5E5"> but</font>

52
00:02:23,209 --> 00:02:27,140
moreover<font color="#E5E5E5"> the in</font>

53
00:02:24,560 --> 00:02:29,360
<font color="#E5E5E5">higher physical memory is</font><font color="#CCCCCC"> also mapped</font><font color="#E5E5E5"> in</font>

54
00:02:27,140 --> 00:02:31,790
the kernel<font color="#E5E5E5"> so for instance if</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> have a</font>

55
00:02:29,360 --> 00:02:34,280
user space<font color="#E5E5E5"> address in this</font><font color="#CCCCCC"> graphic</font><font color="#E5E5E5"> we</font>

56
00:02:31,790 --> 00:02:36,260
also have a additional<font color="#E5E5E5"> virtual address</font>

57
00:02:34,280 --> 00:02:39,770
that points to the<font color="#E5E5E5"> same physical</font><font color="#CCCCCC"> address</font>

58
00:02:36,260 --> 00:02:42,109
<font color="#E5E5E5">in the main memory</font><font color="#CCCCCC"> so with the previous</font>

59
00:02:39,770 --> 00:02:44,900
example<font color="#E5E5E5"> if we just</font><font color="#CCCCCC"> try</font><font color="#E5E5E5"> to read an</font>

60
00:02:42,110 --> 00:02:46,970
address we will get the permission<font color="#CCCCCC"> check</font>

61
00:02:44,900 --> 00:02:49,340
which checks this bit in the page<font color="#E5E5E5"> table</font>

62
00:02:46,970 --> 00:02:52,970
entry<font color="#E5E5E5"> it will say no you cannot read</font>

63
00:02:49,340 --> 00:02:55,459
<font color="#E5E5E5">this address so we will fail</font><font color="#CCCCCC"> so on the</font>

64
00:02:52,970 --> 00:02:59,930
architectural level<font color="#E5E5E5"> everything works as</font>

65
00:02:55,459 --> 00:03:02,239
intended<font color="#E5E5E5"> so the instruction set</font>

66
00:02:59,930 --> 00:03:04,610
architecture is an abstract model<font color="#E5E5E5"> of our</font>

67
00:03:02,239 --> 00:03:06,560
computer which serves as an interface

68
00:03:04,610 --> 00:03:10,780
<font color="#CCCCCC">between the</font><font color="#E5E5E5"> hardware and the software</font>

69
00:03:06,560 --> 00:03:13,819
and the microarchitecture<font color="#CCCCCC"> that is</font>

70
00:03:10,780 --> 00:03:16,040
executing<font color="#E5E5E5"> our</font><font color="#CCCCCC"> instructions</font><font color="#E5E5E5"> is now the</font>

71
00:03:13,819 --> 00:03:18,200
actual implementation<font color="#CCCCCC"> of this</font>

72
00:03:16,040 --> 00:03:19,489
instruction set and they can be quite

73
00:03:18,200 --> 00:03:22,630
different<font color="#E5E5E5"> to each other</font>

74
00:03:19,489 --> 00:03:27,970
so you all know<font color="#CCCCCC"> for instance</font><font color="#E5E5E5"> AMD FM</font><font color="#CCCCCC"> CPUs</font>

75
00:03:22,630 --> 00:03:30,350
<font color="#CCCCCC">Rison Intel Core i7 Intel Xeon</font><font color="#E5E5E5"> and so on</font>

76
00:03:27,970 --> 00:03:32,359
but<font color="#E5E5E5"> this all happens on the</font>

77
00:03:30,350 --> 00:03:35,108
microarchitecture level<font color="#E5E5E5"> so we cannot</font>

78
00:03:32,359 --> 00:03:38,810
easily<font color="#E5E5E5"> observe what's going on there but</font>

79
00:03:35,109 --> 00:03:41,329
<font color="#CCCCCC">we have those side-channel attacks so</font>

80
00:03:38,810 --> 00:03:43,069
<font color="#E5E5E5">even if we have a safe software</font>

81
00:03:41,329 --> 00:03:45,980
infrastructure<font color="#E5E5E5"> where</font><font color="#CCCCCC"> we do not have</font><font color="#E5E5E5"> any</font>

82
00:03:43,069 --> 00:03:49,640
bugs<font color="#E5E5E5"> the hardware</font><font color="#CCCCCC"> that executes our</font>

83
00:03:45,980 --> 00:03:51,828
software can<font color="#E5E5E5"> leak</font><font color="#CCCCCC"> information and using</font>

84
00:03:49,640 --> 00:03:54,200
these<font color="#CCCCCC"> side channel attacks we can</font>

85
00:03:51,829 --> 00:03:57,139
exploit this unintentional information

86
00:03:54,200 --> 00:03:59,810
leakage<font color="#E5E5E5"> by observing those side effects</font>

87
00:03:57,139 --> 00:04:02,030
<font color="#E5E5E5">this could be the power consumption of</font>

88
00:03:59,810 --> 00:04:03,530
the device so<font color="#E5E5E5"> the power consumption is</font>

89
00:04:02,030 --> 00:04:05,750
increased depending on what values

90
00:04:03,530 --> 00:04:08,660
<font color="#CCCCCC">you're processing or the</font><font color="#E5E5E5"> execution</font><font color="#CCCCCC"> time</font>

91
00:04:05,750 --> 00:04:12,500
<font color="#E5E5E5">of the algorithm</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> also the CPU cache</font>

92
00:04:08,660 --> 00:04:14,569
which we'll take<font color="#E5E5E5"> a look at now so if you</font>

93
00:04:12,500 --> 00:04:16,940
have an address for<font color="#CCCCCC"> instance</font><font color="#E5E5E5"> of this</font>

94
00:04:14,569 --> 00:04:19,279
variable I and you want to access<font color="#CCCCCC"> it the</font>

95
00:04:16,940 --> 00:04:22,070
first time you won't find it in<font color="#CCCCCC"> the CPU</font>

96
00:04:19,279 --> 00:04:24,409
cache<font color="#E5E5E5"> so you have a cache miss now the</font>

97
00:04:22,070 --> 00:04:26,930
CPU<font color="#CCCCCC"> needs to request this address from</font>

98
00:04:24,410 --> 00:04:28,910
the main memory<font color="#E5E5E5"> it will be loaded from</font>

99
00:04:26,930 --> 00:04:31,520
<font color="#CCCCCC">the main memory</font><font color="#E5E5E5"> directly into the cache</font>

100
00:04:28,910 --> 00:04:34,430
<font color="#E5E5E5">and the next time when we try to access</font>

101
00:04:31,520 --> 00:04:37,090
this address it is already stored<font color="#E5E5E5"> in the</font>

102
00:04:34,430 --> 00:04:38,240
cache<font color="#CCCCCC"> so we have a</font><font color="#E5E5E5"> so called cache hit</font>

103
00:04:37,090 --> 00:04:41,840
so

104
00:04:38,240 --> 00:04:44,120
if we have no<font color="#E5E5E5"> DRM access the access time</font>

105
00:04:41,840 --> 00:04:46,698
<font color="#E5E5E5">to this address</font><font color="#CCCCCC"> is served</font><font color="#E5E5E5"> it's much</font>

106
00:04:44,120 --> 00:04:49,240
faster<font color="#E5E5E5"> if we have a cache miss we need</font>

107
00:04:46,699 --> 00:04:52,220
<font color="#E5E5E5">to access the DRM so this is slower and</font>

108
00:04:49,240 --> 00:04:53,990
if you have a<font color="#E5E5E5"> high resolution</font><font color="#CCCCCC"> dimer you</font>

109
00:04:52,220 --> 00:04:56,509
can easily<font color="#E5E5E5"> measure that and get a</font>

110
00:04:53,990 --> 00:04:58,490
histogram like this so it's easy to<font color="#CCCCCC"> find</font>

111
00:04:56,509 --> 00:05:00,710
<font color="#E5E5E5">a</font><font color="#CCCCCC"> threshold</font><font color="#E5E5E5"> between those two peaks</font>

112
00:04:58,490 --> 00:05:03,590
which allows you<font color="#E5E5E5"> to distinguish between</font>

113
00:05:00,710 --> 00:05:05,659
a cache hit<font color="#E5E5E5"> and the cache miss and only</font>

114
00:05:03,590 --> 00:05:08,150
with this<font color="#CCCCCC"> information and the Bekaa can</font>

115
00:05:05,660 --> 00:05:11,000
build powerful<font color="#E5E5E5"> attacks like the flash</font>

116
00:05:08,150 --> 00:05:13,520
and reload attack<font color="#E5E5E5"> we've seen earlier</font><font color="#CCCCCC"> so</font>

117
00:05:11,000 --> 00:05:15,590
we<font color="#E5E5E5"> assume shared memory between an</font>

118
00:05:13,520 --> 00:05:17,568
attacker process and the victim process

119
00:05:15,590 --> 00:05:20,119
which<font color="#E5E5E5"> means the different address is</font>

120
00:05:17,569 --> 00:05:21,830
cached<font color="#E5E5E5"> for one its cache basically for</font>

121
00:05:20,120 --> 00:05:25,550
both of them<font color="#E5E5E5"> because it's shared memory</font>

122
00:05:21,830 --> 00:05:28,969
now<font color="#E5E5E5"> the attacker can flush the</font><font color="#CCCCCC"> address</font>

123
00:05:25,550 --> 00:05:31,849
from<font color="#E5E5E5"> the cache so the next time someone</font>

124
00:05:28,970 --> 00:05:34,250
loads it it will be served to memory<font color="#E5E5E5"> now</font>

125
00:05:31,849 --> 00:05:36,440
assume the victim is scheduled and tries

126
00:05:34,250 --> 00:05:39,020
to<font color="#CCCCCC"> access</font><font color="#E5E5E5"> this address since it's not in</font>

127
00:05:36,440 --> 00:05:42,349
<font color="#E5E5E5">the cache</font><font color="#CCCCCC"> it will be loaded into</font><font color="#E5E5E5"> the</font>

128
00:05:39,020 --> 00:05:44,750
cache by the<font color="#E5E5E5"> access of</font><font color="#CCCCCC"> the victim</font><font color="#E5E5E5"> now if</font>

129
00:05:42,349 --> 00:05:47,000
the attacker measures the execution time

130
00:05:44,750 --> 00:05:49,789
how long<font color="#E5E5E5"> it takes</font><font color="#CCCCCC"> to access this address</font>

131
00:05:47,000 --> 00:05:51,560
again<font color="#E5E5E5"> he can deduce if the victim has</font>

132
00:05:49,789 --> 00:05:54,080
accessed<font color="#E5E5E5"> the address in the meantime</font><font color="#CCCCCC"> or</font>

133
00:05:51,560 --> 00:05:56,330
if the victim did<font color="#CCCCCC"> not access</font><font color="#E5E5E5"> this</font>

134
00:05:54,080 --> 00:05:58,340
address in the meantime<font color="#E5E5E5"> and with this as</font>

135
00:05:56,330 --> 00:06:01,880
we've seen with different cache attacks

136
00:05:58,340 --> 00:06:04,909
<font color="#E5E5E5">and attack you can break crypto and so</font>

137
00:06:01,880 --> 00:06:06,770
on but what is<font color="#E5E5E5"> actually happening when</font>

138
00:06:04,909 --> 00:06:08,539
we execute some instructions on our

139
00:06:06,770 --> 00:06:11,630
high-performance CPUs that<font color="#CCCCCC"> we have</font>

140
00:06:08,539 --> 00:06:15,318
nowadays<font color="#E5E5E5"> there we use out</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> order</font>

141
00:06:11,630 --> 00:06:17,659
executions which means instructions are

142
00:06:15,319 --> 00:06:20,599
fetched and decoded in the front end

143
00:06:17,659 --> 00:06:23,210
<font color="#E5E5E5">which we see in the upper part of the</font>

144
00:06:20,599 --> 00:06:25,880
<font color="#CCCCCC">picture and then</font><font color="#E5E5E5"> they are dispatched to</font>

145
00:06:23,210 --> 00:06:28,310
the back end and there we have

146
00:06:25,880 --> 00:06:30,740
individual execution units that then

147
00:06:28,310 --> 00:06:33,349
process those instructions so we have

148
00:06:30,740 --> 00:06:36,490
some units for ALU operations or<font color="#E5E5E5"> the</font>

149
00:06:33,349 --> 00:06:38,990
load and address or do store operations

150
00:06:36,490 --> 00:06:41,330
what's more important is<font color="#CCCCCC"> that now</font>

151
00:06:38,990 --> 00:06:44,599
instructions can be<font color="#E5E5E5"> executed</font><font color="#CCCCCC"> out of</font>

152
00:06:41,330 --> 00:06:47,000
order this means they can wait until the

153
00:06:44,599 --> 00:06:49,310
dependencies are ready<font color="#E5E5E5"> and what this</font>

154
00:06:47,000 --> 00:06:51,289
means<font color="#E5E5E5"> is that instructions that would</font>

155
00:06:49,310 --> 00:06:52,009
occur later in<font color="#CCCCCC"> your instruction stream</font>

156
00:06:51,289 --> 00:06:54,860
can be

157
00:06:52,009 --> 00:06:58,849
actually executed before<font color="#E5E5E5"> other</font>

158
00:06:54,860 --> 00:07:01,039
instructions the important thing<font color="#E5E5E5"> is that</font>

159
00:06:58,849 --> 00:07:03,409
<font color="#E5E5E5">those instructions are retired in order</font>

160
00:07:01,039 --> 00:07:06,770
<font color="#CCCCCC">because</font><font color="#E5E5E5"> otherwise our programs wouldn't</font>

161
00:07:03,409 --> 00:07:09,379
work as<font color="#CCCCCC"> expected</font><font color="#E5E5E5"> and only while retiring</font>

162
00:07:06,770 --> 00:07:12,740
<font color="#E5E5E5">the state becomes architectural</font>

163
00:07:09,379 --> 00:07:15,199
invisible if an exception<font color="#CCCCCC"> occurs they</font>

164
00:07:12,740 --> 00:07:17,180
are checked during<font color="#E5E5E5"> the retirement if so</font>

165
00:07:15,199 --> 00:07:18,800
we can just<font color="#E5E5E5"> flush the pipeline and</font>

166
00:07:17,180 --> 00:07:22,099
recover the same state<font color="#CCCCCC"> that we had</font>

167
00:07:18,800 --> 00:07:24,379
before<font color="#E5E5E5"> but as I said was more important</font>

168
00:07:22,099 --> 00:07:26,419
<font color="#E5E5E5">the state becomes only architectural</font>

169
00:07:24,379 --> 00:07:29,689
visibly when those instructions are

170
00:07:26,419 --> 00:07:32,628
retired<font color="#E5E5E5"> so we have a</font><font color="#CCCCCC"> little toy example</font>

171
00:07:29,689 --> 00:07:35,479
and how we can check things out<font color="#CCCCCC"> what</font>

172
00:07:32,629 --> 00:07:37,669
they are<font color="#E5E5E5"> working so</font><font color="#CCCCCC"> in this example we</font>

173
00:07:35,479 --> 00:07:39,770
<font color="#CCCCCC">just have a null pointer access which</font>

174
00:07:37,669 --> 00:07:41,688
will raise an exception<font color="#E5E5E5"> so</font><font color="#CCCCCC"> the next</font>

175
00:07:39,770 --> 00:07:45,020
instruction the access to the array

176
00:07:41,689 --> 00:07:47,240
should never be<font color="#CCCCCC"> executed but if we run</font>

177
00:07:45,020 --> 00:07:49,039
this code<font color="#E5E5E5"> and then use the</font><font color="#CCCCCC"> flash</font><font color="#E5E5E5"> and we</font>

178
00:07:47,240 --> 00:07:52,249
<font color="#E5E5E5">load attack that we've seen earlier</font><font color="#CCCCCC"> and</font>

179
00:07:49,039 --> 00:07:55,399
iterate over all<font color="#E5E5E5"> those pages in the</font>

180
00:07:52,249 --> 00:07:58,339
array<font color="#E5E5E5"> we suddenly see a cache hit what</font>

181
00:07:55,399 --> 00:08:03,439
does this mean so apparently unreachable

182
00:07:58,339 --> 00:08:07,279
code was<font color="#E5E5E5"> actually executed when the</font>

183
00:08:03,439 --> 00:08:09,949
<font color="#E5E5E5">exception was only thrown afterwards so</font>

184
00:08:07,279 --> 00:08:12,529
with that information we know that out

185
00:08:09,949 --> 00:08:15,620
of<font color="#CCCCCC"> order instructions leave Mike for</font>

186
00:08:12,529 --> 00:08:19,610
architectural traces and we can see them

187
00:08:15,620 --> 00:08:21,709
for example<font color="#CCCCCC"> also</font><font color="#E5E5E5"> in the cache from now</font>

188
00:08:19,610 --> 00:08:25,069
on we give those instructions the name

189
00:08:21,709 --> 00:08:27,860
of transient instructions and we can

190
00:08:25,069 --> 00:08:30,680
indirectly<font color="#E5E5E5"> observe the execution of</font>

191
00:08:27,860 --> 00:08:34,519
those<font color="#E5E5E5"> instructions which brings us to</font>

192
00:08:30,680 --> 00:08:37,818
<font color="#E5E5E5">the building blocks</font><font color="#CCCCCC"> of our attack so</font>

193
00:08:34,519 --> 00:08:39,620
assume we have<font color="#E5E5E5"> somewhere a secret which</font>

194
00:08:37,818 --> 00:08:43,578
we want as an attacker to<font color="#E5E5E5"> extract from</font>

195
00:08:39,620 --> 00:08:47,600
<font color="#CCCCCC">the system</font><font color="#E5E5E5"> so we execute some drains and</font>

196
00:08:43,578 --> 00:08:49,729
instructions<font color="#E5E5E5"> that access the secret and</font>

197
00:08:47,600 --> 00:08:53,480
<font color="#E5E5E5">introduce a micro architectural state</font>

198
00:08:49,730 --> 00:08:55,880
change which also works<font color="#E5E5E5"> as the sender</font><font color="#CCCCCC"> of</font>

199
00:08:53,480 --> 00:08:58,339
a cover<font color="#E5E5E5"> channel and then we need to</font>

200
00:08:55,880 --> 00:09:01,399
transfer this micro architectural state

201
00:08:58,339 --> 00:09:03,230
change to an<font color="#E5E5E5"> architectural state because</font>

202
00:09:01,399 --> 00:09:04,400
otherwise we cannot really<font color="#E5E5E5"> observe it</font>

203
00:09:03,230 --> 00:09:07,010
and

204
00:09:04,400 --> 00:09:09,350
with the state we then can recover<font color="#E5E5E5"> the</font>

205
00:09:07,010 --> 00:09:13,189
<font color="#CCCCCC">secret that we have accessed in those</font>

206
00:09:09,350 --> 00:09:14,870
<font color="#E5E5E5">strands and instructions so the first</font>

207
00:09:13,190 --> 00:09:18,620
thing<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to do we need to</font>

208
00:09:14,870 --> 00:09:20,870
execute<font color="#E5E5E5"> such stringent instructions but</font>

209
00:09:18,620 --> 00:09:26,600
in fact they<font color="#CCCCCC"> are executed all the time</font>

210
00:09:20,870 --> 00:09:28,480
as we have seen in<font color="#E5E5E5"> our toy example but</font>

211
00:09:26,600 --> 00:09:31,100
as we have also seen<font color="#CCCCCC"> in the beginning</font>

212
00:09:28,480 --> 00:09:33,080
<font color="#CCCCCC">loading and</font><font color="#E5E5E5"> inaccessible address leads</font>

213
00:09:31,100 --> 00:09:35,660
to a crash in this case<font color="#CCCCCC"> to the</font>

214
00:09:33,080 --> 00:09:37,460
segmentation fault so at one point<font color="#CCCCCC"> we</font>

215
00:09:35,660 --> 00:09:39,680
<font color="#CCCCCC">need to prevent the crash because</font>

216
00:09:37,460 --> 00:09:41,450
<font color="#E5E5E5">otherwise our</font><font color="#CCCCCC"> attacker application is</font>

217
00:09:39,680 --> 00:09:43,910
<font color="#CCCCCC">just terminated and we cannot do</font>

218
00:09:41,450 --> 00:09:46,580
anything<font color="#CCCCCC"> and there</font><font color="#E5E5E5"> different things</font><font color="#CCCCCC"> that</font>

219
00:09:43,910 --> 00:09:48,680
we can<font color="#CCCCCC"> do for instance we can do fault</font>

220
00:09:46,580 --> 00:09:50,779
handling<font color="#E5E5E5"> so we just install a signal</font>

221
00:09:48,680 --> 00:09:53,209
handler<font color="#E5E5E5"> that will catch the</font><font color="#CCCCCC"> segmentation</font>

222
00:09:50,779 --> 00:09:55,850
fault<font color="#E5E5E5"> and jump back to our code and</font>

223
00:09:53,210 --> 00:09:57,860
<font color="#CCCCCC">continuously execution</font><font color="#E5E5E5"> or we could use</font>

224
00:09:55,850 --> 00:09:59,960
<font color="#E5E5E5">entity</font><font color="#CCCCCC"> SX as we've seen</font><font color="#E5E5E5"> in the previous</font>

225
00:09:57,860 --> 00:10:00,529
presentation to suppress the fault

226
00:09:59,960 --> 00:10:03,680
entirely

227
00:10:00,529 --> 00:10:05,900
because when the exception is happening

228
00:10:03,680 --> 00:10:09,500
there the transaction would just be

229
00:10:05,900 --> 00:10:12,290
reported and we can<font color="#E5E5E5"> continue or we can</font>

230
00:10:09,500 --> 00:10:14,600
use speculates<font color="#E5E5E5"> respect to X by</font>

231
00:10:12,290 --> 00:10:17,150
<font color="#CCCCCC">exploiting speculative execution to</font>

232
00:10:14,600 --> 00:10:20,480
execute those instructions speculatively

233
00:10:17,150 --> 00:10:25,040
<font color="#E5E5E5">and we have the same result so</font><font color="#CCCCCC"> the</font>

234
00:10:20,480 --> 00:10:27,650
second<font color="#E5E5E5"> thing is here we</font><font color="#CCCCCC"> directly access</font>

235
00:10:25,040 --> 00:10:29,959
<font color="#CCCCCC">the secret so we do not</font><font color="#E5E5E5"> really use the</font>

236
00:10:27,650 --> 00:10:32,569
side<font color="#CCCCCC"> channel</font><font color="#E5E5E5"> but then on the</font><font color="#CCCCCC"> other hand</font>

237
00:10:29,959 --> 00:10:34,390
we establish a<font color="#CCCCCC"> cover channel where we</font>

238
00:10:32,570 --> 00:10:36,680
transfer the micro architecture

239
00:10:34,390 --> 00:10:39,770
architectural<font color="#E5E5E5"> state change into the</font>

240
00:10:36,680 --> 00:10:42,709
architectural state and the transient

241
00:10:39,770 --> 00:10:45,680
<font color="#E5E5E5">instruction sequence</font><font color="#CCCCCC"> serves here as the</font>

242
00:10:42,709 --> 00:10:48,619
sender<font color="#CCCCCC"> the receiver then by iterating</font>

243
00:10:45,680 --> 00:10:51,050
over those pages<font color="#E5E5E5"> and reloading those</font>

244
00:10:48,620 --> 00:10:53,600
pages<font color="#E5E5E5"> and measuring the time receives</font>

245
00:10:51,050 --> 00:10:56,540
<font color="#E5E5E5">the state change because the page is now</font>

246
00:10:53,600 --> 00:11:00,980
cached and deduces<font color="#CCCCCC"> the secret</font><font color="#E5E5E5"> from this</font>

247
00:10:56,540 --> 00:11:03,170
state but what is important<font color="#E5E5E5"> is that we</font>

248
00:11:00,980 --> 00:11:05,510
<font color="#E5E5E5">here leverage the cache attack technique</font>

249
00:11:03,170 --> 00:11:07,910
<font color="#CCCCCC">Russian reload</font><font color="#E5E5E5"> we can also use it to</font>

250
00:11:05,510 --> 00:11:11,480
<font color="#E5E5E5">transmit multiple bits at once so we</font>

251
00:11:07,910 --> 00:11:14,510
<font color="#E5E5E5">encode the bytes that we read</font><font color="#CCCCCC"> in to 256</font>

252
00:11:11,480 --> 00:11:16,850
<font color="#E5E5E5">different cache lines that we</font><font color="#CCCCCC"> access but</font>

253
00:11:14,510 --> 00:11:17,730
but really<font color="#E5E5E5"> important is it's not limited</font>

254
00:11:16,850 --> 00:11:20,069
<font color="#CCCCCC">to the cache</font>

255
00:11:17,730 --> 00:11:22,439
so you can use also<font color="#CCCCCC"> other</font><font color="#E5E5E5"> parts of the</font>

256
00:11:20,069 --> 00:11:24,179
microarchitecture<font color="#CCCCCC"> to transmit a secret</font>

257
00:11:22,439 --> 00:11:27,660
<font color="#E5E5E5">as we've seen in a net</font><font color="#CCCCCC"> Spectre</font><font color="#E5E5E5"> attack</font>

258
00:11:24,179 --> 00:11:29,819
for instance so to<font color="#E5E5E5"> build our final</font>

259
00:11:27,660 --> 00:11:33,299
attack<font color="#CCCCCC"> we just need</font><font color="#E5E5E5"> another layer of</font>

260
00:11:29,819 --> 00:11:34,919
indirection<font color="#CCCCCC"> this time we use the value</font>

261
00:11:33,299 --> 00:11:38,220
that we read from this inaccessible

262
00:11:34,919 --> 00:11:41,369
<font color="#E5E5E5">address and use it as the index of the</font>

263
00:11:38,220 --> 00:11:43,499
access<font color="#E5E5E5"> to the array so when we then</font>

264
00:11:41,369 --> 00:11:47,129
check whether<font color="#E5E5E5"> any part of the array is</font>

265
00:11:43,499 --> 00:11:49,709
<font color="#E5E5E5">cached we see that we indeed have a</font>

266
00:11:47,129 --> 00:11:51,809
cache<font color="#CCCCCC"> hit and the index of the cache it</font>

267
00:11:49,709 --> 00:11:54,689
reveals the<font color="#E5E5E5"> data that we are not</font>

268
00:11:51,809 --> 00:11:56,519
supposed<font color="#CCCCCC"> to read</font><font color="#E5E5E5"> so sometimes the</font>

269
00:11:54,689 --> 00:11:59,059
permission check is apparently not fast

270
00:11:56,519 --> 00:12:03,239
enough<font color="#E5E5E5"> and we have the</font><font color="#CCCCCC"> meltdown attack</font>

271
00:11:59,059 --> 00:12:07,649
<font color="#E5E5E5">so with meltdown we exploit out of order</font>

272
00:12:03,239 --> 00:12:09,959
<font color="#CCCCCC">execution to read</font><font color="#E5E5E5"> data at any address we</font>

273
00:12:07,649 --> 00:12:12,569
use the<font color="#E5E5E5"> index of the cache</font><font color="#CCCCCC"> hit to reveal</font>

274
00:12:09,959 --> 00:12:14,878
the data and the permission<font color="#E5E5E5"> check is not</font>

275
00:12:12,569 --> 00:12:16,589
fast enough<font color="#E5E5E5"> and since the</font><font color="#CCCCCC"> entire</font>

276
00:12:14,879 --> 00:12:18,839
<font color="#E5E5E5">physical memory</font><font color="#CCCCCC"> is mapped into</font><font color="#E5E5E5"> the</font>

277
00:12:16,589 --> 00:12:21,269
kernel<font color="#E5E5E5"> we can just dump the</font><font color="#CCCCCC"> entire</font>

278
00:12:18,839 --> 00:12:29,189
physical<font color="#E5E5E5"> memory as we can see in this</font>

279
00:12:21,269 --> 00:12:31,619
demo<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we just start to read at any</font>

280
00:12:29,189 --> 00:12:34,738
address at the random address and in

281
00:12:31,619 --> 00:12:36,720
<font color="#E5E5E5">this case we read descriptions of</font>

282
00:12:34,739 --> 00:12:44,100
packages for the package<font color="#E5E5E5"> manager on this</font>

283
00:12:36,720 --> 00:12:46,619
<font color="#CCCCCC">system but if you read</font><font color="#E5E5E5"> the reports in</font>

284
00:12:44,100 --> 00:12:49,249
<font color="#E5E5E5">January Intel said you can only</font><font color="#CCCCCC"> read</font>

285
00:12:46,619 --> 00:12:52,350
values<font color="#E5E5E5"> that are stored in the</font><font color="#CCCCCC"> l1 cache</font>

286
00:12:49,249 --> 00:12:54,509
<font color="#E5E5E5">but we don't</font><font color="#CCCCCC"> think it's that's the case</font>

287
00:12:52,350 --> 00:12:57,600
<font color="#CCCCCC">so</font><font color="#E5E5E5"> we also did a new experiment in</font>

288
00:12:54,509 --> 00:13:00,209
addition in the new paper<font color="#CCCCCC"> where a thread</font>

289
00:12:57,600 --> 00:13:02,220
constantly<font color="#CCCCCC"> flashes the value and</font><font color="#E5E5E5"> the</font>

290
00:13:00,209 --> 00:13:04,829
<font color="#E5E5E5">fret on</font><font color="#CCCCCC"> a different</font><font color="#E5E5E5"> core reloads the</font>

291
00:13:02,220 --> 00:13:07,829
value this means that the targeted data

292
00:13:04,829 --> 00:13:11,608
is not in the l1<font color="#CCCCCC"> cache</font><font color="#E5E5E5"> of the attacking</font>

293
00:13:07,829 --> 00:13:13,888
core but still we<font color="#E5E5E5"> can leak the data but</font>

294
00:13:11,609 --> 00:13:16,589
at a lower reading<font color="#E5E5E5"> rate so we are much</font>

295
00:13:13,889 --> 00:13:19,889
faster<font color="#E5E5E5"> if it's in the l1 but slower if</font>

296
00:13:16,589 --> 00:13:22,739
it's not so<font color="#CCCCCC"> Melton might implicitly</font>

297
00:13:19,889 --> 00:13:24,989
cache the<font color="#CCCCCC"> data but you can even go one</font>

298
00:13:22,739 --> 00:13:28,559
step further we can<font color="#E5E5E5"> use uncatchable</font>

299
00:13:24,989 --> 00:13:31,440
memory so one bit in the page tables as

300
00:13:28,559 --> 00:13:34,290
we've seen can<font color="#E5E5E5"> be used to mark a page</font>

301
00:13:31,440 --> 00:13:36,900
uncatchable<font color="#E5E5E5"> this means that every read</font>

302
00:13:34,290 --> 00:13:40,620
<font color="#CCCCCC">or write operation will go directly</font><font color="#E5E5E5"> to</font>

303
00:13:36,900 --> 00:13:43,170
main<font color="#E5E5E5"> memory and we observed that if the</font>

304
00:13:40,620 --> 00:13:45,360
<font color="#E5E5E5">attacker can trigger a legitimate load</font>

305
00:13:43,170 --> 00:13:47,699
like through a system call<font color="#E5E5E5"> to this</font>

306
00:13:45,360 --> 00:13:51,120
address<font color="#E5E5E5"> on the same</font><font color="#CCCCCC"> CPU core</font><font color="#E5E5E5"> you can</font>

307
00:13:47,700 --> 00:13:52,740
<font color="#E5E5E5">still leak the data so meltdown might</font>

308
00:13:51,120 --> 00:13:54,930
read the<font color="#E5E5E5"> data now not from the cache</font>

309
00:13:52,740 --> 00:13:58,320
because<font color="#CCCCCC"> it's uncatchable but of one of</font>

310
00:13:54,930 --> 00:13:59,699
the fill buffers<font color="#E5E5E5"> and those</font><font color="#CCCCCC"> filled</font>

311
00:13:58,320 --> 00:14:02,940
buffers are shared between threads

312
00:13:59,700 --> 00:14:06,030
running<font color="#E5E5E5"> on the same core so who is</font>

313
00:14:02,940 --> 00:14:07,770
<font color="#CCCCCC">affected for Intel almost every</font><font color="#E5E5E5"> CPU</font>

314
00:14:06,030 --> 00:14:11,550
seems to be affected<font color="#E5E5E5"> and we tested many</font>

315
00:14:07,770 --> 00:14:13,380
of them but<font color="#CCCCCC"> for</font><font color="#E5E5E5"> AMD no microarchitecture</font>

316
00:14:11,550 --> 00:14:16,740
seems to be affected<font color="#E5E5E5"> which is nice</font>

317
00:14:13,380 --> 00:14:19,170
<font color="#E5E5E5">I'm stated that only the cortex</font><font color="#CCCCCC"> a75</font><font color="#E5E5E5"> is</font>

318
00:14:16,740 --> 00:14:21,270
affected for IBM<font color="#E5E5E5"> it's the power</font>

319
00:14:19,170 --> 00:14:24,810
architecture system<font color="#E5E5E5"> set and so on and</font>

320
00:14:21,270 --> 00:14:27,210
for Apple all Mac and iOS devices<font color="#CCCCCC"> seem</font>

321
00:14:24,810 --> 00:14:29,790
to be affected<font color="#E5E5E5"> but there are also some</font>

322
00:14:27,210 --> 00:14:32,220
other CPU manufacturers<font color="#E5E5E5"> which didn't</font>

323
00:14:29,790 --> 00:14:35,160
<font color="#E5E5E5">state which of the devices are affected</font>

324
00:14:32,220 --> 00:14:36,150
and it appears that<font color="#E5E5E5"> also the Samsung</font>

325
00:14:35,160 --> 00:14:38,610
<font color="#CCCCCC">Galaxy s7</font>

326
00:14:36,150 --> 00:14:40,920
<font color="#E5E5E5">using the Exynos Mongoose</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> one CPU</font>

327
00:14:38,610 --> 00:14:43,920
chip<font color="#E5E5E5"> seems to be affected and it's the</font>

328
00:14:40,920 --> 00:14:46,410
first custom CPU<font color="#CCCCCC"> co-op in the Exynos a</font>

329
00:14:43,920 --> 00:14:49,020
top star with<font color="#CCCCCC"> a perceptron branch</font>

330
00:14:46,410 --> 00:14:51,030
prediction full<font color="#E5E5E5"> out of order instruction</font>

331
00:14:49,020 --> 00:14:53,310
execution<font color="#E5E5E5"> and full out of order loads</font>

332
00:14:51,030 --> 00:14:55,980
and stores<font color="#E5E5E5"> and as you see in the paper</font>

333
00:14:53,310 --> 00:15:00,119
we also were<font color="#E5E5E5"> able to</font><font color="#CCCCCC"> mount a</font><font color="#E5E5E5"> melt on</font>

334
00:14:55,980 --> 00:15:02,040
attack on that device but how does the

335
00:15:00,120 --> 00:15:04,610
practice look like so dumping the entire

336
00:15:02,040 --> 00:15:08,280
<font color="#E5E5E5">physical memory takes some time because</font>

337
00:15:04,610 --> 00:15:10,200
<font color="#E5E5E5">not</font><font color="#CCCCCC"> everything fits</font><font color="#E5E5E5"> into the l1 where we</font>

338
00:15:08,280 --> 00:15:13,530
have the most<font color="#E5E5E5"> highest speed achieved</font>

339
00:15:10,200 --> 00:15:16,620
<font color="#E5E5E5">with 582 kilobytes per second on average</font>

340
00:15:13,530 --> 00:15:20,130
in the<font color="#E5E5E5"> l3 it was only twelve point four</font>

341
00:15:16,620 --> 00:15:22,320
if it's<font color="#CCCCCC"> uncashed</font><font color="#E5E5E5"> it was like</font><font color="#CCCCCC"> ten bytes</font>

342
00:15:20,130 --> 00:15:26,220
per second<font color="#E5E5E5"> and an improved version</font>

343
00:15:22,320 --> 00:15:28,500
around 3.2 kilobyte<font color="#E5E5E5"> so it's not very</font>

344
00:15:26,220 --> 00:15:30,720
practical<font color="#E5E5E5"> in most scenarios</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> just want</font>

345
00:15:28,500 --> 00:15:33,990
<font color="#E5E5E5">to dump the entire physical memory of a</font>

346
00:15:30,720 --> 00:15:37,890
machine but<font color="#E5E5E5"> you can also do more</font>

347
00:15:33,990 --> 00:15:40,740
<font color="#CCCCCC">targeted attacks</font><font color="#E5E5E5"> so we have also created</font>

348
00:15:37,890 --> 00:15:44,250
on our systems<font color="#E5E5E5"> so we can also use</font><font color="#CCCCCC"> it to</font>

349
00:15:40,740 --> 00:15:45,270
break<font color="#CCCCCC"> a SLR</font><font color="#E5E5E5"> to access internal current</font>

350
00:15:44,250 --> 00:15:48,300
structures that we can

351
00:15:45,270 --> 00:15:50,730
use to mount more targeted<font color="#CCCCCC"> to decks</font><font color="#E5E5E5"> so</font>

352
00:15:48,300 --> 00:15:52,770
we try<font color="#E5E5E5"> to locate</font><font color="#CCCCCC"> a known value</font><font color="#E5E5E5"> inside</font>

353
00:15:50,730 --> 00:15:55,350
<font color="#CCCCCC">the</font><font color="#E5E5E5"> kernel like the Linux</font><font color="#CCCCCC"> planner as</font>

354
00:15:52,770 --> 00:15:58,439
we've<font color="#E5E5E5"> seen earlier and we start at the</font>

355
00:15:55,350 --> 00:16:00,330
default<font color="#CCCCCC"> address according to the symbol</font>

356
00:15:58,440 --> 00:16:02,070
table of the running home<font color="#CCCCCC"> so you need to</font>

357
00:16:00,330 --> 00:16:04,410
<font color="#E5E5E5">know the version of the current running</font>

358
00:16:02,070 --> 00:16:07,590
on the system<font color="#CCCCCC"> but for each Linux</font>

359
00:16:04,410 --> 00:16:10,290
distribution<font color="#CCCCCC"> this is the same since</font>

360
00:16:07,590 --> 00:16:13,200
<font color="#CCCCCC">kayla has only an entropy of 6 bits</font>

361
00:16:10,290 --> 00:16:16,349
there are only<font color="#E5E5E5"> 64 possible randomization</font>

362
00:16:13,200 --> 00:16:18,690
offsets<font color="#E5E5E5"> and we can just try all of them</font>

363
00:16:16,350 --> 00:16:20,460
<font color="#E5E5E5">and the difference</font><font color="#CCCCCC"> between the found</font>

364
00:16:18,690 --> 00:16:22,620
address where<font color="#E5E5E5"> we can reach the leaked</font>

365
00:16:20,460 --> 00:16:25,280
value and the non<font color="#E5E5E5"> randomized space</font>

366
00:16:22,620 --> 00:16:27,990
address is now our randomization offset

367
00:16:25,280 --> 00:16:30,000
with that we broke<font color="#E5E5E5"> the SLR</font>

368
00:16:27,990 --> 00:16:32,580
so we know<font color="#E5E5E5"> exactly where he attended in</font>

369
00:16:30,000 --> 00:16:35,070
mapping starts and we can use this to go

370
00:16:32,580 --> 00:16:38,430
<font color="#CCCCCC">on and for</font><font color="#E5E5E5"> instance locate a victim</font>

371
00:16:35,070 --> 00:16:40,980
process so in<font color="#E5E5E5"> Linux all processes are</font>

372
00:16:38,430 --> 00:16:42,839
<font color="#E5E5E5">managed in a linked list and the head of</font>

373
00:16:40,980 --> 00:16:45,510
<font color="#E5E5E5">the list is stored in the init task</font>

374
00:16:42,840 --> 00:16:48,270
<font color="#E5E5E5">structure and this is at</font><font color="#CCCCCC"> a fixed offset</font>

375
00:16:45,510 --> 00:16:52,110
that<font color="#E5E5E5"> varies also among the Linux counts</font>

376
00:16:48,270 --> 00:16:54,270
and each task list structure contains a

377
00:16:52,110 --> 00:16:56,760
pointer to the<font color="#CCCCCC"> next task and also</font><font color="#E5E5E5"> the</font>

378
00:16:54,270 --> 00:17:00,000
process ID the name and also<font color="#E5E5E5"> the root of</font>

379
00:16:56,760 --> 00:17:02,370
the multi-level page<font color="#CCCCCC"> labor so we</font><font color="#E5E5E5"> can</font>

380
00:17:00,000 --> 00:17:05,819
search this structure using<font color="#E5E5E5"> male town</font><font color="#CCCCCC"> to</font>

381
00:17:02,370 --> 00:17:08,550
find the<font color="#E5E5E5"> process we want to target we</font>

382
00:17:05,819 --> 00:17:10,708
<font color="#E5E5E5">can then use the physical address using</font>

383
00:17:08,550 --> 00:17:14,490
the Beijing structures<font color="#E5E5E5"> to read directly</font>

384
00:17:10,709 --> 00:17:16,470
<font color="#E5E5E5">the memory</font><font color="#CCCCCC"> of this process and then read</font>

385
00:17:14,490 --> 00:17:19,500
the content using<font color="#CCCCCC"> the targeted physical</font>

386
00:17:16,470 --> 00:17:22,260
map with<font color="#E5E5E5"> our physical address we can</font>

387
00:17:19,500 --> 00:17:24,150
just<font color="#E5E5E5"> enumerate all mapped pages and dump</font>

388
00:17:22,260 --> 00:17:26,430
the<font color="#CCCCCC"> entire process memory</font><font color="#E5E5E5"> so we do not</font>

389
00:17:24,150 --> 00:17:30,030
need<font color="#E5E5E5"> to dump the entire physical memory</font>

390
00:17:26,430 --> 00:17:31,560
anymore<font color="#CCCCCC"> and if we know the location of</font>

391
00:17:30,030 --> 00:17:33,870
<font color="#E5E5E5">the key for instance that we want to</font>

392
00:17:31,560 --> 00:17:37,280
extract<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> just dump</font><font color="#E5E5E5"> the key</font>

393
00:17:33,870 --> 00:17:40,020
<font color="#CCCCCC">directly</font><font color="#E5E5E5"> so how can we solve that</font>

394
00:17:37,280 --> 00:17:42,090
the problem is rooted<font color="#E5E5E5"> in the hardware</font>

395
00:17:40,020 --> 00:17:44,340
that<font color="#CCCCCC"> we have and it's a race competition</font>

396
00:17:42,090 --> 00:17:46,709
<font color="#CCCCCC">between the permission check and the</font>

397
00:17:44,340 --> 00:17:49,379
memory fetch<font color="#E5E5E5"> so we can just serialize</font>

398
00:17:46,710 --> 00:17:51,660
them and we do not have that problem<font color="#E5E5E5"> or</font>

399
00:17:49,380 --> 00:17:54,750
we can introduce a half split of the

400
00:17:51,660 --> 00:17:56,940
<font color="#E5E5E5">user space and the kernel space where we</font>

401
00:17:54,750 --> 00:17:58,680
fix the<font color="#CCCCCC"> crown to the upper half of the</font>

402
00:17:56,940 --> 00:18:02,130
<font color="#CCCCCC">aerospace and the user to the</font>

403
00:17:58,680 --> 00:18:04,920
laughs and we just introduced a new<font color="#E5E5E5"> bit</font>

404
00:18:02,130 --> 00:18:08,040
<font color="#E5E5E5">to be backwards compatible</font><font color="#CCCCCC"> to figure</font><font color="#E5E5E5"> out</font>

405
00:18:04,920 --> 00:18:10,200
if we<font color="#E5E5E5"> have</font><font color="#CCCCCC"> detective but fixing the</font>

406
00:18:08,040 --> 00:18:14,070
hardware is a<font color="#CCCCCC"> long-term solution</font><font color="#E5E5E5"> so we</font>

407
00:18:10,200 --> 00:18:18,180
need a solution<font color="#E5E5E5"> in software and as you</font>

408
00:18:14,070 --> 00:18:19,620
<font color="#CCCCCC">remember earlier this is how the address</font>

409
00:18:18,180 --> 00:18:21,450
space looked like we had<font color="#CCCCCC"> the kernel</font>

410
00:18:19,620 --> 00:18:23,459
space map in there and the big problem

411
00:18:21,450 --> 00:18:25,890
<font color="#CCCCCC">is that when</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> are running</font><font color="#E5E5E5"> in user mode</font>

412
00:18:23,460 --> 00:18:27,990
<font color="#CCCCCC">we also have the curl mapped so we</font>

413
00:18:25,890 --> 00:18:29,970
should get rid<font color="#E5E5E5"> of the kernel while</font>

414
00:18:27,990 --> 00:18:33,360
<font color="#E5E5E5">running in user mode and this is</font>

415
00:18:29,970 --> 00:18:35,730
actually what the<font color="#E5E5E5"> Kaiser paper did so</font>

416
00:18:33,360 --> 00:18:37,679
whenever you have a context switch and

417
00:18:35,730 --> 00:18:39,950
running in user mode<font color="#E5E5E5"> you um map the</font>

418
00:18:37,680 --> 00:18:41,940
entire<font color="#CCCCCC"> curl and therefore also</font><font color="#E5E5E5"> T</font>

419
00:18:39,950 --> 00:18:43,380
identity mapping and then<font color="#E5E5E5"> you cannot</font>

420
00:18:41,940 --> 00:18:46,200
read anything anymore

421
00:18:43,380 --> 00:18:52,380
if you mount meltem<font color="#E5E5E5"> or so we</font><font color="#CCCCCC"> thought</font>

422
00:18:46,200 --> 00:18:54,810
<font color="#E5E5E5">until very recently so</font><font color="#CCCCCC"> Kaiser has been</font>

423
00:18:52,380 --> 00:18:57,150
published in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> summer</font><font color="#CCCCCC"> of 2017 at the</font>

424
00:18:54,810 --> 00:18:59,220
esos conference and it was<font color="#E5E5E5"> initially</font>

425
00:18:57,150 --> 00:19:01,950
<font color="#E5E5E5">proposed as a countermeasure against</font>

426
00:18:59,220 --> 00:19:04,530
other side channel attacks<font color="#E5E5E5"> but since</font>

427
00:19:01,950 --> 00:19:06,360
this massive<font color="#CCCCCC"> change to</font><font color="#E5E5E5"> the operating</font>

428
00:19:04,530 --> 00:19:09,330
<font color="#E5E5E5">system</font><font color="#CCCCCC"> where we do not</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> anything</font>

429
00:19:06,360 --> 00:19:11,580
mapped anymore brings also the<font color="#CCCCCC"> profit</font>

430
00:19:09,330 --> 00:19:16,379
<font color="#E5E5E5">that it also defeats male town</font><font color="#CCCCCC"> in this</font>

431
00:19:11,580 --> 00:19:18,629
case so<font color="#CCCCCC"> Melton then has been improved so</font>

432
00:19:16,380 --> 00:19:20,460
<font color="#CCCCCC">that sort of the Kaiser patch of</font><font color="#E5E5E5"> the</font>

433
00:19:18,630 --> 00:19:22,320
Kaiser paper has<font color="#CCCCCC"> been improved</font><font color="#E5E5E5"> and then</font>

434
00:19:20,460 --> 00:19:25,200
merged into<font color="#E5E5E5"> the Linux kernel</font><font color="#CCCCCC"> and the</font>

435
00:19:22,320 --> 00:19:27,689
name kpti<font color="#E5E5E5"> apple also released some</font>

436
00:19:25,200 --> 00:19:29,970
updates<font color="#E5E5E5"> and windows</font><font color="#CCCCCC"> have they have also</font>

437
00:19:27,690 --> 00:19:32,070
<font color="#E5E5E5">their implementation with the same</font>

438
00:19:29,970 --> 00:19:35,460
principles called kernel virtual<font color="#E5E5E5"> address</font>

439
00:19:32,070 --> 00:19:37,530
<font color="#CCCCCC">Shadow</font><font color="#E5E5E5"> and also for Samsung the phone</font>

440
00:19:35,460 --> 00:19:38,070
the patches have been rolled out<font color="#CCCCCC"> last</font>

441
00:19:37,530 --> 00:19:41,700
month

442
00:19:38,070 --> 00:19:43,679
so it's<font color="#E5E5E5"> also fixed there</font><font color="#CCCCCC"> we have a proof</font>

443
00:19:41,700 --> 00:19:45,510
of concept<font color="#CCCCCC"> implementation of our code</font>

444
00:19:43,680 --> 00:19:47,400
<font color="#CCCCCC">online you</font><font color="#E5E5E5"> can check</font><font color="#CCCCCC"> out the github</font>

445
00:19:45,510 --> 00:19:49,590
repository<font color="#E5E5E5"> and try to run it on</font><font color="#CCCCCC"> your</font>

446
00:19:47,400 --> 00:19:51,930
machine<font color="#E5E5E5"> hopefully you already have</font><font color="#CCCCCC"> two</font>

447
00:19:49,590 --> 00:19:55,020
patches<font color="#E5E5E5"> so you would need</font><font color="#CCCCCC"> to disable</font><font color="#E5E5E5"> the</font>

448
00:19:51,930 --> 00:19:59,070
mitigations<font color="#E5E5E5"> but you can go and play</font><font color="#CCCCCC"> with</font>

449
00:19:55,020 --> 00:20:01,200
<font color="#CCCCCC">that so to conclude</font><font color="#E5E5E5"> we underestimated</font>

450
00:19:59,070 --> 00:20:03,570
<font color="#CCCCCC">micro architectural attacks for</font><font color="#E5E5E5"> a long</font>

451
00:20:01,200 --> 00:20:05,760
time and with<font color="#E5E5E5"> Melton that we we have</font>

452
00:20:03,570 --> 00:20:07,830
seen that we can<font color="#E5E5E5"> read arbitrary kernel</font>

453
00:20:05,760 --> 00:20:11,100
memory<font color="#E5E5E5"> from user</font><font color="#CCCCCC"> space without any</font>

454
00:20:07,830 --> 00:20:12,678
privileges<font color="#E5E5E5"> or permissions it affected</font>

455
00:20:11,100 --> 00:20:15,110
<font color="#CCCCCC">millions of devices from</font>

456
00:20:12,679 --> 00:20:17,539
various CPU manufacturers and the

457
00:20:15,110 --> 00:20:21,229
countermeasure<font color="#CCCCCC"> that we have implemented</font>

458
00:20:17,539 --> 00:20:23,330
<font color="#E5E5E5">comes with a performance</font><font color="#CCCCCC"> impact</font><font color="#E5E5E5"> so I</font>

459
00:20:21,230 --> 00:20:26,450
invite<font color="#CCCCCC"> you to</font><font color="#E5E5E5"> check out also the next</font>

460
00:20:23,330 --> 00:20:28,820
<font color="#CCCCCC">stock because it brings some nice new</font>

461
00:20:26,450 --> 00:20:29,360
insights<font color="#E5E5E5"> and thank you for your</font>

462
00:20:28,820 --> 00:20:30,860
attention

463
00:20:29,360 --> 00:20:42,709
<font color="#E5E5E5">and if you have any questions feel free</font>

464
00:20:30,860 --> 00:20:43,998
to ask<font color="#E5E5E5"> questions</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> young ginger from</font>

465
00:20:42,710 --> 00:20:48,289
<font color="#E5E5E5">Oregon</font><font color="#CCCCCC"> State University</font>

466
00:20:43,999 --> 00:20:50,389
impressive work<font color="#E5E5E5"> and I have tried to like</font>

467
00:20:48,289 --> 00:20:53,090
a replicate the meltdown attack again

468
00:20:50,389 --> 00:20:57,100
and<font color="#CCCCCC"> again</font><font color="#E5E5E5"> definitely with</font><font color="#CCCCCC"> the l1 cache</font>

469
00:20:53,090 --> 00:21:00,168
<font color="#CCCCCC">yet</font><font color="#E5E5E5"> it works very well yeah I'm very</font>

470
00:20:57,100 --> 00:21:02,029
<font color="#E5E5E5">surprised</font><font color="#CCCCCC"> that like a uncashed</font><font color="#E5E5E5"> attack</font>

471
00:21:00,169 --> 00:21:04,610
<font color="#E5E5E5">also works so could you share a little</font>

472
00:21:02,029 --> 00:21:06,619
<font color="#CCCCCC">bit</font><font color="#E5E5E5"> of details of the how can you make</font>

473
00:21:04,610 --> 00:21:10,039
<font color="#E5E5E5">the successful attack in like a 10 by so</font>

474
00:21:06,619 --> 00:21:11,389
<font color="#CCCCCC">ii that's quite impressive because is it</font>

475
00:21:10,039 --> 00:21:13,908
something like<font color="#E5E5E5"> you're just trying to</font>

476
00:21:11,389 --> 00:21:15,949
address modern times when then you

477
00:21:13,909 --> 00:21:18,379
eventually get<font color="#CCCCCC"> something</font><font color="#E5E5E5"> work you</font>

478
00:21:15,950 --> 00:21:20,299
apparently<font color="#E5E5E5"> it also gets</font><font color="#CCCCCC"> removed</font><font color="#E5E5E5"> into the</font>

479
00:21:18,379 --> 00:21:22,189
cache at some point<font color="#E5E5E5"> but there some other</font>

480
00:21:20,299 --> 00:21:23,990
<font color="#E5E5E5">tricks that you could do when you mount</font>

481
00:21:22,190 --> 00:21:26,690
<font color="#E5E5E5">a Melton attack one represented at</font>

482
00:21:23,990 --> 00:21:29,059
blackhat last week you<font color="#CCCCCC"> just it's not</font>

483
00:21:26,690 --> 00:21:30,649
intuitive<font color="#E5E5E5"> but you just before accessing</font>

484
00:21:29,059 --> 00:21:33,590
<font color="#E5E5E5">the address you're not allowed</font><font color="#CCCCCC"> to access</font>

485
00:21:30,649 --> 00:21:35,090
<font color="#E5E5E5">you access a null pointer and with that</font>

486
00:21:33,590 --> 00:21:38,889
you increase<font color="#E5E5E5"> the chance to read the</font>

487
00:21:35,090 --> 00:21:42,830
actual value significantly<font color="#CCCCCC"> so is your</font>

488
00:21:38,889 --> 00:21:48,408
<font color="#CCCCCC">Intel</font><font color="#E5E5E5"> processor will eventually cache to</font>

489
00:21:42,830 --> 00:21:51,289
<font color="#CCCCCC">someone in the cache memory in under</font>

490
00:21:48,409 --> 00:21:54,409
<font color="#CCCCCC">cacheable so uncatchable memory should</font>

491
00:21:51,289 --> 00:21:56,570
not ever be pulled into the cache<font color="#E5E5E5"> but as</font>

492
00:21:54,409 --> 00:21:58,460
we've seen it could be directly served

493
00:21:56,570 --> 00:22:00,168
<font color="#E5E5E5">from the line buffer so there are more</font>

494
00:21:58,460 --> 00:22:02,179
constraints in mounting the attack with

495
00:22:00,169 --> 00:22:04,429
uncatchable memory<font color="#E5E5E5"> yes so you need to</font>

496
00:22:02,179 --> 00:22:07,249
run with<font color="#E5E5E5"> on the same physical</font><font color="#CCCCCC"> core</font>

497
00:22:04,429 --> 00:22:09,499
because those line buffers are<font color="#CCCCCC"> feared on</font>

498
00:22:07,249 --> 00:22:11,299
<font color="#E5E5E5">there otherwise it won't work</font><font color="#CCCCCC"> so you</font>

499
00:22:09,499 --> 00:22:15,490
need<font color="#E5E5E5"> to pin your attack code on those</font>

500
00:22:11,299 --> 00:22:15,490
cause<font color="#E5E5E5"> okay thank you you're welcome</font>

501
00:22:15,820 --> 00:22:22,580
other questions<font color="#E5E5E5"> okay so let's thank</font>

502
00:22:21,350 --> 00:22:28,339
<font color="#CCCCCC">Moritz again</font>

503
00:22:22,580 --> 00:22:28,339
[Applause]

