1
00:00:10,470 --> 00:00:16,650
Navis precise and scalable exploit

2
00:00:13,470 --> 00:00:20,100
generation approach for dynamic web

3
00:00:16,650 --> 00:00:23,759
<font color="#CCCCCC">applications it is a joint</font><font color="#E5E5E5"> work with</font>

4
00:00:20,100 --> 00:00:28,800
with regular<font color="#E5E5E5"> memo</font><font color="#CCCCCC"> Brianna sheet and I</font>

5
00:00:23,760 --> 00:00:31,970
think<font color="#CCCCCC"> advocate a krishna</font><font color="#E5E5E5"> modern web</font>

6
00:00:28,800 --> 00:00:35,340
applications<font color="#E5E5E5"> typically include many</font>

7
00:00:31,970 --> 00:00:48,019
dynamic features that generate contents

8
00:00:35,340 --> 00:00:48,020
on the<font color="#E5E5E5"> fly based on your based on use</font>

9
00:00:48,980 --> 00:00:57,980
based on users interactions and other

10
00:00:52,260 --> 00:01:01,890
inputs such dynamism<font color="#CCCCCC"> such dynamism</font>

11
00:00:57,980 --> 00:01:05,039
<font color="#E5E5E5">improve the usability as well as the</font>

12
00:01:01,890 --> 00:01:09,770
responsiveness<font color="#E5E5E5"> of of those applications</font>

13
00:01:05,040 --> 00:01:12,619
<font color="#CCCCCC">to</font><font color="#E5E5E5"> users</font><font color="#CCCCCC"> in addition to that some tasks</font>

14
00:01:09,770 --> 00:01:14,820
functionalities like<font color="#CCCCCC"> for example</font>

15
00:01:12,619 --> 00:01:19,440
purchasing an item<font color="#E5E5E5"> from an online</font>

16
00:01:14,820 --> 00:01:24,600
<font color="#E5E5E5">shopping application require a series of</font>

17
00:01:19,440 --> 00:01:27,240
steps<font color="#E5E5E5"> to</font><font color="#CCCCCC"> accomplish for example viewing</font>

18
00:01:24,600 --> 00:01:29,339
items selecting some adding them to

19
00:01:27,240 --> 00:01:35,990
shopping<font color="#E5E5E5"> to</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> shopping cart and then</font>

20
00:01:29,340 --> 00:01:38,970
finally checking<font color="#E5E5E5"> out</font><font color="#CCCCCC"> usually</font><font color="#E5E5E5"> those steps</font>

21
00:01:35,990 --> 00:01:42,210
<font color="#E5E5E5">accomplished through different modules</font>

22
00:01:38,970 --> 00:01:45,570
of the application and<font color="#E5E5E5"> there there are</font>

23
00:01:42,210 --> 00:01:54,479
strong dependencies between those

24
00:01:45,570 --> 00:01:58,309
interrelated modules<font color="#E5E5E5"> these</font>

25
00:01:54,479 --> 00:02:01,710
characteristics however increase the

26
00:01:58,310 --> 00:02:04,860
applications complexity as well as

27
00:02:01,710 --> 00:02:10,109
raising<font color="#E5E5E5"> the difficulty</font><font color="#CCCCCC"> bar for analyzing</font>

28
00:02:04,860 --> 00:02:14,870
the<font color="#E5E5E5"> security of</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> applications this</font>

29
00:02:10,110 --> 00:02:19,680
<font color="#CCCCCC">is a simple online shopping</font><font color="#E5E5E5"> application</font>

30
00:02:14,870 --> 00:02:24,830
<font color="#E5E5E5">it has</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> it has three simple modules</font>

31
00:02:19,680 --> 00:02:28,050
that represent its item purchasing logic

32
00:02:24,830 --> 00:02:32,250
<font color="#E5E5E5">let's assume</font><font color="#CCCCCC"> that an attacker</font><font color="#E5E5E5"> wants to</font>

33
00:02:28,050 --> 00:02:33,870
exploit this application<font color="#CCCCCC"> he has first to</font>

34
00:02:32,250 --> 00:02:37,260
find a vulnerability<font color="#CCCCCC"> that can be</font>

35
00:02:33,870 --> 00:02:39,450
exploited<font color="#CCCCCC"> then he has to craft a</font>

36
00:02:37,260 --> 00:02:43,049
malicious input for that<font color="#E5E5E5"> vulnerability</font>

37
00:02:39,450 --> 00:02:46,290
<font color="#E5E5E5">and then the last thing</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> he has</font>

38
00:02:43,050 --> 00:02:49,650
to<font color="#CCCCCC"> find a navigation path that will</font>

39
00:02:46,290 --> 00:02:54,049
reach and trigger and trigger the

40
00:02:49,650 --> 00:02:59,190
triggers the vulnerability in that sink

41
00:02:54,050 --> 00:03:01,380
this<font color="#E5E5E5"> is an concrete exploit for a</font>

42
00:02:59,190 --> 00:03:06,109
vulnerability like let's say<font color="#E5E5E5"> in</font><font color="#CCCCCC"> checkout</font>

43
00:03:01,380 --> 00:03:11,280
dot<font color="#E5E5E5"> PHP this exploit is composed of</font>

44
00:03:06,110 --> 00:03:14,190
three HTTP requests<font color="#CCCCCC"> dos HTTP requests</font>

45
00:03:11,280 --> 00:03:17,360
will<font color="#CCCCCC"> navigate the application</font><font color="#E5E5E5"> from a</font>

46
00:03:14,190 --> 00:03:21,530
public page via dot PHP

47
00:03:17,360 --> 00:03:24,870
until it the<font color="#CCCCCC"> request until the execution</font>

48
00:03:21,530 --> 00:03:28,410
reaches the sink and check out the PHP

49
00:03:24,870 --> 00:03:31,680
and expand exploits that<font color="#E5E5E5"> vulnerability</font>

50
00:03:28,410 --> 00:03:38,609
by by by sending<font color="#CCCCCC"> that the malicious</font>

51
00:03:31,680 --> 00:03:42,230
important read constructing exploits

52
00:03:38,610 --> 00:03:48,470
automatically for larger applications<font color="#E5E5E5"> is</font>

53
00:03:42,230 --> 00:03:48,470
challenging the<font color="#E5E5E5"> first reason is that</font>

54
00:03:48,560 --> 00:03:58,830
<font color="#E5E5E5">usually large web applications consists</font>

55
00:03:53,250 --> 00:04:02,730
of<font color="#E5E5E5"> many modules and there are a large</font>

56
00:03:58,830 --> 00:04:07,590
number of interim module execution paths

57
00:04:02,730 --> 00:04:12,000
and<font color="#CCCCCC"> in those applications the second</font>

58
00:04:07,590 --> 00:04:14,310
challenge is<font color="#CCCCCC"> sink</font><font color="#E5E5E5"> suitability</font><font color="#CCCCCC"> what if a</font>

59
00:04:12,000 --> 00:04:19,048
vulnerable sink<font color="#E5E5E5"> that we want to generate</font>

60
00:04:14,310 --> 00:04:24,569
an exploit<font color="#CCCCCC"> for is located deep in</font>

61
00:04:19,048 --> 00:04:27,359
<font color="#CCCCCC">this interrelated modules</font><font color="#E5E5E5"> structure the</font>

62
00:04:24,569 --> 00:04:31,830
<font color="#E5E5E5">the solution is that the exploit has to</font>

63
00:04:27,360 --> 00:04:37,169
<font color="#CCCCCC">navigate through those modules</font><font color="#E5E5E5"> and it</font>

64
00:04:31,830 --> 00:04:42,210
has to satisfy the<font color="#CCCCCC"> constraints</font><font color="#E5E5E5"> required</font>

65
00:04:37,169 --> 00:04:48,330
that each enjoy at each Junction are in

66
00:04:42,210 --> 00:04:51,859
in this navigation<font color="#E5E5E5"> path</font><font color="#CCCCCC"> as I mentioned</font>

67
00:04:48,330 --> 00:04:55,919
<font color="#E5E5E5">before</font><font color="#CCCCCC"> web</font><font color="#E5E5E5"> applications often</font><font color="#CCCCCC"> combined</font>

68
00:04:51,860 --> 00:04:59,580
contain<font color="#E5E5E5"> features that are revealed only</font>

69
00:04:55,919 --> 00:05:02,969
<font color="#E5E5E5">when the application is executed</font><font color="#CCCCCC"> these</font>

70
00:04:59,580 --> 00:05:06,240
features<font color="#E5E5E5"> include dynamically generated</font>

71
00:05:02,969 --> 00:05:08,849
forms and links that<font color="#CCCCCC"> may derive the</font>

72
00:05:06,240 --> 00:05:12,930
navigation<font color="#CCCCCC"> of the application to</font>

73
00:05:08,849 --> 00:05:18,270
vulnerable sinks<font color="#CCCCCC"> the other challenge</font>

74
00:05:12,930 --> 00:05:21,020
that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> need to tackle is is is related</font>

75
00:05:18,270 --> 00:05:22,969
to<font color="#E5E5E5"> the goal of generating exploits</font>

76
00:05:21,020 --> 00:05:26,549
<font color="#E5E5E5">automatically for different</font>

77
00:05:22,969 --> 00:05:28,919
vulnerability types<font color="#CCCCCC"> we want to generate</font>

78
00:05:26,550 --> 00:05:31,169
automatically exploits for injection

79
00:05:28,919 --> 00:05:34,500
vulnerabilities like<font color="#E5E5E5"> sequel injection</font>

80
00:05:31,169 --> 00:05:37,130
<font color="#CCCCCC">file inclusion</font><font color="#E5E5E5"> codecs code execution</font><font color="#CCCCCC"> as</font>

81
00:05:34,500 --> 00:05:41,009
well as logic vulnerabilities like

82
00:05:37,130 --> 00:05:44,779
execution after redirect and we want to

83
00:05:41,009 --> 00:05:51,090
achieve<font color="#E5E5E5"> this goal with minimal changes</font>

84
00:05:44,779 --> 00:05:58,020
<font color="#E5E5E5">to the analysis so the the goal of this</font>

85
00:05:51,090 --> 00:06:00,779
work is is to<font color="#E5E5E5"> to to develop an automatic</font>

86
00:05:58,020 --> 00:06:05,310
exploit generation approach that

87
00:06:00,779 --> 00:06:07,630
addresses<font color="#CCCCCC"> all these challenges our main</font>

88
00:06:05,310 --> 00:06:12,340
contribution is

89
00:06:07,630 --> 00:06:16,150
Navis is a which is<font color="#CCCCCC"> a system that</font><font color="#E5E5E5"> scales</font>

90
00:06:12,340 --> 00:06:22,750
the process of automatic<font color="#E5E5E5"> exploit</font>

91
00:06:16,150 --> 00:06:29,020
generation<font color="#E5E5E5"> to large applications and nav</font>

92
00:06:22,750 --> 00:06:35,020
<font color="#CCCCCC">excite over 200 exploits in modern web</font>

93
00:06:29,020 --> 00:06:38,620
applications<font color="#E5E5E5"> at a high level</font>

94
00:06:35,020 --> 00:06:42,940
our<font color="#E5E5E5"> approach combines static and dynamic</font>

95
00:06:38,620 --> 00:06:46,920
analysis techniques<font color="#CCCCCC"> to</font><font color="#E5E5E5"> construct explore</font>

96
00:06:42,940 --> 00:06:49,840
exploits<font color="#E5E5E5"> Empire in particular we find</font>

97
00:06:46,920 --> 00:06:52,110
vulnerabilities in the code statically

98
00:06:49,840 --> 00:06:56,440
by analyzing the source code<font color="#E5E5E5"> first</font><font color="#CCCCCC"> and</font>

99
00:06:52,110 --> 00:07:00,940
then we build dynamically<font color="#E5E5E5"> a</font><font color="#CCCCCC"> graph that</font>

100
00:06:56,440 --> 00:07:04,480
<font color="#E5E5E5">represents the the navigation behavior</font>

101
00:07:00,940 --> 00:07:07,690
of the<font color="#CCCCCC"> application and then we use</font><font color="#E5E5E5"> that</font>

102
00:07:04,480 --> 00:07:10,870
navigation draft<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the identified</font>

103
00:07:07,690 --> 00:07:14,830
vulnerabilities<font color="#E5E5E5"> to find paths to those</font>

104
00:07:10,870 --> 00:07:18,190
vulnerabilities<font color="#E5E5E5"> and a final exploit</font>

105
00:07:14,830 --> 00:07:22,000
construction step is<font color="#E5E5E5"> is the last in our</font>

106
00:07:18,190 --> 00:07:26,200
approach<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have implemented this</font>

107
00:07:22,000 --> 00:07:29,380
approach in<font color="#CCCCCC"> nav --ax the input</font><font color="#E5E5E5"> to the</font>

108
00:07:26,200 --> 00:07:33,460
tool is the application source code<font color="#E5E5E5"> and</font>

109
00:07:29,380 --> 00:07:35,500
an attack dictionary basically the

110
00:07:33,460 --> 00:07:38,739
attack dictionary has attack

111
00:07:35,500 --> 00:07:41,860
specifications for each vulnerability

112
00:07:38,740 --> 00:07:45,970
type that we are studying<font color="#CCCCCC"> these</font>

113
00:07:41,860 --> 00:07:49,290
<font color="#E5E5E5">specifications basically contain lists</font>

114
00:07:45,970 --> 00:07:53,710
of<font color="#E5E5E5"> sinks sanitization x'</font>

115
00:07:49,290 --> 00:07:56,100
<font color="#CCCCCC">attack strings and and so</font><font color="#E5E5E5"> on we we</font>

116
00:07:53,710 --> 00:08:00,760
mainly<font color="#CCCCCC"> use the</font><font color="#E5E5E5"> attack dictionary to</font>

117
00:07:56,100 --> 00:08:04,180
instantiate analysis<font color="#CCCCCC"> templates for for</font>

118
00:08:00,760 --> 00:08:08,320
<font color="#E5E5E5">the targets all the vulnerability types</font>

119
00:08:04,180 --> 00:08:10,830
that we want to<font color="#E5E5E5"> generate exploits for</font><font color="#CCCCCC"> it</font>

120
00:08:08,320 --> 00:08:14,289
is<font color="#CCCCCC"> a composed of</font><font color="#E5E5E5"> two main steps</font>

121
00:08:10,830 --> 00:08:22,599
<font color="#E5E5E5">vulnerable sinks identification and</font>

122
00:08:14,289 --> 00:08:26,259
the concrete<font color="#E5E5E5"> exploits generation</font><font color="#CCCCCC"> in the</font>

123
00:08:22,599 --> 00:08:31,360
first step in the first<font color="#E5E5E5"> step we we</font>

124
00:08:26,259 --> 00:08:35,589
create<font color="#CCCCCC"> a model</font><font color="#E5E5E5"> of individual modules of</font>

125
00:08:31,360 --> 00:08:38,050
the application and and also<font color="#CCCCCC"> we analyze</font>

126
00:08:35,589 --> 00:08:41,860
each<font color="#E5E5E5"> module in the</font><font color="#CCCCCC"> applications</font>

127
00:08:38,049 --> 00:08:45,099
<font color="#E5E5E5">separately and the motivation for this</font>

128
00:08:41,860 --> 00:08:49,839
is to add to address<font color="#E5E5E5"> the scalability</font>

129
00:08:45,100 --> 00:08:53,350
issues the<font color="#E5E5E5"> scalability challenges</font><font color="#CCCCCC"> by</font>

130
00:08:49,839 --> 00:08:55,959
<font color="#CCCCCC">doing that</font><font color="#E5E5E5"> we prioritize only the</font>

131
00:08:53,350 --> 00:08:58,500
modules<font color="#E5E5E5"> we prioritize the modules</font><font color="#CCCCCC"> that</font>

132
00:08:55,959 --> 00:09:01,930
have potentially exploitable

133
00:08:58,500 --> 00:09:06,459
vulnerability and we further analyze

134
00:09:01,930 --> 00:09:09,279
<font color="#E5E5E5">them later</font><font color="#CCCCCC"> our graph model of the of the</font>

135
00:09:06,459 --> 00:09:14,619
of the code is based on code property

136
00:09:09,279 --> 00:09:19,990
graphs<font color="#CCCCCC"> code property graph is a graph</font>

137
00:09:14,620 --> 00:09:23,220
<font color="#CCCCCC">that combines different</font><font color="#E5E5E5"> representations</font>

138
00:09:19,990 --> 00:09:26,560
of the source code in one in<font color="#E5E5E5"> one graph</font>

139
00:09:23,220 --> 00:09:30,670
<font color="#E5E5E5">like for</font><font color="#CCCCCC"> example the</font><font color="#E5E5E5"> ASD</font><font color="#CCCCCC"> the code the</font>

140
00:09:26,560 --> 00:09:33,339
control flow graph<font color="#CCCCCC"> Col graphs and data</font>

141
00:09:30,670 --> 00:09:36,969
dependency graphs are all combined in<font color="#CCCCCC"> in</font>

142
00:09:33,339 --> 00:09:41,290
<font color="#CCCCCC">one graph called code property graph we</font>

143
00:09:36,970 --> 00:09:44,589
use this model to<font color="#E5E5E5"> to to find</font>

144
00:09:41,290 --> 00:09:46,390
<font color="#E5E5E5">vulnerabilities</font><font color="#CCCCCC"> and since our ultimate</font>

145
00:09:44,589 --> 00:09:50,829
goal<font color="#E5E5E5"> is not only to find vulnerabilities</font>

146
00:09:46,390 --> 00:09:55,689
but to generate exploits<font color="#CCCCCC"> we've extended</font>

147
00:09:50,829 --> 00:09:58,000
code property graph with two tags

148
00:09:55,690 --> 00:10:03,930
sanitization<font color="#E5E5E5"> and database constraint</font>

149
00:09:58,000 --> 00:10:10,470
tags those tags are basically attributes

150
00:10:03,930 --> 00:10:13,910
that we<font color="#CCCCCC"> use to filter</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> to to to</font>

151
00:10:10,470 --> 00:10:16,790
<font color="#CCCCCC">prioritize or to filter out</font>

152
00:10:13,910 --> 00:10:25,189
large number of potential potentially an

153
00:10:16,790 --> 00:10:29,209
exploitable paths<font color="#CCCCCC"> in the next step</font><font color="#E5E5E5"> we</font>

154
00:10:25,190 --> 00:10:32,900
use<font color="#E5E5E5"> that graph to</font><font color="#CCCCCC"> find vulnerable paths</font>

155
00:10:29,210 --> 00:10:37,040
between<font color="#E5E5E5"> sources and sinks and its path</font>

156
00:10:32,900 --> 00:10:40,130
sensitive analysis<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to graph</font>

157
00:10:37,040 --> 00:10:42,770
traversal algorithms based on the

158
00:10:40,130 --> 00:10:45,770
vulnerability type that we<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to to</font>

159
00:10:42,770 --> 00:10:50,420
find<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example for injection</font>

160
00:10:45,770 --> 00:10:53,750
vulnerabilities we with<font color="#E5E5E5"> which we</font>

161
00:10:50,420 --> 00:10:55,569
<font color="#CCCCCC">traverse the data dependency edges in in</font>

162
00:10:53,750 --> 00:11:00,100
the enhanced code<font color="#E5E5E5"> property graph</font>

163
00:10:55,570 --> 00:11:02,870
backwards from sinks<font color="#CCCCCC"> to sources</font><font color="#E5E5E5"> and</font>

164
00:11:00,100 --> 00:11:06,530
while we are searching<font color="#CCCCCC"> the graph we</font>

165
00:11:02,870 --> 00:11:13,090
utilize the the tags to help<font color="#E5E5E5"> us prune</font>

166
00:11:06,530 --> 00:11:16,280
out potentially unexploited<font color="#CCCCCC"> paths and</font>

167
00:11:13,090 --> 00:11:18,170
then after we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> all the the</font>

168
00:11:16,280 --> 00:11:22,040
vulnerable paths between<font color="#E5E5E5"> sources and</font>

169
00:11:18,170 --> 00:11:26,990
sinks<font color="#E5E5E5"> we construct formulas and</font><font color="#CCCCCC"> we use a</font>

170
00:11:22,040 --> 00:11:29,540
constraint solver to to<font color="#E5E5E5"> basically solve</font>

171
00:11:26,990 --> 00:11:34,160
those<font color="#E5E5E5"> constraints and and generate</font>

172
00:11:29,540 --> 00:11:38,589
exploits<font color="#E5E5E5"> only between the from the</font>

173
00:11:34,160 --> 00:11:38,589
source<font color="#E5E5E5"> only that reaches the the sink</font>

174
00:11:39,010 --> 00:11:44,120
<font color="#CCCCCC">the next the next</font><font color="#E5E5E5"> step is to</font><font color="#CCCCCC"> generate</font>

175
00:11:42,470 --> 00:11:47,500
concrete exploits<font color="#E5E5E5"> for the</font>

176
00:11:44,120 --> 00:11:52,700
vulnerabilities that we identified and

177
00:11:47,500 --> 00:11:57,850
navot6 acute several steps as<font color="#E5E5E5"> shown in</font>

178
00:11:52,700 --> 00:12:03,530
this figure<font color="#E5E5E5"> first a dynamic execution</font>

179
00:11:57,850 --> 00:12:07,020
<font color="#E5E5E5">component execute the</font><font color="#CCCCCC"> application so</font>

180
00:12:03,530 --> 00:12:09,870
<font color="#CCCCCC">that all the dynamic features</font>

181
00:12:07,020 --> 00:12:15,090
or the dynamic code in the in the

182
00:12:09,870 --> 00:12:19,310
application is explicit<font color="#E5E5E5"> for that we use</font>

183
00:12:15,090 --> 00:12:24,590
a crawler<font color="#E5E5E5"> that that basically crawls the</font>

184
00:12:19,310 --> 00:12:27,630
application and extracts<font color="#E5E5E5"> links and forms</font>

185
00:12:24,590 --> 00:12:30,840
<font color="#CCCCCC">for links for all extracted links we use</font>

186
00:12:27,630 --> 00:12:35,400
those links<font color="#CCCCCC"> to</font><font color="#E5E5E5"> as a seed as seeds for</font>

187
00:12:30,840 --> 00:12:39,150
the next<font color="#E5E5E5"> URLs</font><font color="#CCCCCC"> to crawl</font><font color="#E5E5E5"> for forms we we</font>

188
00:12:35,400 --> 00:12:44,280
have we<font color="#CCCCCC"> have we should</font><font color="#E5E5E5"> have support for</font>

189
00:12:39,150 --> 00:12:47,250
important for those forms<font color="#E5E5E5"> and to do that</font>

190
00:12:44,280 --> 00:12:51,240
we we automatically generate<font color="#E5E5E5"> inputs for</font>

191
00:12:47,250 --> 00:12:53,310
those forms by<font color="#E5E5E5"> extracting I'll explain</font>

192
00:12:51,240 --> 00:12:56,390
that later<font color="#E5E5E5"> bike select extracting</font>

193
00:12:53,310 --> 00:13:00,060
constraints<font color="#E5E5E5"> from the default and</font>

194
00:12:56,390 --> 00:13:03,630
generating inputs<font color="#E5E5E5"> that will be accepted</font>

195
00:13:00,060 --> 00:13:09,300
by the<font color="#E5E5E5"> application automatically and we</font>

196
00:13:03,630 --> 00:13:12,300
also have<font color="#E5E5E5"> support for generating inputs</font>

197
00:13:09,300 --> 00:13:16,500
from JavaScript code that<font color="#E5E5E5"> validates</font>

198
00:13:12,300 --> 00:13:21,300
those forms the the the the<font color="#E5E5E5"> and the</font>

199
00:13:16,500 --> 00:13:25,620
JavaScript analysis part is based on a

200
00:13:21,300 --> 00:13:32,819
cone<font color="#E5E5E5"> colic execution of one of our tools</font>

201
00:13:25,620 --> 00:13:36,300
<font color="#CCCCCC">called no</font><font color="#E5E5E5"> tamper we use all the crawl</font>

202
00:13:32,820 --> 00:13:38,460
all<font color="#CCCCCC"> the cold information the</font><font color="#E5E5E5"> links and</font>

203
00:13:36,300 --> 00:13:41,550
<font color="#E5E5E5">the forms that we've generated</font><font color="#CCCCCC"> inputs</font>

204
00:13:38,460 --> 00:13:44,580
<font color="#E5E5E5">for to build the navigation graph the</font>

205
00:13:41,550 --> 00:13:48,209
navigation graph is a graph that

206
00:13:44,580 --> 00:13:53,100
<font color="#E5E5E5">represents the</font><font color="#CCCCCC"> application the whole</font>

207
00:13:48,210 --> 00:13:57,590
application<font color="#E5E5E5"> navigation it's a directed</font>

208
00:13:53,100 --> 00:14:01,860
graph<font color="#E5E5E5"> and nodes represent HTTP requests</font>

209
00:13:57,590 --> 00:14:06,150
edges represent navigations between

210
00:14:01,860 --> 00:14:10,560
those nodes<font color="#E5E5E5"> either of type links link or</font>

211
00:14:06,150 --> 00:14:12,720
<font color="#CCCCCC">form</font><font color="#E5E5E5"> and then finally we use the</font>

212
00:14:10,560 --> 00:14:18,000
navigation this<font color="#CCCCCC"> constructed navigation</font>

213
00:14:12,720 --> 00:14:20,520
graph<font color="#E5E5E5"> to and the output of step one to</font>

214
00:14:18,000 --> 00:14:28,100
find navigation path<font color="#CCCCCC"> to</font>

215
00:14:20,520 --> 00:14:31,230
<font color="#CCCCCC">vulnerable sinks this this chart</font>

216
00:14:28,100 --> 00:14:34,830
summarizes our<font color="#E5E5E5"> automatic import</font>

217
00:14:31,230 --> 00:14:38,390
generation for for for the<font color="#E5E5E5"> current site</font>

218
00:14:34,830 --> 00:14:43,080
for for the forms<font color="#E5E5E5"> as I mentioned earlier</font>

219
00:14:38,390 --> 00:14:46,380
<font color="#E5E5E5">we extract formulas from the form input</font>

220
00:14:43,080 --> 00:14:49,890
fields as well<font color="#CCCCCC"> as</font><font color="#E5E5E5"> the JavaScript code</font>

221
00:14:46,380 --> 00:14:53,340
<font color="#CCCCCC">that validates this form</font><font color="#E5E5E5"> and we use a</font>

222
00:14:49,890 --> 00:14:57,870
constraint solver to to generate<font color="#E5E5E5"> inputs</font>

223
00:14:53,340 --> 00:15:02,550
that satisfy those constraints<font color="#CCCCCC"> we</font>

224
00:14:57,870 --> 00:15:04,490
formulate an HTTP request based on<font color="#E5E5E5"> those</font>

225
00:15:02,550 --> 00:15:08,910
<font color="#CCCCCC">inputs that we got</font><font color="#E5E5E5"> from the solver and</font>

226
00:15:04,490 --> 00:15:13,650
we feed that<font color="#E5E5E5"> to the crawler</font><font color="#CCCCCC"> in the next</font>

227
00:15:08,910 --> 00:15:19,110
step we we utilize an execution<font color="#E5E5E5"> trace</font>

228
00:15:13,650 --> 00:15:21,240
tracing engine that generates<font color="#E5E5E5"> that</font>

229
00:15:19,110 --> 00:15:24,900
<font color="#E5E5E5">generates traces</font><font color="#CCCCCC"> while the application</font>

230
00:15:21,240 --> 00:15:29,750
<font color="#CCCCCC">is execution</font><font color="#E5E5E5"> the the goal behind this</font>

231
00:15:24,900 --> 00:15:33,420
<font color="#E5E5E5">step is that when a user submits a form</font>

232
00:15:29,750 --> 00:15:37,800
the<font color="#E5E5E5"> the job the the</font><font color="#CCCCCC"> server-side code of</font>

233
00:15:33,420 --> 00:15:40,709
the application<font color="#CCCCCC"> usually in for</font><font color="#E5E5E5"> enforces</font>

234
00:15:37,800 --> 00:15:44,329
more constraints on the own<font color="#E5E5E5"> the inputs</font>

235
00:15:40,710 --> 00:15:47,310
<font color="#E5E5E5">that will be accepted by the application</font>

236
00:15:44,330 --> 00:15:49,590
<font color="#E5E5E5">so for</font><font color="#CCCCCC"> that reason we analyzed the trace</font>

237
00:15:47,310 --> 00:15:53,880
information<font color="#CCCCCC"> that we got</font><font color="#E5E5E5"> from the trace</font>

238
00:15:49,590 --> 00:15:57,960
engine<font color="#E5E5E5"> to check if the application</font>

239
00:15:53,880 --> 00:15:59,700
accepted the<font color="#CCCCCC"> forth accepted the accepted</font>

240
00:15:57,960 --> 00:16:02,940
the inputs<font color="#E5E5E5"> or not</font>

241
00:15:59,700 --> 00:16:06,600
if<font color="#CCCCCC"> the application did not accept the</font>

242
00:16:02,940 --> 00:16:08,460
form<font color="#E5E5E5"> we analyzed the trace</font><font color="#CCCCCC"> 2 to extract</font>

243
00:16:06,600 --> 00:16:11,730
the constraints<font color="#E5E5E5"> from the server-side</font>

244
00:16:08,460 --> 00:16:15,420
<font color="#E5E5E5">code and we use a con</font><font color="#CCCCCC"> colic execution</font><font color="#E5E5E5"> to</font>

245
00:16:11,730 --> 00:16:17,820
derive formulas and<font color="#CCCCCC"> we</font><font color="#E5E5E5"> feed that formula</font>

246
00:16:15,420 --> 00:16:19,949
<font color="#E5E5E5">back to the solver and so on until we we</font>

247
00:16:17,820 --> 00:16:22,800
find<font color="#CCCCCC"> Intellivision</font><font color="#E5E5E5"> we successfully</font>

248
00:16:19,950 --> 00:16:25,700
generate inputs<font color="#E5E5E5"> that will be accepted by</font>

249
00:16:22,800 --> 00:16:25,699
the<font color="#E5E5E5"> application</font>

250
00:16:28,730 --> 00:16:34,670
Navitus reports<font color="#E5E5E5"> the locations of the</font>

251
00:16:31,830 --> 00:16:38,460
<font color="#E5E5E5">venerable sinks using the</font><font color="#CCCCCC"> information</font>

252
00:16:34,670 --> 00:16:40,949
using<font color="#E5E5E5"> the using this information to</font>

253
00:16:38,460 --> 00:16:44,720
<font color="#E5E5E5">search and navigation graph is not</font>

254
00:16:40,950 --> 00:16:50,640
sufficient because<font color="#CCCCCC"> of the file inclusion</font>

255
00:16:44,720 --> 00:16:52,380
in web application<font color="#E5E5E5"> so for example if</font>

256
00:16:50,640 --> 00:16:55,620
there is<font color="#CCCCCC"> a vulnerability</font><font color="#E5E5E5"> reported and</font>

257
00:16:52,380 --> 00:16:58,170
check out the PHP and that file<font color="#CCCCCC"> is</font>

258
00:16:55,620 --> 00:17:00,390
included<font color="#E5E5E5"> by another file</font><font color="#CCCCCC"> in the</font>

259
00:16:58,170 --> 00:17:02,280
<font color="#E5E5E5">navigation graph to search for a node</font>

260
00:17:00,390 --> 00:17:07,290
<font color="#CCCCCC">that has a</font><font color="#E5E5E5"> URL that</font><font color="#CCCCCC"> matches check out</font>

261
00:17:02,280 --> 00:17:10,170
<font color="#E5E5E5">dot PHP will fail</font><font color="#CCCCCC"> for for</font><font color="#E5E5E5"> for this issue</font>

262
00:17:07,290 --> 00:17:14,550
<font color="#E5E5E5">we construct statically an inclusion map</font>

263
00:17:10,170 --> 00:17:17,339
that will this inclusion<font color="#E5E5E5"> map that will</font>

264
00:17:14,550 --> 00:17:19,829
resolve the the inclusion relationships

265
00:17:17,339 --> 00:17:23,760
<font color="#CCCCCC">so that we need when we search the</font>

266
00:17:19,829 --> 00:17:26,369
navigation graph we we we we<font color="#CCCCCC"> we know</font>

267
00:17:23,760 --> 00:17:32,220
exactly<font color="#CCCCCC"> the destination URL that we</font>

268
00:17:26,369 --> 00:17:34,350
should look for if we want to search

269
00:17:32,220 --> 00:17:37,410
this this is an example of<font color="#E5E5E5"> a navigation</font>

270
00:17:34,350 --> 00:17:39,929
graph if<font color="#CCCCCC"> we want to</font><font color="#E5E5E5"> search a navigation</font>

271
00:17:37,410 --> 00:17:41,910
path<font color="#CCCCCC"> between the first and</font><font color="#E5E5E5"> the second</font>

272
00:17:39,930 --> 00:17:44,820
input<font color="#E5E5E5"> we got that from</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> first</font>

273
00:17:41,910 --> 00:17:46,920
analysis step if we want to search the

274
00:17:44,820 --> 00:17:52,470
navigation graph one possible navigation

275
00:17:46,920 --> 00:17:55,200
path is between the nodes<font color="#CCCCCC"> 2 to 6</font><font color="#E5E5E5"> and the</font>

276
00:17:52,470 --> 00:17:58,790
<font color="#E5E5E5">URL for that further for the destination</font>

277
00:17:55,200 --> 00:18:03,300
<font color="#E5E5E5">you know the</font><font color="#CCCCCC"> URL of</font><font color="#E5E5E5"> the destination node</font>

278
00:17:58,790 --> 00:18:05,010
<font color="#CCCCCC">we know that message a parameter is 1 is</font>

279
00:18:03,300 --> 00:18:07,620
vulnerable<font color="#E5E5E5"> because</font><font color="#CCCCCC"> we got</font><font color="#E5E5E5"> that from</font><font color="#CCCCCC"> the</font>

280
00:18:05,010 --> 00:18:09,330
first<font color="#E5E5E5"> analysis</font><font color="#CCCCCC"> step so what</font><font color="#E5E5E5"> we do is</font>

281
00:18:07,620 --> 00:18:11,159
<font color="#CCCCCC">that we replace that</font><font color="#E5E5E5"> with the malicious</font>

282
00:18:09,330 --> 00:18:14,629
input that we got from the<font color="#E5E5E5"> first</font>

283
00:18:11,160 --> 00:18:17,160
analysis step and this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> an an exploit</font>

284
00:18:14,630 --> 00:18:21,300
<font color="#E5E5E5">this is the full exploit for that</font>

285
00:18:17,160 --> 00:18:24,360
<font color="#E5E5E5">vulnerability and as a as a result as a</font>

286
00:18:21,300 --> 00:18:28,260
result of our<font color="#E5E5E5"> dynamic execution and the</font>

287
00:18:24,360 --> 00:18:31,679
<font color="#E5E5E5">navigation graph design</font><font color="#CCCCCC"> the problem the</font>

288
00:18:28,260 --> 00:18:34,670
challenging problem of finding the<font color="#CCCCCC"> the</font>

289
00:18:31,680 --> 00:18:38,100
this<font color="#E5E5E5"> and navigation sequences between</font>

290
00:18:34,670 --> 00:18:40,550
two<font color="#CCCCCC"> modules is reduced</font><font color="#E5E5E5"> to a simple</font>

291
00:18:38,100 --> 00:18:40,550
graphs

292
00:18:41,550 --> 00:18:50,639
the data we've evaluated our tool on<font color="#E5E5E5"> 26</font>

293
00:18:45,470 --> 00:18:57,990
<font color="#E5E5E5">web applications with a total of 3.2</font>

294
00:18:50,640 --> 00:19:02,010
millions<font color="#E5E5E5"> source lines of PHP code we've</font>

295
00:18:57,990 --> 00:19:04,140
selected the<font color="#E5E5E5"> applique which the the the</font>

296
00:19:02,010 --> 00:19:06,000
data<font color="#E5E5E5"> set contains</font><font color="#CCCCCC"> of popular and large</font>

297
00:19:04,140 --> 00:19:10,290
<font color="#E5E5E5">applications such as WordPress and</font>

298
00:19:06,000 --> 00:19:12,090
<font color="#CCCCCC">MediaWiki and Joomla we've also selected</font>

299
00:19:10,290 --> 00:19:16,280
all their<font color="#CCCCCC"> applications to compare our</font>

300
00:19:12,090 --> 00:19:16,280
results with other<font color="#CCCCCC"> state-of-the-art work</font>

301
00:19:16,370 --> 00:19:24,899
nav extracted a total of 204 exploits

302
00:19:22,670 --> 00:19:28,950
195 of them<font color="#E5E5E5"> are</font><font color="#CCCCCC"> owned logic</font>

303
00:19:24,900 --> 00:19:31,020
vulnerabilities and<font color="#E5E5E5"> 9 on excuse me</font>

304
00:19:28,950 --> 00:19:34,520
195 of them<font color="#E5E5E5"> are</font><font color="#CCCCCC"> on injection</font>

305
00:19:31,020 --> 00:19:37,950
vulnerabilities and the rest<font color="#CCCCCC"> are own</font>

306
00:19:34,520 --> 00:19:40,950
logic vulnerabilities the<font color="#E5E5E5"> enhanced code</font>

307
00:19:37,950 --> 00:19:44,640
property graph reduced the false

308
00:19:40,950 --> 00:19:47,220
positive rate by<font color="#CCCCCC"> 84 87 percent and the</font>

309
00:19:44,640 --> 00:19:49,200
client-side code analysis when building

310
00:19:47,220 --> 00:19:53,940
the navigation graph enhanced the

311
00:19:49,200 --> 00:19:57,390
precision by<font color="#E5E5E5"> 54 percent and we were</font><font color="#CCCCCC"> able</font>

312
00:19:53,940 --> 00:20:02,310
to drill down<font color="#CCCCCC"> as deep as 6 HTTP requests</font>

313
00:19:57,390 --> 00:20:04,980
to to stitch and exploit and this is a

314
00:20:02,310 --> 00:20:08,750
summary of<font color="#E5E5E5"> the sequel injection exploits</font>

315
00:20:04,980 --> 00:20:14,570
that<font color="#E5E5E5"> we found that we the tool generated</font>

316
00:20:08,750 --> 00:20:18,420
<font color="#CCCCCC">reported 155 vulnerable sinks and one</font>

317
00:20:14,570 --> 00:20:21,450
constructed 105 concrete sequel

318
00:20:18,420 --> 00:20:24,330
injection<font color="#E5E5E5"> exploits and we've also</font>

319
00:20:21,450 --> 00:20:29,790
generated<font color="#E5E5E5"> 90 cross-site scripting</font>

320
00:20:24,330 --> 00:20:31,980
exploits for those applications for<font color="#E5E5E5"> ear</font>

321
00:20:29,790 --> 00:20:34,590
<font color="#E5E5E5">vulnerability execution</font><font color="#CCCCCC"> after</font><font color="#E5E5E5"> redirect</font>

322
00:20:31,980 --> 00:20:38,130
we generated<font color="#E5E5E5"> 9 ear exploits for those</font>

323
00:20:34,590 --> 00:20:41,100
<font color="#E5E5E5">applications and we've measured the</font>

324
00:20:38,130 --> 00:20:44,340
<font color="#E5E5E5">performance of</font><font color="#CCCCCC"> nav expiring</font>

325
00:20:41,100 --> 00:20:45,899
by calculating<font color="#E5E5E5"> the total time to to find</font>

326
00:20:44,340 --> 00:20:49,490
all those vulnerabilities and to

327
00:20:45,900 --> 00:20:51,000
generate exploits<font color="#E5E5E5"> and the vulnerability</font>

328
00:20:49,490 --> 00:20:56,010
identification time

329
00:20:51,000 --> 00:21:00,300
from 17<font color="#CCCCCC"> to</font><font color="#E5E5E5"> a 109 minutes and exploit</font>

330
00:20:56,010 --> 00:21:04,640
generation time ranges from<font color="#CCCCCC"> 1 minute to</font>

331
00:21:00,300 --> 00:21:09,240
40 minutes<font color="#E5E5E5"> and this administrates that</font>

332
00:21:04,640 --> 00:21:15,870
our tool can generate exploits<font color="#CCCCCC"> that</font>

333
00:21:09,240 --> 00:21:18,390
<font color="#E5E5E5">scales to large applications and the</font>

334
00:21:15,870 --> 00:21:22,500
figure below validates our claim<font color="#E5E5E5"> that a</font>

335
00:21:18,390 --> 00:21:23,820
claim that in order<font color="#CCCCCC"> to generate</font><font color="#E5E5E5"> to</font>

336
00:21:22,500 --> 00:21:25,980
generate to improve the crawling

337
00:21:23,820 --> 00:21:27,659
<font color="#E5E5E5">coverage and generate</font><font color="#CCCCCC"> more exploits we</font>

338
00:21:25,980 --> 00:21:31,770
have we should have support for import

339
00:21:27,660 --> 00:21:34,910
generation and constraints extracting

340
00:21:31,770 --> 00:21:39,780
from<font color="#E5E5E5"> extraction from</font><font color="#CCCCCC"> client-side code</font>

341
00:21:34,910 --> 00:21:43,460
<font color="#CCCCCC">and to conclude Navis is an automatic</font>

342
00:21:39,780 --> 00:21:47,250
<font color="#E5E5E5">export generation system that considers</font>

343
00:21:43,460 --> 00:21:49,440
<font color="#E5E5E5">the dynamic child the dynamic features</font>

344
00:21:47,250 --> 00:21:52,650
of web applications as well<font color="#E5E5E5"> as the</font>

345
00:21:49,440 --> 00:21:59,210
<font color="#CCCCCC">navigation complexities and we've</font>

346
00:21:52,650 --> 00:22:04,620
constructed over<font color="#CCCCCC"> a 200 exploits and we</font>

347
00:21:59,210 --> 00:22:10,280
<font color="#CCCCCC">navikev</font><font color="#E5E5E5"> performed prior work on exploit</font>

348
00:22:04,620 --> 00:22:12,139
generation and our tool<font color="#CCCCCC"> is on github</font>

349
00:22:10,280 --> 00:22:13,440
<font color="#E5E5E5">thank you</font>

350
00:22:12,140 --> 00:22:16,180
[Applause]

351
00:22:13,440 --> 00:22:19,100
[Music]

352
00:22:16,180 --> 00:22:21,390
[Applause]

353
00:22:19,100 --> 00:22:24,659
<font color="#CCCCCC">- conferences for very interesting work</font>

354
00:22:21,390 --> 00:22:26,700
<font color="#CCCCCC">I was wondering about one thing about</font>

355
00:22:24,660 --> 00:22:29,660
the analysis the static analysis how do

356
00:22:26,700 --> 00:22:32,820
you handle inter procedure<font color="#CCCCCC"> data flows</font>

357
00:22:29,660 --> 00:22:34,740
<font color="#E5E5E5">especially</font><font color="#CCCCCC"> if you have like a member</font><font color="#E5E5E5"> of</font>

358
00:22:32,820 --> 00:22:36,780
an object being invoked<font color="#E5E5E5"> and you don't</font>

359
00:22:34,740 --> 00:22:39,420
really know<font color="#CCCCCC"> unless</font><font color="#E5E5E5"> you are running the</font>

360
00:22:36,780 --> 00:22:42,210
code what object that member belongs<font color="#E5E5E5"> to</font>

361
00:22:39,420 --> 00:22:46,200
yeah so there<font color="#CCCCCC"> are two</font><font color="#E5E5E5"> parts of</font><font color="#CCCCCC"> your</font>

362
00:22:42,210 --> 00:22:48,240
question<font color="#E5E5E5"> the the inter procedure we have</font>

363
00:22:46,200 --> 00:22:50,240
<font color="#E5E5E5">support</font><font color="#CCCCCC"> for interprocedural analysis</font>

364
00:22:48,240 --> 00:22:53,460
because<font color="#CCCCCC"> the code</font><font color="#E5E5E5"> property graph includes</font>

365
00:22:50,240 --> 00:22:55,950
<font color="#CCCCCC">coll graphs</font><font color="#E5E5E5"> so we have that the</font><font color="#CCCCCC"> other</font>

366
00:22:53,460 --> 00:22:58,610
part of<font color="#E5E5E5"> your</font><font color="#CCCCCC"> question is that</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> we have</font>

367
00:22:55,950 --> 00:23:01,650
support<font color="#CCCCCC"> for dynamic</font><font color="#E5E5E5"> function calls</font><font color="#CCCCCC"> that</font>

368
00:22:58,610 --> 00:23:06,449
<font color="#CCCCCC">part is not big it's very challenging to</font>

369
00:23:01,650 --> 00:23:09,440
to to resolve dynamic<font color="#E5E5E5"> function of</font>

370
00:23:06,450 --> 00:23:12,360
function of functions called<font color="#CCCCCC"> statically</font>

371
00:23:09,440 --> 00:23:15,690
<font color="#CCCCCC">so for that we inherit their limitations</font>

372
00:23:12,360 --> 00:23:18,090
<font color="#E5E5E5">from property graph so</font><font color="#CCCCCC"> we don't</font><font color="#E5E5E5"> have</font>

373
00:23:15,690 --> 00:23:20,370
<font color="#E5E5E5">support for</font><font color="#CCCCCC"> that the later part of your</font>

374
00:23:18,090 --> 00:23:22,800
question<font color="#E5E5E5"> but maybe this is a follow up</font>

375
00:23:20,370 --> 00:23:25,439
<font color="#CCCCCC">thought on this</font><font color="#E5E5E5"> you could also just look</font>

376
00:23:22,800 --> 00:23:26,970
like in<font color="#CCCCCC"> your</font><font color="#E5E5E5"> namespace which</font><font color="#CCCCCC"> object to</font>

377
00:23:25,440 --> 00:23:28,590
define function with that<font color="#E5E5E5"> particular</font>

378
00:23:26,970 --> 00:23:30,780
name and since you do the pruning

379
00:23:28,590 --> 00:23:32,370
anyways you can just branch back to both

380
00:23:30,780 --> 00:23:34,050
like let's say there's two functions<font color="#CCCCCC"> the</font>

381
00:23:32,370 --> 00:23:36,090
<font color="#CCCCCC">same name and you don't</font><font color="#E5E5E5"> really know what</font>

382
00:23:34,050 --> 00:23:39,330
that's object<font color="#E5E5E5"> one or object - yeah you</font>

383
00:23:36,090 --> 00:23:40,980
can maybe<font color="#E5E5E5"> branch to both and then using</font>

384
00:23:39,330 --> 00:23:42,840
your<font color="#E5E5E5"> pruning techniques you can maybe</font>

385
00:23:40,980 --> 00:23:45,330
just<font color="#CCCCCC"> say</font><font color="#E5E5E5"> okay this can't</font><font color="#CCCCCC"> really work</font>

386
00:23:42,840 --> 00:23:48,750
<font color="#CCCCCC">because we have some constraints we want</font>

387
00:23:45,330 --> 00:23:52,919
we want<font color="#E5E5E5"> we can't approximate that</font>

388
00:23:48,750 --> 00:23:55,080
because we would not know which which

389
00:23:52,920 --> 00:23:58,820
path to take<font color="#E5E5E5"> and unless the code is</font>

390
00:23:55,080 --> 00:24:01,620
executed<font color="#CCCCCC"> right because I'm</font><font color="#E5E5E5"> just do both</font>

391
00:23:58,820 --> 00:24:03,120
for all paths<font color="#E5E5E5"> the question is how many</font>

392
00:24:01,620 --> 00:24:04,080
<font color="#E5E5E5">paths are there I've no idea that there</font>

393
00:24:03,120 --> 00:24:06,510
<font color="#E5E5E5">would be interesting question whether</font>

394
00:24:04,080 --> 00:24:07,330
you<font color="#E5E5E5"> can just do like a shotgun approach</font>

395
00:24:06,510 --> 00:24:10,690
and

396
00:24:07,330 --> 00:24:14,230
prune<font color="#CCCCCC"> but just</font><font color="#E5E5E5"> we have to yeah we have</font>

397
00:24:10,690 --> 00:24:15,940
to<font color="#E5E5E5"> examine</font><font color="#CCCCCC"> thank</font><font color="#E5E5E5"> you it's not a cycle</font>

398
00:24:14,230 --> 00:24:17,919
from<font color="#E5E5E5"> do</font><font color="#CCCCCC"> dumbshit I was wondering can you</font>

399
00:24:15,940 --> 00:24:19,779
say a bit<font color="#CCCCCC"> more</font><font color="#E5E5E5"> about the false positives</font>

400
00:24:17,919 --> 00:24:21,610
<font color="#E5E5E5">since you have the crawler</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> assume you</font>

401
00:24:19,779 --> 00:24:24,690
<font color="#E5E5E5">could have just verified</font><font color="#CCCCCC"> our exploit</font>

402
00:24:21,610 --> 00:24:28,350
right so why do you<font color="#E5E5E5"> have false positives</font>

403
00:24:24,690 --> 00:24:31,960
<font color="#CCCCCC">so the the the the false positive is</font>

404
00:24:28,350 --> 00:24:36,600
related to<font color="#E5E5E5"> the to the first component</font>

405
00:24:31,960 --> 00:24:39,789
<font color="#CCCCCC">the static analysis</font><font color="#E5E5E5"> and for some of the</font>

406
00:24:36,600 --> 00:24:42,309
as I<font color="#CCCCCC"> mentioned for example the dynamic</font>

407
00:24:39,789 --> 00:24:44,590
<font color="#CCCCCC">function</font><font color="#E5E5E5"> cause that we cannot resolve we</font>

408
00:24:42,309 --> 00:24:47,830
miss edges<font color="#E5E5E5"> and in the</font><font color="#CCCCCC"> code property</font>

409
00:24:44,590 --> 00:24:52,209
graph<font color="#E5E5E5"> so the the</font><font color="#CCCCCC"> to reported that</font><font color="#E5E5E5"> this</font>

410
00:24:47,830 --> 00:24:54,820
is a vulnerable<font color="#E5E5E5"> path</font><font color="#CCCCCC"> where in in in</font>

411
00:24:52,210 --> 00:24:57,609
reality<font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not it those are</font>

412
00:24:54,820 --> 00:25:02,428
false positives<font color="#CCCCCC"> so those are the the</font>

413
00:24:57,609 --> 00:25:04,809
<font color="#E5E5E5">cases that the false positive again are</font>

414
00:25:02,429 --> 00:25:12,129
reported<font color="#CCCCCC"> for the first</font><font color="#E5E5E5"> step for</font><font color="#CCCCCC"> the</font>

415
00:25:04,809 --> 00:25:13,928
static analysis step thank you<font color="#CCCCCC"> mm-hmm my</font>

416
00:25:12,129 --> 00:25:15,699
apologies<font color="#E5E5E5"> have I missed this but I was</font>

417
00:25:13,929 --> 00:25:20,529
curious what your attack dictionary

418
00:25:15,700 --> 00:25:27,460
actually looks like basically<font color="#E5E5E5"> the attack</font>

419
00:25:20,529 --> 00:25:30,460
dictionary includes<font color="#E5E5E5"> lists of things like</font>

420
00:25:27,460 --> 00:25:35,169
for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> for sequel injection</font><font color="#CCCCCC"> we have</font>

421
00:25:30,460 --> 00:25:37,960
support<font color="#E5E5E5"> for many types of PHP function</font>

422
00:25:35,169 --> 00:25:41,340
calls<font color="#E5E5E5"> that execute things like my sequel</font>

423
00:25:37,960 --> 00:25:44,590
query and so on<font color="#E5E5E5"> and it also includes</font>

424
00:25:41,340 --> 00:25:46,658
<font color="#E5E5E5">sanitization</font><font color="#CCCCCC"> Xand like for example what</font>

425
00:25:44,590 --> 00:25:50,529
are<font color="#E5E5E5"> the good sanitization for sequel</font>

426
00:25:46,659 --> 00:25:54,369
injection<font color="#E5E5E5"> and it also includes attack</font>

427
00:25:50,529 --> 00:25:56,049
strings like attack patterns we

428
00:25:54,369 --> 00:25:59,139
collected those<font color="#E5E5E5"> attack patterns from</font>

429
00:25:56,049 --> 00:26:01,840
several sources<font color="#E5E5E5"> we</font><font color="#CCCCCC"> use those attack</font>

430
00:25:59,139 --> 00:26:04,029
patterns we<font color="#E5E5E5"> feed those attack patterns</font>

431
00:26:01,840 --> 00:26:09,399
to<font color="#E5E5E5"> the solver to to generate</font><font color="#CCCCCC"> the actual</font>

432
00:26:04,029 --> 00:26:12,210
exploit the attacker canary also

433
00:26:09,399 --> 00:26:16,169
contains the<font color="#E5E5E5"> the</font>

434
00:26:12,210 --> 00:26:18,030
the the to traverse and<font color="#E5E5E5"> types based on</font>

435
00:26:16,170 --> 00:26:20,310
the<font color="#E5E5E5"> variability that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to exploit</font>

436
00:26:18,030 --> 00:26:24,810
<font color="#E5E5E5">so let's say that we want</font><font color="#CCCCCC"> to find the</font>

437
00:26:20,310 --> 00:26:28,760
van<font color="#E5E5E5"> sequel injection vulnerability</font><font color="#CCCCCC"> we</font>

438
00:26:24,810 --> 00:26:31,800
use the all those stored stored

439
00:26:28,760 --> 00:26:35,210
<font color="#CCCCCC">information</font><font color="#E5E5E5"> about the things that we</font>

440
00:26:31,800 --> 00:26:39,930
need<font color="#CCCCCC"> to search for and then we use that</font>

441
00:26:35,210 --> 00:26:44,690
during<font color="#E5E5E5"> the the graph search okay thank</font>

442
00:26:39,930 --> 00:26:44,690
you<font color="#E5E5E5"> great thanks very much</font>

443
00:26:45,390 --> 00:26:50,520
[Applause]

