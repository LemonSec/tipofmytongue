1
00:00:10,860 --> 00:00:17,390
yes oh hi<font color="#E5E5E5"> Harry Kalandar I'm here from</font>

2
00:00:13,740 --> 00:00:19,350
Princeton University<font color="#CCCCCC"> to tell you about</font><font color="#E5E5E5"> a</font>

3
00:00:17,390 --> 00:00:22,350
<font color="#E5E5E5">platform we've built called our Bertram</font>

4
00:00:19,350 --> 00:00:24,360
which allows for<font color="#CCCCCC"> scaleable private smart</font>

5
00:00:22,350 --> 00:00:27,090
contracts and joint work with<font color="#E5E5E5"> my</font>

6
00:00:24,360 --> 00:00:29,160
co-authors up there so I'd like to<font color="#E5E5E5"> start</font>

7
00:00:27,090 --> 00:00:31,320
<font color="#CCCCCC">by just</font><font color="#E5E5E5"> telling you how we think about</font>

8
00:00:29,160 --> 00:00:32,400
smart contracts<font color="#CCCCCC"> in terms of what they</font>

9
00:00:31,320 --> 00:00:34,260
<font color="#CCCCCC">are</font><font color="#E5E5E5"> and what they're good for</font>

10
00:00:32,400 --> 00:00:35,820
so assume we have Alice and Bob and

11
00:00:34,260 --> 00:00:37,199
Alice<font color="#E5E5E5"> and Bob want to interact</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> each</font>

12
00:00:35,820 --> 00:00:39,450
other<font color="#E5E5E5"> but they</font><font color="#CCCCCC"> don't trust</font><font color="#E5E5E5"> each other so</font>

13
00:00:37,200 --> 00:00:42,510
<font color="#CCCCCC">what</font><font color="#E5E5E5"> they can do is</font><font color="#CCCCCC"> they can</font><font color="#E5E5E5"> use a smart</font>

14
00:00:39,450 --> 00:00:45,539
contract<font color="#E5E5E5"> to mediate their interaction so</font>

15
00:00:42,510 --> 00:00:48,510
they agree<font color="#E5E5E5"> on some rules of that they</font>

16
00:00:45,539 --> 00:00:49,920
put<font color="#CCCCCC"> into code that they can both that</font>

17
00:00:48,510 --> 00:00:52,890
they're happy to both follow and are

18
00:00:49,920 --> 00:00:55,170
<font color="#E5E5E5">going to interact and then they create a</font>

19
00:00:52,890 --> 00:00:57,359
smart<font color="#E5E5E5"> contract that will obey</font><font color="#CCCCCC"> that code</font>

20
00:00:55,170 --> 00:00:58,949
<font color="#CCCCCC">and</font><font color="#E5E5E5"> for our purposes</font><font color="#CCCCCC"> in this</font><font color="#E5E5E5"> Congress in</font>

21
00:00:57,359 --> 00:01:00,420
this presentation I'll be<font color="#E5E5E5"> calling this a</font>

22
00:00:58,949 --> 00:01:03,089
virtual<font color="#E5E5E5"> machine so that's what it really</font>

23
00:01:00,420 --> 00:01:04,980
<font color="#E5E5E5">is and so</font><font color="#CCCCCC"> they can interact with</font><font color="#E5E5E5"> that</font>

24
00:01:03,089 --> 00:01:06,570
virtual machine they can<font color="#E5E5E5"> be guaranteed</font>

25
00:01:04,980 --> 00:01:08,850
<font color="#CCCCCC">that the virtual machine will operate</font>

26
00:01:06,570 --> 00:01:11,190
correctly<font color="#E5E5E5"> and the virtual machine is</font><font color="#CCCCCC"> a</font>

27
00:01:08,850 --> 00:01:12,750
first-class<font color="#E5E5E5"> actor in the system so it</font>

28
00:01:11,190 --> 00:01:16,410
can hold money and it<font color="#E5E5E5"> can send and</font>

29
00:01:12,750 --> 00:01:18,660
<font color="#CCCCCC">receive messages so</font><font color="#E5E5E5"> the kind of the mean</font>

30
00:01:16,410 --> 00:01:19,860
kind<font color="#E5E5E5"> of invocation of smart contracts</font>

31
00:01:18,660 --> 00:01:22,320
that<font color="#E5E5E5"> people are familiar with is</font>

32
00:01:19,860 --> 00:01:24,780
<font color="#CCCCCC">aetherium and aetherium has some very</font>

33
00:01:22,320 --> 00:01:26,460
substantial issues with scaling<font color="#E5E5E5"> so the</font>

34
00:01:24,780 --> 00:01:28,680
way<font color="#CCCCCC"> aetherium reaches consensus over</font>

35
00:01:26,460 --> 00:01:31,830
smart contracts<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> every miner</font><font color="#E5E5E5"> has</font>

36
00:01:28,680 --> 00:01:34,080
to run every<font color="#E5E5E5"> single contract and execute</font>

37
00:01:31,830 --> 00:01:36,060
every single step and the way that this

38
00:01:34,080 --> 00:01:38,670
works at all<font color="#E5E5E5"> is that transactions are</font>

39
00:01:36,060 --> 00:01:40,740
metered and users have<font color="#CCCCCC"> to pay gas for</font>

40
00:01:38,670 --> 00:01:42,840
computation and storage<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is</font>

41
00:01:40,740 --> 00:01:44,810
<font color="#E5E5E5">necessary to prevent denial of service</font>

42
00:01:42,840 --> 00:01:48,360
and leads to<font color="#E5E5E5"> high</font><font color="#CCCCCC"> cost</font><font color="#E5E5E5"> for contracts</font>

43
00:01:44,810 --> 00:01:50,700
moreover the total gas<font color="#E5E5E5"> limit that</font><font color="#CCCCCC"> can be</font>

44
00:01:48,360 --> 00:01:53,130
included<font color="#E5E5E5"> in the system is limited by the</font>

45
00:01:50,700 --> 00:01:56,700
throughput<font color="#CCCCCC"> that a single</font><font color="#E5E5E5"> miner can</font>

46
00:01:53,130 --> 00:01:58,500
perform<font color="#E5E5E5"> for one block and so complexity</font>

47
00:01:56,700 --> 00:02:01,140
has to be capped at<font color="#E5E5E5"> a fairly low value</font>

48
00:01:58,500 --> 00:02:03,240
by the global gas limit<font color="#E5E5E5"> and further the</font>

49
00:02:01,140 --> 00:02:06,090
fact<font color="#CCCCCC"> that every miner has to be able</font><font color="#E5E5E5"> to</font>

50
00:02:03,240 --> 00:02:08,549
<font color="#E5E5E5">evaluate every contract means that all</font>

51
00:02:06,090 --> 00:02:10,259
contract and data is public<font color="#E5E5E5"> and so you</font>

52
00:02:08,550 --> 00:02:13,440
can't<font color="#E5E5E5"> really get any native privacy with</font>

53
00:02:10,258 --> 00:02:15,029
this sort of system so we<font color="#E5E5E5"> ask the</font>

54
00:02:13,440 --> 00:02:17,700
<font color="#E5E5E5">question can we can we do better than</font>

55
00:02:15,030 --> 00:02:19,710
<font color="#CCCCCC">this can we scale smart contracts and</font>

56
00:02:17,700 --> 00:02:21,119
I'd like<font color="#E5E5E5"> to say specifically in this</font>

57
00:02:19,710 --> 00:02:23,310
talk when I'm talking when I'm

58
00:02:21,120 --> 00:02:24,120
discussing<font color="#CCCCCC"> smilling scaling smart</font>

59
00:02:23,310 --> 00:02:26,610
contracts

60
00:02:24,120 --> 00:02:27,720
we're interested not in the consensus

61
00:02:26,610 --> 00:02:29,489
<font color="#E5E5E5">layer where there's been a lot of</font>

62
00:02:27,720 --> 00:02:31,470
development<font color="#E5E5E5"> but in the smart contract</font>

63
00:02:29,489 --> 00:02:33,930
layer<font color="#E5E5E5"> so assuming that we</font><font color="#CCCCCC"> have an</font>

64
00:02:31,470 --> 00:02:37,500
underlying consensus<font color="#CCCCCC"> system already can</font>

65
00:02:33,930 --> 00:02:39,209
we have the consensus system implement

66
00:02:37,500 --> 00:02:43,470
smart<font color="#E5E5E5"> contracts in a way that a</font><font color="#CCCCCC"> lay-oh</font>

67
00:02:39,209 --> 00:02:46,560
<font color="#E5E5E5">of Laos for further scaling so that's</font>

68
00:02:43,470 --> 00:02:48,180
what I'm gonna<font color="#E5E5E5"> be</font><font color="#CCCCCC"> talking about today</font><font color="#E5E5E5"> at</font>

69
00:02:46,560 --> 00:02:50,010
first I'd like<font color="#E5E5E5"> to</font><font color="#CCCCCC"> mention some alternate</font>

70
00:02:48,180 --> 00:02:52,319
approaches to this problem<font color="#CCCCCC"> since there</font>

71
00:02:50,010 --> 00:02:55,410
has been some<font color="#CCCCCC"> work in this</font><font color="#E5E5E5"> area first</font>

72
00:02:52,319 --> 00:02:58,048
snarks snarks provide quite low on

73
00:02:55,410 --> 00:03:00,420
<font color="#CCCCCC">chained costs</font><font color="#E5E5E5"> for verifying contracts</font>

74
00:02:58,049 --> 00:03:01,890
<font color="#E5E5E5">but they require trusted</font><font color="#CCCCCC"> setup</font><font color="#E5E5E5"> for every</font>

75
00:03:00,420 --> 00:03:05,790
contract which can be<font color="#E5E5E5"> difficult and</font>

76
00:03:01,890 --> 00:03:08,220
<font color="#CCCCCC">expensive to pull off</font><font color="#E5E5E5"> and off chain</font>

77
00:03:05,790 --> 00:03:10,048
proving for snarks is very expensive<font color="#CCCCCC"> so</font>

78
00:03:08,220 --> 00:03:13,200
<font color="#CCCCCC">it</font><font color="#E5E5E5"> limits how many people can</font><font color="#CCCCCC"> actually</font>

79
00:03:10,049 --> 00:03:15,930
<font color="#CCCCCC">be users of</font><font color="#E5E5E5"> these kind of these of these</font>

80
00:03:13,200 --> 00:03:17,988
<font color="#E5E5E5">contracts next we have incentivized</font>

81
00:03:15,930 --> 00:03:20,280
verification best displayed by<font color="#CCCCCC"> true--but</font>

82
00:03:17,989 --> 00:03:22,410
<font color="#CCCCCC">this handles a lot of scaling issues</font>

83
00:03:20,280 --> 00:03:24,510
quite well but<font color="#E5E5E5"> it suffers</font><font color="#CCCCCC"> from a lack of</font>

84
00:03:22,410 --> 00:03:27,780
privacy<font color="#E5E5E5"> for the same reasons that</font>

85
00:03:24,510 --> 00:03:29,220
<font color="#E5E5E5">aetherium does in that verifiers need to</font>

86
00:03:27,780 --> 00:03:32,220
have access<font color="#CCCCCC"> to your contract information</font>

87
00:03:29,220 --> 00:03:33,930
<font color="#E5E5E5">to verify it</font><font color="#CCCCCC"> and further in our paper we</font>

88
00:03:32,220 --> 00:03:35,549
demonstrate some in some serious

89
00:03:33,930 --> 00:03:37,410
incentive compatibility problems with

90
00:03:35,549 --> 00:03:38,790
the protocol which you can read more

91
00:03:37,410 --> 00:03:41,010
about<font color="#E5E5E5"> in the paper all but I won't talk</font>

92
00:03:38,790 --> 00:03:43,230
<font color="#CCCCCC">about it more today and finally we have</font>

93
00:03:41,010 --> 00:03:45,298
state channels<font color="#E5E5E5"> state channels function</font>

94
00:03:43,230 --> 00:03:46,738
by assuming<font color="#E5E5E5"> that there will be unanimous</font>

95
00:03:45,299 --> 00:03:48,840
agreement among all contract

96
00:03:46,739 --> 00:03:50,849
participants in order for the contract

97
00:03:48,840 --> 00:03:52,500
<font color="#E5E5E5">to do anything which is</font><font color="#CCCCCC"> an assumption</font>

98
00:03:50,849 --> 00:03:55,619
that is<font color="#E5E5E5"> is very</font><font color="#CCCCCC"> difficult to pull off</font>

99
00:03:52,500 --> 00:03:57,599
<font color="#E5E5E5">and and does and kind of rules out a lot</font>

100
00:03:55,620 --> 00:03:59,750
<font color="#E5E5E5">of applications and further in the case</font>

101
00:03:57,599 --> 00:04:01,798
<font color="#E5E5E5">of a dispute between those participants</font>

102
00:03:59,750 --> 00:04:04,530
dispute resolution is extremely

103
00:04:01,799 --> 00:04:08,459
expensive<font color="#CCCCCC"> and so that kind of is very</font>

104
00:04:04,530 --> 00:04:11,430
<font color="#E5E5E5">limited</font><font color="#CCCCCC"> in how you can scale so how does</font>

105
00:04:08,459 --> 00:04:16,228
arbitral actually beat these systems and

106
00:04:11,430 --> 00:04:18,870
and really<font color="#E5E5E5"> bring scaling to the</font><font color="#CCCCCC"> tent</font><font color="#E5E5E5"> to</font>

107
00:04:16,228 --> 00:04:20,459
really make scaling possible so<font color="#E5E5E5"> arbitral</font>

108
00:04:18,870 --> 00:04:22,010
<font color="#E5E5E5">uses a combination</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> three different</font>

109
00:04:20,459 --> 00:04:25,020
<font color="#E5E5E5">problem three different techniques</font>

110
00:04:22,010 --> 00:04:26,729
<font color="#E5E5E5">protocol design we designed the protocol</font>

111
00:04:25,020 --> 00:04:28,859
such that there's an optimistic case in

112
00:04:26,729 --> 00:04:31,349
a pessimistic case where the<font color="#E5E5E5"> optimistic</font>

113
00:04:28,860 --> 00:04:33,479
case can function extremely quickly<font color="#CCCCCC"> and</font>

114
00:04:31,349 --> 00:04:36,360
where the pessimistic case is fairly

115
00:04:33,479 --> 00:04:38,219
<font color="#CCCCCC">efficient as well</font><font color="#E5E5E5"> we then use incentive</font>

116
00:04:36,360 --> 00:04:40,110
design<font color="#E5E5E5"> to make sure that</font>

117
00:04:38,220 --> 00:04:42,180
optimistic<font color="#CCCCCC"> ace will execute</font><font color="#E5E5E5"> almost all</font>

118
00:04:40,110 --> 00:04:45,000
of<font color="#E5E5E5"> the time so</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> overall system will</font>

119
00:04:42,180 --> 00:04:46,620
be quite efficient<font color="#CCCCCC"> and we have a custom</font>

120
00:04:45,000 --> 00:04:48,260
virtual machine architecture that<font color="#CCCCCC"> makes</font>

121
00:04:46,620 --> 00:04:50,670
<font color="#E5E5E5">sure even in the pessimistic case</font>

122
00:04:48,260 --> 00:04:55,110
everything executes<font color="#CCCCCC"> squatchy</font><font color="#E5E5E5"> and</font>

123
00:04:50,670 --> 00:04:57,120
<font color="#E5E5E5">efficiently so how does this work I'd</font>

124
00:04:55,110 --> 00:04:59,820
like to start by<font color="#CCCCCC"> talking</font><font color="#E5E5E5"> about two</font><font color="#CCCCCC"> major</font>

125
00:04:57,120 --> 00:05:02,310
<font color="#E5E5E5">roles in the orbitrim system that are</font>

126
00:04:59,820 --> 00:05:03,750
key<font color="#CCCCCC"> to understanding what's going</font><font color="#E5E5E5"> on so</font>

127
00:05:02,310 --> 00:05:05,520
first we have<font color="#E5E5E5"> the verifier and the</font>

128
00:05:03,750 --> 00:05:07,500
verifier is<font color="#CCCCCC"> the term that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> use for the</font>

129
00:05:05,520 --> 00:05:09,000
underlying consensus mechanism the

130
00:05:07,500 --> 00:05:10,260
verifier could be any number<font color="#CCCCCC"> of</font>

131
00:05:09,000 --> 00:05:12,660
<font color="#E5E5E5">different parties depending on the</font>

132
00:05:10,260 --> 00:05:14,490
<font color="#E5E5E5">system it could be</font><font color="#CCCCCC"> Bitcoin style mining</font>

133
00:05:12,660 --> 00:05:15,390
with<font color="#E5E5E5"> proof of work it could be a central</font>

134
00:05:14,490 --> 00:05:18,300
authority

135
00:05:15,390 --> 00:05:20,520
<font color="#E5E5E5">it could be</font><font color="#CCCCCC"> BFC protocol but we're</font>

136
00:05:18,300 --> 00:05:24,600
agnostic<font color="#CCCCCC"> and so we just call it the</font>

137
00:05:20,520 --> 00:05:26,370
verifier next we have managers so when

138
00:05:24,600 --> 00:05:28,590
you make<font color="#E5E5E5"> a</font><font color="#CCCCCC"> vm you give a list</font><font color="#E5E5E5"> of</font>

139
00:05:26,370 --> 00:05:30,480
managers for it<font color="#E5E5E5"> the</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> and the managers</font>

140
00:05:28,590 --> 00:05:34,109
are responsible<font color="#CCCCCC"> for keeping track</font><font color="#E5E5E5"> of the</font>

141
00:05:30,480 --> 00:05:36,030
VMS computation and data<font color="#E5E5E5"> and we have and</font>

142
00:05:34,110 --> 00:05:37,830
there's one very key guarantee in our

143
00:05:36,030 --> 00:05:39,059
Bertram system that's important for

144
00:05:37,830 --> 00:05:41,760
under the standing of<font color="#E5E5E5"> the system which</font>

145
00:05:39,060 --> 00:05:43,919
is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> any trust guarantee which is that</font>

146
00:05:41,760 --> 00:05:45,870
if at least one manager of the<font color="#E5E5E5"> VM is</font>

147
00:05:43,919 --> 00:05:47,940
honest<font color="#CCCCCC"> then the VM will execute</font>

148
00:05:45,870 --> 00:05:50,220
correctly<font color="#E5E5E5"> according to its code and</font>

149
00:05:47,940 --> 00:05:51,750
that's<font color="#E5E5E5"> basically the only trust that you</font>

150
00:05:50,220 --> 00:05:54,350
need to have involved<font color="#CCCCCC"> in the system and</font>

151
00:05:51,750 --> 00:05:56,430
we'll see how it<font color="#E5E5E5"> plays out</font><font color="#CCCCCC"> in practice</font>

152
00:05:54,350 --> 00:05:58,950
so let me give you an<font color="#CCCCCC"> example of how</font>

153
00:05:56,430 --> 00:06:01,680
this<font color="#E5E5E5"> would work say Alice and Bob want</font>

154
00:05:58,950 --> 00:06:03,840
to play a game<font color="#CCCCCC"> of chess and won a bet on</font>

155
00:06:01,680 --> 00:06:05,070
<font color="#E5E5E5">a game</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> chess</font><font color="#CCCCCC"> pert in particular so</font>

156
00:06:03,840 --> 00:06:06,539
they agree on<font color="#CCCCCC"> a set of code that</font>

157
00:06:05,070 --> 00:06:09,840
<font color="#CCCCCC">represents the rules of the chess game</font>

158
00:06:06,540 --> 00:06:11,729
<font color="#CCCCCC">and create a</font><font color="#E5E5E5"> VM using it the VM is</font>

159
00:06:09,840 --> 00:06:13,919
responsible<font color="#CCCCCC"> for receiving alternating</font>

160
00:06:11,729 --> 00:06:16,289
moves<font color="#E5E5E5"> verifying the validity of the game</font>

161
00:06:13,919 --> 00:06:18,419
<font color="#E5E5E5">and paying out to the winner but in this</font>

162
00:06:16,290 --> 00:06:20,310
situation<font color="#E5E5E5"> we know</font><font color="#CCCCCC"> who the verifier is</font>

163
00:06:18,419 --> 00:06:21,780
the underlying blockchain and<font color="#E5E5E5"> we know</font>

164
00:06:20,310 --> 00:06:23,630
who the<font color="#CCCCCC"> participants in the contract are</font>

165
00:06:21,780 --> 00:06:25,979
Alice and Bob<font color="#CCCCCC"> but who are the managers</font>

166
00:06:23,630 --> 00:06:27,479
<font color="#CCCCCC">well the very simple</font><font color="#E5E5E5"> answer to that is</font>

167
00:06:25,979 --> 00:06:30,450
<font color="#E5E5E5">that Alice and Bob</font><font color="#CCCCCC"> can themselves</font>

168
00:06:27,479 --> 00:06:31,530
trivially be the managers and<font color="#E5E5E5"> that would</font>

169
00:06:30,450 --> 00:06:34,229
mean<font color="#CCCCCC"> that they</font><font color="#E5E5E5"> would simply be</font>

170
00:06:31,530 --> 00:06:36,000
responsible<font color="#CCCCCC"> for making sure that</font><font color="#E5E5E5"> the</font>

171
00:06:34,229 --> 00:06:38,060
<font color="#E5E5E5">contract executed correctly and I'll</font>

172
00:06:36,000 --> 00:06:40,710
explain how<font color="#E5E5E5"> they do so later</font>

173
00:06:38,060 --> 00:06:42,390
<font color="#E5E5E5">alternatively if Alice and Bob for some</font>

174
00:06:40,710 --> 00:06:44,580
reason don't<font color="#E5E5E5"> want to be a manager they</font>

175
00:06:42,390 --> 00:06:46,979
could<font color="#E5E5E5"> simply hire a third party</font><font color="#CCCCCC"> who they</font>

176
00:06:44,580 --> 00:06:50,490
trust to<font color="#E5E5E5"> be the manager of that contract</font>

177
00:06:46,979 --> 00:06:52,949
and pay them<font color="#CCCCCC"> out-of-band</font>

178
00:06:50,490 --> 00:06:54,560
so how do what<font color="#CCCCCC"> managers</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> do for</font>

179
00:06:52,949 --> 00:06:57,360
a<font color="#E5E5E5"> VM</font><font color="#CCCCCC"> what is what does</font><font color="#E5E5E5"> all this mean</font>

180
00:06:54,560 --> 00:06:59,490
<font color="#E5E5E5">well to start with managers have</font>

181
00:06:57,360 --> 00:07:02,819
<font color="#E5E5E5">incentives are incentivized to agree</font>

182
00:06:59,490 --> 00:07:05,639
unanimously<font color="#E5E5E5"> as to what a VM does and if</font>

183
00:07:02,819 --> 00:07:07,919
they all agree<font color="#E5E5E5"> the system simply accepts</font>

184
00:07:05,639 --> 00:07:10,020
the assertion and I'll show<font color="#E5E5E5"> you what</font>

185
00:07:07,919 --> 00:07:12,448
that<font color="#E5E5E5"> looks like</font><font color="#CCCCCC"> so you need a</font><font color="#E5E5E5"> Mis</font>

186
00:07:10,020 --> 00:07:14,490
assertion consists of a<font color="#E5E5E5"> number of</font><font color="#CCCCCC"> parts</font>

187
00:07:12,449 --> 00:07:17,310
<font color="#E5E5E5">there are set of preconditions which</font>

188
00:07:14,490 --> 00:07:18,870
<font color="#E5E5E5">state what the what the which state the</font>

189
00:07:17,310 --> 00:07:21,150
<font color="#CCCCCC">expectation of</font><font color="#E5E5E5"> what the current state of</font>

190
00:07:18,870 --> 00:07:24,300
the machine is<font color="#CCCCCC"> their set</font><font color="#E5E5E5"> of actions</font>

191
00:07:21,150 --> 00:07:26,190
which<font color="#E5E5E5"> are what the VM actually does</font>

192
00:07:24,300 --> 00:07:28,349
while it's executing<font color="#CCCCCC"> and there's a</font>

193
00:07:26,190 --> 00:07:31,169
resulting state<font color="#E5E5E5"> so you note that the</font>

194
00:07:28,349 --> 00:07:32,880
<font color="#E5E5E5">assertion is only specifying external</font>

195
00:07:31,169 --> 00:07:34,320
actions as well<font color="#E5E5E5"> as</font><font color="#CCCCCC"> a start and an end</font>

196
00:07:32,880 --> 00:07:37,590
but nothing<font color="#E5E5E5"> about what happens in</font>

197
00:07:34,320 --> 00:07:40,110
between<font color="#E5E5E5"> and this is broadcast to</font><font color="#CCCCCC"> the</font>

198
00:07:37,590 --> 00:07:42,539
blockchain<font color="#E5E5E5"> along with the signature of</font>

199
00:07:40,110 --> 00:07:43,680
<font color="#E5E5E5">all of the managers and after this is</font>

200
00:07:42,539 --> 00:07:44,820
broadcast<font color="#E5E5E5"> assuming that the</font>

201
00:07:43,680 --> 00:07:47,849
preconditions are correct

202
00:07:44,820 --> 00:07:50,430
<font color="#E5E5E5">it's simply accepted and this means that</font>

203
00:07:47,849 --> 00:07:52,380
without<font color="#E5E5E5"> doing any sort of</font><font color="#CCCCCC"> work to verify</font>

204
00:07:50,430 --> 00:07:53,940
the correctness of this it's been

205
00:07:52,380 --> 00:07:56,520
accepted<font color="#E5E5E5"> into the blockchain</font><font color="#CCCCCC"> and note</font>

206
00:07:53,940 --> 00:07:59,400
this easily satisfies the requirements

207
00:07:56,520 --> 00:08:02,639
of the<font color="#E5E5E5"> any trust assumption because all</font>

208
00:07:59,400 --> 00:08:05,880
managers have agreed but what if they

209
00:08:02,639 --> 00:08:09,120
don't so in this situation we have

210
00:08:05,880 --> 00:08:11,009
disputable assertions any manager<font color="#E5E5E5"> can</font>

211
00:08:09,120 --> 00:08:13,169
<font color="#E5E5E5">make an assertion about a vm by</font>

212
00:08:11,009 --> 00:08:16,889
themselves<font color="#E5E5E5"> and all they have to do along</font>

213
00:08:13,169 --> 00:08:19,710
<font color="#CCCCCC">with that is deposit funds</font><font color="#E5E5E5"> next if one</font>

214
00:08:16,889 --> 00:08:21,169
other manager disagrees<font color="#E5E5E5"> then they can</font>

215
00:08:19,710 --> 00:08:23,880
issue a challenge<font color="#E5E5E5"> against this assertion</font>

216
00:08:21,169 --> 00:08:26,758
<font color="#E5E5E5">where they also challenge where</font><font color="#CCCCCC"> they</font>

217
00:08:23,880 --> 00:08:29,400
deposit funds as well<font color="#E5E5E5"> and in a challenge</font>

218
00:08:26,759 --> 00:08:32,940
<font color="#E5E5E5">the party that's wrong lose their</font>

219
00:08:29,400 --> 00:08:35,159
deposit and so we can<font color="#E5E5E5"> ensure through</font>

220
00:08:32,940 --> 00:08:37,140
<font color="#E5E5E5">this approach that</font><font color="#CCCCCC"> the actual eventual</font>

221
00:08:35,159 --> 00:08:39,000
execution<font color="#E5E5E5"> will be correct assuming there</font>

222
00:08:37,140 --> 00:08:41,909
is an honest manager around<font color="#E5E5E5"> to issue a</font>

223
00:08:39,000 --> 00:08:44,099
<font color="#E5E5E5">challenge so what a disputable</font>

224
00:08:41,909 --> 00:08:45,990
<font color="#E5E5E5">assertions look like in practice</font><font color="#CCCCCC"> well to</font>

225
00:08:44,099 --> 00:08:48,000
<font color="#CCCCCC">begin with</font><font color="#E5E5E5"> we have essentially the exact</font>

226
00:08:45,990 --> 00:08:50,190
same model<font color="#E5E5E5"> as a unanimous assertion</font>

227
00:08:48,000 --> 00:08:52,620
<font color="#E5E5E5">except in this case it's only signed by</font>

228
00:08:50,190 --> 00:08:54,899
a single manager the assertion is

229
00:08:52,620 --> 00:08:57,750
broadcast<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> blockchain and appended</font>

230
00:08:54,899 --> 00:08:59,550
and<font color="#E5E5E5"> a challenge period begins during</font>

231
00:08:57,750 --> 00:09:02,400
<font color="#E5E5E5">that period of time any other</font><font color="#CCCCCC"> manager</font>

232
00:08:59,550 --> 00:09:03,449
<font color="#E5E5E5">can initiate a challenge however if</font>

233
00:09:02,400 --> 00:09:05,189
there is no challenge

234
00:09:03,450 --> 00:09:07,380
the<font color="#E5E5E5"> assertion is simply confirmed and</font>

235
00:09:05,190 --> 00:09:10,730
the actions that specifies<font color="#CCCCCC"> occur on</font>

236
00:09:07,380 --> 00:09:12,450
chain but<font color="#E5E5E5"> what if there is a challenge</font>

237
00:09:10,730 --> 00:09:16,110
<font color="#E5E5E5">since that's</font><font color="#CCCCCC"> the really interesting</font>

238
00:09:12,450 --> 00:09:18,270
<font color="#CCCCCC">situation so in the case of a challenge</font>

239
00:09:16,110 --> 00:09:21,240
during<font color="#E5E5E5"> that during the challenge period</font>

240
00:09:18,270 --> 00:09:23,760
of the assertion the Challenger responds

241
00:09:21,240 --> 00:09:25,650
they say hey<font color="#E5E5E5"> this is incorrect</font>

242
00:09:23,760 --> 00:09:28,370
somewhere in this assertion<font color="#E5E5E5"> something</font>

243
00:09:25,650 --> 00:09:31,890
went wrong<font color="#CCCCCC"> I disagree with the result</font>

244
00:09:28,370 --> 00:09:34,530
next the originator of<font color="#E5E5E5"> the original</font>

245
00:09:31,890 --> 00:09:36,930
assertion<font color="#E5E5E5"> by sex that that assertion</font>

246
00:09:34,530 --> 00:09:39,329
into two segments into one assertion

247
00:09:36,930 --> 00:09:41,089
covering the first<font color="#CCCCCC"> n steps of execution</font>

248
00:09:39,330 --> 00:09:44,730
of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> vm</font><font color="#E5E5E5"> and the second assertion</font>

249
00:09:41,090 --> 00:09:46,650
<font color="#E5E5E5">covering the second n steps and</font><font color="#CCCCCC"> note the</font>

250
00:09:44,730 --> 00:09:48,960
in this situation the assert<font color="#CCCCCC"> R is saying</font>

251
00:09:46,650 --> 00:09:51,449
that<font color="#E5E5E5"> while the original assertion</font>

252
00:09:48,960 --> 00:09:53,730
specified two actions<font color="#E5E5E5"> sending some coins</font>

253
00:09:51,450 --> 00:09:55,620
<font color="#E5E5E5">and sending a message when</font><font color="#CCCCCC"> it split</font><font color="#E5E5E5"> into</font>

254
00:09:53,730 --> 00:09:57,810
<font color="#E5E5E5">the message send occurred sometime</font>

255
00:09:55,620 --> 00:09:59,610
<font color="#CCCCCC">during the first</font><font color="#E5E5E5"> half of the execution</font>

256
00:09:57,810 --> 00:10:01,079
and<font color="#E5E5E5"> the coins being sent occurred</font>

257
00:09:59,610 --> 00:10:04,590
sometime during the second half<font color="#E5E5E5"> of the</font>

258
00:10:01,080 --> 00:10:05,970
execution<font color="#E5E5E5"> so this process continues</font><font color="#CCCCCC"> the</font>

259
00:10:04,590 --> 00:10:08,190
<font color="#E5E5E5">Challenger at this point</font>

260
00:10:05,970 --> 00:10:09,870
<font color="#CCCCCC">no that has to say either one or the</font>

261
00:10:08,190 --> 00:10:11,670
<font color="#E5E5E5">other</font><font color="#CCCCCC"> of these two</font><font color="#E5E5E5"> halves are incorrect</font>

262
00:10:09,870 --> 00:10:13,230
<font color="#CCCCCC">since clearly if the whole thing</font><font color="#E5E5E5"> was</font>

263
00:10:11,670 --> 00:10:16,380
incorrect<font color="#CCCCCC"> one of the halves has to be</font>

264
00:10:13,230 --> 00:10:18,960
and so they<font color="#CCCCCC"> challenge</font><font color="#E5E5E5"> that half the</font>

265
00:10:16,380 --> 00:10:23,490
bisection continues between<font color="#CCCCCC"> the assert</font><font color="#E5E5E5"> R</font>

266
00:10:18,960 --> 00:10:25,410
and the Challenger at each step until we

267
00:10:23,490 --> 00:10:27,780
<font color="#E5E5E5">reach a single step of execution which</font>

268
00:10:25,410 --> 00:10:29,430
is under dispute<font color="#E5E5E5"> and this step of</font>

269
00:10:27,780 --> 00:10:31,620
execution<font color="#CCCCCC"> we've split the problem into a</font>

270
00:10:29,430 --> 00:10:33,750
small piece as possible and so now we

271
00:10:31,620 --> 00:10:35,940
need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> include</font><font color="#CCCCCC"> some sort of way</font><font color="#E5E5E5"> to</font>

272
00:10:33,750 --> 00:10:38,130
prove the correctness of this step and

273
00:10:35,940 --> 00:10:40,950
so<font color="#CCCCCC"> once that</font><font color="#E5E5E5"> proofs are going to be a</font>

274
00:10:38,130 --> 00:10:43,650
major<font color="#E5E5E5"> part of the remainder of this talk</font>

275
00:10:40,950 --> 00:10:47,310
<font color="#CCCCCC">so the</font><font color="#E5E5E5"> one-step proof has to somehow</font>

276
00:10:43,650 --> 00:10:49,800
<font color="#E5E5E5">prove given a start state and that the</font>

277
00:10:47,310 --> 00:10:51,599
<font color="#E5E5E5">Machine executed correctly to reach an</font>

278
00:10:49,800 --> 00:10:54,030
end state over a single<font color="#E5E5E5"> step of</font>

279
00:10:51,600 --> 00:10:56,130
execution and<font color="#CCCCCC"> there certain quantities</font>

280
00:10:54,030 --> 00:10:58,140
we need to think<font color="#E5E5E5"> about when we're</font>

281
00:10:56,130 --> 00:11:00,240
<font color="#CCCCCC">talking</font><font color="#E5E5E5"> about the one-step proof so how</font>

282
00:10:58,140 --> 00:11:01,850
big<font color="#E5E5E5"> is it is it is it feasible to</font>

283
00:11:00,240 --> 00:11:04,500
actually do<font color="#E5E5E5"> this in practice and how</font>

284
00:11:01,850 --> 00:11:06,300
<font color="#CCCCCC">costly is it to create and verify and</font>

285
00:11:04,500 --> 00:11:09,000
I'll just say an orbitrim these come out

286
00:11:06,300 --> 00:11:12,240
to around<font color="#E5E5E5"> 500 bytes and so</font><font color="#CCCCCC"> this is going</font>

287
00:11:09,000 --> 00:11:14,130
<font color="#E5E5E5">to be a really efficient system and the</font>

288
00:11:12,240 --> 00:11:16,129
way we<font color="#CCCCCC"> accomplish this is with a custom</font>

289
00:11:14,130 --> 00:11:19,470
<font color="#E5E5E5">orbitrim vm architecture</font>

290
00:11:16,129 --> 00:11:21,600
so in our architecture<font color="#CCCCCC"> all instructions</font>

291
00:11:19,470 --> 00:11:23,610
can<font color="#CCCCCC"> be emulated</font><font color="#E5E5E5"> in small constant time</font>

292
00:11:21,600 --> 00:11:26,610
<font color="#E5E5E5">which means that it doesn't particularly</font>

293
00:11:23,610 --> 00:11:28,379
<font color="#E5E5E5">that your machine</font><font color="#CCCCCC"> can do</font><font color="#E5E5E5"> it can execute</font>

294
00:11:26,610 --> 00:11:30,269
any instructions and have an expectation

295
00:11:28,379 --> 00:11:33,629
that<font color="#E5E5E5"> these will be able to be evaluated</font>

296
00:11:30,269 --> 00:11:35,910
on chain and<font color="#E5E5E5"> one-step proofs are of</font>

297
00:11:33,629 --> 00:11:38,009
small<font color="#E5E5E5"> constant size and B can be created</font>

298
00:11:35,910 --> 00:11:40,170
and verified in small constant time<font color="#CCCCCC"> and</font>

299
00:11:38,009 --> 00:11:42,869
so the proofs that<font color="#E5E5E5"> I described earlier</font>

300
00:11:40,170 --> 00:11:44,459
are going to be highly efficient<font color="#E5E5E5"> so</font>

301
00:11:42,869 --> 00:11:45,899
there<font color="#E5E5E5"> are four principles that cover the</font>

302
00:11:44,459 --> 00:11:47,609
mission<font color="#E5E5E5"> that</font><font color="#CCCCCC"> recover that</font><font color="#E5E5E5"> four</font>

303
00:11:45,899 --> 00:11:49,920
principles that the<font color="#CCCCCC"> vm architecture</font>

304
00:11:47,610 --> 00:11:52,019
implements which allow these properties

305
00:11:49,920 --> 00:11:53,579
<font color="#E5E5E5">the entire state is encoded in a</font><font color="#CCCCCC"> Merkle</font>

306
00:11:52,019 --> 00:11:55,829
<font color="#E5E5E5">tree so it can easily be summarized on</font>

307
00:11:53,579 --> 00:11:57,748
chain<font color="#CCCCCC"> the tree is of limited degree less</font>

308
00:11:55,829 --> 00:12:00,029
than<font color="#E5E5E5"> or</font><font color="#CCCCCC"> equal</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> 8</font><font color="#E5E5E5"> every leaf is of</font>

309
00:11:57,749 --> 00:12:02,100
<font color="#CCCCCC">limited size</font><font color="#E5E5E5"> and most importantly</font>

310
00:12:00,029 --> 00:12:03,119
instructions only<font color="#CCCCCC"> affect the items near</font>

311
00:12:02,100 --> 00:12:04,829
the top of<font color="#CCCCCC"> the tree</font>

312
00:12:03,119 --> 00:12:06,389
these first<font color="#CCCCCC"> three properties would be</font>

313
00:12:04,829 --> 00:12:08,429
fairly<font color="#E5E5E5"> easily achievable with any</font>

314
00:12:06,389 --> 00:12:12,239
standard<font color="#E5E5E5"> vm architecture but this last</font>

315
00:12:08,429 --> 00:12:14,819
<font color="#E5E5E5">one is</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> hard</font><font color="#CCCCCC"> and unique so in a</font>

316
00:12:12,239 --> 00:12:18,059
conventional vm architecture code and

317
00:12:14,819 --> 00:12:20,939
memory occur are viewed as simply<font color="#E5E5E5"> long</font>

318
00:12:18,059 --> 00:12:23,279
arrays of data<font color="#E5E5E5"> that's that's fairly flat</font>

319
00:12:20,939 --> 00:12:24,929
and conventional way to create proofs

320
00:12:23,279 --> 00:12:26,910
over these would be to simply<font color="#E5E5E5"> create a</font>

321
00:12:24,929 --> 00:12:29,129
<font color="#CCCCCC">merkel proof</font><font color="#E5E5E5"> every</font><font color="#CCCCCC"> single</font><font color="#E5E5E5"> time you</font>

322
00:12:26,910 --> 00:12:31,199
<font color="#CCCCCC">execute</font><font color="#E5E5E5"> for any instruction you would</font>

323
00:12:29,129 --> 00:12:33,779
have to prove<font color="#E5E5E5"> that</font><font color="#CCCCCC"> the instruction at</font>

324
00:12:31,199 --> 00:12:35,670
the<font color="#E5E5E5"> current PC is a given value and you</font>

325
00:12:33,779 --> 00:12:37,799
do that<font color="#CCCCCC"> with a</font><font color="#E5E5E5"> logarithmic</font><font color="#CCCCCC"> size proof in</font>

326
00:12:35,670 --> 00:12:39,029
this<font color="#E5E5E5"> case I've grayed out the parts of</font>

327
00:12:37,799 --> 00:12:41,759
the data would actually have to<font color="#CCCCCC"> be</font>

328
00:12:39,029 --> 00:12:43,350
broadcast with the<font color="#E5E5E5"> proof</font><font color="#CCCCCC"> and any time a</font>

329
00:12:41,759 --> 00:12:45,869
read occurred for memory you'd also have

330
00:12:43,350 --> 00:12:48,990
<font color="#CCCCCC">to</font><font color="#E5E5E5"> have a</font><font color="#CCCCCC"> merkel proof that that memory</font>

331
00:12:45,869 --> 00:12:50,490
access was correct<font color="#E5E5E5"> and</font><font color="#CCCCCC"> i'm gonna</font><font color="#E5E5E5"> show in</font>

332
00:12:48,990 --> 00:12:52,920
the next<font color="#CCCCCC"> couple slides how we solve</font>

333
00:12:50,490 --> 00:12:54,869
these issues<font color="#CCCCCC"> in arbitral</font><font color="#E5E5E5"> in with with</font>

334
00:12:52,920 --> 00:12:58,349
any<font color="#E5E5E5"> one step only</font><font color="#CCCCCC"> requiring constant</font>

335
00:12:54,869 --> 00:13:00,059
<font color="#E5E5E5">size and time to check so first let's</font>

336
00:12:58,350 --> 00:13:01,589
talk<font color="#CCCCCC"> about handling</font><font color="#E5E5E5"> memory and I'm going</font>

337
00:13:00,059 --> 00:13:04,290
to<font color="#E5E5E5"> compare the conventional</font><font color="#CCCCCC"> approach to</font>

338
00:13:01,589 --> 00:13:07,139
how<font color="#E5E5E5"> we handle</font><font color="#CCCCCC"> things in Arbitron so</font>

339
00:13:04,290 --> 00:13:08,939
we're conventionally memory occur where

340
00:13:07,139 --> 00:13:11,100
conventional systems would have<font color="#E5E5E5"> memory</font>

341
00:13:08,939 --> 00:13:14,099
represented and a large flat array

342
00:13:11,100 --> 00:13:16,049
instead<font color="#E5E5E5"> in orbitrim we have memory</font>

343
00:13:14,100 --> 00:13:18,029
consists of fixed<font color="#E5E5E5"> sized blocks which we</font>

344
00:13:16,049 --> 00:13:19,769
refer to<font color="#E5E5E5"> as tuples and these can</font>

345
00:13:18,029 --> 00:13:22,259
reference<font color="#E5E5E5"> each other and so</font><font color="#CCCCCC"> you can</font>

346
00:13:19,769 --> 00:13:26,129
build<font color="#E5E5E5"> up structures of multiples which</font>

347
00:13:22,259 --> 00:13:28,589
include other tuples inside them in a

348
00:13:26,129 --> 00:13:29,490
<font color="#CCCCCC">standard architecture as I said before</font>

349
00:13:28,589 --> 00:13:31,589
to emulate

350
00:13:29,490 --> 00:13:33,540
would manage a Merkel tree<font color="#E5E5E5"> over this</font>

351
00:13:31,589 --> 00:13:35,970
memory to support proofs<font color="#CCCCCC"> whereas an</font>

352
00:13:33,540 --> 00:13:39,029
orbitrim<font color="#CCCCCC"> application-level</font><font color="#E5E5E5"> code actually</font>

353
00:13:35,970 --> 00:13:40,649
<font color="#E5E5E5">manages the tree in memory as a function</font>

354
00:13:39,029 --> 00:13:44,279
of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> machine rather</font><font color="#E5E5E5"> than as a function</font>

355
00:13:40,649 --> 00:13:45,990
<font color="#E5E5E5">of the of the emulator</font><font color="#CCCCCC"> and so what we</font>

356
00:13:44,279 --> 00:13:49,110
have is<font color="#E5E5E5"> instead of having a read</font>

357
00:13:45,990 --> 00:13:51,029
instruction in in the<font color="#E5E5E5"> VM we instead</font>

358
00:13:49,110 --> 00:13:53,639
would have a library<font color="#E5E5E5"> call which would go</font>

359
00:13:51,029 --> 00:13:57,269
into<font color="#E5E5E5"> this tree and find the proper leaf</font>

360
00:13:53,639 --> 00:13:58,860
<font color="#CCCCCC">at the edge of it</font><font color="#E5E5E5"> and so in essence what</font>

361
00:13:57,269 --> 00:14:00,660
that<font color="#E5E5E5"> means is what we've taken we've</font>

362
00:13:58,860 --> 00:14:02,069
taken something<font color="#E5E5E5"> that</font><font color="#CCCCCC"> before would be a</font>

363
00:14:00,660 --> 00:14:04,139
<font color="#E5E5E5">single instruction that would have the</font>

364
00:14:02,069 --> 00:14:05,699
log end cost<font color="#E5E5E5"> and instead we've</font>

365
00:14:04,139 --> 00:14:07,529
transformed<font color="#E5E5E5"> that into log</font><font color="#CCCCCC"> end</font>

366
00:14:05,699 --> 00:14:10,740
instructions<font color="#E5E5E5"> each of which can</font><font color="#CCCCCC"> be</font>

367
00:14:07,529 --> 00:14:12,389
executed<font color="#E5E5E5"> in constant time and so you</font><font color="#CCCCCC"> can</font>

368
00:14:10,740 --> 00:14:14,779
see how that<font color="#E5E5E5"> plays in very well with our</font>

369
00:14:12,389 --> 00:14:16,709
bisection protocol where we already

370
00:14:14,779 --> 00:14:20,100
<font color="#CCCCCC">reduced logarithmically</font>

371
00:14:16,709 --> 00:14:22,800
and so<font color="#CCCCCC"> now we've taken what</font><font color="#E5E5E5"> used to be</font>

372
00:14:20,100 --> 00:14:26,689
log n proofs<font color="#E5E5E5"> and now we have o of</font><font color="#CCCCCC"> one</font>

373
00:14:22,800 --> 00:14:29,160
proofs here<font color="#E5E5E5"> next</font><font color="#CCCCCC"> up we have</font><font color="#E5E5E5"> instructions</font>

374
00:14:26,689 --> 00:14:32,129
so normally with instructions you<font color="#E5E5E5"> would</font>

375
00:14:29,160 --> 00:14:34,379
store source code in a list but for

376
00:14:32,129 --> 00:14:38,999
orbitrim we instead store in a stack<font color="#E5E5E5"> and</font>

377
00:14:34,379 --> 00:14:40,920
this stack<font color="#E5E5E5"> is going to be a nested stack</font>

378
00:14:38,999 --> 00:14:42,600
of instructions where we have our first

379
00:14:40,920 --> 00:14:43,799
slot<font color="#E5E5E5"> that points to the second that</font>

380
00:14:42,600 --> 00:14:46,799
points to the third each of which

381
00:14:43,799 --> 00:14:48,299
<font color="#CCCCCC">concludes an instruction</font><font color="#E5E5E5"> and you'll see</font>

382
00:14:46,799 --> 00:14:51,029
a little<font color="#E5E5E5"> bit more detail</font><font color="#CCCCCC"> of what that</font>

383
00:14:48,299 --> 00:14:52,769
means<font color="#E5E5E5"> in</font><font color="#CCCCCC"> a second</font><font color="#E5E5E5"> so instead of normally</font>

384
00:14:51,029 --> 00:14:54,600
to go to the<font color="#E5E5E5"> next instruction and a VM</font>

385
00:14:52,769 --> 00:14:56,459
you<font color="#E5E5E5"> advance the PC instead for us you</font>

386
00:14:54,600 --> 00:14:59,639
pop the stack<font color="#CCCCCC"> bringing the</font><font color="#E5E5E5"> next item</font><font color="#CCCCCC"> to</font>

387
00:14:56,459 --> 00:15:02,489
the top of the stack for<font color="#E5E5E5"> jumps instead</font>

388
00:14:59,639 --> 00:15:03,990
of just arbitrarily changing the PC you

389
00:15:02,490 --> 00:15:06,749
replace the instruction stack with a new

390
00:15:03,990 --> 00:15:08,549
stack<font color="#E5E5E5"> and calling a function</font><font color="#CCCCCC"> you push</font>

391
00:15:06,749 --> 00:15:11,540
the instruction stack to<font color="#E5E5E5"> the call stack</font>

392
00:15:08,549 --> 00:15:13,829
<font color="#E5E5E5">and returning you reverse that operation</font>

393
00:15:11,540 --> 00:15:15,449
so what does the<font color="#CCCCCC"> Arbitron VM look like</font>

394
00:15:13,829 --> 00:15:17,160
I've<font color="#E5E5E5"> already</font><font color="#CCCCCC"> mentioned the instruction</font>

395
00:15:15,449 --> 00:15:19,859
stack the data stack and the<font color="#CCCCCC"> call stack</font>

396
00:15:17,160 --> 00:15:21,569
what remains is also a static which

397
00:15:19,860 --> 00:15:24,389
allows static values to<font color="#CCCCCC"> be held by the</font>

398
00:15:21,569 --> 00:15:27,089
<font color="#E5E5E5">VM to be</font><font color="#CCCCCC"> encoded with the VM and a</font>

399
00:15:24,389 --> 00:15:30,089
single register<font color="#E5E5E5"> which can be set and get</font>

400
00:15:27,089 --> 00:15:32,189
<font color="#E5E5E5">dynamically and to see what a one step</font>

401
00:15:30,089 --> 00:15:34,499
proof actually<font color="#CCCCCC"> looks</font><font color="#E5E5E5"> like for this VM</font>

402
00:15:32,189 --> 00:15:37,049
I'll demonstrate an add instruction here

403
00:15:34,499 --> 00:15:38,610
so for the instruction stack we've

404
00:15:37,049 --> 00:15:40,350
simply revealed the top item in the

405
00:15:38,610 --> 00:15:41,480
stack which is<font color="#CCCCCC"> an add instruction and</font>

406
00:15:40,350 --> 00:15:43,820
keeping the rest<font color="#E5E5E5"> and kept the</font>

407
00:15:41,480 --> 00:15:45,470
hidden<font color="#E5E5E5"> we've had to</font><font color="#CCCCCC"> open up the top two</font>

408
00:15:43,820 --> 00:15:47,930
layers<font color="#E5E5E5"> of the data stack in order to</font>

409
00:15:45,470 --> 00:15:49,190
reveal the operands<font color="#E5E5E5"> and no other data</font>

410
00:15:47,930 --> 00:15:51,739
has to<font color="#E5E5E5"> be revealed</font>

411
00:15:49,190 --> 00:15:53,360
other than hashes<font color="#CCCCCC"> of the other items and</font>

412
00:15:51,740 --> 00:15:55,459
<font color="#E5E5E5">this</font><font color="#CCCCCC"> proof</font><font color="#E5E5E5"> this can be proven given the</font>

413
00:15:53,360 --> 00:15:57,410
start state and then evaluated in order

414
00:15:55,459 --> 00:16:01,369
<font color="#CCCCCC">to calculate</font><font color="#E5E5E5"> a new</font><font color="#CCCCCC"> end state for the</font><font color="#E5E5E5"> VM</font>

415
00:15:57,410 --> 00:16:03,199
in order to verify<font color="#E5E5E5"> the one step so I've</font>

416
00:16:01,370 --> 00:16:05,240
talked about scaling a lot<font color="#E5E5E5"> now I'd like</font>

417
00:16:03,199 --> 00:16:06,949
<font color="#E5E5E5">to mention privacy so</font><font color="#CCCCCC"> Arbitron provide</font>

418
00:16:05,240 --> 00:16:10,070
so<font color="#CCCCCC"> orbitrim</font><font color="#E5E5E5"> smart contracts are also</font>

419
00:16:06,949 --> 00:16:12,319
<font color="#E5E5E5">private</font><font color="#CCCCCC"> because in orbitrim the state of</font>

420
00:16:10,070 --> 00:16:14,690
a<font color="#E5E5E5"> VM is</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> revealed to the VMS</font>

421
00:16:12,320 --> 00:16:17,089
managers<font color="#E5E5E5"> all that appears on chain is</font>

422
00:16:14,690 --> 00:16:18,800
<font color="#CCCCCC">salta balagia x' of the vm state number</font>

423
00:16:17,089 --> 00:16:20,480
and timing<font color="#E5E5E5"> of steps executed and</font>

424
00:16:18,800 --> 00:16:22,160
messages and<font color="#E5E5E5"> money sent and received by</font>

425
00:16:20,480 --> 00:16:25,970
<font color="#E5E5E5">the</font><font color="#CCCCCC"> vm so kind</font><font color="#E5E5E5"> of the minimum necessary</font>

426
00:16:22,160 --> 00:16:28,610
<font color="#E5E5E5">information</font><font color="#CCCCCC"> we have an implementation</font>

427
00:16:25,970 --> 00:16:30,110
<font color="#E5E5E5">written in go code along</font><font color="#CCCCCC"> with an</font>

428
00:16:28,610 --> 00:16:31,820
<font color="#E5E5E5">assembly library and we're working on</font>

429
00:16:30,110 --> 00:16:35,240
program<font color="#E5E5E5"> to programming tools you can</font>

430
00:16:31,820 --> 00:16:36,680
read more<font color="#CCCCCC"> about this in the paper just</font>

431
00:16:35,240 --> 00:16:38,060
<font color="#E5E5E5">to give a quick</font><font color="#CCCCCC"> example of</font><font color="#E5E5E5"> how our</font>

432
00:16:36,680 --> 00:16:40,160
<font color="#CCCCCC">Bertram the performance you get</font><font color="#E5E5E5"> with our</font>

433
00:16:38,060 --> 00:16:42,109
Bertram in practice to give an example

434
00:16:40,160 --> 00:16:43,639
<font color="#E5E5E5">of iterated hashing where our VM one</font>

435
00:16:42,110 --> 00:16:45,620
just wants<font color="#E5E5E5"> to calculate hash</font><font color="#CCCCCC"> functions</font>

436
00:16:43,639 --> 00:16:47,540
over and over and<font color="#CCCCCC"> over a single</font><font color="#E5E5E5"> our</font>

437
00:16:45,620 --> 00:16:50,149
Bertram VM can perform almost<font color="#E5E5E5"> million</font>

438
00:16:47,540 --> 00:16:52,160
<font color="#CCCCCC">shot</font><font color="#E5E5E5"> two hashes</font><font color="#CCCCCC"> per second</font><font color="#E5E5E5"> compared</font><font color="#CCCCCC"> to a</font>

439
00:16:50,149 --> 00:16:54,649
native<font color="#E5E5E5"> machine performance of 1.7</font>

440
00:16:52,160 --> 00:16:56,930
million<font color="#E5E5E5"> so close but not close</font><font color="#CCCCCC"> to native</font>

441
00:16:54,649 --> 00:16:59,120
<font color="#CCCCCC">performance and the real comparison</font><font color="#E5E5E5"> is</font>

442
00:16:56,930 --> 00:17:01,638
<font color="#CCCCCC">to aetherium which only supports around</font>

443
00:16:59,120 --> 00:17:03,860
<font color="#CCCCCC">10,000 hashes per second globally and</font>

444
00:17:01,639 --> 00:17:06,349
<font color="#CCCCCC">note</font><font color="#E5E5E5"> the first line</font><font color="#CCCCCC"> here I say one VM</font>

445
00:17:03,860 --> 00:17:09,169
where multiple<font color="#CCCCCC"> R Bertram VMs can</font><font color="#E5E5E5"> be</font>

446
00:17:06,349 --> 00:17:10,790
running at the same time<font color="#E5E5E5"> as large number</font>

447
00:17:09,169 --> 00:17:13,429
at the same time and so the<font color="#E5E5E5"> scaling here</font>

448
00:17:10,790 --> 00:17:15,649
is is<font color="#E5E5E5"> really kind of</font><font color="#CCCCCC"> unbelievable just</font>

449
00:17:13,429 --> 00:17:18,230
<font color="#E5E5E5">in conclusion so arbitral</font><font color="#CCCCCC"> enables</font>

450
00:17:15,650 --> 00:17:19,490
<font color="#CCCCCC">scalable private smart contracts and we</font>

451
00:17:18,230 --> 00:17:22,189
do this using<font color="#E5E5E5"> a number of techniques</font>

452
00:17:19,490 --> 00:17:25,400
<font color="#E5E5E5">protocol design incentive mechanisms and</font>

453
00:17:22,189 --> 00:17:28,020
virtual machine architecture so thank

454
00:17:25,400 --> 00:17:36,089
<font color="#E5E5E5">you</font><font color="#CCCCCC"> for listening and</font><font color="#E5E5E5"> happy taking</font>

455
00:17:28,020 --> 00:17:36,089
[Applause]

456
00:17:44,590 --> 00:17:47,699
<font color="#E5E5E5">no questions</font>

457
00:17:50,320 --> 00:17:58,309
all right so I guess I'll<font color="#E5E5E5"> ask the</font>

458
00:17:52,700 --> 00:18:01,429
question can<font color="#CCCCCC"> you summarize what the the</font>

459
00:17:58,309 --> 00:18:03,559
key technique is<font color="#E5E5E5"> that allows you to get</font>

460
00:18:01,429 --> 00:18:05,390
the<font color="#E5E5E5"> performance benefits</font><font color="#CCCCCC"> I mean of</font>

461
00:18:03,559 --> 00:18:08,020
course we<font color="#E5E5E5"> describe yeah but</font><font color="#CCCCCC"> what what's</font>

462
00:18:05,390 --> 00:18:10,779
<font color="#E5E5E5">the key piece that allows you mean the</font>

463
00:18:08,020 --> 00:18:14,720
<font color="#CCCCCC">fundamental key piece is simply the the</font>

464
00:18:10,779 --> 00:18:18,020
<font color="#E5E5E5">idea that the VM</font><font color="#CCCCCC"> is only really run</font>

465
00:18:14,720 --> 00:18:20,929
offline by the managers the on chain is

466
00:18:18,020 --> 00:18:23,360
<font color="#E5E5E5">only used for dispute resolution</font><font color="#CCCCCC"> which</font>

467
00:18:20,929 --> 00:18:25,460
<font color="#E5E5E5">means that essentially we can run close</font>

468
00:18:23,360 --> 00:18:27,439
to<font color="#CCCCCC"> real time</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> aetherium the global</font>

469
00:18:25,460 --> 00:18:29,450
glass limit is set so<font color="#CCCCCC"> that blocks</font><font color="#E5E5E5"> take</font>

470
00:18:27,440 --> 00:18:31,309
around<font color="#E5E5E5"> 200 milliseconds to verify and</font>

471
00:18:29,450 --> 00:18:32,720
they need this<font color="#E5E5E5"> because the consensus</font>

472
00:18:31,309 --> 00:18:36,200
mechanism needs miners to be able<font color="#CCCCCC"> to</font>

473
00:18:32,720 --> 00:18:38,450
<font color="#E5E5E5">verify quickly</font><font color="#CCCCCC"> whereas when</font><font color="#E5E5E5"> you're</font>

474
00:18:36,200 --> 00:18:39,559
running<font color="#E5E5E5"> odd the whereas orbitrim VMs</font>

475
00:18:38,450 --> 00:18:42,080
aren't<font color="#E5E5E5"> really don't really have any</font>

476
00:18:39,559 --> 00:18:43,760
<font color="#E5E5E5">constraints at all there so that's</font>

477
00:18:42,080 --> 00:18:46,490
essentially what we need is a way to

478
00:18:43,760 --> 00:18:48,080
handle disputes<font color="#E5E5E5"> on chain so that</font><font color="#CCCCCC"> the so</font>

479
00:18:46,490 --> 00:18:49,730
that on chain we can<font color="#E5E5E5"> settle arguments</font>

480
00:18:48,080 --> 00:18:50,960
between<font color="#CCCCCC"> the managers and that's that's</font>

481
00:18:49,730 --> 00:18:55,820
<font color="#CCCCCC">what a lot of</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> I talked about</font><font color="#E5E5E5"> was</font>

482
00:18:50,960 --> 00:18:57,049
cool<font color="#CCCCCC"> yeah awesome work I wanted</font><font color="#E5E5E5"> to know</font>

483
00:18:55,820 --> 00:18:58,760
if you thought<font color="#E5E5E5"> about two things so one</font>

484
00:18:57,049 --> 00:19:00,710
is about using<font color="#E5E5E5"> I know you know</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> gonna</font>

485
00:18:58,760 --> 00:19:01,940
<font color="#E5E5E5">ask some of these anyway but um have you</font>

486
00:19:00,710 --> 00:19:04,250
<font color="#E5E5E5">thought about the</font><font color="#CCCCCC"> increment ality</font>

487
00:19:01,940 --> 00:19:06,500
features a<font color="#CCCCCC"> versum from ccs a couple</font>

488
00:19:04,250 --> 00:19:08,480
years<font color="#CCCCCC"> ago and also authenticated data</font>

489
00:19:06,500 --> 00:19:10,760
structures<font color="#E5E5E5"> instead of a flat memory file</font>

490
00:19:08,480 --> 00:19:14,149
<font color="#E5E5E5">yeah I mean it's it's</font><font color="#CCCCCC"> interesting</font>

491
00:19:10,760 --> 00:19:16,908
question<font color="#E5E5E5"> I mean I think</font><font color="#CCCCCC"> our conception</font>

492
00:19:14,149 --> 00:19:20,270
of this is is<font color="#E5E5E5"> very much not that the</font>

493
00:19:16,909 --> 00:19:23,659
<font color="#CCCCCC">computations not being outsourced that</font>

494
00:19:20,270 --> 00:19:25,460
the<font color="#CCCCCC"> minor that the the managers are kind</font>

495
00:19:23,659 --> 00:19:28,100
<font color="#E5E5E5">of in the main in the kind of normal</font>

496
00:19:25,460 --> 00:19:29,929
thought of the machine<font color="#CCCCCC"> the managers and</font>

497
00:19:28,100 --> 00:19:31,969
<font color="#E5E5E5">the participants of the contractor are</font>

498
00:19:29,929 --> 00:19:35,659
the same parties<font color="#E5E5E5"> and so they don't</font>

499
00:19:31,970 --> 00:19:38,840
<font color="#E5E5E5">actually necessarily want to have kind</font>

500
00:19:35,659 --> 00:19:40,700
of the the<font color="#E5E5E5"> verifier even do in the</font>

501
00:19:38,840 --> 00:19:42,879
normal<font color="#CCCCCC"> case the work of maintaining</font><font color="#E5E5E5"> and</font>

502
00:19:40,700 --> 00:19:45,350
authenticated<font color="#E5E5E5"> data structure in the non</font>

503
00:19:42,880 --> 00:19:48,289
<font color="#CCCCCC">in the unanimous a case we want</font><font color="#E5E5E5"> the</font>

504
00:19:45,350 --> 00:19:49,580
verifier to not be<font color="#CCCCCC"> involved at all so i</font>

505
00:19:48,289 --> 00:19:51,860
mean<font color="#CCCCCC"> i think</font><font color="#E5E5E5"> we're certainly</font><font color="#CCCCCC"> open to</font>

506
00:19:49,580 --> 00:19:53,689
exploring<font color="#E5E5E5"> further connections but and</font>

507
00:19:51,860 --> 00:19:56,080
<font color="#CCCCCC">having talked</font><font color="#E5E5E5"> more offline</font><font color="#CCCCCC"> okay sure</font>

508
00:19:53,690 --> 00:19:56,080
yeah

509
00:19:56,390 --> 00:20:01,760
<font color="#CCCCCC">all right any more</font><font color="#E5E5E5"> questions wait</font><font color="#CCCCCC"> let's</font>

510
00:20:00,380 --> 00:20:06,890
<font color="#CCCCCC">thank</font><font color="#E5E5E5"> the speaker one more time</font>

511
00:20:01,760 --> 00:20:06,890
[Applause]

