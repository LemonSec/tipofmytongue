1
00:00:10,240 --> 00:00:14,980
everyone<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> Stefan spike and I work on</font>

2
00:00:13,750 --> 00:00:18,490
this paper<font color="#E5E5E5"> together with Christiana</font>

3
00:00:14,980 --> 00:00:20,230
<font color="#E5E5E5">Herbert and cafe</font><font color="#CCCCCC"> and the</font><font color="#E5E5E5"> title of the</font>

4
00:00:18,490 --> 00:00:22,000
paper is malicious management unit<font color="#E5E5E5"> and</font>

5
00:00:20,230 --> 00:00:23,939
why<font color="#E5E5E5"> stopping cache attacks and software</font>

6
00:00:22,000 --> 00:00:26,470
is harder than you<font color="#E5E5E5"> think</font>

7
00:00:23,939 --> 00:00:27,640
<font color="#E5E5E5">so why should</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> care about cache</font>

8
00:00:26,470 --> 00:00:29,890
attacks in the first place

9
00:00:27,640 --> 00:00:32,650
well<font color="#E5E5E5"> I'm going to start with</font><font color="#CCCCCC"> a very</font>

10
00:00:29,890 --> 00:00:36,129
<font color="#E5E5E5">famous pyramid that's completely missing</font>

11
00:00:32,650 --> 00:00:40,510
<font color="#E5E5E5">apart</font><font color="#CCCCCC"> and the reason why is that</font><font color="#E5E5E5"> CPUs</font>

12
00:00:36,129 --> 00:00:42,760
and memory<font color="#E5E5E5"> advance</font><font color="#CCCCCC"> every year but CPUs</font>

13
00:00:40,510 --> 00:00:46,900
<font color="#E5E5E5">advance at a very fast pace faster than</font>

14
00:00:42,760 --> 00:00:49,000
memory and to mitigate<font color="#E5E5E5"> to solve this gap</font>

15
00:00:46,900 --> 00:00:52,049
there's increasing<font color="#E5E5E5"> performance gap where</font>

16
00:00:49,000 --> 00:00:55,570
<font color="#CCCCCC">mem memory is moving far away from CPU</font>

17
00:00:52,049 --> 00:00:58,150
<font color="#E5E5E5">there are caches nowadays and this is</font>

18
00:00:55,570 --> 00:01:00,809
kind of problematic<font color="#E5E5E5"> because CPU</font>

19
00:00:58,150 --> 00:01:03,760
registers at the top are very small

20
00:01:00,809 --> 00:01:07,119
pieces of<font color="#E5E5E5"> memory but they're really fast</font>

21
00:01:03,760 --> 00:01:09,340
and if one the further you go down<font color="#E5E5E5"> the</font>

22
00:01:07,119 --> 00:01:11,409
slower they are and the larger it

23
00:01:09,340 --> 00:01:14,049
becomes<font color="#E5E5E5"> and this is a</font><font color="#CCCCCC"> trade-off of</font>

24
00:01:11,409 --> 00:01:16,840
course<font color="#CCCCCC"> what it means is that if you have</font>

25
00:01:14,049 --> 00:01:19,750
memory<font color="#E5E5E5"> that's attached then you will</font>

26
00:01:16,840 --> 00:01:21,490
have<font color="#CCCCCC"> a cache hit</font><font color="#E5E5E5"> that's very fast but at</font>

27
00:01:19,750 --> 00:01:23,289
the same time if you<font color="#E5E5E5"> have something</font>

28
00:01:21,490 --> 00:01:25,270
memory<font color="#E5E5E5"> that's not cache then you will</font>

29
00:01:23,289 --> 00:01:27,939
see a cache miss and<font color="#E5E5E5"> that will be slow</font>

30
00:01:25,270 --> 00:01:31,749
<font color="#E5E5E5">which means that memory accesses are not</font>

31
00:01:27,939 --> 00:01:33,158
performed<font color="#E5E5E5"> in constant time</font><font color="#CCCCCC"> so what's the</font>

32
00:01:31,749 --> 00:01:35,020
motivation<font color="#CCCCCC"> of this paper</font>

33
00:01:33,159 --> 00:01:36,820
well caches<font color="#E5E5E5"> are shared resources they're</font>

34
00:01:35,020 --> 00:01:39,340
shared between<font color="#E5E5E5"> multiple programs running</font>

35
00:01:36,820 --> 00:01:42,999
<font color="#E5E5E5">on the same CPU they can be manipulated</font>

36
00:01:39,340 --> 00:01:44,859
<font color="#E5E5E5">not directly but if a program</font><font color="#CCCCCC"> load</font>

37
00:01:42,999 --> 00:01:47,740
something<font color="#CCCCCC"> into the cache it might affect</font>

38
00:01:44,859 --> 00:01:49,719
something<font color="#E5E5E5"> that's used by another</font><font color="#CCCCCC"> program</font>

39
00:01:47,740 --> 00:01:51,969
<font color="#CCCCCC">and this allows you to spy on other</font>

40
00:01:49,719 --> 00:01:55,658
processors and<font color="#E5E5E5"> you can leak stuff like</font>

41
00:01:51,969 --> 00:01:58,210
input<font color="#E5E5E5"> events but also sensitive data</font><font color="#CCCCCC"> ok</font>

42
00:01:55,659 --> 00:02:01,869
so back to<font color="#E5E5E5"> the pyramid</font><font color="#CCCCCC"> to solve these</font>

43
00:01:58,210 --> 00:02:03,309
cache attacks<font color="#CCCCCC"> there are various defenses</font>

44
00:02:01,869 --> 00:02:06,429
<font color="#E5E5E5">Bowden hardware and software that</font>

45
00:02:03,310 --> 00:02:10,780
defends against the<font color="#E5E5E5"> CPU</font><font color="#CCCCCC"> but they do not</font>

46
00:02:06,429 --> 00:02:12,819
<font color="#CCCCCC">defend against the MMU so to give an</font>

47
00:02:10,780 --> 00:02:15,910
example<font color="#E5E5E5"> we will be</font><font color="#CCCCCC"> talking a bit about a</font>

48
00:02:12,819 --> 00:02:18,369
yesterday<font color="#CCCCCC"> is the advance equipped</font>

49
00:02:15,910 --> 00:02:20,770
encryption<font color="#E5E5E5"> standard and software</font>

50
00:02:18,370 --> 00:02:22,420
implementations used to use<font color="#E5E5E5"> D tables for</font>

51
00:02:20,770 --> 00:02:24,220
this which I'll basically<font color="#CCCCCC"> look up</font><font color="#E5E5E5"> tables</font>

52
00:02:22,420 --> 00:02:27,459
<font color="#E5E5E5">that use the</font><font color="#CCCCCC"> plaintext</font>

53
00:02:24,220 --> 00:02:29,890
combined with the key for the encryption

54
00:02:27,460 --> 00:02:32,440
and the problem is with this is that<font color="#E5E5E5"> the</font>

55
00:02:29,890 --> 00:02:35,049
English<font color="#CCCCCC"> in</font><font color="#E5E5E5"> dishes of the these tables</font>

56
00:02:32,440 --> 00:02:36,940
are key dependent so these<font color="#E5E5E5"> elements</font><font color="#CCCCCC"> in</font>

57
00:02:35,050 --> 00:02:40,000
the<font color="#CCCCCC"> table may be either in</font><font color="#E5E5E5"> the main</font>

58
00:02:36,940 --> 00:02:41,710
memory or<font color="#E5E5E5"> the cache which is</font><font color="#CCCCCC"> problematic</font>

59
00:02:40,000 --> 00:02:45,370
because if we can figure out where in

60
00:02:41,710 --> 00:02:49,330
the cache<font color="#CCCCCC"> this entry</font><font color="#E5E5E5"> is we'll</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> able to</font>

61
00:02:45,370 --> 00:02:51,070
infer data of the key so I'll give<font color="#E5E5E5"> you</font>

62
00:02:49,330 --> 00:02:54,430
<font color="#CCCCCC">more concrete and practical example this</font>

63
00:02:51,070 --> 00:02:56,260
and we'll look into a<font color="#E5E5E5"> final probe which</font>

64
00:02:54,430 --> 00:02:57,580
<font color="#CCCCCC">is one of the cache attacks if you're</font>

65
00:02:56,260 --> 00:02:59,769
interested in<font color="#E5E5E5"> any of the other cache</font>

66
00:02:57,580 --> 00:03:01,980
attacks plus reload<font color="#E5E5E5"> flush and flush or</font>

67
00:02:59,770 --> 00:03:04,810
<font color="#CCCCCC">prime</font><font color="#E5E5E5"> on the board please read the paper</font>

68
00:03:01,980 --> 00:03:08,140
<font color="#E5E5E5">so I'll show you an example of violence</font>

69
00:03:04,810 --> 00:03:12,370
against<font color="#E5E5E5"> a yes encryption first</font><font color="#CCCCCC"> so this</font>

70
00:03:08,140 --> 00:03:14,950
is our cache<font color="#E5E5E5"> and</font><font color="#CCCCCC"> these each the</font><font color="#E5E5E5"> caches</font>

71
00:03:12,370 --> 00:03:16,900
basically divided into different cache

72
00:03:14,950 --> 00:03:19,869
sets and each guy<font color="#CCCCCC"> set has multiple</font>

73
00:03:16,900 --> 00:03:23,950
entries in this case<font color="#E5E5E5"> each set has eight</font>

74
00:03:19,870 --> 00:03:26,620
entries<font color="#E5E5E5"> so we have our</font><font color="#CCCCCC"> ASD table and</font>

75
00:03:23,950 --> 00:03:28,959
every green box<font color="#E5E5E5"> basically represents an</font>

76
00:03:26,620 --> 00:03:30,910
entry in the<font color="#CCCCCC"> T table</font><font color="#E5E5E5"> and we have her</font>

77
00:03:28,959 --> 00:03:32,350
attacker<font color="#E5E5E5"> and in this case the attacker</font>

78
00:03:30,910 --> 00:03:35,560
is going<font color="#E5E5E5"> to focus on the highlighted</font>

79
00:03:32,350 --> 00:03:37,150
<font color="#CCCCCC">cache</font><font color="#E5E5E5"> at for this situation</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> you</font>

80
00:03:35,560 --> 00:03:39,580
<font color="#CCCCCC">Tucker has its own conviction set</font><font color="#E5E5E5"> of</font>

81
00:03:37,150 --> 00:03:41,050
physical<font color="#CCCCCC"> pages so what the attacker is</font>

82
00:03:39,580 --> 00:03:43,770
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to do an appointment probe cache</font>

83
00:03:41,050 --> 00:03:46,450
attack is he's going<font color="#E5E5E5"> to touch every page</font>

84
00:03:43,770 --> 00:03:49,930
to fill up the cache at that he is

85
00:03:46,450 --> 00:03:53,049
interested<font color="#CCCCCC"> and this this</font><font color="#E5E5E5"> face of the</font>

86
00:03:49,930 --> 00:03:55,480
cache attack is called<font color="#CCCCCC"> define</font><font color="#E5E5E5"> step so</font>

87
00:03:53,050 --> 00:03:57,340
now<font color="#CCCCCC"> that the cache is</font><font color="#E5E5E5"> filled with pages</font>

88
00:03:55,480 --> 00:03:59,350
from the attacker<font color="#CCCCCC"> the attacker simply</font>

89
00:03:57,340 --> 00:04:01,410
waits until<font color="#E5E5E5"> the AES encryption kicks in</font>

90
00:03:59,350 --> 00:04:04,359
or<font color="#E5E5E5"> something else happens on the CPU and</font>

91
00:04:01,410 --> 00:04:06,280
if you encrypt something<font color="#CCCCCC"> it will use</font>

92
00:04:04,360 --> 00:04:08,410
some random<font color="#CCCCCC"> entry in the T table and</font>

93
00:04:06,280 --> 00:04:10,630
that will be<font color="#E5E5E5"> loaded into</font><font color="#CCCCCC"> the cache as</font>

94
00:04:08,410 --> 00:04:13,630
well in this<font color="#E5E5E5"> case in a different cache</font>

95
00:04:10,630 --> 00:04:15,730
set so do you attacker<font color="#CCCCCC"> Waits and then</font>

96
00:04:13,630 --> 00:04:17,469
starts probing and probing is basically

97
00:04:15,730 --> 00:04:20,079
the same thing<font color="#CCCCCC"> as prime except now we're</font>

98
00:04:17,470 --> 00:04:22,360
going to measure each guy said to each

99
00:04:20,079 --> 00:04:25,060
<font color="#CCCCCC">pressure</font><font color="#E5E5E5"> and treat to see or each page</font>

100
00:04:22,360 --> 00:04:26,680
to<font color="#E5E5E5"> see if it's in the cache or</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> so</font>

101
00:04:25,060 --> 00:04:28,600
this<font color="#E5E5E5"> page is</font><font color="#CCCCCC"> in the cache this is in the</font>

102
00:04:26,680 --> 00:04:30,850
cache this is still<font color="#CCCCCC"> in the cache all</font>

103
00:04:28,600 --> 00:04:32,470
these pages are say on the cache<font color="#CCCCCC"> what</font>

104
00:04:30,850 --> 00:04:35,710
does the attacker know now<font color="#E5E5E5"> the attacker</font>

105
00:04:32,470 --> 00:04:37,660
knows<font color="#E5E5E5"> that das encrypts did not use this</font>

106
00:04:35,710 --> 00:04:39,789
cassette<font color="#E5E5E5"> and</font>

107
00:04:37,660 --> 00:04:42,220
case let's say that Tucker is going<font color="#CCCCCC"> to</font>

108
00:04:39,790 --> 00:04:43,690
use<font color="#E5E5E5"> this</font><font color="#CCCCCC"> cassette</font><font color="#E5E5E5"> it's going to do</font>

109
00:04:42,220 --> 00:04:46,570
<font color="#CCCCCC">exactly the same thing it's</font><font color="#E5E5E5"> going to</font>

110
00:04:43,690 --> 00:04:49,450
prime<font color="#CCCCCC"> loads</font><font color="#E5E5E5"> entries into the</font><font color="#CCCCCC"> cash set</font><font color="#E5E5E5"> it</font>

111
00:04:46,570 --> 00:04:51,580
weights and then<font color="#E5E5E5"> das</font><font color="#CCCCCC"> encrypts kicks in</font>

112
00:04:49,450 --> 00:04:54,190
and loads it entry into the same<font color="#E5E5E5"> cash</font>

113
00:04:51,580 --> 00:04:55,960
set so what the attacker will<font color="#E5E5E5"> do now is</font>

114
00:04:54,190 --> 00:04:58,480
he will probe again<font color="#E5E5E5"> we will measure</font>

115
00:04:55,960 --> 00:04:59,109
every page and<font color="#CCCCCC"> seize the first pages in</font>

116
00:04:58,480 --> 00:05:01,390
<font color="#E5E5E5">the cache</font>

117
00:04:59,110 --> 00:05:02,830
second pages<font color="#CCCCCC"> cache with</font><font color="#E5E5E5"> the third page</font>

118
00:05:01,390 --> 00:05:06,039
is not that would be<font color="#E5E5E5"> loaded from memory</font>

119
00:05:02,830 --> 00:05:07,450
which will<font color="#E5E5E5"> result in a slowdown so what</font>

120
00:05:06,040 --> 00:05:09,190
does it<font color="#E5E5E5"> take I know in this case the</font>

121
00:05:07,450 --> 00:05:11,229
<font color="#E5E5E5">attacker knows that this cache that was</font>

122
00:05:09,190 --> 00:05:13,930
used and from<font color="#E5E5E5"> this</font><font color="#CCCCCC"> information and</font>

123
00:05:11,230 --> 00:05:16,660
<font color="#CCCCCC">Tucker</font><font color="#E5E5E5"> can leak information about the</font>

124
00:05:13,930 --> 00:05:18,700
key<font color="#E5E5E5"> that's used</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the encryption so</font>

125
00:05:16,660 --> 00:05:20,560
the question is can we defense against

126
00:05:18,700 --> 00:05:24,070
these cache attacks and the answer is

127
00:05:20,560 --> 00:05:26,470
yes<font color="#CCCCCC"> there are</font><font color="#E5E5E5"> two ways or strategies to</font>

128
00:05:24,070 --> 00:05:29,170
do this one is<font color="#CCCCCC"> to basically</font><font color="#E5E5E5"> divide every</font>

129
00:05:26,470 --> 00:05:31,750
cache set into a limited amount<font color="#E5E5E5"> of</font>

130
00:05:29,170 --> 00:05:33,670
entries<font color="#CCCCCC"> that an attacker or victim or</font>

131
00:05:31,750 --> 00:05:35,860
<font color="#CCCCCC">any program can use in</font><font color="#E5E5E5"> the system this</font>

132
00:05:33,670 --> 00:05:38,260
is<font color="#CCCCCC"> called way partitioning because this</font>

133
00:05:35,860 --> 00:05:40,900
is this<font color="#E5E5E5"> crash has eight entries it's an</font>

134
00:05:38,260 --> 00:05:43,360
<font color="#E5E5E5">age way set associative cache and in</font>

135
00:05:40,900 --> 00:05:45,340
this case the cache is divided into an

136
00:05:43,360 --> 00:05:47,230
attacker<font color="#E5E5E5"> that can use four of the</font>

137
00:05:45,340 --> 00:05:48,640
entries and the<font color="#CCCCCC"> victim that</font><font color="#E5E5E5"> can use the</font>

138
00:05:47,230 --> 00:05:51,130
other four of the entries<font color="#CCCCCC"> in each</font><font color="#E5E5E5"> cache</font>

139
00:05:48,640 --> 00:05:54,219
<font color="#E5E5E5">set then we</font><font color="#CCCCCC"> have set</font><font color="#E5E5E5"> partitioning</font><font color="#CCCCCC"> and</font>

140
00:05:51,130 --> 00:05:56,140
set partitioning<font color="#E5E5E5"> the cache is divided</font>

141
00:05:54,220 --> 00:05:59,890
based<font color="#E5E5E5"> on the cache set so you have</font>

142
00:05:56,140 --> 00:06:02,590
different<font color="#CCCCCC"> physical pages</font><font color="#E5E5E5"> and the part of</font>

143
00:05:59,890 --> 00:06:04,300
<font color="#E5E5E5">the physical</font><font color="#CCCCCC"> page will tell of the</font>

144
00:06:02,590 --> 00:06:06,669
address<font color="#E5E5E5"> Hotel which</font><font color="#CCCCCC"> cache that</font><font color="#E5E5E5"> is being</font>

145
00:06:04,300 --> 00:06:09,640
used and by handing out specific pages

146
00:06:06,669 --> 00:06:12,070
you can<font color="#E5E5E5"> actually divide the cache into</font>

147
00:06:09,640 --> 00:06:14,140
by<font color="#CCCCCC"> sets so</font><font color="#E5E5E5"> you basically give the verb</font>

148
00:06:12,070 --> 00:06:17,530
<font color="#E5E5E5">off to the attacker and the lower half</font>

149
00:06:14,140 --> 00:06:19,840
<font color="#E5E5E5">do the fix them so</font><font color="#CCCCCC"> the question is are</font>

150
00:06:17,530 --> 00:06:21,539
<font color="#E5E5E5">those page</font><font color="#CCCCCC"> polling work and page</font>

151
00:06:19,840 --> 00:06:26,049
following is basically set partitioning

152
00:06:21,540 --> 00:06:27,730
<font color="#E5E5E5">so we have this cache guy and we have</font>

153
00:06:26,050 --> 00:06:30,460
physical<font color="#CCCCCC"> pages</font><font color="#E5E5E5"> and like I</font><font color="#CCCCCC"> said</font><font color="#E5E5E5"> before</font>

154
00:06:27,730 --> 00:06:33,250
<font color="#E5E5E5">each page</font><font color="#CCCCCC"> has a</font><font color="#E5E5E5"> physical address with</font>

155
00:06:30,460 --> 00:06:35,320
bits that indicate where the page is

156
00:06:33,250 --> 00:06:37,120
<font color="#CCCCCC">going to be</font><font color="#E5E5E5"> in the cache</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> so let's</font>

157
00:06:35,320 --> 00:06:39,610
say this<font color="#CCCCCC"> is a web page</font><font color="#E5E5E5"> and it will</font>

158
00:06:37,120 --> 00:06:41,320
<font color="#CCCCCC">always being</font><font color="#E5E5E5"> read cache shots then we</font>

159
00:06:39,610 --> 00:06:44,080
have a green<font color="#CCCCCC"> one that</font><font color="#E5E5E5"> will always</font><font color="#CCCCCC"> be in</font>

160
00:06:41,320 --> 00:06:46,479
these green<font color="#CCCCCC"> cash sets</font><font color="#E5E5E5"> and then we have a</font>

161
00:06:44,080 --> 00:06:49,719
blue<font color="#E5E5E5"> one that will always</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the blue</font>

162
00:06:46,479 --> 00:06:51,610
cache sets<font color="#E5E5E5"> now if we give for instance</font>

163
00:06:49,720 --> 00:06:53,919
as an operating system<font color="#E5E5E5"> there</font>

164
00:06:51,610 --> 00:06:56,349
always read pages<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> victor the</font>

165
00:06:53,919 --> 00:06:59,859
<font color="#CCCCCC">blue or green pages</font><font color="#E5E5E5"> then these are fully</font>

166
00:06:56,349 --> 00:07:02,530
isolated<font color="#CCCCCC"> it's shown below a shown here</font>

167
00:06:59,860 --> 00:07:05,189
<font color="#E5E5E5">in the slide so these are</font><font color="#CCCCCC"> nicely</font>

168
00:07:02,530 --> 00:07:08,258
isolated<font color="#E5E5E5"> so everything is fixed right</font>

169
00:07:05,189 --> 00:07:10,210
<font color="#E5E5E5">well if we look further into page</font>

170
00:07:08,259 --> 00:07:12,849
coloring<font color="#E5E5E5"> we can see that if the attacker</font>

171
00:07:10,210 --> 00:07:16,150
<font color="#E5E5E5">allocates on pages</font><font color="#CCCCCC"> we will only</font><font color="#E5E5E5"> allocate</font>

172
00:07:12,849 --> 00:07:19,120
<font color="#E5E5E5">red pages but if we look at the page</font>

173
00:07:16,150 --> 00:07:22,030
tables<font color="#E5E5E5"> these are not typically colored</font>

174
00:07:19,120 --> 00:07:23,740
by this defense<font color="#E5E5E5"> so what happens is</font><font color="#CCCCCC"> that</font>

175
00:07:22,030 --> 00:07:25,059
if you look at the page tables<font color="#E5E5E5"> is that</font>

176
00:07:23,740 --> 00:07:26,979
they can have any of<font color="#CCCCCC"> the colors</font>

177
00:07:25,060 --> 00:07:31,779
<font color="#CCCCCC">available on the</font><font color="#E5E5E5"> system where it's blue</font>

178
00:07:26,979 --> 00:07:34,000
<font color="#CCCCCC">and green the question first is can we</font>

179
00:07:31,779 --> 00:07:37,419
<font color="#CCCCCC">actually control</font><font color="#E5E5E5"> the page tables to</font><font color="#CCCCCC"> mind</font>

180
00:07:34,000 --> 00:07:39,250
the cache attack well let's meet the

181
00:07:37,419 --> 00:07:40,688
memory management units<font color="#E5E5E5"> so what's the</font>

182
00:07:39,250 --> 00:07:42,909
memory management unit<font color="#CCCCCC"> we haven't heard</font>

183
00:07:40,689 --> 00:07:45,219
a<font color="#CCCCCC"> lot about that except</font><font color="#E5E5E5"> for operating</font>

184
00:07:42,909 --> 00:07:47,379
systems right well the<font color="#E5E5E5"> memory management</font>

185
00:07:45,219 --> 00:07:49,509
units translates virtual addresses<font color="#E5E5E5"> into</font>

186
00:07:47,379 --> 00:07:51,539
<font color="#E5E5E5">their physical counterparts</font><font color="#CCCCCC"> bars</font><font color="#E5E5E5"> and</font>

187
00:07:49,509 --> 00:07:54,069
translate or translate attacks and

188
00:07:51,539 --> 00:07:56,378
<font color="#CCCCCC">transform probe is a variant of final</font>

189
00:07:54,069 --> 00:08:00,250
probe<font color="#E5E5E5"> that uses the page tables instead</font>

190
00:07:56,379 --> 00:08:01,990
<font color="#E5E5E5">of the pages to execute this attack so</font>

191
00:08:00,250 --> 00:08:04,629
the question<font color="#E5E5E5"> here is how</font><font color="#CCCCCC"> does</font><font color="#E5E5E5"> the MMU</font>

192
00:08:01,990 --> 00:08:07,180
actually perform page<font color="#CCCCCC"> table walks so a</font>

193
00:08:04,629 --> 00:08:09,219
quick<font color="#E5E5E5"> recap for if you are not familiar</font>

194
00:08:07,180 --> 00:08:11,650
with<font color="#CCCCCC"> how this works and operating</font>

195
00:08:09,219 --> 00:08:14,080
systems and<font color="#CCCCCC"> that harder MMU does this so</font>

196
00:08:11,650 --> 00:08:17,080
<font color="#CCCCCC">here is a virtual address</font><font color="#E5E5E5"> and we have a</font>

197
00:08:14,080 --> 00:08:20,139
<font color="#CCCCCC">catcher gap</font><font color="#E5E5E5"> and the virtual address</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> a</font>

198
00:08:17,080 --> 00:08:22,180
consists of<font color="#CCCCCC"> a page offset which is not</font>

199
00:08:20,139 --> 00:08:25,120
relevant<font color="#CCCCCC"> for it but it also contains</font><font color="#E5E5E5"> the</font>

200
00:08:22,180 --> 00:08:27,400
page table<font color="#CCCCCC"> in dishes</font><font color="#E5E5E5"> so if we look at</font>

201
00:08:25,120 --> 00:08:29,199
some example these could be<font color="#CCCCCC"> for</font>

202
00:08:27,400 --> 00:08:30,669
<font color="#E5E5E5">different Englishes that's stored in</font>

203
00:08:29,199 --> 00:08:33,729
that part of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> virtual address of this</font>

204
00:08:30,669 --> 00:08:36,728
<font color="#CCCCCC">particular virtual address</font><font color="#E5E5E5"> and operating</font>

205
00:08:33,729 --> 00:08:40,209
the MMU itself has a register called<font color="#CCCCCC"> co3</font>

206
00:08:36,729 --> 00:08:43,419
<font color="#E5E5E5">on x86</font><font color="#CCCCCC"> and this points to the very first</font>

207
00:08:40,208 --> 00:08:45,790
page tip and then the first index<font color="#E5E5E5"> is</font>

208
00:08:43,419 --> 00:08:48,339
used<font color="#E5E5E5"> by the MMU and</font><font color="#CCCCCC"> MMU will pick that</font>

209
00:08:45,790 --> 00:08:50,319
entry<font color="#E5E5E5"> from that table</font><font color="#CCCCCC"> and that's and</font>

210
00:08:48,339 --> 00:08:52,089
<font color="#E5E5E5">that entry will point to the</font><font color="#CCCCCC"> next page</font>

211
00:08:50,320 --> 00:08:54,190
table and then<font color="#CCCCCC"> i'm am you will</font><font color="#E5E5E5"> proceed</font>

212
00:08:52,089 --> 00:08:56,320
<font color="#E5E5E5">with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> next index that will find</font>

213
00:08:54,190 --> 00:08:58,540
<font color="#E5E5E5">another entry</font><font color="#CCCCCC"> at will</font><font color="#E5E5E5"> point to another</font>

214
00:08:56,320 --> 00:09:00,490
page table and finally it will<font color="#E5E5E5"> pick</font>

215
00:08:58,540 --> 00:09:02,620
another index and we'll find another

216
00:09:00,490 --> 00:09:04,060
entry that points to the final page

217
00:09:02,620 --> 00:09:07,330
table

218
00:09:04,060 --> 00:09:09,280
now there's one<font color="#E5E5E5"> index left so the MMU is</font>

219
00:09:07,330 --> 00:09:12,760
going to use<font color="#E5E5E5"> that to find an entry and</font>

220
00:09:09,280 --> 00:09:15,010
this entry<font color="#E5E5E5"> either tells like this page</font>

221
00:09:12,760 --> 00:09:16,930
is<font color="#CCCCCC"> present or not and if it is present</font>

222
00:09:15,010 --> 00:09:19,510
<font color="#E5E5E5">it gives you the</font><font color="#CCCCCC"> physical address that</font>

223
00:09:16,930 --> 00:09:21,400
belongs<font color="#E5E5E5"> to this virtual address</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> at</font>

224
00:09:19,510 --> 00:09:23,650
the same time<font color="#E5E5E5"> if you looked</font><font color="#CCCCCC"> closely at</font>

225
00:09:21,400 --> 00:09:26,290
<font color="#CCCCCC">the cache what happens is</font><font color="#E5E5E5"> that all of</font>

226
00:09:23,650 --> 00:09:29,500
these<font color="#E5E5E5"> entries from will also be fetched</font>

227
00:09:26,290 --> 00:09:31,860
into the cache<font color="#E5E5E5"> so the question is what</font>

228
00:09:29,500 --> 00:09:33,640
do<font color="#CCCCCC"> we actually</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to perform a</font>

229
00:09:31,860 --> 00:09:36,700
translator<font color="#E5E5E5"> and probe attack</font>

230
00:09:33,640 --> 00:09:38,830
well first we actually want to avoid<font color="#E5E5E5"> to</font>

231
00:09:36,700 --> 00:09:40,810
the noise from<font color="#CCCCCC"> the high level page</font>

232
00:09:38,830 --> 00:09:42,340
tables so we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> four different page</font>

233
00:09:40,810 --> 00:09:44,650
tables that<font color="#E5E5E5"> are being</font><font color="#CCCCCC"> accessed</font><font color="#E5E5E5"> every</font>

234
00:09:42,340 --> 00:09:47,470
time and we want to make<font color="#CCCCCC"> sure that only</font>

235
00:09:44,650 --> 00:09:49,630
one<font color="#E5E5E5"> page table is accessed that's</font><font color="#CCCCCC"> that</font>

236
00:09:47,470 --> 00:09:51,820
<font color="#E5E5E5">that's all preference basically we also</font>

237
00:09:49,630 --> 00:09:53,710
want to avoid noise from physical pages

238
00:09:51,820 --> 00:09:57,610
<font color="#E5E5E5">so we</font><font color="#CCCCCC"> have also</font><font color="#E5E5E5"> or physical pages</font>

239
00:09:53,710 --> 00:09:58,660
<font color="#E5E5E5">themselves that use or cache and we</font><font color="#CCCCCC"> want</font>

240
00:09:57,610 --> 00:10:01,720
to figure<font color="#E5E5E5"> out how</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> actually build</font>

241
00:09:58,660 --> 00:10:04,750
these eviction sets so let's try to

242
00:10:01,720 --> 00:10:06,730
<font color="#E5E5E5">tackle the first</font><font color="#CCCCCC"> poem the answer to the</font>

243
00:10:04,750 --> 00:10:10,060
first problem<font color="#CCCCCC"> our translation</font><font color="#E5E5E5"> caches</font>

244
00:10:06,730 --> 00:10:12,250
another<font color="#CCCCCC"> mythical component and</font><font color="#E5E5E5"> CPUs that</font>

245
00:10:10,060 --> 00:10:13,930
<font color="#E5E5E5">we don't hear</font><font color="#CCCCCC"> a lot about and what</font>

246
00:10:12,250 --> 00:10:17,890
translation caches do is they<font color="#E5E5E5"> store</font>

247
00:10:13,930 --> 00:10:20,500
<font color="#E5E5E5">virtual addresses and the</font><font color="#CCCCCC"> inter</font><font color="#E5E5E5"> and the</font>

248
00:10:17,890 --> 00:10:22,810
physical address<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the page table they</font>

249
00:10:20,500 --> 00:10:25,840
point it so to give an example<font color="#E5E5E5"> we go</font>

250
00:10:22,810 --> 00:10:27,849
back to<font color="#E5E5E5"> our page table walk so these are</font>

251
00:10:25,840 --> 00:10:29,500
like<font color="#CCCCCC"> the</font><font color="#E5E5E5"> in dishes we use this year</font>

252
00:10:27,850 --> 00:10:32,710
<font color="#CCCCCC">three and we perform a page table book</font>

253
00:10:29,500 --> 00:10:33,190
and at this<font color="#E5E5E5"> point something interesting</font>

254
00:10:32,710 --> 00:10:35,710
will happen

255
00:10:33,190 --> 00:10:37,420
<font color="#E5E5E5">because what translation caches will do</font>

256
00:10:35,710 --> 00:10:40,000
is they<font color="#CCCCCC"> will store part of the like in</font>

257
00:10:37,420 --> 00:10:43,240
<font color="#CCCCCC">this case three of the in</font><font color="#E5E5E5"> dishes and the</font>

258
00:10:40,000 --> 00:10:45,580
<font color="#CCCCCC">intermediate page table points to so now</font>

259
00:10:43,240 --> 00:10:48,430
<font color="#E5E5E5">this is stored and</font><font color="#CCCCCC"> what will happen is</font>

260
00:10:45,580 --> 00:10:50,110
<font color="#E5E5E5">okay we have the physical atoms so now</font>

261
00:10:48,430 --> 00:10:52,089
if we<font color="#CCCCCC"> try to look</font><font color="#E5E5E5"> up the virtual address</font>

262
00:10:50,110 --> 00:10:54,130
again with this entry<font color="#E5E5E5"> being stored and</font>

263
00:10:52,090 --> 00:10:56,170
translation cache<font color="#E5E5E5"> what will happen is</font>

264
00:10:54,130 --> 00:10:58,060
<font color="#CCCCCC">we'll</font><font color="#E5E5E5"> look at the indices and take the</font>

265
00:10:56,170 --> 00:11:00,640
first three and match it<font color="#E5E5E5"> with the</font>

266
00:10:58,060 --> 00:11:02,890
entries<font color="#CCCCCC"> in our cache now that entry</font>

267
00:11:00,640 --> 00:11:04,780
matches<font color="#CCCCCC"> exactly with the in dishes we</font>

268
00:11:02,890 --> 00:11:07,620
are looking for so now we can<font color="#CCCCCC"> just</font>

269
00:11:04,780 --> 00:11:10,240
simply jump to the last<font color="#E5E5E5"> page tip and</font>

270
00:11:07,620 --> 00:11:11,710
then we can just<font color="#E5E5E5"> use the</font><font color="#CCCCCC"> loss</font><font color="#E5E5E5"> index</font>

271
00:11:10,240 --> 00:11:13,900
find the entry and get the physical

272
00:11:11,710 --> 00:11:17,110
<font color="#E5E5E5">address</font><font color="#CCCCCC"> so we</font><font color="#E5E5E5"> just get three of the page</font>

273
00:11:13,900 --> 00:11:17,649
<font color="#E5E5E5">tables unfortunately some</font><font color="#CCCCCC"> of the</font>

274
00:11:17,110 --> 00:11:19,540
properties

275
00:11:17,649 --> 00:11:20,769
translation caches are undocumented like

276
00:11:19,540 --> 00:11:22,868
I said there<font color="#CCCCCC"> are quite a medical</font>

277
00:11:20,769 --> 00:11:25,240
<font color="#CCCCCC">component and you're not really</font>

278
00:11:22,869 --> 00:11:27,430
<font color="#E5E5E5">documented well so the question</font><font color="#CCCCCC"> we have</font>

279
00:11:25,240 --> 00:11:29,379
is<font color="#E5E5E5"> how do we actually figure out the</font>

280
00:11:27,430 --> 00:11:33,939
properties how do we research and

281
00:11:29,379 --> 00:11:36,579
engineer these translation caches<font color="#E5E5E5"> so</font>

282
00:11:33,939 --> 00:11:38,949
back to the translation caches<font color="#E5E5E5"> I'm sorry</font>

283
00:11:36,579 --> 00:11:43,569
if the in dishes and what we do is

284
00:11:38,949 --> 00:11:46,209
<font color="#E5E5E5">basically we fix a target and</font><font color="#CCCCCC"> if virtual</font>

285
00:11:43,569 --> 00:11:47,740
address<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> basically</font><font color="#E5E5E5"> load it a true</font>

286
00:11:46,209 --> 00:11:49,959
normal page<font color="#CCCCCC"> stable</font><font color="#E5E5E5"> work and get the</font>

287
00:11:47,740 --> 00:11:51,879
<font color="#CCCCCC">physical address and what happens is our</font>

288
00:11:49,959 --> 00:11:54,128
<font color="#E5E5E5">target will be in the translation cache</font>

289
00:11:51,879 --> 00:11:57,100
and to<font color="#E5E5E5"> figure out the size of a</font>

290
00:11:54,129 --> 00:11:59,920
translation<font color="#E5E5E5"> cache</font><font color="#CCCCCC"> our quest is basically</font>

291
00:11:57,100 --> 00:12:01,449
to access a number<font color="#CCCCCC"> of other virtual</font>

292
00:11:59,920 --> 00:12:03,429
addresses that will<font color="#E5E5E5"> basically add</font>

293
00:12:01,449 --> 00:12:05,589
entries into<font color="#E5E5E5"> the translation cache so</font>

294
00:12:03,429 --> 00:12:09,819
for<font color="#E5E5E5"> instance if we try to do this</font><font color="#CCCCCC"> for</font>

295
00:12:05,589 --> 00:12:11,619
two other virtual addresses<font color="#E5E5E5"> then they</font>

296
00:12:09,819 --> 00:12:13,029
will fill up the<font color="#CCCCCC"> done they</font><font color="#E5E5E5"> will add two</font>

297
00:12:11,619 --> 00:12:15,519
entries<font color="#E5E5E5"> to the translation cache but</font>

298
00:12:13,029 --> 00:12:18,249
they will not<font color="#E5E5E5"> kick out or entry so when</font>

299
00:12:15,519 --> 00:12:20,889
we load a target again we<font color="#E5E5E5"> will see that</font>

300
00:12:18,249 --> 00:12:22,569
the MMU will just skip<font color="#E5E5E5"> right ahead to</font>

301
00:12:20,889 --> 00:12:24,699
the<font color="#CCCCCC"> right</font><font color="#E5E5E5"> page table and get the</font>

302
00:12:22,569 --> 00:12:26,589
<font color="#CCCCCC">physical address so this is very fast so</font>

303
00:12:24,699 --> 00:12:29,290
<font color="#CCCCCC">we know okay</font><font color="#E5E5E5"> two entries is not</font>

304
00:12:26,589 --> 00:12:31,179
sufficient<font color="#E5E5E5"> so let's try this with four</font>

305
00:12:29,290 --> 00:12:32,379
entries so we have four virtual

306
00:12:31,179 --> 00:12:36,129
<font color="#E5E5E5">addresses that we're trying to access</font>

307
00:12:32,379 --> 00:12:38,589
now and the last one will actually<font color="#E5E5E5"> kick</font>

308
00:12:36,129 --> 00:12:40,990
out our own entry so when we try to

309
00:12:38,589 --> 00:12:43,480
reload the target it has to do a full

310
00:12:40,990 --> 00:12:45,459
page table<font color="#CCCCCC"> walk which</font><font color="#E5E5E5"> is a lot slower so</font>

311
00:12:43,480 --> 00:12:48,009
this is how we figured out the sizes<font color="#CCCCCC"> of</font>

312
00:12:45,459 --> 00:12:49,300
<font color="#E5E5E5">all</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> translation caches on 26</font>

313
00:12:48,009 --> 00:12:51,279
<font color="#E5E5E5">different microstructures</font>

314
00:12:49,300 --> 00:12:53,620
and the interesting<font color="#CCCCCC"> part is the</font>

315
00:12:51,279 --> 00:12:55,959
highlighted part of<font color="#E5E5E5"> the table</font><font color="#CCCCCC"> which are</font>

316
00:12:53,620 --> 00:12:57,699
the translation caches<font color="#E5E5E5"> the conclusion is</font>

317
00:12:55,959 --> 00:13:02,349
translation caches are widely<font color="#E5E5E5"> available</font>

318
00:12:57,699 --> 00:13:05,170
on<font color="#CCCCCC"> Intel AMD and arm so back to this</font>

319
00:13:02,350 --> 00:13:08,290
picture<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> our page tables and we</font>

320
00:13:05,170 --> 00:13:11,170
are interested in the road with<font color="#CCCCCC"> hatches</font>

321
00:13:08,290 --> 00:13:13,029
<font color="#E5E5E5">we only want to control those well</font><font color="#CCCCCC"> with</font>

322
00:13:11,170 --> 00:13:15,839
<font color="#CCCCCC">translation caches we now have better</font>

323
00:13:13,029 --> 00:13:18,429
<font color="#E5E5E5">control so the first challenge is solved</font>

324
00:13:15,839 --> 00:13:21,490
so let's tackle the second one the

325
00:13:18,429 --> 00:13:24,369
second one<font color="#E5E5E5"> is quite simple</font><font color="#CCCCCC"> the solution</font>

326
00:13:21,490 --> 00:13:26,170
<font color="#CCCCCC">here is two we have</font><font color="#E5E5E5"> these pages but if</font>

327
00:13:24,369 --> 00:13:28,569
we replace them by a shared page<font color="#CCCCCC"> and</font>

328
00:13:26,170 --> 00:13:30,399
shared memory<font color="#E5E5E5"> we only have one page to</font>

329
00:13:28,569 --> 00:13:31,229
loads and it will<font color="#CCCCCC"> only occupy one cache</font>

330
00:13:30,399 --> 00:13:33,730
entry

331
00:13:31,230 --> 00:13:36,130
<font color="#CCCCCC">but remove some of the noise as well</font><font color="#E5E5E5"> so</font>

332
00:13:33,730 --> 00:13:38,920
in second challenge is salt<font color="#E5E5E5"> and the last</font>

333
00:13:36,130 --> 00:13:41,439
challenge is to build<font color="#CCCCCC"> eviction</font><font color="#E5E5E5"> sets so</font>

334
00:13:38,920 --> 00:13:43,449
how do<font color="#E5E5E5"> we do this</font><font color="#CCCCCC"> we draw we draw</font>

335
00:13:41,440 --> 00:13:44,770
inspiration<font color="#CCCCCC"> from another paper called</font>

336
00:13:43,450 --> 00:13:46,690
<font color="#CCCCCC">the spineless handbook so if you're</font>

337
00:13:44,770 --> 00:13:49,720
familiar with<font color="#E5E5E5"> this or don't really</font>

338
00:13:46,690 --> 00:13:51,510
<font color="#E5E5E5">remember this is a Greek</font><font color="#CCCCCC"> hat</font><font color="#E5E5E5"> but I will</font>

339
00:13:49,720 --> 00:13:54,720
explain<font color="#CCCCCC"> how we build our eviction sets</font>

340
00:13:51,510 --> 00:13:58,960
and it's very similar to is the

341
00:13:54,720 --> 00:14:01,750
description in this<font color="#E5E5E5"> paper so we ever</font>

342
00:13:58,960 --> 00:14:04,090
catch and our goal<font color="#CCCCCC"> is basically</font><font color="#E5E5E5"> you want</font>

343
00:14:01,750 --> 00:14:06,880
to<font color="#E5E5E5"> find an eviction set that can affect</font>

344
00:14:04,090 --> 00:14:09,430
any<font color="#E5E5E5"> Keshet so what we do first is we</font>

345
00:14:06,880 --> 00:14:13,750
allocate a bunch of pages<font color="#E5E5E5"> red ones blue</font>

346
00:14:09,430 --> 00:14:15,640
ones green ones<font color="#CCCCCC"> bunch of pages</font><font color="#E5E5E5"> and then</font>

347
00:14:13,750 --> 00:14:17,350
we draw our targets<font color="#CCCCCC"> this is your target</font>

348
00:14:15,640 --> 00:14:19,030
<font color="#CCCCCC">page so what we're trying</font><font color="#E5E5E5"> to do</font><font color="#CCCCCC"> now is</font>

349
00:14:17,350 --> 00:14:20,800
we have<font color="#E5E5E5"> a web page and we're trying to</font>

350
00:14:19,030 --> 00:14:23,890
find<font color="#E5E5E5"> an eviction set that can evict this</font>

351
00:14:20,800 --> 00:14:25,329
<font color="#E5E5E5">web page for</font><font color="#CCCCCC"> more cash so reloads every</font>

352
00:14:23,890 --> 00:14:27,699
<font color="#E5E5E5">time we will load this page into the</font>

353
00:14:25,330 --> 00:14:29,440
<font color="#CCCCCC">cache and then we will try to build</font><font color="#E5E5E5"> your</font>

354
00:14:27,700 --> 00:14:33,100
eviction set so we first draw a blue

355
00:14:29,440 --> 00:14:34,810
page from<font color="#E5E5E5"> our set of</font><font color="#CCCCCC"> pages and we load</font>

356
00:14:33,100 --> 00:14:37,330
it into<font color="#E5E5E5"> the cache but this does not</font>

357
00:14:34,810 --> 00:14:39,790
<font color="#CCCCCC">affect or</font><font color="#E5E5E5"> web page so then we draw</font>

358
00:14:37,330 --> 00:14:42,160
another<font color="#E5E5E5"> page another page and</font><font color="#CCCCCC"> we keep</font>

359
00:14:39,790 --> 00:14:44,589
<font color="#E5E5E5">trying</font><font color="#CCCCCC"> to draw</font><font color="#E5E5E5"> more pages until we can</font>

360
00:14:42,160 --> 00:14:47,199
actually<font color="#E5E5E5"> evict this target page and then</font>

361
00:14:44,590 --> 00:14:49,450
at<font color="#E5E5E5"> some points we'll end up with</font><font color="#CCCCCC"> a set</font>

362
00:14:47,200 --> 00:14:52,930
of<font color="#E5E5E5"> pages that are able</font><font color="#CCCCCC"> to evict this</font>

363
00:14:49,450 --> 00:14:54,550
particular target<font color="#CCCCCC"> from our cache</font><font color="#E5E5E5"> an</font>

364
00:14:52,930 --> 00:14:57,069
annoying issue though<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> we have</font>

365
00:14:54,550 --> 00:14:58,569
found<font color="#E5E5E5"> the eviction</font><font color="#CCCCCC"> set</font><font color="#E5E5E5"> but we also have</font>

366
00:14:57,070 --> 00:15:00,520
all these<font color="#CCCCCC"> pages these blue ones and</font>

367
00:14:58,570 --> 00:15:02,140
<font color="#E5E5E5">these green ones that are not really</font>

368
00:15:00,520 --> 00:15:05,500
useful<font color="#E5E5E5"> for your fiction</font><font color="#CCCCCC"> set</font><font color="#E5E5E5"> so how do we</font>

369
00:15:02,140 --> 00:15:08,140
filter these the solution here is to

370
00:15:05,500 --> 00:15:11,380
<font color="#E5E5E5">basically remove every page so we move</font>

371
00:15:08,140 --> 00:15:13,870
to the blue one and then we'll try<font color="#E5E5E5"> to</font>

372
00:15:11,380 --> 00:15:16,300
see if or<font color="#E5E5E5"> eviction set is still able to</font>

373
00:15:13,870 --> 00:15:18,160
evict<font color="#E5E5E5"> our page and in this case</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> still</font>

374
00:15:16,300 --> 00:15:20,979
is so<font color="#CCCCCC"> we can just keep the blue one out</font>

375
00:15:18,160 --> 00:15:21,880
and then we'll try the red one<font color="#CCCCCC"> and we</font>

376
00:15:20,980 --> 00:15:25,570
see<font color="#CCCCCC"> that</font><font color="#E5E5E5"> okay</font>

377
00:15:21,880 --> 00:15:27,250
there's red one<font color="#E5E5E5"> it our eviction set is</font>

378
00:15:25,570 --> 00:15:28,930
no longer<font color="#E5E5E5"> suitable</font><font color="#CCCCCC"> as an eviction set so</font>

379
00:15:27,250 --> 00:15:31,840
we need that page<font color="#E5E5E5"> so we add it back in</font>

380
00:15:28,930 --> 00:15:33,550
<font color="#E5E5E5">and we keep</font><font color="#CCCCCC"> doing this and so all the</font>

381
00:15:31,840 --> 00:15:35,740
pages are filtered so all we're left

382
00:15:33,550 --> 00:15:38,680
with<font color="#E5E5E5"> are the red pages that evict our</font>

383
00:15:35,740 --> 00:15:41,160
target page so<font color="#E5E5E5"> now we have</font><font color="#CCCCCC"> no optimal</font>

384
00:15:38,680 --> 00:15:43,479
eviction<font color="#E5E5E5"> sets and last step we can do is</font>

385
00:15:41,160 --> 00:15:44,959
basically use this eviction set to

386
00:15:43,480 --> 00:15:47,450
filter the remaining

387
00:15:44,960 --> 00:15:49,850
former set of<font color="#CCCCCC"> pages so now we're just</font>

388
00:15:47,450 --> 00:15:51,320
<font color="#E5E5E5">left with blue and green pages and we</font>

389
00:15:49,850 --> 00:15:52,880
can<font color="#E5E5E5"> proceed doing this to find</font><font color="#CCCCCC"> an</font>

390
00:15:51,320 --> 00:15:58,700
<font color="#CCCCCC">eviction</font><font color="#E5E5E5"> set for every color in the</font>

391
00:15:52,880 --> 00:15:59,750
<font color="#CCCCCC">cache</font><font color="#E5E5E5"> so for</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> for our</font><font color="#CCCCCC"> attack</font><font color="#E5E5E5"> the only</font>

392
00:15:58,700 --> 00:16:01,670
<font color="#E5E5E5">thing you will have to know</font><font color="#CCCCCC"> is that</font>

393
00:15:59,750 --> 00:16:03,830
technique can also be used for page

394
00:16:01,670 --> 00:16:06,260
tables<font color="#E5E5E5"> if you really want to know like</font>

395
00:16:03,830 --> 00:16:09,340
the details<font color="#E5E5E5"> I invite you to read the</font>

396
00:16:06,260 --> 00:16:12,050
<font color="#CCCCCC">paper so the tree</font><font color="#E5E5E5"> challenges are solved</font>

397
00:16:09,340 --> 00:16:15,830
<font color="#E5E5E5">then it's time again for the big picture</font>

398
00:16:12,050 --> 00:16:18,680
I think<font color="#E5E5E5"> and so we have our</font><font color="#CCCCCC"> cache and we</font>

399
00:16:15,830 --> 00:16:21,170
have a<font color="#E5E5E5"> SD table and we have an attacker</font>

400
00:16:18,680 --> 00:16:22,430
<font color="#E5E5E5">and you take her as an eviction set but</font>

401
00:16:21,170 --> 00:16:24,610
the interesting part of this eviction

402
00:16:22,430 --> 00:16:26,989
set or actually page tables

403
00:16:24,610 --> 00:16:29,480
so what attacker will do is now a

404
00:16:26,990 --> 00:16:31,640
translate face<font color="#E5E5E5"> where it will simply do</font>

405
00:16:29,480 --> 00:16:33,530
something similar<font color="#E5E5E5"> to</font><font color="#CCCCCC"> crime access all</font>

406
00:16:31,640 --> 00:16:36,319
the pages<font color="#E5E5E5"> and use the MMU to actually</font>

407
00:16:33,530 --> 00:16:39,589
load to fill the cache set then it<font color="#E5E5E5"> will</font>

408
00:16:36,320 --> 00:16:42,680
wait and the victim will now encrypt

409
00:16:39,590 --> 00:16:46,790
something<font color="#E5E5E5"> and that will take one of our</font>

410
00:16:42,680 --> 00:16:51,199
<font color="#E5E5E5">entries arts and then we'll do</font><font color="#CCCCCC"> the probe</font>

411
00:16:46,790 --> 00:16:55,160
<font color="#E5E5E5">face to reload all our entries and see</font>

412
00:16:51,200 --> 00:16:57,350
if any<font color="#CCCCCC"> of the page</font><font color="#E5E5E5"> table walks will slow</font>

413
00:16:55,160 --> 00:16:59,240
down<font color="#E5E5E5"> and we find the page table</font><font color="#CCCCCC"> worked</font>

414
00:16:57,350 --> 00:17:01,070
<font color="#CCCCCC">and slow down so we now know that this</font>

415
00:16:59,240 --> 00:17:06,500
is<font color="#CCCCCC"> the cache</font><font color="#E5E5E5"> set that was being used</font><font color="#CCCCCC"> by</font>

416
00:17:01,070 --> 00:17:09,410
<font color="#E5E5E5">the areas and quit so infiltration we</font>

417
00:17:06,500 --> 00:17:11,450
try we test it or check three things

418
00:17:09,410 --> 00:17:14,750
reliability<font color="#E5E5E5"> effectiveness and the cache</font>

419
00:17:11,450 --> 00:17:17,300
defenses for<font color="#E5E5E5"> reliability we implemented</font>

420
00:17:14,750 --> 00:17:19,310
a<font color="#E5E5E5"> covered channel</font><font color="#CCCCCC"> to where we basically</font>

421
00:17:17,300 --> 00:17:21,740
implemented six of the cache attacks or

422
00:17:19,310 --> 00:17:24,770
well<font color="#CCCCCC"> forth to catch at X</font><font color="#E5E5E5"> or e and we</font>

423
00:17:21,740 --> 00:17:27,349
measured the bandwidth and error rate

424
00:17:24,770 --> 00:17:29,510
basically<font color="#E5E5E5"> and the conclusion here is</font>

425
00:17:27,349 --> 00:17:32,629
that translated attacks are practical

426
00:17:29,510 --> 00:17:35,330
for<font color="#CCCCCC"> effectiveness we implement we used</font>

427
00:17:32,630 --> 00:17:37,220
open<font color="#E5E5E5"> SSL</font><font color="#CCCCCC"> t-table AES implementation and</font>

428
00:17:35,330 --> 00:17:39,139
basically<font color="#E5E5E5"> try to see if we could get</font><font color="#CCCCCC"> a</font>

429
00:17:37,220 --> 00:17:41,810
signal with all six cache attacks<font color="#E5E5E5"> and</font>

430
00:17:39,140 --> 00:17:43,850
<font color="#E5E5E5">you can clearly see that we</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> a signal</font>

431
00:17:41,810 --> 00:17:46,610
for<font color="#CCCCCC"> all six of the cache attacks</font>

432
00:17:43,850 --> 00:17:48,649
including ours<font color="#CCCCCC"> do which means</font><font color="#E5E5E5"> that</font>

433
00:17:46,610 --> 00:17:51,889
translate<font color="#E5E5E5"> and probe is effective against</font>

434
00:17:48,650 --> 00:17:54,880
<font color="#E5E5E5">a SD tables and finally we have the</font>

435
00:17:51,890 --> 00:17:58,440
cache defenses and<font color="#E5E5E5"> the question is does</font>

436
00:17:54,880 --> 00:18:00,509
translate<font color="#CCCCCC"> and probe</font><font color="#E5E5E5"> actually bypass</font>

437
00:17:58,440 --> 00:18:04,409
<font color="#E5E5E5">these</font><font color="#CCCCCC"> cache defenses so we</font><font color="#E5E5E5"> implemented</font>

438
00:18:00,509 --> 00:18:06,330
page following and a defense<font color="#E5E5E5"> using</font><font color="#CCCCCC"> white</font>

439
00:18:04,409 --> 00:18:08,190
<font color="#E5E5E5">partitioning and you can clearly</font><font color="#CCCCCC"> see</font>

440
00:18:06,330 --> 00:18:09,990
that these<font color="#E5E5E5"> defenses mitigate</font><font color="#CCCCCC"> primal</font>

441
00:18:08,190 --> 00:18:12,809
probe but<font color="#CCCCCC"> translator and Pope is able to</font>

442
00:18:09,990 --> 00:18:14,639
bypass these<font color="#E5E5E5"> so the conclusion</font><font color="#CCCCCC"> here is</font>

443
00:18:12,809 --> 00:18:17,460
that translating probe is able to bypass

444
00:18:14,639 --> 00:18:19,769
both set and<font color="#CCCCCC"> white partitioning so</font>

445
00:18:17,460 --> 00:18:21,480
conclusions<font color="#CCCCCC"> we have introduced a new</font>

446
00:18:19,769 --> 00:18:23,399
<font color="#E5E5E5">family of of cache attacks translated</font>

447
00:18:21,480 --> 00:18:25,830
attacks<font color="#E5E5E5"> we have shown that indirect</font>

448
00:18:23,399 --> 00:18:27,779
<font color="#E5E5E5">cache attacks are practical and we</font>

449
00:18:25,830 --> 00:18:30,120
should really consider existing cache

450
00:18:27,779 --> 00:18:33,299
defenses<font color="#E5E5E5"> in software and if you want to</font>

451
00:18:30,120 --> 00:18:35,279
know more<font color="#E5E5E5"> about these attacks</font><font color="#CCCCCC"> I invite</font>

452
00:18:33,299 --> 00:18:47,330
<font color="#CCCCCC">you</font><font color="#E5E5E5"> to visit this page thank you</font><font color="#CCCCCC"> very</font>

453
00:18:35,279 --> 00:18:47,330
much nice<font color="#E5E5E5"> any questions</font>

454
00:18:47,870 --> 00:18:52,439
yes go ahead

455
00:18:49,379 --> 00:18:55,860
state your<font color="#CCCCCC"> microphone yes state your</font>

456
00:18:52,440 --> 00:18:58,710
affiliation and hi<font color="#E5E5E5"> Kevin Laughlin from</font>

457
00:18:55,860 --> 00:19:01,830
University of Michigan<font color="#CCCCCC"> so you talked</font>

458
00:18:58,710 --> 00:19:03,389
about way partitioning<font color="#E5E5E5"> and when you're</font>

459
00:19:01,830 --> 00:19:05,399
discussing<font color="#E5E5E5"> way partitioning</font><font color="#CCCCCC"> are you</font>

460
00:19:03,389 --> 00:19:08,189
referring to partitioning it from either

461
00:19:05,399 --> 00:19:10,620
a software or<font color="#CCCCCC"> hardware standpoint</font><font color="#E5E5E5"> or</font>

462
00:19:08,190 --> 00:19:12,570
purely<font color="#E5E5E5"> hardware and if that partitioning</font>

463
00:19:10,620 --> 00:19:15,418
would be done at the hardware level have

464
00:19:12,570 --> 00:19:20,789
you looked at the performance<font color="#E5E5E5"> impacts of</font>

465
00:19:15,419 --> 00:19:22,860
<font color="#E5E5E5">these defenses at all okay</font><font color="#CCCCCC"> so there</font><font color="#E5E5E5"> are</font>

466
00:19:20,789 --> 00:19:24,509
indeed boats<font color="#E5E5E5"> way partitioning defenses</font>

467
00:19:22,860 --> 00:19:27,809
on hardware<font color="#CCCCCC"> and software</font><font color="#E5E5E5"> for the</font>

468
00:19:24,509 --> 00:19:29,700
hardware<font color="#E5E5E5"> defenses</font><font color="#CCCCCC"> we did not</font><font color="#E5E5E5"> focus that</font>

469
00:19:27,809 --> 00:19:31,950
much on the hardware defenses because or

470
00:19:29,700 --> 00:19:34,169
argument is that there are not<font color="#E5E5E5"> as</font>

471
00:19:31,950 --> 00:19:37,080
<font color="#E5E5E5">flexible and Philip availability is</font>

472
00:19:34,169 --> 00:19:39,149
quite<font color="#CCCCCC"> limited for software</font><font color="#E5E5E5"> defenses we</font>

473
00:19:37,080 --> 00:19:47,250
have stealth<font color="#CCCCCC"> mam and</font><font color="#E5E5E5"> cash bar which we</font>

474
00:19:39,149 --> 00:19:48,989
considered fair oh yeah I was curious<font color="#CCCCCC"> a</font>

475
00:19:47,250 --> 00:19:50,909
lot<font color="#E5E5E5"> of times I see defenses against</font>

476
00:19:48,990 --> 00:19:54,149
these kinds of attacks involving

477
00:19:50,909 --> 00:19:56,250
flushing the<font color="#CCCCCC"> cache</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> between</font>

478
00:19:54,149 --> 00:19:59,309
not between<font color="#E5E5E5"> threat well in between</font>

479
00:19:56,250 --> 00:20:02,639
<font color="#CCCCCC">different processes so would</font><font color="#E5E5E5"> that affect</font>

480
00:19:59,309 --> 00:20:05,279
your attack<font color="#E5E5E5"> yes I think it would</font>

481
00:20:02,639 --> 00:20:08,729
actually so I'm not<font color="#CCCCCC"> sure it would</font><font color="#E5E5E5"> have</font>

482
00:20:05,279 --> 00:20:10,740
<font color="#E5E5E5">to be you would be flushing the cache is</font>

483
00:20:08,730 --> 00:20:12,280
certainly expensive but I have<font color="#E5E5E5"> see is</font>

484
00:20:10,740 --> 00:20:14,380
<font color="#CCCCCC">weak</font>

485
00:20:12,280 --> 00:20:16,030
if you do that<font color="#CCCCCC"> you basically</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> flush</font>

486
00:20:14,380 --> 00:20:17,980
<font color="#E5E5E5">any of the page</font><font color="#CCCCCC"> tables so yes we would</font>

487
00:20:16,030 --> 00:20:21,870
<font color="#E5E5E5">be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> mitigate</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> to that point but</font>

488
00:20:17,980 --> 00:20:21,870
it's quite expensive<font color="#CCCCCC"> okay thank you</font>

489
00:20:22,860 --> 00:20:32,639
hiya Val<font color="#E5E5E5"> you're home University</font><font color="#CCCCCC"> of</font>

490
00:20:25,299 --> 00:20:34,900
<font color="#E5E5E5">Adelaide</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> a day to 61 in</font><font color="#CCCCCC"> SEL for</font>

491
00:20:32,640 --> 00:20:39,700
<font color="#E5E5E5">there is an implementation of page</font>

492
00:20:34,900 --> 00:20:43,350
<font color="#E5E5E5">colouring</font><font color="#CCCCCC"> that also makes sure that page</font>

493
00:20:39,700 --> 00:20:46,000
tables are split<font color="#E5E5E5"> between the</font><font color="#CCCCCC"> domains</font><font color="#E5E5E5"> so</font>

494
00:20:43,350 --> 00:20:48,250
the page tables are<font color="#E5E5E5"> allocated with the</font>

495
00:20:46,000 --> 00:20:52,929
<font color="#E5E5E5">color of the domain would your attack</font>

496
00:20:48,250 --> 00:20:54,730
<font color="#CCCCCC">work</font><font color="#E5E5E5"> in that case</font><font color="#CCCCCC"> it's also extended to</font>

497
00:20:52,929 --> 00:20:58,000
the page tables will not work that's

498
00:20:54,730 --> 00:20:59,500
<font color="#E5E5E5">also part of her mitigation so not paper</font>

499
00:20:58,000 --> 00:21:01,179
<font color="#E5E5E5">you have a</font><font color="#CCCCCC"> mitigation section that also</font>

500
00:20:59,500 --> 00:21:04,330
discusses what<font color="#E5E5E5"> you could do</font><font color="#CCCCCC"> with the</font>

501
00:21:01,179 --> 00:21:06,480
<font color="#E5E5E5">current page page</font><font color="#CCCCCC"> cooling</font><font color="#E5E5E5"> defenses</font><font color="#CCCCCC"> for</font>

502
00:21:04,330 --> 00:21:08,320
instance but<font color="#E5E5E5"> also way partitioning</font><font color="#CCCCCC"> to</font>

503
00:21:06,480 --> 00:21:10,570
mitigate<font color="#CCCCCC"> these and the conclusion was</font>

504
00:21:08,320 --> 00:21:12,129
<font color="#E5E5E5">indeed that for a page</font><font color="#CCCCCC"> covering if you</font>

505
00:21:10,570 --> 00:21:14,408
extend<font color="#CCCCCC"> it to page tables saying you're</font>

506
00:21:12,130 --> 00:21:17,110
<font color="#CCCCCC">mitigate</font><font color="#E5E5E5"> this one of the problems</font>

507
00:21:14,409 --> 00:21:19,210
however<font color="#E5E5E5"> is that page tables are likely</font>

508
00:21:17,110 --> 00:21:20,979
not<font color="#CCCCCC"> to be the</font><font color="#E5E5E5"> only thing you could use</font>

509
00:21:19,210 --> 00:21:23,350
as a<font color="#E5E5E5"> confused deputy</font><font color="#CCCCCC"> so we're also</font>

510
00:21:20,980 --> 00:21:26,289
thinking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> GPUs</font><font color="#CCCCCC"> that could share the</font>

511
00:21:23,350 --> 00:21:28,539
cache with the CPU or the<font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> for</font>

512
00:21:26,289 --> 00:21:30,010
instance so you can trick other trusted

513
00:21:28,539 --> 00:21:32,200
components in<font color="#CCCCCC"> your system as</font><font color="#E5E5E5"> well</font>

514
00:21:30,010 --> 00:21:34,330
<font color="#E5E5E5">so we</font><font color="#CCCCCC"> really have to you really would</font>

515
00:21:32,200 --> 00:21:39,460
<font color="#CCCCCC">have to</font><font color="#E5E5E5"> reconsider this thank you</font>

516
00:21:34,330 --> 00:21:42,340
welcome any other questions<font color="#CCCCCC"> okay maybe</font>

517
00:21:39,460 --> 00:21:44,380
while<font color="#E5E5E5"> Ben is setting up his talk I'll</font>

518
00:21:42,340 --> 00:21:47,320
ask<font color="#E5E5E5"> one more question</font><font color="#CCCCCC"> so you're</font>

519
00:21:44,380 --> 00:21:48,580
measuring<font color="#CCCCCC"> the page callers indirect</font>

520
00:21:47,320 --> 00:21:50,200
right did<font color="#E5E5E5"> you measure the</font>

521
00:21:48,580 --> 00:21:52,360
signal-to-noise ratio it will<font color="#E5E5E5"> be lower</font>

522
00:21:50,200 --> 00:21:55,620
than<font color="#CCCCCC"> measuring it directly</font><font color="#E5E5E5"> and how that</font>

523
00:21:52,360 --> 00:21:59,370
influences the the fact depending on the

524
00:21:55,620 --> 00:22:03,100
kind<font color="#CCCCCC"> of applications that you're running</font>

525
00:21:59,370 --> 00:22:05,199
we did not really measure death<font color="#E5E5E5"> so we</font>

526
00:22:03,100 --> 00:22:09,820
<font color="#E5E5E5">did</font><font color="#CCCCCC"> not do any checks with where other</font>

527
00:22:05,200 --> 00:22:12,429
programs are running or<font color="#E5E5E5"> anything like we</font>

528
00:22:09,820 --> 00:22:14,139
just<font color="#CCCCCC"> went it on a</font><font color="#E5E5E5"> system that</font><font color="#CCCCCC"> we had</font>

529
00:22:12,429 --> 00:22:16,240
with<font color="#CCCCCC"> okay which was not running much</font>

530
00:22:14,140 --> 00:22:18,520
else<font color="#CCCCCC"> it would be interesting to measure</font>

531
00:22:16,240 --> 00:22:20,020
how much like additional noise to the

532
00:22:18,520 --> 00:22:22,120
environment<font color="#CCCCCC"> adds and</font><font color="#E5E5E5"> how stable your</font>

533
00:22:20,020 --> 00:22:25,030
<font color="#CCCCCC">channel will remain hang on how you</font>

534
00:22:22,120 --> 00:22:25,969
moved it<font color="#E5E5E5"> okay let's give Steph another</font>

535
00:22:25,030 --> 00:22:33,369
hand of applause

536
00:22:25,970 --> 00:22:33,369
[Applause]

