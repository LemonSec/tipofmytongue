1
00:00:10,080 --> 00:00:17,380
<font color="#E5E5E5">all right</font><font color="#CCCCCC"> hello everyone my name is</font>

2
00:00:13,600 --> 00:00:19,450
mullets<font color="#CCCCCC"> I'm happy to present you our key</font>

3
00:00:17,380 --> 00:00:21,340
<font color="#CCCCCC">popper bringing bounded model</font><font color="#E5E5E5"> checking</font>

4
00:00:19,450 --> 00:00:23,439
to the implementation security

5
00:00:21,340 --> 00:00:25,509
this is<font color="#E5E5E5"> collaborative work with this</font>

6
00:00:23,439 --> 00:00:27,150
awesome<font color="#CCCCCC"> people you keep secret you can</font>

7
00:00:25,510 --> 00:00:29,890
see right here from UC<font color="#E5E5E5"> Santa Barbara</font>

8
00:00:27,150 --> 00:00:32,739
<font color="#CCCCCC">Arizona</font><font color="#E5E5E5"> State University</font><font color="#CCCCCC"> and the</font>

9
00:00:29,890 --> 00:00:36,910
University<font color="#E5E5E5"> of Iowa I'd like to start by</font>

10
00:00:32,740 --> 00:00:39,310
<font color="#E5E5E5">giving an example</font><font color="#CCCCCC"> of our problem</font><font color="#E5E5E5"> why is</font>

11
00:00:36,910 --> 00:00:42,010
<font color="#E5E5E5">it so hard getting the</font><font color="#CCCCCC"> heat light or is</font>

12
00:00:39,310 --> 00:00:45,879
<font color="#E5E5E5">it so hard</font><font color="#CCCCCC"> to detect metadata corruption</font>

13
00:00:42,010 --> 00:00:48,789
prevent metadata corruption and why is

14
00:00:45,879 --> 00:00:51,519
<font color="#E5E5E5">it why can</font><font color="#CCCCCC"> it be a severe impact to the</font>

15
00:00:48,789 --> 00:00:56,320
<font color="#E5E5E5">keep security</font><font color="#CCCCCC"> if you can just override</font>

16
00:00:51,519 --> 00:00:58,899
<font color="#CCCCCC">the metadata itself</font><font color="#E5E5E5"> so the example you</font>

17
00:00:56,320 --> 00:01:02,039
can see on the left here is an attack

18
00:00:58,899 --> 00:01:04,480
discovered originally by<font color="#E5E5E5"> Chris Evans</font><font color="#CCCCCC"> and</font>

19
00:01:02,039 --> 00:01:06,250
the really interesting<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> it is</font>

20
00:01:04,480 --> 00:01:11,160
it's<font color="#CCCCCC"> just using a single null byte</font>

21
00:01:06,250 --> 00:01:13,869
overflow<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> interesting because in C</font>

22
00:01:11,160 --> 00:01:16,000
strings are ended by<font color="#E5E5E5"> but just an alibi</font>

23
00:01:13,869 --> 00:01:17,650
<font color="#E5E5E5">and that often leads to this off by one</font>

24
00:01:16,000 --> 00:01:21,250
problem where you<font color="#E5E5E5"> forgot to account for</font>

25
00:01:17,650 --> 00:01:23,920
for the for the ending alibi<font color="#E5E5E5"> and so you</font>

26
00:01:21,250 --> 00:01:26,110
you have<font color="#E5E5E5"> the scenario where you</font><font color="#CCCCCC"> have</font>

27
00:01:23,920 --> 00:01:28,270
<font color="#CCCCCC">four in this</font><font color="#E5E5E5"> case</font><font color="#CCCCCC"> three allocated chunks</font>

28
00:01:26,110 --> 00:01:30,399
<font color="#E5E5E5">one gets free and then</font><font color="#CCCCCC"> you have an</font>

29
00:01:28,270 --> 00:01:32,408
overflow into<font color="#E5E5E5"> some metadata field in</font>

30
00:01:30,399 --> 00:01:34,899
this<font color="#CCCCCC"> case the</font><font color="#E5E5E5"> size but just this single</font>

31
00:01:32,409 --> 00:01:37,329
<font color="#E5E5E5">now</font><font color="#CCCCCC"> byte and</font><font color="#E5E5E5"> this doesn't give you any</font>

32
00:01:34,899 --> 00:01:40,060
any control over user data in the heat

33
00:01:37,329 --> 00:01:44,500
but<font color="#E5E5E5"> it modifies the</font><font color="#CCCCCC"> the actual</font><font color="#E5E5E5"> metadata</font>

34
00:01:40,060 --> 00:01:46,420
<font color="#E5E5E5">of</font><font color="#CCCCCC"> the of the chunk itself</font><font color="#E5E5E5"> and when we</font>

35
00:01:44,500 --> 00:01:48,610
even we follow this attack through you

36
00:01:46,420 --> 00:01:52,719
can see that this<font color="#E5E5E5"> single now by the flow</font>

37
00:01:48,610 --> 00:01:55,390
leads to some forgotten<font color="#E5E5E5"> update in and</font>

38
00:01:52,719 --> 00:01:57,460
the<font color="#CCCCCC"> fourth step</font><font color="#E5E5E5"> where the redundant data</font>

39
00:01:55,390 --> 00:01:59,680
which is<font color="#CCCCCC"> stored in</font><font color="#E5E5E5"> the fourth</font><font color="#CCCCCC"> jug</font><font color="#E5E5E5"> or is</font>

40
00:01:57,460 --> 00:02:02,048
<font color="#CCCCCC">her in the seat chunk is it's not</font>

41
00:01:59,680 --> 00:02:05,469
<font color="#CCCCCC">updated correctly</font><font color="#E5E5E5"> which automatically</font>

42
00:02:02,049 --> 00:02:09,009
leads to the problem<font color="#CCCCCC"> that when the in</font>

43
00:02:05,469 --> 00:02:11,739
the<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the sixth case we have the C</font>

44
00:02:09,008 --> 00:02:14,859
chunk and<font color="#CCCCCC"> the be</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> chunk freed</font><font color="#E5E5E5"> it will</font>

45
00:02:11,740 --> 00:02:17,020
not<font color="#CCCCCC"> know it'll have a wrong previous</font>

46
00:02:14,860 --> 00:02:18,790
<font color="#E5E5E5">size stored in the</font><font color="#CCCCCC"> seat chunk</font><font color="#E5E5E5"> automated</font>

47
00:02:17,020 --> 00:02:22,520
leading to the merging of those chance

48
00:02:18,790 --> 00:02:25,130
to<font color="#CCCCCC"> prevent</font><font color="#E5E5E5"> my memory</font>

49
00:02:22,520 --> 00:02:26,690
<font color="#E5E5E5">crack</font><font color="#CCCCCC"> meant a shoe and it will forget</font>

50
00:02:25,130 --> 00:02:28,730
<font color="#CCCCCC">that there's actually a chunk</font><font color="#E5E5E5"> in the</font>

51
00:02:26,690 --> 00:02:32,150
middle<font color="#CCCCCC"> of the as</font><font color="#E5E5E5"> you can see that the</font>

52
00:02:28,730 --> 00:02:34,130
<font color="#E5E5E5">BTB to chunkier so we basically get from</font>

53
00:02:32,150 --> 00:02:36,530
single single primitive which is very

54
00:02:34,130 --> 00:02:39,320
weak just an albeit overflow<font color="#E5E5E5"> to to a</font>

55
00:02:36,530 --> 00:02:45,380
complete<font color="#E5E5E5"> control over over a chunk and</font>

56
00:02:39,320 --> 00:02:47,930
memory and the that really showcase how

57
00:02:45,380 --> 00:02:49,940
how easy<font color="#E5E5E5"> can be just by overriding</font>

58
00:02:47,930 --> 00:02:53,420
metadata<font color="#CCCCCC"> due</font><font color="#E5E5E5"> to gain even further</font>

59
00:02:49,940 --> 00:02:55,190
through<font color="#E5E5E5"> the controller and what was</font>

60
00:02:53,420 --> 00:02:57,619
interesting<font color="#E5E5E5"> about this this attack as</font>

61
00:02:55,190 --> 00:02:59,600
<font color="#E5E5E5">well</font><font color="#CCCCCC"> not only</font><font color="#E5E5E5"> that it shows</font><font color="#CCCCCC"> how like a</font>

62
00:02:57,620 --> 00:03:02,300
really complex<font color="#E5E5E5"> attack can work out on</font>

63
00:02:59,600 --> 00:03:04,549
the<font color="#E5E5E5"> heap and Chris Evans also came up</font>

64
00:03:02,300 --> 00:03:08,000
with<font color="#CCCCCC"> a patch for</font><font color="#E5E5E5"> this attack so he was</font>

65
00:03:04,550 --> 00:03:09,410
<font color="#CCCCCC">just introducing a new consistency Jack</font>

66
00:03:08,000 --> 00:03:11,720
that just makes<font color="#E5E5E5"> sure the previous size</font>

67
00:03:09,410 --> 00:03:14,900
and<font color="#E5E5E5"> size of those two chunks are always</font>

68
00:03:11,720 --> 00:03:17,750
consistent<font color="#CCCCCC"> and when this this patch was</font>

69
00:03:14,900 --> 00:03:19,940
introduced<font color="#CCCCCC"> chris evans</font><font color="#E5E5E5"> hosted a blog</font>

70
00:03:17,750 --> 00:03:21,110
post about it<font color="#E5E5E5"> and saving this this the</font>

71
00:03:19,940 --> 00:03:23,540
sentence that<font color="#E5E5E5"> we can see right</font><font color="#CCCCCC"> here</font>

72
00:03:21,110 --> 00:03:25,790
<font color="#CCCCCC">which</font><font color="#E5E5E5"> days to be finding</font><font color="#CCCCCC"> laila off the</font>

73
00:03:23,540 --> 00:03:27,920
one<font color="#CCCCCC"> off</font><font color="#E5E5E5"> by one</font><font color="#CCCCCC"> knob idle arrives in the</font>

74
00:03:25,790 --> 00:03:29,989
<font color="#E5E5E5">g</font><font color="#CCCCCC"> Lipsy heat only time will tell so</font>

75
00:03:27,920 --> 00:03:32,209
<font color="#CCCCCC">there's a really</font><font color="#E5E5E5"> great uncertainty if</font>

76
00:03:29,990 --> 00:03:34,100
this if these checks are inserted and

77
00:03:32,210 --> 00:03:35,390
<font color="#E5E5E5">introduced in the</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> ellipse</font><font color="#CCCCCC"> e if</font>

78
00:03:34,100 --> 00:03:38,000
they're really<font color="#E5E5E5"> efficient if they really</font>

79
00:03:35,390 --> 00:03:41,589
<font color="#E5E5E5">do that</font><font color="#CCCCCC"> job</font><font color="#E5E5E5"> and the answer to</font><font color="#CCCCCC"> answer his</font>

80
00:03:38,000 --> 00:03:45,260
question<font color="#E5E5E5"> it's no right so after a long</font>

81
00:03:41,590 --> 00:03:47,750
going back and forward<font color="#E5E5E5"> off merging this</font>

82
00:03:45,260 --> 00:03:49,370
this patch<font color="#CCCCCC"> file named ellipse e</font><font color="#E5E5E5"> the</font>

83
00:03:47,750 --> 00:03:51,680
maintainer<font color="#CCCCCC"> x' agreed that it was a</font><font color="#E5E5E5"> good</font>

84
00:03:49,370 --> 00:03:53,870
patch and was merged and just<font color="#E5E5E5"> after a</font>

85
00:03:51,680 --> 00:03:57,110
<font color="#E5E5E5">couple days later somebody</font><font color="#CCCCCC"> else posted</font>

86
00:03:53,870 --> 00:03:59,840
<font color="#E5E5E5">an attack that</font><font color="#CCCCCC"> would bypass</font><font color="#E5E5E5"> would bypass</font>

87
00:03:57,110 --> 00:04:04,130
<font color="#E5E5E5">this new patch and would make the</font><font color="#CCCCCC"> tag</font>

88
00:03:59,840 --> 00:04:07,120
still<font color="#E5E5E5"> possible so this this this this</font><font color="#CCCCCC"> is</font>

89
00:04:04,130 --> 00:04:09,500
<font color="#E5E5E5">the</font><font color="#CCCCCC"> motivation for</font><font color="#E5E5E5"> for our work is</font>

90
00:04:07,120 --> 00:04:11,630
handling<font color="#E5E5E5"> with</font><font color="#CCCCCC"> manually handing this this</font>

91
00:04:09,500 --> 00:04:14,270
dynamic memories is the<font color="#E5E5E5"> heart is a hard</font>

92
00:04:11,630 --> 00:04:17,029
<font color="#CCCCCC">job for developer so box are very common</font>

93
00:04:14,270 --> 00:04:18,829
and the metadata itself<font color="#CCCCCC"> is a really</font>

94
00:04:17,029 --> 00:04:20,269
valuable target for<font color="#CCCCCC"> attacker because</font>

95
00:04:18,829 --> 00:04:23,840
<font color="#E5E5E5">he's completely independent of the</font>

96
00:04:20,269 --> 00:04:27,229
<font color="#CCCCCC">actual the actual</font><font color="#E5E5E5"> user data in the heap</font>

97
00:04:23,840 --> 00:04:28,760
<font color="#E5E5E5">and all these checks are try prevent to</font>

98
00:04:27,230 --> 00:04:31,010
<font color="#CCCCCC">prevent this they are really done in a</font>

99
00:04:28,760 --> 00:04:32,510
non systematic way it's more<font color="#E5E5E5"> like a cat</font>

100
00:04:31,010 --> 00:04:34,730
and mouse game that's people are

101
00:04:32,510 --> 00:04:36,139
proposing<font color="#E5E5E5"> patches and other people try</font>

102
00:04:34,730 --> 00:04:39,650
<font color="#E5E5E5">to</font>

103
00:04:36,139 --> 00:04:41,960
I<font color="#CCCCCC"> Pez them again so we came up with tool</font>

104
00:04:39,650 --> 00:04:43,159
we<font color="#E5E5E5"> called he popper which is trying to</font>

105
00:04:41,960 --> 00:04:45,289
<font color="#CCCCCC">address this problem in</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> very</font>

106
00:04:43,159 --> 00:04:48,650
systematic way by using bounded model

107
00:04:45,289 --> 00:04:50,419
checking<font color="#E5E5E5"> to evaluate in</font><font color="#CCCCCC"> case off</font><font color="#E5E5E5"> there</font>

108
00:04:48,650 --> 00:04:52,878
are vulnerabilities in a program<font color="#E5E5E5"> that</font>

109
00:04:50,419 --> 00:04:55,460
<font color="#CCCCCC">effect the memory safety other of the</font>

110
00:04:52,879 --> 00:04:57,590
heap<font color="#E5E5E5"> how can these how does the he</font>

111
00:04:55,460 --> 00:04:59,989
protect itself against metadata

112
00:04:57,590 --> 00:05:02,508
corruption and that would ultimately

113
00:04:59,990 --> 00:05:05,539
lead to to hijacking the control flow

114
00:05:02,509 --> 00:05:08,419
for example<font color="#CCCCCC"> and you can</font><font color="#E5E5E5"> see he popper</font>

115
00:05:05,539 --> 00:05:10,400
can be<font color="#E5E5E5"> split into three main parts which</font>

116
00:05:08,419 --> 00:05:12,948
go from<font color="#E5E5E5"> resolved we hear from from left</font>

117
00:05:10,400 --> 00:05:17,870
to right and I<font color="#E5E5E5"> would go into each of</font>

118
00:05:12,949 --> 00:05:20,569
<font color="#CCCCCC">owning them</font><font color="#E5E5E5"> so they start off by showing</font>

119
00:05:17,870 --> 00:05:23,900
our model<font color="#E5E5E5"> what is our interaction model</font>

120
00:05:20,569 --> 00:05:27,409
which corresponds to the left part<font color="#E5E5E5"> of he</font>

121
00:05:23,900 --> 00:05:29,029
popper right here and when we<font color="#E5E5E5"> look at</font>

122
00:05:27,409 --> 00:05:31,819
the heap the heap is essentially kind of

123
00:05:29,029 --> 00:05:34,789
<font color="#E5E5E5">a state so the he builds</font><font color="#CCCCCC"> two state of</font>

124
00:05:31,819 --> 00:05:38,029
our model and<font color="#CCCCCC"> the status</font><font color="#E5E5E5"> is present in</font>

125
00:05:34,789 --> 00:05:40,490
memory as as the metadata<font color="#CCCCCC"> that it</font>

126
00:05:38,029 --> 00:05:43,819
contains for example the mapped<font color="#CCCCCC"> chunks</font>

127
00:05:40,490 --> 00:05:45,379
<font color="#E5E5E5">the allocated ones to freed all this</font>

128
00:05:43,819 --> 00:05:47,509
information is stored<font color="#E5E5E5"> somewhere memory</font>

129
00:05:45,379 --> 00:05:50,270
and represents<font color="#E5E5E5"> its day</font><font color="#CCCCCC"> and whenever we</font>

130
00:05:47,509 --> 00:05:53,240
do an operation on<font color="#E5E5E5"> this on this state</font>

131
00:05:50,270 --> 00:05:55,878
<font color="#CCCCCC">let's say</font><font color="#E5E5E5"> we call an API call</font><font color="#CCCCCC"> as there</font>

132
00:05:53,240 --> 00:05:59,180
<font color="#E5E5E5">is</font><font color="#CCCCCC"> mallow and</font><font color="#E5E5E5"> three or</font><font color="#CCCCCC"> be operating</font><font color="#E5E5E5"> on</font>

133
00:05:55,879 --> 00:06:03,919
the memory<font color="#CCCCCC"> of this of this heap</font><font color="#E5E5E5"> so we</font>

134
00:05:59,180 --> 00:06:07,219
<font color="#E5E5E5">store something in in the in the chunks</font>

135
00:06:03,919 --> 00:06:08,839
that<font color="#E5E5E5"> we allocated or we have a misuse</font>

136
00:06:07,219 --> 00:06:12,199
<font color="#CCCCCC">it's in this case let's say</font><font color="#E5E5E5"> in overflow</font>

137
00:06:08,839 --> 00:06:15,159
<font color="#CCCCCC">we modify modify the state</font><font color="#E5E5E5"> as well so we</font>

138
00:06:12,199 --> 00:06:18,490
get a new state<font color="#CCCCCC"> the problem</font><font color="#E5E5E5"> with this is</font>

139
00:06:15,159 --> 00:06:20,919
the the actual internal state is very

140
00:06:18,490 --> 00:06:23,750
<font color="#E5E5E5">implementation dependent</font><font color="#CCCCCC"> there's no real</font>

141
00:06:20,919 --> 00:06:25,520
API<font color="#CCCCCC"> no no really</font><font color="#E5E5E5"> standard for that</font><font color="#CCCCCC"> the</font>

142
00:06:23,750 --> 00:06:28,750
<font color="#E5E5E5">only standard that's given is the API</font>

143
00:06:25,520 --> 00:06:31,339
<font color="#E5E5E5">itself so the</font><font color="#CCCCCC"> only thing we know is</font>

144
00:06:28,750 --> 00:06:32,960
<font color="#CCCCCC">there's a real there's a clear contract</font>

145
00:06:31,339 --> 00:06:35,479
between what what you put you put<font color="#CCCCCC"> it to</font>

146
00:06:32,960 --> 00:06:37,250
malloc and what you get<font color="#E5E5E5"> back so</font><font color="#CCCCCC"> what we</font>

147
00:06:35,479 --> 00:06:39,560
what<font color="#E5E5E5"> we do is we are pretty much</font>

148
00:06:37,250 --> 00:06:41,960
completely<font color="#E5E5E5"> agnostic of the internal</font>

149
00:06:39,560 --> 00:06:44,750
state<font color="#E5E5E5"> of the heat we only observe those</font>

150
00:06:41,960 --> 00:06:47,719
transactions and and see the input and

151
00:06:44,750 --> 00:06:49,639
output<font color="#CCCCCC"> and refer state from</font><font color="#E5E5E5"> that so we</font>

152
00:06:47,719 --> 00:06:52,490
<font color="#E5E5E5">don't have to know the actual</font>

153
00:06:49,639 --> 00:06:57,590
<font color="#E5E5E5">the structure of the of the metadata of</font>

154
00:06:52,490 --> 00:06:59,479
the<font color="#CCCCCC"> hip inside and the transactions</font>

155
00:06:57,590 --> 00:07:01,489
which are essential building blocks

156
00:06:59,479 --> 00:07:03,620
<font color="#CCCCCC">which we</font><font color="#E5E5E5"> split them</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> in two different</font>

157
00:07:01,490 --> 00:07:07,069
<font color="#E5E5E5">categories there are usages</font><font color="#CCCCCC"> of the heap</font>

158
00:07:03,620 --> 00:07:09,259
as for example<font color="#E5E5E5"> malloc or free and there</font>

159
00:07:07,069 --> 00:07:11,389
<font color="#E5E5E5">are miss usages so they they they</font>

160
00:07:09,259 --> 00:07:14,029
<font color="#E5E5E5">present</font><font color="#CCCCCC"> coming</font><font color="#E5E5E5"> abilities that</font><font color="#CCCCCC"> are</font>

161
00:07:11,389 --> 00:07:16,279
represented that are present in current

162
00:07:14,029 --> 00:07:19,039
programs<font color="#E5E5E5"> as for example</font><font color="#CCCCCC"> an overflow</font><font color="#E5E5E5"> I</font>

163
00:07:16,279 --> 00:07:19,520
use after free<font color="#E5E5E5"> a double</font><font color="#CCCCCC"> three and fake</font>

164
00:07:19,039 --> 00:07:21,080
free

165
00:07:19,520 --> 00:07:22,969
I think the first three of<font color="#E5E5E5"> them are</font>

166
00:07:21,080 --> 00:07:25,099
<font color="#E5E5E5">pretty common</font><font color="#CCCCCC"> maybe should explain a</font>

167
00:07:22,969 --> 00:07:28,550
little bit more<font color="#CCCCCC"> the last one</font><font color="#E5E5E5"> so a fake</font>

168
00:07:25,099 --> 00:07:31,699
free and<font color="#E5E5E5"> ours in our sense means that</font>

169
00:07:28,550 --> 00:07:34,099
you pass something<font color="#E5E5E5"> to free that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> not</font>

170
00:07:31,699 --> 00:07:36,349
<font color="#CCCCCC">actually ever allocated that could be</font>

171
00:07:34,099 --> 00:07:38,240
you saw a pointer<font color="#CCCCCC"> somewhere to a chunk</font>

172
00:07:36,349 --> 00:07:40,188
it gets overwritten<font color="#E5E5E5"> and you pass this</font>

173
00:07:38,240 --> 00:07:43,219
pointer to<font color="#CCCCCC"> three it</font><font color="#E5E5E5"> just represents some</font>

174
00:07:40,189 --> 00:07:45,229
memory somewhere<font color="#E5E5E5"> else in memory all</font>

175
00:07:43,219 --> 00:07:48,139
right I will<font color="#E5E5E5"> give</font><font color="#CCCCCC"> a showcase of</font><font color="#E5E5E5"> two of</font>

176
00:07:45,229 --> 00:07:50,539
them one usage and<font color="#E5E5E5"> one miss usage so if</font>

177
00:07:48,139 --> 00:07:54,349
you look at<font color="#CCCCCC"> my log it's just transaction</font>

178
00:07:50,539 --> 00:07:56,779
<font color="#E5E5E5">itself and get the size parameters input</font>

179
00:07:54,349 --> 00:07:59,900
and in a<font color="#E5E5E5"> concrete execution this is a</font>

180
00:07:56,779 --> 00:08:02,900
constant value<font color="#CCCCCC"> and for</font><font color="#E5E5E5"> us we in our</font>

181
00:07:59,900 --> 00:08:04,489
model we<font color="#CCCCCC"> put there</font><font color="#E5E5E5"> a symbolic value and</font>

182
00:08:02,900 --> 00:08:07,938
this symbolic value<font color="#E5E5E5"> needs to have</font>

183
00:08:04,490 --> 00:08:10,460
distinct values so it's<font color="#CCCCCC"> not completely</font>

184
00:08:07,939 --> 00:08:12,259
<font color="#CCCCCC">arbitrary that's just because</font><font color="#E5E5E5"> how we</font>

185
00:08:10,460 --> 00:08:15,710
check them all later and<font color="#E5E5E5"> we get into</font>

186
00:08:12,259 --> 00:08:19,669
<font color="#E5E5E5">that and what each but we get returned</font>

187
00:08:15,710 --> 00:08:22,399
is a chunk allocated chunk<font color="#E5E5E5"> and it has</font>

188
00:08:19,669 --> 00:08:24,080
some some metadata attached to it<font color="#E5E5E5"> this</font>

189
00:08:22,399 --> 00:08:26,120
could be stored as we can see here in

190
00:08:24,080 --> 00:08:27,438
the actual chunk<font color="#E5E5E5"> memory itself could</font>

191
00:08:26,120 --> 00:08:29,449
also be stored<font color="#E5E5E5"> somewhere else in the</font><font color="#CCCCCC"> he</font>

192
00:08:27,439 --> 00:08:31,219
<font color="#E5E5E5">and it has some attributes to it</font>

193
00:08:29,449 --> 00:08:34,630
for example the<font color="#E5E5E5"> address as well as</font><font color="#CCCCCC"> the</font>

194
00:08:31,219 --> 00:08:38,360
<font color="#CCCCCC">size and these these come from</font><font color="#E5E5E5"> the</font>

195
00:08:34,630 --> 00:08:40,338
actual<font color="#E5E5E5"> symbolic value we pass into</font><font color="#CCCCCC"> it</font>

196
00:08:38,360 --> 00:08:42,019
so what<font color="#CCCCCC"> VDI this would be called a</font>

197
00:08:40,339 --> 00:08:44,089
symbolic allocation that's<font color="#CCCCCC"> an</font><font color="#E5E5E5"> allocation</font>

198
00:08:42,019 --> 00:08:46,399
<font color="#CCCCCC">that is</font><font color="#E5E5E5"> not at the fixed address but at</font>

199
00:08:44,089 --> 00:08:49,579
a symbolic address which is<font color="#CCCCCC"> dependent on</font>

200
00:08:46,399 --> 00:08:52,399
what the initial value was and<font color="#E5E5E5"> of course</font>

201
00:08:49,579 --> 00:08:54,739
you have some constraints<font color="#CCCCCC"> on on these</font>

202
00:08:52,399 --> 00:08:56,420
attributes which<font color="#E5E5E5"> result from different</font>

203
00:08:54,740 --> 00:08:58,480
code paths in the<font color="#CCCCCC"> Lipsy</font>

204
00:08:56,420 --> 00:09:00,469
let's say the delivery differs its

205
00:08:58,480 --> 00:09:03,440
behavior depending<font color="#E5E5E5"> on how much</font><font color="#CCCCCC"> memory</font>

206
00:09:00,470 --> 00:09:05,090
<font color="#E5E5E5">you allocate so this check</font>

207
00:09:03,440 --> 00:09:06,920
get<font color="#E5E5E5"> returned is also dependent</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> these</font>

208
00:09:05,090 --> 00:09:11,750
<font color="#CCCCCC">different code paths therefore dependent</font>

209
00:09:06,920 --> 00:09:14,300
on their initial<font color="#CCCCCC"> input and yeah what it</font>

210
00:09:11,750 --> 00:09:17,510
also does of course is it<font color="#CCCCCC"> Modifieds the</font>

211
00:09:14,300 --> 00:09:19,430
<font color="#E5E5E5">heap</font><font color="#CCCCCC"> statement so to give an example of</font>

212
00:09:17,510 --> 00:09:22,250
a<font color="#CCCCCC"> Mis usage let's have a look at the use</font>

213
00:09:19,430 --> 00:09:24,439
after free<font color="#E5E5E5"> so the use of the free is</font>

214
00:09:22,250 --> 00:09:28,430
basically<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> a free chunk which</font>

215
00:09:24,440 --> 00:09:30,590
was already<font color="#E5E5E5"> passed to free and now you</font>

216
00:09:28,430 --> 00:09:34,760
operate<font color="#CCCCCC"> on this</font><font color="#E5E5E5"> chunk for example you</font>

217
00:09:30,590 --> 00:09:36,710
bribed to<font color="#E5E5E5"> its data which is illegal</font><font color="#CCCCCC"> so</font>

218
00:09:34,760 --> 00:09:39,290
<font color="#CCCCCC">it's not it's it's</font><font color="#E5E5E5"> a vulnerability it</font>

219
00:09:36,710 --> 00:09:41,300
shouldn't happen<font color="#E5E5E5"> and what happened how</font>

220
00:09:39,290 --> 00:09:42,829
we how<font color="#CCCCCC"> we implement that is you put me</font>

221
00:09:41,300 --> 00:09:45,319
take<font color="#E5E5E5"> the symbolic take some symbolic</font>

222
00:09:42,830 --> 00:09:47,300
data some fresh new symbolic data and we

223
00:09:45,320 --> 00:09:49,820
override the<font color="#E5E5E5"> content of this chunk of</font>

224
00:09:47,300 --> 00:09:52,849
the of the symbolic data as you<font color="#CCCCCC"> can see</font>

225
00:09:49,820 --> 00:09:55,760
right<font color="#E5E5E5"> here</font><font color="#CCCCCC"> and of</font><font color="#E5E5E5"> course</font><font color="#CCCCCC"> in case there's</font>

226
00:09:52,850 --> 00:09:59,840
any metadata<font color="#E5E5E5"> stored there we also modify</font>

227
00:09:55,760 --> 00:10:02,360
the heap<font color="#CCCCCC"> state so we have all</font><font color="#E5E5E5"> these</font>

228
00:09:59,840 --> 00:10:04,430
transactions<font color="#CCCCCC"> and they are</font><font color="#E5E5E5"> put our</font>

229
00:10:02,360 --> 00:10:06,860
building<font color="#E5E5E5"> blocks so to build the complete</font>

230
00:10:04,430 --> 00:10:09,819
models<font color="#E5E5E5"> we take those those transactions</font>

231
00:10:06,860 --> 00:10:11,990
and we build permutations<font color="#E5E5E5"> of those and</font>

232
00:10:09,820 --> 00:10:14,720
of course we<font color="#E5E5E5"> are bounded by certain</font>

233
00:10:11,990 --> 00:10:18,350
<font color="#E5E5E5">death</font><font color="#CCCCCC"> we just let's say take</font><font color="#E5E5E5"> for example</font>

234
00:10:14,720 --> 00:10:21,380
a maximum of<font color="#CCCCCC"> 6 transactions on</font><font color="#E5E5E5"> the next</font>

235
00:10:18,350 --> 00:10:23,150
after each<font color="#E5E5E5"> other</font><font color="#CCCCCC"> and yeah when we have</font>

236
00:10:21,380 --> 00:10:25,280
all those permutations<font color="#E5E5E5"> we try to make</font>

237
00:10:23,150 --> 00:10:28,520
some performant improvement<font color="#E5E5E5"> by filtering</font>

238
00:10:25,280 --> 00:10:30,709
our certain rules so we consider the

239
00:10:28,520 --> 00:10:33,410
semantics<font color="#CCCCCC"> of each of each of those</font>

240
00:10:30,710 --> 00:10:35,150
transactions<font color="#E5E5E5"> and for example</font><font color="#CCCCCC"> we make</font>

241
00:10:33,410 --> 00:10:37,699
sure there's at least one miss usage of

242
00:10:35,150 --> 00:10:40,900
the heap<font color="#E5E5E5"> in there because we assume that</font>

243
00:10:37,700 --> 00:10:46,070
<font color="#CCCCCC">if you just use benign or</font><font color="#E5E5E5"> are you early</font>

244
00:10:40,900 --> 00:10:48,680
<font color="#CCCCCC">usages you won't end up</font><font color="#E5E5E5"> in a in a</font>

245
00:10:46,070 --> 00:10:50,839
corrupted<font color="#CCCCCC"> state</font><font color="#E5E5E5"> and what we do next</font><font color="#CCCCCC"> is</font>

246
00:10:48,680 --> 00:10:53,449
<font color="#E5E5E5">we transform this to actual source code</font>

247
00:10:50,839 --> 00:10:55,100
<font color="#CCCCCC">to actual C source code and we have</font>

248
00:10:53,450 --> 00:10:57,650
those placeholders<font color="#E5E5E5"> where we later put</font>

249
00:10:55,100 --> 00:10:59,750
symbolic memory and compile<font color="#E5E5E5"> those two</font>

250
00:10:57,650 --> 00:11:01,579
binaries<font color="#CCCCCC"> so now we have a whole stack of</font>

251
00:10:59,750 --> 00:11:04,700
these binaries representing all those

252
00:11:01,580 --> 00:11:07,070
possible combinations of the

253
00:11:04,700 --> 00:11:12,170
transactions<font color="#E5E5E5"> and this is finally passed</font>

254
00:11:07,070 --> 00:11:15,260
or second step which is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> model</font>

255
00:11:12,170 --> 00:11:17,180
checking<font color="#E5E5E5"> so in the model checking which</font>

256
00:11:15,260 --> 00:11:21,140
represents the<font color="#CCCCCC"> the middle</font>

257
00:11:17,180 --> 00:11:24,160
part of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> popper</font><font color="#CCCCCC"> we use</font><font color="#E5E5E5"> symbolic</font>

258
00:11:21,140 --> 00:11:27,439
execution<font color="#E5E5E5"> and what we do is we get a</font>

259
00:11:24,160 --> 00:11:30,319
library or the<font color="#E5E5E5"> actual alligator is a</font>

260
00:11:27,440 --> 00:11:31,820
shared library<font color="#E5E5E5"> and we execute our code</font>

261
00:11:30,320 --> 00:11:34,550
as well<font color="#E5E5E5"> as</font><font color="#CCCCCC"> the code</font><font color="#E5E5E5"> of the shared</font>

262
00:11:31,820 --> 00:11:37,010
library<font color="#E5E5E5"> that entails that we have to</font>

263
00:11:34,550 --> 00:11:38,839
emulate system calls<font color="#E5E5E5"> that's just because</font>

264
00:11:37,010 --> 00:11:40,939
<font color="#E5E5E5">we were using anger framework as our</font>

265
00:11:38,840 --> 00:11:43,610
<font color="#E5E5E5">symbolic execution engine and that's</font>

266
00:11:40,940 --> 00:11:45,290
just required there and one important

267
00:11:43,610 --> 00:11:49,480
<font color="#E5E5E5">part about</font><font color="#CCCCCC"> our symbolic</font><font color="#E5E5E5"> execution is</font>

268
00:11:45,290 --> 00:11:52,689
that we use that first<font color="#E5E5E5"> search instead of</font>

269
00:11:49,480 --> 00:11:56,630
<font color="#E5E5E5">yeah just the first search so that we</font>

270
00:11:52,690 --> 00:11:58,850
that we<font color="#E5E5E5"> reach so our idea is happy if</font>

271
00:11:56,630 --> 00:12:00,500
you reach a certain<font color="#CCCCCC"> certain</font><font color="#E5E5E5"> state let's</font>

272
00:11:58,850 --> 00:12:03,320
say<font color="#CCCCCC"> you want to bypass a certain check</font>

273
00:12:00,500 --> 00:12:05,840
<font color="#CCCCCC">we</font><font color="#E5E5E5"> are you're done right we just want</font><font color="#CCCCCC"> to</font>

274
00:12:03,320 --> 00:12:08,570
<font color="#E5E5E5">find one way to</font><font color="#CCCCCC"> to bypass that in the</font>

275
00:12:05,840 --> 00:12:11,480
concrete scenario so this gives us<font color="#E5E5E5"> just</font>

276
00:12:08,570 --> 00:12:15,110
a faster result is just<font color="#CCCCCC"> as a a better</font>

277
00:12:11,480 --> 00:12:16,670
performance<font color="#E5E5E5"> and the question is what do</font>

278
00:12:15,110 --> 00:12:18,080
<font color="#CCCCCC">we</font><font color="#E5E5E5"> want to check while we model check</font>

279
00:12:16,670 --> 00:12:19,880
what are we looking for other properties

280
00:12:18,080 --> 00:12:23,980
we're looking for<font color="#E5E5E5"> and we came up</font><font color="#CCCCCC"> with</font>

281
00:12:19,880 --> 00:12:26,540
<font color="#E5E5E5">these three or maybe four different</font>

282
00:12:23,980 --> 00:12:28,970
states<font color="#E5E5E5"> for up it</font><font color="#CCCCCC"> states we are looking</font>

283
00:12:26,540 --> 00:12:31,069
for which is an overlapping<font color="#CCCCCC"> allocation</font>

284
00:12:28,970 --> 00:12:34,070
<font color="#E5E5E5">meaning two chunks returned by Mello</font>

285
00:12:31,070 --> 00:12:36,590
have some<font color="#E5E5E5"> are separately allocated have</font>

286
00:12:34,070 --> 00:12:38,600
some common memory in heap<font color="#E5E5E5"> that</font><font color="#CCCCCC"> they</font>

287
00:12:36,590 --> 00:12:41,390
over that and<font color="#CCCCCC"> a non heap allocation</font>

288
00:12:38,600 --> 00:12:43,520
means malloc returns some some chunks of

289
00:12:41,390 --> 00:12:45,500
memory<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is not actually</font><font color="#CCCCCC"> in the in</font>

290
00:12:43,520 --> 00:12:49,160
the heap<font color="#CCCCCC"> segment</font><font color="#E5E5E5"> that's not actually its</font>

291
00:12:45,500 --> 00:12:52,610
own memory<font color="#CCCCCC"> and finally we have an</font>

292
00:12:49,160 --> 00:12:54,589
<font color="#E5E5E5">arbitrary right which for us means we</font>

293
00:12:52,610 --> 00:12:57,530
have some code in the<font color="#E5E5E5"> allocator that's</font>

294
00:12:54,590 --> 00:12:59,780
executed and it issues an actual<font color="#CCCCCC"> write</font>

295
00:12:57,530 --> 00:13:02,360
<font color="#E5E5E5">for example</font><font color="#CCCCCC"> one wants to update its own</font>

296
00:12:59,780 --> 00:13:05,689
metadata<font color="#E5E5E5"> and it's basing that on a</font>

297
00:13:02,360 --> 00:13:07,850
symbolic symbolic<font color="#E5E5E5"> address that was</font>

298
00:13:05,690 --> 00:13:10,640
introduced by us before<font color="#E5E5E5"> with one of the</font>

299
00:13:07,850 --> 00:13:12,170
<font color="#CCCCCC">MIS usages</font><font color="#E5E5E5"> so this represents a</font><font color="#CCCCCC"> typical</font>

300
00:13:10,640 --> 00:13:14,480
scenario<font color="#E5E5E5"> where an attacker</font><font color="#CCCCCC"> control</font><font color="#E5E5E5"> some</font>

301
00:13:12,170 --> 00:13:15,979
metadata which is used for for one of

302
00:13:14,480 --> 00:13:22,010
those rights<font color="#E5E5E5"> and it gives them an</font>

303
00:13:15,980 --> 00:13:25,160
arbitrary right so when<font color="#E5E5E5"> we identify one</font>

304
00:13:22,010 --> 00:13:29,050
<font color="#CCCCCC">of the</font><font color="#E5E5E5"> states</font><font color="#CCCCCC"> we store</font><font color="#E5E5E5"> this result and</font>

305
00:13:25,160 --> 00:13:31,130
as a final<font color="#CCCCCC"> step</font><font color="#E5E5E5"> with all those found</font>

306
00:13:29,050 --> 00:13:34,040
corrupted<font color="#E5E5E5"> States</font>

307
00:13:31,130 --> 00:13:36,019
we want to give the user<font color="#CCCCCC"> an output and</font>

308
00:13:34,040 --> 00:13:37,399
<font color="#E5E5E5">therefore we in our last step we</font>

309
00:13:36,019 --> 00:13:40,730
generate<font color="#E5E5E5"> those also what we call</font>

310
00:13:37,399 --> 00:13:43,399
<font color="#CCCCCC">proof-of-concept codes it just takes the</font>

311
00:13:40,730 --> 00:13:45,199
initial<font color="#E5E5E5"> source code which we</font><font color="#CCCCCC"> compile</font><font color="#E5E5E5"> the</font>

312
00:13:43,399 --> 00:13:47,449
binary and<font color="#CCCCCC"> executes it symbolically</font><font color="#E5E5E5"> and</font>

313
00:13:45,199 --> 00:13:49,729
we take the information<font color="#E5E5E5"> we got from</font><font color="#CCCCCC"> them</font>

314
00:13:47,449 --> 00:13:50,839
symbolic execution<font color="#E5E5E5"> and bring them</font>

315
00:13:49,730 --> 00:13:53,569
together<font color="#E5E5E5"> and</font><font color="#CCCCCC"> what it would</font><font color="#E5E5E5"> look like</font>

316
00:13:50,839 --> 00:13:56,420
<font color="#CCCCCC">would let's look</font><font color="#E5E5E5"> at this example which</font>

317
00:13:53,569 --> 00:13:58,699
is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> c c source code and what we see</font>

318
00:13:56,420 --> 00:14:00,949
<font color="#E5E5E5">here in color is stuff that</font><font color="#CCCCCC"> was</font>

319
00:13:58,699 --> 00:14:03,349
initially<font color="#CCCCCC"> just</font><font color="#E5E5E5"> a placeholder</font><font color="#CCCCCC"> was just</font>

320
00:14:00,949 --> 00:14:05,949
placed symbolically in there and it's

321
00:14:03,350 --> 00:14:09,589
now<font color="#E5E5E5"> some complete concrete values and</font>

322
00:14:05,949 --> 00:14:12,380
what you can see<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> example in</font>

323
00:14:09,589 --> 00:14:15,230
the first yellow line up there<font color="#E5E5E5"> there is</font>

324
00:14:12,380 --> 00:14:17,720
the address<font color="#CCCCCC"> of right target</font><font color="#E5E5E5"> use and that</font>

325
00:14:15,230 --> 00:14:19,100
that<font color="#E5E5E5"> just displays something what we</font>

326
00:14:17,720 --> 00:14:21,980
have to look out<font color="#CCCCCC"> for is there could be</font>

327
00:14:19,100 --> 00:14:24,019
addresses of symbolic symbolic in our

328
00:14:21,980 --> 00:14:26,240
symbolic memory space that corresponds

329
00:14:24,019 --> 00:14:28,639
<font color="#CCCCCC">to some objects or you can correspond to</font>

330
00:14:26,240 --> 00:14:31,339
some offset between<font color="#E5E5E5"> objects and</font><font color="#CCCCCC"> we have</font>

331
00:14:28,639 --> 00:14:33,500
to identify<font color="#CCCCCC"> those and get the actual</font>

332
00:14:31,339 --> 00:14:35,360
<font color="#E5E5E5">object that is that was referenced</font><font color="#CCCCCC"> there</font>

333
00:14:33,500 --> 00:14:37,880
and place<font color="#CCCCCC"> that</font><font color="#E5E5E5"> under the source code</font>

334
00:14:35,360 --> 00:14:41,540
<font color="#E5E5E5">because if we now recompile this this</font>

335
00:14:37,880 --> 00:14:43,850
this source code<font color="#E5E5E5"> should still follow the</font>

336
00:14:41,540 --> 00:14:45,800
<font color="#E5E5E5">same code path and get to the same</font>

337
00:14:43,850 --> 00:14:49,190
corrupted<font color="#CCCCCC"> state displaying</font><font color="#E5E5E5"> would be what</font>

338
00:14:45,800 --> 00:14:50,719
we found<font color="#CCCCCC"> earlier so this was the</font><font color="#E5E5E5"> the</font>

339
00:14:49,190 --> 00:14:54,949
whole trace from<font color="#E5E5E5"> our initial</font>

340
00:14:50,720 --> 00:14:57,230
transactions<font color="#CCCCCC"> over how we build those</font>

341
00:14:54,949 --> 00:14:59,389
<font color="#E5E5E5">build those models</font><font color="#CCCCCC"> and model check them</font>

342
00:14:57,230 --> 00:15:02,449
<font color="#E5E5E5">and finally output at a</font><font color="#CCCCCC"> proof of concept</font>

343
00:14:59,389 --> 00:15:05,510
codes<font color="#CCCCCC"> I want to say that</font><font color="#E5E5E5"> this is the</font>

344
00:15:02,449 --> 00:15:06,889
first<font color="#E5E5E5"> step in one of the first step in</font>

345
00:15:05,510 --> 00:15:08,389
this in this<font color="#E5E5E5"> direction addressing</font><font color="#CCCCCC"> this</font>

346
00:15:06,889 --> 00:15:09,800
<font color="#CCCCCC">problems</font><font color="#E5E5E5"> so there are several</font>

347
00:15:08,389 --> 00:15:11,810
limitations for us

348
00:15:09,800 --> 00:15:13,189
one<font color="#E5E5E5"> big communications of course we</font><font color="#CCCCCC"> are</font>

349
00:15:11,810 --> 00:15:16,160
bound by certain death<font color="#CCCCCC"> we can only</font>

350
00:15:13,190 --> 00:15:19,899
execute<font color="#E5E5E5"> a certain amount of or we can</font>

351
00:15:16,160 --> 00:15:23,510
<font color="#CCCCCC">try</font><font color="#E5E5E5"> permutations</font><font color="#CCCCCC"> for a certain</font><font color="#E5E5E5"> amount of</font>

352
00:15:19,899 --> 00:15:25,069
afternoon of transactions<font color="#E5E5E5"> and while we</font>

353
00:15:23,510 --> 00:15:27,110
are executing<font color="#E5E5E5"> this symbolically we also</font>

354
00:15:25,069 --> 00:15:30,500
<font color="#E5E5E5">bound of course by memory time that's</font>

355
00:15:27,110 --> 00:15:35,180
just what's what's implied by using

356
00:15:30,500 --> 00:15:39,380
<font color="#E5E5E5">symbolic execution there</font><font color="#CCCCCC"> take a</font><font color="#E5E5E5"> look at</font>

357
00:15:35,180 --> 00:15:41,420
our evaluation we<font color="#CCCCCC"> made a</font><font color="#E5E5E5"> broad elevation</font>

358
00:15:39,380 --> 00:15:43,579
on<font color="#E5E5E5"> evaluation on different elevators</font>

359
00:15:41,420 --> 00:15:44,610
these are three different elevators and

360
00:15:43,579 --> 00:15:46,709
five different versions

361
00:15:44,610 --> 00:15:48,600
you can look for<font color="#E5E5E5"> that</font><font color="#CCCCCC"> photo</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> it</font>

362
00:15:46,709 --> 00:15:51,449
<font color="#E5E5E5">details in there and our in our paper</font>

363
00:15:48,600 --> 00:15:54,569
<font color="#E5E5E5">what I wanted to point out here</font><font color="#CCCCCC"> is to</font>

364
00:15:51,449 --> 00:16:00,299
<font color="#E5E5E5">take a look at those findings we see</font>

365
00:15:54,569 --> 00:16:03,929
between<font color="#E5E5E5"> PT Mello 2.23</font><font color="#CCCCCC"> and TTML 2.26 so</font>

366
00:16:00,299 --> 00:16:07,199
<font color="#E5E5E5">this is the one below is an updated</font>

367
00:16:03,929 --> 00:16:09,389
<font color="#E5E5E5">version</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> of the first one</font><font color="#E5E5E5"> and it</font>

368
00:16:07,199 --> 00:16:12,089
had a lot<font color="#CCCCCC"> of additional security checks</font>

369
00:16:09,389 --> 00:16:14,279
introduced so we assumed<font color="#E5E5E5"> or we yeah we</font>

370
00:16:12,089 --> 00:16:17,040
<font color="#E5E5E5">thought that would be it would be a lot</font>

371
00:16:14,279 --> 00:16:20,639
less possible<font color="#E5E5E5"> ways to</font><font color="#CCCCCC"> achieve those</font>

372
00:16:17,040 --> 00:16:22,980
corrupted<font color="#CCCCCC"> states and what you could see</font>

373
00:16:20,639 --> 00:16:26,489
here is that<font color="#CCCCCC"> actually it looks fairly</font>

374
00:16:22,980 --> 00:16:28,860
similar for<font color="#E5E5E5"> this one we can see how one</font>

375
00:16:26,489 --> 00:16:31,110
<font color="#E5E5E5">of the examples in peach</font><font color="#CCCCCC"> mill</font><font color="#E5E5E5"> 2.23 is</font>

376
00:16:28,860 --> 00:16:33,360
now an<font color="#E5E5E5"> unconstraint right instead of</font>

377
00:16:31,110 --> 00:16:35,639
<font color="#CCCCCC">constraint wire</font><font color="#E5E5E5"> right what that means is</font>

378
00:16:33,360 --> 00:16:38,040
the memory location<font color="#CCCCCC"> you write to has no</font>

379
00:16:35,639 --> 00:16:39,959
<font color="#E5E5E5">constraints anymore there's no values</font>

380
00:16:38,040 --> 00:16:43,019
that have to be<font color="#E5E5E5"> there so</font><font color="#CCCCCC"> that the ride</font>

381
00:16:39,959 --> 00:16:48,238
<font color="#E5E5E5">is actually done and when we look deeper</font>

382
00:16:43,019 --> 00:16:50,399
into that what happened here is<font color="#CCCCCC"> we malov</font>

383
00:16:48,239 --> 00:16:52,589
to take free and<font color="#CCCCCC"> freed</font><font color="#E5E5E5"> so with the fake</font>

384
00:16:50,399 --> 00:16:54,389
free we introduced<font color="#CCCCCC"> fake</font><font color="#E5E5E5"> a symbolic</font>

385
00:16:52,589 --> 00:16:56,100
pointer into<font color="#E5E5E5"> the</font><font color="#CCCCCC"> heap and when the</font>

386
00:16:54,389 --> 00:16:57,839
second<font color="#CCCCCC"> three was done this</font><font color="#E5E5E5"> volume</font>

387
00:16:56,100 --> 00:17:01,769
pointer<font color="#E5E5E5"> was used to dereference</font><font color="#CCCCCC"> and</font>

388
00:16:57,839 --> 00:17:03,839
right there and so we thought<font color="#E5E5E5"> had that</font>

389
00:17:01,769 --> 00:17:05,339
<font color="#E5E5E5">that's actually there it should be there</font>

390
00:17:03,839 --> 00:17:07,559
were more checks<font color="#CCCCCC"> at least it shouldn't</font>

391
00:17:05,339 --> 00:17:10,829
<font color="#E5E5E5">get worse so we discovered there was a</font>

392
00:17:07,559 --> 00:17:13,199
new structure<font color="#E5E5E5"> to use into into the GFC</font>

393
00:17:10,829 --> 00:17:15,688
heap or<font color="#CCCCCC"> to PT mallow which is called T</font>

394
00:17:13,199 --> 00:17:18,000
cash and T cash is basically<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of a</font>

395
00:17:15,689 --> 00:17:20,990
pre hook to the previous structures that

396
00:17:18,000 --> 00:17:24,179
should help improve the<font color="#E5E5E5"> performance and</font>

397
00:17:20,990 --> 00:17:27,000
this this structure doesn't<font color="#E5E5E5"> do any or</font>

398
00:17:24,179 --> 00:17:28,799
almost non consistency checks<font color="#E5E5E5"> so which</font>

399
00:17:27,000 --> 00:17:30,570
was which<font color="#CCCCCC"> was handled by the previous</font>

400
00:17:28,799 --> 00:17:32,730
<font color="#E5E5E5">structure before and was checked is now</font>

401
00:17:30,570 --> 00:17:34,799
not checked anymore and this<font color="#E5E5E5"> is I think</font>

402
00:17:32,730 --> 00:17:36,510
a great<font color="#E5E5E5"> showcase on how</font><font color="#CCCCCC"> he popper is</font>

403
00:17:34,799 --> 00:17:38,399
able to<font color="#CCCCCC"> identify those kind</font><font color="#E5E5E5"> of</font>

404
00:17:36,510 --> 00:17:41,610
implications<font color="#CCCCCC"> you get by introducing more</font>

405
00:17:38,399 --> 00:17:48,059
structures<font color="#CCCCCC"> I also want to look</font><font color="#E5E5E5"> very</font>

406
00:17:41,610 --> 00:17:49,408
<font color="#E5E5E5">briefly on the poison alibi</font><font color="#CCCCCC"> so the</font>

407
00:17:48,059 --> 00:17:52,770
challenging thing about<font color="#E5E5E5"> this has had a</font>

408
00:17:49,409 --> 00:17:54,090
very<font color="#E5E5E5"> very high</font><font color="#CCCCCC"> death</font><font color="#E5E5E5"> like a man a lot of</font>

409
00:17:52,770 --> 00:17:55,500
actions have to perform<font color="#E5E5E5"> the</font><font color="#CCCCCC"> lessons</font>

410
00:17:54,090 --> 00:17:57,610
actual have to be performed until<font color="#E5E5E5"> you</font>

411
00:17:55,500 --> 00:17:59,679
reach this corrupted<font color="#CCCCCC"> state</font>

412
00:17:57,610 --> 00:18:01,389
so it's<font color="#E5E5E5"> very challenging</font><font color="#CCCCCC"> for a pauper</font>

413
00:17:59,679 --> 00:18:03,639
because them because of this of<font color="#E5E5E5"> this</font>

414
00:18:01,389 --> 00:18:06,189
high death and has a very constrained

415
00:18:03,639 --> 00:18:08,229
attack vector but just along<font color="#E5E5E5"> this</font><font color="#CCCCCC"> smell</font>

416
00:18:06,190 --> 00:18:09,970
<font color="#CCCCCC">bite overflow</font><font color="#E5E5E5"> so what we just wanted to</font>

417
00:18:08,230 --> 00:18:14,200
<font color="#E5E5E5">see if people would identify this attack</font>

418
00:18:09,970 --> 00:18:18,039
<font color="#E5E5E5">given given such a such a model</font><font color="#CCCCCC"> and it</font>

419
00:18:14,200 --> 00:18:20,320
was<font color="#E5E5E5"> actually it found</font><font color="#CCCCCC"> the attack and so</font>

420
00:18:18,039 --> 00:18:23,110
we were curious<font color="#E5E5E5"> okay there was a patch</font>

421
00:18:20,320 --> 00:18:26,080
introduced by<font color="#E5E5E5"> Richard Evans solely based</font>

422
00:18:23,110 --> 00:18:27,850
on his analysis so<font color="#CCCCCC"> Hemi but what were to</font>

423
00:18:26,080 --> 00:18:29,289
<font color="#E5E5E5">happen when</font><font color="#CCCCCC"> we verify</font><font color="#E5E5E5"> the patch was he</font>

424
00:18:27,850 --> 00:18:31,359
popper and<font color="#E5E5E5"> what happened we actually</font>

425
00:18:29,289 --> 00:18:32,859
found<font color="#E5E5E5"> the same type as</font><font color="#CCCCCC"> it was</font><font color="#E5E5E5"> post it's</font>

426
00:18:31,359 --> 00:18:35,619
just a couple<font color="#E5E5E5"> of day after</font><font color="#CCCCCC"> the patch was</font>

427
00:18:32,859 --> 00:18:38,439
introduced<font color="#E5E5E5"> and I think that's a great</font>

428
00:18:35,619 --> 00:18:41,139
showcase<font color="#E5E5E5"> how he popper can can help here</font>

429
00:18:38,440 --> 00:18:43,649
in<font color="#E5E5E5"> that case to verify the implications</font>

430
00:18:41,139 --> 00:18:48,519
off of new patches<font color="#CCCCCC"> even for very</font>

431
00:18:43,649 --> 00:18:50,738
technical very complex topics or attacks

432
00:18:48,519 --> 00:18:55,169
<font color="#E5E5E5">like this one and yeah we developed in</font>

433
00:18:50,739 --> 00:18:58,259
<font color="#E5E5E5">our own patch which just reduces the</font>

434
00:18:55,169 --> 00:19:01,419
amount of interactions and therefore

435
00:18:58,259 --> 00:19:02,710
helps to improve the original patch you

436
00:19:01,419 --> 00:19:05,169
can find the<font color="#E5E5E5"> details on the paper as</font>

437
00:19:02,710 --> 00:19:06,669
<font color="#E5E5E5">well</font><font color="#CCCCCC"> and yeah we tried that as well if</font>

438
00:19:05,169 --> 00:19:11,049
he popper and<font color="#E5E5E5"> was actually</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to</font>

439
00:19:06,669 --> 00:19:12,700
find a bypass yeah so we try to upstream

440
00:19:11,049 --> 00:19:15,549
<font color="#E5E5E5">this patch and</font><font color="#CCCCCC"> make</font><font color="#E5E5E5"> the experience how</font>

441
00:19:12,700 --> 00:19:17,499
hard it is to<font color="#CCCCCC"> actually change</font><font color="#E5E5E5"> or</font>

442
00:19:15,549 --> 00:19:19,539
introduce those security checks into<font color="#CCCCCC"> the</font>

443
00:19:17,499 --> 00:19:22,239
heap itself<font color="#E5E5E5"> or into the</font><font color="#CCCCCC"> Lipsky itself</font>

444
00:19:19,539 --> 00:19:24,039
<font color="#E5E5E5">just because it's always a trade-off</font>

445
00:19:22,239 --> 00:19:26,019
<font color="#CCCCCC">between performance and security and</font>

446
00:19:24,039 --> 00:19:29,408
people<font color="#E5E5E5"> that develop heaps are really</font>

447
00:19:26,019 --> 00:19:30,999
very<font color="#CCCCCC"> valuable valuing the performance</font><font color="#E5E5E5"> so</font>

448
00:19:29,409 --> 00:19:33,070
yeah I<font color="#E5E5E5"> think</font><font color="#CCCCCC"> number two Rachele</font><font color="#E5E5E5"> cases</font>

449
00:19:30,999 --> 00:19:35,590
how<font color="#CCCCCC"> the popper can be used</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> practice</font>

450
00:19:33,070 --> 00:19:39,700
<font color="#CCCCCC">to help</font><font color="#E5E5E5"> improve just the development of</font>

451
00:19:35,590 --> 00:19:41,830
those<font color="#E5E5E5"> heaps so</font><font color="#CCCCCC"> in Santa that's it for my</font>

452
00:19:39,700 --> 00:19:44,070
<font color="#E5E5E5">talk and thank you very much for your</font>

453
00:19:41,830 --> 00:19:44,070
attention

454
00:19:46,030 --> 00:19:48,090
[Applause]

455
00:19:46,860 --> 00:20:08,490
[Music]

456
00:19:48,090 --> 00:20:09,689
<font color="#CCCCCC">I</font><font color="#E5E5E5"> do great work</font><font color="#CCCCCC"> ah</font><font color="#E5E5E5"> looks like</font><font color="#CCCCCC"> a fun</font>

457
00:20:08,490 --> 00:20:12,570
paper that<font color="#E5E5E5"> I'll have to add to my</font>

458
00:20:09,690 --> 00:20:16,039
reading list<font color="#CCCCCC"> um quick question</font><font color="#E5E5E5"> so all of</font>

459
00:20:12,570 --> 00:20:18,840
the alligators you looked at were

460
00:20:16,039 --> 00:20:23,010
allocating<font color="#E5E5E5"> the</font><font color="#CCCCCC"> meta data right next or</font>

461
00:20:18,840 --> 00:20:24,389
in line<font color="#E5E5E5"> mr. mr. allocated objects right</font>

462
00:20:23,010 --> 00:20:28,140
did you also look at this<font color="#CCCCCC"> joint</font>

463
00:20:24,390 --> 00:20:30,360
alligators like the one in FreeBSD<font color="#CCCCCC"> died</font>

464
00:20:28,140 --> 00:20:32,610
hard time<font color="#E5E5E5"> harder or any of TV like</font>

465
00:20:30,360 --> 00:20:34,590
Windows 10<font color="#E5E5E5"> alligators that are a little</font>

466
00:20:32,610 --> 00:20:36,719
<font color="#E5E5E5">bit more resilient against these kinds</font>

467
00:20:34,590 --> 00:20:38,850
of attacks<font color="#E5E5E5"> unfortunately we have not yet</font>

468
00:20:36,720 --> 00:20:41,520
it's it's<font color="#E5E5E5"> very</font><font color="#CCCCCC"> interesting look at those</font>

469
00:20:38,850 --> 00:20:43,860
<font color="#E5E5E5">we expect</font><font color="#CCCCCC"> hip-hopper</font><font color="#E5E5E5"> of course to be not</font>

470
00:20:41,520 --> 00:20:45,299
as efficient as with<font color="#E5E5E5"> actually in that</font>

471
00:20:43,860 --> 00:20:46,830
metadata<font color="#CCCCCC"> because there's</font><font color="#E5E5E5"> it's it's</font>

472
00:20:45,299 --> 00:20:47,908
harder to to corrupt those those heaps

473
00:20:46,830 --> 00:20:57,299
yeah that will be<font color="#E5E5E5"> you know some</font>

474
00:20:47,909 --> 00:20:58,500
interesting<font color="#E5E5E5"> future work yeah so so that</font>

475
00:20:57,299 --> 00:21:00,629
<font color="#CCCCCC">action vaccines are interesting here</font>

476
00:20:58,500 --> 00:21:02,340
<font color="#E5E5E5">would be for example</font><font color="#CCCCCC"> uh steak fries</font>

477
00:21:00,630 --> 00:21:03,809
double fries those type of<font color="#E5E5E5"> attacks not</font>

478
00:21:02,340 --> 00:21:05,959
not overflows and<font color="#E5E5E5"> use</font><font color="#CCCCCC"> them to raise</font><font color="#E5E5E5"> of</font>

479
00:21:03,809 --> 00:21:08,428
course yeah

480
00:21:05,960 --> 00:21:13,169
do we have<font color="#E5E5E5"> more questions for</font><font color="#CCCCCC"> the</font>

481
00:21:08,429 --> 00:21:15,390
speaker<font color="#E5E5E5"> all right then then</font><font color="#CCCCCC"> our altering</font>

482
00:21:13,169 --> 00:21:17,970
one question<font color="#CCCCCC"> that I had maybe you didn't</font>

483
00:21:15,390 --> 00:21:19,950
cover in your<font color="#E5E5E5"> talk so when you perform</font>

484
00:21:17,970 --> 00:21:22,070
the symbolic execution<font color="#CCCCCC"> is there any</font>

485
00:21:19,950 --> 00:21:24,330
strategy in terms<font color="#E5E5E5"> of selecting which</font>

486
00:21:22,070 --> 00:21:27,480
variables that you should symbolize or

487
00:21:24,330 --> 00:21:30,418
it's<font color="#E5E5E5"> just you know all the input</font><font color="#CCCCCC"> that</font>

488
00:21:27,480 --> 00:21:33,929
<font color="#CCCCCC">may affect the allocation</font><font color="#E5E5E5"> so there's one</font>

489
00:21:30,419 --> 00:21:36,480
interesting<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> let's say we we</font>

490
00:21:33,929 --> 00:21:40,080
have those rights<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> a very</font>

491
00:21:36,480 --> 00:21:42,899
interesting<font color="#E5E5E5"> thing we try to concretize</font>

492
00:21:40,080 --> 00:21:44,760
those<font color="#CCCCCC"> two</font><font color="#E5E5E5"> controlled memory representing</font>

493
00:21:42,899 --> 00:21:46,350
what an attacker would do in case he

494
00:21:44,760 --> 00:21:49,440
gets<font color="#E5E5E5"> control over some kind of pointer</font>

495
00:21:46,350 --> 00:21:51,889
and he needs to<font color="#E5E5E5"> pass or taxi but point</font>

496
00:21:49,440 --> 00:21:54,390
that back to his own memory that's what

497
00:21:51,890 --> 00:21:56,870
okay<font color="#E5E5E5"> all right let's thank the speaker</font>

498
00:21:54,390 --> 00:21:56,870
one<font color="#CCCCCC"> more time</font>

