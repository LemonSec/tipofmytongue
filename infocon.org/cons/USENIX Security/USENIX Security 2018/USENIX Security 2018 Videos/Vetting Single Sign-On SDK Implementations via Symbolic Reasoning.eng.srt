1
00:00:10,500 --> 00:00:15,719
hi<font color="#CCCCCC"> everyone the talk I gave</font><font color="#E5E5E5"> gave today</font>

2
00:00:13,800 --> 00:00:19,080
<font color="#E5E5E5">is called</font><font color="#CCCCCC"> buttons</font>

3
00:00:15,720 --> 00:00:22,140
<font color="#E5E5E5">single sign-on SDK implementations by</font>

4
00:00:19,080 --> 00:00:25,459
symbolic reasoning this<font color="#CCCCCC"> is a joint work</font>

5
00:00:22,140 --> 00:00:28,259
<font color="#CCCCCC">with long hye-young Wing Chun Lao and</font>

6
00:00:25,460 --> 00:00:31,829
Kohan<font color="#CCCCCC"> Jong we are from the Chinese</font>

7
00:00:28,259 --> 00:00:34,500
<font color="#CCCCCC">University of Hong Kong since the first</font>

8
00:00:31,829 --> 00:00:40,500
author could not come for the visa issue

9
00:00:34,500 --> 00:00:42,990
<font color="#CCCCCC">I will</font><font color="#E5E5E5"> present this work instead in</font>

10
00:00:40,500 --> 00:00:46,650
recent years we've<font color="#CCCCCC"> seen strong adoption</font>

11
00:00:42,990 --> 00:00:47,250
<font color="#E5E5E5">of single sign-on services with single</font>

12
00:00:46,650 --> 00:00:51,800
<font color="#CCCCCC">sign-on</font>

13
00:00:47,250 --> 00:00:54,990
a user<font color="#E5E5E5"> can convent and conveniently</font>

14
00:00:51,800 --> 00:00:58,230
<font color="#CCCCCC">locally in a third-party service</font><font color="#E5E5E5"> with a</font>

15
00:00:54,990 --> 00:01:02,600
single ID and password<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example you</font>

16
00:00:58,230 --> 00:01:06,619
can<font color="#CCCCCC"> use your Facebook account</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> log in</font>

17
00:01:02,600 --> 00:01:10,979
IMDB<font color="#E5E5E5"> website</font>

18
00:01:06,619 --> 00:01:13,970
according to a report more<font color="#CCCCCC"> than 75%</font><font color="#E5E5E5"> of</font>

19
00:01:10,979 --> 00:01:17,900
<font color="#E5E5E5">users prefer using single sign-on and</font>

20
00:01:13,970 --> 00:01:22,020
<font color="#E5E5E5">not more</font><font color="#CCCCCC"> than 90% of them are satisfied</font>

21
00:01:17,900 --> 00:01:24,930
previous<font color="#CCCCCC"> studies also</font><font color="#E5E5E5"> reviews that many</font>

22
00:01:22,020 --> 00:01:29,600
web applications<font color="#CCCCCC"> in android applications</font>

23
00:01:24,930 --> 00:01:29,600
<font color="#E5E5E5">also support single sign-on services</font>

24
00:01:30,260 --> 00:01:36,500
let's see how single<font color="#E5E5E5"> sign-on works</font>

25
00:01:32,760 --> 00:01:40,200
basically<font color="#CCCCCC"> it involves three parties</font>

26
00:01:36,500 --> 00:01:43,260
the<font color="#E5E5E5"> third party application which is</font>

27
00:01:40,200 --> 00:01:47,420
also called<font color="#E5E5E5"> the relying party</font><font color="#CCCCCC"> the</font>

28
00:01:43,260 --> 00:01:52,110
identity provider<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> current</font><font color="#E5E5E5"> device</font>

29
00:01:47,420 --> 00:01:54,930
<font color="#CCCCCC">when the</font><font color="#E5E5E5"> user tries to lock in a RP</font>

30
00:01:52,110 --> 00:01:59,970
server<font color="#E5E5E5"> the RP server asks who</font><font color="#CCCCCC"> are you</font>

31
00:01:54,930 --> 00:02:03,600
and the server the user house and IDP

32
00:01:59,970 --> 00:02:07,260
server please<font color="#E5E5E5"> tell I am DB my identity</font>

33
00:02:03,600 --> 00:02:11,099
and then the IDP server returns<font color="#E5E5E5"> the</font>

34
00:02:07,260 --> 00:02:14,700
users<font color="#E5E5E5"> identity proof to the user and</font>

35
00:02:11,099 --> 00:02:17,670
then the user gives this identity proof

36
00:02:14,700 --> 00:02:20,099
to the RP server<font color="#E5E5E5"> and when the app user</font>

37
00:02:17,670 --> 00:02:22,719
receives that<font color="#E5E5E5"> and appears over says</font>

38
00:02:20,099 --> 00:02:26,719
<font color="#E5E5E5">welcome</font>

39
00:02:22,719 --> 00:02:31,219
okay so under<font color="#CCCCCC"> the hook he's the single</font>

40
00:02:26,719 --> 00:02:34,329
<font color="#E5E5E5">sign-on protocol flows in step 1 the</font>

41
00:02:31,219 --> 00:02:39,439
user initiates the single sign-on

42
00:02:34,329 --> 00:02:42,650
<font color="#CCCCCC">process with the RP server and then in</font>

43
00:02:39,439 --> 00:02:47,290
<font color="#E5E5E5">step 2 the RP server responses with the</font>

44
00:02:42,650 --> 00:02:51,260
redirect URL<font color="#CCCCCC"> in the state's parameter to</font>

45
00:02:47,290 --> 00:02:54,470
prevent<font color="#E5E5E5"> cross-site request forgery</font><font color="#CCCCCC"> and</font>

46
00:02:51,260 --> 00:02:58,879
<font color="#E5E5E5">then the user will be redirected to</font><font color="#CCCCCC"> your</font>

47
00:02:54,470 --> 00:03:03,620
Facebook and in this step<font color="#CCCCCC"> the user</font><font color="#E5E5E5"> is</font>

48
00:02:58,879 --> 00:03:08,108
authenticated<font color="#E5E5E5"> to Facebook and grants</font>

49
00:03:03,620 --> 00:03:13,269
some permissions to<font color="#CCCCCC"> the RP server</font><font color="#E5E5E5"> like</font>

50
00:03:08,109 --> 00:03:13,269
the public profile and<font color="#CCCCCC"> the email address</font>

51
00:03:13,599 --> 00:03:23,298
then<font color="#CCCCCC"> the IDP will return a code which is</font>

52
00:03:18,620 --> 00:03:30,829
<font color="#CCCCCC">an intermediate</font><font color="#E5E5E5"> proof of identity</font><font color="#CCCCCC"> to the</font>

53
00:03:23,299 --> 00:03:34,790
RP server<font color="#E5E5E5"> by this user after</font><font color="#CCCCCC"> that the RP</font>

54
00:03:30,829 --> 00:03:39,620
server<font color="#E5E5E5"> approaches the IDP server with</font>

55
00:03:34,790 --> 00:03:42,728
<font color="#E5E5E5">the code and is</font><font color="#CCCCCC"> on credential to</font>

56
00:03:39,620 --> 00:03:46,280
exchange<font color="#E5E5E5"> for an access token</font>

57
00:03:42,729 --> 00:03:50,269
so with this access token<font color="#CCCCCC"> the RP server</font>

58
00:03:46,280 --> 00:03:52,909
can catch the<font color="#CCCCCC"> users profile like the</font>

59
00:03:50,269 --> 00:03:57,349
email address<font color="#E5E5E5"> or the birthday from the</font>

60
00:03:52,909 --> 00:04:02,168
IDP server<font color="#E5E5E5"> so at the end the user can</font>

61
00:03:57,349 --> 00:04:02,168
request her information<font color="#CCCCCC"> on the RP server</font>

62
00:04:03,909 --> 00:04:11,870
as we discussed the entire<font color="#CCCCCC"> process is</font>

63
00:04:08,629 --> 00:04:14,259
quite complicated<font color="#E5E5E5"> it involves multiple</font>

64
00:04:11,870 --> 00:04:20,409
<font color="#E5E5E5">parties and multiple operations</font>

65
00:04:14,259 --> 00:04:23,360
<font color="#E5E5E5">therefore SDKs are provided to help</font><font color="#CCCCCC"> RP</font>

66
00:04:20,409 --> 00:04:25,960
developers to implement<font color="#CCCCCC"> single sign-on</font>

67
00:04:23,360 --> 00:04:25,960
services

68
00:04:26,080 --> 00:04:34,900
actually the SDKs<font color="#E5E5E5"> are provided not only</font>

69
00:04:30,550 --> 00:04:40,930
by IDPs like<font color="#CCCCCC"> Facebook</font><font color="#E5E5E5"> but more often by</font>

70
00:04:34,900 --> 00:04:45,039
forced party<font color="#E5E5E5"> hdk providers for cross IDP</font>

71
00:04:40,930 --> 00:04:49,210
support of an application<font color="#E5E5E5"> as you can see</font>

72
00:04:45,039 --> 00:04:53,169
in the table some SDKs enjoy millions of

73
00:04:49,210 --> 00:04:56,318
downloads like<font color="#CCCCCC"> request earth library and</font>

74
00:04:53,169 --> 00:05:00,909
<font color="#CCCCCC">all</font><font color="#E5E5E5"> library and those numbers are</font><font color="#CCCCCC"> just</font>

75
00:04:56,319 --> 00:05:03,759
<font color="#CCCCCC">come to beta as we made and the number</font>

76
00:05:00,909 --> 00:05:09,129
<font color="#CCCCCC">of tunnels</font><font color="#E5E5E5"> are by the developers not by</font>

77
00:05:03,759 --> 00:05:11,889
<font color="#E5E5E5">and the users so if these SDKs are not</font>

78
00:05:09,129 --> 00:05:18,039
<font color="#CCCCCC">secured</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the applications using the</font>

79
00:05:11,889 --> 00:05:20,729
<font color="#E5E5E5">SDKs will be insecure unfortunately we</font>

80
00:05:18,039 --> 00:05:24,068
have seen many attacks due to<font color="#E5E5E5"> incorrect</font>

81
00:05:20,729 --> 00:05:28,240
implementation of SDKs at the Commission

82
00:05:24,069 --> 00:05:31,840
in this example the<font color="#CCCCCC"> app he server-side</font>

83
00:05:28,240 --> 00:05:37,630
SDK<font color="#CCCCCC"> on injects</font><font color="#E5E5E5"> the user ID but does not</font>

84
00:05:31,840 --> 00:05:40,568
<font color="#E5E5E5">check the</font><font color="#CCCCCC"> access token at all on the</font>

85
00:05:37,630 --> 00:05:43,090
other<font color="#E5E5E5"> hand we noticed that in the</font>

86
00:05:40,569 --> 00:05:46,710
<font color="#CCCCCC">literature</font><font color="#E5E5E5"> most the existing work does</font>

87
00:05:43,090 --> 00:05:50,258
not<font color="#CCCCCC"> analyze the single sign-on SDK</font>

88
00:05:46,710 --> 00:05:53,489
implementations<font color="#E5E5E5"> so one direction is to</font>

89
00:05:50,259 --> 00:05:56,560
is for more analysis of<font color="#E5E5E5"> single sign-on</font>

90
00:05:53,490 --> 00:05:59,379
<font color="#E5E5E5">protocol standards the approaches</font>

91
00:05:56,560 --> 00:06:03,759
include<font color="#CCCCCC"> the mother checking and crypto</font>

92
00:05:59,379 --> 00:06:07,419
perfect proof the other direction is to

93
00:06:03,759 --> 00:06:12,699
detect<font color="#CCCCCC"> real world were abilities by</font>

94
00:06:07,419 --> 00:06:14,919
treating the SDKs as a black box<font color="#E5E5E5"> so the</font>

95
00:06:12,699 --> 00:06:17,710
techniques include natural traffic

96
00:06:14,919 --> 00:06:24,128
<font color="#CCCCCC">analysis or model based automated</font>

97
00:06:17,710 --> 00:06:27,460
testing besides a related work is to

98
00:06:24,129 --> 00:06:30,610
discover<font color="#E5E5E5"> the hidden assumptions that are</font>

99
00:06:27,460 --> 00:06:34,000
required for<font color="#CCCCCC"> the proper use of SDKs</font><font color="#E5E5E5"> but</font>

100
00:06:30,610 --> 00:06:38,130
this worker requires that the code has

101
00:06:34,000 --> 00:06:38,130
<font color="#CCCCCC">to</font><font color="#E5E5E5"> be manually translated</font>

102
00:06:38,960 --> 00:06:45,679
so however<font color="#E5E5E5"> little efforts has</font><font color="#CCCCCC"> been</font>

103
00:06:42,689 --> 00:06:48,899
devoted<font color="#CCCCCC"> to a systematic testing of</font>

104
00:06:45,679 --> 00:06:54,958
implementation<font color="#CCCCCC"> flaws in single sign-on</font>

105
00:06:48,899 --> 00:06:57,959
<font color="#E5E5E5">SDK our internals therefore are in our</font>

106
00:06:54,959 --> 00:07:01,429
research we<font color="#E5E5E5"> raised this question is in</font>

107
00:06:57,959 --> 00:07:04,199
single<font color="#CCCCCC"> sign-on SDK vulnerable by itself</font>

108
00:07:01,429 --> 00:07:06,688
in other words do<font color="#CCCCCC"> they still work</font>

109
00:07:04,199 --> 00:07:11,520
properly<font color="#E5E5E5"> under whatever inputs from</font><font color="#CCCCCC"> the</font>

110
00:07:06,689 --> 00:07:15,839
attacker in our work<font color="#E5E5E5"> we focus on logic</font>

111
00:07:11,520 --> 00:07:19,498
vulnerabilities of<font color="#CCCCCC"> the RP server SDK</font>

112
00:07:15,839 --> 00:07:24,229
internals so in our testing<font color="#E5E5E5"> we control</font>

113
00:07:19,499 --> 00:07:24,229
<font color="#E5E5E5">the</font><font color="#CCCCCC"> requests like those in the figure we</font>

114
00:07:25,490 --> 00:07:33,269
<font color="#CCCCCC">assumed that the attacker can lure the</font>

115
00:07:29,219 --> 00:07:36,808
victim to visit a malicious IP server in

116
00:07:33,269 --> 00:07:43,469
<font color="#CCCCCC">order to obtain a</font><font color="#E5E5E5"> valid access token of</font>

117
00:07:36,809 --> 00:07:46,759
the<font color="#CCCCCC"> victims IDP account</font><font color="#E5E5E5"> but this token</font>

118
00:07:43,469 --> 00:07:50,729
binds<font color="#CCCCCC"> all into the malicious RP server</font>

119
00:07:46,759 --> 00:07:54,149
and the attacker can also set up an

120
00:07:50,729 --> 00:07:56,579
external machine and use her own credit

121
00:07:54,149 --> 00:08:00,629
account to communicate with the client

122
00:07:56,579 --> 00:08:04,619
<font color="#CCCCCC">the IDP server</font><font color="#E5E5E5"> and our PI</font><font color="#CCCCCC"> server</font><font color="#E5E5E5"> and we</font>

123
00:08:00,629 --> 00:08:07,079
also assume<font color="#CCCCCC"> that if HTTP is not used the</font>

124
00:08:04,619 --> 00:08:11,819
attacker can eavesdrop<font color="#E5E5E5"> victim's</font>

125
00:08:07,079 --> 00:08:14,689
communication so we developed a<font color="#CCCCCC"> tool</font>

126
00:08:11,819 --> 00:08:18,990
called s3 Kveta

127
00:08:14,689 --> 00:08:22,169
<font color="#E5E5E5">it plays two roles first in order</font><font color="#CCCCCC"> to</font>

128
00:08:18,990 --> 00:08:26,309
support the protocol flow<font color="#E5E5E5"> it interacts</font>

129
00:08:22,169 --> 00:08:30,389
with<font color="#CCCCCC"> our PI server and RDP server</font><font color="#E5E5E5"> and if</font>

130
00:08:26,309 --> 00:08:35,759
it is the client device<font color="#E5E5E5"> second to</font>

131
00:08:30,389 --> 00:08:39,599
provide<font color="#E5E5E5"> the input to the RP server</font><font color="#CCCCCC"> it</font>

132
00:08:35,759 --> 00:08:44,760
<font color="#E5E5E5">communicates with the RP server on</font>

133
00:08:39,599 --> 00:08:48,720
<font color="#E5E5E5">behalf of the attacker the</font><font color="#CCCCCC"> high-level</font>

134
00:08:44,760 --> 00:08:49,769
<font color="#CCCCCC">idea</font><font color="#E5E5E5"> is that first</font><font color="#CCCCCC"> of all we extract all</font>

135
00:08:48,720 --> 00:08:53,249
<font color="#CCCCCC">the program</font>

136
00:08:49,769 --> 00:08:56,069
<font color="#E5E5E5">Huff's from the SDK using</font><font color="#CCCCCC"> Khan Kollek</font>

137
00:08:53,249 --> 00:09:00,329
<font color="#E5E5E5">execution and then we define some</font>

138
00:08:56,069 --> 00:09:03,179
security properties for single sign no

139
00:09:00,329 --> 00:09:06,779
SDKs<font color="#E5E5E5"> that those properties</font><font color="#CCCCCC"> are</font>

140
00:09:03,179 --> 00:09:10,049
essentially<font color="#E5E5E5"> the expected behaviors at</font>

141
00:09:06,779 --> 00:09:14,720
the end<font color="#E5E5E5"> we check whether the security</font>

142
00:09:10,049 --> 00:09:19,199
<font color="#E5E5E5">properties hold on every program has</font>

143
00:09:14,720 --> 00:09:21,860
however<font color="#E5E5E5"> to concur</font><font color="#CCCCCC"> lately Concord react</font>

144
00:09:19,199 --> 00:09:25,229
explore the past<font color="#E5E5E5"> we encountered some</font>

145
00:09:21,860 --> 00:09:28,769
technical challenges<font color="#E5E5E5"> because existing</font>

146
00:09:25,230 --> 00:09:32,730
<font color="#CCCCCC">con colic execution framework</font><font color="#E5E5E5"> do not</font>

147
00:09:28,769 --> 00:09:37,139
support multi-party communication and

148
00:09:32,730 --> 00:09:39,480
multi<font color="#E5E5E5"> love step operations in particular</font>

149
00:09:37,139 --> 00:09:43,799
the problems we're facing is<font color="#CCCCCC"> that our</font>

150
00:09:39,480 --> 00:09:47,839
that some non<font color="#CCCCCC"> siamo parameters like code</font>

151
00:09:43,799 --> 00:09:51,199
or state can only<font color="#E5E5E5"> be used for once</font>

152
00:09:47,839 --> 00:09:54,269
<font color="#E5E5E5">besides some parameters are remotely</font>

153
00:09:51,199 --> 00:10:00,389
generated and consumed<font color="#E5E5E5"> by the remote</font>

154
00:09:54,269 --> 00:10:04,379
server<font color="#CCCCCC"> so with these problems extra</font>

155
00:10:00,389 --> 00:10:09,679
effort<font color="#E5E5E5"> are required to create impose to</font>

156
00:10:04,379 --> 00:10:09,679
properly feed single sign-on<font color="#E5E5E5"> SDKs</font>

157
00:10:10,699 --> 00:10:16,519
existing approaches<font color="#E5E5E5"> also</font><font color="#CCCCCC"> have some</font>

158
00:10:13,410 --> 00:10:20,490
issues<font color="#CCCCCC"> and cannot</font><font color="#E5E5E5"> address our challenges</font>

159
00:10:16,519 --> 00:10:25,290
<font color="#E5E5E5">the first option is</font><font color="#CCCCCC"> to run the external</font>

160
00:10:20,490 --> 00:10:28,649
functions of<font color="#CCCCCC"> SDK concretely however we</font>

161
00:10:25,290 --> 00:10:31,829
can<font color="#E5E5E5"> only make limited</font><font color="#CCCCCC"> API costs to the</font>

162
00:10:28,649 --> 00:10:36,149
IDP server<font color="#E5E5E5"> because it imposes limit on</font>

163
00:10:31,829 --> 00:10:38,819
API access rate<font color="#E5E5E5"> therefore this cannot</font>

164
00:10:36,149 --> 00:10:42,240
correctly generate<font color="#E5E5E5"> nonce parameters the</font>

165
00:10:38,819 --> 00:10:45,360
second<font color="#CCCCCC"> option</font><font color="#E5E5E5"> is to return a</font><font color="#CCCCCC"> random</font>

166
00:10:42,240 --> 00:10:48,209
value of the same return type of those

167
00:10:45,360 --> 00:10:51,769
external functions without execution

168
00:10:48,209 --> 00:10:54,689
<font color="#E5E5E5">like those techniques used in dart</font>

169
00:10:51,769 --> 00:10:59,869
however this will cause false positives

170
00:10:54,689 --> 00:11:02,560
<font color="#CCCCCC">to our testing result besides</font>

171
00:10:59,869 --> 00:11:04,810
symbolically exploring the

172
00:11:02,560 --> 00:11:08,619
external functions<font color="#E5E5E5"> and it's not feasible</font>

173
00:11:04,810 --> 00:11:14,170
<font color="#CCCCCC">because we don't have access</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

174
00:11:08,620 --> 00:11:18,580
source<font color="#CCCCCC"> code of</font><font color="#E5E5E5"> those IDP servers so in</font>

175
00:11:14,170 --> 00:11:22,599
<font color="#E5E5E5">our design</font><font color="#CCCCCC"> a few converters consists of</font>

176
00:11:18,580 --> 00:11:26,380
three<font color="#CCCCCC"> modules</font><font color="#E5E5E5"> the input is a compiled</font>

177
00:11:22,600 --> 00:11:32,050
SDK and we then break the<font color="#E5E5E5"> order of</font>

178
00:11:26,380 --> 00:11:34,180
<font color="#CCCCCC">requests and coordinate multi-party</font>

179
00:11:32,050 --> 00:11:37,779
communication during<font color="#E5E5E5"> con</font><font color="#CCCCCC"> Kollek</font>

180
00:11:34,180 --> 00:11:41,140
execution after<font color="#CCCCCC"> that we extract the</font>

181
00:11:37,779 --> 00:11:44,439
predicates and represent them as a tree

182
00:11:41,140 --> 00:11:49,210
and then translate the tree to a set<font color="#CCCCCC"> of</font>

183
00:11:44,440 --> 00:11:52,720
logical formulas so at the end we verify

184
00:11:49,210 --> 00:11:55,990
whether there are any violations against

185
00:11:52,720 --> 00:12:02,260
our against the<font color="#E5E5E5"> security properties that</font>

186
00:11:55,990 --> 00:12:06,520
we<font color="#CCCCCC"> our</font><font color="#E5E5E5"> input so for</font><font color="#CCCCCC"> request</font><font color="#E5E5E5"> order</font>

187
00:12:02,260 --> 00:12:09,339
scheduling<font color="#E5E5E5"> we use a single simple</font>

188
00:12:06,520 --> 00:12:12,310
<font color="#E5E5E5">scheduling algorithm let's see</font>

189
00:12:09,339 --> 00:12:17,589
originally the request<font color="#E5E5E5"> order is request</font>

190
00:12:12,310 --> 00:12:20,890
<font color="#CCCCCC">zero request one requested two since we</font>

191
00:12:17,589 --> 00:12:24,510
are only<font color="#CCCCCC"> interested in our algorithm</font>

192
00:12:20,890 --> 00:12:24,510
will generate or other possible

193
00:12:24,690 --> 00:12:31,300
<font color="#E5E5E5">schedules since we are only</font><font color="#CCCCCC"> interested</font>

194
00:12:27,520 --> 00:12:35,800
<font color="#E5E5E5">in the authentication property which is</font>

195
00:12:31,300 --> 00:12:41,020
completed by request<font color="#CCCCCC"> to so other</font>

196
00:12:35,800 --> 00:12:43,420
schedules<font color="#E5E5E5"> also end with</font><font color="#CCCCCC"> request into so</font>

197
00:12:41,020 --> 00:12:45,550
after that<font color="#E5E5E5"> if we break the request</font>

198
00:12:43,420 --> 00:12:49,540
orders<font color="#E5E5E5"> we need to coordinate multiple</font>

199
00:12:45,550 --> 00:12:53,920
<font color="#E5E5E5">parties so our approach is to simulate</font>

200
00:12:49,540 --> 00:12:58,480
<font color="#E5E5E5">and modify the external world for the</font>

201
00:12:53,920 --> 00:13:02,140
SDK in particular<font color="#CCCCCC"> it generates</font><font color="#E5E5E5"> a nonce</font>

202
00:12:58,480 --> 00:13:06,900
parameter internally<font color="#E5E5E5"> on behalf of the</font>

203
00:13:02,140 --> 00:13:11,199
IDP server and if this non-spam<font color="#CCCCCC"> etre</font>

204
00:13:06,900 --> 00:13:14,459
satisfies the condition of the path to

205
00:13:11,200 --> 00:13:17,160
be explored<font color="#E5E5E5"> then we use this</font><font color="#CCCCCC"> non-pom</font><font color="#E5E5E5"> to</font>

206
00:13:14,460 --> 00:13:20,220
and if it does<font color="#E5E5E5"> not satisfy the</font>

207
00:13:17,160 --> 00:13:25,939
conditions we will locally<font color="#E5E5E5"> solve the</font>

208
00:13:20,220 --> 00:13:29,029
condition and use a new<font color="#E5E5E5"> nose parameter</font>

209
00:13:25,940 --> 00:13:33,230
so for example after<font color="#CCCCCC"> past one is</font>

210
00:13:29,029 --> 00:13:37,620
executed the<font color="#E5E5E5"> code will be is invalidated</font>

211
00:13:33,230 --> 00:13:40,830
<font color="#E5E5E5">to explore path</font><font color="#CCCCCC"> 2 we will generate a</font><font color="#E5E5E5"> new</font>

212
00:13:37,620 --> 00:13:44,430
code if this code satisfies the

213
00:13:40,830 --> 00:13:48,839
condition we then use it for<font color="#E5E5E5"> past 3</font><font color="#CCCCCC"> we</font>

214
00:13:44,430 --> 00:13:51,899
<font color="#E5E5E5">still use the previous code but it does</font>

215
00:13:48,839 --> 00:13:53,970
not satisfy the condition then<font color="#CCCCCC"> we'll</font>

216
00:13:51,899 --> 00:13:57,899
solve<font color="#E5E5E5"> the constraint and generate a new</font>

217
00:13:53,970 --> 00:14:00,990
code which is known because the

218
00:13:57,899 --> 00:14:05,430
constraint is that<font color="#E5E5E5"> code</font><font color="#CCCCCC"> length should be</font>

219
00:14:00,990 --> 00:14:11,430
<font color="#CCCCCC">0</font><font color="#E5E5E5"> okay</font>

220
00:14:05,430 --> 00:14:18,599
after that<font color="#E5E5E5"> we combine those parts</font><font color="#CCCCCC"> at the</font>

221
00:14:11,430 --> 00:14:22,609
<font color="#E5E5E5">tree each node</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> a condition and we</font>

222
00:14:18,600 --> 00:14:26,670
then represent the<font color="#CCCCCC"> practical tree using</font>

223
00:14:22,610 --> 00:14:30,330
SMT library language for<font color="#E5E5E5"> each path we</font>

224
00:14:26,670 --> 00:14:35,729
just use<font color="#CCCCCC"> end operation to combine those</font>

225
00:14:30,330 --> 00:14:38,640
predicates<font color="#CCCCCC"> and here is the other</font>

226
00:14:35,730 --> 00:14:42,630
<font color="#E5E5E5">security properties that we defined the</font>

227
00:14:38,640 --> 00:14:45,589
key observation<font color="#CCCCCC"> is data and IRP</font><font color="#E5E5E5"> server</font>

228
00:14:42,630 --> 00:14:49,350
<font color="#E5E5E5">should lock in the user if and only if</font>

229
00:14:45,589 --> 00:14:54,110
the exact user has<font color="#E5E5E5"> actually authorized</font>

230
00:14:49,350 --> 00:14:59,310
this<font color="#CCCCCC"> RP server</font><font color="#E5E5E5"> to ensure this we define</font>

231
00:14:54,110 --> 00:15:02,070
<font color="#E5E5E5">some clauses the first Clause means the</font>

232
00:14:59,310 --> 00:15:06,079
user stored by the<font color="#E5E5E5"> obvious session</font>

233
00:15:02,070 --> 00:15:10,020
<font color="#CCCCCC">should</font><font color="#E5E5E5"> be the owner of the owner of the</font>

234
00:15:06,079 --> 00:15:13,380
received<font color="#E5E5E5"> access token so</font><font color="#CCCCCC"> thus</font><font color="#E5E5E5"> the code</font>

235
00:15:10,020 --> 00:15:19,319
<font color="#E5E5E5">and refresh token in close to</font><font color="#CCCCCC"> any</font>

236
00:15:13,380 --> 00:15:25,370
<font color="#CCCCCC">country cost</font><font color="#E5E5E5"> 4 and 5 ensure that the</font>

237
00:15:19,320 --> 00:15:25,370
access token<font color="#CCCCCC"> and refresh token</font><font color="#E5E5E5"> look here</font>

238
00:15:25,620 --> 00:15:36,220
should be<font color="#E5E5E5"> pasta to the intended RP but</font>

239
00:15:31,060 --> 00:15:39,579
not to other observers<font color="#CCCCCC"> close sex means</font>

240
00:15:36,220 --> 00:15:42,220
<font color="#E5E5E5">that the final</font><font color="#CCCCCC"> load to end user should</font>

241
00:15:39,580 --> 00:15:53,310
be<font color="#E5E5E5"> the one who authenticates in</font>

242
00:15:42,220 --> 00:15:56,230
<font color="#CCCCCC">authorize with the IDP using svk butter</font>

243
00:15:53,310 --> 00:15:59,260
we discovered seven<font color="#E5E5E5"> types of</font>

244
00:15:56,230 --> 00:16:02,589
vulnerabilities on<font color="#CCCCCC"> ten popular as the</font>

245
00:15:59,260 --> 00:16:08,620
case<font color="#E5E5E5"> four of them are previously unknown</font>

246
00:16:02,589 --> 00:16:12,850
and the consequences<font color="#E5E5E5"> are that the users</font>

247
00:16:08,620 --> 00:16:15,130
account could<font color="#E5E5E5"> be high ejected in the RP</font>

248
00:16:12,850 --> 00:16:19,300
<font color="#E5E5E5">for example due to the access token</font>

249
00:16:15,130 --> 00:16:21,990
injection that we discovered the other

250
00:16:19,300 --> 00:16:25,779
consequence is that<font color="#E5E5E5"> the users</font><font color="#CCCCCC"> activity</font>

251
00:16:21,990 --> 00:16:28,660
can be sniffed in the are P due to the

252
00:16:25,779 --> 00:16:34,689
use before<font color="#E5E5E5"> assignment of state parameter</font>

253
00:16:28,660 --> 00:16:38,829
that we are fond<font color="#E5E5E5"> as</font><font color="#CCCCCC"> commissioned in the</font>

254
00:16:34,690 --> 00:16:43,350
table our<font color="#CCCCCC"> tour suppose both embraces</font>

255
00:16:38,830 --> 00:16:49,450
flow and authorization code flow

256
00:16:43,350 --> 00:16:56,250
compared with the<font color="#CCCCCC"> baseline which uses</font>

257
00:16:49,450 --> 00:17:02,529
<font color="#E5E5E5">con colleagues execution to a PI x3d 302</font>

258
00:16:56,250 --> 00:17:07,929
achieves<font color="#E5E5E5"> Q to 17%</font><font color="#CCCCCC"> higher statement</font>

259
00:17:02,529 --> 00:17:11,829
coverage and<font color="#CCCCCC"> to to 19% higher branch</font>

260
00:17:07,929 --> 00:17:17,490
coverage and our<font color="#E5E5E5"> improvement has enabled</font>

261
00:17:11,829 --> 00:17:17,490
us<font color="#E5E5E5"> to discover eight more for</font><font color="#CCCCCC"> abilities</font>

262
00:17:19,800 --> 00:17:25,270
here the<font color="#CCCCCC"> world village</font><font color="#E5E5E5"> that we found</font>

263
00:17:22,859 --> 00:17:27,849
existing classes<font color="#E5E5E5"> of</font><font color="#CCCCCC"> four greatest</font>

264
00:17:25,270 --> 00:17:31,929
<font color="#E5E5E5">include token substitution</font>

265
00:17:27,849 --> 00:17:35,050
no check<font color="#E5E5E5"> hotel as like a misuse of</font><font color="#CCCCCC"> State</font>

266
00:17:31,929 --> 00:17:38,980
or no use of state parameter

267
00:17:35,050 --> 00:17:41,830
the new abilities types of ability types

268
00:17:38,980 --> 00:17:45,059
include<font color="#E5E5E5"> useful for assignment have</font>

269
00:17:41,830 --> 00:17:49,530
stayed home<font color="#CCCCCC"> turn this</font><font color="#E5E5E5"> could allow</font>

270
00:17:45,059 --> 00:17:54,129
<font color="#E5E5E5">sniffing of victim activities by</font>

271
00:17:49,530 --> 00:17:58,240
cross-site request forgery<font color="#E5E5E5"> the other</font>

272
00:17:54,130 --> 00:18:01,870
three types are bypassing<font color="#CCCCCC"> Mac</font><font color="#E5E5E5"> key</font>

273
00:17:58,240 --> 00:18:05,020
protection refresh token<font color="#CCCCCC"> injection and</font>

274
00:18:01,870 --> 00:18:08,428
access token injection<font color="#CCCCCC"> disparities could</font>

275
00:18:05,020 --> 00:18:13,990
allow an attacker to hijack<font color="#CCCCCC"> victims</font>

276
00:18:08,429 --> 00:18:16,050
<font color="#E5E5E5">account on the RP server and</font><font color="#CCCCCC"> will report</font>

277
00:18:13,990 --> 00:18:18,160
<font color="#E5E5E5">in all these new knee discomfort</font>

278
00:18:16,050 --> 00:18:22,740
abilities through the<font color="#E5E5E5"> corresponding</font>

279
00:18:18,160 --> 00:18:22,740
vendors and<font color="#E5E5E5"> they have all fixed them</font>

280
00:18:25,470 --> 00:18:33,130
here we show an example<font color="#E5E5E5"> of an ability</font><font color="#CCCCCC"> in</font>

281
00:18:29,410 --> 00:18:37,630
the code snippet<font color="#E5E5E5"> the code parameters is</font>

282
00:18:33,130 --> 00:18:41,890
<font color="#E5E5E5">stored and surprisingly this access</font>

283
00:18:37,630 --> 00:18:46,150
token<font color="#E5E5E5"> is also stored if on the observer</font>

284
00:18:41,890 --> 00:18:50,290
<font color="#CCCCCC">if an attacker</font><font color="#E5E5E5"> attaches the access token</font>

285
00:18:46,150 --> 00:18:52,990
<font color="#CCCCCC">in the URL</font><font color="#E5E5E5"> and listen to the RP server</font>

286
00:18:50,290 --> 00:18:55,899
<font color="#E5E5E5">this access token</font><font color="#CCCCCC"> is then stored by the</font>

287
00:18:52,990 --> 00:19:02,580
<font color="#CCCCCC">SDK in the</font><font color="#E5E5E5"> useful authentication data</font>

288
00:18:55,900 --> 00:19:07,380
<font color="#E5E5E5">art so</font><font color="#CCCCCC"> to explore</font><font color="#E5E5E5"> it the</font><font color="#CCCCCC"> disability</font>

289
00:19:02,580 --> 00:19:10,659
attacker just need to<font color="#CCCCCC"> setup</font><font color="#E5E5E5"> a malicious</font>

290
00:19:07,380 --> 00:19:15,910
<font color="#E5E5E5">RP server and the lured the victim to</font>

291
00:19:10,660 --> 00:19:19,300
<font color="#E5E5E5">log in and to catch the victims access</font>

292
00:19:15,910 --> 00:19:23,679
token<font color="#E5E5E5"> and the attacker can then inject</font>

293
00:19:19,300 --> 00:19:28,960
the<font color="#E5E5E5"> victims access token to</font><font color="#CCCCCC"> the RP</font>

294
00:19:23,679 --> 00:19:37,240
server and then<font color="#E5E5E5"> the RP server</font><font color="#CCCCCC"> use this</font>

295
00:19:28,960 --> 00:19:40,870
access<font color="#CCCCCC"> token to request the victims to</font>

296
00:19:37,240 --> 00:19:45,060
obtain the<font color="#CCCCCC"> victims resources hosted</font><font color="#E5E5E5"> or</font>

297
00:19:40,870 --> 00:19:50,030
in IDP<font color="#E5E5E5"> so</font>

298
00:19:45,060 --> 00:19:54,330
the IDP thinks that the current user is

299
00:19:50,030 --> 00:19:56,790
the victim but<font color="#E5E5E5"> the victim are the RP</font>

300
00:19:54,330 --> 00:20:00,689
server thinks that the current user<font color="#E5E5E5"> is</font>

301
00:19:56,790 --> 00:20:04,590
the attacker<font color="#E5E5E5"> so the attacker</font><font color="#CCCCCC"> so after</font>

302
00:20:00,690 --> 00:20:11,960
<font color="#E5E5E5">that the attacker can look in the RP</font>

303
00:20:04,590 --> 00:20:16,740
server as<font color="#CCCCCC"> the victim user so to conclude</font>

304
00:20:11,960 --> 00:20:19,380
using<font color="#CCCCCC"> elevator we conducted a</font>

305
00:20:16,740 --> 00:20:23,670
measurement study and have some new

306
00:20:19,380 --> 00:20:26,460
<font color="#CCCCCC">findings in</font><font color="#E5E5E5"> particular we performed</font><font color="#CCCCCC"> an</font>

307
00:20:23,670 --> 00:20:30,390
<font color="#CCCCCC">in-depth security analysis on</font><font color="#E5E5E5"> ten</font>

308
00:20:26,460 --> 00:20:33,360
popular single sign-on<font color="#E5E5E5"> SDKs</font><font color="#CCCCCC"> we found</font>

309
00:20:30,390 --> 00:20:36,410
seven<font color="#E5E5E5"> types of serious logic for</font>

310
00:20:33,360 --> 00:20:40,669
abilities<font color="#CCCCCC"> for them previously unknown</font>

311
00:20:36,410 --> 00:20:44,780
and you also develop<font color="#CCCCCC"> a tool to discover</font>

312
00:20:40,670 --> 00:20:47,870
vulnerabilities<font color="#E5E5E5"> in multi-party systems</font>

313
00:20:44,780 --> 00:20:50,129
<font color="#CCCCCC">we have some new techniques</font><font color="#E5E5E5"> like</font>

314
00:20:47,870 --> 00:20:54,300
<font color="#E5E5E5">scheduling the request orders and the</font>

315
00:20:50,130 --> 00:20:57,270
coordinates multiple parties and our

316
00:20:54,300 --> 00:21:00,770
<font color="#E5E5E5">technique can also have other usages</font>

317
00:20:57,270 --> 00:21:06,980
<font color="#E5E5E5">like can be used in payment systems in</font>

318
00:21:00,770 --> 00:21:06,980
<font color="#CCCCCC">etcetera and</font><font color="#E5E5E5"> that's it thank you</font>

