1
00:00:10,030 --> 00:00:16,340
hi<font color="#CCCCCC"> I'm e and this is Surya</font><font color="#E5E5E5"> we're here to</font>

2
00:00:13,750 --> 00:00:19,050
talk<font color="#E5E5E5"> about a race</font>

3
00:00:16,340 --> 00:00:23,970
<font color="#E5E5E5">reverse engineering smart contracts on a</font>

4
00:00:19,050 --> 00:00:26,279
<font color="#E5E5E5">theorem so first if</font><font color="#CCCCCC"> um as we know</font><font color="#E5E5E5"> it's</font>

5
00:00:23,970 --> 00:00:30,240
the<font color="#E5E5E5"> second</font><font color="#CCCCCC"> largest block chain based</font>

6
00:00:26,279 --> 00:00:33,180
cryptocurrency<font color="#CCCCCC"> but in addition to</font>

7
00:00:30,240 --> 00:00:36,449
regular accounts on the blockchain<font color="#CCCCCC"> if um</font>

8
00:00:33,180 --> 00:00:38,010
<font color="#E5E5E5">also features smart contracts so smart</font>

9
00:00:36,449 --> 00:00:40,710
contracts are essentially computer

10
00:00:38,010 --> 00:00:42,900
programs<font color="#E5E5E5"> so they can be used for much</font>

11
00:00:40,710 --> 00:00:49,770
more advanced functionalities<font color="#E5E5E5"> other than</font>

12
00:00:42,900 --> 00:00:52,739
simple balance transfer as in<font color="#CCCCCC"> regular</font>

13
00:00:49,770 --> 00:00:58,350
accounts<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example they can be</font><font color="#CCCCCC"> used</font>

14
00:00:52,739 --> 00:01:00,989
<font color="#E5E5E5">for auctioning crowdfunding or even</font>

15
00:00:58,350 --> 00:01:02,879
lottery or<font color="#E5E5E5"> gambling games if</font><font color="#CCCCCC"> you wish</font><font color="#E5E5E5"> so</font>

16
00:01:00,989 --> 00:01:05,039
smart contracts are typically returning

17
00:01:02,879 --> 00:01:07,590
in high-level languages<font color="#CCCCCC"> the</font><font color="#E5E5E5"> most popular</font>

18
00:01:05,039 --> 00:01:09,660
language is solidity<font color="#E5E5E5"> and they are</font>

19
00:01:07,590 --> 00:01:11,310
executed<font color="#E5E5E5"> in a virtualized environment</font>

20
00:01:09,660 --> 00:01:15,509
<font color="#CCCCCC">named that if you're in virtual machine</font>

21
00:01:11,310 --> 00:01:17,670
or<font color="#CCCCCC"> the c vm for short</font><font color="#E5E5E5"> so here we take</font><font color="#CCCCCC"> a</font>

22
00:01:15,509 --> 00:01:20,100
look at example contract<font color="#E5E5E5"> this is a</font>

23
00:01:17,670 --> 00:01:23,939
pretty trivial one<font color="#E5E5E5"> but as we see it's</font>

24
00:01:20,100 --> 00:01:27,089
similar<font color="#CCCCCC"> to a class in other languages it</font>

25
00:01:23,939 --> 00:01:29,850
has<font color="#CCCCCC"> a few some few variables</font><font color="#E5E5E5"> and a few</font>

26
00:01:27,090 --> 00:01:31,650
<font color="#CCCCCC">functions to interact with it well in</font>

27
00:01:29,850 --> 00:01:35,130
this case<font color="#CCCCCC"> I</font><font color="#E5E5E5"> only has one and this will</font>

28
00:01:31,650 --> 00:01:36,720
be our<font color="#CCCCCC"> rending example in our tool</font><font color="#E5E5E5"> so</font>

29
00:01:35,130 --> 00:01:38,908
the problem is the<font color="#E5E5E5"> high level</font>

30
00:01:36,720 --> 00:01:41,039
<font color="#E5E5E5">representation is that</font><font color="#CCCCCC"> the uvm cannot</font>

31
00:01:38,909 --> 00:01:43,490
directly understand it<font color="#E5E5E5"> so instead</font><font color="#CCCCCC"> it</font>

32
00:01:41,040 --> 00:01:45,750
needs to be compiled<font color="#E5E5E5"> into this form and</font>

33
00:01:43,490 --> 00:01:47,669
essentially this is<font color="#E5E5E5"> an encoding of the</font>

34
00:01:45,750 --> 00:01:50,220
<font color="#E5E5E5">EVM by code which are low-level</font>

35
00:01:47,670 --> 00:01:52,950
<font color="#E5E5E5">operations provided by the if you're in</font>

36
00:01:50,220 --> 00:01:55,259
<font color="#E5E5E5">virtual machine so as</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> see the</font>

37
00:01:52,950 --> 00:01:57,869
<font color="#E5E5E5">problem is the</font><font color="#CCCCCC"> bytecode is that it's not</font>

38
00:01:55,259 --> 00:01:59,360
easily<font color="#E5E5E5"> understandable and if the</font>

39
00:01:57,869 --> 00:02:02,280
<font color="#E5E5E5">high-level source code is not</font><font color="#CCCCCC"> available</font>

40
00:01:59,360 --> 00:02:03,360
<font color="#CCCCCC">the contract functionality will appear</font>

41
00:02:02,280 --> 00:02:06,030
to<font color="#E5E5E5"> be opaque to us</font>

42
00:02:03,360 --> 00:02:08,280
and the problem<font color="#E5E5E5"> is opaque or proprietary</font>

43
00:02:06,030 --> 00:02:12,000
contract<font color="#E5E5E5"> is that they are really hard</font><font color="#CCCCCC"> to</font>

44
00:02:08,280 --> 00:02:15,690
understand<font color="#E5E5E5"> or audit to have a better</font>

45
00:02:12,000 --> 00:02:19,110
<font color="#E5E5E5">understanding of the ecosystem we this</font>

46
00:02:15,690 --> 00:02:21,959
amendment<font color="#E5E5E5"> we and our snapshot we</font>

47
00:02:19,110 --> 00:02:24,780
collected<font color="#E5E5E5"> about a million contracts</font>

48
00:02:21,959 --> 00:02:26,519
<font color="#E5E5E5">there are about a million addresses that</font>

49
00:02:24,780 --> 00:02:28,799
contains<font color="#E5E5E5"> the theorem smart contracts</font>

50
00:02:26,519 --> 00:02:29,850
<font color="#E5E5E5">however will if we look at the unique</font>

51
00:02:28,799 --> 00:02:33,240
ones we<font color="#E5E5E5"> only</font>

52
00:02:29,850 --> 00:02:36,079
found at<font color="#CCCCCC"> 34,000 uni contracts and by</font>

53
00:02:33,240 --> 00:02:38,460
unique we mean after swarm hash<font color="#E5E5E5"> removed</font>

54
00:02:36,080 --> 00:02:41,010
so the<font color="#E5E5E5"> second level question will be how</font>

55
00:02:38,460 --> 00:02:43,890
<font color="#CCCCCC">many of these contracts</font><font color="#E5E5E5"> are actually</font><font color="#CCCCCC"> au</font>

56
00:02:41,010 --> 00:02:45,810
<font color="#CCCCCC">papal proprietary so to answer that we</font>

57
00:02:43,890 --> 00:02:48,179
scraped ether scan and collected more

58
00:02:45,810 --> 00:02:51,020
than<font color="#CCCCCC"> 10,000 so the source files and</font>

59
00:02:48,180 --> 00:02:54,360
<font color="#E5E5E5">using certified different versions of</font>

60
00:02:51,020 --> 00:02:56,190
solidity compiler which are the major

61
00:02:54,360 --> 00:03:00,360
compiler versions<font color="#CCCCCC"> available</font>

62
00:02:56,190 --> 00:03:03,480
we ended up compiling 88,000 unique

63
00:03:00,360 --> 00:03:05,760
binaries<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> next step is to take the</font>

64
00:03:03,480 --> 00:03:07,920
<font color="#E5E5E5">intersection of these compiled binaries</font>

65
00:03:05,760 --> 00:03:10,590
which the ones that we<font color="#E5E5E5"> found on the</font>

66
00:03:07,920 --> 00:03:12,899
blockchain<font color="#E5E5E5"> we ended up matching seven</font>

67
00:03:10,590 --> 00:03:16,320
thousand and seven<font color="#CCCCCC"> hundred of the unique</font>

68
00:03:12,900 --> 00:03:19,800
contracts which<font color="#CCCCCC"> gives us the majority is</font>

69
00:03:16,320 --> 00:03:22,709
<font color="#E5E5E5">77% of the contracts without source code</font>

70
00:03:19,800 --> 00:03:25,200
available to<font color="#CCCCCC"> actually study and</font>

71
00:03:22,710 --> 00:03:28,350
understand that<font color="#E5E5E5"> these contracts we built</font>

72
00:03:25,200 --> 00:03:30,540
a race where we<font color="#E5E5E5"> utilize</font><font color="#CCCCCC"> various program</font>

73
00:03:28,350 --> 00:03:33,390
analysis and program<font color="#E5E5E5"> transfer technique</font>

74
00:03:30,540 --> 00:03:36,090
transformation techniques to translate

75
00:03:33,390 --> 00:03:39,750
<font color="#CCCCCC">evn bytecode into more readable</font>

76
00:03:36,090 --> 00:03:42,720
representations so<font color="#CCCCCC"> array process is the</font>

77
00:03:39,750 --> 00:03:45,210
<font color="#CCCCCC">bytecode in five sequential stages</font><font color="#E5E5E5"> first</font>

78
00:03:42,720 --> 00:03:48,480
we recover the control flow graph then

79
00:03:45,210 --> 00:03:51,390
we<font color="#E5E5E5"> lift the stack based operations into</font>

80
00:03:48,480 --> 00:03:53,880
a<font color="#CCCCCC"> register based representation we then</font>

81
00:03:51,390 --> 00:03:56,250
optimize upon the derived representation

82
00:03:53,880 --> 00:03:57,990
and afterwards we<font color="#E5E5E5"> aggregate our</font>

83
00:03:56,250 --> 00:04:01,050
representation<font color="#E5E5E5"> into a more compact</font>

84
00:03:57,990 --> 00:04:03,300
<font color="#E5E5E5">format and eventually we recover the</font>

85
00:04:01,050 --> 00:04:08,070
control flow constructs<font color="#E5E5E5"> from the</font>

86
00:04:03,300 --> 00:04:11,160
contract<font color="#E5E5E5"> so first we recover the control</font>

87
00:04:08,070 --> 00:04:13,500
flow graph this<font color="#E5E5E5"> we start by</font><font color="#CCCCCC"> identifying</font>

88
00:04:11,160 --> 00:04:15,630
the basic block boundaries<font color="#E5E5E5"> this is</font>

89
00:04:13,500 --> 00:04:18,298
hugely assisted by the jump test

90
00:04:15,630 --> 00:04:20,640
instructions<font color="#E5E5E5"> which basically</font><font color="#CCCCCC"> marks the</font>

91
00:04:18,298 --> 00:04:23,099
beginning<font color="#CCCCCC"> of</font><font color="#E5E5E5"> a block then we</font><font color="#CCCCCC"> organize</font>

92
00:04:20,640 --> 00:04:24,900
the blocks into<font color="#E5E5E5"> a control flow graph we</font>

93
00:04:23,100 --> 00:04:27,650
essentially emulate the contract

94
00:04:24,900 --> 00:04:30,150
execution using a simplified<font color="#CCCCCC"> stack model</font>

95
00:04:27,650 --> 00:04:33,090
we explore the contract in the<font color="#CCCCCC"> manner</font>

96
00:04:30,150 --> 00:04:35,489
<font color="#CCCCCC">that is similar</font><font color="#E5E5E5"> to the in DFS we also</font>

97
00:04:33,090 --> 00:04:38,520
record<font color="#E5E5E5"> the stack images at each block</font>

98
00:04:35,490 --> 00:04:42,540
entrance to decide when we should

99
00:04:38,520 --> 00:04:43,590
backtrack<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> algorithm basically</font>

100
00:04:42,540 --> 00:04:45,810
works<font color="#E5E5E5"> like</font>

101
00:04:43,590 --> 00:04:48,299
as follow<font color="#E5E5E5"> we start starting from the</font>

102
00:04:45,810 --> 00:04:51,390
first<font color="#E5E5E5"> block we</font><font color="#CCCCCC"> analyze</font><font color="#E5E5E5"> the basic block</font>

103
00:04:48,300 --> 00:04:53,880
identify its successors<font color="#E5E5E5"> add the</font>

104
00:04:51,390 --> 00:04:56,729
successors<font color="#CCCCCC"> to the confocal graph then</font>

105
00:04:53,880 --> 00:05:00,960
recurse on successor and this is how we

106
00:04:56,730 --> 00:05:03,780
build a CFG so one major problem<font color="#E5E5E5"> is the</font>

107
00:05:00,960 --> 00:05:06,030
EVM<font color="#CCCCCC"> bicode is</font><font color="#E5E5E5"> that the operations are</font>

108
00:05:03,780 --> 00:05:09,630
stack based so which<font color="#E5E5E5"> it makes really</font>

109
00:05:06,030 --> 00:05:12,450
<font color="#E5E5E5">really hard</font><font color="#CCCCCC"> for us to understand a sense</font>

110
00:05:09,630 --> 00:05:14,909
of variables<font color="#E5E5E5"> especially</font><font color="#CCCCCC"> across basic</font>

111
00:05:12,450 --> 00:05:18,000
block<font color="#E5E5E5"> boundaries</font><font color="#CCCCCC"> so to address</font><font color="#E5E5E5"> that</font>

112
00:05:14,910 --> 00:05:20,940
problem<font color="#CCCCCC"> we convert the representation</font>

113
00:05:18,000 --> 00:05:23,430
<font color="#CCCCCC">into a register based representation we</font>

114
00:05:20,940 --> 00:05:27,180
start by mapping<font color="#CCCCCC"> the stack slots into</font>

115
00:05:23,430 --> 00:05:30,270
<font color="#E5E5E5">registers</font><font color="#CCCCCC"> evm stack is</font><font color="#E5E5E5"> specified to</font><font color="#CCCCCC"> have</font>

116
00:05:27,180 --> 00:05:35,340
a maximum<font color="#CCCCCC"> size of 1024</font><font color="#E5E5E5"> so we introduced</font>

117
00:05:30,270 --> 00:05:37,710
1024 registers accordingly<font color="#CCCCCC"> then the next</font>

118
00:05:35,340 --> 00:05:40,500
step<font color="#E5E5E5"> is to assign appropriate registers</font>

119
00:05:37,710 --> 00:05:42,750
for each of the<font color="#CCCCCC"> byte</font><font color="#E5E5E5"> code here we show</font>

120
00:05:40,500 --> 00:05:44,880
an example<font color="#E5E5E5"> of an</font><font color="#CCCCCC"> add operation</font>

121
00:05:42,750 --> 00:05:47,910
so in the<font color="#E5E5E5"> current configuration the</font>

122
00:05:44,880 --> 00:05:50,430
stack height is 3 so the<font color="#E5E5E5"> operation will</font>

123
00:05:47,910 --> 00:05:53,070
pop<font color="#CCCCCC"> two items of the stack add them</font><font color="#E5E5E5"> up</font>

124
00:05:50,430 --> 00:05:55,980
<font color="#E5E5E5">and push</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> value back up so this is</font>

125
00:05:53,070 --> 00:05:59,400
<font color="#CCCCCC">equivalent of reading register</font><font color="#E5E5E5"> s1 s2 and</font>

126
00:05:55,980 --> 00:06:03,780
put add them up<font color="#E5E5E5"> and the value back into</font>

127
00:05:59,400 --> 00:06:06,570
s1 the same method could<font color="#E5E5E5"> be applied to</font>

128
00:06:03,780 --> 00:06:08,429
basic blocks as<font color="#CCCCCC"> well as long</font><font color="#E5E5E5"> as we know</font>

129
00:06:06,570 --> 00:06:11,640
<font color="#E5E5E5">the stack height at</font><font color="#CCCCCC"> the at the block</font>

130
00:06:08,430 --> 00:06:14,070
entrance<font color="#CCCCCC"> as we</font><font color="#E5E5E5"> mentioned</font><font color="#CCCCCC"> previously we</font>

131
00:06:11,640 --> 00:06:16,320
collected stack images add to each block

132
00:06:14,070 --> 00:06:18,900
entrance<font color="#E5E5E5"> which makes this information</font>

133
00:06:16,320 --> 00:06:23,280
readily<font color="#E5E5E5"> available and here we showed an</font>

134
00:06:18,900 --> 00:06:25,739
example<font color="#E5E5E5"> of a block being lifted another</font>

135
00:06:23,280 --> 00:06:28,289
problem was the<font color="#CCCCCC"> EVM by code is</font><font color="#E5E5E5"> that the</font>

136
00:06:25,740 --> 00:06:30,180
operations are relatively<font color="#CCCCCC"> low-level so</font>

137
00:06:28,290 --> 00:06:32,820
we<font color="#E5E5E5"> introduced some new instructions</font>

138
00:06:30,180 --> 00:06:35,220
<font color="#CCCCCC">that's slightly</font><font color="#E5E5E5"> higher level so</font><font color="#CCCCCC"> that the</font>

139
00:06:32,820 --> 00:06:38,670
output<font color="#CCCCCC"> is more concise these include for</font>

140
00:06:35,220 --> 00:06:42,030
<font color="#CCCCCC">example</font><font color="#E5E5E5"> ain't</font><font color="#CCCCCC"> call in</font><font color="#E5E5E5"> threat which</font><font color="#CCCCCC"> calls</font>

141
00:06:38,670 --> 00:06:44,850
<font color="#E5E5E5">and returns from internal functions and</font>

142
00:06:42,030 --> 00:06:47,429
move which moves<font color="#CCCCCC"> a constant value or</font>

143
00:06:44,850 --> 00:06:49,080
register value to another<font color="#CCCCCC"> register as</font>

144
00:06:47,430 --> 00:06:52,140
<font color="#CCCCCC">earth which is just like in high-level</font>

145
00:06:49,080 --> 00:06:54,090
<font color="#E5E5E5">languages</font><font color="#CCCCCC"> versus condition not equal or</font>

146
00:06:52,140 --> 00:06:55,139
<font color="#E5E5E5">greater than</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> equal less than we call</font>

147
00:06:54,090 --> 00:06:57,210
shift

148
00:06:55,139 --> 00:06:59,099
left<font color="#E5E5E5"> shift right these</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> the</font>

149
00:06:57,210 --> 00:07:01,859
<font color="#E5E5E5">operations are commonly</font><font color="#CCCCCC"> using the</font>

150
00:06:59,099 --> 00:07:07,710
contracts<font color="#E5E5E5"> but not directly</font><font color="#CCCCCC"> available on</font>

151
00:07:01,860 --> 00:07:09,749
the<font color="#CCCCCC"> Bichel level so in the next step we</font>

152
00:07:07,710 --> 00:07:11,818
<font color="#E5E5E5">open we notice that there are a lot</font><font color="#CCCCCC"> of</font>

153
00:07:09,749 --> 00:07:14,520
redundancies<font color="#E5E5E5"> in our lifted</font>

154
00:07:11,819 --> 00:07:17,400
representation this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> mainly due to</font><font color="#E5E5E5"> the</font>

155
00:07:14,520 --> 00:07:20,279
stack operations<font color="#CCCCCC"> tends</font><font color="#E5E5E5"> to move data</font>

156
00:07:17,400 --> 00:07:22,620
around a lot<font color="#E5E5E5"> so to remove the</font>

157
00:07:20,279 --> 00:07:26,669
redundancies<font color="#E5E5E5"> added by these moving</font>

158
00:07:22,620 --> 00:07:29,729
instructions we use common<font color="#E5E5E5"> global</font>

159
00:07:26,669 --> 00:07:32,099
optimizations<font color="#CCCCCC"> mainly data fold which</font>

160
00:07:29,729 --> 00:07:35,758
includes constant propagation<font color="#CCCCCC"> copy</font>

161
00:07:32,099 --> 00:07:38,520
propagation<font color="#CCCCCC"> dead code elimination we</font>

162
00:07:35,759 --> 00:07:41,189
also<font color="#E5E5E5"> introduced implement some local</font>

163
00:07:38,520 --> 00:07:43,650
optimizations that's customized<font color="#E5E5E5"> for</font>

164
00:07:41,189 --> 00:07:46,279
example in this case<font color="#CCCCCC"> of LTI</font><font color="#E5E5E5"> easier is</font>

165
00:07:43,650 --> 00:07:48,750
<font color="#CCCCCC">zero could</font><font color="#E5E5E5"> be rewritten into</font><font color="#CCCCCC"> geq</font><font color="#E5E5E5"> and</font>

166
00:07:46,279 --> 00:07:52,379
eventually<font color="#E5E5E5"> this block could be optimized</font>

167
00:07:48,750 --> 00:07:55,699
<font color="#E5E5E5">into just three instructions to further</font>

168
00:07:52,379 --> 00:07:58,949
- further condense our output<font color="#E5E5E5"> we</font>

169
00:07:55,699 --> 00:08:01,889
<font color="#CCCCCC">aggregate our representation</font><font color="#E5E5E5"> into an</font>

170
00:07:58,949 --> 00:08:03,449
<font color="#E5E5E5">internet set expressions</font><font color="#CCCCCC"> so we start by</font>

171
00:08:01,889 --> 00:08:06,000
<font color="#CCCCCC">converting the register</font><font color="#E5E5E5"> based</font>

172
00:08:03,449 --> 00:08:09,300
instructions<font color="#E5E5E5"> into their address form</font>

173
00:08:06,000 --> 00:08:11,219
<font color="#E5E5E5">this is merely cosmetic then based on</font>

174
00:08:09,300 --> 00:08:13,139
the usages of<font color="#E5E5E5"> definitions of the</font>

175
00:08:11,219 --> 00:08:15,449
registers we can aggregate<font color="#E5E5E5"> these</font>

176
00:08:13,139 --> 00:08:17,129
instructions<font color="#E5E5E5"> so the first one could be</font>

177
00:08:15,449 --> 00:08:19,439
aggregated<font color="#E5E5E5"> and it deserves a second one</font>

178
00:08:17,129 --> 00:08:21,509
and could<font color="#E5E5E5"> be further aggregated into</font><font color="#CCCCCC"> the</font>

179
00:08:19,439 --> 00:08:24,659
<font color="#CCCCCC">shared one and eventually the whole</font>

180
00:08:21,509 --> 00:08:29,339
block<font color="#CCCCCC"> could be summarized</font><font color="#E5E5E5"> with only one</font>

181
00:08:24,659 --> 00:08:31,379
expression so having improved<font color="#E5E5E5"> the</font>

182
00:08:29,339 --> 00:08:33,779
representations in each individual block

183
00:08:31,379 --> 00:08:36,750
we tackled the overall control<font color="#E5E5E5"> flow</font>

184
00:08:33,779 --> 00:08:39,809
structure<font color="#CCCCCC"> we start by separating the</font>

185
00:08:36,750 --> 00:08:41,729
public<font color="#E5E5E5"> functions within a contract</font><font color="#CCCCCC"> so as</font>

186
00:08:39,809 --> 00:08:44,369
we mentioned<font color="#CCCCCC"> previously a contract</font>

187
00:08:41,729 --> 00:08:46,860
typically consists<font color="#E5E5E5"> of multiple functions</font>

188
00:08:44,370 --> 00:08:50,130
<font color="#E5E5E5">and here we untangle their control flow</font>

189
00:08:46,860 --> 00:08:53,220
graph<font color="#E5E5E5"> then we apply structural analysis</font>

190
00:08:50,130 --> 00:08:56,699
on the individual control flow graphs<font color="#CCCCCC"> to</font>

191
00:08:53,220 --> 00:08:59,519
recover the control flow constructs<font color="#E5E5E5"> such</font>

192
00:08:56,699 --> 00:09:03,000
as while and if then else<font color="#E5E5E5"> in this</font>

193
00:08:59,519 --> 00:09:05,170
example we could first collapse<font color="#E5E5E5"> the if</font>

194
00:09:03,000 --> 00:09:08,230
then else then

195
00:09:05,170 --> 00:09:12,310
<font color="#E5E5E5">these two</font><font color="#CCCCCC"> sequences</font><font color="#E5E5E5"> and eventually we</font>

196
00:09:08,230 --> 00:09:14,290
can match<font color="#E5E5E5"> the loop and finally</font><font color="#CCCCCC"> the whole</font>

197
00:09:12,310 --> 00:09:18,010
thing could be collapsed into<font color="#CCCCCC"> a single</font>

198
00:09:14,290 --> 00:09:21,040
<font color="#CCCCCC">block</font><font color="#E5E5E5"> and here we have the final output</font>

199
00:09:18,010 --> 00:09:23,319
<font color="#CCCCCC">of erased</font><font color="#E5E5E5"> having done the</font>

200
00:09:21,040 --> 00:09:27,430
transformations we will like<font color="#CCCCCC"> to validate</font>

201
00:09:23,320 --> 00:09:30,310
that<font color="#CCCCCC"> our output is correct to do so we</font>

202
00:09:27,430 --> 00:09:33,069
construct<font color="#E5E5E5"> a test case or a set of test</font>

203
00:09:30,310 --> 00:09:36,040
cases<font color="#E5E5E5"> using historical transactions</font><font color="#CCCCCC"> and</font>

204
00:09:33,070 --> 00:09:38,110
the idea is<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> leverage GAF the</font>

205
00:09:36,040 --> 00:09:41,430
goal implementation of<font color="#E5E5E5"> the etherion</font>

206
00:09:38,110 --> 00:09:43,930
client to<font color="#E5E5E5"> replay these transactions and</font>

207
00:09:41,430 --> 00:09:46,229
generate the expected output of these

208
00:09:43,930 --> 00:09:49,420
transactions<font color="#E5E5E5"> then we execute our</font>

209
00:09:46,230 --> 00:09:52,149
representation<font color="#CCCCCC"> in an interpreter that we</font>

210
00:09:49,420 --> 00:09:56,229
wrote and compare if if there is any

211
00:09:52,149 --> 00:09:58,329
<font color="#CCCCCC">discrepancy between</font><font color="#E5E5E5"> the output so we</font>

212
00:09:56,230 --> 00:10:00,459
<font color="#E5E5E5">ended up collecting a little bit less</font>

213
00:09:58,329 --> 00:10:02,469
than<font color="#E5E5E5"> 16,000 transactions</font>

214
00:10:00,459 --> 00:10:05,079
these are these transactions are

215
00:10:02,470 --> 00:10:08,740
<font color="#E5E5E5">collected on the basis of one per unique</font>

216
00:10:05,079 --> 00:10:11,469
contract<font color="#CCCCCC"> and this is less now half</font><font color="#E5E5E5"> of</font>

217
00:10:08,740 --> 00:10:13,120
<font color="#E5E5E5">the</font><font color="#CCCCCC"> unique contracts because</font><font color="#E5E5E5"> apparently</font>

218
00:10:11,470 --> 00:10:16,120
more<font color="#CCCCCC"> than half of them never got any</font>

219
00:10:13,120 --> 00:10:19,000
public transactions into<font color="#E5E5E5"> them</font><font color="#CCCCCC"> we are</font>

220
00:10:16,120 --> 00:10:21,550
successful<font color="#E5E5E5"> in most cases but we do fail</font>

221
00:10:19,000 --> 00:10:23,920
<font color="#CCCCCC">3% of them in which a construction</font>

222
00:10:21,550 --> 00:10:26,050
failure is a case<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we fail to</font>

223
00:10:23,920 --> 00:10:29,290
<font color="#CCCCCC">generate</font><font color="#E5E5E5"> any output</font><font color="#CCCCCC"> in the first place</font>

224
00:10:26,050 --> 00:10:31,839
<font color="#E5E5E5">and the comparison failure is the case</font>

225
00:10:29,290 --> 00:10:36,670
in which<font color="#CCCCCC"> our output</font><font color="#E5E5E5"> does not match</font>

226
00:10:31,839 --> 00:10:39,040
<font color="#E5E5E5">exactly was the one generated I guess so</font>

227
00:10:36,670 --> 00:10:41,890
now we will<font color="#E5E5E5"> have</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> we get to describe</font>

228
00:10:39,040 --> 00:10:44,410
several use cases<font color="#CCCCCC"> all right thank you</font>

229
00:10:41,890 --> 00:10:46,089
so so<font color="#E5E5E5"> basically now that we have this</font>

230
00:10:44,410 --> 00:10:48,010
tool we wanted to demonstrate<font color="#E5E5E5"> its</font>

231
00:10:46,089 --> 00:10:49,870
utility through a bunch<font color="#E5E5E5"> of use cases so</font>

232
00:10:48,010 --> 00:10:51,430
the first thing we looked at<font color="#E5E5E5"> is thing</font>

233
00:10:49,870 --> 00:10:53,380
<font color="#E5E5E5">called a fuzzy hash so fuzzy hash</font>

234
00:10:51,430 --> 00:10:55,089
descent<font color="#E5E5E5"> is essentially over a function</font>

235
00:10:53,380 --> 00:10:57,130
you can<font color="#E5E5E5"> calculate the hash over all the</font>

236
00:10:55,089 --> 00:10:59,350
basic blocks<font color="#CCCCCC"> and function and compute a</font>

237
00:10:57,130 --> 00:11:01,420
hash so these are fuzzy hashes<font color="#E5E5E5"> for</font>

238
00:10:59,350 --> 00:11:03,339
example these random functions<font color="#E5E5E5"> ABC but</font>

239
00:11:01,420 --> 00:11:05,290
<font color="#E5E5E5">now that once you have these</font><font color="#CCCCCC"> hashes</font><font color="#E5E5E5"> you</font>

240
00:11:03,339 --> 00:11:06,910
can find similar<font color="#E5E5E5"> instances of these in</font>

241
00:11:05,290 --> 00:11:08,560
other contracts where you might not<font color="#E5E5E5"> know</font>

242
00:11:06,910 --> 00:11:10,719
the actual functionality<font color="#E5E5E5"> so you can</font>

243
00:11:08,560 --> 00:11:12,189
<font color="#CCCCCC">imagine if you</font><font color="#E5E5E5"> have a contract binary X</font>

244
00:11:10,720 --> 00:11:13,660
whose functionality<font color="#CCCCCC"> you</font><font color="#E5E5E5"> already</font>

245
00:11:12,190 --> 00:11:15,339
understand now you can find<font color="#E5E5E5"> more</font>

246
00:11:13,660 --> 00:11:17,469
instances<font color="#E5E5E5"> of the code occurring in other</font>

247
00:11:15,339 --> 00:11:18,440
contracts to kind of see where code is

248
00:11:17,470 --> 00:11:19,880
reused

249
00:11:18,440 --> 00:11:23,720
you can understand other contracts just

250
00:11:19,880 --> 00:11:26,540
<font color="#E5E5E5">through this methodology so we</font><font color="#CCCCCC"> also they</font>

251
00:11:23,720 --> 00:11:29,750
actually used this<font color="#CCCCCC"> two-person Janee ran</font>

252
00:11:26,540 --> 00:11:32,900
<font color="#CCCCCC">a few contracts</font><font color="#E5E5E5"> and interesting you</font><font color="#CCCCCC"> know</font>

253
00:11:29,750 --> 00:11:35,870
blockchain phenomenon<font color="#E5E5E5"> happening at the</font>

254
00:11:32,900 --> 00:11:36,949
time so the so the<font color="#CCCCCC"> so basically the</font>

255
00:11:35,870 --> 00:11:38,510
<font color="#CCCCCC">first thing we looked at were low pay</font>

256
00:11:36,950 --> 00:11:40,460
contracts that we<font color="#E5E5E5"> found that had really</font>

257
00:11:38,510 --> 00:11:42,230
<font color="#CCCCCC">large ether bound</font><font color="#E5E5E5"> right so the we</font>

258
00:11:40,460 --> 00:11:44,720
<font color="#E5E5E5">actually found three contracts that are</font>

259
00:11:42,230 --> 00:11:47,030
all used<font color="#CCCCCC"> by this theorem</font><font color="#E5E5E5"> exchanged by an</font>

260
00:11:44,720 --> 00:11:48,950
exchange<font color="#E5E5E5"> called</font><font color="#CCCCCC"> Gemini on a theorem</font><font color="#E5E5E5"> and</font>

261
00:11:47,030 --> 00:11:50,839
they hold the hell<font color="#CCCCCC"> two combined 590</font>

262
00:11:48,950 --> 00:11:52,190
million<font color="#E5E5E5"> dollars</font><font color="#CCCCCC"> this car these contracts</font>

263
00:11:50,840 --> 00:11:53,690
<font color="#E5E5E5">were actually</font><font color="#CCCCCC"> multi-sig</font><font color="#E5E5E5"> wallets if you</font>

264
00:11:52,190 --> 00:11:55,850
don't know what a multi-sig is that's

265
00:11:53,690 --> 00:11:57,050
<font color="#E5E5E5">basically a signature scheme where for</font>

266
00:11:55,850 --> 00:11:59,480
example<font color="#CCCCCC"> if i want to authorize the</font>

267
00:11:57,050 --> 00:12:02,300
transfer or validate or withdraw I need

268
00:11:59,480 --> 00:12:05,860
some subset of authorized signatures<font color="#E5E5E5"> in</font>

269
00:12:02,300 --> 00:12:07,670
<font color="#E5E5E5">order to make it happen</font><font color="#CCCCCC"> so two</font><font color="#E5E5E5"> of them</font>

270
00:12:05,860 --> 00:12:09,440
so two of the three<font color="#E5E5E5"> that we found</font>

271
00:12:07,670 --> 00:12:11,390
implemented a pretty standard<font color="#CCCCCC"> two event</font>

272
00:12:09,440 --> 00:12:12,740
<font color="#CCCCCC">multi sig</font><font color="#E5E5E5"> signature scheme but the last</font>

273
00:12:11,390 --> 00:12:14,900
<font color="#E5E5E5">one they found actually had a pretty</font>

274
00:12:12,740 --> 00:12:16,100
<font color="#CCCCCC">interesting</font><font color="#E5E5E5"> more complex</font><font color="#CCCCCC"> time-dependent</font>

275
00:12:14,900 --> 00:12:18,020
scheme<font color="#CCCCCC"> so the first thing we</font><font color="#E5E5E5"> found</font>

276
00:12:16,100 --> 00:12:19,700
<font color="#E5E5E5">actually from me running you</font><font color="#CCCCCC"> guys on it</font>

277
00:12:18,020 --> 00:12:20,990
and if you<font color="#E5E5E5"> see there's an instance of</font>

278
00:12:19,700 --> 00:12:23,900
this global<font color="#E5E5E5"> variable</font><font color="#CCCCCC"> called</font><font color="#E5E5E5"> block</font>

279
00:12:20,990 --> 00:12:25,430
<font color="#CCCCCC">timestamp</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> the use of block timestamp</font>

280
00:12:23,900 --> 00:12:27,170
instruction<font color="#E5E5E5"> anywhere in the color is</font>

281
00:12:25,430 --> 00:12:29,870
considered<font color="#E5E5E5"> what's called a code smell</font>

282
00:12:27,170 --> 00:12:32,209
because it's generally<font color="#E5E5E5"> is generally</font>

283
00:12:29,870 --> 00:12:34,670
unreliable and can be<font color="#E5E5E5"> skewed by minors</font>

284
00:12:32,210 --> 00:12:36,500
in the theorem right so seems blocked

285
00:12:34,670 --> 00:12:38,449
Einstein we chose to reverse<font color="#CCCCCC"> engineer</font>

286
00:12:36,500 --> 00:12:40,220
and<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of see</font><font color="#E5E5E5"> how the block</font><font color="#CCCCCC"> timestamp</font>

287
00:12:38,450 --> 00:12:41,960
is used in the withdrawal policy<font color="#E5E5E5"> so we</font>

288
00:12:40,220 --> 00:12:44,120
<font color="#E5E5E5">were</font><font color="#CCCCCC"> able to figure</font><font color="#E5E5E5"> out how it's used</font>

289
00:12:41,960 --> 00:12:47,330
<font color="#E5E5E5">exactly with child policy</font><font color="#CCCCCC"> and you know</font>

290
00:12:44,120 --> 00:12:49,130
this actually<font color="#E5E5E5"> shows how useful</font><font color="#CCCCCC"> how</font>

291
00:12:47,330 --> 00:12:50,750
<font color="#CCCCCC">useful yours is in this example for</font>

292
00:12:49,130 --> 00:12:53,410
being able<font color="#E5E5E5"> to audit such code such</font>

293
00:12:50,750 --> 00:12:55,610
critical code where you know<font color="#E5E5E5"> we see</font>

294
00:12:53,410 --> 00:12:58,010
instances of things<font color="#E5E5E5"> like lot of times</font>

295
00:12:55,610 --> 00:12:59,900
they<font color="#E5E5E5"> have</font><font color="#CCCCCC"> poor other code smells next we</font>

296
00:12:58,010 --> 00:13:02,480
<font color="#CCCCCC">also looked at opaque contracts that</font>

297
00:12:59,900 --> 00:13:04,939
were actually occurred them most often

298
00:13:02,480 --> 00:13:06,800
right<font color="#E5E5E5"> so we saw in the previous slides</font>

299
00:13:04,940 --> 00:13:08,330
that even though there's a<font color="#E5E5E5"> million</font>

300
00:13:06,800 --> 00:13:10,040
contracts deployed we only have about

301
00:13:08,330 --> 00:13:11,690
<font color="#E5E5E5">thirty</font><font color="#CCCCCC"> four thousand unique contracts so</font>

302
00:13:10,040 --> 00:13:13,010
we<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> found that about we had</font>

303
00:13:11,690 --> 00:13:16,160
hundreds of thousands of<font color="#E5E5E5"> those contracts</font>

304
00:13:13,010 --> 00:13:18,920
or actually the instance is the same two

305
00:13:16,160 --> 00:13:20,660
contracts so for the investigation we

306
00:13:18,920 --> 00:13:21,620
<font color="#E5E5E5">saw we found that the two exchanges</font>

307
00:13:20,660 --> 00:13:23,240
<font color="#E5E5E5">polonius and eunb</font>

308
00:13:21,620 --> 00:13:25,580
were actually one<font color="#E5E5E5"> responsible for</font>

309
00:13:23,240 --> 00:13:27,740
deploying<font color="#E5E5E5"> all these contracts and we use</font>

310
00:13:25,580 --> 00:13:29,630
<font color="#E5E5E5">arrays and</font><font color="#CCCCCC"> reverse-engineer</font><font color="#E5E5E5"> them up to</font>

311
00:13:27,740 --> 00:13:31,040
<font color="#CCCCCC">up to</font><font color="#E5E5E5"> solidity</font><font color="#CCCCCC"> and we could actually</font><font color="#E5E5E5"> see</font>

312
00:13:29,630 --> 00:13:32,010
<font color="#CCCCCC">that</font><font color="#E5E5E5"> they're just simple</font><font color="#CCCCCC"> wallets for</font>

313
00:13:31,040 --> 00:13:35,490
years<font color="#CCCCCC"> a twenty</font>

314
00:13:32,010 --> 00:13:36,569
but nonetheless this kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> it's kind</font>

315
00:13:35,490 --> 00:13:39,240
of<font color="#CCCCCC"> answer the question that was raised</font>

316
00:13:36,570 --> 00:13:41,160
<font color="#E5E5E5">by our</font><font color="#CCCCCC"> initial measurement of</font><font color="#E5E5E5"> seeing</font>

317
00:13:39,240 --> 00:13:42,660
<font color="#E5E5E5">exactly where these contracts are</font><font color="#CCCCCC"> coming</font>

318
00:13:41,160 --> 00:13:45,439
<font color="#E5E5E5">from why there's so many</font><font color="#CCCCCC"> duplicates and</font>

319
00:13:42,660 --> 00:13:49,469
exactly what and how are they operating

320
00:13:45,440 --> 00:13:51,960
next we also<font color="#E5E5E5"> looked at D but I'm not a</font>

321
00:13:49,470 --> 00:13:54,690
phenomenon<font color="#CCCCCC"> called arbitrage</font><font color="#E5E5E5"> iron theorem</font>

322
00:13:51,960 --> 00:13:56,490
so such an<font color="#CCCCCC"> anathema</font><font color="#E5E5E5"> there's a lot of</font>

323
00:13:54,690 --> 00:13:59,280
decentralized<font color="#E5E5E5"> exchanges also known as</font>

324
00:13:56,490 --> 00:14:00,960
the decks<font color="#CCCCCC"> a</font><font color="#E5E5E5"> Dax is basically a exchange</font>

325
00:13:59,280 --> 00:14:02,670
<font color="#E5E5E5">where all the</font><font color="#CCCCCC"> trays and</font><font color="#E5E5E5"> orders</font><font color="#CCCCCC"> are</font>

326
00:14:00,960 --> 00:14:05,850
entirely controlled<font color="#E5E5E5"> by a smart</font><font color="#CCCCCC"> contract</font>

327
00:14:02,670 --> 00:14:08,040
<font color="#E5E5E5">so an example of a texana theorem is</font>

328
00:14:05,850 --> 00:14:10,650
ether<font color="#E5E5E5"> delta and we actually saw evidence</font>

329
00:14:08,040 --> 00:14:13,530
of arbitrage or behavior so if you look

330
00:14:10,650 --> 00:14:15,569
at the<font color="#CCCCCC"> dining up on the right you see</font>

331
00:14:13,530 --> 00:14:17,250
<font color="#CCCCCC">that the top is the cells the bottom of</font>

332
00:14:15,570 --> 00:14:19,020
the buys and you see<font color="#E5E5E5"> this price mismatch</font>

333
00:14:17,250 --> 00:14:21,240
where the<font color="#E5E5E5"> lowest price for</font><font color="#CCCCCC"> the cell is</font>

334
00:14:19,020 --> 00:14:23,220
higher than the highest highest price

335
00:14:21,240 --> 00:14:26,190
for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> buy so we can see that the</font>

336
00:14:23,220 --> 00:14:28,080
traders taking advantage of of of an

337
00:14:26,190 --> 00:14:30,540
opportunity<font color="#E5E5E5"> can make an instant profit</font>

338
00:14:28,080 --> 00:14:32,580
<font color="#E5E5E5">however the important key factor</font><font color="#CCCCCC"> here is</font>

339
00:14:30,540 --> 00:14:34,230
that<font color="#E5E5E5"> both trades</font><font color="#CCCCCC"> after 6:00 have to</font>

340
00:14:32,580 --> 00:14:37,020
execute<font color="#E5E5E5"> successfully</font><font color="#CCCCCC"> and so we expect</font>

341
00:14:34,230 --> 00:14:38,820
<font color="#CCCCCC">that</font><font color="#E5E5E5"> traders would would</font><font color="#CCCCCC"> be required to</font>

342
00:14:37,020 --> 00:14:40,620
<font color="#CCCCCC">create some sort of gadget or some sort</font>

343
00:14:38,820 --> 00:14:43,950
of gadget contract<font color="#E5E5E5"> to implement these</font>

344
00:14:40,620 --> 00:14:46,790
two trades and that's exactly what we

345
00:14:43,950 --> 00:14:49,350
find where we<font color="#E5E5E5"> see that these these</font>

346
00:14:46,790 --> 00:14:51,390
arbitrage<font color="#CCCCCC"> does actually</font><font color="#E5E5E5"> have a gadget</font>

347
00:14:49,350 --> 00:14:54,690
contract they all have to implement well

348
00:14:51,390 --> 00:14:57,180
you'll have<font color="#E5E5E5"> to like implement one and</font>

349
00:14:54,690 --> 00:14:58,800
essentially the implementation is<font color="#E5E5E5"> it's</font>

350
00:14:57,180 --> 00:15:00,719
relatively<font color="#E5E5E5"> straightforward they do a lot</font>

351
00:14:58,800 --> 00:15:02,339
<font color="#CCCCCC">of validation</font><font color="#E5E5E5"> they do a lot</font><font color="#CCCCCC"> of check on</font>

352
00:15:00,720 --> 00:15:03,930
trades because<font color="#E5E5E5"> we want just emitter</font>

353
00:15:02,340 --> 00:15:05,760
transaction you don't really<font color="#E5E5E5"> know when</font>

354
00:15:03,930 --> 00:15:07,290
<font color="#E5E5E5">the trade is going to get executed on</font>

355
00:15:05,760 --> 00:15:09,600
<font color="#CCCCCC">the chain and</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> even so there's</font>

356
00:15:07,290 --> 00:15:11,819
actually a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> heavy</font><font color="#CCCCCC"> invalidation</font>

357
00:15:09,600 --> 00:15:14,010
actually heavy validation and they

358
00:15:11,820 --> 00:15:16,260
<font color="#E5E5E5">actually cost a lot of gas as well and</font>

359
00:15:14,010 --> 00:15:18,240
we finally found<font color="#E5E5E5"> that they implement</font>

360
00:15:16,260 --> 00:15:20,100
these atomic batch<font color="#E5E5E5"> trades and exactly</font>

361
00:15:18,240 --> 00:15:22,410
<font color="#E5E5E5">how they implement them kind of changes</font>

362
00:15:20,100 --> 00:15:24,540
from contract to contract but by and

363
00:15:22,410 --> 00:15:26,730
large they take advantage<font color="#CCCCCC"> of this EVM</font>

364
00:15:24,540 --> 00:15:28,380
<font color="#E5E5E5">hop called called revert meaning if any</font>

365
00:15:26,730 --> 00:15:30,300
of the trades fail they can undo all

366
00:15:28,380 --> 00:15:32,520
state changes in the transaction all

367
00:15:30,300 --> 00:15:35,939
contract<font color="#CCCCCC"> state changes are averted</font><font color="#E5E5E5"> and</font>

368
00:15:32,520 --> 00:15:38,340
<font color="#CCCCCC">the transaction</font><font color="#E5E5E5"> ends execution so</font>

369
00:15:35,940 --> 00:15:40,650
finally we also looked<font color="#E5E5E5"> at the game at</font>

370
00:15:38,340 --> 00:15:43,500
the time called<font color="#E5E5E5"> crypto</font><font color="#CCCCCC"> kitties so</font><font color="#E5E5E5"> this</font>

371
00:15:40,650 --> 00:15:44,279
is essentially<font color="#E5E5E5"> a trading game trading</font>

372
00:15:43,500 --> 00:15:46,050
game where

373
00:15:44,279 --> 00:15:48,029
there are cats<font color="#CCCCCC"> left some</font><font color="#E5E5E5"> sort of you</font>

374
00:15:46,050 --> 00:15:51,258
know<font color="#E5E5E5"> cute looking does</font><font color="#CCCCCC"> it glad</font><font color="#E5E5E5"> tributes</font>

375
00:15:48,029 --> 00:15:55,019
also<font color="#E5E5E5"> also called</font><font color="#CCCCCC"> cat tributes</font><font color="#E5E5E5"> where</font>

376
00:15:51,259 --> 00:15:56,249
where everyone can can<font color="#E5E5E5"> hit a cat and</font>

377
00:15:55,019 --> 00:15:58,620
trade them and have them up for<font color="#E5E5E5"> auction</font>

378
00:15:56,249 --> 00:16:00,360
<font color="#E5E5E5">right so we can</font><font color="#CCCCCC"> see here is that</font><font color="#E5E5E5"> some</font>

379
00:15:58,620 --> 00:16:02,220
cats have been<font color="#E5E5E5"> up</font><font color="#CCCCCC"> up for auction at the</font>

380
00:16:00,360 --> 00:16:04,110
time for<font color="#E5E5E5"> about</font><font color="#CCCCCC"> a hundred</font><font color="#E5E5E5"> you know two</font>

381
00:16:02,220 --> 00:16:08,490
<font color="#E5E5E5">hundred</font><font color="#CCCCCC"> eight some for 350th which at</font>

382
00:16:04,110 --> 00:16:10,290
the time<font color="#E5E5E5"> it's around $160,000 that these</font>

383
00:16:08,490 --> 00:16:12,930
are only<font color="#E5E5E5"> actually you know cats up for</font>

384
00:16:10,290 --> 00:16:14,969
sale<font color="#CCCCCC"> although although</font><font color="#E5E5E5"> we have seen cats</font>

385
00:16:12,930 --> 00:16:17,189
sold for around<font color="#CCCCCC"> sixty thousand dollars</font>

386
00:16:14,970 --> 00:16:20,009
at times so it's you know this is this

387
00:16:17,189 --> 00:16:23,040
is quite a large large and important

388
00:16:20,009 --> 00:16:25,740
game on the network<font color="#E5E5E5"> size you'd expect</font>

389
00:16:23,040 --> 00:16:28,589
you know<font color="#E5E5E5"> almost all the code is publicly</font>

390
00:16:25,740 --> 00:16:29,819
sourced<font color="#E5E5E5"> you can see exactly how the</font>

391
00:16:28,589 --> 00:16:33,050
options<font color="#E5E5E5"> work how</font><font color="#CCCCCC"> they try the game</font>

392
00:16:29,819 --> 00:16:35,550
mechanisms<font color="#E5E5E5"> work however there's one</font>

393
00:16:33,050 --> 00:16:37,469
extremely crucial<font color="#E5E5E5"> code code piece that</font>

394
00:16:35,550 --> 00:16:39,508
has kept intentionally opaque<font color="#E5E5E5"> right you</font>

395
00:16:37,470 --> 00:16:42,569
can see they've called it a<font color="#E5E5E5"> super-secret</font>

396
00:16:39,509 --> 00:16:46,199
gene algorithm and so this<font color="#CCCCCC"> algorithm can</font>

397
00:16:42,569 --> 00:16:47,819
<font color="#E5E5E5">combine</font><font color="#CCCCCC"> to cats whose genes are already</font>

398
00:16:46,199 --> 00:16:50,459
known and after<font color="#E5E5E5"> you create a new cat</font>

399
00:16:47,819 --> 00:16:52,589
<font color="#E5E5E5">whose genes are somewhat randomized and</font>

400
00:16:50,459 --> 00:16:55,170
so this<font color="#CCCCCC"> was kept intentionally opaque to</font>

401
00:16:52,589 --> 00:16:57,029
hide<font color="#E5E5E5"> functionality in case you know</font>

402
00:16:55,170 --> 00:17:00,660
someone can discover<font color="#E5E5E5"> it and actually</font>

403
00:16:57,029 --> 00:17:02,459
gain the<font color="#E5E5E5"> system so you know it's</font>

404
00:17:00,660 --> 00:17:04,349
<font color="#CCCCCC">actually so serious that</font><font color="#E5E5E5"> people who</font>

405
00:17:02,459 --> 00:17:05,549
actually<font color="#E5E5E5"> develop and develop on the game</font>

406
00:17:04,349 --> 00:17:08,129
and the algorithm are not even allowed

407
00:17:05,549 --> 00:17:09,839
to take part<font color="#CCCCCC"> in the game so obviously</font>

408
00:17:08,130 --> 00:17:12,390
<font color="#E5E5E5">right this meant</font><font color="#CCCCCC"> that this is a huge</font>

409
00:17:09,839 --> 00:17:15,299
<font color="#CCCCCC">target for reverse engineering and so we</font>

410
00:17:12,390 --> 00:17:17,819
had to<font color="#CCCCCC"> go and</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> it right</font><font color="#E5E5E5"> so Ashley's so</font>

411
00:17:15,299 --> 00:17:19,168
he actually<font color="#E5E5E5"> found out how the</font><font color="#CCCCCC"> clock</font>

412
00:17:17,819 --> 00:17:21,990
<font color="#CCCCCC">catchers actually use an</font><font color="#E5E5E5"> extremely</font>

413
00:17:19,169 --> 00:17:24,270
interesting<font color="#E5E5E5"> way to inject random</font>

414
00:17:21,990 --> 00:17:27,030
<font color="#E5E5E5">mutation into genes and actually how the</font>

415
00:17:24,270 --> 00:17:29,100
parent genes are selected<font color="#CCCCCC"> he actually</font>

416
00:17:27,030 --> 00:17:31,980
did find<font color="#CCCCCC"> a more informed reading</font>

417
00:17:29,100 --> 00:17:34,260
strategy to that allows<font color="#E5E5E5"> you</font><font color="#CCCCCC"> to search</font>

418
00:17:31,980 --> 00:17:35,520
for<font color="#CCCCCC"> new cats</font><font color="#E5E5E5"> new new cats that</font><font color="#CCCCCC"> are more</font>

419
00:17:34,260 --> 00:17:39,000
rare and<font color="#CCCCCC"> will go for a lot more</font><font color="#E5E5E5"> money</font>

420
00:17:35,520 --> 00:17:41,639
I'm not<font color="#CCCCCC"> gonna spoil the entire algorithm</font>

421
00:17:39,000 --> 00:17:43,799
<font color="#E5E5E5">here although it is there in the paper</font>

422
00:17:41,640 --> 00:17:45,870
<font color="#CCCCCC">if you're interested</font><font color="#E5E5E5"> you can we talk to</font>

423
00:17:43,799 --> 00:17:47,789
me afterwards I can kind of<font color="#E5E5E5"> you know</font>

424
00:17:45,870 --> 00:17:51,809
give you some<font color="#E5E5E5"> hints how to make money</font>

425
00:17:47,789 --> 00:17:52,799
and if finally right<font color="#E5E5E5"> it's obvious in</font>

426
00:17:51,809 --> 00:17:56,070
<font color="#E5E5E5">this case where you can't really</font>

427
00:17:52,799 --> 00:17:57,370
<font color="#CCCCCC">reliance on on</font><font color="#E5E5E5"> obscurity even though you</font>

428
00:17:56,070 --> 00:18:00,939
have<font color="#E5E5E5"> these opaque byte</font>

429
00:17:57,370 --> 00:18:03,489
contracts<font color="#E5E5E5"> it's really infeasible to rely</font>

430
00:18:00,940 --> 00:18:05,650
on that opacity to hide any kind<font color="#E5E5E5"> of</font>

431
00:18:03,490 --> 00:18:08,100
important functionality<font color="#E5E5E5"> as we see in</font>

432
00:18:05,650 --> 00:18:10,750
this case<font color="#E5E5E5"> you know they're readily</font>

433
00:18:08,100 --> 00:18:13,540
reverse-engineer<font color="#CCCCCC"> below</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> um</font><font color="#E5E5E5"> you</font>

434
00:18:10,750 --> 00:18:15,840
can<font color="#CCCCCC"> actually also find the exact one not</font>

435
00:18:13,540 --> 00:18:18,580
the exact although our own<font color="#CCCCCC"> soul it'll be</font>

436
00:18:15,840 --> 00:18:19,780
slowly<font color="#E5E5E5"> code implementation of this exact</font>

437
00:18:18,580 --> 00:18:21,580
exact contract the function output

438
00:18:19,780 --> 00:18:25,090
matches and you can see exactly<font color="#CCCCCC"> how it</font>

439
00:18:21,580 --> 00:18:27,699
<font color="#E5E5E5">works so in conclusion we see that the</font>

440
00:18:25,090 --> 00:18:29,590
if the<font color="#CCCCCC"> Omega system is largely opaque</font>

441
00:18:27,700 --> 00:18:31,840
<font color="#E5E5E5">you know there's about seventy seven</font>

442
00:18:29,590 --> 00:18:34,659
point<font color="#E5E5E5"> five percent of the contracts are</font>

443
00:18:31,840 --> 00:18:37,899
unique<font color="#E5E5E5"> are uniquely opaque</font><font color="#CCCCCC"> or I'm</font><font color="#E5E5E5"> sorry</font>

444
00:18:34,660 --> 00:18:40,720
<font color="#E5E5E5">seven point five of the unique contracts</font>

445
00:18:37,900 --> 00:18:42,970
are fake if you're interested<font color="#E5E5E5"> in seeing</font>

446
00:18:40,720 --> 00:18:45,400
the code it's available there<font color="#CCCCCC"> um you</font><font color="#E5E5E5"> can</font>

447
00:18:42,970 --> 00:18:48,100
contact<font color="#E5E5E5"> that email address</font><font color="#CCCCCC"> and you know</font>

448
00:18:45,400 --> 00:18:49,660
<font color="#E5E5E5">get more information and finally</font><font color="#CCCCCC"> we've</font>

449
00:18:48,100 --> 00:18:52,860
<font color="#CCCCCC">less we've actually seen how this</font>

450
00:18:49,660 --> 00:18:57,640
opacity can be opacity assumption can be

451
00:18:52,860 --> 00:18:59,350
<font color="#E5E5E5">completely you know</font><font color="#CCCCCC"> completely broken</font>

452
00:18:57,640 --> 00:19:01,270
essentially through our case studies by

453
00:18:59,350 --> 00:19:03,669
seeing the high value wallets and<font color="#E5E5E5"> we saw</font>

454
00:19:01,270 --> 00:19:05,889
the user exchange laws<font color="#E5E5E5"> the arbitrage</font>

455
00:19:03,670 --> 00:19:08,830
<font color="#CCCCCC">BOTS and</font><font color="#E5E5E5"> the crypto</font><font color="#CCCCCC"> kiddies gene</font>

456
00:19:05,890 --> 00:19:12,030
algorithm and that's<font color="#E5E5E5"> our talks so thank</font>

457
00:19:08,830 --> 00:19:12,030
you<font color="#CCCCCC"> it's like questions now</font>

458
00:19:25,610 --> 00:19:31,530
hi<font color="#CCCCCC"> I'm Johannes from the previous</font>

459
00:19:28,500 --> 00:19:33,710
previous previous talk<font color="#CCCCCC"> I have a question</font>

460
00:19:31,530 --> 00:19:38,580
<font color="#CCCCCC">about your assignment of registers to</font>

461
00:19:33,710 --> 00:19:41,010
<font color="#CCCCCC">stake</font><font color="#E5E5E5"> locations if there are some I will</font>

462
00:19:38,580 --> 00:19:43,110
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> use this text structure</font><font color="#E5E5E5"> so you</font>

463
00:19:41,010 --> 00:19:46,980
<font color="#E5E5E5">can enter the same basic block with in</font>

464
00:19:43,110 --> 00:19:49,590
different<font color="#CCCCCC"> states</font><font color="#E5E5E5"> right you're exactly</font>

465
00:19:46,980 --> 00:19:52,740
right<font color="#CCCCCC"> so actually I oversimplify here a</font>

466
00:19:49,590 --> 00:19:55,080
lot like so once<font color="#E5E5E5"> you one very important</font>

467
00:19:52,740 --> 00:19:57,480
heuristic here is the internal call

468
00:19:55,080 --> 00:19:59,490
identification so we identify<font color="#E5E5E5"> so the</font>

469
00:19:57,480 --> 00:20:02,250
block didn't being reused multiple time

470
00:19:59,490 --> 00:20:04,500
<font color="#E5E5E5">is largely due to internal functions</font><font color="#CCCCCC"> so</font>

471
00:20:02,250 --> 00:20:07,890
in that particular<font color="#CCCCCC"> case it</font><font color="#E5E5E5"> will have</font>

472
00:20:04,500 --> 00:20:10,820
multiple stack<font color="#E5E5E5"> sizes but if we extract</font>

473
00:20:07,890 --> 00:20:14,310
the internal function we can remove the

474
00:20:10,820 --> 00:20:17,310
<font color="#E5E5E5">need to to handle that case so if</font>

475
00:20:14,310 --> 00:20:19,260
anything<font color="#CCCCCC"> laughter Wow well if some block</font>

476
00:20:17,310 --> 00:20:21,570
is left afterwards still have multiple

477
00:20:19,260 --> 00:20:24,090
sizes we will duplicate it multiple

478
00:20:21,570 --> 00:20:27,290
times for<font color="#E5E5E5"> each unique stack height and</font>

479
00:20:24,090 --> 00:20:27,290
that's<font color="#E5E5E5"> a very good question</font>

480
00:20:36,690 --> 00:20:39,969
[Applause]

