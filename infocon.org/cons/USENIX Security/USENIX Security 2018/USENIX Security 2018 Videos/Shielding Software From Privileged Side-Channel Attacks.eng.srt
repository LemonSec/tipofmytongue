1
00:00:10,599 --> 00:00:16,490
and thank the chair for<font color="#CCCCCC"> the introduction</font>

2
00:00:13,460 --> 00:00:20,119
<font color="#E5E5E5">this paper is co-authored by so</font><font color="#CCCCCC"> London</font>

3
00:00:16,490 --> 00:00:22,520
<font color="#CCCCCC">wishes me Joe - Ian John</font><font color="#E5E5E5"> crisp you son</font>

4
00:00:20,119 --> 00:00:25,460
<font color="#CCCCCC">need Okada's from</font><font color="#E5E5E5"> University Rochester</font>

5
00:00:22,520 --> 00:00:28,369
and Alan Cox from<font color="#E5E5E5"> Rice University</font>

6
00:00:25,460 --> 00:00:31,329
so we defend against<font color="#CCCCCC"> two side channels</font>

7
00:00:28,369 --> 00:00:34,850
<font color="#E5E5E5">launched by a compromised</font><font color="#CCCCCC"> Oh ass on</font>

8
00:00:31,329 --> 00:00:37,430
shielding system that remove us from<font color="#E5E5E5"> the</font>

9
00:00:34,850 --> 00:00:39,590
trusted computing<font color="#CCCCCC"> base including page</font>

10
00:00:37,430 --> 00:00:47,660
table and last level cache side-channel

11
00:00:39,590 --> 00:00:50,989
attacks<font color="#CCCCCC"> applications assume that the</font>

12
00:00:47,660 --> 00:00:54,230
<font color="#E5E5E5">London underlying OS is secure however</font>

13
00:00:50,989 --> 00:00:56,928
the OS can be compromised<font color="#E5E5E5"> due</font><font color="#CCCCCC"> to reasons</font>

14
00:00:54,230 --> 00:00:59,928
such<font color="#CCCCCC"> as buffer</font><font color="#E5E5E5"> or so and information</font>

15
00:00:56,929 --> 00:01:03,409
leaks<font color="#CCCCCC"> and even on shielding systems</font>

16
00:00:59,929 --> 00:01:06,260
they're supposed to<font color="#CCCCCC"> protect confidential</font>

17
00:01:03,409 --> 00:01:09,440
application data from direct corruption

18
00:01:06,260 --> 00:01:12,020
of a compromised OS the OS<font color="#E5E5E5"> can still</font>

19
00:01:09,440 --> 00:01:18,140
launch powerful side channels to steal

20
00:01:12,020 --> 00:01:20,690
confidential<font color="#E5E5E5"> application data and since</font>

21
00:01:18,140 --> 00:01:23,540
<font color="#CCCCCC">Oh since the OS has complete control</font>

22
00:01:20,690 --> 00:01:27,649
<font color="#E5E5E5">over system resources it can make the</font>

23
00:01:23,540 --> 00:01:30,470
existing<font color="#CCCCCC"> size</font><font color="#E5E5E5"> house worse is sharing the</font>

24
00:01:27,650 --> 00:01:34,280
architectural studies such as caches<font color="#E5E5E5"> and</font>

25
00:01:30,470 --> 00:01:37,520
<font color="#CCCCCC">TOB</font><font color="#E5E5E5"> where the victim so it can enforce</font>

26
00:01:34,280 --> 00:01:40,100
the<font color="#E5E5E5"> victims behavior and also it can</font>

27
00:01:37,520 --> 00:01:43,699
<font color="#E5E5E5">control system events to make to</font>

28
00:01:40,100 --> 00:01:46,520
alleviate noise in addition and<font color="#E5E5E5"> OS can</font>

29
00:01:43,700 --> 00:01:49,040
introduce new<font color="#CCCCCC"> side channels such as by</font>

30
00:01:46,520 --> 00:01:53,840
tracking<font color="#E5E5E5"> page</font><font color="#CCCCCC"> Falls</font><font color="#E5E5E5"> and page table</font>

31
00:01:49,040 --> 00:01:57,050
updates<font color="#E5E5E5"> and shooting systems like and</font>

32
00:01:53,840 --> 00:01:59,240
shooting system<font color="#E5E5E5"> won't help in this case</font>

33
00:01:57,050 --> 00:02:01,399
<font color="#E5E5E5">although they are supposed to</font><font color="#CCCCCC"> protect</font>

34
00:01:59,240 --> 00:02:04,789
confidential application data from a

35
00:02:01,400 --> 00:02:07,430
compromised<font color="#E5E5E5"> OS scenes for example the</font>

36
00:02:04,790 --> 00:02:11,090
page table is still under<font color="#E5E5E5"> the control</font><font color="#CCCCCC"> of</font>

37
00:02:07,430 --> 00:02:12,860
an untrusted<font color="#E5E5E5"> OS and the victim</font>

38
00:02:11,090 --> 00:02:15,830
application is still sharing

39
00:02:12,860 --> 00:02:18,760
architectural<font color="#E5E5E5"> states such as caches and</font>

40
00:02:15,830 --> 00:02:23,470
<font color="#E5E5E5">TLB with the OS and the other</font>

41
00:02:18,760 --> 00:02:26,739
applications<font color="#E5E5E5"> so this work focuses on the</font>

42
00:02:23,470 --> 00:02:29,010
against<font color="#CCCCCC"> two side channels page table and</font>

43
00:02:26,740 --> 00:02:34,780
last level cache side-channel attacks

44
00:02:29,010 --> 00:02:37,480
<font color="#E5E5E5">launched by compromised OS so here's the</font>

45
00:02:34,780 --> 00:02:40,660
<font color="#E5E5E5">outline of my presentation</font><font color="#CCCCCC"> I'll start</font>

46
00:02:37,480 --> 00:02:42,239
with examples of page<font color="#E5E5E5"> table and last</font>

47
00:02:40,660 --> 00:02:45,640
level cache side-channel attacks

48
00:02:42,240 --> 00:02:47,770
launched<font color="#E5E5E5"> by a compromised OS then I'll</font>

49
00:02:45,640 --> 00:02:50,410
talk about<font color="#E5E5E5"> some background on</font><font color="#CCCCCC"> what your</font>

50
00:02:47,770 --> 00:02:54,130
ghost<font color="#E5E5E5"> the platform you used to design</font>

51
00:02:50,410 --> 00:02:57,400
<font color="#E5E5E5">and implement our defenses and then now</font>

52
00:02:54,130 --> 00:02:59,650
talk about apparition<font color="#E5E5E5"> our defenses and</font>

53
00:02:57,400 --> 00:03:05,890
finally I'll show<font color="#CCCCCC"> you the</font><font color="#E5E5E5"> performance</font>

54
00:02:59,650 --> 00:03:09,510
evaluation the OS<font color="#E5E5E5"> has complete control</font>

55
00:03:05,890 --> 00:03:13,089
<font color="#E5E5E5">over the page tables so it can configure</font>

56
00:03:09,510 --> 00:03:16,600
each page table entry to be<font color="#E5E5E5"> inaccessible</font>

57
00:03:13,090 --> 00:03:19,090
<font color="#E5E5E5">so that every memory access will reside</font>

58
00:03:16,600 --> 00:03:22,299
in<font color="#CCCCCC"> a page fault</font><font color="#E5E5E5"> and by keeping track</font><font color="#CCCCCC"> of</font>

59
00:03:19,090 --> 00:03:26,140
page<font color="#E5E5E5"> faults the OS can infer the</font><font color="#CCCCCC"> victims</font>

60
00:03:22,300 --> 00:03:28,660
memory access behavior and this this

61
00:03:26,140 --> 00:03:33,040
requires<font color="#CCCCCC"> write permissions to the</font><font color="#E5E5E5"> page</font>

62
00:03:28,660 --> 00:03:35,859
table existing research shows<font color="#CCCCCC"> that the</font>

63
00:03:33,040 --> 00:03:38,470
<font color="#CCCCCC">side-channel is so powerful</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> is able</font>

64
00:03:35,860 --> 00:03:41,830
<font color="#CCCCCC">to</font><font color="#E5E5E5"> recover the entire confidential</font>

65
00:03:38,470 --> 00:03:44,380
document in addition<font color="#E5E5E5"> the OS can also</font>

66
00:03:41,830 --> 00:03:46,120
scan the page table<font color="#E5E5E5"> to capture the first</font>

67
00:03:44,380 --> 00:03:48,670
memory<font color="#CCCCCC"> reads and writes</font><font color="#E5E5E5"> from the</font>

68
00:03:46,120 --> 00:03:51,160
application since first memory read and

69
00:03:48,670 --> 00:03:53,980
writes<font color="#CCCCCC"> while sad the access or dirty bit</font>

70
00:03:51,160 --> 00:03:56,049
of<font color="#E5E5E5"> the page table entry and this</font>

71
00:03:53,980 --> 00:04:00,609
requires read permission to the page

72
00:03:56,049 --> 00:04:02,920
table<font color="#E5E5E5"> and regarding the last dialog</font>

73
00:04:00,610 --> 00:04:05,980
cache side-channel attacks<font color="#E5E5E5"> there are two</font>

74
00:04:02,920 --> 00:04:08,320
major mechanisms<font color="#CCCCCC"> primum probe and</font><font color="#E5E5E5"> flush</font>

75
00:04:05,980 --> 00:04:11,109
and<font color="#E5E5E5"> reload here we take</font><font color="#CCCCCC"> primum probe as</font>

76
00:04:08,320 --> 00:04:14,170
an example<font color="#E5E5E5"> we are in the prime stabbed</font>

77
00:04:11,110 --> 00:04:17,979
the attacker<font color="#E5E5E5"> loathes</font><font color="#CCCCCC"> is a</font><font color="#E5E5E5"> read to the</font>

78
00:04:14,170 --> 00:04:20,950
last<font color="#CCCCCC"> hour cache and becomes</font><font color="#E5E5E5"> idle and if</font>

79
00:04:17,978 --> 00:04:23,740
the<font color="#E5E5E5"> victims access one cache line to be</font>

80
00:04:20,950 --> 00:04:26,590
monitored<font color="#CCCCCC"> it will</font><font color="#E5E5E5"> replace</font><font color="#CCCCCC"> one of</font><font color="#E5E5E5"> the</font>

81
00:04:23,740 --> 00:04:28,900
cache lines<font color="#E5E5E5"> loaded by the attacker in</font>

82
00:04:26,590 --> 00:04:32,440
the<font color="#CCCCCC"> crime stabbed and</font><font color="#E5E5E5"> in probe stabbed</font>

83
00:04:28,900 --> 00:04:34,659
the attacker<font color="#E5E5E5"> access the same re and if</font>

84
00:04:32,440 --> 00:04:37,750
it<font color="#E5E5E5"> takes</font><font color="#CCCCCC"> longer</font><font color="#E5E5E5"> to access one cache line</font>

85
00:04:34,660 --> 00:04:40,240
<font color="#E5E5E5">then attacker knows that the victim has</font>

86
00:04:37,750 --> 00:04:42,670
replaced<font color="#CCCCCC"> is cash line with</font><font color="#E5E5E5"> where the</font>

87
00:04:40,240 --> 00:04:45,640
victims own cash line and<font color="#E5E5E5"> flush</font><font color="#CCCCCC"> and</font>

88
00:04:42,670 --> 00:04:47,410
reload has similar rationale<font color="#E5E5E5"> except that</font>

89
00:04:45,640 --> 00:04:50,260
it requires that the attacker and<font color="#CCCCCC"> the</font>

90
00:04:47,410 --> 00:04:54,880
<font color="#E5E5E5">victim shares the same piece</font><font color="#CCCCCC"> of physical</font>

91
00:04:50,260 --> 00:04:57,700
memory so in order<font color="#CCCCCC"> to defend against the</font>

92
00:04:54,880 --> 00:05:00,430
side channels<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have just discussed</font><font color="#E5E5E5"> we</font>

93
00:04:57,700 --> 00:05:02,920
need to make<font color="#CCCCCC"> sure that oh s</font><font color="#E5E5E5"> cannot read</font>

94
00:05:00,430 --> 00:05:04,510
or<font color="#CCCCCC"> write</font><font color="#E5E5E5"> first of all that the</font>

95
00:05:02,920 --> 00:05:07,900
confidential<font color="#E5E5E5"> application data and</font>

96
00:05:04,510 --> 00:05:09,940
secondly the page table containing

97
00:05:07,900 --> 00:05:12,760
translations<font color="#E5E5E5"> of the confidential</font>

98
00:05:09,940 --> 00:05:15,100
application data and<font color="#CCCCCC"> thirdly</font><font color="#E5E5E5"> the cache</font>

99
00:05:12,760 --> 00:05:18,340
lines of the confidential<font color="#E5E5E5"> application</font>

100
00:05:15,100 --> 00:05:21,070
data here will<font color="#E5E5E5"> average worker</font><font color="#CCCCCC"> ghosts</font><font color="#E5E5E5"> a</font>

101
00:05:18,340 --> 00:05:23,349
<font color="#CCCCCC">shielding</font><font color="#E5E5E5"> system that protects</font>

102
00:05:21,070 --> 00:05:26,409
confidential application data from a

103
00:05:23,350 --> 00:05:28,050
<font color="#E5E5E5">compromised</font><font color="#CCCCCC"> so asked to design</font><font color="#E5E5E5"> and</font>

104
00:05:26,410 --> 00:05:30,850
implement our defenses

105
00:05:28,050 --> 00:05:33,400
although it cannot defend against AI

106
00:05:30,850 --> 00:05:36,670
channels by itself<font color="#E5E5E5"> it can be extended</font>

107
00:05:33,400 --> 00:05:39,460
<font color="#E5E5E5">with various security policies in</font>

108
00:05:36,670 --> 00:05:42,850
addition it already ensures that that

109
00:05:39,460 --> 00:05:45,340
<font color="#E5E5E5">the OS cannot read or write</font><font color="#CCCCCC"> the</font>

110
00:05:42,850 --> 00:05:47,890
confidential<font color="#E5E5E5"> application data and also</font>

111
00:05:45,340 --> 00:05:51,640
it can chose how<font color="#E5E5E5"> os configures the page</font>

112
00:05:47,890 --> 00:05:54,789
table so what is virtual ghost

113
00:05:51,640 --> 00:05:57,490
<font color="#CCCCCC">it is a compiler</font><font color="#E5E5E5"> based virtual machine</font>

114
00:05:54,790 --> 00:06:00,670
that<font color="#E5E5E5"> protects confidential application</font>

115
00:05:57,490 --> 00:06:03,430
data from compromised<font color="#E5E5E5"> OS</font><font color="#CCCCCC"> interposed</font>

116
00:06:00,670 --> 00:06:07,150
<font color="#CCCCCC">between the OS kernel</font><font color="#E5E5E5"> and the underlying</font>

117
00:06:03,430 --> 00:06:09,280
<font color="#E5E5E5">processor it pours the kernel into</font>

118
00:06:07,150 --> 00:06:11,890
virtual<font color="#E5E5E5"> instruction set and by</font>

119
00:06:09,280 --> 00:06:14,650
<font color="#E5E5E5">translating virtual is a</font><font color="#CCCCCC"> tree native is</font>

120
00:06:11,890 --> 00:06:17,349
a it can use compiler instrumentation

121
00:06:14,650 --> 00:06:19,510
such as software<font color="#E5E5E5"> fault isolation to</font>

122
00:06:17,350 --> 00:06:21,790
instrument every kernel load and store

123
00:06:19,510 --> 00:06:24,700
<font color="#E5E5E5">and make sure that the kernel does not</font>

124
00:06:21,790 --> 00:06:27,970
access protecting memory regions which

125
00:06:24,700 --> 00:06:30,520
I'm going<font color="#E5E5E5"> to define soon it forces the</font>

126
00:06:27,970 --> 00:06:33,520
OS to invoke specific instructions

127
00:06:30,520 --> 00:06:36,630
provided<font color="#CCCCCC"> by wardro ghost vm to perform</font>

128
00:06:33,520 --> 00:06:39,280
privileged<font color="#E5E5E5"> operations such as</font>

129
00:06:36,630 --> 00:06:41,950
manipulating programs days or<font color="#E5E5E5"> Ratanak</font>

130
00:06:39,280 --> 00:06:45,609
switch or configuring<font color="#E5E5E5"> hot configuring</font>

131
00:06:41,950 --> 00:06:47,469
<font color="#E5E5E5">hardware states like animu it cannot</font>

132
00:06:45,610 --> 00:06:50,530
defend against such a<font color="#CCCCCC"> knows by itself</font>

133
00:06:47,470 --> 00:06:51,100
but it can be<font color="#E5E5E5"> extended with various</font>

134
00:06:50,530 --> 00:06:55,479
<font color="#E5E5E5">secure</font>

135
00:06:51,100 --> 00:06:58,660
policies this figure on the right<font color="#CCCCCC"> shows</font>

136
00:06:55,480 --> 00:07:01,150
the<font color="#CCCCCC"> wardress face layout on were toast</font>

137
00:06:58,660 --> 00:07:03,930
we're beside the traditional user space

138
00:07:01,150 --> 00:07:06,609
and kernel space<font color="#E5E5E5"> we add two more</font>

139
00:07:03,930 --> 00:07:09,370
protected memory regions which are not

140
00:07:06,610 --> 00:07:12,580
<font color="#E5E5E5">accessible to the OS kernel the first</font>

141
00:07:09,370 --> 00:07:15,130
one is a secure user space<font color="#E5E5E5"> it is private</font>

142
00:07:12,580 --> 00:07:17,770
to<font color="#E5E5E5"> the application itself</font><font color="#CCCCCC"> and it's not</font>

143
00:07:15,130 --> 00:07:21,760
accessible to<font color="#E5E5E5"> the OS or the other</font>

144
00:07:17,770 --> 00:07:24,820
applications<font color="#E5E5E5"> and secondly on the virtual</font>

145
00:07:21,760 --> 00:07:26,920
<font color="#CCCCCC">ghost space which is used exclusively by</font>

146
00:07:24,820 --> 00:07:29,710
<font color="#CCCCCC">the water goes beyond</font><font color="#E5E5E5"> itself to save</font>

147
00:07:26,920 --> 00:07:35,470
internal data structures and it's not

148
00:07:29,710 --> 00:07:39,489
accessible to<font color="#E5E5E5"> the OS now let's talk</font>

149
00:07:35,470 --> 00:07:41,830
about<font color="#E5E5E5"> apparition our defenses operation</font>

150
00:07:39,490 --> 00:07:44,650
is essentially<font color="#E5E5E5"> water goes me and with</font>

151
00:07:41,830 --> 00:07:47,500
our defenses it can choose the native

152
00:07:44,650 --> 00:07:49,960
<font color="#E5E5E5">code generation of the kernel everything</font>

153
00:07:47,500 --> 00:07:52,000
needs to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> in the virtual is a so that</font>

154
00:07:49,960 --> 00:07:55,570
it can ensure that<font color="#E5E5E5"> the kernel is</font>

155
00:07:52,000 --> 00:07:59,230
instrumented<font color="#E5E5E5"> let</font><font color="#CCCCCC"> us start with page</font>

156
00:07:55,570 --> 00:08:01,540
table side channel defenses before<font color="#CCCCCC"> I</font>

157
00:07:59,230 --> 00:08:04,200
talk about<font color="#E5E5E5"> the details of our defenses I</font>

158
00:08:01,540 --> 00:08:07,960
would like<font color="#E5E5E5"> to remind you of a concept</font>

159
00:08:04,200 --> 00:08:11,140
<font color="#CCCCCC">Iraq map which is a</font><font color="#E5E5E5"> contiguous virtual</font>

160
00:08:07,960 --> 00:08:13,710
memory region region<font color="#E5E5E5"> mapping the</font><font color="#CCCCCC"> entire</font>

161
00:08:11,140 --> 00:08:17,080
physical<font color="#E5E5E5"> address space</font><font color="#CCCCCC"> as a single block</font>

162
00:08:13,710 --> 00:08:19,450
page table pages are<font color="#CCCCCC"> usually</font><font color="#E5E5E5"> are usually</font>

163
00:08:17,080 --> 00:08:22,120
accessed<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are dirac map</font><font color="#E5E5E5"> by the kernel</font>

164
00:08:19,450 --> 00:08:24,849
<font color="#CCCCCC">so here we</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to ensure that the OS</font>

165
00:08:22,120 --> 00:08:26,800
cannot read or<font color="#CCCCCC"> write the page table</font>

166
00:08:24,850 --> 00:08:28,960
pages mapping the confidential

167
00:08:26,800 --> 00:08:32,710
application data so<font color="#E5E5E5"> how can we achieve</font>

168
00:08:28,960 --> 00:08:35,468
<font color="#CCCCCC">that by removing the mapping</font><font color="#E5E5E5"> of the page</font>

169
00:08:32,710 --> 00:08:38,440
table<font color="#E5E5E5"> pages from the</font><font color="#CCCCCC"> kernels</font><font color="#E5E5E5"> dirac map</font>

170
00:08:35,469 --> 00:08:41,800
<font color="#E5E5E5">since the kernel does not have mappings</font>

171
00:08:38,440 --> 00:08:43,479
<font color="#CCCCCC">it</font><font color="#E5E5E5"> has no ways to access that page table</font>

172
00:08:41,799 --> 00:08:46,780
page<font color="#E5E5E5"> mapping the confidential</font>

173
00:08:43,479 --> 00:08:49,990
<font color="#E5E5E5">application data and we also add one</font>

174
00:08:46,780 --> 00:08:52,240
more<font color="#CCCCCC"> dirac map to</font><font color="#E5E5E5"> be used exclusively</font><font color="#CCCCCC"> by</font>

175
00:08:49,990 --> 00:08:55,630
the apparition we am itself<font color="#E5E5E5"> that</font>

176
00:08:52,240 --> 00:08:58,510
includes mappings<font color="#CCCCCC"> of the page</font><font color="#E5E5E5"> table</font>

177
00:08:55,630 --> 00:09:01,240
pages containing translations of the

178
00:08:58,510 --> 00:09:04,160
confidential application data<font color="#E5E5E5"> so</font>

179
00:09:01,240 --> 00:09:07,160
whenever we allocate<font color="#CCCCCC"> a physical page</font>

180
00:09:04,160 --> 00:09:09,769
as the page table page of the

181
00:09:07,160 --> 00:09:13,250
confidential application data we remove

182
00:09:09,769 --> 00:09:18,410
is corresponding page table entry from

183
00:09:13,250 --> 00:09:20,810
the<font color="#CCCCCC"> colonel's</font><font color="#E5E5E5"> Dirac map and also there's</font>

184
00:09:18,410 --> 00:09:23,540
a painting<font color="#E5E5E5"> side channel associated</font>

185
00:09:20,810 --> 00:09:26,930
<font color="#E5E5E5">where's the falling fact which is more</font>

186
00:09:23,540 --> 00:09:30,980
than OS often<font color="#E5E5E5"> disabled often</font><font color="#CCCCCC"> used lazy</font>

187
00:09:26,930 --> 00:09:33,949
memory allocation<font color="#E5E5E5"> we're the OS only</font><font color="#CCCCCC"> Maps</font>

188
00:09:30,980 --> 00:09:34,730
<font color="#E5E5E5">one physical pre one physical frame to</font>

189
00:09:33,949 --> 00:09:36,859
the page

190
00:09:34,730 --> 00:09:40,129
when the<font color="#E5E5E5"> application first freeze or</font>

191
00:09:36,860 --> 00:09:43,490
<font color="#CCCCCC">rise that</font><font color="#E5E5E5"> age</font><font color="#CCCCCC"> so by</font><font color="#E5E5E5"> keeping track</font><font color="#CCCCCC"> of the</font>

192
00:09:40,129 --> 00:09:45,259
physical page allocation the OS can

193
00:09:43,490 --> 00:09:48,529
figure out the victims memory access

194
00:09:45,259 --> 00:09:51,290
behavior in order<font color="#CCCCCC"> to alleviate this</font>

195
00:09:48,529 --> 00:09:54,529
<font color="#CCCCCC">side-channel</font><font color="#E5E5E5"> we disable lazy memory</font>

196
00:09:51,290 --> 00:09:56,810
allocation for<font color="#E5E5E5"> the secure user space in</font>

197
00:09:54,529 --> 00:09:59,709
other words we allocate everything<font color="#CCCCCC"> up</font>

198
00:09:56,810 --> 00:10:02,239
front at allocation time instead of

199
00:09:59,709 --> 00:10:05,569
access time for the secure user space

200
00:10:02,240 --> 00:10:09,380
and<font color="#E5E5E5"> also the physical</font><font color="#CCCCCC"> memory allocation</font>

201
00:10:05,569 --> 00:10:14,509
of<font color="#E5E5E5"> secure space is managed by apparition</font>

202
00:10:09,380 --> 00:10:16,579
we<font color="#E5E5E5"> and self instead of the OS now</font><font color="#CCCCCC"> this</font>

203
00:10:14,509 --> 00:10:20,230
<font color="#CCCCCC">Luke had lost our cache side-channel</font>

204
00:10:16,579 --> 00:10:23,508
defenses and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> key</font><font color="#E5E5E5"> idea is to</font><font color="#CCCCCC"> isolate</font>

205
00:10:20,230 --> 00:10:26,300
<font color="#E5E5E5">application from the OS on the last</font>

206
00:10:23,509 --> 00:10:28,040
<font color="#E5E5E5">level cache by cache partitioning in</font>

207
00:10:26,300 --> 00:10:30,829
other words we assign different<font color="#E5E5E5"> cache</font>

208
00:10:28,040 --> 00:10:34,029
partitions<font color="#CCCCCC"> to the apparition VM the OS</font>

209
00:10:30,829 --> 00:10:37,489
and applications needing production<font color="#E5E5E5"> and</font>

210
00:10:34,029 --> 00:10:40,880
we achieve this<font color="#E5E5E5"> by leveraging</font><font color="#CCCCCC"> Intel's</font>

211
00:10:37,490 --> 00:10:43,759
<font color="#E5E5E5">cache allocation technology Intel cat</font><font color="#CCCCCC"> a</font>

212
00:10:40,880 --> 00:10:46,160
hardware feature that<font color="#E5E5E5"> divides the last</font>

213
00:10:43,759 --> 00:10:49,759
level cache<font color="#CCCCCC"> waste</font><font color="#E5E5E5"> into subsets of</font>

214
00:10:46,160 --> 00:10:52,130
<font color="#E5E5E5">smaller</font><font color="#CCCCCC"> sosa tivities but in</font><font color="#E5E5E5"> only</font>

215
00:10:49,759 --> 00:10:52,579
supports isolation<font color="#E5E5E5"> on rice but not</font>

216
00:10:52,130 --> 00:10:55,250
hungry

217
00:10:52,579 --> 00:10:57,949
in other words<font color="#E5E5E5"> code running on one cache</font>

218
00:10:55,250 --> 00:11:00,740
partition can<font color="#E5E5E5"> only</font><font color="#CCCCCC"> meet cache lines in</font>

219
00:10:57,949 --> 00:11:03,290
the<font color="#CCCCCC"> Indus</font><font color="#E5E5E5"> own partition but you can read</font>

220
00:11:00,740 --> 00:11:05,240
anywhere on the last<font color="#E5E5E5"> level cache since</font>

221
00:11:03,290 --> 00:11:08,750
physical memory of the<font color="#CCCCCC"> secured user</font>

222
00:11:05,240 --> 00:11:11,540
space is not is<font color="#E5E5E5"> only private to the</font>

223
00:11:08,750 --> 00:11:15,949
application<font color="#E5E5E5"> itself and are not readable</font>

224
00:11:11,540 --> 00:11:17,630
<font color="#E5E5E5">to on the OS or the other applications</font>

225
00:11:15,949 --> 00:11:21,170
<font color="#CCCCCC">the cache lines of this</font>

226
00:11:17,630 --> 00:11:23,060
<font color="#CCCCCC">your user</font><font color="#E5E5E5"> days are not readable to us or</font>

227
00:11:21,170 --> 00:11:30,140
the other other applications on last our

228
00:11:23,060 --> 00:11:33,140
<font color="#E5E5E5">cash to operation we and configures</font>

229
00:11:30,140 --> 00:11:36,250
<font color="#CCCCCC">cache partitioning</font><font color="#E5E5E5"> a good time and also</font>

230
00:11:33,140 --> 00:11:39,560
also<font color="#E5E5E5"> ensures that the OS cannot</font>

231
00:11:36,250 --> 00:11:43,340
reconfigure cache partitioning we are

232
00:11:39,560 --> 00:11:45,829
<font color="#E5E5E5">virtual instruction set in addition it</font>

233
00:11:43,340 --> 00:11:49,580
controls catch<font color="#E5E5E5"> switching at</font><font color="#CCCCCC"> runtime</font>

234
00:11:45,830 --> 00:11:52,190
<font color="#E5E5E5">among applications cache partition OS</font>

235
00:11:49,580 --> 00:11:55,970
partition and operation<font color="#CCCCCC"> beyond partition</font>

236
00:11:52,190 --> 00:11:58,310
and the cache partition in use depends

237
00:11:55,970 --> 00:12:01,310
on<font color="#CCCCCC"> the code that is running take the</font>

238
00:11:58,310 --> 00:12:04,640
following<font color="#CCCCCC"> Hayes as an example so when</font>

239
00:12:01,310 --> 00:12:06,859
trap<font color="#E5E5E5"> interrupt or system co-occurs the</font>

240
00:12:04,640 --> 00:12:09,080
control flows goes to the<font color="#E5E5E5"> operation VM</font>

241
00:12:06,860 --> 00:12:12,320
and the first thing that<font color="#E5E5E5"> the apparition</font>

242
00:12:09,080 --> 00:12:15,380
<font color="#CCCCCC">VMO do is to set the cache partition</font><font color="#E5E5E5"> to</font>

243
00:12:12,320 --> 00:12:17,510
be its own partition and after you save

244
00:12:15,380 --> 00:12:20,720
the program<font color="#CCCCCC"> after you save the program</font>

245
00:12:17,510 --> 00:12:24,740
<font color="#E5E5E5">stays and right before it transforms it</font>

246
00:12:20,720 --> 00:12:28,040
and chose to the OS<font color="#CCCCCC"> Cisco or trap</font>

247
00:12:24,740 --> 00:12:32,570
handler<font color="#CCCCCC"> it will set the cache partition</font>

248
00:12:28,040 --> 00:12:35,329
<font color="#E5E5E5">to be the OS partition and each</font>

249
00:12:32,570 --> 00:12:38,450
application<font color="#E5E5E5"> needing protection has its</font>

250
00:12:35,330 --> 00:12:40,340
own partition so we<font color="#E5E5E5"> assigned one cache</font>

251
00:12:38,450 --> 00:12:43,370
partition for<font color="#E5E5E5"> the first application</font>

252
00:12:40,340 --> 00:12:45,410
needing protection<font color="#CCCCCC"> scheduled</font><font color="#E5E5E5"> and when</font>

253
00:12:43,370 --> 00:12:48,050
they are more advocate<font color="#CCCCCC"> warned</font><font color="#E5E5E5"> such</font>

254
00:12:45,410 --> 00:12:50,589
application scheduled<font color="#E5E5E5"> we divide this</font>

255
00:12:48,050 --> 00:12:53,359
cache partition into multiple parts<font color="#CCCCCC"> and</font>

256
00:12:50,590 --> 00:12:55,610
we<font color="#E5E5E5"> can</font><font color="#CCCCCC"> divide it either evenly or</font>

257
00:12:53,360 --> 00:12:58,520
according<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the quality</font><font color="#E5E5E5"> of service</font>

258
00:12:55,610 --> 00:13:00,920
<font color="#E5E5E5">request of the applications but here we</font>

259
00:12:58,520 --> 00:13:03,770
use a simple<font color="#CCCCCC"> implementation where we</font>

260
00:13:00,920 --> 00:13:07,510
divide the cache partitions statically

261
00:13:03,770 --> 00:13:10,430
which are introduced about later<font color="#E5E5E5"> and</font>

262
00:13:07,510 --> 00:13:14,050
when the<font color="#E5E5E5"> number of applications exceeds</font>

263
00:13:10,430 --> 00:13:16,430
the<font color="#CCCCCC"> number</font><font color="#E5E5E5"> of cache partitions available</font>

264
00:13:14,050 --> 00:13:18,439
there<font color="#E5E5E5"> will be multiple applications</font>

265
00:13:16,430 --> 00:13:21,140
needing<font color="#E5E5E5"> protections sharing the same</font>

266
00:13:18,440 --> 00:13:23,960
partition<font color="#E5E5E5"> and in when that case occurs</font>

267
00:13:21,140 --> 00:13:27,110
and when<font color="#E5E5E5"> connects which occurs between</font>

268
00:13:23,960 --> 00:13:30,200
<font color="#E5E5E5">two such applications but flushes we</font>

269
00:13:27,110 --> 00:13:31,180
will flush the cache<font color="#E5E5E5"> to ensure that the</font>

270
00:13:30,200 --> 00:13:34,360
cache partition

271
00:13:31,180 --> 00:13:39,579
always private<font color="#E5E5E5"> to application</font><font color="#CCCCCC"> needing</font>

272
00:13:34,360 --> 00:13:42,550
production and speculation<font color="#E5E5E5"> side channels</font>

273
00:13:39,580 --> 00:13:44,290
such as spectrum<font color="#CCCCCC"> Mel down after they</font>

274
00:13:42,550 --> 00:13:46,959
treat the victim<font color="#E5E5E5"> into loading</font>

275
00:13:44,290 --> 00:13:49,800
<font color="#E5E5E5">confidential application data</font><font color="#CCCCCC"> they need</font>

276
00:13:46,960 --> 00:13:52,870
a method<font color="#CCCCCC"> to convey the message out and</font>

277
00:13:49,800 --> 00:13:55,870
last level cache side-channel attack is

278
00:13:52,870 --> 00:13:59,200
one of the<font color="#E5E5E5"> options available and here</font>

279
00:13:55,870 --> 00:14:01,420
operation<font color="#CCCCCC"> VMs helps with</font><font color="#E5E5E5"> mitigating the</font>

280
00:13:59,200 --> 00:14:04,960
last<font color="#CCCCCC"> hour</font><font color="#E5E5E5"> cache side-channel attacks and</font>

281
00:14:01,420 --> 00:14:07,000
<font color="#E5E5E5">also we have a</font><font color="#CCCCCC"> hospital this year that</font>

282
00:14:04,960 --> 00:14:09,910
explores various software fault

283
00:14:07,000 --> 00:14:11,770
isolation mechanisms and<font color="#E5E5E5"> water</font><font color="#CCCCCC"> ghosts</font><font color="#E5E5E5"> to</font>

284
00:14:09,910 --> 00:14:16,589
defend against<font color="#CCCCCC"> specter we're</font><font color="#E5E5E5"> at one</font>

285
00:14:11,770 --> 00:14:16,590
balanced right<font color="#CCCCCC"> check bypass and now down</font>

286
00:14:17,250 --> 00:14:24,580
so finally I'd like<font color="#E5E5E5"> to show you the</font>

287
00:14:20,170 --> 00:14:26,860
<font color="#CCCCCC">performance evaluation</font><font color="#E5E5E5"> we conduct our we</font>

288
00:14:24,580 --> 00:14:29,560
conduct our experiments on a three point

289
00:14:26,860 --> 00:14:32,770
four gigahertz quad-core<font color="#CCCCCC"> hyper-threading</font>

290
00:14:29,560 --> 00:14:36,250
<font color="#E5E5E5">Intel i7 processor with sixteen</font><font color="#CCCCCC"> weigh</font>

291
00:14:32,770 --> 00:14:40,140
eight megabytes last level cache<font color="#CCCCCC"> sixteen</font>

292
00:14:36,250 --> 00:14:44,010
gigabyte<font color="#CCCCCC"> RAM 256 gigabyte SSD</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> a</font>

293
00:14:40,140 --> 00:14:47,290
<font color="#CCCCCC">freebsd 9.0 ported to</font><font color="#E5E5E5"> operation we</font><font color="#CCCCCC"> an</font>

294
00:14:44,010 --> 00:14:50,740
and we<font color="#CCCCCC"> have tested</font><font color="#E5E5E5"> various applications</font>

295
00:14:47,290 --> 00:14:53,050
including<font color="#CCCCCC"> compute intensive</font><font color="#E5E5E5"> not work</font>

296
00:14:50,740 --> 00:14:56,350
intensive and<font color="#CCCCCC"> thousands and applications</font>

297
00:14:53,050 --> 00:14:58,780
<font color="#E5E5E5">but here we just highlight a subset of</font>

298
00:14:56,350 --> 00:15:00,940
the applications to show the overhead

299
00:14:58,780 --> 00:15:03,040
<font color="#E5E5E5">that are sufficient to</font><font color="#CCCCCC"> show the overhead</font>

300
00:15:00,940 --> 00:15:05,440
of our defenses<font color="#E5E5E5"> and also the class of</font>

301
00:15:03,040 --> 00:15:09,750
the defenses including

302
00:15:05,440 --> 00:15:14,410
busy<font color="#CCCCCC"> - that comprises</font><font color="#E5E5E5"> a 32 megabyte file</font>

303
00:15:09,750 --> 00:15:18,910
trying that<font color="#CCCCCC"> compiles a file named GCC -</font>

304
00:15:14,410 --> 00:15:22,480
smaller lossy from<font color="#CCCCCC"> cpu slack</font><font color="#E5E5E5"> cpu 2017</font>

305
00:15:18,910 --> 00:15:25,300
and the new<font color="#E5E5E5"> PG a cryptography program</font>

306
00:15:22,480 --> 00:15:27,880
here<font color="#CCCCCC"> it has</font><font color="#E5E5E5"> the operation of signing</font>

307
00:15:25,300 --> 00:15:30,640
files of various sizes<font color="#CCCCCC"> and what</font><font color="#E5E5E5"> it does</font>

308
00:15:27,880 --> 00:15:33,700
is encode the file to a different<font color="#CCCCCC"> format</font>

309
00:15:30,640 --> 00:15:36,819
was private key and we modified

310
00:15:33,700 --> 00:15:39,430
<font color="#E5E5E5">malloc of</font><font color="#CCCCCC"> Lib</font><font color="#E5E5E5"> C dot a so that is linked</font>

311
00:15:36,820 --> 00:15:43,040
by all the applications to allocate the

312
00:15:39,430 --> 00:15:45,859
heap<font color="#E5E5E5"> into a secure user space</font>

313
00:15:43,040 --> 00:15:50,000
this<font color="#E5E5E5"> figure on the</font><font color="#CCCCCC"> Left</font><font color="#E5E5E5"> show the</font>

314
00:15:45,860 --> 00:15:52,790
overhead of operation we<font color="#E5E5E5"> am without any</font>

315
00:15:50,000 --> 00:15:57,920
defenses which are the blue bars<font color="#CCCCCC"> here</font>

316
00:15:52,790 --> 00:16:00,949
and the overhead<font color="#CCCCCC"> of operation we am with</font>

317
00:15:57,920 --> 00:16:02,990
only<font color="#E5E5E5"> page table defenses which are the</font>

318
00:16:00,949 --> 00:16:08,300
orange<font color="#CCCCCC"> bars here and the baseline here</font>

319
00:16:02,990 --> 00:16:11,240
<font color="#CCCCCC">is the</font><font color="#E5E5E5"> results on native FreeBSD 9.0 so</font>

320
00:16:08,300 --> 00:16:13,550
the or head<font color="#E5E5E5"> of water goes beyond</font><font color="#CCCCCC"> this of</font>

321
00:16:11,240 --> 00:16:15,829
is one point zero four and one point

322
00:16:13,550 --> 00:16:18,769
zero<font color="#E5E5E5"> three for</font><font color="#CCCCCC"> PCB to</font><font color="#E5E5E5"> and claim</font>

323
00:16:15,829 --> 00:16:22,609
respectfully and with<font color="#E5E5E5"> page table side</font>

324
00:16:18,769 --> 00:16:24,620
channel defenses<font color="#CCCCCC"> he or had</font><font color="#E5E5E5"> SD one point</font>

325
00:16:22,610 --> 00:16:26,930
<font color="#CCCCCC">zero four and</font><font color="#E5E5E5"> one point zero zero three</font>

326
00:16:24,620 --> 00:16:30,259
<font color="#E5E5E5">which means that page table side</font>

327
00:16:26,930 --> 00:16:32,859
channels<font color="#E5E5E5"> does not add a page table side</font>

328
00:16:30,259 --> 00:16:35,540
channel defenses<font color="#E5E5E5"> does not add any</font>

329
00:16:32,860 --> 00:16:38,600
<font color="#E5E5E5">additional or had a</font><font color="#CCCCCC"> penalty over here</font>

330
00:16:35,540 --> 00:16:40,670
the virtual<font color="#E5E5E5"> goes beyond</font><font color="#CCCCCC"> itself</font><font color="#E5E5E5"> so</font>

331
00:16:38,600 --> 00:16:42,680
<font color="#CCCCCC">disabling</font><font color="#E5E5E5"> lazy memory allocation for</font>

332
00:16:40,670 --> 00:16:44,810
secure user space<font color="#E5E5E5"> does not add</font>

333
00:16:42,680 --> 00:16:47,779
additional<font color="#E5E5E5"> overhead for visit to and</font>

334
00:16:44,810 --> 00:16:50,779
claim here because most<font color="#E5E5E5"> of memory</font>

335
00:16:47,779 --> 00:16:54,769
allocated<font color="#E5E5E5"> will be accessed in the</font>

336
00:16:50,779 --> 00:16:57,620
<font color="#E5E5E5">runtime but in contrast</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> good new PG</font>

337
00:16:54,769 --> 00:17:00,199
page table side channel defenses incurs

338
00:16:57,620 --> 00:17:03,350
the constant<font color="#E5E5E5"> overhead of around fourteen</font>

339
00:17:00,199 --> 00:17:05,658
millisecond across<font color="#E5E5E5"> oval sizes so in this</font>

340
00:17:03,350 --> 00:17:07,849
table<font color="#E5E5E5"> on the left the second column is</font>

341
00:17:05,659 --> 00:17:11,659
the<font color="#E5E5E5"> overhead</font><font color="#CCCCCC"> of proportional goes beyond</font>

342
00:17:07,849 --> 00:17:13,908
<font color="#E5E5E5">the self and third column it's not the</font>

343
00:17:11,659 --> 00:17:17,419
overhead is the extra execution time<font color="#E5E5E5"> if</font>

344
00:17:13,909 --> 00:17:19,760
the<font color="#E5E5E5"> water goes beyond itself and the</font>

345
00:17:17,419 --> 00:17:22,760
third<font color="#CCCCCC"> column shows the execution</font><font color="#E5E5E5"> time on</font>

346
00:17:19,760 --> 00:17:25,730
the<font color="#E5E5E5"> water ghost we am plus only page</font>

347
00:17:22,760 --> 00:17:28,429
table side channel defenses<font color="#E5E5E5"> and this</font>

348
00:17:25,730 --> 00:17:31,640
<font color="#E5E5E5">overhead comes from disabling the easy</font>

349
00:17:28,429 --> 00:17:34,159
memory allocation so when the<font color="#E5E5E5"> first time</font>

350
00:17:31,640 --> 00:17:36,890
that malloc is smoked for the secure

351
00:17:34,159 --> 00:17:40,549
user space after the allocates physical

352
00:17:36,890 --> 00:17:43,010
memory for the metadata if a<font color="#CCCCCC"> loki is a</font>

353
00:17:40,549 --> 00:17:46,490
large<font color="#E5E5E5"> memory region that is not aligned</font>

354
00:17:43,010 --> 00:17:48,799
<font color="#E5E5E5">but only the lines part of the memory</font>

355
00:17:46,490 --> 00:17:50,929
<font color="#E5E5E5">region is accessed in</font><font color="#CCCCCC"> the wrong time but</font>

356
00:17:48,799 --> 00:17:52,908
by disabling lazy memory memory

357
00:17:50,929 --> 00:17:55,909
allocation and<font color="#CCCCCC"> allocate</font><font color="#E5E5E5"> everything</font>

358
00:17:52,909 --> 00:17:57,110
<font color="#CCCCCC">around it will allocate physical memory</font>

359
00:17:55,909 --> 00:18:00,560
for the<font color="#E5E5E5"> Anna</font>

360
00:17:57,110 --> 00:18:03,050
<font color="#E5E5E5">remaining</font><font color="#CCCCCC"> eight gigabyte memory region -</font>

361
00:18:00,560 --> 00:18:05,330
which results in the overhead but

362
00:18:03,050 --> 00:18:09,409
overhead becomes negligible<font color="#CCCCCC"> as the</font>

363
00:18:05,330 --> 00:18:11,810
fellow size increases<font color="#E5E5E5"> and</font><font color="#CCCCCC"> for last level</font>

364
00:18:09,410 --> 00:18:15,530
cache side-channel<font color="#E5E5E5"> defenses we use a</font>

365
00:18:11,810 --> 00:18:19,520
simple<font color="#CCCCCC"> implementation</font><font color="#E5E5E5"> where we</font><font color="#CCCCCC"> dy the</font>

366
00:18:15,530 --> 00:18:21,649
cache<font color="#E5E5E5"> we partition the cache Saticoy we</font>

367
00:18:19,520 --> 00:18:24,560
assigned<font color="#CCCCCC"> twelve ways to add vacations</font>

368
00:18:21,650 --> 00:18:27,760
needing<font color="#CCCCCC"> production two ways to the OS</font>

369
00:18:24,560 --> 00:18:30,590
kernel and two ways<font color="#E5E5E5"> to aberration VM and</font>

370
00:18:27,760 --> 00:18:33,620
<font color="#E5E5E5">this cache partition of mechanism is</font>

371
00:18:30,590 --> 00:18:35,899
determined experimentally<font color="#E5E5E5"> which is</font>

372
00:18:33,620 --> 00:18:37,459
similar to<font color="#CCCCCC"> the baseline performance</font><font color="#E5E5E5"> and</font>

373
00:18:35,900 --> 00:18:42,770
we are going<font color="#E5E5E5"> to use it</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> our</font>

374
00:18:37,460 --> 00:18:46,730
evaluation<font color="#E5E5E5"> and this figure on the Left</font>

375
00:18:42,770 --> 00:18:49,310
shows<font color="#CCCCCC"> the overhead of</font><font color="#E5E5E5"> abhrush operation</font>

376
00:18:46,730 --> 00:18:53,330
<font color="#E5E5E5">VM without any defenses the blue bars</font>

377
00:18:49,310 --> 00:18:55,070
and the overhead<font color="#CCCCCC"> of operation</font><font color="#E5E5E5"> VM with</font>

378
00:18:53,330 --> 00:18:58,189
only<font color="#CCCCCC"> last our cache side-channel</font>

379
00:18:55,070 --> 00:19:01,100
defenses<font color="#E5E5E5"> so again last our cache</font>

380
00:18:58,190 --> 00:19:03,710
side-channel defenses does not add

381
00:19:01,100 --> 00:19:05,659
additional or head upon the<font color="#E5E5E5"> overhead the</font>

382
00:19:03,710 --> 00:19:12,320
border goes beyond<font color="#E5E5E5"> itself abusive</font><font color="#CCCCCC"> to</font>

383
00:19:05,660 --> 00:19:15,860
<font color="#CCCCCC">unclaimed</font><font color="#E5E5E5"> but for</font><font color="#CCCCCC"> gloom</font><font color="#E5E5E5"> PG it has</font>

384
00:19:12,320 --> 00:19:18,409
overhead and<font color="#E5E5E5"> that comes from switching</font>

385
00:19:15,860 --> 00:19:21,469
<font color="#CCCCCC">among</font><font color="#E5E5E5"> different cache partitions in the</font>

386
00:19:18,410 --> 00:19:23,780
<font color="#E5E5E5">wrong time switching</font><font color="#CCCCCC"> among applications</font>

387
00:19:21,470 --> 00:19:26,870
needing productions partition OS

388
00:19:23,780 --> 00:19:29,780
partition and the aberration<font color="#CCCCCC"> V</font><font color="#E5E5E5"> ends</font>

389
00:19:26,870 --> 00:19:32,540
partition so the<font color="#E5E5E5"> larger the fellow size</font>

390
00:19:29,780 --> 00:19:35,210
is the more read and write system calls

391
00:19:32,540 --> 00:19:37,970
are involved and<font color="#E5E5E5"> that</font><font color="#CCCCCC"> removed</font><font color="#E5E5E5"> that</font>

392
00:19:35,210 --> 00:19:40,690
results in more control<font color="#E5E5E5"> flow switching</font>

393
00:19:37,970 --> 00:19:44,540
among applications needing<font color="#CCCCCC"> protection</font>

394
00:19:40,690 --> 00:19:47,330
<font color="#E5E5E5">operation</font><font color="#CCCCCC"> VN and the OS which results in</font>

395
00:19:44,540 --> 00:19:50,480
more<font color="#E5E5E5"> cache partition switching but this</font>

396
00:19:47,330 --> 00:19:57,250
overhead becomes naturally negligible<font color="#E5E5E5"> or</font>

397
00:19:50,480 --> 00:20:00,560
the<font color="#CCCCCC"> file size increases so in some</font><font color="#E5E5E5"> a</font>

398
00:19:57,250 --> 00:20:03,500
<font color="#CCCCCC">compromise OS has complete control</font><font color="#E5E5E5"> all</font>

399
00:20:00,560 --> 00:20:05,600
the system resources<font color="#E5E5E5"> though that so that</font>

400
00:20:03,500 --> 00:20:07,820
it can<font color="#E5E5E5"> long it can make the existing</font>

401
00:20:05,600 --> 00:20:10,159
<font color="#E5E5E5">side channels worse and you can also</font>

402
00:20:07,820 --> 00:20:10,700
introduce new side channels<font color="#CCCCCC"> even though</font>

403
00:20:10,160 --> 00:20:13,520
shielding

404
00:20:10,700 --> 00:20:16,280
systems and<font color="#E5E5E5"> a compiled compiler based</font>

405
00:20:13,520 --> 00:20:19,280
approach<font color="#E5E5E5"> such as virtual ghost can be</font>

406
00:20:16,280 --> 00:20:21,740
leveraged<font color="#E5E5E5"> to implement to design and</font>

407
00:20:19,280 --> 00:20:25,550
implement<font color="#E5E5E5"> page table and last level</font>

408
00:20:21,740 --> 00:20:29,210
cache side-channel attacks<font color="#E5E5E5"> attack</font>

409
00:20:25,550 --> 00:20:32,690
defenses and our defenses come with low

410
00:20:29,210 --> 00:20:34,670
overhead<font color="#CCCCCC"> one to eighteen percent this</font><font color="#E5E5E5"> is</font>

411
00:20:32,690 --> 00:20:36,970
the end of my talk<font color="#CCCCCC"> I'll</font><font color="#E5E5E5"> be happy to take</font>

412
00:20:34,670 --> 00:20:36,970
any questions

413
00:20:39,760 --> 00:20:44,650
[Applause]

414
00:20:45,700 --> 00:20:52,700
hey thanks for<font color="#E5E5E5"> the talk was the overhead</font>

415
00:20:48,920 --> 00:20:55,220
on<font color="#CCCCCC"> top of the virtual ghost overhead</font><font color="#E5E5E5"> or</font>

416
00:20:52,700 --> 00:20:57,320
just a native system<font color="#CCCCCC"> running those</font>

417
00:20:55,220 --> 00:20:59,570
<font color="#CCCCCC">applications so the baseline</font><font color="#E5E5E5"> is the</font>

418
00:20:57,320 --> 00:21:04,610
native<font color="#CCCCCC"> freebsd running that those</font>

419
00:20:59,570 --> 00:21:06,260
applications<font color="#CCCCCC"> but but the others are</font>

420
00:21:04,610 --> 00:21:08,300
<font color="#E5E5E5">either running on the virtual goes</font>

421
00:21:06,260 --> 00:21:11,360
beyond myself<font color="#CCCCCC"> without any defenses</font><font color="#E5E5E5"> or</font>

422
00:21:08,300 --> 00:21:14,570
water<font color="#E5E5E5"> goes</font><font color="#CCCCCC"> beyond</font><font color="#E5E5E5"> with like one defense</font>

423
00:21:11,360 --> 00:21:16,370
<font color="#E5E5E5">okay so the</font><font color="#CCCCCC"> 18%</font><font color="#E5E5E5"> is plus the virtual</font>

424
00:21:14,570 --> 00:21:18,919
ghost overhead<font color="#E5E5E5"> yes it includes</font>

425
00:21:16,370 --> 00:21:20,209
<font color="#E5E5E5">everything the baseline is the freebsd</font>

426
00:21:18,920 --> 00:21:27,460
9.0<font color="#E5E5E5"> in other words</font>

427
00:21:20,210 --> 00:21:27,460
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> awesome thanks yeah other questions</font>

428
00:21:33,080 --> 00:21:41,659
hi<font color="#CCCCCC"> so from my understanding</font><font color="#E5E5E5"> that the</font>

429
00:21:37,920 --> 00:21:44,610
virtual ghost is a software<font color="#E5E5E5"> stack and</font>

430
00:21:41,660 --> 00:21:48,060
the motivation is that you are<font color="#E5E5E5"> proposing</font>

431
00:21:44,610 --> 00:21:50,219
a defense for a<font color="#E5E5E5"> compromise can you</font>

432
00:21:48,060 --> 00:21:53,129
elaborate on<font color="#CCCCCC"> the threat</font><font color="#E5E5E5"> model how would</font>

433
00:21:50,220 --> 00:21:55,770
you<font color="#CCCCCC"> assure that the virtual ghost itself</font>

434
00:21:53,130 --> 00:21:58,920
is not compromised<font color="#E5E5E5"> or how can</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> deploy</font>

435
00:21:55,770 --> 00:22:10,379
<font color="#CCCCCC">the system in a way that it can be</font>

436
00:21:58,920 --> 00:22:12,120
<font color="#CCCCCC">actually used so the sorry could you</font>

437
00:22:10,380 --> 00:22:14,760
please be more specific<font color="#E5E5E5"> a little bit</font>

438
00:22:12,120 --> 00:22:17,429
about it<font color="#CCCCCC"> so from my understanding</font><font color="#E5E5E5"> you</font>

439
00:22:14,760 --> 00:22:21,030
you want to defend against page table

440
00:22:17,430 --> 00:22:24,240
attack or attacks that's a<font color="#CCCCCC"> compromised</font>

441
00:22:21,030 --> 00:22:27,030
<font color="#CCCCCC">OS would conduct</font><font color="#E5E5E5"> but if the OS is</font>

442
00:22:24,240 --> 00:22:28,980
already compromised so how how can<font color="#E5E5E5"> you</font>

443
00:22:27,030 --> 00:22:31,950
assure that the virtual ghost is not

444
00:22:28,980 --> 00:22:34,760
compromised<font color="#E5E5E5"> so someone might modify that</font>

445
00:22:31,950 --> 00:22:38,730
policy and<font color="#CCCCCC"> again</font><font color="#E5E5E5"> perform the same attack</font>

446
00:22:34,760 --> 00:22:40,980
so on the water<font color="#E5E5E5"> goal system on the OS is</font>

447
00:22:38,730 --> 00:22:47,100
removed from the trusted<font color="#CCCCCC"> computing base</font>

448
00:22:40,980 --> 00:22:50,430
and and also<font color="#E5E5E5"> on OS is always</font>

449
00:22:47,100 --> 00:22:52,260
instrumented with<font color="#CCCCCC"> those instrumentation</font>

450
00:22:50,430 --> 00:22:54,480
it can be ensure that the OS does not

451
00:22:52,260 --> 00:22:58,379
perform<font color="#E5E5E5"> anything bad to corrupt water</font>

452
00:22:54,480 --> 00:23:01,230
goes BM<font color="#CCCCCC"> okay so the assumption is that</font>

453
00:22:58,380 --> 00:23:04,590
there<font color="#E5E5E5"> is a hypervisor running behind us</font>

454
00:23:01,230 --> 00:23:07,890
and that's<font color="#E5E5E5"> not compromised so only the</font>

455
00:23:04,590 --> 00:23:11,340
OS is compromised<font color="#CCCCCC"> uh yes and no so the</font>

456
00:23:07,890 --> 00:23:14,070
word<font color="#E5E5E5"> ghost BM is not using hypervisor as</font>

457
00:23:11,340 --> 00:23:17,399
using compiler instrumentation<font color="#E5E5E5"> so it's</font>

458
00:23:14,070 --> 00:23:20,639
running<font color="#CCCCCC"> under OS yeah so if the it's</font>

459
00:23:17,400 --> 00:23:23,130
like the same privilege not like OS and

460
00:23:20,640 --> 00:23:25,350
so<font color="#E5E5E5"> essentially it's a it's a in the form</font>

461
00:23:23,130 --> 00:23:27,870
of<font color="#E5E5E5"> share library</font><font color="#CCCCCC"> that when you compile</font>

462
00:23:25,350 --> 00:23:30,540
the kernel<font color="#CCCCCC"> it is linked where the kernel</font>

463
00:23:27,870 --> 00:23:32,760
<font color="#CCCCCC">and you always need sure that kernel is</font>

464
00:23:30,540 --> 00:23:35,570
instrumented was the compiler

465
00:23:32,760 --> 00:23:35,570
instrumentation

466
00:23:38,590 --> 00:24:08,100
<font color="#CCCCCC">less so it's like a hypervisor as you</font>

467
00:23:41,440 --> 00:24:11,260
said with<font color="#CCCCCC"> the assumption that this</font>

468
00:24:08,100 --> 00:24:16,658
interpreter itself is not compromised or

469
00:24:11,260 --> 00:24:18,460
the virtual<font color="#E5E5E5"> machine okay thanks</font>

470
00:24:16,659 --> 00:24:19,990
thank you<font color="#E5E5E5"> for the question</font><font color="#CCCCCC"> okay let's</font>

471
00:24:18,460 --> 00:24:20,710
give another<font color="#CCCCCC"> round</font><font color="#E5E5E5"> applause to other</font>

472
00:24:19,990 --> 00:24:23,839
<font color="#E5E5E5">speakers</font>

473
00:24:20,710 --> 00:24:23,839
[Applause]

