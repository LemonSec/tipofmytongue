1
00:00:10,190 --> 00:00:14,899
<font color="#E5E5E5">is the gas dilemma efficient code reuse</font>

2
00:00:12,350 --> 00:00:17,090
attacks against<font color="#CCCCCC"> interests reacts</font><font color="#E5E5E5"> and it</font>

3
00:00:14,900 --> 00:00:17,510
is joint work<font color="#E5E5E5"> between university of</font>

4
00:00:17,090 --> 00:00:20,300
padova

5
00:00:17,510 --> 00:00:22,880
<font color="#CCCCCC">University of this book</font><font color="#E5E5E5"> Essen and to you</font>

6
00:00:20,300 --> 00:00:24,410
<font color="#CCCCCC">damage tab so I guess most</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> you know</font>

7
00:00:22,880 --> 00:00:26,660
<font color="#CCCCCC">about the interest reacts it's an</font>

8
00:00:24,410 --> 00:00:29,360
extension<font color="#E5E5E5"> out to the x86</font><font color="#CCCCCC"> instruction set</font>

9
00:00:26,660 --> 00:00:31,970
that<font color="#E5E5E5"> allows applications to create I've</font>

10
00:00:29,360 --> 00:00:33,500
isolated memory areas known as enclaves

11
00:00:31,970 --> 00:00:36,649
<font color="#CCCCCC">which are not accessible to</font><font color="#E5E5E5"> the rest of</font>

12
00:00:33,500 --> 00:00:38,450
the system the way<font color="#CCCCCC"> it typically</font><font color="#E5E5E5"> goes is</font>

13
00:00:36,649 --> 00:00:41,720
applications can then interact with

14
00:00:38,450 --> 00:00:43,970
<font color="#E5E5E5">those enclaves by entering the</font><font color="#CCCCCC"> the</font>

15
00:00:41,720 --> 00:00:45,980
trusted<font color="#CCCCCC"> execution mode</font><font color="#E5E5E5"> the anklet is</font>

16
00:00:43,970 --> 00:00:47,060
going to do some computation and then

17
00:00:45,980 --> 00:00:51,140
<font color="#E5E5E5">it's going to exit back</font><font color="#CCCCCC"> to the</font>

18
00:00:47,060 --> 00:00:53,030
application<font color="#E5E5E5"> with a result all memory of</font>

19
00:00:51,140 --> 00:00:55,220
an end clip is encrypted<font color="#E5E5E5"> at the hardware</font>

20
00:00:53,030 --> 00:00:57,680
level<font color="#E5E5E5"> before being stored into physical</font>

21
00:00:55,220 --> 00:01:00,170
memory<font color="#E5E5E5"> and an important feature of</font><font color="#CCCCCC"> an</font>

22
00:00:57,680 --> 00:01:01,790
<font color="#E5E5E5">clip is that they can perform remote</font><font color="#CCCCCC"> the</font>

23
00:01:00,170 --> 00:01:04,159
station<font color="#E5E5E5"> with a server so they can prove</font>

24
00:01:01,790 --> 00:01:06,860
to a remote server<font color="#E5E5E5"> that they are running</font>

25
00:01:04,159 --> 00:01:10,369
<font color="#E5E5E5">securely on a genuine into platform</font><font color="#CCCCCC"> and</font>

26
00:01:06,860 --> 00:01:13,729
they have<font color="#E5E5E5"> now been tampered with the</font><font color="#CCCCCC"> HX</font>

27
00:01:10,369 --> 00:01:16,460
threat model has a very very<font color="#CCCCCC"> strong</font>

28
00:01:13,729 --> 00:01:18,649
<font color="#E5E5E5">attackers so if an application is</font>

29
00:01:16,460 --> 00:01:20,719
malicious that's not<font color="#E5E5E5"> problem</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> read</font>

30
00:01:18,649 --> 00:01:23,210
the anklet memory<font color="#E5E5E5"> if the kernel of</font><font color="#CCCCCC"> the</font>

31
00:01:20,719 --> 00:01:25,880
hypervisor<font color="#CCCCCC"> is malicious same thing can</font>

32
00:01:23,210 --> 00:01:28,609
read<font color="#E5E5E5"> the memory if we have a physical</font>

33
00:01:25,880 --> 00:01:30,229
attacker<font color="#CCCCCC"> even a physical attacker cannot</font>

34
00:01:28,609 --> 00:01:32,658
read the anklet memory because it<font color="#E5E5E5"> is</font>

35
00:01:30,229 --> 00:01:33,819
<font color="#CCCCCC">encrypted even on the bus on the</font><font color="#E5E5E5"> actual</font>

36
00:01:32,659 --> 00:01:37,520
physical board

37
00:01:33,819 --> 00:01:39,469
however interacting with the<font color="#CCCCCC"> raw CPU</font>

38
00:01:37,520 --> 00:01:43,609
instructions<font color="#CCCCCC"> projects is pretty complex</font>

39
00:01:39,469 --> 00:01:45,469
<font color="#E5E5E5">so Intel developed</font><font color="#CCCCCC"> and SGX SDK for</font>

40
00:01:43,609 --> 00:01:48,619
unclipped developers to make writing

41
00:01:45,469 --> 00:01:50,030
<font color="#E5E5E5">code easier so it is clear</font><font color="#CCCCCC"> now that SGX</font>

42
00:01:48,619 --> 00:01:52,729
provides extremely<font color="#E5E5E5"> strong isolation</font>

43
00:01:50,030 --> 00:01:59,029
thanks to its high<font color="#E5E5E5"> knack</font><font color="#CCCCCC"> about security</font>

44
00:01:52,729 --> 00:02:01,249
properties yeah that that's<font color="#E5E5E5"> not egos</font><font color="#CCCCCC"> so</font>

45
00:01:59,029 --> 00:02:04,700
latest attack was for<font color="#E5E5E5"> shadow it was</font>

46
00:02:01,249 --> 00:02:06,109
presented<font color="#CCCCCC"> here yesterday and it's an</font>

47
00:02:04,700 --> 00:02:07,939
attack based on meltdown<font color="#CCCCCC"> thank you</font><font color="#E5E5E5"> read</font>

48
00:02:06,109 --> 00:02:09,889
the whole<font color="#CCCCCC"> anklet memory</font><font color="#E5E5E5"> completely break</font>

49
00:02:07,939 --> 00:02:11,900
the security<font color="#CCCCCC"> model but we have add a</font>

50
00:02:09,889 --> 00:02:14,390
bunch of<font color="#CCCCCC"> side-channel honest</font><font color="#E5E5E5"> jacks for</font>

51
00:02:11,900 --> 00:02:16,459
<font color="#CCCCCC">ears</font><font color="#E5E5E5"> now this is not the</font><font color="#CCCCCC"> kind of attack</font>

52
00:02:14,390 --> 00:02:17,929
that<font color="#E5E5E5"> I'm going to talk</font><font color="#CCCCCC"> about today I'm</font>

53
00:02:16,459 --> 00:02:22,040
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about something a</font><font color="#E5E5E5"> little</font>

54
00:02:17,930 --> 00:02:23,960
less<font color="#E5E5E5"> exotic but as</font><font color="#CCCCCC"> Jax code is just</font>

55
00:02:22,040 --> 00:02:25,730
normal code that show

56
00:02:23,960 --> 00:02:28,010
<font color="#E5E5E5">it just runs</font><font color="#CCCCCC"> inside of an anklet</font><font color="#E5E5E5"> and it</font>

57
00:02:25,730 --> 00:02:29,899
can have bugs<font color="#E5E5E5"> especially we're</font>

58
00:02:28,010 --> 00:02:31,609
interested in memory corruption errors

59
00:02:29,900 --> 00:02:34,310
<font color="#CCCCCC">so if we have a memory corruption error</font>

60
00:02:31,610 --> 00:02:37,130
<font color="#CCCCCC">inside the anklet what are the</font>

61
00:02:34,310 --> 00:02:40,430
<font color="#E5E5E5">consequences what can we do and</font><font color="#CCCCCC"> how can</font>

62
00:02:37,130 --> 00:02:42,769
we mitigate against that<font color="#E5E5E5"> so I will</font><font color="#CCCCCC"> give</font>

63
00:02:40,430 --> 00:02:44,210
a very<font color="#CCCCCC"> quick background on control flow</font>

64
00:02:42,770 --> 00:02:46,220
attacks so<font color="#CCCCCC"> that we're</font><font color="#E5E5E5"> all in the</font><font color="#CCCCCC"> same</font>

65
00:02:44,210 --> 00:02:48,170
page we have<font color="#E5E5E5"> mainly two categories of</font>

66
00:02:46,220 --> 00:02:50,390
<font color="#E5E5E5">control flow attacks the first one is</font>

67
00:02:48,170 --> 00:02:52,100
<font color="#CCCCCC">called injection where the attacker</font>

68
00:02:50,390 --> 00:02:54,649
<font color="#E5E5E5">injects some code</font><font color="#CCCCCC"> into memory this is</font>

69
00:02:52,100 --> 00:02:57,920
typically<font color="#CCCCCC"> called shut code</font><font color="#E5E5E5"> and then by</font>

70
00:02:54,650 --> 00:02:59,990
<font color="#CCCCCC">using a</font><font color="#E5E5E5"> memory error</font><font color="#CCCCCC"> diverts execution</font>

71
00:02:57,920 --> 00:03:04,010
<font color="#E5E5E5">does control flow hijacking</font><font color="#CCCCCC"> to that</font>

72
00:02:59,990 --> 00:03:06,160
malicious<font color="#E5E5E5"> code the other sorry to</font>

73
00:03:04,010 --> 00:03:08,720
mitigate against this we can use

74
00:03:06,160 --> 00:03:12,650
<font color="#E5E5E5">mitigation such as write</font><font color="#CCCCCC"> X or</font><font color="#E5E5E5"> execute</font>

75
00:03:08,720 --> 00:03:15,490
that<font color="#E5E5E5"> stop code injection and also actual</font>

76
00:03:12,650 --> 00:03:17,960
<font color="#CCCCCC">replacement the other category of</font>

77
00:03:15,490 --> 00:03:20,030
control<font color="#CCCCCC"> flow attacks is code reuse</font>

78
00:03:17,960 --> 00:03:21,920
for example return oriented<font color="#E5E5E5"> program and</font>

79
00:03:20,030 --> 00:03:24,050
could reuse instead<font color="#E5E5E5"> of trying to inject</font>

80
00:03:21,920 --> 00:03:28,790
new<font color="#E5E5E5"> code we reuse code that's</font><font color="#CCCCCC"> read</font><font color="#E5E5E5"> in</font>

81
00:03:24,050 --> 00:03:30,590
<font color="#E5E5E5">the application but we choose some small</font>

82
00:03:28,790 --> 00:03:33,350
parts<font color="#E5E5E5"> of the application called gadgets</font>

83
00:03:30,590 --> 00:03:35,180
<font color="#E5E5E5">and we use techniques such as Rob to</font>

84
00:03:33,350 --> 00:03:39,260
<font color="#CCCCCC">chained together those gadgets so for</font>

85
00:03:35,180 --> 00:03:40,460
example<font color="#E5E5E5"> Rob chains together</font><font color="#CCCCCC"> get small</font>

86
00:03:39,260 --> 00:03:42,440
<font color="#CCCCCC">and strong</font><font color="#E5E5E5"> as most</font><font color="#CCCCCC"> sequences</font><font color="#E5E5E5"> of</font>

87
00:03:40,460 --> 00:03:43,910
<font color="#E5E5E5">instructions</font><font color="#CCCCCC"> that end in a return</font>

88
00:03:42,440 --> 00:03:45,440
instruction<font color="#CCCCCC"> through the stack so you</font>

89
00:03:43,910 --> 00:03:47,900
<font color="#E5E5E5">have one gadget to return to the next</font>

90
00:03:45,440 --> 00:03:49,910
one<font color="#E5E5E5"> on the chain to mitigate against</font>

91
00:03:47,900 --> 00:03:52,700
<font color="#E5E5E5">this we can</font><font color="#CCCCCC"> use control for integrity</font>

92
00:03:49,910 --> 00:03:55,130
<font color="#E5E5E5">and control flow integrity at compile</font>

93
00:03:52,700 --> 00:03:56,750
time compute the the possible valid

94
00:03:55,130 --> 00:03:59,680
control flow transfers in<font color="#E5E5E5"> the program</font>

95
00:03:56,750 --> 00:04:02,420
<font color="#E5E5E5">and then checks those at runtime</font><font color="#CCCCCC"> so</font>

96
00:03:59,680 --> 00:04:05,840
<font color="#CCCCCC">let's</font><font color="#E5E5E5"> look a bit at the</font><font color="#CCCCCC"> related work on</font>

97
00:04:02,420 --> 00:04:08,690
memory corruption<font color="#E5E5E5"> as</font><font color="#CCCCCC"> Jack's on the</font>

98
00:04:05,840 --> 00:04:12,170
attack side we have dark Rob when you

99
00:04:08,690 --> 00:04:13,850
<font color="#CCCCCC">want to</font><font color="#E5E5E5"> do Rob on a program you need</font>

100
00:04:12,170 --> 00:04:16,070
access<font color="#CCCCCC"> to the program binary</font><font color="#E5E5E5"> because you</font>

101
00:04:13,850 --> 00:04:17,719
have to analyze<font color="#CCCCCC"> it</font><font color="#E5E5E5"> and figure</font><font color="#CCCCCC"> out where</font>

102
00:04:16,070 --> 00:04:21,980
the gadgets are and what gadgets you

103
00:04:17,720 --> 00:04:25,040
have with as Jack's<font color="#E5E5E5"> it is possible to</font>

104
00:04:21,980 --> 00:04:27,230
create enclaves<font color="#E5E5E5"> that are not possible to</font>

105
00:04:25,040 --> 00:04:29,330
<font color="#E5E5E5">reverse engineer</font><font color="#CCCCCC"> because you can encrypt</font>

106
00:04:27,230 --> 00:04:32,240
the anklet<font color="#CCCCCC"> I wrap it</font><font color="#E5E5E5"> into a loader and</font>

107
00:04:29,330 --> 00:04:33,770
have a remote server<font color="#E5E5E5"> of the remote at</font>

108
00:04:32,240 --> 00:04:35,419
the station give you the key<font color="#E5E5E5"> and the</font>

109
00:04:33,770 --> 00:04:37,490
decryption happens inside of<font color="#E5E5E5"> us Jack's</font>

110
00:04:35,419 --> 00:04:39,680
memory and you cannot access<font color="#E5E5E5"> that</font>

111
00:04:37,490 --> 00:04:41,360
but<font color="#CCCCCC"> that crap showed that it is</font><font color="#E5E5E5"> actually</font>

112
00:04:39,680 --> 00:04:42,770
<font color="#E5E5E5">possible to find gadgets even if you</font>

113
00:04:41,360 --> 00:04:46,580
don't have<font color="#E5E5E5"> the code by the exploiting</font>

114
00:04:42,770 --> 00:04:49,250
certain<font color="#E5E5E5"> Oracle's based on the behavior</font>

115
00:04:46,580 --> 00:04:51,740
of the<font color="#CCCCCC"> anklet</font><font color="#E5E5E5"> when it crashes on</font><font color="#CCCCCC"> the</font>

116
00:04:49,250 --> 00:04:53,479
defense side<font color="#E5E5E5"> we have s jack shield and</font>

117
00:04:51,740 --> 00:04:56,419
as<font color="#E5E5E5"> Jack shield he's a very strong</font>

118
00:04:53,479 --> 00:04:58,789
hardening for as<font color="#CCCCCC"> chess</font><font color="#E5E5E5"> and clave</font><font color="#CCCCCC"> which</font>

119
00:04:56,419 --> 00:05:00,799
first of all performs<font color="#CCCCCC"> fine-grained</font>

120
00:04:58,789 --> 00:05:03,710
randomization<font color="#CCCCCC"> so it breaks</font><font color="#E5E5E5"> up the anklet</font>

121
00:05:00,800 --> 00:05:05,840
<font color="#E5E5E5">in very small chunks and randomly</font>

122
00:05:03,710 --> 00:05:08,000
permute<font color="#E5E5E5"> eights</font><font color="#CCCCCC"> those chunks at loading</font>

123
00:05:05,840 --> 00:05:10,638
time<font color="#E5E5E5"> so that the attacker does not know</font>

124
00:05:08,000 --> 00:05:13,819
where things<font color="#CCCCCC"> are</font><font color="#E5E5E5"> so even if the attacker</font>

125
00:05:10,639 --> 00:05:16,430
has<font color="#CCCCCC"> access to the binary</font><font color="#E5E5E5"> it doesn't know</font>

126
00:05:13,819 --> 00:05:18,979
the addresses of the<font color="#E5E5E5"> gadgets it also</font>

127
00:05:16,430 --> 00:05:21,340
employs a bunch of<font color="#E5E5E5"> other mitigation such</font>

128
00:05:18,979 --> 00:05:23,659
<font color="#E5E5E5">an updo extracts</font><font color="#CCCCCC"> control flow integrity</font>

129
00:05:21,340 --> 00:05:26,299
the other piece of<font color="#E5E5E5"> background that</font><font color="#CCCCCC"> I</font>

130
00:05:23,659 --> 00:05:28,819
need to<font color="#E5E5E5"> explain our attack is the</font><font color="#CCCCCC"> S</font>

131
00:05:26,300 --> 00:05:31,729
<font color="#CCCCCC">Jack's SDK because our attack is</font><font color="#E5E5E5"> an</font>

132
00:05:28,819 --> 00:05:35,060
attack on the SDK so<font color="#CCCCCC"> when you compile</font>

133
00:05:31,729 --> 00:05:37,099
something<font color="#E5E5E5"> with the SDK</font><font color="#CCCCCC"> the anklet code</font>

134
00:05:35,060 --> 00:05:38,479
goes<font color="#CCCCCC"> into the anklet binary application</font>

135
00:05:37,099 --> 00:05:42,199
code goes<font color="#CCCCCC"> into the application binary</font>

136
00:05:38,479 --> 00:05:43,940
but you also have certain<font color="#CCCCCC"> libraries that</font>

137
00:05:42,199 --> 00:05:46,159
are inserted<font color="#E5E5E5"> by the SDK</font><font color="#CCCCCC"> and in</font>

138
00:05:43,940 --> 00:05:48,680
particular where we focus<font color="#E5E5E5"> on two of them</font>

139
00:05:46,159 --> 00:05:50,719
<font color="#E5E5E5">the trusted</font><font color="#CCCCCC"> runtime system or tpms</font><font color="#E5E5E5"> which</font>

140
00:05:48,680 --> 00:05:53,389
runs inside<font color="#E5E5E5"> the anklet and the untrusted</font>

141
00:05:50,719 --> 00:05:56,780
<font color="#E5E5E5">runtime system or you</font><font color="#CCCCCC"> RTS which runs</font>

142
00:05:53,389 --> 00:05:58,400
outside<font color="#E5E5E5"> and those take care of entering</font>

143
00:05:56,780 --> 00:06:00,409
<font color="#E5E5E5">and exiting the</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> Club and abstracting</font>

144
00:05:58,400 --> 00:06:03,349
all those low-level<font color="#E5E5E5"> details about that</font>

145
00:06:00,409 --> 00:06:05,500
and<font color="#E5E5E5"> about passing data between the</font>

146
00:06:03,349 --> 00:06:10,009
boundary between<font color="#E5E5E5"> the anklet application</font>

147
00:06:05,500 --> 00:06:12,580
<font color="#CCCCCC">the SD SDK</font><font color="#E5E5E5"> also allows applications to</font>

148
00:06:10,009 --> 00:06:15,860
call functions<font color="#CCCCCC"> inside</font><font color="#E5E5E5"> of the anklet</font><font color="#CCCCCC"> and</font>

149
00:06:12,580 --> 00:06:17,630
those are called<font color="#CCCCCC"> echoes and we can also</font>

150
00:06:15,860 --> 00:06:19,460
go<font color="#CCCCCC"> the other</font><font color="#E5E5E5"> way around</font><font color="#CCCCCC"> and from the</font>

151
00:06:17,630 --> 00:06:22,240
anklet<font color="#CCCCCC"> of cofunctions in the untrusted</font>

152
00:06:19,460 --> 00:06:25,219
<font color="#CCCCCC">Ward and those are called all calls</font>

153
00:06:22,240 --> 00:06:27,080
moreover another<font color="#E5E5E5"> important feature is</font>

154
00:06:25,219 --> 00:06:29,120
that<font color="#CCCCCC"> the SDK allows for exception</font>

155
00:06:27,080 --> 00:06:32,120
handling<font color="#E5E5E5"> inside</font><font color="#CCCCCC"> the anklet</font><font color="#E5E5E5"> so when an</font>

156
00:06:29,120 --> 00:06:34,310
exception<font color="#E5E5E5"> happens</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> basically get an</font>

157
00:06:32,120 --> 00:06:36,949
interrupt to the kernel<font color="#CCCCCC"> the anklet is</font>

158
00:06:34,310 --> 00:06:38,599
stopped and<font color="#E5E5E5"> the kernel</font><font color="#CCCCCC"> guest interrupt</font>

159
00:06:36,949 --> 00:06:40,069
but<font color="#E5E5E5"> you want to handle</font><font color="#CCCCCC"> that exception</font>

160
00:06:38,599 --> 00:06:42,349
instead<font color="#E5E5E5"> of the anklet to protect the</font>

161
00:06:40,069 --> 00:06:43,759
anklet secrets<font color="#CCCCCC"> so what happens that the</font>

162
00:06:42,349 --> 00:06:46,010
kernel delivers a signal to the

163
00:06:43,759 --> 00:06:48,320
application<font color="#E5E5E5"> and then the</font><font color="#CCCCCC"> UART esnt RTS</font>

164
00:06:46,010 --> 00:06:49,820
work together<font color="#E5E5E5"> to dispatch that exception</font>

165
00:06:48,320 --> 00:06:53,240
<font color="#E5E5E5">instead of the anklet</font>

166
00:06:49,820 --> 00:06:55,909
and then it is handled<font color="#E5E5E5"> so now I can</font>

167
00:06:53,240 --> 00:06:57,770
<font color="#CCCCCC">finally explain</font><font color="#E5E5E5"> what their attack is so</font>

168
00:06:55,910 --> 00:07:00,220
first of all it's a novel called<font color="#E5E5E5"> Rio's</font>

169
00:06:57,770 --> 00:07:04,640
attack on<font color="#CCCCCC"> SGX</font><font color="#E5E5E5"> so just a new way to</font>

170
00:07:00,220 --> 00:07:06,860
combine gadgets into<font color="#CCCCCC"> a chain it reuses</font>

171
00:07:04,640 --> 00:07:09,080
<font color="#CCCCCC">Rob gadgets</font><font color="#E5E5E5"> so we do not define a new</font>

172
00:07:06,860 --> 00:07:10,730
kind<font color="#E5E5E5"> of gadget we use a gadget class</font>

173
00:07:09,080 --> 00:07:11,330
that's already<font color="#E5E5E5"> there there's tooling to</font>

174
00:07:10,730 --> 00:07:14,360
find it

175
00:07:11,330 --> 00:07:17,810
but<font color="#E5E5E5"> the most important thing is that</font><font color="#CCCCCC"> the</font>

176
00:07:14,360 --> 00:07:20,630
only<font color="#E5E5E5"> uses</font><font color="#CCCCCC"> the existing TRT has</font>

177
00:07:17,810 --> 00:07:22,550
<font color="#E5E5E5">functionality to achieve this now why</font>

178
00:07:20,630 --> 00:07:25,730
would we<font color="#E5E5E5"> want to do code reuse will</font>

179
00:07:22,550 --> 00:07:28,640
exist in<font color="#CCCCCC"> church yes functionality the</font>

180
00:07:25,730 --> 00:07:31,250
reason is first of<font color="#E5E5E5"> all the SDK is</font>

181
00:07:28,640 --> 00:07:32,690
<font color="#E5E5E5">widespread</font><font color="#CCCCCC"> so if we build an attack</font><font color="#E5E5E5"> that</font>

182
00:07:31,250 --> 00:07:35,390
<font color="#E5E5E5">is better than the SDK it's going to</font>

183
00:07:32,690 --> 00:07:37,190
apply<font color="#E5E5E5"> to a</font><font color="#CCCCCC"> lot of enclaves second it</font>

184
00:07:35,390 --> 00:07:39,680
makes exploitation easier as we are

185
00:07:37,190 --> 00:07:41,300
going<font color="#CCCCCC"> to see instead of chaining small</font>

186
00:07:39,680 --> 00:07:43,910
gadgets we can actually<font color="#E5E5E5"> go and chain</font>

187
00:07:41,300 --> 00:07:45,830
whole functions<font color="#E5E5E5"> and it makes writing</font>

188
00:07:43,910 --> 00:07:48,230
exploits really easier for the attacker

189
00:07:45,830 --> 00:07:50,810
<font color="#E5E5E5">but the most important thing I think is</font>

190
00:07:48,230 --> 00:07:54,770
<font color="#CCCCCC">that existing hardening does not cover</font>

191
00:07:50,810 --> 00:07:56,900
<font color="#E5E5E5">the</font><font color="#CCCCCC"> TRPs so for</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> SGX shield does</font>

192
00:07:54,770 --> 00:07:58,130
not<font color="#E5E5E5"> consider the</font><font color="#CCCCCC"> t RTS and this means</font>

193
00:07:56,900 --> 00:08:00,409
that<font color="#E5E5E5"> we can bypass it</font>

194
00:07:58,130 --> 00:08:03,530
thanks to our attack<font color="#E5E5E5"> so what's the basic</font>

195
00:08:00,410 --> 00:08:05,300
idea behind<font color="#E5E5E5"> it see that we have a</font>

196
00:08:03,530 --> 00:08:08,090
function it has<font color="#CCCCCC"> some memory</font><font color="#E5E5E5"> corruption</font>

197
00:08:05,300 --> 00:08:09,590
error<font color="#E5E5E5"> and we can exploit it we can do</font>

198
00:08:08,090 --> 00:08:11,989
control<font color="#E5E5E5"> for hijacking we can redirect</font>

199
00:08:09,590 --> 00:08:14,359
the program execution<font color="#E5E5E5"> instead of the</font>

200
00:08:11,990 --> 00:08:15,500
<font color="#CCCCCC">GRPs there are certain</font><font color="#E5E5E5"> functions we're</font>

201
00:08:14,360 --> 00:08:18,590
going to look at them in<font color="#CCCCCC"> more detail</font>

202
00:08:15,500 --> 00:08:20,510
<font color="#E5E5E5">later that restore state so that using</font>

203
00:08:18,590 --> 00:08:25,310
for<font color="#CCCCCC"> example in exception handling</font><font color="#E5E5E5"> I'll</font>

204
00:08:20,510 --> 00:08:28,159
call the<font color="#E5E5E5"> T</font><font color="#CCCCCC"> basically can set the whole</font>

205
00:08:25,310 --> 00:08:31,340
CPU<font color="#E5E5E5"> state so what the attacker can do</font>

206
00:08:28,160 --> 00:08:33,469
pretty<font color="#CCCCCC"> easily is use</font><font color="#E5E5E5"> that control flow</font>

207
00:08:31,340 --> 00:08:36,228
hijacking to call those state

208
00:08:33,469 --> 00:08:38,930
restoration function<font color="#CCCCCC"> paths in a whole</font>

209
00:08:36,229 --> 00:08:41,780
counterfeit<font color="#E5E5E5"> state another attacker has</font>

210
00:08:38,929 --> 00:08:44,959
control over<font color="#CCCCCC"> the</font><font color="#E5E5E5"> whole context of the</font>

211
00:08:41,780 --> 00:08:48,560
CPU<font color="#E5E5E5"> now you could do this with normal</font>

212
00:08:44,960 --> 00:08:50,750
<font color="#CCCCCC">rap but it's more complex</font><font color="#E5E5E5"> and it might</font>

213
00:08:48,560 --> 00:08:53,780
<font color="#CCCCCC">not bypass mitigation such as as</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> you</font>

214
00:08:50,750 --> 00:08:56,120
<font color="#E5E5E5">as</font><font color="#CCCCCC"> actual</font><font color="#E5E5E5"> when you have control the CPU</font>

215
00:08:53,780 --> 00:08:57,860
<font color="#E5E5E5">state you can then use this</font><font color="#CCCCCC"> to further</font>

216
00:08:56,120 --> 00:08:58,580
chain<font color="#E5E5E5"> order for example</font><font color="#CCCCCC"> function</font>

217
00:08:57,860 --> 00:09:01,130
invocations

218
00:08:58,580 --> 00:09:02,920
so we build our attack around<font color="#E5E5E5"> two</font>

219
00:09:01,130 --> 00:09:05,499
primitives<font color="#CCCCCC"> the</font>

220
00:09:02,920 --> 00:09:09,219
we call it the<font color="#CCCCCC"> Allred primitive</font><font color="#E5E5E5"> so this</font>

221
00:09:05,499 --> 00:09:11,970
comes from<font color="#E5E5E5"> the local mechanism so calls</font>

222
00:09:09,220 --> 00:09:15,819
from the anklet to the outside world

223
00:09:11,970 --> 00:09:18,670
<font color="#CCCCCC">william lee Conoco</font><font color="#E5E5E5"> the TRPs saves the</font>

224
00:09:15,819 --> 00:09:21,519
current execution<font color="#E5E5E5"> context into the stack</font>

225
00:09:18,670 --> 00:09:25,149
the anklets back in a<font color="#E5E5E5"> so-called</font><font color="#CCCCCC"> oak</font>

226
00:09:21,519 --> 00:09:28,829
<font color="#CCCCCC">whole frame then it exits the anklet</font><font color="#E5E5E5"> and</font>

227
00:09:25,149 --> 00:09:31,509
the you RTS calls<font color="#CCCCCC"> the entrusted function</font>

228
00:09:28,829 --> 00:09:34,469
when the entrusted function is<font color="#E5E5E5"> done the</font>

229
00:09:31,509 --> 00:09:37,720
you RTS re-enters the anklet and<font color="#CCCCCC"> T RTS</font>

230
00:09:34,470 --> 00:09:40,329
restores the previously saved context so

231
00:09:37,720 --> 00:09:43,059
that<font color="#E5E5E5"> we get back to the</font><font color="#CCCCCC"> call side</font><font color="#E5E5E5"> that</font>

232
00:09:40,329 --> 00:09:46,149
<font color="#CCCCCC">invoke</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> OCO</font><font color="#E5E5E5"> and we can go on</font><font color="#CCCCCC"> with</font>

233
00:09:43,059 --> 00:09:49,389
execution of the anklet from an attacker

234
00:09:46,149 --> 00:09:52,480
point of view<font color="#CCCCCC"> what you can do is you can</font>

235
00:09:49,389 --> 00:09:55,929
create a fake local frame so a fake

236
00:09:52,480 --> 00:09:58,869
context<font color="#E5E5E5"> for an</font><font color="#CCCCCC"> uncle and then you can do</font>

237
00:09:55,929 --> 00:10:00,639
<font color="#CCCCCC">control for hijacking in that context</font>

238
00:09:58,869 --> 00:10:02,470
restoration function it's called do or

239
00:10:00,639 --> 00:10:05,290
<font color="#E5E5E5">rat that's what the name</font><font color="#CCCCCC"> of primitive</font>

240
00:10:02,470 --> 00:10:06,730
comes from and you get a partial control

241
00:10:05,290 --> 00:10:08,169
of the context<font color="#E5E5E5"> so you don't control the</font>

242
00:10:06,730 --> 00:10:10,419
whole context but<font color="#E5E5E5"> you control just</font>

243
00:10:08,169 --> 00:10:12,429
enough to do what we have<font color="#CCCCCC"> to do however</font>

244
00:10:10,419 --> 00:10:14,559
<font color="#E5E5E5">to do this you need to</font><font color="#CCCCCC"> be able to</font>

245
00:10:12,429 --> 00:10:17,439
control this<font color="#CCCCCC"> the contents</font><font color="#E5E5E5"> of the stack</font>

246
00:10:14,559 --> 00:10:18,969
because do<font color="#E5E5E5"> all</font><font color="#CCCCCC"> red takes the context</font>

247
00:10:17,439 --> 00:10:21,819
from<font color="#CCCCCC"> the stack</font><font color="#E5E5E5"> but we're going to see</font>

248
00:10:18,970 --> 00:10:23,889
that<font color="#E5E5E5"> that is actually</font><font color="#CCCCCC"> possible the other</font>

249
00:10:21,819 --> 00:10:26,589
primitive that<font color="#E5E5E5"> we have we call it a</font>

250
00:10:23,889 --> 00:10:28,269
continued primitive<font color="#E5E5E5"> and in the continued</font>

251
00:10:26,589 --> 00:10:30,579
primitive and the<font color="#E5E5E5"> continued primitives</font>

252
00:10:28,269 --> 00:10:33,669
come comes from the exception handling

253
00:10:30,579 --> 00:10:37,329
<font color="#CCCCCC">mechanism of the</font><font color="#E5E5E5"> SDK so</font><font color="#CCCCCC"> it really</font>

254
00:10:33,669 --> 00:10:39,759
<font color="#E5E5E5">similar</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the overt primitive when an</font>

255
00:10:37,329 --> 00:10:42,008
exception happens<font color="#E5E5E5"> you exit</font><font color="#CCCCCC"> to the OS</font>

256
00:10:39,759 --> 00:10:43,869
<font color="#E5E5E5">then there's a little dance where you</font>

257
00:10:42,009 --> 00:10:45,879
<font color="#E5E5E5">re-enter the anklet and exit again and</font>

258
00:10:43,869 --> 00:10:47,439
<font color="#E5E5E5">enter it again</font><font color="#CCCCCC"> it doesn't matter right</font>

259
00:10:45,879 --> 00:10:49,899
now<font color="#E5E5E5"> if you want all the</font><font color="#CCCCCC"> details please</font>

260
00:10:47,439 --> 00:10:52,299
<font color="#E5E5E5">see</font><font color="#CCCCCC"> the paper</font><font color="#E5E5E5"> all right but what happens</font>

261
00:10:49,899 --> 00:10:55,600
in<font color="#E5E5E5"> the end is</font><font color="#CCCCCC"> that exception context is</font>

262
00:10:52,299 --> 00:10:58,360
saved<font color="#E5E5E5"> so then when we</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> back</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> the</font>

263
00:10:55,600 --> 00:11:00,369
<font color="#CCCCCC">end clip the TRPs takes over and</font><font color="#E5E5E5"> cause</font>

264
00:10:58,360 --> 00:11:02,289
the exception handlers and if the

265
00:11:00,369 --> 00:11:05,470
<font color="#E5E5E5">exception handle is determined that we</font>

266
00:11:02,289 --> 00:11:08,439
can resume from that exception then the

267
00:11:05,470 --> 00:11:10,600
<font color="#CCCCCC">TR TS restores</font><font color="#E5E5E5"> are the</font><font color="#CCCCCC"> safe</font><font color="#E5E5E5"> state and we</font>

268
00:11:08,439 --> 00:11:14,469
<font color="#E5E5E5">can abuse</font><font color="#CCCCCC"> this in very much</font><font color="#E5E5E5"> the same</font><font color="#CCCCCC"> way</font>

269
00:11:10,600 --> 00:11:16,390
as we did with<font color="#E5E5E5"> the</font><font color="#CCCCCC"> alright so attacker</font>

270
00:11:14,470 --> 00:11:19,420
creates a fake exception contact

271
00:11:16,390 --> 00:11:22,090
and then<font color="#CCCCCC"> control-flow hijacking into</font>

272
00:11:19,420 --> 00:11:24,040
that continue execution that restores

273
00:11:22,090 --> 00:11:27,430
<font color="#E5E5E5">the context this time with this</font>

274
00:11:24,040 --> 00:11:30,099
<font color="#CCCCCC">primitive we get full control of the CPU</font>

275
00:11:27,430 --> 00:11:32,890
<font color="#E5E5E5">state however the attacker needs to be</font>

276
00:11:30,100 --> 00:11:34,180
able<font color="#E5E5E5"> to control once if you register</font>

277
00:11:32,890 --> 00:11:36,819
before<font color="#CCCCCC"> which is</font><font color="#E5E5E5"> the register for the</font>

278
00:11:34,180 --> 00:11:38,739
first time so we<font color="#CCCCCC"> have those two</font>

279
00:11:36,820 --> 00:11:40,170
primitives<font color="#CCCCCC"> and they do slightly</font>

280
00:11:38,740 --> 00:11:42,700
different things with slightly different

281
00:11:40,170 --> 00:11:45,550
prerequisites but<font color="#E5E5E5"> we can combine them</font>

282
00:11:42,700 --> 00:11:48,730
actually<font color="#E5E5E5"> so we call this an Allred plus</font>

283
00:11:45,550 --> 00:11:51,040
<font color="#E5E5E5">continue</font><font color="#CCCCCC"> loop take the Allred primitive</font>

284
00:11:48,730 --> 00:11:52,660
you need control over the instruction

285
00:11:51,040 --> 00:11:54,520
pointer so that's control flow hijacking

286
00:11:52,660 --> 00:11:56,380
and you need control over the stack and

287
00:11:54,520 --> 00:11:57,910
<font color="#E5E5E5">when you have that you</font><font color="#CCCCCC"> can control the</font>

288
00:11:56,380 --> 00:11:59,770
instruction pointer<font color="#E5E5E5"> again and you can</font>

289
00:11:57,910 --> 00:12:01,990
control some registers and one of those

290
00:11:59,770 --> 00:12:04,710
register is<font color="#CCCCCC"> RDI which is the first</font>

291
00:12:01,990 --> 00:12:07,450
<font color="#E5E5E5">argument register the continue a</font>

292
00:12:04,710 --> 00:12:09,340
primitive needs again control of the

293
00:12:07,450 --> 00:12:10,690
instruction pointer<font color="#E5E5E5"> and control</font><font color="#CCCCCC"> over the</font>

294
00:12:09,340 --> 00:12:13,330
first argument<font color="#E5E5E5"> and gives you control</font>

295
00:12:10,690 --> 00:12:15,910
over<font color="#E5E5E5"> the whole</font><font color="#CCCCCC"> CPU context</font><font color="#E5E5E5"> including</font><font color="#CCCCCC"> the</font>

296
00:12:13,330 --> 00:12:17,770
instruction pointer<font color="#E5E5E5"> and stack so what we</font>

297
00:12:15,910 --> 00:12:19,839
can<font color="#E5E5E5"> do is we can</font><font color="#CCCCCC"> actually combine those</font>

298
00:12:17,770 --> 00:12:22,090
if we start from all<font color="#CCCCCC"> right</font>

299
00:12:19,840 --> 00:12:23,500
we can trigger the<font color="#CCCCCC"> continued primitive</font>

300
00:12:22,090 --> 00:12:25,270
<font color="#E5E5E5">and if you start</font><font color="#CCCCCC"> from the continued</font>

301
00:12:23,500 --> 00:12:28,690
primitive<font color="#E5E5E5"> we can trigger an already</font>

302
00:12:25,270 --> 00:12:30,310
primitive<font color="#E5E5E5"> now this is not</font><font color="#CCCCCC"> very</font>

303
00:12:28,690 --> 00:12:33,910
<font color="#E5E5E5">interesting on its own you're just</font>

304
00:12:30,310 --> 00:12:36,160
looping however<font color="#E5E5E5"> on the your</font><font color="#CCCCCC"> left-hand</font>

305
00:12:33,910 --> 00:12:38,980
<font color="#E5E5E5">side of that drawing</font>

306
00:12:36,160 --> 00:12:41,890
we have controlled stack<font color="#E5E5E5"> coming from the</font>

307
00:12:38,980 --> 00:12:44,590
continue execution primitive and if we

308
00:12:41,890 --> 00:12:49,120
have control stack<font color="#E5E5E5"> we can use that to</font>

309
00:12:44,590 --> 00:12:51,760
<font color="#E5E5E5">launch a rope gadget now we don't</font>

310
00:12:49,120 --> 00:12:53,500
<font color="#CCCCCC">necessarily it doesn't</font><font color="#E5E5E5"> necessarily</font><font color="#CCCCCC"> have</font>

311
00:12:51,760 --> 00:12:55,780
<font color="#CCCCCC">to</font><font color="#E5E5E5"> be as more up gadget</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> can be a</font>

312
00:12:53,500 --> 00:12:57,580
whole function<font color="#E5E5E5"> so instead of</font><font color="#CCCCCC"> chains more</font>

313
00:12:55,780 --> 00:12:59,770
gadgets we can change<font color="#E5E5E5"> whole functions</font>

314
00:12:57,580 --> 00:13:01,510
because the<font color="#E5E5E5"> continued primitive gives us</font>

315
00:12:59,770 --> 00:13:03,430
complete<font color="#E5E5E5"> control over the context and we</font>

316
00:13:01,510 --> 00:13:06,069
can set all<font color="#CCCCCC"> the arguments and everything</font>

317
00:13:03,430 --> 00:13:07,689
they want<font color="#E5E5E5"> then the drop gadget since we</font>

318
00:13:06,070 --> 00:13:11,160
control the stack is going<font color="#E5E5E5"> to return and</font>

319
00:13:07,690 --> 00:13:15,010
we<font color="#CCCCCC"> can make</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> return to do</font><font color="#E5E5E5"> read and</font>

320
00:13:11,160 --> 00:13:17,740
<font color="#E5E5E5">kick start the loop again so let's have</font>

321
00:13:15,010 --> 00:13:21,970
<font color="#CCCCCC">a look over</font><font color="#E5E5E5"> over the attack at a high</font>

322
00:13:17,740 --> 00:13:24,760
level<font color="#E5E5E5"> first off we prepare we am</font><font color="#CCCCCC"> find</font>

323
00:13:21,970 --> 00:13:27,580
the<font color="#E5E5E5"> gadget we design a</font><font color="#CCCCCC"> chain then we</font>

324
00:13:24,760 --> 00:13:30,189
prepare<font color="#E5E5E5"> a bunch of take structures</font><font color="#CCCCCC"> this</font>

325
00:13:27,580 --> 00:13:31,690
<font color="#CCCCCC">is</font><font color="#E5E5E5"> a little bit</font><font color="#CCCCCC"> time-consuming</font>

326
00:13:30,190 --> 00:13:34,390
first time<font color="#CCCCCC"> it occurred</font><font color="#E5E5E5"> does it but then</font>

327
00:13:31,690 --> 00:13:37,570
it's it's<font color="#E5E5E5"> basically the same for for all</font>

328
00:13:34,390 --> 00:13:40,120
attacks when we have those structures we

329
00:13:37,570 --> 00:13:41,620
launch our<font color="#E5E5E5"> attack so in this example I'm</font>

330
00:13:40,120 --> 00:13:43,030
launching it<font color="#CCCCCC"> from the</font><font color="#E5E5E5"> continued</font>

331
00:13:41,620 --> 00:13:45,310
primitive<font color="#E5E5E5"> but you can also launch from</font>

332
00:13:43,030 --> 00:13:47,319
<font color="#CCCCCC">all</font><font color="#E5E5E5"> right it doesn't</font><font color="#CCCCCC"> really matter it's</font>

333
00:13:45,310 --> 00:13:49,060
a loop anyway<font color="#E5E5E5"> so we launched the</font>

334
00:13:47,320 --> 00:13:51,670
<font color="#E5E5E5">continue primitive and that</font><font color="#CCCCCC"> continue</font>

335
00:13:49,060 --> 00:13:54,189
primitive is going to restore<font color="#CCCCCC"> a context</font>

336
00:13:51,670 --> 00:13:55,599
<font color="#E5E5E5">from a fake exception info that was set</font>

337
00:13:54,190 --> 00:13:58,240
up<font color="#E5E5E5"> by the attacker that's going to</font>

338
00:13:55,600 --> 00:14:01,060
transfer control<font color="#CCCCCC"> to gadget</font><font color="#E5E5E5"> one gadget</font>

339
00:13:58,240 --> 00:14:04,210
<font color="#E5E5E5">one then it is going to execute and</font>

340
00:14:01,060 --> 00:14:06,310
return through<font color="#CCCCCC"> the stack that we</font><font color="#E5E5E5"> had set</font>

341
00:14:04,210 --> 00:14:08,230
up<font color="#E5E5E5"> with a</font><font color="#CCCCCC"> continued primitive</font><font color="#E5E5E5"> and it's</font>

342
00:14:06,310 --> 00:14:09,880
going<font color="#E5E5E5"> to return</font><font color="#CCCCCC"> to the Oh red and with</font>

343
00:14:08,230 --> 00:14:13,570
the already we set up<font color="#E5E5E5"> a call to the</font>

344
00:14:09,880 --> 00:14:16,090
<font color="#E5E5E5">continued primitive again and and go</font>

345
00:14:13,570 --> 00:14:19,690
ahead<font color="#E5E5E5"> with a loop so let's look at an</font>

346
00:14:16,090 --> 00:14:21,310
example<font color="#E5E5E5"> of</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> you can use this there's</font>

347
00:14:19,690 --> 00:14:22,600
a vulnerable function and then we have

348
00:14:21,310 --> 00:14:25,180
some<font color="#E5E5E5"> other functions in the anklet for</font>

349
00:14:22,600 --> 00:14:27,430
<font color="#E5E5E5">example I get</font><font color="#CCCCCC"> key which gets a secret</font>

350
00:14:25,180 --> 00:14:29,439
some secret cryptographic key in the end

351
00:14:27,430 --> 00:14:31,510
clip and I'll send<font color="#E5E5E5"> file function which</font>

352
00:14:29,440 --> 00:14:34,450
<font color="#CCCCCC">then can send a five-four</font><font color="#E5E5E5"> to the</font>

353
00:14:31,510 --> 00:14:38,080
attacker for example in the<font color="#CCCCCC"> TRPs</font><font color="#E5E5E5"> we have</font>

354
00:14:34,450 --> 00:14:42,100
already<font color="#E5E5E5"> we have continued so we exploit</font>

355
00:14:38,080 --> 00:14:43,660
that vulnerability<font color="#E5E5E5"> we get control</font><font color="#CCCCCC"> for in</font>

356
00:14:42,100 --> 00:14:45,040
<font color="#E5E5E5">this case for</font><font color="#CCCCCC"> example we</font><font color="#E5E5E5"> get control</font><font color="#CCCCCC"> of</font>

357
00:14:43,660 --> 00:14:46,900
the instruction pointer and the stack<font color="#CCCCCC"> so</font>

358
00:14:45,040 --> 00:14:50,699
let's say<font color="#E5E5E5"> if this is for example</font><font color="#CCCCCC"> a stack</font>

359
00:14:46,900 --> 00:14:55,510
overflow<font color="#E5E5E5"> using that we trigger</font><font color="#CCCCCC"> all red</font>

360
00:14:50,700 --> 00:14:57,430
<font color="#E5E5E5">from all</font><font color="#CCCCCC"> red we</font><font color="#E5E5E5"> can trigger continue we</font>

361
00:14:55,510 --> 00:14:59,110
have full<font color="#E5E5E5"> control and now we can just</font>

362
00:14:57,430 --> 00:15:02,469
<font color="#CCCCCC">make arbitrary</font><font color="#E5E5E5"> function calls for</font>

363
00:14:59,110 --> 00:15:04,360
example to get key which<font color="#E5E5E5"> get some key</font>

364
00:15:02,470 --> 00:15:07,240
writes it to<font color="#E5E5E5"> some place</font><font color="#CCCCCC"> in memory for</font>

365
00:15:04,360 --> 00:15:10,960
example<font color="#CCCCCC"> the stack now we can may get key</font>

366
00:15:07,240 --> 00:15:12,210
return<font color="#CCCCCC"> - all right</font><font color="#E5E5E5"> I do the same trick</font>

367
00:15:10,960 --> 00:15:15,250
all over again

368
00:15:12,210 --> 00:15:19,839
reset the whole context<font color="#E5E5E5"> call send file</font>

369
00:15:15,250 --> 00:15:23,730
and send a key over to<font color="#E5E5E5"> the attacker now</font>

370
00:15:19,839 --> 00:15:28,270
how do<font color="#E5E5E5"> we apply this to</font><font color="#CCCCCC"> s</font><font color="#E5E5E5"> Jack shield so</font>

371
00:15:23,730 --> 00:15:30,070
this chip shield<font color="#E5E5E5"> is based on the</font><font color="#CCCCCC"> SGX SDK</font>

372
00:15:28,270 --> 00:15:33,550
<font color="#CCCCCC">so when you</font><font color="#E5E5E5"> compile something</font><font color="#CCCCCC"> with us</font>

373
00:15:30,070 --> 00:15:35,110
check shield the<font color="#CCCCCC"> include a code</font><font color="#E5E5E5"> get</font>

374
00:15:33,550 --> 00:15:40,329
split<font color="#CCCCCC"> up in a bunch of randomization</font>

375
00:15:35,110 --> 00:15:43,660
units but also you get the SDK libraries

376
00:15:40,330 --> 00:15:44,230
in<font color="#E5E5E5"> the enclaved memory space at loading</font>

377
00:15:43,660 --> 00:15:46,600
time

378
00:15:44,230 --> 00:15:49,690
those<font color="#E5E5E5"> randomization</font><font color="#CCCCCC"> union units are</font>

379
00:15:46,600 --> 00:15:53,290
randomly permutated<font color="#E5E5E5"> it's very</font>

380
00:15:49,690 --> 00:15:56,430
fine-grained<font color="#E5E5E5"> however the</font><font color="#CCCCCC"> TRPs</font><font color="#E5E5E5"> is not</font>

381
00:15:53,290 --> 00:15:59,589
randomized<font color="#E5E5E5"> so how can we exploit this</font>

382
00:15:56,430 --> 00:16:00,699
well<font color="#CCCCCC"> I take</font><font color="#E5E5E5"> an X check shield as a few</font>

383
00:15:59,589 --> 00:16:01,740
challenges the first<font color="#CCCCCC"> one is the</font>

384
00:16:00,699 --> 00:16:04,750
randomization

385
00:16:01,740 --> 00:16:07,510
however<font color="#CCCCCC"> like we said the TRPs is not</font>

386
00:16:04,750 --> 00:16:10,779
randomized<font color="#CCCCCC"> and our code reuse</font><font color="#E5E5E5"> is based</font>

387
00:16:07,510 --> 00:16:13,569
on the<font color="#E5E5E5"> TRPs so we can beat the</font>

388
00:16:10,779 --> 00:16:17,829
randomization by reusing non randomized

389
00:16:13,570 --> 00:16:21,040
code the other thing is we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> control</font>

390
00:16:17,829 --> 00:16:25,239
<font color="#CCCCCC">for integrity in as</font><font color="#E5E5E5"> check shield which</font>

391
00:16:21,040 --> 00:16:28,420
could break our attack however<font color="#E5E5E5"> we found</font>

392
00:16:25,240 --> 00:16:31,420
some issues<font color="#E5E5E5"> in the instrumentation of</font>

393
00:16:28,420 --> 00:16:35,199
<font color="#E5E5E5">the</font><font color="#CCCCCC"> return edges of s check shield for</font>

394
00:16:31,420 --> 00:16:38,860
all the<font color="#E5E5E5"> details please see</font><font color="#CCCCCC"> the paper</font><font color="#E5E5E5"> but</font>

395
00:16:35,199 --> 00:16:41,349
the the main takeaway is that<font color="#E5E5E5"> all read</font>

396
00:16:38,860 --> 00:16:43,660
is actually<font color="#CCCCCC"> possible</font><font color="#E5E5E5"> honest check shield</font>

397
00:16:41,350 --> 00:16:47,980
<font color="#E5E5E5">so we can use</font><font color="#CCCCCC"> already</font><font color="#E5E5E5"> to bootstrap the</font>

398
00:16:43,660 --> 00:16:51,519
whole thing and and<font color="#E5E5E5"> achieve our attack</font>

399
00:16:47,980 --> 00:16:53,260
<font color="#E5E5E5">so how sorry plus there are some other</font>

400
00:16:51,519 --> 00:16:54,610
mitigations<font color="#CCCCCC"> honest check shield</font>

401
00:16:53,260 --> 00:16:57,399
however those<font color="#E5E5E5"> are implemented in</font>

402
00:16:54,610 --> 00:16:59,740
software<font color="#E5E5E5"> and they are dependent</font><font color="#CCCCCC"> on CFI</font>

403
00:16:57,399 --> 00:17:04,569
so once<font color="#CCCCCC"> the CFI Falls the</font><font color="#E5E5E5"> other</font>

404
00:16:59,740 --> 00:17:07,120
medications fall so how do we exploit

405
00:17:04,569 --> 00:17:09,699
this check shield<font color="#E5E5E5"> well the first thing</font>

406
00:17:07,119 --> 00:17:15,250
that<font color="#E5E5E5"> we do is</font><font color="#CCCCCC"> that we hijack a return</font>

407
00:17:09,699 --> 00:17:18,459
edge<font color="#CCCCCC"> like I</font><font color="#E5E5E5"> said the</font><font color="#CCCCCC"> CA the CFI for</font>

408
00:17:15,250 --> 00:17:22,839
return edges is not it's<font color="#E5E5E5"> not properly</font>

409
00:17:18,459 --> 00:17:26,890
<font color="#E5E5E5">instrumented then we actually use the</font>

410
00:17:22,839 --> 00:17:28,960
<font color="#CCCCCC">Allred</font><font color="#E5E5E5"> plus continue</font><font color="#CCCCCC"> loop to write some</font>

411
00:17:26,890 --> 00:17:31,120
shout go to memories so<font color="#CCCCCC"> initiate shield</font>

412
00:17:28,960 --> 00:17:32,799
<font color="#E5E5E5">you actually have some a</font><font color="#CCCCCC"> rata bond</font>

413
00:17:31,120 --> 00:17:34,120
executable memory that's a<font color="#E5E5E5"> limitation of</font>

414
00:17:32,799 --> 00:17:36,030
<font color="#CCCCCC">s checks when you have to do the</font>

415
00:17:34,120 --> 00:17:38,709
randomization<font color="#CCCCCC"> this as checks version 1</font>

416
00:17:36,030 --> 00:17:41,200
<font color="#E5E5E5">and that's why</font><font color="#CCCCCC"> WX rax is implemented in</font>

417
00:17:38,710 --> 00:17:43,059
software<font color="#E5E5E5"> we jump to that</font><font color="#CCCCCC"> shellcode and</font>

418
00:17:41,200 --> 00:17:46,210
<font color="#E5E5E5">then we have our shellcode just steal</font>

419
00:17:43,059 --> 00:17:48,399
and<font color="#E5E5E5"> clip keys and send them over</font><font color="#CCCCCC"> to the</font>

420
00:17:46,210 --> 00:17:50,230
attacker<font color="#CCCCCC"> and you can basically do</font>

421
00:17:48,400 --> 00:17:51,610
<font color="#CCCCCC">anything but still in</font><font color="#E5E5E5"> cases probably one</font>

422
00:17:50,230 --> 00:17:53,200
of the most interesting<font color="#E5E5E5"> things</font><font color="#CCCCCC"> that you</font>

423
00:17:51,610 --> 00:17:57,280
<font color="#CCCCCC">can do to</font><font color="#E5E5E5"> end shell to anise Jax and</font>

424
00:17:53,200 --> 00:18:00,040
<font color="#E5E5E5">clay now as for mitigations</font>

425
00:17:57,280 --> 00:18:02,710
we can think about<font color="#E5E5E5"> hardening the SDK</font>

426
00:18:00,040 --> 00:18:05,080
itself so making<font color="#CCCCCC"> it harder to fake those</font>

427
00:18:02,710 --> 00:18:07,240
structures<font color="#CCCCCC"> and we can do that by</font>

428
00:18:05,080 --> 00:18:08,860
<font color="#CCCCCC">basically</font><font color="#E5E5E5"> embedding secrets into the</font>

429
00:18:07,240 --> 00:18:10,840
structure that<font color="#CCCCCC"> the attacker does not</font>

430
00:18:08,860 --> 00:18:12,580
know you can directly<font color="#CCCCCC"> bet the secret or</font>

431
00:18:10,840 --> 00:18:14,500
you could<font color="#E5E5E5"> mangle for example pointer by</font>

432
00:18:12,580 --> 00:18:16,990
<font color="#CCCCCC">echoing them with the secret this is</font>

433
00:18:14,500 --> 00:18:19,120
used in quite<font color="#E5E5E5"> a few</font><font color="#CCCCCC"> libraries so for</font>

434
00:18:16,990 --> 00:18:23,950
example<font color="#CCCCCC"> the</font><font color="#E5E5E5"> new</font><font color="#CCCCCC"> Lib C does that for some</font>

435
00:18:19,120 --> 00:18:27,639
structures or we could do external

436
00:18:23,950 --> 00:18:29,950
hardening<font color="#E5E5E5"> and one idea could be let this</font>

437
00:18:27,640 --> 00:18:32,890
extend extracts shield which is<font color="#E5E5E5"> actually</font>

438
00:18:29,950 --> 00:18:37,570
pretty good<font color="#CCCCCC"> let's just extend</font><font color="#E5E5E5"> it to also</font>

439
00:18:32,890 --> 00:18:41,620
randomize the SDK code and another idea

440
00:18:37,570 --> 00:18:43,060
<font color="#E5E5E5">would be to have strongest</font><font color="#CCCCCC"> CFI so the</font>

441
00:18:41,620 --> 00:18:45,280
CFI in a<font color="#CCCCCC"> stretch shield is very</font>

442
00:18:43,060 --> 00:18:47,740
<font color="#E5E5E5">coarse-grained we could make it more</font>

443
00:18:45,280 --> 00:18:50,290
fine-grain obviously there are some

444
00:18:47,740 --> 00:18:52,180
<font color="#E5E5E5">performance issues there</font><font color="#CCCCCC"> but that's</font>

445
00:18:50,290 --> 00:18:56,139
<font color="#CCCCCC">certainly something</font><font color="#E5E5E5"> that we could look</font>

446
00:18:52,180 --> 00:18:58,180
into so what did we<font color="#CCCCCC"> learn as checks</font>

447
00:18:56,140 --> 00:19:00,550
present significant<font color="#E5E5E5"> challenges are when</font>

448
00:18:58,180 --> 00:19:04,480
designing hardness<font color="#CCCCCC"> games</font><font color="#E5E5E5"> first of all</font>

449
00:19:00,550 --> 00:19:07,090
the attacker is very strong but the<font color="#E5E5E5"> real</font>

450
00:19:04,480 --> 00:19:09,730
<font color="#E5E5E5">takeaway I think is that the SDK can</font>

451
00:19:07,090 --> 00:19:11,470
increase the anklets<font color="#E5E5E5"> attack surface</font>

452
00:19:09,730 --> 00:19:13,600
you're introducing<font color="#E5E5E5"> more code in your</font>

453
00:19:11,470 --> 00:19:16,150
trusted base<font color="#E5E5E5"> you have powerful</font>

454
00:19:13,600 --> 00:19:18,580
primitives in it and there is<font color="#E5E5E5"> low</font><font color="#CCCCCC"> level</font>

455
00:19:16,150 --> 00:19:22,930
code that is pretty<font color="#E5E5E5"> much hidden from</font>

456
00:19:18,580 --> 00:19:26,080
sight<font color="#E5E5E5"> and which comes from</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> TRPs so</font>

457
00:19:22,930 --> 00:19:28,630
concluding<font color="#E5E5E5"> we present in a new code</font>

458
00:19:26,080 --> 00:19:32,320
reuse attack on interest reacts<font color="#E5E5E5"> we use</font>

459
00:19:28,630 --> 00:19:34,510
kind<font color="#E5E5E5"> of hidden</font><font color="#CCCCCC"> forgotten code in CRTs</font><font color="#E5E5E5"> to</font>

460
00:19:32,320 --> 00:19:37,570
<font color="#E5E5E5">bypass even state-of-the-art hardening</font>

461
00:19:34,510 --> 00:19:39,640
and this really<font color="#E5E5E5"> underlines the need to</font>

462
00:19:37,570 --> 00:19:41,980
consider the implication of<font color="#CCCCCC"> using the</font>

463
00:19:39,640 --> 00:19:44,830
<font color="#CCCCCC">SDK and</font><font color="#E5E5E5"> extended that trusted computing</font>

464
00:19:41,980 --> 00:19:46,870
base<font color="#E5E5E5"> thank you for your attention and</font>

465
00:19:44,830 --> 00:19:52,220
I'm happy<font color="#E5E5E5"> to take questions</font>

466
00:19:46,870 --> 00:19:55,010
[Applause]

467
00:19:52,220 --> 00:19:57,390
we've got time<font color="#CCCCCC"> for</font><font color="#E5E5E5"> a few</font><font color="#CCCCCC"> questions</font>

468
00:19:55,010 --> 00:20:00,510
hi<font color="#E5E5E5"> John</font><font color="#CCCCCC"> Frizzle from</font><font color="#E5E5E5"> University of</font>

469
00:19:57,390 --> 00:20:04,800
Rochester<font color="#E5E5E5"> nice talk um so it</font><font color="#CCCCCC"> looks to me</font>

470
00:20:00,510 --> 00:20:06,660
<font color="#CCCCCC">that your attack is is corrupting</font><font color="#E5E5E5"> you</font>

471
00:20:04,800 --> 00:20:09,060
know save<font color="#E5E5E5"> program</font><font color="#CCCCCC"> state or manufacturing</font>

472
00:20:06,660 --> 00:20:10,800
save<font color="#E5E5E5"> program state</font><font color="#CCCCCC"> this is something</font>

473
00:20:09,060 --> 00:20:12,030
that<font color="#E5E5E5"> we dealt with in the operating</font>

474
00:20:10,800 --> 00:20:14,190
<font color="#E5E5E5">system kernel</font><font color="#CCCCCC"> in the secure virtual</font>

475
00:20:12,030 --> 00:20:16,139
architectural plan of work so<font color="#CCCCCC"> SVA coffee</font>

476
00:20:14,190 --> 00:20:20,610
and virtual<font color="#E5E5E5"> ghost and now apparition as</font>

477
00:20:16,140 --> 00:20:22,650
well<font color="#E5E5E5"> um I'm a little</font><font color="#CCCCCC"> bit confused by</font>

478
00:20:20,610 --> 00:20:23,879
<font color="#E5E5E5">your proposed defenses right so it seems</font>

479
00:20:22,650 --> 00:20:25,500
like<font color="#E5E5E5"> what's happening here is that</font>

480
00:20:23,880 --> 00:20:27,720
<font color="#E5E5E5">you're you have</font><font color="#CCCCCC"> a slight problem with</font>

481
00:20:25,500 --> 00:20:29,910
<font color="#E5E5E5">your</font><font color="#CCCCCC"> CFI</font><font color="#E5E5E5"> and then perhaps you're not</font>

482
00:20:27,720 --> 00:20:34,500
protecting the you know save program

483
00:20:29,910 --> 00:20:37,170
<font color="#E5E5E5">state with SFI right so um is that</font>

484
00:20:34,500 --> 00:20:39,570
<font color="#E5E5E5">correct or</font><font color="#CCCCCC"> am I missing something so</font>

485
00:20:37,170 --> 00:20:41,730
there<font color="#E5E5E5"> are a few</font><font color="#CCCCCC"> issues there so</font>

486
00:20:39,570 --> 00:20:45,330
certainly<font color="#CCCCCC"> the CFI is one is</font><font color="#E5E5E5"> one of them</font>

487
00:20:41,730 --> 00:20:47,520
if we<font color="#E5E5E5"> have strongest CFIA</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> so see if</font><font color="#CCCCCC"> I</font>

488
00:20:45,330 --> 00:20:48,899
<font color="#CCCCCC">incorrectly implement it because</font><font color="#E5E5E5"> I don't</font>

489
00:20:47,520 --> 00:20:49,920
think<font color="#CCCCCC"> you need</font><font color="#E5E5E5"> fine-grain see if</font><font color="#CCCCCC"> I you</font>

490
00:20:48,900 --> 00:20:51,960
just<font color="#CCCCCC"> need to</font><font color="#E5E5E5"> make sure your</font>

491
00:20:49,920 --> 00:20:54,750
instrumentation isn't jumped over the

492
00:20:51,960 --> 00:20:57,270
the<font color="#E5E5E5"> CFI</font><font color="#CCCCCC"> enos check shield has some</font>

493
00:20:54,750 --> 00:21:01,140
issues with return edges yeah<font color="#E5E5E5"> okay so</font>

494
00:20:57,270 --> 00:21:04,680
<font color="#E5E5E5">that makes it all</font><font color="#CCCCCC"> possible</font><font color="#E5E5E5"> okay all</font>

495
00:21:01,140 --> 00:21:07,380
<font color="#E5E5E5">right but then is the is the state</font>

496
00:21:04,680 --> 00:21:11,400
<font color="#CCCCCC">actually protected with SFI or not</font>

497
00:21:07,380 --> 00:21:13,790
<font color="#CCCCCC">no</font><font color="#E5E5E5"> so that is</font><font color="#CCCCCC"> actually that</font><font color="#E5E5E5"> is actually</font>

498
00:21:11,400 --> 00:21:13,790
a good<font color="#E5E5E5"> idea</font>

499
00:21:13,880 --> 00:21:18,630
protecting the the safe state we SFI

500
00:21:16,620 --> 00:21:21,870
yeah so there is a part of the state

501
00:21:18,630 --> 00:21:23,100
which<font color="#CCCCCC"> is protected by a SFI</font><font color="#E5E5E5"> which is the</font>

502
00:21:21,870 --> 00:21:25,770
state and is saved by the hardware

503
00:21:23,100 --> 00:21:27,810
<font color="#E5E5E5">itself</font><font color="#CCCCCC"> but the state and is saved by the</font>

504
00:21:25,770 --> 00:21:30,060
<font color="#E5E5E5">software that's not protecting with</font>

505
00:21:27,810 --> 00:21:32,010
<font color="#CCCCCC">testify</font><font color="#E5E5E5"> okay so I think the lessons from</font>

506
00:21:30,060 --> 00:21:33,750
<font color="#CCCCCC">SBA may be applicable here it I'd like</font>

507
00:21:32,010 --> 00:21:38,520
<font color="#CCCCCC">to chat</font><font color="#E5E5E5"> further on offline if that's all</font>

508
00:21:33,750 --> 00:21:40,890
right<font color="#E5E5E5"> thanks</font><font color="#CCCCCC"> I have two questions first</font>

509
00:21:38,520 --> 00:21:49,260
<font color="#CCCCCC">of</font><font color="#E5E5E5"> all why do you</font><font color="#CCCCCC"> need or why is the</font>

510
00:21:40,890 --> 00:21:50,700
randomization<font color="#CCCCCC"> so basically one of</font><font color="#E5E5E5"> the</font>

511
00:21:49,260 --> 00:21:54,870
things<font color="#CCCCCC"> that we're</font><font color="#E5E5E5"> exploiting here is</font>

512
00:21:50,700 --> 00:21:57,240
that as<font color="#CCCCCC"> check shield</font><font color="#E5E5E5"> basically does not</font>

513
00:21:54,870 --> 00:21:59,550
take the SDK into consideration<font color="#E5E5E5"> and so</font>

514
00:21:57,240 --> 00:22:01,800
that piece of code<font color="#E5E5E5"> that we are using is</font>

515
00:21:59,550 --> 00:22:03,710
not<font color="#E5E5E5"> randomized and so we can actually</font>

516
00:22:01,800 --> 00:22:06,559
<font color="#E5E5E5">figure out where it is</font><font color="#CCCCCC"> in memory</font>

517
00:22:03,710 --> 00:22:12,710
because the actual anklet code<font color="#E5E5E5"> it's it's</font>

518
00:22:06,559 --> 00:22:16,070
all<font color="#CCCCCC"> permutated them require code</font><font color="#E5E5E5"> secrecy</font>

519
00:22:12,710 --> 00:22:19,340
sorry<font color="#E5E5E5"> all of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> mitigations you're</font>

520
00:22:16,070 --> 00:22:24,769
proposing require code secrecy<font color="#CCCCCC"> I know</font>

521
00:22:19,340 --> 00:22:28,959
what they don't they<font color="#CCCCCC"> so no the meeting</font>

522
00:22:24,769 --> 00:22:31,850
<font color="#CCCCCC">oh sorry wrong deception of</font><font color="#E5E5E5"> code secrecy</font>

523
00:22:28,960 --> 00:22:34,429
<font color="#E5E5E5">so you were referring to</font><font color="#CCCCCC"> those right</font>

524
00:22:31,850 --> 00:22:36,590
they do not require<font color="#CCCCCC"> that</font><font color="#E5E5E5"> first coat</font>

525
00:22:34,429 --> 00:22:39,559
<font color="#E5E5E5">secrecy</font><font color="#CCCCCC"> I guess I just don't</font><font color="#E5E5E5"> understand</font>

526
00:22:36,590 --> 00:22:41,749
why you need randomization<font color="#E5E5E5"> there's no if</font>

527
00:22:39,559 --> 00:22:43,668
you randomize it properly<font color="#E5E5E5"> the attacker</font>

528
00:22:41,749 --> 00:22:48,460
cannot figure<font color="#E5E5E5"> out where it is</font>

529
00:22:43,669 --> 00:22:51,460
so reusing it is pretty difficult<font color="#CCCCCC"> okay</font>

530
00:22:48,460 --> 00:22:51,460
<font color="#E5E5E5">thanks</font>

531
00:22:51,710 --> 00:22:59,480
<font color="#E5E5E5">all right yeah let's thank our</font><font color="#CCCCCC"> speaker</font>

532
00:22:53,820 --> 00:22:59,480
[Applause]

