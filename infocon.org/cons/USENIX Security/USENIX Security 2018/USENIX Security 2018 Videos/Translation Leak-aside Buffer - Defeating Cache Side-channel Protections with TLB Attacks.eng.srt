1
00:00:10,680 --> 00:00:14,670
hello everyone my name is<font color="#E5E5E5"> Ben grass I'm</font>

2
00:00:12,690 --> 00:00:16,770
from the food<font color="#CCCCCC"> sexism</font><font color="#E5E5E5"> security research</font>

3
00:00:14,670 --> 00:00:19,980
<font color="#E5E5E5">group in Amsterdam and I'm going to talk</font>

4
00:00:16,770 --> 00:00:24,119
<font color="#CCCCCC">about teal bleep deserve this is a side</font>

5
00:00:19,980 --> 00:00:25,740
channel attack that is just like

6
00:00:24,119 --> 00:00:28,770
<font color="#E5E5E5">Stepford was saying in a totally</font>

7
00:00:25,740 --> 00:00:34,470
<font color="#CCCCCC">different way able to bypass cache</font>

8
00:00:28,770 --> 00:00:37,050
defenses so we know from from experience

9
00:00:34,470 --> 00:00:38,489
and<font color="#E5E5E5"> from</font><font color="#CCCCCC"> if you went</font><font color="#E5E5E5"> to the talk</font><font color="#CCCCCC"> they're</font>

10
00:00:37,050 --> 00:00:41,910
<font color="#E5E5E5">probably more examples but this morning</font>

11
00:00:38,489 --> 00:00:45,269
<font color="#E5E5E5">I saw this data talk which using by</font>

12
00:00:41,910 --> 00:00:47,339
collecting traces<font color="#E5E5E5"> that by</font><font color="#CCCCCC"> new zoo</font><font color="#E5E5E5"> it</font>

13
00:00:45,269 --> 00:00:48,839
turns out<font color="#E5E5E5"> that even today Kappa graphic</font>

14
00:00:47,339 --> 00:00:52,710
algorithms are still implemented using

15
00:00:48,839 --> 00:00:58,440
these by accidentally doing<font color="#E5E5E5"> secret</font>

16
00:00:52,710 --> 00:01:00,539
dependent memory<font color="#E5E5E5"> accesses right and it</font>

17
00:00:58,440 --> 00:01:03,120
turns out it's<font color="#CCCCCC"> just very hard to</font>

18
00:01:00,539 --> 00:01:05,040
implement<font color="#E5E5E5"> these cryptographic algorithms</font>

19
00:01:03,120 --> 00:01:07,860
in a<font color="#E5E5E5"> completely constant time totally</font>

20
00:01:05,040 --> 00:01:09,630
secret independent<font color="#E5E5E5"> kind of way</font><font color="#CCCCCC"> so what</font>

21
00:01:07,860 --> 00:01:12,450
we would<font color="#CCCCCC"> really like is to have these</font>

22
00:01:09,630 --> 00:01:14,369
<font color="#E5E5E5">completely generic cache defenses like</font>

23
00:01:12,450 --> 00:01:15,840
Stefan was saying you so that you<font color="#E5E5E5"> don't</font>

24
00:01:14,370 --> 00:01:18,240
have to control<font color="#CCCCCC"> what</font><font color="#E5E5E5"> the compiler does</font>

25
00:01:15,840 --> 00:01:20,070
yet have to control<font color="#E5E5E5"> for what the</font>

26
00:01:18,240 --> 00:01:21,449
microarchitecture does<font color="#E5E5E5"> or even worse</font>

27
00:01:20,070 --> 00:01:24,240
predict what these<font color="#E5E5E5"> things will do in the</font>

28
00:01:21,450 --> 00:01:27,800
<font color="#E5E5E5">future and generically deploys</font><font color="#CCCCCC"> defense</font>

29
00:01:24,240 --> 00:01:31,350
and still be safe against such<font color="#CCCCCC"> a context</font>

30
00:01:27,800 --> 00:01:33,360
now of course we would<font color="#E5E5E5"> like these</font>

31
00:01:31,350 --> 00:01:35,580
another there have been many cache

32
00:01:33,360 --> 00:01:37,650
defenses proposed and what<font color="#E5E5E5"> I'd like</font><font color="#CCCCCC"> to</font>

33
00:01:35,580 --> 00:01:39,840
talk<font color="#CCCCCC"> about in this talk is well if you</font>

34
00:01:37,650 --> 00:01:41,190
do that then there are<font color="#E5E5E5"> still other macro</font>

35
00:01:39,840 --> 00:01:42,930
<font color="#E5E5E5">objects to resources</font><font color="#CCCCCC"> that are shared</font>

36
00:01:41,190 --> 00:01:44,550
between<font color="#E5E5E5"> hyper</font><font color="#CCCCCC"> threads that can keep</font>

37
00:01:42,930 --> 00:01:47,970
still cause<font color="#CCCCCC"> problems and let's look</font><font color="#E5E5E5"> at</font>

38
00:01:44,550 --> 00:01:49,620
one<font color="#CCCCCC"> of these so for</font><font color="#E5E5E5"> this talk I'm gonna</font>

39
00:01:47,970 --> 00:01:52,289
<font color="#E5E5E5">look but at sorry channels in general</font>

40
00:01:49,620 --> 00:01:54,720
<font color="#E5E5E5">cache</font><font color="#CCCCCC"> tags in particular how</font><font color="#E5E5E5"> tl</font><font color="#CCCCCC"> bleed</font>

41
00:01:52,290 --> 00:02:02,880
fits into that<font color="#E5E5E5"> and what</font><font color="#CCCCCC"> that means</font><font color="#E5E5E5"> for</font>

42
00:01:54,720 --> 00:02:05,130
<font color="#CCCCCC">us and how it</font><font color="#E5E5E5"> works Oh better than that</font>

43
00:02:02,880 --> 00:02:07,530
<font color="#E5E5E5">okay so</font><font color="#CCCCCC"> cache structure so sorry</font>

44
00:02:05,130 --> 00:02:10,288
channels in general<font color="#E5E5E5"> I like this visual</font>

45
00:02:07,530 --> 00:02:12,090
you can the<font color="#CCCCCC"> idea of side channels is</font>

46
00:02:10,288 --> 00:02:15,059
<font color="#CCCCCC">that you kind of abuse how the system</font>

47
00:02:12,090 --> 00:02:17,310
works<font color="#CCCCCC"> to leak secrets</font><font color="#E5E5E5"> from that system</font>

48
00:02:15,060 --> 00:02:19,620
<font color="#E5E5E5">so if you're very early safes had this</font>

49
00:02:17,310 --> 00:02:21,090
vulnerability<font color="#E5E5E5"> that you could</font><font color="#CCCCCC"> hear with a</font>

50
00:02:19,620 --> 00:02:22,890
stethoscope these tumblers<font color="#E5E5E5"> ticking in</font>

51
00:02:21,090 --> 00:02:23,880
place one<font color="#CCCCCC"> by one so you can break the</font>

52
00:02:22,890 --> 00:02:25,760
combination one

53
00:02:23,880 --> 00:02:29,370
<font color="#E5E5E5">instead of all at once there was a</font>

54
00:02:25,760 --> 00:02:32,100
massive<font color="#CCCCCC"> effort saver if you want to</font>

55
00:02:29,370 --> 00:02:34,050
break safes<font color="#E5E5E5"> and I'm</font><font color="#CCCCCC"> going to use the</font>

56
00:02:32,100 --> 00:02:37,980
<font color="#E5E5E5">same</font><font color="#CCCCCC"> example that Stefan was using in</font>

57
00:02:34,050 --> 00:02:39,780
the cash world we have we have very

58
00:02:37,980 --> 00:02:41,760
similar phenomenon you and in<font color="#E5E5E5"> this case</font>

59
00:02:39,780 --> 00:02:42,930
a<font color="#CCCCCC"> EST double zero so Stefan was talking</font>

60
00:02:41,760 --> 00:02:44,399
about<font color="#CCCCCC"> all</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> attack this using</font>

61
00:02:42,930 --> 00:02:47,370
primary probe<font color="#E5E5E5"> I'm going to use the</font>

62
00:02:44,400 --> 00:02:49,230
<font color="#CCCCCC">freshman flush</font><font color="#E5E5E5"> and reload example not</font>

63
00:02:47,370 --> 00:02:51,650
<font color="#E5E5E5">our work of course as you will know but</font>

64
00:02:49,230 --> 00:02:55,590
<font color="#E5E5E5">just to set</font><font color="#CCCCCC"> the stage</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> to set</font><font color="#E5E5E5"> the</font>

65
00:02:51,650 --> 00:02:57,180
<font color="#CCCCCC">scenery a yes implications using t2</font><font color="#E5E5E5"> if</font>

66
00:02:55,590 --> 00:03:00,840
they use tea tables that means that we

67
00:02:57,180 --> 00:03:02,700
do<font color="#E5E5E5"> secret dependent accesses</font><font color="#CCCCCC"> as you can</font>

68
00:03:00,840 --> 00:03:05,610
see here the index in the tea table<font color="#E5E5E5"> is</font>

69
00:03:02,700 --> 00:03:09,739
the<font color="#CCCCCC"> Czar of</font><font color="#E5E5E5"> a plaintext byte and a round</font>

70
00:03:05,610 --> 00:03:13,020
key<font color="#E5E5E5"> byte and that means that if</font><font color="#CCCCCC"> we can</font>

71
00:03:09,740 --> 00:03:14,640
find in the cache when and where<font color="#E5E5E5"> these</font>

72
00:03:13,020 --> 00:03:16,830
<font color="#E5E5E5">excesses happen we have a very strong</font>

73
00:03:14,640 --> 00:03:18,720
correlation<font color="#CCCCCC"> between</font><font color="#E5E5E5"> the plaintiffs by</font>

74
00:03:16,830 --> 00:03:20,160
<font color="#E5E5E5">the bus process and the cache line</font><font color="#CCCCCC"> that</font>

75
00:03:18,720 --> 00:03:20,670
was active so<font color="#E5E5E5"> we can deduce the Playtex</font>

76
00:03:20,160 --> 00:03:23,340
<font color="#E5E5E5">byte</font>

77
00:03:20,670 --> 00:03:26,429
therefore deduce the key this<font color="#CCCCCC"> is a</font>

78
00:03:23,340 --> 00:03:29,580
diagram<font color="#E5E5E5"> from the cloak paper which</font><font color="#CCCCCC"> is a</font>

79
00:03:26,430 --> 00:03:31,310
project that proposes a generic cache

80
00:03:29,580 --> 00:03:33,780
defense that<font color="#E5E5E5"> we're going to talk about</font>

81
00:03:31,310 --> 00:03:35,820
so here's another example<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we're</font>

82
00:03:33,780 --> 00:03:38,850
<font color="#E5E5E5">going to show you</font><font color="#CCCCCC"> a trace of this is the</font>

83
00:03:35,820 --> 00:03:40,500
non<font color="#E5E5E5"> side channel proof version of the</font>

84
00:03:38,850 --> 00:03:42,239
<font color="#CCCCCC">Lib G cube ACC point scalar</font>

85
00:03:40,500 --> 00:03:45,210
multiplication function and as you can

86
00:03:42,240 --> 00:03:46,860
<font color="#CCCCCC">see in the</font><font color="#E5E5E5"> last two lines the execution</font>

87
00:03:45,210 --> 00:03:49,430
is strongly<font color="#CCCCCC"> dependent on</font><font color="#E5E5E5"> the secret</font>

88
00:03:46,860 --> 00:03:52,530
value<font color="#E5E5E5"> the secret value is scalar and</font>

89
00:03:49,430 --> 00:03:56,340
that's only if the scalar is<font color="#E5E5E5"> one</font><font color="#CCCCCC"> did we</font>

90
00:03:52,530 --> 00:03:57,990
do the add function now so I don't<font color="#CCCCCC"> want</font>

91
00:03:56,340 --> 00:04:01,230
<font color="#E5E5E5">to misrepresent Lib G</font><font color="#CCCCCC"> crypt here there's</font>

92
00:03:57,990 --> 00:04:02,520
a different side of the bench which<font color="#CCCCCC"> is</font>

93
00:04:01,230 --> 00:04:04,109
<font color="#E5E5E5">more side so we're going to talk</font><font color="#CCCCCC"> about</font>

94
00:04:02,520 --> 00:04:05,610
<font color="#E5E5E5">that later</font><font color="#CCCCCC"> and an even newer version</font>

95
00:04:04,110 --> 00:04:07,320
which is even<font color="#CCCCCC"> more</font><font color="#E5E5E5"> so channel proof but</font>

96
00:04:05,610 --> 00:04:09,060
part of<font color="#E5E5E5"> the story is showing well</font>

97
00:04:07,320 --> 00:04:10,890
there's this considers there's like this

98
00:04:09,060 --> 00:04:12,660
cat and mouse<font color="#CCCCCC"> getting going</font><font color="#E5E5E5"> on from the</font>

99
00:04:10,890 --> 00:04:14,910
<font color="#CCCCCC">Crippler implementers</font><font color="#E5E5E5"> versus attackers</font>

100
00:04:12,660 --> 00:04:16,469
and<font color="#E5E5E5"> every time one side makes a step the</font>

101
00:04:14,910 --> 00:04:17,790
<font color="#E5E5E5">other side makes an even clever step so</font>

102
00:04:16,470 --> 00:04:19,680
there's<font color="#E5E5E5"> this that is kind of</font><font color="#CCCCCC"> a</font>

103
00:04:17,790 --> 00:04:21,210
<font color="#E5E5E5">motivation for well let's have generic</font>

104
00:04:19,680 --> 00:04:24,600
defense so we don't have<font color="#E5E5E5"> to rely on this</font>

105
00:04:21,209 --> 00:04:26,820
winning this<font color="#E5E5E5"> cat-and-mouse game so how</font>

106
00:04:24,600 --> 00:04:29,490
this might<font color="#CCCCCC"> look in the</font><font color="#E5E5E5"> cache is this so</font>

107
00:04:26,820 --> 00:04:31,740
we<font color="#CCCCCC"> have the the blue signal is if the</font>

108
00:04:29,490 --> 00:04:34,410
scalar<font color="#CCCCCC"> is</font><font color="#E5E5E5"> zero which is only duplication</font>

109
00:04:31,740 --> 00:04:37,170
<font color="#E5E5E5">and the green signal is when the scalar</font>

110
00:04:34,410 --> 00:04:41,100
<font color="#E5E5E5">is one which is duplicate</font>

111
00:04:37,170 --> 00:04:42,480
and<font color="#CCCCCC"> add so you can see there's a huge</font>

112
00:04:41,100 --> 00:04:44,100
difference<font color="#CCCCCC"> in the cash activity</font>

113
00:04:42,480 --> 00:04:45,690
so let's align if you align them both

114
00:04:44,100 --> 00:04:47,790
<font color="#CCCCCC">you can see this so that there's a</font>

115
00:04:45,690 --> 00:04:49,440
duplication<font color="#E5E5E5"> and the if the thing is if</font>

116
00:04:47,790 --> 00:04:50,940
the<font color="#E5E5E5"> scatter is zero and there's the</font>

117
00:04:49,440 --> 00:04:52,170
addition if the scalar is<font color="#E5E5E5"> one comes</font>

118
00:04:50,940 --> 00:04:53,670
<font color="#CCCCCC">after it</font><font color="#E5E5E5"> right so you can see that this</font>

119
00:04:52,170 --> 00:04:55,290
<font color="#CCCCCC">pattern</font><font color="#E5E5E5"> is very very different if you</font>

120
00:04:53,670 --> 00:05:02,400
could pick<font color="#E5E5E5"> up on this pattern you</font><font color="#CCCCCC"> can</font>

121
00:04:55,290 --> 00:05:04,920
deduce the<font color="#CCCCCC"> secret secret key bit so one</font>

122
00:05:02,400 --> 00:05:06,870
version<font color="#E5E5E5"> later we see that the version</font>

123
00:05:04,920 --> 00:05:08,430
changed into this which is one just

124
00:05:06,870 --> 00:05:09,960
unconditionally just do<font color="#CCCCCC"> it both all the</font>

125
00:05:08,430 --> 00:05:12,620
<font color="#E5E5E5">time let's just unconditionally do the</font>

126
00:05:09,960 --> 00:05:15,630
duplication<font color="#CCCCCC"> I conditionally do the</font>

127
00:05:12,620 --> 00:05:17,340
addition<font color="#E5E5E5"> and multiplication I mean I</font>

128
00:05:15,630 --> 00:05:19,500
mean<font color="#E5E5E5"> addition sorry</font>

129
00:05:17,340 --> 00:05:21,330
and then well look at the<font color="#E5E5E5"> cash trace now</font>

130
00:05:19,500 --> 00:05:23,420
<font color="#E5E5E5">no matter if the scale of it is zero or</font>

131
00:05:21,330 --> 00:05:26,969
it's one in both case you see we see

132
00:05:23,420 --> 00:05:28,380
exactly<font color="#E5E5E5"> the same</font><font color="#CCCCCC"> cash trace rise</font><font color="#E5E5E5"> well if</font>

133
00:05:26,970 --> 00:05:31,470
you<font color="#E5E5E5"> look very carefully if the bit is</font>

134
00:05:28,380 --> 00:05:33,150
<font color="#E5E5E5">one right at the end in the green when</font>

135
00:05:31,470 --> 00:05:36,030
when the trace is green<font color="#E5E5E5"> right at the end</font>

136
00:05:33,150 --> 00:05:38,909
we see a little more<font color="#E5E5E5"> activity bloom</font>

137
00:05:36,030 --> 00:05:40,799
<font color="#E5E5E5">there see so if you look carefully that</font>

138
00:05:38,910 --> 00:05:42,720
<font color="#E5E5E5">becomes clear on this trace at the end</font>

139
00:05:40,800 --> 00:05:45,090
we see<font color="#CCCCCC"> glint just a little bit more and</font>

140
00:05:42,720 --> 00:05:46,320
that's<font color="#E5E5E5"> the conditional use research of</font>

141
00:05:45,090 --> 00:05:48,750
the results<font color="#E5E5E5"> because</font><font color="#CCCCCC"> we only want to use</font>

142
00:05:46,320 --> 00:05:52,020
<font color="#E5E5E5">the</font><font color="#CCCCCC"> the duplication</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> multiplet the</font>

143
00:05:48,750 --> 00:05:54,150
addition result if<font color="#E5E5E5"> the scalar is</font><font color="#CCCCCC"> one and</font>

144
00:05:52,020 --> 00:05:56,280
<font color="#CCCCCC">that</font><font color="#E5E5E5"> last little glitch that you see is</font>

145
00:05:54,150 --> 00:05:58,950
<font color="#E5E5E5">the conditional using of the</font><font color="#CCCCCC"> result so</font>

146
00:05:56,280 --> 00:06:00,960
<font color="#CCCCCC">that this code</font><font color="#E5E5E5"> is much more side-channel</font>

147
00:05:58,950 --> 00:06:02,700
proof than the first version but there's

148
00:06:00,960 --> 00:06:08,250
still like this little imperfection

149
00:06:02,700 --> 00:06:09,330
that's there and<font color="#E5E5E5"> can be exploited so it</font>

150
00:06:08,250 --> 00:06:11,250
wouldn't<font color="#E5E5E5"> be nice if we didn't have to</font>

151
00:06:09,330 --> 00:06:14,010
<font color="#E5E5E5">worry about</font><font color="#CCCCCC"> all that so let's look at an</font>

152
00:06:11,250 --> 00:06:17,580
example<font color="#E5E5E5"> of Defense uses that uses Intel</font>

153
00:06:14,010 --> 00:06:19,680
TSX I'm gonna explain<font color="#CCCCCC"> that quickly</font><font color="#E5E5E5"> so</font>

154
00:06:17,580 --> 00:06:23,400
Intel TSX is this<font color="#E5E5E5"> a very nice feature</font>

155
00:06:19,680 --> 00:06:26,970
which allows<font color="#CCCCCC"> you to</font><font color="#E5E5E5"> have memory</font>

156
00:06:23,400 --> 00:06:28,590
transactions and so what<font color="#CCCCCC"> that</font><font color="#E5E5E5"> means is</font>

157
00:06:26,970 --> 00:06:29,970
that you can start a transaction<font color="#E5E5E5"> do a</font>

158
00:06:28,590 --> 00:06:33,359
bunch of stuff<font color="#E5E5E5"> in memory and either then</font>

159
00:06:29,970 --> 00:06:37,560
committed or abort it and because of how

160
00:06:33,360 --> 00:06:39,810
that<font color="#E5E5E5"> works</font><font color="#CCCCCC"> the whole transaction</font><font color="#E5E5E5"> must</font>

161
00:06:37,560 --> 00:06:41,340
fit in the cache<font color="#E5E5E5"> because as soon as the</font>

162
00:06:39,810 --> 00:06:43,530
<font color="#E5E5E5">data goes</font><font color="#CCCCCC"> to ram there's no way to</font><font color="#E5E5E5"> undo</font>

163
00:06:41,340 --> 00:06:44,940
<font color="#E5E5E5">anymore of</font><font color="#CCCCCC"> course so that</font><font color="#E5E5E5"> also means</font>

164
00:06:43,530 --> 00:06:46,799
<font color="#E5E5E5">that the transaction will automatically</font>

165
00:06:44,940 --> 00:06:48,000
abort<font color="#E5E5E5"> if someone else is playing with</font>

166
00:06:46,800 --> 00:06:49,200
<font color="#CCCCCC">their cache too much so if someone</font><font color="#E5E5E5"> else</font>

167
00:06:48,000 --> 00:06:51,120
is doing cache attack causing the

168
00:06:49,200 --> 00:06:54,300
evictions<font color="#E5E5E5"> the transaction will</font>

169
00:06:51,120 --> 00:06:55,500
now we can exploit<font color="#CCCCCC"> that property the</font>

170
00:06:54,300 --> 00:06:57,389
cloak paper exploit this property

171
00:06:55,500 --> 00:07:00,570
<font color="#E5E5E5">exploits this property as an example of</font>

172
00:06:57,389 --> 00:07:02,070
the<font color="#CCCCCC"> cash</font><font color="#E5E5E5"> defense by saying well if you</font>

173
00:07:00,570 --> 00:07:05,099
can do a<font color="#CCCCCC"> flushing road</font><font color="#E5E5E5"> to take</font><font color="#CCCCCC"> on ast</font>

174
00:07:02,070 --> 00:07:06,860
tables<font color="#E5E5E5"> but then if we then and that</font>

175
00:07:05,100 --> 00:07:09,120
works we can show that<font color="#CCCCCC"> if</font><font color="#E5E5E5"> we wrapped the</font>

176
00:07:06,860 --> 00:07:10,590
they of course they show that<font color="#E5E5E5"> if they</font>

177
00:07:09,120 --> 00:07:12,930
wrap the cryptographic operation in the

178
00:07:10,590 --> 00:07:14,070
<font color="#E5E5E5">transit</font><font color="#CCCCCC"> TSX transaction then flushing</font>

179
00:07:12,930 --> 00:07:17,580
really doesn't work anymore<font color="#E5E5E5"> and the</font>

180
00:07:14,070 --> 00:07:19,050
signal is destroyed<font color="#E5E5E5"> so all in</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> just</font>

181
00:07:17,580 --> 00:07:21,300
an example<font color="#E5E5E5"> there may as Stefan said</font>

182
00:07:19,050 --> 00:07:24,289
there are many other examples<font color="#E5E5E5"> of generic</font>

183
00:07:21,300 --> 00:07:30,090
<font color="#E5E5E5">cash defenses which which work like this</font>

184
00:07:24,289 --> 00:07:32,520
or have this result so it<font color="#E5E5E5"> might</font><font color="#CCCCCC"> be very</font>

185
00:07:30,090 --> 00:07:39,900
tempting to<font color="#E5E5E5"> conclude all cash attacks</font>

186
00:07:32,520 --> 00:07:41,430
are solved now so from the<font color="#CCCCCC"> reign of</font><font color="#E5E5E5"> this</font>

187
00:07:39,900 --> 00:07:44,520
talk I'm going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> talk about the TLB and</font>

188
00:07:41,430 --> 00:07:46,919
<font color="#E5E5E5">how because it's also a shared resource</font>

189
00:07:44,520 --> 00:07:48,930
<font color="#E5E5E5">between hyper threads</font><font color="#CCCCCC"> we can do very</font>

190
00:07:46,919 --> 00:07:49,799
similar<font color="#CCCCCC"> things with</font><font color="#E5E5E5"> it will be in the</font>

191
00:07:48,930 --> 00:07:51,870
<font color="#CCCCCC">unit</font><font color="#E5E5E5"> or job but there's some</font>

192
00:07:49,800 --> 00:07:52,889
complications to it we we don't<font color="#E5E5E5"> know how</font>

193
00:07:51,870 --> 00:07:55,260
it works exactly

194
00:07:52,889 --> 00:07:57,419
we have to figure out lots of these

195
00:07:55,260 --> 00:07:58,680
properties<font color="#E5E5E5"> before we can mount a</font>

196
00:07:57,419 --> 00:08:01,099
realistic attack but turns<font color="#E5E5E5"> out that's</font>

197
00:07:58,680 --> 00:08:04,710
possible so let's<font color="#E5E5E5"> look at how that works</font>

198
00:08:01,099 --> 00:08:08,490
<font color="#CCCCCC">so the TLB</font><font color="#E5E5E5"> is also a shared structures</font>

199
00:08:04,710 --> 00:08:11,039
like this translation cache then<font color="#E5E5E5"> well</font>

200
00:08:08,490 --> 00:08:13,380
what do we<font color="#CCCCCC"> have to find out</font><font color="#E5E5E5"> about it so</font>

201
00:08:11,039 --> 00:08:15,000
we know from<font color="#E5E5E5"> documentation it's not</font>

202
00:08:13,380 --> 00:08:16,500
documented<font color="#E5E5E5"> but not everything is</font>

203
00:08:15,000 --> 00:08:18,210
<font color="#E5E5E5">documented or is documented is that we</font>

204
00:08:16,500 --> 00:08:20,070
have<font color="#E5E5E5"> to</font><font color="#CCCCCC"> they're the two layers to it</font>

205
00:08:18,210 --> 00:08:22,289
level<font color="#CCCCCC"> 1 level 2</font><font color="#E5E5E5"> level</font><font color="#CCCCCC"> 1 is partitioned</font>

206
00:08:20,070 --> 00:08:24,419
<font color="#E5E5E5">into instruction translations and and</font>

207
00:08:22,289 --> 00:08:26,250
data translations and we have layer<font color="#E5E5E5"> 2</font>

208
00:08:24,419 --> 00:08:27,780
which is much<font color="#E5E5E5"> bigger and much much a</font>

209
00:08:26,250 --> 00:08:32,669
little<font color="#CCCCCC"> bit slower just</font><font color="#E5E5E5"> like Stefan was</font>

210
00:08:27,780 --> 00:08:34,799
saying and that's so<font color="#E5E5E5"> there's this</font>

211
00:08:32,669 --> 00:08:36,390
hierarchy<font color="#E5E5E5"> to it but what's not</font>

212
00:08:34,799 --> 00:08:38,520
documented<font color="#CCCCCC"> is the structure so maybe</font>

213
00:08:36,390 --> 00:08:39,900
<font color="#E5E5E5">maybe this TLB is not just a big pool of</font>

214
00:08:38,520 --> 00:08:41,789
translations<font color="#E5E5E5"> because you know it could</font>

215
00:08:39,900 --> 00:08:46,500
be very<font color="#CCCCCC"> big style I guess 15 or 36</font>

216
00:08:41,789 --> 00:08:47,640
entries and it's kind of likely that

217
00:08:46,500 --> 00:08:49,320
there's come some kind<font color="#CCCCCC"> of structure to</font>

218
00:08:47,640 --> 00:08:51,029
<font color="#E5E5E5">it</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> like Stefan was saying we could</font>

219
00:08:49,320 --> 00:08:53,880
this thing<font color="#E5E5E5"> isn't likely to</font><font color="#CCCCCC"> be</font>

220
00:08:51,029 --> 00:08:58,560
<font color="#E5E5E5">partitioned into sets so let's see if</font>

221
00:08:53,880 --> 00:09:00,540
that's<font color="#CCCCCC"> true or not so is this</font><font color="#E5E5E5"> thing just</font>

222
00:08:58,560 --> 00:09:02,880
one big pool<font color="#CCCCCC"> or are</font><font color="#E5E5E5"> there partitions</font>

223
00:09:00,540 --> 00:09:04,949
that<font color="#E5E5E5"> are called set so for to look at</font>

224
00:09:02,880 --> 00:09:06,660
this<font color="#CCCCCC"> to analyze this we use</font>

225
00:09:04,950 --> 00:09:08,460
<font color="#E5E5E5">until performance calendars which tell</font>

226
00:09:06,660 --> 00:09:10,410
us<font color="#E5E5E5"> do we get</font><font color="#CCCCCC"> til be hits</font>

227
00:09:08,460 --> 00:09:13,290
how many<font color="#CCCCCC"> till be hits and how many still</font>

228
00:09:10,410 --> 00:09:16,020
be misses do we have and we use these

229
00:09:13,290 --> 00:09:17,939
counters<font color="#E5E5E5"> to measure the result of</font>

230
00:09:16,020 --> 00:09:20,250
accessing the particular set of<font color="#E5E5E5"> virtual</font>

231
00:09:17,940 --> 00:09:24,480
pages<font color="#E5E5E5"> thereby also of course accessing</font>

232
00:09:20,250 --> 00:09:26,700
translations in<font color="#E5E5E5"> the TLB we use them</font>

233
00:09:24,480 --> 00:09:29,670
those<font color="#CCCCCC"> weirdoes</font><font color="#E5E5E5"> counters to measure the</font>

234
00:09:26,700 --> 00:09:31,200
effects of the success of the

235
00:09:29,670 --> 00:09:33,390
translations when we access<font color="#E5E5E5"> a bunch of</font>

236
00:09:31,200 --> 00:09:35,100
pages<font color="#E5E5E5"> and many many times and if we</font><font color="#CCCCCC"> then</font>

237
00:09:33,390 --> 00:09:37,080
what we expect is that<font color="#E5E5E5"> we if we keep</font>

238
00:09:35,100 --> 00:09:38,250
<font color="#E5E5E5">doing it over and over if we have misses</font>

239
00:09:37,080 --> 00:09:42,540
will see the number of missions<font color="#E5E5E5"> go up</font>

240
00:09:38,250 --> 00:09:43,800
and up and up<font color="#E5E5E5"> and if we don't have any</font>

241
00:09:42,540 --> 00:09:46,770
misses then the number of misses will be

242
00:09:43,800 --> 00:09:49,199
almost<font color="#E5E5E5"> flat so what we what we try is</font>

243
00:09:46,770 --> 00:09:51,660
that well let's just assume<font color="#E5E5E5"> for for now</font>

244
00:09:49,200 --> 00:09:53,640
<font color="#E5E5E5">that there's this linear structure that</font>

245
00:09:51,660 --> 00:09:57,030
will be there are a certain<font color="#E5E5E5"> number of</font>

246
00:09:53,640 --> 00:10:01,319
sets and each sets have a certain has a

247
00:09:57,030 --> 00:10:03,569
certain size we<font color="#CCCCCC"> call that</font><font color="#E5E5E5"> ways so let's</font>

248
00:10:01,320 --> 00:10:06,090
try all<font color="#CCCCCC"> combinations of sets and ways</font>

249
00:10:03,570 --> 00:10:08,850
and for the and for now<font color="#E5E5E5"> assume that</font>

250
00:10:06,090 --> 00:10:11,490
<font color="#E5E5E5">whenever I have a virtual page if I have</font>

251
00:10:08,850 --> 00:10:14,010
a page 0 then that translation will<font color="#E5E5E5"> be</font>

252
00:10:11,490 --> 00:10:15,780
stored in two TLB set 0 if I have page<font color="#CCCCCC"> 1</font>

253
00:10:14,010 --> 00:10:19,740
it'll<font color="#E5E5E5"> be stored until be set</font><font color="#CCCCCC"> 1 and</font><font color="#E5E5E5"> if I</font>

254
00:10:15,780 --> 00:10:21,540
have 16 sets<font color="#E5E5E5"> then page number 16 will</font><font color="#CCCCCC"> be</font>

255
00:10:19,740 --> 00:10:22,940
again stored in set<font color="#CCCCCC"> number 0 in the till</font>

256
00:10:21,540 --> 00:10:25,800
<font color="#CCCCCC">B</font><font color="#E5E5E5"> so sort</font><font color="#CCCCCC"> of this</font><font color="#E5E5E5"> totally linear</font>

257
00:10:22,940 --> 00:10:27,390
<font color="#CCCCCC">Pleasant round-robin mapping</font><font color="#E5E5E5"> just have</font>

258
00:10:25,800 --> 00:10:31,589
to be<font color="#E5E5E5"> true but turns out that is true</font>

259
00:10:27,390 --> 00:10:37,020
for<font color="#CCCCCC"> l1 so what we see here is that we</font>

260
00:10:31,590 --> 00:10:41,130
need at least<font color="#E5E5E5"> well this</font><font color="#CCCCCC"> says 4 but</font><font color="#E5E5E5"> so</font>

261
00:10:37,020 --> 00:10:42,990
what we need at least<font color="#CCCCCC"> 5 entries 5</font>

262
00:10:41,130 --> 00:10:46,200
elements to cause any evictions

263
00:10:42,990 --> 00:10:49,800
whatsoever<font color="#E5E5E5"> and that points to a set size</font>

264
00:10:46,200 --> 00:10:53,190
of<font color="#E5E5E5"> 4 and the smallest stride size of the</font>

265
00:10:49,800 --> 00:10:55,829
smallest number<font color="#E5E5E5"> of sets</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I get that</font>

266
00:10:53,190 --> 00:10:58,980
<font color="#E5E5E5">I that I need to cause any evictions is</font>

267
00:10:55,830 --> 00:11:03,870
16 so<font color="#CCCCCC"> that tells us that</font><font color="#E5E5E5"> this a one</font>

268
00:10:58,980 --> 00:11:06,810
<font color="#E5E5E5">detail B has 16 sets and</font><font color="#CCCCCC"> four ways okay</font>

269
00:11:03,870 --> 00:11:08,850
so we repeat this experiment<font color="#E5E5E5"> for l2</font><font color="#CCCCCC"> and</font>

270
00:11:06,810 --> 00:11:10,589
we find<font color="#CCCCCC"> that it's more complex sometimes</font>

271
00:11:08,850 --> 00:11:12,810
<font color="#E5E5E5">it's not always more complex but in the</font>

272
00:11:10,590 --> 00:11:17,610
case of<font color="#E5E5E5"> skylight which we try first it</font>

273
00:11:12,810 --> 00:11:18,750
turns out you have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> look at more bits</font>

274
00:11:17,610 --> 00:11:21,120
in the virtual

275
00:11:18,750 --> 00:11:24,030
in the<font color="#CCCCCC"> virtual address in the in the</font>

276
00:11:21,120 --> 00:11:26,130
page number<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> absorb the next</font>

277
00:11:24,030 --> 00:11:27,780
higher<font color="#CCCCCC"> seven bits after</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> course the 12</font>

278
00:11:26,130 --> 00:11:29,490
bit<font color="#CCCCCC"> offset so nobody talks about</font><font color="#E5E5E5"> the 12</font>

279
00:11:27,780 --> 00:11:31,829
bits offset<font color="#CCCCCC"> because it's all</font><font color="#E5E5E5"> about pages</font>

280
00:11:29,490 --> 00:11:33,150
<font color="#E5E5E5">right so the next</font><font color="#CCCCCC"> 7 bits</font><font color="#E5E5E5"> up we take then</font>

281
00:11:31,830 --> 00:11:34,920
the next 10 bits up again we take make

282
00:11:33,150 --> 00:11:37,890
sure<font color="#CCCCCC"> those</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> together</font><font color="#E5E5E5"> and those form</font>

283
00:11:34,920 --> 00:11:40,199
the<font color="#E5E5E5"> the slot number or the set number</font>

284
00:11:37,890 --> 00:11:42,330
from 0<font color="#E5E5E5"> to 127 in the case of skylake in</font>

285
00:11:40,200 --> 00:11:45,450
the case of<font color="#E5E5E5"> board well it's 256 entries</font>

286
00:11:42,330 --> 00:11:46,140
and<font color="#E5E5E5"> we use 8 bits</font><font color="#CCCCCC"> in their</font>

287
00:11:45,450 --> 00:11:48,060
<font color="#E5E5E5">transformation</font>

288
00:11:46,140 --> 00:11:51,120
<font color="#CCCCCC">that's sort</font><font color="#E5E5E5"> of a hash function if</font><font color="#CCCCCC"> you</font>

289
00:11:48,060 --> 00:11:54,300
will can be represented<font color="#E5E5E5"> by this</font><font color="#CCCCCC"> matrix</font>

290
00:11:51,120 --> 00:11:57,420
if you<font color="#E5E5E5"> put the</font><font color="#CCCCCC"> the page</font><font color="#E5E5E5"> number into this</font>

291
00:11:54,300 --> 00:12:02,760
<font color="#E5E5E5">matrix and then multiply 2 modulo 2 then</font>

292
00:11:57,420 --> 00:12:05,550
you get the slot<font color="#E5E5E5"> number so now that we</font>

293
00:12:02,760 --> 00:12:12,689
<font color="#CCCCCC">know the exact structure of the of the</font>

294
00:12:05,550 --> 00:12:14,699
TLB can we tell whether the till<font color="#CCCCCC"> B's</font><font color="#E5E5E5"> are</font>

295
00:12:12,690 --> 00:12:16,200
shared or<font color="#CCCCCC"> not because that's</font><font color="#E5E5E5"> sort of the</font>

296
00:12:14,700 --> 00:12:18,080
point of<font color="#CCCCCC"> this experiment</font><font color="#E5E5E5"> can we see any</font>

297
00:12:16,200 --> 00:12:20,970
activity<font color="#E5E5E5"> from the sibling hyper thread</font>

298
00:12:18,080 --> 00:12:23,550
<font color="#E5E5E5">so what we try is that we assemble this</font>

299
00:12:20,970 --> 00:12:27,150
experiment where we access just one

300
00:12:23,550 --> 00:12:28,650
complete set of<font color="#CCCCCC"> l1 detail B so that</font>

301
00:12:27,150 --> 00:12:29,699
<font color="#E5E5E5">means that what we</font><font color="#CCCCCC"> axis</font><font color="#E5E5E5"> over and over</font>

302
00:12:28,650 --> 00:12:31,439
<font color="#E5E5E5">and over again and as long as nothing</font>

303
00:12:29,700 --> 00:12:33,750
<font color="#E5E5E5">else happens we don't</font><font color="#CCCCCC"> see evictions</font>

304
00:12:31,440 --> 00:12:35,820
because it fits<font color="#E5E5E5"> and if we try all</font>

305
00:12:33,750 --> 00:12:38,250
combinations<font color="#E5E5E5"> of set 0 to 15 on one</font>

306
00:12:35,820 --> 00:12:39,780
thread<font color="#E5E5E5"> and 0 to 50 on the other thread</font>

307
00:12:38,250 --> 00:12:42,390
which<font color="#E5E5E5"> all possible combinations of what</font>

308
00:12:39,780 --> 00:12:45,270
we expect<font color="#CCCCCC"> to</font><font color="#E5E5E5"> see if the structure is</font>

309
00:12:42,390 --> 00:12:46,920
shared is that<font color="#E5E5E5"> if I touch set 0 here and</font>

310
00:12:45,270 --> 00:12:49,260
since<font color="#E5E5E5"> 0 is</font><font color="#CCCCCC"> there there then I get</font>

311
00:12:46,920 --> 00:12:52,819
eviction<font color="#CCCCCC"> and otherwise</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> so what</font>

312
00:12:49,260 --> 00:12:56,600
we see here<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> there's evidence of</font>

313
00:12:52,820 --> 00:12:59,700
sharing of the<font color="#E5E5E5"> l1</font><font color="#CCCCCC"> detail be in of the</font>

314
00:12:56,600 --> 00:13:01,860
between<font color="#E5E5E5"> 2 hyper threads ITIL be not so</font>

315
00:12:59,700 --> 00:13:04,860
so apparently I to<font color="#E5E5E5"> be partitioned and</font>

316
00:13:01,860 --> 00:13:07,080
the<font color="#CCCCCC"> DS</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> be is shared so that means</font>

317
00:13:04,860 --> 00:13:10,050
<font color="#E5E5E5">that we can spy on some kind of activity</font>

318
00:13:07,080 --> 00:13:11,850
most likely of data<font color="#E5E5E5"> access that accesses</font>

319
00:13:10,050 --> 00:13:13,229
that yellow thread is doing but not<font color="#E5E5E5"> code</font>

320
00:13:11,850 --> 00:13:15,930
<font color="#E5E5E5">access which is kind</font><font color="#CCCCCC"> of a shame because</font>

321
00:13:13,230 --> 00:13:17,460
code is a bit more of a natural<font color="#E5E5E5"> direct</font>

322
00:13:15,930 --> 00:13:22,500
way<font color="#E5E5E5"> to do these cache attacks most the</font>

323
00:13:17,460 --> 00:13:24,990
times<font color="#E5E5E5"> we also find that the</font><font color="#CCCCCC"> l2 TLB is</font>

324
00:13:22,500 --> 00:13:27,060
shared<font color="#CCCCCC"> is</font><font color="#E5E5E5"> people expect by now</font><font color="#CCCCCC"> but</font>

325
00:13:24,990 --> 00:13:29,820
<font color="#E5E5E5">there's an</font><font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> little quirk we</font>

326
00:13:27,060 --> 00:13:31,680
find<font color="#E5E5E5"> that said 0 is not shared with set</font>

327
00:13:29,820 --> 00:13:32,100
0 on both threads but said<font color="#E5E5E5"> 0 on one</font>

328
00:13:31,680 --> 00:13:34,019
thread

329
00:13:32,100 --> 00:13:36,149
shared with<font color="#E5E5E5"> 64 or another threat so</font>

330
00:13:34,019 --> 00:13:37,769
<font color="#E5E5E5">apparently seems like in this hatch part</font>

331
00:13:36,149 --> 00:13:40,709
in this hash function there's probably a

332
00:13:37,769 --> 00:13:42,810
thread ID<font color="#E5E5E5"> added in there so that zero</font>

333
00:13:40,709 --> 00:13:46,319
interferes with 64 maybe that<font color="#CCCCCC"> sinister</font>

334
00:13:42,810 --> 00:13:52,500
<font color="#E5E5E5">speculation but maybe that cost</font><font color="#CCCCCC"> form or</font>

335
00:13:46,319 --> 00:13:54,060
<font color="#E5E5E5">even even spread in the</font><font color="#CCCCCC"> TLB</font><font color="#E5E5E5"> slots so</font>

336
00:13:52,500 --> 00:13:55,829
here's<font color="#E5E5E5"> a little summary of many micro</font>

337
00:13:54,060 --> 00:13:57,300
architectural many microarchitectures

338
00:13:55,829 --> 00:14:00,120
that we tried and we glean<font color="#CCCCCC"> this</font>

339
00:13:57,300 --> 00:14:02,008
properties from we find that the l1

340
00:14:00,120 --> 00:14:04,800
detail bees are<font color="#CCCCCC"> always shared and hash</font>

341
00:14:02,009 --> 00:14:08,579
function is always linear and always has

342
00:14:04,800 --> 00:14:10,560
64<font color="#E5E5E5"> entries 16 sets in four ways ITIL</font><font color="#CCCCCC"> B</font>

343
00:14:08,579 --> 00:14:13,620
<font color="#E5E5E5">is never shared so we don't</font><font color="#CCCCCC"> even care</font>

344
00:14:10,560 --> 00:14:14,609
<font color="#E5E5E5">about that but it does have it became</font>

345
00:14:13,620 --> 00:14:16,380
more<font color="#E5E5E5"> associative see that's quite</font>

346
00:14:14,610 --> 00:14:18,360
interesting<font color="#E5E5E5"> so we got we went here from</font>

347
00:14:16,380 --> 00:14:21,269
16 sets to<font color="#E5E5E5"> 8 sets with a higher number</font>

348
00:14:18,360 --> 00:14:22,889
<font color="#CCCCCC">of</font><font color="#E5E5E5"> high</font><font color="#CCCCCC"> awareness since became more</font>

349
00:14:21,269 --> 00:14:26,130
associative<font color="#CCCCCC"> this that's a good property</font>

350
00:14:22,889 --> 00:14:28,800
<font color="#E5E5E5">and starting with well from what we see</font>

351
00:14:26,130 --> 00:14:30,269
<font color="#CCCCCC">a</font><font color="#E5E5E5"> sky like we have this more complicated</font>

352
00:14:28,800 --> 00:14:33,750
hash function here<font color="#E5E5E5"> which i think is</font>

353
00:14:30,269 --> 00:14:39,660
quite testing used to be linear

354
00:14:33,750 --> 00:14:41,009
now it's absorbed<font color="#E5E5E5"> okay so one more</font><font color="#CCCCCC"> thing</font>

355
00:14:39,660 --> 00:14:42,660
<font color="#E5E5E5">that we</font><font color="#CCCCCC"> have if you want to do this</font>

356
00:14:41,009 --> 00:14:44,250
monitoring we cannot use performance

357
00:14:42,660 --> 00:14:46,560
counters because<font color="#E5E5E5"> a is privileged if we</font>

358
00:14:44,250 --> 00:14:48,959
don't want to<font color="#E5E5E5"> rely</font><font color="#CCCCCC"> on that B</font><font color="#E5E5E5"> user system</font>

359
00:14:46,560 --> 00:14:51,630
calls<font color="#E5E5E5"> which is probably too slow so</font>

360
00:14:48,959 --> 00:14:54,300
<font color="#CCCCCC">let's</font><font color="#E5E5E5"> not do</font><font color="#CCCCCC"> that but</font><font color="#E5E5E5"> can we rely on the</font>

361
00:14:51,630 --> 00:14:55,829
doing this monitoring by latency only so

362
00:14:54,300 --> 00:14:59,279
we now that<font color="#E5E5E5"> we know the structure we can</font>

363
00:14:55,829 --> 00:15:01,859
assemble<font color="#E5E5E5"> l1 working sets that hit</font>

364
00:14:59,279 --> 00:15:03,480
exactly<font color="#E5E5E5"> alwa and just miss l1 and hit</font>

365
00:15:01,860 --> 00:15:05,399
exactly up to<font color="#E5E5E5"> and just miss out</font><font color="#CCCCCC"> too and</font>

366
00:15:03,480 --> 00:15:08,850
then look at<font color="#E5E5E5"> the histogram of latencies</font>

367
00:15:05,399 --> 00:15:10,439
that we see to decide<font color="#E5E5E5"> well can we see</font>

368
00:15:08,850 --> 00:15:12,870
the difference between l1 hits and

369
00:15:10,439 --> 00:15:14,819
misses<font color="#E5E5E5"> and this histogram shows that</font>

370
00:15:12,870 --> 00:15:16,589
yeah we can<font color="#E5E5E5"> there's sufficient</font>

371
00:15:14,819 --> 00:15:18,870
separation in<font color="#E5E5E5"> this histogram that shows</font>

372
00:15:16,589 --> 00:15:20,490
that tells us yeah<font color="#E5E5E5"> we'll be able to tell</font>

373
00:15:18,870 --> 00:15:24,149
the difference<font color="#CCCCCC"> if we do monitoring</font>

374
00:15:20,490 --> 00:15:26,550
experiment<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> now let's go back to</font>

375
00:15:24,149 --> 00:15:28,439
<font color="#CCCCCC">this</font><font color="#E5E5E5"> case study use we want what we're</font>

376
00:15:26,550 --> 00:15:30,689
gonna<font color="#E5E5E5"> try is going to try to attack two</font>

377
00:15:28,439 --> 00:15:33,079
different algorithms<font color="#E5E5E5"> in this case study</font>

378
00:15:30,689 --> 00:15:37,769
one is this<font color="#E5E5E5"> non</font><font color="#CCCCCC"> side-channel</font><font color="#E5E5E5"> proof</font>

379
00:15:33,079 --> 00:15:39,540
version of this<font color="#CCCCCC"> Lib G crypts</font><font color="#E5E5E5"> coin scalar</font>

380
00:15:37,769 --> 00:15:42,480
multiplication which is<font color="#CCCCCC"> loosen assigning</font>

381
00:15:39,540 --> 00:15:43,829
operation stuff like that but we can't

382
00:15:42,480 --> 00:15:45,379
use<font color="#E5E5E5"> the</font><font color="#CCCCCC"> cache signal now right because</font>

383
00:15:43,829 --> 00:15:46,728
<font color="#E5E5E5">we assume the cache</font><font color="#CCCCCC"> defenses</font>

384
00:15:45,379 --> 00:15:48,739
deployed so we have to use the<font color="#CCCCCC"> tlb</font>

385
00:15:46,729 --> 00:15:52,039
signal that means<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> only 16 sets</font>

386
00:15:48,739 --> 00:15:54,169
for l1<font color="#E5E5E5"> the page granularity instead of</font>

387
00:15:52,039 --> 00:15:56,899
cache line granularity so<font color="#E5E5E5"> the situation</font>

388
00:15:54,169 --> 00:15:58,160
is<font color="#E5E5E5"> like more hostile to an attacker so</font>

389
00:15:56,899 --> 00:15:59,959
we have<font color="#E5E5E5"> there are some of these</font><font color="#CCCCCC"> things</font>

390
00:15:58,160 --> 00:16:01,579
<font color="#E5E5E5">to overcome</font><font color="#CCCCCC"> if we're</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do a</font>

391
00:15:59,959 --> 00:16:06,189
successful text let's see if we can even

392
00:16:01,579 --> 00:16:08,628
do that<font color="#E5E5E5"> say we see that the add</font>

393
00:16:06,189 --> 00:16:10,339
operation<font color="#E5E5E5"> only happens at the scalar is</font>

394
00:16:08,629 --> 00:16:11,720
<font color="#E5E5E5">1 so we want to see detect the</font>

395
00:16:10,339 --> 00:16:13,819
difference between duplicate<font color="#E5E5E5"> add and</font>

396
00:16:11,720 --> 00:16:17,509
just<font color="#E5E5E5"> add so let's see what that signal</font>

397
00:16:13,819 --> 00:16:20,269
looks<font color="#E5E5E5"> like in the TLB so we only have 16</font>

398
00:16:17,509 --> 00:16:23,749
sets so this is what in the ER you see

399
00:16:20,269 --> 00:16:27,649
that green corresponds<font color="#E5E5E5"> to duplicate and</font>

400
00:16:23,749 --> 00:16:29,539
blue corresponds to add and what we were

401
00:16:27,649 --> 00:16:32,409
hoping<font color="#CCCCCC"> for</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that one set would be</font>

402
00:16:29,539 --> 00:16:34,579
active<font color="#CCCCCC"> only on green and now</font><font color="#E5E5E5"> on blue and</font>

403
00:16:32,409 --> 00:16:36,319
ideally even vice versa so it would be

404
00:16:34,579 --> 00:16:38,449
very<font color="#CCCCCC"> easy to</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> okay I'm seeing a zero</font>

405
00:16:36,319 --> 00:16:40,909
now or I'm seeing one now but we<font color="#E5E5E5"> don't</font>

406
00:16:38,449 --> 00:16:44,598
see<font color="#E5E5E5"> that we see all sets are either</font>

407
00:16:40,909 --> 00:16:46,609
active all<font color="#CCCCCC"> the time or never</font><font color="#E5E5E5"> so there's</font>

408
00:16:44,599 --> 00:16:48,949
no convenient spatial separation which

409
00:16:46,609 --> 00:16:50,539
makes this more<font color="#CCCCCC"> complicated</font><font color="#E5E5E5"> so let's</font><font color="#CCCCCC"> see</font>

410
00:16:48,949 --> 00:16:52,219
what it<font color="#E5E5E5"> looks like</font><font color="#CCCCCC"> in a</font><font color="#E5E5E5"> trace this is</font>

411
00:16:50,539 --> 00:16:54,949
the<font color="#E5E5E5"> TLB trace</font><font color="#CCCCCC"> instead</font><font color="#E5E5E5"> of the cache trace</font>

412
00:16:52,220 --> 00:16:57,679
you can<font color="#E5E5E5"> kind of see yeah and the blue</font>

413
00:16:54,949 --> 00:17:02,599
case in the green case yet it sort of

414
00:16:57,679 --> 00:17:04,009
looks<font color="#CCCCCC"> it</font><font color="#E5E5E5"> looks</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> the same stuff I'd</font>

415
00:17:02,600 --> 00:17:05,659
find it quite<font color="#E5E5E5"> hard to write a program to</font>

416
00:17:04,009 --> 00:17:08,589
<font color="#E5E5E5">see the difference between one or the</font>

417
00:17:05,659 --> 00:17:11,659
<font color="#E5E5E5">other I can sort of see a difference but</font>

418
00:17:08,589 --> 00:17:13,329
it's not gonna<font color="#E5E5E5"> be</font><font color="#CCCCCC"> straightforward</font><font color="#E5E5E5"> so</font>

419
00:17:11,659 --> 00:17:16,399
let's see what<font color="#CCCCCC"> that signal looks</font><font color="#E5E5E5"> like</font>

420
00:17:13,329 --> 00:17:20,089
let's<font color="#E5E5E5"> so let's monitor a single TLB set</font>

421
00:17:16,398 --> 00:17:22,339
and use<font color="#CCCCCC"> Temple information so let's just</font>

422
00:17:20,089 --> 00:17:29,029
hope well we can we can tell<font color="#E5E5E5"> from this</font>

423
00:17:22,339 --> 00:17:31,220
trace here we can<font color="#E5E5E5"> tell from this trace</font>

424
00:17:29,029 --> 00:17:33,259
there's this difference in the temporal

425
00:17:31,220 --> 00:17:34,669
pattern see in time we see three dots

426
00:17:33,259 --> 00:17:36,320
here two dots here some kind of hoping

427
00:17:34,669 --> 00:17:40,759
that<font color="#CCCCCC"> we can see the difference in</font><font color="#E5E5E5"> time</font>

428
00:17:36,320 --> 00:17:42,379
is opposed to space so let's go from

429
00:17:40,759 --> 00:17:45,019
<font color="#E5E5E5">simulations to real life so this is a</font>

430
00:17:42,379 --> 00:17:46,789
real<font color="#CCCCCC"> life signal</font><font color="#E5E5E5"> TLB signal capture used</font>

431
00:17:45,019 --> 00:17:49,220
during<font color="#CCCCCC"> that</font><font color="#E5E5E5"> ECC point scalar</font>

432
00:17:46,789 --> 00:17:50,870
multiplication so here<font color="#E5E5E5"> the green and</font>

433
00:17:49,220 --> 00:17:52,759
blue and blue and blue and<font color="#E5E5E5"> green</font><font color="#CCCCCC"> and</font>

434
00:17:50,870 --> 00:17:54,739
<font color="#E5E5E5">blue these things are the secret key</font>

435
00:17:52,759 --> 00:17:56,690
bits<font color="#E5E5E5"> the ground truth as it were and</font>

436
00:17:54,740 --> 00:17:59,419
this is the the<font color="#E5E5E5"> signal that the attacker</font>

437
00:17:56,690 --> 00:18:02,179
observes<font color="#CCCCCC"> so this looks looks very noisy</font>

438
00:17:59,419 --> 00:18:03,709
so let's we apply moving average see if

439
00:18:02,179 --> 00:18:08,299
we can glean little more information<font color="#CCCCCC"> our</font>

440
00:18:03,709 --> 00:18:10,309
listen we see that that<font color="#E5E5E5"> that the single</font>

441
00:18:08,299 --> 00:18:11,539
does look<font color="#CCCCCC"> actually quite regular and</font><font color="#E5E5E5"> you</font>

442
00:18:10,309 --> 00:18:13,729
can kind of tell the difference with

443
00:18:11,539 --> 00:18:17,089
your at<font color="#E5E5E5"> least with your eyeballs</font><font color="#CCCCCC"> between</font>

444
00:18:13,729 --> 00:18:18,559
blue<font color="#CCCCCC"> and</font><font color="#E5E5E5"> greens that gives us</font><font color="#CCCCCC"> hope</font><font color="#E5E5E5"> still</font>

445
00:18:17,089 --> 00:18:19,700
I would find it quite<font color="#E5E5E5"> hard to write a</font>

446
00:18:18,559 --> 00:18:21,469
program<font color="#E5E5E5"> that can tell the difference</font>

447
00:18:19,700 --> 00:18:27,799
<font color="#CCCCCC">between blue and green</font><font color="#E5E5E5"> looking at just</font>

448
00:18:21,469 --> 00:18:28,789
at<font color="#E5E5E5"> this so we use an SVM classifier is</font>

449
00:18:27,799 --> 00:18:35,269
James<font color="#CCCCCC"> Mickens here</font>

450
00:18:28,789 --> 00:18:36,889
<font color="#CCCCCC">oh hi James I'm gonna use</font><font color="#E5E5E5"> your I'm gonna</font>

451
00:18:35,269 --> 00:18:40,359
need your catch phrase later how's that

452
00:18:36,889 --> 00:18:43,399
well<font color="#E5E5E5"> one of them can you guess which one</font>

453
00:18:40,359 --> 00:18:44,899
<font color="#E5E5E5">the one that doesn't explain how the</font>

454
00:18:43,399 --> 00:18:54,168
classification works but it<font color="#CCCCCC"> actually</font>

455
00:18:44,899 --> 00:18:58,369
works<font color="#E5E5E5"> no ok so</font><font color="#CCCCCC"> superfast interaction STM</font>

456
00:18:54,169 --> 00:19:01,579
classifiers we have<font color="#E5E5E5"> two two features</font>

457
00:18:58,369 --> 00:19:02,928
here x and y all of the green training

458
00:19:01,579 --> 00:19:04,668
samples are<font color="#CCCCCC"> separated</font><font color="#E5E5E5"> from the red</font>

459
00:19:02,929 --> 00:19:06,229
training samples by this lines in real

460
00:19:04,669 --> 00:19:07,849
life we have<font color="#E5E5E5"> a hundred dimensional</font><font color="#CCCCCC"> space</font>

461
00:19:06,229 --> 00:19:09,799
in our case<font color="#CCCCCC"> because</font><font color="#E5E5E5"> we have lots of</font>

462
00:19:07,849 --> 00:19:11,178
latency measurements and the SVM

463
00:19:09,799 --> 00:19:14,479
classifier tries to find<font color="#E5E5E5"> a hyperplane</font>

464
00:19:11,179 --> 00:19:16,820
<font color="#CCCCCC">that separates one from the other</font><font color="#E5E5E5"> so but</font>

465
00:19:14,479 --> 00:19:18,169
turns out that this SM classifier does<font color="#E5E5E5"> a</font>

466
00:19:16,820 --> 00:19:20,329
good job so we this is a<font color="#CCCCCC"> miss</font>

467
00:19:18,169 --> 00:19:21,979
classification this is start of blue is

468
00:19:20,329 --> 00:19:23,658
correct start of blue correct start of

469
00:19:21,979 --> 00:19:25,369
green correct so not only<font color="#CCCCCC"> intelligence</font>

470
00:19:23,659 --> 00:19:26,749
<font color="#E5E5E5">be</font><font color="#CCCCCC"> mind the other it can also tell</font><font color="#E5E5E5"> when</font>

471
00:19:25,369 --> 00:19:28,668
<font color="#E5E5E5">is it</font><font color="#CCCCCC"> start and that's what we need to</font>

472
00:19:26,749 --> 00:19:30,200
be able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> identify repeated</font><font color="#E5E5E5"> zeros and</font>

473
00:19:28,669 --> 00:19:33,320
repeated<font color="#E5E5E5"> one it turns out that can work</font>

474
00:19:30,200 --> 00:19:36,739
<font color="#CCCCCC">very reliably zero zero one zero zero</font>

475
00:19:33,320 --> 00:19:42,859
<font color="#E5E5E5">one zero in</font><font color="#CCCCCC"> a reality that</font><font color="#E5E5E5"> works all the</font>

476
00:19:36,739 --> 00:19:47,119
<font color="#E5E5E5">way up to 256 bits so we find this</font>

477
00:19:42,859 --> 00:19:49,989
reliability<font color="#E5E5E5"> on this on this we Margaret</font>

478
00:19:47,119 --> 00:19:52,399
actually give you<font color="#CCCCCC"> 500</font><font color="#E5E5E5"> trials we see a</font>

479
00:19:49,989 --> 00:19:55,669
98%<font color="#E5E5E5"> success rate on just a single</font>

480
00:19:52,399 --> 00:19:58,579
capture that doesn't always happen<font color="#CCCCCC"> so we</font>

481
00:19:55,669 --> 00:19:59,839
have some<font color="#CCCCCC"> four we do but</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> training</font>

482
00:19:58,579 --> 00:20:03,259
samples or the training<font color="#CCCCCC"> time is about</font>

483
00:19:59,839 --> 00:20:04,759
<font color="#E5E5E5">four minutes we do a single capture that</font>

484
00:20:03,259 --> 00:20:06,289
takes<font color="#CCCCCC"> just a few seconds of</font>

485
00:20:04,759 --> 00:20:08,029
classification<font color="#CCCCCC"> times</font><font color="#E5E5E5"> and a small amount</font>

486
00:20:06,289 --> 00:20:09,919
<font color="#E5E5E5">of</font><font color="#CCCCCC"> brute force this</font><font color="#E5E5E5"> is a histogram of</font>

487
00:20:08,029 --> 00:20:12,259
how much brute force do we need moves at

488
00:20:09,919 --> 00:20:13,190
<font color="#E5E5E5">the time less than 32 tries and</font><font color="#CCCCCC"> then we</font>

489
00:20:12,259 --> 00:20:16,190
can get

490
00:20:13,190 --> 00:20:18,290
right secret key and as promised<font color="#E5E5E5"> we also</font>

491
00:20:16,190 --> 00:20:21,110
do well what was the whole<font color="#CCCCCC"> point of this</font>

492
00:20:18,290 --> 00:20:23,120
exercise what if we do<font color="#CCCCCC"> cache defenses so</font>

493
00:20:21,110 --> 00:20:25,790
we show as an example<font color="#E5E5E5"> we use cats in</font>

494
00:20:23,120 --> 00:20:27,139
<font color="#CCCCCC">cash allocation technology Stefan was</font>

495
00:20:25,790 --> 00:20:28,399
saying<font color="#CCCCCC"> between</font><font color="#E5E5E5"> partition</font><font color="#CCCCCC"> the set in the</font>

496
00:20:27,140 --> 00:20:32,510
<font color="#CCCCCC">cache in many different</font><font color="#E5E5E5"> ways</font>

497
00:20:28,400 --> 00:20:35,750
<font color="#CCCCCC">cats partitions it by</font><font color="#E5E5E5"> way so one process</font>

498
00:20:32,510 --> 00:20:37,220
only<font color="#E5E5E5"> sees the</font><font color="#CCCCCC"> sees one</font><font color="#E5E5E5"> half of let's say</font>

499
00:20:35,750 --> 00:20:40,250
<font color="#CCCCCC">eight ways and the other person who sees</font>

500
00:20:37,220 --> 00:20:42,170
the other half of the egg ways and we

501
00:20:40,250 --> 00:20:46,550
still see<font color="#CCCCCC"> that this cache attack</font><font color="#E5E5E5"> works</font>

502
00:20:42,170 --> 00:20:57,440
the<font color="#CCCCCC"> 96% of the</font><font color="#E5E5E5"> time so that works James</font>

503
00:20:46,550 --> 00:21:02,659
the stuff is thank you<font color="#E5E5E5"> very much super</font>

504
00:20:57,440 --> 00:21:04,730
<font color="#E5E5E5">fast example of RSA so this is an hour</font>

505
00:21:02,660 --> 00:21:07,850
safe temptation all also a previous

506
00:21:04,730 --> 00:21:10,040
previous version is better nowadays<font color="#CCCCCC"> but</font>

507
00:21:07,850 --> 00:21:11,510
<font color="#E5E5E5">it was already hardened against</font><font color="#CCCCCC"> flushing</font>

508
00:21:10,040 --> 00:21:12,950
<font color="#E5E5E5">reunited so we do it the this</font>

509
00:21:11,510 --> 00:21:14,690
<font color="#E5E5E5">implementation there's an unconditional</font>

510
00:21:12,950 --> 00:21:17,170
<font color="#CCCCCC">square and unconditional multiply and</font>

511
00:21:14,690 --> 00:21:19,820
then conditionally uses the result and

512
00:21:17,170 --> 00:21:22,100
by swapping<font color="#E5E5E5"> pointers but</font><font color="#CCCCCC"> ko bleed can</font>

513
00:21:19,820 --> 00:21:24,649
see this<font color="#CCCCCC"> signal</font><font color="#E5E5E5"> and then out of the</font>

514
00:21:22,100 --> 00:21:27,139
thousand<font color="#E5E5E5"> 24 secret key bits we recover</font>

515
00:21:24,650 --> 00:21:29,270
all<font color="#E5E5E5"> the correct bits except for around</font>

516
00:21:27,140 --> 00:21:30,740
<font color="#E5E5E5">80 so that's that's a pretty good score</font>

517
00:21:29,270 --> 00:21:34,100
it's not enough to<font color="#CCCCCC"> brute-force the rest</font>

518
00:21:30,740 --> 00:21:35,870
but<font color="#E5E5E5"> we</font><font color="#CCCCCC"> haven't committed</font><font color="#E5E5E5"> the rest</font><font color="#CCCCCC"> this</font>

519
00:21:34,100 --> 00:21:38,090
<font color="#E5E5E5">but</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> sure</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we before</font><font color="#CCCCCC"> into other</font>

520
00:21:35,870 --> 00:21:39,679
work<font color="#CCCCCC"> cache plate I believe which as</font><font color="#E5E5E5"> well</font>

521
00:21:38,090 --> 00:21:41,000
if you have<font color="#CCCCCC"> that</font><font color="#E5E5E5"> many of</font><font color="#CCCCCC"> the are safe so</font>

522
00:21:39,680 --> 00:21:43,510
you could keep<font color="#CCCCCC"> it</font><font color="#E5E5E5"> you can also recover</font>

523
00:21:41,000 --> 00:21:47,450
the rest<font color="#E5E5E5"> so that's also realistic attack</font>

524
00:21:43,510 --> 00:21:50,740
<font color="#E5E5E5">okay so how was</font><font color="#CCCCCC"> this received the</font>

525
00:21:47,450 --> 00:21:52,940
<font color="#E5E5E5">Intel's reception was well yeah yeah</font>

526
00:21:50,740 --> 00:21:54,530
<font color="#CCCCCC">there is enough guidance out there</font><font color="#E5E5E5"> to</font>

527
00:21:52,940 --> 00:21:55,910
implement perfect constant time

528
00:21:54,530 --> 00:21:59,480
algorithms<font color="#E5E5E5"> so we don't think</font><font color="#CCCCCC"> this is a</font>

529
00:21:55,910 --> 00:22:06,290
problem<font color="#E5E5E5"> that's that's unfortunate I</font>

530
00:21:59,480 --> 00:22:08,360
think<font color="#CCCCCC"> OpenBSD as results</font><font color="#E5E5E5"> actually</font>

531
00:22:06,290 --> 00:22:10,190
disabled<font color="#CCCCCC"> hyper-threading by default</font><font color="#E5E5E5"> on</font>

532
00:22:08,360 --> 00:22:12,530
x86<font color="#CCCCCC"> apparently I think it's officially</font>

533
00:22:10,190 --> 00:22:14,030
risky<font color="#E5E5E5"> or so you see more risks in this</font>

534
00:22:12,530 --> 00:22:16,220
area<font color="#CCCCCC"> that made them decide ok let's</font><font color="#E5E5E5"> turn</font>

535
00:22:14,030 --> 00:22:17,740
off by<font color="#CCCCCC"> default</font><font color="#E5E5E5"> as a result there was</font>

536
00:22:16,220 --> 00:22:21,170
widespread media coverage so I

537
00:22:17,740 --> 00:22:23,270
personally have never<font color="#CCCCCC"> made logo</font><font color="#E5E5E5"> for an</font>

538
00:22:21,170 --> 00:22:24,770
attack but the register was kind<font color="#CCCCCC"> of for</font>

539
00:22:23,270 --> 00:22:27,020
this for us<font color="#CCCCCC"> and I'm kind of</font><font color="#E5E5E5"> using this</font>

540
00:22:24,770 --> 00:22:29,090
<font color="#CCCCCC">after all</font><font color="#E5E5E5"> thank</font><font color="#CCCCCC"> you to the register</font>

541
00:22:27,020 --> 00:22:32,030
and<font color="#E5E5E5"> Wikipedia page</font><font color="#CCCCCC"> appeared which i</font>

542
00:22:29,090 --> 00:22:36,500
think is a peculiar<font color="#E5E5E5"> kind of certain kind</font>

543
00:22:32,030 --> 00:22:38,750
<font color="#E5E5E5">of badge of honor okay so this work</font><font color="#CCCCCC"> was</font>

544
00:22:36,500 --> 00:22:40,550
done<font color="#E5E5E5"> by</font><font color="#CCCCCC"> professors at Calvary</font><font color="#E5E5E5"> Christian</font>

545
00:22:38,750 --> 00:22:42,770
<font color="#E5E5E5">oh and Herbert will end me but</font><font color="#CCCCCC"> no</font>

546
00:22:40,550 --> 00:22:44,809
professor<font color="#CCCCCC"> some diagrams in this work</font>

547
00:22:42,770 --> 00:22:46,309
were taken from<font color="#E5E5E5"> other papers I think all</font>

548
00:22:44,809 --> 00:22:50,840
of you are<font color="#CCCCCC"> in the room thank you for</font>

549
00:22:46,309 --> 00:22:53,389
letting<font color="#CCCCCC"> me do that so in</font><font color="#E5E5E5"> conclusion we</font>

550
00:22:50,840 --> 00:22:55,100
<font color="#CCCCCC">find that practical reliable and high</font>

551
00:22:53,390 --> 00:22:57,050
<font color="#CCCCCC">resolution satchels exists outside of</font>

552
00:22:55,100 --> 00:23:00,830
<font color="#E5E5E5">the</font><font color="#CCCCCC"> cache which has implications for</font>

553
00:22:57,050 --> 00:23:03,050
<font color="#CCCCCC">defenses so this work was done</font><font color="#E5E5E5"> by these</font>

554
00:23:00,830 --> 00:23:06,559
<font color="#CCCCCC">twitter</font><font color="#E5E5E5"> handles here's the projects page</font>

555
00:23:03,050 --> 00:23:08,889
if you<font color="#E5E5E5"> are no more thank you all for</font>

556
00:23:06,559 --> 00:23:08,889
your attention

557
00:23:12,760 --> 00:23:19,820
amazing<font color="#E5E5E5"> any questions so let me start up</font>

558
00:23:18,230 --> 00:23:22,010
how much control<font color="#E5E5E5"> do</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> need for your</font>

559
00:23:19,820 --> 00:23:24,250
<font color="#E5E5E5">machine learning to extract the training</font>

560
00:23:22,010 --> 00:23:26,660
because<font color="#CCCCCC"> it will vary widely between</font>

561
00:23:24,250 --> 00:23:28,429
individual systems and so on maybe<font color="#E5E5E5"> you</font>

562
00:23:26,660 --> 00:23:29,960
<font color="#E5E5E5">can elaborate</font><font color="#CCCCCC"> on that okay because</font><font color="#E5E5E5"> it</font>

563
00:23:28,429 --> 00:23:33,530
will only be as<font color="#CCCCCC"> good as the</font><font color="#E5E5E5"> training</font><font color="#CCCCCC"> set</font>

564
00:23:29,960 --> 00:23:34,929
so you get yes yes for<font color="#CCCCCC"> sure</font><font color="#E5E5E5"> so yeah</font>

565
00:23:33,530 --> 00:23:36,920
<font color="#E5E5E5">that's a good question</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> what we</font><font color="#CCCCCC"> assume</font>

566
00:23:34,929 --> 00:23:39,770
something<font color="#CCCCCC"> I forgot</font><font color="#E5E5E5"> to say what we assume</font>

567
00:23:36,920 --> 00:23:42,530
<font color="#E5E5E5">is that</font><font color="#CCCCCC"> we know which binary the victim</font>

568
00:23:39,770 --> 00:23:43,550
is running and which microarchitecture

569
00:23:42,530 --> 00:23:45,710
they're running so we didn't try

570
00:23:43,550 --> 00:23:46,909
<font color="#E5E5E5">experimentally can we apply this</font><font color="#CCCCCC"> mark</font>

571
00:23:45,710 --> 00:23:48,260
this<font color="#E5E5E5"> training set to different</font>

572
00:23:46,910 --> 00:23:51,980
<font color="#E5E5E5">microarchitecture that's something we</font>

573
00:23:48,260 --> 00:23:58,070
<font color="#CCCCCC">just didn't try</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> I have a hunch it</font>

574
00:23:51,980 --> 00:23:59,540
matters a lot so I don't<font color="#CCCCCC"> know</font><font color="#E5E5E5"> so well we</font>

575
00:23:58,070 --> 00:24:00,860
know when you<font color="#CCCCCC"> think that assumption</font>

576
00:23:59,540 --> 00:24:02,210
<font color="#E5E5E5">realistic so we familiar that what the</font>

577
00:24:00,860 --> 00:24:04,370
binary isn't worth my car keys we can

578
00:24:02,210 --> 00:24:07,100
<font color="#E5E5E5">pre assemble this training set and then</font>

579
00:24:04,370 --> 00:24:08,750
apply it<font color="#E5E5E5"> to our victim but we didn't try</font>

580
00:24:07,100 --> 00:24:11,419
<font color="#E5E5E5">to transfer one we are are they are</font>

581
00:24:08,750 --> 00:24:13,130
<font color="#CCCCCC">variations between the individual</font>

582
00:24:11,420 --> 00:24:16,820
systems<font color="#CCCCCC"> turned</font><font color="#E5E5E5"> over it's bound to be</font>

583
00:24:13,130 --> 00:24:21,770
<font color="#CCCCCC">right between</font><font color="#E5E5E5"> individual systems like</font>

584
00:24:16,820 --> 00:24:23,379
the same<font color="#E5E5E5"> architecture well well in our</font>

585
00:24:21,770 --> 00:24:27,020
experiments<font color="#CCCCCC"> we just retrained every time</font>

586
00:24:23,380 --> 00:24:29,059
so I'm<font color="#CCCCCC"> not sure I would</font><font color="#E5E5E5"> expect not</font><font color="#CCCCCC"> to be</font>

587
00:24:27,020 --> 00:24:34,040
that big<font color="#E5E5E5"> actually but but I'm not sure</font>

588
00:24:29,059 --> 00:24:37,360
<font color="#CCCCCC">all right other</font><font color="#E5E5E5"> questions</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> be shy</font>

589
00:24:34,040 --> 00:24:37,360
folks<font color="#E5E5E5"> even if the room is full</font>

590
00:24:39,650 --> 00:24:45,600
yeah go ahead<font color="#CCCCCC"> while people are</font><font color="#E5E5E5"> coming up</font>

591
00:24:43,470 --> 00:24:48,990
<font color="#E5E5E5">another question</font><font color="#CCCCCC"> regarding the the hash</font>

592
00:24:45,600 --> 00:24:50,429
functions<font color="#CCCCCC"> yes I had yes the it</font><font color="#E5E5E5"> you did</font>

593
00:24:48,990 --> 00:24:52,380
an<font color="#E5E5E5"> awesome job</font><font color="#CCCCCC"> but in reverse</font>

594
00:24:50,430 --> 00:24:55,560
<font color="#E5E5E5">engineering</font><font color="#CCCCCC"> go</font><font color="#E5E5E5"> so his hash functions I</font>

595
00:24:52,380 --> 00:24:57,510
wondered what led<font color="#E5E5E5"> them or let's</font>

596
00:24:55,560 --> 00:24:59,460
speculate<font color="#E5E5E5"> speculation seems to be a</font>

597
00:24:57,510 --> 00:25:01,410
trendy trendy topic<font color="#E5E5E5"> here</font><font color="#CCCCCC"> as alright</font>

598
00:24:59,460 --> 00:25:03,960
let's speculate why they changed it<font color="#E5E5E5"> was</font>

599
00:25:01,410 --> 00:25:06,270
it just performance or<font color="#E5E5E5"> Arbor Day looking</font>

600
00:25:03,960 --> 00:25:09,120
for other things<font color="#CCCCCC"> what's your hunch</font><font color="#E5E5E5"> wow</font>

601
00:25:06,270 --> 00:25:12,180
this is from linear to<font color="#E5E5E5"> absorb yep well</font>

602
00:25:09,120 --> 00:25:13,889
it's indeed speculation so my<font color="#E5E5E5"> hunch is</font>

603
00:25:12,180 --> 00:25:16,170
that<font color="#E5E5E5"> this might cause more even</font>

604
00:25:13,890 --> 00:25:17,580
spreading<font color="#E5E5E5"> over all of the sets</font><font color="#CCCCCC"> so that</font>

605
00:25:16,170 --> 00:25:21,950
<font color="#CCCCCC">particular sets might not be overloaded</font>

606
00:25:17,580 --> 00:25:25,260
<font color="#E5E5E5">if that happens to be right this same</font>

607
00:25:21,950 --> 00:25:28,410
the same set<font color="#E5E5E5"> might be able to be active</font>

608
00:25:25,260 --> 00:25:31,290
on two different<font color="#E5E5E5"> sets and adding the</font>

609
00:25:28,410 --> 00:25:33,000
<font color="#CCCCCC">which hyper sphere</font><font color="#E5E5E5"> my bit and involving</font>

610
00:25:31,290 --> 00:25:36,030
more<font color="#CCCCCC"> virtue at risk would</font><font color="#E5E5E5"> I think have</font>

611
00:25:33,000 --> 00:25:38,190
<font color="#E5E5E5">more of a spreading effects but is it</font>

612
00:25:36,030 --> 00:25:42,360
<font color="#CCCCCC">cost-effective because X or</font><font color="#E5E5E5"> is more</font>

613
00:25:38,190 --> 00:25:46,080
expensive<font color="#CCCCCC"> to execute and then just</font>

614
00:25:42,360 --> 00:25:47,879
chopping off the bids yeah yeah<font color="#E5E5E5"> so</font>

615
00:25:46,080 --> 00:25:49,320
that's a little<font color="#E5E5E5"> bit again speculation</font>

616
00:25:47,880 --> 00:25:50,820
but<font color="#E5E5E5"> I would guess there's a lot of so</font>

617
00:25:49,320 --> 00:25:54,480
much<font color="#E5E5E5"> parallelism in computing</font><font color="#CCCCCC"> edge</font>

618
00:25:50,820 --> 00:25:56,399
function and wanting to another stuff

619
00:25:54,480 --> 00:26:00,990
that's going on<font color="#CCCCCC"> I guess is hidden but</font>

620
00:25:56,400 --> 00:26:03,150
<font color="#E5E5E5">right nice speculation yeah John</font>

621
00:26:00,990 --> 00:26:05,460
Criswell University of Rochester<font color="#E5E5E5"> very</font>

622
00:26:03,150 --> 00:26:08,760
nice talk<font color="#CCCCCC"> thank mom</font><font color="#E5E5E5"> one question I have</font>

623
00:26:05,460 --> 00:26:11,550
is<font color="#E5E5E5"> that as far</font><font color="#CCCCCC"> as I understand you</font>

624
00:26:08,760 --> 00:26:13,890
<font color="#E5E5E5">you're detecting which TLB entry the</font>

625
00:26:11,550 --> 00:26:16,050
victim is using and you're inferring

626
00:26:13,890 --> 00:26:18,540
<font color="#CCCCCC">that through</font><font color="#E5E5E5"> your side channel if that</font>

627
00:26:16,050 --> 00:26:20,580
is<font color="#CCCCCC"> correct then would the use of large</font>

628
00:26:18,540 --> 00:26:22,980
pages by<font color="#E5E5E5"> the victim potentially mitigate</font>

629
00:26:20,580 --> 00:26:26,889
this attack yeah that's a good<font color="#E5E5E5"> question</font>

630
00:26:22,980 --> 00:26:28,220
<font color="#CCCCCC">I</font><font color="#E5E5E5"> I didn't try</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> but I</font><font color="#CCCCCC"> think that's</font>

631
00:26:26,890 --> 00:26:30,750
[Music]

632
00:26:28,220 --> 00:26:32,160
so it'll make<font color="#E5E5E5"> it</font><font color="#CCCCCC"> harder for sure but I</font>

633
00:26:30,750 --> 00:26:33,810
think<font color="#CCCCCC"> you'll see then is</font><font color="#E5E5E5"> that all of</font>

634
00:26:32,160 --> 00:26:36,810
<font color="#CCCCCC">their signals and the different</font><font color="#E5E5E5"> TLB sets</font>

635
00:26:33,810 --> 00:26:39,720
they will<font color="#E5E5E5"> probably all be added up and</font>

636
00:26:36,810 --> 00:26:42,870
it'll<font color="#CCCCCC"> be much noisier as a result so on</font>

637
00:26:39,720 --> 00:26:45,270
the one hand<font color="#E5E5E5"> I think the signal will be</font>

638
00:26:42,870 --> 00:26:48,389
in there somewhere<font color="#CCCCCC"> and it'll probably</font>

639
00:26:45,270 --> 00:26:49,920
possible<font color="#E5E5E5"> to get at it but it'll also be</font>

640
00:26:48,390 --> 00:26:52,300
much harder<font color="#E5E5E5"> maybe much less maybe less</font>

641
00:26:49,920 --> 00:26:56,800
reliable<font color="#CCCCCC"> okay</font>

642
00:26:52,300 --> 00:27:03,569
thank you<font color="#E5E5E5"> thank you let's thank Finnegan</font>

643
00:26:56,800 --> 00:27:03,569
[Applause]

