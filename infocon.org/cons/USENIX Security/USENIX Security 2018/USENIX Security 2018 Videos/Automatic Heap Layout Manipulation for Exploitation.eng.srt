1
00:00:11,120 --> 00:00:14,209
<font color="#E5E5E5">I'm Shaun Hill and I'm going to be</font>

2
00:00:12,530 --> 00:00:15,849
talking<font color="#CCCCCC"> today</font><font color="#E5E5E5"> about automatic key player</font>

3
00:00:14,210 --> 00:00:17,050
manipulation for export

4
00:00:15,849 --> 00:00:19,740
and this is joint work<font color="#E5E5E5"> with my</font>

5
00:00:17,050 --> 00:00:22,539
supervisors<font color="#E5E5E5"> Tom bellum and Daniel</font><font color="#CCCCCC"> Cronyn</font>

6
00:00:19,740 --> 00:00:24,278
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> so I wouldn't</font><font color="#E5E5E5"> first of all talk</font>

7
00:00:22,539 --> 00:00:26,470
about<font color="#E5E5E5"> the manual process of developing</font>

8
00:00:24,279 --> 00:00:28,720
<font color="#E5E5E5">an exploit for a</font><font color="#CCCCCC"> heat-based</font><font color="#E5E5E5"> buffer</font>

9
00:00:26,470 --> 00:00:30,279
overflow<font color="#E5E5E5"> so if we start from</font><font color="#CCCCCC"> a</font>

10
00:00:28,720 --> 00:00:31,599
vulnerability report this could be a bug

11
00:00:30,279 --> 00:00:33,519
<font color="#CCCCCC">you</font><font color="#E5E5E5"> found yourself for a bogey found</font>

12
00:00:31,599 --> 00:00:35,530
online<font color="#CCCCCC"> in this case we're</font><font color="#E5E5E5"> gonna look at</font>

13
00:00:33,519 --> 00:00:36,970
a vulnerability in in PHP<font color="#E5E5E5"> and this</font>

14
00:00:35,530 --> 00:00:39,129
particular vulnerability<font color="#CCCCCC"> allows</font><font color="#E5E5E5"> us to</font>

15
00:00:36,970 --> 00:00:41,110
<font color="#E5E5E5">write</font><font color="#CCCCCC"> a null byte</font><font color="#E5E5E5"> directly after a heap</font>

16
00:00:39,129 --> 00:00:43,420
allocated buffer so we want to do is we

17
00:00:41,110 --> 00:00:45,400
want to<font color="#E5E5E5"> turn that into</font><font color="#CCCCCC"> a an exploit that</font>

18
00:00:43,420 --> 00:00:46,690
allows<font color="#CCCCCC"> us to execute native code so we</font>

19
00:00:45,400 --> 00:00:48,670
need to do is we need<font color="#E5E5E5"> to turn the null</font>

20
00:00:46,690 --> 00:00:50,589
byte over right into<font color="#E5E5E5"> certain to say an</font>

21
00:00:48,670 --> 00:00:52,030
arbitrary<font color="#CCCCCC"> read/write primitive so we can</font>

22
00:00:50,590 --> 00:00:55,270
<font color="#E5E5E5">rewrite the memory of the program and</font>

23
00:00:52,030 --> 00:00:56,620
gain code execution so the first thing

24
00:00:55,270 --> 00:00:58,780
we do is we construct<font color="#CCCCCC"> a minimize test</font>

25
00:00:56,620 --> 00:01:01,059
case which we<font color="#CCCCCC"> have here</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is the code</font>

26
00:00:58,780 --> 00:01:02,109
that triggers the bug and the question

27
00:01:01,059 --> 00:01:03,550
is well what's going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get corrupted</font>

28
00:01:02,109 --> 00:01:04,930
<font color="#CCCCCC">when we trigger this vulnerability it's</font>

29
00:01:03,550 --> 00:01:06,970
going to write a no bite immediately

30
00:01:04,930 --> 00:01:08,890
after the source buffer and<font color="#CCCCCC"> that could</font>

31
00:01:06,970 --> 00:01:10,420
be an unmapped page it could<font color="#E5E5E5"> be</font>

32
00:01:08,890 --> 00:01:13,119
allocated or<font color="#CCCCCC"> meta data</font><font color="#E5E5E5"> depending on the</font>

33
00:01:10,420 --> 00:01:15,130
<font color="#CCCCCC">allocator it could be user data</font><font color="#E5E5E5"> it could</font>

34
00:01:13,119 --> 00:01:17,050
<font color="#E5E5E5">be a pointer it could be some sensitive</font>

35
00:01:15,130 --> 00:01:18,670
data<font color="#E5E5E5"> so we need to do is we need</font><font color="#CCCCCC"> to</font>

36
00:01:17,050 --> 00:01:19,990
figure<font color="#E5E5E5"> out how to get something that we</font>

37
00:01:18,670 --> 00:01:23,290
actually<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to corrupt</font><font color="#E5E5E5"> after that</font>

38
00:01:19,990 --> 00:01:24,610
buffer so we can do this<font color="#E5E5E5"> in a number</font><font color="#CCCCCC"> of</font>

39
00:01:23,290 --> 00:01:25,540
<font color="#CCCCCC">ways one way is</font><font color="#E5E5E5"> we simply</font><font color="#CCCCCC"> go and</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> look</font>

40
00:01:24,610 --> 00:01:26,799
at the source<font color="#CCCCCC"> code if we have that</font>

41
00:01:25,540 --> 00:01:28,240
available<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we look for a data</font>

42
00:01:26,799 --> 00:01:29,200
structure<font color="#CCCCCC"> that allocate or that looks</font>

43
00:01:28,240 --> 00:01:31,360
<font color="#E5E5E5">like it will contain something</font>

44
00:01:29,200 --> 00:01:32,439
interesting<font color="#E5E5E5"> so with PHP you</font><font color="#CCCCCC"> can look</font>

45
00:01:31,360 --> 00:01:34,420
through<font color="#E5E5E5"> it eventually you'll find</font><font color="#CCCCCC"> this</font>

46
00:01:32,439 --> 00:01:37,449
<font color="#CCCCCC">GD image struct which has a array of</font>

47
00:01:34,420 --> 00:01:38,590
<font color="#CCCCCC">pixels as its</font><font color="#E5E5E5"> first parameter so when I</font>

48
00:01:37,450 --> 00:01:40,750
first<font color="#E5E5E5"> looked at this my thought was well</font>

49
00:01:38,590 --> 00:01:42,759
<font color="#CCCCCC">if we can</font><font color="#E5E5E5"> rewrite this array of</font><font color="#CCCCCC"> pixels</font>

50
00:01:40,750 --> 00:01:44,439
pointer<font color="#E5E5E5"> maybe we can use the functions</font>

51
00:01:42,759 --> 00:01:46,930
for<font color="#E5E5E5"> changing the image to start</font>

52
00:01:44,439 --> 00:01:47,889
rewriting arbitrary memory<font color="#E5E5E5"> so we need to</font>

53
00:01:46,930 --> 00:01:49,960
figure out<font color="#E5E5E5"> how do we</font><font color="#CCCCCC"> actually allocate</font>

54
00:01:47,890 --> 00:01:50,979
<font color="#CCCCCC">one of these data</font><font color="#E5E5E5"> structures so we</font>

55
00:01:49,960 --> 00:01:52,658
<font color="#E5E5E5">looked through the code we find</font>

56
00:01:50,979 --> 00:01:54,130
<font color="#E5E5E5">something that creates an image then we</font>

57
00:01:52,659 --> 00:01:56,649
find some way<font color="#CCCCCC"> to trigger that</font><font color="#E5E5E5"> from PHP</font>

58
00:01:54,130 --> 00:01:58,179
<font color="#E5E5E5">and eventually we end up with minimized</font>

59
00:01:56,649 --> 00:01:59,619
<font color="#E5E5E5">test case</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> looks like this</font><font color="#CCCCCC"> so we</font>

60
00:01:58,180 --> 00:02:03,280
create an<font color="#E5E5E5"> image then we trigger</font><font color="#CCCCCC"> the</font>

61
00:01:59,619 --> 00:02:04,570
vulnerability<font color="#E5E5E5"> and we hope that the GD</font>

62
00:02:03,280 --> 00:02:07,299
image structure actually<font color="#E5E5E5"> gets corrupted</font>

63
00:02:04,570 --> 00:02:08,949
<font color="#E5E5E5">but of course we've no guarantee</font><font color="#CCCCCC"> that it</font>

64
00:02:07,299 --> 00:02:11,049
will so we could<font color="#E5E5E5"> end up with this layout</font>

65
00:02:08,949 --> 00:02:12,488
where the<font color="#CCCCCC"> gdm instruct is before the</font>

66
00:02:11,049 --> 00:02:13,630
overflow source and we're still

67
00:02:12,489 --> 00:02:15,850
corrupting something that we don't<font color="#E5E5E5"> know</font>

68
00:02:13,630 --> 00:02:17,709
<font color="#E5E5E5">what it is so we need to do is we need</font>

69
00:02:15,850 --> 00:02:19,299
<font color="#CCCCCC">to put something in between the creation</font>

70
00:02:17,709 --> 00:02:20,620
<font color="#CCCCCC">of the infrastructure</font><font color="#E5E5E5"> and the triggering</font>

71
00:02:19,299 --> 00:02:22,150
<font color="#E5E5E5">of the vulnerability the guarantees that</font>

72
00:02:20,620 --> 00:02:25,930
<font color="#E5E5E5">we actually corrupt the thing that we</font>

73
00:02:22,150 --> 00:02:27,190
want to corrupt<font color="#E5E5E5"> okay so what we do is we</font>

74
00:02:25,930 --> 00:02:28,359
start<font color="#E5E5E5"> looking for</font><font color="#CCCCCC"> a heap manipulating</font>

75
00:02:27,190 --> 00:02:29,350
function so we go<font color="#CCCCCC"> through the source</font>

76
00:02:28,359 --> 00:02:32,350
code again<font color="#CCCCCC"> and we started</font>

77
00:02:29,350 --> 00:02:35,049
looking for things<font color="#CCCCCC"> that Alec data</font><font color="#E5E5E5"> the</font>

78
00:02:32,350 --> 00:02:36,760
the that<font color="#E5E5E5"> the user can control so here we</font>

79
00:02:35,050 --> 00:02:38,770
see the string repeat function<font color="#E5E5E5"> will</font>

80
00:02:36,760 --> 00:02:40,179
allocate<font color="#E5E5E5"> on the heap a string of the</font>

81
00:02:38,770 --> 00:02:42,250
size that<font color="#CCCCCC"> we can control so we can use</font>

82
00:02:40,180 --> 00:02:43,960
that<font color="#CCCCCC"> to</font><font color="#E5E5E5"> manipulate the heap we look for</font>

83
00:02:42,250 --> 00:02:46,270
other<font color="#E5E5E5"> functions so here we see down at</font>

84
00:02:43,960 --> 00:02:47,500
the bottom<font color="#CCCCCC"> a malloc of a static size so</font>

85
00:02:46,270 --> 00:02:49,600
we<font color="#E5E5E5"> can use that</font><font color="#CCCCCC"> to manipulate the heap</font>

86
00:02:47,500 --> 00:02:51,550
<font color="#E5E5E5">and we keep doing this</font><font color="#CCCCCC"> until we have</font>

87
00:02:49,600 --> 00:02:52,900
<font color="#E5E5E5">enough primitives</font><font color="#CCCCCC"> available to allow us</font>

88
00:02:51,550 --> 00:02:56,830
<font color="#E5E5E5">to manipulate the heap</font><font color="#CCCCCC"> into the state</font>

89
00:02:52,900 --> 00:03:00,490
<font color="#E5E5E5">that we want okay so now our exploit</font>

90
00:02:56,830 --> 00:03:02,560
looks something like this we do some<font color="#CCCCCC"> key</font>

91
00:03:00,490 --> 00:03:04,060
play out manipulation<font color="#E5E5E5"> we create the</font>

92
00:03:02,560 --> 00:03:05,590
image structure<font color="#E5E5E5"> we do some more heap</font>

93
00:03:04,060 --> 00:03:08,920
layout manipulation<font color="#E5E5E5"> we trigger</font><font color="#CCCCCC"> the</font>

94
00:03:05,590 --> 00:03:10,510
vulnerability<font color="#E5E5E5"> and we've guaranteed that</font>

95
00:03:08,920 --> 00:03:13,480
the image structure is beside the<font color="#E5E5E5"> buffer</font>

96
00:03:10,510 --> 00:03:15,910
so it gets corrupted<font color="#CCCCCC"> at that point it's</font>

97
00:03:13,480 --> 00:03:17,410
then up<font color="#E5E5E5"> to us to to finish the exploit</font>

98
00:03:15,910 --> 00:03:20,020
so completing the exploit in this case

99
00:03:17,410 --> 00:03:22,000
is using<font color="#E5E5E5"> that vulnerability to rewrite</font>

100
00:03:20,020 --> 00:03:25,330
the internal of the the internals of<font color="#CCCCCC"> the</font>

101
00:03:22,000 --> 00:03:26,410
allocator<font color="#E5E5E5"> to execute native code</font><font color="#CCCCCC"> okay</font>

102
00:03:25,330 --> 00:03:28,150
so in this case<font color="#E5E5E5"> the steps to</font>

103
00:03:26,410 --> 00:03:30,370
exploitation<font color="#E5E5E5"> were as follows we had to</font>

104
00:03:28,150 --> 00:03:31,720
<font color="#E5E5E5">discover a vulnerability we had to learn</font>

105
00:03:30,370 --> 00:03:33,910
<font color="#E5E5E5">how to</font><font color="#CCCCCC"> allocate some sensitive</font><font color="#E5E5E5"> data on</font>

106
00:03:31,720 --> 00:03:35,470
<font color="#E5E5E5">the heap</font><font color="#CCCCCC"> we'd to learn how to interact</font>

107
00:03:33,910 --> 00:03:37,480
with the<font color="#CCCCCC"> allocator via the program's</font><font color="#E5E5E5"> API</font>

108
00:03:35,470 --> 00:03:39,910
<font color="#E5E5E5">again remember we can't just call malloc</font>

109
00:03:37,480 --> 00:03:41,649
<font color="#E5E5E5">and free we have to interact with the</font>

110
00:03:39,910 --> 00:03:43,930
targets API and<font color="#E5E5E5"> then that will interact</font>

111
00:03:41,650 --> 00:03:46,300
<font color="#E5E5E5">with malloc and free we then achieve the</font>

112
00:03:43,930 --> 00:03:48,010
required heap layout using<font color="#CCCCCC"> these these</font>

113
00:03:46,300 --> 00:03:50,940
functions<font color="#E5E5E5"> and then finally we complete</font>

114
00:03:48,010 --> 00:03:54,070
the exploit so our contributions are in

115
00:03:50,940 --> 00:03:56,770
these stages here we<font color="#E5E5E5"> present a dynamic</font>

116
00:03:54,070 --> 00:03:58,900
analysis based on the<font color="#CCCCCC"> regression tests</font>

117
00:03:56,770 --> 00:04:01,210
<font color="#CCCCCC">that come with PHP</font><font color="#E5E5E5"> to discover out</font>

118
00:03:58,900 --> 00:04:03,130
<font color="#CCCCCC">allocate sensitive data</font><font color="#E5E5E5"> on the heap we</font>

119
00:04:01,210 --> 00:04:04,990
then combine<font color="#CCCCCC"> that same</font><font color="#E5E5E5"> dynamic analysis</font>

120
00:04:03,130 --> 00:04:06,970
with fuzzing<font color="#E5E5E5"> to discover ways to</font>

121
00:04:04,990 --> 00:04:09,160
<font color="#E5E5E5">interact with the allocator</font><font color="#CCCCCC"> and</font>

122
00:04:06,970 --> 00:04:11,230
manipulate the heap we then<font color="#CCCCCC"> present a</font>

123
00:04:09,160 --> 00:04:13,630
search algorithm for discovering

124
00:04:11,230 --> 00:04:15,429
sequences that result in the correct he

125
00:04:13,630 --> 00:04:16,690
play out and one<font color="#E5E5E5"> of the surprising</font>

126
00:04:15,430 --> 00:04:18,250
<font color="#CCCCCC">things about</font><font color="#E5E5E5"> this is actually</font><font color="#CCCCCC"> that the</font>

127
00:04:16,690 --> 00:04:20,858
the<font color="#E5E5E5"> search algorithm is incredibly said</font>

128
00:04:18,250 --> 00:04:22,600
incredibly simple<font color="#CCCCCC"> it turns out as we'll</font>

129
00:04:20,858 --> 00:04:24,010
see<font color="#CCCCCC"> later</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> a random search can</font>

130
00:04:22,600 --> 00:04:26,740
actually achieve<font color="#E5E5E5"> the layout so we wanted</font>

131
00:04:24,010 --> 00:04:28,870
which was pleasantly surprising<font color="#E5E5E5"> and then</font>

132
00:04:26,740 --> 00:04:30,280
<font color="#E5E5E5">finally we present a a template based</font>

133
00:04:28,870 --> 00:04:32,260
approach<font color="#CCCCCC"> to exploit writing which allows</font>

134
00:04:30,280 --> 00:04:33,880
you to<font color="#CCCCCC"> combine say the intuition and the</font>

135
00:04:32,260 --> 00:04:36,039
<font color="#E5E5E5">creativity of a human exploit developer</font>

136
00:04:33,880 --> 00:04:38,810
with the I guess search power of a

137
00:04:36,040 --> 00:04:41,129
machine<font color="#E5E5E5"> to complete exploits together</font>

138
00:04:38,810 --> 00:04:43,939
<font color="#E5E5E5">okay so first</font><font color="#CCCCCC"> of all</font><font color="#E5E5E5"> we're</font><font color="#CCCCCC"> gonna talk a</font>

139
00:04:41,129 --> 00:04:46,729
<font color="#E5E5E5">little bit about allocator design</font>

140
00:04:43,939 --> 00:04:49,080
allocator implementers have a lot<font color="#CCCCCC"> of</font>

141
00:04:46,729 --> 00:04:50,490
different design<font color="#E5E5E5"> choices they can make</font>

142
00:04:49,080 --> 00:04:52,020
depending on their<font color="#E5E5E5"> requirements so you</font>

143
00:04:50,490 --> 00:04:54,240
might want to<font color="#E5E5E5"> minimize fragmentation</font>

144
00:04:52,020 --> 00:04:56,969
maximize speed<font color="#E5E5E5"> maximize resilience</font>

145
00:04:54,240 --> 00:04:58,860
maximize<font color="#E5E5E5"> security and if we're</font>

146
00:04:56,969 --> 00:05:00,000
performing keep layout manipulation<font color="#CCCCCC"> if</font>

147
00:04:58,860 --> 00:05:01,550
we're doing<font color="#E5E5E5"> it manually we have to</font>

148
00:05:00,000 --> 00:05:03,659
understand how all these<font color="#CCCCCC"> alligators work</font>

149
00:05:01,550 --> 00:05:04,889
<font color="#E5E5E5">and it's quite a manual and tedious</font>

150
00:05:03,659 --> 00:05:06,090
process<font color="#CCCCCC"> so one of</font><font color="#E5E5E5"> the things that we</font>

151
00:05:04,889 --> 00:05:08,460
would like to<font color="#E5E5E5"> do is we would</font><font color="#CCCCCC"> like our</font>

152
00:05:06,090 --> 00:05:11,960
search algorithm<font color="#E5E5E5"> for discovering he play</font>

153
00:05:08,460 --> 00:05:14,008
outs to be agnostic<font color="#CCCCCC"> to the alligator</font>

154
00:05:11,960 --> 00:05:16,258
<font color="#CCCCCC">there are two design choices</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> are</font>

155
00:05:14,009 --> 00:05:19,080
particularly important<font color="#CCCCCC"> I won't cover the</font>

156
00:05:16,259 --> 00:05:20,789
others<font color="#E5E5E5"> one is</font><font color="#CCCCCC"> a alligator designer can</font>

157
00:05:19,080 --> 00:05:23,340
decide to<font color="#E5E5E5"> use what are called segregated</font>

158
00:05:20,789 --> 00:05:26,099
free lists and in segregated free lists

159
00:05:23,340 --> 00:05:28,799
these<font color="#E5E5E5"> green chunks here are free chunks</font>

160
00:05:26,099 --> 00:05:32,819
and what they do is they keep a<font color="#E5E5E5"> a list</font>

161
00:05:28,800 --> 00:05:34,560
of<font color="#E5E5E5"> chunks for each size class so here we</font>

162
00:05:32,819 --> 00:05:36,960
<font color="#E5E5E5">can see we</font><font color="#CCCCCC"> have two size classes so</font><font color="#E5E5E5"> we</font>

163
00:05:34,560 --> 00:05:40,139
have a free list of<font color="#CCCCCC"> size 128 a free list</font>

164
00:05:36,960 --> 00:05:43,109
<font color="#E5E5E5">of size 32 and then the remainder and</font>

165
00:05:40,139 --> 00:05:44,969
what you can see<font color="#CCCCCC"> is these free chunks</font>

166
00:05:43,110 --> 00:05:47,159
can<font color="#E5E5E5"> be anywhere in memory now this is</font>

167
00:05:44,969 --> 00:05:49,650
contrasted<font color="#CCCCCC"> with what's called segregated</font>

168
00:05:47,159 --> 00:05:52,080
storage or a bit based<font color="#E5E5E5"> alligator where</font>

169
00:05:49,650 --> 00:05:54,270
when a request for an<font color="#E5E5E5"> allocation is a</font>

170
00:05:52,080 --> 00:05:56,430
<font color="#CCCCCC">row is received the alligator allocates</font>

171
00:05:54,270 --> 00:05:59,400
<font color="#E5E5E5">say multiple</font><font color="#CCCCCC"> pages and then subdivides</font>

172
00:05:56,430 --> 00:06:01,409
those<font color="#E5E5E5"> pages into chunks of the exactly</font>

173
00:05:59,400 --> 00:06:03,210
<font color="#CCCCCC">the</font><font color="#E5E5E5"> same size and then it will never</font>

174
00:06:01,409 --> 00:06:05,310
<font color="#E5E5E5">split or coalesce those any further</font><font color="#CCCCCC"> and</font>

175
00:06:03,210 --> 00:06:06,508
why<font color="#CCCCCC"> this design is a it's quite</font>

176
00:06:05,310 --> 00:06:08,339
important when it comes<font color="#CCCCCC"> to heap layout</font>

177
00:06:06,509 --> 00:06:09,779
manipulation is you'll<font color="#E5E5E5"> notice that only</font>

178
00:06:08,339 --> 00:06:11,520
<font color="#E5E5E5">the start and the end chunks can</font>

179
00:06:09,779 --> 00:06:13,409
actually be adjacent to chunks of a

180
00:06:11,520 --> 00:06:15,479
different size right so in the

181
00:06:13,409 --> 00:06:17,339
<font color="#E5E5E5">segregated free</font><font color="#CCCCCC"> lists implementation the</font>

182
00:06:15,479 --> 00:06:18,810
chunks of different sizes could be

183
00:06:17,339 --> 00:06:20,400
interspersed<font color="#CCCCCC"> with each other</font><font color="#E5E5E5"> whereas</font>

184
00:06:18,810 --> 00:06:21,629
<font color="#E5E5E5">with segregated storage only</font><font color="#CCCCCC"> the start</font>

185
00:06:20,400 --> 00:06:22,830
<font color="#E5E5E5">and the end chunks can be adjacent to</font>

186
00:06:21,629 --> 00:06:24,180
<font color="#E5E5E5">something of different size so that we</font>

187
00:06:22,830 --> 00:06:25,830
would expect that to<font color="#CCCCCC"> change the</font>

188
00:06:24,180 --> 00:06:27,029
difficulty<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> problem</font><font color="#CCCCCC"> and we'll see</font>

189
00:06:25,830 --> 00:06:30,210
<font color="#E5E5E5">later when we do our</font><font color="#CCCCCC"> analysis that</font>

190
00:06:27,029 --> 00:06:31,919
actually does<font color="#E5E5E5"> okay so I'm just going to</font>

191
00:06:30,210 --> 00:06:34,888
<font color="#E5E5E5">give a brief introduction to</font><font color="#CCCCCC"> he plant</font>

192
00:06:31,919 --> 00:06:38,068
manipulation say we have a source of

193
00:06:34,889 --> 00:06:40,710
size R<font color="#E5E5E5"> so a source buffer of size 8 a</font>

194
00:06:38,069 --> 00:06:41,610
destination buffer of size 32<font color="#E5E5E5"> and what</font>

195
00:06:40,710 --> 00:06:42,989
we would<font color="#CCCCCC"> like to do is</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> like to</font>

196
00:06:41,610 --> 00:06:44,699
<font color="#E5E5E5">put the destination buffer and the</font>

197
00:06:42,990 --> 00:06:47,729
source buffer adjacent to each<font color="#E5E5E5"> other so</font>

198
00:06:44,699 --> 00:06:48,779
the destination buffer is corrupted so

199
00:06:47,729 --> 00:06:51,479
the first thing that<font color="#E5E5E5"> we could try</font><font color="#CCCCCC"> doing</font>

200
00:06:48,779 --> 00:06:52,139
is simply allocating this source buffer

201
00:06:51,479 --> 00:06:54,060
<font color="#E5E5E5">and the destination</font>

202
00:06:52,139 --> 00:06:56,189
buffer but what we'll see is<font color="#E5E5E5"> because the</font>

203
00:06:54,060 --> 00:06:58,110
the first free chunk of size 32 is

204
00:06:56,189 --> 00:07:00,120
before<font color="#E5E5E5"> the first free chunk of size 8</font>

205
00:06:58,110 --> 00:07:02,430
then what ends up happening is<font color="#CCCCCC"> the</font>

206
00:07:00,120 --> 00:07:03,479
source in the<font color="#E5E5E5"> destination end up in the</font>

207
00:07:02,430 --> 00:07:04,129
<font color="#E5E5E5">wrong order so if we trigger the</font>

208
00:07:03,479 --> 00:07:07,318
overflow

209
00:07:04,129 --> 00:07:08,430
we won't corrupt the correct thing so

210
00:07:07,319 --> 00:07:10,620
the solution in this<font color="#E5E5E5"> case</font><font color="#CCCCCC"> is what's</font>

211
00:07:08,430 --> 00:07:12,629
called hole filling<font color="#CCCCCC"> so what we do is we</font>

212
00:07:10,620 --> 00:07:15,569
simply<font color="#E5E5E5"> fill the</font><font color="#CCCCCC"> hole of size 32 with a</font>

213
00:07:12,629 --> 00:07:17,939
<font color="#CCCCCC">throwaway allocation we fill the hole of</font>

214
00:07:15,569 --> 00:07:20,849
size<font color="#E5E5E5"> 8 when another throwaway allocation</font>

215
00:07:17,939 --> 00:07:22,020
that<font color="#E5E5E5"> leaves the hole of size 196 so now</font>

216
00:07:20,849 --> 00:07:23,219
when we allocate<font color="#E5E5E5"> the source and the</font>

217
00:07:22,020 --> 00:07:24,930
destination there'll be<font color="#CCCCCC"> poop beside each</font>

218
00:07:23,219 --> 00:07:28,199
other<font color="#E5E5E5"> the destination will get corrupted</font>

219
00:07:24,930 --> 00:07:29,490
<font color="#CCCCCC">and</font><font color="#E5E5E5"> we progress with our exploit one</font>

220
00:07:28,199 --> 00:07:30,900
thing worth mentioning<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that a</font>

221
00:07:29,490 --> 00:07:34,229
significant challenge<font color="#E5E5E5"> in he play up</font>

222
00:07:30,900 --> 00:07:37,080
manipulation<font color="#E5E5E5"> is what we'll call noise so</font>

223
00:07:34,229 --> 00:07:39,568
noisy allocations<font color="#CCCCCC"> are allocations that</font>

224
00:07:37,080 --> 00:07:41,789
<font color="#E5E5E5">occur that we can't prevent so for</font>

225
00:07:39,569 --> 00:07:43,050
example as I said<font color="#E5E5E5"> you can't interact</font>

226
00:07:41,789 --> 00:07:44,360
directly with<font color="#CCCCCC"> the allocator you have to</font>

227
00:07:43,050 --> 00:07:46,650
go<font color="#CCCCCC"> through</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> programs API</font><font color="#E5E5E5"> and</font>

228
00:07:44,360 --> 00:07:48,029
therefore in some situations it may not

229
00:07:46,650 --> 00:07:49,620
be possible to just allocate the thing

230
00:07:48,029 --> 00:07:51,419
you want you may have to also<font color="#E5E5E5"> trigger a</font>

231
00:07:49,620 --> 00:07:53,639
bunch of<font color="#E5E5E5"> other allocations</font><font color="#CCCCCC"> so in this</font>

232
00:07:51,419 --> 00:07:55,378
case we allocate<font color="#CCCCCC"> when we want to</font>

233
00:07:53,639 --> 00:07:57,389
<font color="#CCCCCC">allocate the destination we also have to</font>

234
00:07:55,379 --> 00:07:58,710
allocate this thing of size 32 and<font color="#E5E5E5"> now</font>

235
00:07:57,389 --> 00:08:00,240
that may get<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> way so we need to</font>

236
00:07:58,710 --> 00:08:01,830
figure<font color="#E5E5E5"> out some way</font><font color="#CCCCCC"> to get these noisy</font>

237
00:08:00,240 --> 00:08:04,139
allocations placed<font color="#E5E5E5"> elsewhere on the heap</font>

238
00:08:01,830 --> 00:08:05,818
and the solution to<font color="#CCCCCC"> that so here we see</font>

239
00:08:04,139 --> 00:08:08,370
if we<font color="#CCCCCC"> just</font><font color="#E5E5E5"> allocate the source and then</font>

240
00:08:05,819 --> 00:08:10,289
the<font color="#CCCCCC"> destination this</font><font color="#E5E5E5"> end 0 allocation</font>

241
00:08:08,370 --> 00:08:12,659
ends up in the way so the solution<font color="#E5E5E5"> is</font>

242
00:08:10,289 --> 00:08:14,188
<font color="#E5E5E5">what's called whole creation so we do is</font>

243
00:08:12,659 --> 00:08:16,469
we<font color="#E5E5E5"> first of all we allocate three things</font>

244
00:08:14,189 --> 00:08:18,839
of<font color="#E5E5E5"> size</font><font color="#CCCCCC"> 32</font><font color="#E5E5E5"> one of size 8</font>

245
00:08:16,469 --> 00:08:21,180
then we free the middle<font color="#E5E5E5"> chunk which</font>

246
00:08:18,839 --> 00:08:24,930
creates a<font color="#CCCCCC"> hole of size 32</font><font color="#E5E5E5"> now when we</font>

247
00:08:21,180 --> 00:08:28,139
allocate<font color="#CCCCCC"> the sort of</font><font color="#E5E5E5"> the destination the</font>

248
00:08:24,930 --> 00:08:30,750
noise is captured by<font color="#CCCCCC"> the hole here</font><font color="#E5E5E5"> and</font>

249
00:08:28,139 --> 00:08:33,870
the destination<font color="#E5E5E5"> is placed afterwards</font>

250
00:08:30,750 --> 00:08:35,610
after a<font color="#CCCCCC"> 3 so now if</font><font color="#E5E5E5"> we free a 3</font><font color="#CCCCCC"> we'll</font>

251
00:08:33,870 --> 00:08:36,929
create<font color="#E5E5E5"> a hole of size 8 and</font><font color="#CCCCCC"> we can place</font>

252
00:08:35,610 --> 00:08:39,269
the source in there<font color="#E5E5E5"> so that's what</font>

253
00:08:36,929 --> 00:08:40,649
happens<font color="#E5E5E5"> here we end up with</font><font color="#CCCCCC"> the source</font>

254
00:08:39,269 --> 00:08:42,179
and<font color="#E5E5E5"> destination beside each other again</font>

255
00:08:40,649 --> 00:08:44,190
so that's<font color="#CCCCCC"> just to give you a quick</font>

256
00:08:42,179 --> 00:08:45,569
introduction<font color="#E5E5E5"> to</font><font color="#CCCCCC"> what is involved</font><font color="#E5E5E5"> in he</font>

257
00:08:44,190 --> 00:08:47,850
play<font color="#CCCCCC"> out</font><font color="#E5E5E5"> manipulation it tends to</font>

258
00:08:45,570 --> 00:08:49,470
<font color="#E5E5E5">involve hole filling and hole creation</font>

259
00:08:47,850 --> 00:08:53,339
and you're effectively trying<font color="#E5E5E5"> to solve</font>

260
00:08:49,470 --> 00:08:55,050
this layout puzzle<font color="#CCCCCC"> ok so if we want to</font>

261
00:08:53,339 --> 00:08:56,519
<font color="#CCCCCC">automate he play up manipulation our</font>

262
00:08:55,050 --> 00:08:58,260
objective<font color="#E5E5E5"> is we want to place the source</font>

263
00:08:56,519 --> 00:08:59,760
<font color="#E5E5E5">and the destination buffer adjacent to</font>

264
00:08:58,260 --> 00:09:01,980
each<font color="#E5E5E5"> other the mechanisms we have</font>

265
00:08:59,760 --> 00:09:04,050
<font color="#E5E5E5">available</font><font color="#CCCCCC"> to us</font><font color="#E5E5E5"> are hole filling and</font>

266
00:09:01,980 --> 00:09:05,310
hole creation and the complicating

267
00:09:04,050 --> 00:09:06,990
factors are well of

268
00:09:05,310 --> 00:09:09,810
<font color="#E5E5E5">as I said there's a diverse set of</font>

269
00:09:06,990 --> 00:09:11,160
implementations for<font color="#E5E5E5"> these</font><font color="#CCCCCC"> allocators we</font>

270
00:09:09,810 --> 00:09:12,239
can't interact directly with<font color="#E5E5E5"> the</font>

271
00:09:11,160 --> 00:09:14,130
allocator we have to go through the

272
00:09:12,240 --> 00:09:15,540
<font color="#CCCCCC">programs API we have noise in these</font>

273
00:09:14,130 --> 00:09:17,220
allocations<font color="#CCCCCC"> and then we have</font>

274
00:09:15,540 --> 00:09:19,490
complicating factors from<font color="#E5E5E5"> the allocator</font>

275
00:09:17,220 --> 00:09:21,090
design itself such as<font color="#E5E5E5"> segregated storage</font>

276
00:09:19,490 --> 00:09:22,710
<font color="#CCCCCC">there are also a couple of other</font>

277
00:09:21,090 --> 00:09:25,290
<font color="#E5E5E5">complications that we consider for</font><font color="#CCCCCC"> this</font>

278
00:09:22,710 --> 00:09:27,000
work to<font color="#E5E5E5"> be to be out of scope so those</font>

279
00:09:25,290 --> 00:09:28,829
are<font color="#CCCCCC"> non-deterministic</font><font color="#E5E5E5"> allocators so for</font>

280
00:09:27,000 --> 00:09:32,370
example the<font color="#E5E5E5"> the</font><font color="#CCCCCC"> OBS the</font><font color="#E5E5E5"> allocator</font>

281
00:09:28,830 --> 00:09:33,930
uses<font color="#E5E5E5"> non determinism internally the</font>

282
00:09:32,370 --> 00:09:35,580
modern<font color="#E5E5E5"> Windows 10 allocator uses</font><font color="#CCCCCC"> a non</font>

283
00:09:33,930 --> 00:09:37,529
determinism internally<font color="#E5E5E5"> but other</font>

284
00:09:35,580 --> 00:09:40,470
allocators that don't are things like<font color="#CCCCCC"> DL</font>

285
00:09:37,529 --> 00:09:42,570
<font color="#E5E5E5">malloc the Linux system allocator TC</font>

286
00:09:40,470 --> 00:09:44,070
malloc<font color="#E5E5E5"> and we also assume that we can</font>

287
00:09:42,570 --> 00:09:46,650
<font color="#E5E5E5">force the heap state into</font><font color="#CCCCCC"> an own</font>

288
00:09:44,070 --> 00:09:48,570
starting state so this occurs in

289
00:09:46,650 --> 00:09:50,040
situations for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> when a a new</font>

290
00:09:48,570 --> 00:09:51,839
<font color="#E5E5E5">process is</font><font color="#CCCCCC"> spawned for every</font><font color="#E5E5E5"> connection</font>

291
00:09:50,040 --> 00:09:53,130
and we<font color="#E5E5E5"> have access</font><font color="#CCCCCC"> to the binary so if</font>

292
00:09:51,839 --> 00:09:55,080
it's open source or it's<font color="#E5E5E5"> closed source</font>

293
00:09:53,130 --> 00:09:57,240
and we can get the binary<font color="#CCCCCC"> or if we can</font>

294
00:09:55,080 --> 00:10:01,290
use another vulnerability<font color="#E5E5E5"> to kill the</font>

295
00:09:57,240 --> 00:10:02,790
server and reset it<font color="#E5E5E5"> okay so as I</font>

296
00:10:01,290 --> 00:10:04,050
<font color="#E5E5E5">mentioned one of the first ideas</font><font color="#CCCCCC"> that we</font>

297
00:10:02,790 --> 00:10:05,699
had was well what if we<font color="#CCCCCC"> just try random</font>

298
00:10:04,050 --> 00:10:07,859
<font color="#E5E5E5">search for this could have actually</font><font color="#CCCCCC"> work</font>

299
00:10:05,700 --> 00:10:09,050
and the<font color="#E5E5E5"> intuition for</font><font color="#CCCCCC"> this is that</font>

300
00:10:07,860 --> 00:10:11,280
there's<font color="#E5E5E5"> actually quite a lot of</font>

301
00:10:09,050 --> 00:10:12,810
<font color="#E5E5E5">equivalence in the in the solution space</font>

302
00:10:11,280 --> 00:10:14,550
<font color="#E5E5E5">because we don't care about absolute</font>

303
00:10:12,810 --> 00:10:16,140
positioning of the heap allocated chunks

304
00:10:14,550 --> 00:10:18,630
right<font color="#E5E5E5"> we don't care if the source and</font>

305
00:10:16,140 --> 00:10:20,189
<font color="#E5E5E5">destination are allocated way over here</font>

306
00:10:18,630 --> 00:10:23,430
or way<font color="#CCCCCC"> over here as</font><font color="#E5E5E5"> long as they're</font>

307
00:10:20,190 --> 00:10:24,630
allocated beside each<font color="#E5E5E5"> other</font><font color="#CCCCCC"> so for these</font>

308
00:10:23,430 --> 00:10:26,040
various reasons we<font color="#E5E5E5"> thought well</font><font color="#CCCCCC"> let's</font>

309
00:10:24,630 --> 00:10:28,530
just try<font color="#CCCCCC"> random search and see what</font>

310
00:10:26,040 --> 00:10:29,969
happens so before we went on to<font color="#E5E5E5"> doing</font>

311
00:10:28,530 --> 00:10:31,140
this for<font color="#CCCCCC"> real on a real target we</font>

312
00:10:29,970 --> 00:10:32,730
thought it might<font color="#CCCCCC"> make</font><font color="#E5E5E5"> sense to test it</font>

313
00:10:31,140 --> 00:10:33,689
in a set of synthetic<font color="#E5E5E5"> benchmarks because</font>

314
00:10:32,730 --> 00:10:35,370
<font color="#E5E5E5">obviously if it doesn't work on</font>

315
00:10:33,690 --> 00:10:36,540
synthetic<font color="#E5E5E5"> benchmarks then completing it</font>

316
00:10:35,370 --> 00:10:39,810
<font color="#E5E5E5">in real target isn't gonna make much</font>

317
00:10:36,540 --> 00:10:41,430
sense<font color="#CCCCCC"> so we used</font><font color="#E5E5E5"> TC malloc DL malloc</font><font color="#CCCCCC"> AVR</font>

318
00:10:39,810 --> 00:10:43,469
<font color="#CCCCCC">a</font><font color="#E5E5E5"> loop C and then we captured the</font>

319
00:10:41,430 --> 00:10:45,810
starting<font color="#CCCCCC"> States for Ruby Python and two</font>

320
00:10:43,470 --> 00:10:47,520
ways of initializing PHP<font color="#E5E5E5"> took the</font>

321
00:10:45,810 --> 00:10:48,750
cross-product of these sizes and then

322
00:10:47,520 --> 00:10:51,240
there<font color="#E5E5E5"> are also some</font><font color="#CCCCCC"> other parameters</font>

323
00:10:48,750 --> 00:10:53,550
related to noise ends up<font color="#E5E5E5"> at</font><font color="#CCCCCC"> about 2500</font>

324
00:10:51,240 --> 00:10:56,760
different benchmarks we allow the random

325
00:10:53,550 --> 00:11:00,319
search to guess<font color="#CCCCCC"> a maximum of 500,000</font>

326
00:10:56,760 --> 00:11:04,640
solutions which takes about 15 minutes

327
00:11:00,320 --> 00:11:08,910
<font color="#CCCCCC">and</font><font color="#E5E5E5"> then ran all of the benchmarks so</font>

328
00:11:04,640 --> 00:11:11,310
these are the<font color="#E5E5E5"> results averaged over</font><font color="#CCCCCC"> all</font>

329
00:11:08,910 --> 00:11:13,199
<font color="#E5E5E5">for starting</font><font color="#CCCCCC"> States so we can see first</font>

330
00:11:11,310 --> 00:11:15,329
<font color="#E5E5E5">of all is</font><font color="#CCCCCC"> that when there's no</font>

331
00:11:13,200 --> 00:11:16,770
<font color="#E5E5E5">segregated storage so these two</font>

332
00:11:15,330 --> 00:11:18,390
alligators<font color="#E5E5E5"> don't use segregated storage</font>

333
00:11:16,770 --> 00:11:19,069
and when there's no noise random search

334
00:11:18,390 --> 00:11:20,620
can solve

335
00:11:19,070 --> 00:11:23,420
to be all of the<font color="#CCCCCC"> he player</font><font color="#E5E5E5"> benchmarks</font>

336
00:11:20,620 --> 00:11:25,340
<font color="#E5E5E5">once we add segregated storage so TC</font>

337
00:11:23,420 --> 00:11:28,370
<font color="#E5E5E5">Malik has segregated storage we see a</font>

338
00:11:25,340 --> 00:11:30,980
drop<font color="#CCCCCC"> down to</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> 70% of the problem</font>

339
00:11:28,370 --> 00:11:32,270
solved<font color="#E5E5E5"> with one noise the allocation we</font>

340
00:11:30,980 --> 00:11:34,100
can then see we're down solving about

341
00:11:32,270 --> 00:11:35,689
half of<font color="#E5E5E5"> the problems and then with</font><font color="#CCCCCC"> four</font>

342
00:11:34,100 --> 00:11:36,850
<font color="#E5E5E5">noise the allocations the success rate</font>

343
00:11:35,690 --> 00:11:39,740
drops again

344
00:11:36,850 --> 00:11:40,730
so in summary random search<font color="#E5E5E5"> it actually</font>

345
00:11:39,740 --> 00:11:43,490
performs pretty<font color="#E5E5E5"> well for what's</font>

346
00:11:40,730 --> 00:11:44,630
inherently a very dumb algorithm and

347
00:11:43,490 --> 00:11:46,820
especially when there's no noise<font color="#E5E5E5"> and</font>

348
00:11:44,630 --> 00:11:48,380
there's no segregated<font color="#E5E5E5"> storage the other</font>

349
00:11:46,820 --> 00:11:50,750
thing is to get<font color="#E5E5E5"> those results we</font>

350
00:11:48,380 --> 00:11:53,689
averaged across nine runs of of the

351
00:11:50,750 --> 00:11:55,940
extent<font color="#CCCCCC"> of experiments and if we actually</font>

352
00:11:53,690 --> 00:11:57,620
<font color="#CCCCCC">consider</font><font color="#E5E5E5"> all nine runs</font><font color="#CCCCCC"> together so a</font>

353
00:11:55,940 --> 00:12:00,290
maximum<font color="#CCCCCC"> of</font><font color="#E5E5E5"> four point five million</font>

354
00:11:57,620 --> 00:12:02,210
guesses<font color="#E5E5E5"> 78%</font><font color="#CCCCCC"> of the problems were</font>

355
00:12:00,290 --> 00:12:04,099
actually solved at least<font color="#E5E5E5"> once so</font><font color="#CCCCCC"> that</font>

356
00:12:02,210 --> 00:12:06,890
means that<font color="#E5E5E5"> only 22% of the problems were</font>

357
00:12:04,100 --> 00:12:08,360
never solved<font color="#E5E5E5"> and in normal exploit</font>

358
00:12:06,890 --> 00:12:09,860
development it's the case usually<font color="#CCCCCC"> that</font>

359
00:12:08,360 --> 00:12:11,570
you have a lot longer<font color="#E5E5E5"> than 15 minutes</font><font color="#CCCCCC"> of</font>

360
00:12:09,860 --> 00:12:13,790
computation time to<font color="#E5E5E5"> actually to get a</font>

361
00:12:11,570 --> 00:12:16,250
result<font color="#CCCCCC"> so that was a pleasant surprise</font>

362
00:12:13,790 --> 00:12:18,020
<font color="#CCCCCC">and</font><font color="#E5E5E5"> so we</font><font color="#CCCCCC"> say what appropriate</font>

363
00:12:16,250 --> 00:12:21,200
<font color="#E5E5E5">computational resources random search is</font>

364
00:12:18,020 --> 00:12:22,819
pretty effective<font color="#CCCCCC"> okay so if you want</font><font color="#E5E5E5"> to</font>

365
00:12:21,200 --> 00:12:25,340
integrate<font color="#E5E5E5"> this random search into the</font>

366
00:12:22,820 --> 00:12:27,140
heap exploitation process we saw at the

367
00:12:25,340 --> 00:12:31,310
<font color="#CCCCCC">start</font><font color="#E5E5E5"> we just solve a few different</font>

368
00:12:27,140 --> 00:12:34,130
problems<font color="#E5E5E5"> the actual the target program</font>

369
00:12:31,310 --> 00:12:36,050
we chose<font color="#E5E5E5"> to to experiment with is PHP so</font>

370
00:12:34,130 --> 00:12:38,780
PHP<font color="#E5E5E5"> has an open bug tracker and the</font>

371
00:12:36,050 --> 00:12:40,430
language is pretty stable<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it's its</font>

372
00:12:38,780 --> 00:12:42,589
feature<font color="#CCCCCC"> full but relatively easy to</font>

373
00:12:40,430 --> 00:12:44,390
reason<font color="#E5E5E5"> about and a hypothetical threat</font>

374
00:12:42,590 --> 00:12:46,250
model here is you can write a PHP

375
00:12:44,390 --> 00:12:47,689
<font color="#E5E5E5">program and you can provide it to the</font>

376
00:12:46,250 --> 00:12:49,310
interpreter<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you want to</font><font color="#E5E5E5"> escape from</font>

377
00:12:47,690 --> 00:12:53,180
<font color="#E5E5E5">the interpreter</font><font color="#CCCCCC"> to execute native code</font>

378
00:12:49,310 --> 00:12:54,709
<font color="#E5E5E5">okay okay so our</font><font color="#CCCCCC"> high-level</font><font color="#E5E5E5"> algorithms</font>

379
00:12:53,180 --> 00:12:55,819
as follows<font color="#E5E5E5"> first of all we need</font><font color="#CCCCCC"> to</font>

380
00:12:54,710 --> 00:12:58,310
discover how<font color="#CCCCCC"> to interact with the</font>

381
00:12:55,820 --> 00:13:00,200
allocator via the<font color="#E5E5E5"> program's API we do</font>

382
00:12:58,310 --> 00:13:02,479
<font color="#E5E5E5">this in in the following so PHP comes</font>

383
00:13:00,200 --> 00:13:04,730
with about<font color="#E5E5E5"> 11,000 regression tests from</font>

384
00:13:02,480 --> 00:13:07,400
those regression tests<font color="#E5E5E5"> we can fragment</font>

385
00:13:04,730 --> 00:13:09,110
them up<font color="#E5E5E5"> into fragments of PHP and then</font>

386
00:13:07,400 --> 00:13:11,360
<font color="#E5E5E5">we can fuzz those individual</font><font color="#CCCCCC"> fragments</font>

387
00:13:09,110 --> 00:13:13,280
in an instrumented<font color="#CCCCCC"> version of PHP</font><font color="#E5E5E5"> to</font>

388
00:13:11,360 --> 00:13:19,340
discover the<font color="#CCCCCC"> resulting calls</font><font color="#E5E5E5"> to malloc</font>

389
00:13:13,280 --> 00:13:20,990
and free so once we have these fragments

390
00:13:19,340 --> 00:13:22,610
that we know interact with the allocator

391
00:13:20,990 --> 00:13:24,050
<font color="#E5E5E5">what we can do is we can start randomly</font>

392
00:13:22,610 --> 00:13:25,640
combining them to<font color="#CCCCCC"> manipulate the heap so</font>

393
00:13:24,050 --> 00:13:28,760
<font color="#CCCCCC">we start producing sequences</font><font color="#E5E5E5"> that look</font>

394
00:13:25,640 --> 00:13:30,439
like<font color="#E5E5E5"> this and in terms of a say a</font>

395
00:13:28,760 --> 00:13:32,090
programmer writing<font color="#CCCCCC"> PHP this</font><font color="#E5E5E5"> is obviously</font>

396
00:13:30,440 --> 00:13:32,550
nonsense<font color="#CCCCCC"> but what's going</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> behind the</font>

397
00:13:32,090 --> 00:13:33,870
<font color="#E5E5E5">scenes</font>

398
00:13:32,550 --> 00:13:36,930
the<font color="#E5E5E5"> heap was being</font><font color="#CCCCCC"> manipulated in a way</font>

399
00:13:33,870 --> 00:13:39,420
that we know<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so then we just we</font>

400
00:13:36,930 --> 00:13:41,219
keep<font color="#CCCCCC"> randomly generating those and every</font>

401
00:13:39,420 --> 00:13:43,949
time we generate a<font color="#E5E5E5"> new</font><font color="#CCCCCC"> PHP program which</font>

402
00:13:41,220 --> 00:13:44,790
tries to manipulate the heap<font color="#E5E5E5"> we check to</font>

403
00:13:43,950 --> 00:13:47,070
<font color="#E5E5E5">see if the source and the destination</font>

404
00:13:44,790 --> 00:13:48,180
are adjacent<font color="#E5E5E5"> and if they are we're</font>

405
00:13:47,070 --> 00:13:51,570
finished<font color="#E5E5E5"> and if they're</font><font color="#CCCCCC"> not we just</font>

406
00:13:48,180 --> 00:13:54,239
<font color="#E5E5E5">repeat the process so to</font><font color="#CCCCCC"> evaluate this</font>

407
00:13:51,570 --> 00:13:56,459
<font color="#E5E5E5">we took three vulnerabilities in PHP and</font>

408
00:13:54,240 --> 00:13:58,200
<font color="#E5E5E5">ten data structures that are interesting</font>

409
00:13:56,459 --> 00:13:59,790
to corrupt<font color="#E5E5E5"> so these data structures all</font>

410
00:13:58,200 --> 00:14:01,800
of a pointer is their first field so if

411
00:13:59,790 --> 00:14:03,740
you can<font color="#E5E5E5"> corrupt them you can make you</font>

412
00:14:01,800 --> 00:14:06,269
<font color="#CCCCCC">can use them for</font><font color="#E5E5E5"> exploitation usually a</font>

413
00:14:03,740 --> 00:14:09,300
maximum<font color="#E5E5E5"> run time</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> 12 hours and 40</font>

414
00:14:06,269 --> 00:14:10,709
concurrent analysis<font color="#E5E5E5"> processes and in</font>

415
00:14:09,300 --> 00:14:13,649
line<font color="#CCCCCC"> with what we</font><font color="#E5E5E5"> saw during the</font>

416
00:14:10,709 --> 00:14:15,989
evaluation<font color="#E5E5E5"> on the synthetic benchmarks</font>

417
00:14:13,649 --> 00:14:18,450
<font color="#E5E5E5">about</font><font color="#CCCCCC"> 70% of the the benchmarks are</font>

418
00:14:15,990 --> 00:14:20,910
solved on<font color="#E5E5E5"> average it takes</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> 10</font>

419
00:14:18,450 --> 00:14:23,519
minutes<font color="#CCCCCC"> and the maximum run time for a</font>

420
00:14:20,910 --> 00:14:29,300
<font color="#CCCCCC">salty benchmark was about an hour so</font>

421
00:14:23,519 --> 00:14:31,680
<font color="#E5E5E5">that was that</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> good to</font><font color="#CCCCCC"> see okay so</font><font color="#E5E5E5"> a</font>

422
00:14:29,300 --> 00:14:33,060
heap layout does not an exploit make

423
00:14:31,680 --> 00:14:34,260
<font color="#CCCCCC">write the fact that</font><font color="#E5E5E5"> you managed to put</font>

424
00:14:33,060 --> 00:14:36,839
two things<font color="#CCCCCC"> beside each</font><font color="#E5E5E5"> other</font><font color="#CCCCCC"> on the heap</font>

425
00:14:34,260 --> 00:14:38,310
it's great<font color="#E5E5E5"> but in order to</font><font color="#CCCCCC"> actually to</font>

426
00:14:36,839 --> 00:14:42,270
complete an exploit you need<font color="#E5E5E5"> other</font>

427
00:14:38,310 --> 00:14:45,000
things so what we decided<font color="#E5E5E5"> to do is to</font>

428
00:14:42,270 --> 00:14:46,740
provide the exploit developer with the

429
00:14:45,000 --> 00:14:49,200
ability to write their exploit as normal

430
00:14:46,740 --> 00:14:51,779
<font color="#E5E5E5">and allow them</font><font color="#CCCCCC"> to leave holes in the</font>

431
00:14:49,200 --> 00:14:53,610
exploit where a heap layout problem

432
00:14:51,779 --> 00:14:56,339
needs to be solved<font color="#E5E5E5"> and what this allows</font>

433
00:14:53,610 --> 00:14:57,930
the exploit developer to do is to<font color="#E5E5E5"> kind</font>

434
00:14:56,339 --> 00:14:59,520
of skip over the tedious<font color="#E5E5E5"> process of</font><font color="#CCCCCC"> the</font>

435
00:14:57,930 --> 00:15:01,560
cheat of achieving<font color="#E5E5E5"> that he play out and</font>

436
00:14:59,520 --> 00:15:03,870
write their exploit in a much more rapid

437
00:15:01,560 --> 00:15:06,479
<font color="#CCCCCC">fashion so an exploit template</font><font color="#E5E5E5"> looks</font>

438
00:15:03,870 --> 00:15:07,950
like this again we're exploiting the PHP

439
00:15:06,480 --> 00:15:10,829
<font color="#CCCCCC">interpreter so the exploit itself is</font>

440
00:15:07,950 --> 00:15:12,690
<font color="#E5E5E5">written in PHP and the holes are these</font>

441
00:15:10,829 --> 00:15:14,189
blue lines<font color="#CCCCCC"> here so we have a directive</font>

442
00:15:12,690 --> 00:15:16,680
for our analysis engine<font color="#E5E5E5"> called Shrike</font>

443
00:15:14,190 --> 00:15:18,300
which tells us at these locations we

444
00:15:16,680 --> 00:15:20,550
want you to inject<font color="#CCCCCC"> heap</font><font color="#E5E5E5"> manipulating</font>

445
00:15:18,300 --> 00:15:21,990
things<font color="#E5E5E5"> and then this final one</font><font color="#CCCCCC"> here is</font>

446
00:15:20,550 --> 00:15:23,310
we<font color="#E5E5E5"> require the distance between this</font>

447
00:15:21,990 --> 00:15:25,620
buffer and<font color="#CCCCCC"> that buffer to be equal</font><font color="#E5E5E5"> to</font>

448
00:15:23,310 --> 00:15:27,689
this<font color="#E5E5E5"> value so this allows the exploit</font>

449
00:15:25,620 --> 00:15:28,980
developer to just effectively ignore the

450
00:15:27,690 --> 00:15:30,449
fact that the heap layer problem needs

451
00:15:28,980 --> 00:15:32,430
to be solved<font color="#E5E5E5"> and rapidly progress</font>

452
00:15:30,449 --> 00:15:33,479
<font color="#E5E5E5">through the exploit so they actually</font>

453
00:15:32,430 --> 00:15:36,839
<font color="#CCCCCC">complete the exploit looks something</font>

454
00:15:33,480 --> 00:15:39,480
<font color="#CCCCCC">like this</font><font color="#E5E5E5"> we've injected the he play up</font>

455
00:15:36,839 --> 00:15:40,890
manipulation sequences and check to<font color="#E5E5E5"> see</font>

456
00:15:39,480 --> 00:15:43,230
that<font color="#CCCCCC"> the</font><font color="#E5E5E5"> source and destination are</font>

457
00:15:40,890 --> 00:15:45,269
adjacent to each<font color="#E5E5E5"> other</font><font color="#CCCCCC"> okay I'm going</font><font color="#E5E5E5"> to</font>

458
00:15:43,230 --> 00:15:48,089
<font color="#E5E5E5">show a demonstration now which is</font>

459
00:15:45,269 --> 00:15:51,209
our engine solving the the<font color="#E5E5E5"> original</font>

460
00:15:48,089 --> 00:15:52,800
export problem so the<font color="#CCCCCC"> Alec or the</font>

461
00:15:51,209 --> 00:15:55,319
<font color="#CCCCCC">exploit developer is presented with a</font>

462
00:15:52,800 --> 00:15:57,420
vulnerability<font color="#E5E5E5"> they write their exploit</font>

463
00:15:55,319 --> 00:15:59,189
under the assumption that the<font color="#E5E5E5"> GD</font><font color="#CCCCCC"> Emmett</font>

464
00:15:57,420 --> 00:16:01,378
structure can<font color="#CCCCCC"> be corrupted and then our</font>

465
00:15:59,189 --> 00:16:05,969
engine solves the problem<font color="#E5E5E5"> are the actual</font>

466
00:16:01,379 --> 00:16:09,059
layout problem so we'll see in the in

467
00:16:05,970 --> 00:16:11,160
the template we<font color="#CCCCCC"> have these extractor</font>

468
00:16:09,059 --> 00:16:13,110
<font color="#CCCCCC">actives which are</font><font color="#E5E5E5"> just saying insert key</font>

469
00:16:11,160 --> 00:16:14,939
<font color="#E5E5E5">layout manipulation here and then we</font>

470
00:16:13,110 --> 00:16:18,360
have the<font color="#E5E5E5"> rest of the exploit around it</font>

471
00:16:14,939 --> 00:16:23,910
which<font color="#CCCCCC"> read which uses the the</font><font color="#E5E5E5"> corrupted</font>

472
00:16:18,360 --> 00:16:25,679
memory<font color="#E5E5E5"> to rewrite various things so if</font>

473
00:16:23,910 --> 00:16:27,329
<font color="#E5E5E5">you run this exploit normally nothing</font>

474
00:16:25,679 --> 00:16:29,100
will happen because<font color="#E5E5E5"> we haven't actually</font>

475
00:16:27,329 --> 00:16:31,410
<font color="#E5E5E5">achieved the layout yet so we'll see</font>

476
00:16:29,100 --> 00:16:34,470
here we're just corrupting some nonsense

477
00:16:31,410 --> 00:16:35,730
on the<font color="#E5E5E5"> heap and nothing happens</font><font color="#CCCCCC"> I should</font>

478
00:16:34,470 --> 00:16:36,990
point out what we're hoping for<font color="#E5E5E5"> when run</font>

479
00:16:35,730 --> 00:16:39,689
<font color="#E5E5E5">this exploit is it's going to pop up</font><font color="#CCCCCC"> the</font>

480
00:16:36,990 --> 00:16:42,119
calculator at the end<font color="#E5E5E5"> the universal sign</font>

481
00:16:39,689 --> 00:16:43,618
<font color="#CCCCCC">of some things being exploited so we</font><font color="#E5E5E5"> run</font>

482
00:16:42,119 --> 00:16:47,610
the solver<font color="#CCCCCC"> where the solver is doing is</font>

483
00:16:43,619 --> 00:16:49,069
<font color="#E5E5E5">it's generating a PHP program after PHP</font>

484
00:16:47,610 --> 00:16:53,819
program taking<font color="#E5E5E5"> that template</font>

485
00:16:49,069 --> 00:16:55,199
substituting in random chunks of PHP

486
00:16:53,819 --> 00:16:57,209
that<font color="#E5E5E5"> it knows will manipulate</font><font color="#CCCCCC"> the heap</font>

487
00:16:55,199 --> 00:17:04,949
until<font color="#CCCCCC"> it actually</font><font color="#E5E5E5"> constructs a</font>

488
00:16:57,209 --> 00:17:06,569
functional exploit now we can see here

489
00:17:04,949 --> 00:17:07,709
as the search progresses the distance

490
00:17:06,569 --> 00:17:15,779
between those<font color="#E5E5E5"> two chunks is getting</font>

491
00:17:07,709 --> 00:17:17,339
getting smaller<font color="#E5E5E5"> and</font><font color="#CCCCCC"> smaller and one of</font>

492
00:17:15,779 --> 00:17:19,199
the nice<font color="#CCCCCC"> things about this is it</font><font color="#E5E5E5"> allows</font>

493
00:17:17,339 --> 00:17:20,668
<font color="#E5E5E5">you to experiment with much different</font>

494
00:17:19,199 --> 00:17:22,529
<font color="#E5E5E5">with many different</font><font color="#CCCCCC"> strategies for</font>

495
00:17:20,669 --> 00:17:23,939
exploitation<font color="#E5E5E5"> and a shorter period</font><font color="#CCCCCC"> of</font>

496
00:17:22,529 --> 00:17:25,589
time<font color="#CCCCCC"> so we see here as we finally</font>

497
00:17:23,939 --> 00:17:29,789
<font color="#CCCCCC">achieve</font><font color="#E5E5E5"> the layout so if we open the</font>

498
00:17:25,589 --> 00:17:31,440
template what we'll see is all<font color="#CCCCCC"> of this</font>

499
00:17:29,789 --> 00:17:32,700
<font color="#E5E5E5">stuff that again looks like</font><font color="#CCCCCC"> nonsense but</font>

500
00:17:31,440 --> 00:17:34,049
is manipulating the heap in the

501
00:17:32,700 --> 00:17:36,380
background has been<font color="#CCCCCC"> injected into</font><font color="#E5E5E5"> the</font>

502
00:17:34,049 --> 00:17:36,379
template

503
00:17:47,049 --> 00:17:57,879
and when we run it<font color="#CCCCCC"> we</font><font color="#E5E5E5"> will hopefully see</font>

504
00:17:50,919 --> 00:18:02,889
a calculator popping up<font color="#CCCCCC"> so the expo</font><font color="#E5E5E5"> is</font>

505
00:17:57,879 --> 00:18:04,629
completed<font color="#E5E5E5"> and we're done</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so if you</font>

506
00:18:02,889 --> 00:18:06,758
take<font color="#CCCCCC"> aways from</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> the first is that</font>

507
00:18:04,629 --> 00:18:08,738
we can automate he<font color="#CCCCCC"> player manipulation</font>

508
00:18:06,759 --> 00:18:10,210
<font color="#CCCCCC">end to end</font><font color="#E5E5E5"> so discovery of API sequences</font>

509
00:18:08,739 --> 00:18:11,830
discovery of interesting things to

510
00:18:10,210 --> 00:18:14,049
<font color="#E5E5E5">corrupt and then doing the actual</font>

511
00:18:11,830 --> 00:18:16,600
manipulation itself<font color="#E5E5E5"> there is</font><font color="#CCCCCC"> plenty of</font>

512
00:18:14,049 --> 00:18:18,340
future work in this area<font color="#E5E5E5"> so different</font>

513
00:18:16,600 --> 00:18:20,529
types of<font color="#E5E5E5"> software</font><font color="#CCCCCC"> improved discovery of</font>

514
00:18:18,340 --> 00:18:21,699
the interaction sequences<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I'll see</font>

515
00:18:20,529 --> 00:18:23,019
other types<font color="#E5E5E5"> of heat based</font>

516
00:18:21,700 --> 00:18:24,549
vulnerabilities I think to talk<font color="#E5E5E5"> after</font>

517
00:18:23,019 --> 00:18:28,090
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is actually about a different class</font>

518
00:18:24,549 --> 00:18:29,379
<font color="#CCCCCC">of vulnerabilities random search is an</font>

519
00:18:28,090 --> 00:18:31,779
effective<font color="#CCCCCC"> mechanism for</font><font color="#E5E5E5"> automatic key</font>

520
00:18:29,379 --> 00:18:34,658
play at manipulation<font color="#CCCCCC"> solving somewhere</font>

521
00:18:31,779 --> 00:18:35,679
between 70 to<font color="#E5E5E5"> 75 percent</font><font color="#CCCCCC"> of most of the</font>

522
00:18:34,659 --> 00:18:37,419
test cases<font color="#E5E5E5"> that we came across</font>

523
00:18:35,679 --> 00:18:40,119
however there's again plenty<font color="#CCCCCC"> of</font><font color="#E5E5E5"> scope</font>

524
00:18:37,419 --> 00:18:42,369
here for improved improved search we

525
00:18:40,119 --> 00:18:45,730
actually have a paper<font color="#E5E5E5"> coming up which is</font>

526
00:18:42,369 --> 00:18:47,230
a vastly improved search also<font color="#E5E5E5"> relaxing</font>

527
00:18:45,730 --> 00:18:49,210
the constraints<font color="#CCCCCC"> on non determinism in a</font>

528
00:18:47,230 --> 00:18:50,590
starting<font color="#E5E5E5"> state so we can work with</font>

529
00:18:49,210 --> 00:18:53,679
different<font color="#E5E5E5"> alligators and different</font><font color="#CCCCCC"> asset</font>

530
00:18:50,590 --> 00:18:54,879
<font color="#E5E5E5">programs one of the more interesting</font>

531
00:18:53,679 --> 00:18:56,710
<font color="#E5E5E5">things</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> from this is that</font><font color="#CCCCCC"> the</font>

532
00:18:54,879 --> 00:18:58,539
exploit<font color="#CCCCCC"> M plates are</font><font color="#E5E5E5"> kind of a new</font>

533
00:18:56,710 --> 00:19:01,149
approach<font color="#CCCCCC"> to adding automation to</font>

534
00:18:58,539 --> 00:19:03,309
exploitation<font color="#E5E5E5"> where we can kind of take</font>

535
00:19:01,149 --> 00:19:04,988
the creativity intuition of a human

536
00:19:03,309 --> 00:19:06,668
exploitive<font color="#CCCCCC"> Ella purr and combine that</font>

537
00:19:04,989 --> 00:19:10,299
with a<font color="#E5E5E5"> a search algorithm to get the</font>

538
00:19:06,669 --> 00:19:11,739
<font color="#CCCCCC">boast the best of both</font><font color="#E5E5E5"> worlds</font><font color="#CCCCCC"> and then</font>

539
00:19:10,299 --> 00:19:13,809
Shrike itself is a proof of concept

540
00:19:11,739 --> 00:19:17,230
system of all of these<font color="#E5E5E5"> ideas it's open</font>

541
00:19:13,809 --> 00:19:18,609
source<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> find it on github</font><font color="#CCCCCC"> ok</font>

542
00:19:17,230 --> 00:19:20,169
thank you<font color="#CCCCCC"> very much and if you</font><font color="#E5E5E5"> have any</font>

543
00:19:18,609 --> 00:19:22,149
questions I'd be<font color="#CCCCCC"> happy to</font><font color="#E5E5E5"> take</font><font color="#CCCCCC"> them</font><font color="#E5E5E5"> like</font>

544
00:19:20,169 --> 00:19:24,389
I said<font color="#E5E5E5"> you can find the code and paper</font>

545
00:19:22,149 --> 00:19:24,389
here

546
00:19:24,420 --> 00:19:29,880
[Music]

547
00:19:27,430 --> 00:19:31,840
[Applause]

548
00:19:29,880 --> 00:19:33,520
don't you leave<font color="#CCCCCC"> virginity</font>

549
00:19:31,840 --> 00:19:36,309
interesting<font color="#CCCCCC"> top I have a</font><font color="#E5E5E5"> question about</font>

550
00:19:33,520 --> 00:19:38,500
the false positive in your exploit<font color="#CCCCCC"> if</font>

551
00:19:36,309 --> 00:19:41,889
you are<font color="#E5E5E5"> assuming if the user using the</font>

552
00:19:38,500 --> 00:19:43,450
bebop style<font color="#CCCCCC"> a locator where and if you</font>

553
00:19:41,890 --> 00:19:45,039
are assuming<font color="#E5E5E5"> that the source the source</font>

554
00:19:43,450 --> 00:19:47,410
<font color="#E5E5E5">buffer and the destiny of</font><font color="#CCCCCC"> our has the</font>

555
00:19:45,039 --> 00:19:49,179
different<font color="#CCCCCC"> size then the chances</font><font color="#E5E5E5"> that</font>

556
00:19:47,410 --> 00:19:50,980
<font color="#E5E5E5">they are going to well I</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> it's not</font>

557
00:19:49,179 --> 00:19:53,500
possible<font color="#CCCCCC"> that</font><font color="#E5E5E5"> they will be actually</font>

558
00:19:50,980 --> 00:19:56,200
<font color="#CCCCCC">located as just as each</font><font color="#E5E5E5"> other so when</font>

559
00:19:53,500 --> 00:19:58,030
you're when you exploit when you are

560
00:19:56,200 --> 00:19:58,600
<font color="#CCCCCC">generating</font><font color="#E5E5E5"> this exploit order like the</font>

561
00:19:58,030 --> 00:20:00,520
layout

562
00:19:58,600 --> 00:20:03,370
do you consider what are<font color="#CCCCCC"> the actually</font>

563
00:20:00,520 --> 00:20:04,900
feasible<font color="#E5E5E5"> let's say layouts</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> they</font>

564
00:20:03,370 --> 00:20:06,549
depending on<font color="#E5E5E5"> the allocator they actually</font>

565
00:20:04,900 --> 00:20:09,039
can end up beside each<font color="#E5E5E5"> other yeah so the</font>

566
00:20:06,549 --> 00:20:10,780
very last element of<font color="#E5E5E5"> the the run of</font>

567
00:20:09,039 --> 00:20:12,669
pages<font color="#E5E5E5"> can end up beside the first</font>

568
00:20:10,780 --> 00:20:13,960
element of the<font color="#E5E5E5"> next run</font><font color="#CCCCCC"> of pages</font><font color="#E5E5E5"> so in</font>

569
00:20:12,669 --> 00:20:15,340
this exploit actually<font color="#E5E5E5"> exactly that is</font>

570
00:20:13,960 --> 00:20:18,070
happening<font color="#CCCCCC"> the sort of</font><font color="#E5E5E5"> the source buffer</font>

571
00:20:15,340 --> 00:20:19,570
is<font color="#E5E5E5"> 384 bytes of something and the</font>

572
00:20:18,070 --> 00:20:21,220
destination buffer is seven thousand

573
00:20:19,570 --> 00:20:22,629
three<font color="#CCCCCC"> hundred and sixty and eventually</font>

574
00:20:21,220 --> 00:20:24,280
it finds a way<font color="#CCCCCC"> to put the two</font><font color="#E5E5E5"> of them</font>

575
00:20:22,630 --> 00:20:25,929
beside each<font color="#E5E5E5"> other so it's the end of one</font>

576
00:20:24,280 --> 00:20:31,240
<font color="#E5E5E5">page is right beside the start of the</font>

577
00:20:25,929 --> 00:20:33,850
<font color="#CCCCCC">next page</font><font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> my name is a Chinese</font>

578
00:20:31,240 --> 00:20:36,520
Academy of<font color="#E5E5E5"> Sciences</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> remember you</font>

579
00:20:33,850 --> 00:20:40,379
you're using regression test cases

580
00:20:36,520 --> 00:20:42,520
<font color="#E5E5E5">you'll</font><font color="#CCCCCC"> find</font><font color="#E5E5E5"> corruption target object and</font>

581
00:20:40,380 --> 00:20:46,059
wondering if<font color="#E5E5E5"> you would like to share</font>

582
00:20:42,520 --> 00:20:47,650
<font color="#E5E5E5">your opinion about whatever what can we</font>

583
00:20:46,059 --> 00:20:52,000
do if the<font color="#E5E5E5"> regression test is not</font>

584
00:20:47,650 --> 00:20:53,770
available<font color="#E5E5E5"> or not not a complete good</font>

585
00:20:52,000 --> 00:20:56,620
question<font color="#E5E5E5"> so I think at that</font><font color="#CCCCCC"> point</font>

586
00:20:53,770 --> 00:20:57,970
deploying<font color="#CCCCCC"> like a</font><font color="#E5E5E5"> fuzzer or symbolic</font>

587
00:20:56,620 --> 00:20:59,649
execution engine something<font color="#E5E5E5"> like that was</font>

588
00:20:57,970 --> 00:21:01,600
in the previous talks to then generate

589
00:20:59,650 --> 00:21:03,159
<font color="#E5E5E5">because what we want is we want</font><font color="#CCCCCC"> paths</font>

590
00:21:01,600 --> 00:21:04,959
<font color="#CCCCCC">through the</font><font color="#E5E5E5"> program that</font><font color="#CCCCCC"> allocate</font>

591
00:21:03,159 --> 00:21:06,520
interesting things<font color="#E5E5E5"> and anything that can</font>

592
00:21:04,960 --> 00:21:08,440
generate pass through the program will

593
00:21:06,520 --> 00:21:09,760
will<font color="#E5E5E5"> help right it just so happens the</font>

594
00:21:08,440 --> 00:21:11,440
regression<font color="#E5E5E5"> tests are a really convenient</font>

595
00:21:09,760 --> 00:21:14,140
way<font color="#CCCCCC"> of getting all the</font><font color="#E5E5E5"> information to</font>

596
00:21:11,440 --> 00:21:19,340
<font color="#E5E5E5">begin with</font><font color="#CCCCCC"> varrick we thank you thank</font>

597
00:21:14,140 --> 00:21:19,450
you<font color="#E5E5E5"> thanks very</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> thank you</font>

598
00:21:19,340 --> 00:21:26,179
<font color="#E5E5E5">you</font>

599
00:21:19,450 --> 00:21:26,180
[Applause]

