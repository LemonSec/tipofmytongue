1
00:00:09,650 --> 00:00:16,070
ah that's<font color="#CCCCCC"> better</font><font color="#E5E5E5"> thank you so before I</font>

2
00:00:14,120 --> 00:00:18,890
want to<font color="#E5E5E5"> start</font><font color="#CCCCCC"> about de method I would</font>

3
00:00:16,070 --> 00:00:21,380
<font color="#CCCCCC">like to talk about</font><font color="#E5E5E5"> how we came to</font><font color="#CCCCCC"> work</font>

4
00:00:18,890 --> 00:00:23,210
on that<font color="#E5E5E5"> and that is we were asked to</font>

5
00:00:21,380 --> 00:00:25,369
<font color="#E5E5E5">look into how</font><font color="#CCCCCC"> we could detect malware</font>

6
00:00:23,210 --> 00:00:30,140
that's using image files<font color="#E5E5E5"> human</font>

7
00:00:25,369 --> 00:00:32,299
<font color="#E5E5E5">communicate and well like everybody else</font>

8
00:00:30,140 --> 00:00:35,270
would<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that was placing all the</font>

9
00:00:32,299 --> 00:00:37,578
information we had so<font color="#E5E5E5"> we started to</font>

10
00:00:35,270 --> 00:00:40,070
design<font color="#CCCCCC"> the scenario under which well</font>

11
00:00:37,579 --> 00:00:41,350
this detection made in<font color="#E5E5E5"> a sense so we</font>

12
00:00:40,070 --> 00:00:44,149
came<font color="#CCCCCC"> up with something</font><font color="#E5E5E5"> like this</font><font color="#CCCCCC"> so a</font>

13
00:00:41,350 --> 00:00:46,730
<font color="#CCCCCC">medium-security facility where you</font><font color="#E5E5E5"> have</font>

14
00:00:44,149 --> 00:00:50,629
high value information<font color="#E5E5E5"> being trans</font><font color="#CCCCCC"> well</font>

15
00:00:46,730 --> 00:00:52,640
being worked on in a secure<font color="#CCCCCC"> network and</font>

16
00:00:50,629 --> 00:00:55,070
the system and such a network<font color="#CCCCCC"> usually</font>

17
00:00:52,640 --> 00:00:57,079
don't have direct<font color="#CCCCCC"> internet access but</font>

18
00:00:55,070 --> 00:00:59,359
you do have access<font color="#E5E5E5"> to systems in a</font>

19
00:00:57,079 --> 00:01:02,030
<font color="#CCCCCC">demilitarized zone so where a few</font>

20
00:00:59,359 --> 00:01:04,070
systems research that have access to

21
00:01:02,030 --> 00:01:08,530
<font color="#E5E5E5">untrusted networks like</font><font color="#CCCCCC"> the internet and</font>

22
00:01:04,069 --> 00:01:11,169
the systems will only allow

23
00:01:08,530 --> 00:01:13,580
communications<font color="#CCCCCC"> after day after</font><font color="#E5E5E5"> the</font>

24
00:01:11,170 --> 00:01:16,490
communication<font color="#E5E5E5"> past some checks so they</font>

25
00:01:13,580 --> 00:01:18,220
try to avoid<font color="#E5E5E5"> for instance malware</font>

26
00:01:16,490 --> 00:01:21,710
communications from taking<font color="#E5E5E5"> place or</font>

27
00:01:18,220 --> 00:01:23,270
sensitive<font color="#CCCCCC"> data being exfiltrated so in</font>

28
00:01:21,710 --> 00:01:27,050
such a scenario<font color="#E5E5E5"> if you have a malware</font>

29
00:01:23,270 --> 00:01:29,030
<font color="#E5E5E5">infection it will be on a system</font><font color="#CCCCCC"> that is</font>

30
00:01:27,050 --> 00:01:31,460
<font color="#E5E5E5">in this particular</font><font color="#CCCCCC"> network and will try</font>

31
00:01:29,030 --> 00:01:34,940
to communicate<font color="#E5E5E5"> with the system which is</font>

32
00:01:31,460 --> 00:01:37,970
outside<font color="#CCCCCC"> - for</font><font color="#E5E5E5"> instance exfiltrated data</font>

33
00:01:34,940 --> 00:01:40,820
that<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> harvested from the</font><font color="#CCCCCC"> machines</font><font color="#E5E5E5"> so</font>

34
00:01:37,970 --> 00:01:43,340
now we had a good understanding<font color="#E5E5E5"> of what</font>

35
00:01:40,820 --> 00:01:46,429
<font color="#CCCCCC">the scenario would be so if we could</font>

36
00:01:43,340 --> 00:01:49,670
detect<font color="#E5E5E5"> at this let's say Web Application</font>

37
00:01:46,430 --> 00:01:51,380
<font color="#E5E5E5">Firewall</font><font color="#CCCCCC"> the fact that</font><font color="#E5E5E5"> malware</font>

38
00:01:49,670 --> 00:01:55,220
communication is taking<font color="#E5E5E5"> place we could</font>

39
00:01:51,380 --> 00:01:59,890
prevent it<font color="#CCCCCC"> and so we started</font><font color="#E5E5E5"> to look</font><font color="#CCCCCC"> to</font>

40
00:01:55,220 --> 00:01:59,890
<font color="#CCCCCC">look</font><font color="#E5E5E5"> into the literature what kind of</font>

41
00:02:00,160 --> 00:02:06,140
methods are<font color="#E5E5E5"> used to hide</font><font color="#CCCCCC"> information in</font>

42
00:02:03,830 --> 00:02:09,949
images and turns out everybody is

43
00:02:06,140 --> 00:02:12,260
looking<font color="#E5E5E5"> at how to detect information is</font>

44
00:02:09,949 --> 00:02:14,599
being transferred in<font color="#E5E5E5"> JPEG coefficients</font>

45
00:02:12,260 --> 00:02:16,489
<font color="#E5E5E5">so we've been working</font><font color="#CCCCCC"> on on that for</font>

46
00:02:14,599 --> 00:02:19,129
<font color="#E5E5E5">quite</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> while and then before</font><font color="#CCCCCC"> ok now</font>

47
00:02:16,489 --> 00:02:21,480
let's let's check how how smell<font color="#E5E5E5"> were</font>

48
00:02:19,129 --> 00:02:24,268
actually using<font color="#E5E5E5"> what algorithms are using</font>

49
00:02:21,480 --> 00:02:26,280
<font color="#E5E5E5">five is it model-based iconography are</font>

50
00:02:24,269 --> 00:02:29,909
using outcasts or maybe their own

51
00:02:26,280 --> 00:02:32,400
<font color="#E5E5E5">algorithms</font><font color="#CCCCCC"> and turns out it when</font><font color="#E5E5E5"> we did</font>

52
00:02:29,909 --> 00:02:35,399
<font color="#E5E5E5">another survey on that picture turned</font>

53
00:02:32,400 --> 00:02:36,750
out to be quite<font color="#CCCCCC"> different so here on the</font>

54
00:02:35,400 --> 00:02:38,250
<font color="#CCCCCC">left-hand</font><font color="#E5E5E5"> side you have to call them for</font>

55
00:02:36,750 --> 00:02:41,040
<font color="#CCCCCC">JPEG</font><font color="#E5E5E5"> so that's</font><font color="#CCCCCC"> actually the most</font>

56
00:02:38,250 --> 00:02:44,879
prevalent format<font color="#CCCCCC"> but as you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> see here</font>

57
00:02:41,040 --> 00:02:47,730
on the top<font color="#E5E5E5"> you have the approaches that</font>

58
00:02:44,879 --> 00:02:50,399
<font color="#E5E5E5">used the file structure rather than</font><font color="#CCCCCC"> the</font>

59
00:02:47,730 --> 00:02:52,109
<font color="#E5E5E5">image data and turns out that that's</font>

60
00:02:50,400 --> 00:02:55,379
actually<font color="#E5E5E5"> the most prevalent method when</font>

61
00:02:52,110 --> 00:02:56,730
you look at other formats<font color="#E5E5E5"> well the focus</font>

62
00:02:55,379 --> 00:02:59,700
<font color="#E5E5E5">shifts a little</font><font color="#CCCCCC"> bit what's the image</font>

63
00:02:56,730 --> 00:03:02,480
<font color="#E5E5E5">data but you</font><font color="#CCCCCC"> still have a high fraction</font>

64
00:02:59,700 --> 00:03:04,649
that<font color="#E5E5E5"> of</font><font color="#CCCCCC"> male families that use the</font>

65
00:03:02,480 --> 00:03:07,560
structure of the files rather than the

66
00:03:04,650 --> 00:03:09,690
image<font color="#E5E5E5"> data so we think we were thinking</font>

67
00:03:07,560 --> 00:03:12,620
basically<font color="#E5E5E5"> okay we must have been doing</font>

68
00:03:09,690 --> 00:03:16,590
<font color="#CCCCCC">something wrong in</font><font color="#E5E5E5"> our first survey and</font>

69
00:03:12,620 --> 00:03:18,599
so we did a<font color="#E5E5E5"> very large reiteration on</font>

70
00:03:16,590 --> 00:03:20,220
that we try<font color="#E5E5E5"> to broaden the scope make</font>

71
00:03:18,599 --> 00:03:25,048
really sure<font color="#CCCCCC"> that we don't</font><font color="#E5E5E5"> miss anything</font>

72
00:03:20,220 --> 00:03:28,739
<font color="#CCCCCC">and turns out</font><font color="#E5E5E5"> that no we basically catch</font>

73
00:03:25,049 --> 00:03:30,870
it<font color="#CCCCCC"> a catch the gist of it so there's a</font>

74
00:03:28,739 --> 00:03:33,480
lot<font color="#CCCCCC"> of research on detecting second</font>

75
00:03:30,870 --> 00:03:37,130
ography and media data<font color="#E5E5E5"> but there was</font>

76
00:03:33,480 --> 00:03:40,138
actually<font color="#CCCCCC"> no published paper on detecting</font>

77
00:03:37,130 --> 00:03:42,810
<font color="#E5E5E5">yeah well basically data exfiltration in</font>

78
00:03:40,139 --> 00:03:44,519
the<font color="#CCCCCC"> structural files</font><font color="#E5E5E5"> so we thought okay</font>

79
00:03:42,810 --> 00:03:47,190
well<font color="#E5E5E5"> this seems to</font><font color="#CCCCCC"> be a really</font><font color="#E5E5E5"> relevant</font>

80
00:03:44,519 --> 00:03:49,440
problem practice but we don't see any

81
00:03:47,190 --> 00:03:51,180
<font color="#CCCCCC">work on that being</font><font color="#E5E5E5"> published so we</font>

82
00:03:49,440 --> 00:03:53,549
thought<font color="#E5E5E5"> okay we really have to get into</font>

83
00:03:51,180 --> 00:03:54,900
<font color="#E5E5E5">this and before I</font><font color="#CCCCCC"> can tell</font><font color="#E5E5E5"> you a little</font>

84
00:03:53,549 --> 00:03:57,329
<font color="#E5E5E5">bit</font><font color="#CCCCCC"> about the method</font><font color="#E5E5E5"> that we came up</font>

85
00:03:54,900 --> 00:04:01,739
<font color="#CCCCCC">with I just have to briefly go over</font><font color="#E5E5E5"> some</font>

86
00:03:57,329 --> 00:04:03,780
basics so first this<font color="#CCCCCC"> too will basically</font>

87
00:04:01,739 --> 00:04:06,349
<font color="#E5E5E5">create a compressed image file you start</font>

88
00:04:03,780 --> 00:04:08,849
from<font color="#CCCCCC"> let's</font><font color="#E5E5E5"> say some raw image data and</font>

89
00:04:06,349 --> 00:04:11,280
then there's an encoding process takes

90
00:04:08,849 --> 00:04:15,000
place<font color="#E5E5E5"> and then you the outcome</font><font color="#CCCCCC"> of that</font>

91
00:04:11,280 --> 00:04:16,560
will<font color="#CCCCCC"> be encoded image data but for a</font>

92
00:04:15,000 --> 00:04:18,120
decoder to be able<font color="#CCCCCC"> to interpret</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> data</font>

93
00:04:16,560 --> 00:04:22,729
it usually<font color="#E5E5E5"> needs some extra</font><font color="#CCCCCC"> information</font>

94
00:04:18,120 --> 00:04:25,440
let's say metadata or decoder data and

95
00:04:22,729 --> 00:04:27,599
<font color="#E5E5E5">obviously so you want to decode on the</font>

96
00:04:25,440 --> 00:04:29,909
<font color="#E5E5E5">receiving</font><font color="#CCCCCC"> side to be able</font><font color="#E5E5E5"> to decode</font><font color="#CCCCCC"> the</font>

97
00:04:27,599 --> 00:04:31,800
image so<font color="#E5E5E5"> you have to add that</font><font color="#CCCCCC"> data to</font>

98
00:04:29,909 --> 00:04:34,960
the<font color="#CCCCCC"> image data</font><font color="#E5E5E5"> when you store it in the</font>

99
00:04:31,800 --> 00:04:37,240
file<font color="#E5E5E5"> so file often looks like this</font>

100
00:04:34,960 --> 00:04:39,340
<font color="#E5E5E5">what you see in the bottom right save a</font>

101
00:04:37,240 --> 00:04:41,050
series<font color="#E5E5E5"> of segments and it contains</font><font color="#CCCCCC"> some</font>

102
00:04:39,340 --> 00:04:43,630
data and usually the largest<font color="#E5E5E5"> one is the</font>

103
00:04:41,050 --> 00:04:45,490
one discourage the image data<font color="#CCCCCC"> but you</font>

104
00:04:43,630 --> 00:04:49,210
also need to<font color="#CCCCCC"> Alamut other data to be</font>

105
00:04:45,490 --> 00:04:52,060
<font color="#E5E5E5">able to decode the image so this is how</font>

106
00:04:49,210 --> 00:04:54,008
it looks like<font color="#E5E5E5"> when you hide data in the</font>

107
00:04:52,060 --> 00:04:56,259
structure<font color="#E5E5E5"> of such a file so starting</font>

108
00:04:54,009 --> 00:04:58,060
<font color="#E5E5E5">with to clean file on the</font><font color="#CCCCCC"> left that's</font>

109
00:04:56,259 --> 00:05:00,039
<font color="#E5E5E5">the same but that we've been seeing</font>

110
00:04:58,060 --> 00:05:03,039
<font color="#E5E5E5">before</font><font color="#CCCCCC"> the most</font><font color="#E5E5E5"> simple</font><font color="#CCCCCC"> approach is just</font>

111
00:05:00,039 --> 00:05:06,280
take<font color="#E5E5E5"> that file and dump some data at the</font>

112
00:05:03,039 --> 00:05:09,610
end<font color="#E5E5E5"> of it and it works because let's say</font>

113
00:05:06,280 --> 00:05:10,960
for at<font color="#E5E5E5"> least</font><font color="#CCCCCC"> for jpg and PNG files</font><font color="#E5E5E5"> they</font>

114
00:05:09,610 --> 00:05:12,490
have a<font color="#E5E5E5"> marker or a segment that</font>

115
00:05:10,960 --> 00:05:15,070
indicates<font color="#E5E5E5"> notice at the end</font><font color="#CCCCCC"> of the image</font>

116
00:05:12,490 --> 00:05:17,440
<font color="#E5E5E5">data and the decoder will just stop</font>

117
00:05:15,070 --> 00:05:19,300
reading<font color="#E5E5E5"> the file after that so it's a</font>

118
00:05:17,440 --> 00:05:20,620
very simple straightforward method<font color="#E5E5E5"> to</font>

119
00:05:19,300 --> 00:05:23,440
hide data and it's actually<font color="#E5E5E5"> used by</font>

120
00:05:20,620 --> 00:05:25,240
<font color="#CCCCCC">high-profile Malcom there's another</font>

121
00:05:23,440 --> 00:05:26,710
method<font color="#CCCCCC"> that you can see a segment</font>

122
00:05:25,240 --> 00:05:28,860
injection that requires a little<font color="#CCCCCC"> more</font>

123
00:05:26,710 --> 00:05:32,258
<font color="#CCCCCC">understanding of the file format so</font>

124
00:05:28,860 --> 00:05:34,630
while the most<font color="#E5E5E5"> obvious segment type to</font>

125
00:05:32,259 --> 00:05:36,819
abuse as a comment<font color="#E5E5E5"> so you'll just have a</font>

126
00:05:34,630 --> 00:05:40,719
type of segment<font color="#E5E5E5"> that's not interpreted</font>

127
00:05:36,819 --> 00:05:42,940
by the by a decoder so it will not<font color="#E5E5E5"> have</font>

128
00:05:40,720 --> 00:05:44,860
<font color="#CCCCCC">any effect on a decoded image</font><font color="#E5E5E5"> and you</font>

129
00:05:42,940 --> 00:05:46,870
just push the data that's being

130
00:05:44,860 --> 00:05:49,690
<font color="#E5E5E5">transferred into the internet segment</font>

131
00:05:46,870 --> 00:05:52,659
and finally<font color="#E5E5E5"> can</font><font color="#CCCCCC"> use white stuffing</font><font color="#E5E5E5"> so</font>

132
00:05:49,690 --> 00:05:54,880
here you'll have basically<font color="#E5E5E5"> a legitimate</font>

133
00:05:52,659 --> 00:05:57,729
image<font color="#E5E5E5"> and you'll just take a segment</font>

134
00:05:54,880 --> 00:05:59,830
that's<font color="#E5E5E5"> legitimate in all respects but it</font>

135
00:05:57,729 --> 00:06:01,780
has to have<font color="#E5E5E5"> true properties one is that</font>

136
00:05:59,830 --> 00:06:04,120
it has<font color="#CCCCCC"> a length field</font><font color="#E5E5E5"> and the others</font>

137
00:06:01,780 --> 00:06:07,539
<font color="#E5E5E5">that the structure</font><font color="#CCCCCC"> of the segment</font><font color="#E5E5E5"> is</font>

138
00:06:04,120 --> 00:06:09,639
fixed for my<font color="#CCCCCC"> decoders perspective so</font>

139
00:06:07,539 --> 00:06:11,199
what you can do<font color="#CCCCCC"> is you just</font><font color="#E5E5E5"> increase the</font>

140
00:06:09,639 --> 00:06:13,630
segment length<font color="#E5E5E5"> to let's say 100</font>

141
00:06:11,199 --> 00:06:16,990
kilobytes and the decoder<font color="#E5E5E5"> will usually</font>

142
00:06:13,630 --> 00:06:19,780
have like<font color="#CCCCCC"> two pieces an outer piece that</font>

143
00:06:16,990 --> 00:06:21,940
under identifies<font color="#E5E5E5"> okay there's</font><font color="#CCCCCC"> the one</font>

144
00:06:19,780 --> 00:06:24,369
article abide segment and<font color="#E5E5E5"> we'll call a</font>

145
00:06:21,940 --> 00:06:27,280
subroutine it says<font color="#E5E5E5"> okay this is a type a</font>

146
00:06:24,370 --> 00:06:30,039
segment<font color="#CCCCCC"> so I'll parse it and</font><font color="#E5E5E5"> we'll reach</font>

147
00:06:27,280 --> 00:06:32,380
let's say 20 bytes from it<font color="#E5E5E5"> so the</font>

148
00:06:30,039 --> 00:06:34,620
remaining<font color="#CCCCCC"> 100 almost</font><font color="#E5E5E5"> 100 kilobytes</font>

149
00:06:32,380 --> 00:06:38,880
<font color="#E5E5E5">that's where you can hide your payload</font>

150
00:06:34,620 --> 00:06:41,050
so it was<font color="#E5E5E5"> basically what we are after</font>

151
00:06:38,880 --> 00:06:43,360
<font color="#CCCCCC">just to give</font><font color="#E5E5E5"> you a free or</font><font color="#CCCCCC"> cornerstone</font>

152
00:06:41,050 --> 00:06:45,610
so let's say one of<font color="#CCCCCC"> the main steps</font>

153
00:06:43,360 --> 00:06:46,569
towards solving this was that we said<font color="#CCCCCC"> ok</font>

154
00:06:45,610 --> 00:06:49,179
we'll enter

155
00:06:46,569 --> 00:06:52,179
this<font color="#E5E5E5"> file format as a formal language</font>

156
00:06:49,179 --> 00:06:56,409
<font color="#E5E5E5">and as you can easily see that's an</font>

157
00:06:52,179 --> 00:06:58,058
approach<font color="#CCCCCC"> that's not really putting</font><font color="#E5E5E5"> much</font>

158
00:06:56,409 --> 00:07:00,279
<font color="#CCCCCC">requirement</font><font color="#E5E5E5"> so we</font><font color="#CCCCCC"> have to</font><font color="#E5E5E5"> have a</font>

159
00:06:58,059 --> 00:07:02,949
structured file type if<font color="#CCCCCC"> you can parse</font>

160
00:07:00,279 --> 00:07:05,800
basically into a series of type segments

161
00:07:02,949 --> 00:07:07,749
with<font color="#CCCCCC"> a</font><font color="#E5E5E5"> whole length and we implemented</font>

162
00:07:05,800 --> 00:07:09,759
<font color="#CCCCCC">that</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> jpg</font><font color="#E5E5E5"> and PNG but doesn't even</font>

163
00:07:07,749 --> 00:07:13,539
have to<font color="#E5E5E5"> be a graphics file for this to</font>

164
00:07:09,759 --> 00:07:14,279
<font color="#E5E5E5">work and then we</font><font color="#CCCCCC"> take training</font><font color="#E5E5E5"> data</font><font color="#CCCCCC"> hi</font>

165
00:07:13,539 --> 00:07:17,259
<font color="#E5E5E5">James</font>

166
00:07:14,279 --> 00:07:21,119
and build an approximation of<font color="#E5E5E5"> that</font>

167
00:07:17,259 --> 00:07:22,959
language<font color="#CCCCCC"> and what we do then is we mesh</font>

168
00:07:21,119 --> 00:07:25,020
against this model take into

169
00:07:22,959 --> 00:07:26,830
consideration if we have an imperfect

170
00:07:25,020 --> 00:07:29,830
<font color="#E5E5E5">impression of what the formal language</font>

171
00:07:26,830 --> 00:07:31,508
<font color="#E5E5E5">looks like and also we are we want to</font>

172
00:07:29,830 --> 00:07:34,209
<font color="#E5E5E5">add some restrictions so that we are not</font>

173
00:07:31,509 --> 00:07:36,939
overly permissive<font color="#CCCCCC"> so when we</font><font color="#E5E5E5"> will use</font>

174
00:07:34,209 --> 00:07:38,740
the fresh<font color="#E5E5E5"> mulch</font><font color="#CCCCCC"> tau which is just a</font>

175
00:07:36,939 --> 00:07:41,319
minimum count of observations during<font color="#E5E5E5"> our</font>

176
00:07:38,740 --> 00:07:42,629
training phase in fact<font color="#CCCCCC"> alpha which I'll</font>

177
00:07:41,319 --> 00:07:46,569
go over in<font color="#E5E5E5"> a minute</font>

178
00:07:42,629 --> 00:07:48,189
so since we're having<font color="#E5E5E5"> a rank of language</font>

179
00:07:46,569 --> 00:07:50,830
<font color="#CCCCCC">recognition problem here we said okay</font>

180
00:07:48,189 --> 00:07:54,849
<font color="#E5E5E5">we'll use a finite state machine a</font>

181
00:07:50,830 --> 00:07:57,128
finite automaton and<font color="#E5E5E5"> one important</font>

182
00:07:54,849 --> 00:07:59,669
aspect<font color="#CCCCCC"> of datas we are using</font><font color="#E5E5E5"> a model for</font>

183
00:07:57,129 --> 00:08:02,800
the clean files so we're<font color="#E5E5E5"> not putting any</font>

184
00:07:59,669 --> 00:08:04,808
<font color="#E5E5E5">understanding of what the method looks</font>

185
00:08:02,800 --> 00:08:06,729
like to the<font color="#CCCCCC"> malware we use into this</font>

186
00:08:04,809 --> 00:08:09,339
we're<font color="#CCCCCC"> just putting</font><font color="#E5E5E5"> the understanding</font>

187
00:08:06,729 --> 00:08:11,469
that we<font color="#CCCCCC"> gain from</font><font color="#E5E5E5"> the from training data</font>

188
00:08:09,339 --> 00:08:12,789
so we're<font color="#E5E5E5"> imagining against the model for</font>

189
00:08:11,469 --> 00:08:16,180
clean fights we're not matching against

190
00:08:12,789 --> 00:08:19,509
a model of particular malware or data

191
00:08:16,180 --> 00:08:22,749
exfiltration methods and here was pretty

192
00:08:19,509 --> 00:08:24,069
<font color="#CCCCCC">straightforward we all have a state for</font>

193
00:08:22,749 --> 00:08:26,919
each segment<font color="#CCCCCC"> typed and we'll have</font>

194
00:08:24,069 --> 00:08:29,379
directed edges for segments that were

195
00:08:26,919 --> 00:08:31,380
observed<font color="#E5E5E5"> in a given order and then we</font>

196
00:08:29,379 --> 00:08:35,199
add some<font color="#E5E5E5"> annotations to these edges so</font>

197
00:08:31,380 --> 00:08:37,479
when the segment has a fixed length and

198
00:08:35,198 --> 00:08:40,059
strictly fixed length then<font color="#E5E5E5"> we just count</font>

199
00:08:37,479 --> 00:08:43,539
how<font color="#CCCCCC"> many</font><font color="#E5E5E5"> times we've</font><font color="#CCCCCC"> observed it during</font>

200
00:08:40,059 --> 00:08:45,579
the training phase<font color="#CCCCCC"> and when it's</font><font color="#E5E5E5"> in the</font>

201
00:08:43,539 --> 00:08:47,980
second segment is<font color="#CCCCCC"> a rival length</font><font color="#E5E5E5"> we</font>

202
00:08:45,579 --> 00:08:52,989
store the distribution<font color="#E5E5E5"> of lengths that</font>

203
00:08:47,980 --> 00:08:54,279
we<font color="#CCCCCC"> observe during the training and as</font>

204
00:08:52,990 --> 00:08:56,889
you can<font color="#E5E5E5"> imagine when you</font><font color="#CCCCCC"> have something</font>

205
00:08:54,279 --> 00:08:58,689
<font color="#CCCCCC">like byte stuffing</font><font color="#E5E5E5"> observing the length</font>

206
00:08:56,889 --> 00:09:00,100
of the<font color="#CCCCCC"> segments is an important factor</font>

207
00:08:58,689 --> 00:09:02,199
because<font color="#E5E5E5"> here we have</font>

208
00:09:00,100 --> 00:09:05,199
<font color="#CCCCCC">a</font><font color="#E5E5E5"> legitimate segment observed in</font>

209
00:09:02,199 --> 00:09:07,000
<font color="#CCCCCC">delicious legitimate order</font><font color="#E5E5E5"> and the</font><font color="#CCCCCC"> only</font>

210
00:09:05,199 --> 00:09:09,399
<font color="#E5E5E5">thing that may distinguish the file from</font>

211
00:09:07,000 --> 00:09:13,540
legitimate files is<font color="#E5E5E5"> the fact that the</font>

212
00:09:09,399 --> 00:09:15,790
segment is larger than usual<font color="#E5E5E5"> so this is</font>

213
00:09:13,540 --> 00:09:17,410
basically what<font color="#CCCCCC"> we do here</font><font color="#E5E5E5"> we take into</font>

214
00:09:15,790 --> 00:09:20,579
consideration<font color="#CCCCCC"> the a newly observed</font>

215
00:09:17,410 --> 00:09:24,339
length<font color="#CCCCCC"> that</font><font color="#E5E5E5"> would be for instance the</font>

216
00:09:20,579 --> 00:09:27,008
solid<font color="#CCCCCC"> green line and then we created</font>

217
00:09:24,339 --> 00:09:31,149
radius basically using this factor alpha

218
00:09:27,009 --> 00:09:33,009
<font color="#E5E5E5">and said if</font><font color="#CCCCCC"> we have a range</font><font color="#E5E5E5"> around the</font>

219
00:09:31,149 --> 00:09:35,259
observed value and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> we just count</font>

220
00:09:33,009 --> 00:09:37,990
how<font color="#CCCCCC"> many observations did we have in the</font>

221
00:09:35,259 --> 00:09:40,120
training<font color="#CCCCCC"> phase in that range</font><font color="#E5E5E5"> and if</font>

222
00:09:37,990 --> 00:09:43,060
that's more than tau and we say<font color="#CCCCCC"> okay</font>

223
00:09:40,120 --> 00:09:45,550
we're good<font color="#CCCCCC"> where</font><font color="#E5E5E5"> the good impression</font>

224
00:09:43,060 --> 00:09:47,790
that<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is valid with respect to our</font>

225
00:09:45,550 --> 00:09:49,870
approximate model<font color="#CCCCCC"> if on</font><font color="#E5E5E5"> the other hand</font>

226
00:09:47,790 --> 00:09:53,439
we have something like in the red case

227
00:09:49,870 --> 00:09:56,949
is there a few observations in the

228
00:09:53,440 --> 00:10:00,509
<font color="#E5E5E5">training face that fall into</font><font color="#CCCCCC"> that area</font>

229
00:09:56,949 --> 00:10:02,949
<font color="#E5E5E5">and we assume that this</font><font color="#CCCCCC"> is legitimated</font>

230
00:10:00,509 --> 00:10:04,720
<font color="#E5E5E5">okay so now obviously</font><font color="#CCCCCC"> we wanted to know</font>

231
00:10:02,949 --> 00:10:07,240
whether we've built something that

232
00:10:04,720 --> 00:10:09,970
<font color="#E5E5E5">really works and getting back to the</font>

233
00:10:07,240 --> 00:10:13,750
model<font color="#E5E5E5"> we thought okay so how can we get</font>

234
00:10:09,970 --> 00:10:15,490
as close<font color="#CCCCCC"> as possible</font><font color="#E5E5E5"> to what let's say</font>

235
00:10:13,750 --> 00:10:17,889
Web Application Firewall<font color="#E5E5E5"> would see in</font>

236
00:10:15,490 --> 00:10:20,829
such a<font color="#E5E5E5"> scenario</font><font color="#CCCCCC"> so what we did</font><font color="#E5E5E5"> is we</font>

237
00:10:17,889 --> 00:10:23,709
recursively quality<font color="#CCCCCC"> Alexa top 25 domains</font>

238
00:10:20,829 --> 00:10:26,138
and we stored all the<font color="#E5E5E5"> image files that</font>

239
00:10:23,709 --> 00:10:28,209
<font color="#E5E5E5">would be downloaded in the process so</font><font color="#CCCCCC"> we</font>

240
00:10:26,139 --> 00:10:31,050
ended up with<font color="#CCCCCC"> about a few 9,000 image</font>

241
00:10:28,209 --> 00:10:35,410
files<font color="#E5E5E5"> 270,000 of which are JPEG and</font>

242
00:10:31,050 --> 00:10:37,420
<font color="#E5E5E5">43,000 PNG so we expect this is an</font>

243
00:10:35,410 --> 00:10:40,360
indicator of how widely<font color="#E5E5E5"> used these</font>

244
00:10:37,420 --> 00:10:44,199
formats<font color="#E5E5E5"> are but was not the intention of</font>

245
00:10:40,360 --> 00:10:46,420
our work<font color="#CCCCCC"> then we did a 10-fold</font>

246
00:10:44,199 --> 00:10:48,609
cross-validation<font color="#E5E5E5"> and for our</font><font color="#CCCCCC"> tests EPS</font>

247
00:10:46,420 --> 00:10:50,380
well we had<font color="#E5E5E5"> the obvious left some</font>

248
00:10:48,610 --> 00:10:52,689
unmodified files<font color="#E5E5E5"> in there so</font><font color="#CCCCCC"> that we can</font>

249
00:10:50,380 --> 00:10:54,699
determine the false positive<font color="#CCCCCC"> ratio</font>

250
00:10:52,689 --> 00:10:57,699
additionally we had some live images

251
00:10:54,699 --> 00:10:59,849
from malware we also<font color="#CCCCCC"> scan we also had a</font>

252
00:10:57,699 --> 00:11:03,758
builder<font color="#E5E5E5"> kit for building the</font>

253
00:10:59,850 --> 00:11:07,509
<font color="#E5E5E5">configuration so we use that</font><font color="#CCCCCC"> as well and</font>

254
00:11:03,759 --> 00:11:09,910
yeah we<font color="#E5E5E5"> so as you know there are quite a</font>

255
00:11:07,509 --> 00:11:12,370
few<font color="#E5E5E5"> now</font><font color="#CCCCCC"> we're families</font><font color="#E5E5E5"> that are actually</font>

256
00:11:09,910 --> 00:11:13,810
using<font color="#CCCCCC"> these techniques</font><font color="#E5E5E5"> and from those we</font>

257
00:11:12,370 --> 00:11:15,730
selected<font color="#CCCCCC"> Joe's where we had a good</font>

258
00:11:13,810 --> 00:11:18,699
<font color="#E5E5E5">standing</font><font color="#CCCCCC"> not only of how the method</font>

259
00:11:15,730 --> 00:11:20,890
works<font color="#E5E5E5"> but also of the pilot that</font><font color="#CCCCCC"> the</font>

260
00:11:18,700 --> 00:11:24,040
<font color="#E5E5E5">malware is injecting so that we could</font>

261
00:11:20,890 --> 00:11:26,740
actually pretty closely resemble where

262
00:11:24,040 --> 00:11:29,260
we had to generate<font color="#E5E5E5"> data set what a</font>

263
00:11:26,740 --> 00:11:31,089
malware<font color="#E5E5E5"> communication order file that</font>

264
00:11:29,260 --> 00:11:34,660
were used<font color="#E5E5E5"> for</font><font color="#CCCCCC"> manova</font><font color="#E5E5E5"> communication</font>

265
00:11:31,089 --> 00:11:36,940
looked like<font color="#CCCCCC"> and one funny thing like</font>

266
00:11:34,660 --> 00:11:41,770
basically by chance<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the process we</font>

267
00:11:36,940 --> 00:11:44,650
found that<font color="#E5E5E5"> stick detect so the prototype</font>

268
00:11:41,770 --> 00:11:47,620
<font color="#E5E5E5">implementation of for a paper that needs</font>

269
00:11:44,650 --> 00:11:50,400
<font color="#CCCCCC">provost</font><font color="#E5E5E5"> wrote almost 20 years ago and</font>

270
00:11:47,620 --> 00:11:55,210
paper was on<font color="#CCCCCC"> jpg</font><font color="#E5E5E5"> image</font><font color="#CCCCCC"> data</font><font color="#E5E5E5"> based</font>

271
00:11:50,400 --> 00:11:58,390
detection<font color="#CCCCCC"> the prototype also contains</font>

272
00:11:55,210 --> 00:12:01,120
some methods<font color="#E5E5E5"> that were designed to allow</font>

273
00:11:58,390 --> 00:12:03,060
<font color="#E5E5E5">the structural detection and the nice</font>

274
00:12:01,120 --> 00:12:05,110
thing<font color="#CCCCCC"> about it is that</font><font color="#E5E5E5"> gives you a</font>

275
00:12:03,060 --> 00:12:08,670
basically<font color="#CCCCCC"> a baseline to compare</font><font color="#E5E5E5"> our</font>

276
00:12:05,110 --> 00:12:11,410
<font color="#CCCCCC">method against at least for JPEG files</font>

277
00:12:08,670 --> 00:12:12,969
<font color="#CCCCCC">another</font><font color="#E5E5E5"> aspect which</font><font color="#CCCCCC"> is really important</font>

278
00:12:11,410 --> 00:12:16,779
is in<font color="#E5E5E5"> particular with respect</font><font color="#CCCCCC"> to stick</font>

279
00:12:12,970 --> 00:12:18,880
detectors<font color="#E5E5E5"> other than we expected</font><font color="#CCCCCC"> our</font>

280
00:12:16,779 --> 00:12:22,480
<font color="#CCCCCC">basis it contained</font><font color="#E5E5E5"> a large by a number</font>

281
00:12:18,880 --> 00:12:24,640
<font color="#E5E5E5">of files that orientate data behind the</font>

282
00:12:22,480 --> 00:12:28,030
end of image<font color="#CCCCCC"> segment so as you can see</font>

283
00:12:24,640 --> 00:12:31,420
here there were<font color="#E5E5E5"> five thousand about</font><font color="#CCCCCC"> five</font>

284
00:12:28,030 --> 00:12:35,199
thousand files<font color="#E5E5E5"> JPEG files that contain</font>

285
00:12:31,420 --> 00:12:37,719
some extra data<font color="#E5E5E5"> and also</font><font color="#CCCCCC"> 300</font>

286
00:12:35,200 --> 00:12:40,480
PNG files plus there was one particular

287
00:12:37,720 --> 00:12:44,650
<font color="#E5E5E5">site I'm not pointing</font><font color="#CCCCCC"> any fingers</font>

288
00:12:40,480 --> 00:12:47,320
that<font color="#E5E5E5"> almost doubled these numbers so we</font>

289
00:12:44,650 --> 00:12:51,670
have a fraction of about<font color="#E5E5E5"> 5.5 percent for</font>

290
00:12:47,320 --> 00:12:57,220
Twitter<font color="#E5E5E5"> and about 2.6 percent for PNG</font>

291
00:12:51,670 --> 00:12:59,680
<font color="#E5E5E5">file sorry for JPEG and about 2.6 for</font>

292
00:12:57,220 --> 00:13:01,350
PNG<font color="#E5E5E5"> or where did image files and</font><font color="#CCCCCC"> our</font>

293
00:12:59,680 --> 00:13:05,920
<font color="#E5E5E5">base hit is that already contained</font>

294
00:13:01,350 --> 00:13:08,140
<font color="#E5E5E5">residual data so for JPEG we use these</font>

295
00:13:05,920 --> 00:13:10,599
malware families as you<font color="#CCCCCC"> can see there's</font>

296
00:13:08,140 --> 00:13:12,910
a strong focus on my<font color="#E5E5E5"> apologies et append</font>

297
00:13:10,600 --> 00:13:15,790
paradigm<font color="#E5E5E5"> that's actually also used by a</font>

298
00:13:12,910 --> 00:13:19,569
large<font color="#CCCCCC"> number of if you know</font><font color="#E5E5E5"> pretty high</font>

299
00:13:15,790 --> 00:13:22,060
<font color="#E5E5E5">profile apt malware</font><font color="#CCCCCC"> as you can see there</font>

300
00:13:19,570 --> 00:13:24,490
<font color="#E5E5E5">Zeus VM banking</font><font color="#CCCCCC"> trillion children is</font>

301
00:13:22,060 --> 00:13:25,780
using the injection approach<font color="#E5E5E5"> however the</font>

302
00:13:24,490 --> 00:13:26,700
files that<font color="#E5E5E5"> it creates</font>

303
00:13:25,780 --> 00:13:29,520
<font color="#CCCCCC">iron</font>

304
00:13:26,700 --> 00:13:32,550
<font color="#CCCCCC">in the sense broken</font><font color="#E5E5E5"> so we added another</font>

305
00:13:29,520 --> 00:13:34,560
approach which uses the injection

306
00:13:32,550 --> 00:13:37,020
paradigm but creates files that are not

307
00:13:34,560 --> 00:13:39,390
<font color="#E5E5E5">broken and then we didn't see any white</font>

308
00:13:37,020 --> 00:13:42,449
<font color="#E5E5E5">stuffing based approach so we designed</font>

309
00:13:39,390 --> 00:13:44,069
our<font color="#CCCCCC"> own to be able</font><font color="#E5E5E5"> to check whether our</font>

310
00:13:42,450 --> 00:13:47,910
own<font color="#E5E5E5"> negative F is actually able to</font>

311
00:13:44,070 --> 00:13:49,910
<font color="#E5E5E5">detect that so while starting with</font><font color="#CCCCCC"> two</font>

312
00:13:47,910 --> 00:13:53,339
to<font color="#E5E5E5"> negative ratio left so if the green</font>

313
00:13:49,910 --> 00:13:56,959
boxes are<font color="#E5E5E5"> for a set and the blue</font>

314
00:13:53,340 --> 00:13:59,940
ones are for a sec detect you see that

315
00:13:56,960 --> 00:14:02,550
<font color="#CCCCCC">set of set like in the 99th on</font>

316
00:13:59,940 --> 00:14:05,580
something area with respect<font color="#E5E5E5"> to true</font>

317
00:14:02,550 --> 00:14:07,859
negatives<font color="#E5E5E5"> and actually so</font><font color="#CCCCCC"> SEC detect</font>

318
00:14:05,580 --> 00:14:09,740
<font color="#E5E5E5">here's hindered by</font><font color="#CCCCCC"> this fact that I just</font>

319
00:14:07,860 --> 00:14:12,420
<font color="#CCCCCC">pointed out it there</font><font color="#E5E5E5"> there's actually</font>

320
00:14:09,740 --> 00:14:14,490
<font color="#E5E5E5">quite a lot</font><font color="#CCCCCC"> of image</font><font color="#E5E5E5"> files with extra</font>

321
00:14:12,420 --> 00:14:19,260
data<font color="#E5E5E5"> behind there and of image markers</font>

322
00:14:14,490 --> 00:14:21,840
so that's a problem<font color="#CCCCCC"> for SEC detect</font><font color="#E5E5E5"> for a</font>

323
00:14:19,260 --> 00:14:22,980
set<font color="#E5E5E5"> work while we learn how files are</font>

324
00:14:21,840 --> 00:14:25,920
supposed to<font color="#E5E5E5"> look like and that</font>

325
00:14:22,980 --> 00:14:28,350
<font color="#E5E5E5">compensate a little bit for that when</font>

326
00:14:25,920 --> 00:14:31,319
you look at the<font color="#CCCCCC"> mail or families that</font>

327
00:14:28,350 --> 00:14:33,810
use the append approach well<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I</font>

328
00:14:31,320 --> 00:14:35,730
would I<font color="#E5E5E5"> think you can</font><font color="#CCCCCC"> argue</font><font color="#E5E5E5"> that stack</font>

329
00:14:33,810 --> 00:14:38,790
<font color="#E5E5E5">detects</font><font color="#CCCCCC"> actually having</font><font color="#E5E5E5"> honored for some</font>

330
00:14:35,730 --> 00:14:41,190
<font color="#CCCCCC">too positive because you see</font><font color="#E5E5E5"> there this</font>

331
00:14:38,790 --> 00:14:44,250
error indicators at the bottom<font color="#E5E5E5"> and</font>

332
00:14:41,190 --> 00:14:47,160
actually<font color="#CCCCCC"> these correspond to files that</font>

333
00:14:44,250 --> 00:14:49,470
<font color="#E5E5E5">were</font><font color="#CCCCCC"> greyscale and the application</font>

334
00:14:47,160 --> 00:14:53,219
simply couldn't promise grayscale images

335
00:14:49,470 --> 00:14:55,530
so the approach was basically just a

336
00:14:53,220 --> 00:14:58,260
signature<font color="#E5E5E5"> on our dear modern free bytes</font>

337
00:14:55,530 --> 00:15:00,329
behind that infamous marker<font color="#CCCCCC"> I would say</font>

338
00:14:58,260 --> 00:15:02,790
that would have identified<font color="#CCCCCC"> all of</font><font color="#E5E5E5"> these</font>

339
00:15:00,330 --> 00:15:05,760
<font color="#E5E5E5">correctly where for</font><font color="#CCCCCC"> set Park</font><font color="#E5E5E5"> we have</font>

340
00:15:02,790 --> 00:15:09,270
some very nice results<font color="#CCCCCC"> obviously but</font>

341
00:15:05,760 --> 00:15:12,840
<font color="#E5E5E5">also there are some approaches for which</font>

342
00:15:09,270 --> 00:15:15,660
the performance is a little<font color="#CCCCCC"> bit degraded</font>

343
00:15:12,840 --> 00:15:17,730
by<font color="#CCCCCC"> the fact that we are learning it to</font>

344
00:15:15,660 --> 00:15:21,959
some<font color="#CCCCCC"> degree extra data behind</font><font color="#E5E5E5"> it and</font>

345
00:15:17,730 --> 00:15:24,230
image<font color="#E5E5E5"> marker is normal</font><font color="#CCCCCC"> when we look</font><font color="#E5E5E5"> at</font>

346
00:15:21,960 --> 00:15:27,480
the other approach rather well the

347
00:15:24,230 --> 00:15:32,250
performance of<font color="#CCCCCC"> stick detect basically</font>

348
00:15:27,480 --> 00:15:36,300
goes<font color="#CCCCCC"> to zero and</font><font color="#E5E5E5"> set she's one or</font>

349
00:15:32,250 --> 00:15:39,390
<font color="#E5E5E5">percent</font><font color="#CCCCCC"> two positives so you may argue</font>

350
00:15:36,300 --> 00:15:40,979
obviously that for the<font color="#E5E5E5"> F</font><font color="#CCCCCC"> zero and so the</font>

351
00:15:39,390 --> 00:15:43,800
methods that we introduced

352
00:15:40,980 --> 00:15:45,270
<font color="#CCCCCC">sector tech is actually having some true</font>

353
00:15:43,800 --> 00:15:47,370
positives here

354
00:15:45,270 --> 00:15:50,100
however the problem<font color="#E5E5E5"> here is that these</font>

355
00:15:47,370 --> 00:15:53,730
are<font color="#E5E5E5"> so what just like</font><font color="#CCCCCC"> detective tacking</font>

356
00:15:50,100 --> 00:15:56,130
is the extra<font color="#E5E5E5"> data and the base files</font>

357
00:15:53,730 --> 00:15:59,040
that we were using<font color="#CCCCCC"> to create</font><font color="#E5E5E5"> those</font>

358
00:15:56,130 --> 00:16:00,860
images<font color="#CCCCCC"> so if the data weren't there</font><font color="#E5E5E5"> the</font>

359
00:15:59,040 --> 00:16:04,740
detection of<font color="#CCCCCC"> stick detect would not</font>

360
00:16:00,860 --> 00:16:06,600
trigger and that's<font color="#E5E5E5"> why if</font><font color="#CCCCCC"> you think you</font>

361
00:16:04,740 --> 00:16:11,370
can argue<font color="#CCCCCC"> that these are actually false</font>

362
00:16:06,600 --> 00:16:14,550
positives so<font color="#CCCCCC"> for</font><font color="#E5E5E5"> PNG</font><font color="#CCCCCC"> well we had free</font>

363
00:16:11,370 --> 00:16:16,770
malware families<font color="#CCCCCC"> we</font><font color="#E5E5E5"> added two more</font>

364
00:16:14,550 --> 00:16:19,439
<font color="#CCCCCC">methods one injection based approach</font><font color="#E5E5E5"> and</font>

365
00:16:16,770 --> 00:16:21,000
one byte stuffing approach<font color="#CCCCCC"> as you can</font>

366
00:16:19,440 --> 00:16:23,580
see there's the cry Locker which

367
00:16:21,000 --> 00:16:26,190
basically uses<font color="#CCCCCC"> a</font><font color="#E5E5E5"> variation of</font><font color="#CCCCCC"> two byte</font>

368
00:16:23,580 --> 00:16:27,990
stuffing approach and again that was<font color="#E5E5E5"> a</font>

369
00:16:26,190 --> 00:16:30,720
<font color="#CCCCCC">mera what it creates broken files and we</font>

370
00:16:27,990 --> 00:16:33,780
thought<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> we should really</font><font color="#CCCCCC"> have a</font>

371
00:16:30,720 --> 00:16:37,740
sample<font color="#E5E5E5"> that does not create</font><font color="#CCCCCC"> broken files</font>

372
00:16:33,780 --> 00:16:40,230
here<font color="#CCCCCC"> I don't have any base for a</font>

373
00:16:37,740 --> 00:16:41,850
comparison<font color="#E5E5E5"> here the true negative ratio</font>

374
00:16:40,230 --> 00:16:46,050
<font color="#E5E5E5">is a little lower here so we are in the</font>

375
00:16:41,850 --> 00:16:51,090
upper<font color="#CCCCCC"> range</font><font color="#E5E5E5"> of 98%</font><font color="#CCCCCC"> going a</font><font color="#E5E5E5"> little bit</font>

376
00:16:46,050 --> 00:16:52,920
above that<font color="#E5E5E5"> so in the 99% area but for we</font>

377
00:16:51,090 --> 00:16:55,380
have a smaller<font color="#E5E5E5"> training set so probably</font>

378
00:16:52,920 --> 00:17:00,439
<font color="#E5E5E5">that's the reason why we don't capture</font>

379
00:16:55,380 --> 00:17:02,820
all the commonalities of<font color="#CCCCCC"> the file format</font>

380
00:17:00,440 --> 00:17:04,050
again for the injection based approaches

381
00:17:02,820 --> 00:17:06,510
we have<font color="#E5E5E5"> one or percent true positive</font>

382
00:17:04,050 --> 00:17:08,849
which of<font color="#CCCCCC"> course very nice</font><font color="#E5E5E5"> however</font><font color="#CCCCCC"> again</font>

383
00:17:06,510 --> 00:17:13,290
we<font color="#E5E5E5"> see this effect of the residual data</font>

384
00:17:08,849 --> 00:17:15,569
and<font color="#CCCCCC"> the base set that degrades the</font>

385
00:17:13,290 --> 00:17:17,520
quality for the<font color="#E5E5E5"> append based approached</font>

386
00:17:15,569 --> 00:17:20,399
a<font color="#E5E5E5"> little bit but and again</font><font color="#CCCCCC"> for divide</font>

387
00:17:17,520 --> 00:17:25,800
stuffing approach we<font color="#CCCCCC"> have 100%</font><font color="#E5E5E5"> true</font>

388
00:17:20,400 --> 00:17:29,220
positives<font color="#CCCCCC"> so direct brings up so set fog</font>

389
00:17:25,800 --> 00:17:31,050
makes fog set and structural<font color="#E5E5E5"> embedding</font>

390
00:17:29,220 --> 00:17:33,390
methods are<font color="#E5E5E5"> basically as prevalent as</font>

391
00:17:31,050 --> 00:17:36,800
image data based methods<font color="#CCCCCC"> so it's at</font>

392
00:17:33,390 --> 00:17:39,030
<font color="#CCCCCC">least when you look at malware</font><font color="#E5E5E5"> that's a</font>

393
00:17:36,800 --> 00:17:41,940
problem that<font color="#E5E5E5"> seems definitely overlooked</font>

394
00:17:39,030 --> 00:17:43,889
for<font color="#CCCCCC"> a while and nice thing is that</font><font color="#E5E5E5"> well</font>

395
00:17:41,940 --> 00:17:46,500
we think<font color="#E5E5E5"> we're providing</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> very good</font>

396
00:17:43,890 --> 00:17:48,450
methods for detecting them and since

397
00:17:46,500 --> 00:17:50,820
we're using a model for the files

398
00:17:48,450 --> 00:17:53,790
without<font color="#E5E5E5"> any embedding we also think that</font>

399
00:17:50,820 --> 00:17:54,960
it's capable of detecting anything<font color="#E5E5E5"> that</font>

400
00:17:53,790 --> 00:17:56,730
we didn't<font color="#E5E5E5"> think</font>

401
00:17:54,960 --> 00:17:59,370
unless as long as it has an effect<font color="#E5E5E5"> on</font>

402
00:17:56,730 --> 00:18:00,960
<font color="#E5E5E5">the structure</font><font color="#CCCCCC"> of two files and yeah</font>

403
00:17:59,370 --> 00:18:04,530
that's<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> last point so</font>

404
00:18:00,960 --> 00:18:06,420
there's no the<font color="#E5E5E5"> only limitation is</font><font color="#CCCCCC"> that</font>

405
00:18:04,530 --> 00:18:09,000
<font color="#CCCCCC">well you have to have a structured file</font>

406
00:18:06,420 --> 00:18:13,100
format<font color="#E5E5E5"> and you have to be able to parse</font>

407
00:18:09,000 --> 00:18:17,150
it into<font color="#CCCCCC"> a format that</font><font color="#E5E5E5"> we can process so</font>

408
00:18:13,100 --> 00:18:17,149
we have a little time left<font color="#CCCCCC"> for questions</font>

409
00:18:21,260 --> 00:18:24,539
[Applause]

410
00:18:39,380 --> 00:18:47,520
but as James pointed<font color="#E5E5E5"> out the</font><font color="#CCCCCC"> key note</font><font color="#E5E5E5"> do</font>

411
00:18:43,230 --> 00:18:49,400
you<font color="#E5E5E5"> have any concern about</font><font color="#CCCCCC"> do you have</font>

412
00:18:47,520 --> 00:18:52,639
<font color="#E5E5E5">any concern about using machine learning</font>

413
00:18:49,400 --> 00:18:56,340
<font color="#CCCCCC">insecurity in the</font><font color="#E5E5E5"> context of your work</font>

414
00:18:52,640 --> 00:18:58,020
<font color="#CCCCCC">yes so actually I mean</font><font color="#E5E5E5"> there's some you</font>

415
00:18:56,340 --> 00:19:01,620
and the paper<font color="#CCCCCC"> will find somewhere</font><font color="#E5E5E5"> or</font>

416
00:18:58,020 --> 00:19:04,470
some words on how poisoning could affect

417
00:19:01,620 --> 00:19:06,209
this approach and that's reasonable<font color="#CCCCCC"> to</font>

418
00:19:04,470 --> 00:19:08,280
assume<font color="#E5E5E5"> that an attacker which has or</font>

419
00:19:06,210 --> 00:19:10,470
<font color="#E5E5E5">basically for any machine learning</font><font color="#CCCCCC"> beta</font>

420
00:19:08,280 --> 00:19:12,889
<font color="#E5E5E5">space approach if you control the</font>

421
00:19:10,470 --> 00:19:17,010
training data<font color="#E5E5E5"> you controlling the</font>

422
00:19:12,890 --> 00:19:20,250
detection result<font color="#E5E5E5"> so we came</font><font color="#CCCCCC"> up a few</font>

423
00:19:17,010 --> 00:19:22,260
<font color="#E5E5E5">designs which we didn't</font><font color="#CCCCCC"> implement for</font>

424
00:19:20,250 --> 00:19:24,930
limiting<font color="#E5E5E5"> the effect of an attacker that</font>

425
00:19:22,260 --> 00:19:27,080
has at<font color="#CCCCCC"> least partial control</font><font color="#E5E5E5"> over the</font>

426
00:19:24,930 --> 00:19:29,460
training<font color="#E5E5E5"> data</font><font color="#CCCCCC"> obviously when when the</font>

427
00:19:27,080 --> 00:19:32,280
attack has full control<font color="#E5E5E5"> between data</font>

428
00:19:29,460 --> 00:19:35,610
<font color="#CCCCCC">hurt</font><font color="#E5E5E5"> yeah you you kind of worked</font><font color="#CCCCCC"> but I</font>

429
00:19:32,280 --> 00:19:38,700
mean<font color="#E5E5E5"> getting</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> to James example so I</font>

430
00:19:35,610 --> 00:19:41,399
think the problem<font color="#CCCCCC"> of</font><font color="#E5E5E5"> Tay is that they</font>

431
00:19:38,700 --> 00:19:42,720
were continuously<font color="#E5E5E5"> learning and this is</font>

432
00:19:41,400 --> 00:19:44,580
an approach where<font color="#E5E5E5"> you would say okay we</font>

433
00:19:42,720 --> 00:19:47,400
ever<font color="#E5E5E5"> created such that we're learning</font>

434
00:19:44,580 --> 00:19:50,669
from<font color="#E5E5E5"> and then we'll keep it and if the</font>

435
00:19:47,400 --> 00:19:52,770
quality<font color="#CCCCCC"> of the detection degrades for</font>

436
00:19:50,670 --> 00:19:55,290
our purposes<font color="#E5E5E5"> then we</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> have to create</font>

437
00:19:52,770 --> 00:20:05,129
<font color="#E5E5E5">a new</font><font color="#CCCCCC"> create a set to to be able</font><font color="#E5E5E5"> to</font>

438
00:19:55,290 --> 00:20:07,290
<font color="#E5E5E5">check if there</font><font color="#CCCCCC"> is no one what if you are</font>

439
00:20:05,130 --> 00:20:08,220
attacker<font color="#E5E5E5"> what is the best strategy</font><font color="#CCCCCC"> for</font>

440
00:20:07,290 --> 00:20:11,509
<font color="#E5E5E5">you to buy</font>

441
00:20:08,220 --> 00:20:14,490
<font color="#E5E5E5">as your classifier do you have well</font><font color="#CCCCCC"> they</font>

442
00:20:11,509 --> 00:20:17,370
<font color="#CCCCCC">mean most obvious approaches</font><font color="#E5E5E5"> just to I</font>

443
00:20:14,490 --> 00:20:20,039
mean since this is only<font color="#CCCCCC"> looking at the</font>

444
00:20:17,370 --> 00:20:24,928
file structure you can use image data

445
00:20:20,039 --> 00:20:27,929
based the I mean<font color="#E5E5E5"> we aware that this will</font>

446
00:20:24,929 --> 00:20:29,970
<font color="#E5E5E5">not get the capacity of the channel down</font>

447
00:20:27,929 --> 00:20:35,220
to<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> obviously I</font><font color="#E5E5E5"> mean when</font>

448
00:20:29,970 --> 00:20:37,350
you look<font color="#CCCCCC"> at this slide for instance you</font>

449
00:20:35,220 --> 00:20:40,190
<font color="#CCCCCC">could</font><font color="#E5E5E5"> add a few</font><font color="#CCCCCC"> bytes here on let's say</font>

450
00:20:37,350 --> 00:20:43,918
the left side<font color="#E5E5E5"> where you have</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> green</font>

451
00:20:40,190 --> 00:20:46,440
indication however<font color="#E5E5E5"> so when you have a</font>

452
00:20:43,919 --> 00:20:49,289
it's an image data based approach

453
00:20:46,440 --> 00:20:53,549
<font color="#E5E5E5">usually</font><font color="#CCCCCC"> have let's say a few bytes for</font>

454
00:20:49,289 --> 00:20:56,250
for<font color="#CCCCCC"> each packet of</font><font color="#E5E5E5"> descent and what we</font>

455
00:20:53,549 --> 00:21:02,399
think<font color="#E5E5E5"> of a right configuration you will</font>

456
00:20:56,250 --> 00:21:04,259
get<font color="#E5E5E5"> to us in the low level of bandwidth</font>

457
00:21:02,399 --> 00:21:06,870
actually so for the attacker this is

458
00:21:04,259 --> 00:21:09,600
basically<font color="#E5E5E5"> makes</font><font color="#CCCCCC"> the channel</font><font color="#E5E5E5"> very</font>

459
00:21:06,870 --> 00:21:12,029
interesting for or let's say without

460
00:21:09,600 --> 00:21:14,309
this method you could really<font color="#E5E5E5"> use</font><font color="#CCCCCC"> one</font>

461
00:21:12,029 --> 00:21:17,879
single<font color="#E5E5E5"> image file to transfer a gigabyte</font>

462
00:21:14,309 --> 00:21:20,428
of<font color="#E5E5E5"> data and as long</font><font color="#CCCCCC"> as you don't</font><font color="#E5E5E5"> have</font>

463
00:21:17,879 --> 00:21:22,259
<font color="#CCCCCC">any detection</font><font color="#E5E5E5"> method that takes 7</font>

464
00:21:20,429 --> 00:21:24,899
seconds consideration will not be able

465
00:21:22,259 --> 00:21:26,370
<font color="#E5E5E5">to understand that fact and with this</font>

466
00:21:24,899 --> 00:21:29,549
while you get somewhere in the<font color="#E5E5E5"> area</font>

467
00:21:26,370 --> 00:21:31,350
where you at least consider switching<font color="#E5E5E5"> to</font>

468
00:21:29,549 --> 00:21:33,330
image data based methods or well

469
00:21:31,350 --> 00:21:35,549
basically<font color="#E5E5E5"> I mean there are always other</font>

470
00:21:33,330 --> 00:21:38,939
methods and if you look at the<font color="#CCCCCC"> Berger</font><font color="#E5E5E5"> of</font>

471
00:21:35,549 --> 00:21:41,820
multi<font color="#E5E5E5"> gory</font><font color="#CCCCCC"> he's lots</font><font color="#E5E5E5"> of very</font><font color="#CCCCCC"> interesting</font>

472
00:21:38,940 --> 00:21:46,139
<font color="#E5E5E5">much low bandwidth channels for</font>

473
00:21:41,820 --> 00:21:46,870
high-tech filtration<font color="#CCCCCC"> thanks our speaker</font>

474
00:21:46,139 --> 00:21:50,449
once more

475
00:21:46,870 --> 00:21:50,449
[Applause]

