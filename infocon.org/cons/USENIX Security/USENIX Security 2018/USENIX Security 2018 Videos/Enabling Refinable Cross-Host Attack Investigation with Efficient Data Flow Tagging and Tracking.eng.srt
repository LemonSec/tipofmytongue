1
00:00:10,170 --> 00:00:15,959
good afternoon everyone my<font color="#E5E5E5"> name is</font><font color="#CCCCCC"> jung</font>

2
00:00:13,019 --> 00:00:18,900
<font color="#CCCCCC">eunji I'm from Georgia Tech</font><font color="#E5E5E5"> today I'm</font>

3
00:00:15,959 --> 00:00:20,700
gonna talk about<font color="#E5E5E5"> our work on refine</font>

4
00:00:18,900 --> 00:00:27,570
about attacking mastication<font color="#CCCCCC"> in the</font>

5
00:00:20,700 --> 00:00:29,219
setting of multi<font color="#E5E5E5"> host so nowadays there</font>

6
00:00:27,570 --> 00:00:36,110
are more and<font color="#CCCCCC"> more attacks</font><font color="#E5E5E5"> that involve</font>

7
00:00:29,219 --> 00:00:39,840
<font color="#E5E5E5">multiple hosts for example in 2015</font><font color="#CCCCCC"> some</font>

8
00:00:36,110 --> 00:00:42,360
the Taiwan<font color="#E5E5E5"> first a bank</font><font color="#CCCCCC"> suffered</font><font color="#E5E5E5"> from an</font>

9
00:00:39,840 --> 00:00:44,610
attack that<font color="#E5E5E5"> steals money from their ATM</font>

10
00:00:42,360 --> 00:00:48,720
machines which involves<font color="#E5E5E5"> lateral</font>

11
00:00:44,610 --> 00:00:55,470
<font color="#CCCCCC">movements of multiple hosts and also</font>

12
00:00:48,720 --> 00:00:57,989
that<font color="#E5E5E5"> in the cabinet</font><font color="#CCCCCC"> threats</font><font color="#E5E5E5"> attackers</font>

13
00:00:55,470 --> 00:01:02,930
used<font color="#CCCCCC"> persistent and</font><font color="#E5E5E5"> lateral movements</font>

14
00:00:57,989 --> 00:01:07,079
also<font color="#CCCCCC"> to to infiltrate the the financial</font>

15
00:01:02,930 --> 00:01:10,759
Institute's and also that interestingly

16
00:01:07,079 --> 00:01:13,798
in the black<font color="#CCCCCC"> hat of last year 2017</font>

17
00:01:10,759 --> 00:01:17,940
researchers from NCC<font color="#E5E5E5"> a group proposed</font>

18
00:01:13,799 --> 00:01:20,400
the kid<font color="#E5E5E5"> pond which uses not</font><font color="#CCCCCC"> only the get</font>

19
00:01:17,940 --> 00:01:23,520
crime site but<font color="#CCCCCC"> also the kids server</font><font color="#E5E5E5"> side</font>

20
00:01:20,400 --> 00:01:25,560
to<font color="#E5E5E5"> exclude to exfiltrate</font><font color="#CCCCCC"> at the data</font>

21
00:01:23,520 --> 00:01:28,229
from the client<font color="#CCCCCC"> site through</font><font color="#E5E5E5"> the server</font>

22
00:01:25,560 --> 00:01:33,330
side and<font color="#E5E5E5"> then finally get to the</font>

23
00:01:28,229 --> 00:01:36,390
attacker side so after that the attack

24
00:01:33,330 --> 00:01:39,048
happens<font color="#CCCCCC"> so our so our</font><font color="#E5E5E5"> goal is to</font><font color="#CCCCCC"> aim is</font>

25
00:01:36,390 --> 00:01:41,850
to investigate<font color="#E5E5E5"> at these attacks with</font>

26
00:01:39,049 --> 00:01:44,850
with the goals of accuracy<font color="#E5E5E5"> efficiency</font>

27
00:01:41,850 --> 00:01:48,470
and<font color="#E5E5E5"> and of course supporting multiple</font>

28
00:01:44,850 --> 00:01:52,649
hosts in this background<font color="#E5E5E5"> so this work of</font>

29
00:01:48,470 --> 00:01:54,979
focuses on the<font color="#E5E5E5"> on the challenges when we</font>

30
00:01:52,650 --> 00:02:01,710
<font color="#CCCCCC">achieve these goals and</font><font color="#E5E5E5"> our</font>

31
00:01:54,979 --> 00:02:04,650
corresponding approaches so first let's

32
00:02:01,710 --> 00:02:09,799
see a<font color="#CCCCCC"> high-level</font><font color="#E5E5E5"> example of the cross</font>

33
00:02:04,650 --> 00:02:13,019
host attack so the the<font color="#E5E5E5"> the attacker</font>

34
00:02:09,799 --> 00:02:15,420
tries to accelerate<font color="#E5E5E5"> some sensitive data</font>

35
00:02:13,019 --> 00:02:17,099
<font color="#E5E5E5">from the from the client</font><font color="#CCCCCC"> side through</font>

36
00:02:15,420 --> 00:02:19,260
the server side<font color="#E5E5E5"> and finally to</font><font color="#CCCCCC"> the</font>

37
00:02:17,099 --> 00:02:21,959
attacker side he scans<font color="#E5E5E5"> the</font><font color="#CCCCCC"> power system</font>

38
00:02:19,260 --> 00:02:23,429
of the ads the client<font color="#E5E5E5"> side and he</font>

39
00:02:21,959 --> 00:02:27,180
selectively pick

40
00:02:23,430 --> 00:02:30,480
file a and then to send it through<font color="#CCCCCC"> the</font>

41
00:02:27,180 --> 00:02:34,409
<font color="#CCCCCC">server-side and then to to the attacker</font>

42
00:02:30,480 --> 00:02:37,738
<font color="#CCCCCC">side</font><font color="#E5E5E5"> so during the investigation</font><font color="#CCCCCC"> so</font>

43
00:02:34,409 --> 00:02:41,340
<font color="#E5E5E5">people may ask</font><font color="#CCCCCC"> questions like what data</font>

44
00:02:37,739 --> 00:02:46,859
<font color="#E5E5E5">will leaked exactly to the attacker was</font>

45
00:02:41,340 --> 00:02:48,599
<font color="#E5E5E5">file being leaked or was file a if we</font>

46
00:02:46,859 --> 00:02:52,379
know<font color="#E5E5E5"> that it's far away that is leaked</font>

47
00:02:48,599 --> 00:02:56,339
so how was file a leaked<font color="#E5E5E5"> step in step</font><font color="#CCCCCC"> so</font>

48
00:02:52,379 --> 00:03:00,000
what's the nature<font color="#E5E5E5"> of this attack so in</font>

49
00:02:56,340 --> 00:03:05,639
order<font color="#E5E5E5"> to answer these these questions so</font>

50
00:03:00,000 --> 00:03:08,340
we need<font color="#E5E5E5"> to so we need to first to tell</font>

51
00:03:05,639 --> 00:03:11,430
that exactly<font color="#E5E5E5"> file a has been leaked not</font>

52
00:03:08,340 --> 00:03:14,159
with the with the false results like

53
00:03:11,430 --> 00:03:18,269
file B or C is actually<font color="#E5E5E5"> leaked and also</font>

54
00:03:14,159 --> 00:03:20,250
that we need to find out which what's

55
00:03:18,269 --> 00:03:23,159
the data<font color="#E5E5E5"> dependencies between these</font>

56
00:03:20,250 --> 00:03:28,470
multiple hosts<font color="#E5E5E5"> so that we can analyze</font>

57
00:03:23,159 --> 00:03:31,379
<font color="#E5E5E5">them a step step by step by</font><font color="#CCCCCC"> step so this</font>

58
00:03:28,470 --> 00:03:35,040
this challenge is aggregated when we

59
00:03:31,379 --> 00:03:39,358
turn to a<font color="#CCCCCC"> peer-to-peer network setting</font>

60
00:03:35,040 --> 00:03:41,519
so we need to find out like<font color="#E5E5E5"> only these</font>

61
00:03:39,359 --> 00:03:46,290
hosts have been<font color="#E5E5E5"> involved in the attack</font>

62
00:03:41,519 --> 00:03:48,180
not not the remaining ones so the

63
00:03:46,290 --> 00:03:50,939
question is that<font color="#CCCCCC"> do we have to serialize</font>

64
00:03:48,180 --> 00:03:53,909
these convoluted<font color="#CCCCCC"> data dependencies</font>

65
00:03:50,939 --> 00:03:57,569
between the these multiple hosts can we

66
00:03:53,909 --> 00:04:01,439
instead apply that the analysis in<font color="#E5E5E5"> in</font>

67
00:03:57,569 --> 00:04:04,638
<font color="#E5E5E5">parallel and aggregate the results</font><font color="#CCCCCC"> after</font>

68
00:04:01,439 --> 00:04:10,798
we complete these<font color="#E5E5E5"> at these analysis</font>

69
00:04:04,639 --> 00:04:13,799
<font color="#E5E5E5">which has been done in parallel</font><font color="#CCCCCC"> so when</font>

70
00:04:10,799 --> 00:04:16,440
we analyze these data flows across

71
00:04:13,799 --> 00:04:19,228
different hosts<font color="#E5E5E5"> so we find</font><font color="#CCCCCC"> it as</font>

72
00:04:16,440 --> 00:04:23,460
challenging so we<font color="#E5E5E5"> summarize these</font>

73
00:04:19,228 --> 00:04:26,520
<font color="#E5E5E5">challenges in here so first that it has</font>

74
00:04:23,460 --> 00:04:28,530
the<font color="#E5E5E5"> false positive dependencies like in</font>

75
00:04:26,520 --> 00:04:32,090
the previous<font color="#CCCCCC"> example so we need to tell</font>

76
00:04:28,530 --> 00:04:35,549
that actually only file a has been

77
00:04:32,090 --> 00:04:37,260
leaked<font color="#E5E5E5"> not the file B or C and</font><font color="#CCCCCC"> also that</font>

78
00:04:35,550 --> 00:04:39,300
the data dependencies are

79
00:04:37,260 --> 00:04:41,880
across these multiple<font color="#E5E5E5"> hosts should</font><font color="#CCCCCC"> be</font>

80
00:04:39,300 --> 00:04:44,220
tracked correctly<font color="#CCCCCC"> in the analysis and</font>

81
00:04:41,880 --> 00:04:47,070
<font color="#E5E5E5">also that because we're not only dealing</font>

82
00:04:44,220 --> 00:04:49,860
with one<font color="#E5E5E5"> one single host but multiple</font>

83
00:04:47,070 --> 00:04:52,050
<font color="#CCCCCC">host Saudi</font><font color="#E5E5E5"> so the analysis costs</font><font color="#CCCCCC"> include</font>

84
00:04:49,860 --> 00:04:54,030
<font color="#E5E5E5">including the analysis time and the</font>

85
00:04:52,050 --> 00:05:02,010
memory cost is amplified so how<font color="#CCCCCC"> can we</font>

86
00:04:54,030 --> 00:05:04,590
give a reasonable analysis cost so<font color="#CCCCCC"> we so</font>

87
00:05:02,010 --> 00:05:08,070
<font color="#CCCCCC">we solve the first appositive dependency</font>

88
00:05:04,590 --> 00:05:10,260
our first challenge<font color="#E5E5E5"> by using a dynamic</font>

89
00:05:08,070 --> 00:05:14,099
<font color="#E5E5E5">link analysis which has been known to be</font>

90
00:05:10,260 --> 00:05:16,230
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to to dynamically instrument the</font>

91
00:05:14,100 --> 00:05:18,530
program at instruction<font color="#CCCCCC"> level instruction</font>

92
00:05:16,230 --> 00:05:24,210
by instruction so<font color="#CCCCCC"> that it can tell</font>

93
00:05:18,530 --> 00:05:26,429
<font color="#E5E5E5">exactly the exact data flow there are</font>

94
00:05:24,210 --> 00:05:29,880
mainly two categories of<font color="#CCCCCC"> T analysis are</font>

95
00:05:26,430 --> 00:05:32,520
used in the that has<font color="#E5E5E5"> been presented</font><font color="#CCCCCC"> are</font>

96
00:05:29,880 --> 00:05:34,620
the<font color="#E5E5E5"> first category like the cloud like</font>

97
00:05:32,520 --> 00:05:37,229
cloud<font color="#CCCCCC"> fins or</font><font color="#E5E5E5"> the tank exchange they</font>

98
00:05:34,620 --> 00:05:39,510
focus on using the tank arise directly

99
00:05:37,230 --> 00:05:42,750
in the wrong time<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> program and</font>

100
00:05:39,510 --> 00:05:45,210
then they can track the<font color="#E5E5E5"> dip the accurate</font>

101
00:05:42,750 --> 00:05:47,850
dependency from one host to the other

102
00:05:45,210 --> 00:05:50,580
<font color="#E5E5E5">however thinks that enhances as we know</font>

103
00:05:47,850 --> 00:05:54,870
<font color="#E5E5E5">is very expensive so they suffer from</font>

104
00:05:50,580 --> 00:06:00,270
<font color="#E5E5E5">the very high overhead which can be over</font>

105
00:05:54,870 --> 00:06:02,100
<font color="#CCCCCC">10 times or 230 times higher</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> we and</font>

106
00:06:00,270 --> 00:06:05,780
that<font color="#CCCCCC"> the second category</font><font color="#E5E5E5"> is called</font>

107
00:06:02,100 --> 00:06:08,820
<font color="#E5E5E5">refine herbal attack investigation which</font>

108
00:06:05,780 --> 00:06:11,909
<font color="#E5E5E5">uses record</font><font color="#CCCCCC"> click technique to decouple</font>

109
00:06:08,820 --> 00:06:14,219
the expensive<font color="#E5E5E5"> dynamic instrumentation of</font>

110
00:06:11,910 --> 00:06:19,350
<font color="#CCCCCC">analysis from the runtime of the program</font>

111
00:06:14,220 --> 00:06:23,130
and then and we record this<font color="#E5E5E5"> program with</font>

112
00:06:19,350 --> 00:06:25,020
a very low overhead<font color="#E5E5E5"> and then at the</font>

113
00:06:23,130 --> 00:06:27,200
replay time so we do this expensive

114
00:06:25,020 --> 00:06:30,510
<font color="#CCCCCC">tenderizes so it can achieve both</font><font color="#E5E5E5"> in</font>

115
00:06:27,200 --> 00:06:34,590
efficiency<font color="#E5E5E5"> and fine growing the level of</font>

116
00:06:30,510 --> 00:06:37,380
the of the analysis<font color="#E5E5E5"> and also accuracy so</font>

117
00:06:34,590 --> 00:06:40,830
mainly<font color="#CCCCCC"> there are work like our nodes and</font>

118
00:06:37,380 --> 00:06:43,380
<font color="#CCCCCC">n rain</font><font color="#E5E5E5"> so first we do a system-wide</font>

119
00:06:40,830 --> 00:06:47,130
<font color="#E5E5E5">recall replay and then we prune this</font>

120
00:06:43,380 --> 00:06:49,790
<font color="#E5E5E5">data according to the target of our</font>

121
00:06:47,130 --> 00:06:53,060
analysis of<font color="#E5E5E5"> our</font><font color="#CCCCCC"> attacking master</font>

122
00:06:49,790 --> 00:06:59,540
and finally we selectively replayed the

123
00:06:53,060 --> 00:07:01,850
execution with the tank analysis so<font color="#E5E5E5"> we</font>

124
00:06:59,540 --> 00:07:04,100
have chosen<font color="#E5E5E5"> to solve this one with the</font>

125
00:07:01,850 --> 00:07:06,730
<font color="#E5E5E5">refine</font><font color="#CCCCCC"> Apple attack investigation way</font>

126
00:07:04,100 --> 00:07:09,860
and that there<font color="#CCCCCC"> are</font><font color="#E5E5E5"> two remaining</font>

127
00:07:06,730 --> 00:07:12,470
challenges so the first one<font color="#CCCCCC"> is that we</font>

128
00:07:09,860 --> 00:07:13,880
still need<font color="#CCCCCC"> to fulfill the same data</font>

129
00:07:12,470 --> 00:07:17,210
dependency<font color="#E5E5E5"> that happened in the</font>

130
00:07:13,880 --> 00:07:19,070
recording time<font color="#E5E5E5"> so we need to add to the</font>

131
00:07:17,210 --> 00:07:21,590
replay time so that we can accurately

132
00:07:19,070 --> 00:07:24,500
track the data dependency and find out

133
00:07:21,590 --> 00:07:28,400
what is really<font color="#CCCCCC"> going on and what the</font>

134
00:07:24,500 --> 00:07:32,110
<font color="#E5E5E5">data flow is so we are so we are trying</font>

135
00:07:28,400 --> 00:07:34,669
<font color="#E5E5E5">to enable attack dependency free and</font>

136
00:07:32,110 --> 00:07:37,030
independent<font color="#E5E5E5"> and a parallel replay</font><font color="#CCCCCC"> so</font>

137
00:07:34,670 --> 00:07:43,640
that we can do the thing that<font color="#E5E5E5"> Isis</font>

138
00:07:37,030 --> 00:07:48,190
without<font color="#E5E5E5"> Sorella serializing the replayed</font>

139
00:07:43,640 --> 00:07:51,979
executions<font color="#E5E5E5"> and also that we aim to</font>

140
00:07:48,190 --> 00:07:55,340
optimize the analysis time because if we

141
00:07:51,980 --> 00:07:59,990
do<font color="#CCCCCC"> that DNA</font><font color="#E5E5E5"> duty analysis in parallel</font><font color="#CCCCCC"> so</font>

142
00:07:55,340 --> 00:08:02,570
we can reduce the analysis time cost<font color="#E5E5E5"> and</font>

143
00:07:59,990 --> 00:08:08,540
also<font color="#E5E5E5"> further that we aim to reduce the</font>

144
00:08:02,570 --> 00:08:11,420
analysis memory cost so our approach is

145
00:08:08,540 --> 00:08:15,680
to<font color="#E5E5E5"> as I said to enable the independent</font>

146
00:08:11,420 --> 00:08:18,280
and<font color="#E5E5E5"> parallel</font><font color="#CCCCCC"> replay the lift and we</font>

147
00:08:15,680 --> 00:08:21,500
reduce<font color="#E5E5E5"> the memory cost of</font><font color="#CCCCCC"> Delta by</font>

148
00:08:18,280 --> 00:08:31,250
optimally allocating<font color="#CCCCCC"> the text size for</font>

149
00:08:21,500 --> 00:08:33,260
each<font color="#E5E5E5"> lift task so here that during the</font>

150
00:08:31,250 --> 00:08:33,950
during<font color="#E5E5E5"> a selective replay of each</font>

151
00:08:33,260 --> 00:08:37,929
execution

152
00:08:33,950 --> 00:08:42,320
<font color="#E5E5E5">so our system called</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> our tag</font>

153
00:08:37,929 --> 00:08:45,770
facilitates the tagging that is needed

154
00:08:42,320 --> 00:08:49,700
during<font color="#E5E5E5"> the think analysis so so that</font>

155
00:08:45,770 --> 00:08:52,490
nodes serialization<font color="#E5E5E5"> is needed so</font><font color="#CCCCCC"> that</font>

156
00:08:49,700 --> 00:08:57,710
each replay can be done independently

157
00:08:52,490 --> 00:09:02,180
<font color="#E5E5E5">and in parallel so this is the overview</font>

158
00:08:57,710 --> 00:09:04,160
<font color="#CCCCCC">of our system</font><font color="#E5E5E5"> it is composed of four</font>

159
00:09:02,180 --> 00:09:07,638
parts<font color="#E5E5E5"> so first</font>

160
00:09:04,160 --> 00:09:10,310
that we have attack<font color="#CCCCCC"> association part</font>

161
00:09:07,639 --> 00:09:13,370
that tracks that the data<font color="#E5E5E5"> transmission</font>

162
00:09:10,310 --> 00:09:16,878
<font color="#E5E5E5">between different hosts and we used</font>

163
00:09:13,370 --> 00:09:20,120
attack<font color="#CCCCCC"> Al and our tag allocation</font>

164
00:09:16,879 --> 00:09:23,959
optimally calculates the the text size

165
00:09:20,120 --> 00:09:27,319
that is many moment minimally needed in

166
00:09:23,959 --> 00:09:33,279
every<font color="#E5E5E5"> day if the task and we use</font><font color="#CCCCCC"> a text</font>

167
00:09:27,319 --> 00:09:36,439
which<font color="#E5E5E5"> a technique to to to allocate</font><font color="#CCCCCC"> a</font>

168
00:09:33,279 --> 00:09:39,829
locally synchronize the tag<font color="#E5E5E5"> for each 50</font>

169
00:09:36,439 --> 00:09:42,740
tasks<font color="#E5E5E5"> and then finally our tag overlay</font>

170
00:09:39,829 --> 00:09:47,628
<font color="#E5E5E5">is gonna aggravate these results and</font>

171
00:09:42,740 --> 00:09:56,240
then return the final<font color="#CCCCCC"> results of of the</font>

172
00:09:47,629 --> 00:09:58,970
analysis so<font color="#E5E5E5"> so here that we</font><font color="#CCCCCC"> use a part</font>

173
00:09:56,240 --> 00:10:01,879
<font color="#CCCCCC">of the get Pune attack to show how our</font>

174
00:09:58,970 --> 00:10:07,279
our tag works<font color="#CCCCCC"> to</font><font color="#E5E5E5"> facilitate these</font>

175
00:10:01,879 --> 00:10:09,920
tagging so here that on the left side

176
00:10:07,279 --> 00:10:13,670
<font color="#E5E5E5">for</font><font color="#CCCCCC"> example at the attacker</font><font color="#E5E5E5"> aims to</font>

177
00:10:09,920 --> 00:10:18,229
exfiltrate the<font color="#CCCCCC"> assess the ssh key</font>

178
00:10:13,670 --> 00:10:22,310
through through the<font color="#E5E5E5"> get</font><font color="#CCCCCC"> pag</font><font color="#E5E5E5"> command and</font>

179
00:10:18,230 --> 00:10:24,529
then<font color="#E5E5E5"> it's it crosses this from the</font>

180
00:10:22,310 --> 00:10:30,109
client<font color="#E5E5E5"> side to the server side through</font>

181
00:10:24,529 --> 00:10:34,430
the<font color="#CCCCCC"> SCP</font><font color="#E5E5E5"> and then finally the server side</font>

182
00:10:30,110 --> 00:10:36,829
hook is gonna read from from these from

183
00:10:34,430 --> 00:10:40,300
<font color="#E5E5E5">these objects temporary object files</font>

184
00:10:36,829 --> 00:10:44,930
from the SCP and finally it's going<font color="#E5E5E5"> to</font>

185
00:10:40,300 --> 00:10:50,120
generate an archive<font color="#CCCCCC"> to file so these are</font>

186
00:10:44,930 --> 00:10:55,790
the system call level data flow that<font color="#E5E5E5"> we</font>

187
00:10:50,120 --> 00:11:00,379
<font color="#E5E5E5">can see so our target is to is to find</font>

188
00:10:55,790 --> 00:11:02,629
out how<font color="#CCCCCC"> does the</font><font color="#E5E5E5"> SSH key goes to from</font>

189
00:11:00,379 --> 00:11:10,699
the current site goes to the archive the

190
00:11:02,629 --> 00:11:13,399
file on<font color="#E5E5E5"> the server side so when we are</font>

191
00:11:10,699 --> 00:11:17,269
<font color="#E5E5E5">doing this analysis so first that we</font>

192
00:11:13,399 --> 00:11:18,079
need to<font color="#E5E5E5"> identify every bite that we need</font>

193
00:11:17,269 --> 00:11:20,600
to track

194
00:11:18,079 --> 00:11:25,040
so in<font color="#E5E5E5"> this data flow analysis for</font>

195
00:11:20,600 --> 00:11:28,249
<font color="#E5E5E5">example</font><font color="#CCCCCC"> here that</font><font color="#E5E5E5"> the SSH key needs a</font>

196
00:11:25,040 --> 00:11:28,699
global tag which consists of like the

197
00:11:28,249 --> 00:11:31,429
host

198
00:11:28,699 --> 00:11:34,488
MAC address<font color="#E5E5E5"> the inode</font><font color="#CCCCCC"> dev ji n</font>

199
00:11:31,429 --> 00:11:36,860
information and<font color="#CCCCCC"> it's offset and also its</font>

200
00:11:34,489 --> 00:11:39,709
version<font color="#CCCCCC"> information</font><font color="#E5E5E5"> so totally it's a</font>

201
00:11:36,860 --> 00:11:42,230
<font color="#CCCCCC">two hundred and eight point eight bits</font>

202
00:11:39,709 --> 00:11:45,618
<font color="#E5E5E5">so can we just use this a global tag</font>

203
00:11:42,230 --> 00:11:47,119
which can make every tag identifiable

204
00:11:45,619 --> 00:11:53,619
across different hosts in<font color="#E5E5E5"> the thing that</font>

205
00:11:47,119 --> 00:11:57,889
<font color="#E5E5E5">Isis</font><font color="#CCCCCC"> Oh</font><font color="#E5E5E5"> obviously</font><font color="#CCCCCC"> it is very high so our</font>

206
00:11:53,619 --> 00:12:00,759
approach<font color="#E5E5E5"> is to first analyze</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> Cisco</font>

207
00:11:57,889 --> 00:12:06,739
trace and then<font color="#CCCCCC"> to allocate in an optimal</font>

208
00:12:00,759 --> 00:12:11,629
tag<font color="#E5E5E5"> by using the result of the Cisco</font>

209
00:12:06,739 --> 00:12:16,579
trace analysis so for<font color="#E5E5E5"> example here</font><font color="#CCCCCC"> that</font>

210
00:12:11,629 --> 00:12:20,149
if there's a read Cisco<font color="#E5E5E5"> with the six</font>

211
00:12:16,579 --> 00:12:23,029
bytes of<font color="#E5E5E5"> the data</font><font color="#CCCCCC"> read to the memory</font>

212
00:12:20,149 --> 00:12:27,230
space<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the gate</font><font color="#E5E5E5"> pad process and then</font>

213
00:12:23,029 --> 00:12:31,610
there's a right<font color="#CCCCCC"> Cisco which writes to</font>

214
00:12:27,230 --> 00:12:35,449
the to the object file<font color="#E5E5E5"> so if we if our</font>

215
00:12:31,610 --> 00:12:39,259
<font color="#CCCCCC">target is to</font><font color="#E5E5E5"> track these data flow so</font>

216
00:12:35,449 --> 00:12:42,709
here that<font color="#E5E5E5"> instead of</font><font color="#CCCCCC"> using the 208 bits</font>

217
00:12:39,259 --> 00:12:45,920
<font color="#E5E5E5">so we only</font><font color="#CCCCCC"> need three bits to identify</font>

218
00:12:42,709 --> 00:12:51,790
these the sources of<font color="#E5E5E5"> this data flow</font>

219
00:12:45,920 --> 00:12:56,360
<font color="#E5E5E5">tracking so we compare the text sizes of</font>

220
00:12:51,790 --> 00:12:59,929
our<font color="#E5E5E5"> scheme with the previous systems so</font>

221
00:12:56,360 --> 00:13:04,299
as we can<font color="#E5E5E5"> see that as the</font><font color="#CCCCCC"> number of</font><font color="#E5E5E5"> the</font>

222
00:12:59,929 --> 00:13:07,939
symbols for each v<font color="#CCCCCC"> as it grows so our</font>

223
00:13:04,299 --> 00:13:12,679
our tag<font color="#E5E5E5"> local tagger growth in the log</font>

224
00:13:07,939 --> 00:13:16,629
scale<font color="#CCCCCC"> however the others is one is from</font>

225
00:13:12,679 --> 00:13:20,179
<font color="#E5E5E5">that Titan it is so it grows</font>

226
00:13:16,629 --> 00:13:22,699
exponentially<font color="#CCCCCC"> and</font><font color="#E5E5E5"> also this the D</font>

227
00:13:20,179 --> 00:13:25,309
tracker and<font color="#CCCCCC"> the</font><font color="#E5E5E5"> our global tag is also</font>

228
00:13:22,699 --> 00:13:30,439
much higher<font color="#E5E5E5"> and also that the memory</font>

229
00:13:25,309 --> 00:13:31,209
cost for for the according<font color="#CCCCCC"> to you the</font>

230
00:13:30,439 --> 00:13:32,980
number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

231
00:13:31,209 --> 00:13:36,579
that has been used in the memory space

232
00:13:32,980 --> 00:13:37,869
<font color="#E5E5E5">also our local tag as a as a fraction of</font>

233
00:13:36,579 --> 00:13:43,719
the other<font color="#CCCCCC"> compared with the other</font>

234
00:13:37,869 --> 00:13:46,089
systems so and next when we when we<font color="#CCCCCC"> have</font>

235
00:13:43,720 --> 00:13:49,509
our<font color="#E5E5E5"> symbolize the local tag so when we</font>

236
00:13:46,089 --> 00:13:51,819
do the lift at the<font color="#E5E5E5"> the aisle</font><font color="#CCCCCC"> sisqó like</font>

237
00:13:49,509 --> 00:13:57,249
a<font color="#E5E5E5"> reader right receive and send this</font>

238
00:13:51,819 --> 00:13:59,559
<font color="#E5E5E5">course so we shift our our</font><font color="#CCCCCC"> tags from</font>

239
00:13:57,249 --> 00:14:03,819
from the global scope to the<font color="#E5E5E5"> local scope</font>

240
00:13:59,559 --> 00:14:05,649
<font color="#E5E5E5">and then we perform that analysis and</font>

241
00:14:03,819 --> 00:14:08,979
then when we get the<font color="#E5E5E5"> results so we ship</font>

242
00:14:05,649 --> 00:14:15,459
them<font color="#E5E5E5"> back and then we update our global</font>

243
00:14:08,980 --> 00:14:17,439
tag map so still<font color="#E5E5E5"> that we need to link</font>

244
00:14:15,459 --> 00:14:20,589
the tag up corrugation between the two

245
00:14:17,439 --> 00:14:23,949
hosts via the socket communication so

246
00:14:20,589 --> 00:14:27,339
currently we support both the<font color="#CCCCCC"> TCP</font><font color="#E5E5E5"> and</font>

247
00:14:23,949 --> 00:14:30,758
<font color="#E5E5E5">UDP packets with the tag with this tag</font>

248
00:14:27,339 --> 00:14:34,089
<font color="#E5E5E5">Association but in</font><font color="#CCCCCC"> different</font><font color="#E5E5E5"> ways so in</font>

249
00:14:30,759 --> 00:14:36,490
the<font color="#CCCCCC"> tcp that because it's</font><font color="#E5E5E5"> it preserved</font>

250
00:14:34,089 --> 00:14:38,319
the order of the tank the<font color="#E5E5E5"> stream so we</font>

251
00:14:36,490 --> 00:14:42,339
use a counter based approach and for the

252
00:14:38,319 --> 00:14:45,128
UDP<font color="#CCCCCC"> we use a tag tag embedding a based</font>

253
00:14:42,339 --> 00:14:51,279
approach because it can there<font color="#CCCCCC"> can be a</font>

254
00:14:45,129 --> 00:14:56,439
data losses<font color="#E5E5E5"> that that the</font><font color="#CCCCCC"> tag of</font>

255
00:14:51,279 --> 00:14:59,049
<font color="#E5E5E5">propagation can be lost so</font><font color="#CCCCCC"> forth</font><font color="#E5E5E5"> so for</font>

256
00:14:56,439 --> 00:15:03,490
for the<font color="#E5E5E5"> TCP</font><font color="#CCCCCC"> the data stream at</font><font color="#E5E5E5"> the</font>

257
00:14:59,049 --> 00:15:06,699
center at and the receiver can can be

258
00:15:03,490 --> 00:15:09,040
<font color="#E5E5E5">not aligned</font><font color="#CCCCCC"> so they can</font><font color="#E5E5E5"> spend</font><font color="#CCCCCC"> over</font>

259
00:15:06,699 --> 00:15:11,319
different<font color="#E5E5E5"> numbers of a Cisco's for</font>

260
00:15:09,040 --> 00:15:15,569
example here<font color="#CCCCCC"> that there are three senses</font>

261
00:15:11,319 --> 00:15:18,610
<font color="#CCCCCC">cause</font><font color="#E5E5E5"> and sending these totally these 15</font>

262
00:15:15,569 --> 00:15:22,420
bytes of data<font color="#E5E5E5"> and at the receiving side</font>

263
00:15:18,610 --> 00:15:25,990
there<font color="#E5E5E5"> there are</font><font color="#CCCCCC"> four reads so our</font>

264
00:15:22,420 --> 00:15:30,519
<font color="#E5E5E5">approach is to track the</font><font color="#CCCCCC"> data stream</font><font color="#E5E5E5"> in</font>

265
00:15:25,990 --> 00:15:32,559
one sock<font color="#E5E5E5"> at TCP socket session so</font><font color="#CCCCCC"> that</font>

266
00:15:30,519 --> 00:15:37,749
<font color="#CCCCCC">we can know which has been sent</font><font color="#E5E5E5"> and</font>

267
00:15:32,559 --> 00:15:40,829
which has<font color="#E5E5E5"> been received accordingly so</font>

268
00:15:37,749 --> 00:15:44,579
<font color="#E5E5E5">for the UDP case that because</font><font color="#CCCCCC"> it's</font>

269
00:15:40,829 --> 00:15:49,979
<font color="#E5E5E5">Datagram transmission so we use</font><font color="#CCCCCC"> that</font>

270
00:15:44,579 --> 00:15:53,969
embedding approach so we<font color="#E5E5E5"> implement the</font>

271
00:15:49,980 --> 00:15:57,779
tag<font color="#E5E5E5"> embedding routine at the in the in</font>

272
00:15:53,970 --> 00:15:59,879
<font color="#CCCCCC">kernel soccer handling stack</font><font color="#E5E5E5"> before</font><font color="#CCCCCC"> the</font>

273
00:15:57,779 --> 00:16:01,679
checksum has been computed<font color="#CCCCCC"> and at the</font>

274
00:15:59,879 --> 00:16:08,839
receiving<font color="#E5E5E5"> side</font><font color="#CCCCCC"> is before the checksum</font>

275
00:16:01,679 --> 00:16:12,689
has been verified so here<font color="#E5E5E5"> that our so</font>

276
00:16:08,839 --> 00:16:15,239
when we compute the data flow in each

277
00:16:12,689 --> 00:16:19,980
<font color="#E5E5E5">dip that task so we combine these</font>

278
00:16:15,239 --> 00:16:23,129
results<font color="#E5E5E5"> into our tag overlay on top of</font>

279
00:16:19,980 --> 00:16:26,369
the classical<font color="#E5E5E5"> prominence graph and then</font>

280
00:16:23,129 --> 00:16:30,569
we<font color="#CCCCCC"> get</font><font color="#E5E5E5"> to the final result</font><font color="#CCCCCC"> so here this</font>

281
00:16:26,369 --> 00:16:35,269
<font color="#E5E5E5">example</font><font color="#CCCCCC"> our running example</font><font color="#E5E5E5"> gets the</font>

282
00:16:30,569 --> 00:16:36,899
results for for each data flow in each

283
00:16:35,269 --> 00:16:40,799
if the task

284
00:16:36,899 --> 00:16:43,850
<font color="#E5E5E5">it's from for</font><font color="#CCCCCC"> example from the the file</font>

285
00:16:40,799 --> 00:16:46,199
the file a there<font color="#E5E5E5"> are two versions</font>

286
00:16:43,850 --> 00:16:48,959
consecutively from from the two

287
00:16:46,199 --> 00:16:53,689
temporary<font color="#E5E5E5"> files B and C and then further</font>

288
00:16:48,959 --> 00:16:59,479
that we can backtrack<font color="#E5E5E5"> till the</font><font color="#CCCCCC"> till</font><font color="#E5E5E5"> its</font>

289
00:16:53,689 --> 00:16:59,480
original file<font color="#CCCCCC"> E which is</font><font color="#E5E5E5"> our SSH key</font>

290
00:17:03,799 --> 00:17:13,230
okay so we have implemented our our

291
00:17:08,750 --> 00:17:16,049
attack system<font color="#E5E5E5"> and the country iran's buh</font>

292
00:17:13,230 --> 00:17:18,510
buh sound<font color="#CCCCCC"> open to how a terrible force</font>

293
00:17:16,049 --> 00:17:20,730
<font color="#E5E5E5">so do two bit and then 64-bit</font><font color="#CCCCCC"> and which</font>

294
00:17:18,510 --> 00:17:23,459
we use<font color="#E5E5E5"> live D of T as the diff top</font>

295
00:17:20,730 --> 00:17:26,610
<font color="#CCCCCC">obligation engine also</font><font color="#E5E5E5"> supports</font><font color="#CCCCCC"> Saudi</font>

296
00:17:23,459 --> 00:17:28,860
<font color="#CCCCCC">tupid and a 64-bit King publication and</font>

297
00:17:26,609 --> 00:17:31,080
it<font color="#E5E5E5"> uses a new</font><font color="#CCCCCC"> foe</font><font color="#E5E5E5"> J for the graph</font><font color="#CCCCCC"> based</font>

298
00:17:28,860 --> 00:17:37,049
<font color="#E5E5E5">reachability analysis and</font><font color="#CCCCCC"> if we use</font>

299
00:17:31,080 --> 00:17:39,889
<font color="#CCCCCC">possible</font><font color="#E5E5E5"> so Q for</font><font color="#CCCCCC"> the tag storage so</font><font color="#E5E5E5"> in</font>

300
00:17:37,049 --> 00:17:43,850
the evaluation<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we focused on three</font>

301
00:17:39,889 --> 00:17:48,870
aspects<font color="#E5E5E5"> the effectiveness the</font><font color="#CCCCCC"> DNR says</font>

302
00:17:43,850 --> 00:17:51,449
overhead and our runtime<font color="#E5E5E5"> overhead so</font>

303
00:17:48,870 --> 00:17:54,449
along with the kid porn<font color="#E5E5E5"> running example</font>

304
00:17:51,450 --> 00:17:57,270
<font color="#E5E5E5">we also evaluated in the so in the</font>

305
00:17:54,450 --> 00:17:58,410
different settings<font color="#CCCCCC"> in including the</font>

306
00:17:57,270 --> 00:18:01,320
<font color="#E5E5E5">server and client</font>

307
00:17:58,410 --> 00:18:03,570
setting with the<font color="#CCCCCC"> firefox browser at the</font>

308
00:18:01,320 --> 00:18:06,870
client-side<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Apache server at the</font>

309
00:18:03,570 --> 00:18:12,990
server side with<font color="#CCCCCC"> to SQL injection cases</font>

310
00:18:06,870 --> 00:18:14,489
and we also have the<font color="#CCCCCC"> CSI case</font><font color="#E5E5E5"> also in</font>

311
00:18:12,990 --> 00:18:18,000
the server and<font color="#E5E5E5"> client</font>

312
00:18:14,490 --> 00:18:21,710
setting and the<font color="#E5E5E5"> one cross-site scripting</font>

313
00:18:18,000 --> 00:18:25,980
<font color="#CCCCCC">and also that we we use a peer-to-peer</font>

314
00:18:21,710 --> 00:18:29,130
<font color="#CCCCCC">case with</font><font color="#E5E5E5"> six hosts and we and and we</font>

315
00:18:25,980 --> 00:18:33,120
<font color="#CCCCCC">used the Nutella</font><font color="#E5E5E5"> peer-to-peer</font><font color="#CCCCCC"> file</font>

316
00:18:29,130 --> 00:18:36,210
<font color="#CCCCCC">sharing protocol to evaluate our system</font>

317
00:18:33,120 --> 00:18:38,850
so<font color="#E5E5E5"> when we do these curious so we find</font>

318
00:18:36,210 --> 00:18:41,070
that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can accurately</font><font color="#E5E5E5"> recover that the</font>

319
00:18:38,850 --> 00:18:46,280
exact data<font color="#E5E5E5"> flow across these different</font>

320
00:18:41,070 --> 00:18:50,370
hosts and this is our analysis time

321
00:18:46,280 --> 00:18:52,710
reduction compared with the other cases

322
00:18:50,370 --> 00:18:57,300
when<font color="#CCCCCC"> D and when the analysis is all</font>

323
00:18:52,710 --> 00:19:02,190
civilized<font color="#E5E5E5"> so it can reach up</font><font color="#CCCCCC"> to 90% of</font>

324
00:18:57,300 --> 00:19:06,180
<font color="#E5E5E5">the reduction</font><font color="#CCCCCC"> and the runtime</font><font color="#E5E5E5"> overhead</font>

325
00:19:02,190 --> 00:19:09,870
so we<font color="#E5E5E5"> round up a spec CPU</font><font color="#CCCCCC"> a 2006</font>

326
00:19:06,180 --> 00:19:16,860
<font color="#E5E5E5">benchmark and the</font><font color="#CCCCCC"> main of the runtime</font>

327
00:19:09,870 --> 00:19:18,929
overhead is less than<font color="#E5E5E5"> 5%</font><font color="#CCCCCC"> and we also</font>

328
00:19:16,860 --> 00:19:21,419
<font color="#E5E5E5">reduce</font><font color="#CCCCCC"> the memory cost</font>

329
00:19:18,930 --> 00:19:25,230
compared with<font color="#E5E5E5"> the previous system</font>

330
00:19:21,420 --> 00:19:30,750
including Titan and D<font color="#CCCCCC"> checker</font><font color="#E5E5E5"> with 50 to</font>

331
00:19:25,230 --> 00:19:33,720
<font color="#E5E5E5">99</font><font color="#CCCCCC"> percent and actually that the there</font>

332
00:19:30,750 --> 00:19:36,360
are<font color="#E5E5E5"> two cases</font><font color="#CCCCCC"> that the Titan</font><font color="#E5E5E5"> could not</font>

333
00:19:33,720 --> 00:19:40,680
complete in the<font color="#E5E5E5"> Firefox and opportun</font>

334
00:19:36,360 --> 00:19:42,929
<font color="#E5E5E5">case and also we evaluated at the impact</font>

335
00:19:40,680 --> 00:19:47,160
<font color="#E5E5E5">that</font><font color="#CCCCCC"> ood</font><font color="#E5E5E5"> to our network performance</font>

336
00:19:42,930 --> 00:19:50,130
including the bandwidth<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> RTT so</font>

337
00:19:47,160 --> 00:19:56,480
for the Penguins<font color="#E5E5E5"> we have zero point less</font>

338
00:19:50,130 --> 00:19:56,480
than<font color="#CCCCCC"> 0.5 percent</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the reduction and</font>

339
00:19:56,570 --> 00:20:07,560
<font color="#CCCCCC">for the RTT our impact is less than 0.05</font>

340
00:20:01,890 --> 00:20:10,140
percent so include so in conclusion our

341
00:20:07,560 --> 00:20:12,480
our attack enables the cross<font color="#CCCCCC"> host</font>

342
00:20:10,140 --> 00:20:15,730
<font color="#E5E5E5">refundable attack</font>

343
00:20:12,480 --> 00:20:18,190
investigation<font color="#E5E5E5"> and it decouples the tag</font>

344
00:20:15,730 --> 00:20:19,600
<font color="#E5E5E5">dependency from the replay that</font><font color="#CCCCCC"> IFTA so</font>

345
00:20:18,190 --> 00:20:23,260
they can be put<font color="#E5E5E5"> in parallel and</font>

346
00:20:19,600 --> 00:20:26,969
independently<font color="#E5E5E5"> and also it</font><font color="#CCCCCC"> improves</font><font color="#E5E5E5"> that</font>

347
00:20:23,260 --> 00:20:30,879
<font color="#CCCCCC">the memory costing in depth analysis so</font>

348
00:20:26,970 --> 00:20:33,700
the<font color="#E5E5E5"> runtime overhead is less than</font><font color="#CCCCCC"> five</font>

349
00:20:30,880 --> 00:20:35,830
<font color="#CCCCCC">percent and a hugely reduces the</font>

350
00:20:33,700 --> 00:20:38,590
analysis time cost and<font color="#E5E5E5"> the memory cost</font>

351
00:20:35,830 --> 00:20:52,570
<font color="#E5E5E5">so this concludes my talk and I</font><font color="#CCCCCC"> welcome</font>

352
00:20:38,590 --> 00:20:56,080
any<font color="#E5E5E5"> question thank you any questions</font><font color="#CCCCCC"> so</font>

353
00:20:52,570 --> 00:20:58,090
one question<font color="#E5E5E5"> that I had in the case of</font>

354
00:20:56,080 --> 00:21:00,850
the<font color="#CCCCCC"> the UDP where you're embedding tags</font>

355
00:20:58,090 --> 00:21:02,110
in the packets<font color="#E5E5E5"> what's to prevent an</font>

356
00:21:00,850 --> 00:21:04,209
attacker or sitting on<font color="#E5E5E5"> the network</font>

357
00:21:02,110 --> 00:21:08,350
stripping those tags away so that<font color="#CCCCCC"> you</font>

358
00:21:04,210 --> 00:21:12,820
can't do the tracking<font color="#E5E5E5"> anymore so our so</font>

359
00:21:08,350 --> 00:21:15,699
<font color="#E5E5E5">our current model is that we</font><font color="#CCCCCC"> don't</font>

360
00:21:12,820 --> 00:21:22,350
<font color="#E5E5E5">assume that the attacker can compromise</font>

361
00:21:15,700 --> 00:21:25,960
<font color="#CCCCCC">kuno</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> if if if the</font><font color="#E5E5E5"> attacker</font>

362
00:21:22,350 --> 00:21:28,959
compromises<font color="#E5E5E5"> other packets on the wrong</font>

363
00:21:25,960 --> 00:21:30,820
<font color="#CCCCCC">currently</font><font color="#E5E5E5"> currently we</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have we</font>

364
00:21:28,960 --> 00:21:34,480
don't cover this part but<font color="#CCCCCC"> I think it can</font>

365
00:21:30,820 --> 00:21:37,320
be<font color="#CCCCCC"> done through through the adding some</font>

366
00:21:34,480 --> 00:21:43,990
<font color="#E5E5E5">of the hash</font><font color="#CCCCCC"> and a verification</font><font color="#E5E5E5"> scheme</font>

367
00:21:37,320 --> 00:21:46,770
<font color="#E5E5E5">okay any</font><font color="#CCCCCC"> other questions not let's thank</font>

368
00:21:43,990 --> 00:21:46,770
the speaker one more<font color="#E5E5E5"> time</font>

