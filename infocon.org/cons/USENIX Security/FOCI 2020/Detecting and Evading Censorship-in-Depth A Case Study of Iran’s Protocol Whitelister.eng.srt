1
00:00:08,720 --> 00:00:09,519
hey everyone

2
00:00:09,519 --> 00:00:11,200
my name is kevin from the university of

3
00:00:11,200 --> 00:00:13,040
maryland i just wanted to thank all of

4
00:00:13,040 --> 00:00:14,719
the focai organizers for making this

5
00:00:14,719 --> 00:00:15,679
event possible

6
00:00:15,679 --> 00:00:18,240
despite everything going on now today

7
00:00:18,240 --> 00:00:19,840
i'm going to be talking about a new form

8
00:00:19,840 --> 00:00:21,680
of censorship we discovered recently in

9
00:00:21,680 --> 00:00:22,960
iran

10
00:00:22,960 --> 00:00:24,800
now iran has already had a highly

11
00:00:24,800 --> 00:00:26,880
sophisticated censorship system

12
00:00:26,880 --> 00:00:29,039
we have a user in iran trying to make a

13
00:00:29,039 --> 00:00:30,320
forbidden request

14
00:00:30,320 --> 00:00:32,000
the sensor has already had the capacity

15
00:00:32,000 --> 00:00:34,239
to censor multiple different protocols

16
00:00:34,239 --> 00:00:38,160
dns http https it can do so with deep

17
00:00:38,160 --> 00:00:40,079
packet inspection for keywords host

18
00:00:40,079 --> 00:00:41,760
names etc

19
00:00:41,760 --> 00:00:43,520
it can inject dummy responses or black

20
00:00:43,520 --> 00:00:45,920
hole traffic and it applies basically to

21
00:00:45,920 --> 00:00:48,239
all destinations leaving iran

22
00:00:48,239 --> 00:00:49,920
now outside the scope of this paper in

23
00:00:49,920 --> 00:00:51,600
the past we had developed a tool called

24
00:00:51,600 --> 00:00:54,079
geneva that automatically discovers ways

25
00:00:54,079 --> 00:00:56,079
to evade network censorship

26
00:00:56,079 --> 00:00:57,440
and while running experiments in

27
00:00:57,440 --> 00:00:59,680
february this past year we noticed

28
00:00:59,680 --> 00:01:00,719
something strange

29
00:01:00,719 --> 00:01:03,120
we noticed that evasion strategies that

30
00:01:03,120 --> 00:01:05,199
had worked not one to two weeks prior

31
00:01:05,199 --> 00:01:07,600
no longer worked we started seeing

32
00:01:07,600 --> 00:01:09,439
strange behavior coming from the sensor

33
00:01:09,439 --> 00:01:10,960
so specifically instead of getting

34
00:01:10,960 --> 00:01:13,119
censored after we sent keywords

35
00:01:13,119 --> 00:01:15,040
we started noticing censorship happening

36
00:01:15,040 --> 00:01:18,080
before we had even sent keywords

37
00:01:18,080 --> 00:01:19,759
instead of getting dummy responses from

38
00:01:19,759 --> 00:01:21,520
the sensor we just started seeing a lot

39
00:01:21,520 --> 00:01:23,840
of packet drops

40
00:01:23,840 --> 00:01:25,680
and really confusing this instead of

41
00:01:25,680 --> 00:01:26,960
this happening to all of our vantage

42
00:01:26,960 --> 00:01:28,320
points with uniformity

43
00:01:28,320 --> 00:01:30,000
we're only seeing this happen to some

44
00:01:30,000 --> 00:01:31,840
destinations

45
00:01:31,840 --> 00:01:33,280
after looking into this more in running

46
00:01:33,280 --> 00:01:35,119
experiments what we determined is that

47
00:01:35,119 --> 00:01:36,880
iran has actually deployed a second

48
00:01:36,880 --> 00:01:38,560
censorship system

49
00:01:38,560 --> 00:01:40,159
which is used in conjunction with the

50
00:01:40,159 --> 00:01:41,759
standard censorship and we've been

51
00:01:41,759 --> 00:01:43,920
calling this a protocol filter

52
00:01:43,920 --> 00:01:45,680
now at a high level the protocol filter

53
00:01:45,680 --> 00:01:47,520
matches connections it sees leaving iran

54
00:01:47,520 --> 00:01:49,200
to protocol fingerprints

55
00:01:49,200 --> 00:01:50,799
and any connections that it does not

56
00:01:50,799 --> 00:01:53,119
recognize it just drops

57
00:01:53,119 --> 00:01:54,479
now this only applies to some

58
00:01:54,479 --> 00:01:57,119
destinations and altogether this

59
00:01:57,119 --> 00:02:00,320
this creates censorship in depth in iran

60
00:02:00,320 --> 00:02:02,079
now in this talk i'm going to discuss

61
00:02:02,079 --> 00:02:03,680
how the protocol filter works

62
00:02:03,680 --> 00:02:05,280
how it fingerprints connections how it

63
00:02:05,280 --> 00:02:06,799
sensors connections

64
00:02:06,799 --> 00:02:08,399
just other mechanics of how it works

65
00:02:08,399 --> 00:02:10,399
under the hood in the second half i'm

66
00:02:10,399 --> 00:02:11,680
going to discuss ways that it can be

67
00:02:11,680 --> 00:02:12,319
defeated

68
00:02:12,319 --> 00:02:14,000
and specifically packet manipulation

69
00:02:14,000 --> 00:02:15,680
strategies we discovered

70
00:02:15,680 --> 00:02:17,440
that work from either the client or the

71
00:02:17,440 --> 00:02:20,000
server side using our tool genita

72
00:02:20,000 --> 00:02:22,080
so first let's talk about how the

73
00:02:22,080 --> 00:02:23,120
protocol filter

74
00:02:23,120 --> 00:02:25,760
fingerprints connections the protocol

75
00:02:25,760 --> 00:02:27,520
filter performs deep packet inspection

76
00:02:27,520 --> 00:02:29,280
on packets leaving iran

77
00:02:29,280 --> 00:02:32,640
the filter only monitors tcp udp packets

78
00:02:32,640 --> 00:02:34,879
they're not monitored by the filter

79
00:02:34,879 --> 00:02:37,120
the filter only allows three protocols

80
00:02:37,120 --> 00:02:37,920
dns

81
00:02:37,920 --> 00:02:41,360
hdp and htgps and the filter is only

82
00:02:41,360 --> 00:02:43,280
active on ports 53

83
00:02:43,280 --> 00:02:45,840
80 and 443 these are the ports commonly

84
00:02:45,840 --> 00:02:47,599
associated with these protocols

85
00:02:47,599 --> 00:02:49,440
what this means is that you can use any

86
00:02:49,440 --> 00:02:51,280
other protocol you wish on other ports

87
00:02:51,280 --> 00:02:52,800
these are the only ports

88
00:02:52,800 --> 00:02:54,560
that as of today as the time of this

89
00:02:54,560 --> 00:02:56,319
presentation the protocol

90
00:02:56,319 --> 00:02:58,720
filter is monitoring now i'll note that

91
00:02:58,720 --> 00:03:00,400
the protocol filter does not actually

92
00:03:00,400 --> 00:03:02,319
associate each of these protocols to its

93
00:03:02,319 --> 00:03:03,840
corresponding ports

94
00:03:03,840 --> 00:03:06,159
you can use any of these protocols on

95
00:03:06,159 --> 00:03:07,280
any of these ports

96
00:03:07,280 --> 00:03:09,040
but no other protocols besides these

97
00:03:09,040 --> 00:03:10,720
three can be used and these can be used

98
00:03:10,720 --> 00:03:12,480
in these ports

99
00:03:12,480 --> 00:03:15,120
so let's look more at these fingerprints

100
00:03:15,120 --> 00:03:17,440
and what these look like

101
00:03:17,440 --> 00:03:18,879
in the paper we actually reverse

102
00:03:18,879 --> 00:03:20,720
engineer the precise fingerprint that

103
00:03:20,720 --> 00:03:22,400
the protocol filter matches for each of

104
00:03:22,400 --> 00:03:23,599
these protocols

105
00:03:23,599 --> 00:03:24,879
i unfortunately don't have time to

106
00:03:24,879 --> 00:03:26,720
discuss all of them today

107
00:03:26,720 --> 00:03:30,319
so let's just look at dns so the dns

108
00:03:30,319 --> 00:03:32,080
fingerprint has five requirements

109
00:03:32,080 --> 00:03:34,000
for packets for in order for it to match

110
00:03:34,000 --> 00:03:35,120
the fingerprint

111
00:03:35,120 --> 00:03:36,799
the first requirement is that the tcp

112
00:03:36,799 --> 00:03:38,959
payload of the packet must be at least

113
00:03:38,959 --> 00:03:41,440
12 bytes long after this there are some

114
00:03:41,440 --> 00:03:42,879
qualifications about the structure of

115
00:03:42,879 --> 00:03:43,760
dns itself

116
00:03:43,760 --> 00:03:45,440
the query response field must be set to

117
00:03:45,440 --> 00:03:47,280
zero the question count must be less

118
00:03:47,280 --> 00:03:48,319
than 15

119
00:03:48,319 --> 00:03:50,640
and the answer count must be zero and

120
00:03:50,640 --> 00:03:51,360
finally just

121
00:03:51,360 --> 00:03:53,599
generically it must have a valid dns

122
00:03:53,599 --> 00:03:55,760
over udp header structure

123
00:03:55,760 --> 00:03:57,920
and violating any of these requirements

124
00:03:57,920 --> 00:03:59,360
effectively immediately results in

125
00:03:59,360 --> 00:04:02,239
censorship from the protocol filter

126
00:04:02,239 --> 00:04:03,360
now i'm going to talk a little bit more

127
00:04:03,360 --> 00:04:04,799
about this last bullet now because it's

128
00:04:04,799 --> 00:04:06,159
not a typo

129
00:04:06,159 --> 00:04:08,319
you actually truly must have a valid dns

130
00:04:08,319 --> 00:04:10,159
over udp header

131
00:04:10,159 --> 00:04:12,080
but recall that the filter is only

132
00:04:12,080 --> 00:04:14,799
actually active over tcp connections

133
00:04:14,799 --> 00:04:17,358
so it only will ever see dns over tcp

134
00:04:17,358 --> 00:04:18,478
packets

135
00:04:18,478 --> 00:04:19,918
now the problem with this is that the

136
00:04:19,918 --> 00:04:21,680
structure of dns actually

137
00:04:21,680 --> 00:04:24,880
changes when it's used over tcp and the

138
00:04:24,880 --> 00:04:26,240
way it does that is there's an addition

139
00:04:26,240 --> 00:04:27,840
of a length field at the front of the

140
00:04:27,840 --> 00:04:28,800
header

141
00:04:28,800 --> 00:04:31,440
as a consequence normal dns over tcp

142
00:04:31,440 --> 00:04:32,240
packets

143
00:04:32,240 --> 00:04:35,360
actually violate the fingerprint for dns

144
00:04:35,360 --> 00:04:37,280
the iranian dns fingerprinter is

145
00:04:37,280 --> 00:04:39,120
incapable of matching

146
00:04:39,120 --> 00:04:42,240
valid dns over tcp packets

147
00:04:42,240 --> 00:04:44,320
now this seems crazy and the reason this

148
00:04:44,320 --> 00:04:45,759
hasn't actually caused a significant

149
00:04:45,759 --> 00:04:47,040
issue in iran

150
00:04:47,040 --> 00:04:48,800
is specific to how the protocol filters

151
00:04:48,800 --> 00:04:50,320
sensors connections and i'll talk about

152
00:04:50,320 --> 00:04:52,400
that more in a minute

153
00:04:52,400 --> 00:04:54,160
this is just one example of issues we

154
00:04:54,160 --> 00:04:56,080
discovered in the protocol fingerprints

155
00:04:56,080 --> 00:04:57,360
how we discovered some issue with

156
00:04:57,360 --> 00:04:58,639
basically all of them

157
00:04:58,639 --> 00:05:00,000
and the details for each of these are in

158
00:05:00,000 --> 00:05:02,400
the paper so now that we've established

159
00:05:02,400 --> 00:05:03,520
how it fingerprints

160
00:05:03,520 --> 00:05:06,479
the next question is how does it sensor

161
00:05:06,479 --> 00:05:08,560
so the filter drops all packets from the

162
00:05:08,560 --> 00:05:08,960
client

163
00:05:08,960 --> 00:05:10,400
here we have the client about to make a

164
00:05:10,400 --> 00:05:12,639
request over a forbidden protocol

165
00:05:12,639 --> 00:05:15,120
over a monitored port the protocol

166
00:05:15,120 --> 00:05:17,039
filter monitors this request

167
00:05:17,039 --> 00:05:18,720
and it will recognize that it's not

168
00:05:18,720 --> 00:05:21,199
allowed but it does not drop it yet

169
00:05:21,199 --> 00:05:23,120
does deepak inspection sees that it's

170
00:05:23,120 --> 00:05:24,960
not okay but it doesn't drop it the

171
00:05:24,960 --> 00:05:27,039
packet actually gets through

172
00:05:27,039 --> 00:05:28,800
what it does is it drops all packets

173
00:05:28,800 --> 00:05:30,320
from the client after

174
00:05:30,320 --> 00:05:32,240
the first non-matching packet so the

175
00:05:32,240 --> 00:05:34,400
second packet after it's been triggered

176
00:05:34,400 --> 00:05:36,479
data carrying if it does not match

177
00:05:36,479 --> 00:05:39,520
it will now get dropped and we believe

178
00:05:39,520 --> 00:05:41,120
this is the case

179
00:05:41,120 --> 00:05:42,960
so the filter could be more tolerant to

180
00:05:42,960 --> 00:05:45,039
packet reordering it allows either of

181
00:05:45,039 --> 00:05:47,039
the first two packets it sees

182
00:05:47,039 --> 00:05:49,280
to match the fingerprint this is

183
00:05:49,280 --> 00:05:51,039
actually why dns over tcp

184
00:05:51,039 --> 00:05:53,440
doesn't seem broken in iran right now

185
00:05:53,440 --> 00:05:55,039
because there's typically no second

186
00:05:55,039 --> 00:05:58,000
data carrying packet from the client the

187
00:05:58,000 --> 00:05:59,280
filter is not

188
00:05:59,280 --> 00:06:01,360
bi-directional unlike iran's regular

189
00:06:01,360 --> 00:06:02,639
censorship system

190
00:06:02,639 --> 00:06:04,840
so the response from the server is

191
00:06:04,840 --> 00:06:06,240
unaffected

192
00:06:06,240 --> 00:06:08,319
it only monitors packets leaving iran

193
00:06:08,319 --> 00:06:10,560
and only affects packets leaving iran

194
00:06:10,560 --> 00:06:12,000
what this means is even after the

195
00:06:12,000 --> 00:06:13,600
protocol filter has been triggered

196
00:06:13,600 --> 00:06:15,840
the server is still free to send packets

197
00:06:15,840 --> 00:06:16,960
to the client

198
00:06:16,960 --> 00:06:19,199
basically unimpeded the client will just

199
00:06:19,199 --> 00:06:20,000
be unable to

200
00:06:20,000 --> 00:06:22,400
acknowledge or send any data back to the

201
00:06:22,400 --> 00:06:23,600
server

202
00:06:23,600 --> 00:06:25,360
as a consequence of this this new

203
00:06:25,360 --> 00:06:27,199
censorship system actually requires

204
00:06:27,199 --> 00:06:29,759
vantage points inside of iran to study

205
00:06:29,759 --> 00:06:31,280
this is a pretty significant limitation

206
00:06:31,280 --> 00:06:33,039
to researchers you can't just you can no

207
00:06:33,039 --> 00:06:34,880
longer probe it from outside the country

208
00:06:34,880 --> 00:06:38,560
and see this behavior now there are more

209
00:06:38,560 --> 00:06:40,400
details in the paper about the mechanics

210
00:06:40,400 --> 00:06:42,080
of how the protocol filter works how we

211
00:06:42,080 --> 00:06:43,600
discuss the full fingerprints each of

212
00:06:43,600 --> 00:06:44,960
these connections

213
00:06:44,960 --> 00:06:46,639
we perform some brief experiments of who

214
00:06:46,639 --> 00:06:48,240
the protocol filters sensors since it

215
00:06:48,240 --> 00:06:49,039
doesn't affect

216
00:06:49,039 --> 00:06:51,919
all destinations equally we study how

217
00:06:51,919 --> 00:06:53,919
many packets the sensor monitors we find

218
00:06:53,919 --> 00:06:55,280
it just looks at the first two data

219
00:06:55,280 --> 00:06:56,400
carrying packets

220
00:06:56,400 --> 00:06:58,400
and how long it remembers an offending

221
00:06:58,400 --> 00:07:00,319
flow it's about 60 seconds but that

222
00:07:00,319 --> 00:07:02,080
timer resets with every packet in the

223
00:07:02,080 --> 00:07:04,080
flow

224
00:07:04,080 --> 00:07:05,520
so next i'm going to talk about how the

225
00:07:05,520 --> 00:07:07,280
filter can be defeated

226
00:07:07,280 --> 00:07:09,120
so in order to do this we applied a tool

227
00:07:09,120 --> 00:07:10,479
we'd built in the past

228
00:07:10,479 --> 00:07:13,520
geneva now geneva is a genetic algorithm

229
00:07:13,520 --> 00:07:16,319
it discovers ways to manipulate packets

230
00:07:16,319 --> 00:07:18,240
such that it defeats censorship

231
00:07:18,240 --> 00:07:19,759
these are specifically ways either the

232
00:07:19,759 --> 00:07:21,360
client or the sensor

233
00:07:21,360 --> 00:07:23,120
can change its packet stream such that

234
00:07:23,120 --> 00:07:24,800
the sensor is unable to censor the

235
00:07:24,800 --> 00:07:26,319
connection without harming the original

236
00:07:26,319 --> 00:07:28,080
connection itself

237
00:07:28,080 --> 00:07:30,400
so geneva strategies apply just from one

238
00:07:30,400 --> 00:07:32,720
side of the connection

239
00:07:32,720 --> 00:07:33,919
if you want to learn more i encourage

240
00:07:33,919 --> 00:07:35,199
you to check out our website i'll link

241
00:07:35,199 --> 00:07:36,319
to it at the end

242
00:07:36,319 --> 00:07:38,400
or the citation is in this is in the

243
00:07:38,400 --> 00:07:39,759
slide

244
00:07:39,759 --> 00:07:41,360
so we we wrote a fitness function for

245
00:07:41,360 --> 00:07:43,360
geneva such that it could run against

246
00:07:43,360 --> 00:07:45,440
and create new censorship evasion

247
00:07:45,440 --> 00:07:48,240
strategies for the protocol filter

248
00:07:48,240 --> 00:07:50,400
and i'm going to talk about those now so

249
00:07:50,400 --> 00:07:51,919
the first one geneva discovered was

250
00:07:51,919 --> 00:07:54,000
injecting an innocuous fingerprint

251
00:07:54,000 --> 00:07:56,080
so here's again our client about to make

252
00:07:56,080 --> 00:07:58,400
an outbound forbidden request geneva's

253
00:07:58,400 --> 00:08:00,319
going to catch that packet

254
00:08:00,319 --> 00:08:02,560
and we'll make two of them out of it and

255
00:08:02,560 --> 00:08:04,319
to the first one what it does is it

256
00:08:04,319 --> 00:08:05,919
sticks a load on there

257
00:08:05,919 --> 00:08:08,400
to create a benign http request so get

258
00:08:08,400 --> 00:08:09,199
requests for

259
00:08:09,199 --> 00:08:12,560
example.com for example but specifically

260
00:08:12,560 --> 00:08:14,720
it breaks the check sum of this packet

261
00:08:14,720 --> 00:08:16,560
so when this gets sent the protocol

262
00:08:16,560 --> 00:08:18,080
filter will see this and it will see

263
00:08:18,080 --> 00:08:20,080
that it matches the fingerprint

264
00:08:20,080 --> 00:08:21,440
so once we've got an approval for the

265
00:08:21,440 --> 00:08:23,120
protocol filter it will green light the

266
00:08:23,120 --> 00:08:24,800
rest of the flow

267
00:08:24,800 --> 00:08:26,560
now because this is a broken checksum

268
00:08:26,560 --> 00:08:28,080
when it gets to the server the server

269
00:08:28,080 --> 00:08:29,919
simply drops the packet

270
00:08:29,919 --> 00:08:32,000
now at this point the client is free to

271
00:08:32,000 --> 00:08:33,919
communicate with its original protocol

272
00:08:33,919 --> 00:08:35,360
the protocol filter already thinks

273
00:08:35,360 --> 00:08:37,120
things are okay so it stopped checking

274
00:08:37,120 --> 00:08:39,599
fingerprints and the server already

275
00:08:39,599 --> 00:08:40,159
dropped

276
00:08:40,159 --> 00:08:42,799
our the packet for this strategy now we

277
00:08:42,799 --> 00:08:44,159
actually found three such strategies

278
00:08:44,159 --> 00:08:45,519
that work from the client

279
00:08:45,519 --> 00:08:47,600
um and i'll talk about each of these so

280
00:08:47,600 --> 00:08:50,080
the first is this innocuous request

281
00:08:50,080 --> 00:08:51,680
where you just send some innocuous

282
00:08:51,680 --> 00:08:53,279
requests with the broken checksum after

283
00:08:53,279 --> 00:08:54,800
the three-way handshake

284
00:08:54,800 --> 00:08:56,480
this doesn't actually have to be http

285
00:08:56,480 --> 00:08:59,680
this works with dns or https as well

286
00:08:59,680 --> 00:09:01,279
the second strategy we found is a little

287
00:09:01,279 --> 00:09:03,120
stranger a little it seems odd that it

288
00:09:03,120 --> 00:09:04,000
works

289
00:09:04,000 --> 00:09:06,399
but before the client does it's through

290
00:09:06,399 --> 00:09:07,360
a handshake

291
00:09:07,360 --> 00:09:09,920
it sends two thin packets and this is

292
00:09:09,920 --> 00:09:11,120
sufficient to make the

293
00:09:11,120 --> 00:09:12,560
protocol filter ignore the rest of the

294
00:09:12,560 --> 00:09:15,200
connection now the last strategy we

295
00:09:15,200 --> 00:09:16,080
found is likely

296
00:09:16,080 --> 00:09:18,880
is the strangest in my opinion while the

297
00:09:18,880 --> 00:09:20,320
client is completing the thruway

298
00:09:20,320 --> 00:09:21,279
handshake

299
00:09:21,279 --> 00:09:23,360
instead of sending one ack packet

300
00:09:23,360 --> 00:09:25,519
instead it sends nine of them

301
00:09:25,519 --> 00:09:27,120
and this alone is sufficient to make the

302
00:09:27,120 --> 00:09:28,240
whitelister ignore the rest of the

303
00:09:28,240 --> 00:09:29,279
connection

304
00:09:29,279 --> 00:09:30,959
now we hypothesize this works because

305
00:09:30,959 --> 00:09:32,320
there's some internal limit on the

306
00:09:32,320 --> 00:09:33,760
number of packets the whitelister will

307
00:09:33,760 --> 00:09:34,959
process

308
00:09:34,959 --> 00:09:37,040
but all of these work with 100

309
00:09:37,040 --> 00:09:38,800
reliability across all of our vantage

310
00:09:38,800 --> 00:09:40,320
points

311
00:09:40,320 --> 00:09:41,519
and next i'm going to talk about

312
00:09:41,519 --> 00:09:42,959
server-side evasion so instead of

313
00:09:42,959 --> 00:09:44,480
deploying geneva at the client

314
00:09:44,480 --> 00:09:46,560
we instead deployed it at the server and

315
00:09:46,560 --> 00:09:48,480
this allows us to subvert the protocol

316
00:09:48,480 --> 00:09:50,320
filter from outside of iran without

317
00:09:50,320 --> 00:09:53,600
requiring any client-side modifications

318
00:09:53,600 --> 00:09:55,200
we actually found a strategy that works

319
00:09:55,200 --> 00:09:56,880
for this so during the three-way

320
00:09:56,880 --> 00:09:58,399
handshake what the server does is it

321
00:09:58,399 --> 00:09:58,800
sends

322
00:09:58,800 --> 00:10:01,279
nine synack packets with incorrect

323
00:10:01,279 --> 00:10:02,800
acknowledgement numbers before sending

324
00:10:02,800 --> 00:10:04,399
the original one

325
00:10:04,399 --> 00:10:06,240
the effect this has on the client is it

326
00:10:06,240 --> 00:10:07,760
induces the client

327
00:10:07,760 --> 00:10:11,360
to send nine resets um these nine reset

328
00:10:11,360 --> 00:10:12,399
is now enough

329
00:10:12,399 --> 00:10:14,560
to push the connection push the the

330
00:10:14,560 --> 00:10:15,680
number of packets the

331
00:10:15,680 --> 00:10:18,240
white the protocol filter has to process

332
00:10:18,240 --> 00:10:19,600
over the limit

333
00:10:19,600 --> 00:10:21,600
and just like that the protocol filter

334
00:10:21,600 --> 00:10:24,160
will ignore the rest of the connection

335
00:10:24,160 --> 00:10:25,760
so in total here are the four strategies

336
00:10:25,760 --> 00:10:27,120
you identified to defeat the white

337
00:10:27,120 --> 00:10:27,920
lister

338
00:10:27,920 --> 00:10:29,519
the particle filter and all these are in

339
00:10:29,519 --> 00:10:31,600
our paper

340
00:10:31,600 --> 00:10:32,880
so that's just about all the time i have

341
00:10:32,880 --> 00:10:34,800
today for this talk i look forward to

342
00:10:34,800 --> 00:10:35,600
discussing this

343
00:10:35,600 --> 00:10:37,600
more with all of you at the conference

344
00:10:37,600 --> 00:10:47,839
thank you

345
00:10:48,160 --> 00:10:50,240
you

