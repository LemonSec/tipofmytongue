1
00:00:08,800 --> 00:00:10,320
hello everyone

2
00:00:10,320 --> 00:00:13,040
and welcome to our presentation of a new

3
00:00:13,040 --> 00:00:15,200
privacy first system

4
00:00:15,200 --> 00:00:17,359
designed to provide anonymity by

5
00:00:17,359 --> 00:00:18,240
mimicking

6
00:00:18,240 --> 00:00:21,439
your ip address nowadays

7
00:00:21,439 --> 00:00:22,960
almost all communication over the

8
00:00:22,960 --> 00:00:24,800
internet is encrypted

9
00:00:24,800 --> 00:00:26,720
but ip addresses are still visible to

10
00:00:26,720 --> 00:00:27,920
eavesdroppers

11
00:00:27,920 --> 00:00:30,480
and may leak sensitive information an

12
00:00:30,480 --> 00:00:31,279
adversary

13
00:00:31,279 --> 00:00:33,680
might use this information to identify

14
00:00:33,680 --> 00:00:34,480
clients

15
00:00:34,480 --> 00:00:38,239
to build profiles or even censor content

16
00:00:38,239 --> 00:00:40,480
fortunately there already exists some

17
00:00:40,480 --> 00:00:41,440
solutions for

18
00:00:41,440 --> 00:00:44,239
hiding your ip address network layer

19
00:00:44,239 --> 00:00:45,760
anonymity systems

20
00:00:45,760 --> 00:00:48,079
provide strong privacy guarantees but

21
00:00:48,079 --> 00:00:50,879
they face some deployment challenges

22
00:00:50,879 --> 00:00:53,120
some systems may require extension

23
00:00:53,120 --> 00:00:56,160
extensive modifications to the internet

24
00:00:56,160 --> 00:00:59,760
others like tor and spine require the

25
00:00:59,760 --> 00:01:01,520
cooperation of multiple autonomous

26
00:01:01,520 --> 00:01:02,079
systems

27
00:01:02,079 --> 00:01:05,119
along the path another class of

28
00:01:05,119 --> 00:01:06,240
solutions

29
00:01:06,240 --> 00:01:08,320
like the address heading protocol are

30
00:01:08,320 --> 00:01:09,760
coarse-grained

31
00:01:09,760 --> 00:01:11,200
while they can continue the client's ip

32
00:01:11,200 --> 00:01:13,760
address they work at the flow level

33
00:01:13,760 --> 00:01:16,240
and are susceptible to traffic analysis

34
00:01:16,240 --> 00:01:18,400
attacks

35
00:01:18,400 --> 00:01:21,600
our goal is to design a system that can

36
00:01:21,600 --> 00:01:23,280
provide ipv address mixing

37
00:01:23,280 --> 00:01:26,640
that is both fine-grained and flexible

38
00:01:26,640 --> 00:01:28,960
the properties we desire are to let

39
00:01:28,960 --> 00:01:30,400
clients

40
00:01:30,400 --> 00:01:32,799
change their ip address rapidly to

41
00:01:32,799 --> 00:01:35,840
provide a sort of anonymity in the crowd

42
00:01:35,840 --> 00:01:37,439
clients should also be able to change

43
00:01:37,439 --> 00:01:39,600
their ip address anytime

44
00:01:39,600 --> 00:01:42,240
without breaking their connection these

45
00:01:42,240 --> 00:01:44,000
properties can be useful in a number of

46
00:01:44,000 --> 00:01:45,200
scenarios

47
00:01:45,200 --> 00:01:47,280
let's consider one censorship

48
00:01:47,280 --> 00:01:49,840
circumvention

49
00:01:49,840 --> 00:01:52,240
now suppose alice wanted to access a

50
00:01:52,240 --> 00:01:54,240
censored website

51
00:01:54,240 --> 00:01:56,560
sensor also blocks the tor entry node's

52
00:01:56,560 --> 00:01:58,000
ip address

53
00:01:58,000 --> 00:02:00,799
so alice decides to use torque pt which

54
00:02:00,799 --> 00:02:02,799
behaves essentially like a proxy to the

55
00:02:02,799 --> 00:02:04,079
entry node

56
00:02:04,079 --> 00:02:06,399
unfortunately for ls the sensor can

57
00:02:06,399 --> 00:02:09,360
still identify that alice is using tor

58
00:02:09,360 --> 00:02:11,599
based on the first few packets of her

59
00:02:11,599 --> 00:02:12,720
communication

60
00:02:12,720 --> 00:02:15,599
and blocks packets from her ip address

61
00:02:15,599 --> 00:02:16,640
now

62
00:02:16,640 --> 00:02:18,400
if alice were to change her ip address

63
00:02:18,400 --> 00:02:21,120
in the middle of communication

64
00:02:21,120 --> 00:02:24,000
she can avoid the sensor and access the

65
00:02:24,000 --> 00:02:26,560
censored website

66
00:02:26,560 --> 00:02:28,959
but how will she change your ip address

67
00:02:28,959 --> 00:02:30,800
at first glance this seems difficult

68
00:02:30,800 --> 00:02:33,360
if not impossible if alice were using

69
00:02:33,360 --> 00:02:34,480
tcp

70
00:02:34,480 --> 00:02:36,959
the current cornerstone of the internet

71
00:02:36,959 --> 00:02:38,879
she would break her ongoing connection

72
00:02:38,879 --> 00:02:41,200
and have to re-establish it defeating

73
00:02:41,200 --> 00:02:43,920
the purpose of changing her ip address

74
00:02:43,920 --> 00:02:46,319
but if she were using quick the rising

75
00:02:46,319 --> 00:02:47,920
star of the internet

76
00:02:47,920 --> 00:02:51,440
this might be doable so what is quick

77
00:02:51,440 --> 00:02:53,360
quick is a communication protocol

78
00:02:53,360 --> 00:02:55,760
recently developed by google

79
00:02:55,760 --> 00:02:58,080
it's still in development but it's

80
00:02:58,080 --> 00:03:00,959
seeing increased adoption

81
00:03:00,959 --> 00:03:03,040
over half of chrome traffic to google

82
00:03:03,040 --> 00:03:05,760
servers is already in quick

83
00:03:05,760 --> 00:03:08,319
http 3 which will come out in a few

84
00:03:08,319 --> 00:03:09,120
years

85
00:03:09,120 --> 00:03:12,239
will use quick quick offers a whole host

86
00:03:12,239 --> 00:03:13,680
of new features

87
00:03:13,680 --> 00:03:16,640
but the key feature mimik uses is its ip

88
00:03:16,640 --> 00:03:18,720
address migration

89
00:03:18,720 --> 00:03:21,360
quick allows a client to change the ip

90
00:03:21,360 --> 00:03:22,720
address

91
00:03:22,720 --> 00:03:26,000
without re-establishing the connection

92
00:03:26,000 --> 00:03:28,239
but this alone is not enough there are a

93
00:03:28,239 --> 00:03:32,000
few other problems we have to address

94
00:03:32,000 --> 00:03:35,599
there's a problem of address collision

95
00:03:35,599 --> 00:03:37,599
how can we ensure that different clients

96
00:03:37,599 --> 00:03:39,360
do not use the same ip address

97
00:03:39,360 --> 00:03:41,599
at the same time there's also the

98
00:03:41,599 --> 00:03:43,120
problem of routing

99
00:03:43,120 --> 00:03:46,239
how do we send traffic back to a client

100
00:03:46,239 --> 00:03:49,040
that now has a different ip address

101
00:03:49,040 --> 00:03:51,920
before we talk about these challenges

102
00:03:51,920 --> 00:03:54,959
let's first discuss the threat model in

103
00:03:54,959 --> 00:03:55,840
our threat model

104
00:03:55,840 --> 00:03:58,319
we have a number of clients connected to

105
00:03:58,319 --> 00:04:00,159
the trusted network

106
00:04:00,159 --> 00:04:02,400
client run a mimic agent which can

107
00:04:02,400 --> 00:04:04,400
configure the host's ip address

108
00:04:04,400 --> 00:04:07,920
and talk to the network we also have a

109
00:04:07,920 --> 00:04:10,560
passive adversary which may observe all

110
00:04:10,560 --> 00:04:12,319
traffic between the trusted network and

111
00:04:12,319 --> 00:04:14,720
the server

112
00:04:14,720 --> 00:04:16,560
the adversary may also control some

113
00:04:16,560 --> 00:04:18,079
clients on the trusted network

114
00:04:18,079 --> 00:04:21,519
and view all data available to them

115
00:04:21,519 --> 00:04:23,199
we also stipulate that the server may

116
00:04:23,199 --> 00:04:26,560
not collude with the adversary

117
00:04:26,560 --> 00:04:28,400
our privacy goals with the with this

118
00:04:28,400 --> 00:04:30,800
system are to make discovering the

119
00:04:30,800 --> 00:04:33,120
identity of the client more difficult

120
00:04:33,120 --> 00:04:35,199
and to provide a stronger resilience

121
00:04:35,199 --> 00:04:37,919
against traffic analysis attacks

122
00:04:37,919 --> 00:04:40,240
to do this we provide a property called

123
00:04:40,240 --> 00:04:42,080
client unlinkability

124
00:04:42,080 --> 00:04:44,000
essentially an adversary should not be

125
00:04:44,000 --> 00:04:45,680
able to link packets

126
00:04:45,680 --> 00:04:49,360
to a particular client the key factor in

127
00:04:49,360 --> 00:04:50,080
achieving this

128
00:04:50,080 --> 00:04:51,600
once again is quick's handling of

129
00:04:51,600 --> 00:04:54,639
encryption and its migration features

130
00:04:54,639 --> 00:04:56,320
so let's talk about these challenges

131
00:04:56,320 --> 00:04:58,320
some more the challenges of address

132
00:04:58,320 --> 00:05:00,000
collision and bargaining

133
00:05:00,000 --> 00:05:03,199
to start to solve these problems mimik

134
00:05:03,199 --> 00:05:06,400
has three key features

135
00:05:06,479 --> 00:05:08,560
there's a client agent which runs in the

136
00:05:08,560 --> 00:05:10,479
client's machine and there is the

137
00:05:10,479 --> 00:05:11,600
allocation server

138
00:05:11,600 --> 00:05:13,919
which runs on the trusted network

139
00:05:13,919 --> 00:05:14,880
together

140
00:05:14,880 --> 00:05:16,560
these solve the problem of address

141
00:05:16,560 --> 00:05:19,919
collisions there's also the edge switch

142
00:05:19,919 --> 00:05:21,600
which sits at the edge of the trusted

143
00:05:21,600 --> 00:05:24,000
network and connects to the wider

144
00:05:24,000 --> 00:05:27,280
internet this switch solves the problem

145
00:05:27,280 --> 00:05:29,759
of routing

146
00:05:29,759 --> 00:05:31,199
so let's talk more about address

147
00:05:31,199 --> 00:05:33,840
collisions one simple solution

148
00:05:33,840 --> 00:05:36,080
might be to let clients generate their

149
00:05:36,080 --> 00:05:38,000
own ip addresses

150
00:05:38,000 --> 00:05:40,240
but to do this effectively might require

151
00:05:40,240 --> 00:05:42,720
cryptographic operations

152
00:05:42,720 --> 00:05:44,240
but this comes with a significant

153
00:05:44,240 --> 00:05:45,919
computational overhead

154
00:05:45,919 --> 00:05:48,320
furthermore adversaries might be able to

155
00:05:48,320 --> 00:05:49,199
predict

156
00:05:49,199 --> 00:05:51,360
which ip addresses will be generated if

157
00:05:51,360 --> 00:05:55,039
they have access to certain clients

158
00:05:55,600 --> 00:05:58,080
how mimik approaches this problem is to

159
00:05:58,080 --> 00:05:59,199
have an agent

160
00:05:59,199 --> 00:06:02,319
run on the client's host which talks to

161
00:06:02,319 --> 00:06:03,919
the allocation server

162
00:06:03,919 --> 00:06:06,720
and retrieves ip addresses it can modify

163
00:06:06,720 --> 00:06:08,240
the client's ip address and trigger

164
00:06:08,240 --> 00:06:10,479
connection migrations

165
00:06:10,479 --> 00:06:11,919
we also have an address allocation

166
00:06:11,919 --> 00:06:14,880
server that runs on the trusted network

167
00:06:14,880 --> 00:06:17,680
most edge networks have address servers

168
00:06:17,680 --> 00:06:20,560
such as dhcp servers so this is not

169
00:06:20,560 --> 00:06:22,960
unusual at all

170
00:06:22,960 --> 00:06:24,720
one important benefit of this setup is

171
00:06:24,720 --> 00:06:26,400
that i require it requires no

172
00:06:26,400 --> 00:06:27,199
cryptographic

173
00:06:27,199 --> 00:06:30,000
operations furthermore it makes it

174
00:06:30,000 --> 00:06:31,759
difficult for the adversary

175
00:06:31,759 --> 00:06:33,520
to predict which ip addresses will be

176
00:06:33,520 --> 00:06:35,039
used

177
00:06:35,039 --> 00:06:38,160
we also randomly assign a lifetime to ip

178
00:06:38,160 --> 00:06:39,360
addresses

179
00:06:39,360 --> 00:06:41,360
a client starts using an ip address at

180
00:06:41,360 --> 00:06:42,880
the end of its lifetime

181
00:06:42,880 --> 00:06:45,120
and after a delay the ip address is

182
00:06:45,120 --> 00:06:46,160
recycled

183
00:06:46,160 --> 00:06:48,000
and assigned to a different client

184
00:06:48,000 --> 00:06:50,800
perhaps even at the same time

185
00:06:50,800 --> 00:06:53,440
the other challenge we face is the

186
00:06:53,440 --> 00:06:56,240
routing challenge

187
00:06:56,479 --> 00:06:58,960
to solve this we assign a switch

188
00:06:58,960 --> 00:07:02,639
identifier to each client facing switch

189
00:07:02,639 --> 00:07:05,759
each switch has a unique and fixed sid

190
00:07:05,759 --> 00:07:08,240
which is embedded in the ip addresses

191
00:07:08,240 --> 00:07:10,960
assigned to its clients

192
00:07:10,960 --> 00:07:13,039
the allocation server also maintains a

193
00:07:13,039 --> 00:07:14,240
routing table

194
00:07:14,240 --> 00:07:17,360
of these sids in the edge switch this

195
00:07:17,360 --> 00:07:19,360
allows us to drastically reduce the size

196
00:07:19,360 --> 00:07:20,960
of the forwarding table

197
00:07:20,960 --> 00:07:23,199
on the edge switch instead of

198
00:07:23,199 --> 00:07:25,120
maintaining an a mapping

199
00:07:25,120 --> 00:07:27,280
of each client's ip address the edge

200
00:07:27,280 --> 00:07:29,039
switch only needs to keep track of these

201
00:07:29,039 --> 00:07:31,360
sids

202
00:07:31,360 --> 00:07:35,199
here's a quick example of our writing

203
00:07:35,199 --> 00:07:38,560
system we have a mimic agent running on

204
00:07:38,560 --> 00:07:39,759
the client

205
00:07:39,759 --> 00:07:42,160
in the event of a connection migration

206
00:07:42,160 --> 00:07:44,560
the agent sends an ipa request

207
00:07:44,560 --> 00:07:47,039
to the allocation server the allocation

208
00:07:47,039 --> 00:07:49,039
server generates a new ip address

209
00:07:49,039 --> 00:07:52,879
and embeds the sid into this address

210
00:07:52,879 --> 00:07:54,720
it sends the ip address back to the

211
00:07:54,720 --> 00:07:57,199
mimic agent which changes the client's

212
00:07:57,199 --> 00:07:59,280
ip address and triggers connection

213
00:07:59,280 --> 00:08:00,400
migration

214
00:08:00,400 --> 00:08:03,360
meanwhile the allocation server updates

215
00:08:03,360 --> 00:08:04,400
the routing table

216
00:08:04,400 --> 00:08:07,280
on the edge switch when the network

217
00:08:07,280 --> 00:08:08,240
receives return

218
00:08:08,240 --> 00:08:11,599
traffic all the edge switch must do is

219
00:08:11,599 --> 00:08:14,400
get the sid from the packet and forward

220
00:08:14,400 --> 00:08:15,120
the packet

221
00:08:15,120 --> 00:08:17,919
to the corresponding switch the switch

222
00:08:17,919 --> 00:08:19,360
then forwards the packet to the correct

223
00:08:19,360 --> 00:08:21,680
client

224
00:08:22,479 --> 00:08:24,840
let's now talk about quick's connection

225
00:08:24,840 --> 00:08:27,039
migration

226
00:08:27,039 --> 00:08:28,960
quix connection migration migration

227
00:08:28,960 --> 00:08:31,039
process involves sending a relatively

228
00:08:31,039 --> 00:08:32,320
small token

229
00:08:32,320 --> 00:08:35,360
for path validation which does have some

230
00:08:35,360 --> 00:08:36,559
overhead

231
00:08:36,559 --> 00:08:38,719
but this token is encrypted and looks

232
00:08:38,719 --> 00:08:40,719
indistinguishable from data

233
00:08:40,719 --> 00:08:42,880
furthermore quick provides some measure

234
00:08:42,880 --> 00:08:44,480
of unlinkability across connection

235
00:08:44,480 --> 00:08:46,160
migrations

236
00:08:46,160 --> 00:08:48,399
packets have connection ids but

237
00:08:48,399 --> 00:08:49,920
endpoints are required to use a new

238
00:08:49,920 --> 00:08:52,800
connection id after migration

239
00:08:52,800 --> 00:08:54,720
furthermore the negotiation of these

240
00:08:54,720 --> 00:08:56,560
connection ids is encrypted

241
00:08:56,560 --> 00:08:59,200
so an adversary cannot tell which

242
00:08:59,200 --> 00:09:00,560
connection id will be used after

243
00:09:00,560 --> 00:09:02,560
migration

244
00:09:02,560 --> 00:09:04,160
quick also requires that congestion

245
00:09:04,160 --> 00:09:05,600
control be reset

246
00:09:05,600 --> 00:09:08,560
in the event of a migration this is

247
00:09:08,560 --> 00:09:10,480
important because an adversary cannot

248
00:09:10,480 --> 00:09:11,519
use

249
00:09:11,519 --> 00:09:14,080
the congestion control window to track a

250
00:09:14,080 --> 00:09:16,240
client across migrations

251
00:09:16,240 --> 00:09:18,000
but this might have an impact on

252
00:09:18,000 --> 00:09:19,360
performance

253
00:09:19,360 --> 00:09:22,240
to measure this we set up an experiment

254
00:09:22,240 --> 00:09:24,880
with a single client and a single server

255
00:09:24,880 --> 00:09:26,720
we use no allocation server because we

256
00:09:26,720 --> 00:09:28,480
only wanted to test

257
00:09:28,480 --> 00:09:32,160
the performance impact of migration

258
00:09:32,480 --> 00:09:34,320
we had multiple bonds of the experiment

259
00:09:34,320 --> 00:09:36,640
and in each run the client sent 1000

260
00:09:36,640 --> 00:09:37,920
requests

261
00:09:37,920 --> 00:09:40,880
to download the index.html file of

262
00:09:40,880 --> 00:09:42,720
example.com

263
00:09:42,720 --> 00:09:44,480
the thousand requests together added up

264
00:09:44,480 --> 00:09:48,320
to about 2.7 megabytes

265
00:09:48,320 --> 00:09:50,240
across these runs we change the number

266
00:09:50,240 --> 00:09:51,360
of migrations

267
00:09:51,360 --> 00:09:53,279
as well as the propagation delay in the

268
00:09:53,279 --> 00:09:54,480
network

269
00:09:54,480 --> 00:09:57,839
here's a summary of our results

270
00:09:57,839 --> 00:10:00,959
on the x-axis you see the number of

271
00:10:00,959 --> 00:10:02,959
migrations per hundred packets

272
00:10:02,959 --> 00:10:06,000
and on the y-axis you see the throughput

273
00:10:06,000 --> 00:10:09,200
measured in kbps

274
00:10:09,920 --> 00:10:11,360
each curve represents a different

275
00:10:11,360 --> 00:10:13,680
propagation delay and each point in the

276
00:10:13,680 --> 00:10:14,160
graph

277
00:10:14,160 --> 00:10:16,079
represents a throughput for that

278
00:10:16,079 --> 00:10:18,000
particular frequency of migration

279
00:10:18,000 --> 00:10:20,720
and that particular publication delay as

280
00:10:20,720 --> 00:10:21,519
you'll notice

281
00:10:21,519 --> 00:10:23,040
the performance penalty becomes less

282
00:10:23,040 --> 00:10:26,079
severe as propagation delay increases

283
00:10:26,079 --> 00:10:28,800
for example for a round trip time of 50

284
00:10:28,800 --> 00:10:30,720
milliseconds

285
00:10:30,720 --> 00:10:33,519
only ten percent penalty for a migration

286
00:10:33,519 --> 00:10:34,480
frequency

287
00:10:34,480 --> 00:10:37,920
of four essentially migrating every 25

288
00:10:37,920 --> 00:10:38,880
packets

289
00:10:38,880 --> 00:10:40,480
we believe that 50 milliseconds is a

290
00:10:40,480 --> 00:10:42,240
realistic propagation delay

291
00:10:42,240 --> 00:10:44,320
and migrating for every 25 packets

292
00:10:44,320 --> 00:10:45,519
should be enough

293
00:10:45,519 --> 00:10:48,880
to beat most attacks

294
00:10:49,120 --> 00:10:52,880
we also built a prototype using a dhcp

295
00:10:52,880 --> 00:10:55,600
off-the-shelf server for the address

296
00:10:55,600 --> 00:10:57,120
allocation

297
00:10:57,120 --> 00:10:58,800
with this prototype the client was able

298
00:10:58,800 --> 00:11:00,079
to successfully communicate with the

299
00:11:00,079 --> 00:11:01,120
server

300
00:11:01,120 --> 00:11:03,040
and perform migration multiple times

301
00:11:03,040 --> 00:11:04,800
without having to re-establish its

302
00:11:04,800 --> 00:11:05,839
connection

303
00:11:05,839 --> 00:11:08,880
in other words it worked

304
00:11:08,880 --> 00:11:11,120
in the future we hope to implement a

305
00:11:11,120 --> 00:11:11,920
prototype

306
00:11:11,920 --> 00:11:14,560
that scales to the larger networks we

307
00:11:14,560 --> 00:11:15,440
will also conduct

308
00:11:15,440 --> 00:11:17,760
a thorough security analysis and

309
00:11:17,760 --> 00:11:19,120
systematically evaluate the

310
00:11:19,120 --> 00:11:20,320
effectiveness

311
00:11:20,320 --> 00:11:22,480
of mimic against traffic analysis

312
00:11:22,480 --> 00:11:24,880
attacks

313
00:11:25,120 --> 00:11:28,079
in conclusion mimic uses quick

314
00:11:28,079 --> 00:11:30,000
connection migration features

315
00:11:30,000 --> 00:11:32,640
and some routing mobility to allow

316
00:11:32,640 --> 00:11:34,399
clients to rapidly change their ip

317
00:11:34,399 --> 00:11:36,079
address

318
00:11:36,079 --> 00:11:37,920
while minimizing the performance

319
00:11:37,920 --> 00:11:41,200
overhead and deployment barriers

320
00:11:41,200 --> 00:11:43,120
thank you for listening and please reach

321
00:11:43,120 --> 00:11:46,320
out to us if you have any follow-up

322
00:11:52,920 --> 00:11:55,920
questions

