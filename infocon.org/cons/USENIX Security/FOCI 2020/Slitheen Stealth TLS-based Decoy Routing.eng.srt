1
00:00:08,960 --> 00:00:10,480
hello everyone and welcome to my

2
00:00:10,480 --> 00:00:12,799
presentation about sleeping plus plus

3
00:00:12,799 --> 00:00:14,559
my name is benedict bertel and today i

4
00:00:14,559 --> 00:00:15,920
will show you some background about

5
00:00:15,920 --> 00:00:18,160
savine plus plus and the results of our

6
00:00:18,160 --> 00:00:19,279
evaluation

7
00:00:19,279 --> 00:00:21,600
so let's start with an introduction to

8
00:00:21,600 --> 00:00:23,519
decoy routing

9
00:00:23,519 --> 00:00:26,000
on the left side we have a client inside

10
00:00:26,000 --> 00:00:27,680
that sensor's domain that would like to

11
00:00:27,680 --> 00:00:28,880
browse the web

12
00:00:28,880 --> 00:00:31,039
we assume in this case that sensor uses

13
00:00:31,039 --> 00:00:32,880
ip-based blocking

14
00:00:32,880 --> 00:00:34,800
on the right outside of the sensor's

15
00:00:34,800 --> 00:00:36,160
domain we have two web

16
00:00:36,160 --> 00:00:39,520
servers onsensor.net can be reached by

17
00:00:39,520 --> 00:00:41,840
the censored client while tensor.com is

18
00:00:41,840 --> 00:00:45,280
on the blacklist so when the client

19
00:00:45,280 --> 00:00:47,600
tries to establish a connection to

20
00:00:47,600 --> 00:00:49,039
tender.com

21
00:00:49,039 --> 00:00:52,160
the tensor will deny the access

22
00:00:52,160 --> 00:00:54,079
without any circumvention tool the

23
00:00:54,079 --> 00:00:55,840
tensor client will never be able to

24
00:00:55,840 --> 00:00:58,239
reach tensor.com

25
00:00:58,239 --> 00:01:00,160
decoy routing can help the client to

26
00:01:00,160 --> 00:01:01,600
evade the sensor

27
00:01:01,600 --> 00:01:03,760
therefore a decoy router is placed on

28
00:01:03,760 --> 00:01:05,600
the path from the sensor to an

29
00:01:05,600 --> 00:01:06,880
unsensored target

30
00:01:06,880 --> 00:01:08,799
such that the traffic from the censored

31
00:01:08,799 --> 00:01:09,920
clients passes

32
00:01:09,920 --> 00:01:12,960
through the decoy router

33
00:01:12,960 --> 00:01:15,439
the censored client needs to install a

34
00:01:15,439 --> 00:01:17,439
special decoy routing software

35
00:01:17,439 --> 00:01:20,159
to use the decoy routing functionality

36
00:01:20,159 --> 00:01:22,400
instead of directly communicating

37
00:01:22,400 --> 00:01:24,240
with the sensor target the client's

38
00:01:24,240 --> 00:01:26,159
browser will contact the decoy routing

39
00:01:26,159 --> 00:01:27,840
software and tell it to establish a

40
00:01:27,840 --> 00:01:30,240
connection to censored.com

41
00:01:30,240 --> 00:01:32,960
the decoy router will now create attack

42
00:01:32,960 --> 00:01:35,360
connection to the uncensored target

43
00:01:35,360 --> 00:01:37,520
the attack can only be realized and read

44
00:01:37,520 --> 00:01:38,960
by the decoy router

45
00:01:38,960 --> 00:01:40,880
additionally the decoy client adds

46
00:01:40,880 --> 00:01:43,840
information about the real target

47
00:01:43,840 --> 00:01:45,600
the decoruter detects the tank and

48
00:01:45,600 --> 00:01:48,720
redirects traffic to the censored server

49
00:01:48,720 --> 00:01:52,320
downstream traffic from sensor targets

50
00:01:52,320 --> 00:01:54,720
get redirected back to the client and

51
00:01:54,720 --> 00:01:57,360
carry the ip information of unsensor.net

52
00:01:57,360 --> 00:01:59,280
tripping the sensor into believing the

53
00:01:59,280 --> 00:02:02,240
client is connected to uncensored.net

54
00:02:02,240 --> 00:02:04,640
however if the tensor uses advanced

55
00:02:04,640 --> 00:02:06,320
traffic analysis

56
00:02:06,320 --> 00:02:08,399
that uses traffic characteristics to

57
00:02:08,399 --> 00:02:10,080
fingerprint web contents

58
00:02:10,080 --> 00:02:11,680
the sensor detect that the current

59
00:02:11,680 --> 00:02:13,440
fingerprint does not match the ones of

60
00:02:13,440 --> 00:02:15,040
uncensored.net and blocks the

61
00:02:15,040 --> 00:02:16,959
communication

62
00:02:16,959 --> 00:02:19,200
to avoid this detection slave introduced

63
00:02:19,200 --> 00:02:21,040
a new idea that is based on decoy

64
00:02:21,040 --> 00:02:22,080
routing

65
00:02:22,080 --> 00:02:25,120
therefore slavin uses

66
00:02:25,120 --> 00:02:28,400
the average user simulator that contains

67
00:02:28,400 --> 00:02:29,599
a browser

68
00:02:29,599 --> 00:02:31,360
this other browser will be used to

69
00:02:31,360 --> 00:02:33,680
communicate with the uncensored over

70
00:02:33,680 --> 00:02:36,879
target it establishes http execute

71
00:02:36,879 --> 00:02:39,200
connections and exchanges data

72
00:02:39,200 --> 00:02:42,480
with the other target to enable a

73
00:02:42,480 --> 00:02:43,760
communication

74
00:02:43,760 --> 00:02:46,480
with a sensor target both the ous and

75
00:02:46,480 --> 00:02:48,640
the decoy router are extended with a

76
00:02:48,640 --> 00:02:52,879
multiplexing and the multiplexing unit

77
00:02:52,879 --> 00:02:55,519
the user browser now considered as the

78
00:02:55,519 --> 00:02:56,080
covered

79
00:02:56,080 --> 00:02:58,480
browser establishes a connection to the

80
00:02:58,480 --> 00:02:59,280
ous

81
00:02:59,280 --> 00:03:01,760
using sox5 messages to establish a

82
00:03:01,760 --> 00:03:02,800
connection

83
00:03:02,800 --> 00:03:05,440
to the censored target the multiplexer

84
00:03:05,440 --> 00:03:07,200
is responsible for inserting

85
00:03:07,200 --> 00:03:09,440
cover data into other transmissions and

86
00:03:09,440 --> 00:03:11,519
vice versa

87
00:03:11,519 --> 00:03:13,760
the connection is tagged and contains

88
00:03:13,760 --> 00:03:16,560
the client's tls key material to enable

89
00:03:16,560 --> 00:03:18,080
the relay station to decrypt

90
00:03:18,080 --> 00:03:21,280
and re-encrypt the over transmission

91
00:03:21,280 --> 00:03:24,319
the communication between ous and relay

92
00:03:24,319 --> 00:03:27,599
station now becomes a multiplex channel

93
00:03:27,599 --> 00:03:30,319
other covered upload messages will be

94
00:03:30,319 --> 00:03:33,920
attended to offered requests

95
00:03:33,920 --> 00:03:35,840
the relay station splits over and

96
00:03:35,840 --> 00:03:37,840
covered messages and forwards them to

97
00:03:37,840 --> 00:03:40,000
their individual target

98
00:03:40,000 --> 00:03:42,080
downstream traffic from the covered

99
00:03:42,080 --> 00:03:45,440
target will replace leaf content

100
00:03:45,440 --> 00:03:49,040
in other downstream messages bite-wise

101
00:03:49,040 --> 00:03:51,120
leaf contents are multimedia data like

102
00:03:51,120 --> 00:03:54,319
pictures video and audio

103
00:03:54,319 --> 00:03:56,159
although the idea of stuffing seems to

104
00:03:56,159 --> 00:03:57,680
fit the requirements of a modern

105
00:03:57,680 --> 00:03:59,040
circumvention tool

106
00:03:59,040 --> 00:04:01,120
the authors left open key challenges

107
00:04:01,120 --> 00:04:04,319
that were tackled by slavin plus plus

108
00:04:04,319 --> 00:04:06,159
the slovene upload was not stealthy

109
00:04:06,159 --> 00:04:07,360
implemented

110
00:04:07,360 --> 00:04:09,680
as it did depend covered messages to

111
00:04:09,680 --> 00:04:11,680
overt requests and thereby changed the

112
00:04:11,680 --> 00:04:13,200
overt upload behavior

113
00:04:13,200 --> 00:04:15,760
slaphene plus plus uses an http 2 header

114
00:04:15,760 --> 00:04:17,519
compression on the os

115
00:04:17,519 --> 00:04:19,839
and its counterpart on the relay station

116
00:04:19,839 --> 00:04:21,759
and uses the space gains to place

117
00:04:21,759 --> 00:04:23,759
covered upload data

118
00:04:23,759 --> 00:04:26,080
keeping the characteristics of the overt

119
00:04:26,080 --> 00:04:27,759
upload

120
00:04:27,759 --> 00:04:30,320
in a sleeping prototype no covered

121
00:04:30,320 --> 00:04:32,880
connection scheduling was implemented

122
00:04:32,880 --> 00:04:35,520
slovene stored all packets of all

123
00:04:35,520 --> 00:04:36,720
covered connections

124
00:04:36,720 --> 00:04:39,600
in a single queue for multiplexing in

125
00:04:39,600 --> 00:04:41,840
our tests this resulted in starvation of

126
00:04:41,840 --> 00:04:43,919
connections and lower performance due to

127
00:04:43,919 --> 00:04:46,160
aggressive ddos protection mechanisms

128
00:04:46,160 --> 00:04:48,479
implemented by covered targets

129
00:04:48,479 --> 00:04:50,240
we added a cube per connection and

130
00:04:50,240 --> 00:04:51,840
scheduled them based on

131
00:04:51,840 --> 00:04:54,639
either a first in first out strategy or

132
00:04:54,639 --> 00:04:57,120
a sliced round robin strategy

133
00:04:57,120 --> 00:04:59,040
the third point on the list is related

134
00:04:59,040 --> 00:05:01,280
to the ous overt page

135
00:05:01,280 --> 00:05:03,919
loading behavior which did load the

136
00:05:03,919 --> 00:05:06,400
overt page in an endless loop without a

137
00:05:06,400 --> 00:05:08,639
pause between two loads

138
00:05:08,639 --> 00:05:10,720
we think this behavior is detectable by

139
00:05:10,720 --> 00:05:11,680
our tender

140
00:05:11,680 --> 00:05:14,479
slavin plus plus added thinking time to

141
00:05:14,479 --> 00:05:16,800
add idle periods between two over page

142
00:05:16,800 --> 00:05:17,440
loads

143
00:05:17,440 --> 00:05:20,080
this leads to a chainsaw pattern in

144
00:05:20,080 --> 00:05:22,240
transmission capabilities

145
00:05:22,240 --> 00:05:25,039
as a last improvement we added crawling

146
00:05:25,039 --> 00:05:27,600
to the ous as the savine prototype did

147
00:05:27,600 --> 00:05:29,199
only load

148
00:05:29,199 --> 00:05:32,720
the same other page over and over again

149
00:05:32,720 --> 00:05:34,880
we believe that the original behavior is

150
00:05:34,880 --> 00:05:37,680
detectable as well by a sensor

151
00:05:37,680 --> 00:05:40,479
while crawling will do a better job to

152
00:05:40,479 --> 00:05:40,960
stay

153
00:05:40,960 --> 00:05:44,720
under the radar we will now

154
00:05:44,720 --> 00:05:47,039
look into the evaluation of the system

155
00:05:47,039 --> 00:05:49,120
we took 10 domains and selected three

156
00:05:49,120 --> 00:05:50,639
websites per domain as

157
00:05:50,639 --> 00:05:53,440
cover targets we tested every of these

158
00:05:53,440 --> 00:05:55,280
scenarios and various setups

159
00:05:55,280 --> 00:05:57,039
where we used different parameters of

160
00:05:57,039 --> 00:05:59,360
surfing plus plus we executed every

161
00:05:59,360 --> 00:06:02,560
scenario in every setup 10 times

162
00:06:02,560 --> 00:06:05,039
thereby we recorded the user experience

163
00:06:05,039 --> 00:06:06,240
by measuring

164
00:06:06,240 --> 00:06:08,240
the covered page loading time

165
00:06:08,240 --> 00:06:10,160
furthermore we recorded

166
00:06:10,160 --> 00:06:12,479
the covered good put and the cost in

167
00:06:12,479 --> 00:06:14,720
terms of additional delay

168
00:06:14,720 --> 00:06:18,639
for the slave forwarding operations

169
00:06:18,639 --> 00:06:21,600
let's start with the user experience on

170
00:06:21,600 --> 00:06:24,160
the left

171
00:06:26,000 --> 00:06:29,280
we can see the box plots for the covered

172
00:06:29,280 --> 00:06:35,840
page loading times for two scenarios

173
00:06:36,240 --> 00:06:39,759
in five different setups

174
00:06:44,720 --> 00:06:47,280
base is the setup without using slipping

175
00:06:47,280 --> 00:06:49,840
plus plus

176
00:06:50,479 --> 00:06:52,960
naive

177
00:06:54,639 --> 00:06:57,120
means that crawling is not enabled and

178
00:06:57,120 --> 00:06:59,599
tt

179
00:07:00,160 --> 00:07:03,520
refers to the actual thinking time used

180
00:07:03,520 --> 00:07:06,160
in essence the usage of sleeping plus

181
00:07:06,160 --> 00:07:10,479
plus decreases the user experience

182
00:07:14,639 --> 00:07:17,360
crawling can have a positive effect on

183
00:07:17,360 --> 00:07:19,360
the covered page loading time

184
00:07:19,360 --> 00:07:21,919
as indicated by the median in scenario

185
00:07:21,919 --> 00:07:24,318
0.

186
00:07:28,400 --> 00:07:30,639
this was caused by a random correlation

187
00:07:30,639 --> 00:07:33,039
between the available covered data

188
00:07:33,039 --> 00:07:35,520
and the offered multiplexing offered

189
00:07:35,520 --> 00:07:37,039
capacity

190
00:07:37,039 --> 00:07:39,599
the usage of a single second of thinking

191
00:07:39,599 --> 00:07:41,280
time decreases

192
00:07:41,280 --> 00:07:43,199
the user experience even more than

193
00:07:43,199 --> 00:07:45,840
crawling

194
00:07:56,879 --> 00:07:59,360
one second of thinking time almost

195
00:07:59,360 --> 00:08:01,360
lowered the available coverage good

196
00:08:01,360 --> 00:08:04,800
good by 50 combining crawling and

197
00:08:04,800 --> 00:08:05,599
thinking time

198
00:08:05,599 --> 00:08:08,000
also combines the stealthy advantages of

199
00:08:08,000 --> 00:08:09,759
both as well as the drawbacks and

200
00:08:09,759 --> 00:08:11,120
performance

201
00:08:11,120 --> 00:08:13,599
we now take we now talk about the

202
00:08:13,599 --> 00:08:15,840
covered good put of the multiplexed

203
00:08:15,840 --> 00:08:18,479
channel the figure shows per scenario

204
00:08:18,479 --> 00:08:20,319
and used scheduler

205
00:08:20,319 --> 00:08:27,840
the overt average bandwidth

206
00:08:28,479 --> 00:08:32,080
as well as its median

207
00:08:36,080 --> 00:08:41,839
furthermore we have a bar plot

208
00:08:44,240 --> 00:08:46,800
indicating how much of the available

209
00:08:46,800 --> 00:08:55,839
over data could have been replaced

210
00:08:57,680 --> 00:09:01,839
and how much the fiend plus was able to

211
00:09:06,839 --> 00:09:09,839
use

212
00:09:10,560 --> 00:09:13,200
first of all crawling did give us less

213
00:09:13,200 --> 00:09:14,240
covered good

214
00:09:14,240 --> 00:09:23,839
capacities than the naive ones

215
00:09:26,240 --> 00:09:28,399
this was due to fluctuations of the

216
00:09:28,399 --> 00:09:31,040
available amount of leaf content

217
00:09:31,040 --> 00:09:32,959
as you may realize from the crawling

218
00:09:32,959 --> 00:09:36,000
enabled bars

219
00:09:36,000 --> 00:09:40,160
like this like that

220
00:09:40,160 --> 00:09:42,640
the used average good put was also

221
00:09:42,640 --> 00:09:44,320
lowered

222
00:09:44,320 --> 00:09:46,720
the cause of this was primarily an

223
00:09:46,720 --> 00:09:48,720
imbalance if the interplay between the

224
00:09:48,720 --> 00:09:51,040
requesting and arrival of

225
00:09:51,040 --> 00:09:53,360
covered resources and the availability

226
00:09:53,360 --> 00:09:54,399
of rich

227
00:09:54,399 --> 00:09:58,000
offered multiplexing capacities also on

228
00:09:58,000 --> 00:09:59,360
the downstream side

229
00:09:59,360 --> 00:10:02,320
the average of overt bandwidth is higher

230
00:10:02,320 --> 00:10:04,000
than its median

231
00:10:04,000 --> 00:10:07,360
as you can see for example here and

232
00:10:07,360 --> 00:10:09,680
here

233
00:10:10,800 --> 00:10:14,000
indicating that crawling experienced

234
00:10:14,000 --> 00:10:16,839
some high over good put capacity

235
00:10:16,839 --> 00:10:19,839
outliers

236
00:10:21,120 --> 00:10:23,120
finally let's take a look at the

237
00:10:23,120 --> 00:10:24,959
additional delay calls by slavin plus

238
00:10:24,959 --> 00:10:26,640
plus forwarding operations

239
00:10:26,640 --> 00:10:28,720
both tables show in the first column the

240
00:10:28,720 --> 00:10:30,560
delay class while the second column

241
00:10:30,560 --> 00:10:32,640
shows the average percentage

242
00:10:32,640 --> 00:10:35,600
of packages overall tests done that

243
00:10:35,600 --> 00:10:37,680
encountered the specified delay

244
00:10:37,680 --> 00:10:39,760
the third column displays the maximum

245
00:10:39,760 --> 00:10:41,680
percentage of packets encountered a

246
00:10:41,680 --> 00:10:44,000
certain delay in a single test

247
00:10:44,000 --> 00:10:46,320
the last column indicates the percentage

248
00:10:46,320 --> 00:10:48,320
of setups involved

249
00:10:48,320 --> 00:10:51,120
in essence you can see that upload

250
00:10:51,120 --> 00:10:54,000
packets have a higher additional delay

251
00:10:54,000 --> 00:10:56,880
than the downstream packets nevertheless

252
00:10:56,880 --> 00:10:58,000
only a really

253
00:10:58,000 --> 00:11:00,320
small fraction of all packets has a

254
00:11:00,320 --> 00:11:02,560
really high additional delay

255
00:11:02,560 --> 00:11:05,200
the delay was caused by threats

256
00:11:05,200 --> 00:11:06,959
competing for resources

257
00:11:06,959 --> 00:11:09,200
please keep in mind that upload messages

258
00:11:09,200 --> 00:11:13,440
can cause the spawn of new threats

259
00:11:13,440 --> 00:11:16,880
although the slave plus plus software is

260
00:11:16,880 --> 00:11:19,120
a working decoy routing prototype

261
00:11:19,120 --> 00:11:21,760
it has its limitations the results in

262
00:11:21,760 --> 00:11:23,920
this work are based on a cpu-based

263
00:11:23,920 --> 00:11:25,120
implementation

264
00:11:25,120 --> 00:11:27,680
however this would never give a router

265
00:11:27,680 --> 00:11:29,760
the forwarding capacities needed to be

266
00:11:29,760 --> 00:11:31,440
used by an isp

267
00:11:31,440 --> 00:11:33,760
to get rid of this problem we think a

268
00:11:33,760 --> 00:11:35,600
protocol independent switching

269
00:11:35,600 --> 00:11:37,360
architecture implementation could solve

270
00:11:37,360 --> 00:11:38,959
it and remove the threat based

271
00:11:38,959 --> 00:11:43,120
problems encountered in our measurements

272
00:11:43,120 --> 00:11:46,079
furthermore thinking time and crawling

273
00:11:46,079 --> 00:11:48,640
reduced the user experience

274
00:11:48,640 --> 00:11:50,959
we think that crawling could be adapted

275
00:11:50,959 --> 00:11:51,920
such that other

276
00:11:51,920 --> 00:11:54,399
pages get selected by the current needs

277
00:11:54,399 --> 00:11:56,320
for covered good put

278
00:11:56,320 --> 00:11:58,240
as a last adaption i would like to

279
00:11:58,240 --> 00:12:00,720
mention that better offered applications

280
00:12:00,720 --> 00:12:03,040
such as video streaming or gaming could

281
00:12:03,040 --> 00:12:05,200
further increase the user experience as

282
00:12:05,200 --> 00:12:06,240
those will provide

283
00:12:06,240 --> 00:12:09,120
better cover good put capacities than

284
00:12:09,120 --> 00:12:11,680
browsing

285
00:12:11,680 --> 00:12:14,560
ok i would like to thank you for your

286
00:12:14,560 --> 00:12:17,040
attention

287
00:12:22,839 --> 00:12:25,600
goodbye

288
00:12:25,600 --> 00:12:27,680
you

