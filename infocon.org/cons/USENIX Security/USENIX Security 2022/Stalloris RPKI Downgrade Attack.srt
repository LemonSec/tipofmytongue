1
00:00:08,599 --> 00:00:11,580
hello everyone in this talk I will

2
00:00:11,580 --> 00:00:13,980
introduce our paper Stellaris and apekai

3
00:00:13,980 --> 00:00:17,039
downgrade attack I am done and my

4
00:00:17,039 --> 00:00:20,060
co-authors are Thomas lavacek

5
00:00:20,060 --> 00:00:24,320
Philippine and nikhail Weidner

6
00:00:25,740 --> 00:00:28,140
apekai is an infrastructure created to

7
00:00:28,140 --> 00:00:30,180
protect bgp routing from problems

8
00:00:30,180 --> 00:00:32,220
ranging from benign misconfigurations to

9
00:00:32,220 --> 00:00:35,160
prefix hijacking abeka is essentially a

10
00:00:35,160 --> 00:00:36,899
collection of distributed databases

11
00:00:36,899 --> 00:00:38,940
containing route origin authentication

12
00:00:38,940 --> 00:00:42,059
or Roa files Roa contains a network

13
00:00:42,059 --> 00:00:44,040
prefix in an autonomous system number

14
00:00:44,040 --> 00:00:46,320
that is allowed to originate that prefix

15
00:00:46,320 --> 00:00:48,840
the repositories containing Growers are

16
00:00:48,840 --> 00:00:50,640
called publication points and are

17
00:00:50,640 --> 00:00:52,500
usually hosted by entities registered

18
00:00:52,500 --> 00:00:54,420
under one of the five Regional internet

19
00:00:54,420 --> 00:00:57,120
registries this ensures that the

20
00:00:57,120 --> 00:00:59,039
publication point is reachable by anyone

21
00:00:59,039 --> 00:01:02,460
on the internet using rpkai

22
00:01:02,460 --> 00:01:04,739
this repository contains a variety of

23
00:01:04,739 --> 00:01:07,020
files but the most important ones for

24
00:01:07,020 --> 00:01:08,820
the scope of this preservation and

25
00:01:08,820 --> 00:01:11,340
research is the Manifest file and the

26
00:01:11,340 --> 00:01:14,040
rower the Manifest is the entry point of

27
00:01:14,040 --> 00:01:16,380
the publication point it is a list of

28
00:01:16,380 --> 00:01:18,840
all signed objects contained in the

29
00:01:18,840 --> 00:01:21,320
Repository

30
00:01:22,020 --> 00:01:24,299
when a client wants to protect its

31
00:01:24,299 --> 00:01:26,820
routing table using apica e it will

32
00:01:26,820 --> 00:01:28,740
install a relaying party which is a

33
00:01:28,740 --> 00:01:31,020
piece of software that queries all known

34
00:01:31,020 --> 00:01:33,360
repositories periodically and then

35
00:01:33,360 --> 00:01:35,579
validate the downloaded rows after

36
00:01:35,579 --> 00:01:37,740
validation the payload is then sent to

37
00:01:37,740 --> 00:01:39,600
bgp routers who update the routing

38
00:01:39,600 --> 00:01:43,140
tables and with the rpkai status if

39
00:01:43,140 --> 00:01:45,000
there is a valid Rover for a route the

40
00:01:45,000 --> 00:01:47,400
status becomes valid if there is a bad

41
00:01:47,400 --> 00:01:50,100
Roa the status becomes invalid which

42
00:01:50,100 --> 00:01:52,100
means that the route should be dropped

43
00:01:52,100 --> 00:01:54,960
and then there is also not found or

44
00:01:54,960 --> 00:01:57,420
unknown this status means that there is

45
00:01:57,420 --> 00:01:59,460
no raw or information for that

46
00:01:59,460 --> 00:02:01,860
particular route unfortunately rpkai

47
00:02:01,860 --> 00:02:03,780
still has some ways to go until Global

48
00:02:03,780 --> 00:02:06,299
acceptance so not found routes are also

49
00:02:06,299 --> 00:02:07,860
allowed through otherwise we will be

50
00:02:07,860 --> 00:02:11,179
cutting out most of the internet

51
00:02:11,700 --> 00:02:15,360
as a result now if bgp routers of an

52
00:02:15,360 --> 00:02:17,160
apicae protected autonomous system

53
00:02:17,160 --> 00:02:19,140
receive false advertisements that

54
00:02:19,140 --> 00:02:21,300
conflict with existing Growers they will

55
00:02:21,300 --> 00:02:24,540
be able to avoid getting those prefixes

56
00:02:24,540 --> 00:02:27,180
hijacked downgrading rpkai means that

57
00:02:27,180 --> 00:02:28,980
existing route origin protection by

58
00:02:28,980 --> 00:02:31,500
rowas is downgraded or invalidated and

59
00:02:31,500 --> 00:02:34,379
therefore prefix hijacks become possible

60
00:02:34,379 --> 00:02:36,560
again

61
00:02:36,560 --> 00:02:39,360
the picture on the right represents one

62
00:02:39,360 --> 00:02:41,879
way to downgrade rpkai via a low rate

63
00:02:41,879 --> 00:02:44,220
attack so think of our attacker as an

64
00:02:44,220 --> 00:02:45,780
entity that has registered the valid

65
00:02:45,780 --> 00:02:47,700
publication point and is therefore

66
00:02:47,700 --> 00:02:50,280
queried by all early link parties on the

67
00:02:50,280 --> 00:02:52,680
internet periodically this positioning

68
00:02:52,680 --> 00:02:56,160
allows the attacker to predict the when

69
00:02:56,160 --> 00:02:57,959
queries from specific relaying parties

70
00:02:57,959 --> 00:03:02,220
are sent and at what intervals

71
00:03:02,220 --> 00:03:04,980
having this information the attacker can

72
00:03:04,980 --> 00:03:06,780
then trigger rate limiting on different

73
00:03:06,780 --> 00:03:08,879
servers offering their services to the

74
00:03:08,879 --> 00:03:11,519
relaying party it can rate limit DNS

75
00:03:11,519 --> 00:03:13,800
name servers so and it can also overload

76
00:03:13,800 --> 00:03:17,180
the publication points themselves

77
00:03:18,360 --> 00:03:21,060
this rate limiting can prohibit the

78
00:03:21,060 --> 00:03:23,220
relaying party from connecting during

79
00:03:23,220 --> 00:03:24,659
the refresh intervals with the

80
00:03:24,659 --> 00:03:27,840
publication point and therefore uh in

81
00:03:27,840 --> 00:03:30,420
this way uh we prohibit the relaying

82
00:03:30,420 --> 00:03:32,519
party from downloading updated files

83
00:03:32,519 --> 00:03:35,360
from this publication point

84
00:03:35,360 --> 00:03:37,860
all objects in the publication Point

85
00:03:37,860 --> 00:03:40,799
have a validated time frame so they will

86
00:03:40,799 --> 00:03:43,019
eventually expire if the relaying party

87
00:03:43,019 --> 00:03:45,360
cash is not regularly updated with the

88
00:03:45,360 --> 00:03:48,659
latest objects manifests are often valid

89
00:03:48,659 --> 00:03:50,640
for a few hours or just a handful of

90
00:03:50,640 --> 00:03:54,060
days at most and they are the easiest

91
00:03:54,060 --> 00:03:58,500
file to invalidate or to wait out until

92
00:03:58,500 --> 00:04:01,200
they expire and when a manifest has

93
00:04:01,200 --> 00:04:03,599
expired the entire repository does not

94
00:04:03,599 --> 00:04:05,760
get processed anymore once objects

95
00:04:05,760 --> 00:04:08,220
expire The Roaster that these

96
00:04:08,220 --> 00:04:10,560
publication points have are no longer

97
00:04:10,560 --> 00:04:12,299
available and therefore the rpk

98
00:04:12,299 --> 00:04:14,159
parameter in the bgp routing table

99
00:04:14,159 --> 00:04:17,519
changes from valid to not found now we

100
00:04:17,519 --> 00:04:19,560
have rpkai downgrade and a prefix that

101
00:04:19,560 --> 00:04:21,918
should have raw protection is again

102
00:04:21,918 --> 00:04:25,940
vulnerable to hijacking

103
00:04:25,940 --> 00:04:28,860
here we have an optimized version of our

104
00:04:28,860 --> 00:04:31,320
low rate downgrade attack even the

105
00:04:31,320 --> 00:04:32,940
original iteration we needed to cause

106
00:04:32,940 --> 00:04:35,520
packet loss for every refresh interval

107
00:04:35,520 --> 00:04:37,860
in a precise manner with this upgrade we

108
00:04:37,860 --> 00:04:40,080
need only the cost packet loss at best

109
00:04:40,080 --> 00:04:43,020
one time at first a couple of times so

110
00:04:43,020 --> 00:04:46,199
the best scenario so this would be the

111
00:04:46,199 --> 00:04:48,360
The best scenario for the attacker and

112
00:04:48,360 --> 00:04:50,520
it works like this the victim relaying

113
00:04:50,520 --> 00:04:52,800
party connects with an attacker who owns

114
00:04:52,800 --> 00:04:55,860
a valid delegation for a publication

115
00:04:55,860 --> 00:04:58,020
point

116
00:04:58,020 --> 00:05:00,020
the attacker slows down the connection

117
00:05:00,020 --> 00:05:02,580
with the relaying party until some

118
00:05:02,580 --> 00:05:04,979
built-in timeout is hit all relaying

119
00:05:04,979 --> 00:05:06,840
parties have timeouts but these timeouts

120
00:05:06,840 --> 00:05:10,259
range from 5 minutes to 2.9 hours for

121
00:05:10,259 --> 00:05:13,020
one single connection

122
00:05:13,020 --> 00:05:15,540
this means that the attacker can extend

123
00:05:15,540 --> 00:05:17,400
the stalling of this one refresh

124
00:05:17,400 --> 00:05:19,199
interval by creating more child

125
00:05:19,199 --> 00:05:21,660
publication points the relaying part is

126
00:05:21,660 --> 00:05:23,520
going to Traverse down the attacker's

127
00:05:23,520 --> 00:05:25,440
tree and every one of these publication

128
00:05:25,440 --> 00:05:27,419
points is going to stall the relaying

129
00:05:27,419 --> 00:05:29,160
party for the maximum amount of time

130
00:05:29,160 --> 00:05:31,919
possible so for the timeout until the

131
00:05:31,919 --> 00:05:34,259
timeout hits in total the stalling time

132
00:05:34,259 --> 00:05:35,940
for the attack would be the size of the

133
00:05:35,940 --> 00:05:38,160
tree multiplied with the timeout per

134
00:05:38,160 --> 00:05:39,720
publication point

135
00:05:39,720 --> 00:05:42,300
given available resources an attacker

136
00:05:42,300 --> 00:05:44,460
can create such trees with as many nodes

137
00:05:44,460 --> 00:05:46,500
as it needs even in the hundreds or

138
00:05:46,500 --> 00:05:49,320
thousands of notes

139
00:05:49,320 --> 00:05:50,880
the point of compounding this

140
00:05:50,880 --> 00:05:54,060
compounding the stalling time is to make

141
00:05:54,060 --> 00:05:55,860
existing objects in the relaying party

142
00:05:55,860 --> 00:05:59,720
cache expire namely the Manifest and

143
00:05:59,720 --> 00:06:02,699
therefore uh make sure that the rowers

144
00:06:02,699 --> 00:06:05,400
are no longer valid and no longer sent

145
00:06:05,400 --> 00:06:09,440
over to the bgp routing table

146
00:06:09,660 --> 00:06:12,300
when the manifesto is expired this is

147
00:06:12,300 --> 00:06:14,400
what happens essentially the rpk

148
00:06:14,400 --> 00:06:18,199
protection was neutralized again

149
00:06:18,199 --> 00:06:20,580
there is a range of reasons why Arabica

150
00:06:20,580 --> 00:06:23,940
is vulnerable right now

151
00:06:23,940 --> 00:06:26,880
rate limiting in DNS while important to

152
00:06:26,880 --> 00:06:29,039
protect from denial of service attacks

153
00:06:29,039 --> 00:06:30,960
can also be exploited as a tool to

154
00:06:30,960 --> 00:06:33,240
attack a service according to our

155
00:06:33,240 --> 00:06:36,479
measurements you can see a list of the

156
00:06:36,479 --> 00:06:39,479
maximum number of packets necessary to

157
00:06:39,479 --> 00:06:42,060
trigger rate limiting across all the

158
00:06:42,060 --> 00:06:44,160
name servers for a total of 25

159
00:06:44,160 --> 00:06:47,880
publication points out of this we

160
00:06:47,880 --> 00:06:50,280
consider 21 to be vulnerable since they

161
00:06:50,280 --> 00:06:52,440
will stop sending responses at some

162
00:06:52,440 --> 00:06:54,840
point the other four only slip the

163
00:06:54,840 --> 00:06:56,699
responses meaning that an attack is Not

164
00:06:56,699 --> 00:06:59,039
Practical assuming the resolver is able

165
00:06:59,039 --> 00:07:01,979
to connect via TCP furthermore two out

166
00:07:01,979 --> 00:07:03,960
of the 21 are particularly vulnerable

167
00:07:03,960 --> 00:07:05,819
because of the very low rate limit of

168
00:07:05,819 --> 00:07:07,440
only three to four responses per second

169
00:07:07,440 --> 00:07:09,840
which is very easy for an adversary to

170
00:07:09,840 --> 00:07:12,619
trigger

171
00:07:14,280 --> 00:07:16,740
relaying party predictability is also a

172
00:07:16,740 --> 00:07:19,199
factor that enables our attack relaying

173
00:07:19,199 --> 00:07:21,120
party caches are refreshed and stable

174
00:07:21,120 --> 00:07:23,280
intervals which can be observed measured

175
00:07:23,280 --> 00:07:25,919
by any interested party in addition to

176
00:07:25,919 --> 00:07:27,780
that manifests are also easy to attack

177
00:07:27,780 --> 00:07:30,780
due to a validity time frame of less

178
00:07:30,780 --> 00:07:33,479
than 48 hours for over 70 percent of all

179
00:07:33,479 --> 00:07:36,680
manifests on the internet

180
00:07:36,900 --> 00:07:39,300
and last but not least anyone can

181
00:07:39,300 --> 00:07:41,039
instantiate the Star Wars optimized

182
00:07:41,039 --> 00:07:43,080
version of the attack as far as we can

183
00:07:43,080 --> 00:07:45,500
tell there is no limitation on how many

184
00:07:45,500 --> 00:07:47,880
times the publication Point can

185
00:07:47,880 --> 00:07:50,220
redelegate the same resources to child

186
00:07:50,220 --> 00:07:51,960
publication points

187
00:07:51,960 --> 00:07:54,560
foreign

188
00:07:56,180 --> 00:07:59,099
how to downgrade rpk protection and the

189
00:07:59,099 --> 00:08:01,500
question is how visible is this attack

190
00:08:01,500 --> 00:08:03,660
in the wild here I want to add that our

191
00:08:03,660 --> 00:08:05,759
experiments were done in a lab the

192
00:08:05,759 --> 00:08:07,440
stalled repositories that we created

193
00:08:07,440 --> 00:08:09,479
were never accessible from the outside

194
00:08:09,479 --> 00:08:11,699
and the probing for rate limit

195
00:08:11,699 --> 00:08:13,560
thresholds was done in accordance to

196
00:08:13,560 --> 00:08:16,440
best practices we communicated with DNS

197
00:08:16,440 --> 00:08:18,180
operators to find suitable property

198
00:08:18,180 --> 00:08:20,940
rates and our tests lasted for at most

199
00:08:20,940 --> 00:08:23,960
six seconds

200
00:08:24,539 --> 00:08:26,759
so the first thing that enables our

201
00:08:26,759 --> 00:08:28,500
attack is the predictability of

202
00:08:28,500 --> 00:08:30,900
virtually all RPS and we found that by

203
00:08:30,900 --> 00:08:32,580
and large all relaying parties follow

204
00:08:32,580 --> 00:08:34,380
the default refresh intervals in the

205
00:08:34,380 --> 00:08:36,479
source code and even if there are

206
00:08:36,479 --> 00:08:40,200
deviations they can be easily measured

207
00:08:40,200 --> 00:08:41,760
once an attacker sets its own

208
00:08:41,760 --> 00:08:44,520
publication point and collects uh logs

209
00:08:44,520 --> 00:08:47,880
from uh relaying party that are querying

210
00:08:47,880 --> 00:08:51,140
um the arfica infrastructure

211
00:08:51,720 --> 00:08:53,760
the infinite delegation and therefore

212
00:08:53,760 --> 00:08:55,680
massive tree of stalling publication

213
00:08:55,680 --> 00:08:58,320
points can be instantiated using

214
00:08:58,320 --> 00:09:00,120
available open source software and

215
00:09:00,120 --> 00:09:03,540
implementations there are no limits as

216
00:09:03,540 --> 00:09:07,680
far as we can tell that can avoid this

217
00:09:07,680 --> 00:09:11,040
kind of exploitation

218
00:09:11,700 --> 00:09:14,100
the amount of packets needed to trigger

219
00:09:14,100 --> 00:09:15,839
rate limiting and ensure the attack is

220
00:09:15,839 --> 00:09:17,519
successful varies for different

221
00:09:17,519 --> 00:09:20,220
scenarios scenario one two three are

222
00:09:20,220 --> 00:09:21,899
pure low rate based attacks for

223
00:09:21,899 --> 00:09:24,060
different attack parameters and the last

224
00:09:24,060 --> 00:09:27,180
one is the optimized Solaris attack to

225
00:09:27,180 --> 00:09:28,980
calculate the rate limiting effort we

226
00:09:28,980 --> 00:09:31,500
took into account the number of attempts

227
00:09:31,500 --> 00:09:33,899
to contact the name server during the

228
00:09:33,899 --> 00:09:35,519
refresh interval the time until the

229
00:09:35,519 --> 00:09:37,260
Manifest expires meaning the attack

230
00:09:37,260 --> 00:09:39,600
window the refresh interval of the

231
00:09:39,600 --> 00:09:41,580
relaying party for the next three try

232
00:09:41,580 --> 00:09:45,480
and finally how two of the most widely

233
00:09:45,480 --> 00:09:49,519
used recursive DNS resolver software

234
00:09:49,519 --> 00:09:54,600
handle retries the last column is what

235
00:09:54,600 --> 00:09:56,820
we call the overwhelming Factor o which

236
00:09:56,820 --> 00:09:58,800
is the rate of spoofed requests the

237
00:09:58,800 --> 00:10:00,480
attacker needs to send to stop the

238
00:10:00,480 --> 00:10:02,160
connection from taking place for that

239
00:10:02,160 --> 00:10:04,620
specific scenario in the following table

240
00:10:04,620 --> 00:10:07,019
we calculate the attacker's weight

241
00:10:07,019 --> 00:10:09,480
limiting effort for each scenario and we

242
00:10:09,480 --> 00:10:11,160
see that for the Solaris optimization

243
00:10:11,160 --> 00:10:14,519
the attack needs an average of 4 800

244
00:10:14,519 --> 00:10:16,740
packets per second and even in the worst

245
00:10:16,740 --> 00:10:19,620
case scenario about 100 000 packets per

246
00:10:19,620 --> 00:10:21,540
second which is still a very feasible

247
00:10:21,540 --> 00:10:26,779
and realistic uh attack capability

248
00:10:27,600 --> 00:10:30,660
so as a summary arabicae despite being

249
00:10:30,660 --> 00:10:32,700
correctly implemented by client and

250
00:10:32,700 --> 00:10:35,220
users like is still vulnerable to

251
00:10:35,220 --> 00:10:36,480
downgrade attacks and we have

252
00:10:36,480 --> 00:10:38,279
demonstrated how such an attack would

253
00:10:38,279 --> 00:10:40,860
look like and how feasible it is to do

254
00:10:40,860 --> 00:10:43,140
rate limiting and stalling of relaying

255
00:10:43,140 --> 00:10:45,300
parties has a very low entry bar it is

256
00:10:45,300 --> 00:10:46,860
neither prohibitly expensive nor

257
00:10:46,860 --> 00:10:49,079
difficult to set up existing software

258
00:10:49,079 --> 00:10:51,480
can enable this exploitation and it

259
00:10:51,480 --> 00:10:53,880
helps the attacker that their effort can

260
00:10:53,880 --> 00:10:56,040
only be detected via manual log checking

261
00:10:56,040 --> 00:10:58,560
by the relaying party administrators the

262
00:10:58,560 --> 00:11:01,140
devastating impact of the attack has is

263
00:11:01,140 --> 00:11:03,300
disproportional to its costs and its

264
00:11:03,300 --> 00:11:05,459
efficiency the adversary can downgrade

265
00:11:05,459 --> 00:11:07,560
rpk protection for a considerable chunk

266
00:11:07,560 --> 00:11:10,680
of the internet if they were to attack a

267
00:11:10,680 --> 00:11:13,980
large provider

268
00:11:13,980 --> 00:11:16,079
this is the end of my presentation thank

269
00:11:16,079 --> 00:11:17,459
you for your attention and if you have

270
00:11:17,459 --> 00:11:19,079
any questions feel free to send an email

271
00:11:19,079 --> 00:11:21,540
to me or any one of my co-authors thank

272
00:11:21,540 --> 00:11:23,660
you

