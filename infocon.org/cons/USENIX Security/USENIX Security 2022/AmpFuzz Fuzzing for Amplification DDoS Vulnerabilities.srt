1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:11,240 --> 00:00:13,799
after finishing my PhD at cisba last

3
00:00:13,799 --> 00:00:15,719
year and today I'm happy to present our

4
00:00:15,719 --> 00:00:18,180
work titled mfas fuzzing for

5
00:00:18,180 --> 00:00:20,400
amplification details vulnerabilities

6
00:00:20,400 --> 00:00:22,619
this has been joint work with my former

7
00:00:22,619 --> 00:00:24,480
colleagues at cespa Ilya grishenko now

8
00:00:24,480 --> 00:00:26,939
at UCSB and Christian Russell still at

9
00:00:26,939 --> 00:00:28,199
system

10
00:00:28,199 --> 00:00:30,840
so in an amplification distributed

11
00:00:30,840 --> 00:00:32,460
denial of service attack we have the

12
00:00:32,460 --> 00:00:33,840
attacker on the left who wants to attack

13
00:00:33,840 --> 00:00:36,480
the victim only right and to do so he

14
00:00:36,480 --> 00:00:38,760
basically picks a number of open servers

15
00:00:38,760 --> 00:00:41,219
on the open internet and then abuses two

16
00:00:41,219 --> 00:00:44,100
fundamental flaws of core IP services

17
00:00:44,100 --> 00:00:46,320
the first one being that the IP header

18
00:00:46,320 --> 00:00:48,780
is non-authenticated which means that he

19
00:00:48,780 --> 00:00:51,180
can send requests to those servers but

20
00:00:51,180 --> 00:00:52,920
spoof them so they appear to be coming

21
00:00:52,920 --> 00:00:54,899
from the victim

22
00:00:54,899 --> 00:00:57,059
and the second being that UDP the

23
00:00:57,059 --> 00:00:59,100
protocol abused here does not have a

24
00:00:59,100 --> 00:01:00,960
handshake meaning that those servers

25
00:01:00,960 --> 00:01:02,579
will immediately respond to wherever

26
00:01:02,579 --> 00:01:04,920
they think the request came from

27
00:01:04,920 --> 00:01:07,619
now to make this even worse the attacker

28
00:01:07,619 --> 00:01:09,299
can be clever about picking these

29
00:01:09,299 --> 00:01:11,280
servers and pick ones that reply with

30
00:01:11,280 --> 00:01:13,380
much much larger responses

31
00:01:13,380 --> 00:01:14,880
giving a so-called bandwidth

32
00:01:14,880 --> 00:01:16,979
amplification which is also why we call

33
00:01:16,979 --> 00:01:19,680
these systems the amplifiers and it's

34
00:01:19,680 --> 00:01:20,880
important to remember these are

35
00:01:20,880 --> 00:01:22,740
basically innocent Services they are

36
00:01:22,740 --> 00:01:26,400
just vulnerable to this floor

37
00:01:26,400 --> 00:01:28,320
a number of protocols actually do have

38
00:01:28,320 --> 00:01:29,700
this this vulnerability one common

39
00:01:29,700 --> 00:01:31,920
example is ntp the network time protocol

40
00:01:31,920 --> 00:01:34,979
which for many versions included a debug

41
00:01:34,979 --> 00:01:37,619
command called monolist which allowed

42
00:01:37,619 --> 00:01:40,079
you to send an 8 byte request and then

43
00:01:40,079 --> 00:01:41,759
receive back a list of all the systems

44
00:01:41,759 --> 00:01:43,740
the server had had contact with

45
00:01:43,740 --> 00:01:45,960
given to you in a packet of 1440 bytes

46
00:01:45,960 --> 00:01:48,180
but you own did not only get a single

47
00:01:48,180 --> 00:01:49,500
one of those packets you got up to 100

48
00:01:49,500 --> 00:01:51,540
of those packets meaning you had a

49
00:01:51,540 --> 00:01:53,340
bandwidth amplification of roughly five

50
00:01:53,340 --> 00:01:55,020
thousand

51
00:01:55,020 --> 00:01:57,540
and with flaws like this it's no wonder

52
00:01:57,540 --> 00:01:59,100
that we basically saw headlines after

53
00:01:59,100 --> 00:02:01,560
headlines of growing attack bandwidths

54
00:02:01,560 --> 00:02:04,560
with going into the terabit regions

55
00:02:04,560 --> 00:02:06,240
for example end of last year 2.4

56
00:02:06,240 --> 00:02:07,860
terabits

57
00:02:07,860 --> 00:02:09,899
and the problem behind us is basically

58
00:02:09,899 --> 00:02:12,000
we have a large amplification potential

59
00:02:12,000 --> 00:02:14,640
in the open internet and also new

60
00:02:14,640 --> 00:02:16,440
vulnerabilities which are discovered

61
00:02:16,440 --> 00:02:19,020
somewhat regularly for example cldap in

62
00:02:19,020 --> 00:02:20,120
2017

63
00:02:20,120 --> 00:02:23,340
memcached in 2018

64
00:02:23,340 --> 00:02:26,640
um another vs Discovery protocol in 2019

65
00:02:26,640 --> 00:02:29,640
however crucially all these flaws that

66
00:02:29,640 --> 00:02:31,140
we've known so far have been fought

67
00:02:31,140 --> 00:02:33,480
either through manual analysis or we

68
00:02:33,480 --> 00:02:35,340
only discovered post-mortem after we've

69
00:02:35,340 --> 00:02:37,080
seen attacks

70
00:02:37,080 --> 00:02:39,599
so our research question basically is

71
00:02:39,599 --> 00:02:41,819
can we find vulnerable protocols

72
00:02:41,819 --> 00:02:44,340
systematically and proactively before

73
00:02:44,340 --> 00:02:46,019
they're being abused

74
00:02:46,019 --> 00:02:47,700
and since we're defazing track the

75
00:02:47,700 --> 00:02:49,319
answer to this that we chose is let's

76
00:02:49,319 --> 00:02:51,480
try fuzzy

77
00:02:51,480 --> 00:02:54,420
so the basic idea of fasting is you

78
00:02:54,420 --> 00:02:57,060
generate randomly some input you execute

79
00:02:57,060 --> 00:02:58,739
a program on it and then you see whether

80
00:02:58,739 --> 00:03:00,540
it crashes and then you just repeat this

81
00:03:00,540 --> 00:03:02,640
over and over again to see whether you

82
00:03:02,640 --> 00:03:05,040
can find crashing inputs

83
00:03:05,040 --> 00:03:07,440
the state of the art is so-called

84
00:03:07,440 --> 00:03:09,120
coverage guided mutation-based gray box

85
00:03:09,120 --> 00:03:12,060
fuzzing where instead of generating your

86
00:03:12,060 --> 00:03:14,819
input randomly you start off with a set

87
00:03:14,819 --> 00:03:16,920
of seat inputs and then mutate those to

88
00:03:16,920 --> 00:03:18,659
generate variants

89
00:03:18,659 --> 00:03:20,519
and instead of executing your program

90
00:03:20,519 --> 00:03:22,500
directly you first instrument the

91
00:03:22,500 --> 00:03:24,000
program to provide you with coverage

92
00:03:24,000 --> 00:03:25,200
information

93
00:03:25,200 --> 00:03:27,300
and whenever you have a new input that

94
00:03:27,300 --> 00:03:29,700
generates new coverage exercises new

95
00:03:29,700 --> 00:03:32,280
parts of the program you add it to your

96
00:03:32,280 --> 00:03:34,260
set of seeds

97
00:03:34,260 --> 00:03:36,780
and again the goal of classic fuzzing is

98
00:03:36,780 --> 00:03:39,720
to find inputs that crash the program

99
00:03:39,720 --> 00:03:42,540
so for finding applications of course

100
00:03:42,540 --> 00:03:44,760
our goal difference instead of finding

101
00:03:44,760 --> 00:03:46,560
inputs that crash we want to find

102
00:03:46,560 --> 00:03:49,500
requests that excites large responses

103
00:03:49,500 --> 00:03:51,000
and in this talk basically I'm talking

104
00:03:51,000 --> 00:03:53,099
about how we can adapt this pipeline to

105
00:03:53,099 --> 00:03:55,080
our new Target

106
00:03:55,080 --> 00:03:56,700
at first it seems quite simple instead

107
00:03:56,700 --> 00:03:58,260
of having inputs we're not talking about

108
00:03:58,260 --> 00:03:59,940
UDP requests and instead of looking for

109
00:03:59,940 --> 00:04:01,260
crashes we're looking for large

110
00:04:01,260 --> 00:04:02,700
responses

111
00:04:02,700 --> 00:04:05,099
however to actually make this work we

112
00:04:05,099 --> 00:04:07,019
also need to add a new instrumentation

113
00:04:07,019 --> 00:04:09,239
namely we need to make our Target UDP

114
00:04:09,239 --> 00:04:10,620
aware

115
00:04:10,620 --> 00:04:13,200
and what do I mean by UDP awareness well

116
00:04:13,200 --> 00:04:15,720
a classic fuzzing Target looks somewhat

117
00:04:15,720 --> 00:04:17,399
like this we have some initialization

118
00:04:17,399 --> 00:04:20,100
then we read our input from a file or

119
00:04:20,100 --> 00:04:22,320
standard input we call some functions

120
00:04:22,320 --> 00:04:24,419
maybe some branches crash and in the end

121
00:04:24,419 --> 00:04:26,580
we just exit

122
00:04:26,580 --> 00:04:28,740
on the other hand the targets that we

123
00:04:28,740 --> 00:04:31,860
did in amphas are usually servers which

124
00:04:31,860 --> 00:04:33,780
looks something like this so they start

125
00:04:33,780 --> 00:04:34,979
off with certain initialization they

126
00:04:34,979 --> 00:04:36,780
open a socket they listen for UDP

127
00:04:36,780 --> 00:04:37,740
requests

128
00:04:37,740 --> 00:04:40,199
they maybe send some responses but

129
00:04:40,199 --> 00:04:42,240
crucially afterwards they just go back

130
00:04:42,240 --> 00:04:44,280
in the loop so we have two main

131
00:04:44,280 --> 00:04:46,139
differences on the left side we have

132
00:04:46,139 --> 00:04:48,000
inputs from files or standard input on

133
00:04:48,000 --> 00:04:49,620
the right hand side we're looking from a

134
00:04:49,620 --> 00:04:50,699
socket

135
00:04:50,699 --> 00:04:52,919
and secondly the classic tag is a one

136
00:04:52,919 --> 00:04:55,740
shop program whereas the target for mfas

137
00:04:55,740 --> 00:04:58,080
are long running servers

138
00:04:58,080 --> 00:05:00,240
and this is two problems first one

139
00:05:00,240 --> 00:05:02,040
providing input through a socket is

140
00:05:02,040 --> 00:05:03,360
timing sensitive

141
00:05:03,360 --> 00:05:06,000
and secondly well our targets do not

142
00:05:06,000 --> 00:05:07,680
terminate

143
00:05:07,680 --> 00:05:11,580
so how can we deal with these problems

144
00:05:11,580 --> 00:05:13,740
talking about the input the timeline of

145
00:05:13,740 --> 00:05:15,600
the startup of a service basically looks

146
00:05:15,600 --> 00:05:17,340
like this if we send a packet during the

147
00:05:17,340 --> 00:05:19,500
initialization well then we're sending

148
00:05:19,500 --> 00:05:21,479
it too early because the UDP socket is

149
00:05:21,479 --> 00:05:23,400
not open yet so the request will be

150
00:05:23,400 --> 00:05:26,580
dropped and fuzzing will be ineffective

151
00:05:26,580 --> 00:05:29,580
if you wait a long long time well then

152
00:05:29,580 --> 00:05:31,440
the input is received but we basically

153
00:05:31,440 --> 00:05:33,000
we've wasted a lot of time and our

154
00:05:33,000 --> 00:05:35,220
fuzzing becomes ineffective because we

155
00:05:35,220 --> 00:05:36,780
have a low throughput

156
00:05:36,780 --> 00:05:39,840
so ideally we sent the packet just about

157
00:05:39,840 --> 00:05:41,759
when the socket is opened and the

158
00:05:41,759 --> 00:05:43,919
service is ready

159
00:05:43,919 --> 00:05:45,539
and this is something fortunately that

160
00:05:45,539 --> 00:05:48,300
we can enforce with our instrumentation

161
00:05:48,300 --> 00:05:50,759
namely we can make the target notified

162
00:05:50,759 --> 00:05:52,860
the further that it's ready just by

163
00:05:52,860 --> 00:05:54,600
inserting another function that notifies

164
00:05:54,600 --> 00:05:56,100
our fuzzier that we're now ready to

165
00:05:56,100 --> 00:05:57,900
receive input and then continue the

166
00:05:57,900 --> 00:05:59,400
execution

167
00:05:59,400 --> 00:06:02,280
and this solves the first problem

168
00:06:02,280 --> 00:06:03,960
we still have this second problem though

169
00:06:03,960 --> 00:06:06,300
is that the processing does not

170
00:06:06,300 --> 00:06:08,280
terminate and this is a problem for us

171
00:06:08,280 --> 00:06:09,720
because as a father we don't know

172
00:06:09,720 --> 00:06:12,060
whether we will never receive a request

173
00:06:12,060 --> 00:06:15,240
or receive run requests or many

174
00:06:15,240 --> 00:06:18,240
however we can actually try to transform

175
00:06:18,240 --> 00:06:21,419
this into a virtual program

176
00:06:21,419 --> 00:06:23,039
how do we do this well the heuristic

177
00:06:23,039 --> 00:06:25,680
that we came up with is the following

178
00:06:25,680 --> 00:06:28,380
initially we identify all functions that

179
00:06:28,380 --> 00:06:30,780
act as a source meaning those can be

180
00:06:30,780 --> 00:06:32,880
blocking waiting for input in this

181
00:06:32,880 --> 00:06:35,160
example it's decode to receive

182
00:06:35,160 --> 00:06:37,979
secondly we identify all functions that

183
00:06:37,979 --> 00:06:40,680
I act as things that send out responses

184
00:06:40,680 --> 00:06:41,819
to us

185
00:06:41,819 --> 00:06:44,580
in this case we go to Center

186
00:06:44,580 --> 00:06:46,080
and lastly

187
00:06:46,080 --> 00:06:48,960
we're looking for edges that come from a

188
00:06:48,960 --> 00:06:50,639
source and cannot reach a sink without

189
00:06:50,639 --> 00:06:53,340
passing through another source first

190
00:06:53,340 --> 00:06:55,080
in this instance these are these two

191
00:06:55,080 --> 00:06:57,000
branches because once we've walked past

192
00:06:57,000 --> 00:06:58,620
the send function we cannot return

193
00:06:58,620 --> 00:07:01,560
without going over the receive

194
00:07:01,560 --> 00:07:04,139
and well if we traversed one of those

195
00:07:04,139 --> 00:07:06,840
branches we just redirected and call

196
00:07:06,840 --> 00:07:08,400
exit instead

197
00:07:08,400 --> 00:07:10,680
and now the program terminates whenever

198
00:07:10,680 --> 00:07:13,020
we have passed the point of sending a

199
00:07:13,020 --> 00:07:15,180
response

200
00:07:15,180 --> 00:07:17,100
and this also solves the second problem

201
00:07:17,100 --> 00:07:18,720
I should add that this is only a

202
00:07:18,720 --> 00:07:21,120
heuristic and does not work in cases we

203
00:07:21,120 --> 00:07:22,800
have some weird multi-threading

204
00:07:22,800 --> 00:07:24,840
situations in our experiences only

205
00:07:24,840 --> 00:07:27,720
happen for two cases though

206
00:07:27,720 --> 00:07:30,120
at this point you might ask why you're

207
00:07:30,120 --> 00:07:32,460
not just using fixed timeouts because if

208
00:07:32,460 --> 00:07:34,020
you just wait for a fixed amount of time

209
00:07:34,020 --> 00:07:36,539
eventually the service will be ready

210
00:07:36,539 --> 00:07:39,780
so here are two examples basically we're

211
00:07:39,780 --> 00:07:41,460
plotting the time it took us our father

212
00:07:41,460 --> 00:07:43,319
to find the first input that generated

213
00:07:43,319 --> 00:07:45,840
any response in seconds

214
00:07:45,840 --> 00:07:48,900
and with a fixed static timeout of 100

215
00:07:48,900 --> 00:07:51,539
milliseconds on the first Target the US

216
00:07:51,539 --> 00:07:54,180
server it took roughly 10 seconds and on

217
00:07:54,180 --> 00:07:55,620
your second example it took something

218
00:07:55,620 --> 00:07:58,139
over 70 seconds

219
00:07:58,139 --> 00:08:01,440
now if we split this static timeout in

220
00:08:01,440 --> 00:08:02,160
half

221
00:08:02,160 --> 00:08:04,139
well also all fuzzing increases so in

222
00:08:04,139 --> 00:08:05,639
the first instance we're now down to

223
00:08:05,639 --> 00:08:07,740
something over five milliseconds and any

224
00:08:07,740 --> 00:08:10,979
second instance something over 40.

225
00:08:10,979 --> 00:08:12,840
reducing the timeout even further though

226
00:08:12,840 --> 00:08:15,360
we see something interesting happening

227
00:08:15,360 --> 00:08:17,580
with a static timeout of 10 milliseconds

228
00:08:17,580 --> 00:08:20,340
we see that the second target still

229
00:08:20,340 --> 00:08:23,220
decreases defuzzing time however in the

230
00:08:23,220 --> 00:08:25,259
first instance we know way up to 70

231
00:08:25,259 --> 00:08:26,460
seconds

232
00:08:26,460 --> 00:08:28,740
and this actually happens because most

233
00:08:28,740 --> 00:08:30,479
of the packets in this instance are now

234
00:08:30,479 --> 00:08:32,039
dropped because they either send too

235
00:08:32,039 --> 00:08:32,760
early

236
00:08:32,760 --> 00:08:35,159
or we terminate the program before it

237
00:08:35,159 --> 00:08:38,219
was able to send us a response

238
00:08:38,219 --> 00:08:40,200
and this also highlights what our UDP

239
00:08:40,200 --> 00:08:42,360
awareness mutation is so important

240
00:08:42,360 --> 00:08:44,240
because with UDP aware instrumentation

241
00:08:44,240 --> 00:08:47,220
we don't need to have a Target specific

242
00:08:47,220 --> 00:08:49,200
timeout and we're faster in both

243
00:08:49,200 --> 00:08:51,200
instances

244
00:08:51,200 --> 00:08:53,399
eliminates the need for Target specific

245
00:08:53,399 --> 00:08:55,740
timeouts

246
00:08:55,740 --> 00:08:58,080
and this is important why we need you to

247
00:08:58,080 --> 00:09:00,660
be around us so so far we basically have

248
00:09:00,660 --> 00:09:02,339
a pipeline that is able to find

249
00:09:02,339 --> 00:09:03,959
responses

250
00:09:03,959 --> 00:09:05,700
we haven't talked so much about how we

251
00:09:05,700 --> 00:09:07,920
can find large responses and for this we

252
00:09:07,920 --> 00:09:09,660
actually added another mutation operator

253
00:09:09,660 --> 00:09:13,279
specifically for amplification

254
00:09:13,320 --> 00:09:16,980
to demonstrate this this is an example a

255
00:09:16,980 --> 00:09:18,779
amplification that we found in the RX

256
00:09:18,779 --> 00:09:20,160
debug protocol

257
00:09:20,160 --> 00:09:22,920
which allows you to request some debug

258
00:09:22,920 --> 00:09:25,080
statistics about communication the

259
00:09:25,080 --> 00:09:27,180
protocol basically uses a 28 byte header

260
00:09:27,180 --> 00:09:28,920
and an 8 byte payload

261
00:09:28,920 --> 00:09:32,459
and allows you with a 36 byte requests

262
00:09:32,459 --> 00:09:35,100
to get a response of roughly 312 bytes

263
00:09:35,100 --> 00:09:38,519
or an amplification of 8.67

264
00:09:38,519 --> 00:09:41,160
however if we look at the bytes at the

265
00:09:41,160 --> 00:09:44,519
raw level we find that a only very few

266
00:09:44,519 --> 00:09:46,260
fields are actually relevant to what is

267
00:09:46,260 --> 00:09:48,180
happening in the specific instance is

268
00:09:48,180 --> 00:09:50,700
only those six bytes saying that we have

269
00:09:50,700 --> 00:09:52,740
a debug packet that the client is ready

270
00:09:52,740 --> 00:09:55,260
to receive data and lastly that we're

271
00:09:55,260 --> 00:09:58,580
looking for statistics

272
00:09:58,700 --> 00:10:00,779
combined with defects that actually

273
00:10:00,779 --> 00:10:03,240
there are often no length checks for the

274
00:10:03,240 --> 00:10:05,399
received input this means we can

275
00:10:05,399 --> 00:10:07,800
actually drop these last four bytes

276
00:10:07,800 --> 00:10:10,860
meaning we can improve our amplification

277
00:10:10,860 --> 00:10:13,019
by sending a non-protocol compliant

278
00:10:13,019 --> 00:10:15,899
request of only 32 bytes but still

279
00:10:15,899 --> 00:10:17,940
receive the same 312 byte response

280
00:10:17,940 --> 00:10:22,680
thereby increasing our factor to 9.75

281
00:10:22,680 --> 00:10:27,079
and with this we have our full pipeline

282
00:10:27,140 --> 00:10:29,399
the only thing that we need to add is we

283
00:10:29,399 --> 00:10:32,100
also need to take now instances into

284
00:10:32,100 --> 00:10:33,899
account and add them to our seat if they

285
00:10:33,899 --> 00:10:36,120
find any response because any response

286
00:10:36,120 --> 00:10:37,980
that we get found we could potentially

287
00:10:37,980 --> 00:10:40,980
improve to have a better one

288
00:10:40,980 --> 00:10:44,339
we did evaluate amphas on 28

289
00:10:44,339 --> 00:10:45,839
UDP open source Network Services from

290
00:10:45,839 --> 00:10:49,019
the dbm repositories random for 24 hours

291
00:10:49,019 --> 00:10:51,839
and repeated all experiments five times

292
00:10:51,839 --> 00:10:54,060
and among those 28 targets we actually

293
00:10:54,060 --> 00:10:55,800
found amplification vulnerabilities in

294
00:10:55,800 --> 00:10:58,500
nine services with amplification factors

295
00:10:58,500 --> 00:11:02,579
ranging from 1.09 to 32.

296
00:11:02,579 --> 00:11:04,980
not only that we actually discovered

297
00:11:04,980 --> 00:11:07,260
that many of those targets have multiple

298
00:11:07,260 --> 00:11:09,800
amplification vectors that can be abused

299
00:11:09,800 --> 00:11:12,240
talk D for example only as a single one

300
00:11:12,240 --> 00:11:13,980
but in the case of BS server we can

301
00:11:13,980 --> 00:11:16,260
actually find 200 different requests

302
00:11:16,260 --> 00:11:19,680
that trigger amplification Behavior

303
00:11:19,680 --> 00:11:21,899
and lastly to point us out

304
00:11:21,899 --> 00:11:23,640
five of these have been previously

305
00:11:23,640 --> 00:11:26,000
unknown

306
00:11:26,459 --> 00:11:28,939
so

307
00:11:29,100 --> 00:11:30,839
um yes all one of these also have been

308
00:11:30,839 --> 00:11:32,240
disclosed to the correspondent

309
00:11:32,240 --> 00:11:34,980
respective project maintainers

310
00:11:34,980 --> 00:11:37,560
but to summarize I've shown how to adapt

311
00:11:37,560 --> 00:11:39,420
our pipeline to find amplification

312
00:11:39,420 --> 00:11:41,399
vulnerabilities with fuzzing

313
00:11:41,399 --> 00:11:44,880
I have talked about how UDP awareness is

314
00:11:44,880 --> 00:11:47,459
helpful in finding the challenges of UDP

315
00:11:47,459 --> 00:11:48,959
Network fuzzing

316
00:11:48,959 --> 00:11:51,899
how we can improve amplification factors

317
00:11:51,899 --> 00:11:55,860
and lastly shown evaluation results

318
00:11:55,860 --> 00:11:58,260
our artifacts are available on GitHub

319
00:11:58,260 --> 00:12:00,660
I've been young scrub thank you for your

320
00:12:00,660 --> 00:12:03,860
time I'm now happy to take questions

