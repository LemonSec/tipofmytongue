1
00:00:07,400 --> 00:00:09,720
awesome thank you everybody for coming

2
00:00:09,720 --> 00:00:12,059
to the presentation today I'm going to

3
00:00:12,059 --> 00:00:13,440
talk to you about our work on

4
00:00:13,440 --> 00:00:16,980
vulnerability lifetimes this work is a

5
00:00:16,980 --> 00:00:19,740
collaborative work with people good

6
00:00:19,740 --> 00:00:22,199
people at the tele cooperation Lab at

7
00:00:22,199 --> 00:00:24,600
the Technical University of darmstad

8
00:00:24,600 --> 00:00:28,320
and in in two words what we did in this

9
00:00:28,320 --> 00:00:32,759
work work is that we developed an

10
00:00:32,759 --> 00:00:34,800
approach to estimate

11
00:00:34,800 --> 00:00:37,559
how long vulnerabilities remain in the

12
00:00:37,559 --> 00:00:41,460
code of popular open source projects and

13
00:00:41,460 --> 00:00:43,500
we use this approach to perform a

14
00:00:43,500 --> 00:00:45,120
large-scale study

15
00:00:45,120 --> 00:00:48,120
and and see how how this metric varies

16
00:00:48,120 --> 00:00:51,180
between projects and over time

17
00:00:51,180 --> 00:00:53,579
so why did we decide to look into this

18
00:00:53,579 --> 00:00:56,940
metric lifetimes well there have been a

19
00:00:56,940 --> 00:00:59,420
lot of reports uh talking about

20
00:00:59,420 --> 00:01:02,239
vulnerabilities that

21
00:01:02,239 --> 00:01:05,400
were in the code for many years before

22
00:01:05,400 --> 00:01:08,040
they were discovered and of course these

23
00:01:08,040 --> 00:01:10,619
vulnerabilities are very important

24
00:01:10,619 --> 00:01:13,320
because they affect pretty much all

25
00:01:13,320 --> 00:01:16,260
devices and also affect devices that are

26
00:01:16,260 --> 00:01:19,380
not supported anymore and

27
00:01:19,380 --> 00:01:20,340
um

28
00:01:20,340 --> 00:01:22,200
yeah therefore they're very important

29
00:01:22,200 --> 00:01:23,939
however

30
00:01:23,939 --> 00:01:26,040
um this practical issue is not the

31
00:01:26,040 --> 00:01:28,140
reason why we decided to look into this

32
00:01:28,140 --> 00:01:29,220
metric

33
00:01:29,220 --> 00:01:31,020
we decided to look into this metric

34
00:01:31,020 --> 00:01:33,840
because we believed that it would be

35
00:01:33,840 --> 00:01:35,939
able to to give us some indicators of

36
00:01:35,939 --> 00:01:37,439
quality

37
00:01:37,439 --> 00:01:39,540
um for software for example to see how

38
00:01:39,540 --> 00:01:41,040
this metric varies between different

39
00:01:41,040 --> 00:01:43,400
projects that use different approaches

40
00:01:43,400 --> 00:01:46,799
to develop code and so on and to see if

41
00:01:46,799 --> 00:01:49,860
we're doing better uh over time

42
00:01:49,860 --> 00:01:52,680
and the good thing about this metric for

43
00:01:52,680 --> 00:01:54,360
example in comparison to the number of

44
00:01:54,360 --> 00:01:58,200
bugs discovered is that it is less

45
00:01:58,200 --> 00:02:01,079
biased and so we had great hope uh to

46
00:02:01,079 --> 00:02:02,340
look into it

47
00:02:02,340 --> 00:02:06,659
okay and um now what exactly

48
00:02:06,659 --> 00:02:08,220
um do we want to measure

49
00:02:08,220 --> 00:02:11,640
so this is the the classic vulnerability

50
00:02:11,640 --> 00:02:13,459
life cycle the different stages

51
00:02:13,459 --> 00:02:16,319
vulnerability goes through uh from the

52
00:02:16,319 --> 00:02:19,020
point it is introduced into the code for

53
00:02:19,020 --> 00:02:22,080
example via a commit in a Version

54
00:02:22,080 --> 00:02:25,379
Control System then it is found or

55
00:02:25,379 --> 00:02:27,900
discovered by a party so if this party

56
00:02:27,900 --> 00:02:31,200
is malicious then the exploitations can

57
00:02:31,200 --> 00:02:33,720
start right away at some point and

58
00:02:33,720 --> 00:02:35,220
especially for

59
00:02:35,220 --> 00:02:38,760
free software projects it's very usual

60
00:02:38,760 --> 00:02:41,099
that vulnerability is publicly disclosed

61
00:02:41,099 --> 00:02:44,459
and the fix is made available usually at

62
00:02:44,459 --> 00:02:47,340
the same time if correct processes are

63
00:02:47,340 --> 00:02:49,260
followed and then the patching process

64
00:02:49,260 --> 00:02:52,560
begins and hosts are patched

65
00:02:52,560 --> 00:02:56,519
over time so what what we are measuring

66
00:02:56,519 --> 00:02:58,739
in this paper is the time that a

67
00:02:58,739 --> 00:03:01,080
vulnerability remains in the Upstream

68
00:03:01,080 --> 00:03:04,500
code of a project so the time between

69
00:03:04,500 --> 00:03:06,599
its introduction and the fix being

70
00:03:06,599 --> 00:03:08,580
available

71
00:03:08,580 --> 00:03:10,140
when we're talking about a version

72
00:03:10,140 --> 00:03:12,420
control system this time is the time

73
00:03:12,420 --> 00:03:14,760
between uh vulnerability contributing

74
00:03:14,760 --> 00:03:17,280
commit or VCC and the fixing commit that

75
00:03:17,280 --> 00:03:19,260
fixes the problem and in the case where

76
00:03:19,260 --> 00:03:21,720
there are multiple vccs and fixing

77
00:03:21,720 --> 00:03:24,720
commits we take the time between the

78
00:03:24,720 --> 00:03:27,659
first VCC and the last fixing commit and

79
00:03:27,659 --> 00:03:29,940
we explained the paper why why this

80
00:03:29,940 --> 00:03:32,420
makes sense

81
00:03:32,459 --> 00:03:36,300
so as I explained before uh it's just a

82
00:03:36,300 --> 00:03:38,580
matter of you know having one date

83
00:03:38,580 --> 00:03:41,640
another date and calculating uh the time

84
00:03:41,640 --> 00:03:43,680
that has passed between those two dates

85
00:03:43,680 --> 00:03:46,200
so why why is the challenge to measure

86
00:03:46,200 --> 00:03:48,599
vulnerability lifetimes

87
00:03:48,599 --> 00:03:52,500
well uh while uh we know the fixing

88
00:03:52,500 --> 00:03:54,379
commits for vulnerabilities that are

89
00:03:54,379 --> 00:03:57,840
fixed and published this information is

90
00:03:57,840 --> 00:04:00,180
almost always available in the CV

91
00:04:00,180 --> 00:04:04,560
entries or security advisors and so on

92
00:04:04,560 --> 00:04:07,319
we don't have information on the

93
00:04:07,319 --> 00:04:09,840
vulnerability contributing commit so the

94
00:04:09,840 --> 00:04:11,700
commits that actually introduce the

95
00:04:11,700 --> 00:04:13,739
vulnerability we only have this

96
00:04:13,739 --> 00:04:16,560
information for a small subset of

97
00:04:16,560 --> 00:04:17,880
vulnerabilities

98
00:04:17,880 --> 00:04:20,699
and we have it because a lot of people

99
00:04:20,699 --> 00:04:23,880
have performed manual efforts and so on

100
00:04:23,880 --> 00:04:25,979
to to give this information for example

101
00:04:25,979 --> 00:04:28,800
for some vulnerabilities of the Linux

102
00:04:28,800 --> 00:04:29,880
kernel

103
00:04:29,880 --> 00:04:32,580
now if there was a magic way to go from

104
00:04:32,580 --> 00:04:34,560
a fixing commit to the vulnerability

105
00:04:34,560 --> 00:04:37,139
contributing commit automatically then

106
00:04:37,139 --> 00:04:39,300
we would have solved our problem and we

107
00:04:39,300 --> 00:04:40,860
would be able to perform the measurement

108
00:04:40,860 --> 00:04:43,860
however this is seemingly impossible and

109
00:04:43,860 --> 00:04:46,440
at least very difficult

110
00:04:46,440 --> 00:04:49,259
however there was a paper in 2015 that

111
00:04:49,259 --> 00:04:51,180
tried to do this for another reason and

112
00:04:51,180 --> 00:04:54,000
I have an example a fixing commit for a

113
00:04:54,000 --> 00:04:57,300
cve I found a very recent one affecting

114
00:04:57,300 --> 00:05:00,000
the Linux kernel so green lines are

115
00:05:00,000 --> 00:05:02,880
added lines in the fix and red lines are

116
00:05:02,880 --> 00:05:05,240
deleted lines in the fix

117
00:05:05,240 --> 00:05:06,840
and

118
00:05:06,840 --> 00:05:09,419
um what what these guys did was to

119
00:05:09,419 --> 00:05:10,919
develop a heuristic that would go from

120
00:05:10,919 --> 00:05:13,020
the fixing commit and try to find the

121
00:05:13,020 --> 00:05:15,060
vulnerability contributing commit so

122
00:05:15,060 --> 00:05:18,360
what they did is they blamed each line

123
00:05:18,360 --> 00:05:20,280
that was deleted in the fix

124
00:05:20,280 --> 00:05:23,100
so git blame finds the commit that last

125
00:05:23,100 --> 00:05:25,680
changed the line that we're talking

126
00:05:25,680 --> 00:05:27,600
about

127
00:05:27,600 --> 00:05:29,340
and so they did this for each deleted

128
00:05:29,340 --> 00:05:32,820
line and increased the blame counter by

129
00:05:32,820 --> 00:05:35,220
one and they also did this for each line

130
00:05:35,220 --> 00:05:38,220
before and after each added block of

131
00:05:38,220 --> 00:05:40,620
code of two or more lines

132
00:05:40,620 --> 00:05:42,720
as you see in this example

133
00:05:42,720 --> 00:05:46,860
okay then they counted the number of

134
00:05:46,860 --> 00:05:50,400
blames each commit received and the

135
00:05:50,400 --> 00:05:52,560
commit with the most blames so the

136
00:05:52,560 --> 00:05:56,280
commit that changed last the most lines

137
00:05:56,280 --> 00:05:59,759
that were either deleted uh or were

138
00:05:59,759 --> 00:06:02,699
above or below added logs in the fixing

139
00:06:02,699 --> 00:06:05,220
commit then this is the VCC

140
00:06:05,220 --> 00:06:10,259
okay and they did a manual check of this

141
00:06:10,259 --> 00:06:13,199
of the result of this heuristic and they

142
00:06:13,199 --> 00:06:15,360
found that it performs really well with

143
00:06:15,360 --> 00:06:17,580
96 Acres

144
00:06:17,580 --> 00:06:19,919
so we can use this for our approach but

145
00:06:19,919 --> 00:06:23,600
actually when we compare the accuracy

146
00:06:23,600 --> 00:06:26,759
when we calculate the accuracy using

147
00:06:26,759 --> 00:06:29,780
ground truth data or data that

148
00:06:29,780 --> 00:06:33,660
we found of much of very high quality

149
00:06:33,660 --> 00:06:36,780
from the from Linux developers and the

150
00:06:36,780 --> 00:06:39,180
Ubuntu security team we found that for

151
00:06:39,180 --> 00:06:42,240
the same data set this approach only

152
00:06:42,240 --> 00:06:46,259
yields 40 accuracy so it's not we cannot

153
00:06:46,259 --> 00:06:48,300
ready to use it to go forward with our

154
00:06:48,300 --> 00:06:49,800
measurement

155
00:06:49,800 --> 00:06:53,400
so how do we do it at the end we noticed

156
00:06:53,400 --> 00:06:54,600
that we don't necessarily need to

157
00:06:54,600 --> 00:06:56,340
pinpoint the VCC we just need to

158
00:06:56,340 --> 00:06:58,860
estimate the commit date

159
00:06:58,860 --> 00:07:02,039
so instead of getting the committee with

160
00:07:02,039 --> 00:07:03,419
the most blames we did a weighted

161
00:07:03,419 --> 00:07:05,819
average on the commits on the ages of

162
00:07:05,819 --> 00:07:08,940
the commit commit based on the number of

163
00:07:08,940 --> 00:07:12,000
blames each commit received yeah so bi

164
00:07:12,000 --> 00:07:14,460
is a number of blames the is the date of

165
00:07:14,460 --> 00:07:16,139
the commit and we just use an arbitrary

166
00:07:16,139 --> 00:07:19,380
reference date in this calculation

167
00:07:19,380 --> 00:07:20,220
um

168
00:07:20,220 --> 00:07:22,860
okay so with this approach

169
00:07:22,860 --> 00:07:25,259
um our approach achieves a relatively

170
00:07:25,259 --> 00:07:28,500
low mean error so the absolute value of

171
00:07:28,500 --> 00:07:31,199
the mean error is relatively low

172
00:07:31,199 --> 00:07:33,900
compared to the lower bound approach by

173
00:07:33,900 --> 00:07:36,660
Lee impacts and relate work and also is

174
00:07:36,660 --> 00:07:38,940
low compared to the

175
00:07:38,940 --> 00:07:41,479
um absolute value of the lifetime

176
00:07:41,479 --> 00:07:43,860
however the standard deviation is very

177
00:07:43,860 --> 00:07:47,639
high so an individual measurement is

178
00:07:47,639 --> 00:07:50,220
prone to to be far away from the mean

179
00:07:50,220 --> 00:07:53,400
and therefore we cannot really use it to

180
00:07:53,400 --> 00:07:56,699
make confident measurements

181
00:07:56,699 --> 00:07:58,440
okay so here comes our second

182
00:07:58,440 --> 00:08:00,479
observation that we don't necessarily

183
00:08:00,479 --> 00:08:03,240
care about individual vulnerabilities

184
00:08:03,240 --> 00:08:05,539
this allows us to

185
00:08:05,539 --> 00:08:08,460
get the mean of a number of samples

186
00:08:08,460 --> 00:08:09,960
together and as we know from the central

187
00:08:09,960 --> 00:08:13,099
limit theorem this will reduce the

188
00:08:13,099 --> 00:08:16,680
standard deviation variance of

189
00:08:16,680 --> 00:08:19,440
this mean so if we get for example 20

190
00:08:19,440 --> 00:08:22,940
samples together and estimate their

191
00:08:22,940 --> 00:08:26,580
lifetime then we can get a 95 percent

192
00:08:26,580 --> 00:08:29,639
confidence interval of plus minus 395

193
00:08:29,639 --> 00:08:30,539
days

194
00:08:30,539 --> 00:08:33,479
so we decided to move forward and only

195
00:08:33,479 --> 00:08:37,979
consider samples like samples that are

196
00:08:37,979 --> 00:08:40,740
the result of averaging of the lifetimes

197
00:08:40,740 --> 00:08:44,820
of more than 20 vulnerabilities

198
00:08:45,000 --> 00:08:47,519
so we saw that we can have a heuristic

199
00:08:47,519 --> 00:08:50,760
that tries to estimate lifetimes and

200
00:08:50,760 --> 00:08:53,580
this has relatively a low mean error and

201
00:08:53,580 --> 00:08:55,980
with a trick we can also proceed and

202
00:08:55,980 --> 00:08:58,980
make confident measurements however

203
00:08:58,980 --> 00:09:01,500
we also need to see if the heuristic is

204
00:09:01,500 --> 00:09:04,500
good enough in practice so trying to

205
00:09:04,500 --> 00:09:06,600
perform tasks similar to what we want to

206
00:09:06,600 --> 00:09:07,920
do

207
00:09:07,920 --> 00:09:11,220
here for example we plot the lifetime

208
00:09:11,220 --> 00:09:13,920
for ground truth data for the Linux

209
00:09:13,920 --> 00:09:16,260
kernel per year of fixing commits so

210
00:09:16,260 --> 00:09:18,360
this is the or the orange and the

211
00:09:18,360 --> 00:09:20,880
lifetime returned by the heuristic and

212
00:09:20,880 --> 00:09:23,399
we see that the heuristic performs very

213
00:09:23,399 --> 00:09:26,459
well so this is

214
00:09:26,459 --> 00:09:27,120
um

215
00:09:27,120 --> 00:09:28,980
only for the cves that we have ground

216
00:09:28,980 --> 00:09:32,160
truth data for and for the same CVS we

217
00:09:32,160 --> 00:09:34,980
also compute the lifetime through the

218
00:09:34,980 --> 00:09:36,480
heuristic

219
00:09:36,480 --> 00:09:38,160
we can also see that the heuristic

220
00:09:38,160 --> 00:09:41,880
performs very well in generating a very

221
00:09:41,880 --> 00:09:45,000
similar distribution to the one of the

222
00:09:45,000 --> 00:09:46,800
ground truth data

223
00:09:46,800 --> 00:09:50,519
and so we can proceed now with our with

224
00:09:50,519 --> 00:09:52,019
our measurement we are pretty confident

225
00:09:52,019 --> 00:09:54,839
that what the heuristic generates is

226
00:09:54,839 --> 00:09:58,200
close enough to the truth that is usable

227
00:09:58,200 --> 00:10:01,500
okay so now we proceed we have a data

228
00:10:01,500 --> 00:10:04,019
set of 11 popular free software projects

229
00:10:04,019 --> 00:10:05,760
and multiple sources to get

230
00:10:05,760 --> 00:10:07,440
vulnerability contributing commits and

231
00:10:07,440 --> 00:10:08,399
so on

232
00:10:08,399 --> 00:10:12,240
and we have a limited data set of ground

233
00:10:12,240 --> 00:10:15,660
truth CVS and many more with known

234
00:10:15,660 --> 00:10:17,760
fixing commit that we apply our

235
00:10:17,760 --> 00:10:19,980
heuristic on and I'm gonna show you a

236
00:10:19,980 --> 00:10:21,240
couple of results

237
00:10:21,240 --> 00:10:23,279
so first of all here we have the

238
00:10:23,279 --> 00:10:25,080
computed lifetimes the average and

239
00:10:25,080 --> 00:10:27,300
median for all 11 projects and we can

240
00:10:27,300 --> 00:10:29,700
make some observations

241
00:10:29,700 --> 00:10:31,380
vulnerabilities leaving the code

242
00:10:31,380 --> 00:10:35,220
generally for many years and there are

243
00:10:35,220 --> 00:10:37,140
great variations between projects for

244
00:10:37,140 --> 00:10:39,480
example you can check chromium and PHP

245
00:10:39,480 --> 00:10:42,240
here and that their lifetime is very

246
00:10:42,240 --> 00:10:45,180
very different and it's interesting to

247
00:10:45,180 --> 00:10:47,279
to think what this means doesn't mean

248
00:10:47,279 --> 00:10:48,959
that for example the security of chrome

249
00:10:48,959 --> 00:10:51,240
is so much better than the security of

250
00:10:51,240 --> 00:10:54,300
PHP that they take them 10 years to find

251
00:10:54,300 --> 00:10:55,920
vulnerabilities of course this is not

252
00:10:55,920 --> 00:10:57,720
the case but we'll discuss about it in a

253
00:10:57,720 --> 00:10:58,980
bit

254
00:10:58,980 --> 00:11:01,260
and one of the main things that affects

255
00:11:01,260 --> 00:11:05,160
this Great Divide between

256
00:11:05,160 --> 00:11:07,140
the two projects in the previous example

257
00:11:07,140 --> 00:11:09,180
is that of course vulnerability

258
00:11:09,180 --> 00:11:12,360
lifetimes depend a lot on the code age

259
00:11:12,360 --> 00:11:14,339
so for example if you have a project

260
00:11:14,339 --> 00:11:16,860
that's five years old then you cannot

261
00:11:16,860 --> 00:11:18,779
have vulnerabilities that have lived for

262
00:11:18,779 --> 00:11:20,700
more than five years

263
00:11:20,700 --> 00:11:24,000
and it's interesting here to to see the

264
00:11:24,000 --> 00:11:25,860
relation between the lifetime of

265
00:11:25,860 --> 00:11:28,620
vulnerabilities and the age of the code

266
00:11:28,620 --> 00:11:31,980
so here when we say regular code age it

267
00:11:31,980 --> 00:11:33,740
is just um

268
00:11:33,740 --> 00:11:36,360
the age of all the commits in the code

269
00:11:36,360 --> 00:11:39,480
base in a given date so first of July of

270
00:11:39,480 --> 00:11:41,100
each year

271
00:11:41,100 --> 00:11:43,260
and we can make some interesting

272
00:11:43,260 --> 00:11:45,899
observations for first as we expect the

273
00:11:45,899 --> 00:11:49,740
lifetime is somehow correlated to the

274
00:11:49,740 --> 00:11:52,440
um code age at the time of the fix but

275
00:11:52,440 --> 00:11:54,180
there are two interesting metrics that

276
00:11:54,180 --> 00:11:57,600
we can identify here first the spread

277
00:11:57,600 --> 00:12:00,839
between regular code age and lifetime

278
00:12:00,839 --> 00:12:03,480
so this gives us an intuition of whether

279
00:12:03,480 --> 00:12:05,820
vulnerabilities are located in generally

280
00:12:05,820 --> 00:12:08,579
newer or older parts of the code

281
00:12:08,579 --> 00:12:10,620
and second the rate of change of the

282
00:12:10,620 --> 00:12:13,560
spread which gives us an indication of

283
00:12:13,560 --> 00:12:16,320
Evolution and how we're doing moving on

284
00:12:16,320 --> 00:12:18,839
okay and as implications we have

285
00:12:18,839 --> 00:12:21,260
discussed several things in the paper

286
00:12:21,260 --> 00:12:23,399
ranging from practical considerations

287
00:12:23,399 --> 00:12:25,560
like the duration of long-term support

288
00:12:25,560 --> 00:12:28,200
we have discussed theoretical insights

289
00:12:28,200 --> 00:12:30,420
and we have discussed this interesting

290
00:12:30,420 --> 00:12:33,000
metrics that we found and overall our

291
00:12:33,000 --> 00:12:34,860
work on lifetimes enables further

292
00:12:34,860 --> 00:12:35,940
research

293
00:12:35,940 --> 00:12:37,980
on the topic

294
00:12:37,980 --> 00:12:39,480
thank you very much and I'm looking

295
00:12:39,480 --> 00:12:42,620
forward to answering your questions

