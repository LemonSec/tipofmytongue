1
00:00:07,820 --> 00:00:09,960
thank you Daniel and good afternoon

2
00:00:09,960 --> 00:00:12,240
everyone my name is Ricardo and my name

3
00:00:12,240 --> 00:00:14,099
is Miles and today we're presenting

4
00:00:14,099 --> 00:00:16,820
don't mesh around

5
00:00:17,039 --> 00:00:18,779
microarchitectural side Channels with

6
00:00:18,779 --> 00:00:20,279
their ability to leak secret information

7
00:00:20,279 --> 00:00:22,380
and break process isolation have

8
00:00:22,380 --> 00:00:24,000
inspired a wide variety of research over

9
00:00:24,000 --> 00:00:25,439
the past decade

10
00:00:25,439 --> 00:00:27,240
however prior work have primarily

11
00:00:27,240 --> 00:00:29,340
focused on structures within the cores

12
00:00:29,340 --> 00:00:30,480
and the caches

13
00:00:30,480 --> 00:00:32,159
in our work we study a micro

14
00:00:32,159 --> 00:00:33,540
architectural attack surface that

15
00:00:33,540 --> 00:00:35,460
remains open even when these vectors are

16
00:00:35,460 --> 00:00:37,800
closed specifically the on-chip

17
00:00:37,800 --> 00:00:39,059
interconnect

18
00:00:39,059 --> 00:00:40,620
now previously this was thought to be

19
00:00:40,620 --> 00:00:42,420
infeasible and is largely ignored by

20
00:00:42,420 --> 00:00:45,239
existing defenses

21
00:00:45,239 --> 00:00:46,920
on-chip interconnects come in a variety

22
00:00:46,920 --> 00:00:48,660
of different topologies prior work

23
00:00:48,660 --> 00:00:50,039
studying interconnects has focused

24
00:00:50,039 --> 00:00:52,500
primarily on client class processors

25
00:00:52,500 --> 00:00:54,600
which might use smaller interconnects

26
00:00:54,600 --> 00:00:55,920
like the ring

27
00:00:55,920 --> 00:00:59,219
in our work we study a much larger

28
00:00:59,219 --> 00:01:00,960
interconnect since vendors are

29
00:01:00,960 --> 00:01:02,579
increasingly moving to these larger

30
00:01:02,579 --> 00:01:04,260
topologies

31
00:01:04,260 --> 00:01:06,240
as processor core counts continue to

32
00:01:06,240 --> 00:01:07,500
increase

33
00:01:07,500 --> 00:01:09,299
typically we study the mesh interconnect

34
00:01:09,299 --> 00:01:10,799
found on the latest Intel server

35
00:01:10,799 --> 00:01:12,840
processors

36
00:01:12,840 --> 00:01:14,700
now Intel's mesh is composed of a

37
00:01:14,700 --> 00:01:16,020
two-dimensional array of tiles where

38
00:01:16,020 --> 00:01:17,939
each tile can contain up to one core

39
00:01:17,939 --> 00:01:20,100
these cores can send messages to one

40
00:01:20,100 --> 00:01:22,259
another by injecting packets onto the

41
00:01:22,259 --> 00:01:24,680
interconnect

42
00:01:25,500 --> 00:01:27,299
now the two-dimensional nature of this

43
00:01:27,299 --> 00:01:28,860
interconnect adds a variety of different

44
00:01:28,860 --> 00:01:30,540
challenges when compared to the ring

45
00:01:30,540 --> 00:01:32,520
architecture for instance there are

46
00:01:32,520 --> 00:01:34,020
simply many more ways to traffic flows

47
00:01:34,020 --> 00:01:35,880
to interfere with one another not to

48
00:01:35,880 --> 00:01:37,200
mention simply many more placement

49
00:01:37,200 --> 00:01:40,860
options for these traffic flows

50
00:01:40,860 --> 00:01:42,659
in light of this complexity we asked two

51
00:01:42,659 --> 00:01:45,060
research questions first Is it feasible

52
00:01:45,060 --> 00:01:46,920
to construct attacks by only exploiting

53
00:01:46,920 --> 00:01:49,020
contention on a mesh interconnect and

54
00:01:49,020 --> 00:01:50,820
second are there non-invasive approaches

55
00:01:50,820 --> 00:01:52,619
that can mitigate these attacks without

56
00:01:52,619 --> 00:01:54,840
requiring Hardware modifications

57
00:01:54,840 --> 00:01:56,880
in our work we find that not only are

58
00:01:56,880 --> 00:01:59,040
such side channels feasible but also

59
00:01:59,040 --> 00:02:00,360
that despite the deeply integrated

60
00:02:00,360 --> 00:02:02,100
nature of the interconnect it is in fact

61
00:02:02,100 --> 00:02:04,200
possible to reduce this leakage without

62
00:02:04,200 --> 00:02:06,979
changing any hardware

63
00:02:07,560 --> 00:02:09,660
before we dive too much into attacks and

64
00:02:09,660 --> 00:02:11,099
defenses however we must first

65
00:02:11,099 --> 00:02:12,660
understand a little bit more about the

66
00:02:12,660 --> 00:02:15,720
mesh in this first part of the talk we

67
00:02:15,720 --> 00:02:17,280
will reverse engineer the workings of

68
00:02:17,280 --> 00:02:18,900
Intel server class mesh interconnect

69
00:02:18,900 --> 00:02:21,120
with the specific focus on understanding

70
00:02:21,120 --> 00:02:22,620
how traffic flows interfere with one

71
00:02:22,620 --> 00:02:24,480
another

72
00:02:24,480 --> 00:02:26,220
now we rely on a similar approach to

73
00:02:26,220 --> 00:02:28,379
Prior work which takes advantage of the

74
00:02:28,379 --> 00:02:31,140
fact that last level cash loads to a

75
00:02:31,140 --> 00:02:32,940
cash slice that is not local to your

76
00:02:32,940 --> 00:02:35,099
core must necessarily travel along the

77
00:02:35,099 --> 00:02:37,260
interconnect in this way we can issue

78
00:02:37,260 --> 00:02:39,420
continuously and repeatedly many loads

79
00:02:39,420 --> 00:02:41,580
to a remote last level cache slice to

80
00:02:41,580 --> 00:02:43,560
create a transmitter that will spam the

81
00:02:43,560 --> 00:02:46,200
network with traffic packets

82
00:02:46,200 --> 00:02:48,300
similarly we can issue many such packets

83
00:02:48,300 --> 00:02:50,220
and time these loads to create a

84
00:02:50,220 --> 00:02:51,540
receiver which will monitor traffic

85
00:02:51,540 --> 00:02:53,220
along a particular path

86
00:02:53,220 --> 00:02:54,959
now if the receiver observes an increase

87
00:02:54,959 --> 00:02:56,459
in the latency then we say that the

88
00:02:56,459 --> 00:02:59,040
receiver has observed contention

89
00:02:59,040 --> 00:03:00,840
this naturally raises the question what

90
00:03:00,840 --> 00:03:02,400
might cause the receiver to observe

91
00:03:02,400 --> 00:03:03,720
contention

92
00:03:03,720 --> 00:03:05,280
to get a better handle on this we can

93
00:03:05,280 --> 00:03:06,900
intuitively imagine one row of the

94
00:03:06,900 --> 00:03:09,000
interconnect as a two-lane way of

95
00:03:09,000 --> 00:03:09,959
traffic

96
00:03:09,959 --> 00:03:12,239
so in this model tiles can inject

97
00:03:12,239 --> 00:03:14,220
traffic onto the road and the traffic

98
00:03:14,220 --> 00:03:17,640
can exit the road onto any tile

99
00:03:17,640 --> 00:03:19,680
with this model you might assume that

100
00:03:19,680 --> 00:03:21,060
perhaps two traffic flows that are

101
00:03:21,060 --> 00:03:22,500
overlapping and traveling in the same

102
00:03:22,500 --> 00:03:24,360
direction since they share the same path

103
00:03:24,360 --> 00:03:26,040
might have the ability to interfere with

104
00:03:26,040 --> 00:03:26,940
one another

105
00:03:26,940 --> 00:03:28,500
and in practice when we test many

106
00:03:28,500 --> 00:03:29,819
different placements we find that

107
00:03:29,819 --> 00:03:32,040
sometimes this is true but not always in

108
00:03:32,040 --> 00:03:33,000
fact these two conditions are

109
00:03:33,000 --> 00:03:34,440
insufficient

110
00:03:34,440 --> 00:03:35,819
let's take a look at this case right

111
00:03:35,819 --> 00:03:37,860
here so these two flows obey the two

112
00:03:37,860 --> 00:03:38,700
rules we've described they're

113
00:03:38,700 --> 00:03:40,019
overlapping and they're traveling in the

114
00:03:40,019 --> 00:03:41,940
same direction however in the second

115
00:03:41,940 --> 00:03:43,500
case where we flip the transmitter in

116
00:03:43,500 --> 00:03:46,200
the receiver the contention disappears

117
00:03:46,200 --> 00:03:48,060
this suggests to us that in the second

118
00:03:48,060 --> 00:03:50,640
case the receiver's flow is unable to be

119
00:03:50,640 --> 00:03:52,799
slowed by the transmitter another way to

120
00:03:52,799 --> 00:03:54,420
say this is that the receiver's flow has

121
00:03:54,420 --> 00:03:56,819
higher priority in the second case

122
00:03:56,819 --> 00:03:58,500
speaking more generally there are three

123
00:03:58,500 --> 00:03:59,819
different ways in which traffic might

124
00:03:59,819 --> 00:04:02,040
enter a tile it can come from the column

125
00:04:02,040 --> 00:04:03,900
from the row or it can be injected from

126
00:04:03,900 --> 00:04:06,120
the local cache or core

127
00:04:06,120 --> 00:04:07,799
Now by testing many different placements

128
00:04:07,799 --> 00:04:08,760
we can exercise these different

129
00:04:08,760 --> 00:04:10,980
conditions and reverse engineer the

130
00:04:10,980 --> 00:04:13,560
priorities between these different flows

131
00:04:13,560 --> 00:04:15,060
we discuss more details about this in

132
00:04:15,060 --> 00:04:16,978
the paper but the key takeaway here is

133
00:04:16,978 --> 00:04:18,540
that transmitter traffic must have

134
00:04:18,540 --> 00:04:20,519
higher priority in order to delay the

135
00:04:20,519 --> 00:04:22,800
receiver's traffic

136
00:04:22,800 --> 00:04:24,540
alright so now we've got three rules we

137
00:04:24,540 --> 00:04:26,100
ask is this sufficient

138
00:04:26,100 --> 00:04:27,540
well let's take a look at these two

139
00:04:27,540 --> 00:04:29,639
cases here they follow all three rules

140
00:04:29,639 --> 00:04:31,460
we've described same direction

141
00:04:31,460 --> 00:04:33,300
overlapping and the transmitter has

142
00:04:33,300 --> 00:04:35,280
higher priority and yet once again in

143
00:04:35,280 --> 00:04:36,540
the second case when we see that we've

144
00:04:36,540 --> 00:04:38,580
shifted the receiver by one tile to the

145
00:04:38,580 --> 00:04:42,300
right the contention disappears

146
00:04:42,300 --> 00:04:44,040
this leads us to conclude that perhaps

147
00:04:44,040 --> 00:04:46,259
in the second case the receiver is not

148
00:04:46,259 --> 00:04:48,120
using the same Lane as in the first case

149
00:04:48,120 --> 00:04:50,280
that is to say whereas we've previously

150
00:04:50,280 --> 00:04:51,720
been envisioning the mesh kind of like

151
00:04:51,720 --> 00:04:52,680
this

152
00:04:52,680 --> 00:04:54,300
it might be more appropriate to see it

153
00:04:54,300 --> 00:04:56,520
as something like this where there are

154
00:04:56,520 --> 00:04:58,860
two lanes going in either direction

155
00:04:58,860 --> 00:05:00,300
naturally this raises a question how

156
00:05:00,300 --> 00:05:02,820
does traffic pick which lane to use once

157
00:05:02,820 --> 00:05:04,320
again we can test a variety of different

158
00:05:04,320 --> 00:05:06,540
placements and we can observe some

159
00:05:06,540 --> 00:05:09,180
patterns here most surprisingly is that

160
00:05:09,180 --> 00:05:10,440
the rules are different when traveling

161
00:05:10,440 --> 00:05:12,060
vertically and horizontally on the mesh

162
00:05:12,060 --> 00:05:14,040
traveling horizontally the lane

163
00:05:14,040 --> 00:05:15,240
selection is dependent on the

164
00:05:15,240 --> 00:05:16,860
destination of the traffic flow whereas

165
00:05:16,860 --> 00:05:18,180
when traveling vertically it's dependent

166
00:05:18,180 --> 00:05:20,160
on the source

167
00:05:20,160 --> 00:05:22,560
furthermore when traveling vertically we

168
00:05:22,560 --> 00:05:23,880
see for instance when going from row 0

169
00:05:23,880 --> 00:05:25,620
to row one there are even special cases

170
00:05:25,620 --> 00:05:26,400
here

171
00:05:26,400 --> 00:05:27,900
so the lane selection algorithm is

172
00:05:27,900 --> 00:05:30,120
non-trivial

173
00:05:30,120 --> 00:05:31,680
the key takeaway from all this though is

174
00:05:31,680 --> 00:05:33,300
that traffic must travel on the same

175
00:05:33,300 --> 00:05:35,880
Lane in order to contend

176
00:05:35,880 --> 00:05:38,280
as a final note we've been depicting the

177
00:05:38,280 --> 00:05:40,080
mesh in this way right here however the

178
00:05:40,080 --> 00:05:42,000
reality is a little bit more complex

179
00:05:42,000 --> 00:05:44,699
our reverse engineering reveals that uh

180
00:05:44,699 --> 00:05:47,460
the actual situation contains a fair bit

181
00:05:47,460 --> 00:05:49,560
more infrastructure

182
00:05:49,560 --> 00:05:50,940
for instance every connection is

183
00:05:50,940 --> 00:05:52,620
actually implemented as a pair of rings

184
00:05:52,620 --> 00:05:54,419
and Intel's communication protocol

185
00:05:54,419 --> 00:05:55,860
actually requires four different types

186
00:05:55,860 --> 00:05:57,120
of packets which means that the

187
00:05:57,120 --> 00:05:58,560
structure that you see here is actually

188
00:05:58,560 --> 00:06:01,139
duplicated four times

189
00:06:01,139 --> 00:06:04,620
now for the remainder of this talk uh

190
00:06:04,620 --> 00:06:06,900
we'll ignore a lot of these details but

191
00:06:06,900 --> 00:06:09,419
instead Focus instead on the security

192
00:06:09,419 --> 00:06:12,799
implications of this design

193
00:06:12,900 --> 00:06:14,820
all right so let's go back to the

194
00:06:14,820 --> 00:06:16,380
research questions that we asked at the

195
00:06:16,380 --> 00:06:18,300
beginning of this presentation and look

196
00:06:18,300 --> 00:06:20,460
at two examples of security implications

197
00:06:20,460 --> 00:06:23,520
for attackers and two for Defenders

198
00:06:23,520 --> 00:06:25,919
let's start from the ones for attackers

199
00:06:25,919 --> 00:06:27,600
the first example of a security

200
00:06:27,600 --> 00:06:30,360
implication for attackers is a cover

201
00:06:30,360 --> 00:06:32,880
Channel and what we show in the paper is

202
00:06:32,880 --> 00:06:34,800
that the mesh interconnect can be used

203
00:06:34,800 --> 00:06:36,360
to establish a very reliable

204
00:06:36,360 --> 00:06:38,039
Communication channel between two

205
00:06:38,039 --> 00:06:40,620
processes even when these two processors

206
00:06:40,620 --> 00:06:42,840
are isolated in the course and in the

207
00:06:42,840 --> 00:06:43,919
caches

208
00:06:43,919 --> 00:06:45,840
this cover channel can for example

209
00:06:45,840 --> 00:06:48,060
encode ones and zeros as different

210
00:06:48,060 --> 00:06:50,100
levels of interconnect contention

211
00:06:50,100 --> 00:06:52,259
we show in the paper that this coverage

212
00:06:52,259 --> 00:06:54,479
channel can achieve capacities of over

213
00:06:54,479 --> 00:06:57,120
1.5 megabits per second which is on par

214
00:06:57,120 --> 00:06:59,639
with state-of-the-art coverage channels

215
00:06:59,639 --> 00:07:02,039
that do not rely on shared memory and we

216
00:07:02,039 --> 00:07:04,080
also show that it works across virtual

217
00:07:04,080 --> 00:07:05,460
machines

218
00:07:05,460 --> 00:07:07,440
here is an example of a latency Trace

219
00:07:07,440 --> 00:07:09,360
that decodes to a sequence of

220
00:07:09,360 --> 00:07:12,120
alternating zeros and ones

221
00:07:12,120 --> 00:07:14,460
let's now briefly discuss the second

222
00:07:14,460 --> 00:07:16,680
example of a security implication for

223
00:07:16,680 --> 00:07:19,139
attackers which is a side Channel attack

224
00:07:19,139 --> 00:07:21,360
on cryptographic code

225
00:07:21,360 --> 00:07:24,120
we target a cryptographic victim that

226
00:07:24,120 --> 00:07:25,919
features the code pattern shown in the

227
00:07:25,919 --> 00:07:28,139
slide this code pattern has been

228
00:07:28,139 --> 00:07:29,880
exploited many times before your work

229
00:07:29,880 --> 00:07:31,919
but we are showing here that it can leak

230
00:07:31,919 --> 00:07:34,080
either over this more complex structure

231
00:07:34,080 --> 00:07:36,479
which is the mesh interconnect

232
00:07:36,479 --> 00:07:38,099
the way that it works is that an

233
00:07:38,099 --> 00:07:41,099
attacker can set itself up to detect the

234
00:07:41,099 --> 00:07:42,780
execution of these two function function

235
00:07:42,780 --> 00:07:45,660
1 and function 2. for example here are

236
00:07:45,660 --> 00:07:47,759
two traces corresponding to the first

237
00:07:47,759 --> 00:07:50,340
iteration of this victim's Loop

238
00:07:50,340 --> 00:07:52,979
as you can see in the trace to the left

239
00:07:52,979 --> 00:07:55,380
the there is the execution of function

240
00:07:55,380 --> 00:07:57,360
one that is clearly visible but in

241
00:07:57,360 --> 00:07:58,919
address to the right we can see that

242
00:07:58,919 --> 00:08:01,259
both function 1 and function 2 execute

243
00:08:01,259 --> 00:08:03,479
and their execution is visible through

244
00:08:03,479 --> 00:08:06,000
interconnect contention

245
00:08:06,000 --> 00:08:08,160
we provide many details about how this

246
00:08:08,160 --> 00:08:10,740
site channel can work in the paper and

247
00:08:10,740 --> 00:08:12,180
well and we also generalize this

248
00:08:12,180 --> 00:08:13,680
approach to all the subsequent

249
00:08:13,680 --> 00:08:16,139
iterations of the victim but for the

250
00:08:16,139 --> 00:08:18,240
sake of this presentation we are also

251
00:08:18,240 --> 00:08:19,919
going to focus on another important

252
00:08:19,919 --> 00:08:22,500
aspect that is also providing new

253
00:08:22,500 --> 00:08:24,539
insights on interconnect sessional

254
00:08:24,539 --> 00:08:26,940
attacks and this aspect is the one of

255
00:08:26,940 --> 00:08:29,099
the attacker's placement as you will see

256
00:08:29,099 --> 00:08:31,319
this is also important for mitigations

257
00:08:31,319 --> 00:08:33,659
so let's look at an example

258
00:08:33,659 --> 00:08:35,940
consider we have this scenario where the

259
00:08:35,940 --> 00:08:38,399
victim runs on the top left corner of

260
00:08:38,399 --> 00:08:39,779
the processor

261
00:08:39,779 --> 00:08:42,360
now during the victim's execution we

262
00:08:42,360 --> 00:08:45,300
expect to see traffic into and out of

263
00:08:45,300 --> 00:08:48,120
every slice this is by the way due to

264
00:08:48,120 --> 00:08:49,980
the way that the slice hash function is

265
00:08:49,980 --> 00:08:52,620
designed on Modern Intel processors

266
00:08:52,620 --> 00:08:54,899
so now we can ask the question what is

267
00:08:54,899 --> 00:08:57,180
the best attackers placement

268
00:08:57,180 --> 00:09:00,420
is it this one or maybe this one here

269
00:09:00,420 --> 00:09:04,019
or maybe is it that one on the first row

270
00:09:04,019 --> 00:09:05,760
turns out answering this question is

271
00:09:05,760 --> 00:09:07,740
non-trivial because on our processor

272
00:09:07,740 --> 00:09:09,540
which is not even one of the largest

273
00:09:09,540 --> 00:09:12,779
ones that uses a mesh there are 575

274
00:09:12,779 --> 00:09:14,820
different placements options for the

275
00:09:14,820 --> 00:09:16,019
attacker

276
00:09:16,019 --> 00:09:18,899
so in our paper to rank displacements we

277
00:09:18,899 --> 00:09:21,060
built an analytical model that works

278
00:09:21,060 --> 00:09:22,680
like this

279
00:09:22,680 --> 00:09:24,959
the analytical model takes as an input

280
00:09:24,959 --> 00:09:26,760
all the information that we learned in

281
00:09:26,760 --> 00:09:28,440
the first part of this talk including

282
00:09:28,440 --> 00:09:30,660
the priority arbitration policy the lane

283
00:09:30,660 --> 00:09:33,180
scheduling policy the different flows in

284
00:09:33,180 --> 00:09:34,440
different things

285
00:09:34,440 --> 00:09:36,600
and then it takes as an input a victim

286
00:09:36,600 --> 00:09:39,180
score and an attacker's placements like

287
00:09:39,180 --> 00:09:40,440
the three ones that we showed in the

288
00:09:40,440 --> 00:09:42,000
previous slide

289
00:09:42,000 --> 00:09:44,880
it computes the number of links that are

290
00:09:44,880 --> 00:09:46,380
shared between the victim and the

291
00:09:46,380 --> 00:09:48,959
attacker under this different placement

292
00:09:48,959 --> 00:09:51,660
and then it returns a normalized score

293
00:09:51,660 --> 00:09:54,300
from 0 to 10 where 10 is the best score

294
00:09:54,300 --> 00:09:56,519
we ever saw in our processor and zero

295
00:09:56,519 --> 00:09:58,080
means that the attacker and the victim

296
00:09:58,080 --> 00:10:00,060
share No links so the attacker will not

297
00:10:00,060 --> 00:10:02,940
be able to observe any contention

298
00:10:02,940 --> 00:10:04,740
let's see more completely what the

299
00:10:04,740 --> 00:10:06,779
analytical model actually does

300
00:10:06,779 --> 00:10:09,360
here is an example with the attacker

301
00:10:09,360 --> 00:10:11,640
running on the fourth row the third

302
00:10:11,640 --> 00:10:13,800
column of the first row and the victim

303
00:10:13,800 --> 00:10:15,959
is still in the same position as before

304
00:10:15,959 --> 00:10:18,180
of all the victims flows that you can

305
00:10:18,180 --> 00:10:20,880
see here in red the only ones that the

306
00:10:20,880 --> 00:10:22,680
target can observe in this specific

307
00:10:22,680 --> 00:10:23,940
placements

308
00:10:23,940 --> 00:10:27,300
are these ones so this is really not a

309
00:10:27,300 --> 00:10:28,800
particularly good placement in fact it

310
00:10:28,800 --> 00:10:30,420
only achieves a low score

311
00:10:30,420 --> 00:10:32,100
by the way the reason why the attacker

312
00:10:32,100 --> 00:10:34,019
can only see these these flows is

313
00:10:34,019 --> 00:10:36,120
because those are the only flows that

314
00:10:36,120 --> 00:10:38,100
share a link with the attacker in

315
00:10:38,100 --> 00:10:39,360
displacement

316
00:10:39,360 --> 00:10:41,279
however let's look at another placement

317
00:10:41,279 --> 00:10:43,080
where we only shift the attacker by one

318
00:10:43,080 --> 00:10:45,360
position so we shift the data left by

319
00:10:45,360 --> 00:10:46,380
one core

320
00:10:46,380 --> 00:10:48,959
as it turns out due to the complexity of

321
00:10:48,959 --> 00:10:51,600
this mesh interconnect displacement is a

322
00:10:51,600 --> 00:10:53,760
particularly good one and all the flows

323
00:10:53,760 --> 00:10:55,380
that are shown in the slide are actually

324
00:10:55,380 --> 00:10:56,760
observable by the attacker in

325
00:10:56,760 --> 00:10:59,399
displacement in fact this placement is

326
00:10:59,399 --> 00:11:00,839
one of the best ones in our processor it

327
00:11:00,839 --> 00:11:02,519
achieves a score of 10.

328
00:11:02,519 --> 00:11:05,160
we also saw that this placement work

329
00:11:05,160 --> 00:11:07,260
much much better to mount side Channel

330
00:11:07,260 --> 00:11:09,240
attacks against cryptographic code and

331
00:11:09,240 --> 00:11:11,220
you can find more details in the paper

332
00:11:11,220 --> 00:11:12,839
but the reason why I showed you all

333
00:11:12,839 --> 00:11:14,640
these was really to introduce the

334
00:11:14,640 --> 00:11:16,680
mitigations part of this talk

335
00:11:16,680 --> 00:11:19,200
as we saw here when that victim runs on

336
00:11:19,200 --> 00:11:21,779
the top left corner there is a placement

337
00:11:21,779 --> 00:11:23,279
where the attacker can achieve a score

338
00:11:23,279 --> 00:11:26,459
of 10. so let's look at this in another

339
00:11:26,459 --> 00:11:28,740
way when the victim runs on that core

340
00:11:28,740 --> 00:11:31,140
the maximum score that the attacker can

341
00:11:31,140 --> 00:11:33,420
achieve is 10 so this is not a very good

342
00:11:33,420 --> 00:11:36,300
core for the victim to pick however what

343
00:11:36,300 --> 00:11:38,459
we found is that if we choose another

344
00:11:38,459 --> 00:11:41,160
victim core for example the victim could

345
00:11:41,160 --> 00:11:44,160
run on the second column third row the

346
00:11:44,160 --> 00:11:45,779
maximum score that the attacker can

347
00:11:45,779 --> 00:11:49,560
achieve is much lower and it is 4. so a

348
00:11:49,560 --> 00:11:51,660
very simple non-invasive mitigation that

349
00:11:51,660 --> 00:11:53,760
we can already use is to schedule

350
00:11:53,760 --> 00:11:56,100
cryptographic software to run on the

351
00:11:56,100 --> 00:11:57,720
least vulnerable course which already

352
00:11:57,720 --> 00:11:59,820
significantly reduces the efficacy of

353
00:11:59,820 --> 00:12:01,800
the attack and we evaluated that this

354
00:12:01,800 --> 00:12:05,100
actually decreases significantly the the

355
00:12:05,100 --> 00:12:07,320
Africans have the attack but we can even

356
00:12:07,320 --> 00:12:09,180
do better because this one only reduces

357
00:12:09,180 --> 00:12:11,399
the score so far and to introduce the

358
00:12:11,399 --> 00:12:13,200
second mitigation I will give you

359
00:12:13,200 --> 00:12:15,180
another example

360
00:12:15,180 --> 00:12:17,459
suppose that the victim runs on the

361
00:12:17,459 --> 00:12:19,680
third row of the first column

362
00:12:19,680 --> 00:12:22,140
once again we can ask the question what

363
00:12:22,140 --> 00:12:24,420
is the best placement for the attacker

364
00:12:24,420 --> 00:12:28,079
now in this plot we show the best scores

365
00:12:28,079 --> 00:12:29,640
that the attacker can achieve when

366
00:12:29,640 --> 00:12:31,620
running on all the different 23 cores

367
00:12:31,620 --> 00:12:34,200
that are available on our processor

368
00:12:34,200 --> 00:12:36,120
it turns out the best score here is 9

369
00:12:36,120 --> 00:12:39,000
when the attacker runs on the third row

370
00:12:39,000 --> 00:12:40,980
of the third column

371
00:12:40,980 --> 00:12:43,260
however notice that there is only one

372
00:12:43,260 --> 00:12:44,579
core where the attacker can really

373
00:12:44,579 --> 00:12:46,440
achieve this high score

374
00:12:46,440 --> 00:12:49,440
so naturally we can ask the question can

375
00:12:49,440 --> 00:12:51,060
we prevent the attacker from taking that

376
00:12:51,060 --> 00:12:52,079
core

377
00:12:52,079 --> 00:12:54,420
since we are Defenders we can just play

378
00:12:54,420 --> 00:12:56,940
with the operating system scheduler and

379
00:12:56,940 --> 00:12:58,740
in fact we can schedule trusted software

380
00:12:58,740 --> 00:13:00,060
to run on that core

381
00:13:00,060 --> 00:13:01,740
trusted software that belongs to the

382
00:13:01,740 --> 00:13:03,839
same security domain as the victim and

383
00:13:03,839 --> 00:13:05,100
then prevent the attacker from taking

384
00:13:05,100 --> 00:13:07,320
that core and just by doing so which

385
00:13:07,320 --> 00:13:09,360
only requires changes to the scheduler

386
00:13:09,360 --> 00:13:12,180
we already reduced the score from 9 to

387
00:13:12,180 --> 00:13:13,380
3.

388
00:13:13,380 --> 00:13:15,420
and even better if we want even more

389
00:13:15,420 --> 00:13:17,519
isolation we can additionally schedule

390
00:13:17,519 --> 00:13:19,440
trusted software to run on three more

391
00:13:19,440 --> 00:13:21,480
cores and reduce the score all the way

392
00:13:21,480 --> 00:13:23,540
down to one

393
00:13:23,540 --> 00:13:26,820
this means that Defenders can reserve

394
00:13:26,820 --> 00:13:28,620
certain cores for the victim's security

395
00:13:28,620 --> 00:13:30,540
domain to reduce the Africans of the

396
00:13:30,540 --> 00:13:31,500
attack

397
00:13:31,500 --> 00:13:34,200
now going forward we could even Envision

398
00:13:34,200 --> 00:13:36,540
better mitigations by for example

399
00:13:36,540 --> 00:13:39,120
combining these with slides partitioning

400
00:13:39,120 --> 00:13:41,040
for example we saw in the previous talk

401
00:13:41,040 --> 00:13:42,959
some many many solutions exist to

402
00:13:42,959 --> 00:13:45,300
provide cash partitioning however that

403
00:13:45,300 --> 00:13:46,560
would require extra Hardware support

404
00:13:46,560 --> 00:13:49,079
that is not yet available

405
00:13:49,079 --> 00:13:51,180
to conclude our talk we also want to

406
00:13:51,180 --> 00:13:52,800
encourage you to check out our GitHub

407
00:13:52,800 --> 00:13:55,320
repository which has the Rd code for all

408
00:13:55,320 --> 00:13:57,480
the experiments in our paper and with

409
00:13:57,480 --> 00:13:58,740
that we would like to conclude our talk

410
00:13:58,740 --> 00:14:00,120
and we're happy to take any questions

411
00:14:00,120 --> 00:14:03,500
thank you for your attention

