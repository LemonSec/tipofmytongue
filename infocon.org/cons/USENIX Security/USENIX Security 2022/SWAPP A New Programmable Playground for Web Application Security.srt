1
00:00:07,880 --> 00:00:11,580
so my name is Park home I'm from Texas A

2
00:00:11,580 --> 00:00:14,219
M University and in this talk I will be

3
00:00:14,219 --> 00:00:16,980
discussing my recent work on swap a new

4
00:00:16,980 --> 00:00:18,480
programmable playground for web

5
00:00:18,480 --> 00:00:21,240
application security and this is a joint

6
00:00:21,240 --> 00:00:23,760
work with Jin Wei Huang and my advisor

7
00:00:23,760 --> 00:00:25,800
Kofi goo

8
00:00:25,800 --> 00:00:29,099
so web tags are still prevalent and

9
00:00:29,099 --> 00:00:31,859
according to a recent statistic millions

10
00:00:31,859 --> 00:00:36,600
of dollars were rewarded to why hat

11
00:00:36,600 --> 00:00:39,180
hackers and unsurprisingly cross-site

12
00:00:39,180 --> 00:00:41,820
scripting attacks are still the most

13
00:00:41,820 --> 00:00:44,879
prevalent type of web attacks

14
00:00:44,879 --> 00:00:47,879
so in response to these attacks there

15
00:00:47,879 --> 00:00:49,980
are three traditional web defense

16
00:00:49,980 --> 00:00:52,520
approaches browser-centric

17
00:00:52,520 --> 00:00:55,920
server-centric and user-centric

18
00:00:55,920 --> 00:00:58,680
for browser-centric solution researcher

19
00:00:58,680 --> 00:01:00,899
usually propose the solution then

20
00:01:00,899 --> 00:01:04,220
browser vendor Implement and integrate

21
00:01:04,220 --> 00:01:07,260
into their system before it being

22
00:01:07,260 --> 00:01:10,140
released to the public however it can

23
00:01:10,140 --> 00:01:12,420
takes years or months

24
00:01:12,420 --> 00:01:15,000
for this process

25
00:01:15,000 --> 00:01:17,880
such example of this browser-centric is

26
00:01:17,880 --> 00:01:21,420
anti-class scripting filters

27
00:01:21,420 --> 00:01:23,580
for server-centric solution web

28
00:01:23,580 --> 00:01:26,280
developers deploy defense on the web

29
00:01:26,280 --> 00:01:28,799
server which can prevent the attack

30
00:01:28,799 --> 00:01:31,500
however this type of Defense lack the

31
00:01:31,500 --> 00:01:34,320
client side and the attacker can still

32
00:01:34,320 --> 00:01:37,639
compromise the user

33
00:01:37,799 --> 00:01:39,780
some example of this server-centric

34
00:01:39,780 --> 00:01:43,380
solution is the firewall or snot

35
00:01:43,380 --> 00:01:46,320
for user-centric solution user install

36
00:01:46,320 --> 00:01:49,500
the defense into their client which can

37
00:01:49,500 --> 00:01:52,500
prevent the attack however this is not

38
00:01:52,500 --> 00:01:54,899
reliable in the perspective of web

39
00:01:54,899 --> 00:01:57,180
developers because

40
00:01:57,180 --> 00:01:59,759
attackers can still compromise other

41
00:01:59,759 --> 00:02:02,880
users who do not install such defense

42
00:02:02,880 --> 00:02:05,340
some example of this type of Defense are

43
00:02:05,340 --> 00:02:09,000
browser extension like ad blockers

44
00:02:09,000 --> 00:02:11,580
and usually for these defenses they are

45
00:02:11,580 --> 00:02:14,400
unique there are no unified platform and

46
00:02:14,400 --> 00:02:16,560
they are implemented as a standalone

47
00:02:16,560 --> 00:02:18,060
application

48
00:02:18,060 --> 00:02:20,459
so in this work we want to build a

49
00:02:20,459 --> 00:02:22,500
unified platform that covers the

50
00:02:22,500 --> 00:02:25,920
previous solution weakness and we want

51
00:02:25,920 --> 00:02:28,500
three characteristic in our new platform

52
00:02:28,500 --> 00:02:31,560
which are the programmability locality

53
00:02:31,560 --> 00:02:34,319
and adoptability

54
00:02:34,319 --> 00:02:37,620
for the programmability we want our

55
00:02:37,620 --> 00:02:40,140
platform to be easy to implement install

56
00:02:40,140 --> 00:02:43,500
and update so it can support fast

57
00:02:43,500 --> 00:02:45,480
prototyping and can respond to new

58
00:02:45,480 --> 00:02:47,580
attacks quickly

59
00:02:47,580 --> 00:02:50,280
for the locality we want our platform to

60
00:02:50,280 --> 00:02:53,040
run on the client side and it should be

61
00:02:53,040 --> 00:02:55,319
secure against attackers especially

62
00:02:55,319 --> 00:02:58,620
cross-site scripting attackers

63
00:02:58,620 --> 00:03:01,980
and for the adoptability we want no user

64
00:03:01,980 --> 00:03:05,459
action because as I mentioned it's not

65
00:03:05,459 --> 00:03:07,739
reliable to rely on users to protect

66
00:03:07,739 --> 00:03:10,800
themselves and we want minimal change to

67
00:03:10,800 --> 00:03:13,019
the Legacy code

68
00:03:13,019 --> 00:03:16,200
so in this work we propose and develop

69
00:03:16,200 --> 00:03:19,440
swap a new programmable platform the

70
00:03:19,440 --> 00:03:22,800
pipeline of swap is simple webdrop

71
00:03:22,800 --> 00:03:24,959
simply includes swap along with the

72
00:03:24,959 --> 00:03:27,720
website because swap is implemented as

73
00:03:27,720 --> 00:03:29,780
JavaScript library

74
00:03:29,780 --> 00:03:32,760
including swap in the website is as easy

75
00:03:32,760 --> 00:03:36,300
as importing a Javascript file

76
00:03:36,300 --> 00:03:40,620
then web developers can install existing

77
00:03:40,620 --> 00:03:43,080
swap apps that we developed or others

78
00:03:43,080 --> 00:03:45,500
developed or compose their own

79
00:03:45,500 --> 00:03:48,599
application and then install it on the

80
00:03:48,599 --> 00:03:51,299
client this will prevent the attackers

81
00:03:51,299 --> 00:03:55,140
from compromising the clients

82
00:03:55,140 --> 00:03:57,980
so swap provide the programmability

83
00:03:57,980 --> 00:04:01,500
through the applications so swap

84
00:04:01,500 --> 00:04:03,720
application runs in the event-based

85
00:04:03,720 --> 00:04:06,720
manner where suppose user interact with

86
00:04:06,720 --> 00:04:09,720
the website this will generate a trigger

87
00:04:09,720 --> 00:04:13,019
such as web requests or web response and

88
00:04:13,019 --> 00:04:16,320
then applications can resist a

89
00:04:16,320 --> 00:04:18,478
corresponding event handler such as

90
00:04:18,478 --> 00:04:21,358
request Handler or respond Handler

91
00:04:21,358 --> 00:04:24,600
and we provide four categories of

92
00:04:24,600 --> 00:04:28,440
interface so that developers can

93
00:04:28,440 --> 00:04:32,600
compose using these apis

94
00:04:33,060 --> 00:04:35,340
to provide the locality we Implement

95
00:04:35,340 --> 00:04:39,060
swap in a inside service worker and this

96
00:04:39,060 --> 00:04:41,340
is why we also call our approach as

97
00:04:41,340 --> 00:04:44,100
service worker Centric approach

98
00:04:44,100 --> 00:04:46,680
and you might ask what exactly is a

99
00:04:46,680 --> 00:04:49,860
service worker so service worker is a

100
00:04:49,860 --> 00:04:52,919
special execution environment context

101
00:04:52,919 --> 00:04:55,320
for JavaScript it runs in the web

102
00:04:55,320 --> 00:04:59,340
browsers but it has no direct access

103
00:04:59,340 --> 00:05:02,699
between the main page and the service

104
00:05:02,699 --> 00:05:05,400
worker context however it acts like a

105
00:05:05,400 --> 00:05:07,440
proxy between the web page and the web

106
00:05:07,440 --> 00:05:08,820
server

107
00:05:08,820 --> 00:05:11,400
and web server usually deploy service

108
00:05:11,400 --> 00:05:14,400
worker to handle certain tasks

109
00:05:14,400 --> 00:05:17,340
two of the most popular tasks that they

110
00:05:17,340 --> 00:05:19,500
utilize service worker for is for

111
00:05:19,500 --> 00:05:23,940
offline access and for push notification

112
00:05:23,940 --> 00:05:27,000
however implementing swap inside service

113
00:05:27,000 --> 00:05:31,080
worker is by no means simple so we have

114
00:05:31,080 --> 00:05:33,419
to address multiple challenges and one

115
00:05:33,419 --> 00:05:35,880
of the challenge is that the service

116
00:05:35,880 --> 00:05:39,000
worker could be compromised and as we

117
00:05:39,000 --> 00:05:41,160
have seen in previous work even though

118
00:05:41,160 --> 00:05:43,560
the web page and the service worker runs

119
00:05:43,560 --> 00:05:45,600
in two different contexts and there's no

120
00:05:45,600 --> 00:05:47,820
direct access there are multiple

121
00:05:47,820 --> 00:05:50,580
indirect channels that attackers can

122
00:05:50,580 --> 00:05:53,820
utilize to compromise service worker

123
00:05:53,820 --> 00:05:58,080
which could also compromise uh swap

124
00:05:58,080 --> 00:05:59,940
suppose like there's a cross-site

125
00:05:59,940 --> 00:06:02,280
scripting attack as we know is the most

126
00:06:02,280 --> 00:06:05,220
prevalent attack then Swap and service

127
00:06:05,220 --> 00:06:09,240
worker is no longer safe in this case so

128
00:06:09,240 --> 00:06:12,440
as part of swap design we have to

129
00:06:12,440 --> 00:06:15,060
enhance this

130
00:06:15,060 --> 00:06:15,979
um

131
00:06:15,979 --> 00:06:17,520
channels

132
00:06:17,520 --> 00:06:20,759
and prevent attacks from cross-site

133
00:06:20,759 --> 00:06:23,100
scripting attacker please refer to the

134
00:06:23,100 --> 00:06:24,960
paper for more details regarding this

135
00:06:24,960 --> 00:06:28,560
Challenge and the other challenge

136
00:06:28,560 --> 00:06:32,160
for the adoptability of swap I want to

137
00:06:32,160 --> 00:06:34,380
mention about an existing cash

138
00:06:34,380 --> 00:06:37,319
management Library called workbox as I

139
00:06:37,319 --> 00:06:40,319
mentioned service worker is used in many

140
00:06:40,319 --> 00:06:43,259
ways including for offline usage and

141
00:06:43,259 --> 00:06:46,020
push notification so it's possible that

142
00:06:46,020 --> 00:06:47,940
there's existing libraries that the

143
00:06:47,940 --> 00:06:51,240
website already using so we showed that

144
00:06:51,240 --> 00:06:55,139
swap can be adopted by developers easily

145
00:06:55,139 --> 00:06:58,740
by encapsulating workbox by simply

146
00:06:58,740 --> 00:07:02,419
changing 30 lines of code

147
00:07:02,460 --> 00:07:07,139
and according to our statistic 95 of the

148
00:07:07,139 --> 00:07:10,020
clients already supports uh Swap apis

149
00:07:10,020 --> 00:07:15,500
and 90 of web servers are swapped really

150
00:07:15,660 --> 00:07:19,020
to evaluate swap um in this talk I will

151
00:07:19,020 --> 00:07:21,539
cover the programmability and the

152
00:07:21,539 --> 00:07:25,099
performance of swap

153
00:07:25,919 --> 00:07:28,139
for the programmability I want to

154
00:07:28,139 --> 00:07:31,199
highlight uh four of the apps that we

155
00:07:31,199 --> 00:07:33,900
Implement so the first app that we

156
00:07:33,900 --> 00:07:37,020
Implement is Dom card Dom card is used

157
00:07:37,020 --> 00:07:39,539
to mitigate against Dom cross-site

158
00:07:39,539 --> 00:07:41,940
scripting attacks we Implement Dom card

159
00:07:41,940 --> 00:07:45,360
using swap which requires only about 400

160
00:07:45,360 --> 00:07:47,580
lines of code AS compared to

161
00:07:47,580 --> 00:07:50,880
non-purified which is an existing

162
00:07:50,880 --> 00:07:53,580
uh web defense which required

163
00:07:53,580 --> 00:07:56,880
approximately 1500 lines of code

164
00:07:56,880 --> 00:07:59,699
we have also implemented autofill guard

165
00:07:59,699 --> 00:08:02,639
and cash card which can be used to

166
00:08:02,639 --> 00:08:05,039
mitigate against information disclosure

167
00:08:05,039 --> 00:08:07,940
attack and they are used for different

168
00:08:07,940 --> 00:08:11,280
scenarios and these two apps can be

169
00:08:11,280 --> 00:08:14,580
implemented using only approximately 200

170
00:08:14,580 --> 00:08:16,860
lines of code each

171
00:08:16,860 --> 00:08:19,620
and we also Implement data card using

172
00:08:19,620 --> 00:08:22,199
300 lines of code and this can be used

173
00:08:22,199 --> 00:08:25,379
to prevent mitigate insecure direct

174
00:08:25,379 --> 00:08:28,699
object inference attack

175
00:08:29,340 --> 00:08:33,059
and Swap and our apps are publicly

176
00:08:33,059 --> 00:08:36,240
released in our GitHub link so be sure

177
00:08:36,240 --> 00:08:38,820
to check that out in the GitHub we have

178
00:08:38,820 --> 00:08:42,299
also provided demo for each app and

179
00:08:42,299 --> 00:08:44,279
there is more there are more apps that

180
00:08:44,279 --> 00:08:46,500
we have developed and it's not covered

181
00:08:46,500 --> 00:08:50,040
in the uh this talk

182
00:08:50,040 --> 00:08:53,640
to evaluate the performance of swap we

183
00:08:53,640 --> 00:08:57,540
install swap on WordPress and phpb and

184
00:08:57,540 --> 00:09:00,000
then we install four of the apps that I

185
00:09:00,000 --> 00:09:03,000
mentioned then we measure the several

186
00:09:03,000 --> 00:09:06,060
metrics including CPU usage Network

187
00:09:06,060 --> 00:09:09,360
bandwidth and the page load time

188
00:09:09,360 --> 00:09:12,000
for the CPU usage and network bandwidth

189
00:09:12,000 --> 00:09:14,700
we found that it's almost negligible

190
00:09:14,700 --> 00:09:16,279
overhead

191
00:09:16,279 --> 00:09:19,200
and for the page load time we used

192
00:09:19,200 --> 00:09:22,740
chrome devtool with the Fast 3D setting

193
00:09:22,740 --> 00:09:26,040
and we find that for WordPress there is

194
00:09:26,040 --> 00:09:30,300
about 20 additional uh PS load time and

195
00:09:30,300 --> 00:09:33,120
about 30 percent pistol time for the PHP

196
00:09:33,120 --> 00:09:34,560
BB

197
00:09:34,560 --> 00:09:38,100
however these performance could be

198
00:09:38,100 --> 00:09:40,860
further optimized and reduced the

199
00:09:40,860 --> 00:09:45,440
overhead to 15 to 25 percent

200
00:09:45,540 --> 00:09:49,019
so to conclude in this work we propose

201
00:09:49,019 --> 00:09:51,540
and develop swap a unified platform for

202
00:09:51,540 --> 00:09:54,300
programmable security and we compose

203
00:09:54,300 --> 00:09:56,519
swap apps to mitigate popular web

204
00:09:56,519 --> 00:10:00,120
attacks and we evaluate Swap and show

205
00:10:00,120 --> 00:10:02,100
swap apps are programmable with

206
00:10:02,100 --> 00:10:05,459
reasonable performance overhead and all

207
00:10:05,459 --> 00:10:08,519
our developed platform and apps are open

208
00:10:08,519 --> 00:10:11,040
source so please feel free to check out

209
00:10:11,040 --> 00:10:14,100
the GitHub link and also our paper and

210
00:10:14,100 --> 00:10:17,899
I'll be happy to take questions

