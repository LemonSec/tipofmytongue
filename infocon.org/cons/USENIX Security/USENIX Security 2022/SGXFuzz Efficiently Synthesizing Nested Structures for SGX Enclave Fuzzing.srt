1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:08,039 --> 00:00:10,679
thank you and hello everybody I'm going

3
00:00:10,679 --> 00:00:12,660
to present extra X Plus efficiently

4
00:00:12,660 --> 00:00:14,940
synthesizing nasal structures for astrix

5
00:00:14,940 --> 00:00:16,079
enclaves

6
00:00:16,079 --> 00:00:20,340
so what applications use sgx

7
00:00:20,340 --> 00:00:22,680
like Daniel started they are maybe

8
00:00:22,680 --> 00:00:25,080
password managers but it turns out that

9
00:00:25,080 --> 00:00:27,859
they don't use sgx or at least anymore

10
00:00:27,859 --> 00:00:32,780
then sjx can be used to protect

11
00:00:32,780 --> 00:00:37,380
like when when you run The Enclave on a

12
00:00:37,380 --> 00:00:40,200
remote machine you can be sure that this

13
00:00:40,200 --> 00:00:42,360
code is secure even if the system is

14
00:00:42,360 --> 00:00:43,860
compromised

15
00:00:43,860 --> 00:00:46,800
next there are fingerprint drivers that

16
00:00:46,800 --> 00:00:48,780
store the barometric data in sjx

17
00:00:48,780 --> 00:00:52,079
enclaves so so an attacker cannot leak

18
00:00:52,079 --> 00:00:56,600
this data if it takes to the system

19
00:00:57,360 --> 00:00:59,820
you already heard about the monitor of

20
00:00:59,820 --> 00:01:02,039
sjx for this talk it's especially

21
00:01:02,039 --> 00:01:04,920
important to go one level higher to the

22
00:01:04,920 --> 00:01:06,420
software side

23
00:01:06,420 --> 00:01:09,720
the sjx application consists of an host

24
00:01:09,720 --> 00:01:12,360
application in the untrusted world

25
00:01:12,360 --> 00:01:14,820
and the secure Enclave

26
00:01:14,820 --> 00:01:17,180
and during this

27
00:01:17,180 --> 00:01:20,400
application the host application calls

28
00:01:20,400 --> 00:01:22,560
into the enclave and The Enclave

29
00:01:22,560 --> 00:01:26,340
processes this untrusted data combines

30
00:01:26,340 --> 00:01:28,860
this with the Secure Storage keys and

31
00:01:28,860 --> 00:01:31,820
sends back the results

32
00:01:32,400 --> 00:01:35,040
yeah it is important that the untrusted

33
00:01:35,040 --> 00:01:37,259
data passes the trust boundary

34
00:01:37,259 --> 00:01:39,960
and you can imagine this like a library

35
00:01:39,960 --> 00:01:43,740
like a C library The Enclave provides a

36
00:01:43,740 --> 00:01:45,479
function interface and the host

37
00:01:45,479 --> 00:01:48,299
application calls into The Enclave with

38
00:01:48,299 --> 00:01:51,740
a set of parameters

39
00:01:52,619 --> 00:01:55,500
so let me talk about the history of

40
00:01:55,500 --> 00:01:57,479
vulnerability detection in SGS X

41
00:01:57,479 --> 00:01:58,979
enclaves

42
00:01:58,979 --> 00:02:02,340
there's a tale of two words this paper

43
00:02:02,340 --> 00:02:06,119
analyzed manually the sjx sdks and found

44
00:02:06,119 --> 00:02:08,758
several vulnerabilities

45
00:02:08,758 --> 00:02:12,060
then represented T-Rex which uses

46
00:02:12,060 --> 00:02:13,980
symbolic execution to detect memory

47
00:02:13,980 --> 00:02:16,860
corruption vulnerabilities

48
00:02:16,860 --> 00:02:21,420
this paper also shows the sgx enclaves

49
00:02:21,420 --> 00:02:24,060
are highly exploitable so if you find

50
00:02:24,060 --> 00:02:25,860
any corruptial buyer that can be

51
00:02:25,860 --> 00:02:28,680
controlled by an attacker this can most

52
00:02:28,680 --> 00:02:32,540
probably used for an attack

53
00:02:32,940 --> 00:02:36,780
then there's coin attacks this we use a

54
00:02:36,780 --> 00:02:38,640
symbolic execution to find concurrency

55
00:02:38,640 --> 00:02:42,000
bugs within sjx enclaves

56
00:02:42,000 --> 00:02:44,459
now the symbolic execution has some

57
00:02:44,459 --> 00:02:47,040
limitations for example the most

58
00:02:47,040 --> 00:02:48,660
important challenge of the state

59
00:02:48,660 --> 00:02:50,040
explosion

60
00:02:50,040 --> 00:02:52,860
when you analyze an sgx enclave a

61
00:02:52,860 --> 00:02:55,080
special production runs we have all

62
00:02:55,080 --> 00:02:56,879
these memory management functions like

63
00:02:56,879 --> 00:03:00,060
mem copy malloc and free that are high

64
00:03:00,060 --> 00:03:02,640
burden for the symbolic execution but

65
00:03:02,640 --> 00:03:06,500
rarely contain vulnerabilities

66
00:03:06,840 --> 00:03:09,660
this leads to false negatives results

67
00:03:09,660 --> 00:03:11,640
because interesting code might not even

68
00:03:11,640 --> 00:03:13,319
be reached

69
00:03:13,319 --> 00:03:15,360
there may also be some false positive

70
00:03:15,360 --> 00:03:16,500
results

71
00:03:16,500 --> 00:03:18,840
because the memory model is not that

72
00:03:18,840 --> 00:03:21,239
accurate to the real system for example

73
00:03:21,239 --> 00:03:24,540
T-Rex only emulates the secure world so

74
00:03:24,540 --> 00:03:26,760
you have to manually verify if the

75
00:03:26,760 --> 00:03:28,400
pointers are actually

76
00:03:28,400 --> 00:03:31,940
attacking controllable

77
00:03:32,640 --> 00:03:36,060
so now represent sjx fast

78
00:03:36,060 --> 00:03:38,340
which provides Enclave fuzzing at Native

79
00:03:38,340 --> 00:03:39,300
speed

80
00:03:39,300 --> 00:03:41,700
it provides accurate results for

81
00:03:41,700 --> 00:03:45,000
productive enclaves fully automatic

82
00:03:45,000 --> 00:03:48,599
we achieve about our trials coverage of

83
00:03:48,599 --> 00:03:52,879
T-Rex the T-Rex analysis

84
00:03:53,280 --> 00:03:56,340
so to the principle of fasting the

85
00:03:56,340 --> 00:03:59,640
father is a program that generates most

86
00:03:59,640 --> 00:04:01,140
the random input

87
00:04:01,140 --> 00:04:03,659
sends this to the Target process

88
00:04:03,659 --> 00:04:06,060
the target process is analyzed for the

89
00:04:06,060 --> 00:04:09,840
coverage and then the further checks if

90
00:04:09,840 --> 00:04:11,760
new code is reached or even if a buck

91
00:04:11,760 --> 00:04:13,200
was triggered

92
00:04:13,200 --> 00:04:15,540
and now it generates using this

93
00:04:15,540 --> 00:04:19,260
information the next fuzzing input

94
00:04:19,260 --> 00:04:22,199
now when we try to fasten sjx Enclave

95
00:04:22,199 --> 00:04:25,860
very few challenges first Enclave of

96
00:04:25,860 --> 00:04:28,740
course not observable by Design because

97
00:04:28,740 --> 00:04:31,620
this is the most important point of sjx

98
00:04:31,620 --> 00:04:34,020
but this for us this means we cannot

99
00:04:34,020 --> 00:04:36,960
extract coverage data

100
00:04:36,960 --> 00:04:40,080
second sjx and caves are like a library

101
00:04:40,080 --> 00:04:42,900
and have a function interface so you

102
00:04:42,900 --> 00:04:45,120
have to generate structured input and

103
00:04:45,120 --> 00:04:49,639
the classical linear input does not work

104
00:04:50,400 --> 00:04:53,699
so therefore we built a damper and

105
00:04:53,699 --> 00:04:57,060
Runner inside fysjx files the Stamper

106
00:04:57,060 --> 00:04:59,820
extracts the code and the data from The

107
00:04:59,820 --> 00:05:00,840
Enclave

108
00:05:00,840 --> 00:05:03,840
and compiles it into Runner the runner

109
00:05:03,840 --> 00:05:07,080
emulates the entry to the vehicle and

110
00:05:07,080 --> 00:05:09,479
now we can just natively execute the

111
00:05:09,479 --> 00:05:14,240
equal codes because it's just x86 code

112
00:05:14,580 --> 00:05:16,500
this allows us to run unmodified

113
00:05:16,500 --> 00:05:18,680
production enclaves in the user space

114
00:05:18,680 --> 00:05:21,120
this allows us to

115
00:05:21,120 --> 00:05:24,479
uh get the coverage data and we achieve

116
00:05:24,479 --> 00:05:27,979
native execution speed

117
00:05:29,160 --> 00:05:32,520
the Second Challenge to generate first a

118
00:05:32,520 --> 00:05:34,860
structured fuzzling input

119
00:05:34,860 --> 00:05:37,139
I'll start the explanation with

120
00:05:37,139 --> 00:05:39,440
unstructured fasting so the first stage

121
00:05:39,440 --> 00:05:42,360
the the simplifiers are just generates

122
00:05:42,360 --> 00:05:45,120
random linear data

123
00:05:45,120 --> 00:05:48,120
when you go to structured fuzzing we

124
00:05:48,120 --> 00:05:51,680
have a pattern for the buzzer like a PNG

125
00:05:51,680 --> 00:05:55,979
PNG image that gives a structure but the

126
00:05:55,979 --> 00:05:58,020
data is still linear

127
00:05:58,020 --> 00:06:01,759
now we present nested structured fuzzing

128
00:06:01,759 --> 00:06:04,919
for for this one we need pointers and

129
00:06:04,919 --> 00:06:07,020
Belfast for the website process as an

130
00:06:07,020 --> 00:06:08,160
input

131
00:06:08,160 --> 00:06:10,620
for Azure extern clay if we just have a

132
00:06:10,620 --> 00:06:12,360
single pointer that is given to a

133
00:06:12,360 --> 00:06:16,259
vehicle and this points to a buffer with

134
00:06:16,259 --> 00:06:18,660
several Fields the important point is

135
00:06:18,660 --> 00:06:21,180
this buffer can again contain pointers

136
00:06:21,180 --> 00:06:23,460
so we have to generate a nested

137
00:06:23,460 --> 00:06:26,340
structure and other pointers have also

138
00:06:26,340 --> 00:06:29,119
be resolvable

139
00:06:30,979 --> 00:06:34,500
now we need somehow to get the

140
00:06:34,500 --> 00:06:36,539
information how the structure looks like

141
00:06:36,539 --> 00:06:40,440
for this we also need the data that the

142
00:06:40,440 --> 00:06:42,419
fossils collects

143
00:06:42,419 --> 00:06:44,900
because when a structure is invalid

144
00:06:44,900 --> 00:06:47,520
there most probably is an invalid memory

145
00:06:47,520 --> 00:06:51,620
access that generates a crash

146
00:06:51,960 --> 00:06:54,199
and this information can be used to

147
00:06:54,199 --> 00:06:57,120
modify the structure on the Fly

148
00:06:57,120 --> 00:06:59,759
for example when we see that the crash

149
00:06:59,759 --> 00:07:02,460
is at the end of the existing buffer we

150
00:07:02,460 --> 00:07:04,740
know this buffer was too short and we

151
00:07:04,740 --> 00:07:07,759
extend this buffer

152
00:07:08,039 --> 00:07:11,819
when we see the address is the crashes

153
00:07:11,819 --> 00:07:14,280
and at another address but this address

154
00:07:14,280 --> 00:07:16,919
is contained within one buffer of the

155
00:07:16,919 --> 00:07:21,180
structure we know there was a very

156
00:07:21,180 --> 00:07:24,720
International buffer at this address so

157
00:07:24,720 --> 00:07:26,940
we add this buffer and create a new

158
00:07:26,940 --> 00:07:29,400
level of nesting

159
00:07:29,400 --> 00:07:32,819
and lastly of course if the best if the

160
00:07:32,819 --> 00:07:35,460
crash is unrelated to the structure we

161
00:07:35,460 --> 00:07:38,039
add the scratch to the backlog

162
00:07:38,039 --> 00:07:40,620
in this process we also detect size

163
00:07:40,620 --> 00:07:43,139
Fields if you're interested in this I

164
00:07:43,139 --> 00:07:46,099
refer to the paper

165
00:07:46,860 --> 00:07:49,979
now back to the big picture we extracted

166
00:07:49,979 --> 00:07:52,740
The Enclave from the sjx hardware to

167
00:07:52,740 --> 00:07:56,099
make the running observable

168
00:07:56,099 --> 00:07:58,919
and we generate NASA structures on the

169
00:07:58,919 --> 00:08:01,800
fly so we can successfully generate

170
00:08:01,800 --> 00:08:06,380
input that is acceptable for The Enclave

171
00:08:06,599 --> 00:08:09,960
so the results we test tested at checks

172
00:08:09,960 --> 00:08:13,919
was using 30 enclaves found 79 bucks and

173
00:08:13,919 --> 00:08:16,979
three TVs

174
00:08:16,979 --> 00:08:19,620
there are two notable groups we have

175
00:08:19,620 --> 00:08:22,440
seven closed Source enclaves which are

176
00:08:22,440 --> 00:08:25,259
all fingerprint reader drivers and seven

177
00:08:25,259 --> 00:08:29,840
open source enclaves that contain bugs

178
00:08:29,940 --> 00:08:32,820
we found vulnerabilities and all major

179
00:08:32,820 --> 00:08:35,279
fingerprint driver enclaves

180
00:08:35,279 --> 00:08:39,059
and in sjx wallet which is a crypto

181
00:08:39,059 --> 00:08:42,859
wallet to store your tokens

182
00:08:44,760 --> 00:08:48,779
so let me talk about the bugs an sjx

183
00:08:48,779 --> 00:08:51,600
wallet we found an out-of-bound ride and

184
00:08:51,600 --> 00:08:53,820
an initialized pointer was used

185
00:08:53,820 --> 00:08:56,700
unless strong attack model of s3x

186
00:08:56,700 --> 00:08:59,399
this is exploitable and we wrote a proof

187
00:08:59,399 --> 00:09:01,380
of concept that extracts the secret

188
00:09:01,380 --> 00:09:03,899
piece so an attacker May steal all coins

189
00:09:03,899 --> 00:09:05,940
in the wallet

190
00:09:05,940 --> 00:09:07,680
the scale Network awarded us with the

191
00:09:07,680 --> 00:09:10,519
back Bounty for this

192
00:09:11,339 --> 00:09:12,480
next

193
00:09:12,480 --> 00:09:16,140
where the fingerprint driver enclaves

194
00:09:16,140 --> 00:09:19,260
first The synaptics Enclave contains an

195
00:09:19,260 --> 00:09:20,760
integer overflow in the size of

196
00:09:20,760 --> 00:09:22,920
calculation would lead to a buffer

197
00:09:22,920 --> 00:09:25,080
overflow

198
00:09:25,080 --> 00:09:27,240
next the good extreme apron driver

199
00:09:27,240 --> 00:09:29,760
Enclave contained a null pointed Euro

200
00:09:29,760 --> 00:09:31,860
reference which leads to an arbitrary

201
00:09:31,860 --> 00:09:33,120
read

202
00:09:33,120 --> 00:09:35,279
this is especially notable for sjx

203
00:09:35,279 --> 00:09:38,399
exploitation because the null page is a

204
00:09:38,399 --> 00:09:39,899
technical controlled in the attack model

205
00:09:39,899 --> 00:09:41,580
of sjx

206
00:09:41,580 --> 00:09:44,100
we use the thermal vulnerability to

207
00:09:44,100 --> 00:09:46,980
write a proof of concept exploit to dump

208
00:09:46,980 --> 00:09:50,120
all Enclave memory

209
00:09:51,120 --> 00:09:53,660
when we have the Elon engine Tech

210
00:09:53,660 --> 00:09:57,480
enclaves which contain very very many

211
00:09:57,480 --> 00:09:59,519
bugs including unchecked callback

212
00:09:59,519 --> 00:10:02,100
pointers so we have arbitrary code

213
00:10:02,100 --> 00:10:05,100
execution within the enclaves

214
00:10:05,100 --> 00:10:07,800
vessels the security testing is

215
00:10:07,800 --> 00:10:10,740
essential for extractionclaves and this

216
00:10:10,740 --> 00:10:13,260
is as Jack's fast is effective to find

217
00:10:13,260 --> 00:10:16,220
these vulnerabilities

218
00:10:16,260 --> 00:10:19,260
yeah thank you and I want to conclude if

219
00:10:19,260 --> 00:10:20,880
you're interested also talk to me about

220
00:10:20,880 --> 00:10:23,120
our upcoming papers

221
00:10:23,120 --> 00:10:26,700
about as life runtime at the station sqx

222
00:10:26,700 --> 00:10:29,519
and return on programming on risk 5.

223
00:10:29,519 --> 00:10:32,120
thank you

