1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:08,720 --> 00:00:11,099
thank you for being here

3
00:00:11,099 --> 00:00:12,059
um

4
00:00:12,059 --> 00:00:14,160
I'm Amin and I'll be presenting our

5
00:00:14,160 --> 00:00:15,839
Warwick Dynamic searchable encryption

6
00:00:15,839 --> 00:00:17,460
with optimal search in the presence of

7
00:00:17,460 --> 00:00:20,100
deletions this is joined work by Java

8
00:00:20,100 --> 00:00:22,859
Demetrius myself and Jan is my advisor

9
00:00:22,859 --> 00:00:24,000
so

10
00:00:24,000 --> 00:00:26,760
now these using clouds has become very

11
00:00:26,760 --> 00:00:28,500
prevalent I don't have to go through

12
00:00:28,500 --> 00:00:31,260
that part but given the many potentials

13
00:00:31,260 --> 00:00:33,660
for breaches like malice human or

14
00:00:33,660 --> 00:00:34,460
whatever

15
00:00:34,460 --> 00:00:37,079
there's a serious challenge of private

16
00:00:37,079 --> 00:00:39,960
cloud computing therefore

17
00:00:39,960 --> 00:00:42,180
sorry I cannot

18
00:00:42,180 --> 00:00:44,940
therefore

19
00:00:44,940 --> 00:00:47,940
sorry I'm having a weird issue right

20
00:00:47,940 --> 00:00:50,120
here

21
00:00:52,920 --> 00:00:55,280
sorry

22
00:01:07,320 --> 00:01:10,619
anyway so

23
00:01:10,619 --> 00:01:12,060
pardon

24
00:01:12,060 --> 00:01:14,820
all right yeah some things something's

25
00:01:14,820 --> 00:01:15,960
not working anyway I'll go through

26
00:01:15,960 --> 00:01:17,880
anyway so

27
00:01:17,880 --> 00:01:19,140
okay

28
00:01:19,140 --> 00:01:21,299
um malice human error challenge for

29
00:01:21,299 --> 00:01:23,159
private Computing so the first step

30
00:01:23,159 --> 00:01:25,619
would be encryption standard encryption

31
00:01:25,619 --> 00:01:27,720
but that's not enough for example you

32
00:01:27,720 --> 00:01:30,119
would need to have your client only be

33
00:01:30,119 --> 00:01:31,799
the only person who sees the encryption

34
00:01:31,799 --> 00:01:33,960
key and also you want to have efficient

35
00:01:33,960 --> 00:01:37,079
processing of the data now a solution as

36
00:01:37,079 --> 00:01:38,340
you've seen in the previous talks is

37
00:01:38,340 --> 00:01:40,079
searchable encryption for a stronger

38
00:01:40,079 --> 00:01:42,240
doll first introduced by songadal in the

39
00:01:42,240 --> 00:01:44,820
year 2000. it has received a lot of

40
00:01:44,820 --> 00:01:46,920
attention in so many parts but the part

41
00:01:46,920 --> 00:01:48,900
that I want to focus on here is dynamic

42
00:01:48,900 --> 00:01:50,280
searchable encryption which basically

43
00:01:50,280 --> 00:01:52,079
means you want to have efficient search

44
00:01:52,079 --> 00:01:56,399
while you can update your data set

45
00:01:56,399 --> 00:01:58,200
um it has a lot of applications recently

46
00:01:58,200 --> 00:02:00,479
it was added to mongodb as their

47
00:02:00,479 --> 00:02:04,020
queryable encryption feature set you can

48
00:02:04,020 --> 00:02:05,939
use it for an updated image search it

49
00:02:05,939 --> 00:02:08,280
was proposed to be used for gun registry

50
00:02:08,280 --> 00:02:11,760
and the generic basic step a basic thing

51
00:02:11,760 --> 00:02:13,560
that you can make with searchable

52
00:02:13,560 --> 00:02:15,959
encryption boils down to an encrypted

53
00:02:15,959 --> 00:02:17,700
key value store and therefore databases

54
00:02:17,700 --> 00:02:20,700
and the classic example ends up being a

55
00:02:20,700 --> 00:02:23,099
encrypted inverted indexes for example

56
00:02:23,099 --> 00:02:25,020
for emails or documents as you've seen

57
00:02:25,020 --> 00:02:26,099
already

58
00:02:26,099 --> 00:02:29,160
so in Dynamic searchable encryption it

59
00:02:29,160 --> 00:02:30,959
boils down to three basic protocols

60
00:02:30,959 --> 00:02:33,120
first one is set up so when you have a

61
00:02:33,120 --> 00:02:35,040
multi-map and buy a multi-map it's a map

62
00:02:35,040 --> 00:02:36,959
with multiple potentially multiple

63
00:02:36,959 --> 00:02:39,840
values for each key the client wants to

64
00:02:39,840 --> 00:02:42,599
Outsource this to a to an untrusted

65
00:02:42,599 --> 00:02:46,920
cloud and so the client encrypts it in a

66
00:02:46,920 --> 00:02:48,840
way that obscures the Cloud's view into

67
00:02:48,840 --> 00:02:50,760
the data this may be by encrypting each

68
00:02:50,760 --> 00:02:53,340
value and then shuffling them and then

69
00:02:53,340 --> 00:02:55,620
sends it and the setup is complete

70
00:02:55,620 --> 00:02:58,319
similarly the second protocol is search

71
00:02:58,319 --> 00:03:02,400
where uh there's a keyword or a key that

72
00:03:02,400 --> 00:03:04,560
the client wants to search for encrypts

73
00:03:04,560 --> 00:03:06,480
it in a manner that the client cannot

74
00:03:06,480 --> 00:03:09,120
see into it but still can perform the

75
00:03:09,120 --> 00:03:11,819
search sends it and as a result the

76
00:03:11,819 --> 00:03:13,260
server accesses the memory locations

77
00:03:13,260 --> 00:03:16,620
necessary and Returns the results

78
00:03:16,620 --> 00:03:19,080
um lastly there's update which

79
00:03:19,080 --> 00:03:20,040
um

80
00:03:20,040 --> 00:03:22,080
boils down to insertions and deletions

81
00:03:22,080 --> 00:03:26,159
of key value pairs again encrypting to

82
00:03:26,159 --> 00:03:28,500
only give as much information as

83
00:03:28,500 --> 00:03:29,940
necessary

84
00:03:29,940 --> 00:03:33,239
now the cloud in this scenario only

85
00:03:33,239 --> 00:03:35,700
learns something called leakage which is

86
00:03:35,700 --> 00:03:38,640
very strictly controlled it should be

87
00:03:38,640 --> 00:03:39,599
well defined and proven

88
00:03:39,599 --> 00:03:42,120
cryptographically and it boils down to

89
00:03:42,120 --> 00:03:44,099
three parts one for each protocol as you

90
00:03:44,099 --> 00:03:46,500
can see one is set up leakage usually

91
00:03:46,500 --> 00:03:48,599
boils down to only the total size then

92
00:03:48,599 --> 00:03:50,040
there's the search leakage search

93
00:03:50,040 --> 00:03:52,379
pattern query and access pattern

94
00:03:52,379 --> 00:03:55,080
uh and finally there's update leakage

95
00:03:55,080 --> 00:03:57,180
which is a little more complicated so

96
00:03:57,180 --> 00:04:00,060
I'll give it a whole slide

97
00:04:00,060 --> 00:04:01,980
um starting with the multi-map that we

98
00:04:01,980 --> 00:04:03,599
got in the previous slide

99
00:04:03,599 --> 00:04:04,980
um if the client wants to search for one

100
00:04:04,980 --> 00:04:06,480
key as you see in the saw in the

101
00:04:06,480 --> 00:04:09,420
previous talk the server has to in any

102
00:04:09,420 --> 00:04:10,860
case access the necessary memory

103
00:04:10,860 --> 00:04:13,319
locations to give back the result now if

104
00:04:13,319 --> 00:04:15,840
the client wants to insert another key

105
00:04:15,840 --> 00:04:18,418
value pair for the same key

106
00:04:18,418 --> 00:04:21,298
um we we don't want the server to be

107
00:04:21,298 --> 00:04:23,400
able to link these this update and the

108
00:04:23,400 --> 00:04:26,520
previous search and more formally we

109
00:04:26,520 --> 00:04:28,020
want the update to leak nothing about

110
00:04:28,020 --> 00:04:30,479
the key that is being updated this is

111
00:04:30,479 --> 00:04:31,680
something that we look at for during

112
00:04:31,680 --> 00:04:33,900
updates but it really pertains also

113
00:04:33,900 --> 00:04:35,759
pertains to the searches that have

114
00:04:35,759 --> 00:04:37,860
happened before

115
00:04:37,860 --> 00:04:40,440
the second part the second example

116
00:04:40,440 --> 00:04:42,540
um say the client inserts a key value

117
00:04:42,540 --> 00:04:44,520
pair and deletes it right after now at

118
00:04:44,520 --> 00:04:45,720
this point if the client wants to

119
00:04:45,720 --> 00:04:48,720
perform a search for the same key we

120
00:04:48,720 --> 00:04:51,960
don't want the server to learn too much

121
00:04:51,960 --> 00:04:53,940
information about such a key value pair

122
00:04:53,940 --> 00:04:55,620
that was inserted and deleted without

123
00:04:55,620 --> 00:04:57,660
ever appearing in a search

124
00:04:57,660 --> 00:05:01,620
it boils down to multiple levels and by

125
00:05:01,620 --> 00:05:03,060
the way the first one was for privacy

126
00:05:03,060 --> 00:05:05,040
this one's backwards right you see and

127
00:05:05,040 --> 00:05:06,900
backward privacy boils down to multiple

128
00:05:06,900 --> 00:05:09,780
levels but a very strict definition but

129
00:05:09,780 --> 00:05:11,460
the very basic thing is that we don't

130
00:05:11,460 --> 00:05:12,780
want to leak the value

131
00:05:12,780 --> 00:05:15,960
this one uh as opposed to the previous

132
00:05:15,960 --> 00:05:17,820
one for a pricey it happens during

133
00:05:17,820 --> 00:05:20,699
searches but it is about uh it all it is

134
00:05:20,699 --> 00:05:22,860
very related to the information that is

135
00:05:22,860 --> 00:05:24,419
leaked during updates

136
00:05:24,419 --> 00:05:26,160
now

137
00:05:26,160 --> 00:05:29,039
all of that boils down to the fact that

138
00:05:29,039 --> 00:05:31,800
um we have to leak in order to not leak

139
00:05:31,800 --> 00:05:33,720
too much we have to sacrifice some

140
00:05:33,720 --> 00:05:37,560
efficiency and prior work didn't have

141
00:05:37,560 --> 00:05:39,600
prior work that did Dynamic searchable

142
00:05:39,600 --> 00:05:41,520
encryption with forward and backward

143
00:05:41,520 --> 00:05:44,400
privacy did not have optimal search

144
00:05:44,400 --> 00:05:47,120
for example starting with a

145
00:05:47,120 --> 00:05:50,340
multi-map with capacity n

146
00:05:50,340 --> 00:05:52,320
um if a client wanted to insert a bunch

147
00:05:52,320 --> 00:05:54,180
of values they would be put in pseudor

148
00:05:54,180 --> 00:05:56,759
random locations in the servers location

149
00:05:56,759 --> 00:06:00,539
and and the server is memory and I'm

150
00:06:00,539 --> 00:06:02,460
denoting the number of insertions with I

151
00:06:02,460 --> 00:06:04,800
now at this point

152
00:06:04,800 --> 00:06:06,720
um if the client went and went ahead and

153
00:06:06,720 --> 00:06:08,759
did a deletion and know that this is an

154
00:06:08,759 --> 00:06:11,340
example workload like it may be way more

155
00:06:11,340 --> 00:06:14,220
complicated multiple Keys whatever

156
00:06:14,220 --> 00:06:16,740
um so if the client went ahead and did a

157
00:06:16,740 --> 00:06:18,080
deletion

158
00:06:18,080 --> 00:06:21,000
the server would very often in the

159
00:06:21,000 --> 00:06:22,500
previous schemes do a cancellation

160
00:06:22,500 --> 00:06:24,180
insert a cancellation record because

161
00:06:24,180 --> 00:06:26,220
it's the very easy way to stay forward

162
00:06:26,220 --> 00:06:28,979
private so if there were more deletions

163
00:06:28,979 --> 00:06:32,280
so that only one value remained valid

164
00:06:32,280 --> 00:06:34,340
um

165
00:06:34,580 --> 00:06:37,080
if the server if the client went ahead

166
00:06:37,080 --> 00:06:38,940
and did a search here

167
00:06:38,940 --> 00:06:42,960
um the server would have to read send

168
00:06:42,960 --> 00:06:45,120
all of the read and send all of the

169
00:06:45,120 --> 00:06:47,400
insertions and cancellation records and

170
00:06:47,400 --> 00:06:48,840
at that point the client would have to

171
00:06:48,840 --> 00:06:50,460
go through them just to find the one

172
00:06:50,460 --> 00:06:52,100
result That Remains

173
00:06:52,100 --> 00:06:56,220
as a result and similarly as I said many

174
00:06:56,220 --> 00:06:58,560
Works did cancellation records which

175
00:06:58,560 --> 00:07:00,860
didn't scale with deletions

176
00:07:00,860 --> 00:07:04,139
a few Works did a quasi-optimal search

177
00:07:04,139 --> 00:07:06,900
and uh when I say quasioptimal it boils

178
00:07:06,900 --> 00:07:09,360
down to a poly logger holy logarithmic

179
00:07:09,360 --> 00:07:11,539
factor of n on top of the result size

180
00:07:11,539 --> 00:07:13,080
and

181
00:07:13,080 --> 00:07:15,780
um there was no scheme that uh optimal

182
00:07:15,780 --> 00:07:18,600
search which and this was only in plain

183
00:07:18,600 --> 00:07:21,900
text schemes so we did it and uh the

184
00:07:21,900 --> 00:07:23,639
rest of the talk I'll explain how this

185
00:07:23,639 --> 00:07:25,440
game works

186
00:07:25,440 --> 00:07:26,280
um

187
00:07:26,280 --> 00:07:27,780
I'll start with a

188
00:07:27,780 --> 00:07:29,819
um with an array but know that this is

189
00:07:29,819 --> 00:07:31,319
not a regular array similar to the

190
00:07:31,319 --> 00:07:33,720
previous slides this is each entry is in

191
00:07:33,720 --> 00:07:35,720
its own suit around the location

192
00:07:35,720 --> 00:07:38,699
if the client goes ahead and inserts a

193
00:07:38,699 --> 00:07:39,680
value

194
00:07:39,680 --> 00:07:42,720
for this key and this area is for one

195
00:07:42,720 --> 00:07:45,840
key only we insert the first value in

196
00:07:45,840 --> 00:07:47,819
the first entry of the array create one

197
00:07:47,819 --> 00:07:49,440
node above the first two

198
00:07:49,440 --> 00:07:52,020
and this ends up being a binary tier

199
00:07:52,020 --> 00:07:55,740
tree it's a very small one right now and

200
00:07:55,740 --> 00:07:56,639
um

201
00:07:56,639 --> 00:07:59,280
so on so if the client goes ahead and

202
00:07:59,280 --> 00:08:02,220
inserts like four more values uh this

203
00:08:02,220 --> 00:08:04,680
ends up being as you can see

204
00:08:04,680 --> 00:08:07,500
um where we keep creating the three

205
00:08:07,500 --> 00:08:10,380
nodes on top of it note that the array

206
00:08:10,380 --> 00:08:12,720
and the tree are conceptual here and

207
00:08:12,720 --> 00:08:14,400
they are embedded in the multi-map that

208
00:08:14,400 --> 00:08:17,039
we store on the server and we leverage

209
00:08:17,039 --> 00:08:19,919
it to perform searches and deletions

210
00:08:19,919 --> 00:08:22,919
efficiently also uh note that

211
00:08:22,919 --> 00:08:26,460
um the array has the address of the

212
00:08:26,460 --> 00:08:28,520
nodes of the array are

213
00:08:28,520 --> 00:08:30,780
generated through a hash function of the

214
00:08:30,780 --> 00:08:33,000
key and the index in the array so we

215
00:08:33,000 --> 00:08:36,120
don't really need to write the nodes on

216
00:08:36,120 --> 00:08:37,979
top of the array before they are changed

217
00:08:37,979 --> 00:08:39,539
we denote the number of times the node

218
00:08:39,539 --> 00:08:41,640
has changed changed with a version

219
00:08:41,640 --> 00:08:43,380
counter where version 0 is the default

220
00:08:43,380 --> 00:08:45,540
contents

221
00:08:45,540 --> 00:08:48,480
um at this point if the server decide

222
00:08:48,480 --> 00:08:50,399
the client decides to delete the first

223
00:08:50,399 --> 00:08:54,180
value we go ahead and delete remove the

224
00:08:54,180 --> 00:08:56,040
node on top of the first two values on

225
00:08:56,040 --> 00:08:57,240
top of the leaf that is going to be

226
00:08:57,240 --> 00:09:00,240
deleted and then we point the

227
00:09:00,240 --> 00:09:02,279
grandparent of the leaf that is deleted

228
00:09:02,279 --> 00:09:04,820
to its sibling therefore retaining that

229
00:09:04,820 --> 00:09:09,000
sibling as a valid node and then

230
00:09:09,000 --> 00:09:11,820
since we have and when I say deleted we

231
00:09:11,820 --> 00:09:13,380
write it to a new location and never

232
00:09:13,380 --> 00:09:15,300
read the previous one so when the

233
00:09:15,300 --> 00:09:16,860
version changes and the address changes

234
00:09:16,860 --> 00:09:19,380
for node one four in this example the

235
00:09:19,380 --> 00:09:21,420
pointer to it from the node above

236
00:09:21,420 --> 00:09:24,720
uh doesn't work anymore so we have to

237
00:09:24,720 --> 00:09:28,080
write that again so each update means uh

238
00:09:28,080 --> 00:09:29,880
writing login nodes because we have to

239
00:09:29,880 --> 00:09:31,860
maintain the performer privacy that I

240
00:09:31,860 --> 00:09:35,040
told you before and therefore we have a

241
00:09:35,040 --> 00:09:37,920
login blow up for deletions which means

242
00:09:37,920 --> 00:09:40,080
super linear space

243
00:09:40,080 --> 00:09:42,480
but as a result of all this the number

244
00:09:42,480 --> 00:09:44,399
of valid nodes in our tree remains of R

245
00:09:44,399 --> 00:09:47,640
and therefore we can gain uh we can get

246
00:09:47,640 --> 00:09:50,279
to Optimal search similarly if we want

247
00:09:50,279 --> 00:09:52,200
to delete the fourth value we remove

248
00:09:52,200 --> 00:09:54,600
that node and the nodes above go to

249
00:09:54,600 --> 00:09:56,339
version two

250
00:09:56,339 --> 00:09:59,220
at this point um if a search starts we

251
00:09:59,220 --> 00:10:01,200
do a BFS at the root

252
00:10:01,200 --> 00:10:02,940
um we know there have been five leaves

253
00:10:02,940 --> 00:10:05,399
we go in both directions moving down but

254
00:10:05,399 --> 00:10:07,500
on the right side we know that the right

255
00:10:07,500 --> 00:10:10,920
side of it uh a right side of node 5 8

256
00:10:10,920 --> 00:10:12,600
doesn't have anything so we don't go in

257
00:10:12,600 --> 00:10:15,839
that direction so on

258
00:10:15,839 --> 00:10:18,180
um I'll go over a little bit more

259
00:10:18,180 --> 00:10:19,440
details right now

260
00:10:19,440 --> 00:10:20,519
so

261
00:10:20,519 --> 00:10:22,920
firstly you want to search is about to

262
00:10:22,920 --> 00:10:24,899
happen the encrypted search token should

263
00:10:24,899 --> 00:10:26,399
you know should have enough information

264
00:10:26,399 --> 00:10:29,399
to allow the server to find the tree and

265
00:10:29,399 --> 00:10:32,339
Traverse it and therefore we uh put the

266
00:10:32,339 --> 00:10:36,000
idn node of idn version of the root in

267
00:10:36,000 --> 00:10:38,279
the search token so with just one more

268
00:10:38,279 --> 00:10:41,760
hash the server can find the node and to

269
00:10:41,760 --> 00:10:43,440
find the next nodes we also put the same

270
00:10:43,440 --> 00:10:44,940
information about both sides and that

271
00:10:44,940 --> 00:10:46,800
note

272
00:10:46,800 --> 00:10:48,800
um

273
00:10:48,899 --> 00:10:53,040
also uh we can remove the

274
00:10:53,040 --> 00:10:54,480
um

275
00:10:54,480 --> 00:10:57,300
this means uh a storage overhead for the

276
00:10:57,300 --> 00:10:58,920
client which we can remove by using

277
00:10:58,920 --> 00:11:00,779
oblivious encrypted Maps oblivious

278
00:11:00,779 --> 00:11:02,880
Primitives as you heard they're more

279
00:11:02,880 --> 00:11:05,100
expensive for example log squared and

280
00:11:05,100 --> 00:11:07,380
cost over log and rounds but this gives

281
00:11:07,380 --> 00:11:10,160
us a constant client storage

282
00:11:10,160 --> 00:11:13,019
also for updates in order to do them and

283
00:11:13,019 --> 00:11:14,940
allow the searches to happen we have to

284
00:11:14,940 --> 00:11:16,740
we do a little bit more costly updates

285
00:11:16,740 --> 00:11:20,540
which also use oblivious Maps

286
00:11:20,820 --> 00:11:22,260
um we also have a second scheme which

287
00:11:22,260 --> 00:11:24,540
doesn't have this if you log in add

288
00:11:24,540 --> 00:11:28,140
adding on the space the idea is pretty

289
00:11:28,140 --> 00:11:29,700
simple we don't store the children's

290
00:11:29,700 --> 00:11:31,740
versions so each deletion means a note

291
00:11:31,740 --> 00:11:34,440
OneNote changes and there and then we

292
00:11:34,440 --> 00:11:36,420
binary search for the latest version of

293
00:11:36,420 --> 00:11:39,420
each node uh again this is by the way

294
00:11:39,420 --> 00:11:40,560
the second scheme is still

295
00:11:40,560 --> 00:11:42,779
asymptotically and empirically faster

296
00:11:42,779 --> 00:11:45,300
than the previous state of the art

297
00:11:45,300 --> 00:11:48,300
um which had our login search

298
00:11:48,300 --> 00:11:50,399
um finally uh we have a bunch of

299
00:11:50,399 --> 00:11:52,500
experiments we unplug it in C plus plus

300
00:11:52,500 --> 00:11:55,860
used openssl asni was enabled uh the

301
00:11:55,860 --> 00:11:58,800
code is open source we compared with the

302
00:11:58,800 --> 00:12:00,120
best scheme that had cancellation

303
00:12:00,120 --> 00:12:02,700
records and also the best quasi-optimal

304
00:12:02,700 --> 00:12:04,800
scheme uh first one is STD the second

305
00:12:04,800 --> 00:12:05,940
one qos

306
00:12:05,940 --> 00:12:08,820
uh it was running a single machine and

307
00:12:08,820 --> 00:12:12,480
we also did several optimizations which

308
00:12:12,480 --> 00:12:13,500
um

309
00:12:13,500 --> 00:12:15,600
are compatible with this privacy and

310
00:12:15,600 --> 00:12:17,820
leakage profile and that's not exactly a

311
00:12:17,820 --> 00:12:19,380
typical thing like not a very

312
00:12:19,380 --> 00:12:21,420
straightforward thing because you cannot

313
00:12:21,420 --> 00:12:23,880
throw any random optimization there and

314
00:12:23,880 --> 00:12:26,399
expect the same leakage profile to

315
00:12:26,399 --> 00:12:28,380
happen anywho

316
00:12:28,380 --> 00:12:30,959
um going through this a little faster

317
00:12:30,959 --> 00:12:32,100
um

318
00:12:32,100 --> 00:12:33,600
the experiment I want to show here is

319
00:12:33,600 --> 00:12:35,640
the search time so

320
00:12:35,640 --> 00:12:37,440
um firstly you can see that the

321
00:12:37,440 --> 00:12:40,800
cancellation record speed just uh

322
00:12:40,800 --> 00:12:43,079
goes down as in it takes more time with

323
00:12:43,079 --> 00:12:44,579
more deletions but the previous

324
00:12:44,579 --> 00:12:47,940
quasi-optimal scheme becomes faster here

325
00:12:47,940 --> 00:12:49,920
we're doing a

326
00:12:49,920 --> 00:12:52,500
we're deleting values uniformly in a

327
00:12:52,500 --> 00:12:54,959
database of 1 million records with 20

328
00:12:54,959 --> 00:12:56,339
000 for each key

329
00:12:56,339 --> 00:13:01,019
then our optimal scheme uh just beats

330
00:13:01,019 --> 00:13:03,120
the previous state of the art and beats

331
00:13:03,120 --> 00:13:06,240
uh the best cancellation record scheme

332
00:13:06,240 --> 00:13:10,500
at about 55 deletions and lastly

333
00:13:10,500 --> 00:13:11,300
um

334
00:13:11,300 --> 00:13:14,339
optimizations really matter like we beat

335
00:13:14,339 --> 00:13:16,560
everything after a very small percentage

336
00:13:16,560 --> 00:13:18,660
of deletions I really encourage you to

337
00:13:18,660 --> 00:13:21,600
see the optimizations in the paper

338
00:13:21,600 --> 00:13:25,019
to conclude we did the first Ford Empire

339
00:13:25,019 --> 00:13:27,120
backward private Dynamic search model

340
00:13:27,120 --> 00:13:29,040
encryption with optimal search a second

341
00:13:29,040 --> 00:13:30,600
scheme which still beats everything else

342
00:13:30,600 --> 00:13:34,880
and the code is open source thank you

