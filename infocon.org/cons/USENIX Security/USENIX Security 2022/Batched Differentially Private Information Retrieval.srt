1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:08,599 --> 00:00:11,340
I'll be talking today about to you today

3
00:00:11,340 --> 00:00:13,139
about our new batch the freshly private

4
00:00:13,139 --> 00:00:14,940
peer protocol this is Joint work with

5
00:00:14,940 --> 00:00:17,940
Ron mayank and Kalman

6
00:00:17,940 --> 00:00:20,100
so private information retrieval or peer

7
00:00:20,100 --> 00:00:21,779
for short is a cryptographic technique

8
00:00:21,779 --> 00:00:23,820
that allows users to query a remotely

9
00:00:23,820 --> 00:00:25,740
held database while keeping the contents

10
00:00:25,740 --> 00:00:27,420
of their queries private and unknown to

11
00:00:27,420 --> 00:00:28,680
the service

12
00:00:28,680 --> 00:00:30,679
peer protocols generally rely on

13
00:00:30,679 --> 00:00:32,880
encrypting secret sharing or otherwise

14
00:00:32,880 --> 00:00:34,559
obfuscating these queries and their

15
00:00:34,559 --> 00:00:36,840
responses the service here may consist

16
00:00:36,840 --> 00:00:38,700
of a single server or many servers and

17
00:00:38,700 --> 00:00:40,260
we'll kind of focus on the stock on the

18
00:00:40,260 --> 00:00:43,020
multi-server setting

19
00:00:43,020 --> 00:00:44,820
fear is a powerful primitive with

20
00:00:44,820 --> 00:00:46,920
endless potential applications and

21
00:00:46,920 --> 00:00:48,420
researchers have developed many peer

22
00:00:48,420 --> 00:00:50,100
protocols and proposed using them for a

23
00:00:50,100 --> 00:00:51,660
variety of applications I'm showing only

24
00:00:51,660 --> 00:00:54,120
some of them on this slide a highlight

25
00:00:54,120 --> 00:00:55,800
of existing work is the offline online

26
00:00:55,800 --> 00:00:57,899
model which uses a perquiry

27
00:00:57,899 --> 00:00:59,579
pre-processing stage that performs

28
00:00:59,579 --> 00:01:01,739
expensive operations offline to speed up

29
00:01:01,739 --> 00:01:03,600
the online protocol

30
00:01:03,600 --> 00:01:06,060
however fear hasn't seen really much

31
00:01:06,060 --> 00:01:07,740
adoption in the real world and one not

32
00:01:07,740 --> 00:01:09,659
sure question is why

33
00:01:09,659 --> 00:01:11,520
we believe that this isn't part a

34
00:01:11,520 --> 00:01:13,920
challenge of scale Pierre has known

35
00:01:13,920 --> 00:01:15,960
lower bounds that prove that significant

36
00:01:15,960 --> 00:01:17,760
per query overheads are required to

37
00:01:17,760 --> 00:01:20,159
provide privacy this makes peer scale

38
00:01:20,159 --> 00:01:22,380
poorly to large query loads as we will

39
00:01:22,380 --> 00:01:25,439
see next with a potential application

40
00:01:25,439 --> 00:01:27,180
so in this example peer applications

41
00:01:27,180 --> 00:01:29,340
let's say a PR application let's imagine

42
00:01:29,340 --> 00:01:31,380
a service that keeps a database of

43
00:01:31,380 --> 00:01:34,080
vulnerabilities and they're found in

44
00:01:34,080 --> 00:01:35,579
different software dependencies and

45
00:01:35,579 --> 00:01:36,540
versions

46
00:01:36,540 --> 00:01:38,520
proprietary software developers can

47
00:01:38,520 --> 00:01:40,140
query the service periodically using

48
00:01:40,140 --> 00:01:41,759
peer in order to ensure that the

49
00:01:41,759 --> 00:01:43,920
dependencies are safe while at the same

50
00:01:43,920 --> 00:01:45,720
time keeping sensitive information about

51
00:01:45,720 --> 00:01:47,700
their dependencies and potential

52
00:01:47,700 --> 00:01:50,100
vulnerabilities private

53
00:01:50,100 --> 00:01:52,439
the challenge here is in the scale we

54
00:01:52,439 --> 00:01:53,640
know that there are millions of

55
00:01:53,640 --> 00:01:55,500
dependencies available on repositories

56
00:01:55,500 --> 00:01:57,780
such as npm or Maven Central so the

57
00:01:57,780 --> 00:02:00,299
database has several million elements

58
00:02:00,299 --> 00:02:02,520
the total number of software projects

59
00:02:02,520 --> 00:02:04,439
that may use the service is in the

60
00:02:04,439 --> 00:02:06,540
hundreds of millions each with tens of

61
00:02:06,540 --> 00:02:07,740
dependencies

62
00:02:07,740 --> 00:02:09,538
so if every project is going to you know

63
00:02:09,538 --> 00:02:11,220
query for the dependencies once a day

64
00:02:11,220 --> 00:02:13,140
that gives us about a billion billions

65
00:02:13,140 --> 00:02:15,000
of queries daily

66
00:02:15,000 --> 00:02:17,580
so can peer constructions scale to such

67
00:02:17,580 --> 00:02:19,140
loads

68
00:02:19,140 --> 00:02:21,420
we look at this via the we look at the

69
00:02:21,420 --> 00:02:22,620
performance of checklist a

70
00:02:22,620 --> 00:02:25,080
state-of-the-art 2 server protocol that

71
00:02:25,080 --> 00:02:28,140
uses the offline online model

72
00:02:28,140 --> 00:02:30,060
um this is a very recent protocol from

73
00:02:30,060 --> 00:02:32,160
last year's usernx security and what

74
00:02:32,160 --> 00:02:33,360
we're going to show here is only the

75
00:02:33,360 --> 00:02:34,620
online cost we're not going to show the

76
00:02:34,620 --> 00:02:35,940
offline cost

77
00:02:35,940 --> 00:02:38,099
our database size which we denote by n

78
00:02:38,099 --> 00:02:40,440
is 2.5 million elements and we ran

79
00:02:40,440 --> 00:02:42,660
checklists code on Q queries which we

80
00:02:42,660 --> 00:02:44,819
show on the x-axis and measured the

81
00:02:44,819 --> 00:02:47,280
online time required by the servers to

82
00:02:47,280 --> 00:02:49,200
handle all of these Q queries in seconds

83
00:02:49,200 --> 00:02:51,720
and we report that on the y-axis both

84
00:02:51,720 --> 00:02:54,780
axes are log scale

85
00:02:54,780 --> 00:02:56,760
the computation complexity and checklist

86
00:02:56,760 --> 00:02:58,680
is in the order of square roots and per

87
00:02:58,680 --> 00:03:01,500
isolated query this is pretty good for

88
00:03:01,500 --> 00:03:03,420
peers since that level of server work is

89
00:03:03,420 --> 00:03:05,519
generally required for privacy however

90
00:03:05,519 --> 00:03:07,560
checklist handles every one of these

91
00:03:07,560 --> 00:03:10,019
queries separately so it has to pay the

92
00:03:10,019 --> 00:03:11,580
square root overhead for each query

93
00:03:11,580 --> 00:03:13,620
which means that for Q queries the total

94
00:03:13,620 --> 00:03:15,239
computation time is in big o q times

95
00:03:15,239 --> 00:03:17,280
square root of time

96
00:03:17,280 --> 00:03:19,019
for an application like the software

97
00:03:19,019 --> 00:03:20,580
dependencies one we looked at where the

98
00:03:20,580 --> 00:03:22,319
service needs to handle billions of

99
00:03:22,319 --> 00:03:25,319
queries daily the per user over the per

100
00:03:25,319 --> 00:03:27,239
user per query overhead and checklist

101
00:03:27,239 --> 00:03:29,400
compounds and makes the total cost

102
00:03:29,400 --> 00:03:30,599
impractical

103
00:03:30,599 --> 00:03:32,700
on our setup it takes us more than a day

104
00:03:32,700 --> 00:03:34,319
to perform the server side computation

105
00:03:34,319 --> 00:03:37,200
for these billion queries this gets even

106
00:03:37,200 --> 00:03:39,180
worse for larger database sizes because

107
00:03:39,180 --> 00:03:41,040
of this multiplicative dependency on

108
00:03:41,040 --> 00:03:43,620
square roots n

109
00:03:43,620 --> 00:03:46,319
due to the theoretical lower bounds for

110
00:03:46,319 --> 00:03:48,360
peer there is very little we can do to

111
00:03:48,360 --> 00:03:50,159
improve the asymptotic complexity of any

112
00:03:50,159 --> 00:03:53,040
isolated query instead applications like

113
00:03:53,040 --> 00:03:54,299
this one with the large number of

114
00:03:54,299 --> 00:03:55,980
queries give us an opportunity to

115
00:03:55,980 --> 00:03:57,959
amortize the overheads over the

116
00:03:57,959 --> 00:04:00,239
different queries this requires us to

117
00:04:00,239 --> 00:04:01,860
handle queries in batches rather than

118
00:04:01,860 --> 00:04:03,659
individually but poses an interesting

119
00:04:03,659 --> 00:04:04,500
challenge

120
00:04:04,500 --> 00:04:06,659
we need to amortize costs over the

121
00:04:06,659 --> 00:04:09,060
queries made by different users while

122
00:04:09,060 --> 00:04:10,439
also carrying out the expensive

123
00:04:10,439 --> 00:04:12,120
operations offline to speed up our

124
00:04:12,120 --> 00:04:14,040
online protocol

125
00:04:14,040 --> 00:04:16,738
in this talk we present DP peer a new

126
00:04:16,738 --> 00:04:18,660
multi-server P protocol for applications

127
00:04:18,660 --> 00:04:20,339
with many queries

128
00:04:20,339 --> 00:04:22,860
dppier batches and amortizes the cost of

129
00:04:22,860 --> 00:04:24,960
queries made by different users down to

130
00:04:24,960 --> 00:04:26,040
a constant

131
00:04:26,040 --> 00:04:28,680
our protocol processes a batch of Q

132
00:04:28,680 --> 00:04:31,080
queries and Big O of Q Plus n

133
00:04:31,080 --> 00:04:33,240
and it relies on a new secret sharing

134
00:04:33,240 --> 00:04:35,280
scheme in order to move all public key

135
00:04:35,280 --> 00:04:37,199
operations offline and use only cheap

136
00:04:37,199 --> 00:04:39,300
arithmetic operations online I'll

137
00:04:39,300 --> 00:04:43,160
briefly discuss the sharing scheme later

138
00:04:43,259 --> 00:04:45,900
at a high level DPP combines three

139
00:04:45,900 --> 00:04:49,020
techniques first we reveal a noisy

140
00:04:49,020 --> 00:04:50,820
histogram of all the queries to the

141
00:04:50,820 --> 00:04:52,860
service this protects the queries of Any

142
00:04:52,860 --> 00:04:55,440
Given user with differential privacy and

143
00:04:55,440 --> 00:04:57,300
we intentionally accept this leakage in

144
00:04:57,300 --> 00:04:59,759
order to provide good scalability

145
00:04:59,759 --> 00:05:02,460
second our protocol batches the queries

146
00:05:02,460 --> 00:05:04,320
from the different users and shuffles

147
00:05:04,320 --> 00:05:06,240
them using a mixnet design

148
00:05:06,240 --> 00:05:08,220
and finally we move all expensive public

149
00:05:08,220 --> 00:05:10,620
key operations to an offline stage which

150
00:05:10,620 --> 00:05:12,900
we can be carried on during off-peak

151
00:05:12,900 --> 00:05:15,120
hours so that our online stage uses only

152
00:05:15,120 --> 00:05:18,120
a few arithmetic operations per query

153
00:05:18,120 --> 00:05:20,520
for presentation purposes I'll show a

154
00:05:20,520 --> 00:05:22,199
simpler construction that uses only the

155
00:05:22,199 --> 00:05:24,000
first two techniques but carries out all

156
00:05:24,000 --> 00:05:25,680
operations online including the public

157
00:05:25,680 --> 00:05:27,720
key ones and I'll briefly discuss how we

158
00:05:27,720 --> 00:05:31,020
do this online offline design afterwards

159
00:05:31,020 --> 00:05:33,479
our setup consists of many users that

160
00:05:33,479 --> 00:05:35,280
query a remote service and this service

161
00:05:35,280 --> 00:05:37,080
consists of two or more servers

162
00:05:37,080 --> 00:05:39,240
structured in a chain

163
00:05:39,240 --> 00:05:41,340
our protocol tolerates a malicious and

164
00:05:41,340 --> 00:05:43,620
unrestricted adversary that controls all

165
00:05:43,620 --> 00:05:45,840
but one server and one client

166
00:05:45,840 --> 00:05:48,300
specifically our protocol guarantees

167
00:05:48,300 --> 00:05:50,220
that such a powerful adversary only

168
00:05:50,220 --> 00:05:52,680
learns the histogram of all of the

169
00:05:52,680 --> 00:05:54,180
queries and nothing else and this

170
00:05:54,180 --> 00:05:56,039
histogram is differentially private

171
00:05:56,039 --> 00:05:58,139
our protocol also provides Integrity

172
00:05:58,139 --> 00:06:00,600
guarantees that ensure that any user

173
00:06:00,600 --> 00:06:02,699
only accepts responses that are correct

174
00:06:02,699 --> 00:06:04,500
and correspond to the database as agreed

175
00:06:04,500 --> 00:06:07,460
upon by the servers

176
00:06:07,560 --> 00:06:09,300
for Simplicity let's consider the case

177
00:06:09,300 --> 00:06:11,280
with two users and two servers let's say

178
00:06:11,280 --> 00:06:13,020
the pink user wants to query row number

179
00:06:13,020 --> 00:06:14,759
three and the gray user wants to query

180
00:06:14,759 --> 00:06:16,800
row number one

181
00:06:16,800 --> 00:06:18,479
in the very first step of the protocol

182
00:06:18,479 --> 00:06:21,660
each user samples random masks that when

183
00:06:21,660 --> 00:06:24,300
sort together reconstruct a zero the

184
00:06:24,300 --> 00:06:26,400
user is going to sample one mask per

185
00:06:26,400 --> 00:06:28,319
server in addition to one extra mask

186
00:06:28,319 --> 00:06:30,000
that it stores locally for later use

187
00:06:30,000 --> 00:06:31,979
we'll use these masks to hide the

188
00:06:31,979 --> 00:06:34,080
responses while they're processed by the

189
00:06:34,080 --> 00:06:35,039
servers

190
00:06:35,039 --> 00:06:37,139
and in this figure we show all these

191
00:06:37,139 --> 00:06:40,080
masks as puzzle pieces

192
00:06:40,080 --> 00:06:43,020
then each user onion encrypts their

193
00:06:43,020 --> 00:06:45,300
queries and their masks using the

194
00:06:45,300 --> 00:06:47,759
server's public keys each layer in this

195
00:06:47,759 --> 00:06:49,680
onion Cipher corresponds to a single

196
00:06:49,680 --> 00:06:51,960
server and contains the mask associated

197
00:06:51,960 --> 00:06:54,120
with that server and additionally the

198
00:06:54,120 --> 00:06:56,160
deepest layer also contains the query

199
00:06:56,160 --> 00:06:57,780
and is associated with the very last

200
00:06:57,780 --> 00:07:00,739
server in this chain

201
00:07:00,840 --> 00:07:02,880
the first server collects all these

202
00:07:02,880 --> 00:07:04,319
onion ciphers from all the different

203
00:07:04,319 --> 00:07:06,840
users forming a batch of queries again

204
00:07:06,840 --> 00:07:08,460
this batching is required for

205
00:07:08,460 --> 00:07:09,780
amortization

206
00:07:09,780 --> 00:07:12,060
the server decrypts the outer layer of

207
00:07:12,060 --> 00:07:15,000
every onion note that while it can

208
00:07:15,000 --> 00:07:16,500
decrypt the outer layer it can decrypt

209
00:07:16,500 --> 00:07:17,639
the inner layers because it doesn't

210
00:07:17,639 --> 00:07:19,860
possess the the right private key right

211
00:07:19,860 --> 00:07:21,900
so it the server can't learn the queries

212
00:07:21,900 --> 00:07:25,259
the the contents of any of these queries

213
00:07:25,259 --> 00:07:26,940
now the decryption of the outer layer

214
00:07:26,940 --> 00:07:29,520
provides the server with two outputs The

215
00:07:29,520 --> 00:07:32,580
Masks which you will store for later use

216
00:07:32,580 --> 00:07:36,060
and the inner layer of the cipher

217
00:07:36,060 --> 00:07:38,160
then the server samples noise from a

218
00:07:38,160 --> 00:07:40,620
select distribution we carefully select

219
00:07:40,620 --> 00:07:42,060
this distribution to ensure that the

220
00:07:42,060 --> 00:07:43,860
overall histogram that includes both the

221
00:07:43,860 --> 00:07:46,740
real users from real user queries and

222
00:07:46,740 --> 00:07:48,780
the queries that are noise both of these

223
00:07:48,780 --> 00:07:50,039
together the histogram is differentially

224
00:07:50,039 --> 00:07:51,360
profit

225
00:07:51,360 --> 00:07:54,300
when sampling the noise the server also

226
00:07:54,300 --> 00:07:56,039
samples random masks and encrypts them

227
00:07:56,039 --> 00:07:57,599
with with the noise queries to ensure

228
00:07:57,599 --> 00:07:59,280
that real queries and noise queries are

229
00:07:59,280 --> 00:08:01,380
indistinguishable

230
00:08:01,380 --> 00:08:03,120
note that the amount of noise we add

231
00:08:03,120 --> 00:08:04,500
here is linear in the size of the

232
00:08:04,500 --> 00:08:07,020
database it's independent of the number

233
00:08:07,020 --> 00:08:09,539
of input queries and users this is

234
00:08:09,539 --> 00:08:10,860
important because it means that the

235
00:08:10,860 --> 00:08:12,479
noise becomes relatively smaller in

236
00:08:12,479 --> 00:08:14,280
applications with many queries

237
00:08:14,280 --> 00:08:16,319
and thus amortizes to a small constant

238
00:08:16,319 --> 00:08:19,160
overhead per query

239
00:08:19,440 --> 00:08:21,000
then the server shuffles all these

240
00:08:21,000 --> 00:08:22,919
queries together and this hides and

241
00:08:22,919 --> 00:08:24,479
conceals which of the queries are noise

242
00:08:24,479 --> 00:08:26,099
which of them are real

243
00:08:26,099 --> 00:08:28,139
and the server sends this traveled

244
00:08:28,139 --> 00:08:31,139
result to the next server

245
00:08:31,139 --> 00:08:32,520
now the last server in the chain

246
00:08:32,520 --> 00:08:34,620
decrypts every element revealing the

247
00:08:34,620 --> 00:08:37,200
contents of every query and the mask

248
00:08:37,200 --> 00:08:39,479
crucially the server cannot tell which

249
00:08:39,479 --> 00:08:41,580
user is the origin or source of the

250
00:08:41,580 --> 00:08:43,799
decrypted query and it cannot even tell

251
00:08:43,799 --> 00:08:45,959
whether that decrypted query is real or

252
00:08:45,959 --> 00:08:47,220
noise

253
00:08:47,220 --> 00:08:49,140
so the only thing that this server

254
00:08:49,140 --> 00:08:50,820
learns is the overall distribution or

255
00:08:50,820 --> 00:08:52,019
histogram which is differentially

256
00:08:52,019 --> 00:08:53,940
private

257
00:08:53,940 --> 00:08:56,160
the last server looks up each decrypted

258
00:08:56,160 --> 00:08:58,140
query in the database finding the

259
00:08:58,140 --> 00:08:59,700
associated response

260
00:08:59,700 --> 00:09:01,920
we cannot just send these responses back

261
00:09:01,920 --> 00:09:03,420
to the users in plain text format

262
00:09:03,420 --> 00:09:04,800
because that leaks information about

263
00:09:04,800 --> 00:09:07,800
their queries so instead we will exhort

264
00:09:07,800 --> 00:09:09,600
the responses with the masks to hide

265
00:09:09,600 --> 00:09:11,760
them

266
00:09:11,760 --> 00:09:13,740
the last server sent the mask responses

267
00:09:13,740 --> 00:09:16,019
back the previous server and that server

268
00:09:16,019 --> 00:09:18,000
deshuffles them and removes the

269
00:09:18,000 --> 00:09:19,560
responses that correspond to the noise

270
00:09:19,560 --> 00:09:21,480
it added earlier on

271
00:09:21,480 --> 00:09:23,220
then the server absorbs the remaining

272
00:09:23,220 --> 00:09:25,019
responses with the masks it previously

273
00:09:25,019 --> 00:09:27,180
stored and sends them back to the

274
00:09:27,180 --> 00:09:29,640
prospective users

275
00:09:29,640 --> 00:09:31,620
and finally each user applies its own

276
00:09:31,620 --> 00:09:35,880
mask and reconstructs the desired output

277
00:09:35,880 --> 00:09:37,500
now what I just showed you is a

278
00:09:37,500 --> 00:09:39,000
simplified construction that performs

279
00:09:39,000 --> 00:09:41,160
all the operations online including the

280
00:09:41,160 --> 00:09:43,380
expensive onion encryption and

281
00:09:43,380 --> 00:09:45,300
decryption operations

282
00:09:45,300 --> 00:09:47,580
in the Full Construction in the paper we

283
00:09:47,580 --> 00:09:49,800
only use a cheap secret sharing scheme

284
00:09:49,800 --> 00:09:51,240
online and rather than on your

285
00:09:51,240 --> 00:09:52,980
encryption and we use online encryption

286
00:09:52,980 --> 00:09:55,200
only offline to install the required

287
00:09:55,200 --> 00:09:56,880
secret shares at the servers so that the

288
00:09:56,880 --> 00:09:59,339
servers can use these shares online

289
00:09:59,339 --> 00:10:01,200
compared to previous work our offline

290
00:10:01,200 --> 00:10:03,779
station is in a sense flipped rather

291
00:10:03,779 --> 00:10:06,300
than the users receiving a hint from the

292
00:10:06,300 --> 00:10:08,220
servers the users in this and our

293
00:10:08,220 --> 00:10:10,140
protocol anonymously store hence in this

294
00:10:10,140 --> 00:10:13,980
case secret shares on the servers

295
00:10:13,980 --> 00:10:15,899
for this to work the secret sharing

296
00:10:15,899 --> 00:10:18,240
scheme needs to have a certain security

297
00:10:18,240 --> 00:10:20,339
properties similar to onion encryption

298
00:10:20,339 --> 00:10:22,380
in particular the scheme must be

299
00:10:22,380 --> 00:10:24,180
incremental where the query is

300
00:10:24,180 --> 00:10:25,740
reconstructed one server at a time in

301
00:10:25,740 --> 00:10:27,600
the chain and this is similar to the

302
00:10:27,600 --> 00:10:30,300
onioning aspect of onion encryption it

303
00:10:30,300 --> 00:10:31,860
also requires that the scheme be

304
00:10:31,860 --> 00:10:34,140
non-maluable and resilient against

305
00:10:34,140 --> 00:10:36,060
adversaries that may maliciously modify

306
00:10:36,060 --> 00:10:38,160
shares and this is similar to CCA

307
00:10:38,160 --> 00:10:40,740
security and onion encryption

308
00:10:40,740 --> 00:10:42,540
to the best of our knowledge this is the

309
00:10:42,540 --> 00:10:43,860
first secret sharing scheme that

310
00:10:43,860 --> 00:10:47,060
satisfies both properties

311
00:10:47,100 --> 00:10:48,600
all right now it's time to look at the

312
00:10:48,600 --> 00:10:50,820
performance of our new protocol we look

313
00:10:50,820 --> 00:10:52,620
at the same experiment from earlier in

314
00:10:52,620 --> 00:10:54,480
the talk the x-axis is the number of

315
00:10:54,480 --> 00:10:57,180
queries in a batch and the y-axis is the

316
00:10:57,180 --> 00:11:00,720
total completion Time online in seconds

317
00:11:00,720 --> 00:11:02,459
my main observation here is that our

318
00:11:02,459 --> 00:11:04,680
protocol handles the the batch of Q

319
00:11:04,680 --> 00:11:07,380
queries in Q Plus n rather than in Q

320
00:11:07,380 --> 00:11:10,339
Times Square Root n

321
00:11:10,440 --> 00:11:12,600
for batches with few queries you can see

322
00:11:12,600 --> 00:11:14,519
that our runtime is basically constant

323
00:11:14,519 --> 00:11:16,079
this is because the amount of noise

324
00:11:16,079 --> 00:11:18,480
queries overwhelms and dominates the

325
00:11:18,480 --> 00:11:20,760
system and is far greater than the few

326
00:11:20,760 --> 00:11:24,180
real queries made by users in this case

327
00:11:24,180 --> 00:11:27,060
this means that per query amortization

328
00:11:27,060 --> 00:11:28,740
is very isn't very effective and we're

329
00:11:28,740 --> 00:11:30,600
performing work linear in the database

330
00:11:30,600 --> 00:11:32,160
for each of these queries and this is

331
00:11:32,160 --> 00:11:33,360
also confirmed by the fact that

332
00:11:33,360 --> 00:11:36,180
checklist outperforms our protocol

333
00:11:36,180 --> 00:11:39,420
however as the batch size increase our

334
00:11:39,420 --> 00:11:41,940
protocol becomes dominated by real

335
00:11:41,940 --> 00:11:44,100
queries and the noise the fraction of

336
00:11:44,100 --> 00:11:46,740
noise queries become smaller and smaller

337
00:11:46,740 --> 00:11:48,660
so our amortized work per query now

338
00:11:48,660 --> 00:11:51,120
becomes an increasingly smaller constant

339
00:11:51,120 --> 00:11:53,160
and we increasingly outperform checklist

340
00:11:53,160 --> 00:11:54,839
due to this amortization

341
00:11:54,839 --> 00:11:56,519
that's one billion queries which is

342
00:11:56,519 --> 00:11:58,260
roughly the scale of our software

343
00:11:58,260 --> 00:12:00,839
dependencies example we observe that the

344
00:12:00,839 --> 00:12:02,579
cost of our protocol is two orders of

345
00:12:02,579 --> 00:12:06,079
magnitude lower than checklist

346
00:12:06,120 --> 00:12:08,100
in our paper we discuss another

347
00:12:08,100 --> 00:12:10,680
application with mobile app stores we

348
00:12:10,680 --> 00:12:12,360
show more experiments including

349
00:12:12,360 --> 00:12:15,120
comparisons to other peer protocols and

350
00:12:15,120 --> 00:12:17,040
we show the effects of the batch size on

351
00:12:17,040 --> 00:12:18,779
our throughput and latency

352
00:12:18,779 --> 00:12:21,120
and we also spell out the secret sharing

353
00:12:21,120 --> 00:12:22,680
scheme which I only highlighted and we

354
00:12:22,680 --> 00:12:25,320
formalize its properties

355
00:12:25,320 --> 00:12:28,260
in conclusion we present a DP peer a

356
00:12:28,260 --> 00:12:29,579
novel differentially private peer

357
00:12:29,579 --> 00:12:31,200
protocol for applications with many

358
00:12:31,200 --> 00:12:34,140
queries our protocol exhibits constant

359
00:12:34,140 --> 00:12:35,880
amortized computation communication

360
00:12:35,880 --> 00:12:38,160
complexities and concrete performance

361
00:12:38,160 --> 00:12:40,019
boosts up to two orders of magnitude

362
00:12:40,019 --> 00:12:41,820
over existing work

363
00:12:41,820 --> 00:12:43,740
and this makes peers suitable for

364
00:12:43,740 --> 00:12:45,480
applications domain that were previously

365
00:12:45,480 --> 00:12:46,800
understudied or thought to be

366
00:12:46,800 --> 00:12:47,880
impractical

367
00:12:47,880 --> 00:12:50,420
thank you

