1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:19,520 --> 00:00:22,560
ticated encryption which is key

3
00:00:22,560 --> 00:00:24,539
commitment

4
00:00:24,539 --> 00:00:26,220
so just to bring everyone on kind of

5
00:00:26,220 --> 00:00:27,840
same terms so authenticated encryption

6
00:00:27,840 --> 00:00:29,519
is really what's used to encrypt the

7
00:00:29,519 --> 00:00:31,560
bulk traffic on the internet

8
00:00:31,560 --> 00:00:33,420
so conceptually it's a quite simple

9
00:00:33,420 --> 00:00:35,340
primitive so you put in some plain text

10
00:00:35,340 --> 00:00:37,140
some key and it outputs the ciphertext

11
00:00:37,140 --> 00:00:39,540
in an authentication tag

12
00:00:39,540 --> 00:00:42,719
and you can also decrypt the ciphertext

13
00:00:42,719 --> 00:00:44,700
Again by putting in the ciphertext in

14
00:00:44,700 --> 00:00:46,559
the tag and you get the plain text so

15
00:00:46,559 --> 00:00:50,640
very simple symmetric key cryptography

16
00:00:50,640 --> 00:00:52,440
now the nice thing is with authenticated

17
00:00:52,440 --> 00:00:54,300
encryption is that it not only provides

18
00:00:54,300 --> 00:00:56,280
a confidentiality of the play index but

19
00:00:56,280 --> 00:00:58,079
also authenticity

20
00:00:58,079 --> 00:01:00,300
so whenever this bit flips in the

21
00:01:00,300 --> 00:01:03,480
ciphertext this will be detected and the

22
00:01:03,480 --> 00:01:05,640
algorithm will output this is invalid

23
00:01:05,640 --> 00:01:07,260
and not leave any information about the

24
00:01:07,260 --> 00:01:09,740
plain text

25
00:01:10,439 --> 00:01:12,420
so what we are looking at now is not

26
00:01:12,420 --> 00:01:14,580
we're not changing the cipher text but

27
00:01:14,580 --> 00:01:16,320
we're changing the key

28
00:01:16,320 --> 00:01:19,920
and it's unclear what happens then so

29
00:01:19,920 --> 00:01:22,080
The Standard Security Notions like in

30
00:01:22,080 --> 00:01:23,759
cca2

31
00:01:23,759 --> 00:01:25,619
they don't cover basically what what

32
00:01:25,619 --> 00:01:27,299
happens in this case because

33
00:01:27,299 --> 00:01:30,540
we're not uh violating here the security

34
00:01:30,540 --> 00:01:32,400
notion of authenticated encryption but

35
00:01:32,400 --> 00:01:34,619
looking at something different

36
00:01:34,619 --> 00:01:37,079
and surprisingly like you might

37
00:01:37,079 --> 00:01:38,820
intuitively think if I decrypt the

38
00:01:38,820 --> 00:01:40,500
ciphertext with the wrong key it should

39
00:01:40,500 --> 00:01:42,119
output invalid

40
00:01:42,119 --> 00:01:45,659
but this is not always the case

41
00:01:45,659 --> 00:01:47,520
so what we looked at in our paper is

42
00:01:47,520 --> 00:01:48,840
basically are there like real world

43
00:01:48,840 --> 00:01:50,700
scenarios where this can be an issue if

44
00:01:50,700 --> 00:01:53,939
you switch the key and it's not detected

45
00:01:53,939 --> 00:01:55,979
then we look like at practical ways like

46
00:01:55,979 --> 00:01:58,560
how could you exploit this actually

47
00:01:58,560 --> 00:02:00,240
and we provide like some simple and

48
00:02:00,240 --> 00:02:03,180
efficient fixes on how can you patch

49
00:02:03,180 --> 00:02:04,860
like existing authenticated encryption

50
00:02:04,860 --> 00:02:07,079
schemes to get this property packed

51
00:02:07,079 --> 00:02:08,459
again

52
00:02:08,459 --> 00:02:10,199
and as part of the paper we also like

53
00:02:10,199 --> 00:02:12,480
develop tools which allow you to like

54
00:02:12,480 --> 00:02:15,360
automate the text and create like useful

55
00:02:15,360 --> 00:02:17,840
examples

56
00:02:18,959 --> 00:02:20,879
so you're probably wondering like yeah

57
00:02:20,879 --> 00:02:22,739
if you change the key like you need a

58
00:02:22,739 --> 00:02:24,959
lot of control so it's like it's very

59
00:02:24,959 --> 00:02:27,060
unclear whether this is really an issue

60
00:02:27,060 --> 00:02:29,640
at first but I want to show you like one

61
00:02:29,640 --> 00:02:31,200
example

62
00:02:31,200 --> 00:02:33,900
from the paper which we found

63
00:02:33,900 --> 00:02:36,120
which is envelope encryption so this is

64
00:02:36,120 --> 00:02:39,000
like uh it's used by all the major Cloud

65
00:02:39,000 --> 00:02:41,519
providers and it's also recommended for

66
00:02:41,519 --> 00:02:42,900
their customers to use envelope

67
00:02:42,900 --> 00:02:43,980
encryption

68
00:02:43,980 --> 00:02:45,780
where the idea is like you pick a

69
00:02:45,780 --> 00:02:47,640
symmetric key encrypt your data and then

70
00:02:47,640 --> 00:02:49,140
you wrap that key with a key management

71
00:02:49,140 --> 00:02:51,679
system

72
00:02:52,620 --> 00:02:54,480
so how does this look like yeah you

73
00:02:54,480 --> 00:02:57,120
again have a plain text you generate a

74
00:02:57,120 --> 00:02:59,640
random key to encrypt the data

75
00:02:59,640 --> 00:03:03,180
and you get out of ciphertext

76
00:03:03,180 --> 00:03:04,980
and what you didn't do is so for every

77
00:03:04,980 --> 00:03:06,959
recipient you want to send this

78
00:03:06,959 --> 00:03:09,420
ciphertext to you wrap the symmetric key

79
00:03:09,420 --> 00:03:12,720
under their public key for instance

80
00:03:12,720 --> 00:03:14,819
so in this case there's a user a we wrap

81
00:03:14,819 --> 00:03:17,640
this key and attach it to the ciphertext

82
00:03:17,640 --> 00:03:19,739
so when the user receives the whole plop

83
00:03:19,739 --> 00:03:21,599
they can just extract

84
00:03:21,599 --> 00:03:23,580
that the key

85
00:03:23,580 --> 00:03:26,760
and the crypto original ciphertext

86
00:03:26,760 --> 00:03:28,620
and if you have a second user we just

87
00:03:28,620 --> 00:03:30,540
again wrap the key of the second user

88
00:03:30,540 --> 00:03:34,879
and also attach it to the ciphertext

89
00:03:35,340 --> 00:03:37,920
but now the interesting thing is so

90
00:03:37,920 --> 00:03:39,780
the person who sends the cipher decks

91
00:03:39,780 --> 00:03:41,640
they don't have to wrap the same key for

92
00:03:41,640 --> 00:03:43,620
each user

93
00:03:43,620 --> 00:03:45,120
so for instance they could use a

94
00:03:45,120 --> 00:03:47,159
different key which does not correspond

95
00:03:47,159 --> 00:03:49,980
to this ciphertext

96
00:03:49,980 --> 00:03:51,420
and

97
00:03:51,420 --> 00:03:53,400
the problematic properties here it's

98
00:03:53,400 --> 00:03:55,379
impossible to detect for the users here

99
00:03:55,379 --> 00:03:57,900
whether they get the same key wrapped

100
00:03:57,900 --> 00:04:00,840
because the keys are encrypted under the

101
00:04:00,840 --> 00:04:03,540
the keys of each individual user so they

102
00:04:03,540 --> 00:04:04,799
cannot distinguish from each other

103
00:04:04,799 --> 00:04:06,840
whether they got the same key

104
00:04:06,840 --> 00:04:08,700
however they can see they got the same

105
00:04:08,700 --> 00:04:11,359
ciphertext

106
00:04:12,239 --> 00:04:13,920
so what can happen then it's like yeah

107
00:04:13,920 --> 00:04:16,440
both users get the the ciphertext but

108
00:04:16,440 --> 00:04:18,779
decrypted with a different key and our

109
00:04:18,779 --> 00:04:21,000
goal is like to show that actually one

110
00:04:21,000 --> 00:04:22,740
person can decrypt to some malicious

111
00:04:22,740 --> 00:04:23,759
plain text

112
00:04:23,759 --> 00:04:25,979
and the other person gets the expected

113
00:04:25,979 --> 00:04:28,580
plaintiffs

114
00:04:30,180 --> 00:04:32,520
so to summarize this example basically

115
00:04:32,520 --> 00:04:34,919
both recipients they see exactly the

116
00:04:34,919 --> 00:04:36,600
same binary blob

117
00:04:36,600 --> 00:04:39,000
and therefore might falsely assume like

118
00:04:39,000 --> 00:04:40,800
hey if we both decrypt this ciphertext

119
00:04:40,800 --> 00:04:43,139
we will end up with the same content

120
00:04:43,139 --> 00:04:45,419
however if you have a authenticated

121
00:04:45,419 --> 00:04:46,800
encryption scheme which is not key

122
00:04:46,800 --> 00:04:49,560
committing this is not the case

123
00:04:49,560 --> 00:04:51,780
and for instance one example we found

124
00:04:51,780 --> 00:04:54,180
was the AWS encryption SDK which before

125
00:04:54,180 --> 00:04:57,000
version 2.0 was vulnerable to this

126
00:04:57,000 --> 00:05:00,440
and has been patched since then

127
00:05:01,800 --> 00:05:04,259
and in the last couple of years like a

128
00:05:04,259 --> 00:05:06,720
lot of more practical examples popped up

129
00:05:06,720 --> 00:05:09,960
so this property that you can find these

130
00:05:09,960 --> 00:05:11,100
kind of keys

131
00:05:11,100 --> 00:05:13,139
has been known at least for some schemes

132
00:05:13,139 --> 00:05:14,520
for a while

133
00:05:14,520 --> 00:05:16,320
but it was always unclear this is an

134
00:05:16,320 --> 00:05:18,060
issue in practice

135
00:05:18,060 --> 00:05:19,800
and yeah in our paper we give some other

136
00:05:19,800 --> 00:05:22,740
examples like key rotation so it can

137
00:05:22,740 --> 00:05:24,479
happen you execute some key rotation and

138
00:05:24,479 --> 00:05:26,400
suddenly a previous ciphertext decrypts

139
00:05:26,400 --> 00:05:28,500
to something different

140
00:05:28,500 --> 00:05:30,600
also we found an example in subscribe

141
00:05:30,600 --> 00:05:32,940
with Google but for the details see the

142
00:05:32,940 --> 00:05:34,199
paper

143
00:05:34,199 --> 00:05:36,419
and I would also want to mention like

144
00:05:36,419 --> 00:05:38,580
there was the Facebook message ranking

145
00:05:38,580 --> 00:05:40,620
for the abuse reporting it was like one

146
00:05:40,620 --> 00:05:42,120
of the first really nice practical

147
00:05:42,120 --> 00:05:45,180
examples abusing this property

148
00:05:45,180 --> 00:05:47,100
and although last year at usneck there

149
00:05:47,100 --> 00:05:48,720
was a partitioning Oracle attack which

150
00:05:48,720 --> 00:05:51,180
showed like password-based authenticated

151
00:05:51,180 --> 00:05:54,360
key exchanges can also suffer from

152
00:05:54,360 --> 00:05:56,580
lack of key commitment

153
00:05:56,580 --> 00:05:58,500
and I also found very recently a student

154
00:05:58,500 --> 00:06:00,539
project from eth which looked at the age

155
00:06:00,539 --> 00:06:02,400
file encryption tool

156
00:06:02,400 --> 00:06:03,960
so there's the encryption tool to

157
00:06:03,960 --> 00:06:07,979
provide similar functionalities as pgp

158
00:06:07,979 --> 00:06:09,840
and they also showed that this is not

159
00:06:09,840 --> 00:06:12,300
key committing and you can construct

160
00:06:12,300 --> 00:06:15,600
like similar examples

161
00:06:15,600 --> 00:06:18,360
so how did it exploit this actually so

162
00:06:18,360 --> 00:06:20,699
the good thing or bad thing is like yeah

163
00:06:20,699 --> 00:06:22,500
most of the commonly used authenticated

164
00:06:22,500 --> 00:06:24,360
encryption schemes they are not key

165
00:06:24,360 --> 00:06:25,440
committing

166
00:06:25,440 --> 00:06:28,860
so like as GCM charger 20 poly 1305 they

167
00:06:28,860 --> 00:06:30,479
are not key committing so it's very easy

168
00:06:30,479 --> 00:06:31,800
to find

169
00:06:31,800 --> 00:06:34,500
or construct two keys which decrypt the

170
00:06:34,500 --> 00:06:37,080
same ciphertext valid

171
00:06:37,080 --> 00:06:39,120
and in our paper we also found some

172
00:06:39,120 --> 00:06:42,780
other attacks on like AES GCM SRV which

173
00:06:42,780 --> 00:06:44,699
you might think it's a more robust

174
00:06:44,699 --> 00:06:46,680
scheme but It suffers from the same

175
00:06:46,680 --> 00:06:48,120
properties

176
00:06:48,120 --> 00:06:51,180
and all the ocb3 which is conceptually a

177
00:06:51,180 --> 00:06:53,160
different surprisingly also doesn't have

178
00:06:53,160 --> 00:06:55,699
this property

179
00:06:56,340 --> 00:06:58,520
foreign

180
00:07:01,500 --> 00:07:04,440
can we get like meaningful plain text

181
00:07:04,440 --> 00:07:05,699
out of this

182
00:07:05,699 --> 00:07:07,620
and then like a lot of restrictions in

183
00:07:07,620 --> 00:07:09,539
practice so like the cryptographic

184
00:07:09,539 --> 00:07:10,979
attacks they put like restrictions on

185
00:07:10,979 --> 00:07:13,919
like you have to have some random

186
00:07:13,919 --> 00:07:15,780
flocks of data somewhere to correct the

187
00:07:15,780 --> 00:07:17,520
authentication tag

188
00:07:17,520 --> 00:07:19,500
you might have to pet certain things so

189
00:07:19,500 --> 00:07:23,180
you get a lot of different restrictions

190
00:07:23,460 --> 00:07:25,560
and on the other side like I mean we're

191
00:07:25,560 --> 00:07:28,259
interested not in like just creating any

192
00:07:28,259 --> 00:07:30,360
plain text we want to create valid files

193
00:07:30,360 --> 00:07:32,220
so we can fool a user for instance to

194
00:07:32,220 --> 00:07:34,319
execute a binary or

195
00:07:34,319 --> 00:07:37,680
open a PDF or a website

196
00:07:37,680 --> 00:07:39,300
and file formats put a lot of

197
00:07:39,300 --> 00:07:41,580
restrictions on the content

198
00:07:41,580 --> 00:07:43,080
so it is like you might have like some

199
00:07:43,080 --> 00:07:45,840
magic starting sequences you might have

200
00:07:45,840 --> 00:07:47,520
specific headers

201
00:07:47,520 --> 00:07:49,560
length fields

202
00:07:49,560 --> 00:07:51,419
there's basically an endless list if you

203
00:07:51,419 --> 00:07:52,979
look across file formats what can be

204
00:07:52,979 --> 00:07:55,880
restrictions on this

205
00:07:56,520 --> 00:07:58,800
so can we still create like meaningful

206
00:07:58,800 --> 00:08:01,740
things and yes so in our paper we

207
00:08:01,740 --> 00:08:04,380
provide all the tooling

208
00:08:04,380 --> 00:08:06,900
which supports like over 40 file formats

209
00:08:06,900 --> 00:08:10,440
and you can do like 270 combinations

210
00:08:10,440 --> 00:08:12,599
and completely automated so you give

211
00:08:12,599 --> 00:08:15,780
like a PDF and a binary and our tools

212
00:08:15,780 --> 00:08:17,699
merge this and allow you to construct a

213
00:08:17,699 --> 00:08:20,759
single ciphertext out of it

214
00:08:20,759 --> 00:08:22,860
so we made like examples here like like

215
00:08:22,860 --> 00:08:25,800
a PDF and executable so it's a little

216
00:08:25,800 --> 00:08:28,020
East tag or e-print paper if you if you

217
00:08:28,020 --> 00:08:29,280
download the ePrint paper you can

218
00:08:29,280 --> 00:08:30,660
encrypt it decrypt it with a different

219
00:08:30,660 --> 00:08:33,240
key and you get a PDF viewer so you can

220
00:08:33,240 --> 00:08:35,099
watch the the paper in the with the

221
00:08:35,099 --> 00:08:37,279
paper

222
00:08:38,039 --> 00:08:40,380
so to give you some intuition like how

223
00:08:40,380 --> 00:08:42,539
does this work so HTML is a good example

224
00:08:42,539 --> 00:08:44,039
because it's it's

225
00:08:44,039 --> 00:08:45,839
everyone knows it a little bit and it's

226
00:08:45,839 --> 00:08:48,180
it's quite easy to construct

227
00:08:48,180 --> 00:08:51,240
so this is uh our source file might look

228
00:08:51,240 --> 00:08:55,200
like where we combine two HTML files

229
00:08:55,200 --> 00:08:56,700
so basically you have like at the top

230
00:08:56,700 --> 00:08:57,720
content

231
00:08:57,720 --> 00:08:59,940
and the bottom content and then there's

232
00:08:59,940 --> 00:09:02,640
like some padding and some plug we need

233
00:09:02,640 --> 00:09:06,620
for correcting the authenticity

234
00:09:06,779 --> 00:09:08,580
and then you end up like with this

235
00:09:08,580 --> 00:09:10,320
ciphertext so this is like a single

236
00:09:10,320 --> 00:09:12,540
ciphertext

237
00:09:12,540 --> 00:09:14,820
and when you take it with one key you

238
00:09:14,820 --> 00:09:17,160
get this content

239
00:09:17,160 --> 00:09:18,720
so if you look at it later like there

240
00:09:18,720 --> 00:09:21,540
are some prefix but this gets commented

241
00:09:21,540 --> 00:09:23,519
out in the HTML

242
00:09:23,519 --> 00:09:25,500
and then you see a hello world page if

243
00:09:25,500 --> 00:09:27,600
you open this in your browser

244
00:09:27,600 --> 00:09:30,240
and it's definitely not invisible I mean

245
00:09:30,240 --> 00:09:32,519
you have like random Blobs of data so it

246
00:09:32,519 --> 00:09:34,860
definitely suspicious but the browser

247
00:09:34,860 --> 00:09:37,680
will just render it so a user

248
00:09:37,680 --> 00:09:39,360
might not detect this without looking

249
00:09:39,360 --> 00:09:41,839
closer

250
00:09:42,060 --> 00:09:43,980
and this is the result if you decrypt it

251
00:09:43,980 --> 00:09:45,720
with the second key

252
00:09:45,720 --> 00:09:48,540
so you again like if you use this trick

253
00:09:48,540 --> 00:09:51,240
you comment out part of the the nonsense

254
00:09:51,240 --> 00:09:53,880
and this will show the user website

255
00:09:53,880 --> 00:09:56,899
linking to evil.com

256
00:09:59,760 --> 00:10:01,260
so how can we actually add key

257
00:10:01,260 --> 00:10:03,680
commitment

258
00:10:04,140 --> 00:10:06,660
so in literature there's actually there

259
00:10:06,660 --> 00:10:08,580
are a lot of schemes which are more

260
00:10:08,580 --> 00:10:11,040
robust and are already key committing so

261
00:10:11,040 --> 00:10:14,220
if you really need this and wonder

262
00:10:14,220 --> 00:10:16,380
are free in the choice of the the

263
00:10:16,380 --> 00:10:18,000
authenticated encryption scheme you use

264
00:10:18,000 --> 00:10:19,560
you could just fall back on those

265
00:10:19,560 --> 00:10:21,120
schemes

266
00:10:21,120 --> 00:10:24,060
and also like a lot of schemes might be

267
00:10:24,060 --> 00:10:25,980
key committing so for instance if you

268
00:10:25,980 --> 00:10:28,920
just use AES counter Plus hmac

269
00:10:28,920 --> 00:10:30,899
it seems difficult to break this

270
00:10:30,899 --> 00:10:33,260
property

271
00:10:33,420 --> 00:10:36,300
but in our paper we focused on like we

272
00:10:36,300 --> 00:10:38,820
want to fix the existing schemes so

273
00:10:38,820 --> 00:10:41,940
in many protocols we standards we have

274
00:10:41,940 --> 00:10:44,040
to use astcm

275
00:10:44,040 --> 00:10:47,040
and I won't go into detail so you can

276
00:10:47,040 --> 00:10:48,660
look at the paper but we provide like

277
00:10:48,660 --> 00:10:51,600
two different options how to fix in GCM

278
00:10:51,600 --> 00:10:53,880
or similar schemes the key committing

279
00:10:53,880 --> 00:10:55,260
property

280
00:10:55,260 --> 00:10:57,300
and I'd also like to point out another

281
00:10:57,300 --> 00:10:59,279
paper which was just recently published

282
00:10:59,279 --> 00:11:01,260
at eurocrypt which also provides a more

283
00:11:01,260 --> 00:11:03,360
General view on like committing to the

284
00:11:03,360 --> 00:11:05,640
inputs of the authenticated encryption

285
00:11:05,640 --> 00:11:07,079
and they also provide some very

286
00:11:07,079 --> 00:11:09,480
efficient constructions how to patch

287
00:11:09,480 --> 00:11:11,220
existing authenticated encryption

288
00:11:11,220 --> 00:11:13,579
schemes

289
00:11:14,700 --> 00:11:16,260
so the main takeaway from this talk

290
00:11:16,260 --> 00:11:17,700
should be like yeah the lack of key

291
00:11:17,700 --> 00:11:19,440
commitment can be a problem in practice

292
00:11:19,440 --> 00:11:22,140
so there are real world scenarios and if

293
00:11:22,140 --> 00:11:24,120
you design protocols

294
00:11:24,120 --> 00:11:26,339
it might be good to keep in in your mind

295
00:11:26,339 --> 00:11:28,500
that hey maybe this key committee is a

296
00:11:28,500 --> 00:11:31,380
problem if I rely on on the assumption

297
00:11:31,380 --> 00:11:33,720
that the wrong key will never decrypt

298
00:11:33,720 --> 00:11:35,399
well it

299
00:11:35,399 --> 00:11:37,079
and then I don't think of everything is

300
00:11:37,079 --> 00:11:39,540
that if we design new authenticated

301
00:11:39,540 --> 00:11:41,519
encryption schemes it would be good if

302
00:11:41,519 --> 00:11:43,079
like we understand are they key

303
00:11:43,079 --> 00:11:44,399
committing or not

304
00:11:44,399 --> 00:11:46,320
because like a lot of schemes I see

305
00:11:46,320 --> 00:11:47,880
getting published and

306
00:11:47,880 --> 00:11:49,920
this this property is just ignored like

307
00:11:49,920 --> 00:11:51,899
we had like this accommodation running

308
00:11:51,899 --> 00:11:54,120
for authenticated encryption and for

309
00:11:54,120 --> 00:11:55,620
many schemes we have no idea are they

310
00:11:55,620 --> 00:11:57,180
key committing or not so people should

311
00:11:57,180 --> 00:11:58,920
do analysis and

312
00:11:58,920 --> 00:12:01,140
ideally prove that their scheme provides

313
00:12:01,140 --> 00:12:03,180
this property

314
00:12:03,180 --> 00:12:05,519
and a bunch of resources available our

315
00:12:05,519 --> 00:12:07,320
ePrint paper then we have the tooling

316
00:12:07,320 --> 00:12:08,940
for the file formats and the tooling for

317
00:12:08,940 --> 00:12:11,959
the cryptographic ethics

318
00:12:12,060 --> 00:12:13,980
thank you for your attention and if you

319
00:12:13,980 --> 00:12:15,480
have any questions

320
00:12:15,480 --> 00:12:18,200
please go ahead

