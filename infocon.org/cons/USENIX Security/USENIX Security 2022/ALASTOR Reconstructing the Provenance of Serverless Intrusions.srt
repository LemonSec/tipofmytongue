1
00:00:07,760 --> 00:00:10,980
good afternoon everyone so today I'm

2
00:00:10,980 --> 00:00:13,139
going to talk about reconstructing

3
00:00:13,139 --> 00:00:15,299
attack provenance in serverless clouds

4
00:00:15,299 --> 00:00:18,060
this is a joint work from the University

5
00:00:18,060 --> 00:00:20,640
of Illinois at Urbana Champaign and NC

6
00:00:20,640 --> 00:00:22,880
State

7
00:00:23,279 --> 00:00:25,740
so if we look at serverless programming

8
00:00:25,740 --> 00:00:27,960
model it's quite different from the

9
00:00:27,960 --> 00:00:30,539
traditional web applications so here

10
00:00:30,539 --> 00:00:33,239
applications consist of several small

11
00:00:33,239 --> 00:00:35,700
functions that only execute for few

12
00:00:35,700 --> 00:00:36,660
seconds

13
00:00:36,660 --> 00:00:39,300
or like few Cycles

14
00:00:39,300 --> 00:00:42,120
um each serverless application the logic

15
00:00:42,120 --> 00:00:45,960
is constructed as a bunch of workflows

16
00:00:45,960 --> 00:00:48,840
and each workflow consists of several

17
00:00:48,840 --> 00:00:51,059
functions then data stores and other

18
00:00:51,059 --> 00:00:54,480
Cloud components and they communicate to

19
00:00:54,480 --> 00:00:57,600
each other to get the things done

20
00:00:57,600 --> 00:01:00,600
so this cloud computing programming

21
00:01:00,600 --> 00:01:03,840
model makes the functions isolated and

22
00:01:03,840 --> 00:01:06,060
stateless

23
00:01:06,060 --> 00:01:09,540
and it has become quite popular in the

24
00:01:09,540 --> 00:01:12,840
industry the reason being that the

25
00:01:12,840 --> 00:01:15,600
serverless cloud platforms take away the

26
00:01:15,600 --> 00:01:17,720
task of management

27
00:01:17,720 --> 00:01:21,479
from the developers so everything in the

28
00:01:21,479 --> 00:01:24,479
back end and the software software stack

29
00:01:24,479 --> 00:01:28,080
is managed and you also don't need to

30
00:01:28,080 --> 00:01:30,780
worry about Auto scaling and load

31
00:01:30,780 --> 00:01:33,840
balancing based on the request load you

32
00:01:33,840 --> 00:01:35,820
can increase the number of your

33
00:01:35,820 --> 00:01:40,860
instances that service the request

34
00:01:40,860 --> 00:01:44,280
incoming requests and you can also scale

35
00:01:44,280 --> 00:01:47,820
it down to zero when it's not that busy

36
00:01:47,820 --> 00:01:51,720
also the users only pay for the Cycles

37
00:01:51,720 --> 00:01:55,560
the function executes for thus Bringing

38
00:01:55,560 --> 00:01:59,119
Down the cost significantly

39
00:02:00,360 --> 00:02:03,420
so do serverless also buy us additional

40
00:02:03,420 --> 00:02:06,180
security so let's look at this example

41
00:02:06,180 --> 00:02:08,459
which is modeled after a proof of

42
00:02:08,459 --> 00:02:09,619
concept

43
00:02:09,619 --> 00:02:13,520
example of a retail serverless

44
00:02:13,520 --> 00:02:17,160
application from Nordstrom

45
00:02:17,160 --> 00:02:20,160
so here is the retail website portal

46
00:02:20,160 --> 00:02:23,640
where customers can browse and they can

47
00:02:23,640 --> 00:02:26,940
click to launch a function which is a

48
00:02:26,940 --> 00:02:29,520
product purchase function that can

49
00:02:29,520 --> 00:02:31,980
invoke authorized credit card function

50
00:02:31,980 --> 00:02:36,239
which authorizes the purchase and then

51
00:02:36,239 --> 00:02:40,319
the purchase status can be communicated

52
00:02:40,319 --> 00:02:42,180
to the customer through this public

53
00:02:42,180 --> 00:02:44,519
status function

54
00:02:44,519 --> 00:02:47,400
so all these functions are protected by

55
00:02:47,400 --> 00:02:51,480
role-based Access Control policies

56
00:02:51,480 --> 00:02:54,920
and when the request load increases

57
00:02:54,920 --> 00:02:59,160
in addition to scaling up the function

58
00:02:59,160 --> 00:03:03,480
instances the platform also caches them

59
00:03:03,480 --> 00:03:06,959
in memory and recycles them to avoid the

60
00:03:06,959 --> 00:03:09,060
costly operation of respawning the

61
00:03:09,060 --> 00:03:12,060
containers again and again

62
00:03:12,060 --> 00:03:15,900
so uh we would think that this scenario

63
00:03:15,900 --> 00:03:18,720
is more secure because each of these

64
00:03:18,720 --> 00:03:21,720
functions they are just live for

65
00:03:21,720 --> 00:03:24,840
few milliseconds and it's hard for an

66
00:03:24,840 --> 00:03:28,440
attacker to get a foothold to launch a

67
00:03:28,440 --> 00:03:30,959
time consuming attack

68
00:03:30,959 --> 00:03:36,360
however in April 2022 we see a report

69
00:03:36,360 --> 00:03:38,760
from Palo Alto Network's threat

70
00:03:38,760 --> 00:03:41,159
researchers that in spite of having

71
00:03:41,159 --> 00:03:44,220
identity and access management policies

72
00:03:44,220 --> 00:03:48,780
in place 99 of these Cloud entities are

73
00:03:48,780 --> 00:03:52,799
over privileged and 65 percent of known

74
00:03:52,799 --> 00:03:55,140
Cloud security attacks are due to

75
00:03:55,140 --> 00:03:56,940
misconfigurations

76
00:03:56,940 --> 00:04:00,120
so let us see what will happen if we if

77
00:04:00,120 --> 00:04:02,519
we have a misconfiguration in this

78
00:04:02,519 --> 00:04:05,480
credit card database

79
00:04:05,540 --> 00:04:08,819
ah let's say an attacker got their hand

80
00:04:08,819 --> 00:04:11,640
to some stolen credentials and they were

81
00:04:11,640 --> 00:04:15,180
able to exploit a bug present in the odd

82
00:04:15,180 --> 00:04:17,220
CC function

83
00:04:17,220 --> 00:04:20,399
using that bug they connect to an

84
00:04:20,399 --> 00:04:22,560
attacker controlled domain and they

85
00:04:22,560 --> 00:04:24,660
download some malwares

86
00:04:24,660 --> 00:04:27,419
and thus they can

87
00:04:27,419 --> 00:04:29,639
steal some data from the credit card

88
00:04:29,639 --> 00:04:32,880
database now

89
00:04:32,880 --> 00:04:35,600
if they want to get

90
00:04:35,600 --> 00:04:38,820
and the SQL dump of the entire database

91
00:04:38,820 --> 00:04:41,820
that can be time consuming but recall

92
00:04:41,820 --> 00:04:45,540
that in the serverless platforms they

93
00:04:45,540 --> 00:04:48,060
recycle the same container again and

94
00:04:48,060 --> 00:04:50,520
again thus giving them enough time to

95
00:04:50,520 --> 00:04:53,580
exfiltrate the data

96
00:04:53,580 --> 00:04:56,580
they can also use the downstream

97
00:04:56,580 --> 00:04:58,979
functions like public status which has

98
00:04:58,979 --> 00:05:03,000
access to outbound apis like phone

99
00:05:03,000 --> 00:05:06,300
message email or other apis that are

100
00:05:06,300 --> 00:05:08,460
legitimate to use and they can launder

101
00:05:08,460 --> 00:05:10,320
the data this way

102
00:05:10,320 --> 00:05:13,080
so after we have seen such uh attack

103
00:05:13,080 --> 00:05:15,419
vectors in server list the question we

104
00:05:15,419 --> 00:05:18,660
may ask is that do existing systems

105
00:05:18,660 --> 00:05:20,940
prevent or at least help investigation

106
00:05:20,940 --> 00:05:24,060
of such attacks

107
00:05:24,060 --> 00:05:27,419
we found out that not only these attacks

108
00:05:27,419 --> 00:05:30,000
are hard to prevent there are also like

109
00:05:30,000 --> 00:05:32,880
limited auditing solutions that can help

110
00:05:32,880 --> 00:05:34,940
investigation of such attacks

111
00:05:34,940 --> 00:05:38,100
traditional approaches like Linux audit

112
00:05:38,100 --> 00:05:40,440
they do not know about the serverless

113
00:05:40,440 --> 00:05:43,199
semantics so they do not have idea about

114
00:05:43,199 --> 00:05:46,020
platform apis or different function

115
00:05:46,020 --> 00:05:48,539
containers or things like container

116
00:05:48,539 --> 00:05:49,500
reuse

117
00:05:49,500 --> 00:05:51,840
and there are also this existing

118
00:05:51,840 --> 00:05:56,220
provenance based tools which remove many

119
00:05:56,220 --> 00:05:58,560
terminated system events aggressively

120
00:05:58,560 --> 00:06:01,199
which is not useful in this case because

121
00:06:01,199 --> 00:06:03,720
in serverless there are many terminated

122
00:06:03,720 --> 00:06:08,280
function executions that are ephemeral

123
00:06:08,280 --> 00:06:11,639
so we have some observability tools as

124
00:06:11,639 --> 00:06:14,039
well uh these third-party observability

125
00:06:14,039 --> 00:06:15,419
tools

126
00:06:15,419 --> 00:06:18,080
um they use they have some features like

127
00:06:18,080 --> 00:06:20,820
distributed tracing and cost analysis

128
00:06:20,820 --> 00:06:23,819
but they have stick strict usage limits

129
00:06:23,819 --> 00:06:26,400
and mostly they are runtime and platform

130
00:06:26,400 --> 00:06:28,800
dependent

131
00:06:28,800 --> 00:06:33,120
so here we see uh an um screenshot from

132
00:06:33,120 --> 00:06:36,180
a tool called epsagon which is a cloud

133
00:06:36,180 --> 00:06:40,080
security tool so here we can see that

134
00:06:40,080 --> 00:06:43,380
this tool keeps track of the inter

135
00:06:43,380 --> 00:06:46,080
function Communications as a at a course

136
00:06:46,080 --> 00:06:50,460
current level and they also track some

137
00:06:50,460 --> 00:06:52,560
function execution information like the

138
00:06:52,560 --> 00:06:54,020
execution time

139
00:06:54,020 --> 00:06:58,800
but these informations are not as

140
00:06:58,800 --> 00:07:02,520
helpful in investigating the attacks we

141
00:07:02,520 --> 00:07:05,240
just discussed

142
00:07:05,400 --> 00:07:08,819
so in this talk I am presenting Alistar

143
00:07:08,819 --> 00:07:11,520
a complete auditing solution for

144
00:07:11,520 --> 00:07:14,160
serverless clouds that use data

145
00:07:14,160 --> 00:07:17,000
provenance techniques

146
00:07:18,060 --> 00:07:20,940
the first question that informed the

147
00:07:20,940 --> 00:07:23,280
design of Alistar is that what are the

148
00:07:23,280 --> 00:07:26,039
different types of entities and

149
00:07:26,039 --> 00:07:28,819
activities that we need to audit to

150
00:07:28,819 --> 00:07:31,680
preserve helpful forensics information

151
00:07:31,680 --> 00:07:34,680
for serverless attack investigation

152
00:07:34,680 --> 00:07:39,599
so in the serverless function instances

153
00:07:39,599 --> 00:07:42,060
we have this request Handler that

154
00:07:42,060 --> 00:07:45,240
Services the request that comes in from

155
00:07:45,240 --> 00:07:46,919
the application Gateway

156
00:07:46,919 --> 00:07:49,340
when a request comes in the function

157
00:07:49,340 --> 00:07:52,800
executor creates a process P that

158
00:07:52,800 --> 00:07:57,259
achieves the task of this function

159
00:07:57,419 --> 00:07:59,819
we design a lightweight Alistar

160
00:07:59,819 --> 00:08:01,740
provenance collector module that is

161
00:08:01,740 --> 00:08:04,460
local to this function instance

162
00:08:04,460 --> 00:08:08,580
it achieves a list of tasks the first

163
00:08:08,580 --> 00:08:09,979
one being

164
00:08:09,979 --> 00:08:12,960
tracing the system call that is being

165
00:08:12,960 --> 00:08:15,240
invoked by process p

166
00:08:15,240 --> 00:08:18,660
it also keeps track of all inbound and

167
00:08:18,660 --> 00:08:23,300
outbound Connections in this instance

168
00:08:23,400 --> 00:08:26,759
we also look at the Port bindings to

169
00:08:26,759 --> 00:08:30,120
keep track of which process is creating

170
00:08:30,120 --> 00:08:33,080
which network connection

171
00:08:33,179 --> 00:08:35,640
all of this information and logging

172
00:08:35,640 --> 00:08:37,380
information from the request handle

173
00:08:37,380 --> 00:08:40,740
Handler is summarized in a form of local

174
00:08:40,740 --> 00:08:42,360
provenance graph

175
00:08:42,360 --> 00:08:44,459
that preserves all the causal

176
00:08:44,459 --> 00:08:46,320
information between these different

177
00:08:46,320 --> 00:08:48,600
event that are happening in this

178
00:08:48,600 --> 00:08:50,959
instance

179
00:08:51,660 --> 00:08:54,060
so now that we have this local

180
00:08:54,060 --> 00:08:55,680
provenance graphs at this different

181
00:08:55,680 --> 00:08:58,380
function instances the next question we

182
00:08:58,380 --> 00:09:00,420
asked is that how we can meaningfully

183
00:09:00,420 --> 00:09:02,580
combine all this information to

184
00:09:02,580 --> 00:09:05,399
facilitate attack investigation for that

185
00:09:05,399 --> 00:09:08,220
we take help of the serverless platform

186
00:09:08,220 --> 00:09:12,120
services and the logs preserved by them

187
00:09:12,120 --> 00:09:15,540
we get the information about what IP

188
00:09:15,540 --> 00:09:17,220
addresses are assigned to which

189
00:09:17,220 --> 00:09:20,519
instances and also which requests are

190
00:09:20,519 --> 00:09:24,000
serviced by which instances

191
00:09:24,000 --> 00:09:27,120
based on this information we stitch the

192
00:09:27,120 --> 00:09:29,220
different local provenance graphs into a

193
00:09:29,220 --> 00:09:32,279
global provenance graph that explains

194
00:09:32,279 --> 00:09:36,920
the behavior of the entire application

195
00:09:37,860 --> 00:09:40,260
let us get back to the serverless attack

196
00:09:40,260 --> 00:09:43,800
example where a bug in the odd CC

197
00:09:43,800 --> 00:09:46,620
function was exploited to steal some

198
00:09:46,620 --> 00:09:49,440
data from the credit card database and

199
00:09:49,440 --> 00:09:52,440
then through repeated invocation of this

200
00:09:52,440 --> 00:09:54,720
function the attacker got enough time

201
00:09:54,720 --> 00:09:57,360
and then exfilted the data through the

202
00:09:57,360 --> 00:09:59,820
public status function using legitimate

203
00:09:59,820 --> 00:10:03,000
platform apis

204
00:10:03,000 --> 00:10:06,600
so we implemented the attack uh within

205
00:10:06,600 --> 00:10:09,120
the hello retail application and then we

206
00:10:09,120 --> 00:10:11,160
traced the attack Behavior using the

207
00:10:11,160 --> 00:10:14,040
ipsagon tool this is the graph we get

208
00:10:14,040 --> 00:10:17,459
from ipsagon they keep track of the

209
00:10:17,459 --> 00:10:20,339
inter function Communications and also

210
00:10:20,339 --> 00:10:22,140
the request latencies

211
00:10:22,140 --> 00:10:25,140
but we do not see enough information to

212
00:10:25,140 --> 00:10:28,160
investigate the attack

213
00:10:28,440 --> 00:10:31,560
we get a tiny bit of evidence in the

214
00:10:31,560 --> 00:10:34,740
abnormal execution time for the attack

215
00:10:34,740 --> 00:10:37,800
Trace but we do not know why this is

216
00:10:37,800 --> 00:10:41,420
happening or how this is happening

217
00:10:41,640 --> 00:10:44,279
this is how the provenance graph looks

218
00:10:44,279 --> 00:10:46,079
like when we trace the attack with

219
00:10:46,079 --> 00:10:48,739
Alistar

220
00:10:49,200 --> 00:10:52,019
from the local graphs we get the

221
00:10:52,019 --> 00:10:53,640
information about the network

222
00:10:53,640 --> 00:10:57,060
communications that are being created

223
00:10:57,060 --> 00:10:59,459
from the instance itself or being

224
00:10:59,459 --> 00:11:01,740
received at the instance and also

225
00:11:01,740 --> 00:11:04,260
different system events inside the

226
00:11:04,260 --> 00:11:07,260
function instance are recorded

227
00:11:07,260 --> 00:11:10,680
then at the global level we have

228
00:11:10,680 --> 00:11:13,200
information on every container that was

229
00:11:13,200 --> 00:11:16,560
spawned and every request they served we

230
00:11:16,560 --> 00:11:18,000
also track the inter function

231
00:11:18,000 --> 00:11:20,820
Communications among the different Cloud

232
00:11:20,820 --> 00:11:24,320
components in this setting

233
00:11:24,540 --> 00:11:27,420
if we take a closer look at one of the

234
00:11:27,420 --> 00:11:30,480
containers we see that request 1 is

235
00:11:30,480 --> 00:11:33,540
coming into the auth CC function

236
00:11:33,540 --> 00:11:35,880
then it's exploiting the bug already

237
00:11:35,880 --> 00:11:37,680
present in the function

238
00:11:37,680 --> 00:11:40,560
and creating a connection to an attacker

239
00:11:40,560 --> 00:11:42,180
controlled server

240
00:11:42,180 --> 00:11:45,000
to download some malicious files

241
00:11:45,000 --> 00:11:49,140
then if a request comes in in quick

242
00:11:49,140 --> 00:11:51,680
succession then

243
00:11:51,680 --> 00:11:55,519
they already have this

244
00:11:55,519 --> 00:11:58,980
malicious files handy and they can use

245
00:11:58,980 --> 00:11:59,940
that

246
00:11:59,940 --> 00:12:02,820
to steal some data from the credit card

247
00:12:02,820 --> 00:12:04,740
database

248
00:12:04,740 --> 00:12:07,800
so this is how the container use attack

249
00:12:07,800 --> 00:12:10,019
looks like when we trace this attack

250
00:12:10,019 --> 00:12:13,500
using Alistair in our paper we have more

251
00:12:13,500 --> 00:12:16,920
examples of search serverless attacks so

252
00:12:16,920 --> 00:12:20,640
please do give our paper a deed

253
00:12:20,640 --> 00:12:23,160
to conclude Alistar can be used to

254
00:12:23,160 --> 00:12:25,200
diagnose the serverless specific attack

255
00:12:25,200 --> 00:12:27,600
techniques like container use and

256
00:12:27,600 --> 00:12:30,420
exfiltration through down Downstream

257
00:12:30,420 --> 00:12:32,940
functions it also imposes manageable

258
00:12:32,940 --> 00:12:36,060
performance overhead but in exchange we

259
00:12:36,060 --> 00:12:39,480
get a lot improved forensics capability

260
00:12:39,480 --> 00:12:42,180
and Alistar logs can also be used with

261
00:12:42,180 --> 00:12:45,839
other tools like deep log for intrusion

262
00:12:45,839 --> 00:12:47,240
detection

263
00:12:47,240 --> 00:12:50,160
thanks for listening to my talk and I am

264
00:12:50,160 --> 00:12:53,180
happy to answer questions

