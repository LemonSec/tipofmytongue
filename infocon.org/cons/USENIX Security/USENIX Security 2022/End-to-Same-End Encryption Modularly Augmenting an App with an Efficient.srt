1
00:00:08,660 --> 00:00:12,179
so I'm talk I'm going to talk about N2

2
00:00:12,179 --> 00:00:14,880
same end encryption modularly augmenting

3
00:00:14,880 --> 00:00:15,900
an app

4
00:00:15,900 --> 00:00:17,699
with an efficient portable and blind

5
00:00:17,699 --> 00:00:21,240
cloud storage joint work with a long

6
00:00:21,240 --> 00:00:22,800
chain from the Chinese Academy of

7
00:00:22,800 --> 00:00:25,980
Science Ian only and Xiang Tang from

8
00:00:25,980 --> 00:00:28,519
University of Sydney

9
00:00:28,519 --> 00:00:31,920
and uh

10
00:00:31,920 --> 00:00:34,860
this actually a story which started with

11
00:00:34,860 --> 00:00:38,579
a real app that needed augmentation

12
00:00:38,579 --> 00:00:44,360
so as we know the cloud is pervasive

13
00:00:44,360 --> 00:00:47,899
and uh

14
00:00:48,239 --> 00:00:50,039
people

15
00:00:50,039 --> 00:00:53,340
app providers and so on use the cloud

16
00:00:53,340 --> 00:00:54,780
storage

17
00:00:54,780 --> 00:00:57,719
but then bad things can happen then we

18
00:00:57,719 --> 00:01:00,059
learn a few years ago

19
00:01:00,059 --> 00:01:03,539
the incident of iCloud in which the

20
00:01:03,539 --> 00:01:07,439
the data the cloud data was essentially

21
00:01:07,439 --> 00:01:08,939
stolen

22
00:01:08,939 --> 00:01:11,400
it was through an account recovery

23
00:01:11,400 --> 00:01:15,119
mechanism so like everything

24
00:01:15,119 --> 00:01:17,400
every new security mechanism is another

25
00:01:17,400 --> 00:01:19,920
attack Vector so somebody was doing

26
00:01:19,920 --> 00:01:22,920
account recovery recover the the account

27
00:01:22,920 --> 00:01:26,700
of the celebrities and and took their

28
00:01:26,700 --> 00:01:28,920
the clear data

29
00:01:28,920 --> 00:01:31,979
anyway so once the data is outsourced

30
00:01:31,979 --> 00:01:35,220
with no protection the user is not there

31
00:01:35,220 --> 00:01:38,520
and think bad things can happen

32
00:01:38,520 --> 00:01:43,799
and we want to secure the cloud data

33
00:01:43,799 --> 00:01:46,259
in a way that uh

34
00:01:46,259 --> 00:01:50,040
almost any provider think about Dropbox

35
00:01:50,040 --> 00:01:52,020
or

36
00:01:52,020 --> 00:01:54,600
any Cloud Server

37
00:01:54,600 --> 00:01:57,600
will be able to support it

38
00:01:57,600 --> 00:02:00,540
so there's some Simplicity element that

39
00:02:00,540 --> 00:02:02,759
involves in in this

40
00:02:02,759 --> 00:02:05,360
because you don't have the freedom to

41
00:02:05,360 --> 00:02:07,860
concoct your own solution you have to

42
00:02:07,860 --> 00:02:12,060
use the servers API

43
00:02:12,060 --> 00:02:13,800
but uh

44
00:02:13,800 --> 00:02:16,860
let's see attempts to to secure the the

45
00:02:16,860 --> 00:02:18,540
cloud storage

46
00:02:18,540 --> 00:02:21,360
so encrypt data and store key on the

47
00:02:21,360 --> 00:02:23,099
user device

48
00:02:23,099 --> 00:02:25,860
but this gives you no portability single

49
00:02:25,860 --> 00:02:28,760
device failure you can fail and why

50
00:02:28,760 --> 00:02:31,620
portability is like mobility in which

51
00:02:31,620 --> 00:02:33,720
you can

52
00:02:33,720 --> 00:02:36,959
you can access the servers from any

53
00:02:36,959 --> 00:02:39,140
device

54
00:02:39,140 --> 00:02:42,900
and people ask me why but why why do you

55
00:02:42,900 --> 00:02:45,720
need this I always carry my phone well

56
00:02:45,720 --> 00:02:48,599
the users of that app were not behaving

57
00:02:48,599 --> 00:02:51,360
the way you expect them and it's good to

58
00:02:51,360 --> 00:02:53,879
have this portability anyway think about

59
00:02:53,879 --> 00:02:58,500
think about a service to a group who

60
00:02:58,500 --> 00:03:01,200
which shares a

61
00:03:01,200 --> 00:03:03,300
password and then they can come from

62
00:03:03,300 --> 00:03:04,739
different places

63
00:03:04,739 --> 00:03:06,720
so portability is good and we are

64
00:03:06,720 --> 00:03:09,060
talking about defining a service here

65
00:03:09,060 --> 00:03:12,120
that is uh that can have extensions and

66
00:03:12,120 --> 00:03:13,700
other uses it's a kind of

67
00:03:13,700 --> 00:03:16,200
infrastructural uh

68
00:03:16,200 --> 00:03:17,700
element

69
00:03:17,700 --> 00:03:20,280
okay so another way is to use the

70
00:03:20,280 --> 00:03:22,319
password to derive a key

71
00:03:22,319 --> 00:03:25,379
because the user supposedly that's in

72
00:03:25,379 --> 00:03:27,840
apps that's what you use in order to log

73
00:03:27,840 --> 00:03:29,400
into the apps that's your source of

74
00:03:29,400 --> 00:03:31,019
security

75
00:03:31,019 --> 00:03:34,319
but security is too weak offline attacks

76
00:03:34,319 --> 00:03:35,720
on on

77
00:03:35,720 --> 00:03:38,040
password-based cryptographic keys are

78
00:03:38,040 --> 00:03:41,959
known I'm not going to to repeat it here

79
00:03:41,959 --> 00:03:45,980
so a wise guy comes and say enforcer

80
00:03:45,980 --> 00:03:48,540
128-bit entropy password

81
00:03:48,540 --> 00:03:50,640
but you've been attending using security

82
00:03:50,640 --> 00:03:53,099
for years and you know that

83
00:03:53,099 --> 00:03:55,260
the usability session is going to kill

84
00:03:55,260 --> 00:03:59,220
this solution yes it's not usable

85
00:03:59,220 --> 00:04:02,060
so

86
00:04:03,060 --> 00:04:05,700
then you do password encrypt key on

87
00:04:05,700 --> 00:04:08,040
device which is in some Services it's

88
00:04:08,040 --> 00:04:10,500
being used but again this gives you no

89
00:04:10,500 --> 00:04:12,659
portability you're dependent

90
00:04:12,659 --> 00:04:14,939
upon a single device

91
00:04:14,939 --> 00:04:18,120
and then Store password encrypted key in

92
00:04:18,120 --> 00:04:19,620
the cloud

93
00:04:19,620 --> 00:04:21,720
security is too weak again offline

94
00:04:21,720 --> 00:04:22,860
attacks

95
00:04:22,860 --> 00:04:25,500
so all these Solutions don't seems to

96
00:04:25,500 --> 00:04:29,639
work if you if you want security

97
00:04:29,639 --> 00:04:31,800
end usability

98
00:04:31,800 --> 00:04:34,680
and security I mean encrypted data is a

99
00:04:34,680 --> 00:04:38,520
strong key against offline attacks

100
00:04:38,520 --> 00:04:41,520
and we want this portability that I

101
00:04:41,520 --> 00:04:43,080
explained before you can come from

102
00:04:43,080 --> 00:04:44,820
anywhere naked only with your password

103
00:04:44,820 --> 00:04:47,940
in your head and if the app is on the

104
00:04:47,940 --> 00:04:51,000
device you want to use it

105
00:04:51,000 --> 00:04:53,280
to log into it and use it

106
00:04:53,280 --> 00:04:55,500
and uh

107
00:04:55,500 --> 00:04:59,240
two other requirements are efficiency

108
00:04:59,240 --> 00:05:01,880
and and

109
00:05:01,880 --> 00:05:05,040
system friendliness but just these

110
00:05:05,040 --> 00:05:07,139
requirements by themselves of

111
00:05:07,139 --> 00:05:08,960
portability

112
00:05:08,960 --> 00:05:12,240
and user has only its password and then

113
00:05:12,240 --> 00:05:15,780
you have to to store things secure

114
00:05:15,780 --> 00:05:19,020
securely this already shows that one

115
00:05:19,020 --> 00:05:21,620
server solution seems hopeless actually

116
00:05:21,620 --> 00:05:24,900
it reminds people it may remind people

117
00:05:24,900 --> 00:05:26,880
of Pake

118
00:05:26,880 --> 00:05:29,100
and there is a way to implement with

119
00:05:29,100 --> 00:05:31,320
this primitive Peak and then Pake we

120
00:05:31,320 --> 00:05:34,800
know that you you cannot do without a

121
00:05:34,800 --> 00:05:37,740
dedicated Public public key and and

122
00:05:37,740 --> 00:05:41,460
other mechanisms and therefore

123
00:05:41,460 --> 00:05:45,720
it contradicts the efficiency Simplicity

124
00:05:45,720 --> 00:05:48,660
and system friendliness which we want

125
00:05:48,660 --> 00:05:51,240
because we want it usable and we don't

126
00:05:51,240 --> 00:05:53,100
want

127
00:05:53,100 --> 00:05:57,139
we want to use existing apis to build it

128
00:05:57,139 --> 00:06:00,840
and so it becomes

129
00:06:00,840 --> 00:06:02,520
interesting

130
00:06:02,520 --> 00:06:04,919
to do it

131
00:06:04,919 --> 00:06:08,160
and in in in the sense that

132
00:06:08,160 --> 00:06:11,039
you know typical typically in

133
00:06:11,039 --> 00:06:14,220
cryptography you come up with a

134
00:06:14,220 --> 00:06:17,100
mechanism and a sophisticated and you

135
00:06:17,100 --> 00:06:20,180
use like almost the latest

136
00:06:20,180 --> 00:06:22,919
cryptographic tools that are have been

137
00:06:22,919 --> 00:06:26,400
just proven secure in the last crypto

138
00:06:26,400 --> 00:06:31,199
conference but uh here we we kind of

139
00:06:31,199 --> 00:06:34,080
it's It's a Zen minimalism it's what the

140
00:06:34,080 --> 00:06:37,139
API gives you you have to work with it

141
00:06:37,139 --> 00:06:39,180
so in a sense we have to break the box

142
00:06:39,180 --> 00:06:41,880
so the difficulty mainly comes from the

143
00:06:41,880 --> 00:06:44,819
setting one client One Cloud

144
00:06:44,819 --> 00:06:47,699
so

145
00:06:47,699 --> 00:06:49,979
as I told you this this started in

146
00:06:49,979 --> 00:06:53,280
industry in within an app company and

147
00:06:53,280 --> 00:06:55,280
the idea was

148
00:06:55,280 --> 00:06:58,259
that and and and one thing in

149
00:06:58,259 --> 00:07:00,780
translating cryptographic solo solutions

150
00:07:00,780 --> 00:07:02,160
to

151
00:07:02,160 --> 00:07:05,880
to actual deployment is combining the

152
00:07:05,880 --> 00:07:07,979
theory the knowledge of the of the

153
00:07:07,979 --> 00:07:10,919
theory the knowledge of systems need

154
00:07:10,919 --> 00:07:14,220
and exploiting the architecture and here

155
00:07:14,220 --> 00:07:16,380
the architecture so a combination of

156
00:07:16,380 --> 00:07:18,900
these three here the architecture played

157
00:07:18,900 --> 00:07:22,020
uh well for us because they are

158
00:07:22,020 --> 00:07:24,000
some other servers

159
00:07:24,000 --> 00:07:27,120
like the app company servers

160
00:07:27,120 --> 00:07:31,560
uh can be used they are different than

161
00:07:31,560 --> 00:07:34,080
the Cloud Server

162
00:07:34,080 --> 00:07:38,280
so let's call it the app server

163
00:07:38,280 --> 00:07:41,340
so we don't necessarily have just one

164
00:07:41,340 --> 00:07:43,620
client One Cloud but

165
00:07:43,620 --> 00:07:45,180
we have

166
00:07:45,180 --> 00:07:48,780
extra at least in one extra

167
00:07:48,780 --> 00:07:52,979
server in the in the puzzle and we

168
00:07:52,979 --> 00:07:55,580
should use it

169
00:07:55,639 --> 00:07:59,220
so what is the state of the art with two

170
00:07:59,220 --> 00:08:00,479
servers

171
00:08:00,479 --> 00:08:04,740
you have two servers and you want to to

172
00:08:04,740 --> 00:08:09,380
to to solve uh kind of

173
00:08:09,960 --> 00:08:13,500
the problem of depositing information in

174
00:08:13,500 --> 00:08:15,900
the server the the server does not read

175
00:08:15,900 --> 00:08:18,240
and then you can read it back

176
00:08:18,240 --> 00:08:21,479
this is the end to same end you put it

177
00:08:21,479 --> 00:08:22,979
in the server and you take it back to

178
00:08:22,979 --> 00:08:24,720
yourself maybe in another device but

179
00:08:24,720 --> 00:08:27,120
it's from you to yourself via the the

180
00:08:27,120 --> 00:08:29,720
cloud and the cloud should stay blind

181
00:08:29,720 --> 00:08:32,700
so uh

182
00:08:32,700 --> 00:08:34,799
of course with two servers we can

183
00:08:34,799 --> 00:08:37,799
Implement General MPC

184
00:08:37,799 --> 00:08:40,380
to solve such a problem

185
00:08:40,380 --> 00:08:44,339
or even more efficiently

186
00:08:44,339 --> 00:08:47,519
password protected secret sharing was

187
00:08:47,519 --> 00:08:50,580
designed to solve these things

188
00:08:50,580 --> 00:08:54,360
but those are you know you start to

189
00:08:54,360 --> 00:08:58,080
design MPC and all you have is TLS to a

190
00:08:58,080 --> 00:09:00,120
server and of course and to the other

191
00:09:00,120 --> 00:09:01,740
server and of course you can you can

192
00:09:01,740 --> 00:09:05,700
play the MPC game but uh

193
00:09:05,700 --> 00:09:10,140
but it's going to be very costly and

194
00:09:10,140 --> 00:09:12,660
it's not the right solution most likely

195
00:09:12,660 --> 00:09:15,720
from many other from performance

196
00:09:15,720 --> 00:09:18,060
perspective primarily but from many

197
00:09:18,060 --> 00:09:21,540
other ways and and reasons

198
00:09:21,540 --> 00:09:24,920
and uh

199
00:09:25,440 --> 00:09:28,200
these are incompatible with really plain

200
00:09:28,200 --> 00:09:30,660
cloud storage because what Dropbox gives

201
00:09:30,660 --> 00:09:34,260
you is TLS interface

202
00:09:34,260 --> 00:09:36,060
login

203
00:09:36,060 --> 00:09:39,779
your indecision send me data

204
00:09:39,779 --> 00:09:42,360
you're in in the session

205
00:09:42,360 --> 00:09:44,279
take your data

206
00:09:44,279 --> 00:09:46,440
that's the interface login retrieve

207
00:09:46,440 --> 00:09:47,760
deposit

208
00:09:47,760 --> 00:09:52,200
and and and this gives an interesting

209
00:09:52,200 --> 00:09:53,880
problem in you know in mathematics

210
00:09:53,880 --> 00:09:56,399
people like to simplify and have Simple

211
00:09:56,399 --> 00:09:59,940
Solutions and and so on

212
00:09:59,940 --> 00:10:02,760
here the Simplicity comes the the the

213
00:10:02,760 --> 00:10:07,200
the framework is the framework of of the

214
00:10:07,200 --> 00:10:11,220
API of what the the the the servers

215
00:10:11,220 --> 00:10:13,380
provide and many times in Solutions

216
00:10:13,380 --> 00:10:17,040
people ignore this aspect because it's

217
00:10:17,040 --> 00:10:19,019
somewhere hidden in the system I have a

218
00:10:19,019 --> 00:10:21,540
great I have a great primitive but it

219
00:10:21,540 --> 00:10:25,140
doesn't use the existing API so maybe in

220
00:10:25,140 --> 00:10:27,800
20 years I will be able to use it but we

221
00:10:27,800 --> 00:10:31,320
this problem as as I originally solved

222
00:10:31,320 --> 00:10:32,220
it

223
00:10:32,220 --> 00:10:36,000
was meant to be yesterday's solution

224
00:10:36,000 --> 00:10:39,080
it was urgent

225
00:10:39,240 --> 00:10:40,920
so

226
00:10:40,920 --> 00:10:43,680
and of course the expenses and how to

227
00:10:43,680 --> 00:10:46,140
migrate data to other clouds you know

228
00:10:46,140 --> 00:10:49,200
maybe you you have a an agreement with a

229
00:10:49,200 --> 00:10:51,120
cloud and they Implement your great

230
00:10:51,120 --> 00:10:53,160
protocol but then you want to migrate

231
00:10:53,160 --> 00:10:55,019
the data to another Cloud which you

232
00:10:55,019 --> 00:10:58,560
didn't negotiate a new API so you have

233
00:10:58,560 --> 00:11:00,920
to start afresh you know there are many

234
00:11:00,920 --> 00:11:03,140
roadblocks if you don't

235
00:11:03,140 --> 00:11:06,120
Build Your solution based on existing

236
00:11:06,120 --> 00:11:08,579
apis in existing servers with your own

237
00:11:08,579 --> 00:11:11,040
servers you can play with your own

238
00:11:11,040 --> 00:11:13,620
app you can play but you know

239
00:11:13,620 --> 00:11:16,860
it's harder with with the

240
00:11:16,860 --> 00:11:19,380
service providers

241
00:11:19,380 --> 00:11:21,420
cloud service providers and storage

242
00:11:21,420 --> 00:11:23,940
service providers

243
00:11:23,940 --> 00:11:25,560
so

244
00:11:25,560 --> 00:11:26,940
um

245
00:11:26,940 --> 00:11:28,980
what we want is secure and usable cloud

246
00:11:28,980 --> 00:11:32,839
storage with the most basic questions

247
00:11:32,839 --> 00:11:36,720
and there was no viable solution so we

248
00:11:36,720 --> 00:11:37,980
need to solve it

249
00:11:37,980 --> 00:11:40,320
so the goal is to upgrade an existing

250
00:11:40,320 --> 00:11:42,240
app

251
00:11:42,240 --> 00:11:44,940
that has plane storage in the cloud with

252
00:11:44,940 --> 00:11:47,880
secure and usable cloud storage

253
00:11:47,880 --> 00:11:50,459
so that

254
00:11:50,459 --> 00:11:52,800
you encrypt it with a strong key the

255
00:11:52,800 --> 00:11:55,200
server doesn't get it it's portable as I

256
00:11:55,200 --> 00:11:57,300
said the user is mobile and can come

257
00:11:57,300 --> 00:11:58,519
from anywhere

258
00:11:58,519 --> 00:12:01,200
it's efficient you we want to use

259
00:12:01,200 --> 00:12:04,920
symmetric key crypto we don't want to to

260
00:12:04,920 --> 00:12:08,339
start heavy protocols and system

261
00:12:08,339 --> 00:12:11,399
friendly system friendly is is is is a

262
00:12:11,399 --> 00:12:13,260
concise way to say it's Deployable on

263
00:12:13,260 --> 00:12:15,000
existing cloud storage it's compatible

264
00:12:15,000 --> 00:12:17,959
with standard tools and

265
00:12:17,959 --> 00:12:21,600
built-in app that has a password-based

266
00:12:21,600 --> 00:12:23,459
login and so on

267
00:12:23,459 --> 00:12:25,680
so I'll give you the high level overview

268
00:12:25,680 --> 00:12:27,420
of

269
00:12:27,420 --> 00:12:29,519
this is the these are the players the

270
00:12:29,519 --> 00:12:31,800
cloud storage

271
00:12:31,800 --> 00:12:34,560
on the left side the user in the middle

272
00:12:34,560 --> 00:12:37,560
all it has is its password and the app

273
00:12:37,560 --> 00:12:38,579
server

274
00:12:38,579 --> 00:12:41,160
from the app company

275
00:12:41,160 --> 00:12:43,800
and now you want to solve it and what do

276
00:12:43,800 --> 00:12:45,779
you want you want to deposit

277
00:12:45,779 --> 00:12:47,180
story

278
00:12:47,180 --> 00:12:49,920
your storage in encrypted form to the

279
00:12:49,920 --> 00:12:51,600
Cloud Server

280
00:12:51,600 --> 00:12:53,180
and

281
00:12:53,180 --> 00:12:56,040
you in order to do it you need to have

282
00:12:56,040 --> 00:12:58,560
authentication so to build authenticated

283
00:12:58,560 --> 00:13:01,700
Channel between client and each server

284
00:13:01,700 --> 00:13:04,019
and uh

285
00:13:04,019 --> 00:13:06,060
then you want to exploit the fact that

286
00:13:06,060 --> 00:13:08,040
you have two servers and kind of secret

287
00:13:08,040 --> 00:13:09,240
chair

288
00:13:09,240 --> 00:13:12,860
the data encryption key

289
00:13:13,459 --> 00:13:15,180
MK

290
00:13:15,180 --> 00:13:17,160
along with the three entities so that

291
00:13:17,160 --> 00:13:19,740
you need what's in the Cloud Server

292
00:13:19,740 --> 00:13:21,600
what's in the app server and the

293
00:13:21,600 --> 00:13:25,339
password in order to recover it

294
00:13:25,380 --> 00:13:29,220
and uh and uh

295
00:13:29,220 --> 00:13:31,320
then you need to encrypt and upload the

296
00:13:31,320 --> 00:13:32,639
data

297
00:13:32,639 --> 00:13:34,940
in the Cloud Server

298
00:13:34,940 --> 00:13:38,100
and the result that that you want is

299
00:13:38,100 --> 00:13:41,360
semantically secure

300
00:13:44,459 --> 00:13:46,139
solution

301
00:13:46,139 --> 00:13:48,120
even against corrupt server meaning

302
00:13:48,120 --> 00:13:50,220
servers that try to impersonate the

303
00:13:50,220 --> 00:13:52,560
users and you get the best possible

304
00:13:52,560 --> 00:13:54,240
security and you get the best possible

305
00:13:54,240 --> 00:13:57,300
Security even if the two servers collude

306
00:13:57,300 --> 00:13:59,339
then you at least get the password

307
00:13:59,339 --> 00:14:01,740
protection

308
00:14:01,740 --> 00:14:04,620
okay as a mitigation

309
00:14:04,620 --> 00:14:06,600
you cannot have anything else because

310
00:14:06,600 --> 00:14:08,220
that's the only advantage of the client

311
00:14:08,220 --> 00:14:10,079
over the servers

312
00:14:10,079 --> 00:14:13,019
and then you need to do a retrieval

313
00:14:13,019 --> 00:14:16,380
authenticate then reconstruct

314
00:14:16,380 --> 00:14:19,500
and I will just briefly say mention the

315
00:14:19,500 --> 00:14:22,139
solution so server authentication using

316
00:14:22,139 --> 00:14:23,519
TLS

317
00:14:23,519 --> 00:14:25,500
the the challenge is client

318
00:14:25,500 --> 00:14:27,920
authentication and

319
00:14:27,920 --> 00:14:31,620
for these we can only use one password

320
00:14:31,620 --> 00:14:35,519
to be compatible with the app

321
00:14:35,519 --> 00:14:38,120
and uh

322
00:14:38,120 --> 00:14:40,380
uh okay

323
00:14:40,380 --> 00:14:42,600
so we want to defeat the offline attack

324
00:14:42,600 --> 00:14:45,180
from corrupt servers

325
00:14:45,180 --> 00:14:47,279
and

326
00:14:47,279 --> 00:14:50,220
the idea the main idea here is to

327
00:14:50,220 --> 00:14:52,199
leverage one server

328
00:14:52,199 --> 00:14:55,260
to help login in the other server you

329
00:14:55,260 --> 00:14:56,519
have the two of them use them against

330
00:14:56,519 --> 00:14:59,699
each other in some sense so in this uh

331
00:14:59,699 --> 00:15:04,440
we use a secret key at the one server to

332
00:15:04,440 --> 00:15:06,959
change the password to

333
00:15:06,959 --> 00:15:10,740
password one then we use password one to

334
00:15:10,740 --> 00:15:12,720
login into the other server the storage

335
00:15:12,720 --> 00:15:16,260
server and uh

336
00:15:16,260 --> 00:15:20,459
and then we we draw a random a random

337
00:15:20,459 --> 00:15:23,160
number R1 and with it encrypt the

338
00:15:23,160 --> 00:15:30,120
password have a password two and put R1

339
00:15:30,120 --> 00:15:33,480
in the Cloud Server as part of the TLs

340
00:15:33,480 --> 00:15:37,199
session and and put the the login with

341
00:15:37,199 --> 00:15:41,639
this password too in the company server

342
00:15:41,639 --> 00:15:45,959
and then uh you do Secret sharing for

343
00:15:45,959 --> 00:15:48,300
data encryption so you come up with a

344
00:15:48,300 --> 00:15:49,560
random key

345
00:15:49,560 --> 00:15:53,459
and again you generate you you generate

346
00:15:53,459 --> 00:15:55,860
a key one derived from the password

347
00:15:55,860 --> 00:15:59,220
in some R2 and you generate the

348
00:15:59,220 --> 00:16:01,860
ciphertix and you kind of secretary in

349
00:16:01,860 --> 00:16:04,320
the most obvious way you send the

350
00:16:04,320 --> 00:16:08,459
ciphertext to the cloud under the TLs

351
00:16:08,459 --> 00:16:11,220
server and you send uh

352
00:16:11,220 --> 00:16:15,959
uh uh the the random number R2 and the

353
00:16:15,959 --> 00:16:18,660
and the ciphertext you send to the

354
00:16:18,660 --> 00:16:21,300
ciphertext over the key you send to to

355
00:16:21,300 --> 00:16:23,639
the app server and then you add

356
00:16:23,639 --> 00:16:25,920
integrity

357
00:16:25,920 --> 00:16:28,800
in the sense to you want to to protect

358
00:16:28,800 --> 00:16:33,480
it for integrity so you derive this Tau

359
00:16:33,480 --> 00:16:36,120
uh which you can

360
00:16:36,120 --> 00:16:38,519
which demonstrate Integrity of what you

361
00:16:38,519 --> 00:16:40,380
get so the the server cannot send you

362
00:16:40,380 --> 00:16:42,180
something else without without integrity

363
00:16:42,180 --> 00:16:45,000
and you can check it with uh with the

364
00:16:45,000 --> 00:16:46,079
password

365
00:16:46,079 --> 00:16:48,420
and with the R2 that you get from the

366
00:16:48,420 --> 00:16:49,920
other server

367
00:16:49,920 --> 00:16:52,320
and of course based on all these you can

368
00:16:52,320 --> 00:16:57,779
now put the encryption and you can also

369
00:16:57,779 --> 00:17:00,000
if you think about it if you think about

370
00:17:00,000 --> 00:17:01,860
the the secret sharing and the

371
00:17:01,860 --> 00:17:04,799
authentication that is held that helped

372
00:17:04,799 --> 00:17:08,160
by one side to do it the other side in

373
00:17:08,160 --> 00:17:10,140
retrieving the information you play the

374
00:17:10,140 --> 00:17:12,720
game kind of backwards you get the right

375
00:17:12,720 --> 00:17:16,140
things you compute the right thing and

376
00:17:16,140 --> 00:17:18,359
then it is expected to arrive from the

377
00:17:18,359 --> 00:17:20,459
other server and you can check it and

378
00:17:20,459 --> 00:17:22,500
you are sure of the integrity

379
00:17:22,500 --> 00:17:25,199
for example that you get the right key

380
00:17:25,199 --> 00:17:29,120
based on the fact that you go to R2 and

381
00:17:29,120 --> 00:17:32,700
the app server gave you Tau and things

382
00:17:32,700 --> 00:17:37,559
like this and and and and this uh these

383
00:17:37,559 --> 00:17:40,799
both prevent each server by itself from

384
00:17:40,799 --> 00:17:42,840
abusing the system

385
00:17:42,840 --> 00:17:48,240
and and learning the the data and uh and

386
00:17:48,240 --> 00:17:51,360
uh even if they are Collide collided

387
00:17:51,360 --> 00:17:53,160
colluding sorry

388
00:17:53,160 --> 00:17:56,820
the lack of the of the password from the

389
00:17:56,820 --> 00:17:59,940
client uh they will have to do uh

390
00:17:59,940 --> 00:18:03,059
exhaustive search on password but that's

391
00:18:03,059 --> 00:18:04,940
the only tool that we have

392
00:18:04,940 --> 00:18:08,520
and uh what's interesting is that it's

393
00:18:08,520 --> 00:18:10,860
very fast I will I will end I will end

394
00:18:10,860 --> 00:18:14,100
it's very fast it's almost like doing it

395
00:18:14,100 --> 00:18:15,620
without it

396
00:18:15,620 --> 00:18:19,860
and that's it

397
00:18:19,860 --> 00:18:22,380
so we propose secure fully mobile and

398
00:18:22,380 --> 00:18:24,960
usable Solutions Simplicity and

399
00:18:24,960 --> 00:18:26,160
efficiency

400
00:18:26,160 --> 00:18:29,640
sometimes Simplicity and efficiency

401
00:18:29,640 --> 00:18:32,340
gives you a headache and you have to

402
00:18:32,340 --> 00:18:33,860
solve it

403
00:18:33,860 --> 00:18:36,000
and uh

404
00:18:36,000 --> 00:18:38,520
we did it and I think it's it's a

405
00:18:38,520 --> 00:18:41,820
history interesting area to to look at

406
00:18:41,820 --> 00:18:44,659
thank you very much

