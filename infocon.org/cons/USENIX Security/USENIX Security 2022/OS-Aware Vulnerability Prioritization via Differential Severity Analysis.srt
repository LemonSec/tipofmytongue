1
00:00:08,300 --> 00:00:12,000
uh hello everyone my name is Jason from

2
00:00:12,000 --> 00:00:14,099
Indiana University today I will be

3
00:00:14,099 --> 00:00:15,900
presenting the paper always available

4
00:00:15,900 --> 00:00:18,060
vulnerability prioritization while

5
00:00:18,060 --> 00:00:21,060
differential security analysis this is a

6
00:00:21,060 --> 00:00:22,980
joint work between University of

7
00:00:22,980 --> 00:00:25,920
Minnesota and Indiana University I'm the

8
00:00:25,920 --> 00:00:29,220
first local author with social Wu

9
00:00:29,220 --> 00:00:31,619
first I will introducing some background

10
00:00:31,619 --> 00:00:33,840
information related to this topic and

11
00:00:33,840 --> 00:00:37,140
our motivation of this project

12
00:00:37,140 --> 00:00:39,660
so with the limited maintenance results

13
00:00:39,660 --> 00:00:42,600
so the security engineer usually need to

14
00:00:42,600 --> 00:00:45,120
evaluate the vulnerability Security in

15
00:00:45,120 --> 00:00:47,820
order to prioritize patch so given our

16
00:00:47,820 --> 00:00:49,680
vulnerability how to evaluate the

17
00:00:49,680 --> 00:00:51,719
severity

18
00:00:51,719 --> 00:00:53,940
so the common one ability scrolling

19
00:00:53,940 --> 00:00:57,860
system CVSs is uh open and well adopted

20
00:00:57,860 --> 00:01:01,440
framework to evaluate the severity the

21
00:01:01,440 --> 00:01:03,480
figure one shows the example of the

22
00:01:03,480 --> 00:01:06,780
Linux kernel evaluated by the CVSs

23
00:01:06,780 --> 00:01:10,140
system so CVSs is a metrical based

24
00:01:10,140 --> 00:01:12,600
scrolling system the explorability

25
00:01:12,600 --> 00:01:16,320
metrics have different vectors for

26
00:01:16,320 --> 00:01:17,580
example

27
00:01:17,580 --> 00:01:20,400
the provision requirement metric

28
00:01:20,400 --> 00:01:24,060
describes the levels of the Privileges

29
00:01:24,060 --> 00:01:26,880
the attack Master have in order to

30
00:01:26,880 --> 00:01:31,280
achieve a successful exploited

31
00:01:31,280 --> 00:01:34,979
for each metric they will be assigned a

32
00:01:34,979 --> 00:01:36,299
metric value

33
00:01:36,299 --> 00:01:39,840
for example here prh means that the

34
00:01:39,840 --> 00:01:42,060
attacker need to acquire the higher

35
00:01:42,060 --> 00:01:43,860
probability in order to lead to a

36
00:01:43,860 --> 00:01:46,520
successful attack

37
00:01:47,180 --> 00:01:50,220
after each metrical have been assigned a

38
00:01:50,220 --> 00:01:52,439
value a series score can be

39
00:01:52,439 --> 00:01:54,899
automatically calculated by the CVSs

40
00:01:54,899 --> 00:01:55,979
calculator

41
00:01:55,979 --> 00:01:59,340
things the further the severity of the

42
00:01:59,340 --> 00:02:01,920
vulnerability will be rated by the CVSs

43
00:02:01,920 --> 00:02:04,100
score

44
00:02:04,439 --> 00:02:07,079
however our fundamental problem arrays

45
00:02:07,079 --> 00:02:12,679
in the 140 CVSs usage

46
00:02:13,020 --> 00:02:15,420
when a bug reporter requested a common

47
00:02:15,420 --> 00:02:17,400
vulnerability exposure for our

48
00:02:17,400 --> 00:02:19,800
vulnerability the cve maintenance

49
00:02:19,800 --> 00:02:22,500
usually assign one CV number to the

50
00:02:22,500 --> 00:02:26,879
vulnerability with one single CVS score

51
00:02:26,879 --> 00:02:29,520
however all effective versions or sound

52
00:02:29,520 --> 00:02:31,980
derivatives well then simple owners

53
00:02:31,980 --> 00:02:34,500
assign the CVSs score to perform the

54
00:02:34,500 --> 00:02:37,340
patch prioritization

55
00:02:37,340 --> 00:02:40,500
open source system tends to have a large

56
00:02:40,500 --> 00:02:42,420
number of derivatives

57
00:02:42,420 --> 00:02:44,760
take Linux as an example

58
00:02:44,760 --> 00:02:48,060
there are at least 29 major Android

59
00:02:48,060 --> 00:02:51,540
systems running over like 24

60
00:02:51,540 --> 00:02:56,599
000 models and billions of mobile device

61
00:02:57,360 --> 00:03:02,220
so why 140 CVS usage is a critical issue

62
00:03:02,220 --> 00:03:04,860
a vulnerability often have a different

63
00:03:04,860 --> 00:03:08,099
severity in a derivative system compared

64
00:03:08,099 --> 00:03:11,780
with it in the original system

65
00:03:11,819 --> 00:03:15,659
hence the 140 usage vulnerability will

66
00:03:15,659 --> 00:03:18,180
result either underestimation or

67
00:03:18,180 --> 00:03:20,280
overestimation of the severity of the

68
00:03:20,280 --> 00:03:22,819
vulnerability

69
00:03:23,420 --> 00:03:26,159
specifically if the severity of the

70
00:03:26,159 --> 00:03:28,920
vulnerability is underestimated the

71
00:03:28,920 --> 00:03:31,319
patches for the severe vulnerabilities

72
00:03:31,319 --> 00:03:34,379
may be delayed or even ignored

73
00:03:34,379 --> 00:03:37,379
I when the severity of the vulnerability

74
00:03:37,379 --> 00:03:39,780
is overestimate it will cause the

75
00:03:39,780 --> 00:03:41,400
delaying of the patching for more

76
00:03:41,400 --> 00:03:43,260
critical vulnerabilities when the

77
00:03:43,260 --> 00:03:46,260
maintenance results are limited

78
00:03:46,260 --> 00:03:50,220
so in this paper we propose approach to

79
00:03:50,220 --> 00:03:51,900
determine if a cve assigned

80
00:03:51,900 --> 00:03:53,819
vulnerability would would have a

81
00:03:53,819 --> 00:03:57,659
different severity in the Target OS

82
00:03:57,659 --> 00:04:00,360
in this part I will present the overview

83
00:04:00,360 --> 00:04:03,900
and design of our approach

84
00:04:03,900 --> 00:04:07,379
our approach is a combination of the

85
00:04:07,379 --> 00:04:09,299
programming analysis and the natural

86
00:04:09,299 --> 00:04:11,120
language processing techniques

87
00:04:11,120 --> 00:04:14,099
specifically we take a cve Linux

88
00:04:14,099 --> 00:04:16,560
Mainline and our Target Android kernel

89
00:04:16,560 --> 00:04:19,380
as our input and we will output whether

90
00:04:19,380 --> 00:04:22,139
the cve is less severe or more severe in

91
00:04:22,139 --> 00:04:23,940
the Target OS

92
00:04:23,940 --> 00:04:26,580
I will detail the major steps in the

93
00:04:26,580 --> 00:04:29,160
next few slides

94
00:04:29,160 --> 00:04:31,620
before that I will give you a quick

95
00:04:31,620 --> 00:04:34,620
example showing the high level insights

96
00:04:34,620 --> 00:04:38,540
of our approach let's take the cve

97
00:04:38,540 --> 00:04:41,100
2016-2085 as an example

98
00:04:41,100 --> 00:04:43,800
the left side of this slide showing the

99
00:04:43,800 --> 00:04:46,680
vulnerability culture in the Linux which

100
00:04:46,680 --> 00:04:49,320
takes the system core as the entry point

101
00:04:49,320 --> 00:04:52,199
and won't both function as the end point

102
00:04:52,199 --> 00:04:55,919
the left side of the slide shows the

103
00:04:55,919 --> 00:04:57,900
right side of the slide showing the

104
00:04:57,900 --> 00:04:59,280
vulnerability quotient in the Android

105
00:04:59,280 --> 00:05:00,720
kernel

106
00:05:00,720 --> 00:05:03,120
the function you know the permission is

107
00:05:03,120 --> 00:05:06,120
a differential function which appears in

108
00:05:06,120 --> 00:05:08,880
the code chain in Android but not in the

109
00:05:08,880 --> 00:05:11,520
culture in the Linux kernel based on the

110
00:05:11,520 --> 00:05:14,040
description of this function check for

111
00:05:14,040 --> 00:05:17,340
the access rate for uh given in node we

112
00:05:17,340 --> 00:05:18,960
can reason in that this function

113
00:05:18,960 --> 00:05:21,720
requires attack attack to have a higher

114
00:05:21,720 --> 00:05:24,600
a higher permission to lead to a

115
00:05:24,600 --> 00:05:27,300
successful attack hence the privilege

116
00:05:27,300 --> 00:05:29,820
requirement metric will be high

117
00:05:29,820 --> 00:05:32,160
compared with the original metric in the

118
00:05:32,160 --> 00:05:35,160
Linux kernel PR num we can conclude that

119
00:05:35,160 --> 00:05:37,860
the attack need to achieve a higher per

120
00:05:37,860 --> 00:05:41,039
Village in order to successfully explode

121
00:05:41,039 --> 00:05:42,600
the vulnerable component in Android

122
00:05:42,600 --> 00:05:45,900
kernel that means this vulnerability in

123
00:05:45,900 --> 00:05:48,479
Android kernel is less severe than that

124
00:05:48,479 --> 00:05:51,320
in the Linux kernel

125
00:05:51,320 --> 00:05:54,780
as we can see if we can obtain the

126
00:05:54,780 --> 00:05:56,639
differential functions between two core

127
00:05:56,639 --> 00:05:58,919
chains in the different operating system

128
00:05:58,919 --> 00:06:02,360
and we if we also know the vulnerability

129
00:06:02,360 --> 00:06:05,580
exploitability Matrix related to the

130
00:06:05,580 --> 00:06:07,919
differential functions then we can

131
00:06:07,919 --> 00:06:10,259
perform differential analysis of the

132
00:06:10,259 --> 00:06:12,780
severity of the vulnerability in the

133
00:06:12,780 --> 00:06:15,300
different operating system

134
00:06:15,300 --> 00:06:18,000
but the challenge is how can we identify

135
00:06:18,000 --> 00:06:21,180
the vulnerable culture and reason the

136
00:06:21,180 --> 00:06:23,220
explorability metric of the different

137
00:06:23,220 --> 00:06:25,940
functions

138
00:06:26,900 --> 00:06:29,580
to identify the vulnerability code

139
00:06:29,580 --> 00:06:31,680
change we forced to extract some

140
00:06:31,680 --> 00:06:33,240
symmetrical information of the

141
00:06:33,240 --> 00:06:36,180
vulnerability parts from the cve and the

142
00:06:36,180 --> 00:06:38,400
guild log description

143
00:06:38,400 --> 00:06:41,160
lots of information will further help us

144
00:06:41,160 --> 00:06:44,039
to rebuild the vulnerable coaching in

145
00:06:44,039 --> 00:06:45,360
the Target system

146
00:06:45,360 --> 00:06:48,300
for example the extracted vulnerable

147
00:06:48,300 --> 00:06:50,759
component related info like the system

148
00:06:50,759 --> 00:06:53,220
core and one more function will serve as

149
00:06:53,220 --> 00:06:55,199
the entry point and endpoint when we

150
00:06:55,199 --> 00:06:58,860
construct the code chain in the system

151
00:06:58,860 --> 00:07:01,680
to rebuild the culture for example in

152
00:07:01,680 --> 00:07:04,440
the Linux kernel we first compile the

153
00:07:04,440 --> 00:07:06,720
Linux kernel then we generate a Linux

154
00:07:06,720 --> 00:07:09,000
code chain and after that we're using

155
00:07:09,000 --> 00:07:11,100
the symmetrical information to select

156
00:07:11,100 --> 00:07:13,500
the most possible exploitable quotient

157
00:07:13,500 --> 00:07:16,080
in the Linux kernel

158
00:07:16,080 --> 00:07:18,000
similarly we also reviewed the code

159
00:07:18,000 --> 00:07:19,319
chain in the linear in the Android

160
00:07:19,319 --> 00:07:21,860
kernel

161
00:07:22,440 --> 00:07:24,660
so here metric to function mapping will

162
00:07:24,660 --> 00:07:26,759
construct a map between the function and

163
00:07:26,759 --> 00:07:29,639
its probability metric to automatically

164
00:07:29,639 --> 00:07:32,220
Constructor this map we trained a bio

165
00:07:32,220 --> 00:07:34,620
lstm model with the attention mechanism

166
00:07:34,620 --> 00:07:36,900
for the function description reasoning

167
00:07:36,900 --> 00:07:38,580
and the explorability metric

168
00:07:38,580 --> 00:07:41,180
classification

169
00:07:42,419 --> 00:07:45,060
okay after we obtain the coaching and we

170
00:07:45,060 --> 00:07:47,699
can compile the two core chain and we

171
00:07:47,699 --> 00:07:50,340
can obtain the different functions and

172
00:07:50,340 --> 00:07:52,380
then we can using the metrical to

173
00:07:52,380 --> 00:07:54,599
function map to get the different

174
00:07:54,599 --> 00:07:56,819
explorability metric

175
00:07:56,819 --> 00:07:59,220
further those different explorability

176
00:07:59,220 --> 00:08:02,400
metrics will be used to uh

177
00:08:02,400 --> 00:08:06,060
uh prioritized patch

178
00:08:06,060 --> 00:08:08,460
in this part I will present the

179
00:08:08,460 --> 00:08:13,580
evaluation and results of our approach

180
00:08:13,860 --> 00:08:15,780
based on the differential security

181
00:08:15,780 --> 00:08:18,240
analysis I want to working out

182
00:08:18,240 --> 00:08:20,819
postometric level difference the results

183
00:08:20,819 --> 00:08:23,400
are summarized in the table 7.

184
00:08:23,400 --> 00:08:26,160
furthermore our study also measures the

185
00:08:26,160 --> 00:08:28,139
score level difference

186
00:08:28,139 --> 00:08:30,240
as we can see

187
00:08:30,240 --> 00:08:32,580
the majority of the vulnerability have

188
00:08:32,580 --> 00:08:34,620
the different severity score in the

189
00:08:34,620 --> 00:08:35,779
different

190
00:08:35,779 --> 00:08:39,140
operating system

191
00:08:39,140 --> 00:08:42,479
specifically uh 72 percent of the

192
00:08:42,479 --> 00:08:44,640
vulnerability are more severe in Linux

193
00:08:44,640 --> 00:08:46,760
than Android which means that

194
00:08:46,760 --> 00:08:48,959
prioritizing the patch for those

195
00:08:48,959 --> 00:08:51,300
vulnerabilities in Android will make

196
00:08:51,300 --> 00:08:53,880
waste the maintenance results which are

197
00:08:53,880 --> 00:08:55,560
supposed to be allocated for the

198
00:08:55,560 --> 00:08:57,720
critical vulnerabilities

199
00:08:57,720 --> 00:09:00,420
15 of the vulnerabilities are more

200
00:09:00,420 --> 00:09:03,480
severe in Android which means that those

201
00:09:03,480 --> 00:09:06,180
vulnerability may not be patched timely

202
00:09:06,180 --> 00:09:08,580
in Android if the severity evaluation is

203
00:09:08,580 --> 00:09:11,220
just based on the CVSs score evaluated

204
00:09:11,220 --> 00:09:14,360
in the Linux kernel

205
00:09:15,480 --> 00:09:18,240
we further conduct a user study to

206
00:09:18,240 --> 00:09:21,420
evaluate the usability of the CVSs from

207
00:09:21,420 --> 00:09:23,100
the user perspectives

208
00:09:23,100 --> 00:09:26,339
we recruited a 10 Downstream maintenance

209
00:09:26,339 --> 00:09:28,880
in the industry who have the real world

210
00:09:28,880 --> 00:09:30,899
experience in the vulnerability

211
00:09:30,899 --> 00:09:33,959
evaluation and the 20 graduate students

212
00:09:33,959 --> 00:09:36,080
who have a background in the security

213
00:09:36,080 --> 00:09:39,839
system assistant security analysis

214
00:09:39,839 --> 00:09:43,620
as we can see with the help of the tool

215
00:09:43,620 --> 00:09:46,860
the average re-evaluation time is around

216
00:09:46,860 --> 00:09:51,480
27 minutes which is much less than 4.8

217
00:09:51,480 --> 00:09:54,839
hours without the tool

218
00:09:54,839 --> 00:09:57,660
our results also showed that div series

219
00:09:57,660 --> 00:10:00,959
and significantly reduce the temp time

220
00:10:00,959 --> 00:10:02,399
and efforts for the vulnerability

221
00:10:02,399 --> 00:10:06,180
re-evaluation besides our tool can also

222
00:10:06,180 --> 00:10:08,519
achieve like around the 19 of the

223
00:10:08,519 --> 00:10:10,980
accuracy in both metric level and the

224
00:10:10,980 --> 00:10:13,640
severity level

225
00:10:15,480 --> 00:10:18,000
conclusions

226
00:10:18,000 --> 00:10:21,720
so one for all CVSs usage will cause

227
00:10:21,720 --> 00:10:24,720
critical issues which will cause either

228
00:10:24,720 --> 00:10:28,980
over or underestimation of the severity

229
00:10:28,980 --> 00:10:31,380
and our tool can determine if our

230
00:10:31,380 --> 00:10:33,380
vulnerability have a higher or lower

231
00:10:33,380 --> 00:10:36,600
severity in the Target operating system

232
00:10:36,600 --> 00:10:38,760
and avoiding the over and under

233
00:10:38,760 --> 00:10:40,320
estimation

234
00:10:40,320 --> 00:10:43,380
and the the results showing that the

235
00:10:43,380 --> 00:10:46,019
majority of the vulnerability will have

236
00:10:46,019 --> 00:10:47,579
a different severity in the different

237
00:10:47,579 --> 00:10:49,740
operating system like Linux and Android

238
00:10:49,740 --> 00:10:53,279
and even with in the different versions

239
00:10:53,279 --> 00:10:56,279
of the Linux the result the detail of

240
00:10:56,279 --> 00:10:59,459
the results are in the paper if you are

241
00:10:59,459 --> 00:11:02,779
interested you can check the results

242
00:11:02,880 --> 00:11:05,220
that's it thanks for listening we are

243
00:11:05,220 --> 00:11:07,820
here for questions

