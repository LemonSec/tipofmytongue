1
00:00:07,340 --> 00:00:10,280
thank you hello everyone

2
00:00:10,280 --> 00:00:12,480
I'm happy that you took the time and

3
00:00:12,480 --> 00:00:14,160
interest in attending our talk

4
00:00:14,160 --> 00:00:17,340
my name is Davido I'm currently a PhD

5
00:00:17,340 --> 00:00:19,020
student student studying another

6
00:00:19,020 --> 00:00:22,020
supervision of Professor Central print

7
00:00:22,020 --> 00:00:24,000
his work was done in collaboration with

8
00:00:24,000 --> 00:00:25,560
Jose Martinez

9
00:00:25,560 --> 00:00:29,039
a PhD student and all three of us study

10
00:00:29,039 --> 00:00:31,080
at the University of medium in Portugal

11
00:00:31,080 --> 00:00:35,940
study and Professor centers teachers

12
00:00:36,320 --> 00:00:38,460
this work was done in collaboration as

13
00:00:38,460 --> 00:00:40,620
well as Professor nonsense from ISD

14
00:00:40,620 --> 00:00:43,020
Lisbon who is also my co-advisor

15
00:00:43,020 --> 00:00:45,559
let's begin

16
00:00:45,899 --> 00:00:48,239
Justin was introduced introduced nearly

17
00:00:48,239 --> 00:00:51,180
two decades ago in 2004. today Trustin

18
00:00:51,180 --> 00:00:52,620
is still present in commercial

19
00:00:52,620 --> 00:00:55,020
commercial off-the-shelf platforms

20
00:00:55,020 --> 00:00:56,879
and in armed cortex application

21
00:00:56,879 --> 00:00:58,260
processors

22
00:00:58,260 --> 00:01:00,120
Dresden has been leveraged to build

23
00:01:00,120 --> 00:01:01,920
these in billions on well devices

24
00:01:01,920 --> 00:01:03,359
worldwide

25
00:01:03,359 --> 00:01:05,820
is these support applications ranging

26
00:01:05,820 --> 00:01:07,920
from barometric Authentication

27
00:01:07,920 --> 00:01:10,140
digital Rights Management and electronic

28
00:01:10,140 --> 00:01:12,920
payments for example

29
00:01:13,260 --> 00:01:15,600
to better understand trust them let's

30
00:01:15,600 --> 00:01:17,100
start by taking a look at address on

31
00:01:17,100 --> 00:01:19,200
software architecture

32
00:01:19,200 --> 00:01:21,960
custom centered around the concept of

33
00:01:21,960 --> 00:01:24,780
protection domains name normal world and

34
00:01:24,780 --> 00:01:26,280
secure world

35
00:01:26,280 --> 00:01:29,460
the normal World hosts the rich OS which

36
00:01:29,460 --> 00:01:31,619
is typically Android and this OS will

37
00:01:31,619 --> 00:01:33,000
feature a driver to interact with the

38
00:01:33,000 --> 00:01:34,380
secure world

39
00:01:34,380 --> 00:01:36,600
this interaction is to request secure

40
00:01:36,600 --> 00:01:38,400
services

41
00:01:38,400 --> 00:01:39,960
the secret world

42
00:01:39,960 --> 00:01:41,880
hosts The Trestle OS and trusted

43
00:01:41,880 --> 00:01:43,500
applications which Implement these

44
00:01:43,500 --> 00:01:44,579
services

45
00:01:44,579 --> 00:01:46,920
each physical core provides two virtual

46
00:01:46,920 --> 00:01:49,140
chords one normal and one secure to

47
00:01:49,140 --> 00:01:51,659
switch between them there's a layer of

48
00:01:51,659 --> 00:01:53,820
software called the secure Monitor and

49
00:01:53,820 --> 00:01:56,340
this layer performs a secure contact

50
00:01:56,340 --> 00:01:58,680
switch between the states

51
00:01:58,680 --> 00:02:00,659
the normal world can't access any Secret

52
00:02:00,659 --> 00:02:02,579
World resource and this is to serve the

53
00:02:02,579 --> 00:02:04,020
main purpose of trustum that is to

54
00:02:04,020 --> 00:02:05,579
prevent trusted applications from being

55
00:02:05,579 --> 00:02:07,079
compromised by your potentially

56
00:02:07,079 --> 00:02:09,959
malicious Rich OS

57
00:02:09,959 --> 00:02:12,120
however Justin has some major problems

58
00:02:12,120 --> 00:02:14,220
and in particular there have been many

59
00:02:14,220 --> 00:02:16,140
security critical vulnerabilities mainly

60
00:02:16,140 --> 00:02:18,900
to one to one architectural flaw the

61
00:02:18,900 --> 00:02:21,959
excessive level of privilege of the de

62
00:02:21,959 --> 00:02:24,239
or specifically The Trusted OS has and

63
00:02:24,239 --> 00:02:26,400
received unrestricted access to the full

64
00:02:26,400 --> 00:02:28,640
system

65
00:02:28,860 --> 00:02:30,840
flaws have a lot of attackers to mount

66
00:02:30,840 --> 00:02:32,520
attacks that from the normal world are

67
00:02:32,520 --> 00:02:34,920
able to compromise the TA

68
00:02:34,920 --> 00:02:36,959
from that compromise ta compromised to

69
00:02:36,959 --> 00:02:39,300
slos and once in control of address of

70
00:02:39,300 --> 00:02:41,160
the wires an attacker can compromise

71
00:02:41,160 --> 00:02:43,200
other parts of the system

72
00:02:43,200 --> 00:02:45,120
the normal world

73
00:02:45,120 --> 00:02:47,340
other security critical Tas

74
00:02:47,340 --> 00:02:48,959
and the highest periological piece of

75
00:02:48,959 --> 00:02:51,780
code the secure monitor

76
00:02:51,780 --> 00:02:53,700
our goal is to fix the successive level

77
00:02:53,700 --> 00:02:55,379
of privilege

78
00:02:55,379 --> 00:02:57,660
and we do this we intend to do this by

79
00:02:57,660 --> 00:02:59,580
the privileging the trust otherwise

80
00:02:59,580 --> 00:03:02,099
by the privileging The Trusted OS

81
00:03:02,099 --> 00:03:03,780
we can increase protection for the

82
00:03:03,780 --> 00:03:05,160
normal world

83
00:03:05,160 --> 00:03:07,260
we can extend the CPU world to host

84
00:03:07,260 --> 00:03:09,480
multiple Trestle OS and trusted

85
00:03:09,480 --> 00:03:11,040
applications offering better protection

86
00:03:11,040 --> 00:03:13,080
for trusted applications

87
00:03:13,080 --> 00:03:14,819
and we can protect the secret Monitor

88
00:03:14,819 --> 00:03:16,680
and of course we can extend these

89
00:03:16,680 --> 00:03:18,239
properties to all zones that we

90
00:03:18,239 --> 00:03:20,840
instantiate

91
00:03:21,060 --> 00:03:23,519
so we propose result

92
00:03:23,519 --> 00:03:24,900
with rezone we make the following

93
00:03:24,900 --> 00:03:26,940
contributions an approach the privilege

94
00:03:26,940 --> 00:03:29,099
to Crystal OS we use thrust on

95
00:03:29,099 --> 00:03:30,840
orthogonal Hardware features present in

96
00:03:30,840 --> 00:03:33,120
commercial of the Shelf platforms

97
00:03:33,120 --> 00:03:34,620
we implementary Zone in a real world

98
00:03:34,620 --> 00:03:37,019
platform and software stacks

99
00:03:37,019 --> 00:03:39,239
we evaluate reason running in the

100
00:03:39,239 --> 00:03:41,459
physical platform running embedded Linux

101
00:03:41,459 --> 00:03:42,959
and Android

102
00:03:42,959 --> 00:03:45,360
our performance analysis concludes that

103
00:03:45,360 --> 00:03:47,640
the result does not significantly regret

104
00:03:47,640 --> 00:03:49,620
the user experience

105
00:03:49,620 --> 00:03:53,159
and we surveyed 80 security critical CVS

106
00:03:53,159 --> 00:03:54,540
and the conclude that reason can help

107
00:03:54,540 --> 00:03:58,159
mitigate 87 of them

108
00:03:58,319 --> 00:04:00,299
let's take a quick look at the software

109
00:04:00,299 --> 00:04:02,940
and Hardware components needed by reason

110
00:04:02,940 --> 00:04:05,340
this is a typical Trust on software and

111
00:04:05,340 --> 00:04:07,440
Hardware stack including address on

112
00:04:07,440 --> 00:04:09,659
controller that you that is used to

113
00:04:09,659 --> 00:04:11,340
perform Access Control to normal world

114
00:04:11,340 --> 00:04:14,159
and secure World memory

115
00:04:14,159 --> 00:04:16,320
the first piece of the puzzle is that we

116
00:04:16,320 --> 00:04:18,478
must introduce logic to the secure

117
00:04:18,478 --> 00:04:20,339
monitor this is needed because we need a

118
00:04:20,339 --> 00:04:22,620
specific way to enter and exit zones and

119
00:04:22,620 --> 00:04:25,440
we must do so securely

120
00:04:25,440 --> 00:04:28,500
second piece is what we call the PPC a

121
00:04:28,500 --> 00:04:30,720
platform partition controller

122
00:04:30,720 --> 00:04:33,600
the PPC is typically used to perform

123
00:04:33,600 --> 00:04:35,639
access control of system resources to

124
00:04:35,639 --> 00:04:37,259
other bus Masters which can include the

125
00:04:37,259 --> 00:04:39,900
GPU for example and in our case we use

126
00:04:39,900 --> 00:04:42,900
the PPC rather we leverage the fact that

127
00:04:42,900 --> 00:04:44,699
the PPC stands within the processor core

128
00:04:44,699 --> 00:04:47,220
and the memory allowing us to enforce

129
00:04:47,220 --> 00:04:49,979
our Access Control policies

130
00:04:49,979 --> 00:04:52,380
second Hardware component we need is

131
00:04:52,380 --> 00:04:54,300
what we call an Acu an auxiliary

132
00:04:54,300 --> 00:04:55,860
Computing unit

133
00:04:55,860 --> 00:04:58,440
this ECU is a companion processing unit

134
00:04:58,440 --> 00:04:59,759
that is

135
00:04:59,759 --> 00:05:02,540
nowadays ever more present in

136
00:05:02,540 --> 00:05:06,840
socs and these acus can be leveraged for

137
00:05:06,840 --> 00:05:09,060
a variety of purposes in result we use

138
00:05:09,060 --> 00:05:12,180
it to execute the GateKeeper

139
00:05:12,180 --> 00:05:13,860
trampoline and gatekeeper coordinates

140
00:05:13,860 --> 00:05:14,940
between themselves to securely

141
00:05:14,940 --> 00:05:17,460
reconfigure the PPC this is important

142
00:05:17,460 --> 00:05:19,500
because we don't want to give the

143
00:05:19,500 --> 00:05:23,580
processor Car direct access to the PPC

144
00:05:23,580 --> 00:05:25,320
one last piece of the puzzle is that the

145
00:05:25,320 --> 00:05:26,940
PPC should be able to establish

146
00:05:26,940 --> 00:05:29,520
different domains for ECU and for

147
00:05:29,520 --> 00:05:32,100
processor core this is to allow us to

148
00:05:32,100 --> 00:05:33,840
establish different Access Control

149
00:05:33,840 --> 00:05:35,940
policies for the processor car and for

150
00:05:35,940 --> 00:05:38,039
the ECU

151
00:05:38,039 --> 00:05:40,560
by using the PPC and the ECU together we

152
00:05:40,560 --> 00:05:42,419
can be privilege to custom OS and thus

153
00:05:42,419 --> 00:05:44,940
achieve our proposed goals

154
00:05:44,940 --> 00:05:47,039
let's take a quick look at how the PPC

155
00:05:47,039 --> 00:05:49,380
and the ECU are used together keep in

156
00:05:49,380 --> 00:05:52,259
mind that these are not the full details

157
00:05:52,259 --> 00:05:54,660
just a simplified version

158
00:05:54,660 --> 00:05:56,400
so starting from normal World execution

159
00:05:56,400 --> 00:05:58,380
the normal World accesses normal memory

160
00:05:58,380 --> 00:06:00,419
and it is prevented by trust Zone as in

161
00:06:00,419 --> 00:06:01,740
typical systems from accessing the

162
00:06:01,740 --> 00:06:04,280
secure world

163
00:06:06,600 --> 00:06:08,699
Amazon entry

164
00:06:08,699 --> 00:06:10,740
the trampoline coordinates with the

165
00:06:10,740 --> 00:06:12,660
gatekeeper to securely reconfigure the

166
00:06:12,660 --> 00:06:15,120
PPC

167
00:06:15,120 --> 00:06:16,740
again we don't want the processor car

168
00:06:16,740 --> 00:06:18,780
from accessing the PPC controller

169
00:06:18,780 --> 00:06:21,360
directly and so the gatekeeper will

170
00:06:21,360 --> 00:06:23,340
actually will actually validate

171
00:06:23,340 --> 00:06:25,020
interactions

172
00:06:25,020 --> 00:06:27,180
from the trampoline

173
00:06:27,180 --> 00:06:31,080
and reconfigure WPC on its behalf

174
00:06:31,080 --> 00:06:33,180
after the contact switch the Zone will

175
00:06:33,180 --> 00:06:34,560
execute

176
00:06:34,560 --> 00:06:37,199
and the PPC will ensure that that zone

177
00:06:37,199 --> 00:06:40,199
will only be able to access baton's

178
00:06:40,199 --> 00:06:42,440
memory

179
00:06:42,600 --> 00:06:44,880
on an exit again the trampoline and the

180
00:06:44,880 --> 00:06:46,199
gatekeeper coordinate themselves again

181
00:06:46,199 --> 00:06:48,360
to securely reconfigure the VPC in a

182
00:06:48,360 --> 00:06:50,759
similar way as to when the Zone was

183
00:06:50,759 --> 00:06:51,840
executing

184
00:06:51,840 --> 00:06:54,960
it was on an entry to the zone

185
00:06:54,960 --> 00:06:56,940
and after all this the normal world can

186
00:06:56,940 --> 00:06:59,780
resume execution

187
00:07:00,360 --> 00:07:02,580
implementation reason is quite nuanced

188
00:07:02,580 --> 00:07:04,919
and without going over details these are

189
00:07:04,919 --> 00:07:07,400
the main implementation challenges

190
00:07:07,400 --> 00:07:09,539
cross-core synchronization where you

191
00:07:09,539 --> 00:07:11,220
synchronization Primitives and we

192
00:07:11,220 --> 00:07:13,020
suspend all cars in a cluster except the

193
00:07:13,020 --> 00:07:15,919
one executing a Zone

194
00:07:15,960 --> 00:07:17,039
perform we must perform

195
00:07:17,039 --> 00:07:19,080
microarchitectural maintenance cache and

196
00:07:19,080 --> 00:07:20,400
tlv

197
00:07:20,400 --> 00:07:22,319
we optimize the reconfiguration of the

198
00:07:22,319 --> 00:07:23,819
PPC

199
00:07:23,819 --> 00:07:26,220
and we handle non-obvious aspects of

200
00:07:26,220 --> 00:07:28,740
exiting Azure preventing crashes and

201
00:07:28,740 --> 00:07:31,740
potentials potentially cash code

202
00:07:31,740 --> 00:07:33,060
injections

203
00:07:33,060 --> 00:07:35,460
if you are interested in details I

204
00:07:35,460 --> 00:07:38,940
invite you to take a look at our paper

205
00:07:38,940 --> 00:07:42,259
now for the evaluation

206
00:07:45,539 --> 00:07:47,460
we evaluate the performance of resonance

207
00:07:47,460 --> 00:07:48,720
three vectors

208
00:07:48,720 --> 00:07:52,020
micro benchmarks or evaluate the reedi

209
00:07:52,020 --> 00:07:53,580
interactions

210
00:07:53,580 --> 00:07:55,380
granularly

211
00:07:55,380 --> 00:07:57,319
we evaluate the performance of rezone

212
00:07:57,319 --> 00:07:59,880
across two Tas that Implement real

213
00:07:59,880 --> 00:08:02,099
workloads and we evaluate the impact

214
00:08:02,099 --> 00:08:05,099
that reason has on a system when it when

215
00:08:05,099 --> 00:08:08,780
it interrupts normal workloads

216
00:08:09,660 --> 00:08:12,900
for micro benchmarks we evaluate optis X

217
00:08:12,900 --> 00:08:14,880
test test suite and I will platform

218
00:08:14,880 --> 00:08:17,580
client API for the real world use cases

219
00:08:17,580 --> 00:08:19,740
we evaluate a Bitcoin wallet ta and the

220
00:08:19,740 --> 00:08:21,539
DRM ta

221
00:08:21,539 --> 00:08:24,300
and its application

222
00:08:24,300 --> 00:08:25,919
we make too many observations from these

223
00:08:25,919 --> 00:08:27,599
tests the first one is that simple

224
00:08:27,599 --> 00:08:30,120
workloads with many worlds with many

225
00:08:30,120 --> 00:08:32,039
world switches will incur higher

226
00:08:32,039 --> 00:08:33,839
overheads if you could take a look at

227
00:08:33,839 --> 00:08:36,659
the bars highlighted in red

228
00:08:36,659 --> 00:08:39,899
this showcase the exactly the scenario

229
00:08:39,899 --> 00:08:41,880
where we have many contact switch and

230
00:08:41,880 --> 00:08:44,580
the workload is quite small we helped

231
00:08:44,580 --> 00:08:45,839
result this workload takes five

232
00:08:45,839 --> 00:08:47,519
milliseconds to execute and will result

233
00:08:47,519 --> 00:08:50,459
the overhead is over three times

234
00:08:50,459 --> 00:08:53,820
however I like to think green we have a

235
00:08:53,820 --> 00:08:58,380
workload that makes a smaller less

236
00:08:58,380 --> 00:09:00,720
contact switches and the execution time

237
00:09:00,720 --> 00:09:02,220
is much longer

238
00:09:02,220 --> 00:09:03,899
and in this scenario the overhead will

239
00:09:03,899 --> 00:09:07,860
result is only 1.25 stacks

240
00:09:07,860 --> 00:09:09,720
our second conclusion is that the user

241
00:09:09,720 --> 00:09:12,300
experience is not significantly affected

242
00:09:12,300 --> 00:09:15,540
this graph showcases the uh

243
00:09:15,540 --> 00:09:17,339
the elapsed time between video data

244
00:09:17,339 --> 00:09:19,320
processing events in the case of the DRM

245
00:09:19,320 --> 00:09:21,180
application and as you can see the

246
00:09:21,180 --> 00:09:24,079
impact is quite small

247
00:09:24,120 --> 00:09:25,440
the last piece of the performance

248
00:09:25,440 --> 00:09:28,380
evaluation is the impact on normal world

249
00:09:28,380 --> 00:09:31,560
for this we evaluate the Benchmark PC

250
00:09:31,560 --> 00:09:33,600
Mark 3.0 for Android

251
00:09:33,600 --> 00:09:35,399
and it has two scenarios the first

252
00:09:35,399 --> 00:09:37,920
scenario we use one single chord

253
00:09:37,920 --> 00:09:39,720
and interrupt the workload at high

254
00:09:39,720 --> 00:09:40,920
frequencies

255
00:09:40,920 --> 00:09:43,500
and as you can see the

256
00:09:43,500 --> 00:09:46,200
worst case for result is when the

257
00:09:46,200 --> 00:09:48,600
interval the frequency is at 10

258
00:09:48,600 --> 00:09:50,880
milliseconds

259
00:09:50,880 --> 00:09:53,640
causing an overhead of 13 percent

260
00:09:53,640 --> 00:09:56,220
the second scenario we wanted to test a

261
00:09:56,220 --> 00:09:58,140
scenario where multiple chords tried to

262
00:09:58,140 --> 00:10:00,480
execute a zone at the same time and in

263
00:10:00,480 --> 00:10:02,760
this scenario we involve multiple cores

264
00:10:02,760 --> 00:10:04,380
interrupting the workload at one second

265
00:10:04,380 --> 00:10:06,420
intervals and as you can see the worst

266
00:10:06,420 --> 00:10:09,600
case scenario is when all four cores are

267
00:10:09,600 --> 00:10:11,700
trying to execute a Zone simultaneously

268
00:10:11,700 --> 00:10:14,580
and in this case the penalty for The

269
00:10:14,580 --> 00:10:17,760
Benchmark is nearly four percent

270
00:10:17,760 --> 00:10:20,459
now for security evaluation

271
00:10:20,459 --> 00:10:23,820
we in a paper actually make to one

272
00:10:23,820 --> 00:10:25,440
theoretical one and one severe

273
00:10:25,440 --> 00:10:27,000
mitigation I'll only present the CV

274
00:10:27,000 --> 00:10:28,080
mitigation

275
00:10:28,080 --> 00:10:30,360
we've gathered 80 security griddle

276
00:10:30,360 --> 00:10:32,580
security critical CVS and try to assess

277
00:10:32,580 --> 00:10:35,760
how helpful reason is at mitigating them

278
00:10:35,760 --> 00:10:37,680
we don't have enough information about

279
00:10:37,680 --> 00:10:40,740
some of them to make this assessment

280
00:10:40,740 --> 00:10:42,480
we make an assumption that there are

281
00:10:42,480 --> 00:10:44,459
multiple zones executing in a system and

282
00:10:44,459 --> 00:10:46,980
there's one ta percent we conclude that

283
00:10:46,980 --> 00:10:49,019
reason can help mitigate nearly 87

284
00:10:49,019 --> 00:10:50,160
percent of them

285
00:10:50,160 --> 00:10:51,779
meaning that we can mitigate the most

286
00:10:51,779 --> 00:10:53,040
stress of the West and Trust the

287
00:10:53,040 --> 00:10:54,600
application vulnerabilities

288
00:10:54,600 --> 00:10:56,700
however result doesn't mitigate against

289
00:10:56,700 --> 00:10:58,680
secret disclosures Hardware attacks

290
00:10:58,680 --> 00:11:02,519
cryptographic flaws or bootloader flows

291
00:11:02,519 --> 00:11:04,680
lastly we wanted to assess how

292
00:11:04,680 --> 00:11:06,540
widespread reason can actually be given

293
00:11:06,540 --> 00:11:09,000
that it requires some specific pieces of

294
00:11:09,000 --> 00:11:09,959
hardware

295
00:11:09,959 --> 00:11:12,839
we surveyed 19 platforms and we conclude

296
00:11:12,839 --> 00:11:14,399
that result can help actually be

297
00:11:14,399 --> 00:11:16,440
deployed on 13 of them we'd like to note

298
00:11:16,440 --> 00:11:20,040
that the many Qualcomm platforms can

299
00:11:20,040 --> 00:11:21,480
actually support result meaning that

300
00:11:21,480 --> 00:11:23,279
result could potentially be deployed in

301
00:11:23,279 --> 00:11:26,339
billions of mobile devices worldwide

302
00:11:26,339 --> 00:11:27,720
to wrap up

303
00:11:27,720 --> 00:11:31,380
just on TV tees have architectural flaws

304
00:11:31,380 --> 00:11:33,420
rezone is a novel security architecture

305
00:11:33,420 --> 00:11:35,940
that reduces the Privileges

306
00:11:35,940 --> 00:11:37,920
rezone leverages just on agnostic

307
00:11:37,920 --> 00:11:39,720
Hardware Primitives we Implement

308
00:11:39,720 --> 00:11:42,000
individual weight result in real world

309
00:11:42,000 --> 00:11:43,980
platform and software

310
00:11:43,980 --> 00:11:46,560
our evaluation showcases that

311
00:11:46,560 --> 00:11:48,360
the user experience is not significantly

312
00:11:48,360 --> 00:11:49,680
affected

313
00:11:49,680 --> 00:11:51,480
and we conclude that result can help

314
00:11:51,480 --> 00:11:52,860
mitigate many high severity

315
00:11:52,860 --> 00:11:55,019
vulnerabilities

316
00:11:55,019 --> 00:11:56,459
thank you for your attention and I'll be

317
00:11:56,459 --> 00:11:59,300
answering some of your questions

