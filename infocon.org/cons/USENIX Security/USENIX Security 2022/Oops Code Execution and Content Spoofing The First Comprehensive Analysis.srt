1
00:00:08,360 --> 00:00:11,519
hi my name is Simon and today we're

2
00:00:11,519 --> 00:00:14,400
going to talk about spoofing sign odf

3
00:00:14,400 --> 00:00:16,440
documents and how signatures can be used

4
00:00:16,440 --> 00:00:18,240
for code execution

5
00:00:18,240 --> 00:00:19,859
this book was a joint work with

6
00:00:19,859 --> 00:00:22,380
Christian vladislav and York

7
00:00:22,380 --> 00:00:25,080
so let's start with the basics

8
00:00:25,080 --> 00:00:27,599
in this picture we see an extracted odf

9
00:00:27,599 --> 00:00:31,019
document the contact XML file contains

10
00:00:31,019 --> 00:00:33,000
the main part of the visible content of

11
00:00:33,000 --> 00:00:35,579
the document and the Manifest XML

12
00:00:35,579 --> 00:00:39,000
references to all other files in the rdf

13
00:00:39,000 --> 00:00:41,340
package so the application quickly knows

14
00:00:41,340 --> 00:00:44,040
which files are included there are some

15
00:00:44,040 --> 00:00:46,079
other files in the package which contain

16
00:00:46,079 --> 00:00:48,300
for example format settings or stuff

17
00:00:48,300 --> 00:00:50,660
like that

18
00:00:50,820 --> 00:00:53,399
and if the document contains macros

19
00:00:53,399 --> 00:00:55,500
there's also a basic or scripts

20
00:00:55,500 --> 00:00:59,160
directory that contains a macro code and

21
00:00:59,160 --> 00:01:01,620
in this example the model 1 XML file

22
00:01:01,620 --> 00:01:04,979
contains a simple message box macro and

23
00:01:04,979 --> 00:01:07,740
if we want to run this macro when the

24
00:01:07,740 --> 00:01:10,260
document is opened we also need a

25
00:01:10,260 --> 00:01:14,900
trigger inside the content XML file

26
00:01:15,119 --> 00:01:17,520
and to protect users from malicious

27
00:01:17,520 --> 00:01:19,680
macro codes there are four security

28
00:01:19,680 --> 00:01:23,040
levels so on level very high only macros

29
00:01:23,040 --> 00:01:25,140
from trusted file locations are executed

30
00:01:25,140 --> 00:01:28,439
on level high which means which is the

31
00:01:28,439 --> 00:01:31,320
default level means only side macros

32
00:01:31,320 --> 00:01:34,140
from trusted locations are executed and

33
00:01:34,140 --> 00:01:36,420
on level medium execution must be

34
00:01:36,420 --> 00:01:39,180
confirmed by the user and on level low

35
00:01:39,180 --> 00:01:42,360
no confirmation is required at all and

36
00:01:42,360 --> 00:01:44,700
doing our research we focused on the

37
00:01:44,700 --> 00:01:48,240
level default which requires a trusted

38
00:01:48,240 --> 00:01:51,259
sign Macross

39
00:01:52,799 --> 00:01:54,840
there are two types of signatures in

40
00:01:54,840 --> 00:01:58,560
odaf and micro signatures protects only

41
00:01:58,560 --> 00:02:01,020
the files inside the basic or scripts

42
00:02:01,020 --> 00:02:04,439
directory while document signatures are

43
00:02:04,439 --> 00:02:07,380
calculated over the whole package and

44
00:02:07,380 --> 00:02:10,440
except for the document signatures XML

45
00:02:10,440 --> 00:02:12,120
file

46
00:02:12,120 --> 00:02:15,060
and for document signatures there exist

47
00:02:15,060 --> 00:02:16,580
three different

48
00:02:16,580 --> 00:02:20,099
signature States first the signature is

49
00:02:20,099 --> 00:02:23,220
valid and trusted second the signature

50
00:02:23,220 --> 00:02:26,280
is developed but not trusted for example

51
00:02:26,280 --> 00:02:28,379
because of sales sign certificate was

52
00:02:28,379 --> 00:02:29,940
used for signing

53
00:02:29,940 --> 00:02:33,660
and served the signature's invalid for

54
00:02:33,660 --> 00:02:35,640
example because the content of the

55
00:02:35,640 --> 00:02:38,839
document has been manipulated

56
00:02:40,319 --> 00:02:42,120
so what are the manipulation

57
00:02:42,120 --> 00:02:44,640
possibilities the easiest way is to

58
00:02:44,640 --> 00:02:46,860
manipulate the content directly in the

59
00:02:46,860 --> 00:02:48,959
content XML file

60
00:02:48,959 --> 00:02:51,660
but this of course changes the hash

61
00:02:51,660 --> 00:02:53,879
value of content XML and results in an

62
00:02:53,879 --> 00:02:57,060
invalid signature the second option is

63
00:02:57,060 --> 00:03:01,760
to add a new file uh Evo XML for example

64
00:03:01,760 --> 00:03:04,680
which may overlay the content of the

65
00:03:04,680 --> 00:03:07,920
content XML file but because of the

66
00:03:07,920 --> 00:03:10,620
missing reference in manifest XML the

67
00:03:10,620 --> 00:03:12,480
application will interpret the document

68
00:03:12,480 --> 00:03:14,760
as corrupted

69
00:03:14,760 --> 00:03:19,080
so if we add a reference to the evil XML

70
00:03:19,080 --> 00:03:22,620
file before signing the document and

71
00:03:22,620 --> 00:03:25,319
that's the evil file after some then the

72
00:03:25,319 --> 00:03:27,060
signature is displayed as invalid

73
00:03:27,060 --> 00:03:29,340
because partial signatures are not

74
00:03:29,340 --> 00:03:31,140
allowed according to the odf

75
00:03:31,140 --> 00:03:33,920
specification

76
00:03:34,019 --> 00:03:38,099
so our last our last manipulation

77
00:03:38,099 --> 00:03:43,040
possibility is the signature file itself

78
00:03:43,860 --> 00:03:46,260
and this picture we see the structure of

79
00:03:46,260 --> 00:03:47,940
the signature file

80
00:03:47,940 --> 00:03:49,680
um the sign info part contains

81
00:03:49,680 --> 00:03:52,920
references and hash values to all files

82
00:03:52,920 --> 00:03:55,379
in the document or in case of macro

83
00:03:55,379 --> 00:04:00,000
signatures to all macro files

84
00:04:00,000 --> 00:04:03,060
and in the signature properties we find

85
00:04:03,060 --> 00:04:05,640
the signing time or something's relevant

86
00:04:05,640 --> 00:04:08,159
Parts the signature value element

87
00:04:08,159 --> 00:04:10,920
contains the signed hash value of signed

88
00:04:10,920 --> 00:04:14,580
info and the key info element contains a

89
00:04:14,580 --> 00:04:17,840
signer certificate

90
00:04:17,940 --> 00:04:19,738
um document signatures are based on

91
00:04:19,738 --> 00:04:22,340
classic XML signatures according to the

92
00:04:22,340 --> 00:04:25,740
w3c recommendation and macro signatures

93
00:04:25,740 --> 00:04:27,960
are typically implemented in the same

94
00:04:27,960 --> 00:04:29,100
way

95
00:04:29,100 --> 00:04:31,560
but this also means that the key element

96
00:04:31,560 --> 00:04:35,960
is not protected by the signature

97
00:04:36,240 --> 00:04:37,979
let's start with the attacks on audio X

98
00:04:37,979 --> 00:04:40,500
signatures the certificate doubling

99
00:04:40,500 --> 00:04:42,540
attack works for macro and for document

100
00:04:42,540 --> 00:04:43,919
signatures

101
00:04:43,919 --> 00:04:46,500
and according to the XML schema it is

102
00:04:46,500 --> 00:04:48,960
allowed to add multiple x559

103
00:04:48,960 --> 00:04:50,280
certificates

104
00:04:50,280 --> 00:04:53,520
so the idea of the attack is to confuse

105
00:04:53,520 --> 00:04:55,919
the application by using multiple

106
00:04:55,919 --> 00:04:59,639
certificates in the same signature file

107
00:04:59,639 --> 00:05:01,979
and the attacker's goal is that

108
00:05:01,979 --> 00:05:04,620
different certificates are used for

109
00:05:04,620 --> 00:05:08,900
crypto and for the trust validation

110
00:05:10,380 --> 00:05:13,139
so first the attacker signs and macros

111
00:05:13,139 --> 00:05:16,139
with its own private key and his own

112
00:05:16,139 --> 00:05:19,380
certificate those included and the

113
00:05:19,380 --> 00:05:22,259
signature file as a signer certificate

114
00:05:22,259 --> 00:05:25,080
and on the Second Step the attacker adds

115
00:05:25,080 --> 00:05:28,740
a new X 509 data element to the key info

116
00:05:28,740 --> 00:05:30,120
element

117
00:05:30,120 --> 00:05:33,240
and in this new element for the attacker

118
00:05:33,240 --> 00:05:36,780
inserts a public certificate from a

119
00:05:36,780 --> 00:05:39,240
trusted entity that the victim trusts

120
00:05:39,240 --> 00:05:41,940
for macro code execution

121
00:05:41,940 --> 00:05:43,800
so for example the attacker could

122
00:05:43,800 --> 00:05:46,199
extract the certificate from another

123
00:05:46,199 --> 00:05:49,199
signed document or maybe from a signed

124
00:05:49,199 --> 00:05:51,919
as my email

125
00:05:52,919 --> 00:05:56,820
when the victim opens the manipulated

126
00:05:56,820 --> 00:05:59,580
documents the application checks the

127
00:05:59,580 --> 00:06:03,060
signature and two steps so first it

128
00:06:03,060 --> 00:06:05,220
checks whether the signatures

129
00:06:05,220 --> 00:06:07,740
cryptographically or valid and for this

130
00:06:07,740 --> 00:06:12,240
purpose the first certificate is used so

131
00:06:12,240 --> 00:06:15,300
the attackers certificates that was used

132
00:06:15,300 --> 00:06:17,100
to sign the macro code

133
00:06:17,100 --> 00:06:19,620
and since the public key belongs to the

134
00:06:19,620 --> 00:06:22,080
signing key this check is completed

135
00:06:22,080 --> 00:06:23,759
successfully

136
00:06:23,759 --> 00:06:26,460
and in the Second Step the application

137
00:06:26,460 --> 00:06:30,479
checks whether the signer is trusted and

138
00:06:30,479 --> 00:06:33,360
for this purpose the second certificate

139
00:06:33,360 --> 00:06:37,979
of The Trusted entity is used

140
00:06:37,979 --> 00:06:41,400
and those both checks are parsed and the

141
00:06:41,400 --> 00:06:44,960
macro code is executed

142
00:06:47,720 --> 00:06:50,819
the second attack for today is the

143
00:06:50,819 --> 00:06:53,880
certificate validation bypass attack and

144
00:06:53,880 --> 00:06:56,460
in this attack only works for document

145
00:06:56,460 --> 00:07:00,600
signature the idea of the attack is to

146
00:07:00,600 --> 00:07:03,020
disturb the trust validation process

147
00:07:03,020 --> 00:07:06,720
with unexpected certificate data in

148
00:07:06,720 --> 00:07:10,080
order to turn an untrusted signer into a

149
00:07:10,080 --> 00:07:12,419
trusted one and all we need for this

150
00:07:12,419 --> 00:07:15,300
attack is a safe created and self-signed

151
00:07:15,300 --> 00:07:17,840
certificate

152
00:07:20,940 --> 00:07:23,520
the attacker choose the content of the

153
00:07:23,520 --> 00:07:26,580
document and signs it with its own

154
00:07:26,580 --> 00:07:29,099
private key

155
00:07:29,099 --> 00:07:31,740
but of course the victim will not trust

156
00:07:31,740 --> 00:07:33,539
this document because the attacker is

157
00:07:33,539 --> 00:07:35,340
displayed as a signer and the

158
00:07:35,340 --> 00:07:38,099
certificate was not issued by a trusted

159
00:07:38,099 --> 00:07:40,440
CA

160
00:07:40,440 --> 00:07:43,259
so if the attacker manipulates the

161
00:07:43,259 --> 00:07:46,020
issuer and the subject of the signing

162
00:07:46,020 --> 00:07:49,020
certificate for example to Huma Simpson

163
00:07:49,020 --> 00:07:52,139
who uses the safest CA in the world the

164
00:07:52,139 --> 00:07:56,280
certificate becomes invalid and this

165
00:07:56,280 --> 00:07:59,520
also results in an invalid document

166
00:07:59,520 --> 00:08:02,120
signature

167
00:08:03,479 --> 00:08:05,780
foreign

168
00:08:05,780 --> 00:08:10,280
application can verify the certificate

169
00:08:10,280 --> 00:08:13,319
signature only if it knows which signing

170
00:08:13,319 --> 00:08:15,060
algorithm was used to sign the

171
00:08:15,060 --> 00:08:16,440
certificate

172
00:08:16,440 --> 00:08:19,379
so if the attacker changes this oid

173
00:08:19,379 --> 00:08:23,400
value to an invalid one for example to a

174
00:08:23,400 --> 00:08:28,139
member body which is the oid 1.2

175
00:08:28,139 --> 00:08:30,660
then the application interprets any

176
00:08:30,660 --> 00:08:33,419
certificate that's trusted and displaced

177
00:08:33,419 --> 00:08:35,339
with valid and trusted documents

178
00:08:35,339 --> 00:08:38,479
signature to the victim

179
00:08:43,339 --> 00:08:46,860
let's talk about our evaluation we

180
00:08:46,860 --> 00:08:48,839
developed five attacks and tested them

181
00:08:48,839 --> 00:08:52,080
on three desktop operating systems two

182
00:08:52,080 --> 00:08:55,019
mobile operating systems and two online

183
00:08:55,019 --> 00:08:58,260
services in total 18 applications were

184
00:08:58,260 --> 00:09:01,440
tested and all applications supported

185
00:09:01,440 --> 00:09:04,440
macros and odf documents were vulnerable

186
00:09:04,440 --> 00:09:07,140
to the macro variant of the certificate

187
00:09:07,140 --> 00:09:09,180
doubling attack

188
00:09:09,180 --> 00:09:12,360
and 16 applications were vulnerable to

189
00:09:12,360 --> 00:09:14,580
the document signature variant of the

190
00:09:14,580 --> 00:09:17,160
certificate doubling attack and the same

191
00:09:17,160 --> 00:09:20,640
16 applications were also vulnerable to

192
00:09:20,640 --> 00:09:23,160
manipulations of the signature time

193
00:09:23,160 --> 00:09:27,360
stamp through XML signature wrapping

194
00:09:27,360 --> 00:09:29,959
the certificate validation bypass attack

195
00:09:29,959 --> 00:09:33,600
worked only on Windows operating systems

196
00:09:33,600 --> 00:09:36,240
and they are only for OpenOffice

197
00:09:36,240 --> 00:09:39,660
collaboro office and leapfers

198
00:09:39,660 --> 00:09:44,160
and Microsoft Office was only vulnerable

199
00:09:44,160 --> 00:09:48,439
to the signature upgrade attack

200
00:09:51,959 --> 00:09:54,300
so what is the conclusion and what have

201
00:09:54,300 --> 00:09:57,180
we learned from this the complexity of

202
00:09:57,180 --> 00:09:59,839
XML signatures is still a problem

203
00:09:59,839 --> 00:10:02,580
XML signature wrapping is one example

204
00:10:02,580 --> 00:10:04,860
but developers also need to deal with

205
00:10:04,860 --> 00:10:08,519
unsigned Parts like key environment

206
00:10:08,519 --> 00:10:11,160
and so the specifications should be more

207
00:10:11,160 --> 00:10:13,680
precise what to do with multiple key

208
00:10:13,680 --> 00:10:16,920
materials and stuff like that

209
00:10:16,920 --> 00:10:19,200
if you want to test our attacks on your

210
00:10:19,200 --> 00:10:21,120
own software you are welcome to use our

211
00:10:21,120 --> 00:10:23,820
proof of concept files and GitHub and

212
00:10:23,820 --> 00:10:26,880
our evaluation tool Dockers file

213
00:10:26,880 --> 00:10:30,019
thank you for your attention

