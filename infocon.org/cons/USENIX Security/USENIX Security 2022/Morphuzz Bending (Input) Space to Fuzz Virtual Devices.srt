1
00:00:08,058 --> 00:00:10,500
thank you for the introduction

2
00:00:10,500 --> 00:00:13,320
uh yeah hi everyone my name is Alexander

3
00:00:13,320 --> 00:00:16,560
bulyakov and I'm excited to present our

4
00:00:16,560 --> 00:00:19,680
new paper morphas bending input space to

5
00:00:19,680 --> 00:00:22,500
fuzz virtual devices and this was joint

6
00:00:22,500 --> 00:00:25,260
work with my co-authors Bandon Das

7
00:00:25,260 --> 00:00:28,140
Stefan Hajj Nursery from Red Hat and uh

8
00:00:28,140 --> 00:00:31,880
Manuel eglet from Boston University

9
00:00:32,340 --> 00:00:34,739
so we're all familiar with

10
00:00:34,739 --> 00:00:37,559
virtualization whether we've used VMS to

11
00:00:37,559 --> 00:00:40,320
run a different operating system analyze

12
00:00:40,320 --> 00:00:43,020
a malware sample or harness the power of

13
00:00:43,020 --> 00:00:44,280
the cloud

14
00:00:44,280 --> 00:00:46,260
and one of the main Promises of

15
00:00:46,260 --> 00:00:49,260
virtualization is isolation

16
00:00:49,260 --> 00:00:51,420
basically if one of our VMS is

17
00:00:51,420 --> 00:00:52,980
compromised

18
00:00:52,980 --> 00:00:55,020
we expect the rest of the system to

19
00:00:55,020 --> 00:00:56,699
remain safe

20
00:00:56,699 --> 00:01:00,180
but by by taking advantage of a VM

21
00:01:00,180 --> 00:01:03,480
Escape attack a malicious VM maybe may

22
00:01:03,480 --> 00:01:04,860
be able to compromise a vulnerable

23
00:01:04,860 --> 00:01:07,380
hypervisor and the rest of the VMS on

24
00:01:07,380 --> 00:01:08,460
the system

25
00:01:08,460 --> 00:01:11,100
so how do we prevent against this nasty

26
00:01:11,100 --> 00:01:12,119
scenario

27
00:01:12,119 --> 00:01:16,500
well one way is to proactively fuzz the

28
00:01:16,500 --> 00:01:18,720
hypervisor and find and Patch

29
00:01:18,720 --> 00:01:20,220
vulnerabilities before they make it into

30
00:01:20,220 --> 00:01:22,320
release

31
00:01:22,320 --> 00:01:24,000
and in order to do that we have to

32
00:01:24,000 --> 00:01:25,799
understand the attack surface right so

33
00:01:25,799 --> 00:01:27,420
what's the attack surface that the

34
00:01:27,420 --> 00:01:31,380
hypervisor exposes to the VMS and mostly

35
00:01:31,380 --> 00:01:33,119
it's composed of the virtual devices and

36
00:01:33,119 --> 00:01:35,759
under the hood the virtual devices

37
00:01:35,759 --> 00:01:39,420
are just uh you are just code usually

38
00:01:39,420 --> 00:01:42,299
tens or hundreds of thousands of lines

39
00:01:42,299 --> 00:01:44,400
of C or C plus plus

40
00:01:44,400 --> 00:01:46,979
so this is prime ground for the types of

41
00:01:46,979 --> 00:01:48,840
vulnerabilities that cause VM Escape

42
00:01:48,840 --> 00:01:51,780
attacks and in order to fuzz these

43
00:01:51,780 --> 00:01:54,540
virtual devices let's understand how we

44
00:01:54,540 --> 00:01:56,100
communicate with devices in the first

45
00:01:56,100 --> 00:01:57,000
place

46
00:01:57,000 --> 00:02:00,420
so one of the major ways that computers

47
00:02:00,420 --> 00:02:03,240
do this is using a memory mapped IO and

48
00:02:03,240 --> 00:02:07,439
Port IO and semantically these two modes

49
00:02:07,439 --> 00:02:10,500
of i o are two sides of the same coin

50
00:02:10,500 --> 00:02:11,700
they just Target different address

51
00:02:11,700 --> 00:02:14,940
spaces so say for example our CPU wants

52
00:02:14,940 --> 00:02:19,620
to display a letter on on the display

53
00:02:19,620 --> 00:02:21,300
um the CPU doesn't have a specific

54
00:02:21,300 --> 00:02:24,060
instruction to do that instead it can

55
00:02:24,060 --> 00:02:26,459
read and write from physical memory

56
00:02:26,459 --> 00:02:28,620
and it turns out that some frames in

57
00:02:28,620 --> 00:02:30,480
physical memory instead of being

58
00:02:30,480 --> 00:02:32,580
associated with ram like we're used to

59
00:02:32,580 --> 00:02:36,000
they're mapped to uh devices like the

60
00:02:36,000 --> 00:02:38,520
display adapter in this case so all the

61
00:02:38,520 --> 00:02:41,220
CPU has to do to print a letter is to

62
00:02:41,220 --> 00:02:44,459
write to that mmio region and that right

63
00:02:44,459 --> 00:02:46,500
gets directed to the display adapter

64
00:02:46,500 --> 00:02:49,680
which displays our letter on the screen

65
00:02:49,680 --> 00:02:51,840
but this is much too slow for high

66
00:02:51,840 --> 00:02:54,180
bandwidth applications like networking

67
00:02:54,180 --> 00:02:56,760
and disk because here the CPU has to

68
00:02:56,760 --> 00:02:58,860
wait each time the device handles the

69
00:02:58,860 --> 00:03:00,840
request and it's just it's too slow for

70
00:03:00,840 --> 00:03:03,780
for large packets so for those high

71
00:03:03,780 --> 00:03:06,480
bandwidth cases we have direct memory

72
00:03:06,480 --> 00:03:10,140
access or dma as another mode of i o and

73
00:03:10,140 --> 00:03:11,940
the way that this works is the CPU first

74
00:03:11,940 --> 00:03:15,239
places the packet the network packet for

75
00:03:15,239 --> 00:03:17,640
example in memory and actually it can

76
00:03:17,640 --> 00:03:19,319
create complex data structures and

77
00:03:19,319 --> 00:03:21,540
memory such as a ring buffer with

78
00:03:21,540 --> 00:03:24,720
pointers that point to other buffers in

79
00:03:24,720 --> 00:03:27,239
memory that contain the packet and then

80
00:03:27,239 --> 00:03:28,620
when the CPU is ready for the network

81
00:03:28,620 --> 00:03:31,440
adapter to handle uh to send the packet

82
00:03:31,440 --> 00:03:33,420
it writes it simply writes a pointer

83
00:03:33,420 --> 00:03:36,900
provides a pointer to that uh ring

84
00:03:36,900 --> 00:03:39,000
buffer over something like memory map

85
00:03:39,000 --> 00:03:41,239
dijo and then the CPU can continue

86
00:03:41,239 --> 00:03:43,440
working on something else while the

87
00:03:43,440 --> 00:03:44,900
network adapter

88
00:03:44,900 --> 00:03:47,819
asynchronously reaches into memory and

89
00:03:47,819 --> 00:03:50,640
gets the data using dma and sends the

90
00:03:50,640 --> 00:03:52,799
packet over the network

91
00:03:52,799 --> 00:03:55,620
and this is tricky when it comes to

92
00:03:55,620 --> 00:03:57,959
fuzzing because these dma regions they

93
00:03:57,959 --> 00:04:00,120
can actually be anywhere in memory they

94
00:04:00,120 --> 00:04:03,540
can move around uh so there's when we

95
00:04:03,540 --> 00:04:05,640
consider the fact that how big memory is

96
00:04:05,640 --> 00:04:08,040
and how small our fuzzing inputs usually

97
00:04:08,040 --> 00:04:10,019
are we can see how how this is a tricky

98
00:04:10,019 --> 00:04:10,980
problem

99
00:04:10,980 --> 00:04:15,420
and if we look at a example of a real uh

100
00:04:15,420 --> 00:04:17,519
virtual device input this was actually

101
00:04:17,519 --> 00:04:19,798
something found by morphas it's a crash

102
00:04:19,798 --> 00:04:22,320
in the E1000 network card

103
00:04:22,320 --> 00:04:24,120
um and just looking at it it might not

104
00:04:24,120 --> 00:04:26,280
look really uh large

105
00:04:26,280 --> 00:04:28,560
but once we start digging in and

106
00:04:28,560 --> 00:04:30,540
breaking it down it becomes clear that

107
00:04:30,540 --> 00:04:32,400
this is actually quite a semantically

108
00:04:32,400 --> 00:04:35,340
complex input so first of all

109
00:04:35,340 --> 00:04:39,780
um the yellow uh values here are a

110
00:04:39,780 --> 00:04:42,600
portio addresses the green values here

111
00:04:42,600 --> 00:04:44,400
are memory mapped i o addresses and the

112
00:04:44,400 --> 00:04:46,979
red values are dma addresses so first of

113
00:04:46,979 --> 00:04:50,040
all we see that this input has all all

114
00:04:50,040 --> 00:04:52,320
three modes of i o

115
00:04:52,320 --> 00:04:54,780
um and then as we start walking down the

116
00:04:54,780 --> 00:04:56,880
input if we look at the yellow commands

117
00:04:56,880 --> 00:04:59,280
up there uh those are actually PCI

118
00:04:59,280 --> 00:05:01,979
configuration commands that create and

119
00:05:01,979 --> 00:05:05,280
locate the the green mmio region

120
00:05:05,280 --> 00:05:07,800
and then once we move into the green

121
00:05:07,800 --> 00:05:09,240
commands we actually see that there's a

122
00:05:09,240 --> 00:05:11,220
red value there so that specifies the

123
00:05:11,220 --> 00:05:13,740
address of a dma location

124
00:05:13,740 --> 00:05:15,960
and at the very end we see that there's

125
00:05:15,960 --> 00:05:19,020
this final mmio operation which kicks

126
00:05:19,020 --> 00:05:21,120
the network device and tells it to fetch

127
00:05:21,120 --> 00:05:24,180
the region over dma and in this case uh

128
00:05:24,180 --> 00:05:26,580
the region dma had a circular reference

129
00:05:26,580 --> 00:05:29,160
back to the mmio region which caused a

130
00:05:29,160 --> 00:05:31,440
circular dependence and an infinite Loop

131
00:05:31,440 --> 00:05:36,120
problem uh so we can see that this is a

132
00:05:36,120 --> 00:05:37,979
highly semantically complex input and

133
00:05:37,979 --> 00:05:39,660
especially once we consider the fact

134
00:05:39,660 --> 00:05:41,580
that these inputs can interact with

135
00:05:41,580 --> 00:05:43,320
virtually any address so if we just

136
00:05:43,320 --> 00:05:44,820
attach the port IO and memory mapped

137
00:05:44,820 --> 00:05:47,460
iospace to a random fuzzer they're very

138
00:05:47,460 --> 00:05:49,139
unlikely to generate inputs that have

139
00:05:49,139 --> 00:05:52,380
these clustered together addresses

140
00:05:52,380 --> 00:05:54,600
um and these associations between

141
00:05:54,600 --> 00:05:57,600
different parts of the input so if we

142
00:05:57,600 --> 00:05:59,940
look at uh prior approaches and there

143
00:05:59,940 --> 00:06:01,259
are prior approaches because bug

144
00:06:01,259 --> 00:06:04,560
bounties for a virtual devices or for

145
00:06:04,560 --> 00:06:07,199
hypervisors uh some of them are in the

146
00:06:07,199 --> 00:06:09,300
hundreds of thousands of dollars

147
00:06:09,300 --> 00:06:09,960
um

148
00:06:09,960 --> 00:06:12,180
they the way that they approach this

149
00:06:12,180 --> 00:06:14,280
problem of the massive input space

150
00:06:14,280 --> 00:06:17,220
um mostly three different ways uh one

151
00:06:17,220 --> 00:06:19,320
approach is to Simply ignore parts of

152
00:06:19,320 --> 00:06:21,539
the input space like dma

153
00:06:21,539 --> 00:06:23,520
um and this works well enough for simple

154
00:06:23,520 --> 00:06:25,440
devices and it finds bugs but of course

155
00:06:25,440 --> 00:06:29,220
complex devices often rely on dma

156
00:06:29,220 --> 00:06:32,160
um then there's the approach proposed in

157
00:06:32,160 --> 00:06:34,800
a hypercube which is to use a scratch

158
00:06:34,800 --> 00:06:37,139
buffer to sort of coerce a device to

159
00:06:37,139 --> 00:06:39,180
perform dma operations on a specific

160
00:06:39,180 --> 00:06:41,940
region of memory and this actually works

161
00:06:41,940 --> 00:06:43,979
well enough to trigger some DM activity

162
00:06:43,979 --> 00:06:46,500
but as we saw dma buffers can represent

163
00:06:46,500 --> 00:06:49,860
complex data structures like rings and

164
00:06:49,860 --> 00:06:52,800
um and so on and these are very very

165
00:06:52,800 --> 00:06:55,860
difficult to represent in this scratch

166
00:06:55,860 --> 00:06:59,340
buffer approach so uh the later the Nix

167
00:06:59,340 --> 00:07:01,740
approach actually proposes to use

168
00:07:01,740 --> 00:07:04,800
grammars for each individual device and

169
00:07:04,800 --> 00:07:07,560
here the grammar encodes the complex

170
00:07:07,560 --> 00:07:09,720
semantic dependencies for every single

171
00:07:09,720 --> 00:07:12,000
device but the problem with grammars is

172
00:07:12,000 --> 00:07:15,120
you need expert knowledge and there's no

173
00:07:15,120 --> 00:07:16,620
guarantee that you're manually written

174
00:07:16,620 --> 00:07:19,139
grammar actually matches what's written

175
00:07:19,139 --> 00:07:21,419
in the what's written in the code of the

176
00:07:21,419 --> 00:07:22,500
device

177
00:07:22,500 --> 00:07:24,300
so

178
00:07:24,300 --> 00:07:27,660
uh recapping the problem right we have

179
00:07:27,660 --> 00:07:29,639
this massive input space and we have

180
00:07:29,639 --> 00:07:32,639
these seemingly small regions of portio

181
00:07:32,639 --> 00:07:34,800
memory map today on dma but because they

182
00:07:34,800 --> 00:07:36,120
can sort of shift around we have to

183
00:07:36,120 --> 00:07:38,160
consider the whole thing and the

184
00:07:38,160 --> 00:07:40,560
approach that morphas takes

185
00:07:40,560 --> 00:07:44,819
is it actually uh reshapes or bends this

186
00:07:44,819 --> 00:07:46,020
input space

187
00:07:46,020 --> 00:07:48,780
to provide a distilled view so that at

188
00:07:48,780 --> 00:07:51,240
any point of time we can provide a view

189
00:07:51,240 --> 00:07:52,979
to the fuzzer of only the regions that

190
00:07:52,979 --> 00:07:54,960
are actively engaged in Port IO memory

191
00:07:54,960 --> 00:07:57,979
mapped IO and dma

192
00:07:59,460 --> 00:08:02,220
so how do we get to this point to get to

193
00:08:02,220 --> 00:08:03,900
this distilled view of the input space

194
00:08:03,900 --> 00:08:05,520
well let's look at Portia on memory

195
00:08:05,520 --> 00:08:07,440
map.io first

196
00:08:07,440 --> 00:08:10,080
um for these recall that the CPU can

197
00:08:10,080 --> 00:08:13,620
interact with various devices and uh but

198
00:08:13,620 --> 00:08:15,360
for some of these they need the accesses

199
00:08:15,360 --> 00:08:17,699
need to be trapped and emulated right

200
00:08:17,699 --> 00:08:20,160
because they access mmio regions or

201
00:08:20,160 --> 00:08:22,620
portio regions and what we found is if

202
00:08:22,620 --> 00:08:25,319
you look at uh the hypervisor code

203
00:08:25,319 --> 00:08:27,300
usually the hypervisors will have

204
00:08:27,300 --> 00:08:29,699
something like a table of i o regions

205
00:08:29,699 --> 00:08:33,360
which represents the list of i o regions

206
00:08:33,360 --> 00:08:35,039
that it needs to trap on and the

207
00:08:35,039 --> 00:08:36,839
handlers that need to be called when it

208
00:08:36,839 --> 00:08:38,880
traps in access to those regions so as

209
00:08:38,880 --> 00:08:40,799
the fuzzer if we want a perfect view of

210
00:08:40,799 --> 00:08:42,599
the currently active mmion Port IO

211
00:08:42,599 --> 00:08:44,580
regions we simply can hook into this

212
00:08:44,580 --> 00:08:45,899
table

213
00:08:45,899 --> 00:08:48,959
and that gives us a great view of uh

214
00:08:48,959 --> 00:08:51,180
which which mmio regions and portio

215
00:08:51,180 --> 00:08:53,580
regions we should be fuzzing

216
00:08:53,580 --> 00:08:56,100
now moving on to dma remember that dma

217
00:08:56,100 --> 00:08:58,620
works by first populating some region in

218
00:08:58,620 --> 00:09:01,080
memory and then providing the address of

219
00:09:01,080 --> 00:09:02,880
that region over memory map IO and then

220
00:09:02,880 --> 00:09:04,860
the device asynchronously fetches that

221
00:09:04,860 --> 00:09:06,720
region well

222
00:09:06,720 --> 00:09:09,420
uh the way that more if we just forget

223
00:09:09,420 --> 00:09:10,920
about that and we fuzz the device over

224
00:09:10,920 --> 00:09:13,200
mmio the device will still eventually

225
00:09:13,200 --> 00:09:16,620
try to perform a dma axis and

226
00:09:16,620 --> 00:09:20,279
uh once the device performs a dma axis

227
00:09:20,279 --> 00:09:21,720
remember all of this is happening in

228
00:09:21,720 --> 00:09:24,000
code so usually there's something like

229
00:09:24,000 --> 00:09:27,360
an API to facilitate dma accesses

230
00:09:27,360 --> 00:09:30,300
because uh and that takes care of

231
00:09:30,300 --> 00:09:32,220
complex things like translating guest

232
00:09:32,220 --> 00:09:34,200
addresses to host addresses

233
00:09:34,200 --> 00:09:36,480
and what we can do as the fuzzer is

234
00:09:36,480 --> 00:09:38,640
actually instrument this API pause the

235
00:09:38,640 --> 00:09:40,680
access and populate the corresponding

236
00:09:40,680 --> 00:09:42,360
region of memory with fuzzer provided

237
00:09:42,360 --> 00:09:45,060
data just in time and then we resume the

238
00:09:45,060 --> 00:09:48,360
access and the device reads our fuzzer

239
00:09:48,360 --> 00:09:50,339
provided data and notice that with this

240
00:09:50,339 --> 00:09:52,380
approach we take a lot of the complexity

241
00:09:52,380 --> 00:09:54,839
uh that uh something like a grammar

242
00:09:54,839 --> 00:09:56,339
would take care of out of the equation

243
00:09:56,339 --> 00:09:58,200
because we don't need to guess any dma

244
00:09:58,200 --> 00:10:01,200
pointers uh that's just abstracted Away

245
00:10:01,200 --> 00:10:04,620
by the fact that we populate any region

246
00:10:04,620 --> 00:10:06,240
just in time

247
00:10:06,240 --> 00:10:09,060
so uh putting together every of the

248
00:10:09,060 --> 00:10:11,100
components of our fuzzer

249
00:10:11,100 --> 00:10:14,220
um first need to hook the hypervisor uh

250
00:10:14,220 --> 00:10:16,920
then for our actual harness we basted on

251
00:10:16,920 --> 00:10:20,100
lib fuzzer uh we added an interpreter to

252
00:10:20,100 --> 00:10:23,160
convert the input into a sequence of uh

253
00:10:23,160 --> 00:10:26,160
Port i o memory mapped IO and dma

254
00:10:26,160 --> 00:10:27,300
patterns

255
00:10:27,300 --> 00:10:29,040
we added a fork server because

256
00:10:29,040 --> 00:10:31,200
hypervisors are really stateful and we

257
00:10:31,200 --> 00:10:32,399
don't want State leaking in between

258
00:10:32,399 --> 00:10:34,980
different inputs and then finally

259
00:10:34,980 --> 00:10:37,440
because of the way that we transformed a

260
00:10:37,440 --> 00:10:40,440
dma into a synchronous operation we

261
00:10:40,440 --> 00:10:42,500
actually need to perform a unbending

262
00:10:42,500 --> 00:10:45,660
step to convert it back into an

263
00:10:45,660 --> 00:10:47,399
asynchronous operation which is the way

264
00:10:47,399 --> 00:10:50,339
it normally works and for more details

265
00:10:50,339 --> 00:10:53,040
about how uh that works please see your

266
00:10:53,040 --> 00:10:55,800
paper it's a lot uh simpler than than it

267
00:10:55,800 --> 00:10:57,060
sounds

268
00:10:57,060 --> 00:10:59,220
um for evaluation we looked at two

269
00:10:59,220 --> 00:11:01,019
different hypervisors cumu and beehive

270
00:11:01,019 --> 00:11:05,579
we looked at 33 virtual devices in total

271
00:11:05,579 --> 00:11:09,660
um and we found that morphos achieves 81

272
00:11:09,660 --> 00:11:14,100
coverage overall with uh for and for 13

273
00:11:14,100 --> 00:11:16,140
out of 16 devices evaluated in Prior

274
00:11:16,140 --> 00:11:19,740
Works morphas uh matches or uh exceeds

275
00:11:19,740 --> 00:11:21,660
the coverage

276
00:11:21,660 --> 00:11:23,279
we also wanted to see whether the way

277
00:11:23,279 --> 00:11:27,240
that we handle dma is uh is effective or

278
00:11:27,240 --> 00:11:29,220
it makes a real difference in the

279
00:11:29,220 --> 00:11:31,260
fuzzing performance so we implemented

280
00:11:31,260 --> 00:11:32,880
approaches that were used in past work

281
00:11:32,880 --> 00:11:34,740
such as ignoring dma or the scratch

282
00:11:34,740 --> 00:11:37,260
buffer approach and we found that for 24

283
00:11:37,260 --> 00:11:40,620
out of 33 devices the reshaping dma

284
00:11:40,620 --> 00:11:43,019
space approach makes an improvement and

285
00:11:43,019 --> 00:11:44,459
the reason this number isn't higher is

286
00:11:44,459 --> 00:11:46,079
because simply because some of the

287
00:11:46,079 --> 00:11:48,959
devices out of these 33 don't use dma at

288
00:11:48,959 --> 00:11:49,920
all

289
00:11:49,920 --> 00:11:54,300
okay so uh bugs we found 66 new bugs out

290
00:11:54,300 --> 00:11:56,760
of 110 total bugs when we include the

291
00:11:56,760 --> 00:11:58,740
ones that were we found that were also

292
00:11:58,740 --> 00:12:01,260
reported in previous works and out of

293
00:12:01,260 --> 00:12:03,240
these we have 29 assertion failures

294
00:12:03,240 --> 00:12:06,000
eight stack overflows eight null pointer

295
00:12:06,000 --> 00:12:08,220
references seven years after freeze

296
00:12:08,220 --> 00:12:10,680
seven bubble overflows and seven other

297
00:12:10,680 --> 00:12:12,959
bugs like infinite loops and floating

298
00:12:12,959 --> 00:12:15,000
Point exceptions and these bugs are

299
00:12:15,000 --> 00:12:18,060
across the spectrum of IO devices

300
00:12:18,060 --> 00:12:20,579
uh from the E1000 hour card as we saw

301
00:12:20,579 --> 00:12:24,420
earlier to the xhci USB controller which

302
00:12:24,420 --> 00:12:28,019
has a 645 page specification uh to the

303
00:12:28,019 --> 00:12:30,959
power virtual uh vertio devices which

304
00:12:30,959 --> 00:12:33,120
rely on these really uh sophisticated

305
00:12:33,120 --> 00:12:36,480
you know multiple ring with uh with many

306
00:12:36,480 --> 00:12:39,360
descriptors over dma approaches in uh in

307
00:12:39,360 --> 00:12:41,700
guest memory

308
00:12:41,700 --> 00:12:42,600
um

309
00:12:42,600 --> 00:12:44,579
I'd like to mention that more fuzz is

310
00:12:44,579 --> 00:12:46,380
actually Upstream in kumu and it's

311
00:12:46,380 --> 00:12:49,980
continuously fuzzed on OS fuzz we've OS

312
00:12:49,980 --> 00:12:52,320
plus has reported over 200 issues and we

313
00:12:52,320 --> 00:12:53,519
really focused on making the web

314
00:12:53,519 --> 00:12:54,899
producers easy to use for the end

315
00:12:54,899 --> 00:12:57,120
developer basically we can send a

316
00:12:57,120 --> 00:12:58,740
command over the email as you can see

317
00:12:58,740 --> 00:13:00,660
here on the on the right and all the

318
00:13:00,660 --> 00:13:02,339
developer has to do is copy and paste

319
00:13:02,339 --> 00:13:04,620
that and they can reproduce the bug they

320
00:13:04,620 --> 00:13:05,760
don't need to know anything about the

321
00:13:05,760 --> 00:13:06,779
fuzzer

322
00:13:06,779 --> 00:13:08,820
and because of this we've been able to

323
00:13:08,820 --> 00:13:12,360
catch uh some bugs before release

324
00:13:12,360 --> 00:13:13,500
um in summary

325
00:13:13,500 --> 00:13:15,420
morphus allows us to bend the input

326
00:13:15,420 --> 00:13:17,519
space to make a conducive for fuzzing

327
00:13:17,519 --> 00:13:19,440
and that allows us to use off-the-shelf

328
00:13:19,440 --> 00:13:22,440
buzzers such as lip fuzzer and once

329
00:13:22,440 --> 00:13:23,940
you've implemented more fuzz for a

330
00:13:23,940 --> 00:13:26,339
virtual device for a hypervisor you

331
00:13:26,339 --> 00:13:29,579
don't need any per device descriptions

332
00:13:29,579 --> 00:13:31,740
uh and with that I'm happy to answer any

333
00:13:31,740 --> 00:13:34,040
questions

