1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:08,540 --> 00:00:11,639
my name is yuchen Zhang from Stevens

3
00:00:11,639 --> 00:00:14,700
Institute of Technology and it is my

4
00:00:14,700 --> 00:00:17,640
great honor to present our work a deep

5
00:00:17,640 --> 00:00:19,920
floating address sanitizer today the

6
00:00:19,920 --> 00:00:21,960
co-authors are chong bing pong from 19

7
00:00:21,960 --> 00:00:24,900
University Professor Georges Puerto

8
00:00:24,900 --> 00:00:27,439
caledis from Stevens Institute of

9
00:00:27,439 --> 00:00:31,199
Technology Professor Nicos Trent Douglas

10
00:00:31,199 --> 00:00:34,200
from Stevens as well and Professor

11
00:00:34,200 --> 00:00:38,399
jinshu from the University of Utah

12
00:00:38,399 --> 00:00:40,739
so before I started presenting our work

13
00:00:40,739 --> 00:00:43,079
I would like to give some background

14
00:00:43,079 --> 00:00:45,960
information about sanitizers which are

15
00:00:45,960 --> 00:00:48,840
Dynamic code analysis tools here are the

16
00:00:48,840 --> 00:00:51,360
current supportive sanitizers by Google

17
00:00:51,360 --> 00:00:54,239
the first one is address Enticer or

18
00:00:54,239 --> 00:00:56,899
so-called asan for detecting

19
00:00:56,899 --> 00:00:59,879
addressability issues and the thread

20
00:00:59,879 --> 00:01:01,020
sanitizer

21
00:01:01,020 --> 00:01:03,660
to detect the data race and Deadlocks

22
00:01:03,660 --> 00:01:06,420
and memory sanitizer for detecting use

23
00:01:06,420 --> 00:01:09,540
of uninitialized memory and ubisan for

24
00:01:09,540 --> 00:01:11,180
detect

25
00:01:11,180 --> 00:01:14,280
undefined behaviors

26
00:01:14,280 --> 00:01:17,159
and our work is focusing on optimizing

27
00:01:17,159 --> 00:01:19,740
and improving the performance of address

28
00:01:19,740 --> 00:01:22,020
sanitizer

29
00:01:22,020 --> 00:01:24,659
so what is asan

30
00:01:24,659 --> 00:01:27,240
it is the most popular sanitizer for

31
00:01:27,240 --> 00:01:30,659
vulnerability detection which focuses on

32
00:01:30,659 --> 00:01:34,020
memory safety violations in Heap stack

33
00:01:34,020 --> 00:01:36,180
and Global objects

34
00:01:36,180 --> 00:01:39,780
the magnesium for Acer is to insert

35
00:01:39,780 --> 00:01:43,500
poisoned resonance around objects and

36
00:01:43,500 --> 00:01:46,560
Report error when program access the

37
00:01:46,560 --> 00:01:49,400
Forbidden bytes

38
00:01:49,619 --> 00:01:53,040
so here from the graph we can see for

39
00:01:53,040 --> 00:01:56,280
each Heap stack or Global objects they

40
00:01:56,280 --> 00:01:58,560
are surrounded by RedZone and if the

41
00:01:58,560 --> 00:02:01,020
program tries to access those Red Zone

42
00:02:01,020 --> 00:02:04,079
at runtime Nissan will abort the

43
00:02:04,079 --> 00:02:07,380
execution process and Report error with

44
00:02:07,380 --> 00:02:10,579
a detailed bug report

45
00:02:10,739 --> 00:02:13,739
next I'm going to present the motivation

46
00:02:13,739 --> 00:02:15,420
of our work

47
00:02:15,420 --> 00:02:18,300
that even though address sanitizer is

48
00:02:18,300 --> 00:02:21,540
powerful but there's still trade-offs

49
00:02:21,540 --> 00:02:25,440
for using Asen that is asan causes high

50
00:02:25,440 --> 00:02:29,700
runtime overhead and from spec CPU 2006

51
00:02:29,700 --> 00:02:32,700
the average overhead that ASAP brings is

52
00:02:32,700 --> 00:02:33,920
a

53
00:02:33,920 --> 00:02:35,940
107.8 percent

54
00:02:35,940 --> 00:02:38,340
and the instrumented applications

55
00:02:38,340 --> 00:02:41,459
testing also costs a lot in Computer

56
00:02:41,459 --> 00:02:44,700
Resources quoted from the sanitizer

57
00:02:44,700 --> 00:02:46,140
maintainer in Google

58
00:02:46,140 --> 00:02:49,319
in the long run faster binary equals or

59
00:02:49,319 --> 00:02:52,800
greater than more bugs caught

60
00:02:52,800 --> 00:02:55,019
so driven by our motivation

61
00:02:55,019 --> 00:02:57,840
we first present a study to answer the

62
00:02:57,840 --> 00:02:59,879
question what brings the overhead of

63
00:02:59,879 --> 00:03:03,540
Asin the answer is sentencer checks they

64
00:03:03,540 --> 00:03:05,160
are the primary source of Ace and

65
00:03:05,160 --> 00:03:07,560
overhead which is attributed to an

66
00:03:07,560 --> 00:03:12,060
overhead of 86.5 percent which is 80.8

67
00:03:12,060 --> 00:03:14,220
percent of old overhead

68
00:03:14,220 --> 00:03:17,099
our study also dissects the rest of Ace

69
00:03:17,099 --> 00:03:19,920
overhead where they come from and for

70
00:03:19,920 --> 00:03:24,018
details please refer to our paper

71
00:03:24,239 --> 00:03:26,640
as we indicated in the previous Slide

72
00:03:26,640 --> 00:03:29,159
the sentencer checks are the primary

73
00:03:29,159 --> 00:03:31,080
source of adjacentizer performance

74
00:03:31,080 --> 00:03:32,099
overhead

75
00:03:32,099 --> 00:03:35,099
here let's see from an example

76
00:03:35,099 --> 00:03:38,040
on the left side we have an array with

77
00:03:38,040 --> 00:03:40,739
size 10 and then we're trying to access

78
00:03:40,739 --> 00:03:43,799
the 10th position of that array by

79
00:03:43,799 --> 00:03:45,239
indexing

80
00:03:45,239 --> 00:03:47,159
and on the right side is the

81
00:03:47,159 --> 00:03:50,040
corresponding lvm IR code the

82
00:03:50,040 --> 00:03:52,440
instructions that in Redbox is the

83
00:03:52,440 --> 00:03:55,500
sanitizer check inserted by ASAP and

84
00:03:55,500 --> 00:03:59,519
please note for every memory accessing

85
00:03:59,519 --> 00:04:03,540
Json will insert sanitizer check

86
00:04:03,540 --> 00:04:06,420
therefore the runtime overhead of asan

87
00:04:06,420 --> 00:04:08,640
goes up

88
00:04:08,640 --> 00:04:11,280
next I'm going to present our tool

89
00:04:11,280 --> 00:04:14,400
deploying address sanitizer or we call

90
00:04:14,400 --> 00:04:16,798
it A7 minus minus

91
00:04:16,798 --> 00:04:19,380
we Implement a group of optimization

92
00:04:19,380 --> 00:04:21,779
strategies to reduce the sanitizer

93
00:04:21,779 --> 00:04:25,020
checks of Asa first we remove the

94
00:04:25,020 --> 00:04:27,960
unsatisfiable checks second we remove

95
00:04:27,960 --> 00:04:31,080
the recurrency checks then we optimize

96
00:04:31,080 --> 00:04:33,540
the neighbor checks and finally we

97
00:04:33,540 --> 00:04:36,540
optimize the checks in loops

98
00:04:36,540 --> 00:04:39,300
our two is on minus minus can reduce

99
00:04:39,300 --> 00:04:42,240
address sanitizer runtime overhead while

100
00:04:42,240 --> 00:04:44,820
keeping the bug detection ability

101
00:04:44,820 --> 00:04:48,180
and our tool is applicable to spec CPU

102
00:04:48,180 --> 00:04:50,940
2006 and the chromium showing the

103
00:04:50,940 --> 00:04:52,919
scalability

104
00:04:52,919 --> 00:04:55,620
finally we integrated our optimizations

105
00:04:55,620 --> 00:05:00,300
into lvm for high usability and thus no

106
00:05:00,300 --> 00:05:04,160
extra cost for building the tool

107
00:05:04,800 --> 00:05:07,320
now I'm going to talk about the details

108
00:05:07,320 --> 00:05:09,600
about our proposed solution for

109
00:05:09,600 --> 00:05:12,600
optimizing address sanitizer first is

110
00:05:12,600 --> 00:05:15,419
the removing alongside disable check

111
00:05:15,419 --> 00:05:17,820
let's see an example together

112
00:05:17,820 --> 00:05:20,940
on the left side we have a buffer with

113
00:05:20,940 --> 00:05:24,539
size 20 in line 2. and we then try to

114
00:05:24,539 --> 00:05:27,240
access the eye position by indexing into

115
00:05:27,240 --> 00:05:28,620
the buffer

116
00:05:28,620 --> 00:05:32,539
so can this buffer be overflowed

117
00:05:32,940 --> 00:05:35,820
the answer is no the buffer will never

118
00:05:35,820 --> 00:05:38,400
overflow because in line 4

119
00:05:38,400 --> 00:05:40,919
the if statement has already guaranteed

120
00:05:40,919 --> 00:05:43,560
that the value of I were always less

121
00:05:43,560 --> 00:05:46,560
than or equal to 10. so the index to

122
00:05:46,560 --> 00:05:50,520
buffer will always inbounds and thus the

123
00:05:50,520 --> 00:05:53,280
center check that inserted by Asin in

124
00:05:53,280 --> 00:05:56,880
line 5 can be safely removed

125
00:05:56,880 --> 00:05:59,759
next is removing the recurrenting checks

126
00:05:59,759 --> 00:06:03,259
and how we do that

127
00:06:03,419 --> 00:06:06,060
let's first Define what is recurrency

128
00:06:06,060 --> 00:06:06,900
check

129
00:06:06,900 --> 00:06:09,900
from the example on the left side we can

130
00:06:09,900 --> 00:06:13,380
see in line 3 is uncheck 1 and in line 5

131
00:06:13,380 --> 00:06:15,840
is on check 2 are checking the same

132
00:06:15,840 --> 00:06:17,820
value pointer p

133
00:06:17,820 --> 00:06:20,820
and check one dominates check two in

134
00:06:20,820 --> 00:06:24,300
another word if check 2 will be executed

135
00:06:24,300 --> 00:06:26,639
no matter what the check one will be

136
00:06:26,639 --> 00:06:28,440
executed first

137
00:06:28,440 --> 00:06:31,680
therefore ASA and check 2 in line 5 is

138
00:06:31,680 --> 00:06:34,199
recurrentine check and the safety of

139
00:06:34,199 --> 00:06:36,600
pointer P has been guaranteed by check 1

140
00:06:36,600 --> 00:06:38,340
in line three

141
00:06:38,340 --> 00:06:40,740
so we can also safely remove the

142
00:06:40,740 --> 00:06:43,020
Redundant check without losing any

143
00:06:43,020 --> 00:06:45,180
safety

144
00:06:45,180 --> 00:06:48,900
and as for optimizing labor checks if

145
00:06:48,900 --> 00:06:50,940
there are two memory access that

146
00:06:50,940 --> 00:06:53,400
accessing the neighbor memories such as

147
00:06:53,400 --> 00:06:55,500
accessing structured fields in the

148
00:06:55,500 --> 00:06:57,600
example on the left

149
00:06:57,600 --> 00:07:00,120
we can merge those Ascent Checks In Line

150
00:07:00,120 --> 00:07:03,060
6 and in line 8 into one check

151
00:07:03,060 --> 00:07:06,300
we also Implement a fast slow path

152
00:07:06,300 --> 00:07:09,180
strategy to secure the detection

153
00:07:09,180 --> 00:07:10,680
accuracy

154
00:07:10,680 --> 00:07:12,840
the faster path will check multiple

155
00:07:12,840 --> 00:07:14,580
Shadow bits at once

156
00:07:14,580 --> 00:07:17,460
and if it fails the slow path will be

157
00:07:17,460 --> 00:07:19,380
triggered and do the regular instant

158
00:07:19,380 --> 00:07:20,280
check

159
00:07:20,280 --> 00:07:22,979
on each Shadow byte then aboard the

160
00:07:22,979 --> 00:07:25,699
current execution

161
00:07:25,800 --> 00:07:27,060
finally

162
00:07:27,060 --> 00:07:30,060
we also optimize the center check in

163
00:07:30,060 --> 00:07:31,199
loops

164
00:07:31,199 --> 00:07:34,020
there are two scenarios we apply our

165
00:07:34,020 --> 00:07:35,340
strategy

166
00:07:35,340 --> 00:07:38,220
first if the indexing value to a buffer

167
00:07:38,220 --> 00:07:41,520
is monotonic increasing or decreasing as

168
00:07:41,520 --> 00:07:44,460
shown in line 6 on the left side

169
00:07:44,460 --> 00:07:46,500
we merge the check by checking multiple

170
00:07:46,500 --> 00:07:49,620
Shadow bites at once as I presented in

171
00:07:49,620 --> 00:07:52,080
the previous slide

172
00:07:52,080 --> 00:07:55,020
and the second scenario is the sanitizer

173
00:07:55,020 --> 00:07:57,720
check is repeating multiple times on the

174
00:07:57,720 --> 00:08:00,360
same value which is not cost effective

175
00:08:00,360 --> 00:08:05,280
as for inline 9. the pointer ptr2 will

176
00:08:05,280 --> 00:08:07,440
not change during the loop iteration

177
00:08:07,440 --> 00:08:10,319
so we move the check in line 7 out of

178
00:08:10,319 --> 00:08:12,900
the loop and only execute once

179
00:08:12,900 --> 00:08:15,599
by this way we can efficiently reduce

180
00:08:15,599 --> 00:08:18,060
the number of execution times of same

181
00:08:18,060 --> 00:08:20,759
sanitizer check

182
00:08:20,759 --> 00:08:22,860
after briefly introducing our two ways

183
00:08:22,860 --> 00:08:24,960
and minus minus now it's time for

184
00:08:24,960 --> 00:08:26,099
evaluations

185
00:08:26,099 --> 00:08:27,720
first the party is a performance

186
00:08:27,720 --> 00:08:31,379
overhead analysis by applying all of the

187
00:08:31,379 --> 00:08:35,219
optimization strategies on spec CPU 2006

188
00:08:35,219 --> 00:08:37,440
the runtime overhead that ASAP brings

189
00:08:37,440 --> 00:08:40,039
drops from

190
00:08:40,039 --> 00:08:44,880
107.8 percent to 63.3 percent

191
00:08:44,880 --> 00:08:47,640
and for chromium the runtime overhead

192
00:08:47,640 --> 00:08:49,100
drops from

193
00:08:49,100 --> 00:08:53,519
117.8 percent to 75.8 percent the

194
00:08:53,519 --> 00:08:55,500
performance evaluation shows our two

195
00:08:55,500 --> 00:08:57,660
ways and minus minus can efficiently

196
00:08:57,660 --> 00:09:01,260
reduce the overhead that caused by Asin

197
00:09:01,260 --> 00:09:03,120
next I'm going to present the bug

198
00:09:03,120 --> 00:09:04,920
detection capability

199
00:09:04,920 --> 00:09:06,959
after applying our tool on three

200
00:09:06,959 --> 00:09:09,720
benchmarks the Julia tester suit

201
00:09:09,720 --> 00:09:12,600
the Linux floor project and the chromium

202
00:09:12,600 --> 00:09:14,959
project

203
00:09:15,000 --> 00:09:18,000
for all benchmarks we compiled with both

204
00:09:18,000 --> 00:09:20,160
ASA and A7 minus minus

205
00:09:20,160 --> 00:09:22,440
then comparing the detection detected

206
00:09:22,440 --> 00:09:24,060
box result

207
00:09:24,060 --> 00:09:28,080
finally we verify that A7 is a minus

208
00:09:28,080 --> 00:09:33,200
minus achieve the identical results

209
00:09:33,300 --> 00:09:36,540
our tool can also bring extra benefit to

210
00:09:36,540 --> 00:09:37,560
fasting

211
00:09:37,560 --> 00:09:40,200
it is very popular to combine fuzzing

212
00:09:40,200 --> 00:09:42,420
and address sanitizer together for bug

213
00:09:42,420 --> 00:09:44,820
detection nowadays and fuzzing

214
00:09:44,820 --> 00:09:47,279
benchmarks compiled with Ace and minus

215
00:09:47,279 --> 00:09:50,100
minus increased execution speed of AFL

216
00:09:50,100 --> 00:09:53,220
by 42.1 percent and the increase of

217
00:09:53,220 --> 00:09:55,680
execution speed leads to a growth rate

218
00:09:55,680 --> 00:09:59,640
of 5 in Branch coverage

219
00:09:59,640 --> 00:10:01,140
in conclusion

220
00:10:01,140 --> 00:10:04,080
adding instant in applications converts

221
00:10:04,080 --> 00:10:06,300
the performance and the sanitizer check

222
00:10:06,300 --> 00:10:07,920
contributes the most

223
00:10:07,920 --> 00:10:10,500
but our two is a minus minus can

224
00:10:10,500 --> 00:10:12,000
efficiently reduce the performance

225
00:10:12,000 --> 00:10:14,640
overhead meanwhile maintain the

226
00:10:14,640 --> 00:10:17,100
capability scalability and usability

227
00:10:17,100 --> 00:10:19,140
efficient it can benefit the

228
00:10:19,140 --> 00:10:21,360
applications that compiled with Asa and

229
00:10:21,360 --> 00:10:24,779
reduced overhead of Asin by 41.7 percent

230
00:10:24,779 --> 00:10:30,180
of spec CPU 2006. and by 35 of chromium

231
00:10:30,180 --> 00:10:32,580
in addition it also benefits fuzzing

232
00:10:32,580 --> 00:10:35,459
tests with asan enabled applications and

233
00:10:35,459 --> 00:10:37,860
the increased execution speed and the

234
00:10:37,860 --> 00:10:39,060
branch coverage

235
00:10:39,060 --> 00:10:41,519
our work passed the artifact evaluation

236
00:10:41,519 --> 00:10:45,300
and got all the badges now has been open

237
00:10:45,300 --> 00:10:48,000
sources on GitHub please refer to the

238
00:10:48,000 --> 00:10:50,880
link for more implementation details and

239
00:10:50,880 --> 00:10:53,100
thanks for listening I'm now opening for

240
00:10:53,100 --> 00:10:55,579
any questions

