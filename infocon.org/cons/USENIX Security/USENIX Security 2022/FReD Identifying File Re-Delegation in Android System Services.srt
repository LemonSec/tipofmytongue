1
00:00:07,280 --> 00:00:09,660
as Russia said I'm we're laying from NC

2
00:00:09,660 --> 00:00:11,700
State and today I'm going to be talking

3
00:00:11,700 --> 00:00:13,500
to you about my student Al gorski's

4
00:00:13,500 --> 00:00:15,599
final chapter of his dissertation

5
00:00:15,599 --> 00:00:17,340
I'll graduate a little while ago and

6
00:00:17,340 --> 00:00:18,480
unfortunately wasn't able to make it

7
00:00:18,480 --> 00:00:22,320
today so you're stuck with me

8
00:00:22,320 --> 00:00:24,779
so one of the big changes we've seen as

9
00:00:24,779 --> 00:00:26,820
we move to mobile platforms is the idea

10
00:00:26,820 --> 00:00:28,500
that applications are security

11
00:00:28,500 --> 00:00:30,180
principles and there's an enormous

12
00:00:30,180 --> 00:00:31,980
amount of security benefits to this

13
00:00:31,980 --> 00:00:34,680
change I could probably go on for 10 to

14
00:00:34,680 --> 00:00:37,680
15 minutes on this topic alone and if

15
00:00:37,680 --> 00:00:39,420
you're interested I gave a talk at

16
00:00:39,420 --> 00:00:41,640
keynote talk at wysac over the summer on

17
00:00:41,640 --> 00:00:43,320
reflections of a past decade of mobile

18
00:00:43,320 --> 00:00:45,840
security research that talk is online if

19
00:00:45,840 --> 00:00:48,000
you're interested but the context I want

20
00:00:48,000 --> 00:00:50,219
you to have for today is that when you

21
00:00:50,219 --> 00:00:52,020
make applications security principles

22
00:00:52,020 --> 00:00:53,520
there's a significant amount of bonus

23
00:00:53,520 --> 00:00:55,440
placed on the operating system to ensure

24
00:00:55,440 --> 00:00:57,420
that that enforcement happens

25
00:00:57,420 --> 00:00:59,100
and so we've seen research in different

26
00:00:59,100 --> 00:01:01,800
areas uh over the years looking at the

27
00:01:01,800 --> 00:01:03,660
Android platform itself back in the

28
00:01:03,660 --> 00:01:05,760
early 2010s there was peace Scout and

29
00:01:05,760 --> 00:01:09,960
stowaway that were designed to map the

30
00:01:09,960 --> 00:01:11,760
apis that applications are calling to

31
00:01:11,760 --> 00:01:13,320
the permissions that correspond to them

32
00:01:13,320 --> 00:01:15,420
more recently there was a cluster of

33
00:01:15,420 --> 00:01:18,119
papers that looked at the hard-coded

34
00:01:18,119 --> 00:01:19,979
access control checks inside of the

35
00:01:19,979 --> 00:01:21,900
Android framework to determine whether

36
00:01:21,900 --> 00:01:24,720
or not they were correct so when you

37
00:01:24,720 --> 00:01:26,880
have an application make a call into the

38
00:01:26,880 --> 00:01:28,080
framework there's a bunch of conditional

39
00:01:28,080 --> 00:01:30,180
Logics if-else statements looking at

40
00:01:30,180 --> 00:01:32,520
permissions it should have looking at

41
00:01:32,520 --> 00:01:35,939
uid values to hard code in there what is

42
00:01:35,939 --> 00:01:38,520
allowed to not allow to access that RPC

43
00:01:38,520 --> 00:01:39,840
entry point and so all the work we've

44
00:01:39,840 --> 00:01:41,820
done studying applications and looking

45
00:01:41,820 --> 00:01:43,079
at their permissions it doesn't matter

46
00:01:43,079 --> 00:01:44,579
what permission they have if you get

47
00:01:44,579 --> 00:01:45,960
this part wrong

48
00:01:45,960 --> 00:01:48,720
and so these Works looked at the

49
00:01:48,720 --> 00:01:50,040
correctness of these checks and actually

50
00:01:50,040 --> 00:01:51,899
used consistency as a proxy for

51
00:01:51,899 --> 00:01:53,759
correctness and the idea was that if you

52
00:01:53,759 --> 00:01:55,020
have two different entry points that go

53
00:01:55,020 --> 00:01:56,939
to the same protected operation they

54
00:01:56,939 --> 00:01:58,619
should have the similar or the same

55
00:01:58,619 --> 00:02:00,119
Access Control checks and we had a paper

56
00:02:00,119 --> 00:02:02,700
called AC minor in as part of this this

57
00:02:02,700 --> 00:02:04,259
sort of area research a number of years

58
00:02:04,259 --> 00:02:05,399
ago

59
00:02:05,399 --> 00:02:07,680
after we finished AC minor we were

60
00:02:07,680 --> 00:02:08,880
looked at the ways in which these

61
00:02:08,880 --> 00:02:10,739
entroports called one another

62
00:02:10,739 --> 00:02:13,080
and we found there was actually highly

63
00:02:13,080 --> 00:02:14,340
interconnected lots of these entry

64
00:02:14,340 --> 00:02:15,599
points calling lots of other entry

65
00:02:15,599 --> 00:02:16,860
points you can see the interconnected

66
00:02:16,860 --> 00:02:19,500
graph on the on the right side and

67
00:02:19,500 --> 00:02:21,180
what's interesting here is that when one

68
00:02:21,180 --> 00:02:22,739
entry point calls another entry point

69
00:02:22,739 --> 00:02:25,560
frequently it's changing processes

70
00:02:25,560 --> 00:02:27,480
and so when you change the process a lot

71
00:02:27,480 --> 00:02:28,800
of these conditional checks that I

72
00:02:28,800 --> 00:02:30,780
mentioned right there checking based off

73
00:02:30,780 --> 00:02:32,520
of the PID of the collar what's the uid

74
00:02:32,520 --> 00:02:34,200
what are the permissions associated with

75
00:02:34,200 --> 00:02:36,120
that and so you lose the provenance of

76
00:02:36,120 --> 00:02:38,340
that initial request which application

77
00:02:38,340 --> 00:02:39,959
actually called that and this can lead

78
00:02:39,959 --> 00:02:41,519
to different types of confused Deputy

79
00:02:41,519 --> 00:02:43,319
vulnerabilities and so here you see on

80
00:02:43,319 --> 00:02:44,459
the slide you have a third-party

81
00:02:44,459 --> 00:02:46,319
application you try it can't normally

82
00:02:46,319 --> 00:02:48,599
call entry point E2 but it can get there

83
00:02:48,599 --> 00:02:52,379
indirectly through E1 now these deputies

84
00:02:52,379 --> 00:02:54,480
aren't inherently bad actually any

85
00:02:54,480 --> 00:02:56,040
modern operating system that's going to

86
00:02:56,040 --> 00:02:57,720
gate access to sensitive information

87
00:02:57,720 --> 00:02:59,580
they need to have these deputies it's a

88
00:02:59,580 --> 00:03:01,080
part that's there but this is a place

89
00:03:01,080 --> 00:03:02,580
that can be problematic that we need to

90
00:03:02,580 --> 00:03:03,720
study more deeply and that's what we

91
00:03:03,720 --> 00:03:05,400
created the Android redelegation Finder

92
00:03:05,400 --> 00:03:07,739
or ARF to look at and as part of that we

93
00:03:07,739 --> 00:03:09,120
created a number of heuristics to sort

94
00:03:09,120 --> 00:03:10,980
of move away the more common this is

95
00:03:10,980 --> 00:03:12,720
okay scenarios

96
00:03:12,720 --> 00:03:15,720
so after we did uh AC minor and R if we

97
00:03:15,720 --> 00:03:17,040
looked at this and said okay we have

98
00:03:17,040 --> 00:03:20,040
this we have this um

99
00:03:20,040 --> 00:03:21,840
these these Access Control checks that

100
00:03:21,840 --> 00:03:23,700
are happening at these entry points what

101
00:03:23,700 --> 00:03:25,019
else can we compare the scans what about

102
00:03:25,019 --> 00:03:26,879
files can we look at the files and find

103
00:03:26,879 --> 00:03:28,200
a similar type of reallocations

104
00:03:28,200 --> 00:03:30,000
happening there so if you interpose

105
00:03:30,000 --> 00:03:31,200
these two different figures I just

106
00:03:31,200 --> 00:03:32,459
showed you and now you have the

107
00:03:32,459 --> 00:03:33,900
applications calling you the framework

108
00:03:33,900 --> 00:03:35,459
those permission checks uid checks

109
00:03:35,459 --> 00:03:36,360
stepping there and then there's more

110
00:03:36,360 --> 00:03:38,580
checks happening into the Linux layer

111
00:03:38,580 --> 00:03:39,959
itself and we can have the emergence of

112
00:03:39,959 --> 00:03:41,220
a new type of confused Deputy

113
00:03:41,220 --> 00:03:43,680
vulnerability that can happen here now

114
00:03:43,680 --> 00:03:45,720
again these deputies are inherently they

115
00:03:45,720 --> 00:03:47,040
need to be there just because there's

116
00:03:47,040 --> 00:03:48,959
this redelegation doesn't mean that it's

117
00:03:48,959 --> 00:03:51,239
actually bad and but our hypothesis is

118
00:03:51,239 --> 00:03:53,519
similar to what we did with ARF we can

119
00:03:53,519 --> 00:03:54,900
programmatically remove a lot of the

120
00:03:54,900 --> 00:03:56,340
cases that are safe

121
00:03:56,340 --> 00:03:58,739
cases that what makes it safe versus not

122
00:03:58,739 --> 00:04:00,120
safe what sort of Sanity checks are

123
00:04:00,120 --> 00:04:02,040
deputies doing is very service specific

124
00:04:02,040 --> 00:04:03,599
and programmatically removing all of

125
00:04:03,599 --> 00:04:05,819
that is is very hard or maybe impossible

126
00:04:05,819 --> 00:04:06,780
to do

127
00:04:06,780 --> 00:04:09,840
so we created Fred the file reallocation

128
00:04:09,840 --> 00:04:11,580
finder tool and the idea here is we're

129
00:04:11,580 --> 00:04:13,500
going to find where those entry points

130
00:04:13,500 --> 00:04:14,879
are we're gonna we're gonna figure out

131
00:04:14,879 --> 00:04:17,220
what what fi what files which of those

132
00:04:17,220 --> 00:04:18,779
access files and for the files that are

133
00:04:18,779 --> 00:04:20,160
accessed what are the file paths and for

134
00:04:20,160 --> 00:04:21,540
the file paths which are those are

135
00:04:21,540 --> 00:04:22,800
sensitive and then which ones those are

136
00:04:22,800 --> 00:04:24,960
redelegated so we did this with static

137
00:04:24,960 --> 00:04:27,300
program analysis primarily in Java and

138
00:04:27,300 --> 00:04:29,040
so we looked at the Java system Services

139
00:04:29,040 --> 00:04:31,020
there are purely native ones like the

140
00:04:31,020 --> 00:04:33,120
camera service we excluded but the vast

141
00:04:33,120 --> 00:04:35,160
majority of the system services are

142
00:04:35,160 --> 00:04:37,020
written in Java we did extend that

143
00:04:37,020 --> 00:04:38,460
analysis into the native code so through

144
00:04:38,460 --> 00:04:41,100
the jni layer we extended our analysis

145
00:04:41,100 --> 00:04:42,360
to look at this as well thinking that

146
00:04:42,360 --> 00:04:43,320
well maybe there's some interesting

147
00:04:43,320 --> 00:04:45,840
low-level files that are accessed in jni

148
00:04:45,840 --> 00:04:47,940
that we want to reason about as well

149
00:04:47,940 --> 00:04:49,440
of course we've built on top of the AC

150
00:04:49,440 --> 00:04:50,820
Meyer and ARF tools that we created

151
00:04:50,820 --> 00:04:51,840
previously

152
00:04:51,840 --> 00:04:54,360
so here in the right you see a sort of a

153
00:04:54,360 --> 00:04:57,780
mock control flow graph that and so you

154
00:04:57,780 --> 00:04:59,340
might imagine the the straightforward

155
00:04:59,340 --> 00:05:00,660
way to do this is you're going to walk

156
00:05:00,660 --> 00:05:01,860
forward in the control flow or call

157
00:05:01,860 --> 00:05:03,240
graph of this analysis find the file

158
00:05:03,240 --> 00:05:04,979
methods and then do a backwards data

159
00:05:04,979 --> 00:05:06,479
flow analysis to resolve what are the

160
00:05:06,479 --> 00:05:08,699
strings and so conceptually simple but

161
00:05:08,699 --> 00:05:10,620
anyone who's actually written these

162
00:05:10,620 --> 00:05:11,820
tools is that when you actually try to

163
00:05:11,820 --> 00:05:13,560
do this it's significantly more

164
00:05:13,560 --> 00:05:15,720
difficult to accomplish the first thing

165
00:05:15,720 --> 00:05:17,639
we found was what do we actually want to

166
00:05:17,639 --> 00:05:19,800
use as those file methods and so you

167
00:05:19,800 --> 00:05:20,940
might think well there's these clearly

168
00:05:20,940 --> 00:05:23,639
defined jni interfaces for for accessing

169
00:05:23,639 --> 00:05:25,080
files and these are the things that I

170
00:05:25,080 --> 00:05:26,880
annotated you know a decade ago with

171
00:05:26,880 --> 00:05:28,919
obtained to it but we found is if you do

172
00:05:28,919 --> 00:05:30,300
your backwards data flow analysis from

173
00:05:30,300 --> 00:05:33,180
those you lose a lot of precision in in

174
00:05:33,180 --> 00:05:34,500
deriving the strings there's a lot of

175
00:05:34,500 --> 00:05:35,940
interesting control flow and

176
00:05:35,940 --> 00:05:38,520
abstractions that happen or or various

177
00:05:38,520 --> 00:05:39,960
extra strings might come in what you

178
00:05:39,960 --> 00:05:41,699
really want to have is inside of the

179
00:05:41,699 --> 00:05:42,900
system service you want the instruction

180
00:05:42,900 --> 00:05:45,479
call it's calling a file method and so

181
00:05:45,479 --> 00:05:47,460
these jni methods have there's Java

182
00:05:47,460 --> 00:05:48,660
wrappers around those on top of those

183
00:05:48,660 --> 00:05:50,100
are Android wrappers and so we want to

184
00:05:50,100 --> 00:05:51,419
identify what is the highest level

185
00:05:51,419 --> 00:05:53,280
semantics of file method that we can

186
00:05:53,280 --> 00:05:54,780
then do that backwards data flow

187
00:05:54,780 --> 00:05:56,940
analysis from so we did a semi-automated

188
00:05:56,940 --> 00:05:59,340
approach a sort of snowball out to to

189
00:05:59,340 --> 00:06:01,680
those methods starting from the 360 gnm

190
00:06:01,680 --> 00:06:04,259
methods out to over 2000 of these

191
00:06:04,259 --> 00:06:06,000
The Next Step was figuring out what are

192
00:06:06,000 --> 00:06:08,100
those what are those strings and so we

193
00:06:08,100 --> 00:06:10,620
created a intermediate representation to

194
00:06:10,620 --> 00:06:12,240
capture the ways in which these strings

195
00:06:12,240 --> 00:06:13,560
were combined and constructed together

196
00:06:13,560 --> 00:06:15,120
something that was really important here

197
00:06:15,120 --> 00:06:17,039
was the environment variables and system

198
00:06:17,039 --> 00:06:18,960
variables that we could we could figure

199
00:06:18,960 --> 00:06:21,240
out what the key is to do that lookup

200
00:06:21,240 --> 00:06:22,860
but we couldn't resolve the whole path

201
00:06:22,860 --> 00:06:24,120
as part of the program analysis so we

202
00:06:24,120 --> 00:06:25,380
were going to be able to post process

203
00:06:25,380 --> 00:06:27,360
and combine this together

204
00:06:27,360 --> 00:06:29,759
we also did this analysis in in the

205
00:06:29,759 --> 00:06:31,560
native code we didn't have to go to the

206
00:06:31,560 --> 00:06:33,780
intermediate representation uh in the in

207
00:06:33,780 --> 00:06:35,580
the native code which we did with anger

208
00:06:35,580 --> 00:06:37,979
right just propagating the strings and

209
00:06:37,979 --> 00:06:39,539
gave us those values it was much less

210
00:06:39,539 --> 00:06:41,880
complex in that space ultimately what we

211
00:06:41,880 --> 00:06:43,919
did was derive regular expressions from

212
00:06:43,919 --> 00:06:46,919
this that could match against files

213
00:06:46,919 --> 00:06:48,900
so we took these regular expressions and

214
00:06:48,900 --> 00:06:50,580
we took files off of a real device and

215
00:06:50,580 --> 00:06:52,080
then we took the access control policy

216
00:06:52,080 --> 00:06:53,819
from those files and said these are the

217
00:06:53,819 --> 00:06:55,139
ones that are sensitive they're owned by

218
00:06:55,139 --> 00:06:56,520
System they should only be written or

219
00:06:56,520 --> 00:06:58,460
written right or written by by System

220
00:06:58,460 --> 00:07:00,840
processes match those up got our

221
00:07:00,840 --> 00:07:02,400
sensitive files took the access control

222
00:07:02,400 --> 00:07:04,860
check semantics that we had from AC

223
00:07:04,860 --> 00:07:06,419
minor and compared that and did that

224
00:07:06,419 --> 00:07:08,039
redelegation analysis and said okay

225
00:07:08,039 --> 00:07:09,240
there's some redelegation that's

226
00:07:09,240 --> 00:07:10,020
happening

227
00:07:10,020 --> 00:07:14,039
remember uh so two things here one is we

228
00:07:14,039 --> 00:07:15,900
needed to get files from a real device

229
00:07:15,900 --> 00:07:17,639
because many of the files of Interest

230
00:07:17,639 --> 00:07:19,440
were in slash data and so tools like Big

231
00:07:19,440 --> 00:07:21,060
Mac that can derive files from an

232
00:07:21,060 --> 00:07:22,800
Android system image they're getting

233
00:07:22,800 --> 00:07:24,780
from other places but not the stuff in

234
00:07:24,780 --> 00:07:26,460
slash data you need to boot the phone up

235
00:07:26,460 --> 00:07:28,680
to get to those files and the other

236
00:07:28,680 --> 00:07:30,539
thing was that remember that these

237
00:07:30,539 --> 00:07:32,639
deputies they're not inherently bad we

238
00:07:32,639 --> 00:07:34,560
need to refine them down

239
00:07:34,560 --> 00:07:36,780
so we study three different firmers uh

240
00:07:36,780 --> 00:07:38,520
we actually started with AOSP nine and

241
00:07:38,520 --> 00:07:39,960
then over the course of the project how

242
00:07:39,960 --> 00:07:42,419
to Port it to AOSP 10. uh that process

243
00:07:42,419 --> 00:07:44,340
took a matter of hours to redo some of

244
00:07:44,340 --> 00:07:46,199
the manual parts of finding those those

245
00:07:46,199 --> 00:07:48,060
file methods and you can see a lot of

246
00:07:48,060 --> 00:07:49,860
details here in this a lot more details

247
00:07:49,860 --> 00:07:51,780
in in the paper describing this some

248
00:07:51,780 --> 00:07:53,759
things to note here as you'd expect AOSP

249
00:07:53,759 --> 00:07:55,680
and Google were very similar in terms of

250
00:07:55,680 --> 00:07:58,259
of the counts of these Samsung added a

251
00:07:58,259 --> 00:07:59,699
bunch of code interestingly the number

252
00:07:59,699 --> 00:08:01,740
of file methods stayed about the same

253
00:08:01,740 --> 00:08:03,300
both across different versions and

254
00:08:03,300 --> 00:08:05,520
across different devices we could also

255
00:08:05,520 --> 00:08:06,960
see that Samsung added a number of

256
00:08:06,960 --> 00:08:09,599
additional entry points that access and

257
00:08:09,599 --> 00:08:11,520
sort of access files

258
00:08:11,520 --> 00:08:12,840
we have a number of heuristics to kind

259
00:08:12,840 --> 00:08:15,060
of refine ourselves down uh details of

260
00:08:15,060 --> 00:08:16,319
course in the paper and that I can't go

261
00:08:16,319 --> 00:08:17,699
through all of them now but we had down

262
00:08:17,699 --> 00:08:19,500
to around 23 that we actually needed to

263
00:08:19,500 --> 00:08:21,539
manually inspect and dive in so sort of

264
00:08:21,539 --> 00:08:23,099
confirming the hypothesis that that I

265
00:08:23,099 --> 00:08:24,780
mentioned earlier

266
00:08:24,780 --> 00:08:25,979
so

267
00:08:25,979 --> 00:08:29,660
um doing this doing this analysis uh we

268
00:08:29,660 --> 00:08:32,640
uh went and inspect these and so when we

269
00:08:32,640 --> 00:08:34,320
did this it's a little little note on

270
00:08:34,320 --> 00:08:37,440
the on the refining down so we would do

271
00:08:37,440 --> 00:08:38,820
we look at those and say that's a

272
00:08:38,820 --> 00:08:40,260
general pattern okay we programmatically

273
00:08:40,260 --> 00:08:42,000
remove that and sort of remove swaths of

274
00:08:42,000 --> 00:08:44,760
these we came down to eventually 12

275
00:08:44,760 --> 00:08:46,500
different cases that we thought were

276
00:08:46,500 --> 00:08:48,240
vulnerabilities of which we received

277
00:08:48,240 --> 00:08:51,060
cves for five of them and so you can see

278
00:08:51,060 --> 00:08:52,860
they range from data manipulation to

279
00:08:52,860 --> 00:08:55,500
data leaks to develop services

280
00:08:55,500 --> 00:08:57,360
uh one of the the interesting ones at

281
00:08:57,360 --> 00:08:58,860
the bottom of these Samsung ones these

282
00:08:58,860 --> 00:09:00,360
were actually the only case that we

283
00:09:00,360 --> 00:09:02,100
found anything in native code we

284
00:09:02,100 --> 00:09:03,660
originally hypothesized we really need

285
00:09:03,660 --> 00:09:04,740
this native code analysis because

286
00:09:04,740 --> 00:09:05,940
there's gonna be all of this interesting

287
00:09:05,940 --> 00:09:07,860
you know file manipulation happening and

288
00:09:07,860 --> 00:09:09,300
it turned out at least in the jni code

289
00:09:09,300 --> 00:09:11,100
that that wasn't the case

290
00:09:11,100 --> 00:09:12,899
this was a binary we couldn't reverse

291
00:09:12,899 --> 00:09:14,100
engineer really well but we could look

292
00:09:14,100 --> 00:09:15,720
at the Java portions and say they're

293
00:09:15,720 --> 00:09:17,100
based on the access control checks and

294
00:09:17,100 --> 00:09:19,620
base of a named blockchain TZ service

295
00:09:19,620 --> 00:09:21,420
blockchain trust Zone service that seems

296
00:09:21,420 --> 00:09:23,160
kind of interesting and so we sent our

297
00:09:23,160 --> 00:09:25,260
suspicions off to Samsung and they

298
00:09:25,260 --> 00:09:26,720
confirmed it was indeed a vulnerability

299
00:09:26,720 --> 00:09:28,860
also noting all of these ones that say

300
00:09:28,860 --> 00:09:30,600
AOSP we also saw those same

301
00:09:30,600 --> 00:09:32,339
vulnerabilities in the Google and the

302
00:09:32,339 --> 00:09:33,779
Samsung firmers

303
00:09:33,779 --> 00:09:35,880
so uh just to show you a little more

304
00:09:35,880 --> 00:09:37,260
detail here

305
00:09:37,260 --> 00:09:39,779
so this is the first cve that I

306
00:09:39,779 --> 00:09:41,940
mentioned so this is the remove shared

307
00:09:41,940 --> 00:09:44,940
account user as user entry point in the

308
00:09:44,940 --> 00:09:46,260
account manager service and here an

309
00:09:46,260 --> 00:09:48,899
account is Facebook or Twitter or Google

310
00:09:48,899 --> 00:09:51,300
account and you can see that in this

311
00:09:51,300 --> 00:09:53,640
entry point there is indirectly this

312
00:09:53,640 --> 00:09:56,459
access to this sqlite database file and

313
00:09:56,459 --> 00:09:57,420
you can see here there's some

314
00:09:57,420 --> 00:09:59,940
abstraction that's happening right so uh

315
00:09:59,940 --> 00:10:04,440
there the ACs accounts DB delete shared

316
00:10:04,440 --> 00:10:05,640
account right

317
00:10:05,640 --> 00:10:07,560
going from there all the way down to

318
00:10:07,560 --> 00:10:09,240
those actual jni methods that they're

319
00:10:09,240 --> 00:10:10,200
doing there's a lot of control flow

320
00:10:10,200 --> 00:10:11,640
analysis how to get you down to that but

321
00:10:11,640 --> 00:10:13,560
what we all need to do is inside of

322
00:10:13,560 --> 00:10:15,120
there figure out what was that string

323
00:10:15,120 --> 00:10:17,100
and trying to resolve that

324
00:10:17,100 --> 00:10:19,320
the regular expression for that path

325
00:10:19,320 --> 00:10:20,700
this is also a good example because it

326
00:10:20,700 --> 00:10:22,140
shows you like if you want to try to

327
00:10:22,140 --> 00:10:23,760
programmatically identify what is the

328
00:10:23,760 --> 00:10:26,220
bad redelegations that are happening

329
00:10:26,220 --> 00:10:28,140
um it's hard to do in this case it was

330
00:10:28,140 --> 00:10:30,540
missing a call to is account managed by

331
00:10:30,540 --> 00:10:32,220
caller right which is really

332
00:10:32,220 --> 00:10:35,100
semantically associated with that

333
00:10:35,100 --> 00:10:37,019
specific surface right that's the safety

334
00:10:37,019 --> 00:10:38,700
check that this was going to do and the

335
00:10:38,700 --> 00:10:40,980
flaw here was that any application could

336
00:10:40,980 --> 00:10:42,660
go and manipulate the account

337
00:10:42,660 --> 00:10:44,760
information for some other account so

338
00:10:44,760 --> 00:10:46,440
Facebook could go and manipulate the

339
00:10:46,440 --> 00:10:48,540
Twitter for example and so this was a

340
00:10:48,540 --> 00:10:50,100
subtle flaw that you can identify by

341
00:10:50,100 --> 00:10:52,800
honing in on these

342
00:10:52,800 --> 00:10:55,620
um just a high level overview uh

343
00:10:55,620 --> 00:10:57,420
limitations of things you might expect I

344
00:10:57,420 --> 00:10:59,700
I mentioned the the stuff in slash data

345
00:10:59,700 --> 00:11:01,980
uh you know we need a real device in

346
00:11:01,980 --> 00:11:03,959
order to get that that information

347
00:11:03,959 --> 00:11:06,060
um we're focused primarily on the Java

348
00:11:06,060 --> 00:11:07,800
system Services we didn't look at the

349
00:11:07,800 --> 00:11:09,720
the native system Services

350
00:11:09,720 --> 00:11:11,399
um we also were looking at the ones that

351
00:11:11,399 --> 00:11:13,260
were directly called and I think there's

352
00:11:13,260 --> 00:11:14,519
a little bit of fruit on the tree here

353
00:11:14,519 --> 00:11:17,339
if you think about how you call a binder

354
00:11:17,339 --> 00:11:18,660
interface and it returns a handle and

355
00:11:18,660 --> 00:11:19,860
that has other ones we didn't sort of

356
00:11:19,860 --> 00:11:21,180
dive down into those so I think it could

357
00:11:21,180 --> 00:11:23,519
be extended into those as well and of

358
00:11:23,519 --> 00:11:24,959
course all the limitations you'd expect

359
00:11:24,959 --> 00:11:27,420
from uh you know building on top of

360
00:11:27,420 --> 00:11:28,980
static analysis Tools in terms of the

361
00:11:28,980 --> 00:11:30,500
Precision we did go into the native code

362
00:11:30,500 --> 00:11:32,760
but there's all other sorts of

363
00:11:32,760 --> 00:11:34,740
limitations and limitations with AC

364
00:11:34,740 --> 00:11:36,000
minor as well

365
00:11:36,000 --> 00:11:37,500
so

366
00:11:37,500 --> 00:11:39,540
um I'd like to thank you for listening

367
00:11:39,540 --> 00:11:40,920
to my talk we've got our source code

368
00:11:40,920 --> 00:11:43,440
online and be happy to answer any

369
00:11:43,440 --> 00:11:46,640
questions great

