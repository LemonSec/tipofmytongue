1
00:00:07,519 --> 00:00:10,440
all right hi everyone I'm Kevin I'm from

2
00:00:10,440 --> 00:00:12,360
UC Santa Barbara and I'm here to talk

3
00:00:12,360 --> 00:00:13,679
about a system we made we call it

4
00:00:13,679 --> 00:00:16,199
decomperson and it's a method for

5
00:00:16,199 --> 00:00:18,060
studying what reverse Engineers are

6
00:00:18,060 --> 00:00:21,480
doing while they're reversing binaries

7
00:00:21,480 --> 00:00:23,760
so there are a bunch of reversing tools

8
00:00:23,760 --> 00:00:25,500
out there today most of them here's

9
00:00:25,500 --> 00:00:26,939
here's an example of four most of them

10
00:00:26,939 --> 00:00:29,400
end up incorporating some form of

11
00:00:29,400 --> 00:00:32,098
disassembler decompiler some way to

12
00:00:32,098 --> 00:00:34,200
provide to the user a more human

13
00:00:34,200 --> 00:00:36,899
readable form of whatever this binary is

14
00:00:36,899 --> 00:00:39,719
doing so there's Bunches of these and

15
00:00:39,719 --> 00:00:42,480
their decompilation is it's okay

16
00:00:42,480 --> 00:00:45,120
but it's no match for a well-trained

17
00:00:45,120 --> 00:00:46,920
human it's they're no match for someone

18
00:00:46,920 --> 00:00:48,780
for a human intellect that knows what

19
00:00:48,780 --> 00:00:49,800
it's doing

20
00:00:49,800 --> 00:00:52,920
so if we want to improve these to to

21
00:00:52,920 --> 00:00:54,960
bring them up to to get them better to

22
00:00:54,960 --> 00:00:56,280
make them more available to everyone

23
00:00:56,280 --> 00:00:57,899
because reverse is honestly they're kind

24
00:00:57,899 --> 00:00:59,219
of expensive

25
00:00:59,219 --> 00:01:01,440
we need to figure out what the good

26
00:01:01,440 --> 00:01:03,899
humans are doing what can we learn from

27
00:01:03,899 --> 00:01:05,220
what they're doing and how do we how do

28
00:01:05,220 --> 00:01:06,780
we translate that back and incorporate

29
00:01:06,780 --> 00:01:08,820
it into the tools that we've got

30
00:01:08,820 --> 00:01:12,240
so a traditional study on this would go

31
00:01:12,240 --> 00:01:13,920
out find some reverse Engineers bring

32
00:01:13,920 --> 00:01:15,360
them into the lab give them a task to

33
00:01:15,360 --> 00:01:17,340
work on and interview them while they

34
00:01:17,340 --> 00:01:19,320
were working on it or maybe afterwards

35
00:01:19,320 --> 00:01:21,000
because if you have the reverse engineer

36
00:01:21,000 --> 00:01:23,040
there you can just ask well hey why did

37
00:01:23,040 --> 00:01:25,740
you do blah or what were you thinking or

38
00:01:25,740 --> 00:01:27,780
even just talk to me while you work what

39
00:01:27,780 --> 00:01:29,520
do you just narrate what you're doing as

40
00:01:29,520 --> 00:01:31,080
you go along

41
00:01:31,080 --> 00:01:34,560
and that works great

42
00:01:34,560 --> 00:01:37,500
four ten reversers there may be 20

43
00:01:37,500 --> 00:01:39,360
reversers but as soon as you have to do

44
00:01:39,360 --> 00:01:41,579
interviews for everyone you end up using

45
00:01:41,579 --> 00:01:43,439
a lot of time collecting your data so

46
00:01:43,439 --> 00:01:44,700
what if you want to do a study that has

47
00:01:44,700 --> 00:01:46,439
200 reversers what do you want what if

48
00:01:46,439 --> 00:01:48,600
you want 2 000 reversers you're not

49
00:01:48,600 --> 00:01:50,040
you're not going to do interviews

50
00:01:50,040 --> 00:01:52,140
anymore not not if you want to scale

51
00:01:52,140 --> 00:01:54,420
nobody has that many interns

52
00:01:54,420 --> 00:01:55,560
so

53
00:01:55,560 --> 00:01:57,600
instead we wanted to come up with a

54
00:01:57,600 --> 00:01:59,220
system that would let us do this faster

55
00:01:59,220 --> 00:02:01,619
some way to follow hey what are these

56
00:02:01,619 --> 00:02:03,659
guys thinking and some way we can follow

57
00:02:03,659 --> 00:02:05,159
that automatically because once you're

58
00:02:05,159 --> 00:02:06,600
talking that many participants you

59
00:02:06,600 --> 00:02:08,220
really need some way to script it and

60
00:02:08,220 --> 00:02:10,679
the key Insight here is that a lot of

61
00:02:10,679 --> 00:02:11,819
the work that you do in the interview

62
00:02:11,819 --> 00:02:14,640
process is is translation work so you

63
00:02:14,640 --> 00:02:16,800
have a reverser and the reverse has got

64
00:02:16,800 --> 00:02:18,420
a binary and the reversal has some idea

65
00:02:18,420 --> 00:02:21,420
of what this binary is doing and that

66
00:02:21,420 --> 00:02:23,640
internal representation is probably

67
00:02:23,640 --> 00:02:24,959
something like source code because

68
00:02:24,959 --> 00:02:27,180
reverse there's a programmers but then

69
00:02:27,180 --> 00:02:29,160
you translate it into English or Spanish

70
00:02:29,160 --> 00:02:30,780
or whatever to communicate with the

71
00:02:30,780 --> 00:02:32,459
interviewer and then the interviewer

72
00:02:32,459 --> 00:02:34,020
takes the interview and translates that

73
00:02:34,020 --> 00:02:36,060
into whatever data points are being used

74
00:02:36,060 --> 00:02:38,280
for for the study so there are all these

75
00:02:38,280 --> 00:02:41,400
translation steps but but all that you

76
00:02:41,400 --> 00:02:42,660
really wanted out at the end of it was

77
00:02:42,660 --> 00:02:44,580
some format that you could operate on

78
00:02:44,580 --> 00:02:45,900
automatically something you could dump

79
00:02:45,900 --> 00:02:47,580
into your statistical software something

80
00:02:47,580 --> 00:02:50,160
something machine friendly and you know

81
00:02:50,160 --> 00:02:51,360
that that

82
00:02:51,360 --> 00:02:53,160
pseudo source code that's in the

83
00:02:53,160 --> 00:02:54,780
reverser's head in the very beginning is

84
00:02:54,780 --> 00:02:57,000
basically meets all those criteria just

85
00:02:57,000 --> 00:02:58,440
ask for source code so that's what we

86
00:02:58,440 --> 00:03:00,540
did is we said hey

87
00:03:00,540 --> 00:03:02,340
let's say that the reversing the

88
00:03:02,340 --> 00:03:04,200
reversing problem is actually a

89
00:03:04,200 --> 00:03:06,360
decompilation problem and we want

90
00:03:06,360 --> 00:03:07,920
reversers to tell us what they're

91
00:03:07,920 --> 00:03:10,440
thinking by giving us source code and

92
00:03:10,440 --> 00:03:11,879
then once we have source code if we can

93
00:03:11,879 --> 00:03:13,800
get snapshots frequently enough you can

94
00:03:13,800 --> 00:03:16,019
follow the reversing process simply by

95
00:03:16,019 --> 00:03:18,180
looking at diffs you have here's a

96
00:03:18,180 --> 00:03:19,560
hundred here's a hundred source code

97
00:03:19,560 --> 00:03:20,879
snapshots you can kind of figure out

98
00:03:20,879 --> 00:03:22,680
what your reverser was doing by okay

99
00:03:22,680 --> 00:03:24,239
well what did she change here what did

100
00:03:24,239 --> 00:03:25,440
she change here and you can follow it

101
00:03:25,440 --> 00:03:26,580
that way

102
00:03:26,580 --> 00:03:29,099
and then we go a little bit farther and

103
00:03:29,099 --> 00:03:31,200
we say that you know what

104
00:03:31,200 --> 00:03:34,260
you can actually measure how well the

105
00:03:34,260 --> 00:03:36,780
reverser understands the function she's

106
00:03:36,780 --> 00:03:39,060
working on by the quality of the code

107
00:03:39,060 --> 00:03:40,560
match and because you don't have source

108
00:03:40,560 --> 00:03:42,360
code for the Target binary because it's

109
00:03:42,360 --> 00:03:44,940
a rear facing project process

110
00:03:44,940 --> 00:03:47,280
instead we use assembly code

111
00:03:47,280 --> 00:03:49,260
so we collect source code from the

112
00:03:49,260 --> 00:03:51,000
reversers and turn it into assembly and

113
00:03:51,000 --> 00:03:52,080
then we have the assembly for the

114
00:03:52,080 --> 00:03:53,519
original binary and we see how well they

115
00:03:53,519 --> 00:03:56,840
match and we use that percentage match

116
00:03:56,840 --> 00:03:59,879
as a proxy for understanding how well

117
00:03:59,879 --> 00:04:01,500
does the does the reverser understand

118
00:04:01,500 --> 00:04:03,720
this function well what percentage of

119
00:04:03,720 --> 00:04:05,519
the assembly code match and we we go as

120
00:04:05,519 --> 00:04:07,260
far as to say that a reverser who

121
00:04:07,260 --> 00:04:09,299
understands a function perfectly will be

122
00:04:09,299 --> 00:04:10,620
able to give a source code that

123
00:04:10,620 --> 00:04:13,760
recreates the binary exactly

124
00:04:13,760 --> 00:04:18,238
and that's kind of a big claim so we

125
00:04:18,238 --> 00:04:19,918
will we will be working through that and

126
00:04:19,918 --> 00:04:21,959
and justifying it later but here's a

127
00:04:21,959 --> 00:04:23,820
here's an overview of the process we use

128
00:04:23,820 --> 00:04:25,680
for this comparison uh you've got your

129
00:04:25,680 --> 00:04:27,960
target binary on the left here

130
00:04:27,960 --> 00:04:30,540
um the top flow is is simply how to

131
00:04:30,540 --> 00:04:31,740
generate the target assembly you just

132
00:04:31,740 --> 00:04:33,720
run it through a disassembler ideally

133
00:04:33,720 --> 00:04:36,479
one that's been tweaked to remove weird

134
00:04:36,479 --> 00:04:38,400
artifacts that depend on say where your

135
00:04:38,400 --> 00:04:40,160
function is in the binary

136
00:04:40,160 --> 00:04:42,900
meanwhile down below the dark arrow is

137
00:04:42,900 --> 00:04:44,880
what your reverser is doing dark the

138
00:04:44,880 --> 00:04:46,259
reverser takes the binary gives you

139
00:04:46,259 --> 00:04:48,180
source code you take your source code

140
00:04:48,180 --> 00:04:49,919
dump it in compiler you take the

141
00:04:49,919 --> 00:04:51,600
resulting binary you dump it in the same

142
00:04:51,600 --> 00:04:53,639
disassembler and now you have two sets

143
00:04:53,639 --> 00:04:56,400
of assembly you diff it and that's it

144
00:04:56,400 --> 00:04:58,620
ideally you're going to get 100 the

145
00:04:58,620 --> 00:05:00,419
reversary understood perfectly and was

146
00:05:00,419 --> 00:05:03,360
able to recreate the function

147
00:05:03,360 --> 00:05:05,340
obviously this is a bit of an extreme

148
00:05:05,340 --> 00:05:08,220
claim so we need to we need to justify

149
00:05:08,220 --> 00:05:10,199
our arguments we need to show that this

150
00:05:10,199 --> 00:05:12,060
is actually doable so first of all can

151
00:05:12,060 --> 00:05:15,300
can humans even do this and then if they

152
00:05:15,300 --> 00:05:17,580
can do it well how do they do it and

153
00:05:17,580 --> 00:05:19,740
then finally because we want to use this

154
00:05:19,740 --> 00:05:21,660
as a method to measure the reversing

155
00:05:21,660 --> 00:05:23,100
process we have to we have to be able to

156
00:05:23,100 --> 00:05:24,840
justify hey this thing we're asking them

157
00:05:24,840 --> 00:05:26,940
to do which is not a normal reversing

158
00:05:26,940 --> 00:05:29,520
task is still representative of a

159
00:05:29,520 --> 00:05:31,080
traditional reversing task something

160
00:05:31,080 --> 00:05:32,400
that would they would do in their

161
00:05:32,400 --> 00:05:34,199
regular jobs

162
00:05:34,199 --> 00:05:37,560
so in order to in order to check this we

163
00:05:37,560 --> 00:05:40,880
ran an online CTF

164
00:05:41,220 --> 00:05:43,259
um this is the web interface we wrote

165
00:05:43,259 --> 00:05:45,479
for it uh we asked everyone to use it

166
00:05:45,479 --> 00:05:46,800
they didn't have to

167
00:05:46,800 --> 00:05:49,440
um on the left here is completely

168
00:05:49,440 --> 00:05:51,300
editable source code the reverser can do

169
00:05:51,300 --> 00:05:55,080
whatever they want on that panel once

170
00:05:55,080 --> 00:05:58,020
they have a function snippet that they

171
00:05:58,020 --> 00:05:59,759
think is is decent or just want to say

172
00:05:59,759 --> 00:06:01,139
hey how close is this they hit the

173
00:06:01,139 --> 00:06:03,000
compile button at the bottom it gets

174
00:06:03,000 --> 00:06:05,460
shut off to our server within two

175
00:06:05,460 --> 00:06:07,620
seconds we've compiled disassembled

176
00:06:07,620 --> 00:06:09,539
tested Etc diff and we send the diff

177
00:06:09,539 --> 00:06:11,340
back and then that shows up on the right

178
00:06:11,340 --> 00:06:12,900
and you can see the highlighting is

179
00:06:12,900 --> 00:06:14,100
highlighting the differences this is

180
00:06:14,100 --> 00:06:15,600
actually a pretty close to a final

181
00:06:15,600 --> 00:06:18,479
solution on this challenge

182
00:06:18,479 --> 00:06:20,280
and then they can do this as many times

183
00:06:20,280 --> 00:06:22,259
as they need to to get perfect

184
00:06:22,259 --> 00:06:24,240
decompilation

185
00:06:24,240 --> 00:06:25,319
now

186
00:06:25,319 --> 00:06:28,020
they needed something to reverse so we

187
00:06:28,020 --> 00:06:29,819
wrote a bunch of challenge binaries

188
00:06:29,819 --> 00:06:31,560
there are 23 of them in five different

189
00:06:31,560 --> 00:06:33,539
languages they were short we aimed for

190
00:06:33,539 --> 00:06:36,060
like 150 lines at most

191
00:06:36,060 --> 00:06:38,280
um but we did ask them to reverse every

192
00:06:38,280 --> 00:06:40,319
single user written function in those

193
00:06:40,319 --> 00:06:41,819
binaries

194
00:06:41,819 --> 00:06:43,919
and for scoring we gave each challenge a

195
00:06:43,919 --> 00:06:45,660
point value based on how much how hard

196
00:06:45,660 --> 00:06:47,280
we thought it would be kind of we just

197
00:06:47,280 --> 00:06:48,360
guessed

198
00:06:48,360 --> 00:06:50,460
um 20 of those points were available by

199
00:06:50,460 --> 00:06:53,340
passing secret test cases unit tests the

200
00:06:53,340 --> 00:06:55,199
majority of the store score came from

201
00:06:55,199 --> 00:06:56,460
the assembly diff that I was talking

202
00:06:56,460 --> 00:06:57,960
about earlier and then finally to

203
00:06:57,960 --> 00:06:59,580
encourage people to generate perfect

204
00:06:59,580 --> 00:07:01,380
disassembly we really wanted to see if

205
00:07:01,380 --> 00:07:03,060
people could do it so the final 20

206
00:07:03,060 --> 00:07:06,600
points were just a bonus a bonus 20 for

207
00:07:06,600 --> 00:07:09,600
being able to generate a perfect match

208
00:07:09,600 --> 00:07:13,860
uh almost 200 people played uh and they

209
00:07:13,860 --> 00:07:16,440
were organized into about 140 teams you

210
00:07:16,440 --> 00:07:18,600
can see the distribution of of people

211
00:07:18,600 --> 00:07:20,940
and years of experience it was it leaned

212
00:07:20,940 --> 00:07:22,740
a bit heavier to hobbyists and students

213
00:07:22,740 --> 00:07:25,139
and people with less experience but

214
00:07:25,139 --> 00:07:27,300
um the submissions we got were more

215
00:07:27,300 --> 00:07:29,099
balanced because experts solved more

216
00:07:29,099 --> 00:07:30,780
challenges and made more submissions and

217
00:07:30,780 --> 00:07:35,039
we got over 35 000 code submissions

218
00:07:35,039 --> 00:07:37,620
and then we plugged it into our data

219
00:07:37,620 --> 00:07:39,720
analysis and first question can people

220
00:07:39,720 --> 00:07:43,259
do it yes they can absolutely we got 329

221
00:07:43,259 --> 00:07:46,380
perfect submissions across um 22 of the

222
00:07:46,380 --> 00:07:48,120
23 challenges there was one that was not

223
00:07:48,120 --> 00:07:50,520
solved but they came very close

224
00:07:50,520 --> 00:07:52,319
um about half of the users or about half

225
00:07:52,319 --> 00:07:54,180
of the teams were all able to generate

226
00:07:54,180 --> 00:07:55,800
perfect decompilation on at least one

227
00:07:55,800 --> 00:07:57,360
challenge

228
00:07:57,360 --> 00:07:59,099
and because we were collecting these uh

229
00:07:59,099 --> 00:08:01,740
source code snapshots we could look at

230
00:08:01,740 --> 00:08:03,120
the diffs and figure out hey what's

231
00:08:03,120 --> 00:08:05,160
what's going on at any given time so the

232
00:08:05,160 --> 00:08:07,560
the top row of graphs is looking at the

233
00:08:07,560 --> 00:08:09,720
diff score for a variety of functions in

234
00:08:09,720 --> 00:08:11,099
in different challenges and you can kind

235
00:08:11,099 --> 00:08:12,360
of see what the reversals we're working

236
00:08:12,360 --> 00:08:14,280
on based on the score fluctuations when

237
00:08:14,280 --> 00:08:15,539
the score is changing that means they're

238
00:08:15,539 --> 00:08:17,520
focused on that function and down below

239
00:08:17,520 --> 00:08:19,620
is just a distribution over time of

240
00:08:19,620 --> 00:08:21,599
which functions are being touched both

241
00:08:21,599 --> 00:08:22,979
of them basically show the same thing

242
00:08:22,979 --> 00:08:24,360
which is that the reverses really like

243
00:08:24,360 --> 00:08:26,819
to work on one function at a time and

244
00:08:26,819 --> 00:08:28,319
then either they manage to get it up to

245
00:08:28,319 --> 00:08:30,599
perfect decompilation or they get stuck

246
00:08:30,599 --> 00:08:33,539
and they move on to something else

247
00:08:33,539 --> 00:08:36,659
and because we had all the uh the diffs

248
00:08:36,659 --> 00:08:39,360
we could locate the diffs in the source

249
00:08:39,360 --> 00:08:41,399
code and then match those locations up

250
00:08:41,399 --> 00:08:44,219
with a parse tree so we parse it compare

251
00:08:44,219 --> 00:08:46,320
the compare the diff locations to the

252
00:08:46,320 --> 00:08:47,700
node locations and we can figure out

253
00:08:47,700 --> 00:08:49,560
which types of syntax nodes are being

254
00:08:49,560 --> 00:08:51,899
touched so we could classify the edits

255
00:08:51,899 --> 00:08:54,120
even further this is a this is a

256
00:08:54,120 --> 00:08:55,320
function signature edit this is a

257
00:08:55,320 --> 00:08:57,180
control flow edit this is just some

258
00:08:57,180 --> 00:08:59,640
generic statement and so on so we were

259
00:08:59,640 --> 00:09:02,220
able to do that also more of an overview

260
00:09:02,220 --> 00:09:03,959
here is

261
00:09:03,959 --> 00:09:06,660
we observed three kind of General phases

262
00:09:06,660 --> 00:09:08,940
of reversing and the first one is when

263
00:09:08,940 --> 00:09:10,200
you're new to a binary you just kind of

264
00:09:10,200 --> 00:09:11,820
look around figure out what's going on

265
00:09:11,820 --> 00:09:14,339
in this case it corresponded with

266
00:09:14,339 --> 00:09:15,839
reversers stubbing out the functions

267
00:09:15,839 --> 00:09:17,399
that they needed

268
00:09:17,399 --> 00:09:19,380
um after that they decide what to focus

269
00:09:19,380 --> 00:09:21,360
on now this is more important in other

270
00:09:21,360 --> 00:09:23,040
reversing tasks so the first

271
00:09:23,040 --> 00:09:24,899
presentation had a great example on how

272
00:09:24,899 --> 00:09:26,580
the experts were able to focus right in

273
00:09:26,580 --> 00:09:28,800
on what they needed to do here because

274
00:09:28,800 --> 00:09:30,060
we asked them to reverse all the

275
00:09:30,060 --> 00:09:32,160
functions that they pick a function to

276
00:09:32,160 --> 00:09:33,240
start with but it doesn't really matter

277
00:09:33,240 --> 00:09:35,760
which one they pick and then finally the

278
00:09:35,760 --> 00:09:38,519
the third the third phase when they have

279
00:09:38,519 --> 00:09:40,500
a function they're they're nailed in on

280
00:09:40,500 --> 00:09:44,279
they just repeat Focus try this does it

281
00:09:44,279 --> 00:09:46,080
do this let me test it send it off to

282
00:09:46,080 --> 00:09:48,899
the server see it see it come back is

283
00:09:48,899 --> 00:09:50,459
this working and they will they'll keep

284
00:09:50,459 --> 00:09:52,320
testing all these little hypotheses they

285
00:09:52,320 --> 00:09:54,180
submitted about once every minute and a

286
00:09:54,180 --> 00:09:57,300
half on average and they would just keep

287
00:09:57,300 --> 00:09:58,980
making these hypotheses until they were

288
00:09:58,980 --> 00:10:00,839
able to get up to perfect decompulation

289
00:10:00,839 --> 00:10:02,160
so the fact that we're observing the

290
00:10:02,160 --> 00:10:04,980
same the same three phases have been

291
00:10:04,980 --> 00:10:07,260
observed all the way back to very early

292
00:10:07,260 --> 00:10:09,899
program comprehension research so the

293
00:10:09,899 --> 00:10:11,100
fact that we're seeing them is a good

294
00:10:11,100 --> 00:10:12,480
sign that what we're measuring is

295
00:10:12,480 --> 00:10:14,279
actually representative of traditional

296
00:10:14,279 --> 00:10:15,420
reversing

297
00:10:15,420 --> 00:10:17,580
and as as sort of a second sanity check

298
00:10:17,580 --> 00:10:19,380
on that um

299
00:10:19,380 --> 00:10:21,480
we took the diff scores for all of our

300
00:10:21,480 --> 00:10:23,279
functions and we compared it to the unit

301
00:10:23,279 --> 00:10:25,260
test scores for each of those functions

302
00:10:25,260 --> 00:10:26,880
and these were either the secret test

303
00:10:26,880 --> 00:10:28,320
cases

304
00:10:28,320 --> 00:10:30,300
um that were used for the competition or

305
00:10:30,300 --> 00:10:32,459
Leaf function tests that we wrote

306
00:10:32,459 --> 00:10:35,040
separately later and we found that in

307
00:10:35,040 --> 00:10:37,440
general they lined up pretty well the it

308
00:10:37,440 --> 00:10:38,760
wasn't a perfect correlation but it was

309
00:10:38,760 --> 00:10:39,720
a pretty it was a pretty good

310
00:10:39,720 --> 00:10:41,700
correlation you can see on the two left

311
00:10:41,700 --> 00:10:44,779
graphs here these worked out pretty well

312
00:10:44,779 --> 00:10:47,279
so you have unit tests passed on the

313
00:10:47,279 --> 00:10:48,779
bottom you have a distribution of disk

314
00:10:48,779 --> 00:10:52,140
diff score on the the y-axis it didn't

315
00:10:52,140 --> 00:10:54,240
always work on the far right you have a

316
00:10:54,240 --> 00:10:57,480
rest challenge where the reversers got

317
00:10:57,480 --> 00:10:58,920
all the unit tests passing pretty early

318
00:10:58,920 --> 00:11:00,779
and then spent a long time fighting

319
00:11:00,779 --> 00:11:02,399
fighting with the compiler trying to get

320
00:11:02,399 --> 00:11:04,680
it to to do what they wanted like the

321
00:11:04,680 --> 00:11:07,680
traditional rest experience

322
00:11:07,680 --> 00:11:09,600
um but overall

323
00:11:09,600 --> 00:11:11,820
the the scores tended to match up pretty

324
00:11:11,820 --> 00:11:13,079
well and we take that as an indication

325
00:11:13,079 --> 00:11:14,820
that yeah this is a this is a pretty

326
00:11:14,820 --> 00:11:16,500
good representation of the reversing

327
00:11:16,500 --> 00:11:18,660
process and also this is a rest

328
00:11:18,660 --> 00:11:20,459
Challenge and very few people are

329
00:11:20,459 --> 00:11:22,079
familiar with rust reversing so it may

330
00:11:22,079 --> 00:11:24,480
also just reflect a lack of experience

331
00:11:24,480 --> 00:11:28,079
across the board even the experts

332
00:11:28,079 --> 00:11:30,360
so to sum things up

333
00:11:30,360 --> 00:11:32,880
this is decompression uh we used it to

334
00:11:32,880 --> 00:11:34,740
run as far as we know the largest

335
00:11:34,740 --> 00:11:36,779
reverse engineering study to date we use

336
00:11:36,779 --> 00:11:39,240
this perfect decompilation as a measure

337
00:11:39,240 --> 00:11:42,000
of understanding of source code and

338
00:11:42,000 --> 00:11:43,320
because we were collecting source code

339
00:11:43,320 --> 00:11:44,579
submissions we were able to follow the

340
00:11:44,579 --> 00:11:45,560
entire reversing process

341
00:11:45,560 --> 00:11:47,579
programmatically all of our all of our

342
00:11:47,579 --> 00:11:50,339
analyzes were scripted if you're curious

343
00:11:50,339 --> 00:11:52,620
about the server code the challenges the

344
00:11:52,620 --> 00:11:54,540
data it's all available on GitHub check

345
00:11:54,540 --> 00:11:56,940
it out in fact the competition is still

346
00:11:56,940 --> 00:11:58,980
playable online so check that out too

347
00:11:58,980 --> 00:12:01,800
also if you played I suspect there are

348
00:12:01,800 --> 00:12:03,120
people in the audience who played so

349
00:12:03,120 --> 00:12:04,980
thank you very much and thanks for

350
00:12:04,980 --> 00:12:07,279
listening

