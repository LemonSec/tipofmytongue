1
00:00:08,240 --> 00:00:10,800
hello I'm going to talk about how to

2
00:00:10,800 --> 00:00:12,240
securely perform measurements on

3
00:00:12,240 --> 00:00:14,040
passwords submitted in login requests

4
00:00:14,040 --> 00:00:16,199
this is Joint work with my co-authors at

5
00:00:16,199 --> 00:00:17,520
Cornell and the University of

6
00:00:17,520 --> 00:00:19,800
Wisconsin-Madison

7
00:00:19,800 --> 00:00:21,900
modern authentication systems still

8
00:00:21,900 --> 00:00:24,300
mainly rely on password-based logins you

9
00:00:24,300 --> 00:00:25,800
probably log into your email bank

10
00:00:25,800 --> 00:00:27,720
account or social media account using a

11
00:00:27,720 --> 00:00:29,640
username and password and the login

12
00:00:29,640 --> 00:00:31,260
client sends those credentials to the

13
00:00:31,260 --> 00:00:32,460
server

14
00:00:32,460 --> 00:00:34,079
when the server receives the username

15
00:00:34,079 --> 00:00:36,180
and password it hashes the password and

16
00:00:36,180 --> 00:00:37,980
checks that the password hash matches

17
00:00:37,980 --> 00:00:39,180
the hash stored in the database

18
00:00:39,180 --> 00:00:41,579
corresponding to that username

19
00:00:41,579 --> 00:00:43,500
however users choose easy to guess

20
00:00:43,500 --> 00:00:45,600
passwords and reuse them across multiple

21
00:00:45,600 --> 00:00:47,940
web services therefore attackers can

22
00:00:47,940 --> 00:00:49,680
compromise user accounts just by

23
00:00:49,680 --> 00:00:51,480
guessing their passwords or using the

24
00:00:51,480 --> 00:00:53,640
password leaked from another web service

25
00:00:53,640 --> 00:00:55,680
this is called credential stuffing and

26
00:00:55,680 --> 00:00:56,820
it is a huge concern for account

27
00:00:56,820 --> 00:00:58,020
security

28
00:00:58,020 --> 00:01:00,239
so industry practitioners are trying to

29
00:01:00,239 --> 00:01:03,000
rely not only on passwords anymore

30
00:01:03,000 --> 00:01:05,760
but an open question is what information

31
00:01:05,760 --> 00:01:07,920
can be used to differentiate benign

32
00:01:07,920 --> 00:01:11,760
login attempts from malicious attacks

33
00:01:11,760 --> 00:01:13,680
in a study at LinkedIn Freeman all

34
00:01:13,680 --> 00:01:15,420
looked at using the IP address and user

35
00:01:15,420 --> 00:01:17,640
agent with some success

36
00:01:17,640 --> 00:01:19,740
in another study at Microsoft Tiana all

37
00:01:19,740 --> 00:01:22,680
suggested using password information and

38
00:01:22,680 --> 00:01:24,299
showed promising results on simulated

39
00:01:24,299 --> 00:01:25,320
data

40
00:01:25,320 --> 00:01:27,720
however the question remains how do we

41
00:01:27,720 --> 00:01:29,580
safely log information about actual

42
00:01:29,580 --> 00:01:33,540
passwords in real login data

43
00:01:33,540 --> 00:01:35,400
in this paper we designed a measurement

44
00:01:35,400 --> 00:01:37,200
framework that we call gossamer for

45
00:01:37,200 --> 00:01:38,700
measuring password derived information

46
00:01:38,700 --> 00:01:42,000
in web login systems this was a one and

47
00:01:42,000 --> 00:01:43,619
a half year long process in close

48
00:01:43,619 --> 00:01:44,880
collaboration with our University

49
00:01:44,880 --> 00:01:48,240
security engineers

50
00:01:48,240 --> 00:01:50,100
we also describe a process for assessing

51
00:01:50,100 --> 00:01:52,140
the risk of individual password-based

52
00:01:52,140 --> 00:01:55,079
measurements via a simulation

53
00:01:55,079 --> 00:01:56,820
and finally we conduct a measurement

54
00:01:56,820 --> 00:01:59,460
study at the two universities on over 34

55
00:01:59,460 --> 00:02:01,799
million login requests and we report our

56
00:02:01,799 --> 00:02:03,299
findings on Lock and user Behavior

57
00:02:03,299 --> 00:02:06,380
regarding passwords

58
00:02:06,840 --> 00:02:09,060
at both universities when a student or

59
00:02:09,060 --> 00:02:10,619
employee tries to log into their email

60
00:02:10,619 --> 00:02:12,720
Bursar or other school related account

61
00:02:12,720 --> 00:02:14,700
they do so through a single sign-on

62
00:02:14,700 --> 00:02:16,620
service that processes their login

63
00:02:16,620 --> 00:02:18,540
request after receiving their username

64
00:02:18,540 --> 00:02:19,620
and password

65
00:02:19,620 --> 00:02:21,959
thus in order to observe passwords we

66
00:02:21,959 --> 00:02:24,540
need to instrument this SSO server

67
00:02:24,540 --> 00:02:26,340
however we Face a few challenges in

68
00:02:26,340 --> 00:02:27,360
doing so

69
00:02:27,360 --> 00:02:29,760
this service affects a lot of people we

70
00:02:29,760 --> 00:02:31,200
don't want to affect the performance of

71
00:02:31,200 --> 00:02:33,180
the system and passwords are very

72
00:02:33,180 --> 00:02:34,980
sensitive so we can't destroy them on

73
00:02:34,980 --> 00:02:36,360
desk

74
00:02:36,360 --> 00:02:38,220
prior work looks at the password hash

75
00:02:38,220 --> 00:02:40,379
and Compares it to other submissions

76
00:02:40,379 --> 00:02:41,580
but this doesn't allow us to get

77
00:02:41,580 --> 00:02:43,500
insights into other characteristics of

78
00:02:43,500 --> 00:02:45,900
the submitted password

79
00:02:45,900 --> 00:02:47,400
so how can we design a measurement

80
00:02:47,400 --> 00:02:49,019
service that measures information about

81
00:02:49,019 --> 00:02:50,940
passwords without compromising the

82
00:02:50,940 --> 00:02:52,739
security or performance of the login

83
00:02:52,739 --> 00:02:54,959
server

84
00:02:54,959 --> 00:02:57,120
we start with a VM that receives the

85
00:02:57,120 --> 00:02:58,920
sanitized login request from the SSO

86
00:02:58,920 --> 00:03:01,019
service including the username password

87
00:03:01,019 --> 00:03:02,760
and headers

88
00:03:02,760 --> 00:03:04,920
we adopt the safe on reboot principle

89
00:03:04,920 --> 00:03:07,620
introduced in Bunker by Michael sadal by

90
00:03:07,620 --> 00:03:09,360
ensuring that passwords are never stored

91
00:03:09,360 --> 00:03:11,519
in plain text on disk so rebooting will

92
00:03:11,519 --> 00:03:14,879
clear all sensitive data

93
00:03:14,879 --> 00:03:16,500
in order to compare password derived

94
00:03:16,500 --> 00:03:18,599
information across multiple requests we

95
00:03:18,599 --> 00:03:21,000
need some form of temporary storage

96
00:03:21,000 --> 00:03:23,640
for this we use an ephemeral mySQL

97
00:03:23,640 --> 00:03:25,500
database and we encrypt the fields

98
00:03:25,500 --> 00:03:27,060
stored in this database with an

99
00:03:27,060 --> 00:03:28,980
in-memory key that expires every 24

100
00:03:28,980 --> 00:03:30,180
hours

101
00:03:30,180 --> 00:03:32,459
by doing this we achieve periodic

102
00:03:32,459 --> 00:03:34,440
deletion which is the second of our

103
00:03:34,440 --> 00:03:37,159
design principles

104
00:03:37,260 --> 00:03:39,000
we then record the password derived

105
00:03:39,000 --> 00:03:40,680
measurements taken on the ephemeral data

106
00:03:40,680 --> 00:03:42,420
to a persistent database which is

107
00:03:42,420 --> 00:03:44,220
accessible to the researchers

108
00:03:44,220 --> 00:03:46,319
and we use an analysis service to

109
00:03:46,319 --> 00:03:48,360
perform further analysis

110
00:03:48,360 --> 00:03:50,040
we restrict access to the measurement

111
00:03:50,040 --> 00:03:51,900
service in a thermal database to a

112
00:03:51,900 --> 00:03:53,640
subset of researchers responsible for

113
00:03:53,640 --> 00:03:55,200
maintaining the service

114
00:03:55,200 --> 00:03:57,360
and thus we achieve least privileged

115
00:03:57,360 --> 00:04:00,780
access our third design principle

116
00:04:00,780 --> 00:04:02,940
however in the unlikely event of a

117
00:04:02,940 --> 00:04:04,620
compromise it's important that the

118
00:04:04,620 --> 00:04:06,360
measurements thought not reveal too much

119
00:04:06,360 --> 00:04:08,580
information about users actual passwords

120
00:04:08,580 --> 00:04:10,260
because the attacker could use these

121
00:04:10,260 --> 00:04:11,519
measurements to speed up a guessing

122
00:04:11,519 --> 00:04:13,640
attack

123
00:04:13,680 --> 00:04:16,199
so if compromised how could attackers

124
00:04:16,199 --> 00:04:17,639
use password derived measurements to

125
00:04:17,639 --> 00:04:19,320
speed up attacks

126
00:04:19,320 --> 00:04:20,940
if the attacker gains long-term access

127
00:04:20,940 --> 00:04:22,260
to the measurement service it is

128
00:04:22,260 --> 00:04:23,699
equivalent to compromising the SSO

129
00:04:23,699 --> 00:04:25,680
service itself where the attacker can

130
00:04:25,680 --> 00:04:28,020
monitor the passwords as users log in

131
00:04:28,020 --> 00:04:29,639
so instead we focus on the smash and

132
00:04:29,639 --> 00:04:31,320
grab attacker which steals the stored

133
00:04:31,320 --> 00:04:34,199
data in Gossamer

134
00:04:34,199 --> 00:04:35,880
if the attacker steals the ephemeral

135
00:04:35,880 --> 00:04:37,979
data they learn nothing as the key is

136
00:04:37,979 --> 00:04:40,199
deleted on reboot

137
00:04:40,199 --> 00:04:41,940
if the attacker steals the persistent

138
00:04:41,940 --> 00:04:44,340
database though they will gain access to

139
00:04:44,340 --> 00:04:46,500
the password-derived information

140
00:04:46,500 --> 00:04:48,240
so we need to ensure that the potential

141
00:04:48,240 --> 00:04:50,220
benefit of these measurements is bounded

142
00:04:50,220 --> 00:04:52,199
and we call this design principle

143
00:04:52,199 --> 00:04:55,639
bounded leakage logging

144
00:04:56,040 --> 00:04:57,479
so how can we choose measurements that

145
00:04:57,479 --> 00:04:58,860
are safe to lock

146
00:04:58,860 --> 00:05:00,419
let's assume that an attacker is

147
00:05:00,419 --> 00:05:01,979
performing a password guessing attack

148
00:05:01,979 --> 00:05:04,320
against a live login system

149
00:05:04,320 --> 00:05:07,020
they have a guest list of passwords and

150
00:05:07,020 --> 00:05:08,340
they will iterate over the guest list

151
00:05:08,340 --> 00:05:11,460
trying each one until a successful login

152
00:05:11,460 --> 00:05:13,440
for example if the user's password is

153
00:05:13,440 --> 00:05:15,720
spider it would take the attacker five

154
00:05:15,720 --> 00:05:18,900
guesses to correctly guess it

155
00:05:18,900 --> 00:05:21,120
we also assume now that they have access

156
00:05:21,120 --> 00:05:23,460
to gossamer logs which contain the

157
00:05:23,460 --> 00:05:25,380
encrypted username and information about

158
00:05:25,380 --> 00:05:26,639
the password

159
00:05:26,639 --> 00:05:28,500
in this case for the password derived

160
00:05:28,500 --> 00:05:30,600
measurements we consider the zxcvbn

161
00:05:30,600 --> 00:05:33,300
score a measure of passport strength

162
00:05:33,300 --> 00:05:34,979
we assume that the attacker knows the

163
00:05:34,979 --> 00:05:36,539
encrypted username for the user they are

164
00:05:36,539 --> 00:05:38,880
trying to Target in this case that

165
00:05:38,880 --> 00:05:40,560
encrypted username is the third one on

166
00:05:40,560 --> 00:05:43,320
this list trzq a1l

167
00:05:43,320 --> 00:05:45,660
and the zxcvb unscore if that user's

168
00:05:45,660 --> 00:05:48,539
password is 3.

169
00:05:48,539 --> 00:05:50,639
now the attacker can compute the same

170
00:05:50,639 --> 00:05:52,380
score for each of the passwords in their

171
00:05:52,380 --> 00:05:54,240
guest list and filter out any passwords

172
00:05:54,240 --> 00:05:57,479
that do not have a cvbn score of three

173
00:05:57,479 --> 00:05:59,580
in this case we can filter out the first

174
00:05:59,580 --> 00:06:01,740
four passwords in the list and now we'd

175
00:06:01,740 --> 00:06:03,840
only take the attacker one guess from

176
00:06:03,840 --> 00:06:05,880
the filtered list to guess the user's

177
00:06:05,880 --> 00:06:08,419
actual password

178
00:06:08,820 --> 00:06:10,380
We performed a simulation of this

179
00:06:10,380 --> 00:06:12,960
scenario using a breach data set of 307

180
00:06:12,960 --> 00:06:15,419
million passwords where we took 80 as

181
00:06:15,419 --> 00:06:17,759
the attacker's guest list and sampled 10

182
00:06:17,759 --> 00:06:19,740
000 of the remaining 20 as the target

183
00:06:19,740 --> 00:06:21,720
passwords and we graphed the percent

184
00:06:21,720 --> 00:06:23,520
increase in attacker success from the

185
00:06:23,520 --> 00:06:25,199
Baseline without any password derived

186
00:06:25,199 --> 00:06:26,699
information

187
00:06:26,699 --> 00:06:28,740
the solid blue line on the graph shows

188
00:06:28,740 --> 00:06:30,800
that the original zxcbn score

189
00:06:30,800 --> 00:06:33,000
significantly increases attacker's

190
00:06:33,000 --> 00:06:34,020
success

191
00:06:34,020 --> 00:06:36,960
so we tried bucketizing the score

192
00:06:36,960 --> 00:06:38,580
which originally returned an integer

193
00:06:38,580 --> 00:06:42,180
between 0 and 4 to a binary zero or one

194
00:06:42,180 --> 00:06:44,340
as shown by the green dashed line the

195
00:06:44,340 --> 00:06:47,100
binary zcbn score never allowed an

196
00:06:47,100 --> 00:06:49,139
increase in attacker's success of over

197
00:06:49,139 --> 00:06:50,520
two percent

198
00:06:50,520 --> 00:06:52,680
and passed a hundred thousand guesses

199
00:06:52,680 --> 00:06:54,960
there is an improvement of less than 0.1

200
00:06:54,960 --> 00:06:55,919
percent

201
00:06:55,919 --> 00:06:58,080
in other words already weak easily

202
00:06:58,080 --> 00:07:00,180
guessable passwords may be guessed but

203
00:07:00,180 --> 00:07:01,800
stronger passwords will not be more

204
00:07:01,800 --> 00:07:03,900
easily guessed

205
00:07:03,900 --> 00:07:05,759
so in this case we chose to log the

206
00:07:05,759 --> 00:07:07,620
binary score to satisfy our design

207
00:07:07,620 --> 00:07:10,139
principle of bounded leakage logging and

208
00:07:10,139 --> 00:07:11,759
we repeated the simulation for other

209
00:07:11,759 --> 00:07:15,020
password-derived measurements

210
00:07:15,120 --> 00:07:17,160
we deployed gossamer for seven months at

211
00:07:17,160 --> 00:07:18,900
University one and three months at

212
00:07:18,900 --> 00:07:20,340
University too

213
00:07:20,340 --> 00:07:21,900
after obtaining approval from the

214
00:07:21,900 --> 00:07:24,780
respective IRB and it offices

215
00:07:24,780 --> 00:07:26,759
throughout this time period we observed

216
00:07:26,759 --> 00:07:29,340
34 million total lock-in requests

217
00:07:29,340 --> 00:07:31,500
this timeline shows successes by time in

218
00:07:31,500 --> 00:07:34,259
light green and failures in dark blue

219
00:07:34,259 --> 00:07:36,060
on this graph we can see a few big

220
00:07:36,060 --> 00:07:38,160
spikes in failed requests which we

221
00:07:38,160 --> 00:07:39,900
confirmed to be attacks through manual

222
00:07:39,900 --> 00:07:42,240
analysis

223
00:07:42,240 --> 00:07:44,759
in the first attack we observed 4ip is

224
00:07:44,759 --> 00:07:46,259
conducting a coordinated credential

225
00:07:46,259 --> 00:07:48,539
stuffing attack spanning two days and

226
00:07:48,539 --> 00:07:51,660
successfully compromising 23 accounts

227
00:07:51,660 --> 00:07:54,060
in the second we observed one IPA

228
00:07:54,060 --> 00:07:55,380
conducting differential surfing attack

229
00:07:55,380 --> 00:07:58,080
using the tool Century MBA compromising

230
00:07:58,080 --> 00:08:00,720
14 accounts

231
00:08:00,720 --> 00:08:02,819
in the third which was at University 2

232
00:08:02,819 --> 00:08:06,180
we saw 12 IPS conduct a naive password

233
00:08:06,180 --> 00:08:08,099
spraying attack by pretending to send

234
00:08:08,099 --> 00:08:12,419
requests from SMTP and IMAP clients none

235
00:08:12,419 --> 00:08:14,880
of the 76 000 usernames had tried though

236
00:08:14,880 --> 00:08:17,940
were valued University to usernames so

237
00:08:17,940 --> 00:08:19,560
it did not successfully compromise any

238
00:08:19,560 --> 00:08:20,819
accounts

239
00:08:20,819 --> 00:08:22,379
we removed traffic from these three

240
00:08:22,379 --> 00:08:24,180
attacks for subsequent analyzes to avoid

241
00:08:24,180 --> 00:08:25,919
skewing the statistics

242
00:08:25,919 --> 00:08:28,860
these high volume attacks account for 54

243
00:08:28,860 --> 00:08:30,360
000 requests at University one which

244
00:08:30,360 --> 00:08:35,399
were removed and 81 000 at University 2.

245
00:08:35,399 --> 00:08:37,080
we then performed analysis on the

246
00:08:37,080 --> 00:08:39,360
remaining non-attack data in our

247
00:08:39,360 --> 00:08:40,740
analyzes we found that log in friction

248
00:08:40,740 --> 00:08:42,839
is still high

249
00:08:42,839 --> 00:08:44,880
typos are even more common than reported

250
00:08:44,880 --> 00:08:47,519
in Prior work over one in three failed

251
00:08:47,519 --> 00:08:49,080
requests at University one more typos

252
00:08:49,080 --> 00:08:52,620
and even more were for mobile logins

253
00:08:52,620 --> 00:08:55,980
retries were also very common one out of

254
00:08:55,980 --> 00:08:57,839
five eventually successful sessions at

255
00:08:57,839 --> 00:08:59,940
University one and one out of three at

256
00:08:59,940 --> 00:09:01,800
University 2 required more than one

257
00:09:01,800 --> 00:09:03,779
attempt

258
00:09:03,779 --> 00:09:05,640
and also two-factor authentication

259
00:09:05,640 --> 00:09:08,279
impedes usability adding an average of

260
00:09:08,279 --> 00:09:10,500
14 seconds to a user's login for a dual

261
00:09:10,500 --> 00:09:12,720
push

262
00:09:12,720 --> 00:09:14,580
password managers could help with the

263
00:09:14,580 --> 00:09:16,560
first two issues by looking at the

264
00:09:16,560 --> 00:09:17,940
number of users with at least 10

265
00:09:17,940 --> 00:09:19,980
successful logins and no failures we

266
00:09:19,980 --> 00:09:22,019
estimate that about 25 percent of users

267
00:09:22,019 --> 00:09:25,820
are already using password managers

268
00:09:26,040 --> 00:09:27,540
we also looked at the use of breach

269
00:09:27,540 --> 00:09:29,519
credentials and found that it is a big

270
00:09:29,519 --> 00:09:31,080
problem

271
00:09:31,080 --> 00:09:34,140
we saw 23 users at University 1 and 200

272
00:09:34,140 --> 00:09:37,080
254 University 2 that were still using a

273
00:09:37,080 --> 00:09:38,580
breached password

274
00:09:38,580 --> 00:09:40,860
we also saw that over 2000 users at

275
00:09:40,860 --> 00:09:42,420
University one and one thousand

276
00:09:42,420 --> 00:09:44,279
University two were using a close

277
00:09:44,279 --> 00:09:46,500
variant of a breached password also

278
00:09:46,500 --> 00:09:48,899
known as a tweaked password

279
00:09:48,899 --> 00:09:50,640
we believe the solution to this is

280
00:09:50,640 --> 00:09:52,500
proactive breach alerting when a user

281
00:09:52,500 --> 00:09:55,500
logs in or sets a new password

282
00:09:55,500 --> 00:09:57,540
we also saw that the high volume attacks

283
00:09:57,540 --> 00:09:59,760
had high fractions of breached passwords

284
00:09:59,760 --> 00:10:02,640
and next we plan to investigate how to

285
00:10:02,640 --> 00:10:04,320
detect password guessing attacks better

286
00:10:04,320 --> 00:10:08,420
using password-derived measurements

287
00:10:08,760 --> 00:10:11,220
in conclusion gossamer is a measurement

288
00:10:11,220 --> 00:10:12,720
framework for safely recording

289
00:10:12,720 --> 00:10:15,000
information about submitted passwords by

290
00:10:15,000 --> 00:10:16,620
conforming to design principles such as

291
00:10:16,620 --> 00:10:18,959
bounded leakage logging

292
00:10:18,959 --> 00:10:21,000
gossamer can be extended with additional

293
00:10:21,000 --> 00:10:22,800
password derived measurements and the

294
00:10:22,800 --> 00:10:24,300
potential risk of such measurements can

295
00:10:24,300 --> 00:10:25,860
be evaluated using our simulation of

296
00:10:25,860 --> 00:10:28,200
guessing attacks

297
00:10:28,200 --> 00:10:29,880
we hope that the measurements enabled by

298
00:10:29,880 --> 00:10:31,500
gossamer can be used to gain insight

299
00:10:31,500 --> 00:10:33,600
into user and attacker Behavior which

300
00:10:33,600 --> 00:10:36,000
can inform new login design policies and

301
00:10:36,000 --> 00:10:36,899
the development of attack

302
00:10:36,899 --> 00:10:38,519
countermeasures

303
00:10:38,519 --> 00:10:40,380
we plan to make awesomer open source so

304
00:10:40,380 --> 00:10:41,700
that it can be used and extended by

305
00:10:41,700 --> 00:10:42,899
other groups

306
00:10:42,899 --> 00:10:44,640
thank you for listening we have a

307
00:10:44,640 --> 00:10:46,380
website with more details on gossamer at

308
00:10:46,380 --> 00:10:48,420
the link on the slide my co-author

309
00:10:48,420 --> 00:10:49,860
module will be able to answer questions

310
00:10:49,860 --> 00:10:52,200
in person now or feel free to send me an

311
00:10:52,200 --> 00:10:54,380
email

