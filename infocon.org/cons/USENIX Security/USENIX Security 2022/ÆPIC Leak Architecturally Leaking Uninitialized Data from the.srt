1
00:00:07,940 --> 00:00:10,080
so thank you for the kind introduction

2
00:00:10,080 --> 00:00:12,179
and I'm happy to be here and present to

3
00:00:12,179 --> 00:00:14,759
you epic League architecturally leaking

4
00:00:14,759 --> 00:00:17,880
uninitialized data from the memory so

5
00:00:17,880 --> 00:00:19,440
today you're gonna show you a few things

6
00:00:19,440 --> 00:00:22,740
first I tell you what is epic League how

7
00:00:22,740 --> 00:00:24,600
we understand epic League how we control

8
00:00:24,600 --> 00:00:26,460
the leakage how we exploit the leakage

9
00:00:26,460 --> 00:00:27,960
and finally going to talk about about

10
00:00:27,960 --> 00:00:30,720
mitigations how to mitigate this leakage

11
00:00:30,720 --> 00:00:34,620
so the name is epic league and we if you

12
00:00:34,620 --> 00:00:36,600
can suggest something it's epic in there

13
00:00:36,600 --> 00:00:39,180
so we actually exploit the advanced

14
00:00:39,180 --> 00:00:41,879
programmable interrupt controller and

15
00:00:41,879 --> 00:00:44,879
more specifically the mmio interface of

16
00:00:44,879 --> 00:00:46,620
the device you don't need to know what

17
00:00:46,620 --> 00:00:48,480
the Epic actually does it's not relevant

18
00:00:48,480 --> 00:00:50,579
for this talk so here just a few

19
00:00:50,579 --> 00:00:52,920
pointers so it has a base address where

20
00:00:52,920 --> 00:00:54,660
it's physically mapped so we can use

21
00:00:54,660 --> 00:00:57,960
that mmio address basically the

22
00:00:57,960 --> 00:01:00,000
important part here is that the

23
00:01:00,000 --> 00:01:02,120
configuration says that there's usually

24
00:01:02,120 --> 00:01:05,519
32-bit registers which are aligned to 16

25
00:01:05,519 --> 00:01:08,640
bytes so there's a lot of free space in

26
00:01:08,640 --> 00:01:10,740
that MMO region which is actually not

27
00:01:10,740 --> 00:01:13,619
used and you should not access those

28
00:01:13,619 --> 00:01:16,380
bytes 4 to 15. why should we not access

29
00:01:16,380 --> 00:01:19,140
them because Intel says so Intel says

30
00:01:19,140 --> 00:01:21,840
that bytes 4 to 15 should not be

31
00:01:21,840 --> 00:01:23,580
accessed under otherwise you get

32
00:01:23,580 --> 00:01:25,860
undefined Behavior or incorrect results

33
00:01:25,860 --> 00:01:29,159
so what do we do we simply try it so

34
00:01:29,159 --> 00:01:31,979
here is a POC where we map the physical

35
00:01:31,979 --> 00:01:34,740
address to a virtual address space so we

36
00:01:34,740 --> 00:01:36,659
can actually read from it and then we do

37
00:01:36,659 --> 00:01:38,880
simply we simply read from the Epic

38
00:01:38,880 --> 00:01:41,579
range so the first register is a defined

39
00:01:41,579 --> 00:01:43,740
epic register so we can see on the

40
00:01:43,740 --> 00:01:45,780
bottom here that we don't get back any

41
00:01:45,780 --> 00:01:47,640
meaningful value that's the defined epic

42
00:01:47,640 --> 00:01:49,680
value so yeah but what happens if you

43
00:01:49,680 --> 00:01:52,079
access the other bytes we get something

44
00:01:52,079 --> 00:01:53,460
back

45
00:01:53,460 --> 00:01:57,119
and it looks really close to Strings so

46
00:01:57,119 --> 00:02:00,259
we read some strings over the undefined

47
00:02:00,259 --> 00:02:03,540
undefined memory region of the Epic

48
00:02:03,540 --> 00:02:05,820
but why does the Epic return strings

49
00:02:05,820 --> 00:02:07,680
this doesn't make any sense so we can

50
00:02:07,680 --> 00:02:09,479
now see that with these strings in our

51
00:02:09,479 --> 00:02:11,400
memory dump and we have to identify

52
00:02:11,400 --> 00:02:13,200
where those strings are actually coming

53
00:02:13,200 --> 00:02:15,660
from so we did a few experiments in the

54
00:02:15,660 --> 00:02:18,480
in the vapor to basically pin down where

55
00:02:18,480 --> 00:02:20,459
the leakage is coming from so at first

56
00:02:20,459 --> 00:02:22,920
we try to keep the data in registers and

57
00:02:22,920 --> 00:02:24,420
just do computations with those

58
00:02:24,420 --> 00:02:26,340
registers if you then try to leak the

59
00:02:26,340 --> 00:02:28,260
data we can't see any of these values we

60
00:02:28,260 --> 00:02:30,180
know so we can conclude that the

61
00:02:30,180 --> 00:02:32,400
dictator is not leaking from within the

62
00:02:32,400 --> 00:02:35,280
registers if we go one level further we

63
00:02:35,280 --> 00:02:37,200
have the private caches can we leak from

64
00:02:37,200 --> 00:02:40,200
the private caches unfortunately no so

65
00:02:40,200 --> 00:02:41,879
the next experience was then to go the

66
00:02:41,879 --> 00:02:43,920
other way around we take a look at if we

67
00:02:43,920 --> 00:02:46,260
can leak data from the ROM or from the

68
00:02:46,260 --> 00:02:48,120
last level caches so the shared caches

69
00:02:48,120 --> 00:02:50,160
of a CPU and also there we didn't see

70
00:02:50,160 --> 00:02:52,620
any leakage however we saw leakage when

71
00:02:52,620 --> 00:02:54,239
the data is passed between the course

72
00:02:54,239 --> 00:02:56,640
and we concluded that we leak from the

73
00:02:56,640 --> 00:02:58,800
super queue so what is the super queue

74
00:02:58,800 --> 00:03:00,360
the super queue is the interconnect

75
00:03:00,360 --> 00:03:03,239
between the L2 cache and the LLC cache

76
00:03:03,239 --> 00:03:06,239
and we can get with the Epic League we

77
00:03:06,239 --> 00:03:08,459
can take the data that's passed over the

78
00:03:08,459 --> 00:03:09,540
super queue

79
00:03:09,540 --> 00:03:12,060
we due to the construction of the Epic

80
00:03:12,060 --> 00:03:13,920
we can get only not all the data which

81
00:03:13,920 --> 00:03:16,739
is best since three fourth of the Epic

82
00:03:16,739 --> 00:03:18,659
MMO regions is actually defined

83
00:03:18,659 --> 00:03:21,000
registers so if we access those we get

84
00:03:21,000 --> 00:03:23,640
back defined values furthermore we also

85
00:03:23,640 --> 00:03:26,400
found that we cannot observe odd cache

86
00:03:26,400 --> 00:03:28,140
lines meaning that we can only leak even

87
00:03:28,140 --> 00:03:30,180
cache lines what does this mean an even

88
00:03:30,180 --> 00:03:32,220
Cash Line If you think about a page and

89
00:03:32,220 --> 00:03:33,840
you number the cache lines on a page

90
00:03:33,840 --> 00:03:36,420
from 0 to n and you can only access the

91
00:03:36,420 --> 00:03:38,580
the even ones

92
00:03:38,580 --> 00:03:40,319
so this brings us to our thread model so

93
00:03:40,319 --> 00:03:42,420
we have now this powerful attack where

94
00:03:42,420 --> 00:03:44,519
we can leak data from the super queue we

95
00:03:44,519 --> 00:03:46,379
have an analogy for that that we compare

96
00:03:46,379 --> 00:03:48,480
it to an uninitialized memory read in

97
00:03:48,480 --> 00:03:51,180
the paper so basically the CPU forgot to

98
00:03:51,180 --> 00:03:52,920
zero out the data before passing it

99
00:03:52,920 --> 00:03:54,120
along

100
00:03:54,120 --> 00:03:56,580
however we still need privilege attacker

101
00:03:56,580 --> 00:03:58,260
more as well and a privileged attacker

102
00:03:58,260 --> 00:04:00,299
model so we still need root to access

103
00:04:00,299 --> 00:04:02,340
that epic MMO region since its physical

104
00:04:02,340 --> 00:04:04,319
memory

105
00:04:04,319 --> 00:04:06,720
fortunately however there is a threat

106
00:04:06,720 --> 00:04:08,640
model but it makes sense and that's sjx

107
00:04:08,640 --> 00:04:11,159
so we target sjx Enclave what is the

108
00:04:11,159 --> 00:04:13,980
idea of Intel sgx is to prevent and

109
00:04:13,980 --> 00:04:15,360
privileged attacker from actually

110
00:04:15,360 --> 00:04:17,339
attacking your code so perfect fit for

111
00:04:17,339 --> 00:04:20,579
that how does sjx do that it has one

112
00:04:20,579 --> 00:04:22,260
feature which is called the transparent

113
00:04:22,260 --> 00:04:24,120
memory encryption and it uses the

114
00:04:24,120 --> 00:04:27,180
Enclave page cache for short the EPC the

115
00:04:27,180 --> 00:04:28,919
idea is that every data you store in an

116
00:04:28,919 --> 00:04:31,320
enclave gets transparently encrypted on

117
00:04:31,320 --> 00:04:34,740
that EPC range however the memory and

118
00:04:34,740 --> 00:04:36,660
the pages are still managed from the

119
00:04:36,660 --> 00:04:38,520
operating system so the operating system

120
00:04:38,520 --> 00:04:41,040
needs a way in order to control the

121
00:04:41,040 --> 00:04:43,080
pages of an enclave

122
00:04:43,080 --> 00:04:45,660
and there's one super special page the

123
00:04:45,660 --> 00:04:48,720
SSA for context switches that stores

124
00:04:48,720 --> 00:04:52,139
register values on even interrupt

125
00:04:52,139 --> 00:04:54,000
derives if you think about it if you're

126
00:04:54,000 --> 00:04:56,400
Computing and an interf arrives you need

127
00:04:56,400 --> 00:04:58,380
a place to safely store register values

128
00:04:58,380 --> 00:05:00,600
before passing a handling the interrupt

129
00:05:00,600 --> 00:05:01,979
in the operating system because

130
00:05:01,979 --> 00:05:03,540
otherwise you would leak values to the

131
00:05:03,540 --> 00:05:05,880
operating system

132
00:05:05,880 --> 00:05:07,919
so now we have a few building blocks we

133
00:05:07,919 --> 00:05:10,259
can already sample data that passes over

134
00:05:10,259 --> 00:05:12,120
the super queue when targeting sjx

135
00:05:12,120 --> 00:05:13,979
enclaves so you can simply read the Epic

136
00:05:13,979 --> 00:05:15,540
range and as we've seen we got strings

137
00:05:15,540 --> 00:05:17,639
back we can get different bar also back

138
00:05:17,639 --> 00:05:21,060
but how can we target interesting data

139
00:05:21,060 --> 00:05:23,759
how can we force data into the Super

140
00:05:23,759 --> 00:05:26,160
queue and how can we keep interesting

141
00:05:26,160 --> 00:05:28,500
data long enough in the super queue that

142
00:05:28,500 --> 00:05:30,780
we can actually leak it that brings us

143
00:05:30,780 --> 00:05:33,539
to Enclave shaking the idea of ankle

144
00:05:33,539 --> 00:05:35,699
shaking is to abuse the power of the

145
00:05:35,699 --> 00:05:37,620
operating system that it can still

146
00:05:37,620 --> 00:05:39,840
control the pages of an enclave there

147
00:05:39,840 --> 00:05:41,639
are actually two instructions the ewb

148
00:05:41,639 --> 00:05:44,340
and the L do instruction and I just

149
00:05:44,340 --> 00:05:45,780
skipped to the animation this makes it

150
00:05:45,780 --> 00:05:48,240
more clear so we have the EPC cache in

151
00:05:48,240 --> 00:05:50,280
here we have one page loaded in The

152
00:05:50,280 --> 00:05:52,199
Enclave we cannot trigger the evb

153
00:05:52,199 --> 00:05:54,780
instruction to ewb the instruction to

154
00:05:54,780 --> 00:05:57,180
get the page to the core re-encrypt it

155
00:05:57,180 --> 00:05:58,979
and write it back into the main memory

156
00:05:58,979 --> 00:06:01,320
and if you follow the path you can see

157
00:06:01,320 --> 00:06:03,479
how many components of this CPU are

158
00:06:03,479 --> 00:06:04,680
actually used in order to get the page

159
00:06:04,680 --> 00:06:06,539
to the core and we can also see that the

160
00:06:06,539 --> 00:06:09,300
super queue is also used here similarly

161
00:06:09,300 --> 00:06:12,000
for ldu we have a different way we bring

162
00:06:12,000 --> 00:06:14,039
the we bring the encrypted page to the

163
00:06:14,039 --> 00:06:16,620
core decrypt it and stored in the EPC

164
00:06:16,620 --> 00:06:19,500
and again we get the data over the super

165
00:06:19,500 --> 00:06:21,720
queue but still we're talking about

166
00:06:21,720 --> 00:06:24,419
Pages pages are quite large how do you

167
00:06:24,419 --> 00:06:26,819
target interesting data on a page and

168
00:06:26,819 --> 00:06:30,120
that brings us to Cache line freezing

169
00:06:30,120 --> 00:06:32,039
we don't actually need the hyper thread

170
00:06:32,039 --> 00:06:34,620
for the leakage to work but if you think

171
00:06:34,620 --> 00:06:36,479
about it the hyper thread and its

172
00:06:36,479 --> 00:06:38,340
sibling are both components of the core

173
00:06:38,340 --> 00:06:40,380
and therefore share the super queue

174
00:06:40,380 --> 00:06:41,639
entry

175
00:06:41,639 --> 00:06:43,979
this means also that the hyper thread

176
00:06:43,979 --> 00:06:46,319
can influence the content of the super

177
00:06:46,319 --> 00:06:48,840
queue of its sibling and we use the

178
00:06:48,840 --> 00:06:51,180
theory here that actually silver blocks

179
00:06:51,180 --> 00:06:53,100
because of blocks of memory which are

180
00:06:53,100 --> 00:06:55,199
all zero are actually never transferred

181
00:06:55,199 --> 00:06:57,419
over the super queue that sounds a bit

182
00:06:57,419 --> 00:06:59,100
complex so let's look at the nomination

183
00:06:59,100 --> 00:07:01,620
here so we have thread one the sibling

184
00:07:01,620 --> 00:07:03,479
and fret 2 the hyper thread and we have

185
00:07:03,479 --> 00:07:05,160
both addresses in there which have the

186
00:07:05,160 --> 00:07:07,560
same page offset and thread one now just

187
00:07:07,560 --> 00:07:09,900
to load the secret data to just to read

188
00:07:09,900 --> 00:07:11,639
from the secret data and the data

189
00:07:11,639 --> 00:07:13,560
travels over the super queue to the

190
00:07:13,560 --> 00:07:15,479
private caches and finally gets served

191
00:07:15,479 --> 00:07:17,520
to the read if you're not look at fret 2

192
00:07:17,520 --> 00:07:19,860
if it access the axis the axes get

193
00:07:19,860 --> 00:07:21,539
transferred into the Super queue to the

194
00:07:21,539 --> 00:07:23,220
private caches and end up in the read

195
00:07:23,220 --> 00:07:24,960
but we didn't gain anything here because

196
00:07:24,960 --> 00:07:26,880
we just overwrote the secret data if you

197
00:07:26,880 --> 00:07:28,919
now use epic League we just get back our

198
00:07:28,919 --> 00:07:31,319
own data let's look at the zero case we

199
00:07:31,319 --> 00:07:32,819
again load the serial secret in the

200
00:07:32,819 --> 00:07:34,979
super queue and now we access on the

201
00:07:34,979 --> 00:07:37,680
hyper thread zeros and when the theory

202
00:07:37,680 --> 00:07:40,319
is right then these are just marked

203
00:07:40,319 --> 00:07:42,780
differently in the super your entry this

204
00:07:42,780 --> 00:07:44,340
Mark is then resolved at the lower level

205
00:07:44,340 --> 00:07:46,319
of the hierarchy and finally forward it

206
00:07:46,319 --> 00:07:48,060
to the read but if you look here

207
00:07:48,060 --> 00:07:51,060
precisely we see that we have Frozen a

208
00:07:51,060 --> 00:07:53,160
secret value in the super queue entry

209
00:07:53,160 --> 00:07:56,819
and that's every click and we proposed

210
00:07:56,819 --> 00:08:00,120
two attacks for the sjx context which

211
00:08:00,120 --> 00:08:02,099
are basically abusing this leakage so

212
00:08:02,099 --> 00:08:03,720
the idea is simply you start an enclave

213
00:08:03,720 --> 00:08:06,240
wait until some secret data or important

214
00:08:06,240 --> 00:08:09,479
data is stored in a in the enclave and

215
00:08:09,479 --> 00:08:11,400
then you use the combination of cache

216
00:08:11,400 --> 00:08:13,979
line shaking and Enclave shaking and

217
00:08:13,979 --> 00:08:16,680
cache line freezing to basically leak

218
00:08:16,680 --> 00:08:18,720
freeze the data and leak it afterwards

219
00:08:18,720 --> 00:08:20,699
with epic you can repeat this process

220
00:08:20,699 --> 00:08:22,740
indefinitely without The Enclave even

221
00:08:22,740 --> 00:08:25,199
running since the pages still exists if

222
00:08:25,199 --> 00:08:28,139
the Enclave is not being executed and if

223
00:08:28,139 --> 00:08:30,000
you remember we had this super special

224
00:08:30,000 --> 00:08:33,000
page the SSR page which stores register

225
00:08:33,000 --> 00:08:35,880
context during asynchronous events so

226
00:08:35,880 --> 00:08:38,520
the idea here is now that we stop after

227
00:08:38,520 --> 00:08:40,440
a certain instruction had a secret value

228
00:08:40,440 --> 00:08:42,419
in the register we interrupt The Enclave

229
00:08:42,419 --> 00:08:44,580
bring that value on that special page

230
00:08:44,580 --> 00:08:46,140
and then we use the same technique as

231
00:08:46,140 --> 00:08:48,300
before and just dump that page

232
00:08:48,300 --> 00:08:51,600
and let's try let's try it live so I

233
00:08:51,600 --> 00:08:54,800
brought you here something from

234
00:08:56,040 --> 00:08:59,880
form Cuts so I'm currently connected to

235
00:08:59,880 --> 00:09:02,399
God so we have here an enclave and we

236
00:09:02,399 --> 00:09:04,320
can just Target let's say an insta

237
00:09:04,320 --> 00:09:06,000
interesting instruction in that Enclave

238
00:09:06,000 --> 00:09:08,160
for instance I'm now targeting the file

239
00:09:08,160 --> 00:09:09,899
is and Keegan assist that's an

240
00:09:09,899 --> 00:09:11,940
instruction that is used to derive as

241
00:09:11,940 --> 00:09:14,519
and I keys and we can now see that this

242
00:09:14,519 --> 00:09:16,200
instruction is used in Enclave somewhere

243
00:09:16,200 --> 00:09:18,000
and the interesting part here is that in

244
00:09:18,000 --> 00:09:21,120
the xmm zero register it has a key the

245
00:09:21,120 --> 00:09:23,820
key we want to extract so if I then

246
00:09:23,820 --> 00:09:26,820
Target simply with the

247
00:09:26,820 --> 00:09:29,399
if I now build a conflict that specifies

248
00:09:29,399 --> 00:09:31,140
where this instruction is lying in

249
00:09:31,140 --> 00:09:33,300
Enclave I can simply perform at the

250
00:09:33,300 --> 00:09:35,459
click and get out the key and if you

251
00:09:35,459 --> 00:09:37,980
don't believe me here is the source code

252
00:09:37,980 --> 00:09:39,839
dump and we can directly see that this

253
00:09:39,839 --> 00:09:42,180
upper parts of the key are directly

254
00:09:42,180 --> 00:09:44,940
recovered here and we can also see that

255
00:09:44,940 --> 00:09:46,740
we have a blind spot in there this is

256
00:09:46,740 --> 00:09:49,260
exactly the position where an evaluate

257
00:09:49,260 --> 00:09:51,060
epic register is located and we can

258
00:09:51,060 --> 00:09:52,920
never leak the data from there however

259
00:09:52,920 --> 00:09:54,779
if you think about it you can always

260
00:09:54,779 --> 00:09:56,820
recover parts of the key from different

261
00:09:56,820 --> 00:09:59,880
parts so if I take here a second try I

262
00:09:59,880 --> 00:10:01,740
can also use a different config that

263
00:10:01,740 --> 00:10:04,200
also leaks out this first round key and

264
00:10:04,200 --> 00:10:06,060
with this incremental leakage you can

265
00:10:06,060 --> 00:10:09,018
recover the full key

266
00:10:10,260 --> 00:10:12,839
so

267
00:10:12,839 --> 00:10:14,640
this brings us to the mitigation side

268
00:10:14,640 --> 00:10:16,200
since we've seen that this is quite

269
00:10:16,200 --> 00:10:18,660
impactful and really fast to perform we

270
00:10:18,660 --> 00:10:22,380
need to fix it and the Embargo lifted on

271
00:10:22,380 --> 00:10:24,480
Tuesday and there are already fixes out

272
00:10:24,480 --> 00:10:26,580
there so don't no worry the first fix is

273
00:10:26,580 --> 00:10:28,620
generally more recommendation than a fix

274
00:10:28,620 --> 00:10:30,839
the idea is to disable this epic mmio

275
00:10:30,839 --> 00:10:33,480
region since if you it's a privileged

276
00:10:33,480 --> 00:10:35,279
component and if you don't use it you

277
00:10:35,279 --> 00:10:37,440
cannot misuse it however you still need

278
00:10:37,440 --> 00:10:39,180
root rights in order to access for the

279
00:10:39,180 --> 00:10:41,580
Epic so they're there might make sense

280
00:10:41,580 --> 00:10:43,560
to reverse however for the sjx case you

281
00:10:43,560 --> 00:10:45,060
can just say disable it because your

282
00:10:45,060 --> 00:10:46,740
operating system that doesn't make sense

283
00:10:46,740 --> 00:10:48,839
so Intel release the microcode update

284
00:10:48,839 --> 00:10:51,000
that actually flushes the super queue on

285
00:10:51,000 --> 00:10:52,680
Enclave transitions

286
00:10:52,680 --> 00:10:54,600
however like always the general

287
00:10:54,600 --> 00:10:56,399
education is that also this disable

288
00:10:56,399 --> 00:10:58,500
hyper threading because this super Q

289
00:10:58,500 --> 00:11:00,899
flushes bring it now nothing if you if

290
00:11:00,899 --> 00:11:02,519
you have hyper threading enabled and can

291
00:11:02,519 --> 00:11:04,019
just read in the middle when the data is

292
00:11:04,019 --> 00:11:05,100
still in flight

293
00:11:05,100 --> 00:11:06,839
so that brings me to the conclusion so

294
00:11:06,839 --> 00:11:08,760
we have seen epic league is basically

295
00:11:08,760 --> 00:11:10,440
the first architecture leak that can

296
00:11:10,440 --> 00:11:12,540
leak stale data from within super Q

297
00:11:12,540 --> 00:11:14,459
entries it does not require hyper

298
00:11:14,459 --> 00:11:16,140
threading but it highly benefits from it

299
00:11:16,140 --> 00:11:17,760
and due to the Epic virtualization

300
00:11:17,760 --> 00:11:20,100
change we assume as we know that it's

301
00:11:20,100 --> 00:11:22,320
only affecting new CPUs and if you want

302
00:11:22,320 --> 00:11:23,820
to have more information check out that

303
00:11:23,820 --> 00:11:25,260
link there's a lot of information there

304
00:11:25,260 --> 00:11:27,420
also links to the paper and thank you

305
00:11:27,420 --> 00:11:29,839
for attention

