1
00:00:08,058 --> 00:00:11,099
hi I'm Ben prinster and I'm going to

2
00:00:11,099 --> 00:00:12,660
present the total eclipse of the heart

3
00:00:12,660 --> 00:00:14,460
disrupting the interplanetary file

4
00:00:14,460 --> 00:00:15,960
system

5
00:00:15,960 --> 00:00:17,640
so what is the interplanetary file

6
00:00:17,640 --> 00:00:20,060
system or ipfs

7
00:00:20,060 --> 00:00:23,880
ipfs is a peer-to-peer hypermedia system

8
00:00:23,880 --> 00:00:26,580
its development is held by protocol apps

9
00:00:26,580 --> 00:00:28,859
and parts of ipfs are used extensively

10
00:00:28,859 --> 00:00:31,080
by other systems the reason why this

11
00:00:31,080 --> 00:00:33,000
works so well is it's fully

12
00:00:33,000 --> 00:00:35,219
decentralized and open and very modular

13
00:00:35,219 --> 00:00:37,380
which means you have different

14
00:00:37,380 --> 00:00:39,540
subsystems interacting with each other

15
00:00:39,540 --> 00:00:43,200
based on well-defined apis and this

16
00:00:43,200 --> 00:00:45,719
whole architecture is extensible so

17
00:00:45,719 --> 00:00:47,640
if you want to Mount Your decentralized

18
00:00:47,640 --> 00:00:49,379
peer-to-peer application you can just

19
00:00:49,379 --> 00:00:52,140
use ipfs add to your subsystem for your

20
00:00:52,140 --> 00:00:54,239
application layer magic and be done with

21
00:00:54,239 --> 00:00:59,100
it because IPS just works and I say that

22
00:00:59,100 --> 00:01:02,160
wholly and ironically it really does so

23
00:01:02,160 --> 00:01:04,319
this is the greatest feat ipv has

24
00:01:04,319 --> 00:01:05,700
managed to pull off in my opinion

25
00:01:05,700 --> 00:01:09,060
because you can just fire up a note join

26
00:01:09,060 --> 00:01:10,860
the network and you're done and it works

27
00:01:10,860 --> 00:01:12,180
you have connectivity you can share

28
00:01:12,180 --> 00:01:13,920
files you can partake in whatever's

29
00:01:13,920 --> 00:01:16,380
happening and this is a feat of

30
00:01:16,380 --> 00:01:18,119
engineering nobody else before has

31
00:01:18,119 --> 00:01:19,560
managed to pull off

32
00:01:19,560 --> 00:01:23,460
so in effect ipfs wants to go from

33
00:01:23,460 --> 00:01:25,140
something like this which is your

34
00:01:25,140 --> 00:01:27,479
typical IP layer topology which requires

35
00:01:27,479 --> 00:01:29,640
a seasoned exercise to cast out its

36
00:01:29,640 --> 00:01:32,040
demons to something like this which

37
00:01:32,040 --> 00:01:33,600
actually makes sense to a normal human

38
00:01:33,600 --> 00:01:35,820
being and is comprehensible by both man

39
00:01:35,820 --> 00:01:36,840
and machine

40
00:01:36,840 --> 00:01:39,299
having introduced ipfs I will need to

41
00:01:39,299 --> 00:01:40,860
talk about the decentralized operation

42
00:01:40,860 --> 00:01:43,920
of peer-to-peer systems before I can

43
00:01:43,920 --> 00:01:46,560
talk about ipfs specifics and finally

44
00:01:46,560 --> 00:01:49,020
I'll explain how we managed to pull our

45
00:01:49,020 --> 00:01:53,159
Dirt Cheap Eclipse attacks on live ipfs

46
00:01:53,159 --> 00:01:54,540
notes

47
00:01:54,540 --> 00:01:57,060
so how do you operate a decentralized

48
00:01:57,060 --> 00:01:59,460
peer-to-peer system in the wild first of

49
00:01:59,460 --> 00:02:01,380
all some basics

50
00:02:01,380 --> 00:02:03,240
you don't have IP layer information

51
00:02:03,240 --> 00:02:05,759
anymore you have abstract identifiers in

52
00:02:05,759 --> 00:02:09,060
this case a B O and C and of course this

53
00:02:09,060 --> 00:02:10,739
information needs to be mapped to a p

54
00:02:10,739 --> 00:02:12,360
layer information such that it actually

55
00:02:12,360 --> 00:02:14,879
works in the real world and we will

56
00:02:14,879 --> 00:02:17,099
focus on our node a here

57
00:02:17,099 --> 00:02:19,379
which has learned VIP layer information

58
00:02:19,379 --> 00:02:22,020
about B C and O out of band

59
00:02:22,020 --> 00:02:24,120
and in order to partake in a

60
00:02:24,120 --> 00:02:26,879
peer-to-peer Network it contacts those

61
00:02:26,879 --> 00:02:29,879
nodes it nodes and queries for IP layer

62
00:02:29,879 --> 00:02:32,160
information on itself and these notes

63
00:02:32,160 --> 00:02:35,700
respond with other node information and

64
00:02:35,700 --> 00:02:38,340
gradually a learns more and more IP

65
00:02:38,340 --> 00:02:40,319
layer information and built its routing

66
00:02:40,319 --> 00:02:42,060
tables and that's what's called

67
00:02:42,060 --> 00:02:43,739
bootstrapping which is basically the

68
00:02:43,739 --> 00:02:45,000
process of joining a peer-to-peer

69
00:02:45,000 --> 00:02:46,019
Network

70
00:02:46,019 --> 00:02:48,060
and once you've joined the network you

71
00:02:48,060 --> 00:02:49,440
can go ahead and query for information

72
00:02:49,440 --> 00:02:51,900
for example s this could be the hash of

73
00:02:51,900 --> 00:02:54,480
some data or the ID of some node you

74
00:02:54,480 --> 00:02:56,099
want to contact

75
00:02:56,099 --> 00:02:59,040
so a asks the notes about s and they

76
00:02:59,040 --> 00:03:01,800
reply with some other notes and finally

77
00:03:01,800 --> 00:03:04,739
a reaches s and can connect which is

78
00:03:04,739 --> 00:03:06,900
nice and the reason why this converges

79
00:03:06,900 --> 00:03:10,200
is that all the nodes have agreed on a

80
00:03:10,200 --> 00:03:13,860
common distance metric and this works

81
00:03:13,860 --> 00:03:16,500
for finding notes and data and this

82
00:03:16,500 --> 00:03:17,760
system as a whole is called the

83
00:03:17,760 --> 00:03:19,620
distributed hash table the data is

84
00:03:19,620 --> 00:03:21,659
identify by hashes basically and this

85
00:03:21,659 --> 00:03:23,640
works well as long as nobody goes ahead

86
00:03:23,640 --> 00:03:26,099
and claims identifies already taken so

87
00:03:26,099 --> 00:03:27,420
obviously you need to do something about

88
00:03:27,420 --> 00:03:28,980
that

89
00:03:28,980 --> 00:03:31,980
we need to lay out some very fundamental

90
00:03:31,980 --> 00:03:34,680
peer-to-peer security techniques you

91
00:03:34,680 --> 00:03:36,420
definitely need self-certifying

92
00:03:36,420 --> 00:03:39,300
identifiers to fix identifier attack so

93
00:03:39,300 --> 00:03:40,739
we generate the public priority key pair

94
00:03:40,739 --> 00:03:43,140
for each node you write it's only from a

95
00:03:43,140 --> 00:03:44,819
public key a new authenticate all

96
00:03:44,819 --> 00:03:46,140
connections and you're basically done

97
00:03:46,140 --> 00:03:48,360
with it and it definitely works so each

98
00:03:48,360 --> 00:03:50,599
identifier in the network is now

99
00:03:50,599 --> 00:03:55,140
verified which is nice except well it's

100
00:03:55,140 --> 00:03:56,879
really not because all those nodes could

101
00:03:56,879 --> 00:03:59,159
be operated by a single entity which

102
00:03:59,159 --> 00:04:00,900
makes your network collapse

103
00:04:00,900 --> 00:04:02,640
so that's what's called a civil attack

104
00:04:02,640 --> 00:04:04,560
and that works because all you know is

105
00:04:04,560 --> 00:04:07,620
identifiers and not whether these

106
00:04:07,620 --> 00:04:09,299
identifiers are actually

107
00:04:09,299 --> 00:04:11,580
owned by distinct entities

108
00:04:11,580 --> 00:04:13,560
and this is of course devastating for

109
00:04:13,560 --> 00:04:15,420
any peer-to-peer Network

110
00:04:15,420 --> 00:04:17,820
but there is another fundamental Clause

111
00:04:17,820 --> 00:04:20,160
of the text that has been haunting pewdp

112
00:04:20,160 --> 00:04:22,860
networks basically since their Inception

113
00:04:22,860 --> 00:04:25,320
so I have my self-certifying identifier

114
00:04:25,320 --> 00:04:27,300
so I can't just choose arbitrary

115
00:04:27,300 --> 00:04:30,000
identifiers but I kind of go ahead and

116
00:04:30,000 --> 00:04:32,880
regenerate identifiers brute force is

117
00:04:32,880 --> 00:04:36,300
basically until I have arrived with

118
00:04:36,300 --> 00:04:38,880
enough identifiers close to some Target

119
00:04:38,880 --> 00:04:42,720
that my evil notes are closest to this

120
00:04:42,720 --> 00:04:45,720
target if I'm very curious for K now all

121
00:04:45,720 --> 00:04:48,000
the requests for K were terminate at my

122
00:04:48,000 --> 00:04:50,699
notes and I can simply pretend K does

123
00:04:50,699 --> 00:04:52,620
not exist and that's what's called an

124
00:04:52,620 --> 00:04:55,080
eclipse attack and this is basically

125
00:04:55,080 --> 00:04:58,979
what we managed to pull off against ipfs

126
00:04:58,979 --> 00:05:00,060
so

127
00:05:00,060 --> 00:05:04,280
how can these problems be fixed well

128
00:05:04,280 --> 00:05:08,280
proposed a solution to these issues

129
00:05:08,280 --> 00:05:11,100
use self-certified identifiers mandate

130
00:05:11,100 --> 00:05:13,500
these joint lookup paths and a

131
00:05:13,500 --> 00:05:15,240
centralized or proof of work based

132
00:05:15,240 --> 00:05:17,699
identifier generation and I mentioned

133
00:05:17,699 --> 00:05:20,759
Academia specifically because the ipfs

134
00:05:20,759 --> 00:05:22,740
white paper cites this strategy but

135
00:05:22,740 --> 00:05:24,060
let's talk some more IP address

136
00:05:24,060 --> 00:05:26,639
specifically let's talk connection

137
00:05:26,639 --> 00:05:30,199
management ipfs is supposed to just work

138
00:05:30,199 --> 00:05:33,060
and in order to achieve that it needs to

139
00:05:33,060 --> 00:05:34,919
natively support relaying and that's

140
00:05:34,919 --> 00:05:36,300
reversal

141
00:05:36,300 --> 00:05:39,479
it's connection oriented so nodes need

142
00:05:39,479 --> 00:05:40,979
to limit the number of active

143
00:05:40,979 --> 00:05:42,300
Connections in order not to become

144
00:05:42,300 --> 00:05:44,160
overburdened but still remain connected

145
00:05:44,160 --> 00:05:45,180
to the network

146
00:05:45,180 --> 00:05:46,919
some nodes need to gauge the importance

147
00:05:46,919 --> 00:05:49,800
of connections and they employ a simple

148
00:05:49,800 --> 00:05:52,259
but effective scoring system to do that

149
00:05:52,259 --> 00:05:55,020
in a sense keep important connections

150
00:05:55,020 --> 00:05:57,539
trim the unimportant ones but there's a

151
00:05:57,539 --> 00:06:00,720
peculiarity to this this system needs to

152
00:06:00,720 --> 00:06:02,340
respect all present and future

153
00:06:02,340 --> 00:06:04,919
subsystems because as I've mentioned

154
00:06:04,919 --> 00:06:08,280
ipfs is extensible so you can mount any

155
00:06:08,280 --> 00:06:10,560
application layer Logic on top of it and

156
00:06:10,560 --> 00:06:11,699
you don't want your important

157
00:06:11,699 --> 00:06:13,580
connections to be trimmed

158
00:06:13,580 --> 00:06:15,660
and they have introduced The Connection

159
00:06:15,660 --> 00:06:18,840
Manager to tackle an issue so how does

160
00:06:18,840 --> 00:06:20,759
it work well first of all the connector

161
00:06:20,759 --> 00:06:22,800
manager sorts all connections by score

162
00:06:22,800 --> 00:06:25,259
which is just the sum of points from all

163
00:06:25,259 --> 00:06:27,539
subsystems usually this is something

164
00:06:27,539 --> 00:06:31,080
like 15 or 20 or 10 or something like

165
00:06:31,080 --> 00:06:31,979
that

166
00:06:31,979 --> 00:06:34,199
then it counts the connections and if

167
00:06:34,199 --> 00:06:35,699
the number of connection is higher than

168
00:06:35,699 --> 00:06:38,220
a configurable high water March it goes

169
00:06:38,220 --> 00:06:40,139
ahead and trims the lowest chord once

170
00:06:40,139 --> 00:06:42,720
down to the second configurable

171
00:06:42,720 --> 00:06:45,419
threshold then it sleeps in one minute

172
00:06:45,419 --> 00:06:48,240
and it does it all over again so you can

173
00:06:48,240 --> 00:06:50,699
configure the maximum and the minimum

174
00:06:50,699 --> 00:06:51,960
amount of connections you want to keep

175
00:06:51,960 --> 00:06:55,020
and this works quite well

176
00:06:55,020 --> 00:06:57,840
so how did we manage to pull off Eclipse

177
00:06:57,840 --> 00:07:00,419
attacks on ipfs

178
00:07:00,419 --> 00:07:01,620
well

179
00:07:01,620 --> 00:07:04,319
we pre-generated identifiers

180
00:07:04,319 --> 00:07:06,300
and if you want to Eclipse some Target

181
00:07:06,300 --> 00:07:09,240
you just pick an ID search through the

182
00:07:09,240 --> 00:07:11,039
ID tool you obtain loads and lots of

183
00:07:11,039 --> 00:07:13,080
identifiers that are very close to the

184
00:07:13,080 --> 00:07:15,300
Target closer than the rest of the

185
00:07:15,300 --> 00:07:16,259
network

186
00:07:16,259 --> 00:07:18,360
then you spawn civil notes assign them

187
00:07:18,360 --> 00:07:21,180
those IDs you connect to the victim

188
00:07:21,180 --> 00:07:24,000
yeah well and then you need some magic

189
00:07:24,000 --> 00:07:26,400
incantation to make a connection manager

190
00:07:26,400 --> 00:07:27,780
actually

191
00:07:27,780 --> 00:07:31,500
trim all the honest connections

192
00:07:31,500 --> 00:07:33,300
and we'll manage to do that within

193
00:07:33,300 --> 00:07:34,860
minutes

194
00:07:34,860 --> 00:07:37,919
so how did we go about this well

195
00:07:37,919 --> 00:07:39,599
of course we inflated the score of high

196
00:07:39,599 --> 00:07:41,520
water many of our evil connections such

197
00:07:41,520 --> 00:07:44,160
that the honest ones are just true and

198
00:07:44,160 --> 00:07:46,199
one ingredient is

199
00:07:46,199 --> 00:07:49,440
our pre-generated identifiers they are

200
00:07:49,440 --> 00:07:52,740
so close to the Target identifier in

201
00:07:52,740 --> 00:07:54,900
comparison to the rest of the network

202
00:07:54,900 --> 00:07:57,720
that we get awarded quite a high amount

203
00:07:57,720 --> 00:08:00,419
of points just because we are so close

204
00:08:00,419 --> 00:08:02,940
to the victim then there's bit swap

205
00:08:02,940 --> 00:08:05,880
similar to what BitTorrent does and you

206
00:08:05,880 --> 00:08:07,620
also get some points for unsolicited

207
00:08:07,620 --> 00:08:10,979
advertisement of content so yeah a

208
00:08:10,979 --> 00:08:12,300
couple of points for free basically

209
00:08:12,300 --> 00:08:14,599
because it doesn't consume any resources

210
00:08:14,599 --> 00:08:16,800
and then there's the relaying subsystem

211
00:08:16,800 --> 00:08:19,139
and this is really a gold mine because

212
00:08:19,139 --> 00:08:21,479
relaying is important for ipfs to work

213
00:08:21,479 --> 00:08:23,639
in a while so

214
00:08:23,639 --> 00:08:25,740
we just went ahead and relay junk

215
00:08:25,740 --> 00:08:28,379
connections over our uh one of our evil

216
00:08:28,379 --> 00:08:29,520
connections

217
00:08:29,520 --> 00:08:31,680
to inflate our score to infinity and

218
00:08:31,680 --> 00:08:33,360
beyond basically because it Awards one

219
00:08:33,360 --> 00:08:34,880
point per connection

220
00:08:34,880 --> 00:08:37,979
so while this sounds like really a cheap

221
00:08:37,979 --> 00:08:39,440
source of points

222
00:08:39,440 --> 00:08:42,360
is a bit more intricate because this is

223
00:08:42,360 --> 00:08:44,219
resource consuming also for the Target

224
00:08:44,219 --> 00:08:46,680
so if you were your attacking machine is

225
00:08:46,680 --> 00:08:48,720
pretty powerful you can end up dosing

226
00:08:48,720 --> 00:08:50,519
your target even if you don't want to

227
00:08:50,519 --> 00:08:52,320
but in the end

228
00:08:52,320 --> 00:08:54,779
you own a node that's basically it you

229
00:08:54,779 --> 00:08:58,140
Eclipse it so within minutes the DHT is

230
00:08:58,140 --> 00:09:02,040
poisoned and within less than an hour no

231
00:09:02,040 --> 00:09:03,720
honest connections to this node are

232
00:09:03,720 --> 00:09:05,100
present anymore

233
00:09:05,100 --> 00:09:08,420
aren't there any easy defenses

234
00:09:08,420 --> 00:09:11,820
yeah well you don't want Civil War packs

235
00:09:11,820 --> 00:09:14,100
and you don't want you don't want cheap

236
00:09:14,100 --> 00:09:16,320
identifier generation but the thing is

237
00:09:16,320 --> 00:09:18,120
you do not want the full civil

238
00:09:18,120 --> 00:09:20,279
resistance because

239
00:09:20,279 --> 00:09:23,880
if you really manage to do that that

240
00:09:23,880 --> 00:09:26,640
each machine is represented by a single

241
00:09:26,640 --> 00:09:28,740
identity well either it's unmanageable

242
00:09:28,740 --> 00:09:31,380
or you run into trouble because ipv4 is

243
00:09:31,380 --> 00:09:33,600
still a thing and if you manage a couple

244
00:09:33,600 --> 00:09:35,640
of ipfs notes running at a company for

245
00:09:35,640 --> 00:09:38,640
example it will still be one public ipv4

246
00:09:38,640 --> 00:09:42,480
address so you would basically lock out

247
00:09:42,480 --> 00:09:45,420
all these machines behind the last hop

248
00:09:45,420 --> 00:09:47,459
at the company that's you don't want

249
00:09:47,459 --> 00:09:49,860
that plus full sip resistance is an

250
00:09:49,860 --> 00:09:51,300
illusion anyways

251
00:09:51,300 --> 00:09:53,339
so but what about proof of work based

252
00:09:53,339 --> 00:09:56,279
defenses well the thing is you can't do

253
00:09:56,279 --> 00:09:58,380
that it's conceptually impossible if you

254
00:09:58,380 --> 00:10:00,240
want an HPC note to be able to join the

255
00:10:00,240 --> 00:10:02,339
network and the cheap smartphone to be

256
00:10:02,339 --> 00:10:03,660
able to join the network

257
00:10:03,660 --> 00:10:06,420
how much work can you mandate for

258
00:10:06,420 --> 00:10:09,060
identify a generation this is a gap

259
00:10:09,060 --> 00:10:11,640
that's simply put impossible to close

260
00:10:11,640 --> 00:10:14,100
you can't do that so that's also not an

261
00:10:14,100 --> 00:10:15,420
issue

262
00:10:15,420 --> 00:10:18,660
so where does that put ipfs today

263
00:10:18,660 --> 00:10:20,640
our original work was carried out in

264
00:10:20,640 --> 00:10:23,700
2020 and we crashed and burned a couple

265
00:10:23,700 --> 00:10:25,800
of times trying to submit our paper

266
00:10:25,800 --> 00:10:28,680
so a lot of time has passed and in the

267
00:10:28,680 --> 00:10:30,180
meantime lots of things have happened

268
00:10:30,180 --> 00:10:33,060
first of all we'd like to thank protocol

269
00:10:33,060 --> 00:10:35,160
apps for their support because they were

270
00:10:35,160 --> 00:10:37,140
nothing but professional and forthcoming

271
00:10:37,140 --> 00:10:38,940
and supportive throughout our research

272
00:10:38,940 --> 00:10:42,300
they allowed us to test out our attack

273
00:10:42,300 --> 00:10:44,700
against some of their bootstrap nodes

274
00:10:44,700 --> 00:10:48,180
which were pre-configured for all their

275
00:10:48,180 --> 00:10:51,420
ipfs notes out there so essentially they

276
00:10:51,420 --> 00:10:54,899
let us Hammer critical infrastructure

277
00:10:54,899 --> 00:10:57,240
so they revised the scoring system for

278
00:10:57,240 --> 00:11:00,060
DHD connections and relays but that's a

279
00:11:00,060 --> 00:11:03,240
delicate subject on its own because you

280
00:11:03,240 --> 00:11:06,600
need to be really really careful not to

281
00:11:06,600 --> 00:11:08,940
screw this up such that actually

282
00:11:08,940 --> 00:11:11,300
important connections remain

283
00:11:11,300 --> 00:11:15,660
also their DHT implementation manages to

284
00:11:15,660 --> 00:11:18,740
actually discriminate between

285
00:11:18,740 --> 00:11:21,000
connections that are useless and

286
00:11:21,000 --> 00:11:23,760
connections that are actually useful

287
00:11:23,760 --> 00:11:27,120
the ipfs DHD is probably the most robust

288
00:11:27,120 --> 00:11:29,220
and best DHT implementation you will

289
00:11:29,220 --> 00:11:32,579
find out there so if you want ADHD you

290
00:11:32,579 --> 00:11:34,860
can go ahead and use that then there

291
00:11:34,860 --> 00:11:37,500
were a slew of other changes to harden

292
00:11:37,500 --> 00:11:39,240
the system and they made some

293
00:11:39,240 --> 00:11:41,640
infrastructure tweaks to their bootstrap

294
00:11:41,640 --> 00:11:43,019
notes so

295
00:11:43,019 --> 00:11:46,140
in effect taking out a single node and

296
00:11:46,140 --> 00:11:48,899
fully eclipsing it now takes days and

297
00:11:48,899 --> 00:11:51,839
Not Mere minutes as before but yeah

298
00:11:51,839 --> 00:11:54,300
that's basically the gist of it there's

299
00:11:54,300 --> 00:11:55,800
much more that happened in the

300
00:11:55,800 --> 00:11:58,740
background and again very grateful to

301
00:11:58,740 --> 00:12:00,920
protocol apps in supporting his research

302
00:12:00,920 --> 00:12:04,079
and yeah that's all for my part

303
00:12:04,079 --> 00:12:08,060
I'll be here in Zoom taking questions

