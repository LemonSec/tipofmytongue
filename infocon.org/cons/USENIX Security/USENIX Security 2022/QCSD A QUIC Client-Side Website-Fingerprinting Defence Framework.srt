1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:09,500 --> 00:00:12,719
my name is Jean-Pierre Smith and I'm

3
00:00:12,719 --> 00:00:14,759
happy to be here today to speak with you

4
00:00:14,759 --> 00:00:19,140
about the joint work between myself Luca

5
00:00:19,140 --> 00:00:22,320
dolphy and Adrian perig of etihaz Zurich

6
00:00:22,320 --> 00:00:24,779
and pratik mittal of Princeton

7
00:00:24,779 --> 00:00:28,680
University titled qcsd a quick

8
00:00:28,680 --> 00:00:30,840
client-side website fingerprinting

9
00:00:30,840 --> 00:00:33,000
defense framework

10
00:00:33,000 --> 00:00:34,620
so

11
00:00:34,620 --> 00:00:35,700
uh

12
00:00:35,700 --> 00:00:37,739
yeah there we go

13
00:00:37,739 --> 00:00:39,719
so the world is moving towards an

14
00:00:39,719 --> 00:00:42,180
encrypted web with Technologies like

15
00:00:42,180 --> 00:00:45,360
https vpns and other privacy enhancing

16
00:00:45,360 --> 00:00:47,100
Technologies

17
00:00:47,100 --> 00:00:48,660
um restricting the amount of information

18
00:00:48,660 --> 00:00:51,899
available to an adversary that is in the

19
00:00:51,899 --> 00:00:55,140
network and would like to identify which

20
00:00:55,140 --> 00:00:57,300
websites our users visiting

21
00:00:57,300 --> 00:01:00,840
for this adversary he can observe for

22
00:01:00,840 --> 00:01:02,219
example due to the encryption being

23
00:01:02,219 --> 00:01:04,319
applied by the VPN or other privacy

24
00:01:04,319 --> 00:01:06,060
enhancing technology he can observe

25
00:01:06,060 --> 00:01:09,360
packet sizes times the client which is

26
00:01:09,360 --> 00:01:12,659
speaking with the proxy and he uses this

27
00:01:12,659 --> 00:01:14,340
information to train a class of attacks

28
00:01:14,340 --> 00:01:16,080
called website fingerprinting attacks

29
00:01:16,080 --> 00:01:18,299
which he then uses to try to classify

30
00:01:18,299 --> 00:01:19,619
the website

31
00:01:19,619 --> 00:01:21,720
as a result of these attacks several

32
00:01:21,720 --> 00:01:23,520
defenses have been proposed in the

33
00:01:23,520 --> 00:01:26,520
literature and however the need to

34
00:01:26,520 --> 00:01:28,799
deploy well to defend both directions

35
00:01:28,799 --> 00:01:31,560
both from the client to the proxy as

36
00:01:31,560 --> 00:01:33,659
well as from the proxy to the

37
00:01:33,659 --> 00:01:36,960
um to the client has essentially meant

38
00:01:36,960 --> 00:01:39,000
that well these these defenses would

39
00:01:39,000 --> 00:01:40,619
have to be deployed both at the user as

40
00:01:40,619 --> 00:01:42,780
well as some remote place in the network

41
00:01:42,780 --> 00:01:44,939
and this is obviously a limit a

42
00:01:44,939 --> 00:01:46,619
hindrance to deployment as this requires

43
00:01:46,619 --> 00:01:48,000
something outside of the client's

44
00:01:48,000 --> 00:01:49,200
control

45
00:01:49,200 --> 00:01:51,840
in our work we ask the question can we

46
00:01:51,840 --> 00:01:54,060
effectively defend web traffic both

47
00:01:54,060 --> 00:01:57,000
incoming and outgoing against website

48
00:01:57,000 --> 00:01:58,979
fingerprinting attacks solely from the

49
00:01:58,979 --> 00:02:01,680
client so that is without requiring any

50
00:02:01,680 --> 00:02:03,960
changes to the server or the deployment

51
00:02:03,960 --> 00:02:07,740
of any new network services

52
00:02:07,740 --> 00:02:11,340
so in trying to find a way to do this we

53
00:02:11,340 --> 00:02:14,099
leverage three key insights the first is

54
00:02:14,099 --> 00:02:16,440
that a client-side only defends must

55
00:02:16,440 --> 00:02:19,140
leverage the existing web Network stack

56
00:02:19,140 --> 00:02:22,200
and the reason for this is since we are

57
00:02:22,200 --> 00:02:24,120
deploying this only at the client we

58
00:02:24,120 --> 00:02:26,280
cannot rely upon anything being changed

59
00:02:26,280 --> 00:02:30,000
at the server or any new deployments in

60
00:02:30,000 --> 00:02:32,040
the network and so we have to leverage

61
00:02:32,040 --> 00:02:34,980
what is already already there for this

62
00:02:34,980 --> 00:02:37,200
we utilize both the quick and HTTP 3

63
00:02:37,200 --> 00:02:39,720
protocols which are new additions to the

64
00:02:39,720 --> 00:02:41,700
web Network stack and which provide a

65
00:02:41,700 --> 00:02:44,700
host of new functionalities such as new

66
00:02:44,700 --> 00:02:47,099
control messages for manipulating the

67
00:02:47,099 --> 00:02:48,739
flow between the client and the server

68
00:02:48,739 --> 00:02:52,620
the fact that quick is deployed in user

69
00:02:52,620 --> 00:02:54,480
space and so can be modified on a per

70
00:02:54,480 --> 00:02:57,540
application basis as well as features

71
00:02:57,540 --> 00:02:59,400
such as the fact that quick

72
00:02:59,400 --> 00:03:00,480
um

73
00:03:00,480 --> 00:03:03,720
that quick allows multiplexing multiple

74
00:03:03,720 --> 00:03:05,819
individual byte streams furthermore

75
00:03:05,819 --> 00:03:08,640
these Protocols are already deployed by

76
00:03:08,640 --> 00:03:10,440
most major browsers as well as large

77
00:03:10,440 --> 00:03:12,239
content providers

78
00:03:12,239 --> 00:03:14,340
the second Insight is that most web

79
00:03:14,340 --> 00:03:17,420
servers host resources Beyond those

80
00:03:17,420 --> 00:03:20,760
required to load any single web page and

81
00:03:20,760 --> 00:03:23,040
these resources can regardless of which

82
00:03:23,040 --> 00:03:24,659
web page is being viewed these resources

83
00:03:24,659 --> 00:03:27,420
can be requested to add chaff or padding

84
00:03:27,420 --> 00:03:29,400
from the server to the client

85
00:03:29,400 --> 00:03:31,200
the third Insight is that quick

86
00:03:31,200 --> 00:03:33,360
connections Multiplex multiple

87
00:03:33,360 --> 00:03:35,700
individual byte streams where each byte

88
00:03:35,700 --> 00:03:38,480
stream delivers a single HTTP resource

89
00:03:38,480 --> 00:03:40,860
furthermore each of these byte streams

90
00:03:40,860 --> 00:03:43,019
can be independently flow controlled by

91
00:03:43,019 --> 00:03:45,420
the client allowing prioritizing say

92
00:03:45,420 --> 00:03:48,360
application data from other data as well

93
00:03:48,360 --> 00:03:51,840
as even stopping or pausing one flow of

94
00:03:51,840 --> 00:03:54,239
data while allowing another

95
00:03:54,239 --> 00:03:57,599
this leads to our work which is qcsd so

96
00:03:57,599 --> 00:04:01,319
qcsd is a defense framework that takes

97
00:04:01,319 --> 00:04:02,879
us input and existing website

98
00:04:02,879 --> 00:04:04,140
fingerprinting defense from the

99
00:04:04,140 --> 00:04:05,099
literature

100
00:04:05,099 --> 00:04:07,620
and it uses instructions from these

101
00:04:07,620 --> 00:04:10,260
defenses to shape traffic both going

102
00:04:10,260 --> 00:04:12,000
from the client to the server as well as

103
00:04:12,000 --> 00:04:13,980
from the server to the client it does

104
00:04:13,980 --> 00:04:15,900
this without requiring any changes to

105
00:04:15,900 --> 00:04:17,699
the server or without and without

106
00:04:17,699 --> 00:04:19,380
requiring the deployment of anything new

107
00:04:19,380 --> 00:04:20,880
in the network

108
00:04:20,880 --> 00:04:22,680
furthermore it's a user space

109
00:04:22,680 --> 00:04:25,380
modification to a quick HTTP 3 library

110
00:04:25,380 --> 00:04:27,120
and so it can be deployed on a per

111
00:04:27,120 --> 00:04:29,520
application basis with the modifications

112
00:04:29,520 --> 00:04:31,620
being bundled with the with the

113
00:04:31,620 --> 00:04:32,940
application

114
00:04:32,940 --> 00:04:35,340
finally as a standards compliant

115
00:04:35,340 --> 00:04:38,040
modification to the quick HTTP 3 Library

116
00:04:38,040 --> 00:04:39,960
it's already compatible with existing

117
00:04:39,960 --> 00:04:41,580
web servers

118
00:04:41,580 --> 00:04:44,460
so how does qcsd work well let's

119
00:04:44,460 --> 00:04:46,560
consider a chaff only defense so that's

120
00:04:46,560 --> 00:04:49,259
a defense which only adds chaff or dummy

121
00:04:49,259 --> 00:04:51,300
traffic to the connection but doesn't

122
00:04:51,300 --> 00:04:54,660
otherwise delay the application data an

123
00:04:54,660 --> 00:04:56,940
example of this is the front defense

124
00:04:56,940 --> 00:05:00,720
well in a regular quick connection each

125
00:05:00,720 --> 00:05:03,300
stream that is opened in the connection

126
00:05:03,300 --> 00:05:06,840
delivers a resource for delivers a

127
00:05:06,840 --> 00:05:09,720
request for a single HTTP resource these

128
00:05:09,720 --> 00:05:11,580
requests can be bundled into a single

129
00:05:11,580 --> 00:05:13,139
packet or placed in multiple packets

130
00:05:13,139 --> 00:05:15,360
sent to the server which prepares the

131
00:05:15,360 --> 00:05:17,759
data bundles the data from one or more

132
00:05:17,759 --> 00:05:19,380
streams into one or more packets and

133
00:05:19,380 --> 00:05:21,180
sends this back to the client

134
00:05:21,180 --> 00:05:23,340
and a chef only defends this continues

135
00:05:23,340 --> 00:05:25,979
on abated and unaffected by the defense

136
00:05:25,979 --> 00:05:28,259
however when the defense indicates to

137
00:05:28,259 --> 00:05:31,320
qcsd that the client should send for

138
00:05:31,320 --> 00:05:34,500
example a burst of shaft traffic then

139
00:05:34,500 --> 00:05:37,259
qcsd leverages a feature of quick

140
00:05:37,259 --> 00:05:39,960
which is the ability to add pad and pink

141
00:05:39,960 --> 00:05:41,699
frames to a packet and it creates a

142
00:05:41,699 --> 00:05:43,400
packet with only these kinds of frames

143
00:05:43,400 --> 00:05:45,660
sends it to the server the server

144
00:05:45,660 --> 00:05:46,979
discards this and continues the

145
00:05:46,979 --> 00:05:48,539
communication as normal

146
00:05:48,539 --> 00:05:50,580
the addition of the Ping frame there is

147
00:05:50,580 --> 00:05:52,320
to ensure that the server treats this

148
00:05:52,320 --> 00:05:55,560
packet of essentially garbage as if it

149
00:05:55,560 --> 00:05:57,479
was an actual application packet sent

150
00:05:57,479 --> 00:05:59,100
from the server from the client to the

151
00:05:59,100 --> 00:06:00,660
server

152
00:06:00,660 --> 00:06:03,180
in the incoming Direction qcsd creates

153
00:06:03,180 --> 00:06:05,580
and maintains what we call chat streams

154
00:06:05,580 --> 00:06:07,979
so these Chef streams are essentially

155
00:06:07,979 --> 00:06:10,020
quick streams which are opened to

156
00:06:10,020 --> 00:06:12,300
request resources that are tangential to

157
00:06:12,300 --> 00:06:15,419
the loading of the web page qcsd tracks

158
00:06:15,419 --> 00:06:17,100
resources which can be used for that and

159
00:06:17,100 --> 00:06:19,680
caches them between and would cache them

160
00:06:19,680 --> 00:06:22,740
between different connections

161
00:06:22,740 --> 00:06:25,740
when the server receives a request for

162
00:06:25,740 --> 00:06:28,319
such a resource qcsd also blocks the

163
00:06:28,319 --> 00:06:30,360
server from actually sending data for

164
00:06:30,360 --> 00:06:32,280
these resources

165
00:06:32,280 --> 00:06:35,280
when the defense indicates that data

166
00:06:35,280 --> 00:06:36,780
should be pulled from the server to the

167
00:06:36,780 --> 00:06:40,139
client then qcsd releases data from one

168
00:06:40,139 --> 00:06:41,880
or more of these streams such as a total

169
00:06:41,880 --> 00:06:43,560
amount of data being pulled from the

170
00:06:43,560 --> 00:06:45,660
server to the client is equal to the

171
00:06:45,660 --> 00:06:47,819
amount indicated by the defense

172
00:06:47,819 --> 00:06:50,580
we note here that qcsd operates in the

173
00:06:50,580 --> 00:06:53,520
incoming Direction in intervals so it

174
00:06:53,520 --> 00:06:55,440
Aggregates commands from the defense

175
00:06:55,440 --> 00:06:58,020
over internal intervals such as it

176
00:06:58,020 --> 00:06:59,340
doesn't overload the server with control

177
00:06:59,340 --> 00:07:01,698
messages

178
00:07:01,740 --> 00:07:03,900
let's consider us um yeah let's consider

179
00:07:03,900 --> 00:07:06,120
a second type of Defense so that's um

180
00:07:06,120 --> 00:07:08,400
Chaffin delay defenses so these defenses

181
00:07:08,400 --> 00:07:10,080
in addition to adding shaft traffic to

182
00:07:10,080 --> 00:07:13,020
the connection also reshape the flow of

183
00:07:13,020 --> 00:07:16,139
application data for example by delaying

184
00:07:16,139 --> 00:07:18,720
the application data

185
00:07:18,720 --> 00:07:21,660
so here an example of this is Tamara by

186
00:07:21,660 --> 00:07:23,460
the way that we'll be using for this

187
00:07:23,460 --> 00:07:25,380
demonstration

188
00:07:25,380 --> 00:07:26,639
so here

189
00:07:26,639 --> 00:07:29,039
when the defense indicates that data

190
00:07:29,039 --> 00:07:30,360
should be sent from the client to the

191
00:07:30,360 --> 00:07:32,880
server well since qcsd is now also

192
00:07:32,880 --> 00:07:34,620
blocking the client from sending by

193
00:07:34,620 --> 00:07:37,500
default it first checks whether there's

194
00:07:37,500 --> 00:07:39,360
data pending at the client to be sent to

195
00:07:39,360 --> 00:07:41,460
the server it creates a packet with that

196
00:07:41,460 --> 00:07:43,560
data or multiple packets if the amount

197
00:07:43,560 --> 00:07:46,560
to be sent is over the MTU of the link

198
00:07:46,560 --> 00:07:49,380
and it pads this amount of data using

199
00:07:49,380 --> 00:07:51,240
pattern ping frames which it then sends

200
00:07:51,240 --> 00:07:53,400
to the server the server removes this

201
00:07:53,400 --> 00:07:56,099
information discards it as per the quick

202
00:07:56,099 --> 00:07:59,039
protocol and for the application data to

203
00:07:59,039 --> 00:08:02,039
the actual stream

204
00:08:02,039 --> 00:08:04,680
in the case of the incoming Direction so

205
00:08:04,680 --> 00:08:07,440
from the server to the client well qcsd

206
00:08:07,440 --> 00:08:09,780
also wants more application streams are

207
00:08:09,780 --> 00:08:12,240
being opened along with shaft streams

208
00:08:12,240 --> 00:08:15,120
being created by qcsd however unlike in

209
00:08:15,120 --> 00:08:17,639
the chat only case all of these streams

210
00:08:17,639 --> 00:08:20,220
are blocked by default from sending

211
00:08:20,220 --> 00:08:23,280
um from being sent from the server when

212
00:08:23,280 --> 00:08:25,560
the defense indicates that some data

213
00:08:25,560 --> 00:08:27,960
should be pulled from the server to the

214
00:08:27,960 --> 00:08:30,840
client then through tracking of in

215
00:08:30,840 --> 00:08:32,279
tracking of each of the individual

216
00:08:32,279 --> 00:08:34,860
streams through for example HTTP headers

217
00:08:34,860 --> 00:08:37,919
as well as through the framing that

218
00:08:37,919 --> 00:08:41,159
quick applies to to data streams

219
00:08:41,159 --> 00:08:43,860
um qcsd identifies one or several

220
00:08:43,860 --> 00:08:45,540
application streams which will

221
00:08:45,540 --> 00:08:47,339
contribute towards the amount indicated

222
00:08:47,339 --> 00:08:49,800
by the defense as well as one or several

223
00:08:49,800 --> 00:08:52,920
Chef streams to make the total

224
00:08:52,920 --> 00:08:54,899
information data pool from the server be

225
00:08:54,899 --> 00:08:56,399
equal to the amount indicated by the

226
00:08:56,399 --> 00:08:58,560
defense it then sends flow control

227
00:08:58,560 --> 00:09:00,540
credits from the client to the server to

228
00:09:00,540 --> 00:09:03,060
release data on those streams and the

229
00:09:03,060 --> 00:09:05,519
server bundles that into one or more

230
00:09:05,519 --> 00:09:08,399
packets and responds to the client

231
00:09:08,399 --> 00:09:12,360
we evaluated qcsd in

232
00:09:12,360 --> 00:09:14,880
um a series of uh website finger under a

233
00:09:14,880 --> 00:09:16,320
series of website fingerprinting attacks

234
00:09:16,320 --> 00:09:19,620
where we created a prototype of qcsd in

235
00:09:19,620 --> 00:09:23,100
mozilla's um quick HTTP 3 Library

236
00:09:23,100 --> 00:09:25,140
and we wrote a test client which takes

237
00:09:25,140 --> 00:09:28,440
us input a defense as well as

238
00:09:28,440 --> 00:09:31,320
um as well as a set of well resources

239
00:09:31,320 --> 00:09:34,620
and HTML pages to download as for each

240
00:09:34,620 --> 00:09:35,880
web page

241
00:09:35,880 --> 00:09:38,640
and we use this test client to collect

242
00:09:38,640 --> 00:09:42,540
several data sets of web pages collected

243
00:09:42,540 --> 00:09:44,700
over VPN from different from different

244
00:09:44,700 --> 00:09:48,120
Vantage points and each web's data set

245
00:09:48,120 --> 00:09:50,220
was shaped towards equal either front

246
00:09:50,220 --> 00:09:52,320
Tamara or not shipped at all so

247
00:09:52,320 --> 00:09:54,660
undefended for the undefended case we

248
00:09:54,660 --> 00:09:56,760
also simulated the defenses on the

249
00:09:56,760 --> 00:09:58,680
undefining setting to form kind of to

250
00:09:58,680 --> 00:10:00,120
form a comparison

251
00:10:00,120 --> 00:10:02,160
we evaluated each data set against

252
00:10:02,160 --> 00:10:03,959
several website fingerprinting attacks

253
00:10:03,959 --> 00:10:05,820
and for each measured precision and

254
00:10:05,820 --> 00:10:07,440
recall

255
00:10:07,440 --> 00:10:10,380
so what we observed was when for example

256
00:10:10,380 --> 00:10:12,180
shaping connections towards a single

257
00:10:12,180 --> 00:10:16,140
defense when shaping these connections

258
00:10:16,140 --> 00:10:19,740
towards a chef and shape defense or

259
00:10:19,740 --> 00:10:23,339
Japan delay defense such as Tamara qcsd

260
00:10:23,339 --> 00:10:25,260
is able to defend against attacks which

261
00:10:25,260 --> 00:10:27,240
utilize only size information such as a

262
00:10:27,240 --> 00:10:29,760
deep fingerprinting attack however in

263
00:10:29,760 --> 00:10:31,320
exact control from the server to the

264
00:10:31,320 --> 00:10:33,240
client leaks timing information which

265
00:10:33,240 --> 00:10:35,760
resulted in qcsd shaping towards Tamara

266
00:10:35,760 --> 00:10:37,980
not performing as well as when shaping

267
00:10:37,980 --> 00:10:40,680
to one ship when as well as simulated

268
00:10:40,680 --> 00:10:43,760
Tamara however when

269
00:10:43,760 --> 00:10:46,079
qcsd shaping towards a chef only defense

270
00:10:46,079 --> 00:10:49,500
like front it was able to meet or well

271
00:10:49,500 --> 00:10:51,959
quite exactly match the defense provided

272
00:10:51,959 --> 00:10:53,459
by such a

273
00:10:53,459 --> 00:10:56,399
um a chat only defense and in some cases

274
00:10:56,399 --> 00:10:58,500
even surpass the defense capability and

275
00:10:58,500 --> 00:10:59,880
but this is due to the addition of

276
00:10:59,880 --> 00:11:01,620
control messages to the to the network

277
00:11:01,620 --> 00:11:04,800
which is an additional source of noise

278
00:11:04,800 --> 00:11:07,500
furthermore we evaluated two additional

279
00:11:07,500 --> 00:11:09,300
scenarios so we evaluated shipping

280
00:11:09,300 --> 00:11:11,519
multiple connections towards a single

281
00:11:11,519 --> 00:11:13,260
defense as would be necessary when

282
00:11:13,260 --> 00:11:17,040
loading on a full web page as well as we

283
00:11:17,040 --> 00:11:19,140
defended actual Chrome browser traffic

284
00:11:19,140 --> 00:11:21,920
by shaping the overall VPN connection

285
00:11:21,920 --> 00:11:25,019
towards the defense by adding

286
00:11:25,019 --> 00:11:27,360
um chaff traffic with qcsd front towards

287
00:11:27,360 --> 00:11:30,120
the same web server

288
00:11:30,120 --> 00:11:32,519
in both of these scenarios we observed

289
00:11:32,519 --> 00:11:34,620
similar results where qcsd was able to

290
00:11:34,620 --> 00:11:36,300
defend the connections against web

291
00:11:36,300 --> 00:11:37,560
against the evaluated website

292
00:11:37,560 --> 00:11:39,000
fingerprinting attacks and the results

293
00:11:39,000 --> 00:11:41,880
are similar to what um we I have shown

294
00:11:41,880 --> 00:11:43,560
in these plots

295
00:11:43,560 --> 00:11:45,660
so in conclusion going back to our

296
00:11:45,660 --> 00:11:47,579
initial question can we defend against

297
00:11:47,579 --> 00:11:49,500
website fingerprinting attacks only from

298
00:11:49,500 --> 00:11:52,079
the client the answer is yes with or

299
00:11:52,079 --> 00:11:54,000
prototype of qcsd we demonstrated that

300
00:11:54,000 --> 00:11:55,500
this is possible without requiring

301
00:11:55,500 --> 00:11:57,120
changes to the server or deployment of

302
00:11:57,120 --> 00:11:58,800
in-network services

303
00:11:58,800 --> 00:12:00,959
and that we are able to defend both

304
00:12:00,959 --> 00:12:02,579
single connections multiple connections

305
00:12:02,579 --> 00:12:04,620
as well as for web page loads

306
00:12:04,620 --> 00:12:07,079
furthermore through our use of

307
00:12:07,079 --> 00:12:09,240
um or evaluations with quick and with

308
00:12:09,240 --> 00:12:10,920
the HTTP 3 protocols we found that there

309
00:12:10,920 --> 00:12:12,660
are very extensible and flexible

310
00:12:12,660 --> 00:12:15,120
protocols and as they're in the user

311
00:12:15,120 --> 00:12:16,860
space it this opens up on many

312
00:12:16,860 --> 00:12:18,300
possibilities for creating new and

313
00:12:18,300 --> 00:12:20,399
interesting privacy enhancing

314
00:12:20,399 --> 00:12:21,839
Technologies and we look forward to the

315
00:12:21,839 --> 00:12:23,760
work that will come out in that space

316
00:12:23,760 --> 00:12:26,160
with that I in my talk and I welcome

317
00:12:26,160 --> 00:12:29,420
your questions thank you

