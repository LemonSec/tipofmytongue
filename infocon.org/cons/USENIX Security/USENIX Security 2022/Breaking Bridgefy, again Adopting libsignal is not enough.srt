1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:09,980 --> 00:00:11,639
thank you

3
00:00:11,639 --> 00:00:15,420
so um bridgefry is a mobile messaging

4
00:00:15,420 --> 00:00:18,119
app that works without the internet it

5
00:00:18,119 --> 00:00:22,020
does so by ruling the messages of a mesh

6
00:00:22,020 --> 00:00:24,380
Network that it forms with the peers

7
00:00:24,380 --> 00:00:27,960
it's been downloaded roughly 8 million

8
00:00:27,960 --> 00:00:31,700
times now on Google Play

9
00:00:31,700 --> 00:00:35,940
and it's seen an uprising interest in

10
00:00:35,940 --> 00:00:40,079
especially areas with social unrest or

11
00:00:40,079 --> 00:00:43,399
more this includes the BLM protests

12
00:00:43,399 --> 00:00:46,620
Columbia Iran Hong Kong

13
00:00:46,620 --> 00:00:48,719
Etc

14
00:00:48,719 --> 00:00:52,140
um so two years ago researchers found

15
00:00:52,140 --> 00:00:54,539
severe vulnerabilities in in this mobile

16
00:00:54,539 --> 00:00:56,399
messenger and

17
00:00:56,399 --> 00:00:57,239
um

18
00:00:57,239 --> 00:01:00,539
we found that uh and and in response to

19
00:01:00,539 --> 00:01:02,760
that bridge fight tried to

20
00:01:02,760 --> 00:01:06,540
um improve and they employed signal the

21
00:01:06,540 --> 00:01:09,380
signal protocol for the network

22
00:01:09,380 --> 00:01:11,580
but they didn't do any assessment

23
00:01:11,580 --> 00:01:13,560
whatsoever and continued to claim that

24
00:01:13,560 --> 00:01:15,900
their app is secure thus putting

25
00:01:15,900 --> 00:01:19,439
potential users at risk

26
00:01:19,439 --> 00:01:21,659
um and in this work we found that their

27
00:01:21,659 --> 00:01:24,180
claims are not true we were able to

28
00:01:24,180 --> 00:01:26,520
break the private jets that are

29
00:01:26,520 --> 00:01:28,799
supported by the signal protocol uh

30
00:01:28,799 --> 00:01:30,180
disclaimer this does not break the

31
00:01:30,180 --> 00:01:32,520
signal protocol

32
00:01:32,520 --> 00:01:33,180
um

33
00:01:33,180 --> 00:01:35,759
so the app is not open source we had to

34
00:01:35,759 --> 00:01:37,560
reverse engineer it

35
00:01:37,560 --> 00:01:40,079
um and when we opened the app for the

36
00:01:40,079 --> 00:01:42,180
first time on our phone we will be

37
00:01:42,180 --> 00:01:45,259
assigned a 128-bit random

38
00:01:45,259 --> 00:01:50,939
integer that our ID in the network

39
00:01:50,939 --> 00:01:52,799
um and from now on we will call the text

40
00:01:52,799 --> 00:01:55,380
that the sender s sends to receive our

41
00:01:55,380 --> 00:01:58,380
uh the payload content

42
00:01:58,380 --> 00:02:01,079
so in this mesh Network we can do

43
00:02:01,079 --> 00:02:03,840
broadcast messages to all the users in

44
00:02:03,840 --> 00:02:06,420
the network we can also do

45
00:02:06,420 --> 00:02:07,340
um

46
00:02:07,340 --> 00:02:10,318
one-to-one packets to direct people

47
00:02:10,318 --> 00:02:13,260
around us or multi-hop packets of the

48
00:02:13,260 --> 00:02:17,640
mesh Network to a specific receiver

49
00:02:17,640 --> 00:02:20,280
um messages or packets are compressed

50
00:02:20,280 --> 00:02:22,620
first using g-step and then encrypted

51
00:02:22,620 --> 00:02:26,160
with a signal or asccp

52
00:02:26,160 --> 00:02:28,800
um signal is only used for the payloads

53
00:02:28,800 --> 00:02:32,120
when the receiver is a single user

54
00:02:32,120 --> 00:02:35,700
otherwise we use asecb and use a shared

55
00:02:35,700 --> 00:02:39,000
network key for the encryption for the

56
00:02:39,000 --> 00:02:41,519
bridge by messenger by the way we know

57
00:02:41,519 --> 00:02:42,959
this key because it's shipped with the

58
00:02:42,959 --> 00:02:44,640
app

59
00:02:44,640 --> 00:02:47,040
for the signal encryption

60
00:02:47,040 --> 00:02:50,400
um the handshake is quite triple so

61
00:02:50,400 --> 00:02:52,800
first the users exchange their user IDs

62
00:02:52,800 --> 00:02:54,900
and then there they exchange their

63
00:02:54,900 --> 00:02:56,900
pre-key bundles

64
00:02:56,900 --> 00:03:00,420
obviously this is susceptible to an

65
00:03:00,420 --> 00:03:02,000
attack in the middle

66
00:03:02,000 --> 00:03:04,860
we found an interesting attack though on

67
00:03:04,860 --> 00:03:07,140
on the private chats which consists of

68
00:03:07,140 --> 00:03:09,780
three steps and it's basically a timing

69
00:03:09,780 --> 00:03:11,760
issue

70
00:03:11,760 --> 00:03:15,840
um so first we say that Alice and Bob

71
00:03:15,840 --> 00:03:18,360
um they meet and they perform the

72
00:03:18,360 --> 00:03:20,300
handshake that we've just seen

73
00:03:20,300 --> 00:03:22,860
they can communicate and and then Bob

74
00:03:22,860 --> 00:03:24,120
leaves the scene

75
00:03:24,120 --> 00:03:26,940
so he's no longer in direct range of

76
00:03:26,940 --> 00:03:29,040
Alice

77
00:03:29,040 --> 00:03:30,900
then Mallory comes along

78
00:03:30,900 --> 00:03:32,700
um they also perform a normal handshake

79
00:03:32,700 --> 00:03:34,500
so up until this point nothing is

80
00:03:34,500 --> 00:03:36,360
suspicious

81
00:03:36,360 --> 00:03:39,300
um but uh now Alice wants to send Bob a

82
00:03:39,300 --> 00:03:43,159
message and Mallory is around so

83
00:03:43,159 --> 00:03:45,540
they already established a Bluetooth

84
00:03:45,540 --> 00:03:48,239
connection with Alice and they will try

85
00:03:48,239 --> 00:03:51,659
to remain Malory for the encryption

86
00:03:51,659 --> 00:03:55,319
layout so to speak but become Bob on the

87
00:03:55,319 --> 00:03:57,120
Bluetooth player

88
00:03:57,120 --> 00:03:57,720
um

89
00:03:57,720 --> 00:04:00,540
and so how the attack works is that

90
00:04:00,540 --> 00:04:02,640
Mallory performs a partial handshake

91
00:04:02,640 --> 00:04:05,640
which uh Bridge Phi makes possible

92
00:04:05,640 --> 00:04:08,099
um and sends their user ID again and now

93
00:04:08,099 --> 00:04:09,599
L is

94
00:04:09,599 --> 00:04:11,819
um will think that the session they have

95
00:04:11,819 --> 00:04:13,980
with uh Mallory is actually a session

96
00:04:13,980 --> 00:04:16,680
with Bob so when they send a message the

97
00:04:16,680 --> 00:04:18,600
message is queued into this Bluetooth

98
00:04:18,600 --> 00:04:19,680
session

99
00:04:19,680 --> 00:04:23,419
and right before the message is

100
00:04:23,419 --> 00:04:26,639
submitted to the transmitter the

101
00:04:26,639 --> 00:04:28,860
encryption is performed

102
00:04:28,860 --> 00:04:29,460
um

103
00:04:29,460 --> 00:04:32,460
but if if Mallory now sends again their

104
00:04:32,460 --> 00:04:36,300
use ID as uh so to speak second partial

105
00:04:36,300 --> 00:04:38,940
handshake they switched the ID of the

106
00:04:38,940 --> 00:04:40,560
session again

107
00:04:40,560 --> 00:04:43,020
um and hence the encryption will be

108
00:04:43,020 --> 00:04:45,660
performed with Mallory's public key and

109
00:04:45,660 --> 00:04:48,000
now Mallory receives

110
00:04:48,000 --> 00:04:50,040
um the the message that was intended for

111
00:04:50,040 --> 00:04:52,139
Bob and it's also encrypted with their

112
00:04:52,139 --> 00:04:53,220
public key

113
00:04:53,220 --> 00:04:55,320
so they can read it

114
00:04:55,320 --> 00:04:57,900
and we'll see a demo if time allows

115
00:04:57,900 --> 00:04:59,100
later on

116
00:04:59,100 --> 00:05:01,560
the second attack we found is a

117
00:05:01,560 --> 00:05:05,520
broadcast message recovery and here we

118
00:05:05,520 --> 00:05:07,560
assume that the key is unknown

119
00:05:07,560 --> 00:05:11,040
the um Bridge Phi has an architecture

120
00:05:11,040 --> 00:05:13,620
where they they base the actual mesh

121
00:05:13,620 --> 00:05:17,040
Network on an SDK and a commercial one

122
00:05:17,040 --> 00:05:18,840
um so anyone can basically Implement

123
00:05:18,840 --> 00:05:21,600
their own mesh network with it and let's

124
00:05:21,600 --> 00:05:23,520
say a group of users has their own

125
00:05:23,520 --> 00:05:26,580
bridge fire app where we don't know the

126
00:05:26,580 --> 00:05:28,020
shared key

127
00:05:28,020 --> 00:05:30,660
and because we know that compression

128
00:05:30,660 --> 00:05:33,479
precedes encryption and we think about

129
00:05:33,479 --> 00:05:36,419
the two payload contents password and a

130
00:05:36,419 --> 00:05:39,960
lot of ones we can already sort of guess

131
00:05:39,960 --> 00:05:41,600
that

132
00:05:41,600 --> 00:05:43,860
ciphertext with the ones will be a lot

133
00:05:43,860 --> 00:05:47,039
shorter because of the compression

134
00:05:47,039 --> 00:05:49,620
so I went uh with this we can we can

135
00:05:49,620 --> 00:05:51,060
build something like a compression

136
00:05:51,060 --> 00:05:53,220
Oracle attack

137
00:05:53,220 --> 00:05:55,080
um so let's say we have a set of

138
00:05:55,080 --> 00:05:57,000
possible payload contents

139
00:05:57,000 --> 00:06:00,240
um that that means in in this chat room

140
00:06:00,240 --> 00:06:02,820
we assume the users send specific

141
00:06:02,820 --> 00:06:05,940
messages and when listening in when the

142
00:06:05,940 --> 00:06:07,259
attack is listening in on the network

143
00:06:07,259 --> 00:06:09,960
all the broadcast messages will

144
00:06:09,960 --> 00:06:13,560
um be Pi which is an element of this set

145
00:06:13,560 --> 00:06:15,000
and

146
00:06:15,000 --> 00:06:18,539
um then we we did this with two choices

147
00:06:18,539 --> 00:06:20,940
for for the payload content set so we

148
00:06:20,940 --> 00:06:23,520
have one is just individual bytes and

149
00:06:23,520 --> 00:06:25,620
the other one is same length passwords

150
00:06:25,620 --> 00:06:28,740
from from the rocky list

151
00:06:28,740 --> 00:06:31,440
then we do a two-step attacks so the

152
00:06:31,440 --> 00:06:33,479
first one is an offline simulation where

153
00:06:33,479 --> 00:06:35,880
we just simulate the network

154
00:06:35,880 --> 00:06:39,240
um and try to derive the probability of

155
00:06:39,240 --> 00:06:41,580
observing specific lengths at specific

156
00:06:41,580 --> 00:06:44,460
hops in the network uh with certain

157
00:06:44,460 --> 00:06:48,300
payload contents here a hub is

158
00:06:48,300 --> 00:06:50,460
um let's say when when the message is

159
00:06:50,460 --> 00:06:52,740
relayed throughout the network it

160
00:06:52,740 --> 00:06:55,080
surpasses different tiers and we call

161
00:06:55,080 --> 00:06:57,539
each peer here a hub

162
00:06:57,539 --> 00:07:00,720
and then the second second part is where

163
00:07:00,720 --> 00:07:03,840
we go online and try to sniff the

164
00:07:03,840 --> 00:07:06,240
um sniff in the network and we record

165
00:07:06,240 --> 00:07:07,979
the lengths that we observe at the

166
00:07:07,979 --> 00:07:09,780
different tops

167
00:07:09,780 --> 00:07:12,000
um and then based on the observed length

168
00:07:12,000 --> 00:07:14,400
and the probabilities we perform a

169
00:07:14,400 --> 00:07:16,740
maximum likelihood estimation to derive

170
00:07:16,740 --> 00:07:18,360
a gas Pi hat

171
00:07:18,360 --> 00:07:21,120
and uh if this guesses then the actual

172
00:07:21,120 --> 00:07:23,699
payloads in in the packets then our

173
00:07:23,699 --> 00:07:25,380
attack was successful

174
00:07:25,380 --> 00:07:28,740
and he first we tried to see how we

175
00:07:28,740 --> 00:07:31,080
compare against random guessing and oops

176
00:07:31,080 --> 00:07:34,259
we clearly see that we outperform it

177
00:07:34,259 --> 00:07:36,660
um what we see here is uh

178
00:07:36,660 --> 00:07:39,840
um the frequency of ranks below a

179
00:07:39,840 --> 00:07:43,380
certain number and rank here means that

180
00:07:43,380 --> 00:07:46,860
um it's it's it's sort of the index of

181
00:07:46,860 --> 00:07:48,860
the actual payload in the messages

182
00:07:48,860 --> 00:07:52,020
within our set of candidates that we

183
00:07:52,020 --> 00:07:54,680
derived with maximum likely estimation

184
00:07:54,680 --> 00:07:57,360
and maximum likelihood estimation gives

185
00:07:57,360 --> 00:08:00,300
us a set of candidates the first one

186
00:08:00,300 --> 00:08:03,199
being the most likely

187
00:08:03,240 --> 00:08:06,000
um and we also see uh we we did some

188
00:08:06,000 --> 00:08:07,979
some tests and we saw that when

189
00:08:07,979 --> 00:08:10,020
increasing the number of messages that

190
00:08:10,020 --> 00:08:13,560
we observe in network and also the depth

191
00:08:13,560 --> 00:08:15,720
in which we track packets uh in the

192
00:08:15,720 --> 00:08:16,800
network

193
00:08:16,800 --> 00:08:19,440
um we come very close to

194
00:08:19,440 --> 00:08:21,900
um an ideal attack where we um are very

195
00:08:21,900 --> 00:08:25,199
likely to guess the real payloads each

196
00:08:25,199 --> 00:08:27,120
time

197
00:08:27,120 --> 00:08:30,240
britify responded on their blog saying

198
00:08:30,240 --> 00:08:32,640
very positively saying that they're they

199
00:08:32,640 --> 00:08:34,440
were happy that their app was encrypted

200
00:08:34,440 --> 00:08:37,679
and they also hint that no technical

201
00:08:37,679 --> 00:08:40,919
product is 100 safe

202
00:08:40,919 --> 00:08:41,700
um

203
00:08:41,700 --> 00:08:43,979
yeah but no seriously our conclusion

204
00:08:43,979 --> 00:08:44,880
here

205
00:08:44,880 --> 00:08:47,820
um is that bridge fight is um still has

206
00:08:47,820 --> 00:08:50,220
privacy issues they they still do not

207
00:08:50,220 --> 00:08:52,800
have a track record that speaks for uh

208
00:08:52,800 --> 00:08:54,899
the needs of Their audience uh which are

209
00:08:54,899 --> 00:08:57,779
likely high risk users

210
00:08:57,779 --> 00:09:00,899
um we also found that securing

211
00:09:00,899 --> 00:09:03,120
applications cryptographically is still

212
00:09:03,120 --> 00:09:04,860
non-trivial

213
00:09:04,860 --> 00:09:07,140
um and we don't see a good alternative

214
00:09:07,140 --> 00:09:10,019
to bridgefy we know there is prior but

215
00:09:10,019 --> 00:09:11,880
um we don't see it having the same

216
00:09:11,880 --> 00:09:13,620
popularity

217
00:09:13,620 --> 00:09:16,680
um in these situations and regions as

218
00:09:16,680 --> 00:09:19,399
bridge fire

219
00:09:20,160 --> 00:09:22,140
um all right then let me maybe show you

220
00:09:22,140 --> 00:09:24,540
a demo of the first attack

221
00:09:24,540 --> 00:09:25,620
um

222
00:09:25,620 --> 00:09:27,600
here we see Alice and Bob on the left

223
00:09:27,600 --> 00:09:30,839
and right uh we we then see how the

224
00:09:30,839 --> 00:09:32,940
attacker sniffs into the network and

225
00:09:32,940 --> 00:09:35,339
Alice and Bob just normally exchanging

226
00:09:35,339 --> 00:09:37,140
messages

227
00:09:37,140 --> 00:09:38,700
um that way the attacker can find out

228
00:09:38,700 --> 00:09:41,700
the use ID of both entities in the

229
00:09:41,700 --> 00:09:43,820
network

230
00:09:44,100 --> 00:09:47,519
um we then send a private message from

231
00:09:47,519 --> 00:09:50,300
Alice to Bob

232
00:09:51,360 --> 00:09:54,740
and pop receives it

233
00:09:55,920 --> 00:09:57,899
so at this point the handshake between

234
00:09:57,899 --> 00:09:59,940
those both um Pierce was already

235
00:09:59,940 --> 00:10:03,000
performed and then we say that Bob goes

236
00:10:03,000 --> 00:10:05,360
offline

237
00:10:20,760 --> 00:10:23,480
so now the attacker finds out their ID

238
00:10:23,480 --> 00:10:27,600
and they launch a talk to attack

239
00:10:27,600 --> 00:10:30,300
um on Alice

240
00:10:30,300 --> 00:10:32,519
which allows them to intercept messages

241
00:10:32,519 --> 00:10:36,080
that are then intended for Bob

242
00:10:37,380 --> 00:10:40,080
so if Alice now sends messages to Bob

243
00:10:40,080 --> 00:10:44,100
they actually are received on Mallory's

244
00:10:44,100 --> 00:10:46,339
end

245
00:10:50,760 --> 00:10:53,399
and this is a timing attack so it's not

246
00:10:53,399 --> 00:10:56,160
working for all messages

247
00:10:56,160 --> 00:10:57,779
all right

248
00:10:57,779 --> 00:11:01,860
then thank you for listening and

249
00:11:01,860 --> 00:11:05,899
I'm happy to take your questions

