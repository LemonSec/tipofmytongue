1
00:00:08,000 --> 00:00:10,440
so good afternoon everyone my name is

2
00:00:10,440 --> 00:00:13,620
Julian I'm from UC Riverside and I'm the

3
00:00:13,620 --> 00:00:16,320
first verse of this execution paper this

4
00:00:16,320 --> 00:00:18,359
is a joint work with Seoul national

5
00:00:18,359 --> 00:00:21,240
university and the heist

6
00:00:21,240 --> 00:00:23,100
um so first of all so this work concerns

7
00:00:23,100 --> 00:00:25,019
about Cancun execution so let's just

8
00:00:25,019 --> 00:00:27,480
have a quick recap so give me a concrete

9
00:00:27,480 --> 00:00:30,840
input the job of execution is to explore

10
00:00:30,840 --> 00:00:34,500
all the alternative execution passes so

11
00:00:34,500 --> 00:00:36,960
the execution the contact execute term

12
00:00:36,960 --> 00:00:38,940
maintains a concrete State and a

13
00:00:38,940 --> 00:00:41,579
symbolic State and updates both states

14
00:00:41,579 --> 00:00:44,100
around the execution so whenever a

15
00:00:44,100 --> 00:00:46,160
branch condition is met the conclusive

16
00:00:46,160 --> 00:00:49,140
executor tries to flip the target Branch

17
00:00:49,140 --> 00:00:52,559
by constructing the um the formula and

18
00:00:52,559 --> 00:00:54,180
asking the Constitution software to

19
00:00:54,180 --> 00:00:56,640
generate the input that can explore the

20
00:00:56,640 --> 00:00:58,680
opposite direction of the targeted

21
00:00:58,680 --> 00:01:00,780
Branch so in this case we're generous

22
00:01:00,780 --> 00:01:03,899
three two test inputs and together with

23
00:01:03,899 --> 00:01:05,700
original input we can cover all the

24
00:01:05,700 --> 00:01:09,360
execution passes so um the execution is

25
00:01:09,360 --> 00:01:12,180
a very useful tool but it is slow to see

26
00:01:12,180 --> 00:01:14,340
the overhead so let's consider a very

27
00:01:14,340 --> 00:01:17,340
simple statement where the circuit add

28
00:01:17,340 --> 00:01:20,640
is a arbitrary binary operation so to

29
00:01:20,640 --> 00:01:23,939
symbolic uh symbolic executed statement

30
00:01:23,939 --> 00:01:27,060
the conclusive executor will perform the

31
00:01:27,060 --> 00:01:29,400
following steps so first step is to pass

32
00:01:29,400 --> 00:01:32,759
the execute the instruction where the

33
00:01:32,759 --> 00:01:35,579
semantics of the operations is extracted

34
00:01:35,579 --> 00:01:38,040
from the from the code so there are

35
00:01:38,040 --> 00:01:40,079
generally two ways to do this the first

36
00:01:40,079 --> 00:01:43,860
way is to through interpretation and

37
00:01:43,860 --> 00:01:47,159
which is very slow uh the second way is

38
00:01:47,159 --> 00:01:49,079
done through instrumentation and it's

39
00:01:49,079 --> 00:01:52,140
way more fast faster and it is adopted

40
00:01:52,140 --> 00:01:55,560
by recent Works accusing same cumu same

41
00:01:55,560 --> 00:01:58,920
CC and also this works in sum the reason

42
00:01:58,920 --> 00:01:59,899
why

43
00:01:59,899 --> 00:02:02,520
instrumentation is fast is because the

44
00:02:02,520 --> 00:02:05,479
passing is done only once either ID

45
00:02:05,479 --> 00:02:10,080
compilation phase or at the binary code

46
00:02:10,080 --> 00:02:13,319
translation phase and there are two more

47
00:02:13,319 --> 00:02:16,980
overhead sources first one is E2 locate

48
00:02:16,980 --> 00:02:20,580
access the symbolic expressions from the

49
00:02:20,580 --> 00:02:23,160
symbolic State and also we need to

50
00:02:23,160 --> 00:02:27,020
create and update the uh the symbolic

51
00:02:27,020 --> 00:02:30,840
expression to the to the shared memory

52
00:02:30,840 --> 00:02:34,620
for the results and we according to our

53
00:02:34,620 --> 00:02:37,800
profiling we find that locating creating

54
00:02:37,800 --> 00:02:41,220
and updating symbolic extractions have

55
00:02:41,220 --> 00:02:43,980
long trivial overhead and this is the

56
00:02:43,980 --> 00:02:46,800
target problem that this work tries to

57
00:02:46,800 --> 00:02:48,540
solve

58
00:02:48,540 --> 00:02:50,459
um so our insight to reduce the overhead

59
00:02:50,459 --> 00:02:53,760
is really straightforward because uh we

60
00:02:53,760 --> 00:02:57,300
observed we realized that execution is

61
00:02:57,300 --> 00:03:00,360
just a special form of dynamic data flow

62
00:03:00,360 --> 00:03:03,599
analysis so a conclus executor can be

63
00:03:03,599 --> 00:03:06,840
easily simply implemented on top of data

64
00:03:06,840 --> 00:03:08,760
folder sanitizer which is highly

65
00:03:08,760 --> 00:03:10,560
optimized

66
00:03:10,560 --> 00:03:13,200
so to use Samsung is quite simple so you

67
00:03:13,200 --> 00:03:15,840
it is similar to things CC so you just

68
00:03:15,840 --> 00:03:17,459
need to point the compiler to Samsung

69
00:03:17,459 --> 00:03:22,319
and that's it so let's Sims and also

70
00:03:22,319 --> 00:03:25,860
instrument the code in the llm IR level

71
00:03:25,860 --> 00:03:28,760
and it has a runtime to manage some

72
00:03:28,760 --> 00:03:33,840
expressions and connect constraints

73
00:03:33,840 --> 00:03:37,080
so to see why the clinical execution can

74
00:03:37,080 --> 00:03:40,200
be implemented as a on top of the data

75
00:03:40,200 --> 00:03:43,379
flow analysis framework so I want to go

76
00:03:43,379 --> 00:03:45,720
through this so let's just compare the

77
00:03:45,720 --> 00:03:47,940
generic data flow analysis with the

78
00:03:47,940 --> 00:03:50,940
concurrency execution so a dynamic data

79
00:03:50,940 --> 00:03:51,620
for

80
00:03:51,620 --> 00:03:54,239
analyzer tracks the information flow

81
00:03:54,239 --> 00:03:57,120
between sources and the things so it can

82
00:03:57,120 --> 00:03:59,220
conceptually a dynamic data flow

83
00:03:59,220 --> 00:04:01,920
analysis framework Associates each

84
00:04:01,920 --> 00:04:04,319
program variable is a label which

85
00:04:04,319 --> 00:04:07,080
represents its properties meaning how

86
00:04:07,080 --> 00:04:09,780
its value depends on the source a

87
00:04:09,780 --> 00:04:11,819
dynamic data flow analyte analysis

88
00:04:11,819 --> 00:04:14,459
framework is defined by a policy which

89
00:04:14,459 --> 00:04:16,858
describes how levels introduced

90
00:04:16,858 --> 00:04:20,279
propagated and used so it is easy to see

91
00:04:20,279 --> 00:04:23,880
that conclusive execution perfectly fits

92
00:04:23,880 --> 00:04:25,620
in this framework

93
00:04:25,620 --> 00:04:27,960
specifically the labor source and just

94
00:04:27,960 --> 00:04:30,780
program inputs the propagation rules

95
00:04:30,780 --> 00:04:34,020
just Define how new symbolic expressions

96
00:04:34,020 --> 00:04:37,620
are constructed based on the cement here

97
00:04:37,620 --> 00:04:40,560
with each instruction the enabled things

98
00:04:40,560 --> 00:04:44,280
are just conditional branches where we

99
00:04:44,280 --> 00:04:48,320
update the past constraints

100
00:04:48,780 --> 00:04:53,400
so so to connect each level represents a

101
00:04:53,400 --> 00:04:55,380
simple expression we just need to

102
00:04:55,380 --> 00:04:59,759
leverage uh dfsense unit table so each

103
00:04:59,759 --> 00:05:02,699
slot in this unit table stores a data

104
00:05:02,699 --> 00:05:05,639
structure which will extend to represent

105
00:05:05,639 --> 00:05:07,560
the symbolic expression

106
00:05:07,560 --> 00:05:10,320
so in this data structure you only need

107
00:05:10,320 --> 00:05:12,600
to remember the left hand side of hand

108
00:05:12,600 --> 00:05:15,780
and left right hand side operand and

109
00:05:15,780 --> 00:05:18,660
upper code and concrete operands and

110
00:05:18,660 --> 00:05:20,699
things like this

111
00:05:20,699 --> 00:05:23,880
um so it is also easy to see with this

112
00:05:23,880 --> 00:05:27,060
uh data structure design you are we're

113
00:05:27,060 --> 00:05:31,800
actually building a abstract syntax tree

114
00:05:31,800 --> 00:05:35,180
with this unit table

115
00:05:35,759 --> 00:05:39,300
uh so here's a running example so uh so

116
00:05:39,300 --> 00:05:41,580
before the execution you can see that in

117
00:05:41,580 --> 00:05:44,280
the standard memory we have X map to

118
00:05:44,280 --> 00:05:48,240
label 101 which in this slot in the

119
00:05:48,240 --> 00:05:51,539
store system expression for x and uh in

120
00:05:51,539 --> 00:05:53,820
the next I will have a next another

121
00:05:53,820 --> 00:05:57,000
mapping from y to 102 and you have

122
00:05:57,000 --> 00:05:58,800
another slot in this unit table

123
00:05:58,800 --> 00:06:01,860
corresponding to X symbolic expression

124
00:06:01,860 --> 00:06:05,340
for y and after each version you have

125
00:06:05,340 --> 00:06:08,699
new mapping and also you insert a new

126
00:06:08,699 --> 00:06:11,759
slot in this Union table so so that's

127
00:06:11,759 --> 00:06:14,880
that's it it's straightforward so why

128
00:06:14,880 --> 00:06:17,280
similar sign is faster is because it

129
00:06:17,280 --> 00:06:19,139
inherits all the advantage from div

130
00:06:19,139 --> 00:06:20,580
stand

131
00:06:20,580 --> 00:06:21,240
um

132
00:06:21,240 --> 00:06:23,580
so I have summarized the key factors for

133
00:06:23,580 --> 00:06:25,740
the performance Advantage so first of

134
00:06:25,740 --> 00:06:28,800
all in SimCity using smart pointers

135
00:06:28,800 --> 00:06:31,560
which are loaded from the store to

136
00:06:31,560 --> 00:06:33,960
Shadow memory and pass along the

137
00:06:33,960 --> 00:06:35,580
execution

138
00:06:35,580 --> 00:06:38,220
and according to our profiling handling

139
00:06:38,220 --> 00:06:40,259
spark pointers impose a significant

140
00:06:40,259 --> 00:06:43,319
overheads while while in Simpson we just

141
00:06:43,319 --> 00:06:45,840
pass around a it's an inter-bit integer

142
00:06:45,840 --> 00:06:48,120
which is basically the just index for

143
00:06:48,120 --> 00:06:50,580
that Union table

144
00:06:50,580 --> 00:06:52,560
um the second reason is that for the

145
00:06:52,560 --> 00:06:55,440
general memory access in the same CC it

146
00:06:55,440 --> 00:06:58,800
uses a tree map and it has a long

147
00:06:58,800 --> 00:07:01,919
constant overhead for each access but

148
00:07:01,919 --> 00:07:04,020
for things because it's built based on

149
00:07:04,020 --> 00:07:07,020
DF sun and use it uses directly mapping

150
00:07:07,020 --> 00:07:09,600
so it has a constant Shadow memory

151
00:07:09,600 --> 00:07:11,580
access time

152
00:07:11,580 --> 00:07:15,419
and the follow allocation cmcc uses you

153
00:07:15,419 --> 00:07:18,960
know cause a malloc but things are just

154
00:07:18,960 --> 00:07:21,840
kind of use a atomic instruction

155
00:07:21,840 --> 00:07:24,360
and for the argument of having written

156
00:07:24,360 --> 00:07:28,020
value passing uh Simpson SimCity uh uses

157
00:07:28,020 --> 00:07:31,319
this C plus plus container and it

158
00:07:31,319 --> 00:07:33,960
involves a multiple function calls but

159
00:07:33,960 --> 00:07:37,819
for Sim size it just uses a local

160
00:07:37,819 --> 00:07:40,979
Australia logo storage and owning a

161
00:07:40,979 --> 00:07:43,139
single move instruction is needed to

162
00:07:43,139 --> 00:07:46,440
pass along the arguments so combine all

163
00:07:46,440 --> 00:07:48,840
these things together since

164
00:07:48,840 --> 00:07:51,960
um much faster than the existing tools

165
00:07:51,960 --> 00:07:55,680
you can see that so this result is

166
00:07:55,680 --> 00:07:58,620
aggregated result from running 20 real

167
00:07:58,620 --> 00:08:01,039
world programs so

168
00:08:01,039 --> 00:08:03,300
regarding the construction connecting

169
00:08:03,300 --> 00:08:06,120
speed you can see that scene size uh

170
00:08:06,120 --> 00:08:07,860
significantly faster than it existing

171
00:08:07,860 --> 00:08:11,699
tools and also with these benefits we

172
00:08:11,699 --> 00:08:13,740
can actually solve

173
00:08:13,740 --> 00:08:16,800
twice more constraints came in the same

174
00:08:16,800 --> 00:08:20,039
time budget for each input

175
00:08:20,039 --> 00:08:22,259
another good thing for Samsung is that

176
00:08:22,259 --> 00:08:24,539
the symbolic expression design is really

177
00:08:24,539 --> 00:08:28,500
compact so the memory so it consumes

178
00:08:28,500 --> 00:08:31,500
much less memory uh so according to our

179
00:08:31,500 --> 00:08:33,839
results are Simpson consumes one order

180
00:08:33,839 --> 00:08:37,260
of magnitudinals memory than 7cc which

181
00:08:37,260 --> 00:08:39,839
is a good thing because with this small

182
00:08:39,839 --> 00:08:41,360
memory

183
00:08:41,360 --> 00:08:44,820
requirements we can do ethical as

184
00:08:44,820 --> 00:08:47,839
solving very easily

185
00:08:48,839 --> 00:08:52,500
um so we our kind of had uh the uh Sim

186
00:08:52,500 --> 00:08:56,040
Service uh mutation of other and uh we

187
00:08:56,040 --> 00:08:58,080
get a hybrid father and I will input

188
00:08:58,080 --> 00:09:00,899
this uh hybridifier to fast bench and

189
00:09:00,899 --> 00:09:03,180
currently we have a very good results in

190
00:09:03,180 --> 00:09:07,699
the Google's first bench uh benchmark

191
00:09:07,860 --> 00:09:11,040
so NASA want to talk about uh several

192
00:09:11,040 --> 00:09:14,160
takeaways so first of all Sim size is a

193
00:09:14,160 --> 00:09:15,959
very efficient contract executor is

194
00:09:15,959 --> 00:09:18,060
built on top of DF Sun

195
00:09:18,060 --> 00:09:21,600
and if I if we are trying to perform if

196
00:09:21,600 --> 00:09:23,519
you're trying to do a source-based on

197
00:09:23,519 --> 00:09:25,560
color execution you should at least try

198
00:09:25,560 --> 00:09:29,100
our tools which I believe we have a near

199
00:09:29,100 --> 00:09:31,140
Optimal Performance in all the soft

200
00:09:31,140 --> 00:09:34,800
space concoct executors

201
00:09:34,800 --> 00:09:37,680
and I'm not trying to block here but if

202
00:09:37,680 --> 00:09:39,860
you pair Simpson with our

203
00:09:39,860 --> 00:09:43,320
optimized construction server uh jigsaw

204
00:09:43,320 --> 00:09:45,899
you are you kind of gather very fast

205
00:09:45,899 --> 00:09:48,899
executor

206
00:09:49,140 --> 00:09:51,540
and she was very useful animal help this

207
00:09:51,540 --> 00:09:53,880
combination similar with and a jigsaw

208
00:09:53,880 --> 00:09:57,500
become the foundation to solve many

209
00:09:57,500 --> 00:10:00,600
bottlenecks in the chemical execution

210
00:10:00,600 --> 00:10:03,600
domain

211
00:10:03,720 --> 00:10:06,720
of course Samsung is open sourced you're

212
00:10:06,720 --> 00:10:10,140
welcome to try our two and thank you

213
00:10:10,140 --> 00:10:12,480
very much for listening and uh I'm open

214
00:10:12,480 --> 00:10:14,959
to questions

