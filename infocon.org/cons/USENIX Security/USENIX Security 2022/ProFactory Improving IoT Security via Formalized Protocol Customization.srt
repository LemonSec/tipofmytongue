1
00:00:07,280 --> 00:00:09,300
thank you

2
00:00:09,300 --> 00:00:12,059
good afternoon everyone thanks a lot for

3
00:00:12,059 --> 00:00:13,799
your attendance today I will give a

4
00:00:13,799 --> 00:00:15,900
brief introduction of our project Pro

5
00:00:15,900 --> 00:00:18,539
Factory improving iot security while

6
00:00:18,539 --> 00:00:21,000
formalized protocol customization this

7
00:00:21,000 --> 00:00:23,220
will goes down where I was in Purdue and

8
00:00:23,220 --> 00:00:25,140
it was a joint work with my colleagues

9
00:00:25,140 --> 00:00:27,180
advisors and professors from University

10
00:00:27,180 --> 00:00:29,699
of Waterloo and epfl

11
00:00:29,699 --> 00:00:31,380
first let's take a look at the

12
00:00:31,380 --> 00:00:33,600
background of this project nowadays iot

13
00:00:33,600 --> 00:00:36,059
devices have ubiquitous connectivity and

14
00:00:36,059 --> 00:00:38,100
they're almost everywhere for the data

15
00:00:38,100 --> 00:00:40,379
from statista 4.2 billion Bluetooth

16
00:00:40,379 --> 00:00:43,079
devices were shipped in 2019 and

17
00:00:43,079 --> 00:00:45,600
forecasted by the Forbes the market

18
00:00:45,600 --> 00:00:48,600
value of zigbee will be around 4.1

19
00:00:48,600 --> 00:00:52,200
billion by 2023 therefore iot devices

20
00:00:52,200 --> 00:00:55,379
are becoming prevalent targets of cyber

21
00:00:55,379 --> 00:00:58,500
attacks and more than 120 iot specific

22
00:00:58,500 --> 00:01:00,719
cbes were newly discussed in the past

23
00:01:00,719 --> 00:01:02,879
five years for those vulnerabilities

24
00:01:02,879 --> 00:01:05,339
performing firmware bug fixing after

25
00:01:05,339 --> 00:01:07,799
product shipment is quite expensive and

26
00:01:07,799 --> 00:01:10,500
challenging to this end we propose to

27
00:01:10,500 --> 00:01:12,900
advert such vulnerabilities up front

28
00:01:12,900 --> 00:01:15,600
specifically we want to formulate an

29
00:01:15,600 --> 00:01:17,700
unambiguously Model A protocol and

30
00:01:17,700 --> 00:01:19,680
generate a secure implementation for the

31
00:01:19,680 --> 00:01:21,659
protocol model

32
00:01:21,659 --> 00:01:24,060
the motivation of this project is based

33
00:01:24,060 --> 00:01:27,119
on two key observations first we observe

34
00:01:27,119 --> 00:01:28,759
that the majority of those

35
00:01:28,759 --> 00:01:31,200
vulnerabilities are due to incredible

36
00:01:31,200 --> 00:01:33,960
match passing in particular lack of

37
00:01:33,960 --> 00:01:36,420
sending check or for example lens check

38
00:01:36,420 --> 00:01:38,340
and value range check and passing

39
00:01:38,340 --> 00:01:40,619
ambiguity for example diverted

40
00:01:40,619 --> 00:01:42,780
specification understanding across

41
00:01:42,780 --> 00:01:45,540
different developers the post-mortem

42
00:01:45,540 --> 00:01:48,540
graphic fiction finding for those uh

43
00:01:48,540 --> 00:01:51,840
variabilities is quite expensive now

44
00:01:51,840 --> 00:01:53,579
let's look at a simple example of

45
00:01:53,579 --> 00:01:55,740
message passing error in Linux blue the

46
00:01:55,740 --> 00:01:58,320
air to cup implementation where the blue

47
00:01:58,320 --> 00:02:00,960
lines represent the patch the error

48
00:02:00,960 --> 00:02:02,579
happens when constructing a

49
00:02:02,579 --> 00:02:04,439
configuration response message in

50
00:02:04,439 --> 00:02:06,840
passing a configuration request we can

51
00:02:06,840 --> 00:02:09,360
see the pointer of the buffer defined in

52
00:02:09,360 --> 00:02:13,800
line 4171 is finally moved in line 29.99

53
00:02:13,800 --> 00:02:16,379
without any boundary check leading to

54
00:02:16,379 --> 00:02:18,480
buffer overflow in the perspective of

55
00:02:18,480 --> 00:02:20,580
coding or programming it is a common

56
00:02:20,580 --> 00:02:23,040
memory vulnerability however in the

57
00:02:23,040 --> 00:02:24,980
perspective of protocol specification

58
00:02:24,980 --> 00:02:27,660
response message is under specified

59
00:02:27,660 --> 00:02:30,420
because the metric number of buffer size

60
00:02:30,420 --> 00:02:33,420
64 is not clarified in any part of the

61
00:02:33,420 --> 00:02:36,540
L2 L2 cup specification

62
00:02:36,540 --> 00:02:39,300
the second observing observation is that

63
00:02:39,300 --> 00:02:40,980
protocol can have practice State

64
00:02:40,980 --> 00:02:43,800
machines in particular some logic

65
00:02:43,800 --> 00:02:46,019
glitches for example message sending

66
00:02:46,019 --> 00:02:48,599
Rays such vulnerabilities are hard to

67
00:02:48,599 --> 00:02:50,700
reproduce because the steam machine

68
00:02:50,700 --> 00:02:53,519
needs to reach the exact state to expose

69
00:02:53,519 --> 00:02:56,040
those bugs

70
00:02:56,040 --> 00:02:58,200
this is an example of backy State

71
00:02:58,200 --> 00:03:00,720
machine in L2 cup the two Bluetooth

72
00:03:00,720 --> 00:03:02,519
devices need to send an information

73
00:03:02,519 --> 00:03:04,500
request and reply with the information

74
00:03:04,500 --> 00:03:07,379
response to each other we can observe

75
00:03:07,379 --> 00:03:09,900
that the two devices are actually in a

76
00:03:09,900 --> 00:03:11,879
message sending Rays at the state of the

77
00:03:11,879 --> 00:03:14,159
info start it is possible that when the

78
00:03:14,159 --> 00:03:16,260
request from device a arrives at device

79
00:03:16,260 --> 00:03:19,140
b b is still at the info start State

80
00:03:19,140 --> 00:03:21,720
closing losing the legitimate request

81
00:03:21,720 --> 00:03:23,040
message

82
00:03:23,040 --> 00:03:25,920
for this uh the L2 cup specification

83
00:03:25,920 --> 00:03:28,560
just says add to cup implementation

84
00:03:28,560 --> 00:03:30,780
short responding are valid information

85
00:03:30,780 --> 00:03:33,840
request with information response which

86
00:03:33,840 --> 00:03:36,420
cannot help much in avoiding this error

87
00:03:36,420 --> 00:03:38,280
the two observations motivate our

88
00:03:38,280 --> 00:03:39,840
research efforts

89
00:03:39,840 --> 00:03:42,120
uh there are there have been some

90
00:03:42,120 --> 00:03:44,519
existing work in this area for example

91
00:03:44,519 --> 00:03:47,220
uh for protocol modeling there are

92
00:03:47,220 --> 00:03:49,739
several published papers uh ever pass

93
00:03:49,739 --> 00:03:53,700
pads spicy hammer and nail however they

94
00:03:53,700 --> 00:03:56,459
only focus on message measures but do

95
00:03:56,459 --> 00:03:58,019
not support anything about stain

96
00:03:58,019 --> 00:04:00,959
machines also except as ever passed the

97
00:04:00,959 --> 00:04:03,480
security of generated passes are not

98
00:04:03,480 --> 00:04:05,819
guaranteed for a protocol verification

99
00:04:05,819 --> 00:04:09,060
unfortunately the majority of them just

100
00:04:09,060 --> 00:04:11,700
focus on cryptographic quickness and

101
00:04:11,700 --> 00:04:13,200
they Overlook the fundamental State

102
00:04:13,200 --> 00:04:15,060
transition security issues in general

103
00:04:15,060 --> 00:04:17,820
State machines to this end we want to

104
00:04:17,820 --> 00:04:20,459
propose a pro Factory which defines a

105
00:04:20,459 --> 00:04:22,860
unified DSL to describe both message

106
00:04:22,860 --> 00:04:25,919
formats and state machines and generates

107
00:04:25,919 --> 00:04:29,940
secure protocol implementations

108
00:04:29,940 --> 00:04:31,800
this is a pro factory system

109
00:04:31,800 --> 00:04:34,800
architecture first developers model are

110
00:04:34,800 --> 00:04:37,020
protocol in our DSL including message

111
00:04:37,020 --> 00:04:39,120
formats and state machines then Pro

112
00:04:39,120 --> 00:04:40,919
Factory will translate the protocol

113
00:04:40,919 --> 00:04:43,259
model to a constraint model performing

114
00:04:43,259 --> 00:04:45,300
symbolic model checking if the model

115
00:04:45,300 --> 00:04:47,400
passes the checking proprietary will

116
00:04:47,400 --> 00:04:49,259
generate a kernel oriented protocol

117
00:04:49,259 --> 00:04:51,780
implementation in C language according

118
00:04:51,780 --> 00:04:54,720
to the protocol model meanwhile a set of

119
00:04:54,720 --> 00:04:57,060
hard-coded platform dependent interfaces

120
00:04:57,060 --> 00:04:59,520
will be integrated into the

121
00:04:59,520 --> 00:05:02,100
implementation those interfaces are

122
00:05:02,100 --> 00:05:04,440
system and Hardware specific for example

123
00:05:04,440 --> 00:05:07,139
Bluetooth device connecting and delayed

124
00:05:07,139 --> 00:05:09,360
kernel work scheduling and we must

125
00:05:09,360 --> 00:05:12,300
respect them finally the implementation

126
00:05:12,300 --> 00:05:14,400
will go through the verification of

127
00:05:14,400 --> 00:05:17,220
memory accessibility and concurrency if

128
00:05:17,220 --> 00:05:18,840
the verification passes the

129
00:05:18,840 --> 00:05:21,180
implementation is considered secure to

130
00:05:21,180 --> 00:05:23,280
deploy

131
00:05:23,280 --> 00:05:26,820
uh in protocol modern DSL for message

132
00:05:26,820 --> 00:05:29,520
format we Define six abstract types

133
00:05:29,520 --> 00:05:32,520
fixed the sized field variable sized

134
00:05:32,520 --> 00:05:35,759
field message higher protocol parameter

135
00:05:35,759 --> 00:05:38,639
protocol parameter list and message the

136
00:05:38,639 --> 00:05:41,160
recursive message type defines a tree

137
00:05:41,160 --> 00:05:43,020
structured message group that is

138
00:05:43,020 --> 00:05:45,960
identified by the message header the the

139
00:05:45,960 --> 00:05:48,600
right side is the semantic button the

140
00:05:48,600 --> 00:05:52,440
big F represents how we pass compose and

141
00:05:52,440 --> 00:05:55,139
fetch the message and its corresponding

142
00:05:55,139 --> 00:05:58,440
fields and it is for code generation the

143
00:05:58,440 --> 00:06:00,960
big p here denotes the update of the

144
00:06:00,960 --> 00:06:03,479
constrained model which is for symbolic

145
00:06:03,479 --> 00:06:05,880
model checking because of time limit

146
00:06:05,880 --> 00:06:08,280
details of the semantic symbols will be

147
00:06:08,280 --> 00:06:09,780
skipped here and the interest the

148
00:06:09,780 --> 00:06:12,780
audience May refer to our paper

149
00:06:12,780 --> 00:06:15,300
um for protocol multiplexing we Define

150
00:06:15,300 --> 00:06:17,639
two socket types Channel and connection

151
00:06:17,639 --> 00:06:19,800
that contain a list of protocol

152
00:06:19,800 --> 00:06:22,319
parameters channel can Multiplex the

153
00:06:22,319 --> 00:06:24,300
underlying connection and the channels

154
00:06:24,300 --> 00:06:26,460
can be indexed by different protocol

155
00:06:26,460 --> 00:06:28,139
parameters

156
00:06:28,139 --> 00:06:30,240
for standard machine we Define the

157
00:06:30,240 --> 00:06:32,580
protocol State message received and

158
00:06:32,580 --> 00:06:35,759
message send behaviors it expresses how

159
00:06:35,759 --> 00:06:38,520
the message payload without any message

160
00:06:38,520 --> 00:06:41,400
headers is processed and how the state

161
00:06:41,400 --> 00:06:43,620
transition is performed based on the

162
00:06:43,620 --> 00:06:48,020
processing of the message content

163
00:06:48,020 --> 00:06:51,720
uh here we have a three-word example for

164
00:06:51,720 --> 00:06:55,199
the Bluetooth L2 cup protocol we just

165
00:06:55,199 --> 00:06:57,360
demonstrate that even the complex

166
00:06:57,360 --> 00:07:00,660
Bluetooth protocol can be well specified

167
00:07:00,660 --> 00:07:03,960
by our DSL for other kind of details

168
00:07:03,960 --> 00:07:06,000
interested audience can refer to our

169
00:07:06,000 --> 00:07:08,240
paper

170
00:07:08,699 --> 00:07:11,280
next this is a pro Factory code

171
00:07:11,280 --> 00:07:13,740
generation algorithm the generation is

172
00:07:13,740 --> 00:07:16,500
purely typed based and it is a recursive

173
00:07:16,500 --> 00:07:18,720
procedure we partition the code

174
00:07:18,720 --> 00:07:21,300
generation into different blocks here

175
00:07:21,300 --> 00:07:23,759
structure for data structures local gen

176
00:07:23,759 --> 00:07:26,099
for local pointers extraction for

177
00:07:26,099 --> 00:07:28,500
pointer references check Jam for sending

178
00:07:28,500 --> 00:07:30,720
checks and advanced checks unlock Jam

179
00:07:30,720 --> 00:07:33,539
for buffer allocation and so on we

180
00:07:33,539 --> 00:07:35,880
generate codes for message format

181
00:07:35,880 --> 00:07:38,699
related types socket types message

182
00:07:38,699 --> 00:07:40,020
passing

183
00:07:40,020 --> 00:07:43,919
message receiving and message sending in

184
00:07:43,919 --> 00:07:46,139
particular for all the socket buffer

185
00:07:46,139 --> 00:07:49,259
operations we generate the SK buff data

186
00:07:49,259 --> 00:07:51,479
structure and a kernel takes over all

187
00:07:51,479 --> 00:07:53,520
the memory memory management of this

188
00:07:53,520 --> 00:07:54,780
data structure

189
00:07:54,780 --> 00:07:56,880
so we don't need to care about any like

190
00:07:56,880 --> 00:07:59,819
memory access violation of this data

191
00:07:59,819 --> 00:08:00,960
structure

192
00:08:00,960 --> 00:08:03,300
for code verification Pro Factory

193
00:08:03,300 --> 00:08:05,520
translates the protocol model to VCC

194
00:08:05,520 --> 00:08:08,099
specifications to perform concurrency

195
00:08:08,099 --> 00:08:10,139
verification on the concurrent accesses

196
00:08:10,139 --> 00:08:13,139
to share the data in multiplexing for

197
00:08:13,139 --> 00:08:15,120
memory safety verification Pro Factory

198
00:08:15,120 --> 00:08:17,699
translates the protocol model to

199
00:08:17,699 --> 00:08:20,039
Pharmacy specifications to perform

200
00:08:20,039 --> 00:08:22,620
deductive replication based on the

201
00:08:22,620 --> 00:08:25,020
weakest precondition Logic the

202
00:08:25,020 --> 00:08:27,060
verification relies on per function

203
00:08:27,060 --> 00:08:30,360
annotation because VCC and Pharmacy are

204
00:08:30,360 --> 00:08:32,399
not our main contribution I will just

205
00:08:32,399 --> 00:08:34,260
show two short examples of the

206
00:08:34,260 --> 00:08:36,000
specifications

207
00:08:36,000 --> 00:08:38,700
this is an example of VCC specification

208
00:08:38,700 --> 00:08:41,820
it translates the mutex operations to a

209
00:08:41,820 --> 00:08:44,580
data container which is locked by a data

210
00:08:44,580 --> 00:08:45,440
log

211
00:08:45,440 --> 00:08:48,779
whenever a shared object is accessed the

212
00:08:48,779 --> 00:08:51,060
log must be clamped and the object must

213
00:08:51,060 --> 00:08:53,640
be unwrapped the ghost keyword here

214
00:08:53,640 --> 00:08:55,980
refers to concurrency related auxiliary

215
00:08:55,980 --> 00:08:58,680
object in this proof

216
00:08:58,680 --> 00:09:02,940
next is a pharmacy specification a

217
00:09:02,940 --> 00:09:04,860
function needs to be annotated with

218
00:09:04,860 --> 00:09:06,899
pointer validation memory chunk

219
00:09:06,899 --> 00:09:09,240
separation Loop invariance and loop

220
00:09:09,240 --> 00:09:12,000
variance those annotations are not

221
00:09:12,000 --> 00:09:15,240
highlighted in Green in this figure will

222
00:09:15,240 --> 00:09:17,060
serve as limits in the deductive

223
00:09:17,060 --> 00:09:19,860
verification note that most of the

224
00:09:19,860 --> 00:09:22,320
annotations can be automatically emitted

225
00:09:22,320 --> 00:09:24,779
but developers may still need to add

226
00:09:24,779 --> 00:09:27,000
very limited amount of loop imbalance

227
00:09:27,000 --> 00:09:30,660
and constraints to assist the proof

228
00:09:30,660 --> 00:09:32,820
for symbolic model checking which

229
00:09:32,820 --> 00:09:34,500
translates the model or protocol model

230
00:09:34,500 --> 00:09:37,980
to smt lab specifications and check six

231
00:09:37,980 --> 00:09:40,560
State machine specific properties based

232
00:09:40,560 --> 00:09:42,660
on two peer communication under semi

233
00:09:42,660 --> 00:09:45,060
honest assumption State reachability

234
00:09:45,060 --> 00:09:47,519
checks if there is any state that's not

235
00:09:47,519 --> 00:09:50,100
reachable transition coverage checks if

236
00:09:50,100 --> 00:09:52,019
there are any state transition that is

237
00:09:52,019 --> 00:09:53,880
impossible absence of transition

238
00:09:53,880 --> 00:09:56,279
complete checks if any two transitions

239
00:09:56,279 --> 00:09:58,920
of one state can be certified at the

240
00:09:58,920 --> 00:10:02,100
same time raspberry message sends checks

241
00:10:02,100 --> 00:10:04,200
if there is any mesh sending Rays for

242
00:10:04,200 --> 00:10:07,260
example the motivating example 2 dialog

243
00:10:07,260 --> 00:10:10,860
3 message receives check if there is a

244
00:10:10,860 --> 00:10:14,760
there are two peers can get stuck uh

245
00:10:14,760 --> 00:10:16,680
when they they are both waiting for an

246
00:10:16,680 --> 00:10:19,800
incoming message uh consistency uh

247
00:10:19,800 --> 00:10:22,620
consists of security level checks if uh

248
00:10:22,620 --> 00:10:24,839
security levels are the same across all

249
00:10:24,839 --> 00:10:27,360
the parts to a state the first five are

250
00:10:27,360 --> 00:10:28,920
general statement machine properties and

251
00:10:28,920 --> 00:10:31,080
we want to showcase the sixth one a

252
00:10:31,080 --> 00:10:33,300
security specific property

253
00:10:33,300 --> 00:10:36,240
here is a cve funding Bluetooth pen

254
00:10:36,240 --> 00:10:38,160
implementation in both Windows and

255
00:10:38,160 --> 00:10:40,500
Android we are victims internet

256
00:10:40,500 --> 00:10:42,420
connection on Bluetooth can be tethered

257
00:10:42,420 --> 00:10:44,459
by the attacker without authentication

258
00:10:44,459 --> 00:10:46,680
when the attacker pretends to be a pen

259
00:10:46,680 --> 00:10:49,200
user the root cause is that pen start

260
00:10:49,200 --> 00:10:51,899
can go from either transition one or two

261
00:10:51,899 --> 00:10:54,180
to reach the pen ready State however

262
00:10:54,180 --> 00:10:55,560
transition 1

263
00:10:55,560 --> 00:10:57,779
uh requires authentication security

264
00:10:57,779 --> 00:10:58,920
level

265
00:10:58,920 --> 00:11:02,160
but transition 2 does not it leads to a

266
00:11:02,160 --> 00:11:04,560
security downgrading error the official

267
00:11:04,560 --> 00:11:06,839
pass just deletes the condition tube

268
00:11:06,839 --> 00:11:09,839
however we think we could just split the

269
00:11:09,839 --> 00:11:12,779
pain ready states to support both cases

270
00:11:12,779 --> 00:11:15,420
in performance evaluation we modeled and

271
00:11:15,420 --> 00:11:17,399
generated implementation for several

272
00:11:17,399 --> 00:11:19,740
Bluetooth and zigbee protocols and we we

273
00:11:19,740 --> 00:11:21,480
can see that the size of customized

274
00:11:21,480 --> 00:11:23,640
protocols can be much smaller we also

275
00:11:23,640 --> 00:11:25,260
tested the performance of file

276
00:11:25,260 --> 00:11:26,760
transporting service over Bluetooth

277
00:11:26,760 --> 00:11:30,000
rfcom and our generated codes only incur

278
00:11:30,000 --> 00:11:32,040
four percent overhead compared to the

279
00:11:32,040 --> 00:11:33,660
original implementation

280
00:11:33,660 --> 00:11:35,820
we create a newly discussed Bluetooth

281
00:11:35,820 --> 00:11:38,279
and zigbee vulnerabilities and we found

282
00:11:38,279 --> 00:11:40,500
almost all of them can be averted if

283
00:11:40,500 --> 00:11:42,480
perfectly was involved in political

284
00:11:42,480 --> 00:11:44,880
modeling the only one that could not be

285
00:11:44,880 --> 00:11:47,040
averted is about crypto key cracking

286
00:11:47,040 --> 00:11:49,339
which is not covered in the current

287
00:11:49,339 --> 00:11:52,500
factory implementation

288
00:11:52,500 --> 00:11:54,959
although perfectly can help generate

289
00:11:54,959 --> 00:11:57,000
secure political implementation it still

290
00:11:57,000 --> 00:11:59,339
has several image limitations we don't

291
00:11:59,339 --> 00:12:01,079
have support of motor inflow control

292
00:12:01,079 --> 00:12:04,500
algorithm if any DSL specification flow

293
00:12:04,500 --> 00:12:06,180
is found the security guarantee could

294
00:12:06,180 --> 00:12:08,700
could be degraded we don't have formal

295
00:12:08,700 --> 00:12:11,220
proof of semantic preservation regarding

296
00:12:11,220 --> 00:12:13,140
the code generation part we don't have

297
00:12:13,140 --> 00:12:14,880
support of modern cryptographic

298
00:12:14,880 --> 00:12:17,160
constructs and it may require the

299
00:12:17,160 --> 00:12:19,800
integration of the existing tool to

300
00:12:19,800 --> 00:12:20,839
support this

301
00:12:20,839 --> 00:12:24,420
also we have a heavy dependence on the

302
00:12:24,420 --> 00:12:25,920
platform and Hardware specific

303
00:12:25,920 --> 00:12:28,560
interfaces it's inevitable but it can be

304
00:12:28,560 --> 00:12:31,680
mitigated by a virtualization layer uh

305
00:12:31,680 --> 00:12:34,380
to conclude we propose Factory which

306
00:12:34,380 --> 00:12:37,079
offers a DSL based protocol modeling

307
00:12:37,079 --> 00:12:38,820
that covers both message formats and

308
00:12:38,820 --> 00:12:40,920
state machine and is applicable for

309
00:12:40,920 --> 00:12:43,320
General iot protocols and it can help

310
00:12:43,320 --> 00:12:46,019
generate vulnerable free code avoiding

311
00:12:46,019 --> 00:12:49,680
lots of no vulnerabilities yeah

312
00:12:49,680 --> 00:12:51,660
and that's all my talk today thank you

313
00:12:51,660 --> 00:12:53,959
so much

