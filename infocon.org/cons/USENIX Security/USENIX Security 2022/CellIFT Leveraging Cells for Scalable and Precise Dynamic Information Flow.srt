1
00:00:08,179 --> 00:00:10,019
all right

2
00:00:10,019 --> 00:00:11,519
um not only software but also Hardware

3
00:00:11,519 --> 00:00:14,280
nowadays suffers from vulnerabilities

4
00:00:14,280 --> 00:00:16,500
and to improve the situation we created

5
00:00:16,500 --> 00:00:20,220
Cell lift the first mechanism that's uh

6
00:00:20,220 --> 00:00:21,840
so the first mechanism for dynamic

7
00:00:21,840 --> 00:00:23,760
information for tracking for Hardware

8
00:00:23,760 --> 00:00:27,779
that supports out of order CPUs

9
00:00:27,779 --> 00:00:30,300
you may be familiar with these logos

10
00:00:30,300 --> 00:00:32,238
they represent Hardware vulnerabilities

11
00:00:32,238 --> 00:00:35,219
difficult to fix but you may know also

12
00:00:35,219 --> 00:00:36,960
extremely difficult to find in the first

13
00:00:36,960 --> 00:00:38,040
place

14
00:00:38,040 --> 00:00:40,140
and there is one fundamental Insight

15
00:00:40,140 --> 00:00:42,840
that makes our work possible and

16
00:00:42,840 --> 00:00:45,780
interesting it is that these bugs and

17
00:00:45,780 --> 00:00:47,879
many others are expressible as

18
00:00:47,879 --> 00:00:50,219
information flows

19
00:00:50,219 --> 00:00:53,039
let me give you some some intuition

20
00:00:53,039 --> 00:00:55,980
so on the left side there is the CPU

21
00:00:55,980 --> 00:00:58,980
core on the right side memory in the

22
00:00:58,980 --> 00:01:01,559
middle some some micro architecture so

23
00:01:01,559 --> 00:01:05,700
let's assume the CPU there's a load from

24
00:01:05,700 --> 00:01:07,979
some privileged data that I first

25
00:01:07,979 --> 00:01:12,180
tainted so up let's do the load buff so

26
00:01:12,180 --> 00:01:15,119
the data along with the taint traverses

27
00:01:15,119 --> 00:01:17,400
the micro architecture

28
00:01:17,400 --> 00:01:20,100
to finally influence some state in the

29
00:01:20,100 --> 00:01:21,479
core

30
00:01:21,479 --> 00:01:24,060
and now if an attacker exfiltrates some

31
00:01:24,060 --> 00:01:25,920
data

32
00:01:25,920 --> 00:01:27,900
it will be quite easy to find in

33
00:01:27,900 --> 00:01:30,659
principle you just look if there's some

34
00:01:30,659 --> 00:01:32,700
orange taint where I did not expect it

35
00:01:32,700 --> 00:01:34,200
so this is something that we want to

36
00:01:34,200 --> 00:01:36,479
achieve

37
00:01:36,479 --> 00:01:38,759
actually there is already one mechanism

38
00:01:38,759 --> 00:01:40,740
that supports Dynamic information for

39
00:01:40,740 --> 00:01:42,659
tracking for Hardware it operates at

40
00:01:42,659 --> 00:01:44,939
gate level it's called lift

41
00:01:44,939 --> 00:01:46,799
what does it mean operating at gate

42
00:01:46,799 --> 00:01:48,720
level means that you take a design a CPU

43
00:01:48,720 --> 00:01:51,720
for example poof you break it down into

44
00:01:51,720 --> 00:01:55,020
very very small element so end Gates or

45
00:01:55,020 --> 00:01:55,920
Gates

46
00:01:55,920 --> 00:01:58,020
registers no actually not even registers

47
00:01:58,020 --> 00:02:00,540
flip-flops sorry and latches so very

48
00:02:00,540 --> 00:02:03,240
small elements and then glyph takes

49
00:02:03,240 --> 00:02:05,340
every of these very small elements very

50
00:02:05,340 --> 00:02:07,560
very many elements but very small

51
00:02:07,560 --> 00:02:09,959
and add some information for tracking

52
00:02:09,959 --> 00:02:12,840
logic around it to track information

53
00:02:12,840 --> 00:02:15,060
flows through each of these very small

54
00:02:15,060 --> 00:02:17,760
elements this is how it works this very

55
00:02:17,760 --> 00:02:20,099
low level of abstraction has drawbacks

56
00:02:20,099 --> 00:02:22,800
critical drawbacks first it creates a

57
00:02:22,800 --> 00:02:24,720
huge netlist that is extremely difficult

58
00:02:24,720 --> 00:02:26,580
to manage for tools

59
00:02:26,580 --> 00:02:30,060
oops sorry uh and also simulators have a

60
00:02:30,060 --> 00:02:31,560
very hard time with it because typically

61
00:02:31,560 --> 00:02:34,379
to be fast a simulator will see higher

62
00:02:34,379 --> 00:02:35,220
level

63
00:02:35,220 --> 00:02:37,440
of abstractions for example it will see

64
00:02:37,440 --> 00:02:40,860
others and when it says and others or a

65
00:02:40,860 --> 00:02:42,599
comparison for example the simulator

66
00:02:42,599 --> 00:02:45,180
just sees oh it's an addition so let's

67
00:02:45,180 --> 00:02:47,040
just run it on the CPU of the machine

68
00:02:47,040 --> 00:02:50,760
instead of you know doing and or Etc

69
00:02:50,760 --> 00:02:52,080
just to simulate an addition doesn't

70
00:02:52,080 --> 00:02:53,700
make sense but here you need to do is

71
00:02:53,700 --> 00:02:55,319
you need to simulate every single

72
00:02:55,319 --> 00:02:57,840
individual gate which is extremely

73
00:02:57,840 --> 00:02:58,860
expensive

74
00:02:58,860 --> 00:03:01,680
so very intuitively we propose to

75
00:03:01,680 --> 00:03:03,900
instrument a higher level of abstraction

76
00:03:03,900 --> 00:03:06,660
the abstraction of macro cells also

77
00:03:06,660 --> 00:03:08,040
called cells in short

78
00:03:08,040 --> 00:03:10,080
which correspond to simple mathematical

79
00:03:10,080 --> 00:03:13,140
operations such as additions comparisons

80
00:03:13,140 --> 00:03:15,900
multiplexers subtractions Etc

81
00:03:15,900 --> 00:03:17,940
and then same thing but for bigger

82
00:03:17,940 --> 00:03:20,220
blocks so for these Bridge blocks I add

83
00:03:20,220 --> 00:03:22,080
some logic around them to track

84
00:03:22,080 --> 00:03:23,819
information flows around them

85
00:03:23,819 --> 00:03:26,519
dynamically the question is what are

86
00:03:26,519 --> 00:03:27,959
these clouds now

87
00:03:27,959 --> 00:03:30,540
this is a new question

88
00:03:30,540 --> 00:03:33,060
let's try again some intuition

89
00:03:33,060 --> 00:03:35,519
so I will look at a combinational cell

90
00:03:35,519 --> 00:03:38,640
which does not have state inside for

91
00:03:38,640 --> 00:03:40,560
example a register would be excluded but

92
00:03:40,560 --> 00:03:41,760
it could be another

93
00:03:41,760 --> 00:03:45,120
so here I give you two tainted inputs in

94
00:03:45,120 --> 00:03:47,940
Orange and I want to know oh is some

95
00:03:47,940 --> 00:03:50,220
output bit tainted or not

96
00:03:50,220 --> 00:03:52,260
you can see for your intuition you can

97
00:03:52,260 --> 00:03:54,659
imagine you have an attacker it controls

98
00:03:54,659 --> 00:03:57,720
the two orange arrows the question is

99
00:03:57,720 --> 00:04:01,379
can the attacker change values on the

100
00:04:01,379 --> 00:04:03,840
output if it only controls the two

101
00:04:03,840 --> 00:04:05,879
orange arrows

102
00:04:05,879 --> 00:04:08,340
let's do the intuitive way I try

103
00:04:08,340 --> 00:04:11,159
everything that an attacker can do 0 0 1

104
00:04:11,159 --> 00:04:14,580
1 up we see that we could toggle the

105
00:04:14,580 --> 00:04:17,100
bottom output bit so it's tainted okay I

106
00:04:17,100 --> 00:04:20,699
continue poof poof we could not affect

107
00:04:20,699 --> 00:04:23,580
the top bit so exactly only the the

108
00:04:23,580 --> 00:04:25,080
bottom bit is dented so this is

109
00:04:25,080 --> 00:04:27,419
something that we want to do

110
00:04:27,419 --> 00:04:29,220
um in practice in Hardware we like to do

111
00:04:29,220 --> 00:04:30,600
stuff in parallel

112
00:04:30,600 --> 00:04:32,520
and actually in this case we even must

113
00:04:32,520 --> 00:04:34,440
and we also need to adapt for the most

114
00:04:34,440 --> 00:04:37,500
complicated uh part which is that

115
00:04:37,500 --> 00:04:39,840
everything is actually tainted as input

116
00:04:39,840 --> 00:04:43,080
because tanks are determined dynamically

117
00:04:43,080 --> 00:04:46,440
whereas the instrumentation is static

118
00:04:46,440 --> 00:04:49,860
so we copy the same cell 16 times this

119
00:04:49,860 --> 00:04:52,259
case 16 times because we have four

120
00:04:52,259 --> 00:04:54,780
inputs so combinations of four inputs

121
00:04:54,780 --> 00:04:57,360
you have 16 two power four and you

122
00:04:57,360 --> 00:04:59,699
provide different inputs for each of

123
00:04:59,699 --> 00:05:02,040
this replica that change only the values

124
00:05:02,040 --> 00:05:04,440
on the orange arrows for example here

125
00:05:04,440 --> 00:05:07,440
you put only zeros to the orange arrows

126
00:05:07,440 --> 00:05:09,120
here one

127
00:05:09,120 --> 00:05:11,880
at the bottom and the rest zeros Etc the

128
00:05:11,880 --> 00:05:13,020
idea is we need to try all the

129
00:05:13,020 --> 00:05:16,259
combinations on the orange arrows

130
00:05:16,259 --> 00:05:18,540
in the end we also compare the outputs

131
00:05:18,540 --> 00:05:20,699
the idea is to know which output is

132
00:05:20,699 --> 00:05:22,020
actually tainted and which was not

133
00:05:22,020 --> 00:05:25,139
changing any of this replica

134
00:05:25,139 --> 00:05:26,759
you may see the problem

135
00:05:26,759 --> 00:05:30,120
imagine you have just one other 64-bit

136
00:05:30,120 --> 00:05:32,340
other this is quite common you need two

137
00:05:32,340 --> 00:05:36,120
power 128 replica of it is you imagine

138
00:05:36,120 --> 00:05:38,220
that this is completely unrealistic

139
00:05:38,220 --> 00:05:40,020
so now the question is how do we get rid

140
00:05:40,020 --> 00:05:42,660
of this exponential dependency so we

141
00:05:42,660 --> 00:05:44,460
have a certain number of inputs

142
00:05:44,460 --> 00:05:46,500
and this if there are many then we have

143
00:05:46,500 --> 00:05:49,320
too many replica how do we make it maybe

144
00:05:49,320 --> 00:05:51,419
a constant number I will show you how to

145
00:05:51,419 --> 00:05:53,520
do only one or two copies one or two

146
00:05:53,520 --> 00:05:56,400
combinations if you prefer

147
00:05:56,400 --> 00:05:57,780
we do it

148
00:05:57,780 --> 00:06:00,780
by identifying three properties of these

149
00:06:00,780 --> 00:06:04,080
cells monotonicity transportability and

150
00:06:04,080 --> 00:06:05,940
translatability here are some cells for

151
00:06:05,940 --> 00:06:07,320
example that correspond to these three

152
00:06:07,320 --> 00:06:08,520
properties

153
00:06:08,520 --> 00:06:11,460
I will limit myself to this cell this

154
00:06:11,460 --> 00:06:14,160
inequality cell but I promise you will

155
00:06:14,160 --> 00:06:16,440
get the big picture

156
00:06:16,440 --> 00:06:18,479
um okay so let's look at what would be

157
00:06:18,479 --> 00:06:20,039
monotonicity here

158
00:06:20,039 --> 00:06:23,160
so here we have two inputs up the left

159
00:06:23,160 --> 00:06:26,699
input if you increase it you can only

160
00:06:26,699 --> 00:06:29,639
decrease the output

161
00:06:29,639 --> 00:06:31,319
on the other side if you increase the

162
00:06:31,319 --> 00:06:32,880
right output there is a change that you

163
00:06:32,880 --> 00:06:34,259
can actually increase

164
00:06:34,259 --> 00:06:36,240
so if you increase the right input sorry

165
00:06:36,240 --> 00:06:39,900
you you may increase the output

166
00:06:39,900 --> 00:06:41,520
so these are some monotonicity

167
00:06:41,520 --> 00:06:43,319
properties and this hints the fact that

168
00:06:43,319 --> 00:06:45,360
you can look at only two combinations or

169
00:06:45,360 --> 00:06:47,880
two replica one that minimizes the

170
00:06:47,880 --> 00:06:49,620
output and one that maximizes the output

171
00:06:49,620 --> 00:06:51,720
all the rest we don't care

172
00:06:51,720 --> 00:06:52,919
example

173
00:06:52,919 --> 00:06:55,380
I tainted arbitrarily two bits on the

174
00:06:55,380 --> 00:06:57,180
right two bits on the left

175
00:06:57,180 --> 00:06:59,819
up first I minimize the output the

176
00:06:59,819 --> 00:07:01,680
maximum is left minimize right

177
00:07:01,680 --> 00:07:04,080
and do the opposite I maximize I say oh

178
00:07:04,080 --> 00:07:06,360
it's tainted if and only if it's toggled

179
00:07:06,360 --> 00:07:09,479
here is toggled answer is Tainted

180
00:07:09,479 --> 00:07:13,199
okay so up to replica Chrome is held of

181
00:07:13,199 --> 00:07:14,819
course this was for a simple case we

182
00:07:14,819 --> 00:07:16,560
have three portrait properties

183
00:07:16,560 --> 00:07:19,080
for a total of 22 combinational cell

184
00:07:19,080 --> 00:07:20,099
types

185
00:07:20,099 --> 00:07:23,099
and also many variants of registers for

186
00:07:23,099 --> 00:07:25,800
example so our implementation is a path

187
00:07:25,800 --> 00:07:29,160
in the USS open source synthesizer for

188
00:07:29,160 --> 00:07:30,419
the people who are not familiar with

189
00:07:30,419 --> 00:07:33,060
that this is the equivalent of a llvm

190
00:07:33,060 --> 00:07:34,259
for Hardware

191
00:07:34,259 --> 00:07:37,199
more or less so we just take a design as

192
00:07:37,199 --> 00:07:41,340
an input on this side so and

193
00:07:41,340 --> 00:07:44,160
this design is a net list of cells

194
00:07:44,160 --> 00:07:45,479
idiomatically

195
00:07:45,479 --> 00:07:47,460
and we output another design which is

196
00:07:47,460 --> 00:07:50,160
the same design but but plus information

197
00:07:50,160 --> 00:07:52,380
flow tracking logic around it a bit like

198
00:07:52,380 --> 00:07:54,060
I explained at the beginning

199
00:07:54,060 --> 00:07:56,639
now let's speak about results

200
00:07:56,639 --> 00:07:58,800
first I will show scalability results

201
00:07:58,800 --> 00:08:01,199
for individual cells for example how

202
00:08:01,199 --> 00:08:03,780
another becomes scalable second which is

203
00:08:03,780 --> 00:08:05,520
the most important in my opinion for a

204
00:08:05,520 --> 00:08:07,560
mechanism how does this scalability now

205
00:08:07,560 --> 00:08:11,099
trans transfer to actual improvements in

206
00:08:11,099 --> 00:08:14,639
actual designs such as CPUs and socs and

207
00:08:14,639 --> 00:08:17,280
finally I will discuss some applications

208
00:08:17,280 --> 00:08:19,680
so this is not as this is the state of

209
00:08:19,680 --> 00:08:22,199
the art so on the y-axis you have the

210
00:08:22,199 --> 00:08:24,720
simulation time and on the x-axis you

211
00:08:24,720 --> 00:08:27,300
have the size of the cell let's focus on

212
00:08:27,300 --> 00:08:28,979
the other so if you think about another

213
00:08:28,979 --> 00:08:31,919
let's take a ripple carrier there you

214
00:08:31,919 --> 00:08:33,899
know so you have this carry chain

215
00:08:33,899 --> 00:08:35,520
and the more input bits you have

216
00:08:35,520 --> 00:08:37,979
equivalently the bigger your other is

217
00:08:37,979 --> 00:08:41,279
the more Elementary Gates you have or

218
00:08:41,279 --> 00:08:42,779
end Gates

219
00:08:42,779 --> 00:08:45,300
and because gate level instrumentation

220
00:08:45,300 --> 00:08:48,240
requires you to to simulate each of

221
00:08:48,240 --> 00:08:51,000
these Gates then the runtime is linear

222
00:08:51,000 --> 00:08:53,339
right ball Gates you know but sell it

223
00:08:53,339 --> 00:08:54,899
towards differently because the lift

224
00:08:54,899 --> 00:08:58,260
adds a constant number of cells and

225
00:08:58,260 --> 00:09:00,120
these cells are run in a constant number

226
00:09:00,120 --> 00:09:02,580
of constant time so constant time

227
00:09:02,580 --> 00:09:03,779
constant

228
00:09:03,779 --> 00:09:05,820
This Is Us constant so this is

229
00:09:05,820 --> 00:09:07,320
scalability results

230
00:09:07,320 --> 00:09:09,120
for individual cells now does it

231
00:09:09,120 --> 00:09:11,040
translate to improvements in real

232
00:09:11,040 --> 00:09:13,800
designs to answer this question we took

233
00:09:13,800 --> 00:09:16,800
five popular risk 5 based designs of

234
00:09:16,800 --> 00:09:18,779
arguably increasing complexity including

235
00:09:18,779 --> 00:09:21,060
a full SOC and including and out of

236
00:09:21,060 --> 00:09:22,800
other CPU

237
00:09:22,800 --> 00:09:25,920
we run quite standard risk five test

238
00:09:25,920 --> 00:09:28,200
benches test benches on it in simulation

239
00:09:28,200 --> 00:09:31,080
and the question is how slower is the

240
00:09:31,080 --> 00:09:33,420
simulation of the instrumented design

241
00:09:33,420 --> 00:09:35,459
compared to the normal design that is

242
00:09:35,459 --> 00:09:37,080
not instrumented

243
00:09:37,080 --> 00:09:39,240
here is the results of this experiment

244
00:09:39,240 --> 00:09:41,339
there is two takeaways first

245
00:09:41,339 --> 00:09:43,680
some more complex designs could not be

246
00:09:43,680 --> 00:09:45,180
instrumented and simulated by the state

247
00:09:45,180 --> 00:09:47,580
of the art even on a one terabyte

248
00:09:47,580 --> 00:09:49,380
machine this doesn't work

249
00:09:49,380 --> 00:09:51,300
because it's so low level requires so

250
00:09:51,300 --> 00:09:55,760
huge netlists for sale lift no problem

251
00:09:56,000 --> 00:09:58,740
for some designs we could instrument and

252
00:09:58,740 --> 00:10:00,420
simulate them with the with the gate

253
00:10:00,420 --> 00:10:03,300
level solution this works however Salif

254
00:10:03,300 --> 00:10:04,380
makes it

255
00:10:04,380 --> 00:10:06,540
much faster

256
00:10:06,540 --> 00:10:09,540
okay finally some applications first

257
00:10:09,540 --> 00:10:11,820
um self allows you very dramatically to

258
00:10:11,820 --> 00:10:13,920
find macro architectural elements

259
00:10:13,920 --> 00:10:16,740
uh that leaks or potentially bailing

260
00:10:16,740 --> 00:10:20,519
data second application we took a

261
00:10:20,519 --> 00:10:23,339
full-fledged SOC and rediscovered bugs

262
00:10:23,339 --> 00:10:26,399
with very simple policies

263
00:10:26,399 --> 00:10:29,220
third we did meltdown experiments found

264
00:10:29,220 --> 00:10:31,620
negative results for Aryan in some

265
00:10:31,620 --> 00:10:33,660
scenarios and in some scenarios we could

266
00:10:33,660 --> 00:10:35,519
confirm positive results and increase

267
00:10:35,519 --> 00:10:37,019
the state of the Arts in terms of

268
00:10:37,019 --> 00:10:38,580
exploitability

269
00:10:38,580 --> 00:10:40,279
on the boom processor

270
00:10:40,279 --> 00:10:42,600
by showing that some scenarios are not

271
00:10:42,600 --> 00:10:44,459
exploitable

272
00:10:44,459 --> 00:10:46,800
and finally we did some spect

273
00:10:46,800 --> 00:10:49,140
experiments with positive and negative

274
00:10:49,140 --> 00:10:51,180
results on boom and we could

275
00:10:51,180 --> 00:10:52,700
quantitatively

276
00:10:52,700 --> 00:10:57,720
evaluate the speculation window of spect

277
00:10:57,720 --> 00:11:00,480
um on boom and the nice thing is in all

278
00:11:00,480 --> 00:11:02,579
these experiments we did not need a

279
00:11:02,579 --> 00:11:04,500
single cash attack so this is also very

280
00:11:04,500 --> 00:11:06,360
new and extremely convenient if you want

281
00:11:06,360 --> 00:11:08,100
to have very precise results

282
00:11:08,100 --> 00:11:09,300
also if you don't want to do cash

283
00:11:09,300 --> 00:11:12,120
attacks because it's boring

284
00:11:12,120 --> 00:11:13,940
um okay time to conclude

285
00:11:13,940 --> 00:11:16,920
celift is the first mechanism that can

286
00:11:16,920 --> 00:11:18,779
instrument and simulate out of the CPUs

287
00:11:18,779 --> 00:11:21,540
or any CPU that we could try

288
00:11:21,540 --> 00:11:24,120
at the time of the writing at least

289
00:11:24,120 --> 00:11:26,160
um it's much faster than the state of

290
00:11:26,160 --> 00:11:27,480
the art for the some designs that could

291
00:11:27,480 --> 00:11:29,560
already be instrumented and simulated

292
00:11:29,560 --> 00:11:30,360
[Music]

293
00:11:30,360 --> 00:11:31,200
um

294
00:11:31,200 --> 00:11:33,480
we have new applications so for example

295
00:11:33,480 --> 00:11:35,519
detecting a leakage through a meltdown

296
00:11:35,519 --> 00:11:36,660
to spec

297
00:11:36,660 --> 00:11:40,200
but we are convinced that

298
00:11:40,200 --> 00:11:42,420
there are new applications that we did

299
00:11:42,420 --> 00:11:43,920
not think about or that we were working

300
00:11:43,920 --> 00:11:45,959
on right now we don't know if they will

301
00:11:45,959 --> 00:11:47,040
succeed

302
00:11:47,040 --> 00:11:49,079
when there is new applications

303
00:11:49,079 --> 00:11:51,240
and to help you debug your own designs

304
00:11:51,240 --> 00:11:52,980
and find new applications and maybe

305
00:11:52,980 --> 00:11:55,019
present them here next year on the year

306
00:11:55,019 --> 00:11:57,300
after or maybe it's five years we may

307
00:11:57,300 --> 00:11:59,040
sell if open source it's also artifact

308
00:11:59,040 --> 00:12:01,560
evaluated I didn't show it here I will

309
00:12:01,560 --> 00:12:04,220
do the best possible to to support you

310
00:12:04,220 --> 00:12:07,680
feel free to try thank you for attention

311
00:12:07,680 --> 00:12:10,019
please ask questions if you need any

312
00:12:10,019 --> 00:12:12,260
future

