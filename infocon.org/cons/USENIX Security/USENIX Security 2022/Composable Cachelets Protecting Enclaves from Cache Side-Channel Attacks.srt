1
00:00:08,058 --> 00:00:10,980
hello my name is Daniel Townley and I'm

2
00:00:10,980 --> 00:00:13,559
here to present composable cash let's a

3
00:00:13,559 --> 00:00:15,299
new uh cash partitioning architecture

4
00:00:15,299 --> 00:00:17,640
for protecting enclaves from a cache

5
00:00:17,640 --> 00:00:20,220
side channel uh attacks I worked on this

6
00:00:20,220 --> 00:00:22,439
paper as a PhD candidate as at

7
00:00:22,439 --> 00:00:24,720
Binghamton University with collaborators

8
00:00:24,720 --> 00:00:27,000
at Binghamton University and tobb

9
00:00:27,000 --> 00:00:30,359
University of economics and Technology

10
00:00:30,359 --> 00:00:32,880
trust and execution environments or tees

11
00:00:32,880 --> 00:00:35,100
such as Intel sgx have received

12
00:00:35,100 --> 00:00:37,020
increasing attention from both the

13
00:00:37,020 --> 00:00:39,300
research community and Industry unlike

14
00:00:39,300 --> 00:00:41,579
classical Security Solutions that relied

15
00:00:41,579 --> 00:00:43,680
on operating systems to enforce

16
00:00:43,680 --> 00:00:46,760
isolation between processes Tex

17
00:00:46,760 --> 00:00:49,620
use specialized Hardware to enforce

18
00:00:49,620 --> 00:00:52,440
enclaves in which sensitive code can run

19
00:00:52,440 --> 00:00:54,180
without interference either from other

20
00:00:54,180 --> 00:00:56,460
user processes or from the operating

21
00:00:56,460 --> 00:00:59,280
system itself as a result tees can run

22
00:00:59,280 --> 00:01:01,140
sensitive software even when the

23
00:01:01,140 --> 00:01:03,899
operating system is untrusted

24
00:01:03,899 --> 00:01:06,540
despite these benefits tees have proven

25
00:01:06,540 --> 00:01:09,180
vulnerable to cash side Channel attacks

26
00:01:09,180 --> 00:01:11,460
one example a class example is a prime

27
00:01:11,460 --> 00:01:13,439
and probe attack where an attacker

28
00:01:13,439 --> 00:01:15,260
populates a cache with its own data

29
00:01:15,260 --> 00:01:18,119
allows the victim to write to the cash

30
00:01:18,119 --> 00:01:20,280
and then measures the timing differences

31
00:01:20,280 --> 00:01:23,580
in uh data retained in the cache and

32
00:01:23,580 --> 00:01:25,920
data evicted by the victim to

33
00:01:25,920 --> 00:01:28,320
reconstruct sensitive computations

34
00:01:28,320 --> 00:01:30,720
a current tee Solutions do not account

35
00:01:30,720 --> 00:01:32,340
for these micro architectural side

36
00:01:32,340 --> 00:01:34,920
effects and can be bypassed using these

37
00:01:34,920 --> 00:01:37,140
attacks

38
00:01:37,140 --> 00:01:39,900
a logical solution uh to these texts

39
00:01:39,900 --> 00:01:43,200
would be to extend a tee uh partitioning

40
00:01:43,200 --> 00:01:45,960
to caches unfortunately past proposals

41
00:01:45,960 --> 00:01:48,119
for cash partitioning are not compatible

42
00:01:48,119 --> 00:01:51,119
with Tee's computation models some

43
00:01:51,119 --> 00:01:53,640
partition strategies are enforced by the

44
00:01:53,640 --> 00:01:55,619
operating system and because they trust

45
00:01:55,619 --> 00:01:57,540
the operating system are not compatible

46
00:01:57,540 --> 00:02:00,299
with tee security models other

47
00:02:00,299 --> 00:02:02,399
strategies are implemented purely in

48
00:02:02,399 --> 00:02:03,960
hardware and so overcome this this

49
00:02:03,960 --> 00:02:06,840
problem these strategies though modify

50
00:02:06,840 --> 00:02:09,419
typically modify the a cash replacement

51
00:02:09,419 --> 00:02:12,060
logic to enforce partitioning at the

52
00:02:12,060 --> 00:02:16,260
granularity of cash ways in uh many tees

53
00:02:16,260 --> 00:02:19,260
however enclaves can be relatively small

54
00:02:19,260 --> 00:02:23,819
and uh and uh have a small memory foot

55
00:02:23,819 --> 00:02:27,500
and numerous and thus these course

56
00:02:27,500 --> 00:02:29,280
relatively course granularity

57
00:02:29,280 --> 00:02:32,340
partitioning can both be underutilized

58
00:02:32,340 --> 00:02:34,080
by enclaves and have a disproportionate

59
00:02:34,080 --> 00:02:36,780
impact on non-enclave processes sharing

60
00:02:36,780 --> 00:02:38,760
the price processor

61
00:02:38,760 --> 00:02:40,620
these challenges demonstrate the need

62
00:02:40,620 --> 00:02:43,140
for a tee friendly partitioning

63
00:02:43,140 --> 00:02:45,000
strategies which are both Hardware

64
00:02:45,000 --> 00:02:47,099
enforced and fine-grained enough to

65
00:02:47,099 --> 00:02:49,200
accommodate enclaves of various sizes

66
00:02:49,200 --> 00:02:52,379
our solution a composable cashless or cc

67
00:02:52,379 --> 00:02:54,540
is an effort in this direction focusing

68
00:02:54,540 --> 00:02:57,239
on large L3 caches where fine-grained

69
00:02:57,239 --> 00:02:59,700
partitioning is especially important CC

70
00:02:59,700 --> 00:03:01,140
partitions the cache into

71
00:03:01,140 --> 00:03:03,680
two-dimensional regions called cashless

72
00:03:03,680 --> 00:03:07,379
cashless consists of can span multiple

73
00:03:07,379 --> 00:03:09,540
ways taking advantage of society but

74
00:03:09,540 --> 00:03:12,180
only occupies a number of us of sets

75
00:03:12,180 --> 00:03:14,760
within the way to accommodate enclaves

76
00:03:14,760 --> 00:03:17,519
of various sizes CC can chain together

77
00:03:17,519 --> 00:03:19,440
multiple cash flows into a larger

78
00:03:19,440 --> 00:03:20,700
structure that we call a virtual

79
00:03:20,700 --> 00:03:23,220
partition importantly the cash flow

80
00:03:23,220 --> 00:03:24,900
that's composing this partition do not

81
00:03:24,900 --> 00:03:27,180
have to be contiguous when making it

82
00:03:27,180 --> 00:03:29,400
simple to simplifying the process of

83
00:03:29,400 --> 00:03:31,620
allocating partitions as enclaves enter

84
00:03:31,620 --> 00:03:34,680
and leave the system additionally CC

85
00:03:34,680 --> 00:03:38,400
allows non-enclave processes to make use

86
00:03:38,400 --> 00:03:40,560
of any portion of the cache which is not

87
00:03:40,560 --> 00:03:44,519
allocated to active cashless

88
00:03:44,519 --> 00:03:47,340
to achieve compatibility with tee

89
00:03:47,340 --> 00:03:49,440
security requirements CC uses

90
00:03:49,440 --> 00:03:52,560
lightweight Hardware to enforce cashless

91
00:03:52,560 --> 00:03:55,440
boundaries the first component of CC is

92
00:03:55,440 --> 00:03:57,540
the address remapping logic and this is

93
00:03:57,540 --> 00:03:59,700
responsible for ensuring that addresses

94
00:03:59,700 --> 00:04:03,959
uh cash access is from an enclave are

95
00:04:03,959 --> 00:04:06,780
directed to enclaves assigned to the or

96
00:04:06,780 --> 00:04:08,280
whatever cash flows assigned to The

97
00:04:08,280 --> 00:04:12,599
Enclave to implement this remapping each

98
00:04:12,599 --> 00:04:14,159
core is extended with a virtual

99
00:04:14,159 --> 00:04:16,320
partition table or vpt which holds cash

100
00:04:16,320 --> 00:04:18,839
flow mappings for The Enclave each vpt

101
00:04:18,839 --> 00:04:21,418
entry contains a set of set offset bits

102
00:04:21,418 --> 00:04:24,180
and it way offset bits indicating the

103
00:04:24,180 --> 00:04:27,000
location of each cachet assigned to The

104
00:04:27,000 --> 00:04:29,580
Enclave when an enclave accesses memory

105
00:04:29,580 --> 00:04:32,340
the high order set index bits are used

106
00:04:32,340 --> 00:04:36,000
as an index into the into the vpt and

107
00:04:36,000 --> 00:04:38,580
the of the set offset bits are used to

108
00:04:38,580 --> 00:04:40,860
replace the high order bits of the

109
00:04:40,860 --> 00:04:43,320
address this forces the address to be

110
00:04:43,320 --> 00:04:45,180
mapped to one of the sets which is

111
00:04:45,180 --> 00:04:47,400
occupied by the corresponding cachelet

112
00:04:47,400 --> 00:04:50,699
Additionally the uh way offset bit from

113
00:04:50,699 --> 00:04:52,320
the entry is used to generate a mask

114
00:04:52,320 --> 00:04:55,020
which is uh then used by the modified

115
00:04:55,020 --> 00:04:59,759
replacement logic of cc2 uh to to force

116
00:04:59,759 --> 00:05:03,060
the address to select a way uh or to

117
00:05:03,060 --> 00:05:04,560
select a way which is assigned to the

118
00:05:04,560 --> 00:05:06,540
cash flow and these two mechanisms

119
00:05:06,540 --> 00:05:10,560
ensure that the address is mapped to the

120
00:05:10,560 --> 00:05:12,960
the assigned cache lab

121
00:05:12,960 --> 00:05:15,720
to enforce uh partitioning between

122
00:05:15,720 --> 00:05:18,180
enclaves CC also must ensure that The

123
00:05:18,180 --> 00:05:20,520
Enclave is assigned each Enclave is

124
00:05:20,520 --> 00:05:22,380
assigned unique non-la overlapping set

125
00:05:22,380 --> 00:05:24,900
of cashless to enforce this CC allocates

126
00:05:24,900 --> 00:05:27,780
cashless from a common uh or a shared a

127
00:05:27,780 --> 00:05:30,660
cachelet free list or CFL which is a

128
00:05:30,660 --> 00:05:33,840
hardware structure similar to a uh a

129
00:05:33,840 --> 00:05:36,060
register free list the

130
00:05:36,060 --> 00:05:38,460
logic is augmented to pop entries from

131
00:05:38,460 --> 00:05:41,280
the CFL when a cache slit or a Enclave

132
00:05:41,280 --> 00:05:43,199
is created and return them when The

133
00:05:43,199 --> 00:05:46,620
Enclave is destroyed this ensures that a

134
00:05:46,620 --> 00:05:49,139
no two enclaves will receive overlapping

135
00:05:49,139 --> 00:05:51,360
a cash flow allocations additionally

136
00:05:51,360 --> 00:05:54,240
when a Enclave yields the core due to a

137
00:05:54,240 --> 00:05:56,940
context switch the vpt is uh the

138
00:05:56,940 --> 00:05:58,680
contents are stored in The Enclave

139
00:05:58,680 --> 00:06:01,979
metadata provided by the tee this is uh

140
00:06:01,979 --> 00:06:04,020
exploit's existing mechanism provided by

141
00:06:04,020 --> 00:06:06,660
te which is used to store a hardware

142
00:06:06,660 --> 00:06:08,699
State such as register and flags and

143
00:06:08,699 --> 00:06:10,500
this mechanism is simply extended to

144
00:06:10,500 --> 00:06:12,720
include the vpt

145
00:06:12,720 --> 00:06:14,759
in addition to protecting Enclave

146
00:06:14,759 --> 00:06:17,940
Enclave data within cashless CC must

147
00:06:17,940 --> 00:06:19,800
also maximize the availability of the

148
00:06:19,800 --> 00:06:22,740
cash to non-enclave programs to track

149
00:06:22,740 --> 00:06:25,259
which sections of the Cache can be

150
00:06:25,259 --> 00:06:28,380
safely accessed by non-enclave programs

151
00:06:28,380 --> 00:06:31,199
CC maintains a bit a set of bid arrays

152
00:06:31,199 --> 00:06:33,240
they correspond to the layout of cash

153
00:06:33,240 --> 00:06:35,940
let's in the cache when a non-enclave

154
00:06:35,940 --> 00:06:38,699
processes accesses memory the high order

155
00:06:38,699 --> 00:06:41,880
set index bits are used to access a row

156
00:06:41,880 --> 00:06:45,539
from this structure and this will uh

157
00:06:45,539 --> 00:06:47,699
then the this row will then be used as a

158
00:06:47,699 --> 00:06:49,680
mask also by the replacement logic to

159
00:06:49,680 --> 00:06:52,500
prevent the address from or the access

160
00:06:52,500 --> 00:06:56,460
from replacing a uh a cache line which

161
00:06:56,460 --> 00:07:00,198
is owned by a cachelet

162
00:07:01,199 --> 00:07:04,259
to evaluate the performance of CC we

163
00:07:04,259 --> 00:07:08,000
modified the gem5 architecture uh

164
00:07:08,000 --> 00:07:10,560
simulator to implement our addressing

165
00:07:10,560 --> 00:07:12,539
scheme and evaluated performance the

166
00:07:12,539 --> 00:07:14,520
performance impact of running a variety

167
00:07:14,520 --> 00:07:17,580
of uh benchmarks uh all of our

168
00:07:17,580 --> 00:07:19,919
simulations were performed on a 16-way

169
00:07:19,919 --> 00:07:22,740
eight megabyte L3 cache

170
00:07:22,740 --> 00:07:24,840
to evaluate CC's impact on programs

171
00:07:24,840 --> 00:07:27,360
running inside of enclaves we ran a

172
00:07:27,360 --> 00:07:29,460
collection of cryptography benchmarks

173
00:07:29,460 --> 00:07:32,520
representing a typical enclave workloads

174
00:07:32,520 --> 00:07:35,940
and evaluated the impact in terms of

175
00:07:35,940 --> 00:07:38,280
instructions per cycle in our most

176
00:07:38,280 --> 00:07:41,520
conservative configuration we used a 256

177
00:07:41,520 --> 00:07:45,479
kilobyte partition and a single way of

178
00:07:45,479 --> 00:07:48,060
associativity and found that the Mac

179
00:07:48,060 --> 00:07:49,800
although the maximum degradation was a

180
00:07:49,800 --> 00:07:52,620
8.4 percent for uh big Quake most

181
00:07:52,620 --> 00:07:54,660
applications experienced a minimal uh

182
00:07:54,660 --> 00:07:57,240
slowdown which was in fact negligible in

183
00:07:57,240 --> 00:07:59,720
some cases

184
00:08:00,000 --> 00:08:02,400
to evaluate the impact on larger

185
00:08:02,400 --> 00:08:04,800
enclaves we also ran a number of tests

186
00:08:04,800 --> 00:08:08,940
with spec 2017 benchmarks and uh found

187
00:08:08,940 --> 00:08:12,479
that even for our smallest allocation of

188
00:08:12,479 --> 00:08:15,419
512 kilobytes we saw

189
00:08:15,419 --> 00:08:16,680
um

190
00:08:16,680 --> 00:08:18,960
we saw modest average performance loss

191
00:08:18,960 --> 00:08:21,060
of six percent which drops substantially

192
00:08:21,060 --> 00:08:24,240
as we scaled the partition a few

193
00:08:24,240 --> 00:08:27,539
programs like mcf uh were approved to be

194
00:08:27,539 --> 00:08:30,180
more sensitive but uh the the

195
00:08:30,180 --> 00:08:32,339
performance of these programs improved

196
00:08:32,339 --> 00:08:36,120
as we scaled up the uh the cat the uh

197
00:08:36,120 --> 00:08:39,440
partition allocation

198
00:08:39,839 --> 00:08:42,000
finally we ran some additional

199
00:08:42,000 --> 00:08:44,880
experiments to evaluate the effect of

200
00:08:44,880 --> 00:08:48,120
cashless on non-enclave processes for

201
00:08:48,120 --> 00:08:50,580
this experiment we focused on the spec

202
00:08:50,580 --> 00:08:53,279
benchmarks that suffered the most when

203
00:08:53,279 --> 00:08:56,399
forced in to run in a reduced with

204
00:08:56,399 --> 00:08:58,980
reduced cache footprint we saw that even

205
00:08:58,980 --> 00:09:01,620
when cashless occupied half the cash the

206
00:09:01,620 --> 00:09:04,080
average IPC for these non-enclave

207
00:09:04,080 --> 00:09:07,740
programs declined by just a 2.7 percent

208
00:09:07,740 --> 00:09:11,640
in the in the uh most extreme case and

209
00:09:11,640 --> 00:09:16,860
uh even uh the uh the minimum was a 7.1

210
00:09:16,860 --> 00:09:19,220
percent

211
00:09:19,680 --> 00:09:22,019
in addition to our performance results

212
00:09:22,019 --> 00:09:25,440
we also estimated the impact of CC on uh

213
00:09:25,440 --> 00:09:28,440
on processor area and power for this we

214
00:09:28,440 --> 00:09:31,740
use the mcpat architecture simulator to

215
00:09:31,740 --> 00:09:34,740
derive our results uh we observed that

216
00:09:34,740 --> 00:09:37,860
both the CFL and vpt structures closely

217
00:09:37,860 --> 00:09:40,019
resemble existing uh cache structures

218
00:09:40,019 --> 00:09:42,420
and so our estimates for these

219
00:09:42,420 --> 00:09:44,459
components were based on mcpat's a

220
00:09:44,459 --> 00:09:46,740
similar simulation for the the similar

221
00:09:46,740 --> 00:09:49,500
uh conventional cache components we also

222
00:09:49,500 --> 00:09:51,240
modified mcpat to model some additional

223
00:09:51,240 --> 00:09:54,300
tag bits which are required by our uh by

224
00:09:54,300 --> 00:09:57,480
our Enclave addressing scheme or casual

225
00:09:57,480 --> 00:10:00,540
addressing scheme overall the changes

226
00:10:00,540 --> 00:10:03,240
were less than one percent in all these

227
00:10:03,240 --> 00:10:06,600
categories and uh the ma the largest

228
00:10:06,600 --> 00:10:08,880
overhead imposed by the additional

229
00:10:08,880 --> 00:10:12,080
additional tag bits

230
00:10:12,779 --> 00:10:15,300
this concludes our presentation of

231
00:10:15,300 --> 00:10:17,459
composable cash Let's uh before closing

232
00:10:17,459 --> 00:10:19,980
I just want to go over briefly some

233
00:10:19,980 --> 00:10:23,160
other uh areas that we address in our

234
00:10:23,160 --> 00:10:25,620
paper uh particularly uh additional

235
00:10:25,620 --> 00:10:26,880
discussion of our Hardware

236
00:10:26,880 --> 00:10:28,620
implementation including more detailed

237
00:10:28,620 --> 00:10:31,200
descriptions of the mechanisms described

238
00:10:31,200 --> 00:10:33,300
as well as performance results for

239
00:10:33,300 --> 00:10:36,000
additional benchmarks most significantly

240
00:10:36,000 --> 00:10:38,339
our paper also includes a detailed

241
00:10:38,339 --> 00:10:42,240
formal evaluation of our system security

242
00:10:42,240 --> 00:10:43,980
which is based on the operational

243
00:10:43,980 --> 00:10:45,500
semantic model

244
00:10:45,500 --> 00:10:48,660
of the operational semantics uh models

245
00:10:48,660 --> 00:10:51,959
of the cache this model can also be

246
00:10:51,959 --> 00:10:55,200
extended to evaluate other partitioning

247
00:10:55,200 --> 00:10:58,500
schemes in addition to composable

248
00:10:58,500 --> 00:11:00,899
cachelets and that concludes my

249
00:11:00,899 --> 00:11:02,820
presentation and I'd be glad to answer

250
00:11:02,820 --> 00:11:05,420
any of your questions

