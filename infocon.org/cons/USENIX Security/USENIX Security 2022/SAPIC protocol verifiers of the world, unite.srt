1
00:00:07,400 --> 00:00:10,380
thank you thank you

2
00:00:10,380 --> 00:00:12,599
um hi so this talk is about a new tool

3
00:00:12,599 --> 00:00:14,639
called Subic plus and it's titled

4
00:00:14,639 --> 00:00:17,039
protocol verifiers of the word Unite

5
00:00:17,039 --> 00:00:19,440
many Protocols are nowadays verified

6
00:00:19,440 --> 00:00:21,300
using former methods and the idea is

7
00:00:21,300 --> 00:00:23,160
that you describe the system in our case

8
00:00:23,160 --> 00:00:24,840
a protocol in a language with a

9
00:00:24,840 --> 00:00:26,580
mathematical definition common choices

10
00:00:26,580 --> 00:00:28,380
for this are the applied Pi calculus or

11
00:00:28,380 --> 00:00:30,119
multi-set rewrite rules

12
00:00:30,119 --> 00:00:31,560
and then you describe the security

13
00:00:31,560 --> 00:00:33,840
property often this is either Trace

14
00:00:33,840 --> 00:00:36,180
property for example authentication or

15
00:00:36,180 --> 00:00:37,860
an indistinguishability property for

16
00:00:37,860 --> 00:00:40,260
example anonymity even though former

17
00:00:40,260 --> 00:00:42,059
methods sometimes carries the stigma of

18
00:00:42,059 --> 00:00:45,059
being theoretical or impractical these

19
00:00:45,059 --> 00:00:46,680
tools read very practical results

20
00:00:46,680 --> 00:00:48,600
nowadays they have a high degree of

21
00:00:48,600 --> 00:00:50,700
Automation and are commonly used

22
00:00:50,700 --> 00:00:52,860
Primitives are supported the analysis

23
00:00:52,860 --> 00:00:55,739
cover very real protocols like TLS WPA2

24
00:00:55,739 --> 00:00:58,920
5G SSH wireguard signal the list is

25
00:00:58,920 --> 00:01:02,579
endless and they find very real attacks

26
00:01:02,579 --> 00:01:04,619
so say this is all very appealing to you

27
00:01:04,619 --> 00:01:06,360
and say that you would like to use

28
00:01:06,360 --> 00:01:08,100
formal methods to verify a protocol

29
00:01:08,100 --> 00:01:09,780
chances are that you have heard about

30
00:01:09,780 --> 00:01:11,280
the two most popular tools in this

31
00:01:11,280 --> 00:01:15,299
domain timer improver and proverb but

32
00:01:15,299 --> 00:01:16,979
now you don't know which one to use so

33
00:01:16,979 --> 00:01:18,299
you ask your colleague who's an expert

34
00:01:18,299 --> 00:01:21,420
in former methods and uh you ask what's

35
00:01:21,420 --> 00:01:23,520
the better tool you just want to use one

36
00:01:23,520 --> 00:01:27,240
to learn one and uh depends if you want

37
00:01:27,240 --> 00:01:28,860
to have a graphical user interface if

38
00:01:28,860 --> 00:01:30,000
you want something that's more like a

39
00:01:30,000 --> 00:01:31,979
push button solution if you use the

40
00:01:31,979 --> 00:01:34,080
Hammond groups if you need saw AC

41
00:01:34,080 --> 00:01:36,900
operators what are those what's the

42
00:01:36,900 --> 00:01:38,820
security property do you want to find

43
00:01:38,820 --> 00:01:41,400
the text and that's a lot to consider

44
00:01:41,400 --> 00:01:43,200
now you spend a lot of time to

45
00:01:43,200 --> 00:01:44,700
understand the advantages and the

46
00:01:44,700 --> 00:01:46,860
limitations of each tool and you find

47
00:01:46,860 --> 00:01:49,500
yourself becoming the formal methods

48
00:01:49,500 --> 00:01:51,960
expert you become Dwight

49
00:01:51,960 --> 00:01:54,119
and here's what you find out typically

50
00:01:54,119 --> 00:01:55,740
you want to show more than one property

51
00:01:55,740 --> 00:01:57,720
for example voting system should have

52
00:01:57,720 --> 00:02:00,119
verifiability which is a trace property

53
00:02:00,119 --> 00:02:02,340
but also privacy which is an

54
00:02:02,340 --> 00:02:04,560
indistinguishability property

55
00:02:04,560 --> 00:02:06,360
now when working with Trace properties

56
00:02:06,360 --> 00:02:08,280
people often start with prover if you

57
00:02:08,280 --> 00:02:10,500
learn because it tends to be faster but

58
00:02:10,500 --> 00:02:12,480
it can also give your faults a text now

59
00:02:12,480 --> 00:02:13,560
there's not much you can do about

60
00:02:13,560 --> 00:02:15,060
thoughts attacks except switching the

61
00:02:15,060 --> 00:02:16,860
tool to Tamarind Which is less automated

62
00:02:16,860 --> 00:02:19,680
but never gives faults a text

63
00:02:19,680 --> 00:02:21,720
for privacy Tamarind does not work well

64
00:02:21,720 --> 00:02:24,720
so the typical approach is to try with

65
00:02:24,720 --> 00:02:26,459
proverif which can give you a result

66
00:02:26,459 --> 00:02:28,500
relatively quickly but doesn't work

67
00:02:28,500 --> 00:02:30,360
unless your problem falls into just the

68
00:02:30,360 --> 00:02:33,180
right class if it does not you set it

69
00:02:33,180 --> 00:02:34,440
with the result for bonded number of

70
00:02:34,440 --> 00:02:36,420
parties for example for voters and you

71
00:02:36,420 --> 00:02:39,660
use yet another tool deepsec and deepsec

72
00:02:39,660 --> 00:02:41,340
is a decision procedure and always

73
00:02:41,340 --> 00:02:42,480
terminates

74
00:02:42,480 --> 00:02:45,120
again this is a lot and I've only talked

75
00:02:45,120 --> 00:02:47,099
about the protocol property not about

76
00:02:47,099 --> 00:02:49,500
the protocol itself so zooming out to

77
00:02:49,500 --> 00:02:51,660
the high level again we see two problems

78
00:02:51,660 --> 00:02:54,120
first instead of picking a tool and then

79
00:02:54,120 --> 00:02:55,920
becoming the expert with it you need to

80
00:02:55,920 --> 00:02:57,300
First be an expert to pick the right

81
00:02:57,300 --> 00:02:58,200
tool

82
00:02:58,200 --> 00:03:00,120
and second even if you are an expert

83
00:03:00,120 --> 00:03:02,160
sometimes you need to use multiple tools

84
00:03:02,160 --> 00:03:04,019
anyway to show all the properties that

85
00:03:04,019 --> 00:03:05,640
you are interested in

86
00:03:05,640 --> 00:03:07,500
okay so after this little introduction

87
00:03:07,500 --> 00:03:09,300
let me quickly mention my co-authors

88
00:03:09,300 --> 00:03:11,000
these advances

89
00:03:11,000 --> 00:03:13,739
Steve Kramer and my name is Robert

90
00:03:13,739 --> 00:03:16,200
kuneman and we are pretty evenly split

91
00:03:16,200 --> 00:03:18,300
as you see between proverif and Tamarin

92
00:03:18,300 --> 00:03:19,680
experts

93
00:03:19,680 --> 00:03:22,019
so at some point in 2019 Charlie had the

94
00:03:22,019 --> 00:03:23,879
idea to develop an input language that

95
00:03:23,879 --> 00:03:25,800
could translate to Tamarin and proverif

96
00:03:25,800 --> 00:03:28,080
the two most popular tools and deepsec

97
00:03:28,080 --> 00:03:29,040
that was the tool for

98
00:03:29,040 --> 00:03:31,260
indistinguishability properties in this

99
00:03:31,260 --> 00:03:32,760
translation would allow you to pick the

100
00:03:32,760 --> 00:03:34,980
optimum background for the back end for

101
00:03:34,980 --> 00:03:36,540
the property that you are now interested

102
00:03:36,540 --> 00:03:39,120
in now obviously this would introduce

103
00:03:39,120 --> 00:03:41,760
yet another language in this space so we

104
00:03:41,760 --> 00:03:43,739
picked something existing Steve and I

105
00:03:43,739 --> 00:03:45,780
have previously worked on sepic which

106
00:03:45,780 --> 00:03:47,519
like proverif is a variant of the

107
00:03:47,519 --> 00:03:49,680
applied Pi calculus and translated

108
00:03:49,680 --> 00:03:52,140
already to tamarin's Moody said rewrite

109
00:03:52,140 --> 00:03:55,019
calculus so we had a language and we had

110
00:03:55,019 --> 00:03:56,819
a framework to build on

111
00:03:56,819 --> 00:03:59,099
so as I've mentioned sepix is a variant

112
00:03:59,099 --> 00:04:00,780
of the applied Pi calculus just like

113
00:04:00,780 --> 00:04:03,000
proverif is but there are small

114
00:04:03,000 --> 00:04:04,580
differences that we had to overcome

115
00:04:04,580 --> 00:04:06,780
proverif and deepsec on the other hand

116
00:04:06,780 --> 00:04:09,000
they have literally the same semantics

117
00:04:09,000 --> 00:04:11,220
except that proverif's language has some

118
00:04:11,220 --> 00:04:13,620
extra features

119
00:04:13,620 --> 00:04:15,840
and so we redeveloped sepic into sepic

120
00:04:15,840 --> 00:04:17,220
plus and the features you get from it

121
00:04:17,220 --> 00:04:19,320
are the following you don't need to

122
00:04:19,320 --> 00:04:21,358
choose the tool you model and you can

123
00:04:21,358 --> 00:04:23,280
now use the union of the strength of all

124
00:04:23,280 --> 00:04:25,860
these tools we've proven that we Bridge

125
00:04:25,860 --> 00:04:28,440
all the semantic gaps correctly so you

126
00:04:28,440 --> 00:04:29,699
don't need to worry about semantic

127
00:04:29,699 --> 00:04:31,020
pitfalls anymore

128
00:04:31,020 --> 00:04:33,120
uh through the integration in The

129
00:04:33,120 --> 00:04:35,400
Tamarind the translation to tamarins

130
00:04:35,400 --> 00:04:36,900
multi said rewrite rules and draws a

131
00:04:36,900 --> 00:04:38,880
graphical user interface

132
00:04:38,880 --> 00:04:41,820
for language level Transformations sepic

133
00:04:41,820 --> 00:04:43,500
is now a very interesting platform

134
00:04:43,500 --> 00:04:44,880
because you don't need to choose which

135
00:04:44,880 --> 00:04:46,860
tool to Target you can Target these

136
00:04:46,860 --> 00:04:48,720
three tools at once and we tried this

137
00:04:48,720 --> 00:04:50,759
out actually we applied the supplier

138
00:04:50,759 --> 00:04:52,919
work on accountability and on prior work

139
00:04:52,919 --> 00:04:54,840
on isolated execution environments by

140
00:04:54,840 --> 00:04:56,699
some of the authors

141
00:04:56,699 --> 00:04:59,720
um moreover the ability to translate

142
00:04:59,720 --> 00:05:02,880
allows you now to substitute expertise

143
00:05:02,880 --> 00:05:05,340
with computation time because you can

144
00:05:05,340 --> 00:05:07,199
run the same Lemma in different tools

145
00:05:07,199 --> 00:05:08,820
you can also run them in all the tools

146
00:05:08,820 --> 00:05:11,400
at the same time and just see which one

147
00:05:11,400 --> 00:05:13,259
finishes first if you are unsure which

148
00:05:13,259 --> 00:05:15,240
tool is the best one if you're unsure

149
00:05:15,240 --> 00:05:17,820
just let them raise each other

150
00:05:17,820 --> 00:05:20,160
we also overhauled sepic and improved

151
00:05:20,160 --> 00:05:21,540
the syntax to make it harder to write

152
00:05:21,540 --> 00:05:23,639
incorrect models and easier to write

153
00:05:23,639 --> 00:05:26,699
correct models we also implemented some

154
00:05:26,699 --> 00:05:28,320
features that are described in more

155
00:05:28,320 --> 00:05:29,759
detail in the paper but that improved

156
00:05:29,759 --> 00:05:31,740
the important performance a lot I will

157
00:05:31,740 --> 00:05:33,600
just mention one of them path

158
00:05:33,600 --> 00:05:35,100
compression because it will reappear

159
00:05:35,100 --> 00:05:37,800
later here we take the rule set after

160
00:05:37,800 --> 00:05:40,259
translation and join rules that are

161
00:05:40,259 --> 00:05:42,180
semantically sound to combine think of

162
00:05:42,180 --> 00:05:44,400
this like a compiler inlining functions

163
00:05:44,400 --> 00:05:46,919
into where they are called and we're

164
00:05:46,919 --> 00:05:49,080
proving proving this correct requires a

165
00:05:49,080 --> 00:05:51,060
quite complex case analysis but it also

166
00:05:51,060 --> 00:05:53,039
yields substantial improvements as you

167
00:05:53,039 --> 00:05:54,300
see

168
00:05:54,300 --> 00:05:57,060
so we ran various case studies to

169
00:05:57,060 --> 00:05:58,800
validate our approach and the main

170
00:05:58,800 --> 00:06:00,960
questions we asked ourselves were how is

171
00:06:00,960 --> 00:06:02,699
the performance of the translated models

172
00:06:02,699 --> 00:06:04,139
can they actually compete with

173
00:06:04,139 --> 00:06:05,820
handwritten translations and is the

174
00:06:05,820 --> 00:06:07,680
workflow improved

175
00:06:07,680 --> 00:06:09,419
there are also some questions we did not

176
00:06:09,419 --> 00:06:11,759
answer we did not try to find out which

177
00:06:11,759 --> 00:06:13,680
tool is better we are not even sure what

178
00:06:13,680 --> 00:06:16,139
uh beta would mean here but you know at

179
00:06:16,139 --> 00:06:18,120
least now we don't have to make a choice

180
00:06:18,120 --> 00:06:20,400
more interesting question is which input

181
00:06:20,400 --> 00:06:23,520
language is better it is interesting but

182
00:06:23,520 --> 00:06:25,800
we are no usability experts so that

183
00:06:25,800 --> 00:06:28,319
being said we moved to research question

184
00:06:28,319 --> 00:06:30,720
one about the performance so we measured

185
00:06:30,720 --> 00:06:32,220
the performance with a wide array of

186
00:06:32,220 --> 00:06:34,680
case studies some of which are new like

187
00:06:34,680 --> 00:06:37,080
for example chem TLS that's a new

188
00:06:37,080 --> 00:06:40,139
proposal for TLS based on key

189
00:06:40,139 --> 00:06:42,900
encapsulation mechanisms Lake a proposal

190
00:06:42,900 --> 00:06:44,819
for lightweight authentication about to

191
00:06:44,819 --> 00:06:47,400
be standardized SSH which you all know

192
00:06:47,400 --> 00:06:49,020
but now for the first time with Nets

193
00:06:49,020 --> 00:06:52,080
with nested port forwarding and privacy

194
00:06:52,080 --> 00:06:54,180
pass which is an Authentication Protocol

195
00:06:54,180 --> 00:06:55,919
based on tokens that provide client

196
00:06:55,919 --> 00:06:58,020
anonymity and is also under

197
00:06:58,020 --> 00:07:00,660
standardization I have only the time to

198
00:07:00,660 --> 00:07:02,639
glance over results here but what you

199
00:07:02,639 --> 00:07:04,500
can see here is that the verification in

200
00:07:04,500 --> 00:07:06,600
proverb if it terminates tends to be

201
00:07:06,600 --> 00:07:08,520
faster than in tamarin

202
00:07:08,520 --> 00:07:10,680
um but analysis times are reasonable for

203
00:07:10,680 --> 00:07:13,860
both tools actually for chemtls and the

204
00:07:13,860 --> 00:07:15,720
nittium shoulder loaf protocol sort of a

205
00:07:15,720 --> 00:07:18,120
standard toy example uh we verified

206
00:07:18,120 --> 00:07:20,639
secrecy in the bounded model and here we

207
00:07:20,639 --> 00:07:22,620
set the bound to three parties all

208
00:07:22,620 --> 00:07:24,300
numbers have been computed on the

209
00:07:24,300 --> 00:07:26,220
computer I'm using right now to give

210
00:07:26,220 --> 00:07:27,960
this presentation

211
00:07:27,960 --> 00:07:29,580
all right next reset screen research

212
00:07:29,580 --> 00:07:31,139
question can they compete with

213
00:07:31,139 --> 00:07:35,099
handwritten models yes sometimes as

214
00:07:35,099 --> 00:07:37,199
there always is a handwritten model that

215
00:07:37,199 --> 00:07:38,880
just happens to be the output of the

216
00:07:38,880 --> 00:07:41,340
translation it's a bit difficult to

217
00:07:41,340 --> 00:07:43,020
really make a statement here because we

218
00:07:43,020 --> 00:07:45,360
cannot win the this game like literally

219
00:07:45,360 --> 00:07:48,080
win this game unless our tool is perfect

220
00:07:48,080 --> 00:07:51,240
however we made two experiments first we

221
00:07:51,240 --> 00:07:53,220
picked a handwritten model from Tamarin

222
00:07:53,220 --> 00:07:55,560
and translated it back to sepic plus by

223
00:07:55,560 --> 00:07:58,740
hand then we translated this translation

224
00:07:58,740 --> 00:08:00,900
back to proverb and also back to

225
00:08:00,900 --> 00:08:02,580
Tamarind where it was originally written

226
00:08:02,580 --> 00:08:06,419
using our translation we picked 5G which

227
00:08:06,419 --> 00:08:09,240
is one of the largest models in Tamarind

228
00:08:09,240 --> 00:08:11,580
and find that proverb is performing

229
00:08:11,580 --> 00:08:13,860
similar to Tamarin and also observe that

230
00:08:13,860 --> 00:08:15,780
the translated model is actually faster

231
00:08:15,780 --> 00:08:17,340
than the original going through all

232
00:08:17,340 --> 00:08:19,319
these transition steps this is likely

233
00:08:19,319 --> 00:08:21,720
due to the path compression which is

234
00:08:21,720 --> 00:08:23,220
what's the optimization I mentioned

235
00:08:23,220 --> 00:08:25,919
earlier that combined many routes into a

236
00:08:25,919 --> 00:08:27,539
single rule

237
00:08:27,539 --> 00:08:30,720
second we compared so these were

238
00:08:30,720 --> 00:08:33,120
obviously now two models that were

239
00:08:33,120 --> 00:08:35,039
related to each other right so second we

240
00:08:35,039 --> 00:08:36,719
compared an independently generated

241
00:08:36,719 --> 00:08:39,779
model of SSH by La focard and pre with

242
00:08:39,779 --> 00:08:42,240
our as a modeling of SSH by turning off

243
00:08:42,240 --> 00:08:44,399
the nested port forwarding which the

244
00:08:44,399 --> 00:08:46,500
other model did not have and we also

245
00:08:46,500 --> 00:08:48,240
obtained a model that verifies more

246
00:08:48,240 --> 00:08:49,560
quickly

247
00:08:49,560 --> 00:08:51,899
and naturally this process uh you know

248
00:08:51,899 --> 00:08:53,240
starting from published models

249
00:08:53,240 --> 00:08:55,380
constitutes some kind of cherry picking

250
00:08:55,380 --> 00:08:56,760
but these results give at least

251
00:08:56,760 --> 00:08:59,700
indication that our translation may not

252
00:08:59,700 --> 00:09:01,980
only get into your way but actually help

253
00:09:01,980 --> 00:09:05,279
you moreover we find that while hand

254
00:09:05,279 --> 00:09:08,160
optimizing a model sounds cool right and

255
00:09:08,160 --> 00:09:10,560
sounds very powerful in practice if you

256
00:09:10,560 --> 00:09:12,899
work on very large models far-reaching

257
00:09:12,899 --> 00:09:14,640
tweaks actually become very very

258
00:09:14,640 --> 00:09:16,200
difficult because you need to maintain

259
00:09:16,200 --> 00:09:18,360
your model and you also need to make it

260
00:09:18,360 --> 00:09:20,100
readable to a third party for example a

261
00:09:20,100 --> 00:09:22,260
reviewer at a conference and for large

262
00:09:22,260 --> 00:09:24,839
models it seems better to us that these

263
00:09:24,839 --> 00:09:26,700
optimizations are implemented in sepic

264
00:09:26,700 --> 00:09:29,580
plus and actually proven secure

265
00:09:29,580 --> 00:09:32,940
all right third question is the workflow

266
00:09:32,940 --> 00:09:35,700
improved and the main observation our

267
00:09:35,700 --> 00:09:37,680
case studies was that once that you have

268
00:09:37,680 --> 00:09:39,480
all three tools at your hands you tend

269
00:09:39,480 --> 00:09:41,580
to leverage all of them and we observed

270
00:09:41,580 --> 00:09:44,120
basically free recurring situations

271
00:09:44,120 --> 00:09:46,860
first of all we often used proverb

272
00:09:46,860 --> 00:09:48,540
during development because it runs

273
00:09:48,540 --> 00:09:50,880
within seconds but then Tamarin on the

274
00:09:50,880 --> 00:09:52,620
final model once the bugs are hammered

275
00:09:52,620 --> 00:09:55,620
out the for SSH for example we moved to

276
00:09:55,620 --> 00:09:57,360
Tamron because it has a more precise

277
00:09:57,360 --> 00:09:59,160
theory for Diffie Hammond

278
00:09:59,160 --> 00:10:00,600
exponentiations

279
00:10:00,600 --> 00:10:03,120
uh there are also models more rarely

280
00:10:03,120 --> 00:10:05,040
however for which provel runs forever

281
00:10:05,040 --> 00:10:06,600
but Tamarin only needs a couple of

282
00:10:06,600 --> 00:10:07,500
seconds

283
00:10:07,500 --> 00:10:10,019
third there are cases where proverif

284
00:10:10,019 --> 00:10:11,880
needs to use axioms to prove something

285
00:10:11,880 --> 00:10:14,880
but these axioms cannot be proven within

286
00:10:14,880 --> 00:10:16,980
proverb as our translation has now

287
00:10:16,980 --> 00:10:19,200
proven correct it is perfectly valid to

288
00:10:19,200 --> 00:10:21,360
use these axioms in proverb but prove

289
00:10:21,360 --> 00:10:23,519
them in Tamarin and verify the whole

290
00:10:23,519 --> 00:10:27,260
truth we did this on the 5G example and

291
00:10:27,260 --> 00:10:30,140
for instingishable property properties

292
00:10:30,140 --> 00:10:33,120
we found that deepsec as it can always

293
00:10:33,120 --> 00:10:36,300
be used when Proverbs faster diff mode

294
00:10:36,300 --> 00:10:38,459
is insufficient is very helpful so

295
00:10:38,459 --> 00:10:40,560
deepsec is a decision procedure it

296
00:10:40,560 --> 00:10:41,760
always terminates with the correct

297
00:10:41,760 --> 00:10:44,519
result but how long it takes depends on

298
00:10:44,519 --> 00:10:46,320
the bound that you choose and we

299
00:10:46,320 --> 00:10:49,140
basically had all all free cases right

300
00:10:49,140 --> 00:10:51,560
Pro very failing but deep section

301
00:10:51,560 --> 00:10:54,120
succeeding deep SEC failing but Proverbs

302
00:10:54,120 --> 00:10:56,579
succeeding and both succeeding in which

303
00:10:56,579 --> 00:10:58,440
case we of course prefer the unbounded

304
00:10:58,440 --> 00:11:01,320
result delivered by proverb

305
00:11:01,320 --> 00:11:04,680
okay so let me conclude uh by

306
00:11:04,680 --> 00:11:06,720
advertising you should try to use our

307
00:11:06,720 --> 00:11:09,660
tool we have something for everyone for

308
00:11:09,660 --> 00:11:12,000
the novice user there's no more need to

309
00:11:12,000 --> 00:11:14,100
commit on a tool and if you have a

310
00:11:14,100 --> 00:11:15,540
little extra CPU time you can run

311
00:11:15,540 --> 00:11:17,100
multiple Tools in parallel whenever

312
00:11:17,100 --> 00:11:18,899
you're unsure which tool is the best for

313
00:11:18,899 --> 00:11:20,339
the particular lemon you're trying to

314
00:11:20,339 --> 00:11:23,820
prove for expert users you can now enjoy

315
00:11:23,820 --> 00:11:25,320
having models that are easier to

316
00:11:25,320 --> 00:11:27,300
maintain and you can sleep better

317
00:11:27,300 --> 00:11:29,700
knowing that you avoided all potential

318
00:11:29,700 --> 00:11:31,860
pitfalls that you that might be there

319
00:11:31,860 --> 00:11:33,660
because the languages behave differently

320
00:11:33,660 --> 00:11:36,180
in some edge cases the paper talks more

321
00:11:36,180 --> 00:11:38,120
about what these edge cases actually are

322
00:11:38,120 --> 00:11:40,620
for framework developers there's two

323
00:11:40,620 --> 00:11:43,260
sides to it like on the input sites you

324
00:11:43,260 --> 00:11:46,019
can now if you have a translation that

325
00:11:46,019 --> 00:11:47,820
operates on a high level you can now

326
00:11:47,820 --> 00:11:50,760
Target Tamarin proverb and deepsec by

327
00:11:50,760 --> 00:11:53,519
Tamara by targeting sepic Plus in one go

328
00:11:53,519 --> 00:11:56,339
on the output side if you have a tool

329
00:11:56,339 --> 00:11:57,779
that you would like to see supported and

330
00:11:57,779 --> 00:11:59,399
want to have a ton of examples right

331
00:11:59,399 --> 00:12:02,160
away think about adding support to sepic

332
00:12:02,160 --> 00:12:04,320
plus we are using a templating language

333
00:12:04,320 --> 00:12:06,600
inside that might even help you simplify

334
00:12:06,600 --> 00:12:07,920
this step

335
00:12:07,920 --> 00:12:10,260
finally the source code is online it's

336
00:12:10,260 --> 00:12:12,600
part of tamarind's main repository and

337
00:12:12,600 --> 00:12:13,860
currently in the development Branch

338
00:12:13,860 --> 00:12:17,399
there's also a Docker image that you can

339
00:12:17,399 --> 00:12:19,019
just pull and provides you with the

340
00:12:19,019 --> 00:12:21,120
translation with all the tools that it

341
00:12:21,120 --> 00:12:22,920
translates you and allows you basically

342
00:12:22,920 --> 00:12:26,760
to run the whole thing in one command

343
00:12:26,760 --> 00:12:28,620
all right thank you let's move to the Q

344
00:12:28,620 --> 00:12:30,800
a

