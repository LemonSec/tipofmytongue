1
00:00:08,119 --> 00:00:11,400
my name is moshtaba and this is a joint

2
00:00:11,400 --> 00:00:15,679
work with my collaborators at NJIT

3
00:00:16,379 --> 00:00:19,619
the motivation example for this work is

4
00:00:19,619 --> 00:00:22,080
serverless For Hire with the goal of

5
00:00:22,080 --> 00:00:24,180
attacking a high profile Target

6
00:00:24,180 --> 00:00:26,400
in serverless for higher and

7
00:00:26,400 --> 00:00:28,920
unscrupulous organization wants to

8
00:00:28,920 --> 00:00:31,099
install the Pegasus

9
00:00:31,099 --> 00:00:33,899
fiber on the device of a high profile

10
00:00:33,899 --> 00:00:36,239
Target like

11
00:00:36,239 --> 00:00:39,660
in order to control the target's device

12
00:00:39,660 --> 00:00:42,500
for this

13
00:00:43,500 --> 00:00:45,899
the victim is lured to a website

14
00:00:45,899 --> 00:00:48,120
controlled by the attacker the attacker

15
00:00:48,120 --> 00:00:50,460
has occurred at a great expense a zero

16
00:00:50,460 --> 00:00:53,000
day exploit

17
00:00:53,640 --> 00:00:56,699
and could use this exploit to infect all

18
00:00:56,699 --> 00:00:58,739
users who visit the website

19
00:00:58,739 --> 00:01:00,059
however

20
00:01:00,059 --> 00:01:01,379
uh

21
00:01:01,379 --> 00:01:03,180
this has the drawback that the zero day

22
00:01:03,180 --> 00:01:06,000
exploit will be discovered by quickly by

23
00:01:06,000 --> 00:01:10,740
white hat hikers like the citizen lab

24
00:01:10,740 --> 00:01:13,500
instead the attacker adopts a better

25
00:01:13,500 --> 00:01:15,780
strategy only deployed of zero day

26
00:01:15,780 --> 00:01:17,760
exploit

27
00:01:17,760 --> 00:01:19,979
when a high profile Target uses the

28
00:01:19,979 --> 00:01:22,140
website

29
00:01:22,140 --> 00:01:25,320
this would work only if the attacker has

30
00:01:25,320 --> 00:01:27,780
a reliable way to tell when the high

31
00:01:27,780 --> 00:01:30,240
profile Target visits the website this

32
00:01:30,240 --> 00:01:33,060
is where our work comes into the picture

33
00:01:33,060 --> 00:01:35,640
we introduce a Target the amazing attack

34
00:01:35,640 --> 00:01:37,680
that allows an attacker who controls a

35
00:01:37,680 --> 00:01:40,200
website to learn if a unique individual

36
00:01:40,200 --> 00:01:43,340
is visiting the website

37
00:01:48,180 --> 00:01:51,960
the attacker has uh knows this

38
00:01:51,960 --> 00:01:53,399
individual only through a public

39
00:01:53,399 --> 00:01:55,560
identifier such as an email address or

40
00:01:55,560 --> 00:01:58,020
Twitter handle

41
00:01:58,020 --> 00:02:01,619
data consists of two phases in the setup

42
00:02:01,619 --> 00:02:04,140
phase the attack here uploads the

43
00:02:04,140 --> 00:02:07,200
resource in a sharing website and shares

44
00:02:07,200 --> 00:02:09,598
this resource privately with the victim

45
00:02:09,598 --> 00:02:11,819
and embeds this resource in an

46
00:02:11,819 --> 00:02:14,879
attacker-controlled webpage

47
00:02:14,879 --> 00:02:18,840
in the execution phase the attacker

48
00:02:18,840 --> 00:02:23,160
lures the victim to visit the website

49
00:02:23,160 --> 00:02:27,260
then when browser browsing this page

50
00:02:27,260 --> 00:02:33,000
the victim's browser makes a request

51
00:02:33,660 --> 00:02:35,580
to the

52
00:02:35,580 --> 00:02:38,480
sharing service

53
00:02:41,340 --> 00:02:45,120
passing users authentication cookies and

54
00:02:45,120 --> 00:02:47,519
then the sharing service response based

55
00:02:47,519 --> 00:02:50,360
on the credentials

56
00:02:50,879 --> 00:02:52,140
foreign

57
00:02:52,140 --> 00:02:54,000
this response contains the shared

58
00:02:54,000 --> 00:02:56,040
resource if the user is the Target and

59
00:02:56,040 --> 00:02:59,280
then or otherwise normally the outcome

60
00:02:59,280 --> 00:03:00,959
of loading the resource cannot be

61
00:03:00,959 --> 00:03:02,819
learned by the attacker website because

62
00:03:02,819 --> 00:03:06,060
of isolation Technologies such as same

63
00:03:06,060 --> 00:03:09,420
origin policy same site cookies extreme

64
00:03:09,420 --> 00:03:12,120
options header or cross origin opener

65
00:03:12,120 --> 00:03:13,200
policy

66
00:03:13,200 --> 00:03:15,659
however

67
00:03:15,659 --> 00:03:17,879
it has been shown that the attacker can

68
00:03:17,879 --> 00:03:20,040
bypass these Technologies by cross-site

69
00:03:20,040 --> 00:03:22,620
clicks which basically are software bugs

70
00:03:22,620 --> 00:03:25,519
in web browsers

71
00:03:25,519 --> 00:03:29,459
website owners are slowly but surely

72
00:03:29,459 --> 00:03:32,400
patching these car side leaks in this

73
00:03:32,400 --> 00:03:35,879
work we do not ask you on the existence

74
00:03:35,879 --> 00:03:39,599
of a cross-eye lake instead

75
00:03:39,599 --> 00:03:42,180
we use a browser-based CPU KSI channel

76
00:03:42,180 --> 00:03:44,760
so the attacker is able to learn if the

77
00:03:44,760 --> 00:03:46,980
resource has been loaded or not the

78
00:03:46,980 --> 00:03:49,019
attack page uses JavaScript to measure

79
00:03:49,019 --> 00:03:50,819
the contention to the CPU cache

80
00:03:50,819 --> 00:03:52,739
depending on whether the resource is

81
00:03:52,739 --> 00:03:55,200
being loaded or not the contention to

82
00:03:55,200 --> 00:03:57,720
access the CPU cache will be different

83
00:03:57,720 --> 00:04:01,200
I will produce distinct patterns so the

84
00:04:01,200 --> 00:04:04,560
attack explores the CPU KSI channel on

85
00:04:04,560 --> 00:04:06,360
the target's device and can bypass

86
00:04:06,360 --> 00:04:08,940
isolation Technologies and various

87
00:04:08,940 --> 00:04:11,220
differences deployed by browser vendors

88
00:04:11,220 --> 00:04:14,000
and website owners

89
00:04:21,839 --> 00:04:24,479
a side channel is a mechanism to learn

90
00:04:24,479 --> 00:04:27,000
usually private information indirectly

91
00:04:27,000 --> 00:04:29,639
by analyzing the use of a shared

92
00:04:29,639 --> 00:04:31,680
resource such as attacks or attacks that

93
00:04:31,680 --> 00:04:33,479
analyze the physical implementation

94
00:04:33,479 --> 00:04:35,940
artifacts of a system in order to gain

95
00:04:35,940 --> 00:04:38,639
an insight into its sacred internal

96
00:04:38,639 --> 00:04:40,880
state

97
00:04:41,759 --> 00:04:44,280
in our setting we use micro architecture

98
00:04:44,280 --> 00:04:46,139
and cache attacks which allow us Pi

99
00:04:46,139 --> 00:04:47,520
process to observe the memory access

100
00:04:47,520 --> 00:04:49,500
patterns of a victim process

101
00:04:49,500 --> 00:04:51,840
and use the access patterns to discover

102
00:04:51,840 --> 00:04:55,280
secrets about the victim

103
00:04:55,800 --> 00:04:58,199
we use three different methods to embed

104
00:04:58,199 --> 00:05:00,300
the shared resource in the attack page

105
00:05:00,300 --> 00:05:04,919
the first method is the iframes approach

106
00:05:04,919 --> 00:05:07,620
we use we start measuring the cache

107
00:05:07,620 --> 00:05:09,000
contention

108
00:05:09,000 --> 00:05:11,759
and then we basically create an iframe

109
00:05:11,759 --> 00:05:13,500
element in the attack page to embed the

110
00:05:13,500 --> 00:05:15,840
shared resource while measuring the CPU

111
00:05:15,840 --> 00:05:17,580
cache access patterns

112
00:05:17,580 --> 00:05:19,919
this method is very effective in several

113
00:05:19,919 --> 00:05:22,500
browsers however it has some limitations

114
00:05:22,500 --> 00:05:24,780
where it is not possible to embed the

115
00:05:24,780 --> 00:05:26,460
resource

116
00:05:26,460 --> 00:05:28,800
cross-site to an iframe such as same

117
00:05:28,800 --> 00:05:30,300
side cookie attributes or extreme

118
00:05:30,300 --> 00:05:32,720
options

119
00:05:35,039 --> 00:05:38,639
second method is pathunder

120
00:05:38,639 --> 00:05:40,680
in this method again we'll start

121
00:05:40,680 --> 00:05:43,139
measuring the cache access patterns and

122
00:05:43,139 --> 00:05:45,120
upon user click the attack page opens

123
00:05:45,120 --> 00:05:46,560
the shared resource in a pop-up page

124
00:05:46,560 --> 00:05:48,539
which bypasses the limitations of the

125
00:05:48,539 --> 00:05:51,000
iframe based approach also to make the

126
00:05:51,000 --> 00:05:53,039
attack more explosive after opening the

127
00:05:53,039 --> 00:05:55,919
new window the focus is returned back to

128
00:05:55,919 --> 00:05:57,900
the initial window so the user doesn't

129
00:05:57,900 --> 00:05:59,940
notice it we were able to find a

130
00:05:59,940 --> 00:06:03,919
Pathfinder trick in software browser

131
00:06:10,800 --> 00:06:12,960
in other browsers we use the third

132
00:06:12,960 --> 00:06:16,020
method which is called tab under

133
00:06:16,020 --> 00:06:18,720
in carbender approach open user click a

134
00:06:18,720 --> 00:06:20,759
new tab is opened which has the focus

135
00:06:20,759 --> 00:06:22,759
and

136
00:06:22,759 --> 00:06:25,319
then the initial tab in the background

137
00:06:25,319 --> 00:06:28,080
navigates to the to load the shared

138
00:06:28,080 --> 00:06:32,160
resource while the tab in Focus let's

139
00:06:32,160 --> 00:06:33,840
start measuring the access cache access

140
00:06:33,840 --> 00:06:35,220
patterns

141
00:06:35,220 --> 00:06:38,400
so we use three different methods iframe

142
00:06:38,400 --> 00:06:42,060
based uh path under based and tab under

143
00:06:42,060 --> 00:06:45,680
base approaches for the attacks

144
00:06:46,020 --> 00:06:48,900
we were able to successfully perform the

145
00:06:48,900 --> 00:06:51,060
itemization on multiple operating

146
00:06:51,060 --> 00:06:53,880
systems web browsers and sharing

147
00:06:53,880 --> 00:06:56,220
Services you can read the paper for more

148
00:06:56,220 --> 00:06:57,360
details

149
00:06:57,360 --> 00:07:00,600
in addition to introducing the CPU cache

150
00:07:00,600 --> 00:07:02,460
size Channel based attack as another

151
00:07:02,460 --> 00:07:04,919
novelty of the paper we successfully

152
00:07:04,919 --> 00:07:06,660
execute the attack on browsers that have

153
00:07:06,660 --> 00:07:09,060
a strict policy of not allowing cookies

154
00:07:09,060 --> 00:07:10,740
to be attached to crosstalk requests

155
00:07:10,740 --> 00:07:13,979
including Safari and tour browser

156
00:07:13,979 --> 00:07:16,880
we also

157
00:07:17,940 --> 00:07:20,039
increase the attack's target population

158
00:07:20,039 --> 00:07:21,620
by applying it to highly popular

159
00:07:21,620 --> 00:07:24,060
Services which have no currently

160
00:07:24,060 --> 00:07:26,400
exploited cross site leaks including

161
00:07:26,400 --> 00:07:30,560
Gmail Twitter Facebook and others

162
00:07:30,900 --> 00:07:32,639
the attack was successful in the

163
00:07:32,639 --> 00:07:34,139
settings with the attack accuracy

164
00:07:34,139 --> 00:07:37,500
ranging between 84.5 percent to 100

165
00:07:37,500 --> 00:07:42,360
percent uh and taking less than three

166
00:07:42,360 --> 00:07:44,759
seconds in most cases and up to 10

167
00:07:44,759 --> 00:07:45,560
seconds

168
00:07:45,560 --> 00:07:50,120
uh then using two barrels

169
00:07:50,160 --> 00:07:52,860
okay we've seen the attacks what can we

170
00:07:52,860 --> 00:07:55,340
do about it

171
00:08:00,539 --> 00:08:02,580
we also proposed the difference for

172
00:08:02,580 --> 00:08:05,180
these attacks

173
00:08:07,199 --> 00:08:08,699
this figure

174
00:08:08,699 --> 00:08:10,919
shows the normal behavior in the browser

175
00:08:10,919 --> 00:08:13,380
without artifacts the cross-site request

176
00:08:13,380 --> 00:08:15,300
is made with cookies and the response is

177
00:08:15,300 --> 00:08:18,259
rendered in the browser

178
00:08:22,740 --> 00:08:26,280
our defense Liquidator plus is a browser

179
00:08:26,280 --> 00:08:28,259
extension which sits between the browser

180
00:08:28,259 --> 00:08:31,020
and any website that are visited

181
00:08:31,020 --> 00:08:33,299
this is already publicly available and

182
00:08:33,299 --> 00:08:36,299
be installed in Chrome and firefox's

183
00:08:36,299 --> 00:08:38,520
browsers

184
00:08:38,520 --> 00:08:40,799
can be accessed from their source

185
00:08:40,799 --> 00:08:43,860
it is an improvement on a private prior

186
00:08:43,860 --> 00:08:45,779
work called liquidator

187
00:08:45,779 --> 00:08:48,959
and basically intercepts all HTTP

188
00:08:48,959 --> 00:08:50,700
requests and looks specifically at

189
00:08:50,700 --> 00:08:53,220
requests made cross-site to embed all

190
00:08:53,220 --> 00:08:54,720
the resources

191
00:08:54,720 --> 00:08:56,399
as can be seen in the figure it

192
00:08:56,399 --> 00:08:57,959
outstrips cookies from the crosstalk

193
00:08:57,959 --> 00:08:59,459
request and sends the response back to

194
00:08:59,459 --> 00:09:00,779
the page

195
00:09:00,779 --> 00:09:04,080
but we need cookies for some legitimate

196
00:09:04,080 --> 00:09:06,240
functionalities such as tracking and

197
00:09:06,240 --> 00:09:08,580
analytics so the extension makes the

198
00:09:08,580 --> 00:09:10,140
second request identical to the first

199
00:09:10,140 --> 00:09:11,279
request

200
00:09:11,279 --> 00:09:14,220
this time with cookies

201
00:09:14,220 --> 00:09:16,320
however the second response is not

202
00:09:16,320 --> 00:09:19,140
rendered in the browser

203
00:09:19,140 --> 00:09:20,760
then the accession Compares the two

204
00:09:20,760 --> 00:09:22,440
responses the first respond and second

205
00:09:22,440 --> 00:09:25,080
response and if there is something

206
00:09:25,080 --> 00:09:28,080
different in two responses it means that

207
00:09:28,080 --> 00:09:30,660
the response relies on cookies

208
00:09:30,660 --> 00:09:32,880
which makes it prone to Target the

209
00:09:32,880 --> 00:09:35,459
amazing attacks at this time the

210
00:09:35,459 --> 00:09:37,560
extension notifies the user and let the

211
00:09:37,560 --> 00:09:40,939
user decide what to do about it

212
00:09:41,640 --> 00:09:44,459
here are some challenges we encountered

213
00:09:44,459 --> 00:09:48,600
when developing this solution

214
00:09:48,600 --> 00:09:51,180
pop unders and tabunders were new

215
00:09:51,180 --> 00:09:53,279
variants of the attack we introduced so

216
00:09:53,279 --> 00:09:54,959
we extended the defense to protect

217
00:09:54,959 --> 00:09:56,760
against these methods the defense

218
00:09:56,760 --> 00:09:58,740
specifically keeps track of relations

219
00:09:58,740 --> 00:10:01,500
between tabs and windows to check which

220
00:10:01,500 --> 00:10:03,420
one was opened by which other type or

221
00:10:03,420 --> 00:10:05,100
window

222
00:10:05,100 --> 00:10:07,680
we noticed that there were some residual

223
00:10:07,680 --> 00:10:10,440
side channels remained despite their

224
00:10:10,440 --> 00:10:13,560
despite having this extension installed

225
00:10:13,560 --> 00:10:15,420
for example the response time for the

226
00:10:15,420 --> 00:10:17,100
second request is different depending on

227
00:10:17,100 --> 00:10:20,339
the cookies we added a small random

228
00:10:20,339 --> 00:10:23,720
delay to resolve this issue

229
00:10:27,120 --> 00:10:28,980
the second request also allows to

230
00:10:28,980 --> 00:10:30,839
maintain web functions such as tracking

231
00:10:30,839 --> 00:10:35,220
and analytics also we

232
00:10:35,220 --> 00:10:37,920
the initial version of the extension was

233
00:10:37,920 --> 00:10:40,080
only supported in chromium based

234
00:10:40,080 --> 00:10:42,420
browsers we added support for Firefox

235
00:10:42,420 --> 00:10:45,199
and tour as well

236
00:10:46,440 --> 00:10:48,360
after making this Improvement the attack

237
00:10:48,360 --> 00:10:50,160
accuracy with the device enabled through

238
00:10:50,160 --> 00:10:53,399
up to 50 percent which is basically

239
00:10:53,399 --> 00:10:55,980
equivalent to touching a coin

240
00:10:55,980 --> 00:10:58,200
so

241
00:10:58,200 --> 00:11:00,660
in summary we introduced the novel idea

242
00:11:00,660 --> 00:11:02,700
of using CPU Kai side Channel instead of

243
00:11:02,700 --> 00:11:04,440
cross-set leaks for Target the amazing

244
00:11:04,440 --> 00:11:06,660
attacks we also increase the attack's

245
00:11:06,660 --> 00:11:08,160
target population by applying it on

246
00:11:08,160 --> 00:11:10,140
popular websites and more restrictive

247
00:11:10,140 --> 00:11:12,480
browsers which was not possible before

248
00:11:12,480 --> 00:11:14,700
on the defense side we introduced the

249
00:11:14,700 --> 00:11:16,700
Liquidator plus protecting against these

250
00:11:16,700 --> 00:11:19,680
attacks a scan the QR code and download

251
00:11:19,680 --> 00:11:22,620
it now install it on your browser in

252
00:11:22,620 --> 00:11:24,720
addition our artifacts were evaluated by

253
00:11:24,720 --> 00:11:26,700
using artifact evaluation committee and

254
00:11:26,700 --> 00:11:28,440
received all devices which is available

255
00:11:28,440 --> 00:11:30,600
it is functional and results were

256
00:11:30,600 --> 00:11:32,880
reproduced you can access it in GitHub

257
00:11:32,880 --> 00:11:34,920
we also perform responsible disclosure

258
00:11:34,920 --> 00:11:36,540
to browser vendors and affected services

259
00:11:36,540 --> 00:11:39,420
in the paper we also provide guidance to

260
00:11:39,420 --> 00:11:41,640
all affected parties on how to mitigate

261
00:11:41,640 --> 00:11:43,860
the attacks we also we are actively

262
00:11:43,860 --> 00:11:45,959
working with browser windows to deploy

263
00:11:45,959 --> 00:11:47,700
defenses against these attacks

264
00:11:47,700 --> 00:11:49,620
thanks for your attention and I'm ready

265
00:11:49,620 --> 00:11:52,100
for your questions

