1
00:00:07,880 --> 00:00:10,980
thanks for the introduction uh today I

2
00:00:10,980 --> 00:00:12,480
am here to talk about a second

3
00:00:12,480 --> 00:00:14,160
generation compromise credential

4
00:00:14,160 --> 00:00:16,820
checking service

5
00:00:17,400 --> 00:00:19,800
the number of password breaches have

6
00:00:19,800 --> 00:00:21,600
increased over the years millions

7
00:00:21,600 --> 00:00:23,580
billions of passwords are leaked every

8
00:00:23,580 --> 00:00:25,859
year according to a recent report in the

9
00:00:25,859 --> 00:00:29,039
first half of 2021 alone about 5.4

10
00:00:29,039 --> 00:00:31,199
billion records were exposed with the

11
00:00:31,199 --> 00:00:33,360
increase in the number of websites and

12
00:00:33,360 --> 00:00:35,340
internet users password breaches will

13
00:00:35,340 --> 00:00:38,960
become more prevalent in coming years

14
00:00:39,480 --> 00:00:42,600
so I'll start by giving an overview of

15
00:00:42,600 --> 00:00:45,420
the entire credential ecosystem

16
00:00:45,420 --> 00:00:48,539
so let's say there's a user Mark who

17
00:00:48,539 --> 00:00:52,739
uses his password to log into website a

18
00:00:52,739 --> 00:00:55,800
Mark uses the same password for login

19
00:00:55,800 --> 00:00:58,559
purposes in website B this is a very

20
00:00:58,559 --> 00:01:01,260
common as a prior work reports that 40

21
00:01:01,260 --> 00:01:03,059
percent of users reuse their password

22
00:01:03,059 --> 00:01:05,339
across websites

23
00:01:05,339 --> 00:01:07,500
Mark has also chosen a very similar

24
00:01:07,500 --> 00:01:10,260
password and website C by replacing the

25
00:01:10,260 --> 00:01:14,580
last digit 1 to suffix one two three

26
00:01:14,580 --> 00:01:16,799
so let us assume website a gets

27
00:01:16,799 --> 00:01:19,080
compromised and the breached data from

28
00:01:19,080 --> 00:01:21,600
website a is compiled and sold over

29
00:01:21,600 --> 00:01:24,780
internet this is very common as attacker

30
00:01:24,780 --> 00:01:27,299
often use these breach compile data set

31
00:01:27,299 --> 00:01:29,700
to compromise accounts in other websites

32
00:01:29,700 --> 00:01:33,540
in this case attacker uses marks breach

33
00:01:33,540 --> 00:01:36,659
data to get access to his account in

34
00:01:36,659 --> 00:01:38,460
website B

35
00:01:38,460 --> 00:01:40,259
this kind of an attack is known as

36
00:01:40,259 --> 00:01:42,540
credential stuffing attack and is likely

37
00:01:42,540 --> 00:01:43,920
the most prevalent form of account

38
00:01:43,920 --> 00:01:46,500
compromise today

39
00:01:46,500 --> 00:01:48,960
so nowadays websites often integrate

40
00:01:48,960 --> 00:01:50,939
with compromise credential checking

41
00:01:50,939 --> 00:01:53,159
services or C3 service

42
00:01:53,159 --> 00:01:57,840
to get latest breach notifications and

43
00:01:57,840 --> 00:01:59,520
prevent credential stuffing attack

44
00:01:59,520 --> 00:02:01,920
several companies like Google Apple

45
00:02:01,920 --> 00:02:03,960
Microsoft have deployed their own

46
00:02:03,960 --> 00:02:05,939
credential checking service today

47
00:02:05,939 --> 00:02:08,280
checking today uh checking for

48
00:02:08,280 --> 00:02:10,500
compromise credential is part of all

49
00:02:10,500 --> 00:02:14,099
major browsers and phone interfaces

50
00:02:14,099 --> 00:02:16,560
so this stops credential stuffing attack

51
00:02:16,560 --> 00:02:19,620
however attacker can still generate

52
00:02:19,620 --> 00:02:23,280
similar variants of the breach password

53
00:02:23,280 --> 00:02:26,400
uh to compromise Mark's account in

54
00:02:26,400 --> 00:02:29,220
website C this kind of in this attack is

55
00:02:29,220 --> 00:02:31,440
known as credential tweaking attack

56
00:02:31,440 --> 00:02:33,420
and prior work has showed using

57
00:02:33,420 --> 00:02:35,580
simulations that credential tweaking

58
00:02:35,580 --> 00:02:37,920
attack and compromise 16 percent of

59
00:02:37,920 --> 00:02:40,140
accounts in less than thousand guesses

60
00:02:40,140 --> 00:02:42,180
given access to one of the breach

61
00:02:42,180 --> 00:02:44,840
passwords

62
00:02:45,239 --> 00:02:48,540
so to prevent this attack in this paper

63
00:02:48,540 --> 00:02:50,760
we design a second generation of

64
00:02:50,760 --> 00:02:52,440
compromise credential checking service

65
00:02:52,440 --> 00:02:55,920
might I get Pawn or mCP mCP prevents

66
00:02:55,920 --> 00:02:58,019
both credential stuffing and credential

67
00:02:58,019 --> 00:03:00,360
tweaking attack

68
00:03:00,360 --> 00:03:02,940
so we Define a new type of compromise

69
00:03:02,940 --> 00:03:04,680
credential checking service called

70
00:03:04,680 --> 00:03:08,280
similarity aware C3 service we formalize

71
00:03:08,280 --> 00:03:11,580
the this we formalized similarity aware

72
00:03:11,580 --> 00:03:14,519
C3 service setting and design a system

73
00:03:14,519 --> 00:03:18,000
design the system MCB in this work we

74
00:03:18,000 --> 00:03:20,099
also empirically evaluate the

75
00:03:20,099 --> 00:03:21,900
effectiveness of different similarity

76
00:03:21,900 --> 00:03:24,720
measures we analyzed empirically and

77
00:03:24,720 --> 00:03:26,940
theoretically the threat of a malicious

78
00:03:26,940 --> 00:03:29,220
client trying to extract sensitive

79
00:03:29,220 --> 00:03:31,980
breached data which we call as Bridge

80
00:03:31,980 --> 00:03:34,560
extraction attack and propose ways to

81
00:03:34,560 --> 00:03:36,900
mitigate it finally

82
00:03:36,900 --> 00:03:39,659
uh we report on an initial prototype of

83
00:03:39,659 --> 00:03:42,840
mCP and show its practicality by

84
00:03:42,840 --> 00:03:46,159
deploying it at Cloud Fair

85
00:03:46,560 --> 00:03:48,599
to provide a background currently

86
00:03:48,599 --> 00:03:51,000
deployed first generation C3 service

87
00:03:51,000 --> 00:03:53,519
allows users to find out if their

88
00:03:53,519 --> 00:03:55,319
credentials are breached without

89
00:03:55,319 --> 00:03:58,319
revealing it to the C3 server some of

90
00:03:58,319 --> 00:04:00,720
the properties of the protocol as the is

91
00:04:00,720 --> 00:04:03,360
that it protect clients password in the

92
00:04:03,360 --> 00:04:05,940
presence of a malicious server malicious

93
00:04:05,940 --> 00:04:07,799
client only finds out if their

94
00:04:07,799 --> 00:04:09,540
credential is breached or not and

95
00:04:09,540 --> 00:04:11,879
nothing else and the protocols are fast

96
00:04:11,879 --> 00:04:15,000
for large-scale deployment

97
00:04:15,000 --> 00:04:17,339
so in this work we introduce an updated

98
00:04:17,339 --> 00:04:19,079
version of compromise credential

99
00:04:19,079 --> 00:04:21,478
checking service might I get Pawn or

100
00:04:21,478 --> 00:04:22,800
mcpay

101
00:04:22,800 --> 00:04:25,080
this mCP prevents both credential

102
00:04:25,080 --> 00:04:27,720
tweaking and stuffing attack Mickey

103
00:04:27,720 --> 00:04:30,000
provides an interface where client can

104
00:04:30,000 --> 00:04:32,280
securely query their username and

105
00:04:32,280 --> 00:04:35,520
password in case the credential exactly

106
00:04:35,520 --> 00:04:38,400
matches mcbe returns a match and in case

107
00:04:38,400 --> 00:04:41,160
the credential is similar to any of the

108
00:04:41,160 --> 00:04:43,740
breached entries it returns similar

109
00:04:43,740 --> 00:04:46,259
to realize such a system we first need

110
00:04:46,259 --> 00:04:49,440
to answer some these questions firstly

111
00:04:49,440 --> 00:04:53,400
what is the security risk involved in

112
00:04:53,400 --> 00:04:55,800
deploying similarity of our CT service

113
00:04:55,800 --> 00:04:58,139
the next question is how can we Define

114
00:04:58,139 --> 00:05:01,080
this how can we Define similarity and

115
00:05:01,080 --> 00:05:03,360
finally how can we Implement a privacy

116
00:05:03,360 --> 00:05:05,699
preserving Deployable protocol that

117
00:05:05,699 --> 00:05:08,960
achieves this functionality

118
00:05:10,440 --> 00:05:13,560
so to answer the first question

119
00:05:13,560 --> 00:05:16,320
the security requirements of mCP is same

120
00:05:16,320 --> 00:05:20,639
as that of a C3 s system however we need

121
00:05:20,639 --> 00:05:23,039
to additionally answer this question of

122
00:05:23,039 --> 00:05:25,680
can a malicious client abuse the

123
00:05:25,680 --> 00:05:28,139
similarity checking feature to extract

124
00:05:28,139 --> 00:05:30,720
sensitive breach data from mCP which we

125
00:05:30,720 --> 00:05:32,699
call breach extraction attack

126
00:05:32,699 --> 00:05:35,039
in other words does this extra

127
00:05:35,039 --> 00:05:37,259
information regarding similarity makes

128
00:05:37,259 --> 00:05:40,259
the attacks more effective we perform a

129
00:05:40,259 --> 00:05:42,660
thorough analysis of these attacks and

130
00:05:42,660 --> 00:05:45,360
we show that the mCP that the breach

131
00:05:45,360 --> 00:05:48,300
extraction attack in mCP is less than

132
00:05:48,300 --> 00:05:50,940
currently deployed CSU service we also

133
00:05:50,940 --> 00:05:53,400
propose various ways to mitigate it and

134
00:05:53,400 --> 00:05:55,139
we are and you can refer to the paper

135
00:05:55,139 --> 00:05:57,180
for more details

136
00:05:57,180 --> 00:05:59,820
so given we have techniques to reduce

137
00:05:59,820 --> 00:06:01,919
breach extraction attack we will now

138
00:06:01,919 --> 00:06:03,840
focus on the design and implementation

139
00:06:03,840 --> 00:06:06,360
of midp

140
00:06:06,360 --> 00:06:08,340
so the next question is how do we Define

141
00:06:08,340 --> 00:06:10,139
similarity

142
00:06:10,139 --> 00:06:12,720
ideally we want our similarity measure

143
00:06:12,720 --> 00:06:17,039
to help warn users if their password is

144
00:06:17,039 --> 00:06:19,259
vulnerable to online credential tweaking

145
00:06:19,259 --> 00:06:21,960
attack therefore a good similarity

146
00:06:21,960 --> 00:06:25,380
measure is to call password W Dash

147
00:06:25,380 --> 00:06:29,039
similar to W if W Dash appears early in

148
00:06:29,039 --> 00:06:31,560
the guest list of a credential tweaking

149
00:06:31,560 --> 00:06:34,080
attack based on W in other words

150
00:06:34,080 --> 00:06:37,560
password W and W Dash are similar if W

151
00:06:37,560 --> 00:06:42,560
Dash is within top similar variants of w

152
00:06:42,660 --> 00:06:44,940
so the next question is what is the most

153
00:06:44,940 --> 00:06:47,100
effective way to generate these variants

154
00:06:47,100 --> 00:06:49,319
state of the art credential tweaking

155
00:06:49,319 --> 00:06:52,500
attack is computationally expensive and

156
00:06:52,500 --> 00:06:54,300
therefore in our work we show that

157
00:06:54,300 --> 00:06:56,220
empirically derived weighted at a

158
00:06:56,220 --> 00:06:58,560
distance based mangling rules works best

159
00:06:58,560 --> 00:07:00,300
both in terms of performance and

160
00:07:00,300 --> 00:07:02,900
efficacy

161
00:07:03,360 --> 00:07:05,280
so now we will look into how we can

162
00:07:05,280 --> 00:07:07,620
integrate this similar variant checking

163
00:07:07,620 --> 00:07:10,460
into a protocol

164
00:07:10,680 --> 00:07:13,560
the first way to extend our original C3

165
00:07:13,560 --> 00:07:16,860
protocol is to add is to generate n

166
00:07:16,860 --> 00:07:19,560
variance server side and add them to the

167
00:07:19,560 --> 00:07:23,280
database we can then update the protocol

168
00:07:23,280 --> 00:07:26,160
to reveal Upon A match whether the match

169
00:07:26,160 --> 00:07:28,919
was with the original breach password or

170
00:07:28,919 --> 00:07:31,919
the generated similar variants

171
00:07:31,919 --> 00:07:34,440
however this approach leads to increase

172
00:07:34,440 --> 00:07:37,199
in this storage and the bandwidth cost

173
00:07:37,199 --> 00:07:39,419
as the size of the bucket increases with

174
00:07:39,419 --> 00:07:42,740
the addition of the variance

175
00:07:42,780 --> 00:07:44,940
the second scenario is when the variants

176
00:07:44,940 --> 00:07:47,880
are generated on the client side so the

177
00:07:47,880 --> 00:07:50,160
user runs a protocol on the user variant

178
00:07:50,160 --> 00:07:52,800
and the M generated similar variants

179
00:07:52,800 --> 00:07:55,259
sorry on the user credential and the M

180
00:07:55,259 --> 00:07:57,660
generated similar variants the

181
00:07:57,660 --> 00:08:00,060
limitation with this approach is that

182
00:08:00,060 --> 00:08:02,280
leads to increase in in the breach

183
00:08:02,280 --> 00:08:04,620
extraction attacks efficacy and client

184
00:08:04,620 --> 00:08:07,460
computation cost

185
00:08:07,560 --> 00:08:09,720
finally we can take a hybrid approach

186
00:08:09,720 --> 00:08:11,340
where

187
00:08:11,340 --> 00:08:14,039
um the client we generate M variance

188
00:08:14,039 --> 00:08:16,380
client-side and variants on the server

189
00:08:16,380 --> 00:08:18,560
side

190
00:08:19,319 --> 00:08:21,419
so we empirically explore different

191
00:08:21,419 --> 00:08:23,460
trade-offs in performance and security

192
00:08:23,460 --> 00:08:26,879
for client-side server side and hybrid

193
00:08:26,879 --> 00:08:28,500
generation of variants to help

194
00:08:28,500 --> 00:08:30,599
practitioner decide which approach to

195
00:08:30,599 --> 00:08:34,740
choose we use a 1.4 billion compiled

196
00:08:34,740 --> 00:08:36,719
breached credential data set for

197
00:08:36,719 --> 00:08:39,599
simulations so we take this data set and

198
00:08:39,599 --> 00:08:41,760
divide it into two parts the leaked data

199
00:08:41,760 --> 00:08:44,520
set is available to the attacker and and

200
00:08:44,520 --> 00:08:46,800
the mCP server and the test data set is

201
00:08:46,800 --> 00:08:49,740
used to sample Target passwords for

202
00:08:49,740 --> 00:08:52,700
security simulation

203
00:08:52,920 --> 00:08:55,200
for security valuation we record the

204
00:08:55,200 --> 00:08:56,700
efficacy of a credential tweaking

205
00:08:56,700 --> 00:08:58,740
attacker with thousand guesses in the

206
00:08:58,740 --> 00:09:01,080
presence of MCB for performance

207
00:09:01,080 --> 00:09:03,360
evaluation we measure average bandwidth

208
00:09:03,360 --> 00:09:06,620
and client computation cost

209
00:09:07,800 --> 00:09:09,839
so in this graph we compare the

210
00:09:09,839 --> 00:09:12,600
different MCB architecture the exact

211
00:09:12,600 --> 00:09:15,180
checking corresponds to the currently

212
00:09:15,180 --> 00:09:17,580
deployed CT service which gives best

213
00:09:17,580 --> 00:09:20,459
performance in terms best numbers in

214
00:09:20,459 --> 00:09:22,260
terms of performance

215
00:09:22,260 --> 00:09:25,560
uh for client computation cost migbee

216
00:09:25,560 --> 00:09:27,420
server performs better than McPeak

217
00:09:27,420 --> 00:09:29,279
client and in terms of storage

218
00:09:29,279 --> 00:09:31,200
requirement might be client is better

219
00:09:31,200 --> 00:09:35,640
than mCP server mCP hybrid gives a good

220
00:09:35,640 --> 00:09:37,680
balance between McPeak client and MCB

221
00:09:37,680 --> 00:09:39,720
server in terms of client computation

222
00:09:39,720 --> 00:09:43,220
and storage respectively

223
00:09:44,580 --> 00:09:46,980
if we look at the credential tweaking

224
00:09:46,980 --> 00:09:50,700
attackers accuracy the exact checking

225
00:09:50,700 --> 00:09:53,160
systems or the currently deployed CT

226
00:09:53,160 --> 00:09:55,740
services are the most vulnerable to

227
00:09:55,740 --> 00:09:57,779
credential tweaking attacker

228
00:09:57,779 --> 00:10:00,120
the attack accuracy for make Peak line

229
00:10:00,120 --> 00:10:03,300
and mCP server is same given both of

230
00:10:03,300 --> 00:10:04,980
them checks against the same number of

231
00:10:04,980 --> 00:10:08,040
variants and mCP hybrid is most robust

232
00:10:08,040 --> 00:10:11,120
against these attacks

233
00:10:11,760 --> 00:10:14,220
finally all of this helped educate our

234
00:10:14,220 --> 00:10:16,380
deployment of mCP in collaboration with

235
00:10:16,380 --> 00:10:18,779
Cloud Fair a major CDN and security

236
00:10:18,779 --> 00:10:21,300
service provider

237
00:10:21,300 --> 00:10:23,940
Mickey is currently deployed as a public

238
00:10:23,940 --> 00:10:26,820
facing API where users can query their

239
00:10:26,820 --> 00:10:30,600
credential and is also part of is also a

240
00:10:30,600 --> 00:10:32,940
part of the new breach alerting feature

241
00:10:32,940 --> 00:10:35,880
within Cloud for cloud fairs web

242
00:10:35,880 --> 00:10:37,980
application firewall

243
00:10:37,980 --> 00:10:40,800
to measure the effectiveness of mCP we

244
00:10:40,800 --> 00:10:43,140
instrumented a measurement study on

245
00:10:43,140 --> 00:10:45,480
cloudflare's Warf deployment and we

246
00:10:45,480 --> 00:10:48,060
concluded that mCP is able to flag 20

247
00:10:48,060 --> 00:10:50,519
percent more vulnerable login attempts

248
00:10:50,519 --> 00:10:54,360
compared to exact checking CC service

249
00:10:54,360 --> 00:10:56,940
with a large scale deployment of mCP and

250
00:10:56,940 --> 00:10:58,740
Cloud Fair we demonstrate the

251
00:10:58,740 --> 00:11:01,019
feasibility practicality and usefulness

252
00:11:01,019 --> 00:11:03,060
of checking for similar breach

253
00:11:03,060 --> 00:11:04,920
credential in a privacy present day

254
00:11:04,920 --> 00:11:06,720
thank you and happy to take any

255
00:11:06,720 --> 00:11:08,959
questions

