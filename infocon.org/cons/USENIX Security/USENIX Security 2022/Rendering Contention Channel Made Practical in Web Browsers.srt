1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:11,179 --> 00:00:13,880
student from Johns Hopkins University

3
00:00:13,880 --> 00:00:17,400
today let me introduce our paper

4
00:00:17,400 --> 00:00:19,859
rendering contention Channel made the

5
00:00:19,859 --> 00:00:23,699
practice make practical in web browsers

6
00:00:23,699 --> 00:00:27,300
first let me introduce what is the

7
00:00:27,300 --> 00:00:29,660
rendering condition channel for example

8
00:00:29,660 --> 00:00:33,120
if we open two page on the same computer

9
00:00:33,120 --> 00:00:38,219
page a and Page B and post page has

10
00:00:38,219 --> 00:00:40,079
rendering task

11
00:00:40,079 --> 00:00:43,200
page a has a lower rendering workload

12
00:00:43,200 --> 00:00:47,160
like rendering 100 elements and Page B

13
00:00:47,160 --> 00:00:51,480
has a high rendering workload like has

14
00:00:51,480 --> 00:00:55,559
over 10 thousands rendering workloads

15
00:00:55,559 --> 00:00:59,579
and when we draw a graph the x-axis is

16
00:00:59,579 --> 00:01:03,059
time and the y-axis is rendering time

17
00:01:03,059 --> 00:01:06,240
per frame because page a has a low

18
00:01:06,240 --> 00:01:10,560
rendering workload the page a has a low

19
00:01:10,560 --> 00:01:13,860
rendering time pair of frames and Page B

20
00:01:13,860 --> 00:01:18,240
has a high rendering time per frame

21
00:01:18,240 --> 00:01:21,240
one page a and the page B has a stable

22
00:01:21,240 --> 00:01:24,360
rendering task the rendering time is

23
00:01:24,360 --> 00:01:26,640
also stable

24
00:01:26,640 --> 00:01:29,820
after that when page B decrease the

25
00:01:29,820 --> 00:01:35,159
rendering workload from 10 000 to 1. the

26
00:01:35,159 --> 00:01:38,280
rendering time of page B will become

27
00:01:38,280 --> 00:01:39,360
lower

28
00:01:39,360 --> 00:01:42,060
also even if the page area has

29
00:01:42,060 --> 00:01:44,700
sustainable working random task the

30
00:01:44,700 --> 00:01:47,299
rendering time of page a

31
00:01:47,299 --> 00:01:50,880
will still counts low

32
00:01:50,880 --> 00:01:53,040
while on page a increase the rendering

33
00:01:53,040 --> 00:01:57,479
workload from 100 to 20 thousands we

34
00:01:57,479 --> 00:02:00,360
have the both page a and the page B

35
00:02:00,360 --> 00:02:03,240
rendering time will become higher it

36
00:02:03,240 --> 00:02:06,780
means page a and Page B are influenced

37
00:02:06,780 --> 00:02:09,780
by each other and they share some

38
00:02:09,780 --> 00:02:12,480
resource and this is the rendering

39
00:02:12,480 --> 00:02:14,580
contention Channel

40
00:02:14,580 --> 00:02:17,280
after introdu introduced the run water

41
00:02:17,280 --> 00:02:19,860
rendering contention channel is waiting

42
00:02:19,860 --> 00:02:21,959
for the reason

43
00:02:21,959 --> 00:02:24,959
uh we design math knowledge the single

44
00:02:24,959 --> 00:02:27,900
variable testing to import the reason we

45
00:02:27,900 --> 00:02:31,319
have three parts uh sender Observer and

46
00:02:31,319 --> 00:02:33,180
noise generator

47
00:02:33,180 --> 00:02:35,940
Center will Center run or ground choose

48
00:02:35,940 --> 00:02:38,879
workload Observer compare what's being

49
00:02:38,879 --> 00:02:40,980
measured in the Channel with the ground

50
00:02:40,980 --> 00:02:44,099
choose to compute the single to North

51
00:02:44,099 --> 00:02:46,440
ratio is the SNR value

52
00:02:46,440 --> 00:02:49,080
and the NOS generator change when

53
00:02:49,080 --> 00:02:52,260
preparator like the frequency thread

54
00:02:52,260 --> 00:02:56,420
number CPU GPU workload

55
00:02:56,540 --> 00:03:00,500
and the variable graph

56
00:03:00,500 --> 00:03:04,340
when the line comes lower it means this

57
00:03:04,340 --> 00:03:08,760
appropriator influence the rendering

58
00:03:08,760 --> 00:03:11,480
content Channel if the line is flight

59
00:03:11,480 --> 00:03:15,360
the proprietor does not influence the

60
00:03:15,360 --> 00:03:18,360
channel

61
00:03:18,360 --> 00:03:21,000
before that let's talk some background

62
00:03:21,000 --> 00:03:23,879
about the rendering resource on the

63
00:03:23,879 --> 00:03:27,000
hardware level we have two different

64
00:03:27,000 --> 00:03:28,980
rendering they are the hardware

65
00:03:28,980 --> 00:03:32,580
rendering and the software rendering in

66
00:03:32,580 --> 00:03:36,180
our other size we found CPU GPU screen

67
00:03:36,180 --> 00:03:38,940
buffer contribute to Hardware rendering

68
00:03:38,940 --> 00:03:42,720
and CPU screen buffer contribute to

69
00:03:42,720 --> 00:03:45,299
software rendering

70
00:03:45,299 --> 00:03:47,760
so we started with the hardware

71
00:03:47,760 --> 00:03:50,760
rendering we test on the Chrome and the

72
00:03:50,760 --> 00:03:53,580
test sound for different machines for

73
00:03:53,580 --> 00:03:56,940
CPU we test on the frequency and the

74
00:03:56,940 --> 00:03:59,519
thread number according to the SNR value

75
00:03:59,519 --> 00:04:02,340
we found CPU contribute to the hardware

76
00:04:02,340 --> 00:04:03,840
rendering

77
00:04:03,840 --> 00:04:06,840
also on the GPU part according to the

78
00:04:06,840 --> 00:04:09,900
SLR value we found GPU has the most

79
00:04:09,900 --> 00:04:13,260
contribution to the hardware rendering

80
00:04:13,260 --> 00:04:15,900
and the screen buffer also influence the

81
00:04:15,900 --> 00:04:18,779
result but has few contributions to

82
00:04:18,779 --> 00:04:21,298
Hardware rendering

83
00:04:21,298 --> 00:04:23,639
we also use the same test on the

84
00:04:23,639 --> 00:04:26,100
software rendering and also according to

85
00:04:26,100 --> 00:04:27,960
the frequency and the story number we

86
00:04:27,960 --> 00:04:30,780
found the CPU contribute to the software

87
00:04:30,780 --> 00:04:32,820
Android rendering and the screen buffer

88
00:04:32,820 --> 00:04:34,860
also contribute to the screen bath as

89
00:04:34,860 --> 00:04:36,660
software entry

90
00:04:36,660 --> 00:04:39,780
when we test the GPU on the software

91
00:04:39,780 --> 00:04:43,080
rendering we can find the SNR value as

92
00:04:43,080 --> 00:04:46,800
flight it means GPU does not influence

93
00:04:46,800 --> 00:04:49,680
the software rendering

94
00:04:49,680 --> 00:04:52,580
according to the reason we design and

95
00:04:52,580 --> 00:04:56,580
deploy our attack frame set rendering

96
00:04:56,580 --> 00:04:59,699
a side rendering framework reduce the

97
00:04:59,699 --> 00:05:02,040
noise level of the rendering contention

98
00:05:02,040 --> 00:05:05,940
channel the bottom curve is the raw data

99
00:05:05,940 --> 00:05:08,820
we can find a lot of noise under raw

100
00:05:08,820 --> 00:05:11,880
data that's the set rendering framework

101
00:05:11,880 --> 00:05:15,240
has two steps to deal with the data the

102
00:05:15,240 --> 00:05:17,280
first step is smoothing

103
00:05:17,280 --> 00:05:19,740
smoothing adopts a sliding window and

104
00:05:19,740 --> 00:05:23,660
applies a smoothing filter

105
00:05:25,139 --> 00:05:27,539
after smoothing we can find the curve

106
00:05:27,539 --> 00:05:28,979
become this way

107
00:05:28,979 --> 00:05:31,380
and we also know that the different

108
00:05:31,380 --> 00:05:33,479
computer the different machine has the

109
00:05:33,479 --> 00:05:37,080
different rendering capabilities which

110
00:05:37,080 --> 00:05:40,020
means that if we want to use the one one

111
00:05:40,020 --> 00:05:41,759
algorithm to deploy on the different

112
00:05:41,759 --> 00:05:44,699
machines we need to do the normalization

113
00:05:44,699 --> 00:05:47,400
and normalization becomes two top and

114
00:05:47,400 --> 00:05:49,919
low reference value

115
00:05:49,919 --> 00:05:53,580
and the curve become this still

116
00:05:53,580 --> 00:05:57,479
so uh so we dominant let's treat the

117
00:05:57,479 --> 00:06:00,060
four attacks according to our words and

118
00:06:00,060 --> 00:06:02,820
rendering framework and because of the

119
00:06:02,820 --> 00:06:05,419
time we just can introduce two of them

120
00:06:05,419 --> 00:06:09,419
the first is the cookie crossbrother

121
00:06:09,419 --> 00:06:11,220
cookies organization

122
00:06:11,220 --> 00:06:13,919
in this attack we have two different

123
00:06:13,919 --> 00:06:17,400
parts the center and the receiver

124
00:06:17,400 --> 00:06:20,280
the received part runs a stable

125
00:06:20,280 --> 00:06:22,800
rendering workload and the sender has

126
00:06:22,800 --> 00:06:25,440
two different style the high workloads

127
00:06:25,440 --> 00:06:28,560
there and the lowest workloads there

128
00:06:28,560 --> 00:06:31,160
just like the example we show previous

129
00:06:31,160 --> 00:06:34,139
when the sender has the high workload

130
00:06:34,139 --> 00:06:36,720
workout and the low work workload

131
00:06:36,720 --> 00:06:39,539
rendering task the receiver the the

132
00:06:39,539 --> 00:06:42,900
rendering time of receiver is different

133
00:06:42,900 --> 00:06:45,539
it means the sender can the sender

134
00:06:45,539 --> 00:06:48,180
transfer the cookie to the banner array

135
00:06:48,180 --> 00:06:50,460
and send it to the receiver and the

136
00:06:50,460 --> 00:06:53,280
receiver according to the rendering time

137
00:06:53,280 --> 00:06:56,359
can know the result

138
00:06:56,780 --> 00:07:02,400
in our evaluation we found that uh so

139
00:07:02,400 --> 00:07:04,919
the we test on the different browsers

140
00:07:04,919 --> 00:07:08,100
the sender has the Chrome Safari and

141
00:07:08,100 --> 00:07:11,699
Fairfax the receiver has the Chrome

142
00:07:11,699 --> 00:07:15,300
Safari Fairfax and the top browser

143
00:07:15,300 --> 00:07:18,419
uh the top browser is not considered to

144
00:07:18,419 --> 00:07:20,160
the sender because the top browser will

145
00:07:20,160 --> 00:07:23,340
clean the cookie after every season

146
00:07:23,340 --> 00:07:25,919
so according to the result we we can

147
00:07:25,919 --> 00:07:28,319
find for the same browser like Chrome to

148
00:07:28,319 --> 00:07:31,979
Chrome the speed can catch the 1.12 bits

149
00:07:31,979 --> 00:07:35,160
per seconds and for the different router

150
00:07:35,160 --> 00:07:38,520
like the Chrome to the safari the speed

151
00:07:38,520 --> 00:07:43,380
can catch the 0.56 based seconds and the

152
00:07:43,380 --> 00:07:45,900
top browser is the most hard part the

153
00:07:45,900 --> 00:07:47,720
speed can catch the

154
00:07:47,720 --> 00:07:51,800
0.28 beige per seconds

155
00:07:51,840 --> 00:07:55,319
so for the next attack is the website

156
00:07:55,319 --> 00:07:57,960
fingerprinting we also need to talk

157
00:07:57,960 --> 00:08:00,660
about some background about how the

158
00:08:00,660 --> 00:08:03,180
browser rendering a website

159
00:08:03,180 --> 00:08:05,699
it is the incremental rendering

160
00:08:05,699 --> 00:08:08,639
we can take a Google as an example for

161
00:08:08,639 --> 00:08:10,680
example when the browser open Google

162
00:08:10,680 --> 00:08:13,860
website it will not rendering everything

163
00:08:13,860 --> 00:08:17,460
at the same frame now for example on the

164
00:08:17,460 --> 00:08:19,500
first frame it's just rendering the

165
00:08:19,500 --> 00:08:22,319
search bar and then the next frame it

166
00:08:22,319 --> 00:08:25,259
will rendering the logo and then it will

167
00:08:25,259 --> 00:08:27,300
rendering The Click button and then we

168
00:08:27,300 --> 00:08:29,340
are rendering the icon

169
00:08:29,340 --> 00:08:31,620
because of all the different frame it we

170
00:08:31,620 --> 00:08:32,760
are rendering the different element

171
00:08:32,760 --> 00:08:36,000
element and has a different rendering

172
00:08:36,000 --> 00:08:39,000
workload it means that we can catch a

173
00:08:39,000 --> 00:08:42,299
rendering python period according to the

174
00:08:42,299 --> 00:08:43,500
website

175
00:08:43,500 --> 00:08:46,200
that we designed a attack website

176
00:08:46,200 --> 00:08:49,680
fingerprinting we have two web page our

177
00:08:49,680 --> 00:08:53,399
attack web page will run will run will

178
00:08:53,399 --> 00:08:58,320
has a stable rendering tasks and we also

179
00:08:58,320 --> 00:09:01,320
has a Target website as we try to infer

180
00:09:01,320 --> 00:09:03,720
what is look like

181
00:09:03,720 --> 00:09:07,500
under the red part is the example about

182
00:09:07,500 --> 00:09:09,839
the YouTube and the Google we have found

183
00:09:09,839 --> 00:09:11,940
that their rendering python is totally

184
00:09:11,940 --> 00:09:14,180
different

185
00:09:14,220 --> 00:09:17,700
in our evaluation part we also tests on

186
00:09:17,700 --> 00:09:20,100
the different browsers it has on the

187
00:09:20,100 --> 00:09:22,740
Chrome to Fairfax Chrome to toe browser

188
00:09:22,740 --> 00:09:24,420
from to Safari

189
00:09:24,420 --> 00:09:28,500
and we compare to the previous channel

190
00:09:28,500 --> 00:09:34,700
and we can find we has the high F1 score

191
00:09:36,360 --> 00:09:39,420
so further relate to work I will release

192
00:09:39,420 --> 00:09:42,480
the previous channel and our channel is

193
00:09:42,480 --> 00:09:46,440
on the bottom uh it's a way as we use

194
00:09:46,440 --> 00:09:49,380
the cross original page and for the

195
00:09:49,380 --> 00:09:52,080
previous channel none of them can finish

196
00:09:52,080 --> 00:09:55,080
four attacks and our search channel can

197
00:09:55,080 --> 00:09:58,160
finish often

198
00:09:58,320 --> 00:10:00,800
for the conclusion part

199
00:10:00,800 --> 00:10:03,540
we discover a rendering contention

200
00:10:03,540 --> 00:10:07,140
Channel and we perform a single variable

201
00:10:07,140 --> 00:10:11,040
testing for contentual cost the CPU GPU

202
00:10:11,040 --> 00:10:14,160
and the screen buffer also we design and

203
00:10:14,160 --> 00:10:17,160
Implement an attack frame set rendering

204
00:10:17,160 --> 00:10:20,100
and according to the set rendering we

205
00:10:20,100 --> 00:10:23,100
demonstrated four attacks cross browser

206
00:10:23,100 --> 00:10:25,080
mode model cookie synchronization

207
00:10:25,080 --> 00:10:28,140
history sniffing website fingerprinting

208
00:10:28,140 --> 00:10:31,380
and keystroke login

209
00:10:31,380 --> 00:10:35,339
so this is a demo about the across

210
00:10:35,339 --> 00:10:36,899
across synchronizing across browser

211
00:10:36,899 --> 00:10:38,279
synchronization

212
00:10:38,279 --> 00:10:42,000
uh and this is the our GitHub link and

213
00:10:42,000 --> 00:10:45,500
our demo link thanks

