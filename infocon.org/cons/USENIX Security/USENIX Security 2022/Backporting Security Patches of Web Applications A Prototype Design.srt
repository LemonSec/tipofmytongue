1
00:00:07,760 --> 00:00:10,920
hello everyone I'm joking from futan

2
00:00:10,920 --> 00:00:12,960
University it's my great honor to

3
00:00:12,960 --> 00:00:15,420
present our work here this paper is a

4
00:00:15,420 --> 00:00:17,699
joint work of the researchers from Fudan

5
00:00:17,699 --> 00:00:19,440
University and the Johns Hopkins

6
00:00:19,440 --> 00:00:21,660
University

7
00:00:21,660 --> 00:00:23,760
in the real world there are a large

8
00:00:23,760 --> 00:00:25,980
number of websites are still running old

9
00:00:25,980 --> 00:00:28,380
version applications across Engineers

10
00:00:28,380 --> 00:00:30,660
reports after three months since the

11
00:00:30,660 --> 00:00:32,279
patch for the high risk vulnerability

12
00:00:32,279 --> 00:00:34,800
was released they are still around the

13
00:00:34,800 --> 00:00:37,980
115 000 websites threatened by the

14
00:00:37,980 --> 00:00:40,140
vulnerability

15
00:00:40,140 --> 00:00:43,140
inspired devices we conducted a study

16
00:00:43,140 --> 00:00:45,120
but found that the deploying patches on

17
00:00:45,120 --> 00:00:48,120
old versions was not a travel task to

18
00:00:48,120 --> 00:00:50,280
best of our knowledge there are two

19
00:00:50,280 --> 00:00:52,160
existing vulnerability fixing practice

20
00:00:52,160 --> 00:00:54,960
One is using the patch command to deploy

21
00:00:54,960 --> 00:00:57,420
patches directly and the other ones

22
00:00:57,420 --> 00:01:00,059
using the auto upgrade API provided by

23
00:01:00,059 --> 00:01:02,579
the web application however for the

24
00:01:02,579 --> 00:01:04,739
patch command we found that it was

25
00:01:04,739 --> 00:01:06,960
highly susceptible to report code

26
00:01:06,960 --> 00:01:09,119
conflict errors when applying patch to

27
00:01:09,119 --> 00:01:11,700
old versions in our data sites more than

28
00:01:11,700 --> 00:01:13,439
two-thirds of the old versions through

29
00:01:13,439 --> 00:01:16,500
this arrow and for the auto upgrade API

30
00:01:16,500 --> 00:01:18,360
we found that not all applications

31
00:01:18,360 --> 00:01:20,880
provided which requires developer

32
00:01:20,880 --> 00:01:24,119
efforts moreover upgraded in this way is

33
00:01:24,119 --> 00:01:26,700
pumped to compatibility issues such as

34
00:01:26,700 --> 00:01:28,979
conflicts between my circle or PhD

35
00:01:28,979 --> 00:01:32,820
versions before and after the upgrade

36
00:01:32,820 --> 00:01:35,100
let's take a real vulnerability as an

37
00:01:35,100 --> 00:01:37,740
example both versions of open Emma are

38
00:01:37,740 --> 00:01:39,200
vulnerable to the public cve

39
00:01:39,200 --> 00:01:42,119
unfortunately opengmr does not provide

40
00:01:42,119 --> 00:01:44,700
an auto upgrade API and one way try to

41
00:01:44,700 --> 00:01:46,079
apply the patch to an older version

42
00:01:46,079 --> 00:01:47,939
while the patch command the older

43
00:01:47,939 --> 00:01:50,040
version reported a code complete Arrow

44
00:01:50,040 --> 00:01:52,020
because the patch could not identify the

45
00:01:52,020 --> 00:01:54,720
modified location due to good changes in

46
00:01:54,720 --> 00:01:58,619
line 2 and line 3 of the older version

47
00:01:58,619 --> 00:02:00,720
in this paper we would like to address

48
00:02:00,720 --> 00:02:03,240
the difficulty of applying patches to

49
00:02:03,240 --> 00:02:05,880
old versions that is one being given a

50
00:02:05,880 --> 00:02:07,979
patch for a vulnerable version we can

51
00:02:07,979 --> 00:02:09,959
backfold the patch to fix the same

52
00:02:09,959 --> 00:02:11,400
vulnerability on another vulnerable

53
00:02:11,400 --> 00:02:14,040
version however automatically backboard

54
00:02:14,040 --> 00:02:16,440
patches to old versions with guaranteed

55
00:02:16,440 --> 00:02:18,660
compatibility and security required

56
00:02:18,660 --> 00:02:21,360
addressing three challenges first can

57
00:02:21,360 --> 00:02:23,160
the patch be compatible with another

58
00:02:23,160 --> 00:02:26,099
vulnerable version second can the patch

59
00:02:26,099 --> 00:02:27,360
fix the vulnerability on another

60
00:02:27,360 --> 00:02:29,940
vulnerable version third can the patch

61
00:02:29,940 --> 00:02:31,860
be automatically applied to another

62
00:02:31,860 --> 00:02:33,959
vulnerable version

63
00:02:33,959 --> 00:02:36,720
the formation the challenges come from

64
00:02:36,720 --> 00:02:39,180
three mismatches among the triples of

65
00:02:39,180 --> 00:02:41,519
vulnerability patch and Target version

66
00:02:41,519 --> 00:02:43,620
First the patch and vulnerability

67
00:02:43,620 --> 00:02:46,860
mismatch may break compatibility since

68
00:02:46,860 --> 00:02:48,360
the patch may contain vulnerability

69
00:02:48,360 --> 00:02:51,120
irrelevant modifications to update the

70
00:02:51,120 --> 00:02:53,280
web application functionalities which

71
00:02:53,280 --> 00:02:55,319
may be incompatible with older versions

72
00:02:55,319 --> 00:02:57,720
second the target version and the

73
00:02:57,720 --> 00:02:59,280
vulnerability mismatch may break

74
00:02:59,280 --> 00:03:01,739
security as the official patch is

75
00:03:01,739 --> 00:03:03,720
usually developed for the pre-patched

76
00:03:03,720 --> 00:03:05,640
version the target version may not

77
00:03:05,640 --> 00:03:07,500
contain exactly the same vulnerability

78
00:03:07,500 --> 00:03:10,920
as the patch aims to fix third the patch

79
00:03:10,920 --> 00:03:12,720
and the target version mismatch May

80
00:03:12,720 --> 00:03:15,000
hinder automatic patch deployment the

81
00:03:15,000 --> 00:03:17,340
code changes in the Target version may

82
00:03:17,340 --> 00:03:19,140
make it difficult for patches to

83
00:03:19,140 --> 00:03:22,220
identify modified locations

84
00:03:22,220 --> 00:03:25,440
to address the three challenges we have

85
00:03:25,440 --> 00:03:27,599
studied the patches for injection based

86
00:03:27,599 --> 00:03:29,879
vulnerability and observed that these

87
00:03:29,879 --> 00:03:31,800
vulnerabilities are usually fixed by

88
00:03:31,800 --> 00:03:34,019
restricting the capability of the sync

89
00:03:34,019 --> 00:03:36,599
function thus we propose thin capability

90
00:03:36,599 --> 00:03:39,720
which consists of all user inputs that

91
00:03:39,720 --> 00:03:42,540
can go to the sync functions then we can

92
00:03:42,540 --> 00:03:44,340
fix the same vulnerability on other

93
00:03:44,340 --> 00:03:46,739
versions by backboarding the safe sync

94
00:03:46,739 --> 00:03:49,920
capability that is first we identify and

95
00:03:49,920 --> 00:03:51,720
transform the safe layback portable

96
00:03:51,720 --> 00:03:54,239
patch to ensure the compatibility of the

97
00:03:54,239 --> 00:03:56,940
patch deployment will require spp only

98
00:03:56,940 --> 00:03:58,980
restricts the capability of the single

99
00:03:58,980 --> 00:04:01,200
function which does not contain any

100
00:04:01,200 --> 00:04:03,480
irrelevant patch modifications

101
00:04:03,480 --> 00:04:05,459
that's kind of twice the mismatch

102
00:04:05,459 --> 00:04:07,920
between patch and vulnerability second

103
00:04:07,920 --> 00:04:10,439
we identify safely back portable version

104
00:04:10,439 --> 00:04:12,659
to ensure the security of the patch

105
00:04:12,659 --> 00:04:15,540
deployment the SPV is the target version

106
00:04:15,540 --> 00:04:17,519
that has the same thing completed as the

107
00:04:17,519 --> 00:04:19,738
prepatch version so that we can address

108
00:04:19,738 --> 00:04:21,779
the mismatch between Target version and

109
00:04:21,779 --> 00:04:24,840
the vulnerability third we deploy spp or

110
00:04:24,840 --> 00:04:27,300
SPV by replacing the vulnerable sync

111
00:04:27,300 --> 00:04:29,400
with the safe sync which only require

112
00:04:29,400 --> 00:04:31,500
minimal source code level modifications

113
00:04:31,500 --> 00:04:33,720
to fix the vulnerability and kind of

114
00:04:33,720 --> 00:04:35,639
twice the mismatch between the patch and

115
00:04:35,639 --> 00:04:38,360
the target version

116
00:04:39,180 --> 00:04:42,240
this page shows an end-to-end case for

117
00:04:42,240 --> 00:04:44,639
batch recording first our system

118
00:04:44,639 --> 00:04:46,620
analysis the official patch and

119
00:04:46,620 --> 00:04:49,080
identifies either as a back portal then

120
00:04:49,080 --> 00:04:51,300
our system will extract the safe

121
00:04:51,300 --> 00:04:53,400
syncability based on the back portable

122
00:04:53,400 --> 00:04:56,160
patch and the transform it into SBP

123
00:04:56,160 --> 00:04:59,280
finally our system identifies the SPV

124
00:04:59,280 --> 00:05:01,259
that has the same sync capability with

125
00:05:01,259 --> 00:05:02,699
the pre-patched version and

126
00:05:02,699 --> 00:05:04,860
automatically apply the spp to fix the

127
00:05:04,860 --> 00:05:06,660
vulnerability

128
00:05:06,660 --> 00:05:09,360
now we give a formulaic representation

129
00:05:09,360 --> 00:05:12,240
of the syncability first we call a

130
00:05:12,240 --> 00:05:14,460
control flow pass leading to the single

131
00:05:14,460 --> 00:05:17,460
function as a sync flow then the input

132
00:05:17,460 --> 00:05:20,100
that ratio think long age pass can be

133
00:05:20,100 --> 00:05:22,740
reprinted as forward flow 2 and so on

134
00:05:22,740 --> 00:05:25,560
for each sync flow it consists of two

135
00:05:25,560 --> 00:05:27,720
parts reaching conditions and data

136
00:05:27,720 --> 00:05:29,639
externalization the reaching condition

137
00:05:29,639 --> 00:05:31,620
is the size of the control flow

138
00:05:31,620 --> 00:05:33,900
conditions in the flow and the data

139
00:05:33,900 --> 00:05:35,580
express station is the symbolic

140
00:05:35,580 --> 00:05:37,740
expression of the critical sync

141
00:05:37,740 --> 00:05:40,320
parameters in the flow finally the scene

142
00:05:40,320 --> 00:05:42,660
capability can be represented as the

143
00:05:42,660 --> 00:05:44,940
site of reaching conditions and the data

144
00:05:44,940 --> 00:05:48,539
Express stations are interesting flow

145
00:05:48,539 --> 00:05:51,180
this page shows a concrete example for

146
00:05:51,180 --> 00:05:53,580
syncability representation the sync

147
00:05:53,580 --> 00:05:56,220
function can be located on line 11 due

148
00:05:56,220 --> 00:05:58,500
to the conditional statements the inputs

149
00:05:58,500 --> 00:06:01,139
reach the sync with three flows for each

150
00:06:01,139 --> 00:06:03,360
flow our system forwards tracking the

151
00:06:03,360 --> 00:06:06,180
past from the Android online 2 and the

152
00:06:06,180 --> 00:06:07,919
collects the reaching conditions and the

153
00:06:07,919 --> 00:06:10,680
data X transitions the sync ability can

154
00:06:10,680 --> 00:06:12,840
be reprinted as the set of reaching

155
00:06:12,840 --> 00:06:15,240
conditions and the data expectations on

156
00:06:15,240 --> 00:06:17,460
three sink flows

157
00:06:17,460 --> 00:06:19,320
with the sync ability on different

158
00:06:19,320 --> 00:06:21,539
versions We can give the formulaic

159
00:06:21,539 --> 00:06:24,960
properties for spp and SPV for the spp

160
00:06:24,960 --> 00:06:26,880
we require both reaching conditions and

161
00:06:26,880 --> 00:06:28,919
data explorations of the sync function

162
00:06:28,919 --> 00:06:31,800
in post-patch version is a subset of the

163
00:06:31,800 --> 00:06:34,620
prepared version moreover we require the

164
00:06:34,620 --> 00:06:36,300
safe sync application input patch

165
00:06:36,300 --> 00:06:38,759
version is deterministically computable

166
00:06:38,759 --> 00:06:41,880
thus when backboarding the SVP we can

167
00:06:41,880 --> 00:06:43,560
ensure it will not affect the

168
00:06:43,560 --> 00:06:46,199
compatibility of the target version and

169
00:06:46,199 --> 00:06:48,479
for the sbv we require both region

170
00:06:48,479 --> 00:06:50,520
conditions and the data expressions of

171
00:06:50,520 --> 00:06:52,919
the sync function in prepatch version is

172
00:06:52,919 --> 00:06:55,680
exactly same as the target version based

173
00:06:55,680 --> 00:06:57,840
on this we can ensure the target version

174
00:06:57,840 --> 00:06:59,699
has the same vulnerability with the

175
00:06:59,699 --> 00:07:02,400
pre-patched version

176
00:07:02,400 --> 00:07:04,800
now we talk about the design of our

177
00:07:04,800 --> 00:07:07,319
system which implemented based on cash

178
00:07:07,319 --> 00:07:10,380
drawing and called skyport skyport back

179
00:07:10,380 --> 00:07:12,180
ports the official patch on the old

180
00:07:12,180 --> 00:07:14,699
version with three steps first Skyward

181
00:07:14,699 --> 00:07:16,680
analyze the official patch to identify

182
00:07:16,680 --> 00:07:19,259
whether it is back portable and if so

183
00:07:19,259 --> 00:07:21,840
scaffold will transform it into spp

184
00:07:21,840 --> 00:07:24,599
second skyport verifies the target

185
00:07:24,599 --> 00:07:27,419
version to identify whether it is an SPV

186
00:07:27,419 --> 00:07:29,639
finally skyboard will automatically

187
00:07:29,639 --> 00:07:33,660
deploy the spp on sbv

188
00:07:33,660 --> 00:07:36,300
this page shows the workflow of skyport

189
00:07:36,300 --> 00:07:38,699
to finish the three steps of patch

190
00:07:38,699 --> 00:07:41,220
backboarding skyport leverages four key

191
00:07:41,220 --> 00:07:43,740
modules the patch affection analysis

192
00:07:43,740 --> 00:07:46,020
module is used to analyze the patch

193
00:07:46,020 --> 00:07:47,940
modifications and locate the sync

194
00:07:47,940 --> 00:07:50,340
functions the sync complete extraction

195
00:07:50,340 --> 00:07:52,199
module is used to extract the

196
00:07:52,199 --> 00:07:54,479
syncability based on the given sync

197
00:07:54,479 --> 00:07:56,580
function the back portable analysis

198
00:07:56,580 --> 00:07:59,340
module is used to analyzer and compare

199
00:07:59,340 --> 00:08:01,860
two given syncability and verify whether

200
00:08:01,860 --> 00:08:04,680
they meet the proposed properties of spp

201
00:08:04,680 --> 00:08:07,800
and SPV the patch deployment module is

202
00:08:07,800 --> 00:08:10,800
used to automatically Deploy spp on sbv

203
00:08:10,800 --> 00:08:14,580
with the source code level modifications

204
00:08:14,580 --> 00:08:17,580
in evaluation part we first show our

205
00:08:17,580 --> 00:08:20,280
data site for evaluate 18 skyport we

206
00:08:20,280 --> 00:08:22,620
select the 155 real world

207
00:08:22,620 --> 00:08:25,080
vulnerabilities from 10 popular PhD web

208
00:08:25,080 --> 00:08:27,440
applications covering

209
00:08:27,440 --> 00:08:31,159
155 official patches and the ones on the

210
00:08:31,159 --> 00:08:34,740
526 cve version pass our selection

211
00:08:34,740 --> 00:08:36,899
criteria is the PHD web applications

212
00:08:36,899 --> 00:08:39,360
with more than one thousand stars in the

213
00:08:39,360 --> 00:08:42,360
GitHub and their patches is md2 fixed

214
00:08:42,360 --> 00:08:44,580
injection based vulnerability moreover

215
00:08:44,580 --> 00:08:46,800
the patches should fix the vulnerability

216
00:08:46,800 --> 00:08:49,080
by restricting the capability of sync

217
00:08:49,080 --> 00:08:51,540
functions not directly deleting the sync

218
00:08:51,540 --> 00:08:54,860
function located file or other ways

219
00:08:54,860 --> 00:08:57,779
then when conduct a data set statistics

220
00:08:57,779 --> 00:09:00,420
to illustrate that the patchback protein

221
00:09:00,420 --> 00:09:04,080
is a non-travel task in our 155 security

222
00:09:04,080 --> 00:09:07,380
patches we found that 98 patches contain

223
00:09:07,380 --> 00:09:09,959
Mobility irrelevant modifications such

224
00:09:09,959 --> 00:09:11,940
as functionality modifications of

225
00:09:11,940 --> 00:09:14,580
variable 9 modifications which may lead

226
00:09:14,580 --> 00:09:16,740
to backward compatibility or patch

227
00:09:16,740 --> 00:09:20,420
deployment issues and in our 1

228
00:09:20,420 --> 00:09:25,260
526 cve version pairs we found the 563

229
00:09:25,260 --> 00:09:27,000
versions do not have the same

230
00:09:27,000 --> 00:09:29,399
probability as the prepatch version for

231
00:09:29,399 --> 00:09:31,380
these versions We cannot ensure the

232
00:09:31,380 --> 00:09:33,300
security after the Patch back porting

233
00:09:33,300 --> 00:09:35,540
moreover there are also

234
00:09:35,540 --> 00:09:38,580
1071 versions have code location changes

235
00:09:38,580 --> 00:09:40,800
around the patch which may lead to the

236
00:09:40,800 --> 00:09:42,899
code confidence when directly applying

237
00:09:42,899 --> 00:09:46,940
the opener Repairs by patch command

238
00:09:47,040 --> 00:09:49,860
this page shows the results overview of

239
00:09:49,860 --> 00:09:52,620
scaffolding evaluation first we evaluate

240
00:09:52,620 --> 00:09:55,140
the effectiveness of skyport the results

241
00:09:55,140 --> 00:09:57,480
show that scaffold can successfully

242
00:09:57,480 --> 00:10:02,339
backpack the 98 spps to 750 spvs with

243
00:10:02,339 --> 00:10:06,120
100 success rate second we evaluate the

244
00:10:06,120 --> 00:10:08,640
efficiency of skyport the results show

245
00:10:08,640 --> 00:10:10,860
that the scaffold takes around 6 000

246
00:10:10,860 --> 00:10:13,620
seconds on average for an end-to-end

247
00:10:13,620 --> 00:10:16,140
patch backboarding case third We compare

248
00:10:16,140 --> 00:10:18,120
scaffolds with another two existing

249
00:10:18,120 --> 00:10:20,399
Mobility fixed in practice and the

250
00:10:20,399 --> 00:10:22,260
result demonstrates that the scaffold

251
00:10:22,260 --> 00:10:24,540
performs significantly better than other

252
00:10:24,540 --> 00:10:27,319
technicals

253
00:10:27,420 --> 00:10:29,820
then we conduct experiments to

254
00:10:29,820 --> 00:10:31,800
demonstrate the guarantine compatibility

255
00:10:31,800 --> 00:10:34,140
and security of scaffold patched web

256
00:10:34,140 --> 00:10:36,660
applications since evaluating scaffold

257
00:10:36,660 --> 00:10:38,459
patched applications involves

258
00:10:38,459 --> 00:10:40,800
significant human efforts such as

259
00:10:40,800 --> 00:10:42,240
manually building the application

260
00:10:42,240 --> 00:10:44,760
runtime environment or connecting public

261
00:10:44,760 --> 00:10:47,220
exploits we evaluate a subsides of

262
00:10:47,220 --> 00:10:49,620
scapout patch applications covering 11

263
00:10:49,620 --> 00:10:53,160
and 27 Civic inversion helps from four

264
00:10:53,160 --> 00:10:55,440
applications the results show that

265
00:10:55,440 --> 00:10:57,480
scheduled patch applications have 100

266
00:10:57,480 --> 00:11:00,120
test pass ratio for security and

267
00:11:00,120 --> 00:11:02,880
compatibility testing moreover comparing

268
00:11:02,880 --> 00:11:04,920
with official patch deployment SBP

269
00:11:04,920 --> 00:11:06,420
deployment only introduced the natural

270
00:11:06,420 --> 00:11:08,579
level overhand after deploying On Target

271
00:11:08,579 --> 00:11:10,459
versions

272
00:11:10,459 --> 00:11:13,320
and last we make a conclusion of our

273
00:11:13,320 --> 00:11:15,720
paper in this paper we propose a mass

274
00:11:15,720 --> 00:11:18,180
Dodger for automatic patch back porting

275
00:11:18,180 --> 00:11:19,920
with guaranteeing the compatibility and

276
00:11:19,920 --> 00:11:21,899
security moreover we Define the

277
00:11:21,899 --> 00:11:23,519
formulation for safely back portable

278
00:11:23,519 --> 00:11:25,079
patches and safely back portable

279
00:11:25,079 --> 00:11:27,060
versions which enable safe patchback

280
00:11:27,060 --> 00:11:29,339
porting to demonstrate our methodology

281
00:11:29,339 --> 00:11:32,279
we Implement property2 namely skyport

282
00:11:32,279 --> 00:11:34,440
for automatic layback porting injection

283
00:11:34,440 --> 00:11:36,420
based security patches to older

284
00:11:36,420 --> 00:11:38,339
vulnerable versions and the evaluation

285
00:11:38,339 --> 00:11:40,440
without illustrates the effectiveness

286
00:11:40,440 --> 00:11:42,600
and the efficiency of the proposed

287
00:11:42,600 --> 00:11:44,760
approach

288
00:11:44,760 --> 00:11:46,920
for more detailed information we are

289
00:11:46,920 --> 00:11:50,719
coming to read our paper thank you

