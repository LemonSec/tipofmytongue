1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:08,480 --> 00:00:12,480
I'm a grad student at UMD I'm today I'm

3
00:00:12,480 --> 00:00:14,519
presenting hyper proofs the first Vector

4
00:00:14,519 --> 00:00:16,560
commitment that is both efficiently

5
00:00:16,560 --> 00:00:19,680
aggregatable and maintainable this is a

6
00:00:19,680 --> 00:00:22,380
joint work with Alexander trepenoy babus

7
00:00:22,380 --> 00:00:25,560
Papa mantu Eileen Thomas q and new Peng

8
00:00:25,560 --> 00:00:27,060
John

9
00:00:27,060 --> 00:00:29,820
yeah so uh Vector commitment and chart

10
00:00:29,820 --> 00:00:31,099
for PC

11
00:00:31,099 --> 00:00:33,420
allows the Brewer to commit to an

12
00:00:33,420 --> 00:00:36,660
ordered sequence of values and um

13
00:00:36,660 --> 00:00:39,480
given the vector the provert can't open

14
00:00:39,480 --> 00:00:41,399
any position in the vector with a short

15
00:00:41,399 --> 00:00:44,399
proof and any verifier can check given

16
00:00:44,399 --> 00:00:46,559
the commitment and the proof to see if

17
00:00:46,559 --> 00:00:49,500
if the proof checks out a keep security

18
00:00:49,500 --> 00:00:51,120
property which we want from a vector

19
00:00:51,120 --> 00:00:52,559
commitment is it has to be position

20
00:00:52,559 --> 00:00:55,140
binding meaning uh let's say that prover

21
00:00:55,140 --> 00:00:57,600
has committed to message M at position I

22
00:00:57,600 --> 00:00:59,219
then the Brewer should not be able to

23
00:00:59,219 --> 00:01:01,140
come up with some other message M Prime

24
00:01:01,140 --> 00:01:03,300
that is also accepted by the verifier

25
00:01:03,300 --> 00:01:05,400
under the same commitment a

26
00:01:05,400 --> 00:01:07,260
quintessential example of a vector

27
00:01:07,260 --> 00:01:09,540
commitment is a Merkel tree

28
00:01:09,540 --> 00:01:12,060
um there are vector commitments are

29
00:01:12,060 --> 00:01:14,159
useful in verifiable storage stateless

30
00:01:14,159 --> 00:01:16,140
block print and many applications

31
00:01:16,140 --> 00:01:18,060
continue to emerge

32
00:01:18,060 --> 00:01:19,560
so um

33
00:01:19,560 --> 00:01:21,540
prior work can be categorized into two

34
00:01:21,540 --> 00:01:23,520
categories in the first category we have

35
00:01:23,520 --> 00:01:25,320
Vector commitment schemes that have

36
00:01:25,320 --> 00:01:27,659
constant size proof they have they are

37
00:01:27,659 --> 00:01:29,759
easy to aggregate they are unfortunately

38
00:01:29,759 --> 00:01:32,580
hard to maintain so uh when I mean by uh

39
00:01:32,580 --> 00:01:34,979
maintain it it takes you cannot update

40
00:01:34,979 --> 00:01:37,500
all proofs in sublinear time

41
00:01:37,500 --> 00:01:38,280
um

42
00:01:38,280 --> 00:01:40,259
and the other class of vector

43
00:01:40,259 --> 00:01:42,720
commitments we have a login size groups

44
00:01:42,720 --> 00:01:44,579
they are not efficiently aggregatable

45
00:01:44,579 --> 00:01:47,040
however they are easy to maintain you

46
00:01:47,040 --> 00:01:48,540
can quickly update all crews in login

47
00:01:48,540 --> 00:01:51,060
prime a good example of this is a Merkel

48
00:01:51,060 --> 00:01:54,360
tree one more so um an obvious solution

49
00:01:54,360 --> 00:01:56,280
that comes up is can we use snarks to

50
00:01:56,280 --> 00:01:58,320
aggregate our Markle proofs but

51
00:01:58,320 --> 00:01:59,759
unfortunately this is computationally

52
00:01:59,759 --> 00:02:02,460
intensive and may not be efficient in

53
00:02:02,460 --> 00:02:04,619
practice for instance it takes millions

54
00:02:04,619 --> 00:02:06,479
and millions of constraints to aggregate

55
00:02:06,479 --> 00:02:09,479
medical groups using snacks and it also

56
00:02:09,479 --> 00:02:12,060
has large memory overhead so uh that

57
00:02:12,060 --> 00:02:14,040
brings us to the question which we ask

58
00:02:14,040 --> 00:02:15,720
can we build a vector commitment scheme

59
00:02:15,720 --> 00:02:18,180
that is efficiently aggregatable and

60
00:02:18,180 --> 00:02:20,760
maintainable

61
00:02:20,760 --> 00:02:22,200
um so why do we care about these two

62
00:02:22,200 --> 00:02:24,780
properties so first efficiently

63
00:02:24,780 --> 00:02:26,580
aggregatable and maintainable Vector

64
00:02:26,580 --> 00:02:28,440
commitment is an open problem and the

65
00:02:28,440 --> 00:02:30,239
only known solution which we have are

66
00:02:30,239 --> 00:02:33,660
fairly inefficient and moreover uh

67
00:02:33,660 --> 00:02:35,700
aggregatable and maintainable VCS have

68
00:02:35,700 --> 00:02:37,680
applications in stateless blockchains so

69
00:02:37,680 --> 00:02:40,620
that uh it's useful in that setting

70
00:02:40,620 --> 00:02:42,840
so um our contributions are we present

71
00:02:42,840 --> 00:02:44,819
the first aggregatable and efficiently

72
00:02:44,819 --> 00:02:46,920
maintainable Vector commitment our

73
00:02:46,920 --> 00:02:48,480
aggregation will stand next to 41x

74
00:02:48,480 --> 00:02:50,220
faster than a Merkel tree based

75
00:02:50,220 --> 00:02:53,340
Alternatives and uh and in fact it takes

76
00:02:53,340 --> 00:02:54,900
two minutes to aggregate in our scheme

77
00:02:54,900 --> 00:02:56,160
whereas it could take anywhere between

78
00:02:56,160 --> 00:03:00,239
20 minutes to 41 or 14 1.4 hours in

79
00:03:00,239 --> 00:03:02,160
Mercury based approaches depending on

80
00:03:02,160 --> 00:03:04,319
the choice of the hash function and we

81
00:03:04,319 --> 00:03:06,180
can update all proofs or 2.6

82
00:03:06,180 --> 00:03:08,760
milliseconds and our proofs are really

83
00:03:08,760 --> 00:03:11,519
small it just takes 1.44 KB bytes

84
00:03:11,519 --> 00:03:13,860
unfortunately this comes with a a

85
00:03:13,860 --> 00:03:15,959
slightly larger aggregated roof size

86
00:03:15,959 --> 00:03:19,200
which is 52 kilobytes and we need linear

87
00:03:19,200 --> 00:03:21,300
sized trusted public parameters to do

88
00:03:21,300 --> 00:03:22,080
this

89
00:03:22,080 --> 00:03:24,300
so uh jumping into the details of our

90
00:03:24,300 --> 00:03:25,040
construction

91
00:03:25,040 --> 00:03:27,780
so what we do is like we represent the

92
00:03:27,780 --> 00:03:30,720
vector uh say a0 to A7 as a multi-linear

93
00:03:30,720 --> 00:03:32,519
extension polynomial so at the

94
00:03:32,519 --> 00:03:34,440
multivated polynomial so what we do is

95
00:03:34,440 --> 00:03:36,900
so we take a0 from the vector multiply

96
00:03:36,900 --> 00:03:39,659
it by 1 minus X3 times 1 minus X2 times

97
00:03:39,659 --> 00:03:42,420
1 minus X1 we call this as the selected

98
00:03:42,420 --> 00:03:45,840
polynomial so uh if you plug in uh say x

99
00:03:45,840 --> 00:03:47,340
x equal to zero of the binary

100
00:03:47,340 --> 00:03:48,720
representation of zero when you

101
00:03:48,720 --> 00:03:50,819
substitute zero in in the in these

102
00:03:50,819 --> 00:03:54,599
variables you can get a 0 out of this so

103
00:03:54,599 --> 00:03:57,000
you can again do this for A1 you take A1

104
00:03:57,000 --> 00:03:59,519
and multiply it with 1 minus X3 times 1

105
00:03:59,519 --> 00:04:02,340
minus x 2 times X1 so if you plug in the

106
00:04:02,340 --> 00:04:05,580
binary values of um one you can see that

107
00:04:05,580 --> 00:04:07,739
you can get A1 while you can still get a

108
00:04:07,739 --> 00:04:10,140
0 when you plug in 0. so we can continue

109
00:04:10,140 --> 00:04:12,599
to do this for all other values in the

110
00:04:12,599 --> 00:04:15,120
vector and and build a polynomial

111
00:04:15,120 --> 00:04:16,858
multivated polynomial which is a

112
00:04:16,858 --> 00:04:19,500
multilinear extension of the vector a

113
00:04:19,500 --> 00:04:23,460
so in to generalize all you have to do

114
00:04:23,460 --> 00:04:25,860
is if you want to get an index a i out

115
00:04:25,860 --> 00:04:27,960
of it out of our polynomial all you have

116
00:04:27,960 --> 00:04:29,220
to do is put the plug in the binary

117
00:04:29,220 --> 00:04:30,720
decomposition of those values and you

118
00:04:30,720 --> 00:04:33,419
can get a or a i out of this

119
00:04:33,419 --> 00:04:36,600
so um given a multilinear polynomial uh

120
00:04:36,600 --> 00:04:38,880
a multi-linear extension F uh we can

121
00:04:38,880 --> 00:04:41,040
commit to this polynomial using PST

122
00:04:41,040 --> 00:04:42,720
commitments it was proposed by Papa

123
00:04:42,720 --> 00:04:45,960
montreu and tamasia so uh all you have

124
00:04:45,960 --> 00:04:47,820
to do to get a PhD commitment of s is

125
00:04:47,820 --> 00:04:51,060
you need to raise a g Rays to uh F of S3

126
00:04:51,060 --> 00:04:54,960
S2 S1 where S3 S2 S1 are trapdos but you

127
00:04:54,960 --> 00:04:56,880
do have public parameters that has G

128
00:04:56,880 --> 00:04:59,580
raised to S1 G raised to S2 and and so

129
00:04:59,580 --> 00:05:01,380
on so you can efficiently compute this

130
00:05:01,380 --> 00:05:02,460
commitment

131
00:05:02,460 --> 00:05:05,759
a key property of PST commitments are

132
00:05:05,759 --> 00:05:08,639
they are homomorphic in nature uh PhD of

133
00:05:08,639 --> 00:05:11,280
f times PST of f Prime you can get it's

134
00:05:11,280 --> 00:05:13,320
the PHD of f plus F Prime so we do use

135
00:05:13,320 --> 00:05:16,020
the homomorphism property extensively to

136
00:05:16,020 --> 00:05:19,860
um oh do I uh to update roofs and update

137
00:05:19,860 --> 00:05:23,220
or update the Digest so uh in hyper

138
00:05:23,220 --> 00:05:25,620
proofs a commitment to a vector a is

139
00:05:25,620 --> 00:05:27,720
simply the PST commitment to the the

140
00:05:27,720 --> 00:05:29,100
polynomial f

141
00:05:29,100 --> 00:05:31,199
so um

142
00:05:31,199 --> 00:05:33,300
we also present a data structure called

143
00:05:33,300 --> 00:05:36,120
as multilinear Tree in this work uh this

144
00:05:36,120 --> 00:05:38,280
uh before I jump into how it works I'm

145
00:05:38,280 --> 00:05:40,979
going to begin with a toy exam a toy

146
00:05:40,979 --> 00:05:43,320
version of a of the multi-linear tree

147
00:05:43,320 --> 00:05:45,060
and which will help us understand how

148
00:05:45,060 --> 00:05:47,639
the multi military in fact works so um

149
00:05:47,639 --> 00:05:49,440
as you recall f is the multilinear

150
00:05:49,440 --> 00:05:52,259
extension of the vector a what we do is

151
00:05:52,259 --> 00:05:54,240
for you can first divide it into

152
00:05:54,240 --> 00:05:57,180
decompose it into two halves F0 and F1

153
00:05:57,180 --> 00:05:59,520
where F 0 is the multilinear extension

154
00:05:59,520 --> 00:06:01,620
of the left half and F1 is the

155
00:06:01,620 --> 00:06:03,660
multilinear extension of the right half

156
00:06:03,660 --> 00:06:06,360
now you can further divide F 0 into the

157
00:06:06,360 --> 00:06:08,039
multinational it's it's right half and

158
00:06:08,039 --> 00:06:10,740
the left half so you get F Sub 0 0 which

159
00:06:10,740 --> 00:06:13,680
is the left half of the uh F 0 and F Sub

160
00:06:13,680 --> 00:06:16,500
0 1 is the right half of the F0 you can

161
00:06:16,500 --> 00:06:18,120
do this all the way until the bottom of

162
00:06:18,120 --> 00:06:19,979
the tree where when you just have the

163
00:06:19,979 --> 00:06:22,680
constant a uh a0 and A1 remaining

164
00:06:22,680 --> 00:06:24,539
similarly you can do this for other

165
00:06:24,539 --> 00:06:26,880
nodes in the artery and you can you can

166
00:06:26,880 --> 00:06:31,020
build this uh Toy tree first so uh

167
00:06:31,020 --> 00:06:32,819
getting into the details of how we

168
00:06:32,819 --> 00:06:35,220
construct multilinear tree so what we do

169
00:06:35,220 --> 00:06:39,479
is we take F1 and which is the right um

170
00:06:39,479 --> 00:06:42,300
same sibling and subtracted by its left

171
00:06:42,300 --> 00:06:45,360
sibling so F1 minus F 0 we put it in a

172
00:06:45,360 --> 00:06:48,180
node in our multilinear tree uh then in

173
00:06:48,180 --> 00:06:51,479
the next uh level we take F Sub 0 1 and

174
00:06:51,479 --> 00:06:54,000
subtract it by F Sub 0 0 and put it in

175
00:06:54,000 --> 00:06:55,979
the next level of the multi-minatory I

176
00:06:55,979 --> 00:06:57,840
can do this for the other sibling where

177
00:06:57,840 --> 00:07:00,120
I uh I just take the right sibling and

178
00:07:00,120 --> 00:07:01,919
subtract it by the left sibling and I

179
00:07:01,919 --> 00:07:04,440
keep doing this for all the values in in

180
00:07:04,440 --> 00:07:07,800
the story which I have and uh lastly we

181
00:07:07,800 --> 00:07:10,020
add the vector values in the base layer

182
00:07:10,020 --> 00:07:12,720
for technical reasons yeah so uh the

183
00:07:12,720 --> 00:07:14,400
tree which we have constructed from this

184
00:07:14,400 --> 00:07:16,680
uh Toy Tree by subtracting the right

185
00:07:16,680 --> 00:07:18,120
sibling by left sibling that's the

186
00:07:18,120 --> 00:07:20,099
multi-linearity this is how we construct

187
00:07:20,099 --> 00:07:24,120
uh uh this multilinear tree so in the

188
00:07:24,120 --> 00:07:25,319
next slide I'm going to get rid of this

189
00:07:25,319 --> 00:07:27,780
dietary and just show you guys uh and

190
00:07:27,780 --> 00:07:29,759
show you guys the multilinary and it's

191
00:07:29,759 --> 00:07:33,599
all glory so so uh we have this

192
00:07:33,599 --> 00:07:35,520
multi-linearity and each node is is

193
00:07:35,520 --> 00:07:37,560
going to be an MLA polynomial which is

194
00:07:37,560 --> 00:07:39,180
the difference of its corresponding

195
00:07:39,180 --> 00:07:41,099
siblings

196
00:07:41,099 --> 00:07:43,319
um rather than just storing polynomials

197
00:07:43,319 --> 00:07:45,360
in each nodes we commit to it using PST

198
00:07:45,360 --> 00:07:48,840
commitments so uh and um it's PhD

199
00:07:48,840 --> 00:07:50,759
commencements are constant size and it

200
00:07:50,759 --> 00:07:52,440
just takes n log and time to compute

201
00:07:52,440 --> 00:07:54,360
this tree however doing this enably

202
00:07:54,360 --> 00:07:56,940
would take a n Square time

203
00:07:56,940 --> 00:07:59,520
so um jumping into how uh proof and

204
00:07:59,520 --> 00:08:02,039
Hyper proofs work it's simply the path

205
00:08:02,039 --> 00:08:04,080
from the leaf to all the way until the

206
00:08:04,080 --> 00:08:06,360
route so a psdr so if you want to prove

207
00:08:06,360 --> 00:08:08,039
A5 you just have to Traverse the parts

208
00:08:08,039 --> 00:08:09,599
from The Leaf all the way until the

209
00:08:09,599 --> 00:08:11,940
route to uh those those values make up

210
00:08:11,940 --> 00:08:15,240
the proof our proof is log in size and

211
00:08:15,240 --> 00:08:17,940
uh verification also takes login time as

212
00:08:17,940 --> 00:08:20,220
you might have guessed checking this uh

213
00:08:20,220 --> 00:08:22,080
proof involves a certain padding

214
00:08:22,080 --> 00:08:23,819
equation and that corresponds the

215
00:08:23,819 --> 00:08:25,379
underlying multilinear extension

216
00:08:25,379 --> 00:08:27,960
polynomial f

217
00:08:27,960 --> 00:08:29,039
ifth yeah jumping into the

218
00:08:29,039 --> 00:08:31,459
maintainability of our Vector commitment

219
00:08:31,459 --> 00:08:35,159
we rely on two Key Properties one is the

220
00:08:35,159 --> 00:08:37,979
homomorphism of the PHD commitments and

221
00:08:37,979 --> 00:08:40,080
the homomorphism of the multilinear tree

222
00:08:40,080 --> 00:08:43,820
and say a value a Phi changes in the uh

223
00:08:43,820 --> 00:08:47,279
in the leaf we correspondingly update

224
00:08:47,279 --> 00:08:49,140
the production Factor like in this case

225
00:08:49,140 --> 00:08:51,480
PST of Delta if we multiply with the

226
00:08:51,480 --> 00:08:53,580
value in that level the level above that

227
00:08:53,580 --> 00:08:56,640
we multiplied with PSD of Delta times s

228
00:08:56,640 --> 00:08:59,399
x one and the layer above that is PhD of

229
00:08:59,399 --> 00:09:02,279
X1 1 minus x 2 times 1 minus X1 so

230
00:09:02,279 --> 00:09:04,320
recall that one minus x 2 times 1 minus

231
00:09:04,320 --> 00:09:06,600
1 minus x 2 times x 1 is actually the

232
00:09:06,600 --> 00:09:08,339
selector polynomial the selector

233
00:09:08,339 --> 00:09:10,440
polynomial would depend on the index

234
00:09:10,440 --> 00:09:12,480
which you are updating so if you are

235
00:09:12,480 --> 00:09:14,820
updating A7 and then the values with

236
00:09:14,820 --> 00:09:16,380
which we multiply the multiple unitary

237
00:09:16,380 --> 00:09:19,740
would change correspondingly yeah um I I

238
00:09:19,740 --> 00:09:21,660
all we have to do is to travel surpass

239
00:09:21,660 --> 00:09:24,240
from Leaf to the root so it just takes

240
00:09:24,240 --> 00:09:26,760
login time to update all proofs and

241
00:09:26,760 --> 00:09:30,060
Hyper proofs yeah and to aggregate

242
00:09:30,060 --> 00:09:33,060
proofs uh essentially we need a checking

243
00:09:33,060 --> 00:09:35,160
a proof involves checking the sparing

244
00:09:35,160 --> 00:09:37,320
equation so we plug in the proof values

245
00:09:37,320 --> 00:09:41,580
W3 w2w1 and we also plug in the uh the

246
00:09:41,580 --> 00:09:44,100
digest to the power to the vector and

247
00:09:44,100 --> 00:09:47,700
the value of A5 and we also have G

248
00:09:47,700 --> 00:09:50,820
raised to S3 minus 1 and G raised to S2

249
00:09:50,820 --> 00:09:52,980
and so on these are the uh PST

250
00:09:52,980 --> 00:09:55,140
commitments to the selected values which

251
00:09:55,140 --> 00:09:57,720
we have so if this padding equation

252
00:09:57,720 --> 00:09:59,760
checks out we do know that this proof is

253
00:09:59,760 --> 00:10:03,540
in fact uh valid so um

254
00:10:03,540 --> 00:10:04,980
checking a proof and well it's

255
00:10:04,980 --> 00:10:06,540
synonymous to seeing that it's another

256
00:10:06,540 --> 00:10:08,459
product between uh the proof and the

257
00:10:08,459 --> 00:10:10,380
selectors is one way to see how the

258
00:10:10,380 --> 00:10:13,019
parenting equations work so uh in a more

259
00:10:13,019 --> 00:10:15,540
General sense we have a tree after

260
00:10:15,540 --> 00:10:17,700
height hell and we want to check if this

261
00:10:17,700 --> 00:10:19,740
pairing equation holds good when we have

262
00:10:19,740 --> 00:10:22,680
K such proofs we are uh we have to check

263
00:10:22,680 --> 00:10:24,180
all of these equations hold

264
00:10:24,180 --> 00:10:26,519
simultaneously so uh we need to prove

265
00:10:26,519 --> 00:10:29,760
knowledge of Wis ijs using enough we we

266
00:10:29,760 --> 00:10:31,680
use inner product arguments by uh buns

267
00:10:31,680 --> 00:10:34,800
at all to uh to uh aggregate roofs in

268
00:10:34,800 --> 00:10:37,200
our system so um all we have to do is

269
00:10:37,200 --> 00:10:39,480
take the individual proofs to get the

270
00:10:39,480 --> 00:10:41,339
random linear combinations of it and run

271
00:10:41,339 --> 00:10:43,740
it through uh in inner product arguments

272
00:10:43,740 --> 00:10:47,040
to get the aggregated proof so

273
00:10:47,040 --> 00:10:49,380
aggregated proof take is log of K times

274
00:10:49,380 --> 00:10:51,899
L where K is the number of proofs and L

275
00:10:51,899 --> 00:10:54,300
is the height of the tree and uh and

276
00:10:54,300 --> 00:10:58,680
aggregation time is uh o of KL

277
00:10:58,680 --> 00:10:59,459
um

278
00:10:59,459 --> 00:11:02,100
quick uh run through of our benchmarks

279
00:11:02,100 --> 00:11:02,940
so

280
00:11:02,940 --> 00:11:05,700
um our aggregation time is 10x faster

281
00:11:05,700 --> 00:11:07,440
than the Mercury alternate based

282
00:11:07,440 --> 00:11:09,480
alternative so here we use perforin hash

283
00:11:09,480 --> 00:11:11,760
function uh it's a smart friendly hash

284
00:11:11,760 --> 00:11:15,240
function but uh it lacks enough Crypt

285
00:11:15,240 --> 00:11:18,720
analysis to use it right away and in the

286
00:11:18,720 --> 00:11:20,700
paper we also present uh numbers with

287
00:11:20,700 --> 00:11:24,180
Peterson hash values as well so yeah our

288
00:11:24,180 --> 00:11:25,860
aggregation is 10x faster on the other

289
00:11:25,860 --> 00:11:28,200
hand our verification proof sizes are

290
00:11:28,200 --> 00:11:30,660
performs bad when compared to the

291
00:11:30,660 --> 00:11:32,279
Mercury alternatives

292
00:11:32,279 --> 00:11:34,860
however when we do macro benchmarks the

293
00:11:34,860 --> 00:11:36,540
end-to-end performance still gets

294
00:11:36,540 --> 00:11:38,700
carried over our block proposal is still

295
00:11:38,700 --> 00:11:40,800
10x faster but on the other hand

296
00:11:40,800 --> 00:11:42,720
validation time and proof maintenance is

297
00:11:42,720 --> 00:11:45,420
slow uh it's fine but still the

298
00:11:45,420 --> 00:11:47,399
end-to-end performance we still uh come

299
00:11:47,399 --> 00:11:49,140
out better than the Mercury based

300
00:11:49,140 --> 00:11:52,980
alternative and conclusion uh RVC scheme

301
00:11:52,980 --> 00:11:54,420
is the first efficiently aggregatable

302
00:11:54,420 --> 00:11:56,700
maintainable and we also present a

303
00:11:56,700 --> 00:11:58,860
property called unstable ability which I

304
00:11:58,860 --> 00:12:00,899
couldn't get touched up touch today but

305
00:12:00,899 --> 00:12:03,839
it incentivizes proof computation and

306
00:12:03,839 --> 00:12:05,220
yeah we have Superior performance and

307
00:12:05,220 --> 00:12:08,040
marketing approaches and one way to see

308
00:12:08,040 --> 00:12:09,660
it is an algebraic alternative for

309
00:12:09,660 --> 00:12:12,120
Merkel tree so with that I'll stop and

310
00:12:12,120 --> 00:12:14,779
take questions

