1
00:00:07,760 --> 00:00:10,980
okay so actually I joined Penn State two

2
00:00:10,980 --> 00:00:13,440
years ago time flies

3
00:00:13,440 --> 00:00:16,079
uh welcome I'm Hong KU from Penn State

4
00:00:16,079 --> 00:00:17,640
and today I'm going to share the work

5
00:00:17,640 --> 00:00:20,160
automatically diagnosing use of a free

6
00:00:20,160 --> 00:00:22,500
box the reference Miss County detection

7
00:00:22,500 --> 00:00:24,359
on batteries

8
00:00:24,359 --> 00:00:26,460
so these things we have seen so many use

9
00:00:26,460 --> 00:00:28,560
of the free bugs as they're so popular

10
00:00:28,560 --> 00:00:30,900
actually from this report of Microsoft

11
00:00:30,900 --> 00:00:33,360
we can see they are always popular in

12
00:00:33,360 --> 00:00:36,180
the last decades and even worse these

13
00:00:36,180 --> 00:00:38,280
bugs are highly exploitable which means

14
00:00:38,280 --> 00:00:40,500
attackers may use this bug to hike our

15
00:00:40,500 --> 00:00:43,079
system no matter using Mac windows or

16
00:00:43,079 --> 00:00:45,420
Linux and from the same report you can

17
00:00:45,420 --> 00:00:47,940
say use of a free bugs is the most

18
00:00:47,940 --> 00:00:50,520
likely exploited of the release of a

19
00:00:50,520 --> 00:00:51,420
patch

20
00:00:51,420 --> 00:00:53,340
so because of this problem you may

21
00:00:53,340 --> 00:00:55,559
wonder why we have used our free box

22
00:00:55,559 --> 00:00:57,660
what's the root of course So based on

23
00:00:57,660 --> 00:00:59,579
the informal definition use of the three

24
00:00:59,579 --> 00:01:01,920
means I use a tangling pointer after the

25
00:01:01,920 --> 00:01:04,199
referred object has been frayed so

26
00:01:04,199 --> 00:01:06,060
intuitively you believe the problem is

27
00:01:06,060 --> 00:01:07,799
the phrase right the object is being

28
00:01:07,799 --> 00:01:10,380
free but still use it how do you

29
00:01:10,380 --> 00:01:12,479
so the dangler use has been widely

30
00:01:12,479 --> 00:01:15,540
adopted to detect user-free box in a lot

31
00:01:15,540 --> 00:01:18,119
of previous work but actually we wonder

32
00:01:18,119 --> 00:01:20,040
is that a possible the free is wrong

33
00:01:20,040 --> 00:01:22,320
which means maybe the object is free too

34
00:01:22,320 --> 00:01:24,780
early that's why the all the use after

35
00:01:24,780 --> 00:01:27,299
that is illegal so we call this a pretty

36
00:01:27,299 --> 00:01:29,520
material free and we realize this no

37
00:01:29,520 --> 00:01:31,200
previous work trying to understand the

38
00:01:31,200 --> 00:01:33,720
root cause this way so we propose a tool

39
00:01:33,720 --> 00:01:35,520
called Freewheel they're trying to

40
00:01:35,520 --> 00:01:38,579
diagnose the premature free because the

41
00:01:38,579 --> 00:01:41,520
use of free box so we realize the

42
00:01:41,520 --> 00:01:43,439
reference miscounting could be the

43
00:01:43,439 --> 00:01:45,720
common reason leading to premature free

44
00:01:45,720 --> 00:01:48,600
and we design a tool to detect reference

45
00:01:48,600 --> 00:01:50,520
miscontin and we can suggest the

46
00:01:50,520 --> 00:01:51,960
possible patches

47
00:01:51,960 --> 00:01:54,659
we applied out to a large number of bugs

48
00:01:54,659 --> 00:01:56,640
from browsers operating systems and

49
00:01:56,640 --> 00:01:58,799
language interpreters and we can finish

50
00:01:58,799 --> 00:02:00,840
analysis within reasonable time and

51
00:02:00,840 --> 00:02:04,500
provide useful diagnosis and patches

52
00:02:04,500 --> 00:02:06,540
so let's start with some background of

53
00:02:06,540 --> 00:02:08,639
reference miscounting so this is a

54
00:02:08,639 --> 00:02:10,440
mechanism actually designed to happen

55
00:02:10,440 --> 00:02:13,560
programmers to manage memory so the idea

56
00:02:13,560 --> 00:02:16,319
is to associate a counter with each hip

57
00:02:16,319 --> 00:02:18,720
object when programmers create a new

58
00:02:18,720 --> 00:02:20,459
reference of the object this will

59
00:02:20,459 --> 00:02:22,739
increase the counter and we destroy a

60
00:02:22,739 --> 00:02:24,840
reference is to decrease the counter and

61
00:02:24,840 --> 00:02:26,879
with the counter is reduced to zero it

62
00:02:26,879 --> 00:02:28,500
should free the memory which means the

63
00:02:28,500 --> 00:02:31,020
program is not using this object anymore

64
00:02:31,020 --> 00:02:33,360
so this method is widely used in many

65
00:02:33,360 --> 00:02:35,660
complicated systems for example Linux

66
00:02:35,660 --> 00:02:38,700
here is the Linux structures and this is

67
00:02:38,700 --> 00:02:40,860
a common structure using Linux that have

68
00:02:40,860 --> 00:02:42,720
the member called kref used for

69
00:02:42,720 --> 00:02:44,459
reference counting and they have this

70
00:02:44,459 --> 00:02:46,980
key ref get to increase the counter and

71
00:02:46,980 --> 00:02:49,920
they have the Kraft put to decrease the

72
00:02:49,920 --> 00:02:51,840
counter and if the count is zero they're

73
00:02:51,840 --> 00:02:53,340
going to free the memory

74
00:02:53,340 --> 00:02:55,560
so you can see these Magnums required

75
00:02:55,560 --> 00:02:57,959
programmers to decrease the counter or

76
00:02:57,959 --> 00:03:00,120
increase the counter manually and you

77
00:03:00,120 --> 00:03:01,920
can imagine programmers they may make

78
00:03:01,920 --> 00:03:04,800
mistakes a lead to bugs so we call this

79
00:03:04,800 --> 00:03:06,959
problem the reference miscounty there

80
00:03:06,959 --> 00:03:08,879
are two types of miscounty the first

81
00:03:08,879 --> 00:03:11,400
case programmers may forget to decrease

82
00:03:11,400 --> 00:03:13,080
the counter when they destroy a

83
00:03:13,080 --> 00:03:15,420
reference so in this case the memory can

84
00:03:15,420 --> 00:03:17,459
never be released this is going to have

85
00:03:17,459 --> 00:03:20,420
the memory leak issue on the other side

86
00:03:20,420 --> 00:03:22,620
programmers may forget to increase the

87
00:03:22,620 --> 00:03:24,300
counter when they create a new reference

88
00:03:24,300 --> 00:03:26,340
and in this case the value of the

89
00:03:26,340 --> 00:03:28,080
counter cannot reflect the real number

90
00:03:28,080 --> 00:03:30,659
of uses in memory of this object and

91
00:03:30,659 --> 00:03:33,659
this will lead to premature free and

92
00:03:33,659 --> 00:03:35,580
finally use our free box

93
00:03:35,580 --> 00:03:37,980
so here's an example this is a real use

94
00:03:37,980 --> 00:03:40,500
of free bug in Linux last year and the

95
00:03:40,500 --> 00:03:42,780
problem is programmers forget to

96
00:03:42,780 --> 00:03:44,280
increase the counter when they create a

97
00:03:44,280 --> 00:03:46,200
new reference and a solution on the

98
00:03:46,200 --> 00:03:48,060
right side is just to Simply increase

99
00:03:48,060 --> 00:03:50,400
the counter and the bug is gone

100
00:03:50,400 --> 00:03:51,480
so you may think it is quite

101
00:03:51,480 --> 00:03:53,159
straightforward you just need to scan

102
00:03:53,159 --> 00:03:55,440
the execution and find any missed

103
00:03:55,440 --> 00:03:57,780
reference County I did you find the root

104
00:03:57,780 --> 00:03:59,879
cause unfortunately it's not that easy

105
00:03:59,879 --> 00:04:02,280
because not all makes the reference

106
00:04:02,280 --> 00:04:04,739
counting are bad the problem is

107
00:04:04,739 --> 00:04:06,959
reference counting is is good for

108
00:04:06,959 --> 00:04:08,940
programmers but it's not free it can

109
00:04:08,940 --> 00:04:10,799
lead to Performance overhead it could be

110
00:04:10,799 --> 00:04:14,099
30 percent slowdown of the execution so

111
00:04:14,099 --> 00:04:16,380
programmers they're eager to skip or

112
00:04:16,380 --> 00:04:19,260
make some unnecessary reference counting

113
00:04:19,260 --> 00:04:21,540
you can find online the conflict

114
00:04:21,540 --> 00:04:23,460
guidelines to tell programmers hey you

115
00:04:23,460 --> 00:04:25,139
can avoid the reference counting this

116
00:04:25,139 --> 00:04:27,479
way but unfortunately this will lead to

117
00:04:27,479 --> 00:04:30,300
problems and mistakes so our question is

118
00:04:30,300 --> 00:04:32,580
how to identify which means the

119
00:04:32,580 --> 00:04:34,800
reference counting is the buggy one is

120
00:04:34,800 --> 00:04:37,740
the one leads to premature free so all

121
00:04:37,740 --> 00:04:39,660
solution to this challenge is to propose

122
00:04:39,660 --> 00:04:41,880
a model to describe what is the legal

123
00:04:41,880 --> 00:04:44,280
omission of reference counting and we

124
00:04:44,280 --> 00:04:46,500
list them here the first one is the

125
00:04:46,500 --> 00:04:48,360
overlapping rule for them here we have

126
00:04:48,360 --> 00:04:51,540
two references R1 and r to you so

127
00:04:51,540 --> 00:04:53,160
ideally we should have the reference

128
00:04:53,160 --> 00:04:56,639
counting for both R1 and r2's creation

129
00:04:56,639 --> 00:04:59,280
and destruction but in fact if we know

130
00:04:59,280 --> 00:05:01,020
they are overlapping we can skip some

131
00:05:01,020 --> 00:05:03,540
references for example the decrease for

132
00:05:03,540 --> 00:05:06,479
R1 destruction or the increase of r2's

133
00:05:06,479 --> 00:05:08,280
creation so this in this case the

134
00:05:08,280 --> 00:05:10,139
counter still balanced there's no risk

135
00:05:10,139 --> 00:05:11,160
because you know they're always

136
00:05:11,160 --> 00:05:13,680
overlapped this is one rule and

137
00:05:13,680 --> 00:05:15,360
similarly it could be have multiple

138
00:05:15,360 --> 00:05:17,100
reference overlapped this way and

139
00:05:17,100 --> 00:05:19,620
actually you can skip all the reference

140
00:05:19,620 --> 00:05:21,240
count in the middle and only keep the

141
00:05:21,240 --> 00:05:23,100
ones on both sides

142
00:05:23,100 --> 00:05:25,500
another rule is a continuing rule where

143
00:05:25,500 --> 00:05:27,960
this one reference selected R2 here is

144
00:05:27,960 --> 00:05:29,460
contained in the lifetime of another

145
00:05:29,460 --> 00:05:31,440
reference so in this case you can

146
00:05:31,440 --> 00:05:32,880
completely skip the reference counting

147
00:05:32,880 --> 00:05:35,639
for R2 you are still safe and there

148
00:05:35,639 --> 00:05:37,560
could be more complete cases but we can

149
00:05:37,560 --> 00:05:40,440
still clearly Define what is possible

150
00:05:40,440 --> 00:05:42,840
what is not allowed So based on these

151
00:05:42,840 --> 00:05:45,180
rules we propose the algorithm

152
00:05:45,180 --> 00:05:47,639
to scan the execution trees of the

153
00:05:47,639 --> 00:05:50,280
program and trying to explain why some

154
00:05:50,280 --> 00:05:52,560
reference counting is skipped if we

155
00:05:52,560 --> 00:05:54,419
cannot explain we believe this could be

156
00:05:54,419 --> 00:05:57,060
the root cause of premature free so the

157
00:05:57,060 --> 00:05:58,919
detail of this algorithm is in the paper

158
00:05:58,919 --> 00:06:00,780
you are encouraged to check the details

159
00:06:00,780 --> 00:06:02,039
if you're interested

160
00:06:02,039 --> 00:06:04,680
so here is an example this is just a

161
00:06:04,680 --> 00:06:07,440
lifetime of one user-free object and

162
00:06:07,440 --> 00:06:10,199
there are five reference from r0 to R4

163
00:06:10,199 --> 00:06:13,139
and for r0 and R1 we can use the

164
00:06:13,139 --> 00:06:15,419
overlapping rule to explain why some

165
00:06:15,419 --> 00:06:17,160
reference counting behavior is skipped

166
00:06:17,160 --> 00:06:19,259
it's okay because it follows our rules

167
00:06:19,259 --> 00:06:21,720
and for R2 it is contained in the

168
00:06:21,720 --> 00:06:24,600
lifetime of R1 and r0 so it's okay to

169
00:06:24,600 --> 00:06:27,360
skip the reference County behaviors but

170
00:06:27,360 --> 00:06:30,300
for R3 and R4 we cannot find any rules

171
00:06:30,300 --> 00:06:32,280
to explain why programmers skip the

172
00:06:32,280 --> 00:06:34,319
reference counting so this could be the

173
00:06:34,319 --> 00:06:37,080
root cause of premature free or use of a

174
00:06:37,080 --> 00:06:39,360
free box so this is our algorithm to

175
00:06:39,360 --> 00:06:41,039
detect the root cause that lead to

176
00:06:41,039 --> 00:06:44,160
premature free and we plan to apply this

177
00:06:44,160 --> 00:06:46,020
rule to program boundaries as you can

178
00:06:46,020 --> 00:06:48,360
imagine it's not that easy it has some

179
00:06:48,360 --> 00:06:50,160
challenges for them how do you find the

180
00:06:50,160 --> 00:06:51,960
reference counters how do you find the

181
00:06:51,960 --> 00:06:54,180
reference counting behaviors and how do

182
00:06:54,180 --> 00:06:56,580
you correlate this reference counting to

183
00:06:56,580 --> 00:06:58,800
reference creation and destruction

184
00:06:58,800 --> 00:07:00,240
so if you have source code it's

185
00:07:00,240 --> 00:07:01,680
relatively easy you can use The

186
00:07:01,680 --> 00:07:03,840
annotation or debug information to help

187
00:07:03,840 --> 00:07:06,419
but with the battery we have to rely on

188
00:07:06,419 --> 00:07:08,639
the heuristics so the first heuristic we

189
00:07:08,639 --> 00:07:11,819
use is to to analyze the data flow of

190
00:07:11,819 --> 00:07:13,979
the program execution and for them here

191
00:07:13,979 --> 00:07:16,500
we have the all the values of structure

192
00:07:16,500 --> 00:07:18,360
members and if we can see some pattern

193
00:07:18,360 --> 00:07:20,819
like this the value is changed in a

194
00:07:20,819 --> 00:07:24,360
fixed step like this 0 to 1 to 2 to 1 to

195
00:07:24,360 --> 00:07:26,400
2 to 1 to 0. they'll always be increase

196
00:07:26,400 --> 00:07:28,680
or decrease by one which suspect this

197
00:07:28,680 --> 00:07:30,840
could be a reference counter of course

198
00:07:30,840 --> 00:07:32,880
this is not enough for them here in the

199
00:07:32,880 --> 00:07:35,039
IE browser we find that this counter

200
00:07:35,039 --> 00:07:37,259
implemented this way that the last three

201
00:07:37,259 --> 00:07:39,960
base is for Flags it's not it's not for

202
00:07:39,960 --> 00:07:42,060
counters so most of the time you see the

203
00:07:42,060 --> 00:07:44,340
value is changed by eight but sometimes

204
00:07:44,340 --> 00:07:46,080
it could be changed by two due to flag

205
00:07:46,080 --> 00:07:47,099
operation

206
00:07:47,099 --> 00:07:49,080
so to solve this problem we propose the

207
00:07:49,080 --> 00:07:50,819
second heuristic called the control

208
00:07:50,819 --> 00:07:52,919
dependent free which means that we're

209
00:07:52,919 --> 00:07:54,780
going to check whether the program are

210
00:07:54,780 --> 00:07:56,340
going to compute the value with some

211
00:07:56,340 --> 00:07:58,500
other constant and if they match they're

212
00:07:58,500 --> 00:08:00,539
going to free the memory if they match

213
00:08:00,539 --> 00:08:03,060
both heuristic we believe this could be

214
00:08:03,060 --> 00:08:05,099
a reference counter

215
00:08:05,099 --> 00:08:07,199
and next we want to correlate the

216
00:08:07,199 --> 00:08:08,819
reference County Behavior to the

217
00:08:08,819 --> 00:08:10,919
reference creation and destruction then

218
00:08:10,919 --> 00:08:12,599
we can analyze them using our algorithm

219
00:08:12,599 --> 00:08:14,639
so the basic idea is to use the distance

220
00:08:14,639 --> 00:08:17,400
we want to find the closest reference

221
00:08:17,400 --> 00:08:18,780
counting and reference creation

222
00:08:18,780 --> 00:08:20,340
destruction and trying to connect with

223
00:08:20,340 --> 00:08:22,500
them and sometimes the reference

224
00:08:22,500 --> 00:08:24,300
counting could be done inside a wrapper

225
00:08:24,300 --> 00:08:26,039
function so in this case we're going to

226
00:08:26,039 --> 00:08:27,479
calculate the distance between functions

227
00:08:27,479 --> 00:08:29,639
instead of instructions so this is the

228
00:08:29,639 --> 00:08:31,620
basic idea more details you can find in

229
00:08:31,620 --> 00:08:32,940
your paper

230
00:08:32,940 --> 00:08:35,520
So based on our algorithm we propose we

231
00:08:35,520 --> 00:08:37,440
design these two Freewheel we are going

232
00:08:37,440 --> 00:08:39,599
to run the program with the POC and get

233
00:08:39,599 --> 00:08:41,339
access to entries then trying to

234
00:08:41,339 --> 00:08:43,440
identify the use of the free object

235
00:08:43,440 --> 00:08:45,240
we're trying to identify the reference

236
00:08:45,240 --> 00:08:47,100
and we want to correlate the reference

237
00:08:47,100 --> 00:08:48,899
with the reference counting behaviors

238
00:08:48,899 --> 00:08:51,420
and finally use the algorithm to detect

239
00:08:51,420 --> 00:08:53,519
the enemy's connect behavior that leads

240
00:08:53,519 --> 00:08:56,100
to premature free and finally use a free

241
00:08:56,100 --> 00:08:57,240
box

242
00:08:57,240 --> 00:08:59,519
and we do evaluation to understand how

243
00:08:59,519 --> 00:09:00,899
good is our tool regarding three

244
00:09:00,899 --> 00:09:03,060
questions how accurate is our root cause

245
00:09:03,060 --> 00:09:05,100
analysis and the whole effect how

246
00:09:05,100 --> 00:09:07,380
effective is our patch suggestion and

247
00:09:07,380 --> 00:09:09,540
finally our accurate is our reference

248
00:09:09,540 --> 00:09:11,880
recovery and the reference correlation

249
00:09:11,880 --> 00:09:15,779
we applied all two to 76 bugs from the

250
00:09:15,779 --> 00:09:17,880
browser's operating systems and language

251
00:09:17,880 --> 00:09:20,820
interpreters and here's a result so

252
00:09:20,820 --> 00:09:24,600
among 76 bucks we have 80 48 bucks

253
00:09:24,600 --> 00:09:26,880
caused by reference miscounty and this

254
00:09:26,880 --> 00:09:29,100
table shows more details but overall

255
00:09:29,100 --> 00:09:32,160
there are 36 bugs that is due to the

256
00:09:32,160 --> 00:09:33,899
programs forget to increase the counter

257
00:09:33,899 --> 00:09:36,000
and forget to decrease the counter which

258
00:09:36,000 --> 00:09:37,380
means there's no Rough Country at all

259
00:09:37,380 --> 00:09:40,019
for this it's a new reference and for

260
00:09:40,019 --> 00:09:42,240
another 12 bucks programmers do not

261
00:09:42,240 --> 00:09:44,339
increase the counter but if decrease the

262
00:09:44,339 --> 00:09:46,080
counter for Destruction let's introduce

263
00:09:46,080 --> 00:09:47,399
the imbalance

264
00:09:47,399 --> 00:09:50,160
and for for another 18 bucks they do not

265
00:09:50,160 --> 00:09:51,660
use whatever accounting so just a normal

266
00:09:51,660 --> 00:09:54,240
managed by the programs themselves and

267
00:09:54,240 --> 00:09:55,980
there's no reference current issue at

268
00:09:55,980 --> 00:09:57,120
all

269
00:09:57,120 --> 00:09:58,740
and also we understand trying to

270
00:09:58,740 --> 00:10:00,899
understand the accuracy of a bug page

271
00:10:00,899 --> 00:10:03,180
suggestion so we check how to generate

272
00:10:03,180 --> 00:10:05,220
the 71 patches and we manually check

273
00:10:05,220 --> 00:10:07,500
them and compare with official patch it

274
00:10:07,500 --> 00:10:09,839
turns out that 56 of them is actually

275
00:10:09,839 --> 00:10:11,519
matched with the official patches

276
00:10:11,519 --> 00:10:13,560
released by the vendor and here's one

277
00:10:13,560 --> 00:10:16,140
example so here this push instruction

278
00:10:16,140 --> 00:10:18,300
actually puts a pointer on the stack

279
00:10:18,300 --> 00:10:20,580
which effectively create a new copy of

280
00:10:20,580 --> 00:10:22,260
the reference however there's no

281
00:10:22,260 --> 00:10:24,060
reference counting no increasement or

282
00:10:24,060 --> 00:10:26,100
decreasment so we suggest that we should

283
00:10:26,100 --> 00:10:29,279
add the increasement and decreasement to

284
00:10:29,279 --> 00:10:31,500
this argument to avoid bugs

285
00:10:31,500 --> 00:10:34,080
and actually we check the patches from

286
00:10:34,080 --> 00:10:36,120
Microsoft they indeed also use the same

287
00:10:36,120 --> 00:10:38,760
method to fix this bug

288
00:10:38,760 --> 00:10:40,860
and the last is just some statistics of

289
00:10:40,860 --> 00:10:43,200
our detection so basically on average

290
00:10:43,200 --> 00:10:45,779
for each use of a free object we see

291
00:10:45,779 --> 00:10:48,120
they are about two certain references

292
00:10:48,120 --> 00:10:49,680
created and destroyed along the

293
00:10:49,680 --> 00:10:51,899
execution and in one execution trees we

294
00:10:51,899 --> 00:10:55,260
find the 543 objects and only 65 of them

295
00:10:55,260 --> 00:10:57,120
are ref counted others not ref counted

296
00:10:57,120 --> 00:10:59,160
and also measure the accuracy of the

297
00:10:59,160 --> 00:11:00,899
content detection it prints out the

298
00:11:00,899 --> 00:11:03,360
control definitely free is more accurate

299
00:11:03,360 --> 00:11:06,660
than the fixed step changing to identify

300
00:11:06,660 --> 00:11:07,680
counters

301
00:11:07,680 --> 00:11:10,320
so in summary in this work we propose a

302
00:11:10,320 --> 00:11:12,480
tool a free wheel that can diagnose and

303
00:11:12,480 --> 00:11:15,300
use other free box due to premature free

304
00:11:15,300 --> 00:11:17,820
and we identify the references counting

305
00:11:17,820 --> 00:11:19,500
is a common reason lead to this problem

306
00:11:19,500 --> 00:11:21,600
and we design a tool to automatically

307
00:11:21,600 --> 00:11:24,720
detect reference miscounty and we can

308
00:11:24,720 --> 00:11:26,880
suggest the possible patches and we

309
00:11:26,880 --> 00:11:29,640
apply the two on large programs and bugs

310
00:11:29,640 --> 00:11:31,320
and we can finish this in reasonable

311
00:11:31,320 --> 00:11:33,779
time and we could pass suggestions

312
00:11:33,779 --> 00:11:35,880
that's all what I want to say and thank

313
00:11:35,880 --> 00:11:37,079
you for attention and ready for

314
00:11:37,079 --> 00:11:39,319
questions

