1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:08,599 --> 00:00:11,639
this is sujaya and today now we're going

3
00:00:11,639 --> 00:00:13,380
to like shift some gear and look at

4
00:00:13,380 --> 00:00:15,000
cloud-based security

5
00:00:15,000 --> 00:00:17,520
in this talk I'm going to talk about how

6
00:00:17,520 --> 00:00:20,100
we built a fall tolerant oblivious data

7
00:00:20,100 --> 00:00:21,539
store

8
00:00:21,539 --> 00:00:23,160
because we're already at the security

9
00:00:23,160 --> 00:00:25,439
conference I don't need to emphasize the

10
00:00:25,439 --> 00:00:27,539
importance of data privacy

11
00:00:27,539 --> 00:00:29,580
when we think of data privacy the first

12
00:00:29,580 --> 00:00:31,920
obvious solution is to encrypt the data

13
00:00:31,920 --> 00:00:34,380
here I have a toy example of a

14
00:00:34,380 --> 00:00:36,300
pharmaceutical company that produces

15
00:00:36,300 --> 00:00:38,579
four different types of medicine and so

16
00:00:38,579 --> 00:00:41,219
this company encrypts this data and

17
00:00:41,219 --> 00:00:43,559
stores this data on some third-party

18
00:00:43,559 --> 00:00:45,719
cloud provider that may not necessarily

19
00:00:45,719 --> 00:00:47,640
be trustworthy

20
00:00:47,640 --> 00:00:49,440
we are specifically looking at honest

21
00:00:49,440 --> 00:00:51,480
but curious adversaries that are not

22
00:00:51,480 --> 00:00:54,120
going to actively manipulate my data but

23
00:00:54,120 --> 00:00:56,399
will passively observe and learn some

24
00:00:56,399 --> 00:01:00,239
non-trivial information about the system

25
00:01:00,239 --> 00:01:02,460
researchers have shown that just

26
00:01:02,460 --> 00:01:04,260
encryption is not enough to preserve

27
00:01:04,260 --> 00:01:06,119
data privacy and here is a very simple

28
00:01:06,119 --> 00:01:08,400
attack where I have the encrypted

29
00:01:08,400 --> 00:01:10,680
medicine data stored on the cloud and I

30
00:01:10,680 --> 00:01:13,080
have clients buying medicine and hence

31
00:01:13,080 --> 00:01:15,240
interacting with this data

32
00:01:15,240 --> 00:01:17,880
over time the adversary learns the

33
00:01:17,880 --> 00:01:19,979
access patterns learning what percentage

34
00:01:19,979 --> 00:01:22,259
of the time which row is accessed

35
00:01:22,259 --> 00:01:24,060
now another pharmaceutical company

36
00:01:24,060 --> 00:01:25,860
completely independent of this produces

37
00:01:25,860 --> 00:01:28,200
its yearly sales statistics

38
00:01:28,200 --> 00:01:30,900
the adversary having access to both its

39
00:01:30,900 --> 00:01:33,540
model and the public knowledge can map

40
00:01:33,540 --> 00:01:35,640
the two and next time when a client

41
00:01:35,640 --> 00:01:38,040
accesses row number four it guesses with

42
00:01:38,040 --> 00:01:40,020
high probability that client is buying

43
00:01:40,020 --> 00:01:42,240
medicine for breast cancer

44
00:01:42,240 --> 00:01:44,400
such kinds of attacks are called access

45
00:01:44,400 --> 00:01:46,500
pattern attacks and in fact there have

46
00:01:46,500 --> 00:01:48,479
been a large number of works that show

47
00:01:48,479 --> 00:01:52,020
the practicality of such attacks

48
00:01:52,020 --> 00:01:54,540
oblivious ran or auram is a

49
00:01:54,540 --> 00:01:56,399
cryptographic technique that mitigates

50
00:01:56,399 --> 00:01:58,259
access pattern attacks

51
00:01:58,259 --> 00:02:00,840
the core idea in oram-based data stores

52
00:02:00,840 --> 00:02:03,659
is to make the accesses to the external

53
00:02:03,659 --> 00:02:06,479
server look completely random

54
00:02:06,479 --> 00:02:09,840
and a typical Oram data store has this

55
00:02:09,840 --> 00:02:11,760
kind of architecture where there is an

56
00:02:11,760 --> 00:02:13,800
untrusted storage server that stores the

57
00:02:13,800 --> 00:02:16,379
encrypted data there is a trusted proxy

58
00:02:16,379 --> 00:02:18,660
that stores encryption key and other

59
00:02:18,660 --> 00:02:21,780
metadata and the adversary typically

60
00:02:21,780 --> 00:02:23,400
controls all of the communication

61
00:02:23,400 --> 00:02:26,520
channels in the system

62
00:02:26,520 --> 00:02:29,099
to give you an intuition on how Oram

63
00:02:29,099 --> 00:02:31,319
Solutions hide access pattern I'm going

64
00:02:31,319 --> 00:02:33,000
to explain one of the really well known

65
00:02:33,000 --> 00:02:36,840
protocols path Oram at a very high level

66
00:02:36,840 --> 00:02:39,420
path Oram constructs its data on the

67
00:02:39,420 --> 00:02:41,340
external server in a binary tree

68
00:02:41,340 --> 00:02:43,860
structure and when a client wants to

69
00:02:43,860 --> 00:02:45,840
access say this particular orange block

70
00:02:45,840 --> 00:02:49,019
of data path Oram reads the entire path

71
00:02:49,019 --> 00:02:51,239
of the data in the first step and in the

72
00:02:51,239 --> 00:02:53,760
second step it randomly shuffles the

73
00:02:53,760 --> 00:02:55,980
physical location and writes that

74
00:02:55,980 --> 00:02:58,560
shuffled location back to the server

75
00:02:58,560 --> 00:03:01,560
so essentially after each access orange

76
00:03:01,560 --> 00:03:03,180
Block's physical location is being

77
00:03:03,180 --> 00:03:06,000
randomly shuffled and this is how Oram

78
00:03:06,000 --> 00:03:10,280
Solutions hide the access patterns

79
00:03:10,500 --> 00:03:12,599
having given this high level overview

80
00:03:12,599 --> 00:03:14,879
let me now discuss the issue with

81
00:03:14,879 --> 00:03:17,700
existing Oram Solutions in that they are

82
00:03:17,700 --> 00:03:19,200
not fault tolerant

83
00:03:19,200 --> 00:03:22,200
if my external server crashes of course

84
00:03:22,200 --> 00:03:24,060
that's where my data is so I lose access

85
00:03:24,060 --> 00:03:26,700
to all of my data but even if the proxy

86
00:03:26,700 --> 00:03:28,739
crashes because that is where the

87
00:03:28,739 --> 00:03:30,840
encryption key is stored I still cannot

88
00:03:30,840 --> 00:03:32,280
access my data

89
00:03:32,280 --> 00:03:34,560
so essentially if either of these

90
00:03:34,560 --> 00:03:36,959
entities crash the application ends up

91
00:03:36,959 --> 00:03:39,840
losing access to all of its data

92
00:03:39,840 --> 00:03:41,580
I want to take a quick note to mention

93
00:03:41,580 --> 00:03:43,680
Obladi which is a recent work that

94
00:03:43,680 --> 00:03:46,140
provides data durability guarantees but

95
00:03:46,140 --> 00:03:48,420
it doesn't give liveness in that while

96
00:03:48,420 --> 00:03:51,120
the proxy is down the application cannot

97
00:03:51,120 --> 00:03:53,519
access any data

98
00:03:53,519 --> 00:03:56,519
so given the issue with the Solutions in

99
00:03:56,519 --> 00:03:59,640
our work we propose Quran which is the

100
00:03:59,640 --> 00:04:01,920
first fall tolerant and replicated Oram

101
00:04:01,920 --> 00:04:04,319
data store which uses a quorum based

102
00:04:04,319 --> 00:04:07,280
replication protocol

103
00:04:07,379 --> 00:04:09,780
codam system and threat model looks like

104
00:04:09,780 --> 00:04:12,599
this because if the server or the proxy

105
00:04:12,599 --> 00:04:15,180
crashes I lose access to data we bucket

106
00:04:15,180 --> 00:04:17,279
them together in a single unit and

107
00:04:17,279 --> 00:04:19,858
replicate the data across and such units

108
00:04:19,858 --> 00:04:21,600
and the clients have an also all

109
00:04:21,600 --> 00:04:23,460
communication with the proxies in the

110
00:04:23,460 --> 00:04:25,380
system

111
00:04:25,380 --> 00:04:28,020
to tolerate F crash failures Quorum

112
00:04:28,020 --> 00:04:31,020
replicates the data across 2f 1 replicas

113
00:04:31,020 --> 00:04:33,360
and it tolerates honest but curious

114
00:04:33,360 --> 00:04:35,639
adversaries that can control all of

115
00:04:35,639 --> 00:04:37,380
these storage servers as well as the

116
00:04:37,380 --> 00:04:40,699
communication channels in the system

117
00:04:41,280 --> 00:04:43,440
having given the system and threat model

118
00:04:43,440 --> 00:04:46,199
Let Me Now define the three goals that

119
00:04:46,199 --> 00:04:48,960
we want quorum to achieve at that score

120
00:04:48,960 --> 00:04:51,120
it is an oblivious data store so we

121
00:04:51,120 --> 00:04:53,340
wanted to hide access patterns

122
00:04:53,340 --> 00:04:55,320
we want it to be fault tolerant so we

123
00:04:55,320 --> 00:04:58,020
wanted to replicate the data and we

124
00:04:58,020 --> 00:05:01,139
wanted to provide linearizable semantics

125
00:05:01,139 --> 00:05:03,960
what linearizability states is if I take

126
00:05:03,960 --> 00:05:06,180
the single data item that has many read

127
00:05:06,180 --> 00:05:08,880
write operations on it from an external

128
00:05:08,880 --> 00:05:11,460
Observer these operations must appear

129
00:05:11,460 --> 00:05:13,979
linear

130
00:05:13,979 --> 00:05:16,199
so in describing how we achieve these

131
00:05:16,199 --> 00:05:18,720
three goals let me first focus on the

132
00:05:18,720 --> 00:05:22,259
replication protocol and linearizability

133
00:05:22,259 --> 00:05:24,240
so I'm going to first take an efficient

134
00:05:24,240 --> 00:05:27,539
existing solution in designing Quorum is

135
00:05:27,539 --> 00:05:29,699
a solution such as Hermes and crack that

136
00:05:29,699 --> 00:05:33,320
are read optimized in that when whoops

137
00:05:33,320 --> 00:05:36,300
when a client wants to read the data it

138
00:05:36,300 --> 00:05:38,160
reads from a single replica when it

139
00:05:38,160 --> 00:05:40,199
wants to write the data it writes to all

140
00:05:40,199 --> 00:05:42,180
the replicas so we see that this is read

141
00:05:42,180 --> 00:05:44,100
optimized

142
00:05:44,100 --> 00:05:46,320
now we cannot use such a system in

143
00:05:46,320 --> 00:05:48,419
developing oblivious data stores because

144
00:05:48,419 --> 00:05:50,460
just the number of message exchanges

145
00:05:50,460 --> 00:05:51,960
between the client and the server

146
00:05:51,960 --> 00:05:54,360
reveals the type of operation the client

147
00:05:54,360 --> 00:05:57,479
is performing so this is not oblivious

148
00:05:57,479 --> 00:05:59,820
so what we need is a solution that

149
00:05:59,820 --> 00:06:02,340
accesses the same number of replicas for

150
00:06:02,340 --> 00:06:04,919
both read and write operations and so

151
00:06:04,919 --> 00:06:07,560
let this be the second solution where

152
00:06:07,560 --> 00:06:10,440
read operations access a majority and

153
00:06:10,440 --> 00:06:12,419
write operations access a majority of

154
00:06:12,419 --> 00:06:14,400
the replicas

155
00:06:14,400 --> 00:06:16,259
now to see the issue with this solution

156
00:06:16,259 --> 00:06:18,660
let's take an example where all three

157
00:06:18,660 --> 00:06:20,759
units store and item X whose value is

158
00:06:20,759 --> 00:06:22,080
five

159
00:06:22,080 --> 00:06:24,479
I have client one client performing a

160
00:06:24,479 --> 00:06:27,479
read on a majority one and two the first

161
00:06:27,479 --> 00:06:29,699
message goes through fine and it gets

162
00:06:29,699 --> 00:06:31,919
updated the second message is still on

163
00:06:31,919 --> 00:06:32,940
its way

164
00:06:32,940 --> 00:06:35,580
now at this precise Point another client

165
00:06:35,580 --> 00:06:38,340
performs two consecutive reads first

166
00:06:38,340 --> 00:06:40,740
from units one and two it learns the

167
00:06:40,740 --> 00:06:43,319
value of x to be 10. next it reads from

168
00:06:43,319 --> 00:06:45,300
units 2 and 3 and learns the value of x

169
00:06:45,300 --> 00:06:46,319
to P5

170
00:06:46,319 --> 00:06:48,900
so what is the value of x

171
00:06:48,900 --> 00:06:51,419
from this client's perspective the read

172
00:06:51,419 --> 00:06:52,860
and write operations are

173
00:06:52,860 --> 00:06:55,199
non-linearizable

174
00:06:55,199 --> 00:06:57,479
to make the solution linearizable we

175
00:06:57,479 --> 00:07:00,000
either need locking but locking in

176
00:07:00,000 --> 00:07:01,560
distributed systems if there are

177
00:07:01,560 --> 00:07:04,080
Deadlocks we need extra communication

178
00:07:04,080 --> 00:07:06,720
and so that will not be secure

179
00:07:06,720 --> 00:07:09,060
and so what we do is we add another

180
00:07:09,060 --> 00:07:11,580
round of communication to order the

181
00:07:11,580 --> 00:07:13,919
client requests

182
00:07:13,919 --> 00:07:16,080
and so let me now discuss quorum's

183
00:07:16,080 --> 00:07:18,000
replication solution which is inspired

184
00:07:18,000 --> 00:07:20,699
by Lynch and Schwartzman solution we

185
00:07:20,699 --> 00:07:23,160
have every data item in Quorum has a

186
00:07:23,160 --> 00:07:25,800
value V and an Associated tactee which

187
00:07:25,800 --> 00:07:28,139
is a monotonically increasing entity we

188
00:07:28,139 --> 00:07:30,240
can think of this as timestamp based

189
00:07:30,240 --> 00:07:31,380
data stores

190
00:07:31,380 --> 00:07:33,599
and the replication protocol is executed

191
00:07:33,599 --> 00:07:35,280
in two rounds the query and the

192
00:07:35,280 --> 00:07:38,460
propagate phase which looks like this

193
00:07:38,460 --> 00:07:40,740
the client that is interested in reading

194
00:07:40,740 --> 00:07:43,139
or writing the data drives the execution

195
00:07:43,139 --> 00:07:46,080
of the protocol by first sending an Oram

196
00:07:46,080 --> 00:07:48,479
read request to all of the replicas

197
00:07:48,479 --> 00:07:50,280
waits to receive a response from a

198
00:07:50,280 --> 00:07:53,400
majority and for read request it picks

199
00:07:53,400 --> 00:07:55,919
the value corresponding to the highest

200
00:07:55,919 --> 00:07:58,380
tag that is received and for right

201
00:07:58,380 --> 00:08:00,720
request it updates both the tag and the

202
00:08:00,720 --> 00:08:03,660
value and for either requests it sends

203
00:08:03,660 --> 00:08:06,000
an Oram write request and when it

204
00:08:06,000 --> 00:08:07,440
receives an acknowledgment from a

205
00:08:07,440 --> 00:08:11,340
majority its operation is successful

206
00:08:11,340 --> 00:08:13,500
so this is how the replication protocol

207
00:08:13,500 --> 00:08:16,259
achieves both Lock Free behavior and

208
00:08:16,259 --> 00:08:19,639
provides linearizability

209
00:08:20,460 --> 00:08:23,940
now let me go and discuss how do we hide

210
00:08:23,940 --> 00:08:26,580
the access pattern in Quran and for this

211
00:08:26,580 --> 00:08:29,039
we use the underlying Oram scheme which

212
00:08:29,039 --> 00:08:32,099
is Tau Oram this extends path or Ram

213
00:08:32,099 --> 00:08:34,500
that we saw earlier but it includes

214
00:08:34,500 --> 00:08:38,539
concurrent and asynchronous requests

215
00:08:38,580 --> 00:08:41,760
now if we use Tau or Ram as it is in

216
00:08:41,760 --> 00:08:44,640
Coram we end up double fetching the path

217
00:08:44,640 --> 00:08:47,640
for every client request a proxy will

218
00:08:47,640 --> 00:08:50,220
fetch the same block twice

219
00:08:50,220 --> 00:08:53,040
to see why this is the case let's recall

220
00:08:53,040 --> 00:08:55,080
that codons replication happens in two

221
00:08:55,080 --> 00:08:57,600
rounds in the first round when a client

222
00:08:57,600 --> 00:08:59,279
sends an order and read requests to a

223
00:08:59,279 --> 00:09:03,779
proxy an unmodified Oram would read and

224
00:09:03,779 --> 00:09:06,540
write the data for this request and when

225
00:09:06,540 --> 00:09:08,100
a client sends the corresponding order

226
00:09:08,100 --> 00:09:10,680
and write request a proxy again will

227
00:09:10,680 --> 00:09:13,019
read and write the data essentially

228
00:09:13,019 --> 00:09:14,940
including four rounds of communication

229
00:09:14,940 --> 00:09:19,339
two of which are completely unnecessary

230
00:09:19,440 --> 00:09:22,200
to mitigate this inefficiency Quran

231
00:09:22,200 --> 00:09:24,600
meticulously keeps track of the ongoing

232
00:09:24,600 --> 00:09:27,660
client request by introducing a new data

233
00:09:27,660 --> 00:09:29,540
structure called incomplete cache map

234
00:09:29,540 --> 00:09:33,420
where this incomplete cache map stores

235
00:09:33,420 --> 00:09:35,519
the requests that have finished the

236
00:09:35,519 --> 00:09:37,440
query phase but have not yet finished

237
00:09:37,440 --> 00:09:40,019
the propagate phase essentially ongoing

238
00:09:40,019 --> 00:09:41,399
requests

239
00:09:41,399 --> 00:09:43,680
and to see how this helps us mitigate

240
00:09:43,680 --> 00:09:45,600
the double fetching let's go back to our

241
00:09:45,600 --> 00:09:48,600
example where a client sends an Oram

242
00:09:48,600 --> 00:09:49,980
read request

243
00:09:49,980 --> 00:09:52,620
for which the proxy adds this request to

244
00:09:52,620 --> 00:09:54,060
the incomplete cache map and only

245
00:09:54,060 --> 00:09:55,800
performs the read operation

246
00:09:55,800 --> 00:09:57,540
and in the second step when it receives

247
00:09:57,540 --> 00:09:59,760
the Odin rights request it checks for

248
00:09:59,760 --> 00:10:02,820
this entry removes it and then performs

249
00:10:02,820 --> 00:10:05,899
the right operation

250
00:10:08,940 --> 00:10:11,100
so hopefully this gave you an intuition

251
00:10:11,100 --> 00:10:14,459
on how do we achieve replication as well

252
00:10:14,459 --> 00:10:17,100
as hide the access pattern now let me

253
00:10:17,100 --> 00:10:20,100
discuss our performance evaluations we

254
00:10:20,100 --> 00:10:21,899
evaluated Quran with three baselines

255
00:10:21,899 --> 00:10:24,420
first is the insecure but fault tolerant

256
00:10:24,420 --> 00:10:27,600
Baseline second is secure but not for

257
00:10:27,600 --> 00:10:29,160
not fault element so there is no

258
00:10:29,160 --> 00:10:31,500
replication in this and third is secure

259
00:10:31,500 --> 00:10:33,839
info tolerant where we use obladis

260
00:10:33,839 --> 00:10:35,940
approaches relying on the cloud itself

261
00:10:35,940 --> 00:10:38,700
for fault tolerance and for that we use

262
00:10:38,700 --> 00:10:41,519
an open source database cockroachdb

263
00:10:41,519 --> 00:10:43,740
we place three replicas on three

264
00:10:43,740 --> 00:10:46,019
different geographical locations on AWS

265
00:10:46,019 --> 00:10:49,320
and we use ycsb benchmarking

266
00:10:49,320 --> 00:10:51,060
in this talk I'm only going to discuss

267
00:10:51,060 --> 00:10:52,800
throughput results

268
00:10:52,800 --> 00:10:54,660
these are the throughput values for

269
00:10:54,660 --> 00:10:57,000
Coram and in comparison these are the

270
00:10:57,000 --> 00:10:58,740
throughput values for the insecure

271
00:10:58,740 --> 00:11:01,320
Baseline and we see the counterintuitive

272
00:11:01,320 --> 00:11:04,320
results that both these performances are

273
00:11:04,320 --> 00:11:06,300
very similar to each other

274
00:11:06,300 --> 00:11:08,579
and the reason for this is when we have

275
00:11:08,579 --> 00:11:11,220
geo-distributed replicas the cost of

276
00:11:11,220 --> 00:11:13,380
communication is significantly higher

277
00:11:13,380 --> 00:11:15,300
than the latency to achieve

278
00:11:15,300 --> 00:11:18,060
obliviousness and because of this both

279
00:11:18,060 --> 00:11:20,160
insecure and core amp performs very

280
00:11:20,160 --> 00:11:22,380
similar to each other

281
00:11:22,380 --> 00:11:24,899
looking at the node application secure

282
00:11:24,899 --> 00:11:26,940
but non-fault tolerant solution we see

283
00:11:26,940 --> 00:11:29,040
that this is about 2.4 times worse than

284
00:11:29,040 --> 00:11:31,560
Quorum the reason for this is this has a

285
00:11:31,560 --> 00:11:34,320
single proxy which is being overloaded

286
00:11:34,320 --> 00:11:36,839
and when we have geo-distributed clients

287
00:11:36,839 --> 00:11:39,019
they face extremely long latency

288
00:11:39,019 --> 00:11:41,700
communicating with a single proxy which

289
00:11:41,700 --> 00:11:43,980
translates to low throughput

290
00:11:43,980 --> 00:11:46,140
and finally looking at the Cockroach GB

291
00:11:46,140 --> 00:11:49,200
Baseline this is about 33 times worse

292
00:11:49,200 --> 00:11:51,540
and the reason for this is this also has

293
00:11:51,540 --> 00:11:54,000
this single proxy bottleneck and the

294
00:11:54,000 --> 00:11:55,500
second reason is its replication

295
00:11:55,500 --> 00:11:58,680
protocol is leader based so one node is

296
00:11:58,680 --> 00:12:01,320
serializing all the requests so these

297
00:12:01,320 --> 00:12:04,079
two causes the bottleneck which leads to

298
00:12:04,079 --> 00:12:05,579
its low performance

299
00:12:05,579 --> 00:12:07,440
we have many other interesting results

300
00:12:07,440 --> 00:12:09,300
in the paper and I encourage you to take

301
00:12:09,300 --> 00:12:11,220
a look at it

302
00:12:11,220 --> 00:12:13,800
so in concluding this talk I presented

303
00:12:13,800 --> 00:12:16,800
Quran which is the first fall tolerant

304
00:12:16,800 --> 00:12:19,079
oblivious data store which hides the

305
00:12:19,079 --> 00:12:21,240
access pattern replicates the data for

306
00:12:21,240 --> 00:12:23,880
fault tolerance and has significantly

307
00:12:23,880 --> 00:12:26,880
better performance than the baselines

308
00:12:26,880 --> 00:12:28,920
I want to take a quick minute to

309
00:12:28,920 --> 00:12:30,540
dedicate this work to the loving

310
00:12:30,540 --> 00:12:33,060
memories of Caitlyn scarberry she was a

311
00:12:33,060 --> 00:12:35,519
bsms student at UC Santa Barbara and

312
00:12:35,519 --> 00:12:37,380
this project originated as part of her

313
00:12:37,380 --> 00:12:40,200
master's project and her inputs in this

314
00:12:40,200 --> 00:12:42,120
work have been valuable

315
00:12:42,120 --> 00:12:44,760
her loss is immense to all of us and the

316
00:12:44,760 --> 00:12:47,420
research community

317
00:12:49,620 --> 00:12:53,060
I will take any questions now

