1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:10,460 --> 00:00:12,960
from a PhD student from National

3
00:00:12,960 --> 00:00:15,780
University of Singapore today I'm going

4
00:00:15,780 --> 00:00:18,240
to present elastic which is a joint work

5
00:00:18,240 --> 00:00:21,900
with my colleagues from both nus and dth

6
00:00:21,900 --> 00:00:24,000
first let me start by talking about

7
00:00:24,000 --> 00:00:26,640
memory isolation model found Intel sdx

8
00:00:26,640 --> 00:00:29,039
which without spatial isolation

9
00:00:29,039 --> 00:00:31,320
let's imagine that we have a security

10
00:00:31,320 --> 00:00:33,480
sensitive application which runs

11
00:00:33,480 --> 00:00:35,399
alongside a large pile of other stuff

12
00:00:35,399 --> 00:00:37,980
including both other applications as

13
00:00:37,980 --> 00:00:39,899
well as privileged software such as a

14
00:00:39,899 --> 00:00:42,480
firmware and Os kernel however we do not

15
00:00:42,480 --> 00:00:44,579
do not trust such other software because

16
00:00:44,579 --> 00:00:47,040
it can become it can be buggy or it

17
00:00:47,040 --> 00:00:48,840
might be controlled by somebody that we

18
00:00:48,840 --> 00:00:51,780
do not trust therefore we're using tasks

19
00:00:51,780 --> 00:00:53,579
which provides our application with a

20
00:00:53,579 --> 00:00:55,320
special physical memory region called an

21
00:00:55,320 --> 00:00:56,340
enclave

22
00:00:56,340 --> 00:00:59,160
The Enclave is protected by Intel STX

23
00:00:59,160 --> 00:01:01,739
and special way our application is

24
00:01:01,739 --> 00:01:03,899
allowed to access this unclean memory

25
00:01:03,899 --> 00:01:05,939
but no other software on the system is

26
00:01:05,939 --> 00:01:09,299
even including the privilege software

27
00:01:09,299 --> 00:01:10,860
the remaining part of the physical

28
00:01:10,860 --> 00:01:12,659
memory called public memory can

29
00:01:12,659 --> 00:01:14,460
potentially be accessed by anybody on

30
00:01:14,460 --> 00:01:16,759
the system

31
00:01:17,040 --> 00:01:18,780
beyond the interest yes there are many

32
00:01:18,780 --> 00:01:20,400
more uses from trusted execution

33
00:01:20,400 --> 00:01:22,380
environment designs that adopt a similar

34
00:01:22,380 --> 00:01:24,540
spatial isolation model while using

35
00:01:24,540 --> 00:01:27,119
internet CX here as an example

36
00:01:27,119 --> 00:01:29,460
although spatial isolation is simple and

37
00:01:29,460 --> 00:01:31,080
can be quite effective against many

38
00:01:31,080 --> 00:01:33,720
attacks it does have these problems in

39
00:01:33,720 --> 00:01:35,400
particular it has quite Limited in terms

40
00:01:35,400 --> 00:01:37,560
of data sharing expressiveness

41
00:01:37,560 --> 00:01:39,900
let's imagine this scenario where you

42
00:01:39,900 --> 00:01:42,119
have a application let's call it Apache

43
00:01:42,119 --> 00:01:44,340
wanting to share some data with another

44
00:01:44,340 --> 00:01:47,040
application python

45
00:01:47,040 --> 00:01:48,780
they do not trust each other however

46
00:01:48,780 --> 00:01:50,759
because although they might be able to

47
00:01:50,759 --> 00:01:53,040
attest to each other's identity in the

48
00:01:53,040 --> 00:01:54,479
beginning they're not sure whether the

49
00:01:54,479 --> 00:01:55,860
other party can be compromised during

50
00:01:55,860 --> 00:01:57,180
runtime

51
00:01:57,180 --> 00:01:59,340
therefore uh they both have their

52
00:01:59,340 --> 00:02:01,020
separate enclaves

53
00:02:01,020 --> 00:02:03,299
we soon find that it's not possible for

54
00:02:03,299 --> 00:02:05,100
them to pass the data through either

55
00:02:05,100 --> 00:02:07,079
Apache SoundCloud memory or python

56
00:02:07,079 --> 00:02:09,000
suncream memory due to the restrictions

57
00:02:09,000 --> 00:02:12,239
imposed by spatial isolation

58
00:02:12,239 --> 00:02:14,520
therefore the only way for them to

59
00:02:14,520 --> 00:02:16,020
communicate through the uh the public

60
00:02:16,020 --> 00:02:19,440
memory which however is also accessible

61
00:02:19,440 --> 00:02:22,440
to the untracked software this makes it

62
00:02:22,440 --> 00:02:24,959
necessary for them to resolve to secure

63
00:02:24,959 --> 00:02:27,239
Channel communication which would

64
00:02:27,239 --> 00:02:29,280
involve two extra copies as well as a

65
00:02:29,280 --> 00:02:31,260
pair of encryption decryption

66
00:02:31,260 --> 00:02:33,540
although this slide only shows a client

67
00:02:33,540 --> 00:02:36,239
server data sharing pattern as example a

68
00:02:36,239 --> 00:02:37,739
similar overheads was found in many

69
00:02:37,739 --> 00:02:39,660
other data chain patterns such as

70
00:02:39,660 --> 00:02:42,360
producer consumer and proxy

71
00:02:42,360 --> 00:02:44,220
according to both our own benchmarking

72
00:02:44,220 --> 00:02:45,840
results and previous work the overhead

73
00:02:45,840 --> 00:02:48,900
can be quite huge so this chart actually

74
00:02:48,900 --> 00:02:50,879
shows that it can take spatial isolation

75
00:02:50,879 --> 00:02:53,160
to all those magnitude more time to

76
00:02:53,160 --> 00:02:55,500
execute uh some sharing intensive

77
00:02:55,500 --> 00:02:57,840
applications in comparison to Native

78
00:02:57,840 --> 00:03:00,720
latency execution

79
00:03:00,720 --> 00:03:02,879
so as we have already seen spatial

80
00:03:02,879 --> 00:03:04,980
isolation gives a strong security

81
00:03:04,980 --> 00:03:08,879
guarantees but it has a low data Express

82
00:03:08,879 --> 00:03:10,980
in this and the element expressiveness

83
00:03:10,980 --> 00:03:13,260
leads to prohibitive overhead in many

84
00:03:13,260 --> 00:03:14,879
application scenarios

85
00:03:14,879 --> 00:03:16,800
on the opposite end traditional data

86
00:03:16,800 --> 00:03:18,720
sharing mechanisms without protection

87
00:03:18,720 --> 00:03:22,620
against privileged software uh have a

88
00:03:22,620 --> 00:03:24,780
higher sharing expression is but uh

89
00:03:24,780 --> 00:03:26,519
doesn't have strong security guarantees

90
00:03:26,519 --> 00:03:29,340
in this work we propose elasticity which

91
00:03:29,340 --> 00:03:31,800
is a new memorization model for tees

92
00:03:31,800 --> 00:03:35,159
that can achieve a high data sharing

93
00:03:35,159 --> 00:03:37,140
expressiveness without compromising

94
00:03:37,140 --> 00:03:38,879
security guarantees

95
00:03:38,879 --> 00:03:40,980
our evaluation results show that

96
00:03:40,980 --> 00:03:43,200
elasticity was able to achieve 120 volts

97
00:03:43,200 --> 00:03:45,379
magnitude performance improvement over

98
00:03:45,379 --> 00:03:48,299
spiritual isolation based designs

99
00:03:48,299 --> 00:03:50,580
in this world we assume that the OS can

100
00:03:50,580 --> 00:03:52,860
be completely controlled by the attacker

101
00:03:52,860 --> 00:03:55,019
we also assume that applications do not

102
00:03:55,019 --> 00:03:56,400
trust each other you know because they

103
00:03:56,400 --> 00:03:57,659
are not able to know whether the other

104
00:03:57,659 --> 00:04:01,140
part is uh not compromised during time

105
00:04:01,140 --> 00:04:03,239
you know service attacks out of two out

106
00:04:03,239 --> 00:04:04,620
of scope

107
00:04:04,620 --> 00:04:06,599
the main idea behind elasticity is what

108
00:04:06,599 --> 00:04:09,060
we call a temporal isolation so unlike

109
00:04:09,060 --> 00:04:10,920
spatial isolation where each memory

110
00:04:10,920 --> 00:04:13,620
region is either or is private to one

111
00:04:13,620 --> 00:04:15,120
specific application or always public

112
00:04:15,120 --> 00:04:16,798
simple isolation allows different

113
00:04:16,798 --> 00:04:19,139
enclaves to access the same memoration

114
00:04:19,139 --> 00:04:21,298
at different times

115
00:04:21,298 --> 00:04:23,940
uh so you know our Apache piping example

116
00:04:23,940 --> 00:04:26,699
uh we would allow Apache to have initial

117
00:04:26,699 --> 00:04:28,500
access to the shared minimum region in

118
00:04:28,500 --> 00:04:30,840
order to uh prepare the data to be

119
00:04:30,840 --> 00:04:32,820
shared with a python and then we will

120
00:04:32,820 --> 00:04:34,500
allow python to access anyone to read

121
00:04:34,500 --> 00:04:35,820
the data

122
00:04:35,820 --> 00:04:37,500
and there will be no SQ copy soil

123
00:04:37,500 --> 00:04:39,060
encryption decryption

124
00:04:39,060 --> 00:04:40,800
um although this idea might sound simple

125
00:04:40,800 --> 00:04:43,380
and straightforward uh it actually has a

126
00:04:43,380 --> 00:04:44,460
there are actually a lot of challenges

127
00:04:44,460 --> 00:04:46,500
that we need to address uh and let's

128
00:04:46,500 --> 00:04:48,660
take a take a look at them so first

129
00:04:48,660 --> 00:04:50,400
let's imagine a very simple mechanism

130
00:04:50,400 --> 00:04:53,639
where each memory region has exactly one

131
00:04:53,639 --> 00:04:55,800
Enclave as its owner and the owner is

132
00:04:55,800 --> 00:04:58,259
only Enclave that is allowed to access

133
00:04:58,259 --> 00:05:01,139
that main region in order to share the

134
00:05:01,139 --> 00:05:02,940
data the owner can pass ownership to

135
00:05:02,940 --> 00:05:03,900
others

136
00:05:03,900 --> 00:05:07,139
so what would happen uh in our uh in our

137
00:05:07,139 --> 00:05:09,000
example let's say Apache has initial

138
00:05:09,000 --> 00:05:10,919
access to the main region what it can do

139
00:05:10,919 --> 00:05:13,380
is to transfer the ownership of this

140
00:05:13,380 --> 00:05:15,660
main region to python after preparing

141
00:05:15,660 --> 00:05:18,000
the data so python can now uh read the

142
00:05:18,000 --> 00:05:21,120
data however one problem here is that if

143
00:05:21,120 --> 00:05:23,580
python at this point is malicious it may

144
00:05:23,580 --> 00:05:25,740
not only read the data but also right to

145
00:05:25,740 --> 00:05:28,860
it and if the data has something that

146
00:05:28,860 --> 00:05:30,600
Apache you would actually need in the

147
00:05:30,600 --> 00:05:33,360
future this can become a problem

148
00:05:33,360 --> 00:05:35,340
the root cause of this is that sharer

149
00:05:35,340 --> 00:05:37,259
which is the obviously concave that

150
00:05:37,259 --> 00:05:39,120
shares a main region does not have any

151
00:05:39,120 --> 00:05:40,860
control over how the data inside should

152
00:05:40,860 --> 00:05:43,380
be accessed after sharing

153
00:05:43,380 --> 00:05:45,479
let's take a look at how elastic cave

154
00:05:45,479 --> 00:05:47,100
solve this problem

155
00:05:47,100 --> 00:05:49,380
elasticity incorporate something that we

156
00:05:49,380 --> 00:05:50,900
call backing permissions

157
00:05:50,900 --> 00:05:53,639
so instead of transferring ownership

158
00:05:53,639 --> 00:05:55,800
elasticity has a fixed owner for each

159
00:05:55,800 --> 00:05:58,860
member region and the owner can set

160
00:05:58,860 --> 00:06:00,780
maximum permissions for other enclaves

161
00:06:00,780 --> 00:06:02,160
that it wants to share the main region

162
00:06:02,160 --> 00:06:02,880
with

163
00:06:02,880 --> 00:06:04,860
so this Max information is basically

164
00:06:04,860 --> 00:06:07,259
served as a limit to how those uh other

165
00:06:07,259 --> 00:06:11,160
enclaves can access that memory

166
00:06:11,160 --> 00:06:13,919
for example by simply setting the max

167
00:06:13,919 --> 00:06:15,300
information for python to this

168
00:06:15,300 --> 00:06:17,520
generation to read only apart you can

169
00:06:17,520 --> 00:06:19,320
make sure that python is never allowed

170
00:06:19,320 --> 00:06:22,380
to write to them region

171
00:06:22,380 --> 00:06:25,080
however this mechanism now uh it's not a

172
00:06:25,080 --> 00:06:26,520
complete solution because it actually

173
00:06:26,520 --> 00:06:29,699
brings out a new challenge

174
00:06:29,699 --> 00:06:32,220
so let's imagine that Apache is

175
00:06:32,220 --> 00:06:35,039
malicious what it can do is to set the

176
00:06:35,039 --> 00:06:37,080
maximum permissions for python to read

177
00:06:37,080 --> 00:06:39,720
and execute prepare some malicious code

178
00:06:39,720 --> 00:06:42,300
inside the shareman region and trick

179
00:06:42,300 --> 00:06:45,180
python to execute it leading to a code

180
00:06:45,180 --> 00:06:47,220
injection attack

181
00:06:47,220 --> 00:06:50,220
the problem here is that the accesses

182
00:06:50,220 --> 00:06:52,620
which are the receiving end of a a

183
00:06:52,620 --> 00:06:54,900
memory engine cannot enforce your own

184
00:06:54,900 --> 00:06:56,699
memory protection permissions python in

185
00:06:56,699 --> 00:06:59,160
this example is not able to tell the

186
00:06:59,160 --> 00:07:01,020
hardware that it's not interested in

187
00:07:01,020 --> 00:07:04,099
executing this mirror engine

188
00:07:05,039 --> 00:07:08,819
uh elastic response to this is another

189
00:07:08,819 --> 00:07:11,520
set of permissions uh called effective

190
00:07:11,520 --> 00:07:14,880
permissions which serve as an actual

191
00:07:14,880 --> 00:07:17,699
extra constraint to how each memory

192
00:07:17,699 --> 00:07:19,620
region is accessed

193
00:07:19,620 --> 00:07:22,340
so although Apache is able to set

194
00:07:22,340 --> 00:07:24,479
Python's maximum permissions to read and

195
00:07:24,479 --> 00:07:26,819
execute if pythony's Factory permissions

196
00:07:26,819 --> 00:07:29,699
are empty it's still not allowed to do

197
00:07:29,699 --> 00:07:31,620
anything with the cement region

198
00:07:31,620 --> 00:07:34,020
in order to reflect the dynamic change

199
00:07:34,020 --> 00:07:36,960
of the you know applications need to

200
00:07:36,960 --> 00:07:40,199
access memory each Enclave can actually

201
00:07:40,199 --> 00:07:43,199
access the uh sorry can request or how

202
00:07:43,199 --> 00:07:45,120
it should change his own effective

203
00:07:45,120 --> 00:07:47,819
permissions dynamically so python if at

204
00:07:47,819 --> 00:07:50,039
some some point wants to read that

205
00:07:50,039 --> 00:07:53,400
memory region can request the hardware

206
00:07:53,400 --> 00:07:55,800
to change that reflection permissions to

207
00:07:55,800 --> 00:07:58,020
read only

208
00:07:58,020 --> 00:07:59,639
the max information signing Factory

209
00:07:59,639 --> 00:08:01,440
permissions are conducted by a very

210
00:08:01,440 --> 00:08:03,780
simple relationship so for any pair of

211
00:08:03,780 --> 00:08:05,940
unclear and memories and the effects

212
00:08:05,940 --> 00:08:08,220
permissions are always bounded by the

213
00:08:08,220 --> 00:08:10,500
maximum permissions

214
00:08:10,500 --> 00:08:13,680
so a Apache if I setting the maximum

215
00:08:13,680 --> 00:08:15,599
information to read and execute can make

216
00:08:15,599 --> 00:08:17,520
sure that python does not have effective

217
00:08:17,520 --> 00:08:18,960
permissions of read and write because

218
00:08:18,960 --> 00:08:21,180
right is not present in the max

219
00:08:21,180 --> 00:08:24,180
information in fact if python attempts

220
00:08:24,180 --> 00:08:26,280
to set these refractive Dimensions to

221
00:08:26,280 --> 00:08:28,560
read and write they'll be an exception

222
00:08:28,560 --> 00:08:31,520
if you buy the hardware

223
00:08:32,458 --> 00:08:34,799
um there's one more challenge I want we

224
00:08:34,799 --> 00:08:36,299
want to talk about

225
00:08:36,299 --> 00:08:38,580
um so let's imagine Apache has already

226
00:08:38,580 --> 00:08:40,080
share this memoration with python and

227
00:08:40,080 --> 00:08:42,120
python is currently uh processing the

228
00:08:42,120 --> 00:08:43,440
data inside

229
00:08:43,440 --> 00:08:45,720
uh if Apache is malicious what you can

230
00:08:45,720 --> 00:08:49,080
do is to modify the data while python is

231
00:08:49,080 --> 00:08:51,120
to reading is still free processing the

232
00:08:51,120 --> 00:08:53,700
data and this can create a risk

233
00:08:53,700 --> 00:08:55,080
condition between those two applications

234
00:08:55,080 --> 00:08:57,300
uh potentially leading to time and check

235
00:08:57,300 --> 00:08:59,959
to time user tags

236
00:08:59,959 --> 00:09:02,399
the root cause of this is that there's

237
00:09:02,399 --> 00:09:04,019
no mechanism for enforcing

238
00:09:04,019 --> 00:09:06,540
synchronization between uh mutually

239
00:09:06,540 --> 00:09:09,180
distracting parties

240
00:09:09,180 --> 00:09:12,120
uh to solve this problem the elasticity

241
00:09:12,120 --> 00:09:15,660
in incorporates a lock bit which is an

242
00:09:15,660 --> 00:09:17,519
actual assist alongside the traditional

243
00:09:17,519 --> 00:09:20,760
read write execute permission bits uh so

244
00:09:20,760 --> 00:09:23,040
python for example can have a lock bit

245
00:09:23,040 --> 00:09:25,200
in its maximum uh and effective

246
00:09:25,200 --> 00:09:27,180
permissions and by having this lock fit

247
00:09:27,180 --> 00:09:28,980
in the effective remissions it's

248
00:09:28,980 --> 00:09:31,260
guaranteed exclusive access to that

249
00:09:31,260 --> 00:09:33,120
memory region so python can make sure

250
00:09:33,120 --> 00:09:35,519
that Apache doesn't have uh access to

251
00:09:35,519 --> 00:09:38,660
the main region at the same time

252
00:09:39,060 --> 00:09:41,160
to summarize there are three uh

253
00:09:41,160 --> 00:09:42,899
necessary elements in elastic caves

254
00:09:42,899 --> 00:09:44,519
design it has the maximum permissions

255
00:09:44,519 --> 00:09:46,620
defined by the owner which memory region

256
00:09:46,620 --> 00:09:48,540
it also has a set of effective

257
00:09:48,540 --> 00:09:50,279
permissions which are always limited by

258
00:09:50,279 --> 00:09:52,080
maximum permissions and those infection

259
00:09:52,080 --> 00:09:54,420
permissions are defined by each

260
00:09:54,420 --> 00:09:56,880
individual Enclave itself

261
00:09:56,880 --> 00:09:59,040
uh in order to enforce synchronization

262
00:09:59,040 --> 00:10:02,339
it has a lock bit

263
00:10:02,339 --> 00:10:05,880
uh we present a prototype limitation

264
00:10:05,880 --> 00:10:08,339
that is based on a rocky core which is a

265
00:10:08,339 --> 00:10:10,860
respiring implementation uh and on top

266
00:10:10,860 --> 00:10:13,560
of the viewed a trusted security monitor

267
00:10:13,560 --> 00:10:15,000
in the air mode

268
00:10:15,000 --> 00:10:18,720
and the human asmo software including OS

269
00:10:18,720 --> 00:10:21,300
kernels and The Enclave software can

270
00:10:21,300 --> 00:10:23,899
interact with a security monitor

271
00:10:23,899 --> 00:10:26,240
through a seven elastic

272
00:10:26,240 --> 00:10:29,220
instructions provide by elasticate those

273
00:10:29,220 --> 00:10:31,800
will be related to how to creating

274
00:10:31,800 --> 00:10:33,720
mineral regions as well as set the

275
00:10:33,720 --> 00:10:36,420
maximum manufacture permissions security

276
00:10:36,420 --> 00:10:39,600
monitor in turn enforces the elasticity

277
00:10:39,600 --> 00:10:42,300
memorization model through by

278
00:10:42,300 --> 00:10:44,579
configuring PMP entries which are

279
00:10:44,579 --> 00:10:47,220
special features provided by uh

280
00:10:47,220 --> 00:10:50,279
uh There is five architecture

281
00:10:50,279 --> 00:10:53,820
and each PMP entry essentially uh

282
00:10:53,820 --> 00:10:56,100
defines a memory protection for one

283
00:10:56,100 --> 00:10:59,399
contiguous physical memory region

284
00:10:59,399 --> 00:11:03,240
and uh exactly how security manager

285
00:11:03,240 --> 00:11:05,579
configures the PMP entry is it depends

286
00:11:05,579 --> 00:11:07,920
on which uh software is currently

287
00:11:07,920 --> 00:11:09,779
running on the CPU call let's say the

288
00:11:09,779 --> 00:11:12,120
python at this point is executing on the

289
00:11:12,120 --> 00:11:15,360
CPU core and we know that the pythons uh

290
00:11:15,360 --> 00:11:17,820
effective permissions to this specific

291
00:11:17,820 --> 00:11:21,180
physical memory region is read only with

292
00:11:21,180 --> 00:11:22,800
a lock bit then the security monitor

293
00:11:22,800 --> 00:11:25,980
will set up a PMP entry that's specified

294
00:11:25,980 --> 00:11:27,600
that this specific physical memory

295
00:11:27,600 --> 00:11:29,640
region is read only to software in S

296
00:11:29,640 --> 00:11:32,640
Mode and new mode

297
00:11:32,640 --> 00:11:36,300
or evaluate our prototypmentation with a

298
00:11:36,300 --> 00:11:38,459
goal of uh you know understanding the

299
00:11:38,459 --> 00:11:41,820
performance of it and we include both

300
00:11:41,820 --> 00:11:43,980
handcrafted micro benchmarks as well as

301
00:11:43,980 --> 00:11:45,240
standard benchmarks for understanding

302
00:11:45,240 --> 00:11:47,399
different application scenarios

303
00:11:47,399 --> 00:11:50,640
we use a specialization as implementing

304
00:11:50,640 --> 00:11:53,760
Keystone which is a risk 5 based te

305
00:11:53,760 --> 00:11:57,540
implementation as the Baseline and in

306
00:11:57,540 --> 00:11:59,399
order to have a reference point for

307
00:11:59,399 --> 00:12:01,700
understanding of performance we also

308
00:12:01,700 --> 00:12:05,399
compare with Native execution

309
00:12:05,399 --> 00:12:07,560
uh our adventures are wrong on a

310
00:12:07,560 --> 00:12:09,180
psychiatric Refugee acceleration

311
00:12:09,180 --> 00:12:12,859
simulator called fire scene

312
00:12:13,260 --> 00:12:14,660
um so let's take a look at a special

313
00:12:14,660 --> 00:12:18,180
benchmarks which are a set of uh which

314
00:12:18,180 --> 00:12:20,060
is a set of share intensive applications

315
00:12:20,060 --> 00:12:23,220
uh so uh each of those applications have

316
00:12:23,220 --> 00:12:25,140
two uncased performing power computation

317
00:12:25,140 --> 00:12:28,200
based on some shared data uh if in the

318
00:12:28,200 --> 00:12:31,620
last setting each main region that the

319
00:12:31,620 --> 00:12:33,360
Traders have stored in your memory

320
00:12:33,360 --> 00:12:34,560
region that is accessible to both

321
00:12:34,560 --> 00:12:37,560
enclaves but in spatial isolation the

322
00:12:37,560 --> 00:12:40,220
data is actually passed uh through

323
00:12:40,220 --> 00:12:43,500
secure channels by having Azure copies

324
00:12:43,500 --> 00:12:45,720
and encryption decryption in the native

325
00:12:45,720 --> 00:12:47,639
Indian execution two enclaves will

326
00:12:47,639 --> 00:12:50,760
become two two threats and the shared

327
00:12:50,760 --> 00:12:52,800
data

328
00:12:52,800 --> 00:12:54,720
the data is shared through the

329
00:12:54,720 --> 00:12:56,040
traditional means

330
00:12:56,040 --> 00:12:59,519
so uh this slide shows uh the direction

331
00:12:59,519 --> 00:13:01,920
results as represented by the number of

332
00:13:01,920 --> 00:13:05,160
Cycles across different uh different

333
00:13:05,160 --> 00:13:06,540
workloads

334
00:13:06,540 --> 00:13:09,959
so as we can see uh yeah elastic is able

335
00:13:09,959 --> 00:13:11,399
to consistently outperform

336
00:13:11,399 --> 00:13:13,920
spiritualization by about a two orders

337
00:13:13,920 --> 00:13:16,860
of magnitude and the performance is

338
00:13:16,860 --> 00:13:19,320
close to that of the interview execution

339
00:13:19,320 --> 00:13:21,720
so in the interest time I'm not going to

340
00:13:21,720 --> 00:13:23,579
show the full Evolution results there

341
00:13:23,579 --> 00:13:24,720
are more in the paper if you are

342
00:13:24,720 --> 00:13:26,519
interested do check them out

343
00:13:26,519 --> 00:13:28,920
uh in conclusion we have a elastic cave

344
00:13:28,920 --> 00:13:30,959
design which is a new memory

345
00:13:30,959 --> 00:13:33,060
acceleration model that includes uh Max

346
00:13:33,060 --> 00:13:34,079
information permissions effective

347
00:13:34,079 --> 00:13:35,760
permissions as well as log bits

348
00:13:35,760 --> 00:13:37,500
represent the Prototype implementation

349
00:13:37,500 --> 00:13:40,079
based on risk 5 that enforces this model

350
00:13:40,079 --> 00:13:43,560
using pmps uh in your evaluation we show

351
00:13:43,560 --> 00:13:46,019
that it's able to achieve 12 magnitude

352
00:13:46,019 --> 00:13:49,019
in performance Improvement our prototype

353
00:13:49,019 --> 00:13:51,920
implementation is open source online

354
00:13:51,920 --> 00:13:54,060
please check it out if you are

355
00:13:54,060 --> 00:13:56,339
interested thanks for listening I'm

356
00:13:56,339 --> 00:14:00,079
opening two questions thank you

