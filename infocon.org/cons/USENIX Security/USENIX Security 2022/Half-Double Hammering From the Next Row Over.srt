1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:10,880 --> 00:00:14,160
this was a joint work with Google and so

3
00:00:14,160 --> 00:00:15,960
let's get started the motivation about

4
00:00:15,960 --> 00:00:18,140
half double is basically raw Hammer

5
00:00:18,140 --> 00:00:21,060
rohima is a hardware effect that was

6
00:00:21,060 --> 00:00:24,539
discovered in 2014 and it basically

7
00:00:24,539 --> 00:00:26,939
found out that if you access a physical

8
00:00:26,939 --> 00:00:29,279
memory location very often you have

9
00:00:29,279 --> 00:00:32,220
disturbances that can travel influence

10
00:00:32,220 --> 00:00:34,140
neighboring physical

11
00:00:34,140 --> 00:00:36,960
locations

12
00:00:36,960 --> 00:00:39,840
yes so if you accumulate these

13
00:00:39,840 --> 00:00:42,300
disturbances over the time frame of 64

14
00:00:42,300 --> 00:00:44,579
milliseconds which is basically a Time

15
00:00:44,579 --> 00:00:47,700
window of a refresh of a run module then

16
00:00:47,700 --> 00:00:49,020
it can happen that these double

17
00:00:49,020 --> 00:00:52,260
disturbances manifest as a bit flip in a

18
00:00:52,260 --> 00:00:53,520
Target role

19
00:00:53,520 --> 00:00:55,500
since we know that bug for a long time

20
00:00:55,500 --> 00:00:58,260
we actually have in place defenses by

21
00:00:58,260 --> 00:01:00,420
now the most common known is the error

22
00:01:00,420 --> 00:01:02,640
correcting codes ECC and the idea of the

23
00:01:02,640 --> 00:01:04,799
ECC code is basically to detect a bit

24
00:01:04,799 --> 00:01:06,479
flip and correct

25
00:01:06,479 --> 00:01:09,060
um one bit flip via data board we also

26
00:01:09,060 --> 00:01:10,920
have a more dedicated raw Hammer defense

27
00:01:10,920 --> 00:01:13,740
it's called targeted row refresh and the

28
00:01:13,740 --> 00:01:15,240
idea here is that you refresh

29
00:01:15,240 --> 00:01:17,400
neighboring rows before you can abuse

30
00:01:17,400 --> 00:01:21,420
those electrical disturbances however we

31
00:01:21,420 --> 00:01:23,759
have seen in the past year past two

32
00:01:23,759 --> 00:01:27,060
years that these TR implementations the

33
00:01:27,060 --> 00:01:30,060
first ones they were flawed because the

34
00:01:30,060 --> 00:01:31,380
resources of this theorem

35
00:01:31,380 --> 00:01:32,520
implementations can actually be

36
00:01:32,520 --> 00:01:34,439
exhausted and then you won't protect

37
00:01:34,439 --> 00:01:36,060
against certain

38
00:01:36,060 --> 00:01:38,159
um attacks anymore

39
00:01:38,159 --> 00:01:40,380
and in this paper we asked basically the

40
00:01:40,380 --> 00:01:43,560
perfect question would a perfect URL we

41
00:01:43,560 --> 00:01:45,720
do implementation fix roll Hammer

42
00:01:45,720 --> 00:01:47,939
overall so the short answer to that is

43
00:01:47,939 --> 00:01:49,079
no

44
00:01:49,079 --> 00:01:51,960
we observed that when hammering with a

45
00:01:51,960 --> 00:01:54,060
distance tube side a distance 2 pattern

46
00:01:54,060 --> 00:01:56,340
on Modern commodity devices so basically

47
00:01:56,340 --> 00:01:58,380
you just move double-sided Warhammer out

48
00:01:58,380 --> 00:02:02,220
by one row You observe flips on mobile

49
00:02:02,220 --> 00:02:04,860
commodity devices our five out of seven

50
00:02:04,860 --> 00:02:07,140
of those devices were affected out of

51
00:02:07,140 --> 00:02:08,280
the box

52
00:02:08,280 --> 00:02:11,099
however why is this so so so impactful

53
00:02:11,099 --> 00:02:14,879
because those devices have lbda4x memory

54
00:02:14,879 --> 00:02:18,120
that has active mitigations against raw

55
00:02:18,120 --> 00:02:22,080
Hammer so they both deploy ECC and trr

56
00:02:22,080 --> 00:02:24,720
so what have we seen there was this a

57
00:02:24,720 --> 00:02:26,700
distance to Raw Hammer now possible on

58
00:02:26,700 --> 00:02:28,739
commodity devices or is the root cause

59
00:02:28,739 --> 00:02:30,840
something completely different

60
00:02:30,840 --> 00:02:33,900
in order to find that out we we composed

61
00:02:33,900 --> 00:02:36,300
a few experiments in the paper where we

62
00:02:36,300 --> 00:02:39,300
first build fpga setup and used one of

63
00:02:39,300 --> 00:02:41,760
those themes in the fpga setup the

64
00:02:41,760 --> 00:02:43,500
benefit of the setup is there and we

65
00:02:43,500 --> 00:02:45,000
have complete control over the

66
00:02:45,000 --> 00:02:47,879
refreshers and you can even deactivate

67
00:02:47,879 --> 00:02:49,319
TR in that case

68
00:02:49,319 --> 00:02:51,959
and the memory there is also not used

69
00:02:51,959 --> 00:02:54,120
for for system memory so we don't need

70
00:02:54,120 --> 00:02:56,400
to actually keep the data valid in order

71
00:02:56,400 --> 00:02:59,099
for the fpga setup to work out correctly

72
00:02:59,099 --> 00:03:01,019
on the left side you see the notation we

73
00:03:01,019 --> 00:03:03,180
will use in the slides from now on we

74
00:03:03,180 --> 00:03:05,099
can see the victory that's the target of

75
00:03:05,099 --> 00:03:07,260
the Rohan attack we have around the near

76
00:03:07,260 --> 00:03:08,819
aggressors so the direct neighboring

77
00:03:08,819 --> 00:03:10,860
rows and we have the fire aggressors so

78
00:03:10,860 --> 00:03:12,840
the rows which are distance to a barred

79
00:03:12,840 --> 00:03:15,180
from the victim so the first experiment

80
00:03:15,180 --> 00:03:18,480
we conducted with the fpga setup was we

81
00:03:18,480 --> 00:03:21,599
mounted classic double-sided roll hammer

82
00:03:21,599 --> 00:03:24,060
on the victim row Wii and we simply

83
00:03:24,060 --> 00:03:26,099
looked at how fast can we inject a bit

84
00:03:26,099 --> 00:03:28,980
flip into V and it's the first flip

85
00:03:28,980 --> 00:03:32,040
occurred after around 18K hammers as

86
00:03:32,040 --> 00:03:34,620
approximately 1.2 milliseconds of

87
00:03:34,620 --> 00:03:37,260
constant hammering as we've seen this

88
00:03:37,260 --> 00:03:39,420
fits within the default within the

89
00:03:39,420 --> 00:03:41,819
refresh interval of one and RAM however

90
00:03:41,819 --> 00:03:45,060
we have an active defense against it trr

91
00:03:45,060 --> 00:03:47,239
that's the perfect case for TR where

92
00:03:47,239 --> 00:03:50,159
tractivates before these 18

93
00:03:50,159 --> 00:03:52,379
000 activations are reached and issues a

94
00:03:52,379 --> 00:03:54,840
refresh to the victim the

95
00:03:54,840 --> 00:03:57,180
so let's go to the second experiments

96
00:03:57,180 --> 00:03:59,099
let's just move this double-sided

97
00:03:59,099 --> 00:04:01,319
hammering button out by one row so we're

98
00:04:01,319 --> 00:04:03,799
now hammering the fire aggressors and

99
00:04:03,799 --> 00:04:06,900
again measure the time it takes for us

100
00:04:06,900 --> 00:04:08,879
to inject the bit flip here we see the

101
00:04:08,879 --> 00:04:10,560
effect that we need around 4 million

102
00:04:10,560 --> 00:04:12,860
accesses over

103
00:04:12,860 --> 00:04:16,380
2717 milliseconds of constant hammering

104
00:04:16,380 --> 00:04:18,959
this is way too large to fit into any

105
00:04:18,959 --> 00:04:21,180
div into any refresh window which is

106
00:04:21,180 --> 00:04:23,520
used on Modern devices

107
00:04:23,520 --> 00:04:26,160
and now the effect that we have seen is

108
00:04:26,160 --> 00:04:28,500
that if we combine those two we can

109
00:04:28,500 --> 00:04:30,600
create the half double effect so the

110
00:04:30,600 --> 00:04:33,000
idea here is that we use many axises to

111
00:04:33,000 --> 00:04:35,520
this distance two Hammers and only a few

112
00:04:35,520 --> 00:04:37,800
to the near aggressors when we can

113
00:04:37,800 --> 00:04:39,600
choose this with a parameter we call the

114
00:04:39,600 --> 00:04:41,460
dilution factor

115
00:04:41,460 --> 00:04:43,320
how long does it take to observe a bit

116
00:04:43,320 --> 00:04:45,479
flip when hammering with half double we

117
00:04:45,479 --> 00:04:48,000
see that we take around 20 milliseconds

118
00:04:48,000 --> 00:04:50,340
until we found a flip with the half

119
00:04:50,340 --> 00:04:52,139
double pattern with that configuration

120
00:04:52,139 --> 00:04:55,800
here so we can see that this fits into

121
00:04:55,800 --> 00:04:58,199
the refresh interval of modern alarm

122
00:04:58,199 --> 00:04:59,639
however

123
00:04:59,639 --> 00:05:01,740
as we mentioned in the beginning we use

124
00:05:01,740 --> 00:05:03,419
this distance 2 hammering pattern on

125
00:05:03,419 --> 00:05:05,940
commodity devices to unfound Flips there

126
00:05:05,940 --> 00:05:09,060
however we did not perform any accesses

127
00:05:09,060 --> 00:05:12,360
to the near aggressors in that case so

128
00:05:12,360 --> 00:05:14,759
where do they come from and they are the

129
00:05:14,759 --> 00:05:16,979
TR mitigation comes into place because

130
00:05:16,979 --> 00:05:19,199
these near aggressor accesses are

131
00:05:19,199 --> 00:05:21,240
actually performed by the defense

132
00:05:21,240 --> 00:05:24,120
against classic distance one through

133
00:05:24,120 --> 00:05:26,100
double-sided hammering how does it work

134
00:05:26,100 --> 00:05:28,620
since we are hammering the fire

135
00:05:28,620 --> 00:05:30,600
aggressors after a certain activation

136
00:05:30,600 --> 00:05:33,240
count is reached TR will try to protect

137
00:05:33,240 --> 00:05:35,280
the neighboring rivers and issue

138
00:05:35,280 --> 00:05:37,560
Refreshers to the neighbors these

139
00:05:37,560 --> 00:05:40,580
neighbors are similar to xss and simply

140
00:05:40,580 --> 00:05:43,680
transport the half the rohem effect to

141
00:05:43,680 --> 00:05:45,840
the Victory and can cause bit flips

142
00:05:45,840 --> 00:05:46,800
there

143
00:05:46,800 --> 00:05:49,020
so this was a real technical explanation

144
00:05:49,020 --> 00:05:51,539
with a few experiments but Jonas can be

145
00:05:51,539 --> 00:05:53,340
exploited in the wild

146
00:05:53,340 --> 00:05:55,020
that's a really quick question thank you

147
00:05:55,020 --> 00:05:58,560
so now we found this half double rohama

148
00:05:58,560 --> 00:06:00,479
effect but he wanted to know if average

149
00:06:00,479 --> 00:06:02,759
users using commodity devices are

150
00:06:02,759 --> 00:06:05,100
actually affected

151
00:06:05,100 --> 00:06:06,960
and for this we built an end-to-end

152
00:06:06,960 --> 00:06:09,419
exploits it uses the same technique

153
00:06:09,419 --> 00:06:11,400
that's already used for many roham

154
00:06:11,400 --> 00:06:13,380
exploits and was actually discovered in

155
00:06:13,380 --> 00:06:16,560
2015 where we targets the page frame

156
00:06:16,560 --> 00:06:18,060
number of a page table

157
00:06:18,060 --> 00:06:20,400
try to flip a bit that he points to

158
00:06:20,400 --> 00:06:22,080
another page table and then we get full

159
00:06:22,080 --> 00:06:23,460
read and write access to the whole

160
00:06:23,460 --> 00:06:25,800
memory in the paper we defined four

161
00:06:25,800 --> 00:06:28,680
challenges we had to solve to make this

162
00:06:28,680 --> 00:06:31,139
still possible on Modern devices

163
00:06:31,139 --> 00:06:32,639
the first one is a location of

164
00:06:32,639 --> 00:06:34,560
contiguous memory

165
00:06:34,560 --> 00:06:36,600
the second is an alternative to memory

166
00:06:36,600 --> 00:06:39,419
templating because of the ECC

167
00:06:39,419 --> 00:06:42,240
the third is memory massaging and the

168
00:06:42,240 --> 00:06:45,539
fourth is a modern bitfully verification

169
00:06:45,539 --> 00:06:48,180
to make the endo and exploit more

170
00:06:48,180 --> 00:06:50,039
reliable

171
00:06:50,039 --> 00:06:51,960
so the first challenge

172
00:06:51,960 --> 00:06:54,060
of course our process is running in the

173
00:06:54,060 --> 00:06:56,039
virtual address space

174
00:06:56,039 --> 00:06:59,400
but we need to access specific physical

175
00:06:59,400 --> 00:07:01,680
rows in the drum to make half double

176
00:07:01,680 --> 00:07:03,840
possible so we need some information

177
00:07:03,840 --> 00:07:06,120
about the mapping from virtual to

178
00:07:06,120 --> 00:07:07,800
physical addresses

179
00:07:07,800 --> 00:07:10,319
some Works use two megabyte Pages for

180
00:07:10,319 --> 00:07:12,660
that huge pages but they can easily be

181
00:07:12,660 --> 00:07:15,360
deactivated by the operating system and

182
00:07:15,360 --> 00:07:16,919
therefore mitigate the attack which is

183
00:07:16,919 --> 00:07:19,199
not interesting for us so we use a

184
00:07:19,199 --> 00:07:21,120
different approach we just allocate a

185
00:07:21,120 --> 00:07:22,380
lot of memory

186
00:07:22,380 --> 00:07:25,500
and then we try to find memory blocks

187
00:07:25,500 --> 00:07:28,500
where contiguous virtual memory is

188
00:07:28,500 --> 00:07:30,479
mapped into the

189
00:07:30,479 --> 00:07:33,120
memory into the physical memory also

190
00:07:33,120 --> 00:07:34,740
contiguous

191
00:07:34,740 --> 00:07:39,539
and for this we use this Bank

192
00:07:39,539 --> 00:07:41,880
sorry use the dram addressing functions

193
00:07:41,880 --> 00:07:44,099
you see on the left they are used by the

194
00:07:44,099 --> 00:07:45,780
memory controller to map physical

195
00:07:45,780 --> 00:07:48,780
addresses to the 16 drum Banks of our

196
00:07:48,780 --> 00:07:50,340
device

197
00:07:50,340 --> 00:07:52,020
and the nice thing about this function

198
00:07:52,020 --> 00:07:54,539
is that if the memory is physically

199
00:07:54,539 --> 00:07:56,699
contiguous they create a specific

200
00:07:56,699 --> 00:08:01,740
pattern on when which bank is used for

201
00:08:01,740 --> 00:08:03,479
the next page

202
00:08:03,479 --> 00:08:05,759
you can see the button here every color

203
00:08:05,759 --> 00:08:08,280
on this graph represents a bank

204
00:08:08,280 --> 00:08:11,639
and for example the blue Bank it has the

205
00:08:11,639 --> 00:08:14,160
specific pattern where there is

206
00:08:14,160 --> 00:08:16,979
a direct neighboring bank and then it's

207
00:08:16,979 --> 00:08:18,960
a distance of 8 a distance of 9 a

208
00:08:18,960 --> 00:08:20,520
distance of eight and then the whole

209
00:08:20,520 --> 00:08:22,440
thing repeats again and we can detect

210
00:08:22,440 --> 00:08:24,180
this through a timing side Channel with

211
00:08:24,180 --> 00:08:26,960
bank conflict

212
00:08:27,539 --> 00:08:30,479
the Second Challenge is the memory

213
00:08:30,479 --> 00:08:32,339
templating and massaging

214
00:08:32,339 --> 00:08:34,620
many exploits products purchase memory

215
00:08:34,620 --> 00:08:36,899
templating to find bit flips before

216
00:08:36,899 --> 00:08:39,000
trying to exploit them but because of

217
00:08:39,000 --> 00:08:41,458
ECC this is not working so well anymore

218
00:08:41,458 --> 00:08:43,200
so we just completely skip the

219
00:08:43,200 --> 00:08:45,120
templating step

220
00:08:45,120 --> 00:08:48,720
we take this contiguous the contiguous

221
00:08:48,720 --> 00:08:51,540
memory blocks we found and we unmap all

222
00:08:51,540 --> 00:08:53,700
the pages that correspond to every third

223
00:08:53,700 --> 00:08:55,620
row in the memory

224
00:08:55,620 --> 00:08:57,779
then we spray page Tables by just

225
00:08:57,779 --> 00:09:00,300
repeatedly mapping a virtual

226
00:09:00,300 --> 00:09:03,000
a shared memory file

227
00:09:03,000 --> 00:09:05,580
and then we hammered in the page tables

228
00:09:05,580 --> 00:09:07,500
that are hopefully in our victim rows

229
00:09:07,500 --> 00:09:09,600
with half double the nice thing about

230
00:09:09,600 --> 00:09:12,600
this pattern is that we reuse

231
00:09:12,600 --> 00:09:15,120
um near aggressors from One Hammer as

232
00:09:15,120 --> 00:09:16,980
the fire aggresses for the next Hammer

233
00:09:16,980 --> 00:09:20,120
of the next victim row

234
00:09:21,959 --> 00:09:24,120
and the final building block is the bit

235
00:09:24,120 --> 00:09:27,480
flip verification because we do not know

236
00:09:27,480 --> 00:09:29,640
which bits we will flip in the page

237
00:09:29,640 --> 00:09:32,459
table entries if we flip some and if we

238
00:09:32,459 --> 00:09:35,160
flip some bits and the page table enter

239
00:09:35,160 --> 00:09:37,860
is corrupt the CPU will throw an

240
00:09:37,860 --> 00:09:39,420
exception and the operating system will

241
00:09:39,420 --> 00:09:41,760
kill our exploits and we don't want that

242
00:09:41,760 --> 00:09:43,080
obviously

243
00:09:43,080 --> 00:09:45,480
so we have to verify if an address is

244
00:09:45,480 --> 00:09:47,519
safe to access and we do this by

245
00:09:47,519 --> 00:09:50,339
accessing it transiently inside of a

246
00:09:50,339 --> 00:09:52,320
specter Gadget you can see the code on

247
00:09:52,320 --> 00:09:53,459
the left

248
00:09:53,459 --> 00:09:55,680
the pointer is the address pointing to

249
00:09:55,680 --> 00:09:57,779
the address you want to check and we

250
00:09:57,779 --> 00:10:00,540
transiently access the pointer and use

251
00:10:00,540 --> 00:10:03,240
its value

252
00:10:03,240 --> 00:10:04,980
for um

253
00:10:04,980 --> 00:10:08,459
then accessing probe and if we are able

254
00:10:08,459 --> 00:10:11,279
to access pointer and get the value the

255
00:10:11,279 --> 00:10:13,940
CPU then accesses our probe address

256
00:10:13,940 --> 00:10:16,500
and we can easily see if it was success

257
00:10:16,500 --> 00:10:19,200
if it is cached if probe is not cached

258
00:10:19,200 --> 00:10:21,440
we know that pointer was not

259
00:10:21,440 --> 00:10:23,940
successfully accessed and it's therefore

260
00:10:23,940 --> 00:10:25,800
unsafe for us to access and we'll just

261
00:10:25,800 --> 00:10:29,000
skip it and not access it anymore

262
00:10:29,000 --> 00:10:31,740
and with this we're able to suppress any

263
00:10:31,740 --> 00:10:33,839
corruption faults that could happen

264
00:10:33,839 --> 00:10:35,760
okay Jonas so these are all building

265
00:10:35,760 --> 00:10:37,620
blocks but how can you convert it to an

266
00:10:37,620 --> 00:10:39,120
end-to-end exploit it's actually quite

267
00:10:39,120 --> 00:10:40,500
easy

268
00:10:40,500 --> 00:10:43,980
the combination so first we get our

269
00:10:43,980 --> 00:10:46,019
contiguous memory blocks this can take

270
00:10:46,019 --> 00:10:48,300
from a few seconds to a few minutes

271
00:10:48,300 --> 00:10:51,180
depending on how lucky we are on which

272
00:10:51,180 --> 00:10:54,060
memory blocks we get then we spray the

273
00:10:54,060 --> 00:10:56,220
page tables that takes less than a

274
00:10:56,220 --> 00:10:59,040
minute because that's really quick and

275
00:10:59,040 --> 00:11:00,320
then we actually

276
00:11:00,320 --> 00:11:04,019
parallelly Hammer the victims and

277
00:11:04,019 --> 00:11:05,600
already check

278
00:11:05,600 --> 00:11:07,980
hammered page table entries with our

279
00:11:07,980 --> 00:11:10,320
bitflip verification by doing this in

280
00:11:10,320 --> 00:11:12,600
parallel we save a lot of time and on

281
00:11:12,600 --> 00:11:15,180
average in 45 minutes we are able to

282
00:11:15,180 --> 00:11:18,540
exploit our Chrome dig Chromebook device

283
00:11:18,540 --> 00:11:21,240
and this gives us full Memory full

284
00:11:21,240 --> 00:11:22,980
memory read and write primitive to the

285
00:11:22,980 --> 00:11:24,899
whole physical memory and from there you

286
00:11:24,899 --> 00:11:27,839
can do pretty much whatever you want

287
00:11:27,839 --> 00:11:30,480
and the cool thing is this is completely

288
00:11:30,480 --> 00:11:32,940
Deployable inside an Android app that

289
00:11:32,940 --> 00:11:34,980
runs on Android as well as Chrome OS

290
00:11:34,980 --> 00:11:36,240
devices

291
00:11:36,240 --> 00:11:38,100
if you are interested in the whole

292
00:11:38,100 --> 00:11:40,920
exploit and more details you can find it

293
00:11:40,920 --> 00:11:44,279
on GitHub it's open source

294
00:11:44,279 --> 00:11:45,839
we are also happy to announce that we

295
00:11:45,839 --> 00:11:48,300
passed the artifact evaluation

296
00:11:48,300 --> 00:11:50,640
and if you're interested in more details

297
00:11:50,640 --> 00:11:53,459
like the dance experiment the contiguous

298
00:11:53,459 --> 00:11:56,040
memory detection that's independent of

299
00:11:56,040 --> 00:11:58,440
the device or the physical address bit

300
00:11:58,440 --> 00:12:00,540
recovery we are able to do

301
00:12:00,540 --> 00:12:02,160
read the paper

302
00:12:02,160 --> 00:12:04,939
thank you very much

