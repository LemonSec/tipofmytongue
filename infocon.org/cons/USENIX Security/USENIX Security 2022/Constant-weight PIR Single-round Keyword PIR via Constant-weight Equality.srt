1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:08,599 --> 00:00:11,040
hello everyone great to see everyone

3
00:00:11,040 --> 00:00:13,799
here right to start my talk on our work

4
00:00:13,799 --> 00:00:17,039
on PIR it's worthy to go over the

5
00:00:17,039 --> 00:00:18,840
background a short background on horror

6
00:00:18,840 --> 00:00:19,980
Market that we'll need so I'll start

7
00:00:19,980 --> 00:00:23,160
from there so homework encryption is uh

8
00:00:23,160 --> 00:00:25,019
basically a method to compute it is a

9
00:00:25,019 --> 00:00:27,060
form of encryption where you can perform

10
00:00:27,060 --> 00:00:29,519
computation on your data while it's in

11
00:00:29,519 --> 00:00:31,380
encrypted form so the way it would

12
00:00:31,380 --> 00:00:33,840
usually work is you have access to some

13
00:00:33,840 --> 00:00:35,219
basic operations additions

14
00:00:35,219 --> 00:00:37,020
multiplications and then you can build

15
00:00:37,020 --> 00:00:40,320
more complex functions from there but

16
00:00:40,320 --> 00:00:42,059
the the thing you have to keep in mind

17
00:00:42,059 --> 00:00:44,520
is that first of all multiplications are

18
00:00:44,520 --> 00:00:46,200
more expensive than additions when

19
00:00:46,200 --> 00:00:49,020
you're using homework encryption for

20
00:00:49,020 --> 00:00:50,160
example is the numbers shown on this

21
00:00:50,160 --> 00:00:51,739
table that can be up to 20 times slower

22
00:00:51,739 --> 00:00:53,820
and the second is that the

23
00:00:53,820 --> 00:00:55,620
multiplicative depth of the circuit that

24
00:00:55,620 --> 00:00:57,539
you want to evaluate can determine the

25
00:00:57,539 --> 00:00:59,460
parameters of the homomorphic encryption

26
00:00:59,460 --> 00:01:02,640
system and that in turn determines the

27
00:01:02,640 --> 00:01:04,199
performance of the homework encryption

28
00:01:04,199 --> 00:01:07,439
system so so the two considerations to

29
00:01:07,439 --> 00:01:08,760
have in mind is for first you want to

30
00:01:08,760 --> 00:01:10,740
use as few multiplications as possible

31
00:01:10,740 --> 00:01:12,000
and the second we want to reduce the

32
00:01:12,000 --> 00:01:13,680
multiplicative depth of the circuit that

33
00:01:13,680 --> 00:01:16,380
we're evaluating as much as possible so

34
00:01:16,380 --> 00:01:18,299
with those two uh we can dive into

35
00:01:18,299 --> 00:01:20,820
equality operators which is the first

36
00:01:20,820 --> 00:01:23,400
building block of our work so just so we

37
00:01:23,400 --> 00:01:24,360
have we're on the same page on

38
00:01:24,360 --> 00:01:25,799
definitions and a quality Operator just

39
00:01:25,799 --> 00:01:27,479
takes two inputs if they're a match it

40
00:01:27,479 --> 00:01:29,700
outputs one and otherwise it outputs

41
00:01:29,700 --> 00:01:30,900
zero

42
00:01:30,900 --> 00:01:32,580
so this is an important building block

43
00:01:32,580 --> 00:01:34,439
for a lot of secure computation

44
00:01:34,439 --> 00:01:36,799
protocols like PIR PSI

45
00:01:36,799 --> 00:01:39,780
and whatnot

46
00:01:39,780 --> 00:01:41,700
um so the quality operators that exist

47
00:01:41,700 --> 00:01:45,000
uh would you typically work over

48
00:01:45,000 --> 00:01:47,040
um a bitwise representation and for

49
00:01:47,040 --> 00:01:48,420
example we have the plane or the

50
00:01:48,420 --> 00:01:50,399
arithmetic in the plane we're comparing

51
00:01:50,399 --> 00:01:53,340
an encrypted number with an unencrypted

52
00:01:53,340 --> 00:01:55,380
number whereas in the arithmic we're

53
00:01:55,380 --> 00:01:58,079
comparing two encrypted numbers

54
00:01:58,079 --> 00:02:00,299
so if we were to analyze these uh with

55
00:02:00,299 --> 00:02:01,860
regards to constraints I mentioned about

56
00:02:01,860 --> 00:02:03,960
homomorph encryption we can see that the

57
00:02:03,960 --> 00:02:06,299
arithmetic operator performs 2L

58
00:02:06,299 --> 00:02:10,318
multiplications for a number of a number

59
00:02:10,318 --> 00:02:13,140
of length l a length l

60
00:02:13,140 --> 00:02:15,060
and and does this with a multiple

61
00:02:15,060 --> 00:02:17,400
multiplicative depth of log l plus one

62
00:02:17,400 --> 00:02:19,860
so the number of multiplications and the

63
00:02:19,860 --> 00:02:21,599
multiplicative depth both depend on the

64
00:02:21,599 --> 00:02:24,180
bit length which kind of limits uh the

65
00:02:24,180 --> 00:02:25,800
scalability of this equality operator

66
00:02:25,800 --> 00:02:27,840
and how big of a number we can compare

67
00:02:27,840 --> 00:02:29,940
so we need uh we probably need a better

68
00:02:29,940 --> 00:02:32,340
approach so now we can dive into our

69
00:02:32,340 --> 00:02:34,020
construction which works over constant

70
00:02:34,020 --> 00:02:35,459
white codewords so first what are they

71
00:02:35,459 --> 00:02:37,020
constant weight codeword essentially

72
00:02:37,020 --> 00:02:38,819
means that

73
00:02:38,819 --> 00:02:40,800
um the number of it's a binary string

74
00:02:40,800 --> 00:02:42,720
where the number of bits set to one is

75
00:02:42,720 --> 00:02:45,780
exactly K so the example on the right is

76
00:02:45,780 --> 00:02:47,400
six bit numbers with only two of the

77
00:02:47,400 --> 00:02:49,560
bits set to one

78
00:02:49,560 --> 00:02:52,140
so how would uh How would how would we

79
00:02:52,140 --> 00:02:54,180
be able to compare constant weight code

80
00:02:54,180 --> 00:02:56,580
words so first in the playing case we

81
00:02:56,580 --> 00:02:58,980
have an encrypted x with an unencrypted

82
00:02:58,980 --> 00:03:01,920
y so we see the bits of Y so we oh we

83
00:03:01,920 --> 00:03:04,260
simply take the bits of X corresponding

84
00:03:04,260 --> 00:03:07,140
to the bits of Y which are one and

85
00:03:07,140 --> 00:03:10,080
simply extract those multiply them and

86
00:03:10,080 --> 00:03:11,459
there will be a most there will be

87
00:03:11,459 --> 00:03:13,140
exactly K of them because of the fact

88
00:03:13,140 --> 00:03:14,519
we're using constant weight code words

89
00:03:14,519 --> 00:03:16,319
we multiply them and that will give us

90
00:03:16,319 --> 00:03:17,819
the result of the comparison encrypted

91
00:03:17,819 --> 00:03:18,900
for

92
00:03:18,900 --> 00:03:21,300
in the arithmetic case where both X and

93
00:03:21,300 --> 00:03:22,620
Y are encrypted it's a little bit more

94
00:03:22,620 --> 00:03:25,379
complicated uh first you perform this

95
00:03:25,379 --> 00:03:27,180
inner product between the bits to get

96
00:03:27,180 --> 00:03:31,140
this value C in encrypted form now C is

97
00:03:31,140 --> 00:03:33,360
uh something between 0 and K because

98
00:03:33,360 --> 00:03:36,720
both of X and Y were constant weight

99
00:03:36,720 --> 00:03:39,180
um C is something between 0 and K it's K

100
00:03:39,180 --> 00:03:41,159
if it's a mat if they were equal and

101
00:03:41,159 --> 00:03:43,799
they're a match it's K if it's anything

102
00:03:43,799 --> 00:03:46,500
less than K it was a non-match so just

103
00:03:46,500 --> 00:03:49,319
translating what I said uh into a

104
00:03:49,319 --> 00:03:51,180
formulates that thing on the bottom

105
00:03:51,180 --> 00:03:53,879
right and that will give you the result

106
00:03:53,879 --> 00:03:58,159
of the comparison in encrypted form

107
00:03:59,340 --> 00:04:01,799
all right so what would it look like if

108
00:04:01,799 --> 00:04:04,739
we evaluate these uh so starting off

109
00:04:04,739 --> 00:04:05,819
with the plane

110
00:04:05,819 --> 00:04:08,159
uh comparing the plane constant weight

111
00:04:08,159 --> 00:04:10,680
with the folklore plane you can see that

112
00:04:10,680 --> 00:04:13,439
um based on the numbers in the green uh

113
00:04:13,439 --> 00:04:15,900
the constant weight uh the plane

114
00:04:15,900 --> 00:04:18,238
constant weight operator is like up to

115
00:04:18,238 --> 00:04:20,639
10 times even more faster than the

116
00:04:20,639 --> 00:04:23,220
folklore operator uh shown in the red on

117
00:04:23,220 --> 00:04:24,720
the top

118
00:04:24,720 --> 00:04:26,100
um and this could be attributed to the

119
00:04:26,100 --> 00:04:28,020
fact that we're first of all we're just

120
00:04:28,020 --> 00:04:30,000
performing less multiplications and less

121
00:04:30,000 --> 00:04:32,100
expensive homomorphic operations and

122
00:04:32,100 --> 00:04:34,740
second due to the fact that we have a

123
00:04:34,740 --> 00:04:36,720
smaller multiplicative depth we can use

124
00:04:36,720 --> 00:04:39,000
smaller parameters in some cases and

125
00:04:39,000 --> 00:04:42,300
that also makes um things faster now

126
00:04:42,300 --> 00:04:44,100
this must like there must be a catch the

127
00:04:44,100 --> 00:04:45,600
catches that we're not using the most

128
00:04:45,600 --> 00:04:47,699
efficient representation for the number

129
00:04:47,699 --> 00:04:50,160
there it's a little wasteful so this

130
00:04:50,160 --> 00:04:53,280
comes at a a higher memory usage the

131
00:04:53,280 --> 00:04:55,020
representation is a little bit larger

132
00:04:55,020 --> 00:04:56,759
than it could be

133
00:04:56,759 --> 00:04:59,280
um but that's not set in stone because

134
00:04:59,280 --> 00:05:01,860
we can actually use a more efficient

135
00:05:01,860 --> 00:05:04,560
representation as shown in the numbers

136
00:05:04,560 --> 00:05:07,020
in Orange so it will be do slightly

137
00:05:07,020 --> 00:05:08,520
worse for run time but it would also

138
00:05:08,520 --> 00:05:11,040
alleviate the burden on on the memory

139
00:05:11,040 --> 00:05:13,500
and on the size of the elements so we

140
00:05:13,500 --> 00:05:16,139
kind of have this freedom to choose here

141
00:05:16,139 --> 00:05:18,780
so now for the arithmetic operators so

142
00:05:18,780 --> 00:05:20,759
here the runtime like there isn't then

143
00:05:20,759 --> 00:05:22,680
massive speed up as we had in the plane

144
00:05:22,680 --> 00:05:25,440
so the numbers are more comparable still

145
00:05:25,440 --> 00:05:28,199
better as the greens show but not

146
00:05:28,199 --> 00:05:31,380
insanely like better as before and this

147
00:05:31,380 --> 00:05:33,900
can be attributed to uh the fact that

148
00:05:33,900 --> 00:05:37,740
the number of operations in the number

149
00:05:37,740 --> 00:05:43,979
of operations in the arithmetic uh do um

150
00:05:43,979 --> 00:05:45,300
the number of operations in the

151
00:05:45,300 --> 00:05:47,759
arithmetic are not as as little as they

152
00:05:47,759 --> 00:05:50,039
were in the plane so

153
00:05:50,039 --> 00:05:52,740
um but there but that is not entirely

154
00:05:52,740 --> 00:05:54,539
going to be a problem as we'll see in a

155
00:05:54,539 --> 00:05:55,560
bit

156
00:05:55,560 --> 00:05:56,759
um the other thing is that the

157
00:05:56,759 --> 00:05:59,280
multiplicative depth of uh the

158
00:05:59,280 --> 00:06:02,940
arithmetic again solely depends on K uh

159
00:06:02,940 --> 00:06:06,419
the weight of the uh strings so that

160
00:06:06,419 --> 00:06:08,580
allows us in some cases to use smaller

161
00:06:08,580 --> 00:06:12,000
parameters which uh benefits us which

162
00:06:12,000 --> 00:06:14,400
helps runtime

163
00:06:14,400 --> 00:06:17,940
now uh like I said the the number of

164
00:06:17,940 --> 00:06:19,320
multiplications in this case is still

165
00:06:19,320 --> 00:06:21,660
high but all I mentioned up till now was

166
00:06:21,660 --> 00:06:23,759
only using a single thread but if we

167
00:06:23,759 --> 00:06:25,500
were to parallelize we could see that we

168
00:06:25,500 --> 00:06:27,900
could get the massive uh advantage that

169
00:06:27,900 --> 00:06:29,580
we had in the plane

170
00:06:29,580 --> 00:06:31,259
um and this is because just the fact

171
00:06:31,259 --> 00:06:32,819
that the

172
00:06:32,819 --> 00:06:34,380
arithmetic operator has all these

173
00:06:34,380 --> 00:06:36,300
operations that can be paralyzed so as

174
00:06:36,300 --> 00:06:38,340
you can see on in from the lines on the

175
00:06:38,340 --> 00:06:42,479
top the constantly operator has a very

176
00:06:42,479 --> 00:06:44,400
massive speed up maybe can be sped up

177
00:06:44,400 --> 00:06:46,380
like effect by a factor of 10 whereas

178
00:06:46,380 --> 00:06:48,240
the constant whereas the just folklore

179
00:06:48,240 --> 00:06:51,120
operator uh shown in the blue on the

180
00:06:51,120 --> 00:06:53,460
bottom can get at most two times faster

181
00:06:53,460 --> 00:06:55,860
so there with that we get back into the

182
00:06:55,860 --> 00:06:57,960
realm of being like 10 times faster than

183
00:06:57,960 --> 00:06:59,520
the folklore

184
00:06:59,520 --> 00:07:01,680
all right so we have an equality

185
00:07:01,680 --> 00:07:03,479
operator now we can think about building

186
00:07:03,479 --> 00:07:06,000
a PIR protocol from it so just through

187
00:07:06,000 --> 00:07:08,520
jog everyone's memory a PIR protocol is

188
00:07:08,520 --> 00:07:10,199
a protocol we're a user

189
00:07:10,199 --> 00:07:10,979
um

190
00:07:10,979 --> 00:07:13,680
uh is wants to retrieve an element from

191
00:07:13,680 --> 00:07:16,080
a database such that no one can figure

192
00:07:16,080 --> 00:07:19,259
out what element is being retrieved

193
00:07:19,259 --> 00:07:22,080
so there is uh for PIR that you could be

194
00:07:22,080 --> 00:07:23,340
in the single server or multi-server

195
00:07:23,340 --> 00:07:25,319
setting depending on whether one or

196
00:07:25,319 --> 00:07:26,520
multiple servers are holding the

197
00:07:26,520 --> 00:07:28,620
database or we're focusing on the single

198
00:07:28,620 --> 00:07:30,000
server setting here

199
00:07:30,000 --> 00:07:31,620
and then there are variations based on

200
00:07:31,620 --> 00:07:33,780
how you're going to retrieve or refer to

201
00:07:33,780 --> 00:07:35,580
the element you're retrieving in the

202
00:07:35,580 --> 00:07:38,880
database so in in the index PIR case you

203
00:07:38,880 --> 00:07:42,120
refer to your element as an index in a

204
00:07:42,120 --> 00:07:44,699
neatly structured table whereas in

205
00:07:44,699 --> 00:07:47,220
keyword PIR you have this space of or

206
00:07:47,220 --> 00:07:49,800
you have this domain of keywords and

207
00:07:49,800 --> 00:07:52,319
your you want to refer to your element

208
00:07:52,319 --> 00:07:55,139
via a keyword in that space

209
00:07:55,139 --> 00:07:57,060
so for example that could be the the

210
00:07:57,060 --> 00:08:01,380
domain of keywords could be 260 bit 265

211
00:08:01,380 --> 00:08:02,580
bit

212
00:08:02,580 --> 00:08:03,199
um

213
00:08:03,199 --> 00:08:07,620
256-bit identifiers or some file names

214
00:08:07,620 --> 00:08:11,220
now um like up to now index PR has

215
00:08:11,220 --> 00:08:13,020
seemed to be the easier case and there's

216
00:08:13,020 --> 00:08:14,819
been a lot of work on it like clpr and

217
00:08:14,819 --> 00:08:17,460
multi ir and in this structure of the

218
00:08:17,460 --> 00:08:19,379
database actually helps whereas keyword

219
00:08:19,379 --> 00:08:21,900
PIR has been kind of the harder one uh

220
00:08:21,900 --> 00:08:25,020
ever since been ever since it's been uh

221
00:08:25,020 --> 00:08:26,400
proposed

222
00:08:26,400 --> 00:08:28,560
um and then the solutions that kind of

223
00:08:28,560 --> 00:08:30,419
existed were mostly in the form of just

224
00:08:30,419 --> 00:08:32,339
reducing keyword pure backed index pure

225
00:08:32,339 --> 00:08:36,360
via some extra round of communication or

226
00:08:36,360 --> 00:08:38,039
um which would come at some

227
00:08:38,039 --> 00:08:40,380
probabilistic chance of failure whereas

228
00:08:40,380 --> 00:08:42,120
we want to we wanted to find an approach

229
00:08:42,120 --> 00:08:45,720
that didn't have those caveats so uh so

230
00:08:45,720 --> 00:08:47,160
for our protocol the way it would work

231
00:08:47,160 --> 00:08:48,899
is that you have the user that has a

232
00:08:48,899 --> 00:08:50,640
query from this space

233
00:08:50,640 --> 00:08:53,339
um of keywords that it wants to uh that

234
00:08:53,339 --> 00:08:54,839
it wants to retrieve

235
00:08:54,839 --> 00:08:56,940
so it encrypts its query sends it over

236
00:08:56,940 --> 00:08:59,399
now because of the fact we have a faster

237
00:08:59,399 --> 00:09:01,680
quality operator it simply the server

238
00:09:01,680 --> 00:09:03,839
simply compares the user's query to all

239
00:09:03,839 --> 00:09:05,339
the keywords that are actually in the

240
00:09:05,339 --> 00:09:07,140
database not with all of the keywords

241
00:09:07,140 --> 00:09:09,000
that are in the domain but with only the

242
00:09:09,000 --> 00:09:10,260
keywords that are actually in the

243
00:09:10,260 --> 00:09:12,420
database so it performs those

244
00:09:12,420 --> 00:09:14,820
comparisons and then multiplies each of

245
00:09:14,820 --> 00:09:16,440
those so that'll give you a vector of

246
00:09:16,440 --> 00:09:17,820
zeros and ones and then you multiply

247
00:09:17,820 --> 00:09:20,820
that selection Vector into the actual

248
00:09:20,820 --> 00:09:23,220
data corresponding to each keyword and

249
00:09:23,220 --> 00:09:24,240
then you just sum them up kind of like

250
00:09:24,240 --> 00:09:26,700
an inner product which will give you the

251
00:09:26,700 --> 00:09:28,620
um the record that the user was looking

252
00:09:28,620 --> 00:09:30,060
for in encrypted format which you send

253
00:09:30,060 --> 00:09:31,080
back

254
00:09:31,080 --> 00:09:33,660
so in the evaluation the observation was

255
00:09:33,660 --> 00:09:35,700
that this form of Performing PIR using

256
00:09:35,700 --> 00:09:38,040
equality operators performs better and

257
00:09:38,040 --> 00:09:40,200
is more advantageous as the domain grows

258
00:09:40,200 --> 00:09:43,500
larger and larger so in the very in the

259
00:09:43,500 --> 00:09:45,899
case where the database is dense and

260
00:09:45,899 --> 00:09:48,420
it's very similar to index PIR there are

261
00:09:48,420 --> 00:09:50,339
very uh fast state-of-the-art Solutions

262
00:09:50,339 --> 00:09:52,920
but as the database goes uh sparser and

263
00:09:52,920 --> 00:09:54,959
sparser and we approach keyword PIR

264
00:09:54,959 --> 00:09:56,420
those Solutions

265
00:09:56,420 --> 00:09:59,399
won't stand much so

266
00:09:59,399 --> 00:10:02,519
uh that's where constant apir can kick

267
00:10:02,519 --> 00:10:03,480
in

268
00:10:03,480 --> 00:10:05,459
uh so this can be attributed to the fact

269
00:10:05,459 --> 00:10:07,140
that if you were to count the number of

270
00:10:07,140 --> 00:10:09,600
particularly homomorphic operations uh

271
00:10:09,600 --> 00:10:11,040
you're doing during the protocol you can

272
00:10:11,040 --> 00:10:13,800
see that the um the number of operations

273
00:10:13,800 --> 00:10:16,320
that previous protocols perform in the

274
00:10:16,320 --> 00:10:17,700
main part of their protocol actually

275
00:10:17,700 --> 00:10:20,279
depends on the domain that you're

276
00:10:20,279 --> 00:10:22,260
operating over so like the 256-bit

277
00:10:22,260 --> 00:10:25,140
identifiers whereas in a console apir

278
00:10:25,140 --> 00:10:27,180
the number of operations actually

279
00:10:27,180 --> 00:10:28,620
depends on just the elements they

280
00:10:28,620 --> 00:10:30,240
actually have in the database so that's

281
00:10:30,240 --> 00:10:32,880
why Spar City in the database makes

282
00:10:32,880 --> 00:10:35,399
constant apir perform better

283
00:10:35,399 --> 00:10:38,040
now we're using this representation

284
00:10:38,040 --> 00:10:41,160
um for for these keywords

285
00:10:41,160 --> 00:10:42,779
um and we're we have all this focus on

286
00:10:42,779 --> 00:10:44,459
multiplicative depth now the analysis

287
00:10:44,459 --> 00:10:46,200
shows that

288
00:10:46,200 --> 00:10:47,880
um because we have this focus on

289
00:10:47,880 --> 00:10:50,040
multiplicative depth if um you were to

290
00:10:50,040 --> 00:10:51,839
aim for a very specific multiplicative

291
00:10:51,839 --> 00:10:54,120
depth for some purpose in this case PIR

292
00:10:54,120 --> 00:10:56,279
you can see that the representations

293
00:10:56,279 --> 00:10:58,260
that we are using compared to the

294
00:10:58,260 --> 00:11:00,000
representation that the previous PIR

295
00:11:00,000 --> 00:11:04,320
Works have used uh our representation is

296
00:11:04,320 --> 00:11:05,940
smaller for the same multiplicative

297
00:11:05,940 --> 00:11:07,260
depth if you take one of these graphs

298
00:11:07,260 --> 00:11:09,000
for example the one on the left you can

299
00:11:09,000 --> 00:11:11,820
see the the red Trend being though the

300
00:11:11,820 --> 00:11:13,620
representation size that we're using

301
00:11:13,620 --> 00:11:14,700
compared to the blue which is

302
00:11:14,700 --> 00:11:16,800
representation the size that the

303
00:11:16,800 --> 00:11:18,660
previous work was using you can see that

304
00:11:18,660 --> 00:11:20,940
the constant wave representation is

305
00:11:20,940 --> 00:11:22,620
consistently smaller for a given

306
00:11:22,620 --> 00:11:25,459
multiplicative depth

307
00:11:25,980 --> 00:11:29,940
um all right so to to kind of finish off

308
00:11:29,940 --> 00:11:32,459
so the the final aspect uh that I want

309
00:11:32,459 --> 00:11:34,079
to talk about in which Constable API is

310
00:11:34,079 --> 00:11:36,540
beneficial is when we are returning

311
00:11:36,540 --> 00:11:39,540
larger responses to the user so we have

312
00:11:39,540 --> 00:11:42,959
to work in this in quantized ciphertext

313
00:11:42,959 --> 00:11:46,860
in PIR now if the response is larger if

314
00:11:46,860 --> 00:11:48,360
the records that the user wants to

315
00:11:48,360 --> 00:11:50,760
retrieve is larger than

316
00:11:50,760 --> 00:11:51,779
um one

317
00:11:51,779 --> 00:11:53,820
erect one Cipher text you would have to

318
00:11:53,820 --> 00:11:55,680
send multiple Cipher texts

319
00:11:55,680 --> 00:11:57,120
um so previous work when you wanted to

320
00:11:57,120 --> 00:11:58,500
do that for each side protects you

321
00:11:58,500 --> 00:11:59,640
wanted to return you would probably have

322
00:11:59,640 --> 00:12:01,980
to redo the whole protocol whereas in

323
00:12:01,980 --> 00:12:03,660
constant apir we can you can do the bulk

324
00:12:03,660 --> 00:12:06,120
of the computation uh up front and then

325
00:12:06,120 --> 00:12:07,860
each ciphertext that you want to send

326
00:12:07,860 --> 00:12:10,620
back is just a marginal cost which is

327
00:12:10,620 --> 00:12:12,000
shown in the red graph which is

328
00:12:12,000 --> 00:12:14,040
constantly PR that grows slower compared

329
00:12:14,040 --> 00:12:16,260
to the blue Trend which is uh some of

330
00:12:16,260 --> 00:12:18,120
the previous work

331
00:12:18,120 --> 00:12:20,700
um so if you're returning about 250

332
00:12:20,700 --> 00:12:22,980
kilobytes of data at that point it's

333
00:12:22,980 --> 00:12:26,100
good to use this form of PIR using

334
00:12:26,100 --> 00:12:27,600
equality operators

335
00:12:27,600 --> 00:12:30,480
right so to wrap up

336
00:12:30,480 --> 00:12:32,700
um I introduced consulate equality

337
00:12:32,700 --> 00:12:36,180
operators which are suitable equality

338
00:12:36,180 --> 00:12:38,579
operators to use with homomorphic

339
00:12:38,579 --> 00:12:41,640
encryption and uh are much faster than

340
00:12:41,640 --> 00:12:44,220
the existing quality operators

341
00:12:44,220 --> 00:12:46,320
um and then I'm using that I introduce

342
00:12:46,320 --> 00:12:47,820
constant weight keyword PIR using

343
00:12:47,820 --> 00:12:50,459
quality operators which performed PR in

344
00:12:50,459 --> 00:12:52,920
a single round is faster for sparser

345
00:12:52,920 --> 00:12:56,639
databases uh essentially keyword PIR and

346
00:12:56,639 --> 00:12:59,160
it's faster when the response size is

347
00:12:59,160 --> 00:13:00,660
large

348
00:13:00,660 --> 00:13:02,880
so uh our code is also available on

349
00:13:02,880 --> 00:13:04,139
GitHub I invite you to take a look and

350
00:13:04,139 --> 00:13:06,120
run it for yourself and yeah I'd be

351
00:13:06,120 --> 00:13:09,320
happy to take any questions thank you

