1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:08,720 --> 00:00:11,580
indeed I am Alex I'm a PhD student at

3
00:00:11,580 --> 00:00:13,559
Stanford I study cryptography and formal

4
00:00:13,559 --> 00:00:15,059
methods and today I'm going to be

5
00:00:15,059 --> 00:00:16,320
telling you about a new cryptographic

6
00:00:16,320 --> 00:00:17,160
primitive

7
00:00:17,160 --> 00:00:18,720
we're calling it a collaborative ZK

8
00:00:18,720 --> 00:00:20,760
snark it supports zero knowledge proofs

9
00:00:20,760 --> 00:00:22,920
for distributed secrets

10
00:00:22,920 --> 00:00:24,960
traditionally zero knowledge applies to

11
00:00:24,960 --> 00:00:27,119
localized information consider for

12
00:00:27,119 --> 00:00:29,460
example authentication in this scenario

13
00:00:29,460 --> 00:00:31,380
some client wants to show to a server

14
00:00:31,380 --> 00:00:34,500
that the client has the right secret key

15
00:00:34,500 --> 00:00:36,360
in this case the secret information is

16
00:00:36,360 --> 00:00:37,920
the secret key and it's held by one

17
00:00:37,920 --> 00:00:39,660
party so traditional zero knowledge

18
00:00:39,660 --> 00:00:43,200
tools apply and indeed a ZK snark like

19
00:00:43,200 --> 00:00:45,000
Jess was working with would suffice to

20
00:00:45,000 --> 00:00:47,040
solve this problem

21
00:00:47,040 --> 00:00:49,079
however not all secret information is

22
00:00:49,079 --> 00:00:51,539
localized consider another scenario a

23
00:00:51,539 --> 00:00:53,160
collection of banks have evidence that

24
00:00:53,160 --> 00:00:55,920
some entity Eve has obtained a ransom

25
00:00:55,920 --> 00:00:58,079
paid by Colonial pipeline

26
00:00:58,079 --> 00:01:00,059
and these Banks want to prove that that

27
00:01:00,059 --> 00:01:01,739
statement is true this amounts to

28
00:01:01,739 --> 00:01:04,379
showing the existence of oops of a

29
00:01:04,379 --> 00:01:06,060
certain kind of path in the global

30
00:01:06,060 --> 00:01:07,860
transaction graph

31
00:01:07,860 --> 00:01:09,540
and the challenge here is that the

32
00:01:09,540 --> 00:01:10,979
global transaction graph is probably not

33
00:01:10,979 --> 00:01:12,540
public different entities are aware of

34
00:01:12,540 --> 00:01:14,460
different edges and so the existence of

35
00:01:14,460 --> 00:01:17,400
this path is a property of distributed

36
00:01:17,400 --> 00:01:19,560
secret information

37
00:01:19,560 --> 00:01:22,500
even if even if the secret information

38
00:01:22,500 --> 00:01:24,540
is not initially distributed like it is

39
00:01:24,540 --> 00:01:26,340
here you might want to distribute it for

40
00:01:26,340 --> 00:01:28,080
other reasons perhaps you have some

41
00:01:28,080 --> 00:01:29,460
entity that wants to write a zero

42
00:01:29,460 --> 00:01:30,840
knowledge proof but as we heard this is

43
00:01:30,840 --> 00:01:32,460
expensive so maybe the entity wants to

44
00:01:32,460 --> 00:01:34,500
secret share its data among a collection

45
00:01:34,500 --> 00:01:36,360
of helpful servers and solicit their

46
00:01:36,360 --> 00:01:38,640
help in writing the proof once again we

47
00:01:38,640 --> 00:01:40,140
end up in a situation where the secret

48
00:01:40,140 --> 00:01:41,759
knowledge is distributed among different

49
00:01:41,759 --> 00:01:43,079
parties

50
00:01:43,079 --> 00:01:44,159
so either way when the secret

51
00:01:44,159 --> 00:01:46,200
information is distributed ZK snarks do

52
00:01:46,200 --> 00:01:47,939
not apply and the contribution of this

53
00:01:47,939 --> 00:01:49,799
work is a primitive a collaboratively

54
00:01:49,799 --> 00:01:52,079
case narc that does apply so first we

55
00:01:52,079 --> 00:01:53,759
give a definition of this primitive

56
00:01:53,759 --> 00:01:55,680
second we give constructions for four

57
00:01:55,680 --> 00:01:57,840
different conventional ZK snarks

58
00:01:57,840 --> 00:01:59,939
we give implementations based on three

59
00:01:59,939 --> 00:02:01,860
of these and finally we evaluate our

60
00:02:01,860 --> 00:02:03,240
implementations

61
00:02:03,240 --> 00:02:05,219
in this evaluation we find a somewhat

62
00:02:05,219 --> 00:02:06,780
surprising fact which is that

63
00:02:06,780 --> 00:02:08,758
collaborative proofs can be just as

64
00:02:08,758 --> 00:02:10,020
efficient as their conventional

65
00:02:10,020 --> 00:02:11,819
counterparts despite the fact that

66
00:02:11,819 --> 00:02:12,780
there's some kind of interactive

67
00:02:12,780 --> 00:02:14,160
protocol

68
00:02:14,160 --> 00:02:16,500
so in this talk I'll tell you about a

69
00:02:16,500 --> 00:02:17,520
little I'll tell you a little bit about

70
00:02:17,520 --> 00:02:19,200
our definition I'll discuss one

71
00:02:19,200 --> 00:02:20,160
technique that we use in the

72
00:02:20,160 --> 00:02:21,900
construction and I'll tell you about one

73
00:02:21,900 --> 00:02:24,660
of the experiments from our evaluation

74
00:02:24,660 --> 00:02:26,940
definitions first what is a

75
00:02:26,940 --> 00:02:28,739
collaborative ZK snark

76
00:02:28,739 --> 00:02:30,300
well it's easiest to understand through

77
00:02:30,300 --> 00:02:32,520
comparison in a conventional ZK snark as

78
00:02:32,520 --> 00:02:34,500
we heard before there's a prover who has

79
00:02:34,500 --> 00:02:37,200
public data denoted X secret data

80
00:02:37,200 --> 00:02:39,599
denoted W and the proof reproduces some

81
00:02:39,599 --> 00:02:41,459
proof that shows that a predicate Phi

82
00:02:41,459 --> 00:02:43,980
holds for this information

83
00:02:43,980 --> 00:02:45,480
in the collaborative setting we just

84
00:02:45,480 --> 00:02:47,220
replaced the single prover with multiple

85
00:02:47,220 --> 00:02:50,099
approvers in this diagram three all the

86
00:02:50,099 --> 00:02:51,480
approvers have access to the public data

87
00:02:51,480 --> 00:02:53,040
but they each have a different piece of

88
00:02:53,040 --> 00:02:56,340
secret data W1 W2 and W3

89
00:02:56,340 --> 00:02:57,959
the idea is that the different provers

90
00:02:57,959 --> 00:03:00,120
interact with one another in order to

91
00:03:00,120 --> 00:03:02,459
construct Pi a single non-interactively

92
00:03:02,459 --> 00:03:05,099
verifiable proof that now shows now

93
00:03:05,099 --> 00:03:07,200
shows some property about the vector of

94
00:03:07,200 --> 00:03:09,000
secrets so syntactically the

95
00:03:09,000 --> 00:03:10,560
generalization is is not very

96
00:03:10,560 --> 00:03:12,360
substantial here we're just moving from

97
00:03:12,360 --> 00:03:14,220
a proving process that's a local

98
00:03:14,220 --> 00:03:16,379
algorithm to one that is an interactive

99
00:03:16,379 --> 00:03:18,959
protocol among the different proofers

100
00:03:18,959 --> 00:03:21,720
so this is all that changes note the

101
00:03:21,720 --> 00:03:23,400
output of the proving protocol is is

102
00:03:23,400 --> 00:03:24,480
still the same it's still a

103
00:03:24,480 --> 00:03:28,159
non-interactively verifiable proof

104
00:03:28,260 --> 00:03:29,700
so this is the syntax what about

105
00:03:29,700 --> 00:03:31,560
security well I'll just talk about one

106
00:03:31,560 --> 00:03:34,440
security property today t0 knowledge

107
00:03:34,440 --> 00:03:36,599
you see in the collaborative setting you

108
00:03:36,599 --> 00:03:37,800
don't just have to worry about the

109
00:03:37,800 --> 00:03:39,300
verifier learning secret information

110
00:03:39,300 --> 00:03:41,220
that it shouldn't learn you also need to

111
00:03:41,220 --> 00:03:43,080
worry about other approvers learning

112
00:03:43,080 --> 00:03:45,000
secret information during the proof

113
00:03:45,000 --> 00:03:46,260
Construction

114
00:03:46,260 --> 00:03:48,959
knowledge rules this out informally it

115
00:03:48,959 --> 00:03:50,640
says that an adversary who controls at

116
00:03:50,640 --> 00:03:52,620
most T approvers should learn nothing

117
00:03:52,620 --> 00:03:55,260
about the other Witnesses beyond the

118
00:03:55,260 --> 00:03:56,459
fact that the Witnesses are collectively

119
00:03:56,459 --> 00:03:58,860
valid pictorially this means that if

120
00:03:58,860 --> 00:04:00,480
there are five provers three of them are

121
00:04:00,480 --> 00:04:02,159
controlled by an adversary

122
00:04:02,159 --> 00:04:03,959
and the protocol has three zero

123
00:04:03,959 --> 00:04:05,819
knowledge or better

124
00:04:05,819 --> 00:04:07,440
this adversary shouldn't learn anything

125
00:04:07,440 --> 00:04:09,420
about Witnesses four and five beyond the

126
00:04:09,420 --> 00:04:10,799
fact that the Witnesses are collectively

127
00:04:10,799 --> 00:04:13,080
valid it's impossible to avoid leaking

128
00:04:13,080 --> 00:04:14,459
validity because the whole point here is

129
00:04:14,459 --> 00:04:16,978
to prove validity in the paper we

130
00:04:16,978 --> 00:04:18,478
formalize this in the style of a

131
00:04:18,478 --> 00:04:20,639
simulation definition we imagine what an

132
00:04:20,639 --> 00:04:22,199
adversary would see and require that

133
00:04:22,199 --> 00:04:24,120
that adversary's view be simulatable

134
00:04:24,120 --> 00:04:25,860
given only the corrupt Witnesses the

135
00:04:25,860 --> 00:04:29,880
public data and the validity bit

136
00:04:29,880 --> 00:04:31,380
so this is one of our security

137
00:04:31,380 --> 00:04:32,699
definitions there are of course more in

138
00:04:32,699 --> 00:04:34,800
the paper let's move on to constructions

139
00:04:34,800 --> 00:04:36,840
before I get into the constructions in

140
00:04:36,840 --> 00:04:39,180
full I need to clarify the scope of the

141
00:04:39,180 --> 00:04:40,500
proof systems that we developed in this

142
00:04:40,500 --> 00:04:41,400
paper

143
00:04:41,400 --> 00:04:43,080
in particular so far I've been talking

144
00:04:43,080 --> 00:04:45,000
about an abstract predicate and Abstract

145
00:04:45,000 --> 00:04:46,440
Witnesses

146
00:04:46,440 --> 00:04:47,400
um and of course that's not something

147
00:04:47,400 --> 00:04:48,780
that you can build a proof system for so

148
00:04:48,780 --> 00:04:51,000
in particular we assume a pre-processing

149
00:04:51,000 --> 00:04:52,919
phase where we compile the predicate

150
00:04:52,919 --> 00:04:55,080
from whatever arbitrary form it has

151
00:04:55,080 --> 00:04:57,180
originally into a specific format called

152
00:04:57,180 --> 00:04:59,520
r1cs the same format that traditional

153
00:04:59,520 --> 00:05:01,680
zero knowledge proofs use

154
00:05:01,680 --> 00:05:03,720
moreover this compiler outputs an

155
00:05:03,720 --> 00:05:05,759
encoder which transforms the witnesses

156
00:05:05,759 --> 00:05:07,620
from their original distributed form

157
00:05:07,620 --> 00:05:09,720
into an r1cs witness that is secret

158
00:05:09,720 --> 00:05:11,280
shared among the prover

159
00:05:11,280 --> 00:05:12,900
and then once you have this the R1 sales

160
00:05:12,900 --> 00:05:14,400
predicate and the secret shared R1 sales

161
00:05:14,400 --> 00:05:15,960
Witnesses this is where our work comes

162
00:05:15,960 --> 00:05:17,820
into the picture we essentially develop

163
00:05:17,820 --> 00:05:19,620
collaborative ZK snarks for secret

164
00:05:19,620 --> 00:05:21,900
shared r1cs Witnesses this kind of

165
00:05:21,900 --> 00:05:23,759
division as I said is standard this is

166
00:05:23,759 --> 00:05:26,340
how conventional ZK snarks work and the

167
00:05:26,340 --> 00:05:27,720
advantage of it is it separates the

168
00:05:27,720 --> 00:05:29,699
details of a particular relation from

169
00:05:29,699 --> 00:05:30,960
how you go about building the proof

170
00:05:30,960 --> 00:05:32,880
system a division of concerns if you

171
00:05:32,880 --> 00:05:33,720
would

172
00:05:33,720 --> 00:05:35,400
the one difference in how this division

173
00:05:35,400 --> 00:05:37,919
works in our scenario is that the

174
00:05:37,919 --> 00:05:40,800
encoder is now a multi-party protocol

175
00:05:40,800 --> 00:05:42,419
okay but that aside focusing on the

176
00:05:42,419 --> 00:05:44,280
green box how do we construct a

177
00:05:44,280 --> 00:05:45,960
collaborative proof uh for secret shared

178
00:05:45,960 --> 00:05:47,639
r1cs Witnesses well I'll tell you about

179
00:05:47,639 --> 00:05:50,460
just one of the techniques that we use

180
00:05:50,460 --> 00:05:51,840
um well or sorry first of all I'll

181
00:05:51,840 --> 00:05:53,639
discuss the general approach so the

182
00:05:53,639 --> 00:05:54,780
general approach here is actually

183
00:05:54,780 --> 00:05:56,880
somewhat immediate there exists general

184
00:05:56,880 --> 00:05:59,100
purpose MPC multi-party computation

185
00:05:59,100 --> 00:06:01,259
protocols for evaluating any computation

186
00:06:01,259 --> 00:06:02,940
over secret shared data at least in

187
00:06:02,940 --> 00:06:04,500
theory so we should just take one of

188
00:06:04,500 --> 00:06:05,940
those protocols and run it on the snark

189
00:06:05,940 --> 00:06:08,280
prover

190
00:06:08,280 --> 00:06:10,440
what goes wrong well the thing is that

191
00:06:10,440 --> 00:06:12,539
this could be wildly inefficient both

192
00:06:12,539 --> 00:06:15,000
MPC and snarks are known for being slow

193
00:06:15,000 --> 00:06:17,639
uh ballpark a thousand times slower than

194
00:06:17,639 --> 00:06:19,560
the underlying computation and so the

195
00:06:19,560 --> 00:06:21,660
fear is that this composition might be a

196
00:06:21,660 --> 00:06:23,100
million times slower than the underlying

197
00:06:23,100 --> 00:06:25,080
computation which we think would be

198
00:06:25,080 --> 00:06:27,000
impractical for almost every application

199
00:06:27,000 --> 00:06:28,680
and so the question is whether or not

200
00:06:28,680 --> 00:06:30,180
there's some way of affecting this

201
00:06:30,180 --> 00:06:32,580
composition perhaps by customizing the

202
00:06:32,580 --> 00:06:34,500
MVC protocol in order to get better

203
00:06:34,500 --> 00:06:37,139
overhead smaller overhead and indeed our

204
00:06:37,139 --> 00:06:38,520
construction show that that is possible

205
00:06:38,520 --> 00:06:40,440
in some sense these overheads they don't

206
00:06:40,440 --> 00:06:42,660
need to multiply they can add and we end

207
00:06:42,660 --> 00:06:44,759
up with overhead more on the order of a

208
00:06:44,759 --> 00:06:46,979
thousand or two thousand

209
00:06:46,979 --> 00:06:49,020
so how do we do that like I said I don't

210
00:06:49,020 --> 00:06:50,280
really have time to go into all the

211
00:06:50,280 --> 00:06:51,600
details today but I'll tell you about

212
00:06:51,600 --> 00:06:54,060
one of the techniques that we use

213
00:06:54,060 --> 00:06:55,979
which is how we handle elliptic curve

214
00:06:55,979 --> 00:06:57,180
operations

215
00:06:57,180 --> 00:06:59,100
in many ZK snarks elliptic curve

216
00:06:59,100 --> 00:07:00,840
operations are the bottleneck at least

217
00:07:00,840 --> 00:07:02,580
in most parameter regimes a

218
00:07:02,580 --> 00:07:04,500
representative operation is taking curve

219
00:07:04,500 --> 00:07:07,020
points G and H and adding them together

220
00:07:07,020 --> 00:07:09,120
in the elliptic curve

221
00:07:09,120 --> 00:07:11,400
how could you handle this in an MPC

222
00:07:11,400 --> 00:07:13,440
well many MPC protocols have native

223
00:07:13,440 --> 00:07:15,240
support for field operations and

224
00:07:15,240 --> 00:07:16,800
elliptic curves can be represented in

225
00:07:16,800 --> 00:07:18,720
terms of field coordinates so a natural

226
00:07:18,720 --> 00:07:20,460
approach is to represent these curve

227
00:07:20,460 --> 00:07:23,160
points as their coordinates in a finite

228
00:07:23,160 --> 00:07:25,560
field to secret share those coordinates

229
00:07:25,560 --> 00:07:27,780
in the MPC for example if you're using

230
00:07:27,780 --> 00:07:29,039
additive sharing you might represent

231
00:07:29,039 --> 00:07:32,099
coordinate a as values A1 and A2 held by

232
00:07:32,099 --> 00:07:33,419
two different entities such that these

233
00:07:33,419 --> 00:07:35,819
values sum to a

234
00:07:35,819 --> 00:07:37,919
if you go down this pathway then what

235
00:07:37,919 --> 00:07:39,960
you have to do is inside the MPC you

236
00:07:39,960 --> 00:07:41,759
have to evaluate the formulas to find

237
00:07:41,759 --> 00:07:43,080
over the coordinates that give you the

238
00:07:43,080 --> 00:07:44,880
coordinates of the sum and the challenge

239
00:07:44,880 --> 00:07:46,440
is that this is very inefficient because

240
00:07:46,440 --> 00:07:49,259
those formulas are non-linear in NPC

241
00:07:49,259 --> 00:07:51,060
protocols that turns out are just less

242
00:07:51,060 --> 00:07:53,819
efficient on nonlinear computations

243
00:07:53,819 --> 00:07:55,919
so we do not take this approach we do

244
00:07:55,919 --> 00:07:57,599
not secret share the coordinates instead

245
00:07:57,599 --> 00:07:59,280
we secret share the curve points

246
00:07:59,280 --> 00:08:01,440
directly you might imagine if you were

247
00:08:01,440 --> 00:08:02,819
using an additive sharing scheme

248
00:08:02,819 --> 00:08:05,340
representing a curve Point G as two

249
00:08:05,340 --> 00:08:08,099
curve points G1 and G2 which add in the

250
00:08:08,099 --> 00:08:11,580
elliptic curve sense of the word 2G

251
00:08:11,580 --> 00:08:14,220
if you take this additive approach then

252
00:08:14,220 --> 00:08:15,720
Computing the addition of two secret

253
00:08:15,720 --> 00:08:17,280
shared curve points is very easy in fact

254
00:08:17,280 --> 00:08:19,680
it's a local computation each entity

255
00:08:19,680 --> 00:08:22,620
just adds its shares of the sum hens

256
00:08:22,620 --> 00:08:24,240
of course the protocols that we build on

257
00:08:24,240 --> 00:08:25,379
the MBC protocols they don't use

258
00:08:25,379 --> 00:08:26,460
additive sharing they're a little bit

259
00:08:26,460 --> 00:08:27,780
more advanced than that but the

260
00:08:27,780 --> 00:08:29,580
intuition from additive sharing carries

261
00:08:29,580 --> 00:08:31,680
over previous researchers in fact have

262
00:08:31,680 --> 00:08:33,899
shown that techniques like this work for

263
00:08:33,899 --> 00:08:36,719
the speeds MPC and we observe that they

264
00:08:36,719 --> 00:08:39,059
also work for the GSC MPC which was

265
00:08:39,059 --> 00:08:41,880
presented at crypto two years ago

266
00:08:41,880 --> 00:08:43,620
so this is one of the techniques we use

267
00:08:43,620 --> 00:08:44,880
and it turns out that techniques like

268
00:08:44,880 --> 00:08:46,620
this end up making collaborative ZK

269
00:08:46,620 --> 00:08:48,839
snarks very efficient in practice and

270
00:08:48,839 --> 00:08:49,740
I'll show you just one of the

271
00:08:49,740 --> 00:08:51,120
experiments that we performed in order

272
00:08:51,120 --> 00:08:52,560
to show that

273
00:08:52,560 --> 00:08:54,420
in this experiment we're going to look

274
00:08:54,420 --> 00:08:56,820
at just collaborative ZK snarks based on

275
00:08:56,820 --> 00:08:59,459
the grot16 proof system running over a

276
00:08:59,459 --> 00:09:01,200
high capacity link three gigabits per

277
00:09:01,200 --> 00:09:02,279
second this is what you can get inside

278
00:09:02,279 --> 00:09:04,019
of a data center this is what you can

279
00:09:04,019 --> 00:09:06,839
get over a lan right now on the plot I

280
00:09:06,839 --> 00:09:08,459
only have our Baseline this is a single

281
00:09:08,459 --> 00:09:09,660
prover proof so it's not it's not

282
00:09:09,660 --> 00:09:11,100
collaborative in fact this was

283
00:09:11,100 --> 00:09:12,680
implemented by someone else not by us

284
00:09:12,680 --> 00:09:15,899
the x-axis as it goes to the right we

285
00:09:15,899 --> 00:09:17,399
increase the complexity of the statement

286
00:09:17,399 --> 00:09:19,560
being proved and that causes proving to

287
00:09:19,560 --> 00:09:22,200
take longer the relationship is more or

288
00:09:22,200 --> 00:09:24,180
less linear let's see how a

289
00:09:24,180 --> 00:09:25,980
collaborative proof does so our

290
00:09:25,980 --> 00:09:27,959
implementation for two provers with zero

291
00:09:27,959 --> 00:09:30,019
knowledge against one of them so one ZK

292
00:09:30,019 --> 00:09:32,820
takes this long to prove what you can

293
00:09:32,820 --> 00:09:34,200
see is when the number of rank one

294
00:09:34,200 --> 00:09:36,360
constraints gets sufficiently large the

295
00:09:36,360 --> 00:09:37,740
collaborative proof is only two times

296
00:09:37,740 --> 00:09:41,040
slower than the Baseline and for three

297
00:09:41,040 --> 00:09:42,600
provers with two zero knowledge you see

298
00:09:42,600 --> 00:09:44,339
exactly the same behavior slightly more

299
00:09:44,339 --> 00:09:47,100
overhead at low statement complexities

300
00:09:47,100 --> 00:09:49,320
when you lower the zero knowledge

301
00:09:49,320 --> 00:09:50,519
threshold so if you consider three

302
00:09:50,519 --> 00:09:52,380
provers with zero knowledge against only

303
00:09:52,380 --> 00:09:54,120
one malicious proofer

304
00:09:54,120 --> 00:09:56,339
uh we see essentially no overhead at

305
00:09:56,339 --> 00:09:58,920
high constraint counts so synthesizing

306
00:09:58,920 --> 00:10:00,779
the the pattern here it turns out that

307
00:10:00,779 --> 00:10:02,040
the relevant question is whether or not

308
00:10:02,040 --> 00:10:03,600
the zero knowledge threshold is low

309
00:10:03,600 --> 00:10:05,519
enough that we can assume the majority

310
00:10:05,519 --> 00:10:07,320
of the parties are honest the majority

311
00:10:07,320 --> 00:10:09,899
of the proofers are honest and if that

312
00:10:09,899 --> 00:10:12,060
is the case then we can use an honest

313
00:10:12,060 --> 00:10:14,040
majority protocol GSC we incur

314
00:10:14,040 --> 00:10:15,779
essentially no slowdown at high

315
00:10:15,779 --> 00:10:16,920
constraint at high numbers of

316
00:10:16,920 --> 00:10:18,300
constraints and if that's not the case

317
00:10:18,300 --> 00:10:20,100
we have to fall back to speeds and we

318
00:10:20,100 --> 00:10:22,200
eat the 2x Slowdown

319
00:10:22,200 --> 00:10:24,060
I want to emphasize that both of these

320
00:10:24,060 --> 00:10:26,160
slowdowns are very good typically secure

321
00:10:26,160 --> 00:10:28,800
multi-party computation is 100 to 10 000

322
00:10:28,800 --> 00:10:30,600
times slower than local computation and

323
00:10:30,600 --> 00:10:33,720
we're obviously not seeing that here

324
00:10:33,720 --> 00:10:35,339
so this has just been a whirlwind tour

325
00:10:35,339 --> 00:10:36,660
of the project of course there's more in

326
00:10:36,660 --> 00:10:38,820
the paper we give precise definitions we

327
00:10:38,820 --> 00:10:40,320
give constructions from four different

328
00:10:40,320 --> 00:10:42,420
conventional proof systems we also give

329
00:10:42,420 --> 00:10:44,519
a whole host of implementations we're

330
00:10:44,519 --> 00:10:45,839
able to do so many implementations

331
00:10:45,839 --> 00:10:47,519
because we come up with a kind of a cute

332
00:10:47,519 --> 00:10:49,320
technique that allows us to take

333
00:10:49,320 --> 00:10:51,600
conventional ZK snark proofers proofers

334
00:10:51,600 --> 00:10:53,700
that maybe we didn't even Implement and

335
00:10:53,700 --> 00:10:55,380
automatically or nearly automatically

336
00:10:55,380 --> 00:10:58,200
lift them into interactive protocols

337
00:10:58,200 --> 00:11:00,000
we then take all those implementations

338
00:11:00,000 --> 00:11:01,680
we evaluate them we include large

339
00:11:01,680 --> 00:11:03,420
numbers of parties and and poorer

340
00:11:03,420 --> 00:11:04,680
networks than the one that we are just

341
00:11:04,680 --> 00:11:05,640
discussing

342
00:11:05,640 --> 00:11:08,339
we even show a conditional communication

343
00:11:08,339 --> 00:11:10,320
complexity lower bound so we show that

344
00:11:10,320 --> 00:11:11,940
if you're working with just two parties

345
00:11:11,940 --> 00:11:14,100
you're using additive secret sharing and

346
00:11:14,100 --> 00:11:15,779
your ZK snark satisfies a natural

347
00:11:15,779 --> 00:11:17,339
property then the amount of

348
00:11:17,339 --> 00:11:18,959
communication that you need to do in

349
00:11:18,959 --> 00:11:20,700
order to construct

350
00:11:20,700 --> 00:11:23,100
um a collaborative ZK snark is going to

351
00:11:23,100 --> 00:11:24,720
be at least linear in the number of rank

352
00:11:24,720 --> 00:11:27,120
one constraints asymptotically some of

353
00:11:27,120 --> 00:11:28,620
our constructions meet that bound so

354
00:11:28,620 --> 00:11:30,240
that shows that in a very limited and

355
00:11:30,240 --> 00:11:31,800
partial sense they are asymptotically

356
00:11:31,800 --> 00:11:33,420
optimal

357
00:11:33,420 --> 00:11:35,220
okay so this is the end I've been

358
00:11:35,220 --> 00:11:36,480
telling you about collaborative ZK

359
00:11:36,480 --> 00:11:38,339
snarks they support zero knowledge

360
00:11:38,339 --> 00:11:39,959
proofs for distributed Secrets if you

361
00:11:39,959 --> 00:11:41,519
forget everything else from the talk you

362
00:11:41,519 --> 00:11:42,839
should remember that these systems can

363
00:11:42,839 --> 00:11:45,000
be very efficient even if you want full

364
00:11:45,000 --> 00:11:46,800
zero knowledge the Slowdown can be as

365
00:11:46,800 --> 00:11:49,200
good as only 2X and as a final

366
00:11:49,200 --> 00:11:50,820
reflective note it's interesting to

367
00:11:50,820 --> 00:11:53,339
think about why collaborative proofs are

368
00:11:53,339 --> 00:11:54,420
so efficient

369
00:11:54,420 --> 00:11:56,940
as I said generally speaking secure

370
00:11:56,940 --> 00:11:58,980
distributed computation is far slower

371
00:11:58,980 --> 00:12:01,380
than local computation we're not seeing

372
00:12:01,380 --> 00:12:03,300
that here and it's interesting to think

373
00:12:03,300 --> 00:12:04,920
about whether one might be able to

374
00:12:04,920 --> 00:12:06,779
design collaborative versions of other

375
00:12:06,779 --> 00:12:08,399
crypto systems that would have

376
00:12:08,399 --> 00:12:10,680
performance that is similarly good I

377
00:12:10,680 --> 00:12:13,019
suspect that the answer is yes anyways

378
00:12:13,019 --> 00:12:14,100
it's been a pleasure telling you about

379
00:12:14,100 --> 00:12:15,720
this and I'll do my best to answer any

380
00:12:15,720 --> 00:12:18,380
questions that you have

