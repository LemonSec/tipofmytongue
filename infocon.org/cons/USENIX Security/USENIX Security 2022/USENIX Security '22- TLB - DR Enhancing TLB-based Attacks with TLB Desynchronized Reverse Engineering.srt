1
00:00:07,760 --> 00:00:10,260
so yeah I'll be presenting our word

2
00:00:10,260 --> 00:00:13,280
tobdr which is about reverse engineering

3
00:00:13,280 --> 00:00:16,020
tob's translation leukocyte buffers from

4
00:00:16,020 --> 00:00:17,279
software

5
00:00:17,279 --> 00:00:20,640
so uh we'll be discussing another way to

6
00:00:20,640 --> 00:00:24,359
reverse engineer tobs and I'll discuss

7
00:00:24,359 --> 00:00:26,340
the results that we obtained on Intel

8
00:00:26,340 --> 00:00:28,260
tubes which includes previously

9
00:00:28,260 --> 00:00:30,240
undocumented properties

10
00:00:30,240 --> 00:00:33,719
and we'll discuss how you can use this

11
00:00:33,719 --> 00:00:36,180
knowledge to improve attacks that rely

12
00:00:36,180 --> 00:00:38,399
on top interaction

13
00:00:38,399 --> 00:00:40,500
so it's probably everyone knows CPU

14
00:00:40,500 --> 00:00:42,300
support virtual memory so whenever a

15
00:00:42,300 --> 00:00:44,700
virtual address is encountered we have

16
00:00:44,700 --> 00:00:45,960
to perform a translation to physical

17
00:00:45,960 --> 00:00:47,160
memory

18
00:00:47,160 --> 00:00:49,620
and this is called a page walk and the

19
00:00:49,620 --> 00:00:51,800
page walk in the involves multiple

20
00:00:51,800 --> 00:00:54,239
accesses domain memory because these

21
00:00:54,239 --> 00:00:57,840
page tables are multi uh leveled

22
00:00:57,840 --> 00:01:00,480
and because this is a slow process CPUs

23
00:01:00,480 --> 00:01:02,520
embody a cache called a translation

24
00:01:02,520 --> 00:01:06,119
looks at buffer or tlb that cache has

25
00:01:06,119 --> 00:01:07,920
recently completed translation so that

26
00:01:07,920 --> 00:01:09,659
on subsequent accesses to the same

27
00:01:09,659 --> 00:01:12,960
virtual address we do not require an

28
00:01:12,960 --> 00:01:14,939
additional page walk

29
00:01:14,939 --> 00:01:17,400
so on Intel the Tob has the following

30
00:01:17,400 --> 00:01:20,580
topology we have a dedicated dtlb for

31
00:01:20,580 --> 00:01:22,860
data loads and an Italy for instruction

32
00:01:22,860 --> 00:01:25,200
fetches and only if there's no

33
00:01:25,200 --> 00:01:27,299
translation available in the level 1 Tob

34
00:01:27,299 --> 00:01:30,299
will the CPU consult the level 2 sdob

35
00:01:30,299 --> 00:01:32,100
which is Unified between data loads and

36
00:01:32,100 --> 00:01:34,200
instruction fetches when there's no

37
00:01:34,200 --> 00:01:35,820
translation available in the St you'll

38
00:01:35,820 --> 00:01:38,400
be done a page for page walk will be

39
00:01:38,400 --> 00:01:39,900
necessary

40
00:01:39,900 --> 00:01:42,600
so tobs are typically set associative

41
00:01:42,600 --> 00:01:43,700
structures

42
00:01:43,700 --> 00:01:46,439
so that the virtual Adder is

43
00:01:46,439 --> 00:01:48,420
deterministically maps to one of those

44
00:01:48,420 --> 00:01:50,820
sets and within a set there are a number

45
00:01:50,820 --> 00:01:52,500
of ways and the translation can occupy

46
00:01:52,500 --> 00:01:55,380
any of those ways

47
00:01:55,380 --> 00:01:58,560
although the Tob is very uh good for

48
00:01:58,560 --> 00:02:00,600
performance it can also be used in a

49
00:02:00,600 --> 00:02:02,939
malicious way and that is because the

50
00:02:02,939 --> 00:02:04,619
Tob is a shared hardware structure

51
00:02:04,619 --> 00:02:07,979
between processes that uh that run the

52
00:02:07,979 --> 00:02:10,020
same CPU core for example sibling hybrid

53
00:02:10,020 --> 00:02:12,840
hyper threats so if a process makes

54
00:02:12,840 --> 00:02:14,940
secret dependent accesses then the Tob

55
00:02:14,940 --> 00:02:16,800
States could become dependent on that

56
00:02:16,800 --> 00:02:19,020
secret and because the tubes can be

57
00:02:19,020 --> 00:02:21,560
sampled by another process

58
00:02:21,560 --> 00:02:24,840
by timing the axis right the top hits

59
00:02:24,840 --> 00:02:28,680
will be faster than a page walk

60
00:02:28,680 --> 00:02:30,660
um this secret can be inferred by

61
00:02:30,660 --> 00:02:33,000
another process so previous work Tio

62
00:02:33,000 --> 00:02:35,640
bleeds show that it's possible to leak a

63
00:02:35,640 --> 00:02:39,000
cryptographic key over the dtob

64
00:02:39,000 --> 00:02:40,739
and although this worked by grass at all

65
00:02:40,739 --> 00:02:43,560
reverse engineered some Intel Tob

66
00:02:43,560 --> 00:02:45,959
properties there's still some uh there

67
00:02:45,959 --> 00:02:47,459
were still some properties that remained

68
00:02:47,459 --> 00:02:50,160
unknown and that's what we looked at in

69
00:02:50,160 --> 00:02:51,120
this paper

70
00:02:51,120 --> 00:02:54,239
and to reverse engineer tobs we used to

71
00:02:54,239 --> 00:02:56,099
be desynchronization

72
00:02:56,099 --> 00:02:58,800
and this relies on the property that

73
00:02:58,800 --> 00:03:01,700
tobs are non-coherent meaning that

74
00:03:01,700 --> 00:03:04,140
whenever the page tables are changed so

75
00:03:04,140 --> 00:03:05,580
a mapping from a virtual address to a

76
00:03:05,580 --> 00:03:08,040
physical address then the tub requires

77
00:03:08,040 --> 00:03:10,920
explicit invalidation and if the kernel

78
00:03:10,920 --> 00:03:13,140
fails to do so then we could read or

79
00:03:13,140 --> 00:03:16,019
execute from a uh from a wrong physical

80
00:03:16,019 --> 00:03:18,120
address because a still translation is

81
00:03:18,120 --> 00:03:20,220
used so here you can see how that looks

82
00:03:20,220 --> 00:03:23,159
we have a virtual address a that is

83
00:03:23,159 --> 00:03:26,340
mapped to physical address X1 if we read

84
00:03:26,340 --> 00:03:28,860
or execute from a then the tub will

85
00:03:28,860 --> 00:03:31,980
cache this this translation so that on

86
00:03:31,980 --> 00:03:35,220
subsequent accesses we have a tlb hit

87
00:03:35,220 --> 00:03:37,980
but if we directly afterwards change the

88
00:03:37,980 --> 00:03:40,440
page table mappings so that a now maps

89
00:03:40,440 --> 00:03:42,959
to X2 then we get a desynchronized

90
00:03:42,959 --> 00:03:45,360
situation where the tub and the page

91
00:03:45,360 --> 00:03:48,180
tables in memory do not agree

92
00:03:48,180 --> 00:03:51,360
so this is normally a bug right but if

93
00:03:51,360 --> 00:03:53,519
we uh we can purposely create this

94
00:03:53,519 --> 00:03:56,040
situation and make sure that these two

95
00:03:56,040 --> 00:03:58,379
physical addresses X1 and X2 contain

96
00:03:58,379 --> 00:04:00,120
easily distinguishable contents one two

97
00:04:00,120 --> 00:04:02,580
three and three two one and now if we

98
00:04:02,580 --> 00:04:04,860
read from virtual address a we can

99
00:04:04,860 --> 00:04:06,599
easily distinguish between tlb heads and

100
00:04:06,599 --> 00:04:09,060
T we misses because as long as we read

101
00:04:09,060 --> 00:04:10,379
one two three

102
00:04:10,379 --> 00:04:12,239
we know that we reach from physical

103
00:04:12,239 --> 00:04:14,400
address X1 and thus that the Tob

104
00:04:14,400 --> 00:04:16,798
translation has been used and as soon as

105
00:04:16,798 --> 00:04:19,019
we read three two one we know that we

106
00:04:19,019 --> 00:04:21,600
had a page walk and thus that the tub

107
00:04:21,600 --> 00:04:24,120
evicted our translation

108
00:04:24,120 --> 00:04:26,960
so using tub desynchronization we can

109
00:04:26,960 --> 00:04:30,060
reliably distinguish tlb heads from Tob

110
00:04:30,060 --> 00:04:32,400
misses and we use this primitive to

111
00:04:32,400 --> 00:04:35,580
reverse engineer Tob properties

112
00:04:35,580 --> 00:04:37,639
so we looked at quite many

113
00:04:37,639 --> 00:04:41,280
properties including inclusion policies

114
00:04:41,280 --> 00:04:42,900
which decide to wear entries or

115
00:04:42,900 --> 00:04:44,699
translations reside in the Tob May

116
00:04:44,699 --> 00:04:47,520
reside insertion policies how are

117
00:04:47,520 --> 00:04:51,479
translations inserted and and when

118
00:04:51,479 --> 00:04:53,820
um how big are the sets in the tobs and

119
00:04:53,820 --> 00:04:55,860
how does a virtual address get mapped to

120
00:04:55,860 --> 00:04:58,620
a set the so-called hash function and

121
00:04:58,620 --> 00:05:00,419
replacement policies so due to time

122
00:05:00,419 --> 00:05:02,820
limitations I'll discuss the replacement

123
00:05:02,820 --> 00:05:05,100
policies result but the others are no

124
00:05:05,100 --> 00:05:07,259
less important

125
00:05:07,259 --> 00:05:10,500
so we need to replace the policy because

126
00:05:10,500 --> 00:05:11,400
um

127
00:05:11,400 --> 00:05:13,139
because when we insert a new translation

128
00:05:13,139 --> 00:05:16,080
the tub set is likely already full and

129
00:05:16,080 --> 00:05:18,060
so we need to decide which entry we

130
00:05:18,060 --> 00:05:20,340
evict uh to make room for the new

131
00:05:20,340 --> 00:05:24,020
translation the so-called victim

132
00:05:24,419 --> 00:05:26,699
um with to be desynchronization we found

133
00:05:26,699 --> 00:05:27,539
that there are three replacement

134
00:05:27,539 --> 00:05:30,300
policies active on Intel tobs we found

135
00:05:30,300 --> 00:05:31,560
lru

136
00:05:31,560 --> 00:05:33,840
we found three plru and the policy that

137
00:05:33,840 --> 00:05:37,080
we named mru plus one modulo 3 plru4

138
00:05:37,080 --> 00:05:39,300
I'll refer to it as mru plus one from

139
00:05:39,300 --> 00:05:40,860
now

140
00:05:40,860 --> 00:05:43,199
so lru stands for at least recently used

141
00:05:43,199 --> 00:05:45,720
very intuitive right we evict the least

142
00:05:45,720 --> 00:05:48,180
recently used entry in the set and we

143
00:05:48,180 --> 00:05:50,039
found this to be active on Ivy Bridges

144
00:05:50,039 --> 00:05:51,900
it'll be

145
00:05:51,900 --> 00:05:53,699
but the policy that was much more common

146
00:05:53,699 --> 00:05:57,060
on Intel tobs is tree pseudo lru or 3p

147
00:05:57,060 --> 00:06:00,860
lru which is an approximation of lru

148
00:06:00,860 --> 00:06:03,720
and it approximates lru with a binary

149
00:06:03,720 --> 00:06:05,880
tree you can see it on the right where

150
00:06:05,880 --> 00:06:07,380
we just have to follow the arrows to

151
00:06:07,380 --> 00:06:08,940
decide which of the entries needs to get

152
00:06:08,940 --> 00:06:10,800
evicted so if we want to insert a new

153
00:06:10,800 --> 00:06:13,139
entry say four we follow the arrows and

154
00:06:13,139 --> 00:06:15,660
override one in this case and after that

155
00:06:15,660 --> 00:06:18,240
we flip the arrows to make for the most

156
00:06:18,240 --> 00:06:20,280
important most recently used entry in

157
00:06:20,280 --> 00:06:21,300
the set

158
00:06:21,300 --> 00:06:23,880
and if we now consequently have a hit on

159
00:06:23,880 --> 00:06:25,319
zero

160
00:06:25,319 --> 00:06:26,940
um then we also flip the arrows to make

161
00:06:26,940 --> 00:06:29,580
it the most recently used entry so we

162
00:06:29,580 --> 00:06:31,199
found this policy to be active on all

163
00:06:31,199 --> 00:06:33,060
the dtobs that we considered and on the

164
00:06:33,060 --> 00:06:35,100
stlb of all the older Intel micro

165
00:06:35,100 --> 00:06:36,360
architectures

166
00:06:36,360 --> 00:06:40,199
but on the stlb of newer uh into my

167
00:06:40,199 --> 00:06:42,120
architectures we found a novel policy

168
00:06:42,120 --> 00:06:43,560
mru plus one

169
00:06:43,560 --> 00:06:47,100
so this is a 12-way set associate of Tob

170
00:06:47,100 --> 00:06:49,440
and we found that the replacement policy

171
00:06:49,440 --> 00:06:51,960
intuitively divides these 12 entries

172
00:06:51,960 --> 00:06:53,880
into three groups group zero group one

173
00:06:53,880 --> 00:06:55,740
group two and within each of these

174
00:06:55,740 --> 00:06:57,900
groups we have three plru that keeps

175
00:06:57,900 --> 00:06:59,699
track of the replacement state

176
00:06:59,699 --> 00:07:01,919
and additionally we have a root note

177
00:07:01,919 --> 00:07:04,020
that decides which of these groups is

178
00:07:04,020 --> 00:07:05,220
the victim group and which of these

179
00:07:05,220 --> 00:07:07,319
groups will choose the victim and it

180
00:07:07,319 --> 00:07:09,600
does is by remembering the most recently

181
00:07:09,600 --> 00:07:11,400
used group mru group

182
00:07:11,400 --> 00:07:13,979
and it adds one to that so if group one

183
00:07:13,979 --> 00:07:16,020
here is most recently used we'll choose

184
00:07:16,020 --> 00:07:18,240
the victim in group two

185
00:07:18,240 --> 00:07:21,539
so if we have a hit on Entry one within

186
00:07:21,539 --> 00:07:23,520
group zero where which is where uh

187
00:07:23,520 --> 00:07:26,819
entries 1 resides we flip the arrows to

188
00:07:26,819 --> 00:07:29,280
make it the most recently used entry in

189
00:07:29,280 --> 00:07:31,440
group zero and the root notes will

190
00:07:31,440 --> 00:07:33,300
remember that group 0 is the most

191
00:07:33,300 --> 00:07:35,039
recently used group and it will change

192
00:07:35,039 --> 00:07:36,960
the victim group to group one

193
00:07:36,960 --> 00:07:39,000
and if we now want to insert a new entry

194
00:07:39,000 --> 00:07:42,060
let's say 12 we override 2 and do the

195
00:07:42,060 --> 00:07:44,460
same flip the arrows and update the most

196
00:07:44,460 --> 00:07:47,759
recently used group at the top

197
00:07:47,759 --> 00:07:50,099
so why do we care about this apart from

198
00:07:50,099 --> 00:07:52,500
that it's interesting well to be based

199
00:07:52,500 --> 00:07:55,380
attacks often need to evict one

200
00:07:55,380 --> 00:07:57,120
particular entry out of a set for

201
00:07:57,120 --> 00:07:59,520
example in the case of Teo bleed in

202
00:07:59,520 --> 00:08:02,520
order to sample the Tob State we

203
00:08:02,520 --> 00:08:04,440
required

204
00:08:04,440 --> 00:08:07,500
to evict the entry of the process we spy

205
00:08:07,500 --> 00:08:08,400
on

206
00:08:08,400 --> 00:08:10,440
so the naive way to do this and this is

207
00:08:10,440 --> 00:08:11,880
what previous work has done is to just

208
00:08:11,880 --> 00:08:13,560
override the entire set all the entries

209
00:08:13,560 --> 00:08:15,300
in the set but now that we have the

210
00:08:15,300 --> 00:08:17,639
knowledge of replacement policies we can

211
00:08:17,639 --> 00:08:20,039
create optimized eviction patterns that

212
00:08:20,039 --> 00:08:22,740
evict entries in the most optimal way

213
00:08:22,740 --> 00:08:25,560
so for example if we have a entry T that

214
00:08:25,560 --> 00:08:28,919
gets inserted uh we have the following

215
00:08:28,919 --> 00:08:31,319
states and now we want to evictee in the

216
00:08:31,319 --> 00:08:33,779
short with the least minimal steps

217
00:08:33,779 --> 00:08:37,080
possible so how we do this is we issue a

218
00:08:37,080 --> 00:08:39,360
hit on six to update this lower nodes to

219
00:08:39,360 --> 00:08:42,240
point at T then we issue a hit on Entry

220
00:08:42,240 --> 00:08:45,779
two to update the middle nodes

221
00:08:45,779 --> 00:08:48,720
to point to the right and then we issue

222
00:08:48,720 --> 00:08:52,080
a hit on Entry one to make t the next

223
00:08:52,080 --> 00:08:53,160
victim

224
00:08:53,160 --> 00:08:56,160
so now if we issue or trigger a Tob Miss

225
00:08:56,160 --> 00:08:59,279
T will be the victim and we evicted it

226
00:08:59,279 --> 00:09:01,500
so with only three hits and one miss we

227
00:09:01,500 --> 00:09:03,300
can now evict an entry out of the Tob

228
00:09:03,300 --> 00:09:05,820
compared to 12 misses that were required

229
00:09:05,820 --> 00:09:09,360
within Eve eviction sets

230
00:09:09,360 --> 00:09:10,560
so

231
00:09:10,560 --> 00:09:13,019
the original team lead attacks leaks

232
00:09:13,019 --> 00:09:15,839
over the dtob and we measured that using

233
00:09:15,839 --> 00:09:17,339
our optimized eviction sets we can

234
00:09:17,339 --> 00:09:20,399
sample the dtub 20 faster compared to

235
00:09:20,399 --> 00:09:22,980
naive eviction sets but we also make it

236
00:09:22,980 --> 00:09:24,600
practical to leak over the level 2

237
00:09:24,600 --> 00:09:27,540
shared stob because our optimized

238
00:09:27,540 --> 00:09:30,120
eviction sets result in twice as fast

239
00:09:30,120 --> 00:09:32,399
sampling which brings the sampling rate

240
00:09:32,399 --> 00:09:34,560
close to the sampling rate obtained on

241
00:09:34,560 --> 00:09:36,720
the level 1 dtub with naive eviction

242
00:09:36,720 --> 00:09:37,920
sets

243
00:09:37,920 --> 00:09:39,779
and we introduce a variant that leaks

244
00:09:39,779 --> 00:09:41,220
from the dtube and the stub

245
00:09:41,220 --> 00:09:43,080
simultaneously

246
00:09:43,080 --> 00:09:46,260
yielding a five times faster sampling

247
00:09:46,260 --> 00:09:48,540
rate to pay or higher sampling rate to

248
00:09:48,540 --> 00:09:50,519
compared to the um

249
00:09:50,519 --> 00:09:52,920
compared to naive eviction sets

250
00:09:52,920 --> 00:09:54,839
but there are also other attacks that

251
00:09:54,839 --> 00:09:57,240
indirectly rely on interaction with a

252
00:09:57,240 --> 00:10:00,779
tlb so we have PT hammer and aslr on the

253
00:10:00,779 --> 00:10:03,420
line that rely on side effects of the of

254
00:10:03,420 --> 00:10:06,180
the page Walk The Hammer dram and Brake

255
00:10:06,180 --> 00:10:08,040
aslr respectively

256
00:10:08,040 --> 00:10:11,339
and we measured how how much more

257
00:10:11,339 --> 00:10:13,320
efficient we can make these attacks when

258
00:10:13,320 --> 00:10:16,200
we use optimized eviction sets so in the

259
00:10:16,200 --> 00:10:18,420
case of PT Hammer we found we can we

260
00:10:18,420 --> 00:10:21,600
have a 12 percent shorter Hammer Time

261
00:10:21,600 --> 00:10:23,940
and an aslr on the line we found that we

262
00:10:23,940 --> 00:10:26,880
can break azolar with 20 less time

263
00:10:26,880 --> 00:10:30,240
compared to naive eviction sense

264
00:10:30,240 --> 00:10:31,560
so there were more interesting results

265
00:10:31,560 --> 00:10:33,959
such as an undocumented cache that keeps

266
00:10:33,959 --> 00:10:36,060
track of address spaces but I could not

267
00:10:36,060 --> 00:10:37,680
discuss this because of time limitations

268
00:10:37,680 --> 00:10:40,560
but please take a look at the paper

269
00:10:40,560 --> 00:10:42,800
so as a summary we reverse engineered

270
00:10:42,800 --> 00:10:46,500
tobs which gain which led us to uh have

271
00:10:46,500 --> 00:10:48,300
a better understanding of Tob behavior

272
00:10:48,300 --> 00:10:50,820
and this allows us to speed up tub

273
00:10:50,820 --> 00:10:53,459
eviction improving several Tob based

274
00:10:53,459 --> 00:10:55,740
attacks such as steel PT hammer and aslr

275
00:10:55,740 --> 00:10:59,060
on the line thank you very much

