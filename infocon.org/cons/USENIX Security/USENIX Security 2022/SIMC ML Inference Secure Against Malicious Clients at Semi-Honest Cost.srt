1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:14,000 --> 00:00:16,619
secure against malicious clients at semi

3
00:00:16,619 --> 00:00:19,020
honest Coast I am Akash and this is a

4
00:00:19,020 --> 00:00:20,760
joint work with Nisha and Divya and

5
00:00:20,760 --> 00:00:22,619
bhavna

6
00:00:22,619 --> 00:00:25,080
this work is in the problem of secure ml

7
00:00:25,080 --> 00:00:27,180
inference here you have the two parties

8
00:00:27,180 --> 00:00:28,980
the server and decline

9
00:00:28,980 --> 00:00:32,098
this Servo holds the ml model amp and

10
00:00:32,098 --> 00:00:34,380
weight w and client holds the input

11
00:00:34,380 --> 00:00:37,020
Vector X the two parties then interact

12
00:00:37,020 --> 00:00:39,540
in order to in order to allow the client

13
00:00:39,540 --> 00:00:41,940
to learn the inference output we want

14
00:00:41,940 --> 00:00:43,440
the security guarantee from the

15
00:00:43,440 --> 00:00:45,180
interaction that the server learns new

16
00:00:45,180 --> 00:00:47,040
information about the private input of

17
00:00:47,040 --> 00:00:49,079
client and client learns only the

18
00:00:49,079 --> 00:00:50,520
inference output

19
00:00:50,520 --> 00:00:52,920
this actually can be realized through

20
00:00:52,920 --> 00:00:54,960
secure multi-party computation which is

21
00:00:54,960 --> 00:00:57,480
a classic cryptographic technique

22
00:00:57,480 --> 00:00:59,460
one of the applications of secure

23
00:00:59,460 --> 00:01:03,000
inference is in the domain of Dom Health

24
00:01:03,000 --> 00:01:05,760
like Health infrastructure here you have

25
00:01:05,760 --> 00:01:08,340
a hospital which holds the ml model for

26
00:01:08,340 --> 00:01:10,740
disease prediction and you have the

27
00:01:10,740 --> 00:01:12,540
patient who holds the medical report

28
00:01:12,540 --> 00:01:15,540
they can interact in a secure inference

29
00:01:15,540 --> 00:01:17,520
algorithm such that at the end of it

30
00:01:17,520 --> 00:01:20,340
client learns the output of the disease

31
00:01:20,340 --> 00:01:23,220
production only and the server that is

32
00:01:23,220 --> 00:01:24,960
the hospital gets no information about

33
00:01:24,960 --> 00:01:27,060
the patient's record

34
00:01:27,060 --> 00:01:30,180
there are several secure ml inference

35
00:01:30,180 --> 00:01:33,540
algorithms using MPC techniques uh to

36
00:01:33,540 --> 00:01:36,240
obtain semi honest as well as malicious

37
00:01:36,240 --> 00:01:39,180
secure inference protocols now semi

38
00:01:39,180 --> 00:01:42,060
honest uh secure protocols provide this

39
00:01:42,060 --> 00:01:44,520
guarantee that is they provide guarantee

40
00:01:44,520 --> 00:01:47,400
against corrupt parties that follow the

41
00:01:47,400 --> 00:01:50,220
protocol specification but they are only

42
00:01:50,220 --> 00:01:53,100
curious to learn other party's output in

43
00:01:53,100 --> 00:01:56,159
the protocol interaction whereas the

44
00:01:56,159 --> 00:01:59,100
malicious setting allows security

45
00:01:59,100 --> 00:02:01,860
against corrupt parties that can deviate

46
00:02:01,860 --> 00:02:03,479
arbitrarily from the protocol

47
00:02:03,479 --> 00:02:05,100
specification

48
00:02:05,100 --> 00:02:07,500
some of the prior works on semi honor

49
00:02:07,500 --> 00:02:10,860
security setting is kryptonite's Delphi

50
00:02:10,860 --> 00:02:13,020
cryptoflow to name a few

51
00:02:13,020 --> 00:02:15,180
and some of the prior works in the

52
00:02:15,180 --> 00:02:17,520
malicious setting are speeds ponytail

53
00:02:17,520 --> 00:02:18,900
Overdrive

54
00:02:18,900 --> 00:02:21,000
the good thing about semi honest secure

55
00:02:21,000 --> 00:02:22,680
inference protocols is that they are

56
00:02:22,680 --> 00:02:25,020
extremely efficient however as we know

57
00:02:25,020 --> 00:02:27,120
that the security provided by them is

58
00:02:27,120 --> 00:02:28,260
very weak

59
00:02:28,260 --> 00:02:30,360
on the other case it's the reverse for

60
00:02:30,360 --> 00:02:32,340
malicious secure inference protocols

61
00:02:32,340 --> 00:02:34,319
they do provide a strong efficiency

62
00:02:34,319 --> 00:02:36,720
security guarantee but at the cost of

63
00:02:36,720 --> 00:02:38,340
efficiency

64
00:02:38,340 --> 00:02:40,620
so now let's get back to the scenario

65
00:02:40,620 --> 00:02:43,019
that we were at so here we have a server

66
00:02:43,019 --> 00:02:45,959
who is the model owner and it's a single

67
00:02:45,959 --> 00:02:47,099
entity

68
00:02:47,099 --> 00:02:49,760
and the server is usually reputed

69
00:02:49,760 --> 00:02:52,560
therefore if it deviates from the

70
00:02:52,560 --> 00:02:54,620
protocol specification and gets caught

71
00:02:54,620 --> 00:02:58,080
then the consequences can be dire and

72
00:02:58,080 --> 00:03:00,239
because of public accountability of the

73
00:03:00,239 --> 00:03:02,280
server therefore it is reasonable to

74
00:03:02,280 --> 00:03:04,400
assume that the server is semi honest

75
00:03:04,400 --> 00:03:06,780
whereas client there are multiple

76
00:03:06,780 --> 00:03:09,300
clients and they can be anonymous

77
00:03:09,300 --> 00:03:11,459
and there is no incentive as such for

78
00:03:11,459 --> 00:03:12,840
the clients to follow the protocol

79
00:03:12,840 --> 00:03:14,640
Faithfully

80
00:03:14,640 --> 00:03:18,379
and in fact it was shown that if a

81
00:03:18,379 --> 00:03:20,760
malicious client

82
00:03:20,760 --> 00:03:23,280
is being executed on a semi honest

83
00:03:23,280 --> 00:03:25,800
protocol then it can lead to dangerous

84
00:03:25,800 --> 00:03:28,920
attacks some of the attacks are like are

85
00:03:28,920 --> 00:03:31,200
like the model extraction attacks which

86
00:03:31,200 --> 00:03:33,720
allows the malicious client to learn the

87
00:03:33,720 --> 00:03:36,840
approximate model rates W in fact in a

88
00:03:36,840 --> 00:03:38,819
work that got published at usinex last

89
00:03:38,819 --> 00:03:41,819
year that is Muse it gave a very

90
00:03:41,819 --> 00:03:43,920
efficient model extraction attack which

91
00:03:43,920 --> 00:03:47,519
was 24x to 312x faster than all prior

92
00:03:47,519 --> 00:03:49,440
works because it required that many

93
00:03:49,440 --> 00:03:51,780
fewer queries and one good thing about

94
00:03:51,780 --> 00:03:53,760
this attack was that it was able to

95
00:03:53,760 --> 00:03:56,760
extract the model weights exactly

96
00:03:56,760 --> 00:03:59,400
therefore this motivates us to consider

97
00:03:59,400 --> 00:04:01,799
the client malicious threat model where

98
00:04:01,799 --> 00:04:04,019
the server is semi honest and clients

99
00:04:04,019 --> 00:04:05,459
are malicious

100
00:04:05,459 --> 00:04:07,920
in this work we asked the following

101
00:04:07,920 --> 00:04:10,560
question can we design client malicious

102
00:04:10,560 --> 00:04:13,260
secure inference protocols which are as

103
00:04:13,260 --> 00:04:16,320
efficient as semi owners protocols well

104
00:04:16,320 --> 00:04:18,600
the title of the paper is a spoiler so

105
00:04:18,600 --> 00:04:21,238
in case you haven't seen it it's good

106
00:04:21,238 --> 00:04:24,120
yeah so in this work uh we focus on

107
00:04:24,120 --> 00:04:26,160
neural networks which are the prominent

108
00:04:26,160 --> 00:04:28,860
secure inference protocols which are the

109
00:04:28,860 --> 00:04:30,479
prominent inference protocols that you

110
00:04:30,479 --> 00:04:32,520
see around and this has been the focus

111
00:04:32,520 --> 00:04:34,800
of almost all prior secure inference

112
00:04:34,800 --> 00:04:36,600
protocols

113
00:04:36,600 --> 00:04:39,540
and this is the case for our work too so

114
00:04:39,540 --> 00:04:41,820
neural networks comprises of alternate

115
00:04:41,820 --> 00:04:44,720
linear and non-linear layers uh like

116
00:04:44,720 --> 00:04:46,800
linear layer could be the fully

117
00:04:46,800 --> 00:04:49,259
connected layer or a convolution layer

118
00:04:49,259 --> 00:04:51,540
and some of the examples of non-linear

119
00:04:51,540 --> 00:04:53,060
layers are

120
00:04:53,060 --> 00:04:55,259
some of the functions that are computed

121
00:04:55,259 --> 00:04:58,199
that are value Max pool Etc now linear

122
00:04:58,199 --> 00:04:59,880
layers are best represented as

123
00:04:59,880 --> 00:05:02,340
arithmetic circuits therefore it makes

124
00:05:02,340 --> 00:05:04,740
sense to make use of cryptographic

125
00:05:04,740 --> 00:05:07,500
techniques which are efficient and more

126
00:05:07,500 --> 00:05:09,900
compatible with arithmetic circuits say

127
00:05:09,900 --> 00:05:12,900
additive homomorphic encryption whereas

128
00:05:12,900 --> 00:05:14,940
non-linear layers are best represented

129
00:05:14,940 --> 00:05:17,400
as Boolean circuits so therefore it

130
00:05:17,400 --> 00:05:19,259
makes sense to use techniques compatible

131
00:05:19,259 --> 00:05:21,300
with Boolean circuits say garbage

132
00:05:21,300 --> 00:05:23,039
circuits

133
00:05:23,039 --> 00:05:24,720
so as we make use of different

134
00:05:24,720 --> 00:05:26,220
techniques and the linear and the

135
00:05:26,220 --> 00:05:28,080
non-linear layers there is one subtle

136
00:05:28,080 --> 00:05:30,000
issue which will become clear when I

137
00:05:30,000 --> 00:05:32,160
present the next slide

138
00:05:32,160 --> 00:05:34,560
so now let me first start with the semi

139
00:05:34,560 --> 00:05:37,199
honors protocol which are generic and

140
00:05:37,199 --> 00:05:39,539
most efficient in literature so they

141
00:05:39,539 --> 00:05:41,639
have the follow following skeletal so

142
00:05:41,639 --> 00:05:44,340
for the linear layers the server has the

143
00:05:44,340 --> 00:05:47,340
linear layer l and both this server and

144
00:05:47,340 --> 00:05:49,199
the client hold the shares of the input

145
00:05:49,199 --> 00:05:50,220
X

146
00:05:50,220 --> 00:05:52,380
now as mentioned we'll make use of

147
00:05:52,380 --> 00:05:54,479
additive homomorphic encryption scheme

148
00:05:54,479 --> 00:05:58,020
here so client will first encrypt its

149
00:05:58,020 --> 00:06:00,600
share and send it to the server the

150
00:06:00,600 --> 00:06:03,600
server can then uh can then first

151
00:06:03,600 --> 00:06:06,479
reconstruct the and can first obtain the

152
00:06:06,479 --> 00:06:09,419
encryption of reconstructed value X then

153
00:06:09,419 --> 00:06:12,180
it will obtain encryption of the

154
00:06:12,180 --> 00:06:13,979
computation of linear layer on this

155
00:06:13,979 --> 00:06:16,380
reconstructed value and finally it

156
00:06:16,380 --> 00:06:18,120
obtains the ciphertext C Dash

157
00:06:18,120 --> 00:06:20,699
corresponding to the share of the output

158
00:06:20,699 --> 00:06:23,400
y of client it will send this ciphertext

159
00:06:23,400 --> 00:06:25,919
to the client and at the end of it

160
00:06:25,919 --> 00:06:28,560
client will decrypt and at the end of

161
00:06:28,560 --> 00:06:30,660
the computation of the linear layer we

162
00:06:30,660 --> 00:06:32,699
have both parties holding shares of the

163
00:06:32,699 --> 00:06:35,280
output of linear layer y that is output

164
00:06:35,280 --> 00:06:36,120
y

165
00:06:36,120 --> 00:06:39,539
and now uh for the now let's come to the

166
00:06:39,539 --> 00:06:41,880
non-linear layer so now in the

167
00:06:41,880 --> 00:06:44,520
non-linear layer right now that's uh the

168
00:06:44,520 --> 00:06:46,199
input is the output that we obtained

169
00:06:46,199 --> 00:06:47,940
from the linear layers that is the

170
00:06:47,940 --> 00:06:50,100
arithmetic shares of output y

171
00:06:50,100 --> 00:06:52,560
now uh the problem is that here we make

172
00:06:52,560 --> 00:06:54,660
use of gable circuits so first we need

173
00:06:54,660 --> 00:06:56,580
to convert it into inputs that are

174
00:06:56,580 --> 00:06:58,800
compatible with gobble circuits so for

175
00:06:58,800 --> 00:07:00,960
this uh corresponding to input share of

176
00:07:00,960 --> 00:07:03,720
y 0 server can easily send its labels

177
00:07:03,720 --> 00:07:05,639
because it is the one that created the

178
00:07:05,639 --> 00:07:08,699
gobble circuit whereas for clients

179
00:07:08,699 --> 00:07:12,360
output for clients input y1 uh you need

180
00:07:12,360 --> 00:07:14,580
the parties need to be involved in an OT

181
00:07:14,580 --> 00:07:17,280
protocol such that client learns labels

182
00:07:17,280 --> 00:07:20,280
corresponding to input y y one so once

183
00:07:20,280 --> 00:07:22,560
they obtain these values they can run a

184
00:07:22,560 --> 00:07:25,440
gobble circuit to compute shares of the

185
00:07:25,440 --> 00:07:27,780
output of non-linear function f on the

186
00:07:27,780 --> 00:07:29,940
reconstructed value

187
00:07:29,940 --> 00:07:32,520
and obtain the output shares of the

188
00:07:32,520 --> 00:07:35,639
non-linear layer now

189
00:07:35,639 --> 00:07:39,060
you know now uh you know now let's see

190
00:07:39,060 --> 00:07:40,940
how Muse

191
00:07:40,940 --> 00:07:43,500
Builds on this on the previous protocol

192
00:07:43,500 --> 00:07:45,240
that we discussed in order to provide

193
00:07:45,240 --> 00:07:47,039
security guarantee against malicious

194
00:07:47,039 --> 00:07:50,039
clients so here the idea is that we'll

195
00:07:50,039 --> 00:07:53,039
make use of authenticated shares

196
00:07:53,039 --> 00:07:55,560
for the linear layers uh the change is

197
00:07:55,560 --> 00:07:58,080
not significant so I'll not focus it on

198
00:07:58,080 --> 00:08:00,599
this talk so let's directly jump to the

199
00:08:00,599 --> 00:08:02,699
non-linear layer so in the non-linear

200
00:08:02,699 --> 00:08:04,919
layer as mentioned instead of shares of

201
00:08:04,919 --> 00:08:06,240
the output now we will have

202
00:08:06,240 --> 00:08:08,460
authenticated shares that is will have

203
00:08:08,460 --> 00:08:10,919
the shares of Y as well as computation

204
00:08:10,919 --> 00:08:14,819
of one time Mac on y that is alpha y so

205
00:08:14,819 --> 00:08:16,979
once you have this shares

206
00:08:16,979 --> 00:08:19,620
client will obtain uh so client can

207
00:08:19,620 --> 00:08:21,720
obtain labels for its input y1

208
00:08:21,720 --> 00:08:24,300
correspond using the OT protocol can it

209
00:08:24,300 --> 00:08:25,259
be done

210
00:08:25,259 --> 00:08:29,099
actually no because uh your client can

211
00:08:29,099 --> 00:08:30,599
deviate from the protocol right because

212
00:08:30,599 --> 00:08:32,700
client is malicious and it can send some

213
00:08:32,700 --> 00:08:36,599
arbitrary value of y1 and get some get

214
00:08:36,599 --> 00:08:38,820
labels corresponding to arbitrary bits

215
00:08:38,820 --> 00:08:40,860
and can launch the model extraction

216
00:08:40,860 --> 00:08:43,260
attack that we just discussed so for

217
00:08:43,260 --> 00:08:46,440
this Muse suggested that we make use of

218
00:08:46,440 --> 00:08:48,720
that novel protocol which they call it

219
00:08:48,720 --> 00:08:51,300
conditional disclosure of secrets so

220
00:08:51,300 --> 00:08:54,240
this protocol will will output the

221
00:08:54,240 --> 00:08:57,540
labels for y1 only if the Mac check is

222
00:08:57,540 --> 00:08:58,560
consistent

223
00:08:58,560 --> 00:09:01,560
however there is a limitation on this

224
00:09:01,560 --> 00:09:03,899
protocol that is it is computationally

225
00:09:03,899 --> 00:09:06,060
heavy because it make it makes use of

226
00:09:06,060 --> 00:09:08,100
leveled homomorphic encryption

227
00:09:08,100 --> 00:09:10,560
along with that it is also communication

228
00:09:10,560 --> 00:09:12,779
heavy because it makes use of generating

229
00:09:12,779 --> 00:09:15,300
makes use of several authenticated

230
00:09:15,300 --> 00:09:17,820
Beaver triples and generating many of

231
00:09:17,820 --> 00:09:19,680
those as Compu communicationally

232
00:09:19,680 --> 00:09:21,660
expensive

233
00:09:21,660 --> 00:09:24,000
and the rest of the protocol is similar

234
00:09:24,000 --> 00:09:26,040
to the semi honest protocol that we

235
00:09:26,040 --> 00:09:27,480
discussed

236
00:09:27,480 --> 00:09:30,600
and now let's come to our protocol that

237
00:09:30,600 --> 00:09:32,700
is simc which is short for secure

238
00:09:32,700 --> 00:09:35,580
inference against malicious clients so

239
00:09:35,580 --> 00:09:37,860
our first step here is to eliminate the

240
00:09:37,860 --> 00:09:40,080
use of CDs protocol

241
00:09:40,080 --> 00:09:43,140
so this is how we do so again the linear

242
00:09:43,140 --> 00:09:45,060
layer is similar to mues so I won't be

243
00:09:45,060 --> 00:09:47,519
dwelling into it but notice that the

244
00:09:47,519 --> 00:09:49,019
output of the linear layer is

245
00:09:49,019 --> 00:09:51,000
authenticated shares of the output y

246
00:09:51,000 --> 00:09:53,519
that is you have shares of Y and shares

247
00:09:53,519 --> 00:09:56,220
of alpha y and for shares of alpha y I

248
00:09:56,220 --> 00:09:58,440
use the variable V

249
00:09:58,440 --> 00:10:02,100
and now for the non-linear layer uh the

250
00:10:02,100 --> 00:10:04,800
inputs are the shares of the output that

251
00:10:04,800 --> 00:10:06,240
you obtained from the previous linear

252
00:10:06,240 --> 00:10:08,760
layer that is shares of Y and

253
00:10:08,760 --> 00:10:10,740
additionally the server has the Mac key

254
00:10:10,740 --> 00:10:13,519
Alpha so now we consider this following

255
00:10:13,519 --> 00:10:16,620
following circuit so in this circuit we

256
00:10:16,620 --> 00:10:19,260
first reconstruct the value Y and then

257
00:10:19,260 --> 00:10:22,680
we compute uh the Mac again on the input

258
00:10:22,680 --> 00:10:25,680
value that is our we compute alpha y and

259
00:10:25,680 --> 00:10:27,660
then we compute

260
00:10:27,660 --> 00:10:30,240
the output of the non-linear function f

261
00:10:30,240 --> 00:10:33,720
on the reconstructed value and obtain uh

262
00:10:33,720 --> 00:10:36,839
the Mac on this output and finally this

263
00:10:36,839 --> 00:10:40,320
this circuit will output shares of u z

264
00:10:40,320 --> 00:10:42,899
and T those shells are the ones that

265
00:10:42,899 --> 00:10:45,000
correspond to client

266
00:10:45,000 --> 00:10:48,120
and now here we make instead of making

267
00:10:48,120 --> 00:10:50,519
use of CDs protocol we make use of OT

268
00:10:50,519 --> 00:10:51,600
protocol

269
00:10:51,600 --> 00:10:54,540
and you may take think like again uh the

270
00:10:54,540 --> 00:10:56,940
client can deviate from the can deviate

271
00:10:56,940 --> 00:10:59,700
and send some arbitrary values of Y one

272
00:10:59,700 --> 00:11:01,620
year but bear with me for a couple of

273
00:11:01,620 --> 00:11:04,440
seconds I'll resolve that in a minute

274
00:11:04,440 --> 00:11:09,060
so here uh year then will similar to the

275
00:11:09,060 --> 00:11:10,800
previous protocols we make use of garble

276
00:11:10,800 --> 00:11:12,600
circuit in order to compute the circuit

277
00:11:12,600 --> 00:11:13,500
C

278
00:11:13,500 --> 00:11:17,519
and the circuit C then outputs uh the

279
00:11:17,519 --> 00:11:20,459
shares for the client uh corresponding

280
00:11:20,459 --> 00:11:24,480
to variables u z and t and a server in

281
00:11:24,480 --> 00:11:26,040
itself because it was the one that

282
00:11:26,040 --> 00:11:27,779
computed the gobble circuit holds this

283
00:11:27,779 --> 00:11:30,779
shares of corresponding shares of u z

284
00:11:30,779 --> 00:11:32,519
and T

285
00:11:32,519 --> 00:11:35,820
and now uh we perform at the end of the

286
00:11:35,820 --> 00:11:37,800
protocol between every linear and

287
00:11:37,800 --> 00:11:39,480
non-linear layer we perform this

288
00:11:39,480 --> 00:11:42,600
consistency check we check whether the

289
00:11:42,600 --> 00:11:45,899
value V is equal to U that is we check

290
00:11:45,899 --> 00:11:48,779
if Mac U is equal to Mac V

291
00:11:48,779 --> 00:11:51,480
and there is an optimization in which we

292
00:11:51,480 --> 00:11:53,820
can combine all this consistency checks

293
00:11:53,820 --> 00:11:56,880
together into one for all the linear and

294
00:11:56,880 --> 00:11:58,860
non-linear layers put together so the

295
00:11:58,860 --> 00:12:00,360
communication actually becomes really

296
00:12:00,360 --> 00:12:01,260
less

297
00:12:01,260 --> 00:12:04,140
and uh now the server will reveal the

298
00:12:04,140 --> 00:12:06,000
output to the client only if this

299
00:12:06,000 --> 00:12:08,820
consistency check is successful so now

300
00:12:08,820 --> 00:12:11,160
say if the client was to deviate from

301
00:12:11,160 --> 00:12:12,959
the protocol and it sends some arbitrary

302
00:12:12,959 --> 00:12:15,600
values for y1 and it gets some arbitrary

303
00:12:15,600 --> 00:12:19,200
labels but uh the value that it got for

304
00:12:19,200 --> 00:12:21,300
you would be completely garbage and it

305
00:12:21,300 --> 00:12:22,920
would not match the consistency check

306
00:12:22,920 --> 00:12:24,240
and it will fail

307
00:12:24,240 --> 00:12:26,700
so that is where the client will get

308
00:12:26,700 --> 00:12:29,220
caught and it uh server will not reveal

309
00:12:29,220 --> 00:12:32,940
the reveal its share of the output

310
00:12:32,940 --> 00:12:34,740
then uh

311
00:12:34,740 --> 00:12:37,019
the second Improvement that we make over

312
00:12:37,019 --> 00:12:40,140
the previous protocols is Computing uh

313
00:12:40,140 --> 00:12:42,959
this Max efficiently in gobble circuits

314
00:12:42,959 --> 00:12:46,700
so for this let me just uh first

315
00:12:46,700 --> 00:12:49,380
provide the concrete statement for the

316
00:12:49,380 --> 00:12:51,240
problem we are interested in so we want

317
00:12:51,240 --> 00:12:54,480
to compute shares of a into B where a is

318
00:12:54,480 --> 00:12:56,160
known to the gobbler

319
00:12:56,160 --> 00:13:00,120
ah and B is the garbled input so now if

320
00:13:00,120 --> 00:13:02,820
we were to use a knife approach uh in

321
00:13:02,820 --> 00:13:04,980
order to compute this in gobble circuits

322
00:13:04,980 --> 00:13:07,079
the communication complexity would be

323
00:13:07,079 --> 00:13:09,600
order of Kappa square into Lambda where

324
00:13:09,600 --> 00:13:12,240
Kappa is the size of the field and of

325
00:13:12,240 --> 00:13:14,399
the field element that we are in we are

326
00:13:14,399 --> 00:13:16,560
executing our protocols in and Lambda is

327
00:13:16,560 --> 00:13:19,680
the security parameter so now uh this

328
00:13:19,680 --> 00:13:22,980
value B can be split into bits it can be

329
00:13:22,980 --> 00:13:26,519
decomposed into bits B1 to b b Kappa and

330
00:13:26,519 --> 00:13:27,899
now let me denote the labels

331
00:13:27,899 --> 00:13:30,899
corresponding to bit bi as label 0i and

332
00:13:30,899 --> 00:13:32,880
label 1i corresponding to labels for

333
00:13:32,880 --> 00:13:36,000
bits 0 and 1 respectively so now the

334
00:13:36,000 --> 00:13:38,540
gobbler will first randomly sample

335
00:13:38,540 --> 00:13:42,180
random values R1 to R Kappa and then it

336
00:13:42,180 --> 00:13:44,220
will compute a decryption table d as

337
00:13:44,220 --> 00:13:49,620
follows so for a bit for for say bit B1

338
00:13:49,620 --> 00:13:53,220
and for a bit B1 equal to 0 it will

339
00:13:53,220 --> 00:13:56,459
first add the random value R1 with 0 and

340
00:13:56,459 --> 00:13:59,339
xor it with the label corresponding to

341
00:13:59,339 --> 00:14:03,000
label 0 of B1 and for a bit B1 is equal

342
00:14:03,000 --> 00:14:06,480
to 1 it will add R1 which is the random

343
00:14:06,480 --> 00:14:09,000
value to the Mac uh Mac key or the

344
00:14:09,000 --> 00:14:12,120
gobbler known input a and it will absorb

345
00:14:12,120 --> 00:14:14,760
it with uh the label corresponding to

346
00:14:14,760 --> 00:14:15,540
the

347
00:14:15,540 --> 00:14:18,360
bit corresponding to the bit B1 is equal

348
00:14:18,360 --> 00:14:22,139
to one and it will do this for all the

349
00:14:22,139 --> 00:14:24,240
other remaining bits and it will permute

350
00:14:24,240 --> 00:14:27,180
this uh entries using the permit bit of

351
00:14:27,180 --> 00:14:29,040
the Garber that was that in the Garber

352
00:14:29,040 --> 00:14:31,500
circuit corresponding to bit bi

353
00:14:31,500 --> 00:14:35,160
and now once the evaluator gets this

354
00:14:35,160 --> 00:14:37,800
decryption table it will know labels

355
00:14:37,800 --> 00:14:39,959
corresponding to the correct or beta

356
00:14:39,959 --> 00:14:42,480
ones that it is at beta eyes that is it

357
00:14:42,480 --> 00:14:44,639
is currently at in the garbage circuit

358
00:14:44,639 --> 00:14:47,940
computation then it will uh High then it

359
00:14:47,940 --> 00:14:50,579
will identify the entries corresponding

360
00:14:50,579 --> 00:14:52,920
to those values in the decryption table

361
00:14:52,920 --> 00:14:54,779
so these are the ones highlighted in the

362
00:14:54,779 --> 00:14:55,920
figure

363
00:14:55,920 --> 00:14:58,500
and then uh

364
00:14:58,500 --> 00:15:00,839
during that time gobbler will generate

365
00:15:00,839 --> 00:15:03,540
its share corresponding uh to the output

366
00:15:03,540 --> 00:15:07,139
Z in which it it will multiply the

367
00:15:07,139 --> 00:15:10,800
random value RI with its bit position uh

368
00:15:10,800 --> 00:15:13,260
that is 2i minus 1 2 raised to I minus 1

369
00:15:13,260 --> 00:15:16,380
and similarly the evaluator will do the

370
00:15:16,380 --> 00:15:19,560
same with its share of values v i and

371
00:15:19,560 --> 00:15:22,560
you can verify that

372
00:15:22,560 --> 00:15:26,579
Z is equal to a into B

373
00:15:26,579 --> 00:15:28,980
and yeah for due to time constraint like

374
00:15:28,980 --> 00:15:30,779
take my word for it it actually works

375
00:15:30,779 --> 00:15:32,040
out

376
00:15:32,040 --> 00:15:35,339
and uh the communication cost here is uh

377
00:15:35,339 --> 00:15:38,040
two Kappa Square which is order like a

378
00:15:38,040 --> 00:15:40,320
flam security parameter is 128 so you

379
00:15:40,320 --> 00:15:43,800
are getting order of 64 benefit already

380
00:15:43,800 --> 00:15:45,899
and uh now let's come to the concrete

381
00:15:45,899 --> 00:15:47,940
performance analysis of our protocol

382
00:15:47,940 --> 00:15:49,560
compared to Muse

383
00:15:49,560 --> 00:15:52,079
so now uh here Kappa again denotes the

384
00:15:52,079 --> 00:15:53,579
size of the field element and Lambda is

385
00:15:53,579 --> 00:15:55,199
the security parameter the communication

386
00:15:55,199 --> 00:15:57,360
complexity of muse and non-linear layers

387
00:15:57,360 --> 00:16:00,959
2D Lambda plus 190 Kappa Lambda plus 232

388
00:16:00,959 --> 00:16:03,540
Kappa square and here D denotes the

389
00:16:03,540 --> 00:16:05,519
number of and gates to compute the

390
00:16:05,519 --> 00:16:08,639
non-linear function f and whereas our

391
00:16:08,639 --> 00:16:11,279
protocol takes just 2C Lambda plus 4K

392
00:16:11,279 --> 00:16:13,740
Kappa plus 6 Kappa Square where C is

393
00:16:13,740 --> 00:16:17,820
much where C is less than d and for to

394
00:16:17,820 --> 00:16:19,260
concretely see the performance

395
00:16:19,260 --> 00:16:20,880
Improvement let us consider the value

396
00:16:20,880 --> 00:16:23,579
function and set our field size to 44

397
00:16:23,579 --> 00:16:26,639
bits and Lambda to be 128 and we can see

398
00:16:26,639 --> 00:16:30,000
that smic performs 30X and it's like

399
00:16:30,000 --> 00:16:32,100
it's 30X more communication efficient

400
00:16:32,100 --> 00:16:33,899
than mues

401
00:16:33,899 --> 00:16:36,600
now let's see the performance like let's

402
00:16:36,600 --> 00:16:39,620
see the Improvement results

403
00:16:40,440 --> 00:16:45,720
yeah uh so here we we perform our

404
00:16:45,720 --> 00:16:48,360
we we show the performance improve

405
00:16:48,360 --> 00:16:50,579
performance on two Network bandwidths

406
00:16:50,579 --> 00:16:53,399
one is uh 584 megabits per second

407
00:16:53,399 --> 00:16:55,320
megabytes per second and the second is

408
00:16:55,320 --> 00:16:58,139
19.2 megabytes per second and we can see

409
00:16:58,139 --> 00:17:00,480
that for non-linear layers uh protocol

410
00:17:00,480 --> 00:17:03,420
is four for four to forty two x more

411
00:17:03,420 --> 00:17:05,819
efficient in network one compared to

412
00:17:05,819 --> 00:17:08,339
Muse and it is 2 to 16.3 X more

413
00:17:08,339 --> 00:17:11,699
efficient in N2 setting and uh for

414
00:17:11,699 --> 00:17:14,339
evaluating our the performance of our

415
00:17:14,339 --> 00:17:16,559
protocol end to end we consider two

416
00:17:16,559 --> 00:17:18,540
benchmarks one is the a two layer

417
00:17:18,540 --> 00:17:20,699
convolution neural network on amnest

418
00:17:20,699 --> 00:17:22,799
data set and the second one is seven

419
00:17:22,799 --> 00:17:27,059
layers uh CNN for Cipher 10 data set

420
00:17:27,059 --> 00:17:30,240
and here uh the end-to-end performances

421
00:17:30,240 --> 00:17:32,880
as follows like uh

422
00:17:32,880 --> 00:17:36,059
Source consider Benchmark 2 Muse takes

423
00:17:36,059 --> 00:17:38,480
like thousands

424
00:17:38,480 --> 00:17:41,100
1782 seconds whereas our protocol just

425
00:17:41,100 --> 00:17:44,640
takes 150 157 seconds and it is order of

426
00:17:44,640 --> 00:17:48,660
6.2 to 11.3 X more faster in N2 setting

427
00:17:48,660 --> 00:17:51,419
and uh one good uh one interesting thing

428
00:17:51,419 --> 00:17:53,760
to note about simc is that it is

429
00:17:53,760 --> 00:17:55,740
communication it is more communication

430
00:17:55,740 --> 00:17:57,600
efficient than the state-of-the-art semi

431
00:17:57,600 --> 00:17:59,940
honors protocol as well and it is more

432
00:17:59,940 --> 00:18:01,559
efficient in it

433
00:18:01,559 --> 00:18:03,360
so that's an interesting point that we

434
00:18:03,360 --> 00:18:05,160
observed in our implementation results

435
00:18:05,160 --> 00:18:08,460
and uh and then we also performed uh

436
00:18:08,460 --> 00:18:10,260
benchmarks in the pre-processing model

437
00:18:10,260 --> 00:18:12,419
and we observed that our protocol was

438
00:18:12,419 --> 00:18:14,220
five to seven point four x more

439
00:18:14,220 --> 00:18:15,960
performance performant than the bash

440
00:18:15,960 --> 00:18:17,940
known Muse protocol and client malicious

441
00:18:17,940 --> 00:18:21,440
setting yeah thank you

