1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:08,360 --> 00:00:11,160
I'm Daniel today I'm going to present

3
00:00:11,160 --> 00:00:13,920
this paper fixed router a realistic bug

4
00:00:13,920 --> 00:00:15,480
injection framework

5
00:00:15,480 --> 00:00:18,720
this work is a joint work with like

6
00:00:18,720 --> 00:00:21,720
Patterson Michael hinks and shiway

7
00:00:21,720 --> 00:00:23,580
so talking about fast testing actually

8
00:00:23,580 --> 00:00:26,279
the ultimate goal is to identify

9
00:00:26,279 --> 00:00:28,680
Olympics in software

10
00:00:28,680 --> 00:00:31,619
currently there is an important question

11
00:00:31,619 --> 00:00:34,440
in the first literature which is to

12
00:00:34,440 --> 00:00:36,840
measure the performance of the fathers

13
00:00:36,840 --> 00:00:39,360
so we have roughly four different

14
00:00:39,360 --> 00:00:42,059
current approach I'm doing so for

15
00:00:42,059 --> 00:00:44,760
example the work first bench

16
00:00:44,760 --> 00:00:47,040
is using cool coverage

17
00:00:47,040 --> 00:00:50,219
to compare different fathers so core

18
00:00:50,219 --> 00:00:53,160
coverage is easy to compute but it is

19
00:00:53,160 --> 00:00:55,199
proven to have weak connection with the

20
00:00:55,199 --> 00:00:57,059
form of performance by some existing

21
00:00:57,059 --> 00:00:58,079
work

22
00:00:58,079 --> 00:01:00,780
sometimes different photos are compiled

23
00:01:00,780 --> 00:01:02,820
with each other by the number of crashes

24
00:01:02,820 --> 00:01:06,060
it will import it

25
00:01:06,060 --> 00:01:10,260
FR statement is a tool provided by FL to

26
00:01:10,260 --> 00:01:13,560
deduplicate the results of others

27
00:01:13,560 --> 00:01:16,320
however this the duplication theoretics

28
00:01:16,320 --> 00:01:18,960
are known to be our sun and imprecise

29
00:01:18,960 --> 00:01:21,600
we also have 14 benchmarks that use the

30
00:01:21,600 --> 00:01:24,540
static box for example lava so the

31
00:01:24,540 --> 00:01:25,799
sensator Box

32
00:01:25,799 --> 00:01:28,740
to have clear detrifications

33
00:01:28,740 --> 00:01:30,840
but they're often complained as being

34
00:01:30,840 --> 00:01:33,840
not realistic and have problems with

35
00:01:33,840 --> 00:01:35,220
overfeeding

36
00:01:35,220 --> 00:01:38,939
and lastly we have some 14 benchmarks

37
00:01:38,939 --> 00:01:41,820
like magma which uses real world bugs

38
00:01:41,820 --> 00:01:43,799
removable bugs are a direct

39
00:01:43,799 --> 00:01:46,280
representation of the performance

40
00:01:46,280 --> 00:01:49,619
however manually injected direct the

41
00:01:49,619 --> 00:01:53,280
realistic box into the target program is

42
00:01:53,280 --> 00:01:55,759
costly

43
00:01:56,460 --> 00:01:58,979
so with the observations of the current

44
00:01:58,979 --> 00:02:01,439
approaches we identified four important

45
00:02:01,439 --> 00:02:03,600
goals for good for the bad mark

46
00:02:03,600 --> 00:02:06,119
this should use relevant real world

47
00:02:06,119 --> 00:02:07,979
Benchmark programs

48
00:02:07,979 --> 00:02:11,580
it should contest realistic bugs

49
00:02:11,580 --> 00:02:14,760
it should have a clear identification

50
00:02:14,760 --> 00:02:16,319
and it is

51
00:02:16,319 --> 00:02:18,900
it should be able to involve and defend

52
00:02:18,900 --> 00:02:22,040
against overfeeding

53
00:02:23,099 --> 00:02:26,220
our proposed solution is fixed water

54
00:02:26,220 --> 00:02:28,560
so we started by looking at the real

55
00:02:28,560 --> 00:02:31,980
work bug fixes of CVS

56
00:02:31,980 --> 00:02:34,200
and manually

57
00:02:34,200 --> 00:02:37,080
summarize Buffy's pattern from them

58
00:02:37,080 --> 00:02:39,060
those buffets patterns would be given as

59
00:02:39,060 --> 00:02:41,819
input to fixed inverter which will match

60
00:02:41,819 --> 00:02:44,879
the patterns in the source code and with

61
00:02:44,879 --> 00:02:47,099
the mesh code fixed root will revert

62
00:02:47,099 --> 00:02:48,300
those code

63
00:02:48,300 --> 00:02:51,680
into injector box

64
00:02:54,000 --> 00:02:56,819
this slide shows the overview of fixable

65
00:02:56,819 --> 00:02:57,720
water

66
00:02:57,720 --> 00:03:01,140
so it takes two

67
00:03:01,140 --> 00:03:03,800
so it takes two inputs a Target program

68
00:03:03,800 --> 00:03:07,200
and it's both its patterns

69
00:03:07,200 --> 00:03:09,120
first component of fixed water is called

70
00:03:09,120 --> 00:03:10,860
The Sex matter

71
00:03:10,860 --> 00:03:14,159
who will which will Traverse the program

72
00:03:14,159 --> 00:03:17,519
source code and looking for code that

73
00:03:17,519 --> 00:03:19,379
matches the definition of the bug fix

74
00:03:19,379 --> 00:03:20,580
patterns

75
00:03:20,580 --> 00:03:22,440
this match code will be used at

76
00:03:22,440 --> 00:03:24,120
potential injection site by fixed

77
00:03:24,120 --> 00:03:26,480
reverter

78
00:03:27,300 --> 00:03:29,280
on the right is the example of the real

79
00:03:29,280 --> 00:03:32,400
world bug fix so here is the Kodi for

80
00:03:32,400 --> 00:03:33,360
the fix

81
00:03:33,360 --> 00:03:36,720
which ate a if check to avoid the

82
00:03:36,720 --> 00:03:39,360
downstream not the reference

83
00:03:39,360 --> 00:03:42,000
the status matter will be wrong on the

84
00:03:42,000 --> 00:03:43,920
fixed version of this program and

85
00:03:43,920 --> 00:03:46,680
identify this if statement to be a match

86
00:03:46,680 --> 00:03:51,080
of one of our fixed patterns

87
00:03:51,480 --> 00:03:53,159
the output of the sentence battery will

88
00:03:53,159 --> 00:03:55,500
be the input of a semantic matter whose

89
00:03:55,500 --> 00:03:58,140
function is a static durability and

90
00:03:58,140 --> 00:04:00,840
dependence analysis

91
00:04:00,840 --> 00:04:02,940
so firstly the cement method will

92
00:04:02,940 --> 00:04:06,239
detectability of the injection site like

93
00:04:06,239 --> 00:04:08,519
the orange edges also down here

94
00:04:08,519 --> 00:04:11,340
and secondly it will try to find the

95
00:04:11,340 --> 00:04:14,040
dependence from the injection site to a

96
00:04:14,040 --> 00:04:16,819
potential crash

97
00:04:20,760 --> 00:04:22,979
following the Thematic Matrix bug

98
00:04:22,979 --> 00:04:25,560
injector which reverts the magic code

99
00:04:25,560 --> 00:04:28,520
into a potential block

100
00:04:28,620 --> 00:04:31,199
so for this example it will be

101
00:04:31,199 --> 00:04:33,900
it will be removing the if statement

102
00:04:33,900 --> 00:04:37,520
from the fixed version of the code

103
00:04:39,660 --> 00:04:42,120
last component of fixable water is the

104
00:04:42,120 --> 00:04:43,680
knife Buck filter

105
00:04:43,680 --> 00:04:47,100
it runs the injected program with the

106
00:04:47,100 --> 00:04:49,919
testing fluid and removes any injury box

107
00:04:49,919 --> 00:04:52,259
that is triggered by the suite

108
00:04:52,259 --> 00:04:56,160
and finally the output of pixel water is

109
00:04:56,160 --> 00:04:59,840
the target program within jetbox

110
00:05:00,120 --> 00:05:02,340
fixed reverter is able to generate for

111
00:05:02,340 --> 00:05:04,380
the benchmarks that meets our identify

112
00:05:04,380 --> 00:05:05,280
goals

113
00:05:05,280 --> 00:05:08,160
the two-shelf fixed motor is scalable on

114
00:05:08,160 --> 00:05:11,220
real world programs and it injects bugs

115
00:05:11,220 --> 00:05:13,560
that match realistic

116
00:05:13,560 --> 00:05:16,560
bug fix patterns

117
00:05:16,560 --> 00:05:19,680
the bug injector injects the buck with

118
00:05:19,680 --> 00:05:22,080
clear indicators for the implication

119
00:05:22,080 --> 00:05:24,419
and it is able to involve and defense

120
00:05:24,419 --> 00:05:26,580
against overfitting by supporting the

121
00:05:26,580 --> 00:05:30,919
development of Graphics patterns

122
00:05:31,380 --> 00:05:34,560
we manually investigated in hypothesis

123
00:05:34,560 --> 00:05:36,900
of 800 series

124
00:05:36,900 --> 00:05:39,060
and to find the first practice patterns

125
00:05:39,060 --> 00:05:40,320
in two votes

126
00:05:40,320 --> 00:05:42,419
the FedEx matter decides the source code

127
00:05:42,419 --> 00:05:47,100
location of the potential injection site

128
00:05:47,100 --> 00:05:49,500
and somatic measure identifies the

129
00:05:49,500 --> 00:05:51,360
relationship

130
00:05:51,360 --> 00:05:53,160
Now set the definition

131
00:05:53,160 --> 00:05:55,440
um identifies the relationship from the

132
00:05:55,440 --> 00:05:58,860
injection site to a potential crash site

133
00:05:58,860 --> 00:06:01,320
in total we identified three boxes

134
00:06:01,320 --> 00:06:03,840
patterns and the example we went through

135
00:06:03,840 --> 00:06:06,479
just now is a example of conditional

136
00:06:06,479 --> 00:06:08,580
broadband

137
00:06:08,580 --> 00:06:10,139
so following that is the conditional

138
00:06:10,139 --> 00:06:13,560
axis pattern which is defined with

139
00:06:13,560 --> 00:06:17,280
existing conditional statement like if

140
00:06:17,280 --> 00:06:18,360
them here

141
00:06:18,360 --> 00:06:20,280
it involves the addition of a

142
00:06:20,280 --> 00:06:23,340
conjunctive brain expression like this

143
00:06:23,340 --> 00:06:25,979
this condition are symbols not equal to

144
00:06:25,979 --> 00:06:26,699
now

145
00:06:26,699 --> 00:06:30,319
and on the thematic definition

146
00:06:30,319 --> 00:06:32,699
the variable being checked in that

147
00:06:32,699 --> 00:06:34,919
condition needs to be involved in a

148
00:06:34,919 --> 00:06:37,800
downstream reference that happens within

149
00:06:37,800 --> 00:06:41,960
the body of the conditional statement

150
00:06:42,419 --> 00:06:44,100
we also have the conditional sign

151
00:06:44,100 --> 00:06:46,919
pattern which is the additional if

152
00:06:46,919 --> 00:06:51,120
statement whose body is a assignment to

153
00:06:51,120 --> 00:06:53,280
a variable

154
00:06:53,280 --> 00:06:55,860
this variable being assigned needs to

155
00:06:55,860 --> 00:06:57,660
have a

156
00:06:57,660 --> 00:07:01,199
data dependence with down with the

157
00:07:01,199 --> 00:07:05,720
downflow the reference like this

158
00:07:06,780 --> 00:07:09,900
so the bucket patterns are defined with

159
00:07:09,900 --> 00:07:12,479
the context programmer and the sentence

160
00:07:12,479 --> 00:07:15,120
method of fixed router would pass it

161
00:07:15,120 --> 00:07:17,759
from while traversing software's program

162
00:07:17,759 --> 00:07:20,400
on the right is the example of the

163
00:07:20,400 --> 00:07:22,979
conditional board pattern

164
00:07:22,979 --> 00:07:24,840
since that is better during patent

165
00:07:24,840 --> 00:07:27,840
grammar or choices key variables

166
00:07:27,840 --> 00:07:30,360
like the compressed software variable

167
00:07:30,360 --> 00:07:31,139
here

168
00:07:31,139 --> 00:07:34,319
so it will chase the grammar all the way

169
00:07:34,319 --> 00:07:37,800
here to the pointer tracer

170
00:07:37,800 --> 00:07:41,240
on the implementation side

171
00:07:42,479 --> 00:07:45,060
the sentence measure is implemented with

172
00:07:45,060 --> 00:07:47,699
client St and the Matrix match is

173
00:07:47,699 --> 00:07:50,819
implemented with freezer fds analysis

174
00:07:50,819 --> 00:07:52,620
so key variables traced by the

175
00:07:52,620 --> 00:07:55,080
centimeter will be given to the measure

176
00:07:55,080 --> 00:07:59,880
as a input and used as 10 sources

177
00:07:59,880 --> 00:08:03,180
the park injector will reward the

178
00:08:03,180 --> 00:08:05,759
conditions with tracers in the match

179
00:08:05,759 --> 00:08:08,759
codes to to inject the Box

180
00:08:08,759 --> 00:08:12,960
so here it reverse the condition of

181
00:08:12,960 --> 00:08:16,620
symbols nautical null by removing it

182
00:08:16,620 --> 00:08:19,500
another thing the Bucking detection does

183
00:08:19,500 --> 00:08:22,199
is to distinguish the states for each

184
00:08:22,199 --> 00:08:24,979
indicted bug

185
00:08:25,199 --> 00:08:28,379
so when the execution of the input

186
00:08:28,379 --> 00:08:31,860
enters a branch that was rejected in the

187
00:08:31,860 --> 00:08:33,779
Arduino program

188
00:08:33,779 --> 00:08:36,539
the parking director will log a message

189
00:08:36,539 --> 00:08:38,820
of this injectable being triggered

190
00:08:38,820 --> 00:08:43,339
otherwise it will log in it is reached

191
00:08:44,219 --> 00:08:46,440
noting that the trigger state does not

192
00:08:46,440 --> 00:08:48,720
guarantee question the program and a

193
00:08:48,720 --> 00:08:51,300
question input of program May trigger

194
00:08:51,300 --> 00:08:54,360
multiple injector bugs

195
00:08:54,360 --> 00:08:57,060
therefore the the charge process by

196
00:08:57,060 --> 00:08:58,620
running affiliate input with the

197
00:08:58,620 --> 00:09:00,779
combinations of the triggered injected

198
00:09:00,779 --> 00:09:04,080
box enabled we Define two different

199
00:09:04,080 --> 00:09:06,360
courses for the injected box one

200
00:09:06,360 --> 00:09:08,640
injected bug itself is able to crash the

201
00:09:08,640 --> 00:09:10,440
program it is called an individual

202
00:09:10,440 --> 00:09:11,700
course

203
00:09:11,700 --> 00:09:14,399
and one two or more in general box need

204
00:09:14,399 --> 00:09:17,100
to be present for the crash

205
00:09:17,100 --> 00:09:20,399
they'll call the combination costs

206
00:09:20,399 --> 00:09:23,459
we've applied fixed reverter on terrible

207
00:09:23,459 --> 00:09:27,839
programs and injected nearly 8 000 bucks

208
00:09:27,839 --> 00:09:31,320
we call the resulting for The Benchmark

209
00:09:31,320 --> 00:09:34,519
the real badge robot damage was

210
00:09:34,519 --> 00:09:36,720
integrated with spots bench for

211
00:09:36,720 --> 00:09:40,380
scalability and reproducibility

212
00:09:40,380 --> 00:09:43,380
so on the evaluation of fixed reverter

213
00:09:43,380 --> 00:09:46,440
we run the evaluation experiments on

214
00:09:46,440 --> 00:09:48,720
rubber bench with five others each with

215
00:09:48,720 --> 00:09:52,440
24 hours timeouts and three trials

216
00:09:52,440 --> 00:09:56,519
and here comes with the result of the

217
00:09:56,519 --> 00:09:59,940
experiment on the right is the number of

218
00:09:59,940 --> 00:10:02,519
individual courses for the five fathers

219
00:10:02,519 --> 00:10:06,300
growing over time the accesses is a time

220
00:10:06,300 --> 00:10:08,040
noted in hours

221
00:10:08,040 --> 00:10:10,019
we observe that our forefathers

222
00:10:10,019 --> 00:10:12,779
Financial crashes over 25 hours and

223
00:10:12,779 --> 00:10:15,540
there are over 200 individual courses

224
00:10:15,540 --> 00:10:17,220
identified

225
00:10:17,220 --> 00:10:19,920
When comparing a causes fathers we found

226
00:10:19,920 --> 00:10:22,260
FL plus plus performance best

227
00:10:22,260 --> 00:10:24,779
which is in line with some existing

228
00:10:24,779 --> 00:10:28,440
study like magma and first bench

229
00:10:28,440 --> 00:10:30,720
so this supposed to claim that fixed

230
00:10:30,720 --> 00:10:33,420
reverter injects extra box

231
00:10:33,420 --> 00:10:37,019
we also observe that after 24 hours all

232
00:10:37,019 --> 00:10:39,839
five others were able to still detect

233
00:10:39,839 --> 00:10:42,600
some individual causes

234
00:10:42,600 --> 00:10:45,300
this means some injected Box by fixed

235
00:10:45,300 --> 00:10:47,339
rotor are actually challenging for the

236
00:10:47,339 --> 00:10:50,180
fathers

237
00:10:50,760 --> 00:10:53,880
this slide shows one diagram of the

238
00:10:53,880 --> 00:10:56,459
individual box for the five fathers

239
00:10:56,459 --> 00:10:58,440
a large number of injective box can be

240
00:10:58,440 --> 00:11:00,839
found by most fathers but still

241
00:11:00,839 --> 00:11:03,600
a lot of each father is able to detect

242
00:11:03,600 --> 00:11:06,500
unique bugs

243
00:11:06,839 --> 00:11:09,660
we found that 90 of all individual

244
00:11:09,660 --> 00:11:11,040
causes

245
00:11:11,040 --> 00:11:13,680
were only found by one father

246
00:11:13,680 --> 00:11:16,920
so lots of injected bugs we are not

247
00:11:16,920 --> 00:11:19,320
detected by this in this experiment and

248
00:11:19,320 --> 00:11:21,899
actually fixed water does not offer such

249
00:11:21,899 --> 00:11:23,640
a guarantee

250
00:11:23,640 --> 00:11:26,820
we see this as a trade-off

251
00:11:26,820 --> 00:11:30,480
so if we use any approach that generates

252
00:11:30,480 --> 00:11:32,339
input which guarantees the

253
00:11:32,339 --> 00:11:36,060
crash of Enchanted bug a father that

254
00:11:36,060 --> 00:11:38,940
uses the same technology

255
00:11:38,940 --> 00:11:42,480
or some approach May overfit for the on

256
00:11:42,480 --> 00:11:44,519
the benchmarks that generated by fixed

257
00:11:44,519 --> 00:11:45,720
router

258
00:11:45,720 --> 00:11:48,600
so in conclusion we perform the study of

259
00:11:48,600 --> 00:11:51,959
rubber fixes and identified three real

260
00:11:51,959 --> 00:11:54,420
world buffets patterns we proposed this

261
00:11:54,420 --> 00:11:57,240
approach fixed reverter which injects

262
00:11:57,240 --> 00:11:59,700
box based on this patterns

263
00:11:59,700 --> 00:12:02,220
and we found that Victoria is able to

264
00:12:02,220 --> 00:12:04,680
enjoy box that are hard to find and

265
00:12:04,680 --> 00:12:06,779
cause extra crashes

266
00:12:06,779 --> 00:12:09,540
we have made rapper bench available at

267
00:12:09,540 --> 00:12:12,120
GitHub and also the QR code here

268
00:12:12,120 --> 00:12:14,399
concludes my presentation presentation

269
00:12:14,399 --> 00:12:17,000
thank you

