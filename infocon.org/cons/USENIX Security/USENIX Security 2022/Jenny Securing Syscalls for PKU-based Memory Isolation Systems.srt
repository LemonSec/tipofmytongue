1
00:00:08,300 --> 00:00:11,400
hi I'm David hammer and I'm presenting

2
00:00:11,400 --> 00:00:12,719
the paper trainee which is about

3
00:00:12,719 --> 00:00:14,519
securing ciscoils for protection key

4
00:00:14,519 --> 00:00:17,699
based memory isolation systems

5
00:00:17,699 --> 00:00:19,680
protection keys for user space allow

6
00:00:19,680 --> 00:00:21,539
efficient inter-process isolation on a

7
00:00:21,539 --> 00:00:23,699
fine granularity a few examples of such

8
00:00:23,699 --> 00:00:26,220
that boxes are Arium holder or donkey

9
00:00:26,220 --> 00:00:28,619
however these systems often do not

10
00:00:28,619 --> 00:00:31,080
sufficiently filter syscons and they

11
00:00:31,080 --> 00:00:33,600
also use very slow mechanisms or rely on

12
00:00:33,600 --> 00:00:35,940
custom Hardware to do so in this paper

13
00:00:35,940 --> 00:00:38,100
we analyze the Cisco interface for

14
00:00:38,100 --> 00:00:40,559
potential problems then we Define filter

15
00:00:40,559 --> 00:00:43,379
rules for different pqs and boxes we

16
00:00:43,379 --> 00:00:45,000
also analyzed Cisco interception

17
00:00:45,000 --> 00:00:47,460
mechanisms and on top of the donkeys

18
00:00:47,460 --> 00:00:49,440
framework we then implemented same

19
00:00:49,440 --> 00:00:51,239
thread Cisco filtering nested Cisco

20
00:00:51,239 --> 00:00:54,480
filtering and safe signal handling

21
00:00:54,480 --> 00:00:56,280
with protection keys for user space

22
00:00:56,280 --> 00:00:58,800
memory pages are tagged with so card

23
00:00:58,800 --> 00:01:01,379
with a so-called protection key the key

24
00:01:01,379 --> 00:01:03,120
is then stored in the page table entry

25
00:01:03,120 --> 00:01:06,060
and Intel CPUs these keys are 4 bit wide

26
00:01:06,060 --> 00:01:09,479
so 16 Keys exist in total

27
00:01:09,479 --> 00:01:12,000
the PQ register contains read and write

28
00:01:12,000 --> 00:01:14,820
permissions for each of these keys this

29
00:01:14,820 --> 00:01:16,680
allows for quick permission changes in

30
00:01:16,680 --> 00:01:17,939
your user space

31
00:01:17,939 --> 00:01:20,400
however for using a Sandbox one has to

32
00:01:20,400 --> 00:01:22,799
safeguard this register that means no

33
00:01:22,799 --> 00:01:24,960
unsafe instructions exist that may write

34
00:01:24,960 --> 00:01:27,479
to the register and also sys cards that

35
00:01:27,479 --> 00:01:29,280
may bypass this mechanism need to be

36
00:01:29,280 --> 00:01:30,780
blocked as well

37
00:01:30,780 --> 00:01:33,900
in a PKU setting we typically have a

38
00:01:33,900 --> 00:01:35,460
number of different protection domains

39
00:01:35,460 --> 00:01:37,439
within a single process as well as an

40
00:01:37,439 --> 00:01:39,420
in-process monitor

41
00:01:39,420 --> 00:01:41,640
donk is non-standard Hardware extension

42
00:01:41,640 --> 00:01:43,140
delivered this cards directly to the

43
00:01:43,140 --> 00:01:44,640
monitor before entering the account

44
00:01:44,640 --> 00:01:47,159
however an off-the-shelf CPUs this

45
00:01:47,159 --> 00:01:49,560
doesn't work instead ciskers get

46
00:01:49,560 --> 00:01:50,939
delivered to the kernel where they must

47
00:01:50,939 --> 00:01:53,340
be handled however the kernel is not

48
00:01:53,340 --> 00:01:56,159
aware of these use space domains moving

49
00:01:56,159 --> 00:01:57,540
complex filtering with logic to the

50
00:01:57,540 --> 00:01:58,920
kernel would increase the Kernel's

51
00:01:58,920 --> 00:02:01,020
attack surface alternatively we can

52
00:02:01,020 --> 00:02:02,700
dispatch the ciscars back to the monitor

53
00:02:02,700 --> 00:02:04,380
but this introduces additional context

54
00:02:04,380 --> 00:02:06,780
switches furthermore we might have

55
00:02:06,780 --> 00:02:08,818
nested domains which also want to filter

56
00:02:08,818 --> 00:02:11,459
their respective child domains in short

57
00:02:11,459 --> 00:02:13,920
there are a number of challenges such as

58
00:02:13,920 --> 00:02:16,040
the need for an efficient mechanism

59
00:02:16,040 --> 00:02:18,660
effective filters the kernel not being

60
00:02:18,660 --> 00:02:20,760
aware of user space domains nested

61
00:02:20,760 --> 00:02:24,840
domains signals and so on

62
00:02:24,840 --> 00:02:26,700
closing work pecanoid or showed some

63
00:02:26,700 --> 00:02:29,400
Cisco based attacks on pko systems for

64
00:02:29,400 --> 00:02:31,500
example via indirect memory accesses

65
00:02:31,500 --> 00:02:33,720
where the procfs and other discourse

66
00:02:33,720 --> 00:02:34,680
like

67
00:02:34,680 --> 00:02:37,500
process VM write or pit phrase mutably

68
00:02:37,500 --> 00:02:39,900
packed read-only memory second filters

69
00:02:39,900 --> 00:02:42,180
signal handlers which currently must run

70
00:02:42,180 --> 00:02:44,040
on an unprotected stack which leaves

71
00:02:44,040 --> 00:02:46,620
them vulnerable to attacks

72
00:02:46,620 --> 00:02:48,900
so by systematically analyzing the

73
00:02:48,900 --> 00:02:50,519
kernel interface we found many more

74
00:02:50,519 --> 00:02:52,620
assist cores that must be filtered for

75
00:02:52,620 --> 00:02:55,200
example the M advice this car which is

76
00:02:55,200 --> 00:02:56,700
typically used for to improve

77
00:02:56,700 --> 00:02:58,080
performance by giving the kernel

78
00:02:58,080 --> 00:03:00,720
additional memory information however an

79
00:03:00,720 --> 00:03:02,400
attacker can use it to clear pages

80
00:03:02,400 --> 00:03:04,920
irrespectively of their protection keys

81
00:03:04,920 --> 00:03:07,260
break and aspbrick typically used for

82
00:03:07,260 --> 00:03:10,019
managing Heap memory but it can be used

83
00:03:10,019 --> 00:03:11,760
to clear pages and even remove

84
00:03:11,760 --> 00:03:14,940
protection keys use the Ford ft can be

85
00:03:14,940 --> 00:03:16,560
used to handle page faults in user space

86
00:03:16,560 --> 00:03:19,440
but it allows to write arbitrary values

87
00:03:19,440 --> 00:03:22,019
to protected memory pages

88
00:03:22,019 --> 00:03:24,900
the personalities is cars can be used to

89
00:03:24,900 --> 00:03:26,760
make future mappings executable which

90
00:03:26,760 --> 00:03:28,560
indicates that right X are executed

91
00:03:28,560 --> 00:03:31,200
policy for pqs and boxes all the core

92
00:03:31,200 --> 00:03:33,060
dumps can cause information leakage for

93
00:03:33,060 --> 00:03:35,519
PQ sandboxes in the paper we describe

94
00:03:35,519 --> 00:03:37,440
many more pitfalls

95
00:03:37,440 --> 00:03:39,840
based analysisco analysis we derive

96
00:03:39,840 --> 00:03:41,700
three sets of filter rules for pqo

97
00:03:41,700 --> 00:03:44,099
sandbox first we Define base donkey

98
00:03:44,099 --> 00:03:46,500
where we assume dock is custom harder to

99
00:03:46,500 --> 00:03:49,319
present which protects the pkru register

100
00:03:49,319 --> 00:03:51,720
from being written to there we filter n

101
00:03:51,720 --> 00:03:53,519
is this calls to ensure memory isolation

102
00:03:53,519 --> 00:03:55,080
save signal handling and other

103
00:03:55,080 --> 00:03:56,640
application resources

104
00:03:56,640 --> 00:03:59,519
top of that we Define base x86 which

105
00:03:59,519 --> 00:04:01,260
additionally prevents exploitation from

106
00:04:01,260 --> 00:04:03,180
unsafe instructions

107
00:04:03,180 --> 00:04:05,760
also any executable mapping is scanned

108
00:04:05,760 --> 00:04:07,920
and made immutable finally we Define

109
00:04:07,920 --> 00:04:10,019
local storage which handles any file

110
00:04:10,019 --> 00:04:11,640
based discourse to allow for a per

111
00:04:11,640 --> 00:04:13,860
domain file system and the main private

112
00:04:13,860 --> 00:04:15,720
file descriptors

113
00:04:15,720 --> 00:04:18,000
we protect the memory on multiple layers

114
00:04:18,000 --> 00:04:21,060
first memory Itself by protecting it

115
00:04:21,060 --> 00:04:23,639
with protection Keys second we protect

116
00:04:23,639 --> 00:04:25,259
the memory mapping such that its

117
00:04:25,259 --> 00:04:26,639
permissions and keys cannot be changed

118
00:04:26,639 --> 00:04:28,680
third on disk if a mapping is file

119
00:04:28,680 --> 00:04:31,139
backed and also any aliases such as

120
00:04:31,139 --> 00:04:33,360
shared memory are symbolic links for

121
00:04:33,360 --> 00:04:35,639
efficiency region reasons we disable the

122
00:04:35,639 --> 00:04:37,680
process and the creation of core dumps

123
00:04:37,680 --> 00:04:40,740
to avoid scanning file paths

124
00:04:40,740 --> 00:04:42,840
to enforce our filters and accommodate

125
00:04:42,840 --> 00:04:44,520
for our features the underlying

126
00:04:44,520 --> 00:04:46,620
filtering mechanism must fulfill several

127
00:04:46,620 --> 00:04:49,259
requirements for example it must be able

128
00:04:49,259 --> 00:04:51,300
to delegate this curve to the user space

129
00:04:51,300 --> 00:04:53,820
monitor it must be the main aware to a

130
00:04:53,820 --> 00:04:56,400
certain degree such that trusted domain

131
00:04:56,400 --> 00:04:58,740
selector monitor are not filtered it

132
00:04:58,740 --> 00:05:00,660
must also allow for complex filters that

133
00:05:00,660 --> 00:05:02,400
main manipulate arguments or even

134
00:05:02,400 --> 00:05:04,860
replace them with differences scores we

135
00:05:04,860 --> 00:05:06,720
also need the ability to impersonate

136
00:05:06,720 --> 00:05:08,040
other domains

137
00:05:08,040 --> 00:05:10,560
for example when a parent domain filters

138
00:05:10,560 --> 00:05:12,419
a ciscal for child domain it should be

139
00:05:12,419 --> 00:05:14,280
able to execute this course on behalf of

140
00:05:14,280 --> 00:05:16,259
that filtered domain furthermore

141
00:05:16,259 --> 00:05:18,240
hierarchical domains must be supported

142
00:05:18,240 --> 00:05:20,220
as well and finally it should be not

143
00:05:20,220 --> 00:05:23,280
should not be too expensive

144
00:05:23,280 --> 00:05:25,740
we analyze the filtering mechanisms that

145
00:05:25,740 --> 00:05:27,780
exist in Linux today like Peter's SEC

146
00:05:27,780 --> 00:05:30,180
comp and so on however we found that

147
00:05:30,180 --> 00:05:31,800
none of them really fit our needs for

148
00:05:31,800 --> 00:05:33,180
example they're not the main aware

149
00:05:33,180 --> 00:05:35,460
Reliant insecure signal handlers are too

150
00:05:35,460 --> 00:05:37,979
limited to slow or not available in

151
00:05:37,979 --> 00:05:39,660
common CPUs

152
00:05:39,660 --> 00:05:41,539
foreign

153
00:05:41,539 --> 00:05:44,160
mechanism and implemented it as a kernel

154
00:05:44,160 --> 00:05:46,320
model we selectively intercept ciscals

155
00:05:46,320 --> 00:05:48,360
only if necessary and delegate them to

156
00:05:48,360 --> 00:05:50,340
the user space monitor for Revelation

157
00:05:50,340 --> 00:05:52,320
purposes we also added another mechanism

158
00:05:52,320 --> 00:05:55,620
where we modified the Lipsy so this

159
00:05:55,620 --> 00:05:57,479
patch this calls to the monitor

160
00:05:57,479 --> 00:05:59,160
this approximates the performance of

161
00:05:59,160 --> 00:06:02,400
donkey's Hardware extension for x86

162
00:06:02,400 --> 00:06:04,860
now let's move on to signals previously

163
00:06:04,860 --> 00:06:07,259
I mentioned signal handlers could not be

164
00:06:07,259 --> 00:06:09,360
used securely in a PQ sandbox because

165
00:06:09,360 --> 00:06:11,160
they could not run on protected Stacks

166
00:06:11,160 --> 00:06:13,680
so we propose a small kernel patch to

167
00:06:13,680 --> 00:06:16,020
change this Behavior and we provide an

168
00:06:16,020 --> 00:06:17,699
API such that domains can register

169
00:06:17,699 --> 00:06:19,919
handlers and filter or virtualize

170
00:06:19,919 --> 00:06:22,199
signals for child domains

171
00:06:22,199 --> 00:06:24,539
for nesting we allow parent domains to

172
00:06:24,539 --> 00:06:26,460
run filter codes before and after Cisco

173
00:06:26,460 --> 00:06:28,380
if there are more nesting layers the

174
00:06:28,380 --> 00:06:31,759
ciscors are handled as shown here

175
00:06:31,860 --> 00:06:34,139
in the paper we go into detail about

176
00:06:34,139 --> 00:06:36,660
many other design aspects such as why we

177
00:06:36,660 --> 00:06:38,220
want to have same threads filtering and

178
00:06:38,220 --> 00:06:41,639
how to achieve it even with P trees

179
00:06:41,639 --> 00:06:43,979
and also how to securely design filters

180
00:06:43,979 --> 00:06:45,900
that are free from time of check to time

181
00:06:45,900 --> 00:06:48,780
of use vulnerabilities and so on we also

182
00:06:48,780 --> 00:06:50,880
designed a new pqru Coral gate that is

183
00:06:50,880 --> 00:06:52,560
thread safe and allows for multiple

184
00:06:52,560 --> 00:06:54,900
domains

185
00:06:54,900 --> 00:06:56,580
let's talk about some performance

186
00:06:56,580 --> 00:06:57,720
numbers

187
00:06:57,720 --> 00:07:00,419
here we use trendy to sandbox a wide

188
00:07:00,419 --> 00:07:02,039
range of existing applications with

189
00:07:02,039 --> 00:07:03,600
different filtering mechanisms and

190
00:07:03,600 --> 00:07:06,240
filter sets for local storage shown in

191
00:07:06,240 --> 00:07:08,160
yellow we can see some slowdown for high

192
00:07:08,160 --> 00:07:10,740
file heavy applications like git

193
00:07:10,740 --> 00:07:12,840
however the other filter sets which will

194
00:07:12,840 --> 00:07:14,639
be used in practice shown in blue and

195
00:07:14,639 --> 00:07:16,440
green show a negligible overhead for

196
00:07:16,440 --> 00:07:18,660
most applications especially when using

197
00:07:18,660 --> 00:07:21,240
our PK user delegate mechanism you can

198
00:07:21,240 --> 00:07:23,340
also see that our pko user delegate

199
00:07:23,340 --> 00:07:24,960
mechanism is much faster than the other

200
00:07:24,960 --> 00:07:27,180
mechanisms this is because we only

201
00:07:27,180 --> 00:07:28,800
delegate this course back to the monitor

202
00:07:28,800 --> 00:07:31,020
when there are potentially unsafe or

203
00:07:31,020 --> 00:07:32,460
when a parent domain wants to filter

204
00:07:32,460 --> 00:07:34,440
them

205
00:07:34,440 --> 00:07:37,080
to conclude through systematic

206
00:07:37,080 --> 00:07:39,360
investigation of the Cisco interface we

207
00:07:39,360 --> 00:07:41,520
found several new attack vectors based

208
00:07:41,520 --> 00:07:43,020
on which we derived efficient filter

209
00:07:43,020 --> 00:07:45,660
rules we started existing and designed

210
00:07:45,660 --> 00:07:47,280
news's current opposition techniques for

211
00:07:47,280 --> 00:07:50,099
pko sandboxes we allow for the domain

212
00:07:50,099 --> 00:07:52,560
specific Cisco filtering and secure

213
00:07:52,560 --> 00:07:55,500
signal handling and we showed that PKU

214
00:07:55,500 --> 00:07:57,300
based sandboxing can still be practical

215
00:07:57,300 --> 00:08:00,479
even when properly secured

216
00:08:00,479 --> 00:08:03,680
thank you for your attention

