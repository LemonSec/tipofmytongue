1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:14,420 --> 00:00:19,619
but often Target Lincoln Equifax they

3
00:00:19,619 --> 00:00:21,660
all are victims

4
00:00:21,660 --> 00:00:24,300
so when attacks happen people crucial

5
00:00:24,300 --> 00:00:27,000
rely on system locks for forensics

6
00:00:27,000 --> 00:00:29,220
analysis

7
00:00:29,220 --> 00:00:32,220
indeed a recent survey by VMware carbon

8
00:00:32,220 --> 00:00:33,920
black indicates that

9
00:00:33,920 --> 00:00:36,600
locks are viewed as the most valuable

10
00:00:36,600 --> 00:00:40,379
artifact during incident investigations

11
00:00:40,379 --> 00:00:43,140
there is no surprising that the industry

12
00:00:43,140 --> 00:00:45,719
of Love management software has become a

13
00:00:45,719 --> 00:00:48,500
billion dollar business

14
00:00:48,719 --> 00:00:50,280
still

15
00:00:50,280 --> 00:00:53,579
locks are only valuable as long as they

16
00:00:53,579 --> 00:00:55,199
say the truth

17
00:00:55,199 --> 00:00:58,020
unfortunately attackers have long

18
00:00:58,020 --> 00:01:00,960
recognized the importance of blocks

19
00:01:00,960 --> 00:01:04,019
indeed locks with the very first Target

20
00:01:04,019 --> 00:01:07,820
of an experienced attacker

21
00:01:07,860 --> 00:01:10,740
to ensure luck Integrity a natural

22
00:01:10,740 --> 00:01:13,080
solution to side them with a message

23
00:01:13,080 --> 00:01:16,860
authentication goal or map

24
00:01:16,860 --> 00:01:19,680
however during an intrusion the

25
00:01:19,680 --> 00:01:21,780
adversary may be able to obtain the

26
00:01:21,780 --> 00:01:25,740
signing key and thus can forcefully tax

27
00:01:25,740 --> 00:01:28,320
to deal with this a classic work by

28
00:01:28,320 --> 00:01:31,380
polarity and gee suggests that we evolve

29
00:01:31,380 --> 00:01:34,500
the key after some certain iteration

30
00:01:34,500 --> 00:01:37,140
for example here you can obtain the key

31
00:01:37,140 --> 00:01:41,220
K2 by hashing the first ek1

32
00:01:41,220 --> 00:01:45,060
it that was really late obtains K2 it

33
00:01:45,060 --> 00:01:47,100
still knows nothing about K1

34
00:01:47,100 --> 00:01:49,979
and we can protect the Integrity of M1

35
00:01:49,979 --> 00:01:52,640
and M2

36
00:01:53,520 --> 00:01:55,500
there have been a number of follow-ups

37
00:01:55,500 --> 00:01:57,780
to improve the functionality of this

38
00:01:57,780 --> 00:01:59,460
basic blueprint

39
00:01:59,460 --> 00:02:01,680
the security of these schemes are

40
00:02:01,680 --> 00:02:04,320
generally not questioned the consensus

41
00:02:04,320 --> 00:02:06,740
is that they work

42
00:02:06,740 --> 00:02:10,318
surprisingly a recent attack by paganila

43
00:02:10,318 --> 00:02:13,860
at all broke all schemes in Linux

44
00:02:13,860 --> 00:02:15,540
how

45
00:02:15,540 --> 00:02:19,319
in Linux the Linux RS system produces

46
00:02:19,319 --> 00:02:21,720
slots in the kernel space

47
00:02:21,720 --> 00:02:24,360
lock and then send to the user space for

48
00:02:24,360 --> 00:02:26,099
the storage

49
00:02:26,099 --> 00:02:28,500
so all current systems are built in the

50
00:02:28,500 --> 00:02:31,860
user space signing logs before the

51
00:02:31,860 --> 00:02:34,620
storage processing

52
00:02:34,620 --> 00:02:37,140
unfortunately there's a delay between

53
00:02:37,140 --> 00:02:40,020
the time a lock is created and the time

54
00:02:40,020 --> 00:02:42,480
when it's committed

55
00:02:42,480 --> 00:02:44,760
and this Gap is big enough for the

56
00:02:44,760 --> 00:02:47,340
attacker to intercept and modify a lock

57
00:02:47,340 --> 00:02:50,459
before this sign

58
00:02:50,459 --> 00:02:54,420
to counter their own attack at all build

59
00:02:54,420 --> 00:02:56,700
a new locking scheme that it called

60
00:02:56,700 --> 00:02:58,500
Kenny lockings

61
00:02:58,500 --> 00:03:01,739
this scheme works in the kernel space

62
00:03:01,739 --> 00:03:04,440
signing a lock immediately when it's

63
00:03:04,440 --> 00:03:05,940
produced

64
00:03:05,940 --> 00:03:08,879
additionally Kenny Loggins would update

65
00:03:08,879 --> 00:03:11,580
a key right after its use

66
00:03:11,580 --> 00:03:14,459
meaning that a key now size only a

67
00:03:14,459 --> 00:03:16,940
single message

68
00:03:17,700 --> 00:03:20,099
moving to the kernel slide demonstration

69
00:03:20,099 --> 00:03:21,300
performance

70
00:03:21,300 --> 00:03:23,459
because it affects the learning type of

71
00:03:23,459 --> 00:03:26,040
all applications

72
00:03:26,040 --> 00:03:28,739
as the result Kenny logging has to go

73
00:03:28,739 --> 00:03:31,440
back to the basic blueprint of Larry and

74
00:03:31,440 --> 00:03:33,739
Eve

75
00:03:34,200 --> 00:03:36,720
in this work we build a new Locking

76
00:03:36,720 --> 00:03:39,480
System quick lock 2.

77
00:03:39,480 --> 00:03:42,440
it improves Kenny lockings in both

78
00:03:42,440 --> 00:03:45,720
efficiency and security

79
00:03:45,720 --> 00:03:49,140
for example on signing quick lock 2 it

80
00:03:49,140 --> 00:03:53,099
is about twice faster than Kenny Loggins

81
00:03:53,099 --> 00:03:55,739
and the speed Gap is much wider for

82
00:03:55,739 --> 00:03:57,420
verification

83
00:03:57,420 --> 00:04:00,060
so here can you lock it quick lock 2 is

84
00:04:00,060 --> 00:04:01,200
about

85
00:04:01,200 --> 00:04:04,080
six to ten times faster than Kenny

86
00:04:04,080 --> 00:04:05,459
loggings

87
00:04:05,459 --> 00:04:07,680
why should be Gap

88
00:04:07,680 --> 00:04:10,680
well because in practice we have just a

89
00:04:10,680 --> 00:04:13,799
single message decide the time but loss

90
00:04:13,799 --> 00:04:16,620
of data to verify

91
00:04:16,620 --> 00:04:19,620
our design exploits this abundance to

92
00:04:19,620 --> 00:04:22,260
wrap up the amortized speed of

93
00:04:22,260 --> 00:04:24,780
verification

94
00:04:24,780 --> 00:04:27,419
in contrast Kenny locking's

95
00:04:27,419 --> 00:04:30,479
gratification is even slower than its

96
00:04:30,479 --> 00:04:33,020
own signing

97
00:04:34,500 --> 00:04:36,780
our Improvement comes not just in time

98
00:04:36,780 --> 00:04:41,040
also in space cutting the storage cost

99
00:04:41,040 --> 00:04:43,919
so for any lockings uses an individual

100
00:04:43,919 --> 00:04:47,220
attack per law and its estimated started

101
00:04:47,220 --> 00:04:51,380
overhead is about 5.1 percent

102
00:04:51,479 --> 00:04:54,780
in contrast quick lock 2 uses an

103
00:04:54,780 --> 00:04:57,300
alligator tab for all logs

104
00:04:57,300 --> 00:05:02,240
and sparkly has no storage overhead

105
00:05:04,440 --> 00:05:08,220
our Improvement is efficiency comes in

106
00:05:08,220 --> 00:05:11,100
tandem with improved security

107
00:05:11,100 --> 00:05:14,580
because Kenny Loggins uses a tap to lock

108
00:05:14,580 --> 00:05:17,460
it is vulnerable to what is known as the

109
00:05:17,460 --> 00:05:18,900
truncation attack

110
00:05:18,900 --> 00:05:21,479
where an adversary released a couple of

111
00:05:21,479 --> 00:05:25,020
Reason locks to delay the detection of

112
00:05:25,020 --> 00:05:27,120
its inclusion

113
00:05:27,120 --> 00:05:31,080
in contrast quick lock 2 uses an

114
00:05:31,080 --> 00:05:33,840
aggregate attack for all locks and they

115
00:05:33,840 --> 00:05:37,580
can resist the truncation attack

116
00:05:37,919 --> 00:05:39,300
in addition

117
00:05:39,300 --> 00:05:42,479
quick lock 2 has a much smaller Secret

118
00:05:42,479 --> 00:05:44,880
meaning that it's easier to protect

119
00:05:44,880 --> 00:05:48,000
against Science Channel attacks

120
00:05:48,000 --> 00:05:50,820
in particular Kelly logins need to

121
00:05:50,820 --> 00:05:54,660
occupy 3.2 megabytes in kernel memory

122
00:05:54,660 --> 00:05:59,900
but quick lock 2 only needs 48 bytes

123
00:06:01,199 --> 00:06:03,780
until potential improvements we have to

124
00:06:03,780 --> 00:06:07,259
overcome several obstacles in the design

125
00:06:07,259 --> 00:06:10,740
naturally we want to use a mark to side

126
00:06:10,740 --> 00:06:12,360
log messages

127
00:06:12,360 --> 00:06:15,180
but it's quite a big gap between what

128
00:06:15,180 --> 00:06:17,759
standard map construction can provide

129
00:06:17,759 --> 00:06:22,580
and what locking applications desire

130
00:06:23,039 --> 00:06:25,259
Standard Market structures are optimized

131
00:06:25,259 --> 00:06:29,340
for long messages but labs are short

132
00:06:29,340 --> 00:06:32,520
in our benchmarks the typical lock site

133
00:06:32,520 --> 00:06:38,759
is from 64 bytes through 384 bytes

134
00:06:38,759 --> 00:06:41,940
moreover started my constructions

135
00:06:41,940 --> 00:06:45,539
offered apps are somewhat costly set up

136
00:06:45,539 --> 00:06:48,660
this is negligible in typical situations

137
00:06:48,660 --> 00:06:51,900
because you can cheaply amortize it when

138
00:06:51,900 --> 00:06:54,840
you sign many messages for key

139
00:06:54,840 --> 00:06:57,479
but here we have just a single message

140
00:06:57,479 --> 00:07:00,560
for our key

141
00:07:01,199 --> 00:07:03,780
so I put a voice dial to Quick

142
00:07:03,780 --> 00:07:06,840
authentication of short data

143
00:07:06,840 --> 00:07:08,940
and the standard quick fix to this

144
00:07:08,940 --> 00:07:13,440
problem is to use cpash a dedicated pif

145
00:07:13,440 --> 00:07:15,840
for short messages

146
00:07:15,840 --> 00:07:17,819
it's exactly the round of Kenny

147
00:07:17,819 --> 00:07:19,380
lockling's text

148
00:07:19,380 --> 00:07:21,240
it's reasonable

149
00:07:21,240 --> 00:07:24,740
but is there a better way

150
00:07:25,500 --> 00:07:28,319
in our solution we use a yes as a

151
00:07:28,319 --> 00:07:30,960
building block but the key idea is to

152
00:07:30,960 --> 00:07:33,479
separate the authentication key and the

153
00:07:33,479 --> 00:07:35,160
IES key

154
00:07:35,160 --> 00:07:37,500
the authentication key is still random

155
00:07:37,500 --> 00:07:40,139
and secret as usual

156
00:07:40,139 --> 00:07:45,240
but the isk is constant and public

157
00:07:45,240 --> 00:07:48,000
the trick of using fixed key is is

158
00:07:48,000 --> 00:07:51,599
widely used in NPC to improve the speed

159
00:07:51,599 --> 00:07:53,160
of gamble circuits

160
00:07:53,160 --> 00:07:55,979
and here it turns out to be useful for

161
00:07:55,979 --> 00:07:59,099
glocking too

162
00:07:59,099 --> 00:08:01,080
so here's an illustration of our

163
00:08:01,080 --> 00:08:03,318
Construction

164
00:08:03,900 --> 00:08:05,880
and let me stress that it's just a

165
00:08:05,880 --> 00:08:08,160
one-time Mark meaning that you can only

166
00:08:08,160 --> 00:08:11,340
sign one message per key and that's all

167
00:08:11,340 --> 00:08:14,220
we need for locking applications

168
00:08:14,220 --> 00:08:15,919
aiming for this weaker Target

169
00:08:15,919 --> 00:08:20,120
substantially simplifies the design

170
00:08:22,259 --> 00:08:25,139
now let me show you how to alligate Mac

171
00:08:25,139 --> 00:08:26,819
tabs

172
00:08:26,819 --> 00:08:30,120
an obvious benefit of tax aggregation is

173
00:08:30,120 --> 00:08:32,219
to reduce the stock cost

174
00:08:32,219 --> 00:08:35,279
and to resist the truncation attack

175
00:08:35,279 --> 00:08:38,580
but here it also improves the signing

176
00:08:38,580 --> 00:08:40,260
costs significantly

177
00:08:40,260 --> 00:08:43,140
because appending attack to a loud

178
00:08:43,140 --> 00:08:45,899
message turns out to be unexpectedly

179
00:08:45,899 --> 00:08:48,620
expensive

180
00:08:48,779 --> 00:08:51,839
so the aggregation method is simple

181
00:08:51,839 --> 00:08:55,800
just acts out the individual tags

182
00:08:55,800 --> 00:08:58,320
so this idea comes from a lovely paper

183
00:08:58,320 --> 00:09:00,600
by cars and Lindo

184
00:09:00,600 --> 00:09:03,120
but the justification for our use here

185
00:09:03,120 --> 00:09:07,040
goes beyond the abstraction there

186
00:09:07,080 --> 00:09:10,080
strangely the street has never been used

187
00:09:10,080 --> 00:09:14,220
in the Locking literature why

188
00:09:14,220 --> 00:09:17,459
because in Prior systems they sign many

189
00:09:17,459 --> 00:09:19,860
messages per key

190
00:09:19,860 --> 00:09:22,320
the security of the acts artery will

191
00:09:22,320 --> 00:09:25,200
break down completely in such a case

192
00:09:25,200 --> 00:09:28,380
because it allows an adversary to read

193
00:09:28,380 --> 00:09:31,740
other labs under the same key

194
00:09:31,740 --> 00:09:34,260
but here it works because we only sign

195
00:09:34,260 --> 00:09:37,580
one message perky

196
00:09:38,519 --> 00:09:41,339
and experiments confirm that our design

197
00:09:41,339 --> 00:09:43,860
does lead to Performance again

198
00:09:43,860 --> 00:09:45,779
so we call that quick luck two is about

199
00:09:45,779 --> 00:09:48,480
twice faster than Kenny loggings on

200
00:09:48,480 --> 00:09:50,339
signing

201
00:09:50,339 --> 00:09:53,459
and this translates to a similar Gap

202
00:09:53,459 --> 00:09:56,519
when we consider overheads unlocked

203
00:09:56,519 --> 00:09:59,540
intensive applications

204
00:09:59,580 --> 00:10:01,140
even better

205
00:10:01,140 --> 00:10:04,140
the Gap is quite bigger in busy

206
00:10:04,140 --> 00:10:06,720
multi-trendic environments

207
00:10:06,720 --> 00:10:09,420
this happens because Kenny loggings has

208
00:10:09,420 --> 00:10:13,380
another thread for key pre-computation

209
00:10:13,380 --> 00:10:16,200
this additional cost is well hidden in

210
00:10:16,200 --> 00:10:18,600
typical applications but it will show up

211
00:10:18,600 --> 00:10:21,660
inside the standard Nas Benchmark for

212
00:10:21,660 --> 00:10:24,920
high performance computing

213
00:10:26,399 --> 00:10:28,680
so you've seen design a quick look too

214
00:10:28,680 --> 00:10:32,519
and its statistics for performance gain

215
00:10:32,519 --> 00:10:35,100
in next few days when you go back to

216
00:10:35,100 --> 00:10:37,680
your company or your University

217
00:10:37,680 --> 00:10:41,040
please have a look at your it Department

218
00:10:41,040 --> 00:10:43,320
it's likely that the Locking System

219
00:10:43,320 --> 00:10:46,079
there is problematic

220
00:10:46,079 --> 00:10:48,959
or maybe your ID guys already use candy

221
00:10:48,959 --> 00:10:50,220
lovelings

222
00:10:50,220 --> 00:10:53,040
but in any case please tell them to

223
00:10:53,040 --> 00:10:55,200
upgrade to Quick lock 2.

224
00:10:55,200 --> 00:11:00,860
it's faster it's safer and it's free

