1
00:00:07,460 --> 00:00:10,980
hi welcome to my talk my name is yachang

2
00:00:10,980 --> 00:00:13,980
Sun I'd like to introduce reject scalpel

3
00:00:13,980 --> 00:00:16,199
regular expression denial of service

4
00:00:16,199 --> 00:00:19,920
redo s defense by localize and fix

5
00:00:19,920 --> 00:00:22,380
imagine a scenario here is a web

6
00:00:22,380 --> 00:00:24,660
application on the server side to verify

7
00:00:24,660 --> 00:00:27,300
whether the input email address is valid

8
00:00:27,300 --> 00:00:29,820
unfortunately the parsing time of the

9
00:00:29,820 --> 00:00:31,740
regular Expressions used here are super

10
00:00:31,740 --> 00:00:34,620
linear for some inputs on the client

11
00:00:34,620 --> 00:00:37,559
side a normal input such as ABC of def

12
00:00:37,559 --> 00:00:40,140
com which can be verified by the server

13
00:00:40,140 --> 00:00:41,219
immediately

14
00:00:41,219 --> 00:00:43,800
but for a malicious input such as yet a

15
00:00:43,800 --> 00:00:45,180
large number of C

16
00:00:45,180 --> 00:00:47,280
it will make the server run out of a lot

17
00:00:47,280 --> 00:00:49,500
of resources without feedback which is

18
00:00:49,500 --> 00:00:51,360
called redu s attack

19
00:00:51,360 --> 00:00:53,820
the existing redus defense strategies

20
00:00:53,820 --> 00:00:56,460
include regex engine substitution input

21
00:00:56,460 --> 00:00:58,980
length restriction and regex repair

22
00:00:58,980 --> 00:01:00,840
the weakness of rejects engine

23
00:01:00,840 --> 00:01:02,760
substitution is omitting extended

24
00:01:02,760 --> 00:01:04,799
features consuming space and bringing

25
00:01:04,799 --> 00:01:05,939
semantic differences or

26
00:01:05,939 --> 00:01:07,439
incompatibilities

27
00:01:07,439 --> 00:01:09,659
the weakness of input length restriction

28
00:01:09,659 --> 00:01:12,119
is facing a dilemma known as Goldilocks

29
00:01:12,119 --> 00:01:14,460
problem namely The Limited length is too

30
00:01:14,460 --> 00:01:17,159
short to accept all valid inputs or the

31
00:01:17,159 --> 00:01:19,200
length is too long to reject malicious

32
00:01:19,200 --> 00:01:22,439
inputs repairing vulnerable rejects can

33
00:01:22,439 --> 00:01:24,960
greatly mitigate their vulnerabilities

34
00:01:24,960 --> 00:01:27,240
our statistics in the table show that

35
00:01:27,240 --> 00:01:29,400
regex repairs the most common defense

36
00:01:29,400 --> 00:01:31,439
strategy adopted by developers or

37
00:01:31,439 --> 00:01:33,799
maintainers accounting for as high as

38
00:01:33,799 --> 00:01:35,820
92.19 percent

39
00:01:35,820 --> 00:01:38,820
however rejects repair is challenging

40
00:01:38,820 --> 00:01:40,860
the repaired rejects returned by

41
00:01:40,860 --> 00:01:42,600
exciting techniques may be still

42
00:01:42,600 --> 00:01:44,880
vulnerable to redus attacks and may not

43
00:01:44,880 --> 00:01:47,040
be semantically equivalent or similar to

44
00:01:47,040 --> 00:01:50,040
its original Rejects to overcome these

45
00:01:50,040 --> 00:01:52,560
challenges we proposed reject scalpel a

46
00:01:52,560 --> 00:01:54,899
rejects redo s vulnerability analysis

47
00:01:54,899 --> 00:01:57,119
and repair framework based on localize

48
00:01:57,119 --> 00:01:58,200
and fix

49
00:01:58,200 --> 00:02:00,180
reject scalpel can preserve the

50
00:02:00,180 --> 00:02:02,220
semantics of the original Rejects and

51
00:02:02,220 --> 00:02:04,439
the iterative repair method also keeps

52
00:02:04,439 --> 00:02:06,119
out vulnerabilities of the repaired

53
00:02:06,119 --> 00:02:07,439
Rejects

54
00:02:07,439 --> 00:02:09,899
reject scalp of first leverages the

55
00:02:09,899 --> 00:02:12,000
fine-grained vulnerability patterns to

56
00:02:12,000 --> 00:02:13,980
localize the vulnerabilities and obtain

57
00:02:13,980 --> 00:02:16,140
the information for the repair

58
00:02:16,140 --> 00:02:17,940
the information includes their

59
00:02:17,940 --> 00:02:19,860
vulnerable patterns the source that is

60
00:02:19,860 --> 00:02:22,440
the pathological sub-rejects is and the

61
00:02:22,440 --> 00:02:24,660
root causes for example the overlapping

62
00:02:24,660 --> 00:02:26,340
sub-rejexes

63
00:02:26,340 --> 00:02:28,500
reject scalpel then fixes the

64
00:02:28,500 --> 00:02:30,660
pathological sub-rejects as according to

65
00:02:30,660 --> 00:02:33,060
the repair patterns and the information

66
00:02:33,060 --> 00:02:34,920
the repair patterns use micro

67
00:02:34,920 --> 00:02:37,260
manipulations for example adding a look

68
00:02:37,260 --> 00:02:39,959
around deleting a quantifier sub-regics

69
00:02:39,959 --> 00:02:42,959
modifying a quantifier sub-regics to

70
00:02:42,959 --> 00:02:45,120
remove the overlapping paths or reducing

71
00:02:45,120 --> 00:02:47,700
the maximum times of backtracking

72
00:02:47,700 --> 00:02:50,099
reject scalpel next determines whether

73
00:02:50,099 --> 00:02:52,140
the repaired rejects are redo as

74
00:02:52,140 --> 00:02:54,180
invulnerable and whether it can pass all

75
00:02:54,180 --> 00:02:57,360
the given test cases if so the repaired

76
00:02:57,360 --> 00:02:59,879
rejects is called a successful one

77
00:02:59,879 --> 00:03:02,340
if not reject scalpel continues the

78
00:03:02,340 --> 00:03:04,980
vulnerability analysis and repairs it

79
00:03:04,980 --> 00:03:07,379
reject scalpel finally returns a

80
00:03:07,379 --> 00:03:09,540
repaired rejects randomly chosen from

81
00:03:09,540 --> 00:03:12,300
the successful ones next I will

82
00:03:12,300 --> 00:03:14,159
introduce the fine-grained vulnerable

83
00:03:14,159 --> 00:03:15,239
patterns

84
00:03:15,239 --> 00:03:17,640
reject scalpel uses these vulnerable

85
00:03:17,640 --> 00:03:19,560
patterns to localize the vulnerabilities

86
00:03:19,560 --> 00:03:21,599
and obtain the information for the

87
00:03:21,599 --> 00:03:22,440
repair

88
00:03:22,440 --> 00:03:25,140
the NQ pattern is a rejects with nested

89
00:03:25,140 --> 00:03:26,459
quantifiers

90
00:03:26,459 --> 00:03:28,440
the NQ pattern has worst case

91
00:03:28,440 --> 00:03:30,720
exponential behavior when a pump string

92
00:03:30,720 --> 00:03:32,519
can be consumed by either an inner

93
00:03:32,519 --> 00:03:34,500
quantifier or an outer one

94
00:03:34,500 --> 00:03:36,480
in order to facilitate fixing the

95
00:03:36,480 --> 00:03:39,120
pathological rejects we subdivided NQ

96
00:03:39,120 --> 00:03:41,280
pattern into three sub patterns that is

97
00:03:41,280 --> 00:03:46,260
nq1 nq2 and nq3 as shown in the table

98
00:03:46,260 --> 00:03:48,420
the qod pattern is a Quantified

99
00:03:48,420 --> 00:03:50,280
disjunction whose multiple inner

100
00:03:50,280 --> 00:03:52,260
sub-rejects is overlap

101
00:03:52,260 --> 00:03:54,599
when matching a pump string there are

102
00:03:54,599 --> 00:03:56,519
multiple choices among the overlapping

103
00:03:56,519 --> 00:03:59,040
sub-rejects with worst case exponential

104
00:03:59,040 --> 00:04:00,840
behavior on a mismatch

105
00:04:00,840 --> 00:04:03,900
we subdivided qod pattern into two sub

106
00:04:03,900 --> 00:04:07,860
patterns that is qo D1 and qod2 as shown

107
00:04:07,860 --> 00:04:09,060
in the table

108
00:04:09,060 --> 00:04:11,939
the qoa pattern is a Quantified rejects

109
00:04:11,939 --> 00:04:13,860
containing two adjacent overlapping

110
00:04:13,860 --> 00:04:15,540
sub-rejexes

111
00:04:15,540 --> 00:04:17,760
a pump string can be consumed by either

112
00:04:17,760 --> 00:04:20,160
of the overlapping adjacencies

113
00:04:20,160 --> 00:04:23,160
we subdivided qoa pattern into five sub

114
00:04:23,160 --> 00:04:27,479
patterns that is qoa1 to qoa5 as shown

115
00:04:27,479 --> 00:04:28,680
in the table

116
00:04:28,680 --> 00:04:31,199
the slq pattern is a reject starting

117
00:04:31,199 --> 00:04:33,120
with the sub-regx with a large

118
00:04:33,120 --> 00:04:34,380
quantifier

119
00:04:34,380 --> 00:04:37,199
the slq pattern may cause the rejects

120
00:04:37,199 --> 00:04:38,759
engine to keep moving the matching

121
00:04:38,759 --> 00:04:40,740
rejects across the malicious string that

122
00:04:40,740 --> 00:04:42,600
does not have a match for the rejects

123
00:04:42,600 --> 00:04:44,460
leading to worst case polynomial

124
00:04:44,460 --> 00:04:45,540
Behavior

125
00:04:45,540 --> 00:04:48,419
we subdivided slq pattern into five sub

126
00:04:48,419 --> 00:04:52,860
patterns that is slq1 to slq5 as shown

127
00:04:52,860 --> 00:04:54,060
in the table

128
00:04:54,060 --> 00:04:56,100
next I will introduce the repair

129
00:04:56,100 --> 00:04:59,220
patterns reject scalpel uses these

130
00:04:59,220 --> 00:05:00,720
repair patterns and vulnerability

131
00:05:00,720 --> 00:05:02,820
information to repair pathological

132
00:05:02,820 --> 00:05:04,500
sub-rejects

133
00:05:04,500 --> 00:05:06,660
the NQ pattern has a redundant

134
00:05:06,660 --> 00:05:10,020
quantifier by Nature so to fix and Q

135
00:05:10,020 --> 00:05:11,699
pattern we can remove the Redundant

136
00:05:11,699 --> 00:05:14,160
quantifier as shown in the table

137
00:05:14,160 --> 00:05:16,800
the qod pattern has multiple matching

138
00:05:16,800 --> 00:05:18,419
paths across the overlapping

139
00:05:18,419 --> 00:05:20,340
disjunctions for a string

140
00:05:20,340 --> 00:05:22,500
we need to ensure that there is a unique

141
00:05:22,500 --> 00:05:24,720
matching path for each string

142
00:05:24,720 --> 00:05:27,120
for that we propose three strategies

143
00:05:27,120 --> 00:05:29,280
namely deleting one overlapping

144
00:05:29,280 --> 00:05:30,900
disjunction adding a look around

145
00:05:30,900 --> 00:05:32,639
constraint to one overlapping

146
00:05:32,639 --> 00:05:34,380
disjunction and modifying one

147
00:05:34,380 --> 00:05:36,720
overlapping disjunction by subtracting

148
00:05:36,720 --> 00:05:38,460
the first set of the other one

149
00:05:38,460 --> 00:05:40,919
the qoa pattern contains the

150
00:05:40,919 --> 00:05:42,479
corresponding two overlapping

151
00:05:42,479 --> 00:05:43,860
adjacencies

152
00:05:43,860 --> 00:05:45,840
we need to ensure that only one

153
00:05:45,840 --> 00:05:48,060
overlapping adjacency would be selected

154
00:05:48,060 --> 00:05:50,940
when matching on a string we propose

155
00:05:50,940 --> 00:05:53,460
three repair strategies that is merging

156
00:05:53,460 --> 00:05:55,800
the overlapping adjacencies adding a

157
00:05:55,800 --> 00:05:57,240
look around constraint to one

158
00:05:57,240 --> 00:05:59,820
overlapping adjacency and modifying one

159
00:05:59,820 --> 00:06:01,919
overlapping adjacency

160
00:06:01,919 --> 00:06:05,520
the slq1 and slq2 patterns contain the

161
00:06:05,520 --> 00:06:07,139
sub-regic starting with a large

162
00:06:07,139 --> 00:06:08,400
quantifier

163
00:06:08,400 --> 00:06:12,900
the slq3 slq for an slq5 patterns

164
00:06:12,900 --> 00:06:15,840
contain the overlapping sub-regexes

165
00:06:15,840 --> 00:06:18,539
the slq pattern makes the rejects engine

166
00:06:18,539 --> 00:06:20,759
slide continuously to determine the

167
00:06:20,759 --> 00:06:22,860
starting position of the match

168
00:06:22,860 --> 00:06:25,560
so to fix slq pattern we need to

169
00:06:25,560 --> 00:06:27,300
eliminate or alleviate continuous

170
00:06:27,300 --> 00:06:30,120
sliding for that we proposed four

171
00:06:30,120 --> 00:06:32,639
strategies namely adding a start of line

172
00:06:32,639 --> 00:06:34,680
anchor to the pathological rejects

173
00:06:34,680 --> 00:06:36,780
replacing the large quantifier in the

174
00:06:36,780 --> 00:06:38,699
pathological rejects with a small one

175
00:06:38,699 --> 00:06:40,800
adding a look around constraint to one

176
00:06:40,800 --> 00:06:43,560
overlapping sub-regics and modifying one

177
00:06:43,560 --> 00:06:46,020
overlapping sub-regics by subtracting

178
00:06:46,020 --> 00:06:47,759
the first set of the other one

179
00:06:47,759 --> 00:06:50,280
take the redo West vulnerable rejects as

180
00:06:50,280 --> 00:06:51,360
an example

181
00:06:51,360 --> 00:06:55,080
the npm package no jstmpl used this

182
00:06:55,080 --> 00:06:57,060
rejects which aims to match the simple

183
00:06:57,060 --> 00:06:59,039
string formatting using the left and

184
00:06:59,039 --> 00:07:02,340
right brace as shown in the phase 1 the

185
00:07:02,340 --> 00:07:04,199
analyzer identified that the

186
00:07:04,199 --> 00:07:06,840
pathological sub-regx in the box is a

187
00:07:06,840 --> 00:07:08,819
possible vulnerability due to its two

188
00:07:08,819 --> 00:07:10,979
components are one and are two overlap

189
00:07:10,979 --> 00:07:13,319
the analyzer returned a triple namely

190
00:07:13,319 --> 00:07:15,300
the vulnerability information

191
00:07:15,300 --> 00:07:17,759
in the phase 2 the repair used for

192
00:07:17,759 --> 00:07:20,400
repair patterns to fix the vulnerability

193
00:07:20,400 --> 00:07:22,560
and then the very fear checked whether

194
00:07:22,560 --> 00:07:25,080
the repaired rejects are successful

195
00:07:25,080 --> 00:07:27,900
as demonstrated in the phase 3 except

196
00:07:27,900 --> 00:07:30,419
for the first one others are successful

197
00:07:30,419 --> 00:07:33,000
we randomly selected the fourth rejects

198
00:07:33,000 --> 00:07:34,740
to report to the maintainers and the

199
00:07:34,740 --> 00:07:37,039
maintainers confirmed it and released no

200
00:07:37,039 --> 00:07:40,740
jstmpl 1.0.5 with a fix

201
00:07:40,740 --> 00:07:43,020
our evaluation was conducted on the

202
00:07:43,020 --> 00:07:45,360
redoase vulnerable rejects as collected

203
00:07:45,360 --> 00:07:48,300
from two widely used sources the solar

204
00:07:48,300 --> 00:07:50,099
Dom Benchmark and real-world common

205
00:07:50,099 --> 00:07:52,380
vulnerabilities and exposures namely

206
00:07:52,380 --> 00:07:53,759
cves

207
00:07:53,759 --> 00:07:56,880
solar da Benchmark contains 34 redus

208
00:07:56,880 --> 00:07:59,340
vulnerable rejects as an npm modules

209
00:07:59,340 --> 00:08:01,560
found by the software Lab at tu

210
00:08:01,560 --> 00:08:05,580
darmstadt cve Benchmark contains 414

211
00:08:05,580 --> 00:08:07,620
redu ways vulnerable rejects is

212
00:08:07,620 --> 00:08:10,620
extracted from 70 Reedus related cves in

213
00:08:10,620 --> 00:08:12,419
recent three years where collected

214
00:08:12,419 --> 00:08:13,800
vulnerabilities without clear

215
00:08:13,800 --> 00:08:16,440
descriptions Live Links or test cases

216
00:08:16,440 --> 00:08:19,620
were discarded for comparison tools we

217
00:08:19,620 --> 00:08:21,660
selected three state-of-the-art tools

218
00:08:21,660 --> 00:08:23,940
belonging to three paradigms that is

219
00:08:23,940 --> 00:08:27,060
rejects engine substitution re2 input

220
00:08:27,060 --> 00:08:29,940
length restriction lli and regex repair

221
00:08:29,940 --> 00:08:33,059
flash rejects we consider a defense is

222
00:08:33,059 --> 00:08:35,279
successful if it passes all the given

223
00:08:35,279 --> 00:08:38,159
test cases and is free from reuse attack

224
00:08:38,159 --> 00:08:40,679
the success defense rate is calculated

225
00:08:40,679 --> 00:08:42,599
by dividing the number of successful

226
00:08:42,599 --> 00:08:44,520
defenses by the total number of

227
00:08:44,520 --> 00:08:46,920
vulnerable rejects under defense

228
00:08:46,920 --> 00:08:49,500
we evaluated the effectiveness of reject

229
00:08:49,500 --> 00:08:53,100
scalpelon 448 reduos vulnerable rejects

230
00:08:53,100 --> 00:08:55,680
comparing with different defense tools

231
00:08:55,680 --> 00:08:57,959
the table shows the number and ratio of

232
00:08:57,959 --> 00:08:59,459
rejects as it have been defended

233
00:08:59,459 --> 00:09:02,160
successfully we can learn that reject

234
00:09:02,160 --> 00:09:05,580
scalpel can effectively defend 98.88 of

235
00:09:05,580 --> 00:09:07,800
vulnerable rejects while the best

236
00:09:07,800 --> 00:09:10,620
exciting work can only defend 21.20

237
00:09:10,620 --> 00:09:13,200
percent of vulnerable Rejects

238
00:09:13,200 --> 00:09:15,720
apart from the automatic defense tools

239
00:09:15,720 --> 00:09:17,940
shown above we compared the repairs made

240
00:09:17,940 --> 00:09:19,980
by reject scalpel with the defending

241
00:09:19,980 --> 00:09:22,860
actions taken by the project maintainers

242
00:09:22,860 --> 00:09:24,899
we can learn from the table that among

243
00:09:24,899 --> 00:09:26,580
the repaired vulnerable rejects is

244
00:09:26,580 --> 00:09:29,180
handcrafted by the maintainers only

245
00:09:29,180 --> 00:09:32,339
77.23 are read us free

246
00:09:32,339 --> 00:09:35,220
reject scalpel outperforms manual fixing

247
00:09:35,220 --> 00:09:38,339
and successfully repairs 99.03 percent

248
00:09:38,339 --> 00:09:40,019
of Rejects

249
00:09:40,019 --> 00:09:42,600
we explored whether reject scalpel can

250
00:09:42,600 --> 00:09:44,640
detect newer us vulnerabilities in

251
00:09:44,640 --> 00:09:46,500
popular real-world projects and

252
00:09:46,500 --> 00:09:48,360
synthesize useful repairs to project

253
00:09:48,360 --> 00:09:49,740
maintainers

254
00:09:49,740 --> 00:09:52,380
as shown in the table reject scalpel

255
00:09:52,380 --> 00:09:54,600
detected and repaired 16 new radio s

256
00:09:54,600 --> 00:09:57,660
rejects as in 10 popular projects all

257
00:09:57,660 --> 00:09:59,820
the 16 repairs were accepted by the

258
00:09:59,820 --> 00:10:01,800
maintainers and merged into subsequent

259
00:10:01,800 --> 00:10:03,779
project releases resulting in eight

260
00:10:03,779 --> 00:10:05,519
confirmed cves

261
00:10:05,519 --> 00:10:08,040
furthermore we calculated the semantic

262
00:10:08,040 --> 00:10:09,720
similarities between the repaired

263
00:10:09,720 --> 00:10:12,240
Rejects and the original ones

264
00:10:12,240 --> 00:10:14,760
to measure the semantic similarity we

265
00:10:14,760 --> 00:10:17,100
try to use the first equation

266
00:10:17,100 --> 00:10:19,620
but the languages can be infinite so we

267
00:10:19,620 --> 00:10:21,480
adopted the second equation

268
00:10:21,480 --> 00:10:23,519
we can learn from the figure that for

269
00:10:23,519 --> 00:10:25,680
the benchmarks most similarities go

270
00:10:25,680 --> 00:10:27,600
beyond 98 percent

271
00:10:27,600 --> 00:10:30,620
on average the semantic similarity is

272
00:10:30,620 --> 00:10:32,640
99.57 percent

273
00:10:32,640 --> 00:10:35,100
this means that the semantics of rejects

274
00:10:35,100 --> 00:10:37,560
are well preserved after the repair

275
00:10:37,560 --> 00:10:40,140
in summary we proposed reject scalpel

276
00:10:40,140 --> 00:10:42,180
which can defend redus attacks by

277
00:10:42,180 --> 00:10:44,160
automatically localizing and repairing

278
00:10:44,160 --> 00:10:45,959
vulnerable Rejects

279
00:10:45,959 --> 00:10:48,360
the evaluation exhibits the remarkable

280
00:10:48,360 --> 00:10:51,180
effectiveness of reject scalpel it

281
00:10:51,180 --> 00:10:54,839
achieves 98.88 successful repair ratio

282
00:10:54,839 --> 00:10:57,899
compared with 21.20 percent achieved by

283
00:10:57,899 --> 00:10:59,760
the best existing work

284
00:10:59,760 --> 00:11:02,220
reject scalpel helped to repair 16

285
00:11:02,220 --> 00:11:04,620
redoase vulnerabilities in the 10 real

286
00:11:04,620 --> 00:11:06,899
world projects and got confirmed by the

287
00:11:06,899 --> 00:11:08,880
maintainers resulting in eight confirmed

288
00:11:08,880 --> 00:11:10,140
cves

289
00:11:10,140 --> 00:11:12,240
furthermore reject scalpel can

290
00:11:12,240 --> 00:11:14,100
synthesize repaired rejects as

291
00:11:14,100 --> 00:11:15,779
preserving the semantics of the original

292
00:11:15,779 --> 00:11:18,180
ones and keeping the semantics as close

293
00:11:18,180 --> 00:11:20,760
as possible to the original ones

294
00:11:20,760 --> 00:11:22,740
thank you for your attention I would be

295
00:11:22,740 --> 00:11:26,300
happy to answer any questions

