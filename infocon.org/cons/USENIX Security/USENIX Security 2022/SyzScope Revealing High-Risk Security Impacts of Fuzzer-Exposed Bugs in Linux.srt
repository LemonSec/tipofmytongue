1
00:00:07,460 --> 00:00:11,820
thank you hi uh my name is Charles a PhD

2
00:00:11,820 --> 00:00:14,519
student from UC Riverside so I'm the

3
00:00:14,519 --> 00:00:16,139
first one to present it this morning

4
00:00:16,139 --> 00:00:19,100
since we're getting up so early

5
00:00:19,100 --> 00:00:22,740
so my previous project Cisco riveting

6
00:00:22,740 --> 00:00:24,539
high-risk security impact of further

7
00:00:24,539 --> 00:00:27,599
exposed bug in Linux kernel

8
00:00:27,599 --> 00:00:30,240
and so funding is still the best way to

9
00:00:30,240 --> 00:00:32,820
find bugs in Linux kernel so how does

10
00:00:32,820 --> 00:00:35,880
fuzzing actually work so we further

11
00:00:35,880 --> 00:00:38,460
generate a bunch of test case and feed

12
00:00:38,460 --> 00:00:42,300
to the Q email which running the Linux

13
00:00:42,300 --> 00:00:44,640
kernel so if one test case fine it's

14
00:00:44,640 --> 00:00:47,340
Crash the kernel then the father will

15
00:00:47,340 --> 00:00:51,480
capture those uh output from the qml

16
00:00:51,480 --> 00:00:53,700
generate a bug report and report that

17
00:00:53,700 --> 00:00:56,579
back that thing with as a bug so we have

18
00:00:56,579 --> 00:00:58,980
some case on bugs some warning bugs

19
00:00:58,980 --> 00:01:01,500
General protection fault info or some

20
00:01:01,500 --> 00:01:04,500
other bugs so a box can be simply

21
00:01:04,500 --> 00:01:06,659
categorized into kernel sanitizers and

22
00:01:06,659 --> 00:01:09,060
kernel assertions for example the kernel

23
00:01:09,060 --> 00:01:11,820
address sanitizers uh aim to capture

24
00:01:11,820 --> 00:01:14,640
specific type of bugs like memory arrow

25
00:01:14,640 --> 00:01:17,280
and current assertions is just some

26
00:01:17,280 --> 00:01:18,900
instrumentation in the kernel for

27
00:01:18,900 --> 00:01:21,479
example this value should never distance

28
00:01:21,479 --> 00:01:24,180
zero so the developer could add a check

29
00:01:24,180 --> 00:01:27,000
see to check if this event vendor is

30
00:01:27,000 --> 00:01:30,060
less than 0 then we can throw a warning

31
00:01:30,060 --> 00:01:32,159
and general protection fault is more

32
00:01:32,159 --> 00:01:34,500
more about when you access uh for

33
00:01:34,500 --> 00:01:36,540
example user space memory or you write

34
00:01:36,540 --> 00:01:39,540
to a read-only data and some other bugs

35
00:01:39,540 --> 00:01:42,420
that cannot be simply categorized and

36
00:01:42,420 --> 00:01:45,360
they force into the bug bug so they just

37
00:01:45,360 --> 00:01:48,600
start with a huge bug

38
00:01:48,600 --> 00:01:49,259
um

39
00:01:49,259 --> 00:01:52,020
okay different bug types have different

40
00:01:52,020 --> 00:01:55,920
security impact memory write books is

41
00:01:55,920 --> 00:01:59,100
has the severe security impact that

42
00:01:59,100 --> 00:02:01,079
probably could compromise the entire

43
00:02:01,079 --> 00:02:03,360
kernel for example by overwriting the

44
00:02:03,360 --> 00:02:06,180
uid GID or overwriting the function

45
00:02:06,180 --> 00:02:08,038
pointer the attacker could Grant the

46
00:02:08,038 --> 00:02:10,919
total control of the entire system

47
00:02:10,919 --> 00:02:13,860
so um I think waiting the memory write

48
00:02:13,860 --> 00:02:16,200
bug is fair enough to claim that they uh

49
00:02:16,200 --> 00:02:19,379
it's a high risk bug and we have invaded

50
00:02:19,379 --> 00:02:21,900
free so inventory equals to the double

51
00:02:21,900 --> 00:02:24,300
three so it basically creates a use

52
00:02:24,300 --> 00:02:27,000
after free because it's free twice so uh

53
00:02:27,000 --> 00:02:30,300
we claim that the inventory is also a

54
00:02:30,300 --> 00:02:33,599
high-res box besides that uh we have

55
00:02:33,599 --> 00:02:36,120
memory read books memory read bug is

56
00:02:36,120 --> 00:02:38,580
sometimes very useful because it's like

57
00:02:38,580 --> 00:02:40,440
a sensitive information out of the

58
00:02:40,440 --> 00:02:43,200
kernel space to the user space like we

59
00:02:43,200 --> 00:02:45,780
can dig the kcr offset or some other

60
00:02:45,780 --> 00:02:49,440
sensitive kernel address but uh by just

61
00:02:49,440 --> 00:02:51,360
using the rate capability we cannot

62
00:02:51,360 --> 00:02:53,519
exploit the kernel and we have some

63
00:02:53,519 --> 00:02:55,560
other long security bug like warning

64
00:02:55,560 --> 00:02:58,860
info General protection fault and bugs

65
00:02:58,860 --> 00:03:01,860
so their lung security bugs and they

66
00:03:01,860 --> 00:03:04,860
cannot just directly exploit the kernel

67
00:03:04,860 --> 00:03:07,860
so we think the memory read bugs and all

68
00:03:07,860 --> 00:03:09,959
the long security bugs we think they are

69
00:03:09,959 --> 00:03:12,480
low risk bugs by saying that we mean by

70
00:03:12,480 --> 00:03:14,340
using their capability showing their bug

71
00:03:14,340 --> 00:03:16,560
title like read like warning we don't

72
00:03:16,560 --> 00:03:17,700
think they are strong enough to

73
00:03:17,700 --> 00:03:20,159
compromise the kernel

74
00:03:20,159 --> 00:03:23,700
and the first problem for the fasting uh

75
00:03:23,700 --> 00:03:25,440
the the nearest kernel bug is that

76
00:03:25,440 --> 00:03:27,599
there's too many bugs to fix this spot

77
00:03:27,599 --> 00:03:29,340
is the world's largest ninja kernel

78
00:03:29,340 --> 00:03:32,099
founding platform it report more than

79
00:03:32,099 --> 00:03:33,840
four thousand bucks in the past four

80
00:03:33,840 --> 00:03:36,120
years and it constantly reports several

81
00:03:36,120 --> 00:03:38,519
bucks every day so you can see

82
00:03:38,519 --> 00:03:40,319
um there's still like one thousand bucks

83
00:03:40,319 --> 00:03:42,360
waiting to be patched so that you can

84
00:03:42,360 --> 00:03:45,900
imagine how how much stress that put on

85
00:03:45,900 --> 00:03:48,239
the developer's shoulder

86
00:03:48,239 --> 00:03:50,519
so we we can automate the bug

87
00:03:50,519 --> 00:03:53,159
discovering process but in terms of the

88
00:03:53,159 --> 00:03:56,640
bug fixing we still relies on human work

89
00:03:56,640 --> 00:04:00,260
to fix each bug

90
00:04:00,299 --> 00:04:02,040
um so um

91
00:04:02,040 --> 00:04:04,739
so in such case a prioritization of the

92
00:04:04,739 --> 00:04:06,299
bug fixing is becoming something

93
00:04:06,299 --> 00:04:08,879
realistic for example the high risk bug

94
00:04:08,879 --> 00:04:11,640
need to be fixed as soon as possible but

95
00:04:11,640 --> 00:04:13,439
the low risk but we can wait until

96
00:04:13,439 --> 00:04:16,019
someone is free to fix them so for

97
00:04:16,019 --> 00:04:18,120
example we can see the average fixed

98
00:04:18,120 --> 00:04:20,940
time of use after free read book is 83

99
00:04:20,940 --> 00:04:24,600
days if as for the use you have a ride

100
00:04:24,600 --> 00:04:27,540
bug is only in 37 Days the same Theory

101
00:04:27,540 --> 00:04:30,060
applies to the other bound bugs so the

102
00:04:30,060 --> 00:04:32,940
right other bound box is only 29 days

103
00:04:32,940 --> 00:04:37,139
but for the read order is 89 days

104
00:04:37,139 --> 00:04:39,540
so there is some sort of prioritization

105
00:04:39,540 --> 00:04:42,479
to fix the to put the limited resources

106
00:04:42,479 --> 00:04:45,060
on more urgent bugs

107
00:04:45,060 --> 00:04:49,139
so it's a great strategy uh for uh for

108
00:04:49,139 --> 00:04:52,380
the limited resources so uh there is a

109
00:04:52,380 --> 00:04:54,060
bunch of low-risk bug and there is bunch

110
00:04:54,060 --> 00:04:56,460
of high risk but let's see uh let's fix

111
00:04:56,460 --> 00:04:59,880
those uh high-risk bugs this week and we

112
00:04:59,880 --> 00:05:01,860
can probably it's fine to leave those

113
00:05:01,860 --> 00:05:03,780
High a low response for next month

114
00:05:03,780 --> 00:05:05,340
because they probably just like affect

115
00:05:05,340 --> 00:05:06,660
the performance

116
00:05:06,660 --> 00:05:08,580
at least they cannot just exploit the

117
00:05:08,580 --> 00:05:10,139
kernel so it's fine to leave it for the

118
00:05:10,139 --> 00:05:12,600
future but what if

119
00:05:12,600 --> 00:05:17,280
some low res bug turn us to be high risk

120
00:05:17,280 --> 00:05:19,680
okay the consequences could be really

121
00:05:19,680 --> 00:05:20,960
bad

122
00:05:20,960 --> 00:05:23,940
but the reason is why like how could

123
00:05:23,940 --> 00:05:26,220
this happen

124
00:05:26,220 --> 00:05:28,979
to understand why some low response

125
00:05:28,979 --> 00:05:30,660
could be turned into high risk we have

126
00:05:30,660 --> 00:05:33,360
to understand the uh underneath

127
00:05:33,360 --> 00:05:36,780
mechanism of fasting so as we know for

128
00:05:36,780 --> 00:05:40,020
instance test case to the Q email and in

129
00:05:40,020 --> 00:05:42,539
such case on the right hand side you can

130
00:05:42,539 --> 00:05:45,000
see there is a tree so in this case it's

131
00:05:45,000 --> 00:05:48,000
a warning so imagine we find this

132
00:05:48,000 --> 00:05:50,580
earning and we find a word what we do

133
00:05:50,580 --> 00:05:51,539
now

134
00:05:51,539 --> 00:05:53,699
the father said okay stop the execution

135
00:05:53,699 --> 00:05:56,220
and report it immediately

136
00:05:56,220 --> 00:05:59,280
so uh but you can see there's clearly

137
00:05:59,280 --> 00:06:02,460
two other impacts and more strong impact

138
00:06:02,460 --> 00:06:04,380
right behind this warning we have a

139
00:06:04,380 --> 00:06:07,680
double three we have a UF right so but

140
00:06:07,680 --> 00:06:09,780
stop the execution and Report which

141
00:06:09,780 --> 00:06:11,699
means they will the warning will just

142
00:06:11,699 --> 00:06:13,979
crash the kernel the execution will just

143
00:06:13,979 --> 00:06:17,160
stop at this warning so what about those

144
00:06:17,160 --> 00:06:19,919
uh more critical impacts

145
00:06:19,919 --> 00:06:23,220
the father have no idea they exists so

146
00:06:23,220 --> 00:06:26,819
the father just report this warning

147
00:06:26,819 --> 00:06:30,060
to the like the upstring or to the safe

148
00:06:30,060 --> 00:06:32,819
spot so this bug is labeled as a warning

149
00:06:32,819 --> 00:06:34,500
so that's a problem

150
00:06:34,500 --> 00:06:37,500
only in prison the first impact of a bug

151
00:06:37,500 --> 00:06:40,080
but the first impact may not represent

152
00:06:40,080 --> 00:06:43,460
the most critical impact

153
00:06:44,220 --> 00:06:46,919
so let's define the high risk impact and

154
00:06:46,919 --> 00:06:49,319
no risk impact we already know the UFO

155
00:06:49,319 --> 00:06:51,600
be right back and in value free are high

156
00:06:51,600 --> 00:06:54,060
risk but we have some follow-up impact

157
00:06:54,060 --> 00:06:55,860
but also considered high risk like

158
00:06:55,860 --> 00:06:57,720
counter flow hijacking which means the

159
00:06:57,720 --> 00:06:59,880
attacker could control the function

160
00:06:59,880 --> 00:07:02,819
pointer and arbitrary consume value

161
00:07:02,819 --> 00:07:05,400
right which means the attacker could

162
00:07:05,400 --> 00:07:07,860
control the uh what value right to these

163
00:07:07,860 --> 00:07:11,340
memory address the arbitrary constraint

164
00:07:11,340 --> 00:07:13,740
address right means the attacker could

165
00:07:13,740 --> 00:07:15,840
control the address that the value right

166
00:07:15,840 --> 00:07:16,979
to

167
00:07:16,979 --> 00:07:19,800
um okay so those three follow up impact

168
00:07:19,800 --> 00:07:22,680
can cannot be found by the father or no

169
00:07:22,680 --> 00:07:24,660
one so we have to use some Advanced

170
00:07:24,660 --> 00:07:27,300
program analysis tool to do to achieve

171
00:07:27,300 --> 00:07:29,880
that and we will see the reason in this

172
00:07:29,880 --> 00:07:30,780
slide

173
00:07:30,780 --> 00:07:33,120
okay here is the dummy you use that for

174
00:07:33,120 --> 00:07:35,039
free functions we just allocate a

175
00:07:35,039 --> 00:07:37,319
function and we free it and then we use

176
00:07:37,319 --> 00:07:41,759
it so easily this uh kernel address set

177
00:07:41,759 --> 00:07:43,680
a title could capture this user for free

178
00:07:43,680 --> 00:07:45,479
read

179
00:07:45,479 --> 00:07:49,199
um but you may say okay uh ways in the

180
00:07:49,199 --> 00:07:50,819
last example we just stopped at the

181
00:07:50,819 --> 00:07:53,639
first impact what happened if we just

182
00:07:53,639 --> 00:07:56,099
let the execution continue probably we

183
00:07:56,099 --> 00:07:58,259
will find this control flow hijacking uh

184
00:07:58,259 --> 00:08:00,479
in the in here right because the oops

185
00:08:00,479 --> 00:08:03,900
has been freed and so the uh the value

186
00:08:03,900 --> 00:08:05,580
in the groups could be controlled by the

187
00:08:05,580 --> 00:08:07,919
attacker then the function pointer was

188
00:08:07,919 --> 00:08:10,500
the referenced the father should capture

189
00:08:10,500 --> 00:08:12,120
it or not

190
00:08:12,120 --> 00:08:15,979
let's see what happened in this line

191
00:08:16,139 --> 00:08:19,620
um when we assign this uh array there uh

192
00:08:19,620 --> 00:08:22,560
the index zero in this array to the

193
00:08:22,560 --> 00:08:24,240
function pointer it's equals to just

194
00:08:24,240 --> 00:08:26,699
deriven this data pointer but remember

195
00:08:26,699 --> 00:08:30,060
this oops pointer has come from a free

196
00:08:30,060 --> 00:08:33,059
memory so the father cannot control the

197
00:08:33,059 --> 00:08:35,700
content of this free memory so this oops

198
00:08:35,700 --> 00:08:37,860
could be any value for example if it's

199
00:08:37,860 --> 00:08:40,620
zero then the kernel panic it triggers

200
00:08:40,620 --> 00:08:43,740
the no pointer to reference or the data

201
00:08:43,740 --> 00:08:45,320
pointer is

202
00:08:45,320 --> 00:08:47,820
non-memory value it when the direction

203
00:08:47,820 --> 00:08:49,680
this data pointer it still crashed the

204
00:08:49,680 --> 00:08:51,899
kernel so

205
00:08:51,899 --> 00:08:52,760
um

206
00:08:52,760 --> 00:08:55,740
oftentimes at this line the kernel just

207
00:08:55,740 --> 00:08:57,000
crashed

208
00:08:57,000 --> 00:09:00,060
then we will get nothing uh the

209
00:09:00,060 --> 00:09:01,920
execution will just stop

210
00:09:01,920 --> 00:09:04,980
so but imagine how a real world attacker

211
00:09:04,980 --> 00:09:08,040
to uh exploit such vulnerability they

212
00:09:08,040 --> 00:09:11,399
use Heap spray hip spray uh managed to

213
00:09:11,399 --> 00:09:14,040
control adding bytes on this freed

214
00:09:14,040 --> 00:09:16,019
memory so is there any technique that's

215
00:09:16,019 --> 00:09:18,000
similar to The Hip spray like in the

216
00:09:18,000 --> 00:09:21,180
program analysis field yes it's uh some

217
00:09:21,180 --> 00:09:24,180
modification and this house is scope to

218
00:09:24,180 --> 00:09:28,860
uh simulate this hip spray process we um

219
00:09:28,860 --> 00:09:32,580
symbolize the entire free memory and so

220
00:09:32,580 --> 00:09:34,800
in this line we can capture this okay

221
00:09:34,800 --> 00:09:37,200
it's read from a free memory then we

222
00:09:37,200 --> 00:09:41,459
identical identify this uaf read and in

223
00:09:41,459 --> 00:09:42,899
this line

224
00:09:42,899 --> 00:09:45,779
it delivers a symbolic data pointer it's

225
00:09:45,779 --> 00:09:47,760
fine it's symbolic value it doesn't have

226
00:09:47,760 --> 00:09:50,459
any concrete values it doesn't panic

227
00:09:50,459 --> 00:09:51,540
anything

228
00:09:51,540 --> 00:09:54,180
and the function comes from a symbolic

229
00:09:54,180 --> 00:09:56,580
data pointer which the symbolic value

230
00:09:56,580 --> 00:09:58,260
propagates to the function so the

231
00:09:58,260 --> 00:10:01,220
function pointer is also symbolic

232
00:10:01,220 --> 00:10:03,540
and finally

233
00:10:03,540 --> 00:10:06,480
with the referencing a symbolic function

234
00:10:06,480 --> 00:10:08,040
pointer this is captured by the

235
00:10:08,040 --> 00:10:10,260
symbolics engine so

236
00:10:10,260 --> 00:10:13,260
we know that it it's a control flow

237
00:10:13,260 --> 00:10:15,740
hijacking

238
00:10:16,260 --> 00:10:19,200
um and this is the workflow of Cisco we

239
00:10:19,200 --> 00:10:22,019
have the first section is the funding we

240
00:10:22,019 --> 00:10:24,540
provide more context for the further

241
00:10:24,540 --> 00:10:26,700
static analysis and for the suboxation

242
00:10:26,700 --> 00:10:30,180
so there's a lot of 30 technical details

243
00:10:30,180 --> 00:10:33,540
uh behind but we have little bit time so

244
00:10:33,540 --> 00:10:35,220
I don't want to jump into too much

245
00:10:35,220 --> 00:10:37,500
details so there's like how we apply the

246
00:10:37,500 --> 00:10:39,600
entire symbolization on the Kernel and

247
00:10:39,600 --> 00:10:41,820
how we use static addresses to mitigate

248
00:10:41,820 --> 00:10:44,220
the past explosion problem so if you're

249
00:10:44,220 --> 00:10:46,200
interested could read our paper but

250
00:10:46,200 --> 00:10:48,899
there's like I try to like like write

251
00:10:48,899 --> 00:10:51,480
all those codes to explain this but we

252
00:10:51,480 --> 00:10:53,519
just don't have that much time so we're

253
00:10:53,519 --> 00:10:56,640
strong jump right into the evaluation

254
00:10:56,640 --> 00:10:59,399
so among the uh one more than one

255
00:10:59,399 --> 00:11:01,740
thousand value bugs from the six spots

256
00:11:01,740 --> 00:11:03,540
this is our data set more than one

257
00:11:03,540 --> 00:11:06,060
thousand bucks we find actually around

258
00:11:06,060 --> 00:11:07,500
20 percent

259
00:11:07,500 --> 00:11:12,779
uh 183 bucks that low response that they

260
00:11:12,779 --> 00:11:14,880
can be turned into high risk so in the

261
00:11:14,880 --> 00:11:17,700
past four years they spot only five uh

262
00:11:17,700 --> 00:11:20,100
one around 170 high-risk buck so we

263
00:11:20,100 --> 00:11:22,560
already doubled the number of high-risk

264
00:11:22,560 --> 00:11:25,620
bucks and 15 of them they are actually

265
00:11:25,620 --> 00:11:27,899
high risk warning and info which means

266
00:11:27,899 --> 00:11:31,380
those warning and info have at least one

267
00:11:31,380 --> 00:11:34,440
hybrid security impact and 17 of them

268
00:11:34,440 --> 00:11:35,940
they are General protection fault and

269
00:11:35,940 --> 00:11:39,360
bug and among those 183 high response we

270
00:11:39,360 --> 00:11:41,519
find 179 country flow hygiene which

271
00:11:41,519 --> 00:11:45,540
consider the top risky capability here's

272
00:11:45,540 --> 00:11:47,640
the breakdown of all the capability we

273
00:11:47,640 --> 00:11:50,519
have and we find you can I highlight

274
00:11:50,519 --> 00:11:54,180
some uh data like the um

275
00:11:54,180 --> 00:11:56,519
arbitrary address right the obituary

276
00:11:56,519 --> 00:11:58,680
value right the control flow hijacking

277
00:11:58,680 --> 00:12:01,860
the invalid free

278
00:12:01,860 --> 00:12:03,839
um so we these clothes are fighting to

279
00:12:03,839 --> 00:12:05,880
the survey maintainers and we got some

280
00:12:05,880 --> 00:12:08,339
CV assigned and we are happy to see that

281
00:12:08,339 --> 00:12:10,620
when the CV assigns several thumbstream

282
00:12:10,620 --> 00:12:13,019
distributions a patch this vulnerability

283
00:12:13,019 --> 00:12:16,560
immediately with uh we're happy to see

284
00:12:16,560 --> 00:12:18,060
we make some contribution to the

285
00:12:18,060 --> 00:12:20,239
community

286
00:12:20,820 --> 00:12:23,220
um and that's all for my talk and ready

287
00:12:23,220 --> 00:12:26,240
to take any questions

