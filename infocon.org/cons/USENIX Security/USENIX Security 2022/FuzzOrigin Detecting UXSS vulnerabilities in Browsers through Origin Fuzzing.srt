1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:10,519 --> 00:00:13,980
and I'm working at Samsung research in

3
00:00:13,980 --> 00:00:16,020
this talk I will introduce our project

4
00:00:16,020 --> 00:00:19,140
work to find the uxs vulnerability in

5
00:00:19,140 --> 00:00:20,820
web browser

6
00:00:20,820 --> 00:00:22,920
this work is collaborated with young

7
00:00:22,920 --> 00:00:26,640
Ming kimono Swanson kangoli and my

8
00:00:26,640 --> 00:00:29,580
notification only

9
00:00:29,580 --> 00:00:31,980
first let me introduce something about

10
00:00:31,980 --> 00:00:35,760
origin which is core ux responsibility

11
00:00:35,760 --> 00:00:39,360
origin consists of scheme host and perk

12
00:00:39,360 --> 00:00:42,960
and it can be retrieved from URL when a

13
00:00:42,960 --> 00:00:44,760
web portal is still resources from

14
00:00:44,760 --> 00:00:48,000
multiple server and render those into a

15
00:00:48,000 --> 00:00:50,760
page each resource has the address of

16
00:00:50,760 --> 00:00:55,379
server daily search as origin

17
00:00:55,379 --> 00:00:58,500
and the reason is the key basis of the

18
00:00:58,500 --> 00:01:01,260
most important security mechanism in the

19
00:01:01,260 --> 00:01:03,719
web browser called the same origin

20
00:01:03,719 --> 00:01:04,799
policy

21
00:01:04,799 --> 00:01:07,400
if tourism have any different element

22
00:01:07,400 --> 00:01:10,320
the origin are considered as close

23
00:01:10,320 --> 00:01:13,860
origin crystallization cannot lead light

24
00:01:13,860 --> 00:01:17,100
to execute each other

25
00:01:17,100 --> 00:01:19,740
closet script is the most well-known

26
00:01:19,740 --> 00:01:22,860
vulnerability in a web application

27
00:01:22,860 --> 00:01:25,619
using excess tests the attacker can

28
00:01:25,619 --> 00:01:28,140
inject a client-side script into the web

29
00:01:28,140 --> 00:01:29,100
page

30
00:01:29,100 --> 00:01:32,100
addition in the figure if the attacker

31
00:01:32,100 --> 00:01:34,080
inject the script into the vulnerable

32
00:01:34,080 --> 00:01:36,900
vulnerable web application B the

33
00:01:36,900 --> 00:01:39,840
injected script is also loaded when the

34
00:01:39,840 --> 00:01:42,960
victim load the page thereby performing

35
00:01:42,960 --> 00:01:44,460
custom scripting

36
00:01:44,460 --> 00:01:47,520
however thanks to the same origin policy

37
00:01:47,520 --> 00:01:50,340
in this case because the attacker inject

38
00:01:50,340 --> 00:01:53,280
the script into the application B the

39
00:01:53,280 --> 00:01:56,759
article script is executed as origin B

40
00:01:56,759 --> 00:02:01,740
and cannot access region a word c

41
00:02:01,740 --> 00:02:05,159
unlike xss the universal close the

42
00:02:05,159 --> 00:02:08,399
script targeted in this paper is the

43
00:02:08,399 --> 00:02:10,139
browser availability

44
00:02:10,139 --> 00:02:13,319
as you can see here suppose the victim

45
00:02:13,319 --> 00:02:15,840
learned the programmable project

46
00:02:15,840 --> 00:02:18,900
in this case when the victim requested

47
00:02:18,900 --> 00:02:21,540
resource from the attacker server the

48
00:02:21,540 --> 00:02:24,180
attacker script is executed the

49
00:02:24,180 --> 00:02:27,060
importance Point here is not about the

50
00:02:27,060 --> 00:02:29,819
fact that the script is simply excluded

51
00:02:29,819 --> 00:02:32,819
on the excess test but browsers the uxx

52
00:02:32,819 --> 00:02:35,700
vulnerability can bypass the same origin

53
00:02:35,700 --> 00:02:38,700
policy and allow the script to be

54
00:02:38,700 --> 00:02:41,700
executed with the reason other than the

55
00:02:41,700 --> 00:02:44,040
original origin

56
00:02:44,040 --> 00:02:47,340
therefore the attacker script can lead

57
00:02:47,340 --> 00:02:50,280
Knight and execute the origin a or

58
00:02:50,280 --> 00:02:51,780
origin C

59
00:02:51,780 --> 00:02:54,300
and even more the attacker script can

60
00:02:54,300 --> 00:02:56,519
result standard picture request to any

61
00:02:56,519 --> 00:02:58,200
other suburb

62
00:02:58,200 --> 00:03:01,739
since universal access vulnerability is

63
00:03:01,739 --> 00:03:04,620
stored in the browser very spoon can

64
00:03:04,620 --> 00:03:07,560
possible if only the exploit code is

65
00:03:07,560 --> 00:03:08,819
included

66
00:03:08,819 --> 00:03:11,640
this is the reason why uxx s

67
00:03:11,640 --> 00:03:14,459
vulnerability is considered as a much

68
00:03:14,459 --> 00:03:16,980
more critical vulnerabilities compared

69
00:03:16,980 --> 00:03:19,879
to xss

70
00:03:22,220 --> 00:03:25,739
if you create a function in di frame

71
00:03:25,739 --> 00:03:29,040
that is executed in the Mainframe called

72
00:03:29,040 --> 00:03:31,319
the parent function using the uxx

73
00:03:31,319 --> 00:03:34,620
availability and execute the script you

74
00:03:34,620 --> 00:03:36,959
can see the background become red

75
00:03:36,959 --> 00:03:39,540
in this way if you use the uxx

76
00:03:39,540 --> 00:03:41,940
vulnerability you can various things

77
00:03:41,940 --> 00:03:45,360
such as selling cookie or executing API

78
00:03:45,360 --> 00:03:47,640
in addition to change the background

79
00:03:47,640 --> 00:03:51,480
color to different region

80
00:03:51,480 --> 00:03:54,239
detecting these uxx vulnerability is not

81
00:03:54,239 --> 00:03:57,420
quite easy to highlight this problem

82
00:03:57,420 --> 00:04:00,659
let's think about with how we detect the

83
00:04:00,659 --> 00:04:03,440
classic traditional memory corruption

84
00:04:03,440 --> 00:04:05,760
detecting memory corruption is a quite

85
00:04:05,760 --> 00:04:06,959
straight part

86
00:04:06,959 --> 00:04:09,959
you just need to observe the case that's

87
00:04:09,959 --> 00:04:13,379
it however the uxx vulnerability

88
00:04:13,379 --> 00:04:16,798
involved complex semantic which it does

89
00:04:16,798 --> 00:04:19,978
not have thing like like is it to

90
00:04:19,978 --> 00:04:21,478
observe crisis

91
00:04:21,478 --> 00:04:25,020
so question is how we check the semantic

92
00:04:25,020 --> 00:04:28,460
correctness behind the reason

93
00:04:28,620 --> 00:04:31,440
having this question in mind we present

94
00:04:31,440 --> 00:04:34,380
a new pattern for the reason is to find

95
00:04:34,380 --> 00:04:36,120
the excess vulnerabilities through

96
00:04:36,120 --> 00:04:38,120
reporting

97
00:04:38,120 --> 00:04:42,600
is like this plus password generator and

98
00:04:42,600 --> 00:04:45,540
damage ttml Pi while generating this Pi

99
00:04:45,540 --> 00:04:47,580
puzzle is important two unique things

100
00:04:47,580 --> 00:04:50,520
the posting is the original sanitizer

101
00:04:50,520 --> 00:04:53,220
which allows us to keep track of true

102
00:04:53,220 --> 00:04:54,780
origin information

103
00:04:54,780 --> 00:04:57,479
other thing is the prioritizing the

104
00:04:57,479 --> 00:05:00,720
original update so that we can increase

105
00:05:00,720 --> 00:05:05,300
the chance to trigger uxx vulnerability

106
00:05:06,139 --> 00:05:09,419
deployed to multiple servers and the

107
00:05:09,419 --> 00:05:12,240
page is loaded by the browser

108
00:05:12,240 --> 00:05:14,940
when loading and rendering the page we

109
00:05:14,940 --> 00:05:17,580
can detect you access that and so g u

110
00:05:17,580 --> 00:05:19,220
access vulnerability

111
00:05:19,220 --> 00:05:22,880
accordingly reported

112
00:05:22,919 --> 00:05:25,860
executing this posing idea has several

113
00:05:25,860 --> 00:05:28,440
challenges the first challenge is that

114
00:05:28,440 --> 00:05:30,900
it is difficult to track the origin

115
00:05:30,900 --> 00:05:33,720
basically JavaScript doesn't have

116
00:05:33,720 --> 00:05:37,020
concept of origin tracking so we don't

117
00:05:37,020 --> 00:05:39,600
know where the script came from when it

118
00:05:39,600 --> 00:05:42,539
directly generated like eBay

119
00:05:42,539 --> 00:05:45,120
timer functions so change the timeout or

120
00:05:45,120 --> 00:05:47,699
event tender are also difficult to know

121
00:05:47,699 --> 00:05:51,120
each script is excrete because script is

122
00:05:51,120 --> 00:05:53,639
not executed immediately

123
00:05:53,639 --> 00:05:58,320
the second change lingi is the

124
00:05:58,320 --> 00:06:01,199
document is dynamically mutable since

125
00:06:01,199 --> 00:06:04,320
document is dynamically created and

126
00:06:04,320 --> 00:06:06,660
changed through the Dom API or

127
00:06:06,660 --> 00:06:09,060
JavaScript it is difficult to check

128
00:06:09,060 --> 00:06:12,060
correct origin because the document may

129
00:06:12,060 --> 00:06:15,180
be different from the initially loaded

130
00:06:15,180 --> 00:06:18,960
one moreover navigation which was not

131
00:06:18,960 --> 00:06:21,539
handled well in the existing Dom passing

132
00:06:21,539 --> 00:06:25,919
must also be handled

133
00:06:25,919 --> 00:06:28,680
to track the past challenges we

134
00:06:28,680 --> 00:06:30,900
developed the origin tagging and origin

135
00:06:30,900 --> 00:06:32,580
verification

136
00:06:32,580 --> 00:06:35,340
to this store we redefine notion of

137
00:06:35,340 --> 00:06:38,819
origin is following two Origin patch and

138
00:06:38,819 --> 00:06:42,479
origin xcc original is the origin which

139
00:06:42,479 --> 00:06:44,940
is the HTML was received and is

140
00:06:44,940 --> 00:06:47,280
aesthetically tagged as a string into

141
00:06:47,280 --> 00:06:51,080
HTML whereas in exac is the origin when

142
00:06:51,080 --> 00:06:54,180
origin is executed and can be obtained

143
00:06:54,180 --> 00:06:56,520
dynamically

144
00:06:56,520 --> 00:06:59,100
Paul's origin detect uxx vulnerabilities

145
00:06:59,100 --> 00:07:02,039
through origin sanitizer or instant

146
00:07:02,039 --> 00:07:04,620
integer is called the compare origin

147
00:07:04,620 --> 00:07:07,139
patch and raising existing defined

148
00:07:07,139 --> 00:07:10,080
earlier and the instrumentation at every

149
00:07:10,080 --> 00:07:13,380
entry point of script therefore whenever

150
00:07:13,380 --> 00:07:16,440
JavaScript is executed the origin State

151
00:07:16,440 --> 00:07:18,720
title compare region patch and origin

152
00:07:18,720 --> 00:07:21,599
existing to check to access the

153
00:07:21,599 --> 00:07:22,979
vulnerability

154
00:07:22,979 --> 00:07:25,919
entry point includes our global entry

155
00:07:25,919 --> 00:07:28,860
point a function entry point and a

156
00:07:28,860 --> 00:07:30,479
dynamic entry point

157
00:07:30,479 --> 00:07:33,900
pause origin grammar base the generation

158
00:07:33,900 --> 00:07:36,900
for JavaScript so origin sanitizer can

159
00:07:36,900 --> 00:07:39,780
be instrumented even when string is

160
00:07:39,780 --> 00:07:43,880
dynamically evaluated by cable

161
00:07:43,919 --> 00:07:47,340
because the universal access occur when

162
00:07:47,340 --> 00:07:49,979
there are multiple reasons instead of

163
00:07:49,979 --> 00:07:53,160
when there is only one origin puzzle

164
00:07:53,160 --> 00:07:54,599
region generates across origin

165
00:07:54,599 --> 00:07:57,240
navigation rather than just navigate to

166
00:07:57,240 --> 00:07:59,699
trigger you access the vulnerability

167
00:07:59,699 --> 00:08:01,979
across origin navigation can include

168
00:08:01,979 --> 00:08:04,500
both the main page navigation

169
00:08:04,500 --> 00:08:08,599
and so page navigation

170
00:08:09,539 --> 00:08:13,199
to trigger across origin navigation for

171
00:08:13,199 --> 00:08:15,539
those and try to invoke more navigation

172
00:08:15,539 --> 00:08:18,780
API when generating HTML

173
00:08:18,780 --> 00:08:22,020
navigation API has

174
00:08:22,020 --> 00:08:25,560
enemy sorry navigation API have HTML tag

175
00:08:25,560 --> 00:08:28,139
that can be generated with HTML and

176
00:08:28,139 --> 00:08:31,740
JavaScript and JavaScript API

177
00:08:31,740 --> 00:08:34,620
pause origin combined navigation with a

178
00:08:34,620 --> 00:08:37,200
event handler in Asian 2 simply

179
00:08:37,200 --> 00:08:39,958
generating navigation so that navigation

180
00:08:39,958 --> 00:08:42,839
event can be analyzed in many different

181
00:08:42,839 --> 00:08:44,520
contexts

182
00:08:44,520 --> 00:08:47,040
we call it on navigation API inside the

183
00:08:47,040 --> 00:08:49,740
very various event handler and the

184
00:08:49,740 --> 00:08:51,800
window navigation related event occur

185
00:08:51,800 --> 00:08:55,500
navigation occur again in event handler

186
00:08:55,500 --> 00:08:57,839
through this navigation events are

187
00:08:57,839 --> 00:09:00,779
changed so it lies more original update

188
00:09:00,779 --> 00:09:04,080
operation by browser

189
00:09:04,080 --> 00:09:07,140
to show the effectiveness over searching

190
00:09:07,140 --> 00:09:08,519
navigation

191
00:09:08,519 --> 00:09:10,800
we evaluate the past origin with the

192
00:09:10,800 --> 00:09:14,180
prism and tomato which are state of the

193
00:09:14,180 --> 00:09:17,040
Tomb pattern

194
00:09:17,040 --> 00:09:20,339
as you can see in this plant was origin

195
00:09:20,339 --> 00:09:22,260
through the highest number of navigation

196
00:09:22,260 --> 00:09:25,920
and unique Event Center occur compared

197
00:09:25,920 --> 00:09:28,019
to predomen tomato

198
00:09:28,019 --> 00:09:30,480
and it is also generating the most

199
00:09:30,480 --> 00:09:32,760
number of origin changes that it

200
00:09:32,760 --> 00:09:35,779
originally targeted

201
00:09:36,120 --> 00:09:38,459
by developing and evaluating Parts

202
00:09:38,459 --> 00:09:41,339
origin we found upon New York excess

203
00:09:41,339 --> 00:09:44,580
vulnerability in Chrome Empire ports all

204
00:09:44,580 --> 00:09:47,640
of these uxx issues were compounded by

205
00:09:47,640 --> 00:09:50,700
the corresponding vendors we would like

206
00:09:50,700 --> 00:09:52,560
to highlight the most of ux

207
00:09:52,560 --> 00:09:55,880
explanability liberated in the year

208
00:09:55,880 --> 00:10:00,600
2021 where it was reported by pastorism

209
00:10:00,600 --> 00:10:03,240
now please let me conclude the

210
00:10:03,240 --> 00:10:04,620
presentation

211
00:10:04,620 --> 00:10:07,800
we introduced the very first uxs puzzle

212
00:10:07,800 --> 00:10:10,320
for the reason for the origin includes

213
00:10:10,320 --> 00:10:12,959
two new methods Origins the entire to

214
00:10:12,959 --> 00:10:15,839
detect semant access vulnerability and a

215
00:10:15,839 --> 00:10:18,540
new HTML generation method to focus on

216
00:10:18,540 --> 00:10:20,820
finding ux responsibility

217
00:10:20,820 --> 00:10:23,040
we used to find for new you access

218
00:10:23,040 --> 00:10:26,040
vulnerability that demonstrates to

219
00:10:26,040 --> 00:10:29,040
strong effectiveness of fossil region

220
00:10:29,040 --> 00:10:31,260
thank you for listening and I'm ready

221
00:10:31,260 --> 00:10:33,860
for questions

