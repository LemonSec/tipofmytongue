1
00:00:07,880 --> 00:00:10,260
so today I'm going to talk to you about

2
00:00:10,260 --> 00:00:12,480
how you can take some of the ugliest

3
00:00:12,480 --> 00:00:15,480
code terrible code you can find put it

4
00:00:15,480 --> 00:00:17,640
into your process and still somehow

5
00:00:17,640 --> 00:00:20,039
survive

6
00:00:20,039 --> 00:00:23,039
so untrusted code is everywhere with

7
00:00:23,039 --> 00:00:26,880
plugins extensions libraries and somehow

8
00:00:26,880 --> 00:00:29,460
we still need to run it how do we do

9
00:00:29,460 --> 00:00:31,859
this the security Community has come up

10
00:00:31,859 --> 00:00:33,480
with all kinds of different approaches

11
00:00:33,480 --> 00:00:36,480
to handle such untrusted code one of

12
00:00:36,480 --> 00:00:38,760
which is software sandboxing in this

13
00:00:38,760 --> 00:00:41,160
talk I will be focusing on intra process

14
00:00:41,160 --> 00:00:44,040
sandboxing this is where you can take a

15
00:00:44,040 --> 00:00:45,600
bunch of different bits of code put them

16
00:00:45,600 --> 00:00:48,059
into sandboxes of their own and these

17
00:00:48,059 --> 00:00:50,399
sandboxes can only communicate or work

18
00:00:50,399 --> 00:00:51,719
with their environment through a series

19
00:00:51,719 --> 00:00:53,360
of trusted apis

20
00:00:53,360 --> 00:00:56,340
and indeed they cannot affect the

21
00:00:56,340 --> 00:00:58,559
environment in any other way here the

22
00:00:58,559 --> 00:01:00,420
environment refers both to the host

23
00:01:00,420 --> 00:01:02,340
process the other sandboxes in the same

24
00:01:02,340 --> 00:01:04,920
process and the outside world

25
00:01:04,920 --> 00:01:07,799
the primary goal with this of course uh

26
00:01:07,799 --> 00:01:10,200
is safety secondary but still important

27
00:01:10,200 --> 00:01:12,060
goals include performance and ease of

28
00:01:12,060 --> 00:01:13,979
use

29
00:01:13,979 --> 00:01:16,799
and in the space of the web this is

30
00:01:16,799 --> 00:01:18,920
where web assembly comes in

31
00:01:18,920 --> 00:01:21,500
people would like to compile

32
00:01:21,500 --> 00:01:23,820
all kinds of code from all different

33
00:01:23,820 --> 00:01:26,159
languages and still be able to run it in

34
00:01:26,159 --> 00:01:28,680
your browser but this code is generally

35
00:01:28,680 --> 00:01:31,200
untrusted it's the web after all and

36
00:01:31,200 --> 00:01:33,119
thus webassembly was born

37
00:01:33,119 --> 00:01:36,000
webassembly is intended to be safe for

38
00:01:36,000 --> 00:01:38,100
sandboxing indeed it promises

39
00:01:38,100 --> 00:01:40,320
lightweight safe and fast execution of

40
00:01:40,320 --> 00:01:41,880
untrusted code on the web

41
00:01:41,880 --> 00:01:44,759
but notice none of those properties are

42
00:01:44,759 --> 00:01:47,159
necessarily web specific we would like

43
00:01:47,159 --> 00:01:49,860
to do this beyond the web too and indeed

44
00:01:49,860 --> 00:01:52,140
many groups have recognized this and

45
00:01:52,140 --> 00:01:55,680
with things such as wozzi uh webassembly

46
00:01:55,680 --> 00:01:58,740
has now been used beyond the web too

47
00:01:58,740 --> 00:02:01,380
however these promises of safety are

48
00:02:01,380 --> 00:02:05,579
only as safe as the implementation

49
00:02:05,579 --> 00:02:07,979
and this is where our work comes in

50
00:02:07,979 --> 00:02:11,038
our contributions are that we explore

51
00:02:11,038 --> 00:02:13,080
two distinct techniques to achieve

52
00:02:13,080 --> 00:02:16,920
provably safe sandboxing the first is a

53
00:02:16,920 --> 00:02:18,840
formally verified sandboxing compiler

54
00:02:18,840 --> 00:02:21,360
where you get machine checked proofs of

55
00:02:21,360 --> 00:02:25,080
safety the second are wasum provides

56
00:02:25,080 --> 00:02:27,060
competitive performance with provable

57
00:02:27,060 --> 00:02:29,640
safety without the tedium of writing

58
00:02:29,640 --> 00:02:32,540
formal proofs

59
00:02:33,900 --> 00:02:36,720
oops sorry I did mention formal

60
00:02:36,720 --> 00:02:39,120
verification so a very brief dungeon

61
00:02:39,120 --> 00:02:40,680
formal verification provides

62
00:02:40,680 --> 00:02:42,599
mathematically strong guarantees about

63
00:02:42,599 --> 00:02:45,840
software using tools like f-star Daphne

64
00:02:45,840 --> 00:02:48,540
lean and so on we can specify properties

65
00:02:48,540 --> 00:02:50,940
as pre and post conditions and dependent

66
00:02:50,940 --> 00:02:54,180
types and such and then write proofs

67
00:02:54,180 --> 00:02:56,099
about the code these proofs are checked

68
00:02:56,099 --> 00:02:57,540
by the machine

69
00:02:57,540 --> 00:03:00,360
and these proofs look like we're right

70
00:03:00,360 --> 00:03:02,580
lemmas and then insert assertions into

71
00:03:02,580 --> 00:03:04,739
the code these assertions are checked

72
00:03:04,739 --> 00:03:07,800
statically at verification time rather

73
00:03:07,800 --> 00:03:09,780
than the normal assertions you're used

74
00:03:09,780 --> 00:03:11,159
to in most programming languages which

75
00:03:11,159 --> 00:03:12,959
are run at runtime since they're checked

76
00:03:12,959 --> 00:03:15,540
statically these assertions hold for any

77
00:03:15,540 --> 00:03:18,980
possible inputs to your software

78
00:03:19,140 --> 00:03:21,300
you may have heard of some traditional

79
00:03:21,300 --> 00:03:24,599
verified compilers such as with compsert

80
00:03:24,599 --> 00:03:27,239
a traditional verified compiler shows

81
00:03:27,239 --> 00:03:30,239
that the output codes behavior is

82
00:03:30,239 --> 00:03:32,819
equivalent to the behavior of the input

83
00:03:32,819 --> 00:03:35,159
code unfortunately

84
00:03:35,159 --> 00:03:37,620
this means that it's restricted to Safe

85
00:03:37,620 --> 00:03:39,599
input code turning into safe machine

86
00:03:39,599 --> 00:03:41,940
code and indeed it says nothing about

87
00:03:41,940 --> 00:03:44,580
unsafe or malicious input code

88
00:03:44,580 --> 00:03:46,980
with a sandboxing compiler what we would

89
00:03:46,980 --> 00:03:49,260
like to do is have safe code becomes a

90
00:03:49,260 --> 00:03:52,200
stay safe and unsafe or malicious code

91
00:03:52,200 --> 00:03:54,720
becomes safe somehow

92
00:03:54,720 --> 00:03:57,000
and this is where we wasn't comes in

93
00:03:57,000 --> 00:03:59,760
our top level theorem statement written

94
00:03:59,760 --> 00:04:02,700
in simplified form here looks a bit like

95
00:04:02,700 --> 00:04:05,159
this I don't expect you to read that

96
00:04:05,159 --> 00:04:08,280
written in simpler English if we start

97
00:04:08,280 --> 00:04:11,220
the program the compile code at any okay

98
00:04:11,220 --> 00:04:12,239
state

99
00:04:12,239 --> 00:04:15,540
if we run it for any number of steps we

100
00:04:15,540 --> 00:04:18,120
should still remain in an okay state

101
00:04:18,120 --> 00:04:20,399
what does this okay mean

102
00:04:20,399 --> 00:04:22,139
okay means that we only perform

103
00:04:22,139 --> 00:04:25,620
explicitly allowed Behavior

104
00:04:25,620 --> 00:04:27,600
since we're performing an allow list of

105
00:04:27,600 --> 00:04:29,880
behaviors this completely prevents

106
00:04:29,880 --> 00:04:31,680
things like out of bound memory accesses

107
00:04:31,680 --> 00:04:34,199
writing to read only memory for example

108
00:04:34,199 --> 00:04:37,259
or making calls to unsafe apis or

109
00:04:37,259 --> 00:04:39,960
arbitrary system calls and so on thus

110
00:04:39,960 --> 00:04:43,758
sandboxing is guaranteed this way

111
00:04:43,860 --> 00:04:45,900
what is the proof of such a theorem look

112
00:04:45,900 --> 00:04:46,919
like

113
00:04:46,919 --> 00:04:48,900
well it looks a bit like that it's about

114
00:04:48,900 --> 00:04:51,840
3 500 lines of code and proof and this

115
00:04:51,840 --> 00:04:54,300
is just for the sandboxing pass to set

116
00:04:54,300 --> 00:04:56,160
up the infrastructure the environment

117
00:04:56,160 --> 00:04:58,080
and getting all the way to having

118
00:04:58,080 --> 00:05:01,020
compilable runnable code it took about

119
00:05:01,020 --> 00:05:03,000
15 000 lines of code

120
00:05:03,000 --> 00:05:05,639
clearly this takes a lot of effort

121
00:05:05,639 --> 00:05:08,340
so at a high level what does this proof

122
00:05:08,340 --> 00:05:09,900
look like

123
00:05:09,900 --> 00:05:11,940
we first started off with coarse grain

124
00:05:11,940 --> 00:05:13,440
control flow integrity

125
00:05:13,440 --> 00:05:15,780
this allows us to introduce runtime

126
00:05:15,780 --> 00:05:18,120
software fault isolation checks that

127
00:05:18,120 --> 00:05:20,460
cannot be bypassed

128
00:05:20,460 --> 00:05:22,320
with the software fault isolation checks

129
00:05:22,320 --> 00:05:25,139
we ensure that the linear memory in

130
00:05:25,139 --> 00:05:27,000
webassembly the tables and so on are

131
00:05:27,000 --> 00:05:29,699
handled correctly

132
00:05:29,699 --> 00:05:33,240
the checks make sure that all accesses

133
00:05:33,240 --> 00:05:37,080
stay within a statically sized sandbox

134
00:05:37,080 --> 00:05:38,940
but of course this takes a lot of effort

135
00:05:38,940 --> 00:05:41,220
and this is where our wasm comes in it

136
00:05:41,220 --> 00:05:42,840
would be witchcraft if we could provide

137
00:05:42,840 --> 00:05:45,000
these guarantees without the tedium of

138
00:05:45,000 --> 00:05:46,680
formal proofs

139
00:05:46,680 --> 00:05:49,680
our Insight here is that if you lift

140
00:05:49,680 --> 00:05:52,139
untrusted code to a type or memory safe

141
00:05:52,139 --> 00:05:54,300
language then

142
00:05:54,300 --> 00:05:57,060
compile that to machine code

143
00:05:57,060 --> 00:05:59,400
that compiled machine code

144
00:05:59,400 --> 00:06:02,759
is imbued with the properties the safety

145
00:06:02,759 --> 00:06:04,800
properties that the type of memory safe

146
00:06:04,800 --> 00:06:07,699
language had

147
00:06:07,860 --> 00:06:10,380
in the case of R wasm we specifically

148
00:06:10,380 --> 00:06:12,180
pick rust

149
00:06:12,180 --> 00:06:15,180
we've across since it provides

150
00:06:15,180 --> 00:06:17,460
predictable performance it does not have

151
00:06:17,460 --> 00:06:18,840
a garbage collector

152
00:06:18,840 --> 00:06:22,139
for those who are aware we explicitly we

153
00:06:22,139 --> 00:06:24,300
explicitly stay in the safe subset of

154
00:06:24,300 --> 00:06:27,180
rust which means we forbid unsafe

155
00:06:27,180 --> 00:06:29,660
Behavior

156
00:06:30,600 --> 00:06:33,539
the orgasm sandbox saying thus the

157
00:06:33,539 --> 00:06:35,759
safety derives directly from the type

158
00:06:35,759 --> 00:06:38,460
safety and memory safety of rust

159
00:06:38,460 --> 00:06:40,979
the SFI checks still remain runtime

160
00:06:40,979 --> 00:06:44,400
checks however we can now rely upon the

161
00:06:44,400 --> 00:06:46,259
optimizations provided by the rust

162
00:06:46,259 --> 00:06:47,699
compiler

163
00:06:47,699 --> 00:06:50,400
this means that Superfluous or

164
00:06:50,400 --> 00:06:52,020
unnecessary checks are completely

165
00:06:52,020 --> 00:06:54,720
optimized aware

166
00:06:54,720 --> 00:06:56,460
since we're lifting to a higher level

167
00:06:56,460 --> 00:06:59,100
language we can actually experiment with

168
00:06:59,100 --> 00:07:01,740
different ideas uh in the case of our

169
00:07:01,740 --> 00:07:03,780
wasm we support both static and

170
00:07:03,780 --> 00:07:06,419
dynamically sized sandboxes

171
00:07:06,419 --> 00:07:08,400
and indeed other extensions can be

172
00:07:08,400 --> 00:07:10,620
provided easily

173
00:07:10,620 --> 00:07:12,419
this includes things like inline

174
00:07:12,419 --> 00:07:14,460
reference monitors that you can use to

175
00:07:14,460 --> 00:07:17,699
implement tracers and sanitizers

176
00:07:17,699 --> 00:07:20,880
and the really fun part is that these

177
00:07:20,880 --> 00:07:23,460
get optimized in tandem with the code

178
00:07:23,460 --> 00:07:25,440
that you're producing since the

179
00:07:25,440 --> 00:07:27,599
optimizer gets both the inline reference

180
00:07:27,599 --> 00:07:29,639
Monitor and the code and is able to

181
00:07:29,639 --> 00:07:32,539
optimize that together

182
00:07:32,759 --> 00:07:34,500
what is the sort of our wasm compilation

183
00:07:34,500 --> 00:07:37,039
to look like

184
00:07:37,080 --> 00:07:38,819
let's take a toy example where we're

185
00:07:38,819 --> 00:07:40,340
adding a bunch of numbers together

186
00:07:40,340 --> 00:07:42,840
specifically numbers one to N I don't

187
00:07:42,840 --> 00:07:46,520
expect you to read that webassembly code

188
00:07:46,800 --> 00:07:49,199
the lifter or wasm

189
00:07:49,199 --> 00:07:51,840
takes that code and performs almost a

190
00:07:51,840 --> 00:07:54,840
line by line translation

191
00:07:54,840 --> 00:07:57,240
this introduces a whole bunch of

192
00:07:57,240 --> 00:08:00,300
abstractions and indeed naive

193
00:08:00,300 --> 00:08:03,360
compilation of this to machine code

194
00:08:03,360 --> 00:08:07,259
would lead to extremely inefficient code

195
00:08:07,259 --> 00:08:10,860
however the optimizer can kick in and is

196
00:08:10,860 --> 00:08:12,300
able to blast away all of those

197
00:08:12,300 --> 00:08:14,400
abstractions that are introduced and is

198
00:08:14,400 --> 00:08:18,080
able to produce highly optimized code

199
00:08:19,500 --> 00:08:22,620
so how does this perform in practice

200
00:08:22,620 --> 00:08:25,500
we show that we wasm and our wasm are

201
00:08:25,500 --> 00:08:28,020
quite competitive with other compilers

202
00:08:28,020 --> 00:08:31,560
in this graph on the x-axis we have a

203
00:08:31,560 --> 00:08:33,919
collection of webassembly runtimes

204
00:08:33,919 --> 00:08:36,299
including interpreters and compilers

205
00:08:36,299 --> 00:08:38,339
I've highlighted we was in our wasm

206
00:08:38,339 --> 00:08:39,240
there

207
00:08:39,240 --> 00:08:42,539
these are sorted by median performance

208
00:08:42,539 --> 00:08:44,580
on a series of standard wasn't

209
00:08:44,580 --> 00:08:45,899
benchmarks

210
00:08:45,899 --> 00:08:48,240
on the y-axis we have normalized

211
00:08:48,240 --> 00:08:50,339
slowdown on a log scale

212
00:08:50,339 --> 00:08:53,040
this is normalized against pure native

213
00:08:53,040 --> 00:08:55,440
execution where you do not even include

214
00:08:55,440 --> 00:08:58,220
webassembly

215
00:08:59,279 --> 00:09:00,899
of course the inter

216
00:09:00,899 --> 00:09:03,000
are kind of slow

217
00:09:03,000 --> 00:09:05,940
and since we wasm is a compiler it is

218
00:09:05,940 --> 00:09:08,120
able to outperform the interpreters

219
00:09:08,120 --> 00:09:11,160
consistently on every single benchmark

220
00:09:11,160 --> 00:09:13,620
however we wasn't slower than all the

221
00:09:13,620 --> 00:09:15,480
other compilers

222
00:09:15,480 --> 00:09:18,120
our wasm itself trades blows back and

223
00:09:18,120 --> 00:09:21,300
forth with each benchmark

224
00:09:21,300 --> 00:09:24,000
and indeed for some of the longer

225
00:09:24,000 --> 00:09:26,820
running benchmarks it can sometimes be

226
00:09:26,820 --> 00:09:30,420
even two times as fast as even the

227
00:09:30,420 --> 00:09:32,279
fastest on the median which is the one

228
00:09:32,279 --> 00:09:35,760
on the right wavm

229
00:09:37,320 --> 00:09:40,500
so how let's also look at the trade-offs

230
00:09:40,500 --> 00:09:45,120
between we wasm and r wasm qualitatively

231
00:09:45,120 --> 00:09:47,820
for The Trusted Computing base we wasn't

232
00:09:47,820 --> 00:09:49,860
is formally verified with a traditional

233
00:09:49,860 --> 00:09:52,740
TCP which includes things like the

234
00:09:52,740 --> 00:09:54,300
verification language that we used

235
00:09:54,300 --> 00:09:59,580
f-star and The Trusted printer and so on

236
00:09:59,580 --> 00:10:01,860
in contrast R wasms since we're

237
00:10:01,860 --> 00:10:05,040
performing a lifting to a high level

238
00:10:05,040 --> 00:10:07,140
code we get portability across

239
00:10:07,140 --> 00:10:08,760
architectures for free which we wouldn't

240
00:10:08,760 --> 00:10:10,380
get in we wasm since we're directly

241
00:10:10,380 --> 00:10:13,399
talking about machine code

242
00:10:14,040 --> 00:10:17,760
and with Russ optimization we get better

243
00:10:17,760 --> 00:10:21,240
execution speed with our wasm

244
00:10:21,240 --> 00:10:23,940
however if we would like to extend the

245
00:10:23,940 --> 00:10:25,620
properties that we prove

246
00:10:25,620 --> 00:10:28,200
then we wasn't is much better suited

247
00:10:28,200 --> 00:10:31,140
since it is written in a verification

248
00:10:31,140 --> 00:10:33,060
oriented language

249
00:10:33,060 --> 00:10:35,880
however our wasm is better suited for

250
00:10:35,880 --> 00:10:37,680
runtime extensions as I talked about

251
00:10:37,680 --> 00:10:39,779
before

252
00:10:39,779 --> 00:10:41,940
with a high level language we do not

253
00:10:41,940 --> 00:10:43,980
need to worry about how it might for

254
00:10:43,980 --> 00:10:45,839
example mess with the register allocator

255
00:10:45,839 --> 00:10:47,880
if we introduced an inline reference

256
00:10:47,880 --> 00:10:50,300
monitor

257
00:10:50,399 --> 00:10:53,519
in terms of effort our wasm was

258
00:10:53,519 --> 00:10:55,800
significantly easier to work on both for

259
00:10:55,800 --> 00:10:58,019
initial development as well as ongoing

260
00:10:58,019 --> 00:11:00,380
maintenance

261
00:11:02,279 --> 00:11:03,899
in conclusion

262
00:11:03,899 --> 00:11:06,060
in this work we have explored two

263
00:11:06,060 --> 00:11:08,040
concrete compelling points in the design

264
00:11:08,040 --> 00:11:10,860
space for implementing provably safe

265
00:11:10,860 --> 00:11:13,680
sandboxing with webassembly

266
00:11:13,680 --> 00:11:16,320
we have shown that high performance and

267
00:11:16,320 --> 00:11:18,360
strong safety are not mutually exclusive

268
00:11:18,360 --> 00:11:20,160
goals

269
00:11:20,160 --> 00:11:23,940
and indeed there is a wide space that's

270
00:11:23,940 --> 00:11:26,279
interesting and Rich and open for

271
00:11:26,279 --> 00:11:28,620
further exploration

272
00:11:28,620 --> 00:11:32,399
all of our code is open source

273
00:11:32,399 --> 00:11:35,060
thank you

