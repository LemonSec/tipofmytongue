1
00:00:07,580 --> 00:00:12,059
hello hello everyone I'm igbeck I'm

2
00:00:12,059 --> 00:00:13,740
going to present our worker to write in

3
00:00:13,740 --> 00:00:16,440
the security of GitHub CI workloads the

4
00:00:16,440 --> 00:00:18,180
work was done in collaboration with

5
00:00:18,180 --> 00:00:20,760
interstate and Purity University

6
00:00:20,760 --> 00:00:24,600
let's refresh our knowledge of cicd cicd

7
00:00:24,600 --> 00:00:27,060
basically helps us to automate the

8
00:00:27,060 --> 00:00:29,519
Social Development process the basic

9
00:00:29,519 --> 00:00:32,880
idea of cicd is that developer commits

10
00:00:32,880 --> 00:00:36,000
any kind of changes to the repository

11
00:00:36,000 --> 00:00:38,940
which will on the other hand Trigger the

12
00:00:38,940 --> 00:00:40,800
build and then it will start building

13
00:00:40,800 --> 00:00:43,320
the code and ship to the I don't know

14
00:00:43,320 --> 00:00:46,680
cloud or to the users so cicd is part of

15
00:00:46,680 --> 00:00:48,719
Social Development supply chain and

16
00:00:48,719 --> 00:00:50,160
requires at least the same level of

17
00:00:50,160 --> 00:00:52,559
secure management at the final software

18
00:00:52,559 --> 00:00:55,079
in our opinion

19
00:00:55,079 --> 00:00:58,140
um sorry and what is the GitHub actions

20
00:00:58,140 --> 00:01:01,140
GitHub action is one of uh platforms

21
00:01:01,140 --> 00:01:04,920
that support cicd pipeline such as

22
00:01:04,920 --> 00:01:09,659
Travis Circle CI and others so it has a

23
00:01:09,659 --> 00:01:11,700
lot of features one of the interesting

24
00:01:11,700 --> 00:01:13,619
features is that it supports third party

25
00:01:13,619 --> 00:01:17,460
plugins allows to self-host the runner

26
00:01:17,460 --> 00:01:20,580
itself on your own machines and it uh

27
00:01:20,580 --> 00:01:23,460
you know makes it easier to manage The

28
00:01:23,460 --> 00:01:24,560
Seekers

29
00:01:24,560 --> 00:01:26,820
recent years GitHub action gained

30
00:01:26,820 --> 00:01:28,680
tremendous popularity in usage among

31
00:01:28,680 --> 00:01:31,860
especially open source software because

32
00:01:31,860 --> 00:01:34,020
of its tight integration with the GitHub

33
00:01:34,020 --> 00:01:36,420
itself so you don't developers don't

34
00:01:36,420 --> 00:01:39,659
need to go to the outside you know to

35
00:01:39,659 --> 00:01:41,820
third party and can immediately start

36
00:01:41,820 --> 00:01:44,040
using GitHub actions

37
00:01:44,040 --> 00:01:46,740
let's go a little bit details so what is

38
00:01:46,740 --> 00:01:49,079
the workflow to create the workload you

39
00:01:49,079 --> 00:01:50,399
just need to create the configuration

40
00:01:50,399 --> 00:01:52,799
file under the dot GitHub workflows

41
00:01:52,799 --> 00:01:55,740
folder inside your repository workflow

42
00:01:55,740 --> 00:01:59,040
can be triggered using several execution

43
00:01:59,040 --> 00:02:02,460
triggers the workloads contain several

44
00:02:02,460 --> 00:02:04,619
can contain several jobs that can run

45
00:02:04,619 --> 00:02:08,699
sequentially or in parallel Manner and

46
00:02:08,699 --> 00:02:10,520
each job will contain

47
00:02:10,520 --> 00:02:13,980
several steps and the steps can be

48
00:02:13,980 --> 00:02:17,220
regular commands or it can be basically

49
00:02:17,220 --> 00:02:19,800
third-party plugins that run the code

50
00:02:19,800 --> 00:02:21,319
themselves

51
00:02:21,319 --> 00:02:25,080
and there are in general three ways to

52
00:02:25,080 --> 00:02:27,599
reference third-party plugins which are

53
00:02:27,599 --> 00:02:30,720
using the tag name Branch name or commit

54
00:02:30,720 --> 00:02:32,580
hash

55
00:02:32,580 --> 00:02:35,819
in this paper we've tried to answer to

56
00:02:35,819 --> 00:02:38,099
the three main research questions that

57
00:02:38,099 --> 00:02:40,500
we had is that the first one is what

58
00:02:40,500 --> 00:02:42,420
other secret properties that need to

59
00:02:42,420 --> 00:02:44,760
behold to have a security ICD pipeline

60
00:02:44,760 --> 00:02:47,760
second one is how to does GitHub action

61
00:02:47,760 --> 00:02:49,920
compared to other Cai CD platforms

62
00:02:49,920 --> 00:02:52,739
according to our defined security

63
00:02:52,739 --> 00:02:55,920
properties and how developers basically

64
00:02:55,920 --> 00:02:58,379
use the GitHub actions either using a

65
00:02:58,379 --> 00:03:00,800
secure way or not

66
00:03:00,800 --> 00:03:03,300
we defined in this paper for security

67
00:03:03,300 --> 00:03:04,980
properties which are admittance control

68
00:03:04,980 --> 00:03:06,720
execution control code control and

69
00:03:06,720 --> 00:03:09,720
access to Secrets admissions control is

70
00:03:09,720 --> 00:03:13,080
when only authorized that people can add

71
00:03:13,080 --> 00:03:15,900
add or modify or edit the workflows to

72
00:03:15,900 --> 00:03:18,500
their faster execution control is only

73
00:03:18,500 --> 00:03:21,000
authorized people can basically

74
00:03:21,000 --> 00:03:22,860
configure the triggers for the workflow

75
00:03:22,860 --> 00:03:25,500
code control is when you control what

76
00:03:25,500 --> 00:03:28,080
code run as part of the workflow and

77
00:03:28,080 --> 00:03:31,140
access to Seekers is basically you need

78
00:03:31,140 --> 00:03:34,019
to be keeping your secrets securely and

79
00:03:34,019 --> 00:03:37,019
only steps with direct access to it can

80
00:03:37,019 --> 00:03:40,140
should be able to access the Seekers

81
00:03:40,140 --> 00:03:42,180
uh let's compare GitHub actions default

82
00:03:42,180 --> 00:03:44,640
information with other so in general we

83
00:03:44,640 --> 00:03:47,040
compare the GitHub action with four

84
00:03:47,040 --> 00:03:48,840
different cicd platforms which are

85
00:03:48,840 --> 00:03:52,560
privacy Circle CI Jenkins and gitlab by

86
00:03:52,560 --> 00:03:54,480
default GitHub actions give the right

87
00:03:54,480 --> 00:03:57,200
permission to the code itself

88
00:03:57,200 --> 00:04:00,180
and in addition to that all set in

89
00:04:00,180 --> 00:04:01,980
GitHub workflows runs with

90
00:04:01,980 --> 00:04:04,680
administrative privileges combined with

91
00:04:04,680 --> 00:04:06,420
these two with the permission and the

92
00:04:06,420 --> 00:04:08,459
administrative privileges we think that

93
00:04:08,459 --> 00:04:10,980
it increased the security risk of the

94
00:04:10,980 --> 00:04:13,200
GitHub action in general

95
00:04:13,200 --> 00:04:16,320
and if we compare the plugin system of

96
00:04:16,320 --> 00:04:19,440
GitHub action actions with different CCT

97
00:04:19,440 --> 00:04:22,019
platforms we can see that first of all

98
00:04:22,019 --> 00:04:23,580
it supports the third party plugin as we

99
00:04:23,580 --> 00:04:25,199
discussed previously it does not have

100
00:04:25,199 --> 00:04:27,180
any kind of review as well as all other

101
00:04:27,180 --> 00:04:30,780
cicd platforms for their plugins and

102
00:04:30,780 --> 00:04:33,300
also they GitHub actions plugins are

103
00:04:33,300 --> 00:04:35,880
mutable by mutable what we mean is that

104
00:04:35,880 --> 00:04:38,220
let's imagine we have this yaml

105
00:04:38,220 --> 00:04:39,479
configuration file basically which

106
00:04:39,479 --> 00:04:41,040
depends on some kind of Search battery

107
00:04:41,040 --> 00:04:43,860
plugins and perform some points action

108
00:04:43,860 --> 00:04:46,979
original Behavior so the plugin author

109
00:04:46,979 --> 00:04:49,500
can include any kind of changes to the

110
00:04:49,500 --> 00:04:52,620
plugin itself and which will lead to the

111
00:04:52,620 --> 00:04:55,080
new Behavior inside the cicd pipelines

112
00:04:55,080 --> 00:04:57,720
so developers basically who are have

113
00:04:57,720 --> 00:04:59,820
this configuration file they they will

114
00:04:59,820 --> 00:05:01,800
not be aware of this behavior that is

115
00:05:01,800 --> 00:05:04,100
why we call it kind of mutable because

116
00:05:04,100 --> 00:05:06,419
they can introduce new Behavior without

117
00:05:06,419 --> 00:05:07,979
any kind of change to the configuration

118
00:05:07,979 --> 00:05:09,479
itself

119
00:05:09,479 --> 00:05:11,340
in addition to that we compare the

120
00:05:11,340 --> 00:05:13,620
security properties between GitHub CI

121
00:05:13,620 --> 00:05:16,080
and all other platforms you can read

122
00:05:16,080 --> 00:05:19,259
more details inside our paper here I

123
00:05:19,259 --> 00:05:21,120
just want to stop in one of the

124
00:05:21,120 --> 00:05:23,340
comparisons among the 10 available to

125
00:05:23,340 --> 00:05:26,900
all steps as you can see GitHub actions

126
00:05:26,900 --> 00:05:29,639
allows all the steps to access to the

127
00:05:29,639 --> 00:05:33,419
Seekers for that the steps just need to

128
00:05:33,419 --> 00:05:38,100
read the slash home run under underscore

129
00:05:38,100 --> 00:05:41,639
work work folder and they can access all

130
00:05:41,639 --> 00:05:43,860
the Seekers without having any kind of

131
00:05:43,860 --> 00:05:46,199
direct access to the secret itself

132
00:05:46,199 --> 00:05:48,360
in addition to the security properties

133
00:05:48,360 --> 00:05:50,340
and comparison we perform the

134
00:05:50,340 --> 00:05:52,500
large-scale measurement experiment to

135
00:05:52,500 --> 00:05:55,440
achieve that we gathered the

136
00:05:55,440 --> 00:05:58,759
repository names from GS archive and

137
00:05:58,759 --> 00:06:02,039
basically Chrome the GitHub to get all

138
00:06:02,039 --> 00:06:04,380
their pastors with the workflows that is

139
00:06:04,380 --> 00:06:06,600
available and sort all the workflows

140
00:06:06,600 --> 00:06:09,360
inside the mongodb to further analyze

141
00:06:09,360 --> 00:06:11,699
them you can access all our data sets

142
00:06:11,699 --> 00:06:14,340
from the repositories as you can see in

143
00:06:14,340 --> 00:06:15,780
this slide

144
00:06:15,780 --> 00:06:16,380
um

145
00:06:16,380 --> 00:06:20,160
so during our measurement we had several

146
00:06:20,160 --> 00:06:23,340
questions the first question was uh do a

147
00:06:23,340 --> 00:06:24,539
developers update their default

148
00:06:24,539 --> 00:06:27,000
permissions so GitHub allows you to

149
00:06:27,000 --> 00:06:28,620
update the default permissions of the

150
00:06:28,620 --> 00:06:31,380
workflow if needed but we found that

151
00:06:31,380 --> 00:06:33,660
only 0.2 percent of all the workflows

152
00:06:33,660 --> 00:06:35,880
customize their permissions and among

153
00:06:35,880 --> 00:06:37,380
those only

154
00:06:37,380 --> 00:06:40,919
um you know 62 set workflows to read

155
00:06:40,919 --> 00:06:42,600
only

156
00:06:42,600 --> 00:06:45,000
and the second question was how GitHub

157
00:06:45,000 --> 00:06:46,560
workloads are triggered and other

158
00:06:46,560 --> 00:06:50,400
triggers used in dangerous ways so um by

159
00:06:50,400 --> 00:06:54,240
the dangerous ways we say that it can it

160
00:06:54,240 --> 00:06:57,539
affect the security in general so first

161
00:06:57,539 --> 00:07:00,740
of all I want to mention that before

162
00:07:00,740 --> 00:07:03,240
recently basically it was possible to

163
00:07:03,240 --> 00:07:05,819
introduce the new workflows through a

164
00:07:05,819 --> 00:07:08,340
pull requests to the repository the

165
00:07:08,340 --> 00:07:10,440
attacks were using this to crypto mind

166
00:07:10,440 --> 00:07:14,039
the you know crypto mind basically and

167
00:07:14,039 --> 00:07:16,860
then GitHub itself suggests not to never

168
00:07:16,860 --> 00:07:18,180
use the pull request with the

169
00:07:18,180 --> 00:07:20,039
self-hosted machines why because pull

170
00:07:20,039 --> 00:07:21,900
requests obviously introduce can

171
00:07:21,900 --> 00:07:24,240
introduce new code if you're running the

172
00:07:24,240 --> 00:07:25,800
arbitrary code you know like introduced

173
00:07:25,800 --> 00:07:27,720
by other people on the self-hosted

174
00:07:27,720 --> 00:07:30,240
machines on your own servers it will

175
00:07:30,240 --> 00:07:32,460
lead basically to arbitrary code

176
00:07:32,460 --> 00:07:35,460
execution on your machine

177
00:07:35,460 --> 00:07:38,220
uh the third question was do users

178
00:07:38,220 --> 00:07:40,440
depend on certified plugins we found out

179
00:07:40,440 --> 00:07:42,360
that almost all of their pastors used

180
00:07:42,360 --> 00:07:45,360
the third party plugins

181
00:07:45,360 --> 00:07:47,460
during the analysis we found that there

182
00:07:47,460 --> 00:07:49,620
are at least 11 000 unique actions

183
00:07:49,620 --> 00:07:52,800
without versions and if we consider also

184
00:07:52,800 --> 00:07:55,199
the versions of actions it the number

185
00:07:55,199 --> 00:08:00,000
increased to 19 000. only 2.9 percent of

186
00:08:00,000 --> 00:08:03,360
11 000 were from verified craters by

187
00:08:03,360 --> 00:08:05,099
verified craters you can see the example

188
00:08:05,099 --> 00:08:08,039
that is shown on the slide so here we

189
00:08:08,039 --> 00:08:10,380
have two different actions one from AWS

190
00:08:10,380 --> 00:08:12,020
which is considered to be verified

191
00:08:12,020 --> 00:08:15,840
crater and another is from someone from

192
00:08:15,840 --> 00:08:18,138
the internet

193
00:08:18,599 --> 00:08:20,400
um the first question is how users

194
00:08:20,400 --> 00:08:22,139
reference the search participle icon if

195
00:08:22,139 --> 00:08:23,819
you remember we mentioned that there are

196
00:08:23,819 --> 00:08:25,620
main three ways to reference the third

197
00:08:25,620 --> 00:08:27,660
party plugins check them Branch name and

198
00:08:27,660 --> 00:08:30,060
commit hash the GitHub itself suggests

199
00:08:30,060 --> 00:08:31,680
that you need to use the commit hash so

200
00:08:31,680 --> 00:08:33,860
that it will be non-mutable

201
00:08:33,860 --> 00:08:37,380
but we actually found that you know we

202
00:08:37,380 --> 00:08:40,979
created the POC where we can change the

203
00:08:40,979 --> 00:08:44,459
behavior of the action itself even if if

204
00:08:44,459 --> 00:08:47,040
it was referenced by the commit hash so

205
00:08:47,040 --> 00:08:49,080
check out the paper for more details but

206
00:08:49,080 --> 00:08:52,200
in general only 0.1 percent of uh

207
00:08:52,200 --> 00:08:55,260
references are using the commit hash so

208
00:08:55,260 --> 00:08:56,760
developers do not follow the security

209
00:08:56,760 --> 00:08:57,899
guidelines

210
00:08:57,899 --> 00:08:59,940
the fifth question was how users pass

211
00:08:59,940 --> 00:09:01,980
the secrets so there was 50 of

212
00:09:01,980 --> 00:09:04,680
repository that passed the secrets

213
00:09:04,680 --> 00:09:07,019
um these secrets were passed to 4 000

214
00:09:07,019 --> 00:09:10,080
different uh actions and only eight

215
00:09:10,080 --> 00:09:11,519
percent of them were from verified

216
00:09:11,519 --> 00:09:14,640
creators as we discussed previously

217
00:09:14,640 --> 00:09:16,860
um all steps can have the access to the

218
00:09:16,860 --> 00:09:19,440
secrets itself so we found that there is

219
00:09:19,440 --> 00:09:22,320
more than 5 000 clients which have

220
00:09:22,320 --> 00:09:24,600
indirect access to the secrets and only

221
00:09:24,600 --> 00:09:26,640
0.9 percent of them are from verified

222
00:09:26,640 --> 00:09:28,860
craters you can see the example of the

223
00:09:28,860 --> 00:09:30,899
indirect access and direct access on the

224
00:09:30,899 --> 00:09:33,899
right hand side the example

225
00:09:33,899 --> 00:09:36,720
the final question we had was do

226
00:09:36,720 --> 00:09:38,760
developer do workloads depend on

227
00:09:38,760 --> 00:09:40,220
vulnerable plugins

228
00:09:40,220 --> 00:09:43,200
since this was not our main you know

229
00:09:43,200 --> 00:09:47,160
question of the paper we approached this

230
00:09:47,160 --> 00:09:49,140
very naively we just used the existing

231
00:09:49,140 --> 00:09:52,140
tool called gitbull finder which looks

232
00:09:52,140 --> 00:09:54,480
for the keywords from inside the commit

233
00:09:54,480 --> 00:09:57,360
hashes and detects if this commit

234
00:09:57,360 --> 00:09:59,880
basically trying to fix any kind of

235
00:09:59,880 --> 00:10:02,339
security issues so after analyzing the

236
00:10:02,339 --> 00:10:06,060
output of it manually spending a lot of

237
00:10:06,060 --> 00:10:11,279
time on that we find that at least 500

238
00:10:11,279 --> 00:10:14,880
repastors depend on actions or plugins

239
00:10:14,880 --> 00:10:17,040
that have some words High severity

240
00:10:17,040 --> 00:10:20,040
vulnerability

241
00:10:20,160 --> 00:10:22,500
in conclusion we Define fossil created

242
00:10:22,500 --> 00:10:25,140
Property that must be held in such in

243
00:10:25,140 --> 00:10:28,200
cicd Pipeline and compare the GitHub

244
00:10:28,200 --> 00:10:31,980
action with other cicd platforms we

245
00:10:31,980 --> 00:10:33,240
performed the measurement study of

246
00:10:33,240 --> 00:10:35,060
GitHub workloads how developers use that

247
00:10:35,060 --> 00:10:37,980
so basically the conclusion that

248
00:10:37,980 --> 00:10:39,540
developers do not follow any kind of

249
00:10:39,540 --> 00:10:41,220
security guidelines created by GitHub

250
00:10:41,220 --> 00:10:43,860
only 0.2 percent of your pastors update

251
00:10:43,860 --> 00:10:46,019
the default permissions you know there

252
00:10:46,019 --> 00:10:48,240
are close to 300 wrappers that use the

253
00:10:48,240 --> 00:10:49,980
pull request triggers workflows that run

254
00:10:49,980 --> 00:10:53,700
in the cell forces machines almost all

255
00:10:53,700 --> 00:10:56,339
of the Surf Party plugin references are

256
00:10:56,339 --> 00:11:00,120
mutable and there are more than 500

257
00:11:00,120 --> 00:11:01,560
syllables that reference the action

258
00:11:01,560 --> 00:11:03,060
version with high Savers vulnerability

259
00:11:03,060 --> 00:11:06,180
we notified all of this

260
00:11:06,180 --> 00:11:08,940
um authors and basically some of them

261
00:11:08,940 --> 00:11:10,640
get patched

262
00:11:10,640 --> 00:11:13,680
we have some of the results back in the

263
00:11:13,680 --> 00:11:15,779
papers for details

264
00:11:15,779 --> 00:11:19,320
takeaway is that cicd right now has

265
00:11:19,320 --> 00:11:20,640
become you know highly depend on

266
00:11:20,640 --> 00:11:25,740
certified plugins when in in you know in

267
00:11:25,740 --> 00:11:28,920
late it was mostly you know best script

268
00:11:28,920 --> 00:11:30,240
kind of things but right now it's

269
00:11:30,240 --> 00:11:32,279
depends on a lot of third-party plugins

270
00:11:32,279 --> 00:11:33,779
despite the security guidelines

271
00:11:33,779 --> 00:11:35,700
developers do not follow the guidelines

272
00:11:35,700 --> 00:11:38,240
therefore platforms might need to have

273
00:11:38,240 --> 00:11:40,380
secure default settings instead of

274
00:11:40,380 --> 00:11:43,200
trusting users to use it securely in

275
00:11:43,200 --> 00:11:44,940
chcd platforms require more research

276
00:11:44,940 --> 00:11:46,920
from security professions you can check

277
00:11:46,920 --> 00:11:49,740
out our paper and projects using the

278
00:11:49,740 --> 00:11:51,899
website and the repository and feel free

279
00:11:51,899 --> 00:11:54,120
to ask questions on slack or directly

280
00:11:54,120 --> 00:11:57,620
after the talk thank you

