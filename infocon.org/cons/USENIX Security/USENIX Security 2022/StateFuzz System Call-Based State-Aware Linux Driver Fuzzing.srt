1
00:00:07,580 --> 00:00:10,740
hi welcome to my talk I'm boredom from

2
00:00:10,740 --> 00:00:13,019
my University I'm going to introduce our

3
00:00:13,019 --> 00:00:15,900
work state first

4
00:00:15,900 --> 00:00:17,640
as we know called the coverage you get

5
00:00:17,640 --> 00:00:20,039
in the version using genetic algorithm

6
00:00:20,039 --> 00:00:23,100
is now very useful solution for Fanny

7
00:00:23,100 --> 00:00:25,500
bugs a code coverage you can Define the

8
00:00:25,500 --> 00:00:27,180
first to select to see the prone city

9
00:00:27,180 --> 00:00:30,240
copers under mutated to generate a new

10
00:00:30,240 --> 00:00:31,500
test case

11
00:00:31,500 --> 00:00:33,300
then the father executed the instrument

12
00:00:33,300 --> 00:00:35,640
to the problems with his case and I

13
00:00:35,640 --> 00:00:38,520
received feedback based on feedback to

14
00:00:38,520 --> 00:00:41,600
further check whether the programs

15
00:00:41,600 --> 00:00:45,600
whether the test case hit new code if so

16
00:00:45,600 --> 00:00:47,940
the father preserved this test case in

17
00:00:47,940 --> 00:00:51,539
City Compass as a music

18
00:00:51,539 --> 00:00:53,700
however code coverage guide the

19
00:00:53,700 --> 00:00:56,280
following has a limitations in finding

20
00:00:56,280 --> 00:00:59,160
Rich State targets

21
00:00:59,160 --> 00:01:01,980
here is an example the functional action

22
00:01:01,980 --> 00:01:04,019
received

23
00:01:04,019 --> 00:01:07,200
op and value from users for taking

24
00:01:07,200 --> 00:01:09,840
different actions including set a set B

25
00:01:09,840 --> 00:01:12,180
and vul function

26
00:01:12,180 --> 00:01:15,299
there is an autobunded bug in the viewer

27
00:01:15,299 --> 00:01:17,700
function to trigger this word we need to

28
00:01:17,700 --> 00:01:21,060
set the state a to zero xff under State

29
00:01:21,060 --> 00:01:22,320
B to

30
00:01:22,320 --> 00:01:25,080
buff size then we execute the viewf

31
00:01:25,080 --> 00:01:28,020
function if we refer to see example

32
00:01:28,020 --> 00:01:30,060
program with code coverage get default

33
00:01:30,060 --> 00:01:32,580
list we will find the structure to them

34
00:01:32,580 --> 00:01:35,880
in the beginning many test case hit new

35
00:01:35,880 --> 00:01:38,520
code and and are preserved

36
00:01:38,520 --> 00:01:42,619
the test case one

37
00:01:42,659 --> 00:01:45,119
test case two

38
00:01:45,119 --> 00:01:48,119
three

39
00:01:48,119 --> 00:01:50,340
for now as we can see all codes are

40
00:01:50,340 --> 00:01:52,920
covered and the no new code to hit as a

41
00:01:52,920 --> 00:01:57,360
result no more test case will be saved

42
00:01:57,360 --> 00:01:59,820
even though this test case can set the

43
00:01:59,820 --> 00:02:01,920
correct two states

44
00:02:01,920 --> 00:02:04,560
under the state can easily be changed by

45
00:02:04,560 --> 00:02:07,560
subsequent test case

46
00:02:07,560 --> 00:02:09,780
so it just seems difficult to trigger

47
00:02:09,780 --> 00:02:12,840
the bug there is no sees in Corpus that

48
00:02:12,840 --> 00:02:16,620
can set the correct States

49
00:02:16,620 --> 00:02:18,540
the main reason is that called the

50
00:02:18,540 --> 00:02:20,220
coverage Guide to the father

51
00:02:20,220 --> 00:02:22,200
where you can note his case that the

52
00:02:22,200 --> 00:02:24,959
exercise the same could pass even though

53
00:02:24,959 --> 00:02:27,959
they have explored the new States

54
00:02:27,959 --> 00:02:31,860
we understand well further

55
00:02:31,860 --> 00:02:35,400
so how to perform status well flooding

56
00:02:35,400 --> 00:02:37,560
we summarizes three questions to answer

57
00:02:37,560 --> 00:02:41,280
first what our program States second how

58
00:02:41,280 --> 00:02:44,040
to recognize the program says and track

59
00:02:44,040 --> 00:02:45,840
them during funding

60
00:02:45,840 --> 00:02:48,599
Third how to use problem state is to

61
00:02:48,599 --> 00:02:50,760
guide value for the first question

62
00:02:50,760 --> 00:02:53,280
essentially a problem status the

63
00:02:53,280 --> 00:02:55,500
execution context of a problem

64
00:02:55,500 --> 00:02:58,019
including values of all memory and this

65
00:02:58,019 --> 00:03:00,720
registers however the number of such

66
00:03:00,720 --> 00:03:03,900
States is too large and it is harder to

67
00:03:03,900 --> 00:03:05,819
track them all in practice

68
00:03:05,819 --> 00:03:09,300
thus we believe that a practical further

69
00:03:09,300 --> 00:03:11,400
has to focus on a subset of problem

70
00:03:11,400 --> 00:03:13,680
States reason to work has proposed

71
00:03:13,680 --> 00:03:15,420
several solutions for representing

72
00:03:15,420 --> 00:03:16,860
problem States

73
00:03:16,860 --> 00:03:19,860
researchers propose to manually manually

74
00:03:19,860 --> 00:03:22,800
annotate the targeted programs and the

75
00:03:22,800 --> 00:03:26,459
user annotated data as program States

76
00:03:26,459 --> 00:03:28,980
such menu annotation will involve many

77
00:03:28,980 --> 00:03:31,560
human efforts protocol status code can

78
00:03:31,560 --> 00:03:35,459
also be used to represent program States

79
00:03:35,459 --> 00:03:37,920
however status code is not always

80
00:03:37,920 --> 00:03:40,379
available we find its very common

81
00:03:40,379 --> 00:03:42,959
programs to use the variables to

82
00:03:42,959 --> 00:03:46,680
represent problem States so we propose

83
00:03:46,680 --> 00:03:49,200
that we can only focus on subset of

84
00:03:49,200 --> 00:03:52,140
problem States represented by variables

85
00:03:52,140 --> 00:03:55,620
as a result the second question is

86
00:03:55,620 --> 00:03:58,319
equivalent to how to recognize the

87
00:03:58,319 --> 00:04:00,780
variables that represent the problem

88
00:04:00,780 --> 00:04:02,340
States

89
00:04:02,340 --> 00:04:05,780
and we name these variables that

90
00:04:05,780 --> 00:04:08,459
represent program States

91
00:04:08,459 --> 00:04:12,480
as state variables

92
00:04:12,480 --> 00:04:14,640
we summarize the features of State

93
00:04:14,640 --> 00:04:17,339
variables as it follows first

94
00:04:17,339 --> 00:04:20,100
the these variables have a long lifetime

95
00:04:20,100 --> 00:04:22,320
that you can span different program

96
00:04:22,320 --> 00:04:24,900
states to record state of information

97
00:04:24,900 --> 00:04:27,840
second they can be updated by users for

98
00:04:27,840 --> 00:04:30,060
status transition

99
00:04:30,060 --> 00:04:32,639
third since the program States always

100
00:04:32,639 --> 00:04:35,160
controls the problem's behavior these

101
00:04:35,160 --> 00:04:37,080
variables should be able to affect the

102
00:04:37,080 --> 00:04:39,720
program's counterflower or memory access

103
00:04:39,720 --> 00:04:42,840
we observed that rich State Province

104
00:04:42,840 --> 00:04:46,320
always require multi-stage input

105
00:04:46,320 --> 00:04:48,960
and the different stage of impulse will

106
00:04:48,960 --> 00:04:51,120
achieve the different program actions

107
00:04:51,120 --> 00:04:52,560
for example

108
00:04:52,560 --> 00:04:56,400
iftp server will receive multiple

109
00:04:56,400 --> 00:04:59,160
packets from the client

110
00:04:59,160 --> 00:05:03,419
the FTP user and the FTP package and fpv

111
00:05:03,419 --> 00:05:07,919
pass action will be triggered by a user

112
00:05:07,919 --> 00:05:11,580
a user package and a user a pass packet

113
00:05:11,580 --> 00:05:13,860
the Nino's kernel may receive many

114
00:05:13,860 --> 00:05:15,900
season costs

115
00:05:15,900 --> 00:05:18,660
from user space programs

116
00:05:18,660 --> 00:05:20,460
and the handlers

117
00:05:20,460 --> 00:05:22,860
in Fair operations will be triggered by

118
00:05:22,860 --> 00:05:25,400
this course

119
00:05:26,880 --> 00:05:29,400
we also observed that state variables

120
00:05:29,400 --> 00:05:31,620
are usually shared by different program

121
00:05:31,620 --> 00:05:34,380
actions for example the variable it says

122
00:05:34,380 --> 00:05:38,460
is read by is read by the FTP least

123
00:05:38,460 --> 00:05:43,159
action and updated by FTP has action

124
00:05:43,860 --> 00:05:45,900
therefore we can recognize State

125
00:05:45,900 --> 00:05:47,940
variables by extracting the variables

126
00:05:47,940 --> 00:05:49,860
that have a long Lifetime and shared by

127
00:05:49,860 --> 00:05:51,479
program actions

128
00:05:51,479 --> 00:05:54,060
then we track a program that states by

129
00:05:54,060 --> 00:05:57,620
monitoring those State variables

130
00:05:57,780 --> 00:05:59,759
for the third question a straightforward

131
00:05:59,759 --> 00:06:01,680
idea is used instead coverage as

132
00:06:01,680 --> 00:06:04,919
feedback for button however if we use a

133
00:06:04,919 --> 00:06:07,740
new value of substitute variables as a

134
00:06:07,740 --> 00:06:11,039
new state there are too many values

135
00:06:11,039 --> 00:06:13,259
and a lot of test cases will be

136
00:06:13,259 --> 00:06:16,560
preserved causing cdq explosion and

137
00:06:16,560 --> 00:06:19,199
hurts the performance of value

138
00:06:19,199 --> 00:06:22,680
so we can merge values representing the

139
00:06:22,680 --> 00:06:24,240
same state

140
00:06:24,240 --> 00:06:27,120
and divided each state variables value

141
00:06:27,120 --> 00:06:30,060
space into several ranges

142
00:06:30,060 --> 00:06:32,940
therefore we propose that instead of

143
00:06:32,940 --> 00:06:35,699
tracking values we track Special Value

144
00:06:35,699 --> 00:06:38,520
ranges and extreme values of State

145
00:06:38,520 --> 00:06:42,979
variables as the feedback of value

146
00:06:43,740 --> 00:06:46,259
we built the first type of statist for

147
00:06:46,259 --> 00:06:48,780
Linux driver fighting this is workflow

148
00:06:48,780 --> 00:06:51,960
of statified which includes includes

149
00:06:51,960 --> 00:06:54,180
three major phase

150
00:06:54,180 --> 00:06:57,419
the programs that the recognition stage

151
00:06:57,419 --> 00:06:59,940
first analyze the source code of Linux

152
00:06:59,940 --> 00:07:02,460
Travelers to recognize program States

153
00:07:02,460 --> 00:07:04,680
including the state's variable is the

154
00:07:04,680 --> 00:07:06,900
state variable value ranges

155
00:07:06,900 --> 00:07:09,660
then this instrumentation staging

156
00:07:09,660 --> 00:07:11,699
instrument of targeted program to track

157
00:07:11,699 --> 00:07:14,520
the program state coverage along with

158
00:07:14,520 --> 00:07:15,900
code coverage

159
00:07:15,900 --> 00:07:18,600
in the for the loop stage we extended

160
00:07:18,600 --> 00:07:20,880
the vaginal vocal coverage guide of

161
00:07:20,880 --> 00:07:24,000
others by applying the problem States

162
00:07:24,000 --> 00:07:27,840
feedback to see the preservation and the

163
00:07:27,840 --> 00:07:30,500
city selection

164
00:07:32,039 --> 00:07:34,440
in the program State recognition stage

165
00:07:34,440 --> 00:07:37,080
we first need to identify program

166
00:07:37,080 --> 00:07:40,139
actions in India's drivers the program

167
00:07:40,139 --> 00:07:42,780
actions are the handlers

168
00:07:42,780 --> 00:07:46,080
that can be in multiple system costs we

169
00:07:46,080 --> 00:07:48,120
use inter-procedure and the past

170
00:07:48,120 --> 00:07:51,000
sensitive analysis based on details to

171
00:07:51,000 --> 00:07:53,400
identify program actions

172
00:07:53,400 --> 00:07:57,240
we use an hpet driver example

173
00:07:57,240 --> 00:07:59,759
to show how we recognize State variables

174
00:07:59,759 --> 00:08:03,000
with static with static analysis

175
00:08:03,000 --> 00:08:05,639
we first identify program actions and

176
00:08:05,639 --> 00:08:07,380
they are called the lines

177
00:08:07,380 --> 00:08:09,900
then we extract the variables accessed

178
00:08:09,900 --> 00:08:13,199
by these code lines as we can see the

179
00:08:13,199 --> 00:08:16,680
variable HD hdwr Community red is read

180
00:08:16,680 --> 00:08:20,160
by action 2 and updated by action 1 and

181
00:08:20,160 --> 00:08:22,800
it has a long enough time so we add this

182
00:08:22,800 --> 00:08:26,520
variable into our state variable list we

183
00:08:26,520 --> 00:08:29,160
use intro procedure and the passensive

184
00:08:29,160 --> 00:08:32,339
since that static symbolic execution

185
00:08:32,339 --> 00:08:34,440
two in first state variables value

186
00:08:34,440 --> 00:08:37,620
ranges for example from the conditional

187
00:08:37,620 --> 00:08:39,599
statement in 9 11

188
00:08:39,599 --> 00:08:44,700
we can inverse three value ranges

189
00:08:44,700 --> 00:08:47,519
in the first Loop status uses a

190
00:08:47,519 --> 00:08:49,740
three-dimension feedback mechanisms to

191
00:08:49,740 --> 00:08:52,800
get a status exploration IT issues three

192
00:08:52,800 --> 00:08:55,019
types of feedback signals when the test

193
00:08:55,019 --> 00:08:58,500
case is new code new value range or new

194
00:08:58,500 --> 00:09:00,420
extreme values

195
00:09:00,420 --> 00:09:02,760
then the further preserve the test case

196
00:09:02,760 --> 00:09:05,040
in different types of cobras based on

197
00:09:05,040 --> 00:09:06,660
the feedback types

198
00:09:06,660 --> 00:09:08,760
and the further we are selecting this

199
00:09:08,760 --> 00:09:12,860
from this retires of couples

200
00:09:13,100 --> 00:09:15,600
solidifier is implemented based on

201
00:09:15,600 --> 00:09:17,700
several open source projects we think

202
00:09:17,700 --> 00:09:22,160
store authors for their awesome projects

203
00:09:22,620 --> 00:09:25,100
we evaluated to evaluate the

204
00:09:25,100 --> 00:09:27,720
effectiveness of certified we designed

205
00:09:27,720 --> 00:09:29,519
the several experience and tried to

206
00:09:29,519 --> 00:09:32,160
answer the following questions

207
00:09:32,160 --> 00:09:34,620
we conduct the experience for linear

208
00:09:34,620 --> 00:09:36,899
servers in two environments including

209
00:09:36,899 --> 00:09:39,420
the Nino's Upstream kernel on cumu and

210
00:09:39,420 --> 00:09:41,820
the Qualcomm MSM kernel or Google Plus

211
00:09:41,820 --> 00:09:44,420
over phone

212
00:09:45,600 --> 00:09:48,300
we recognize about six thousands and

213
00:09:48,300 --> 00:09:50,220
five thousand State variables from the

214
00:09:50,220 --> 00:09:52,800
news kernel and the Ms McCullough MSM

215
00:09:52,800 --> 00:09:56,160
kernel irrespectively on average we

216
00:09:56,160 --> 00:09:58,620
recognized about three value ranges for

217
00:09:58,620 --> 00:10:00,660
every state variable

218
00:10:00,660 --> 00:10:03,839
then we investigate the semantical state

219
00:10:03,839 --> 00:10:06,600
variables by analyzing variable names in

220
00:10:06,600 --> 00:10:10,080
the abstract syntax tree the result is

221
00:10:10,080 --> 00:10:12,480
shown in the pattern

222
00:10:12,480 --> 00:10:14,760
we also organized the false positives

223
00:10:14,760 --> 00:10:17,580
and the false negatives the result shows

224
00:10:17,580 --> 00:10:20,040
status first can recognize 90 percent

225
00:10:20,040 --> 00:10:22,800
with State variables and the Precision

226
00:10:22,800 --> 00:10:25,200
is 40 percent

227
00:10:25,200 --> 00:10:28,320
we believe that flooding can tolerate

228
00:10:28,320 --> 00:10:30,540
some force between false positives

229
00:10:30,540 --> 00:10:34,939
because of its best execution speed

230
00:10:35,519 --> 00:10:37,980
our experiment shows that state advice

231
00:10:37,980 --> 00:10:39,959
can achieve higher status coverage and

232
00:10:39,959 --> 00:10:41,640
the code coverage

233
00:10:41,640 --> 00:10:44,339
specifically in the news kernel

234
00:10:44,339 --> 00:10:47,339
steadfast solidified achieves 32 percent

235
00:10:47,339 --> 00:10:49,560
higher value range coverage than

236
00:10:49,560 --> 00:10:50,899
ciscover

237
00:10:50,899 --> 00:10:52,740
immunoscon

238
00:10:52,740 --> 00:10:57,720
and 19 higher code carbon Cisco

239
00:10:57,720 --> 00:11:02,000
more details are shown in our paper

240
00:11:02,760 --> 00:11:06,060
these Armory a total of 2100 are funded

241
00:11:06,060 --> 00:11:08,880
by State Road first we reported all

242
00:11:08,880 --> 00:11:10,980
these 20 percent money with history

243
00:11:10,980 --> 00:11:13,560
developers and the 19 of them are

244
00:11:13,560 --> 00:11:16,980
confirmed among the 19 confirmed

245
00:11:16,980 --> 00:11:21,600
vulnerabilities 14 are assigned to cbids

246
00:11:21,600 --> 00:11:24,060
in the future we will continue to apply

247
00:11:24,060 --> 00:11:26,760
slip first to network service body

248
00:11:26,760 --> 00:11:31,200
and apply status to other Linux drivers

249
00:11:31,200 --> 00:11:34,019
that interact with users through

250
00:11:34,019 --> 00:11:36,240
multiple i o channels rather than system

251
00:11:36,240 --> 00:11:38,839
cores

252
00:11:38,880 --> 00:11:41,760
in summary we've written a new fuzzing

253
00:11:41,760 --> 00:11:44,279
solution status for passing Rich States

254
00:11:44,279 --> 00:11:45,779
programs

255
00:11:45,779 --> 00:11:48,779
stateifies models programs stays with

256
00:11:48,779 --> 00:11:51,120
State variables

257
00:11:51,120 --> 00:11:54,300
we implemented a prototype for by the

258
00:11:54,300 --> 00:11:57,300
new struggles experience shows that

259
00:11:57,300 --> 00:11:59,399
statefast has better performance against

260
00:11:59,399 --> 00:12:02,640
its color in family of travels

261
00:12:02,640 --> 00:12:04,800
thanks for listening any questions are

262
00:12:04,800 --> 00:12:07,040
welcome

