1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:10,880 --> 00:00:13,139
today I'm going to present a paper named

3
00:00:13,139 --> 00:00:15,360
the technological box of dbms with

4
00:00:15,360 --> 00:00:18,378
coverage based guidance

5
00:00:18,720 --> 00:00:21,000
box in the DPMS database management

6
00:00:21,000 --> 00:00:23,520
system are being widely started

7
00:00:23,520 --> 00:00:25,560
most previous Works focus on detecting

8
00:00:25,560 --> 00:00:27,599
memory corruption bugs which will crush

9
00:00:27,599 --> 00:00:29,580
the dbms program

10
00:00:29,580 --> 00:00:31,980
existing Works includes generation based

11
00:00:31,980 --> 00:00:34,079
query testing tools and mutation-based

12
00:00:34,079 --> 00:00:36,059
QE fasting tools

13
00:00:36,059 --> 00:00:38,100
however little attention has been

14
00:00:38,100 --> 00:00:39,840
applied to the technological bugs in

15
00:00:39,840 --> 00:00:42,480
dbms logical bugs are incorrect called

16
00:00:42,480 --> 00:00:44,700
logic that will make the dbms returns

17
00:00:44,700 --> 00:00:46,500
incorrect results

18
00:00:46,500 --> 00:00:48,660
the multiple logical bugs reported in

19
00:00:48,660 --> 00:00:50,579
recent years many of them could

20
00:00:50,579 --> 00:00:54,120
potentially lead to severe outcomes

21
00:00:54,120 --> 00:00:55,620
there are some existing works that try

22
00:00:55,620 --> 00:00:57,899
to find logical bugs in the DPMS one

23
00:00:57,899 --> 00:01:00,660
existing works is differential testing

24
00:01:00,660 --> 00:01:02,879
that the idea of differential testing is

25
00:01:02,879 --> 00:01:05,040
to pass the same query to different dbms

26
00:01:05,040 --> 00:01:07,020
and check whether they output the same

27
00:01:07,020 --> 00:01:08,760
results

28
00:01:08,760 --> 00:01:11,580
however because each dbms defines their

29
00:01:11,580 --> 00:01:13,920
own SQL dialects their only limited

30
00:01:13,920 --> 00:01:15,420
features are shared

31
00:01:15,420 --> 00:01:18,119
if differential testing only covers its

32
00:01:18,119 --> 00:01:19,920
share features we end up with low

33
00:01:19,920 --> 00:01:21,900
coverage for the dedicated feature for

34
00:01:21,900 --> 00:01:23,640
each dbms

35
00:01:23,640 --> 00:01:25,920
on the other hand if differential

36
00:01:25,920 --> 00:01:28,140
testing try to cover all the SQL

37
00:01:28,140 --> 00:01:30,900
dialects in all dbms

38
00:01:30,900 --> 00:01:33,000
to generate the Kiwi we end up with low

39
00:01:33,000 --> 00:01:35,100
correctness rate in other words low

40
00:01:35,100 --> 00:01:37,439
validity

41
00:01:37,439 --> 00:01:39,659
these are some simple SQL dialects from

42
00:01:39,659 --> 00:01:42,180
ctbls

43
00:01:42,180 --> 00:01:45,540
another existing works is SQL lenser

44
00:01:45,540 --> 00:01:48,180
SQL lenses use Oracle to find dbms

45
00:01:48,180 --> 00:01:49,680
logical bugs

46
00:01:49,680 --> 00:01:52,320
and Oracle is a resource verifier that

47
00:01:52,320 --> 00:01:54,000
you can generate functional equivalent

48
00:01:54,000 --> 00:01:56,700
forms of the query for the same dbms and

49
00:01:56,700 --> 00:01:58,680
check its resource inconsistencies for

50
00:01:58,680 --> 00:02:00,720
potential logical bugs

51
00:02:00,720 --> 00:02:02,399
as a complete pipeline

52
00:02:02,399 --> 00:02:04,259
SQL lenser will generate its testing

53
00:02:04,259 --> 00:02:07,140
query using a rule-based query generator

54
00:02:07,140 --> 00:02:09,239
and then we use the Oracle to transform

55
00:02:09,239 --> 00:02:12,540
the query and check the results

56
00:02:12,540 --> 00:02:15,420
however for SQL lenser relies on its

57
00:02:15,420 --> 00:02:17,340
rule-based query generator to generate

58
00:02:17,340 --> 00:02:18,959
all its testing queries

59
00:02:18,959 --> 00:02:21,120
the key regeneration rules limits its

60
00:02:21,120 --> 00:02:23,400
capability to fast deep to test deep

61
00:02:23,400 --> 00:02:26,180
program logic

62
00:02:26,340 --> 00:02:28,920
in this work we propose equal rights a

63
00:02:28,920 --> 00:02:30,900
general platform to test dbms logical

64
00:02:30,900 --> 00:02:31,920
bugs

65
00:02:31,920 --> 00:02:34,560
Secrets use coverage guided forcing and

66
00:02:34,560 --> 00:02:36,540
validity oriented mutations to more

67
00:02:36,540 --> 00:02:39,599
efficiently explore the dbms program and

68
00:02:39,599 --> 00:02:41,519
it also includes a general interface for

69
00:02:41,519 --> 00:02:44,040
easy Oracle development

70
00:02:44,040 --> 00:02:47,040
how to find 18 logical bugs in total and

71
00:02:47,040 --> 00:02:50,000
we open source R2

72
00:02:50,580 --> 00:02:52,440
here we present the motivated examples

73
00:02:52,440 --> 00:02:54,480
that triggers a logical bugs in the SQL

74
00:02:54,480 --> 00:02:55,920
like dbms

75
00:02:55,920 --> 00:02:58,739
the QE creates a table person we call

76
00:02:58,739 --> 00:03:00,599
them PID

77
00:03:00,599 --> 00:03:03,599
and then insert three rows of data one

78
00:03:03,599 --> 00:03:06,239
ten ten into the table

79
00:03:06,239 --> 00:03:08,099
the query then creates a unique partial

80
00:03:08,099 --> 00:03:11,940
index we condition PID equals to 1.

81
00:03:11,940 --> 00:03:14,099
and at last the select output statements

82
00:03:14,099 --> 00:03:16,140
search for the table rows will constrain

83
00:03:16,140 --> 00:03:19,920
this thing and PID equals to 10.

84
00:03:19,920 --> 00:03:21,540
the correct resource from this Q

85
00:03:21,540 --> 00:03:23,760
research should be one row of 10 only

86
00:03:23,760 --> 00:03:25,920
because the distinct keywords should

87
00:03:25,920 --> 00:03:27,659
remove all the duplicated results from

88
00:03:27,659 --> 00:03:29,280
the output

89
00:03:29,280 --> 00:03:31,739
however sqlite returns all the matching

90
00:03:31,739 --> 00:03:34,200
rows with two rows of duplicated tens

91
00:03:34,200 --> 00:03:37,940
this resource is not correct

92
00:03:38,400 --> 00:03:40,019
there are a few challenges we need to

93
00:03:40,019 --> 00:03:41,940
adjust in order to find logical bugs

94
00:03:41,940 --> 00:03:43,500
like this

95
00:03:43,500 --> 00:03:45,659
the first challenge is it is hard to

96
00:03:45,659 --> 00:03:48,120
generate High validity queries

97
00:03:48,120 --> 00:03:50,819
to find logical bug in dbms a complete

98
00:03:50,819 --> 00:03:53,519
pipeline of create database insert data

99
00:03:53,519 --> 00:03:55,560
output data and chat resource are

100
00:03:55,560 --> 00:03:56,879
required

101
00:03:56,879 --> 00:03:59,340
if any of this step failed because of

102
00:03:59,340 --> 00:04:01,500
invadically the logical back detection

103
00:04:01,500 --> 00:04:04,519
won't be successful

104
00:04:04,560 --> 00:04:06,900
the Second Challenge is that it is hard

105
00:04:06,900 --> 00:04:09,299
to implement dbms Oracle because first

106
00:04:09,299 --> 00:04:11,340
there are no General platform existed

107
00:04:11,340 --> 00:04:13,799
for easy Oracle development yet and

108
00:04:13,799 --> 00:04:15,900
second it is not easy to integrate a

109
00:04:15,900 --> 00:04:18,060
dbms Oracle to existing testing

110
00:04:18,060 --> 00:04:19,738
techniques

111
00:04:19,738 --> 00:04:21,600
Tech existing work SQL lenser for

112
00:04:21,600 --> 00:04:24,000
example all the oracles from SQL lenser

113
00:04:24,000 --> 00:04:25,979
are implemented by non-trivial manual

114
00:04:25,979 --> 00:04:28,400
efforts

115
00:04:28,500 --> 00:04:31,259
so to mitigate the first Challenge and

116
00:04:31,259 --> 00:04:33,240
to generate High validity queries we

117
00:04:33,240 --> 00:04:35,160
propose a few validity oriented

118
00:04:35,160 --> 00:04:37,259
techniques in our forcing engine

119
00:04:37,259 --> 00:04:40,800
the first technique is dedicated passing

120
00:04:40,800 --> 00:04:42,960
we noticed that most of the dbms we

121
00:04:42,960 --> 00:04:44,880
tested use bison to Define their

122
00:04:44,880 --> 00:04:46,500
password from ends

123
00:04:46,500 --> 00:04:49,139
the dbms python passes passes the input

124
00:04:49,139 --> 00:04:51,300
query and transform them into dbms

125
00:04:51,300 --> 00:04:54,000
unique internal structure

126
00:04:54,000 --> 00:04:55,800
thanks to the well-documented python

127
00:04:55,800 --> 00:04:57,960
format we use the translator script to

128
00:04:57,960 --> 00:05:00,000
transform the dbms python passer to

129
00:05:00,000 --> 00:05:02,580
secret right internal parser

130
00:05:02,580 --> 00:05:04,860
secret then uses internal passers to

131
00:05:04,860 --> 00:05:07,080
transform the query inputs to secrete

132
00:05:07,080 --> 00:05:08,880
internal General IR

133
00:05:08,880 --> 00:05:11,699
Security on this General IR in order to

134
00:05:11,699 --> 00:05:15,900
get a diverse set of mutated query

135
00:05:15,900 --> 00:05:18,419
by using this internal parser secret can

136
00:05:18,419 --> 00:05:20,040
enforce the original grammar rules

137
00:05:20,040 --> 00:05:22,500
dedicated to hdbms in its forcing

138
00:05:22,500 --> 00:05:24,800
mutation

139
00:05:25,020 --> 00:05:27,539
the second technique is context-based IR

140
00:05:27,539 --> 00:05:29,100
instantiation

141
00:05:29,100 --> 00:05:30,960
this technique fills in the concrete

142
00:05:30,960 --> 00:05:33,900
operands based on the query context

143
00:05:33,900 --> 00:05:36,479
click this curious as for example or the

144
00:05:36,479 --> 00:05:39,120
table and column names will be inserted

145
00:05:39,120 --> 00:05:42,060
notice that this step is context based

146
00:05:42,060 --> 00:05:43,919
for instance it can correctly recognize

147
00:05:43,919 --> 00:05:45,780
the column name changes in the order

148
00:05:45,780 --> 00:05:47,400
table statements

149
00:05:47,400 --> 00:05:49,139
so you can always refers to the correct

150
00:05:49,139 --> 00:05:52,800
column names in the select statements

151
00:05:52,800 --> 00:05:54,419
there are two other techniques we use to

152
00:05:54,419 --> 00:05:56,460
improve validity we leave the details in

153
00:05:56,460 --> 00:05:58,698
the paper

154
00:05:58,740 --> 00:06:00,660
then to mitigate the Second Challenge

155
00:06:00,660 --> 00:06:02,940
and to fill in the missing platform for

156
00:06:02,940 --> 00:06:04,500
easy Oracle development

157
00:06:04,500 --> 00:06:07,800
uh secret proposed four General apis

158
00:06:07,800 --> 00:06:10,919
pre-process append output transform and

159
00:06:10,919 --> 00:06:12,960
compare

160
00:06:12,960 --> 00:06:15,300
the pre-process API remove improper

161
00:06:15,300 --> 00:06:17,460
queries from the inputs take this query

162
00:06:17,460 --> 00:06:19,620
says for example the random function

163
00:06:19,620 --> 00:06:21,479
from the insert interest statements will

164
00:06:21,479 --> 00:06:22,919
generate a different results at

165
00:06:22,919 --> 00:06:24,780
different query runtimes which could

166
00:06:24,780 --> 00:06:26,639
confuse the dbms Oracle and generate

167
00:06:26,639 --> 00:06:28,080
false positive

168
00:06:28,080 --> 00:06:30,120
in this case the insert into statements

169
00:06:30,120 --> 00:06:32,280
will be removed

170
00:06:32,280 --> 00:06:34,740
the second API is append output it

171
00:06:34,740 --> 00:06:36,180
append Oracle compatible select

172
00:06:36,180 --> 00:06:38,280
statements to the query sets

173
00:06:38,280 --> 00:06:40,800
here with technolia oracles proposed by

174
00:06:40,800 --> 00:06:43,139
SQL lenser for example the select

175
00:06:43,139 --> 00:06:45,120
statements in the format of Select

176
00:06:45,120 --> 00:06:47,220
something from something where something

177
00:06:47,220 --> 00:06:50,180
will be inserted

178
00:06:50,400 --> 00:06:52,680
the transform API transform the query

179
00:06:52,680 --> 00:06:55,199
sets to its functional equivalent forms

180
00:06:55,199 --> 00:06:57,780
technology oracles for example again

181
00:06:57,780 --> 00:06:59,699
the constraint in the where class will

182
00:06:59,699 --> 00:07:01,800
be moved to the select class forming two

183
00:07:01,800 --> 00:07:03,180
select statements that are functional

184
00:07:03,180 --> 00:07:05,100
equivalent

185
00:07:05,100 --> 00:07:07,740
and at last the compare API allows the

186
00:07:07,740 --> 00:07:10,080
developers to Define their own rules to

187
00:07:10,080 --> 00:07:11,520
verify the resource

188
00:07:11,520 --> 00:07:13,560
here in this keyword sets the value

189
00:07:13,560 --> 00:07:15,360
returns from the first select statements

190
00:07:15,360 --> 00:07:17,880
should match the number of ones returns

191
00:07:17,880 --> 00:07:19,380
from the second select

192
00:07:19,380 --> 00:07:21,240
if the server if the first select

193
00:07:21,240 --> 00:07:23,220
returns one and the second select

194
00:07:23,220 --> 00:07:26,940
returns 0 1 the results are match

195
00:07:26,940 --> 00:07:29,699
however sqlite Returns value 2 in the

196
00:07:29,699 --> 00:07:31,380
first select statements which are not

197
00:07:31,380 --> 00:07:33,360
matched from the second select

198
00:07:33,360 --> 00:07:36,120
here The Logical box we show represented

199
00:07:36,120 --> 00:07:40,280
in the motivated examples is font

200
00:07:41,580 --> 00:07:43,620
here is the overview of our two SQL

201
00:07:43,620 --> 00:07:44,759
right

202
00:07:44,759 --> 00:07:46,860
cigarette Tech query from the seed

203
00:07:46,860 --> 00:07:48,900
inputs

204
00:07:48,900 --> 00:07:51,120
mutated Theory with a restriction of the

205
00:07:51,120 --> 00:07:53,639
per dbms grammar rules

206
00:07:53,639 --> 00:07:56,639
and then secret use the dbms Oracle to

207
00:07:56,639 --> 00:07:58,139
transform the query to its functional

208
00:07:58,139 --> 00:08:00,780
equivalent forms

209
00:08:00,780 --> 00:08:02,280
after shooting all the queries to

210
00:08:02,280 --> 00:08:04,680
execution security used the Oracle again

211
00:08:04,680 --> 00:08:06,780
to check the resource and see if you can

212
00:08:06,780 --> 00:08:09,060
find logical bugs

213
00:08:09,060 --> 00:08:11,880
and at last if the IQ execution triggers

214
00:08:11,880 --> 00:08:14,340
a new code coverage from the dbms secret

215
00:08:14,340 --> 00:08:16,259
will save the mutated query to the

216
00:08:16,259 --> 00:08:19,880
forcing queue for further exploitation

217
00:08:20,280 --> 00:08:22,440
in the evaluation we aim to answer the

218
00:08:22,440 --> 00:08:24,000
following three questions

219
00:08:24,000 --> 00:08:26,039
can secretly find bugs

220
00:08:26,039 --> 00:08:27,539
can secretly find more bugs than

221
00:08:27,539 --> 00:08:28,979
existing tools

222
00:08:28,979 --> 00:08:31,199
and what's the benefits of our proposed

223
00:08:31,199 --> 00:08:33,000
techniques

224
00:08:33,000 --> 00:08:37,159
we evaluate SQL rate on cdbms

225
00:08:37,500 --> 00:08:40,200
first secret find 18 logical bugs in

226
00:08:40,200 --> 00:08:44,219
total 14 from sqlite 4 from bicycle

227
00:08:44,219 --> 00:08:46,560
among all the detecting bugs 15 logical

228
00:08:46,560 --> 00:08:49,560
bugs have been fixed

229
00:08:49,560 --> 00:08:51,480
notice that there are two logical bugs

230
00:08:51,480 --> 00:08:53,700
are detected from new newly proposed

231
00:08:53,700 --> 00:08:56,060
oracles

232
00:08:56,580 --> 00:08:58,920
and then we compare secret right to two

233
00:08:58,920 --> 00:09:03,000
existing Works SQL answer and score

234
00:09:03,000 --> 00:09:05,880
scroll is a instant State scroll is a

235
00:09:05,880 --> 00:09:07,560
state-of-the-art memory corruption box

236
00:09:07,560 --> 00:09:10,080
detector we introduced the Oracle

237
00:09:10,080 --> 00:09:12,180
interface into squirrel enable it to

238
00:09:12,180 --> 00:09:14,220
find logical bugs similar to what SQL

239
00:09:14,220 --> 00:09:15,720
red can do

240
00:09:15,720 --> 00:09:17,640
from the plots we can see that secret

241
00:09:17,640 --> 00:09:20,160
detects the most number of bugs in 72

242
00:09:20,160 --> 00:09:22,339
hours

243
00:09:22,500 --> 00:09:24,540
in the same experiments we also compare

244
00:09:24,540 --> 00:09:27,360
the branch coverage of the three twos

245
00:09:27,360 --> 00:09:30,180
secret detects nearly 13 more cool

246
00:09:30,180 --> 00:09:33,360
coverage than the best Baseline

247
00:09:33,360 --> 00:09:35,339
and then we compare the queue validity

248
00:09:35,339 --> 00:09:36,839
of the three twos

249
00:09:36,839 --> 00:09:39,360
here sqlenser has the highest capability

250
00:09:39,360 --> 00:09:42,720
thanks to its rule-based QA generator

251
00:09:42,720 --> 00:09:44,940
however this rule-based generator query

252
00:09:44,940 --> 00:09:47,580
are not as diverse as the one mutated

253
00:09:47,580 --> 00:09:49,080
from SQL right

254
00:09:49,080 --> 00:09:50,640
this is proven by the lower code

255
00:09:50,640 --> 00:09:52,740
coverage from SQL lenser in the previous

256
00:09:52,740 --> 00:09:55,080
co-coverage plot

257
00:09:55,080 --> 00:09:57,480
due to the lower due to the lack of

258
00:09:57,480 --> 00:09:59,940
keyword diversity SQL lenser does not

259
00:09:59,940 --> 00:10:03,480
detect as many logical bugs as SQL rate

260
00:10:03,480 --> 00:10:06,060
in the same plot we can see secret ride

261
00:10:06,060 --> 00:10:08,040
has a higher capability compared to the

262
00:10:08,040 --> 00:10:11,180
forcing to squirrel

263
00:10:11,760 --> 00:10:13,980
and then we evaluate on the coverage

264
00:10:13,980 --> 00:10:16,019
feedbacks we remove the coverage

265
00:10:16,019 --> 00:10:18,540
feedbacks from from SQL write and forms

266
00:10:18,540 --> 00:10:20,040
three baselines

267
00:10:20,040 --> 00:10:22,260
the baselines either job or the mutated

268
00:10:22,260 --> 00:10:24,480
query run them instead of mutated query

269
00:10:24,480 --> 00:10:26,399
or save all the mutated query to the

270
00:10:26,399 --> 00:10:27,839
forcing queue

271
00:10:27,839 --> 00:10:29,640
from the plots we can see that the

272
00:10:29,640 --> 00:10:31,500
coverage feedbacks helps security to

273
00:10:31,500 --> 00:10:33,959
find more bugs

274
00:10:33,959 --> 00:10:37,140
and at last we evaluate on the validity

275
00:10:37,140 --> 00:10:39,240
we incrementally remove the validity

276
00:10:39,240 --> 00:10:41,399
oriented techniques we introduced in SQL

277
00:10:41,399 --> 00:10:44,040
rate and unit test the Baseline

278
00:10:44,040 --> 00:10:46,140
from the plots we can see that the

279
00:10:46,140 --> 00:10:48,839
validity oriented techniques enables SQL

280
00:10:48,839 --> 00:10:52,100
rights to find more bugs

281
00:10:52,200 --> 00:10:54,180
the more evaluation in the paper please

282
00:10:54,180 --> 00:10:57,739
check our paper for more details

283
00:10:57,839 --> 00:11:00,120
in conclusion in this paper we propose

284
00:11:00,120 --> 00:11:02,339
SQL write as a general platform to test

285
00:11:02,339 --> 00:11:05,459
dbms logical bugs secret use coverage

286
00:11:05,459 --> 00:11:07,440
guided forcing and validity oriented

287
00:11:07,440 --> 00:11:09,480
mutations to more efficiently explore

288
00:11:09,480 --> 00:11:12,060
the TPMS program and it also includes a

289
00:11:12,060 --> 00:11:14,040
general interface for easy Oracle

290
00:11:14,040 --> 00:11:15,600
development

291
00:11:15,600 --> 00:11:18,420
secret I find 18 logical bugs in total

292
00:11:18,420 --> 00:11:21,060
and we open source R2

293
00:11:21,060 --> 00:11:22,800
thank you for your time I'm happy to

294
00:11:22,800 --> 00:11:25,339
answer any questions

