1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:09,080 --> 00:00:11,820
Elli a PhD student from the University

3
00:00:11,820 --> 00:00:15,719
of Toronto and I will present to you our

4
00:00:15,719 --> 00:00:18,060
research entitled webcash deception

5
00:00:18,060 --> 00:00:20,400
escalates that we did with an

6
00:00:20,400 --> 00:00:23,580
international team of researchers

7
00:00:23,580 --> 00:00:26,880
so according to studies 62 percent of

8
00:00:26,880 --> 00:00:29,939
websites in the Alexa top 10K is behind

9
00:00:29,939 --> 00:00:32,820
the content delivery Network CDN

10
00:00:32,820 --> 00:00:35,880
public web caches store public content

11
00:00:35,880 --> 00:00:39,120
such as static Pages files multimedia

12
00:00:39,120 --> 00:00:41,940
content and are frequently implemented

13
00:00:41,940 --> 00:00:44,879
by in fact content delivery networks to

14
00:00:44,879 --> 00:00:46,500
increase the website's scalability

15
00:00:46,500 --> 00:00:49,559
availability and performances

16
00:00:49,559 --> 00:00:51,780
these Technologies however frequently

17
00:00:51,780 --> 00:00:54,000
offer configurations that allow to

18
00:00:54,000 --> 00:00:56,640
disregard cache control headers to

19
00:00:56,640 --> 00:00:58,680
increase the performances of websites

20
00:00:58,680 --> 00:01:01,860
and simplifying the management of the

21
00:01:01,860 --> 00:01:04,199
configuration but potentially hindering

22
00:01:04,199 --> 00:01:08,220
the security of their the website

23
00:01:08,220 --> 00:01:11,400
so web cache deception is an attack that

24
00:01:11,400 --> 00:01:13,439
exploits the discrepancies in the

25
00:01:13,439 --> 00:01:15,600
request processing between the region

26
00:01:15,600 --> 00:01:18,240
server and the public cache that is

27
00:01:18,240 --> 00:01:20,460
finally tricked into storing sensitive

28
00:01:20,460 --> 00:01:24,000
content that is exposed publicly

29
00:01:24,000 --> 00:01:26,400
as we can see from this image a victim

30
00:01:26,400 --> 00:01:29,280
is first induced into clicking a

31
00:01:29,280 --> 00:01:31,860
maliciously crafted URL using social

32
00:01:31,860 --> 00:01:35,340
engineering techniques and this URL is

33
00:01:35,340 --> 00:01:38,100
crafted by appending a non-existent file

34
00:01:38,100 --> 00:01:41,100
name and a static file extension so in

35
00:01:41,100 --> 00:01:43,560
in this case we have a CSS

36
00:01:43,560 --> 00:01:46,680
the server however answers with a page

37
00:01:46,680 --> 00:01:48,740
that includes some sensitive information

38
00:01:48,740 --> 00:01:51,720
and even if cache control headers are

39
00:01:51,720 --> 00:01:55,380
set correctly the page gets cached this

40
00:01:55,380 --> 00:01:58,079
is because the web cache is disregarding

41
00:01:58,079 --> 00:02:00,780
the cache control headers and it thinks

42
00:02:00,780 --> 00:02:03,420
that this is a static file resource due

43
00:02:03,420 --> 00:02:06,899
to the extension CSS in the URL

44
00:02:06,899 --> 00:02:09,720
the attacker can then finally simply

45
00:02:09,720 --> 00:02:12,120
access the same attack URL to steal the

46
00:02:12,120 --> 00:02:14,400
sensitive content

47
00:02:14,400 --> 00:02:16,080
the state-of-the-art detection

48
00:02:16,080 --> 00:02:18,959
methodology is presented in a paper

49
00:02:18,959 --> 00:02:20,760
called cached and Confused that was

50
00:02:20,760 --> 00:02:23,940
published at using security29 and which

51
00:02:23,940 --> 00:02:26,160
authors partially overlap with this

52
00:02:26,160 --> 00:02:28,680
paper that I'm presenting and this

53
00:02:28,680 --> 00:02:31,620
methodology is marker based and presents

54
00:02:31,620 --> 00:02:33,239
some limitations

55
00:02:33,239 --> 00:02:36,120
the main limitation is that this

56
00:02:36,120 --> 00:02:38,459
methodology assumes that the victim of a

57
00:02:38,459 --> 00:02:40,560
web cache deception attack must be

58
00:02:40,560 --> 00:02:43,620
authenticated this is done because it is

59
00:02:43,620 --> 00:02:46,140
assumed that the visitor of website when

60
00:02:46,140 --> 00:02:48,660
is authenticated carries more sensitive

61
00:02:48,660 --> 00:02:51,180
information that can be stolen and

62
00:02:51,180 --> 00:02:54,060
leaked to attackers however this

63
00:02:54,060 --> 00:02:57,599
introduced two technical limitations

64
00:02:57,599 --> 00:03:00,180
the first limitation is the scalability

65
00:03:00,180 --> 00:03:02,640
that is limited because this methodology

66
00:03:02,640 --> 00:03:05,580
has a costly manual setup process where

67
00:03:05,580 --> 00:03:08,040
the researcher must manually register an

68
00:03:08,040 --> 00:03:10,860
account on each website to test and

69
00:03:10,860 --> 00:03:12,840
manually populate it with a unique

70
00:03:12,840 --> 00:03:15,300
marker string usually random to prevent

71
00:03:15,300 --> 00:03:18,120
false positives that will be hopefully

72
00:03:18,120 --> 00:03:21,360
reflected in the pages as shown in this

73
00:03:21,360 --> 00:03:22,920
example screenshot

74
00:03:22,920 --> 00:03:25,080
and the second limitation is the

75
00:03:25,080 --> 00:03:27,720
coverage because what about pages that

76
00:03:27,720 --> 00:03:30,360
do not reflect this marker at all or

77
00:03:30,360 --> 00:03:33,300
pages and sites that do not require any

78
00:03:33,300 --> 00:03:36,300
form of authentication but still contain

79
00:03:36,300 --> 00:03:38,819
sensitive information

80
00:03:38,819 --> 00:03:41,700
so our goal for This research was to

81
00:03:41,700 --> 00:03:44,220
develop a new methodology that overcomes

82
00:03:44,220 --> 00:03:46,319
the limitations of the state of the art

83
00:03:46,319 --> 00:03:49,080
and that is able to find different kind

84
00:03:49,080 --> 00:03:51,540
of vulnerabilities for a different kind

85
00:03:51,540 --> 00:03:54,540
of attack an unauthenticated victim for

86
00:03:54,540 --> 00:03:56,819
web cache deception attacks and on

87
00:03:56,819 --> 00:03:58,980
different pages that were previously not

88
00:03:58,980 --> 00:04:00,120
testable

89
00:04:00,120 --> 00:04:02,760
so our new methodology is based on two

90
00:04:02,760 --> 00:04:05,280
building blocks that are called content

91
00:04:05,280 --> 00:04:07,680
identicality checks and the cash adders

92
00:04:07,680 --> 00:04:10,019
heuristics

93
00:04:10,019 --> 00:04:12,920
the first component of our methodology

94
00:04:12,920 --> 00:04:16,079
requests the same URL two times using

95
00:04:16,079 --> 00:04:18,779
two different clean browsers simulating

96
00:04:18,779 --> 00:04:21,000
two different visitors of the website

97
00:04:21,000 --> 00:04:24,000
and compares the two responses to see if

98
00:04:24,000 --> 00:04:25,800
they are the same or if they include

99
00:04:25,800 --> 00:04:29,120
some Dynamic content

100
00:04:29,840 --> 00:04:32,759
instead perform a lookup of the status

101
00:04:32,759 --> 00:04:35,880
of responses to check whether they come

102
00:04:35,880 --> 00:04:38,460
from the region server or from the cache

103
00:04:38,460 --> 00:04:41,100
and they are based on this table that we

104
00:04:41,100 --> 00:04:43,919
created during a preliminary study that

105
00:04:43,919 --> 00:04:46,620
shows the list of common header names

106
00:04:46,620 --> 00:04:50,820
and values of popular web caches

107
00:04:50,820 --> 00:04:53,639
our methodology follows three main steps

108
00:04:53,639 --> 00:04:56,340
in the first step we check if the tested

109
00:04:56,340 --> 00:04:59,699
URL returns Dynamic content potentially

110
00:04:59,699 --> 00:05:01,680
containing sensitive information because

111
00:05:01,680 --> 00:05:04,740
if a page is exactly the same for two

112
00:05:04,740 --> 00:05:07,680
different visitors we can already assume

113
00:05:07,680 --> 00:05:09,780
that it does not contain any sensitive

114
00:05:09,780 --> 00:05:11,040
information

115
00:05:11,040 --> 00:05:14,340
then a step 2 we craft an attack URL as

116
00:05:14,340 --> 00:05:16,020
I explained before by appending a

117
00:05:16,020 --> 00:05:18,300
non-existent file name and a static file

118
00:05:18,300 --> 00:05:21,060
extension to it and we check if it still

119
00:05:21,060 --> 00:05:23,759
responds with Dynamic content even after

120
00:05:23,759 --> 00:05:25,380
the alteration

121
00:05:25,380 --> 00:05:28,919
and finally in step 3 we check if the

122
00:05:28,919 --> 00:05:31,440
origin response to the attack URL was

123
00:05:31,440 --> 00:05:36,060
cached thus exposing the dynamic content

124
00:05:36,060 --> 00:05:38,460
to compare our new methodology with the

125
00:05:38,460 --> 00:05:42,000
state of the art we tested 404 websites

126
00:05:42,000 --> 00:05:44,940
using three different approaches the

127
00:05:44,940 --> 00:05:47,460
first is the state of the art called CC

128
00:05:47,460 --> 00:05:50,340
here where the victim is authenticated

129
00:05:50,340 --> 00:05:52,139
and then we have two different

130
00:05:52,139 --> 00:05:55,020
approaches that use both our new

131
00:05:55,020 --> 00:05:57,300
methodology that can run against

132
00:05:57,300 --> 00:06:01,500
authenticated victims such as for cc but

133
00:06:01,500 --> 00:06:03,780
also offers the possibility to test

134
00:06:03,780 --> 00:06:07,020
against unauthenticated ones which CC

135
00:06:07,020 --> 00:06:09,780
could not do and we can see from the

136
00:06:09,780 --> 00:06:11,520
results in the table that our

137
00:06:11,520 --> 00:06:14,160
methodology significantly outperformed

138
00:06:14,160 --> 00:06:17,280
the state of the art detecting 104

139
00:06:17,280 --> 00:06:19,320
vulnerabilities when unauthenticated

140
00:06:19,320 --> 00:06:22,620
victim and 115 when the victim was

141
00:06:22,620 --> 00:06:28,199
authenticated while cc is capped at 18.

142
00:06:28,199 --> 00:06:30,539
this shows that authentication is still

143
00:06:30,539 --> 00:06:32,940
an important factor in detecting web

144
00:06:32,940 --> 00:06:34,800
cache deception vulnerability

145
00:06:34,800 --> 00:06:38,280
but our methodology with unauthenticated

146
00:06:38,280 --> 00:06:41,280
victims is the only viable option for a

147
00:06:41,280 --> 00:06:44,060
large scale measurement and moreover

148
00:06:44,060 --> 00:06:46,919
differently from cash cashed and

149
00:06:46,919 --> 00:06:49,440
Confused our new methodology is able to

150
00:06:49,440 --> 00:06:52,520
autonomously filter out false positives

151
00:06:52,520 --> 00:06:55,800
and we kept them here in this table only

152
00:06:55,800 --> 00:06:58,620
for comparison reasons

153
00:06:58,620 --> 00:07:02,160
next We performed the largest scale web

154
00:07:02,160 --> 00:07:04,500
cache deception experiment to date on

155
00:07:04,500 --> 00:07:08,580
the Alexa top 10K where we detected 1188

156
00:07:08,580 --> 00:07:10,500
vulnerable websites

157
00:07:10,500 --> 00:07:13,080
we also categorized the liquid security

158
00:07:13,080 --> 00:07:16,080
tokens by using regular Expressions on

159
00:07:16,080 --> 00:07:18,360
the dynamic content of cached vulnerable

160
00:07:18,360 --> 00:07:19,740
pages

161
00:07:19,740 --> 00:07:22,560
the graph on the right instead shows the

162
00:07:22,560 --> 00:07:24,479
distribution of vulnerable websites in

163
00:07:24,479 --> 00:07:27,599
the Alexa ranking and we can observe a

164
00:07:27,599 --> 00:07:30,000
slightly higher number of vulnerable

165
00:07:30,000 --> 00:07:33,060
sites in the higher ranked websites and

166
00:07:33,060 --> 00:07:35,819
this is supposedly because websites that

167
00:07:35,819 --> 00:07:38,940
have more visitors might use caches more

168
00:07:38,940 --> 00:07:42,120
than lower ranked sites

169
00:07:42,120 --> 00:07:45,180
so unlike previously thought we showed

170
00:07:45,180 --> 00:07:46,919
that both authenticated and

171
00:07:46,919 --> 00:07:49,440
unauthenticated victims are impacted by

172
00:07:49,440 --> 00:07:52,560
web cache deception attack and as we saw

173
00:07:52,560 --> 00:07:54,780
from the last table in the previous

174
00:07:54,780 --> 00:07:57,120
slide a consequence of this attack is

175
00:07:57,120 --> 00:07:59,880
the stealing of security tokens that can

176
00:07:59,880 --> 00:08:02,160
be then exploited by attackers to mount

177
00:08:02,160 --> 00:08:05,160
further attacks against the victims by

178
00:08:05,160 --> 00:08:07,560
passing possible security Protections in

179
00:08:07,560 --> 00:08:08,639
place

180
00:08:08,639 --> 00:08:11,280
moreover in this experiment the victim

181
00:08:11,280 --> 00:08:13,919
was unauthenticated but but when we

182
00:08:13,919 --> 00:08:16,139
tried registering accounts on the

183
00:08:16,139 --> 00:08:18,960
impacted websites we frequently observed

184
00:08:18,960 --> 00:08:21,840
personal information liquid leakage of

185
00:08:21,840 --> 00:08:24,300
authenticated victims as well showing

186
00:08:24,300 --> 00:08:27,000
that this methodology is still an

187
00:08:27,000 --> 00:08:28,620
effective approach in finding

188
00:08:28,620 --> 00:08:31,080
vulnerabilities of for authenticated

189
00:08:31,080 --> 00:08:33,899
victims as well

190
00:08:33,899 --> 00:08:36,299
we exploited and reported the

191
00:08:36,299 --> 00:08:38,399
vulnerabilities that we found and we

192
00:08:38,399 --> 00:08:40,979
were able to collect 4 200 dollars in

193
00:08:40,979 --> 00:08:43,500
back bounties which shows that this

194
00:08:43,500 --> 00:08:45,720
vulnerability is taken seriously both by

195
00:08:45,720 --> 00:08:47,880
websites and responsible disclosure

196
00:08:47,880 --> 00:08:49,200
platforms

197
00:08:49,200 --> 00:08:52,680
here we list a list of EX of attack

198
00:08:52,680 --> 00:08:55,560
scenario chains where we were were able

199
00:08:55,560 --> 00:08:58,980
to perform attacks regardless and in

200
00:08:58,980 --> 00:09:01,440
spite of security mechanisms that were

201
00:09:01,440 --> 00:09:04,140
in place and correctly implemented only

202
00:09:04,140 --> 00:09:05,880
thanks to the web cache deception

203
00:09:05,880 --> 00:09:08,339
vulnerabilities that we discovered

204
00:09:08,339 --> 00:09:10,980
so we were able to perform a logincia

205
00:09:10,980 --> 00:09:13,680
srf attack by stealing the out State

206
00:09:13,680 --> 00:09:16,200
parameter on a login page

207
00:09:16,200 --> 00:09:19,019
then stealing csrf tokens enables an

208
00:09:19,019 --> 00:09:22,200
attacker to bypass csrf protections and

209
00:09:22,200 --> 00:09:24,720
stealing session IDs enables session

210
00:09:24,720 --> 00:09:26,339
hijacking

211
00:09:26,339 --> 00:09:28,920
on one website we successfully escalated

212
00:09:28,920 --> 00:09:31,140
our web cache deception vulnerability to

213
00:09:31,140 --> 00:09:34,080
our cache poisoning by combining it to a

214
00:09:34,080 --> 00:09:37,500
harmless self-exass that ultimately led

215
00:09:37,500 --> 00:09:39,540
to a stored xss

216
00:09:39,540 --> 00:09:42,420
and finally we discovered a supply chain

217
00:09:42,420 --> 00:09:45,180
issue where a single vulnerable service

218
00:09:45,180 --> 00:09:51,079
cloud provider impacted for 156 websites

219
00:09:51,240 --> 00:09:53,940
to conclude we showed that unlike

220
00:09:53,940 --> 00:09:56,160
previously considered unauthenticated

221
00:09:56,160 --> 00:09:58,620
victims are impacted as well and

222
00:09:58,620 --> 00:10:00,899
publicly accessible Pages can contain

223
00:10:00,899 --> 00:10:03,959
security critical secrets that can be of

224
00:10:03,959 --> 00:10:05,820
value for the attackers

225
00:10:05,820 --> 00:10:08,000
we showed that testing against

226
00:10:08,000 --> 00:10:10,560
unauthenticated victims is also a pretty

227
00:10:10,560 --> 00:10:12,300
effective approach in finding

228
00:10:12,300 --> 00:10:14,459
vulnerabilities against authenticated

229
00:10:14,459 --> 00:10:18,120
ones but without the hassle of the setup

230
00:10:18,120 --> 00:10:21,060
process and the limitations imposed by a

231
00:10:21,060 --> 00:10:23,459
marker based approach

232
00:10:23,459 --> 00:10:25,440
webcast deception is still an open

233
00:10:25,440 --> 00:10:28,980
problem and we don't have any clear and

234
00:10:28,980 --> 00:10:31,200
reliable solution but we have some

235
00:10:31,200 --> 00:10:33,779
recommendations in fact webcast

236
00:10:33,779 --> 00:10:36,779
deception is a system problem where no

237
00:10:36,779 --> 00:10:39,660
single entity is necessarily at fault in

238
00:10:39,660 --> 00:10:41,940
isolation and therefore website

239
00:10:41,940 --> 00:10:44,100
operators must consider the full

240
00:10:44,100 --> 00:10:46,560
integration of different components

241
00:10:46,560 --> 00:10:49,260
especially when managed by Third parties

242
00:10:49,260 --> 00:10:52,380
such as for Content delivery Networks

243
00:10:52,380 --> 00:10:55,500
for these reasons we say and argue that

244
00:10:55,500 --> 00:10:57,480
web caches are not Plug and Play

245
00:10:57,480 --> 00:10:59,579
Technologies

246
00:10:59,579 --> 00:11:03,240
so to wrap up we presented a new

247
00:11:03,240 --> 00:11:05,220
detection methodology for web cache

248
00:11:05,220 --> 00:11:07,200
deception vulnerabilities that we called

249
00:11:07,200 --> 00:11:11,040
de and that overcomes the limitations of

250
00:11:11,040 --> 00:11:12,959
the state of the art while also

251
00:11:12,959 --> 00:11:14,640
outperforming it

252
00:11:14,640 --> 00:11:17,100
this methodology is focused on finding

253
00:11:17,100 --> 00:11:19,860
vulnerabilities against unauthenticated

254
00:11:19,860 --> 00:11:22,079
victims for a different kind of attack

255
00:11:22,079 --> 00:11:25,140
and on publicly accessible pages

256
00:11:25,140 --> 00:11:27,540
we measured the prevalence of

257
00:11:27,540 --> 00:11:29,459
unauthenticated web cache deception

258
00:11:29,459 --> 00:11:31,680
vulnerabilities in the wild and we

259
00:11:31,680 --> 00:11:34,260
showed how this can be exploited by

260
00:11:34,260 --> 00:11:36,720
attackers to break the security of the

261
00:11:36,720 --> 00:11:37,920
websites

262
00:11:37,920 --> 00:11:41,160
so you can find our code open sourced on

263
00:11:41,160 --> 00:11:44,339
GitHub at this URL thank you for

264
00:11:44,339 --> 00:11:45,959
listening and if you have any questions

265
00:11:45,959 --> 00:11:48,300
you can ask them now or send me an email

266
00:11:48,300 --> 00:11:52,399
later or find me here thank you

