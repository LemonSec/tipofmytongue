1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:09,139 --> 00:00:11,880
and this is a joint work with Maya

3
00:00:11,880 --> 00:00:14,400
dotania segulada novezar they're all in

4
00:00:14,400 --> 00:00:16,079
this room

5
00:00:16,079 --> 00:00:19,320
um okay so Twilight Twilight is a

6
00:00:19,320 --> 00:00:21,240
differentially private payment Java

7
00:00:21,240 --> 00:00:23,760
Network so first let me introduce what

8
00:00:23,760 --> 00:00:26,519
payment Channel network is

9
00:00:26,519 --> 00:00:29,160
um so first of all this is Network so we

10
00:00:29,160 --> 00:00:31,679
have relays which are the participants

11
00:00:31,679 --> 00:00:32,880
in the network

12
00:00:32,880 --> 00:00:35,340
uh we have channels channels are the

13
00:00:35,340 --> 00:00:38,700
edges in this network which are locked

14
00:00:38,700 --> 00:00:41,219
coins between two relays so for example

15
00:00:41,219 --> 00:00:43,739
here we have two relays each one of them

16
00:00:43,739 --> 00:00:46,680
locked five coins and then they can just

17
00:00:46,680 --> 00:00:48,840
transfer two coins from one to another

18
00:00:48,840 --> 00:00:52,980
which is just re-divide the same locked

19
00:00:52,980 --> 00:00:54,360
coins

20
00:00:54,360 --> 00:00:57,000
great and we have routes routes is a

21
00:00:57,000 --> 00:00:59,820
list of channels from a specific source

22
00:00:59,820 --> 00:01:02,340
to a specific Target and payments

23
00:01:02,340 --> 00:01:05,400
payments is just using this route to

24
00:01:05,400 --> 00:01:09,060
shift coins across it so for example if

25
00:01:09,060 --> 00:01:11,760
Alice want to transfer two coins to

26
00:01:11,760 --> 00:01:15,060
Charlie in in this example so we can

27
00:01:15,060 --> 00:01:18,659
just adjust the division of the funds of

28
00:01:18,659 --> 00:01:21,240
the locked funds throughout the route

29
00:01:21,240 --> 00:01:23,820
an important thing to notice here is

30
00:01:23,820 --> 00:01:26,820
that if Alice will want to transfer two

31
00:01:26,820 --> 00:01:29,159
more coins to Charlie it will be

32
00:01:29,159 --> 00:01:32,580
impossible because in one of the midi in

33
00:01:32,580 --> 00:01:34,799
the channels in between there is not

34
00:01:34,799 --> 00:01:36,900
enough liquidity and this is the one

35
00:01:36,900 --> 00:01:40,259
that is currently circled there

36
00:01:40,259 --> 00:01:42,540
and permanent Channel networks are is

37
00:01:42,540 --> 00:01:44,700
not something that I just invented uh

38
00:01:44,700 --> 00:01:46,500
the main example here is the lightning

39
00:01:46,500 --> 00:01:50,399
Network which currently has over 100

40
00:01:50,399 --> 00:01:54,360
million dollar in locked funds

41
00:01:54,360 --> 00:01:56,399
um so this is a big thing that we really

42
00:01:56,399 --> 00:01:58,439
need to consider

43
00:01:58,439 --> 00:02:01,740
um and pcn's payment Channel networks

44
00:02:01,740 --> 00:02:04,680
are great uh but they're they're not

45
00:02:04,680 --> 00:02:06,060
private

46
00:02:06,060 --> 00:02:11,640
um in 2017 uh a probing attack was uh

47
00:02:11,640 --> 00:02:15,420
presented to our community uh which

48
00:02:15,420 --> 00:02:19,560
based on the idea that query is cheap an

49
00:02:19,560 --> 00:02:21,959
attacker can just repeatedly query the

50
00:02:21,959 --> 00:02:24,300
same channel over and over again over

51
00:02:24,300 --> 00:02:29,040
time and observe liquidity changes so

52
00:02:29,040 --> 00:02:31,560
for example let's say that the attacker

53
00:02:31,560 --> 00:02:34,319
uses that the route that is now uh

54
00:02:34,319 --> 00:02:36,420
presented in blue

55
00:02:36,420 --> 00:02:39,780
um and he asks hey can I transfer 100

56
00:02:39,780 --> 00:02:42,660
coins and he gets yes from the network

57
00:02:42,660 --> 00:02:45,440
in this example and he will not actually

58
00:02:45,440 --> 00:02:48,959
transfer this 100 coins

59
00:02:48,959 --> 00:02:51,780
um cool so maybe he can do it again

60
00:02:51,780 --> 00:02:53,040
and again

61
00:02:53,040 --> 00:02:56,760
and see the question eventually changes

62
00:02:56,760 --> 00:02:59,340
so for example in here he just got yes

63
00:02:59,340 --> 00:03:01,379
yes yes no

64
00:03:01,379 --> 00:03:04,440
something changed in the network so in

65
00:03:04,440 --> 00:03:07,019
this case you can just ask hey maybe I

66
00:03:07,019 --> 00:03:09,120
can send 50 coins

67
00:03:09,120 --> 00:03:11,879
so this is the probing attack which

68
00:03:11,879 --> 00:03:13,560
leaks different properties on the

69
00:03:13,560 --> 00:03:16,560
network the first one is that it clicks

70
00:03:16,560 --> 00:03:19,260
the current liquidity of the channel it

71
00:03:19,260 --> 00:03:20,940
leaks the existence of the transaction

72
00:03:20,940 --> 00:03:23,940
and the size if the attacker will do

73
00:03:23,940 --> 00:03:27,300
that to many channels in the network it

74
00:03:27,300 --> 00:03:30,120
also leaks what are the identities of

75
00:03:30,120 --> 00:03:32,760
the party who paid whom

76
00:03:32,760 --> 00:03:34,860
um and it's actually silent to both

77
00:03:34,860 --> 00:03:37,080
Alice and Bob because he is not

78
00:03:37,080 --> 00:03:40,040
communicating with them

79
00:03:40,140 --> 00:03:43,140
um and this is the problem that our

80
00:03:43,140 --> 00:03:46,440
system Twilight is trying to overcome so

81
00:03:46,440 --> 00:03:48,959
Twilight is a payment Channel network a

82
00:03:48,959 --> 00:03:51,060
new payment Channel network that

83
00:03:51,060 --> 00:03:53,900
utilizes noise in order to

84
00:03:53,900 --> 00:03:58,080
provide differential privacy guarantees

85
00:03:58,080 --> 00:04:00,360
um we also use trusted execution

86
00:04:00,360 --> 00:04:03,140
environments to deal with selfish relays

87
00:04:03,140 --> 00:04:05,280
all the terms that are currently

88
00:04:05,280 --> 00:04:08,400
underlined will be explained later in

89
00:04:08,400 --> 00:04:09,900
this talk

90
00:04:09,900 --> 00:04:12,720
uh in in the in our paper we also did

91
00:04:12,720 --> 00:04:15,180
both analysis and simulations to the

92
00:04:15,180 --> 00:04:17,220
three properties of cost privacy and

93
00:04:17,220 --> 00:04:19,500
security and we did the full prototype

94
00:04:19,500 --> 00:04:21,540
implementation

95
00:04:21,540 --> 00:04:25,139
awesome so uh in this track heavily I

96
00:04:25,139 --> 00:04:26,820
don't need to explain what differential

97
00:04:26,820 --> 00:04:30,840
privacy is but I do want to highlight uh

98
00:04:30,840 --> 00:04:33,720
our goal our goal here is that the

99
00:04:33,720 --> 00:04:36,120
attacker will not be able to distinguish

100
00:04:36,120 --> 00:04:38,940
between two events the first event is

101
00:04:38,940 --> 00:04:41,040
that Alice paid Bob and the second event

102
00:04:41,040 --> 00:04:44,100
is that Alice didn't pay Bob

103
00:04:44,100 --> 00:04:46,139
um we have so we have that Salon Delta

104
00:04:46,139 --> 00:04:49,440
uh differential private uh

105
00:04:49,440 --> 00:04:52,500
uh definition that we all know and in

106
00:04:52,500 --> 00:04:53,880
our paper we actually did a full

107
00:04:53,880 --> 00:04:57,360
analysis and we were able to provide an

108
00:04:57,360 --> 00:05:00,300
Epsilon a numerical Epsilon and Delta

109
00:05:00,300 --> 00:05:04,580
guarantee to the users of Twilight

110
00:05:04,740 --> 00:05:05,759
um

111
00:05:05,759 --> 00:05:10,560
noise in our case is simple in our case

112
00:05:10,560 --> 00:05:13,860
noise is just a random number I will not

113
00:05:13,860 --> 00:05:17,940
tell you now how we generate this number

114
00:05:17,940 --> 00:05:18,720
um

115
00:05:18,720 --> 00:05:21,960
but the idea is that we use it upon a

116
00:05:21,960 --> 00:05:25,919
request to the relay uh when when we got

117
00:05:25,919 --> 00:05:29,280
the request hey can we transfer m coins

118
00:05:29,280 --> 00:05:30,960
um the answer will be whether the

119
00:05:30,960 --> 00:05:34,560
liquidity minus this random number is

120
00:05:34,560 --> 00:05:38,720
big enough to transfer these endpoints

121
00:05:39,300 --> 00:05:42,180
um and note that a naive solution here

122
00:05:42,180 --> 00:05:44,940
to how to generate this noise is not

123
00:05:44,940 --> 00:05:48,300
good enough right because the attack is

124
00:05:48,300 --> 00:05:51,180
cheap so the attacker can just

125
00:05:51,180 --> 00:05:54,259
uh query the channel over and over again

126
00:05:54,259 --> 00:05:57,360
observe some kind of percentage of how

127
00:05:57,360 --> 00:06:00,120
many yes and how many nodes he gets and

128
00:06:00,120 --> 00:06:01,979
therefore he can just rebuild the

129
00:06:01,979 --> 00:06:03,960
histogram of the noise and know exactly

130
00:06:03,960 --> 00:06:05,759
what is the real liquidity

131
00:06:05,759 --> 00:06:08,699
so we had to use something that is more

132
00:06:08,699 --> 00:06:12,060
uh complex we used here a paper that was

133
00:06:12,060 --> 00:06:16,080
presented in 2011 that provide

134
00:06:16,080 --> 00:06:18,780
differential privacy guarantees under

135
00:06:18,780 --> 00:06:21,600
continual observation

136
00:06:21,600 --> 00:06:24,660
the base idea here is that the noise is

137
00:06:24,660 --> 00:06:27,240
dependent on time

138
00:06:27,240 --> 00:06:30,600
um so here we're utilizing a thing that

139
00:06:30,600 --> 00:06:32,639
is called minimal covering Set uh so for

140
00:06:32,639 --> 00:06:35,340
example if we had a transaction if we

141
00:06:35,340 --> 00:06:37,860
had a coin transfer at a specific time

142
00:06:37,860 --> 00:06:41,039
at T equals one and the attacker queries

143
00:06:41,039 --> 00:06:44,819
uh the channel at T equals two then we

144
00:06:44,819 --> 00:06:48,120
will use noise that uh

145
00:06:48,120 --> 00:06:51,120
we will use the minimal covering set of

146
00:06:51,120 --> 00:06:53,940
the time span until this time of the

147
00:06:53,940 --> 00:06:56,460
query so in this example the node that

148
00:06:56,460 --> 00:06:59,280
is now running in blue is the noise is

149
00:06:59,280 --> 00:07:03,000
the node that we will use to derive the

150
00:07:03,000 --> 00:07:03,960
noise

151
00:07:03,960 --> 00:07:07,100
if the attacker then queries in the next

152
00:07:07,100 --> 00:07:10,020
times timestamp then we will use the

153
00:07:10,020 --> 00:07:12,419
minimal covering set of the whole period

154
00:07:12,419 --> 00:07:15,539
so as you can see here we used the same

155
00:07:15,539 --> 00:07:16,979
noise twice

156
00:07:16,979 --> 00:07:20,819
and because we use the same noise for

157
00:07:20,819 --> 00:07:23,060
every node

158
00:07:23,060 --> 00:07:26,220
we used the same noise to hide the same

159
00:07:26,220 --> 00:07:28,680
coin transfer which means that the

160
00:07:28,680 --> 00:07:32,460
attackers is less different samples of

161
00:07:32,460 --> 00:07:34,979
the random generator that hides the same

162
00:07:34,979 --> 00:07:36,300
coin

163
00:07:36,300 --> 00:07:39,780
uh to conclude in order to uh

164
00:07:39,780 --> 00:07:41,759
uh to answer the question can we

165
00:07:41,759 --> 00:07:44,400
transfer M coin we now need to consider

166
00:07:44,400 --> 00:07:46,979
the time of the query and then we will

167
00:07:46,979 --> 00:07:51,180
just reduce the total noise of the uh of

168
00:07:51,180 --> 00:07:53,639
the nodes in the minimal covering sets

169
00:07:53,639 --> 00:07:55,560
there are much more details in the paper

170
00:07:55,560 --> 00:07:57,660
I'm promising you

171
00:07:57,660 --> 00:07:59,580
cool

172
00:07:59,580 --> 00:08:03,300
um so as you can see adding noise means

173
00:08:03,300 --> 00:08:06,360
that we need to lock more coins in in

174
00:08:06,360 --> 00:08:08,039
the example that I'm showing here in

175
00:08:08,039 --> 00:08:09,900
order to achieve an Epsilon which is

176
00:08:09,900 --> 00:08:12,000
0.15

177
00:08:12,000 --> 00:08:15,000
each really needs to lock much more

178
00:08:15,000 --> 00:08:17,099
coins in this example he needs to lock

179
00:08:17,099 --> 00:08:18,800
extra

180
00:08:18,800 --> 00:08:22,919
9500 coins in order to hide this uh

181
00:08:22,919 --> 00:08:25,800
transfer this one coin transfer

182
00:08:25,800 --> 00:08:28,919
but please note that these locked coins

183
00:08:28,919 --> 00:08:32,640
need to be acquired when are we locking

184
00:08:32,640 --> 00:08:35,099
when we creating the channel but then

185
00:08:35,099 --> 00:08:37,080
when we're distracting the channel we

186
00:08:37,080 --> 00:08:39,839
get all this noise back all these coins

187
00:08:39,839 --> 00:08:43,260
back so therefore if we for example if

188
00:08:43,260 --> 00:08:46,020
the relay will take a loan when creating

189
00:08:46,020 --> 00:08:48,480
the channel and then we'll repay the

190
00:08:48,480 --> 00:08:50,580
loan when you're distracting it you will

191
00:08:50,580 --> 00:08:53,220
only need to pay for the interest

192
00:08:53,220 --> 00:08:55,680
and in our paper we actually showed that

193
00:08:55,680 --> 00:08:59,779
giving that the relay will do at least

194
00:08:59,779 --> 00:09:04,140
77 payments a day for this channel so

195
00:09:04,140 --> 00:09:06,600
with just one percent of free he will

196
00:09:06,600 --> 00:09:11,120
cover all the extra privacy costs

197
00:09:11,399 --> 00:09:13,440
great another thing that I want to

198
00:09:13,440 --> 00:09:15,720
highlight here is that relays are

199
00:09:15,720 --> 00:09:19,019
selfish by being selfish they just have

200
00:09:19,019 --> 00:09:21,839
the incentive to not add the Noise by

201
00:09:21,839 --> 00:09:25,140
adding noise they are saying no to more

202
00:09:25,140 --> 00:09:28,560
transactions to more payments that they

203
00:09:28,560 --> 00:09:30,779
need to handle and they don't want to do

204
00:09:30,779 --> 00:09:31,560
it

205
00:09:31,560 --> 00:09:34,740
in our paper we used these trusted

206
00:09:34,740 --> 00:09:37,140
execution environments in order to force

207
00:09:37,140 --> 00:09:39,000
them to add this noise

208
00:09:39,000 --> 00:09:42,959
teas are isolated Hardware that gives us

209
00:09:42,959 --> 00:09:45,660
the properties of confidentiality and

210
00:09:45,660 --> 00:09:48,360
integrity which means that the relay

211
00:09:48,360 --> 00:09:52,620
cannot change the code that runs inside

212
00:09:52,620 --> 00:09:57,839
X the things but it also can't see the

213
00:09:57,839 --> 00:10:00,720
memory or can see which flow of the

214
00:10:00,720 --> 00:10:04,399
execution has been occurred

215
00:10:04,680 --> 00:10:07,320
um in our system we actually decided to

216
00:10:07,320 --> 00:10:10,560
do a stateless trusted execution

217
00:10:10,560 --> 00:10:12,420
environment

218
00:10:12,420 --> 00:10:14,839
um and this decision has pros and cons

219
00:10:14,839 --> 00:10:18,779
the big Pro is that we don't need to

220
00:10:18,779 --> 00:10:23,040
handle the consensus and to handle the

221
00:10:23,040 --> 00:10:26,279
network protocol of the blockchains but

222
00:10:26,279 --> 00:10:29,720
it also gives us great challenges

223
00:10:29,720 --> 00:10:33,120
uh one example challenge is that the

224
00:10:33,120 --> 00:10:35,519
relay because that is stateless they

225
00:10:35,519 --> 00:10:37,920
really can just re-execute it over and

226
00:10:37,920 --> 00:10:40,620
over again until he will see the result

227
00:10:40,620 --> 00:10:44,160
that he wants we solved all the this

228
00:10:44,160 --> 00:10:46,860
Challenge and many more in the paper are

229
00:10:46,860 --> 00:10:50,279
really uh encourage you to read it

230
00:10:50,279 --> 00:10:53,399
uh we also provide a full prototype

231
00:10:53,399 --> 00:10:55,680
implementation to our system this is

232
00:10:55,680 --> 00:10:57,480
currently an open source that you can

233
00:10:57,480 --> 00:11:00,720
all just gather and say this is a huge

234
00:11:00,720 --> 00:11:02,880
wrapper

235
00:11:02,880 --> 00:11:05,700
um and we got a pretty good performance

236
00:11:05,700 --> 00:11:09,360
uh considering the throughput we up to

237
00:11:09,360 --> 00:11:14,600
we we handle up to 850 payments a second

238
00:11:14,600 --> 00:11:16,860
while the currently the lightning

239
00:11:16,860 --> 00:11:18,380
Network handles

240
00:11:18,380 --> 00:11:22,620
350 which is almost three times the

241
00:11:22,620 --> 00:11:26,519
latency for for intermediate relays is

242
00:11:26,519 --> 00:11:29,720
around one second

243
00:11:30,000 --> 00:11:34,320
um which is I would say sufficient when

244
00:11:34,320 --> 00:11:37,500
you try to pay someone

245
00:11:37,500 --> 00:11:39,720
so to conclude

246
00:11:39,720 --> 00:11:42,000
how we were able to achieve differential

247
00:11:42,000 --> 00:11:44,700
privacy guarantees to Twilight using

248
00:11:44,700 --> 00:11:46,800
continual Observer under continual

249
00:11:46,800 --> 00:11:49,260
observation of the attacker

250
00:11:49,260 --> 00:11:51,420
privacy is something that we're able to

251
00:11:51,420 --> 00:11:55,399
provide but it comes with a cost

252
00:11:55,399 --> 00:11:59,279
relays has had an incentive to not add

253
00:11:59,279 --> 00:12:02,160
noise and we're able to force them using

254
00:12:02,160 --> 00:12:04,800
trusted execution environments and we

255
00:12:04,800 --> 00:12:08,040
provide a full prototype implementation

256
00:12:08,040 --> 00:12:10,699
thank you

