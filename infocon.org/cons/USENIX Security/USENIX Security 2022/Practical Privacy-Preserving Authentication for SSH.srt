1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:08,179 --> 00:00:10,260
this work would not be possible without

3
00:00:10,260 --> 00:00:13,019
my excellent collaborators Lance Stan

4
00:00:13,019 --> 00:00:14,580
and yonjin we're all from Oregon State

5
00:00:14,580 --> 00:00:15,660
University

6
00:00:15,660 --> 00:00:17,300
so this talk is about public key

7
00:00:17,300 --> 00:00:19,859
authentication in SSH so I'm going to

8
00:00:19,859 --> 00:00:22,800
start by just describing how that works

9
00:00:22,800 --> 00:00:25,460
so when you connect to a server with SSH

10
00:00:25,460 --> 00:00:28,619
your client says hey here's a public key

11
00:00:28,619 --> 00:00:30,060
do you want me to authenticate under

12
00:00:30,060 --> 00:00:31,740
this public key and the server might say

13
00:00:31,740 --> 00:00:34,260
no and so your the client software will

14
00:00:34,260 --> 00:00:36,239
pick another public key and offer it to

15
00:00:36,239 --> 00:00:37,739
the server and maybe the server says no

16
00:00:37,739 --> 00:00:38,520
again

17
00:00:38,520 --> 00:00:40,500
and eventually we hope that the server

18
00:00:40,500 --> 00:00:42,320
will say yes to one of these

19
00:00:42,320 --> 00:00:45,540
advertisements and at that point the

20
00:00:45,540 --> 00:00:48,539
client can sign a nonce and authenticate

21
00:00:48,539 --> 00:00:50,700
under that public key

22
00:00:50,700 --> 00:00:53,820
so that's the basic setup for public key

23
00:00:53,820 --> 00:00:56,100
authentication and SSH and one thing you

24
00:00:56,100 --> 00:00:58,559
might have noticed is that the server

25
00:00:58,559 --> 00:01:00,539
can just say no to every single

26
00:01:00,539 --> 00:01:02,640
advertisement and if it says no then

27
00:01:02,640 --> 00:01:05,280
it's going to learn all of the keys that

28
00:01:05,280 --> 00:01:07,799
the client is willing to offer and of

29
00:01:07,799 --> 00:01:09,240
course this can be used to fingerprint

30
00:01:09,240 --> 00:01:10,619
the the client

31
00:01:10,619 --> 00:01:12,900
so I first learned about this problem

32
00:01:12,900 --> 00:01:16,380
from a blog post by philippo valsorta

33
00:01:16,380 --> 00:01:18,540
and he encouraged the readers of his

34
00:01:18,540 --> 00:01:21,180
blog to SSH to This Server that he set

35
00:01:21,180 --> 00:01:24,000
up and so I did that and when I do that

36
00:01:24,000 --> 00:01:26,880
this is what it looks like to me and in

37
00:01:26,880 --> 00:01:31,020
particular his SSH server knows my name

38
00:01:31,020 --> 00:01:34,400
and he and it knows my GitHub ID

39
00:01:34,400 --> 00:01:36,479
and so how does it know this well

40
00:01:36,479 --> 00:01:38,880
there's two reasons first is that

41
00:01:38,880 --> 00:01:40,560
the public keys that you upload to

42
00:01:40,560 --> 00:01:42,960
GitHub are truly public it's really easy

43
00:01:42,960 --> 00:01:44,640
to just go to GitHub and and view

44
00:01:44,640 --> 00:01:47,820
anybody's public key and second the SSH

45
00:01:47,820 --> 00:01:50,880
client by default is willing to send all

46
00:01:50,880 --> 00:01:52,200
of the public keys that it knows about

47
00:01:52,200 --> 00:01:55,259
to any server to any server that's

48
00:01:55,259 --> 00:01:56,939
willing to refuse all of the

49
00:01:56,939 --> 00:01:58,680
advertisements

50
00:01:58,680 --> 00:02:01,079
um okay so that's kind of interesting

51
00:02:01,079 --> 00:02:03,798
and creepy

52
00:02:03,920 --> 00:02:06,240
I'll point out that you can configure

53
00:02:06,240 --> 00:02:09,538
your SSH client to only send the keys to

54
00:02:09,538 --> 00:02:12,000
the servers that you expect so if this

55
00:02:12,000 --> 00:02:13,680
were the only problem with SSH

56
00:02:13,680 --> 00:02:15,780
authentication I wouldn't have much to

57
00:02:15,780 --> 00:02:17,520
talk about today but there are some

58
00:02:17,520 --> 00:02:19,520
other problems with SSH

59
00:02:19,520 --> 00:02:21,959
authentication that that we can improve

60
00:02:21,959 --> 00:02:25,800
and that's our our goal in this work

61
00:02:25,800 --> 00:02:27,480
so another another problem just

62
00:02:27,480 --> 00:02:29,040
switching things around a bit is that

63
00:02:29,040 --> 00:02:31,200
the client can offer somebody else's

64
00:02:31,200 --> 00:02:33,300
public key so the client can offer a key

65
00:02:33,300 --> 00:02:34,980
for which it doesn't know the secret key

66
00:02:34,980 --> 00:02:36,720
and then it can observe whether the

67
00:02:36,720 --> 00:02:38,700
server is happy with that key or not so

68
00:02:38,700 --> 00:02:40,379
the the client can kind of probe the

69
00:02:40,379 --> 00:02:42,540
server to see whether it is familiar

70
00:02:42,540 --> 00:02:45,060
with a certain public key

71
00:02:45,060 --> 00:02:47,879
um it's possible in principle that you

72
00:02:47,879 --> 00:02:50,040
can avoid this in the SSH protocol in

73
00:02:50,040 --> 00:02:52,739
principle the server could demand the

74
00:02:52,739 --> 00:02:54,360
the client to send a signature along

75
00:02:54,360 --> 00:02:56,459
with its advertisement to prove that it

76
00:02:56,459 --> 00:02:58,560
really knows the secret key as far as we

77
00:02:58,560 --> 00:03:00,840
know there's no SSH implementations that

78
00:03:00,840 --> 00:03:04,319
actually expose this uh as a feature

79
00:03:04,319 --> 00:03:06,599
because because none of the SSH clients

80
00:03:06,599 --> 00:03:07,980
that we know of actually would do this

81
00:03:07,980 --> 00:03:09,060
but

82
00:03:09,060 --> 00:03:09,780
um

83
00:03:09,780 --> 00:03:11,640
that's technically possible to fix

84
00:03:11,640 --> 00:03:13,140
without you know making drastic

85
00:03:13,140 --> 00:03:16,319
modifications to the SSH protocol but

86
00:03:16,319 --> 00:03:18,540
there's there's more issues here

87
00:03:18,540 --> 00:03:19,080
um

88
00:03:19,080 --> 00:03:22,440
one issue is that the server sees

89
00:03:22,440 --> 00:03:23,940
exactly which key was used to

90
00:03:23,940 --> 00:03:26,220
authenticate and what's more the server

91
00:03:26,220 --> 00:03:28,860
has a signature under that key which is

92
00:03:28,860 --> 00:03:30,239
like proof that it can show to somebody

93
00:03:30,239 --> 00:03:32,700
else that a particular key owner

94
00:03:32,700 --> 00:03:35,159
authenticated to the server this is

95
00:03:35,159 --> 00:03:37,560
pretty fundamental to the SSH protocol

96
00:03:37,560 --> 00:03:38,700
this can't be fixed with simple

97
00:03:38,700 --> 00:03:41,640
configuration fixes and as we'll see in

98
00:03:41,640 --> 00:03:43,680
this talk it is possible to authenticate

99
00:03:43,680 --> 00:03:45,239
without letting the server learn this

100
00:03:45,239 --> 00:03:47,700
kind of information

101
00:03:47,700 --> 00:03:51,180
and finally it's not only bad when the

102
00:03:51,180 --> 00:03:53,220
server says no to every request if the

103
00:03:53,220 --> 00:03:54,780
server can just say yes to every request

104
00:03:54,780 --> 00:03:56,580
that's also kind of bad because the

105
00:03:56,580 --> 00:03:58,980
server can act as a Honeypot so imagine

106
00:03:58,980 --> 00:04:00,659
that the client connects to the wrong

107
00:04:00,659 --> 00:04:03,599
server but decides to trust that server

108
00:04:03,599 --> 00:04:05,760
because it's the first use it's a common

109
00:04:05,760 --> 00:04:09,420
scenario so in this case the client

110
00:04:09,420 --> 00:04:11,280
would be mistaken about which server

111
00:04:11,280 --> 00:04:12,780
it's connected to

112
00:04:12,780 --> 00:04:14,939
and so this is another problem that our

113
00:04:14,939 --> 00:04:17,279
new approach can improve so we can't

114
00:04:17,279 --> 00:04:19,620
completely connect we can't completely

115
00:04:19,620 --> 00:04:22,139
protect a client who trusts the wrong

116
00:04:22,139 --> 00:04:23,759
server on first use but we can make

117
00:04:23,759 --> 00:04:25,380
things harder for a server in those

118
00:04:25,380 --> 00:04:26,820
cases

119
00:04:26,820 --> 00:04:30,419
so the goals of our work are to design a

120
00:04:30,419 --> 00:04:33,720
new authentication method for SSH public

121
00:04:33,720 --> 00:04:35,880
keys in which the server and client

122
00:04:35,880 --> 00:04:37,620
learn minimal information about each

123
00:04:37,620 --> 00:04:39,740
other

124
00:04:39,960 --> 00:04:40,740
um

125
00:04:40,740 --> 00:04:43,020
if I could convince the entire world to

126
00:04:43,020 --> 00:04:45,600
generate new key pairs so they can use

127
00:04:45,600 --> 00:04:47,280
my fancy cryptography well my life would

128
00:04:47,280 --> 00:04:48,500
be a lot easier

129
00:04:48,500 --> 00:04:51,360
but the the problem is well it's not a

130
00:04:51,360 --> 00:04:53,340
problem the the truth of the matter is

131
00:04:53,340 --> 00:04:55,740
people have SSH Keys already and they're

132
00:04:55,740 --> 00:04:57,900
quite happy with those SSH keys and

133
00:04:57,900 --> 00:05:00,840
those keys are a mixture of RSA keys and

134
00:05:00,840 --> 00:05:05,759
ecdsa Ed DSA keys so we want to design a

135
00:05:05,759 --> 00:05:07,259
mechanism that's compatible with these

136
00:05:07,259 --> 00:05:09,840
existing key pairs it's not realistic to

137
00:05:09,840 --> 00:05:11,639
imagine that the entire world is going

138
00:05:11,639 --> 00:05:14,699
to generate new SSH keys and finally we

139
00:05:14,699 --> 00:05:17,419
want to minimize the Reliance on

140
00:05:17,419 --> 00:05:20,040
configuration so we want things to be

141
00:05:20,040 --> 00:05:21,300
kind of safe out of the box without

142
00:05:21,300 --> 00:05:24,360
relying on special configurations so you

143
00:05:24,360 --> 00:05:25,800
know power users like us can probably

144
00:05:25,800 --> 00:05:27,539
handle you know configuring our SSH

145
00:05:27,539 --> 00:05:29,940
clients but these configurations can be

146
00:05:29,940 --> 00:05:33,900
uh you know error prone for novice users

147
00:05:33,900 --> 00:05:35,520
okay

148
00:05:35,520 --> 00:05:37,259
so what we do in this work is we design

149
00:05:37,259 --> 00:05:39,840
a new authentication method and I'll

150
00:05:39,840 --> 00:05:42,180
give you an overview of the the

151
00:05:42,180 --> 00:05:44,220
guarantees that it provides so the

152
00:05:44,220 --> 00:05:46,259
client has a set of secret keys that it

153
00:05:46,259 --> 00:05:47,940
knows and the server has a set of public

154
00:05:47,940 --> 00:05:51,419
keys that it considers to be authorized

155
00:05:51,419 --> 00:05:54,000
and these can be a mixture of different

156
00:05:54,000 --> 00:05:56,759
flavors of RSA keys in in a single

157
00:05:56,759 --> 00:05:57,680
interaction

158
00:05:57,680 --> 00:06:00,360
and so in in the notation here I'm

159
00:06:00,360 --> 00:06:02,940
imagining that sk1 is the key that goes

160
00:06:02,940 --> 00:06:06,479
with pk1 and sk4 is the is the key that

161
00:06:06,479 --> 00:06:09,479
goes with pk4

162
00:06:09,479 --> 00:06:11,100
um so what does the server learn from

163
00:06:11,100 --> 00:06:13,860
our protocol well the server learns the

164
00:06:13,860 --> 00:06:16,080
number of keys that the client has

165
00:06:16,080 --> 00:06:19,199
and the server learns that the server

166
00:06:19,199 --> 00:06:21,180
learns basically a single bit does the

167
00:06:21,180 --> 00:06:22,680
client have any of the secret Keys

168
00:06:22,680 --> 00:06:24,840
corresponding to these uh public Keys

169
00:06:24,840 --> 00:06:27,479
yes or no but it doesn't learn which one

170
00:06:27,479 --> 00:06:30,060
the the client has

171
00:06:30,060 --> 00:06:32,160
the client learns how many keys the

172
00:06:32,160 --> 00:06:35,520
server holds and the client also learns

173
00:06:35,520 --> 00:06:37,979
which ones are authorized but what's

174
00:06:37,979 --> 00:06:41,039
important here is that for example the

175
00:06:41,039 --> 00:06:43,319
client can't learn whether public key

176
00:06:43,319 --> 00:06:45,539
number two is authorized by the server

177
00:06:45,539 --> 00:06:46,919
because the client doesn't have the

178
00:06:46,919 --> 00:06:50,699
secret key for public key number two

179
00:06:50,699 --> 00:06:53,759
our method doesn't really depend on any

180
00:06:53,759 --> 00:06:55,919
special configurations it just works out

181
00:06:55,919 --> 00:06:58,800
of the box so it's safe to use any of

182
00:06:58,800 --> 00:07:00,780
your keys in any authentication attempt

183
00:07:00,780 --> 00:07:03,840
so that's kind of nice

184
00:07:03,840 --> 00:07:05,759
and one thing that's kind of subtle is

185
00:07:05,759 --> 00:07:06,660
that

186
00:07:06,660 --> 00:07:08,400
a server who's trying to act as a

187
00:07:08,400 --> 00:07:10,620
Honeypot can't convince the client that

188
00:07:10,620 --> 00:07:12,860
they've connected unless that server

189
00:07:12,860 --> 00:07:15,360
explicitly knows and explicitly includes

190
00:07:15,360 --> 00:07:17,520
that client's public key in this

191
00:07:17,520 --> 00:07:20,160
protocol so there's no way for the

192
00:07:20,160 --> 00:07:22,199
server to just say yes and let everybody

193
00:07:22,199 --> 00:07:24,000
in the server has to know your public

194
00:07:24,000 --> 00:07:26,099
key if it wants to let you in so that

195
00:07:26,099 --> 00:07:28,620
kind of makes it harder for a server to

196
00:07:28,620 --> 00:07:30,660
uh intercept your connection on a first

197
00:07:30,660 --> 00:07:32,360
use

198
00:07:32,360 --> 00:07:35,039
so given the limited amount of time we

199
00:07:35,039 --> 00:07:37,139
have I'm not going to say too much about

200
00:07:37,139 --> 00:07:39,720
the the techniques here but I'll just

201
00:07:39,720 --> 00:07:41,160
give the big picture of how our protocol

202
00:07:41,160 --> 00:07:43,919
works and the main tools that we use so

203
00:07:43,919 --> 00:07:45,840
in our protocol again the the client

204
00:07:45,840 --> 00:07:48,240
needs a set of secret keys

205
00:07:48,240 --> 00:07:52,020
the server needs a set of public keys

206
00:07:52,020 --> 00:07:53,880
and there are two basic building blocks

207
00:07:53,880 --> 00:07:56,520
to our protocol the first one is what we

208
00:07:56,520 --> 00:07:58,680
call an anonymous multi-chem so just

209
00:07:58,680 --> 00:08:00,180
think of this as a public key encryption

210
00:08:00,180 --> 00:08:02,280
so the server is going to generate a

211
00:08:02,280 --> 00:08:06,240
ciphertext c that's addressed to a set

212
00:08:06,240 --> 00:08:09,380
of recipient public Keys okay

213
00:08:09,380 --> 00:08:11,819
and the different different secret keys

214
00:08:11,819 --> 00:08:13,139
will decrypt this ciphertext to

215
00:08:13,139 --> 00:08:15,240
different plain texts so when the server

216
00:08:15,240 --> 00:08:17,160
generates the ciphertext it knows that

217
00:08:17,160 --> 00:08:19,259
public key number one is going to

218
00:08:19,259 --> 00:08:21,300
decrypt this ciphertext to plain text

219
00:08:21,300 --> 00:08:23,940
number one so those are these MJ values

220
00:08:23,940 --> 00:08:27,960
that the server learns uh and uh finally

221
00:08:27,960 --> 00:08:30,240
this ciphertext is anonymous and that

222
00:08:30,240 --> 00:08:33,479
means that the ciphertext doesn't leak

223
00:08:33,479 --> 00:08:35,640
anything about the set of recipient

224
00:08:35,640 --> 00:08:37,440
public Keys except maybe it leaks the

225
00:08:37,440 --> 00:08:39,539
number of those public keys but it

226
00:08:39,539 --> 00:08:42,179
doesn't reveal the uh the identities of

227
00:08:42,179 --> 00:08:44,159
the recipients

228
00:08:44,159 --> 00:08:46,020
so the server generates the ciphertext

229
00:08:46,020 --> 00:08:48,000
sends it to the client and now the

230
00:08:48,000 --> 00:08:50,279
client holds a set of secret Keys it can

231
00:08:50,279 --> 00:08:52,980
decrypt this ciphertext many times under

232
00:08:52,980 --> 00:08:55,440
each of its secret keys and it gets a

233
00:08:55,440 --> 00:09:00,360
collection of plain texts up okay if any

234
00:09:00,360 --> 00:09:03,000
of this clients secret Keys match the

235
00:09:03,000 --> 00:09:05,160
public keys of the server then these two

236
00:09:05,160 --> 00:09:07,320
parties are going to have some plain

237
00:09:07,320 --> 00:09:08,760
text in common

238
00:09:08,760 --> 00:09:10,920
so that's that's the main idea of this

239
00:09:10,920 --> 00:09:12,839
next step where we use private set

240
00:09:12,839 --> 00:09:14,100
intersection

241
00:09:14,100 --> 00:09:15,720
so the parties can test whether they

242
00:09:15,720 --> 00:09:18,000
have any items in common so in private

243
00:09:18,000 --> 00:09:19,440
side intersection each party has a set

244
00:09:19,440 --> 00:09:20,940
of items in this case it's these plain

245
00:09:20,940 --> 00:09:24,839
texts and we're going to use a variant

246
00:09:24,839 --> 00:09:27,779
of PSI where the client learns the

247
00:09:27,779 --> 00:09:30,000
entire contents of the intersection so

248
00:09:30,000 --> 00:09:31,740
the client learns which of its Keys

249
00:09:31,740 --> 00:09:35,160
basically were successful

250
00:09:35,160 --> 00:09:37,380
um and the server just learns whether

251
00:09:37,380 --> 00:09:39,420
the intersection was empty or not okay

252
00:09:39,420 --> 00:09:42,420
so we need a special variant of PSI with

253
00:09:42,420 --> 00:09:45,060
with those properties

254
00:09:45,060 --> 00:09:48,000
so in our paper we show how to build

255
00:09:48,000 --> 00:09:51,060
these two building blocks obviously

256
00:09:51,060 --> 00:09:52,440
um I guess the novelty of this first

257
00:09:52,440 --> 00:09:54,120
step is that most work in the crypto

258
00:09:54,120 --> 00:09:55,680
literature just assumes that everybody

259
00:09:55,680 --> 00:09:59,160
has the same flavor of key so it's not

260
00:09:59,160 --> 00:10:01,200
difficult but we show that you know we

261
00:10:01,200 --> 00:10:04,320
have to show how to build one

262
00:10:04,320 --> 00:10:06,600
chem object that works with a mixture of

263
00:10:06,600 --> 00:10:08,760
different public keys

264
00:10:08,760 --> 00:10:10,860
and it's not too hard for RSA but for

265
00:10:10,860 --> 00:10:14,220
ecdsa and DSA we had to you know those

266
00:10:14,220 --> 00:10:16,080
are those are signing Keys those are not

267
00:10:16,080 --> 00:10:18,180
usually used for encryption we're sort

268
00:10:18,180 --> 00:10:20,339
of asking the users to use their signing

269
00:10:20,339 --> 00:10:21,959
keys for encryption and so we had to be

270
00:10:21,959 --> 00:10:23,880
careful that that works out so you can

271
00:10:23,880 --> 00:10:25,200
see the paper if you're interested in

272
00:10:25,200 --> 00:10:28,040
that kind of a question

273
00:10:28,040 --> 00:10:30,959
the the leading private set intersection

274
00:10:30,959 --> 00:10:33,660
protocol for sets of small sizes like

275
00:10:33,660 --> 00:10:35,820
this is a one from last year from myself

276
00:10:35,820 --> 00:10:39,600
and nitrio and we had to extend that

277
00:10:39,600 --> 00:10:41,160
protocol to support this proof of

278
00:10:41,160 --> 00:10:42,899
non-empty intersection so we needed this

279
00:10:42,899 --> 00:10:44,760
feature where the client can prove to

280
00:10:44,760 --> 00:10:46,680
the server that the intersection was not

281
00:10:46,680 --> 00:10:50,040
empty that's not something that I'd seen

282
00:10:50,040 --> 00:10:52,140
before in PSI protocols so we show how

283
00:10:52,140 --> 00:10:55,380
to do that and finally

284
00:10:55,380 --> 00:10:57,839
yeah it's the crypto session so I'm I

285
00:10:57,839 --> 00:10:59,399
feel I feel like I can say the word you

286
00:10:59,399 --> 00:11:01,920
see security that's fine uh so the the

287
00:11:01,920 --> 00:11:04,200
the security analysis is all in the UC

288
00:11:04,200 --> 00:11:06,839
security model so that's kind of if

289
00:11:06,839 --> 00:11:08,040
you're not familiar with what that is

290
00:11:08,040 --> 00:11:09,660
that's like the gold standard for a

291
00:11:09,660 --> 00:11:11,519
proving security of an interactive

292
00:11:11,519 --> 00:11:13,260
protocol like this

293
00:11:13,260 --> 00:11:14,339
um so if you like that sort of thing

294
00:11:14,339 --> 00:11:16,680
check out the paper

295
00:11:16,680 --> 00:11:19,980
so we implemented this new protocol in

296
00:11:19,980 --> 00:11:22,620
openssh you can see uh our source code

297
00:11:22,620 --> 00:11:27,060
at this uh URL that I've listed here

298
00:11:27,060 --> 00:11:27,779
um

299
00:11:27,779 --> 00:11:29,640
like I said our protocol supports a

300
00:11:29,640 --> 00:11:31,860
mixture of different flavors of keys in

301
00:11:31,860 --> 00:11:33,380
a single interaction

302
00:11:33,380 --> 00:11:36,300
but RSA keys are much much slower than

303
00:11:36,300 --> 00:11:39,540
the elliptic curve signing Keys as you

304
00:11:39,540 --> 00:11:41,640
may know so the worst case for us is if

305
00:11:41,640 --> 00:11:43,320
all of the keys in the system are RSA

306
00:11:43,320 --> 00:11:45,779
and the best case for us is if all the

307
00:11:45,779 --> 00:11:49,380
keys in the system are you know ecdsa we

308
00:11:49,380 --> 00:11:50,399
didn't find much difference between

309
00:11:50,399 --> 00:11:52,740
ecdsa and Ed DSA they're basically the

310
00:11:52,740 --> 00:11:55,440
same so so I'll sort of present the the

311
00:11:55,440 --> 00:11:57,480
best and the worst case performance of

312
00:11:57,480 --> 00:11:59,640
our protocol here

313
00:11:59,640 --> 00:12:02,100
um a typical scenario is you can imagine

314
00:12:02,100 --> 00:12:04,380
a client with five Keys connecting to a

315
00:12:04,380 --> 00:12:06,240
server that has 10 keys that sort of

316
00:12:06,240 --> 00:12:08,220
describes my experience connecting to

317
00:12:08,220 --> 00:12:11,399
GitHub using SSH

318
00:12:11,399 --> 00:12:13,680
so our protocol is very practical for

319
00:12:13,680 --> 00:12:15,000
this kind of a setting so tens of

320
00:12:15,000 --> 00:12:17,880
milliseconds to authenticate

321
00:12:17,880 --> 00:12:20,579
a couple kilobytes to authenticate the

322
00:12:20,579 --> 00:12:23,100
times here are measuring like the entire

323
00:12:23,100 --> 00:12:25,800
the entire time the wall clock time from

324
00:12:25,800 --> 00:12:27,420
the client from the time you press enter

325
00:12:27,420 --> 00:12:28,860
until the time that it shows you the

326
00:12:28,860 --> 00:12:32,399
prompt so of course this is on like a

327
00:12:32,399 --> 00:12:34,320
fast network but

328
00:12:34,320 --> 00:12:36,660
the the amount of effort here is is

329
00:12:36,660 --> 00:12:38,640
pretty minimal compared to you know

330
00:12:38,640 --> 00:12:40,140
Network latency

331
00:12:40,140 --> 00:12:42,240
a more ambitious setting might be a

332
00:12:42,240 --> 00:12:43,980
client with 20 keys and a server with

333
00:12:43,980 --> 00:12:47,459
100 keys so I I don't have 20 keys I

334
00:12:47,459 --> 00:12:48,839
don't know how many of you have 20 SSH

335
00:12:48,839 --> 00:12:51,480
keys on your on your computer I don't

336
00:12:51,480 --> 00:12:52,800
know how many of you are committing to

337
00:12:52,800 --> 00:12:54,959
GitHub repositories that have 100

338
00:12:54,959 --> 00:12:58,500
committers maybe some of you do even

339
00:12:58,500 --> 00:13:00,000
then this is reasonably practical and

340
00:13:00,000 --> 00:13:03,839
especially for the ecdsa keys but even

341
00:13:03,839 --> 00:13:05,760
for RSA Keys it's like

342
00:13:05,760 --> 00:13:07,860
reasonable for what you might expect to

343
00:13:07,860 --> 00:13:10,339
spend for Authentication

344
00:13:10,339 --> 00:13:13,200
we also decided to just go crazy and

345
00:13:13,200 --> 00:13:15,000
imagine a scenario where the server has

346
00:13:15,000 --> 00:13:16,980
a thousand keys

347
00:13:16,980 --> 00:13:18,720
um okay this is a bit slow for RSA

348
00:13:18,720 --> 00:13:21,560
because doing a thousand RSA

349
00:13:21,560 --> 00:13:24,720
exponentiations is a little slow

350
00:13:24,720 --> 00:13:25,620
um

351
00:13:25,620 --> 00:13:26,940
but we're not talking about weeks here

352
00:13:26,940 --> 00:13:29,220
we're talking about a second and and for

353
00:13:29,220 --> 00:13:31,320
ecdsa Keys a quarter of a second is is

354
00:13:31,320 --> 00:13:33,180
not too bad maybe another reason to

355
00:13:33,180 --> 00:13:37,860
switch all of your SSH Keys you to the

356
00:13:37,860 --> 00:13:41,760
new world of of ecdsa keys

357
00:13:41,760 --> 00:13:44,700
all right so just to summarize in our

358
00:13:44,700 --> 00:13:45,959
paper we have a new Authentication

359
00:13:45,959 --> 00:13:48,600
Protocol it's uh you know suitable for

360
00:13:48,600 --> 00:13:50,420
suitable for SSH

361
00:13:50,420 --> 00:13:53,100
it reveals a minimal information to both

362
00:13:53,100 --> 00:13:55,019
the client and the server it supports

363
00:13:55,019 --> 00:13:58,019
existing flavors of SSH keys that that

364
00:13:58,019 --> 00:13:59,760
you and the rest of the world already

365
00:13:59,760 --> 00:14:02,459
have generated it's safe to use out of

366
00:14:02,459 --> 00:14:04,019
the box with no special configuration

367
00:14:04,019 --> 00:14:07,260
required so it's kind of Not Fragile in

368
00:14:07,260 --> 00:14:08,360
that way

369
00:14:08,360 --> 00:14:10,980
and you can read more about it on ePrint

370
00:14:10,980 --> 00:14:13,079
and you can check out our our source

371
00:14:13,079 --> 00:14:15,300
code and that's my last slide so thanks

372
00:14:15,300 --> 00:14:16,920
for your time and I'm happy to take

373
00:14:16,920 --> 00:14:20,300
questions if we have time

