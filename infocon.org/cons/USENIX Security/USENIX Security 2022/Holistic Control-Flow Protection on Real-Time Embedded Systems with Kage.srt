1
00:00:07,880 --> 00:00:11,760
hi welcome to my talk today I'll present

2
00:00:11,760 --> 00:00:14,360
our work car game which is an efficient

3
00:00:14,360 --> 00:00:16,680
software defense against control flow

4
00:00:16,680 --> 00:00:19,199
hijacking attacks on embedded real-time

5
00:00:19,199 --> 00:00:21,119
operating system this work is

6
00:00:21,119 --> 00:00:23,939
collaborated between with Georgia Shen

7
00:00:23,939 --> 00:00:27,660
Comal Darcy and JoJo from U of R Robert

8
00:00:27,660 --> 00:00:30,420
J West from WPI and John Criswell from U

9
00:00:30,420 --> 00:00:32,840
of r

10
00:00:34,100 --> 00:00:36,120
microcontroller-based embedded systems

11
00:00:36,120 --> 00:00:38,520
are being used everywhere these low

12
00:00:38,520 --> 00:00:40,620
power and cheap processors are being

13
00:00:40,620 --> 00:00:43,079
used in areas including drones

14
00:00:43,079 --> 00:00:46,320
home iot devices even components inside

15
00:00:46,320 --> 00:00:48,480
the solid state drive as the SSD

16
00:00:48,480 --> 00:00:51,480
controller and in automobiles

17
00:00:51,480 --> 00:00:53,520
these microcontrollers are extremely

18
00:00:53,520 --> 00:00:56,219
resource constrained just like the

19
00:00:56,219 --> 00:00:59,039
processors from decades ago they contain

20
00:00:59,039 --> 00:01:01,140
no virtual memory they have no trust

21
00:01:01,140 --> 00:01:03,180
Zone they have

22
00:01:03,180 --> 00:01:07,200
um they run in very low frequencies and

23
00:01:07,200 --> 00:01:09,720
unfortunately these limitations cause

24
00:01:09,720 --> 00:01:11,820
the device to lack proper security

25
00:01:11,820 --> 00:01:14,100
protections against the control flow

26
00:01:14,100 --> 00:01:17,240
hijacking problem

27
00:01:17,400 --> 00:01:20,900
so the control flow hijacking is a broad

28
00:01:20,900 --> 00:01:23,520
category of attacks including code

29
00:01:23,520 --> 00:01:25,680
injections return to LEAP C return

30
00:01:25,680 --> 00:01:27,600
oriented programming or jump-oriented

31
00:01:27,600 --> 00:01:28,860
programming

32
00:01:28,860 --> 00:01:31,140
all of them share the same commonality

33
00:01:31,140 --> 00:01:33,180
that they all begins by taking advantage

34
00:01:33,180 --> 00:01:35,520
of a buffer overflow and overwrite the

35
00:01:35,520 --> 00:01:37,680
Control Data such as return address or

36
00:01:37,680 --> 00:01:40,500
function pointers

37
00:01:40,500 --> 00:01:42,960
so common defenses against these type of

38
00:01:42,960 --> 00:01:46,259
attack include memory save using memory

39
00:01:46,259 --> 00:01:47,900
saved languages such as rust

40
00:01:47,900 --> 00:01:50,939
unfortunately it's not viable as most

41
00:01:50,939 --> 00:01:54,060
embedded developers do use C C plus plus

42
00:01:54,060 --> 00:01:56,640
or even assembly

43
00:01:56,640 --> 00:01:58,979
we could use address space layout or

44
00:01:58,979 --> 00:02:01,500
randomization that randomized the

45
00:02:01,500 --> 00:02:03,060
address space every time the program

46
00:02:03,060 --> 00:02:05,520
executes unfortunately we don't have

47
00:02:05,520 --> 00:02:08,340
virtual memory here so it doesn't work

48
00:02:08,340 --> 00:02:11,879
and lastly we have Shadow stack and the

49
00:02:11,879 --> 00:02:15,140
control flow Integrity check

50
00:02:17,940 --> 00:02:20,580
so a shadow stack is to create a second

51
00:02:20,580 --> 00:02:22,920
stack that is protected that is used

52
00:02:22,920 --> 00:02:25,560
only to store the return address

53
00:02:25,560 --> 00:02:30,720
and in combination of that we also add

54
00:02:30,720 --> 00:02:33,480
the defense also require control flowing

55
00:02:33,480 --> 00:02:35,580
Integrity check that is essentially

56
00:02:35,580 --> 00:02:38,220
runtime check to make sure that all the

57
00:02:38,220 --> 00:02:40,080
function pointers point to the beginning

58
00:02:40,080 --> 00:02:42,900
of a function instead of anywhere inside

59
00:02:42,900 --> 00:02:45,660
the code segment

60
00:02:45,660 --> 00:02:48,200
this technique has been

61
00:02:48,200 --> 00:02:50,879
this technique has existing the desktop

62
00:02:50,879 --> 00:02:53,099
world for a long time and there are in

63
00:02:53,099 --> 00:02:55,319
fact previous work in the embedded world

64
00:02:55,319 --> 00:02:56,340
as well

65
00:02:56,340 --> 00:02:59,360
however most of them focus on bare metal

66
00:02:59,360 --> 00:03:01,800
devices without the support of an

67
00:03:01,800 --> 00:03:04,260
embedded operating system such as care

68
00:03:04,260 --> 00:03:05,760
and silhouette

69
00:03:05,760 --> 00:03:10,159
recently wreck fish is a previous that

70
00:03:10,159 --> 00:03:13,980
rackfish is a defense system that

71
00:03:13,980 --> 00:03:17,159
supports operating system real-time

72
00:03:17,159 --> 00:03:18,659
operating system

73
00:03:18,659 --> 00:03:22,379
and enforce the shadow stack to protect

74
00:03:22,379 --> 00:03:24,659
the return address and use the CFI check

75
00:03:24,659 --> 00:03:27,959
to protect the function pointer

76
00:03:27,959 --> 00:03:29,060
it's

77
00:03:29,060 --> 00:03:31,440
protecting the processor States during

78
00:03:31,440 --> 00:03:34,019
contact switches by saving them to the

79
00:03:34,019 --> 00:03:35,159
shadow stack

80
00:03:35,159 --> 00:03:37,500
however the protection here is not

81
00:03:37,500 --> 00:03:40,260
complete as the we also need to protect

82
00:03:40,260 --> 00:03:43,019
this processor States during interrupt

83
00:03:43,019 --> 00:03:44,040
entries

84
00:03:44,040 --> 00:03:46,200
and in addition to that we also need

85
00:03:46,200 --> 00:03:48,720
input validations for kernel API calls

86
00:03:48,720 --> 00:03:51,360
such that the attacker cannot simply

87
00:03:51,360 --> 00:03:53,760
disable other protections

88
00:03:53,760 --> 00:03:56,220
and moreover rackfish incurs a

89
00:03:56,220 --> 00:03:58,920
performance overhead of 21 percent

90
00:03:58,920 --> 00:04:02,519
and in their paper was at uh described

91
00:04:02,519 --> 00:04:04,620
that a large portion of this overhead

92
00:04:04,620 --> 00:04:07,819
come from the fact that each time

93
00:04:07,819 --> 00:04:10,799
wreckfish writes to the shadow stack to

94
00:04:10,799 --> 00:04:12,840
store the return address it needs to

95
00:04:12,840 --> 00:04:15,360
switch from the unprivileged mode into

96
00:04:15,360 --> 00:04:17,579
the privileged mode which is very

97
00:04:17,579 --> 00:04:21,380
expensive for this type of devices

98
00:04:22,019 --> 00:04:26,840
so here we prevent car game which is

99
00:04:27,300 --> 00:04:27,960
um

100
00:04:27,960 --> 00:04:30,300
a defense that utilized Shadow stack and

101
00:04:30,300 --> 00:04:33,600
CFI check supports real-time operating

102
00:04:33,600 --> 00:04:37,080
system protects return address and

103
00:04:37,080 --> 00:04:40,440
function pointers and protects processor

104
00:04:40,440 --> 00:04:42,419
States during context switch as well as

105
00:04:42,419 --> 00:04:44,340
interrupt entries

106
00:04:44,340 --> 00:04:46,860
kage also includes runtime checks for

107
00:04:46,860 --> 00:04:49,320
all the kernel API functions to ensure

108
00:04:49,320 --> 00:04:51,900
that attackers cannot utilize corrupted

109
00:04:51,900 --> 00:04:55,500
arguments to disable the protections

110
00:04:55,500 --> 00:04:58,560
kage incurs us a small overhead

111
00:04:58,560 --> 00:05:03,199
performance overhead of 5.19 percent

112
00:05:05,880 --> 00:05:08,100
so kage is an efficient control flow

113
00:05:08,100 --> 00:05:10,560
hijacking defense on existing arm V7

114
00:05:10,560 --> 00:05:12,660
devices

115
00:05:12,660 --> 00:05:15,540
our we implemented kage based on free

116
00:05:15,540 --> 00:05:19,320
rtos for arm v7m devices

117
00:05:19,320 --> 00:05:21,540
these are devices that with does not

118
00:05:21,540 --> 00:05:24,060
have do not have arm trust Zone

119
00:05:24,060 --> 00:05:27,240
and instead they utilize the arm memory

120
00:05:27,240 --> 00:05:30,120
protection unit which allows

121
00:05:30,120 --> 00:05:33,660
setting the access permissions for the

122
00:05:33,660 --> 00:05:36,060
the one address space with read write

123
00:05:36,060 --> 00:05:39,840
and execute accesses

124
00:05:42,780 --> 00:05:45,360
so here is the workflow for typical

125
00:05:45,360 --> 00:05:48,660
firmware developers instead of in the

126
00:05:48,660 --> 00:05:51,180
desktop world where developers write

127
00:05:51,180 --> 00:05:53,100
application code on top of the operating

128
00:05:53,100 --> 00:05:54,300
system

129
00:05:54,300 --> 00:05:56,280
in the embedded World developers

130
00:05:56,280 --> 00:05:58,500
typically write all the applications as

131
00:05:58,500 --> 00:05:59,940
well as the re-embedded real-time

132
00:05:59,940 --> 00:06:01,860
operating system and then compile them

133
00:06:01,860 --> 00:06:05,100
together into a single firmware in which

134
00:06:05,100 --> 00:06:08,960
they then install it to the device

135
00:06:10,320 --> 00:06:13,680
here is the highlight of car game

136
00:06:13,680 --> 00:06:15,440
so

137
00:06:15,440 --> 00:06:18,620
Coggins includes two

138
00:06:18,620 --> 00:06:21,720
two categories of protections first we

139
00:06:21,720 --> 00:06:23,460
protect the Control Data efficiently

140
00:06:23,460 --> 00:06:25,740
then we prevent bypassing these

141
00:06:25,740 --> 00:06:28,139
protections

142
00:06:28,139 --> 00:06:31,620
to protect the Control Data

143
00:06:31,620 --> 00:06:36,419
we modified the the compiler to to to to

144
00:06:36,419 --> 00:06:39,300
save the return addresses to the shadow

145
00:06:39,300 --> 00:06:42,840
stack and add the control flow Integrity

146
00:06:42,840 --> 00:06:44,759
checks to check the other function

147
00:06:44,759 --> 00:06:47,300
pointers

148
00:06:48,000 --> 00:06:51,780
and we and we designed the hardened

149
00:06:51,780 --> 00:06:54,060
real-time operating system such that

150
00:06:54,060 --> 00:06:56,520
it's sketch its scheduler will save the

151
00:06:56,520 --> 00:06:58,199
processor state to the shadow stack

152
00:06:58,199 --> 00:06:59,880
instead of the regular stack during

153
00:06:59,880 --> 00:07:02,819
contact switch as our as well as during

154
00:07:02,819 --> 00:07:06,199
exception entries

155
00:07:06,960 --> 00:07:10,319
so the secret sauce for the low overhead

156
00:07:10,319 --> 00:07:13,680
performance Olo overhead for kage is the

157
00:07:13,680 --> 00:07:15,780
store hardening technique it is a

158
00:07:15,780 --> 00:07:18,479
technique that we have been used we have

159
00:07:18,479 --> 00:07:20,940
used in our previous work silhouette

160
00:07:20,940 --> 00:07:24,000
essentially it utilized the special

161
00:07:24,000 --> 00:07:26,039
unprivileged store instructions that

162
00:07:26,039 --> 00:07:30,000
exist in various armed V7 architectures

163
00:07:30,000 --> 00:07:33,240
to simulate the unprivileged mode while

164
00:07:33,240 --> 00:07:35,160
running everything including the

165
00:07:35,160 --> 00:07:36,960
application code as well as the kernel

166
00:07:36,960 --> 00:07:39,300
in privilege mode

167
00:07:39,300 --> 00:07:41,340
essentially we compile all the

168
00:07:41,340 --> 00:07:43,380
application code

169
00:07:43,380 --> 00:07:45,660
and come transform their store

170
00:07:45,660 --> 00:07:47,520
instructions into the unprivileged store

171
00:07:47,520 --> 00:07:49,979
instructions such that they can all run

172
00:07:49,979 --> 00:07:52,259
in the privilege mode while behaving

173
00:07:52,259 --> 00:07:55,699
like unprivileged programs

174
00:07:58,139 --> 00:08:01,560
so kage also prevents attackers from

175
00:08:01,560 --> 00:08:04,680
bypassing the protections

176
00:08:04,680 --> 00:08:07,319
we designed the real-time operating

177
00:08:07,319 --> 00:08:10,560
system with isolated memory regions such

178
00:08:10,560 --> 00:08:12,840
that the other applications cannot write

179
00:08:12,840 --> 00:08:15,419
into each other's stack memory or the

180
00:08:15,419 --> 00:08:17,340
kernel memory

181
00:08:17,340 --> 00:08:20,099
we use small trusted Computing base

182
00:08:20,099 --> 00:08:22,500
removing a lot of the kernel features

183
00:08:22,500 --> 00:08:24,720
from The Trusted Computing base into

184
00:08:24,720 --> 00:08:27,960
unprivileged world

185
00:08:27,960 --> 00:08:30,539
and we add runtime checks for all the

186
00:08:30,539 --> 00:08:35,000
remaining functions in the kernel and

187
00:08:35,000 --> 00:08:39,419
such that attackers cannot or cannot use

188
00:08:39,419 --> 00:08:41,279
corrupted arguments to bypass the

189
00:08:41,279 --> 00:08:43,380
protections

190
00:08:43,380 --> 00:08:45,779
and finally since everything runs in the

191
00:08:45,779 --> 00:08:48,240
privilege mode we need to have a

192
00:08:48,240 --> 00:08:50,160
sanitizer that checks for programming

193
00:08:50,160 --> 00:08:52,620
mistakes in the application code for

194
00:08:52,620 --> 00:08:54,420
example it checks whether the

195
00:08:54,420 --> 00:08:57,000
application code contains code that

196
00:08:57,000 --> 00:09:00,660
simply overwrite the stack pointer or

197
00:09:00,660 --> 00:09:02,640
cause the internal kernel functions that

198
00:09:02,640 --> 00:09:04,019
are not allowed that doesn't have

199
00:09:04,019 --> 00:09:07,279
runtime checks

200
00:09:09,720 --> 00:09:12,959
so he evaluated Target in three

201
00:09:12,959 --> 00:09:14,940
different aspects however due to the

202
00:09:14,940 --> 00:09:17,279
time limit I will only focus on the two

203
00:09:17,279 --> 00:09:19,140
of them that is the performance impact

204
00:09:19,140 --> 00:09:21,899
on embedded application and uh the

205
00:09:21,899 --> 00:09:24,060
effect and Effectiveness against the

206
00:09:24,060 --> 00:09:27,920
real return oriented programming

207
00:09:27,959 --> 00:09:32,459
we ran our experiments on the stm32 iot

208
00:09:32,459 --> 00:09:34,740
Node Hardware which is one of the

209
00:09:34,740 --> 00:09:36,440
officially qualified

210
00:09:36,440 --> 00:09:41,399
certified board for AWS free rtos

211
00:09:41,399 --> 00:09:44,339
for the micro Benchmark we run core Mark

212
00:09:44,339 --> 00:09:46,740
which is the recommended uh Benchmark

213
00:09:46,740 --> 00:09:49,200
for arm

214
00:09:49,200 --> 00:09:51,420
our Baseline here is the default free

215
00:09:51,420 --> 00:09:54,959
rtos operating system compiled with lvm9

216
00:09:54,959 --> 00:09:56,940
which is the same compiler version we

217
00:09:56,940 --> 00:09:58,500
use for kage

218
00:09:58,500 --> 00:10:01,260
and we take all the results with the

219
00:10:01,260 --> 00:10:04,320
average of three runs

220
00:10:04,320 --> 00:10:05,700
the results for the performance

221
00:10:05,700 --> 00:10:08,760
evaluation in the figure the unit here

222
00:10:08,760 --> 00:10:11,160
is iterations per second which is the

223
00:10:11,160 --> 00:10:14,940
official unit reported by core Mark the

224
00:10:14,940 --> 00:10:18,600
high higher number means better results

225
00:10:18,600 --> 00:10:21,360
on average kage incurs a performance

226
00:10:21,360 --> 00:10:24,360
overhead of 5.19 percent

227
00:10:24,360 --> 00:10:27,959
and we noticed that kage incurs slightly

228
00:10:27,959 --> 00:10:31,140
higher overhead with more threats

229
00:10:31,140 --> 00:10:33,360
this is because that with more threads

230
00:10:33,360 --> 00:10:35,040
the kernel will need to contact switch

231
00:10:35,040 --> 00:10:37,920
more times which means that our code

232
00:10:37,920 --> 00:10:40,260
that protects the processor state will

233
00:10:40,260 --> 00:10:43,160
kicking more

234
00:10:45,480 --> 00:10:48,540
and for the security evaluation we use

235
00:10:48,540 --> 00:10:50,820
the same core Mark firmware with the

236
00:10:50,820 --> 00:10:53,339
configuration of three threads we run

237
00:10:53,339 --> 00:10:56,279
Rob gadgets that which supports the arm

238
00:10:56,279 --> 00:10:59,339
v7m instruction set to find the code

239
00:10:59,339 --> 00:11:02,360
reuse gadgets

240
00:11:03,779 --> 00:11:05,820
here are the results for our security

241
00:11:05,820 --> 00:11:08,040
evaluation

242
00:11:08,040 --> 00:11:10,920
without any protection Rob gadgets was

243
00:11:10,920 --> 00:11:13,260
able to find more than 2 000 code reuse

244
00:11:13,260 --> 00:11:15,420
gadgets and since there is no protection

245
00:11:15,420 --> 00:11:17,940
the attacker is free to jump to any of

246
00:11:17,940 --> 00:11:18,839
them

247
00:11:18,839 --> 00:11:21,480
with kage however

248
00:11:21,480 --> 00:11:24,120
there are only 27 remaining gadgets left

249
00:11:24,120 --> 00:11:27,660
that that the attackers can jump to that

250
00:11:27,660 --> 00:11:30,600
is a 98.8 percent less

251
00:11:30,600 --> 00:11:35,399
reachable gadgets and within this 27 27

252
00:11:35,399 --> 00:11:38,579
remaining gadgets 17 of them are in the

253
00:11:38,579 --> 00:11:41,040
beginning of application function and 10

254
00:11:41,040 --> 00:11:43,560
of them are immediately after the direct

255
00:11:43,560 --> 00:11:46,079
calling application

256
00:11:46,079 --> 00:11:48,600
this means that now they cannot be

257
00:11:48,600 --> 00:11:50,640
stitched together and therefore it's

258
00:11:50,640 --> 00:11:54,500
unlikely to perform powerful attack

259
00:11:55,620 --> 00:11:58,079
to conclude in this presentation we

260
00:11:58,079 --> 00:12:00,959
presented kage an efficient control flow

261
00:12:00,959 --> 00:12:02,700
hijacking defense for arm V7

262
00:12:02,700 --> 00:12:04,920
architectures with real-time operating

263
00:12:04,920 --> 00:12:06,300
system support

264
00:12:06,300 --> 00:12:08,640
kage protects Control Data including

265
00:12:08,640 --> 00:12:10,860
return address function pointer and

266
00:12:10,860 --> 00:12:13,019
processor State and Target prevents

267
00:12:13,019 --> 00:12:15,060
bypassing the protections

268
00:12:15,060 --> 00:12:19,380
kage incurs an only 5.19 percent

269
00:12:19,380 --> 00:12:21,060
performance overhead in core Mark

270
00:12:21,060 --> 00:12:23,579
Benchmark significantly lower than

271
00:12:23,579 --> 00:12:24,839
previous work

272
00:12:24,839 --> 00:12:28,680
and finally kage is open sourced

273
00:12:28,680 --> 00:12:31,279
thank you

