1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:09,980 --> 00:00:12,480
I'm a PhD student at Cornell University

3
00:00:12,480 --> 00:00:14,340
in Cornell Tech and today I'll be

4
00:00:14,340 --> 00:00:15,660
talking about post-on regression and

5
00:00:15,660 --> 00:00:17,699
this is Joint work with fee Mariana and

6
00:00:17,699 --> 00:00:19,680
Karen we're all at Google

7
00:00:19,680 --> 00:00:21,779
so the general area of this work is

8
00:00:21,779 --> 00:00:23,160
within privacy preserving machine

9
00:00:23,160 --> 00:00:25,019
learning and more specifically secure

10
00:00:25,019 --> 00:00:27,900
computation so here the goal is for two

11
00:00:27,900 --> 00:00:29,580
or more servers to learn something

12
00:00:29,580 --> 00:00:31,980
useful about their private data without

13
00:00:31,980 --> 00:00:34,620
revealing the data itself so prior work

14
00:00:34,620 --> 00:00:36,239
in this direction for example has looked

15
00:00:36,239 --> 00:00:38,399
at things like linear regression where

16
00:00:38,399 --> 00:00:40,379
you want to learn a linear model or

17
00:00:40,379 --> 00:00:41,879
logistic regression when you want to

18
00:00:41,879 --> 00:00:44,579
learn a binary predictor variable

19
00:00:44,579 --> 00:00:46,680
or even more complicated things like

20
00:00:46,680 --> 00:00:48,180
neural networks

21
00:00:48,180 --> 00:00:50,700
in this work we'll look at another model

22
00:00:50,700 --> 00:00:53,520
poisson regression which has widespread

23
00:00:53,520 --> 00:00:55,140
applications in the natural and social

24
00:00:55,140 --> 00:00:57,480
sciences but has not yet been explored

25
00:00:57,480 --> 00:01:00,420
in the secure computation literature

26
00:01:00,420 --> 00:01:03,480
so poisson model is used to count to

27
00:01:03,480 --> 00:01:05,580
model count or rate based data so in

28
00:01:05,580 --> 00:01:07,260
this model the distribution of the

29
00:01:07,260 --> 00:01:09,780
response variable y given the set of

30
00:01:09,780 --> 00:01:11,640
features X is a poisson distribution

31
00:01:11,640 --> 00:01:14,220
where the log of the parameter Lambda is

32
00:01:14,220 --> 00:01:15,479
linear in x

33
00:01:15,479 --> 00:01:17,640
so in other words you can have some

34
00:01:17,640 --> 00:01:19,740
weight Vector Theta such that the

35
00:01:19,740 --> 00:01:22,680
expectation of Y given X is e to the

36
00:01:22,680 --> 00:01:24,299
power of the inner product between Theta

37
00:01:24,299 --> 00:01:25,860
and X

38
00:01:25,860 --> 00:01:27,900
and to compare between different time

39
00:01:27,900 --> 00:01:29,820
intervals or to model grade-based data

40
00:01:29,820 --> 00:01:32,460
in general you also have another

41
00:01:32,460 --> 00:01:36,119
variable T Which models the exposure

42
00:01:36,119 --> 00:01:38,579
so poisson models are quite useful in a

43
00:01:38,579 --> 00:01:40,619
lot of applications so in medicine for

44
00:01:40,619 --> 00:01:42,000
example they're used to predict

45
00:01:42,000 --> 00:01:43,979
mortality rates given things like

46
00:01:43,979 --> 00:01:46,200
demographics or habits like smoking or

47
00:01:46,200 --> 00:01:47,640
alcohol use

48
00:01:47,640 --> 00:01:49,259
they've been used in politics to

49
00:01:49,259 --> 00:01:51,000
understand voter turnout based on

50
00:01:51,000 --> 00:01:53,700
different kinds of news media exposure

51
00:01:53,700 --> 00:01:55,439
they've been used in finance to predict

52
00:01:55,439 --> 00:01:57,600
credit default rates and determine who

53
00:01:57,600 --> 00:01:59,700
loans are given to

54
00:01:59,700 --> 00:02:01,920
in online advertising they can also be

55
00:02:01,920 --> 00:02:03,720
used to measure ad click-through rates

56
00:02:03,720 --> 00:02:05,460
and purchases

57
00:02:05,460 --> 00:02:07,799
and in all these cases there's a lot of

58
00:02:07,799 --> 00:02:10,679
sensitive private data at stake like

59
00:02:10,679 --> 00:02:12,840
medical data or demographic information

60
00:02:12,840 --> 00:02:14,879
so it's really important to be able to

61
00:02:14,879 --> 00:02:17,940
learn these poisson models securely

62
00:02:17,940 --> 00:02:19,500
so before I describe our secure

63
00:02:19,500 --> 00:02:22,080
algorithm I'll briefly describe what the

64
00:02:22,080 --> 00:02:23,700
plaintext version of poisson regression

65
00:02:23,700 --> 00:02:24,420
does

66
00:02:24,420 --> 00:02:26,580
so there's end training data points

67
00:02:26,580 --> 00:02:29,040
where the if Point contains the response

68
00:02:29,040 --> 00:02:33,000
Yi the exposure time TI and the vector X

69
00:02:33,000 --> 00:02:35,400
of M predictor variables

70
00:02:35,400 --> 00:02:37,560
so the goal is to learn a set of

71
00:02:37,560 --> 00:02:41,040
regression weights such that each y i is

72
00:02:41,040 --> 00:02:43,860
approximately ti times e to the power of

73
00:02:43,860 --> 00:02:46,500
theta times x i

74
00:02:46,500 --> 00:02:48,900
so the standard way to learn any kind of

75
00:02:48,900 --> 00:02:50,040
functionality like this is through

76
00:02:50,040 --> 00:02:51,959
gradient descent which will update

77
00:02:51,959 --> 00:02:54,120
weights at each iteration according to

78
00:02:54,120 --> 00:02:55,200
the gradient

79
00:02:55,200 --> 00:02:57,900
for the gradient will be computed

80
00:02:57,900 --> 00:02:59,879
um using by by minimizing the loss

81
00:02:59,879 --> 00:03:02,040
function negative L where L is the log

82
00:03:02,040 --> 00:03:04,260
likelihood function and now to compute

83
00:03:04,260 --> 00:03:06,900
the gradient you can think of it as X

84
00:03:06,900 --> 00:03:09,180
transpose times the difference between

85
00:03:09,180 --> 00:03:11,879
the actual response Y and the predicted

86
00:03:11,879 --> 00:03:14,700
response T times e to the power of theta

87
00:03:14,700 --> 00:03:15,720
X

88
00:03:15,720 --> 00:03:17,700
and in each iteration the weights are

89
00:03:17,700 --> 00:03:19,800
updated as a linear function between a

90
00:03:19,800 --> 00:03:21,659
linear function of the previous weights

91
00:03:21,659 --> 00:03:25,500
and the gradient computation so here we

92
00:03:25,500 --> 00:03:27,239
have two parameters Alpha which is the

93
00:03:27,239 --> 00:03:29,700
learning rate which says how quickly we

94
00:03:29,700 --> 00:03:31,620
want to update the weights and beta

95
00:03:31,620 --> 00:03:33,300
which is the regularization parameter

96
00:03:33,300 --> 00:03:35,519
which makes sure that we don't overfit

97
00:03:35,519 --> 00:03:37,500
to the training data

98
00:03:37,500 --> 00:03:39,720
so now in the secure setting let's say

99
00:03:39,720 --> 00:03:43,260
we have n data points of user data so

100
00:03:43,260 --> 00:03:44,819
our work is in the two server model

101
00:03:44,819 --> 00:03:46,560
where these data points will be secret

102
00:03:46,560 --> 00:03:49,560
shared between two servers who will then

103
00:03:49,560 --> 00:03:52,200
take part in a secure two PC protocol in

104
00:03:52,200 --> 00:03:54,000
the semi honest setting to jointly

105
00:03:54,000 --> 00:03:55,980
compute the weights of this regression

106
00:03:55,980 --> 00:03:58,140
model

107
00:03:58,140 --> 00:03:59,819
so let's take a look at what kind of

108
00:03:59,819 --> 00:04:01,920
computations are required in this secure

109
00:04:01,920 --> 00:04:03,000
computation

110
00:04:03,000 --> 00:04:05,340
so we have a few Matrix multiplications

111
00:04:05,340 --> 00:04:08,040
like multiplying x times Theta we have

112
00:04:08,040 --> 00:04:09,659
some element-wise multiplications which

113
00:04:09,659 --> 00:04:12,000
are just n multiplications

114
00:04:12,000 --> 00:04:14,099
and we have some exponentiations to

115
00:04:14,099 --> 00:04:17,459
exponentiate e to the power of theta X

116
00:04:17,459 --> 00:04:19,380
and this is particularly challenging in

117
00:04:19,380 --> 00:04:21,779
MPC because it's highly non-linear and

118
00:04:21,779 --> 00:04:23,100
this will be one of the contributions of

119
00:04:23,100 --> 00:04:24,120
our work

120
00:04:24,120 --> 00:04:27,180
so the full contributions of our work

121
00:04:27,180 --> 00:04:28,860
can be said as we give the first

122
00:04:28,860 --> 00:04:31,020
efficient two-party protocol for poisson

123
00:04:31,020 --> 00:04:33,660
regression which takes four rounds in

124
00:04:33,660 --> 00:04:35,940
total and three if there's no exposure

125
00:04:35,940 --> 00:04:38,040
variable and the same protocol can also

126
00:04:38,040 --> 00:04:40,199
be used for secure inference after the

127
00:04:40,199 --> 00:04:41,639
training is complete

128
00:04:41,639 --> 00:04:44,040
uh we provide practical performance on

129
00:04:44,040 --> 00:04:46,440
real world data sets to our protocol

130
00:04:46,440 --> 00:04:48,840
so there's two main building blocks for

131
00:04:48,840 --> 00:04:51,060
our work the first is a highly efficient

132
00:04:51,060 --> 00:04:53,040
one-round protocol for secure fixed

133
00:04:53,040 --> 00:04:54,360
point exponentiation

134
00:04:54,360 --> 00:04:56,699
and the second so this is orders of

135
00:04:56,699 --> 00:04:58,740
magnitude better in both the offline and

136
00:04:58,740 --> 00:05:00,660
online phase than existing techniques

137
00:05:00,660 --> 00:05:03,000
such as using polynomial approximation

138
00:05:03,000 --> 00:05:04,259
and the second is improved

139
00:05:04,259 --> 00:05:05,759
pre-processing in what we'll call

140
00:05:05,759 --> 00:05:08,100
correlated Beaver triples

141
00:05:08,100 --> 00:05:09,600
and this takes advantage of the

142
00:05:09,600 --> 00:05:11,160
structure of operations required for

143
00:05:11,160 --> 00:05:13,560
poisson regression and it turns out

144
00:05:13,560 --> 00:05:15,540
using this you can have a thousand times

145
00:05:15,540 --> 00:05:18,000
faster offline phase and 10x smaller

146
00:05:18,000 --> 00:05:19,860
communication

147
00:05:19,860 --> 00:05:21,840
so let me briefly discuss some

148
00:05:21,840 --> 00:05:24,180
preliminaries in that all of the data is

149
00:05:24,180 --> 00:05:26,100
given as fixed Point numbers which can

150
00:05:26,100 --> 00:05:28,560
be thought of as numbers with h integer

151
00:05:28,560 --> 00:05:31,199
bits and F fractional bits and these

152
00:05:31,199 --> 00:05:32,880
numbers are represented as integers by

153
00:05:32,880 --> 00:05:34,919
multiplying them by 2 to the F inside an

154
00:05:34,919 --> 00:05:37,860
L bit ring V to the L so where L is

155
00:05:37,860 --> 00:05:40,020
greater than h plus f plus some slack

156
00:05:40,020 --> 00:05:42,180
Delta which makes sure that the failure

157
00:05:42,180 --> 00:05:43,740
probability is small of the whole

158
00:05:43,740 --> 00:05:45,120
protocol

159
00:05:45,120 --> 00:05:47,400
so positive real numbers are represented

160
00:05:47,400 --> 00:05:49,259
in the lower half of the ring and

161
00:05:49,259 --> 00:05:51,360
negative real numbers are represented in

162
00:05:51,360 --> 00:05:52,380
the upper half of the Ring by

163
00:05:52,380 --> 00:05:54,479
multiplying by 2 to the f

164
00:05:54,479 --> 00:05:57,300
and under bar V I will denote the

165
00:05:57,300 --> 00:05:59,220
canonical reel associated with this

166
00:05:59,220 --> 00:06:01,979
fixed Point ring element

167
00:06:01,979 --> 00:06:05,039
so when I say V in this ring is secret

168
00:06:05,039 --> 00:06:07,380
shared what that means is uh the two

169
00:06:07,380 --> 00:06:09,720
parties have shares b0 and V1 such that

170
00:06:09,720 --> 00:06:13,979
V equals v v zero plus V1 mod 2 to the L

171
00:06:13,979 --> 00:06:16,139
I'll also briefly mention an operation

172
00:06:16,139 --> 00:06:18,000
ring change which we use heavily for

173
00:06:18,000 --> 00:06:20,699
converting shares between one ring ZN

174
00:06:20,699 --> 00:06:22,979
and another ring ZK

175
00:06:22,979 --> 00:06:25,020
so we only really required this for

176
00:06:25,020 --> 00:06:27,120
small positive elements and only when we

177
00:06:27,120 --> 00:06:29,160
want to move up in ring size so when K

178
00:06:29,160 --> 00:06:30,600
is greater than n

179
00:06:30,600 --> 00:06:32,759
and in this case it turns out that this

180
00:06:32,759 --> 00:06:34,080
operation can be done completely

181
00:06:34,080 --> 00:06:36,000
non-interactively which helps with the

182
00:06:36,000 --> 00:06:38,880
complexity of our protocol

183
00:06:38,880 --> 00:06:40,259
so I'll start with the first building

184
00:06:40,259 --> 00:06:42,539
block which is our one round protocol

185
00:06:42,539 --> 00:06:44,819
for exponentiation

186
00:06:44,819 --> 00:06:46,620
so the functionality is roughly as

187
00:06:46,620 --> 00:06:48,180
follows you have two parties which

188
00:06:48,180 --> 00:06:51,000
shares of the exponent and they want to

189
00:06:51,000 --> 00:06:53,039
end up with shares of e to the power of

190
00:06:53,039 --> 00:06:54,660
that exponent

191
00:06:54,660 --> 00:06:56,580
so a quick note is that it's actually

192
00:06:56,580 --> 00:06:58,139
sufficient just to exponentiate with

193
00:06:58,139 --> 00:07:00,479
base 2 because for base e you can just

194
00:07:00,479 --> 00:07:03,060
non-reactively multiply by log base 2 of

195
00:07:03,060 --> 00:07:04,560
E

196
00:07:04,560 --> 00:07:07,220
so the protocol intuition for this

197
00:07:07,220 --> 00:07:10,380
exponentiation is as follows so we

198
00:07:10,380 --> 00:07:12,240
separate out uh the integer and

199
00:07:12,240 --> 00:07:14,460
fractional parts of the computation and

200
00:07:14,460 --> 00:07:16,080
exponentiate them separately and later

201
00:07:16,080 --> 00:07:18,300
combine and this actually results in

202
00:07:18,300 --> 00:07:20,099
multiplicative shares of the final

203
00:07:20,099 --> 00:07:22,860
computation up to truncation or rounding

204
00:07:22,860 --> 00:07:24,900
arrows and this is quite nice because

205
00:07:24,900 --> 00:07:27,360
all of this can be done completely

206
00:07:27,360 --> 00:07:29,940
locally and without any any interaction

207
00:07:29,940 --> 00:07:32,819
so the only interaction that we need is

208
00:07:32,819 --> 00:07:34,740
to convert back from multiplicative

209
00:07:34,740 --> 00:07:36,960
shares of the result to additive shares

210
00:07:36,960 --> 00:07:38,940
of the result which only requires one

211
00:07:38,940 --> 00:07:40,620
round of communication and a single

212
00:07:40,620 --> 00:07:43,919
message exchange between the parties

213
00:07:43,919 --> 00:07:46,979
so in more detail if you have let's say

214
00:07:46,979 --> 00:07:49,680
a share zi you can split it into an

215
00:07:49,680 --> 00:07:52,080
integer part VI int and fractional part

216
00:07:52,080 --> 00:07:54,780
D i Frac and you can exponentiate them

217
00:07:54,780 --> 00:07:56,340
separately

218
00:07:56,340 --> 00:07:58,440
so you can see that the integer Parts

219
00:07:58,440 --> 00:08:00,900
can actually be thought of as sharings

220
00:08:00,900 --> 00:08:04,080
over a smaller integer ring which is Z2

221
00:08:04,080 --> 00:08:05,880
to the L minus f

222
00:08:05,880 --> 00:08:07,319
and the fractional Parts can just be

223
00:08:07,319 --> 00:08:09,960
thought of as real numbers

224
00:08:09,960 --> 00:08:12,599
so to exponentiate the integer part we

225
00:08:12,599 --> 00:08:15,240
can leverage firma's little theorem to

226
00:08:15,240 --> 00:08:17,099
do this non-interactively so in

227
00:08:17,099 --> 00:08:19,259
particular first we can ring change from

228
00:08:19,259 --> 00:08:21,780
this integer ring to Z q minus 1 where Q

229
00:08:21,780 --> 00:08:25,560
is sum arbitrarily chosen L bit Prime

230
00:08:25,560 --> 00:08:28,259
and now you can exponentiate locally mod

231
00:08:28,259 --> 00:08:31,139
Q to get multiplicative shares in fq so

232
00:08:31,139 --> 00:08:33,120
basically if you had

233
00:08:33,120 --> 00:08:36,779
um some value W equals w0 plus W1 over

234
00:08:36,779 --> 00:08:39,240
the ring z q minus one then doing 2 to

235
00:08:39,240 --> 00:08:42,360
the W plus Q minus 1 mod Q is just 2 to

236
00:08:42,360 --> 00:08:45,779
the Q because of for my little theorem

237
00:08:45,779 --> 00:08:47,700
for the fractional exponentiation we use

238
00:08:47,700 --> 00:08:49,800
another clever trick which is to

239
00:08:49,800 --> 00:08:51,120
understand that these fractional parts

240
00:08:51,120 --> 00:08:53,640
are just small positive rules so if you

241
00:08:53,640 --> 00:08:55,200
exponentiate them and try to project

242
00:08:55,200 --> 00:08:57,480
them onto the ring then the shares won't

243
00:08:57,480 --> 00:08:58,800
wrap around the ring because they're

244
00:08:58,800 --> 00:09:00,839
small so this actually means that you

245
00:09:00,839 --> 00:09:02,700
can just exponentiate them locally and

246
00:09:02,700 --> 00:09:04,380
even in real numbers to get a

247
00:09:04,380 --> 00:09:06,000
multiplicative sharing up to the

248
00:09:06,000 --> 00:09:09,240
truncation of the final result and this

249
00:09:09,240 --> 00:09:11,820
also ends up giving us a smaller error

250
00:09:11,820 --> 00:09:13,019
than using other techniques like

251
00:09:13,019 --> 00:09:16,160
polynomial approximation

252
00:09:16,860 --> 00:09:18,660
um you can after you've done the integer

253
00:09:18,660 --> 00:09:20,279
and fractional exponentiations you can

254
00:09:20,279 --> 00:09:23,760
multiply it locally to get shares

255
00:09:23,760 --> 00:09:25,740
um of up to truncation of the complete

256
00:09:25,740 --> 00:09:27,899
exponentiation result and these will be

257
00:09:27,899 --> 00:09:29,640
multiplicative shifts

258
00:09:29,640 --> 00:09:31,800
all of the computation so far has been

259
00:09:31,800 --> 00:09:33,420
completely local

260
00:09:33,420 --> 00:09:35,580
so the only communication step we need

261
00:09:35,580 --> 00:09:37,920
is to convert from these multiplicative

262
00:09:37,920 --> 00:09:40,320
shares to additive shares and for that

263
00:09:40,320 --> 00:09:43,339
we can use existing techniques

264
00:09:43,339 --> 00:09:46,560
which require only one field element

265
00:09:46,560 --> 00:09:48,480
transfer per party in a single message

266
00:09:48,480 --> 00:09:49,920
round

267
00:09:49,920 --> 00:09:51,959
and finally we can convert the sharing

268
00:09:51,959 --> 00:09:55,279
back from the field in CQ to Z to the L

269
00:09:55,279 --> 00:09:59,300
using our ring change operation

270
00:09:59,880 --> 00:10:01,860
so the protocol I described actually

271
00:10:01,860 --> 00:10:04,500
only works for positive exponents you

272
00:10:04,500 --> 00:10:05,880
can handle negative exponents by

273
00:10:05,880 --> 00:10:07,920
assuming a lower bound and then adding

274
00:10:07,920 --> 00:10:10,019
it to the exponent at the start and

275
00:10:10,019 --> 00:10:11,940
dividing it out later and this Bond

276
00:10:11,940 --> 00:10:13,560
naturally arises within poisson

277
00:10:13,560 --> 00:10:15,300
regression

278
00:10:15,300 --> 00:10:16,800
um a couple caveats about this protocol

279
00:10:16,800 --> 00:10:18,959
is that it cannot detect computation

280
00:10:18,959 --> 00:10:20,640
failures without greatly sacrificing

281
00:10:20,640 --> 00:10:21,959
efficiency

282
00:10:21,959 --> 00:10:24,060
but the failure probability can be made

283
00:10:24,060 --> 00:10:25,740
arbitrarily small but just increasing

284
00:10:25,740 --> 00:10:27,420
the size of the ring that you're working

285
00:10:27,420 --> 00:10:28,560
in

286
00:10:28,560 --> 00:10:30,240
it's also an open question if the

287
00:10:30,240 --> 00:10:31,920
efficiency carries over to the malicious

288
00:10:31,920 --> 00:10:35,100
setting because you need to exponentiate

289
00:10:35,100 --> 00:10:36,839
things in real numbers let's say to get

290
00:10:36,839 --> 00:10:38,880
the smaller error so it's unclear if

291
00:10:38,880 --> 00:10:40,080
this carries over to the malicious

292
00:10:40,080 --> 00:10:42,120
setting

293
00:10:42,120 --> 00:10:44,279
as a few concrete benchmarks our

294
00:10:44,279 --> 00:10:46,440
pre-processing requires just two field

295
00:10:46,440 --> 00:10:49,320
elements for pre-processing and one

296
00:10:49,320 --> 00:10:51,600
element for communication per party we

297
00:10:51,600 --> 00:10:53,220
have a smaller error than polynomial

298
00:10:53,220 --> 00:10:55,680
approximation which is about 7x smaller

299
00:10:55,680 --> 00:10:57,959
when you have 20 fractional Bits And The

300
00:10:57,959 --> 00:11:01,140
Gap widens with more bits

301
00:11:01,140 --> 00:11:04,200
for some concrete benchmarks in the

302
00:11:04,200 --> 00:11:06,720
offline plus online uh setting in the

303
00:11:06,720 --> 00:11:07,980
Lan Network

304
00:11:07,980 --> 00:11:10,440
we can do something like 236 000

305
00:11:10,440 --> 00:11:12,540
operations per second and a 63-bit ring

306
00:11:12,540 --> 00:11:15,660
and 15 000 operations per second in a

307
00:11:15,660 --> 00:11:18,180
127 bit ring and this is significantly

308
00:11:18,180 --> 00:11:20,160
faster than

309
00:11:20,160 --> 00:11:21,779
um existing works for exponentiation

310
00:11:21,779 --> 00:11:24,360
which do order some magnitude smaller

311
00:11:24,360 --> 00:11:27,620
even in just the online phase

312
00:11:27,779 --> 00:11:29,399
the second building block that we have

313
00:11:29,399 --> 00:11:31,260
is pre-processing using correlated

314
00:11:31,260 --> 00:11:33,420
Beaver triples

315
00:11:33,420 --> 00:11:35,700
so as a refresher multiplication or

316
00:11:35,700 --> 00:11:36,839
Beaver triples are used for

317
00:11:36,839 --> 00:11:38,940
pre-processing to multiply two shared

318
00:11:38,940 --> 00:11:40,680
inputs and they can be generalized to

319
00:11:40,680 --> 00:11:43,079
Matrix triples as well so the triple is

320
00:11:43,079 --> 00:11:45,480
a shared matrices a b and c such that a

321
00:11:45,480 --> 00:11:48,720
times b equals c and now to multiply u

322
00:11:48,720 --> 00:11:51,180
and v you publicly first reconstruct U

323
00:11:51,180 --> 00:11:54,360
minus a and v minus B and now the shares

324
00:11:54,360 --> 00:11:56,399
of the multiplication is just linear in

325
00:11:56,399 --> 00:11:57,899
the triple and so can be computed

326
00:11:57,899 --> 00:12:00,060
locally

327
00:12:00,060 --> 00:12:01,860
now let's take a look at the gradient

328
00:12:01,860 --> 00:12:03,899
computation again and notice that in

329
00:12:03,899 --> 00:12:06,420
each iteration one of the multiplicands

330
00:12:06,420 --> 00:12:08,339
in the computation is the same for

331
00:12:08,339 --> 00:12:10,560
example you need to compute

332
00:12:10,560 --> 00:12:12,899
multiplications x times Theta 1 x times

333
00:12:12,899 --> 00:12:16,380
Theta 2 and so on with the same X and

334
00:12:16,380 --> 00:12:18,120
different weights in each of the

335
00:12:18,120 --> 00:12:19,140
iteration

336
00:12:19,140 --> 00:12:21,120
so the idea is we can reuse the

337
00:12:21,120 --> 00:12:22,380
pre-processing for the common

338
00:12:22,380 --> 00:12:24,480
multiplicand and this leads to our

339
00:12:24,480 --> 00:12:26,519
correlated Beaver triples so if you have

340
00:12:26,519 --> 00:12:28,800
many shared multiplications then we can

341
00:12:28,800 --> 00:12:31,200
pre-process these correlated correlated

342
00:12:31,200 --> 00:12:33,420
triples by just having the same Matrix

343
00:12:33,420 --> 00:12:37,079
for the common uh multiplicand

344
00:12:37,079 --> 00:12:39,600
this the upshot of this is that U minus

345
00:12:39,600 --> 00:12:42,000
a only needs to be reconstructed once

346
00:12:42,000 --> 00:12:44,220
and this leads to significant gains in

347
00:12:44,220 --> 00:12:46,620
both computation and communication When

348
00:12:46,620 --> 00:12:49,800
U is much larger than all of the VJ

349
00:12:49,800 --> 00:12:51,899
and this is exactly the case that we

350
00:12:51,899 --> 00:12:55,380
have in the poisson regression protocol

351
00:12:55,380 --> 00:12:58,019
um in terms of performance end-to-end

352
00:12:58,019 --> 00:12:59,760
performance results we tested the

353
00:12:59,760 --> 00:13:01,440
accuracy of the weights that we got in

354
00:13:01,440 --> 00:13:03,000
the secure protocol with the ones we got

355
00:13:03,000 --> 00:13:04,920
in the plaintext protocol and we can see

356
00:13:04,920 --> 00:13:07,019
that for very a variety of learning

357
00:13:07,019 --> 00:13:09,240
rates the

358
00:13:09,240 --> 00:13:11,399
um learning is exactly the same and in

359
00:13:11,399 --> 00:13:13,680
fact we calculated the root mean square

360
00:13:13,680 --> 00:13:15,959
error and found that it's very small

361
00:13:15,959 --> 00:13:17,820
roughly 10 to the negative 4 or 10 to

362
00:13:17,820 --> 00:13:20,040
the negative 3 depending upon the

363
00:13:20,040 --> 00:13:21,839
different data sets between the plain

364
00:13:21,839 --> 00:13:24,899
text and the secure weights

365
00:13:24,899 --> 00:13:26,579
um as a final point we also have some

366
00:13:26,579 --> 00:13:30,360
end-to-end benchmarks for specific uh

367
00:13:30,360 --> 00:13:33,420
specifically with 3.1 gigahertz and 32

368
00:13:33,420 --> 00:13:35,940
gigs of RAM per party in a single

369
00:13:35,940 --> 00:13:38,279
threaded code in a lan Network

370
00:13:38,279 --> 00:13:40,560
um as a concrete example if you have 10

371
00:13:40,560 --> 00:13:42,180
000 samples and each of them have 100

372
00:13:42,180 --> 00:13:44,839
features and if you run the whole uh

373
00:13:44,839 --> 00:13:47,100
poisson regression protocol for 100

374
00:13:47,100 --> 00:13:49,920
iterations this is the results that we

375
00:13:49,920 --> 00:13:51,720
get the Baseline comparison is with

376
00:13:51,720 --> 00:13:53,820
standard triples and explanation through

377
00:13:53,820 --> 00:13:56,279
scale Mamba protocol so we have five

378
00:13:56,279 --> 00:13:58,620
minutes of total offline time which is

379
00:13:58,620 --> 00:14:01,620
25 000 times faster than the Baseline we

380
00:14:01,620 --> 00:14:03,540
have nine minutes of total online time

381
00:14:03,540 --> 00:14:06,300
which is 50 faster than the Baseline and

382
00:14:06,300 --> 00:14:07,860
we have one and a half gigs of

383
00:14:07,860 --> 00:14:10,139
communication which is 200 times smaller

384
00:14:10,139 --> 00:14:12,120
than the Baseline and this is for all of

385
00:14:12,120 --> 00:14:14,040
the 100 iterations of the regression

386
00:14:14,040 --> 00:14:15,300
protocol

387
00:14:15,300 --> 00:14:17,220
and that sort of concludes my talk

388
00:14:17,220 --> 00:14:19,139
here's a link to the paper as well as an

389
00:14:19,139 --> 00:14:21,180
email address if you want to reach out

390
00:14:21,180 --> 00:14:23,899
um I'll take any questions

