1
00:00:07,519 --> 00:00:10,679
I am charum Young from Seoul national

2
00:00:10,679 --> 00:00:14,040
university in this presentation I will

3
00:00:14,040 --> 00:00:15,839
be talking about hypervisor fuzzing

4
00:00:15,839 --> 00:00:17,760
Mundo fuzz

5
00:00:17,760 --> 00:00:19,080
okay

6
00:00:19,080 --> 00:00:21,300
the hypervisor is the system software

7
00:00:21,300 --> 00:00:24,660
that manages and runs virtual machines

8
00:00:24,660 --> 00:00:27,420
the hypervisor allows multiple remote

9
00:00:27,420 --> 00:00:30,539
users to rent virtual machines and

10
00:00:30,539 --> 00:00:33,600
provide virtualized Hardware resources

11
00:00:33,600 --> 00:00:35,820
this is particularly important today

12
00:00:35,820 --> 00:00:38,579
because the Computing Trends are rapidly

13
00:00:38,579 --> 00:00:41,760
shifting towards a cloud computing using

14
00:00:41,760 --> 00:00:44,460
the hypervisor cloud computing platforms

15
00:00:44,460 --> 00:00:47,280
can enable a flexible Resource

16
00:00:47,280 --> 00:00:49,920
Management on Virtual light platforms

17
00:00:49,920 --> 00:00:52,739
which can efficiently service billions

18
00:00:52,739 --> 00:00:55,920
of users however from the security point

19
00:00:55,920 --> 00:00:58,920
of view the hypervisor introduces a

20
00:00:58,920 --> 00:01:02,340
critical attack surfaces and that needs

21
00:01:02,340 --> 00:01:04,680
careful attention

22
00:01:04,680 --> 00:01:08,340
let's assume one of the guest VMS is

23
00:01:08,340 --> 00:01:09,600
malicious

24
00:01:09,600 --> 00:01:12,900
if this attacker gets 3M exploits the

25
00:01:12,900 --> 00:01:15,600
vulnerability in the hypervisor and

26
00:01:15,600 --> 00:01:18,600
gains the hypervisor privilege then all

27
00:01:18,600 --> 00:01:20,880
the guest VMS running on the hypervisor

28
00:01:20,880 --> 00:01:24,000
would be compromised as well

29
00:01:24,000 --> 00:01:26,820
one effective way to identify the

30
00:01:26,820 --> 00:01:29,820
vulnerabilities is fuzzing

31
00:01:29,820 --> 00:01:32,040
the forcing keeps generating random

32
00:01:32,040 --> 00:01:34,740
input and providing it into a Target

33
00:01:34,740 --> 00:01:36,180
software

34
00:01:36,180 --> 00:01:38,939
during the forzing it monitors on

35
00:01:38,939 --> 00:01:42,000
whether an abnormal behavior like crash

36
00:01:42,000 --> 00:01:43,340
of course

37
00:01:43,340 --> 00:01:45,720
hypervisor forzing would be similar

38
00:01:45,720 --> 00:01:48,420
about the key point is that the input

39
00:01:48,420 --> 00:01:52,259
would be provided by the virtual machine

40
00:01:52,259 --> 00:01:55,200
moreover yet another important

41
00:01:55,200 --> 00:01:58,380
difference is that these inputs are low

42
00:01:58,380 --> 00:02:01,500
level I operations using various i o

43
00:02:01,500 --> 00:02:05,119
interfaces such as Pio

44
00:02:05,119 --> 00:02:09,598
mmio EMA and so on

45
00:02:09,598 --> 00:02:12,540
in order to force the hypervisor virtual

46
00:02:12,540 --> 00:02:14,940
devices will be attacked primarily

47
00:02:14,940 --> 00:02:18,000
through the random input however

48
00:02:18,000 --> 00:02:20,760
hypervisors emulate a lot of virtual

49
00:02:20,760 --> 00:02:23,819
devices and each for sure device has its

50
00:02:23,819 --> 00:02:26,640
own unique input format

51
00:02:26,640 --> 00:02:29,160
as you can see here the hypervisor

52
00:02:29,160 --> 00:02:34,620
emulates devices like nvme Nic USB and

53
00:02:34,620 --> 00:02:36,180
so on

54
00:02:36,180 --> 00:02:39,420
most hypervisor fuzzing technique rely

55
00:02:39,420 --> 00:02:42,180
on two methods to generate the random

56
00:02:42,180 --> 00:02:45,420
inputs the first is to Generate random

57
00:02:45,420 --> 00:02:47,959
inputs without knowing the input format

58
00:02:47,959 --> 00:02:51,480
and the second is to generate precise

59
00:02:51,480 --> 00:02:55,140
input relying on manual input grammars

60
00:02:55,140 --> 00:02:57,420
but all these two have their own

61
00:02:57,420 --> 00:02:58,739
problems

62
00:02:58,739 --> 00:03:01,200
first the random input cannot generate

63
00:03:01,200 --> 00:03:04,200
the correct input format so it fails to

64
00:03:04,200 --> 00:03:08,580
explore the if state of devices

65
00:03:08,580 --> 00:03:13,140
a second manual input specification is

66
00:03:13,140 --> 00:03:16,140
non-trivial and it is costly

67
00:03:16,140 --> 00:03:18,900
so we wanted to solve these two

68
00:03:18,900 --> 00:03:22,080
limitations by forcing the hypervisor

69
00:03:22,080 --> 00:03:26,159
with the automated grammar inference

70
00:03:26,159 --> 00:03:29,420
Mundo first is designed to improve

71
00:03:29,420 --> 00:03:31,920
hypervisor forcing capability with

72
00:03:31,920 --> 00:03:35,519
automatic grammar inference however we

73
00:03:35,519 --> 00:03:37,500
found two challenges to infer the

74
00:03:37,500 --> 00:03:38,640
grammar

75
00:03:38,640 --> 00:03:42,120
this is related to the unique features

76
00:03:42,120 --> 00:03:45,900
of the hypervisor first the hypervisor

77
00:03:45,900 --> 00:03:49,140
grammars have hidden input semantics

78
00:03:49,140 --> 00:03:51,599
second the hardware features of the

79
00:03:51,599 --> 00:03:54,540
hypervisor introduce coverage noises

80
00:03:54,540 --> 00:03:58,260
so in order to solve these challenges we

81
00:03:58,260 --> 00:04:01,860
develop an approach called statistical

82
00:04:01,860 --> 00:04:06,360
and differential learning with coverage

83
00:04:06,360 --> 00:04:09,659
as you can see in the example the input

84
00:04:09,659 --> 00:04:11,819
is presented in a sequence of I

85
00:04:11,819 --> 00:04:15,120
operations so it is difficult to infer a

86
00:04:15,120 --> 00:04:17,940
semantic meaning behind the input in

87
00:04:17,940 --> 00:04:21,000
fact there are two hidden semantics here

88
00:04:21,000 --> 00:04:24,479
one is IO dress semantics which are

89
00:04:24,479 --> 00:04:27,180
signs meaning to the i o addresses using

90
00:04:27,180 --> 00:04:30,300
different types so I O operations show

91
00:04:30,300 --> 00:04:33,000
its dedicated Behavior through correct i

92
00:04:33,000 --> 00:04:34,740
o address value

93
00:04:34,740 --> 00:04:38,220
there are two types of i o addresses for

94
00:04:38,220 --> 00:04:39,780
control type

95
00:04:39,780 --> 00:04:42,660
the i o address value is used as a

96
00:04:42,660 --> 00:04:44,520
function number to invoke device

97
00:04:44,520 --> 00:04:45,720
function

98
00:04:45,720 --> 00:04:49,500
for a data type the value is used as a

99
00:04:49,500 --> 00:04:52,440
data parameter to be used in the invoked

100
00:04:52,440 --> 00:04:53,639
function

101
00:04:53,639 --> 00:04:56,280
for example in the first two I

102
00:04:56,280 --> 00:04:59,100
operations we can infer the meaning that

103
00:04:59,100 --> 00:05:01,979
in it involves the function called find

104
00:05:01,979 --> 00:05:05,040
sector and transfer the data parameter

105
00:05:05,040 --> 00:05:07,860
to be used in defined sector

106
00:05:07,860 --> 00:05:09,360
and

107
00:05:09,360 --> 00:05:12,000
we can infer the meaning of the last two

108
00:05:12,000 --> 00:05:15,720
operations in the same way

109
00:05:15,720 --> 00:05:20,220
so the other hidden hidden semantic is

110
00:05:20,220 --> 00:05:23,400
IO order semantics which assigns meaning

111
00:05:23,400 --> 00:05:26,280
to an execution order of the I

112
00:05:26,280 --> 00:05:29,340
operations so the I operations function

113
00:05:29,340 --> 00:05:31,560
correctly if they follow the correct

114
00:05:31,560 --> 00:05:32,699
order

115
00:05:32,699 --> 00:05:35,880
uh for example eye operations are

116
00:05:35,880 --> 00:05:38,220
positioned to perform the device

117
00:05:38,220 --> 00:05:41,880
behaviors as shown in blue colored and

118
00:05:41,880 --> 00:05:44,520
red colored eye operations

119
00:05:44,520 --> 00:05:47,460
just as the fine sector should be

120
00:05:47,460 --> 00:05:50,340
performed before the right data eye

121
00:05:50,340 --> 00:05:52,560
operations should follow the execution

122
00:05:52,560 --> 00:05:54,539
order

123
00:05:54,539 --> 00:05:57,120
among the two hidden hidden semantics

124
00:05:57,120 --> 00:06:00,240
let me first show how to infer IO dress

125
00:06:00,240 --> 00:06:04,380
semantics by identifying I address types

126
00:06:04,380 --> 00:06:07,800
key observation here is that different

127
00:06:07,800 --> 00:06:10,860
IO address types behave differently

128
00:06:10,860 --> 00:06:14,220
depending on which value were assigned

129
00:06:14,220 --> 00:06:15,600
to it

130
00:06:15,600 --> 00:06:18,360
so we inspect the coverage by writing

131
00:06:18,360 --> 00:06:19,919
different values

132
00:06:19,919 --> 00:06:22,319
for the control type the coverage

133
00:06:22,319 --> 00:06:25,139
appears differently depending on the I

134
00:06:25,139 --> 00:06:26,520
address value

135
00:06:26,520 --> 00:06:28,800
as you can see in the figure different

136
00:06:28,800 --> 00:06:31,380
coverage is captured because the

137
00:06:31,380 --> 00:06:33,780
different values were written to the I

138
00:06:33,780 --> 00:06:35,160
address

139
00:06:35,160 --> 00:06:36,479
so

140
00:06:36,479 --> 00:06:39,900
we confirm this is control time

141
00:06:39,900 --> 00:06:42,900
at the high level these two invoke

142
00:06:42,900 --> 00:06:46,440
different different functions

143
00:06:46,440 --> 00:06:49,740
on the contrary for a data tie the same

144
00:06:49,740 --> 00:06:52,319
coverage appears irrespective to the I

145
00:06:52,319 --> 00:06:53,819
address value

146
00:06:53,819 --> 00:06:57,479
so we can confirm that it is data type

147
00:06:57,479 --> 00:07:00,300
at the high level these two invoke the

148
00:07:00,300 --> 00:07:02,759
same function and only the data

149
00:07:02,759 --> 00:07:06,080
parameter has changed

150
00:07:06,360 --> 00:07:09,300
secondly we identify the execution order

151
00:07:09,300 --> 00:07:12,539
to infer I order semantics we observe

152
00:07:12,539 --> 00:07:15,780
that iot I O operations wouldn't work

153
00:07:15,780 --> 00:07:18,660
correctly without the prerequisite I

154
00:07:18,660 --> 00:07:21,479
operations so we check whether the

155
00:07:21,479 --> 00:07:24,900
coverage is distorted by omitting some I

156
00:07:24,900 --> 00:07:26,099
operations

157
00:07:26,099 --> 00:07:29,460
for example for one input all I

158
00:07:29,460 --> 00:07:31,560
operations are performed in the correct

159
00:07:31,560 --> 00:07:35,280
order and for the other input the first

160
00:07:35,280 --> 00:07:38,220
two I operations are skipped and the

161
00:07:38,220 --> 00:07:40,800
last two operations are popon

162
00:07:40,800 --> 00:07:43,500
then we compare the coverage for the

163
00:07:43,500 --> 00:07:45,539
last two eye operations

164
00:07:45,539 --> 00:07:48,240
and if the coverage is different we

165
00:07:48,240 --> 00:07:51,300
identify that the last I operations are

166
00:07:51,300 --> 00:07:55,699
dependent on the first two I operations

167
00:07:55,740 --> 00:07:58,740
yes check why we measure the input

168
00:07:58,740 --> 00:08:01,199
coverage for inferring hidden semantics

169
00:08:01,199 --> 00:08:03,479
we found that the measured input

170
00:08:03,479 --> 00:08:07,680
coverage includes unwanted coverage this

171
00:08:07,680 --> 00:08:10,080
is because the hypervisor virtualized a

172
00:08:10,080 --> 00:08:12,840
synchronous event the asynchronous event

173
00:08:12,840 --> 00:08:16,380
can be a timer or interrupt event

174
00:08:16,380 --> 00:08:19,139
this asynchronous event is performed in

175
00:08:19,139 --> 00:08:21,300
the middle of the hypervisor operating

176
00:08:21,300 --> 00:08:25,020
on the input and it introduces a

177
00:08:25,020 --> 00:08:27,120
non-deterministic coverage

178
00:08:27,120 --> 00:08:29,639
to make it easy to understand let's use

179
00:08:29,639 --> 00:08:32,219
the previous example

180
00:08:32,219 --> 00:08:35,339
we inspect that only target coverage

181
00:08:35,339 --> 00:08:37,679
will be measured

182
00:08:37,679 --> 00:08:39,240
however

183
00:08:39,240 --> 00:08:41,640
during the first execution you can see

184
00:08:41,640 --> 00:08:45,540
noise coverage by an interruptive event

185
00:08:45,540 --> 00:08:47,820
during the second execution noise

186
00:08:47,820 --> 00:08:51,480
coverage of course through a timer event

187
00:08:51,480 --> 00:08:54,180
ually it is difficult to measure clean

188
00:08:54,180 --> 00:08:56,700
Target coverage because of the various

189
00:08:56,700 --> 00:09:00,060
asynchronous events

190
00:09:00,060 --> 00:09:02,640
to resolve this challenge we observed

191
00:09:02,640 --> 00:09:05,160
the characteristics of Target coverage

192
00:09:05,160 --> 00:09:07,320
and noise coverage

193
00:09:07,320 --> 00:09:09,779
for Target coverage it is always

194
00:09:09,779 --> 00:09:12,600
captured for all execution

195
00:09:12,600 --> 00:09:15,180
on the other hand for a noisy Lewis

196
00:09:15,180 --> 00:09:18,480
coverage it is captured differently for

197
00:09:18,480 --> 00:09:20,640
each execution

198
00:09:20,640 --> 00:09:23,519
through the observation we designed a

199
00:09:23,519 --> 00:09:26,399
statistical differential sorry

200
00:09:26,399 --> 00:09:28,260
statistical differential coverage

201
00:09:28,260 --> 00:09:30,899
measurement that removes noise coverage

202
00:09:30,899 --> 00:09:34,620
by intersecting all measured coverage

203
00:09:34,620 --> 00:09:37,560
by doing so we can secure our clean

204
00:09:37,560 --> 00:09:40,459
Target coverage

205
00:09:41,060 --> 00:09:44,160
has the following over architecture

206
00:09:44,160 --> 00:09:47,279
first we collect a hypervisor input

207
00:09:47,279 --> 00:09:50,040
Trace issued by various real-world

208
00:09:50,040 --> 00:09:53,399
applications and manipulate the input

209
00:09:53,399 --> 00:09:56,459
considering two hidden semantics

210
00:09:56,459 --> 00:10:00,000
second we remove noise coverage and

211
00:10:00,000 --> 00:10:02,820
obtain cling Target coverage through the

212
00:10:02,820 --> 00:10:05,459
statistical noise filter

213
00:10:05,459 --> 00:10:08,279
and using the coverage we analyze the

214
00:10:08,279 --> 00:10:10,920
two characteristics of input semantics

215
00:10:10,920 --> 00:10:13,680
and create the grammar

216
00:10:13,680 --> 00:10:16,980
finally Mundo Falls find the hypervisor

217
00:10:16,980 --> 00:10:19,620
bugs using the grammar

218
00:10:19,620 --> 00:10:22,680
so what did Mundo first find

219
00:10:22,680 --> 00:10:26,160
bundo first found near 40 bucks in qmu

220
00:10:26,160 --> 00:10:30,420
and beehive we found 23 balls in qmu and

221
00:10:30,420 --> 00:10:33,839
17 bucks in beehive

222
00:10:33,839 --> 00:10:36,480
also to demonstrate the performance of

223
00:10:36,480 --> 00:10:39,540
Mundo first we compare the coverage to

224
00:10:39,540 --> 00:10:41,779
the state-of-the-art hypervisor fuzzer

225
00:10:41,779 --> 00:10:44,600
hypercube and Nyx

226
00:10:44,600 --> 00:10:49,320
are performed over a performance by 4.9

227
00:10:49,320 --> 00:10:52,260
and 6.6 respectively

228
00:10:52,260 --> 00:10:55,800
we also compared NYX with manual grammar

229
00:10:55,800 --> 00:10:58,740
rules to Mundo first through the complex

230
00:10:58,740 --> 00:11:02,459
USB device and Window files shows higher

231
00:11:02,459 --> 00:11:04,740
coverage than next with manual grammar

232
00:11:04,740 --> 00:11:06,360
rule

233
00:11:06,360 --> 00:11:09,660
now let me conclude the presentation

234
00:11:09,660 --> 00:11:12,060
I introduced the hypervisor fuzzing

235
00:11:12,060 --> 00:11:14,700
technique called window first it's

236
00:11:14,700 --> 00:11:18,420
testically removes noise coverage and

237
00:11:18,420 --> 00:11:21,120
automatically learns the grammar using

238
00:11:21,120 --> 00:11:23,100
two hidden semantics

239
00:11:23,100 --> 00:11:27,420
also mundofas discovered 40 new bugs

240
00:11:27,420 --> 00:11:29,640
Mundo Falls also presented better

241
00:11:29,640 --> 00:11:31,740
coverage compared to state-of-the-art

242
00:11:31,740 --> 00:11:33,779
hypervisor fuzzer

243
00:11:33,779 --> 00:11:36,420
thank you very much for your attention I

244
00:11:36,420 --> 00:11:40,099
would be very happy to take any question

