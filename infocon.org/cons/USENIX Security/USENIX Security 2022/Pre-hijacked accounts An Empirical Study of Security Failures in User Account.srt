1
00:00:07,460 --> 00:00:10,440
I'm going to talk about pre-highjacked

2
00:00:10,440 --> 00:00:12,719
accounts and this is a joint work with

3
00:00:12,719 --> 00:00:14,219
Andrew powered from the Microsoft

4
00:00:14,219 --> 00:00:16,800
security Response Center msrc in short

5
00:00:16,800 --> 00:00:19,560
and this research was funded by a

6
00:00:19,560 --> 00:00:22,020
project Grant from msrc

7
00:00:22,020 --> 00:00:24,000
some of you may be already familiar with

8
00:00:24,000 --> 00:00:25,920
this research because it was covered in

9
00:00:25,920 --> 00:00:27,900
some prominent cyber security news

10
00:00:27,900 --> 00:00:29,760
websites

11
00:00:29,760 --> 00:00:31,679
so I hope I have you I have your

12
00:00:31,679 --> 00:00:34,320
attention now let's get started so

13
00:00:34,320 --> 00:00:35,780
before I explain what is account

14
00:00:35,780 --> 00:00:38,520
prejacking let me cover some Basics on

15
00:00:38,520 --> 00:00:40,920
what is account hijacking so in an

16
00:00:40,920 --> 00:00:43,140
account hijacking attack there is a

17
00:00:43,140 --> 00:00:43,980
victim

18
00:00:43,980 --> 00:00:47,100
an online service and an attacker

19
00:00:47,100 --> 00:00:49,200
the victim owns an account at the

20
00:00:49,200 --> 00:00:51,480
service so the victim can execute the

21
00:00:51,480 --> 00:00:53,520
login action by providing the victim's

22
00:00:53,520 --> 00:00:55,860
credentials for the service and after

23
00:00:55,860 --> 00:00:58,199
verifying the credentials the service

24
00:00:58,199 --> 00:01:00,840
will authenticate the victim and store a

25
00:01:00,840 --> 00:01:02,460
token of authentication which is a

26
00:01:02,460 --> 00:01:04,559
cookie at the victim's device

27
00:01:04,559 --> 00:01:06,299
let's talk about the attacker the

28
00:01:06,299 --> 00:01:08,700
attacker is an adversary whose goal is

29
00:01:08,700 --> 00:01:11,040
to obtain access to the victims account

30
00:01:11,040 --> 00:01:12,479
at the service

31
00:01:12,479 --> 00:01:15,000
and in order to achieve this goal the

32
00:01:15,000 --> 00:01:16,920
attacker leverages different adversarial

33
00:01:16,920 --> 00:01:18,000
tactics

34
00:01:18,000 --> 00:01:19,979
for instance the attacker can try to

35
00:01:19,979 --> 00:01:21,780
mount a phishing attack on the victim

36
00:01:21,780 --> 00:01:23,580
and hope to obtain the victim's

37
00:01:23,580 --> 00:01:25,439
credentials for the service

38
00:01:25,439 --> 00:01:27,780
or the attackering directly targets the

39
00:01:27,780 --> 00:01:29,520
service and try to exploit some

40
00:01:29,520 --> 00:01:31,439
vulnerabilities and obtain sensitive

41
00:01:31,439 --> 00:01:33,600
information such as the victim's cookie

42
00:01:33,600 --> 00:01:36,600
and try to leverage it

43
00:01:36,600 --> 00:01:39,180
so account hijacking attacks are well

44
00:01:39,180 --> 00:01:40,979
known and well studied

45
00:01:40,979 --> 00:01:42,840
so there has been a lot of research on

46
00:01:42,840 --> 00:01:44,700
the various adversarial tactics and

47
00:01:44,700 --> 00:01:46,979
defenses for account hijacking attacks

48
00:01:46,979 --> 00:01:48,780
but this is not the case with account

49
00:01:48,780 --> 00:01:51,600
pre-highjacking attacks and it is a very

50
00:01:51,600 --> 00:01:54,000
understudied subject so what is account

51
00:01:54,000 --> 00:01:55,799
free hijacking so in an account

52
00:01:55,799 --> 00:01:58,020
pre-highjacking attack and attacker

53
00:01:58,020 --> 00:02:00,479
hacks the online account of the victim

54
00:02:00,479 --> 00:02:03,840
even before it is created so some of you

55
00:02:03,840 --> 00:02:06,119
may be wondering does it make sense to

56
00:02:06,119 --> 00:02:08,098
hack an account even before the victim

57
00:02:08,098 --> 00:02:10,919
creates it we'll see the details in the

58
00:02:10,919 --> 00:02:13,739
following slides but before I proceed I

59
00:02:13,739 --> 00:02:16,440
want to explain the assumptions we make

60
00:02:16,440 --> 00:02:19,200
about the victim and the attacker so the

61
00:02:19,200 --> 00:02:20,819
first assumption is that the victim does

62
00:02:20,819 --> 00:02:22,620
not have an account at the service at

63
00:02:22,620 --> 00:02:24,599
the beginning of the attack the second

64
00:02:24,599 --> 00:02:26,760
assumption is that the victim ignores

65
00:02:26,760 --> 00:02:28,620
the notification sent by the services

66
00:02:28,620 --> 00:02:31,080
where they don't have an account

67
00:02:31,080 --> 00:02:33,720
and we assume that the attacker knows

68
00:02:33,720 --> 00:02:35,280
the identifier for instance the email

69
00:02:35,280 --> 00:02:37,379
address and other basic details of the

70
00:02:37,379 --> 00:02:39,959
victim for creating an account

71
00:02:39,959 --> 00:02:42,360
for some account free hijacking attacks

72
00:02:42,360 --> 00:02:44,459
we need the capability for the attacker

73
00:02:44,459 --> 00:02:47,220
to make the victim visit a URL this is a

74
00:02:47,220 --> 00:02:49,140
realistic assumption because it can be

75
00:02:49,140 --> 00:02:50,700
achieved through let's say click baiting

76
00:02:50,700 --> 00:02:52,680
we also make other basic assumptions

77
00:02:52,680 --> 00:02:55,200
like the victim has security knowledge

78
00:02:55,200 --> 00:02:58,019
and they cannot be uh fished and the

79
00:02:58,019 --> 00:03:00,180
service is like you know secured with

80
00:03:00,180 --> 00:03:02,280
all the updates on the libraries and

81
00:03:02,280 --> 00:03:03,480
everything

82
00:03:03,480 --> 00:03:05,280
so let's see our first example of

83
00:03:05,280 --> 00:03:08,040
account pre-highjacking attack so I will

84
00:03:08,040 --> 00:03:09,420
show the timeline on the left hand side

85
00:03:09,420 --> 00:03:11,640
so in the first step the attacker

86
00:03:11,640 --> 00:03:13,140
creates an account with the victim's

87
00:03:13,140 --> 00:03:16,260
identifier so to do this that attacker

88
00:03:16,260 --> 00:03:18,060
fills a sign up form so the attacker

89
00:03:18,060 --> 00:03:19,560
provides the victim's email address

90
00:03:19,560 --> 00:03:21,599
which is a Gmail address in this example

91
00:03:21,599 --> 00:03:23,819
and the attacker will provide a password

92
00:03:23,819 --> 00:03:25,500
and the victim's name

93
00:03:25,500 --> 00:03:27,659
and an account will be created and a

94
00:03:27,659 --> 00:03:28,980
cookie will be stored in the attackers

95
00:03:28,980 --> 00:03:29,879
device

96
00:03:29,879 --> 00:03:32,220
the attacker then waits in fact the

97
00:03:32,220 --> 00:03:34,440
attacker Waits until the victim tries to

98
00:03:34,440 --> 00:03:35,640
create an account with the same

99
00:03:35,640 --> 00:03:37,860
identifier so the victim will fill the

100
00:03:37,860 --> 00:03:39,840
sign up form and provide the same email

101
00:03:39,840 --> 00:03:41,280
address that was provided by the

102
00:03:41,280 --> 00:03:44,700
attacker and a different password will

103
00:03:44,700 --> 00:03:46,920
be provided of course and the service

104
00:03:46,920 --> 00:03:48,420
will complain that an account already

105
00:03:48,420 --> 00:03:51,299
exists with the same email address so

106
00:03:51,299 --> 00:03:53,459
the victim is confused here because they

107
00:03:53,459 --> 00:03:55,680
don't remember creating an account so

108
00:03:55,680 --> 00:03:58,739
they may think that they had created an

109
00:03:58,739 --> 00:04:01,739
account in the past and uh they forgot

110
00:04:01,739 --> 00:04:03,780
about it or they may assume that this is

111
00:04:03,780 --> 00:04:05,640
because of the acquisition of this

112
00:04:05,640 --> 00:04:07,200
service by another service where the

113
00:04:07,200 --> 00:04:08,940
victim has an account

114
00:04:08,940 --> 00:04:10,799
so the victim will not be able to log

115
00:04:10,799 --> 00:04:12,239
into this account since the attacker

116
00:04:12,239 --> 00:04:13,980
chose the password for this account so

117
00:04:13,980 --> 00:04:15,599
the victim will initiate a password

118
00:04:15,599 --> 00:04:17,040
reset for this account because the

119
00:04:17,040 --> 00:04:19,260
victim owns the email address right so

120
00:04:19,260 --> 00:04:20,339
the victim will provide the email

121
00:04:20,339 --> 00:04:21,959
address and the password reset link will

122
00:04:21,959 --> 00:04:24,000
be sent to the email address

123
00:04:24,000 --> 00:04:27,060
and using the password reset link the

124
00:04:27,060 --> 00:04:29,400
victim will change the password so the

125
00:04:29,400 --> 00:04:31,560
account's password has been changed and

126
00:04:31,560 --> 00:04:33,300
the victim will log into the account and

127
00:04:33,300 --> 00:04:36,500
start using the account

128
00:04:36,540 --> 00:04:38,759
what can go wrong here let me explain

129
00:04:38,759 --> 00:04:40,500
the first case study which is LinkedIn

130
00:04:40,500 --> 00:04:42,660
so this is the password change form of

131
00:04:42,660 --> 00:04:44,340
LinkedIn that will be used by the victim

132
00:04:44,340 --> 00:04:47,580
during password reset and as you can see

133
00:04:47,580 --> 00:04:49,620
there is a check box that asks the

134
00:04:49,620 --> 00:04:51,360
victim whether they want to invalidate

135
00:04:51,360 --> 00:04:53,520
all the past sessions after the password

136
00:04:53,520 --> 00:04:56,040
change and this checkbox is not checked

137
00:04:56,040 --> 00:04:59,040
by default so if the victim provides the

138
00:04:59,040 --> 00:05:01,080
new password without actually checking

139
00:05:01,080 --> 00:05:02,460
this box

140
00:05:02,460 --> 00:05:05,699
uh what can happen is that uh in the

141
00:05:05,699 --> 00:05:07,919
first step when the attacker created the

142
00:05:07,919 --> 00:05:09,600
account a cookie was stored in the

143
00:05:09,600 --> 00:05:12,180
attacker's browser so as long as the

144
00:05:12,180 --> 00:05:14,100
attacker keeps the session active the

145
00:05:14,100 --> 00:05:15,780
cookie is also valid

146
00:05:15,780 --> 00:05:20,100
so in in Step uh five when the victim

147
00:05:20,100 --> 00:05:21,780
logs in and starts using the account

148
00:05:21,780 --> 00:05:23,880
let's say the victim uploads a sensitive

149
00:05:23,880 --> 00:05:26,580
file called secret.txt later the

150
00:05:26,580 --> 00:05:28,800
attacker can view this file by providing

151
00:05:28,800 --> 00:05:30,600
the attacker's cookie and obtain access

152
00:05:30,600 --> 00:05:32,220
to the secret file

153
00:05:32,220 --> 00:05:34,380
this attack is called unexpired session

154
00:05:34,380 --> 00:05:36,660
attack so how did LinkedIn fix this so

155
00:05:36,660 --> 00:05:38,340
when we reported this attack to LinkedIn

156
00:05:38,340 --> 00:05:41,460
they now uh like check this box by

157
00:05:41,460 --> 00:05:42,539
default

158
00:05:42,539 --> 00:05:44,820
so let's see our second example so the

159
00:05:44,820 --> 00:05:46,860
first step is the same the attacker

160
00:05:46,860 --> 00:05:48,360
creates an account by filling the sign

161
00:05:48,360 --> 00:05:49,979
up form with the victim's email address

162
00:05:49,979 --> 00:05:52,380
but the second step is different in

163
00:05:52,380 --> 00:05:54,360
modern websites the victim has the

164
00:05:54,360 --> 00:05:55,800
possibility to create accounts through

165
00:05:55,800 --> 00:05:57,660
single sign-on so since the victim uses

166
00:05:57,660 --> 00:06:00,660
a Gmail account they can provide uh they

167
00:06:00,660 --> 00:06:02,039
can create an account through Google

168
00:06:02,039 --> 00:06:03,720
single sign-on so the victim will opt

169
00:06:03,720 --> 00:06:05,759
for this option so the victim will

170
00:06:05,759 --> 00:06:07,740
provide the access token to the service

171
00:06:07,740 --> 00:06:10,199
and the service will contact the Google

172
00:06:10,199 --> 00:06:12,539
identity service for obtaining the

173
00:06:12,539 --> 00:06:14,820
details for creating the account so the

174
00:06:14,820 --> 00:06:16,680
IDP service will provide the victims

175
00:06:16,680 --> 00:06:18,720
information such as the email address

176
00:06:18,720 --> 00:06:20,940
and name and this is an interesting

177
00:06:20,940 --> 00:06:23,039
point because at this moment the service

178
00:06:23,039 --> 00:06:25,199
is confused because there is already an

179
00:06:25,199 --> 00:06:26,880
unverified account with the same email

180
00:06:26,880 --> 00:06:28,199
address

181
00:06:28,199 --> 00:06:32,039
so what can go wrong let me explain the

182
00:06:32,039 --> 00:06:34,259
second case study which is zoom so Zoom

183
00:06:34,259 --> 00:06:36,180
used to silently merge the attacker

184
00:06:36,180 --> 00:06:37,979
created account and the victim's account

185
00:06:37,979 --> 00:06:40,139
so how silent are we talking about so

186
00:06:40,139 --> 00:06:42,120
this is the user interface of Zoom when

187
00:06:42,120 --> 00:06:43,979
the account merging is happening and as

188
00:06:43,979 --> 00:06:46,139
you can see there is no mention of the

189
00:06:46,139 --> 00:06:48,060
keyboard account merging in fact there

190
00:06:48,060 --> 00:06:50,100
is a button that says create account so

191
00:06:50,100 --> 00:06:51,660
the victim may think that they are

192
00:06:51,660 --> 00:06:53,280
actually creating an account but in

193
00:06:53,280 --> 00:06:54,720
reality they are authenticating to an

194
00:06:54,720 --> 00:06:57,060
attacker controlled account

195
00:06:57,060 --> 00:06:58,800
so the victim will think that they

196
00:06:58,800 --> 00:07:00,780
created the account but and and starts

197
00:07:00,780 --> 00:07:02,460
using the account but the attacker

198
00:07:02,460 --> 00:07:04,199
maintains access to this account

199
00:07:04,199 --> 00:07:05,819
so this attack is called the classic

200
00:07:05,819 --> 00:07:08,220
Federated merge attack how did Zoom fix

201
00:07:08,220 --> 00:07:10,080
this when we reported this issue to zoom

202
00:07:10,080 --> 00:07:12,240
now they Implement strict identifier

203
00:07:12,240 --> 00:07:14,220
verification so whenever you say that

204
00:07:14,220 --> 00:07:15,960
you own an email address you need to

205
00:07:15,960 --> 00:07:18,419
provide proof that you own the email

206
00:07:18,419 --> 00:07:21,360
address before Zoom actually Associates

207
00:07:21,360 --> 00:07:23,880
an account with that email address

208
00:07:23,880 --> 00:07:27,240
let's see another example so in the

209
00:07:27,240 --> 00:07:29,160
previous two examples we saw that the

210
00:07:29,160 --> 00:07:31,080
attacker creates an account with the

211
00:07:31,080 --> 00:07:33,419
victim's email address by filling the

212
00:07:33,419 --> 00:07:35,940
sign up form so in the second example we

213
00:07:35,940 --> 00:07:37,560
saw that it's also possible to create an

214
00:07:37,560 --> 00:07:39,419
account through single sign-on so is it

215
00:07:39,419 --> 00:07:41,220
possible for the attacker to create an

216
00:07:41,220 --> 00:07:43,080
account with the victim's email address

217
00:07:43,080 --> 00:07:45,120
through Google single sign-on

218
00:07:45,120 --> 00:07:47,639
in fact it is possible and this 2018 new

219
00:07:47,639 --> 00:07:49,380
snakes paper talks about this threat

220
00:07:49,380 --> 00:07:51,780
model but they make the assumption that

221
00:07:51,780 --> 00:07:53,759
the attacker has already compromised the

222
00:07:53,759 --> 00:07:55,919
victim's Google account but this is a

223
00:07:55,919 --> 00:07:57,539
very powerful attacker and we did not

224
00:07:57,539 --> 00:07:59,160
want to consider such a powerful

225
00:07:59,160 --> 00:08:01,919
attacker so we explored what are the

226
00:08:01,919 --> 00:08:04,259
other options that attacker has

227
00:08:04,259 --> 00:08:06,419
and that's when we identified the custom

228
00:08:06,419 --> 00:08:09,180
single sign-on option let me explain

229
00:08:09,180 --> 00:08:11,759
this with zoom as the case study so this

230
00:08:11,759 --> 00:08:13,800
is the login page of zoom and where you

231
00:08:13,800 --> 00:08:16,080
have the traditional single sign-on and

232
00:08:16,080 --> 00:08:17,580
you have the custom single sign-on and

233
00:08:17,580 --> 00:08:19,500
if you click on the custom single

234
00:08:19,500 --> 00:08:21,599
sign-on option you will be taken to a

235
00:08:21,599 --> 00:08:23,879
page where you have to provide your

236
00:08:23,879 --> 00:08:26,280
company's endpoint details and once you

237
00:08:26,280 --> 00:08:27,840
provide the details you will be taken to

238
00:08:27,840 --> 00:08:31,319
your company's SSO endpoint and if you

239
00:08:31,319 --> 00:08:33,360
provide the login information you will

240
00:08:33,360 --> 00:08:36,179
be redirected to a zoom account which is

241
00:08:36,179 --> 00:08:38,039
managed by your company so what this

242
00:08:38,039 --> 00:08:41,279
means is that anyone can host an IDP and

243
00:08:41,279 --> 00:08:43,620
configure it to work with zoom or a

244
00:08:43,620 --> 00:08:45,180
service that supports custom single

245
00:08:45,180 --> 00:08:47,399
sign-on so in this attack the attacker

246
00:08:47,399 --> 00:08:49,740
is going to exploit this feature so the

247
00:08:49,740 --> 00:08:51,180
attacker will create an identity

248
00:08:51,180 --> 00:08:53,459
provider and configure it to work with

249
00:08:53,459 --> 00:08:55,260
the service and then the attacker will

250
00:08:55,260 --> 00:08:58,080
create a user at the attackers IDP with

251
00:08:58,080 --> 00:08:59,820
the victim's email address and the

252
00:08:59,820 --> 00:09:01,320
attacker will initiate the single

253
00:09:01,320 --> 00:09:04,080
sign-on and in the end an account will

254
00:09:04,080 --> 00:09:06,899
be be created with the victim's email

255
00:09:06,899 --> 00:09:08,820
address so later when the victim tries

256
00:09:08,820 --> 00:09:10,500
to create an account with the same email

257
00:09:10,500 --> 00:09:12,600
address the accounts get merged but the

258
00:09:12,600 --> 00:09:13,920
victim thinks that they actually created

259
00:09:13,920 --> 00:09:15,120
the account

260
00:09:15,120 --> 00:09:16,860
and attacker maintains access to this

261
00:09:16,860 --> 00:09:18,800
account so this attack is called

262
00:09:18,800 --> 00:09:21,180
non-non-verifying IDP attack

263
00:09:21,180 --> 00:09:23,279
so we saw three different account free

264
00:09:23,279 --> 00:09:24,899
hijacking attacks in fact we identified

265
00:09:24,899 --> 00:09:26,880
two more but due to the lack of time I

266
00:09:26,880 --> 00:09:28,260
cannot get into the details but

267
00:09:28,260 --> 00:09:30,720
interested folks can refer to our paper

268
00:09:30,720 --> 00:09:34,800
or read a short msrc blog article

269
00:09:34,800 --> 00:09:36,480
so after we discovered five different

270
00:09:36,480 --> 00:09:38,459
account pre-highjacking attacks we

271
00:09:38,459 --> 00:09:40,019
wanted to measure the prevalence of

272
00:09:40,019 --> 00:09:43,019
these attacks on the top most popular

273
00:09:43,019 --> 00:09:45,360
website so we chose the Alexa Global top

274
00:09:45,360 --> 00:09:47,760
websites and we focused on the top 150

275
00:09:47,760 --> 00:09:48,600
of them

276
00:09:48,600 --> 00:09:52,200
so out of this 150 136 website supported

277
00:09:52,200 --> 00:09:54,899
account creation and out of them we

278
00:09:54,899 --> 00:09:57,240
tested 75 websites and some of them were

279
00:09:57,240 --> 00:09:58,680
skipped because they were duplicates

280
00:09:58,680 --> 00:10:02,040
like google.com and google.co.in so we

281
00:10:02,040 --> 00:10:04,200
just had to test one website and some of

282
00:10:04,200 --> 00:10:05,580
them were like unreachable and some of

283
00:10:05,580 --> 00:10:08,160
them had high requirements so out of

284
00:10:08,160 --> 00:10:11,040
these 75 websites surprisingly 35 of

285
00:10:11,040 --> 00:10:12,120
them were vulnerable to account

286
00:10:12,120 --> 00:10:14,459
pre-highjacking attacks and they include

287
00:10:14,459 --> 00:10:16,140
prominent websites like Zoom LinkedIn

288
00:10:16,140 --> 00:10:17,940
Dropbox and Instagram

289
00:10:17,940 --> 00:10:19,860
the responsibly disclosed all the

290
00:10:19,860 --> 00:10:21,420
vulnerabilities to the affected vendors

291
00:10:21,420 --> 00:10:23,160
and some of them acknowledged our

292
00:10:23,160 --> 00:10:25,339
findings and fixed the issues and

293
00:10:25,339 --> 00:10:27,839
Payless bug bounties

294
00:10:27,839 --> 00:10:29,700
so let's talk about the counter measures

295
00:10:29,700 --> 00:10:31,620
so the important counter measure here is

296
00:10:31,620 --> 00:10:33,660
about strict identifier verification so

297
00:10:33,660 --> 00:10:35,580
whenever someone creates an account or

298
00:10:35,580 --> 00:10:37,620
claims that they own an identifier the

299
00:10:37,620 --> 00:10:39,300
service should verify it before actually

300
00:10:39,300 --> 00:10:41,940
linking the identifier to the account

301
00:10:41,940 --> 00:10:43,740
there are additional defense and depth

302
00:10:43,740 --> 00:10:45,899
strategies like uh after every password

303
00:10:45,899 --> 00:10:47,640
research the service should sign out of

304
00:10:47,640 --> 00:10:49,920
past sessions and whenever there is

305
00:10:49,920 --> 00:10:51,540
account merging the user should be asked

306
00:10:51,540 --> 00:10:54,240
for consent and unverified account

307
00:10:54,240 --> 00:10:56,220
pruning which means deleting unverified

308
00:10:56,220 --> 00:10:58,500
accounts after a certain time and

309
00:10:58,500 --> 00:11:00,899
multi-factor authentication so that the

310
00:11:00,899 --> 00:11:02,519
victim will be notified every time the

311
00:11:02,519 --> 00:11:04,800
attacker logs in there are additional

312
00:11:04,800 --> 00:11:06,300
difference in depth strategies explained

313
00:11:06,300 --> 00:11:07,980
in the paper you can refer to the paper

314
00:11:07,980 --> 00:11:09,480
for more details

315
00:11:09,480 --> 00:11:11,880
so to conclude we focused on the account

316
00:11:11,880 --> 00:11:13,740
creation process of websites which is

317
00:11:13,740 --> 00:11:15,779
widely understudied and we identified

318
00:11:15,779 --> 00:11:17,399
five different account pre-highjacking

319
00:11:17,399 --> 00:11:20,040
attacks we tested 75 website top

320
00:11:20,040 --> 00:11:22,440
websites for account free hijacking and

321
00:11:22,440 --> 00:11:25,079
out of them 35 were vulnerable including

322
00:11:25,079 --> 00:11:27,660
prominent ones we responsibly disclosed

323
00:11:27,660 --> 00:11:29,220
all the vulnerabilities to the vendors

324
00:11:29,220 --> 00:11:31,200
and we also present different

325
00:11:31,200 --> 00:11:33,240
countermeasures

326
00:11:33,240 --> 00:11:36,300
so that's all I can answer some

327
00:11:36,300 --> 00:11:39,319
questions if you have some

