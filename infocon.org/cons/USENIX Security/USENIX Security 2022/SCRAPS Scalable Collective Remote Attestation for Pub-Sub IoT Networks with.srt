1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:08,780 --> 00:00:11,219
was a collaboration between the

3
00:00:11,219 --> 00:00:13,440
University of Wurzburg and the UC Irvine

4
00:00:13,440 --> 00:00:16,139
but before we jump into the topic and

5
00:00:16,139 --> 00:00:18,119
what is actually all about let me start

6
00:00:18,119 --> 00:00:20,340
with a brief motivation

7
00:00:20,340 --> 00:00:21,480
so

8
00:00:21,480 --> 00:00:24,000
iot services are constantly expanding

9
00:00:24,000 --> 00:00:26,640
from Smart Home Solutions to Smart

10
00:00:26,640 --> 00:00:29,340
factories and even whole smart cities

11
00:00:29,340 --> 00:00:32,820
and in order to realize such large-scale

12
00:00:32,820 --> 00:00:34,739
iot applications

13
00:00:34,739 --> 00:00:36,660
we are deploying millions of small

14
00:00:36,660 --> 00:00:38,700
devices everywhere throughout our daily

15
00:00:38,700 --> 00:00:39,780
lives

16
00:00:39,780 --> 00:00:41,760
to interconnect all these devices iot

17
00:00:41,760 --> 00:00:44,280
networks often opt to use asynchronous

18
00:00:44,280 --> 00:00:46,620
communication mediated by intermediary

19
00:00:46,620 --> 00:00:49,440
devices so-called brokers

20
00:00:49,440 --> 00:00:52,739
and as devices within large networks are

21
00:00:52,739 --> 00:00:55,020
usually not owned by one single entity

22
00:00:55,020 --> 00:00:58,680
but by many different stakeholders and

23
00:00:58,680 --> 00:01:01,440
they might be potentially malicious we

24
00:01:01,440 --> 00:01:03,719
have to find a solution to detect

25
00:01:03,719 --> 00:01:06,420
malicious devices and also establish

26
00:01:06,420 --> 00:01:08,760
trust between mutually mistrusting

27
00:01:08,760 --> 00:01:09,780
parties

28
00:01:09,780 --> 00:01:12,600
and one way to do so is to use remote

29
00:01:12,600 --> 00:01:14,159
attestation

30
00:01:14,159 --> 00:01:16,020
but before we go into details about

31
00:01:16,020 --> 00:01:18,299
remote attestation just let me give you

32
00:01:18,299 --> 00:01:20,640
a brief overview of Pub sub

33
00:01:20,640 --> 00:01:23,400
communication and its challenges

34
00:01:23,400 --> 00:01:26,159
so unlike traditional communication

35
00:01:26,159 --> 00:01:28,860
protocols where the devices directly

36
00:01:28,860 --> 00:01:30,360
connect in order to exchange the

37
00:01:30,360 --> 00:01:32,100
messages

38
00:01:32,100 --> 00:01:34,799
iot networks use asynchronous

39
00:01:34,799 --> 00:01:37,500
communication mediated by Brokers this

40
00:01:37,500 --> 00:01:39,540
means the device that tries to send the

41
00:01:39,540 --> 00:01:42,479
message called the publisher sends it to

42
00:01:42,479 --> 00:01:44,520
a broker who then forwards the message

43
00:01:44,520 --> 00:01:47,520
to all the devices that registers their

44
00:01:47,520 --> 00:01:49,740
interest in beforehand this registration

45
00:01:49,740 --> 00:01:52,320
is called a subscription and the devices

46
00:01:52,320 --> 00:01:54,479
therefore subscribers

47
00:01:54,479 --> 00:01:57,119
one big issue with this communication

48
00:01:57,119 --> 00:01:59,939
architecture is that we can potentially

49
00:01:59,939 --> 00:02:02,939
have malicious Brokers and as they are

50
00:02:02,939 --> 00:02:04,680
basically the backbone of our

51
00:02:04,680 --> 00:02:06,479
communication Network they are

52
00:02:06,479 --> 00:02:09,560
responsible to transmit every message

53
00:02:09,560 --> 00:02:12,720
and are capable of manipulating and

54
00:02:12,720 --> 00:02:15,000
altering them without the publisher or

55
00:02:15,000 --> 00:02:17,520
the subscriber even noticing it

56
00:02:17,520 --> 00:02:20,700
with this in mind we have to face some

57
00:02:20,700 --> 00:02:22,860
significant challenges when we want to

58
00:02:22,860 --> 00:02:26,160
apply remote adaptation to such networks

59
00:02:26,160 --> 00:02:29,160
the first one is we do not have any

60
00:02:29,160 --> 00:02:31,080
security guarantees like Integrity

61
00:02:31,080 --> 00:02:33,540
confidentiality or freshness another

62
00:02:33,540 --> 00:02:36,239
issue is asynchronous itself as

63
00:02:36,239 --> 00:02:38,640
publisher and subscriber cannot directly

64
00:02:38,640 --> 00:02:40,739
interact with one another

65
00:02:40,739 --> 00:02:43,800
a third issue is especially

66
00:02:43,800 --> 00:02:46,680
because we are talking about iot small

67
00:02:46,680 --> 00:02:49,140
resource constraint devices which means

68
00:02:49,140 --> 00:02:52,080
we usually have very low memory capacity

69
00:02:52,080 --> 00:02:55,860
we are also computationally limited and

70
00:02:55,860 --> 00:02:59,459
we have very heterogeneous devices

71
00:02:59,459 --> 00:03:01,440
with all these challenges in mind now

72
00:03:01,440 --> 00:03:04,620
let's come to remote attestation and how

73
00:03:04,620 --> 00:03:08,160
it is originally designed so

74
00:03:08,160 --> 00:03:10,860
in the original design we have one

75
00:03:10,860 --> 00:03:13,200
verifier and one proofer and the

76
00:03:13,200 --> 00:03:15,060
protocol is a challenge as response

77
00:03:15,060 --> 00:03:17,640
protocol initiated by the verifier by

78
00:03:17,640 --> 00:03:20,099
sending a random nonce to the prover who

79
00:03:20,099 --> 00:03:21,840
then as a response calculates an

80
00:03:21,840 --> 00:03:24,000
attestation evidence which is usually

81
00:03:24,000 --> 00:03:26,459
some kind of hash of the whole device

82
00:03:26,459 --> 00:03:29,459
memory he then links

83
00:03:29,459 --> 00:03:33,540
the calculated evidence to the nuns and

84
00:03:33,540 --> 00:03:35,760
sends it back to the verifier

85
00:03:35,760 --> 00:03:38,099
who then will compare the received

86
00:03:38,099 --> 00:03:40,739
evidence to a database of pre-known and

87
00:03:40,739 --> 00:03:42,420
good values

88
00:03:42,420 --> 00:03:44,819
so far so good but when you think about

89
00:03:44,819 --> 00:03:48,360
iot large networks we will face some

90
00:03:48,360 --> 00:03:52,860
significant issues the first one is this

91
00:03:52,860 --> 00:03:55,860
approach is very poor scalable

92
00:03:55,860 --> 00:03:58,500
so one verify device would have to

93
00:03:58,500 --> 00:04:01,260
attest any other proof of device within

94
00:04:01,260 --> 00:04:03,420
our Network which will end up in

95
00:04:03,420 --> 00:04:05,340
quadratic complexity

96
00:04:05,340 --> 00:04:08,940
another problem is that this scheme is

97
00:04:08,940 --> 00:04:12,120
built upon symmetric pre-shared keys

98
00:04:12,120 --> 00:04:13,920
which would require us to install

99
00:04:13,920 --> 00:04:16,738
complex Key Management Systems

100
00:04:16,738 --> 00:04:19,320
another problem is asynchronous

101
00:04:19,320 --> 00:04:22,260
communication in Pub sub networks and

102
00:04:22,260 --> 00:04:23,699
the synchronous one that is usually

103
00:04:23,699 --> 00:04:25,560
required by traditional remote

104
00:04:25,560 --> 00:04:29,340
attestation so in Pub sub networks we do

105
00:04:29,340 --> 00:04:32,220
not have synchronous communication

106
00:04:32,220 --> 00:04:34,560
and an additional problem is that

107
00:04:34,560 --> 00:04:36,360
proofer and verifier have to be

108
00:04:36,360 --> 00:04:38,460
available the whole time throughout the

109
00:04:38,460 --> 00:04:40,860
other station process which might be

110
00:04:40,860 --> 00:04:42,720
difficult especially if you think about

111
00:04:42,720 --> 00:04:45,660
sleeping devices that go into low bar

112
00:04:45,660 --> 00:04:48,479
low power or battery saving modes in

113
00:04:48,479 --> 00:04:51,419
order to preserve the durability and

114
00:04:51,419 --> 00:04:54,000
once again the device hit the rigidity

115
00:04:54,000 --> 00:04:56,580
might be a limitating factor

116
00:04:56,580 --> 00:04:59,400
to overcome some of these limitations

117
00:04:59,400 --> 00:05:01,620
the so-called collaborative remote

118
00:05:01,620 --> 00:05:03,780
attestation schemes emerge and we

119
00:05:03,780 --> 00:05:05,400
classified them into two different

120
00:05:05,400 --> 00:05:08,340
categories the first one being schemes

121
00:05:08,340 --> 00:05:10,500
that are considering one verifier and

122
00:05:10,500 --> 00:05:13,259
many approvers this means we have one

123
00:05:13,259 --> 00:05:15,900
verifier who can attest a whole network

124
00:05:15,900 --> 00:05:18,300
of proofer devices at once

125
00:05:18,300 --> 00:05:21,120
this is usually done by having some kind

126
00:05:21,120 --> 00:05:23,520
of predefined structure like a tree or a

127
00:05:23,520 --> 00:05:24,960
ring structure

128
00:05:24,960 --> 00:05:26,759
the benefit of this it obviously

129
00:05:26,759 --> 00:05:29,639
increases the scalability but it also

130
00:05:29,639 --> 00:05:32,580
has some weaknesses especially when you

131
00:05:32,580 --> 00:05:34,979
think about on-demand attestation so one

132
00:05:34,979 --> 00:05:37,440
verifier is usually not possible to

133
00:05:37,440 --> 00:05:40,919
attest a chosen prover device

134
00:05:40,919 --> 00:05:43,800
and only this device but has to stick to

135
00:05:43,800 --> 00:05:45,660
the structure so for example if you

136
00:05:45,660 --> 00:05:47,759
think about the tree structure he only

137
00:05:47,759 --> 00:05:50,039
can attach the whole tree or at least

138
00:05:50,039 --> 00:05:52,320
one branch of it

139
00:05:52,320 --> 00:05:54,780
this also is an issue when you talk

140
00:05:54,780 --> 00:05:57,539
about heterogeneity as it usually works

141
00:05:57,539 --> 00:06:00,000
fine as long as we have

142
00:06:00,000 --> 00:06:02,340
and the same kind of devices in our

143
00:06:02,340 --> 00:06:04,560
networks and we can stick to the

144
00:06:04,560 --> 00:06:06,840
predefined structure but it will make us

145
00:06:06,840 --> 00:06:09,780
very unflexible if we want to vary the

146
00:06:09,780 --> 00:06:12,479
device types and also maybe have some

147
00:06:12,479 --> 00:06:15,000
devices that are not located at the same

148
00:06:15,000 --> 00:06:18,180
place throughout the whole durability

149
00:06:18,180 --> 00:06:19,560
and

150
00:06:19,560 --> 00:06:21,960
now if you especially think about Pub

151
00:06:21,960 --> 00:06:24,120
sub environments we have like the

152
00:06:24,120 --> 00:06:26,340
biggest downfalls of those schemes as

153
00:06:26,340 --> 00:06:28,740
they are not designed to consider

154
00:06:28,740 --> 00:06:31,979
asynchronous communication and also do

155
00:06:31,979 --> 00:06:34,560
not work for sleeping devices at all

156
00:06:34,560 --> 00:06:36,180
the second category

157
00:06:36,180 --> 00:06:37,979
of collaborative remote attestation

158
00:06:37,979 --> 00:06:40,860
schemes are the so-called many verifier

159
00:06:40,860 --> 00:06:43,740
and many proofer schemes as the name

160
00:06:43,740 --> 00:06:46,199
already tells we do not have one verify

161
00:06:46,199 --> 00:06:48,840
anymore but we can have many of them a

162
00:06:48,840 --> 00:06:51,479
testing simultaneously many improval

163
00:06:51,479 --> 00:06:52,380
devices

164
00:06:52,380 --> 00:06:55,620
unlike the one verifier many approval

165
00:06:55,620 --> 00:06:58,380
approaches we do not have to rely on a

166
00:06:58,380 --> 00:07:00,120
certain pre-fine structure

167
00:07:00,120 --> 00:07:02,819
which gives us some benefits but also

168
00:07:02,819 --> 00:07:04,740
has some downfalls especially when we

169
00:07:04,740 --> 00:07:07,819
talk about scalability

170
00:07:07,919 --> 00:07:11,280
um the biggest problem here is that the

171
00:07:11,280 --> 00:07:13,860
verifiers cannot reuse attestation

172
00:07:13,860 --> 00:07:16,800
conducted by other verifiers as this

173
00:07:16,800 --> 00:07:19,620
would require them to touch to trust one

174
00:07:19,620 --> 00:07:21,419
another

175
00:07:21,419 --> 00:07:23,639
but as I already mentioned we have some

176
00:07:23,639 --> 00:07:25,620
benefits from these approaches as we

177
00:07:25,620 --> 00:07:26,280
have

178
00:07:26,280 --> 00:07:28,440
obviously easily on demand attestation

179
00:07:28,440 --> 00:07:31,620
as the verifier does not have to rely on

180
00:07:31,620 --> 00:07:33,720
a structure just can access the approval

181
00:07:33,720 --> 00:07:36,240
device and I test it whenever he wants

182
00:07:36,240 --> 00:07:37,919
and it also works much better for

183
00:07:37,919 --> 00:07:40,139
heterogeneity as we can deploy many

184
00:07:40,139 --> 00:07:42,539
verified devices like for example one

185
00:07:42,539 --> 00:07:45,720
verify device for every device of iotnet

186
00:07:45,720 --> 00:07:48,060
iot device in our Network

187
00:07:48,060 --> 00:07:50,699
but once again when we are coming to Pub

188
00:07:50,699 --> 00:07:53,639
sub communication we have the issue that

189
00:07:53,639 --> 00:07:56,819
also those schemes do not work for

190
00:07:56,819 --> 00:07:59,099
asynchronous communication and also do

191
00:07:59,099 --> 00:08:02,520
not have any consideration regarding

192
00:08:02,520 --> 00:08:04,740
sleeping devices

193
00:08:04,740 --> 00:08:08,340
to overcome those limitations our idea

194
00:08:08,340 --> 00:08:12,419
was to create a hybrid approach which

195
00:08:12,419 --> 00:08:15,720
basically merges the two previously

196
00:08:15,720 --> 00:08:18,720
discussed categories

197
00:08:18,720 --> 00:08:21,900
but how can we do this so the key

198
00:08:21,900 --> 00:08:24,419
component of our hybrid architecture is

199
00:08:24,419 --> 00:08:26,940
a smart contract based proxy verifier

200
00:08:26,940 --> 00:08:29,220
who has by the nature of a smart

201
00:08:29,220 --> 00:08:32,820
contract some very useful benefits as it

202
00:08:32,820 --> 00:08:35,820
is always online it never sleeps and is

203
00:08:35,820 --> 00:08:37,919
therefore always accessible for

204
00:08:37,919 --> 00:08:39,539
attestation messages

205
00:08:39,539 --> 00:08:42,839
and it is trustless so we do not have to

206
00:08:42,839 --> 00:08:44,459
put any additional trust assumption

207
00:08:44,459 --> 00:08:46,440
apart from the typical blockchain

208
00:08:46,440 --> 00:08:48,240
assumptions

209
00:08:48,240 --> 00:08:51,180
so what does this give us now so the

210
00:08:51,180 --> 00:08:53,220
idea is to use this proxy verifier smart

211
00:08:53,220 --> 00:08:56,040
contract to attest the variable fire

212
00:08:56,040 --> 00:08:58,800
devices and there's a distrustless the

213
00:08:58,800 --> 00:09:02,459
verifier can now reuse the attestations

214
00:09:02,459 --> 00:09:06,420
conducted by other verifiers which makes

215
00:09:06,420 --> 00:09:09,300
those Solutions obviously

216
00:09:09,300 --> 00:09:11,940
much more scalable

217
00:09:11,940 --> 00:09:15,300
but unfortunately instantiating a smart

218
00:09:15,300 --> 00:09:18,540
contract with such capabilities isn't

219
00:09:18,540 --> 00:09:21,000
really straightforward so when we were

220
00:09:21,000 --> 00:09:22,440
creating this proxy verifier smart

221
00:09:22,440 --> 00:09:24,480
contract we were facing three major

222
00:09:24,480 --> 00:09:26,339
technical challenges

223
00:09:26,339 --> 00:09:28,740
so the first one is by nature smart

224
00:09:28,740 --> 00:09:31,080
contracts are passive entities which

225
00:09:31,080 --> 00:09:33,180
means unlike the verifier we had before

226
00:09:33,180 --> 00:09:35,760
it it cannot proactively trigger the

227
00:09:35,760 --> 00:09:37,320
attestation

228
00:09:37,320 --> 00:09:40,560
but we were able to solve this by

229
00:09:40,560 --> 00:09:43,440
switching to self attestation triggered

230
00:09:43,440 --> 00:09:46,080
by the iot devices themselves

231
00:09:46,080 --> 00:09:49,200
a second issue is that smart contracts

232
00:09:49,200 --> 00:09:51,300
are public so everyone can look at them

233
00:09:51,300 --> 00:09:54,899
and this obviously results in no

234
00:09:54,899 --> 00:09:57,899
confidentiality so we cannot save any or

235
00:09:57,899 --> 00:10:00,720
store any pre-shared keys in them

236
00:10:00,720 --> 00:10:03,480
to overcome these limitations we swap

237
00:10:03,480 --> 00:10:06,120
towards public key cryptography for our

238
00:10:06,120 --> 00:10:09,420
attestation evidences and a third issue

239
00:10:09,420 --> 00:10:10,860
is

240
00:10:10,860 --> 00:10:13,680
because of the poor source of randomness

241
00:10:13,680 --> 00:10:17,300
of smart contracts we cannot actually

242
00:10:17,300 --> 00:10:19,740
effectively Generate random nonsense

243
00:10:19,740 --> 00:10:21,540
which are required in order to have a

244
00:10:21,540 --> 00:10:23,519
proper replay protection to overcome

245
00:10:23,519 --> 00:10:24,959
this limitation as we're using

246
00:10:24,959 --> 00:10:26,940
blockchain we can use the blockchain

247
00:10:26,940 --> 00:10:29,580
height as an answer freshness

248
00:10:29,580 --> 00:10:32,399
so how does all this now come together

249
00:10:32,399 --> 00:10:34,500
let's have a look at the actual design

250
00:10:34,500 --> 00:10:36,300
of scraps

251
00:10:36,300 --> 00:10:38,519
so our system model includes six

252
00:10:38,519 --> 00:10:39,779
different entities

253
00:10:39,779 --> 00:10:42,060
the manufacturer and its corresponding

254
00:10:42,060 --> 00:10:44,640
smart contract approver and a verify

255
00:10:44,640 --> 00:10:47,040
device and they already briefly

256
00:10:47,040 --> 00:10:49,019
discussed proxyverifier smart contract

257
00:10:49,019 --> 00:10:51,360
and the broker as we're talking about

258
00:10:51,360 --> 00:10:54,000
pops up environments in the first step

259
00:10:54,000 --> 00:10:56,100
the manufacturer who manufactures our

260
00:10:56,100 --> 00:10:58,320
approval devices will upload the

261
00:10:58,320 --> 00:11:00,540
previous connect configuration to is to

262
00:11:00,540 --> 00:11:03,720
its smart contract and also deploys a

263
00:11:03,720 --> 00:11:06,240
chosen attestation scheme on the Provo

264
00:11:06,240 --> 00:11:07,500
device itself

265
00:11:07,500 --> 00:11:11,459
once the prover is deployed he just

266
00:11:11,459 --> 00:11:13,440
simply registers itself at the proxy

267
00:11:13,440 --> 00:11:15,480
verifier smart contract and can from

268
00:11:15,480 --> 00:11:17,519
there on submit other station evidences

269
00:11:17,519 --> 00:11:19,860
and whenever an attestation is submitted

270
00:11:19,860 --> 00:11:22,920
the proxy verifier will verify them by

271
00:11:22,920 --> 00:11:24,240
querying the manufacturer's smart

272
00:11:24,240 --> 00:11:26,279
contract and storing the outcome to the

273
00:11:26,279 --> 00:11:28,980
blockchain now we have the benefits that

274
00:11:28,980 --> 00:11:32,339
every verifier can simply query

275
00:11:32,339 --> 00:11:34,980
the blockchain or the smart contract and

276
00:11:34,980 --> 00:11:37,620
request the results of our attestation

277
00:11:37,620 --> 00:11:40,680
evidence with no need of having to

278
00:11:40,680 --> 00:11:42,540
actually contact the approval device or

279
00:11:42,540 --> 00:11:45,120
even a testing it anymore

280
00:11:45,120 --> 00:11:47,760
to show the capabilities of scraps we

281
00:11:47,760 --> 00:11:51,120
have evaluated it against Legend to the

282
00:11:51,120 --> 00:11:53,820
best of our knowledge only state of the

283
00:11:53,820 --> 00:11:55,800
art many prover and many verifier

284
00:11:55,800 --> 00:11:57,959
attestation scheme with an open source

285
00:11:57,959 --> 00:12:00,540
implementation so the first evaluation

286
00:12:00,540 --> 00:12:02,459
we were looking at analyzes the

287
00:12:02,459 --> 00:12:04,980
scalability of both systems well during

288
00:12:04,980 --> 00:12:07,440
our testing scraps did not show any

289
00:12:07,440 --> 00:12:11,279
limitations for up to 25 000 devices let

290
00:12:11,279 --> 00:12:13,440
you had already reached its peak at

291
00:12:13,440 --> 00:12:16,019
somewhere around 800 devices and

292
00:12:16,019 --> 00:12:18,300
couldn't scale any further

293
00:12:18,300 --> 00:12:20,160
the second evaluation we want to look at

294
00:12:20,160 --> 00:12:23,760
deals with the actual benefit of using

295
00:12:23,760 --> 00:12:26,459
such a scheme here we have to look at

296
00:12:26,459 --> 00:12:28,260
the hit percentage as our main

297
00:12:28,260 --> 00:12:31,019
performance measure it gives us the

298
00:12:31,019 --> 00:12:32,899
amount of queries for attestation

299
00:12:32,899 --> 00:12:35,579
evidences that could be answered by

300
00:12:35,579 --> 00:12:37,740
using one of the systems without having

301
00:12:37,740 --> 00:12:40,800
to run attestation once again one could

302
00:12:40,800 --> 00:12:43,079
potentially compare it to a cash hit

303
00:12:43,079 --> 00:12:46,079
ratio in a cache-based system

304
00:12:46,079 --> 00:12:48,060
here we once again have the picture that

305
00:12:48,060 --> 00:12:52,019
for up to 1000 devices both schemes work

306
00:12:52,019 --> 00:12:54,839
very well with scraps being slightly

307
00:12:54,839 --> 00:12:57,740
superior but afterwards Legend

308
00:12:57,740 --> 00:13:00,600
significantly drops while scraps remains

309
00:13:00,600 --> 00:13:02,579
its high capabilities

310
00:13:02,579 --> 00:13:04,860
to wrap things up we have to look at

311
00:13:04,860 --> 00:13:07,740
what we achieved so first of all we were

312
00:13:07,740 --> 00:13:10,200
able to create a hybrid collaborative

313
00:13:10,200 --> 00:13:12,660
remote authentication scheme by merging

314
00:13:12,660 --> 00:13:14,760
the previous ones

315
00:13:14,760 --> 00:13:18,660
which allows us to get the benefits of

316
00:13:18,660 --> 00:13:21,180
the individual remote attestation

317
00:13:21,180 --> 00:13:22,500
categories

318
00:13:22,500 --> 00:13:24,360
but also

319
00:13:24,360 --> 00:13:26,700
we do not stick to the limitations of

320
00:13:26,700 --> 00:13:29,459
the previous ones before and also with

321
00:13:29,459 --> 00:13:32,100
our proxy verifier smart contract we are

322
00:13:32,100 --> 00:13:34,560
we're able to create the first solution

323
00:13:34,560 --> 00:13:37,980
suitable for Pub sub environments

324
00:13:37,980 --> 00:13:40,260
thanks for attending this talk I'm

325
00:13:40,260 --> 00:13:43,760
really looking forward to it Kristen

