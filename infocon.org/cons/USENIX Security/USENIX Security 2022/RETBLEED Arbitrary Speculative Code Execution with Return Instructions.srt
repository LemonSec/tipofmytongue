1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:12,500 --> 00:00:15,540
speculative code execution work carried

3
00:00:15,540 --> 00:00:18,720
out by me and my professor kavirusavi we

4
00:00:18,720 --> 00:00:20,400
are from the Comstock group with h

5
00:00:20,400 --> 00:00:22,500
turric

6
00:00:22,500 --> 00:00:26,220
um so yeah return like like

7
00:00:26,220 --> 00:00:26,880
um

8
00:00:26,880 --> 00:00:28,500
yeah brush Target injection on return

9
00:00:28,500 --> 00:00:30,000
instructions undermine some of our

10
00:00:30,000 --> 00:00:32,520
defenses and so that allows like an

11
00:00:32,520 --> 00:00:34,200
unprivileged attacker to they can break

12
00:00:34,200 --> 00:00:36,960
only slower they can just dump a

13
00:00:36,960 --> 00:00:39,180
privileged memory from

14
00:00:39,180 --> 00:00:42,059
yeah from the corner so that's of course

15
00:00:42,059 --> 00:00:44,340
a problem so I hope you agree with that

16
00:00:44,340 --> 00:00:45,180
so

17
00:00:45,180 --> 00:00:48,539
this instruction maybe you have seen

18
00:00:48,539 --> 00:00:51,960
uh this is x86 in the ATT syntax which

19
00:00:51,960 --> 00:00:54,780
nobody really likes but this uh is

20
00:00:54,780 --> 00:00:55,860
interesting because it's an indirect

21
00:00:55,860 --> 00:00:57,660
branch and it has this nice property

22
00:00:57,660 --> 00:00:58,920
that you can have multiple different

23
00:00:58,920 --> 00:01:02,219
branch targets depending on the state of

24
00:01:02,219 --> 00:01:04,260
the machine and I say the state of the

25
00:01:04,260 --> 00:01:05,339
machine because they're talking about

26
00:01:05,339 --> 00:01:07,979
the speculative Branch Target that it's

27
00:01:07,979 --> 00:01:10,619
that it gets executed before the

28
00:01:10,619 --> 00:01:12,960
register is actually potentially known

29
00:01:12,960 --> 00:01:14,939
so a few years ago researchers found

30
00:01:14,939 --> 00:01:16,680
that they can actually influence this

31
00:01:16,680 --> 00:01:19,799
indirect branch and to make it execute

32
00:01:19,799 --> 00:01:21,479
code from some other location where it's

33
00:01:21,479 --> 00:01:22,979
not supposed to execute under the

34
00:01:22,979 --> 00:01:26,040
transiently then so on the speculation

35
00:01:26,040 --> 00:01:29,280
and this is a spectator with using

36
00:01:29,280 --> 00:01:30,840
Branch Target injection then

37
00:01:30,840 --> 00:01:32,939
so that's of course not very good

38
00:01:32,939 --> 00:01:34,680
because we have a lot of these branches

39
00:01:34,680 --> 00:01:37,320
in the kernel mostly indirect calls of

40
00:01:37,320 --> 00:01:39,180
course but yeah we have lots of these so

41
00:01:39,180 --> 00:01:40,680
there were discussions on how to

42
00:01:40,680 --> 00:01:44,700
mitigate this back in 2018 and

43
00:01:44,700 --> 00:01:47,939
they came up with this smart idea that

44
00:01:47,939 --> 00:01:49,979
so this instruction is bad so let's just

45
00:01:49,979 --> 00:01:51,479
get rid of this instruction and we can

46
00:01:51,479 --> 00:01:54,060
use returns instead because returns are

47
00:01:54,060 --> 00:01:55,920
essentially they are like semantically

48
00:01:55,920 --> 00:01:58,680
they do an indirect jump and they are

49
00:01:58,680 --> 00:02:00,119
essentially indirect jump used with a

50
00:02:00,119 --> 00:02:02,460
pop from the stack so with this they

51
00:02:02,460 --> 00:02:04,920
built a construct called a red bullion

52
00:02:04,920 --> 00:02:06,840
so this is what we are using in manual

53
00:02:06,840 --> 00:02:08,160
for kernels

54
00:02:08,160 --> 00:02:10,560
and I have these similar properties they

55
00:02:10,560 --> 00:02:12,720
have multiple different targets Branch

56
00:02:12,720 --> 00:02:14,700
Target and depending on the state of the

57
00:02:14,700 --> 00:02:16,440
machine or where you come from in the

58
00:02:16,440 --> 00:02:18,300
control flow so we're wondering if you

59
00:02:18,300 --> 00:02:20,879
could do the same on returns and that's

60
00:02:20,879 --> 00:02:23,340
why I'm here today because we can do

61
00:02:23,340 --> 00:02:25,319
Branch Target injection on the top of

62
00:02:25,319 --> 00:02:27,360
return instructions

63
00:02:27,360 --> 00:02:30,120
so in this Spectra attacks there are

64
00:02:30,120 --> 00:02:32,040
usually like they're made of three

65
00:02:32,040 --> 00:02:33,420
ingredients there's a speculation

66
00:02:33,420 --> 00:02:35,459
primitive in our case there's a return

67
00:02:35,459 --> 00:02:37,620
and this is in the in the execution

68
00:02:37,620 --> 00:02:40,020
domain of the victim then so

69
00:02:40,020 --> 00:02:41,340
um

70
00:02:41,340 --> 00:02:43,680
and the attacker would choose a return

71
00:02:43,680 --> 00:02:45,120
where there is like some interesting

72
00:02:45,120 --> 00:02:46,860
information available like some secret

73
00:02:46,860 --> 00:02:49,500
pointer and also usually

74
00:02:49,500 --> 00:02:51,420
some shared memory pointer and I use

75
00:02:51,420 --> 00:02:54,959
this then so they here they would hijack

76
00:02:54,959 --> 00:02:56,700
the speculative control flow and take it

77
00:02:56,700 --> 00:02:58,800
to something that we refer to as a

78
00:02:58,800 --> 00:03:01,250
disclosure Gadget and and here then

79
00:03:01,250 --> 00:03:01,739
[Music]

80
00:03:01,739 --> 00:03:02,459
um

81
00:03:02,459 --> 00:03:05,099
this secret is being a dereferenced and

82
00:03:05,099 --> 00:03:06,900
then used in a secret dependent access

83
00:03:06,900 --> 00:03:09,360
in this child memory buffer and this

84
00:03:09,360 --> 00:03:11,040
allows the attacker then in his own

85
00:03:11,040 --> 00:03:13,319
execution domain to infer what the

86
00:03:13,319 --> 00:03:15,540
secret was by just accessing this and

87
00:03:15,540 --> 00:03:17,640
measuring how fast they can access it so

88
00:03:17,640 --> 00:03:20,040
they will find what has been recently

89
00:03:20,040 --> 00:03:21,420
accessed because it's going to be a bit

90
00:03:21,420 --> 00:03:24,900
faster so the question is uh well so

91
00:03:24,900 --> 00:03:27,120
we're not going to focus on these two

92
00:03:27,120 --> 00:03:29,159
mostly the speculation Primitives so the

93
00:03:29,159 --> 00:03:30,239
question is how can we do this on

94
00:03:30,239 --> 00:03:33,000
returns because as many of us know

95
00:03:33,000 --> 00:03:35,220
returns have a dedicated prediction

96
00:03:35,220 --> 00:03:37,860
mechanism so they usually go over the

97
00:03:37,860 --> 00:03:39,780
return stack buffer or the RSB so on

98
00:03:39,780 --> 00:03:41,760
Intel we have this thing but it has like

99
00:03:41,760 --> 00:03:43,200
a limited size so if you have like a

100
00:03:43,200 --> 00:03:45,000
deep call stack like with the function a

101
00:03:45,000 --> 00:03:46,799
calling function B calling factor C and

102
00:03:46,799 --> 00:03:49,440
so on uh it's going to be all fine as

103
00:03:49,440 --> 00:03:51,540
you go deeper into the call stack

104
00:03:51,540 --> 00:03:52,140
um

105
00:03:52,140 --> 00:03:53,879
but at some point obviously this is

106
00:03:53,879 --> 00:03:56,519
going to get full and what happens then

107
00:03:56,519 --> 00:03:58,200
well then we start like replacing all

108
00:03:58,200 --> 00:04:00,540
the entries then and this is still all

109
00:04:00,540 --> 00:04:01,980
fine so when we return from this deep

110
00:04:01,980 --> 00:04:03,840
call stack um

111
00:04:03,840 --> 00:04:05,879
we just use these RSP entries we return

112
00:04:05,879 --> 00:04:07,980
fast but at some point because the call

113
00:04:07,980 --> 00:04:09,180
stack is deeper than the number of

114
00:04:09,180 --> 00:04:10,920
returns that we're having uh return

115
00:04:10,920 --> 00:04:12,840
targets that we have in the RSB and

116
00:04:12,840 --> 00:04:14,220
we're going to have this state where we

117
00:04:14,220 --> 00:04:16,440
don't have the RSP is empty so at that

118
00:04:16,440 --> 00:04:18,720
State uh the CPU only inter would fall

119
00:04:18,720 --> 00:04:22,079
back turn RSP alternative predictor

120
00:04:22,079 --> 00:04:24,300
um and we find that this is actually a

121
00:04:24,300 --> 00:04:26,940
brush Target buffer and this is also the

122
00:04:26,940 --> 00:04:29,580
one that has been hijacked for uh the

123
00:04:29,580 --> 00:04:31,380
yeah

124
00:04:31,380 --> 00:04:35,400
and let me know so on AMD they also have

125
00:04:35,400 --> 00:04:37,620
an RSB however there it works a little

126
00:04:37,620 --> 00:04:39,600
bit differently so if the position of

127
00:04:39,600 --> 00:04:43,440
this returns uh collides with a with an

128
00:04:43,440 --> 00:04:47,940
indirect Branch so they they will

129
00:04:47,940 --> 00:04:50,100
get the same

130
00:04:50,100 --> 00:04:51,900
B2B index which I'm going to talk about

131
00:04:51,900 --> 00:04:54,600
soon they the AMD predictor is just

132
00:04:54,600 --> 00:04:56,460
gonna go into use the brush Target

133
00:04:56,460 --> 00:04:57,960
buffer entry here

134
00:04:57,960 --> 00:05:00,600
and so in summary that means that on on

135
00:05:00,600 --> 00:05:02,220
Intel return behaves like indirect jump

136
00:05:02,220 --> 00:05:04,979
when the RSP is empty and we can get to

137
00:05:04,979 --> 00:05:08,100
that with a deep core stack on AMD and

138
00:05:08,100 --> 00:05:10,440
The Return base like an indirect jump if

139
00:05:10,440 --> 00:05:11,940
there is a B2B prediction for this

140
00:05:11,940 --> 00:05:12,960
location

141
00:05:12,960 --> 00:05:15,000
so in this we can get by training with

142
00:05:15,000 --> 00:05:16,919
an indirect Branch

143
00:05:16,919 --> 00:05:17,639
um

144
00:05:17,639 --> 00:05:19,020
so we want to show that this is actually

145
00:05:19,020 --> 00:05:21,360
a security issue so with that we want to

146
00:05:21,360 --> 00:05:22,800
as an unprevised user leak information

147
00:05:22,800 --> 00:05:24,780
from the kernel then and for that we

148
00:05:24,780 --> 00:05:27,240
need to have a few things so we need to

149
00:05:27,240 --> 00:05:29,039
know how the poison the B2B at the right

150
00:05:29,039 --> 00:05:30,900
location and we need to have a

151
00:05:30,900 --> 00:05:34,199
vulnerable return in the kernel and then

152
00:05:34,199 --> 00:05:37,860
we need to inject a branch Target in the

153
00:05:37,860 --> 00:05:39,960
kernel from user space so these three

154
00:05:39,960 --> 00:05:42,240
we're going to look at a little bit we

155
00:05:42,240 --> 00:05:43,620
call this cross-published by astoric

156
00:05:43,620 --> 00:05:45,060
injection

157
00:05:45,060 --> 00:05:48,600
um so this B2B thing is providing the

158
00:05:48,600 --> 00:05:51,180
branch prediction unit the BPU with yeah

159
00:05:51,180 --> 00:05:53,100
the predictions where the predicted

160
00:05:53,100 --> 00:05:55,020
targets so that this indirect jump can

161
00:05:55,020 --> 00:05:57,240
now like choose the right Branch Target

162
00:05:57,240 --> 00:06:00,180
to use here and it chooses the entry

163
00:06:00,180 --> 00:06:01,680
from taking into account the history

164
00:06:01,680 --> 00:06:03,840
that you took to get to this indirect

165
00:06:03,840 --> 00:06:05,300
branch and also the program counter

166
00:06:05,300 --> 00:06:06,360
[Music]

167
00:06:06,360 --> 00:06:08,100
here so with these two you can form a

168
00:06:08,100 --> 00:06:10,199
bit B index unless you select the right

169
00:06:10,199 --> 00:06:12,479
entry here then so each of these cell

170
00:06:12,479 --> 00:06:13,800
here then represents like a branch

171
00:06:13,800 --> 00:06:15,300
Target

172
00:06:15,300 --> 00:06:16,620
um so what an attack you would like to

173
00:06:16,620 --> 00:06:17,880
do they would like to find some history

174
00:06:17,880 --> 00:06:21,419
and or some program counter such that uh

175
00:06:21,419 --> 00:06:23,580
it turns into the same index and

176
00:06:23,580 --> 00:06:25,620
therefore overrides the speed entry so

177
00:06:25,620 --> 00:06:28,620
this is the poisoning or Collision

178
00:06:28,620 --> 00:06:29,819
um

179
00:06:29,819 --> 00:06:32,280
so this is known on Intel since the old

180
00:06:32,280 --> 00:06:34,080
Specter paper but we were looking at

181
00:06:34,080 --> 00:06:38,400
this on AMD and we found that there we

182
00:06:38,400 --> 00:06:39,900
only need to take into account the last

183
00:06:39,900 --> 00:06:41,520
Branch destination and the program

184
00:06:41,520 --> 00:06:43,080
counter and so the last batch

185
00:06:43,080 --> 00:06:44,160
destination you can think of the

186
00:06:44,160 --> 00:06:45,660
beginning of a basic block and then the

187
00:06:45,660 --> 00:06:46,800
program counter is actually with a

188
00:06:46,800 --> 00:06:48,419
branch Source the next Branch source is

189
00:06:48,419 --> 00:06:49,740
so that's like abrasive block so we

190
00:06:49,740 --> 00:06:52,319
think of it like that and so in order to

191
00:06:52,319 --> 00:06:54,060
find like a collision then we just

192
00:06:54,060 --> 00:06:57,000
create a an attacker's basic block that

193
00:06:57,000 --> 00:06:59,460
is the same will you just flip some bit

194
00:06:59,460 --> 00:07:01,020
of the original address so we get it at

195
00:07:01,020 --> 00:07:03,960
a new location and then we just yeah try

196
00:07:03,960 --> 00:07:05,400
around until we get the collision and

197
00:07:05,400 --> 00:07:07,919
eventually uh we we find this if you

198
00:07:07,919 --> 00:07:09,360
flip two or more bits we can actually

199
00:07:09,360 --> 00:07:11,160
get collisions that follows this

200
00:07:11,160 --> 00:07:12,960
combinational logic

201
00:07:12,960 --> 00:07:14,699
and yeah this is all in the paper so

202
00:07:14,699 --> 00:07:15,900
please have a look if you're interested

203
00:07:15,900 --> 00:07:17,400
in that

204
00:07:17,400 --> 00:07:18,600
um so next we need to find like a

205
00:07:18,600 --> 00:07:20,759
vulnerable return in the kernel so we

206
00:07:20,759 --> 00:07:23,160
want to make a Cisco it leads to a deep

207
00:07:23,160 --> 00:07:24,539
calls like in the kernel so that we can

208
00:07:24,539 --> 00:07:27,500
do this Branch Target injection

209
00:07:28,139 --> 00:07:31,080
um so to do so to find this we use the

210
00:07:31,080 --> 00:07:32,819
Linux testing projects it has a test

211
00:07:32,819 --> 00:07:35,639
suit for ciscolls it produces it has all

212
00:07:35,639 --> 00:07:37,620
these test cases and for each of these

213
00:07:37,620 --> 00:07:40,020
test cases we use f Trace to create the

214
00:07:40,020 --> 00:07:41,340
function graphs that we can later

215
00:07:41,340 --> 00:07:43,080
Traverse and find locations where they

216
00:07:43,080 --> 00:07:46,500
have this RSB to B2B fallback so and

217
00:07:46,500 --> 00:07:48,120
then we have this list of locations and

218
00:07:48,120 --> 00:07:49,680
then we go over those again and we do

219
00:07:49,680 --> 00:07:51,539
some kind of poor Mass stains tracking

220
00:07:51,539 --> 00:07:54,060
in order to find like what registers or

221
00:07:54,060 --> 00:07:57,599
memory that we control at this location

222
00:07:57,599 --> 00:07:59,340
so an interview we could find like a

223
00:07:59,340 --> 00:08:01,080
with this test suit we could find like

224
00:08:01,080 --> 00:08:03,360
one like yeah a thousand vulnerable

225
00:08:03,360 --> 00:08:05,819
returns like this however many many of

226
00:08:05,819 --> 00:08:07,440
these cases we didn't have like control

227
00:08:07,440 --> 00:08:09,240
over our full registers often we just

228
00:08:09,240 --> 00:08:12,479
had control over a user space pointer

229
00:08:12,479 --> 00:08:14,759
um however if we dereferenced we went

230
00:08:14,759 --> 00:08:16,680
like one indirection extra we will find

231
00:08:16,680 --> 00:08:17,940
that we have control of a buffer

232
00:08:17,940 --> 00:08:20,280
contents like a message that you pass in

233
00:08:20,280 --> 00:08:21,660
like I said message this call or

234
00:08:21,660 --> 00:08:23,160
something like this so this is what

235
00:08:23,160 --> 00:08:25,680
we're using on Intel on AMD all returns

236
00:08:25,680 --> 00:08:27,180
are vulnerable so we could just select

237
00:08:27,180 --> 00:08:29,460
all of our choice we choose M map for

238
00:08:29,460 --> 00:08:31,259
example the baby control six registers

239
00:08:31,259 --> 00:08:33,179
which is great

240
00:08:33,179 --> 00:08:34,799
and then the third thing that we need is

241
00:08:34,799 --> 00:08:37,020
like this cross-privileged uh rash

242
00:08:37,020 --> 00:08:38,760
Target injection and so we want this

243
00:08:38,760 --> 00:08:40,919
Cisco to lead to

244
00:08:40,919 --> 00:08:42,479
some code in the corner where we can

245
00:08:42,479 --> 00:08:44,580
hijack the speculative control flow then

246
00:08:44,580 --> 00:08:46,440
and so the question is how can we do

247
00:08:46,440 --> 00:08:47,160
that

248
00:08:47,160 --> 00:08:48,779
um and it turns out to be not very

249
00:08:48,779 --> 00:08:50,279
complicated we just need to have some

250
00:08:50,279 --> 00:08:52,380
colliding code in user space that just

251
00:08:52,380 --> 00:08:54,000
branches into current memory and that's

252
00:08:54,000 --> 00:08:57,240
of course illegal you cannot do that it

253
00:08:57,240 --> 00:08:59,820
raises a page fault but nonetheless it

254
00:08:59,820 --> 00:09:02,160
will update the bachelor buffer

255
00:09:02,160 --> 00:09:04,500
so now we have these three

256
00:09:04,500 --> 00:09:05,040
um

257
00:09:05,040 --> 00:09:06,600
requirements

258
00:09:06,600 --> 00:09:09,360
so we can actually evaluate recipes so

259
00:09:09,360 --> 00:09:11,580
we did that on on some Intel and AMD

260
00:09:11,580 --> 00:09:13,380
CPUs and

261
00:09:13,380 --> 00:09:17,399
yeah we can do it on most so on many of

262
00:09:17,399 --> 00:09:20,279
the AMD CPUs have noticed entry

263
00:09:20,279 --> 00:09:22,620
um and all of the sky like CPUs are

264
00:09:22,620 --> 00:09:25,380
vulnerable and the later ones are still

265
00:09:25,380 --> 00:09:27,839
have still have this RFP to B2B fallback

266
00:09:27,839 --> 00:09:33,600
but they are protected by enhanced ibrs

267
00:09:35,519 --> 00:09:38,040
um so yeah we need to be very able to

268
00:09:38,040 --> 00:09:40,860
leak arbitrary information at about 220

269
00:09:40,860 --> 00:09:42,959
bytes per second on AMD about four

270
00:09:42,959 --> 00:09:44,760
kilobytes per second and this was enough

271
00:09:44,760 --> 00:09:47,940
to to find the EDC Shadow and leak the

272
00:09:47,940 --> 00:09:50,459
password password hashes of the system

273
00:09:50,459 --> 00:09:53,480
and yeah in acceptable amount of time

274
00:09:53,480 --> 00:09:56,279
and the mitigation is a bit of a

275
00:09:56,279 --> 00:09:57,899
headache actually so now they actually

276
00:09:57,899 --> 00:10:00,660
have to enable ibrs or the kernel

277
00:10:00,660 --> 00:10:02,399
because replying obviously didn't cut it

278
00:10:02,399 --> 00:10:03,660
and

279
00:10:03,660 --> 00:10:06,660
on the AMD we don't have ibrs not in the

280
00:10:06,660 --> 00:10:08,279
same way yeah we have it but it's it's

281
00:10:08,279 --> 00:10:10,260
not going to work so they have something

282
00:10:10,260 --> 00:10:13,560
that they call jump to Red which they uh

283
00:10:13,560 --> 00:10:15,540
yeah which we explained briefly in our

284
00:10:15,540 --> 00:10:17,040
paper and it's also written in their

285
00:10:17,040 --> 00:10:20,040
white paper if you're interested in that

286
00:10:20,040 --> 00:10:21,019
um

287
00:10:21,019 --> 00:10:25,019
and uh yeah that is the end of this talk

288
00:10:25,019 --> 00:10:26,220
so I can conclude with these three

289
00:10:26,220 --> 00:10:27,959
sentences returns can be predicted just

290
00:10:27,959 --> 00:10:29,580
like indirect branches on mdn into

291
00:10:29,580 --> 00:10:31,740
systems B2B knows no privileged

292
00:10:31,740 --> 00:10:33,120
boundaries and yeah there are lots of

293
00:10:33,120 --> 00:10:35,760
vulnerable returns in the corner ah you

294
00:10:35,760 --> 00:10:37,500
can find a code on the blog post on this

295
00:10:37,500 --> 00:10:41,480
QR code thank you very much

