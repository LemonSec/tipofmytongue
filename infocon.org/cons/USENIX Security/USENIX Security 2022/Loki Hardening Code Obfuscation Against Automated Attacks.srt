1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:09,019 --> 00:00:11,940
welcome to the talk on Loki hardening

3
00:00:11,940 --> 00:00:13,920
code obfuscation against automated

4
00:00:13,920 --> 00:00:16,199
attacks let me stress this is your

5
00:00:16,199 --> 00:00:18,539
unique opportunity to listen on on code

6
00:00:18,539 --> 00:00:20,460
obfuscation because this is the only

7
00:00:20,460 --> 00:00:23,160
talk speaking about code obfuscation and

8
00:00:23,160 --> 00:00:26,699
the obfuscation at usinex this year

9
00:00:26,699 --> 00:00:29,699
so in the next 10 minutes 10 to 12

10
00:00:29,699 --> 00:00:31,800
minutes we will learn what we embase

11
00:00:31,800 --> 00:00:33,239
obfuscation is

12
00:00:33,239 --> 00:00:35,760
how automatic attacks can break all

13
00:00:35,760 --> 00:00:38,040
these state-of-the-art VMS and how we

14
00:00:38,040 --> 00:00:39,840
can do better to harden our code

15
00:00:39,840 --> 00:00:42,500
obfuscation

16
00:00:42,600 --> 00:00:44,640
for those of you who are not that

17
00:00:44,640 --> 00:00:46,920
familiar with obfuscation it's the

18
00:00:46,920 --> 00:00:49,379
process of transforming code to make it

19
00:00:49,379 --> 00:00:51,120
harder to analyze to make it

20
00:00:51,120 --> 00:00:52,500
unintelligible

21
00:00:52,500 --> 00:00:55,260
and the goal is to complicate reverse

22
00:00:55,260 --> 00:00:58,379
engineering attempts

23
00:00:58,379 --> 00:01:00,059
this is done

24
00:01:00,059 --> 00:01:02,460
in a wide array of applications mostly

25
00:01:02,460 --> 00:01:04,319
in industry for inter protecting

26
00:01:04,319 --> 00:01:06,659
intellectual property think about

27
00:01:06,659 --> 00:01:09,299
digital Rights Management but also an

28
00:01:09,299 --> 00:01:11,100
Abuse Prevention for example Google's

29
00:01:11,100 --> 00:01:13,799
bodyguard but as other Dark Side malware

30
00:01:13,799 --> 00:01:16,860
offers use obfuscation to conceal the

31
00:01:16,860 --> 00:01:20,700
malicious payloads of their malware

32
00:01:20,700 --> 00:01:23,040
in this talk we are going to look into

33
00:01:23,040 --> 00:01:25,380
VM based obfuscation which is just a

34
00:01:25,380 --> 00:01:27,420
single technique but it's one of the

35
00:01:27,420 --> 00:01:29,400
most powerful ones and is universally

36
00:01:29,400 --> 00:01:33,619
used in most state-of-the-art tools

37
00:01:34,560 --> 00:01:36,720
the basic idea is

38
00:01:36,720 --> 00:01:38,520
you have your code here

39
00:01:38,520 --> 00:01:40,439
you have some intellectual property in

40
00:01:40,439 --> 00:01:42,180
the code that you would like to protect

41
00:01:42,180 --> 00:01:44,939
right now when compiling the binary it's

42
00:01:44,939 --> 00:01:46,740
easy to analyze the code right just

43
00:01:46,740 --> 00:01:48,659
disassemble it look at it and you can

44
00:01:48,659 --> 00:01:50,640
understand it as an attacker

45
00:01:50,640 --> 00:01:53,040
so what we do is we make up a new

46
00:01:53,040 --> 00:01:55,439
instruction set architecture and we

47
00:01:55,439 --> 00:01:57,720
transfer our intellectual property from

48
00:01:57,720 --> 00:02:00,000
the normal code so to speak into this

49
00:02:00,000 --> 00:02:03,119
new instruction set

50
00:02:03,119 --> 00:02:05,820
we then replace our original code within

51
00:02:05,820 --> 00:02:08,220
VM interpreter that knows how to

52
00:02:08,220 --> 00:02:11,099
interpret this made up instruction set

53
00:02:11,099 --> 00:02:12,540
and now

54
00:02:12,540 --> 00:02:15,120
the attacker has a blob of data they

55
00:02:15,120 --> 00:02:16,739
cannot understand because they don't

56
00:02:16,739 --> 00:02:19,500
know this instruction set

57
00:02:19,500 --> 00:02:22,080
but there's one downside

58
00:02:22,080 --> 00:02:25,140
The Interpreter must know how to run our

59
00:02:25,140 --> 00:02:27,000
obfuscated code

60
00:02:27,000 --> 00:02:30,060
so an attacker can simply focus on this

61
00:02:30,060 --> 00:02:33,020
VM interpreter

62
00:02:33,300 --> 00:02:34,920
how would you go about doing that

63
00:02:34,920 --> 00:02:37,200
basically you would first locate all the

64
00:02:37,200 --> 00:02:40,080
VM interpreter components and then

65
00:02:40,080 --> 00:02:42,000
you would simplify the individual

66
00:02:42,000 --> 00:02:44,580
handlers using some program analysis

67
00:02:44,580 --> 00:02:46,680
techniques and once you understood all

68
00:02:46,680 --> 00:02:48,840
the handlers you can simply reconstruct

69
00:02:48,840 --> 00:02:52,080
the original code

70
00:02:52,080 --> 00:02:55,080
torque will focus on the simplification

71
00:02:55,080 --> 00:02:57,000
on the handles on the automated

72
00:02:57,000 --> 00:02:58,739
simplification of the handlers and then

73
00:02:58,739 --> 00:03:01,019
we will see how we can do better and

74
00:03:01,019 --> 00:03:04,920
Harden our handlers again

75
00:03:04,920 --> 00:03:06,060
so

76
00:03:06,060 --> 00:03:08,340
when attacking these VMS

77
00:03:08,340 --> 00:03:12,540
there are free broad categories

78
00:03:12,540 --> 00:03:14,879
first we can remove instructions that do

79
00:03:14,879 --> 00:03:16,560
not contribute to the handles

80
00:03:16,560 --> 00:03:17,819
computation

81
00:03:17,819 --> 00:03:20,340
we can symbolically execute the Handler

82
00:03:20,340 --> 00:03:24,420
or we can use program synthesis

83
00:03:24,420 --> 00:03:27,780
starting with instruction removal

84
00:03:27,780 --> 00:03:29,840
here we have a handle on the left side

85
00:03:29,840 --> 00:03:32,640
and when applying compiler-like

86
00:03:32,640 --> 00:03:35,280
optimization passes onto this

87
00:03:35,280 --> 00:03:37,260
for example that code elimination

88
00:03:37,260 --> 00:03:39,480
constant folding constant propagation of

89
00:03:39,480 --> 00:03:41,940
people optimization as you can see we

90
00:03:41,940 --> 00:03:45,180
can get get rid of most of the

91
00:03:45,180 --> 00:03:47,459
instructions and boil it down to a mere

92
00:03:47,459 --> 00:03:51,440
three instructions in the Handler

93
00:03:52,799 --> 00:03:55,080
this may sound simple but it's actually

94
00:03:55,080 --> 00:03:57,180
a very powerful technique and you can

95
00:03:57,180 --> 00:04:00,239
come by and try this on most state of

96
00:04:00,239 --> 00:04:04,879
the r2s and gets a surprising results

97
00:04:05,099 --> 00:04:08,519
the next tool and the attackers Asana is

98
00:04:08,519 --> 00:04:10,920
symbolic execution so when symbolically

99
00:04:10,920 --> 00:04:13,980
executing the Handler we have here we

100
00:04:13,980 --> 00:04:17,760
walk it down and we negate the symbolic

101
00:04:17,760 --> 00:04:22,440
register rcx we negate it as well again

102
00:04:22,440 --> 00:04:25,680
and our symbolic execution engine has a

103
00:04:25,680 --> 00:04:27,720
simplification rule negating twice

104
00:04:27,720 --> 00:04:30,000
yields the original result so we know

105
00:04:30,000 --> 00:04:32,820
here it's still rcx

106
00:04:32,820 --> 00:04:35,400
then we add R6 to itself and we might

107
00:04:35,400 --> 00:04:37,440
have another simplification rule that

108
00:04:37,440 --> 00:04:41,360
tells us this is a left shift by one

109
00:04:41,400 --> 00:04:44,040
with that we can symbolically summarize

110
00:04:44,040 --> 00:04:47,660
what the hemla is actually doing

111
00:04:47,759 --> 00:04:50,940
now the last technique and probably most

112
00:04:50,940 --> 00:04:54,240
powerful one is program synthesis here

113
00:04:54,240 --> 00:04:56,340
we have a Handler F which is represented

114
00:04:56,340 --> 00:04:58,440
as a mathematical function

115
00:04:58,440 --> 00:05:00,840
and we don't really want to know what's

116
00:05:00,840 --> 00:05:01,919
going on there it looks really

117
00:05:01,919 --> 00:05:04,620
complicated right we don't care so

118
00:05:04,620 --> 00:05:07,199
instead what we do is

119
00:05:07,199 --> 00:05:09,600
we use it as a black box we sample some

120
00:05:09,600 --> 00:05:12,660
inputs and we record the output

121
00:05:12,660 --> 00:05:15,660
this is called an input output pair

122
00:05:15,660 --> 00:05:18,660
we do this multiple times

123
00:05:18,660 --> 00:05:21,720
recording multiple input output samples

124
00:05:21,720 --> 00:05:25,680
and then we learn a new function H that

125
00:05:25,680 --> 00:05:28,320
has the same input output Behavior so

126
00:05:28,320 --> 00:05:30,479
the idea is if it behaves the same on

127
00:05:30,479 --> 00:05:33,360
all inputs it is the same

128
00:05:33,360 --> 00:05:35,759
and as you can see

129
00:05:35,759 --> 00:05:39,360
X Plus y plus set is significantly more

130
00:05:39,360 --> 00:05:42,180
simple than our original function

131
00:05:42,180 --> 00:05:44,400
now with these three techniques we can

132
00:05:44,400 --> 00:05:47,280
simplify state-of-the-art VM obfuscation

133
00:05:47,280 --> 00:05:49,800
schemes so the question really is can we

134
00:05:49,800 --> 00:05:53,160
do better and how and that's why we came

135
00:05:53,160 --> 00:05:54,600
up with Loki

136
00:05:54,600 --> 00:05:56,220
we

137
00:05:56,220 --> 00:05:59,639
have three core techniques that we use

138
00:05:59,639 --> 00:06:02,340
to make these obfuscation schemes harder

139
00:06:02,340 --> 00:06:05,340
so we merge core semantics we use

140
00:06:05,340 --> 00:06:08,520
complex Target specific expression and

141
00:06:08,520 --> 00:06:10,740
we apply mixed Boolean arithmetic in a

142
00:06:10,740 --> 00:06:12,960
clever way if that doesn't make sense

143
00:06:12,960 --> 00:06:14,880
right now it will in a couple of seconds

144
00:06:14,880 --> 00:06:17,280
I promise

145
00:06:17,280 --> 00:06:20,580
so merging core semantics we again have

146
00:06:20,580 --> 00:06:23,160
our hidden layer as a mathematical

147
00:06:23,160 --> 00:06:24,600
representation

148
00:06:24,600 --> 00:06:27,479
and what the Handler does its core

149
00:06:27,479 --> 00:06:30,840
semantics here for the function H is X

150
00:06:30,840 --> 00:06:32,039
Plus y

151
00:06:32,039 --> 00:06:34,020
is rather simple

152
00:06:34,020 --> 00:06:37,259
to make this more complex our first idea

153
00:06:37,259 --> 00:06:39,960
is to merge multiple of these core

154
00:06:39,960 --> 00:06:43,259
semantics into a single Handler

155
00:06:43,259 --> 00:06:44,280
here

156
00:06:44,280 --> 00:06:46,380
we do need a key

157
00:06:46,380 --> 00:06:49,259
to allow us to address the individual

158
00:06:49,259 --> 00:06:51,479
semantics

159
00:06:51,479 --> 00:06:54,180
now with this key dependent core

160
00:06:54,180 --> 00:06:56,220
semantics the Handler is already more

161
00:06:56,220 --> 00:06:59,160
complex but we can do better

162
00:06:59,160 --> 00:07:03,000
if we think about this in terms of the

163
00:07:03,000 --> 00:07:05,039
control flow it would look like

164
00:07:05,039 --> 00:07:07,259
something like that

165
00:07:07,259 --> 00:07:10,560
we have the if and we have either the

166
00:07:10,560 --> 00:07:13,199
first core semantics or the second core

167
00:07:13,199 --> 00:07:15,840
semantics but really what we would love

168
00:07:15,840 --> 00:07:19,020
to have is a single large

169
00:07:19,020 --> 00:07:22,500
block so a single large basic block and

170
00:07:22,500 --> 00:07:24,419
turns out we can achieve that rather

171
00:07:24,419 --> 00:07:26,520
simply using a so-called polynomial

172
00:07:26,520 --> 00:07:30,720
encoding so instead of having the if

173
00:07:30,720 --> 00:07:34,560
we use multiplication and addition to

174
00:07:34,560 --> 00:07:36,000
achieve the same

175
00:07:36,000 --> 00:07:39,060
this leads to a very tight interlocking

176
00:07:39,060 --> 00:07:41,699
of the core semantics which makes them

177
00:07:41,699 --> 00:07:44,400
significantly more complex

178
00:07:44,400 --> 00:07:46,919
now we can do even better here

179
00:07:46,919 --> 00:07:49,199
and we can look at our key selection

180
00:07:49,199 --> 00:07:50,819
which allows us to address the

181
00:07:50,819 --> 00:07:53,099
individual core semantics and make that

182
00:07:53,099 --> 00:07:55,740
more complex for example we can use

183
00:07:55,740 --> 00:07:58,199
mathematically hard problems such as

184
00:07:58,199 --> 00:07:59,639
factorization

185
00:07:59,639 --> 00:08:03,479
or we can use Point functions to prevent

186
00:08:03,479 --> 00:08:05,520
static attacks

187
00:08:05,520 --> 00:08:07,740
there is more to this however for the

188
00:08:07,740 --> 00:08:09,840
full details feel free to check out the

189
00:08:09,840 --> 00:08:11,580
paper

190
00:08:11,580 --> 00:08:14,160
now this only works for static attackers

191
00:08:14,160 --> 00:08:16,380
so we are still facing to the more

192
00:08:16,380 --> 00:08:18,419
powerful Dynamic attacker

193
00:08:18,419 --> 00:08:21,300
and to stop programs and thesis here is

194
00:08:21,300 --> 00:08:22,860
a simple idea

195
00:08:22,860 --> 00:08:25,259
instead of having this generic core

196
00:08:25,259 --> 00:08:27,360
semantics like an addition and a

197
00:08:27,360 --> 00:08:29,400
multiplication which we call sequence

198
00:08:29,400 --> 00:08:31,199
sequentially

199
00:08:31,199 --> 00:08:33,599
we combine them into a single core

200
00:08:33,599 --> 00:08:36,479
semantics which does all of them

201
00:08:36,479 --> 00:08:38,640
back to our mathematical representation

202
00:08:38,640 --> 00:08:40,080
of the Handler

203
00:08:40,080 --> 00:08:42,240
this would look like this instead of

204
00:08:42,240 --> 00:08:45,060
having X Plus y we have something more

205
00:08:45,060 --> 00:08:48,180
complex semantically complex and the

206
00:08:48,180 --> 00:08:50,339
important thing is we can get this from

207
00:08:50,339 --> 00:08:52,440
the target program so this is Target

208
00:08:52,440 --> 00:08:54,480
specific depending on the code we want

209
00:08:54,480 --> 00:08:55,740
to obfuscate

210
00:08:55,740 --> 00:08:58,740
and the very nice thing here is it is

211
00:08:58,740 --> 00:09:00,720
very well suited to defeat program

212
00:09:00,720 --> 00:09:03,320
synthesis

213
00:09:03,320 --> 00:09:07,200
now one attack Vector is left and that's

214
00:09:07,200 --> 00:09:09,180
symbolic execution

215
00:09:09,180 --> 00:09:12,360
so the idea to defeat symbolic execution

216
00:09:12,360 --> 00:09:16,140
is to increase the syntactic complexity

217
00:09:16,140 --> 00:09:18,420
instead of having our cross semantics in

218
00:09:18,420 --> 00:09:21,899
this very simple form we can make this

219
00:09:21,899 --> 00:09:24,959
more complex this expression still

220
00:09:24,959 --> 00:09:27,959
computes the same but is more complex to

221
00:09:27,959 --> 00:09:31,080
analyze and this complexity helps defeat

222
00:09:31,080 --> 00:09:33,660
symbolic execution

223
00:09:33,660 --> 00:09:36,060
now how would we go about building one

224
00:09:36,060 --> 00:09:38,040
of these syntactically complex

225
00:09:38,040 --> 00:09:40,260
Expressions that's where mixed Boolean

226
00:09:40,260 --> 00:09:42,779
arithmetic or mbas for short come into

227
00:09:42,779 --> 00:09:44,540
play imagine

228
00:09:44,540 --> 00:09:48,000
this expression on the left hand side

229
00:09:48,000 --> 00:09:50,880
which we want to obfuscate and a couple

230
00:09:50,880 --> 00:09:53,040
of rewriting rules we have where we map

231
00:09:53,040 --> 00:09:55,620
a simple identity onto our more complex

232
00:09:55,620 --> 00:09:56,519
one

233
00:09:56,519 --> 00:09:58,980
so we'll pick some sub expression we

234
00:09:58,980 --> 00:10:00,240
look that up

235
00:10:00,240 --> 00:10:02,339
and we replace it making the expression

236
00:10:02,339 --> 00:10:04,980
more complex and traditionally this

237
00:10:04,980 --> 00:10:07,500
would be how we would apply an MBA

238
00:10:07,500 --> 00:10:10,380
the neat thing is they are still equal

239
00:10:10,380 --> 00:10:12,959
still the same computation

240
00:10:12,959 --> 00:10:14,040
so

241
00:10:14,040 --> 00:10:17,279
this traditional approach is bad for two

242
00:10:17,279 --> 00:10:21,240
reasons first we have like 50 about 50

243
00:10:21,240 --> 00:10:23,600
rewriting rules which are handcrafted

244
00:10:23,600 --> 00:10:26,100
instead what we propose is to use

245
00:10:26,100 --> 00:10:28,680
enumerative program synthesis up to a

246
00:10:28,680 --> 00:10:32,220
certain depth and find like 850 000

247
00:10:32,220 --> 00:10:34,560
Expressions making this a lookup table

248
00:10:34,560 --> 00:10:38,880
with all identities up to this depth and

249
00:10:38,880 --> 00:10:41,399
second instead of being done after one

250
00:10:41,399 --> 00:10:44,459
simple replacement we can recursively

251
00:10:44,459 --> 00:10:47,220
keep going producing expressions of

252
00:10:47,220 --> 00:10:49,920
infinite complexity

253
00:10:49,920 --> 00:10:52,860
and with this recursive rewriting we are

254
00:10:52,860 --> 00:10:55,079
done to prevent

255
00:10:55,079 --> 00:10:57,000
symbolic execution

256
00:10:57,000 --> 00:10:59,519
now putting it all together

257
00:10:59,519 --> 00:11:02,459
the combination of our techniques is

258
00:11:02,459 --> 00:11:05,700
suited to prevent all attacks to make

259
00:11:05,700 --> 00:11:08,160
the attacker significantly weaker both

260
00:11:08,160 --> 00:11:11,760
in a static and dynamic scenario

261
00:11:11,760 --> 00:11:14,100
and with that let's wrap it up we have

262
00:11:14,100 --> 00:11:16,740
seen automated simplification can defeat

263
00:11:16,740 --> 00:11:18,839
VMS however there's a couple of

264
00:11:18,839 --> 00:11:21,060
techniques we can use in combination to

265
00:11:21,060 --> 00:11:23,339
prevent this and if you're interested in

266
00:11:23,339 --> 00:11:25,620
that feel free to check out the paper or

267
00:11:25,620 --> 00:11:27,959
head to GitHub check out our artifact

268
00:11:27,959 --> 00:11:30,420
it's available there

269
00:11:30,420 --> 00:11:32,220
all right with that I'm open to

270
00:11:32,220 --> 00:11:34,500
questions both online right now or later

271
00:11:34,500 --> 00:11:37,040
offline

