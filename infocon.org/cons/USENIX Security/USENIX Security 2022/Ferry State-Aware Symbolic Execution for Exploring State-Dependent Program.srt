1
00:00:07,700 --> 00:00:10,980
hello everyone I'm Richard from futan

2
00:00:10,980 --> 00:00:12,780
University I'm the lead author of this

3
00:00:12,780 --> 00:00:14,580
paper fairies data wealth in my

4
00:00:14,580 --> 00:00:16,619
execution for exploring State dependent

5
00:00:16,619 --> 00:00:19,080
program passes this work is a

6
00:00:19,080 --> 00:00:21,960
cooperation with German young Dental my

7
00:00:21,960 --> 00:00:25,320
children and Min young and also Joe Wong

8
00:00:25,320 --> 00:00:28,279
and Chen gong

9
00:00:30,000 --> 00:00:32,340
currently the popular Dynamic program

10
00:00:32,340 --> 00:00:34,739
analysis and testing techniques include

11
00:00:34,739 --> 00:00:37,079
symbol execution and study and I think

12
00:00:37,079 --> 00:00:39,840
execution marks some input as symbolic

13
00:00:39,840 --> 00:00:41,700
and exclusive explore the possible

14
00:00:41,700 --> 00:00:43,559
passes in a program based on the

15
00:00:43,559 --> 00:00:46,379
propagation of symbolic input

16
00:00:46,379 --> 00:00:49,440
for fuzzing it focuses on the covering

17
00:00:49,440 --> 00:00:51,960
new blocks and it will mutate the input

18
00:00:51,960 --> 00:00:54,360
and retrieve the feedbacks like block

19
00:00:54,360 --> 00:00:57,120
coverage and determine which input parts

20
00:00:57,120 --> 00:01:00,140
to mutate to current mob code

21
00:01:00,140 --> 00:01:03,120
the common uh the common limitation here

22
00:01:03,120 --> 00:01:05,280
is that they both focus on low level

23
00:01:05,280 --> 00:01:07,619
features like paths or block coverage

24
00:01:07,619 --> 00:01:09,900
but ignore the understanding of

25
00:01:09,900 --> 00:01:13,159
high-level program logic

26
00:01:13,159 --> 00:01:16,200
unfortunately a real world programs need

27
00:01:16,200 --> 00:01:19,320
to process complex data uh we take the

28
00:01:19,320 --> 00:01:22,020
format of a PNG image as an example such

29
00:01:22,020 --> 00:01:24,780
data is self-describing and they are

30
00:01:24,780 --> 00:01:27,360
consisted of metadata and payload and

31
00:01:27,360 --> 00:01:29,880
metadata can have some implicitly

32
00:01:29,880 --> 00:01:32,759
constraints on the following payload for

33
00:01:32,759 --> 00:01:34,860
example the magic bytes in the header

34
00:01:34,860 --> 00:01:37,740
here indicates that this is a PNG image

35
00:01:37,740 --> 00:01:40,560
and the size and identifier Fields

36
00:01:40,560 --> 00:01:44,540
describe the following content data

37
00:01:44,540 --> 00:01:47,640
to handle such complex input the

38
00:01:47,640 --> 00:01:49,860
programs usually Implement non-trivial

39
00:01:49,860 --> 00:01:53,060
finish State machine

40
00:01:53,060 --> 00:01:55,799
and this leads to the conflict the

41
00:01:55,799 --> 00:01:58,680
machines of Finnish states have can have

42
00:01:58,680 --> 00:02:01,380
infinite execution paths and execution

43
00:02:01,380 --> 00:02:04,259
in the existing techniques can be

44
00:02:04,259 --> 00:02:06,899
struggled by these tests and failed to

45
00:02:06,899 --> 00:02:10,818
efficiently explore all these states

46
00:02:11,760 --> 00:02:14,040
we take a real world code snipped from

47
00:02:14,040 --> 00:02:16,020
the MP4 passing as our motivating

48
00:02:16,020 --> 00:02:20,280
example an mp4 file is conceptually a

49
00:02:20,280 --> 00:02:22,800
consisted of several data boxes to

50
00:02:22,800 --> 00:02:24,660
trigger this vulnerability we need an

51
00:02:24,660 --> 00:02:28,319
mp4 file of two boxes so here the first

52
00:02:28,319 --> 00:02:31,560
box of type Trak will take the branch in

53
00:02:31,560 --> 00:02:34,379
line 20 and set the value of variable

54
00:02:34,379 --> 00:02:38,280
save size here and it's we call this a

55
00:02:38,280 --> 00:02:39,900
variable the state describing variable

56
00:02:39,900 --> 00:02:41,099
in this paper

57
00:02:41,099 --> 00:02:43,140
and the vulnerability can only be

58
00:02:43,140 --> 00:02:45,420
triggered in the states that safe size

59
00:02:45,420 --> 00:02:48,140
is positive

60
00:02:48,239 --> 00:02:51,540
then the second box of type tx3g is then

61
00:02:51,540 --> 00:02:53,660
used to trigger the real vulnerability

62
00:02:53,660 --> 00:02:57,720
since save size is positive the line 13

63
00:02:57,720 --> 00:03:01,319
will be taken and this means the

64
00:03:01,319 --> 00:03:03,780
vulnerable size will also be positive so

65
00:03:03,780 --> 00:03:06,360
there can be an integer overflow in line

66
00:03:06,360 --> 00:03:11,040
16 here and given the large box size

67
00:03:11,040 --> 00:03:13,200
and this means the size of the buffer

68
00:03:13,200 --> 00:03:14,780
and the real size of the payload

69
00:03:14,780 --> 00:03:17,640
mismatched leading to the real buffer

70
00:03:17,640 --> 00:03:20,119
overflow

71
00:03:20,400 --> 00:03:22,500
now let's see how the symbol execution

72
00:03:22,500 --> 00:03:26,159
will handle this uh there are 86 cases

73
00:03:26,159 --> 00:03:29,099
in the three statement which even more

74
00:03:29,099 --> 00:03:31,739
nested conditional statements so it can

75
00:03:31,739 --> 00:03:33,780
suffer immediate price explosion during

76
00:03:33,780 --> 00:03:36,300
the exploration

77
00:03:36,300 --> 00:03:38,640
while for the funding the storage is a

78
00:03:38,640 --> 00:03:40,620
little different and the further were

79
00:03:40,620 --> 00:03:42,420
felt will find that the same size

80
00:03:42,420 --> 00:03:45,000
variable is not tainted by inputs in

81
00:03:45,000 --> 00:03:47,280
most of the cases because it has a

82
00:03:47,280 --> 00:03:49,680
default value of -1

83
00:03:49,680 --> 00:03:52,080
so the further we are not deliberately

84
00:03:52,080 --> 00:03:55,500
mutate this input and try to mutate the

85
00:03:55,500 --> 00:03:57,720
value of safe size thus cannot trigger

86
00:03:57,720 --> 00:04:00,379
the vulnerability

87
00:04:00,959 --> 00:04:03,659
let's jump out of the existing words and

88
00:04:03,659 --> 00:04:06,780
see this example from the FSM level

89
00:04:06,780 --> 00:04:08,760
actually there are very limited number

90
00:04:08,760 --> 00:04:11,340
of states in this program and only four

91
00:04:11,340 --> 00:04:13,140
different combinations of the variable

92
00:04:13,140 --> 00:04:16,380
box type and save size are enough to

93
00:04:16,380 --> 00:04:20,540
cover all the unique paths in this nit

94
00:04:21,298 --> 00:04:23,520
and this leads to our first Insight

95
00:04:23,520 --> 00:04:25,800
that's the knowledge of program states

96
00:04:25,800 --> 00:04:30,120
can help improve an analysis efficiency

97
00:04:30,120 --> 00:04:33,180
but uh to really do that actually there

98
00:04:33,180 --> 00:04:35,820
can be two challenges to understand the

99
00:04:35,820 --> 00:04:38,940
program state so the first is about how

100
00:04:38,940 --> 00:04:40,740
to recognize the state describing

101
00:04:40,740 --> 00:04:42,720
variables among all these variables

102
00:04:42,720 --> 00:04:44,880
because you you can see that the state

103
00:04:44,880 --> 00:04:47,400
describe variable can have no semantic

104
00:04:47,400 --> 00:04:49,460
features and no structural features

105
00:04:49,460 --> 00:04:53,520
compare with normal variables

106
00:04:53,520 --> 00:04:55,860
and the Second Challenge here is that

107
00:04:55,860 --> 00:04:57,960
how to determine the runtime program

108
00:04:57,960 --> 00:04:58,979
States

109
00:04:58,979 --> 00:05:00,960
because we need to learn about the

110
00:05:00,960 --> 00:05:04,259
division of different value ranges so we

111
00:05:04,259 --> 00:05:05,940
can determine that given the current

112
00:05:05,940 --> 00:05:08,100
value ranges of these State describing

113
00:05:08,100 --> 00:05:11,040
variables whether this is uh an

114
00:05:11,040 --> 00:05:15,440
exploration path or exploit state

115
00:05:16,280 --> 00:05:19,440
so to tackle these challenges we first

116
00:05:19,440 --> 00:05:22,139
conduct an investigation on the programs

117
00:05:22,139 --> 00:05:24,479
with State machines to understand their

118
00:05:24,479 --> 00:05:25,800
characteristics

119
00:05:25,800 --> 00:05:28,680
so our we can conclude the character

120
00:05:28,680 --> 00:05:31,440
which is as follows so first they all

121
00:05:31,440 --> 00:05:33,720
receive a sequence of input from a

122
00:05:33,720 --> 00:05:36,240
single uh simple source and in most case

123
00:05:36,240 --> 00:05:37,919
this is the file

124
00:05:37,919 --> 00:05:39,840
and also in the programs they were

125
00:05:39,840 --> 00:05:43,139
handled inputs sequentially and normally

126
00:05:43,139 --> 00:05:46,020
there can be a input handling Loop here

127
00:05:46,020 --> 00:05:49,020
and we call that the input part which

128
00:05:49,020 --> 00:05:50,460
has been processed in the current

129
00:05:50,460 --> 00:05:53,039
iteration we call it the current input

130
00:05:53,039 --> 00:05:55,199
and the input part which has been

131
00:05:55,199 --> 00:05:57,300
processed in the previous iteration we

132
00:05:57,300 --> 00:06:00,060
call them the earlier input

133
00:06:00,060 --> 00:06:03,300
so when processing the self-describing

134
00:06:03,300 --> 00:06:05,580
data the most important characteristic

135
00:06:05,580 --> 00:06:08,160
is that we find that the programs they

136
00:06:08,160 --> 00:06:10,560
maintain the program states with one or

137
00:06:10,560 --> 00:06:13,560
more State describing variables and this

138
00:06:13,560 --> 00:06:16,020
means that the earlier inputs they can

139
00:06:16,020 --> 00:06:18,479
they can affect the value of State

140
00:06:18,479 --> 00:06:20,639
describing variables and we say that

141
00:06:20,639 --> 00:06:22,740
they can affect the state of programs

142
00:06:22,740 --> 00:06:25,620
and further these states will be well

143
00:06:25,620 --> 00:06:27,020
used to

144
00:06:27,020 --> 00:06:30,120
determine the process of the further of

145
00:06:30,120 --> 00:06:33,120
the current input in that such variables

146
00:06:33,120 --> 00:06:36,000
may have the ability to affect the

147
00:06:36,000 --> 00:06:38,580
control Flow by maybe affect the bronze

148
00:06:38,580 --> 00:06:42,620
taken of certain conditional statement

149
00:06:43,160 --> 00:06:47,039
okay so to tackle this problem we

150
00:06:47,039 --> 00:06:49,199
proposed the world first program state

151
00:06:49,199 --> 00:06:51,360
where a singular execution engine called

152
00:06:51,360 --> 00:06:54,180
Ferry and it will continuously recognize

153
00:06:54,180 --> 00:06:56,520
the state describing variables and the

154
00:06:56,520 --> 00:06:58,199
current program States during the

155
00:06:58,199 --> 00:07:01,020
analysis and kill those exploration

156
00:07:01,020 --> 00:07:03,900
passes of explored state

157
00:07:03,900 --> 00:07:06,300
we further proposed optimizations to

158
00:07:06,300 --> 00:07:08,400
tackle the complexity of real world

159
00:07:08,400 --> 00:07:11,000
programs

160
00:07:11,600 --> 00:07:14,100
also we rely on the necessary condition

161
00:07:14,100 --> 00:07:15,780
we conclude from the previous

162
00:07:15,780 --> 00:07:18,360
investigation to recognize the state

163
00:07:18,360 --> 00:07:22,020
describing variables so there can be two

164
00:07:22,020 --> 00:07:24,419
necessary conditions here's so the first

165
00:07:24,419 --> 00:07:26,580
the variable must be affected by input

166
00:07:26,580 --> 00:07:29,819
in some execution passes so this means

167
00:07:29,819 --> 00:07:32,340
the in the variables can be tainted by

168
00:07:32,340 --> 00:07:34,500
the input with both explicit and

169
00:07:34,500 --> 00:07:36,259
implicit data flow

170
00:07:36,259 --> 00:07:39,000
and second the variables must be

171
00:07:39,000 --> 00:07:41,160
affected and be able to affect some

172
00:07:41,160 --> 00:07:43,919
Branch taken so it has the ability to

173
00:07:43,919 --> 00:07:46,139
affect the control flow of the future of

174
00:07:46,139 --> 00:07:49,580
the future input process

175
00:07:50,539 --> 00:07:53,039
correspondingly we use change analysis

176
00:07:53,039 --> 00:07:55,319
to determine whether the variables are

177
00:07:55,319 --> 00:07:58,139
affected by input and we introduced

178
00:07:58,139 --> 00:08:00,419
actual instrumentation during Civil

179
00:08:00,419 --> 00:08:02,580
execution to determine whether these

180
00:08:02,580 --> 00:08:04,860
variables can affect control flow

181
00:08:04,860 --> 00:08:07,620
and it is worth noting that this process

182
00:08:07,620 --> 00:08:10,380
happens in a cross pathway so which

183
00:08:10,380 --> 00:08:12,900
means variables can be input determined

184
00:08:12,900 --> 00:08:14,819
in one pass and Branch related in

185
00:08:14,819 --> 00:08:17,220
another and we will still considered a

186
00:08:17,220 --> 00:08:19,940
state describing

187
00:08:20,280 --> 00:08:22,259
foreign

188
00:08:22,259 --> 00:08:24,599
for example save size is Tainted by

189
00:08:24,599 --> 00:08:27,300
input in the blue path here while it is

190
00:08:27,300 --> 00:08:29,280
checked in the conditional statement in

191
00:08:29,280 --> 00:08:31,379
the Orange Path but Ferry will still

192
00:08:31,379 --> 00:08:33,719
label it as state describing after both

193
00:08:33,719 --> 00:08:36,740
paths are explored

194
00:08:38,580 --> 00:08:40,979
to recognize the runtime state of the

195
00:08:40,979 --> 00:08:44,039
programs our second Insight here is that

196
00:08:44,039 --> 00:08:46,920
the state transactions happens when the

197
00:08:46,920 --> 00:08:50,120
past constraints change

198
00:08:50,820 --> 00:08:53,940
so the runtime state is is described by

199
00:08:53,940 --> 00:08:55,980
the past constraint sign or the state

200
00:08:55,980 --> 00:08:58,440
describing variables for example the two

201
00:08:58,440 --> 00:09:01,200
values of box type are determined by the

202
00:09:01,200 --> 00:09:04,260
two cases here and the same size is also

203
00:09:04,260 --> 00:09:07,260
similar so we can catch the state

204
00:09:07,260 --> 00:09:09,720
changes by monitoring the constraints on

205
00:09:09,720 --> 00:09:13,100
the state describing variables

206
00:09:14,880 --> 00:09:18,300
here so in the anomaly in the programs

207
00:09:18,300 --> 00:09:20,580
the state transaction points can be they

208
00:09:20,580 --> 00:09:22,260
can be three kinds of States transition

209
00:09:22,260 --> 00:09:23,940
points so the first is when the

210
00:09:23,940 --> 00:09:26,339
variables are initialized and the second

211
00:09:26,339 --> 00:09:29,220
is when the data constraints are changed

212
00:09:29,220 --> 00:09:31,740
for example the value of the variable

213
00:09:31,740 --> 00:09:33,779
can be assigned a new value or some

214
00:09:33,779 --> 00:09:36,120
Branch taken uh change to the path

215
00:09:36,120 --> 00:09:39,000
constraints and the third is that when

216
00:09:39,000 --> 00:09:43,580
some variables uh is deleted

217
00:09:44,880 --> 00:09:47,940
so with the analysis above Ferry can

218
00:09:47,940 --> 00:09:50,399
automatically construct the finished

219
00:09:50,399 --> 00:09:53,040
State machine like this please refer to

220
00:09:53,040 --> 00:09:54,480
our paper for the Full Construction

221
00:09:54,480 --> 00:09:57,060
process because I'll skip this for the

222
00:09:57,060 --> 00:09:59,959
limitation of time

223
00:10:00,540 --> 00:10:02,339
also we find that the real world

224
00:10:02,339 --> 00:10:04,680
programs do not handle all the input

225
00:10:04,680 --> 00:10:07,800
sequence in one functions instead the

226
00:10:07,800 --> 00:10:10,019
input is divided into different parts

227
00:10:10,019 --> 00:10:12,360
and handled by the different functions

228
00:10:12,360 --> 00:10:14,700
for example in our motivation example

229
00:10:14,700 --> 00:10:18,120
the payload the payload is reserved for

230
00:10:18,120 --> 00:10:22,860
future process in in line 80. and So to

231
00:10:22,860 --> 00:10:25,380
avoid State explosion we automatically

232
00:10:25,380 --> 00:10:28,140
recognize the boundary in the input and

233
00:10:28,140 --> 00:10:30,420
provide partially concrete input from

234
00:10:30,420 --> 00:10:32,279
zip files

235
00:10:32,279 --> 00:10:34,500
so please refer to our paper for more

236
00:10:34,500 --> 00:10:37,580
detailed optimizations

237
00:10:39,720 --> 00:10:42,959
okay finally we conduct experiments to

238
00:10:42,959 --> 00:10:46,920
evaluate the efficiency of of Ferry and

239
00:10:46,920 --> 00:10:49,079
we use the Benchmark of both Google

240
00:10:49,079 --> 00:10:51,540
first bench which is consists of 20

241
00:10:51,540 --> 00:10:54,060
programs at that time and we further

242
00:10:54,060 --> 00:10:56,040
collect some real world programs with

243
00:10:56,040 --> 00:10:59,100
State machines and finally we get 13

244
00:10:59,100 --> 00:11:01,860
programs which include the image video

245
00:11:01,860 --> 00:11:04,140
and audio and the PDF and the binary

246
00:11:04,140 --> 00:11:05,339
processing

247
00:11:05,339 --> 00:11:07,980
and we compare our tool with the

248
00:11:07,980 --> 00:11:10,380
existing symbol executors including

249
00:11:10,380 --> 00:11:13,079
anger and plea and also the state of the

250
00:11:13,079 --> 00:11:16,500
Arts Brothers like AFL Angora and fusion

251
00:11:16,500 --> 00:11:19,320
and our evaluation mainly focuses on two

252
00:11:19,320 --> 00:11:21,959
parts so the first is a more traditional

253
00:11:21,959 --> 00:11:23,880
for example what about the code coverage

254
00:11:23,880 --> 00:11:26,160
of our tool compared with others and the

255
00:11:26,160 --> 00:11:28,380
second since we focus on the program

256
00:11:28,380 --> 00:11:30,779
States we further evaluate the state

257
00:11:30,779 --> 00:11:34,560
coverage of our two compared with others

258
00:11:34,560 --> 00:11:37,680
so in short compared with existing

259
00:11:37,680 --> 00:11:40,620
symbol execution tools uh very achieved

260
00:11:40,620 --> 00:11:43,680
for about 40 more basic blocks coverage

261
00:11:43,680 --> 00:11:47,279
and about 45 percent more branches and

262
00:11:47,279 --> 00:11:50,579
compare with existing funding tools uh

263
00:11:50,579 --> 00:11:54,720
also given the same seeds Ferry is able

264
00:11:54,720 --> 00:11:58,800
to cover more basic blocks and branches

265
00:11:58,800 --> 00:12:01,140
and during our evaluation we

266
00:12:01,140 --> 00:12:03,300
successfully find three zero day

267
00:12:03,300 --> 00:12:04,980
vulnerabilities we have followed the

268
00:12:04,980 --> 00:12:06,899
responsible disclosure and all these

269
00:12:06,899 --> 00:12:08,760
vulnerabilities has been fixed before

270
00:12:08,760 --> 00:12:12,260
the publication of this paper

271
00:12:13,040 --> 00:12:15,959
further to evaluate the state coverage

272
00:12:15,959 --> 00:12:18,300
we manually filter the state-related

273
00:12:18,300 --> 00:12:21,000
vulnerabilities in cve database and see

274
00:12:21,000 --> 00:12:23,459
whether all these tools can refer can

275
00:12:23,459 --> 00:12:25,680
reproduce these vulnerabilities our

276
00:12:25,680 --> 00:12:28,440
results shows that a ferry can find

277
00:12:28,440 --> 00:12:30,839
twice as many cases compared to other

278
00:12:30,839 --> 00:12:33,839
symbol executors and given the same seed

279
00:12:33,839 --> 00:12:36,720
files or a file only vary with shortcuts

280
00:12:36,720 --> 00:12:39,300
involved execution is able to locate all

281
00:12:39,300 --> 00:12:41,899
these vulnerabilities

282
00:12:41,899 --> 00:12:44,639
finally we construct a state-related

283
00:12:44,639 --> 00:12:47,339
benchmark called river which contains

284
00:12:47,339 --> 00:12:50,399
six real world programs and 110 State

285
00:12:50,399 --> 00:12:53,100
dependent vulnerabilities and compare

286
00:12:53,100 --> 00:12:55,320
with Ferry which is able to locate all

287
00:12:55,320 --> 00:12:57,959
these vulnerabilities other tools can

288
00:12:57,959 --> 00:13:01,260
only locate as many as 50 percent of

289
00:13:01,260 --> 00:13:03,720
them with shallow depth and our

290
00:13:03,720 --> 00:13:06,000
evaluations shows that battery is able

291
00:13:06,000 --> 00:13:08,220
to cover more in-depth tone locations

292
00:13:08,220 --> 00:13:11,639
compared with existing tools

293
00:13:11,639 --> 00:13:14,300
thank you

