1
00:00:07,940 --> 00:00:10,639
hello everyone

2
00:00:10,639 --> 00:00:13,320
today I will introduce our work

3
00:00:13,320 --> 00:00:15,660
shuffle-based private sector uni faster

4
00:00:15,660 --> 00:00:17,580
and more secure these days they're going

5
00:00:17,580 --> 00:00:20,180
to work with

6
00:00:22,920 --> 00:00:25,500
I'm breaking my presentation down into

7
00:00:25,500 --> 00:00:28,019
four parts first I will introduce the

8
00:00:28,019 --> 00:00:31,619
word is private design pi04 short then I

9
00:00:31,619 --> 00:00:33,780
will summary our contributions

10
00:00:33,780 --> 00:00:35,940
that I will further explain our main

11
00:00:35,940 --> 00:00:38,579
ideas finally I will give a performance

12
00:00:38,579 --> 00:00:41,280
comparison

13
00:00:41,280 --> 00:00:43,620
let's start by taking a look at what is

14
00:00:43,620 --> 00:00:47,040
PSU do Alexander and a receiver

15
00:00:47,040 --> 00:00:49,440
holding aside X and a side y

16
00:00:49,440 --> 00:00:53,039
respectively after the execution the

17
00:00:53,039 --> 00:00:55,320
center knows nothing while the receiver

18
00:00:55,320 --> 00:00:57,600
can obtain the unit of the side x and

19
00:00:57,600 --> 00:00:59,640
set y but knows nothing about the

20
00:00:59,640 --> 00:01:00,840
intersection

21
00:01:00,840 --> 00:01:04,559
more specifically given an item y i if

22
00:01:04,559 --> 00:01:07,320
the item is in the intersection or the

23
00:01:07,320 --> 00:01:09,479
subtraction is not allowed to be known

24
00:01:09,479 --> 00:01:12,780
by the receiver in our work we focus on

25
00:01:12,780 --> 00:01:15,479
the semi-only cycle

26
00:01:15,479 --> 00:01:17,760
before our work most of the previous

27
00:01:17,760 --> 00:01:20,460
works are based on public key operations

28
00:01:20,460 --> 00:01:23,280
so they are not efficient enough and

29
00:01:23,280 --> 00:01:26,400
krtw 19 is the first and only PSU

30
00:01:26,400 --> 00:01:29,100
protocol that mainly relies on symmetric

31
00:01:29,100 --> 00:01:31,380
key operations and can support large

32
00:01:31,380 --> 00:01:34,799
data sets however in our work we find

33
00:01:34,799 --> 00:01:37,759
that the backending technique used in

34
00:01:37,759 --> 00:01:41,759
krgw90 will incur a security issue

35
00:01:41,759 --> 00:01:45,420
therefore we designed two PSO protocols

36
00:01:45,420 --> 00:01:47,939
that are also based on symmetric key

37
00:01:47,939 --> 00:01:50,520
operations and Achieve an improvement

38
00:01:50,520 --> 00:01:53,579
without using the backing technique

39
00:01:53,579 --> 00:01:56,700
also we considered unbalanced data size

40
00:01:56,700 --> 00:01:59,820
our true pic0 Protocols are individually

41
00:01:59,820 --> 00:02:02,040
applicable for different unbalanced

42
00:02:02,040 --> 00:02:03,899
cases

43
00:02:03,899 --> 00:02:06,540
finally we perform a comprehensive

44
00:02:06,540 --> 00:02:10,020
evaluation and comparison

45
00:02:10,020 --> 00:02:12,900
let's move on to our main ideas first I

46
00:02:12,900 --> 00:02:15,120
will introduce a simple fact and then

47
00:02:15,120 --> 00:02:17,879
explain how we design our protocol based

48
00:02:17,879 --> 00:02:20,459
on the simple factors step by step we

49
00:02:20,459 --> 00:02:24,360
assume that atom Y is shared to S1 and

50
00:02:24,360 --> 00:02:29,099
S2 such that y y is equal to as 1 or

51
00:02:29,099 --> 00:02:33,000
plus S2 then given another item x if x

52
00:02:33,000 --> 00:02:37,379
is equal to Y then x o plus S1 is equal

53
00:02:37,379 --> 00:02:41,580
to S2 otherwise X or plus S1 isn't equal

54
00:02:41,580 --> 00:02:44,239
to S2

55
00:02:44,340 --> 00:02:46,500
next I will show how it takes about

56
00:02:46,500 --> 00:02:48,900
simple fact as a starting point to

57
00:02:48,900 --> 00:02:51,660
design our protocols let's first look at

58
00:02:51,660 --> 00:02:54,840
one mpsu which means that the sender

59
00:02:54,840 --> 00:02:57,660
only holds one item X and the receiver

60
00:02:57,660 --> 00:02:59,940
has a set y

61
00:02:59,940 --> 00:03:03,000
that includes an items and the receiver

62
00:03:03,000 --> 00:03:06,900
wants to know if x is inside y if x is

63
00:03:06,900 --> 00:03:10,440
inside y then the receiver cannot know

64
00:03:10,440 --> 00:03:13,080
anything anything more about the item X

65
00:03:13,080 --> 00:03:15,540
otherwise the receiver needs to obtain

66
00:03:15,540 --> 00:03:17,340
the item X

67
00:03:17,340 --> 00:03:20,159
most specifically the receiver needs to

68
00:03:20,159 --> 00:03:24,360
know for each item y i if it is equal to

69
00:03:24,360 --> 00:03:28,379
item X without direct without directly

70
00:03:28,379 --> 00:03:31,680
obtaining the item X so we can use the

71
00:03:31,680 --> 00:03:34,500
about simple fact so receiver needs to

72
00:03:34,500 --> 00:03:40,620
share hyi to two shares as i1 and isi2

73
00:03:40,620 --> 00:03:44,159
then the receiver sends the size of X1

74
00:03:44,159 --> 00:03:47,640
including these shares to the sender

75
00:03:47,640 --> 00:03:51,120
then the sender can use x to oblast each

76
00:03:51,120 --> 00:03:55,019
year inside S1 to obtain the set I and

77
00:03:55,019 --> 00:03:57,599
sends set I to the receiver

78
00:03:57,599 --> 00:04:00,780
we can see that if x is equal to y i

79
00:04:00,780 --> 00:04:04,500
which means that X is inside y then as

80
00:04:04,500 --> 00:04:09,000
i1 or plus X is equal to X I2 so this

81
00:04:09,000 --> 00:04:11,879
intersection isn't empathy so the

82
00:04:11,879 --> 00:04:14,340
receiver knows that X is inside y

83
00:04:14,340 --> 00:04:17,040
otherwise the receiver knows that X

84
00:04:17,040 --> 00:04:19,620
isn't inside y

85
00:04:19,620 --> 00:04:23,160
if x isn't inside y because the receiver

86
00:04:23,160 --> 00:04:27,240
also knows they also knows this share so

87
00:04:27,240 --> 00:04:29,280
the receiver can use this share to

88
00:04:29,280 --> 00:04:32,940
recover the item X otherwise

89
00:04:32,940 --> 00:04:36,419
because the receiver knows as I2 as I2

90
00:04:36,419 --> 00:04:39,660
is in this intersection and the receiver

91
00:04:39,660 --> 00:04:41,340
knows that y i

92
00:04:41,340 --> 00:04:44,699
as I2 is the shear of black eye

93
00:04:44,699 --> 00:04:47,580
so the receiver can know that Y is in

94
00:04:47,580 --> 00:04:49,380
the intersection

95
00:04:49,380 --> 00:04:52,620
but in the PSU this information is not

96
00:04:52,620 --> 00:04:55,740
allowed to be known by the receiver

97
00:04:55,740 --> 00:04:59,520
so we need to change this this step

98
00:04:59,520 --> 00:05:02,160
the reason behind the issue is that the

99
00:05:02,160 --> 00:05:04,500
receiver knows that the relationship

100
00:05:04,500 --> 00:05:07,320
between the items and these shares

101
00:05:07,320 --> 00:05:10,139
so to solve this issue we need to hide

102
00:05:10,139 --> 00:05:11,639
this relationship

103
00:05:11,639 --> 00:05:13,800
we use the permute and share as a

104
00:05:13,800 --> 00:05:14,880
building block

105
00:05:14,880 --> 00:05:17,820
to generate these shares

106
00:05:17,820 --> 00:05:20,759
most specifically the receiver inputs

107
00:05:20,759 --> 00:05:23,699
suicide Y and the standard includes a

108
00:05:23,699 --> 00:05:27,120
random either a random permutation path

109
00:05:27,120 --> 00:05:29,520
after the permute and Shear the two

110
00:05:29,520 --> 00:05:33,180
parties will obtain the shuffled shares

111
00:05:33,180 --> 00:05:35,460
because the receiver doesn't know the

112
00:05:35,460 --> 00:05:38,639
permutation path so given as I2 the

113
00:05:38,639 --> 00:05:41,100
receiver cannot know the original item

114
00:05:41,100 --> 00:05:42,900
Yi

115
00:05:42,900 --> 00:05:45,300
here I added the next step where the

116
00:05:45,300 --> 00:05:48,300
sender computes the set I and sends the

117
00:05:48,300 --> 00:05:50,520
set I to the receiver and the receiver

118
00:05:50,520 --> 00:05:53,160
can use the send I to know if x is

119
00:05:53,160 --> 00:05:57,240
inside y if x is isn't inside y then the

120
00:05:57,240 --> 00:05:59,699
receiver needs to obtain the item X

121
00:05:59,699 --> 00:06:02,340
but here because the shears are shuffled

122
00:06:02,340 --> 00:06:04,979
so the receiver cannot directly recover

123
00:06:04,979 --> 00:06:07,919
the item X so here we use the obliver's

124
00:06:07,919 --> 00:06:10,740
transfer to help the receiver to uh to

125
00:06:10,740 --> 00:06:12,300
obtain the item X

126
00:06:12,300 --> 00:06:15,900
and to guarantee that if x is inside y

127
00:06:15,900 --> 00:06:18,660
the receiver can just obtain a dummy

128
00:06:18,660 --> 00:06:22,560
item but there is still an issue if x is

129
00:06:22,560 --> 00:06:26,100
in set y so receiver knows that Y and

130
00:06:26,100 --> 00:06:29,100
Shear side as 2 and these two sides

131
00:06:29,100 --> 00:06:32,400
determine the shear side as one obtained

132
00:06:32,400 --> 00:06:34,979
by the sender so

133
00:06:34,979 --> 00:06:37,979
so the S1 cannot be used to hide the

134
00:06:37,979 --> 00:06:40,520
item X

135
00:06:41,639 --> 00:06:44,400
therefore we need to add some secret key

136
00:06:44,400 --> 00:06:48,318
before Computing the set Act

137
00:06:49,020 --> 00:06:51,720
before Computing set I the part is

138
00:06:51,720 --> 00:06:54,120
additional execute or melting point of

139
00:06:54,120 --> 00:06:56,900
believer's prf through multipoint

140
00:06:56,900 --> 00:07:00,120
multi-point oprf the sender obtains a

141
00:07:00,120 --> 00:07:03,300
key K that is not known by the receiver

142
00:07:03,300 --> 00:07:06,660
and the receiver obtains the prf values

143
00:07:06,660 --> 00:07:09,419
of his shares

144
00:07:09,419 --> 00:07:13,860
then the sender can use the key key K to

145
00:07:13,860 --> 00:07:16,680
uh to compute the prf value for each

146
00:07:16,680 --> 00:07:20,520
item in the original set I and obtains a

147
00:07:20,520 --> 00:07:23,340
new set I then since the new set I to

148
00:07:23,340 --> 00:07:26,880
the receiver so the receiver can

149
00:07:26,880 --> 00:07:30,539
can check if x is inside Y and obtains

150
00:07:30,539 --> 00:07:34,319
item X or dummy item as before

151
00:07:34,319 --> 00:07:36,440
now let's move on to the general case

152
00:07:36,440 --> 00:07:39,419
mmpsu where the sender also holds a set

153
00:07:39,419 --> 00:07:42,599
x with size M the shears obtained by the

154
00:07:42,599 --> 00:07:45,300
sender are uniformly random so that they

155
00:07:45,300 --> 00:07:47,940
can be used repeatedly for all items in

156
00:07:47,940 --> 00:07:50,280
set X therefore the permutation of

157
00:07:50,280 --> 00:07:52,680
permute and shear and melting point of

158
00:07:52,680 --> 00:07:55,800
prf just need to be performed once but

159
00:07:55,800 --> 00:07:59,699
for each item x i instead X the sender

160
00:07:59,699 --> 00:08:03,180
needs to generate a set II and each II

161
00:08:03,180 --> 00:08:06,000
will obtain an items so the computation

162
00:08:06,000 --> 00:08:09,539
and communication course are both omm so

163
00:08:09,539 --> 00:08:13,818
we need to optimize the basic scheme

164
00:08:15,479 --> 00:08:17,759
our goal is to reduce the number of

165
00:08:17,759 --> 00:08:21,120
atoms in each set II in the basic scheme

166
00:08:21,120 --> 00:08:23,699
from the center's point of view any item

167
00:08:23,699 --> 00:08:26,819
in y may be equal to x i so the sender

168
00:08:26,819 --> 00:08:29,639
needs to use item x i or plus each Shear

169
00:08:29,639 --> 00:08:32,339
so that there are n items in each in

170
00:08:32,339 --> 00:08:35,458
each side II so our key idea is to

171
00:08:35,458 --> 00:08:37,979
reduce the number of candid items in y

172
00:08:37,979 --> 00:08:40,979
that may be equal to x i we use the

173
00:08:40,979 --> 00:08:44,640
Google Hashi to achieve our goal

174
00:08:44,640 --> 00:08:47,820
here I give an example to explain our

175
00:08:47,820 --> 00:08:50,880
optimization the receiver first insert Y

176
00:08:50,880 --> 00:08:54,500
into the Google history table

177
00:08:54,500 --> 00:08:57,779
parameterized by hash functions H1 and

178
00:08:57,779 --> 00:09:00,839
H2 in our work we set the stash size as

179
00:09:00,839 --> 00:09:04,980
Zero by adjusting the number of bins and

180
00:09:04,980 --> 00:09:07,200
the number of hash functions

181
00:09:07,200 --> 00:09:11,220
we assume that for atom x i H1 x i is

182
00:09:11,220 --> 00:09:15,360
equal to 2 and h2xi is equal to 6 which

183
00:09:15,360 --> 00:09:18,320
means that X I may be mapped to the

184
00:09:18,320 --> 00:09:21,240
second or the sixth being

185
00:09:21,240 --> 00:09:26,160
so only y1 and Y3 may be equal to x i so

186
00:09:26,160 --> 00:09:28,620
the center only needs to use the Shears

187
00:09:28,620 --> 00:09:32,519
of y1 and Y3 to generate II

188
00:09:32,519 --> 00:09:34,680
this figure shows the optimization

189
00:09:34,680 --> 00:09:37,140
process the receiver includes the Google

190
00:09:37,140 --> 00:09:39,660
hash table filled by set y to the

191
00:09:39,660 --> 00:09:41,940
permutation and shear and since the

192
00:09:41,940 --> 00:09:44,519
sender knows the permutation path so the

193
00:09:44,519 --> 00:09:46,980
sender can pick out the Shears of y1 and

194
00:09:46,980 --> 00:09:49,800
Y3 so that there are only two items

195
00:09:49,800 --> 00:09:53,339
inside II after optimization the overall

196
00:09:53,339 --> 00:09:55,740
cost of our protocol is all unlocked

197
00:09:55,740 --> 00:09:59,220
will earn is thus the size of size X and

198
00:09:59,220 --> 00:10:00,660
set y

199
00:10:00,660 --> 00:10:02,820
in our work we also considered

200
00:10:02,820 --> 00:10:05,040
unbalanced data size in the protocol

201
00:10:05,040 --> 00:10:07,260
introduced before shuffling dominates

202
00:10:07,260 --> 00:10:09,540
the course and it is promote on the

203
00:10:09,540 --> 00:10:11,880
receiver site so the protocol isn't

204
00:10:11,880 --> 00:10:13,740
suitable for the case where the receiver

205
00:10:13,740 --> 00:10:15,720
side is much larger than the standard

206
00:10:15,720 --> 00:10:18,600
site in our work we also design a new

207
00:10:18,600 --> 00:10:20,820
version which shuffles the center side

208
00:10:20,820 --> 00:10:23,100
when the standard side is smaller the

209
00:10:23,100 --> 00:10:25,440
duration is more suitable if you are

210
00:10:25,440 --> 00:10:27,600
interested in it please refer to our

211
00:10:27,600 --> 00:10:30,360
paper for more details

212
00:10:30,360 --> 00:10:33,660
last we compare our protocol with krtw

213
00:10:33,660 --> 00:10:36,420
19 we can see that for large data sets

214
00:10:36,420 --> 00:10:38,580
we can achieve a four to five times

215
00:10:38,580 --> 00:10:41,100
Improvement in runtime as for the

216
00:10:41,100 --> 00:10:45,000
communication we can save 15 percent so

217
00:10:45,000 --> 00:10:47,459
work by Gary Mela is a concurrent and

218
00:10:47,459 --> 00:10:49,980
independent work they also achieve an

219
00:10:49,980 --> 00:10:52,800
improvement over krtw 19 but because

220
00:10:52,800 --> 00:10:55,740
they also use reparative polynomial

221
00:10:55,740 --> 00:10:58,140
interpolations their protocol is about

222
00:10:58,140 --> 00:11:01,220
two times slower than ours

223
00:11:01,220 --> 00:11:04,320
this link refers to the formation of our

224
00:11:04,320 --> 00:11:06,959
paper if you have any questions feel

225
00:11:06,959 --> 00:11:11,060
free to contact me that's all thank you

