1
00:00:07,820 --> 00:00:10,679
this is lend me our ear it's joint work

2
00:00:10,679 --> 00:00:12,960
with Daniel genkin and omnisan and Iran

3
00:00:12,960 --> 00:00:14,059
Cromer

4
00:00:14,059 --> 00:00:16,740
and it's about side channels and we have

5
00:00:16,740 --> 00:00:19,260
two we usually talk about two types of

6
00:00:19,260 --> 00:00:22,140
side channels software where the

7
00:00:22,140 --> 00:00:24,260
attacker is

8
00:00:24,260 --> 00:00:27,560
timing their own computation while

9
00:00:27,560 --> 00:00:30,300
either sharing a resource with a victim

10
00:00:30,300 --> 00:00:32,520
or interacting with the victim and then

11
00:00:32,520 --> 00:00:34,980
the timing patterns of the attacker

12
00:00:34,980 --> 00:00:37,399
reveal the axis patterns of the victim

13
00:00:37,399 --> 00:00:40,200
but this talk is more about physical

14
00:00:40,200 --> 00:00:42,180
side channels where the attacker

15
00:00:42,180 --> 00:00:45,660
actually puts a physical probe next to a

16
00:00:45,660 --> 00:00:48,719
victim device and by analyzing the

17
00:00:48,719 --> 00:00:51,180
emissions from the victim's device they

18
00:00:51,180 --> 00:00:53,760
can tell something about what the victim

19
00:00:53,760 --> 00:00:56,460
device is doing what Secrets it holds

20
00:00:56,460 --> 00:01:00,660
Etc and passive uh physical sorry

21
00:01:00,660 --> 00:01:02,640
physical side channels are nice because

22
00:01:02,640 --> 00:01:04,680
they are passive they don't need the

23
00:01:04,680 --> 00:01:06,119
sense that they don't need to you don't

24
00:01:06,119 --> 00:01:07,500
need to execute any code in the Target

25
00:01:07,500 --> 00:01:08,820
you don't need to interact with the

26
00:01:08,820 --> 00:01:10,260
target at all all you need to do is

27
00:01:10,260 --> 00:01:11,460
measure the target's emissions

28
00:01:11,460 --> 00:01:14,520
externally to the device but this does

29
00:01:14,520 --> 00:01:16,500
require physical proximity you have to

30
00:01:16,500 --> 00:01:19,140
put to attach the probe next physically

31
00:01:19,140 --> 00:01:21,420
next to the device and that can be

32
00:01:21,420 --> 00:01:24,600
mitigated and maybe it's excluded from

33
00:01:24,600 --> 00:01:26,700
some threat models so what we really

34
00:01:26,700 --> 00:01:29,880
want is a physical side Channel attack

35
00:01:29,880 --> 00:01:32,400
that can be done completely remotely So

36
00:01:32,400 --> 00:01:34,439
today we're going to challenge the the

37
00:01:34,439 --> 00:01:37,560
long held assumption that physical side

38
00:01:37,560 --> 00:01:39,560
channels require physical proximity

39
00:01:39,560 --> 00:01:41,579
intuitive though that assumption might

40
00:01:41,579 --> 00:01:46,020
be and we're going to do this by

41
00:01:46,020 --> 00:01:47,460
leveraging the fact that a laptop

42
00:01:47,460 --> 00:01:50,220
actually has everything needed to sort

43
00:01:50,220 --> 00:01:53,340
of measure itself so it has a microphone

44
00:01:53,340 --> 00:01:55,860
obviously and this microphone is

45
00:01:55,860 --> 00:01:57,840
connected internally to the sound card

46
00:01:57,840 --> 00:02:00,600
using wires that go very close to where

47
00:02:00,600 --> 00:02:04,259
the CPU is and this mirrors

48
00:02:04,259 --> 00:02:07,799
um the the picture of uh an actual

49
00:02:07,799 --> 00:02:10,139
physical side if side Channel attack

50
00:02:10,139 --> 00:02:12,300
that I showed a couple of slides ago and

51
00:02:12,300 --> 00:02:14,099
that's not a coincidence maybe we can

52
00:02:14,099 --> 00:02:18,360
use these uh emissions from uh the CPU

53
00:02:18,360 --> 00:02:20,879
um and we can analyze what the sound

54
00:02:20,879 --> 00:02:23,879
card picks up from them and to

55
00:02:23,879 --> 00:02:25,800
demonstrate the feasibility of this the

56
00:02:25,800 --> 00:02:27,360
first thing we did was we wrote this

57
00:02:27,360 --> 00:02:30,840
program that iterates infinitely over uh

58
00:02:30,840 --> 00:02:33,360
0.8 seconds of multiplication followed

59
00:02:33,360 --> 00:02:35,940
by 0.4 seconds of of halting this is

60
00:02:35,940 --> 00:02:38,040
just sleeping and we can see the the

61
00:02:38,040 --> 00:02:40,080
same periodicity of this program we can

62
00:02:40,080 --> 00:02:40,860
see

63
00:02:40,860 --> 00:02:44,040
um it happening in the uh the

64
00:02:44,040 --> 00:02:46,200
visualization of the signal captured in

65
00:02:46,200 --> 00:02:47,099
the

66
00:02:47,099 --> 00:02:49,019
um by the microphone visualization

67
00:02:49,019 --> 00:02:52,739
visualized as a spectrogram so the

68
00:02:52,739 --> 00:02:56,519
uh vertical axis is frequency and the uh

69
00:02:56,519 --> 00:02:58,319
sorry the horizontal axis is frequency

70
00:02:58,319 --> 00:03:00,840
the vertical vertical axis is time and

71
00:03:00,840 --> 00:03:02,280
we can see the same periods of

72
00:03:02,280 --> 00:03:04,140
multiplication and then sleeping in the

73
00:03:04,140 --> 00:03:06,000
signal so we know that the sound card

74
00:03:06,000 --> 00:03:09,800
does pick up on leakage from the CPU

75
00:03:09,800 --> 00:03:12,540
operations performed by the CPU appear

76
00:03:12,540 --> 00:03:16,379
on this on the sound cards signal this

77
00:03:16,379 --> 00:03:18,420
happens across many devices so basically

78
00:03:18,420 --> 00:03:20,760
every laptop we experimented with we saw

79
00:03:20,760 --> 00:03:23,040
the same pattern where we could see

80
00:03:23,040 --> 00:03:25,379
computation on the signal recorded by

81
00:03:25,379 --> 00:03:26,940
the microphone

82
00:03:26,940 --> 00:03:30,000
and that's nice uh but it's even nicer

83
00:03:30,000 --> 00:03:33,599
if it happens over uh if if the the

84
00:03:33,599 --> 00:03:36,720
signal is recoverable by the other part

85
00:03:36,720 --> 00:03:39,599
by the other end of voice over at P call

86
00:03:39,599 --> 00:03:42,780
because then we can hope that yet this

87
00:03:42,780 --> 00:03:46,620
attack can be mounted remotely so uh we

88
00:03:46,620 --> 00:03:48,540
transmitted the signal while running

89
00:03:48,540 --> 00:03:51,120
this uh program that has multiplication

90
00:03:51,120 --> 00:03:53,280
and then sleeping we transmitted the

91
00:03:53,280 --> 00:03:56,099
signal to another party using common uh

92
00:03:56,099 --> 00:03:58,620
voice over IP applications and every

93
00:03:58,620 --> 00:04:01,140
time we saw the same pattern where the

94
00:04:01,140 --> 00:04:03,480
computation of the CPU or the patterns

95
00:04:03,480 --> 00:04:05,159
that we introduced into the computations

96
00:04:05,159 --> 00:04:07,560
of the CPU are observable by the other

97
00:04:07,560 --> 00:04:10,019
party in the Voiceover IP connection

98
00:04:10,019 --> 00:04:13,500
which was cool but this is not what

99
00:04:13,500 --> 00:04:15,480
we're about we want to mount an actual

100
00:04:15,480 --> 00:04:17,880
attack and we want to identify websites

101
00:04:17,880 --> 00:04:21,000
if we can so to do that we are assuming

102
00:04:21,000 --> 00:04:23,520
that the victim is conversing using some

103
00:04:23,520 --> 00:04:25,440
Voiceover IP software with an attacker

104
00:04:25,440 --> 00:04:28,979
while they are visiting Twitter or other

105
00:04:28,979 --> 00:04:31,560
websites and

106
00:04:31,560 --> 00:04:32,160
um

107
00:04:32,160 --> 00:04:34,740
and the audio from the victims

108
00:04:34,740 --> 00:04:37,860
environment but also any any signals

109
00:04:37,860 --> 00:04:40,080
that the microphone picked up are

110
00:04:40,080 --> 00:04:42,180
transmitted

111
00:04:42,180 --> 00:04:45,479
to the attacker via the Voiceover IP

112
00:04:45,479 --> 00:04:48,240
call and the attacker is going to try to

113
00:04:48,240 --> 00:04:50,340
analyze them we used convolutional

114
00:04:50,340 --> 00:04:52,500
neural networks to extract the identity

115
00:04:52,500 --> 00:04:54,840
of the websites we could reach 94

116
00:04:54,840 --> 00:04:57,300
accuracy for 14-way classification of

117
00:04:57,300 --> 00:05:00,540
websites indicating that you can you can

118
00:05:00,540 --> 00:05:02,460
know at least from a few common

119
00:05:02,460 --> 00:05:04,259
activities that the the victim is

120
00:05:04,259 --> 00:05:07,259
performing you can tell between them we

121
00:05:07,259 --> 00:05:09,000
have a deeper characterization of these

122
00:05:09,000 --> 00:05:10,919
numbers including more using more

123
00:05:10,919 --> 00:05:12,960
websites in the paper so I encourage you

124
00:05:12,960 --> 00:05:14,759
to check out the full paper

125
00:05:14,759 --> 00:05:17,520
now website identification is a small

126
00:05:17,520 --> 00:05:21,360
business is a closed world problem uh so

127
00:05:21,360 --> 00:05:23,220
we're going to try to do cryptographic

128
00:05:23,220 --> 00:05:25,740
key extraction which is always uh uh

129
00:05:25,740 --> 00:05:28,680
really nice with uh with side channels

130
00:05:28,680 --> 00:05:29,580
um

131
00:05:29,580 --> 00:05:31,680
and specifically we're assuming the

132
00:05:31,680 --> 00:05:34,199
victim is performing uh libg Crypt

133
00:05:34,199 --> 00:05:36,900
signing using ecdsa using the lib

134
00:05:36,900 --> 00:05:39,600
decrypt implementation of DC DSA

135
00:05:39,600 --> 00:05:41,340
um and they're on a voiceover IB call

136
00:05:41,340 --> 00:05:43,320
again with the attacker and the attacker

137
00:05:43,320 --> 00:05:46,020
is going to try to recover the victim's

138
00:05:46,020 --> 00:05:49,740
secret signing key from the um from just

139
00:05:49,740 --> 00:05:53,520
the the call while from having a call

140
00:05:53,520 --> 00:05:55,919
with them while they are signing

141
00:05:55,919 --> 00:05:57,720
messages and

142
00:05:57,720 --> 00:05:59,520
um so we're going to use uh

143
00:05:59,520 --> 00:06:01,380
vulnerability of the ecdsa

144
00:06:01,380 --> 00:06:03,419
implementation and it goes something

145
00:06:03,419 --> 00:06:07,680
like this so ecdsa has three uh

146
00:06:07,680 --> 00:06:09,960
components key generation signing and

147
00:06:09,960 --> 00:06:13,979
verification the signing operation has a

148
00:06:13,979 --> 00:06:16,860
scalable Point multiplication where the

149
00:06:16,860 --> 00:06:18,600
scalar is supposed to be kept secret

150
00:06:18,600 --> 00:06:20,580
because it's supposed to be kept secret

151
00:06:20,580 --> 00:06:22,680
it has constant time of limitation but

152
00:06:22,680 --> 00:06:25,500
as Minerva found out and published uh

153
00:06:25,500 --> 00:06:29,340
this constant time is uh is buggy in um

154
00:06:29,340 --> 00:06:31,500
in the sense that um

155
00:06:31,500 --> 00:06:35,639
that the loop that implements one of the

156
00:06:35,639 --> 00:06:37,620
loops that implement the multiplication

157
00:06:37,620 --> 00:06:41,639
is keeps skips the leading zeros in the

158
00:06:41,639 --> 00:06:44,520
um in the knots

159
00:06:44,520 --> 00:06:45,919
um and

160
00:06:45,919 --> 00:06:49,740
the this results in a linear dependency

161
00:06:49,740 --> 00:06:52,440
between the the nons and the signing

162
00:06:52,440 --> 00:06:54,300
time I forgot to say the scalar is just

163
00:06:54,300 --> 00:06:56,220
a random knots but uh but it's supposed

164
00:06:56,220 --> 00:06:58,680
to be cut secret again so um so there's

165
00:06:58,680 --> 00:07:00,180
a linear dependency between the bit

166
00:07:00,180 --> 00:07:03,300
length of the nonce and the signing time

167
00:07:03,300 --> 00:07:04,210
um and so

168
00:07:04,210 --> 00:07:04,800
[Music]

169
00:07:04,800 --> 00:07:05,639
um

170
00:07:05,639 --> 00:07:07,380
we are going to do some signal

171
00:07:07,380 --> 00:07:10,500
processing uh to try to infer this

172
00:07:10,500 --> 00:07:13,860
signing time oh something like that so

173
00:07:13,860 --> 00:07:16,020
we're going to take uh the signal

174
00:07:16,020 --> 00:07:18,960
transmitted sorry transform it to the to

175
00:07:18,960 --> 00:07:22,080
the time domain uh and then we're going

176
00:07:22,080 --> 00:07:24,000
to do a band pass and demodulation and

177
00:07:24,000 --> 00:07:26,759
what this results in is is this nice

178
00:07:26,759 --> 00:07:29,220
signal where there is a valley in it and

179
00:07:29,220 --> 00:07:30,960
we can we know that the value

180
00:07:30,960 --> 00:07:33,840
corresponds to the signature time

181
00:07:33,840 --> 00:07:37,440
uh but it only noisily corresponds to

182
00:07:37,440 --> 00:07:40,919
the signature time so unfortunately

183
00:07:40,919 --> 00:07:43,560
um it's not that we can't directly use

184
00:07:43,560 --> 00:07:45,539
that as signature time otherwise we

185
00:07:45,539 --> 00:07:47,460
would not get very good results and we

186
00:07:47,460 --> 00:07:49,560
would not be able to recover the key so

187
00:07:49,560 --> 00:07:50,880
what we are going to do is we're going

188
00:07:50,880 --> 00:07:52,919
to denoise it and we're specifically

189
00:07:52,919 --> 00:07:55,860
going to to use um ecdsa implementation

190
00:07:55,860 --> 00:07:57,539
RFC

191
00:07:57,539 --> 00:08:00,660
um 6979 where the nonce is

192
00:08:00,660 --> 00:08:02,220
deterministically derived from the key

193
00:08:02,220 --> 00:08:04,199
and from the message and so we're going

194
00:08:04,199 --> 00:08:06,360
to group The Traces by their message

195
00:08:06,360 --> 00:08:07,919
they're always the same key so they're

196
00:08:07,919 --> 00:08:10,259
all going to have the same nonce and uh

197
00:08:10,259 --> 00:08:13,259
we're gonna use the fact that the uh the

198
00:08:13,259 --> 00:08:15,599
nonce is deterministically derived the

199
00:08:15,599 --> 00:08:18,240
2D noise and we're basically going to

200
00:08:18,240 --> 00:08:21,240
um be able to average out a lot of uh

201
00:08:21,240 --> 00:08:24,419
different uh signing operation traces

202
00:08:24,419 --> 00:08:26,940
um to denoise them and then we're going

203
00:08:26,940 --> 00:08:29,280
to select the shortest signatures now

204
00:08:29,280 --> 00:08:32,159
the shorter signatures we know a lot of

205
00:08:32,159 --> 00:08:35,000
the leading bits and once we have enough

206
00:08:35,000 --> 00:08:37,260
uh key enough

207
00:08:37,260 --> 00:08:41,640
traces of or enough messages for which

208
00:08:41,640 --> 00:08:45,899
we know the signature and the uh leading

209
00:08:45,899 --> 00:08:49,200
bits of it then we can use the lattice

210
00:08:49,200 --> 00:08:51,120
attack of Albert and Henninger this is

211
00:08:51,120 --> 00:08:52,740
exactly what we did and we were able to

212
00:08:52,740 --> 00:08:55,980
extract the key from traces of 20 000

213
00:08:55,980 --> 00:09:00,120
signed messages each repeated 91 times

214
00:09:00,120 --> 00:09:02,399
um and I think this happened in like 20

215
00:09:02,399 --> 00:09:05,100
minutes once we collected all the traces

216
00:09:05,100 --> 00:09:07,080
um and finally I'm going to talk about

217
00:09:07,080 --> 00:09:10,440
our killer app so to speak uh it's a

218
00:09:10,440 --> 00:09:13,440
we're going to use our side channel to

219
00:09:13,440 --> 00:09:14,580
cheat on Counter-Strike and

220
00:09:14,580 --> 00:09:16,800
Counter-Strike is you know it sounds

221
00:09:16,800 --> 00:09:18,420
funny but some people take it very

222
00:09:18,420 --> 00:09:21,019
seriously it's it could be considered a

223
00:09:21,019 --> 00:09:23,700
classic example of an esport that's

224
00:09:23,700 --> 00:09:25,560
played competitively and many people

225
00:09:25,560 --> 00:09:27,839
take it very seriously

226
00:09:27,839 --> 00:09:30,899
um and uh and here we have a similar

227
00:09:30,899 --> 00:09:33,180
attacker model except uh the victim is

228
00:09:33,180 --> 00:09:34,260
trying to do something different I'll

229
00:09:34,260 --> 00:09:36,000
get to that but in our attacker model

230
00:09:36,000 --> 00:09:39,120
the victim is uh again uh is playing

231
00:09:39,120 --> 00:09:42,660
against the attacker they are on the on

232
00:09:42,660 --> 00:09:44,519
a Voiceover IP call with them which is

233
00:09:44,519 --> 00:09:45,660
actually common if they're playing

234
00:09:45,660 --> 00:09:48,660
one-on-one against each other and uh

235
00:09:48,660 --> 00:09:50,940
again they're transmitting like audio is

236
00:09:50,940 --> 00:09:53,160
being transmitted to the attacker and

237
00:09:53,160 --> 00:09:55,320
the attacker is going to try to say that

238
00:09:55,320 --> 00:09:57,899
the victim is hiding behind some Corner

239
00:09:57,899 --> 00:10:00,000
because counter-strikes has a bunch of

240
00:10:00,000 --> 00:10:02,399
corners and Nooks that that people can

241
00:10:02,399 --> 00:10:04,980
that their avatars of people in the game

242
00:10:04,980 --> 00:10:07,680
can hide behind and uh it's definitely

243
00:10:07,680 --> 00:10:09,720
some somebody who's playing against you

244
00:10:09,720 --> 00:10:11,220
will definitely want to know where you

245
00:10:11,220 --> 00:10:14,399
are so the and to this is there's going

246
00:10:14,399 --> 00:10:16,680
to be a demonstration so just you you

247
00:10:16,680 --> 00:10:19,440
see this is where the victim is this is

248
00:10:19,440 --> 00:10:20,880
sorry this is where the attacker is this

249
00:10:20,880 --> 00:10:22,140
is where the victim is they basically

250
00:10:22,140 --> 00:10:24,120
don't know where each other is so they

251
00:10:24,120 --> 00:10:25,680
it would be useful if they can find out

252
00:10:25,680 --> 00:10:27,720
and we're going to use the fact that

253
00:10:27,720 --> 00:10:31,080
when the attacker uh becomes when the

254
00:10:31,080 --> 00:10:33,600
attacker go get goes into the victim's

255
00:10:33,600 --> 00:10:37,019
line of sight the victim's laptop will

256
00:10:37,019 --> 00:10:38,700
actually be rendering the attacker's

257
00:10:38,700 --> 00:10:41,160
Avatar so the attacker is going to move

258
00:10:41,160 --> 00:10:43,380
in and out of the victim's line of sight

259
00:10:43,380 --> 00:10:45,660
still hidden behind an object so they

260
00:10:45,660 --> 00:10:47,100
can't reveal them this is what they

261
00:10:47,100 --> 00:10:49,560
can't actually see them but they will

262
00:10:49,560 --> 00:10:51,779
um their machine will render their

263
00:10:51,779 --> 00:10:53,279
Avatar even though they can't see them

264
00:10:53,279 --> 00:10:55,380
that's just some technical part of how

265
00:10:55,380 --> 00:10:58,079
uh contrast right works

266
00:10:58,079 --> 00:11:02,220
uh and uh this looks like this uh so the

267
00:11:02,220 --> 00:11:04,140
attacker is moving to the right hand

268
00:11:04,140 --> 00:11:06,860
side of the truck where they see this

269
00:11:06,860 --> 00:11:11,100
pattern of uh stripes on their signal

270
00:11:11,100 --> 00:11:13,019
spectrogram and then they're moving left

271
00:11:13,019 --> 00:11:15,060
and they don't see this pattern anymore

272
00:11:15,060 --> 00:11:16,620
and then they're moving to the right and

273
00:11:16,620 --> 00:11:18,360
the pattern changes again and again you

274
00:11:18,360 --> 00:11:22,140
see these Stripes so they know that the

275
00:11:22,140 --> 00:11:24,360
the pattern indicates rendering so they

276
00:11:24,360 --> 00:11:28,260
know that the victim is uh hiding on the

277
00:11:28,260 --> 00:11:30,660
right hand side of the truck and they

278
00:11:30,660 --> 00:11:32,880
step out of the truck and they flank the

279
00:11:32,880 --> 00:11:35,579
victim and they kill them from behind

280
00:11:35,579 --> 00:11:38,700
and this concludes the Counter-Strike

281
00:11:38,700 --> 00:11:39,860
attack

282
00:11:39,860 --> 00:11:42,240
I certainly encourage you to check out

283
00:11:42,240 --> 00:11:43,920
the paper it has a lot of other cool

284
00:11:43,920 --> 00:11:45,779
stuff in it and with this we will

285
00:11:45,779 --> 00:11:49,279
conclude and take questions

