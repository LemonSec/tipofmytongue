1
00:00:01,199 --> 00:00:04,199
okay

2
00:00:09,120 --> 00:00:11,760
hello everyone my name is Timothy triple

3
00:00:11,760 --> 00:00:13,500
and I'm a software engineer at Google on

4
00:00:13,500 --> 00:00:15,059
the open Titan team

5
00:00:15,059 --> 00:00:17,039
today I'm going to talk about fuzzing

6
00:00:17,039 --> 00:00:18,779
Hardware like software which we got a

7
00:00:18,779 --> 00:00:21,020
brief introduction to in the last paper

8
00:00:21,020 --> 00:00:24,359
this was uh work I started back in 2020

9
00:00:24,359 --> 00:00:26,460
as a research intern on the open Titan

10
00:00:26,460 --> 00:00:28,980
team and continued during my PhD at

11
00:00:28,980 --> 00:00:31,019
Michigan

12
00:00:31,019 --> 00:00:33,600
this was joint work with my PhD advisor

13
00:00:33,600 --> 00:00:37,200
Professor Kong shin uh my host team at

14
00:00:37,200 --> 00:00:39,120
Google including Alex chernakovsky

15
00:00:39,120 --> 00:00:42,719
Garrett Kelly and Dom Rizzo and my PhD

16
00:00:42,719 --> 00:00:46,520
co-advisor Professor Matt Hicks

17
00:00:53,700 --> 00:00:55,260
since the Inception of the integrated

18
00:00:55,260 --> 00:00:57,300
circuit Moore's Law and Denard scaling

19
00:00:57,300 --> 00:00:59,160
have enabled us to exponentially

20
00:00:59,160 --> 00:01:00,780
increase the number of transistors

21
00:01:00,780 --> 00:01:04,500
packed within shown here in Orange

22
00:01:04,500 --> 00:01:07,799
this trend was also accompanied by

23
00:01:07,799 --> 00:01:09,540
dramatic improvements in single threaded

24
00:01:09,540 --> 00:01:12,119
performance in blue clock frequency in

25
00:01:12,119 --> 00:01:14,520
green and Power in red

26
00:01:14,520 --> 00:01:16,920
unfortunately about 15 years ago these

27
00:01:16,920 --> 00:01:18,240
some of these Trends started to level

28
00:01:18,240 --> 00:01:21,720
off due to fundamental physical limits

29
00:01:21,720 --> 00:01:23,820
to combat this and further push

30
00:01:23,820 --> 00:01:25,860
computational limits computer Architects

31
00:01:25,860 --> 00:01:27,900
decided to increase the amount of

32
00:01:27,900 --> 00:01:29,759
on-chip parallelism

33
00:01:29,759 --> 00:01:31,259
and while this parallelism started off

34
00:01:31,259 --> 00:01:33,119
homogeneous in nature it has become

35
00:01:33,119 --> 00:01:35,040
heterogeneous over time

36
00:01:35,040 --> 00:01:36,540
as we'll see on the next slide

37
00:01:36,540 --> 00:01:38,520
domain-specific accelerators have become

38
00:01:38,520 --> 00:01:40,860
commonplace

39
00:01:40,860 --> 00:01:43,560
unfortunately increasing performance is

40
00:01:43,560 --> 00:01:44,640
never free

41
00:01:44,640 --> 00:01:46,740
with increased heterogeneous parallelism

42
00:01:46,740 --> 00:01:49,140
comes increased complexity

43
00:01:49,140 --> 00:01:51,659
take the open Titan soc for example

44
00:01:51,659 --> 00:01:53,280
which is designed to be a simple

45
00:01:53,280 --> 00:01:54,720
microcontroller for security

46
00:01:54,720 --> 00:01:56,100
applications

47
00:01:56,100 --> 00:01:58,560
even open Titan has 34 different IP

48
00:01:58,560 --> 00:02:00,060
blocks

49
00:02:00,060 --> 00:02:02,100
this includes specialized IP for

50
00:02:02,100 --> 00:02:03,960
security hardening such as the alert

51
00:02:03,960 --> 00:02:06,119
Handler and multiple cryptographic

52
00:02:06,119 --> 00:02:08,160
accelerators

53
00:02:08,160 --> 00:02:09,959
with increased complexity comes

54
00:02:09,959 --> 00:02:12,360
increased verification efforts in fact

55
00:02:12,360 --> 00:02:14,459
today it is estimated that Hardware

56
00:02:14,459 --> 00:02:17,400
Engineers often spend an estimated 70

57
00:02:17,400 --> 00:02:19,800
percent of their time just verifying

58
00:02:19,800 --> 00:02:21,720
their designs

59
00:02:21,720 --> 00:02:23,459
moreover this complexity and

60
00:02:23,459 --> 00:02:25,379
verification burden have also

61
00:02:25,379 --> 00:02:27,360
unfortunately led to a recent surge in

62
00:02:27,360 --> 00:02:30,319
Hardware vulnerabilities

63
00:02:30,780 --> 00:02:33,360
to identify flaws in complex socs before

64
00:02:33,360 --> 00:02:36,060
tape out Hardware Engineers often deploy

65
00:02:36,060 --> 00:02:37,800
several pre-silicon verification

66
00:02:37,800 --> 00:02:39,660
strategies

67
00:02:39,660 --> 00:02:41,819
one popular approach is a dynamic

68
00:02:41,819 --> 00:02:43,459
verification technique called

69
00:02:43,459 --> 00:02:46,800
constrained random verification or CRV

70
00:02:46,800 --> 00:02:48,180
and it's implemented in one of the most

71
00:02:48,180 --> 00:02:52,140
widely used DB Frameworks known as UVM

72
00:02:52,140 --> 00:02:54,900
here I show a typical architecture of a

73
00:02:54,900 --> 00:02:57,480
UVM style test bench which at a high

74
00:02:57,480 --> 00:02:59,640
level generates random sequences of

75
00:02:59,640 --> 00:03:02,400
inputs drives them into the dut and

76
00:03:02,400 --> 00:03:04,500
monitors its response

77
00:03:04,500 --> 00:03:06,540
when using this technique the question

78
00:03:06,540 --> 00:03:09,239
DV Engineers often ask themselves is

79
00:03:09,239 --> 00:03:10,980
when are we done

80
00:03:10,980 --> 00:03:13,620
since exhaustive verification is not an

81
00:03:13,620 --> 00:03:16,560
option for large complex designs the

82
00:03:16,560 --> 00:03:18,360
answer is typically when broad coverage

83
00:03:18,360 --> 00:03:20,400
is achieved for which there are several

84
00:03:20,400 --> 00:03:23,580
metrics including HDL code coverage FSM

85
00:03:23,580 --> 00:03:25,040
or finite State machine coverage

86
00:03:25,040 --> 00:03:27,000
functional coverage

87
00:03:27,000 --> 00:03:28,739
Etc

88
00:03:28,739 --> 00:03:30,720
unfortunately optimizing coverage is

89
00:03:30,720 --> 00:03:32,819
somewhat time consuming it often

90
00:03:32,819 --> 00:03:34,379
requires manual intervention on behalf

91
00:03:34,379 --> 00:03:36,120
of Hardware engineers and requires

92
00:03:36,120 --> 00:03:37,980
intimate knowledge of the dut

93
00:03:37,980 --> 00:03:39,360
something that can be challenging when

94
00:03:39,360 --> 00:03:41,220
verifying the integration of several IP

95
00:03:41,220 --> 00:03:42,959
blocks

96
00:03:42,959 --> 00:03:44,640
to overcome this researchers have

97
00:03:44,640 --> 00:03:46,560
proposed using coverage information to

98
00:03:46,560 --> 00:03:49,440
inform test Vector generation

99
00:03:49,440 --> 00:03:51,420
similar to coverage guided fuzzing

100
00:03:51,420 --> 00:03:54,000
techniques in the software world today

101
00:03:54,000 --> 00:03:56,099
unfortunately these techniques are often

102
00:03:56,099 --> 00:03:58,260
tailored to specific designs for example

103
00:03:58,260 --> 00:04:00,480
CPUs

104
00:04:00,480 --> 00:04:03,120
rather than adapting fuzzing to Hardware

105
00:04:03,120 --> 00:04:05,159
we ask can we fuzz the hardware directly

106
00:04:05,159 --> 00:04:07,260
with software fuzzers in a design

107
00:04:07,260 --> 00:04:10,280
agnostic manner

108
00:04:13,080 --> 00:04:15,239
since we already translate Hardware to

109
00:04:15,239 --> 00:04:17,519
software for simulation purposes

110
00:04:17,519 --> 00:04:19,380
we argue for fuzzing the software model

111
00:04:19,380 --> 00:04:21,358
of the hardware directly with software

112
00:04:21,358 --> 00:04:22,500
fuzzers

113
00:04:22,500 --> 00:04:25,020
to do so we leverage verilator and open

114
00:04:25,020 --> 00:04:28,199
source HDL compiler to translate RTL

115
00:04:28,199 --> 00:04:30,660
Hardware into a software model that

116
00:04:30,660 --> 00:04:32,160
could be instrumented during compilation

117
00:04:32,160 --> 00:04:34,860
and fuzz directly with coverage guided

118
00:04:34,860 --> 00:04:37,919
graybox fuzzers like AFL

119
00:04:37,919 --> 00:04:39,840
unfortunately as you probably guessed

120
00:04:39,840 --> 00:04:42,060
it's not quite that simple as I will

121
00:04:42,060 --> 00:04:43,860
discuss in the next couple of slides

122
00:04:43,860 --> 00:04:46,620
there are three key challenges

123
00:04:46,620 --> 00:04:48,600
associated with designing a generic

124
00:04:48,600 --> 00:04:51,000
fuzzing harness or test bench that can

125
00:04:51,000 --> 00:04:52,740
interface Hardware simulation models

126
00:04:52,740 --> 00:04:55,820
with software fuzzers

127
00:04:56,639 --> 00:04:59,160
the first challenge is that software

128
00:04:59,160 --> 00:05:00,840
fuzzers are designed to detect program

129
00:05:00,840 --> 00:05:03,780
crashes or hangs the signal incorrect

130
00:05:03,780 --> 00:05:05,639
program behavior for a given set of

131
00:05:05,639 --> 00:05:07,020
inputs

132
00:05:07,020 --> 00:05:09,600
however unlike software Hardware is not

133
00:05:09,600 --> 00:05:11,580
inherently executable

134
00:05:11,580 --> 00:05:13,979
to simulate hardware tools like very

135
00:05:13,979 --> 00:05:15,960
later create a cycle accurate Hardware

136
00:05:15,960 --> 00:05:19,259
simulation binary or HSB by first

137
00:05:19,259 --> 00:05:21,419
translating the HDL to a software

138
00:05:21,419 --> 00:05:24,180
language like C plus and then compiling

139
00:05:24,180 --> 00:05:25,740
and linking it with a test bench and

140
00:05:25,740 --> 00:05:27,539
simulation engine

141
00:05:27,539 --> 00:05:30,479
alone hsbs have no way of knowing when

142
00:05:30,479 --> 00:05:31,979
out-of-spec behaviors have been

143
00:05:31,979 --> 00:05:33,900
encountered because there's no such

144
00:05:33,900 --> 00:05:36,000
thing as a hardware sanitizer like there

145
00:05:36,000 --> 00:05:38,520
are software sanitizers that can trigger

146
00:05:38,520 --> 00:05:41,880
a crash when such behavior is observed

147
00:05:41,880 --> 00:05:43,800
to detect such behaviors during

148
00:05:43,800 --> 00:05:46,500
simulation DB Engineers often deploy a

149
00:05:46,500 --> 00:05:47,759
couple of different techniques in their

150
00:05:47,759 --> 00:05:50,460
test benches including invariant checks

151
00:05:50,460 --> 00:05:52,560
such as system verilog assertions or

152
00:05:52,560 --> 00:05:55,139
gold model checks

153
00:05:55,139 --> 00:05:57,180
to adapt these checks for fuzzing we

154
00:05:57,180 --> 00:05:58,800
ensure that both types of Behavioral

155
00:05:58,800 --> 00:06:01,800
checks in the test bench translate to C

156
00:06:01,800 --> 00:06:04,080
plus plus constructs that when compiled

157
00:06:04,080 --> 00:06:05,400
and violated

158
00:06:05,400 --> 00:06:08,039
send the HSB process the abort signal so

159
00:06:08,039 --> 00:06:11,719
that the fuzzer can detect this Behavior

160
00:06:12,360 --> 00:06:14,220
the Second Challenge is that most

161
00:06:14,220 --> 00:06:16,560
software applications for example a

162
00:06:16,560 --> 00:06:18,900
document or image viewer

163
00:06:18,900 --> 00:06:20,820
activate entire sequences of State

164
00:06:20,820 --> 00:06:23,460
transitions for a single from a single

165
00:06:23,460 --> 00:06:25,560
dimensional input such as a PDF or a

166
00:06:25,560 --> 00:06:26,940
jpeg

167
00:06:26,940 --> 00:06:28,979
as a result most software fuzzers

168
00:06:28,979 --> 00:06:31,199
generate a single input file or vector

169
00:06:31,199 --> 00:06:33,000
of bytes to feed the system under test

170
00:06:33,000 --> 00:06:35,460
as shown here

171
00:06:35,460 --> 00:06:37,259
alternatively sequential Hardware

172
00:06:37,259 --> 00:06:38,940
requires several single dimensional

173
00:06:38,940 --> 00:06:41,160
input vectors or two-dimensional inputs

174
00:06:41,160 --> 00:06:43,860
spread over space and time to achieve a

175
00:06:43,860 --> 00:06:45,780
similar effect

176
00:06:45,780 --> 00:06:48,000
we addressed this issue by designing a

177
00:06:48,000 --> 00:06:50,100
hardware fuzzing harness or test bench

178
00:06:50,100 --> 00:06:52,560
that interprets fuzzer generated input

179
00:06:52,560 --> 00:06:55,680
files in two Dimensions by reading fixed

180
00:06:55,680 --> 00:06:57,960
size chunks of data from the fuzzer

181
00:06:57,960 --> 00:06:59,880
generated input file and feeding them to

182
00:06:59,880 --> 00:07:03,120
the dut one by one as individual test

183
00:07:03,120 --> 00:07:06,199
cases spread over time

184
00:07:06,780 --> 00:07:09,419
lastly the third challenge involves

185
00:07:09,419 --> 00:07:11,699
building a generic fuzzing harness or

186
00:07:11,699 --> 00:07:14,220
test bench that can interface with

187
00:07:14,220 --> 00:07:16,500
several IP blocks

188
00:07:16,500 --> 00:07:18,539
to address this we take advantage of the

189
00:07:18,539 --> 00:07:20,400
fact that most Hardware IP blocks

190
00:07:20,400 --> 00:07:22,560
interface over a standardized bus

191
00:07:22,560 --> 00:07:23,699
protocol

192
00:07:23,699 --> 00:07:26,099
and start by designing a test bench

193
00:07:26,099 --> 00:07:27,780
around the tile link uncached

194
00:07:27,780 --> 00:07:30,840
lightweight or TL UL bus protocol that

195
00:07:30,840 --> 00:07:33,419
is popular in Risk 5 designs such as

196
00:07:33,419 --> 00:07:35,940
open Titan

197
00:07:35,940 --> 00:07:38,400
our test bench Maps raw data from buzzer

198
00:07:38,400 --> 00:07:40,500
generated input files into a sequence of

199
00:07:40,500 --> 00:07:43,740
bus transactions that drive the duty

200
00:07:43,740 --> 00:07:46,139
unfortunately most bus protocols

201
00:07:46,139 --> 00:07:49,319
including TL require specific temporal

202
00:07:49,319 --> 00:07:51,180
sequences of inputs that create

203
00:07:51,180 --> 00:07:54,180
exploration barriers for fuzzers

204
00:07:54,180 --> 00:07:57,120
in other words the fuzzer gets stuck

205
00:07:57,120 --> 00:07:58,919
trying to synthesize an input file that

206
00:07:58,919 --> 00:08:02,039
when dissected temporally produces a

207
00:08:02,039 --> 00:08:05,039
series of valid bus signals

208
00:08:05,039 --> 00:08:07,319
to address this we design a bus Centric

209
00:08:07,319 --> 00:08:09,060
grammar and extend the fuzzing harness

210
00:08:09,060 --> 00:08:10,800
shown here

211
00:08:10,800 --> 00:08:14,160
to essentially decode fuzzer generated

212
00:08:14,160 --> 00:08:16,259
input files into a sequence of valid bus

213
00:08:16,259 --> 00:08:18,020
transactions that drive the dut

214
00:08:18,020 --> 00:08:21,180
essentially we create a mini fuzzing Isa

215
00:08:21,180 --> 00:08:23,400
of sorts

216
00:08:23,400 --> 00:08:25,500
we describe our fuzzing instructions

217
00:08:25,500 --> 00:08:27,840
here we Implement three basic

218
00:08:27,840 --> 00:08:29,039
instructions including a weight

219
00:08:29,039 --> 00:08:30,960
instruction which simply advances the

220
00:08:30,960 --> 00:08:33,479
duty clocks a read instruction which

221
00:08:33,479 --> 00:08:35,640
performs a tlul read operation and a

222
00:08:35,640 --> 00:08:37,320
write instruction which performs a TL

223
00:08:37,320 --> 00:08:40,279
write operation

224
00:08:40,979 --> 00:08:43,559
to evaluate our approach we fuzzed five

225
00:08:43,559 --> 00:08:45,060
open source IP blocks from the open

226
00:08:45,060 --> 00:08:47,040
Titan project and measured the amount of

227
00:08:47,040 --> 00:08:49,200
time it took for AFL to identify a bug

228
00:08:49,200 --> 00:08:51,959
we had implanted in each design

229
00:08:51,959 --> 00:08:54,779
in the first four designs the AES hmac

230
00:08:54,779 --> 00:08:57,420
k-mac and timer blocks we implanted

231
00:08:57,420 --> 00:08:59,640
synthetic bugs that were used in the

232
00:08:59,640 --> 00:09:01,440
hackadak competition as shown in the

233
00:09:01,440 --> 00:09:03,060
table here

234
00:09:03,060 --> 00:09:05,399
in the last design the open Titan alert

235
00:09:05,399 --> 00:09:07,440
Handler we implemented a real bug that

236
00:09:07,440 --> 00:09:08,880
was previously found in the wild and

237
00:09:08,880 --> 00:09:11,279
detailed on the open Titan GitHub issue

238
00:09:11,279 --> 00:09:14,180
6408

239
00:09:14,220 --> 00:09:16,740
for each design we reused several system

240
00:09:16,740 --> 00:09:18,600
verilog assertions that had already been

241
00:09:18,600 --> 00:09:21,180
developed by the open Titan DV team and

242
00:09:21,180 --> 00:09:22,920
added some additional ones to detect the

243
00:09:22,920 --> 00:09:25,560
incorrect Hardware Behavior

244
00:09:25,560 --> 00:09:27,540
additionally we seated the fuzzer with

245
00:09:27,540 --> 00:09:28,500
functional

246
00:09:28,500 --> 00:09:30,839
UL operations that properly initialized

247
00:09:30,839 --> 00:09:31,920
each design

248
00:09:31,920 --> 00:09:34,200
for example for the crypto blocks our

249
00:09:34,200 --> 00:09:35,459
seeds simply

250
00:09:35,459 --> 00:09:37,500
initialized each design into a state

251
00:09:37,500 --> 00:09:39,300
such that such that they may begin

252
00:09:39,300 --> 00:09:42,120
encryption and hashing operations and

253
00:09:42,120 --> 00:09:43,620
for the remaining two blocks we simply

254
00:09:43,620 --> 00:09:46,320
reset and enable them

255
00:09:46,320 --> 00:09:48,720
across several Trials of buzzing Trials

256
00:09:48,720 --> 00:09:50,160
of each design we are able to detect

257
00:09:50,160 --> 00:09:51,839
four out of five bugs in less than 10

258
00:09:51,839 --> 00:09:54,060
minutes and all bugs in less than 10

259
00:09:54,060 --> 00:09:56,239
hours

260
00:09:56,760 --> 00:09:59,279
in addition to finding bugs we were

261
00:09:59,279 --> 00:10:02,100
interested to see if by fuzzing software

262
00:10:02,100 --> 00:10:04,260
models of Hardware we were able to

263
00:10:04,260 --> 00:10:06,959
maximize Hardware coverage metrics like

264
00:10:06,959 --> 00:10:09,240
HDL code coverage

265
00:10:09,240 --> 00:10:11,399
we fuzzed the same five open Titan IP

266
00:10:11,399 --> 00:10:12,839
blocks that we talked about in the

267
00:10:12,839 --> 00:10:13,980
previous slide

268
00:10:13,980 --> 00:10:15,899
but this time we seated the fuzzer with

269
00:10:15,899 --> 00:10:18,800
empty seed files

270
00:10:19,200 --> 00:10:21,360
and on the right we plot the results we

271
00:10:21,360 --> 00:10:23,399
see after 60 Minutes of fuzzing we get

272
00:10:23,399 --> 00:10:25,740
over 80 percent HDL line coverage in

273
00:10:25,740 --> 00:10:27,180
four out of five Hardware Designs we

274
00:10:27,180 --> 00:10:28,740
study

275
00:10:28,740 --> 00:10:30,240
we drew some interesting insights from

276
00:10:30,240 --> 00:10:31,920
this experiment as well

277
00:10:31,920 --> 00:10:34,140
since very later generates straight

278
00:10:34,140 --> 00:10:36,240
lines C plus plus code for both blocking

279
00:10:36,240 --> 00:10:39,120
and non-blocking system verilog

280
00:10:39,120 --> 00:10:41,519
statements and injects conditional code

281
00:10:41,519 --> 00:10:43,860
blocks or basic blocks for system bear

282
00:10:43,860 --> 00:10:46,260
log assertions and cover points we found

283
00:10:46,260 --> 00:10:48,180
that simply optimizing test generation

284
00:10:48,180 --> 00:10:50,579
for Edge coverage of the software model

285
00:10:50,579 --> 00:10:53,459
as is the default behavior of afo

286
00:10:53,459 --> 00:10:57,060
translates to optimizing for code FSM

287
00:10:57,060 --> 00:10:59,279
and functional coverage of the RTL

288
00:10:59,279 --> 00:11:00,660
itself

289
00:11:00,660 --> 00:11:03,000
essentially by nature of varilators

290
00:11:03,000 --> 00:11:04,860
construction we are maximizing Hardware

291
00:11:04,860 --> 00:11:07,320
coverage simply by maximizing coverage

292
00:11:07,320 --> 00:11:10,100
of the software model

293
00:11:11,399 --> 00:11:13,500
lastly We performed several other

294
00:11:13,500 --> 00:11:16,019
evaluations in the paper to compare

295
00:11:16,019 --> 00:11:17,880
Hardware fuzzing against some both

296
00:11:17,880 --> 00:11:20,459
existing DV techniques like CRV and some

297
00:11:20,459 --> 00:11:23,040
prior Hardware fuzzing approaches

298
00:11:23,040 --> 00:11:24,540
in the interest of time I'm not going to

299
00:11:24,540 --> 00:11:26,100
dive into these results but if you're

300
00:11:26,100 --> 00:11:27,660
interested I would refer you to our

301
00:11:27,660 --> 00:11:29,899
paper

302
00:11:30,660 --> 00:11:33,120
in conclusion fuzzing is an effective

303
00:11:33,120 --> 00:11:35,760
strategy for automating Hardware DV and

304
00:11:35,760 --> 00:11:37,500
is made practical and performant using

305
00:11:37,500 --> 00:11:40,019
bus Centric grammars and harnesses

306
00:11:40,019 --> 00:11:41,640
what's really exciting about this work

307
00:11:41,640 --> 00:11:44,160
is that it opens the door to an entirely

308
00:11:44,160 --> 00:11:46,320
new wave of Hardware testing strategies

309
00:11:46,320 --> 00:11:48,300
including developing Advanced coverage

310
00:11:48,300 --> 00:11:50,820
metrics developing test generation

311
00:11:50,820 --> 00:11:53,279
schemes and even Hardware sanitizers to

312
00:11:53,279 --> 00:11:55,680
identify common bugs

313
00:11:55,680 --> 00:11:57,180
if you're interested in this work we

314
00:11:57,180 --> 00:11:58,680
invite you to check out our open source

315
00:11:58,680 --> 00:12:02,839
code base on GitHub at the link here

316
00:12:02,880 --> 00:12:04,620
thank you for listening and I will take

317
00:12:04,620 --> 00:12:06,920
any questions

