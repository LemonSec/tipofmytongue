1
00:00:08,420 --> 00:00:10,380
uh yeah thank you so much for the

2
00:00:10,380 --> 00:00:12,960
introduction my name is Omer and I'm

3
00:00:12,960 --> 00:00:14,519
going to talk about our research on

4
00:00:14,519 --> 00:00:16,320
detecting advertising and tracking your

5
00:00:16,320 --> 00:00:17,340
questions

6
00:00:17,340 --> 00:00:19,199
I'm a postdoc at the University of

7
00:00:19,199 --> 00:00:21,300
Washington and this is a joint work with

8
00:00:21,300 --> 00:00:22,859
collaborators from the University of

9
00:00:22,859 --> 00:00:25,019
Iowa University of California Davis and

10
00:00:25,019 --> 00:00:26,880
Doug Decker

11
00:00:26,880 --> 00:00:29,099
in this talk my objective is to convey

12
00:00:29,099 --> 00:00:31,439
three main things first of all I want to

13
00:00:31,439 --> 00:00:33,600
show that advertisers and trackers abuse

14
00:00:33,600 --> 00:00:36,300
the questions to track people and they

15
00:00:36,300 --> 00:00:38,100
recently have been found to use them to

16
00:00:38,100 --> 00:00:39,960
bypass privacy protections against

17
00:00:39,960 --> 00:00:42,480
cross-site tracking

18
00:00:42,480 --> 00:00:44,760
uh secondly I want to demonstrate that

19
00:00:44,760 --> 00:00:46,800
existing countermeasures are not

20
00:00:46,800 --> 00:00:48,539
equipped to protect against privacy

21
00:00:48,539 --> 00:00:50,940
harms caused by requests

22
00:00:50,940 --> 00:00:53,280
and third I want to explain our novel

23
00:00:53,280 --> 00:00:54,840
machine learning based approach called

24
00:00:54,840 --> 00:00:56,699
Khaleesi which is purpose built to

25
00:00:56,699 --> 00:00:58,800
protect against advertising and tracking

26
00:00:58,800 --> 00:01:00,960
the questions

27
00:01:00,960 --> 00:01:04,019
uh now before I explain our technique I

28
00:01:04,019 --> 00:01:05,700
want to very briefly explain what we

29
00:01:05,700 --> 00:01:07,799
actually mean by requests

30
00:01:07,799 --> 00:01:10,619
so in a typical HTTP request the browser

31
00:01:10,619 --> 00:01:12,420
sends a request to fetch a resource from

32
00:01:12,420 --> 00:01:15,000
a server uh the server evaluates the

33
00:01:15,000 --> 00:01:18,360
request and Returns the requested

34
00:01:18,360 --> 00:01:20,520
resource if it is available

35
00:01:20,520 --> 00:01:23,400
and in cases where server cannot fulfill

36
00:01:23,400 --> 00:01:25,439
that request but it knows that another

37
00:01:25,439 --> 00:01:26,820
server can

38
00:01:26,820 --> 00:01:29,400
it redirects the browser to fetch that

39
00:01:29,400 --> 00:01:31,979
resource from the other server

40
00:01:31,979 --> 00:01:34,080
then browser will have to issue a

41
00:01:34,080 --> 00:01:35,820
subsequent request to get the response

42
00:01:35,820 --> 00:01:39,900
so overall uh this requests and

43
00:01:39,900 --> 00:01:41,640
responses between the browser and

44
00:01:41,640 --> 00:01:42,920
different server

45
00:01:42,920 --> 00:01:45,540
form a sequence of requests and

46
00:01:45,540 --> 00:01:47,520
responses and this is what we refer to

47
00:01:47,520 --> 00:01:50,820
as request chains in this paper

48
00:01:50,820 --> 00:01:53,460
uh these questions are of immense

49
00:01:53,460 --> 00:01:55,860
importance to advertisers and trackers

50
00:01:55,860 --> 00:01:57,600
because they allow them to share

51
00:01:57,600 --> 00:02:00,439
tracking information across regions

52
00:02:00,439 --> 00:02:03,060
trackers cannot do that inside the

53
00:02:03,060 --> 00:02:05,399
browser because they are restricted by a

54
00:02:05,399 --> 00:02:07,380
security mechanism called the same

55
00:02:07,380 --> 00:02:09,060
origin policy

56
00:02:09,060 --> 00:02:11,160
so as a workaround against that policy

57
00:02:11,160 --> 00:02:13,739
trackers rely on the questions the

58
00:02:13,739 --> 00:02:15,560
technique here is actually fairly simple

59
00:02:15,560 --> 00:02:18,060
it first involves reading the accessible

60
00:02:18,060 --> 00:02:20,459
data directly from the browser and then

61
00:02:20,459 --> 00:02:23,280
embedding that into a redirect which

62
00:02:23,280 --> 00:02:25,800
will force the browser to send that to

63
00:02:25,800 --> 00:02:28,500
the intended entity for example tracker

64
00:02:28,500 --> 00:02:30,900
and Advertiser here

65
00:02:30,900 --> 00:02:32,580
ah more recently we have seen that

66
00:02:32,580 --> 00:02:33,959
trackers are now relying on the

67
00:02:33,959 --> 00:02:36,060
questions to bypass third-party cookie

68
00:02:36,060 --> 00:02:38,340
restrictions that are put in place to

69
00:02:38,340 --> 00:02:40,319
protect against cross-site tracking

70
00:02:40,319 --> 00:02:42,180
uh the basic idea behind these

71
00:02:42,180 --> 00:02:44,160
protections is to only allow cookies

72
00:02:44,160 --> 00:02:46,620
from domains that have been visited by

73
00:02:46,620 --> 00:02:49,620
the user as full-fledged websites and

74
00:02:49,620 --> 00:02:51,420
since most people do not intentionally

75
00:02:51,420 --> 00:02:53,400
visit tracking websites track and lose

76
00:02:53,400 --> 00:02:55,200
access to their cookies

77
00:02:55,200 --> 00:02:57,540
but uh trackers have found a way to

78
00:02:57,540 --> 00:03:00,300
bypass this restriction as well and the

79
00:03:00,300 --> 00:03:02,400
the technique is to rely on the

80
00:03:02,400 --> 00:03:04,379
questions to trick the browser into

81
00:03:04,379 --> 00:03:07,860
actually visiting the trackers website

82
00:03:07,860 --> 00:03:10,560
and typically achieve this by rewriting

83
00:03:10,560 --> 00:03:13,019
the link links on the website so that

84
00:03:13,019 --> 00:03:14,940
when people click on different links

85
00:03:14,940 --> 00:03:17,099
they are navigated to advertising and

86
00:03:17,099 --> 00:03:18,959
tracking websites before they can land

87
00:03:18,959 --> 00:03:20,940
on the intended web page

88
00:03:20,940 --> 00:03:24,659
and as a result of this bouncing these

89
00:03:24,659 --> 00:03:26,940
websites which are visited as

90
00:03:26,940 --> 00:03:29,159
full-fledged websites are able to seed

91
00:03:29,159 --> 00:03:31,140
their cookies which they can later

92
00:03:31,140 --> 00:03:34,739
access as third parties

93
00:03:34,739 --> 00:03:36,540
so now that we have looked at some of

94
00:03:36,540 --> 00:03:38,099
the ways in which advertisers and

95
00:03:38,099 --> 00:03:40,680
trackers can abuse the questions let's

96
00:03:40,680 --> 00:03:42,599
see if existing Solutions are effective

97
00:03:42,599 --> 00:03:45,780
at protecting against these threats

98
00:03:45,780 --> 00:03:48,840
uh so most people rely on ad and tracker

99
00:03:48,840 --> 00:03:50,640
blockers to protect their privacy on the

100
00:03:50,640 --> 00:03:53,700
internet but unfortunately these tools

101
00:03:53,700 --> 00:03:55,980
are not equipped to effectively block uh

102
00:03:55,980 --> 00:03:57,900
requests

103
00:03:57,900 --> 00:03:59,959
and the reason I say that is because

104
00:03:59,959 --> 00:04:03,659
they operate at the level of individual

105
00:04:03,659 --> 00:04:06,659
request and try to block known trackers

106
00:04:06,659 --> 00:04:09,239
instead of the tracking Behavior based

107
00:04:09,239 --> 00:04:11,099
on some block list

108
00:04:11,099 --> 00:04:13,500
so for example to block this request

109
00:04:13,500 --> 00:04:16,019
chain uh despite that change showing an

110
00:04:16,019 --> 00:04:18,120
obvious tracking Behavior early on track

111
00:04:18,120 --> 00:04:20,399
these ad blockers will only be able to

112
00:04:20,399 --> 00:04:23,699
block it at the very last hop

113
00:04:23,699 --> 00:04:25,860
uh people have improved these ad and

114
00:04:25,860 --> 00:04:27,180
tracker blockers with the help of

115
00:04:27,180 --> 00:04:29,580
heuristics where the general idea is to

116
00:04:29,580 --> 00:04:32,880
learn on tracking Behavior instead of

117
00:04:32,880 --> 00:04:36,960
trackers and these heuristics are

118
00:04:36,960 --> 00:04:39,060
essentially in narrow set of rules of

119
00:04:39,060 --> 00:04:41,220
which very specifically Define a

120
00:04:41,220 --> 00:04:43,620
particular tracking behavior and it

121
00:04:43,620 --> 00:04:45,060
makes them excellent at detecting those

122
00:04:45,060 --> 00:04:47,160
behaviors but as you can imagine that

123
00:04:47,160 --> 00:04:49,740
heuristics would fail in unfamiliar and

124
00:04:49,740 --> 00:04:52,440
unseen conditions to demonstrate that

125
00:04:52,440 --> 00:04:54,479
let's look at two requests here one is

126
00:04:54,479 --> 00:04:56,160
for cookie syncing and the other is for

127
00:04:56,160 --> 00:04:58,380
bounce tracking and this heuristic that

128
00:04:58,380 --> 00:05:00,360
we have on the left side will only be

129
00:05:00,360 --> 00:05:01,740
able to block the cookie syncing

130
00:05:01,740 --> 00:05:03,540
requestion and it will be clueless

131
00:05:03,540 --> 00:05:07,080
against this bounce tracking requestion

132
00:05:07,080 --> 00:05:09,240
uh these heuristics have also been

133
00:05:09,240 --> 00:05:10,259
improved with the help of machine

134
00:05:10,259 --> 00:05:12,900
learning uh where the idea is to

135
00:05:12,900 --> 00:05:14,820
generalize on a broad range of tracking

136
00:05:14,820 --> 00:05:16,560
Behavior so that you can detect them

137
00:05:16,560 --> 00:05:17,639
very easily

138
00:05:17,639 --> 00:05:19,680
and the state-of-the-art approaches uh

139
00:05:19,680 --> 00:05:21,419
like the one presented in the session

140
00:05:21,419 --> 00:05:24,000
earlier try to organize the website

141
00:05:24,000 --> 00:05:27,419
execution in form of graphs and use the

142
00:05:27,419 --> 00:05:29,820
execution traces of trackers to detect

143
00:05:29,820 --> 00:05:31,139
them

144
00:05:31,139 --> 00:05:32,880
and these approaches perform excellent

145
00:05:32,880 --> 00:05:35,699
in terms of detecting a generic tracking

146
00:05:35,699 --> 00:05:37,800
Behavior but they are not very effective

147
00:05:37,800 --> 00:05:39,600
at detecting specialized tracking

148
00:05:39,600 --> 00:05:41,699
Behavior like the one carried out

149
00:05:41,699 --> 00:05:43,919
through the questions or fingerprinting

150
00:05:43,919 --> 00:05:45,360
for example

151
00:05:45,360 --> 00:05:47,880
uh their main limitation is that they do

152
00:05:47,880 --> 00:05:51,300
not utilize realize uh the necessary

153
00:05:51,300 --> 00:05:53,220
context to effectively detect the

154
00:05:53,220 --> 00:05:55,560
questions uh for example to detect this

155
00:05:55,560 --> 00:05:57,780
cookie syncing request chain uh these

156
00:05:57,780 --> 00:05:59,759
approaches will operate on individual

157
00:05:59,759 --> 00:06:02,639
request in isolation and will not use

158
00:06:02,639 --> 00:06:05,520
any information learned about the chain

159
00:06:05,520 --> 00:06:07,560
so far

160
00:06:07,560 --> 00:06:10,020
so overall we can conclude that prior

161
00:06:10,020 --> 00:06:12,000
approaches are not purpose built to

162
00:06:12,000 --> 00:06:14,280
detect advertising and tracking requests

163
00:06:14,280 --> 00:06:16,740
which causes them to have accuracy

164
00:06:16,740 --> 00:06:19,100
issues

165
00:06:19,139 --> 00:06:22,440
to bridge that Gap we propose Khaleesi

166
00:06:22,440 --> 00:06:25,259
which is a specially designed approach

167
00:06:25,259 --> 00:06:27,060
to detect advertising and tracking

168
00:06:27,060 --> 00:06:28,680
requests

169
00:06:28,680 --> 00:06:31,139
our key idea is to capitalize on the

170
00:06:31,139 --> 00:06:32,699
sequential nature of theory questions

171
00:06:32,699 --> 00:06:34,699
because the purpose of your questions

172
00:06:34,699 --> 00:06:37,199
becomes apparent as they grow larger and

173
00:06:37,199 --> 00:06:38,039
larger

174
00:06:38,039 --> 00:06:39,900
and I will try to motivate that Insight

175
00:06:39,900 --> 00:06:42,300
with an example

176
00:06:42,300 --> 00:06:45,060
so if you look at this request here we

177
00:06:45,060 --> 00:06:47,160
can we are in a position to make an

178
00:06:47,160 --> 00:06:48,960
inference for example we know that this

179
00:06:48,960 --> 00:06:51,300
request is to a third party and it is

180
00:06:51,300 --> 00:06:53,060
trying to exfiltrate some information

181
00:06:53,060 --> 00:06:56,280
which could be an indication of tracking

182
00:06:56,280 --> 00:06:59,280
and when we receive its response we can

183
00:06:59,280 --> 00:07:00,780
see that it was not just reading

184
00:07:00,780 --> 00:07:02,819
information but it is also sending that

185
00:07:02,819 --> 00:07:05,940
to another third party which affirms uh

186
00:07:05,940 --> 00:07:07,860
our initial inference

187
00:07:07,860 --> 00:07:10,259
and as we let the chain grow we can see

188
00:07:10,259 --> 00:07:12,900
that it is a bilateral data exchange

189
00:07:12,900 --> 00:07:15,000
between an Advertiser and a Tracker

190
00:07:15,000 --> 00:07:18,060
which is a clear indication of tracking

191
00:07:18,060 --> 00:07:20,759
so overall by analyzing the requests in

192
00:07:20,759 --> 00:07:23,520
a sequential manner we are in a better

193
00:07:23,520 --> 00:07:25,860
position to capitalize on a much richer

194
00:07:25,860 --> 00:07:28,020
and necessary context to effectively

195
00:07:28,020 --> 00:07:30,479
detect the questions

196
00:07:30,479 --> 00:07:33,000
uh we use that sequential context to

197
00:07:33,000 --> 00:07:34,259
develop a machine learning based

198
00:07:34,259 --> 00:07:37,080
approach called Khaleesi which can

199
00:07:37,080 --> 00:07:38,759
detect advertising and tracking

200
00:07:38,759 --> 00:07:40,440
requestions

201
00:07:40,440 --> 00:07:42,780
Khaleesi first uses the web extension

202
00:07:42,780 --> 00:07:45,419
apis to capture HTTP requests and

203
00:07:45,419 --> 00:07:47,699
responses at the network and to

204
00:07:47,699 --> 00:07:49,979
JavaScript layer and arranges those

205
00:07:49,979 --> 00:07:52,919
requests and responses in form of genes

206
00:07:52,919 --> 00:07:56,520
once KDC has organized those requests

207
00:07:56,520 --> 00:07:58,620
and response pairs into chains it

208
00:07:58,620 --> 00:08:00,560
extract features from the request

209
00:08:00,560 --> 00:08:03,479
response and sequential properties and

210
00:08:03,479 --> 00:08:06,120
labels them with a popular ad

211
00:08:06,120 --> 00:08:08,160
interactive blocking a filter list like

212
00:08:08,160 --> 00:08:10,500
easy list and easy privacy

213
00:08:10,500 --> 00:08:13,259
and after labeling Khaleesi feeds these

214
00:08:13,259 --> 00:08:14,880
stains to a machine learning classifier

215
00:08:14,880 --> 00:08:17,039
which learns to detect advertising and

216
00:08:17,039 --> 00:08:19,379
tracking request chains based on the

217
00:08:19,379 --> 00:08:23,160
request response and sequence properties

218
00:08:23,160 --> 00:08:25,020
in curiosity we capture your questions

219
00:08:25,020 --> 00:08:27,840
data initiated at the network and the

220
00:08:27,840 --> 00:08:30,479
JavaScript layer at the network layer we

221
00:08:30,479 --> 00:08:32,580
simply linked the subsequent request and

222
00:08:32,580 --> 00:08:35,760
response pairs that appear in HTTP

223
00:08:35,760 --> 00:08:37,140
redirects

224
00:08:37,140 --> 00:08:39,659
and at the JavaScript layer we try to

225
00:08:39,659 --> 00:08:43,260
capture two kind of requests first are

226
00:08:43,260 --> 00:08:45,720
the top level navigations that are

227
00:08:45,720 --> 00:08:47,339
typically initiated with a

228
00:08:47,339 --> 00:08:49,800
window.location API

229
00:08:49,800 --> 00:08:52,680
and the second are the requests

230
00:08:52,680 --> 00:08:55,260
initiated from a same script that share

231
00:08:55,260 --> 00:08:56,820
common identifiers

232
00:08:56,820 --> 00:09:00,060
and overall by capturing these chains at

233
00:09:00,060 --> 00:09:02,760
the network and the JavaScript layer we

234
00:09:02,760 --> 00:09:04,440
capture a broad range of tracking

235
00:09:04,440 --> 00:09:06,540
behaviors that are executed with

236
00:09:06,540 --> 00:09:08,940
requests and examples include cookie

237
00:09:08,940 --> 00:09:10,620
syncing bounce tracking and several

238
00:09:10,620 --> 00:09:13,279
other techniques

239
00:09:13,440 --> 00:09:17,279
so after we organize these chains we

240
00:09:17,279 --> 00:09:20,279
extract request response and sequential

241
00:09:20,279 --> 00:09:23,399
features uh with request features Our

242
00:09:23,399 --> 00:09:26,040
intention is to capture properties that

243
00:09:26,040 --> 00:09:28,200
can tell us what the request might do

244
00:09:28,200 --> 00:09:31,260
for example by capturing the URL length

245
00:09:31,260 --> 00:09:33,839
we can identify the scenarios where

246
00:09:33,839 --> 00:09:36,000
trackers are trying to exfiltrate data

247
00:09:36,000 --> 00:09:38,339
by embedding it in the URLs so if there

248
00:09:38,339 --> 00:09:40,140
are a lot of identifiers embedded in the

249
00:09:40,140 --> 00:09:43,019
URL the URL would be longer

250
00:09:43,019 --> 00:09:45,480
with response features Our intention is

251
00:09:45,480 --> 00:09:47,580
to capture properties that can tell us

252
00:09:47,580 --> 00:09:50,279
what the response will do if we let it

253
00:09:50,279 --> 00:09:54,300
execute uh in that case the length of

254
00:09:54,300 --> 00:09:56,700
the response for example can indicate if

255
00:09:56,700 --> 00:09:59,580
a tracking pixel is loaded

256
00:09:59,580 --> 00:10:02,040
uh with sequence features Our intention

257
00:10:02,040 --> 00:10:04,800
is to capture properties uh that can

258
00:10:04,800 --> 00:10:06,600
tell us what the request change has been

259
00:10:06,600 --> 00:10:10,019
doing so if we encounter a lot of unique

260
00:10:10,019 --> 00:10:12,240
domains in the chain it might be an

261
00:10:12,240 --> 00:10:14,820
indication that cookies or other

262
00:10:14,820 --> 00:10:17,160
tracking information is exfiltrated to

263
00:10:17,160 --> 00:10:20,580
multiple advertisers and trackers

264
00:10:20,580 --> 00:10:22,740
so using those features we train a

265
00:10:22,740 --> 00:10:24,560
random for us machine learning Ensemble

266
00:10:24,560 --> 00:10:29,220
and we use Easy list and easy privacy as

267
00:10:29,220 --> 00:10:31,860
our ground truth and our test data is

268
00:10:31,860 --> 00:10:34,380
the request change on the Alexa top 10

269
00:10:34,380 --> 00:10:35,519
000 websites

270
00:10:35,519 --> 00:10:38,399
ah so after we train the model we test

271
00:10:38,399 --> 00:10:41,040
it on various crawling configurations

272
00:10:41,040 --> 00:10:43,800
and also using tenfold cross validation

273
00:10:43,800 --> 00:10:47,579
so that number here 93 98 is for the 10

274
00:10:47,579 --> 00:10:49,680
foot cost validation

275
00:10:49,680 --> 00:10:51,720
but most importantly we are able to

276
00:10:51,720 --> 00:10:55,140
detect more than 1250 new advertising

277
00:10:55,140 --> 00:10:58,800
and tracking domains that uh have not

278
00:10:58,800 --> 00:11:01,380
been yet blocked by easy list and easy

279
00:11:01,380 --> 00:11:03,660
privacy which almost all ad and tracker

280
00:11:03,660 --> 00:11:05,579
Dockers use

281
00:11:05,579 --> 00:11:08,339
so overall in conclusion I first

282
00:11:08,339 --> 00:11:10,500
demonstrated that advertisers and

283
00:11:10,500 --> 00:11:12,779
trackers rely on the questions to track

284
00:11:12,779 --> 00:11:15,720
people and bypass privacy protections

285
00:11:15,720 --> 00:11:17,820
then I showed that existing Solutions

286
00:11:17,820 --> 00:11:20,220
are ineffective at detecting the

287
00:11:20,220 --> 00:11:21,420
questions

288
00:11:21,420 --> 00:11:24,420
and after that I showed that uh Khaleesi

289
00:11:24,420 --> 00:11:26,519
bridges that void by leveraging

290
00:11:26,519 --> 00:11:28,980
sequential nature of the questions to

291
00:11:28,980 --> 00:11:30,839
effectively detect them

292
00:11:30,839 --> 00:11:33,000
we have a lot of additional analysis

293
00:11:33,000 --> 00:11:34,500
which I did not get a chance to talk

294
00:11:34,500 --> 00:11:36,360
about here some of that includes

295
00:11:36,360 --> 00:11:38,279
Khaleesi's evaluation on five different

296
00:11:38,279 --> 00:11:39,959
data sets where we interact with

297
00:11:39,959 --> 00:11:41,899
different uh

298
00:11:41,899 --> 00:11:43,980
crawling configurations which include

299
00:11:43,980 --> 00:11:46,140
different browsers and interaction uh

300
00:11:46,140 --> 00:11:48,899
Khaleesi's robustness against commercial

301
00:11:48,899 --> 00:11:50,279
and

302
00:11:50,279 --> 00:11:52,140
other classifies that are proposed in

303
00:11:52,140 --> 00:11:54,180
research and also about its runtime

304
00:11:54,180 --> 00:11:56,880
performance so I would encourage you to

305
00:11:56,880 --> 00:11:59,220
read the paper to know more about that

306
00:11:59,220 --> 00:12:01,440
lastly I want to mention that we package

307
00:12:01,440 --> 00:12:03,660
Khaleesi as a browser extension and you

308
00:12:03,660 --> 00:12:05,579
can visit the link in the URL to try it

309
00:12:05,579 --> 00:12:06,360
out

310
00:12:06,360 --> 00:12:09,140
thank you so much

