1
00:00:08,058 --> 00:00:10,860
hello my name is David koiser and it's

2
00:00:10,860 --> 00:00:12,420
my pleasure to present to you Visa

3
00:00:12,420 --> 00:00:14,160
efficient certificate validation in

4
00:00:14,160 --> 00:00:16,020
constrained networks this was a

5
00:00:16,020 --> 00:00:17,699
collaboration between the University of

6
00:00:17,699 --> 00:00:19,740
California Irvine and a Technical

7
00:00:19,740 --> 00:00:21,600
University of darmstadt where I also

8
00:00:21,600 --> 00:00:23,939
work so our motivation for this work was

9
00:00:23,939 --> 00:00:25,980
to enable public key infrastructures in

10
00:00:25,980 --> 00:00:27,840
constrained networks so how are

11
00:00:27,840 --> 00:00:30,359
constraint networks defined well for one

12
00:00:30,359 --> 00:00:33,719
they usually consist of devices with

13
00:00:33,719 --> 00:00:35,940
anemic computation and storage abilities

14
00:00:35,940 --> 00:00:38,280
this can be for example due to strict

15
00:00:38,280 --> 00:00:39,600
power budgets

16
00:00:39,600 --> 00:00:42,120
on the other hand these devices often

17
00:00:42,120 --> 00:00:44,640
also have limited bandwidth which can be

18
00:00:44,640 --> 00:00:46,980
for example due to long range low power

19
00:00:46,980 --> 00:00:48,180
antennas

20
00:00:48,180 --> 00:00:51,120
then these devices may also experience

21
00:00:51,120 --> 00:00:53,579
intermittent connectivity for example

22
00:00:53,579 --> 00:00:56,039
because they need to hibernate to

23
00:00:56,039 --> 00:00:57,239
conserve power

24
00:00:57,239 --> 00:00:59,520
and then there might be also Dynamic

25
00:00:59,520 --> 00:01:02,460
topology which simply could be due to

26
00:01:02,460 --> 00:01:04,559
moving notes

27
00:01:04,559 --> 00:01:07,619
so if we want to use trust establishment

28
00:01:07,619 --> 00:01:10,560
via public key infrastructure it's very

29
00:01:10,560 --> 00:01:12,320
hard to do this under these conditions

30
00:01:12,320 --> 00:01:15,720
specifically it is hard to check the

31
00:01:15,720 --> 00:01:17,760
up-to-date revocation status of

32
00:01:17,760 --> 00:01:19,140
certificates

33
00:01:19,140 --> 00:01:21,000
so let's look at some existing

34
00:01:21,000 --> 00:01:22,979
revocation checks and why they are not

35
00:01:22,979 --> 00:01:24,540
sufficient in this case

36
00:01:24,540 --> 00:01:26,220
so for one we have the online

37
00:01:26,220 --> 00:01:29,400
certificate status protocol like used in

38
00:01:29,400 --> 00:01:32,040
the internet often so if one node sends

39
00:01:32,040 --> 00:01:34,259
a certificate to another node the

40
00:01:34,259 --> 00:01:36,659
verifying node will directly check with

41
00:01:36,659 --> 00:01:39,420
the issuing certificate Authority if the

42
00:01:39,420 --> 00:01:41,759
certificate has been indeed revoked or

43
00:01:41,759 --> 00:01:42,720
not

44
00:01:42,720 --> 00:01:44,939
however this requires a reliable

45
00:01:44,939 --> 00:01:47,460
connection to the ca which might not be

46
00:01:47,460 --> 00:01:50,000
always the case and it also induces

47
00:01:50,000 --> 00:01:52,799
expensive communication overhead because

48
00:01:52,799 --> 00:01:55,740
all devices in all encounters need to

49
00:01:55,740 --> 00:01:57,060
check this

50
00:01:57,060 --> 00:02:00,180
then we can also do this via certificate

51
00:02:00,180 --> 00:02:04,200
revocation lists here the ca will prior

52
00:02:04,200 --> 00:02:07,500
to the encounter distribute a list of

53
00:02:07,500 --> 00:02:11,160
all revocations then if a node sends a

54
00:02:11,160 --> 00:02:13,920
certificate the verifier can simply

55
00:02:13,920 --> 00:02:16,260
check the list if the certificate is

56
00:02:16,260 --> 00:02:19,560
revoked or not however these lists grow

57
00:02:19,560 --> 00:02:22,620
quite large and because they also need

58
00:02:22,620 --> 00:02:24,540
to be updated and distributed via the

59
00:02:24,540 --> 00:02:27,120
network also are very heavy on the

60
00:02:27,120 --> 00:02:28,260
communication

61
00:02:28,260 --> 00:02:29,700
then there's kind of the third

62
00:02:29,700 --> 00:02:32,340
alternative with the state-of-the-art

63
00:02:32,340 --> 00:02:35,040
alternative to lists so essentially they

64
00:02:35,040 --> 00:02:36,900
work like certificate revocation lists

65
00:02:36,900 --> 00:02:38,879
for example you have cr light or let's

66
00:02:38,879 --> 00:02:42,840
revoke but they replace the list with a

67
00:02:42,840 --> 00:02:44,940
more clever and efficient data structure

68
00:02:44,940 --> 00:02:47,220
to reduce the size of the revocation

69
00:02:47,220 --> 00:02:48,180
information

70
00:02:48,180 --> 00:02:49,379
however

71
00:02:49,379 --> 00:02:52,519
these approaches still do not handle

72
00:02:52,519 --> 00:02:55,920
cases where nodes Miss updates well

73
00:02:55,920 --> 00:02:58,160
because nodes need to re-request

74
00:02:58,160 --> 00:03:01,500
revocation data so overall aside some

75
00:03:01,500 --> 00:03:03,959
other issues the biggest problem here is

76
00:03:03,959 --> 00:03:07,019
there's a lot of calling home needed to

77
00:03:07,019 --> 00:03:09,840
which puts a large Demand on the network

78
00:03:09,840 --> 00:03:13,440
so our solution Visa proposes a flexible

79
00:03:13,440 --> 00:03:15,599
and lightweight revocation check that

80
00:03:15,599 --> 00:03:18,480
enables PTI and constrained Networks

81
00:03:18,480 --> 00:03:21,360
we do this by epidemic dissemination of

82
00:03:21,360 --> 00:03:23,760
validation information and we Define

83
00:03:23,760 --> 00:03:26,159
novel algorithms that allow devices to

84
00:03:26,159 --> 00:03:28,739
keep each other up to date finally we

85
00:03:28,739 --> 00:03:30,659
also evaluated this on a real satellite

86
00:03:30,659 --> 00:03:34,019
and implemented a large-scale simulation

87
00:03:34,019 --> 00:03:37,800
so to outline how Visa Works keep in

88
00:03:37,800 --> 00:03:40,739
mind this is simplified for brevity and

89
00:03:40,739 --> 00:03:42,480
if you're interested I encourage you to

90
00:03:42,480 --> 00:03:43,500
read the paper

91
00:03:43,500 --> 00:03:46,620
so if we look at the naive approach of

92
00:03:46,620 --> 00:03:49,920
the beta way to do things if we have a

93
00:03:49,920 --> 00:03:52,080
set of active certificates we can

94
00:03:52,080 --> 00:03:55,319
actually represent this as marketrees

95
00:03:55,319 --> 00:03:57,659
because we can have the hashes of the

96
00:03:57,659 --> 00:04:00,319
certificate and concatenate these hashes

97
00:04:00,319 --> 00:04:03,840
so we get like a binary tree and we get

98
00:04:03,840 --> 00:04:06,239
a tree root hash that represents all

99
00:04:06,239 --> 00:04:07,799
active certificates which means

100
00:04:07,799 --> 00:04:10,980
certificates that are not revoked

101
00:04:10,980 --> 00:04:14,159
so now we can disseminate the tree root

102
00:04:14,159 --> 00:04:17,040
hash as the validation information which

103
00:04:17,040 --> 00:04:20,699
can be stored on the verifying node and

104
00:04:20,699 --> 00:04:23,520
then if another node comes it will have

105
00:04:23,520 --> 00:04:25,979
a so-called proof of inclusion because

106
00:04:25,979 --> 00:04:28,259
its certificate is also part of the set

107
00:04:28,259 --> 00:04:33,000
the leaf and we can take this path and a

108
00:04:33,000 --> 00:04:34,340
couple of hashes

109
00:04:34,340 --> 00:04:36,960
which can be sent along with a

110
00:04:36,960 --> 00:04:38,160
certificate

111
00:04:38,160 --> 00:04:40,979
and the verifying node can recalculate

112
00:04:40,979 --> 00:04:43,380
this path and if it arrives at the same

113
00:04:43,380 --> 00:04:45,840
tree root hash can prove that the

114
00:04:45,840 --> 00:04:48,360
certificate is indeed not revoked

115
00:04:48,360 --> 00:04:50,580
however this approach this naive

116
00:04:50,580 --> 00:04:53,160
approach has an obvious problem because

117
00:04:53,160 --> 00:04:55,740
on any changes for example if we have a

118
00:04:55,740 --> 00:04:58,620
revocation or an issuance all proofs of

119
00:04:58,620 --> 00:05:00,300
inclusion become invalid because the

120
00:05:00,300 --> 00:05:01,620
tree changes

121
00:05:01,620 --> 00:05:05,699
so what we do in Visa is threefold for

122
00:05:05,699 --> 00:05:08,759
one we Define the validation for its

123
00:05:08,759 --> 00:05:10,680
data structure which will not go into

124
00:05:10,680 --> 00:05:12,419
detail so you have to see the paper for

125
00:05:12,419 --> 00:05:13,380
this

126
00:05:13,380 --> 00:05:16,500
we also use an alternative to do Markle

127
00:05:16,500 --> 00:05:18,479
hash 3 called the sparse Merkel tree

128
00:05:18,479 --> 00:05:21,960
which gets us a deterministic structure

129
00:05:21,960 --> 00:05:23,759
of the hash tree

130
00:05:23,759 --> 00:05:27,360
then we also Define a novel distributed

131
00:05:27,360 --> 00:05:30,300
repair algorithms that allow up-to-date

132
00:05:30,300 --> 00:05:33,000
nodes to help outdated nodes to become

133
00:05:33,000 --> 00:05:35,280
up to date again

134
00:05:35,280 --> 00:05:37,020
um so we leverage the deterministic

135
00:05:37,020 --> 00:05:39,720
structure of the sparse Merkel tree to

136
00:05:39,720 --> 00:05:42,479
do this collaborative updating so to

137
00:05:42,479 --> 00:05:44,759
kind of show you how this works let's

138
00:05:44,759 --> 00:05:46,740
consider an example so we have the

139
00:05:46,740 --> 00:05:48,780
certificate Authority and a couple of

140
00:05:48,780 --> 00:05:52,020
nodes which know the current tree root

141
00:05:52,020 --> 00:05:55,380
hash and have their all their individual

142
00:05:55,380 --> 00:05:57,360
proofs of inclusion for their respective

143
00:05:57,360 --> 00:05:58,560
certificates

144
00:05:58,560 --> 00:06:02,699
now if a certificate got revoked then

145
00:06:02,699 --> 00:06:04,560
the entire tree changes this of course

146
00:06:04,560 --> 00:06:08,039
implies that the network gets outdated

147
00:06:08,039 --> 00:06:11,460
so the three routes are outdated and the

148
00:06:11,460 --> 00:06:13,259
individual proofs of inclusion as well

149
00:06:13,259 --> 00:06:17,759
so the ca can distribute such an update

150
00:06:17,759 --> 00:06:20,220
with a new route and a couple of

151
00:06:20,220 --> 00:06:22,500
information that allows nodes to update

152
00:06:22,500 --> 00:06:25,020
their individual proofs of inclusion

153
00:06:25,020 --> 00:06:27,479
however a couple of nodes will not

154
00:06:27,479 --> 00:06:29,280
receive this update because they're

155
00:06:29,280 --> 00:06:33,060
obstructed hibernating or similar so if

156
00:06:33,060 --> 00:06:34,680
we simplify the view here a little bit

157
00:06:34,680 --> 00:06:38,100
with the updated nodes and for example

158
00:06:38,100 --> 00:06:41,100
one node moves it will meet other nodes

159
00:06:41,100 --> 00:06:44,039
and in this case it can actually share

160
00:06:44,039 --> 00:06:46,560
the new root which is universal for all

161
00:06:46,560 --> 00:06:47,759
nodes

162
00:06:47,759 --> 00:06:50,699
and it can also share its up-to-date

163
00:06:50,699 --> 00:06:53,520
proof of inclusion which may allow these

164
00:06:53,520 --> 00:06:55,199
nodes to update their own proofs of

165
00:06:55,199 --> 00:06:57,539
inclusion and then of course if we have

166
00:06:57,539 --> 00:07:00,660
many up-to-date nodes they may meet some

167
00:07:00,660 --> 00:07:03,380
more nodes and this is where we get this

168
00:07:03,380 --> 00:07:06,240
epidemic spread of validation

169
00:07:06,240 --> 00:07:07,440
information

170
00:07:07,440 --> 00:07:09,539
so the nice thing about this is that

171
00:07:09,539 --> 00:07:11,460
it's topology independent because it

172
00:07:11,460 --> 00:07:13,639
only relies on Direct contact messages

173
00:07:13,639 --> 00:07:16,199
and has a very fast revocation

174
00:07:16,199 --> 00:07:17,520
enforcement

175
00:07:17,520 --> 00:07:20,160
so to go into a bit more detail about

176
00:07:20,160 --> 00:07:22,680
the distributed repair algorithms

177
00:07:22,680 --> 00:07:24,479
let's quickly talk about the sparse

178
00:07:24,479 --> 00:07:25,440
Michael tree

179
00:07:25,440 --> 00:07:28,199
so with the sparse Michael tree the idea

180
00:07:28,199 --> 00:07:32,039
is to have all possible outputs of the

181
00:07:32,039 --> 00:07:34,800
used hash functions as leads as you can

182
00:07:34,800 --> 00:07:37,500
see here from zero zero zero to FFF

183
00:07:37,500 --> 00:07:40,979
now we can build a giant Merkel tree up

184
00:07:40,979 --> 00:07:44,599
to its tree root hash

185
00:07:44,699 --> 00:07:48,080
and as you can see this gets quite big

186
00:07:48,080 --> 00:07:52,199
so the idea here is that most parts of

187
00:07:52,199 --> 00:07:55,440
this tree will be empty and empty Parts

188
00:07:55,440 --> 00:07:58,259
can be identified and omitted both in

189
00:07:58,259 --> 00:08:00,479
the tree representation as well as in

190
00:08:00,479 --> 00:08:03,599
the proofs of inclusion so we leverage

191
00:08:03,599 --> 00:08:06,300
this to for our distributed repair of

192
00:08:06,300 --> 00:08:09,240
proofs so here's a simple example

193
00:08:09,240 --> 00:08:12,479
so consider a note with its certificate

194
00:08:12,479 --> 00:08:14,460
it has a deterministic position in the

195
00:08:14,460 --> 00:08:16,319
tree because the hash of the certificate

196
00:08:16,319 --> 00:08:18,780
defines where it is in the tree and we

197
00:08:18,780 --> 00:08:22,080
know exactly which kind of which proof

198
00:08:22,080 --> 00:08:24,180
of inclusion hashes it needs for its

199
00:08:24,180 --> 00:08:26,099
proof and it will store this

200
00:08:26,099 --> 00:08:29,160
now if our tree has some changes for

201
00:08:29,160 --> 00:08:31,399
example as a new issued certificate

202
00:08:31,399 --> 00:08:34,140
parts of the proof of inclusion of our

203
00:08:34,140 --> 00:08:36,240
original node will change

204
00:08:36,240 --> 00:08:39,240
so now if this node meets another

205
00:08:39,240 --> 00:08:43,039
up-to-date node which has its own

206
00:08:43,039 --> 00:08:46,260
certificate and proof of inclusion it

207
00:08:46,260 --> 00:08:49,080
can share this proof of inclusion and

208
00:08:49,080 --> 00:08:51,660
because we know exactly again the

209
00:08:51,660 --> 00:08:54,060
position is deterministic this allows

210
00:08:54,060 --> 00:08:56,459
the original node to calculate its

211
00:08:56,459 --> 00:08:57,660
missing hash

212
00:08:57,660 --> 00:09:01,620
and thus become up to date again

213
00:09:01,620 --> 00:09:04,440
so one use case that we considered are

214
00:09:04,440 --> 00:09:06,540
satellite networks so why are satellite

215
00:09:06,540 --> 00:09:08,940
networks important well for one the

216
00:09:08,940 --> 00:09:11,220
space sector is growing dramatically

217
00:09:11,220 --> 00:09:13,740
which only one of the indicators that

218
00:09:13,740 --> 00:09:15,839
you can see here is the number of

219
00:09:15,839 --> 00:09:17,700
operational satellites which is

220
00:09:17,700 --> 00:09:19,620
currently growing exponentially and

221
00:09:19,620 --> 00:09:21,300
there is no end inside

222
00:09:21,300 --> 00:09:25,380
and a key Trend here is the move towards

223
00:09:25,380 --> 00:09:27,480
large networks of small and cheap

224
00:09:27,480 --> 00:09:29,399
satellites opposed to the traditional

225
00:09:29,399 --> 00:09:31,019
way of building

226
00:09:31,019 --> 00:09:34,200
a very big individual ones

227
00:09:34,200 --> 00:09:36,240
so we did an evaluation in space

228
00:09:36,240 --> 00:09:37,320
actually

229
00:09:37,320 --> 00:09:39,360
for this we collaborated with the

230
00:09:39,360 --> 00:09:42,360
European space agency and because they

231
00:09:42,360 --> 00:09:45,660
have a cubesat called opsat which is

232
00:09:45,660 --> 00:09:47,700
actually open for anyone to register and

233
00:09:47,700 --> 00:09:49,320
upload experiments

234
00:09:49,320 --> 00:09:52,620
and while it's not the most powerful and

235
00:09:52,620 --> 00:09:55,380
we also had to make some concessions on

236
00:09:55,380 --> 00:09:57,839
the implementation we parted our open

237
00:09:57,839 --> 00:09:59,600
source proof of concept

238
00:09:59,600 --> 00:10:02,640
and deployed it on the satellite and

239
00:10:02,640 --> 00:10:06,839
evaluated it on board in space

240
00:10:06,839 --> 00:10:10,500
then to show the effectiveness of the

241
00:10:10,500 --> 00:10:13,920
distributed repair we also did a large

242
00:10:13,920 --> 00:10:17,640
scale simulation so here we simulated up

243
00:10:17,640 --> 00:10:19,860
to 1 million nodes and each day

244
00:10:19,860 --> 00:10:22,080
certificate gets revoked and reissued

245
00:10:22,080 --> 00:10:26,940
each week fresh certificate gets issued

246
00:10:26,940 --> 00:10:29,459
and each node randomly meets five nodes

247
00:10:29,459 --> 00:10:33,600
per hour with of course a try to

248
00:10:33,600 --> 00:10:36,180
distribute it repair their proof of

249
00:10:36,180 --> 00:10:37,260
inclusion

250
00:10:37,260 --> 00:10:41,040
and also we simulated a share of nodes

251
00:10:41,040 --> 00:10:42,899
that Miss CA updates

252
00:10:42,899 --> 00:10:46,079
so for the results if you look at the

253
00:10:46,079 --> 00:10:48,420
most extreme result that we have with 1

254
00:10:48,420 --> 00:10:51,720
million nodes and 50 of nodes actually

255
00:10:51,720 --> 00:10:53,779
missing the ca update

256
00:10:53,779 --> 00:10:56,579
we can still show that the distributed

257
00:10:56,579 --> 00:11:00,420
repair approach avoids 93 of outdated

258
00:11:00,420 --> 00:11:03,660
nodes that need to call home to update

259
00:11:03,660 --> 00:11:06,000
their revocation information

260
00:11:06,000 --> 00:11:08,940
then of course with this direct exchange

261
00:11:08,940 --> 00:11:11,220
of nodes we also measured how much

262
00:11:11,220 --> 00:11:14,399
communication overhead this makes and in

263
00:11:14,399 --> 00:11:17,220
our previously mentioned extreme case

264
00:11:17,220 --> 00:11:20,040
we need actually less than 100 kilobytes

265
00:11:20,040 --> 00:11:22,620
of communications overhead pernode per

266
00:11:22,620 --> 00:11:24,360
week

267
00:11:24,360 --> 00:11:26,339
so in conclusion

268
00:11:26,339 --> 00:11:28,440
we use the macro tree root hash as

269
00:11:28,440 --> 00:11:30,839
validation information which allows a

270
00:11:30,839 --> 00:11:33,120
epidemic spread for past revocation

271
00:11:33,120 --> 00:11:34,860
enforcement

272
00:11:34,860 --> 00:11:37,140
then we use proof of inclusions as the

273
00:11:37,140 --> 00:11:39,000
non-revoked proof

274
00:11:39,000 --> 00:11:42,060
and defined novel distributed repair

275
00:11:42,060 --> 00:11:43,980
algorithms that allow up-to-date nodes

276
00:11:43,980 --> 00:11:45,660
to help outdated nodes

277
00:11:45,660 --> 00:11:48,500
which leads to a probabilistic approach

278
00:11:48,500 --> 00:11:51,839
where a large share of outdated nodes

279
00:11:51,839 --> 00:11:53,220
can be repaired

280
00:11:53,220 --> 00:11:55,500
and finally because we only use contact

281
00:11:55,500 --> 00:11:57,540
messages direct contact messages for

282
00:11:57,540 --> 00:12:00,899
this this is all topology independent

283
00:12:00,899 --> 00:12:02,519
so thank you very much and I'm happy

284
00:12:02,519 --> 00:12:05,660
happy to take questions

