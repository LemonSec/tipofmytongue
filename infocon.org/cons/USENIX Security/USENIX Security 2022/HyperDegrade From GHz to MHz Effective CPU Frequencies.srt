1
00:00:08,000 --> 00:00:10,800
hi my name is Alejandro I'm going to

2
00:00:10,800 --> 00:00:12,960
present the paper hyper the great from

3
00:00:12,960 --> 00:00:15,480
gigahertz to megahertz affect the CPU

4
00:00:15,480 --> 00:00:18,080
frequencies

5
00:00:19,199 --> 00:00:21,180
we will be starting to use in the future

6
00:00:21,180 --> 00:00:23,039
reload and performance realization

7
00:00:23,039 --> 00:00:25,800
attacks as they are core components of

8
00:00:25,800 --> 00:00:28,260
This research then we present the

9
00:00:28,260 --> 00:00:31,439
concept of ipd grade and compare it with

10
00:00:31,439 --> 00:00:32,820
different performa degradation

11
00:00:32,820 --> 00:00:34,500
strategies

12
00:00:34,500 --> 00:00:37,200
finally we estimate the impact of iPad

13
00:00:37,200 --> 00:00:41,960
degrade as a site SSI Channel amplifier

14
00:00:42,120 --> 00:00:43,980
let's begin with an informal

15
00:00:43,980 --> 00:00:45,840
introduction to the flowchart reload

16
00:00:45,840 --> 00:00:49,680
cache attack the victim execute some

17
00:00:49,680 --> 00:00:52,020
memory address greenbox in the chart

18
00:00:52,020 --> 00:00:54,719
that the attacker want to track the

19
00:00:54,719 --> 00:00:56,820
attacker periodically executes a

20
00:00:56,820 --> 00:00:59,280
flowchart reload cycle that is a blue

21
00:00:59,280 --> 00:01:02,520
and red boxes in the picture to carry he

22
00:01:02,520 --> 00:01:04,860
detached memory address was accessed or

23
00:01:04,860 --> 00:01:07,320
not in practice the temporal resolution

24
00:01:07,320 --> 00:01:09,900
of the attack is limited hence the

25
00:01:09,900 --> 00:01:12,780
waiting period gray area is lower

26
00:01:12,780 --> 00:01:15,000
bounded

27
00:01:15,000 --> 00:01:16,860
but what will happen if everything

28
00:01:16,860 --> 00:01:19,799
execute the target target memory address

29
00:01:19,799 --> 00:01:22,920
twice very quickly in this case the pool

30
00:01:22,920 --> 00:01:24,780
attacker will only trigger one of them

31
00:01:24,780 --> 00:01:29,040
missing importance such as information

32
00:01:29,040 --> 00:01:31,380
performance acceleration attacks a slow

33
00:01:31,380 --> 00:01:33,659
down beating execution increasing the

34
00:01:33,659 --> 00:01:36,360
chances to track both memory accesses

35
00:01:36,360 --> 00:01:37,979
using a flowchart reload attack

36
00:01:37,979 --> 00:01:40,380
therefore it increased the temporary

37
00:01:40,380 --> 00:01:43,799
solution of the attack

38
00:01:43,799 --> 00:01:47,159
they use of cash eviction to slow down

39
00:01:47,159 --> 00:01:49,439
as a channel beating was proposed six

40
00:01:49,439 --> 00:01:52,320
years ago the Diaz is based on floating

41
00:01:52,320 --> 00:01:54,780
hot big team Cash Line periodically

42
00:01:54,780 --> 00:01:57,840
forcing David is called together then

43
00:01:57,840 --> 00:02:00,119
from the slower main memory this attack

44
00:02:00,119 --> 00:02:02,579
like crucial float requires a chain

45
00:02:02,579 --> 00:02:04,799
memory environment higher profiling

46
00:02:04,799 --> 00:02:07,680
phase where the whole cache lines are

47
00:02:07,680 --> 00:02:10,258
identified the combination of this

48
00:02:10,258 --> 00:02:12,180
performance degradation attack and

49
00:02:12,180 --> 00:02:14,280
crucial reload have been using in

50
00:02:14,280 --> 00:02:17,180
several Works before

51
00:02:17,520 --> 00:02:19,620
we will start revisiting the original

52
00:02:19,620 --> 00:02:21,840
performance relation attack that was

53
00:02:21,840 --> 00:02:24,599
labeled as degrade for this task we

54
00:02:24,599 --> 00:02:26,879
design an experiment where we execute

55
00:02:26,879 --> 00:02:29,280
about 1 million instructions and

56
00:02:29,280 --> 00:02:31,500
collected the average of some CPU

57
00:02:31,500 --> 00:02:35,220
metrics using the Linux perf tool

58
00:02:35,220 --> 00:02:37,980
first we compare the Baseline approach

59
00:02:37,980 --> 00:02:40,980
node grade with the original degree

60
00:02:40,980 --> 00:02:43,379
as expected we see a considerable

61
00:02:43,379 --> 00:02:45,720
increase on the number of cash misses

62
00:02:45,720 --> 00:02:48,780
resulting about a 12 times more CPU

63
00:02:48,780 --> 00:02:51,480
Cycles however we note that the

64
00:02:51,480 --> 00:02:54,540
cashmere's number of instructional ratio

65
00:02:54,540 --> 00:02:57,180
is far below the unit so it's very

66
00:02:57,180 --> 00:03:01,860
natural to us can we do better

67
00:03:01,860 --> 00:03:05,519
and and yes hyper degree improved this

68
00:03:05,519 --> 00:03:09,120
Ratio or send me close to 1 million cash

69
00:03:09,120 --> 00:03:11,879
misses the idea of ipd grade is

70
00:03:11,879 --> 00:03:15,120
combining the degrade with the smt

71
00:03:15,120 --> 00:03:18,060
feature High pay trading on Intel's la

72
00:03:18,060 --> 00:03:20,700
and this setup we co-locate the

73
00:03:20,700 --> 00:03:22,260
regarding process in the same physical

74
00:03:22,260 --> 00:03:26,220
core where the v-tip is running

75
00:03:26,220 --> 00:03:28,500
during the data analysis we observed

76
00:03:28,500 --> 00:03:30,900
that the number of CPU cycle grows

77
00:03:30,900 --> 00:03:35,159
faster than the other metrics so we

78
00:03:35,159 --> 00:03:36,959
suspect that there could be another slow

79
00:03:36,959 --> 00:03:39,780
down reason beyond the cashmissions

80
00:03:39,780 --> 00:03:42,299
as the song experiments we identified

81
00:03:42,299 --> 00:03:44,640
that matching clears can't explain this

82
00:03:44,640 --> 00:03:47,640
Behavior specifically specifically the

83
00:03:47,640 --> 00:03:51,180
one produced by self-modifying code

84
00:03:51,180 --> 00:03:53,400
while we are not modifying the written

85
00:03:53,400 --> 00:03:55,799
code at the architecture level a cash

86
00:03:55,799 --> 00:03:58,799
line flush can be interpreted as such by

87
00:03:58,799 --> 00:04:01,680
the micro architecture

88
00:04:01,680 --> 00:04:03,720
according to Intel machine click course

89
00:04:03,720 --> 00:04:08,780
as cause a severe performance penalty

90
00:04:11,459 --> 00:04:14,580
after presenting the IP degree idea we

91
00:04:14,580 --> 00:04:16,500
are going to compare is a Solon Tau

92
00:04:16,500 --> 00:04:19,680
impact with respect other strategies for

93
00:04:19,680 --> 00:04:21,600
this task we design an another

94
00:04:21,600 --> 00:04:24,180
experiment and compare four perform

95
00:04:24,180 --> 00:04:26,520
adelaeration strategies plus the no

96
00:04:26,520 --> 00:04:27,780
degree

97
00:04:27,780 --> 00:04:29,580
in addition to the first two years

98
00:04:29,580 --> 00:04:32,400
strategy discusses so far we included

99
00:04:32,400 --> 00:04:35,040
two hyper degree related approaches for

100
00:04:35,040 --> 00:04:36,660
completeness

101
00:04:36,660 --> 00:04:38,940
the contention strategy is based on

102
00:04:38,940 --> 00:04:41,460
hyper degree but this time we flush a

103
00:04:41,460 --> 00:04:44,160
cache line not executed by the victim

104
00:04:44,160 --> 00:04:46,380
this approach answers a question about

105
00:04:46,380 --> 00:04:50,160
this if the S smt itself will be

106
00:04:50,160 --> 00:04:52,620
sufficient to cause a significant

107
00:04:52,620 --> 00:04:55,500
performance penalty

108
00:04:55,500 --> 00:04:57,780
these figures show the experimental

109
00:04:57,780 --> 00:05:01,800
results at the UI axis we have the CPU

110
00:05:01,800 --> 00:05:04,500
cycles per number of executed

111
00:05:04,500 --> 00:05:06,720
instruction ratio in the logarithmic

112
00:05:06,720 --> 00:05:10,560
scale while the x-axis expands for the

113
00:05:10,560 --> 00:05:13,979
number of instructions

114
00:05:14,160 --> 00:05:16,620
at the bottom of the graph no degree and

115
00:05:16,620 --> 00:05:18,720
the contention approaches overlaps

116
00:05:18,720 --> 00:05:23,220
suggesting that a smt condition alone is

117
00:05:23,220 --> 00:05:25,919
not sufficient to explode down a bit

118
00:05:25,919 --> 00:05:28,620
heavy considerably

119
00:05:28,620 --> 00:05:32,240
the last ingredient is understand alone

120
00:05:32,240 --> 00:05:34,680
self-modifying code there are different

121
00:05:34,680 --> 00:05:36,979
ways of triggering machine clear using

122
00:05:36,979 --> 00:05:40,500
SMC in this case we are using the ISA

123
00:05:40,500 --> 00:05:42,780
instead of the catch

124
00:05:42,780 --> 00:05:44,699
the curves on the middle of the figure

125
00:05:44,699 --> 00:05:47,580
suggests the fcmc approach offers the

126
00:05:47,580 --> 00:05:50,039
same level of a Slowdown as the degrade

127
00:05:50,039 --> 00:05:53,039
a strategy however this approach doesn't

128
00:05:53,039 --> 00:05:56,220
require hm memory with the victim

129
00:05:56,220 --> 00:05:59,220
at the top of the charts is the

130
00:05:59,220 --> 00:06:01,680
hyper degree results where it can be

131
00:06:01,680 --> 00:06:04,320
seen it exceeds all the strategies by

132
00:06:04,320 --> 00:06:08,360
several orders of magnitude

133
00:06:12,419 --> 00:06:15,240
previous experiments

134
00:06:15,240 --> 00:06:17,520
were done using homemade hardnesses

135
00:06:17,520 --> 00:06:20,400
therefore it would be interesting to see

136
00:06:20,400 --> 00:06:22,919
how hyper degree behaves on real code

137
00:06:22,919 --> 00:06:26,400
for this task we launched hybrid degrade

138
00:06:26,400 --> 00:06:29,940
against the Pips Benchmark Suite as both

139
00:06:29,940 --> 00:06:32,400
degrade and Hyper degrade strategies

140
00:06:32,400 --> 00:06:35,460
require a hot catch line we collected a

141
00:06:35,460 --> 00:06:37,380
statistic of the performance negotiation

142
00:06:37,380 --> 00:06:40,020
for all cache line used by every match

143
00:06:40,020 --> 00:06:42,720
part process for different Intel micro

144
00:06:42,720 --> 00:06:44,220
architectures

145
00:06:44,220 --> 00:06:48,120
the table the table shows Sony statistic

146
00:06:48,120 --> 00:06:50,699
of this large experiment which is spread

147
00:06:50,699 --> 00:06:53,400
of the Baseline Baseline code

148
00:06:53,400 --> 00:06:55,560
it can be seen that iPad degrees has

149
00:06:55,560 --> 00:06:59,100
slowed down so Benchmark by 1000

150
00:06:59,100 --> 00:07:01,520
times

151
00:07:03,000 --> 00:07:05,639
previously previously we have we have

152
00:07:05,639 --> 00:07:08,340
focus on the slow down impact of ipd

153
00:07:08,340 --> 00:07:11,240
grade so its impact access SI Channel

154
00:07:11,240 --> 00:07:14,580
amplifier for follows we have related

155
00:07:14,580 --> 00:07:17,160
this question to fall first we employ a

156
00:07:17,160 --> 00:07:19,860
statistical leakage assessment tool

157
00:07:19,860 --> 00:07:23,580
and ICB to statistically validate that

158
00:07:23,580 --> 00:07:25,680
hyper degree increases the number of

159
00:07:25,680 --> 00:07:28,560
points of interest in si Channel Trace

160
00:07:28,560 --> 00:07:30,300
this is shown

161
00:07:30,300 --> 00:07:32,639
in the experiment results at this figure

162
00:07:32,639 --> 00:07:35,880
where the hyper degree curve has much

163
00:07:35,880 --> 00:07:37,919
more samples at high correlation

164
00:07:37,919 --> 00:07:40,259
coefficients

165
00:07:40,259 --> 00:07:43,740
the y-axis please refer to the paper for

166
00:07:43,740 --> 00:07:47,840
the detail of this aspect

167
00:07:48,979 --> 00:07:52,139
we also estimated the input of iPad

168
00:07:52,139 --> 00:07:55,319
degree as a channel amplifier using a

169
00:07:55,319 --> 00:07:58,680
real Channel leakage as a Target we

170
00:07:58,680 --> 00:08:01,259
selected a leakage at open SSL

171
00:08:01,259 --> 00:08:04,020
discovered by the raccoon attack authors

172
00:08:04,020 --> 00:08:06,960
but not exploited before the leakage is

173
00:08:06,960 --> 00:08:08,819
due to a conditional statement a life

174
00:08:08,819 --> 00:08:11,940
for it and the attacker is interested in

175
00:08:11,940 --> 00:08:14,880
tracking when this branch is taken at

176
00:08:14,880 --> 00:08:16,680
the right of the slide we see a typical

177
00:08:16,680 --> 00:08:18,720
fluution reload Trace where the cast

178
00:08:18,720 --> 00:08:21,900
line containing the call to the move

179
00:08:21,900 --> 00:08:24,599
function is targeted in this Trace we

180
00:08:24,599 --> 00:08:27,419
detected two cache hits one observed

181
00:08:27,419 --> 00:08:29,400
during the calling structure and another

182
00:08:29,400 --> 00:08:32,880
when this is for function returns this

183
00:08:32,880 --> 00:08:35,940
part pattern is an indicated indicator

184
00:08:35,940 --> 00:08:39,380
that the branch was taken

185
00:08:40,020 --> 00:08:42,539
we employed a generic leakages

186
00:08:42,539 --> 00:08:44,839
protection upload approach that is not

187
00:08:44,839 --> 00:08:47,100
optimized for any degrees

188
00:08:47,100 --> 00:08:49,740
eternity and is configurable to a sweep

189
00:08:49,740 --> 00:08:52,440
a set of parameter set the idea of this

190
00:08:52,440 --> 00:08:54,720
experiment is to have a common approach

191
00:08:54,720 --> 00:08:56,640
for compiling The Three Degree

192
00:08:56,640 --> 00:08:59,880
strategies no degrade degrade and Hyper

193
00:08:59,880 --> 00:09:02,519
delay for each parameter set combination

194
00:09:02,519 --> 00:09:05,399
and the great example we executed the

195
00:09:05,399 --> 00:09:09,200
attack against open SSL

196
00:09:10,760 --> 00:09:13,019
showing the table belong to the best

197
00:09:13,019 --> 00:09:15,779
parameter set but every degree is a

198
00:09:15,779 --> 00:09:19,019
study notice how hyper the great

199
00:09:19,019 --> 00:09:21,779
outperformed the other two requires

200
00:09:21,779 --> 00:09:24,600
significantly less stresses

201
00:09:24,600 --> 00:09:27,060
the cumulative distribution of the

202
00:09:27,060 --> 00:09:31,260
result show that they are 88 parameters

203
00:09:31,260 --> 00:09:33,959
set with hybrid degrade can be used to

204
00:09:33,959 --> 00:09:36,120
exploit this leakage before degrade

205
00:09:36,120 --> 00:09:38,779
comes with c

206
00:09:40,580 --> 00:09:44,220
conclusion about our work hybrid will

207
00:09:44,220 --> 00:09:48,180
require an smt micro agitator

208
00:09:48,180 --> 00:09:50,820
hyper degree also increase the Slowdown

209
00:09:50,820 --> 00:09:52,380
farther in comparison with previous

210
00:09:52,380 --> 00:09:54,839
approaches massive clear and an

211
00:09:54,839 --> 00:09:56,399
additional root cause of the original

212
00:09:56,399 --> 00:09:57,839
degrade

213
00:09:57,839 --> 00:10:00,300
a self-modifying code approaches slowed

214
00:10:00,300 --> 00:10:03,420
down light grade without the memory the

215
00:10:03,420 --> 00:10:05,880
shared memory requirement

216
00:10:05,880 --> 00:10:08,880
smt contention is not enough for causing

217
00:10:08,880 --> 00:10:11,459
a significant performance penalty hyper

218
00:10:11,459 --> 00:10:13,800
degrees reduce the number of traces

219
00:10:13,800 --> 00:10:17,339
against a raccoon attack variant

220
00:10:17,339 --> 00:10:20,060
thank you

