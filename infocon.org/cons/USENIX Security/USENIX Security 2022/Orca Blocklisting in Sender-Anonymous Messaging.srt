1
00:00:07,340 --> 00:00:10,260
thank you hi everyone my name is nirvan

2
00:00:10,260 --> 00:00:11,760
so I'll be talking about our work on

3
00:00:11,760 --> 00:00:13,799
building sender block listing in

4
00:00:13,799 --> 00:00:15,780
end-to-end encrypted messaging

5
00:00:15,780 --> 00:00:18,300
so in antenna encryption messaging in

6
00:00:18,300 --> 00:00:19,800
this setting users communicate by

7
00:00:19,800 --> 00:00:22,020
sending messages encrypted under some

8
00:00:22,020 --> 00:00:24,119
shared secret key the encrypted methods

9
00:00:24,119 --> 00:00:26,039
are typically passed through some

10
00:00:26,039 --> 00:00:27,539
centralized delivery service like

11
00:00:27,539 --> 00:00:30,240
WhatsApp or signal and there's typically

12
00:00:30,240 --> 00:00:33,120
two security properties that are desired

13
00:00:33,120 --> 00:00:36,180
the primary goals are confidentiality

14
00:00:36,180 --> 00:00:38,399
and integrity where confidentiality

15
00:00:38,399 --> 00:00:40,680
means that message contents are hidden

16
00:00:40,680 --> 00:00:42,840
from the platform integrity means that

17
00:00:42,840 --> 00:00:44,940
message contents can't be tampered with

18
00:00:44,940 --> 00:00:47,040
or forged

19
00:00:47,040 --> 00:00:49,500
and another feature that's come to be

20
00:00:49,500 --> 00:00:51,719
expected of more modern messaging

21
00:00:51,719 --> 00:00:54,180
platforms is sender block listing and

22
00:00:54,180 --> 00:00:56,579
this is to help protect clients from

23
00:00:56,579 --> 00:00:58,260
spam and abuse

24
00:00:58,260 --> 00:01:00,059
so technically this work of block

25
00:01:00,059 --> 00:01:02,820
listing or filtering can be done down on

26
00:01:02,820 --> 00:01:05,099
the client side in the background on

27
00:01:05,099 --> 00:01:06,900
their device but pushing this work of

28
00:01:06,900 --> 00:01:08,280
filter into the client can result in

29
00:01:08,280 --> 00:01:10,380
denial of service attacks that can lead

30
00:01:10,380 --> 00:01:13,500
to battery drain on the device and so

31
00:01:13,500 --> 00:01:15,479
really it's pretty important for us to

32
00:01:15,479 --> 00:01:17,520
be able to for the client to Outsource

33
00:01:17,520 --> 00:01:20,520
this filtering to the platform for

34
00:01:20,520 --> 00:01:22,439
example by providing a sender block list

35
00:01:22,439 --> 00:01:24,659
which the platform can use to prevent

36
00:01:24,659 --> 00:01:26,640
future message from even reaching the

37
00:01:26,640 --> 00:01:29,119
client device

38
00:01:29,159 --> 00:01:30,420
so

39
00:01:30,420 --> 00:01:32,759
more recently a third security goal

40
00:01:32,759 --> 00:01:34,619
that's become of interest is metadata

41
00:01:34,619 --> 00:01:36,420
privacy or who is communicating with

42
00:01:36,420 --> 00:01:39,720
whom and I'm caveating this goal is kind

43
00:01:39,720 --> 00:01:42,180
of aspirational because typically this

44
00:01:42,180 --> 00:01:43,979
property hasn't really made it into

45
00:01:43,979 --> 00:01:47,520
largely deployed messaging platforms and

46
00:01:47,520 --> 00:01:49,320
that's because known techniques for

47
00:01:49,320 --> 00:01:51,840
achieving metadata privacy are

48
00:01:51,840 --> 00:01:53,220
computationally expensive and can

49
00:01:53,220 --> 00:01:56,640
require complex trust models

50
00:01:56,640 --> 00:01:59,100
so this changed kind of recently when

51
00:01:59,100 --> 00:02:01,200
signal a popular end-to-end encrypted

52
00:02:01,200 --> 00:02:03,060
messaging service rolled out a really

53
00:02:03,060 --> 00:02:05,340
cool new protocol that they call sealed

54
00:02:05,340 --> 00:02:06,240
sender

55
00:02:06,240 --> 00:02:10,139
in Signal sealed sender it targets a

56
00:02:10,139 --> 00:02:12,180
relaxed form of metadata privacy instead

57
00:02:12,180 --> 00:02:13,680
of trying to hide both the sender

58
00:02:13,680 --> 00:02:15,360
identity and the recipient identity

59
00:02:15,360 --> 00:02:17,599
signal seal Center just tries to hide

60
00:02:17,599 --> 00:02:19,680
sender identity

61
00:02:19,680 --> 00:02:21,780
and the hope is that by targeting this

62
00:02:21,780 --> 00:02:24,239
relaxed notion they can provide a more

63
00:02:24,239 --> 00:02:26,459
practical Deployable protocol but still

64
00:02:26,459 --> 00:02:28,319
provide some meaningful level of privacy

65
00:02:28,319 --> 00:02:31,680
improvements for for their users

66
00:02:31,680 --> 00:02:34,680
but however with this like new metadata

67
00:02:34,680 --> 00:02:37,260
privacy it's kind of unclear how to pair

68
00:02:37,260 --> 00:02:39,000
it with this previous goal of sender

69
00:02:39,000 --> 00:02:40,500
block listing

70
00:02:40,500 --> 00:02:43,920
seal sender does propose a mechanism for

71
00:02:43,920 --> 00:02:45,780
center block listing but I'll show

72
00:02:45,780 --> 00:02:47,940
shortly that it does come with some

73
00:02:47,940 --> 00:02:49,620
significant limitations

74
00:02:49,620 --> 00:02:50,879
and so this is the problem that we

75
00:02:50,879 --> 00:02:52,620
tackle in this work this problem of

76
00:02:52,620 --> 00:02:56,160
sender Anonymous uh blacklisting and

77
00:02:56,160 --> 00:02:57,900
Center Anonymous messaging and we show

78
00:02:57,900 --> 00:02:59,519
that we can achieve it via new

79
00:02:59,519 --> 00:03:01,080
cryptography

80
00:03:01,080 --> 00:03:02,940
so I'll start by taking a closer look at

81
00:03:02,940 --> 00:03:05,400
the proposed sealed sender protocol and

82
00:03:05,400 --> 00:03:06,540
I'll point out some of the limitations

83
00:03:06,540 --> 00:03:08,459
of those existing block listing

84
00:03:08,459 --> 00:03:10,560
mechanism and then I'll present our new

85
00:03:10,560 --> 00:03:12,000
sender Anonymous block listing protocol

86
00:03:12,000 --> 00:03:14,459
that we call Orca that addresses these

87
00:03:14,459 --> 00:03:16,140
limitations

88
00:03:16,140 --> 00:03:18,840
great so let me start by jumping into

89
00:03:18,840 --> 00:03:20,640
sealed sender

90
00:03:20,640 --> 00:03:22,560
sealed sender protects recipients using

91
00:03:22,560 --> 00:03:25,140
an access key mechanism the Bob will

92
00:03:25,140 --> 00:03:26,519
generate an execute for himself think of

93
00:03:26,519 --> 00:03:29,159
as just a random 128-bit word and you'll

94
00:03:29,159 --> 00:03:31,080
register it with the platform

95
00:03:31,080 --> 00:03:33,120
Bob will send his access key to his

96
00:03:33,120 --> 00:03:34,319
friends with whom he wants to be able to

97
00:03:34,319 --> 00:03:35,819
communicate with and then later on when

98
00:03:35,819 --> 00:03:37,440
his friend Alice wants to send him a

99
00:03:37,440 --> 00:03:39,180
message Alice will present the access

100
00:03:39,180 --> 00:03:40,980
key to the platform

101
00:03:40,980 --> 00:03:43,140
and since the platform knows Bob's

102
00:03:43,140 --> 00:03:44,700
access key the platform can compare the

103
00:03:44,700 --> 00:03:46,500
access keys and if they match we'll

104
00:03:46,500 --> 00:03:48,900
forward the ciphertext along to Bob and

105
00:03:48,900 --> 00:03:50,760
so the platform only learns here that

106
00:03:50,760 --> 00:03:53,099
someone who knows Bob's access key is

107
00:03:53,099 --> 00:03:54,720
authenticating and no other information

108
00:03:54,720 --> 00:03:57,379
right

109
00:03:57,420 --> 00:03:59,099
but this kind of leads us to our first

110
00:03:59,099 --> 00:04:00,659
identified weakness and steel centers

111
00:04:00,659 --> 00:04:03,420
that this access key is initially shared

112
00:04:03,420 --> 00:04:05,159
across non-center Anonymous channels so

113
00:04:05,159 --> 00:04:07,799
the platform can observe who Bob shares

114
00:04:07,799 --> 00:04:09,959
uh the access key with and so later on

115
00:04:09,959 --> 00:04:11,040
when someone authenticates with the

116
00:04:11,040 --> 00:04:13,439
access key the anonymity set of who that

117
00:04:13,439 --> 00:04:15,720
person could be might be small and would

118
00:04:15,720 --> 00:04:18,540
be known by the platform

119
00:04:18,540 --> 00:04:20,279
a second weakness is that even once

120
00:04:20,279 --> 00:04:22,560
these access keys are distributed the

121
00:04:22,560 --> 00:04:24,180
timing of messages are linked to the

122
00:04:24,180 --> 00:04:25,259
platform

123
00:04:25,259 --> 00:04:27,780
so as per Center anonymity each

124
00:04:27,780 --> 00:04:29,940
individual message only rece reveals the

125
00:04:29,940 --> 00:04:32,460
recipient of the message but looking at

126
00:04:32,460 --> 00:04:34,139
the transcript of recipients over time

127
00:04:34,139 --> 00:04:36,060
can leak additional information for

128
00:04:36,060 --> 00:04:37,919
example by looking for interleaving

129
00:04:37,919 --> 00:04:39,120
patterns which are typical of

130
00:04:39,120 --> 00:04:41,400
conversations

131
00:04:41,400 --> 00:04:43,919
and then lastly even with access keys if

132
00:04:43,919 --> 00:04:45,600
someone with Bob's access key gets

133
00:04:45,600 --> 00:04:47,460
compromised or is malicious they can

134
00:04:47,460 --> 00:04:49,080
mount an untraceable denial of service

135
00:04:49,080 --> 00:04:51,240
attack I mean that's because in sealed

136
00:04:51,240 --> 00:04:52,860
sender seal Center relies on the sender

137
00:04:52,860 --> 00:04:55,380
themselves so Alice to self-identify

138
00:04:55,380 --> 00:04:57,600
herself to Bob and so she can easily

139
00:04:57,600 --> 00:05:00,120
send messages that are malformed where

140
00:05:00,120 --> 00:05:01,740
Bob is not going to be able to identify

141
00:05:01,740 --> 00:05:04,620
the sender and in this case Bob really

142
00:05:04,620 --> 00:05:06,840
has no option but to rotate his axis

143
00:05:06,840 --> 00:05:08,639
skin kind of guess which of his friends

144
00:05:08,639 --> 00:05:11,780
not to re-share with

145
00:05:12,360 --> 00:05:14,580
and we show in our paper actually that

146
00:05:14,580 --> 00:05:15,900
this attack isn't just a theoretical

147
00:05:15,900 --> 00:05:18,180
nuisance but we actually demonstrate a

148
00:05:18,180 --> 00:05:21,180
effective battery draining attack as I

149
00:05:21,180 --> 00:05:23,520
mentioned before

150
00:05:23,520 --> 00:05:25,740
so among these three identified

151
00:05:25,740 --> 00:05:28,020
weaknesses in this work our block

152
00:05:28,020 --> 00:05:30,060
listing solution Orca addresses the

153
00:05:30,060 --> 00:05:32,160
first and third of these issues so our

154
00:05:32,160 --> 00:05:33,240
protocol will guarantee that messages

155
00:05:33,240 --> 00:05:35,940
are traceable to a sender and will allow

156
00:05:35,940 --> 00:05:37,560
for recipients to block future messages

157
00:05:37,560 --> 00:05:40,080
from that sender and orca will also be

158
00:05:40,080 --> 00:05:41,940
able to achieve this importantly without

159
00:05:41,940 --> 00:05:43,919
relying on initialization over

160
00:05:43,919 --> 00:05:46,020
non-sender Anonymous channels

161
00:05:46,020 --> 00:05:48,300
and this will allow us to achieve an

162
00:05:48,300 --> 00:05:49,740
Anon reset that's as large as

163
00:05:49,740 --> 00:05:51,600
potentially the number of users on the

164
00:05:51,600 --> 00:05:53,460
platform

165
00:05:53,460 --> 00:05:55,800
and then the second leakage is somewhat

166
00:05:55,800 --> 00:05:57,720
fundamental to this relaxation of only

167
00:05:57,720 --> 00:05:59,759
hiding Center identities and actually

168
00:05:59,759 --> 00:06:02,460
some really nice recent work evaluates

169
00:06:02,460 --> 00:06:04,139
the de-identification risk of this

170
00:06:04,139 --> 00:06:06,120
leakage and they propose some mitigating

171
00:06:06,120 --> 00:06:08,759
countermeasures which these

172
00:06:08,759 --> 00:06:10,500
countermeasures are also compatible with

173
00:06:10,500 --> 00:06:13,139
Orca so I'll refer to their paper for

174
00:06:13,139 --> 00:06:15,360
more details I'm also happy to chat more

175
00:06:15,360 --> 00:06:17,580
offline about this this type of inherent

176
00:06:17,580 --> 00:06:19,940
leakage

177
00:06:20,220 --> 00:06:22,259
so we've seen the weaknesses and steel

178
00:06:22,259 --> 00:06:24,120
centers and I next I'll talk a little

179
00:06:24,120 --> 00:06:26,639
bit about our proposed solution orca

180
00:06:26,639 --> 00:06:29,039
so in designing Orca our first Insight

181
00:06:29,039 --> 00:06:30,840
is that you can adapt group signatures

182
00:06:30,840 --> 00:06:32,639
to handle sender Anonymous block listing

183
00:06:32,639 --> 00:06:35,039
and group signature is type of anonymous

184
00:06:35,039 --> 00:06:36,300
signature that I've been studied in the

185
00:06:36,300 --> 00:06:37,800
cryptographic literature for a long time

186
00:06:37,800 --> 00:06:40,080
and the core of our protocol is a new

187
00:06:40,080 --> 00:06:42,240
group signature variant tailored to the

188
00:06:42,240 --> 00:06:43,680
setting

189
00:06:43,680 --> 00:06:45,300
so users will send messages and

190
00:06:45,300 --> 00:06:46,800
authenticate by signing the ciphertext

191
00:06:46,800 --> 00:06:48,479
with anonymous group signature I'm

192
00:06:48,479 --> 00:06:50,639
denoting here the signature Sigma over a

193
00:06:50,639 --> 00:06:53,039
ciphertext which encrypts the message

194
00:06:53,039 --> 00:06:54,960
contents which are within these angle

195
00:06:54,960 --> 00:06:57,419
brackets I'm depicting

196
00:06:57,419 --> 00:06:58,919
um and this all works but it's somewhat

197
00:06:58,919 --> 00:07:01,680
slow because group signatures can be uh

198
00:07:01,680 --> 00:07:04,319
somewhat expensive and so instead we

199
00:07:04,319 --> 00:07:06,180
propose a hybrid solution of group

200
00:07:06,180 --> 00:07:09,300
signatures and one-time use tokens

201
00:07:09,300 --> 00:07:11,400
and so in this flow the first message is

202
00:07:11,400 --> 00:07:12,780
authenticated with the group signature

203
00:07:12,780 --> 00:07:15,000
in which Alice also includes a batch of

204
00:07:15,000 --> 00:07:17,280
one-time use tokens Alice will track who

205
00:07:17,280 --> 00:07:18,780
she gave the tokens to so that she can

206
00:07:18,780 --> 00:07:20,639
identify the sender later on

207
00:07:20,639 --> 00:07:22,440
and then Bob replies by authenticating

208
00:07:22,440 --> 00:07:24,120
with one of these tokens and actually

209
00:07:24,120 --> 00:07:26,099
Bob can include his own batch of tokens

210
00:07:26,099 --> 00:07:28,860
so that Alice can in turn respond and

211
00:07:28,860 --> 00:07:30,660
Bob can send more messages and in this

212
00:07:30,660 --> 00:07:32,220
flow of conversation

213
00:07:32,220 --> 00:07:34,380
they can replenish tokens through this

214
00:07:34,380 --> 00:07:37,199
uh through normal conversation

215
00:07:37,199 --> 00:07:38,520
and this is all great because

216
00:07:38,520 --> 00:07:40,380
authenticating via these one-time use

217
00:07:40,380 --> 00:07:42,900
tokens is very inexpensive and so really

218
00:07:42,900 --> 00:07:44,940
the magic of this protocol is in this

219
00:07:44,940 --> 00:07:46,979
first step of how do we initial how do

220
00:07:46,979 --> 00:07:48,960
we send this initial batch of one-time

221
00:07:48,960 --> 00:07:50,699
use tokens in a standard Anonymous

222
00:07:50,699 --> 00:07:52,979
manner and so for that I'm claiming that

223
00:07:52,979 --> 00:07:54,900
we can fall back on these on this group

224
00:07:54,900 --> 00:07:57,000
signature primitive

225
00:07:57,000 --> 00:07:58,979
so let me expand then on this use of

226
00:07:58,979 --> 00:08:01,259
group signatures in this setting

227
00:08:01,259 --> 00:08:03,419
so in a group signature there are three

228
00:08:03,419 --> 00:08:05,280
parties that take part a group manager

229
00:08:05,280 --> 00:08:06,900
manages the membership the group group

230
00:08:06,900 --> 00:08:08,639
member has been admitted by manager are

231
00:08:08,639 --> 00:08:10,440
able to sign messages anonymously on

232
00:08:10,440 --> 00:08:12,419
behalf of the group and lastly while

233
00:08:12,419 --> 00:08:13,680
signatures are Anonymous to everyone

234
00:08:13,680 --> 00:08:15,479
else opening authorities have the

235
00:08:15,479 --> 00:08:17,880
ability to trace signatures to learn the

236
00:08:17,880 --> 00:08:19,139
identity designer and then open

237
00:08:19,139 --> 00:08:20,699
authorities also have the ability to

238
00:08:20,699 --> 00:08:22,919
revoke future signing ability by that

239
00:08:22,919 --> 00:08:24,300
signer

240
00:08:24,300 --> 00:08:26,160
so then how can we map these roles onto

241
00:08:26,160 --> 00:08:27,900
the parties in this into an encrypted

242
00:08:27,900 --> 00:08:29,759
messaging setting well

243
00:08:29,759 --> 00:08:31,500
the platform can play the role of the

244
00:08:31,500 --> 00:08:33,240
group manager and then users will play

245
00:08:33,240 --> 00:08:35,099
the role of both group members and

246
00:08:35,099 --> 00:08:37,140
opening authorities so when a user is

247
00:08:37,140 --> 00:08:38,580
sending a message they'll play the role

248
00:08:38,580 --> 00:08:40,020
of a group member when they're receiving

249
00:08:40,020 --> 00:08:41,458
a message they'll play the role of an

250
00:08:41,458 --> 00:08:43,440
opening Authority

251
00:08:43,440 --> 00:08:46,200
so how this flow works is a user will

252
00:08:46,200 --> 00:08:47,760
start by registering with a platform as

253
00:08:47,760 --> 00:08:49,500
both the member and an opening Authority

254
00:08:49,500 --> 00:08:51,240
here I'm showing the platform holding

255
00:08:51,240 --> 00:08:53,880
the group mem group manager keys

256
00:08:53,880 --> 00:08:55,680
and then users are both members and

257
00:08:55,680 --> 00:08:57,300
opening authorities for this picture I'm

258
00:08:57,300 --> 00:08:58,920
showing since Alice is a sender I'm

259
00:08:58,920 --> 00:09:01,380
showing her group member Keys Bob's a

260
00:09:01,380 --> 00:09:02,880
recipient I'm showing his opening

261
00:09:02,880 --> 00:09:05,279
Authority keys

262
00:09:05,279 --> 00:09:06,300
um

263
00:09:06,300 --> 00:09:08,459
to send a message I'll simply signs the

264
00:09:08,459 --> 00:09:09,899
ciphertext under the group signature

265
00:09:09,899 --> 00:09:12,180
specifying Bob as the opening Authority

266
00:09:12,180 --> 00:09:13,980
the platform verifies that the signature

267
00:09:13,980 --> 00:09:15,720
is valid against Bob's public key and

268
00:09:15,720 --> 00:09:17,700
revocation list and if so forwards

269
00:09:17,700 --> 00:09:19,980
decipher text to Bob and then Bob is the

270
00:09:19,980 --> 00:09:21,959
opening Authority opens the signature to

271
00:09:21,959 --> 00:09:24,060
learn Alice's identity and then if he

272
00:09:24,060 --> 00:09:26,279
chooses he can revoke Alice's signing

273
00:09:26,279 --> 00:09:28,260
ability by generating a revocation token

274
00:09:28,260 --> 00:09:29,820
and sending it to the platform where

275
00:09:29,820 --> 00:09:32,820
it's added to his revocation list

276
00:09:32,820 --> 00:09:34,980
so why does this satisfy our goals let's

277
00:09:34,980 --> 00:09:38,279
see quickly here so group signatures are

278
00:09:38,279 --> 00:09:40,380
Anonymous so the platform doesn't learn

279
00:09:40,380 --> 00:09:42,120
Alice's identity

280
00:09:42,120 --> 00:09:44,220
they're traceable which means that if

281
00:09:44,220 --> 00:09:45,899
the platform's verification succeeds

282
00:09:45,899 --> 00:09:47,760
then it's guaranteed that Bob's going to

283
00:09:47,760 --> 00:09:50,399
be able to identify Alice as the sender

284
00:09:50,399 --> 00:09:52,620
and they're revocable so Bob can ensure

285
00:09:52,620 --> 00:09:54,180
that future messages from Alice don't

286
00:09:54,180 --> 00:09:57,000
pass platforms verification

287
00:09:57,000 --> 00:09:58,320
and then importantly these group

288
00:09:58,320 --> 00:10:01,019
signatures can all be set up without

289
00:10:01,019 --> 00:10:02,940
initialization over non-center Anonymous

290
00:10:02,940 --> 00:10:04,800
channels so IELTS and Bob just need to

291
00:10:04,800 --> 00:10:07,320
register with the platform

292
00:10:07,320 --> 00:10:08,820
and then I'll note quickly to get all

293
00:10:08,820 --> 00:10:10,380
this to work we had to create a novel

294
00:10:10,380 --> 00:10:12,420
group signature variant the first

295
00:10:12,420 --> 00:10:13,980
variant we built was a group signature

296
00:10:13,980 --> 00:10:15,060
that supports multiple opening

297
00:10:15,060 --> 00:10:16,440
authorities typically it's group

298
00:10:16,440 --> 00:10:18,600
signatures have been built just for a

299
00:10:18,600 --> 00:10:20,399
single opening Authority

300
00:10:20,399 --> 00:10:22,260
and then the second variant we support

301
00:10:22,260 --> 00:10:23,940
is key to verification meaning that only

302
00:10:23,940 --> 00:10:25,740
the group manager can verify signatures

303
00:10:25,740 --> 00:10:27,480
and typically group signatures have been

304
00:10:27,480 --> 00:10:29,399
in the publicly verifiable setting but

305
00:10:29,399 --> 00:10:31,560
we notice that in this setting only the

306
00:10:31,560 --> 00:10:33,180
group manager the platform needs to do

307
00:10:33,180 --> 00:10:35,040
verification and so by restricting

308
00:10:35,040 --> 00:10:36,300
ourselves to this keyed verification

309
00:10:36,300 --> 00:10:37,500
setting we're able to get some nice

310
00:10:37,500 --> 00:10:39,540
performance benefits

311
00:10:39,540 --> 00:10:42,839
so I'll refer the details of these uh

312
00:10:42,839 --> 00:10:45,500
variants to the paper

313
00:10:45,500 --> 00:10:48,180
and so I'll start to conclude here is we

314
00:10:48,180 --> 00:10:50,220
implemented our full Orca protocol and

315
00:10:50,220 --> 00:10:51,300
there's actually a lot more complexity

316
00:10:51,300 --> 00:10:53,100
that didn't have time to cover a couple

317
00:10:53,100 --> 00:10:54,360
quick things that might be worth

318
00:10:54,360 --> 00:10:56,579
mentioning are the group signature

319
00:10:56,579 --> 00:10:59,220
revocation process relies on bilinear

320
00:10:59,220 --> 00:11:01,500
pairings we construct our one-time use

321
00:11:01,500 --> 00:11:04,200
tokens from algebraic Max and there's

322
00:11:04,200 --> 00:11:06,060
also this whole other oblivious token

323
00:11:06,060 --> 00:11:07,680
minting protocol that allows the

324
00:11:07,680 --> 00:11:09,839
platform to Mint tokens on behalf of

325
00:11:09,839 --> 00:11:11,940
recipients

326
00:11:11,940 --> 00:11:14,399
and then from our perspective

327
00:11:14,399 --> 00:11:16,440
um Orca is efficient enough for practice

328
00:11:16,440 --> 00:11:18,660
this normal case of authenticating via

329
00:11:18,660 --> 00:11:21,660
tokens is very inexpensive and then the

330
00:11:21,660 --> 00:11:23,640
rare case of initialization using a

331
00:11:23,640 --> 00:11:25,740
group signature even then costs are

332
00:11:25,740 --> 00:11:27,600
quite manageable

333
00:11:27,600 --> 00:11:29,760
and we disclosed all these findings to

334
00:11:29,760 --> 00:11:31,140
signal and have been in contact with

335
00:11:31,140 --> 00:11:33,120
them on possible mitigations but there

336
00:11:33,120 --> 00:11:35,820
are some obstacles to adopting Orca in

337
00:11:35,820 --> 00:11:37,380
Signal due to existing infrastructure

338
00:11:37,380 --> 00:11:39,300
which leads to maybe some potential open

339
00:11:39,300 --> 00:11:41,880
questions in this space for one can we

340
00:11:41,880 --> 00:11:43,320
do block listing without the use of

341
00:11:43,320 --> 00:11:45,839
pairings and second with this one-time

342
00:11:45,839 --> 00:11:48,839
use tokens the platform must maintain a

343
00:11:48,839 --> 00:11:50,700
persistent strike list that tracks used

344
00:11:50,700 --> 00:11:52,820
tokens so this question can we do

345
00:11:52,820 --> 00:11:55,019
efficient block listing without this

346
00:11:55,019 --> 00:11:58,740
platform maintained strikeless state

347
00:11:58,740 --> 00:12:01,740
so in summary we identified these

348
00:12:01,740 --> 00:12:04,800
weaknesses in sealed sender including

349
00:12:04,800 --> 00:12:06,839
these weak anonymity sets that stemmed

350
00:12:06,839 --> 00:12:09,240
from their use of non-center anonymous

351
00:12:09,240 --> 00:12:12,180
initialization and these untraceable

352
00:12:12,180 --> 00:12:13,860
battery draining attacks

353
00:12:13,860 --> 00:12:15,899
and then we address these weaknesses by

354
00:12:15,899 --> 00:12:17,220
proposing a center Anonymous block

355
00:12:17,220 --> 00:12:19,500
listing protocol for end-to-end

356
00:12:19,500 --> 00:12:21,120
encrypted messaging so I'll end there

357
00:12:21,120 --> 00:12:24,079
and I'm happy to take questions

