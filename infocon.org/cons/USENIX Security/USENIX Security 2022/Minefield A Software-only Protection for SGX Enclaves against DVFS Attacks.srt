1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:08,360 --> 00:00:11,880
I'm presenting mindful today and first a

3
00:00:11,880 --> 00:00:13,980
bit of motivation why we want to use

4
00:00:13,980 --> 00:00:16,100
Minefield so the idea is to have

5
00:00:16,100 --> 00:00:18,539
undervolting another voting is that

6
00:00:18,539 --> 00:00:20,820
principle or a technique to reduce the

7
00:00:20,820 --> 00:00:23,760
voltage of your CPU why is that useful

8
00:00:23,760 --> 00:00:25,859
or why is this important because we have

9
00:00:25,859 --> 00:00:28,019
a reduced voltage you also reduce the

10
00:00:28,019 --> 00:00:30,599
energy consumption of your CPU so that's

11
00:00:30,599 --> 00:00:33,120
already the first part energy saving

12
00:00:33,120 --> 00:00:36,780
however a more indirect part is an also

13
00:00:36,780 --> 00:00:38,460
that you can get a lot of more

14
00:00:38,460 --> 00:00:40,500
performance when you reduce the voltage

15
00:00:40,500 --> 00:00:43,500
why is that because of the modern CPUs

16
00:00:43,500 --> 00:00:45,000
they have like thermal limits and

17
00:00:45,000 --> 00:00:47,219
thermal thresholds and the less energy

18
00:00:47,219 --> 00:00:50,100
you use the longer you can sustain such

19
00:00:50,100 --> 00:00:52,020
boost States or performance States how

20
00:00:52,020 --> 00:00:53,640
they're often called with higher

21
00:00:53,640 --> 00:00:55,320
frequencies

22
00:00:55,320 --> 00:00:58,379
however undervolting also has negative

23
00:00:58,379 --> 00:01:00,600
effects so we have seen in the past that

24
00:01:00,600 --> 00:01:01,980
there are software-based attacks or

25
00:01:01,980 --> 00:01:04,140
hardware-based attacks for undervolting

26
00:01:04,140 --> 00:01:05,119
or against

27
00:01:05,119 --> 00:01:07,740
software in general and mainly the

28
00:01:07,740 --> 00:01:09,060
blunderball detect the world turkey

29
00:01:09,060 --> 00:01:11,939
attack which used a privileged interface

30
00:01:11,939 --> 00:01:14,520
in order to perform an underworld and

31
00:01:14,520 --> 00:01:17,340
attack sgx enclosed however we have also

32
00:01:17,340 --> 00:01:19,200
seen hardware-based attacks which

33
00:01:19,200 --> 00:01:22,740
basically intercept and build malicious

34
00:01:22,740 --> 00:01:24,780
under voting package and send them

35
00:01:24,780 --> 00:01:26,580
directly over the bus to the voltage

36
00:01:26,580 --> 00:01:29,460
Regulators on a chip so what were the

37
00:01:29,460 --> 00:01:32,040
protections against it for the software

38
00:01:32,040 --> 00:01:34,920
based thread model

39
00:01:34,920 --> 00:01:37,979
Intel uh remove this privileged

40
00:01:37,979 --> 00:01:40,320
interface all together if you're using

41
00:01:40,320 --> 00:01:43,020
sgx and we can see that this directly

42
00:01:43,020 --> 00:01:45,659
removes the first point of the slide

43
00:01:45,659 --> 00:01:48,060
that we can no longer efficiently save

44
00:01:48,060 --> 00:01:50,939
energy or increase performance when even

45
00:01:50,939 --> 00:01:52,920
one single Enclave is running on the

46
00:01:52,920 --> 00:01:54,060
whole system

47
00:01:54,060 --> 00:01:56,280
for the hardware based mitigations it

48
00:01:56,280 --> 00:01:58,799
will switch to bit their CPU design and

49
00:01:58,799 --> 00:02:00,600
move these voltage Regulators which

50
00:02:00,600 --> 00:02:02,220
could be attacked with this wiretapping

51
00:02:02,220 --> 00:02:04,740
intake into the package of the CPU and

52
00:02:04,740 --> 00:02:06,119
they are therefore no longer accessible

53
00:02:06,119 --> 00:02:08,038
via the main board

54
00:02:08,038 --> 00:02:10,560
so the question we ask in the paper is

55
00:02:10,560 --> 00:02:12,420
is there not a better way that we can

56
00:02:12,420 --> 00:02:15,000
still have undervolting while having

57
00:02:15,000 --> 00:02:18,480
secure computation in sgx in place and

58
00:02:18,480 --> 00:02:20,099
the high level of give this paper is

59
00:02:20,099 --> 00:02:21,780
quite simple we have an instruction

60
00:02:21,780 --> 00:02:23,819
stream and we build something something

61
00:02:23,819 --> 00:02:26,099
in that between if in our case it's a

62
00:02:26,099 --> 00:02:28,200
compiler extension that transforms this

63
00:02:28,200 --> 00:02:30,660
instruction stream to the following we

64
00:02:30,660 --> 00:02:32,879
can see that we place trap instructions

65
00:02:32,879 --> 00:02:35,520
within the instruction stream and these

66
00:02:35,520 --> 00:02:37,440
strap instructions are there to be

67
00:02:37,440 --> 00:02:40,680
checked by the program itself the idea

68
00:02:40,680 --> 00:02:43,980
is now that if we unlevel a program the

69
00:02:43,980 --> 00:02:46,440
trap instructions should catch the

70
00:02:46,440 --> 00:02:48,599
default and if the trap instructions

71
00:02:48,599 --> 00:02:51,180
detect default we simply abort the

72
00:02:51,180 --> 00:02:53,400
computation

73
00:02:53,400 --> 00:02:56,040
so how can we find such a trap

74
00:02:56,040 --> 00:02:58,739
instruction the the instruction set is

75
00:02:58,739 --> 00:03:00,959
quite huge which would be what would be

76
00:03:00,959 --> 00:03:03,120
the suitable instruction for these trap

77
00:03:03,120 --> 00:03:05,099
instructions so to answer that question

78
00:03:05,099 --> 00:03:07,019
we build a framework that uses the

79
00:03:07,019 --> 00:03:09,000
complete x86 ISO it's the instruction

80
00:03:09,000 --> 00:03:11,099
set and execute each of these

81
00:03:11,099 --> 00:03:12,720
instruction in two different

82
00:03:12,720 --> 00:03:14,879
environments first we execute an

83
00:03:14,879 --> 00:03:16,620
instruction in a normal environment

84
00:03:16,620 --> 00:03:19,200
without undervolting we record each of

85
00:03:19,200 --> 00:03:20,879
the intermediate results and then

86
00:03:20,879 --> 00:03:23,280
re-execute that instruction undervolted

87
00:03:23,280 --> 00:03:25,379
and we simply check if we can observe a

88
00:03:25,379 --> 00:03:27,180
difference between the normal execution

89
00:03:27,180 --> 00:03:29,580
and the undervolted execution if it

90
00:03:29,580 --> 00:03:31,200
detects such a difference we simply

91
00:03:31,200 --> 00:03:33,480
report that this is a fault and we have

92
00:03:33,480 --> 00:03:36,060
found affordable instruction and record

93
00:03:36,060 --> 00:03:38,400
all the environmental parameters so how

94
00:03:38,400 --> 00:03:40,080
much should we underboard what was the

95
00:03:40,080 --> 00:03:43,860
frequency which core was it and so on

96
00:03:43,860 --> 00:03:45,900
however to the underboarding we often

97
00:03:45,900 --> 00:03:47,580
have the case that the CPU charge

98
00:03:47,580 --> 00:03:50,220
freezes and crashes so to handle that we

99
00:03:50,220 --> 00:03:52,799
also included a remote bu that can

100
00:03:52,799 --> 00:03:54,659
restart the system remotely when it

101
00:03:54,659 --> 00:03:56,099
detects the fault

102
00:03:56,099 --> 00:03:58,379
the results of this analysis revealed

103
00:03:58,379 --> 00:04:00,659
the following so we can see here in the

104
00:04:00,659 --> 00:04:02,280
left we see the graph where we have on

105
00:04:02,280 --> 00:04:04,319
the x-axis the frequency domain on the

106
00:04:04,319 --> 00:04:07,019
y-axis the amount of undervolting

107
00:04:07,019 --> 00:04:09,840
offsets we apply and we can see across

108
00:04:09,840 --> 00:04:11,700
the frequency axis that the IMO

109
00:04:11,700 --> 00:04:13,620
instruction is the instruction that

110
00:04:13,620 --> 00:04:16,019
towards the earliest so these are the

111
00:04:16,019 --> 00:04:17,880
forwarding points when we saw the first

112
00:04:17,880 --> 00:04:20,820
point during undervolting

113
00:04:20,820 --> 00:04:23,940
we tested overall more 1 200

114
00:04:23,940 --> 00:04:26,340
instructions approximately across

115
00:04:26,340 --> 00:04:29,040
different CPUs and we found over 71 for

116
00:04:29,040 --> 00:04:30,960
all the building structures

117
00:04:30,960 --> 00:04:32,880
and if you now use this imel instruction

118
00:04:32,880 --> 00:04:35,280
which basically Falls the earliest we

119
00:04:35,280 --> 00:04:37,620
can already detect 92 percent of all

120
00:04:37,620 --> 00:04:39,479
other faults with the email instruction

121
00:04:39,479 --> 00:04:41,820
if you want to have more more certainty

122
00:04:41,820 --> 00:04:43,919
on certain CPUs they have to be

123
00:04:43,919 --> 00:04:45,660
different we also need additional

124
00:04:45,660 --> 00:04:47,580
instructions to protect against these

125
00:04:47,580 --> 00:04:50,100
remaining cases so we have not found our

126
00:04:50,100 --> 00:04:52,020
trap instructions suitable for the

127
00:04:52,020 --> 00:04:53,580
mitigation it's the IMO instruction

128
00:04:53,580 --> 00:04:55,860
which was previously used in the text

129
00:04:55,860 --> 00:04:57,660
too so we cannot use the ammo

130
00:04:57,660 --> 00:04:59,460
instructions to basically protect our

131
00:04:59,460 --> 00:05:01,380
programs let's consider these three

132
00:05:01,380 --> 00:05:02,639
instructions

133
00:05:02,639 --> 00:05:05,460
we now use the compiler to basically at

134
00:05:05,460 --> 00:05:09,000
first insert a state and each basic

135
00:05:09,000 --> 00:05:10,680
block we start the basic block by

136
00:05:10,680 --> 00:05:12,900
checking if these two registers in our

137
00:05:12,900 --> 00:05:15,600
case are 12 and or 13 are still matching

138
00:05:15,600 --> 00:05:17,300
they should always have the same value

139
00:05:17,300 --> 00:05:19,500
otherwise we have to take the default

140
00:05:19,500 --> 00:05:22,199
and securely abort the computation

141
00:05:22,199 --> 00:05:25,199
we then insert this imod instructions in

142
00:05:25,199 --> 00:05:27,120
between and we can also handle some

143
00:05:27,120 --> 00:05:28,759
cases where the IML instruction

144
00:05:28,759 --> 00:05:31,020
basically alter the state of the program

145
00:05:31,020 --> 00:05:33,419
because the IML instruction also orders

146
00:05:33,419 --> 00:05:36,840
the flex register on x86

147
00:05:36,840 --> 00:05:38,880
at the end of each basic block we also

148
00:05:38,880 --> 00:05:41,520
make sure that the basic block contains

149
00:05:41,520 --> 00:05:44,280
an even number of multiplications so

150
00:05:44,280 --> 00:05:45,780
that we always have the guarantee at the

151
00:05:45,780 --> 00:05:47,520
beginning of a basic block these two

152
00:05:47,520 --> 00:05:49,919
registers will match

153
00:05:49,919 --> 00:05:51,600
what this compiler extension enables us

154
00:05:51,600 --> 00:05:52,919
is that it's like a dropping replacement

155
00:05:52,919 --> 00:05:55,500
and we can recompile the complete sjx

156
00:05:55,500 --> 00:05:57,539
SDK and get forward suppression support

157
00:05:57,539 --> 00:06:00,000
so we can detect faults and we Define a

158
00:06:00,000 --> 00:06:01,800
fault Handler where we can abort the

159
00:06:01,800 --> 00:06:04,080
program safely

160
00:06:04,080 --> 00:06:05,820
since we've added now a lot of

161
00:06:05,820 --> 00:06:07,800
instructions we have also to talk about

162
00:06:07,800 --> 00:06:09,479
the negative side of this mitigation the

163
00:06:09,479 --> 00:06:12,539
runtime obviously we add new

164
00:06:12,539 --> 00:06:14,460
instructions into an enclave execution

165
00:06:14,460 --> 00:06:17,039
so we increase the execution time

166
00:06:17,039 --> 00:06:18,979
however remember back at the beginning

167
00:06:18,979 --> 00:06:22,319
this Benchmark only affects sjx enclaves

168
00:06:22,319 --> 00:06:24,419
and allows the remaining system to run

169
00:06:24,419 --> 00:06:26,580
undervolted and probably gain a lot from

170
00:06:26,580 --> 00:06:30,720
that undervolt also as a factor here we

171
00:06:30,720 --> 00:06:33,120
can also choose how many trap

172
00:06:33,120 --> 00:06:35,340
instructions we insert after a certain

173
00:06:35,340 --> 00:06:37,500
instruction so if we just insert one

174
00:06:37,500 --> 00:06:39,360
instruction we call it a placement

175
00:06:39,360 --> 00:06:40,979
density of one that's actually the

176
00:06:40,979 --> 00:06:43,199
x-axis you see and if you insert two

177
00:06:43,199 --> 00:06:45,060
trap instructions after each normal

178
00:06:45,060 --> 00:06:46,680
instructions there will be a placement

179
00:06:46,680 --> 00:06:48,960
density of two the more then placement

180
00:06:48,960 --> 00:06:50,400
density they have the higher your

181
00:06:50,400 --> 00:06:52,560
protection should be so we can see that

182
00:06:52,560 --> 00:06:54,840
we have a linear runtime increase due to

183
00:06:54,840 --> 00:06:57,000
the added instructions also the size is

184
00:06:57,000 --> 00:07:00,000
growing linear linearly compile time

185
00:07:00,000 --> 00:07:02,819
and we also wanted to take a look at

186
00:07:02,819 --> 00:07:05,100
software that had already

187
00:07:05,100 --> 00:07:06,539
um

188
00:07:06,539 --> 00:07:08,340
software-based fault protections built

189
00:07:08,340 --> 00:07:10,500
in so we took a look at the MLS library

190
00:07:10,500 --> 00:07:12,960
and more specifically on the RSA

191
00:07:12,960 --> 00:07:15,720
encryption there so the the they verify

192
00:07:15,720 --> 00:07:18,060
each encrypted decks by decrypting it

193
00:07:18,060 --> 00:07:19,979
again and checking if the plain text

194
00:07:19,979 --> 00:07:23,160
match so if we now remove this check and

195
00:07:23,160 --> 00:07:24,979
replace it with our Minefield

196
00:07:24,979 --> 00:07:27,599
implementation we can see that there are

197
00:07:27,599 --> 00:07:30,120
even cases where Minefield outperforms

198
00:07:30,120 --> 00:07:33,240
this classic random random density check

199
00:07:33,240 --> 00:07:34,560
yes

200
00:07:34,560 --> 00:07:35,639
so

201
00:07:35,639 --> 00:07:37,440
however this is all the performance side

202
00:07:37,440 --> 00:07:39,060
how does it look on the deduction side

203
00:07:39,060 --> 00:07:42,240
we also took a look at that so we reused

204
00:07:42,240 --> 00:07:45,539
the blunderwald PLC in some some parts

205
00:07:45,539 --> 00:07:47,460
of the blunderball POC where you just

206
00:07:47,460 --> 00:07:50,160
tried to fold the result of

207
00:07:50,160 --> 00:07:52,139
multiplications and this is basically

208
00:07:52,139 --> 00:07:54,539
the worst case as we also use the IMO

209
00:07:54,539 --> 00:07:56,960
instruction as trap instruction so we

210
00:07:56,960 --> 00:07:59,400
benchmarking a instruction that was

211
00:07:59,400 --> 00:08:01,139
really likely to forward against another

212
00:08:01,139 --> 00:08:03,300
that's really likely to fall

213
00:08:03,300 --> 00:08:05,400
and we can see on the top left we can

214
00:08:05,400 --> 00:08:06,720
see the recall across the placement

215
00:08:06,720 --> 00:08:09,900
density and can see that we have a good

216
00:08:09,900 --> 00:08:11,759
recall about 90 percent

217
00:08:11,759 --> 00:08:13,979
however the recoil is declining after

218
00:08:13,979 --> 00:08:15,960
certain placement density and that's

219
00:08:15,960 --> 00:08:19,020
also reflected because the recoil does

220
00:08:19,020 --> 00:08:22,020
not consider the case where we observed

221
00:08:22,020 --> 00:08:24,060
faults only in the trap instructions

222
00:08:24,060 --> 00:08:25,680
therefore we also included the

223
00:08:25,680 --> 00:08:27,840
mitigation rate basically if you see a

224
00:08:27,840 --> 00:08:29,639
Ford in a trap instruction you already

225
00:08:29,639 --> 00:08:31,440
know that the system is running near the

226
00:08:31,440 --> 00:08:33,179
critical limits and you should no longer

227
00:08:33,179 --> 00:08:35,279
guarantee to execute The sjx Enclave

228
00:08:35,279 --> 00:08:38,299
code on the system

229
00:08:39,299 --> 00:08:41,399
so that already brings me to my

230
00:08:41,399 --> 00:08:43,799
conclusion so we open source the

231
00:08:43,799 --> 00:08:46,380
complete llvm extension also there's the

232
00:08:46,380 --> 00:08:48,060
access to care the modifications are in

233
00:08:48,060 --> 00:08:49,800
the GitHub reversibility so check that

234
00:08:49,800 --> 00:08:52,080
out if you are interested we also passed

235
00:08:52,080 --> 00:08:54,839
the artifact Evolution for the the best

236
00:08:54,839 --> 00:08:56,519
other Refrigeration for the compiler

237
00:08:56,519 --> 00:08:58,380
extension and all the code and also the

238
00:08:58,380 --> 00:08:59,880
undervolting framework to find

239
00:08:59,880 --> 00:09:02,220
interesting instructions is online and

240
00:09:02,220 --> 00:09:04,320
available if you're more interested in

241
00:09:04,320 --> 00:09:06,240
more details like the exact floating

242
00:09:06,240 --> 00:09:08,279
points of each instructions the analysis

243
00:09:08,279 --> 00:09:10,339
over the whole CPU range and also the

244
00:09:10,339 --> 00:09:12,600
defaulting method so how does default

245
00:09:12,600 --> 00:09:13,920
actually look like for different results

246
00:09:13,920 --> 00:09:16,380
please take a look in the paper and I'm

247
00:09:16,380 --> 00:09:19,519
happy to take any questions

