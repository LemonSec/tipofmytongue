1
00:00:08,360 --> 00:00:12,420
OK ah good afternoon everyone I'm yuvraj

2
00:00:12,420 --> 00:00:14,280
Patel and I'm gonna talk about our work

3
00:00:14,280 --> 00:00:16,800
using tradra to tame or advocidal

4
00:00:16,800 --> 00:00:18,420
synchronization

5
00:00:18,420 --> 00:00:20,279
all the modern systems that we use today

6
00:00:20,279 --> 00:00:23,060
are concurrent these systems use

7
00:00:23,060 --> 00:00:26,340
concurrency to achieve high performance

8
00:00:26,340 --> 00:00:28,619
but while designing concurrent systems

9
00:00:28,619 --> 00:00:31,380
correctness has to be Paramount and in

10
00:00:31,380 --> 00:00:32,820
order to ensure correctness

11
00:00:32,820 --> 00:00:34,860
synchronization Primitives are used

12
00:00:34,860 --> 00:00:36,899
there have been numerous synchronization

13
00:00:36,899 --> 00:00:39,660
Primitives proposed so far for decades

14
00:00:39,660 --> 00:00:42,320
but locks are one of the widely used

15
00:00:42,320 --> 00:00:44,399
synchronization Primitives to ensure

16
00:00:44,399 --> 00:00:46,559
Mutual exclusion that means that when

17
00:00:46,559 --> 00:00:48,780
one thread is holding on to a lock all

18
00:00:48,780 --> 00:00:50,219
the other threads will have to wait for

19
00:00:50,219 --> 00:00:52,379
the turn to acquire the lock

20
00:00:52,379 --> 00:00:55,920
now let's you using a simple example try

21
00:00:55,920 --> 00:00:58,260
to understand the problem itself so

22
00:00:58,260 --> 00:01:00,660
think of a very simple linked list data

23
00:01:00,660 --> 00:01:02,100
structure which is protected using a

24
00:01:02,100 --> 00:01:03,960
single lock there are two operations

25
00:01:03,960 --> 00:01:06,240
that are supported the first one is the

26
00:01:06,240 --> 00:01:08,520
insert operation where the node is added

27
00:01:08,520 --> 00:01:10,860
at the head in this case the time spent

28
00:01:10,860 --> 00:01:13,380
holding onto the lock is very tiny but

29
00:01:13,380 --> 00:01:16,200
on the other hand the search operation a

30
00:01:16,200 --> 00:01:18,299
thread will have to Traverse the list to

31
00:01:18,299 --> 00:01:20,939
find the entry itself in this case the

32
00:01:20,939 --> 00:01:23,460
time spent holding the lock may be

33
00:01:23,460 --> 00:01:25,860
longer depending on the list size itself

34
00:01:25,860 --> 00:01:29,159
now if at all an application uses this

35
00:01:29,159 --> 00:01:30,140
linked list

36
00:01:30,140 --> 00:01:33,840
for its own design in this case all the

37
00:01:33,840 --> 00:01:36,720
threads that are trying to access the

38
00:01:36,720 --> 00:01:39,060
the link list itself will cooperate

39
00:01:39,060 --> 00:01:40,979
because they are working towards the

40
00:01:40,979 --> 00:01:42,780
same goal itself so there is no

41
00:01:42,780 --> 00:01:46,079
misbehavior expected however any impact

42
00:01:46,079 --> 00:01:48,119
of synchronization can always be

43
00:01:48,119 --> 00:01:49,619
contained within the application itself

44
00:01:49,619 --> 00:01:52,560
and the application developers decision

45
00:01:52,560 --> 00:01:54,540
is there to either change the locks or

46
00:01:54,540 --> 00:01:56,759
refactor the code or probably just

47
00:01:56,759 --> 00:01:58,320
ignore

48
00:01:58,320 --> 00:02:00,420
but locks have also been used in a

49
00:02:00,420 --> 00:02:02,040
competitive environment as you can see

50
00:02:02,040 --> 00:02:04,619
on your right like the operating system

51
00:02:04,619 --> 00:02:07,200
example where this linked list can be

52
00:02:07,200 --> 00:02:08,459
used as part of the kernel

53
00:02:08,459 --> 00:02:10,440
implementation and now multiple

54
00:02:10,440 --> 00:02:12,180
applications are accessing the same

55
00:02:12,180 --> 00:02:15,239
linked list via sys calls in this case

56
00:02:15,239 --> 00:02:17,819
also cooperation is expected but

57
00:02:17,819 --> 00:02:20,580
applications are competitive and they

58
00:02:20,580 --> 00:02:23,640
may misbehave so now in this competitive

59
00:02:23,640 --> 00:02:26,700
environment size of the list matters and

60
00:02:26,700 --> 00:02:28,739
there can be security issues like what

61
00:02:28,739 --> 00:02:31,260
if one application misbehaves and tries

62
00:02:31,260 --> 00:02:33,360
to insert billions of entries in this

63
00:02:33,360 --> 00:02:35,700
linked list itself in that case all the

64
00:02:35,700 --> 00:02:37,140
other applications will have to

65
00:02:37,140 --> 00:02:38,879
unnecessarily Traverse through this

66
00:02:38,879 --> 00:02:41,700
expanded linked list and they may

67
00:02:41,700 --> 00:02:43,680
observe poor performance and denial of

68
00:02:43,680 --> 00:02:44,640
services

69
00:02:44,640 --> 00:02:48,239
so that is basically the problem that I

70
00:02:48,239 --> 00:02:50,040
was heading to which is the adversarial

71
00:02:50,040 --> 00:02:52,620
synchronization problem in this problem

72
00:02:52,620 --> 00:02:55,379
the attacker can attack shared data

73
00:02:55,379 --> 00:02:57,300
structures and the synchronization

74
00:02:57,300 --> 00:02:58,980
Primitives that are protecting this data

75
00:02:58,980 --> 00:03:01,200
structures by artificially growing the

76
00:03:01,200 --> 00:03:03,360
data structures leading to heavy lock

77
00:03:03,360 --> 00:03:05,400
contention and once there is lock

78
00:03:05,400 --> 00:03:07,019
contention eventually that is going to

79
00:03:07,019 --> 00:03:08,519
lead to poor performance and sometimes

80
00:03:08,519 --> 00:03:10,680
denial of services

81
00:03:10,680 --> 00:03:13,200
so this type of problem can impact

82
00:03:13,200 --> 00:03:15,480
multiple or all the victims or the

83
00:03:15,480 --> 00:03:17,340
tenants that are part participating in

84
00:03:17,340 --> 00:03:19,980
the system itself there are two types of

85
00:03:19,980 --> 00:03:22,019
attacks ah synchronization attacks and

86
00:03:22,019 --> 00:03:24,420
framing attack synchronization attack is

87
00:03:24,420 --> 00:03:26,700
basically when the attacker is expanding

88
00:03:26,700 --> 00:03:27,900
the data structure while still

89
00:03:27,900 --> 00:03:29,340
participating in the lock equation

90
00:03:29,340 --> 00:03:31,980
process while the framing attack is

91
00:03:31,980 --> 00:03:33,900
something where the attacker after

92
00:03:33,900 --> 00:03:35,580
expanding the data structure itself

93
00:03:35,580 --> 00:03:37,680
turns passive we'll be talking about

94
00:03:37,680 --> 00:03:40,980
both of them sometime later

95
00:03:40,980 --> 00:03:43,200
so before we get into this real world

96
00:03:43,200 --> 00:03:46,080
attack thing let us just first look at

97
00:03:46,080 --> 00:03:48,239
our threat model so in our threat model

98
00:03:48,239 --> 00:03:50,700
we assume that there are there's one or

99
00:03:50,700 --> 00:03:52,379
more containers that are running on a

100
00:03:52,379 --> 00:03:54,720
single physical machine each container

101
00:03:54,720 --> 00:03:57,360
is running some arbitrary unprivileged

102
00:03:57,360 --> 00:04:00,000
workload that accesses OS Services there

103
00:04:00,000 --> 00:04:01,739
is a one-to-one mapping between tenants

104
00:04:01,739 --> 00:04:03,900
and users and there is no collusion

105
00:04:03,900 --> 00:04:06,780
among a malicious user

106
00:04:06,780 --> 00:04:09,180
so let us just now look at a real world

107
00:04:09,180 --> 00:04:12,360
attack and on the inode cache in Linux

108
00:04:12,360 --> 00:04:14,459
kernel itself so this inode cache

109
00:04:14,459 --> 00:04:16,139
basically caches the inode in the memory

110
00:04:16,139 --> 00:04:18,660
in order to prevent expensive disk

111
00:04:18,660 --> 00:04:20,699
accesses this inode cache is shared

112
00:04:20,699 --> 00:04:22,620
across all the mounted file systems and

113
00:04:22,620 --> 00:04:26,340
is always protected using a global lock

114
00:04:26,340 --> 00:04:28,740
for hashing the hash function takes two

115
00:04:28,740 --> 00:04:30,479
parameters the inode number and the

116
00:04:30,479 --> 00:04:32,639
super block pointer the inode number is

117
00:04:32,639 --> 00:04:34,320
a unique file number for each file

118
00:04:34,320 --> 00:04:36,240
within a file system while the super

119
00:04:36,240 --> 00:04:38,280
block pointer is a memory address for

120
00:04:38,280 --> 00:04:40,500
the mounted file system itself and that

121
00:04:40,500 --> 00:04:42,479
value keeps on varying across three

122
00:04:42,479 --> 00:04:44,880
mounts and reboots

123
00:04:44,880 --> 00:04:46,860
so in this work we managed to break this

124
00:04:46,860 --> 00:04:48,419
hash function to identify the super

125
00:04:48,419 --> 00:04:50,460
block pointer itself

126
00:04:50,460 --> 00:04:53,280
so an attacker will first mount a fuse

127
00:04:53,280 --> 00:04:55,860
based user file system that lets one

128
00:04:55,860 --> 00:04:58,860
choose the inode numbers itself then by

129
00:04:58,860 --> 00:05:00,180
carefully choosing the inode numbers

130
00:05:00,180 --> 00:05:03,060
that Collide the attacker can identify

131
00:05:03,060 --> 00:05:05,400
the super block pointer address bit by

132
00:05:05,400 --> 00:05:07,800
bit and eventually once the super block

133
00:05:07,800 --> 00:05:11,520
pointer is known then the attacker can

134
00:05:11,520 --> 00:05:13,620
simply Target a single hash bucket by

135
00:05:13,620 --> 00:05:16,560
creating many entries in that hash

136
00:05:16,560 --> 00:05:19,680
bucket itself now any victim that wants

137
00:05:19,680 --> 00:05:21,540
to access this inode cache data

138
00:05:21,540 --> 00:05:23,699
structure itself will have to wait to

139
00:05:23,699 --> 00:05:26,340
access the the inode cache because the

140
00:05:26,340 --> 00:05:28,440
attacker is holding on to the lock for a

141
00:05:28,440 --> 00:05:30,419
very long time

142
00:05:30,419 --> 00:05:32,820
so in order to understand the impact on

143
00:05:32,820 --> 00:05:34,680
the the victims itself victims

144
00:05:34,680 --> 00:05:36,780
performance we conduct an experiment

145
00:05:36,780 --> 00:05:39,720
where we run XM mail server as a victim

146
00:05:39,720 --> 00:05:43,320
container while uh the attacker is also

147
00:05:43,320 --> 00:05:45,000
running another container where it

148
00:05:45,000 --> 00:05:47,100
launches the inode cash attack

149
00:05:47,100 --> 00:05:49,380
now this XML server is much more

150
00:05:49,380 --> 00:05:51,240
sensitive to inode Cache performance and

151
00:05:51,240 --> 00:05:54,360
that is why ah we'll be able to figure

152
00:05:54,360 --> 00:05:56,820
out like how does this attack impact the

153
00:05:56,820 --> 00:05:58,740
performance itself

154
00:05:58,740 --> 00:06:00,539
so on your right I am showing you the

155
00:06:00,539 --> 00:06:03,120
timeline of the performance of ah the XM

156
00:06:03,120 --> 00:06:05,639
mail server where the x-axis shows the

157
00:06:05,639 --> 00:06:06,960
throughput itself

158
00:06:06,960 --> 00:06:09,120
so as you can see at time T is equal to

159
00:06:09,120 --> 00:06:12,240
5 the attacker starts identifying the I

160
00:06:12,240 --> 00:06:14,820
know the super block address itself and

161
00:06:14,820 --> 00:06:17,100
at around time T is equal to 100 the

162
00:06:17,100 --> 00:06:19,500
attacker is able to identify the super

163
00:06:19,500 --> 00:06:21,419
block address and then eventually starts

164
00:06:21,419 --> 00:06:24,240
uh launching the the attack and at that

165
00:06:24,240 --> 00:06:26,220
point we can significantly see like

166
00:06:26,220 --> 00:06:28,380
within a few seconds itself the

167
00:06:28,380 --> 00:06:31,139
performance drastically drops down by up

168
00:06:31,139 --> 00:06:33,600
to a factor of 12x itself and if the

169
00:06:33,600 --> 00:06:35,880
attack keeps on continuing this at the

170
00:06:35,880 --> 00:06:37,800
performance is also going to be much

171
00:06:37,800 --> 00:06:40,319
more uh worse

172
00:06:40,319 --> 00:06:42,240
so this type of attack that I just

173
00:06:42,240 --> 00:06:44,039
showed is basically a synchronization

174
00:06:44,039 --> 00:06:46,440
attack where the attacker expands the

175
00:06:46,440 --> 00:06:49,139
data structure and actively acquires the

176
00:06:49,139 --> 00:06:51,960
lock repetitively now because the data

177
00:06:51,960 --> 00:06:54,180
structure is expanded that the attacker

178
00:06:54,180 --> 00:06:56,520
is going to hold on to the lock for a

179
00:06:56,520 --> 00:06:58,680
very long duration while all the victims

180
00:06:58,680 --> 00:07:01,860
that want to access the ah the data

181
00:07:01,860 --> 00:07:03,660
structure will have to wait and this

182
00:07:03,660 --> 00:07:05,340
wait time keeps on increasing after

183
00:07:05,340 --> 00:07:07,919
every turn and eventually leads to poor

184
00:07:07,919 --> 00:07:09,539
performance

185
00:07:09,539 --> 00:07:11,580
there is one more type of attack

186
00:07:11,580 --> 00:07:14,100
possible where the attacker expands the

187
00:07:14,100 --> 00:07:15,720
data structure and does not participate

188
00:07:15,720 --> 00:07:17,699
in the lock equation process itself so

189
00:07:17,699 --> 00:07:19,319
in this case now what is going to happen

190
00:07:19,319 --> 00:07:21,479
is that what if the victim tries to

191
00:07:21,479 --> 00:07:23,940
access that blue inode entry that is

192
00:07:23,940 --> 00:07:26,520
there in the targeted hash bucket so

193
00:07:26,520 --> 00:07:27,960
apparently what is going to happen now

194
00:07:27,960 --> 00:07:29,520
is that the victim is going to wear the

195
00:07:29,520 --> 00:07:31,380
head of the attacker itself and gonna

196
00:07:31,380 --> 00:07:33,300
Traverse this expanded data structure

197
00:07:33,300 --> 00:07:35,280
eventually spending more time in the

198
00:07:35,280 --> 00:07:38,460
critical section itself and at the same

199
00:07:38,460 --> 00:07:41,819
time it's also spending more CPU just

200
00:07:41,819 --> 00:07:44,520
trying to walk through this expanded

201
00:07:44,520 --> 00:07:46,020
data structure which is not even

202
00:07:46,020 --> 00:07:47,340
necessary

203
00:07:47,340 --> 00:07:50,039
so now all the other victims will have

204
00:07:50,039 --> 00:07:52,560
to again wait uh in order to acquire the

205
00:07:52,560 --> 00:07:54,740
lock and eventually

206
00:07:54,740 --> 00:07:57,960
all the even the victim the victim

207
00:07:57,960 --> 00:07:59,520
itself as all the as well as all the

208
00:07:59,520 --> 00:08:00,960
other victims are gonna see poor

209
00:08:00,960 --> 00:08:02,280
performance

210
00:08:02,280 --> 00:08:04,259
so now we call this as a framing attack

211
00:08:04,259 --> 00:08:07,500
because apparently if at all the admin

212
00:08:07,500 --> 00:08:09,720
decides to identify who the real carpet

213
00:08:09,720 --> 00:08:12,479
is who is holding on to the lock uh in

214
00:08:12,479 --> 00:08:15,000
this case it's the victim that is going

215
00:08:15,000 --> 00:08:18,900
to be framed uh because it's the victim

216
00:08:18,900 --> 00:08:20,280
who is holding on to the lock itself

217
00:08:20,280 --> 00:08:23,359
rather than the attacker

218
00:08:23,699 --> 00:08:26,280
so now we have understood the premise of

219
00:08:26,280 --> 00:08:28,259
synchronous adversal synchronization

220
00:08:28,259 --> 00:08:29,940
let's now just look at the solution

221
00:08:29,940 --> 00:08:33,419
itself so we introduce which is a Linux

222
00:08:33,419 --> 00:08:35,580
kernel framework to attack to detect and

223
00:08:35,580 --> 00:08:37,919
mitigate attacks so here we can

224
00:08:37,919 --> 00:08:39,599
incrementally add supports for data

225
00:08:39,599 --> 00:08:40,860
structure itself and there are four

226
00:08:40,860 --> 00:08:43,820
mechanisms that we will look at using ah

227
00:08:43,820 --> 00:08:46,860
using four questions itself

228
00:08:46,860 --> 00:08:49,080
so how do I know whether the system is

229
00:08:49,080 --> 00:08:51,959
under an attack itself so tatra detects

230
00:08:51,959 --> 00:08:55,500
uh attacks by randomly probing lock bit

231
00:08:55,500 --> 00:08:57,600
times itself and while checking this

232
00:08:57,600 --> 00:08:59,640
wait times if at all this wait time is

233
00:08:59,640 --> 00:09:01,800
more than a set threshold and if this

234
00:09:01,800 --> 00:09:03,720
happens multiple times then eventually

235
00:09:03,720 --> 00:09:06,360
is going to flag this as an attack

236
00:09:06,360 --> 00:09:07,500
itself

237
00:09:07,500 --> 00:09:09,480
now once the attack is identified I want

238
00:09:09,480 --> 00:09:12,180
to know who is the attacker itself so at

239
00:09:12,180 --> 00:09:13,279
that time

240
00:09:13,279 --> 00:09:16,260
not at that time itself but tatra can

241
00:09:16,260 --> 00:09:18,300
identify an attacker eventually by

242
00:09:18,300 --> 00:09:19,860
enabling the tracking of the kernel

243
00:09:19,860 --> 00:09:22,260
objects itself so what rathra does is it

244
00:09:22,260 --> 00:09:23,760
records all the kernel object

245
00:09:23,760 --> 00:09:26,279
allocations per user as well as stamp

246
00:09:26,279 --> 00:09:28,680
tenant information on all the objects

247
00:09:28,680 --> 00:09:31,080
that are allocated itself so now just by

248
00:09:31,080 --> 00:09:33,660
simply traversing through the uh the the

249
00:09:33,660 --> 00:09:36,000
vulnerable data structure eventually the

250
00:09:36,000 --> 00:09:38,220
attacker can be found

251
00:09:38,220 --> 00:09:40,500
then the third question is like once the

252
00:09:40,500 --> 00:09:42,480
attack is detected the attacker is

253
00:09:42,480 --> 00:09:44,880
identified the third part is like how do

254
00:09:44,880 --> 00:09:47,519
I even respond to it so as part of the

255
00:09:47,519 --> 00:09:49,740
response mechanism there are two things

256
00:09:49,740 --> 00:09:52,320
that are crucial over here the first one

257
00:09:52,320 --> 00:09:54,779
is like relative to the Future itself

258
00:09:54,779 --> 00:09:57,420
like how do tatra stop future attacks

259
00:09:57,420 --> 00:09:59,640
and further worsening of the current

260
00:09:59,640 --> 00:10:01,440
attack that is there and the second

261
00:10:01,440 --> 00:10:03,480
attack the second aspect is basically

262
00:10:03,480 --> 00:10:06,660
related to the Past like how do throttle

263
00:10:06,660 --> 00:10:08,760
reward to the pre-atic state itself so

264
00:10:08,760 --> 00:10:12,120
that ah the performance is restored back

265
00:10:12,120 --> 00:10:14,279
in order to prevent future expansion of

266
00:10:14,279 --> 00:10:15,779
the data structure itself what rather

267
00:10:15,779 --> 00:10:17,700
does is it stops the attacker from

268
00:10:17,700 --> 00:10:19,260
allocating more objects for a certain

269
00:10:19,260 --> 00:10:20,279
time window

270
00:10:20,279 --> 00:10:23,700
and once that is done eventually uh that

271
00:10:23,700 --> 00:10:26,399
the the data structure expansion is

272
00:10:26,399 --> 00:10:29,220
going to be stopping however with just

273
00:10:29,220 --> 00:10:31,800
prevention alone the attacker can still

274
00:10:31,800 --> 00:10:33,420
access the data structure because it's

275
00:10:33,420 --> 00:10:35,459
still in the elongated State itself and

276
00:10:35,459 --> 00:10:36,899
continue with the synchronization attack

277
00:10:36,899 --> 00:10:39,839
itself moreover one more thing that is

278
00:10:39,839 --> 00:10:42,180
possible is that the victims can still

279
00:10:42,180 --> 00:10:44,880
access this ah this expanded data

280
00:10:44,880 --> 00:10:46,560
structure leading to a framing attack

281
00:10:46,560 --> 00:10:49,320
itself so that's why undoing the damage

282
00:10:49,320 --> 00:10:51,600
is much more crucial here and that is

283
00:10:51,600 --> 00:10:53,399
where the recovery mechanism comes into

284
00:10:53,399 --> 00:10:56,100
picture so Prather offers two different

285
00:10:56,100 --> 00:10:57,899
solutions for different type of data

286
00:10:57,899 --> 00:11:00,000
structures so for cache like data

287
00:11:00,000 --> 00:11:02,160
structures like we like the anode cache

288
00:11:02,160 --> 00:11:03,260
itself

289
00:11:03,260 --> 00:11:06,000
will walk through all of the entries

290
00:11:06,000 --> 00:11:08,519
itself and evict the attacker entries

291
00:11:08,519 --> 00:11:10,140
that that's there and eventually bring

292
00:11:10,140 --> 00:11:11,940
back the state of the data structure to

293
00:11:11,940 --> 00:11:13,140
pre-attack level

294
00:11:13,140 --> 00:11:16,079
for non-cash like structures rather will

295
00:11:16,079 --> 00:11:18,660
isolate the attacker by dynamically

296
00:11:18,660 --> 00:11:21,120
creating a shadow data structure which

297
00:11:21,120 --> 00:11:22,980
is only accessible to the attacker

298
00:11:22,980 --> 00:11:25,860
itself and all the victims are now still

299
00:11:25,860 --> 00:11:27,480
going to be accessing the primary data

300
00:11:27,480 --> 00:11:30,060
structure itself so now by isolating uh

301
00:11:30,060 --> 00:11:32,100
the victims have never ever going to

302
00:11:32,100 --> 00:11:32,959
look at

303
00:11:32,959 --> 00:11:36,420
the attackers entries itself eventually

304
00:11:36,420 --> 00:11:41,000
leading to pre-attack State performance

305
00:11:42,500 --> 00:11:45,420
performance in reality let us just again

306
00:11:45,420 --> 00:11:47,180
look at that inode cash attack

307
00:11:47,180 --> 00:11:50,519
experiment that we saw earlier in this

308
00:11:50,519 --> 00:11:52,620
case I am slightly changing the the

309
00:11:52,620 --> 00:11:55,740
premise where I am assuming that the

310
00:11:55,740 --> 00:11:57,300
attacker already knows the super block

311
00:11:57,300 --> 00:11:59,880
pointer and then we compare performance

312
00:11:59,880 --> 00:12:02,160
of native Linux with respect through

313
00:12:02,160 --> 00:12:03,540
Tatro

314
00:12:03,540 --> 00:12:05,700
so you can see that this is the this red

315
00:12:05,700 --> 00:12:07,980
line is basically the performance of XML

316
00:12:07,980 --> 00:12:10,079
server without an attack so this is just

317
00:12:10,079 --> 00:12:12,120
something which can be expected in in

318
00:12:12,120 --> 00:12:14,640
general itself now when the attack is

319
00:12:14,640 --> 00:12:17,220
launched uh the performance of XML

320
00:12:17,220 --> 00:12:19,740
server drops down by a factor of 12x

321
00:12:19,740 --> 00:12:21,600
itself

322
00:12:21,600 --> 00:12:23,940
but on the other hand if we if you look

323
00:12:23,940 --> 00:12:25,680
at prathas performance what we can see

324
00:12:25,680 --> 00:12:28,920
with this black line is that ah all of

325
00:12:28,920 --> 00:12:30,480
those dips that you are seeing is

326
00:12:30,480 --> 00:12:32,579
basically when an attack is detected and

327
00:12:32,579 --> 00:12:34,380
then eventually the prevention mechanism

328
00:12:34,380 --> 00:12:36,720
kicks in and stop prevents the attacker

329
00:12:36,720 --> 00:12:39,180
from expanding the data structure so

330
00:12:39,180 --> 00:12:41,040
after a certain while again the attacker

331
00:12:41,040 --> 00:12:42,660
can still continue attacking and that is

332
00:12:42,660 --> 00:12:45,660
why we keep on seeing those dips that

333
00:12:45,660 --> 00:12:47,639
are there what we see over here is that

334
00:12:47,639 --> 00:12:49,860
rather can quickly detect and mitigate

335
00:12:49,860 --> 00:12:53,040
this attacks and that is why there is

336
00:12:53,040 --> 00:12:55,139
this minimal performance impact Ah

337
00:12:55,139 --> 00:12:56,160
that's

338
00:12:56,160 --> 00:12:58,139
that's observed

339
00:12:58,139 --> 00:13:00,740
there are other experimental related

340
00:13:00,740 --> 00:13:04,019
stuff in the paper and I would suggest

341
00:13:04,019 --> 00:13:06,600
interested people to read through the

342
00:13:06,600 --> 00:13:07,380
paper

343
00:13:07,380 --> 00:13:09,240
um that's going to be there

344
00:13:09,240 --> 00:13:11,639
so finally I would like to conclude by

345
00:13:11,639 --> 00:13:13,740
saying that we introduce a new class of

346
00:13:13,740 --> 00:13:15,060
problem called adversarial

347
00:13:15,060 --> 00:13:17,399
synchronization where an attacker can

348
00:13:17,399 --> 00:13:19,079
attack the synchronization Primitives

349
00:13:19,079 --> 00:13:21,600
leading to poor performance and denial

350
00:13:21,600 --> 00:13:23,399
of services there are two types of

351
00:13:23,399 --> 00:13:25,019
attacks depending on whether the

352
00:13:25,019 --> 00:13:27,420
attacker is participating actively in

353
00:13:27,420 --> 00:13:29,459
the attack or not

354
00:13:29,459 --> 00:13:31,320
in order to mitigate adversarial

355
00:13:31,320 --> 00:13:33,600
synchronization we introduce stratra

356
00:13:33,600 --> 00:13:35,639
it's a Linux kernel framework that can

357
00:13:35,639 --> 00:13:38,399
support incremental adding of the data

358
00:13:38,399 --> 00:13:39,600
structure itself

359
00:13:39,600 --> 00:13:42,060
our evaluation shows that rathra is

360
00:13:42,060 --> 00:13:44,220
responsive so it can quickly detect

361
00:13:44,220 --> 00:13:46,380
attacks it is efficient in terms of

362
00:13:46,380 --> 00:13:49,139
minimal overhead and it is effective

363
00:13:49,139 --> 00:13:52,079
against even multiple attacks itself so

364
00:13:52,079 --> 00:13:54,779
it can detect attacks simultaneously at

365
00:13:54,779 --> 00:13:55,740
the same time

366
00:13:55,740 --> 00:13:57,480
all the attack scripts as well as

367
00:13:57,480 --> 00:14:00,600
stratra source is open X is open source

368
00:14:00,600 --> 00:14:04,260
and you can go through this URL and

369
00:14:04,260 --> 00:14:06,000
access that

370
00:14:06,000 --> 00:14:09,060
the source code itself with that I end

371
00:14:09,060 --> 00:14:11,459
my talk thank you for listening and I'm

372
00:14:11,459 --> 00:14:14,479
open for questions now

