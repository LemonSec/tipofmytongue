1
00:00:08,058 --> 00:00:12,120
hello everyone my name is a postdoc

2
00:00:12,120 --> 00:00:13,440
researcher from the Ohio State

3
00:00:13,440 --> 00:00:15,780
University today I'm going to present

4
00:00:15,780 --> 00:00:18,420
our work on mobile game security playing

5
00:00:18,420 --> 00:00:20,520
without paying detecting vulnerable

6
00:00:20,520 --> 00:00:22,740
payment verification in Native batteries

7
00:00:22,740 --> 00:00:25,439
of a Unity mobile games this is the John

8
00:00:25,439 --> 00:00:27,779
work with my advisor Professor ji Chang

9
00:00:27,779 --> 00:00:30,420
Ling in this work we uncover two

10
00:00:30,420 --> 00:00:32,940
important types of vulnerabilities in

11
00:00:32,940 --> 00:00:35,100
the in-game purchase of a Unity based

12
00:00:35,100 --> 00:00:37,860
mobile games we have a corresponding and

13
00:00:37,860 --> 00:00:39,899
developed a payment where static

14
00:00:39,899 --> 00:00:42,899
analysis tool to detect them and found

15
00:00:42,899 --> 00:00:45,120
about and then thousand games continuing

16
00:00:45,120 --> 00:00:47,280
this vulnerabilities so let's get

17
00:00:47,280 --> 00:00:48,300
started

18
00:00:48,300 --> 00:00:50,700
in 2021

19
00:00:50,700 --> 00:00:54,360
the video game Market made 175 billion

20
00:00:54,360 --> 00:00:57,899
in Revenue worldwide surprisingly mobile

21
00:00:57,899 --> 00:01:00,120
platforms have become the largest

22
00:01:00,120 --> 00:01:03,180
segment of game industry which generated

23
00:01:03,180 --> 00:01:07,320
a 52 percent of global Revenue it is

24
00:01:07,320 --> 00:01:09,360
more than the combination of both PC

25
00:01:09,360 --> 00:01:11,400
games and the console games

26
00:01:11,400 --> 00:01:14,340
for a mobile game there are several ways

27
00:01:14,340 --> 00:01:17,580
for monetization such as pay to play

28
00:01:17,580 --> 00:01:20,520
in-game advertising and in-game purchase

29
00:01:20,520 --> 00:01:25,140
which also known as igp in igp the

30
00:01:25,140 --> 00:01:27,600
developer offers a digital products for

31
00:01:27,600 --> 00:01:31,500
users to purchase among them igp is the

32
00:01:31,500 --> 00:01:34,200
most popular one to help developers

33
00:01:34,200 --> 00:01:37,979
Implement igp Play Store provide SDK and

34
00:01:37,979 --> 00:01:40,740
APS for faster implementation however

35
00:01:40,740 --> 00:01:43,680
game developers often use the wrapped

36
00:01:43,680 --> 00:01:47,520
sdks that are provided by game engines

37
00:01:47,520 --> 00:01:50,579
one benefit is that such apis support

38
00:01:50,579 --> 00:01:53,520
across platforms including Android and

39
00:01:53,520 --> 00:01:56,820
iOS so how does ADP work

40
00:01:56,820 --> 00:01:59,700
after the user clicks to purchase the

41
00:01:59,700 --> 00:02:01,799
game first initializes the payment

42
00:02:01,799 --> 00:02:04,020
request to the App Store App Store

43
00:02:04,020 --> 00:02:06,299
processes the transaction by interacting

44
00:02:06,299 --> 00:02:08,818
with the user and it will return the

45
00:02:08,818 --> 00:02:10,979
payment response to the game if the

46
00:02:10,979 --> 00:02:13,260
transaction failed it includes the

47
00:02:13,260 --> 00:02:15,540
reason otherwise it contains the detail

48
00:02:15,540 --> 00:02:18,060
of the transaction including the receipt

49
00:02:18,060 --> 00:02:20,280
which will be used to validate the

50
00:02:20,280 --> 00:02:21,319
transaction

51
00:02:21,319 --> 00:02:24,420
then the game will send the transaction

52
00:02:24,420 --> 00:02:27,180
to the game server for validation and

53
00:02:27,180 --> 00:02:27,959
login

54
00:02:27,959 --> 00:02:31,140
the game server can use the app specific

55
00:02:31,140 --> 00:02:33,420
public key to validate the transaction

56
00:02:33,420 --> 00:02:35,879
signature or it can send the transaction

57
00:02:35,879 --> 00:02:38,700
to the app store for verification after

58
00:02:38,700 --> 00:02:40,800
validating the transaction the game

59
00:02:40,800 --> 00:02:41,879
server

60
00:02:41,879 --> 00:02:44,519
then distributes other digital products

61
00:02:44,519 --> 00:02:47,519
to the user obviously it is uh critical

62
00:02:47,519 --> 00:02:50,099
for the game to verify the transaction

63
00:02:50,099 --> 00:02:53,280
at the server side however we found that

64
00:02:53,280 --> 00:02:56,160
Summer Games implemented igp in the

65
00:02:56,160 --> 00:02:59,400
wrong ways as shown in the picture after

66
00:02:59,400 --> 00:03:01,560
receiving the payment response for the

67
00:03:01,560 --> 00:03:04,260
App Store some games directly trusted

68
00:03:04,260 --> 00:03:06,239
the response without verifying the

69
00:03:06,239 --> 00:03:08,819
transaction since the mobile device is

70
00:03:08,819 --> 00:03:11,760
controlled by users it is easy to hijack

71
00:03:11,760 --> 00:03:14,760
and modify the response in step 3 so

72
00:03:14,760 --> 00:03:17,159
that the payment can be bypassed we call

73
00:03:17,159 --> 00:03:19,819
this vulnerability lack of verification

74
00:03:19,819 --> 00:03:24,480
in another case some game just verify

75
00:03:24,480 --> 00:03:26,760
the transaction locally for the same

76
00:03:26,760 --> 00:03:29,220
reason it is easy for an attacker to

77
00:03:29,220 --> 00:03:31,680
bypass the verification logic such as

78
00:03:31,680 --> 00:03:34,260
making it always written true we call

79
00:03:34,260 --> 00:03:35,879
this vulnerability local verification

80
00:03:35,879 --> 00:03:38,700
both implementations are vulnerable to

81
00:03:38,700 --> 00:03:41,700
payment bypass attacks for the game that

82
00:03:41,700 --> 00:03:43,739
are developed with the different game

83
00:03:43,739 --> 00:03:46,620
engines although the high level steps

84
00:03:46,620 --> 00:03:48,659
are the same the SDK and the

85
00:03:48,659 --> 00:03:51,360
implementation details are different as

86
00:03:51,360 --> 00:03:53,940
such in this work we are targeting the

87
00:03:53,940 --> 00:03:57,200
most popular game engine

88
00:03:57,599 --> 00:04:00,299
um our experiment on 300 000 games

89
00:04:00,299 --> 00:04:03,120
confirmed that Unity is the most popular

90
00:04:03,120 --> 00:04:05,940
one it supports the cross-platforms and

91
00:04:05,940 --> 00:04:08,640
offers an easy to use IDE the program

92
00:04:08,640 --> 00:04:10,920
language is c-sharp however the

93
00:04:10,920 --> 00:04:13,439
compiling process is a euro compared to

94
00:04:13,439 --> 00:04:15,239
normal C sharp program

95
00:04:15,239 --> 00:04:18,418
in particular the social Pro the c-sharp

96
00:04:18,418 --> 00:04:21,120
code will be first compiled to assembles

97
00:04:21,120 --> 00:04:24,060
which are also known as the RL code then

98
00:04:24,060 --> 00:04:26,340
the i o code will be translated to C

99
00:04:26,340 --> 00:04:29,580
plus plus source code and a standard C

100
00:04:29,580 --> 00:04:32,340
plus plus compiler will compile the code

101
00:04:32,340 --> 00:04:35,400
to in into native binary format

102
00:04:35,400 --> 00:04:37,880
eventually the entire process is called

103
00:04:37,880 --> 00:04:41,639
rl2cp it will make the game code secure

104
00:04:41,639 --> 00:04:44,580
and fast however it also makes the game

105
00:04:44,580 --> 00:04:46,740
hard to analyze

106
00:04:46,740 --> 00:04:49,979
let me show you some examples

107
00:04:49,979 --> 00:04:52,139
on the left hand side is the C sharp

108
00:04:52,139 --> 00:04:54,300
source code of the igp processing code

109
00:04:54,300 --> 00:04:56,759
the function name the process purchase

110
00:04:56,759 --> 00:04:59,580
at line 3 is The Wristband of the

111
00:04:59,580 --> 00:05:02,160
payment response from App Store the

112
00:05:02,160 --> 00:05:04,380
parameter in line 4 is the payment

113
00:05:04,380 --> 00:05:06,900
response in the function the game

114
00:05:06,900 --> 00:05:09,060
directly verifies the transaction at

115
00:05:09,060 --> 00:05:11,880
line 11 by using the app specific public

116
00:05:11,880 --> 00:05:15,600
key which is a defined at the line 7.

117
00:05:15,600 --> 00:05:18,720
here is another example it extracts the

118
00:05:18,720 --> 00:05:21,479
transactional receipt at Line 6 and

119
00:05:21,479 --> 00:05:24,419
retrieved the corresponding signature at

120
00:05:24,419 --> 00:05:29,039
line 7 and 8. then put it in a HTTP

121
00:05:29,039 --> 00:05:31,380
request which will be sent to the server

122
00:05:31,380 --> 00:05:34,560
for verification at line 9. next let me

123
00:05:34,560 --> 00:05:36,780
show you the corresponding binary code

124
00:05:36,780 --> 00:05:39,360
in artwork we use gidra to process the

125
00:05:39,360 --> 00:05:42,000
battery the first part is the address

126
00:05:42,000 --> 00:05:45,060
and the byte code the second part is the

127
00:05:45,060 --> 00:05:48,000
disassemble code and the last part is

128
00:05:48,000 --> 00:05:51,720
the p-code that is generated by gidra we

129
00:05:51,720 --> 00:05:54,780
can see that each c-sharp code has been

130
00:05:54,780 --> 00:05:56,759
translated to one or several native

131
00:05:56,759 --> 00:05:58,800
instructions and many symbols are

132
00:05:58,800 --> 00:06:01,380
missing in this work we handle the

133
00:06:01,380 --> 00:06:03,360
native boundaries

134
00:06:03,360 --> 00:06:05,699
so our goal is to identify the

135
00:06:05,699 --> 00:06:08,280
vulnerable igp for the games that are

136
00:06:08,280 --> 00:06:10,860
based on unit engine given a game

137
00:06:10,860 --> 00:06:13,560
battery we want to identify whether its

138
00:06:13,560 --> 00:06:15,840
igp is remote verification local

139
00:06:15,840 --> 00:06:18,720
verification or lack of verification

140
00:06:18,720 --> 00:06:21,180
the first change is how to identify the

141
00:06:21,180 --> 00:06:24,240
vulnerable igp our Insight is to take

142
00:06:24,240 --> 00:06:26,580
advantage of system and unity engine

143
00:06:26,580 --> 00:06:30,479
apis in particular we first abstract the

144
00:06:30,479 --> 00:06:32,639
problem into a data flow analysis

145
00:06:32,639 --> 00:06:35,220
Problem by tracing the data flow of The

146
00:06:35,220 --> 00:06:37,860
Returned transaction if it flows to the

147
00:06:37,860 --> 00:06:40,500
network API then we identify it as a

148
00:06:40,500 --> 00:06:43,139
remote verification if it flows to a

149
00:06:43,139 --> 00:06:45,000
local validation API it is local

150
00:06:45,000 --> 00:06:47,819
verification all other cases are lack of

151
00:06:47,819 --> 00:06:50,819
verification as such for the shown

152
00:06:50,819 --> 00:06:52,919
example the left one should be

153
00:06:52,919 --> 00:06:55,259
classified as the local verification and

154
00:06:55,259 --> 00:06:58,620
the red one is remote verification

155
00:06:58,620 --> 00:07:00,900
the Second Challenge is how to pinpoint

156
00:07:00,900 --> 00:07:03,539
Target apis as mentioned the game binary

157
00:07:03,539 --> 00:07:06,060
does in the contain any symbols without

158
00:07:06,060 --> 00:07:08,759
the symbols we cannot identify the apis

159
00:07:08,759 --> 00:07:13,199
our insert is that r2cp actually packed

160
00:07:13,199 --> 00:07:15,900
the symbols of functions and the classes

161
00:07:15,900 --> 00:07:18,240
into a separate file

162
00:07:18,240 --> 00:07:20,460
which is required for the game Banner

163
00:07:20,460 --> 00:07:22,740
because c-sharp supports features like

164
00:07:22,740 --> 00:07:26,460
reflection which means symbols and such

165
00:07:26,460 --> 00:07:28,620
by analyzing the file we are able to

166
00:07:28,620 --> 00:07:31,440
uncover some symbols

167
00:07:31,440 --> 00:07:34,259
to the last change I ordered to see if

168
00:07:34,259 --> 00:07:36,300
he has submerged the system libraries

169
00:07:36,300 --> 00:07:39,419
and game code together as a result if we

170
00:07:39,419 --> 00:07:41,400
perform traditional data flow analysis

171
00:07:41,400 --> 00:07:43,680
we have to analyze the system Library

172
00:07:43,680 --> 00:07:46,560
when the game called system apis it will

173
00:07:46,560 --> 00:07:50,039
make this analysis too complicated our

174
00:07:50,039 --> 00:07:52,560
Insight is using API summary in

175
00:07:52,560 --> 00:07:54,660
particular we first summarize the

176
00:07:54,660 --> 00:07:57,240
propagation rules for the system and the

177
00:07:57,240 --> 00:08:00,240
unity apis we encounter such an API

178
00:08:00,240 --> 00:08:02,819
instead of analyzing its code we

179
00:08:02,819 --> 00:08:05,639
directly apply the rules

180
00:08:05,639 --> 00:08:08,940
however there is a one indirect data

181
00:08:08,940 --> 00:08:12,060
flow often used in Social programs as

182
00:08:12,060 --> 00:08:15,539
shown in the example at line 8 the code

183
00:08:15,539 --> 00:08:18,360
stored the receipt data in class field

184
00:08:18,360 --> 00:08:22,080
at line four this data could be could be

185
00:08:22,080 --> 00:08:24,780
used by other functions which is uh

186
00:08:24,780 --> 00:08:27,660
which will lead to an indirect upload to

187
00:08:27,660 --> 00:08:30,000
handle such a case our insert is to

188
00:08:30,000 --> 00:08:32,760
build a global class table it indicates

189
00:08:32,760 --> 00:08:35,099
which fields of the classes are

190
00:08:35,099 --> 00:08:38,099
attempted and should be traced as soon

191
00:08:38,099 --> 00:08:41,039
in the top right it is a global class

192
00:08:41,039 --> 00:08:43,380
table please find more details in our

193
00:08:43,380 --> 00:08:45,660
paper if you are interested

194
00:08:45,660 --> 00:08:48,060
with all those insights we have designed

195
00:08:48,060 --> 00:08:50,519
and implemented the payment scope a

196
00:08:50,519 --> 00:08:53,220
static analysis tool based on guitar at

197
00:08:53,220 --> 00:08:54,959
high level it consists of three

198
00:08:54,959 --> 00:08:57,600
components metadata extraction which

199
00:08:57,600 --> 00:09:00,779
uncovers the binary symbols payment

200
00:09:00,779 --> 00:09:02,760
aware data flow analysis and the

201
00:09:02,760 --> 00:09:05,580
vulnerability identification to test the

202
00:09:05,580 --> 00:09:08,700
payment scope we have collected two mini

203
00:09:08,700 --> 00:09:11,399
mobile apps from Google Play and from

204
00:09:11,399 --> 00:09:13,320
the 10 000 mobile games that are

205
00:09:13,320 --> 00:09:15,839
developed based on unity and supports

206
00:09:15,839 --> 00:09:19,860
igp the experiments experiment to serve

207
00:09:19,860 --> 00:09:23,100
almost 28 days to our surprise we found

208
00:09:23,100 --> 00:09:27,600
8 000 games lack of verification and 721

209
00:09:27,600 --> 00:09:29,700
games only verify the transaction

210
00:09:29,700 --> 00:09:32,100
locally

211
00:09:32,100 --> 00:09:35,640
so this means more than 84 percent of

212
00:09:35,640 --> 00:09:38,459
fantastic games are vulnerable to verify

213
00:09:38,459 --> 00:09:40,740
the experimental results we have

214
00:09:40,740 --> 00:09:44,220
conducted FP and F and Analysis manually

215
00:09:44,220 --> 00:09:46,320
we applied the following rules to

216
00:09:46,320 --> 00:09:49,620
collect the sample games in total we

217
00:09:49,620 --> 00:09:52,560
collected 280 games to confirm the

218
00:09:52,560 --> 00:09:54,839
vulnerability we first use our

219
00:09:54,839 --> 00:09:56,940
virtualization tool to inject fake

220
00:09:56,940 --> 00:09:59,880
transactions into the game then we use a

221
00:09:59,880 --> 00:10:02,640
code patching to disable the local

222
00:10:02,640 --> 00:10:04,440
verification API

223
00:10:04,440 --> 00:10:07,860
in the analysis we didn't find the NFP

224
00:10:07,860 --> 00:10:12,300
and the FN is a 29 which means there are

225
00:10:12,300 --> 00:10:14,580
more vulnerable games please refer to

226
00:10:14,580 --> 00:10:16,440
the paper for details

227
00:10:16,440 --> 00:10:18,420
to have a concrete understanding of the

228
00:10:18,420 --> 00:10:20,580
vulnerable games we have grouped the

229
00:10:20,580 --> 00:10:22,680
tested games based on their install

230
00:10:22,680 --> 00:10:25,740
times the polyline in the one is the

231
00:10:25,740 --> 00:10:28,320
vulnerable read of each group we can see

232
00:10:28,320 --> 00:10:30,600
that the vulnerable effects not only

233
00:10:30,600 --> 00:10:32,640
less popular games but also super

234
00:10:32,640 --> 00:10:35,519
popular ones meanwhile from the polyline

235
00:10:35,519 --> 00:10:38,339
we can see that less popular games have

236
00:10:38,339 --> 00:10:40,260
a much higher possibility of being

237
00:10:40,260 --> 00:10:42,959
vulnerable and the developers of popular

238
00:10:42,959 --> 00:10:45,480
games are more careful to secure their

239
00:10:45,480 --> 00:10:49,140
igp then we group with the games based

240
00:10:49,140 --> 00:10:51,120
on the game category we can see that

241
00:10:51,120 --> 00:10:54,300
there are two types of games those

242
00:10:54,300 --> 00:10:56,640
vulnerability read is higher or equal to

243
00:10:56,640 --> 00:11:00,360
90 a possible reason is that the games

244
00:11:00,360 --> 00:11:02,820
in these two categories are more likely

245
00:11:02,820 --> 00:11:05,519
to be a single player game and these

246
00:11:05,519 --> 00:11:08,640
games depend Less on the server

247
00:11:08,640 --> 00:11:11,399
having identified the vulnerabilities we

248
00:11:11,399 --> 00:11:13,620
have made responsible disclosure to both

249
00:11:13,620 --> 00:11:16,680
unity and the game developers in total

250
00:11:16,680 --> 00:11:20,040
we have contacted the 5 000 developers

251
00:11:20,040 --> 00:11:22,800
of the vulnerable games and we have

252
00:11:22,800 --> 00:11:25,320
received the hundreds of responses many

253
00:11:25,320 --> 00:11:27,360
developers promised to patch the

254
00:11:27,360 --> 00:11:30,000
vulnerability in the next version

255
00:11:30,000 --> 00:11:32,760
and for the sake of time I'm going to

256
00:11:32,760 --> 00:11:35,940
skip the limitation and the related work

257
00:11:35,940 --> 00:11:38,399
so in summary in this work we presented

258
00:11:38,399 --> 00:11:40,680
the payment scope a fully automated

259
00:11:40,680 --> 00:11:43,440
system to identify vulnerable igp among

260
00:11:43,440 --> 00:11:46,079
Unity based mobile games our experiment

261
00:11:46,079 --> 00:11:49,079
shows that 84 percent of testy games are

262
00:11:49,079 --> 00:11:51,120
vulnerable the source code or payment

263
00:11:51,120 --> 00:11:53,760
scope is available at the GitHub please

264
00:11:53,760 --> 00:11:55,980
check it out if you are interested

265
00:11:55,980 --> 00:11:58,800
and due to a family issue I cannot join

266
00:11:58,800 --> 00:12:01,560
the conference in person but my advisor

267
00:12:01,560 --> 00:12:03,600
Professor Jason will be there to answer

268
00:12:03,600 --> 00:12:07,100
your questions thank you

