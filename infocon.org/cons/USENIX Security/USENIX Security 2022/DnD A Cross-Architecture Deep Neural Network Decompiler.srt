1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:09,440 --> 00:00:12,780
today I'm gonna present DND a course

3
00:00:12,780 --> 00:00:17,160
architecture deep new network decompiler

4
00:00:17,160 --> 00:00:19,920
deep new YouTube Newark networks DNS

5
00:00:19,920 --> 00:00:22,080
have been implemented and deployed on

6
00:00:22,080 --> 00:00:24,800
many devices so to support many

7
00:00:24,800 --> 00:00:28,019
applications such as facial recognition

8
00:00:28,019 --> 00:00:31,859
speech recognition and anomaly detection

9
00:00:31,859 --> 00:00:35,340
when deployment dedicated compilers are

10
00:00:35,340 --> 00:00:37,920
used to compile the data model into

11
00:00:37,920 --> 00:00:41,579
binary such as Glo ntvm

12
00:00:41,579 --> 00:00:43,620
these binaries are usually deployed on

13
00:00:43,620 --> 00:00:46,260
each devices such as a Facebook

14
00:00:46,260 --> 00:00:49,099
connection camera

15
00:00:50,219 --> 00:00:52,559
in this work we explore the possibility

16
00:00:52,559 --> 00:00:55,559
of decompiling their binaries during

17
00:00:55,559 --> 00:00:57,480
binary different boundaries the

18
00:00:57,480 --> 00:00:58,620
compilation has many security

19
00:00:58,620 --> 00:01:00,180
applications

20
00:01:00,180 --> 00:01:01,860
such as

21
00:01:01,860 --> 00:01:05,099
stealing stealing stealing their models

22
00:01:05,099 --> 00:01:06,960
and turning black balls at also attack

23
00:01:06,960 --> 00:01:09,780
into a more effective weapons adversal

24
00:01:09,780 --> 00:01:10,619
attack

25
00:01:10,619 --> 00:01:13,140
for example the figure below shows that

26
00:01:13,140 --> 00:01:15,720
after adding some imperceptible noises

27
00:01:15,720 --> 00:01:17,820
the deal model will miss classify a stop

28
00:01:17,820 --> 00:01:21,080
sign as a teddy bear

29
00:01:21,780 --> 00:01:24,360
before we discuss about the binary

30
00:01:24,360 --> 00:01:26,460
compilation let me first give some

31
00:01:26,460 --> 00:01:29,040
backgrounds

32
00:01:29,040 --> 00:01:31,380
the figure below shows a snippet of a

33
00:01:31,380 --> 00:01:34,500
resnet model in Linux format the only X

34
00:01:34,500 --> 00:01:37,079
format represents a new network as a

35
00:01:37,079 --> 00:01:39,720
computation graph each node in the graph

36
00:01:39,720 --> 00:01:41,820
is a different operator

37
00:01:41,820 --> 00:01:43,560
the DNA operators are the building

38
00:01:43,560 --> 00:01:46,259
blocks of DNN

39
00:01:46,259 --> 00:01:48,420
there are various types of data

40
00:01:48,420 --> 00:01:50,159
operators with different mathematical

41
00:01:50,159 --> 00:01:52,680
semantics

42
00:01:52,680 --> 00:01:55,320
currently there are 174 different

43
00:01:55,320 --> 00:01:58,439
operators defined in online X

44
00:01:58,439 --> 00:02:02,040
it includes a convolution average poor

45
00:02:02,040 --> 00:02:04,460
and value

46
00:02:04,560 --> 00:02:07,200
field model semantics include operator

47
00:02:07,200 --> 00:02:10,139
level semantics such as this type

48
00:02:10,139 --> 00:02:13,440
attributes and parameters

49
00:02:13,440 --> 00:02:15,900
and model level semantics include

50
00:02:15,900 --> 00:02:17,459
topology

51
00:02:17,459 --> 00:02:19,500
which defines how The Operators are

52
00:02:19,500 --> 00:02:22,459
connected with each other

53
00:02:23,160 --> 00:02:25,800
to compile data into binary

54
00:02:25,800 --> 00:02:27,599
ahead of time compilation is usually

55
00:02:27,599 --> 00:02:28,800
used

56
00:02:28,800 --> 00:02:31,739
it specializes the operator according to

57
00:02:31,739 --> 00:02:34,080
its according to its attributes and

58
00:02:34,080 --> 00:02:35,640
parameters

59
00:02:35,640 --> 00:02:37,920
for instance here the highlighted

60
00:02:37,920 --> 00:02:40,800
convolution 2 and conclusion 3. although

61
00:02:40,800 --> 00:02:43,379
they share the same operator type but

62
00:02:43,379 --> 00:02:45,180
because of their different attributes

63
00:02:45,180 --> 00:02:47,340
and parameters they are they are

64
00:02:47,340 --> 00:02:48,900
compiled into two different binary

65
00:02:48,900 --> 00:02:50,640
functions with very different control

66
00:02:50,640 --> 00:02:54,720
flow and data flow structure

67
00:02:55,980 --> 00:02:58,019
general purpose the compilers are used

68
00:02:58,019 --> 00:03:00,120
to recover C language level syntactics

69
00:03:00,120 --> 00:03:02,519
from the binary however they have

70
00:03:02,519 --> 00:03:04,260
several limitations when dealing with

71
00:03:04,260 --> 00:03:07,099
gun binaries

72
00:03:07,099 --> 00:03:10,319
here we saw a snippet clear visual code

73
00:03:10,319 --> 00:03:12,360
of a either product correlation results

74
00:03:12,360 --> 00:03:14,580
of a single convolution operator

75
00:03:14,580 --> 00:03:15,720
instance

76
00:03:15,720 --> 00:03:19,379
as you can see it contains 348 lines of

77
00:03:19,379 --> 00:03:20,159
codes

78
00:03:20,159 --> 00:03:22,800
with multiple long loose bodies and many

79
00:03:22,800 --> 00:03:25,500
bitwise operations

80
00:03:25,500 --> 00:03:27,720
if I were a reverse engineer

81
00:03:27,720 --> 00:03:29,459
I have totally no idea what this

82
00:03:29,459 --> 00:03:32,060
function is doing

83
00:03:32,760 --> 00:03:36,000
instead our system tnd can recover

84
00:03:36,000 --> 00:03:38,099
high-level DNA semantics from the binary

85
00:03:38,099 --> 00:03:41,700
and output the and output the option

86
00:03:41,700 --> 00:03:43,980
model in Ox format such as the figure

87
00:03:43,980 --> 00:03:44,940
below

88
00:03:44,940 --> 00:03:47,099
it includes all the high level semantics

89
00:03:47,099 --> 00:03:49,860
such as operator type attributes and

90
00:03:49,860 --> 00:03:51,980
parameters

91
00:03:51,980 --> 00:03:54,900
since this objective is to recover these

92
00:03:54,900 --> 00:03:57,360
models in onx format from the binaries

93
00:03:57,360 --> 00:03:59,280
renewing CPU devices

94
00:03:59,280 --> 00:04:01,440
is to be generic to support different

95
00:04:01,440 --> 00:04:03,720
compilers and essays and it should be

96
00:04:03,720 --> 00:04:07,200
accurate to recover the models with high

97
00:04:07,200 --> 00:04:09,540
accuracy

98
00:04:09,540 --> 00:04:12,060
let me first give a give an overview of

99
00:04:12,060 --> 00:04:14,459
our pipeline at a very at the very

100
00:04:14,459 --> 00:04:18,000
beginning given the binary we locate the

101
00:04:18,000 --> 00:04:19,380
function the binary function that

102
00:04:19,380 --> 00:04:22,979
Implement digital operator

103
00:04:22,979 --> 00:04:25,979
and for each for every uh for each

104
00:04:25,979 --> 00:04:29,280
located operator function we generate an

105
00:04:29,280 --> 00:04:31,500
operator summary represented with the IR

106
00:04:31,500 --> 00:04:34,500
redesign which is capable of capturing

107
00:04:34,500 --> 00:04:36,720
its mathematical semantics

108
00:04:36,720 --> 00:04:40,440
and at the very last we recover the high

109
00:04:40,440 --> 00:04:42,600
level model semantics and output the

110
00:04:42,600 --> 00:04:45,800
model in our next format

111
00:04:46,199 --> 00:04:48,900
and now I I've given some details of

112
00:04:48,900 --> 00:04:51,240
each step in the first step we look for

113
00:04:51,240 --> 00:04:53,040
the binary function with certain

114
00:04:53,040 --> 00:04:55,380
structures including Neti loops and

115
00:04:55,380 --> 00:04:58,500
vectorized computations

116
00:04:58,500 --> 00:05:00,600
these functions are identified as the

117
00:05:00,600 --> 00:05:02,460
function that implement the Eternal

118
00:05:02,460 --> 00:05:03,840
operator

119
00:05:03,840 --> 00:05:06,479
note that our systems work at the binary

120
00:05:06,479 --> 00:05:09,120
level but for easy understanding we will

121
00:05:09,120 --> 00:05:11,639
show we are showing source code as our

122
00:05:11,639 --> 00:05:15,240
running example in the following slides

123
00:05:15,240 --> 00:05:17,699
and in in the next step we generate an

124
00:05:17,699 --> 00:05:20,040
operator summary for each located binary

125
00:05:20,040 --> 00:05:22,139
function which captures multiple

126
00:05:22,139 --> 00:05:24,960
semantics to do so we first conduct a

127
00:05:24,960 --> 00:05:26,759
loop analysis to identify the induction

128
00:05:26,759 --> 00:05:29,220
variables and the information

129
00:05:29,220 --> 00:05:31,979
Loop in induction variables also also

130
00:05:31,979 --> 00:05:33,360
called Loop index

131
00:05:33,360 --> 00:05:37,199
for example there are the variables ijuv

132
00:05:37,199 --> 00:05:38,520
showing the figure

133
00:05:38,520 --> 00:05:40,680
and also identify their information such

134
00:05:40,680 --> 00:05:43,919
as initial value step size and loop

135
00:05:43,919 --> 00:05:46,099
count

136
00:05:46,259 --> 00:05:48,419
then we symbolize the identified

137
00:05:48,419 --> 00:05:50,340
induction variables and conduct some

138
00:05:50,340 --> 00:05:53,520
body execution to extract an expression

139
00:05:53,520 --> 00:05:56,160
that represents the output of of this

140
00:05:56,160 --> 00:05:57,360
function

141
00:05:57,360 --> 00:06:00,900
using its input and parameters

142
00:06:00,900 --> 00:06:03,240
for example here is here it is the

143
00:06:03,240 --> 00:06:05,280
expression we extract from this binary

144
00:06:05,280 --> 00:06:07,580
function

145
00:06:07,860 --> 00:06:09,780
then we leave the extracted Expressions

146
00:06:09,780 --> 00:06:12,300
into our into open summary represented

147
00:06:12,300 --> 00:06:14,340
with rir

148
00:06:14,340 --> 00:06:17,880
for example here we leave the expression

149
00:06:17,880 --> 00:06:20,160
on the left to the operation on the

150
00:06:20,160 --> 00:06:21,180
right

151
00:06:21,180 --> 00:06:24,180
where we replace the plus equal on the

152
00:06:24,180 --> 00:06:25,500
left to the summation function define

153
00:06:25,500 --> 00:06:27,479
lyr and multiplication with

154
00:06:27,479 --> 00:06:28,979
multiplication with multiplication

155
00:06:28,979 --> 00:06:30,419
function in lyr

156
00:06:30,419 --> 00:06:32,660
we also attach the induction variables

157
00:06:32,660 --> 00:06:35,699
indicating the all the possible ranges

158
00:06:35,699 --> 00:06:39,720
of each Loop index for instance for the

159
00:06:39,720 --> 00:06:43,319
variable U is that its ranges is from 0

160
00:06:43,319 --> 00:06:45,979
to 1.

161
00:06:46,500 --> 00:06:48,900
and after operators are summary

162
00:06:48,900 --> 00:06:51,180
generation we finally recover the dtn

163
00:06:51,180 --> 00:06:52,740
high level semantics

164
00:06:52,740 --> 00:06:55,680
first we have the operator type for each

165
00:06:55,680 --> 00:06:58,680
operator function with the SD matching

166
00:06:58,680 --> 00:07:01,020
we have a referenced SD database in

167
00:07:01,020 --> 00:07:04,380
advance which Maps each operator to its

168
00:07:04,380 --> 00:07:05,819
corresponding St

169
00:07:05,819 --> 00:07:07,380
for instance here is the reference

170
00:07:07,380 --> 00:07:10,560
density of a convolution operator

171
00:07:10,560 --> 00:07:12,720
then we match the LST in operating

172
00:07:12,720 --> 00:07:15,300
summary with all of the references

173
00:07:15,300 --> 00:07:18,360
we consider the operator type as that of

174
00:07:18,360 --> 00:07:23,280
a reference St if their asts are matched

175
00:07:23,280 --> 00:07:26,819
for instance here we uh we match the

176
00:07:26,819 --> 00:07:29,280
opacity included in operating summary

177
00:07:29,280 --> 00:07:31,520
with the reference entity of convolution

178
00:07:31,520 --> 00:07:35,340
and it succeeds so we consider it as a

179
00:07:35,340 --> 00:07:38,119
convolution operator

180
00:07:38,340 --> 00:07:40,680
we then recover the Indian topology by

181
00:07:40,680 --> 00:07:42,479
leveraging the data dependencies between

182
00:07:42,479 --> 00:07:45,060
each DNA operate function

183
00:07:45,060 --> 00:07:48,180
for instance here we identify that the

184
00:07:48,180 --> 00:07:51,180
output of conclusion 1 and the input of

185
00:07:51,180 --> 00:07:53,400
constant 3 are pointing to the same

186
00:07:53,400 --> 00:07:54,960
memory address

187
00:07:54,960 --> 00:07:58,800
so we are so we infer this age from

188
00:07:58,800 --> 00:08:02,340
convolution 1 to conclusion 3.

189
00:08:02,340 --> 00:08:05,520
and very last we recovered attributes

190
00:08:05,520 --> 00:08:08,639
and parameters of each of each of each

191
00:08:08,639 --> 00:08:10,680
operator function by leveraging operator

192
00:08:10,680 --> 00:08:12,900
summary and generate and the recovered

193
00:08:12,900 --> 00:08:14,699
in topology

194
00:08:14,699 --> 00:08:17,880
for instance here we recover the values

195
00:08:17,880 --> 00:08:20,699
of filter by extracting from the

196
00:08:20,699 --> 00:08:23,960
corresponding memory address

197
00:08:24,539 --> 00:08:28,139
evaluation first we value generality by

198
00:08:28,139 --> 00:08:30,180
evaluating how many widely used steel

199
00:08:30,180 --> 00:08:32,520
model we can support

200
00:08:32,520 --> 00:08:35,219
we consider module supported when all of

201
00:08:35,219 --> 00:08:38,539
its operators are supported

202
00:08:38,580 --> 00:08:42,479
we collect 37 DN models from 1x2 and ml

203
00:08:42,479 --> 00:08:45,360
proof tiny benchmarks carving 70 deal

204
00:08:45,360 --> 00:08:47,760
models sorry currently covering 70

205
00:08:47,760 --> 00:08:50,279
different operators

206
00:08:50,279 --> 00:08:53,160
and our evaluations shows that our

207
00:08:53,160 --> 00:08:56,940
system can support 84 of operator

208
00:08:56,940 --> 00:09:00,240
it in turns enables support for 81 of

209
00:09:00,240 --> 00:09:02,220
the models

210
00:09:02,220 --> 00:09:04,260
we also evaluate the correctness of a

211
00:09:04,260 --> 00:09:05,279
system

212
00:09:05,279 --> 00:09:08,339
by checking if our season can decompile

213
00:09:08,339 --> 00:09:12,120
a dealer model and generate a

214
00:09:12,120 --> 00:09:14,459
generator model that is equivalent to

215
00:09:14,459 --> 00:09:16,560
the original one

216
00:09:16,560 --> 00:09:19,680
we test with 15 different binaries

217
00:09:19,680 --> 00:09:22,019
they are compiled with two compilers

218
00:09:22,019 --> 00:09:25,500
three isas and three models

219
00:09:25,500 --> 00:09:28,500
We compare their inference results given

220
00:09:28,500 --> 00:09:30,660
10 000 test inputs

221
00:09:30,660 --> 00:09:33,360
and I will ensure that we can decompile

222
00:09:33,360 --> 00:09:37,580
OD binaries with 100 accuracy

223
00:09:37,800 --> 00:09:39,839
for example here we showed architecture

224
00:09:39,839 --> 00:09:41,580
of the original resident model

225
00:09:41,580 --> 00:09:43,680
and the architecture of the decompiled

226
00:09:43,680 --> 00:09:46,380
resident model generated by our system

227
00:09:46,380 --> 00:09:48,060
and as you can see they have the

228
00:09:48,060 --> 00:09:50,279
identical architecture and we further

229
00:09:50,279 --> 00:09:53,459
test with 10 000 input and show that

230
00:09:53,459 --> 00:09:56,100
they have the same influence inference

231
00:09:56,100 --> 00:09:58,320
Behavior

232
00:09:58,320 --> 00:10:00,480
we conduct case studies on a real world

233
00:10:00,480 --> 00:10:03,000
microcontroller with a resnet model is

234
00:10:03,000 --> 00:10:04,800
deployed

235
00:10:04,800 --> 00:10:07,320
we saw that our system can successfully

236
00:10:07,320 --> 00:10:08,839
steal the model from the board

237
00:10:08,839 --> 00:10:11,519
specifically we dump the binary from the

238
00:10:11,519 --> 00:10:14,459
board and to compile the binary with our

239
00:10:14,459 --> 00:10:15,240
system

240
00:10:15,240 --> 00:10:18,060
and we verify the correctness of the

241
00:10:18,060 --> 00:10:20,459
compile model by showing that they have

242
00:10:20,459 --> 00:10:23,779
the identical inference results

243
00:10:23,940 --> 00:10:25,980
we saw so that

244
00:10:25,980 --> 00:10:28,019
the decompile model can be used to boot

245
00:10:28,019 --> 00:10:29,760
that result attack

246
00:10:29,760 --> 00:10:31,860
with the decompile model we launched

247
00:10:31,860 --> 00:10:33,660
white box attack which successfully

248
00:10:33,660 --> 00:10:37,320
reduced the accuracy from 88 with the

249
00:10:37,320 --> 00:10:40,500
original input to the 11 with the

250
00:10:40,500 --> 00:10:41,880
variables input

251
00:10:41,880 --> 00:10:44,220
while the Bible attacks can only degrade

252
00:10:44,220 --> 00:10:47,600
accuracy to 57.

253
00:10:47,600 --> 00:10:50,940
in summary the compiling during binaries

254
00:10:50,940 --> 00:10:53,519
requires customized techniques with

255
00:10:53,519 --> 00:10:55,079
students basic knowledge

256
00:10:55,079 --> 00:10:57,600
we propose DND the first compiler for

257
00:10:57,600 --> 00:10:59,640
compiling binaries

258
00:10:59,640 --> 00:11:03,180
and it is open source on GitHub

259
00:11:03,180 --> 00:11:05,040
and thank you I'm ready to take

260
00:11:05,040 --> 00:11:07,219
questions

