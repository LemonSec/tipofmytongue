1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:08,300 --> 00:00:11,700
hey I'm Jess I'm going to introduce our

3
00:00:11,700 --> 00:00:13,860
system Audi which is a compiler for ZK

4
00:00:13,860 --> 00:00:15,179
snarks that provides support for

5
00:00:15,179 --> 00:00:17,520
optimization problems

6
00:00:17,520 --> 00:00:18,720
um obviously we're going to do this with

7
00:00:18,720 --> 00:00:20,820
zero knowledge that's why we're here

8
00:00:20,820 --> 00:00:22,380
so let's say you need to solve an

9
00:00:22,380 --> 00:00:23,640
optimization problem you need to prove

10
00:00:23,640 --> 00:00:25,199
that you solved it correctly but your

11
00:00:25,199 --> 00:00:26,699
problem involves sensitive data that you

12
00:00:26,699 --> 00:00:29,400
don't want to reveal for example

13
00:00:29,400 --> 00:00:30,660
maybe you're a school and you're

14
00:00:30,660 --> 00:00:32,220
admitting a new class of students and

15
00:00:32,220 --> 00:00:33,480
you want to prove that you've selected

16
00:00:33,480 --> 00:00:36,120
the best or most optimal incoming class

17
00:00:36,120 --> 00:00:37,320
but you don't want to reveal your

18
00:00:37,320 --> 00:00:38,640
admissions criteria and you don't want

19
00:00:38,640 --> 00:00:39,899
to leak the data of your potential

20
00:00:39,899 --> 00:00:41,040
students

21
00:00:41,040 --> 00:00:42,899
maybe have a certain GPA requirement

22
00:00:42,899 --> 00:00:45,120
maybe have a class cap maybe you require

23
00:00:45,120 --> 00:00:47,520
extracurriculars whatever

24
00:00:47,520 --> 00:00:49,500
um so as a school you can generate a

25
00:00:49,500 --> 00:00:50,940
commitment to your specific admissions

26
00:00:50,940 --> 00:00:54,180
criteria this hides the criteria but it

27
00:00:54,180 --> 00:00:55,440
binds the school system to it so they're

28
00:00:55,440 --> 00:00:57,600
consistent in admission and the school

29
00:00:57,600 --> 00:00:59,219
want to maximize some objective function

30
00:00:59,219 --> 00:01:01,320
and this function can select students

31
00:01:01,320 --> 00:01:03,180
such as the incoming class is optimal

32
00:01:03,180 --> 00:01:04,979
for them and then the school also wants

33
00:01:04,979 --> 00:01:07,080
to ensure their linear constraints so

34
00:01:07,080 --> 00:01:08,520
you can formulate this as a linear

35
00:01:08,520 --> 00:01:10,380
optimization problem

36
00:01:10,380 --> 00:01:12,900
so then students apply to the school

37
00:01:12,900 --> 00:01:14,580
um the School commits to their data

38
00:01:14,580 --> 00:01:16,140
the school can then prove to everybody

39
00:01:16,140 --> 00:01:18,360
that for some set of applicants those

40
00:01:18,360 --> 00:01:19,799
who are granted the mission were the

41
00:01:19,799 --> 00:01:21,240
best choice for the school given its

42
00:01:21,240 --> 00:01:22,799
criteria and they can do this in zero

43
00:01:22,799 --> 00:01:23,700
knowledge without leaking any

44
00:01:23,700 --> 00:01:25,439
information about their criteria or

45
00:01:25,439 --> 00:01:28,619
about the data of specific students

46
00:01:28,619 --> 00:01:30,380
this is obviously a contrived example

47
00:01:30,380 --> 00:01:32,880
but optimization problems are everywhere

48
00:01:32,880 --> 00:01:35,040
notably resource allocation scheduling

49
00:01:35,040 --> 00:01:37,200
and neural network training

50
00:01:37,200 --> 00:01:39,119
Audi handles three classes of these

51
00:01:39,119 --> 00:01:40,799
optimization problems which are linear

52
00:01:40,799 --> 00:01:42,420
programming semi-definite programming

53
00:01:42,420 --> 00:01:44,520
and stochastic gradient descent and to

54
00:01:44,520 --> 00:01:46,079
improve optimality for all of these

55
00:01:46,079 --> 00:01:48,540
classes in zero knowledge

56
00:01:48,540 --> 00:01:51,299
so how would we go about doing this the

57
00:01:51,299 --> 00:01:53,040
naive way would be to encode the entire

58
00:01:53,040 --> 00:01:54,720
solver as a Boolean or an arithmetic

59
00:01:54,720 --> 00:01:56,820
circuit or some other intermediate

60
00:01:56,820 --> 00:01:58,320
representation like rank one constraints

61
00:01:58,320 --> 00:02:00,240
that can be consumed by a zero knowledge

62
00:02:00,240 --> 00:02:01,500
backend

63
00:02:01,500 --> 00:02:03,119
um and by solver here I just made a

64
00:02:03,119 --> 00:02:04,320
program that solves the optimization

65
00:02:04,320 --> 00:02:05,280
problem

66
00:02:05,280 --> 00:02:07,200
so our school admissions example is a

67
00:02:07,200 --> 00:02:09,119
linear program and that can be solved

68
00:02:09,119 --> 00:02:10,979
with the Simplex algorithm for something

69
00:02:10,979 --> 00:02:13,500
like stochastic gradient descent you can

70
00:02:13,500 --> 00:02:14,640
just run the stochastic grading discount

71
00:02:14,640 --> 00:02:16,319
algorithm for many iterations until it

72
00:02:16,319 --> 00:02:18,000
converges

73
00:02:18,000 --> 00:02:19,980
and as we saw these circuits are very

74
00:02:19,980 --> 00:02:22,140
big

75
00:02:22,140 --> 00:02:24,239
um the features like unbounded Loops

76
00:02:24,239 --> 00:02:26,040
features like Ram operations floating

77
00:02:26,040 --> 00:02:27,599
Point can cause a huge blow up in these

78
00:02:27,599 --> 00:02:28,980
circuits

79
00:02:28,980 --> 00:02:30,420
um

80
00:02:30,420 --> 00:02:31,620
for example if you have a loop that's

81
00:02:31,620 --> 00:02:33,239
dependent on runtime data you have to

82
00:02:33,239 --> 00:02:35,640
copy it a million times and pick some

83
00:02:35,640 --> 00:02:36,780
large upper bound because you don't know

84
00:02:36,780 --> 00:02:38,700
how many times it's going to run

85
00:02:38,700 --> 00:02:40,319
the largest linear programming problem

86
00:02:40,319 --> 00:02:41,819
that we were able to compile to a

87
00:02:41,819 --> 00:02:43,920
circuit in this way only had five

88
00:02:43,920 --> 00:02:46,080
equations and five variables and It

89
00:02:46,080 --> 00:02:47,340
produced an arithmetic circuit with

90
00:02:47,340 --> 00:02:48,840
about a million multiplication Gates

91
00:02:48,840 --> 00:02:51,180
which is obviously pretty far from what

92
00:02:51,180 --> 00:02:52,860
we would want in like a real world

93
00:02:52,860 --> 00:02:56,879
instance so we need to avoid this

94
00:02:56,879 --> 00:02:59,640
so what Audi does is Audi says well we

95
00:02:59,640 --> 00:03:02,099
don't really care how approver like the

96
00:03:02,099 --> 00:03:04,319
school in our example finds the optimal

97
00:03:04,319 --> 00:03:06,300
solution we don't care what solver they

98
00:03:06,300 --> 00:03:07,560
use or how efficient it is or what

99
00:03:07,560 --> 00:03:09,780
external libraries they use whatever all

100
00:03:09,780 --> 00:03:11,459
we care about is that the solution is

101
00:03:11,459 --> 00:03:13,560
optimal and it turns out for many

102
00:03:13,560 --> 00:03:15,239
classes of optimization problems there's

103
00:03:15,239 --> 00:03:16,739
a particular structure such that

104
00:03:16,739 --> 00:03:19,019
checking the solution is optimal is much

105
00:03:19,019 --> 00:03:20,220
cheaper than Computing the solution

106
00:03:20,220 --> 00:03:22,019
itself

107
00:03:22,019 --> 00:03:25,560
um and what I mean by structure is um

108
00:03:25,560 --> 00:03:27,780
you can think about sorting you can

109
00:03:27,780 --> 00:03:29,400
check that a list is sorted by just

110
00:03:29,400 --> 00:03:31,140
going through and saying like is every

111
00:03:31,140 --> 00:03:33,599
element bigger than the last element and

112
00:03:33,599 --> 00:03:35,519
is the output and the input contain the

113
00:03:35,519 --> 00:03:37,440
same elements I mean that's faster than

114
00:03:37,440 --> 00:03:38,819
running something like quick sort or

115
00:03:38,819 --> 00:03:40,920
merge sort or whatever

116
00:03:40,920 --> 00:03:43,620
um so what Audi does is instead of

117
00:03:43,620 --> 00:03:45,420
encoding the entire solver in the proof

118
00:03:45,420 --> 00:03:47,220
the proofer just computes the solution

119
00:03:47,220 --> 00:03:49,140
and supplies it as non-deterministic

120
00:03:49,140 --> 00:03:51,239
input to the proof then the proof is

121
00:03:51,239 --> 00:03:52,739
just this very small check that the

122
00:03:52,739 --> 00:03:54,599
solution is optimal and this check is

123
00:03:54,599 --> 00:03:56,760
very practical it doesn't need to use

124
00:03:56,760 --> 00:03:59,580
Loops or Ram or whatever and so you can

125
00:03:59,580 --> 00:04:01,799
use it to solve realistic instances and

126
00:04:01,799 --> 00:04:04,260
it is completely automatable

127
00:04:04,260 --> 00:04:06,420
so to roadmap thrust the talk for you

128
00:04:06,420 --> 00:04:08,040
I'm going to show you how ADI does this

129
00:04:08,040 --> 00:04:10,140
for linear programming you can see our

130
00:04:10,140 --> 00:04:12,239
paper for semi-definite programming and

131
00:04:12,239 --> 00:04:13,680
stochastic gradient descent problems

132
00:04:13,680 --> 00:04:15,120
since those techniques are a little bit

133
00:04:15,120 --> 00:04:17,220
different and that'll give you a high

134
00:04:17,220 --> 00:04:19,500
level description of Audi's pipeline how

135
00:04:19,500 --> 00:04:21,000
you compile a programming ID and then I

136
00:04:21,000 --> 00:04:22,740
will conclude

137
00:04:22,740 --> 00:04:24,960
so linear programming problems are

138
00:04:24,960 --> 00:04:27,060
always of this form you want to find

139
00:04:27,060 --> 00:04:29,040
some Vector that maximizes an objective

140
00:04:29,040 --> 00:04:31,560
function subject to a matrix of linear

141
00:04:31,560 --> 00:04:33,840
constraints and in optimization Theory

142
00:04:33,840 --> 00:04:35,400
this direct translation is just called

143
00:04:35,400 --> 00:04:37,020
the Primal problem

144
00:04:37,020 --> 00:04:39,600
and any linear optimization problem can

145
00:04:39,600 --> 00:04:41,280
be viewed from another perspective this

146
00:04:41,280 --> 00:04:43,080
is called the Dual problem

147
00:04:43,080 --> 00:04:44,580
if a primal problem is a maximization

148
00:04:44,580 --> 00:04:45,960
problem the Dual problem is a

149
00:04:45,960 --> 00:04:47,580
minimization problem and vice versa is

150
00:04:47,580 --> 00:04:49,440
basically a turn of the problem

151
00:04:49,440 --> 00:04:51,600
in linear programming if there's a

152
00:04:51,600 --> 00:04:53,520
feasible solution to a bounded problem

153
00:04:53,520 --> 00:04:55,860
the corresponding problem also has a

154
00:04:55,860 --> 00:04:58,139
feasible solution both problems have an

155
00:04:58,139 --> 00:05:00,600
optimal solution and the optimal Primal

156
00:05:00,600 --> 00:05:01,979
and dual Solutions produce the same

157
00:05:01,979 --> 00:05:03,660
objective value and this is called

158
00:05:03,660 --> 00:05:05,880
strong duality

159
00:05:05,880 --> 00:05:06,419
um

160
00:05:06,419 --> 00:05:08,699
because of strong Duality we can create

161
00:05:08,699 --> 00:05:11,160
a very short short certificate to check

162
00:05:11,160 --> 00:05:13,320
the optimality of our solution

163
00:05:13,320 --> 00:05:15,600
um so what it does you can imagine okay

164
00:05:15,600 --> 00:05:17,639
if we're given solutions to our Primal

165
00:05:17,639 --> 00:05:19,740
dual problems X star and Y star just

166
00:05:19,740 --> 00:05:21,720
drops from the sky all we need to check

167
00:05:21,720 --> 00:05:23,520
is that X is indeed a solution to the

168
00:05:23,520 --> 00:05:25,620
Primal problem Y is indeed the solution

169
00:05:25,620 --> 00:05:27,300
to the Dual problem and that strong

170
00:05:27,300 --> 00:05:29,100
Duality holds their objective values are

171
00:05:29,100 --> 00:05:32,880
the same and then that implies that they

172
00:05:32,880 --> 00:05:35,940
these Solutions are optimal

173
00:05:35,940 --> 00:05:37,320
I mean this is great because it doesn't

174
00:05:37,320 --> 00:05:39,300
require any Loops it doesn't require Ram

175
00:05:39,300 --> 00:05:41,639
it doesn't require external libraries it

176
00:05:41,639 --> 00:05:43,139
can be encoded as a much much smaller

177
00:05:43,139 --> 00:05:44,460
arithmetic circuit than the entire

178
00:05:44,460 --> 00:05:47,160
solver can and since the circuit is so

179
00:05:47,160 --> 00:05:49,380
small it is finally practical to prove

180
00:05:49,380 --> 00:05:52,380
optimization problems in zero knowledge

181
00:05:52,380 --> 00:05:54,120
how practical

182
00:05:54,120 --> 00:05:56,840
here are the results of running Audi on

183
00:05:56,840 --> 00:05:59,880
a sequence of problems in the netlib

184
00:05:59,880 --> 00:06:01,380
linear programming Library

185
00:06:01,380 --> 00:06:04,139
which is a benchmarking library that

186
00:06:04,139 --> 00:06:05,940
they use to manage Mark linear

187
00:06:05,940 --> 00:06:07,440
optimization solvers

188
00:06:07,440 --> 00:06:09,120
and for us these instances audio

189
00:06:09,120 --> 00:06:11,880
produces proofs under 50 kilobytes

190
00:06:11,880 --> 00:06:14,340
the biggest instance we're able to able

191
00:06:14,340 --> 00:06:16,199
to compile over here on the far side of

192
00:06:16,199 --> 00:06:19,620
the slide had 400 equations and 2700

193
00:06:19,620 --> 00:06:22,199
variables and it only produced a proof

194
00:06:22,199 --> 00:06:25,680
of 81 kilobytes and for comparison the

195
00:06:25,680 --> 00:06:27,060
proof that I talked about before with

196
00:06:27,060 --> 00:06:29,940
five variables and five constraints also

197
00:06:29,940 --> 00:06:32,400
produced a proof of that size so now we

198
00:06:32,400 --> 00:06:35,340
can for the same cost we can get 400

199
00:06:35,340 --> 00:06:39,138
equations and 2700 variables

200
00:06:39,240 --> 00:06:40,620
so

201
00:06:40,620 --> 00:06:43,340
let's talk about the compilation process

202
00:06:43,340 --> 00:06:46,139
first you input an optimization problem

203
00:06:46,139 --> 00:06:48,660
let's say this is a linear Primal

204
00:06:48,660 --> 00:06:51,419
problem the prover uses any solver it

205
00:06:51,419 --> 00:06:53,100
wants to find the solution

206
00:06:53,100 --> 00:06:54,960
for example in the linear programming

207
00:06:54,960 --> 00:06:57,419
case this might be simplex and as far as

208
00:06:57,419 --> 00:06:59,580
audio is concerned this this Soul versus

209
00:06:59,580 --> 00:07:01,199
Black Box it can use any optimizations

210
00:07:01,199 --> 00:07:02,759
you can use it on any hardware or

211
00:07:02,759 --> 00:07:04,020
whatever you want

212
00:07:04,020 --> 00:07:06,419
I mean it produces our solutions to our

213
00:07:06,419 --> 00:07:08,759
Primal and dual problems

214
00:07:08,759 --> 00:07:11,100
Audi then can automatically generate the

215
00:07:11,100 --> 00:07:12,600
certificate for this problem and compile

216
00:07:12,600 --> 00:07:15,240
it from C to rank one constraints

217
00:07:15,240 --> 00:07:16,740
um it uses Cersei to do this which is a

218
00:07:16,740 --> 00:07:18,780
circuit compiler and then it uses the

219
00:07:18,780 --> 00:07:21,539
Spartan proof system to generate azk

220
00:07:21,539 --> 00:07:24,180
snark for the certificate

221
00:07:24,180 --> 00:07:25,979
prover can send this proof to verifier

222
00:07:25,979 --> 00:07:28,259
along with the Primal and dual Solutions

223
00:07:28,259 --> 00:07:31,259
the verifier then uses Spartan to check

224
00:07:31,259 --> 00:07:33,539
the proof and it can either accept or

225
00:07:33,539 --> 00:07:35,699
reject and if it accepts the proof it

226
00:07:35,699 --> 00:07:37,080
can be sure that the solution it has

227
00:07:37,080 --> 00:07:38,819
received is the optimal solution to the

228
00:07:38,819 --> 00:07:40,560
problem and no information has been

229
00:07:40,560 --> 00:07:42,539
leaked

230
00:07:42,539 --> 00:07:45,360
to zoom in onto the verifiers view for a

231
00:07:45,360 --> 00:07:47,340
second here's what the certificate over

232
00:07:47,340 --> 00:07:48,720
here on the far side of the slide

233
00:07:48,720 --> 00:07:50,819
actually looks like to the verifier

234
00:07:50,819 --> 00:07:52,860
the verifier gets a satisfying solution

235
00:07:52,860 --> 00:07:54,300
to the optimization problem

236
00:07:54,300 --> 00:07:55,800
in our school example this might

237
00:07:55,800 --> 00:07:57,360
represent a list of admitted students

238
00:07:57,360 --> 00:07:59,819
the Dual solution flaw is also provided

239
00:07:59,819 --> 00:08:02,699
it can be provided as a public input or

240
00:08:02,699 --> 00:08:04,259
as a private witness to the problem

241
00:08:04,259 --> 00:08:06,240
depending on your application

242
00:08:06,240 --> 00:08:07,979
the linear constraints of the problem

243
00:08:07,979 --> 00:08:10,080
ABC

244
00:08:10,080 --> 00:08:11,580
I mean our school example this is like

245
00:08:11,580 --> 00:08:12,960
the admissions criteria and like the

246
00:08:12,960 --> 00:08:14,460
students data

247
00:08:14,460 --> 00:08:16,259
um is hidden behind the commitment

248
00:08:16,259 --> 00:08:18,960
so the verify learns the structure of

249
00:08:18,960 --> 00:08:20,520
the problem but it doesn't learn any of

250
00:08:20,520 --> 00:08:22,379
the data it learns how big it is what

251
00:08:22,379 --> 00:08:24,419
the the certificate looks like but all

252
00:08:24,419 --> 00:08:27,198
the data is hidden

253
00:08:27,599 --> 00:08:30,240
so as I said before I'm not going to

254
00:08:30,240 --> 00:08:31,620
cover semi-definite programming or

255
00:08:31,620 --> 00:08:33,779
stochastic gradient descent you can see

256
00:08:33,779 --> 00:08:35,520
the paper for that but here is a quick

257
00:08:35,520 --> 00:08:38,719
view of how awesome our tool is for it

258
00:08:38,719 --> 00:08:41,940
we ran it on real world data sets also

259
00:08:41,940 --> 00:08:43,559
used to Benchmark you know semi-definite

260
00:08:43,559 --> 00:08:45,839
programming solvers Etc

261
00:08:45,839 --> 00:08:47,839
um

262
00:08:48,060 --> 00:08:49,800
sorry

263
00:08:49,800 --> 00:08:54,000
we prove full training for perceptrons

264
00:08:54,000 --> 00:08:55,680
um and semi-definite programming we

265
00:08:55,680 --> 00:08:57,240
prove stuff on topology design control

266
00:08:57,240 --> 00:08:58,980
systems engineering

267
00:08:58,980 --> 00:09:00,420
Etc

268
00:09:00,420 --> 00:09:02,540
um

269
00:09:03,180 --> 00:09:05,160
there's been previous work done on like

270
00:09:05,160 --> 00:09:07,980
inference proofs for um machine learning

271
00:09:07,980 --> 00:09:09,899
and on training of like select

272
00:09:09,899 --> 00:09:12,600
iterations but as far as I know this is

273
00:09:12,600 --> 00:09:14,399
the first time we've been able to like

274
00:09:14,399 --> 00:09:16,860
prove full training of realistic ml

275
00:09:16,860 --> 00:09:18,839
models in zero knowledge and it's only

276
00:09:18,839 --> 00:09:22,080
80 kilobytes which is pretty cool

277
00:09:22,080 --> 00:09:24,300
body has some limit has some limitations

278
00:09:24,300 --> 00:09:26,220
it has some areas for improvement we

279
00:09:26,220 --> 00:09:27,600
still have an upper size limit it's

280
00:09:27,600 --> 00:09:29,940
still hard to create proofs for very big

281
00:09:29,940 --> 00:09:31,980
optimization instances

282
00:09:31,980 --> 00:09:33,779
um I think we topped out at about 3 000

283
00:09:33,779 --> 00:09:35,640
variables for linear programming and

284
00:09:35,640 --> 00:09:37,140
stochastic gradient descent topped out

285
00:09:37,140 --> 00:09:40,320
at data sets of about 200 features

286
00:09:40,320 --> 00:09:42,600
the bottleneck is

287
00:09:42,600 --> 00:09:43,980
um

288
00:09:43,980 --> 00:09:45,839
not actually proving but it's the

289
00:09:45,839 --> 00:09:47,220
encoding of the problem is rank one

290
00:09:47,220 --> 00:09:48,959
constraints which takes a lot of time

291
00:09:48,959 --> 00:09:51,019
and memory I mean you could imagine

292
00:09:51,019 --> 00:09:53,040
Outsourcing that compilation to some

293
00:09:53,040 --> 00:09:54,660
trusted third party that will compile it

294
00:09:54,660 --> 00:09:56,459
for you ahead of time and then you'll do

295
00:09:56,459 --> 00:09:58,019
you know your proof of verifier protocol

296
00:09:58,019 --> 00:09:59,040
separately

297
00:09:59,040 --> 00:10:00,540
but there are situations you wouldn't

298
00:10:00,540 --> 00:10:02,640
want to trust a third party

299
00:10:02,640 --> 00:10:04,680
um so it's still sort of a limitation um

300
00:10:04,680 --> 00:10:05,760
problems have to have a specific

301
00:10:05,760 --> 00:10:07,980
structure like semi-definite programming

302
00:10:07,980 --> 00:10:11,279
problems need to have certain

303
00:10:11,279 --> 00:10:12,959
feasibility requirements to satisfy

304
00:10:12,959 --> 00:10:14,459
strong Duality

305
00:10:14,459 --> 00:10:15,959
um stochastic gradient descent problems

306
00:10:15,959 --> 00:10:18,240
half convergence requirements they have

307
00:10:18,240 --> 00:10:19,440
to satisfy

308
00:10:19,440 --> 00:10:21,420
and there's an overhead as compared to

309
00:10:21,420 --> 00:10:23,220
solvers that don't produce proofs

310
00:10:23,220 --> 00:10:25,860
obviously it takes longer to produce a

311
00:10:25,860 --> 00:10:30,140
proof even if the proof is small

312
00:10:30,839 --> 00:10:33,060
audio is still pretty good it uses

313
00:10:33,060 --> 00:10:34,800
non-determinism pretty aggressively and

314
00:10:34,800 --> 00:10:36,899
effectively to reduce proof sizes it

315
00:10:36,899 --> 00:10:38,399
automates away all the optimization math

316
00:10:38,399 --> 00:10:39,839
all the zero knowledge math the

317
00:10:39,839 --> 00:10:42,000
conversions between tools you have to do

318
00:10:42,000 --> 00:10:43,800
and it generates proof of optimality

319
00:10:43,800 --> 00:10:45,060
that are practical for real world

320
00:10:45,060 --> 00:10:46,560
applications and it does this much

321
00:10:46,560 --> 00:10:49,320
better than any existing approach

322
00:10:49,320 --> 00:10:51,120
all of our code and our artifact is

323
00:10:51,120 --> 00:10:53,399
available online please go look at it

324
00:10:53,399 --> 00:10:56,720
thank you guys for your time

