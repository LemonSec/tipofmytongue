1
00:00:08,119 --> 00:00:11,460
hello everyone I'm tubota from FoodLand

2
00:00:11,460 --> 00:00:13,380
University it's my great honor to

3
00:00:13,380 --> 00:00:15,540
present our work identity confusion in

4
00:00:15,540 --> 00:00:18,300
webview-based mobile app ecosystems

5
00:00:18,300 --> 00:00:19,920
this paper is a joint and work for

6
00:00:19,920 --> 00:00:22,380
researchers from FoodLand University and

7
00:00:22,380 --> 00:00:24,900
Professor engine from Johns Hopkins

8
00:00:24,900 --> 00:00:26,960
University

9
00:00:26,960 --> 00:00:30,060
nowadays mobile applications with the

10
00:00:30,060 --> 00:00:31,619
rich functions bring significant

11
00:00:31,619 --> 00:00:33,840
convenience to people's daily work and

12
00:00:33,840 --> 00:00:36,540
Life to better serve existing users and

13
00:00:36,540 --> 00:00:39,180
they keep attracting new users this

14
00:00:39,180 --> 00:00:41,280
mobile apps become super which means

15
00:00:41,280 --> 00:00:42,960
they often delegate some of their

16
00:00:42,960 --> 00:00:45,239
functions to other parties with the aim

17
00:00:45,239 --> 00:00:47,539
of enriching the content that arises

18
00:00:47,539 --> 00:00:50,100
these parties with delegated functions

19
00:00:50,100 --> 00:00:52,800
are called sub apps they behave like

20
00:00:52,800 --> 00:00:55,320
native apps and this Popular Community

21
00:00:55,320 --> 00:00:58,440
is called a mobile epineph ecosystem

22
00:00:58,440 --> 00:01:01,020
for example paytm is a popular Mobile

23
00:01:01,020 --> 00:01:04,019
payment application from India the users

24
00:01:04,019 --> 00:01:06,960
can order Domino's pizza or use by taxi

25
00:01:06,960 --> 00:01:08,880
in this super app without installing the

26
00:01:08,880 --> 00:01:11,340
mobile app versions

27
00:01:11,340 --> 00:01:14,880
so far this apping up ecosystems have

28
00:01:14,880 --> 00:01:17,640
gained a lot of popularity worldwide

29
00:01:17,640 --> 00:01:19,979
on the one hand as of the time of our

30
00:01:19,979 --> 00:01:22,860
work there are 47 high profile super

31
00:01:22,860 --> 00:01:25,860
apps with more than 46 billion downloads

32
00:01:25,860 --> 00:01:27,420
in total

33
00:01:27,420 --> 00:01:29,939
in the meantime these super apps arrange

34
00:01:29,939 --> 00:01:32,280
from communication social network and

35
00:01:32,280 --> 00:01:34,740
finance and span across different areas

36
00:01:34,740 --> 00:01:38,220
including Asia Europe and the US

37
00:01:38,220 --> 00:01:40,680
on the other hand the number of sub apps

38
00:01:40,680 --> 00:01:43,200
can be huge in these ecosystems for

39
00:01:43,200 --> 00:01:45,420
example WeChat one of the most popular

40
00:01:45,420 --> 00:01:48,140
super apps from China have has more than

41
00:01:48,140 --> 00:01:52,740
3.8 million sub apps in its Market

42
00:01:52,740 --> 00:01:55,259
now let me introduce you a standard

43
00:01:55,259 --> 00:01:57,659
programming model and the life cycle of

44
00:01:57,659 --> 00:01:59,100
the startup

45
00:01:59,100 --> 00:02:02,460
like a tiny web application sub apps are

46
00:02:02,460 --> 00:02:06,659
often writing in JavaScript HTML and CSS

47
00:02:06,659 --> 00:02:09,300
the third-party developers need to

48
00:02:09,300 --> 00:02:11,340
upload their suburb to the market on the

49
00:02:11,340 --> 00:02:13,980
bioso pad and the sub app can be found

50
00:02:13,980 --> 00:02:15,599
through the universal resource

51
00:02:15,599 --> 00:02:16,800
identifier

52
00:02:16,800 --> 00:02:19,620
the URI specifies the super app protocol

53
00:02:19,620 --> 00:02:21,900
and a sub app ID

54
00:02:21,900 --> 00:02:24,060
and the user can either search in the

55
00:02:24,060 --> 00:02:27,239
market scan a QR code or click on a deep

56
00:02:27,239 --> 00:02:30,360
link containing slash URI which will be

57
00:02:30,360 --> 00:02:32,220
handed over to the super

58
00:02:32,220 --> 00:02:34,379
lensup app can find and load the

59
00:02:34,379 --> 00:02:36,300
corresponding sub app into its webview

60
00:02:36,300 --> 00:02:37,920
instance

61
00:02:37,920 --> 00:02:40,739
additionally sub app can also load other

62
00:02:40,739 --> 00:02:43,080
web content from the other third-party

63
00:02:43,080 --> 00:02:44,400
servers

64
00:02:44,400 --> 00:02:48,120
such as advertisement or remote backup

65
00:02:48,120 --> 00:02:50,879
moreover the sub app can access some of

66
00:02:50,879 --> 00:02:53,040
the privileged apis provided by super

67
00:02:53,040 --> 00:02:56,760
app however given the existence of

68
00:02:56,760 --> 00:02:58,620
multi-party resources and access to

69
00:02:58,620 --> 00:03:01,819
privileged apis in one super app

70
00:03:01,819 --> 00:03:04,319
one crucial security research question

71
00:03:04,319 --> 00:03:06,360
is determining who can cause specific

72
00:03:06,360 --> 00:03:09,300
privilege apis this is an access control

73
00:03:09,300 --> 00:03:11,280
issue or called an identity check

74
00:03:11,280 --> 00:03:13,260
problem

75
00:03:13,260 --> 00:03:15,599
to analyze how these popular epic

76
00:03:15,599 --> 00:03:18,840
ecosystems perform identity checks we

77
00:03:18,840 --> 00:03:20,700
first need to take a deep look at the

78
00:03:20,700 --> 00:03:24,000
super app runtimes as Illustrated in

79
00:03:24,000 --> 00:03:26,280
this figure a step app provides a

80
00:03:26,280 --> 00:03:28,140
runtime for some apps with three major

81
00:03:28,140 --> 00:03:31,379
components firstly superb needs to

82
00:03:31,379 --> 00:03:33,659
provide an embedded broader instance to

83
00:03:33,659 --> 00:03:36,000
support the running of server code

84
00:03:36,000 --> 00:03:38,220
it could be customized by view in

85
00:03:38,220 --> 00:03:41,280
Android or the wkwy view in iOS

86
00:03:41,280 --> 00:03:43,860
secondly super app use the web to mobile

87
00:03:43,860 --> 00:03:46,019
bridge to enable the sub app to call

88
00:03:46,019 --> 00:03:48,659
Java functions and return the calling

89
00:03:48,659 --> 00:03:51,420
result to their JavaScript environment

90
00:03:51,420 --> 00:03:53,519
the last but not least in the Instagram

91
00:03:53,519 --> 00:03:57,599
is there a runtime apis in javaside

92
00:03:57,599 --> 00:04:00,299
in our survey study we find that 80

93
00:04:00,299 --> 00:04:02,220
percent of these runtime apis are

94
00:04:02,220 --> 00:04:04,739
privileged which can access lots of user

95
00:04:04,739 --> 00:04:07,560
data or Os resources such as accounting

96
00:04:07,560 --> 00:04:09,840
and banking info or the camera and GPS

97
00:04:09,840 --> 00:04:11,220
location

98
00:04:11,220 --> 00:04:14,040
so I was surprised however around 50

99
00:04:14,040 --> 00:04:16,500
percent of the runtime apis are not

100
00:04:16,500 --> 00:04:18,540
documented and they should not be

101
00:04:18,540 --> 00:04:22,260
exposed to third-party sub apps

102
00:04:22,260 --> 00:04:24,120
existing super apps often perform

103
00:04:24,120 --> 00:04:26,400
identity checks in three different ways

104
00:04:26,400 --> 00:04:29,460
first through a domain name as part of

105
00:04:29,460 --> 00:04:32,100
the web or region since the web content

106
00:04:32,100 --> 00:04:34,440
loaded in webview must come from a web

107
00:04:34,440 --> 00:04:37,800
server second an app ID assigned by the

108
00:04:37,800 --> 00:04:38,759
super app

109
00:04:38,759 --> 00:04:41,820
third a secret or code capability issued

110
00:04:41,820 --> 00:04:44,460
by either a super app or a server when

111
00:04:44,460 --> 00:04:46,740
the web content calls a privileged API

112
00:04:46,740 --> 00:04:49,320
with its capability it will be compelled

113
00:04:49,320 --> 00:04:50,699
by super app

114
00:04:50,699 --> 00:04:53,520
however different identities often

115
00:04:53,520 --> 00:04:56,580
coexist for a given entity as in the

116
00:04:56,580 --> 00:04:58,860
instance of webview

117
00:04:58,860 --> 00:05:01,139
well super app grants a permission to

118
00:05:01,139 --> 00:05:03,840
the intended identity we find it can be

119
00:05:03,840 --> 00:05:05,699
broader than or different from what it

120
00:05:05,699 --> 00:05:09,000
actually represents and thus against the

121
00:05:09,000 --> 00:05:11,100
least privileged principle

122
00:05:11,100 --> 00:05:13,199
in correspondence with different types

123
00:05:13,199 --> 00:05:16,380
of identity checks we find three kinds

124
00:05:16,380 --> 00:05:18,960
of identity confusions namely domain

125
00:05:18,960 --> 00:05:21,540
name confusion app ID confusion and

126
00:05:21,540 --> 00:05:23,580
capability confusion

127
00:05:23,580 --> 00:05:25,919
to exploit the identity confusion

128
00:05:25,919 --> 00:05:28,320
vulnerability and attacker can craft a

129
00:05:28,320 --> 00:05:31,139
fish link and publish it on the web

130
00:05:31,139 --> 00:05:33,539
when victim user triggers it the

131
00:05:33,539 --> 00:05:35,039
attacker can manipulate the

132
00:05:35,039 --> 00:05:36,900
corresponding sub up to load malicious

133
00:05:36,900 --> 00:05:38,100
web content

134
00:05:38,100 --> 00:05:39,960
and the Malaysia work content can

135
00:05:39,960 --> 00:05:42,600
further exploit identity confusion to

136
00:05:42,600 --> 00:05:45,780
access privileged apis for example still

137
00:05:45,780 --> 00:05:47,759
private user accounting form and send

138
00:05:47,759 --> 00:05:50,520
them to the attacker server

139
00:05:50,520 --> 00:05:52,259
due to the time limit of this

140
00:05:52,259 --> 00:05:54,300
presentation we are going to only focus

141
00:05:54,300 --> 00:05:56,580
on the first type of confusion the

142
00:05:56,580 --> 00:05:58,860
domain name confusion well super app

143
00:05:58,860 --> 00:06:00,840
performs the domain-based identity check

144
00:06:00,840 --> 00:06:03,780
is a bucketed to fetch the domain of a

145
00:06:03,780 --> 00:06:06,120
current API caller and check whether

146
00:06:06,120 --> 00:06:08,300
it's in a privileged domain white list

147
00:06:08,300 --> 00:06:11,639
as expected the malicious.com won't be

148
00:06:11,639 --> 00:06:14,100
allowed to call a privilege API however

149
00:06:14,100 --> 00:06:16,440
in a flawed identity check the

150
00:06:16,440 --> 00:06:18,900
malicious.com can borrow the identity a

151
00:06:18,900 --> 00:06:22,080
privilege.com to bypass the check and

152
00:06:22,080 --> 00:06:25,440
escalate its privilege

153
00:06:25,440 --> 00:06:27,600
specifically we classify domain name

154
00:06:27,600 --> 00:06:30,900
confusions into two types the first is a

155
00:06:30,900 --> 00:06:32,940
timing based confusion due to the risk

156
00:06:32,940 --> 00:06:34,680
condition exists between different

157
00:06:34,680 --> 00:06:37,680
slides of webview or more super app

158
00:06:37,680 --> 00:06:40,020
this figure shows a risk condition when

159
00:06:40,020 --> 00:06:42,180
super app use webview event handler on

160
00:06:42,180 --> 00:06:45,539
page started to record identity

161
00:06:45,539 --> 00:06:48,180
note that webview is a multi-thread

162
00:06:48,180 --> 00:06:51,060
component there is a renderer thread for

163
00:06:51,060 --> 00:06:53,340
rendering web content and a broader

164
00:06:53,340 --> 00:06:54,900
thread for downloading web content and

165
00:06:54,900 --> 00:06:56,639
Trigger event handlers

166
00:06:56,639 --> 00:06:58,979
when the malicious.com navigate itself

167
00:06:58,979 --> 00:07:00,840
to previous.com

168
00:07:00,840 --> 00:07:03,000
the brother thread will first trigger on

169
00:07:03,000 --> 00:07:05,039
page started and let the super app

170
00:07:05,039 --> 00:07:07,080
change the local URL record

171
00:07:07,080 --> 00:07:09,479
however when brother thread is handling

172
00:07:09,479 --> 00:07:12,300
the loading approach.com there exists a

173
00:07:12,300 --> 00:07:14,160
Time window for render thread to

174
00:07:14,160 --> 00:07:17,160
continue to execute each code

175
00:07:17,160 --> 00:07:20,039
thus malicious.com got the chance to

176
00:07:20,039 --> 00:07:23,160
invoke privileged API by the privileged

177
00:07:23,160 --> 00:07:25,580
identity

178
00:07:25,620 --> 00:07:28,620
even if the super app user real-time API

179
00:07:28,620 --> 00:07:31,259
together in identity confusion could

180
00:07:31,259 --> 00:07:32,460
still happen

181
00:07:32,460 --> 00:07:35,280
to reduce the cost of invoking runtime

182
00:07:35,280 --> 00:07:38,099
apis the super app open dispatches the

183
00:07:38,099 --> 00:07:39,599
core event to another thread

184
00:07:39,599 --> 00:07:41,520
asynchronously

185
00:07:41,520 --> 00:07:44,160
in this case a race will happen when the

186
00:07:44,160 --> 00:07:46,560
last API core event hasn't been finished

187
00:07:46,560 --> 00:07:48,660
but the web content has already

188
00:07:48,660 --> 00:07:51,840
navigated to another identity thus when

189
00:07:51,840 --> 00:07:54,599
the Checker that tried to get and check

190
00:07:54,599 --> 00:07:57,240
the identity it becomes the privileged

191
00:07:57,240 --> 00:08:00,599
one despite this API core event is

192
00:08:00,599 --> 00:08:04,220
started from malicious.com

193
00:08:04,220 --> 00:08:07,139
the second type is a frame based

194
00:08:07,139 --> 00:08:10,259
confusion it means an iframe can act on

195
00:08:10,259 --> 00:08:13,800
behalf of the top frame's identity the

196
00:08:13,800 --> 00:08:15,900
super app often relies on event handlers

197
00:08:15,900 --> 00:08:17,880
of webview component to obtain the

198
00:08:17,880 --> 00:08:20,580
identity information however we find

199
00:08:20,580 --> 00:08:22,919
most of the event handlers only return

200
00:08:22,919 --> 00:08:26,400
the top frames URL they can't be used to

201
00:08:26,400 --> 00:08:28,860
implement the identity check

202
00:08:28,860 --> 00:08:31,680
in our study we find 8 out of the 14

203
00:08:31,680 --> 00:08:34,320
event handlers are vulnerable to this

204
00:08:34,320 --> 00:08:37,620
confusion also on pages started on page

205
00:08:37,620 --> 00:08:40,380
it finished and get URL commonly used by

206
00:08:40,380 --> 00:08:43,740
existing super apps are included

207
00:08:43,740 --> 00:08:46,200
our analysis of domain name confusion is

208
00:08:46,200 --> 00:08:49,019
conducted in two steps first we use

209
00:08:49,019 --> 00:08:51,600
static analysis to determine whether the

210
00:08:51,600 --> 00:08:53,640
super app uses a vulnerable webview

211
00:08:53,640 --> 00:08:54,959
event handler

212
00:08:54,959 --> 00:08:58,019
then we write test cases and exploits to

213
00:08:58,019 --> 00:09:00,480
trigger the vulnerability we also use

214
00:09:00,480 --> 00:09:02,459
the POV to verify whether the

215
00:09:02,459 --> 00:09:05,279
vulnerability exists in the iOS version

216
00:09:05,279 --> 00:09:08,580
this figure illustrates an example to

217
00:09:08,580 --> 00:09:10,680
verify the vulnerability for on-page

218
00:09:10,680 --> 00:09:13,019
starting note that we have different

219
00:09:13,019 --> 00:09:15,120
exploit codes when the webview chromium

220
00:09:15,120 --> 00:09:18,120
version is greater than 72.

221
00:09:18,120 --> 00:09:19,920
more details about the vulnerability

222
00:09:19,920 --> 00:09:22,560
behavior in different value versions are

223
00:09:22,560 --> 00:09:24,480
in our paper

224
00:09:24,480 --> 00:09:28,019
as a result we find that all of the 47

225
00:09:28,019 --> 00:09:30,420
super apps are vulnerable to at least

226
00:09:30,420 --> 00:09:32,640
one type of identity confusion attack

227
00:09:32,640 --> 00:09:35,100
some even worse for example which hand

228
00:09:35,100 --> 00:09:36,779
suffers from all kinds of identity

229
00:09:36,779 --> 00:09:39,420
confusion and Microsoft teams suffers

230
00:09:39,420 --> 00:09:41,279
from domain name confusion and the app

231
00:09:41,279 --> 00:09:43,860
ID confusion

232
00:09:43,860 --> 00:09:46,800
once exploited by malicious attacker it

233
00:09:46,800 --> 00:09:49,500
can cause fission privacy leaks and

234
00:09:49,500 --> 00:09:51,240
privileged escalation

235
00:09:51,240 --> 00:09:54,480
we find 38 Super apps are vulnerable to

236
00:09:54,480 --> 00:09:57,300
privileged escalation 31 are vulnerable

237
00:09:57,300 --> 00:10:01,140
to vision and 35 to privacy leaks

238
00:10:01,140 --> 00:10:03,600
due to the time limit there are two

239
00:10:03,600 --> 00:10:05,279
other identity confusions and other

240
00:10:05,279 --> 00:10:07,680
interesting results and cases can't be

241
00:10:07,680 --> 00:10:10,260
covered here please refer to our papers

242
00:10:10,260 --> 00:10:14,220
for details in conclusion in this paper

243
00:10:14,220 --> 00:10:17,399
we conduct the first systematic study on

244
00:10:17,399 --> 00:10:19,980
identity confusion vulnerabilities and

245
00:10:19,980 --> 00:10:22,860
we collect and analyze 47 popular super

246
00:10:22,860 --> 00:10:26,160
apps to confirm these vulnerabilities we

247
00:10:26,160 --> 00:10:28,140
thoroughly studied the root cause and

248
00:10:28,140 --> 00:10:30,240
share light on the future design of

249
00:10:30,240 --> 00:10:32,760
epineph ecosystems

250
00:10:32,760 --> 00:10:36,500
thank you for your available time

