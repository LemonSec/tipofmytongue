1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:11,300 --> 00:00:14,700
I'm a PhD student at UC Berkeley and

3
00:00:14,700 --> 00:00:16,560
today I'm happy to be here to talk about

4
00:00:16,560 --> 00:00:19,199
our recent work on polynomial commitment

5
00:00:19,199 --> 00:00:21,300
with a one-to-man approver and

6
00:00:21,300 --> 00:00:22,500
applications

7
00:00:22,500 --> 00:00:24,600
it is a joint work with skin changes

8
00:00:24,600 --> 00:00:28,199
here is

9
00:00:29,699 --> 00:00:32,579
so first of all let's talk about the

10
00:00:32,579 --> 00:00:34,380
background on their knowledge proofs

11
00:00:34,380 --> 00:00:36,540
their knowledge proofs is a

12
00:00:36,540 --> 00:00:38,880
cryptographic tool between two parties

13
00:00:38,880 --> 00:00:41,399
the first party is approver and the

14
00:00:41,399 --> 00:00:43,739
second party is the welfare and in the

15
00:00:43,739 --> 00:00:46,200
protocol the poorer wants to convince

16
00:00:46,200 --> 00:00:49,020
the welfare of some computation or

17
00:00:49,020 --> 00:00:52,559
function C or with input X and W equals

18
00:00:52,559 --> 00:00:56,399
y here x is a public input so X is known

19
00:00:56,399 --> 00:00:59,399
to both parties W is private to the

20
00:00:59,399 --> 00:01:02,820
approver and the verifier time node w

21
00:01:02,820 --> 00:01:05,159
after seeing the output and the proof

22
00:01:05,159 --> 00:01:07,439
the verifier can be sized accept the

23
00:01:07,439 --> 00:01:09,840
statement or reject the statement

24
00:01:09,840 --> 00:01:12,479
and there are three important parties of

25
00:01:12,479 --> 00:01:14,880
their knowledge proofs the first one is

26
00:01:14,880 --> 00:01:16,979
a complaintness it means if the program

27
00:01:16,979 --> 00:01:19,200
is honest the statement is correct then

28
00:01:19,200 --> 00:01:21,900
the verifier will accept it and some is

29
00:01:21,900 --> 00:01:24,299
means if the the proverb is cheating and

30
00:01:24,299 --> 00:01:26,759
the statement is incorrect the verifier

31
00:01:26,759 --> 00:01:29,100
will reject the statement acceptable

32
00:01:29,100 --> 00:01:31,560
negligible probability and their

33
00:01:31,560 --> 00:01:33,840
knowledge means the proof don't leak any

34
00:01:33,840 --> 00:01:35,880
information about the private input of

35
00:01:35,880 --> 00:01:38,280
the proverb

36
00:01:38,280 --> 00:01:40,740
and there are many applications of their

37
00:01:40,740 --> 00:01:43,380
knowledge truths for example we can use

38
00:01:43,380 --> 00:01:44,880
zero knowledge proofs to create

39
00:01:44,880 --> 00:01:48,479
Anonymous payment on blockchain also we

40
00:01:48,479 --> 00:01:50,939
can use the zero improves to build the

41
00:01:50,939 --> 00:01:54,600
JK drop protocol or which is uh which

42
00:01:54,600 --> 00:01:57,420
which can be treated as a solution uh as

43
00:01:57,420 --> 00:01:58,979
one solution for the blockchain

44
00:01:58,979 --> 00:02:00,960
scalability

45
00:02:00,960 --> 00:02:04,740
and in most of the zkp protocols they

46
00:02:04,740 --> 00:02:07,680
just model the function C using a

47
00:02:07,680 --> 00:02:11,340
circuit so as you can see here uh the X

48
00:02:11,340 --> 00:02:13,980
and W is still the input of the circuit

49
00:02:13,980 --> 00:02:18,560
and wise output of the circuit C

50
00:02:19,200 --> 00:02:21,599
so in your traditional setting of The

51
00:02:21,599 --> 00:02:23,520
their knowledge truths there is only one

52
00:02:23,520 --> 00:02:26,520
plural and only one welfare but in our

53
00:02:26,520 --> 00:02:29,280
work we consider a new setting with one

54
00:02:29,280 --> 00:02:32,040
proper and unverfials and we call it one

55
00:02:32,040 --> 00:02:34,680
too many plural so as you can see here

56
00:02:34,680 --> 00:02:37,800
the input is still X and W and the

57
00:02:37,800 --> 00:02:40,500
circuit C Remains the Same but output y

58
00:02:40,500 --> 00:02:43,500
can be divided into n pieces and each

59
00:02:43,500 --> 00:02:47,340
welfare will only get one component of

60
00:02:47,340 --> 00:02:51,300
the output y i and the each welfare does

61
00:02:51,300 --> 00:02:55,379
no other components so that is our new

62
00:02:55,379 --> 00:02:58,080
setting and why are we interested in

63
00:02:58,080 --> 00:03:00,420
this setting because it has some

64
00:03:00,420 --> 00:03:03,420
applications for example a direct

65
00:03:03,420 --> 00:03:06,120
application of of these new settings

66
00:03:06,120 --> 00:03:09,900
verifiable security sharing so uh in the

67
00:03:09,900 --> 00:03:12,480
verifiable secret sharing scheme we have

68
00:03:12,480 --> 00:03:16,379
one plural and Welfare and approver owns

69
00:03:16,379 --> 00:03:19,459
the secret uh as key and he wants to

70
00:03:19,459 --> 00:03:22,920
share the ASCII to earn Wi-Fi so the

71
00:03:22,920 --> 00:03:25,860
unwell first can help him to keep the

72
00:03:25,860 --> 00:03:27,360
secret

73
00:03:27,360 --> 00:03:30,599
so he splits asking into emphasis and

74
00:03:30,599 --> 00:03:33,540
sends his pieces to each welfare along

75
00:03:33,540 --> 00:03:35,459
with a proof

76
00:03:35,459 --> 00:03:38,280
and then if all welfast get together

77
00:03:38,280 --> 00:03:42,120
then they can reconstruct the secret key

78
00:03:42,120 --> 00:03:44,760
here is the stressful T in the scheme

79
00:03:44,760 --> 00:03:48,659
that means any subset of verifiers with

80
00:03:48,659 --> 00:03:51,780
size at least T they can recover the

81
00:03:51,780 --> 00:03:55,799
secret key however any subset of buffers

82
00:03:55,799 --> 00:03:58,739
with size smaller than T they can learn

83
00:03:58,739 --> 00:04:01,980
nothing about the secret and with both T

84
00:04:01,980 --> 00:04:05,780
has the same order as n in general

85
00:04:06,659 --> 00:04:10,140
and VSS has also some applications in

86
00:04:10,140 --> 00:04:12,599
the real world for example it can be

87
00:04:12,599 --> 00:04:15,959
used in the MPC protocol and it can be

88
00:04:15,959 --> 00:04:18,660
used for the cryptocurrency wallet so it

89
00:04:18,660 --> 00:04:21,120
can help the user to keep their secret

90
00:04:21,120 --> 00:04:24,900
key and the VSS can also be used to

91
00:04:24,900 --> 00:04:27,720
construct distribute TK generation and

92
00:04:27,720 --> 00:04:30,680
the random Beacon

93
00:04:31,440 --> 00:04:34,320
and the classic secret sharing scheme is

94
00:04:34,320 --> 00:04:36,960
the Shamir secretary sharing so in the

95
00:04:36,960 --> 00:04:39,360
Shamir secret sharing the proverb

96
00:04:39,360 --> 00:04:41,639
encodes the secret key with the

97
00:04:41,639 --> 00:04:45,300
polynomial f as you can see here and

98
00:04:45,300 --> 00:04:48,479
then he evaluate F on different on

99
00:04:48,479 --> 00:04:52,860
different points from one qn then he

100
00:04:52,860 --> 00:04:54,740
sends all these evaluations to

101
00:04:54,740 --> 00:04:57,360
unveriferous respectively

102
00:04:57,360 --> 00:05:00,080
then the buffer can recover

103
00:05:00,080 --> 00:05:03,660
the polynomial the secret by polynomial

104
00:05:03,660 --> 00:05:06,380
interplation

105
00:05:06,840 --> 00:05:10,199
okay since uh the one who prove when too

106
00:05:10,199 --> 00:05:11,880
many Proverbs that he has some

107
00:05:11,880 --> 00:05:15,240
applications so uh we want to have like

108
00:05:15,240 --> 00:05:18,360
a new and good algorithm for this new

109
00:05:18,360 --> 00:05:21,600
setting and the naive solution is

110
00:05:21,600 --> 00:05:24,240
straightforward so in this case the

111
00:05:24,240 --> 00:05:27,120
poorer just runs the circuit and times

112
00:05:27,120 --> 00:05:30,419
uh for different for a different output

113
00:05:30,419 --> 00:05:33,300
so it will generate in different proofs

114
00:05:33,300 --> 00:05:36,000
and send all these things all these

115
00:05:36,000 --> 00:05:37,500
things to the Belfast individual

116
00:05:37,500 --> 00:05:38,940
respectively

117
00:05:38,940 --> 00:05:42,900
and then it caused the Brewer in time n

118
00:05:42,900 --> 00:05:46,440
times C because it runs the circuit by

119
00:05:46,440 --> 00:05:50,639
end times uh which is not good so we ask

120
00:05:50,639 --> 00:05:53,160
we ask a natural question can the

121
00:05:53,160 --> 00:05:56,220
proverb reduce or improves for the cost

122
00:05:56,220 --> 00:06:00,060
of only rounding circuit was

123
00:06:00,060 --> 00:06:02,280
and the answer is yes

124
00:06:02,280 --> 00:06:06,840
so in our new oxen the prayer can uh

125
00:06:06,840 --> 00:06:09,960
runs the zkb protocol on the 30C only

126
00:06:09,960 --> 00:06:13,919
once to generate uh the earned proofs in

127
00:06:13,919 --> 00:06:15,240
one shot

128
00:06:15,240 --> 00:06:18,419
so the proof uh the period time will be

129
00:06:18,419 --> 00:06:21,300
reduced to a linear in the circuit size

130
00:06:21,300 --> 00:06:24,419
which is also optimal because the plural

131
00:06:24,419 --> 00:06:27,000
at least needs to run the circuit to get

132
00:06:27,000 --> 00:06:30,539
all of the output

133
00:06:30,539 --> 00:06:33,840
and next let us move into the technical

134
00:06:33,840 --> 00:06:34,740
part

135
00:06:34,740 --> 00:06:38,880
so uh in this part we just suppose the

136
00:06:38,880 --> 00:06:42,419
circuit C is layered and you know there

137
00:06:42,419 --> 00:06:45,419
are many zkb protocols like herx Libra

138
00:06:45,419 --> 00:06:47,699
and Virgo working on the layered circuit

139
00:06:47,699 --> 00:06:51,539
and in this uh the heavy protocols uh

140
00:06:51,539 --> 00:06:53,580
the general idea is that they can reduce

141
00:06:53,580 --> 00:06:56,759
the claim about output to the claim of

142
00:06:56,759 --> 00:06:59,580
the input layer by layer

143
00:06:59,580 --> 00:07:03,000
so in the layer search model our Channel

144
00:07:03,000 --> 00:07:06,180
idea is in the first step we insert one

145
00:07:06,180 --> 00:07:08,639
extra layer on top of the output layer

146
00:07:08,639 --> 00:07:11,520
as you can see in this figure we insert

147
00:07:11,520 --> 00:07:15,419
one layer yr on top of output all of the

148
00:07:15,419 --> 00:07:18,360
output Y and you can imagine wire is

149
00:07:18,360 --> 00:07:20,880
just you know random linear combination

150
00:07:20,880 --> 00:07:23,220
of of this y

151
00:07:23,220 --> 00:07:25,979
and then the program runs and protocols

152
00:07:25,979 --> 00:07:29,960
or with an wire files and then they can

153
00:07:29,960 --> 00:07:33,300
he can reduce all of its own claims

154
00:07:33,300 --> 00:07:36,300
about different Yi to the same Claim

155
00:07:36,300 --> 00:07:39,840
about yr so the plural Aggregates and

156
00:07:39,840 --> 00:07:42,780
claims in one layer in one step and the

157
00:07:42,780 --> 00:07:46,860
prior time for this step is only a login

158
00:07:46,860 --> 00:07:49,800
and the next step and verify will share

159
00:07:49,800 --> 00:07:53,340
the same Claim about yr and then the

160
00:07:53,340 --> 00:07:56,759
prayer can run the gcare protocol uh

161
00:07:56,759 --> 00:07:59,280
sorry around the Nicky protocol to

162
00:07:59,280 --> 00:08:01,500
reduce the same claim of the y r to the

163
00:08:01,500 --> 00:08:04,259
claim of the input and all of us should

164
00:08:04,259 --> 00:08:07,680
share the same uh proof so the approver

165
00:08:07,680 --> 00:08:10,020
only needs to run the circuit once the

166
00:08:10,020 --> 00:08:11,699
cost of the proverb is linear in the

167
00:08:11,699 --> 00:08:14,759
circuit size and by combining these two

168
00:08:14,759 --> 00:08:18,060
steps uh the final period time is still

169
00:08:18,060 --> 00:08:21,000
linear in the circuit size

170
00:08:21,000 --> 00:08:23,879
and in our organs there is assumption

171
00:08:23,879 --> 00:08:27,240
that uh all welfare have the same Grand

172
00:08:27,240 --> 00:08:29,879
Miss but that is not true in the inner

173
00:08:29,879 --> 00:08:32,940
in non-interactive model so in our paper

174
00:08:32,940 --> 00:08:35,820
we also post a new virgin transformation

175
00:08:35,820 --> 00:08:39,479
to force all welfares to agree on the

176
00:08:39,479 --> 00:08:41,640
same random challenge I don't have time

177
00:08:41,640 --> 00:08:45,180
uh to talk about this uh the details but

178
00:08:45,180 --> 00:08:49,260
you can check our paper for more details

179
00:08:49,260 --> 00:08:52,019
and then we will have the new one to

180
00:08:52,019 --> 00:08:55,320
many plural algorithm we can apply our

181
00:08:55,320 --> 00:08:59,399
techniques to the uh Shamir secretary so

182
00:08:59,399 --> 00:09:02,700
you know music reassuring the input uh

183
00:09:02,700 --> 00:09:05,459
is is the encoding polynomial F which is

184
00:09:05,459 --> 00:09:09,240
private to the approver and uh wait wait

185
00:09:09,240 --> 00:09:12,060
the circuit is just the the fft circuit

186
00:09:12,060 --> 00:09:14,940
to get an evaluations

187
00:09:14,940 --> 00:09:18,600
so in this case uh our prayer time is

188
00:09:18,600 --> 00:09:22,260
only a login because the size of the fft

189
00:09:22,260 --> 00:09:24,839
circuit is unlocked but the naive

190
00:09:24,839 --> 00:09:27,540
solution is unsquare so we reduce the

191
00:09:27,540 --> 00:09:29,959
plural time from N squared to n log n

192
00:09:29,959 --> 00:09:33,779
and uh we we can we can build the VSS

193
00:09:33,779 --> 00:09:36,779
without a trusted setup if we apply the

194
00:09:36,779 --> 00:09:39,720
transparent zkp protocols like hyrax or

195
00:09:39,720 --> 00:09:42,540
Virgo on the circuit

196
00:09:42,540 --> 00:09:45,300
and that is the experimental result on

197
00:09:45,300 --> 00:09:48,300
our BSS without trusty setup and the

198
00:09:48,300 --> 00:09:50,760
black Square represents our solution and

199
00:09:50,760 --> 00:09:52,380
the blue one represent the naive

200
00:09:52,380 --> 00:09:54,899
solution so as you can see our solution

201
00:09:54,899 --> 00:09:57,120
is much much faster than the naive

202
00:09:57,120 --> 00:09:59,519
solution and the knife solution can now

203
00:09:59,519 --> 00:10:03,180
scale up to the large instances and as

204
00:10:03,180 --> 00:10:05,700
the number of parties increases the Gap

205
00:10:05,700 --> 00:10:08,540
becomes bigger

206
00:10:08,940 --> 00:10:12,300
and additionally we also have uh the

207
00:10:12,300 --> 00:10:15,600
contribution on optimal VSS scheme based

208
00:10:15,600 --> 00:10:19,860
on the kdt and kcg needs a trusted setup

209
00:10:19,860 --> 00:10:23,339
so in original VSS schemes using kdg

210
00:10:23,339 --> 00:10:26,519
commitment uh the plural computation is

211
00:10:26,519 --> 00:10:30,600
unscrewed and the proof size verify uh

212
00:10:30,600 --> 00:10:32,760
verify is constant

213
00:10:32,760 --> 00:10:36,000
and later on in the following work of uh

214
00:10:36,000 --> 00:10:39,420
in a link and their co-authors they

215
00:10:39,420 --> 00:10:41,820
improve the poor computation to unlock

216
00:10:41,820 --> 00:10:45,480
it but it brings our overhead of login

217
00:10:45,480 --> 00:10:48,779
for the proof size per verify

218
00:10:48,779 --> 00:10:52,140
and in our work we aggregate these two

219
00:10:52,140 --> 00:10:54,600
results altogether so we can have a

220
00:10:54,600 --> 00:10:57,779
optimal as a scheme based on kdg which

221
00:10:57,779 --> 00:11:00,360
has constant proof size as well as the

222
00:11:00,360 --> 00:11:02,880
end login prover computation at the same

223
00:11:02,880 --> 00:11:04,260
time

224
00:11:04,260 --> 00:11:06,660
and I don't have time to get into the

225
00:11:06,660 --> 00:11:09,240
details uh you can check the paper for

226
00:11:09,240 --> 00:11:12,120
more details and I'd mentioned here the

227
00:11:12,120 --> 00:11:13,860
same algorithm was also proposed

228
00:11:13,860 --> 00:11:16,620
independently by other researchers if

229
00:11:16,620 --> 00:11:18,120
you are interested you can check with

230
00:11:18,120 --> 00:11:21,079
the GitHub link

231
00:11:21,540 --> 00:11:24,360
and finally that is uh the summary of

232
00:11:24,360 --> 00:11:26,700
our work so in the first part we have a

233
00:11:26,700 --> 00:11:29,459
new one to many plural setting and we

234
00:11:29,459 --> 00:11:31,620
have a new new algorithm for this

235
00:11:31,620 --> 00:11:35,700
setting and apply applying uh the same

236
00:11:35,700 --> 00:11:37,800
techniques to VSS we will get the

237
00:11:37,800 --> 00:11:40,260
proverb optimal VSS scheme without

238
00:11:40,260 --> 00:11:43,440
trusty setup and on the other hand we

239
00:11:43,440 --> 00:11:46,260
also have optimal versus scheme with a

240
00:11:46,260 --> 00:11:49,079
trusty setup based on the kdg commitment

241
00:11:49,079 --> 00:11:51,959
and that's all thank you you can check

242
00:11:51,959 --> 00:11:55,019
our code via the GitHub link and I'm

243
00:11:55,019 --> 00:11:58,519
happy to take the question session

