1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:07,980 --> 00:00:10,620
okay thank you for the introduction so

3
00:00:10,620 --> 00:00:12,719
this is join work with my co-authors

4
00:00:12,719 --> 00:00:15,900
yopobos and Christine Von rendal also at

5
00:00:15,900 --> 00:00:17,039
nxb

6
00:00:17,039 --> 00:00:20,279
so let me switch gears quite a bit I'm

7
00:00:20,279 --> 00:00:22,560
gonna be talking about quantum computers

8
00:00:22,560 --> 00:00:24,779
and post Quantum cryptography

9
00:00:24,779 --> 00:00:27,240
I think by now most people will have

10
00:00:27,240 --> 00:00:29,699
seen in the news that quantum computers

11
00:00:29,699 --> 00:00:31,859
are being developed many of the large

12
00:00:31,859 --> 00:00:33,780
industry players are all trying to build

13
00:00:33,780 --> 00:00:35,540
the largest one

14
00:00:35,540 --> 00:00:38,219
they have an impact on public key

15
00:00:38,219 --> 00:00:40,680
infrastructure so if these quantum

16
00:00:40,680 --> 00:00:43,320
computers scale to be large enough to

17
00:00:43,320 --> 00:00:45,780
run algorithms like Shores algorithm or

18
00:00:45,780 --> 00:00:47,360
Rovers algorithm

19
00:00:47,360 --> 00:00:50,100
they might threaten the underlying

20
00:00:50,100 --> 00:00:51,840
mathematically hard problems like

21
00:00:51,840 --> 00:00:53,700
factoring and discrete logarithms that

22
00:00:53,700 --> 00:00:55,739
we need for the security of elliptic

23
00:00:55,739 --> 00:00:59,120
curve cryptography and RSA right so

24
00:00:59,120 --> 00:01:02,280
Academia industry governments we're all

25
00:01:02,280 --> 00:01:05,339
looking for Alternatives and these

26
00:01:05,339 --> 00:01:06,840
alternatives are typically referred to

27
00:01:06,840 --> 00:01:09,240
as post Quantum cryptography so they're

28
00:01:09,240 --> 00:01:11,220
cryptographic algorithms running on

29
00:01:11,220 --> 00:01:13,860
classical Hardware but secure even when

30
00:01:13,860 --> 00:01:15,720
an adversary is assumed to have access

31
00:01:15,720 --> 00:01:17,720
to a quantum computer

32
00:01:17,720 --> 00:01:20,159
and this has been going on for quite

33
00:01:20,159 --> 00:01:21,960
some years and we're now even at the

34
00:01:21,960 --> 00:01:24,420
stage that standardization bodies such

35
00:01:24,420 --> 00:01:27,240
as list in the U.S but also European and

36
00:01:27,240 --> 00:01:29,820
Chinese governments are getting ready to

37
00:01:29,820 --> 00:01:31,740
standardize some of these algorithms and

38
00:01:31,740 --> 00:01:34,259
so taking this as an example they just

39
00:01:34,259 --> 00:01:36,840
announced the winners of the first let's

40
00:01:36,840 --> 00:01:39,240
say final round of their competition and

41
00:01:39,240 --> 00:01:41,520
are planning to publish a standard in

42
00:01:41,520 --> 00:01:44,700
about two years or so

43
00:01:44,700 --> 00:01:46,259
okay and so

44
00:01:46,259 --> 00:01:48,299
um kind of these standardization efforts

45
00:01:48,299 --> 00:01:50,640
have an effect on systems that are out

46
00:01:50,640 --> 00:01:53,720
there in the industry that is out there

47
00:01:53,720 --> 00:01:56,579
in various application domains so

48
00:01:56,579 --> 00:01:59,720
automotive industrial iot you name it

49
00:01:59,720 --> 00:02:02,540
and these parties are starting to

50
00:02:02,540 --> 00:02:06,299
migrate from the current pki using ECC

51
00:02:06,299 --> 00:02:08,880
and RSA towards these post-quantum

52
00:02:08,880 --> 00:02:11,520
Alternatives and the question that we

53
00:02:11,520 --> 00:02:13,500
try to answer kind of on a daily basis

54
00:02:13,500 --> 00:02:16,560
would be what is the impact on all these

55
00:02:16,560 --> 00:02:19,560
systems from large to small of migrating

56
00:02:19,560 --> 00:02:22,140
towards post Quantum crypto and then of

57
00:02:22,140 --> 00:02:23,879
course the follow-up question how can we

58
00:02:23,879 --> 00:02:25,980
make this migration as smooth as

59
00:02:25,980 --> 00:02:27,840
possible

60
00:02:27,840 --> 00:02:31,080
okay and to kind of get into it let me

61
00:02:31,080 --> 00:02:33,540
take kind of a historic step of how

62
00:02:33,540 --> 00:02:36,780
would you be implementing uh pki or

63
00:02:36,780 --> 00:02:38,420
publicy crypto

64
00:02:38,420 --> 00:02:41,580
before the post Quantum era

65
00:02:41,580 --> 00:02:42,959
um and so what you might have done back

66
00:02:42,959 --> 00:02:45,480
in the day you picked your favorite CPU

67
00:02:45,480 --> 00:02:48,540
and your favorite algorithm or standard

68
00:02:48,540 --> 00:02:53,120
so you could look towards ECC so nist

69
00:02:53,120 --> 00:02:57,900
Phipps 186 or bkcs for RSA and you might

70
00:02:57,900 --> 00:02:59,340
just pick your favorite language and

71
00:02:59,340 --> 00:03:01,620
implement this on a CPU so your favorite

72
00:03:01,620 --> 00:03:03,959
language might be C and you could just

73
00:03:03,959 --> 00:03:06,300
implement this in software of course

74
00:03:06,300 --> 00:03:08,760
being a computer science or a computer

75
00:03:08,760 --> 00:03:11,099
scientist you're not happy with just any

76
00:03:11,099 --> 00:03:12,420
implementation you want your

77
00:03:12,420 --> 00:03:15,180
implementation to be very efficient and

78
00:03:15,180 --> 00:03:17,099
so you might look for the bottlenecks of

79
00:03:17,099 --> 00:03:21,000
these algorithms and hand optimize them

80
00:03:21,000 --> 00:03:23,819
with assembly routines making them much

81
00:03:23,819 --> 00:03:26,580
faster but if you're working with very

82
00:03:26,580 --> 00:03:30,540
restricted CPUs the requirements on

83
00:03:30,540 --> 00:03:33,120
performance might not be feasible with

84
00:03:33,120 --> 00:03:35,459
only software and so instead what a lot

85
00:03:35,459 --> 00:03:37,260
of these systems have done in the past

86
00:03:37,260 --> 00:03:39,180
and is there including dedicated

87
00:03:39,180 --> 00:03:41,580
hardware for these specific operations

88
00:03:41,580 --> 00:03:43,620
right so you could think about symmetric

89
00:03:43,620 --> 00:03:47,519
proprocessors for AES or sha random

90
00:03:47,519 --> 00:03:49,920
number generators and for the purpose of

91
00:03:49,920 --> 00:03:52,040
this talk most interestingly

92
00:03:52,040 --> 00:03:54,659
co-processors for speeding up elliptic

93
00:03:54,659 --> 00:03:56,879
curve crypto and RSA which would

94
00:03:56,879 --> 00:03:58,739
typically come in the form of a big

95
00:03:58,739 --> 00:04:02,760
integer multipliers and accumulators

96
00:04:02,760 --> 00:04:05,280
okay and so yeah if you look at existing

97
00:04:05,280 --> 00:04:06,959
platforms for example Automotive

98
00:04:06,959 --> 00:04:10,080
processor s32g it'll have a variety of

99
00:04:10,080 --> 00:04:11,760
these co-processors for all kinds of

100
00:04:11,760 --> 00:04:14,400
different functionalities

101
00:04:14,400 --> 00:04:16,199
okay and so this is kind of the status

102
00:04:16,199 --> 00:04:18,358
quo of the systems nowadays that were

103
00:04:18,358 --> 00:04:22,139
designed for ECC and RSA and that is how

104
00:04:22,139 --> 00:04:24,360
they decided on their co-processors and

105
00:04:24,360 --> 00:04:26,419
so now if we want to move towards

106
00:04:26,419 --> 00:04:29,580
towards post Quantum crypto are they

107
00:04:29,580 --> 00:04:31,919
still usable and the first kind of

108
00:04:31,919 --> 00:04:34,139
obvious question here is well why are we

109
00:04:34,139 --> 00:04:36,720
not just designing new hardware and of

110
00:04:36,720 --> 00:04:39,300
course we should and and we are but

111
00:04:39,300 --> 00:04:41,340
deploying Hardware takes much longer

112
00:04:41,340 --> 00:04:44,280
than deploying software and so

113
00:04:44,280 --> 00:04:46,680
in the meantime while the hardware is

114
00:04:46,680 --> 00:04:49,020
being developed and being put out there

115
00:04:49,020 --> 00:04:51,660
you still have systems which might be in

116
00:04:51,660 --> 00:04:54,180
the field for years to come which can

117
00:04:54,180 --> 00:04:56,580
only receive software updates and where

118
00:04:56,580 --> 00:04:58,560
you might still want to make the best

119
00:04:58,560 --> 00:05:00,180
use of your Hardware that you have

120
00:05:00,180 --> 00:05:02,400
available right so the question that

121
00:05:02,400 --> 00:05:04,620
we're trying to address here if we have

122
00:05:04,620 --> 00:05:07,259
these new post Quantum schemes and let's

123
00:05:07,259 --> 00:05:09,419
look at the nist standardization where a

124
00:05:09,419 --> 00:05:11,580
lot of these so-called lattice based

125
00:05:11,580 --> 00:05:14,040
schemes are chosen as winners the

126
00:05:14,040 --> 00:05:16,979
question is can they use these existing

127
00:05:16,979 --> 00:05:20,520
contemporary co-processors

128
00:05:20,520 --> 00:05:22,680
okay to answer that question you really

129
00:05:22,680 --> 00:05:24,600
have to look at what kind of operations

130
00:05:24,600 --> 00:05:27,479
are these algorithms really performing

131
00:05:27,479 --> 00:05:29,880
um so RSA and ECC are kind of similar

132
00:05:29,880 --> 00:05:33,060
and so for RSA 3000 you get a sequence

133
00:05:33,060 --> 00:05:35,460
of 3 000 bit long uh integer

134
00:05:35,460 --> 00:05:38,340
multiplications and additions possibly

135
00:05:38,340 --> 00:05:40,680
um for ECC if you get similar Behavior

136
00:05:40,680 --> 00:05:42,419
but the integer operations are much

137
00:05:42,419 --> 00:05:45,900
smaller there may be only 256 bits and

138
00:05:45,900 --> 00:05:48,660
for lattice is interestingly you don't

139
00:05:48,660 --> 00:05:50,840
have necessarily big integer operations

140
00:05:50,840 --> 00:05:53,940
rather you have polynomial operations

141
00:05:53,940 --> 00:05:56,940
um and so these often at least in the

142
00:05:56,940 --> 00:05:58,979
nist winters they consist of polynomials

143
00:05:58,979 --> 00:06:02,759
of 256 coefficients where each of the

144
00:06:02,759 --> 00:06:04,320
coefficients is actually only a very

145
00:06:04,320 --> 00:06:06,780
small integer so maybe 16 bits or 24

146
00:06:06,780 --> 00:06:11,100
bits but much smaller than 256 or even 3

147
00:06:11,100 --> 00:06:13,919
000. all right so co-processors are

148
00:06:13,919 --> 00:06:15,139
designed to

149
00:06:15,139 --> 00:06:17,580
speed up these integer multiplications

150
00:06:17,580 --> 00:06:20,400
can they be used also for polynomial

151
00:06:20,400 --> 00:06:21,960
multiplication

152
00:06:21,960 --> 00:06:24,180
and the answer is yes and the answer

153
00:06:24,180 --> 00:06:26,759
this was already answered back in 1881

154
00:06:26,759 --> 00:06:30,419
by chroniker who has an algorithm which

155
00:06:30,419 --> 00:06:33,000
is now named chronicer substitution and

156
00:06:33,000 --> 00:06:35,280
it's actually very simple and so suppose

157
00:06:35,280 --> 00:06:37,139
you have two polynomials that you want

158
00:06:37,139 --> 00:06:40,139
to multiply f and g you can simply

159
00:06:40,139 --> 00:06:42,900
evaluate both polynomials at a certain

160
00:06:42,900 --> 00:06:46,319
evaluation point this has to be large

161
00:06:46,319 --> 00:06:49,139
enough where large means relative to the

162
00:06:49,139 --> 00:06:51,060
sizes of the coefficients of the input

163
00:06:51,060 --> 00:06:54,720
polynomials so you evaluate here at the

164
00:06:54,720 --> 00:06:57,840
point 100 you mold you so you get two

165
00:06:57,840 --> 00:07:00,300
integers as a result you multiply those

166
00:07:00,300 --> 00:07:02,759
integers and now from that integer

167
00:07:02,759 --> 00:07:05,280
result you can simply read off the

168
00:07:05,280 --> 00:07:07,199
coefficients of the product polynomial

169
00:07:07,199 --> 00:07:09,539
quite easily right so we're reducing

170
00:07:09,539 --> 00:07:11,819
polynomial multiplication to integer

171
00:07:11,819 --> 00:07:13,979
multiplication plus maybe some

172
00:07:13,979 --> 00:07:15,900
evaluation step and some kind of

173
00:07:15,900 --> 00:07:19,440
interpolation Step at the end

174
00:07:19,440 --> 00:07:21,120
okay and so

175
00:07:21,120 --> 00:07:22,800
um the question now is can we do better

176
00:07:22,800 --> 00:07:25,319
and this is also not the whole story

177
00:07:25,319 --> 00:07:26,580
um so I'll just do this by way of

178
00:07:26,580 --> 00:07:30,780
example if you look at saber or kyber

179
00:07:30,780 --> 00:07:32,520
which are some of the lattice based

180
00:07:32,520 --> 00:07:35,099
proposals they work with polynomials of

181
00:07:35,099 --> 00:07:38,520
256 coefficients and as an evaluation

182
00:07:38,520 --> 00:07:40,500
point a very nice choice is something

183
00:07:40,500 --> 00:07:43,139
like 2 to the 32 which makes it very

184
00:07:43,139 --> 00:07:45,840
easy to perform polynomial evaluation on

185
00:07:45,840 --> 00:07:48,840
like a 32-bit platform right and what

186
00:07:48,840 --> 00:07:51,300
you end up with if you evaluate the 256

187
00:07:51,300 --> 00:07:53,819
coefficient polynomial at a 32-bit value

188
00:07:53,819 --> 00:07:56,819
you end up with about 8 000 bit integer

189
00:07:56,819 --> 00:08:00,240
and now if your co-processor is only 256

190
00:08:00,240 --> 00:08:02,520
bits wide you still need to break up

191
00:08:02,520 --> 00:08:04,440
this big integer into a sequence of

192
00:08:04,440 --> 00:08:06,960
small integers and then the question is

193
00:08:06,960 --> 00:08:08,759
how can we do that and what is the most

194
00:08:08,759 --> 00:08:10,500
efficient way

195
00:08:10,500 --> 00:08:11,819
um and I definitely don't have time to

196
00:08:11,819 --> 00:08:13,500
go through all of this

197
00:08:13,500 --> 00:08:14,880
um but the point I want to make is that

198
00:08:14,880 --> 00:08:16,319
there's a lot of choices you can make

199
00:08:16,319 --> 00:08:18,259
here and they all Impact efficiently

200
00:08:18,259 --> 00:08:20,940
efficiency quite differently

201
00:08:20,940 --> 00:08:23,160
um but let me just run through a couple

202
00:08:23,160 --> 00:08:24,780
um so if you're familiar with some

203
00:08:24,780 --> 00:08:27,000
multiplication algorithms you might just

204
00:08:27,000 --> 00:08:29,340
use school book multiplication which has

205
00:08:29,340 --> 00:08:31,500
a quadratic complexity and in this

206
00:08:31,500 --> 00:08:33,479
example you end up with about a thousand

207
00:08:33,479 --> 00:08:36,599
multiplications on your co-processor you

208
00:08:36,599 --> 00:08:38,399
can use techniques such as karatsuba

209
00:08:38,399 --> 00:08:40,559
recursive keratuba introduce the

210
00:08:40,559 --> 00:08:43,500
multiplications quite a bit or even cook

211
00:08:43,500 --> 00:08:45,120
methods which can reduce the number of

212
00:08:45,120 --> 00:08:47,640
multiplications even further they're

213
00:08:47,640 --> 00:08:50,120
more esoteric methods like

214
00:08:50,120 --> 00:08:54,060
which kind of mimic phosphoria or NDT a

215
00:08:54,060 --> 00:08:55,620
number of theoretic transformation type

216
00:08:55,620 --> 00:08:57,720
techniques which can reduce the number

217
00:08:57,720 --> 00:09:00,060
of multiplications even further but they

218
00:09:00,060 --> 00:09:01,680
increase the size of each of the

219
00:09:01,680 --> 00:09:03,600
multiplications so in this example it

220
00:09:03,600 --> 00:09:05,339
doesn't actually lead to a more

221
00:09:05,339 --> 00:09:07,620
efficient implementation

222
00:09:07,620 --> 00:09:09,360
um then there's news Balmer which is a

223
00:09:09,360 --> 00:09:11,040
polynomial multiplication algorithm

224
00:09:11,040 --> 00:09:13,380
which can work quite well

225
00:09:13,380 --> 00:09:15,839
um but we propose a new method which we

226
00:09:15,839 --> 00:09:17,940
call chronica plus

227
00:09:17,940 --> 00:09:20,160
um which is kind of similar to

228
00:09:20,160 --> 00:09:23,220
newsbalmer in its in its first step but

229
00:09:23,220 --> 00:09:24,959
then we combine it together with

230
00:09:24,959 --> 00:09:27,360
chroniker and together with again

231
00:09:27,360 --> 00:09:29,279
phosphorier or number theoretic

232
00:09:29,279 --> 00:09:31,980
transformation techniques to reduce the

233
00:09:31,980 --> 00:09:34,019
number of multiplications to only 32

234
00:09:34,019 --> 00:09:35,880
Which is less than any of the other

235
00:09:35,880 --> 00:09:38,519
multiplication techniques there's a big

236
00:09:38,519 --> 00:09:41,279
caveat here a big warning that just

237
00:09:41,279 --> 00:09:42,779
counting the number of multiplications

238
00:09:42,779 --> 00:09:44,459
that definitely does not tell you the

239
00:09:44,459 --> 00:09:46,500
full story there's a lot of overhead

240
00:09:46,500 --> 00:09:48,600
that should be taken into account but

241
00:09:48,600 --> 00:09:51,779
also there we compare very well to the

242
00:09:51,779 --> 00:09:54,959
other algorithms

243
00:09:54,959 --> 00:09:58,820
okay so we implemented this on a a

244
00:09:58,820 --> 00:10:02,519
proprietary nxb platform it is a risk

245
00:10:02,519 --> 00:10:05,279
five CPU and it's coupled with a

246
00:10:05,279 --> 00:10:06,600
co-processor that can perform

247
00:10:06,600 --> 00:10:10,440
multiplications up to 4000 bits and here

248
00:10:10,440 --> 00:10:12,839
we measure it in thousands of CPU cycles

249
00:10:12,839 --> 00:10:15,959
and I should note the comparison here is

250
00:10:15,959 --> 00:10:17,959
compared to a c reference implementation

251
00:10:17,959 --> 00:10:20,399
which is slightly unfair of course if

252
00:10:20,399 --> 00:10:22,680
you were to optimize as an assembly the

253
00:10:22,680 --> 00:10:25,680
a number of Cycles would go down but we

254
00:10:25,680 --> 00:10:28,019
would still be quite a bit faster and so

255
00:10:28,019 --> 00:10:29,120
here

256
00:10:29,120 --> 00:10:30,959
compared to the C reference

257
00:10:30,959 --> 00:10:32,760
implementation we measured the two

258
00:10:32,760 --> 00:10:34,860
bottleneck operations of the saber

259
00:10:34,860 --> 00:10:36,839
algorithm which is kind of a major a

260
00:10:36,839 --> 00:10:39,240
matrix Vector multiplication where each

261
00:10:39,240 --> 00:10:41,640
element is a polynomial and an inner

262
00:10:41,640 --> 00:10:43,680
product between two vectors of

263
00:10:43,680 --> 00:10:46,740
polynomials and we get a speed up of a

264
00:10:46,740 --> 00:10:49,380
factor of about 10.

265
00:10:49,380 --> 00:10:51,000
um so what happens if you look at the

266
00:10:51,000 --> 00:10:54,060
runtime of the whole algorithm you see

267
00:10:54,060 --> 00:10:56,459
that the cost of the arithmetic

268
00:10:56,459 --> 00:10:59,220
operations so polynomial operations is

269
00:10:59,220 --> 00:11:00,600
basically reduced to being almost

270
00:11:00,600 --> 00:11:03,240
negligible and the whole remainder of

271
00:11:03,240 --> 00:11:05,640
the cost is dominated in this case by

272
00:11:05,640 --> 00:11:08,779
sha3 operations

273
00:11:09,120 --> 00:11:11,779
okay so to summarize and to conclude

274
00:11:11,779 --> 00:11:15,060
post Quantum cryptography is coming even

275
00:11:15,060 --> 00:11:17,040
if we're not sure when quantum computers

276
00:11:17,040 --> 00:11:19,760
will be ready to break public e-crypto

277
00:11:19,760 --> 00:11:23,279
Quantum the migration towards post

278
00:11:23,279 --> 00:11:25,140
Quantum cryptography is already very

279
00:11:25,140 --> 00:11:28,680
much underway and so we kind of looked

280
00:11:28,680 --> 00:11:30,660
at how can we use contemporary Hardware

281
00:11:30,660 --> 00:11:32,459
to speed up these post Quantum

282
00:11:32,459 --> 00:11:34,620
algorithms and we conclude that at least

283
00:11:34,620 --> 00:11:37,079
for some of them that rely on polynomial

284
00:11:37,079 --> 00:11:39,120
multiplication you can definitely

285
00:11:39,120 --> 00:11:42,839
benefit from this existing Hardware the

286
00:11:42,839 --> 00:11:44,940
Real Performance benefit you gain really

287
00:11:44,940 --> 00:11:47,940
depends on what is your CPU what does

288
00:11:47,940 --> 00:11:49,860
your co-processor how is the

289
00:11:49,860 --> 00:11:52,320
communication arranged between them and

290
00:11:52,320 --> 00:11:55,560
so yeah if you want to do this on your

291
00:11:55,560 --> 00:11:57,839
own platform you have to take all these

292
00:11:57,839 --> 00:11:59,700
things into account

293
00:11:59,700 --> 00:12:01,680
um okay so

294
00:12:01,680 --> 00:12:03,540
um let me stop there I'm happy to take

295
00:12:03,540 --> 00:12:07,339
any questions you might have

