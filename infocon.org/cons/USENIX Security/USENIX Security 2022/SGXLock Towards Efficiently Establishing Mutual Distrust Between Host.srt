1
00:00:08,179 --> 00:00:11,400
hello everyone my name is juanchen from

2
00:00:11,400 --> 00:00:13,500
Georgian University today I'm going to

3
00:00:13,500 --> 00:00:16,139
present our paper as just log towards

4
00:00:16,139 --> 00:00:18,779
efficiently establishing majority

5
00:00:18,779 --> 00:00:20,699
trusted between host application and

6
00:00:20,699 --> 00:00:24,300
Enclave or sjs this is a joint work with

7
00:00:24,300 --> 00:00:26,760
Florida State University and City

8
00:00:26,760 --> 00:00:29,340
University of Hong Kong

9
00:00:29,340 --> 00:00:33,120
as we know SDS is a popular tea solution

10
00:00:33,120 --> 00:00:35,940
that has been used in many scenarios to

11
00:00:35,940 --> 00:00:38,880
protect the sensitive code of data such

12
00:00:38,880 --> 00:00:42,000
as blockchain finance and Healthcare

13
00:00:42,000 --> 00:00:45,500
with that yes and application will be

14
00:00:45,500 --> 00:00:48,660
divided into two components the enclave

15
00:00:48,660 --> 00:00:51,539
and the host application The Enclave is

16
00:00:51,539 --> 00:00:53,760
used to protect the sensitive code or

17
00:00:53,760 --> 00:00:54,899
data

18
00:00:54,899 --> 00:00:57,480
The Enclave is isolated from the rest of

19
00:00:57,480 --> 00:01:01,020
the system including of the operating

20
00:01:01,020 --> 00:01:03,300
system and advisor

21
00:01:03,300 --> 00:01:05,760
the host application is where the main

22
00:01:05,760 --> 00:01:08,640
program logically resides and acts as a

23
00:01:08,640 --> 00:01:11,280
proxy for The Enclave to interact with

24
00:01:11,280 --> 00:01:13,140
the outside

25
00:01:13,140 --> 00:01:16,979
in the design of edges it assumes that

26
00:01:16,979 --> 00:01:19,140
The Enclave is trusted where the host

27
00:01:19,140 --> 00:01:21,119
application is on plastic

28
00:01:21,119 --> 00:01:24,180
however in reality the enclave and the

29
00:01:24,180 --> 00:01:28,020
host application are mature untrusted

30
00:01:28,020 --> 00:01:31,080
such as third party enclaves enclaves

31
00:01:31,080 --> 00:01:32,700
with floor

32
00:01:32,700 --> 00:01:35,520
which means the Assumption of HS is

33
00:01:35,520 --> 00:01:36,920
problematic

34
00:01:36,920 --> 00:01:39,420
then we found that there is a

35
00:01:39,420 --> 00:01:41,420
problematic Assumption of edges

36
00:01:41,420 --> 00:01:44,159
introduces The Enclave host asymmetry

37
00:01:44,159 --> 00:01:45,659
issue

38
00:01:45,659 --> 00:01:48,259
there is enclavehost or symmetry if

39
00:01:48,259 --> 00:01:52,259
consists of two components the counter

40
00:01:52,259 --> 00:01:54,600
flow of symmetry and the data access or

41
00:01:54,600 --> 00:01:55,799
symmetry

42
00:01:55,799 --> 00:01:58,079
for the cameras flow of symmetry it

43
00:01:58,079 --> 00:02:00,000
means that the Enclave can jump to

44
00:02:00,000 --> 00:02:02,220
arbitrary locations of the whole Supply

45
00:02:02,220 --> 00:02:02,600
location

46
00:02:02,600 --> 00:02:04,259
[Music]

47
00:02:04,259 --> 00:02:06,899
where the false implication can only get

48
00:02:06,899 --> 00:02:10,979
into The Enclave was a pretty fine entry

49
00:02:10,979 --> 00:02:14,099
for the data of the size of symmetry it

50
00:02:14,099 --> 00:02:16,680
means that the Enclave can access the

51
00:02:16,680 --> 00:02:19,860
host applications memory region directly

52
00:02:19,860 --> 00:02:22,440
where the host application cannot access

53
00:02:22,440 --> 00:02:24,959
the enclave's memory rate because the

54
00:02:24,959 --> 00:02:29,340
Enclave is Hardware isolated by SGS

55
00:02:29,340 --> 00:02:32,940
in this work we present sjs lock the

56
00:02:32,940 --> 00:02:35,760
goal of SDS log is to eliminate The

57
00:02:35,760 --> 00:02:38,280
Enclave host of symmetry and establish

58
00:02:38,280 --> 00:02:41,040
majority structure between the enclave

59
00:02:41,040 --> 00:02:43,560
and the host application

60
00:02:43,560 --> 00:02:45,959
to eliminate the counter flow of

61
00:02:45,959 --> 00:02:48,540
symmetry we leverage a single mode to

62
00:02:48,540 --> 00:02:50,760
combine the jump Target of the

63
00:02:50,760 --> 00:02:54,000
indicative existing to the specific

64
00:02:54,000 --> 00:02:55,500
location

65
00:02:55,500 --> 00:02:58,680
to eliminate the data data access or

66
00:02:58,680 --> 00:03:00,959
symmetry we Leverage The Inter memory

67
00:03:00,959 --> 00:03:02,940
protection key technique

68
00:03:02,940 --> 00:03:04,200
to

69
00:03:04,200 --> 00:03:07,080
confine The Enclave can only access the

70
00:03:07,080 --> 00:03:10,980
limited poster applications very rich

71
00:03:10,980 --> 00:03:13,260
first let's look at the house control

72
00:03:13,260 --> 00:03:16,920
flow or symmetry elimination works

73
00:03:16,920 --> 00:03:19,340
when we read the entire software

74
00:03:19,340 --> 00:03:22,800
developer manual we fund an interesting

75
00:03:22,800 --> 00:03:24,420
feature

76
00:03:24,420 --> 00:03:27,180
it is that the single step mode with

77
00:03:27,180 --> 00:03:29,519
regards the whole execution inside of

78
00:03:29,519 --> 00:03:31,920
The Enclave as a single instruction

79
00:03:31,920 --> 00:03:35,340
really Inspire us to consider letting if

80
00:03:35,340 --> 00:03:37,920
we enables a single step mode before

81
00:03:37,920 --> 00:03:40,620
getting into the enclave

82
00:03:40,620 --> 00:03:44,519
then when the execution decides to exist

83
00:03:44,519 --> 00:03:46,140
in the enclave

84
00:03:46,140 --> 00:03:48,360
a single step exception would be

85
00:03:48,360 --> 00:03:51,540
triggered then if that gives us a chance

86
00:03:51,540 --> 00:03:54,420
to check whether the jumbo Target is

87
00:03:54,420 --> 00:03:56,220
valid

88
00:03:56,220 --> 00:03:59,400
here is the workflow first before

89
00:03:59,400 --> 00:04:01,560
entering the Enclave we enable the

90
00:04:01,560 --> 00:04:02,940
single step mode

91
00:04:02,940 --> 00:04:06,120
and then the CPU is executes in the

92
00:04:06,120 --> 00:04:07,140
enclave

93
00:04:07,140 --> 00:04:09,780
and when existing a single step

94
00:04:09,780 --> 00:04:12,599
exception is triggered

95
00:04:12,599 --> 00:04:15,679
it's simple

96
00:04:16,699 --> 00:04:19,500
next let's look at the data access or

97
00:04:19,500 --> 00:04:21,238
symmetry elimination

98
00:04:21,238 --> 00:04:25,380
it is based on inter mpk technique

99
00:04:25,380 --> 00:04:27,259
firstly in the

100
00:04:27,259 --> 00:04:30,419
initialization stage faster we would

101
00:04:30,419 --> 00:04:33,000
allocate different NPK keys for the

102
00:04:33,000 --> 00:04:34,500
enclave and the host application

103
00:04:34,500 --> 00:04:35,880
respectively

104
00:04:35,880 --> 00:04:38,340
e for the enclave and H for the host

105
00:04:38,340 --> 00:04:39,479
application

106
00:04:39,479 --> 00:04:41,759
and then we allocated our parameter

107
00:04:41,759 --> 00:04:44,160
buffer which is the part of the host

108
00:04:44,160 --> 00:04:46,979
applications memory region and we assign

109
00:04:46,979 --> 00:04:51,500
it with the enclaves APK key e

110
00:04:51,660 --> 00:04:54,780
and at the wrong time when the execution

111
00:04:54,780 --> 00:04:57,180
is in the host application

112
00:04:57,180 --> 00:05:00,419
the access permission of the CPU is set

113
00:05:00,419 --> 00:05:02,100
to e and H

114
00:05:02,100 --> 00:05:05,040
notice that even though the CPU has a

115
00:05:05,040 --> 00:05:07,800
access permission to e it cannot access

116
00:05:07,800 --> 00:05:10,860
the enclosed memory region because the

117
00:05:10,860 --> 00:05:13,919
Enclave is Hardware isolated

118
00:05:13,919 --> 00:05:17,639
and then before get getting into The

119
00:05:17,639 --> 00:05:20,520
Enclave first we would copy the input

120
00:05:20,520 --> 00:05:23,580
input to the parameter buffer and then

121
00:05:23,580 --> 00:05:27,360
we will remove H from the CPUs of access

122
00:05:27,360 --> 00:05:28,800
permission set

123
00:05:28,800 --> 00:05:31,620
and then get into The Enclave which is

124
00:05:31,620 --> 00:05:33,539
such an operation

125
00:05:33,539 --> 00:05:36,419
the the execution you set the Enclave

126
00:05:36,419 --> 00:05:39,660
would not be a lot easier to access the

127
00:05:39,660 --> 00:05:43,560
postal applications private main region

128
00:05:43,560 --> 00:05:46,440
and then after getting into getting into

129
00:05:46,440 --> 00:05:49,740
The Enclave The Enclave would load the

130
00:05:49,740 --> 00:05:52,800
input consumes it and generate the

131
00:05:52,800 --> 00:05:55,259
output and then transfers are output to

132
00:05:55,259 --> 00:05:58,199
the pairing the buffer

133
00:05:58,199 --> 00:06:02,639
and it then exists The Enclave

134
00:06:02,639 --> 00:06:05,639
after existing The Enclave first we

135
00:06:05,639 --> 00:06:08,759
would extend the cpu's access permission

136
00:06:08,759 --> 00:06:12,180
set to e and H and then we would copy

137
00:06:12,180 --> 00:06:14,580
the autopilot data from the parameter

138
00:06:14,580 --> 00:06:17,699
buffer to the also applications private

139
00:06:17,699 --> 00:06:20,580
memory region

140
00:06:20,580 --> 00:06:23,280
however there are still two challenges

141
00:06:23,280 --> 00:06:26,220
to serve so that our investment cannot

142
00:06:26,220 --> 00:06:29,940
be bypassed the first Challenger is to

143
00:06:29,940 --> 00:06:32,280
block Pio register updating inside

144
00:06:32,280 --> 00:06:34,020
design clay

145
00:06:34,020 --> 00:06:37,380
the pkio register represents the cpu's

146
00:06:37,380 --> 00:06:40,680
current access permission to NPK keys

147
00:06:40,680 --> 00:06:43,919
the Second Challenge is to present The

148
00:06:43,919 --> 00:06:46,380
Enclave from manipulating the hostess

149
00:06:46,380 --> 00:06:50,120
applications stack pointer

150
00:06:50,699 --> 00:06:53,639
here is our solution of challenges for

151
00:06:53,639 --> 00:06:54,960
Challenger 1

152
00:06:54,960 --> 00:06:57,300
there are two instructions that can be

153
00:06:57,300 --> 00:06:58,919
used to update

154
00:06:58,919 --> 00:07:02,819
the picayo register inside design plane

155
00:07:02,819 --> 00:07:05,400
actually restore instruction and the wrp

156
00:07:05,400 --> 00:07:07,319
coil instruction

157
00:07:07,319 --> 00:07:10,139
for extra restore instruction it regards

158
00:07:10,139 --> 00:07:13,080
the picayo resistor as part of the link

159
00:07:13,080 --> 00:07:16,440
processors extended state and restore it

160
00:07:16,440 --> 00:07:20,180
with data from memory

161
00:07:21,000 --> 00:07:24,660
our solution to it is kind of easy just

162
00:07:24,660 --> 00:07:26,639
to disable the data Knight of the

163
00:07:26,639 --> 00:07:32,180
enclaves SF file and field is okay

164
00:07:32,720 --> 00:07:36,120
instruction is used to update pkio

165
00:07:36,120 --> 00:07:39,300
register directly our solution to this

166
00:07:39,300 --> 00:07:41,160
is to Leverage

167
00:07:41,160 --> 00:07:44,520
binary inspection technique to avoid the

168
00:07:44,520 --> 00:07:47,160
occurrence of wipkayo instruction in

169
00:07:47,160 --> 00:07:49,680
settings and clay our binary inspection

170
00:07:49,680 --> 00:07:52,680
technique consists of two parts static

171
00:07:52,680 --> 00:07:55,979
inspection and a dynamic inspection

172
00:07:55,979 --> 00:07:58,740
statical inspection tasks for plane

173
00:07:58,740 --> 00:08:00,360
Enclave code

174
00:08:00,360 --> 00:08:03,000
if it works has Enclave Rock creation

175
00:08:03,000 --> 00:08:05,360
other sizes Enclave

176
00:08:05,360 --> 00:08:08,400
Dynamic inspection targets for dynamic

177
00:08:08,400 --> 00:08:11,280
loaded or generated Enclave code that

178
00:08:11,280 --> 00:08:13,560
works at Enclave long time and it is

179
00:08:13,560 --> 00:08:17,759
triggered by right axle execute

180
00:08:17,759 --> 00:08:19,560
permission violation

181
00:08:19,560 --> 00:08:22,620
and if the relation or small piece of

182
00:08:22,620 --> 00:08:24,720
embedded code inside of The Enclave to

183
00:08:24,720 --> 00:08:27,479
finish the inspection process

184
00:08:27,479 --> 00:08:30,259
for the Second Challenge we perform

185
00:08:30,259 --> 00:08:32,940
post-stack Integrity check based on our

186
00:08:32,940 --> 00:08:36,979
security key to serve it

187
00:08:37,200 --> 00:08:40,860
our prototype is implemented based on

188
00:08:40,860 --> 00:08:43,979
inter SDS SDK for Linux and our

189
00:08:43,979 --> 00:08:47,160
evaluation is performed on a platform

190
00:08:47,160 --> 00:08:52,219
that supports both SGS and mpk

191
00:08:52,800 --> 00:08:56,220
for maker benchmarks we evaluate real

192
00:08:56,220 --> 00:08:58,980
equal or all call latency row means

193
00:08:58,980 --> 00:09:01,080
there is no workload for the equal or

194
00:09:01,080 --> 00:09:02,160
Oak

195
00:09:02,160 --> 00:09:06,719
for example foreign immediately

196
00:09:11,760 --> 00:09:14,940
we can see that the SDS log introduces

197
00:09:14,940 --> 00:09:17,760
relatively High latency overhead for the

198
00:09:17,760 --> 00:09:20,040
first Enclave interaction

199
00:09:20,040 --> 00:09:23,399
and we needed to notice that there is no

200
00:09:23,399 --> 00:09:25,920
overhead introduced for the execution

201
00:09:25,920 --> 00:09:28,440
inside of the employees or hot sensing

202
00:09:28,440 --> 00:09:29,880
claim

203
00:09:29,880 --> 00:09:32,279
for maker benchmarks we choose three

204
00:09:32,279 --> 00:09:33,540
scenarios

205
00:09:33,540 --> 00:09:35,820
machine learning information service

206
00:09:35,820 --> 00:09:39,360
database operation and HTTP web server

207
00:09:39,360 --> 00:09:43,140
we can see Customs lock is efficient in

208
00:09:43,140 --> 00:09:45,779
these three rare water scenarios even

209
00:09:45,779 --> 00:09:48,480
though even with the highest frequency

210
00:09:48,480 --> 00:09:51,080
or cost

211
00:09:51,420 --> 00:09:54,180
next last and let's comes to the

212
00:09:54,180 --> 00:09:55,980
conclusion and the takeaway

213
00:09:55,980 --> 00:09:58,620
the first thing is that the blind Trust

214
00:09:58,620 --> 00:10:00,899
of of the host application to The

215
00:10:00,899 --> 00:10:03,779
Enclave introduces The Enclave host or

216
00:10:03,779 --> 00:10:04,800
symmetry

217
00:10:04,800 --> 00:10:07,080
the second is that in this paper we

218
00:10:07,080 --> 00:10:10,560
present SS log or defense solution to

219
00:10:10,560 --> 00:10:14,399
confine or an untrusting Clips Behavior

220
00:10:14,399 --> 00:10:17,760
and lastly our evaluation from real

221
00:10:17,760 --> 00:10:20,279
water scenarios shows the efficiency of

222
00:10:20,279 --> 00:10:23,060
SDS lock

223
00:10:24,060 --> 00:10:27,060
and as I saw thank you for listening and

224
00:10:27,060 --> 00:10:29,599
any questions

