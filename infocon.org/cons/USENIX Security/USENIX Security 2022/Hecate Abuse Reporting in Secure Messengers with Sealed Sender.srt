1
00:00:08,360 --> 00:00:11,280
all right hi everyone my name is Rowan

2
00:00:11,280 --> 00:00:13,500
Isa as he just said I just finished my

3
00:00:13,500 --> 00:00:15,660
PhD and I'll be joining galua in the

4
00:00:15,660 --> 00:00:16,320
fall

5
00:00:16,320 --> 00:00:18,060
today I'll be presenting to you some

6
00:00:18,060 --> 00:00:19,920
work I've done with Nicola Haddad my

7
00:00:19,920 --> 00:00:22,560
varia on abuse reporting and secure

8
00:00:22,560 --> 00:00:26,039
Messengers with sealed sender

9
00:00:26,039 --> 00:00:28,019
enter and encrypted measuring systems

10
00:00:28,019 --> 00:00:30,119
are used by billions of users every day

11
00:00:30,119 --> 00:00:31,500
because of the valuable security

12
00:00:31,500 --> 00:00:34,260
guarantees that they provide the rise of

13
00:00:34,260 --> 00:00:36,239
this adoption coincided with a growing

14
00:00:36,239 --> 00:00:38,280
discourse on content moderation fueled

15
00:00:38,280 --> 00:00:40,379
by the spread of misinformation fake

16
00:00:40,379 --> 00:00:43,140
news and online abuse campaigns and

17
00:00:43,140 --> 00:00:45,300
end-to-end encrypted Machining system

18
00:00:45,300 --> 00:00:47,399
in this talk we focus on a specific

19
00:00:47,399 --> 00:00:49,500
subtype of contact motivation called

20
00:00:49,500 --> 00:00:51,600
user reporting

21
00:00:51,600 --> 00:00:53,579
we investigate the apparent tension

22
00:00:53,579 --> 00:00:55,500
between user reporting as a contact

23
00:00:55,500 --> 00:00:57,960
mutation mechanism and the Privacy

24
00:00:57,960 --> 00:01:00,000
properties of end-to-end encrypted

25
00:01:00,000 --> 00:01:01,980
mastering system and answer the question

26
00:01:01,980 --> 00:01:04,619
what privacy guarantees can we maintain

27
00:01:04,619 --> 00:01:08,119
alongside user reporting

28
00:01:08,340 --> 00:01:09,900
so let's go over what the views

29
00:01:09,900 --> 00:01:11,880
reporting entails and what our desirable

30
00:01:11,880 --> 00:01:14,100
privacy properties are

31
00:01:14,100 --> 00:01:16,740
at its heart abuse reporting is a matter

32
00:01:16,740 --> 00:01:18,840
of allowing entities to trace back

33
00:01:18,840 --> 00:01:21,240
messages to their original source

34
00:01:21,240 --> 00:01:23,460
in our setting a user will send a

35
00:01:23,460 --> 00:01:25,920
message through a platform that has has

36
00:01:25,920 --> 00:01:27,960
some level of network level anonymity

37
00:01:27,960 --> 00:01:31,020
and the message will be forwarded and

38
00:01:31,020 --> 00:01:33,240
one of it's it's in one of its recipient

39
00:01:33,240 --> 00:01:35,340
may choose to report it to an entity

40
00:01:35,340 --> 00:01:37,380
that we call the moderator and that may

41
00:01:37,380 --> 00:01:39,900
be separate from the platform of the

42
00:01:39,900 --> 00:01:42,600
end-to-end encrypted messaging scheme

43
00:01:42,600 --> 00:01:45,119
accountability will only hold vis-a-vis

44
00:01:45,119 --> 00:01:47,759
moderator meaning that the moderator's

45
00:01:47,759 --> 00:01:49,920
knowledge of who sent the message is not

46
00:01:49,920 --> 00:01:52,200
transferable and the sender can always

47
00:01:52,200 --> 00:01:54,720
deny having sent the message to everyone

48
00:01:54,720 --> 00:01:56,880
other than the modulator

49
00:01:56,880 --> 00:01:59,220
without content without confidentiality

50
00:01:59,220 --> 00:02:01,560
and end-to-end encrypted messaging

51
00:02:01,560 --> 00:02:03,240
systems would be lacking and we want to

52
00:02:03,240 --> 00:02:04,560
make sure that the abuse reporting

53
00:02:04,560 --> 00:02:07,799
mechanism does not reveal to users more

54
00:02:07,799 --> 00:02:09,538
than they would know from the underlying

55
00:02:09,538 --> 00:02:10,860
messaging system

56
00:02:10,860 --> 00:02:13,200
and finally we want to introduce a

57
00:02:13,200 --> 00:02:15,180
notion of backward secrecy that will

58
00:02:15,180 --> 00:02:17,160
provide users with the same

59
00:02:17,160 --> 00:02:18,660
confidentiality and deniability

60
00:02:18,660 --> 00:02:20,819
guarantees after they've recovered from

61
00:02:20,819 --> 00:02:23,099
an attack

62
00:02:23,099 --> 00:02:24,900
before going any further let's just

63
00:02:24,900 --> 00:02:27,660
agree on what our threat model is as I

64
00:02:27,660 --> 00:02:30,180
mentioned we consider a platform that

65
00:02:30,180 --> 00:02:32,040
has some level of network anonymity so

66
00:02:32,040 --> 00:02:33,840
could it could be something like signal

67
00:02:33,840 --> 00:02:35,640
tilt sender where the sender of the

68
00:02:35,640 --> 00:02:37,140
message is hidden or it could be

69
00:02:37,140 --> 00:02:39,239
something fully Anonymous like tor

70
00:02:39,239 --> 00:02:41,819
the platform and the moderator will view

71
00:02:41,819 --> 00:02:43,739
another as semionis meaning that any

72
00:02:43,739 --> 00:02:46,019
token generated by one will be trusted

73
00:02:46,019 --> 00:02:48,300
as well generated by the other and

74
00:02:48,300 --> 00:02:50,040
otherwise all other parties will view

75
00:02:50,040 --> 00:02:51,540
another as malicious and possibly

76
00:02:51,540 --> 00:02:53,160
colluding with one another

77
00:02:53,160 --> 00:02:55,260
a malicious adversity is what you'd

78
00:02:55,260 --> 00:02:57,660
expect it to be it has access to all of

79
00:02:57,660 --> 00:03:00,180
the users material and can run arbitrary

80
00:03:00,180 --> 00:03:02,640
code on their behalf and finally we

81
00:03:02,640 --> 00:03:04,620
maintain the privacy of unreported

82
00:03:04,620 --> 00:03:06,860
messages

83
00:03:06,959 --> 00:03:09,360
now there has been a long line of

84
00:03:09,360 --> 00:03:11,459
beautiful work that have tackle that has

85
00:03:11,459 --> 00:03:13,019
tackled the problem of extending

86
00:03:13,019 --> 00:03:14,459
end-to-end encrypted messaging system

87
00:03:14,459 --> 00:03:16,739
with abuse reporting but in this short

88
00:03:16,739 --> 00:03:19,080
talk I will just be focusing on Two And

89
00:03:19,080 --> 00:03:20,879
you can find a more expensive discussion

90
00:03:20,879 --> 00:03:23,099
on them in the full paper

91
00:03:23,099 --> 00:03:25,440
so how did prior work solve this problem

92
00:03:25,440 --> 00:03:27,840
the work of tiagi ital asymmetric

93
00:03:27,840 --> 00:03:30,480
message ranking requires the sender to

94
00:03:30,480 --> 00:03:32,519
create a designated verifier signature

95
00:03:32,519 --> 00:03:35,640
intended for the moderator and prove for

96
00:03:35,640 --> 00:03:37,860
the recipient that that signature is

97
00:03:37,860 --> 00:03:40,019
well formed to the best of my knowledge

98
00:03:40,019 --> 00:03:42,180
this is the only prior work to have

99
00:03:42,180 --> 00:03:44,400
considered Network level anonymity the

100
00:03:44,400 --> 00:03:45,840
issue with this work is that it's

101
00:03:45,840 --> 00:03:49,560
practically a bit slow and it does not

102
00:03:49,560 --> 00:03:52,019
consider users who want to forward the

103
00:03:52,019 --> 00:03:53,220
message

104
00:03:53,220 --> 00:03:55,260
the work of pilotal on the other hand

105
00:03:55,260 --> 00:03:57,620
Source tracking

106
00:03:57,620 --> 00:04:00,780
asks the platform to include a token to

107
00:04:00,780 --> 00:04:02,459
every message it relays that includes

108
00:04:02,459 --> 00:04:04,200
the identity of the sender and that's

109
00:04:04,200 --> 00:04:06,480
probably bound to the body of the

110
00:04:06,480 --> 00:04:07,260
message

111
00:04:07,260 --> 00:04:09,360
now this is an extremely efficient

112
00:04:09,360 --> 00:04:11,640
construction but it requires the

113
00:04:11,640 --> 00:04:13,920
platform to have the same role as the

114
00:04:13,920 --> 00:04:16,320
moderator and to know who the center of

115
00:04:16,320 --> 00:04:19,040
the message is

116
00:04:19,139 --> 00:04:21,478
in this work our core Insight is to

117
00:04:21,478 --> 00:04:23,340
introduce a pre-processing stage where

118
00:04:23,340 --> 00:04:25,800
the moderator will appear or I construct

119
00:04:25,800 --> 00:04:28,440
a token to its future self and provide

120
00:04:28,440 --> 00:04:29,880
the receivers with the necessary

121
00:04:29,880 --> 00:04:32,040
material in order to verify the

122
00:04:32,040 --> 00:04:33,600
descender of the message did the right

123
00:04:33,600 --> 00:04:34,380
thing

124
00:04:34,380 --> 00:04:36,540
the pre-processing stage will handle the

125
00:04:36,540 --> 00:04:38,940
bulk of public key operations rendering

126
00:04:38,940 --> 00:04:42,060
the online stage much cheaper

127
00:04:42,060 --> 00:04:44,400
to sum up our contributions first we

128
00:04:44,400 --> 00:04:46,380
introduce a novel asymmetric message

129
00:04:46,380 --> 00:04:48,780
ranking scheme with pre-processing thus

130
00:04:48,780 --> 00:04:50,280
generalizing the definitions and

131
00:04:50,280 --> 00:04:52,080
guarantees of Prior work

132
00:04:52,080 --> 00:04:54,120
we expand on their security guarantees

133
00:04:54,120 --> 00:04:55,800
by also considering the Notions of

134
00:04:55,800 --> 00:04:58,139
forward and backward secrecy we then

135
00:04:58,139 --> 00:05:00,180
construct Hecate a protocol that

136
00:05:00,180 --> 00:05:02,460
achieves these security guarantees using

137
00:05:02,460 --> 00:05:05,100
only standard crypto and finally we

138
00:05:05,100 --> 00:05:07,020
build Hecate into an existing signal

139
00:05:07,020 --> 00:05:08,759
client in order to Showcase said

140
00:05:08,759 --> 00:05:11,300
efficiency

141
00:05:11,880 --> 00:05:14,040
let's start with the first attempt this

142
00:05:14,040 --> 00:05:16,560
is in no way the final Construction in

143
00:05:16,560 --> 00:05:18,419
an offline stage let's have the

144
00:05:18,419 --> 00:05:21,240
moderator create a token for users that

145
00:05:21,240 --> 00:05:22,919
will consist in an encryption of the

146
00:05:22,919 --> 00:05:25,320
identity of that user and a signature of

147
00:05:25,320 --> 00:05:28,080
that of that encryption and send that

148
00:05:28,080 --> 00:05:30,060
token or a whole batch of these tokens

149
00:05:30,060 --> 00:05:31,500
to the sender

150
00:05:31,500 --> 00:05:33,419
now when a user is ready to send a

151
00:05:33,419 --> 00:05:35,400
message they'll just append this token

152
00:05:35,400 --> 00:05:37,020
to the body of the message and

153
00:05:37,020 --> 00:05:39,060
eventually If the message gets reported

154
00:05:39,060 --> 00:05:42,060
one of the its intended recipients can

155
00:05:42,060 --> 00:05:44,460
just forward that token to the moderator

156
00:05:44,460 --> 00:05:46,259
now since the moderator created this

157
00:05:46,259 --> 00:05:47,820
token they can just Trace back the

158
00:05:47,820 --> 00:05:49,380
message by just decrypting the piece

159
00:05:49,380 --> 00:05:51,419
they had encrypted and they can verify

160
00:05:51,419 --> 00:05:53,460
that that encryption is fine by just

161
00:05:53,460 --> 00:05:56,039
checking their signature this in essence

162
00:05:56,039 --> 00:05:57,960
is very similar to Source tracking is

163
00:05:57,960 --> 00:05:59,880
except that we're staging the protocol

164
00:05:59,880 --> 00:06:02,220
and we're having the moderator take care

165
00:06:02,220 --> 00:06:05,600
of the abuse reporting pieces

166
00:06:05,639 --> 00:06:07,560
this construction however is not

167
00:06:07,560 --> 00:06:09,539
accountable because there is nothing

168
00:06:09,539 --> 00:06:11,699
binding the body of the message to the

169
00:06:11,699 --> 00:06:14,160
to the Token meaning that all an

170
00:06:14,160 --> 00:06:15,960
adversary has to do in order to avoid

171
00:06:15,960 --> 00:06:18,300
accountability altogether is to just use

172
00:06:18,300 --> 00:06:20,280
tokens from other messages in order to

173
00:06:20,280 --> 00:06:22,380
implicate other people for their own

174
00:06:22,380 --> 00:06:25,400
malicious content

175
00:06:25,560 --> 00:06:28,199
so we would Rectify this by modifying

176
00:06:28,199 --> 00:06:30,240
the offline stage we'll have the

177
00:06:30,240 --> 00:06:32,759
moderator additionally create a pair of

178
00:06:32,759 --> 00:06:34,860
ephemeral Keys the public key of which

179
00:06:34,860 --> 00:06:37,139
will be signed alongside the encryption

180
00:06:37,139 --> 00:06:39,840
of the identity of the sender

181
00:06:39,840 --> 00:06:42,060
uh this will be signed under the

182
00:06:42,060 --> 00:06:44,400
moderator's long-term key material then

183
00:06:44,400 --> 00:06:46,440
the moderator will send all of these

184
00:06:46,440 --> 00:06:49,020
tokens to the sender

185
00:06:49,020 --> 00:06:50,819
now when the sender is ready to send a

186
00:06:50,819 --> 00:06:52,919
message they will sign the encryption of

187
00:06:52,919 --> 00:06:54,539
their identity that they fed from the

188
00:06:54,539 --> 00:06:57,000
token alongside their the message that

189
00:06:57,000 --> 00:06:58,860
they want to send under their private

190
00:06:58,860 --> 00:07:00,120
familial key

191
00:07:00,120 --> 00:07:02,100
they will store that private familial

192
00:07:02,100 --> 00:07:04,199
key aside and will send everything else

193
00:07:04,199 --> 00:07:06,539
within the body of the message now if a

194
00:07:06,539 --> 00:07:07,979
recipient wants to report the message

195
00:07:07,979 --> 00:07:09,720
they'll send everything within the body

196
00:07:09,720 --> 00:07:12,660
of the message to the moderator

197
00:07:12,660 --> 00:07:14,580
all right so why does this work well

198
00:07:14,580 --> 00:07:16,259
first of all because the moderator can

199
00:07:16,259 --> 00:07:18,180
trace back the message by just

200
00:07:18,180 --> 00:07:20,340
decrypting that piece that it included

201
00:07:20,340 --> 00:07:23,520
in the token of the message

202
00:07:23,520 --> 00:07:25,680
second all of these signatures are

203
00:07:25,680 --> 00:07:27,720
verifiable by any recipient of the

204
00:07:27,720 --> 00:07:30,240
message any recipient has access to the

205
00:07:30,240 --> 00:07:31,620
public key of the moderator that's

206
00:07:31,620 --> 00:07:33,539
available to everyone and the public

207
00:07:33,539 --> 00:07:35,699
ephemeral key of the sender will be

208
00:07:35,699 --> 00:07:38,699
appended to the body of the message

209
00:07:38,699 --> 00:07:41,039
and finally the message is deconiable

210
00:07:41,039 --> 00:07:43,199
because the sender relied on these

211
00:07:43,199 --> 00:07:45,300
ephemeral Keys rather than its long-term

212
00:07:45,300 --> 00:07:47,220
key material meaning that it could

213
00:07:47,220 --> 00:07:49,259
always claim that the moderator created

214
00:07:49,259 --> 00:07:51,599
the message itself it has access to

215
00:07:51,599 --> 00:07:54,919
everything in order to do so

216
00:07:55,199 --> 00:07:58,680
great but what's missing well tokens as

217
00:07:58,680 --> 00:08:00,479
I've described them are inherently

218
00:08:00,479 --> 00:08:02,400
vulnerable to being indefinitely used in

219
00:08:02,400 --> 00:08:03,539
the system

220
00:08:03,539 --> 00:08:06,240
if a user is corrupted and the adversary

221
00:08:06,240 --> 00:08:08,819
requests tokens on their behalf then

222
00:08:08,819 --> 00:08:11,099
even after that you that poor user

223
00:08:11,099 --> 00:08:13,500
recovers the adversary can still use

224
00:08:13,500 --> 00:08:15,660
their token to indefinitely blame them

225
00:08:15,660 --> 00:08:17,280
for illicit content

226
00:08:17,280 --> 00:08:19,319
so what I'm trying to implied here is

227
00:08:19,319 --> 00:08:21,360
that backward secrecy will force us to

228
00:08:21,360 --> 00:08:24,120
introduce to introduce a notion of token

229
00:08:24,120 --> 00:08:26,099
expiration in order to meet its

230
00:08:26,099 --> 00:08:28,560
guarantees

231
00:08:28,560 --> 00:08:31,199
so in our final construction we

232
00:08:31,199 --> 00:08:33,179
introduced backwards secrecy into the

233
00:08:33,179 --> 00:08:35,279
system by having the moderator and the

234
00:08:35,279 --> 00:08:37,799
platform append timestamps to the token

235
00:08:37,799 --> 00:08:39,719
and message respectively

236
00:08:39,719 --> 00:08:41,580
the timestamp should be close to another

237
00:08:41,580 --> 00:08:43,679
meaning that if they're too further away

238
00:08:43,679 --> 00:08:45,959
from one another any honest recipient

239
00:08:45,959 --> 00:08:48,000
will just drop the message and consider

240
00:08:48,000 --> 00:08:49,260
it expired

241
00:08:49,260 --> 00:08:50,940
We additionally required these

242
00:08:50,940 --> 00:08:52,740
timestamps to be bound to the various

243
00:08:52,740 --> 00:08:54,480
parts of the message through the

244
00:08:54,480 --> 00:08:56,459
moderator's timestamp will be signed

245
00:08:56,459 --> 00:08:58,860
along other pieces of the of the token

246
00:08:58,860 --> 00:09:01,440
and the platform's timestamp will be

247
00:09:01,440 --> 00:09:03,779
signed along a commitment of the message

248
00:09:03,779 --> 00:09:06,779
and the token that the sender appends to

249
00:09:06,779 --> 00:09:08,519
the envelope of the message so next to

250
00:09:08,519 --> 00:09:10,080
the encryption of the message

251
00:09:10,080 --> 00:09:12,360
you can find the full details of the

252
00:09:12,360 --> 00:09:14,279
construction with the security analysis

253
00:09:14,279 --> 00:09:15,839
and the full version version of the

254
00:09:15,839 --> 00:09:18,000
paper

255
00:09:18,000 --> 00:09:20,940
now let's switch gears we have several

256
00:09:20,940 --> 00:09:23,040
experiments and in our first set of

257
00:09:23,040 --> 00:09:25,440
experiments we constructed Hecate as a

258
00:09:25,440 --> 00:09:28,080
rust library that we integrated into an

259
00:09:28,080 --> 00:09:30,899
existing unofficial but wildly widely

260
00:09:30,899 --> 00:09:32,760
used command line signal client called

261
00:09:32,760 --> 00:09:34,140
signal clear

262
00:09:34,140 --> 00:09:36,360
the computation overhead of using signal

263
00:09:36,360 --> 00:09:38,580
of using Hecate on the sender side

264
00:09:38,580 --> 00:09:40,500
receiver side and in the end-to-end

265
00:09:40,500 --> 00:09:43,200
pipeline is minimal and on average it's

266
00:09:43,200 --> 00:09:46,860
completed in under a millisecond

267
00:09:46,860 --> 00:09:49,200
we also measured each component of

268
00:09:49,200 --> 00:09:51,720
Hecate in isolation on an AWS T3 small

269
00:09:51,720 --> 00:09:54,240
instance and to the left we show the

270
00:09:54,240 --> 00:09:56,100
runtimes as a function of varying

271
00:09:56,100 --> 00:09:58,740
message length which and these runtimes

272
00:09:58,740 --> 00:10:01,380
are again extremely low with the largest

273
00:10:01,380 --> 00:10:03,899
component running in 250 microseconds

274
00:10:03,899 --> 00:10:06,720
for messages with 10 kilobytes and this

275
00:10:06,720 --> 00:10:08,399
particular component only happens per

276
00:10:08,399 --> 00:10:10,440
report so not per per sending or

277
00:10:10,440 --> 00:10:11,519
forwarding

278
00:10:11,519 --> 00:10:13,620
to the right we show our measurements

279
00:10:13,620 --> 00:10:15,899
for token generation and we measured

280
00:10:15,899 --> 00:10:18,120
both the runtime and the price of

281
00:10:18,120 --> 00:10:20,459
generating varying batch sizes of tokens

282
00:10:20,459 --> 00:10:23,399
on an AWS T3 small instance again

283
00:10:23,399 --> 00:10:25,440
the Iran times were again minimal

284
00:10:25,440 --> 00:10:27,480
considering that token generation can

285
00:10:27,480 --> 00:10:29,820
happen during off-peak hours and bench

286
00:10:29,820 --> 00:10:32,100
batches with 10 000 tokens were

287
00:10:32,100 --> 00:10:34,680
completed in around 600 milliseconds

288
00:10:34,680 --> 00:10:37,080
the price was also negligible and we

289
00:10:37,080 --> 00:10:39,360
extrapolated the price of generating 100

290
00:10:39,360 --> 00:10:41,700
billion tokens the rough number of

291
00:10:41,700 --> 00:10:43,440
messages sent through WhatsApp per day

292
00:10:43,440 --> 00:10:47,339
to be around 35 cents per day

293
00:10:47,339 --> 00:10:49,620
finally our overheads with respect to

294
00:10:49,620 --> 00:10:51,420
Prior works are minimal and we

295
00:10:51,420 --> 00:10:54,720
outperform the work of tiagi ital in

296
00:10:54,720 --> 00:10:57,240
every measurement we occasionally incur

297
00:10:57,240 --> 00:10:59,339
a small competition and communication

298
00:10:59,339 --> 00:11:01,320
overhead on top of the work of source

299
00:11:01,320 --> 00:11:03,420
tracking and that's just because we need

300
00:11:03,420 --> 00:11:05,700
to perform more public key operations to

301
00:11:05,700 --> 00:11:07,019
verify our additional security

302
00:11:07,019 --> 00:11:09,300
guarantees like anonymity and backwards

303
00:11:09,300 --> 00:11:11,640
secrecy

304
00:11:11,640 --> 00:11:14,399
to conclude in this work we defined a

305
00:11:14,399 --> 00:11:16,440
novel asymmetric message ranking scheme

306
00:11:16,440 --> 00:11:19,079
with pre-processing thus unifying and

307
00:11:19,079 --> 00:11:20,940
extending the security guarantees of

308
00:11:20,940 --> 00:11:23,399
Prior work we provide a construction

309
00:11:23,399 --> 00:11:25,740
called Hecate based only on standard

310
00:11:25,740 --> 00:11:28,260
crypto and finally we implemented Hecate

311
00:11:28,260 --> 00:11:30,480
on top of an existing signal client and

312
00:11:30,480 --> 00:11:31,920
showed that it's actually extremely

313
00:11:31,920 --> 00:11:33,000
efficient

314
00:11:33,000 --> 00:11:35,640
I'm happy to take question now or later

315
00:11:35,640 --> 00:11:37,860
and feel free to ping me for whatever

316
00:11:37,860 --> 00:11:40,760
reason thank you

