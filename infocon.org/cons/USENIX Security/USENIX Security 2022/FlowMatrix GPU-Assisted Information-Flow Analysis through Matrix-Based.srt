1
00:00:07,220 --> 00:00:10,320
thank you uh hi I'm Kai hanji from

2
00:00:10,320 --> 00:00:13,019
National University of Singapore so I'm

3
00:00:13,019 --> 00:00:15,299
going to present our workflow Matrix GPU

4
00:00:15,299 --> 00:00:17,100
assisted information flow analysis

5
00:00:17,100 --> 00:00:19,500
through Matrix based representation so

6
00:00:19,500 --> 00:00:22,520
this is a drone work with string uh

7
00:00:22,520 --> 00:00:24,480
in a big

8
00:00:24,480 --> 00:00:27,720
yeah thanks for the formal presenters we

9
00:00:27,720 --> 00:00:29,400
have a lot of introduction on the

10
00:00:29,400 --> 00:00:31,859
dynamic information flow tracking so

11
00:00:31,859 --> 00:00:35,040
basically uh dift sometimes known as

12
00:00:35,040 --> 00:00:37,200
Dynamic data analysis it's a very

13
00:00:37,200 --> 00:00:38,940
important program analysis technique in

14
00:00:38,940 --> 00:00:40,140
security

15
00:00:40,140 --> 00:00:42,480
so basically it tracks information flows

16
00:00:42,480 --> 00:00:43,920
in your program the things they

17
00:00:43,920 --> 00:00:46,079
transform between the sources and things

18
00:00:46,079 --> 00:00:49,140
of interest so I give an example of data

19
00:00:49,140 --> 00:00:52,320
leakage for example uh without the DFT

20
00:00:52,320 --> 00:00:54,120
technique probably you only know your

21
00:00:54,120 --> 00:00:57,239
you have a file Etc password got leak to

22
00:00:57,239 --> 00:01:00,960
external with DFT what you can do is

23
00:01:00,960 --> 00:01:03,960
basically you can mark the ETC password

24
00:01:03,960 --> 00:01:07,020
as source and mark the external IP

25
00:01:07,020 --> 00:01:09,420
address as sync then you can track the

26
00:01:09,420 --> 00:01:11,520
information flow during the program

27
00:01:11,520 --> 00:01:14,100
execution

28
00:01:14,100 --> 00:01:16,860
so it has many security applications for

29
00:01:16,860 --> 00:01:18,960
example or Mobility analysis uh

30
00:01:18,960 --> 00:01:21,900
configuration diagonals Etc

31
00:01:21,900 --> 00:01:24,060
but in the real life analysis we found

32
00:01:24,060 --> 00:01:25,979
that actually users often need to check

33
00:01:25,979 --> 00:01:27,840
multiple information flows what does

34
00:01:27,840 --> 00:01:30,119
that mean in our case the data leakage

35
00:01:30,119 --> 00:01:33,960
example uh probably you the analysis

36
00:01:33,960 --> 00:01:36,000
will ask questions like okay the key

37
00:01:36,000 --> 00:01:37,740
variable here is the past that actually

38
00:01:37,740 --> 00:01:40,439
controls which parts to believe so how

39
00:01:40,439 --> 00:01:42,119
the malicious input actually have

40
00:01:42,119 --> 00:01:44,460
control on this key variable

41
00:01:44,460 --> 00:01:47,579
and is there any other secret file that

42
00:01:47,579 --> 00:01:49,320
actually got leaks through the same

43
00:01:49,320 --> 00:01:51,840
vulnerability so all of those extra

44
00:01:51,840 --> 00:01:55,320
questions you need extra DFT analysis to

45
00:01:55,320 --> 00:01:57,720
basically uh find the answer for it so

46
00:01:57,720 --> 00:02:00,000
we found that there is a really need for

47
00:02:00,000 --> 00:02:02,579
the FD query that means you can rapidly

48
00:02:02,579 --> 00:02:05,640
uh answer the DFT result with different

49
00:02:05,640 --> 00:02:10,380
given inputs source and things

50
00:02:10,380 --> 00:02:12,800
however we know that like DFT is

51
00:02:12,800 --> 00:02:16,080
expensive so one way to support such

52
00:02:16,080 --> 00:02:18,180
kind of DFD query is basically through

53
00:02:18,180 --> 00:02:20,160
heavy computational support for example

54
00:02:20,160 --> 00:02:21,720
a server cluster

55
00:02:21,720 --> 00:02:24,660
or another way is to speed up that you

56
00:02:24,660 --> 00:02:27,300
have to yourself so let's take a look at

57
00:02:27,300 --> 00:02:30,239
how uh what are the mechanisms that can

58
00:02:30,239 --> 00:02:32,160
accelerate the DFT

59
00:02:32,160 --> 00:02:34,879
so begin from normal execution

60
00:02:34,879 --> 00:02:37,140
in the normal execution the instruction

61
00:02:37,140 --> 00:02:40,020
executed sequentially and in the

62
00:02:40,020 --> 00:02:41,700
traditional DFT people just instrument

63
00:02:41,700 --> 00:02:45,540
the inch the instruction and put 10

64
00:02:45,540 --> 00:02:47,040
propagation logic inside the

65
00:02:47,040 --> 00:02:49,500
instrumentation so one way to do to

66
00:02:49,500 --> 00:02:51,060
accelerate is called decoupling that

67
00:02:51,060 --> 00:02:53,340
will decouple the team propagation logic

68
00:02:53,340 --> 00:02:54,780
to another thread

69
00:02:54,780 --> 00:02:57,000
or you can do fast pass slow pass

70
00:02:57,000 --> 00:02:58,920
technique that basically will reduce the

71
00:02:58,920 --> 00:03:01,319
implementation for the non-interesting

72
00:03:01,319 --> 00:03:03,959
passes or another way it's called hot

73
00:03:03,959 --> 00:03:06,959
pass so this will summarize the data

74
00:03:06,959 --> 00:03:09,720
flow Logic for uh popular passes there

75
00:03:09,720 --> 00:03:11,700
are other techniques that uh basically

76
00:03:11,700 --> 00:03:14,340
so but if you take a look at the

77
00:03:14,340 --> 00:03:16,800
mechanism we have covered here basically

78
00:03:16,800 --> 00:03:20,340
they focus on the how to reduce the

79
00:03:20,340 --> 00:03:23,280
emulcation of Team propagation logic but

80
00:03:23,280 --> 00:03:25,680
not really um speeding up the

81
00:03:25,680 --> 00:03:27,959
propagation operation itself

82
00:03:27,959 --> 00:03:31,620
so why the propagation logic is hard to

83
00:03:31,620 --> 00:03:34,260
be speed up let's take a look at the

84
00:03:34,260 --> 00:03:36,480
example of implementation of different

85
00:03:36,480 --> 00:03:37,500
tools

86
00:03:37,500 --> 00:03:39,480
so basically this is the implementation

87
00:03:39,480 --> 00:03:41,879
of three different tools and they are

88
00:03:41,879 --> 00:03:43,760
all written in C and C plus plus

89
00:03:43,760 --> 00:03:45,780
basically high level programming

90
00:03:45,780 --> 00:03:49,440
languages if with if and L sorry if else

91
00:03:49,440 --> 00:03:51,239
and loops

92
00:03:51,239 --> 00:03:53,519
so such kind of representation we found

93
00:03:53,519 --> 00:03:55,379
that is quite unnecessary compact

94
00:03:55,379 --> 00:03:57,239
because you just want to do 10 you don't

95
00:03:57,239 --> 00:03:58,920
really need high level programming

96
00:03:58,920 --> 00:04:00,599
languages to do that

97
00:04:00,599 --> 00:04:02,580
and it is challenging to be

98
00:04:02,580 --> 00:04:04,860
computational speed up

99
00:04:04,860 --> 00:04:06,959
so the question will be is there a way

100
00:04:06,959 --> 00:04:09,900
that we can find a more uh like uh

101
00:04:09,900 --> 00:04:11,640
lightweight representation that can be

102
00:04:11,640 --> 00:04:14,220
easy to be seized to speed up yeah

103
00:04:14,220 --> 00:04:18,000
probably yes so uh in our previous work

104
00:04:18,000 --> 00:04:20,040
we actually find that the FD propagation

105
00:04:20,040 --> 00:04:22,860
logic is basically a data dependency so

106
00:04:22,860 --> 00:04:24,840
let's give an example of Ori instruction

107
00:04:24,840 --> 00:04:27,240
or eax edx

108
00:04:27,240 --> 00:04:29,699
so this is the data Dimension C for this

109
00:04:29,699 --> 00:04:31,800
instruction uh let's just assume that

110
00:04:31,800 --> 00:04:34,199
the CPU state has only four register for

111
00:04:34,199 --> 00:04:35,400
simplicities

112
00:04:35,400 --> 00:04:38,280
so the ex register basically what take

113
00:04:38,280 --> 00:04:40,680
the data flow from ex itself and from

114
00:04:40,680 --> 00:04:42,900
edx other register will just carry their

115
00:04:42,900 --> 00:04:45,120
data flows and if we write the

116
00:04:45,120 --> 00:04:47,400
dependency in the Boolean space it will

117
00:04:47,400 --> 00:04:50,300
look like this and if we transform the

118
00:04:50,300 --> 00:04:53,220
dependency into a little bit verbose

119
00:04:53,220 --> 00:04:55,440
form it will be look like this

120
00:04:55,440 --> 00:04:57,419
so take a look at the first Formula

121
00:04:57,419 --> 00:04:59,820
basically this is a linear equation that

122
00:04:59,820 --> 00:05:02,699
actually Maps the whole input state to

123
00:05:02,699 --> 00:05:05,639
the output state of EX register

124
00:05:05,639 --> 00:05:07,919
and if we take a look at all the

125
00:05:07,919 --> 00:05:09,960
formulas here what is this this is

126
00:05:09,960 --> 00:05:12,240
basically a system of linear equations

127
00:05:12,240 --> 00:05:15,060
that Maps the whole input state to the

128
00:05:15,060 --> 00:05:16,680
whole output stage

129
00:05:16,680 --> 00:05:18,600
thus we can conclude that we can

130
00:05:18,600 --> 00:05:21,240
identify the linearity in the ift the

131
00:05:21,240 --> 00:05:23,280
DFT operation between the input State

132
00:05:23,280 --> 00:05:25,199
and the power opposite is actually

133
00:05:25,199 --> 00:05:27,240
linear relationship

134
00:05:27,240 --> 00:05:29,400
so we all know that a system of linear

135
00:05:29,400 --> 00:05:31,860
equation you can basically represent as

136
00:05:31,860 --> 00:05:34,740
a matrix representation right so let's

137
00:05:34,740 --> 00:05:37,199
do it and you all got a formula like

138
00:05:37,199 --> 00:05:39,539
this basically the Matrix in the middle

139
00:05:39,539 --> 00:05:42,060
that is the coefficient Matrix that

140
00:05:42,060 --> 00:05:43,680
represents the dependency between the

141
00:05:43,680 --> 00:05:46,380
whole input State and the output state

142
00:05:46,380 --> 00:05:48,780
we name such kind of Matrix as flow

143
00:05:48,780 --> 00:05:51,479
Matrix which is our product name so it's

144
00:05:51,479 --> 00:05:53,520
a new Matrix based representation DFT

145
00:05:53,520 --> 00:05:56,719
propagation rule

146
00:05:56,880 --> 00:05:58,860
so we have covered the case for one

147
00:05:58,860 --> 00:06:00,539
instruction what about we are going to

148
00:06:00,539 --> 00:06:02,639
propagate for two or more instructions

149
00:06:02,639 --> 00:06:05,880
let's say we give another example so we

150
00:06:05,880 --> 00:06:08,120
have added one more instruction move ex

151
00:06:08,120 --> 00:06:12,000
edx that will move the data from edx to

152
00:06:12,000 --> 00:06:14,699
ax so let's say we have two uh

153
00:06:14,699 --> 00:06:15,960
instructions

154
00:06:15,960 --> 00:06:18,360
so yeah this is the data flow we just

155
00:06:18,360 --> 00:06:20,580
covered and this is the flow Matrix we

156
00:06:20,580 --> 00:06:22,500
have just introduced and for the second

157
00:06:22,500 --> 00:06:25,620
instruction yeah we are similarly got

158
00:06:25,620 --> 00:06:28,740
another Matrix right but due to here I'm

159
00:06:28,740 --> 00:06:30,900
writing it as a vector multiplied by

160
00:06:30,900 --> 00:06:33,720
matrix and another Matrix but due to the

161
00:06:33,720 --> 00:06:36,539
associative law that we really know okay

162
00:06:36,539 --> 00:06:38,880
the Matrix modification can be done

163
00:06:38,880 --> 00:06:41,340
first so what we can do is we compute

164
00:06:41,340 --> 00:06:43,500
the product first got the summarize

165
00:06:43,500 --> 00:06:46,979
Matrix for these two instructions

166
00:06:46,979 --> 00:06:48,780
so we can conclude that actually

167
00:06:48,780 --> 00:06:51,660
summarizing to uh DFT propagation rule

168
00:06:51,660 --> 00:06:54,419
is just to multiply two flow Matrix

169
00:06:54,419 --> 00:06:57,000
and the flow Matrix operations just

170
00:06:57,000 --> 00:06:58,860
include like Matrix Matrix modifications

171
00:06:58,860 --> 00:07:00,360
such kind of things

172
00:07:00,360 --> 00:07:02,699
so how can we actually speed up such

173
00:07:02,699 --> 00:07:05,699
kind of operations uh that for example

174
00:07:05,699 --> 00:07:08,039
The Matrix Matrix multiplication and

175
00:07:08,039 --> 00:07:10,919
natural ways like GPU right so GPU is

176
00:07:10,919 --> 00:07:13,620
such kind of device that is suitable for

177
00:07:13,620 --> 00:07:15,900
a highly parallel applications such as

178
00:07:15,900 --> 00:07:19,080
Matrix and vector computations

179
00:07:19,080 --> 00:07:21,660
so in our project flow Matrix operations

180
00:07:21,660 --> 00:07:25,440
are indeed accelerated by gpus

181
00:07:25,440 --> 00:07:27,780
now we have the Matrix representation we

182
00:07:27,780 --> 00:07:30,840
have gpus so how we are going to answer

183
00:07:30,840 --> 00:07:34,380
the DFD queries can we just like answer

184
00:07:34,380 --> 00:07:36,660
a query by propagating E3 instructions

185
00:07:36,660 --> 00:07:39,300
sequentially probably not this will make

186
00:07:39,300 --> 00:07:42,060
the query take too long time to answer

187
00:07:42,060 --> 00:07:44,340
or can we like prepare all the possible

188
00:07:44,340 --> 00:07:46,800
queries by the pre-computation probably

189
00:07:46,800 --> 00:07:49,020
also not because the pre-computation

190
00:07:49,020 --> 00:07:51,479
will take too long time right

191
00:07:51,479 --> 00:07:53,880
so the final goal here is to find a

192
00:07:53,880 --> 00:07:55,800
balance between the pre-processing cost

193
00:07:55,800 --> 00:07:59,880
and the query response time

194
00:07:59,880 --> 00:08:03,120
so uh to achieve that goal we actually

195
00:08:03,120 --> 00:08:06,419
performed offline DFD query on

196
00:08:06,419 --> 00:08:09,300
instruction execution traces that we

197
00:08:09,300 --> 00:08:11,819
build a data structure we name it as

198
00:08:11,819 --> 00:08:13,080
query tree

199
00:08:13,080 --> 00:08:15,479
and basically the leaf nodes here for

200
00:08:15,479 --> 00:08:17,759
the is the flow Matrix for single

201
00:08:17,759 --> 00:08:19,740
instructor the non-leaf nodes is

202
00:08:19,740 --> 00:08:23,280
summarized uh flow Matrix for two child

203
00:08:23,280 --> 00:08:24,780
nodes

204
00:08:24,780 --> 00:08:26,879
so the pre-processing is basically the

205
00:08:26,879 --> 00:08:28,919
tree construction it only took linear

206
00:08:28,919 --> 00:08:29,759
time

207
00:08:29,759 --> 00:08:32,520
and for the query let's say I'm going to

208
00:08:32,520 --> 00:08:35,880
carry the range Mark in red I can just

209
00:08:35,880 --> 00:08:38,940
choose the nodes from the tree and

210
00:08:38,940 --> 00:08:41,520
summarize these two nodes eventually got

211
00:08:41,520 --> 00:08:43,380
the result so it can be done in lock

212
00:08:43,380 --> 00:08:45,000
time right

213
00:08:45,000 --> 00:08:48,839
okay now we have the DFT query system uh

214
00:08:48,839 --> 00:08:51,660
but we know but we witnessed that in the

215
00:08:51,660 --> 00:08:53,940
when you actually using the DFD queries

216
00:08:53,940 --> 00:08:56,220
you sometimes will meet some cases like

217
00:08:56,220 --> 00:08:58,920
under 20 and over tending so this is

218
00:08:58,920 --> 00:09:00,779
probably due to like improper tracking

219
00:09:00,779 --> 00:09:03,899
policy uh for example if you want to

220
00:09:03,899 --> 00:09:05,459
track the dependency between the

221
00:09:05,459 --> 00:09:08,279
pointers and the wallet value or between

222
00:09:08,279 --> 00:09:10,080
the conditions and the in-branch

223
00:09:10,080 --> 00:09:11,279
variables

224
00:09:11,279 --> 00:09:14,160
so can flow Matrix that actually mutate

225
00:09:14,160 --> 00:09:17,040
such kind of tracking rules and support

226
00:09:17,040 --> 00:09:19,560
those kind of dependencies the answer is

227
00:09:19,560 --> 00:09:21,839
here yes we have two ways to do that one

228
00:09:21,839 --> 00:09:24,600
way is we can directly patch the Ft rule

229
00:09:24,600 --> 00:09:27,000
Matrix what we can do is for example I

230
00:09:27,000 --> 00:09:29,100
have a move instruction that need to

231
00:09:29,100 --> 00:09:33,480
track the pointer ebx to the uh the data

232
00:09:33,480 --> 00:09:36,380
flow to ex what we can do is we can

233
00:09:36,380 --> 00:09:39,540
modify the Matrix and change zero to one

234
00:09:39,540 --> 00:09:41,640
directly

235
00:09:41,640 --> 00:09:43,860
another way we can do that is add a

236
00:09:43,860 --> 00:09:45,720
temporal variable to bridge the

237
00:09:45,720 --> 00:09:47,580
information flow so how we are going to

238
00:09:47,580 --> 00:09:49,740
do that for example we have a zero flag

239
00:09:49,740 --> 00:09:52,019
here and I want to build the dependency

240
00:09:52,019 --> 00:09:55,019
between the zero flat and ex which is an

241
00:09:55,019 --> 00:09:56,760
in-branchial variable

242
00:09:56,760 --> 00:09:59,279
so what we can do is pass the data flow

243
00:09:59,279 --> 00:10:03,300
to a temporary variable and then to ex

244
00:10:03,300 --> 00:10:05,640
so by doing this basically you can

245
00:10:05,640 --> 00:10:07,680
Bridge the whole information flows and

246
00:10:07,680 --> 00:10:10,080
this will add one color and one row to

247
00:10:10,080 --> 00:10:11,760
the original Matrix representing the

248
00:10:11,760 --> 00:10:15,420
temp uh variable

249
00:10:15,420 --> 00:10:18,600
okay to evaluate our project we mainly

250
00:10:18,600 --> 00:10:21,180
uh evaluate to make the evaluation from

251
00:10:21,180 --> 00:10:23,580
three aspects the performance like how

252
00:10:23,580 --> 00:10:26,040
machine movement can be achieved by GPU

253
00:10:26,040 --> 00:10:28,380
assistance and how fast is the query is

254
00:10:28,380 --> 00:10:30,360
and the second is throughput because we

255
00:10:30,360 --> 00:10:32,580
are doing a query system so how many

256
00:10:32,580 --> 00:10:34,980
data flows per second we can actually uh

257
00:10:34,980 --> 00:10:37,620
cover and the last is comparison so

258
00:10:37,620 --> 00:10:40,140
compares the three of our tools uh

259
00:10:40,140 --> 00:10:43,200
what's our performance and the data set

260
00:10:43,200 --> 00:10:45,839
we're using is like 15 CVS and seven

261
00:10:45,839 --> 00:10:47,820
common applications

262
00:10:47,820 --> 00:10:49,260
so to answer the first question

263
00:10:49,260 --> 00:10:52,200
basically uh we compare with the CPU

264
00:10:52,200 --> 00:10:55,740
based dfd2s that take the same uh

265
00:10:55,740 --> 00:10:58,680
basically the same DFT propagation rules

266
00:10:58,680 --> 00:11:01,260
we can outperform them for like over

267
00:11:01,260 --> 00:11:04,140
them five times on average

268
00:11:04,140 --> 00:11:08,279
and this result like uh so when we use

269
00:11:08,279 --> 00:11:11,760
it for DFD query so in most cases

270
00:11:11,760 --> 00:11:14,339
basically we can answer an arbitrary

271
00:11:14,339 --> 00:11:16,620
query in less than half a second so it's

272
00:11:16,620 --> 00:11:19,040
super fast

273
00:11:19,380 --> 00:11:22,440
so talk about a throughput basically on

274
00:11:22,440 --> 00:11:24,720
average per second we can hold like over

275
00:11:24,720 --> 00:11:27,660
5 million uh data flows per second and

276
00:11:27,660 --> 00:11:30,060
uh what does that mean so we can compare

277
00:11:30,060 --> 00:11:33,480
with other tools so 5 million uh data

278
00:11:33,480 --> 00:11:36,180
plus per second means it's like three

279
00:11:36,180 --> 00:11:39,360
other three orders of magnitude then uh

280
00:11:39,360 --> 00:11:42,720
Liberty and this is also like achievable

281
00:11:42,720 --> 00:11:45,240
uh comparable with uh gesturing which is

282
00:11:45,240 --> 00:11:49,800
the solution uh made on a server cluster

283
00:11:49,800 --> 00:11:51,720
foreign

284
00:11:51,720 --> 00:11:55,079
to make a conclusion so in this project

285
00:11:55,079 --> 00:11:58,860
we propose a new uh Matrix based

286
00:11:58,860 --> 00:12:00,839
representation we couldn't call it flow

287
00:12:00,839 --> 00:12:04,019
Matrix and we support the GPU assisted

288
00:12:04,019 --> 00:12:07,200
DFT and finally we can build a system to

289
00:12:07,200 --> 00:12:10,920
answer the FD queries efficiently and

290
00:12:10,920 --> 00:12:14,100
yeah this end format and I'm ready to

291
00:12:14,100 --> 00:12:17,240
take questions thank you

