1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:10,519 --> 00:00:12,900
I'm Simon I'm going to present this work

3
00:00:12,900 --> 00:00:15,660
called IHOP I improve the statistical

4
00:00:15,660 --> 00:00:17,039
query recovery against searchable

5
00:00:17,039 --> 00:00:18,720
encryption through quadratic

6
00:00:18,720 --> 00:00:19,980
optimization

7
00:00:19,980 --> 00:00:22,619
this joint war with my advisor Florian

8
00:00:22,619 --> 00:00:24,720
kerstbomb and we're both at the

9
00:00:24,720 --> 00:00:26,720
University of Waterloo

10
00:00:26,720 --> 00:00:30,060
so consider a user address Alice has a

11
00:00:30,060 --> 00:00:31,800
data set in this case it's images with

12
00:00:31,800 --> 00:00:33,620
some tags some labels

13
00:00:33,620 --> 00:00:36,540
but this this data set is very heavy for

14
00:00:36,540 --> 00:00:38,399
Alice's phone so she wants to store it

15
00:00:38,399 --> 00:00:40,980
somewhere else uh there's a server that

16
00:00:40,980 --> 00:00:42,960
offers to store this data set but the

17
00:00:42,960 --> 00:00:45,120
server just wants to learn Alice's

18
00:00:45,120 --> 00:00:47,640
private information but other is very

19
00:00:47,640 --> 00:00:49,260
smart so she encrypts all of her images

20
00:00:49,260 --> 00:00:51,000
and generates this structure called

21
00:00:51,000 --> 00:00:52,920
encrypted search index

22
00:00:52,920 --> 00:00:55,440
sends this information to the server and

23
00:00:55,440 --> 00:00:57,300
then later when she wants to query for

24
00:00:57,300 --> 00:00:59,039
all of the images that have a certain

25
00:00:59,039 --> 00:01:01,559
keyword for example dog

26
00:01:01,559 --> 00:01:04,500
she can generate an encrypted token

27
00:01:04,500 --> 00:01:06,840
query token send it to the adversary the

28
00:01:06,840 --> 00:01:10,200
adversary evaluates the encrypted token

29
00:01:10,200 --> 00:01:11,880
in encrypted search index and this

30
00:01:11,880 --> 00:01:13,680
reveals the access pattern the access

31
00:01:13,680 --> 00:01:15,360
pattern is basically a binary Vector

32
00:01:15,360 --> 00:01:17,159
telling you the positions of the

33
00:01:17,159 --> 00:01:19,500
documents that match this query so in

34
00:01:19,500 --> 00:01:21,659
this case it matches three documents so

35
00:01:21,659 --> 00:01:23,159
the other side simply returns these

36
00:01:23,159 --> 00:01:25,439
documents to Alice who decrypts them so

37
00:01:25,439 --> 00:01:27,900
this preserves a lot of

38
00:01:27,900 --> 00:01:29,520
this protects a lot of information from

39
00:01:29,520 --> 00:01:31,380
Alice's data set but it leaks the access

40
00:01:31,380 --> 00:01:33,299
pattern and that this can lead to query

41
00:01:33,299 --> 00:01:35,280
recovery attacks where the adversary

42
00:01:35,280 --> 00:01:37,200
wants to guess the underlying keyword of

43
00:01:37,200 --> 00:01:38,640
Alice's queries

44
00:01:38,640 --> 00:01:40,619
so in this world we consider what are

45
00:01:40,619 --> 00:01:42,840
called statistical query recovery

46
00:01:42,840 --> 00:01:45,299
attacks so the adversary has access to

47
00:01:45,299 --> 00:01:47,280
some auxiliary information this is

48
00:01:47,280 --> 00:01:49,079
another data set which is statistically

49
00:01:49,079 --> 00:01:51,360
similar to Alice's data set but it's

50
00:01:51,360 --> 00:01:54,060
disjoint is a different data set and

51
00:01:54,060 --> 00:01:56,159
also they observe the Aussies queries so

52
00:01:56,159 --> 00:01:58,380
the access patterns from the auxiliary

53
00:01:58,380 --> 00:01:59,820
information they can compute what is

54
00:01:59,820 --> 00:02:01,979
called the volume concurrence Matrix

55
00:02:01,979 --> 00:02:04,920
here in the diagonal terms we have how

56
00:02:04,920 --> 00:02:09,000
popular a keyword is in the adversaries

57
00:02:09,000 --> 00:02:10,739
data set so for example here dog and cat

58
00:02:10,739 --> 00:02:13,260
are very popular keywords I'm using

59
00:02:13,260 --> 00:02:14,760
colors instead of numbers just for

60
00:02:14,760 --> 00:02:17,220
Simplicity and the off diagonal terms

61
00:02:17,220 --> 00:02:19,560
here they represent

62
00:02:19,560 --> 00:02:22,140
um how many documents have both two

63
00:02:22,140 --> 00:02:24,540
keywords in common so at the same time

64
00:02:24,540 --> 00:02:26,700
sorry so for example in this case most

65
00:02:26,700 --> 00:02:29,040
of the images with box also have Cuts in

66
00:02:29,040 --> 00:02:29,840
them

67
00:02:29,840 --> 00:02:32,400
the adversary can compute a similar

68
00:02:32,400 --> 00:02:33,959
co-occurrence Matrix with the axis

69
00:02:33,959 --> 00:02:37,260
pattern just doing like dot products so

70
00:02:37,260 --> 00:02:40,200
they compute how how many documents each

71
00:02:40,200 --> 00:02:42,720
query returns and how many documents two

72
00:02:42,720 --> 00:02:45,239
queries have in common so the idea of

73
00:02:45,239 --> 00:02:47,280
the attack is to take these two matrices

74
00:02:47,280 --> 00:02:49,920
and try to find which keywords

75
00:02:49,920 --> 00:02:54,018
correspond to which query tokens

76
00:02:54,060 --> 00:02:55,980
um so in the paper we explained that we

77
00:02:55,980 --> 00:02:57,660
can formulate this query recovery

78
00:02:57,660 --> 00:02:59,580
problem generally as a quadratic

79
00:02:59,580 --> 00:03:01,500
assignment problem so we have here the

80
00:03:01,500 --> 00:03:02,760
Matrix with the auxiliary information

81
00:03:02,760 --> 00:03:05,340
and the Matrix of the observations the

82
00:03:05,340 --> 00:03:08,459
assignment of uh queries to keywords can

83
00:03:08,459 --> 00:03:10,319
be represented as a permutation Matrix

84
00:03:10,319 --> 00:03:11,400
like this

85
00:03:11,400 --> 00:03:14,459
and the idea is that if we multiply this

86
00:03:14,459 --> 00:03:16,260
auxiliary information Matrix left and

87
00:03:16,260 --> 00:03:18,780
right by this permutation Matrix and

88
00:03:18,780 --> 00:03:20,640
this permutation Matrix is the right one

89
00:03:20,640 --> 00:03:22,860
that is matching the actual queries to

90
00:03:22,860 --> 00:03:25,800
the keywords these two matrices will be

91
00:03:25,800 --> 00:03:28,500
kind of similar if the Azure information

92
00:03:28,500 --> 00:03:30,120
is statistically

93
00:03:30,120 --> 00:03:32,879
similar to analysis data set so for

94
00:03:32,879 --> 00:03:34,260
example we could we could formulate an

95
00:03:34,260 --> 00:03:35,640
attack as let's find the permutation

96
00:03:35,640 --> 00:03:38,640
Matrix P that minimizes the the L2

97
00:03:38,640 --> 00:03:40,860
distance between this Matrix here on the

98
00:03:40,860 --> 00:03:43,980
left and this Matrix in the middle

99
00:03:43,980 --> 00:03:44,640
um

100
00:03:44,640 --> 00:03:46,500
a general formulation of this problem

101
00:03:46,500 --> 00:03:48,599
not for the L2 Norm but for any Norm

102
00:03:48,599 --> 00:03:50,519
looks like this and this is called the

103
00:03:50,519 --> 00:03:52,019
quadratic assignment problem and this is

104
00:03:52,019 --> 00:03:55,799
known to be MP hard past query recovery

105
00:03:55,799 --> 00:03:57,299
attacks statistical query recovery

106
00:03:57,299 --> 00:03:59,459
attacks are particular cases of this

107
00:03:59,459 --> 00:04:02,340
problem and they use a suboptimal or

108
00:04:02,340 --> 00:04:04,440
like heuristic algorithms to reach a

109
00:04:04,440 --> 00:04:06,360
solution

110
00:04:06,360 --> 00:04:07,680
um another way of solving this problem

111
00:04:07,680 --> 00:04:09,780
which is also sub-optimal is to say

112
00:04:09,780 --> 00:04:12,239
Let's ignore all the off-diagonal terms

113
00:04:12,239 --> 00:04:14,220
because this is too complicated

114
00:04:14,220 --> 00:04:16,560
and let's just match the keywords and

115
00:04:16,560 --> 00:04:19,560
the queries using the the diagonal terms

116
00:04:19,560 --> 00:04:21,418
so here I'm writing the diagonal terms

117
00:04:21,418 --> 00:04:23,520
with the numbers and here as well and

118
00:04:23,520 --> 00:04:25,680
for example let's say we want to

119
00:04:25,680 --> 00:04:27,600
minimize the the

120
00:04:27,600 --> 00:04:29,280
simply the absolute difference between

121
00:04:29,280 --> 00:04:31,979
them so this Matrix here in white is the

122
00:04:31,979 --> 00:04:33,300
absolute difference between each row

123
00:04:33,300 --> 00:04:35,340
each column so we can run an algorithm

124
00:04:35,340 --> 00:04:37,380
called the Hungarian algorithm that here

125
00:04:37,380 --> 00:04:40,340
for each row it picks a column such that

126
00:04:40,340 --> 00:04:43,440
the sum of these numbers is minimized

127
00:04:43,440 --> 00:04:45,540
and this gives us a permutation but we

128
00:04:45,540 --> 00:04:47,759
can see that here we're assigning uh to

129
00:04:47,759 --> 00:04:49,800
the when Alice were supported for cat

130
00:04:49,800 --> 00:04:52,020
we're assigning that the keyword dog

131
00:04:52,020 --> 00:04:54,000
because cat and dog have a very similar

132
00:04:54,000 --> 00:04:55,919
volume in the data set so they're very

133
00:04:55,919 --> 00:04:57,780
easy it's very hard for the attacker to

134
00:04:57,780 --> 00:04:59,699
tell them apart

135
00:04:59,699 --> 00:05:01,560
um the general formulation of this

136
00:05:01,560 --> 00:05:04,680
problem is like this this linear

137
00:05:04,680 --> 00:05:06,180
assignment problem is very efficient to

138
00:05:06,180 --> 00:05:08,280
solve it this is the computational cost

139
00:05:08,280 --> 00:05:10,740
with where n is the total number of

140
00:05:10,740 --> 00:05:13,320
keywords and M is the total number of

141
00:05:13,320 --> 00:05:16,500
distinct queries that Alice sent and

142
00:05:16,500 --> 00:05:18,900
this is a work we presented in in usinex

143
00:05:18,900 --> 00:05:21,120
last year a query recovery attack that

144
00:05:21,120 --> 00:05:23,460
was a linear assignment problem but as I

145
00:05:23,460 --> 00:05:24,539
said there's a lot of wasted information

146
00:05:24,539 --> 00:05:26,280
because we're not using the off diagonal

147
00:05:26,280 --> 00:05:28,080
terms here

148
00:05:28,080 --> 00:05:30,180
um so what we propose now is an attack

149
00:05:30,180 --> 00:05:33,120
that does use the off diagonal terms

150
00:05:33,120 --> 00:05:35,580
and it's also kind of efficient and very

151
00:05:35,580 --> 00:05:37,740
heuristic so we don't have a guarantee

152
00:05:37,740 --> 00:05:39,360
that this is I mean there's no optimal

153
00:05:39,360 --> 00:05:41,340
solution because this is MP hard right

154
00:05:41,340 --> 00:05:43,199
so we start with a full assignment so we

155
00:05:43,199 --> 00:05:44,940
start for example running the attack in

156
00:05:44,940 --> 00:05:47,280
the previous slide and then we freeze

157
00:05:47,280 --> 00:05:49,020
some of these assignments at random so

158
00:05:49,020 --> 00:05:51,479
in this case we we choose a run on this

159
00:05:51,479 --> 00:05:55,320
assignment here box to the query box

160
00:05:55,320 --> 00:05:57,600
and we've reset so I represent it here

161
00:05:57,600 --> 00:05:59,940
in blue in the matrices and then what we

162
00:05:59,940 --> 00:06:02,100
do is we solve a linear assignment

163
00:06:02,100 --> 00:06:03,539
problem so the problem in the previous

164
00:06:03,539 --> 00:06:06,180
slide for the remaining keywords and

165
00:06:06,180 --> 00:06:08,460
queries so we ignore the off diagonal

166
00:06:08,460 --> 00:06:09,419
terms

167
00:06:09,419 --> 00:06:11,880
we write the diagonal terms here and

168
00:06:11,880 --> 00:06:14,840
here but now we assume that the Frozen

169
00:06:14,840 --> 00:06:18,180
assignments the one in blue that's like

170
00:06:18,180 --> 00:06:20,820
true information so we can also put this

171
00:06:20,820 --> 00:06:22,560
information here when we compute this

172
00:06:22,560 --> 00:06:24,539
distance Matrix and in this case for

173
00:06:24,539 --> 00:06:28,139
example we see the 0.2 in blue here

174
00:06:28,139 --> 00:06:31,199
um because uh the keyword cat and box

175
00:06:31,199 --> 00:06:33,539
they have many images in common and we

176
00:06:33,539 --> 00:06:35,460
see also the 0.2 here

177
00:06:35,460 --> 00:06:37,560
for the queries so it makes sense to

178
00:06:37,560 --> 00:06:40,199
match this this this keyword to this to

179
00:06:40,199 --> 00:06:41,699
this query

180
00:06:41,699 --> 00:06:44,039
so we solve this problem we update the

181
00:06:44,039 --> 00:06:46,139
assignment and then we update the full

182
00:06:46,139 --> 00:06:48,300
assignment and we keep iterating like we

183
00:06:48,300 --> 00:06:50,639
freeze some assignments around them and

184
00:06:50,639 --> 00:06:52,800
we keep going each iteration is like

185
00:06:52,800 --> 00:06:54,479
solving one of the attacks in the

186
00:06:54,479 --> 00:06:55,919
previous slide which we saw is kind of

187
00:06:55,919 --> 00:06:56,940
efficient

188
00:06:56,940 --> 00:06:58,560
and this is very efficient uses

189
00:06:58,560 --> 00:07:00,120
coordinate information

190
00:07:00,120 --> 00:07:02,940
for the Frozen assignments and we don't

191
00:07:02,940 --> 00:07:04,500
have proof that this converges but in

192
00:07:04,500 --> 00:07:07,740
other all of our experiments it always

193
00:07:07,740 --> 00:07:09,300
converges

194
00:07:09,300 --> 00:07:11,819
so some experiments we have five data

195
00:07:11,819 --> 00:07:14,520
sets for each data set we give Alice

196
00:07:14,520 --> 00:07:16,380
some documents and we give the adversary

197
00:07:16,380 --> 00:07:18,960
some other documents that's the

198
00:07:18,960 --> 00:07:20,639
auxiliary information for the adversary

199
00:07:20,639 --> 00:07:23,099
and then Alice sends queries to the

200
00:07:23,099 --> 00:07:26,599
adversary I just have here two examples

201
00:07:26,599 --> 00:07:29,639
so for the first one this is the attack

202
00:07:29,639 --> 00:07:31,500
accuracy of different query recovery

203
00:07:31,500 --> 00:07:33,240
attacks versus the number of keywords in

204
00:07:33,240 --> 00:07:35,160
the data set and this is the setting

205
00:07:35,160 --> 00:07:38,520
where uh there are n different keywords

206
00:07:38,520 --> 00:07:40,199
in the data set and Alice queries for

207
00:07:40,199 --> 00:07:41,580
all of them so this is the symmetric

208
00:07:41,580 --> 00:07:43,919
problem of mating and possible queries

209
00:07:43,919 --> 00:07:47,400
to Impossible uh keywords we see that

210
00:07:47,400 --> 00:07:50,099
our attack in Orange IHOP achieves

211
00:07:50,099 --> 00:07:52,620
almost perfect accuracy

212
00:07:52,620 --> 00:07:54,419
um it barely decreases as we increase

213
00:07:54,419 --> 00:07:56,300
the number of keywords in this data set

214
00:07:56,300 --> 00:07:58,979
graph matching achieves also very good

215
00:07:58,979 --> 00:08:00,720
accuracy but if we look at the running

216
00:08:00,720 --> 00:08:02,580
times and this is in logarithmic scale

217
00:08:02,580 --> 00:08:05,160
we see that our attack for a thousand

218
00:08:05,160 --> 00:08:07,080
keywords it takes around 15 minutes

219
00:08:07,080 --> 00:08:09,840
while graph matching takes almost three

220
00:08:09,840 --> 00:08:10,800
days

221
00:08:10,800 --> 00:08:13,039
so it's way more efficient

222
00:08:13,039 --> 00:08:15,960
and this is another case now we increase

223
00:08:15,960 --> 00:08:18,120
the number of keywords in the data set

224
00:08:18,120 --> 00:08:20,699
but Alice only queries for 500 different

225
00:08:20,699 --> 00:08:22,860
keywords so this is the asymmetric

226
00:08:22,860 --> 00:08:25,500
problem of matching we have observed 500

227
00:08:25,500 --> 00:08:27,780
different uh queries

228
00:08:27,780 --> 00:08:29,639
and they you have to match them to more

229
00:08:29,639 --> 00:08:33,360
than 500 possible keywords so here the

230
00:08:33,360 --> 00:08:36,059
graph matching attack quickly like the

231
00:08:36,059 --> 00:08:38,240
accuracy quickly decreases

232
00:08:38,240 --> 00:08:41,339
IHOP also decreases but it's way way

233
00:08:41,339 --> 00:08:44,399
better than all the other attacks

234
00:08:44,399 --> 00:08:46,560
we have way more experiments in the

235
00:08:46,560 --> 00:08:47,940
paper but I didn't have room here

236
00:08:47,940 --> 00:08:50,700
because I wanted to talk uh briefly

237
00:08:50,700 --> 00:08:52,800
about this one of the things we do in

238
00:08:52,800 --> 00:08:55,019
the paper is we adapt our attack against

239
00:08:55,019 --> 00:08:57,420
this defense called pancake so in this

240
00:08:57,420 --> 00:09:00,779
setting uh as this data set is like each

241
00:09:00,779 --> 00:09:03,720
the each document has a unique keyword

242
00:09:03,720 --> 00:09:05,940
so for example picture this is like a

243
00:09:05,940 --> 00:09:08,100
Wikipedia with three pages for dog cat

244
00:09:08,100 --> 00:09:10,320
and cow and Alice sends queries for

245
00:09:10,320 --> 00:09:13,800
these uh for these keywords and Ali's

246
00:09:13,800 --> 00:09:15,540
querying Behavior could be like this

247
00:09:15,540 --> 00:09:17,700
like sending independent queries about

248
00:09:17,700 --> 00:09:19,920
with more probability she would query

249
00:09:19,920 --> 00:09:22,260
for a dog less probability for cat and

250
00:09:22,260 --> 00:09:24,240
so on or it could be like dependent

251
00:09:24,240 --> 00:09:25,980
queries like following some sort of like

252
00:09:25,980 --> 00:09:28,440
Markov process like this like C chord is

253
00:09:28,440 --> 00:09:30,000
for a dog and then she's more likely to

254
00:09:30,000 --> 00:09:33,240
query for cat after that for example

255
00:09:33,240 --> 00:09:36,360
if the adversary knows Alice is scoring

256
00:09:36,360 --> 00:09:38,580
Behavior they can compute like the query

257
00:09:38,580 --> 00:09:40,740
frequency of these queries or the Markov

258
00:09:40,740 --> 00:09:43,500
Matrix and run the attack

259
00:09:43,500 --> 00:09:45,480
and guess the underlying keywords of

260
00:09:45,480 --> 00:09:46,860
these queries

261
00:09:46,860 --> 00:09:48,839
um so what pancake does pancake is a

262
00:09:48,839 --> 00:09:51,420
defense that ensure the access frequency

263
00:09:51,420 --> 00:09:53,940
to each document is almost the same it's

264
00:09:53,940 --> 00:09:57,000
like uniform so pancake doubles the data

265
00:09:57,000 --> 00:09:58,860
set size it also has like some dummy

266
00:09:58,860 --> 00:10:00,660
documents and Alice would send also

267
00:10:00,660 --> 00:10:01,980
dummy queries

268
00:10:01,980 --> 00:10:04,260
and what the adversary would see is that

269
00:10:04,260 --> 00:10:06,060
Alice access frequency to each of the

270
00:10:06,060 --> 00:10:08,760
documents is the same however if Alice's

271
00:10:08,760 --> 00:10:10,920
queries are correlated

272
00:10:10,920 --> 00:10:13,080
like they follow a Markov process

273
00:10:13,080 --> 00:10:16,260
pancake makes this sort of a Fed like it

274
00:10:16,260 --> 00:10:18,000
flattens it but not completely there's

275
00:10:18,000 --> 00:10:20,459
still correlations so if the adversary

276
00:10:20,459 --> 00:10:22,860
knows Alice's squaring Behavior more or

277
00:10:22,860 --> 00:10:25,680
less they can still run this attack

278
00:10:25,680 --> 00:10:28,100
um The Way We Run The attack is like

279
00:10:28,100 --> 00:10:31,320
this this like Markov Matrix will be one

280
00:10:31,320 --> 00:10:34,019
of the matrices of the attack in the

281
00:10:34,019 --> 00:10:34,980
previous slides right instead of

282
00:10:34,980 --> 00:10:36,420
co-occurrence matrices it would be like

283
00:10:36,420 --> 00:10:38,040
frequencies in this case

284
00:10:38,040 --> 00:10:40,260
and just a summary of the results

285
00:10:40,260 --> 00:10:42,779
um we have five Wikipedia data sets each

286
00:10:42,779 --> 00:10:45,420
data set has 500 documents so when

287
00:10:45,420 --> 00:10:47,220
running pancake this makes like a

288
00:10:47,220 --> 00:10:48,839
thousand replicas

289
00:10:48,839 --> 00:10:51,120
uh so this Matrix is like a thousand by

290
00:10:51,120 --> 00:10:53,760
a thousand and this is a summary of the

291
00:10:53,760 --> 00:10:54,600
results

292
00:10:54,600 --> 00:10:56,160
um here are the boxes the two boxes on

293
00:10:56,160 --> 00:10:58,140
the left is when Alice does a hundred

294
00:10:58,140 --> 00:10:59,700
thousand queries the ones on the right

295
00:10:59,700 --> 00:11:03,420
for 500 000 queries the orange boxes is

296
00:11:03,420 --> 00:11:04,860
when Alice

297
00:11:04,860 --> 00:11:07,980
um doesn't use pancake so here the

298
00:11:07,980 --> 00:11:10,440
accuracy is almost one and then pancake

299
00:11:10,440 --> 00:11:12,899
reduces the attack accuracy a lot

300
00:11:12,899 --> 00:11:16,260
but so these boxes are made with points

301
00:11:16,260 --> 00:11:17,880
from different runs but also from

302
00:11:17,880 --> 00:11:19,980
different the five data sets that we

303
00:11:19,980 --> 00:11:22,380
have so we see that for some runs or

304
00:11:22,380 --> 00:11:24,959
from some data sets the attack accuracy

305
00:11:24,959 --> 00:11:26,700
can be very high like

306
00:11:26,700 --> 00:11:30,240
even above like 80 percent so

307
00:11:30,240 --> 00:11:33,120
pancake is still very strong because Ali

308
00:11:33,120 --> 00:11:34,980
still needs to make a lot of queries but

309
00:11:34,980 --> 00:11:37,019
depending on Alice's current behavior if

310
00:11:37,019 --> 00:11:39,120
the queries are correlated pancake might

311
00:11:39,120 --> 00:11:41,100
not be enough to protect

312
00:11:41,100 --> 00:11:43,560
um against these attacks

313
00:11:43,560 --> 00:11:44,640
um

314
00:11:44,640 --> 00:11:46,920
okay so just to summarize we propose a

315
00:11:46,920 --> 00:11:48,540
new statistical query recovery attack

316
00:11:48,540 --> 00:11:50,760
that is faster than state-of-the-art

317
00:11:50,760 --> 00:11:53,760
attacks uh gives more accuracy and is

318
00:11:53,760 --> 00:11:55,800
flexible and we show this by adapting it

319
00:11:55,800 --> 00:11:57,899
against pancake and in the paper we also

320
00:11:57,899 --> 00:12:00,180
adapted against other attacks

321
00:12:00,180 --> 00:12:02,640
and this concludes the talk I'm happy to

322
00:12:02,640 --> 00:12:05,120
take any questions

