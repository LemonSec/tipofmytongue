1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:08,960 --> 00:00:10,860
and thank you for joining the session

3
00:00:10,860 --> 00:00:12,240
whether you're here in person in Boston

4
00:00:12,240 --> 00:00:13,740
or joining virtually

5
00:00:13,740 --> 00:00:15,780
I will be presenting our work today this

6
00:00:15,780 --> 00:00:16,560
was

7
00:00:16,560 --> 00:00:18,600
um a collaboration between Daniel Trace

8
00:00:18,600 --> 00:00:20,039
research in Austria

9
00:00:20,039 --> 00:00:21,720
um Grazie University of Technology and

10
00:00:21,720 --> 00:00:23,039
the sister Helm Health Center for

11
00:00:23,039 --> 00:00:25,760
information security

12
00:00:25,859 --> 00:00:27,420
so kind of the motivation for this work

13
00:00:27,420 --> 00:00:30,119
is some of the horrifying code we see

14
00:00:30,119 --> 00:00:31,980
here

15
00:00:31,980 --> 00:00:34,260
um so micro architectural attacks as I'm

16
00:00:34,260 --> 00:00:36,000
sure many of you are aware and know from

17
00:00:36,000 --> 00:00:37,140
experience

18
00:00:37,140 --> 00:00:38,760
um can be quite complicated to implement

19
00:00:38,760 --> 00:00:41,160
it can be quite frustrating even if

20
00:00:41,160 --> 00:00:43,500
you're familiar with systems programming

21
00:00:43,500 --> 00:00:45,540
and working in assembly we're trying to

22
00:00:45,540 --> 00:00:47,100
do things here that aren't supposed to

23
00:00:47,100 --> 00:00:49,020
be done we're trying to access values

24
00:00:49,020 --> 00:00:50,879
that aren't meant to be architecturally

25
00:00:50,879 --> 00:00:52,920
accessible so we do some really weird

26
00:00:52,920 --> 00:00:54,899
stuff and it can be very difficult to

27
00:00:54,899 --> 00:00:56,699
explain your code to other people

28
00:00:56,699 --> 00:00:58,260
it can be difficult to explain the code

29
00:00:58,260 --> 00:00:59,579
to yourself when you come back to it

30
00:00:59,579 --> 00:01:01,620
after a year or so

31
00:01:01,620 --> 00:01:03,600
so these attacks are super complex to

32
00:01:03,600 --> 00:01:05,760
implement this is slowing progress in

33
00:01:05,760 --> 00:01:07,560
attack research and it's a barrier to

34
00:01:07,560 --> 00:01:09,600
entry for the field

35
00:01:09,600 --> 00:01:11,400
it makes teaching microarchitectural

36
00:01:11,400 --> 00:01:13,799
security really challenging and it also

37
00:01:13,799 --> 00:01:15,180
increases the risk that our mitigations

38
00:01:15,180 --> 00:01:17,580
are incomplete if even implementing

39
00:01:17,580 --> 00:01:19,020
attack to test our mitigations against

40
00:01:19,020 --> 00:01:20,939
is quite challenging and we don't know

41
00:01:20,939 --> 00:01:23,040
if we've got it right

42
00:01:23,040 --> 00:01:24,960
so we asked ourselves what does the

43
00:01:24,960 --> 00:01:26,820
attack development process look like in

44
00:01:26,820 --> 00:01:28,799
these three contexts of attack research

45
00:01:28,799 --> 00:01:31,619
teaching and mitigation

46
00:01:31,619 --> 00:01:33,600
and how similar are these three contexts

47
00:01:33,600 --> 00:01:35,400
are they maybe similar enough that we

48
00:01:35,400 --> 00:01:37,079
can meaningfully talk about some kind of

49
00:01:37,079 --> 00:01:39,840
common attack development process

50
00:01:39,840 --> 00:01:41,280
um and if they are could we maybe

51
00:01:41,280 --> 00:01:43,020
facilitate the development process for

52
00:01:43,020 --> 00:01:44,280
all three of them

53
00:01:44,280 --> 00:01:47,640
spoiler alert they are similar enough

54
00:01:47,640 --> 00:01:49,740
so we did the first systematization of

55
00:01:49,740 --> 00:01:50,700
the micro architectural attack

56
00:01:50,700 --> 00:01:52,200
development process

57
00:01:52,200 --> 00:01:53,820
we did a mixed methods analysis

58
00:01:53,820 --> 00:01:56,700
combining a literature review of Prior

59
00:01:56,700 --> 00:01:58,799
work expert interviews with 16

60
00:01:58,799 --> 00:02:00,780
practitioners from Academia and Industry

61
00:02:00,780 --> 00:02:03,360
and a user study with 28 graduate

62
00:02:03,360 --> 00:02:04,979
students who were taking an introductory

63
00:02:04,979 --> 00:02:06,600
course in side channels and

64
00:02:06,600 --> 00:02:09,720
microarchitectural attacks

65
00:02:09,720 --> 00:02:11,580
and we focused on four research topics

66
00:02:11,580 --> 00:02:14,340
firstly the attack building blocks so

67
00:02:14,340 --> 00:02:15,900
the core Snippets of code that are being

68
00:02:15,900 --> 00:02:18,000
used to implement these attacks and

69
00:02:18,000 --> 00:02:19,440
obviously every attack is slightly

70
00:02:19,440 --> 00:02:20,940
different but we found there were some

71
00:02:20,940 --> 00:02:21,900
common building blocks that were

72
00:02:21,900 --> 00:02:24,000
occurring again and again for example

73
00:02:24,000 --> 00:02:25,800
high resolution timers cash attack

74
00:02:25,800 --> 00:02:27,900
Primitives the ability to modify page

75
00:02:27,900 --> 00:02:29,940
tables

76
00:02:29,940 --> 00:02:31,200
um secondly we also looked into micro

77
00:02:31,200 --> 00:02:33,060
architectural control and techniques

78
00:02:33,060 --> 00:02:34,140
that people have developed for

79
00:02:34,140 --> 00:02:36,060
fine-grained control so that we can have

80
00:02:36,060 --> 00:02:38,400
reliable attacks reliable experimental

81
00:02:38,400 --> 00:02:39,840
results

82
00:02:39,840 --> 00:02:41,879
thirdly the programming languages people

83
00:02:41,879 --> 00:02:44,099
are using and the existing tooling the

84
00:02:44,099 --> 00:02:45,420
worst some existing microarchitectural

85
00:02:45,420 --> 00:02:47,760
attack development libraries and we

86
00:02:47,760 --> 00:02:50,280
evaluated those in our user study

87
00:02:50,280 --> 00:02:52,140
and finally the overall development

88
00:02:52,140 --> 00:02:54,420
process so things like key communication

89
00:02:54,420 --> 00:02:55,980
challenges

90
00:02:55,980 --> 00:02:57,780
um and whether the development process

91
00:02:57,780 --> 00:03:00,360
was iterative

92
00:03:00,360 --> 00:03:02,220
so for the full insights I'd invite you

93
00:03:02,220 --> 00:03:04,260
to take a look at our paper but I would

94
00:03:04,260 --> 00:03:05,280
say some of the most interesting

95
00:03:05,280 --> 00:03:07,620
insights were firstly that we found

96
00:03:07,620 --> 00:03:08,879
practitioners were doing a mix of

97
00:03:08,879 --> 00:03:11,159
evolutionary prototyping so starting

98
00:03:11,159 --> 00:03:12,900
from an initial attack POC and

99
00:03:12,900 --> 00:03:15,420
iteratively improving upon it and also

100
00:03:15,420 --> 00:03:17,340
throw away prototyping so these are

101
00:03:17,340 --> 00:03:18,840
one-off experiments where we might be

102
00:03:18,840 --> 00:03:20,580
trying to test a hypothesis about where

103
00:03:20,580 --> 00:03:22,140
the leakage comes from which micro

104
00:03:22,140 --> 00:03:24,659
architectural element it is or perhaps

105
00:03:24,659 --> 00:03:26,280
just an attack idea that didn't work out

106
00:03:26,280 --> 00:03:28,739
and even these throwaway ones even the

107
00:03:28,739 --> 00:03:30,180
ones that get thrown away never make it

108
00:03:30,180 --> 00:03:32,099
into the paper are a crucial part of the

109
00:03:32,099 --> 00:03:33,840
attack development process the final

110
00:03:33,840 --> 00:03:36,300
attack wouldn't be there if we hadn't

111
00:03:36,300 --> 00:03:38,819
had this initial work

112
00:03:38,819 --> 00:03:41,220
practitioners also always begin in C or

113
00:03:41,220 --> 00:03:43,200
assembly for maximum control

114
00:03:43,200 --> 00:03:44,459
so even if we're trying to make a

115
00:03:44,459 --> 00:03:45,959
browser-based attack we start off in

116
00:03:45,959 --> 00:03:47,280
native code

117
00:03:47,280 --> 00:03:49,379
because this in if you start

118
00:03:49,379 --> 00:03:50,700
implementing in JavaScript straight away

119
00:03:50,700 --> 00:03:52,080
there's just too many variables to

120
00:03:52,080 --> 00:03:53,519
control too many things that could go

121
00:03:53,519 --> 00:03:54,959
wrong if you're trying to debug why you

122
00:03:54,959 --> 00:03:56,159
haven't got leakage

123
00:03:56,159 --> 00:03:57,599
it's very difficult to isolate what's

124
00:03:57,599 --> 00:03:59,220
wrong

125
00:03:59,220 --> 00:04:01,500
also a lot of time goes into developing

126
00:04:01,500 --> 00:04:03,299
custom drivers or custom operating

127
00:04:03,299 --> 00:04:05,879
systems these are often required for the

128
00:04:05,879 --> 00:04:07,379
privileged building blocks for attacks

129
00:04:07,379 --> 00:04:09,000
for example the ability to modify page

130
00:04:09,000 --> 00:04:10,680
tables or to read and write model

131
00:04:10,680 --> 00:04:13,680
specific model specific registers

132
00:04:13,680 --> 00:04:15,239
as you can imagine there's a lot of

133
00:04:15,239 --> 00:04:16,620
Maintenance effort involved in that it's

134
00:04:16,620 --> 00:04:18,298
a big initial time investment but also

135
00:04:18,298 --> 00:04:19,798
needs maintaining as for example the

136
00:04:19,798 --> 00:04:22,620
Linux kernel gets updated

137
00:04:22,620 --> 00:04:24,540
and proof the concept can be really

138
00:04:24,540 --> 00:04:26,639
powerful communication tools and the

139
00:04:26,639 --> 00:04:27,720
obvious example here is in the

140
00:04:27,720 --> 00:04:29,340
disclosure process when we present a POC

141
00:04:29,340 --> 00:04:31,979
to a manufacturer but complexity makes

142
00:04:31,979 --> 00:04:33,900
them less effective and even within a

143
00:04:33,900 --> 00:04:35,520
research group we heard from

144
00:04:35,520 --> 00:04:36,780
practitioners that sometimes they had

145
00:04:36,780 --> 00:04:38,460
difficulty understanding proofs of

146
00:04:38,460 --> 00:04:41,400
concept from their collaborators

147
00:04:41,400 --> 00:04:44,100
for example might be a POC that they

148
00:04:44,100 --> 00:04:45,419
can't run on their own system because

149
00:04:45,419 --> 00:04:47,759
they don't have Intel sgx we're looking

150
00:04:47,759 --> 00:04:49,860
at some strange assembly and trying to

151
00:04:49,860 --> 00:04:51,240
trying to make sense of what's going on

152
00:04:51,240 --> 00:04:52,699
there

153
00:04:52,699 --> 00:04:55,500
so we based on this analysis we

154
00:04:55,500 --> 00:04:56,820
determined that the best way we could

155
00:04:56,820 --> 00:04:58,020
facilitate the attack development

156
00:04:58,020 --> 00:05:00,180
process was by improving upon the

157
00:05:00,180 --> 00:05:02,460
existing software tooling to try and

158
00:05:02,460 --> 00:05:03,840
reduce the complexity of this

159
00:05:03,840 --> 00:05:05,880
implementation

160
00:05:05,880 --> 00:05:07,560
we developed two Frameworks the first

161
00:05:07,560 --> 00:05:09,780
one was libt which is a cross-platform

162
00:05:09,780 --> 00:05:12,479
attack development API in C

163
00:05:12,479 --> 00:05:15,540
provides 142 functions for the most

164
00:05:15,540 --> 00:05:16,919
common attack building blocks that we

165
00:05:16,919 --> 00:05:18,540
identified

166
00:05:18,540 --> 00:05:20,820
It Sports Linux Windows Android which

167
00:05:20,820 --> 00:05:22,320
means you can run it on your phone and

168
00:05:22,320 --> 00:05:24,419
we did

169
00:05:24,419 --> 00:05:25,800
um and it's a single C header with a

170
00:05:25,800 --> 00:05:27,060
supporting kernel driver so it's quite

171
00:05:27,060 --> 00:05:30,600
easy to integrate into existing projects

172
00:05:30,600 --> 00:05:32,100
and for our privileged building blocks

173
00:05:32,100 --> 00:05:33,840
we built upon existing work with PT

174
00:05:33,840 --> 00:05:36,000
editor for modifying page tables and sgx

175
00:05:36,000 --> 00:05:38,340
step for fine grain control over Intel

176
00:05:38,340 --> 00:05:40,758
sgx

177
00:05:41,340 --> 00:05:43,800
secondly we built Firefox

178
00:05:43,800 --> 00:05:45,600
ified version of the Firefox browser

179
00:05:45,600 --> 00:05:47,639
which provides the functionality of

180
00:05:47,639 --> 00:05:49,380
Liberty in JavaScript

181
00:05:49,380 --> 00:05:51,539
why would we want to do this well this

182
00:05:51,539 --> 00:05:54,539
means that we don't need to Port an

183
00:05:54,539 --> 00:05:55,979
attack PSU we have a native code

184
00:05:55,979 --> 00:05:58,500
completely over to JavaScript in one go

185
00:05:58,500 --> 00:06:00,360
we can

186
00:06:00,360 --> 00:06:02,400
basically take our native code proof of

187
00:06:02,400 --> 00:06:04,199
concept use exactly the same functions

188
00:06:04,199 --> 00:06:05,880
so it's almost a native code proof of

189
00:06:05,880 --> 00:06:08,039
concept in the browser and then building

190
00:06:08,039 --> 00:06:09,840
block by building block replace it with

191
00:06:09,840 --> 00:06:12,300
vanilla JavaScript or webassembly and

192
00:06:12,300 --> 00:06:13,979
doing this step-by-step process makes

193
00:06:13,979 --> 00:06:15,240
the attack development process much

194
00:06:15,240 --> 00:06:17,520
easier

195
00:06:17,520 --> 00:06:19,800
so this framework can be used in

196
00:06:19,800 --> 00:06:22,020
directly in the JavaScript shell it's a

197
00:06:22,020 --> 00:06:23,280
spider monkey firefox's JavaScript

198
00:06:23,280 --> 00:06:25,520
engine or in the browser if you want to

199
00:06:25,520 --> 00:06:27,539
investigate interactions with the user

200
00:06:27,539 --> 00:06:29,340
interface as well

201
00:06:29,340 --> 00:06:31,139
one limitation is we have some overhead

202
00:06:31,139 --> 00:06:33,240
from the JS API wrapper so when we

203
00:06:33,240 --> 00:06:35,460
switch execution context from JavaScript

204
00:06:35,460 --> 00:06:37,139
to C plus

205
00:06:37,139 --> 00:06:38,940
that and cause a bit of overhead it

206
00:06:38,940 --> 00:06:40,080
means that you can't run Liberty

207
00:06:40,080 --> 00:06:42,240
functions speculatively so some of your

208
00:06:42,240 --> 00:06:43,740
core attack Primitives do still need to

209
00:06:43,740 --> 00:06:46,699
be implemented in JavaScript

210
00:06:47,400 --> 00:06:50,100
so with these two Frameworks we

211
00:06:50,100 --> 00:06:51,419
determine a process that we call rapid

212
00:06:51,419 --> 00:06:53,400
prototyping which is inspired by the use

213
00:06:53,400 --> 00:06:55,620
of rapid prototyping in other Industries

214
00:06:55,620 --> 00:06:57,720
And I stress here we didn't just plug

215
00:06:57,720 --> 00:06:59,400
this out of thin air this really is

216
00:06:59,400 --> 00:07:01,500
based on the process that we heard from

217
00:07:01,500 --> 00:07:03,000
practitioners what was really

218
00:07:03,000 --> 00:07:04,979
interesting though was that everyone we

219
00:07:04,979 --> 00:07:06,360
interviewed to stressed they didn't have

220
00:07:06,360 --> 00:07:07,800
any kind of common attack process

221
00:07:07,800 --> 00:07:10,020
development process in every attack is

222
00:07:10,020 --> 00:07:12,600
different development always varies I

223
00:07:12,600 --> 00:07:13,800
don't really know what I'm doing I'm

224
00:07:13,800 --> 00:07:15,240
like stumbling around in the dark with

225
00:07:15,240 --> 00:07:18,240
these experiments but hearing from so

226
00:07:18,240 --> 00:07:19,620
many practitioners

227
00:07:19,620 --> 00:07:21,660
across so many different attacks we

228
00:07:21,660 --> 00:07:22,919
really could see that the process was

229
00:07:22,919 --> 00:07:24,479
very iterative even if that wasn't clear

230
00:07:24,479 --> 00:07:26,160
to practitioners themselves

231
00:07:26,160 --> 00:07:28,259
and I can say from experience

232
00:07:28,259 --> 00:07:30,360
implementing attacks often it does feel

233
00:07:30,360 --> 00:07:32,940
just super frustrating and unclear when

234
00:07:32,940 --> 00:07:34,020
you take the high level perspective

235
00:07:34,020 --> 00:07:36,180
we're starting from a hypothesis we

236
00:07:36,180 --> 00:07:38,160
Implement that in native code

237
00:07:38,160 --> 00:07:41,400
and then using SC Firefox as I mentioned

238
00:07:41,400 --> 00:07:44,039
we can take that straight to the browser

239
00:07:44,039 --> 00:07:45,599
and now we can start thinking about

240
00:07:45,599 --> 00:07:47,039
replacing each one of those building

241
00:07:47,039 --> 00:07:50,520
blocks step by step we might need to go

242
00:07:50,520 --> 00:07:51,960
back to lib team and iterate backwards

243
00:07:51,960 --> 00:07:53,340
and forwards because we might have some

244
00:07:53,340 --> 00:07:54,599
building blocks that have never been

245
00:07:54,599 --> 00:07:56,460
implemented in JavaScript before so we

246
00:07:56,460 --> 00:07:57,539
need to do some experiments to

247
00:07:57,539 --> 00:07:59,639
understand how we can achieve that

248
00:07:59,639 --> 00:08:01,380
and eventually we get our fully fledged

249
00:08:01,380 --> 00:08:03,360
attack proof of concept

250
00:08:03,360 --> 00:08:05,099
let's make this a bit more concrete with

251
00:08:05,099 --> 00:08:08,639
an example zombie load in JavaScript

252
00:08:08,639 --> 00:08:10,319
so to recap zombie load is a micro

253
00:08:10,319 --> 00:08:11,940
architectural data sampling attack where

254
00:08:11,940 --> 00:08:13,380
we sample data from the line fill

255
00:08:13,380 --> 00:08:15,479
buffers in CPU

256
00:08:15,479 --> 00:08:17,580
it's triggered by a zombie load so

257
00:08:17,580 --> 00:08:19,800
that's a load that faults triggering a

258
00:08:19,800 --> 00:08:21,180
microcode assist

259
00:08:21,180 --> 00:08:23,879
and transiently some data is returned

260
00:08:23,879 --> 00:08:25,620
from this faulting load but it's not the

261
00:08:25,620 --> 00:08:28,259
data we try to access it data from the

262
00:08:28,259 --> 00:08:29,699
line field office whatever happened to

263
00:08:29,699 --> 00:08:32,479
be there at the time

264
00:08:32,640 --> 00:08:33,779
um so as you can see here we've got the

265
00:08:33,779 --> 00:08:35,700
mindful buffer and this is a really

266
00:08:35,700 --> 00:08:37,799
interesting Target because any loads on

267
00:08:37,799 --> 00:08:39,419
The Sibling hyper thread are going to

268
00:08:39,419 --> 00:08:40,500
come through the line fill buffer into

269
00:08:40,500 --> 00:08:44,399
the L1 cache so we can pick up on these

270
00:08:44,399 --> 00:08:45,899
we decided to implement zombie load

271
00:08:45,899 --> 00:08:46,980
variant 3 because it's the most

272
00:08:46,980 --> 00:08:48,180
practical one for an unprivileged

273
00:08:48,180 --> 00:08:49,140
attacker

274
00:08:49,140 --> 00:08:51,600
and here we need four building blocks we

275
00:08:51,600 --> 00:08:52,980
need two mappings to the same physical

276
00:08:52,980 --> 00:08:54,360
address

277
00:08:54,360 --> 00:08:55,980
we need to have the access bit cleared

278
00:08:55,980 --> 00:08:57,360
on one mapping to trigger a microcode

279
00:08:57,360 --> 00:08:58,680
assist

280
00:08:58,680 --> 00:09:00,420
also we need a way to flush the other

281
00:09:00,420 --> 00:09:02,279
mapping at the same time this causes a

282
00:09:02,279 --> 00:09:03,899
cache line conflict and is also a

283
00:09:03,899 --> 00:09:05,640
crucial part of creating this zombie

284
00:09:05,640 --> 00:09:06,899
load

285
00:09:06,899 --> 00:09:08,760
and we need a way to transiently encode

286
00:09:08,760 --> 00:09:10,560
and recover the leaked data which will

287
00:09:10,560 --> 00:09:12,540
be a cash convert channel has been

288
00:09:12,540 --> 00:09:15,480
demonstrating a lot of private work

289
00:09:15,480 --> 00:09:17,880
so here is Liberty in action um this is

290
00:09:17,880 --> 00:09:19,920
the API I apologize we've got quite so

291
00:09:19,920 --> 00:09:21,300
much crammed on one slide but what I

292
00:09:21,300 --> 00:09:22,560
really wanted to illustrate here is that

293
00:09:22,560 --> 00:09:24,540
we don't need many lines of code

294
00:09:24,540 --> 00:09:27,000
and we tried with the API to make things

295
00:09:27,000 --> 00:09:30,060
as conceptual as possible so get away

296
00:09:30,060 --> 00:09:32,220
from that sort of overhead of thinking

297
00:09:32,220 --> 00:09:34,200
about the implementation details let's

298
00:09:34,200 --> 00:09:36,420
clear the access bit for example in one

299
00:09:36,420 --> 00:09:38,160
line

300
00:09:38,160 --> 00:09:39,720
um and in our core attack Loop you can

301
00:09:39,720 --> 00:09:41,040
see it's as simple as you're saying

302
00:09:41,040 --> 00:09:43,620
flush offers mapping then we have this

303
00:09:43,620 --> 00:09:45,300
speculation start on end block which

304
00:09:45,300 --> 00:09:46,920
looks a bit like an if block that is

305
00:09:46,920 --> 00:09:49,500
actually hiding some assembly code but

306
00:09:49,500 --> 00:09:50,820
we don't need to care about that we

307
00:09:50,820 --> 00:09:52,019
don't want to we want to work at a

308
00:09:52,019 --> 00:09:53,940
higher abstraction level

309
00:09:53,940 --> 00:09:55,920
um so we within this block we have our

310
00:09:55,920 --> 00:09:57,300
two instructions that are going to be

311
00:09:57,300 --> 00:09:58,620
run speculatively

312
00:09:58,620 --> 00:10:00,660
the Liberty access to zero is extending

313
00:10:00,660 --> 00:10:03,420
our transient window and then we access

314
00:10:03,420 --> 00:10:05,160
map2 and we're going to encode that into

315
00:10:05,160 --> 00:10:06,660
our cache cover Channel That's provided

316
00:10:06,660 --> 00:10:07,980
by libt

317
00:10:07,980 --> 00:10:09,959
but because this is zombie load we're

318
00:10:09,959 --> 00:10:12,600
not encoding the actual value map to we

319
00:10:12,600 --> 00:10:13,860
are encoding data from the line fill

320
00:10:13,860 --> 00:10:16,260
buffers and then we have a handy helper

321
00:10:16,260 --> 00:10:18,240
function to create a histogram to plot

322
00:10:18,240 --> 00:10:20,580
the data that we're getting

323
00:10:20,580 --> 00:10:21,959
so we can see here that the sibling

324
00:10:21,959 --> 00:10:23,339
hyper thread is loading the value X

325
00:10:23,339 --> 00:10:25,019
we've got a little bit of noise but the

326
00:10:25,019 --> 00:10:27,180
signal is very clear and we can use

327
00:10:27,180 --> 00:10:29,100
Liberty's paging functions to check that

328
00:10:29,100 --> 00:10:30,360
we did actually achieve what we wanted

329
00:10:30,360 --> 00:10:32,880
we cleared the access bit on our second

330
00:10:32,880 --> 00:10:36,420
mapping and not on our first mapping

331
00:10:36,420 --> 00:10:38,100
so now we want to take this into the

332
00:10:38,100 --> 00:10:39,660
browser

333
00:10:39,660 --> 00:10:41,519
um first we observe that we can get

334
00:10:41,519 --> 00:10:44,220
these two mappings we need if we Port

335
00:10:44,220 --> 00:10:46,380
the PSC to Windows and then we can rely

336
00:10:46,380 --> 00:10:49,140
on memory deduplication Windows

337
00:10:49,140 --> 00:10:51,000
um has memory duplication enabled again

338
00:10:51,000 --> 00:10:54,240
within the same privilege context so we

339
00:10:54,240 --> 00:10:55,740
can just set up two arrays with the same

340
00:10:55,740 --> 00:10:58,140
values weight while windows deduplicates

341
00:10:58,140 --> 00:10:59,880
that for us and now we have two mappings

342
00:10:59,880 --> 00:11:02,040
to the same physical page windows will

343
00:11:02,040 --> 00:11:03,600
also helpfully clear the access bit for

344
00:11:03,600 --> 00:11:05,640
us so that is another privileged

345
00:11:05,640 --> 00:11:06,959
building block that we can now do in

346
00:11:06,959 --> 00:11:10,160
unprivileged JavaScript

347
00:11:10,260 --> 00:11:12,060
the big question though can we leak

348
00:11:12,060 --> 00:11:13,500
without a flush

349
00:11:13,500 --> 00:11:15,720
what we discovered in our prototyping is

350
00:11:15,720 --> 00:11:17,640
that we don't actually need a flush a

351
00:11:17,640 --> 00:11:19,440
speculative access to that first mapping

352
00:11:19,440 --> 00:11:21,660
at a different offset at the same time

353
00:11:21,660 --> 00:11:22,680
we're trying to access the second

354
00:11:22,680 --> 00:11:24,600
mapping still induces a cache line

355
00:11:24,600 --> 00:11:27,420
conflict still gives us zombie loads and

356
00:11:27,420 --> 00:11:28,920
this is a big finding because in the

357
00:11:28,920 --> 00:11:30,959
original zombie load paper it was

358
00:11:30,959 --> 00:11:32,579
documented that the cl flush instruction

359
00:11:32,579 --> 00:11:34,200
was a requirement so one of the

360
00:11:34,200 --> 00:11:36,720
potential mitigations for restricted

361
00:11:36,720 --> 00:11:38,160
environments was instruction filtering

362
00:11:38,160 --> 00:11:40,019
to prevent this flushing but now zombie

363
00:11:40,019 --> 00:11:43,220
load is feasible in the sandbox

364
00:11:43,500 --> 00:11:46,140
so here we see SC Firefox I mentioned

365
00:11:46,140 --> 00:11:48,300
the API is very similar by Design

366
00:11:48,300 --> 00:11:50,100
so a lot of our building blocks we can

367
00:11:50,100 --> 00:11:51,500
put across straight away

368
00:11:51,500 --> 00:11:55,079
as I mentioned we have that JS API

369
00:11:55,079 --> 00:11:56,760
overhead which means that the transient

370
00:11:56,760 --> 00:11:58,500
execution blocks still need to be in

371
00:11:58,500 --> 00:12:00,420
pure JavaScript or webassembly

372
00:12:00,420 --> 00:12:02,339
so we use respect V1 Gadget a

373
00:12:02,339 --> 00:12:04,260
webassembly timer thread and an eviction

374
00:12:04,260 --> 00:12:06,240
reload cover Channel but crucially these

375
00:12:06,240 --> 00:12:07,740
have been solved in Prior work so we

376
00:12:07,740 --> 00:12:08,940
don't need to reinvent the wheel here

377
00:12:08,940 --> 00:12:10,920
and this doesn't hinder our prototyping

378
00:12:10,920 --> 00:12:12,839
process too much

379
00:12:12,839 --> 00:12:14,660
so in our final attack

380
00:12:14,660 --> 00:12:16,860
our scenario is that we trick the victim

381
00:12:16,860 --> 00:12:18,120
into opening a link and reading or

382
00:12:18,120 --> 00:12:19,920
leaving the tab idle for at least five

383
00:12:19,920 --> 00:12:22,320
minutes while we wait for Windows to

384
00:12:22,320 --> 00:12:24,000
de-duplicate the memory for us

385
00:12:24,000 --> 00:12:26,880
we can leak um about 1.48 bytes per

386
00:12:26,880 --> 00:12:29,100
second with decent accuracy this is

387
00:12:29,100 --> 00:12:31,140
comparable to

388
00:12:31,140 --> 00:12:34,500
um the riddle BSC in JavaScript it is a

389
00:12:34,500 --> 00:12:35,760
much lower leakage rate than we see in

390
00:12:35,760 --> 00:12:37,200
native code

391
00:12:37,200 --> 00:12:39,000
um but we do observe we can have a great

392
00:12:39,000 --> 00:12:41,339
leakage rate if we use

393
00:12:41,339 --> 00:12:42,180
um

394
00:12:42,180 --> 00:12:45,120
if we use leverage SC Firefox to do

395
00:12:45,120 --> 00:12:47,160
flush and reload so I think there is

396
00:12:47,160 --> 00:12:49,500
potential here to improve the evictions

397
00:12:49,500 --> 00:12:50,880
that we're using actually improve that

398
00:12:50,880 --> 00:12:52,500
leakage rate but that wasn't the goal

399
00:12:52,500 --> 00:12:53,820
here the goal was to illustrate the

400
00:12:53,820 --> 00:12:55,920
prototyping process

401
00:12:55,920 --> 00:12:57,899
uh one limitations we need to reliably

402
00:12:57,899 --> 00:13:00,120
be on the same call so this isn't yet a

403
00:13:00,120 --> 00:13:02,160
full end-to-end attack

404
00:13:02,160 --> 00:13:03,720
so to sum up

405
00:13:03,720 --> 00:13:04,920
um I would say this work was a first

406
00:13:04,920 --> 00:13:06,360
step towards establishing a methodology

407
00:13:06,360 --> 00:13:07,740
and tooling for microarchitectural

408
00:13:07,740 --> 00:13:10,079
attack development there is plenty of

409
00:13:10,079 --> 00:13:11,880
work left to do so much more tooling we

410
00:13:11,880 --> 00:13:14,040
could build and I would like to see the

411
00:13:14,040 --> 00:13:16,620
API an even higher abstraction level

412
00:13:16,620 --> 00:13:18,000
so that it's easier to use this for

413
00:13:18,000 --> 00:13:19,440
teaching and communicating these attacks

414
00:13:19,440 --> 00:13:21,720
to a broader audience

415
00:13:21,720 --> 00:13:23,459
if there's one thing you take away from

416
00:13:23,459 --> 00:13:24,899
this presentation I'd like it to be that

417
00:13:24,899 --> 00:13:26,700
we can facilitate attack development and

418
00:13:26,700 --> 00:13:28,560
communication by tackling the complexity

419
00:13:28,560 --> 00:13:30,540
of our proof of concept implementations

420
00:13:30,540 --> 00:13:32,639
so always keep that in your mind like

421
00:13:32,639 --> 00:13:34,260
how can we hide some of the

422
00:13:34,260 --> 00:13:35,820
implementation details and complexity

423
00:13:35,820 --> 00:13:38,100
here

424
00:13:38,100 --> 00:13:39,300
um and or Frameworks are available on

425
00:13:39,300 --> 00:13:41,760
GitHub contributions feedback

426
00:13:41,760 --> 00:13:43,019
um very welcome I hope they can be

427
00:13:43,019 --> 00:13:44,760
useful to you in your work and I'm open

428
00:13:44,760 --> 00:13:47,300
for any questions

