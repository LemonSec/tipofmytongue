1
00:00:07,700 --> 00:00:10,980
hello everyone my name is rojin Tran and

2
00:00:10,980 --> 00:00:12,440
I'm from Shanghai Children University

3
00:00:12,440 --> 00:00:15,599
I'm going to present our work Mutual

4
00:00:15,599 --> 00:00:18,300
test station for Global enclaves without

5
00:00:18,300 --> 00:00:21,300
Justice third parties this is John's

6
00:00:21,300 --> 00:00:23,340
work with professor in Shenzhen from

7
00:00:23,340 --> 00:00:25,320
Southern University of Science and

8
00:00:25,320 --> 00:00:27,000
Technology

9
00:00:27,000 --> 00:00:29,460
as Outsourcing storage and computation

10
00:00:29,460 --> 00:00:32,759
to clouds become more prevalent cautious

11
00:00:32,759 --> 00:00:35,040
users May risk concerns about whether

12
00:00:35,040 --> 00:00:38,219
the cloud could keep their data private

13
00:00:38,219 --> 00:00:40,800
and execute their applications as

14
00:00:40,800 --> 00:00:44,160
expected trusted execution environments

15
00:00:44,160 --> 00:00:46,860
or Tes have the potential to offer

16
00:00:46,860 --> 00:00:49,100
efficient solutions to these concerns

17
00:00:49,100 --> 00:00:52,379
example of these include in Intel sdx

18
00:00:52,379 --> 00:00:55,500
and AMD Sev which are available in

19
00:00:55,500 --> 00:00:57,539
popular clouds such as Google Cloud

20
00:00:57,539 --> 00:01:01,559
Microsoft Azure and Alibaba cloud

21
00:01:01,559 --> 00:01:05,220
a te as is a secure area of a processor

22
00:01:05,220 --> 00:01:07,740
which is usually called Enclave it

23
00:01:07,740 --> 00:01:09,600
protects the confidentiality and

24
00:01:09,600 --> 00:01:12,299
integrity of the code and data loaded

25
00:01:12,299 --> 00:01:15,000
inside against the privileged and

26
00:01:15,000 --> 00:01:17,400
unprivileged attackers such as the

27
00:01:17,400 --> 00:01:20,220
operating system before interacting with

28
00:01:20,220 --> 00:01:22,380
an enclave The Enclave need to be

29
00:01:22,380 --> 00:01:25,740
verified thus a mechanism called remote

30
00:01:25,740 --> 00:01:28,619
test station is introduced here The

31
00:01:28,619 --> 00:01:32,040
Enclave is denoted as the tester and the

32
00:01:32,040 --> 00:01:35,100
entity that wishes to establish just on

33
00:01:35,100 --> 00:01:38,460
the test is denoted the verifier

34
00:01:38,460 --> 00:01:41,159
the establishment of chess can be

35
00:01:41,159 --> 00:01:43,140
achieved by answering the following

36
00:01:43,140 --> 00:01:44,820
three questions

37
00:01:44,820 --> 00:01:49,020
one is the tester an enclave the root of

38
00:01:49,020 --> 00:01:51,180
just all the remote testation procedure

39
00:01:51,180 --> 00:01:53,640
Less in some specific components within

40
00:01:53,640 --> 00:01:56,220
the processor such as the root secret

41
00:01:56,220 --> 00:01:59,159
which is burnt to the preset faces

42
00:01:59,159 --> 00:02:01,259
uh efuse

43
00:02:01,259 --> 00:02:03,720
these root Secrets can be used to

44
00:02:03,720 --> 00:02:06,060
endorse a particular private key called

45
00:02:06,060 --> 00:02:08,840
the translation key which is used to

46
00:02:08,840 --> 00:02:13,739
sign the report generated by the test to

47
00:02:13,739 --> 00:02:16,379
prove to a verifier that the test that

48
00:02:16,379 --> 00:02:19,020
is indeed an enclave running on an

49
00:02:19,020 --> 00:02:21,360
authentic te platform

50
00:02:21,360 --> 00:02:24,060
hence when designed report is verified

51
00:02:24,060 --> 00:02:26,819
to be valid the verifier can be assured

52
00:02:26,819 --> 00:02:30,180
that the tester is indeed an enclave

53
00:02:30,180 --> 00:02:33,060
question two what is the test enclave's

54
00:02:33,060 --> 00:02:36,120
identity one anchor can be identified by

55
00:02:36,120 --> 00:02:38,720
the angular management which is the

56
00:02:38,720 --> 00:02:41,879
cryptography hash of its initial code

57
00:02:41,879 --> 00:02:44,700
and data usually the test Enclave

58
00:02:44,700 --> 00:02:47,220
measurement is inserted by the te

59
00:02:47,220 --> 00:02:50,220
platform into the send reports sent to

60
00:02:50,220 --> 00:02:52,560
the verifier so that's the verifier

61
00:02:52,560 --> 00:02:55,099
obtains the test enclave's identity

62
00:02:55,099 --> 00:02:59,160
simultaneously when verifying the report

63
00:02:59,160 --> 00:03:01,739
question three is the identity chart

64
00:03:01,739 --> 00:03:05,580
State usually the verifier compares the

65
00:03:05,580 --> 00:03:08,340
unclear measurement from the receiver

66
00:03:08,340 --> 00:03:11,459
Report with the expected one from some

67
00:03:11,459 --> 00:03:14,700
reliable source so if that equal the

68
00:03:14,700 --> 00:03:17,340
verifier can be assured that the test

69
00:03:17,340 --> 00:03:20,400
Enclave is trusted

70
00:03:20,400 --> 00:03:23,400
in scenarios when the verify is also an

71
00:03:23,400 --> 00:03:26,480
enclave The Trusted enclosed measurement

72
00:03:26,480 --> 00:03:30,120
uh is hard coded into the verified

73
00:03:30,120 --> 00:03:32,760
enclaves initial data

74
00:03:32,760 --> 00:03:35,220
when RT applications become more

75
00:03:35,220 --> 00:03:37,500
complicated and consists of multiple

76
00:03:37,500 --> 00:03:40,140
enclaves these enclaves need to attest

77
00:03:40,140 --> 00:03:42,540
each other to establish a chance the

78
00:03:42,540 --> 00:03:45,480
relationship between before interacting

79
00:03:45,480 --> 00:03:46,920
with each other

80
00:03:46,920 --> 00:03:49,379
such Mutual taxation could be achieved

81
00:03:49,379 --> 00:03:51,780
when there exists trusted third parties

82
00:03:51,780 --> 00:03:54,480
such as a standalone server adjust the

83
00:03:54,480 --> 00:03:57,120
developer or adjusted auditor

84
00:03:57,120 --> 00:03:59,459
each angler could have the gtp's

85
00:03:59,459 --> 00:04:01,920
publicly hard coded into its initial

86
00:04:01,920 --> 00:04:06,239
data and thus can obtain the others

87
00:04:06,239 --> 00:04:08,819
expected measurements from the TTP

88
00:04:08,819 --> 00:04:12,239
during runtime however including a TTP

89
00:04:12,239 --> 00:04:15,299
increases the TCP of the entire

90
00:04:15,299 --> 00:04:18,540
application and may also incur extra

91
00:04:18,540 --> 00:04:21,139
costs for running public key

92
00:04:21,139 --> 00:04:24,300
infrastructures therefore it is often

93
00:04:24,300 --> 00:04:26,460
desired to perform Mutual testation

94
00:04:26,460 --> 00:04:28,560
without gtps

95
00:04:28,560 --> 00:04:30,780
however we found this problem than

96
00:04:30,780 --> 00:04:33,360
trivial consider two enclaves A and B

97
00:04:33,360 --> 00:04:35,639
after developing Enclave a its

98
00:04:35,639 --> 00:04:37,680
measurement is obtained and can be hard

99
00:04:37,680 --> 00:04:40,860
coded into angular base initial data the

100
00:04:40,860 --> 00:04:43,259
angular base measurement is penalized

101
00:04:43,259 --> 00:04:46,979
for a to verify this identity uh it will

102
00:04:46,979 --> 00:04:48,540
need to hide code angular base

103
00:04:48,540 --> 00:04:50,880
measurements into its initial data

104
00:04:50,880 --> 00:04:54,080
however this will change its measurement

105
00:04:54,080 --> 00:04:57,600
making the previously hardcoded

106
00:04:57,600 --> 00:05:00,360
measurements invalid such a circular

107
00:05:00,360 --> 00:05:04,080
dependency is the main challenge here

108
00:05:04,080 --> 00:05:06,840
to address this problem we notice that

109
00:05:06,840 --> 00:05:09,139
the measurement calculation is

110
00:05:09,139 --> 00:05:11,759
deterministic and sequential

111
00:05:11,759 --> 00:05:14,520
so to compute the measurement of Enclave

112
00:05:14,520 --> 00:05:17,940
The Enclave content is first its relates

113
00:05:17,940 --> 00:05:21,660
into fixed lens blocks and process the

114
00:05:21,660 --> 00:05:23,280
one by one sequentially

115
00:05:23,280 --> 00:05:25,740
a fixed lens internal state or

116
00:05:25,740 --> 00:05:28,979
intermediate hence is first initialized

117
00:05:28,979 --> 00:05:31,860
and then updated after each block is

118
00:05:31,860 --> 00:05:33,600
processed

119
00:05:33,600 --> 00:05:37,979
so after after updating the last block a

120
00:05:37,979 --> 00:05:40,440
finalization function output the final

121
00:05:40,440 --> 00:05:42,419
hash

122
00:05:42,419 --> 00:05:45,979
which is the angular management

123
00:05:46,560 --> 00:05:51,479
a key observation here is that uh if we

124
00:05:51,479 --> 00:05:53,580
know the intermediate hash and the

125
00:05:53,580 --> 00:05:55,800
information to perform specific and

126
00:05:55,800 --> 00:05:59,280
measure measuring operations and it

127
00:05:59,280 --> 00:06:01,560
would be sufficient to derive the final

128
00:06:01,560 --> 00:06:04,100
output

129
00:06:05,100 --> 00:06:08,220
so here comes our solution Mage the idea

130
00:06:08,220 --> 00:06:10,740
is to introduce a common part at the end

131
00:06:10,740 --> 00:06:14,039
of each Enclave to store the

132
00:06:14,039 --> 00:06:16,500
intermediate states of The Enclave

133
00:06:16,500 --> 00:06:19,500
measuring process right before the final

134
00:06:19,500 --> 00:06:21,979
step

135
00:06:22,740 --> 00:06:25,979
this intermediate hashes reflects the

136
00:06:25,979 --> 00:06:28,680
specific parts of each Enclave

137
00:06:28,680 --> 00:06:31,979
due to this common part this enclaves

138
00:06:31,979 --> 00:06:34,940
measurements will be changed as follows

139
00:06:34,940 --> 00:06:38,460
during Uncle creation the measurement

140
00:06:38,460 --> 00:06:40,319
calculation before this common part

141
00:06:40,319 --> 00:06:42,720
Remains the Same

142
00:06:42,720 --> 00:06:44,819
and it will continue to update the

143
00:06:44,819 --> 00:06:48,479
contents of the common part and then

144
00:06:48,479 --> 00:06:52,500
finalize the measurements

145
00:06:52,860 --> 00:06:55,440
now I'll describe how the measurements

146
00:06:55,440 --> 00:06:58,860
could be obtained during runtime so each

147
00:06:58,860 --> 00:07:01,259
Enclave with the common part could

148
00:07:01,259 --> 00:07:03,979
derive the other Enclave measurements

149
00:07:03,979 --> 00:07:06,780
particularly the corresponding

150
00:07:06,780 --> 00:07:09,600
intermediate hashes are received from

151
00:07:09,600 --> 00:07:11,160
the common part

152
00:07:11,160 --> 00:07:12,840
and then The Enclave could continue

153
00:07:12,840 --> 00:07:15,720
updating the intermediate hashes with

154
00:07:15,720 --> 00:07:17,880
the contents of the common part and

155
00:07:17,880 --> 00:07:20,819
finalize the measurements

156
00:07:20,819 --> 00:07:23,759
uh we provide a prototype implementation

157
00:07:23,759 --> 00:07:27,300
of Mage for Intel sjx by extending the

158
00:07:27,300 --> 00:07:30,900
Intel sgx SDK specifically it consists

159
00:07:30,900 --> 00:07:33,960
of three components the first is a mage

160
00:07:33,960 --> 00:07:37,440
Library when included it will resolve a

161
00:07:37,440 --> 00:07:41,940
read-only data section named sdx Mage to

162
00:07:41,940 --> 00:07:43,860
store the intermediate

163
00:07:43,860 --> 00:07:46,199
uh hashes

164
00:07:46,199 --> 00:07:49,020
it also provides apis for divide

165
00:07:49,020 --> 00:07:52,620
deriving measurements from this section

166
00:07:52,620 --> 00:07:55,860
secondly we modify the Android load to

167
00:07:55,860 --> 00:07:59,580
load the Mage section after all Enclave

168
00:07:59,580 --> 00:08:01,380
code and data

169
00:08:01,380 --> 00:08:04,139
so it will first follow the original

170
00:08:04,139 --> 00:08:08,160
loading process except that's when sjx

171
00:08:08,160 --> 00:08:10,620
means the page Mage section is

172
00:08:10,620 --> 00:08:13,860
encountered it will be skipped so after

173
00:08:13,860 --> 00:08:16,380
all others are loaded the modified

174
00:08:16,380 --> 00:08:19,740
Enclave loader will load pages in the

175
00:08:19,740 --> 00:08:21,479
image section

176
00:08:21,479 --> 00:08:24,300
certainly we modify the sending tool to

177
00:08:24,300 --> 00:08:25,800
provide the following two

178
00:08:25,800 --> 00:08:28,919
functionalities given an enclave

179
00:08:28,919 --> 00:08:31,500
the modified sentence will simulates the

180
00:08:31,500 --> 00:08:33,599
loading process except for the image

181
00:08:33,599 --> 00:08:34,760
section

182
00:08:34,760 --> 00:08:40,159
and extract the intermediate hash

183
00:08:40,500 --> 00:08:43,200
then after collecting the intermediate

184
00:08:43,200 --> 00:08:45,720
hashes of all trusted enclaves the

185
00:08:45,720 --> 00:08:48,779
modified signatures injects them into

186
00:08:48,779 --> 00:08:52,140
the image section of each emulator

187
00:08:52,140 --> 00:08:54,060
next I'll describe the performance

188
00:08:54,060 --> 00:08:56,100
evaluation of our prototype

189
00:08:56,100 --> 00:08:58,560
implementation so for the memory

190
00:08:58,560 --> 00:09:01,019
overhead it is linear with the number of

191
00:09:01,019 --> 00:09:03,080
adjusted enclaves

192
00:09:03,080 --> 00:09:06,600
particularly 48 bytes are needed to

193
00:09:06,600 --> 00:09:09,480
store the auxiliary information

194
00:09:09,480 --> 00:09:13,019
such as the intermediate hash and Page

195
00:09:13,019 --> 00:09:15,540
metadata for the deriving one unclear

196
00:09:15,540 --> 00:09:17,220
measurement

197
00:09:17,220 --> 00:09:18,980
so

198
00:09:18,980 --> 00:09:23,880
4K page could spot up to 85 enclaves

199
00:09:23,880 --> 00:09:26,339
as for the measurements derived

200
00:09:26,339 --> 00:09:28,980
measurement derivation efficiency it is

201
00:09:28,980 --> 00:09:30,779
also linear with the size of the image

202
00:09:30,779 --> 00:09:33,420
section uh

203
00:09:33,420 --> 00:09:37,160
and in our evaluation it takes roughly

204
00:09:37,160 --> 00:09:40,500
21.7 microseconds to derive one

205
00:09:40,500 --> 00:09:42,660
measurement when the image section

206
00:09:42,660 --> 00:09:44,880
contains only one page

207
00:09:44,880 --> 00:09:46,800
in the paper we also discussed

208
00:09:46,800 --> 00:09:49,140
alternative designs such as extended

209
00:09:49,140 --> 00:09:51,980
image with adjusting storage for better

210
00:09:51,980 --> 00:09:54,959
scalability we discussed the potential

211
00:09:54,959 --> 00:09:58,320
extensions to other Tes or even between

212
00:09:58,320 --> 00:10:02,060
different types of ge's

213
00:10:02,459 --> 00:10:05,160
suddenly uh we also discussed the

214
00:10:05,160 --> 00:10:07,019
supporting Enclave updates and private

215
00:10:07,019 --> 00:10:09,779
code please refer to the paper for more

216
00:10:09,779 --> 00:10:12,360
details that's all for my talk thanks

217
00:10:12,360 --> 00:10:15,440
for listening

