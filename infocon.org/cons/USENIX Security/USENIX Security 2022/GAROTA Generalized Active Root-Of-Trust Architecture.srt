1
00:00:07,820 --> 00:00:10,559
hi everybody so in the next few minutes

2
00:00:10,559 --> 00:00:12,840
I'll be telling you about our effort to

3
00:00:12,840 --> 00:00:14,460
build garota it's an active root of

4
00:00:14,460 --> 00:00:16,379
trust for simple embedded systems this

5
00:00:16,379 --> 00:00:18,600
is Joint work with esmerald and Jin

6
00:00:18,600 --> 00:00:20,880
sudik from UCI and again I'm Yvonne from

7
00:00:20,880 --> 00:00:22,199
RIT

8
00:00:22,199 --> 00:00:24,660
so before going into what we mean by an

9
00:00:24,660 --> 00:00:27,300
active root of trust that's just briefly

10
00:00:27,300 --> 00:00:29,880
Define what classic root of trust means

11
00:00:29,880 --> 00:00:31,619
and the classic definition one of them

12
00:00:31,619 --> 00:00:33,719
is what's in the slide a Computing

13
00:00:33,719 --> 00:00:35,940
entity with no ancestor entity capable

14
00:00:35,940 --> 00:00:37,800
of providing addressable attestation for

15
00:00:37,800 --> 00:00:40,559
the state of it or in simpler terms it's

16
00:00:40,559 --> 00:00:43,620
an ideally small piece of a system that

17
00:00:43,620 --> 00:00:47,340
you trust without verifying so

18
00:00:47,340 --> 00:00:49,079
um there are several examples for this

19
00:00:49,079 --> 00:00:51,239
most classic example in network security

20
00:00:51,239 --> 00:00:53,760
will be in a public key infrastructure

21
00:00:53,760 --> 00:00:55,920
The Roots CA the root certificate

22
00:00:55,920 --> 00:00:59,940
Authority but more recently you know in

23
00:00:59,940 --> 00:01:02,760
the term was kind of stolen and we also

24
00:01:02,760 --> 00:01:05,220
steal it to for this context in this

25
00:01:05,220 --> 00:01:08,100
work to refer to uh trusted Hardware

26
00:01:08,100 --> 00:01:10,920
within devices and there are several

27
00:01:10,920 --> 00:01:13,020
types of rots of roots of trust for

28
00:01:13,020 --> 00:01:16,500
storage merge measurement reporting and

29
00:01:16,500 --> 00:01:17,880
they are used to implement different

30
00:01:17,880 --> 00:01:19,799
kinds of security services such as you

31
00:01:19,799 --> 00:01:21,420
know encryption

32
00:01:21,420 --> 00:01:22,020
um

33
00:01:22,020 --> 00:01:24,720
secure boot remote attestation among

34
00:01:24,720 --> 00:01:27,479
many others and the key feature of this

35
00:01:27,479 --> 00:01:31,380
kind of of platform is that whatever

36
00:01:31,380 --> 00:01:33,479
service they offer is supposed to remain

37
00:01:33,479 --> 00:01:35,820
secure even if all the software on the

38
00:01:35,820 --> 00:01:37,799
main system except for the root of trust

39
00:01:37,799 --> 00:01:40,380
is compromised

40
00:01:40,380 --> 00:01:41,520
so

41
00:01:41,520 --> 00:01:43,500
coming back to our work the problem that

42
00:01:43,500 --> 00:01:45,600
we that motivates the work is that the

43
00:01:45,600 --> 00:01:48,479
realization that most uh rules of trust

44
00:01:48,479 --> 00:01:51,720
are passive and what we mean by passive

45
00:01:51,720 --> 00:01:54,439
is that they're good for proving

46
00:01:54,439 --> 00:01:56,579
properties about the system state or

47
00:01:56,579 --> 00:01:58,259
proving that a system a Remote device

48
00:01:58,259 --> 00:02:01,740
has executed a certain action but they

49
00:02:01,740 --> 00:02:04,520
typically cannot guarantee that a

50
00:02:04,520 --> 00:02:07,200
certain state in the system will be

51
00:02:07,200 --> 00:02:09,360
reached upon a command or cannot

52
00:02:09,360 --> 00:02:11,760
guarantee that a certain action will be

53
00:02:11,760 --> 00:02:14,220
performed so

54
00:02:14,220 --> 00:02:18,239
what we ask is well can we build roots

55
00:02:18,239 --> 00:02:19,680
of trust that guarantee some kind of

56
00:02:19,680 --> 00:02:22,800
availability for trusted code even under

57
00:02:22,800 --> 00:02:25,800
a compromise of all software uh in the

58
00:02:25,800 --> 00:02:28,860
system and caring guarantee that this

59
00:02:28,860 --> 00:02:32,640
kind of desired task is always executed

60
00:02:32,640 --> 00:02:34,680
Upon A Certain trigger Upon A Certain

61
00:02:34,680 --> 00:02:38,280
event of Interest so for examples of

62
00:02:38,280 --> 00:02:40,080
events you can think about you know

63
00:02:40,080 --> 00:02:42,000
analog inputs such as a sensor value

64
00:02:42,000 --> 00:02:44,700
exceeding a threshold or expiring times

65
00:02:44,700 --> 00:02:46,440
if you want to guarantee some kind of

66
00:02:46,440 --> 00:02:49,379
task that executes uh from time to time

67
00:02:49,379 --> 00:02:51,840
like in real-time settings as as

68
00:02:51,840 --> 00:02:54,900
discussed in the previous talk and uh

69
00:02:54,900 --> 00:02:56,760
for this talk I'm going to be calling

70
00:02:56,760 --> 00:03:01,019
this this events of Interest triggers

71
00:03:01,019 --> 00:03:02,280
so

72
00:03:02,280 --> 00:03:05,340
this is our goal when we design garota

73
00:03:05,340 --> 00:03:07,019
is a generalized active root of trust

74
00:03:07,019 --> 00:03:08,760
for providing availability guarantees

75
00:03:08,760 --> 00:03:12,300
for for code execution and I should say

76
00:03:12,300 --> 00:03:14,159
generalized here means that we want to

77
00:03:14,159 --> 00:03:17,159
provide uh this this triggers to be

78
00:03:17,159 --> 00:03:19,260
whatever arbitrary events to cause

79
00:03:19,260 --> 00:03:21,420
execution and the executable that gets

80
00:03:21,420 --> 00:03:24,840
executed upon the trigger should also be

81
00:03:24,840 --> 00:03:26,519
configurable

82
00:03:26,519 --> 00:03:28,980
so to make this a little bit more

83
00:03:28,980 --> 00:03:31,620
clear I'll discuss three sample use

84
00:03:31,620 --> 00:03:33,300
cases for this kind of feature so one

85
00:03:33,300 --> 00:03:36,180
first one is I suppose that you

86
00:03:36,180 --> 00:03:38,220
think about the timer based trigger so

87
00:03:38,220 --> 00:03:39,780
you want to guarantee execution of a

88
00:03:39,780 --> 00:03:41,940
certain time critical Mission critical

89
00:03:41,940 --> 00:03:45,120
task from time to time similar to what

90
00:03:45,120 --> 00:03:47,220
you would uh want from a real-time

91
00:03:47,220 --> 00:03:49,560
operating system except that in the rtos

92
00:03:49,560 --> 00:03:52,799
case you have to trust the rtos here we

93
00:03:52,799 --> 00:03:55,040
want to remove trust from software

94
00:03:55,040 --> 00:03:58,140
second example you can think about uh

95
00:03:58,140 --> 00:04:00,239
like some kind of sensor device that

96
00:04:00,239 --> 00:04:02,340
performs several things perhaps it

97
00:04:02,340 --> 00:04:03,360
implements some kind of network

98
00:04:03,360 --> 00:04:05,459
communication perhaps it builds some

99
00:04:05,459 --> 00:04:08,040
statistics but we want to make sure that

100
00:04:08,040 --> 00:04:10,260
Upon A A trigger such as temperature

101
00:04:10,260 --> 00:04:12,480
exiting a threshold the most safety

102
00:04:12,480 --> 00:04:14,159
critical task which is sounding the

103
00:04:14,159 --> 00:04:16,500
alarm is always executed no matter how

104
00:04:16,500 --> 00:04:19,738
compromised the rest of the system is

105
00:04:19,738 --> 00:04:22,919
or you can think about a third use case

106
00:04:22,919 --> 00:04:25,560
where you know you have uh some safety

107
00:04:25,560 --> 00:04:27,000
critical commands and you want to make

108
00:04:27,000 --> 00:04:29,100
sure that a compromised device doesn't

109
00:04:29,100 --> 00:04:32,580
ignore this uh safety critical commands

110
00:04:32,580 --> 00:04:34,199
when they're received from a remote

111
00:04:34,199 --> 00:04:36,060
controller

112
00:04:36,060 --> 00:04:38,160
so those are the kinds of settings that

113
00:04:38,160 --> 00:04:41,280
we think of when we when we design

114
00:04:41,280 --> 00:04:44,280
garoda and we actually used the road

115
00:04:44,280 --> 00:04:45,960
architecture to implement examples for

116
00:04:45,960 --> 00:04:48,000
these kinds of settings so let me go

117
00:04:48,000 --> 00:04:50,340
into what uh what is the the

118
00:04:50,340 --> 00:04:52,620
architecture and before going into the

119
00:04:52,620 --> 00:04:54,479
the overview of the architecture I

120
00:04:54,479 --> 00:04:56,040
should say a little bit about the scope

121
00:04:56,040 --> 00:04:58,020
of this design this first design for

122
00:04:58,020 --> 00:05:00,060
figure out

123
00:05:00,060 --> 00:05:02,460
um we target we choose to to go with uh

124
00:05:02,460 --> 00:05:05,520
bare metal computationally simple anemic

125
00:05:05,520 --> 00:05:08,520
devices with uh you know no kernel no MP

126
00:05:08,520 --> 00:05:10,440
no memory protections or any type of

127
00:05:10,440 --> 00:05:12,840
virtualization such as you know mmu to

128
00:05:12,840 --> 00:05:15,360
support virtual memory and so on

129
00:05:15,360 --> 00:05:17,160
um devices that are designed for low end

130
00:05:17,160 --> 00:05:19,500
low uh that are low end designed for

131
00:05:19,500 --> 00:05:21,540
low-cost low power small size and so on

132
00:05:21,540 --> 00:05:23,280
they usually run in a few megahertz

133
00:05:23,280 --> 00:05:26,460
clock single core units and have a few

134
00:05:26,460 --> 00:05:28,740
kilobytes for program memory and the

135
00:05:28,740 --> 00:05:30,240
question is why we go with this device

136
00:05:30,240 --> 00:05:32,699
as well these are simple enough devices

137
00:05:32,699 --> 00:05:35,759
to model formally and and to

138
00:05:35,759 --> 00:05:38,400
create a first systematic design so it

139
00:05:38,400 --> 00:05:41,039
seems like a natural First Step a good

140
00:05:41,039 --> 00:05:43,080
Target for clean State active root of

141
00:05:43,080 --> 00:05:46,380
trust design and it turns out that these

142
00:05:46,380 --> 00:05:49,740
devices are quite widely used as pieces

143
00:05:49,740 --> 00:05:51,600
of larger systems and they actually

144
00:05:51,600 --> 00:05:53,759
Implement tasks that could benefit for

145
00:05:53,759 --> 00:05:55,620
this kind of active brutal trust

146
00:05:55,620 --> 00:05:58,560
guarantee so this is our reason for

147
00:05:58,560 --> 00:06:01,620
going with them the concepts we hope can

148
00:06:01,620 --> 00:06:03,600
be further extended for higher end

149
00:06:03,600 --> 00:06:05,160
devices in the future

150
00:06:05,160 --> 00:06:08,360
so let's go into the overview

151
00:06:08,360 --> 00:06:11,280
as I said the trigger should be any

152
00:06:11,280 --> 00:06:14,759
event of interest and uh what we use

153
00:06:14,759 --> 00:06:16,860
here is a system interest so basically

154
00:06:16,860 --> 00:06:19,860
in garota whatever uh system

155
00:06:19,860 --> 00:06:22,020
interrupting the unmodified MCU and the

156
00:06:22,020 --> 00:06:25,160
unmodified embedded device could be

157
00:06:25,160 --> 00:06:28,440
configured as a garota trigger and the

158
00:06:28,440 --> 00:06:30,900
main idea is to add trusted Hardware to

159
00:06:30,900 --> 00:06:33,240
fuse the safety critical interrupt of

160
00:06:33,240 --> 00:06:35,479
Interest with

161
00:06:35,479 --> 00:06:38,940
the correct execution of The rot's

162
00:06:38,940 --> 00:06:42,600
Trusted software of the rot's TCB and

163
00:06:42,600 --> 00:06:45,720
this feature it's a sound simple but it

164
00:06:45,720 --> 00:06:49,620
requires some modifications but it boils

165
00:06:49,620 --> 00:06:52,740
down to two core sub properties the

166
00:06:52,740 --> 00:06:54,060
first one that we call Guaranteed

167
00:06:54,060 --> 00:06:56,300
trigger triggering

168
00:06:56,300 --> 00:06:59,400
and basically what we do to actually

169
00:06:59,400 --> 00:07:01,919
guarantee that a trig that in an event

170
00:07:01,919 --> 00:07:03,960
of Interest always causes the TCB

171
00:07:03,960 --> 00:07:07,319
execution is that we reuse the the irq

172
00:07:07,319 --> 00:07:11,100
support and we uh to call to to cause an

173
00:07:11,100 --> 00:07:13,740
immediate call to the TCB code as a an

174
00:07:13,740 --> 00:07:15,479
interrupt trigger interrupt service

175
00:07:15,479 --> 00:07:17,699
routine test

176
00:07:17,699 --> 00:07:20,099
and then on top of that we so basically

177
00:07:20,099 --> 00:07:21,660
if you want to configure a trigger you

178
00:07:21,660 --> 00:07:22,919
can configure it in the same way you

179
00:07:22,919 --> 00:07:24,720
configure normal interrupt but on top of

180
00:07:24,720 --> 00:07:26,340
that we add trusted Hardware to protect

181
00:07:26,340 --> 00:07:28,080
this configuration so this configuration

182
00:07:28,080 --> 00:07:29,699
involves for example interrupted Vector

183
00:07:29,699 --> 00:07:32,180
tables interrupt configuration registers

184
00:07:32,180 --> 00:07:35,580
and so on and we add trusted Hardware to

185
00:07:35,580 --> 00:07:36,720
make sure that this configurations

186
00:07:36,720 --> 00:07:39,780
cannot be modified at runtime by the

187
00:07:39,780 --> 00:07:41,220
untrusted part of the software anything

188
00:07:41,220 --> 00:07:44,400
that's outside the root of trust DCB

189
00:07:44,400 --> 00:07:46,199
and uh

190
00:07:46,199 --> 00:07:49,440
besides that uh so this means that

191
00:07:49,440 --> 00:07:51,060
whenever the trigger happens it will

192
00:07:51,060 --> 00:07:54,080
call the TCB code

193
00:07:55,919 --> 00:07:58,620
but besides that

194
00:07:58,620 --> 00:07:59,580
um

195
00:07:59,580 --> 00:08:00,960
we need to make sure that once called

196
00:08:00,960 --> 00:08:04,380
the CCB code is authentic it's the one

197
00:08:04,380 --> 00:08:06,300
we expect and it executes correctly so

198
00:08:06,300 --> 00:08:08,639
this involves another three sub

199
00:08:08,639 --> 00:08:10,560
properties so we we use trusted harder

200
00:08:10,560 --> 00:08:12,120
to make sure that this code is immutable

201
00:08:12,120 --> 00:08:15,740
at runtime that either by CPU or dma

202
00:08:15,740 --> 00:08:18,599
that we enforce at the messages so

203
00:08:18,599 --> 00:08:20,340
meaning that once this code is called it

204
00:08:20,340 --> 00:08:22,259
needs to be executed until the end and

205
00:08:22,259 --> 00:08:24,060
controlled invocation to make sure that

206
00:08:24,060 --> 00:08:26,340
it is always executed from the beginning

207
00:08:26,340 --> 00:08:28,500
and preventing you know funny things

208
00:08:28,500 --> 00:08:29,819
like jumping in the middle of the code

209
00:08:29,819 --> 00:08:33,000
to trigger unexpected Behavior

210
00:08:33,000 --> 00:08:35,940
so this guaranteed trigger property

211
00:08:35,940 --> 00:08:38,399
which we use the hardware to to look

212
00:08:38,399 --> 00:08:40,080
into these things and monitor to see if

213
00:08:40,080 --> 00:08:41,580
they're happening and and we deal with

214
00:08:41,580 --> 00:08:43,140
these things in the most simple way the

215
00:08:43,140 --> 00:08:45,240
same way the MCU deals with them or

216
00:08:45,240 --> 00:08:47,279
deals with any exception which is by

217
00:08:47,279 --> 00:08:48,860
resetting the device

218
00:08:48,860 --> 00:08:50,700
but

219
00:08:50,700 --> 00:08:52,860
if we just reset the device in a setting

220
00:08:52,860 --> 00:08:54,120
where we want to guarantee availability

221
00:08:54,120 --> 00:08:56,940
we're kind of losing the battle right so

222
00:08:56,940 --> 00:08:58,680
if we reset and we do nothing we didn't

223
00:08:58,680 --> 00:09:00,540
guarantee anything so the second key

224
00:09:00,540 --> 00:09:02,519
feature that we support in garota

225
00:09:02,519 --> 00:09:04,080
Hardware is what we call retriggering

226
00:09:04,080 --> 00:09:06,240
your failure so

227
00:09:06,240 --> 00:09:07,320
um

228
00:09:07,320 --> 00:09:10,140
once the TCB is triggered it executes if

229
00:09:10,140 --> 00:09:13,380
it finishes fine uh if it doesn't we

230
00:09:13,380 --> 00:09:15,720
issue a reset so the second the missing

231
00:09:15,720 --> 00:09:17,640
component here is to make sure that

232
00:09:17,640 --> 00:09:20,880
always after reset garota's Hardware uh

233
00:09:20,880 --> 00:09:23,339
will enforce that the TCB implementation

234
00:09:23,339 --> 00:09:25,740
the root of trust code is always the

235
00:09:25,740 --> 00:09:29,880
first to execute so this is a picture

236
00:09:29,880 --> 00:09:32,220
that's worth a thousand words on the red

237
00:09:32,220 --> 00:09:35,580
part to the right you have any untrusted

238
00:09:35,580 --> 00:09:36,920
apps and

239
00:09:36,920 --> 00:09:39,600
next to it you have the TCB executable

240
00:09:39,600 --> 00:09:41,279
and the trigger is protected in Hardware

241
00:09:41,279 --> 00:09:44,100
to make sure that whenever uh an event

242
00:09:44,100 --> 00:09:46,080
of Interest happens the TCB execution

243
00:09:46,080 --> 00:09:49,440
kicks in what could happen as well is

244
00:09:49,440 --> 00:09:51,000
that the device resets or does some kind

245
00:09:51,000 --> 00:09:53,820
of malfunctioning so in that case we

246
00:09:53,820 --> 00:09:55,980
make sure that the upon initialization

247
00:09:55,980 --> 00:09:59,220
after reset the the TCB executable is

248
00:09:59,220 --> 00:10:01,560
the first to run so you know if you're

249
00:10:01,560 --> 00:10:03,240
malware attacking this device you have

250
00:10:03,240 --> 00:10:05,220
two options you'll let the TCB run you

251
00:10:05,220 --> 00:10:07,440
cause a reset if you cause a reset PCB

252
00:10:07,440 --> 00:10:08,760
runs anyway

253
00:10:08,760 --> 00:10:10,080
okay

254
00:10:10,080 --> 00:10:11,519
so

255
00:10:11,519 --> 00:10:13,920
big part of this and one of the points

256
00:10:13,920 --> 00:10:15,839
is that we wanted to have a systematic

257
00:10:15,839 --> 00:10:17,820
design that can be used as a reference

258
00:10:17,820 --> 00:10:21,720
hopefully and uh so we actually specify

259
00:10:21,720 --> 00:10:23,580
these things formally using linear

260
00:10:23,580 --> 00:10:26,760
temporal logic we specify these two Key

261
00:10:26,760 --> 00:10:28,740
Properties guaranteed triggering and

262
00:10:28,740 --> 00:10:30,959
retriguing on failure and then the next

263
00:10:30,959 --> 00:10:34,680
step is to axiomatize whatever we expect

264
00:10:34,680 --> 00:10:36,959
from the MCU from what's already in

265
00:10:36,959 --> 00:10:40,200
there and axiomatize what are the

266
00:10:40,200 --> 00:10:41,519
additional Hardware features that we

267
00:10:41,519 --> 00:10:44,100
need from our architecture so we do this

268
00:10:44,100 --> 00:10:46,800
but we have no clue if this is in if if

269
00:10:46,800 --> 00:10:49,079
the properties that we postulated are

270
00:10:49,079 --> 00:10:52,079
enough so the next step is to use a

271
00:10:52,079 --> 00:10:55,100
proof assistant to show that actually

272
00:10:55,100 --> 00:10:58,079
the the garota hardware properties when

273
00:10:58,079 --> 00:11:00,360
applied to the MCO Machine model imply

274
00:11:00,360 --> 00:11:02,279
the the high level properties that we

275
00:11:02,279 --> 00:11:05,040
want uh this gives us sufficiency for

276
00:11:05,040 --> 00:11:07,260
the property the properties it doesn't

277
00:11:07,260 --> 00:11:10,320
mean our implementation uh adheres to

278
00:11:10,320 --> 00:11:12,839
this uh property specifications so the

279
00:11:12,839 --> 00:11:16,380
final step is to use a model Checker to

280
00:11:16,380 --> 00:11:17,700
automatically translate the hardware

281
00:11:17,700 --> 00:11:20,640
design from verilog to a symbolic module

282
00:11:20,640 --> 00:11:23,100
of verifier and uh prove that the

283
00:11:23,100 --> 00:11:25,200
implementation has this properties

284
00:11:25,200 --> 00:11:27,060
in a more pictorial description that's

285
00:11:27,060 --> 00:11:28,500
what you have with design growth as a

286
00:11:28,500 --> 00:11:30,480
set of sub modules to enforce each of

287
00:11:30,480 --> 00:11:32,880
the LTL sub properties and we combine

288
00:11:32,880 --> 00:11:34,980
that with the machine model to enforce

289
00:11:34,980 --> 00:11:38,040
the guarantees that we want and uh just

290
00:11:38,040 --> 00:11:40,019
a tiny bit about the implementation all

291
00:11:40,019 --> 00:11:41,640
the details are in the paper we designed

292
00:11:41,640 --> 00:11:44,640
this uh sub modules as as verilog fsms

293
00:11:44,640 --> 00:11:46,860
and they work basically by monitoring

294
00:11:46,860 --> 00:11:48,779
CPU signals of Interest like the program

295
00:11:48,779 --> 00:11:51,839
counter like uh the which data addresses

296
00:11:51,839 --> 00:11:53,700
being accessed at a given time for

297
00:11:53,700 --> 00:11:55,440
writes and reads and detective

298
00:11:55,440 --> 00:11:57,560
violations I mentioned before

299
00:11:57,560 --> 00:12:01,380
this is my last slide on the the

300
00:12:01,380 --> 00:12:03,720
hardware costs and by the way I should

301
00:12:03,720 --> 00:12:06,000
say this we compared them to a bunch of

302
00:12:06,000 --> 00:12:08,940
architectures bunch of roots of trust uh

303
00:12:08,940 --> 00:12:10,920
targeting the same class of devices but

304
00:12:10,920 --> 00:12:12,060
they're not doing the same thing they're

305
00:12:12,060 --> 00:12:13,560
all all of these are passive routes

306
00:12:13,560 --> 00:12:14,940
address they're not active we put it

307
00:12:14,940 --> 00:12:16,860
here for a point of comparison and you

308
00:12:16,860 --> 00:12:19,079
see it's not uh more expensive or

309
00:12:19,079 --> 00:12:20,760
anything it's actually cheaper and the

310
00:12:20,760 --> 00:12:24,060
reason is well we we use the exist and

311
00:12:24,060 --> 00:12:26,279
interrupt support from the device and we

312
00:12:26,279 --> 00:12:28,680
just add the minimal amount of Hardware

313
00:12:28,680 --> 00:12:32,100
support needed to protect this Trigger

314
00:12:32,100 --> 00:12:34,620
action Association uh in garage

315
00:12:34,620 --> 00:12:37,620
architecture so before I conclude I'll

316
00:12:37,620 --> 00:12:39,899
leave you with some pointers to the

317
00:12:39,899 --> 00:12:41,640
paper and garota's open source

318
00:12:41,640 --> 00:12:43,620
repository where you can find all of the

319
00:12:43,620 --> 00:12:45,420
implementation uh the the computer

320
00:12:45,420 --> 00:12:49,320
proofs and the the toy use cases that I

321
00:12:49,320 --> 00:12:51,060
mentioned in the beginning that motivate

322
00:12:51,060 --> 00:12:53,760
the the girl to design and with that

323
00:12:53,760 --> 00:12:56,899
I'll be happy to take any questions

