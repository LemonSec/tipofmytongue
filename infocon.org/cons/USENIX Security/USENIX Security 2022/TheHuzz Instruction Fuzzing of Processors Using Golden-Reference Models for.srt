1
00:00:08,300 --> 00:00:11,160
okay thank you Dr Lee for the

2
00:00:11,160 --> 00:00:13,380
introduction ah hello everyone good

3
00:00:13,380 --> 00:00:15,660
morning I'm Rahul today I'll be

4
00:00:15,660 --> 00:00:17,580
presenting our research work on

5
00:00:17,580 --> 00:00:19,199
detecting software exploitable Hardware

6
00:00:19,199 --> 00:00:21,840
vulnerabilities in process designs using

7
00:00:21,840 --> 00:00:24,480
our instruction for the hus this is a

8
00:00:24,480 --> 00:00:25,859
joint work between Texas and M

9
00:00:25,859 --> 00:00:27,840
University and Technical University of

10
00:00:27,840 --> 00:00:30,439
darmstadt

11
00:00:30,779 --> 00:00:33,600
the motivation for our research work is

12
00:00:33,600 --> 00:00:34,559
the rising number of Hardware

13
00:00:34,559 --> 00:00:36,660
vulnerabilities even the commercial

14
00:00:36,660 --> 00:00:38,760
Hardware Designs that undergo rigorous

15
00:00:38,760 --> 00:00:40,800
testing using state-of-the-art tools are

16
00:00:40,800 --> 00:00:41,940
becoming victims of Hardware

17
00:00:41,940 --> 00:00:44,340
vulnerabilities when such bugs in

18
00:00:44,340 --> 00:00:46,020
Hardware get exploited from the software

19
00:00:46,020 --> 00:00:49,739
they pose serious security threat to the

20
00:00:49,739 --> 00:00:51,840
secure applications running on software

21
00:00:51,840 --> 00:00:53,879
because most of the times software

22
00:00:53,879 --> 00:00:55,500
applications assume that the hardware is

23
00:00:55,500 --> 00:00:56,640
trusted

24
00:00:56,640 --> 00:00:59,460
based on a study conducted in 2019 63

25
00:00:59,460 --> 00:01:01,140
percentage of organizations have said

26
00:01:01,140 --> 00:01:02,879
that they experienced at least one type

27
00:01:02,879 --> 00:01:04,379
of data breach due to Hardware

28
00:01:04,379 --> 00:01:07,140
vulnerabilities in the previous year

29
00:01:07,140 --> 00:01:09,420
micro organization started recording the

30
00:01:09,420 --> 00:01:12,180
harder vulnerability types in 2020 and

31
00:01:12,180 --> 00:01:15,299
we already have 113 of them

32
00:01:15,299 --> 00:01:18,119
the rising severity of this Hardware

33
00:01:18,119 --> 00:01:19,979
vulnerabilities have motivated our

34
00:01:19,979 --> 00:01:22,439
community to research newer and more

35
00:01:22,439 --> 00:01:26,040
efficient bug detection techniques that

36
00:01:26,040 --> 00:01:28,439
ah coin complement the existing

37
00:01:28,439 --> 00:01:30,060
traditional Hardware verification

38
00:01:30,060 --> 00:01:32,220
techniques like manual inspection formal

39
00:01:32,220 --> 00:01:34,380
verification and regression testing

40
00:01:34,380 --> 00:01:37,020
these existing techniques ah they either

41
00:01:37,020 --> 00:01:39,840
not scale well to large designs ah they

42
00:01:39,840 --> 00:01:41,640
are not automated or not efficient

43
00:01:41,640 --> 00:01:43,560
enough to detect bugs in the modern and

44
00:01:43,560 --> 00:01:45,360
complex Hardware

45
00:01:45,360 --> 00:01:48,180
fuzzing on the other hand is a new and

46
00:01:48,180 --> 00:01:50,100
promising approach in Hardware

47
00:01:50,100 --> 00:01:52,320
verification which can scale well to

48
00:01:52,320 --> 00:01:55,740
large designs it can be automated and it

49
00:01:55,740 --> 00:01:57,780
can penetrate into the complex designs

50
00:01:57,780 --> 00:02:00,060
and find bugs on them

51
00:02:00,060 --> 00:02:02,640
before I get into the design of our

52
00:02:02,640 --> 00:02:04,680
fuzzer I would like to highlight the

53
00:02:04,680 --> 00:02:05,939
pros and cons of existing hardware

54
00:02:05,939 --> 00:02:08,520
fuzzers and discuss the type of coverage

55
00:02:08,520 --> 00:02:10,739
metrics they use using this case study

56
00:02:10,739 --> 00:02:13,319
example the hardware logic we see here

57
00:02:13,319 --> 00:02:15,660
is a stripped down version of cache

58
00:02:15,660 --> 00:02:17,400
controller inspired from the one in

59
00:02:17,400 --> 00:02:20,520
Aryan open source risky processor

60
00:02:20,520 --> 00:02:24,500
it mainly has three components so

61
00:02:25,739 --> 00:02:28,260
the combination logic one generates a

62
00:02:28,260 --> 00:02:30,300
valid signal that determines when the

63
00:02:30,300 --> 00:02:32,400
cache should be activated and

64
00:02:32,400 --> 00:02:34,379
perform the input commands

65
00:02:34,379 --> 00:02:37,140
the max logic N2 uses a password

66
00:02:37,140 --> 00:02:40,080
checking mechanism to secure debug rates

67
00:02:40,080 --> 00:02:42,840
the mux logic in 3 determines when the

68
00:02:42,840 --> 00:02:44,819
cache should be flushed

69
00:02:44,819 --> 00:02:47,700
now we insert three bugs in this example

70
00:02:47,700 --> 00:02:49,860
one in each of the components

71
00:02:49,860 --> 00:02:52,800
bug one is in the combinational logic it

72
00:02:52,800 --> 00:02:54,900
activates the cache even when the enable

73
00:02:54,900 --> 00:02:57,660
input signal is not one this allows an

74
00:02:57,660 --> 00:02:59,519
attacker to bypass security mechanisms

75
00:02:59,519 --> 00:03:01,140
that rely on disabling the cache when

76
00:03:01,140 --> 00:03:03,480
performing untrusted operations

77
00:03:03,480 --> 00:03:06,720
debug in Max logic 2 allows debug reads

78
00:03:06,720 --> 00:03:08,340
even when the password is incorrect

79
00:03:08,340 --> 00:03:11,220
bypassing the password checking and the

80
00:03:11,220 --> 00:03:13,860
bug in mux logic 3 allows the cache to

81
00:03:13,860 --> 00:03:15,780
be flushed even when it is not enabled

82
00:03:15,780 --> 00:03:18,480
this allows an unauthorized attacker to

83
00:03:18,480 --> 00:03:19,860
corrupt the state of the cache and

84
00:03:19,860 --> 00:03:23,959
perform attacks like side channels

85
00:03:24,540 --> 00:03:26,940
so in order for a fuzzer to detect these

86
00:03:26,940 --> 00:03:28,920
bugs it needs to cover for the following

87
00:03:28,920 --> 00:03:30,599
features in Hardware

88
00:03:30,599 --> 00:03:33,000
for bug one the fuzzer needs to cover

89
00:03:33,000 --> 00:03:35,099
all possible combinations of input

90
00:03:35,099 --> 00:03:37,860
values for the combinational logic one

91
00:03:37,860 --> 00:03:40,019
for the books two and three the father

92
00:03:40,019 --> 00:03:42,659
needs to cover the select logic of muxas

93
00:03:42,659 --> 00:03:44,400
for all possible combinations of input

94
00:03:44,400 --> 00:03:46,379
values

95
00:03:46,379 --> 00:03:48,299
now let's look at the existing Hardware

96
00:03:48,299 --> 00:03:50,700
fuzzles arfaz is one of the first

97
00:03:50,700 --> 00:03:52,799
proposed Hardware fuzzer that can fuss

98
00:03:52,799 --> 00:03:55,799
any Hardware Designs

99
00:03:55,799 --> 00:03:58,440
it covers the select signals of muxas

100
00:03:58,440 --> 00:04:01,500
for example if you look at the max 3

101
00:04:01,500 --> 00:04:04,019
here its select signal is cell two and

102
00:04:04,019 --> 00:04:06,239
our first checks if the cell 2 signal

103
00:04:06,239 --> 00:04:09,659
takes a value of 0 and 1 or not

104
00:04:09,659 --> 00:04:12,959
hence it covers the box and Max 3. but

105
00:04:12,959 --> 00:04:15,060
the problem here is when we design

106
00:04:15,060 --> 00:04:18,600
Hardware muxos can be coded in two types

107
00:04:18,600 --> 00:04:21,060
mux can be coded as a control Logic for

108
00:04:21,060 --> 00:04:23,520
example using IF else constructs or it

109
00:04:23,520 --> 00:04:25,020
can also be coded as a purely

110
00:04:25,020 --> 00:04:26,759
combinational logic

111
00:04:26,759 --> 00:04:28,919
our first can detect the first type of

112
00:04:28,919 --> 00:04:31,620
muxas but if the muxes are coded in the

113
00:04:31,620 --> 00:04:33,900
second format it cannot detect them so

114
00:04:33,900 --> 00:04:36,240
for example in this case study if the

115
00:04:36,240 --> 00:04:38,520
mux 2 is coded as a combinational logic

116
00:04:38,520 --> 00:04:42,419
then rfas cannot detect it also arfus

117
00:04:42,419 --> 00:04:44,220
doesn't cover the activities in the

118
00:04:44,220 --> 00:04:46,020
combinational logic and flip flops so

119
00:04:46,020 --> 00:04:47,940
the bugs one and two are also not

120
00:04:47,940 --> 00:04:49,979
covered by Alphas

121
00:04:49,979 --> 00:04:52,139
also it is computationally expensive so

122
00:04:52,139 --> 00:04:55,680
it does not scale to large designs

123
00:04:55,680 --> 00:04:58,259
next we have differs RTL differs RTL is

124
00:04:58,259 --> 00:05:00,120
an improved version of rfas it

125
00:05:00,120 --> 00:05:01,919
eliminates the scalability issues in it

126
00:05:01,919 --> 00:05:05,400
and it is used to First process designs

127
00:05:05,400 --> 00:05:08,340
are differs RTL covers the registers

128
00:05:08,340 --> 00:05:10,979
driving the select logic of muxas for

129
00:05:10,979 --> 00:05:13,199
example here we have mux 3 and its

130
00:05:13,199 --> 00:05:15,900
select logic is the or gate and flush

131
00:05:15,900 --> 00:05:18,419
and enable are the registers that are

132
00:05:18,419 --> 00:05:21,479
driving the select logic so the first

133
00:05:21,479 --> 00:05:23,520
RTL checks if this flush and enable

134
00:05:23,520 --> 00:05:25,680
registers take all possible combinations

135
00:05:25,680 --> 00:05:27,720
of values which is zero zero zero one

136
00:05:27,720 --> 00:05:29,759
one zero and one one or not hence we can

137
00:05:29,759 --> 00:05:32,520
detect bug 3 using differs RTL

138
00:05:32,520 --> 00:05:35,100
but differs RTL also has the same issue

139
00:05:35,100 --> 00:05:37,259
in the sense that it doesn't detect Max

140
00:05:37,259 --> 00:05:40,139
2 and also doesn't cover the activity in

141
00:05:40,139 --> 00:05:42,000
combinational logic and flip flops so it

142
00:05:42,000 --> 00:05:44,280
does not directly cover the bugs one and

143
00:05:44,280 --> 00:05:45,060
two

144
00:05:45,060 --> 00:05:47,039
also the bug comparison happens at the

145
00:05:47,039 --> 00:05:48,419
end of the program in the processor

146
00:05:48,419 --> 00:05:51,620
which is not very efficient

147
00:05:52,259 --> 00:05:54,120
hyper fuzzing is another type of

148
00:05:54,120 --> 00:05:56,280
Hardware fuzzer it proposed new

149
00:05:56,280 --> 00:05:58,860
semantics for SOC security properties

150
00:05:58,860 --> 00:06:00,900
and it generates inputs to prove these

151
00:06:00,900 --> 00:06:03,120
properties so it's very useful when we

152
00:06:03,120 --> 00:06:05,039
want to accelerate property checking in

153
00:06:05,039 --> 00:06:07,800
the soc designs but it's not really

154
00:06:07,800 --> 00:06:11,100
applicable to generic Hardware like fsms

155
00:06:11,100 --> 00:06:13,020
and combination logic because the

156
00:06:13,020 --> 00:06:15,419
properties are more for Master Slave

157
00:06:15,419 --> 00:06:17,580
interactions and bus Communications

158
00:06:17,580 --> 00:06:19,080
we also need to write the security

159
00:06:19,080 --> 00:06:21,360
properties before we can start using the

160
00:06:21,360 --> 00:06:22,919
tool to verify the design

161
00:06:22,919 --> 00:06:24,780
also it only supports a specific

162
00:06:24,780 --> 00:06:26,880
Hardware simulator ah called very later

163
00:06:26,880 --> 00:06:29,940
so that limits its applicability

164
00:06:29,940 --> 00:06:32,280
last but not the least we have a triple

165
00:06:32,280 --> 00:06:34,319
little titled fuzzing Hardware as

166
00:06:34,319 --> 00:06:36,840
software this is another novel approach

167
00:06:36,840 --> 00:06:39,360
towards fuzzing Hardware what happens

168
00:06:39,360 --> 00:06:41,160
here is that we take a hardware design

169
00:06:41,160 --> 00:06:43,800
and convert it into C C plus plus code

170
00:06:43,800 --> 00:06:45,720
and then use software fuzzers to First

171
00:06:45,720 --> 00:06:46,740
the hardware

172
00:06:46,740 --> 00:06:48,960
the advantages of this tool is that we

173
00:06:48,960 --> 00:06:51,060
can quickly put the capabilities of

174
00:06:51,060 --> 00:06:54,419
software fuzzers to First Hardware

175
00:06:54,419 --> 00:06:57,900
but um it requires a

176
00:06:57,900 --> 00:06:59,819
H simulators like vary later which can

177
00:06:59,819 --> 00:07:02,400
convert the hardware design or which is

178
00:07:02,400 --> 00:07:04,680
basically a very long or vhdl code into

179
00:07:04,680 --> 00:07:07,680
C or C plus plus and it doesn't support

180
00:07:07,680 --> 00:07:09,600
a very low constructs like latches and

181
00:07:09,600 --> 00:07:11,460
floating wires so any bugs that are

182
00:07:11,460 --> 00:07:14,100
there involving this logic cannot be

183
00:07:14,100 --> 00:07:17,100
covered with this fuzzer

184
00:07:17,100 --> 00:07:19,199
in summary I discussed four existing

185
00:07:19,199 --> 00:07:21,539
Hardware fuzzers each of them differ in

186
00:07:21,539 --> 00:07:23,039
terms of either the type of component

187
00:07:23,039 --> 00:07:25,199
they cover or the scalability which is

188
00:07:25,199 --> 00:07:27,240
the largest design they first or the

189
00:07:27,240 --> 00:07:28,919
applicability which is the type of

190
00:07:28,919 --> 00:07:30,660
Hardware they can first the type of

191
00:07:30,660 --> 00:07:32,520
simulator they support or the number of

192
00:07:32,520 --> 00:07:34,919
bugs they reported

193
00:07:34,919 --> 00:07:37,560
now moving on to our fazer dihas I'll

194
00:07:37,560 --> 00:07:39,300
first explain the coverage Matrix used

195
00:07:39,300 --> 00:07:42,479
by the house and then the design itself

196
00:07:42,479 --> 00:07:45,539
as we can see on the right we categorize

197
00:07:45,539 --> 00:07:47,880
the hardware logic into various

198
00:07:47,880 --> 00:07:50,520
components like flip flops registers

199
00:07:50,520 --> 00:07:53,580
fsms control logic like muxes and

200
00:07:53,580 --> 00:07:55,199
combinational logic

201
00:07:55,199 --> 00:07:57,599
and dihous uses multiple different

202
00:07:57,599 --> 00:07:59,639
coverage metrics to cover each of these

203
00:07:59,639 --> 00:08:02,280
component for example we have the

204
00:08:02,280 --> 00:08:04,440
condition and expression coverage which

205
00:08:04,440 --> 00:08:07,380
cover the cover all the

206
00:08:07,380 --> 00:08:09,840
select logic and combinational Logic for

207
00:08:09,840 --> 00:08:11,400
all possible combinations of input

208
00:08:11,400 --> 00:08:13,919
values in the hardware using this we can

209
00:08:13,919 --> 00:08:15,300
detect all the three works that we

210
00:08:15,300 --> 00:08:16,860
previously inserted in this case study

211
00:08:16,860 --> 00:08:18,780
example in addition we also have

212
00:08:18,780 --> 00:08:20,580
coverage metrics like Branch toggle and

213
00:08:20,580 --> 00:08:22,560
FSM which cover the other Hardware

214
00:08:22,560 --> 00:08:25,080
components which overall capture all the

215
00:08:25,080 --> 00:08:27,060
activity going on in the hardware

216
00:08:27,060 --> 00:08:29,099
these coverage metrics are in fact used

217
00:08:29,099 --> 00:08:31,560
widely in the semiconductor industry and

218
00:08:31,560 --> 00:08:33,120
are commonly known as Hardware code

219
00:08:33,120 --> 00:08:36,080
coverage metrics

220
00:08:36,299 --> 00:08:38,700
this is the high level diagram of our

221
00:08:38,700 --> 00:08:40,080
fuzzer the house

222
00:08:40,080 --> 00:08:41,880
the fuzzing starts with the generation

223
00:08:41,880 --> 00:08:45,180
of seed inputs

224
00:08:45,180 --> 00:08:46,860
the inputs are nothing but binary

225
00:08:46,860 --> 00:08:48,600
executables because we are fuzzing

226
00:08:48,600 --> 00:08:50,940
process designs ah hence we use the

227
00:08:50,940 --> 00:08:52,620
instruction generator to generate the

228
00:08:52,620 --> 00:08:54,600
assembly level instructions using which

229
00:08:54,600 --> 00:08:57,300
we populate the input programs

230
00:08:57,300 --> 00:08:59,339
the processor is simulated with the

231
00:08:59,339 --> 00:09:01,560
inputs from the database one after the

232
00:09:01,560 --> 00:09:02,880
other

233
00:09:02,880 --> 00:09:05,040
and parallely we use a reference model

234
00:09:05,040 --> 00:09:08,459
which is either a Isa emulator or a

235
00:09:08,459 --> 00:09:10,440
software model of the hardware to

236
00:09:10,440 --> 00:09:12,660
generate the golden outputs to compare

237
00:09:12,660 --> 00:09:15,180
and detect bugs

238
00:09:15,180 --> 00:09:17,160
while the simulation is ongoing we

239
00:09:17,160 --> 00:09:19,260
capture the coverage information and

240
00:09:19,260 --> 00:09:21,899
analyze it to determine if a new path or

241
00:09:21,899 --> 00:09:23,220
logic is explored in the hardware

242
00:09:23,220 --> 00:09:25,800
because of the current input

243
00:09:25,800 --> 00:09:28,140
if yes then we mutate the current input

244
00:09:28,140 --> 00:09:30,180
using 12 types of mutation techniques

245
00:09:30,180 --> 00:09:32,399
that we have and generate newer inputs

246
00:09:32,399 --> 00:09:35,820
and populate them in the input database

247
00:09:35,820 --> 00:09:38,760
the change in ish state after the

248
00:09:38,760 --> 00:09:41,279
simulation of processor and the

249
00:09:41,279 --> 00:09:43,140
reference model for each instruction

250
00:09:43,140 --> 00:09:46,320
executed is compared and report and any

251
00:09:46,320 --> 00:09:48,660
mismatches are reported the cycle

252
00:09:48,660 --> 00:09:51,120
continues till we reach or desired

253
00:09:51,120 --> 00:09:55,519
preset time limit or coverage percentage

254
00:09:57,120 --> 00:09:59,880
we first four Real World open source

255
00:09:59,880 --> 00:10:02,580
processors using the house they are from

256
00:10:02,580 --> 00:10:05,100
Risky and open risk isas and are

257
00:10:05,100 --> 00:10:07,140
commonly used benchmarks when evaluating

258
00:10:07,140 --> 00:10:09,720
Hardware security tools and we found 11

259
00:10:09,720 --> 00:10:11,820
bucks including eight new ones that led

260
00:10:11,820 --> 00:10:13,440
to five CVS

261
00:10:13,440 --> 00:10:15,480
here I am showing five of the eight new

262
00:10:15,480 --> 00:10:17,880
bugs that Hindi has detected we found

263
00:10:17,880 --> 00:10:20,160
bugs in the decoder and cache controller

264
00:10:20,160 --> 00:10:22,500
logic of Aryan we found privileged

265
00:10:22,500 --> 00:10:25,620
released related bugs in mr1kx we found

266
00:10:25,620 --> 00:10:28,860
bucks in the ALU of what 100 so on and

267
00:10:28,860 --> 00:10:29,880
so forth

268
00:10:29,880 --> 00:10:33,240
to demonstrate the software implications

269
00:10:33,240 --> 00:10:36,000
of the hardware bugs found by our tool

270
00:10:36,000 --> 00:10:38,459
we crafted two exploits that can be run

271
00:10:38,459 --> 00:10:40,860
as user level programs

272
00:10:40,860 --> 00:10:43,260
the exploit one can perform arbitrary

273
00:10:43,260 --> 00:10:45,180
code execution bypassing the canary

274
00:10:45,180 --> 00:10:48,420
checks on a ren processor and the

275
00:10:48,420 --> 00:10:52,079
exploit 2 can do privilege escalation on

276
00:10:52,079 --> 00:10:54,060
mr1kx processor

277
00:10:54,060 --> 00:10:55,740
I am skipping the details in the

278
00:10:55,740 --> 00:10:57,420
interest of time for this exploits but

279
00:10:57,420 --> 00:11:00,120
you can check our paper for more details

280
00:11:00,120 --> 00:11:01,860
as far as the coverage results are

281
00:11:01,860 --> 00:11:04,079
concerned because is able to cover more

282
00:11:04,079 --> 00:11:06,000
number of points and also faster

283
00:11:06,000 --> 00:11:08,160
compared to the existing traditional

284
00:11:08,160 --> 00:11:09,720
regression techniques or existing

285
00:11:09,720 --> 00:11:11,480
state-of-the-art hardware

286
00:11:11,480 --> 00:11:13,800
and we also showed that the results are

287
00:11:13,800 --> 00:11:16,860
statistically significant in the paper

288
00:11:16,860 --> 00:11:19,320
in conclusion we designed a new hardware

289
00:11:19,320 --> 00:11:21,300
fuzzer to detect bugs in processor

290
00:11:21,300 --> 00:11:23,279
designs called the house it is

291
00:11:23,279 --> 00:11:25,620
compatible in the sense that we can fuzz

292
00:11:25,620 --> 00:11:28,140
any HDL using any commercial Hardware

293
00:11:28,140 --> 00:11:30,420
simulator so it's compatible with the

294
00:11:30,420 --> 00:11:32,640
existing verification flows it is

295
00:11:32,640 --> 00:11:34,380
automated starting from input generation

296
00:11:34,380 --> 00:11:36,959
to detecting the mismatches it is

297
00:11:36,959 --> 00:11:38,399
practical in the sense that it is easy

298
00:11:38,399 --> 00:11:40,860
to use it is efficient in detecting bugs

299
00:11:40,860 --> 00:11:43,500
in real world processor designs and can

300
00:11:43,500 --> 00:11:44,820
achieve higher coverage than the

301
00:11:44,820 --> 00:11:47,279
existing techniques we demonstrated the

302
00:11:47,279 --> 00:11:49,440
security impact of bugs using two

303
00:11:49,440 --> 00:11:52,700
exploits that we crafted

304
00:11:53,880 --> 00:11:55,560
because does have its own set of

305
00:11:55,560 --> 00:11:58,680
limitations features like fpga emulation

306
00:11:58,680 --> 00:12:01,140
fuzzing non-processor designs fuzzing

307
00:12:01,140 --> 00:12:02,640
for parametric properties of hardware

308
00:12:02,640 --> 00:12:04,740
and fuzzing to detect site Channel

309
00:12:04,740 --> 00:12:06,300
vulnerabilities are all part of our

310
00:12:06,300 --> 00:12:08,820
future work

311
00:12:08,820 --> 00:12:11,700
I would like to thank our sponsors onr

312
00:12:11,700 --> 00:12:14,100
and Intel for funding our research and

313
00:12:14,100 --> 00:12:15,959
also thank everyone here for attending

314
00:12:15,959 --> 00:12:19,219
the talk thank you

