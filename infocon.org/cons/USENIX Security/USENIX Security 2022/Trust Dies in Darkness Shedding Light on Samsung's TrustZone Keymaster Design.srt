1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:12,420 --> 00:00:16,500
trusted execution environments and the

3
00:00:16,500 --> 00:00:18,240
need for trusted execution environments

4
00:00:18,240 --> 00:00:20,520
comes from the fact that I'm sure that

5
00:00:20,520 --> 00:00:23,400
you are all well well putting more and

6
00:00:23,400 --> 00:00:26,000
more part of our daily activities inside

7
00:00:26,000 --> 00:00:29,039
computers and specifically also to the

8
00:00:29,039 --> 00:00:31,859
inside smartphones it could be a mobile9

9
00:00:31,859 --> 00:00:34,200
Fields like watching streaming videos

10
00:00:34,200 --> 00:00:36,780
but could be more critical things like

11
00:00:36,780 --> 00:00:40,440
very sensitive Communication in instant

12
00:00:40,440 --> 00:00:43,219
messaging apps and

13
00:00:43,219 --> 00:00:45,960
economic transactions you can control

14
00:00:45,960 --> 00:00:48,180
your bank account have Payment Systems

15
00:00:48,180 --> 00:00:50,940
inside of us inside your smartphones and

16
00:00:50,940 --> 00:00:52,680
you want to be able to protect them and

17
00:00:52,680 --> 00:00:53,820
actually investment deals there have

18
00:00:53,820 --> 00:00:56,399
been a lot of effort by most companies

19
00:00:56,399 --> 00:00:59,399
in order to make those smartphones more

20
00:00:59,399 --> 00:01:02,520
and more secure however as we repeatedly

21
00:01:02,520 --> 00:01:05,099
see time and time again Advanced

22
00:01:05,099 --> 00:01:06,780
attackers it could be nation state it

23
00:01:06,780 --> 00:01:10,080
could be companies like NSO are still

24
00:01:10,080 --> 00:01:11,880
able to break

25
00:01:11,880 --> 00:01:14,280
um all of the current mitigations and

26
00:01:14,280 --> 00:01:16,439
Productions and compromise the entire

27
00:01:16,439 --> 00:01:17,520
system

28
00:01:17,520 --> 00:01:20,759
and this means that we are in a problem

29
00:01:20,759 --> 00:01:23,759
and protecting this is very hard because

30
00:01:23,759 --> 00:01:26,400
the tech surface is huge we have very

31
00:01:26,400 --> 00:01:27,500
complex

32
00:01:27,500 --> 00:01:30,479
systems and software we have browsers we

33
00:01:30,479 --> 00:01:32,820
have videos and it's very hard to

34
00:01:32,820 --> 00:01:34,140
protect everything

35
00:01:34,140 --> 00:01:36,060
so

36
00:01:36,060 --> 00:01:39,720
um is everything lost and the response

37
00:01:39,720 --> 00:01:43,560
from for example from Intel arm MD is

38
00:01:43,560 --> 00:01:45,780
that we can try to do something a little

39
00:01:45,780 --> 00:01:48,060
bit different and basically what we can

40
00:01:48,060 --> 00:01:50,399
do is we're going to have two separate

41
00:01:50,399 --> 00:01:52,860
environments on our devices and this is

42
00:01:52,860 --> 00:01:54,720
for example the arm trust Zone that is

43
00:01:54,720 --> 00:01:57,000
used in Android and we're going to have

44
00:01:57,000 --> 00:01:58,740
the normal world where we have all of

45
00:01:58,740 --> 00:02:01,020
our regular applications and we're going

46
00:02:01,020 --> 00:02:03,420
to have the secure World which is going

47
00:02:03,420 --> 00:02:04,920
to be completely separated from the

48
00:02:04,920 --> 00:02:07,680
normal rod and it's going to have a much

49
00:02:07,680 --> 00:02:10,318
more limited functionality for example

50
00:02:10,318 --> 00:02:13,440
protection and use usage of cryptography

51
00:02:13,440 --> 00:02:15,360
keys so hopefully it will be easier to

52
00:02:15,360 --> 00:02:18,680
protect it and then even if the entire

53
00:02:18,680 --> 00:02:21,360
user space and kernel of our Android

54
00:02:21,360 --> 00:02:24,120
device is compromised and things that

55
00:02:24,120 --> 00:02:26,459
are protected by the trust Zone

56
00:02:26,459 --> 00:02:29,520
environment can still remain secure I'm

57
00:02:29,520 --> 00:02:32,040
going to see several use case for why is

58
00:02:32,040 --> 00:02:33,959
it is it still important

59
00:02:33,959 --> 00:02:36,720
so on this question was relatively

60
00:02:36,720 --> 00:02:39,660
simple does this work does it put elbow

61
00:02:39,660 --> 00:02:41,879
protected cryptographic is

62
00:02:41,879 --> 00:02:43,739
um though they still remain secure if

63
00:02:43,739 --> 00:02:44,940
the normal world is completely

64
00:02:44,940 --> 00:02:46,140
compromised

65
00:02:46,140 --> 00:02:48,000
and the other question is

66
00:02:48,000 --> 00:02:50,519
is it interesting are there any real use

67
00:02:50,519 --> 00:02:52,860
cases well we should have been protected

68
00:02:52,860 --> 00:02:56,300
even if the Android was completely

69
00:02:56,300 --> 00:02:59,360
compromised and and

70
00:02:59,360 --> 00:03:02,760
do we we should have had some security

71
00:03:02,760 --> 00:03:05,459
guarantees provided by the custom and

72
00:03:05,459 --> 00:03:08,099
those does it actually break now by

73
00:03:08,099 --> 00:03:10,440
higher level particles

74
00:03:10,440 --> 00:03:12,540
so we start with a small description of

75
00:03:12,540 --> 00:03:15,780
how do we actually protect keys in

76
00:03:15,780 --> 00:03:19,019
classroom and Trust Zone and we have an

77
00:03:19,019 --> 00:03:22,500
what you call TA or cluster applet and

78
00:03:22,500 --> 00:03:24,840
which is called the key master and and

79
00:03:24,840 --> 00:03:28,379
the white protect Keys is basically they

80
00:03:28,379 --> 00:03:30,000
don't have any long-term storage or

81
00:03:30,000 --> 00:03:30,900
something like that they don't really

82
00:03:30,900 --> 00:03:33,659
they don't want to handle the state so

83
00:03:33,659 --> 00:03:35,159
everything is controlled by the Android

84
00:03:35,159 --> 00:03:38,220
environment so the Android operating

85
00:03:38,220 --> 00:03:41,099
system going to request a custom to

86
00:03:41,099 --> 00:03:43,459
generate a new key and

87
00:03:43,459 --> 00:03:46,560
customers will for example generate a

88
00:03:46,560 --> 00:03:49,140
private public keeper and then it's

89
00:03:49,140 --> 00:03:53,099
going to send the the keys back to the

90
00:03:53,099 --> 00:03:55,260
Android environment in order to protect

91
00:03:55,260 --> 00:03:57,659
them we're going to encrypt those keys

92
00:03:57,659 --> 00:04:00,840
or wrap them in What's called the secure

93
00:04:00,840 --> 00:04:03,120
blob so basically we're going to encrypt

94
00:04:03,120 --> 00:04:04,980
the public key going to send it back to

95
00:04:04,980 --> 00:04:07,200
the Android operating system which will

96
00:04:07,200 --> 00:04:09,360
handle all of the long-term storage and

97
00:04:09,360 --> 00:04:11,340
everything that and actually

98
00:04:11,340 --> 00:04:13,739
so now we have an encrypted key but we

99
00:04:13,739 --> 00:04:15,840
actually want to do things with it so

100
00:04:15,840 --> 00:04:18,358
one thing that we can do is

101
00:04:18,358 --> 00:04:20,459
um try to have this attestation process

102
00:04:20,459 --> 00:04:23,280
where the thruston is going to attest to

103
00:04:23,280 --> 00:04:24,600
the fact that this key was actually

104
00:04:24,600 --> 00:04:26,940
generated securely inside the trust Zone

105
00:04:26,940 --> 00:04:30,060
this allows the Android environment to

106
00:04:30,060 --> 00:04:32,880
prove to third parties that um we're

107
00:04:32,880 --> 00:04:35,240
using keys that will actually

108
00:04:35,240 --> 00:04:38,100
generated securely

109
00:04:38,100 --> 00:04:40,080
and then we actually once we also want

110
00:04:40,080 --> 00:04:42,600
to use those keys so do we do it again

111
00:04:42,600 --> 00:04:45,419
we're going to send the encrypted blob

112
00:04:45,419 --> 00:04:48,320
to the trust Zone and asking

113
00:04:48,320 --> 00:04:50,639
can you please do this operation for

114
00:04:50,639 --> 00:04:51,960
example can you provide me with a

115
00:04:51,960 --> 00:04:54,479
signature the key will be decrypted

116
00:04:54,479 --> 00:04:56,580
inside the trazodone the signature will

117
00:04:56,580 --> 00:04:58,440
also be calculated inside the Thousand

118
00:04:58,440 --> 00:05:00,240
environment and then we're going to send

119
00:05:00,240 --> 00:05:01,500
back the result

120
00:05:01,500 --> 00:05:03,960
and the main thing here is that the

121
00:05:03,960 --> 00:05:05,820
plain text key material the private key

122
00:05:05,820 --> 00:05:07,919
in this case should never leave the

123
00:05:07,919 --> 00:05:10,139
custom operating system which should all

124
00:05:10,139 --> 00:05:13,759
it should always be protected

125
00:05:14,340 --> 00:05:16,080
um now

126
00:05:16,080 --> 00:05:19,500
um although arm sets the

127
00:05:19,500 --> 00:05:22,320
um the standard for I was the hardware

128
00:05:22,320 --> 00:05:24,900
um design how it's going to work they

129
00:05:24,900 --> 00:05:26,520
actually Implement implementation of the

130
00:05:26,520 --> 00:05:28,440
operating system that run inside the

131
00:05:28,440 --> 00:05:30,360
custom is something that's left to the

132
00:05:30,360 --> 00:05:32,400
different vendors and this is a very

133
00:05:32,400 --> 00:05:34,800
fragmented environment so even if you

134
00:05:34,800 --> 00:05:37,440
only look at Samsung devices and we have

135
00:05:37,440 --> 00:05:40,020
at least three different transform

136
00:05:40,020 --> 00:05:42,560
operating system and implemented and

137
00:05:42,560 --> 00:05:46,620
written by three different vendors and

138
00:05:46,620 --> 00:05:49,620
and also some combinations for example

139
00:05:49,620 --> 00:05:51,960
something that was initially developed

140
00:05:51,960 --> 00:05:54,120
by Qualcomm and then Samsung added some

141
00:05:54,120 --> 00:05:56,340
more code so there's a lot of different

142
00:05:56,340 --> 00:05:59,820
things to look at and of course this is

143
00:05:59,820 --> 00:06:03,000
very very critical so it should remain

144
00:06:03,000 --> 00:06:05,699
secret so none of the vendors provide

145
00:06:05,699 --> 00:06:07,620
any information or code on how they

146
00:06:07,620 --> 00:06:10,800
actually Implement fins inside

147
00:06:10,800 --> 00:06:13,080
um so we wanted to take a look at it and

148
00:06:13,080 --> 00:06:14,699
then it meant that we need to do some

149
00:06:14,699 --> 00:06:16,680
kind of reverse engineering and the

150
00:06:16,680 --> 00:06:18,000
first thing that we wanted to find out

151
00:06:18,000 --> 00:06:21,000
is how those keys are actually encrypted

152
00:06:21,000 --> 00:06:23,819
and maybe not very surprisingly the way

153
00:06:23,819 --> 00:06:25,740
that the skills are encrypted with using

154
00:06:25,740 --> 00:06:27,840
as GCM

155
00:06:27,840 --> 00:06:31,139
and the key is that is used the Hub

156
00:06:31,139 --> 00:06:33,539
derived key is something that's used by

157
00:06:33,539 --> 00:06:36,780
a key derivation function of a root

158
00:06:36,780 --> 00:06:38,400
encryption key that is protected in the

159
00:06:38,400 --> 00:06:41,460
hardware in also only be accessible

160
00:06:41,460 --> 00:06:44,100
inside the classroom and some kind of

161
00:06:44,100 --> 00:06:46,979
specific salt for the blob

162
00:06:46,979 --> 00:06:49,620
and then we also have an IV and for

163
00:06:49,620 --> 00:06:51,060
using both of them we're going to

164
00:06:51,060 --> 00:06:52,800
encrypt the key

165
00:06:52,800 --> 00:06:54,900
and the main thing that I wanted to

166
00:06:54,900 --> 00:06:56,880
understand is how

167
00:06:56,880 --> 00:06:59,639
um this salt and Ivy actually generated

168
00:06:59,639 --> 00:07:02,280
for the encryption process

169
00:07:02,280 --> 00:07:04,319
so of course there are no simple answer

170
00:07:04,319 --> 00:07:06,539
for this type of fins so we found out

171
00:07:06,539 --> 00:07:08,520
there are three different variants

172
00:07:08,520 --> 00:07:11,100
and there's what we call the v15 or V

173
00:07:11,100 --> 00:07:15,479
1.5 blob where we have um several

174
00:07:15,479 --> 00:07:16,080
um

175
00:07:16,080 --> 00:07:18,600
values that are concatenated in hash in

176
00:07:18,600 --> 00:07:20,699
order to generate the salt and the

177
00:07:20,699 --> 00:07:22,380
interesting thing about it is that all

178
00:07:22,380 --> 00:07:23,880
of those values are completely

179
00:07:23,880 --> 00:07:27,419
determined by the normal normal World by

180
00:07:27,419 --> 00:07:30,300
the untrusted Android environment

181
00:07:30,300 --> 00:07:32,520
we also have new newer version called

182
00:07:32,520 --> 00:07:36,419
v20 over 2.0 where there's two fields

183
00:07:36,419 --> 00:07:38,099
that are added and which are not

184
00:07:38,099 --> 00:07:39,479
controlled by the Android environment

185
00:07:39,479 --> 00:07:42,360
however they are constant for all keys

186
00:07:42,360 --> 00:07:44,520
that are encrypted and they are supposed

187
00:07:44,520 --> 00:07:47,099
to attest for the state of the device if

188
00:07:47,099 --> 00:07:49,880
it's sorted or not

189
00:07:49,979 --> 00:07:51,900
and this is something that we've seen in

190
00:07:51,900 --> 00:07:54,599
Galaxy S9 and in all newer Samsung

191
00:07:54,599 --> 00:07:57,979
devices we have the s

192
00:07:57,979 --> 00:08:01,199
above and we have the new version which

193
00:08:01,199 --> 00:08:03,479
also adds a Randomness field this

194
00:08:03,479 --> 00:08:05,160
Randomness is not controlled by the

195
00:08:05,160 --> 00:08:07,020
Android environment

196
00:08:07,020 --> 00:08:09,300
so it was a bit confusing but every time

197
00:08:09,300 --> 00:08:11,660
you see a lot of different will the

198
00:08:11,660 --> 00:08:13,560
cryptographic design there's usually

199
00:08:13,560 --> 00:08:15,780
some kind of of certification process

200
00:08:15,780 --> 00:08:18,479
behind it and all of those fields or

201
00:08:18,479 --> 00:08:20,819
something that's required by the mobile

202
00:08:20,819 --> 00:08:23,220
device fundamental protection profile of

203
00:08:23,220 --> 00:08:25,860
the common criteria that Samsung need to

204
00:08:25,860 --> 00:08:29,759
adhere to and the different generation

205
00:08:29,759 --> 00:08:32,279
require different fields

206
00:08:32,279 --> 00:08:35,039
okay so first we try to look at the

207
00:08:35,039 --> 00:08:36,360
Samsung S9

208
00:08:36,360 --> 00:08:38,159
and as we mentioned before download

209
00:08:38,159 --> 00:08:40,440
client can control the salt because all

210
00:08:40,440 --> 00:08:41,940
of the fields that are harsh inside the

211
00:08:41,940 --> 00:08:44,099
salt are controlled by the normal world

212
00:08:44,099 --> 00:08:46,980
and what we also find out was that the

213
00:08:46,980 --> 00:08:48,779
Android can actually control the IV

214
00:08:48,779 --> 00:08:51,480
normally it's generated it's randomly

215
00:08:51,480 --> 00:08:52,920
generated inside the test one but you

216
00:08:52,920 --> 00:08:54,839
can actually add a field that says no

217
00:08:54,839 --> 00:08:57,240
please use this IV

218
00:08:57,240 --> 00:09:00,060
and unsurprisingly if we have a counter

219
00:09:00,060 --> 00:09:01,800
mode encryption with Key reviews and

220
00:09:01,800 --> 00:09:04,800
ivory use we are able to decrypt fins so

221
00:09:04,800 --> 00:09:06,839
we have a very very simple process where

222
00:09:06,839 --> 00:09:09,660
we take some left key we're going to

223
00:09:09,660 --> 00:09:11,760
extract The Ivy and salt that was used

224
00:09:11,760 --> 00:09:13,680
for the encryption and then we can

225
00:09:13,680 --> 00:09:16,980
import a new key that we know and we

226
00:09:16,980 --> 00:09:19,680
know its value and require the

227
00:09:19,680 --> 00:09:22,140
encryption to use the the same sort and

228
00:09:22,140 --> 00:09:25,320
the same IV as was used in the in the

229
00:09:25,320 --> 00:09:27,000
unknown key then we solve everything

230
00:09:27,000 --> 00:09:30,000
together and we can get the key outside

231
00:09:30,000 --> 00:09:32,100
this is a very nice Force

232
00:09:32,100 --> 00:09:35,820
as attackers not as users

233
00:09:35,820 --> 00:09:37,680
um what this means and why is it

234
00:09:37,680 --> 00:09:40,080
interesting because for example when I

235
00:09:40,080 --> 00:09:42,600
generate a key I can also require a

236
00:09:42,600 --> 00:09:44,700
custom to have specific requirements for

237
00:09:44,700 --> 00:09:46,560
me to use them so for example if I have

238
00:09:46,560 --> 00:09:49,560
a signature key that can attest to a

239
00:09:49,560 --> 00:09:50,640
specific

240
00:09:50,640 --> 00:09:51,740
um

241
00:09:51,740 --> 00:09:55,680
transaction and I can ask to ask them to

242
00:09:55,680 --> 00:09:59,160
verify my fingerprint before signing it

243
00:09:59,160 --> 00:10:02,700
so only if even if my device was

244
00:10:02,700 --> 00:10:04,920
compromised I still have a secure prompt

245
00:10:04,920 --> 00:10:06,060
that will show me this is the

246
00:10:06,060 --> 00:10:07,620
transaction do you actually want to sign

247
00:10:07,620 --> 00:10:09,540
it and only if I give my fingerprint to

248
00:10:09,540 --> 00:10:12,899
the device and this will work but now if

249
00:10:12,899 --> 00:10:14,820
you're able to recover the keys we don't

250
00:10:14,820 --> 00:10:16,320
need the user anymore we can simply take

251
00:10:16,320 --> 00:10:18,540
away all of the money

252
00:10:18,540 --> 00:10:21,120
and so this works for all the devices

253
00:10:21,120 --> 00:10:23,399
specifically S9 and we want to see what

254
00:10:23,399 --> 00:10:25,019
happens with the new devices are they

255
00:10:25,019 --> 00:10:26,640
actually more secure

256
00:10:26,640 --> 00:10:29,000
so again because there's the randomized

257
00:10:29,000 --> 00:10:32,100
randomized salt and does not leave a key

258
00:10:32,100 --> 00:10:33,480
use attack

259
00:10:33,480 --> 00:10:36,120
however we did find out that there

260
00:10:36,120 --> 00:10:38,220
exists latent code that is not used

261
00:10:38,220 --> 00:10:40,920
anywhere that allows us to create the

262
00:10:40,920 --> 00:10:43,320
older version of the 15 blobs which do

263
00:10:43,320 --> 00:10:45,240
not have this randomness

264
00:10:45,240 --> 00:10:47,640
so now what we see is the privileged

265
00:10:47,640 --> 00:10:49,440
attacker we can do a downgrade attack

266
00:10:49,440 --> 00:10:52,320
and force all of the blobs to and be

267
00:10:52,320 --> 00:10:54,180
damn good to the older and vulnerable

268
00:10:54,180 --> 00:10:55,079
version

269
00:10:55,079 --> 00:10:57,600
you can ask again why is it interesting

270
00:10:57,600 --> 00:10:59,100
because I'm already controlling the

271
00:10:59,100 --> 00:11:01,320
device and it's only for new blobs

272
00:11:01,320 --> 00:11:02,519
so

273
00:11:02,519 --> 00:11:04,079
um for example we can take the use case

274
00:11:04,079 --> 00:11:07,019
of Fido web fido2 web authentication

275
00:11:07,019 --> 00:11:10,079
it's supposed to allow us to dedicate

276
00:11:10,079 --> 00:11:12,839
without using passwords and the main

277
00:11:12,839 --> 00:11:14,459
idea here is that we're going to have a

278
00:11:14,459 --> 00:11:17,760
keys that are stored and used inside a

279
00:11:17,760 --> 00:11:21,180
secure platform on the Decatur and this

280
00:11:21,180 --> 00:11:23,399
um supposed to be able to protect

281
00:11:23,399 --> 00:11:25,140
against key extraction and also against

282
00:11:25,140 --> 00:11:27,959
cloning of the token so for example if I

283
00:11:27,959 --> 00:11:29,459
have an access to an Enterprise Network

284
00:11:29,459 --> 00:11:32,279
I can't clone my my key and allow other

285
00:11:32,279 --> 00:11:33,779
people to use it

286
00:11:33,779 --> 00:11:36,240
so instead of having an outside outdoor

287
00:11:36,240 --> 00:11:38,160
token we can actually use our smartphone

288
00:11:38,160 --> 00:11:40,440
which most of us have all the time and

289
00:11:40,440 --> 00:11:42,140
use the Trust on in order to protect

290
00:11:42,140 --> 00:11:45,240
those keys and the way that we do it is

291
00:11:45,240 --> 00:11:47,040
again use this attestation property that

292
00:11:47,040 --> 00:11:49,500
we talked about in order to prove to the

293
00:11:49,500 --> 00:11:51,360
server that those keys are secured

294
00:11:51,360 --> 00:11:53,040
inside the trust Zone and they cannot be

295
00:11:53,040 --> 00:11:54,000
cloned

296
00:11:54,000 --> 00:11:56,880
so now what we can do is actually

297
00:11:56,880 --> 00:11:59,060
um step inside an attacker inside the

298
00:11:59,060 --> 00:12:01,980
registration process first the keys that

299
00:12:01,980 --> 00:12:04,860
are used for the Fido registration to be

300
00:12:04,860 --> 00:12:06,360
downgraded to the other vulnerable

301
00:12:06,360 --> 00:12:10,019
version and then we can use the still

302
00:12:10,019 --> 00:12:11,940
use the phone in order to authenticate

303
00:12:11,940 --> 00:12:13,800
but we also don't need the phone anymore

304
00:12:13,800 --> 00:12:17,100
because we are able to retrieve the keys

305
00:12:17,100 --> 00:12:21,060
and we have a demo and where we show how

306
00:12:21,060 --> 00:12:23,000
the downgrade attack can allow us to

307
00:12:23,000 --> 00:12:27,060
extract the keys and then use a demo

308
00:12:27,060 --> 00:12:28,680
application for video 2 in order to show

309
00:12:28,680 --> 00:12:30,540
that we can actually connect without

310
00:12:30,540 --> 00:12:34,040
using the custom at all

311
00:12:34,200 --> 00:12:36,440
um where the very interesting

312
00:12:36,440 --> 00:12:38,640
responsible disclosure process with

313
00:12:38,640 --> 00:12:42,000
Samsung we started by reporting that I

314
00:12:42,000 --> 00:12:44,760
will use the tech on Galaxy S9 they're

315
00:12:44,760 --> 00:12:47,220
all very cooperative and three months

316
00:12:47,220 --> 00:12:49,079
later they already patched all of the

317
00:12:49,079 --> 00:12:50,700
affected devices though much more than

318
00:12:50,700 --> 00:12:53,820
just S9

319
00:12:53,820 --> 00:12:56,220
um we also mentioned that there's a

320
00:12:56,220 --> 00:12:57,959
possibility for downgrade attack on S9

321
00:12:57,959 --> 00:12:59,639
they wrote to us that it doesn't really

322
00:12:59,639 --> 00:13:03,839
matter because nobody use an old version

323
00:13:03,839 --> 00:13:04,620
um

324
00:13:04,620 --> 00:13:06,660
then we reported that they don't get

325
00:13:06,660 --> 00:13:10,560
attack on S10 s20 and S21 and again they

326
00:13:10,560 --> 00:13:12,240
say okay this is nice but we don't feel

327
00:13:12,240 --> 00:13:14,459
there's actually any particle security

328
00:13:14,459 --> 00:13:16,740
impact from this

329
00:13:16,740 --> 00:13:18,360
and so then we sent them the full paper

330
00:13:18,360 --> 00:13:22,440
including the damn on fido2 and this

331
00:13:22,440 --> 00:13:24,120
caused them to change the money a little

332
00:13:24,120 --> 00:13:25,800
bit so after reviewing and

333
00:13:25,800 --> 00:13:27,899
reinvestigating say okay we feel that

334
00:13:27,899 --> 00:13:31,079
maybe this has some practical impact and

335
00:13:31,079 --> 00:13:34,560
the realistic High severity cve and

336
00:13:34,560 --> 00:13:37,380
overall I feel that over 100 million

337
00:13:37,380 --> 00:13:39,240
devices were affected by

338
00:13:39,240 --> 00:13:41,399
um by those bugs

339
00:13:41,399 --> 00:13:43,980
and and as you know about it is that

340
00:13:43,980 --> 00:13:46,560
after one year well they were alone

341
00:13:46,560 --> 00:13:48,740
worked on reverse engineering everything

342
00:13:48,740 --> 00:13:52,079
and the LaPlace attack group actually

343
00:13:52,079 --> 00:13:54,480
leaked the GitHub repo of the Samsung

344
00:13:54,480 --> 00:13:56,519
Tristan it was nice for us because we

345
00:13:56,519 --> 00:13:58,139
could actually see the code and the

346
00:13:58,139 --> 00:14:00,600
patches that they made in order to patch

347
00:14:00,600 --> 00:14:03,839
the batch of Fin and then maybe the

348
00:14:03,839 --> 00:14:05,279
interesting thought is that it's usually

349
00:14:05,279 --> 00:14:07,740
like commenting out itself to seal but

350
00:14:07,740 --> 00:14:10,800
coming in coming out a couple of lines

351
00:14:10,800 --> 00:14:12,720
then that's it we simply don't allow the

352
00:14:12,720 --> 00:14:14,639
user to choose the ID we don't allow

353
00:14:14,639 --> 00:14:16,139
them to choose the version

354
00:14:16,139 --> 00:14:17,700
and again this is for the downward

355
00:14:17,700 --> 00:14:18,940
attack

356
00:14:18,940 --> 00:14:19,740
[Music]

357
00:14:19,740 --> 00:14:20,760
um

358
00:14:20,760 --> 00:14:25,980
so in conclusion it's 2022 but still I

359
00:14:25,980 --> 00:14:28,320
guess it we should keep on saying it

360
00:14:28,320 --> 00:14:30,959
there is no security by obscurity there

361
00:14:30,959 --> 00:14:34,860
was a lot of really longing and low low

362
00:14:34,860 --> 00:14:36,660
level cryptographic issues that could

363
00:14:36,660 --> 00:14:38,060
and should have been

364
00:14:38,060 --> 00:14:40,940
solved way before we looked at it

365
00:14:40,940 --> 00:14:43,680
moreover it creates compatibility gaps

366
00:14:43,680 --> 00:14:45,360
with the higher level protocols for

367
00:14:45,360 --> 00:14:46,920
example the feeder protocol does not

368
00:14:46,920 --> 00:14:49,260
know it actually needs to attest the

369
00:14:49,260 --> 00:14:51,660
specific method that was used to wrap

370
00:14:51,660 --> 00:14:54,240
the keys because they are not aware that

371
00:14:54,240 --> 00:14:57,060
there are any different methods and it

372
00:14:57,060 --> 00:14:58,279
prevents

373
00:14:58,279 --> 00:15:00,300
independent research from time to

374
00:15:00,300 --> 00:15:02,579
actually do some formal analysis and

375
00:15:02,579 --> 00:15:04,440
trying to prove the security properties

376
00:15:04,440 --> 00:15:07,680
of the Spartacus and we do have a new

377
00:15:07,680 --> 00:15:09,300
Android attestation solution that is

378
00:15:09,300 --> 00:15:11,160
currently being promoted by Google which

379
00:15:11,160 --> 00:15:12,720
you think is a good start

380
00:15:12,720 --> 00:15:15,300
and also we should probably reiterate

381
00:15:15,300 --> 00:15:17,100
the fact that after Decades of fiber use

382
00:15:17,100 --> 00:15:19,920
attack on sgcm maybe it's time to stop

383
00:15:19,920 --> 00:15:21,959
using this type of Primitives and move

384
00:15:21,959 --> 00:15:25,380
on to move to misuse resistant Solutions

385
00:15:25,380 --> 00:15:27,180
again where for example the think

386
00:15:27,180 --> 00:15:28,860
library that tries to do it there are

387
00:15:28,860 --> 00:15:30,420
many others

388
00:15:30,420 --> 00:15:34,320
um as GCM should be retired

389
00:15:34,320 --> 00:15:36,420
okay thank you very much we'll be happy

390
00:15:36,420 --> 00:15:39,380
to answer any questions

