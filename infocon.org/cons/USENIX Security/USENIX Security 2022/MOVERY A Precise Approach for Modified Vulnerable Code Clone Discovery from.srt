1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:09,820 --> 00:00:12,380
[Music]

3
00:00:12,380 --> 00:00:15,059
a pre-sizer approach for discovering

4
00:00:15,059 --> 00:00:17,279
propagate model of a code from modified

5
00:00:17,279 --> 00:00:19,680
open source software components I'm

6
00:00:19,680 --> 00:00:22,460
simunu from Korean diversity

7
00:00:22,460 --> 00:00:24,960
and history also work together to write

8
00:00:24,960 --> 00:00:26,760
this paper

9
00:00:26,760 --> 00:00:29,099
so the reusable open source software

10
00:00:29,099 --> 00:00:31,859
project becomes a trend a recent

11
00:00:31,859 --> 00:00:34,140
software development because developers

12
00:00:34,140 --> 00:00:36,660
can reuse their desired functionalities

13
00:00:36,660 --> 00:00:38,960
from the rich OSS pool

14
00:00:38,960 --> 00:00:42,600
despite the advantages of managed OSS

15
00:00:42,600 --> 00:00:45,960
reuse can produce several problems such

16
00:00:45,960 --> 00:00:47,940
as vulnerability propagation

17
00:00:47,940 --> 00:00:51,239
since the propagates more code fragment

18
00:00:51,239 --> 00:00:54,059
can can compromise the entire software

19
00:00:54,059 --> 00:00:56,520
security many existing approaches

20
00:00:56,520 --> 00:00:58,440
attempt to detect the propagate one of

21
00:00:58,440 --> 00:00:59,280
the code

22
00:00:59,280 --> 00:01:02,820
but however recently most developers

23
00:01:02,820 --> 00:01:05,760
reuse OSS project with code or structure

24
00:01:05,760 --> 00:01:07,280
modifications

25
00:01:07,280 --> 00:01:09,720
especially in the languages that code

26
00:01:09,720 --> 00:01:12,360
Rebel uses prevalence such as CNC plus

27
00:01:12,360 --> 00:01:13,820
plus

28
00:01:13,820 --> 00:01:16,439
so it is very difficult to discover

29
00:01:16,439 --> 00:01:18,720
propagate boundary of a code with code

30
00:01:18,720 --> 00:01:19,880
changes

31
00:01:19,880 --> 00:01:22,500
those therefore the main research

32
00:01:22,500 --> 00:01:25,080
question of our study is how can he

33
00:01:25,080 --> 00:01:27,240
precisely discover propagate boundary

34
00:01:27,240 --> 00:01:30,299
code with parasyn taxes

35
00:01:30,299 --> 00:01:32,700
we found that the two major reasons for

36
00:01:32,700 --> 00:01:34,380
the syntax diversary of propagate

37
00:01:34,380 --> 00:01:37,079
polynomial code in Turner and external

38
00:01:37,079 --> 00:01:39,000
modifications of OSS

39
00:01:39,000 --> 00:01:41,400
so the OSS source code frequently

40
00:01:41,400 --> 00:01:44,340
changes during the OS test updates in

41
00:01:44,340 --> 00:01:46,799
this context a vulnerable code May

42
00:01:46,799 --> 00:01:49,200
propagate to other software with the

43
00:01:49,200 --> 00:01:51,060
different syntaxes depending on the

44
00:01:51,060 --> 00:01:52,880
reused OS dispersion

45
00:01:52,880 --> 00:01:56,100
and also developers can change the

46
00:01:56,100 --> 00:01:58,380
syntax of the vulnerable code during the

47
00:01:58,380 --> 00:02:00,840
OSS reviews process

48
00:02:00,840 --> 00:02:03,780
so this is an example syntax laboratory

49
00:02:03,780 --> 00:02:05,840
caused by the internal OSS modification

50
00:02:05,840 --> 00:02:08,699
this device vulnerability originally

51
00:02:08,699 --> 00:02:12,300
existed in the Rua code base and then it

52
00:02:12,300 --> 00:02:14,400
propagated to the radius code base which

53
00:02:14,400 --> 00:02:16,760
we used the vulnerable version of Rua

54
00:02:16,760 --> 00:02:19,500
although those two functions contain the

55
00:02:19,500 --> 00:02:21,900
same vulnerability we can see that the

56
00:02:21,900 --> 00:02:23,700
syntax of two functions is quite

57
00:02:23,700 --> 00:02:25,860
different going to the internal

58
00:02:25,860 --> 00:02:27,420
modification

59
00:02:27,420 --> 00:02:30,720
so the Rua development team fixed this

60
00:02:30,720 --> 00:02:34,500
vulnerability in Lua 5.2.3 but the

61
00:02:34,500 --> 00:02:36,720
redist team reused much older version of

62
00:02:36,720 --> 00:02:40,379
their 5.1 so because of the multiple OSS

63
00:02:40,379 --> 00:02:43,319
updates between the two versions uh the

64
00:02:43,319 --> 00:02:45,780
the syntax so propagate vulnerable code

65
00:02:45,780 --> 00:02:48,000
exhibits a different syntax with the

66
00:02:48,000 --> 00:02:50,879
disclosed vulnerable function

67
00:02:50,879 --> 00:02:53,480
or into the such syntax diversary

68
00:02:53,480 --> 00:02:56,519
existing approaches failed to detect the

69
00:02:56,519 --> 00:02:58,620
this kind of propagate panel of a code

70
00:02:58,620 --> 00:03:02,040
one example is redevog a polynomial code

71
00:03:02,040 --> 00:03:04,680
detection approach that considers nearby

72
00:03:04,680 --> 00:03:07,080
three lines of deleted and edited code

73
00:03:07,080 --> 00:03:08,580
lines from the patch

74
00:03:08,580 --> 00:03:11,340
so in this case they consider the seven

75
00:03:11,340 --> 00:03:13,379
seven code lines in the raft custody PAD

76
00:03:13,379 --> 00:03:15,599
as the signature but the propagate

77
00:03:15,599 --> 00:03:17,700
vulnerable code does not contain the

78
00:03:17,700 --> 00:03:20,220
seven chord lines so ready work failed

79
00:03:20,220 --> 00:03:22,860
to detect this bubble code

80
00:03:22,860 --> 00:03:26,159
and the other example is body a scalable

81
00:03:26,159 --> 00:03:28,680
approach for detect propagate polymer of

82
00:03:28,680 --> 00:03:31,440
a code body considers a whole vulnerable

83
00:03:31,440 --> 00:03:34,680
function as the signature but in this

84
00:03:34,680 --> 00:03:37,860
case obviously the syntax of the two

85
00:03:37,860 --> 00:03:39,360
vulnerable functions is quite different

86
00:03:39,360 --> 00:03:42,780
so but it also misses this vulnerability

87
00:03:42,780 --> 00:03:45,120
to overcome this problem we present

88
00:03:45,120 --> 00:03:46,319
mubury

89
00:03:46,319 --> 00:03:50,060
a noble approach to precisely discover

90
00:03:50,060 --> 00:03:52,560
propagation of code with various indexes

91
00:03:52,560 --> 00:03:54,720
so the two key techniques used in

92
00:03:54,720 --> 00:03:57,360
mulberries are function collation and

93
00:03:57,360 --> 00:03:58,940
core line extraction

94
00:03:58,940 --> 00:04:01,620
before I will introduce the mechanism of

95
00:04:01,620 --> 00:04:03,980
the Mulberry we first let us from that

96
00:04:03,980 --> 00:04:07,739
oldest vulnerable function as fo and

97
00:04:07,739 --> 00:04:11,099
after server OSS updates the redist I

98
00:04:11,099 --> 00:04:12,720
mean the disclosed vulnerable function

99
00:04:12,720 --> 00:04:16,019
as FD and after applying the patch let's

100
00:04:16,019 --> 00:04:19,918
define the patch head function as FP

101
00:04:19,918 --> 00:04:22,320
so mubari first generate vulnerability

102
00:04:22,320 --> 00:04:24,780
and Patch signatures for a vulnerability

103
00:04:24,780 --> 00:04:27,479
and then and then try to discover the

104
00:04:27,479 --> 00:04:29,639
propagate point of Code by using the

105
00:04:29,639 --> 00:04:31,440
generate signatures

106
00:04:31,440 --> 00:04:34,500
so uh I will I'll introduce the

107
00:04:34,500 --> 00:04:36,180
mechanism of memory by using the working

108
00:04:36,180 --> 00:04:38,280
Example The Hip buffer overflow

109
00:04:38,280 --> 00:04:41,100
vulnerability existed in Jasper so this

110
00:04:41,100 --> 00:04:42,419
is the patch snippet of the

111
00:04:42,419 --> 00:04:44,580
vulnerability

112
00:04:44,580 --> 00:04:47,699
so mubury first collates the oldest and

113
00:04:47,699 --> 00:04:49,919
the disclosed vulnerable function

114
00:04:49,919 --> 00:04:52,560
and by collating those two functions

115
00:04:52,560 --> 00:04:55,320
Mulberry extracted only the core lines

116
00:04:55,320 --> 00:04:57,240
that are directly related to the

117
00:04:57,240 --> 00:04:59,940
vulnerability manifestation

118
00:04:59,940 --> 00:05:02,400
uh specifically mubury considers the

119
00:05:02,400 --> 00:05:04,560
following three types of core lines

120
00:05:04,560 --> 00:05:06,960
essential dependent and control flow

121
00:05:06,960 --> 00:05:08,040
code lines

122
00:05:08,040 --> 00:05:10,440
so the essential code lines refer to the

123
00:05:10,440 --> 00:05:12,300
code lines that are deleted from the

124
00:05:12,300 --> 00:05:15,300
patch and exist in both all these and

125
00:05:15,300 --> 00:05:17,419
the disclosed vulnerable functions

126
00:05:17,419 --> 00:05:20,160
and dependent called lice indicate the

127
00:05:20,160 --> 00:05:22,680
code lines that have control or data

128
00:05:22,680 --> 00:05:24,240
dependencies with the essential code

129
00:05:24,240 --> 00:05:27,360
line and last the control of local lines

130
00:05:27,360 --> 00:05:30,120
refer to the control statement that

131
00:05:30,120 --> 00:05:31,979
exists in both the oldest and the

132
00:05:31,979 --> 00:05:34,139
Discord smaller function

133
00:05:34,139 --> 00:05:36,600
so my very first extract the essential

134
00:05:36,600 --> 00:05:38,820
code lines from the patch so among the

135
00:05:38,820 --> 00:05:40,919
three code lines that were deleted from

136
00:05:40,919 --> 00:05:43,860
the patch only the line number nine is

137
00:05:43,860 --> 00:05:45,960
contained in both the oldest and the

138
00:05:45,960 --> 00:05:48,300
disclosed vulnerable function so Uber

139
00:05:48,300 --> 00:05:50,400
extracted the line number nine as the

140
00:05:50,400 --> 00:05:52,919
essential code line

141
00:05:52,919 --> 00:05:56,340
and next remember you can extract the

142
00:05:56,340 --> 00:05:58,759
dependent code lines from the code

143
00:05:58,759 --> 00:06:01,440
so mubari considered the dependent code

144
00:06:01,440 --> 00:06:03,300
lines to determine whether the

145
00:06:03,300 --> 00:06:05,940
vulnerability trigger environment has

146
00:06:05,940 --> 00:06:08,460
also propagated to the Target program

147
00:06:08,460 --> 00:06:10,440
so in this case the right number eight

148
00:06:10,440 --> 00:06:13,259
which is the control dependency with the

149
00:06:13,259 --> 00:06:15,240
essential code line and the line number

150
00:06:15,240 --> 00:06:17,639
14 which says the data dependency with

151
00:06:17,639 --> 00:06:19,860
the essential code lines are extracted

152
00:06:19,860 --> 00:06:22,680
as the dependent code lines

153
00:06:22,680 --> 00:06:25,020
and finally mover extracted the control

154
00:06:25,020 --> 00:06:27,960
of local lines so sometimes developers

155
00:06:27,960 --> 00:06:30,539
try to resolve the propagate owner of a

156
00:06:30,539 --> 00:06:32,759
code by adding some conditional

157
00:06:32,759 --> 00:06:34,620
statement into the vulnerable function

158
00:06:34,620 --> 00:06:37,160
such as code sensitization

159
00:06:37,160 --> 00:06:39,660
considered a control flow code lines to

160
00:06:39,660 --> 00:06:41,520
determine whether the essential code

161
00:06:41,520 --> 00:06:43,620
line has to reach trouble with the same

162
00:06:43,620 --> 00:06:45,240
conditions used in the original

163
00:06:45,240 --> 00:06:46,860
vulnerable function

164
00:06:46,860 --> 00:06:48,720
so in this case the line number three

165
00:06:48,720 --> 00:06:50,460
and also the Ram with eight are

166
00:06:50,460 --> 00:06:53,699
extracted as the control flow code lines

167
00:06:53,699 --> 00:06:55,979
so by gathering all the essentially

168
00:06:55,979 --> 00:06:58,380
dependent and control flow code Lines

169
00:06:58,380 --> 00:07:00,720
Moving generates the vulnerability

170
00:07:00,720 --> 00:07:03,900
signature of this vulnerability a set of

171
00:07:03,900 --> 00:07:07,199
core code lines

172
00:07:07,199 --> 00:07:09,180
and then move Warriors to generate the

173
00:07:09,180 --> 00:07:12,240
patch signature by using the similar

174
00:07:12,240 --> 00:07:14,460
approach that is used in generating the

175
00:07:14,460 --> 00:07:17,280
vulnerability signature but in this case

176
00:07:17,280 --> 00:07:19,440
instead of consider the code lines that

177
00:07:19,440 --> 00:07:21,840
are deleted from the patch but very

178
00:07:21,840 --> 00:07:23,880
consider the code lines that are added

179
00:07:23,880 --> 00:07:26,160
from the patch

180
00:07:26,160 --> 00:07:28,860
and after generating the vulnerability

181
00:07:28,860 --> 00:07:32,580
and Patch signature mobile then tried to

182
00:07:32,580 --> 00:07:36,000
discover the propagate on our code so if

183
00:07:36,000 --> 00:07:38,479
I function f in the Target program

184
00:07:38,479 --> 00:07:40,500
satisfies all the following three

185
00:07:40,500 --> 00:07:41,639
conditions

186
00:07:41,639 --> 00:07:43,800
mobile determines that the function f is

187
00:07:43,800 --> 00:07:45,720
the propaganda of the code

188
00:07:45,720 --> 00:07:49,080
so if F contains all the code lines in

189
00:07:49,080 --> 00:07:51,120
the vulnerability signature

190
00:07:51,120 --> 00:07:54,419
if F does not contain any code lines in

191
00:07:54,419 --> 00:07:57,479
the patch signature and if the syntax

192
00:07:57,479 --> 00:08:00,300
server is similar to the oldest or the

193
00:08:00,300 --> 00:08:02,639
disclosed vulnerable functions blueberry

194
00:08:02,639 --> 00:08:05,039
considers that f is the propagate point

195
00:08:05,039 --> 00:08:06,060
of code

196
00:08:06,060 --> 00:08:08,400
so to measure the syntax similarly

197
00:08:08,400 --> 00:08:11,160
between two functions we used the

198
00:08:11,160 --> 00:08:13,199
charcard index by considering the

199
00:08:13,199 --> 00:08:16,819
function as a set of code lines

200
00:08:17,099 --> 00:08:20,280
to evaluate Mulberry we collected more

201
00:08:20,280 --> 00:08:24,479
than 4 000 CV Patches from the MBD and

202
00:08:24,479 --> 00:08:26,940
we selected 10 Target programs that are

203
00:08:26,940 --> 00:08:29,400
popular and contain a sufficient number

204
00:08:29,400 --> 00:08:32,339
of OSS components so the selected 10

205
00:08:32,339 --> 00:08:34,260
Target programs is summarized in the

206
00:08:34,260 --> 00:08:35,458
table

207
00:08:35,458 --> 00:08:38,640
and we selected the threshold Theta as

208
00:08:38,640 --> 00:08:41,640
0.5 which is used in measuring the

209
00:08:41,640 --> 00:08:45,720
syntax similarity between two functions

210
00:08:45,720 --> 00:08:48,000
and also we selected two comparison

211
00:08:48,000 --> 00:08:50,459
targets redevog and body

212
00:08:50,459 --> 00:08:52,980
and when we applied a redeveloped body

213
00:08:52,980 --> 00:08:55,080
and move body to the selected 10 Target

214
00:08:55,080 --> 00:08:58,279
programs they could discover

215
00:08:58,279 --> 00:09:01,200
434 propagate boundary of a code from

216
00:09:01,200 --> 00:09:04,920
the selected Target programs uh we we

217
00:09:04,920 --> 00:09:06,300
confirmed that blueberry is

218
00:09:06,300 --> 00:09:07,920
significantly outperformed the

219
00:09:07,920 --> 00:09:10,320
Redevelopment body because mubury could

220
00:09:10,320 --> 00:09:12,720
discover more than 400 one over code

221
00:09:12,720 --> 00:09:15,720
with 96 percent of precision and recore

222
00:09:15,720 --> 00:09:19,140
but really Vogue and body uh which did

223
00:09:19,140 --> 00:09:21,300
not fully consider the OSS modifications

224
00:09:21,300 --> 00:09:24,120
a failed to discover many correct

225
00:09:24,120 --> 00:09:25,980
propagation of a code

226
00:09:25,980 --> 00:09:28,200
so in particular mubury could discover

227
00:09:28,200 --> 00:09:32,040
2.5 times and 5.8 times more vulnerable

228
00:09:32,040 --> 00:09:35,880
code than redevelop antibody

229
00:09:35,880 --> 00:09:38,880
uh in particular the following three

230
00:09:38,880 --> 00:09:40,980
types of vulnerable codes were hardly

231
00:09:40,980 --> 00:09:43,980
discovered by Redevelopment body so if

232
00:09:43,980 --> 00:09:46,380
the propagate vulnerable code does not

233
00:09:46,380 --> 00:09:48,600
contain all the code lines deleted in

234
00:09:48,600 --> 00:09:51,360
the patch if the propagate boundary of a

235
00:09:51,360 --> 00:09:53,459
code was derived from the oldest

236
00:09:53,459 --> 00:09:56,399
vulnerable function or if the propagate

237
00:09:56,399 --> 00:09:58,620
boundary of a code has undergone heavy

238
00:09:58,620 --> 00:10:00,560
syntax changes

239
00:10:00,560 --> 00:10:02,820
existing approaches as well to detect

240
00:10:02,820 --> 00:10:05,339
the propaganda of a code but mubury

241
00:10:05,339 --> 00:10:07,740
which collate the oldest and the

242
00:10:07,740 --> 00:10:10,320
discord's model functions and considers

243
00:10:10,320 --> 00:10:13,080
only the core lines can address these

244
00:10:13,080 --> 00:10:16,140
types of profitable of a code

245
00:10:16,140 --> 00:10:19,080
so this is the conclusion uh we found

246
00:10:19,080 --> 00:10:20,459
that many vulnerable codes are

247
00:10:20,459 --> 00:10:23,040
propagated with syntax modifications

248
00:10:23,040 --> 00:10:26,160
actually the 91 percent of the

249
00:10:26,160 --> 00:10:28,500
discovered propagation of a code exists

250
00:10:28,500 --> 00:10:30,839
in a different syntax to the disclosed

251
00:10:30,839 --> 00:10:32,459
vulnerable function

252
00:10:32,459 --> 00:10:34,920
so two to precisely discover the

253
00:10:34,920 --> 00:10:36,600
propagate part of the code with various

254
00:10:36,600 --> 00:10:41,040
indexes we present Mulberry and from our

255
00:10:41,040 --> 00:10:43,500
experiment we we are from that we're

256
00:10:43,500 --> 00:10:45,600
very outperformed existing vulnerable

257
00:10:45,600 --> 00:10:47,880
code detection approaches yeah

258
00:10:47,880 --> 00:10:50,820
so this is until my presentation thank

259
00:10:50,820 --> 00:10:52,380
you for your attention and if you have

260
00:10:52,380 --> 00:10:54,660
any questions please feel free to ask me

261
00:10:54,660 --> 00:10:57,140
thank you

