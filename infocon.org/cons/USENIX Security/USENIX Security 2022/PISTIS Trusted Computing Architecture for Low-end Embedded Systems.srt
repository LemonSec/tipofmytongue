1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:09,139 --> 00:00:13,440
a PhD student in Italy Atlanta and today

3
00:00:13,440 --> 00:00:15,299
I would like to present a paper I made

4
00:00:15,299 --> 00:00:16,859
in collaboration with a few colleagues

5
00:00:16,859 --> 00:00:19,140
Mark muramar Marco rovery and Bruno

6
00:00:19,140 --> 00:00:22,260
crispo the pepper is called pistis a

7
00:00:22,260 --> 00:00:24,779
trusted Computing architecture for

8
00:00:24,779 --> 00:00:27,119
low-end embedded systems and I would

9
00:00:27,119 --> 00:00:28,680
like to start from the issue at hand

10
00:00:28,680 --> 00:00:31,019
which is embedded systems which we all

11
00:00:31,019 --> 00:00:33,059
know that they are at security risk

12
00:00:33,059 --> 00:00:36,540
reason for which in the past several

13
00:00:36,540 --> 00:00:38,460
Security Solutions have been proposed

14
00:00:38,460 --> 00:00:40,260
with the most prominent one probably

15
00:00:40,260 --> 00:00:43,320
being security services such as remote

16
00:00:43,320 --> 00:00:45,960
attestation however these services are

17
00:00:45,960 --> 00:00:48,059
usually enabled by trusted execution

18
00:00:48,059 --> 00:00:50,640
environments or teas which we all came

19
00:00:50,640 --> 00:00:53,579
to love however if we take a look at the

20
00:00:53,579 --> 00:00:56,120
state of the art on security services

21
00:00:56,120 --> 00:00:58,739
and non-trusted execution environments

22
00:00:58,739 --> 00:01:01,440
we can see that we have a wide variety

23
00:01:01,440 --> 00:01:03,899
of options which some of them which are

24
00:01:03,899 --> 00:01:06,659
Hardware based being able to provide

25
00:01:06,659 --> 00:01:09,659
strong security guarantee peas and good

26
00:01:09,659 --> 00:01:12,840
feature set however we can also see how

27
00:01:12,840 --> 00:01:15,840
there is a clear gap on the graph a gap

28
00:01:15,840 --> 00:01:18,600
populated by all of those devices that

29
00:01:18,600 --> 00:01:21,420
maybe they are a legacy or they are too

30
00:01:21,420 --> 00:01:23,580
cheap which do not have been enough

31
00:01:23,580 --> 00:01:26,340
harder resources to have desire end

32
00:01:26,340 --> 00:01:28,860
approaches and must use software-based

33
00:01:28,860 --> 00:01:31,140
approaches however the current state of

34
00:01:31,140 --> 00:01:32,700
the art on software-based approaches do

35
00:01:32,700 --> 00:01:34,740
not provide enough security guarantees

36
00:01:34,740 --> 00:01:37,079
and good enough features reason for

37
00:01:37,079 --> 00:01:39,000
which we try to come up with something

38
00:01:39,000 --> 00:01:41,159
that could actually fill this Gap and

39
00:01:41,159 --> 00:01:43,920
easy species which it is a trusted

40
00:01:43,920 --> 00:01:46,500
execution environment made a positively

41
00:01:46,500 --> 00:01:50,399
to fill the Gap how do we do that by by

42
00:01:50,399 --> 00:01:52,920
bringing some of the features of higher

43
00:01:52,920 --> 00:01:55,560
end Solutions such as interrupt support

44
00:01:55,560 --> 00:01:58,619
dma support support for trusted

45
00:01:58,619 --> 00:02:01,680
applications and bringing it to devices

46
00:02:01,680 --> 00:02:04,979
that you know have harsh resources for

47
00:02:04,979 --> 00:02:06,960
instance they do not have memory

48
00:02:06,960 --> 00:02:08,699
protection units or memory management

49
00:02:08,699 --> 00:02:11,099
units obviously and you are not even

50
00:02:11,099 --> 00:02:12,780
compatible with Hardware modifications

51
00:02:12,780 --> 00:02:15,540
because they are either too expensive or

52
00:02:15,540 --> 00:02:17,700
unpractical in many scenarios

53
00:02:17,700 --> 00:02:20,879
so this is exactly what is paste is and

54
00:02:20,879 --> 00:02:22,680
I would like to answer two questions now

55
00:02:22,680 --> 00:02:25,680
what is uh well how when do we use

56
00:02:25,680 --> 00:02:28,379
business and how does it work as for the

57
00:02:28,379 --> 00:02:31,319
one it is quite easy let us consider our

58
00:02:31,319 --> 00:02:32,760
typical scenario in which we have a

59
00:02:32,760 --> 00:02:35,580
microcontroller unit so an MCU which is

60
00:02:35,580 --> 00:02:38,520
programmed by an untrusted party and in

61
00:02:38,520 --> 00:02:40,260
this case we might have a network

62
00:02:40,260 --> 00:02:43,319
attacker which will try to Bring Havoc

63
00:02:43,319 --> 00:02:45,599
to the system maybe we do take denial of

64
00:02:45,599 --> 00:02:47,580
service after the scope but as for the

65
00:02:47,580 --> 00:02:49,860
rest we have to have some kind of

66
00:02:49,860 --> 00:02:51,840
protection for the attacker and that's

67
00:02:51,840 --> 00:02:54,120
what pisties can bring protection using

68
00:02:54,120 --> 00:02:56,700
a trusted executional environment along

69
00:02:56,700 --> 00:03:00,599
with some trusted applications so so

70
00:03:00,599 --> 00:03:03,300
some security services and let's see how

71
00:03:03,300 --> 00:03:05,819
step by step we do this kind of security

72
00:03:05,819 --> 00:03:07,980
how we protect this device

73
00:03:07,980 --> 00:03:11,040
and we have to start from an mtmc and on

74
00:03:11,040 --> 00:03:12,780
top of which we have to deploy in a

75
00:03:12,780 --> 00:03:14,640
trusted manner our trusted acquisition

76
00:03:14,640 --> 00:03:17,459
environment which is software only so it

77
00:03:17,459 --> 00:03:19,500
is a runtime library and some trusted

78
00:03:19,500 --> 00:03:22,080
applications we provide implementation

79
00:03:22,080 --> 00:03:25,500
for security and secure code update and

80
00:03:25,500 --> 00:03:27,360
remote attestation which are two of the

81
00:03:27,360 --> 00:03:30,060
most prominent ones but it is compatible

82
00:03:30,060 --> 00:03:32,580
with other trusted applications and

83
00:03:32,580 --> 00:03:34,980
we have the MCU with PCS up and running

84
00:03:34,980 --> 00:03:36,840
what we can do is to give the control

85
00:03:36,840 --> 00:03:38,760
back to the untrusted application

86
00:03:38,760 --> 00:03:41,280
programmer which will be provide who

87
00:03:41,280 --> 00:03:43,319
will be provided with our tool chain our

88
00:03:43,319 --> 00:03:45,900
Custom Tool chain that will can be used

89
00:03:45,900 --> 00:03:48,180
to create the binaries the untrusted

90
00:03:48,180 --> 00:03:50,580
application and can be used to deploy it

91
00:03:50,580 --> 00:03:53,640
through our secure code update security

92
00:03:53,640 --> 00:03:55,980
service at this point we will end up

93
00:03:55,980 --> 00:03:58,200
with an untrusted application running on

94
00:03:58,200 --> 00:04:00,480
alongside pistons on the microcontroller

95
00:04:00,480 --> 00:04:01,319
unit

96
00:04:01,319 --> 00:04:04,440
however at any point in this process the

97
00:04:04,440 --> 00:04:06,360
attacker could play a role could try to

98
00:04:06,360 --> 00:04:08,459
perform several types of attacks

99
00:04:08,459 --> 00:04:10,560
around time attacks many in the middle

100
00:04:10,560 --> 00:04:12,420
maybe trying to corrupt the tool chain

101
00:04:12,420 --> 00:04:15,000
or not inject some malicious code inside

102
00:04:15,000 --> 00:04:17,519
the source code and what you would do

103
00:04:17,519 --> 00:04:20,519
normally in a normal scenarios you would

104
00:04:20,519 --> 00:04:22,740
run a remote Duty station and to see

105
00:04:22,740 --> 00:04:24,240
whether the application has been

106
00:04:24,240 --> 00:04:26,880
compromised however on this kind of

107
00:04:26,880 --> 00:04:29,759
devices that we target we do not have

108
00:04:29,759 --> 00:04:31,919
the hardware Securities

109
00:04:31,919 --> 00:04:34,919
um that allowed to in isolate the

110
00:04:34,919 --> 00:04:37,440
program the say the security services

111
00:04:37,440 --> 00:04:40,139
from the malicious application so we

112
00:04:40,139 --> 00:04:41,639
have no way to make sure that the remote

113
00:04:41,639 --> 00:04:44,100
attestation can work without being

114
00:04:44,100 --> 00:04:47,040
interfere with by the attacker and

115
00:04:47,040 --> 00:04:49,800
that's what we do with PCS is exactly a

116
00:04:49,800 --> 00:04:52,020
memory isolation primitive that's

117
00:04:52,020 --> 00:04:55,080
designed to isolate the malware from The

118
00:04:55,080 --> 00:04:57,419
Trusted execution environment and its

119
00:04:57,419 --> 00:04:59,580
applications so that we for instance can

120
00:04:59,580 --> 00:05:01,979
execute remote autistication without

121
00:05:01,979 --> 00:05:03,540
having to worry about the attacker at

122
00:05:03,540 --> 00:05:06,180
all and but because I want to give you

123
00:05:06,180 --> 00:05:08,580
more details let's try to go into the

124
00:05:08,580 --> 00:05:10,800
memory isolation let's follow the rabbit

125
00:05:10,800 --> 00:05:13,440
hole and memory resolution is in it's a

126
00:05:13,440 --> 00:05:15,419
matter of policy it is a policy base and

127
00:05:15,419 --> 00:05:17,639
what we have to do it is a three-step

128
00:05:17,639 --> 00:05:20,940
process that starts with dividing memory

129
00:05:20,940 --> 00:05:22,979
the initial empty memory in different

130
00:05:22,979 --> 00:05:26,280
regions some of which will be assigned

131
00:05:26,280 --> 00:05:28,979
to the pieces to the protected code some

132
00:05:28,979 --> 00:05:30,900
of which will instead be assigned to the

133
00:05:30,900 --> 00:05:33,360
untrusted application and as soon as we

134
00:05:33,360 --> 00:05:35,280
have these logical separation what we

135
00:05:35,280 --> 00:05:37,380
have to do is to deploy of course both

136
00:05:37,380 --> 00:05:39,960
pistons and the untrusted application in

137
00:05:39,960 --> 00:05:41,580
the right segments

138
00:05:41,580 --> 00:05:44,280
however this is not enough because even

139
00:05:44,280 --> 00:05:46,560
if they are separated at deployment time

140
00:05:46,560 --> 00:05:48,780
there is no guarantee that our runtime

141
00:05:48,780 --> 00:05:50,880
the application will not try to break

142
00:05:50,880 --> 00:05:53,100
free from this isolation for instance

143
00:05:53,100 --> 00:05:55,080
trying to perform some memory accesses

144
00:05:55,080 --> 00:05:57,419
and that's why we need to have the last

145
00:05:57,419 --> 00:06:00,300
and final step enforcing an access

146
00:06:00,300 --> 00:06:02,639
control policy which in other words

147
00:06:02,639 --> 00:06:04,500
means to limit the type of memory

148
00:06:04,500 --> 00:06:06,240
accesses that the application can

149
00:06:06,240 --> 00:06:08,520
perform on the rest of the memory and

150
00:06:08,520 --> 00:06:10,080
for the sake of this presentation let us

151
00:06:10,080 --> 00:06:12,840
focus on the execution privileges which

152
00:06:12,840 --> 00:06:14,699
will in our case we want to make sure

153
00:06:14,699 --> 00:06:17,460
that the application can only execute

154
00:06:17,460 --> 00:06:20,160
either its own code base obviously or

155
00:06:20,160 --> 00:06:22,139
some entry points in the piste's runtime

156
00:06:22,139 --> 00:06:24,660
library and how do we do that without

157
00:06:24,660 --> 00:06:26,340
Hardware because that's a real question

158
00:06:26,340 --> 00:06:28,319
and we have to have a software-based

159
00:06:28,319 --> 00:06:30,600
approach so no memory protection unit

160
00:06:30,600 --> 00:06:33,180
for instance and to do so in software we

161
00:06:33,180 --> 00:06:36,000
use instrumentation and virtualization

162
00:06:36,000 --> 00:06:38,639
which in simpler words means to make

163
00:06:38,639 --> 00:06:40,800
sure that each and single each and

164
00:06:40,800 --> 00:06:42,539
single instruction inside the

165
00:06:42,539 --> 00:06:45,180
application binary it is compliant with

166
00:06:45,180 --> 00:06:47,400
our Access Control policy and let me

167
00:06:47,400 --> 00:06:49,500
give you an example how things Works in

168
00:06:49,500 --> 00:06:52,500
practice and let us start from a sample

169
00:06:52,500 --> 00:06:54,479
code in assembly containing two

170
00:06:54,479 --> 00:06:57,000
functions do instructions that are

171
00:06:57,000 --> 00:06:59,699
calling a certain function the first one

172
00:06:59,699 --> 00:07:01,380
is a function which is in the

173
00:07:01,380 --> 00:07:03,600
application code base so it's fine the

174
00:07:03,600 --> 00:07:05,160
second one is a function whose address

175
00:07:05,160 --> 00:07:07,800
is contained in a register r10

176
00:07:07,800 --> 00:07:09,960
however we have no way to know whether

177
00:07:09,960 --> 00:07:11,880
the content of our 10 our runtime will

178
00:07:11,880 --> 00:07:13,740
be safe or not it could be for instance

179
00:07:13,740 --> 00:07:15,660
an address in the stock something that

180
00:07:15,660 --> 00:07:17,880
we want to prevent so what we have to do

181
00:07:17,880 --> 00:07:20,099
is to instrument this code and

182
00:07:20,099 --> 00:07:23,099
virtualize the last function to do so we

183
00:07:23,099 --> 00:07:25,380
use our Custom Tool chain which will

184
00:07:25,380 --> 00:07:27,720
take care of replacing all of the unsafe

185
00:07:27,720 --> 00:07:30,539
instructions which save Alternatives so

186
00:07:30,539 --> 00:07:32,940
in this case we for instance replace the

187
00:07:32,940 --> 00:07:36,240
code to r10 with a move so we store the

188
00:07:36,240 --> 00:07:38,759
content of our 10 to a safe register R4

189
00:07:38,759 --> 00:07:41,039
and then we pass the control to the TCB

190
00:07:41,039 --> 00:07:43,560
without with a call to a virtual

191
00:07:43,560 --> 00:07:46,020
function which will make sure will I

192
00:07:46,020 --> 00:07:47,759
mean it will be taken care of by the

193
00:07:47,759 --> 00:07:50,819
pieces at a later stage so as soon as we

194
00:07:50,819 --> 00:07:52,139
have this virtualization this

195
00:07:52,139 --> 00:07:54,539
instrumentation we can indeed deploy the

196
00:07:54,539 --> 00:07:56,940
application but rather than starting it

197
00:07:56,940 --> 00:07:58,919
right away what we want to do is to

198
00:07:58,919 --> 00:08:01,500
perform a binary verification to make

199
00:08:01,500 --> 00:08:03,479
sure that all of the unsafe instructions

200
00:08:03,479 --> 00:08:05,940
have indeed been replaced

201
00:08:05,940 --> 00:08:08,400
and if they have so if we run our

202
00:08:08,400 --> 00:08:10,440
verification and all of them pass the

203
00:08:10,440 --> 00:08:13,440
checks we can run it safely however why

204
00:08:13,440 --> 00:08:15,180
do we need these binary verification in

205
00:08:15,180 --> 00:08:17,099
the first place and the question is it

206
00:08:17,099 --> 00:08:19,080
allows us to have a stronger attacker

207
00:08:19,080 --> 00:08:21,660
model with an attacker which who could

208
00:08:21,660 --> 00:08:23,879
be able to bypass the instrumentation

209
00:08:23,879 --> 00:08:26,460
and deploy an application that contains

210
00:08:26,460 --> 00:08:28,979
the unsafe instruction the call to r10

211
00:08:28,979 --> 00:08:31,020
and in this case it will not be a

212
00:08:31,020 --> 00:08:33,539
problem because these will fail the

213
00:08:33,539 --> 00:08:36,299
verification and it will be rejected

214
00:08:36,299 --> 00:08:39,059
however if we did have a compliant

215
00:08:39,059 --> 00:08:41,458
application that is deployed we can run

216
00:08:41,458 --> 00:08:43,919
it still our work is not done yet

217
00:08:43,919 --> 00:08:45,959
because again what is the content of our

218
00:08:45,959 --> 00:08:48,480
10 at the end and to know that we have

219
00:08:48,480 --> 00:08:50,820
to perform some safety checks inside of

220
00:08:50,820 --> 00:08:52,920
our virtual calls which will make sure

221
00:08:52,920 --> 00:08:55,140
that the original content of our 10 is

222
00:08:55,140 --> 00:08:57,839
safe if it is we call it if it not we

223
00:08:57,839 --> 00:09:00,180
stop it and that's basically how we do

224
00:09:00,180 --> 00:09:02,700
that in software and we do similar

225
00:09:02,700 --> 00:09:04,560
things with other types of instructions

226
00:09:04,560 --> 00:09:06,240
but if you are interested in more

227
00:09:06,240 --> 00:09:08,279
details please refer to the paper which

228
00:09:08,279 --> 00:09:09,959
also contains details on how we make

229
00:09:09,959 --> 00:09:12,959
these mechanism work with dma operations

230
00:09:12,959 --> 00:09:15,480
and interrupts which were some big

231
00:09:15,480 --> 00:09:18,440
challenges so now of course software

232
00:09:18,440 --> 00:09:20,459
it's fun to have a software-based

233
00:09:20,459 --> 00:09:21,899
approach but of course we have to pay

234
00:09:21,899 --> 00:09:23,940
the performance and speaking about

235
00:09:23,940 --> 00:09:25,980
performance we evaluated our

236
00:09:25,980 --> 00:09:30,300
implementation on a TI MSP 430 MSP a

237
00:09:30,300 --> 00:09:32,399
microcontroller unit with a set of 13

238
00:09:32,399 --> 00:09:34,740
embedded applications of different types

239
00:09:34,740 --> 00:09:37,620
also including a API official Benchmark

240
00:09:37,620 --> 00:09:40,320
and what we see that we measured mainly

241
00:09:40,320 --> 00:09:41,940
three metrics which is a memory

242
00:09:41,940 --> 00:09:44,700
footprint runtime overhead and

243
00:09:44,700 --> 00:09:47,459
deployment time and you can see how we'd

244
00:09:47,459 --> 00:09:49,680
indeed have high overhead both in terms

245
00:09:49,680 --> 00:09:53,040
of memory and our runtime execution and

246
00:09:53,040 --> 00:09:54,480
however there are two things to be

247
00:09:54,480 --> 00:09:56,459
considered here the first thing is that

248
00:09:56,459 --> 00:09:57,899
it really depends on the type of your

249
00:09:57,899 --> 00:09:59,220
application that we want to instrument

250
00:09:59,220 --> 00:10:01,740
which some of them having having very

251
00:10:01,740 --> 00:10:04,320
small overheads the second thing is the

252
00:10:04,320 --> 00:10:06,000
most important one is that in many

253
00:10:06,000 --> 00:10:08,279
scenarios especially in embedded systems

254
00:10:08,279 --> 00:10:10,140
it is acceptable

255
00:10:10,140 --> 00:10:12,300
for instance if we spend a lot of time

256
00:10:12,300 --> 00:10:14,519
sensing or transmitting on our or

257
00:10:14,519 --> 00:10:17,339
receiving on a high latency Network this

258
00:10:17,339 --> 00:10:19,019
time this instrumentation will not

259
00:10:19,019 --> 00:10:21,540
affect that part of the system so in the

260
00:10:21,540 --> 00:10:24,420
end we will not have that much overhead

261
00:10:24,420 --> 00:10:26,399
um in our final application

262
00:10:26,399 --> 00:10:29,459
and but even if we do have overhead we

263
00:10:29,459 --> 00:10:31,080
still manage to shrink down the

264
00:10:31,080 --> 00:10:33,000
deployment time overhead so that's on a

265
00:10:33,000 --> 00:10:35,180
positive note we brought it down to

266
00:10:35,180 --> 00:10:38,519
decreasing it by 73 percentage by the

267
00:10:38,519 --> 00:10:41,220
using by using uh optimized binary

268
00:10:41,220 --> 00:10:43,320
format that allowed us to shorten the

269
00:10:43,320 --> 00:10:45,959
time so if you are interested in how we

270
00:10:45,959 --> 00:10:49,019
do things please check out the public

271
00:10:49,019 --> 00:10:51,240
repository on GitHub here's the QR code

272
00:10:51,240 --> 00:10:52,860
or you can find the link in the next

273
00:10:52,860 --> 00:10:56,160
slide and feel free to play around with

274
00:10:56,160 --> 00:11:00,180
it so to conclude I just wanted to recap

275
00:11:00,180 --> 00:11:02,579
briefly what is pieces to answer the

276
00:11:02,579 --> 00:11:04,560
three big questions when we are talking

277
00:11:04,560 --> 00:11:06,839
about the security thing so why do we

278
00:11:06,839 --> 00:11:09,180
need it what is it and how does it work

279
00:11:09,180 --> 00:11:11,640
as for the why again there is a security

280
00:11:11,640 --> 00:11:14,040
Gap that must be addressed must be

281
00:11:14,040 --> 00:11:17,399
filled somehow and we do this using PCS

282
00:11:17,399 --> 00:11:19,140
which might be the only cheap the

283
00:11:19,140 --> 00:11:20,640
cheapest available option out there

284
00:11:20,640 --> 00:11:23,279
because all of the rest is Hardware or

285
00:11:23,279 --> 00:11:25,680
might not be good enough as for what is

286
00:11:25,680 --> 00:11:27,480
it again is a trusted execution

287
00:11:27,480 --> 00:11:29,940
environments with support for both

288
00:11:29,940 --> 00:11:31,860
trusted applications such as remote

289
00:11:31,860 --> 00:11:34,920
utilization and to secure dma and

290
00:11:34,920 --> 00:11:37,380
interrupt operations and finally how

291
00:11:37,380 --> 00:11:39,720
does it work by using a policy-based

292
00:11:39,720 --> 00:11:41,180
memory isolation

293
00:11:41,180 --> 00:11:43,860
based on a software-based trusted

294
00:11:43,860 --> 00:11:47,399
Computing base finally how does it work

295
00:11:47,399 --> 00:11:48,720
again again with software

296
00:11:48,720 --> 00:11:51,000
instrumentation and virtualization which

297
00:11:51,000 --> 00:11:53,579
allows it to work without any hardware

298
00:11:53,579 --> 00:11:55,920
whatsoever so thank you for your

299
00:11:55,920 --> 00:11:57,660
attention I really appreciate your you

300
00:11:57,660 --> 00:12:00,120
joining us and here's my email address

301
00:12:00,120 --> 00:12:02,279
if you want to email anything

302
00:12:02,279 --> 00:12:03,959
and if you have any questions I'll be

303
00:12:03,959 --> 00:12:06,560
happy to answer here and now or just

304
00:12:06,560 --> 00:12:09,300
approach me later it's up to you so

305
00:12:09,300 --> 00:12:11,160
thank you very much and I'll leave the

306
00:12:11,160 --> 00:12:14,120
floor for some questions

