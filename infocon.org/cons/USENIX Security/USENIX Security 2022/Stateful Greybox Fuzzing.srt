1
00:00:08,300 --> 00:00:11,099
thank you for introduction hello

2
00:00:11,099 --> 00:00:13,139
everyone good morning and welcome to my

3
00:00:13,139 --> 00:00:17,279
talk and very I'm glad to share our work

4
00:00:17,279 --> 00:00:19,440
about the founding stateful system it's

5
00:00:19,440 --> 00:00:21,480
John work with myself Boom for math

6
00:00:21,480 --> 00:00:24,180
planking Institute drama German for

7
00:00:24,180 --> 00:00:26,699
Menards University and ibiglo region

8
00:00:26,699 --> 00:00:30,380
from National University of Singapore

9
00:00:30,480 --> 00:00:33,719
stateable system that requires a

10
00:00:33,719 --> 00:00:36,600
specific sequence of events as input to

11
00:00:36,600 --> 00:00:39,719
perform expected behaviors

12
00:00:39,719 --> 00:00:42,600
the final result depends on the entire

13
00:00:42,600 --> 00:00:46,079
sequence of inputs not any single input

14
00:00:46,079 --> 00:00:48,539
for example here if we executing the

15
00:00:48,539 --> 00:00:50,879
input stick with one two three and

16
00:00:50,879 --> 00:00:54,180
executing the input 3 only we cannot get

17
00:00:54,180 --> 00:00:57,860
exactly the same result

18
00:01:00,539 --> 00:01:03,120
if a bar can be exposed only in a

19
00:01:03,120 --> 00:01:05,339
certain state which means the system

20
00:01:05,339 --> 00:01:08,340
requires a specific sequence of inputs

21
00:01:08,340 --> 00:01:11,760
that would take it into this state we

22
00:01:11,760 --> 00:01:13,680
call it the state for bug

23
00:01:13,680 --> 00:01:16,680
so our problem here is that we want to

24
00:01:16,680 --> 00:01:19,020
know how to efficiently find a state for

25
00:01:19,020 --> 00:01:21,439
bias

26
00:01:22,860 --> 00:01:26,340
the major challenging to solve this goal

27
00:01:26,340 --> 00:01:28,799
is that with other specification of the

28
00:01:28,799 --> 00:01:32,220
requiring white sequence that's to see

29
00:01:32,220 --> 00:01:34,500
the state specification how do we cover

30
00:01:34,500 --> 00:01:37,400
this database

31
00:01:39,119 --> 00:01:41,280
the prior words cannot solve this

32
00:01:41,280 --> 00:01:42,299
problem

33
00:01:42,299 --> 00:01:45,600
if if father there are conventional

34
00:01:45,600 --> 00:01:47,759
fathers but they are stateless and

35
00:01:47,759 --> 00:01:50,520
cannot generate the sequence of inputs

36
00:01:50,520 --> 00:01:52,460
in specific orders

37
00:01:52,460 --> 00:01:55,619
Evernote it tried to use the return code

38
00:01:55,619 --> 00:01:59,460
at the state but the written code is the

39
00:01:59,460 --> 00:02:02,220
special field in the protocol and cannot

40
00:02:02,220 --> 00:02:05,280
represent the program internal States

41
00:02:05,280 --> 00:02:07,680
each one it requires human knowledge

42
00:02:07,680 --> 00:02:10,979
which is this specification

43
00:02:10,979 --> 00:02:13,560
all of them have some limitation cannot

44
00:02:13,560 --> 00:02:17,000
assault this challenge

45
00:02:18,000 --> 00:02:20,879
stifle programs are prevalent in this

46
00:02:20,879 --> 00:02:22,440
work we focus on protocol

47
00:02:22,440 --> 00:02:24,000
implementations

48
00:02:24,000 --> 00:02:26,879
which are internal 950 and any bank has

49
00:02:26,879 --> 00:02:29,280
a severe security impact

50
00:02:29,280 --> 00:02:33,840
here is example for adp2 protocol

51
00:02:33,840 --> 00:02:37,080
in this protocol ATP request is splitted

52
00:02:37,080 --> 00:02:40,140
into several frames and offering how to

53
00:02:40,140 --> 00:02:44,059
be reselled in specific order

54
00:02:44,879 --> 00:02:47,160
let's Suppose there is this default box

55
00:02:47,160 --> 00:02:49,019
which may appear out correctly

56
00:02:49,019 --> 00:02:51,060
processing the data frame after the

57
00:02:51,060 --> 00:02:52,560
header free

58
00:02:52,560 --> 00:02:55,200
if we only send the data frame or header

59
00:02:55,200 --> 00:02:58,319
frame it's impossible to export this bug

60
00:02:58,319 --> 00:03:01,200
and then if we stand the head of rim and

61
00:03:01,200 --> 00:03:03,120
did frame in correct order

62
00:03:03,120 --> 00:03:06,239
in this time no nude code coverage is

63
00:03:06,239 --> 00:03:10,019
covered but the new state is observed

64
00:03:10,019 --> 00:03:12,480
if we can see and continue for this

65
00:03:12,480 --> 00:03:15,239
newly find input it's more easier to

66
00:03:15,239 --> 00:03:18,500
find the state for bug

67
00:03:20,040 --> 00:03:22,080
how do we know which this has been

68
00:03:22,080 --> 00:03:23,640
visited

69
00:03:23,640 --> 00:03:26,340
our main observation is that these are

70
00:03:26,340 --> 00:03:28,920
represented by C variables with named

71
00:03:28,920 --> 00:03:31,458
constants

72
00:03:32,459 --> 00:03:35,640
for example the H2O the implementates

73
00:03:35,640 --> 00:03:38,519
the atv2 protocol

74
00:03:38,519 --> 00:03:41,099
stays into the enumeration variable

75
00:03:41,099 --> 00:03:44,340
like the firstly in idle and then enter

76
00:03:44,340 --> 00:03:46,260
the result header residual body and then

77
00:03:46,260 --> 00:03:47,760
send back

78
00:03:47,760 --> 00:03:50,879
and open SL implement the TRS protocol

79
00:03:50,879 --> 00:03:55,099
into the enumeration variables also

80
00:03:58,200 --> 00:04:01,080
its observation prevalent we also

81
00:04:01,080 --> 00:04:03,659
investigated the top 50 protocol

82
00:04:03,659 --> 00:04:06,060
implementations including system

83
00:04:06,060 --> 00:04:09,540
protocols and all of them defined the

84
00:04:09,540 --> 00:04:11,900
states by the name constants

85
00:04:11,900 --> 00:04:14,939
44 of them use the enumeration variables

86
00:04:14,939 --> 00:04:20,060
and the six use the micro definitions

87
00:04:21,298 --> 00:04:23,759
let's see how does the variables control

88
00:04:23,759 --> 00:04:26,160
the program behaviors

89
00:04:26,160 --> 00:04:29,220
in H2O the implementation of adp2

90
00:04:29,220 --> 00:04:30,419
protocol

91
00:04:30,419 --> 00:04:32,940
the protocol states are implemented into

92
00:04:32,940 --> 00:04:36,419
the variable stream state

93
00:04:36,419 --> 00:04:39,000
to control the result order of the

94
00:04:39,000 --> 00:04:40,199
frames

95
00:04:40,199 --> 00:04:42,540
function one and three

96
00:04:42,540 --> 00:04:44,940
a handle function for header frame and

97
00:04:44,940 --> 00:04:46,320
data frame

98
00:04:46,320 --> 00:04:48,240
and the function 2 is called in function

99
00:04:48,240 --> 00:04:51,720
1 function 4 is called in functions 3.

100
00:04:51,720 --> 00:04:55,080
in this situation if we send a data

101
00:04:55,080 --> 00:04:56,160
frame only

102
00:04:56,160 --> 00:04:58,620
then the function 3 will be recorded to

103
00:04:58,620 --> 00:04:59,699
handle it

104
00:04:59,699 --> 00:05:01,979
will still variables

105
00:05:01,979 --> 00:05:04,860
the red line is the variables doesn't

106
00:05:04,860 --> 00:05:07,440
equal to the Credit Value function 4

107
00:05:07,440 --> 00:05:10,639
won't be executed

108
00:05:11,400 --> 00:05:13,979
but when we extend the header frame

109
00:05:13,979 --> 00:05:16,139
before the data frame functionalize

110
00:05:16,139 --> 00:05:18,660
firstly called to handle the data frame

111
00:05:18,660 --> 00:05:21,720
and the function 2 is called in function

112
00:05:21,720 --> 00:05:24,300
1 to set the variable into the correct

113
00:05:24,300 --> 00:05:26,699
value the real body

114
00:05:26,699 --> 00:05:29,940
and then when we send this Frame it can

115
00:05:29,940 --> 00:05:33,360
correctly to executed the function for

116
00:05:33,360 --> 00:05:36,780
it is the transition that happens by

117
00:05:36,780 --> 00:05:38,460
assigning new value to the state

118
00:05:38,460 --> 00:05:40,320
variable

119
00:05:40,320 --> 00:05:43,139
therefore to cover our reach function

120
00:05:43,139 --> 00:05:46,139
for the specific order of inputs with

121
00:05:46,139 --> 00:05:50,419
header frame and data frame is necessary

122
00:05:52,139 --> 00:05:54,900
so our Insight is that we can

123
00:05:54,900 --> 00:05:57,180
approximate the three variables by the

124
00:05:57,180 --> 00:06:00,900
new variables with name constants

125
00:06:00,900 --> 00:06:03,900
of course some variables identified in

126
00:06:03,900 --> 00:06:06,600
this way I noticed the variables such as

127
00:06:06,600 --> 00:06:09,300
the configuration or Arrow codes

128
00:06:09,300 --> 00:06:12,419
but their impact is negligible

129
00:06:12,419 --> 00:06:14,940
in our evaluation the accuracy of this

130
00:06:14,940 --> 00:06:19,219
method is over 1999 percent

131
00:06:20,759 --> 00:06:24,539
based on this Insight they modify the

132
00:06:24,539 --> 00:06:27,060
conventional funding algorithm to fast

133
00:06:27,060 --> 00:06:30,360
the state four systems we add a new

134
00:06:30,360 --> 00:06:33,240
feedback the transition tree to collect

135
00:06:33,240 --> 00:06:36,720
the e-commerce this base and build on

136
00:06:36,720 --> 00:06:38,699
this tree we added several heuristic

137
00:06:38,699 --> 00:06:40,800
algorithm to boost the state space

138
00:06:40,800 --> 00:06:43,319
funding

139
00:06:43,319 --> 00:06:45,419
firstly like look into the state

140
00:06:45,419 --> 00:06:47,819
transition tree

141
00:06:47,819 --> 00:06:50,819
in fasting the monitored changes of

142
00:06:50,819 --> 00:06:53,580
values of enumeration variables

143
00:06:53,580 --> 00:06:56,520
here is the example for monitoring the

144
00:06:56,520 --> 00:06:59,220
variable streams today in H2O the same

145
00:06:59,220 --> 00:07:00,720
example

146
00:07:00,720 --> 00:07:02,940
initially the state transition tree is

147
00:07:02,940 --> 00:07:05,419
empty

148
00:07:06,120 --> 00:07:09,180
if we execute or input the variable

149
00:07:09,180 --> 00:07:12,300
maybe stand to these values one by one

150
00:07:12,300 --> 00:07:16,860
such like the idle header result body we

151
00:07:16,860 --> 00:07:19,319
get the state transition sequence like

152
00:07:19,319 --> 00:07:23,160
this and we put it to the tree

153
00:07:23,160 --> 00:07:25,740
and then when we ask you another input

154
00:07:25,740 --> 00:07:28,080
may we may get a different speed

155
00:07:28,080 --> 00:07:30,539
transition sequence and we merge it to

156
00:07:30,539 --> 00:07:32,160
the tree again

157
00:07:32,160 --> 00:07:35,220
again we get more branch in this tree

158
00:07:35,220 --> 00:07:37,139
and the code base finally State

159
00:07:37,139 --> 00:07:39,979
transition tree

160
00:07:40,740 --> 00:07:43,860
okay after we get the transition tree is

161
00:07:43,860 --> 00:07:45,720
it meaningful

162
00:07:45,720 --> 00:07:48,539
to better understand it we revise it to

163
00:07:48,539 --> 00:07:50,940
a graph by merging the same nodes with

164
00:07:50,940 --> 00:07:53,479
the same value

165
00:07:55,139 --> 00:07:57,599
let's compare it with the official steam

166
00:07:57,599 --> 00:08:00,479
machine document the RFC document

167
00:08:00,479 --> 00:08:02,819
firstly the document defines idle State

168
00:08:02,819 --> 00:08:05,639
and we can see we all we also have the

169
00:08:05,639 --> 00:08:06,780
idle state

170
00:08:06,780 --> 00:08:10,380
and then Define open State and here in

171
00:08:10,380 --> 00:08:13,740
our in our Trio graph we have more fine

172
00:08:13,740 --> 00:08:16,259
grains this sequence we still have the

173
00:08:16,259 --> 00:08:18,120
received bodies they also means the open

174
00:08:18,120 --> 00:08:20,160
state to the document

175
00:08:20,160 --> 00:08:22,740
and then the document you find Hub close

176
00:08:22,740 --> 00:08:25,800
which we have a similar bodies final and

177
00:08:25,800 --> 00:08:28,800
then finally our health closed it

178
00:08:28,800 --> 00:08:31,800
comparing with the official document we

179
00:08:31,800 --> 00:08:34,200
can see hours difference between century

180
00:08:34,200 --> 00:08:37,919
is Meaningful to represent the protocol

181
00:08:37,919 --> 00:08:41,179
documents the machine

182
00:08:41,760 --> 00:08:44,279
after constructing the transition tree

183
00:08:44,279 --> 00:08:47,640
we added several heuristic algorithms to

184
00:08:47,640 --> 00:08:49,920
boost this basis explanation

185
00:08:49,920 --> 00:08:52,320
firstly we want to explore more State

186
00:08:52,320 --> 00:08:55,200
space so therefore any inputs that

187
00:08:55,200 --> 00:08:56,940
trigger new state transition we will

188
00:08:56,940 --> 00:09:00,839
seal it and to continue fuzzle it

189
00:09:00,839 --> 00:09:04,920
our second heuristic is to belong to put

190
00:09:04,920 --> 00:09:07,800
more effort on the core logic which have

191
00:09:07,800 --> 00:09:10,620
a great potential to find new States and

192
00:09:10,620 --> 00:09:11,880
bars

193
00:09:11,880 --> 00:09:13,620
because we found not all state

194
00:09:13,620 --> 00:09:15,959
transitions are equally important

195
00:09:15,959 --> 00:09:18,240
in this case the level three state

196
00:09:18,240 --> 00:09:20,640
transitions are for error handling it

197
00:09:20,640 --> 00:09:23,519
means the input is invalid and the

198
00:09:23,519 --> 00:09:25,620
execution is accessed at the beginning

199
00:09:25,620 --> 00:09:28,200
we don't want to put more effort on this

200
00:09:28,200 --> 00:09:31,080
but the right hand is the color logic

201
00:09:31,080 --> 00:09:33,660
which represents input invalid and we

202
00:09:33,660 --> 00:09:36,060
want to test it thoroughly

203
00:09:36,060 --> 00:09:38,880
our our vision here is that we found

204
00:09:38,880 --> 00:09:41,880
that inputs which excise the core

205
00:09:41,880 --> 00:09:44,580
Logistics transitions are easily to be

206
00:09:44,580 --> 00:09:47,459
mutated to the inputs which excise the

207
00:09:47,459 --> 00:09:49,860
error handling State transitions

208
00:09:49,860 --> 00:09:53,820
it's because any bad change on the valid

209
00:09:53,820 --> 00:09:58,080
input will make it invalid

210
00:09:58,080 --> 00:10:00,779
So based on this we for each input we

211
00:10:00,779 --> 00:10:03,360
recall the number of input mutated from

212
00:10:03,360 --> 00:10:06,360
it and the number of mutated input that

213
00:10:06,360 --> 00:10:09,060
still excite the same state sequence if

214
00:10:09,060 --> 00:10:10,800
the value is bigger it's more likely to

215
00:10:10,800 --> 00:10:13,640
the core logic

216
00:10:13,860 --> 00:10:16,320
the last one we used partial mutation to

217
00:10:16,320 --> 00:10:19,019
make the mutation more efficiently for

218
00:10:19,019 --> 00:10:21,360
example the input has several bytes if

219
00:10:21,360 --> 00:10:24,660
we mutated the fifth byte we trigger a

220
00:10:24,660 --> 00:10:27,360
new state transition and after that we

221
00:10:27,360 --> 00:10:29,580
will put more effort to mutate this part

222
00:10:29,580 --> 00:10:32,459
is because all the previous Parts can

223
00:10:32,459 --> 00:10:35,519
take the program into the newly founded

224
00:10:35,519 --> 00:10:38,040
State transitions which haven't been

225
00:10:38,040 --> 00:10:40,140
tested early but therefore we want to

226
00:10:40,140 --> 00:10:43,819
put more effort to only test it

227
00:10:44,880 --> 00:10:48,180
we call Our Father a HD first degree

228
00:10:48,180 --> 00:10:50,459
board fast and built it on top of

229
00:10:50,459 --> 00:10:53,399
leapfos the reason is that the live

230
00:10:53,399 --> 00:10:56,100
fight is much faster than FL than in

231
00:10:56,100 --> 00:10:57,899
memory architecture than the fog

232
00:10:57,899 --> 00:11:00,680
architecture

233
00:11:02,220 --> 00:11:04,560
in implementation we automatically look

234
00:11:04,560 --> 00:11:06,839
for the assignment to the enumeration

235
00:11:06,839 --> 00:11:09,060
variables and instrument it with our

236
00:11:09,060 --> 00:11:11,399
function by a person script

237
00:11:11,399 --> 00:11:13,920
like this we look for this line in a

238
00:11:13,920 --> 00:11:17,160
sign enumeration a name constant to the

239
00:11:17,160 --> 00:11:19,800
you know machine variables and we

240
00:11:19,800 --> 00:11:22,200
rewrite it to in this line and the

241
00:11:22,200 --> 00:11:23,700
function call

242
00:11:23,700 --> 00:11:26,160
this function call is Implement in our

243
00:11:26,160 --> 00:11:28,980
father our father and Target program are

244
00:11:28,980 --> 00:11:31,380
compiled together and learning the theme

245
00:11:31,380 --> 00:11:34,320
process so they can directly to call

246
00:11:34,320 --> 00:11:36,240
each other by the function call

247
00:11:36,240 --> 00:11:38,640
and our father is built on top of live

248
00:11:38,640 --> 00:11:41,940
fast with some states tracing and state

249
00:11:41,940 --> 00:11:44,779
funding algorithm

250
00:11:44,940 --> 00:11:47,399
evaluation we chose its widely used

251
00:11:47,399 --> 00:11:50,100
protocol implementations onto major

252
00:11:50,100 --> 00:11:53,519
Frameworks first bunch and protofors

253
00:11:53,519 --> 00:11:55,079
bench

254
00:11:55,079 --> 00:11:57,240
all experiments can provide Community

255
00:11:57,240 --> 00:12:02,480
standards 23 hours and 20 runs

256
00:12:03,360 --> 00:12:06,000
the first question we want to answer is

257
00:12:06,000 --> 00:12:09,420
that how will we exploit this space

258
00:12:09,420 --> 00:12:11,279
so we measure the number of stage

259
00:12:11,279 --> 00:12:13,260
transition sequence in the state

260
00:12:13,260 --> 00:12:15,420
transition tree

261
00:12:15,420 --> 00:12:17,700
mostly transition sequence mean most

262
00:12:17,700 --> 00:12:19,500
these are exploited

263
00:12:19,500 --> 00:12:22,260
from the result on average our method

264
00:12:22,260 --> 00:12:25,320
counts the transition sequence 30 times

265
00:12:25,320 --> 00:12:28,079
more than our business leave fast and

266
00:12:28,079 --> 00:12:30,240
also much higher than the ethernet and

267
00:12:30,240 --> 00:12:32,839
e-jaw

268
00:12:33,720 --> 00:12:35,700
things that we use in numeration

269
00:12:35,700 --> 00:12:37,500
variables are named constant to

270
00:12:37,500 --> 00:12:40,200
approximate the state's variables we

271
00:12:40,200 --> 00:12:43,680
want to examine how accurate it is so

272
00:12:43,680 --> 00:12:47,100
therefore we exam manually examine the

273
00:12:47,100 --> 00:12:49,019
all nodes in this structures the

274
00:12:49,019 --> 00:12:52,220
transition tree and we found that

275
00:12:52,220 --> 00:12:56,220
99.5 nodes are related to the three true

276
00:12:56,220 --> 00:12:58,440
States

277
00:12:58,440 --> 00:13:00,720
of course we found the 12 previously

278
00:13:00,720 --> 00:13:03,420
unknown bars in 23 hours all of them

279
00:13:03,420 --> 00:13:06,240
have been assigned series

280
00:13:06,240 --> 00:13:09,300
a conclusion with this work we proposed

281
00:13:09,300 --> 00:13:11,940
a novel method to identify the program's

282
00:13:11,940 --> 00:13:14,940
did automatically and we also designed

283
00:13:14,940 --> 00:13:18,060
several risk algorithms to exploit this

284
00:13:18,060 --> 00:13:21,660
space with this method we found 12 newly

285
00:13:21,660 --> 00:13:24,839
fund box and previous annual bus

286
00:13:24,839 --> 00:13:27,980
thank you any question

