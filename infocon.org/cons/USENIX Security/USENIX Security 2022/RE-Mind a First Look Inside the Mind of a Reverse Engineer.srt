1
00:00:07,940 --> 00:00:11,340
hello everyone my name is Simone onso

2
00:00:11,340 --> 00:00:13,380
and I am an assistant professor at

3
00:00:13,380 --> 00:00:16,219
eurocom in the beautiful south of French

4
00:00:16,219 --> 00:00:19,080
today I will present a remind a first

5
00:00:19,080 --> 00:00:20,939
look inside the mind of our reverse

6
00:00:20,939 --> 00:00:21,960
engineer

7
00:00:21,960 --> 00:00:25,140
of which I am the second author and

8
00:00:25,140 --> 00:00:27,539
let's start

9
00:00:27,539 --> 00:00:30,060
okay so what is software reverse

10
00:00:30,060 --> 00:00:31,320
engineering

11
00:00:31,320 --> 00:00:34,620
it is a task in which the human being is

12
00:00:34,620 --> 00:00:37,760
involved and he's trying to obtain some

13
00:00:37,760 --> 00:00:40,260
details about the design and

14
00:00:40,260 --> 00:00:44,040
implementation of a particular software

15
00:00:44,040 --> 00:00:46,500
the point is that it requires a very

16
00:00:46,500 --> 00:00:48,480
skilled human being with the Deep

17
00:00:48,480 --> 00:00:50,760
knowledge about the Opera the underlying

18
00:00:50,760 --> 00:00:53,700
operating system and the CPU

19
00:00:53,700 --> 00:00:56,460
it has several application malware

20
00:00:56,460 --> 00:00:59,100
analysis vulnerability research cracking

21
00:00:59,100 --> 00:01:01,860
so basically every scenario in which you

22
00:01:01,860 --> 00:01:04,019
don't have the source code

23
00:01:04,019 --> 00:01:06,420
it is an interactive process that

24
00:01:06,420 --> 00:01:09,200
requires several tools like dbis

25
00:01:09,200 --> 00:01:12,659
debuggers the compilers there will be a

26
00:01:12,659 --> 00:01:14,640
nice talk in the same track about the

27
00:01:14,640 --> 00:01:17,159
compilers so check it out

28
00:01:17,159 --> 00:01:19,860
many more and finally these assemblers

29
00:01:19,860 --> 00:01:22,740
and our work we will focus on is

30
00:01:22,740 --> 00:01:27,080
focusing on the output of disassemblers

31
00:01:27,840 --> 00:01:31,140
okay so computers are very helpful for

32
00:01:31,140 --> 00:01:33,119
the human beings in order to automate

33
00:01:33,119 --> 00:01:37,520
the reverse engineering task but

34
00:01:38,220 --> 00:01:41,179
but

35
00:01:45,479 --> 00:01:49,579
but in the end it's about

36
00:01:49,579 --> 00:01:51,540
in the end you know that reverse

37
00:01:51,540 --> 00:01:53,100
engineering is about code comprehension

38
00:01:53,100 --> 00:01:56,700
and therefore is a matter that Humans

39
00:01:56,700 --> 00:01:59,700
Beings are necessary in order to uh

40
00:01:59,700 --> 00:02:01,860
complete this task even though there is

41
00:02:01,860 --> 00:02:04,020
you know there are unreasonized line of

42
00:02:04,020 --> 00:02:06,960
research for example they they were able

43
00:02:06,960 --> 00:02:09,660
to describe a natural language the

44
00:02:09,660 --> 00:02:12,060
semantic of some function it is still in

45
00:02:12,060 --> 00:02:14,700
its infancy and I hope that this work

46
00:02:14,700 --> 00:02:16,980
will contribute also to this line of

47
00:02:16,980 --> 00:02:18,000
research

48
00:02:18,000 --> 00:02:22,260
and so we asked how do humans approach

49
00:02:22,260 --> 00:02:24,900
the software versus engineering task we

50
00:02:24,900 --> 00:02:26,640
focus that as I said before on the

51
00:02:26,640 --> 00:02:30,260
output of a disassembly and therefore

52
00:02:30,260 --> 00:02:34,620
the assembly code we focus in on the x86

53
00:02:34,620 --> 00:02:37,040
code because it is the most common

54
00:02:37,040 --> 00:02:39,599
architecture that is being told during

55
00:02:39,599 --> 00:02:42,420
marrow analysis or reverse engineering

56
00:02:42,420 --> 00:02:43,620
courses

57
00:02:43,620 --> 00:02:46,319
and we tried to answer to this question

58
00:02:46,319 --> 00:02:49,319
comparing novices and experts trying to

59
00:02:49,319 --> 00:02:51,360
figure out what are the differences or

60
00:02:51,360 --> 00:02:55,200
analogies if and trying to figure out if

61
00:02:55,200 --> 00:02:58,080
novices can learn something that if we

62
00:02:58,080 --> 00:03:00,540
can teach something to the novices that

63
00:03:00,540 --> 00:03:04,200
we learn from the experts we put a

64
00:03:04,200 --> 00:03:07,140
particular effort trying to figure out

65
00:03:07,140 --> 00:03:09,780
uh how do they analyze the different

66
00:03:09,780 --> 00:03:12,239
binary entities involved like basic

67
00:03:12,239 --> 00:03:14,220
block function instructions and so on

68
00:03:14,220 --> 00:03:16,019
and so forth

69
00:03:16,019 --> 00:03:18,900
okay so our participants had to reverse

70
00:03:18,900 --> 00:03:22,860
engineering to x86 Linux binaries that

71
00:03:22,860 --> 00:03:24,959
and such binaries they contains both

72
00:03:24,959 --> 00:03:28,560
useless and useful code and they were

73
00:03:28,560 --> 00:03:31,800
inspired by CTF challenges but with a

74
00:03:31,800 --> 00:03:34,019
particular difference those binaries do

75
00:03:34,019 --> 00:03:36,780
not contain a flag strings they contain

76
00:03:36,780 --> 00:03:40,440
an API call that prints a success string

77
00:03:40,440 --> 00:03:42,480
and they in order to provide the

78
00:03:42,480 --> 00:03:45,120
solution they have to describe the

79
00:03:45,120 --> 00:03:47,280
solution in natural language and we did

80
00:03:47,280 --> 00:03:48,900
this in order to avoid and intended

81
00:03:48,900 --> 00:03:50,340
Solutions

82
00:03:50,340 --> 00:03:52,560
so the first binary is just a simple TCP

83
00:03:52,560 --> 00:03:54,540
servers that after three successful

84
00:03:54,540 --> 00:03:57,299
connection it will send to the client

85
00:03:57,299 --> 00:04:00,120
the success string while the second

86
00:04:00,120 --> 00:04:01,799
binary is a simple command line

87
00:04:01,799 --> 00:04:05,040
interface for management of lists and if

88
00:04:05,040 --> 00:04:07,860
you insert five elements in the right

89
00:04:07,860 --> 00:04:10,680
order in order red it will print the

90
00:04:10,680 --> 00:04:13,140
success flag

91
00:04:13,140 --> 00:04:15,420
okay given that there are many reverse

92
00:04:15,420 --> 00:04:17,040
engineering Frameworks out there like

93
00:04:17,040 --> 00:04:18,959
either again or radar and so on and so

94
00:04:18,959 --> 00:04:21,540
forth and in order to avoid the hassle

95
00:04:21,540 --> 00:04:24,120
of instrument all of them with the we

96
00:04:24,120 --> 00:04:26,759
decided to develop

97
00:04:26,759 --> 00:04:29,280
um web using the face

98
00:04:29,280 --> 00:04:31,139
that you can see here on the left of

99
00:04:31,139 --> 00:04:35,220
this of the screen and it is composed of

100
00:04:35,220 --> 00:04:38,040
on the leftmost side the list of the

101
00:04:38,040 --> 00:04:40,259
functions and for each function under

102
00:04:40,259 --> 00:04:45,000
analysis the references to and from that

103
00:04:45,000 --> 00:04:46,080
function

104
00:04:46,080 --> 00:04:49,020
then on the right side of the image the

105
00:04:49,020 --> 00:04:51,660
control for graph view but with a

106
00:04:51,660 --> 00:04:55,620
particularity so just one magic block at

107
00:04:55,620 --> 00:04:58,139
a time is readable while the other ones

108
00:04:58,139 --> 00:05:00,840
are blurred and in this way the user has

109
00:05:00,840 --> 00:05:04,320
to click on each basic blood and on each

110
00:05:04,320 --> 00:05:07,919
blessing Block in order to unblur it and

111
00:05:07,919 --> 00:05:10,440
read its content and in this way we were

112
00:05:10,440 --> 00:05:12,600
able to understand on which basic block

113
00:05:12,600 --> 00:05:15,120
the user was focused on

114
00:05:15,120 --> 00:05:17,699
was implemented the function and

115
00:05:17,699 --> 00:05:20,580
variable renaming so that our users can

116
00:05:20,580 --> 00:05:22,919
keep track of their findings

117
00:05:22,919 --> 00:05:25,560
and finally all the results or the user

118
00:05:25,560 --> 00:05:27,360
instructions were stored in in a

119
00:05:27,360 --> 00:05:29,580
database

120
00:05:29,580 --> 00:05:32,820
we ended up with the 72 participants

121
00:05:32,820 --> 00:05:36,180
that we divided between 33 experts and

122
00:05:36,180 --> 00:05:39,780
39 novices and we decided the category

123
00:05:39,780 --> 00:05:43,320
based on three different criterias due

124
00:05:43,320 --> 00:05:45,419
to a lack of time and can go into all

125
00:05:45,419 --> 00:05:47,639
the details there is the paper or even

126
00:05:47,639 --> 00:05:49,620
better the Q a questions

127
00:05:49,620 --> 00:05:51,780
a session

128
00:05:51,780 --> 00:05:54,419
finally we did the data analysis on more

129
00:05:54,419 --> 00:05:58,380
than 300 hours of recorded sessions and

130
00:05:58,380 --> 00:06:00,720
just to give you an idea the two tasks

131
00:06:00,720 --> 00:06:03,479
the two binaries combined to collaborate

132
00:06:03,479 --> 00:06:06,600
92 minutes for the experts and more than

133
00:06:06,600 --> 00:06:10,139
five hours for the novices we tested

134
00:06:10,139 --> 00:06:12,300
more than 30 statistical hypothesis

135
00:06:12,300 --> 00:06:15,479
tests the vast majority of them failed

136
00:06:15,479 --> 00:06:18,360
miserably and but we we keep the track

137
00:06:18,360 --> 00:06:21,900
all of all of them in the appendix

138
00:06:21,900 --> 00:06:25,080
okay now on I will try to give you an

139
00:06:25,080 --> 00:06:29,160
idea of how our data look and I will try

140
00:06:29,160 --> 00:06:31,680
to do this trying to show you how a

141
00:06:31,680 --> 00:06:34,080
novice tried to solve the binary the

142
00:06:34,080 --> 00:06:35,220
first binary

143
00:06:35,220 --> 00:06:37,020
the first binary is composed of several

144
00:06:37,020 --> 00:06:39,600
functions but just the three of them are

145
00:06:39,600 --> 00:06:42,539
useful the main function that we'll call

146
00:06:42,539 --> 00:06:44,819
the bridge function that in turns call

147
00:06:44,819 --> 00:06:46,740
the target function the target function

148
00:06:46,740 --> 00:06:49,500
is the one that contains the code that

149
00:06:49,500 --> 00:06:52,919
will invoke the API flag the API

150
00:06:52,919 --> 00:06:56,400
uh the API call in order to print the

151
00:06:56,400 --> 00:06:59,100
success string

152
00:06:59,100 --> 00:07:01,259
this is a very complicated graph pay

153
00:07:01,259 --> 00:07:03,180
attention

154
00:07:03,180 --> 00:07:06,060
so on the x-axis you can see the time in

155
00:07:06,060 --> 00:07:08,220
minutes of the running session

156
00:07:08,220 --> 00:07:10,979
while on the Epsilon axis you see the

157
00:07:10,979 --> 00:07:13,199
offsets of the basic blocks within the

158
00:07:13,199 --> 00:07:14,580
binary

159
00:07:14,580 --> 00:07:18,840
uh we are lighted in red green and

160
00:07:18,840 --> 00:07:21,660
orange all the basic blocks that belongs

161
00:07:21,660 --> 00:07:23,580
to ready to respective functions so for

162
00:07:23,580 --> 00:07:25,560
example the red domain and the orange

163
00:07:25,560 --> 00:07:28,319
the bridge and so on and so forth and

164
00:07:28,319 --> 00:07:33,199
then the size of each point in the graph

165
00:07:33,199 --> 00:07:36,300
is directly proportional to the time

166
00:07:36,300 --> 00:07:38,940
that the user spend on such particular

167
00:07:38,940 --> 00:07:41,940
basic block so for example here she was

168
00:07:41,940 --> 00:07:44,400
quickly skimming through the basic

169
00:07:44,400 --> 00:07:47,699
blocks while there she spent a lot of

170
00:07:47,699 --> 00:07:50,039
trying time and trying to analyze these

171
00:07:50,039 --> 00:07:51,900
basic blocks

172
00:07:51,900 --> 00:07:55,020
what can we see here is that these users

173
00:07:55,020 --> 00:07:57,479
spend a lot of trying trying to analyze

174
00:07:57,479 --> 00:08:00,120
useless portion of code

175
00:08:00,120 --> 00:08:02,460
and there is not you know not a clear

176
00:08:02,460 --> 00:08:05,400
pattern she was just looking around the

177
00:08:05,400 --> 00:08:08,520
whole binary we cannot we cannot see a

178
00:08:08,520 --> 00:08:10,740
pattern there let's try with with an

179
00:08:10,740 --> 00:08:12,840
expert

180
00:08:12,840 --> 00:08:14,880
and here immediately what catches our

181
00:08:14,880 --> 00:08:17,160
attention is that to the expert didn't

182
00:08:17,160 --> 00:08:20,160
waste so much time on useless basic

183
00:08:20,160 --> 00:08:23,220
blocks she was more more focused on

184
00:08:23,220 --> 00:08:26,520
useful function and if at a closer look

185
00:08:26,520 --> 00:08:29,699
we can see a strategy emerging

186
00:08:29,699 --> 00:08:32,399
she started from the target

187
00:08:32,399 --> 00:08:34,620
then she moved back to the bridge

188
00:08:34,620 --> 00:08:36,240
function

189
00:08:36,240 --> 00:08:38,760
and backwards again until reaching the

190
00:08:38,760 --> 00:08:41,399
main function this was just you know to

191
00:08:41,399 --> 00:08:44,219
give you an idea we investigated further

192
00:08:44,219 --> 00:08:47,519
further and we found three different

193
00:08:47,519 --> 00:08:49,860
exploration strategies with respect to

194
00:08:49,860 --> 00:08:52,500
the visit on the whole graph

195
00:08:52,500 --> 00:08:55,680
so the first one that I have explained a

196
00:08:55,680 --> 00:08:57,480
little while ago is the backward

197
00:08:57,480 --> 00:09:00,600
strategy that is rare but is more used

198
00:09:00,600 --> 00:09:03,120
by experts and the novice almost never

199
00:09:03,120 --> 00:09:04,440
used it

200
00:09:04,440 --> 00:09:06,899
so as I said before they start from the

201
00:09:06,899 --> 00:09:09,060
portion of code that contains the

202
00:09:09,060 --> 00:09:10,920
solution to the puzzle and then they

203
00:09:10,920 --> 00:09:12,540
move backwards

204
00:09:12,540 --> 00:09:14,399
then the second strategy is the forward

205
00:09:14,399 --> 00:09:18,240
that is the most common among our users

206
00:09:18,240 --> 00:09:20,640
they start from the main and they follow

207
00:09:20,640 --> 00:09:22,620
the call graph

208
00:09:22,620 --> 00:09:25,380
and finally the sequential strategy that

209
00:09:25,380 --> 00:09:29,220
the all the users that used it had

210
00:09:29,220 --> 00:09:32,100
terrible performances because this is a

211
00:09:32,100 --> 00:09:33,959
very naive strategy they were just

212
00:09:33,959 --> 00:09:36,060
analyzing the function in the same order

213
00:09:36,060 --> 00:09:38,580
presented in the functional list and it

214
00:09:38,580 --> 00:09:40,740
comes to no surprise that experts never

215
00:09:40,740 --> 00:09:43,019
use the sequential strategy

216
00:09:43,019 --> 00:09:46,200
uh we investigated further

217
00:09:46,200 --> 00:09:48,899
and we also had a look at exploration

218
00:09:48,899 --> 00:09:51,839
strategies based on the visits on the

219
00:09:51,839 --> 00:09:54,180
interprocedural control flow graph so

220
00:09:54,180 --> 00:09:56,459
that more precisely

221
00:09:56,459 --> 00:09:59,220
how they were analyzing the bet the

222
00:09:59,220 --> 00:10:01,140
order in which they were analyzing the

223
00:10:01,140 --> 00:10:02,820
basic blocks

224
00:10:02,820 --> 00:10:05,459
the first one we found was the depth

225
00:10:05,459 --> 00:10:07,019
first strategy

226
00:10:07,019 --> 00:10:09,779
what it means is that the users

227
00:10:09,779 --> 00:10:12,720
when she looks at the code she

228
00:10:12,720 --> 00:10:15,360
immediately follow each call instruction

229
00:10:15,360 --> 00:10:19,320
that she finds until she reached a leaf

230
00:10:19,320 --> 00:10:21,480
than the bread first that is the

231
00:10:21,480 --> 00:10:24,779
opposite case then first she visits the

232
00:10:24,779 --> 00:10:26,459
whole function all the basic blocks

233
00:10:26,459 --> 00:10:28,380
within the same within the the function

234
00:10:28,380 --> 00:10:30,720
and then she follows each call

235
00:10:30,720 --> 00:10:32,040
instruction

236
00:10:32,040 --> 00:10:34,500
and finally the hybrid that is the most

237
00:10:34,500 --> 00:10:35,360
common

238
00:10:35,360 --> 00:10:37,980
uh that is you know a mix of the both

239
00:10:37,980 --> 00:10:40,920
strategies without a clear preference on

240
00:10:40,920 --> 00:10:42,660
on the strategy

241
00:10:42,660 --> 00:10:45,660
we found no correlation about the speed

242
00:10:45,660 --> 00:10:49,019
the performances but it is worth

243
00:10:49,019 --> 00:10:51,480
noticing that the novices almost never

244
00:10:51,480 --> 00:10:55,100
used the depth first

245
00:10:55,440 --> 00:10:59,040
okay the last slides the takeaways

246
00:10:59,040 --> 00:11:01,320
so we identified the two orthogonal

247
00:11:01,320 --> 00:11:04,500
types of strategies uh the first one

248
00:11:04,500 --> 00:11:06,660
with respect to the core graph the

249
00:11:06,660 --> 00:11:09,180
sequential the backward and forward

250
00:11:09,180 --> 00:11:11,220
the second one with respect to the

251
00:11:11,220 --> 00:11:12,860
inter-procedural control flow graph

252
00:11:12,860 --> 00:11:17,160
depth first bread first and the hybrid

253
00:11:17,160 --> 00:11:20,700
and unfortunately we found no strategy

254
00:11:20,700 --> 00:11:23,519
that outperforms the other but I mean

255
00:11:23,519 --> 00:11:25,860
this is not so bad we just have to teach

256
00:11:25,860 --> 00:11:27,959
them all to the students so for example

257
00:11:27,959 --> 00:11:30,839
adapt first that no students ever used

258
00:11:30,839 --> 00:11:35,339
it so that the the students the user the

259
00:11:35,339 --> 00:11:37,740
human being okay you can use the

260
00:11:37,740 --> 00:11:40,620
strategy that best fits his way of

261
00:11:40,620 --> 00:11:42,720
thinking

262
00:11:42,720 --> 00:11:45,000
another thing that I had no time to

263
00:11:45,000 --> 00:11:46,680
explain in more details we also found

264
00:11:46,680 --> 00:11:48,779
the experts rename the function and

265
00:11:48,779 --> 00:11:50,339
variables with meaningful names

266
00:11:50,339 --> 00:11:52,860
according to their findings much more

267
00:11:52,860 --> 00:11:54,600
often and this is another thing that we

268
00:11:54,600 --> 00:11:56,279
must push when we teach reverse

269
00:11:56,279 --> 00:11:58,380
engineering to students to keep track to

270
00:11:58,380 --> 00:12:00,300
comment everything

271
00:12:00,300 --> 00:12:04,740
and finally what makes experts

272
00:12:04,740 --> 00:12:07,680
experts is the fact that they are very

273
00:12:07,680 --> 00:12:10,140
very skilled in quickly identify the

274
00:12:10,140 --> 00:12:13,380
user's code and the reason why one of

275
00:12:13,380 --> 00:12:14,899
the reasons

276
00:12:14,899 --> 00:12:18,240
because they are so fast is that they

277
00:12:18,240 --> 00:12:21,480
basically just reverse less code

278
00:12:21,480 --> 00:12:23,279
so there are many more findings in the

279
00:12:23,279 --> 00:12:26,339
paper I am finished thanks for your

280
00:12:26,339 --> 00:12:28,640
attention

