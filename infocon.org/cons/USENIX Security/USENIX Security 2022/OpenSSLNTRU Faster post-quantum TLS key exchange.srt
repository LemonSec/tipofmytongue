1
00:00:07,580 --> 00:00:10,980
open SSL intro faster plus Quantum tlsd

2
00:00:10,980 --> 00:00:12,840
exchange I am Nicole Dubey from Tampa

3
00:00:12,840 --> 00:00:14,519
University and this is a joint work with

4
00:00:14,519 --> 00:00:16,199
Daniel J Bernstein Billy Bob Bramley and

5
00:00:16,199 --> 00:00:18,359
Ming Ching Chan in the next minutes I

6
00:00:18,359 --> 00:00:19,680
will cover the motivation behind our

7
00:00:19,680 --> 00:00:21,480
work and then look at the background of

8
00:00:21,480 --> 00:00:23,100
previous Oswaldo integration experiments

9
00:00:23,100 --> 00:00:25,080
upon which we built and finally I will

10
00:00:25,080 --> 00:00:26,519
give you an overview of open accessory

11
00:00:26,519 --> 00:00:28,140
true and what you will find in the full

12
00:00:28,140 --> 00:00:30,480
paper and finish with some conclusions

13
00:00:30,480 --> 00:00:32,399
let's start with the motivation why do

14
00:00:32,399 --> 00:00:34,140
we care now about post one to crypto we

15
00:00:34,140 --> 00:00:36,239
care because since 1994 Source algorithm

16
00:00:36,239 --> 00:00:37,980
undermines the security of the integer

17
00:00:37,980 --> 00:00:39,480
factorization problem and the discrete

18
00:00:39,480 --> 00:00:41,340
discrete logarithm problem which are the

19
00:00:41,340 --> 00:00:42,840
fundamental assumptions at the core of

20
00:00:42,840 --> 00:00:43,980
the country deployed asymmetric

21
00:00:43,980 --> 00:00:45,719
cryptography we currently don't know of

22
00:00:45,719 --> 00:00:46,980
any sufficiently advanced quantum

23
00:00:46,980 --> 00:00:48,420
computer to run the short algorithm

24
00:00:48,420 --> 00:00:50,399
against currently recommended parameter

25
00:00:50,399 --> 00:00:52,260
sizes but especially for confidentiality

26
00:00:52,260 --> 00:00:54,120
threats are already here so for that in

27
00:00:54,120 --> 00:00:55,680
transit what if an attacker records

28
00:00:55,680 --> 00:00:57,360
current Communications to later decrypt

29
00:00:57,360 --> 00:00:59,100
them once Quantum attacks are viable and

30
00:00:59,100 --> 00:01:00,780
for data address what Financial team has

31
00:01:00,780 --> 00:01:02,460
already done now he increasingly sure

32
00:01:02,460 --> 00:01:03,660
that he can stay confidential for the

33
00:01:03,660 --> 00:01:06,000
next 20 or more years on top of this we

34
00:01:06,000 --> 00:01:07,020
have another problem which is the time

35
00:01:07,020 --> 00:01:08,580
Indonesia fight against new

36
00:01:08,580 --> 00:01:10,260
cryptographic standards and let's

37
00:01:10,260 --> 00:01:12,420
consider ECC analytical cryptography as

38
00:01:12,420 --> 00:01:13,799
an example of a recent cryptographic

39
00:01:13,799 --> 00:01:15,420
transition ECC was introduced around

40
00:01:15,420 --> 00:01:18,119
1985 but it was only around 2006g

41
00:01:18,119 --> 00:01:20,520
published finally standards or ecdsa and

42
00:01:20,520 --> 00:01:23,580
ecdh after this it became popular only

43
00:01:23,580 --> 00:01:25,080
during the last decade and truly

44
00:01:25,080 --> 00:01:27,380
pervasive only with TLS 1.3

45
00:01:27,380 --> 00:01:30,299
is a milestone ECC for the web public

46
00:01:30,299 --> 00:01:32,220
infrastructure for example today is

47
00:01:32,220 --> 00:01:33,540
still moving past the first deployment

48
00:01:33,540 --> 00:01:35,939
steps it is all to say that he told us

49
00:01:35,939 --> 00:01:37,680
at least 20 to 30 years to go through

50
00:01:37,680 --> 00:01:39,360
developments and realization hardening

51
00:01:39,360 --> 00:01:40,920
and learning trust adoption integration

52
00:01:40,920 --> 00:01:42,780
and deployment which are steps required

53
00:01:42,780 --> 00:01:44,220
for a successful cryptographic

54
00:01:44,220 --> 00:01:45,780
transition so the conclusion here is

55
00:01:45,780 --> 00:01:47,159
that if we want to prevent or minimize

56
00:01:47,159 --> 00:01:49,140
disruption we can't wait until powerful

57
00:01:49,140 --> 00:01:50,520
compute quantum computers are available

58
00:01:50,520 --> 00:01:52,439
to start the process and that's why in

59
00:01:52,439 --> 00:01:54,180
2016 niss started a post Quantum

60
00:01:54,180 --> 00:01:56,100
cryptography standardization process the

61
00:01:56,100 --> 00:01:57,360
process has since gone through three

62
00:01:57,360 --> 00:01:58,799
rounds of selection and consolidation

63
00:01:58,799 --> 00:02:00,479
and it's now progressing customization

64
00:02:00,479 --> 00:02:03,240
phase alongside author's round uh the

65
00:02:03,240 --> 00:02:04,500
the process is selecting two separate

66
00:02:04,500 --> 00:02:06,719
operations and they are post Quantum

67
00:02:06,719 --> 00:02:07,799
encryption in the form of key

68
00:02:07,799 --> 00:02:09,660
encapsulation methods chem and post

69
00:02:09,660 --> 00:02:10,979
Quantum digital signatures or

70
00:02:10,979 --> 00:02:13,200
authentication in this work we focused

71
00:02:13,200 --> 00:02:14,879
only on post Quantum confidentiality

72
00:02:14,879 --> 00:02:16,500
chem and not on post Quantum

73
00:02:16,500 --> 00:02:18,420
authentication we selected Enterprise

74
00:02:18,420 --> 00:02:20,459
which was one of the chem alternate

75
00:02:20,459 --> 00:02:21,900
candidates until the end of round three

76
00:02:21,900 --> 00:02:24,980
which was finally announced in July uh

77
00:02:24,980 --> 00:02:27,540
entry plan submission proposes two

78
00:02:27,540 --> 00:02:29,520
variants and we work on the Streamline

79
00:02:29,520 --> 00:02:31,560
and supreme enter Prime as entropy

80
00:02:31,560 --> 00:02:33,780
variant which is a small lattice based

81
00:02:33,780 --> 00:02:35,160
cap designed to minimize the complexity

82
00:02:35,160 --> 00:02:37,200
of a thorough Security review even

83
00:02:37,200 --> 00:02:38,760
though it did not survive the round

84
00:02:38,760 --> 00:02:40,560
three of nisbqc it has been already

85
00:02:40,560 --> 00:02:42,840
integrated for example in open SSH and

86
00:02:42,840 --> 00:02:46,200
since the 9.0 release a central p is

87
00:02:46,200 --> 00:02:48,599
enabled by default in openssh

88
00:02:48,599 --> 00:02:51,420
so let's look at the background of our

89
00:02:51,420 --> 00:02:53,819
previous experiment of TLS integration

90
00:02:53,819 --> 00:02:56,580
for post Quantum which was run in 2019

91
00:02:56,580 --> 00:02:58,620
by cloudflare in Google this picture

92
00:02:58,620 --> 00:03:00,300
comes from a nice analogy by Nick

93
00:03:00,300 --> 00:03:03,360
Sullivan and as you can see two

94
00:03:03,360 --> 00:03:05,879
different hybrid crypto systems were

95
00:03:05,879 --> 00:03:07,440
pitted against each other they were

96
00:03:07,440 --> 00:03:09,780
hybrid because they mix a post Quantum

97
00:03:09,780 --> 00:03:11,760
component with a traditional component

98
00:03:11,760 --> 00:03:15,180
which for both crypto system is x25519

99
00:03:15,180 --> 00:03:17,280
on the left the post Quantum component

100
00:03:17,280 --> 00:03:20,340
is intro hrss and it is associated with

101
00:03:20,340 --> 00:03:23,040
an ostrich because it's taller as it

102
00:03:23,040 --> 00:03:24,659
requires longer cryptographic material

103
00:03:24,659 --> 00:03:27,959
but it's also faster in computation on

104
00:03:27,959 --> 00:03:29,519
the right side instead the postmodern

105
00:03:29,519 --> 00:03:32,040
components were component was psych but

106
00:03:32,040 --> 00:03:33,900
which is associated with the turkey

107
00:03:33,900 --> 00:03:35,819
because it has shorter cryptographic

108
00:03:35,819 --> 00:03:38,940
material but also slower computation so

109
00:03:38,940 --> 00:03:40,860
this experiment run in 2019 the

110
00:03:40,860 --> 00:03:43,500
conclusion was that n2hrss was clearly a

111
00:03:43,500 --> 00:03:45,239
winner both on server and client side at

112
00:03:45,239 --> 00:03:47,340
least for the DLS use case so in this

113
00:03:47,340 --> 00:03:49,379
work we present open SSL intro which is

114
00:03:49,379 --> 00:03:50,819
an improved integration of course Anton

115
00:03:50,819 --> 00:03:53,640
chem into TLS 1.3 and we improve on the

116
00:03:53,640 --> 00:03:56,159
post one two portion of ccpq2 so in our

117
00:03:56,159 --> 00:03:57,900
experiment does not use a hybrid

118
00:03:57,900 --> 00:04:00,060
agreement but isole is the post Quantum

119
00:04:00,060 --> 00:04:01,440
component for better comparison against

120
00:04:01,440 --> 00:04:04,560
other crypto systems nonetheless our

121
00:04:04,560 --> 00:04:06,659
paper does not make recommendations for

122
00:04:06,659 --> 00:04:08,700
or against hybrids our performance in

123
00:04:08,700 --> 00:04:10,080
software engineering contributions are

124
00:04:10,080 --> 00:04:11,519
equally applicable to hybrid and

125
00:04:11,519 --> 00:04:13,680
non-hybrid scenarios so how did we

126
00:04:13,680 --> 00:04:15,120
improve on the post Quantum portions

127
00:04:15,120 --> 00:04:17,880
cpq2 we did it in two linked ways key

128
00:04:17,880 --> 00:04:19,620
exchange performance and DLS software

129
00:04:19,620 --> 00:04:22,260
engineering so how let's have a look at

130
00:04:22,260 --> 00:04:23,580
the cryptographic features of iPhone

131
00:04:23,580 --> 00:04:25,500
components of the two experiments as I

132
00:04:25,500 --> 00:04:27,540
anticipated in open SSL intro we picked

133
00:04:27,540 --> 00:04:28,919
a different crypto system which is a

134
00:04:28,919 --> 00:04:30,600
centropy and in particular we picked the

135
00:04:30,600 --> 00:04:33,240
S entropy 761 parameter set which is in

136
00:04:33,240 --> 00:04:36,120
the same security class as class as and

137
00:04:36,120 --> 00:04:38,520
true hrss 701 which was featured in

138
00:04:38,520 --> 00:04:41,639
ccbq2 uh looking at the length of

139
00:04:41,639 --> 00:04:43,620
cryptographic material they are in the

140
00:04:43,620 --> 00:04:45,780
same ballpark so there is not a big

141
00:04:45,780 --> 00:04:47,759
difference here the big difference comes

142
00:04:47,759 --> 00:04:51,419
in the performance figures uh before our

143
00:04:51,419 --> 00:04:55,680
work kitchen for sn2p761 was three over

144
00:04:55,680 --> 00:04:58,440
three times slower than for into hrss

145
00:04:58,440 --> 00:05:01,380
701 and considering the full cost of

146
00:05:01,380 --> 00:05:03,000
kitchen plus encapsulation plus

147
00:05:03,000 --> 00:05:04,280
decapsulation

148
00:05:04,280 --> 00:05:07,380
equals over 2.5 times lower for Essence

149
00:05:07,380 --> 00:05:12,600
rupee 761 then for intro hrs701 but in

150
00:05:12,600 --> 00:05:15,900
our work uh we we managed to optimize

151
00:05:15,900 --> 00:05:18,720
the central p761 particularly we managed

152
00:05:18,720 --> 00:05:21,240
to exceed a five-time speed up on Keygen

153
00:05:21,240 --> 00:05:24,000
and to also achieve smaller gains on the

154
00:05:24,000 --> 00:05:25,320
encapsulation and decapsulation

155
00:05:25,320 --> 00:05:29,039
operations overall our experiments our

156
00:05:29,039 --> 00:05:30,660
experiment ends up using a higher

157
00:05:30,660 --> 00:05:32,400
performance of stretch if you want which

158
00:05:32,400 --> 00:05:35,580
also has better security level and does

159
00:05:35,580 --> 00:05:38,160
not share the psychotomic concerns of

160
00:05:38,160 --> 00:05:40,020
Andrew hrss

161
00:05:40,020 --> 00:05:42,000
so how did we manage to improve kitchen

162
00:05:42,000 --> 00:05:43,919
performance the fundamental

163
00:05:43,919 --> 00:05:44,880
consideration here is that the

164
00:05:44,880 --> 00:05:46,620
bottleneck in a centropy kitchen is the

165
00:05:46,620 --> 00:05:49,080
computation of certain types of inverses

166
00:05:49,080 --> 00:05:50,400
so the idea here is to adopt

167
00:05:50,400 --> 00:05:52,560
Montgomery's trick which is based on the

168
00:05:52,560 --> 00:05:54,120
fact that two independent inverses one

169
00:05:54,120 --> 00:05:56,160
over a and one over B can be computed as

170
00:05:56,160 --> 00:05:58,199
B times R and A times R respectively

171
00:05:58,199 --> 00:06:00,180
from a single inversion R and this can

172
00:06:00,180 --> 00:06:01,380
be of course repeated for example

173
00:06:01,380 --> 00:06:03,660
converting 32 inversions into a single

174
00:06:03,660 --> 00:06:07,199
inversion plus 93 multiplications we can

175
00:06:07,199 --> 00:06:09,300
adopt this trick by implementing a batch

176
00:06:09,300 --> 00:06:10,919
kitchen operation now this must be

177
00:06:10,919 --> 00:06:12,360
designed so that the batch size is large

178
00:06:12,360 --> 00:06:13,860
enough for inversion time to mostly

179
00:06:13,860 --> 00:06:15,780
disappear and yet small enough to avoid

180
00:06:15,780 --> 00:06:17,160
creating problems with latency catch

181
00:06:17,160 --> 00:06:20,400
misses Etc we also add to design and

182
00:06:20,400 --> 00:06:22,259
develop new algorithms and software to

183
00:06:22,259 --> 00:06:23,639
optimize the centropy multiplication

184
00:06:23,639 --> 00:06:25,380
since previously the multiplications

185
00:06:25,380 --> 00:06:27,960
were mostly a big factor times small

186
00:06:27,960 --> 00:06:30,300
factor but Montgomery Street requires

187
00:06:30,300 --> 00:06:32,639
optimizing for big factor time big

188
00:06:32,639 --> 00:06:34,919
factor multiplication so this is in a

189
00:06:34,919 --> 00:06:37,560
nutshell how we improve the kitchen

190
00:06:37,560 --> 00:06:39,300
performance let's now move to the

191
00:06:39,300 --> 00:06:41,400
engineering side so in this slide you

192
00:06:41,400 --> 00:06:43,259
will see on the left and on the right

193
00:06:43,259 --> 00:06:45,960
two views of the same architecture let's

194
00:06:45,960 --> 00:06:48,060
start from what we wanted to achieve

195
00:06:48,060 --> 00:06:50,880
what we wanted to achieve was enabled um

196
00:06:50,880 --> 00:06:53,220
the unmodified software ecosystem on the

197
00:06:53,220 --> 00:06:56,280
top uh to run DLS 1.3 key agreement

198
00:06:56,280 --> 00:06:59,520
using fast plus Quantum can this uh

199
00:06:59,520 --> 00:07:01,800
architecture from the actor's point of

200
00:07:01,800 --> 00:07:04,500
view is very similar to the cctq2

201
00:07:04,500 --> 00:07:06,419
architecture so we have on the left side

202
00:07:06,419 --> 00:07:08,340
a client which is running a web browser

203
00:07:08,340 --> 00:07:10,560
in this case Epiphany and on the right

204
00:07:10,560 --> 00:07:12,660
side we have a TLS Terminator in this

205
00:07:12,660 --> 00:07:14,880
case running as tunnel which starts on

206
00:07:14,880 --> 00:07:16,740
the back end with our backend web server

207
00:07:16,740 --> 00:07:19,740
so how did we manage to enable fast

208
00:07:19,740 --> 00:07:21,599
Force Quantum chem in unmodified

209
00:07:21,599 --> 00:07:24,000
software we managed to do that by

210
00:07:24,000 --> 00:07:26,699
altering everything under this boundary

211
00:07:26,699 --> 00:07:29,099
line the first layer below this boundary

212
00:07:29,099 --> 00:07:31,500
line is the cryptographic library layer

213
00:07:31,500 --> 00:07:33,419
so both on the client side and on the

214
00:07:33,419 --> 00:07:36,419
server side the applications are running

215
00:07:36,419 --> 00:07:39,060
um are based on openssl so we released

216
00:07:39,060 --> 00:07:41,759
Apache set for openssl which enables

217
00:07:41,759 --> 00:07:44,099
support for private TLS code points for

218
00:07:44,099 --> 00:07:47,819
sn2p and also allows leave as a cell to

219
00:07:47,819 --> 00:07:50,960
handle chem groups alongside

220
00:07:50,960 --> 00:07:52,860
non-interactive exchange like different

221
00:07:52,860 --> 00:07:55,919
element and elliptical as part of the

222
00:07:55,919 --> 00:07:57,360
key agreement this was done

223
00:07:57,360 --> 00:08:00,120
transparently for the TLs protocol and

224
00:08:00,120 --> 00:08:02,580
all these patches were mostly contained

225
00:08:02,580 --> 00:08:06,120
within the lib SSL part of open SSL but

226
00:08:06,120 --> 00:08:07,440
the other important thing that you might

227
00:08:07,440 --> 00:08:09,840
have noticed is that among our patch set

228
00:08:09,840 --> 00:08:11,699
I didn't mention anything about

229
00:08:11,699 --> 00:08:15,000
optimized implementation for sn3p in in

230
00:08:15,000 --> 00:08:16,740
the past and for open system and that's

231
00:08:16,740 --> 00:08:19,139
why that's because we did not include in

232
00:08:19,139 --> 00:08:21,479
the touch set the the optimized software

233
00:08:21,479 --> 00:08:24,360
instead we chose to the couple open SSL

234
00:08:24,360 --> 00:08:25,620
from the implementation through an

235
00:08:25,620 --> 00:08:28,199
intermediate layer which is represented

236
00:08:28,199 --> 00:08:30,539
by this engine so engine in open SSL

237
00:08:30,539 --> 00:08:33,360
language is a module to interface with

238
00:08:33,360 --> 00:08:35,099
for example a hardware accelerator but

239
00:08:35,099 --> 00:08:36,479
there is no requirement for this to be a

240
00:08:36,479 --> 00:08:39,059
hardware device and indeed we use use it

241
00:08:39,059 --> 00:08:40,620
to interface with our software

242
00:08:40,620 --> 00:08:42,719
implementation so we release the new

243
00:08:42,719 --> 00:08:44,520
engine which without engine true which

244
00:08:44,520 --> 00:08:46,920
are several things it provides all the

245
00:08:46,920 --> 00:08:49,560
data structures and interfaces that

246
00:08:49,560 --> 00:08:53,040
openssl requires to offer a new uh

247
00:08:53,040 --> 00:08:56,220
crypto system inside the library and it

248
00:08:56,220 --> 00:08:58,140
also supports the Keygen batching and

249
00:08:58,140 --> 00:09:00,060
this is done transparently for both open

250
00:09:00,060 --> 00:09:02,160
SSL and the applications on top and this

251
00:09:02,160 --> 00:09:04,200
is very important because it removes the

252
00:09:04,200 --> 00:09:06,480
complexity of deploying batch Keygen

253
00:09:06,480 --> 00:09:09,120
without changing existing applications

254
00:09:09,120 --> 00:09:11,940
but once again the actual optimized

255
00:09:11,940 --> 00:09:13,980
implementation of as entropy is not

256
00:09:13,980 --> 00:09:16,019
included in this layer so our engine

257
00:09:16,019 --> 00:09:18,240
through engine true is a shallow

258
00:09:18,240 --> 00:09:20,760
dynamically loadable module for lip

259
00:09:20,760 --> 00:09:23,100
crypto and the the actual implementation

260
00:09:23,100 --> 00:09:25,380
is separate from the engine and it's in

261
00:09:25,380 --> 00:09:28,500
the bottom layer of the left stack as

262
00:09:28,500 --> 00:09:30,420
you can see the bottom layer consists of

263
00:09:30,420 --> 00:09:31,860
the rapidly evolving post Quantum

264
00:09:31,860 --> 00:09:34,080
software ecosystem in here we release

265
00:09:34,080 --> 00:09:36,540
two new libraries Libya Central p761 and

266
00:09:36,540 --> 00:09:39,480
857 which provides the new optimized

267
00:09:39,480 --> 00:09:41,100
implementations of instant office

268
00:09:41,100 --> 00:09:43,560
entropy featuring all the details that I

269
00:09:43,560 --> 00:09:45,240
discussed before about the performance

270
00:09:45,240 --> 00:09:47,459
Improvement this is the layer that

271
00:09:47,459 --> 00:09:48,660
actually contains the actual

272
00:09:48,660 --> 00:09:50,459
cryptographic functionality and the idea

273
00:09:50,459 --> 00:09:53,399
here is to use the engine to decouple

274
00:09:53,399 --> 00:09:55,920
open SSL from the rapidly evolving post

275
00:09:55,920 --> 00:09:57,779
item software ecosystem and vice versa

276
00:09:57,779 --> 00:10:00,420
so open is a cell the patch set to open

277
00:10:00,420 --> 00:10:02,220
SSL in this case doesn't need to be

278
00:10:02,220 --> 00:10:04,560
updated as frequently as the updates in

279
00:10:04,560 --> 00:10:06,779
the rapidly evolving post item software

280
00:10:06,779 --> 00:10:08,820
ecosystem and vice versa the developers

281
00:10:08,820 --> 00:10:11,160
of these cam libraries do not need to

282
00:10:11,160 --> 00:10:13,560
know anything about the internal details

283
00:10:13,560 --> 00:10:15,360
of the open SSL API which can be more

284
00:10:15,360 --> 00:10:17,760
complex than the standardized cam API

285
00:10:17,760 --> 00:10:21,060
that they need to focus on while working

286
00:10:21,060 --> 00:10:23,100
on this layer and the other Advantage is

287
00:10:23,100 --> 00:10:25,080
that these new cam libraries can be

288
00:10:25,080 --> 00:10:27,660
directly reused by other cryptographic

289
00:10:27,660 --> 00:10:29,880
libraries and they are not bound to open

290
00:10:29,880 --> 00:10:32,279
SSL in any way

291
00:10:32,279 --> 00:10:35,040
so these architecture also allows us to

292
00:10:35,040 --> 00:10:38,040
run a end-to-end TLS macro Benchmark and

293
00:10:38,040 --> 00:10:40,800
this is what these features Briefly

294
00:10:40,800 --> 00:10:42,600
summarize so this picture shows

295
00:10:42,600 --> 00:10:44,160
cumulative distributions of handshake

296
00:10:44,160 --> 00:10:45,660
performance under different crypto

297
00:10:45,660 --> 00:10:47,399
systems in a local network and the

298
00:10:47,399 --> 00:10:49,260
results show that in our implementation

299
00:10:49,260 --> 00:10:51,420
both the recommended essential p761

300
00:10:51,420 --> 00:10:52,980
parameter set and the higher security

301
00:10:52,980 --> 00:10:55,740
has entropy 857 consistently achieve

302
00:10:55,740 --> 00:10:57,480
more connections per second than the

303
00:10:57,480 --> 00:10:59,160
optimized implementations of pre-quantum

304
00:10:59,160 --> 00:11:00,600
Alternatives currently deployed at large

305
00:11:00,600 --> 00:11:03,959
which are represented here by x25519 and

306
00:11:03,959 --> 00:11:06,899
p256 which are the uh

307
00:11:06,899 --> 00:11:10,140
most optimized implementations included

308
00:11:10,140 --> 00:11:11,300
in

309
00:11:11,300 --> 00:11:12,860
openssl11

310
00:11:12,860 --> 00:11:14,940
for the system Where We Run The

311
00:11:14,940 --> 00:11:17,040
Experiment it is important to remark

312
00:11:17,040 --> 00:11:18,420
that one should not conclude from this

313
00:11:18,420 --> 00:11:21,000
picture that sn2p 761 and it says rupee

314
00:11:21,000 --> 00:11:24,959
857 costs less than ECC overall uh the

315
00:11:24,959 --> 00:11:26,519
unloaded i-bound with network of our

316
00:11:26,519 --> 00:11:28,380
experimental environment masks the

317
00:11:28,380 --> 00:11:30,000
higher communication cost of the lattice

318
00:11:30,000 --> 00:11:32,519
crypto systems so this picture must be

319
00:11:32,519 --> 00:11:34,040
considered in the context of our

320
00:11:34,040 --> 00:11:37,640
experimental environment

321
00:11:37,920 --> 00:11:41,040
conclusions we provided we know penal

322
00:11:41,040 --> 00:11:42,540
system through faster optimized

323
00:11:42,540 --> 00:11:44,399
implementation for our various essential

324
00:11:44,399 --> 00:11:46,440
parameter sets including huge clutching

325
00:11:46,440 --> 00:11:49,260
gains on kitchen we also achieved a

326
00:11:49,260 --> 00:11:50,519
transparent integration for existing

327
00:11:50,519 --> 00:11:52,920
applications in an open SSL engine and

328
00:11:52,920 --> 00:11:54,600
we did so decoupling openness itself

329
00:11:54,600 --> 00:11:56,279
from fast-paced development of optimized

330
00:11:56,279 --> 00:11:57,959
positive implementations and vice versa

331
00:11:57,959 --> 00:11:59,220
the latter from data types and

332
00:11:59,220 --> 00:12:01,500
interfaces specific to open SSL I invite

333
00:12:01,500 --> 00:12:02,760
you to check the paper and its

334
00:12:02,760 --> 00:12:04,560
appendices or more math details micro

335
00:12:04,560 --> 00:12:06,540
and macro benchmarks comparisons and

336
00:12:06,540 --> 00:12:08,339
more also please try the open source

337
00:12:08,339 --> 00:12:10,200
artifact that we released at the URL

338
00:12:10,200 --> 00:12:12,000
that you can see on the slide

339
00:12:12,000 --> 00:12:13,920
thank you for your attention here's

340
00:12:13,920 --> 00:12:15,120
what's open accessory true faster

341
00:12:15,120 --> 00:12:17,700
positive exchange and now I welcome your

342
00:12:17,700 --> 00:12:19,880
questions

