1
00:00:10,089 --> 00:00:13,339
things that that I first to know when I
was

2
00:00:13,339 --> 00:00:16,090
getting introduced to Bloomberg

3
00:00:16,090 --> 00:00:20,619
years back about Bloomberg I thought why
would acquire it security technology is

4
00:00:20,619 --> 00:00:22,980
really want to work in a financial
company that doesn't really seem

5
00:00:22,980 --> 00:00:26,070
terribly interesting but what I quickly
learned was that actually numbers a lot

6
00:00:26,070 --> 00:00:26,610
more than

7
00:00:26,610 --> 00:00:29,990
actually in fact we're not a financial
company were actually data analytics

8
00:00:29,990 --> 00:00:30,400
company

9
00:00:30,400 --> 00:00:33,739
our talk a little bit more about that
but the president talking about today

10
00:00:33,739 --> 00:00:37,620
I is actually one where we started about
a little over a year ago

11
00:00:37,620 --> 00:00:41,320
in building private cloud infrastructure
and are I got a lot of security

12
00:00:41,320 --> 00:00:42,580
conferences i've seen

13
00:00:42,580 --> 00:00:46,360
scads of talks about private clouds are
actually really public clouds and

14
00:00:46,360 --> 00:00:49,220
the security implications have actually
running with your company's date in

15
00:00:49,220 --> 00:00:51,730
somebody else's infrastructure all the
stuff that's not gonna be talking about

16
00:00:51,730 --> 00:00:52,148
today

17
00:00:52,149 --> 00:00:56,350
I said I actually wanna focus on the
security assurance opportunities that a

18
00:00:56,350 --> 00:00:58,340
private cloud infrastructure can
actually afford you

19
00:00:58,340 --> 00:01:02,000
on the talk through a little bit about
somehow we designed our cloud

20
00:01:02,000 --> 00:01:02,800
infrastructure

21
00:01:02,800 --> 00:01:05,840
and I mean actually point you're a
couple resources good we actually open

22
00:01:05,840 --> 00:01:08,850
source solve our recipes for standing
these things up so you can actually

23
00:01:08,850 --> 00:01:13,509
do them yourselves if you want to arm
but before I get too far into that

24
00:01:13,509 --> 00:01:17,180
very this down i feel like im being
really loud are

25
00:01:17,180 --> 00:01:20,990
I let me a first start off with the fact
that you know when we first for getting

26
00:01:20,990 --> 00:01:21,699
started

27
00:01:21,700 --> 00:01:24,429
we knew that we didn't really know
everything about private clouds we have

28
00:01:24,429 --> 00:01:27,289
lots more people that were thinking a
lot about it so we decided to really get

29
00:01:27,289 --> 00:01:27,740
some

30
00:01:27,740 --> 00:01:32,310
expert advice first and as a as Mike
mentioned I use to %uh be at

31
00:01:32,310 --> 00:01:36,319
HP fortify so I think that's where we
are for Hewlett Packard is known for

32
00:01:36,319 --> 00:01:36,979
their basic

33
00:01:36,979 --> 00:01:40,860
affordable no frills computers but that
doesn't mean they can't keep up with the

34
00:01:40,860 --> 00:01:42,000
latest technology

35
00:01:42,000 --> 00:01:45,990
in a press release yesterday hP said
quote we are excited to begin offering

36
00:01:45,990 --> 00:01:48,140
that cloud thing that everyone is
talking about

37
00:01:48,140 --> 00:01:51,349
we definitely have the clout on our
computers and it is better than anyone

38
00:01:51,349 --> 00:01:52,209
else's clout

39
00:01:52,209 --> 00:01:55,800
earlier today i sat down with HP
spokesman Gary Clement who said the

40
00:01:55,800 --> 00:01:57,819
company couldn't wait to show people
quote

41
00:01:57,819 --> 00:02:00,989
how they do their clout stuff we are
absolutely thrilled

42
00:02:00,989 --> 00:02:04,160
that now people with computers

43
00:02:04,160 --> 00:02:08,329
or or phones both

44
00:02:08,330 --> 00:02:11,400
of up will now be able to I'll the

45
00:02:11,400 --> 00:02:16,130
back things up to the clock and yes and
that's definitely yes definitely

46
00:02:16,130 --> 00:02:18,519
something that people do and they will
be doing it

47
00:02:18,520 --> 00:02:22,300
with HP HP is making their cloud
technology the centerpiece of a major

48
00:02:22,300 --> 00:02:24,480
new print and television ad campaign

49
00:02:24,480 --> 00:02:28,828
HP's the company I've always relied on
so nice I did get on my computer on the

50
00:02:28,829 --> 00:02:30,819
cloud which is how you do it naturally

51
00:02:30,819 --> 00:02:35,488
HP was the company I chips HP's cloud is
the perfect tool for emails

52
00:02:35,489 --> 00:02:39,129
Facebook's texting and CD-rom's has the
clout work

53
00:02:39,129 --> 00:02:46,129
so simple and intuitive I don't need to
waste your time explaining

54
00:02:47,900 --> 00:02:51,580
clinton says it isn't surprising their
quote up on the clout considering there

55
00:02:51,580 --> 00:02:54,280
on the cutting edge up all the latest
tech trends

56
00:02:54,280 --> 00:02:58,310
now are there any additional features
crowdsourcing is something we are having

57
00:02:58,310 --> 00:02:59,360
crowd-sourcing

58
00:02:59,360 --> 00:03:02,830
2.0 we have a %uh social sharing we have

59
00:03:02,830 --> 00:03:06,099
4G 5g sixty really all the genes

60
00:03:06,099 --> 00:03:09,619
we have we have all in the computer

61
00:03:09,620 --> 00:03:14,390
despite all of their wide array of
technology hP says they're most excited

62
00:03:14,390 --> 00:03:18,159
about the clout they even let me take a
peek at their design laboratory

63
00:03:18,159 --> 00:03:22,160
where HP engineers were trying out some
unique development techniques

64
00:03:22,160 --> 00:03:26,030
so how much capacity will HP's cloud
users have access to

65
00:03:26,030 --> 00:03:30,329
1000 will be watching to see if

66
00:03:30,329 --> 00:03:34,390
HP's cloud push pays off make sure to
catch the next tech trends when we'll be

67
00:03:34,390 --> 00:03:35,720
looking at body do you

68
00:03:35,720 --> 00:03:39,079
the popular new device that links with
your iPhone to post all your bodily

69
00:03:39,079 --> 00:03:40,739
functions right to Facebook

70
00:03:40,739 --> 00:03:44,239
I

71
00:03:44,239 --> 00:03:48,310
okay so obviously that was not from HP
that was from the onion

72
00:03:48,310 --> 00:03:52,040
I but but it you know obviously HP has
actually been pretty good partner with

73
00:03:52,040 --> 00:03:52,459
us and

74
00:03:52,459 --> 00:03:54,910
in determining our hardware
configurations have a buddy here from HP

75
00:03:54,910 --> 00:03:55,609
don't be offended

76
00:03:55,609 --> 00:04:00,690
I'm so I in any case that let me let me
start off by telling a little bit about

77
00:04:00,690 --> 00:04:02,970
like Bloomberg is a company or go
through this pretty quickly and then

78
00:04:02,970 --> 00:04:03,750
we'll jump into

79
00:04:03,750 --> 00:04:06,840
look at the technical details cuz theres
is lots on the naked share with you

80
00:04:06,840 --> 00:04:07,470
today and

81
00:04:07,470 --> 00:04:10,530
I just in terms of logistics you know
any point you have a question just

82
00:04:10,530 --> 00:04:14,090
just jump up here and ask you know i i
don't need to wait to the end to ask

83
00:04:14,090 --> 00:04:15,340
questions if you have one in the middle

84
00:04:15,340 --> 00:04:19,380
by by all means go for up one thing that

85
00:04:19,380 --> 00:04:22,620
that I want to go to start off with
which is what number does the company we

86
00:04:22,620 --> 00:04:24,860
offer our primarily our main business is
a

87
00:04:24,860 --> 00:04:27,979
what we call the Bloomberg professional
service I mean we really only service

88
00:04:27,979 --> 00:04:30,510
about 300,000 customers a little over
that

89
00:04:30,510 --> 00:04:34,190
are and and really work we're gonna be
company for just having 300,000

90
00:04:34,190 --> 00:04:35,280
customers because the

91
00:04:35,280 --> 00:04:38,619
well other than other than that service
we also have

92
00:04:38,620 --> 00:04:42,229
the television station that you've
probably seen we have news radio this at

93
00:04:42,229 --> 00:04:43,969
this wide variety of media in terms of

94
00:04:43,970 --> 00:04:47,580
reporting and magazines and things of
that nature there's also a vertical

95
00:04:47,580 --> 00:04:48,560
businesses like a

96
00:04:48,560 --> 00:04:52,570
law in latex business a government
analytics business sports even

97
00:04:52,570 --> 00:04:56,849
for those they're really into sports arm
the other thing I want to come to give

98
00:04:56,849 --> 00:05:00,039
you an idea was is the scale of kinda
what we deal with on a day-to-day basis

99
00:05:00,039 --> 00:05:04,099
I'm are our messaging platforms i lease
for instant messaging is about 22

100
00:05:04,099 --> 00:05:04,570
million

101
00:05:04,570 --> 00:05:07,000
instant messages a day which isn't
really you know may be that crazy

102
00:05:07,000 --> 00:05:08,000
compared to some others

103
00:05:08,000 --> 00:05:12,719
about $215 million actual email to style
messages that are sent back and forth

104
00:05:12,719 --> 00:05:14,000
across our infrastructure

105
00:05:14,000 --> 00:05:17,300
what other details there you know we
collect feeds from you know maybe about

106
00:05:17,300 --> 00:05:21,090
350 different exchanges which is really
more than anybody else in the world and

107
00:05:21,090 --> 00:05:21,400
I

108
00:05:21,400 --> 00:05:25,710
about seven hundred and s rather 7500
other feeds that we get which actually

109
00:05:25,710 --> 00:05:26,479
amounts to about

110
00:05:26,479 --> 00:05:31,000
$45 billion takes a day in terms of
events that we ingest we process and

111
00:05:31,000 --> 00:05:33,690
then we distribute or white ready for
customers are interested

112
00:05:33,690 --> 00:05:37,719
which I is quality quite a huge scale
actually if you if you think about what

113
00:05:37,719 --> 00:05:41,310
you actually need to do it on just to
give you an idea for the time when

114
00:05:41,310 --> 00:05:43,610
consumers actually been around for a
very long time

115
00:05:43,610 --> 00:05:47,770
I the you know before really the first
web server was written we had 10,000

116
00:05:47,770 --> 00:05:50,270
terminals installed on people's deaths
around the financial

117
00:05:50,270 --> 00:05:54,219
up and that actually has led some very
interesting legacy issues by the way

118
00:05:54,219 --> 00:05:59,740
but to on top hat there's this is
Garrett I might just give you a feel for

119
00:05:59,740 --> 00:06:02,270
sort of how things were developing in
the web world how things were happening

120
00:06:02,270 --> 00:06:02,950
at Bloomberg

121
00:06:02,950 --> 00:06:06,070
I'm so by the time we got to know about
the 200,000

122
00:06:06,070 --> 00:06:09,900
terminal installed that's when can I go
to comment on the map arm and then

123
00:06:09,900 --> 00:06:13,080
by the time we were about 200,000 are
you have facebook

124
00:06:13,080 --> 00:06:16,229
I'm and then today we have about 300,000
terminals installed

125
00:06:16,229 --> 00:06:19,510
in our R&D total was about up to about
forty five hundred people they're

126
00:06:19,510 --> 00:06:20,889
actually developing code in reading

127
00:06:20,889 --> 00:06:24,400
reading software for platforms and
originally

128
00:06:24,400 --> 00:06:27,289
a Bloomberg was actually a hardware
company because you know back in the

129
00:06:27,289 --> 00:06:30,870
eighties err in eighty-one we started
there was a lot of PCs that you can

130
00:06:30,870 --> 00:06:32,229
actually put on people's desks

131
00:06:32,229 --> 00:06:35,659
we actually designed hardware terminals
that we put on people's desks

132
00:06:35,659 --> 00:06:38,919
of course now today that's actually a
software-based solution so she is an

133
00:06:38,919 --> 00:06:41,080
application that runs on your on your
desktop

134
00:06:41,080 --> 00:06:43,639
about we actually still make hardware in
fact we actually doing some pretty

135
00:06:43,639 --> 00:06:45,500
interesting stuff in the hardware space
word

136
00:06:45,500 --> 00:06:48,440
actually designing trusted computing
platforms that are built into our

137
00:06:48,440 --> 00:06:51,389
keyboards network multi-factor
authentication devices that we actually

138
00:06:51,389 --> 00:06:52,620
engineering building house

139
00:06:52,620 --> 00:06:55,800
so we actually do love kinda crazy
things and security space lot of people

140
00:06:55,800 --> 00:06:56,460
may not know about

141
00:06:56,460 --> 00:07:00,719
but that's much not going to in terms of
history have a Bloomberg itself its

142
00:07:00,719 --> 00:07:03,789
get what I'm here to talk about what is
actually the

143
00:07:03,789 --> 00:07:07,960
the private cloud stack we've designed
so the star of

144
00:07:07,960 --> 00:07:11,580
what we call this project is BC PC which
is I've been told by

145
00:07:11,580 --> 00:07:15,068
numerous people is an absolutely
terrible acronym for Qatar to say but it

146
00:07:15,069 --> 00:07:17,800
stands for bloomberg clustered private
clouds

147
00:07:17,800 --> 00:07:21,210
and reason I that we were designing it
is really because using a public cloud

148
00:07:21,210 --> 00:07:24,489
infrastructure like Amazon Rackspace and
things like that simply don't work for

149
00:07:24,490 --> 00:07:26,169
the kind of infrastructure that we have

150
00:07:26,169 --> 00:07:29,889
we have locality to various exchanges
that's very important for latency of

151
00:07:29,889 --> 00:07:31,979
data that were actually delivering to
our customers

152
00:07:31,979 --> 00:07:35,169
public love to really help you do that
very well its is it's at least on a

153
00:07:35,169 --> 00:07:36,120
great fit

154
00:07:36,120 --> 00:07:39,699
at face value in addition to that
there's also sensitivity updated when

155
00:07:39,699 --> 00:07:43,030
when a customer of ours is actually
giving us their therefore portfolios at

156
00:07:43,030 --> 00:07:43,729
what kinds of

157
00:07:43,729 --> 00:07:46,590
security is a managing and so forth we
really don't want to be sending that

158
00:07:46,590 --> 00:07:48,310
Apple public cloud infrastructure

159
00:07:48,310 --> 00:07:52,240
and have that day to live somewhere
that's outside a bar are self control

160
00:07:52,240 --> 00:07:55,479
beyond that we also wanted to make sure
we were designing our cloud

161
00:07:55,479 --> 00:07:58,580
infrastructure that we had kind of pure
horizontal scaling so that we didn't

162
00:07:58,580 --> 00:07:59,419
have

163
00:07:59,419 --> 00:08:03,590
a minimal footprint that was large I'm
because actually we're on one of the

164
00:08:03,590 --> 00:08:05,560
largest private networks in the world we
have

165
00:08:05,560 --> 00:08:10,680
20,000 router and points 33,000 leased
lines that actually compose our

166
00:08:10,680 --> 00:08:14,159
public I'm sorry a private network I'm
across those

167
00:08:14,159 --> 00:08:16,770
you can imagine that there's lotsa lotsa
point the presence that we have

168
00:08:16,770 --> 00:08:17,460
throughout the world

169
00:08:17,460 --> 00:08:20,560
about two hundred different different
pops in different countries throughout

170
00:08:20,560 --> 00:08:21,460
the world

171
00:08:21,460 --> 00:08:25,159
and the idea of having programmatically
definable infrastructure

172
00:08:25,159 --> 00:08:28,400
in those locations is actually a lot
more appealing than even having it not

173
00:08:28,400 --> 00:08:29,609
mean data centers

174
00:08:29,610 --> 00:08:32,370
because those are the places that it
takes a really long time to get somebody

175
00:08:32,370 --> 00:08:33,140
out there

176
00:08:33,140 --> 00:08:36,328
if you need to actually replace a box
replace the drive

177
00:08:36,328 --> 00:08:39,370
add two more capacity and so forth
having programmatically definable

178
00:08:39,370 --> 00:08:40,299
capacity

179
00:08:40,299 --> 00:08:43,520
at two hundred different small switch
closets throughout the world

180
00:08:43,520 --> 00:08:46,920
seems a slight headache when it comes to
having to make fixes to 20 technologies

181
00:08:46,920 --> 00:08:50,449
Center so the way we've designed the
city you can

182
00:08:50,449 --> 00:08:53,410
build a cloud that's thousands of
machines that are actually just all

183
00:08:53,410 --> 00:08:54,790
kinda aggregate capacity

184
00:08:54,790 --> 00:08:57,420
we could build one that's the smallest
remission you can really don't want a

185
00:08:57,420 --> 00:09:00,290
small one but then you really don't have
any fault tolerance

186
00:09:00,290 --> 00:09:04,010
arm in addition to that one other things
that we were looking at when defining

187
00:09:04,010 --> 00:09:06,750
this infrastructure is that as you can
imagine given the history of wear blue

188
00:09:06,750 --> 00:09:08,040
kinda started

189
00:09:08,040 --> 00:09:11,150
I we have a lot of pig iron systems you
know that's the core

190
00:09:11,150 --> 00:09:15,390
lot of our infrastructure and in those
big iron systems you know each of your

191
00:09:15,390 --> 00:09:18,310
computers is kinda pressure snowflake
great given name

192
00:09:18,310 --> 00:09:21,459
you queue give care and feeding from
time to time patches you make sure that

193
00:09:21,459 --> 00:09:22,069
it's

194
00:09:22,069 --> 00:09:26,360
healthy in that it's actually happy in
this kinda model that's not exactly what

195
00:09:26,360 --> 00:09:29,209
we're doing we don't really care about
the individual computers appointment as

196
00:09:29,209 --> 00:09:29,900
it dies

197
00:09:29,900 --> 00:09:33,120
we have a guy with a shopping cart for
drives come by once a week in replace

198
00:09:33,120 --> 00:09:34,130
all the dead ones

199
00:09:34,130 --> 00:09:37,240
no need to give each one a name it
cetera they're just capacity

200
00:09:37,240 --> 00:09:42,089
we use them as such I'm the idea is that
if an individual server fails we don't

201
00:09:42,089 --> 00:09:45,569
really care because we recover our nines
in terms of availability

202
00:09:45,569 --> 00:09:49,410
on the service layer that's about it so
there's actually orchestration service

203
00:09:49,410 --> 00:09:50,510
I'll talk a little bit more about

204
00:09:50,510 --> 00:09:54,050
second that sits on top of these things
that were actually see oh wait we just

205
00:09:54,050 --> 00:09:56,609
lost the capacity over their spin up
some new ones over here

206
00:09:56,610 --> 00:10:00,280
where things are still healthy on a
topic that

207
00:10:00,280 --> 00:10:04,010
we actually wanted to make sure that are
clusters were as stand alone as possible

208
00:10:04,010 --> 00:10:06,140
so they didn't have external
dependencies

209
00:10:06,140 --> 00:10:09,829
that could cause upstream things to make
a a failure in one of our clusters

210
00:10:09,829 --> 00:10:13,359
some examples that are things like DNS
things like having localized

211
00:10:13,360 --> 00:10:14,680
authentication

212
00:10:14,680 --> 00:10:18,260
resources having localized access
control definitions and

213
00:10:18,260 --> 00:10:22,189
resources so what we'll talk about more
that second as well

214
00:10:22,189 --> 00:10:25,469
I'm additional things that we learn from
kinda watching a lot of public health

215
00:10:25,470 --> 00:10:26,650
providers as well as other

216
00:10:26,650 --> 00:10:30,079
private art installations is to try to
avoid anything that would be a single

217
00:10:30,079 --> 00:10:31,069
point of failure

218
00:10:31,069 --> 00:10:34,890
or anything that would give us you know
the opportunity for cascading failures

219
00:10:34,890 --> 00:10:39,079
I'm so we try to be pretty a pretty
diligent about that nor design

220
00:10:39,079 --> 00:10:43,270
I'm as I mentioned before we actually
open source told her chef recipes that

221
00:10:43,270 --> 00:10:45,100
are used to stand is kinda clouds up in
a

222
00:10:45,100 --> 00:10:48,540
there's the URL at the bottom of the
screen there of flash appear couple more

223
00:10:48,540 --> 00:10:49,819
times it'll be on me

224
00:10:49,819 --> 00:10:53,750
my finals lies well arm but going into
it you know I just gonna watch real

225
00:10:53,750 --> 00:10:56,220
quickly go through so are the benefits
in terms of

226
00:10:56,220 --> 00:11:00,380
infrastructure design when it comes to
you a you know cover BC PC architecture

227
00:11:00,380 --> 00:11:04,089
versus traditional infrastructure no
cover that is kinda two ways

228
00:11:04,089 --> 00:11:06,959
first from a diff developer productivity
standpoint and from a production

229
00:11:06,959 --> 00:11:08,859
efficiency standpoint

230
00:11:08,860 --> 00:11:12,410
so first when it comes to developer
productivity in the big thing that we

231
00:11:12,410 --> 00:11:15,160
were looking to make sure that we could
get over this infrastructure

232
00:11:15,160 --> 00:11:18,110
with the ability to give people enough
resources so that they can innovate on

233
00:11:18,110 --> 00:11:18,860
their own

234
00:11:18,860 --> 00:11:21,860
so if somebody wanted to spin up a
couple a service to try some creasing

235
00:11:21,860 --> 00:11:22,760
you think out

236
00:11:22,760 --> 00:11:25,649
they can go ahead and do so we can give
each developer you know here's your

237
00:11:25,649 --> 00:11:29,389
bundle of capacity you can have this
many cores this many gigs RAM this many

238
00:11:29,389 --> 00:11:31,959
against a hard drive space and they
could just go and play with that they

239
00:11:31,959 --> 00:11:34,369
have their own sandbox environment so
that they can actually

240
00:11:34,370 --> 00:11:37,029
work on things their own that's been
tremendously beneficial traditional

241
00:11:37,029 --> 00:11:38,420
infrastructure of course that's a lot

242
00:11:38,420 --> 00:11:41,589
you know a lot harder to do are you have
shared systems a lot of people working

243
00:11:41,589 --> 00:11:43,800
on and so forth and it's like not as
easy

244
00:11:43,800 --> 00:11:47,589
to not bump into each other I'm
additionally from a testing standpoint

245
00:11:47,589 --> 00:11:50,190
with traditional infrastructure you
really have to have kind of parallel

246
00:11:50,190 --> 00:11:52,170
environments if you want to have a for

247
00:11:52,170 --> 00:11:55,170
testing environment if you want to have
it you eighty environment if you wanna

248
00:11:55,170 --> 00:11:55,910
have

249
00:11:55,910 --> 00:11:59,069
an alpha environment 8 environment is
all require more and more gear in order

250
00:11:59,070 --> 00:12:00,610
to stay in these things up

251
00:12:00,610 --> 00:12:03,380
with a cloud environment we basically
just in the mood for as long as we need

252
00:12:03,380 --> 00:12:06,540
them so if you wanna run testing for a
particular model that you have

253
00:12:06,540 --> 00:12:09,730
you you know what the Flicka script you
stand up the whole environment you do

254
00:12:09,730 --> 00:12:12,139
whatever testing you need to do when
you're done you tear down to pass to get

255
00:12:12,139 --> 00:12:13,959
back into the overall

256
00:12:13,959 --> 00:12:16,250
are and then in terms of a deployment
you know with traditional

257
00:12:16,250 --> 00:12:18,450
infrastructures well there's lots of
ways that you can actually kinda

258
00:12:18,450 --> 00:12:20,019
automate deployment but

259
00:12:20,019 --> 00:12:22,910
are but the key here is that you know
they're with traditional infrastructure

260
00:12:22,910 --> 00:12:25,689
design manual configuration that happens
there's a lot of that knowledge that

261
00:12:25,690 --> 00:12:27,850
kind of embedded in the state

262
00:12:27,850 --> 00:12:31,079
love your infrastructure that's never
captured anywhere else I what we're

263
00:12:31,079 --> 00:12:33,410
doing with their card virus is basically
if you don't

264
00:12:33,410 --> 00:12:36,569
have this checked in somewhere into a
repository doesn't exist all the

265
00:12:36,570 --> 00:12:37,800
machines are configured

266
00:12:37,800 --> 00:12:40,990
by automation there's no there's no way
to actually in bed any

267
00:12:40,990 --> 00:12:43,720
you know kind of knowledge about how the
environment to work in the server

268
00:12:43,720 --> 00:12:45,260
configuration itself because

269
00:12:45,260 --> 00:12:48,370
you going to make a change or get blown
away the next time we actually going

270
00:12:48,370 --> 00:12:49,980
refresh that instructors Sep

271
00:12:49,980 --> 00:12:53,980
so everything really is this Nicole
report doesn't just stop

272
00:12:53,980 --> 00:12:57,570
in terms of production efficiency and a
walk through this distant

273
00:12:57,570 --> 00:13:01,040
scaling factor in a little bit more
detail in a second but the general idea

274
00:13:01,040 --> 00:13:03,439
is that you know when you have
traditional infrastructure you really

275
00:13:03,440 --> 00:13:04,589
have to plan for

276
00:13:04,589 --> 00:13:08,620
you know for how much skill you're gonna
need if things are to fail

277
00:13:08,620 --> 00:13:12,810
so especially in the kind of work that
we do if you look at sort of the market

278
00:13:12,810 --> 00:13:16,459
it the market's overall people would say
that on average the trading volumes down

279
00:13:16,459 --> 00:13:18,510
in things that nature and it is

280
00:13:18,510 --> 00:13:21,380
but the peaks are actually order of
magnitude higher than they ever were

281
00:13:21,380 --> 00:13:24,399
with the advent of algorithmic trading
in things that nature

282
00:13:24,399 --> 00:13:28,170
so if you can't actually handle capacity
to the peak your family

283
00:13:28,170 --> 00:13:31,800
right and so in in terms of traditional
infrastructure we want actually make

284
00:13:31,800 --> 00:13:34,170
sure that we could handle those capacity
peaks

285
00:13:34,170 --> 00:13:36,860
I we have to basically have a lot of
infrastructure that sits idle all the

286
00:13:36,860 --> 00:13:37,510
time

287
00:13:37,510 --> 00:13:40,510
of course with elastic infrastructure
you don't have that issue you just grab

288
00:13:40,510 --> 00:13:43,730
more capacity need as long as you have
on the aggregate enough capacity for the

289
00:13:43,730 --> 00:13:44,860
overall

290
00:13:44,860 --> 00:13:49,190
the overall running everyday center are
in terms of a developer insight it's

291
00:13:49,190 --> 00:13:52,089
also very tough because we have
traditional infrastructure you normally

292
00:13:52,089 --> 00:13:52,740
have

293
00:13:52,740 --> 00:13:56,290
no kind of system administrators the run
the boxes you have the developers the

294
00:13:56,290 --> 00:13:59,459
write the code you have some sort of Q a
process to make you a and then there's

295
00:13:59,459 --> 00:14:00,459
like a hand of God

296
00:14:00,459 --> 00:14:03,750
form a team that plays it and maybe
there's a separate unit responsible for

297
00:14:03,750 --> 00:14:04,630
your application

298
00:14:04,630 --> 00:14:08,699
operational state on that that actually
makes it very difficult when there's a

299
00:14:08,699 --> 00:14:11,949
bug actually trackback to the developers
that they can actually see what's going

300
00:14:11,949 --> 00:14:13,290
on because at some point

301
00:14:13,290 --> 00:14:17,300
developers gonna say hey and it actually
hop on to this production system is root

302
00:14:17,300 --> 00:14:20,479
and everybody freaks out because now you
can give a developer production access

303
00:14:20,480 --> 00:14:21,320
is through

304
00:14:21,320 --> 00:14:25,290
for security reasons so so in general we
don't really have that issue in

305
00:14:25,290 --> 00:14:28,250
in this elastic environment something
goes wrong the production we just give

306
00:14:28,250 --> 00:14:29,690
the developer accesses group

307
00:14:29,690 --> 00:14:32,709
ago the figure out what the chain what
what the bob was the check in to a co

308
00:14:32,709 --> 00:14:33,420
triple

309
00:14:33,420 --> 00:14:36,800
we blow away that instance the VA and we
start up a new one rather

310
00:14:36,800 --> 00:14:40,180
reverse order we start up a new one well
with one

311
00:14:40,180 --> 00:14:43,269
up in the last three you know for
security elaborate more on this as

312
00:14:43,269 --> 00:14:46,190
as we go on here but you know with
traditional infrastructure you have all

313
00:14:46,190 --> 00:14:48,570
the standard traditional infrastructure
issues you have to do

314
00:14:48,570 --> 00:14:51,579
I machine harding you have to be best
practices the OS level et cetera et

315
00:14:51,579 --> 00:14:52,699
cetera

316
00:14:52,699 --> 00:14:55,839
when it comes to ABC PC you can actually
do a lot more things an automated

317
00:14:55,839 --> 00:14:56,660
fashion

318
00:14:56,660 --> 00:15:00,350
are you can actually do a lot more
things in a in a way that

319
00:15:00,350 --> 00:15:03,040
that really just gives you a lot of
security benefits in terms of

320
00:15:03,040 --> 00:15:06,089
declaratively specifying access the you
need and so forth

321
00:15:06,089 --> 00:15:09,199
and I'll get more into second what I
want to do well

322
00:15:09,199 --> 00:15:13,250
to do next is actually talk through a
little bit if the actual technical

323
00:15:13,250 --> 00:15:15,100
stacked use

324
00:15:15,100 --> 00:15:18,389
on this may be a little bit hard to see
that now kinda talked through early

325
00:15:18,389 --> 00:15:19,100
really

326
00:15:19,100 --> 00:15:21,790
when we were designing our
infrastructure we wanted to kind of

327
00:15:21,790 --> 00:15:25,980
focus on using best a free open-source
tools for each layer in the stack

328
00:15:25,980 --> 00:15:29,589
I'm and so what that started with was
basically a bond to bare metal hose that

329
00:15:29,589 --> 00:15:30,829
were effectively the same

330
00:15:30,829 --> 00:15:33,689
and that they don't have to be the same
they were just any any host me if I'm

331
00:15:33,690 --> 00:15:34,850
that had a

332
00:15:34,850 --> 00:15:38,130
on they basically were were machines
that we ended up getting from

333
00:15:38,130 --> 00:15:42,339
from HP on top of that we need to have
been aware that would actually

334
00:15:42,339 --> 00:15:45,750
do you persistence I'm and for that we
ended up using

335
00:15:45,750 --> 00:15:49,130
the set file system I love you familiar
with that

336
00:15:49,130 --> 00:15:52,410
but it's actually supported by
commercial entity name in tank I'm in

337
00:15:52,410 --> 00:15:55,540
the cell file systems effectively
distributed file system and other sly

338
00:15:55,540 --> 00:15:57,620
the talks a little bit more about how
that works

339
00:15:57,620 --> 00:16:02,000
I'm but effectively gives you a a
reliable distributed object store and

340
00:16:02,000 --> 00:16:05,100
then on top of that you can build a lot
more primitive so you can actually build

341
00:16:05,100 --> 00:16:08,709
block devices on top of that object
store and in a number of other

342
00:16:08,709 --> 00:16:11,069
interfaces and actually make it pretty
good

343
00:16:11,070 --> 00:16:14,149
in terms of reliability in terms of
scalability its it's very scale-out

344
00:16:14,149 --> 00:16:15,089
nature

345
00:16:15,089 --> 00:16:18,579
so once we have that persistence layer
setup

346
00:16:18,579 --> 00:16:22,399
on we were you know basically using
OpenStack as are kinda

347
00:16:22,399 --> 00:16:25,600
are or programmatically defined
infrastructure but OpenStack itself has

348
00:16:25,600 --> 00:16:27,459
a couple other requirements namely

349
00:16:27,459 --> 00:16:32,508
it needs a messaging bus and it needs a
actual database to keep stated

350
00:16:32,509 --> 00:16:35,610
so for the database I lehrer we

351
00:16:35,610 --> 00:16:39,100
are using a bicycle but the problem
ultimately with my seek was that

352
00:16:39,100 --> 00:16:43,170
you installed on one node and if that
note goes down your database is gone

353
00:16:43,170 --> 00:16:47,410
right and so we ended up using the a
glare a plugin for my sequel

354
00:16:47,410 --> 00:16:51,410
which is actually a distribution from
per colour that gives you actually the

355
00:16:51,410 --> 00:16:52,399
ability to keep

356
00:16:52,399 --> 00:16:56,160
a multi master set up my sequel servers
that are all in sick

357
00:16:56,160 --> 00:16:59,459
if one of them goes down the rest the
cluster hills from its partition

358
00:16:59,459 --> 00:17:00,410
tolerant

359
00:17:00,410 --> 00:17:04,060
so it actually understands if it loses
some more than half its capacity that

360
00:17:04,060 --> 00:17:05,629
it's not to be active anymore

361
00:17:05,630 --> 00:17:09,310
so it doesn't it doesn't have data
corruption in this particular situations

362
00:17:09,310 --> 00:17:13,349
it actually works pretty well I'm for
the messaging bus there were using

363
00:17:13,349 --> 00:17:14,339
rabbit MQ

364
00:17:14,339 --> 00:17:18,829
and we're using rabbit MQ in a clustered
fashion so that rabbit MQ will actually

365
00:17:18,829 --> 00:17:22,980
I again it will automatically replicate
other nodes that are in that cluster

366
00:17:22,980 --> 00:17:27,199
I'm basically make sure the messages are
not lost and that the delivered reliably

367
00:17:27,199 --> 00:17:31,450
I to to the endpoints are and then the
OpenStack software itself has a number

368
00:17:31,450 --> 00:17:32,669
of different parts

369
00:17:32,669 --> 00:17:35,970
I which I will get into exactly the
details of what's actually in the open

370
00:17:35,970 --> 00:17:36,880
stores at the

371
00:17:36,880 --> 00:17:41,620
OpenStack II components themselves but
the general idea behind it is that which

372
00:17:41,620 --> 00:17:42,360
one

373
00:17:42,360 --> 00:17:46,949
is effectively a shared nothing I design
so it will basically use the

374
00:17:46,950 --> 00:17:49,950
rabbit imputed you messaging back and
forth between components

375
00:17:49,950 --> 00:17:53,980
it'll use the my sequel to actually keep
persistent state if it needs to

376
00:17:53,980 --> 00:17:58,310
and so as long as the mice equal air and
the reverend schuller stay up

377
00:17:58,310 --> 00:18:01,540
basically OpenStack is effectively happy
I

378
00:18:01,540 --> 00:18:06,010
and the way that the way that we could
have do things on topic that's basically

379
00:18:06,010 --> 00:18:07,280
what you have open stack

380
00:18:07,280 --> 00:18:10,889
install and configure and all that good
stuff which is no easy feat by the way

381
00:18:10,889 --> 00:18:13,030
we struggled a lot with this because

382
00:18:13,030 --> 00:18:17,678
I actually put this your sector know
that his is moving rapidly and its

383
00:18:17,679 --> 00:18:21,080
not quite matured like so to speak

384
00:18:21,080 --> 00:18:25,168
I its its girl if they don't want to
actually stabilize it but I I can tell

385
00:18:25,169 --> 00:18:28,409
you we've we've actually submitted a
huge number bugs to get fixed that are

386
00:18:28,409 --> 00:18:31,919
pretty pedestrian bugs that that you can
wonder how the heck did it ever work to

387
00:18:31,919 --> 00:18:32,830
begin with

388
00:18:32,830 --> 00:18:36,030
um but we've we've managed to get
working it's actually gotten at least

389
00:18:36,030 --> 00:18:39,000
the last two releases into a pretty good
state in terms about

390
00:18:39,000 --> 00:18:43,080
in terms of overall functionality armpit
in the couple players that we put on top

391
00:18:43,080 --> 00:18:46,449
of that which were actually in the
process if piercing a few different ones

392
00:18:46,450 --> 00:18:47,840
and I think we've actually

393
00:18:47,840 --> 00:18:51,449
kinda moving in the direction a building
around which which may be here

394
00:18:51,450 --> 00:18:54,389
a year from now or maybe in another
conference a year from now talking about

395
00:18:54,389 --> 00:18:56,080
how we're gonna open source that but

396
00:18:56,080 --> 00:18:59,580
I the orchestration where the goes on
top because once you have

397
00:18:59,580 --> 00:19:03,199
OpenStack installed really all you have
is a bunch of API's for programmatically

398
00:19:03,200 --> 00:19:05,429
making infrastructure right you can make
a server

399
00:19:05,429 --> 00:19:09,470
you can make a hard drive you can make a
network that's great but you haven't

400
00:19:09,470 --> 00:19:12,120
actually achieve anything in terms of
our meeting your overall

401
00:19:12,120 --> 00:19:15,689
services right if individual service
goes down it still and

402
00:19:15,690 --> 00:19:19,690
and the rather an individual server goes
down and its hosting a service that you

403
00:19:19,690 --> 00:19:21,919
want that service disappears unless you
have

404
00:19:21,919 --> 00:19:25,470
and orchestration layer that sits on top
and actually looks at all of that and

405
00:19:25,470 --> 00:19:27,560
says hey that miss you just went down

406
00:19:27,560 --> 00:19:31,490
it was holding my Fu service at my bar
service in two instances the beach

407
00:19:31,490 --> 00:19:35,149
I need to actually you know replace
their capacity somewhere else in my farm

408
00:19:35,149 --> 00:19:38,979
and then free at those into a load
balancer thats programmatically define

409
00:19:38,980 --> 00:19:43,070
unless you have that where you really
have achieved the the amount of

410
00:19:43,070 --> 00:19:46,090
love fault tolerance that you really
sorta looking for

411
00:19:46,090 --> 00:19:49,959
so are so that's important piece in the
park up

412
00:19:49,960 --> 00:19:52,970
and i think im into this before but yet
the ability to actually have clusters

413
00:19:52,970 --> 00:19:55,210
that can be made small as well as large

414
00:19:55,210 --> 00:19:58,909
right so we want to be able to actually
send me more you know three servers

415
00:19:58,909 --> 00:20:01,690
out with data center in the middle of
nowhere up to a switch posit the middle

416
00:20:01,690 --> 00:20:02,470
of nowhere

417
00:20:02,470 --> 00:20:06,659
stand up the exact same stack we have in
our own data centers and be able to use

418
00:20:06,659 --> 00:20:06,909
it

419
00:20:06,840 --> 00:20:11,820
exact same way

420
00:20:11,820 --> 00:20:15,370
so wanna pieces that I mentioned before
was like that the set file system itself

421
00:20:15,370 --> 00:20:15,719
in its

422
00:20:15,720 --> 00:20:19,400
is basically it's based on a concept
called Rados which is underneath the

423
00:20:19,400 --> 00:20:20,080
hood

424
00:20:20,080 --> 00:20:25,549
stands for a I get this right reliable
autonomous distributed object store

425
00:20:25,549 --> 00:20:29,080
I basically what it is is it to set up a
it's a set of services

426
00:20:29,080 --> 00:20:32,090
that actually monitor the overall state
if your cluster

427
00:20:32,090 --> 00:20:35,500
and that it actually has the side the
another part iv:

428
00:20:35,500 --> 00:20:39,480
Sep is called OST which actually sits on
top desk in deposits objects

429
00:20:39,480 --> 00:20:42,640
onto that disc I and it knows when it
just goes away there's

430
00:20:42,640 --> 00:20:46,080
Harvey protocol that uses between them
and actually runs a pack so similar to

431
00:20:46,080 --> 00:20:47,480
get cluster agreement

432
00:20:47,480 --> 00:20:52,380
and in between those two factors if
machine actually dizer for drive dies

433
00:20:52,380 --> 00:20:56,020
it will actually know that that data is
gone missing and it will be replicated

434
00:20:56,020 --> 00:20:56,970
somewhere else

435
00:20:56,970 --> 00:21:00,150
either way this works is not ready for
the region including or anything else it

436
00:21:00,150 --> 00:21:00,750
straight

437
00:21:00,750 --> 00:21:05,230
copies and replicas of objects in
typically we're on our

438
00:21:05,230 --> 00:21:08,559
Savard check stores with the replica
count of three so for every object the

439
00:21:08,559 --> 00:21:10,139
right into the object store

440
00:21:10,140 --> 00:21:13,200
to war or written to other places in the
in the

441
00:21:13,200 --> 00:21:16,580
in the infrastructure and then your call
is returned to say that that object was

442
00:21:16,580 --> 00:21:17,949
written successfully

443
00:21:17,950 --> 00:21:20,909
what the big advantages have seven and
one of the reasons we chose it is

444
00:21:20,909 --> 00:21:21,340
actually

445
00:21:21,340 --> 00:21:24,840
it can be aware your physical failure
domains which is important

446
00:21:24,840 --> 00:21:28,970
I'm you can actually make it a whereof
what rose machines live in what racks

447
00:21:28,970 --> 00:21:29,350
for you

448
00:21:29,350 --> 00:21:33,580
live in and so you can write a
replication policy for it

449
00:21:33,580 --> 00:21:37,270
that says okay i want for every object
that I'm storing to this object or

450
00:21:37,270 --> 00:21:40,870
a separate copy kept in a different row
in a separate copy kept in a different

451
00:21:40,870 --> 00:21:41,918
track

452
00:21:41,919 --> 00:21:45,100
and so that we can actually make sure
that you have physical

453
00:21:45,100 --> 00:21:48,360
physical fault tolerance in case you
know I know

454
00:21:48,360 --> 00:21:52,459
pipe burst in your data center and take
several machines

455
00:21:52,460 --> 00:21:56,270
I in addition to that WEA I'm not gonna
get too much into sort of the

456
00:21:56,270 --> 00:21:59,809
the physical topology we have but use
attending networking lines for this and

457
00:21:59,809 --> 00:22:00,770
we can to keep 8

458
00:22:00,770 --> 00:22:04,639
a dedicated 10 gig link for this because
effectively when using a distributed

459
00:22:04,640 --> 00:22:05,720
file store

460
00:22:05,720 --> 00:22:09,630
you're translating all file i/o internet
work I'll I and so you need to kind of

461
00:22:09,630 --> 00:22:11,010
make sure that you have enough and with

462
00:22:11,010 --> 00:22:14,750
for that so we we end up by doing that
with with I think

463
00:22:14,750 --> 00:22:18,130
dedicated just for SAF traffic in
addition to that

464
00:22:18,130 --> 00:22:21,380
the way that all these kind of clustered
systems work is that they need to have a

465
00:22:21,380 --> 00:22:22,120
majority for

466
00:22:22,120 --> 00:22:27,080
or I'm sorry a 50 percent plus one in
order to actually stay up

467
00:22:27,080 --> 00:22:30,629
I'm and so that's kind of a typical the
typical way that this works that way

468
00:22:30,630 --> 00:22:33,799
as long as there's a partition if you
have an odd number you know say

469
00:22:33,799 --> 00:22:37,139
monitors are you would have 5 I

470
00:22:37,140 --> 00:22:40,480
total let's say forget split three into
the three sides days uppity site goes

471
00:22:40,480 --> 00:22:43,110
down

472
00:22:43,110 --> 00:22:46,178
a couple scenarios I just kinda want to
walk through

473
00:22:46,179 --> 00:22:50,880
that I think we'll I mean a probably lie
these are fairly obvious but

474
00:22:50,880 --> 00:22:54,650
what are the things that we can do with
have in so this diagram has on the

475
00:22:54,650 --> 00:22:58,409
on the right hand side it has basically
what we have in traditional

476
00:22:58,409 --> 00:22:59,850
infrastructure when you're deploying

477
00:22:59,850 --> 00:23:03,500
on up I'm sorry on the left hand side
rather

478
00:23:03,500 --> 00:23:06,700
we have what you have in in a

479
00:23:06,700 --> 00:23:09,890
the PC PC environment where it's
actually being programmatically define

480
00:23:09,890 --> 00:23:13,490
and then on the right hand side we have
what is basically traditional

481
00:23:13,490 --> 00:23:16,340
infrastructure when you have VM's or
individual machines that are running

482
00:23:16,340 --> 00:23:17,959
multiple services

483
00:23:17,960 --> 00:23:21,669
so you doing something like a/b testing
the idea is that normally you would have

484
00:23:21,669 --> 00:23:23,630
seen with this news 1.0 service

485
00:23:23,630 --> 00:23:26,270
we have fifty percent over capacity
that's being split between these two

486
00:23:26,270 --> 00:23:29,120
individual services and if we have to
actually do it upgrade

487
00:23:29,120 --> 00:23:33,178
to a 1.1 version of that service in
traditional infrastructure it's very

488
00:23:33,179 --> 00:23:35,990
difficult to manage where you have
different versions are typically would

489
00:23:35,990 --> 00:23:37,370
go through an upgrade

490
00:23:37,370 --> 00:23:40,408
you know you're rolling upgrade if your
entire farm so

491
00:23:40,409 --> 00:23:43,809
you actually have to shift often and
kill the one auto service

492
00:23:43,809 --> 00:23:47,710
and then stand up the 1.1 service and
then redistribute load in since you

493
00:23:47,710 --> 00:23:48,440
don't wanna have

494
00:23:48,440 --> 00:23:51,510
on balanced versions because you don't
really have a lot of fine-grained

495
00:23:51,510 --> 00:23:52,270
control

496
00:23:52,270 --> 00:23:55,389
over how much traffic is being routed to
you to these instances

497
00:23:55,390 --> 00:23:57,970
are you with an go ahead and do the
upgrade on the second one and then you

498
00:23:57,970 --> 00:23:58,740
have the news

499
00:23:58,740 --> 00:24:02,760
1.1 service that was the point are in
permanently defined infrastructure

500
00:24:02,760 --> 00:24:03,440
especially

501
00:24:03,440 --> 00:24:07,289
if you can do it all through scripting
you can actually deploy a copy of the

502
00:24:07,289 --> 00:24:08,669
1.1 service

503
00:24:08,669 --> 00:24:11,700
in a new VM that runs happily alongside
the restive

504
00:24:11,700 --> 00:24:15,000
well services that are running the old
version and then you can actually

505
00:24:15,000 --> 00:24:19,070
to an end and don't maybe one or two
percent %uh your production traffic to

506
00:24:19,070 --> 00:24:22,450
that new instance to see how it performs
and you can watch it more closely

507
00:24:22,450 --> 00:24:25,610
and then if it actually behaves well you
can then you know

508
00:24:25,610 --> 00:24:29,539
deploy more than where you can do a
rolling upgrade of the rest

509
00:24:29,539 --> 00:24:32,250
the neck scenario that I want to talk
about I can talk a little bit about this

510
00:24:32,250 --> 00:24:32,779
before

511
00:24:32,779 --> 00:24:36,740
is a scaling so in traditional
infrastructure if we want to actually

512
00:24:36,740 --> 00:24:39,840
if if we had a situation where we're
running really hot

513
00:24:39,840 --> 00:24:43,949
I'm there's really no way to dynamically
add more capacity to that too we deploy

514
00:24:43,950 --> 00:24:46,440
a new machine which could take days or
even weeks

515
00:24:46,440 --> 00:24:49,960
I'm once that new machines deployed been
great we have more capacity 42 usually

516
00:24:49,960 --> 00:24:53,130
with the implications of that are is
that you have to have that capacity free

517
00:24:53,130 --> 00:24:53,580
to play

518
00:24:53,580 --> 00:24:56,570
you have to make sure the ev-one
machines that are sitting there may be

519
00:24:56,570 --> 00:24:57,639
largely idle

520
00:24:57,640 --> 00:25:01,720
I just in case this piece come along for
that particular service

521
00:25:01,720 --> 00:25:05,159
likewise when you have the opposite
scenario when things are running called

522
00:25:05,159 --> 00:25:07,860
you latah machines that are sitting
there just sitting idle not the most

523
00:25:07,860 --> 00:25:08,520
efficient

524
00:25:08,520 --> 00:25:12,190
setup again with with programmatically
find infrastructure when things are

525
00:25:12,190 --> 00:25:15,500
running hot you can have a service that
automatically again or orchestration

526
00:25:15,500 --> 00:25:16,000
layer

527
00:25:16,000 --> 00:25:19,029
which sees that a particular service is
actually running at a threshold

528
00:25:19,029 --> 00:25:22,210
use rising metric in a falling metric
for this

529
00:25:22,210 --> 00:25:25,190
I and so when the rising metric gets hit
the say you know you have eighty percent

530
00:25:25,190 --> 00:25:27,279
load for longer than five minutes

531
00:25:27,279 --> 00:25:30,039
then it will notice that say okay we
need to deploy another one and so

532
00:25:30,039 --> 00:25:31,799
another one be deployed within

533
00:25:31,799 --> 00:25:35,860
usually seconds and likewise when things
are actually running low we have a

534
00:25:35,860 --> 00:25:36,370
falling

535
00:25:36,370 --> 00:25:40,158
metric that says okay if you're at
twenty percent load for 15 minutes

536
00:25:40,159 --> 00:25:44,380
then go ahead and reap one I'm and so
then we can go back in q1 and weekly

537
00:25:44,380 --> 00:25:46,409
claim that capacity in this situation
where

538
00:25:46,409 --> 00:25:49,500
where things are not running and then

539
00:25:49,500 --> 00:25:53,059
wanna be interesting side effects from
this in terms of security is that in

540
00:25:53,059 --> 00:25:56,389
traditional infrastructure usually have
a set number machines you don't have one

541
00:25:56,390 --> 00:25:57,630
machine doing one thing

542
00:25:57,630 --> 00:26:01,320
you have her genius offer that actually
deployed all these things

543
00:26:01,320 --> 00:26:04,360
in a virtual machine capacity or a
virtual infrastructure rather

544
00:26:04,360 --> 00:26:07,850
we actually try to keep it so that one
machine is one thing 1 p.m. does one

545
00:26:07,850 --> 00:26:08,490
thing

546
00:26:08,490 --> 00:26:12,630
I and so let's say we had a
vulnerability in this news 1.1 service

547
00:26:12,630 --> 00:26:13,909
that we rolled out

548
00:26:13,909 --> 00:26:17,929
the implications in terms have the
impact up a security vulnerability and

549
00:26:17,929 --> 00:26:18,880
infrastructures

550
00:26:18,880 --> 00:26:22,539
is dramatically different I so somebody
were actually figure out how to exploit

551
00:26:22,539 --> 00:26:23,070
this

552
00:26:23,070 --> 00:26:26,158
this vulnerability that we rolled out
the news 1.1 service

553
00:26:26,159 --> 00:26:29,720
overall the little yellow stars you're
gonna show you what you

554
00:26:29,720 --> 00:26:33,010
what all gets compromised in the
scenarios red I'm on a number of

555
00:26:33,010 --> 00:26:35,700
different services would be compromise
in terms of additional infrastructure

556
00:26:35,700 --> 00:26:38,299
because anything running alongside them
on the same machine

557
00:26:38,299 --> 00:26:41,168
what would generally be in the same
domain for that attack it actually

558
00:26:41,169 --> 00:26:42,270
compromise

559
00:26:42,270 --> 00:26:45,658
whereas in a virtual machine
infrastructure usually you compromise at

560
00:26:45,659 --> 00:26:46,539
12 p.m.

561
00:26:46,539 --> 00:26:50,710
you basically you know sorta stuck to
that one via

562
00:26:50,710 --> 00:26:55,110
I'm let me talk a little bit about some
%uh the terminology that we use

563
00:26:55,110 --> 00:26:58,320
in terms about the the deployments
themselves

564
00:26:58,320 --> 00:27:02,370
so I i was looking for that we can have
this pure horizontal scale out model

565
00:27:02,370 --> 00:27:03,928
really what that means is that

566
00:27:03,929 --> 00:27:08,210
we deploy all OVR I know this is what we
call PC PC work notes

567
00:27:08,210 --> 00:27:11,159
are this PC PC work those are kinda what
one the traditional OpenStack

568
00:27:11,159 --> 00:27:12,840
infrastructure they'll run

569
00:27:12,840 --> 00:27:16,590
Assaf basically they offer up all of
their local disks to the overall shared

570
00:27:16,590 --> 00:27:17,610
file system

571
00:27:17,610 --> 00:27:21,139
which i think is partitioned in use and
then on top of that we

572
00:27:21,140 --> 00:27:24,750
we basically pic randomly from each rack
and make one of those boxes

573
00:27:24,750 --> 00:27:28,779
a what we call ahead no and ahead notice
basically responsible for doing high

574
00:27:28,779 --> 00:27:31,500
availability services will talk a little
bit more about

575
00:27:31,500 --> 00:27:34,770
in the second Esther how we go about
doing that up a traditionally that's

576
00:27:34,770 --> 00:27:36,350
that's where the terminology that we

577
00:27:36,350 --> 00:27:40,740
we use for I'm and and the interesting
part about it is that you can actually

578
00:27:40,740 --> 00:27:44,179
I'm you can actually stand up with these
clusters on a laptop this

579
00:27:44,179 --> 00:27:47,789
this little I've Mac Book Air that have
sitting in front of these were

580
00:27:47,789 --> 00:27:51,230
a huge amount of the development for
this actually got done I'm

581
00:27:51,230 --> 00:27:54,270
you can actually stand it up you can
make BM you can use in

582
00:27:54,270 --> 00:27:57,860
VM's inside IBM's depending on your love
inception tolerance

583
00:27:57,860 --> 00:28:02,240
I'm so up blessing or do here before I
talk about sorta

584
00:28:02,240 --> 00:28:05,450
the other implications the
infrastructure are just kinda list out

585
00:28:05,450 --> 00:28:06,000
some

586
00:28:06,000 --> 00:28:09,250
some the open source projects that were
used to make all the stuff go

587
00:28:09,250 --> 00:28:12,190
a lot of these are are used in
conjunction with each other and I'll

588
00:28:12,190 --> 00:28:16,220
talk a little bit more about that sec

589
00:28:16,220 --> 00:28:21,610
me a question so far it

590
00:28:21,610 --> 00:28:25,379
so let me talk a little bit about how we
did high availability and how we tried

591
00:28:25,380 --> 00:28:26,100
to avoid

592
00:28:26,100 --> 00:28:29,928
longer legs of a lot of this stuff so

593
00:28:29,929 --> 00:28:32,120
the way that we designed the
infrastructures that all critical

594
00:28:32,120 --> 00:28:35,389
services are always access through a
virtual IP and so this is

595
00:28:35,390 --> 00:28:38,860
other hypervisors trying to access other
services that the hypervisors need to

596
00:28:38,860 --> 00:28:40,129
the OpenStack components

597
00:28:40,130 --> 00:28:43,570
when they need to talk to a database
they're not aware where the database

598
00:28:43,570 --> 00:28:46,918
happens to be running they always talk
to a virtual IP

599
00:28:46,919 --> 00:28:50,580
that virtual IP can get passed between
anyone other hypervisors based on

600
00:28:50,580 --> 00:28:53,658
we used the VRRP protocol for actually
doing it

601
00:28:53,659 --> 00:28:57,140
arm and then there's a few other health
checks to go along with it

602
00:28:57,140 --> 00:29:00,240
and the idea behind how we do it is that
we actually just Ron

603
00:29:00,240 --> 00:29:04,190
each a proxy all over your house and
that eighty proxy is actually being able

604
00:29:04,190 --> 00:29:05,500
non-local Bynes for

605
00:29:05,500 --> 00:29:09,789
for IP's we bind all the AG proxy
listening addresses to the vet

606
00:29:09,789 --> 00:29:13,408
except only one of them actually has the
the times that's the only one that will

607
00:29:13,409 --> 00:29:15,570
actually give out of responses for

608
00:29:15,570 --> 00:29:18,730
I'm and so that'll be the only eighty
proxy is actually act

609
00:29:18,730 --> 00:29:22,460
and that you to the configs for the
eighty proxy happen to proxy to all the

610
00:29:22,460 --> 00:29:24,260
real IP is that are on all the servers

611
00:29:24,260 --> 00:29:28,010
so is kind of like a traditional I sorta
architecture you might imagine eighty

612
00:29:28,010 --> 00:29:30,029
proxies we have load balancers on top

613
00:29:30,029 --> 00:29:33,100
and then you have a bunch real servers
except we just kind of squished it may

614
00:29:33,100 --> 00:29:34,449
be low balance is everywhere

615
00:29:34,450 --> 00:29:36,929
and then just use to get to determine
who was going actually be in the hot

616
00:29:36,929 --> 00:29:37,520
seat

617
00:29:37,520 --> 00:29:41,320
them except I and then for all the other
services

618
00:29:41,320 --> 00:29:44,529
I'm

619
00:29:44,529 --> 00:29:51,150
up

620
00:29:51,150 --> 00:29:56,120
alright I for all the other %uh services
that we are that we have in our stacked

621
00:29:56,120 --> 00:29:58,780
that actually support a
high-availability mode built-in

622
00:29:58,780 --> 00:30:03,230
we go ahead and use that and so for CEF
itself it actually has the HA may

623
00:30:03,230 --> 00:30:07,910
mode built-in see actually run a number
of monitors so the CEP process itself is

624
00:30:07,910 --> 00:30:11,580
this thing called a sec monitor we run
that all overhead notes and so

625
00:30:11,580 --> 00:30:16,379
that way we have partition tolerance
from those in addition to that we're on

626
00:30:16,380 --> 00:30:20,640
are my sequel with the Calera plugin in
HA mode that basically give this multi

627
00:30:20,640 --> 00:30:21,320
master

628
00:30:21,320 --> 00:30:25,220
abilities you can write to any one of
those had noted it works that way

629
00:30:25,220 --> 00:30:27,960
and and everybody that's a client
accesses the database the same way

630
00:30:27,960 --> 00:30:29,790
through the virtual IP that comes in

631
00:30:29,790 --> 00:30:34,899
its load balanced across th approx step
below are evident you again we run into

632
00:30:34,900 --> 00:30:38,450
in a cluster node and that basically
does kinda the same thing where

633
00:30:38,450 --> 00:30:41,660
it will automatically replicate the
messages that are passed and in case you

634
00:30:41,660 --> 00:30:42,490
know goes down

635
00:30:42,490 --> 00:30:45,520
ensure that they get delivered
appropriately 21 the endpoints I as

636
00:30:45,520 --> 00:30:46,440
appropriate for the

637
00:30:46,440 --> 00:30:51,160
MPP protocol I we also run a a directory
server that in a multinational

638
00:30:51,160 --> 00:30:54,710
so tell Deb server that sits across all
these nodes and actually gives you the

639
00:30:54,710 --> 00:30:55,560
ability to have

640
00:30:55,560 --> 00:30:58,760
localized authentication this is another
big part so we have

641
00:30:58,760 --> 00:31:02,770
a again a cluster the sitting in a
remote data center somewhere that we can

642
00:31:02,770 --> 00:31:03,770
often get to

643
00:31:03,770 --> 00:31:06,930
effect link gets cut off and can't talk
to our main data center

644
00:31:06,930 --> 00:31:10,070
if it relies on all the suffocation
services coming back to some sort of

645
00:31:10,070 --> 00:31:10,939
mother Shipton

646
00:31:10,940 --> 00:31:14,500
the game is over we can no longer use
that cluster so we keep it all in bed it

647
00:31:14,500 --> 00:31:15,900
we actually replicate things

648
00:31:15,900 --> 00:31:19,180
replicate stated each of those al-bab
servers are in

649
00:31:19,180 --> 00:31:22,710
each of those clusters to make sure that
we have that state replicated everywhere

650
00:31:22,710 --> 00:31:24,960
so they can fall down because that
reason

651
00:31:24,960 --> 00:31:29,600
um for anything else that's kind of a
database back application

652
00:31:29,600 --> 00:31:32,860
because we have already tentatively into
account the high availability for the

653
00:31:32,860 --> 00:31:33,800
mice equal air

654
00:31:33,800 --> 00:31:37,610
anything that's be back to just be back
on top of that so we use

655
00:31:37,610 --> 00:31:41,159
power DNS to actually do you localize
DNS for all the machines and all the

656
00:31:41,160 --> 00:31:42,550
VM's to get launched in that

657
00:31:42,550 --> 00:31:45,889
in that that cluster we also use affects
to do

658
00:31:45,890 --> 00:31:49,410
monitoring for health checking and all
that kinda stuff for for the machines in

659
00:31:49,410 --> 00:31:51,780
a cluster in for the VM's in the
services that are running their

660
00:31:51,780 --> 00:31:55,639
arm and then for anything else that it
was built with kind of a shared nothing

661
00:31:55,640 --> 00:31:59,740
I'm design pattern in place which is
namely the OpenStack important in this

662
00:31:59,740 --> 00:32:00,570
infrastructure

663
00:32:00,570 --> 00:32:03,720
we basically just run them everywhere
because you can really

664
00:32:03,720 --> 00:32:06,650
if if they're not actually processing a
message they said there are only really

665
00:32:06,650 --> 00:32:07,320
just a couple

666
00:32:07,320 --> 00:32:10,540
very small memory footprint I and since
these are hypervisors they have

667
00:32:10,540 --> 00:32:13,600
kinda York Times memory anyway doesn't
really hurt much

668
00:32:13,600 --> 00:32:17,389
and then you know in case the failures
there's always going to be generally one

669
00:32:17,390 --> 00:32:17,920
available

670
00:32:17,920 --> 00:32:21,570
in addition to that

671
00:32:21,570 --> 00:32:25,200
we need to design a few other layers
that will benefit each of these clusters

672
00:32:25,200 --> 00:32:27,780
in order to actually make them
operationally sound

673
00:32:27,780 --> 00:32:31,180
are so that we can actually operate them
in a way that you know a very small

674
00:32:31,180 --> 00:32:34,770
group operate a huge number of these
machines are huge number these clusters

675
00:32:34,770 --> 00:32:38,940
and so the first is basically doing full
automation for bare metal deployment

676
00:32:38,940 --> 00:32:42,380
arm and so effectively with the recipes
that we have open source

677
00:32:42,380 --> 00:32:45,500
you can stand up what we call a
bootstrap node which will basically

678
00:32:45,500 --> 00:32:46,860
service the

679
00:32:46,860 --> 00:32:50,110
imaging device for the rest of the
machines are closer so if you get a

680
00:32:50,110 --> 00:32:51,229
bunch machines in Iraq

681
00:32:51,230 --> 00:32:55,210
and you have more power than their brand
new shiny boxes

682
00:32:55,210 --> 00:32:59,010
you can deploy one that bootstrap no you
can't fix it with the rest from the

683
00:32:59,010 --> 00:32:59,870
automatically

684
00:32:59,870 --> 00:33:04,679
get image and then chef recipes will run
against all them in on a Mac we stand up

685
00:33:04,680 --> 00:33:06,570
your cluster for you this

686
00:33:06,570 --> 00:33:09,909
if you step you have to manually in
between there but

687
00:33:09,910 --> 00:33:13,790
but for the most part the steps those
mail pieces are just give you a chance

688
00:33:13,790 --> 00:33:15,500
to pause make sure everything's going
the way

689
00:33:15,500 --> 00:33:19,040
expected to but effectively you can
stand up for these posters

690
00:33:19,040 --> 00:33:22,120
in matter few minutes I'm

691
00:33:22,120 --> 00:33:25,290
in addition to that we did centralize
the

692
00:33:25,290 --> 00:33:27,850
kinda directory name service and they
talked a little about this before the

693
00:33:27,850 --> 00:33:28,879
general idea is that

694
00:33:28,880 --> 00:33:32,060
if everything has to go remote for DNS
if everything else to go remote for

695
00:33:32,060 --> 00:33:33,320
authentication for

696
00:33:33,320 --> 00:33:36,720
and for access control decisions then
you have external dependencies that are

697
00:33:36,720 --> 00:33:37,250
always

698
00:33:37,250 --> 00:33:40,340
not going to be there depending on what
kinda failure scenarios you trying to

699
00:33:40,340 --> 00:33:40,990
account for

700
00:33:40,990 --> 00:33:44,160
so those are all built in locally into
the cluster through power DNS

701
00:33:44,160 --> 00:33:47,840
my sequel and a and 39 directory server

702
00:33:47,840 --> 00:33:51,990
are in addition to that in order
actually manage with these clusters

703
00:33:51,990 --> 00:33:54,790
successfully you have to have a pretty
good way I've actually accessing your

704
00:33:54,790 --> 00:33:56,010
logs and looking at them

705
00:33:56,010 --> 00:33:59,300
so we kinda put together I was the a
little

706
00:33:59,300 --> 00:34:03,500
tiny utility that's called beaver that
uses that we used to kinda ship logs

707
00:34:03,500 --> 00:34:06,870
and beaver actually just sits there
looks your log files kills them

708
00:34:06,870 --> 00:34:07,540
effectively

709
00:34:07,540 --> 00:34:10,918
and then ship them all via 0 MQ to

710
00:34:10,918 --> 00:34:16,859
a to ship it to you log stash that's
what is our

711
00:34:16,860 --> 00:34:20,040
I'm so it's all shipping them to log
stash that sits on top orbit

712
00:34:20,040 --> 00:34:23,310
so large stash is basically a highly
available service that we run in the

713
00:34:23,310 --> 00:34:25,799
number of places like stash itself
doesn't actually

714
00:34:25,800 --> 00:34:28,770
art talk to each other they basically
can just have a number of them running

715
00:34:28,770 --> 00:34:29,699
stand-alone

716
00:34:29,699 --> 00:34:33,129
so all the individual servers shipping
the logs to the vet

717
00:34:33,129 --> 00:34:37,069
the papers then taking them forcing them
doing the appropriate to indexing for

718
00:34:37,070 --> 00:34:39,250
them and then shipping them into elastic
search

719
00:34:39,250 --> 00:34:42,350
well actually I guess last serches doing
the indexing and once they're

720
00:34:42,350 --> 00:34:45,009
elasticsearch we have a web phone and
called Bonner

721
00:34:45,010 --> 00:34:47,919
that sits on top of it and allows you to
actually go through and look at your

722
00:34:47,918 --> 00:34:49,839
blog graphically get a buncha lace

723
00:34:49,840 --> 00:34:53,870
charts at a bit not and stuff and so for
that you can actually go through

724
00:34:53,870 --> 00:34:57,480
individual cluster just hit a particular
you know a particular subject

725
00:34:57,480 --> 00:35:01,560
main of the via and a and then you
basically can parcel the logs for the

726
00:35:01,560 --> 00:35:04,870
entire cluster and see what's going on
with the state

727
00:35:04,870 --> 00:35:08,060
we also need it kind of detail telemetry
data and

728
00:35:08,060 --> 00:35:11,690
stats from each of these are questions
that were that we had deployed

729
00:35:11,690 --> 00:35:14,730
without that it was very hard to
understand because overall

730
00:35:14,730 --> 00:35:18,940
because a lot of pieces of were here and
and what we use a lot of automation to

731
00:35:18,940 --> 00:35:21,920
manage the complexity but sometimes you
still have to sort of

732
00:35:21,920 --> 00:35:25,260
get under the hood and see exactly
what's going on in terms of I O in terms

733
00:35:25,260 --> 00:35:25,750
of

734
00:35:25,750 --> 00:35:28,860
I what's happening with your network
interfaces and so forth I'm and so for

735
00:35:28,860 --> 00:35:29,690
that we actually

736
00:35:29,690 --> 00:35:33,250
gotta love the detail to telemetry data
using graphite

737
00:35:33,250 --> 00:35:36,980
I'm and so is a small utility from my
break over its called diamond

738
00:35:36,980 --> 00:35:40,750
which basically sits on top of a lot of
the metrics that are being

739
00:35:40,750 --> 00:35:44,300
kicked out by each coast beach
hypervisor and then it ships them up

740
00:35:44,300 --> 00:35:45,560
into a carbon

741
00:35:45,560 --> 00:35:48,610
carbon sits on top of our vet and then
it actually release all that information

742
00:35:48,610 --> 00:35:51,010
out to the rest the hypervisor so its
stores

743
00:35:51,010 --> 00:35:54,690
the telemetry data in a highly available
fashion as well across our

744
00:35:54,690 --> 00:35:59,420
across our cluster so again individual
Hosur individual racks machines

745
00:35:59,420 --> 00:36:02,880
going down is not an actual lose you
access to that one

746
00:36:02,880 --> 00:36:06,240
what happened and then there's a web
interface call graph i web that sits on

747
00:36:06,240 --> 00:36:09,169
top but that allows you to do all kinds
of slicing and dicing

748
00:36:09,170 --> 00:36:12,210
I love really really detailed system
metrics

749
00:36:12,210 --> 00:36:16,110
up what's going on amid on the last
thing we have is

750
00:36:16,110 --> 00:36:19,020
is basically something that would at
least tell us when something really bad

751
00:36:19,020 --> 00:36:21,780
is happening is that we use Amex for
that for actually doing the health

752
00:36:21,780 --> 00:36:23,230
monitoring and alerting

753
00:36:23,230 --> 00:36:26,610
Iran's affects basically I

754
00:36:26,610 --> 00:36:29,790
there's an agent the runs at all the
hypervisor nodes and then again

755
00:36:29,790 --> 00:36:32,710
same on pattern that I've mentioned
before we have this epic server which

756
00:36:32,710 --> 00:36:33,980
sits on top at the vet

757
00:36:33,980 --> 00:36:36,620
there's a number from that are running
they all kinda keep their back and my

758
00:36:36,620 --> 00:36:38,980
sequel which is running highly available
as well

759
00:36:38,980 --> 00:36:42,650
and so everybody shipping date up can
basically get to this affects ever

760
00:36:42,650 --> 00:36:46,050
this affects over itself has a bunch of
threshold said it will actually tell us

761
00:36:46,050 --> 00:36:47,980
if prostheses die in certain places

762
00:36:47,980 --> 00:36:51,200
it'll tell us if machines are
unreachable and so forth

763
00:36:51,200 --> 00:36:54,509
I'm so those are those are really all
the the layers the kind of have to do

764
00:36:54,510 --> 00:36:55,960
with high availability in kinda

765
00:36:55,960 --> 00:36:58,810
cobbling together all these pieces of
software into a way that actually makes

766
00:36:58,810 --> 00:36:59,450
them

767
00:36:59,450 --> 00:37:02,810
kinda be useful clout I'm and this some

768
00:37:02,810 --> 00:37:05,540
this took us a while to get working
right me there's a lot of these open

769
00:37:05,540 --> 00:37:07,900
source piece is a software that means
people the right

770
00:37:07,900 --> 00:37:11,050
in a blog post about little bits at the
beginning the mall to work together

771
00:37:11,050 --> 00:37:14,200
was quite a bit of a challenge in terms
about actually getting the overall value

772
00:37:14,200 --> 00:37:16,240
for me to these layers

773
00:37:16,240 --> 00:37:20,990
so I talked a lot about sort of what
what the stack is and how it works

774
00:37:20,990 --> 00:37:22,129
because I think it was a little bit

775
00:37:22,130 --> 00:37:26,300
you know i i want to explain it a little
bit but now I want shift directions and

776
00:37:26,300 --> 00:37:28,810
talk about what I'm really here to talk
about which is what does this mean for

777
00:37:28,810 --> 00:37:30,020
security and talked a lot

778
00:37:30,020 --> 00:37:33,910
about you know have the technology stack
itself and what it does and what it is

779
00:37:33,910 --> 00:37:36,990
but in terms of security the main thing
that

780
00:37:36,990 --> 00:37:40,069
that is kinda paradigm shift in the way
we thought about infrastructure

781
00:37:40,070 --> 00:37:43,110
is that we're actually building out
virtualized infrastructure respectively

782
00:37:43,110 --> 00:37:44,060
building ourselves

783
00:37:44,060 --> 00:37:47,850
control plane for servers right which is
not something that you typically happen

784
00:37:47,850 --> 00:37:51,350
in other places right when you talk
about network designs

785
00:37:51,350 --> 00:37:54,360
a lot of times every modern
infrastructure that I've ever seen

786
00:37:54,360 --> 00:37:57,590
has and out a band network they have a
control network that the used actually

787
00:37:57,590 --> 00:38:00,170
program the routers to program your
switches and so forth

788
00:38:00,170 --> 00:38:03,710
and then you have your data lines we
actually carry the packets and so forth

789
00:38:03,710 --> 00:38:04,620
that are part of the

790
00:38:04,620 --> 00:38:07,819
you know the running a beer your
infrastructure itself when it comes to

791
00:38:07,820 --> 00:38:09,610
servers and infrastructure itself

792
00:38:09,610 --> 00:38:12,830
there was no such equivalent really what
we've managed to build here in terms of

793
00:38:12,830 --> 00:38:16,890
just camp shifting your thinking is the
hypervisor where is effectively control

794
00:38:16,890 --> 00:38:20,319
plane for actually peeking in on your
servers we managed to do a couple very

795
00:38:20,320 --> 00:38:23,330
interesting things when it comes to
security and integrity checking

796
00:38:23,330 --> 00:38:26,370
with that paradigm in mind arm

797
00:38:26,370 --> 00:38:29,880
in addition to that there's also this
notion of compartment was a ship

798
00:38:29,880 --> 00:38:33,740
right we I in the way that that opens
that works release the way that we can

799
00:38:33,740 --> 00:38:36,669
figure are open second slashing is a
number of ways to do it

800
00:38:36,670 --> 00:38:39,910
I'm each have the tendency is that we
deploy on top of OpenStack

801
00:38:39,910 --> 00:38:44,029
runs on a completely separated feeling
I'm and so every VM that's largely

802
00:38:44,030 --> 00:38:47,800
each 10 is basically separate and we use
the notion of 10 it because we're not

803
00:38:47,800 --> 00:38:51,620
reselling this obviously reduced using
internally we use the notion of 10 it as

804
00:38:51,620 --> 00:38:52,630
a project

805
00:38:52,630 --> 00:38:56,330
so for every project for each service
that we want to deploy we deploy them in

806
00:38:56,330 --> 00:38:57,660
a separate entity

807
00:38:57,660 --> 00:39:01,560
and that way there is no logical way or
no way for those packets to go between

808
00:39:01,560 --> 00:39:04,440
those machines because it actually
configured on be lands in the switches

809
00:39:04,440 --> 00:39:05,920
themselves

810
00:39:05,920 --> 00:39:09,020
are which is pretty pretty big on topic
that you also have some love you know

811
00:39:09,020 --> 00:39:10,560
for those familiar with ec2

812
00:39:10,560 --> 00:39:14,259
you have you know the concept of
security group that you can use

813
00:39:14,260 --> 00:39:17,700
and security groups are actually a
pretty powerful construct we start

814
00:39:17,700 --> 00:39:20,990
start getting more granular about about
your access control because a security

815
00:39:20,990 --> 00:39:22,080
group

816
00:39:22,080 --> 00:39:26,350
is basically a firewall policy in town
for a VM

817
00:39:26,350 --> 00:39:30,410
that enforced by the hypervisor itself
so there's nothing that you can do if

818
00:39:30,410 --> 00:39:34,399
if you pop a machine and you actually
start listening on a whole bunch reports

819
00:39:34,400 --> 00:39:37,430
no packets are coming in there when I
get to you because the actual firewall

820
00:39:37,430 --> 00:39:38,919
policy from the security group

821
00:39:38,920 --> 00:39:43,210
is enforced by the hypervisor itself
which is a pretty big change

822
00:39:43,210 --> 00:39:46,480
on in addition to that a big concept
that we

823
00:39:46,480 --> 00:39:49,780
you know we use a lot when it comes to
our corporate environment is this notion

824
00:39:49,780 --> 00:39:52,910
machine impermanence which is you know
somebody does something bad gets

825
00:39:52,910 --> 00:39:53,549
installed

826
00:39:53,550 --> 00:39:56,950
you're getting our install because the
clicked on some dancing bears email

827
00:39:56,950 --> 00:40:01,350
I'm we blow away the machine weaves
reset the back to unknown secure stay

828
00:40:01,350 --> 00:40:05,700
at the same kind of concept exists in
our in our actual data center production

829
00:40:05,700 --> 00:40:06,960
infrastructure now

830
00:40:06,960 --> 00:40:10,060
because we have this notion of what was
the gold image that a particular service

831
00:40:10,060 --> 00:40:11,450
was launched from

832
00:40:11,450 --> 00:40:14,950
and we can then if something goes wrong
blown away in to start anew and we know

833
00:40:14,950 --> 00:40:16,230
that that was gonna be

834
00:40:16,230 --> 00:40:19,609
I that was it we start out being safe
course we still need to do some work on

835
00:40:19,609 --> 00:40:20,700
figuring out how the first

836
00:40:20,700 --> 00:40:24,419
a pop course but but yet there's there's
actually a very quick notion of

837
00:40:24,420 --> 00:40:25,770
returning it to service

838
00:40:25,770 --> 00:40:28,900
on in traditional infrastructure course
that much harder you have to actually do

839
00:40:28,900 --> 00:40:31,609
forensics on the box to figure out what
else was compromised if they actually

840
00:40:31,609 --> 00:40:33,220
don't anywhere else cetera

841
00:40:33,220 --> 00:40:36,279
but between compartment was Asian and
the ability to reset something back to

842
00:40:36,280 --> 00:40:37,520
unknown secure state

843
00:40:37,520 --> 00:40:40,520
we can eliminate a lot of that risk very
quickly without having to spend a lot of

844
00:40:40,520 --> 00:40:41,330
time

845
00:40:41,330 --> 00:40:44,450
you know kinda making a lot of hard
decisions about what risks we think a

846
00:40:44,450 --> 00:40:48,140
possible

847
00:40:48,140 --> 00:40:51,640
so now when we talk a little bit about
somebody a security layers that we are

848
00:40:51,640 --> 00:40:54,720
where the process a building right now
not all these are completely done in 2.2

849
00:40:54,720 --> 00:40:56,959
production yet these are all kinda in
the works

850
00:40:56,960 --> 00:41:00,940
summer a little further than others %uh
the first is automated security patch

851
00:41:00,940 --> 00:41:04,500
I'm security patching you know it's been
a best practice in the security space

852
00:41:04,500 --> 00:41:07,390
for how many years like since security
was even a thing

853
00:41:07,390 --> 00:41:11,420
in the in the yet its it's ridiculous
because

854
00:41:11,420 --> 00:41:14,570
it's a painful problem that almost every
company struggles with which is how do

855
00:41:14,570 --> 00:41:17,520
you actually keep machines up-to-date
had a pattern and so forth so

856
00:41:17,520 --> 00:41:20,580
with this kind of infrastructure with
the first things we designed with the

857
00:41:20,580 --> 00:41:23,620
a method of actually doing automated
patching so nobody actually has to pay

858
00:41:23,620 --> 00:41:24,890
attention to it

859
00:41:24,890 --> 00:41:28,750
I'm and the idea is that in order to
actually do automated deployment

860
00:41:28,750 --> 00:41:32,280
your software to a VM so that its
automated from the moment to check some

861
00:41:32,280 --> 00:41:33,270
coding to get

862
00:41:33,270 --> 00:41:36,390
it goes to reject conservative gets
automatically built it think it's

863
00:41:36,390 --> 00:41:37,859
deployed onto a VM

864
00:41:37,859 --> 00:41:40,920
and then we run some health checks
against

865
00:41:40,920 --> 00:41:44,180
the idea is that when you have a new
patch version that you wanted you

866
00:41:44,180 --> 00:41:46,990
are you actually would bring up a
machine you would patch it and you will

867
00:41:46,990 --> 00:41:48,620
rerun the Senate health checks

868
00:41:48,620 --> 00:41:51,720
and then you maybe do that one machine
on day one

869
00:41:51,720 --> 00:41:55,470
and then you report it to to the NOC

870
00:41:55,470 --> 00:41:59,569
and if Knox as nothing if they don't
notice any red lights blinking because

871
00:41:59,570 --> 00:42:01,920
we catch one machine a machine seems to
be healthy

872
00:42:01,920 --> 00:42:05,120
and it's running the service well within
the next day or the next week depending

873
00:42:05,120 --> 00:42:07,049
on how fast or how aggressively you
wanna

874
00:42:07,050 --> 00:42:10,530
grow like a patch you could induce a
twenty-percent machines

875
00:42:10,530 --> 00:42:13,880
and then you alert the NOC and you let
the dev team that's responsible for PC

876
00:42:13,880 --> 00:42:15,100
software

877
00:42:15,100 --> 00:42:18,790
and if again if no red lights blinking
everything is happy in the Health Check

878
00:42:18,790 --> 00:42:20,820
surpassing in nobody says anything

879
00:42:20,820 --> 00:42:24,350
then in the next week after that you do
50 percent machines and you were to

880
00:42:24,350 --> 00:42:27,170
knock you let the dev team and you look
at the business group responsible for

881
00:42:27,170 --> 00:42:28,400
that service

882
00:42:28,400 --> 00:42:32,310
and then again same process nobody says
anything over later happy

883
00:42:32,310 --> 00:42:36,400
Health Check surpassing great we do the
rest of them know we have to care

884
00:42:36,400 --> 00:42:38,900
to the process just occurs in the
background with anybody having to really

885
00:42:38,900 --> 00:42:40,060
pay attention to it

886
00:42:40,060 --> 00:42:43,190
unless something goes wrong arm and
there's two possible things that can go

887
00:42:43,190 --> 00:42:44,060
wrong

888
00:42:44,060 --> 00:42:47,890
1 is that the patch actually breaks for
PC software which case somebody oughta

889
00:42:47,890 --> 00:42:48,339
know

890
00:42:48,340 --> 00:42:51,930
at the at the first a Jounin least it by
the time you get the 20 percent

891
00:42:51,930 --> 00:42:55,029
and developers got notified because
they'll say hey this is actually causing

892
00:42:55,030 --> 00:42:56,400
our application to screw up

893
00:42:56,400 --> 00:43:00,350
we need to go back and look at what this
project we get the second scenario is

894
00:43:00,350 --> 00:43:03,900
that the patch screw something up but
the health checks to come back re

895
00:43:03,900 --> 00:43:07,130
and the good part about that is that the
input is in the right place right

896
00:43:07,130 --> 00:43:09,880
because you have your developers are
actually reading your health checks

897
00:43:09,880 --> 00:43:12,830
and if they're a health check that still
green even though this offer was working

898
00:43:12,830 --> 00:43:13,759
right

899
00:43:13,760 --> 00:43:17,040
therefore into fixing Arabia health
check to go do it so it actually kinda

900
00:43:17,040 --> 00:43:17,660
puts the

901
00:43:17,660 --> 00:43:20,089
put the effort is in the right place to
make the improvements that you need in

902
00:43:20,090 --> 00:43:22,500
order to do this automatically

903
00:43:22,500 --> 00:43:26,050
I okay so that some that patching I'm

904
00:43:26,050 --> 00:43:29,040
the next piece to talk about what I
thought it's going to be interesting one

905
00:43:29,040 --> 00:43:30,050
is actually doing

906
00:43:30,050 --> 00:43:33,700
automated runtime: integrity checking
I've running VM's

907
00:43:33,700 --> 00:43:37,490
I'm the idea here the basic concept is
that when you're launching a VM you

908
00:43:37,490 --> 00:43:40,350
watching it from some image that you
have which is either an image that

909
00:43:40,350 --> 00:43:43,410
you've made an application to you or
your it's an image for you

910
00:43:43,410 --> 00:43:46,600
launched it from some generic image then
you've installed application on topic

911
00:43:46,600 --> 00:43:47,310
depending on

912
00:43:47,310 --> 00:43:51,109
how you run your clubs I'm the idea is
that we've got kind of a system that

913
00:43:51,109 --> 00:43:54,600
does automatic integrity check against
it because you can build a rule set

914
00:43:54,600 --> 00:43:58,480
for each of these and and will happen is
effectively in the background cycles

915
00:43:58,480 --> 00:44:02,960
a hypervisor it warm out read-only your
filesystem love your VM

916
00:44:02,960 --> 00:44:06,630
at the hypervisor and there'll actually
run effectively a trip wire like check

917
00:44:06,630 --> 00:44:08,490
will actually has the filesystem

918
00:44:08,490 --> 00:44:11,439
for each ballot on it interview rule
sets will tell you what's allowed to

919
00:44:11,440 --> 00:44:12,990
change in each one so for

920
00:44:12,990 --> 00:44:16,259
individual image like an Ubuntu image or
something like that

921
00:44:16,260 --> 00:44:19,180
you know that you know at the host name
is gonna change on every booth et cetera

922
00:44:19,180 --> 00:44:22,230
this could be a small set of files and
log files et cetera

923
00:44:22,230 --> 00:44:25,740
you're gonna want to exclude about your
gonna know those a priority you can

924
00:44:25,740 --> 00:44:28,620
actually catalog those in Canada rule
set this as these are the files that are

925
00:44:28,620 --> 00:44:31,029
allowed to change as a machine is
running

926
00:44:31,030 --> 00:44:34,240
but the moment that something changes
that you're not expecting to change

927
00:44:34,240 --> 00:44:37,640
then you can actually automatically
respond to that right so

928
00:44:37,640 --> 00:44:40,529
if somebody actually breaks into a
machine into dropping a core file

929
00:44:40,530 --> 00:44:41,570
somewhere

930
00:44:41,570 --> 00:44:45,100
that machine can automatically be frozen
in time and to set aside for somebody to

931
00:44:45,100 --> 00:44:46,089
go look at

932
00:44:46,089 --> 00:44:48,910
I I'm ever as soon as the integrity
check rise against depends on how

933
00:44:48,910 --> 00:44:51,230
aggressively you actually want to run
these integrity checkers in the

934
00:44:51,230 --> 00:44:52,160
background

935
00:44:52,160 --> 00:44:57,190
but effectively it basically gives this
kind ever a in non by passable tripwire

936
00:44:57,190 --> 00:44:59,930
because we're the first things that you
do we actually breaking into a machine

937
00:44:59,930 --> 00:45:01,000
that's running for

938
00:45:01,000 --> 00:45:04,270
wires you look for it and you try
disabling are you tried actually just

939
00:45:04,270 --> 00:45:05,820
pass it back a different datasets

940
00:45:05,820 --> 00:45:09,140
I'm in this particular case it's its non
bypass will because it's happening at

941
00:45:09,140 --> 00:45:10,680
that control plane at the hypervisor

942
00:45:10,680 --> 00:45:14,799
where no wait actually do that per se
that sa pilasters by that

943
00:45:14,800 --> 00:45:19,089
but yet so that that general was the the
idea

944
00:45:19,089 --> 00:45:22,470
the last thing that's that we're working
on right now that's gonna be a

945
00:45:22,470 --> 00:45:26,000
a pretty big one by the time we r we get
it done in terms of proficiency as well

946
00:45:26,000 --> 00:45:27,230
as security is

947
00:45:27,230 --> 00:45:30,230
is automated provisioning our network
tackles

948
00:45:30,230 --> 00:45:33,420
for most organizations especially one as
big as ours that we run such huge

949
00:45:33,420 --> 00:45:34,359
networks that have

950
00:45:34,359 --> 00:45:37,680
you know kind of love different purposes
and they're very segmented nature

951
00:45:37,680 --> 00:45:41,000
I'm managing firewall rules becomes a
real big pain

952
00:45:41,000 --> 00:45:44,670
because you need to figure out is this
particular access okay for whoever's

953
00:45:44,670 --> 00:45:45,690
requesting

954
00:45:45,690 --> 00:45:49,150
and normally by the time it gets to like
a network a group that supposed to be

955
00:45:49,150 --> 00:45:50,690
pushing a firewall rule to

956
00:45:50,690 --> 00:45:54,400
to a set a fire wall so to a sativa
apples on routers

957
00:45:54,400 --> 00:45:57,210
they're basically looking at like the
trees don't know what you're looking at

958
00:45:57,210 --> 00:46:01,400
the force they see like I P one but two
to three or four port 400 going to

959
00:46:01,400 --> 00:46:05,120
4.3 2.1 port 7500 like what does that
mean

960
00:46:05,120 --> 00:46:08,279
if they don't know what that traffic is
they don't know what it's supposed to be

961
00:46:08,280 --> 00:46:11,109
and they've for the lost all the
granularity that they would need to make

962
00:46:11,109 --> 00:46:13,770
an informed decision about whether or
not that's a good idea

963
00:46:13,770 --> 00:46:17,470
so what we're actually moving towards is
doing more declarative style attack wing

964
00:46:17,470 --> 00:46:18,830
based on a service

965
00:46:18,830 --> 00:46:21,710
so when you're building a service if I'm
building the Foo service I could be

966
00:46:21,710 --> 00:46:23,109
clear to be specified

967
00:46:23,109 --> 00:46:27,120
but I need inbound access from the bar
service and outbound access to the park

968
00:46:27,120 --> 00:46:28,470
service

969
00:46:28,470 --> 00:46:32,200
and then when I actually go about
deploying the services I never have to

970
00:46:32,200 --> 00:46:35,290
worry about where they're living because
the orchestration layer actually knows

971
00:46:35,290 --> 00:46:35,850
where to put

972
00:46:35,850 --> 00:46:39,490
each of these things it actually knows
what I P isn't reports there is off to

973
00:46:39,490 --> 00:46:40,149
you

974
00:46:40,150 --> 00:46:44,350
and then it can actually say all right
are I'm hit API on this particular

975
00:46:44,350 --> 00:46:47,970
firewall and program it actually allow
these particular ports the talk to one

976
00:46:47,970 --> 00:46:48,750
another

977
00:46:48,750 --> 00:46:51,740
and then you're done you don't have to
worry about anymore you can actually

978
00:46:51,740 --> 00:46:54,640
look at it at a level that actually
makes sense to you

979
00:46:54,640 --> 00:46:57,700
as a security professional you can say
okay bars pose to be able to talk to

980
00:46:57,700 --> 00:46:58,359
this and

981
00:46:58,359 --> 00:47:01,509
you know this is supposed to be able to
talk bar so we're good I don't really

982
00:47:01,510 --> 00:47:03,390
care whether deployed as long as its
management

983
00:47:03,390 --> 00:47:06,980
orchestration layer the right things are
gonna happen and so that's that's a a

984
00:47:06,980 --> 00:47:07,770
pretty big

985
00:47:07,770 --> 00:47:12,020
improvement terms of how we how we
specify networks

986
00:47:12,020 --> 00:47:15,460
so I glass canister things I want to
talk about

987
00:47:15,460 --> 00:47:18,600
is some additional security topics just
to play around with

988
00:47:18,600 --> 00:47:22,569
you just ideas that we've had we have
not gone further down the road with them

989
00:47:22,569 --> 00:47:25,640
I think they're kinda interesting ideas
if a researcher for

990
00:47:25,640 --> 00:47:29,470
for tinkering around with at the very
least I'm and thats I actually doing

991
00:47:29,470 --> 00:47:30,660
hypervisor

992
00:47:30,660 --> 00:47:34,330
level integrity checking of processes
that are running in the VM

993
00:47:34,330 --> 00:47:38,060
it. verify them from signature
perspective to verify them from

994
00:47:38,060 --> 00:47:41,120
know what's running in terms of their
memory footprint I

995
00:47:41,120 --> 00:47:44,490
even even in terms of my cooking the VM
in various ways to determine if this

996
00:47:44,490 --> 00:47:47,310
process easier actually following a
particularly well understood behavior

997
00:47:47,310 --> 00:47:48,160
pattern

998
00:47:48,160 --> 00:47:50,990
after you've run these things for a
while you could use a modeling and data

999
00:47:50,990 --> 00:47:51,930
gathering

1000
00:47:51,930 --> 00:47:55,109
up what your individual processes inside
IBM's are doing and then you can

1001
00:47:55,109 --> 00:47:55,950
actually started

1002
00:47:55,950 --> 00:47:59,540
abstract out to say okay maybe this is a
policy that I wanna start enforcing for

1003
00:47:59,540 --> 00:48:00,950
this particular process

1004
00:48:00,950 --> 00:48:05,439
I it's sort of a a learning in the
enforcement mode down the road

1005
00:48:05,440 --> 00:48:08,550
another idea that we had is actually
utilize

1006
00:48:08,550 --> 00:48:11,339
a trusted computing devices so much
before we we build a few different

1007
00:48:11,339 --> 00:48:12,890
trusted computing devices

1008
00:48:12,890 --> 00:48:16,740
I'm in actually using that for
enveloping a VM from the hypervisor

1009
00:48:16,740 --> 00:48:19,850
itself so that hypervisor can actually
run a VM

1010
00:48:19,850 --> 00:48:24,049
without actually knowing or being able
to see anything about the VM

1011
00:48:24,050 --> 00:48:27,330
I'm so it would basically be kind of a
bind again this is one that's more you

1012
00:48:27,330 --> 00:48:30,440
you might think that it's more for like
a hosting provider I'm book but

1013
00:48:30,440 --> 00:48:33,150
there are certain certain situations
that we've come across that that would

1014
00:48:33,150 --> 00:48:34,690
be kinda beneficial

1015
00:48:34,690 --> 00:48:37,750
you know beneficial technology to have
so we can actually utilize a trusted

1016
00:48:37,750 --> 00:48:39,060
computing device that we put

1017
00:48:39,060 --> 00:48:42,670
into a hypervisor such that it would be
the only thing that can actually run a

1018
00:48:42,670 --> 00:48:43,720
particular VM

1019
00:48:43,720 --> 00:48:47,279
and the VM itself would be enveloped by
separate trusted computing device that

1020
00:48:47,280 --> 00:48:48,550
will have been prepared

1021
00:48:48,550 --> 00:48:52,569
with the one that's in the hypervisor
itself I'm again this is pretty research

1022
00:48:52,569 --> 00:48:55,460
at this point we're not we're not too
far down the road for it but

1023
00:48:55,460 --> 00:48:58,910
I think you can actually use trusted
devices to make these kinds guarantees

1024
00:48:58,910 --> 00:49:02,259
ultimately I'm in the last one

1025
00:49:02,260 --> 00:49:05,260
that's kinda by million open-ended
question which is

1026
00:49:05,260 --> 00:49:08,589
further up protections against you know
any sort of vulnerabilities are tax that

1027
00:49:08,589 --> 00:49:11,040
would allow you to break out a VM into a
hypervisor

1028
00:49:11,040 --> 00:49:13,770
all the stuff that I've been saying
about you know the hypervisor being in

1029
00:49:13,770 --> 00:49:16,020
control planes or contingent upon the
perfect

1030
00:49:16,020 --> 00:49:18,509
that you don't want there to be any
vulnerabilities in the ability to break

1031
00:49:18,510 --> 00:49:19,780
out of that I prefer

1032
00:49:19,780 --> 00:49:23,089
have the VM into the hypervisor itself
and so

1033
00:49:23,089 --> 00:49:26,710
you we've done some the basic things in
terms of you know address like a SLR in

1034
00:49:26,710 --> 00:49:29,069
dept and that kinda stuff in terms of
preventing

1035
00:49:29,069 --> 00:49:32,720
preventing execution love data pages as
well as preventing

1036
00:49:32,720 --> 00:49:36,120
or rather randomizing address space
layout

1037
00:49:36,120 --> 00:49:39,130
but I think there's a lot more to be
down there in terms of our in terms of

1038
00:49:39,130 --> 00:49:39,960
hardening and

1039
00:49:39,960 --> 00:49:43,730
and you really this is one this is Kevin
open area research in terms of

1040
00:49:43,730 --> 00:49:47,260
how we actually get some more assurance
around around making sure if that's not

1041
00:49:47,260 --> 00:49:49,390
possible

1042
00:49:49,390 --> 00:49:52,680
so with that I will up

1043
00:49:52,680 --> 00:49:59,680
open it up for comments questions flames

1044
00:50:03,730 --> 00:50:07,109
am Felix and a good laps have you looked

1045
00:50:07,109 --> 00:50:11,049
arts private core for the isolation of
Fortune machine

1046
00:50:11,049 --> 00:50:14,870
and hypervisor what was it private core

1047
00:50:14,870 --> 00:50:19,970
private Corey's hypervisor dat doesn't
know shit about what's running into VM

1048
00:50:19,970 --> 00:50:23,040
arm have actually check it out it's good

1049
00:50:23,040 --> 00:50:26,759
year interesting go

1050
00:50:26,760 --> 00:50:31,819
on issues not from Penn State so I as
the replicated database on domestic you

1051
00:50:31,819 --> 00:50:35,410
Ohio well ability so do you also can see
there's a

1052
00:50:35,410 --> 00:50:39,270
secrecy and integrity of the base safe
about this database service gas

1053
00:50:39,270 --> 00:50:41,080
compromised

1054
00:50:41,080 --> 00:50:44,770
so the database that we actually run at
the hypervisor where is not ever gonna

1055
00:50:44,770 --> 00:50:46,520
be used by any clients

1056
00:50:46,520 --> 00:50:49,140
so it's only ever used by the services
that are deployed running on the

1057
00:50:49,140 --> 00:50:50,759
hypervisor themselves

1058
00:50:50,760 --> 00:50:54,790
so we have less than against coverage
that we're not trying to run it

1059
00:50:54,790 --> 00:50:58,009
basically the way we divide the world is
anything that's hypervisors k

1060
00:50:58,010 --> 00:51:00,010
over-sedating that VM scale

1061
00:51:00,010 --> 00:51:02,690
so the database in the message queues
and things like that that run on the

1062
00:51:02,690 --> 00:51:03,390
hypervisors

1063
00:51:03,390 --> 00:51:06,569
only ever deal with services that are
hypervisor scale inning the other

1064
00:51:06,569 --> 00:51:08,580
services that are on my professors

1065
00:51:08,580 --> 00:51:11,779
so for the M one-a database we were just
deploy suffered a to be somewhere else

1066
00:51:11,780 --> 00:51:14,830
not on the hypervisor itself into a
virtual machine for that

1067
00:51:14,830 --> 00:51:19,020
application okay so that's what had been
corollary life

1068
00:51:19,020 --> 00:51:23,810
as the competing base right Avery that
every rep it out in the basal to be

1069
00:51:23,810 --> 00:51:24,700
included in this

1070
00:51:24,700 --> 00:51:28,419
such as a bee how do you mean

1071
00:51:28,420 --> 00:51:31,839
I'm not sure i'm following the questions
though the entire infrastructure need to

1072
00:51:31,839 --> 00:51:32,670
be trusted

1073
00:51:32,670 --> 00:51:36,339
right the entire infrastructure

1074
00:51:36,339 --> 00:51:39,560
will that I think are hypervisor where
is considered trusted anything is

1075
00:51:39,560 --> 00:51:42,049
running in the VMware's not

1076
00:51:42,049 --> 00:51:47,799
okay thank you

1077
00:51:47,799 --> 00:51:50,819
turned him in for minor thank you for
coming today I'm

1078
00:51:50,819 --> 00:51:53,839
you talk a lot about defenses and not so
much about the

1079
00:51:53,839 --> 00:51:57,370
attacks you were trying to defend
against their particular

1080
00:51:57,370 --> 00:52:00,880
aspect threat modelers expected attacker

1081
00:52:00,880 --> 00:52:04,589
you be willing to share with us winter
to provide emerged

1082
00:52:04,589 --> 00:52:07,759
insider threat or outsider malware

1083
00:52:07,760 --> 00:52:10,850
answer yeah well

1084
00:52:10,850 --> 00:52:14,150
I I think the main ones were insider
threat as well as

1085
00:52:14,150 --> 00:52:17,430
kinda advance attackers I'm in the main

1086
00:52:17,430 --> 00:52:20,919
main within our service was as big of a
concern

1087
00:52:20,920 --> 00:52:23,660
although it sort of has benefited by
this infrastructure because as long as

1088
00:52:23,660 --> 00:52:25,950
you have enough to pass the you can
actually handle a DOS

1089
00:52:25,950 --> 00:52:29,330
against a given service a lot better as
long as you have in orchestration where

1090
00:52:29,330 --> 00:52:30,900
they will scale up and down

1091
00:52:30,900 --> 00:52:33,780
but without getting into too many
specifics and it was really getting

1092
00:52:33,780 --> 00:52:34,390
people's

1093
00:52:34,390 --> 00:52:37,839
like insiders hands of machines that are
done through automation

1094
00:52:37,839 --> 00:52:41,509
and it's all audible in terms of what's
gonna happen in terms of configuration a

1095
00:52:41,510 --> 00:52:42,290
box

1096
00:52:42,290 --> 00:52:45,190
based on scripts that are checked into a
you know code report that we can

1097
00:52:45,190 --> 00:52:46,069
attribute

1098
00:52:46,069 --> 00:52:48,890
I'm and then there's also sort of the
more advanced attack which is where the

1099
00:52:48,890 --> 00:52:50,319
compartment was Asian

1100
00:52:50,319 --> 00:52:54,190
and %uh the impermanence factors come
into play where we want to be able to

1101
00:52:54,190 --> 00:52:57,040
know that we have a very hard limit in
terms of a machine gets

1102
00:52:57,040 --> 00:53:00,660
pop what can actually talk to you and
then from there

1103
00:53:00,660 --> 00:53:04,529
you know if machine gets pop what's our
what's are defying time line to removing

1104
00:53:04,530 --> 00:53:05,630
now we're even

1105
00:53:05,630 --> 00:53:09,109
ones that we can protect

1106
00:53:09,109 --> 00:53:14,100
and maybe I missed it but weird did you
have something in place it was looking

1107
00:53:14,100 --> 00:53:17,190
password exploration looks like
everything's looking at running

1108
00:53:17,190 --> 00:53:18,620
processes in

1109
00:53:18,620 --> 00:53:21,609
where the dayton was going yeah we're
not really looking too much data

1110
00:53:21,609 --> 00:53:23,720
exfiltration from its service standpoint

1111
00:53:23,720 --> 00:53:27,549
I'm we have but we have various measures
in place

1112
00:53:27,549 --> 00:53:30,930
that actually prevent people from taking
data from the hypervisors

1113
00:53:30,930 --> 00:53:33,500
because that's what up where where
people are going to have more for

1114
00:53:33,500 --> 00:53:35,410
traditional infrastructure access

1115
00:53:35,410 --> 00:53:38,759
when it comes to a given service those
are all

1116
00:53:38,760 --> 00:53:41,470
should have deployed through automation
so the code is checked so if there's a

1117
00:53:41,470 --> 00:53:42,689
way to a kinda X will treat it

1118
00:53:42,690 --> 00:53:46,520
we we will have a record of it somewhere
but we're not actively monitoring for

1119
00:53:46,520 --> 00:53:52,490
particular kinds of data leaving thank
you

1120
00:53:52,490 --> 00:53:55,919
staffers Microsoft Research I think for
talk

1121
00:53:55,920 --> 00:53:59,470
at two questions one is the first a fine
question

1122
00:53:59,470 --> 00:54:03,270
talked about trusted computing devices
and gets home

1123
00:54:03,270 --> 00:54:07,319
Tommy watchman UPMC something else

1124
00:54:07,319 --> 00:54:10,330
I mean something else let me know me

1125
00:54:10,330 --> 00:54:14,319
I mean a computing device so I I really
mean kinda bus

1126
00:54:14,319 --> 00:54:17,480
basically PCIe cards that are ages Sams

1127
00:54:17,480 --> 00:54:20,660
okay yet so we we do that we actually
have

1128
00:54:20,660 --> 00:54:24,819
did I how much I can talk about this but
we actually have designed our own HSM

1129
00:54:24,819 --> 00:54:29,569
that runs as a PCIe card that you put
into a into an individual chassis

1130
00:54:29,569 --> 00:54:33,130
and then that ap that OS would be able
to access and

1131
00:54:33,130 --> 00:54:38,530
you know can usually get on wages okay
my second question is you talked about

1132
00:54:38,530 --> 00:54:43,040
to have the ability to ease to to
introspect the

1133
00:54:43,040 --> 00:54:47,620
running state of a virtual machines the
memory state and things like that

1134
00:54:47,620 --> 00:54:50,859
and then talked about sell-off King

1135
00:54:50,859 --> 00:54:53,940
tummy sir what's your like hot can

1136
00:54:53,940 --> 00:54:57,670
both hockey actually scale understanding

1137
00:54:57,670 --> 00:55:01,819
lot the state the machine is when you
have space

1138
00:55:01,819 --> 00:55:05,170
so the S&P's we were actually using on
the hypervisors themselves

1139
00:55:05,170 --> 00:55:09,530
has the yeah as a protection against a
taxable like to break out a VM

1140
00:55:09,530 --> 00:55:12,640
reliably to get into hypervisor I C and
then

1141
00:55:12,640 --> 00:55:15,730
the VM introspection was more from the
yet from the high-pressure looking into

1142
00:55:15,730 --> 00:55:16,080
the

1143
00:55:16,080 --> 00:55:19,690
ok thank you

1144
00:55:19,690 --> 00:55:24,250
by Jermy apps a National Science
Foundation um

1145
00:55:24,250 --> 00:55:28,680
and in SA announced they're getting rid
ninety percent other sis admins to

1146
00:55:28,680 --> 00:55:30,899
reduce the insider threat

1147
00:55:30,900 --> 00:55:35,020
which i think im using arm do you were

1148
00:55:35,020 --> 00:55:38,080
have miss my first question is do you
have a perception

1149
00:55:38,080 --> 00:55:43,540
roughly how much you can get rid of by
doing some this automation you're doing

1150
00:55:43,540 --> 00:55:47,040
of course we don't know how many they
started with his ninety percent maybe

1151
00:55:47,040 --> 00:55:50,490
a little or a lot but do you ever give
any perception

1152
00:55:50,490 --> 00:55:55,439
what you can do in my second question is

1153
00:55:55,440 --> 00:55:58,569
you you're throwing a huge amount of
software

1154
00:55:58,569 --> 00:56:01,900
into your system to help automated how
much do you perceive that

1155
00:56:01,900 --> 00:56:06,060
you're increasing the risk or or do you
think it's increasing the risk

1156
00:56:06,060 --> 00:56:09,390
because you have a bigger tax surface
potential all the positions of

1157
00:56:09,390 --> 00:56:12,720
for request so for the first in terms of

1158
00:56:12,720 --> 00:56:16,680
overall reduction don't really have a
great feel for ya I'm our goal

1159
00:56:16,680 --> 00:56:20,160
in doing this was not really to reduce
the amount of people that it took to

1160
00:56:20,160 --> 00:56:22,390
I like that it's ok to run our
infrastructure the main goal was

1161
00:56:22,390 --> 00:56:23,210
actually

1162
00:56:23,210 --> 00:56:27,359
to reduce the amount of people that need
to have access to systems

1163
00:56:27,359 --> 00:56:31,089
on a day-to-day basis in terms of going
into agreeing with things to me

1164
00:56:31,089 --> 00:56:35,430
I think and say would like that yeah
yeah I think that was the main goal was

1165
00:56:35,430 --> 00:56:39,470
it because I think inherently that
reduces your your insider threat profile

1166
00:56:39,470 --> 00:56:43,069
if there's less people with less access
disorderly you know principally sprint

1167
00:56:43,069 --> 00:56:44,000
was right so

1168
00:56:44,000 --> 00:56:48,200
I'm I guess in addition to that you know
it when it comes to this

1169
00:56:48,200 --> 00:56:50,520
your staff reduction that wasn't
something we were looking for I as

1170
00:56:50,520 --> 00:56:52,450
police suspect all the folks that we
have

1171
00:56:52,450 --> 00:56:56,730
right now would just be of reading code
to do different things right

1172
00:56:56,730 --> 00:57:00,260
so than the second remembers a question

1173
00:57:00,260 --> 00:57:04,270
are you increasing your your threat
surface yes Tax Service

1174
00:57:04,270 --> 00:57:08,190
so that short answer is you know
obviously we're installing a lot piece

1175
00:57:08,190 --> 00:57:09,170
is a software

1176
00:57:09,170 --> 00:57:12,280
that we previously were running a lot of
places the infrastructure and on each

1177
00:57:12,280 --> 00:57:14,080
for hypervisors a lot more stuff

1178
00:57:14,080 --> 00:57:17,680
running on I'm but we've actually done
is made it so that all the systems are

1179
00:57:17,680 --> 00:57:19,129
actually talking to each other so

1180
00:57:19,130 --> 00:57:22,900
really there's one front door to talk to
a cluster and that's our

1181
00:57:22,900 --> 00:57:26,770
so anybody else that outside up the
local network that songs all these were

1182
00:57:26,770 --> 00:57:28,250
fronted by firewall

1183
00:57:28,250 --> 00:57:31,920
only ever lets things into the
management interface that's on the the

1184
00:57:31,920 --> 00:57:33,210
virtual IP

1185
00:57:33,210 --> 00:57:36,839
I'm and so the virtual IP is what host
are API services and so forth

1186
00:57:36,839 --> 00:57:40,279
and so we can actually watch that fairly
easily I'm so we can actually

1187
00:57:40,280 --> 00:57:43,500
you are the traffic it's going in there
and most of that is all happening at

1188
00:57:43,500 --> 00:57:44,930
effectively human scale

1189
00:57:44,930 --> 00:57:47,919
right because its people that are
actually writing a script the fires up

1190
00:57:47,920 --> 00:57:48,540
to VM

1191
00:57:48,540 --> 00:57:53,120
those things that nature I'm so most of
this offer is an exposed any or so

1192
00:57:53,120 --> 00:57:56,420
it's not like I from the outside or
sitting at my desk at work can actually

1193
00:57:56,420 --> 00:57:57,330
talk to you

1194
00:57:57,330 --> 00:58:00,910
I don't let see the long stash for the
elastic search for they're all just talk

1195
00:58:00,910 --> 00:58:02,310
to buy the internal services

1196
00:58:02,310 --> 00:58:05,670
inside a cluster and I can't get to them
from the outside I can only ever

1197
00:58:05,670 --> 00:58:09,200
have talked to the user consumable
services like API and points

1198
00:58:09,200 --> 00:58:13,790
and the web friends for all the services
from from that

1199
00:58:13,790 --> 00:58:17,710
the reason I'm asking is Aaron around
very interesting workshop a few weeks

1200
00:58:17,710 --> 00:58:19,650
ago

1201
00:58:19,650 --> 00:58:22,920
we talked about is more sons more stuff
for me

1202
00:58:22,920 --> 00:58:29,160
more complexity and the obvious answer
is yes but the more you think about it

1203
00:58:29,160 --> 00:58:32,490
I'm sorry question wasn't more
complacent as more soccer me more

1204
00:58:32,490 --> 00:58:33,609
security

1205
00:58:33,609 --> 00:58:37,819
risks and the answer may be yes and
maybe you know in your case

1206
00:58:37,819 --> 00:58:42,250
arguably more software is leading to
less risk speak

1207
00:58:42,250 --> 00:58:46,069
humorist is you can automate some things
and reduce insider

1208
00:58:46,069 --> 00:58:50,259
runs on so it's not always obvious that
Morey's

1209
00:58:50,260 --> 00:58:53,569
yeah I would say so I mean I think that
know what the things they freely admit

1210
00:58:53,569 --> 00:58:56,779
to is that this is Mike or architecture
is fairly complex

1211
00:58:56,780 --> 00:59:00,060
I and its easy to argue that more
complexity would

1212
00:59:00,060 --> 00:59:03,089
probably lead to less understanding of
what's going on

1213
00:59:03,089 --> 00:59:06,100
therefore potentially more security
vulnerabilities

1214
00:59:06,100 --> 00:59:09,500
but the way we've tried to manage that
is by doing it all through automation

1215
00:59:09,500 --> 00:59:13,830
you chef recipes stand it all up so the
complex the is actually

1216
00:59:13,830 --> 00:59:17,640
codified in Co I mean is applications
that you things are far more complex

1217
00:59:17,640 --> 00:59:19,370
than standing up this infrastructure

1218
00:59:19,370 --> 00:59:22,370
that are way less easy to understand the

1219
00:59:22,370 --> 00:59:25,470
recipes that we put together book we
just you know

1220
00:59:25,470 --> 00:59:28,779
typically don't think about it that way
from an infrastructure standpoint but if

1221
00:59:28,780 --> 00:59:29,870
you can call if I

1222
00:59:29,870 --> 00:59:33,520
the deployment infrastructure as code
then all the sudden

1223
00:59:33,520 --> 00:59:36,350
that complexity becomes a lot easier to
manage you manage it through the same

1224
00:59:36,350 --> 00:59:38,020
way you men suffer complexity

1225
00:59:38,020 --> 00:59:40,850
I which is by factoring things out a
good models to making sure that you have

1226
00:59:40,850 --> 00:59:41,640
the right

1227
00:59:41,640 --> 00:59:44,310
the right level of granularity on the
pieces you're standing up to making sure

1228
00:59:44,310 --> 00:59:45,630
you have good

1229
00:59:45,630 --> 00:59:48,609
you know compartment was Asian barriers
between the layers like encapsulation

1230
00:59:48,609 --> 00:59:49,339
the layers of

1231
00:59:49,339 --> 00:59:52,680
infrastructure I'm and so that's the way
we try to manage the complexity

1232
00:59:52,680 --> 00:59:58,279
but but it is more complex here thank
you

1233
00:59:58,280 --> 01:00:02,260
so I had one question um wanna

1234
01:00:02,260 --> 01:00:06,370
first get your opinion about how
homogeneous purses how her genius you

1235
01:00:06,370 --> 01:00:08,259
think the applications

1236
01:00:08,260 --> 01:00:12,980
are because things as well large impact
on how successful you gonna be you with

1237
01:00:12,980 --> 01:00:14,930
some the techniques you're talking about

1238
01:00:14,930 --> 01:00:18,299
you have all these abstractions fully
around with abstraction is a group

1239
01:00:18,299 --> 01:00:21,549
VM's that the orchestration layer is
dealing with

1240
01:00:21,549 --> 01:00:24,790
or you have you have a hypervisor
respecting

1241
01:00:24,790 --> 01:00:28,220
on an individual VM or VM's um

1242
01:00:28,220 --> 01:00:32,000
obviously you know this man to get
problem for the introspection so

1243
01:00:32,000 --> 01:00:36,000
there's a lot of work that has to go in
about teaching the the lower layer

1244
01:00:36,000 --> 01:00:39,100
about the the higher earlier this
respecting on

1245
01:00:39,100 --> 01:00:42,330
I can imagine you having summers it's a
problem that the orchestration layer

1246
01:00:42,330 --> 01:00:45,470
you were talking about rolling out new
services with patches

1247
01:00:45,470 --> 01:00:48,839
or or killing a box when he gets own

1248
01:00:48,839 --> 01:00:52,790
and return it to a gold stay but there's
a lot of things happen terms persistence

1249
01:00:52,790 --> 01:00:56,080
in those applications that only the
application developers are going to know

1250
01:00:56,080 --> 01:00:59,370
you have to roll back transactions as
appalled point to doing this

1251
01:00:59,370 --> 01:01:02,970
with my roll them back to for example
someone in a little bit of how you deal

1252
01:01:02,970 --> 01:01:03,339
with

1253
01:01:03,339 --> 01:01:06,520
so is Justin with the case that you have
lots about locations at all on the same

1254
01:01:06,520 --> 01:01:07,580
operating system

1255
01:01:07,580 --> 01:01:11,020
so the introspection becomes easier do
all the applications or have had the

1256
01:01:11,020 --> 01:01:14,530
same design pattern so it becomes easy
for your frustration with a deal that

1257
01:01:14,530 --> 01:01:17,620
or how do you deal with either one of
those abstractions

1258
01:01:17,620 --> 01:01:22,650
no shadow loss of energy in eighty and
trying to do all the special things

1259
01:01:22,650 --> 01:01:26,040
him within deal with that really good
question so on

1260
01:01:26,040 --> 01:01:30,080
we absolutely don't have margins
applications we've got stuff comes

1261
01:01:30,080 --> 01:01:33,589
no in all shapes and sizes I especially
in terms of what models that use for

1262
01:01:33,589 --> 01:01:34,600
persistence

1263
01:01:34,600 --> 01:01:38,120
we have you know all the all that
databases in terms of relational and no

1264
01:01:38,120 --> 01:01:39,540
sequels that you can think of

1265
01:01:39,540 --> 01:01:42,589
we have in various parts organization we
have

1266
01:01:42,589 --> 01:01:46,040
like different kinds about architecture
the one thing that we do have it helps a

1267
01:01:46,040 --> 01:01:48,850
lot is that we have had a very strong so
infrastructure

1268
01:01:48,850 --> 01:01:52,549
are that is you think it is being very
soap like it's not so

1269
01:01:52,549 --> 01:01:55,830
built before that was that was gonna
standard but I there's

1270
01:01:55,830 --> 01:01:59,060
XML specs for you know for service
endpoints show you

1271
01:01:59,060 --> 01:02:02,210
is the endpoint you can call these a
passion for members to pass up members

1272
01:02:02,210 --> 01:02:03,549
and I kinda things we have

1273
01:02:03,549 --> 01:02:06,339
a bit of a strong specification that
helps us a lot in terms of what the

1274
01:02:06,339 --> 01:02:08,160
service should be passing you now

1275
01:02:08,160 --> 01:02:11,350
arm but in terms of in terms recovering
persistence layer

1276
01:02:11,350 --> 01:02:14,490
what we've tried to do is to things I'm
first we

1277
01:02:14,490 --> 01:02:19,339
I tried to standardize everybody on some
centralized and centrally managed

1278
01:02:19,339 --> 01:02:23,319
I persistence layer so we have in S
three objects for that we use

1279
01:02:23,319 --> 01:02:27,670
that we you know routinely snapshot for
each individual kinda Pooler each bucket

1280
01:02:27,670 --> 01:02:30,980
I'm so that we can actually roll them
back to kinda unknown good state

1281
01:02:30,980 --> 01:02:33,980
I'm if they if we can figure out exactly
what happened if

1282
01:02:33,980 --> 01:02:37,530
are automation catches catches integrity
failures

1283
01:02:37,530 --> 01:02:40,540
early enough arm and then we have you
know carava

1284
01:02:40,540 --> 01:02:43,540
shared key value store that used his
calf prostate centre eventually

1285
01:02:43,540 --> 01:02:44,120
consistent

1286
01:02:44,120 --> 01:02:47,680
kinda thing is we've been migrating what
app do that we saw a funny about

1287
01:02:47,680 --> 01:02:51,569
still use a traditional my sequel back
and in reticent to Sandra

1288
01:02:51,569 --> 01:02:55,279
kinda stuff and so for those cans about
occasions what we've been doing is kinda

1289
01:02:55,280 --> 01:02:58,490
migrating them into you a inter-clan
environment

1290
01:02:58,490 --> 01:03:01,740
but trying to set up recipes for
standing those same kinds of tools up so

1291
01:03:01,740 --> 01:03:04,899
that no group has to kinda figured out
on their own so once we can't make a

1292
01:03:04,900 --> 01:03:08,100
a cassandra recipe that'll set up you
know and a multi and point highly

1293
01:03:08,100 --> 01:03:09,210
available to Sandra

1294
01:03:09,210 --> 01:03:13,260
we just allow everybody to use the same
chef recipes for tourist energizing on

1295
01:03:13,260 --> 01:03:16,980
you know what I call or utility
instances and those utility instances we

1296
01:03:16,980 --> 01:03:17,440
build

1297
01:03:17,440 --> 01:03:20,390
good parameters around so that they we
know how kind of the database where

1298
01:03:20,390 --> 01:03:21,310
works were

1299
01:03:21,310 --> 01:03:24,500
if we're gonna use like say persistent
volume to actually back it

1300
01:03:24,500 --> 01:03:27,760
we will have a schedule set up the war
snapshot that persist in volume on a

1301
01:03:27,760 --> 01:03:29,210
routine basis based on

1302
01:03:29,210 --> 01:03:32,500
know what the app is doing I'm and so we
try to basically just keep enough

1303
01:03:32,500 --> 01:03:36,440
trail behind those persistence layer so
if something does go wrong

1304
01:03:36,440 --> 01:03:39,710
then we can actually go back every cent
its data released have a good

1305
01:03:39,710 --> 01:03:44,290
trail what changed between stage

1306
01:03:44,290 --> 01:03:47,910
from mccarty University you mission
marks the I was

1307
01:03:47,910 --> 01:03:51,730
I'm wondering do you have where you
actually forces fire us

1308
01:03:51,730 --> 01:03:57,100
to have hollow if I was are you foresee
Soichiro device or you know

1309
01:03:57,100 --> 01:04:00,500
themself I'll not the VM

1310
01:04:00,500 --> 01:04:03,790
in that split between hardware firewalls
and I and

1311
01:04:03,790 --> 01:04:07,609
the actual hypervisors themselves so
when we're talking about the concept

1312
01:04:07,609 --> 01:04:10,950
like security group and things like that
those are all in force by hypervisors

1313
01:04:10,950 --> 01:04:12,120
and that's as much as we do

1314
01:04:12,120 --> 01:04:15,319
automating you know I P tables and
things like that

1315
01:04:15,319 --> 01:04:18,350
and then for the rest we're talking
about

1316
01:04:18,350 --> 01:04:22,739
basically all over clusters are are
fronted by Palo Alto firewall

1317
01:04:22,739 --> 01:04:26,819
and we use the API's on that to actually
allow services inbound or outbound

1318
01:04:26,819 --> 01:04:29,080
access from Mike from a given

1319
01:04:29,080 --> 01:04:33,089
attempt from a project arm and so what
we'll do is actually have a piece about

1320
01:04:33,089 --> 01:04:35,230
Imation from orchestration layer that
actually more

1321
01:04:35,230 --> 01:04:38,960
programmatically tell the firewall hey
add this to this rule group

1322
01:04:38,960 --> 01:04:41,790
where at this floating IP to this rule
group so they can all have the same

1323
01:04:41,790 --> 01:04:44,310
policy that was predefined

1324
01:04:44,310 --> 01:04:47,569
so the safest if you have like internal

1325
01:04:47,569 --> 01:04:50,750
happy from p.m. 2 p.m. so

1326
01:04:50,750 --> 01:04:54,380
desert traffic goes through these I'll
if I lied it doesn't go there

1327
01:04:54,380 --> 01:04:58,160
it is actually a number of different
scenarios because there's if it's inside

1328
01:04:58,160 --> 01:04:58,950
the same tenant

1329
01:04:58,950 --> 01:05:02,560
in those two VM's are on the same %um so
typically they would be able to talk

1330
01:05:02,560 --> 01:05:03,219
freely

1331
01:05:03,219 --> 01:05:06,239
unless you've also specify the security
group for those

1332
01:05:06,239 --> 01:05:08,980
I'm if you specify the security group
for those and they wouldn't be able to

1333
01:05:08,980 --> 01:05:09,690
talk

1334
01:05:09,690 --> 01:05:12,910
freely between each other I'm then

1335
01:05:12,910 --> 01:05:16,440
normally what you would do well the
other scenario so that's within

1336
01:05:16,440 --> 01:05:20,140
a single a single tenant they're on the
same feeling on two separate

1337
01:05:20,140 --> 01:05:23,450
view answer to separate tendencies then
you can talk to one another and to you

1338
01:05:23,450 --> 01:05:25,330
can't go out of the infrastructure

1339
01:05:25,330 --> 01:05:28,219
and typically what that means is that
you actually need to make a publicly

1340
01:05:28,219 --> 01:05:30,940
addressable IP assigned to the city's
VM's

1341
01:05:30,940 --> 01:05:33,819
and then they would be able to talk to
one another yes and then that would

1342
01:05:33,819 --> 01:05:37,710
actually go up and down for firewood so
we can force policy here

1343
01:05:37,710 --> 01:05:42,799
okay so if you in into 10 communication
we r actually goes through the

1344
01:05:42,799 --> 01:05:47,670
seeks to get away will the redirect the
filing

1345
01:05:47,670 --> 01:05:50,730
it's a little dispossession like three
or four scenarios there kinda

1346
01:05:50,730 --> 01:05:51,850
complicated for me to explain

1347
01:05:51,850 --> 01:05:56,330
early but yes typically it we're a go
through the north-south firewall

1348
01:05:56,330 --> 01:05:59,819
or it will in some situations you
actually allow it to go

1349
01:05:59,819 --> 01:06:03,259
east-west without actually going or
south if it's something that's allowed

1350
01:06:03,259 --> 01:06:06,290
like if we take to tenant services

1351
01:06:06,290 --> 01:06:09,520
little complex but the idea is that we
might have to project a very closely

1352
01:06:09,520 --> 01:06:10,980
associated with each other what's a

1353
01:06:10,980 --> 01:06:14,880
for example I have one tenant they put
on my databases into another ten I put

1354
01:06:14,880 --> 01:06:16,890
on my way my web front-end into

1355
01:06:16,890 --> 01:06:20,120
and I want to keep there's more closely
associated I don't really want all that

1356
01:06:20,120 --> 01:06:23,980
traffic a north-south professions the
600 actually associate those

1357
01:06:23,980 --> 01:06:27,029
I a little bit lower the stack in terms
of allowing hypervisors is

1358
01:06:27,029 --> 01:06:30,290
talk directly to one another okay in
this case

1359
01:06:30,290 --> 01:06:33,380
the final rules would be enforced on I
is not

1360
01:06:33,380 --> 01:06:39,089
that's really yep thank you

1361
01:06:39,089 --> 01:06:41,450
so far no more questions we think the
speaker again please

