1
00:00:08,160 --> 00:00:08,960
hi

2
00:00:08,960 --> 00:00:12,160
welcome to my talk my name is yeting lee

3
00:00:12,160 --> 00:00:14,799
i'd like to introduce reed hunter a

4
00:00:14,799 --> 00:00:17,039
combined static and dynamic approach for

5
00:00:17,039 --> 00:00:19,760
regular expression dos detection

6
00:00:19,760 --> 00:00:22,160
imagine a scenario here is a web

7
00:00:22,160 --> 00:00:25,760
application on the server side to verify

8
00:00:25,760 --> 00:00:28,439
whether the input email address

9
00:00:28,439 --> 00:00:30,880
unfortunately the matching time of the

10
00:00:30,880 --> 00:00:33,840
rig x used here is super linear for some

11
00:00:33,840 --> 00:00:37,120
inputs on the client side and normal

12
00:00:37,120 --> 00:00:41,040
input such as abc at eef.com

13
00:00:41,040 --> 00:00:43,200
which can be verified by the server

14
00:00:43,200 --> 00:00:44,399
immediately

15
00:00:44,399 --> 00:00:47,120
but for a malicious input such as c as

16
00:00:47,120 --> 00:00:48,480
cccc

17
00:00:48,480 --> 00:00:50,480
it will make the server run out of a lot

18
00:00:50,480 --> 00:00:52,960
of resources without feedback which is

19
00:00:52,960 --> 00:00:54,800
called redos attack

20
00:00:54,800 --> 00:00:57,280
the existing approaches include static

21
00:00:57,280 --> 00:00:59,680
approaches and dynamic approaches

22
00:00:59,680 --> 00:01:01,760
the weakness of static approaches is low

23
00:01:01,760 --> 00:01:04,080
precision and the weakness of dynamic

24
00:01:04,080 --> 00:01:06,080
approaches is low recall

25
00:01:06,080 --> 00:01:08,000
we propose a combined static and

26
00:01:08,000 --> 00:01:10,560
approach for redos detection redash

27
00:01:10,560 --> 00:01:13,360
hunter the core of ri dash hunter is

28
00:01:13,360 --> 00:01:15,600
five patterns of redos vulnerable

29
00:01:15,600 --> 00:01:16,960
regexes

30
00:01:16,960 --> 00:01:19,119
we first introduced the generation of

31
00:01:19,119 --> 00:01:20,560
attack strings

32
00:01:20,560 --> 00:01:23,280
in our algorithms we found the position

33
00:01:23,280 --> 00:01:26,159
in the regex that causes redos which is

34
00:01:26,159 --> 00:01:27,600
called infix

35
00:01:27,600 --> 00:01:30,079
the subreg x's before it are called

36
00:01:30,079 --> 00:01:33,600
prefix and after it are called suffix

37
00:01:33,600 --> 00:01:37,680
we use phi 1 phi 2 and phi 3 to denote

38
00:01:37,680 --> 00:01:38,479
them

39
00:01:38,479 --> 00:01:40,960
the components of the attack strings w

40
00:01:40,960 --> 00:01:42,880
is provided in the figure

41
00:01:42,880 --> 00:01:45,840
that is the prefix string x can be

42
00:01:45,840 --> 00:01:49,119
matched by phi 1 the infix string y that

43
00:01:49,119 --> 00:01:52,000
repeat n times can be matched by phi 2

44
00:01:52,000 --> 00:01:55,680
and w cannot be matched by regex r

45
00:01:55,680 --> 00:01:58,240
next i present the core of rie dash

46
00:01:58,240 --> 00:02:01,360
hunter five patterns of redos vulnerable

47
00:02:01,360 --> 00:02:02,880
regexes

48
00:02:02,880 --> 00:02:06,479
the first pattern nested quantifiers its

49
00:02:06,479 --> 00:02:08,399
characters that the optional nested

50
00:02:08,399 --> 00:02:10,720
quantifiers result in two choices for

51
00:02:10,720 --> 00:02:12,560
each pump strings

52
00:02:12,560 --> 00:02:15,360
this is an exponential vulnerability

53
00:02:15,360 --> 00:02:19,040
for example in the blue sub regex beta 1

54
00:02:19,040 --> 00:02:21,280
has a nested quantifiers

55
00:02:21,280 --> 00:02:23,840
we can generate the character 0 for this

56
00:02:23,840 --> 00:02:26,640
sub regex generate left bracket for

57
00:02:26,640 --> 00:02:29,760
prefix regex and exclamation mark for

58
00:02:29,760 --> 00:02:32,080
suffix regex to form a complete attack

59
00:02:32,080 --> 00:02:33,120
string

60
00:02:33,120 --> 00:02:35,360
the second pattern exponential

61
00:02:35,360 --> 00:02:37,440
overlapping disjuncting

62
00:02:37,440 --> 00:02:39,360
a disjunction with a common outer

63
00:02:39,360 --> 00:02:42,400
quantifier whose multiple nodes overlap

64
00:02:42,400 --> 00:02:44,720
like nq it is an exponential

65
00:02:44,720 --> 00:02:48,000
vulnerability formally eod means that

66
00:02:48,000 --> 00:02:50,560
for a disjunctive subregex with the max

67
00:02:50,560 --> 00:02:53,040
quantifier n greater than one there

68
00:02:53,040 --> 00:02:56,640
exists subrig x's beta p and beta q

69
00:02:56,640 --> 00:02:59,200
satisfying the head of beta p and the

70
00:02:59,200 --> 00:03:02,000
head of beta q overlaps or the head of

71
00:03:02,000 --> 00:03:05,920
beta p and the tails of beta q overlaps

72
00:03:05,920 --> 00:03:12,400
for example in c v e 2 0 2 0 7 6 6 2

73
00:03:12,400 --> 00:03:15,120
beta 1 and bait it to overlaps and they

74
00:03:15,120 --> 00:03:18,560
have a common outer quantifier star

75
00:03:18,560 --> 00:03:20,400
the third pattern is

76
00:03:20,400 --> 00:03:22,879
an expression consisting of two adjacent

77
00:03:22,879 --> 00:03:25,280
overlapping components with a common

78
00:03:25,280 --> 00:03:28,640
outer quantifier m n where n is greater

79
00:03:28,640 --> 00:03:29,760
than one

80
00:03:29,760 --> 00:03:32,080
we call it the exponential overlapping

81
00:03:32,080 --> 00:03:34,480
adjacent pattern as it could lead to an

82
00:03:34,480 --> 00:03:37,200
exponential behavior in the worst case

83
00:03:37,200 --> 00:03:40,000
similar to the second pattern but beta 1

84
00:03:40,000 --> 00:03:42,400
and beta 2 in this pattern satisfy the

85
00:03:42,400 --> 00:03:44,879
connection relationship the fourth

86
00:03:44,879 --> 00:03:47,840
pattern is an expression consisting of

87
00:03:47,840 --> 00:03:50,400
two adjacent components such that the

88
00:03:50,400 --> 00:03:52,239
characters followed by the tail of the

89
00:03:52,239 --> 00:03:54,799
first component and the head ones of the

90
00:03:54,799 --> 00:03:57,040
second component overlap

91
00:03:57,040 --> 00:03:59,840
for example beta 1 in baited two has

92
00:03:59,840 --> 00:04:02,879
overlapping characters backslash t and

93
00:04:02,879 --> 00:04:05,760
blank space and their most recent common

94
00:04:05,760 --> 00:04:09,360
quantifier mn whose n less than or equal

95
00:04:09,360 --> 00:04:10,400
to one

96
00:04:10,400 --> 00:04:12,480
the above four patterns are all due to

97
00:04:12,480 --> 00:04:14,879
some ambiguity during the matching

98
00:04:14,879 --> 00:04:18,000
yet some unambiguous regexes can be

99
00:04:18,000 --> 00:04:20,478
vulnerable when they cause their ex

100
00:04:20,478 --> 00:04:23,120
engine to keep moving the matching regex

101
00:04:23,120 --> 00:04:24,880
across the malicious string that does

102
00:04:24,880 --> 00:04:27,199
not have a match for their regex

103
00:04:27,199 --> 00:04:29,120
there are several possible forms that

104
00:04:29,120 --> 00:04:31,680
can cause this vulnerability and we find

105
00:04:31,680 --> 00:04:33,680
that the vulnerable parts are all at the

106
00:04:33,680 --> 00:04:35,919
beginning of the rig x and with a large

107
00:04:35,919 --> 00:04:37,360
quantifier

108
00:04:37,360 --> 00:04:39,120
so we group them in a pattern called

109
00:04:39,120 --> 00:04:41,600
starting with large quantifier

110
00:04:41,600 --> 00:04:45,960
for example in cve20191010226

111
00:04:49,040 --> 00:04:51,360
in the blue sub regex it's at the

112
00:04:51,360 --> 00:04:54,000
beginning of a whole regex and it has a

113
00:04:54,000 --> 00:04:56,960
logger quantifier we can generate the

114
00:04:56,960 --> 00:04:59,520
character c for this sub regex and

115
00:04:59,520 --> 00:05:01,919
exclamation mark for suffix regex to

116
00:05:01,919 --> 00:05:04,160
form a complete attack string

117
00:05:04,160 --> 00:05:05,919
after introducing the core of our

118
00:05:05,919 --> 00:05:08,320
algorithms namely five detection

119
00:05:08,320 --> 00:05:10,960
patterns let me introduce the overview

120
00:05:10,960 --> 00:05:12,720
of redosh hunter

121
00:05:12,720 --> 00:05:15,520
the algorithm consists of three steps

122
00:05:15,520 --> 00:05:18,479
the first step is regex standardization

123
00:05:18,479 --> 00:05:20,880
which transforms real-world regular

124
00:05:20,880 --> 00:05:22,880
expressions into standard regular

125
00:05:22,880 --> 00:05:25,600
expression and a set of constraints

126
00:05:25,600 --> 00:05:28,960
the second step static diagnosis is to

127
00:05:28,960 --> 00:05:31,759
use the five patterns we presents before

128
00:05:31,759 --> 00:05:34,560
our algorithm can find the source locate

129
00:05:34,560 --> 00:05:36,639
the position construct the attack

130
00:05:36,639 --> 00:05:38,639
strings and mark the degree

131
00:05:38,639 --> 00:05:41,199
the third step is dynamic validation to

132
00:05:41,199 --> 00:05:43,600
filter out the successful attack which

133
00:05:43,600 --> 00:05:46,639
ensures that we have no false positives

134
00:05:46,639 --> 00:05:49,680
to analyze redos vulnerabilites directly

135
00:05:49,680 --> 00:05:52,560
for indexes we first convert a given rig

136
00:05:52,560 --> 00:05:54,639
x into a standard radex with some

137
00:05:54,639 --> 00:05:56,160
constraints

138
00:05:56,160 --> 00:05:58,160
the purpose is not to give equivalent

139
00:05:58,160 --> 00:06:00,400
transformation but instead trying to

140
00:06:00,400 --> 00:06:02,400
give a transformation with the same

141
00:06:02,400 --> 00:06:04,160
effect on redos

142
00:06:04,160 --> 00:06:06,400
in case the same effect is hard to

143
00:06:06,400 --> 00:06:09,120
achieve we seek a relaxed condition that

144
00:06:09,120 --> 00:06:11,759
allows the target regex to generate more

145
00:06:11,759 --> 00:06:13,759
redos vulnerabilities than the source

146
00:06:13,759 --> 00:06:15,120
regex

147
00:06:15,120 --> 00:06:18,160
next we use regex alpha to illustrate

148
00:06:18,160 --> 00:06:19,840
our algorithms

149
00:06:19,840 --> 00:06:22,560
first all the extensions are removed or

150
00:06:22,560 --> 00:06:23,680
changed

151
00:06:23,680 --> 00:06:26,479
given a source regex alpha we first

152
00:06:26,479 --> 00:06:29,759
convert alpha to alpha 1 by changing the

153
00:06:29,759 --> 00:06:31,680
lazy quantifier

154
00:06:31,680 --> 00:06:34,400
then we obtains alpha 2 through deleting

155
00:06:34,400 --> 00:06:36,720
the end of line anchor directly

156
00:06:36,720 --> 00:06:40,080
next we transform alpha 2 into the look

157
00:06:40,080 --> 00:06:43,600
around free rex alpha 3 via rewriting

158
00:06:43,600 --> 00:06:46,240
rule and puts the string constraint into

159
00:06:46,240 --> 00:06:49,840
the memorizer m after that we add an

160
00:06:49,840 --> 00:06:52,400
identifier after the first capture group

161
00:06:52,400 --> 00:06:55,039
and rewrites the subregex backslash one

162
00:06:55,039 --> 00:06:57,759
to the subreg exit referred also with an

163
00:06:57,759 --> 00:07:00,400
identifier after it which forms a over

164
00:07:00,400 --> 00:07:03,280
approximate back reference free regex

165
00:07:03,280 --> 00:07:06,479
alpha 4. we add the identifier pair into

166
00:07:06,479 --> 00:07:07,919
the memorizer

167
00:07:07,919 --> 00:07:11,120
finally we get the target rig x beta by

168
00:07:11,120 --> 00:07:13,759
removing the non-capturing group sign

169
00:07:13,759 --> 00:07:16,960
and a set of constraints let's continue

170
00:07:16,960 --> 00:07:20,319
with the example beta and m we use five

171
00:07:20,319 --> 00:07:22,880
detection patterns to diagnosis regex

172
00:07:22,880 --> 00:07:25,680
beta we consider the constraints in m

173
00:07:25,680 --> 00:07:28,000
when we generate attack strings

174
00:07:28,000 --> 00:07:30,400
we diagnose multiple vulnerabilities in

175
00:07:30,400 --> 00:07:32,880
beta and construct attack strings and

176
00:07:32,880 --> 00:07:35,360
other information respectively as shown

177
00:07:35,360 --> 00:07:36,560
in the table

178
00:07:36,560 --> 00:07:39,120
the third step of re-dash hunter is to

179
00:07:39,120 --> 00:07:41,360
verify the attack string generated in

180
00:07:41,360 --> 00:07:42,720
the second step

181
00:07:42,720 --> 00:07:45,039
the principle of verification is that to

182
00:07:45,039 --> 00:07:47,199
measure the time for the source regex

183
00:07:47,199 --> 00:07:49,520
outfit to match the attack string if the

184
00:07:49,520 --> 00:07:51,919
corresponding threshold is triggered it

185
00:07:51,919 --> 00:07:54,560
is a true vulnerability otherwise it is

186
00:07:54,560 --> 00:07:56,560
a false vulnerability

187
00:07:56,560 --> 00:07:59,039
for the experimental data set it is

188
00:07:59,039 --> 00:08:01,199
contains three parts

189
00:08:01,199 --> 00:08:04,080
the first is a large-scale regex set

190
00:08:04,080 --> 00:08:06,199
including 37

191
00:08:06,199 --> 00:08:09,520
651 real-world regexes

192
00:08:09,520 --> 00:08:12,160
the second is the known cve with clear

193
00:08:12,160 --> 00:08:15,199
descriptions or sources and the third is

194
00:08:15,199 --> 00:08:18,319
26 popular open source projects

195
00:08:18,319 --> 00:08:21,039
for comparison tools we choose seven

196
00:08:21,039 --> 00:08:22,879
state-of-the-art approaches used in

197
00:08:22,879 --> 00:08:25,120
recent works for redos specific

198
00:08:25,120 --> 00:08:27,440
detection which are falling into two

199
00:08:27,440 --> 00:08:30,160
paradigms static approaches and dynamic

200
00:08:30,160 --> 00:08:31,360
approaches

201
00:08:31,360 --> 00:08:33,679
we evaluate the effectiveness in terms

202
00:08:33,679 --> 00:08:38,159
of tp fp fn precision and recall in the

203
00:08:38,159 --> 00:08:40,159
reported vulnerabilities by each

204
00:08:40,159 --> 00:08:41,200
technique

205
00:08:41,200 --> 00:08:43,279
the figure shows the comparison of the

206
00:08:43,279 --> 00:08:46,000
overall effectiveness over four popular

207
00:08:46,000 --> 00:08:50,040
ex engines on the benchmarks with

208
00:08:50,040 --> 00:08:53,399
37651 rig x's we can see that the

209
00:08:53,399 --> 00:08:57,040
staticaprecas have many fp that is low

210
00:08:57,040 --> 00:08:59,600
precision and the dynamica parakas have

211
00:08:59,600 --> 00:09:03,320
many fn that is low recall while

212
00:09:03,320 --> 00:09:07,760
reedoshunter implements 0fp and 0fn that

213
00:09:07,760 --> 00:09:08,480
is

214
00:09:08,480 --> 00:09:12,240
100 precision and 100 recall

215
00:09:12,240 --> 00:09:14,240
in addition we analyze the

216
00:09:14,240 --> 00:09:16,640
vulnerabilities commonly detected by

217
00:09:16,640 --> 00:09:20,000
each tool as shown in venn diagram the

218
00:09:20,000 --> 00:09:22,320
amount of vulnerabilities detected by

219
00:09:22,320 --> 00:09:24,640
all baselines is still less than that of

220
00:09:24,640 --> 00:09:28,480
redosh hunter in yellow on average rie

221
00:09:28,480 --> 00:09:31,680
dash hunter taking around 1.48 seconds

222
00:09:31,680 --> 00:09:34,480
to process on regex it isn't the fast

223
00:09:34,480 --> 00:09:36,959
approach but considering the far more

224
00:09:36,959 --> 00:09:39,279
vulnerabilities detected by ri dash

225
00:09:39,279 --> 00:09:41,680
hunter than existing approaches it is

226
00:09:41,680 --> 00:09:44,000
clear that reed hunter is quite

227
00:09:44,000 --> 00:09:45,200
efficient

228
00:09:45,200 --> 00:09:48,080
about the second data set we exercise

229
00:09:48,080 --> 00:09:50,080
the existing approaches as well as

230
00:09:50,080 --> 00:09:53,120
ridoshunter against the confirmed redos

231
00:09:53,120 --> 00:09:54,880
related cve

232
00:09:54,880 --> 00:09:57,360
the results is shown in the table

233
00:09:57,360 --> 00:09:59,839
we can see ridash hunter can identify

234
00:09:59,839 --> 00:10:03,760
all 35 redos related cve compared with

235
00:10:03,760 --> 00:10:06,399
the best work identifying only over 60

236
00:10:06,399 --> 00:10:07,920
percent of them

237
00:10:07,920 --> 00:10:10,320
we explore the effectiveness of ri dash

238
00:10:10,320 --> 00:10:12,959
hunter in the wild and compare it with

239
00:10:12,959 --> 00:10:15,600
other works the results are shown in the

240
00:10:15,600 --> 00:10:16,560
table

241
00:10:16,560 --> 00:10:19,839
in total ri dash hunter detected 28

242
00:10:19,839 --> 00:10:23,200
redos vulnerable regexes in the 26

243
00:10:23,200 --> 00:10:26,160
popular used projects 26 of them were

244
00:10:26,160 --> 00:10:29,600
assigned cve and two of them were fixed

245
00:10:29,600 --> 00:10:31,200
by the maintainers

246
00:10:31,200 --> 00:10:34,399
in summary we proposed redash hunter

247
00:10:34,399 --> 00:10:38,160
reaching 100 precision and 100 recall

248
00:10:38,160 --> 00:10:41,040
over three large scale data sets

249
00:10:41,040 --> 00:10:44,079
we proposed five redos patterns we

250
00:10:44,079 --> 00:10:47,519
exposed 28 new redos vulnerabilities

251
00:10:47,519 --> 00:10:50,880
with 26 assigned cve and 2 fixed by the

252
00:10:50,880 --> 00:10:52,320
maintainers

253
00:10:52,320 --> 00:10:54,640
thank you for your attention i would be

254
00:10:54,640 --> 00:10:58,760
happy to answer any questions

255
00:11:05,360 --> 00:11:07,440
you

