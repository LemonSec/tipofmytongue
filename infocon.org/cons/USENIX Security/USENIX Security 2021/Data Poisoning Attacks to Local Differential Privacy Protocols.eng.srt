1
00:00:08,240 --> 00:00:10,480
hello everyone my name is charlie tao i

2
00:00:10,480 --> 00:00:13,360
am a phd student at duke university i am

3
00:00:13,360 --> 00:00:15,599
going to talk to you about work data

4
00:00:15,599 --> 00:00:17,359
poisoning attacks to local differential

5
00:00:17,359 --> 00:00:19,920
privacy protocols this is a joint work

6
00:00:19,920 --> 00:00:22,000
with genome engineer and my advisor

7
00:00:22,000 --> 00:00:23,600
neo-gong

8
00:00:23,600 --> 00:00:25,199
in the traditional way of data

9
00:00:25,199 --> 00:00:26,880
statistics collection

10
00:00:26,880 --> 00:00:28,880
when the query is sent to the cloud

11
00:00:28,880 --> 00:00:31,039
server the cloud server directly

12
00:00:31,039 --> 00:00:33,920
collects users data computes the queries

13
00:00:33,920 --> 00:00:36,960
statistics and answers to the query in

14
00:00:36,960 --> 00:00:39,680
such scenarios the data collector or the

15
00:00:39,680 --> 00:00:43,040
sensor server needs to be trusted

16
00:00:43,040 --> 00:00:45,520
however nowadays users want to keep

17
00:00:45,520 --> 00:00:48,079
their sensitive data private and the

18
00:00:48,079 --> 00:00:50,559
server may not be trusted therefore

19
00:00:50,559 --> 00:00:52,480
researchers propose local differential

20
00:00:52,480 --> 00:00:54,960
privacy protocols to protect users

21
00:00:54,960 --> 00:00:57,920
privacy the main idea is that the users

22
00:00:57,920 --> 00:01:00,320
perturbs their data by adding some noise

23
00:01:00,320 --> 00:01:02,079
to them before sending them to the

24
00:01:02,079 --> 00:01:03,039
server

25
00:01:03,039 --> 00:01:05,519
with the noisy data the desired data

26
00:01:05,519 --> 00:01:07,680
statistics can still be accurately

27
00:01:07,680 --> 00:01:10,320
calculated by the server while each

28
00:01:10,320 --> 00:01:12,240
individual user's data cannot be

29
00:01:12,240 --> 00:01:14,080
recovered precisely

30
00:01:14,080 --> 00:01:16,400
however in this work we show that ldp

31
00:01:16,400 --> 00:01:17,920
protocols are vulnerable to data

32
00:01:17,920 --> 00:01:19,439
poisoning attacks

33
00:01:19,439 --> 00:01:21,840
specifically an attacker can inject fake

34
00:01:21,840 --> 00:01:23,840
users into the protocol

35
00:01:23,840 --> 00:01:25,759
while the general users follow the

36
00:01:25,759 --> 00:01:28,799
protocol the fake users can actually

37
00:01:28,799 --> 00:01:30,880
tamper with the data they send to the

38
00:01:30,880 --> 00:01:32,159
server

39
00:01:32,159 --> 00:01:33,680
the server will calculate data

40
00:01:33,680 --> 00:01:36,000
statistics that are desired by the

41
00:01:36,000 --> 00:01:38,960
attacker with the poison data

42
00:01:38,960 --> 00:01:40,880
in this work we consider data poisoning

43
00:01:40,880 --> 00:01:42,640
effects towards two most common

44
00:01:42,640 --> 00:01:45,360
applications of ldp that is

45
00:01:45,360 --> 00:01:47,759
frequency estimation and have heater

46
00:01:47,759 --> 00:01:49,520
identification

47
00:01:49,520 --> 00:01:51,759
in frequency estimation we assume each

48
00:01:51,759 --> 00:01:53,759
user holds one item

49
00:01:53,759 --> 00:01:56,159
the desired data statistics is the

50
00:01:56,159 --> 00:01:58,320
frequency of each item

51
00:01:58,320 --> 00:01:59,920
generally speaking the frequency

52
00:01:59,920 --> 00:02:02,079
estimation proof codes perform three key

53
00:02:02,079 --> 00:02:04,799
steps to estimate the frequency first

54
00:02:04,799 --> 00:02:07,119
the users encode the item to evaluate

55
00:02:07,119 --> 00:02:09,758
the encoded space second the users

56
00:02:09,758 --> 00:02:12,080
randomly perturb the encoded value to

57
00:02:12,080 --> 00:02:13,360
another one

58
00:02:13,360 --> 00:02:15,440
third the server aggregates the

59
00:02:15,440 --> 00:02:17,599
perturbed encoding values to estimate

60
00:02:17,599 --> 00:02:19,520
the item frequency

61
00:02:19,520 --> 00:02:21,760
formally we say a protocol satisfies

62
00:02:21,760 --> 00:02:25,360
epsilon ldp if this condition is met

63
00:02:25,360 --> 00:02:27,920
this guarantees one cannot recover an

64
00:02:27,920 --> 00:02:30,480
individual item precisely from its

65
00:02:30,480 --> 00:02:33,519
perturbing coding value

66
00:02:33,519 --> 00:02:35,840
in this work we focus on pure ldp

67
00:02:35,840 --> 00:02:38,400
protocols proposed in previous works

68
00:02:38,400 --> 00:02:41,440
specifically an ldp protocol is pure if

69
00:02:41,440 --> 00:02:44,160
there exists two probabilities p and q

70
00:02:44,160 --> 00:02:46,879
that satisfies the following equations

71
00:02:46,879 --> 00:02:49,680
in the equation x y is the set of items

72
00:02:49,680 --> 00:02:52,319
that y supports we say why is the force

73
00:02:52,319 --> 00:02:52,959
v

74
00:02:52,959 --> 00:02:54,879
if in the acme step

75
00:02:54,879 --> 00:02:57,519
the perturbed encoded value y votes for

76
00:02:57,519 --> 00:03:01,280
v when estimating the frequency of b

77
00:03:01,280 --> 00:03:03,360
the support set depends on the vertical

78
00:03:03,360 --> 00:03:05,760
we use in the aggregate step the

79
00:03:05,760 --> 00:03:07,599
periodic v protocols estimate the

80
00:03:07,599 --> 00:03:09,920
frequency of an item following this

81
00:03:09,920 --> 00:03:10,879
equation

82
00:03:10,879 --> 00:03:14,400
here the indicator function is 1 if y i

83
00:03:14,400 --> 00:03:17,040
suppose v otherwise it is 0.

84
00:03:17,040 --> 00:03:19,280
next i will introduce three popular pure

85
00:03:19,280 --> 00:03:24,959
ldp protocols namely krr ue and orh

86
00:03:24,959 --> 00:03:27,519
the krr is a protocol that encodes an

87
00:03:27,519 --> 00:03:29,120
item to itself

88
00:03:29,120 --> 00:03:31,280
in the perturb step prr keeps the

89
00:03:31,280 --> 00:03:33,680
encoded item unchanged with probability

90
00:03:33,680 --> 00:03:36,560
p and protects it to a different random

91
00:03:36,560 --> 00:03:39,599
item with a probability q

92
00:03:39,599 --> 00:03:42,000
in krr of the terabyte value y only

93
00:03:42,000 --> 00:03:45,680
supports itself in the aggregate step

94
00:03:45,680 --> 00:03:48,720
ore encodes an item to a one part binary

95
00:03:48,720 --> 00:03:51,040
vector with less d

96
00:03:51,040 --> 00:03:53,599
in which only one base is one where all

97
00:03:53,599 --> 00:03:55,920
other bits are zero

98
00:03:55,920 --> 00:03:58,560
in the third step we consider each bit

99
00:03:58,560 --> 00:04:01,280
of the encoded binary vector separately

100
00:04:01,280 --> 00:04:03,200
specifically for each rate of the

101
00:04:03,200 --> 00:04:05,680
encoded vector if it is one then it

102
00:04:05,680 --> 00:04:08,159
remains one with probability p

103
00:04:08,159 --> 00:04:10,720
otherwise if the bit is zero then it is

104
00:04:10,720 --> 00:04:14,959
split to one with probability q

105
00:04:14,959 --> 00:04:17,358
then in the average step

106
00:04:17,358 --> 00:04:20,000
the pattern vector supports all items

107
00:04:20,000 --> 00:04:22,639
whose corresponding bits in the vector

108
00:04:22,639 --> 00:04:24,560
equals q1

109
00:04:24,560 --> 00:04:27,600
oels uses hash functions specifically it

110
00:04:27,600 --> 00:04:29,840
encodes an item to a hash function and

111
00:04:29,840 --> 00:04:31,520
hash value pair

112
00:04:31,520 --> 00:04:33,280
the hash function is randomly selected

113
00:04:33,280 --> 00:04:35,680
from a family of hash functions and it

114
00:04:35,680 --> 00:04:37,600
maps the item to hash value in the

115
00:04:37,600 --> 00:04:40,080
domains other than the item domain in

116
00:04:40,080 --> 00:04:42,639
the perturb step ors perturbs only the

117
00:04:42,639 --> 00:04:44,880
hash value in the encoded pair

118
00:04:44,880 --> 00:04:46,880
specifically the hash value stays

119
00:04:46,880 --> 00:04:49,199
unchanged with probability p prime and

120
00:04:49,199 --> 00:04:51,360
switches to a different h value with

121
00:04:51,360 --> 00:04:53,440
probability q prime

122
00:04:53,440 --> 00:04:56,080
in the aggregate step the third pair y

123
00:04:56,080 --> 00:04:59,520
that equals to h a supports any item v

124
00:04:59,520 --> 00:05:03,039
that is hash q a by h

125
00:05:03,039 --> 00:05:05,039
next we discuss another application of

126
00:05:05,039 --> 00:05:08,560
ldp that is heavy heater identification

127
00:05:08,560 --> 00:05:11,039
the data statistics we aim to find here

128
00:05:11,039 --> 00:05:13,440
is the most frequent key items we

129
00:05:13,440 --> 00:05:15,600
consider a state-of-the-art bluetooth

130
00:05:15,600 --> 00:05:18,080
call prefix extending method

131
00:05:18,080 --> 00:05:20,720
in pm users are divided into groups and

132
00:05:20,720 --> 00:05:23,360
pm internally found portions of frequent

133
00:05:23,360 --> 00:05:27,360
values using oil in each group

134
00:05:27,360 --> 00:05:29,280
next i will introduce the first model we

135
00:05:29,280 --> 00:05:31,199
consider in this work we assume the

136
00:05:31,199 --> 00:05:33,360
attacker has a set of target items to

137
00:05:33,360 --> 00:05:36,080
promote for example a company may be

138
00:05:36,080 --> 00:05:38,240
interested in making its products more

139
00:05:38,240 --> 00:05:41,120
popular more specifically in frequency

140
00:05:41,120 --> 00:05:43,680
estimation the attacker aims to increase

141
00:05:43,680 --> 00:05:45,840
the estimate frequency of the target

142
00:05:45,840 --> 00:05:48,000
items while in heavy heater

143
00:05:48,000 --> 00:05:50,320
identification the attacker aims to

144
00:05:50,320 --> 00:05:52,160
promote the target items to be

145
00:05:52,160 --> 00:05:54,720
identified as tab haters

146
00:05:54,720 --> 00:05:57,039
for attackers background knowledge we

147
00:05:57,039 --> 00:05:59,280
assume the attacker knows the ldp

148
00:05:59,280 --> 00:06:00,880
protocol

149
00:06:00,880 --> 00:06:02,960
and for the attacker's capability we

150
00:06:02,960 --> 00:06:04,880
assume the attacker can inject fake

151
00:06:04,880 --> 00:06:07,120
accounts into the protocol previous

152
00:06:07,120 --> 00:06:08,800
measurement study showed that the

153
00:06:08,800 --> 00:06:11,280
attacker can get access to fake accounts

154
00:06:11,280 --> 00:06:13,840
with low costs

155
00:06:13,840 --> 00:06:15,840
we use different metrics for our tags in

156
00:06:15,840 --> 00:06:17,919
different applications for frequency

157
00:06:17,919 --> 00:06:20,240
estimation we define frequency again as

158
00:06:20,240 --> 00:06:22,080
the difference between the estimated

159
00:06:22,080 --> 00:06:24,800
frequency before and after attack we use

160
00:06:24,800 --> 00:06:26,960
overall again as our magic which is

161
00:06:26,960 --> 00:06:29,120
defined as the sum of the expectations

162
00:06:29,120 --> 00:06:30,720
on the frequency gains

163
00:06:30,720 --> 00:06:32,800
an attacker essentially manipulates the

164
00:06:32,800 --> 00:06:35,600
encode and material steps to craft

165
00:06:35,600 --> 00:06:38,720
values y that maximizes the overall gain

166
00:06:38,720 --> 00:06:39,600
g

167
00:06:39,600 --> 00:06:41,840
for heavy heater identification we use

168
00:06:41,840 --> 00:06:44,319
success rate as the magic which is

169
00:06:44,319 --> 00:06:46,800
defined as the fraction of target items

170
00:06:46,800 --> 00:06:50,720
that are identified as heavy hitters

171
00:06:50,720 --> 00:06:52,720
now i will introduce our attacks towards

172
00:06:52,720 --> 00:06:54,800
frequency estimation we propose two

173
00:06:54,800 --> 00:06:58,479
baseline attacks rpa and riaa and also

174
00:06:58,479 --> 00:07:01,680
an optimization based attack mga

175
00:07:01,680 --> 00:07:04,960
will focus on the optimized mga in which

176
00:07:04,960 --> 00:07:06,720
the fake users find the optimal

177
00:07:06,720 --> 00:07:08,960
perturbed values y by solving the

178
00:07:08,960 --> 00:07:11,680
optimization problem that maximizes the

179
00:07:11,680 --> 00:07:14,080
overall gain

180
00:07:14,080 --> 00:07:15,840
specifically let's first assume there

181
00:07:15,840 --> 00:07:18,880
are engineering users and m fake users

182
00:07:18,880 --> 00:07:20,240
in the particle

183
00:07:20,240 --> 00:07:22,160
then we can write the overall gain in a

184
00:07:22,160 --> 00:07:24,479
closed form as the equation here

185
00:07:24,479 --> 00:07:26,240
in the equation the second term is

186
00:07:26,240 --> 00:07:28,960
independent of the attacker graphing y

187
00:07:28,960 --> 00:07:31,440
and hence we denote it by c to imply

188
00:07:31,440 --> 00:07:33,120
that this is a constant when the

189
00:07:33,120 --> 00:07:35,440
parameters are fixed

190
00:07:35,440 --> 00:07:37,680
then maximizing g is equivalent to

191
00:07:37,680 --> 00:07:40,880
maximizing this term

192
00:07:41,039 --> 00:07:42,960
formally we can rewrite the optimal

193
00:07:42,960 --> 00:07:44,639
attack as follows

194
00:07:44,639 --> 00:07:46,560
for each trade user we craft its

195
00:07:46,560 --> 00:07:49,280
perturbed value by solving this problem

196
00:07:49,280 --> 00:07:52,080
intuitively mga maximizes the number of

197
00:07:52,080 --> 00:07:54,800
target items that y supports

198
00:07:54,800 --> 00:07:56,560
in the following slides i will describe

199
00:07:56,560 --> 00:07:59,759
the mg8 towards different protocols

200
00:07:59,759 --> 00:08:03,440
in klr for each fake user mga selects

201
00:08:03,440 --> 00:08:06,080
any target item as expected value and

202
00:08:06,080 --> 00:08:08,639
report it to the server we can complete

203
00:08:08,639 --> 00:08:11,599
the maximal game for krr as this

204
00:08:11,599 --> 00:08:14,879
in oil e for each user mga sets the

205
00:08:14,879 --> 00:08:16,960
corresponding bits of the target items

206
00:08:16,960 --> 00:08:19,680
to one in the particular vector moreover

207
00:08:19,680 --> 00:08:22,400
we also randomly choose some other bits

208
00:08:22,400 --> 00:08:24,800
and set them to one such that the number

209
00:08:24,800 --> 00:08:27,440
of ones seems normal in this vector

210
00:08:27,440 --> 00:08:30,160
the overarching of mga or ue can be

211
00:08:30,160 --> 00:08:33,039
expressed as those

212
00:08:33,039 --> 00:08:36,479
in oil edge for each fake user mga

213
00:08:36,479 --> 00:08:38,320
searches for the hash function that

214
00:08:38,320 --> 00:08:40,640
catches all target items to the same

215
00:08:40,640 --> 00:08:43,120
hash value and report the hash function

216
00:08:43,120 --> 00:08:45,519
and hash value pairs to the server

217
00:08:45,519 --> 00:08:48,240
the overall again is shown here

218
00:08:48,240 --> 00:08:50,000
we summarize the overall dense of

219
00:08:50,000 --> 00:08:51,839
attacks towards different protocols in

220
00:08:51,839 --> 00:08:54,640
this table here we replace the values p

221
00:08:54,640 --> 00:08:57,600
q and c in previous equations with the

222
00:08:57,600 --> 00:09:00,000
parameters of the protocols here are

223
00:09:00,000 --> 00:09:02,720
some takeaways from the table

224
00:09:02,720 --> 00:09:05,040
comparing the different attacks we can

225
00:09:05,040 --> 00:09:08,000
find that mga achieves larger overall

226
00:09:08,000 --> 00:09:10,240
gains than the baseline attacks

227
00:09:10,240 --> 00:09:12,560
and the overall gain of mga is much

228
00:09:12,560 --> 00:09:14,560
larger than the standard deviation of

229
00:09:14,560 --> 00:09:18,320
the estimation for the profiles

230
00:09:18,320 --> 00:09:20,160
comparing the different protocols we can

231
00:09:20,160 --> 00:09:22,800
see that mga achieves the same overall

232
00:09:22,800 --> 00:09:25,519
gain for oue and olh

233
00:09:25,519 --> 00:09:27,440
this means that they have the same level

234
00:09:27,440 --> 00:09:28,800
of security

235
00:09:28,800 --> 00:09:31,120
we also notice that when the item domain

236
00:09:31,120 --> 00:09:34,240
d is large the overall gain of mga is

237
00:09:34,240 --> 00:09:37,120
larger for krr than that for oae and

238
00:09:37,120 --> 00:09:40,320
lower edge this implies that oee and oil

239
00:09:40,320 --> 00:09:42,880
edge are more secure when there are many

240
00:09:42,880 --> 00:09:45,360
items

241
00:09:45,600 --> 00:09:48,800
focusing on the overarching of mga we

242
00:09:48,800 --> 00:09:51,279
observe that there is a security privacy

243
00:09:51,279 --> 00:09:53,839
tradeoff for the pure ldp protocols

244
00:09:53,839 --> 00:09:56,399
specifically a smaller privacy budget

245
00:09:56,399 --> 00:09:58,880
epsilon leads to a stronger privacy

246
00:09:58,880 --> 00:10:02,800
while also resulting a weaker security

247
00:10:02,800 --> 00:10:04,800
next i will introduce how we attack the

248
00:10:04,800 --> 00:10:07,120
pep heater identification protocols

249
00:10:07,120 --> 00:10:08,880
we observe that the habit heater

250
00:10:08,880 --> 00:10:11,440
identification protocols uses frequency

251
00:10:11,440 --> 00:10:14,079
estimation articles therefore we can

252
00:10:14,079 --> 00:10:16,399
apply our previous attacks

253
00:10:16,399 --> 00:10:18,560
to have hatred identification

254
00:10:18,560 --> 00:10:21,120
specifically for tem that we consider in

255
00:10:21,120 --> 00:10:24,240
this paper we perform mga or edge in

256
00:10:24,240 --> 00:10:26,000
each group

257
00:10:26,000 --> 00:10:27,839
here are some evaluation results on the

258
00:10:27,839 --> 00:10:30,240
heavy hitter attacks we can see that

259
00:10:30,240 --> 00:10:32,079
with only five percent fake users

260
00:10:32,079 --> 00:10:34,959
injected mga can promote nine of the

261
00:10:34,959 --> 00:10:37,440
target items to be top 10 heavy hitters

262
00:10:37,440 --> 00:10:40,160
and all 10 target items to be top 15

263
00:10:40,160 --> 00:10:42,880
heavy hitters

264
00:10:43,519 --> 00:10:46,079
we also explore some countermeasures in

265
00:10:46,079 --> 00:10:48,640
this work namely normalization detecting

266
00:10:48,640 --> 00:10:50,959
fake users and conditional probability

267
00:10:50,959 --> 00:10:53,200
based detection i will briefly talk

268
00:10:53,200 --> 00:10:56,000
about detecting fake users and other

269
00:10:56,000 --> 00:10:57,519
countermeasures can be found in our

270
00:10:57,519 --> 00:10:59,120
paper

271
00:10:59,120 --> 00:11:01,279
the key idea of detecting fake users is

272
00:11:01,279 --> 00:11:03,600
that a set of items will always be

273
00:11:03,600 --> 00:11:06,000
supported simultaneously by the fake

274
00:11:06,000 --> 00:11:06,959
users

275
00:11:06,959 --> 00:11:09,440
for instance in this illustration of oue

276
00:11:09,440 --> 00:11:11,920
the second fourth and fifth bits are

277
00:11:11,920 --> 00:11:14,720
once simultaneously for three users

278
00:11:14,720 --> 00:11:17,040
hence we can detect fake users by a

279
00:11:17,040 --> 00:11:19,360
frequent item set many

280
00:11:19,360 --> 00:11:21,600
where we find the item sets that are

281
00:11:21,600 --> 00:11:24,560
supported together by abnormally many

282
00:11:24,560 --> 00:11:28,000
users and marks these users as fake ones

283
00:11:28,000 --> 00:11:30,480
their reports will be excluded from the

284
00:11:30,480 --> 00:11:32,480
aggregate step

285
00:11:32,480 --> 00:11:34,399
here we show the results of detecting

286
00:11:34,399 --> 00:11:37,600
and removing fake users we can see that

287
00:11:37,600 --> 00:11:40,480
when the fraction of fake users data and

288
00:11:40,480 --> 00:11:44,320
the number of target items are is large

289
00:11:44,320 --> 00:11:46,959
items like mining can effectively detect

290
00:11:46,959 --> 00:11:49,839
the fake users and the overall gain jobs

291
00:11:49,839 --> 00:11:52,160
to nearly zero

292
00:11:52,160 --> 00:11:54,560
an attacker can adapt the mga attack to

293
00:11:54,560 --> 00:11:57,040
evade detection specifically instead of

294
00:11:57,040 --> 00:11:59,680
having everything user supporting all

295
00:11:59,680 --> 00:12:02,160
our target items the attacker can

296
00:12:02,160 --> 00:12:04,560
randomly select our prime target items

297
00:12:04,560 --> 00:12:07,040
to support for each fake user

298
00:12:07,040 --> 00:12:09,839
the figure shows that adaptive mga

299
00:12:09,839 --> 00:12:12,480
achieves smarter overall gains as r

300
00:12:12,480 --> 00:12:14,880
prime becomes smaller however it can

301
00:12:14,880 --> 00:12:17,040
evade the detection when we choose r

302
00:12:17,040 --> 00:12:20,000
prime smaller than r

303
00:12:20,000 --> 00:12:22,160
here are some conclusions in this work

304
00:12:22,160 --> 00:12:24,800
we propose data poisoning attacks to ldp

305
00:12:24,800 --> 00:12:26,720
that can effectively promote target

306
00:12:26,720 --> 00:12:29,120
items chosen by the attacker

307
00:12:29,120 --> 00:12:31,040
we further show the security privacy

308
00:12:31,040 --> 00:12:34,000
trade-off in the ldp proof books we also

309
00:12:34,000 --> 00:12:35,760
consider some countermeasures and show

310
00:12:35,760 --> 00:12:38,079
that they have limited effectiveness

311
00:12:38,079 --> 00:12:40,160
highlighting the needs for advanced

312
00:12:40,160 --> 00:12:43,360
defenses against our attacks

313
00:12:43,360 --> 00:12:47,160
thank you for your attention

314
00:12:52,959 --> 00:12:55,040
you

