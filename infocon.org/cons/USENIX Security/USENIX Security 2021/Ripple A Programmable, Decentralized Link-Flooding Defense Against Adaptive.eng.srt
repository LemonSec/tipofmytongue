1
00:00:08,800 --> 00:00:10,719
hello everyone this is generous from

2
00:00:10,719 --> 00:00:12,559
wrestling university in this talk i'm

3
00:00:12,559 --> 00:00:14,080
going to talk about how to mitigate

4
00:00:14,080 --> 00:00:15,759
adaptive link body attacks using a

5
00:00:15,759 --> 00:00:19,199
programmable decentralized by difference

6
00:00:19,199 --> 00:00:21,279
they flatly attacks an enhanced version

7
00:00:21,279 --> 00:00:23,359
of traditional ddos that have

8
00:00:23,359 --> 00:00:25,119
instead of sending a large volume of

9
00:00:25,119 --> 00:00:27,599
traffic to victim servers directly

10
00:00:27,599 --> 00:00:29,679
inflating attackers create congestion on

11
00:00:29,679 --> 00:00:31,840
critically in the network that carries

12
00:00:31,840 --> 00:00:34,880
most of the victims traffic

13
00:00:34,880 --> 00:00:36,399
to achieve the goal link flying

14
00:00:36,399 --> 00:00:38,160
attackers will first construct the

15
00:00:38,160 --> 00:00:40,399
network quality and identify them

16
00:00:40,399 --> 00:00:42,079
critically

17
00:00:42,079 --> 00:00:44,399
second they will find a set of public

18
00:00:44,399 --> 00:00:46,480
servers also known as decode servers

19
00:00:46,480 --> 00:00:48,480
that share the critical links with the

20
00:00:48,480 --> 00:00:50,960
mixing target

21
00:00:50,960 --> 00:00:53,120
finally the attacker flash may create

22
00:00:53,120 --> 00:00:55,039
critical links by sending a large volume

23
00:00:55,039 --> 00:00:56,879
traffic to eco server

24
00:00:56,879 --> 00:00:59,120
by doing this this running attackers can

25
00:00:59,120 --> 00:01:01,359
remove azure networks from the internet

26
00:01:01,359 --> 00:01:05,199
without you perceiving any traffic

27
00:01:05,199 --> 00:01:06,960
link flying attacks are difficult to

28
00:01:06,960 --> 00:01:08,960
detect and mitigate because the attacker

29
00:01:08,960 --> 00:01:10,720
can change their attack strategy

30
00:01:10,720 --> 00:01:12,799
dynamically

31
00:01:12,799 --> 00:01:14,880
for instance the attacker can attack

32
00:01:14,880 --> 00:01:16,560
different target links by sending

33
00:01:16,560 --> 00:01:19,439
traffic to different decode servers

34
00:01:19,439 --> 00:01:21,439
they can use both maps at different

35
00:01:21,439 --> 00:01:23,520
locations with different source id

36
00:01:23,520 --> 00:01:24,720
addresses

37
00:01:24,720 --> 00:01:26,159
and they can use different attack

38
00:01:26,159 --> 00:01:29,200
traffic patterns such as having udp

39
00:01:29,200 --> 00:01:30,880
flows or

40
00:01:30,880 --> 00:01:33,280
shortly the tcp flows or a mixture of

41
00:01:33,280 --> 00:01:35,439
the

42
00:01:35,520 --> 00:01:37,600
all this strategy how the attacker

43
00:01:37,600 --> 00:01:42,240
evades the defense deploy the defenses

44
00:01:42,720 --> 00:01:44,880
decline attacks happening in the network

45
00:01:44,880 --> 00:01:47,840
so these requirements were defense

46
00:01:47,840 --> 00:01:49,600
figure of the art defenses developing

47
00:01:49,600 --> 00:01:51,520
the security community are based on open

48
00:01:51,520 --> 00:01:53,200
flow at the end

49
00:01:53,200 --> 00:01:55,680
at either heard of the solution is a

50
00:01:55,680 --> 00:01:57,439
central controller that works the

51
00:01:57,439 --> 00:02:00,240
feedback loops

52
00:02:00,479 --> 00:02:02,479
lasting solution can pull the link

53
00:02:02,479 --> 00:02:04,479
innovation or traffic samples to the

54
00:02:04,479 --> 00:02:07,520
central controller for further analysis

55
00:02:07,520 --> 00:02:09,119
the central controller can run some

56
00:02:09,119 --> 00:02:11,280
algorithm to detect the attack classify

57
00:02:11,280 --> 00:02:13,440
the traffic and compute differences in

58
00:02:13,440 --> 00:02:15,520
the software

59
00:02:15,520 --> 00:02:17,360
finally the controller will deploy the

60
00:02:17,360 --> 00:02:19,840
differences to the sdn switches

61
00:02:19,840 --> 00:02:21,599
commonly use the

62
00:02:21,599 --> 00:02:24,000
mitigation includes loading traffic to

63
00:02:24,000 --> 00:02:25,440
alternative parts or filtering

64
00:02:25,440 --> 00:02:28,480
suspicious traffic

65
00:02:28,640 --> 00:02:30,959
unfortunately sdn solutions cannot

66
00:02:30,959 --> 00:02:32,959
handle faster adaptive attacks because

67
00:02:32,959 --> 00:02:34,800
of the following reasons

68
00:02:34,800 --> 00:02:37,200
first sdn controllers works in your

69
00:02:37,200 --> 00:02:39,200
feedback loop manner which requires

70
00:02:39,200 --> 00:02:41,519
several rpgs to collect the data compute

71
00:02:41,519 --> 00:02:43,440
their senses and deploy them into the

72
00:02:43,440 --> 00:02:44,959
network

73
00:02:44,959 --> 00:02:47,440
second software computation like traffic

74
00:02:47,440 --> 00:02:49,200
engineering where input linear program

75
00:02:49,200 --> 00:02:51,120
is very slow

76
00:02:51,120 --> 00:02:53,920
on the other hand adaptive adversaries

77
00:02:53,920 --> 00:02:55,680
can change their attack strategy very

78
00:02:55,680 --> 00:02:58,159
fast which means they can evade as being

79
00:02:58,159 --> 00:03:00,480
the same

80
00:03:00,480 --> 00:03:02,879
so in this work we ask the following key

81
00:03:02,879 --> 00:03:05,120
research question can we divide the

82
00:03:05,120 --> 00:03:06,640
expense against the fast adaptive

83
00:03:06,640 --> 00:03:08,159
attacks

84
00:03:08,159 --> 00:03:09,920
we believe the answer is yes and then we

85
00:03:09,920 --> 00:03:11,840
view the ripple in this work that is the

86
00:03:11,840 --> 00:03:13,760
programmable decentralized link planning

87
00:03:13,760 --> 00:03:18,200
design against adaptive anniversary

88
00:03:18,560 --> 00:03:20,480
ripple utilize the reasonable purpose of

89
00:03:20,480 --> 00:03:22,400
programmable switches which can be

90
00:03:22,400 --> 00:03:25,360
proven in high level languages like p4

91
00:03:25,360 --> 00:03:27,680
programmable switches allow users to

92
00:03:27,680 --> 00:03:30,400
customize packet processing logic or

93
00:03:30,400 --> 00:03:31,440
network

94
00:03:31,440 --> 00:03:35,200
protocols without hardware upgrade

95
00:03:35,200 --> 00:03:36,879
once deployed into the network

96
00:03:36,879 --> 00:03:38,640
programmable switches can run at light

97
00:03:38,640 --> 00:03:40,319
speed

98
00:03:40,319 --> 00:03:42,159
the security community has used

99
00:03:42,159 --> 00:03:44,319
programmable switches to build a wide

100
00:03:44,319 --> 00:03:47,040
range of security defenses but existing

101
00:03:47,040 --> 00:03:48,959
workers mostly use them for single

102
00:03:48,959 --> 00:03:51,519
switch defenses

103
00:03:51,519 --> 00:03:53,439
in this work we will use programmable

104
00:03:53,439 --> 00:03:55,519
switches as the battle rook to build a

105
00:03:55,519 --> 00:03:59,280
decentralized installing display

106
00:03:59,599 --> 00:04:01,599
our key idea is to decentralize the

107
00:04:01,599 --> 00:04:05,200
distance into provable switches

108
00:04:05,200 --> 00:04:07,280
by doing this we can significantly

109
00:04:07,280 --> 00:04:09,360
tighten the feedback loop

110
00:04:09,360 --> 00:04:11,680
and we can do packages instruction

111
00:04:11,680 --> 00:04:13,840
directly in the switch without sampling

112
00:04:13,840 --> 00:04:16,639
traffic to a central controller

113
00:04:16,639 --> 00:04:18,478
finally our defense can operate at

114
00:04:18,478 --> 00:04:20,959
higher speed which is much faster than

115
00:04:20,959 --> 00:04:22,720
sd controllers

116
00:04:22,720 --> 00:04:25,040
as a result repo can mitigate very fast

117
00:04:25,040 --> 00:04:27,880
adaptive attack

118
00:04:27,880 --> 00:04:29,600
decentralizations raise unique

119
00:04:29,600 --> 00:04:31,759
challenges in seeing solutions the

120
00:04:31,759 --> 00:04:33,759
central controller provide a global view

121
00:04:33,759 --> 00:04:35,680
for the design but the repo is the

122
00:04:35,680 --> 00:04:38,080
distributed system in which which is the

123
00:04:38,080 --> 00:04:41,280
only solute the local storage signal

124
00:04:41,280 --> 00:04:43,360
we solve this problem by reconstructing

125
00:04:43,360 --> 00:04:45,360
panoramic views in a decentralized

126
00:04:45,360 --> 00:04:46,720
manner

127
00:04:46,720 --> 00:04:49,040
concretely ripple has a language for

128
00:04:49,040 --> 00:04:51,199
users to define an easier paranormal

129
00:04:51,199 --> 00:04:54,000
view for different attack defenses

130
00:04:54,000 --> 00:04:56,479
then we have a compiler that can compile

131
00:04:56,479 --> 00:04:58,160
the difference into switch local

132
00:04:58,160 --> 00:05:00,320
programs which can extract the local

133
00:05:00,320 --> 00:05:02,960
paranormal pieces

134
00:05:02,960 --> 00:05:04,960
finally we have a distributed protocol

135
00:05:04,960 --> 00:05:06,720
that can reconstruct the complete

136
00:05:06,720 --> 00:05:09,600
parameter view

137
00:05:09,680 --> 00:05:12,320
so what's the panorama panorama defines

138
00:05:12,320 --> 00:05:14,240
the global storage signal needed for the

139
00:05:14,240 --> 00:05:16,400
design for example the conjunction is

140
00:05:16,400 --> 00:05:18,639
linked in the network the flow rate of

141
00:05:18,639 --> 00:05:21,360
some source ip addresses and a currently

142
00:05:21,360 --> 00:05:25,039
passed convert to some destination

143
00:05:25,039 --> 00:05:27,680
in repo the paranormal can be used in a

144
00:05:27,680 --> 00:05:29,840
key value schematic

145
00:05:29,840 --> 00:05:31,759
for example giving a flow id the

146
00:05:31,759 --> 00:05:35,440
panorama can tell you the flow rate of a

147
00:05:35,440 --> 00:05:37,280
ripple can swap the panorama in a

148
00:05:37,280 --> 00:05:40,479
decentralized manner

149
00:05:40,960 --> 00:05:42,639
different attacks require different

150
00:05:42,639 --> 00:05:45,039
panoramic views repo has the language

151
00:05:45,039 --> 00:05:47,520
for user to specify the needed panoramic

152
00:05:47,520 --> 00:05:49,840
views

153
00:05:50,000 --> 00:05:52,080
this example shows how to use nipple

154
00:05:52,080 --> 00:05:54,400
language to define the panoramic reviews

155
00:05:54,400 --> 00:05:56,560
for quality things

156
00:05:56,560 --> 00:05:58,479
chrome is just to battle like the

157
00:05:58,479 --> 00:06:00,560
enclaving attacks in which the attacker

158
00:06:00,560 --> 00:06:03,360
used higher udp flows or fake tcp flows

159
00:06:03,360 --> 00:06:06,720
to enhance the attacking factor

160
00:06:06,720 --> 00:06:08,960
in ripple panoramic variables are

161
00:06:08,960 --> 00:06:10,800
defined as the recurrent values for some

162
00:06:10,800 --> 00:06:13,680
code native the code body defines how to

163
00:06:13,680 --> 00:06:16,319
compute the panoramic variables

164
00:06:16,319 --> 00:06:18,400
and the quality for this different

165
00:06:18,400 --> 00:06:20,960
actually used a reduced operator to

166
00:06:20,960 --> 00:06:23,520
average the flow sizes and use the field

167
00:06:23,520 --> 00:06:27,680
operator to identify highly flow

168
00:06:29,440 --> 00:06:31,280
our next question is to extract the

169
00:06:31,280 --> 00:06:34,479
switch local fragments for the panorama

170
00:06:34,479 --> 00:06:36,800
rifle has a compiler that can compile

171
00:06:36,800 --> 00:06:39,120
each operator in the descent into switch

172
00:06:39,120 --> 00:06:40,800
local p4 programs

173
00:06:40,800 --> 00:06:42,720
but the repo converter does more than

174
00:06:42,720 --> 00:06:45,440
that the compiler will also perform

175
00:06:45,440 --> 00:06:47,120
automatic infrared for the following

176
00:06:47,120 --> 00:06:48,720
information

177
00:06:48,720 --> 00:06:51,199
first the key for the panorama

178
00:06:51,199 --> 00:06:54,080
report will remove and use the keys

179
00:06:54,080 --> 00:06:56,400
for instance in principle we should

180
00:06:56,400 --> 00:06:58,400
maintain all possible higher fields of

181
00:06:58,400 --> 00:07:00,639
packages into the victim ring but the

182
00:07:00,639 --> 00:07:02,800
report will found that only link id is

183
00:07:02,800 --> 00:07:05,360
new so it will only maintain information

184
00:07:05,360 --> 00:07:07,919
about link id

185
00:07:07,919 --> 00:07:10,639
second the referral compiler will

186
00:07:10,639 --> 00:07:12,880
infer the data structure and determine

187
00:07:12,880 --> 00:07:15,120
to use exactly or approximate this

188
00:07:15,120 --> 00:07:17,520
structure automatically

189
00:07:17,520 --> 00:07:20,160
for instance it will find that society

190
00:07:20,160 --> 00:07:22,800
is the key for suspicion and society is

191
00:07:22,800 --> 00:07:25,440
the very largest way so ripple will use

192
00:07:25,440 --> 00:07:28,800
telomere sketches to maintain suspicion

193
00:07:28,800 --> 00:07:30,960
finally the compiler will also insert

194
00:07:30,960 --> 00:07:32,800
the obsessed method

195
00:07:32,800 --> 00:07:34,560
it will find that

196
00:07:34,560 --> 00:07:36,880
bitcoin links is only used to test on

197
00:07:36,880 --> 00:07:38,319
its prices

198
00:07:38,319 --> 00:07:40,880
so the report will only maintain the

199
00:07:40,880 --> 00:07:44,720
needed information to calculate the size

200
00:07:44,720 --> 00:07:47,120
it is also found that the mitigation is

201
00:07:47,120 --> 00:07:49,280
never used in the following code so

202
00:07:49,280 --> 00:07:51,120
mitigation is never constructed and

203
00:07:51,120 --> 00:07:54,479
synchronized of course reaches

204
00:07:54,720 --> 00:07:56,960
now each switch can charge a panoramic

205
00:07:56,960 --> 00:07:59,160
pieces our next question is to

206
00:07:59,160 --> 00:08:02,639
reconstruct the complete panoramic view

207
00:08:02,639 --> 00:08:05,039
our solution is to reconstruct the

208
00:08:05,039 --> 00:08:07,120
panoramic variables using some

209
00:08:07,120 --> 00:08:09,120
distributed particles

210
00:08:09,120 --> 00:08:11,919
concretely in the first step each switch

211
00:08:11,919 --> 00:08:13,840
will extract the local fragment using

212
00:08:13,840 --> 00:08:16,800
the locals which people proven

213
00:08:16,800 --> 00:08:19,039
then we will exchange a fragment with

214
00:08:19,039 --> 00:08:21,280
their neighbors the neighbors will merge

215
00:08:21,280 --> 00:08:25,119
that fragment receivers from others

216
00:08:25,360 --> 00:08:27,360
protocol will rust our loss and the

217
00:08:27,360 --> 00:08:29,680
protocol can complete when all fragment

218
00:08:29,680 --> 00:08:32,719
exchange at that point all switches will

219
00:08:32,719 --> 00:08:36,479
have a complete analog view

220
00:08:36,479 --> 00:08:38,320
there are more details in the paper if

221
00:08:38,320 --> 00:08:39,599
you are

222
00:08:39,599 --> 00:08:41,599
read our paper

223
00:08:41,599 --> 00:08:43,279
next i will show you the evaluation

224
00:08:43,279 --> 00:08:44,959
result of ripple

225
00:08:44,959 --> 00:08:47,120
we build a ripple flow tab and evaluate

226
00:08:47,120 --> 00:08:48,880
a both pack level and flow level

227
00:08:48,880 --> 00:08:50,080
simulation

228
00:08:50,080 --> 00:08:52,000
we use railroad topologies and the

229
00:08:52,000 --> 00:08:54,160
mainstream link filing attacks proposing

230
00:08:54,160 --> 00:08:55,680
previous work

231
00:08:55,680 --> 00:08:57,839
they have built three sdn baseline the

232
00:08:57,839 --> 00:09:00,399
first baseline is acting sampling which

233
00:09:00,399 --> 00:09:02,399
performs sampling classification and

234
00:09:02,399 --> 00:09:04,720
traffic engineering decision controller

235
00:09:04,720 --> 00:09:07,360
the second one is sdn developing which

236
00:09:07,360 --> 00:09:09,040
only performs lower in the central

237
00:09:09,040 --> 00:09:11,040
controller blindly without traffic

238
00:09:11,040 --> 00:09:12,959
classification

239
00:09:12,959 --> 00:09:15,360
lots of baselines as being glass baths

240
00:09:15,360 --> 00:09:17,680
immediately give extra capability to sdn

241
00:09:17,680 --> 00:09:19,600
switches so that they can perform

242
00:09:19,600 --> 00:09:22,080
classification in the switch directly

243
00:09:22,080 --> 00:09:23,760
traffic in the area is drilled down in

244
00:09:23,760 --> 00:09:25,440
the central controller

245
00:09:25,440 --> 00:09:28,240
in all cases we use sol the state of the

246
00:09:28,240 --> 00:09:31,040
art strategy nearing towards usb system

247
00:09:31,040 --> 00:09:34,480
and perform traffic in here

248
00:09:34,480 --> 00:09:36,720
we first evaluate the effectiveness of

249
00:09:36,720 --> 00:09:39,040
repo in link value mitigation

250
00:09:39,040 --> 00:09:41,040
here we show the result of flow level

251
00:09:41,040 --> 00:09:43,680
stimulation for median cell to quality

252
00:09:43,680 --> 00:09:45,519
from left to right we show the

253
00:09:45,519 --> 00:09:47,680
normalized throughput of ripple compared

254
00:09:47,680 --> 00:09:50,240
to different idea and baseline

255
00:09:50,240 --> 00:09:52,880
as we can see as the routing and sdn

256
00:09:52,880 --> 00:09:55,600
plus plus takes a longer longer time to

257
00:09:55,600 --> 00:09:57,519
mitigate the attack

258
00:09:57,519 --> 00:09:59,440
i've seen sampling feel to mitigate the

259
00:09:59,440 --> 00:10:01,360
attack this is because the central

260
00:10:01,360 --> 00:10:03,839
controller can only sample a very small

261
00:10:03,839 --> 00:10:06,000
portion of traffic which means people

262
00:10:06,000 --> 00:10:09,360
miss most of the malaysia's traffic

263
00:10:09,360 --> 00:10:11,120
but the report can always mitigate the

264
00:10:11,120 --> 00:10:14,240
attack instantly

265
00:10:14,560 --> 00:10:17,279
then if we evaluate the effectiveness of

266
00:10:17,279 --> 00:10:20,160
ripple in adaptive attack mitigation

267
00:10:20,160 --> 00:10:22,240
here we show an adaptive attack the

268
00:10:22,240 --> 00:10:24,399
decrease is only appears which means

269
00:10:24,399 --> 00:10:26,480
from left to right the

270
00:10:26,480 --> 00:10:28,959
attack is enhanced

271
00:10:28,959 --> 00:10:30,959
it only shows the results for sdn plus

272
00:10:30,959 --> 00:10:33,519
plus because it is the most powerful sdn

273
00:10:33,519 --> 00:10:36,160
baseline we found that sdm class plus

274
00:10:36,160 --> 00:10:38,560
gradually falls behind the attack

275
00:10:38,560 --> 00:10:40,399
but the report can always mitigate the

276
00:10:40,399 --> 00:10:43,279
adaptive attack

277
00:10:43,279 --> 00:10:45,200
we have more experiment results in our

278
00:10:45,200 --> 00:10:49,519
paper please read that for more details

279
00:10:49,760 --> 00:10:51,680
let me summarize the talk we are

280
00:10:51,680 --> 00:10:53,760
motivated to mitigate adaptive link

281
00:10:53,760 --> 00:10:56,560
value attacks and we found that as the

282
00:10:56,560 --> 00:10:58,480
approaches that works near feedback loop

283
00:10:58,480 --> 00:11:00,480
manner which are too slow to mitigate a

284
00:11:00,480 --> 00:11:02,320
faster adaptive equipment

285
00:11:02,320 --> 00:11:04,399
the builder ripple in this work which is

286
00:11:04,399 --> 00:11:07,040
the proven more decentralization

287
00:11:07,040 --> 00:11:08,880
rupaul has the language for users to

288
00:11:08,880 --> 00:11:10,959
define the needed panoramic views for

289
00:11:10,959 --> 00:11:13,360
different italian expenses and it has a

290
00:11:13,360 --> 00:11:15,600
compiler that can automatically generate

291
00:11:15,600 --> 00:11:18,079
p4 programs to extract a switch local

292
00:11:18,079 --> 00:11:19,760
thread signal

293
00:11:19,760 --> 00:11:21,839
finally it has a distributed protocol to

294
00:11:21,839 --> 00:11:24,399
reconstruct the panoramic view

295
00:11:24,399 --> 00:11:26,560
our experiment without show that repo

296
00:11:26,560 --> 00:11:27,600
can

297
00:11:27,600 --> 00:11:29,360
being party and acts effectively and

298
00:11:29,360 --> 00:11:30,480
quickly

299
00:11:30,480 --> 00:11:32,720
we have released the sports call

300
00:11:32,720 --> 00:11:34,399
thank you for listening

301
00:11:34,399 --> 00:11:38,600
i'm happy to take any questions

302
00:11:46,000 --> 00:11:48,079
you

