1
00:00:08,800 --> 00:00:11,120
hi my name is ben usage and today i will

2
00:00:11,120 --> 00:00:12,799
be presenting our work on causal

3
00:00:12,799 --> 00:00:14,799
analysis for software-defined networking

4
00:00:14,799 --> 00:00:16,400
attacks

5
00:00:16,400 --> 00:00:18,080
so before diving in i want to briefly

6
00:00:18,080 --> 00:00:19,600
explain what makes software defined

7
00:00:19,600 --> 00:00:21,520
networking or sdn different from

8
00:00:21,520 --> 00:00:23,199
traditional networks

9
00:00:23,199 --> 00:00:25,439
so sdn decouples the decision making of

10
00:00:25,439 --> 00:00:27,359
how to forward traffic in other words

11
00:00:27,359 --> 00:00:29,359
the control plane from the traffic

12
00:00:29,359 --> 00:00:31,840
itself in other words the data plane

13
00:00:31,840 --> 00:00:33,600
so that means that the network switches

14
00:00:33,600 --> 00:00:35,120
don't need to figure out how to forward

15
00:00:35,120 --> 00:00:37,040
traffic just that they should follow a

16
00:00:37,040 --> 00:00:39,120
set of flow rules

17
00:00:39,120 --> 00:00:40,480
and those flow rules are sent through

18
00:00:40,480 --> 00:00:42,239
with the southbound api that links the

19
00:00:42,239 --> 00:00:43,600
planes together

20
00:00:43,600 --> 00:00:45,840
the control plane essentially configures

21
00:00:45,840 --> 00:00:47,520
the network's flow rules based on

22
00:00:47,520 --> 00:00:49,760
network state or policy

23
00:00:49,760 --> 00:00:51,360
and this is realized in an sdn

24
00:00:51,360 --> 00:00:53,680
controller and many sdn controllers

25
00:00:53,680 --> 00:00:57,840
essentially act as network operating

26
00:00:57,840 --> 00:00:59,600
and developers can write

27
00:00:59,600 --> 00:01:01,760
network applications that implement some

28
00:01:01,760 --> 00:01:04,080
desired functionality using a standard

29
00:01:04,080 --> 00:01:06,560
set of northbound api calls and services

30
00:01:06,560 --> 00:01:08,240
and so these apps set the network's

31
00:01:08,240 --> 00:01:09,520
policies

32
00:01:09,520 --> 00:01:11,439
so overall these layers and abstractions

33
00:01:11,439 --> 00:01:13,360
make it easier to program the network

34
00:01:13,360 --> 00:01:15,200
but how do they impact the network's

35
00:01:15,200 --> 00:01:17,600
security posture

36
00:01:17,600 --> 00:01:19,119
so let's take a look at some common

37
00:01:19,119 --> 00:01:22,560
attack cases and classes for sdn

38
00:01:22,560 --> 00:01:24,479
so we've seen cases where malicious apps

39
00:01:24,479 --> 00:01:26,720
can poison the view of other apps so

40
00:01:26,720 --> 00:01:28,479
that they can force them to essentially

41
00:01:28,479 --> 00:01:30,640
act as confused deputies

42
00:01:30,640 --> 00:01:32,000
and we've also seen cases where

43
00:01:32,000 --> 00:01:34,640
malicious host can influence decision

44
00:01:34,640 --> 00:01:36,720
making by taking advantage of cross

45
00:01:36,720 --> 00:01:39,360
plane information flow

46
00:01:39,360 --> 00:01:41,280
now ultimately from a defender point of

47
00:01:41,280 --> 00:01:42,960
view we want to know if we have enough

48
00:01:42,960 --> 00:01:45,280
insight to see these attacks

49
00:01:45,280 --> 00:01:46,720
so let's say that i'm a network

50
00:01:46,720 --> 00:01:49,360
administrator that my sdn network is

51
00:01:49,360 --> 00:01:51,600
attacked and i need to quickly figure

52
00:01:51,600 --> 00:01:53,600
out what happened to recover

53
00:01:53,600 --> 00:01:55,600
so i would want to know things like you

54
00:01:55,600 --> 00:01:57,280
know what were the significant control

55
00:01:57,280 --> 00:01:59,600
plane data plane and app plane actions

56
00:01:59,600 --> 00:02:01,680
that were taken

57
00:02:01,680 --> 00:02:04,079
can i see this attack end to end or are

58
00:02:04,079 --> 00:02:05,680
there relevant pieces that are missing

59
00:02:05,680 --> 00:02:08,399
from what i can see

60
00:02:08,399 --> 00:02:09,919
even if i collect everything it doesn't

61
00:02:09,919 --> 00:02:11,360
necessarily mean i can make sense of

62
00:02:11,360 --> 00:02:13,599
what happened so imagine searching

63
00:02:13,599 --> 00:02:15,200
through hundreds of thousands of lines

64
00:02:15,200 --> 00:02:18,238
in a syslog file

65
00:02:18,400 --> 00:02:20,080
what happened in the past

66
00:02:20,080 --> 00:02:22,319
that would have been possible causes you

67
00:02:22,319 --> 00:02:23,599
know what did the network state look

68
00:02:23,599 --> 00:02:26,160
like that led to these decisions

69
00:02:26,160 --> 00:02:27,680
and even if i have some evidence of the

70
00:02:27,680 --> 00:02:28,640
attack

71
00:02:28,640 --> 00:02:30,239
how do i know that it didn't poison

72
00:02:30,239 --> 00:02:32,800
decision making elsewhere

73
00:02:32,800 --> 00:02:34,239
luckily for us though many of these

74
00:02:34,239 --> 00:02:35,519
questions can be answered with data

75
00:02:35,519 --> 00:02:37,680
provenance and you can think of data

76
00:02:37,680 --> 00:02:39,040
providence as basically all of the

77
00:02:39,040 --> 00:02:41,040
metadata that shows how data we care

78
00:02:41,040 --> 00:02:42,800
about were generated and used in other

79
00:02:42,800 --> 00:02:44,720
words the history of it

80
00:02:44,720 --> 00:02:46,319
and so that includes the system's

81
00:02:46,319 --> 00:02:48,319
principles or agents in other words who

82
00:02:48,319 --> 00:02:50,480
or what was responsible

83
00:02:50,480 --> 00:02:52,480
processes or activities and the data

84
00:02:52,480 --> 00:02:53,599
objects

85
00:02:53,599 --> 00:02:55,200
we can model the relations among all of

86
00:02:55,200 --> 00:02:57,120
these with a directed acyclic graph that

87
00:02:57,120 --> 00:02:58,879
shows that history

88
00:02:58,879 --> 00:03:00,080
and the key benefit is that we can

89
00:03:00,080 --> 00:03:02,480
search past history quite efficiently so

90
00:03:02,480 --> 00:03:04,080
for instance you know maybe we have some

91
00:03:04,080 --> 00:03:06,159
piece of evidence of that an attack had

92
00:03:06,159 --> 00:03:07,200
occurred

93
00:03:07,200 --> 00:03:08,879
that piece of evidence was generated by

94
00:03:08,879 --> 00:03:11,440
a process and back in its history there

95
00:03:11,440 --> 00:03:12,959
was a root cause of the malicious

96
00:03:12,959 --> 00:03:14,800
process

97
00:03:14,800 --> 00:03:16,800
so we follow the edges in the graph

98
00:03:16,800 --> 00:03:19,440
to all of the prior ancestors

99
00:03:19,440 --> 00:03:21,599
but besides the causes if we you know we

100
00:03:21,599 --> 00:03:23,440
might also care about the effects too

101
00:03:23,440 --> 00:03:25,200
and we can easily find those by changing

102
00:03:25,200 --> 00:03:27,840
the edge directions and tracing forward

103
00:03:27,840 --> 00:03:29,360
so that way we can see what the relevant

104
00:03:29,360 --> 00:03:31,360
history is but we can also ignore

105
00:03:31,360 --> 00:03:32,959
irrelevant history as well that doesn't

106
00:03:32,959 --> 00:03:34,480
have any dependencies on what we care

107
00:03:34,480 --> 00:03:37,680
about which is shown on the right here

108
00:03:37,680 --> 00:03:39,360
so this sounds useful but what makes it

109
00:03:39,360 --> 00:03:41,840
hard for the sdn context

110
00:03:41,840 --> 00:03:43,440
if we're not careful about how we model

111
00:03:43,440 --> 00:03:45,680
these things then every network activity

112
00:03:45,680 --> 00:03:47,120
can look dependent on every other

113
00:03:47,120 --> 00:03:48,879
network activity which leads to a

114
00:03:48,879 --> 00:03:51,280
dependency explosion

115
00:03:51,280 --> 00:03:52,959
if we don't capture the causal relations

116
00:03:52,959 --> 00:03:54,560
among the different planes we might

117
00:03:54,560 --> 00:03:56,239
actually miss some dependencies that end

118
00:03:56,239 --> 00:03:58,720
up being crucial

119
00:03:58,720 --> 00:04:00,319
and networks are notorious for having

120
00:04:00,319 --> 00:04:02,560
attribution challenges uh because hosts

121
00:04:02,560 --> 00:04:04,720
can easily spoof information

122
00:04:04,720 --> 00:04:05,920
so we have to make sure that we aren't

123
00:04:05,920 --> 00:04:08,720
falsely attributing responsibility

124
00:04:08,720 --> 00:04:10,239
and finally making sense of what the

125
00:04:10,239 --> 00:04:12,000
providence we capture

126
00:04:12,000 --> 00:04:13,680
you know is quite critical to answering

127
00:04:13,680 --> 00:04:15,599
questions about attacks

128
00:04:15,599 --> 00:04:17,519
so we present a tool for providence

129
00:04:17,519 --> 00:04:19,199
informed causal observation for

130
00:04:19,199 --> 00:04:22,560
software-defined networking or picosdn

131
00:04:22,560 --> 00:04:23,840
so i'll walk through some of those

132
00:04:23,840 --> 00:04:25,600
challenges that we discovered how we

133
00:04:25,600 --> 00:04:29,840
solve them and our systems architecture

134
00:04:29,919 --> 00:04:32,639
so suppose that we model each sdn app as

135
00:04:32,639 --> 00:04:35,120
a long-running process

136
00:04:35,120 --> 00:04:37,120
so in the example here we have an app

137
00:04:37,120 --> 00:04:38,560
process which is represented by a

138
00:04:38,560 --> 00:04:40,000
rectangle

139
00:04:40,000 --> 00:04:42,320
that uses a packet it's not that's an

140
00:04:42,320 --> 00:04:44,400
object represented by an oval and

141
00:04:44,400 --> 00:04:46,880
generates a flow rule another oval

142
00:04:46,880 --> 00:04:48,880
so to interpret this we start with flow

143
00:04:48,880 --> 00:04:51,120
rule one and say that it was generated

144
00:04:51,120 --> 00:04:53,360
by the forwarding application which used

145
00:04:53,360 --> 00:04:55,040
packet one

146
00:04:55,040 --> 00:04:56,880
now sometime later this process repeats

147
00:04:56,880 --> 00:04:58,960
with a second incoming packet which

148
00:04:58,960 --> 00:05:02,000
generates a second flow rule and so on

149
00:05:02,000 --> 00:05:04,000
and later an administrator spots a bad

150
00:05:04,000 --> 00:05:06,960
flow rule and wants to trace its history

151
00:05:06,960 --> 00:05:08,320
well it's clear that this app was

152
00:05:08,320 --> 00:05:10,800
involved but we now see that every

153
00:05:10,800 --> 00:05:12,240
packet

154
00:05:12,240 --> 00:05:14,639
as input is involved as well as a result

155
00:05:14,639 --> 00:05:16,320
of this long-running process model that

156
00:05:16,320 --> 00:05:17,919
we have

157
00:05:17,919 --> 00:05:20,000
so to fix that what we did was we

158
00:05:20,000 --> 00:05:22,479
partitioned objects and processes

159
00:05:22,479 --> 00:05:24,320
and we found that common repetitive

160
00:05:24,320 --> 00:05:27,039
patterns in control plane execution

161
00:05:27,039 --> 00:05:28,639
the event listeners in the apps are

162
00:05:28,639 --> 00:05:30,880
essentially loops so they form a nice

163
00:05:30,880 --> 00:05:33,039
execution partition

164
00:05:33,039 --> 00:05:35,280
so for example here the administrator

165
00:05:35,280 --> 00:05:37,680
traces back and flow rule three nc is at

166
00:05:37,680 --> 00:05:40,880
packet 3 and only packet 3 was used

167
00:05:40,880 --> 00:05:42,320
thus they don't need to look through the

168
00:05:42,320 --> 00:05:44,000
rest of the history which saves a lot of

169
00:05:44,000 --> 00:05:45,759
time

170
00:05:45,759 --> 00:05:47,680
we also found an indirect causal link

171
00:05:47,680 --> 00:05:49,680
through the data plane so this is an

172
00:05:49,680 --> 00:05:51,520
incomplete dependency because without it

173
00:05:51,520 --> 00:05:53,280
our model doesn't capture dependencies

174
00:05:53,280 --> 00:05:54,960
that it ought to

175
00:05:54,960 --> 00:05:56,960
so imagine that you have two apps x and

176
00:05:56,960 --> 00:05:57,680
y

177
00:05:57,680 --> 00:05:59,919
and app x sends a packet out into the

178
00:05:59,919 --> 00:06:01,440
data plane

179
00:06:01,440 --> 00:06:02,639
so that packet is sent with the

180
00:06:02,639 --> 00:06:04,080
instruction to flood out to all the

181
00:06:04,080 --> 00:06:06,319
other ports on switch one and so one of

182
00:06:06,319 --> 00:06:08,000
those packets goes out the link towards

183
00:06:08,000 --> 00:06:09,440
switch 2.

184
00:06:09,440 --> 00:06:11,440
switch 2 sees that packet as an incoming

185
00:06:11,440 --> 00:06:13,280
packet that doesn't match any predefined

186
00:06:13,280 --> 00:06:14,880
flow rule that it has

187
00:06:14,880 --> 00:06:16,400
so then it sends that packet up to the

188
00:06:16,400 --> 00:06:18,720
controller for processing where app y

189
00:06:18,720 --> 00:06:21,520
sees it now it's clear that x caused

190
00:06:21,520 --> 00:06:23,440
something to happen with app y

191
00:06:23,440 --> 00:06:25,199
but we can't necessarily see that from

192
00:06:25,199 --> 00:06:27,360
the control plane alone

193
00:06:27,360 --> 00:06:29,039
so we mitigated this by combining

194
00:06:29,039 --> 00:06:30,479
control and data plane information

195
00:06:30,479 --> 00:06:31,680
together

196
00:06:31,680 --> 00:06:33,360
so starting from the control plane we

197
00:06:33,360 --> 00:06:35,360
see that the packet goes out from an app

198
00:06:35,360 --> 00:06:37,199
at time one

199
00:06:37,199 --> 00:06:39,680
and some short time later after time one

200
00:06:39,680 --> 00:06:41,120
we see an incoming packet being

201
00:06:41,120 --> 00:06:43,440
processed by another app or another

202
00:06:43,440 --> 00:06:45,360
instance of the same app

203
00:06:45,360 --> 00:06:46,720
and so our data plane model then

204
00:06:46,720 --> 00:06:48,400
identifies where these causal links

205
00:06:48,400 --> 00:06:50,319
should be added so that way we can

206
00:06:50,319 --> 00:06:54,639
capture indirect control plane causality

207
00:06:54,639 --> 00:06:56,800
now when a switch is added into the

208
00:06:56,800 --> 00:06:58,479
network the controller adds a default

209
00:06:58,479 --> 00:07:00,400
flow rule that matches packets that

210
00:07:00,400 --> 00:07:01,280
haven't

211
00:07:01,280 --> 00:07:03,120
otherwise been matched essentially it's

212
00:07:03,120 --> 00:07:04,960
the action of last resort so that

213
00:07:04,960 --> 00:07:07,199
unmatched packets don't just get dropped

214
00:07:07,199 --> 00:07:08,639
to the switch

215
00:07:08,639 --> 00:07:10,160
so in this example we see that we have

216
00:07:10,160 --> 00:07:11,759
an incoming packet that matched that

217
00:07:11,759 --> 00:07:13,680
default flow rule and is then sent to

218
00:07:13,680 --> 00:07:15,120
the controller

219
00:07:15,120 --> 00:07:16,960
but for learning switches this becomes

220
00:07:16,960 --> 00:07:18,639
hard because now everything looks as

221
00:07:18,639 --> 00:07:20,720
though it's depending on the default

222
00:07:20,720 --> 00:07:22,800
flow rule and then it causes a high fan

223
00:07:22,800 --> 00:07:24,800
up as a result

224
00:07:24,800 --> 00:07:27,199
so to mitigate that we assigned agency

225
00:07:27,199 --> 00:07:29,840
or responsibility on a purport

226
00:07:29,840 --> 00:07:31,599
so this group's dependencies so that

227
00:07:31,599 --> 00:07:33,759
each port has the responsibility for the

228
00:07:33,759 --> 00:07:35,599
packets that were sent on them

229
00:07:35,599 --> 00:07:38,080
now you might wonder why switch ports

230
00:07:38,080 --> 00:07:40,720
well some ports such as the network

231
00:07:40,720 --> 00:07:43,759
edges ports have hosts behind them

232
00:07:43,759 --> 00:07:45,599
so why not assign responsibility to

233
00:07:45,599 --> 00:07:46,560
hosts

234
00:07:46,560 --> 00:07:49,759
so that led us to another consideration

235
00:07:49,759 --> 00:07:51,280
so it's not exactly new knowledge here

236
00:07:51,280 --> 00:07:53,199
but host identifiers can be easily

237
00:07:53,199 --> 00:07:54,560
spoofed

238
00:07:54,560 --> 00:07:56,800
so arp spoofing for example is well

239
00:07:56,800 --> 00:07:58,800
known in traditional networks

240
00:07:58,800 --> 00:08:00,800
so in the sdn case this is similar

241
00:08:00,800 --> 00:08:03,039
except that sdn maintains objects with

242
00:08:03,039 --> 00:08:04,400
that information

243
00:08:04,400 --> 00:08:06,479
so that the impact of spoofing attacks

244
00:08:06,479 --> 00:08:07,199
is

245
00:08:07,199 --> 00:08:08,879
different because of how those objects

246
00:08:08,879 --> 00:08:12,479
are used to make control plane decisions

247
00:08:12,479 --> 00:08:14,080
so we solved this by adding extra

248
00:08:14,080 --> 00:08:16,080
provenance to quickly identify how host

249
00:08:16,080 --> 00:08:18,240
identities change over time

250
00:08:18,240 --> 00:08:20,000
so say that a legitimate host connects

251
00:08:20,000 --> 00:08:21,759
to the network by sending a packet into

252
00:08:21,759 --> 00:08:23,280
the data plane

253
00:08:23,280 --> 00:08:24,560
that packet's information gets

254
00:08:24,560 --> 00:08:26,960
transformed into a host object

255
00:08:26,960 --> 00:08:28,720
and sometime later a malicious host on a

256
00:08:28,720 --> 00:08:30,240
different port tries to spoof that

257
00:08:30,240 --> 00:08:31,680
identifier

258
00:08:31,680 --> 00:08:33,599
so we see a similar type of pattern here

259
00:08:33,599 --> 00:08:35,519
but interestingly none of the major sdn

260
00:08:35,519 --> 00:08:37,360
controllers prevent the spoofing from

261
00:08:37,360 --> 00:08:38,799
occurring

262
00:08:38,799 --> 00:08:41,200
and so we add a non-causal edge into the

263
00:08:41,200 --> 00:08:43,039
graph that links any of those changes

264
00:08:43,039 --> 00:08:45,440
such as moving location so thus we have

265
00:08:45,440 --> 00:08:47,519
the ability to pinpoint exactly when and

266
00:08:47,519 --> 00:08:49,760
where these situations occur so that we

267
00:08:49,760 --> 00:08:53,440
can see the causal effects quite clearly

268
00:08:53,440 --> 00:08:55,279
and finally even if we do collect

269
00:08:55,279 --> 00:08:56,560
everything that we want uh we could

270
00:08:56,560 --> 00:08:58,880
still end up with a complicated history

271
00:08:58,880 --> 00:09:00,320
so arguably it's still better than

272
00:09:00,320 --> 00:09:01,920
sifting through you know for both

273
00:09:01,920 --> 00:09:04,160
syslogs but we still need to interpret

274
00:09:04,160 --> 00:09:06,240
what happened

275
00:09:06,240 --> 00:09:07,760
and so our solution here is to provide a

276
00:09:07,760 --> 00:09:09,360
set of tools that lets administrators

277
00:09:09,360 --> 00:09:11,120
query for what they need to understand

278
00:09:11,120 --> 00:09:12,320
attacks

279
00:09:12,320 --> 00:09:13,839
so for time considerations i'll point

280
00:09:13,839 --> 00:09:15,120
you to the paper since it has more

281
00:09:15,120 --> 00:09:16,959
details about how these work but

282
00:09:16,959 --> 00:09:18,720
essentially they allow administrators to

283
00:09:18,720 --> 00:09:21,200
find common root causes see effects at

284
00:09:21,200 --> 00:09:23,040
each stage in the history summarize

285
00:09:23,040 --> 00:09:25,120
activities and identify where spoofing

286
00:09:25,120 --> 00:09:27,120
occurs

287
00:09:27,120 --> 00:09:28,480
and so given these challenges and

288
00:09:28,480 --> 00:09:30,480
solutions i'll now explain picosdn's

289
00:09:30,480 --> 00:09:32,800
architecture which we implemented on the

290
00:09:32,800 --> 00:09:35,200
onus sdn controller

291
00:09:35,200 --> 00:09:36,399
so to start

292
00:09:36,399 --> 00:09:38,880
network apps and the data plane both use

293
00:09:38,880 --> 00:09:41,360
apis and event systems to interact with

294
00:09:41,360 --> 00:09:42,160
the

295
00:09:42,160 --> 00:09:44,640
controller's control plane

296
00:09:44,640 --> 00:09:46,399
we wrapped events to identify how

297
00:09:46,399 --> 00:09:48,720
dispatches are being used by listeners

298
00:09:48,720 --> 00:09:50,800
and we hooked api calls so we could tag

299
00:09:50,800 --> 00:09:52,160
objects with the relevant caller

300
00:09:52,160 --> 00:09:53,680
metadata

301
00:09:53,680 --> 00:09:55,360
we keep a little bit of internal state

302
00:09:55,360 --> 00:09:57,440
as well so there are unique identifiers

303
00:09:57,440 --> 00:09:59,120
for each object

304
00:09:59,120 --> 00:10:00,720
and then we serialize that providence

305
00:10:00,720 --> 00:10:03,600
into a concise representation

306
00:10:03,600 --> 00:10:05,760
now at some point later offline we

307
00:10:05,760 --> 00:10:07,200
decentralized that

308
00:10:07,200 --> 00:10:09,200
deserialize that providence so that

309
00:10:09,200 --> 00:10:10,800
involves converting the serialized

310
00:10:10,800 --> 00:10:12,480
representation into a graph that we can

311
00:10:12,480 --> 00:10:14,399
then operate on

312
00:10:14,399 --> 00:10:16,399
we then clean up and augment the graph

313
00:10:16,399 --> 00:10:18,000
to account for what we care about in the

314
00:10:18,000 --> 00:10:20,240
attack analysis

315
00:10:20,240 --> 00:10:21,920
and once that's done we can then use our

316
00:10:21,920 --> 00:10:23,440
tracing techniques on the graph to

317
00:10:23,440 --> 00:10:26,000
analyze what happened

318
00:10:26,000 --> 00:10:28,640
and we evaluated picosdn with several

319
00:10:28,640 --> 00:10:30,480
classes of attacks one example shown

320
00:10:30,480 --> 00:10:31,680
here looks at cross plane

321
00:10:31,680 --> 00:10:33,519
vulnerabilities

322
00:10:33,519 --> 00:10:35,839
so here the attack bypasses the firewall

323
00:10:35,839 --> 00:10:38,560
access control configuration using a few

324
00:10:38,560 --> 00:10:40,480
carefully crafted packets

325
00:10:40,480 --> 00:10:42,240
so the malicious host that generates

326
00:10:42,240 --> 00:10:44,160
these packets lives on switch one port

327
00:10:44,160 --> 00:10:46,320
one so we can see that the device behind

328
00:10:46,320 --> 00:10:48,000
this port is responsible for several

329
00:10:48,000 --> 00:10:50,320
packets p1 and p2 that end up

330
00:10:50,320 --> 00:10:52,320
influencing the access control app or

331
00:10:52,320 --> 00:10:54,240
acl

332
00:10:54,240 --> 00:10:56,079
we also see a spoofed identifier which

333
00:10:56,079 --> 00:10:57,519
lets us see if either of those host

334
00:10:57,519 --> 00:10:59,440
objects are possibly corrupted

335
00:10:59,440 --> 00:11:00,959
and finally because of that data plane

336
00:11:00,959 --> 00:11:02,399
model we can backtrace the flow on

337
00:11:02,399 --> 00:11:04,480
difference on from a different switch so

338
00:11:04,480 --> 00:11:05,680
if we didn't have this model we would

339
00:11:05,680 --> 00:11:07,680
erroneously assume that switch 2 was the

340
00:11:07,680 --> 00:11:09,680
root cause and end up ignoring the

341
00:11:09,680 --> 00:11:12,720
actual malicious root cause in switch 1.

342
00:11:12,720 --> 00:11:14,640
so to summarize the work we considered

343
00:11:14,640 --> 00:11:16,240
the challenges of performing causal

344
00:11:16,240 --> 00:11:18,880
analysis for attacks in sdn networks

345
00:11:18,880 --> 00:11:20,480
we note several design takeaways

346
00:11:20,480 --> 00:11:22,000
particularly that our choice of model

347
00:11:22,000 --> 00:11:23,839
mitigates a lot of dependency explosion

348
00:11:23,839 --> 00:11:26,000
and incomplete dependencies since we

349
00:11:26,000 --> 00:11:28,000
precisely model objects events in the

350
00:11:28,000 --> 00:11:29,200
data plane

351
00:11:29,200 --> 00:11:30,560
and realizing that the network domain

352
00:11:30,560 --> 00:11:32,240
has attribution challenges we accounted

353
00:11:32,240 --> 00:11:34,000
for those as well

354
00:11:34,000 --> 00:11:35,440
and we also designed and implemented

355
00:11:35,440 --> 00:11:38,399
picosdn for sdn networks and we're able

356
00:11:38,399 --> 00:11:40,800
to show that our design can help capture

357
00:11:40,800 --> 00:11:42,880
and interpret various classes of sdn

358
00:11:42,880 --> 00:11:44,959
attacks

359
00:11:44,959 --> 00:11:46,880
and with that feel free to reach out to

360
00:11:46,880 --> 00:11:48,320
me if you're interested in discussing

361
00:11:48,320 --> 00:11:49,920
more about this or more about the

362
00:11:49,920 --> 00:11:51,200
security of future networking

363
00:11:51,200 --> 00:11:55,880
architectures thanks again for your time

364
00:12:02,800 --> 00:12:04,880
you

