1
00:00:09,120 --> 00:00:10,080
hello

2
00:00:10,080 --> 00:00:12,080
my name is amo and today i'm presenting

3
00:00:12,080 --> 00:00:14,160
my research titled what's in a name

4
00:00:14,160 --> 00:00:17,920
exploring ca certificate control

5
00:00:18,000 --> 00:00:19,520
authentication is one of the core

6
00:00:19,520 --> 00:00:22,000
security objectives in today's web

7
00:00:22,000 --> 00:00:24,160
in the simplest case web clients and

8
00:00:24,160 --> 00:00:26,000
servers can directly authenticate

9
00:00:26,000 --> 00:00:27,760
through some challenge and response

10
00:00:27,760 --> 00:00:29,679
protocol

11
00:00:29,679 --> 00:00:31,840
however in practice due to the scale and

12
00:00:31,840 --> 00:00:33,520
complexity of the modern web

13
00:00:33,520 --> 00:00:35,120
authentication is delegated to

14
00:00:35,120 --> 00:00:37,120
certificate authorities also known as

15
00:00:37,120 --> 00:00:38,399
cas

16
00:00:38,399 --> 00:00:41,040
cas perform server identity verification

17
00:00:41,040 --> 00:00:43,520
and then use ca certificates to sign a

18
00:00:43,520 --> 00:00:45,360
leaf certificate that vouches for the

19
00:00:45,360 --> 00:00:48,719
identity of a server's public key

20
00:00:48,719 --> 00:00:50,640
servers can then authenticate by

21
00:00:50,640 --> 00:00:52,719
presenting this certificate to clients

22
00:00:52,719 --> 00:00:55,760
if a client trusts the ca that signed

23
00:00:55,760 --> 00:00:58,079
the certificate

24
00:00:58,079 --> 00:00:59,760
the work that i'm presenting today

25
00:00:59,760 --> 00:01:01,680
examines the mapping between ca

26
00:01:01,680 --> 00:01:03,760
certificates and the cas that operate

27
00:01:03,760 --> 00:01:05,920
them

28
00:01:05,920 --> 00:01:07,760
to better understand why this is

29
00:01:07,760 --> 00:01:09,920
important let's look at the distrust of

30
00:01:09,920 --> 00:01:13,360
the ca symantec symantec was formerly

31
00:01:13,360 --> 00:01:15,680
the largest ca and in 2018 it was

32
00:01:15,680 --> 00:01:17,920
revoked from all major browser root

33
00:01:17,920 --> 00:01:19,600
stores as a result of numerous

34
00:01:19,600 --> 00:01:22,000
certificate issuance problems

35
00:01:22,000 --> 00:01:24,400
however the process of removing trust in

36
00:01:24,400 --> 00:01:26,560
symantec was surprisingly difficult

37
00:01:26,560 --> 00:01:28,799
because believe it or not it was not

38
00:01:28,799 --> 00:01:30,880
clear which trusted certificates were

39
00:01:30,880 --> 00:01:33,439
actually operated by symantec

40
00:01:33,439 --> 00:01:35,680
so as an example here are two real root

41
00:01:35,680 --> 00:01:38,159
certificate subjects only one of which

42
00:01:38,159 --> 00:01:41,040
was operated by symantec

43
00:01:41,040 --> 00:01:42,880
as you can see these root certificate

44
00:01:42,880 --> 00:01:44,960
names are nearly identical but neither

45
00:01:44,960 --> 00:01:47,920
of them provide a clear link to symantec

46
00:01:47,920 --> 00:01:49,759
and as it turns out

47
00:01:49,759 --> 00:01:51,680
despite their nearly identical naming

48
00:01:51,680 --> 00:01:54,159
the first route was operated by komodo

49
00:01:54,159 --> 00:01:55,759
and the second route was operated by

50
00:01:55,759 --> 00:01:58,159
symantec

51
00:01:58,159 --> 00:02:00,000
in parallel to distrusting semantic

52
00:02:00,000 --> 00:02:02,159
routes several intermediate certificates

53
00:02:02,159 --> 00:02:03,680
signed by symantec were actually

54
00:02:03,680 --> 00:02:05,439
whitelisted because they were operated

55
00:02:05,439 --> 00:02:08,560
independently by google and apple these

56
00:02:08,560 --> 00:02:10,639
intermediates continue to be trusted by

57
00:02:10,639 --> 00:02:12,720
browsers despite the fact that the root

58
00:02:12,720 --> 00:02:15,200
of their certificate chain was not

59
00:02:15,200 --> 00:02:17,360
trusted

60
00:02:17,360 --> 00:02:19,840
so what do we learn from this incident

61
00:02:19,840 --> 00:02:21,760
here are three takeaways

62
00:02:21,760 --> 00:02:24,480
first trust in tls authentication occurs

63
00:02:24,480 --> 00:02:26,879
at the level of cas but it is enforced

64
00:02:26,879 --> 00:02:29,680
at the level of ca certificates

65
00:02:29,680 --> 00:02:31,599
second there are no guarantees that the

66
00:02:31,599 --> 00:02:33,680
subject identity in a ca certificate

67
00:02:33,680 --> 00:02:36,080
reflects the operator of the ca

68
00:02:36,080 --> 00:02:37,519
certificate

69
00:02:37,519 --> 00:02:38,480
third

70
00:02:38,480 --> 00:02:41,040
intermediate cca certificates may be

71
00:02:41,040 --> 00:02:43,360
operated independently from their root

72
00:02:43,360 --> 00:02:46,080
ca certificate so this means we need to

73
00:02:46,080 --> 00:02:48,400
not only understand the operators of

74
00:02:48,400 --> 00:02:50,400
root certificates we also need to

75
00:02:50,400 --> 00:02:52,480
know the operations of intermediate ca

76
00:02:52,480 --> 00:02:54,160
certificates which are usually not

77
00:02:54,160 --> 00:02:57,760
present in root certificate stores

78
00:02:58,080 --> 00:03:00,319
so unfortunately there has been no prior

79
00:03:00,319 --> 00:03:02,480
academic work on this problem

80
00:03:02,480 --> 00:03:04,080
and the closest thing we have to

81
00:03:04,080 --> 00:03:06,800
solution is the common ca database also

82
00:03:06,800 --> 00:03:10,000
known as the ccadb

83
00:03:10,000 --> 00:03:12,480
and this is organized by mozilla as a

84
00:03:12,480 --> 00:03:15,519
centralized location for cas to provide

85
00:03:15,519 --> 00:03:18,640
their policy and audit documents

86
00:03:18,640 --> 00:03:20,640
the ccadb

87
00:03:20,640 --> 00:03:22,480
has an owner field for each ca

88
00:03:22,480 --> 00:03:24,720
certificate but this field represents an

89
00:03:24,720 --> 00:03:26,720
administrative owner which may or may

90
00:03:26,720 --> 00:03:29,519
not overlap with operational control

91
00:03:29,519 --> 00:03:31,760
for example let's encrypt has several

92
00:03:31,760 --> 00:03:33,840
cross-signed certificates that are owned

93
00:03:33,840 --> 00:03:36,720
by identrust and ccadb even though they

94
00:03:36,720 --> 00:03:40,640
are operated by let's encrypt

95
00:03:40,640 --> 00:03:43,360
the other issue with ccadb is that it

96
00:03:43,360 --> 00:03:45,680
provides incomplete coverage of ca

97
00:03:45,680 --> 00:03:48,319
certificates and this is 20 of the ca

98
00:03:48,319 --> 00:03:50,480
issuers trusted by major os and browser

99
00:03:50,480 --> 00:03:53,519
root stores so ccadb is a good start in

100
00:03:53,519 --> 00:03:55,599
our quest to identify the operators of

101
00:03:55,599 --> 00:03:58,560
ca certificates but unfortunately it is

102
00:03:58,560 --> 00:04:00,959
not designed for this purpose

103
00:04:00,959 --> 00:04:01,680
so

104
00:04:01,680 --> 00:04:04,080
what can we do

105
00:04:04,080 --> 00:04:05,920
our approach is to measure different

106
00:04:05,920 --> 00:04:08,239
operational aspects of a ca and then

107
00:04:08,239 --> 00:04:10,480
group ca certificates based on shared

108
00:04:10,480 --> 00:04:12,560
operational features the first set of

109
00:04:12,560 --> 00:04:14,239
operational features are derived

110
00:04:14,239 --> 00:04:17,040
directly from certificates we develop a

111
00:04:17,040 --> 00:04:18,560
novel certificate fingerprinting

112
00:04:18,560 --> 00:04:20,798
technique which i'll describe shortly

113
00:04:20,798 --> 00:04:22,160
that captures the issuance

114
00:04:22,160 --> 00:04:24,479
infrastructure of a ca

115
00:04:24,479 --> 00:04:26,400
we can also extract urls from

116
00:04:26,400 --> 00:04:28,240
certificates that represent the

117
00:04:28,240 --> 00:04:30,240
associated network infrastructure that

118
00:04:30,240 --> 00:04:33,040
cas operate

119
00:04:33,199 --> 00:04:35,199
our third operational perspective comes

120
00:04:35,199 --> 00:04:36,880
from ca audit documents which are

121
00:04:36,880 --> 00:04:39,280
reports written by auditors who visit ca

122
00:04:39,280 --> 00:04:41,680
data centers and detail the certificates

123
00:04:41,680 --> 00:04:43,440
under a ca's control

124
00:04:43,440 --> 00:04:45,040
so we automatically extract these

125
00:04:45,040 --> 00:04:47,759
certificates and use them as features in

126
00:04:47,759 --> 00:04:50,320
our feature set

127
00:04:50,320 --> 00:04:52,000
we then heuristically combine these

128
00:04:52,000 --> 00:04:54,000
features to generate clusters of ca

129
00:04:54,000 --> 00:04:56,080
certificates under shared operational

130
00:04:56,080 --> 00:04:58,479
control

131
00:04:59,280 --> 00:05:01,120
the next step

132
00:05:01,120 --> 00:05:03,440
is for us to label the owners of these

133
00:05:03,440 --> 00:05:04,800
certificates

134
00:05:04,800 --> 00:05:06,639
so for this step we carefully apply

135
00:05:06,639 --> 00:05:09,440
ccadb labels to these clusters and after

136
00:05:09,440 --> 00:05:11,680
label correction and expansion we

137
00:05:11,680 --> 00:05:13,919
finally generate a best effort data set

138
00:05:13,919 --> 00:05:15,360
of ca certificates and their ca

139
00:05:15,360 --> 00:05:17,759
operators

140
00:05:17,759 --> 00:05:19,280
so now that you have a high level

141
00:05:19,280 --> 00:05:20,960
overview of our approach let's expand a

142
00:05:20,960 --> 00:05:23,520
little bit on the details

143
00:05:23,520 --> 00:05:25,520
so first i'd like to point out that we

144
00:05:25,520 --> 00:05:27,120
developed a new certificate

145
00:05:27,120 --> 00:05:28,800
fingerprinting technique that aims to

146
00:05:28,800 --> 00:05:30,800
detect artifacts of certificate issuance

147
00:05:30,800 --> 00:05:33,440
software and its configurations

148
00:05:33,440 --> 00:05:35,280
our goal is given a large pile of

149
00:05:35,280 --> 00:05:36,960
certificates to distinguish the

150
00:05:36,960 --> 00:05:39,280
certificate entropy caused by issuance

151
00:05:39,280 --> 00:05:41,680
software and distinguish that from all

152
00:05:41,680 --> 00:05:43,360
other certificate entropy which can be

153
00:05:43,360 --> 00:05:45,600
caused by required randomness or

154
00:05:45,600 --> 00:05:48,160
user-controlled values

155
00:05:48,160 --> 00:05:49,919
our insight here is that certificate

156
00:05:49,919 --> 00:05:52,880
data is organized as an ordered tree an

157
00:05:52,880 --> 00:05:54,960
issuance infrastructure largely controls

158
00:05:54,960 --> 00:05:57,199
the structure and order of the tree

159
00:05:57,199 --> 00:05:59,600
while other entropy occurs primarily in

160
00:05:59,600 --> 00:06:01,919
the leaf nodes of the tree

161
00:06:01,919 --> 00:06:04,080
so let's walk through an example to see

162
00:06:04,080 --> 00:06:06,720
to see what this means here we have an

163
00:06:06,720 --> 00:06:09,039
incomplete contrived certificate which

164
00:06:09,039 --> 00:06:11,759
is structured as an order tree

165
00:06:11,759 --> 00:06:13,520
we can see a few fields that generate

166
00:06:13,520 --> 00:06:15,919
entropy independent of issuance software

167
00:06:15,919 --> 00:06:17,840
these are things like validity period of

168
00:06:17,840 --> 00:06:19,759
certificate or the actual subject name

169
00:06:19,759 --> 00:06:21,360
in the certificate as well as the

170
00:06:21,360 --> 00:06:23,600
signature

171
00:06:23,600 --> 00:06:25,440
we can also see that many of the

172
00:06:25,440 --> 00:06:27,680
remaining fields are sources of entropy

173
00:06:27,680 --> 00:06:29,039
that do depend on issuance

174
00:06:29,039 --> 00:06:31,440
infrastructure so for example

175
00:06:31,440 --> 00:06:33,919
the type and order of extensions are not

176
00:06:33,919 --> 00:06:35,759
controlled by end users and are

177
00:06:35,759 --> 00:06:37,360
configured by certificate issue and

178
00:06:37,360 --> 00:06:38,639
software

179
00:06:38,639 --> 00:06:40,639
similarly the signature type and subject

180
00:06:40,639 --> 00:06:42,400
field types are likely dependent on

181
00:06:42,400 --> 00:06:45,280
issuance software configuration

182
00:06:45,280 --> 00:06:47,919
so our fingerprint essentially captures

183
00:06:47,919 --> 00:06:49,360
the structure of the certificate

184
00:06:49,360 --> 00:06:52,080
ignoring all leaf node values besides

185
00:06:52,080 --> 00:06:54,720
oid leaf values which represent

186
00:06:54,720 --> 00:06:56,479
innumerable fields that are often

187
00:06:56,479 --> 00:07:00,479
controlled by issuant software

188
00:07:00,639 --> 00:07:01,520
so

189
00:07:01,520 --> 00:07:04,160
what do we do with these fingerprints

190
00:07:04,160 --> 00:07:07,199
to utilize them we look at each issuer's

191
00:07:07,199 --> 00:07:09,919
issuance profile which is the full set

192
00:07:09,919 --> 00:07:12,080
of fingerprints that are generated by a

193
00:07:12,080 --> 00:07:14,319
given ca issuer

194
00:07:14,319 --> 00:07:15,680
on the left side of this graph we have

195
00:07:15,680 --> 00:07:17,280
the top 20 fingerprints issued by

196
00:07:17,280 --> 00:07:20,479
digicert according to ccadb labels

197
00:07:20,479 --> 00:07:22,080
and each column

198
00:07:22,080 --> 00:07:24,720
represents an issuance profile

199
00:07:24,720 --> 00:07:26,240
so here we have highlighted two

200
00:07:26,240 --> 00:07:28,639
different issuance profiles

201
00:07:28,639 --> 00:07:30,960
we find 25 issuers that match the

202
00:07:30,960 --> 00:07:33,199
issuance profile on the left and eight

203
00:07:33,199 --> 00:07:35,039
issuers that match the issuance profile

204
00:07:35,039 --> 00:07:36,639
on the right

205
00:07:36,639 --> 00:07:38,160
and by looking

206
00:07:38,160 --> 00:07:40,160
across these issuance profiles presented

207
00:07:40,160 --> 00:07:44,319
here we can see a pretty distinct divide

208
00:07:44,319 --> 00:07:46,720
all the profiles on the left half are

209
00:07:46,720 --> 00:07:48,560
highly similar and have many overlapping

210
00:07:48,560 --> 00:07:51,039
fingerprints

211
00:07:51,039 --> 00:07:53,039
while all the profiles on the right half

212
00:07:53,039 --> 00:07:55,039
also seem related and they contain a

213
00:07:55,039 --> 00:07:58,479
disjoint set of fingerprints

214
00:07:58,479 --> 00:08:00,160
by digging deeper we can find that the

215
00:08:00,160 --> 00:08:01,680
issuers on the left are actually

216
00:08:01,680 --> 00:08:04,319
associated with the belgian citizen ca

217
00:08:04,319 --> 00:08:06,400
which is operated independent of the

218
00:08:06,400 --> 00:08:08,080
issuers on the right which are actually

219
00:08:08,080 --> 00:08:10,000
operated by digicert

220
00:08:10,000 --> 00:08:12,319
this shows how certificate fingerprints

221
00:08:12,319 --> 00:08:14,479
can distinguish between independent

222
00:08:14,479 --> 00:08:17,680
issuance infrastructure

223
00:08:18,800 --> 00:08:21,360
certificate fingerprints are one of

224
00:08:21,360 --> 00:08:24,000
three data sources in our pipeline

225
00:08:24,000 --> 00:08:25,759
and we heuristically combine them with

226
00:08:25,759 --> 00:08:27,680
network infrastructure features and

227
00:08:27,680 --> 00:08:29,360
audit-based features to generate

228
00:08:29,360 --> 00:08:31,759
clusters of ca certificates with shared

229
00:08:31,759 --> 00:08:34,159
operations

230
00:08:34,159 --> 00:08:35,760
the next step in determining ca

231
00:08:35,760 --> 00:08:38,159
certificate operators is to use ccadb to

232
00:08:38,159 --> 00:08:41,919
clearly label our heuristic clusters

233
00:08:41,919 --> 00:08:44,720
when we apply ccadb labels to the nodes

234
00:08:44,720 --> 00:08:46,240
in our heuristic clusters we find

235
00:08:46,240 --> 00:08:47,920
several instances of clusters with

236
00:08:47,920 --> 00:08:49,920
conflicting labels this is not

237
00:08:49,920 --> 00:08:52,080
unexpected since ccidb owner labels

238
00:08:52,080 --> 00:08:54,160
reflect administrative responsibility

239
00:08:54,160 --> 00:08:56,720
rather than operational control

240
00:08:56,720 --> 00:08:58,160
we resolve these conflicts through

241
00:08:58,160 --> 00:09:00,160
manual review and correct the label so

242
00:09:00,160 --> 00:09:02,000
that each node accurately reflects

243
00:09:02,000 --> 00:09:04,160
operational control

244
00:09:04,160 --> 00:09:06,720
the final step of cluster labeling is

245
00:09:06,720 --> 00:09:09,120
label expansion so we identified

246
00:09:09,120 --> 00:09:10,720
clusters with at least 70 percent

247
00:09:10,720 --> 00:09:12,880
majority of label nodes and then expand

248
00:09:12,880 --> 00:09:14,880
those labels to the remaining unlabeled

249
00:09:14,880 --> 00:09:17,760
nodes in the cluster

250
00:09:17,760 --> 00:09:19,680
so now that we have completed our data

251
00:09:19,680 --> 00:09:22,160
set pipeline we need to evaluate our

252
00:09:22,160 --> 00:09:24,480
output data set to get a sense of its

253
00:09:24,480 --> 00:09:26,880
accuracy

254
00:09:26,880 --> 00:09:28,880
unfortunately no ground truth data

255
00:09:28,880 --> 00:09:30,480
exists

256
00:09:30,480 --> 00:09:32,640
hence the need for the study but we were

257
00:09:32,640 --> 00:09:34,160
able to come up with an approximate

258
00:09:34,160 --> 00:09:36,560
ground truth data set so this data set

259
00:09:36,560 --> 00:09:38,640
comes from ca certificate disclosure

260
00:09:38,640 --> 00:09:41,600
bugs for mozilla's root store that were

261
00:09:41,600 --> 00:09:43,440
manually resolved

262
00:09:43,440 --> 00:09:44,800
so mozilla's root store has a

263
00:09:44,800 --> 00:09:47,279
requirement to disclose ca certificates

264
00:09:47,279 --> 00:09:50,880
within seven days um within seven days

265
00:09:50,880 --> 00:09:53,600
otherwise a bug is filed if that

266
00:09:53,600 --> 00:09:56,320
requirement is not met

267
00:09:56,320 --> 00:10:00,080
so in total we found 22 issues

268
00:10:00,080 --> 00:10:03,360
between may 2014 and july 2019 and these

269
00:10:03,360 --> 00:10:06,959
issues spanned 103 ca issuers

270
00:10:06,959 --> 00:10:09,200
our data set was able to automatically

271
00:10:09,200 --> 00:10:14,399
label the ca operator of 48 issuers

272
00:10:14,640 --> 00:10:17,040
additionally every unknown issuer that

273
00:10:17,040 --> 00:10:19,200
could be labeled by our data set was

274
00:10:19,200 --> 00:10:21,440
correctly labeled and so this yields a

275
00:10:21,440 --> 00:10:26,240
100 specificity and 46 recall

276
00:10:26,240 --> 00:10:28,240
while this is far from perfect it

277
00:10:28,240 --> 00:10:30,079
represents a best effort approach to

278
00:10:30,079 --> 00:10:34,479
identifying ca certificate operators

279
00:10:35,279 --> 00:10:36,320
so

280
00:10:36,320 --> 00:10:38,399
what did we find

281
00:10:38,399 --> 00:10:40,560
with our data

282
00:10:40,560 --> 00:10:41,760
in the interest of time i'm going to

283
00:10:41,760 --> 00:10:43,519
highlight the key results but please see

284
00:10:43,519 --> 00:10:44,839
the paper for more

285
00:10:44,839 --> 00:10:46,959
information so first we found a

286
00:10:46,959 --> 00:10:48,720
subordinate ca

287
00:10:48,720 --> 00:10:52,079
belonging to multicert

288
00:10:52,079 --> 00:10:54,320
that was improperly reported as being a

289
00:10:54,320 --> 00:10:56,800
camera firma

290
00:10:56,800 --> 00:10:59,120
ca certificate

291
00:10:59,120 --> 00:11:01,440
and this discovery added to the growing

292
00:11:01,440 --> 00:11:04,640
evidence of camera firma's inability to

293
00:11:04,640 --> 00:11:07,200
operate a secure ca

294
00:11:07,200 --> 00:11:10,320
and as a result in early 2021

295
00:11:10,320 --> 00:11:12,480
google and mozilla both removed camera

296
00:11:12,480 --> 00:11:15,760
firmware from their root stores

297
00:11:15,760 --> 00:11:16,880
second

298
00:11:16,880 --> 00:11:18,320
our data pipeline and manual

299
00:11:18,320 --> 00:11:21,440
investigation identified 241 ca

300
00:11:21,440 --> 00:11:22,720
certificates

301
00:11:22,720 --> 00:11:25,279
with operators that did not match the

302
00:11:25,279 --> 00:11:28,480
certificate's ccadb label so again this

303
00:11:28,480 --> 00:11:30,160
highlights the administrative role of

304
00:11:30,160 --> 00:11:33,120
ccadb and it's unfitness for determining

305
00:11:33,120 --> 00:11:36,640
ca operational control

306
00:11:36,959 --> 00:11:41,120
finally we added new ca operator labels

307
00:11:41,120 --> 00:11:44,320
for 651 previously unlabeled ca

308
00:11:44,320 --> 00:11:47,279
certificates thus expanding our overall

309
00:11:47,279 --> 00:11:49,760
view of the existing ca

310
00:11:49,760 --> 00:11:52,160
ecosystem

311
00:11:52,160 --> 00:11:52,959
so

312
00:11:52,959 --> 00:11:54,639
to summarize in this work we

313
00:11:54,639 --> 00:11:56,880
demonstrated that ca certificate names

314
00:11:56,880 --> 00:11:58,720
can often have no bearing on who

315
00:11:58,720 --> 00:12:00,399
controls them due to

316
00:12:00,399 --> 00:12:02,880
ca business transactions and fictitious

317
00:12:02,880 --> 00:12:03,839
names

318
00:12:03,839 --> 00:12:06,240
this is true for both root certificates

319
00:12:06,240 --> 00:12:08,560
and intermediates

320
00:12:08,560 --> 00:12:10,639
to remedy the situation we collected an

321
00:12:10,639 --> 00:12:12,639
assortment of ca operational

322
00:12:12,639 --> 00:12:14,480
measurements to generate a new data set

323
00:12:14,480 --> 00:12:16,720
that assigns operator labels to ca

324
00:12:16,720 --> 00:12:18,720
certificates

325
00:12:18,720 --> 00:12:21,839
and overall our work strives to improve

326
00:12:21,839 --> 00:12:24,079
ca transparency

327
00:12:24,079 --> 00:12:26,880
this can provide benefits to root store

328
00:12:26,880 --> 00:12:28,959
operators who are deciding which case to

329
00:12:28,959 --> 00:12:31,519
trust and it can also lead to more

330
00:12:31,519 --> 00:12:33,920
accurate research and attribution of ca

331
00:12:33,920 --> 00:12:37,719
issues that arise

332
00:12:38,079 --> 00:12:39,600
thanks for listening that's the end of

333
00:12:39,600 --> 00:12:41,279
my talk and please don't hesitate to

334
00:12:41,279 --> 00:12:43,440
reach out if you have any questions or

335
00:12:43,440 --> 00:12:45,279
comments

336
00:12:45,279 --> 00:12:48,279
thanks

337
00:12:55,600 --> 00:12:57,680
you

