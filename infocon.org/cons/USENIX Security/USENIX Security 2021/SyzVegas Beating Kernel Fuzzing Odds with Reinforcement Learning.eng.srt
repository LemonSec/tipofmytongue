1
00:00:08,960 --> 00:00:11,200
hello everyone my name is diamond i'm

2
00:00:11,200 --> 00:00:13,280
going to present my research with my

3
00:00:13,280 --> 00:00:15,599
colleagues at university of california

4
00:00:15,599 --> 00:00:18,160
riverside how to build kernel fuzzing

5
00:00:18,160 --> 00:00:22,080
odds with reinforcement learning

6
00:00:23,439 --> 00:00:26,000
fuzzing is simple in principle the

7
00:00:26,000 --> 00:00:27,920
father generates many different test

8
00:00:27,920 --> 00:00:30,400
inputs sends them to the target program

9
00:00:30,400 --> 00:00:33,120
and see if the program crashes

10
00:00:33,120 --> 00:00:36,079
fuzzing is also an art there are a large

11
00:00:36,079 --> 00:00:38,160
number of parameters that can be tuned

12
00:00:38,160 --> 00:00:39,680
which will affect the fuzzer's

13
00:00:39,680 --> 00:00:42,719
effectiveness to find crashes

14
00:00:42,719 --> 00:00:44,719
kernel function is even more complex

15
00:00:44,719 --> 00:00:48,320
which is large code space unique system

16
00:00:48,320 --> 00:00:50,160
called interfaces and concurrency

17
00:00:50,160 --> 00:00:51,680
considerations

18
00:00:51,680 --> 00:00:53,520
to perform effective fuzzing in the

19
00:00:53,520 --> 00:00:56,559
kernel space this color the state of our

20
00:00:56,559 --> 00:00:59,359
kernel further utilizes an ever-growing

21
00:00:59,359 --> 00:01:01,440
template database to generate valid

22
00:01:01,440 --> 00:01:03,039
input from the kernel

23
00:01:03,039 --> 00:01:05,280
cisco also incorporates numerous

24
00:01:05,280 --> 00:01:08,400
decisions based on strong intuitions

25
00:01:08,400 --> 00:01:11,520
domain expertise empirical testing and

26
00:01:11,520 --> 00:01:13,839
tuning

27
00:01:14,159 --> 00:01:15,759
the figure on the right shows the

28
00:01:15,759 --> 00:01:18,320
workflow of this color there are three

29
00:01:18,320 --> 00:01:21,520
types of tasks generation which crafts a

30
00:01:21,520 --> 00:01:24,080
test image from scratch based on the

31
00:01:24,080 --> 00:01:25,600
syscall templates

32
00:01:25,600 --> 00:01:28,560
mutation which modifies an existing test

33
00:01:28,560 --> 00:01:29,759
input

34
00:01:29,759 --> 00:01:33,040
triage which takes an input program that

35
00:01:33,040 --> 00:01:34,640
funds new coverage

36
00:01:34,640 --> 00:01:37,680
re-executes it for several times to make

37
00:01:37,680 --> 00:01:39,439
sure a new coverage can be reliably

38
00:01:39,439 --> 00:01:40,880
reproduced

39
00:01:40,880 --> 00:01:43,680
and then tries to make it smaller and

40
00:01:43,680 --> 00:01:45,759
added to the seed pool for future

41
00:01:45,759 --> 00:01:48,399
mutations

42
00:01:48,640 --> 00:01:50,640
since cholera have its function strategy

43
00:01:50,640 --> 00:01:53,759
is hard coded problem is they might not

44
00:01:53,759 --> 00:01:55,680
face all situations

45
00:01:55,680 --> 00:01:58,399
for example this caller gives triage

46
00:01:58,399 --> 00:02:00,240
highest priority

47
00:02:00,240 --> 00:02:01,680
then mutation

48
00:02:01,680 --> 00:02:03,920
different than generation

49
00:02:03,920 --> 00:02:06,399
however if we start this color from

50
00:02:06,399 --> 00:02:09,199
scratch we actually found that the

51
00:02:09,199 --> 00:02:11,038
generation is actually quite powerful

52
00:02:11,038 --> 00:02:12,080
early on

53
00:02:12,080 --> 00:02:14,480
for about one to three hours depends on

54
00:02:14,480 --> 00:02:16,400
how much kernel is being fast

55
00:02:16,400 --> 00:02:18,480
looking at the left figure

56
00:02:18,480 --> 00:02:21,599
another example is that whenever this

57
00:02:21,599 --> 00:02:24,400
caller finds a new seed it will force

58
00:02:24,400 --> 00:02:26,879
100 mutations out of it

59
00:02:26,879 --> 00:02:29,599
this creates a huge backlog for seed

60
00:02:29,599 --> 00:02:31,440
program waiting for others to finish

61
00:02:31,440 --> 00:02:33,680
their 100 mutations

62
00:02:33,680 --> 00:02:35,920
not all seeds are good enough for 100

63
00:02:35,920 --> 00:02:39,200
mutation as well so you can take a look

64
00:02:39,200 --> 00:02:42,319
at the right figure

65
00:02:42,480 --> 00:02:45,360
based on our observations so far the

66
00:02:45,360 --> 00:02:48,000
best strategies evolves over time and

67
00:02:48,000 --> 00:02:51,360
static and hub decisions can be harmful

68
00:02:51,360 --> 00:02:53,200
so the question is

69
00:02:53,200 --> 00:02:55,440
can we use reinforcement learning to

70
00:02:55,440 --> 00:02:57,040
improve this

71
00:02:57,040 --> 00:02:59,599
hence we propose this vegas where we

72
00:02:59,599 --> 00:03:02,560
will test scheduling and c selection as

73
00:03:02,560 --> 00:03:05,440
adversarial multi-armed bandit problems

74
00:03:05,440 --> 00:03:08,560
m a b

75
00:03:08,640 --> 00:03:11,840
in the mab problem there is a gambler

76
00:03:11,840 --> 00:03:14,800
aka this caller facing a number of slot

77
00:03:14,800 --> 00:03:17,440
machines each with a different reward

78
00:03:17,440 --> 00:03:18,560
function

79
00:03:18,560 --> 00:03:21,920
in says color this is tries to test

80
00:03:21,920 --> 00:03:24,640
schedule and c to mutate

81
00:03:24,640 --> 00:03:26,720
the gambler without knowing the inner

82
00:03:26,720 --> 00:03:29,120
working of the slot machines needs to

83
00:03:29,120 --> 00:03:31,280
play them to find out how rewarding they

84
00:03:31,280 --> 00:03:33,920
are and then devise a strategy to

85
00:03:33,920 --> 00:03:35,840
maximize the reward

86
00:03:35,840 --> 00:03:38,480
in the aversive map scenario the reward

87
00:03:38,480 --> 00:03:40,640
of the slot machines can change over

88
00:03:40,640 --> 00:03:44,799
time so the gambler aka 6 color needs to

89
00:03:44,799 --> 00:03:47,920
adapt to these changes

90
00:03:47,920 --> 00:03:50,480
we believe that the virtual map is a

91
00:03:50,480 --> 00:03:52,959
great fit for the problem problem it's

92
00:03:52,959 --> 00:03:54,720
lightweight don't care about internal

93
00:03:54,720 --> 00:03:57,280
states and can adapt to the changing

94
00:03:57,280 --> 00:04:00,400
rewards making it perfect to optimize

95
00:04:00,400 --> 00:04:02,959
coverage reached per unit time

96
00:04:02,959 --> 00:04:04,799
there are two challenges

97
00:04:04,799 --> 00:04:05,680
first

98
00:04:05,680 --> 00:04:08,560
how to assess the reward we want to

99
00:04:08,560 --> 00:04:10,959
guide the map algorithm towards

100
00:04:10,959 --> 00:04:13,519
optimizing coverage reached per unit

101
00:04:13,519 --> 00:04:14,799
time

102
00:04:14,799 --> 00:04:16,000
second

103
00:04:16,000 --> 00:04:18,000
how to adapt

104
00:04:18,000 --> 00:04:21,680
we want amab to recognize the change in

105
00:04:21,680 --> 00:04:24,160
season task reward and adapt its

106
00:04:24,160 --> 00:04:27,880
strategy accordingly

107
00:04:28,720 --> 00:04:31,040
we need a single reward metric that

108
00:04:31,040 --> 00:04:33,840
captures coverage and time spent then to

109
00:04:33,840 --> 00:04:36,080
do that let's go back to the gambler's

110
00:04:36,080 --> 00:04:38,720
slot machine analogy

111
00:04:38,720 --> 00:04:41,680
so when our gambling this caller picks a

112
00:04:41,680 --> 00:04:44,320
slot machine to play it needs to pay a

113
00:04:44,320 --> 00:04:46,720
time cost and the slot machine uses a

114
00:04:46,720 --> 00:04:48,240
coverage reward

115
00:04:48,240 --> 00:04:50,639
time and coverage are in different

116
00:04:50,639 --> 00:04:51,759
currency

117
00:04:51,759 --> 00:04:54,240
so we need to establish a conversion

118
00:04:54,240 --> 00:04:56,800
rate this can be intuitively done by

119
00:04:56,800 --> 00:04:59,360
looking at the total time it lasts and

120
00:04:59,360 --> 00:05:01,840
the total coverage achieved

121
00:05:01,840 --> 00:05:03,919
therefore the actual reward can be

122
00:05:03,919 --> 00:05:07,360
measured as the new coverage achieved

123
00:05:07,360 --> 00:05:09,520
converted to unit time

124
00:05:09,520 --> 00:05:12,880
minus the time cost

125
00:05:13,680 --> 00:05:16,639
things are slightly different for triage

126
00:05:16,639 --> 00:05:19,840
3h test does not generate much coverage

127
00:05:19,840 --> 00:05:22,560
but produces seed program which can be

128
00:05:22,560 --> 00:05:25,680
data mutated to find new coverage

129
00:05:25,680 --> 00:05:28,320
it also tries to reduce the size of the

130
00:05:28,320 --> 00:05:31,440
seed program to save time later

131
00:05:31,440 --> 00:05:34,320
so we will take these two contributions

132
00:05:34,320 --> 00:05:37,280
into considerations when we mutated the

133
00:05:37,280 --> 00:05:39,039
program later

134
00:05:39,039 --> 00:05:42,160
when mutation is coverage rewards we

135
00:05:42,160 --> 00:05:45,120
will distribute a portion of the reward

136
00:05:45,120 --> 00:05:47,600
to the triage task acknowledging its

137
00:05:47,600 --> 00:05:52,280
contribution to the mutation task

138
00:05:53,680 --> 00:05:56,639
with the reward model setup we can build

139
00:05:56,639 --> 00:05:59,440
our adversarial map algorithm for task

140
00:05:59,440 --> 00:06:00,800
selection

141
00:06:00,800 --> 00:06:04,240
we use exp3 based algorithm which gives

142
00:06:04,240 --> 00:06:07,840
a good choices exponential growth in

143
00:06:07,840 --> 00:06:10,800
their probability of being selected

144
00:06:10,800 --> 00:06:13,360
since the reward of tasks can change

145
00:06:13,360 --> 00:06:16,800
arbitrarily we reset accumulated rewards

146
00:06:16,800 --> 00:06:21,560
for each task choice periodically

147
00:06:22,479 --> 00:06:24,800
c selection is similar

148
00:06:24,800 --> 00:06:27,280
since it only occurs in mutation so the

149
00:06:27,280 --> 00:06:29,520
algorithm is slightly different the

150
00:06:29,520 --> 00:06:31,680
conversion rate is different as they

151
00:06:31,680 --> 00:06:34,319
should not come the time and coverage

152
00:06:34,319 --> 00:06:36,240
incurred from generation and treated

153
00:06:36,240 --> 00:06:38,319
tasks there is no need to speed the

154
00:06:38,319 --> 00:06:39,440
reward

155
00:06:39,440 --> 00:06:41,120
and the number of seeds is ever

156
00:06:41,120 --> 00:06:43,280
increasing so the algorithm needs to

157
00:06:43,280 --> 00:06:44,639
adapt to that

158
00:06:44,639 --> 00:06:46,560
finally we know that the reward of the

159
00:06:46,560 --> 00:06:48,880
individual seed is a diminution function

160
00:06:48,880 --> 00:06:53,280
so there is no need to reset

161
00:06:54,319 --> 00:06:57,440
so we run says vegas analysis is color

162
00:06:57,440 --> 00:07:01,759
and fast linux kernel 5.6.13

163
00:07:01,759 --> 00:07:03,759
for 24 hours

164
00:07:03,759 --> 00:07:05,280
the figure on the left shows the

165
00:07:05,280 --> 00:07:06,800
coverage achieved

166
00:07:06,800 --> 00:07:09,520
we observed that with this bigger c

167
00:07:09,520 --> 00:07:12,000
selection coverage is significantly

168
00:07:12,000 --> 00:07:14,639
improved over vanilla's color

169
00:07:14,639 --> 00:07:17,440
if we add in task selection the coverage

170
00:07:17,440 --> 00:07:18,960
is even better

171
00:07:18,960 --> 00:07:20,720
breaking down the coverage of our task

172
00:07:20,720 --> 00:07:23,919
we found that as we expect the task

173
00:07:23,919 --> 00:07:25,120
selection

174
00:07:25,120 --> 00:07:27,199
makes generation contributes much more

175
00:07:27,199 --> 00:07:28,319
coverage

176
00:07:28,319 --> 00:07:30,880
we see selection the mutation becomes

177
00:07:30,880 --> 00:07:33,919
much more effective

178
00:07:34,479 --> 00:07:36,240
if you look at how many tasks are

179
00:07:36,240 --> 00:07:39,039
executed by the fuzzer it's obvious that

180
00:07:39,039 --> 00:07:41,199
the sis vegas performs much more

181
00:07:41,199 --> 00:07:43,599
generation than the balinese's color

182
00:07:43,599 --> 00:07:46,000
we find that his vegas also capable of

183
00:07:46,000 --> 00:07:48,800
performing ten times more mutations this

184
00:07:48,800 --> 00:07:51,440
is because we see selection cis vegas

185
00:07:51,440 --> 00:07:53,599
favor seed program that takes shorter

186
00:07:53,599 --> 00:07:56,719
time to execute

187
00:07:57,440 --> 00:07:59,280
we then take a look at how the

188
00:07:59,280 --> 00:08:01,759
adversarial map algorithm behaves during

189
00:08:01,759 --> 00:08:03,440
the fuzzing process

190
00:08:03,440 --> 00:08:05,680
we see that with both c selection and

191
00:08:05,680 --> 00:08:08,560
test selection mab quickly decides that

192
00:08:08,560 --> 00:08:10,879
mutation is metal regeneration

193
00:08:10,879 --> 00:08:13,280
without c selection mutation is not

194
00:08:13,280 --> 00:08:16,000
effective as uh and maybe you actually

195
00:08:16,000 --> 00:08:18,000
go back to favoring generation from time

196
00:08:18,000 --> 00:08:19,280
to time

197
00:08:19,280 --> 00:08:22,000
when it comes to triad we found that the

198
00:08:22,000 --> 00:08:24,160
cis vegas gave it a very low priority

199
00:08:24,160 --> 00:08:26,639
for four to 10 hours

200
00:08:26,639 --> 00:08:29,280
and when trades do become available the

201
00:08:29,280 --> 00:08:32,080
mab is very quick to make the switch

202
00:08:32,080 --> 00:08:35,039
giving free absolute priority just like

203
00:08:35,039 --> 00:08:38,080
valence's color

204
00:08:39,279 --> 00:08:41,760
we then look and see programs generated

205
00:08:41,760 --> 00:08:44,640
by the fathers interesting we find that

206
00:08:44,640 --> 00:08:47,519
when star selection sis vegas generates

207
00:08:47,519 --> 00:08:50,320
land sees programs however the

208
00:08:50,320 --> 00:08:52,800
effectiveness of the seed program is

209
00:08:52,800 --> 00:08:58,160
much better comparing to bananas color

210
00:08:58,880 --> 00:09:00,560
finally we

211
00:09:00,560 --> 00:09:03,040
extend the fuzzing duration from one day

212
00:09:03,040 --> 00:09:04,399
to seven days

213
00:09:04,399 --> 00:09:06,560
we then find the city figures still

214
00:09:06,560 --> 00:09:08,560
capable of maintaining its lead overseas

215
00:09:08,560 --> 00:09:09,839
color

216
00:09:09,839 --> 00:09:12,399
also in practice fuzziness often

217
00:09:12,399 --> 00:09:14,240
performed with the starting seed

218
00:09:14,240 --> 00:09:17,360
corporate so we tested that as well

219
00:09:17,360 --> 00:09:19,839
our experiments shows that cyst vegas

220
00:09:19,839 --> 00:09:21,600
makes better use of the

221
00:09:21,600 --> 00:09:24,000
initials these corpus

222
00:09:24,000 --> 00:09:25,600
there are some other experiments we

223
00:09:25,600 --> 00:09:27,120
conducted this is not covering the

224
00:09:27,120 --> 00:09:31,120
presentation please check out paper

225
00:09:31,600 --> 00:09:33,760
we also collected the crashes found in

226
00:09:33,760 --> 00:09:35,839
the seven day experiment and finally

227
00:09:35,839 --> 00:09:38,640
says vegas can find more coverage more

228
00:09:38,640 --> 00:09:42,560
crashes thanks to its increased coverage

229
00:09:42,560 --> 00:09:44,880
unfortunately only a few can be reliably

230
00:09:44,880 --> 00:09:47,200
reproduced and at the time of making

231
00:09:47,200 --> 00:09:49,760
these slides all crashes are fixed in

232
00:09:49,760 --> 00:09:53,120
the latest linux kernel

233
00:09:53,200 --> 00:09:56,560
so we demonstrate that adversarial map

234
00:09:56,560 --> 00:09:58,560
works very well in kernel fuzzing

235
00:09:58,560 --> 00:10:00,720
despite not having a state of mission

236
00:10:00,720 --> 00:10:02,240
that the other more advanced

237
00:10:02,240 --> 00:10:04,399
reinforcement learning algorithms

238
00:10:04,399 --> 00:10:06,160
it can still adapt to the changing

239
00:10:06,160 --> 00:10:08,720
rewards very quickly and has a very low

240
00:10:08,720 --> 00:10:10,320
performance overhead

241
00:10:10,320 --> 00:10:13,839
which will measure at 2.1 percent

242
00:10:13,839 --> 00:10:17,279
mab assumes that the gambler does not

243
00:10:17,279 --> 00:10:20,320
know the internals of the slot machines

244
00:10:20,320 --> 00:10:22,880
but that's not necessarily the case in

245
00:10:22,880 --> 00:10:25,279
kernel fuzzing we can surely use some

246
00:10:25,279 --> 00:10:27,760
methods like static analysis in bulk

247
00:10:27,760 --> 00:10:30,640
execution to know the inner workings of

248
00:10:30,640 --> 00:10:33,519
the os kernel it will be an interesting

249
00:10:33,519 --> 00:10:35,600
future direction to combine mmb with

250
00:10:35,600 --> 00:10:37,600
these white box

251
00:10:37,600 --> 00:10:39,839
methods

252
00:10:39,839 --> 00:10:42,800
finally in our work we only applied the

253
00:10:42,800 --> 00:10:44,880
um two problems

254
00:10:44,880 --> 00:10:46,880
there are many other parameters in the

255
00:10:46,880 --> 00:10:48,720
sys culture that can benefit from

256
00:10:48,720 --> 00:10:50,959
learning based approaches such as the

257
00:10:50,959 --> 00:10:53,839
size of the program mutation operator

258
00:10:53,839 --> 00:10:55,440
choice etc

259
00:10:55,440 --> 00:10:58,000
this color team actually has a list in

260
00:10:58,000 --> 00:11:01,279
this link so feel free to take a try if

261
00:11:01,279 --> 00:11:04,160
you are interested

262
00:11:04,720 --> 00:11:07,600
in conclusion we identify opportunities

263
00:11:07,600 --> 00:11:10,240
to optimize this color we propose this

264
00:11:10,240 --> 00:11:12,640
vegas use reformed learning to

265
00:11:12,640 --> 00:11:15,360
dynamically improve the also finding new

266
00:11:15,360 --> 00:11:18,240
coverage we open source our code using

267
00:11:18,240 --> 00:11:19,680
the paper and

268
00:11:19,680 --> 00:11:22,160
making progress to upstream our work to

269
00:11:22,160 --> 00:11:24,399
this caller

270
00:11:24,399 --> 00:11:26,800
that concludes my presentation if you

271
00:11:26,800 --> 00:11:29,279
have any questions feel free to contact

272
00:11:29,279 --> 00:11:31,519
either me or my professor thank you very

273
00:11:31,519 --> 00:11:36,360
much for watching enjoy the conference

274
00:11:42,640 --> 00:11:44,720
you

