1
00:00:08,880 --> 00:00:09,760
hello

2
00:00:09,760 --> 00:00:11,759
my name is ansley lestern and i'm going

3
00:00:11,759 --> 00:00:14,000
to talk to you about our work backstack

4
00:00:14,000 --> 00:00:17,359
and authenticated call stack

5
00:00:17,359 --> 00:00:18,880
the problem we are addressing in this

6
00:00:18,880 --> 00:00:21,119
work is is control power attacks

7
00:00:21,119 --> 00:00:22,880
these are attacks that exploit memory

8
00:00:22,880 --> 00:00:24,560
vulnerabilities in order to alter the

9
00:00:24,560 --> 00:00:27,039
control flow of the program

10
00:00:27,039 --> 00:00:29,439
the traditional attack would be maybe

11
00:00:29,439 --> 00:00:30,640
that

12
00:00:30,640 --> 00:00:33,280
code injection attack when an attacker

13
00:00:33,280 --> 00:00:34,719
exploits a

14
00:00:34,719 --> 00:00:36,559
stack buffer in order to overflow it and

15
00:00:36,559 --> 00:00:39,680
they write shell code into the stack

16
00:00:39,680 --> 00:00:42,000
so just writing code is of course not

17
00:00:42,000 --> 00:00:43,600
not enough you also need to make that

18
00:00:43,600 --> 00:00:46,239
code to be executed and this is achieved

19
00:00:46,239 --> 00:00:48,399
by also corrupting the return address so

20
00:00:48,399 --> 00:00:49,920
that when the function returns it will

21
00:00:49,920 --> 00:00:51,440
actually return into the shell code and

22
00:00:51,440 --> 00:00:54,160
start executing it

23
00:00:54,160 --> 00:00:56,079
so the coding injection specifically is

24
00:00:56,079 --> 00:00:58,320
not not really viable anymore because

25
00:00:58,320 --> 00:01:01,039
modern defense explained that quite well

26
00:01:01,039 --> 00:01:03,840
however this control flow part part here

27
00:01:03,840 --> 00:01:05,760
that's still quite a useful technique

28
00:01:05,760 --> 00:01:08,159
and it's it's used by code reuse attacks

29
00:01:08,159 --> 00:01:09,840
when instead of injecting the code you

30
00:01:09,840 --> 00:01:11,520
actually reuse parts of the x already

31
00:01:11,520 --> 00:01:13,360
existing code in order to execute that

32
00:01:13,360 --> 00:01:16,880
in an attacker controlled order

33
00:01:16,880 --> 00:01:18,880
and it is specifically this returner is

34
00:01:18,880 --> 00:01:20,479
protection part that we want to address

35
00:01:20,479 --> 00:01:23,200
and fix

36
00:01:23,200 --> 00:01:24,960
so to achieve this we are using arm

37
00:01:24,960 --> 00:01:26,479
pointer authentication

38
00:01:26,479 --> 00:01:28,560
so this is our new hardware primitive in

39
00:01:28,560 --> 00:01:31,920
the arm cpu that allows approximation of

40
00:01:31,920 --> 00:01:34,159
pointer integrity

41
00:01:34,159 --> 00:01:36,960
so this is all uh to achieve by um

42
00:01:36,960 --> 00:01:39,200
adding new instructions that allow

43
00:01:39,200 --> 00:01:40,479
the the creation of message

44
00:01:40,479 --> 00:01:42,000
authentication calls that are embedded

45
00:01:42,000 --> 00:01:43,280
into the pointer so that when the

46
00:01:43,280 --> 00:01:44,880
pointer is loaded back from memory we

47
00:01:44,880 --> 00:01:46,159
can then verify that the message

48
00:01:46,159 --> 00:01:47,759
authentication code still match the

49
00:01:47,759 --> 00:01:50,960
address in that pointer

50
00:01:51,200 --> 00:01:53,200
this was introduced in arm

51
00:01:53,200 --> 00:01:56,079
8.3 a specification

52
00:01:56,079 --> 00:01:57,600
it's currently used

53
00:01:57,600 --> 00:02:00,320
by recent apple devices

54
00:02:00,320 --> 00:02:02,320
support on the software side is also

55
00:02:02,320 --> 00:02:04,960
already available in linux and by the

56
00:02:04,960 --> 00:02:09,158
gcc and client compilers

57
00:02:09,199 --> 00:02:12,000
so the the pack itself that's stored in

58
00:02:12,000 --> 00:02:14,239
the pointer itself and and now you might

59
00:02:14,239 --> 00:02:16,480
ask that how this is done so this is

60
00:02:16,480 --> 00:02:18,400
possible because the address of a

61
00:02:18,400 --> 00:02:20,239
pointer is typically less than the 64

62
00:02:20,239 --> 00:02:22,640
bits that the point array occupies so on

63
00:02:22,640 --> 00:02:24,959
a typical ubuntu arm installation that

64
00:02:24,959 --> 00:02:26,720
might leave 16 bits

65
00:02:26,720 --> 00:02:28,400
for storing the

66
00:02:28,400 --> 00:02:31,680
pointer authentication code

67
00:02:31,840 --> 00:02:35,440
how this is calculated is is by using a

68
00:02:35,440 --> 00:02:37,519
tweakable kid mac

69
00:02:37,519 --> 00:02:39,920
which texas inputs the the address of

70
00:02:39,920 --> 00:02:42,080
the pointer naturally but then also a

71
00:02:42,080 --> 00:02:44,239
64-bit modifier that's that's given by

72
00:02:44,239 --> 00:02:46,319
the instrumentation

73
00:02:46,319 --> 00:02:48,239
and finally a

74
00:02:48,239 --> 00:02:51,200
128 bit key that they store in a

75
00:02:51,200 --> 00:02:53,280
configuration register

76
00:02:53,280 --> 00:02:54,879
so linux for instance the kernel would

77
00:02:54,879 --> 00:02:56,480
set these keys for each process and then

78
00:02:56,480 --> 00:02:58,000
the process will just use them without

79
00:02:58,000 --> 00:03:01,920
being able to modify the keys themselves

80
00:03:01,920 --> 00:03:03,599
so we know that message authentication

81
00:03:03,599 --> 00:03:06,239
calls are vulnerable to replay attacks

82
00:03:06,239 --> 00:03:07,680
and it turns out that the same attacks

83
00:03:07,680 --> 00:03:10,560
also work on pointer authentication

84
00:03:10,560 --> 00:03:12,640
so an example here we will look at the

85
00:03:12,640 --> 00:03:14,959
instrumentation used by gcclang to

86
00:03:14,959 --> 00:03:17,200
protect the returners

87
00:03:17,200 --> 00:03:18,800
so what happens when function one is

88
00:03:18,800 --> 00:03:20,720
called that we have this the first thing

89
00:03:20,720 --> 00:03:22,800
that happens is this pack ia instruction

90
00:03:22,800 --> 00:03:25,040
which is used to sign the return address

91
00:03:25,040 --> 00:03:26,480
which in this case would be stored in

92
00:03:26,480 --> 00:03:28,879
the link register lr

93
00:03:28,879 --> 00:03:30,959
and then in this instrumentation the

94
00:03:30,959 --> 00:03:32,640
stack pointer value is going to be used

95
00:03:32,640 --> 00:03:34,799
as a modifier so this would be the value

96
00:03:34,799 --> 00:03:36,959
of sp

97
00:03:36,959 --> 00:03:38,799
unfortunately the stack is growing and

98
00:03:38,799 --> 00:03:40,640
shrinking at runtime so that value might

99
00:03:40,640 --> 00:03:42,640
actually repeat

100
00:03:42,640 --> 00:03:44,959
knowing this the attacker might

101
00:03:44,959 --> 00:03:47,599
read out and store the current signed

102
00:03:47,599 --> 00:03:50,080
return address here in function one

103
00:03:50,080 --> 00:03:53,200
and then allow execution to continue

104
00:03:53,200 --> 00:03:54,560
and you know function two we will see

105
00:03:54,560 --> 00:03:56,799
that again similar instrumentation code

106
00:03:56,799 --> 00:03:59,120
but again signs that the current return

107
00:03:59,120 --> 00:04:00,879
address here using the stack pointer

108
00:04:00,879 --> 00:04:01,920
value

109
00:04:01,920 --> 00:04:03,200
but the problem here is now that the

110
00:04:03,200 --> 00:04:04,720
stack pointer value is going to be the

111
00:04:04,720 --> 00:04:07,360
same as previously

112
00:04:07,360 --> 00:04:08,879
knowing this the attacker can just

113
00:04:08,879 --> 00:04:11,519
inject the load value of the stack and

114
00:04:11,519 --> 00:04:13,840
cause the program to incorrectly return

115
00:04:13,840 --> 00:04:16,959
to the other calls

116
00:04:16,959 --> 00:04:19,358
and this is the problem we want to to

117
00:04:19,358 --> 00:04:20,959
prevent in the context of pointer

118
00:04:20,959 --> 00:04:23,680
authentication

119
00:04:24,400 --> 00:04:27,040
our main idea is that we use uh

120
00:04:27,040 --> 00:04:29,040
instead of relying on just one static

121
00:04:29,040 --> 00:04:31,120
modifier or something so a local

122
00:04:31,120 --> 00:04:33,199
modifier with a chain back off of

123
00:04:33,199 --> 00:04:36,400
cryptographically bound return addresses

124
00:04:36,400 --> 00:04:38,400
so in a sense all the returners that we

125
00:04:38,400 --> 00:04:39,840
have at any time in the stack are all

126
00:04:39,840 --> 00:04:43,840
cryptographically bounding to each other

127
00:04:44,720 --> 00:04:46,720
so practice that chain would look

128
00:04:46,720 --> 00:04:48,800
something like this so on the left here

129
00:04:48,800 --> 00:04:50,960
you see see what would happen in the

130
00:04:50,960 --> 00:04:52,639
first kind of function call

131
00:04:52,639 --> 00:04:54,880
call where we just bootstrap in a sense

132
00:04:54,880 --> 00:04:56,960
the chain with one value zero in this

133
00:04:56,960 --> 00:05:00,479
case and then all subsequent returners

134
00:05:00,479 --> 00:05:02,000
and authentication tokens are then

135
00:05:02,000 --> 00:05:04,880
generated by using the previous one as a

136
00:05:04,880 --> 00:05:07,919
as a modifier

137
00:05:08,880 --> 00:05:09,840
and

138
00:05:09,840 --> 00:05:12,320
what's more we reserve one one register

139
00:05:12,320 --> 00:05:14,320
so that we can use that to securely

140
00:05:14,320 --> 00:05:16,960
store always the top most um topmost

141
00:05:16,960 --> 00:05:18,320
authentication token and this

142
00:05:18,320 --> 00:05:19,919
authentication token now is then

143
00:05:19,919 --> 00:05:22,080
specific to this whole call chain that

144
00:05:22,080 --> 00:05:24,080
we have uh have a currently active in

145
00:05:24,080 --> 00:05:26,000
the program and when we need to unwind

146
00:05:26,000 --> 00:05:27,440
the stack we can always use this top

147
00:05:27,440 --> 00:05:30,000
most value to to securely verify and

148
00:05:30,000 --> 00:05:31,520
retrieve the previous one from from

149
00:05:31,520 --> 00:05:33,840
memory and then of course update it into

150
00:05:33,840 --> 00:05:34,800
the same

151
00:05:34,800 --> 00:05:38,360
register again

152
00:05:38,400 --> 00:05:40,800
and this quite quite nicely prevents

153
00:05:40,800 --> 00:05:42,479
reduced attacks and allows us to do very

154
00:05:42,479 --> 00:05:46,320
precise verification of returns

155
00:05:46,960 --> 00:05:48,800
so using a chain mac and securely

156
00:05:48,800 --> 00:05:50,880
storing the topmost token quite nicely

157
00:05:50,880 --> 00:05:53,039
prevents these typical reuse attacks

158
00:05:53,039 --> 00:05:55,120
that we looked at earlier

159
00:05:55,120 --> 00:05:57,199
so considering this call graph here in

160
00:05:57,199 --> 00:05:58,240
the picture

161
00:05:58,240 --> 00:06:01,520
we could consider a specific

162
00:06:01,520 --> 00:06:03,600
flow through it that goes from ac to the

163
00:06:03,600 --> 00:06:05,120
loader

164
00:06:05,120 --> 00:06:07,360
at this point the whole chain now

165
00:06:07,360 --> 00:06:09,680
incorporates the specific path

166
00:06:09,680 --> 00:06:11,360
through the program

167
00:06:11,360 --> 00:06:13,840
uh preventing reuse attacks off of

168
00:06:13,840 --> 00:06:14,800
specific

169
00:06:14,800 --> 00:06:17,520
return points in the chain

170
00:06:17,520 --> 00:06:19,759
um what's what's more the top most value

171
00:06:19,759 --> 00:06:21,120
is going to be in this register so the

172
00:06:21,120 --> 00:06:22,800
attacker can't it can't do anything to

173
00:06:22,800 --> 00:06:24,720
try to corrupt that

174
00:06:24,720 --> 00:06:26,800
unfortunately there might be collisions

175
00:06:26,800 --> 00:06:28,960
in in a chain that allows an attacker to

176
00:06:28,960 --> 00:06:30,960
corrupt previous values on the stack

177
00:06:30,960 --> 00:06:33,120
that of course are corruptible because

178
00:06:33,120 --> 00:06:35,520
they are in memory

179
00:06:35,520 --> 00:06:37,039
so in this example

180
00:06:37,039 --> 00:06:38,960
we could consider another

181
00:06:38,960 --> 00:06:41,840
control flow path through b c and again

182
00:06:41,840 --> 00:06:44,319
to the loader such that all of the

183
00:06:44,319 --> 00:06:46,639
changes are different the topmost value

184
00:06:46,639 --> 00:06:48,319
might actually end up due due to a

185
00:06:48,319 --> 00:06:50,080
collision having the same authentication

186
00:06:50,080 --> 00:06:51,199
token

187
00:06:51,199 --> 00:06:53,120
and this then would allow the attacker

188
00:06:53,120 --> 00:06:54,479
now to to

189
00:06:54,479 --> 00:06:57,199
replace the the correct chain from c to

190
00:06:57,199 --> 00:06:58,560
a with a

191
00:06:58,560 --> 00:07:02,400
chain from c to b

192
00:07:02,400 --> 00:07:04,400
in isolation this is a

193
00:07:04,400 --> 00:07:06,160
relatively weak attack because you have

194
00:07:06,160 --> 00:07:08,080
to replace the whole chain but nothing

195
00:07:08,080 --> 00:07:10,479
would prevent an attacker from just uh

196
00:07:10,479 --> 00:07:11,840
repeating this attack and finding

197
00:07:11,840 --> 00:07:13,520
multiple collisions so that that again

198
00:07:13,520 --> 00:07:16,319
can do many of these false kind of forks

199
00:07:16,319 --> 00:07:19,759
in the chain when going backward

200
00:07:20,720 --> 00:07:22,240
so what's worse is that the pack

201
00:07:22,240 --> 00:07:24,720
collisions actually turn out to happen

202
00:07:24,720 --> 00:07:26,400
surprisingly often

203
00:07:26,400 --> 00:07:29,840
so for a 16 bit pack it only after 321

204
00:07:29,840 --> 00:07:31,039
uh

205
00:07:31,039 --> 00:07:32,880
the address is observed it is already

206
00:07:32,880 --> 00:07:34,720
likely that that collisions will be

207
00:07:34,720 --> 00:07:37,039
found

208
00:07:37,039 --> 00:07:38,960
and this is also a problem inherently

209
00:07:38,960 --> 00:07:41,120
that's the size of the pack so there's

210
00:07:41,120 --> 00:07:43,039
not much much we can directly do about

211
00:07:43,039 --> 00:07:44,400
this problem

212
00:07:44,400 --> 00:07:46,240
but what we realized is that we can

213
00:07:46,240 --> 00:07:48,000
prevent the attacker from recognizing

214
00:07:48,000 --> 00:07:50,319
these collisions yeah

215
00:07:50,319 --> 00:07:52,319
in essence this means that an attack

216
00:07:52,319 --> 00:07:53,520
that otherwise could always be

217
00:07:53,520 --> 00:07:55,120
deterministically successful by just

218
00:07:55,120 --> 00:07:56,479
finding the collision the attacker is

219
00:07:56,479 --> 00:08:00,878
again reduced to two guessing attacks

220
00:08:00,960 --> 00:08:02,800
and what's what's nice is also that we

221
00:08:02,800 --> 00:08:04,319
realize that we can use the same pointer

222
00:08:04,319 --> 00:08:05,840
authentication hardware to generate

223
00:08:05,840 --> 00:08:09,840
masks for hiding these collisions

224
00:08:11,120 --> 00:08:12,960
so one interesting aspect of point

225
00:08:12,960 --> 00:08:15,120
authentication based schemes is that

226
00:08:15,120 --> 00:08:17,360
they are can be analyzed as a crypto

227
00:08:17,360 --> 00:08:18,560
protocols

228
00:08:18,560 --> 00:08:20,479
so in the paper we actually approve a

229
00:08:20,479 --> 00:08:22,639
second security reduction for pak stack

230
00:08:22,639 --> 00:08:24,800
to the collision resistance of the fact

231
00:08:24,800 --> 00:08:26,879
primitive itself

232
00:08:26,879 --> 00:08:27,759
and

233
00:08:27,759 --> 00:08:30,160
this is uh also had some practical

234
00:08:30,160 --> 00:08:31,840
implications for our kind of

235
00:08:31,840 --> 00:08:33,519
implementation work

236
00:08:33,519 --> 00:08:34,958
because essentially

237
00:08:34,958 --> 00:08:37,120
by undertaking these efforts of

238
00:08:37,120 --> 00:08:39,440
constructing this proof we realized that

239
00:08:39,440 --> 00:08:40,880
we had the escalation problem in the

240
00:08:40,880 --> 00:08:42,799
first place so without trying to do this

241
00:08:42,799 --> 00:08:44,560
these proofs we would never have even

242
00:08:44,560 --> 00:08:46,560
realized that we need to do the masking

243
00:08:46,560 --> 00:08:48,160
that would then implement that that

244
00:08:48,160 --> 00:08:51,439
nonshot to be secure

245
00:08:53,519 --> 00:08:55,920
uh we benchmark the pack stack using the

246
00:08:55,920 --> 00:09:00,080
c language benchmarks from spec cp 2017.

247
00:09:00,080 --> 00:09:02,480
we compared it both with and without

248
00:09:02,480 --> 00:09:04,320
masking to the

249
00:09:04,320 --> 00:09:06,640
software only

250
00:09:06,640 --> 00:09:08,880
shadow call stacks from from llbm also

251
00:09:08,880 --> 00:09:09,839
to the

252
00:09:09,839 --> 00:09:11,440
pointer authentication return address

253
00:09:11,440 --> 00:09:13,200
protection what we looked at earlier and

254
00:09:13,200 --> 00:09:14,560
finally to

255
00:09:14,560 --> 00:09:15,680
to the

256
00:09:15,680 --> 00:09:18,560
stack canaries

257
00:09:18,560 --> 00:09:20,880
and the overheads in general work were

258
00:09:20,880 --> 00:09:22,560
quite quite small and comparable to the

259
00:09:22,560 --> 00:09:24,399
other schemes with

260
00:09:24,399 --> 00:09:26,240
with masking incurring

261
00:09:26,240 --> 00:09:27,920
uh three percent overhead and without

262
00:09:27,920 --> 00:09:31,760
masking about one percent of ore

263
00:09:32,480 --> 00:09:34,080
so with backstack we have shown that we

264
00:09:34,080 --> 00:09:35,680
can use pointer authentication to

265
00:09:35,680 --> 00:09:37,760
achieve security quite comparable to

266
00:09:37,760 --> 00:09:39,279
shadow stacks

267
00:09:39,279 --> 00:09:41,360
i think this is a nice example of how we

268
00:09:41,360 --> 00:09:43,279
can use these relatively general purpose

269
00:09:43,279 --> 00:09:44,880
mechanisms to achieve kind of new

270
00:09:44,880 --> 00:09:47,279
non-obvious security properties but i

271
00:09:47,279 --> 00:09:49,120
also hope that this will not be the only

272
00:09:49,120 --> 00:09:52,160
example of this in particular now with

273
00:09:52,160 --> 00:09:54,000
both arm and others coming up with quite

274
00:09:54,000 --> 00:09:56,480
quite a lot of these new and exciting

275
00:09:56,480 --> 00:09:58,160
runtime security

276
00:09:58,160 --> 00:10:01,519
mechanisms in their hardware

277
00:10:02,320 --> 00:10:04,480
all of our our source code is is

278
00:10:04,480 --> 00:10:06,480
open source and publicly available you

279
00:10:06,480 --> 00:10:09,120
see the git link here and i'm i'm also

280
00:10:09,120 --> 00:10:10,959
happy to answer any questions you might

281
00:10:10,959 --> 00:10:13,279
have in in a potential q a session here

282
00:10:13,279 --> 00:10:16,959
or or via email or twitter later

283
00:10:16,959 --> 00:10:19,200
well thank you for

284
00:10:19,200 --> 00:10:22,360
your attention

