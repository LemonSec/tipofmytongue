1
00:00:11,040 --> 00:00:14,000
hello my name is daniel perez

2
00:00:14,000 --> 00:00:14,960
and

3
00:00:14,960 --> 00:00:17,119
today i am going to present you

4
00:00:17,119 --> 00:00:19,600
smartrock vulnerabilities vulnerable

5
00:00:19,600 --> 00:00:22,080
does not imply exploited

6
00:00:22,080 --> 00:00:24,880
uh this is a joint work uh with benjamin

7
00:00:24,880 --> 00:00:26,880
levchetts

8
00:00:26,880 --> 00:00:31,039
and uh so first um just to get everyone

9
00:00:31,039 --> 00:00:33,520
up to speed a very small

10
00:00:33,520 --> 00:00:37,760
um background about uh smart contracts

11
00:00:37,760 --> 00:00:39,760
um so easy and back and rights are

12
00:00:39,760 --> 00:00:42,239
basically uh small programs are deployed

13
00:00:42,239 --> 00:00:44,399
on the eastern blockchain

14
00:00:44,399 --> 00:00:45,920
they are typically written in a

15
00:00:45,920 --> 00:00:49,200
high-level programming language

16
00:00:49,360 --> 00:00:52,000
typically solidity which is a

17
00:00:52,000 --> 00:00:53,840
most used one

18
00:00:53,840 --> 00:00:56,840
and they're compiled down into

19
00:00:56,840 --> 00:00:59,359
bytecode designed to run on the ethereum

20
00:00:59,359 --> 00:01:02,960
virtual machine which we call user evm

21
00:01:02,960 --> 00:01:05,600
and this is really a simple um stack

22
00:01:05,600 --> 00:01:08,400
based byte code with regular

23
00:01:08,400 --> 00:01:11,119
instructions such as ads

24
00:01:11,119 --> 00:01:12,720
these arithmetics

25
00:01:12,720 --> 00:01:15,680
and also um some more blockchain related

26
00:01:15,680 --> 00:01:17,360
type of instructions

27
00:01:17,360 --> 00:01:19,759
such as variable call which allows a

28
00:01:19,759 --> 00:01:21,680
contract to call into another smart

29
00:01:21,680 --> 00:01:23,759
contract

30
00:01:23,759 --> 00:01:26,880
and so how's this work is that um once a

31
00:01:26,880 --> 00:01:29,439
user compiles his code down to this evm

32
00:01:29,439 --> 00:01:32,880
by code he can send a transaction

33
00:01:32,880 --> 00:01:34,799
containing his bytecode this will be

34
00:01:34,799 --> 00:01:35,920
deployed

35
00:01:35,920 --> 00:01:38,079
to a new address on chain

36
00:01:38,079 --> 00:01:40,000
and then other users can interact with

37
00:01:40,000 --> 00:01:41,200
this

38
00:01:41,200 --> 00:01:42,960
program by sending transactions to this

39
00:01:42,960 --> 00:01:45,520
particular address

40
00:01:45,520 --> 00:01:48,799
and so well these are great and uh they

41
00:01:48,799 --> 00:01:50,399
allow to do a lot of things but

42
00:01:50,399 --> 00:01:52,079
obviously there um

43
00:01:52,079 --> 00:01:54,320
there are a lot of problems uh security

44
00:01:54,320 --> 00:01:56,399
problems that come with this

45
00:01:56,399 --> 00:01:58,560
and these are now a bit old but they're

46
00:01:58,560 --> 00:02:00,320
like fairly big hacks that happened in

47
00:02:00,320 --> 00:02:02,240
the early days of all these smart

48
00:02:02,240 --> 00:02:03,520
contracts

49
00:02:03,520 --> 00:02:06,320
so the dow hack was um one of the most

50
00:02:06,320 --> 00:02:08,878
important ones even up to this day

51
00:02:08,878 --> 00:02:11,360
where an attacker um seoul

52
00:02:11,360 --> 00:02:12,480
stole

53
00:02:12,480 --> 00:02:14,160
roughly 15 million

54
00:02:14,160 --> 00:02:16,959
dollars worth of money

55
00:02:16,959 --> 00:02:19,280
and at this point as a price of east

56
00:02:19,280 --> 00:02:21,599
half then there was a

57
00:02:21,599 --> 00:02:23,040
whole

58
00:02:23,040 --> 00:02:26,080
debacle in the eastern community

59
00:02:26,080 --> 00:02:27,760
and as this was used

60
00:02:27,760 --> 00:02:30,080
this was exploited using a fairly

61
00:02:30,080 --> 00:02:31,280
well-known

62
00:02:31,280 --> 00:02:33,680
vulnerability that's called re-infancy

63
00:02:33,680 --> 00:02:34,800
and

64
00:02:34,800 --> 00:02:36,560
one year later there was also i mean

65
00:02:36,560 --> 00:02:38,400
there had been a couple others too but

66
00:02:38,400 --> 00:02:40,239
another very big

67
00:02:40,239 --> 00:02:41,360
um

68
00:02:41,360 --> 00:02:43,280
hack or rather bugs and hack for this

69
00:02:43,280 --> 00:02:44,080
one

70
00:02:44,080 --> 00:02:46,800
where a wallet which was designed as a

71
00:02:46,800 --> 00:02:49,360
library on which many contracts

72
00:02:49,360 --> 00:02:52,080
relied upon

73
00:02:52,080 --> 00:02:54,000
has been removed

74
00:02:54,000 --> 00:02:55,920
from the blockchain due to a bug so the

75
00:02:55,920 --> 00:02:57,519
contract was just not there anymore and

76
00:02:57,519 --> 00:02:59,440
also dependent contracts became

77
00:02:59,440 --> 00:03:01,920
completely unable to uh move their funds

78
00:03:01,920 --> 00:03:03,360
which froze

79
00:03:03,360 --> 00:03:05,200
roughly at this stage at this point in

80
00:03:05,200 --> 00:03:07,599
time 280 millions

81
00:03:07,599 --> 00:03:10,560
dollars worth of funds

82
00:03:10,560 --> 00:03:12,879
which are still uh frozen

83
00:03:12,879 --> 00:03:16,480
right now unlocked uh up to this day

84
00:03:16,480 --> 00:03:18,879
and so um well

85
00:03:18,879 --> 00:03:21,200
both of these uh relied on some known

86
00:03:21,200 --> 00:03:23,280
vulnerabilities and here we will in this

87
00:03:23,280 --> 00:03:26,159
paper we focused on a couple of this uh

88
00:03:26,159 --> 00:03:28,000
fairly well known one so i will just

89
00:03:28,000 --> 00:03:30,360
briefly introduce each of them so

90
00:03:30,360 --> 00:03:33,840
reentrancy um is basically

91
00:03:33,840 --> 00:03:35,680
uh contracts that are uh not really

92
00:03:35,680 --> 00:03:38,799
designed to be uh executed in a in a

93
00:03:38,799 --> 00:03:40,400
re-entrant way

94
00:03:40,400 --> 00:03:43,519
and uh because for example their state

95
00:03:43,519 --> 00:03:45,280
and tracking balances resourcing might

96
00:03:45,280 --> 00:03:47,599
not be updated properly uh if it's uh

97
00:03:47,599 --> 00:03:50,159
called an irregular manner uh you an

98
00:03:50,159 --> 00:03:53,200
attacker can use this to raise funds

99
00:03:53,200 --> 00:03:55,120
and then we have unheld and exceptions

100
00:03:55,120 --> 00:03:57,519
where um a contract might not check

101
00:03:57,519 --> 00:04:00,879
properly whether a call he made was uh

102
00:04:00,879 --> 00:04:03,200
successful or not and this can result in

103
00:04:03,200 --> 00:04:05,920
funds loss being lost or stolen

104
00:04:05,920 --> 00:04:07,760
um then the one we just saw is the

105
00:04:07,760 --> 00:04:09,360
parity wallet bugs that's a dependency

106
00:04:09,360 --> 00:04:10,959
on destructive contract where the fund

107
00:04:10,959 --> 00:04:12,799
can uh end up being completely locked

108
00:04:12,799 --> 00:04:14,640
because there is no way to move them

109
00:04:14,640 --> 00:04:16,399
except by relying on this contract which

110
00:04:16,399 --> 00:04:18,399
does not exist anymore

111
00:04:18,399 --> 00:04:20,160
then there is transactional dependency

112
00:04:20,160 --> 00:04:22,400
so this is a problem where uh reordering

113
00:04:22,400 --> 00:04:23,759
some transactions

114
00:04:23,759 --> 00:04:25,360
might um

115
00:04:25,360 --> 00:04:27,360
cause the outcome to be different

116
00:04:27,360 --> 00:04:28,800
and it might allow some attacker to

117
00:04:28,800 --> 00:04:30,400
manipulate prices for example or to

118
00:04:30,400 --> 00:04:32,960
front running or this sort of things

119
00:04:32,960 --> 00:04:33,840
uh

120
00:04:33,840 --> 00:04:35,680
then integer overflow happens quite

121
00:04:35,680 --> 00:04:38,960
often uh in this eastern context simply

122
00:04:38,960 --> 00:04:41,120
because these are not checked by the vm

123
00:04:41,120 --> 00:04:43,919
and this can go uh silently goes through

124
00:04:43,919 --> 00:04:46,000
silently and results in different

125
00:04:46,000 --> 00:04:48,000
problems depending on how what exactly

126
00:04:48,000 --> 00:04:49,600
happened

127
00:04:49,600 --> 00:04:51,600
and finally unrestricted actions this is

128
00:04:51,600 --> 00:04:53,520
more like a permission problem where an

129
00:04:53,520 --> 00:04:56,000
attacker might be able to to steal funds

130
00:04:56,000 --> 00:04:57,600
or like to for example destroy a

131
00:04:57,600 --> 00:05:00,320
contract without being explicitly uh

132
00:05:00,320 --> 00:05:02,240
allowed to

133
00:05:02,240 --> 00:05:05,680
so to prevent all these bugs um and to

134
00:05:05,680 --> 00:05:07,680
help developers build safer contracts a

135
00:05:07,680 --> 00:05:10,880
lot of tools have been developed

136
00:05:10,880 --> 00:05:13,280
and this is for example a tool called

137
00:05:13,280 --> 00:05:15,840
securify which has been developing two

138
00:05:15,840 --> 00:05:17,680
three years ago or so

139
00:05:17,680 --> 00:05:19,280
um

140
00:05:19,280 --> 00:05:21,440
and which checks for most of these

141
00:05:21,440 --> 00:05:23,360
unknown patterns i think almost all of

142
00:05:23,360 --> 00:05:25,039
the ones i presented in the previous

143
00:05:25,039 --> 00:05:26,160
slide

144
00:05:26,160 --> 00:05:27,759
and they have also this very nice ui

145
00:05:27,759 --> 00:05:29,440
where they can tell someone for example

146
00:05:29,440 --> 00:05:32,080
here that um this skill function is not

147
00:05:32,080 --> 00:05:34,000
safe because anybody can call it and it

148
00:05:34,000 --> 00:05:35,840
would disrupt the contract

149
00:05:35,840 --> 00:05:36,639
um

150
00:05:36,639 --> 00:05:38,800
and also sends funds to the user calling

151
00:05:38,800 --> 00:05:40,639
this and obviously this is a bit of

152
00:05:40,639 --> 00:05:43,440
trivial example but um

153
00:05:43,440 --> 00:05:45,600
it allows developers to to check for all

154
00:05:45,600 --> 00:05:46,479
these

155
00:05:46,479 --> 00:05:48,720
uh potential issues and to fix them

156
00:05:48,720 --> 00:05:52,639
before um it becomes a real problem so

157
00:05:52,639 --> 00:05:55,440
um when we first started working started

158
00:05:55,440 --> 00:05:56,960
working on this paper we saw that there

159
00:05:56,960 --> 00:05:58,639
were a lot of tools arriving all these

160
00:05:58,639 --> 00:05:59,919
contracts

161
00:05:59,919 --> 00:06:02,240
um and that according to many of the

162
00:06:02,240 --> 00:06:04,400
reports there were hundreds and hundreds

163
00:06:04,400 --> 00:06:06,800
of millions worth of dollars at risk

164
00:06:06,800 --> 00:06:09,199
that could be exploited any time

165
00:06:09,199 --> 00:06:10,000
but

166
00:06:10,000 --> 00:06:11,919
we did not really see that much

167
00:06:11,919 --> 00:06:14,080
exploitation in the world

168
00:06:14,080 --> 00:06:16,160
and obviously there were so few hacks

169
00:06:16,160 --> 00:06:17,680
here and there but nothing really

170
00:06:17,680 --> 00:06:20,639
anywhere close to to the amounts claimed

171
00:06:20,639 --> 00:06:22,880
and despite there's this couple of very

172
00:06:22,880 --> 00:06:24,880
big exploits like we couldn't really

173
00:06:24,880 --> 00:06:27,280
find the numbers just didn't match

174
00:06:27,280 --> 00:06:29,680
much so uh in this paper what we tried

175
00:06:29,680 --> 00:06:32,560
to do is just to see exactly but exactly

176
00:06:32,560 --> 00:06:34,560
but at least roughly like what is the

177
00:06:34,560 --> 00:06:38,400
actual exploitation on ethereum and so

178
00:06:38,400 --> 00:06:41,039
uh at this point so now it's a bit

179
00:06:41,039 --> 00:06:41,840
uh

180
00:06:41,840 --> 00:06:43,280
getting a slightly old because this has

181
00:06:43,280 --> 00:06:45,759
been first pre-printed in 2019 early

182
00:06:45,759 --> 00:06:48,319
2019 and we did update a bit of numbers

183
00:06:48,319 --> 00:06:50,639
since then but at this point like it did

184
00:06:50,639 --> 00:06:52,400
give us a fairly good idea of like how

185
00:06:52,400 --> 00:06:55,759
much excellent quotation was going on

186
00:06:55,759 --> 00:06:58,639
and um so to do this first we um

187
00:06:58,639 --> 00:07:00,479
contacted the authors of all these

188
00:07:00,479 --> 00:07:02,479
different tools

189
00:07:02,479 --> 00:07:05,599
and um so five of these authors were

190
00:07:05,599 --> 00:07:07,120
kind enough to provide us with their

191
00:07:07,120 --> 00:07:10,000
data set and all the contracts that they

192
00:07:10,000 --> 00:07:12,800
found would be essentially vulnerable

193
00:07:12,800 --> 00:07:14,720
and we found out that at the time of the

194
00:07:14,720 --> 00:07:16,560
reports that would have been in total

195
00:07:16,560 --> 00:07:19,039
roughly three million ease at stake so

196
00:07:19,039 --> 00:07:20,720
that's especially with the current price

197
00:07:20,720 --> 00:07:23,120
of is really quite a lot of money uh

198
00:07:23,120 --> 00:07:26,639
roughly like six billion dollars

199
00:07:26,960 --> 00:07:30,400
and so two um

200
00:07:30,400 --> 00:07:32,479
try to see whether these contracts have

201
00:07:32,479 --> 00:07:35,520
actually been exploited or not at all

202
00:07:35,520 --> 00:07:37,440
what we did is that we first

203
00:07:37,440 --> 00:07:39,840
looked at all these contracts we

204
00:07:39,840 --> 00:07:41,599
fetch all the transactions that have

205
00:07:41,599 --> 00:07:42,960
possibly

206
00:07:42,960 --> 00:07:44,479
touch these contracts directly or

207
00:07:44,479 --> 00:07:45,759
indirectly

208
00:07:45,759 --> 00:07:47,039
then we

209
00:07:47,039 --> 00:07:49,280
got all the execution traces

210
00:07:49,280 --> 00:07:50,080
so

211
00:07:50,080 --> 00:07:51,840
which means that every single

212
00:07:51,840 --> 00:07:53,759
instruction that this contract has ever

213
00:07:53,759 --> 00:07:56,400
executed we fetch this

214
00:07:56,400 --> 00:07:59,520
and uh we encoded all these instructions

215
00:07:59,520 --> 00:08:02,319
in some more structured

216
00:08:02,319 --> 00:08:04,319
uh data log database

217
00:08:04,319 --> 00:08:07,280
and then we crafted some um data queries

218
00:08:07,280 --> 00:08:08,720
to try to find the different

219
00:08:08,720 --> 00:08:11,680
vulnerabilities that we mentioned

220
00:08:11,680 --> 00:08:12,800
previously

221
00:08:12,800 --> 00:08:14,960
so to give a brief idea of what this

222
00:08:14,960 --> 00:08:16,560
could look like so for example for the

223
00:08:16,560 --> 00:08:19,360
reinferency which

224
00:08:19,360 --> 00:08:21,440
given the nature of ethereum will always

225
00:08:21,440 --> 00:08:23,440
be some sort of

226
00:08:23,440 --> 00:08:25,360
mutually recursive call

227
00:08:25,360 --> 00:08:28,000
and what we did

228
00:08:28,000 --> 00:08:29,919
is simply check for all the call and

229
00:08:29,919 --> 00:08:31,919
check whether directly or indirectly

230
00:08:31,919 --> 00:08:34,080
there were any chance remember if a call

231
00:08:34,080 --> 00:08:35,839
b

232
00:08:35,839 --> 00:08:37,519
if contract a called contract b that you

233
00:08:37,519 --> 00:08:39,839
contract b could possibly call back into

234
00:08:39,839 --> 00:08:41,599
contract a

235
00:08:41,599 --> 00:08:43,120
and this is expressed fairly simply in

236
00:08:43,120 --> 00:08:44,959
data logs so this is a

237
00:08:44,959 --> 00:08:46,320
quite simplified version of what we

238
00:08:46,320 --> 00:08:48,320
actually use to detect this

239
00:08:48,320 --> 00:08:51,040
um and we wrote like this type of rules

240
00:08:51,040 --> 00:08:52,560
all of others and i'll just

241
00:08:52,560 --> 00:08:54,800
briefly introduce them for unhello

242
00:08:54,800 --> 00:08:56,880
exceptions we first checked whether

243
00:08:56,880 --> 00:08:59,440
there was any call that actually failed

244
00:08:59,440 --> 00:09:02,240
uh and if this called never influenced

245
00:09:02,240 --> 00:09:05,920
any uh condition any so

246
00:09:05,920 --> 00:09:08,320
any execution pass well then it would

247
00:09:08,320 --> 00:09:10,240
mean that this has not been checked

248
00:09:10,240 --> 00:09:12,240
properly and this would result in this

249
00:09:12,240 --> 00:09:13,760
and handle exception

250
00:09:13,760 --> 00:09:16,320
or for example for integer overflow

251
00:09:16,320 --> 00:09:20,000
we uh first try to um

252
00:09:20,000 --> 00:09:23,440
infer that the actual type of um the

253
00:09:23,440 --> 00:09:25,040
variable touch given that the whole by

254
00:09:25,040 --> 00:09:26,720
code is completely untyped

255
00:09:26,720 --> 00:09:28,320
we need to use some sort of heuristic a

256
00:09:28,320 --> 00:09:30,399
bit to do this for example if there is

257
00:09:30,399 --> 00:09:31,600
something to change the sign we can

258
00:09:31,600 --> 00:09:33,040
assume that the sign integer and then

259
00:09:33,040 --> 00:09:35,680
sign one and then once we infer this

260
00:09:35,680 --> 00:09:38,160
type we um could

261
00:09:38,160 --> 00:09:39,760
uh compare the type result in the

262
00:09:39,760 --> 00:09:41,680
untyped result and see if they were uh

263
00:09:41,680 --> 00:09:44,800
consistent or not and

264
00:09:44,800 --> 00:09:46,959
so using this approach and uh it's worth

265
00:09:46,959 --> 00:09:49,120
noting that we're checking for um

266
00:09:49,120 --> 00:09:51,440
difference in ease amounts here we were

267
00:09:51,440 --> 00:09:53,600
not at that time like the d5 space was

268
00:09:53,600 --> 00:09:55,839
not like uh yet established enough to

269
00:09:55,839 --> 00:09:58,160
check for all the erc and other uh

270
00:09:58,160 --> 00:10:00,560
tokens but at least in terms of ease at

271
00:10:00,560 --> 00:10:01,600
stake

272
00:10:01,600 --> 00:10:05,760
um we saw that uh a total of at most 0.2

273
00:10:05,760 --> 00:10:07,279
27

274
00:10:07,279 --> 00:10:08,640
of the streaming at stake could have

275
00:10:08,640 --> 00:10:10,000
been exploited

276
00:10:10,000 --> 00:10:13,519
and this was mostly through a reentrancy

277
00:10:13,519 --> 00:10:15,680
and uh through integer overflows and all

278
00:10:15,680 --> 00:10:18,160
the others were mostly almost

279
00:10:18,160 --> 00:10:20,320
unexploited whatsoever and for integer

280
00:10:20,320 --> 00:10:21,920
overflow we do assume that there might

281
00:10:21,920 --> 00:10:24,160
be uh some a bit of overestimating going

282
00:10:24,160 --> 00:10:25,920
on here

283
00:10:25,920 --> 00:10:27,839
so um so the main takeaway from this is

284
00:10:27,839 --> 00:10:30,560
that clearly like reinforced c is by far

285
00:10:30,560 --> 00:10:32,800
uh of the um

286
00:10:32,800 --> 00:10:36,240
what we analyze the most dangerous um

287
00:10:36,240 --> 00:10:38,000
vulnerability and up to this day there

288
00:10:38,000 --> 00:10:39,279
are still many contracts that keep

289
00:10:39,279 --> 00:10:42,399
getting exploited um using this while on

290
00:10:42,399 --> 00:10:44,160
the other hand a couple of other uh

291
00:10:44,160 --> 00:10:46,160
others were not that problematic for

292
00:10:46,160 --> 00:10:47,680
example unhealth exceptions and

293
00:10:47,680 --> 00:10:50,160
dependency of dependency on

294
00:10:50,160 --> 00:10:52,160
disrupted contract for not that much of

295
00:10:52,160 --> 00:10:54,000
an issue for the transition order

296
00:10:54,000 --> 00:10:55,519
dependency and frankly for this

297
00:10:55,519 --> 00:10:57,200
particular paper we did not really look

298
00:10:57,200 --> 00:10:59,200
into front running any sort of things

299
00:10:59,200 --> 00:11:01,760
but just looked at um stealing is for

300
00:11:01,760 --> 00:11:03,839
this which is not really a saying but uh

301
00:11:03,839 --> 00:11:05,200
there are now many other people talking

302
00:11:05,200 --> 00:11:06,399
about about these front-running parts

303
00:11:06,399 --> 00:11:09,279
which are a bit more problematic for

304
00:11:09,279 --> 00:11:11,920
this sort of um vulnerability

305
00:11:11,920 --> 00:11:13,440
um

306
00:11:13,440 --> 00:11:15,760
and finally we try to look a bit into

307
00:11:15,760 --> 00:11:18,240
why uh there was so little ease that was

308
00:11:18,240 --> 00:11:19,760
exploited given like the potential

309
00:11:19,760 --> 00:11:21,040
amount of stake

310
00:11:21,040 --> 00:11:23,519
and the the main outcome was that really

311
00:11:23,519 --> 00:11:26,959
like the is so concentrated in so little

312
00:11:26,959 --> 00:11:28,959
um so few contracts that as long as

313
00:11:28,959 --> 00:11:31,040
these contracts are very secure

314
00:11:31,040 --> 00:11:33,040
there is fairly little chance that the

315
00:11:33,040 --> 00:11:34,640
lot will be at stake and so for example

316
00:11:34,640 --> 00:11:36,640
we found that them from what we analyzed

317
00:11:36,640 --> 00:11:39,040
the top six contracts uh held uh roughly

318
00:11:39,040 --> 00:11:41,279
an 83 percent of the total ease

319
00:11:41,279 --> 00:11:43,760
and only a total of like um 10 percent

320
00:11:43,760 --> 00:11:45,600
of the contract we analyze even held

321
00:11:45,600 --> 00:11:47,360
some ease

322
00:11:47,360 --> 00:11:49,040
which means that at the end of the day

323
00:11:49,040 --> 00:11:51,120
the chances that

324
00:11:51,120 --> 00:11:55,040
get exploited or are fairly small

325
00:11:55,040 --> 00:11:56,880
and finally we found that many contracts

326
00:11:56,880 --> 00:11:58,720
were vulnerable but not totally

327
00:11:58,720 --> 00:12:00,399
exploitable so for example here we can

328
00:12:00,399 --> 00:12:01,360
see that

329
00:12:01,360 --> 00:12:04,639
uh owners um if the number of owners

330
00:12:04,639 --> 00:12:06,639
grew too much the contract would never

331
00:12:06,639 --> 00:12:08,160
be able to execute anymore which is

332
00:12:08,160 --> 00:12:09,680
flagged by many static analysis tools

333
00:12:09,680 --> 00:12:11,920
but because owners it's only controlled

334
00:12:11,920 --> 00:12:14,560
by existing owner there's little very

335
00:12:14,560 --> 00:12:16,079
little chance for such a problem to

336
00:12:16,079 --> 00:12:17,760
actually happen

337
00:12:17,760 --> 00:12:19,600
so in summary yes we analyze all these

338
00:12:19,600 --> 00:12:21,839
contracts found that the very little

339
00:12:21,839 --> 00:12:23,600
portion of these could

340
00:12:23,600 --> 00:12:24,959
potentially be at risk and would be

341
00:12:24,959 --> 00:12:26,320
exploited

342
00:12:26,320 --> 00:12:28,160
and that overall like high value

343
00:12:28,160 --> 00:12:30,880
contracts seem to be very secure

344
00:12:30,880 --> 00:12:31,680
so

345
00:12:31,680 --> 00:12:32,800
that's it for today thank you very much

346
00:12:32,800 --> 00:12:34,399
for listening and if you have any

347
00:12:34,399 --> 00:12:36,399
question you can contact me final

348
00:12:36,399 --> 00:12:39,040
contact info on the following url thank

349
00:12:39,040 --> 00:12:42,040
you

