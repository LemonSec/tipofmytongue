1
00:00:08,240 --> 00:00:11,040
hello everyone my name is teju kim from

2
00:00:11,040 --> 00:00:13,759
purdue university today i will talk

3
00:00:13,759 --> 00:00:16,480
about pakistan or static analysis space

4
00:00:16,480 --> 00:00:18,880
prepared by the concrete bug detector

5
00:00:18,880 --> 00:00:22,640
for biometal embedded applications

6
00:00:22,640 --> 00:00:25,199
as you know embedded systems use a

7
00:00:25,199 --> 00:00:27,680
variety of particular devices such as

8
00:00:27,680 --> 00:00:31,119
sensor sd card motor and user interface

9
00:00:31,119 --> 00:00:32,000
port

10
00:00:32,000 --> 00:00:34,640
those particular devices are attached to

11
00:00:34,640 --> 00:00:38,320
i o ports such as uart usb and so on

12
00:00:38,320 --> 00:00:40,800
such i o ports are mapped into memory

13
00:00:40,800 --> 00:00:42,840
space which we call

14
00:00:42,840 --> 00:00:45,920
mm-ios however we have observed that

15
00:00:45,920 --> 00:00:48,320
particular devices have a security

16
00:00:48,320 --> 00:00:51,360
issues caused by concurrency box let's

17
00:00:51,360 --> 00:00:54,239
start with the typical conclusible case

18
00:00:54,239 --> 00:00:57,520
in this example thread a and b update

19
00:00:57,520 --> 00:01:00,399
count variable in the figure then the

20
00:01:00,399 --> 00:01:03,440
age update can be ignored if a congruent

21
00:01:03,440 --> 00:01:05,040
update happens

22
00:01:05,040 --> 00:01:07,840
this happens because a count variable is

23
00:01:07,840 --> 00:01:10,080
shared by thread a and b

24
00:01:10,080 --> 00:01:13,200
therefore we should put a proper luck to

25
00:01:13,200 --> 00:01:15,439
guarantee atomic

26
00:01:15,439 --> 00:01:17,840
of data operation

27
00:01:17,840 --> 00:01:21,040
however in terms of conclusive bugs of

28
00:01:21,040 --> 00:01:23,920
particular devices the problems are more

29
00:01:23,920 --> 00:01:27,040
complicated take a look at this simplify

30
00:01:27,040 --> 00:01:30,320
the example here thread 8 sets your

31
00:01:30,320 --> 00:01:33,759
writing address as 100 and try to write

32
00:01:33,759 --> 00:01:35,520
password string

33
00:01:35,520 --> 00:01:38,159
we call such sequential operations as a

34
00:01:38,159 --> 00:01:39,600
transaction

35
00:01:39,600 --> 00:01:41,920
on the other hand let's assume that the

36
00:01:41,920 --> 00:01:45,759
b try to execute another transaction at

37
00:01:45,759 --> 00:01:48,399
the different address 500

38
00:01:48,399 --> 00:01:51,439
then after p character is written at

39
00:01:51,439 --> 00:01:54,799
address 100 the last of the characters

40
00:01:54,799 --> 00:01:58,479
will be written into address 500

41
00:01:58,479 --> 00:02:01,520
this can happen because an sd card is

42
00:02:01,520 --> 00:02:03,920
shared by thread a and b

43
00:02:03,920 --> 00:02:06,799
hence we need to guarantee automaticity

44
00:02:06,799 --> 00:02:09,758
spatially and temporarily otherwise

45
00:02:09,758 --> 00:02:12,160
security critical data corruption can

46
00:02:12,160 --> 00:02:15,360
happen on fire content sensor value and

47
00:02:15,360 --> 00:02:17,520
so on

48
00:02:17,520 --> 00:02:19,200
let me first talk about what is the

49
00:02:19,200 --> 00:02:21,360
spatial adamicity

50
00:02:21,360 --> 00:02:24,959
this is the example of uart attached to

51
00:02:24,959 --> 00:02:28,160
a embedded system board this can be used

52
00:02:28,160 --> 00:02:30,640
for various purposes such as shared

53
00:02:30,640 --> 00:02:31,840
connection

54
00:02:31,840 --> 00:02:36,480
such a uart mmio has a fixed range of

55
00:02:36,480 --> 00:02:38,160
memory addresses

56
00:02:38,160 --> 00:02:40,560
we call the address link between the

57
00:02:40,560 --> 00:02:44,640
start and end address as a memoir region

58
00:02:44,640 --> 00:02:47,599
such lead addresses within our mmi

59
00:02:47,599 --> 00:02:50,879
region are assigned to registers in the

60
00:02:50,879 --> 00:02:53,840
future to control the attached

61
00:02:53,840 --> 00:02:56,239
particular device such a region should

62
00:02:56,239 --> 00:02:57,200
be

63
00:02:57,200 --> 00:03:00,000
automatically accessed for correct

64
00:03:00,000 --> 00:03:02,080
device operations

65
00:03:02,080 --> 00:03:06,159
which require spatial automaticity

66
00:03:06,159 --> 00:03:08,640
next let me explain temporal

67
00:03:08,640 --> 00:03:11,920
automaticity with the simplified sd card

68
00:03:11,920 --> 00:03:14,800
controller safety machines as shown in

69
00:03:14,800 --> 00:03:17,440
the previous password string example

70
00:03:17,440 --> 00:03:20,560
each transaction consists of a sequence

71
00:03:20,560 --> 00:03:24,640
of instructions accessing mmios we call

72
00:03:24,640 --> 00:03:27,360
such instructions as mmi access

73
00:03:27,360 --> 00:03:28,799
instruction

74
00:03:28,799 --> 00:03:31,760
tools instructions must be executed

75
00:03:31,760 --> 00:03:35,200
atomically to transit state emotions and

76
00:03:35,200 --> 00:03:38,640
execute a transaction correctly however

77
00:03:38,640 --> 00:03:40,879
if such state motion transition is

78
00:03:40,879 --> 00:03:43,680
interrupted a transaction will fail

79
00:03:43,680 --> 00:03:46,080
leading to even security critical data

80
00:03:46,080 --> 00:03:47,120
corruption

81
00:03:47,120 --> 00:03:50,319
therefore we should not import locks

82
00:03:50,319 --> 00:03:53,120
without considering state motion as an

83
00:03:53,120 --> 00:03:56,000
as shown in the figure we should import

84
00:03:56,000 --> 00:03:57,599
logs to cover

85
00:03:57,599 --> 00:04:00,640
such a sequence of instructions while

86
00:04:00,640 --> 00:04:05,119
considering temporal atomicity

87
00:04:05,200 --> 00:04:07,680
in consideration of both the special and

88
00:04:07,680 --> 00:04:09,519
temporal automaticity

89
00:04:09,519 --> 00:04:12,000
we have developed poisson to detect

90
00:04:12,000 --> 00:04:14,879
concrete bugs for peripheral devices

91
00:04:14,879 --> 00:04:17,680
first person takes the source code and

92
00:04:17,680 --> 00:04:19,600
the system board memory layout

93
00:04:19,600 --> 00:04:21,519
information such as system view

94
00:04:21,519 --> 00:04:24,960
descriptor or svd as input

95
00:04:24,960 --> 00:04:28,320
after taking input poisson identifies

96
00:04:28,320 --> 00:04:31,440
which mmio access instructions can be

97
00:04:31,440 --> 00:04:33,840
executed concurrently

98
00:04:33,840 --> 00:04:36,080
then person extracts the spans of

99
00:04:36,080 --> 00:04:39,680
transactions based on the identified mmi

100
00:04:39,680 --> 00:04:41,520
access instructions

101
00:04:41,520 --> 00:04:44,000
finally person identifies which

102
00:04:44,000 --> 00:04:47,680
transactions can be executed concretely

103
00:04:47,680 --> 00:04:50,960
and the generator report

104
00:04:50,960 --> 00:04:54,080
then let me explain how python works

105
00:04:54,080 --> 00:04:56,400
we first lead to identify

106
00:04:56,400 --> 00:05:00,000
areas of mmios and lock object using

107
00:05:00,000 --> 00:05:02,000
point 2 analysis

108
00:05:02,000 --> 00:05:05,360
to identify the mmi user aliases we

109
00:05:05,360 --> 00:05:08,560
identify instructions accessing constant

110
00:05:08,560 --> 00:05:09,759
addresses

111
00:05:09,759 --> 00:05:12,880
if a constant address works within

112
00:05:12,880 --> 00:05:16,160
any mmi or region we consider that such

113
00:05:16,160 --> 00:05:19,440
instruction access certain mmios as

114
00:05:19,440 --> 00:05:21,600
shown in the blue boxes

115
00:05:21,600 --> 00:05:24,800
furthermore to identify all the mmi

116
00:05:24,800 --> 00:05:27,520
accessories we should track earliest

117
00:05:27,520 --> 00:05:30,240
variables pointing to addresses of our

118
00:05:30,240 --> 00:05:33,840
mmi region as well you can see examples

119
00:05:33,840 --> 00:05:36,560
in the red boxes

120
00:05:36,560 --> 00:05:39,440
finally we should track aliases pointing

121
00:05:39,440 --> 00:05:41,360
to log object

122
00:05:41,360 --> 00:05:44,479
as shown in the purple boxes such log

123
00:05:44,479 --> 00:05:45,759
information

124
00:05:45,759 --> 00:05:48,080
will be used to check whether

125
00:05:48,080 --> 00:05:50,080
instructions can be executed

126
00:05:50,080 --> 00:05:53,080
concurrently

127
00:05:53,520 --> 00:05:56,080
next we need to identify critical

128
00:05:56,080 --> 00:05:59,919
sections which we call lockspans using

129
00:05:59,919 --> 00:06:02,720
identified lock object

130
00:06:02,720 --> 00:06:06,400
such lock spans are enforced between the

131
00:06:06,400 --> 00:06:08,960
lock and unlock instructions

132
00:06:08,960 --> 00:06:11,600
for example you can find one red

133
00:06:11,600 --> 00:06:14,319
lockspan and another purple lockspan

134
00:06:14,319 --> 00:06:17,039
between the pair of lock and unlock

135
00:06:17,039 --> 00:06:18,240
instructions

136
00:06:18,240 --> 00:06:21,039
we can find such lockspans through

137
00:06:21,039 --> 00:06:23,039
lockset analysis

138
00:06:23,039 --> 00:06:26,319
furthermore such lockset analysis should

139
00:06:26,319 --> 00:06:29,680
consider core context for example there

140
00:06:29,680 --> 00:06:32,080
is the spi writer function and this

141
00:06:32,080 --> 00:06:36,400
function course both spi write 1 and spi

142
00:06:36,400 --> 00:06:38,720
write 2 functions

143
00:06:38,720 --> 00:06:40,560
also there are

144
00:06:40,560 --> 00:06:43,039
log and unlock instructions covering

145
00:06:43,039 --> 00:06:46,560
both spi write 1 and spirit 2 function

146
00:06:46,560 --> 00:06:50,400
call instructions in this case the lux

147
00:06:50,400 --> 00:06:52,960
lux pen should cover not only the core

148
00:06:52,960 --> 00:06:55,919
instructions of the post functions but

149
00:06:55,919 --> 00:06:59,919
also instructions executed in the both

150
00:06:59,919 --> 00:07:02,960
called functions then person can find

151
00:07:02,960 --> 00:07:06,080
the conflict lock spans in consideration

152
00:07:06,080 --> 00:07:08,639
of core context

153
00:07:08,639 --> 00:07:10,400
furthermore we should

154
00:07:10,400 --> 00:07:13,599
extract transaction spans as well as lux

155
00:07:13,599 --> 00:07:14,560
fans

156
00:07:14,560 --> 00:07:17,680
each transactions panes consist of mmi

157
00:07:17,680 --> 00:07:20,479
access instructions their distances in

158
00:07:20,479 --> 00:07:23,599
the code are closed because peripheral

159
00:07:23,599 --> 00:07:25,199
devices drivers

160
00:07:25,199 --> 00:07:28,160
access mmi is frequently unlike

161
00:07:28,160 --> 00:07:31,120
application code furthermore poisson

162
00:07:31,120 --> 00:07:34,000
heuristically imports transaction spends

163
00:07:34,000 --> 00:07:36,160
by counting the number of instructions

164
00:07:36,160 --> 00:07:39,039
between mmi obsessed instructions

165
00:07:39,039 --> 00:07:41,360
and if the number is smaller than the

166
00:07:41,360 --> 00:07:43,120
stress hold value

167
00:07:43,120 --> 00:07:46,560
we consider both mmi access instructions

168
00:07:46,560 --> 00:07:49,280
are the part of our transaction

169
00:07:49,280 --> 00:07:52,160
meanwhile we should consider some

170
00:07:52,160 --> 00:07:55,599
exceptions for example we observe that

171
00:07:55,599 --> 00:07:58,720
peripheral device should be in the

172
00:07:58,720 --> 00:08:00,720
weight state during the

173
00:08:00,720 --> 00:08:03,440
during on assigned the job process

174
00:08:03,440 --> 00:08:06,080
if that is interrupted by another job

175
00:08:06,080 --> 00:08:09,360
request or other mio accesses

176
00:08:09,360 --> 00:08:12,800
the ongoing job can fail

177
00:08:12,800 --> 00:08:15,520
finally person detect concurrency box

178
00:08:15,520 --> 00:08:18,960
with identified lock and transaction

179
00:08:18,960 --> 00:08:21,440
space

180
00:08:22,479 --> 00:08:24,400
let's assume that there is one

181
00:08:24,400 --> 00:08:26,400
transaction consists of

182
00:08:26,400 --> 00:08:29,520
consisting of yellow and green mmi

183
00:08:29,520 --> 00:08:31,280
obsessed instructions

184
00:08:31,280 --> 00:08:34,479
then we show two examples of concurrency

185
00:08:34,479 --> 00:08:37,519
issues when two threads can execute this

186
00:08:37,519 --> 00:08:39,039
transaction

187
00:08:39,039 --> 00:08:41,679
if both instructions of the transaction

188
00:08:41,679 --> 00:08:45,279
are protected by different lock object

189
00:08:45,279 --> 00:08:47,440
green and yellow instructions can be

190
00:08:47,440 --> 00:08:50,800
executed concurrently which lead to the

191
00:08:50,800 --> 00:08:52,720
transaction failure

192
00:08:52,720 --> 00:08:55,200
it the black object are identical

193
00:08:55,200 --> 00:08:57,519
fortunately both green and yellow

194
00:08:57,519 --> 00:09:00,080
instructions can not be executed

195
00:09:00,080 --> 00:09:03,440
concurrently however thread 1 and 2 can

196
00:09:03,440 --> 00:09:06,000
still execute the same transaction

197
00:09:06,000 --> 00:09:08,800
without executing yellow or green

198
00:09:08,800 --> 00:09:11,279
instructions at the same time this will

199
00:09:11,279 --> 00:09:13,600
also lead to the transaction failure as

200
00:09:13,600 --> 00:09:14,800
well

201
00:09:14,800 --> 00:09:18,399
we note that this one happen before

202
00:09:18,399 --> 00:09:22,000
the log objects are identical and the

203
00:09:22,000 --> 00:09:25,760
lock span covers each transaction

204
00:09:25,760 --> 00:09:29,200
in our experiment we have found 17 true

205
00:09:29,200 --> 00:09:32,000
valves although there are 19 first

206
00:09:32,000 --> 00:09:33,519
positive blocks

207
00:09:33,519 --> 00:09:36,560
or cases and all of them have been

208
00:09:36,560 --> 00:09:40,000
deported and eight cases has been

209
00:09:40,000 --> 00:09:42,880
confirmed by the developers

210
00:09:42,880 --> 00:09:46,399
as a case study let's assume that an sd

211
00:09:46,399 --> 00:09:49,519
card can be connected to a hd

212
00:09:49,519 --> 00:09:51,440
spi port

213
00:09:51,440 --> 00:09:53,200
and we found that

214
00:09:53,200 --> 00:09:56,320
lux implementation was missing then sd

215
00:09:56,320 --> 00:09:59,040
card operations such as riding on a sd

216
00:09:59,040 --> 00:10:00,000
card

217
00:10:00,000 --> 00:10:01,920
do not work properly

218
00:10:01,920 --> 00:10:05,600
as explained in our sd card example if

219
00:10:05,600 --> 00:10:07,920
multiple threads need to perform some

220
00:10:07,920 --> 00:10:10,320
operations such as writing security

221
00:10:10,320 --> 00:10:13,360
critical data can be corrupted or

222
00:10:13,360 --> 00:10:15,360
missing

223
00:10:15,360 --> 00:10:17,920
let's assume that thread b act as a

224
00:10:17,920 --> 00:10:20,880
malicious user's thread which frequently

225
00:10:20,880 --> 00:10:22,240
write the data

226
00:10:22,240 --> 00:10:23,519
currently

227
00:10:23,519 --> 00:10:26,079
then the security critical data such as

228
00:10:26,079 --> 00:10:29,040
user information or password can be

229
00:10:29,040 --> 00:10:32,160
corrupted even without the privilege to

230
00:10:32,160 --> 00:10:34,560
access the target data

231
00:10:34,560 --> 00:10:37,440
for example when a part of a password

232
00:10:37,440 --> 00:10:40,800
will be stored into address 100 and the

233
00:10:40,800 --> 00:10:45,120
others will be stored into address 500

234
00:10:45,120 --> 00:10:45,839
if

235
00:10:45,839 --> 00:10:48,720
we properly put logs in consideration of

236
00:10:48,720 --> 00:10:50,000
a transaction

237
00:10:50,000 --> 00:10:52,480
all data will be written

238
00:10:52,480 --> 00:10:54,480
correctly

239
00:10:54,480 --> 00:10:56,880
unfortunately pakistan has several

240
00:10:56,880 --> 00:10:59,680
limitations which are caused by static

241
00:10:59,680 --> 00:11:02,959
analysis for example first positives and

242
00:11:02,959 --> 00:11:05,040
negatives can be introduced by

243
00:11:05,040 --> 00:11:08,800
inaccuracy of 0.2 analysis furthermore

244
00:11:08,800 --> 00:11:11,200
some low-level individuals interrupt

245
00:11:11,200 --> 00:11:14,959
enable or disable operations can

246
00:11:14,959 --> 00:11:17,839
cause in correct results

247
00:11:17,839 --> 00:11:19,839
moreover incorrectly important

248
00:11:19,839 --> 00:11:22,399
transactions plans can cause fair

249
00:11:22,399 --> 00:11:24,720
positive and negatives

250
00:11:24,720 --> 00:11:27,440
however incorrect spends such as subset

251
00:11:27,440 --> 00:11:30,640
spans still are usable to detect bugs

252
00:11:30,640 --> 00:11:33,680
because existing work is not aware of

253
00:11:33,680 --> 00:11:36,000
transactions at all

254
00:11:36,000 --> 00:11:38,399
in summary conclusion box can strengthen

255
00:11:38,399 --> 00:11:41,600
embedded system safety and security to

256
00:11:41,600 --> 00:11:44,800
detect the tools box we propose poisson

257
00:11:44,800 --> 00:11:47,120
or static analysis-based concrete block

258
00:11:47,120 --> 00:11:49,839
detector for peripheral devices

259
00:11:49,839 --> 00:11:52,079
for that the detection procedure should

260
00:11:52,079 --> 00:11:55,120
be transaction aware in consideration of

261
00:11:55,120 --> 00:11:58,079
spatial and temporal autonomicity

262
00:11:58,079 --> 00:12:00,880
as a result we have found 17 bugs in

263
00:12:00,880 --> 00:12:03,200
seven embedded applications

264
00:12:03,200 --> 00:12:05,040
this is the end of my talk thank you

265
00:12:05,040 --> 00:12:09,000
very much for your attention

266
00:12:14,160 --> 00:12:16,240
you

