1
00:00:08,240 --> 00:00:11,759
hi everyone my name is uhl from indiana

2
00:00:11,759 --> 00:00:14,400
university today i will be presenting

3
00:00:14,400 --> 00:00:16,800
the paper understanding malicious course

4
00:00:16,800 --> 00:00:19,520
library data harvesting on engine

5
00:00:19,520 --> 00:00:22,000
this is a joint work between university

6
00:00:22,000 --> 00:00:25,119
of chinese academy of science indiana

7
00:00:25,119 --> 00:00:28,000
university purdue university and city

8
00:00:28,000 --> 00:00:30,720
university i'm the first co-author with

9
00:00:30,720 --> 00:00:33,760
jesus wong my advisors are louis xing

10
00:00:33,760 --> 00:00:36,480
and sanji here hello everyone my name is

11
00:00:36,480 --> 00:00:39,360
chisholm from university of chinese

12
00:00:39,360 --> 00:00:42,399
academy of sciences

13
00:00:42,399 --> 00:00:45,200
in this paper we discovered a new type

14
00:00:45,200 --> 00:00:47,520
of data harvesting libraries which are

15
00:00:47,520 --> 00:00:49,440
never reported before

16
00:00:49,440 --> 00:00:52,079
they strategically targeted the sdk for

17
00:00:52,079 --> 00:00:54,320
other vendors also integrated by the

18
00:00:54,320 --> 00:00:55,920
same host app

19
00:00:55,920 --> 00:00:59,840
here we refer sdk as the victim library

20
00:00:59,840 --> 00:01:02,399
the sensitive user data are exposed to

21
00:01:02,399 --> 00:01:04,479
those malicious libraries

22
00:01:04,479 --> 00:01:06,400
here we will show how the malicious

23
00:01:06,400 --> 00:01:09,520
library's england app still on app users

24
00:01:09,520 --> 00:01:11,680
facebook access token and access to

25
00:01:11,680 --> 00:01:13,200
facebook account

26
00:01:13,200 --> 00:01:16,560
specifically it will take a few steps

27
00:01:16,560 --> 00:01:19,200
first it will check whether the facebook

28
00:01:19,200 --> 00:01:22,479
sdk is in the app if it is

29
00:01:22,479 --> 00:01:25,040
then the malicious libraries will obtain

30
00:01:25,040 --> 00:01:28,400
user's facebook access token and or some

31
00:01:28,400 --> 00:01:30,400
other user data

32
00:01:30,400 --> 00:01:33,119
further it may use this token to access

33
00:01:33,119 --> 00:01:35,520
the user's facebook accounts like

34
00:01:35,520 --> 00:01:40,720
facebook id gender email page likes etc

35
00:01:40,720 --> 00:01:42,799
finally it will send those secret

36
00:01:42,799 --> 00:01:45,200
information out to a remote malicious

37
00:01:45,200 --> 00:01:46,640
server

38
00:01:46,640 --> 00:01:48,560
those malicious behavior are done

39
00:01:48,560 --> 00:01:51,360
without users awareness

40
00:01:51,360 --> 00:01:54,320
note that in such scenario the malicious

41
00:01:54,320 --> 00:01:56,960
sdk can get data directly from the

42
00:01:56,960 --> 00:01:58,799
victim sdk

43
00:01:58,799 --> 00:02:00,960
not necessarily having to fetch data

44
00:02:00,960 --> 00:02:04,000
from the victim sdk server

45
00:02:04,000 --> 00:02:06,799
we call this attack course library data

46
00:02:06,799 --> 00:02:08,639
harvesting

47
00:02:08,639 --> 00:02:10,959
excel dh

48
00:02:10,959 --> 00:02:13,200
as we know facebook single sign-on is

49
00:02:13,200 --> 00:02:15,920
quite popular more than 16 of the apps

50
00:02:15,920 --> 00:02:18,160
on the google play deploy the facebook

51
00:02:18,160 --> 00:02:19,840
login sdk

52
00:02:19,840 --> 00:02:23,280
what's more excel dh risks affect not

53
00:02:23,280 --> 00:02:25,840
only facebook but also many other

54
00:02:25,840 --> 00:02:28,959
popular sdks in the mobile apps such as

55
00:02:28,959 --> 00:02:32,400
twitter linking wechat google hence the

56
00:02:32,400 --> 00:02:37,480
risk of such data leakage is significant

57
00:02:37,680 --> 00:02:40,720
here we use a real example to explain

58
00:02:40,720 --> 00:02:42,879
how those malicious libraries perform

59
00:02:42,879 --> 00:02:45,599
data harvesting

60
00:02:45,599 --> 00:02:48,720
specifically we inspect an app grocery

61
00:02:48,720 --> 00:02:50,400
shopping list

62
00:02:50,400 --> 00:02:52,720
which is 1 million installs on google

63
00:02:52,720 --> 00:02:53,599
play

64
00:02:53,599 --> 00:02:56,560
it contains both an alias library one

65
00:02:56,560 --> 00:02:59,680
audience and the facebook sdk for single

66
00:02:59,680 --> 00:03:01,040
zion

67
00:03:01,040 --> 00:03:03,280
as shown in the left picture

68
00:03:03,280 --> 00:03:06,000
the class involving library found to

69
00:03:06,000 --> 00:03:09,440
invoke facebook get current access token

70
00:03:09,440 --> 00:03:12,560
method using reflection

71
00:03:12,560 --> 00:03:14,720
the written value of the function

72
00:03:14,720 --> 00:03:19,360
is a user's facebook session token

73
00:03:19,360 --> 00:03:22,000
they found that the token is used to

74
00:03:22,000 --> 00:03:25,120
fetch users facebook profile data

75
00:03:25,120 --> 00:03:30,799
including id name gender link and so on

76
00:03:30,799 --> 00:03:33,680
and further all the data including the

77
00:03:33,680 --> 00:03:36,640
token are sent out to the server of one

78
00:03:36,640 --> 00:03:39,200
audience

79
00:03:39,280 --> 00:03:41,760
vision check whether such a

80
00:03:41,760 --> 00:03:44,000
practice violating the data sharing

81
00:03:44,000 --> 00:03:46,879
policies in facebook tos

82
00:03:46,879 --> 00:03:49,920
tos is short for term of service

83
00:03:49,920 --> 00:03:53,519
which is an sdk developer document that

84
00:03:53,519 --> 00:03:56,959
lies out terms conditions requirements

85
00:03:56,959 --> 00:04:00,640
associated with the use of a mobile sdk

86
00:04:00,640 --> 00:04:02,239
in fingerbow

87
00:04:02,239 --> 00:04:04,159
given the statement

88
00:04:04,159 --> 00:04:06,400
transfer user data that you received

89
00:04:06,400 --> 00:04:07,519
from us

90
00:04:07,519 --> 00:04:10,239
we extracted the data sharing policy

91
00:04:10,239 --> 00:04:12,799
pair here

92
00:04:13,200 --> 00:04:16,478
user data no third party access

93
00:04:16,478 --> 00:04:19,440
which indicates that the access token is

94
00:04:19,440 --> 00:04:21,759
a restricted data item

95
00:04:21,759 --> 00:04:24,080
and it cannot be shared with and

96
00:04:24,080 --> 00:04:26,639
transferred to third party

97
00:04:26,639 --> 00:04:29,520
hence the violence library values the

98
00:04:29,520 --> 00:04:32,880
data sharing policy of facebook sdk

99
00:04:32,880 --> 00:04:35,680
disaster we flag it as a malicious

100
00:04:35,680 --> 00:04:37,440
library

101
00:04:37,440 --> 00:04:40,160
which reports our funding to facebook

102
00:04:40,160 --> 00:04:43,280
and facebook gets done quickly and sued

103
00:04:43,280 --> 00:04:48,039
by audience in august 2020

104
00:04:49,360 --> 00:04:52,880
challenges of detection

105
00:04:53,120 --> 00:04:55,600
it turns out to be non-trivial to check

106
00:04:55,600 --> 00:04:56,479
such

107
00:04:56,479 --> 00:04:59,360
compliance between code and policies

108
00:04:59,360 --> 00:05:01,520
first different from app privacy

109
00:05:01,520 --> 00:05:04,479
policies that protect personal

110
00:05:04,479 --> 00:05:08,000
information such as address and contact

111
00:05:08,000 --> 00:05:10,639
which can be identified by existing

112
00:05:10,639 --> 00:05:13,680
proxy policy analyzer such as policies

113
00:05:13,680 --> 00:05:15,680
or policy linked

114
00:05:15,680 --> 00:05:18,160
tos describes the

115
00:05:18,160 --> 00:05:21,280
restricted data whose security or

116
00:05:21,280 --> 00:05:23,680
privacy implications can only be

117
00:05:23,680 --> 00:05:26,400
determined from the context of their

118
00:05:26,400 --> 00:05:28,880
usage

119
00:05:29,680 --> 00:05:33,440
examples include security critical data

120
00:05:33,440 --> 00:05:35,199
such as password

121
00:05:35,199 --> 00:05:39,520
token and sdk specific sensitive data

122
00:05:39,520 --> 00:05:43,280
such as utdid used by alibaba for

123
00:05:43,280 --> 00:05:45,840
identifying user devices

124
00:05:45,840 --> 00:05:48,639
from data and page scoped user ids

125
00:05:48,639 --> 00:05:51,280
recorded by facebook

126
00:05:51,280 --> 00:05:53,360
and the application and the project

127
00:05:53,360 --> 00:05:57,840
information mentioned by linkedin

128
00:05:58,240 --> 00:06:00,560
more challenging is to recover the data

129
00:06:00,560 --> 00:06:02,800
training policies from tos

130
00:06:02,800 --> 00:06:05,199
that describes the restrictions on

131
00:06:05,199 --> 00:06:07,600
collecting and sharing different data

132
00:06:07,600 --> 00:06:08,720
items

133
00:06:08,720 --> 00:06:12,240
which tends to be complicated

134
00:06:12,240 --> 00:06:15,199
for example google allows developers to

135
00:06:15,199 --> 00:06:18,960
access advertising id or device id

136
00:06:18,960 --> 00:06:21,280
but it restricts the collection of those

137
00:06:21,280 --> 00:06:24,639
two data items at the same time

138
00:06:24,639 --> 00:06:27,600
it requires developers to abandon users

139
00:06:27,600 --> 00:06:29,280
express content

140
00:06:29,280 --> 00:06:33,360
when share protected twitter content

141
00:06:33,360 --> 00:06:35,919
the facebook username and password are

142
00:06:35,919 --> 00:06:37,919
not allowed to be sent out to the

143
00:06:37,919 --> 00:06:41,360
internet by any party

144
00:06:41,360 --> 00:06:43,360
previous works

145
00:06:43,360 --> 00:06:45,680
prior research showed that malicious

146
00:06:45,680 --> 00:06:49,680
sdks could detect users sensitive data

147
00:06:49,680 --> 00:06:53,120
from the host apps and mobile devices

148
00:06:53,120 --> 00:06:55,680
leading to serious privacy leakage due

149
00:06:55,680 --> 00:06:58,000
to their wide integration by popular

150
00:06:58,000 --> 00:07:00,720
mobile apps

151
00:07:01,360 --> 00:07:04,400
medication problems bioresearch also

152
00:07:04,400 --> 00:07:06,560
proposed different fine-grained

153
00:07:06,560 --> 00:07:11,039
mechanisms to isolate third-party sdks

154
00:07:11,039 --> 00:07:14,000
unfortunately these methods are hard to

155
00:07:14,000 --> 00:07:17,039
be fully adopted by current ecosystem

156
00:07:17,039 --> 00:07:20,960
due to different development limitations

157
00:07:20,960 --> 00:07:23,520
different from prior research our study

158
00:07:23,520 --> 00:07:25,919
she slides on a new type of privacy

159
00:07:25,919 --> 00:07:27,520
harvesting channel

160
00:07:27,520 --> 00:07:30,639
the cross library data harvesting which

161
00:07:30,639 --> 00:07:33,280
is significantly different from prior

162
00:07:33,280 --> 00:07:34,319
studies

163
00:07:34,319 --> 00:07:37,280
in terms of the diversity of the private

164
00:07:37,280 --> 00:07:40,240
data and the complexity in determining

165
00:07:40,240 --> 00:07:42,319
their data sharing policies

166
00:07:42,319 --> 00:07:47,039
specific to the individual sdks

167
00:07:47,440 --> 00:07:49,599
we found that although virustotal and

168
00:07:49,599 --> 00:07:51,680
google play are able to detect the

169
00:07:51,680 --> 00:07:53,759
libraries collecting data from mobile

170
00:07:53,759 --> 00:07:57,440
devices such as imei and contact they

171
00:07:57,440 --> 00:07:59,840
all failed to detect such libraries we

172
00:07:59,840 --> 00:08:02,879
found and the apps integrating them

173
00:08:02,879 --> 00:08:04,879
possibly due to the challenges in

174
00:08:04,879 --> 00:08:07,440
determining third-party data sharing

175
00:08:07,440 --> 00:08:09,759
policies and non-compliance with the

176
00:08:09,759 --> 00:08:12,759
policies

177
00:08:13,599 --> 00:08:16,080
in order to find how prevalent those

178
00:08:16,080 --> 00:08:18,800
malicious libraries are in the world we

179
00:08:18,800 --> 00:08:21,440
developed a new automatic methodology to

180
00:08:21,440 --> 00:08:23,759
identify those malicious libraries

181
00:08:23,759 --> 00:08:26,240
integrated in the real world apps on the

182
00:08:26,240 --> 00:08:28,479
google play

183
00:08:28,479 --> 00:08:31,120
we automatically extract those policies

184
00:08:31,120 --> 00:08:34,240
from tos released by the sdk vendors

185
00:08:34,240 --> 00:08:36,958
then analyze the code of each integrated

186
00:08:36,958 --> 00:08:39,519
libraries to find out whether it makes

187
00:08:39,519 --> 00:08:42,559
an access to the sdk status in violation

188
00:08:42,559 --> 00:08:44,320
of those policies

189
00:08:44,320 --> 00:08:47,120
to this end we first need to identify

190
00:08:47,120 --> 00:08:51,519
the restricted data in the sdktos

191
00:08:51,519 --> 00:08:54,080
in our study we observed that the

192
00:08:54,080 --> 00:08:56,720
restricted data is often characterized

193
00:08:56,720 --> 00:08:59,200
by a long noun phrase like google

194
00:08:59,200 --> 00:09:01,920
advertising id covered by single or

195
00:09:01,920 --> 00:09:03,920
multiple noun phrases in the

196
00:09:03,920 --> 00:09:05,760
constituency tree

197
00:09:05,760 --> 00:09:08,640
hence we craft several features based on

198
00:09:08,640 --> 00:09:11,120
the constituency passing three tags for

199
00:09:11,120 --> 00:09:14,320
each word which includes a word tag its

200
00:09:14,320 --> 00:09:16,959
parents tag the left and right sub links

201
00:09:16,959 --> 00:09:18,880
and the location of the word in the span

202
00:09:18,880 --> 00:09:21,040
of the phrase

203
00:09:21,040 --> 00:09:22,959
in this way we can recognize the

204
00:09:22,959 --> 00:09:25,760
restricted data here members profile

205
00:09:25,760 --> 00:09:28,160
data

206
00:09:30,160 --> 00:09:32,959
for this step is to identify whether a

207
00:09:32,959 --> 00:09:35,360
sentence is private data collection and

208
00:09:35,360 --> 00:09:37,120
sharing policy

209
00:09:37,120 --> 00:09:39,760
we first check whether the operation of

210
00:09:39,760 --> 00:09:42,080
the sentence is associated with data

211
00:09:42,080 --> 00:09:45,120
collection and sharing like use collect

212
00:09:45,120 --> 00:09:47,600
transfer store etc

213
00:09:47,600 --> 00:09:50,160
after that we check that the sentence

214
00:09:50,160 --> 00:09:53,279
subject is not the victim sdk itself but

215
00:09:53,279 --> 00:09:55,279
the library's developer

216
00:09:55,279 --> 00:09:57,360
we also eliminate the sentence with the

217
00:09:57,360 --> 00:09:59,519
first party as subject

218
00:09:59,519 --> 00:10:01,920
for example this sentence

219
00:10:01,920 --> 00:10:04,560
is not the policy statement we target

220
00:10:04,560 --> 00:10:09,279
for as it contains the first subject we

221
00:10:09,279 --> 00:10:11,760
and for this sentence we identified it

222
00:10:11,760 --> 00:10:14,480
as data sharing policy as it contains

223
00:10:14,480 --> 00:10:17,200
the collector operation and the subject

224
00:10:17,200 --> 00:10:21,519
of this sentence is not the first party

225
00:10:22,480 --> 00:10:25,760
to extract the pair object condition

226
00:10:25,760 --> 00:10:30,000
from the policy statements of an sdktos

227
00:10:30,000 --> 00:10:32,640
our approach first use our dependency

228
00:10:32,640 --> 00:10:35,120
password to transfer the sentence into a

229
00:10:35,120 --> 00:10:38,000
dependency passing tree which describes

230
00:10:38,000 --> 00:10:40,240
the grammatical connections between

231
00:10:40,240 --> 00:10:41,920
different words

232
00:10:41,920 --> 00:10:44,480
then we will leverage the restricted

233
00:10:44,480 --> 00:10:47,680
data object as the noi anchors to locate

234
00:10:47,680 --> 00:10:50,000
the condition by traversing the parsing

235
00:10:50,000 --> 00:10:51,440
tree

236
00:10:51,440 --> 00:10:54,959
here we identify the sensitive data is

237
00:10:54,959 --> 00:10:56,079
member's

238
00:10:56,079 --> 00:10:58,880
profile data and its condition is

239
00:10:58,880 --> 00:11:02,000
have valid concerns

240
00:11:02,240 --> 00:11:04,800
finally to capture the malicious data

241
00:11:04,800 --> 00:11:08,000
harvesting email app our tool first

242
00:11:08,000 --> 00:11:11,040
identifies course library course to find

243
00:11:11,040 --> 00:11:13,279
the data gathered by third party

244
00:11:13,279 --> 00:11:16,720
libraries from our co-located sdk

245
00:11:16,720 --> 00:11:19,200
then we check the compliance of such

246
00:11:19,200 --> 00:11:22,160
activities with the sdk data sharing

247
00:11:22,160 --> 00:11:24,480
policies

248
00:11:24,480 --> 00:11:27,040
results

249
00:11:27,040 --> 00:11:30,240
we investigate 1.3 million google play

250
00:11:30,240 --> 00:11:34,160
apps we discovered 42 distinct libraries

251
00:11:34,160 --> 00:11:36,880
still silly harvesting data from 16

252
00:11:36,880 --> 00:11:38,800
popular sdks

253
00:11:38,800 --> 00:11:42,000
it affected more than 19 000 apps with a

254
00:11:42,000 --> 00:11:44,399
total of 9 million downloads

255
00:11:44,399 --> 00:11:47,040
the affect vendors include but not

256
00:11:47,040 --> 00:11:50,000
limited to facebook google linkedin

257
00:11:50,000 --> 00:11:53,279
twitter and wechat

258
00:11:53,440 --> 00:11:55,839
our works not only reveal the real

259
00:11:55,839 --> 00:11:58,560
world's rate to the personal privacy but

260
00:11:58,560 --> 00:12:01,440
also have serious social implications

261
00:12:01,440 --> 00:12:03,680
there are more than 30 millions report

262
00:12:03,680 --> 00:12:05,200
our findings

263
00:12:05,200 --> 00:12:07,360
we also report our results to the

264
00:12:07,360 --> 00:12:10,480
affected vendors like facebook twitter

265
00:12:10,480 --> 00:12:13,040
google play apple app store

266
00:12:13,040 --> 00:12:16,720
etc who are all extremely serious about

267
00:12:16,720 --> 00:12:19,120
this risk which they are not fully

268
00:12:19,120 --> 00:12:20,480
prepared for

269
00:12:20,480 --> 00:12:23,200
what's more facebook google and twitter

270
00:12:23,200 --> 00:12:27,360
also awards us for our findings

271
00:12:28,000 --> 00:12:28,959
that's it

272
00:12:28,959 --> 00:12:30,720
thank you for your valuable time we are

273
00:12:30,720 --> 00:12:34,200
here for questions

274
00:12:41,040 --> 00:12:43,120
you

