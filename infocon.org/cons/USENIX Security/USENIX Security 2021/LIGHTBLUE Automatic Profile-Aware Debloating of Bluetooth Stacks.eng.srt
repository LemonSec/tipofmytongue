1
00:00:08,880 --> 00:00:11,920
hello everyone my name is jana wu i'm a

2
00:00:11,920 --> 00:00:14,960
phd student from purdue university

3
00:00:14,960 --> 00:00:16,960
today to the amazon prisoner light blue

4
00:00:16,960 --> 00:00:18,960
and automatic profile deployment

5
00:00:18,960 --> 00:00:21,920
framework for bluetooth stacks

6
00:00:21,920 --> 00:00:24,400
this is the joint work with epfl and

7
00:00:24,400 --> 00:00:26,799
this bar

8
00:00:27,119 --> 00:00:29,519
so bluetooth devices are everywhere

9
00:00:29,519 --> 00:00:32,000
according to bluetooth special interest

10
00:00:32,000 --> 00:00:34,160
group there will be over 5 billion

11
00:00:34,160 --> 00:00:37,600
bluetooth devices all over the world

12
00:00:37,600 --> 00:00:39,520
and bluetooth can be used in different

13
00:00:39,520 --> 00:00:42,640
cases such as audio streaming printing

14
00:00:42,640 --> 00:00:45,520
smart home and healthcare

15
00:00:45,520 --> 00:00:47,840
supporting the different use cases means

16
00:00:47,840 --> 00:00:51,120
that the stack is bloated

17
00:00:51,120 --> 00:00:54,000
first of all there are multiple profiles

18
00:00:54,000 --> 00:00:56,000
in bluetooth stack

19
00:00:56,000 --> 00:00:59,120
such as jtt and pem profile

20
00:00:59,120 --> 00:01:01,520
to support the different profiles there

21
00:01:01,520 --> 00:01:03,680
are different protocols

22
00:01:03,680 --> 00:01:06,960
like l2 cap and att

23
00:01:06,960 --> 00:01:09,280
besides from the host code that i just

24
00:01:09,280 --> 00:01:12,000
mentioned there there is also firmware

25
00:01:12,000 --> 00:01:14,880
running in the bluetooth controller

26
00:01:14,880 --> 00:01:17,119
assume we have a point of sale app that

27
00:01:17,119 --> 00:01:20,000
only use the jgd profile and the related

28
00:01:20,000 --> 00:01:21,840
protocol

29
00:01:21,840 --> 00:01:24,320
then the other profiles and protocol are

30
00:01:24,320 --> 00:01:25,759
not needed

31
00:01:25,759 --> 00:01:29,840
however they might not be vulnerable

32
00:01:29,840 --> 00:01:31,439
here is a

33
00:01:31,439 --> 00:01:34,159
real example in the real world

34
00:01:34,159 --> 00:01:36,880
the square app only uses the gtd profile

35
00:01:36,880 --> 00:01:39,040
and the related protocols to communicate

36
00:01:39,040 --> 00:01:41,600
with the square credit card reader to

37
00:01:41,600 --> 00:01:45,119
rate the information of the credit card

38
00:01:45,119 --> 00:01:47,280
therefore the other profiles and

39
00:01:47,280 --> 00:01:50,079
protocols can be removed without

40
00:01:50,079 --> 00:01:53,600
affecting its functionality

41
00:01:53,600 --> 00:01:55,600
so our goal is to

42
00:01:55,600 --> 00:01:57,600
develop that i need a code in the

43
00:01:57,600 --> 00:02:00,159
bluetooth stack so the vulnerabilities

44
00:02:00,159 --> 00:02:02,399
within the bluetooth stack are no longer

45
00:02:02,399 --> 00:02:04,560
exploitable

46
00:02:04,560 --> 00:02:06,159
besides the framework should be

47
00:02:06,159 --> 00:02:09,119
automatic to remove any other code

48
00:02:09,119 --> 00:02:12,160
and it should be flexible to deploy to

49
00:02:12,160 --> 00:02:14,319
different profiles

50
00:02:14,319 --> 00:02:17,120
and at last it should support four stack

51
00:02:17,120 --> 00:02:18,480
deploying

52
00:02:18,480 --> 00:02:20,560
it could deploy both the host code and

53
00:02:20,560 --> 00:02:23,599
the firmware

54
00:02:23,599 --> 00:02:25,920
so the first step of the framework is

55
00:02:25,920 --> 00:02:29,599
identify the needed profile by an app

56
00:02:29,599 --> 00:02:32,640
once the needed profile is identified

57
00:02:32,640 --> 00:02:34,480
you then perform the

58
00:02:34,480 --> 00:02:37,599
host code loading and formulated loading

59
00:02:37,599 --> 00:02:40,080
record that those two pieces of

60
00:02:40,080 --> 00:02:43,040
code are running on two different cpus

61
00:02:43,040 --> 00:02:46,080
therefore we analyze them separately and

62
00:02:46,080 --> 00:02:49,200
use the hci commands to bridge the gap

63
00:02:49,200 --> 00:02:51,839
between them

64
00:02:52,080 --> 00:02:53,440
the first step is kind of

65
00:02:53,440 --> 00:02:54,720
straightforward

66
00:02:54,720 --> 00:02:57,280
the bluetooth the app

67
00:02:57,280 --> 00:03:00,080
calls the api is provided by the system

68
00:03:00,080 --> 00:03:00,800
to

69
00:03:00,800 --> 00:03:03,760
use a profile functionality

70
00:03:03,760 --> 00:03:05,760
therefore we scan the

71
00:03:05,760 --> 00:03:09,360
apisu the apis in the app to determine

72
00:03:09,360 --> 00:03:13,200
which profile is needed by app

73
00:03:13,200 --> 00:03:15,519
once the profile is identified we

74
00:03:15,519 --> 00:03:18,400
perform the host code deploy so the

75
00:03:18,400 --> 00:03:21,760
first step is to determine which part of

76
00:03:21,760 --> 00:03:25,920
the code is needed by the profile

77
00:03:25,920 --> 00:03:28,560
one challenge is that different profiles

78
00:03:28,560 --> 00:03:30,400
might be coupled

79
00:03:30,400 --> 00:03:33,040
for example in this function

80
00:03:33,040 --> 00:03:35,280
the functions from different profiles

81
00:03:35,280 --> 00:03:38,560
like hands-free headset and a2dp are

82
00:03:38,560 --> 00:03:41,280
coupled together

83
00:03:41,280 --> 00:03:42,000
so

84
00:03:42,000 --> 00:03:45,440
one solution to this problem is the

85
00:03:45,440 --> 00:03:48,159
profile data analysis

86
00:03:48,159 --> 00:03:50,799
the function at the right side is from

87
00:03:50,799 --> 00:03:53,280
the a2dp profile

88
00:03:53,280 --> 00:03:56,080
if we can make sure that only the a2dp

89
00:03:56,080 --> 00:03:59,280
profile is needed and we could propagate

90
00:03:59,280 --> 00:04:01,040
the constant value

91
00:04:01,040 --> 00:04:04,319
in the right function to the functions

92
00:04:04,319 --> 00:04:06,080
at the left side

93
00:04:06,080 --> 00:04:08,159
then we are able to remove other switch

94
00:04:08,159 --> 00:04:09,200
cases

95
00:04:09,200 --> 00:04:11,280
in the left function to decouple

96
00:04:11,280 --> 00:04:14,080
different profiles

97
00:04:14,080 --> 00:04:17,519
however one profile has several

98
00:04:17,519 --> 00:04:20,000
entry functions like the code snippet

99
00:04:20,000 --> 00:04:21,279
shows

100
00:04:21,279 --> 00:04:23,600
which makes the data analysis cannot

101
00:04:23,600 --> 00:04:26,000
directly apply

102
00:04:26,000 --> 00:04:29,360
to solve this problem we pro we we

103
00:04:29,360 --> 00:04:31,840
transformed the multi-entry interface

104
00:04:31,840 --> 00:04:34,400
into a single entry interface

105
00:04:34,400 --> 00:04:37,360
specifically we divided the profile into

106
00:04:37,360 --> 00:04:40,080
functions into three categories

107
00:04:40,080 --> 00:04:43,280
initiating functioning and ending

108
00:04:43,280 --> 00:04:45,199
and then we created a dummy function

109
00:04:45,199 --> 00:04:46,240
calling

110
00:04:46,240 --> 00:04:48,720
the entry functions in such an order to

111
00:04:48,720 --> 00:04:51,759
mimic the profile lifecycle

112
00:04:51,759 --> 00:04:53,600
dummy function calls the initiating

113
00:04:53,600 --> 00:04:56,080
functions first and then the functioning

114
00:04:56,080 --> 00:04:57,440
functions

115
00:04:57,440 --> 00:05:00,479
and at last the ending functions

116
00:05:00,479 --> 00:05:01,600
after this

117
00:05:01,600 --> 00:05:04,639
we perform the data analysis to decouple

118
00:05:04,639 --> 00:05:06,639
different profiles

119
00:05:06,639 --> 00:05:07,440
and

120
00:05:07,440 --> 00:05:11,280
identify the needed code

121
00:05:11,280 --> 00:05:13,680
of our profile

122
00:05:13,680 --> 00:05:15,520
and then we are able to remove the

123
00:05:15,520 --> 00:05:19,120
needle code and extract the used hci

124
00:05:19,120 --> 00:05:22,320
commands from the needed code

125
00:05:22,320 --> 00:05:24,880
at the extracted hci commands will be

126
00:05:24,880 --> 00:05:28,560
used in the formativity

127
00:05:29,199 --> 00:05:31,440
when the firmware receives an hci

128
00:05:31,440 --> 00:05:33,919
command from the host code it first

129
00:05:33,919 --> 00:05:37,280
dispatches this hci command to is

130
00:05:37,280 --> 00:05:40,000
corresponding each segment handler

131
00:05:40,000 --> 00:05:42,639
and then the handler handles this

132
00:05:42,639 --> 00:05:44,960
command

133
00:05:44,960 --> 00:05:46,800
so the most important step is to

134
00:05:46,800 --> 00:05:49,680
identify the dispatcher function

135
00:05:49,680 --> 00:05:51,440
the close the source nature of the

136
00:05:51,440 --> 00:05:54,639
firmware introduces unique challenges

137
00:05:54,639 --> 00:05:57,360
to the identification

138
00:05:57,360 --> 00:05:59,919
so lightblue user uses a two-step

139
00:05:59,919 --> 00:06:02,240
approach to identify the dispatcher

140
00:06:02,240 --> 00:06:03,680
function

141
00:06:03,680 --> 00:06:07,919
first it scans the whole formula to

142
00:06:07,919 --> 00:06:11,440
find all the candidate functions

143
00:06:11,440 --> 00:06:13,680
and then it verifies each of the

144
00:06:13,680 --> 00:06:16,319
candidate function to find the correct

145
00:06:16,319 --> 00:06:18,880
dispatch function

146
00:06:18,880 --> 00:06:21,919
this figure shows the format of an hci

147
00:06:21,919 --> 00:06:24,479
command as we can see

148
00:06:24,479 --> 00:06:28,639
it contains a opcode field consisting of

149
00:06:28,639 --> 00:06:32,319
ocf and ogf two subfields

150
00:06:32,319 --> 00:06:35,199
so in order to correctly pass the ngcr

151
00:06:35,199 --> 00:06:36,080
command

152
00:06:36,080 --> 00:06:38,720
some bitwise operations are needed to

153
00:06:38,720 --> 00:06:42,400
extract the ocf and odf way

154
00:06:42,400 --> 00:06:44,880
therefore we scan for functions

155
00:06:44,880 --> 00:06:46,639
containing those

156
00:06:46,639 --> 00:06:50,160
bitwise operation patterns and find

157
00:06:50,160 --> 00:06:53,440
all the candidate functions

158
00:06:53,680 --> 00:06:55,919
then we will verify each of them using

159
00:06:55,919 --> 00:06:57,280
the

160
00:06:57,280 --> 00:07:00,400
hci command semantics this picture shows

161
00:07:00,400 --> 00:07:01,360
the

162
00:07:01,360 --> 00:07:03,520
they read bluetooth address into their

163
00:07:03,520 --> 00:07:05,039
command

164
00:07:05,039 --> 00:07:07,680
so we set the up code

165
00:07:07,680 --> 00:07:09,680
to the read bluetooth address command

166
00:07:09,680 --> 00:07:12,080
and symbolically execute each of the

167
00:07:12,080 --> 00:07:14,240
candidate function

168
00:07:14,240 --> 00:07:16,880
then we check then during the execution

169
00:07:16,880 --> 00:07:19,360
we check whether the expected value is

170
00:07:19,360 --> 00:07:21,199
accessed or not

171
00:07:21,199 --> 00:07:23,919
here the expected value is the bluetooth

172
00:07:23,919 --> 00:07:25,440
address

173
00:07:25,440 --> 00:07:28,240
if the expectative value is accessed we

174
00:07:28,240 --> 00:07:30,800
can make sure the current candidate is

175
00:07:30,800 --> 00:07:34,000
the correct dispatch function

176
00:07:34,000 --> 00:07:35,120
once the

177
00:07:35,120 --> 00:07:37,360
dispatch function is identified we can

178
00:07:37,360 --> 00:07:38,800
easily identify

179
00:07:38,800 --> 00:07:41,919
all the hci command handlers

180
00:07:41,919 --> 00:07:44,879
recall that we extract the used hci

181
00:07:44,879 --> 00:07:47,680
commands from the host code analysis

182
00:07:47,680 --> 00:07:51,120
so here we could keep the

183
00:07:51,120 --> 00:07:55,039
issi handlers that handle the used htc

184
00:07:55,039 --> 00:07:57,599
accounts and remove all other hdi

185
00:07:57,599 --> 00:07:59,680
command handlers to deploy to the

186
00:07:59,680 --> 00:08:02,160
firmware

187
00:08:02,400 --> 00:08:04,560
we implement light blue

188
00:08:04,560 --> 00:08:06,319
based on lvm

189
00:08:06,319 --> 00:08:08,080
and angular

190
00:08:08,080 --> 00:08:09,919
and we evaluate light blue on four

191
00:08:09,919 --> 00:08:12,720
pieces of host code and three pieces of

192
00:08:12,720 --> 00:08:15,199
formula

193
00:08:15,280 --> 00:08:17,520
to evaluate the host code uploading we

194
00:08:17,520 --> 00:08:20,080
first keep each of the possible profiles

195
00:08:20,080 --> 00:08:23,280
on for different platforms

196
00:08:23,599 --> 00:08:27,120
and deployed all others light blue can

197
00:08:27,120 --> 00:08:30,160
achieve around 40 code reduction

198
00:08:30,160 --> 00:08:34,519
uh on blue droid and it's 37

199
00:08:34,519 --> 00:08:36,080
33.7

200
00:08:36,080 --> 00:08:38,640
on floyd lucy has the lowest coda

201
00:08:38,640 --> 00:08:40,919
reduction rate which is

202
00:08:40,919 --> 00:08:44,080
31.7 and blue kitchen has the highest

203
00:08:44,080 --> 00:08:47,000
circular reduction rate which is 49 per

204
00:08:47,000 --> 00:08:49,839
49.1 percent

205
00:08:49,839 --> 00:08:51,680
besides

206
00:08:51,680 --> 00:08:53,279
we also keep the

207
00:08:53,279 --> 00:08:56,399
five common profile combinations

208
00:08:56,399 --> 00:09:00,160
and deployed or others

209
00:09:00,240 --> 00:09:01,279
compared

210
00:09:01,279 --> 00:09:04,320
compared with kb only one profile the

211
00:09:04,320 --> 00:09:07,519
code reduction rate drops slightly when

212
00:09:07,519 --> 00:09:09,120
keeping a

213
00:09:09,120 --> 00:09:12,320
profile combination

214
00:09:13,360 --> 00:09:15,279
to evaluate the fro

215
00:09:15,279 --> 00:09:17,920
for the formula develop deploying light

216
00:09:17,920 --> 00:09:19,279
blue can

217
00:09:19,279 --> 00:09:20,519
can remove

218
00:09:20,519 --> 00:09:23,760
65 percent of the hci command header on

219
00:09:23,760 --> 00:09:28,560
the firmware of bcm43 39

220
00:09:28,560 --> 00:09:32,399
and can remove 57 of the

221
00:09:32,399 --> 00:09:35,480
handlers on the formula of pcm

222
00:09:35,480 --> 00:09:38,640
4343 oe1

223
00:09:38,640 --> 00:09:40,800
the firmware of the development board

224
00:09:40,800 --> 00:09:42,040
cyw

225
00:09:42,040 --> 00:09:46,560
2073 5b1 has the highest code rate

226
00:09:46,560 --> 00:09:50,000
reduction uh sorry has the high history

227
00:09:50,000 --> 00:09:52,959
hci command handler reduction rate

228
00:09:52,959 --> 00:09:56,959
which is 83 percent

229
00:09:57,920 --> 00:10:00,320
through developing different profiles

230
00:10:00,320 --> 00:10:02,880
live blue can

231
00:10:02,880 --> 00:10:06,320
can prevent 29 vulnerabilities

232
00:10:06,320 --> 00:10:08,079
as the table shows

233
00:10:08,079 --> 00:10:11,279
and out of the 20 vulnerabilities 15 of

234
00:10:11,279 --> 00:10:15,120
them can be triggered over the air

235
00:10:15,120 --> 00:10:18,880
through deploting the unneeded profiles

236
00:10:18,880 --> 00:10:22,079
live blue can permit attacks like

237
00:10:22,079 --> 00:10:25,599
blueprint and about bluetooth

238
00:10:25,920 --> 00:10:28,720
to sum up we developed a new technique

239
00:10:28,720 --> 00:10:31,760
to identify the needed code

240
00:10:31,760 --> 00:10:34,160
in the bluetooth stack

241
00:10:34,160 --> 00:10:35,760
and we build the live blue to

242
00:10:35,760 --> 00:10:38,399
automatically deploy the any data code

243
00:10:38,399 --> 00:10:42,720
from both the host code and the firmware

244
00:10:42,720 --> 00:10:45,120
i evaluate live blue on four different

245
00:10:45,120 --> 00:10:47,839
platforms

246
00:10:48,000 --> 00:10:51,760
and the light blue is open source

247
00:10:52,160 --> 00:10:54,880
that's all for my presentation thank you

248
00:10:54,880 --> 00:10:59,000
and be glad to take questions

249
00:11:05,200 --> 00:11:07,279
you

