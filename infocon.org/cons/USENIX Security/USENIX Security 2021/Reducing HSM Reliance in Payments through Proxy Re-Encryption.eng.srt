1
00:00:08,800 --> 00:00:11,519
hello i'm gavin watson here i will talk

2
00:00:11,519 --> 00:00:13,759
about reducing hsm reliance and payments

3
00:00:13,759 --> 00:00:15,759
through proxy re-encryption this is

4
00:00:15,759 --> 00:00:18,400
joint work with siva gadam atul lux and

5
00:00:18,400 --> 00:00:20,720
rohit sinha

6
00:00:20,720 --> 00:00:23,119
pins or personal identification numbers

7
00:00:23,119 --> 00:00:25,119
are a primary method for performing user

8
00:00:25,119 --> 00:00:26,480
authentication

9
00:00:26,480 --> 00:00:28,800
the use of a short four digit pin is now

10
00:00:28,800 --> 00:00:30,240
a common method for performing

11
00:00:30,240 --> 00:00:32,479
cardholder verification at a point of

12
00:00:32,479 --> 00:00:34,718
sale

13
00:00:35,520 --> 00:00:37,680
when we enter our pin on a point of sale

14
00:00:37,680 --> 00:00:40,399
device it has to be encrypted to ensure

15
00:00:40,399 --> 00:00:41,760
its secure and confidential

16
00:00:41,760 --> 00:00:43,760
transportation to the issuing bank where

17
00:00:43,760 --> 00:00:47,039
the pin will be verified

18
00:00:47,600 --> 00:00:49,600
the reality of this transportation of

19
00:00:49,600 --> 00:00:51,360
the pin from the point of sale to the

20
00:00:51,360 --> 00:00:52,879
issuing bank is a little more

21
00:00:52,879 --> 00:00:54,480
complicated than what it might seem at

22
00:00:54,480 --> 00:00:56,079
first

23
00:00:56,079 --> 00:00:58,640
first note that we're not directly

24
00:00:58,640 --> 00:01:00,719
communicating with the issuing bank

25
00:01:00,719 --> 00:01:02,559
after it leaves the point of sale the

26
00:01:02,559 --> 00:01:04,720
encrypted pin must traverse a number of

27
00:01:04,720 --> 00:01:06,960
different intermediaries before it gets

28
00:01:06,960 --> 00:01:09,600
routed finally to the issuing bank

29
00:01:09,600 --> 00:01:11,920
at each of these hops along the chain a

30
00:01:11,920 --> 00:01:13,520
different layer of encryption will be

31
00:01:13,520 --> 00:01:15,839
used

32
00:01:17,280 --> 00:01:19,040
when we first of all enter our pin on

33
00:01:19,040 --> 00:01:20,640
the point of sale device it will be

34
00:01:20,640 --> 00:01:22,799
encrypted using a symmetric encryption

35
00:01:22,799 --> 00:01:23,920
key

36
00:01:23,920 --> 00:01:26,240
this encrypted pin is then sent to the

37
00:01:26,240 --> 00:01:29,920
first intermediary along the path

38
00:01:29,920 --> 00:01:32,159
at the payment gateway it will first of

39
00:01:32,159 --> 00:01:33,840
all be decrypted

40
00:01:33,840 --> 00:01:36,400
using the black key and then encrypted

41
00:01:36,400 --> 00:01:38,960
under a new key the yellow key which

42
00:01:38,960 --> 00:01:41,439
would be shared with the merchant bank

43
00:01:41,439 --> 00:01:43,920
this decrypt encrypt operation is known

44
00:01:43,920 --> 00:01:46,159
as a pin translation and is performed

45
00:01:46,159 --> 00:01:48,240
within a special hardened appliance

46
00:01:48,240 --> 00:01:50,720
known as a hardware security module

47
00:01:50,720 --> 00:01:53,439
hardware security modules or hsms are

48
00:01:53,439 --> 00:01:55,680
used for performing cryptographic

49
00:01:55,680 --> 00:01:57,840
operations securely and for securing

50
00:01:57,840 --> 00:01:59,600
those cryptographic keys

51
00:01:59,600 --> 00:02:02,079
they are tamper resistant to ensure that

52
00:02:02,079 --> 00:02:05,119
no key or intermediate plaintext would

53
00:02:05,119 --> 00:02:07,759
be exposed during the pin translation

54
00:02:07,759 --> 00:02:10,318
operation

55
00:02:11,280 --> 00:02:13,040
as we traverse along the path a

56
00:02:13,040 --> 00:02:14,800
different pen translation is performed

57
00:02:14,800 --> 00:02:16,239
between each hop

58
00:02:16,239 --> 00:02:18,000
at the merchant bank we decrypt from the

59
00:02:18,000 --> 00:02:19,680
yellow key and then encrypt under the

60
00:02:19,680 --> 00:02:21,040
red key

61
00:02:21,040 --> 00:02:23,200
then from the red key to the blue key

62
00:02:23,200 --> 00:02:25,520
before finally issuing bank inside their

63
00:02:25,520 --> 00:02:28,239
hsm a decryption operation is performed

64
00:02:28,239 --> 00:02:30,720
to obtain the pin and then a verify

65
00:02:30,720 --> 00:02:32,879
operation is used to match it against

66
00:02:32,879 --> 00:02:35,280
the pin on record

67
00:02:35,280 --> 00:02:38,400
we note here that there's a pairwise

68
00:02:38,400 --> 00:02:40,239
setup of these different keys each

69
00:02:40,239 --> 00:02:43,040
neighboring party has a shared symmetric

70
00:02:43,040 --> 00:02:45,599
encryption key which is used to help

71
00:02:45,599 --> 00:02:47,840
translate the pin as it goes across the

72
00:02:47,840 --> 00:02:50,480
path to the issuing bank

73
00:02:50,480 --> 00:02:53,200
hsms are special purpose hardware and as

74
00:02:53,200 --> 00:02:55,040
such they come at a cost

75
00:02:55,040 --> 00:02:57,360
they can be expensive and can sometimes

76
00:02:57,360 --> 00:02:59,440
be hard to manage

77
00:02:59,440 --> 00:03:01,120
we want to look to see if a different

78
00:03:01,120 --> 00:03:03,360
approach is possible can we reduce

79
00:03:03,360 --> 00:03:06,000
reliance on hsms using more advanced

80
00:03:06,000 --> 00:03:08,560
cryptographic techniques

81
00:03:08,560 --> 00:03:10,239
of course with that in mind we still

82
00:03:10,239 --> 00:03:12,480
must keep some restrictions with the

83
00:03:12,480 --> 00:03:14,159
particular application we are thinking

84
00:03:14,159 --> 00:03:15,440
about

85
00:03:15,440 --> 00:03:17,760
for pins we must make sure that we never

86
00:03:17,760 --> 00:03:20,480
expose the pins in plain text out with

87
00:03:20,480 --> 00:03:23,120
trusted hardware

88
00:03:23,120 --> 00:03:25,200
we also must keep in mind that we can

89
00:03:25,200 --> 00:03:27,440
only do pairwise key setup between

90
00:03:27,440 --> 00:03:29,360
neighboring parties

91
00:03:29,360 --> 00:03:31,440
and then finally because payments is

92
00:03:31,440 --> 00:03:33,200
primarily standards based and

93
00:03:33,200 --> 00:03:35,519
interoperability should be insured that

94
00:03:35,519 --> 00:03:37,280
means we need to keep the maximum

95
00:03:37,280 --> 00:03:38,480
possible amount of backwards

96
00:03:38,480 --> 00:03:41,359
compatibility

97
00:03:43,200 --> 00:03:45,120
so finding a different solution how can

98
00:03:45,120 --> 00:03:47,840
we move an h away from hsms

99
00:03:47,840 --> 00:03:50,080
well a naive approach would just be to

100
00:03:50,080 --> 00:03:51,840
think well why don't we just use public

101
00:03:51,840 --> 00:03:53,840
key encryption

102
00:03:53,840 --> 00:03:56,720
at the pos device we have

103
00:03:56,720 --> 00:03:58,640
perhaps a public key for the issuing

104
00:03:58,640 --> 00:04:00,640
bank which we could get from the car the

105
00:04:00,640 --> 00:04:02,720
card was issued by the issuing bank so

106
00:04:02,720 --> 00:04:04,959
if it can put the public key there this

107
00:04:04,959 --> 00:04:06,959
can be given to the pos can then use

108
00:04:06,959 --> 00:04:09,280
that to directly encrypt the pin under

109
00:04:09,280 --> 00:04:12,480
something known by the issuer bank

110
00:04:12,480 --> 00:04:14,799
then no pin translation is required

111
00:04:14,799 --> 00:04:16,798
because it's encrypted directly under

112
00:04:16,798 --> 00:04:18,478
something which the issuer bank can

113
00:04:18,478 --> 00:04:20,639
decrypt

114
00:04:20,639 --> 00:04:22,639
the problem with this is it doesn't have

115
00:04:22,639 --> 00:04:24,880
that level of backwards compatibility it

116
00:04:24,880 --> 00:04:26,720
would require significant changes to the

117
00:04:26,720 --> 00:04:29,440
emv standard and it would require

118
00:04:29,440 --> 00:04:31,520
changes to all cards that means you'd

119
00:04:31,520 --> 00:04:33,120
have to reissue all cards that are in

120
00:04:33,120 --> 00:04:34,720
the field which would come with

121
00:04:34,720 --> 00:04:37,680
significant cost

122
00:04:38,000 --> 00:04:39,759
so how about a different approach can we

123
00:04:39,759 --> 00:04:41,919
use a more advanced technique but what

124
00:04:41,919 --> 00:04:43,680
we want to look at is something known as

125
00:04:43,680 --> 00:04:46,720
proxy re-encryption

126
00:04:47,360 --> 00:04:49,520
what is proxy re-encryption

127
00:04:49,520 --> 00:04:51,360
proxy re-encryption allows you to

128
00:04:51,360 --> 00:04:53,360
delegate the decryption ability to

129
00:04:53,360 --> 00:04:55,199
someone else

130
00:04:55,199 --> 00:04:58,080
consider the example of alice and bob

131
00:04:58,080 --> 00:05:00,639
they work in the same office

132
00:05:00,639 --> 00:05:02,560
alice receives encrypted emails which

133
00:05:02,560 --> 00:05:05,280
she has to deal with day to day

134
00:05:05,280 --> 00:05:07,520
however when alice goes on vacation

135
00:05:07,520 --> 00:05:09,759
she'll be out of the office

136
00:05:09,759 --> 00:05:10,800
and so

137
00:05:10,800 --> 00:05:13,199
bob would need to decrypt alice's emails

138
00:05:13,199 --> 00:05:15,680
to be able to do the work that she would

139
00:05:15,680 --> 00:05:19,840
do while she's on vacation

140
00:05:19,840 --> 00:05:22,000
so without alice giving her secret key

141
00:05:22,000 --> 00:05:23,759
to bob how can you do this

142
00:05:23,759 --> 00:05:26,400
well performing proxy re-encryption we

143
00:05:26,400 --> 00:05:28,560
would take any ciphertext encrypted for

144
00:05:28,560 --> 00:05:31,039
alice and then using a special

145
00:05:31,039 --> 00:05:32,960
re-encryption operation performed by the

146
00:05:32,960 --> 00:05:35,600
proxy it would translate ciphertext for

147
00:05:35,600 --> 00:05:38,000
alice encrypted under her hardkey to

148
00:05:38,000 --> 00:05:40,320
ciphertext for bob encrypted under his

149
00:05:40,320 --> 00:05:42,800
key which he can then decrypt and do the

150
00:05:42,800 --> 00:05:46,400
work that needs to be done on that data

151
00:05:48,000 --> 00:05:50,160
in a little bit more detail if you think

152
00:05:50,160 --> 00:05:51,919
about a public key encryption scheme it

153
00:05:51,919 --> 00:05:54,080
consists of three algorithms a key

154
00:05:54,080 --> 00:05:55,680
generation algorithm an encryption

155
00:05:55,680 --> 00:05:57,520
algorithm and a degree decryption

156
00:05:57,520 --> 00:05:58,639
algorithm

157
00:05:58,639 --> 00:06:00,800
this is the same for proxy re-encryption

158
00:06:00,800 --> 00:06:02,319
with the addition of two further

159
00:06:02,319 --> 00:06:03,680
algorithms

160
00:06:03,680 --> 00:06:05,840
a re-key generation algorithm which

161
00:06:05,840 --> 00:06:08,000
takes as input two different keys and

162
00:06:08,000 --> 00:06:10,080
will put a re-encryption key which goes

163
00:06:10,080 --> 00:06:12,160
from the source key to the destination

164
00:06:12,160 --> 00:06:13,120
key

165
00:06:13,120 --> 00:06:14,880
and then a re-encrypt operation which

166
00:06:14,880 --> 00:06:16,319
takes as input this re-encryption

167
00:06:16,319 --> 00:06:18,400
operation and a ciphertext will

168
00:06:18,400 --> 00:06:20,960
translate that ciphertext to b for party

169
00:06:20,960 --> 00:06:22,400
i to b

170
00:06:22,400 --> 00:06:26,080
and then a ciphertext for party j

171
00:06:26,080 --> 00:06:28,080
just like to note briefly there's two

172
00:06:28,080 --> 00:06:30,000
different flavors of pre and this

173
00:06:30,000 --> 00:06:31,600
results in two different types of re-key

174
00:06:31,600 --> 00:06:33,039
generation algorithm

175
00:06:33,039 --> 00:06:35,120
there's bi-directional pre schemes where

176
00:06:35,120 --> 00:06:36,639
the re-key generation algorithm takes

177
00:06:36,639 --> 00:06:38,479
this input the source secret key and the

178
00:06:38,479 --> 00:06:40,479
destination secret key to output the

179
00:06:40,479 --> 00:06:41,759
re-key

180
00:06:41,759 --> 00:06:43,680
and then the unidirectional setting

181
00:06:43,680 --> 00:06:46,080
where the input is the source secret key

182
00:06:46,080 --> 00:06:49,840
and the destination public key

183
00:06:51,280 --> 00:06:54,000
okay back to the payment setting how do

184
00:06:54,000 --> 00:06:55,919
we want to apply proxy re-encryption to

185
00:06:55,919 --> 00:06:59,280
payments to reduce our reliance on hsms

186
00:06:59,280 --> 00:07:00,800
well in the traditional picture we have

187
00:07:00,800 --> 00:07:03,199
all these different hsms along the way

188
00:07:03,199 --> 00:07:06,080
we want to eliminate the hsms on these

189
00:07:06,080 --> 00:07:07,680
intermediary humps

190
00:07:07,680 --> 00:07:09,599
of course we can't eliminate the hsm at

191
00:07:09,599 --> 00:07:11,199
the final hop because that's where we

192
00:07:11,199 --> 00:07:13,199
have to decrypt the pin look at it and

193
00:07:13,199 --> 00:07:15,039
verify that and we want to keep that

194
00:07:15,039 --> 00:07:17,440
operation all performed within trusted

195
00:07:17,440 --> 00:07:19,280
hardware so as not to expose the

196
00:07:19,280 --> 00:07:22,000
plaintext pin

197
00:07:22,000 --> 00:07:24,639
okay so we've eliminated these hsms and

198
00:07:24,639 --> 00:07:26,400
intermediary hops what are we replacing

199
00:07:26,400 --> 00:07:27,520
them with

200
00:07:27,520 --> 00:07:30,000
well that's with our proxy re-encryption

201
00:07:30,000 --> 00:07:31,520
now at these intermediary hops we're

202
00:07:31,520 --> 00:07:33,440
going to use the re-encryption key and

203
00:07:33,440 --> 00:07:36,080
the re-encrypt operation to translate

204
00:07:36,080 --> 00:07:38,400
between the different keys as it passes

205
00:07:38,400 --> 00:07:39,280
up

206
00:07:39,280 --> 00:07:42,960
along the path to the issuing bank

207
00:07:42,960 --> 00:07:45,840
the advantages of using this pre scheme

208
00:07:45,840 --> 00:07:48,720
um are that we've replaced hsms so we

209
00:07:48,720 --> 00:07:50,479
don't need any specialized hardware

210
00:07:50,479 --> 00:07:52,800
hardware that can sometimes come at cost

211
00:07:52,800 --> 00:07:54,960
we're working in a pure software

212
00:07:54,960 --> 00:07:57,039
solution so that means we get better

213
00:07:57,039 --> 00:07:59,039
scaling and elasticity than we would

214
00:07:59,039 --> 00:08:00,960
with a hardware-based approach

215
00:08:00,960 --> 00:08:03,360
and then finally pre has equivalent

216
00:08:03,360 --> 00:08:05,039
level of security because this

217
00:08:05,039 --> 00:08:07,039
re-encrypt operation does not expose the

218
00:08:07,039 --> 00:08:11,318
plaintext during re-encryption

219
00:08:12,000 --> 00:08:13,759
so as i just mentioned we now need to

220
00:08:13,759 --> 00:08:15,280
look at what the scheme is that we're

221
00:08:15,280 --> 00:08:16,960
going to use so after an extensive

222
00:08:16,960 --> 00:08:18,879
literary review we saw that none of the

223
00:08:18,879 --> 00:08:20,160
schemes that are available in the ritual

224
00:08:20,160 --> 00:08:22,000
today exactly match with the

225
00:08:22,000 --> 00:08:24,080
requirements we have so we have to come

226
00:08:24,080 --> 00:08:26,400
up with a new scheme and for for our

227
00:08:26,400 --> 00:08:28,799
setting

228
00:08:28,879 --> 00:08:30,960
at a high level the essence of our

229
00:08:30,960 --> 00:08:33,039
scheme is to take a bi-directional proxy

230
00:08:33,039 --> 00:08:35,279
re-encryption scheme and then use it

231
00:08:35,279 --> 00:08:36,880
under the hybrid encryption paradigm

232
00:08:36,880 --> 00:08:38,320
where we have a key encapsulation

233
00:08:38,320 --> 00:08:40,320
mechanism and a data encapsulation

234
00:08:40,320 --> 00:08:43,519
mechanism here our pre scheme will form

235
00:08:43,519 --> 00:08:45,440
the chem and then we'll use a symmetric

236
00:08:45,440 --> 00:08:47,440
encryption scheme for performing the dam

237
00:08:47,440 --> 00:08:50,959
and the actual encryption off the pin

238
00:08:51,040 --> 00:08:53,040
so the cam borrows ideas from the

239
00:08:53,040 --> 00:08:55,920
original babs pre scheme

240
00:08:55,920 --> 00:08:57,440
from eurocrypt

241
00:08:57,440 --> 00:09:00,000
in the late 90s

242
00:09:00,000 --> 00:09:01,120
our dem

243
00:09:01,120 --> 00:09:03,440
actually looks at the existing pin block

244
00:09:03,440 --> 00:09:05,839
encryption that is used today

245
00:09:05,839 --> 00:09:08,080
and does exactly that so we have our

246
00:09:08,080 --> 00:09:10,399
symmetric key encrypted under our pre

247
00:09:10,399 --> 00:09:12,640
scheme and then we use the symmetric key

248
00:09:12,640 --> 00:09:15,760
to create what is practically a standard

249
00:09:15,760 --> 00:09:19,680
pin block um encrypting the pin itself

250
00:09:19,680 --> 00:09:21,279
this ensures we have the maximum

251
00:09:21,279 --> 00:09:22,480
possible amount of backward

252
00:09:22,480 --> 00:09:24,320
compatibility with the existing

253
00:09:24,320 --> 00:09:27,519
standards and systems

254
00:09:28,480 --> 00:09:31,600
our scheme is provedly secure and we do

255
00:09:31,600 --> 00:09:32,959
this in a model which accurately

256
00:09:32,959 --> 00:09:35,040
represents the payment setting we have

257
00:09:35,040 --> 00:09:37,920
further discussion on that in the paper

258
00:09:37,920 --> 00:09:41,360
in addition we extend literature for pre

259
00:09:41,360 --> 00:09:43,519
schemes by extending

260
00:09:43,519 --> 00:09:46,160
recent hra or honesty encryption attack

261
00:09:46,160 --> 00:09:50,839
models to to our setting

262
00:09:51,120 --> 00:09:52,720
after introducing our new scheme and

263
00:09:52,720 --> 00:09:54,720
proving a secure we want to look at its

264
00:09:54,720 --> 00:09:56,160
performance to see how it matches

265
00:09:56,160 --> 00:09:58,240
against the traditional approach

266
00:09:58,240 --> 00:09:59,680
in the traditional approach when we use

267
00:09:59,680 --> 00:10:02,320
an hsm as this is a special hardware

268
00:10:02,320 --> 00:10:04,240
appliance there is the added network

269
00:10:04,240 --> 00:10:06,079
latency of making a call from the

270
00:10:06,079 --> 00:10:08,880
processing server across to the hsm for

271
00:10:08,880 --> 00:10:11,760
doing the pin translation operation

272
00:10:11,760 --> 00:10:14,320
as pre is a pure software solution we do

273
00:10:14,320 --> 00:10:16,160
not need to make this additional network

274
00:10:16,160 --> 00:10:18,160
call so we have the cost savings

275
00:10:18,160 --> 00:10:20,240
therefore at each of our hops along the

276
00:10:20,240 --> 00:10:21,760
path

277
00:10:21,760 --> 00:10:24,000
you will notice that the the total

278
00:10:24,000 --> 00:10:26,000
latency for our protocol

279
00:10:26,000 --> 00:10:27,760
is more than half that of the

280
00:10:27,760 --> 00:10:29,920
traditional approach

281
00:10:29,920 --> 00:10:32,000
you might ask why there is no cost for

282
00:10:32,000 --> 00:10:33,519
our pure ebay solution at the merchant

283
00:10:33,519 --> 00:10:35,519
bank that's related to the way we

284
00:10:35,519 --> 00:10:37,120
perform key management when using a

285
00:10:37,120 --> 00:10:39,360
bidirectional scheme and in fact we

286
00:10:39,360 --> 00:10:40,880
don't need to perform any re-encropped

287
00:10:40,880 --> 00:10:42,880
operation it just simply acts as a

288
00:10:42,880 --> 00:10:44,640
pass-through between the gateway and the

289
00:10:44,640 --> 00:10:47,120
network

290
00:10:47,120 --> 00:10:48,640
further details on our performance

291
00:10:48,640 --> 00:10:50,720
evaluation and what it would look like

292
00:10:50,720 --> 00:10:52,880
in terms of performance across a

293
00:10:52,880 --> 00:10:54,880
migration strategy are given in the

294
00:10:54,880 --> 00:10:57,200
paper

295
00:10:57,839 --> 00:10:59,680
well let's revisit our goals so our

296
00:10:59,680 --> 00:11:02,560
goals were to reduce the number of hsms

297
00:11:02,560 --> 00:11:04,399
and we've done that we've shown that by

298
00:11:04,399 --> 00:11:06,480
using the proxy re-encryption we can all

299
00:11:06,480 --> 00:11:09,839
but eliminate hsms in the online flow

300
00:11:09,839 --> 00:11:11,440
apart from of course at the issuing bank

301
00:11:11,440 --> 00:11:14,240
where it will still be necessary

302
00:11:14,240 --> 00:11:15,519
thanks to the security properties of

303
00:11:15,519 --> 00:11:17,680
proxy re-encryption we still ensure that

304
00:11:17,680 --> 00:11:20,560
pins only appearing in clear inside of

305
00:11:20,560 --> 00:11:22,800
trusted hardware

306
00:11:22,800 --> 00:11:24,480
due to the way we've constructed based

307
00:11:24,480 --> 00:11:26,560
on the chem then paradigm and keeping

308
00:11:26,560 --> 00:11:28,880
our dem in line with the existing pin

309
00:11:28,880 --> 00:11:30,560
standard we've ensured the maximum

310
00:11:30,560 --> 00:11:33,040
possible backwards compatibility

311
00:11:33,040 --> 00:11:34,640
and then our final goal of ensuring

312
00:11:34,640 --> 00:11:36,320
pairwise key setup

313
00:11:36,320 --> 00:11:38,000
and some subtleties there that i've not

314
00:11:38,000 --> 00:11:40,079
gone into in this talk but we do discuss

315
00:11:40,079 --> 00:11:42,079
further in the paper is that when we use

316
00:11:42,079 --> 00:11:44,320
a bi-directional pre scheme we only

317
00:11:44,320 --> 00:11:48,079
achieve this to a partial level

318
00:11:48,079 --> 00:11:50,160
the solution to get full pairwise key

319
00:11:50,160 --> 00:11:52,079
setup would be to instead use a

320
00:11:52,079 --> 00:11:54,000
unidirectional pr scheme

321
00:11:54,000 --> 00:11:56,079
but the roadblock in doing that is the

322
00:11:56,079 --> 00:11:59,040
efficiency and added costs of doing that

323
00:11:59,040 --> 00:12:01,360
so it's not going to be practical in our

324
00:12:01,360 --> 00:12:06,120
payment setting at this current time

325
00:12:13,040 --> 00:12:15,120
you

