1
00:00:08,240 --> 00:00:10,000
hi everyone my name is christopher

2
00:00:10,000 --> 00:00:11,599
torres i'm a phd student at the

3
00:00:11,599 --> 00:00:13,679
university of waxman and today we'll be

4
00:00:13,679 --> 00:00:15,360
presenting a word called frontrunner

5
00:00:15,360 --> 00:00:17,600
jones and the radius of the dark force

6
00:00:17,600 --> 00:00:19,279
an empirical study of front running on

7
00:00:19,279 --> 00:00:21,600
ethereum blockchain this joint work my

8
00:00:21,600 --> 00:00:24,640
colleagues ramiro camino and ryder start

9
00:00:24,640 --> 00:00:26,880
now before i dive deeper into our study

10
00:00:26,880 --> 00:00:28,640
i will quickly give a short introduction

11
00:00:28,640 --> 00:00:30,400
into what is known as a dark force in a

12
00:00:30,400 --> 00:00:31,840
few

13
00:00:31,840 --> 00:00:33,600
now let's briefly recap the mining

14
00:00:33,600 --> 00:00:35,120
process into fury

15
00:00:35,120 --> 00:00:37,280
assume we have a network of four nodes

16
00:00:37,280 --> 00:00:38,960
where each node has its own pool of

17
00:00:38,960 --> 00:00:41,200
pending transactions also known as the

18
00:00:41,200 --> 00:00:42,640
mempool

19
00:00:42,640 --> 00:00:44,480
pending transactions are transactions

20
00:00:44,480 --> 00:00:46,000
that are waiting to be included in the

21
00:00:46,000 --> 00:00:47,440
next block

22
00:00:47,440 --> 00:00:49,600
now if a user wants its own transaction

23
00:00:49,600 --> 00:00:52,000
to be included he or she has to first

24
00:00:52,000 --> 00:00:53,920
send this transaction to one of the

25
00:00:53,920 --> 00:00:54,879
nodes

26
00:00:54,879 --> 00:00:57,520
in this case it's not one

27
00:00:57,520 --> 00:00:59,760
1 will then put the transaction of the

28
00:00:59,760 --> 00:01:02,160
user into its own mempool and broadcast

29
00:01:02,160 --> 00:01:03,920
it to the other nodes

30
00:01:03,920 --> 00:01:06,080
now let's assume that node 4

31
00:01:06,080 --> 00:01:07,600
is a miner

32
00:01:07,600 --> 00:01:09,840
the task of a miner is to select some

33
00:01:09,840 --> 00:01:11,920
transactions from the mempool and to put

34
00:01:11,920 --> 00:01:14,159
them into a new block

35
00:01:14,159 --> 00:01:16,560
now space inside the block is limited as

36
00:01:16,560 --> 00:01:18,240
a miner has to decide which transactions

37
00:01:18,240 --> 00:01:20,080
to prioritize

38
00:01:20,080 --> 00:01:21,840
a large number of miners prioritize

39
00:01:21,840 --> 00:01:24,159
transactions by the gas price

40
00:01:24,159 --> 00:01:25,680
since these transactions will give the

41
00:01:25,680 --> 00:01:27,680
miner a higher reward

42
00:01:27,680 --> 00:01:29,439
now the issue with ethereum and also

43
00:01:29,439 --> 00:01:31,280
other blockchains is that the mempool is

44
00:01:31,280 --> 00:01:34,240
publicly visible to anyone

45
00:01:34,240 --> 00:01:35,840
and users are aware that they can

46
00:01:35,840 --> 00:01:37,680
position their transactions by playing

47
00:01:37,680 --> 00:01:40,079
of the gas price of their transactions

48
00:01:40,079 --> 00:01:41,840
and this enables so-called front-running

49
00:01:41,840 --> 00:01:44,240
attacks

50
00:01:44,799 --> 00:01:46,399
in this study we consider three types of

51
00:01:46,399 --> 00:01:48,640
front-running attacks the first one is

52
00:01:48,640 --> 00:01:51,119
displacement also known as replay attack

53
00:01:51,119 --> 00:01:52,880
an attacker sees a profitable pending

54
00:01:52,880 --> 00:01:55,439
transaction tv and decides to copy tv

55
00:01:55,439 --> 00:01:57,119
and to submit its own transaction using

56
00:01:57,119 --> 00:01:59,439
its own account with a higher gas price

57
00:01:59,439 --> 00:02:01,280
such as its transaction is executed

58
00:02:01,280 --> 00:02:02,399
first

59
00:02:02,399 --> 00:02:04,960
the second attack is called insertion or

60
00:02:04,960 --> 00:02:07,119
also known as sandwich attack and attack

61
00:02:07,119 --> 00:02:09,440
observes a large purchase tv and sends

62
00:02:09,440 --> 00:02:11,280
two transactions where the first

63
00:02:11,280 --> 00:02:13,280
transaction has a higher gas price than

64
00:02:13,280 --> 00:02:16,560
tv and purchases the same asset as tb

65
00:02:16,560 --> 00:02:18,160
the second transaction however has a

66
00:02:18,160 --> 00:02:20,720
smaller gas price than tv in order to be

67
00:02:20,720 --> 00:02:22,959
executed after tv and sells the

68
00:02:22,959 --> 00:02:25,360
previously purchased asset the attacker

69
00:02:25,360 --> 00:02:27,200
profits from the price difference due to

70
00:02:27,200 --> 00:02:29,440
the large purchase of tv

71
00:02:29,440 --> 00:02:30,959
finally the third attack is called

72
00:02:30,959 --> 00:02:32,640
suppression or also known as lock

73
00:02:32,640 --> 00:02:34,879
stuffing imagine a lottery where if

74
00:02:34,879 --> 00:02:37,360
nobody purchases a ticket for 5 minutes

75
00:02:37,360 --> 00:02:39,760
the last purchaser becomes the winner

76
00:02:39,760 --> 00:02:41,440
the goal of the attacker is to purchase

77
00:02:41,440 --> 00:02:43,120
a ticket and to prevent any other

78
00:02:43,120 --> 00:02:46,000
competing transactions tv to be included

79
00:02:46,000 --> 00:02:47,440
into the next block

80
00:02:47,440 --> 00:02:49,040
for a given amount of time

81
00:02:49,040 --> 00:02:50,800
the attacker therefore tries to fill the

82
00:02:50,800 --> 00:02:52,959
blocks with its own transactions such

83
00:02:52,959 --> 00:02:55,519
that tv is not included the attacker's

84
00:02:55,519 --> 00:02:57,360
transactions are all prioritized since

85
00:02:57,360 --> 00:03:01,280
they have got higher gas price than tv

86
00:03:01,280 --> 00:03:03,120
now we'll briefly explain our attack

87
00:03:03,120 --> 00:03:05,599
model an attacker can be either a miner

88
00:03:05,599 --> 00:03:08,319
or a non-miner however in our study we

89
00:03:08,319 --> 00:03:10,800
only focus on detecting non-miners

90
00:03:10,800 --> 00:03:12,560
moreover attackers are required to

91
00:03:12,560 --> 00:03:14,720
monitor pending transactions search for

92
00:03:14,720 --> 00:03:16,560
victim transactions and to create their

93
00:03:16,560 --> 00:03:18,959
own transactions we therefore assume

94
00:03:18,959 --> 00:03:20,640
that attackers automate those paths

95
00:03:20,640 --> 00:03:22,959
using offchain program that we call a

96
00:03:22,959 --> 00:03:24,400
bot

97
00:03:24,400 --> 00:03:26,080
bots have access to externally owned

98
00:03:26,080 --> 00:03:27,840
accounts in order to send transactions

99
00:03:27,840 --> 00:03:29,680
on the behalf of the attacker

100
00:03:29,680 --> 00:03:31,920
we also assume that those accounts have

101
00:03:31,920 --> 00:03:34,239
a sufficiently large balance

102
00:03:34,239 --> 00:03:36,239
finally we assume that

103
00:03:36,239 --> 00:03:38,720
those bots use on-chain smart contracts

104
00:03:38,720 --> 00:03:40,400
in order to better coordinate attacks

105
00:03:40,400 --> 00:03:43,599
that require multiple transactions

106
00:03:43,599 --> 00:03:45,280
now we'll discuss how we detect those

107
00:03:45,280 --> 00:03:47,440
three types of runway attacks using only

108
00:03:47,440 --> 00:03:50,319
historical blockchain data

109
00:03:50,319 --> 00:03:52,080
to detect displacement we first split

110
00:03:52,080 --> 00:03:53,920
the range of blocks to be analyzed into

111
00:03:53,920 --> 00:03:56,080
windows of 100 blocks with an offset of

112
00:03:56,080 --> 00:03:57,680
20 blocks

113
00:03:57,680 --> 00:03:59,360
afterwards for each transaction we'll

114
00:03:59,360 --> 00:04:01,519
split the input bytes into anagrams of 4

115
00:04:01,519 --> 00:04:03,439
bytes and store them inside a bloom

116
00:04:03,439 --> 00:04:04,480
filter

117
00:04:04,480 --> 00:04:06,400
the idea is to first use a bloom filter

118
00:04:06,400 --> 00:04:07,840
to quickly check if a similar

119
00:04:07,840 --> 00:04:09,360
transaction has been observed in the

120
00:04:09,360 --> 00:04:12,879
past and only if 95 of the n-grams match

121
00:04:12,879 --> 00:04:14,480
then we perform an expensive linear

122
00:04:14,480 --> 00:04:16,160
search where we check if the input of

123
00:04:16,160 --> 00:04:18,478
one transaction isn't contained inside

124
00:04:18,478 --> 00:04:20,238
another transaction

125
00:04:20,238 --> 00:04:22,079
once we find two matching transactions

126
00:04:22,079 --> 00:04:25,680
ta and tv we then run three heuristics

127
00:04:25,680 --> 00:04:27,199
first we check if the sender and

128
00:04:27,199 --> 00:04:29,759
receiver of ta and tv are different then

129
00:04:29,759 --> 00:04:32,720
we check if ta has a higher gas price

130
00:04:32,720 --> 00:04:35,040
than tv and finally we check whether at

131
00:04:35,040 --> 00:04:36,479
least 25

132
00:04:36,479 --> 00:04:38,479
of tvs input bytes could form with those

133
00:04:38,479 --> 00:04:40,080
of ta

134
00:04:40,080 --> 00:04:42,639
finally in order to validate our finding

135
00:04:42,639 --> 00:04:44,479
we use a simulation environment in order

136
00:04:44,479 --> 00:04:47,360
to check if executing ta before tv

137
00:04:47,360 --> 00:04:49,120
results in a different state than

138
00:04:49,120 --> 00:04:52,639
executing ta after tb

139
00:04:52,639 --> 00:04:55,360
to detect insertion we analyze block by

140
00:04:55,360 --> 00:04:57,919
block by first getting all the erc20

141
00:04:57,919 --> 00:04:59,680
token transfer events for all

142
00:04:59,680 --> 00:05:02,560
transactions contained in a block

143
00:05:02,560 --> 00:05:04,639
afterwards we use six heuristics to

144
00:05:04,639 --> 00:05:07,039
identify if some of the events

145
00:05:07,039 --> 00:05:10,320
are the result of an insertion attack

146
00:05:10,320 --> 00:05:13,759
first we check whether ta1 and tv

147
00:05:13,759 --> 00:05:15,919
purchase tokens from the same address

148
00:05:15,919 --> 00:05:18,479
and if ta2 sells tokens to the exact

149
00:05:18,479 --> 00:05:20,800
same address

150
00:05:20,800 --> 00:05:23,120
we also check if ta1 sends tokens to the

151
00:05:23,120 --> 00:05:25,280
same address from which ta2 afterwards

152
00:05:25,280 --> 00:05:27,520
sales tokens

153
00:05:27,520 --> 00:05:29,280
second we check whether the amount that

154
00:05:29,280 --> 00:05:31,120
is being bought by ta1 is almost

155
00:05:31,120 --> 00:05:33,680
identical to the amount that ta2 is

156
00:05:33,680 --> 00:05:35,600
selling

157
00:05:35,600 --> 00:05:39,039
first we check whether ta1 tb and ta2

158
00:05:39,039 --> 00:05:41,120
are executing those trades using the

159
00:05:41,120 --> 00:05:44,560
same token contract

160
00:05:44,560 --> 00:05:48,080
fourth we make sure that ta1 tv and ta2

161
00:05:48,080 --> 00:05:50,720
have different transaction hashes

162
00:05:50,720 --> 00:05:53,039
fifth we check whether the transaction

163
00:05:53,039 --> 00:05:55,919
index of ta1 is larger than tv and

164
00:05:55,919 --> 00:05:58,160
whether the transaction index of tv is

165
00:05:58,160 --> 00:06:00,560
larger than ta2

166
00:06:00,560 --> 00:06:03,440
and finally six we check if ta1 has a

167
00:06:03,440 --> 00:06:06,400
higher gas price than tb and if ta2 has

168
00:06:06,400 --> 00:06:11,120
an identical or lower gas price than ga2

169
00:06:11,520 --> 00:06:13,360
now to detect suppression we first

170
00:06:13,360 --> 00:06:15,199
cluster transactions within the block by

171
00:06:15,199 --> 00:06:16,960
its receiver

172
00:06:16,960 --> 00:06:18,880
afterwards we check for each cluster if

173
00:06:18,880 --> 00:06:21,759
the following three heuristics apply

174
00:06:21,759 --> 00:06:24,160
first the cluster must contain more than

175
00:06:24,160 --> 00:06:26,319
one transaction

176
00:06:26,319 --> 00:06:27,280
second

177
00:06:27,280 --> 00:06:29,199
each transaction within the cluster must

178
00:06:29,199 --> 00:06:30,960
consume more than twenty one thousand

179
00:06:30,960 --> 00:06:32,560
gas units

180
00:06:32,560 --> 00:06:34,800
and third the proportion between gas

181
00:06:34,800 --> 00:06:37,680
used and the gas limit must be over 99

182
00:06:37,680 --> 00:06:40,240
for all transactions

183
00:06:40,240 --> 00:06:43,520
afterwards we check if at least one of

184
00:06:43,520 --> 00:06:45,840
the two neighboring blocks also contains

185
00:06:45,840 --> 00:06:47,520
at least one cluster that fulfills the

186
00:06:47,520 --> 00:06:50,400
same heuristics

187
00:06:50,800 --> 00:06:52,800
finally we check for the remaining

188
00:06:52,800 --> 00:06:55,120
clusters if the first transaction

189
00:06:55,120 --> 00:06:56,960
employs one of the three suppression

190
00:06:56,960 --> 00:06:59,840
strategies namely a controlled gas loop

191
00:06:59,840 --> 00:07:04,239
an uncontrolled casting or insert

192
00:07:04,960 --> 00:07:07,039
now talk about the analysis that we did

193
00:07:07,039 --> 00:07:09,759
on the results that we gathered

194
00:07:09,759 --> 00:07:11,759
we analyzed the cost and profit for all

195
00:07:11,759 --> 00:07:13,440
three types of attacks

196
00:07:13,440 --> 00:07:15,120
in total we measured

197
00:07:15,120 --> 00:07:16,639
ninety nine thousand seven hundred

198
00:07:16,639 --> 00:07:19,440
twenty five attacks or roughly ninety

199
00:07:19,440 --> 00:07:21,840
eight percent or insertion attacks

200
00:07:21,840 --> 00:07:24,080
the overall accumulated profit is more

201
00:07:24,080 --> 00:07:26,000
than eighteen million dollars

202
00:07:26,000 --> 00:07:28,400
when comparing the three attacks we see

203
00:07:28,400 --> 00:07:30,319
that suppression can bring the highest

204
00:07:30,319 --> 00:07:32,400
profit but also involves the highest

205
00:07:32,400 --> 00:07:33,280
cost

206
00:07:33,280 --> 00:07:35,039
however we also see that displacement

207
00:07:35,039 --> 00:07:37,199
has no risk since attackers only send

208
00:07:37,199 --> 00:07:39,520
out one transaction and do not depend on

209
00:07:39,520 --> 00:07:41,520
the victim transaction

210
00:07:41,520 --> 00:07:43,039
finally we see that insertion is the

211
00:07:43,039 --> 00:07:45,360
most popular type of attack

212
00:07:45,360 --> 00:07:47,120
this is probably due to numerous traders

213
00:07:47,120 --> 00:07:49,599
on decentralized exchanges

214
00:07:49,599 --> 00:07:51,440
when looking at the trends we can see

215
00:07:51,440 --> 00:07:53,599
that in 2018 a majority of the attackers

216
00:07:53,599 --> 00:07:55,120
were doing suppression

217
00:07:55,120 --> 00:07:56,319
and we see that the number of

218
00:07:56,319 --> 00:07:58,160
suppression attacks became less over

219
00:07:58,160 --> 00:07:59,120
time

220
00:07:59,120 --> 00:08:00,879
however for displacement and insertion

221
00:08:00,879 --> 00:08:02,879
attacks we see the opposite

222
00:08:02,879 --> 00:08:04,400
those types of attacks became more

223
00:08:04,400 --> 00:08:06,000
popular over time and increased

224
00:08:06,000 --> 00:08:08,639
tremendously in 2020.

225
00:08:08,639 --> 00:08:10,319
now if you have a closer look at the

226
00:08:10,319 --> 00:08:11,840
insertion attack and these are advanced

227
00:08:11,840 --> 00:08:13,759
exchanges we see that it all started

228
00:08:13,759 --> 00:08:15,840
with bankrolling and that the attacks

229
00:08:15,840 --> 00:08:17,599
were at the beginning only from time to

230
00:08:17,599 --> 00:08:18,639
time

231
00:08:18,639 --> 00:08:20,319
however we also see that while in the

232
00:08:20,319 --> 00:08:21,599
beginning it took some time for

233
00:08:21,599 --> 00:08:23,599
attackers to write bots for bancor and

234
00:08:23,599 --> 00:08:25,759
union squad version one it didn't take

235
00:08:25,759 --> 00:08:28,160
very long for linux version 2 and sushi

236
00:08:28,160 --> 00:08:31,199
swap to be invaded by insertion bots

237
00:08:31,199 --> 00:08:33,120
we also see that bots migrated from

238
00:08:33,120 --> 00:08:35,440
unison version 1 towards unisport

239
00:08:35,440 --> 00:08:37,839
version 2 after its release

240
00:08:37,839 --> 00:08:40,000
finally we can also see the continuous

241
00:08:40,000 --> 00:08:41,760
increase in daily front-running attacks

242
00:08:41,760 --> 00:08:44,560
since 2020.

243
00:08:44,560 --> 00:08:46,000
now if you have a closer look at the

244
00:08:46,000 --> 00:08:47,120
distribution of attacks or

245
00:08:47,120 --> 00:08:49,040
cross-exchanges we see that most

246
00:08:49,040 --> 00:08:51,600
attackers focus on only one exchange

247
00:08:51,600 --> 00:08:53,519
the most popular exchange being unison

248
00:08:53,519 --> 00:08:54,800
version 2.

249
00:08:54,800 --> 00:08:56,560
however we also observed that some

250
00:08:56,560 --> 00:08:58,160
attackers are performing insertion

251
00:08:58,160 --> 00:08:59,839
attacks to two or four different

252
00:08:59,839 --> 00:09:01,920
exchanges in parallel

253
00:09:01,920 --> 00:09:03,839
what's also interesting is that we

254
00:09:03,839 --> 00:09:05,360
observed several attackers that

255
00:09:05,360 --> 00:09:06,959
initially went through exchanges in

256
00:09:06,959 --> 00:09:08,800
order to mount their attacks but then

257
00:09:08,800 --> 00:09:10,880
decided to make use of bot contracts to

258
00:09:10,880 --> 00:09:13,360
coordinate the attacks this resulted in

259
00:09:13,360 --> 00:09:16,320
more successful attacks

260
00:09:16,320 --> 00:09:18,160
finally we also analyzed the victims of

261
00:09:18,160 --> 00:09:20,240
suppression attacks and the distribution

262
00:09:20,240 --> 00:09:22,480
of the suppression strategies in the

263
00:09:22,480 --> 00:09:24,800
following table we see the 15 contracts

264
00:09:24,800 --> 00:09:26,959
that were victims of suppression attacks

265
00:09:26,959 --> 00:09:28,720
while majority only suffer from one

266
00:09:28,720 --> 00:09:31,360
attack we can see that popular contracts

267
00:09:31,360 --> 00:09:34,080
such as fomo 3d long and last winner

268
00:09:34,080 --> 00:09:36,320
suffered from 14 and 16 attacks

269
00:09:36,320 --> 00:09:37,680
respectively

270
00:09:37,680 --> 00:09:39,040
when analyzing the suppression

271
00:09:39,040 --> 00:09:41,279
strategies employed we see that most

272
00:09:41,279 --> 00:09:44,480
attackers opt for the assert method

273
00:09:44,480 --> 00:09:47,440
but we also see that it failed 18 out of

274
00:09:47,440 --> 00:09:50,240
20 times the most reliable strategy is

275
00:09:50,240 --> 00:09:52,560
using a controlled gas loop where 8 out

276
00:09:52,560 --> 00:09:55,760
of the 18 attacks were successful

277
00:09:55,760 --> 00:09:58,959
now we'll shortly conclude our work

278
00:09:58,959 --> 00:10:00,800
in this work we presented an efficient

279
00:10:00,800 --> 00:10:02,720
methodology to detect displacement

280
00:10:02,720 --> 00:10:04,720
insertion and suppression attacks using

281
00:10:04,720 --> 00:10:07,760
the fumes past transaction history

282
00:10:07,760 --> 00:10:09,279
we also performed an extensive

283
00:10:09,279 --> 00:10:11,200
measurement study by analyzing more than

284
00:10:11,200 --> 00:10:14,560
11 million blocks on ethereum blockchain

285
00:10:14,560 --> 00:10:16,560
we identified almost 200 000

286
00:10:16,560 --> 00:10:18,399
front-running attacks performed by over

287
00:10:18,399 --> 00:10:22,000
1 500 accounts and more than 500 bots

288
00:10:22,000 --> 00:10:24,399
with an accumulated profit of over 18

289
00:10:24,399 --> 00:10:26,800
million dollars from the attackers

290
00:10:26,800 --> 00:10:28,800
finally in our paper we were able to

291
00:10:28,800 --> 00:10:31,519
group these accounts and bots into 137

292
00:10:31,519 --> 00:10:33,920
unique attacker clusters and we also

293
00:10:33,920 --> 00:10:35,680
discuss the implications of front

294
00:10:35,680 --> 00:10:38,160
running on the ethereum ecosystem where

295
00:10:38,160 --> 00:10:39,920
we discovered that miners already made a

296
00:10:39,920 --> 00:10:41,519
profit of over three hundred thousand

297
00:10:41,519 --> 00:10:43,600
dollars due to non-miners engaging in

298
00:10:43,600 --> 00:10:44,800
front running

299
00:10:44,800 --> 00:10:46,640
please check out our paper for more

300
00:10:46,640 --> 00:10:49,600
interesting results and details

301
00:10:49,600 --> 00:10:50,720
now thank you very much for your

302
00:10:50,720 --> 00:10:52,560
attention all the code and data is

303
00:10:52,560 --> 00:10:54,720
publicly available on github if you have

304
00:10:54,720 --> 00:10:56,320
any questions feel free to drop me a

305
00:10:56,320 --> 00:10:58,839
message at christoph.taurus at

306
00:10:58,839 --> 00:11:01,120
uni.lu this work was supported by

307
00:11:01,120 --> 00:11:03,440
ripple's university research initiative

308
00:11:03,440 --> 00:11:07,959
in the luxembourg national research fund

