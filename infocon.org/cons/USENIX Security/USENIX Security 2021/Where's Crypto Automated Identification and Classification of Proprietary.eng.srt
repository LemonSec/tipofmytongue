1
00:00:08,639 --> 00:00:10,080
all right

2
00:00:10,080 --> 00:00:12,320
hello and uh welcome everyone my name is

3
00:00:12,320 --> 00:00:14,559
jos vetzels and i'll be presenting this

4
00:00:14,559 --> 00:00:16,560
joint work with carlo maier and velashin

5
00:00:16,560 --> 00:00:19,520
bonsami on the automatic identification

6
00:00:19,520 --> 00:00:21,359
and classification of proprietary

7
00:00:21,359 --> 00:00:25,519
cryptographic primitives in binary code

8
00:00:25,840 --> 00:00:27,119
today we'll start off with an

9
00:00:27,119 --> 00:00:29,760
introduction and some prior work that's

10
00:00:29,760 --> 00:00:31,840
been done in this area and then move on

11
00:00:31,840 --> 00:00:34,160
to a solution overview the experimental

12
00:00:34,160 --> 00:00:36,800
evaluation before finishing off with the

13
00:00:36,800 --> 00:00:38,800
conclusions

14
00:00:38,800 --> 00:00:40,160
let's start with a little bit of

15
00:00:40,160 --> 00:00:42,000
background first

16
00:00:42,000 --> 00:00:44,399
as you might be aware even though over

17
00:00:44,399 --> 00:00:46,160
the past decades the consensus has

18
00:00:46,160 --> 00:00:48,640
formed against proprietary cryptography

19
00:00:48,640 --> 00:00:51,039
it continues to persist especially in

20
00:00:51,039 --> 00:00:52,879
various embedded systems

21
00:00:52,879 --> 00:00:54,719
and this presents a significant obstacle

22
00:00:54,719 --> 00:00:57,440
to security evaluations in certification

23
00:00:57,440 --> 00:00:59,199
secure procurement and pen testing

24
00:00:59,199 --> 00:01:01,039
efforts since it requires a lot of

25
00:01:01,039 --> 00:01:03,120
manual reverse engineering which could

26
00:01:03,120 --> 00:01:04,640
lead to false conclusions about

27
00:01:04,640 --> 00:01:05,920
robustness

28
00:01:05,920 --> 00:01:08,159
in addition any of this research that's

29
00:01:08,159 --> 00:01:10,720
done under nda or is restricted by court

30
00:01:10,720 --> 00:01:12,560
injunctions as has been the case in the

31
00:01:12,560 --> 00:01:15,040
past will leave other affected parties

32
00:01:15,040 --> 00:01:16,960
in the dark and having to repeat this

33
00:01:16,960 --> 00:01:18,960
effort again and again

34
00:01:18,960 --> 00:01:21,119
so there's a concrete industry need for

35
00:01:21,119 --> 00:01:23,759
the automated detection of as of yet

36
00:01:23,759 --> 00:01:25,840
unknown cryptographic primitives in

37
00:01:25,840 --> 00:01:28,479
binary code

38
00:01:28,479 --> 00:01:31,439
now in order to meet this need a

39
00:01:31,439 --> 00:01:33,600
solution would have to meet three

40
00:01:33,600 --> 00:01:34,720
criteria

41
00:01:34,720 --> 00:01:37,040
first it should be able to identify a

42
00:01:37,040 --> 00:01:38,720
non-cryptographic algorithm so

43
00:01:38,720 --> 00:01:41,439
algorithms that might belong to a known

44
00:01:41,439 --> 00:01:44,640
cryptographic class but have specifics

45
00:01:44,640 --> 00:01:48,000
that are not known yet to the analyst

46
00:01:48,000 --> 00:01:49,920
secondly it should be efficient on

47
00:01:49,920 --> 00:01:52,399
real-world binaries and third it should

48
00:01:52,399 --> 00:01:54,720
not rely on full firmer emulation or

49
00:01:54,720 --> 00:01:57,040
dynamic instrumentation due to issues

50
00:01:57,040 --> 00:01:58,880
around platform heterogeneity and

51
00:01:58,880 --> 00:02:02,000
peripheral emulation in embedded systems

52
00:02:02,000 --> 00:02:03,759
so let's take a look at the prior work

53
00:02:03,759 --> 00:02:06,719
in this area in light of these criteria

54
00:02:06,719 --> 00:02:08,800
two areas in which a lot of practical

55
00:02:08,800 --> 00:02:11,038
prior work exists are the recognition of

56
00:02:11,038 --> 00:02:13,280
dedicated cryptography functionality

57
00:02:13,280 --> 00:02:15,760
form of apis libraries or hardware

58
00:02:15,760 --> 00:02:18,080
features and the recognition of various

59
00:02:18,080 --> 00:02:20,959
constants such as ivs nothing at my

60
00:02:20,959 --> 00:02:23,120
sleeve numbers and lookup tables that

61
00:02:23,120 --> 00:02:25,200
are used in many algorithms

62
00:02:25,200 --> 00:02:27,120
both of these approaches even though

63
00:02:27,120 --> 00:02:28,640
very helpful

64
00:02:28,640 --> 00:02:30,640
other applications of this problem are

65
00:02:30,640 --> 00:02:32,879
unsuitable for our particular need since

66
00:02:32,879 --> 00:02:34,560
they are inherently incapable of

67
00:02:34,560 --> 00:02:36,640
detecting unknown algorithms while the

68
00:02:36,640 --> 00:02:38,480
latter also has the drawback of being

69
00:02:38,480 --> 00:02:40,400
incapable of detecting algorithms that

70
00:02:40,400 --> 00:02:42,640
don't rely on any fixed data or use

71
00:02:42,640 --> 00:02:44,560
functions rather than luts to generate

72
00:02:44,560 --> 00:02:47,040
this data

73
00:02:47,040 --> 00:02:48,959
next there's prior work in using code

74
00:02:48,959 --> 00:02:51,599
heuristics one flavor of which matches

75
00:02:51,599 --> 00:02:53,840
mnemonic constant tuple signatures and

76
00:02:53,840 --> 00:02:56,080
thus suffers from the same drawbacks as

77
00:02:56,080 --> 00:02:57,760
data signatures

78
00:02:57,760 --> 00:02:59,760
the other flavor determines the ratio of

79
00:02:59,760 --> 00:03:02,239
bitwise arithmetic instructions on a per

80
00:03:02,239 --> 00:03:05,200
function or a basic block ratio as a

81
00:03:05,200 --> 00:03:06,879
crypto indicator

82
00:03:06,879 --> 00:03:09,120
now the main drawbacks here are the fact

83
00:03:09,120 --> 00:03:11,519
that while it might help narrow down an

84
00:03:11,519 --> 00:03:13,599
analyst search to particular areas of

85
00:03:13,599 --> 00:03:16,080
the code it's both susceptible to false

86
00:03:16,080 --> 00:03:17,840
positives for example through the

87
00:03:17,840 --> 00:03:19,599
setting of flags or the using of shift

88
00:03:19,599 --> 00:03:22,159
registers for other purposes

89
00:03:22,159 --> 00:03:24,480
and it lacks any granular identification

90
00:03:24,480 --> 00:03:27,040
so you might know this could be crypto

91
00:03:27,040 --> 00:03:28,720
but you don't have any further

92
00:03:28,720 --> 00:03:30,720
indications still have a lot of manual

93
00:03:30,720 --> 00:03:32,879
analysis to do

94
00:03:32,879 --> 00:03:34,560
there have also been proposals to use

95
00:03:34,560 --> 00:03:36,239
deep learning in this area but these

96
00:03:36,239 --> 00:03:37,760
were unsuitable according to our

97
00:03:37,760 --> 00:03:39,840
criteria as well due to the inherent

98
00:03:39,840 --> 00:03:42,000
inability to classify unknown algorithms

99
00:03:42,000 --> 00:03:43,360
and their reliance on dynamic

100
00:03:43,360 --> 00:03:45,680
instrumentation

101
00:03:45,680 --> 00:03:48,159
then there's data flow analysis one

102
00:03:48,159 --> 00:03:49,920
approach attempts to identify crypto

103
00:03:49,920 --> 00:03:51,680
routines by their static relation

104
00:03:51,680 --> 00:03:53,519
between the functions and their inputs

105
00:03:53,519 --> 00:03:55,680
and outputs true combination of taint

106
00:03:55,680 --> 00:03:58,239
analysis and entropic change evaluation

107
00:03:58,239 --> 00:03:59,840
and the other approach uses dynamic

108
00:03:59,840 --> 00:04:02,080
instrumentation and symbolic execution

109
00:04:02,080 --> 00:04:03,840
to extract boolean formulas for

110
00:04:03,840 --> 00:04:06,319
comparison to reference implementations

111
00:04:06,319 --> 00:04:08,720
now both of these approaches again feel

112
00:04:08,720 --> 00:04:11,200
to meet our criteria due to the reliance

113
00:04:11,200 --> 00:04:13,439
on dynamic evaluation and or their

114
00:04:13,439 --> 00:04:15,519
inherent inability to detect unknown

115
00:04:15,519 --> 00:04:17,279
algorithms

116
00:04:17,279 --> 00:04:19,199
and finally there's data flow graph

117
00:04:19,199 --> 00:04:20,720
isomorphism

118
00:04:20,720 --> 00:04:23,040
an approach which

119
00:04:23,040 --> 00:04:25,040
most recently had been proposed by

120
00:04:25,040 --> 00:04:27,520
lester and all which generates a data

121
00:04:27,520 --> 00:04:29,440
flow graph and compares it to those of

122
00:04:29,440 --> 00:04:31,680
known algorithms using ulman's subgraph

123
00:04:31,680 --> 00:04:34,080
isomorphism algorithm

124
00:04:34,080 --> 00:04:36,240
while we consider it the strongest among

125
00:04:36,240 --> 00:04:38,160
the existing prior work there is a few

126
00:04:38,160 --> 00:04:40,240
limitations to this approach

127
00:04:40,240 --> 00:04:42,240
first of all there is no systematic way

128
00:04:42,240 --> 00:04:44,400
to deal with data-dependent branches

129
00:04:44,400 --> 00:04:46,880
which presents a problem since the class

130
00:04:46,880 --> 00:04:48,800
of a cryptographic primitive often only

131
00:04:48,800 --> 00:04:51,120
becomes clear once analysis incorporates

132
00:04:51,120 --> 00:04:52,880
conditional instructions

133
00:04:52,880 --> 00:04:55,280
for example as you can see in the

134
00:04:55,280 --> 00:04:56,479
picture on the right

135
00:04:56,479 --> 00:04:58,560
in a stream cipher the key stream

136
00:04:58,560 --> 00:05:00,560
generator typically operates in a loop

137
00:05:00,560 --> 00:05:02,800
driven by a length parameter simply

138
00:05:02,800 --> 00:05:05,680
computing the day of g from this basic

139
00:05:05,680 --> 00:05:07,600
blocks will represent at most a single

140
00:05:07,600 --> 00:05:09,280
iteration and miss crucial

141
00:05:09,280 --> 00:05:12,080
characteristics as a result

142
00:05:12,080 --> 00:05:14,400
so this brings us to our own approach

143
00:05:14,400 --> 00:05:16,400
which is rooted in the observation that

144
00:05:16,400 --> 00:05:18,240
the vast majority of proprietary

145
00:05:18,240 --> 00:05:20,320
cryptography out there still falls

146
00:05:20,320 --> 00:05:22,479
within established primitive classes

147
00:05:22,479 --> 00:05:24,880
such as feistel networks or substitution

148
00:05:24,880 --> 00:05:27,360
permutation networks or linear feedback

149
00:05:27,360 --> 00:05:29,680
shift registers and so on

150
00:05:29,680 --> 00:05:31,600
we developed the taxonomy for this based

151
00:05:31,600 --> 00:05:33,680
on our prior work as you can see in the

152
00:05:33,680 --> 00:05:35,280
picture

153
00:05:35,280 --> 00:05:37,520
and our goal is to develop structural

154
00:05:37,520 --> 00:05:39,199
signatures which capture an entire

155
00:05:39,199 --> 00:05:41,199
taxonomical class regardless of the

156
00:05:41,199 --> 00:05:43,120
particulars by means of combining the

157
00:05:43,120 --> 00:05:46,000
dfg isomorphism approach with symbolic

158
00:05:46,000 --> 00:05:48,240
execution

159
00:05:48,240 --> 00:05:49,440
our work makes the following

160
00:05:49,440 --> 00:05:51,759
contributions here first of all we

161
00:05:51,759 --> 00:05:53,919
overcome the limitations of prior work

162
00:05:53,919 --> 00:05:56,240
by combining subgraph isomorphism with

163
00:05:56,240 --> 00:05:58,000
symbolic execution

164
00:05:58,000 --> 00:05:59,919
secondly we propose a new domain

165
00:05:59,919 --> 00:06:01,600
specific language for defining

166
00:06:01,600 --> 00:06:03,520
structural properties of cryptographic

167
00:06:03,520 --> 00:06:06,639
primitives and thirdly we provide a free

168
00:06:06,639 --> 00:06:08,560
and open source implementation and

169
00:06:08,560 --> 00:06:10,560
evaluation of our approach against

170
00:06:10,560 --> 00:06:13,600
real-world binaries

171
00:06:13,600 --> 00:06:15,280
so let's take a deeper look at our

172
00:06:15,280 --> 00:06:18,280
solution

173
00:06:20,000 --> 00:06:21,360
on this slide you can see the

174
00:06:21,360 --> 00:06:23,039
identification and classification

175
00:06:23,039 --> 00:06:25,440
pipeline of our solution given a

176
00:06:25,440 --> 00:06:28,240
function entry point a set of data flow

177
00:06:28,240 --> 00:06:29,759
graphs is generated which are then

178
00:06:29,759 --> 00:06:31,360
normalized and purged into their

179
00:06:31,360 --> 00:06:33,520
canonical forms and subsequently

180
00:06:33,520 --> 00:06:35,520
compared to the structural signatures

181
00:06:35,520 --> 00:06:38,160
using the subgraph isomorphism resulting

182
00:06:38,160 --> 00:06:40,720
in a classification verdict

183
00:06:40,720 --> 00:06:43,199
we construct our dfg's incrementally as

184
00:06:43,199 --> 00:06:44,960
we pass over the instructions

185
00:06:44,960 --> 00:06:46,960
determining the nodes by their operand

186
00:06:46,960 --> 00:06:50,000
types as explained on the slide

187
00:06:50,000 --> 00:06:51,680
one issue is that semantically

188
00:06:51,680 --> 00:06:54,479
equivalent code can yield different dfgs

189
00:06:54,479 --> 00:06:56,400
due to architecture compiler or

190
00:06:56,400 --> 00:06:58,880
implementation nuances this is why we

191
00:06:58,880 --> 00:07:01,039
normalize them into a canonical form

192
00:07:01,039 --> 00:07:02,800
using a combination of operation

193
00:07:02,800 --> 00:07:05,360
simplification elimination of common sub

194
00:07:05,360 --> 00:07:07,360
expressions memory access operand

195
00:07:07,360 --> 00:07:11,199
substitution and associativity merging

196
00:07:11,199 --> 00:07:13,840
when extracting our d of g we are often

197
00:07:13,840 --> 00:07:15,759
faced with conditional instructions and

198
00:07:15,759 --> 00:07:18,160
the choice of which path to take we

199
00:07:18,160 --> 00:07:20,560
distinguish determined conditions

200
00:07:20,560 --> 00:07:22,319
where the outcome is determined by

201
00:07:22,319 --> 00:07:24,319
preceding instructions and under

202
00:07:24,319 --> 00:07:26,240
determined conditions where this is not

203
00:07:26,240 --> 00:07:28,400
the case for the letter we have to pick

204
00:07:28,400 --> 00:07:30,960
an evaluation outcome ourselves true

205
00:07:30,960 --> 00:07:32,960
false or both in the latter case we

206
00:07:32,960 --> 00:07:34,880
create two graphs

207
00:07:34,880 --> 00:07:37,680
now the issue is that always taking both

208
00:07:37,680 --> 00:07:39,759
maximizes code coverage but is

209
00:07:39,759 --> 00:07:41,520
unfeasible in practice so we have to

210
00:07:41,520 --> 00:07:43,280
come up with a picking strategy in the

211
00:07:43,280 --> 00:07:45,440
form of a path oracle

212
00:07:45,440 --> 00:07:47,520
we want to be able to obtain fdfg

213
00:07:47,520 --> 00:07:49,520
representing n iterations of a

214
00:07:49,520 --> 00:07:51,520
cryptographic primitive as you can see

215
00:07:51,520 --> 00:07:53,120
on the slide where a simple stream

216
00:07:53,120 --> 00:07:54,800
cipher has an underdetermined

217
00:07:54,800 --> 00:07:56,479
conditional branch derived from a

218
00:07:56,479 --> 00:07:59,360
function parameter

219
00:07:59,360 --> 00:08:01,840
so during each counter encounter with

220
00:08:01,840 --> 00:08:03,840
our conditional instruction we have two

221
00:08:03,840 --> 00:08:06,319
choices we either perform another

222
00:08:06,319 --> 00:08:09,039
iteration or we return and quit

223
00:08:09,039 --> 00:08:11,120
in order to meet our goal upon the first

224
00:08:11,120 --> 00:08:13,520
encounter we take both execution paths

225
00:08:13,520 --> 00:08:15,520
false will return immediately and true

226
00:08:15,520 --> 00:08:17,680
will take us to another underdetermined

227
00:08:17,680 --> 00:08:20,080
condition at the exact same execution

228
00:08:20,080 --> 00:08:22,560
address so for the second encounter and

229
00:08:22,560 --> 00:08:24,639
beyond we keep replicating the decision

230
00:08:24,639 --> 00:08:26,800
that caused the revisit to occur until

231
00:08:26,800 --> 00:08:28,879
the end visit and then take the opposite

232
00:08:28,879 --> 00:08:32,320
path ie return

233
00:08:32,320 --> 00:08:34,240
in this way we obtain two data flow

234
00:08:34,240 --> 00:08:35,279
graphs one

235
00:08:35,279 --> 00:08:37,679
representing zero iterations and the

236
00:08:37,679 --> 00:08:41,440
other representing n iterations

237
00:08:41,440 --> 00:08:43,679
now our resulting dfgs will contain

238
00:08:43,679 --> 00:08:45,279
elements that are not part of the

239
00:08:45,279 --> 00:08:47,760
semantics which we will purge out

240
00:08:47,760 --> 00:08:50,000
leaf nodes are part of the semantics if

241
00:08:50,000 --> 00:08:52,399
they either have return values they have

242
00:08:52,399 --> 00:08:54,959
call operations or store operations to

243
00:08:54,959 --> 00:08:56,720
addresses not relative to the stack

244
00:08:56,720 --> 00:08:57,680
pointer

245
00:08:57,680 --> 00:08:59,279
leaf nodes which do not meet these

246
00:08:59,279 --> 00:09:01,760
criteria are removed until we hit a

247
00:09:01,760 --> 00:09:04,399
fixed point

248
00:09:04,399 --> 00:09:06,399
our dfgs are then compared to our

249
00:09:06,399 --> 00:09:08,320
signatures using almond subdrive

250
00:09:08,320 --> 00:09:10,080
isomorphism algorithm

251
00:09:10,080 --> 00:09:11,920
i won't go into detail about it but

252
00:09:11,920 --> 00:09:14,160
despite mp completeness it performs

253
00:09:14,160 --> 00:09:16,320
quite well for our purposes the picture

254
00:09:16,320 --> 00:09:18,640
on the right shows a signature match as

255
00:09:18,640 --> 00:09:20,800
a

256
00:09:20,839 --> 00:09:23,440
subgraph now in order to perform our

257
00:09:23,440 --> 00:09:24,480
matching

258
00:09:24,480 --> 00:09:26,800
we use express

259
00:09:26,800 --> 00:09:28,880
cryptographic primitive taxonomical

260
00:09:28,880 --> 00:09:31,040
class signatures you can see some

261
00:09:31,040 --> 00:09:32,560
examples of how this is done on the

262
00:09:32,560 --> 00:09:33,519
slide

263
00:09:33,519 --> 00:09:35,839
ultimately such signatures are nothing

264
00:09:35,839 --> 00:09:38,240
more than the dfg of their idealized

265
00:09:38,240 --> 00:09:40,399
form but to account for expression

266
00:09:40,399 --> 00:09:42,080
flexibility we designed a domain

267
00:09:42,080 --> 00:09:44,080
specific language which you can see

268
00:09:44,080 --> 00:09:46,800
illustrated on the slide on the left

269
00:09:46,800 --> 00:09:48,959
it allows you to identify a class with a

270
00:09:48,959 --> 00:09:51,040
bunch of variants each of which are

271
00:09:51,040 --> 00:09:52,880
defined by labeled expressions

272
00:09:52,880 --> 00:09:55,440
consisting of suitable nested operators

273
00:09:55,440 --> 00:09:57,440
and operands as you can see in the

274
00:09:57,440 --> 00:10:01,640
middle and the right of the slide

275
00:10:05,040 --> 00:10:07,440
now in order to showcase our method we

276
00:10:07,440 --> 00:10:10,079
have proposed several example signatures

277
00:10:10,079 --> 00:10:12,000
which you can find in detail in the

278
00:10:12,000 --> 00:10:14,640
paper ranging from algorithm specific

279
00:10:14,640 --> 00:10:17,920
ones for aes md5 and so on to generic

280
00:10:17,920 --> 00:10:20,079
ones for faisal networks linear feedback

281
00:10:20,079 --> 00:10:21,839
shift registers sequential block

282
00:10:21,839 --> 00:10:23,839
permutations and so on

283
00:10:23,839 --> 00:10:25,680
and we've used these signatures to

284
00:10:25,680 --> 00:10:28,240
evaluate our solution

285
00:10:28,240 --> 00:10:30,320
and that brings us to the experimental

286
00:10:30,320 --> 00:10:33,440
evaluation part of the talk

287
00:10:33,440 --> 00:10:35,120
we've evaluated our solution for

288
00:10:35,120 --> 00:10:37,200
accuracy and running time on a mid-range

289
00:10:37,200 --> 00:10:39,839
ryzen 3 600 machine with 16 gigabyte of

290
00:10:39,839 --> 00:10:42,240
ram against a few test sets including

291
00:10:42,240 --> 00:10:43,920
the one used in prior work by leicester

292
00:10:43,920 --> 00:10:46,959
and yaw open wrt shared libraries and

293
00:10:46,959 --> 00:10:49,519
executables various public proprietary

294
00:10:49,519 --> 00:10:51,279
cipher implementations and a collection

295
00:10:51,279 --> 00:10:53,440
of real world embedded firmwares from

296
00:10:53,440 --> 00:10:56,079
plcs and ecus

297
00:10:56,079 --> 00:10:58,160
in order to set up our evaluation we

298
00:10:58,160 --> 00:11:00,160
have to pick a number and for the number

299
00:11:00,160 --> 00:11:02,800
of algorithm iterations within a dfg the

300
00:11:02,800 --> 00:11:04,480
value should be low as it correlates

301
00:11:04,480 --> 00:11:07,519
with dfg sounds after some deliberations

302
00:11:07,519 --> 00:11:09,519
turned out picking four was very

303
00:11:09,519 --> 00:11:11,200
sufficient

304
00:11:11,200 --> 00:11:13,279
for our comparison with the lestrange

305
00:11:13,279 --> 00:11:15,360
test set we used algorithm-specific

306
00:11:15,360 --> 00:11:17,839
signatures to wear into fair comparison

307
00:11:17,839 --> 00:11:19,680
and here we correctly identified all the

308
00:11:19,680 --> 00:11:21,760
primitives within a decent time frame

309
00:11:21,760 --> 00:11:23,360
without requiring code fragment

310
00:11:23,360 --> 00:11:25,519
selection heuristics like previous work

311
00:11:25,519 --> 00:11:27,120
did

312
00:11:27,120 --> 00:11:29,200
when we evaluated our solution against

313
00:11:29,200 --> 00:11:32,320
open wrt we identified nearly all the

314
00:11:32,320 --> 00:11:34,680
primitives using generic rather than

315
00:11:34,680 --> 00:11:37,839
algorithm-specific signatures

316
00:11:37,839 --> 00:11:40,000
and finally on our test set of publicly

317
00:11:40,000 --> 00:11:41,760
available proprietary algorithm

318
00:11:41,760 --> 00:11:43,920
implementations we also identified

319
00:11:43,920 --> 00:11:45,760
nearly all the primitives using just

320
00:11:45,760 --> 00:11:48,640
generic signatures well similarly on the

321
00:11:48,640 --> 00:11:51,040
embedded firmware images we identified

322
00:11:51,040 --> 00:11:52,800
all the primitives present except for

323
00:11:52,800 --> 00:11:54,000
mega modes

324
00:11:54,000 --> 00:11:55,519
later analysis revealed that the

325
00:11:55,519 --> 00:11:57,680
identification failed due to reliance on

326
00:11:57,680 --> 00:11:59,839
implicit flows which we discuss in more

327
00:11:59,839 --> 00:12:02,079
detail in the paper

328
00:12:02,079 --> 00:12:04,639
so that brings us to the conclusions

329
00:12:04,639 --> 00:12:06,880
unfortunately proprietary cryptography

330
00:12:06,880 --> 00:12:09,200
usage in embedded binaries continues to

331
00:12:09,200 --> 00:12:11,120
persist and pose a problem to security

332
00:12:11,120 --> 00:12:13,760
analysis efforts any solution aiming to

333
00:12:13,760 --> 00:12:15,680
tackle this issue should be capable of

334
00:12:15,680 --> 00:12:16,959
automatically and efficiently

335
00:12:16,959 --> 00:12:18,639
identifying unknown cryptographic

336
00:12:18,639 --> 00:12:21,040
algorithms without relying on emulation

337
00:12:21,040 --> 00:12:23,360
or binary instrumentation and to the

338
00:12:23,360 --> 00:12:25,120
best of our knowledge no prior work

339
00:12:25,120 --> 00:12:28,240
existed satisfying those criteria

340
00:12:28,240 --> 00:12:29,920
so we proposed the platform and

341
00:12:29,920 --> 00:12:32,320
architecture agnostic solution combining

342
00:12:32,320 --> 00:12:35,360
dfg isomorphism with symbolic execution

343
00:12:35,360 --> 00:12:37,839
operating on a custom dsl to identify

344
00:12:37,839 --> 00:12:40,160
unknown cryptographic algorithms and

345
00:12:40,160 --> 00:12:42,240
finally we implemented and evaluated a

346
00:12:42,240 --> 00:12:44,320
proof of concept that performed well in

347
00:12:44,320 --> 00:12:46,079
terms of accuracy and running time

348
00:12:46,079 --> 00:12:49,040
against relevant targets

349
00:12:49,040 --> 00:12:50,880
that's all thank you for listening and

350
00:12:50,880 --> 00:12:52,800
more details you can check out the paper

351
00:12:52,800 --> 00:12:54,560
in the reference code or send us an

352
00:12:54,560 --> 00:12:57,560
email

